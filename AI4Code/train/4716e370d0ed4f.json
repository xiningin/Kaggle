{"cell_type":{"25959ce4":"code","6c83607e":"code","92592b39":"code","4e6f986a":"code","50ab7622":"code","de21338b":"code","3dee9e64":"code","0a6f7447":"code","4104ffef":"code","f18bbe7b":"code","e8c69316":"code","34483906":"code","f2f6f066":"code","8a44719f":"code","68476457":"code","35cb70f3":"code","cd7bb014":"code","20ece5b2":"code","40d31a18":"code","cd132aa9":"code","d27d80e7":"code","082a7036":"code","7ee00495":"code","778431a3":"code","214cb0a3":"code","9d337b14":"code","cb577d5c":"markdown","87b70b56":"markdown","602c2d14":"markdown","747b57cc":"markdown","c6476ab6":"markdown","8d247d25":"markdown","b0c6d9c7":"markdown","ecfb5b70":"markdown","f1e65377":"markdown","a4d9de3c":"markdown","d2e770bd":"markdown"},"source":{"25959ce4":"import os\nimport time\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# sns.set_style(\"whitegrid\")\n\nsns.set_palette('Set1')\nplt.rcParams['figure.figsize'] = (20, 8)\nplt.rcParams['figure.dpi'] = 200\n\n# plt.rcParams['axes.grid'] = False\n\nimport warnings\nwarnings.filterwarnings('ignore')","6c83607e":"DATA_DIR = '..\/input\/house-prices-advanced-regression-techniques\/'\nos.listdir(DATA_DIR)\n\ntrain_df = pd.read_csv(DATA_DIR + 'train.csv')\ntest_df = pd.read_csv(DATA_DIR + 'test.csv')\nsub_df = pd.read_csv(DATA_DIR + 'sample_submission.csv')\n\nprint(' Train:', train_df.shape, ' Test:', test_df.shape, ' Sub:', sub_df.shape)","92592b39":"fig = sns.heatmap(train_df.isnull(), cbar=False, cmap='hot_r', yticklabels=[]).set_title('Missing Values', fontsize=24, y=1.1);","4e6f986a":"sns.countplot(train_df['Neighborhood']).set_title('Neighborhood count plot', fontsize=24, y=1.02);","50ab7622":"# cols = train_df.select_dtypes(include=['object']).columns\ncols = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',\n        'LotConfig', 'LandSlope', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n        'RoofStyle', 'RoofMatl','MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n        'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n        'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n        'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n        'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n        'SaleType', 'SaleCondition']\n\nn_rows, n_cols = len(cols)\/\/3, 3\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*6, n_rows*5))\nfig.suptitle('Count Plots', fontsize=26, y=1.015)\n\nfor r in range(n_rows):\n    for c in range(n_cols):\n        try:\n            i = r*n_cols+c\n            ax = axs[r][c]\n            sns.countplot(train_df[cols[i]], ax=ax)\n            ax.set_title(cols[i]+' count', fontsize=20)\n        except:\n            break\nplt.tight_layout()","de21338b":"# cols = list(train_df.select_dtypes(include=['float64']).columns) + list(train_df.select_dtypes(include=['int64']).columns)\ncols = ['Id', 'MSSubClass', 'LotArea', 'OverallQual', 'OverallCond',\n        'YearBuilt', 'YearRemodAdd', 'BsmtFinSF1', 'BsmtUnfSF',\n        'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LotFrontage', 'MasVnrArea', 'GarageYrBlt', \n        'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n        'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF', \n        'OpenPorchSF', 'MoSold', 'YrSold']\n\nn_rows, n_cols = len(cols)\/\/3, 3\nfig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*6, n_rows*5))\nfig.suptitle('Distribution Plots', fontsize=26, y=1.015)\n\nfor r in range(n_rows):\n    for c in range(n_cols):\n        try:\n            i = r*n_cols+c\n            ax = axs[r][c]\n            sns.distplot(train_df[cols[i]], color='#222f3e', ax=ax)\n            ax.set_title(cols[i]+' distribution', fontsize=20)\n        except:\n            print(cols[i])\nplt.tight_layout()","3dee9e64":"sns.distplot(train_df['SalePrice'], color='g').set_title('Sale Price distribution plot', fontsize=24, y=1.02);","0a6f7447":"sns.heatmap(train_df.corr(), annot=False, cmap='RdBu_r',\n            center=0, vmin=-1, vmax=1, linewidth=2, annot_kws={\"fontsize\":12},\n            square=False, cbar=True).set_title('Correlation matrix', fontsize=24, y=1.02);","4104ffef":"!pip install pycaret -q","f18bbe7b":"from pycaret.utils import version\nfrom pycaret.regression import *\nprint('Pycaret Verion:', version())","e8c69316":"reg = setup(train_df, target='SalePrice', session_id=42, experiment_name='house-prices', log_experiment=True, silent=True)","34483906":"models = compare_models(sort='RMSLE', n_select=25)","f2f6f066":"#### hacky\n\nplot_types = ['residuals', 'error', 'cooks', 'learning', 'vc', 'manifold', 'feature'] # 'rfe'\n\n# to plot same plots for different models\ndef plot_util(models, plot, title='Comparison plot'):\n    imgs = []\n    for model in models:\n        try: imgs.append(plt.imread(plot_model(model, plot=plot, save=True)))\n        except: imgs.append(np.ones((1100, 1600, 4)))\n\n    n_rows, n_cols = len(imgs)\/\/2, 2\n    fig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*3))\n    fig.suptitle(title, fontsize=12, y=0.89)\n    \n    for r in range(n_rows):\n        for c in range(n_cols):\n            i = r*n_cols+c\n            plt.subplot(n_rows, n_cols, i+1)\n            plt.imshow(imgs[i])\n            plt.axis('off')\n    fig.subplots_adjust(wspace=0, hspace=0)\n    \n# to plot all plots for same model\ndef model_all_plots(model, title='Model plot'):\n    imgs = []\n    for plot in plot_types:\n        try: imgs.append(plt.imread(plot_model(model, plot=plot, save=True)))\n        except: imgs.append(np.ones((1100, 1600, 4)))\n    \n    n_rows, n_cols = len(imgs)\/\/2, 2\n    fig, axs = plt.subplots(n_rows, n_cols, figsize=(n_cols*4, n_rows*3))\n    fig.suptitle(title, fontsize=12, y=0.89)\n\n    for r in range(n_rows):\n        for c in range(n_cols):\n            i = r*n_cols+c\n            plt.subplot(n_rows, n_cols, i+1)\n            plt.imshow(imgs[i])\n            plt.axis('off')\n    fig.subplots_adjust(wspace=0, hspace=0)","8a44719f":"# test plot\n\nplot_model(models[0], plot='feature')\n\n# plot params\n\nsns.set_palette('Set1')\nplt.rcParams['axes.titlesize'] = 18\nplt.rcParams['savefig.dpi'] = 200\nplt.rcParams['savefig.bbox'] = 'tight'\nplt.rcParams['savefig.pad_inches'] = 0.3","68476457":"plot_util(models, 'residuals', 'Residual Comparison Plot')","35cb70f3":"plot_util(models, 'error', 'Prediction Error Comparison Plot')","cd7bb014":"plot_util(models, 'cooks', \"Cook's Distance Outlier Comparison Plot\")","20ece5b2":"plot_util(models, 'learning', 'Learning Curve Comparison Plot')","40d31a18":"plot_util(models, 'vc', 'Validation Curve Comparison Plot')","cd132aa9":"plot_util(models, 'feature', 'Feature Importance Comparison Plot')","d27d80e7":"plot_model(model, plot='manifold')","082a7036":"final_model = models[0]","7ee00495":"model_all_plots(final_model, 'Final Model Plots')","778431a3":"interpret_model(final_model, plot='summary')","214cb0a3":"predictions = predict_model(final_model, data=test_df)","9d337b14":"submission = predictions[['Id', 'Label']].rename(columns={'Label': 'SalePrice'})\nsubmission.to_csv('submission.csv', index=False)\nprint('Saved submission.csv')\nsubmission.head()","cb577d5c":"# Multi Model Benchmark","87b70b56":"### Load Data","602c2d14":"# Basic EDA","747b57cc":"---","c6476ab6":"## Analyse all models","8d247d25":"Compare various models to find the best model","b0c6d9c7":"# House Prices Models Benchmark<br\/><sup>Regression<\/sup>\n\n\n### **Dataset:**  [house-prices](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data)\n#### Classification Benchmark: [Titanic Models Benchmark](https:\/\/www.kaggle.com\/aravrs\/titanic-models-benchmark)\n\n<sup style=\"color:red;\">Work in progess.<\/sup><br\/>\n\n---","ecfb5b70":"Various analytical plots of models from best to worst. <br\/>\n> If a metric\/plot is not possible for a particular model, it's left blank.","f1e65377":"### Make predictions","a4d9de3c":"Install the necessary libraries and setup the environment","d2e770bd":"## The Best Model"}}