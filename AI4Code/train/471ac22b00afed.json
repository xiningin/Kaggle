{"cell_type":{"14504c47":"code","a56d4587":"code","08c21c87":"code","f425831a":"code","150baf71":"code","43b87559":"code","7858ca06":"code","bc3f90b5":"code","bcab9049":"code","d5ec79f9":"code","9cd55e2c":"code","3c9e1398":"code","087b3e41":"code","8776c8fc":"code","df793621":"markdown","51f7dc09":"markdown","654adc40":"markdown","d9522923":"markdown","e0ad0cd5":"markdown"},"source":{"14504c47":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\n# import matplotlib as mpl\n# import matplotlib.pyplot as plt","a56d4587":"ls ..\/input","08c21c87":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')\n\n# Sex\u306e\u5909\u63db\ngenders = {'female': 0, 'male':1}\ntrain['Sex'] = train['Sex'].map(genders)\ntest['Sex'] = test['Sex'].map(genders)\n\n# Embarked\u306e\u5909\u63db\nembarked = {'S':0, 'C':1, 'Q':2}\ntrain['Embarked'] = train['Embarked'].map(embarked)\ntest['Embarked'] = test['Embarked'].map(embarked)\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n","f425831a":"X_train = train.drop('Survived', axis=1)\nY_train = train['Survived']","150baf71":"X_train.head()","43b87559":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')  # , importance_type='gain'\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],\n        early_stopping_rounds=20,\n        verbose=-1)\n\n# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2));  # valid\u306escore\n","7858ca06":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2))  # valid\u306escore\n","bc3f90b5":"test_pred = gbm.predict(test, num_iteration=gbm.best_iteration_)\nsample_submission['Survived'] = test_pred\nsample_submission.to_csv('train_test_split.csv', index=False)  # score:75.119\n","bcab9049":"gbm.get_params()","d5ec79f9":"gbm.feature_importances_","9cd55e2c":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importances_}).sort_values('importance',\n    ascending=False)","3c9e1398":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary', importance_type='gain') \n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],\n        early_stopping_rounds=20,\n        verbose=-1);","087b3e41":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importances_}).sort_values('importance',\n    ascending=False)","8776c8fc":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train= lgb.Dataset(train_x, train_y, categorical_feature=['Sex', 'Embarked'])\nlgb_eval = lgb.Dataset(valid_x, valid_y, categorical_feature=['Sex', 'Embarked'])\n\nlgbm_params = {'objective': 'binary'}\n\n# lgb.train\u3067\u5b66\u7fd2\ngbm = lgb.train(params = lgbm_params,  # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u8f9e\u66f8\u3067\u6e21\u3059\n                        train_set = lgb_train,\n                        valid_sets=lgb_eval,\n                        early_stopping_rounds=20,\n                        verbose_eval=-1)\n\n# predict\u306f\u30010\u304b\u30891\u306e\u5c11\u6570\u3067\u306e\u51fa\u529b\u5024\u306enumpy array\u3067\u306e\u51fa\u529b\u3068\u306a\u308b\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration)\n\npreds = (oof > 0.5).astype(int)\nprint('score', round(accuracy_score(valid_y, preds)*100,2))\n","df793621":"## B.2 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6307\u5b9a\n","51f7dc09":"## B.3 \u91cd\u8981\u5ea6\u306e\u8868\u793a","654adc40":"## B.4 Scikit-learn interface\u3092\u4f7f\u7528\u3057\u306a\u3044\u65b9\u6cd5","d9522923":"importance_type='gain'\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u65bd","e0ad0cd5":"# \u6b21\u306eNotebook\nhttps:\/\/www.kaggle.com\/currypurin\/simple-lightgbm"}}