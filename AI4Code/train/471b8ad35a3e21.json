{"cell_type":{"25f40d0f":"code","5004df20":"code","5f2630ae":"code","e2f3d6e8":"code","6357aec7":"code","bcc9da41":"code","df6dc571":"code","cf11c5a8":"code","175e56a0":"code","777ddb3a":"code","48145d58":"code","4e8749af":"code","71db755e":"code","62899590":"code","c46c5478":"code","f4f28140":"code","7edb5604":"code","f2df32d7":"code","123d1550":"code","3a35fc92":"code","27287822":"code","631c56af":"code","0b0914eb":"code","e428f09a":"code","9469f859":"code","101a147a":"code","9401caf3":"code","e7ff2138":"code","e7f9f765":"code","a5c11f03":"code","fec92a12":"code","adc3d29c":"markdown","2e3fbb7d":"markdown","a1af4cff":"markdown","f5187997":"markdown","3e9cf391":"markdown","40bd3cf1":"markdown","ea8e2991":"markdown","1d32bd81":"markdown","5a2425aa":"markdown"},"source":{"25f40d0f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport requests\nimport warnings\nimport json\nimport folium\nwarnings.filterwarnings('ignore')\nimport plotly.offline as py\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\npy.init_notebook_mode(connected=True)\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot","5004df20":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.sample(6)","5f2630ae":"# Cleaning data\n\n# fixing Country values\nfull_table.loc[full_table['Province\/State']=='Greenland', 'Country\/Region'] = 'Greenland'\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[['Confirmed', 'Deaths', 'Recovered', 'Active']] = full_table[['Confirmed', 'Deaths', 'Recovered', 'Active']].fillna(0)\n\n# fixing datatypes\nfull_table['Recovered'] = full_table['Recovered'].astype(int)\n\nfull_table.sample(6)","e2f3d6e8":"# Visualise Active, Deaths and Recovered\ntemp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n\ntm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=225, width=1200,\n                 color_discrete_sequence=['blue', 'green', 'red'])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n################################################################\ntemp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case', height=600,\n             title='Cases over time', color_discrete_sequence = ['green', 'red', 'blue'])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()\n################################################################\n# World wide Map\ntemp = full_table[full_table['Date'] == max(full_table['Date'])]\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=2, max_zoom=4, zoom_start=2)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', fill='crimson',\n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths']),\n        radius=int(temp.iloc[i]['Confirmed'])**0.5).add_to(m)\nm","6357aec7":"# Grouped by day, country\n\nfull_grouped = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n\n# new cases \ntemp = full_grouped.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\n# renaming columns\ntemp.columns = ['Country\/Region', 'Date', 'New cases', 'New deaths', 'New recovered']\n\n# merging new values\nfull_grouped = pd.merge(full_grouped, temp, on=['Country\/Region', 'Date'])\n\n# filling na with 0\nfull_grouped = full_grouped.fillna(0)\n\n# fixing data types\ncols = ['New cases', 'New deaths', 'New recovered']\nfull_grouped[cols] = full_grouped[cols].astype('int')\nfull_grouped['New cases'] = full_grouped['New cases'].apply(lambda x: 0 if x<0 else x)\n\n################################################################\n\n# Over the time\nfig = px.choropleth(full_grouped, locations=\"Country\/Region\", locationmode='country names', color=np.log(full_grouped[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\", animation_frame=full_grouped[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.Purp)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","bcc9da41":"fig = px.bar(full_grouped, x=\"Date\", y=\"Confirmed\", color='Country\/Region', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n################################################################\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"Deaths\", color='Country\/Region', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()\n\n################################################################\n\nfig = px.bar(full_grouped, x=\"Date\", y=\"New cases\", color='Country\/Region', height=600,\n             title='New cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","df6dc571":"# Country wise\n\n# getting latest values\ncountry_wise = full_grouped[full_grouped['Date']==max(full_grouped['Date'])].reset_index(drop=True).drop('Date', axis=1)\n\n# group by country\ncountry_wise = country_wise.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases'].sum().reset_index()\n\n# per 100 cases\ncountry_wise['Deaths \/ 100 Cases'] = round((country_wise['Deaths']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Recovered \/ 100 Cases'] = round((country_wise['Recovered']\/country_wise['Confirmed'])*100, 2)\ncountry_wise['Deaths \/ 100 Recovered'] = round((country_wise['Deaths']\/country_wise['Recovered'])*100, 2)\n\ncols = ['Deaths \/ 100 Cases', 'Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered']\ncountry_wise[cols] = country_wise[cols].fillna(0)\n\ncountry_wise.head()","cf11c5a8":"# confirmed - deaths\nconfirmed_plot = px.bar(country_wise.sort_values('Confirmed').tail(15), x=\"Confirmed\", y=\"Country\/Region\", \n               text='Confirmed', orientation='h', color_discrete_sequence = ['blue'])\ndeaths_plot = px.bar(country_wise.sort_values('Deaths').tail(15), x=\"Deaths\", y=\"Country\/Region\", \n               text='Deaths', orientation='h', color_discrete_sequence = ['red'])\n# recovered - active\nrecovered_plot = px.bar(country_wise.sort_values('Recovered').tail(15), x=\"Recovered\", y=\"Country\/Region\", \n               text='Recovered', orientation='h', color_discrete_sequence = ['green'])\nactive_plot = px.bar(country_wise.sort_values('Active').tail(15), x=\"Active\", y=\"Country\/Region\", \n               text='Active', orientation='h', color_discrete_sequence = ['#333333'])\n\n# plot\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Confirmed cases', 'Deaths reported', 'Recovered', 'Active cases'))\nfig.add_trace(confirmed_plot['data'][0], row=1, col=1)\nfig.add_trace(deaths_plot['data'][0], row=1, col=2)\nfig.add_trace(recovered_plot['data'][0], row=2, col=1)\nfig.add_trace(active_plot['data'][0], row=2, col=2)\nfig.show()","175e56a0":"fig = px.scatter(country_wise.sort_values('Deaths', ascending=False).iloc[:25, :], \n                 x='Confirmed', y='Deaths', color='Country\/Region', size='Confirmed', height=700,\n                 text='Country\/Region', log_x=True, log_y=True, title='Deaths vs Confirmed (Scale is in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","777ddb3a":"full_latest = full_table[full_table['Date'] == max(full_table['Date'])]\n                         \nfig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","48145d58":"%%HTML\n<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1571387\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>","4e8749af":"# Load Data\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nage_groups = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\ncovid19India = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospitalBeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\n# icmrTestDetails = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nicmrTestLabs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nindiaCencus = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\nstateDetails = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')","71db755e":"individual_details.head()","62899590":"age_groups.head(10)","c46c5478":"# Age has multiple values, so split column\nage_split_data=individual_details['age'].str.split(\"-\",expand=True)\nage_split_data.columns=['age','age2']\nage_split_data.head()\nage_split_data['age'] = pd.to_numeric(age_split_data['age'])\n\nplt.figure(figsize=[10,8])\nsns.distplot(age_split_data['age'],bins=10,kde=False)\nplt.xlabel(\"Age\", fontsize=15)\nplt.ylabel(\"Frequency\",fontsize=15)\nplt.show()","f4f28140":"plt.figure(figsize=(14,8))\nsns.countplot(data=individual_details,x='gender',order=individual_details['gender'].value_counts().index)\nplt.title('Gender Distribution')\nplt.xlabel('Gender')\nplt.ylabel('Total Cases')\norder2 = individual_details['gender'].value_counts()\n\nfor i in range(order2.shape[0]):\n    count = order2[i]\n    strt='{:0.1f}%'.format(100*count \/ individual_details.gender.dropna().count() )\n    plt.text(i,count+2,strt,ha='center')","7edb5604":"# Fill Gender NA values with Missing\nindividual_details.gender.fillna('Missing',inplace = True)\nplt.figure(figsize=(14,8))\nsns.countplot(data=individual_details,x='gender',order=individual_details['gender'].value_counts().index)\nplt.title('Gender Distribution')\nplt.xlabel('Gender')\nplt.ylabel('Total Cases')\norder2 = individual_details['gender'].value_counts()\n\nfor i in range(order2.shape[0]):\n    count = order2[i]\n    strt='{:0.1f}%'.format(100*count \/ individual_details.gender.dropna().count() )\n    plt.text(i,count+2,strt,ha='center')","f2df32d7":"covid19India.head(10)","123d1550":"covid19India['Date'] = pd.to_datetime(covid19India['Date'],dayfirst=True)\ndf1=covid19India.groupby('Date').sum()\ndf1.reset_index(inplace=True)\nprint(df1)","3a35fc92":"plt.figure(figsize= (14,8))\n\nax1 = sns.lineplot(data=df1, x=\"Date\", y=\"Confirmed\",markers=True,color = 'blue',label=\"Confirmed\")\nax2 = sns.lineplot(data=df1, x=\"Date\",y='Cured',markers=True,color = 'green',label=\"Cured\")\nax3 = sns.lineplot(data=df1, x=\"Date\",y='Deaths',markers=True,color = 'red',label=\"Deaths\")\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total Cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)","27287822":"df2=df1.tail(30)\ndf2['Date'] = df2['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))\nplt.figure(figsize=(20,8))\nsns.barplot(data=df2,x='Date',y='Confirmed',color=sns.color_palette('Set3')[5],label='Confirmed')\nsns.barplot(data=df2,x='Date',y='Cured',color=sns.color_palette('Set3')[2],label='Cured')\nsns.barplot(data=df2,x='Date',y='Deaths',color=sns.color_palette('Set3')[3],label='Deaths')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.xticks(rotation = 90)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\nplt.legend(frameon=True,fontsize=12);","631c56af":"state_cases=covid19India.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - abs((state_cases['Deaths']- state_cases['Cured']))\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\n(state_cases.sort_values('Confirmed', ascending= False)\n.fillna(0)\n.style\n.background_gradient(cmap='Greys',subset=[\"Confirmed\"])\n.background_gradient(cmap='Blues',subset=[\"Deaths\"])\n.background_gradient(cmap='Greens',subset=[\"Cured\"])\n.background_gradient(cmap='Purples',subset=[\"Active\"])\n.background_gradient(cmap='Reds',subset=[\"Death Rate (per 100)\"])\n.background_gradient(cmap='Oranges',subset=[\"Cure Rate (per 100)\"]))","0b0914eb":"state_cases=state_cases.sort_values('Confirmed', ascending= False).fillna(0)\nstate_cases=state_cases.head(15)\nstate_cases\nplt.figure(figsize=(20,8))\nsns.barplot(data=state_cases,x='State\/UnionTerritory',y='Confirmed',color=sns.color_palette('Set3')[3],label='Confirmed')\nsns.barplot(data=state_cases,x='State\/UnionTerritory',y='Active',color=sns.color_palette('Set3')[7],label='Active')\nsns.barplot(data=state_cases,x='State\/UnionTerritory',y='Cured',color=sns.color_palette('Set3')[8],label='Cured')\nsns.barplot(data=state_cases,x='State\/UnionTerritory',y='Deaths',color=sns.color_palette('Set3')[9],label='Deaths')\nplt.xticks(rotation=90)\nplt.legend();","e428f09a":"fig = px.treemap(state_cases,path=['State\/UnionTerritory'],values='Active',hover_data=['Confirmed','Deaths','Cured'],color='Active',\n                 color_continuous_scale='Reds')\nfig.show()","9469f859":"df3=individual_details.groupby(['detected_state','detected_district']).count()\ndf3.reset_index(inplace=True)\nstates_list=['Maharashtra','Gujarat','Delhi','Rajasthan','Madhya Pradesh','Tamil Nadu','Uttar Pradesh','Telangana','Andhra Pradesh',\n            'West Bengal','Karnataka','Kerala','Jammu and Kashmir','Punjab','Haryana']\nplt.figure(figsize=(20,60))\nfor i,state in enumerate(states_list):\n    plt.subplot(8,2,i+1)\n    df4=df3[df3['detected_state']==state].sort_values('id',ascending=False)\n    df4=df4.head(10)\n    sns.barplot(data=df4,x='id',y='detected_district')\n    plt.xlabel('Number of Cases')\n    plt.ylabel('')\n    plt.title(state)\nplt.tight_layout()\nplt.show()","101a147a":"states_list=['Maharashtra','Gujarat','Delhi','Rajasthan','Madhya Pradesh','Tamil Nadu','Uttar Pradesh','Andhra Pradesh',\n            'West Bengal','Karnataka','Kerala','Jammu and Kashmir','Punjab','Haryana']\ndf5=covid19India[covid19India['Date']>'2020-04-07']\ndf5=df5.groupby(['Date','State\/UnionTerritory']).sum()\ndf5.reset_index(inplace=True)\ndf5['Date'] = df5['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))\nplt.figure(figsize=(20,60))\n\nfor i,state in enumerate(states_list):\n    plt.subplot(7,2,i+1)\n    df4=df5[df5['State\/UnionTerritory']==state]\n    plt.bar(df4.Date,df4.Confirmed,label='Confirmed')\n    plt.bar(df4.Date,df4.Cured,label='Cured')\n    plt.bar(df4.Date,df4.Deaths,label='Death')\n    plt.xticks(rotation=90)\n    plt.title(state)\n    plt.ylabel('Total Cases')\n    plt.xlabel('Date')\n    plt.legend()\nplt.tight_layout()\nplt.show()","9401caf3":"covid19India['Date'] = pd.to_datetime(covid19India['Date'],dayfirst=True)\ndata=covid19India.groupby(['Date','State\/UnionTerritory'])['Confirmed','Cured','Deaths'].sum()\ndata.reset_index(inplace=True)\ndata['Date']=data['Date'].apply(lambda x: x.strftime('%d-%m-%Y'))\n\n\nstate_cases=covid19India.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\n\nwith open('..\/input\/india-geojson-file\/state\/india_state.geojson') as file:\n    geojsonData = json.load(file)\n    \nfor i in geojsonData['features']:\n    if(i['properties']['NAME_1']=='Orissa'):\n        i['properties']['NAME_1']='Odisha'\n    elif(i['properties']['NAME_1']=='Uttaranchal'):\n        i['properties']['NAME_1']='Uttarakhand'\n    \nfor i in geojsonData['features']:\n    i['id'] = i['properties']['NAME_1']\n    \ndata = state_cases\n\nmap_choropleth = folium.Map(location = [20.5937,78.9629], zoom_start = 4)\n\nfolium.Choropleth(geo_data=geojsonData,\n                 data=data,\n                 name='CHOROPLETH',\n                 key_on='feature.id',\n                 columns = ['State\/UnionTerritory','Confirmed'],\n                 fill_color='YlOrRd',\n                 fill_opacity=0.7,\n                 line_opacity=0.8,\n                 legend_name='Confirmed Cases',\n                 highlight=True).add_to(map_choropleth)\n\nfolium.LayerControl().add_to(map_choropleth)\n\ndisplay(map_choropleth)","e7ff2138":"fig = px.treemap(icmrTestLabs, path=['state','city'],\n                  color='city', hover_data=['lab','address'],\n                  color_continuous_scale='Greens')\nfig.show()","e7f9f765":"state=list(icmrTestLabs['state'].value_counts().index)\ncount=list(icmrTestLabs['state'].value_counts())\nplt.figure(figsize=(20,8))\nsns.barplot(x=state,y=count,color=sns.color_palette('Set2')[6])\nplt.xlabel('State')\nplt.ylabel('Count')\nplt.title('ICMR Test labs per States')\nplt.xticks(rotation=90)\nplt.tight_layout()","a5c11f03":"plt.figure(figsize=(20,60))\nplt.subplot(4,1,1)\nhospitalBeds=hospitalBeds.sort_values('NumUrbanHospitals_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumUrbanHospitals_NHP18',color=sns.color_palette('Pastel2')[6])\nplt.title('Urban Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumUrbanHospitals_NHP18']\n    plt.text(count+100,i,count,ha='center',va='center')\n\nplt.subplot(4,1,2)\nhospitalBeds=hospitalBeds.sort_values('NumRuralHospitals_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumRuralHospitals_NHP18',color=sns.color_palette('Pastel2')[7])\nplt.title('Rural Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumRuralHospitals_NHP18']\n    plt.text(count+500,i,count,ha='center',va='center')\n\nplt.subplot(4,1,3)\nhospitalBeds=hospitalBeds.sort_values('NumUrbanBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumUrbanBeds_NHP18',color=sns.color_palette('Pastel2')[3])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumUrbanBeds_NHP18']\n    plt.text(count+3000,i,count,ha='center',va='center')\n\nplt.subplot(4,1,4)\nhospitalBeds=hospitalBeds.sort_values('NumRuralBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumRuralBeds_NHP18',color=sns.color_palette('Pastel2')[2])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumRuralBeds_NHP18']\n    plt.text(count+3000,i,count,ha='center',va='center')\n\nplt.show()\nplt.tight_layout()\n","fec92a12":"pred = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\npred = pred[pred[\"Country\/Region\"]==\"India\"]\npred = pred.fillna(0)\npredgrp = pred.groupby(\"Date\")[[\"Confirmed\",\"Recovered\",\"Deaths\"]].sum().reset_index()\n\n#Model\npred_cnfrm = predgrp.loc[:,[\"Date\",\"Confirmed\"]]\npr_data = pred_cnfrm\npr_data.columns = ['ds','y']\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\n\nfig = plot_plotly(m, forecast)\npy.iplot(fig)\n\nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","adc3d29c":"# COVID-19 in India ","2e3fbb7d":"Gender Distribution","a1af4cff":"**Prediction by Prophet Model**","f5187997":"Source \nhttps:\/\/app.flourish.studio\/visualisation\/1571387\/edit","3e9cf391":"This shows that there is a large number or records with missing values.","40bd3cf1":"**Total Cases breakdown** - Confirmed,Active,Deaths","ea8e2991":"# Worldwide Trend","1d32bd81":"**Testing and healthcare insights**","5a2425aa":"Age Group Distribution"}}