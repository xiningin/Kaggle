{"cell_type":{"48367622":"code","6ebf26f5":"code","b7032842":"code","97a98c69":"code","d84d01c2":"code","def6ddf3":"code","2a76ba75":"code","cccc3ce5":"code","327e6237":"code","8ca0f949":"code","cc65cee0":"code","814ec81a":"code","3ab0a7f0":"code","79ae329d":"code","f7e9e40e":"code","27eac4c9":"code","8f9fbcff":"code","4fc73e55":"code","553983a5":"code","fce12d55":"code","38187d12":"code","aa4a01c4":"code","46c17d03":"code","e87aaf4c":"code","e610256e":"code","18efb798":"markdown","bbe97714":"markdown","2b4671b9":"markdown","8410e89b":"markdown","4ab9ba4b":"markdown","a4d84f6e":"markdown","b454b24a":"markdown","7936bc5f":"markdown","57219e37":"markdown","aeb0d8b2":"markdown","18e495d6":"markdown","f06df72e":"markdown","ebfea0ac":"markdown","3d3e5002":"markdown"},"source":{"48367622":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ebf26f5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b7032842":"df = pd.read_csv('\/kaggle\/input\/heart-disease-prediction-using-logistic-regression\/framingham.csv')","97a98c69":"df.head()","d84d01c2":"df.isna().sum()","def6ddf3":"df['education'].fillna(value = df['education'].std(), inplace = True)\ndf['cigsPerDay'].fillna(value = df['cigsPerDay'].std(), inplace = True)\ndf['BPMeds'].fillna(value = df['BPMeds'].std(), inplace = True)\ndf['totChol'].fillna(value = df['totChol'].std(), inplace = True)\ndf['BMI'].fillna(value = df['BMI'].median(), inplace = True)\ndf['heartRate'].fillna(value = df['heartRate'].std(), inplace = True)\ndf['glucose'].fillna(value = df['glucose'].std(), inplace = True)","2a76ba75":"df.isna().sum() #All missing values have been taken care of","cccc3ce5":"df.head()","327e6237":"df.describe()","8ca0f949":"sns.distplot(df['currentSmoker'], kde = False)","cc65cee0":"sns.pairplot(df)","814ec81a":"sns.boxplot(x = 'currentSmoker', y = 'totChol', data = df, hue = 'male')","3ab0a7f0":"subdf1 = df[['age', 'currentSmoker']]","79ae329d":"subdf1.head()","f7e9e40e":"subdf1_corr = subdf1.corr() #finding correlation","27eac4c9":"sns.heatmap(data = subdf1_corr, annot = True, cmap = 'coolwarm')","8f9fbcff":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","4fc73e55":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30)","553983a5":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators = 10, criterion = 'entropy')\nmodel.fit(X_train, y_train)","fce12d55":"y_pred = model.predict(X_test)","38187d12":"from sklearn.metrics import confusion_matrix\nimport itertools\n\ndef plot_confusion_matrix(cm, classes,\n                        normalize=False,\n                        title='Confusion matrix',\n                        cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","aa4a01c4":"cm_plot_labels = ['No Heart Disease','Heart Disease']","46c17d03":"cm = confusion_matrix(y_true=y_test, y_pred=y_pred)","e87aaf4c":"plot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')","e610256e":"accuracy = (cm[0][0]+cm[1][1])\/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])\nprint('Accuracy is:',accuracy * 100)","18efb798":"**Plotting the Confusion Matrix**","bbe97714":"# Let's get some Plotting Insights!","2b4671b9":"**Predicting the results on the test set**","8410e89b":"![](https:\/\/2rdnmg1qbg403gumla1v9i2h-wpengine.netdna-ssl.com\/wp-content\/uploads\/sites\/3\/2017\/01\/HeartAnatomy-745x490.jpg)","4ab9ba4b":"# Importing Necessary Libraries","a4d84f6e":"**Training the Decision Trees Model**","b454b24a":"**Let's find the correlation between ages and smokers!**","7936bc5f":"# Accuracy of the Model on the Test Set","57219e37":"**Taking Care of Missing Values**","aeb0d8b2":"**From the above heatmap, we can see that there is a negative correlation between the current smokers and their ages, this simply means that the people that have younger ages represent the maximum amount of smokers :(**","18e495d6":"# Let's train our model!","f06df72e":"**Taking the dataset as a DataFrame**","ebfea0ac":"**Splitting into train set and test set**","3d3e5002":"# Data Preprocessing"}}