{"cell_type":{"5a117180":"code","c4dabf3f":"code","1466eccc":"code","ce1b9d19":"code","54064125":"code","f3e8b2c6":"code","a6060ac2":"code","07a75a4e":"code","71d1bf7c":"code","e9bb8dd0":"code","b93c0a6d":"code","223b02f7":"markdown","2f081f0e":"markdown","ad947bcb":"markdown","85a08fd4":"markdown","f1f5ec9e":"markdown","7c18b0fc":"markdown","1706a00f":"markdown"},"source":{"5a117180":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4dabf3f":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nSS = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","1466eccc":"train.head(5)","ce1b9d19":"test.head(5)","54064125":"train_label = train[\"label\"]\ntrain_feature = train.drop([\"label\"],axis=1)","f3e8b2c6":"train_x = train_feature.iloc[0:35000,:]\ntrain_y = train_label.iloc[0:35000]\ntest_x = train_feature.iloc[35000:,:]\ntest_y = train_label.iloc[35000:]\n\n","a6060ac2":"DTC = RandomForestClassifier(random_state=1)\nDTC.fit(train_x,train_y)\npred = DTC.predict(test_x)\n","07a75a4e":"lst_pred = list(pred)\nlst_test_y = list(test_y)\ncount = 0\nfor i in range (0,7000):\n    if (lst_pred[i]==lst_test_y[i]):\n        count = count+1\naccuracy = (count\/7000)*100\nprint(accuracy)\n\n    ","71d1bf7c":"DTC = RandomForestClassifier(random_state=1)\nDTC.fit(train_feature,train_label)\npred1 = DTC.predict(test)\n","e9bb8dd0":"\nsub = pd.DataFrame({'ImageId':SS[\"ImageId\"],'Label':pred1})","b93c0a6d":"sub.to_csv(\"submissionnew.csv\", index= False)\n","223b02f7":"We see that the accuracy of the model is good enough, we are ready to implement the model on the entire training set","2f081f0e":"Splitting the training set into features and label","ad947bcb":"Importing the dataset","85a08fd4":"training set","f1f5ec9e":"implementing Decision tree classifier after splitting the training data into two part which will subsequently be used to check the accuracy of the model","7c18b0fc":"Implementation of decision tree classifier model","1706a00f":"test set"}}