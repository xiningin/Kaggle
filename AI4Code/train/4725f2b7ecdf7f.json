{"cell_type":{"6cb897fb":"code","7c54c983":"code","5919bdbd":"code","d4cd65ba":"code","7d0ae206":"code","56734d24":"code","59de9452":"code","000a3705":"code","4908bb29":"code","b5470312":"code","82461885":"code","9f4ec6d1":"code","41e3d57c":"code","ab5ceee4":"code","74ba778a":"code","08ec1045":"code","040068d1":"code","bb27ab3d":"code","abe9e768":"code","e69f208e":"code","cab83e93":"code","bd3cd012":"code","e828b36b":"code","aace2a1b":"code","a59cce2a":"code","41e3a0e4":"code","60529a88":"code","f9276414":"code","84d2d509":"code","2f5e8692":"code","ce041059":"code","de2c2412":"code","81581f04":"code","648e5296":"code","058a4489":"code","61048792":"code","7b658268":"code","fe67c89e":"code","4bef75e4":"code","db25401d":"code","d69b2cde":"code","32c69d8a":"code","66c5a2d5":"code","9b23499d":"code","657b8560":"code","d7d2cb1f":"code","1b2d2d7e":"code","a881ddbd":"code","cc951f96":"code","28612fcf":"code","8b51c67f":"code","70a7ab6c":"code","6b6577a0":"code","3738bf35":"code","cf41e80b":"code","b9377e9e":"code","7cd67cc5":"code","1bab64d4":"code","7f42c6af":"code","532a3fce":"code","62c863e3":"code","e92247ca":"code","573fd202":"code","304b10d3":"code","3569e38e":"code","27398d30":"markdown","a8bf9fe2":"markdown","0352b140":"markdown","6ee5c9ad":"markdown","78fa8c01":"markdown","96afb1e9":"markdown","63b81c2c":"markdown","08e528f8":"markdown","e508ccd3":"markdown","fded8263":"markdown","1f4c9811":"markdown","28d6666a":"markdown"},"source":{"6cb897fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c54c983":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style('darkgrid')\nimport gc","5919bdbd":"train = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")\nitems = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_cat = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nShops = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")","d4cd65ba":"display(train.head())\ndisplay(test.head())\ndisplay(items.head())\ndisplay(item_cat.head())\ndisplay(Shops.head())\ndisplay(submission.head())","7d0ae206":"train = pd.merge(train, items, on='item_id', how='inner')\ntrain = pd.merge(train, item_cat, on='item_category_id', how='inner')\ntrain = pd.merge(train, Shops, on='shop_id', how='inner')\n\ntest = pd.merge(test, items, on='item_id', how='inner')\ntest = pd.merge(test, item_cat, on='item_category_id', how='inner')\ntest = pd.merge(test, Shops, on='shop_id', how='inner')","56734d24":"display(train.head())\ndisplay(test.head())","59de9452":"display(train.shape)\ndisplay(test.shape)","000a3705":"display(train.info())\ndisplay(test.info())","4908bb29":"display(train.dtypes)\ndisplay(test.dtypes)","b5470312":"display(train.count())\ndisplay(test.count())","82461885":"print('Number of duplicates in train:', len(train[train.duplicated()]))\nprint('Number of duplicates in test:', len(test[test.duplicated()]))","9f4ec6d1":"train.describe()","41e3d57c":"plt.figure(figsize=(8,6))\nsns.heatmap(train.corr(), annot=True, cbar=False, cmap='coolwarm')","ab5ceee4":"items.head()","74ba778a":"items.shape","08ec1045":"items.dtypes","040068d1":"items.count()","bb27ab3d":"print('Number of Duplicates in item:', len(items[items.duplicated()]))","abe9e768":"print('Unique item names:', len(items['item_name'].unique()))","e69f208e":"items.item_id.nunique()","cab83e93":"items.item_category_id.nunique()","bd3cd012":"plt.figure(figsize=(18,18))\nitems.groupby('item_category_id')['item_id'].size().plot.barh(rot=0)\nplt.title('Number of items related to different categories')\nplt.xlabel('Categories')\nplt.ylabel('Number of items');","e828b36b":"items.groupby('item_category_id')['item_id'].size().mean()","aace2a1b":"items.groupby('item_category_id')['item_id'].size().max()","a59cce2a":"items.groupby('item_category_id')['item_id'].size().min()","41e3a0e4":"item_cat[item_cat['item_category_id'].isin(items.groupby('item_category_id')['item_id'].size().nlargest(5).index)]","60529a88":"item_cat[item_cat['item_category_id']\\\n                .isin((items.groupby('item_category_id')['item_id'].size()[items.groupby('item_category_id')['item_id'].size()==1])\\\n                      .index)]","f9276414":"plt.figure(figsize=(10, 5))\nsns.distplot(train['item_id'], color=\"red\");","84d2d509":"plt.figure(figsize=(10, 5))\nsns.distplot(train['item_price'], color=\"red\");","2f5e8692":"plt.figure(figsize=(10, 5))\nsns.distplot(np.log(train['item_price']), color=\"red\");","ce041059":"item_cat.head()","de2c2412":"item_cat.shape","81581f04":"item_cat.dtypes","648e5296":"item_cat.count()","058a4489":"print('Number of Duplicates in item_cat:', len(item_cat[item_cat.duplicated()]))","61048792":"print('Unique item names:', len(item_cat['item_category_id'].unique()))","7b658268":"item_cat['item_category_id'].nunique()","fe67c89e":"item_cat['item_category_id'].values","4bef75e4":"Shops.head()","db25401d":"Shops.shape","d69b2cde":"Shops.dtypes","32c69d8a":"Shops.count()","66c5a2d5":"color = sns.color_palette(\"hls\", 8)\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15, 5))\nsns.countplot(x=train['shop_id'], data=train, palette=color)","9b23499d":"train.isnull().sum()","657b8560":"test.isnull().sum()","d7d2cb1f":"items.isnull().sum()","1b2d2d7e":"item_cat.isnull().sum()","a881ddbd":"Shops.isnull().sum()","cc951f96":"plt.figure(figsize=(8,6))\nsns.boxplot(x='item_price', data=train)","28612fcf":"plt.hist(x='item_price')","8b51c67f":"train.item_cnt_day.plot()\nplt.title(\"Number of products sold per day\");","70a7ab6c":"train.item_price.hist()\nplt.title(\"Item Price Distribution\");","6b6577a0":"sns.pairplot(train)","3738bf35":"def Box_plots(df):\n    plt.figure(figsize=(10, 4))\n    plt.title(\"Box Plot\")\n    sns.boxplot(df)\n    plt.show()\nBox_plots(train['item_price'])\nBox_plots(train['item_cnt_day'])","cf41e80b":"# First we create a dataframe with the raw sales data, which we'll reformat later\nsales = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv', parse_dates=['date'], infer_datetime_format=True, dayfirst=True)\nsales.head()","b9377e9e":"# Now we convert the raw sales data to monthly sales, broken out by item & shop\n# This placeholder dataframe will be used later to create the actual training set\ndf = sales.groupby([sales.date.apply(lambda x: x.strftime('%Y-%m')),'item_id','shop_id']).sum().reset_index()\ndf = df[['date','item_id','shop_id','item_cnt_day']]\ndf = df.pivot_table(index=['item_id','shop_id'], columns='date', values='item_cnt_day', fill_value=0).reset_index()\ndf.head()","7cd67cc5":"# Merge the monthly sales data to the test data\n# This placeholder dataframe now looks similar in format to our training data\ndf_test = pd.merge(test, df, on=['item_id','shop_id'], how='left')\ndf_test = df_test.fillna(0)\ndf_test.head()","1bab64d4":"# Remove the categorical data from our test data, we're not using it\ndf_test = df_test.drop(labels=['ID', 'shop_id', 'item_id', 'item_name', 'item_category_name', 'shop_name'], axis=1)\ndf_test.head()","7f42c6af":"# Now we finally create the actual training set\n# Let's use the '2015-10' sales column as the target to predict\nTARGET = '2015-10'\ny_train = df_test[TARGET]\nX_train = df_test.drop(labels=[TARGET], axis=1)\n\nprint(y_train.shape)\nprint(X_train.shape)\nX_train.head()","532a3fce":"print(y_train.shape)\nprint(X_train.shape)","62c863e3":"# Lastly we create the test set by converting the test data to a numpy matrix\n# We drop the first month so that our trained LSTM can output predictions beyond the known time range\n\nX_test = df_test.drop(labels=['2013-01'],axis=1)\nprint(X_test.shape)","e92247ca":"from lightgbm import LGBMRegressor\n#from sklearn.ensemble import RandomForestClassifier\n#model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n#model.fit(X_train, y_train)","573fd202":"model=LGBMRegressor(\n        n_estimators=200,\n        learning_rate=0.03,\n        num_leaves=32,\n        colsample_bytree=0.9497036,\n        subsample=0.8715623,\n        max_depth=8,\n        reg_alpha=0.04,\n        reg_lambda=0.073,\n        min_split_gain=0.0222415,\n        min_child_weight=40)","304b10d3":"print('Training time, it is...')\nmodel.fit(X_train, y_train)","3569e38e":"# Get the test set predictions and clip values to the specified range\ny_pred = model.predict(X_test).clip(0., 20.)\n\n# Create the submission file and submit!\npreds = pd.DataFrame(y_pred, columns=['item_cnt_month'])\npreds.to_csv('submission.csv',index_label='ID')","27398d30":"### 2. Bivariate Analysis\n\n- **Bivariate Analysis** : data involves **two different variables**.","a8bf9fe2":"<h2 style=\"color:green\" align=\"left\"> 5. Data Visualization <\/h2>\n\n- Used below **visualisation libraries**\n\n     1. Matplotlib\n     2. Seaborn (statistical data visualization)\n     \n     \n### 1. Univariate Analysis\n\n- Univariate Analysis : data consists of **only one variable (only x value)**.","0352b140":"### 3. Shop","6ee5c9ad":"<h2 style=\"color:blue\" align=\"left\"> 1. Importing Libraries <\/h2>","78fa8c01":"### 1. Items","96afb1e9":"### Missing Data","63b81c2c":"<h2 style=\"color:blue\" align=\"left\"> 6. Data Preprocessing <\/h2>","08e528f8":"> ### Descrition of this competition:\n\n|Data               |fields                                                                     |\n|-------------------|---------------------------------------------------------------------------|\n|ID                 |an Id that represents a (Shop, Item) tuple within the test set             |\n|shop_id            |unique identifier of a shop                                                |\n|item_id            |unique identifier of a product                                             |\n|item_category_id   |unique identifier of item category                                         |\n|item_cnt_day       |number of products sold.You are predicting a monthly amount of this measure|\n|item_price         |current price of an item                                                   |\n|date               |date in format dd\/mm\/yyyy                                                  |\n|date_block_num     |a consecutive month number, used for convenience. January 2013 is 0,       |\n|                   | February 2013 is 1,..., October 2015 is 33                                |\n|item_name          |name of item                                                               |\n|shop_name          |name of shop                                                               |\n|item_category_name |name of item category                                                      |","e508ccd3":"<h2 style=\"color:blue\" align=\"left\"> 2. Import Datasets <\/h2>","fded8263":"### 3. Multivariate Analysis\n\n- 1. Pair Plot","1f4c9811":"## Outliers","28d6666a":"#### 2. Item Category"}}