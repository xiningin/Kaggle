{"cell_type":{"c7581514":"code","eb2b344e":"code","7f80d232":"code","e4ed0c00":"code","567a398f":"code","6be557f6":"code","b2048e19":"code","bcc27a77":"code","0db61432":"code","94b696a8":"code","5da66bc6":"code","668621e6":"code","a89806cd":"code","e4c2c9ec":"code","00af580c":"code","e1da88c7":"code","488ee761":"code","0d77f937":"code","1621cb5c":"code","a2aa8fa6":"code","63ef9819":"code","bca4452a":"code","de32488d":"markdown","539ee204":"markdown","810bb78b":"markdown","6bd96074":"markdown","8965a5e4":"markdown","c1736aa3":"markdown","7c5eddaa":"markdown","1354b900":"markdown","f87bf2a4":"markdown","d1e96517":"markdown","3f26098f":"markdown","9798c12b":"markdown","6865c7af":"markdown","de2a2b10":"markdown","2c415721":"markdown","5aeeedbc":"markdown","4dcac676":"markdown","d69ffd92":"markdown","3ebb4b54":"markdown","13fd019e":"markdown"},"source":{"c7581514":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport random\nimport os\nimport glob\nfrom tqdm.notebook import tqdm\n\nimport albumentations as A\n\nfrom tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D, Dense\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","eb2b344e":"def plot_multiple_img(img_matrix_list, title_list, ncols, main_title=\"\"):\n    fig, myaxes = plt.subplots(figsize=(20, 15), nrows=3, ncols=ncols, squeeze=False)\n    fig.suptitle(main_title, fontsize = 30)\n    fig.subplots_adjust(wspace=0.3)\n    fig.subplots_adjust(hspace=0.3)\n    for i, (img, title) in enumerate(zip(img_matrix_list, title_list)):\n        myaxes[i \/\/ ncols][i % ncols].imshow(img)\n        myaxes[i \/\/ ncols][i % ncols].set_title(title, fontsize=15)\n    plt.show()","7f80d232":"# Look at the training, testing and validation data numbers\ntrain_data = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/**\/*.jpeg')\ntest_data = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/**\/*.jpeg')\nval_data = glob.glob('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/**\/*.jpeg')\n\nprint(f\"Training Set has: {len(train_data)} images\")\nprint(f\"Testing Set has: {len(test_data)} images\")\nprint(f\"Validation Set has: {len(val_data)} images\")","e4ed0c00":"DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/\"\nsets = [\"train\", \"test\", \"val\"]\nall_pneumonia = []\nall_normal = []\n\nfor cat in sets:\n    path = os.path.join(DIR, cat)\n    norm = glob.glob(os.path.join(path, \"NORMAL\/*.jpeg\"))\n    pneu = glob.glob(os.path.join(path, \"PNEUMONIA\/*.jpeg\"))\n    all_normal.extend(norm)\n    all_pneumonia.extend(pneu)\n\nprint(f\"Total Pneumonia Images: {len(all_pneumonia)}\")\nprint(f\"Total Normal Images: {len(all_normal)}\")","567a398f":"labels = ['Nomal', 'Pneumonia']\ntargets = [len(all_normal), len(all_pneumonia)]\n\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(16, 9))\nplt.pie(x=targets, labels=labels, autopct=\"%1.1f%%\")\nplt.title(\"Image Category Distribution\")\nplt.show()","6be557f6":"# Shuffle and Get some images into new list\nrandom.shuffle(all_normal)\nrandom.shuffle(all_pneumonia)\nimages = all_normal[:50] + all_pneumonia[:50]","b2048e19":"fig=plt.figure(figsize=(15, 10))\ncolumns = 4; rows = 5\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (128, 128))\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\n    plt.axis(False)","bcc27a77":"fig=plt.figure(figsize=(15, 10))\ncolumns = 4; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n    img = cv2.addWeighted (img, 4, cv2.GaussianBlur(img, (0,0), 512\/10), -4, 128)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\n    plt.axis(False)","0db61432":"fgbg = cv2.createBackgroundSubtractorMOG2()\n\nfig=plt.figure(figsize=(15, 10))\ncolumns = 4; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = fgbg.apply(img)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\n    plt.axis(False)","94b696a8":"fig=plt.figure(figsize=(15, 10))\ncolumns = 4; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    f = np.fft.fft2(img)\n    fshift = np.fft.fftshift(f)\n    magnitude_spectrum = 20*np.log(np.abs(fshift))\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(magnitude_spectrum)\n    plt.axis(False)","5da66bc6":"chosen_image = cv2.imread(images[25])\nalbumentation_list = [A.RandomSunFlare(p=1), A.RandomFog(p=1), A.RandomBrightness(p=1),\n                      A.RandomCrop(p=1,height = 512, width = 512), A.Rotate(p=1, limit=90),\n                      A.RGBShift(p=1), A.RandomSnow(p=1),\n                      A.HorizontalFlip(p=1), A.VerticalFlip(p=1), A.RandomContrast(limit = 0.5,p = 1),\n                      A.HueSaturationValue(p=1,hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=50)]\n\nimg_matrix_list = []\nbboxes_list = []\nfor aug_type in albumentation_list:\n    img = aug_type(image = chosen_image)['image']\n    img_matrix_list.append(img)\n\nimg_matrix_list.insert(0,chosen_image)    \n\ntitles_list = [\"Original\",\"RandomSunFlare\",\"RandomFog\",\"RandomBrightness\",\n               \"RandomCrop\",\"Rotate\", \"RGBShift\", \"RandomSnow\",\"HorizontalFlip\", \"VerticalFlip\", \"RandomContrast\",\"HSV\"]\n\nplot_multiple_img(img_matrix_list, titles_list, ncols = 4,main_title=\"Different Types of Augmentations\")","668621e6":"fig=plt.figure(figsize=(15, 10))\ncolumns = 5; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    kernel = np.ones((5, 5), np.uint8)\n    img_erosion = cv2.erode(img, kernel, iterations=3)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img_erosion)\n    plt.axis(False)","a89806cd":"fig=plt.figure(figsize=(15, 10))\ncolumns = 5; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    kernel = np.ones((5, 5), np.uint8)\n    img_erosion = cv2.dilate(img, kernel, iterations=3)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img_erosion)\n    plt.axis(False)","e4c2c9ec":"fig=plt.figure(figsize=(15, 10))\ncolumns = 5; rows = 2\nfor i in range(1, columns*rows +1):\n    img = cv2.imread(images[i])\n    img = cv2.resize(img, (512, 512))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    edges = cv2.Canny(img, 80, 100)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(edges)\n    plt.axis(False)","00af580c":"# Define Training and Validation Data Generator with Augmentations\ntrain_gen = ImageDataGenerator(\n    rescale=1\/255.,\n    horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=0.4,\n    zoom_range=0.4\n)\nval_gen = ImageDataGenerator(\n    rescale=1\/255.,\n)","e1da88c7":"# Flow the data into the Data Generator\nTrain = train_gen.flow_from_directory(\n    \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\",\n    target_size=(224, 224),\n    batch_size=16\n)\nTest = train_gen.flow_from_directory(\n    \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\",\n    target_size=(224, 224),\n    batch_size=8\n)","488ee761":"model = Sequential()\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))","0d77f937":"# Compile the model and see it's structure and parameters\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","1621cb5c":"hist = model.fit_generator(\n    Train,\n    epochs=20,\n    validation_data=Test\n)","a2aa8fa6":"# Save the model\nmodel.save(\"best_model.hdf5\")","63ef9819":"plt.style.use(\"classic\")\nplt.figure(figsize=(16, 9))\nplt.plot(hist.history['loss'], label=\"Train Loss\")\nplt.plot(hist.history['val_loss'], label=\"Valid Loss\")\nplt.legend()\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss over the Epochs\")\nplt.show()","bca4452a":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(16, 9))\nplt.plot(hist.history['accuracy'], label=\"Train Accuracy\")\nplt.plot(hist.history['val_accuracy'], label=\"Valid Accuracy\")\nplt.legend()\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy over the Epochs\")\nplt.show()","de32488d":"# EDA\nLet's start the Image EDA!","539ee204":"## Background Subtraction\nNow we will use Background Subtraction Method using Built-in OpenCV function.","810bb78b":"We can see that there's some good data imbalance, we have more data for Pneumonia Images then for the Normal Images. If we were to leave this problem alone, it would decrease model performance.","6bd96074":"<strong><span style=\"color:red\">If you like my work, please don't forget to upvote this notebook!<\/span><\/strong>\n\n<strong><span style=\"color:blue\"> If you don't, atleast leave a comment on what should I do to improve it!<\/span><\/strong>","8965a5e4":"## Fourier Method for Pixel Distribution\nLet's use Fourier Transforms","c1736aa3":"## 1. Dataset\nLet's define our data using the Keras Image DataGenerator.\nIt helps us by directly reading the images from their directories","7c5eddaa":"## Albumentations Visualization\nLet's visualize how our images will be looking after some Albumentations.","1354b900":"## Ben Graham's Method\nLet's try using Ben Graham's method. It involves using grayscale images and then applying Gaussian Blur to them later.","f87bf2a4":"## Canny Edge Detection\nFinally, let's do Canny Edge Detection on our data so we can get some usefull insights from it!","d1e96517":"## Image Erosion","3f26098f":"## 3. Training\nNow, let's quickly train our model for `10 Epochs` and see how performs.","9798c12b":"## 2. Model\nNow, let's design a simple CNN using Keras Sequenatial API","6865c7af":"You might think that it's just a bunch of blue dots, but it's more than that.\n\n**Whats happening here is that those images are basically magnitude spectrums, this helps in understanding where majority of growth is situated.**","de2a2b10":"<h1 style=\"color:magenta\">\nPneumonia Image EDA + Classification\n<\/h1> \n\n![Credits: Harvard Health](https:\/\/external-content.duckduckgo.com\/iu\/?u=https%3A%2F%2Fwww.health.harvard.edu%2Fmedia%2Fcontent%2Fimages%2Fmedical-illustrations%2Fpneumonia-GettyImages-1010467510.jpg&f=1&nofb=1)\n\nPneumonia is an inflammatory condition of the lung affecting primarily the small air sacs known as alveoli. Symptoms typically include some combination of productive or dry cough, chest pain, fever and difficulty breathing. The severity of the condition is variable.\n\nPneumonia is usually caused by infection with viruses or bacteria and less commonly by other microorganisms, certain medications or conditions such as autoimmune diseases. Risk factors include cystic fibrosis, chronic obstructive pulmonary disease (COPD), sickle cell disease, asthma, diabetes, heart failure, a history of smoking, a poor ability to cough (such as following a stroke), and a weak immune system. Diagnosis is often based on symptoms and physical examination. Chest X-rays, blood tests, and culture of the sputum may help confirm the diagnosis. The disease may be classified by where it was acquired, such as community- or hospital-acquired or healthcare-associated pneumonia. ","2c415721":"## Basic XRay Images\nLet's first view just the x-ray images, nothing fancy.","5aeeedbc":"# Modelling\nNow that the EDA is over, let's start with the process of modelling.\nWe will divide this into 4 parts:\n\n1. Dataset (using DataGenerator)\n2. Model\n3. Training\n4. Model Performance viz.","4dcac676":"## Image Dilation","d69ffd92":"Ok, that didn't work as I expected.","3ebb4b54":"## Target Value Distribution\nBefore we start Image EDA, let's take a look at Target Value Distribution for all sets.","13fd019e":"## 4. Performance Viz.\nLet's visualize our model's performance"}}