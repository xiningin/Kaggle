{"cell_type":{"0f71f2c6":"code","094334a2":"code","2a2c6c1a":"code","75dd422c":"code","cb9cb4fe":"code","cb8dc1f2":"code","a51d3b38":"code","0538cac1":"code","0080f276":"code","424008d0":"code","330ea399":"code","044febfa":"code","c1516336":"code","0e23c6f0":"code","62c204c6":"code","756945fe":"code","499896cf":"code","3770437a":"code","12c4e592":"code","f67ecbc2":"code","a4c5e6a8":"code","92614106":"code","cc3303a4":"code","d27bc8ea":"code","1a578f0c":"code","b813ba45":"code","51f38d51":"code","fb118c43":"code","d2d5c218":"code","17a6468e":"code","5f47a532":"code","12d842ef":"code","3e6e5bce":"code","c0fc9ae8":"code","558023aa":"code","ad55378c":"code","947ed93f":"code","034a611f":"code","6dcc765e":"code","e108d4f9":"code","08b90c1c":"code","9814dd2a":"code","0afa6991":"code","0d0552da":"code","af56763c":"markdown","ba8a6c75":"markdown","4234f2c0":"markdown","2781fc8f":"markdown","a23313b4":"markdown","199b0f1c":"markdown","76e40050":"markdown","d82aec1d":"markdown","5da31a58":"markdown","0ec07037":"markdown","8b42c911":"markdown","08adbc46":"markdown"},"source":{"0f71f2c6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n","094334a2":"text1 = \"Ethics are built right into the ideals and objectives of the United Nations.\"\nlen(text1) # how many characters","2a2c6c1a":"text2 = text1.split(' ') # to split in words \/ tokens\nlen(text2)","75dd422c":"# find long words (more then 3 char. long)\n[w for w in text2 if len(w)>3]","cb9cb4fe":"#find capitalized words\n[w for w in text2 if w.istitle()]","cb8dc1f2":"#find all words that end with 's'\n[w for w in text2 if w.endswith('s')]","a51d3b38":"text3 = 'To be or not to be'\ntext4 = text3.split(' ')\ntext4","0538cac1":"len(set(text4)) # to find the number of unique words","0080f276":"len(set(w.lower() for w in text4)) \n# To find the number of unique words, whether they start with capital letter\n# or not","424008d0":"text5 = 'ouagadougou'\ntext6 = text5.split('ou')\ntext6","330ea399":"'ou'.join(text6)","044febfa":"list(text5) # to get the list of characters","c1516336":"[c for c in text5] # alternative way","0e23c6f0":"text8 = \"    A quick brown fox jumped over the lazy dog.   \" ","62c204c6":"text8.split(' ') # returns not what we want","756945fe":"text9 = text8.strip()\ntext9","499896cf":"text9.split(' ')","3770437a":"text9.find('o')","12c4e592":"text9.rfind('o')","f67ecbc2":"text9.replace('o', 'O')","a4c5e6a8":"path = '..\/input\/text-names-dates\/yob1880.txt'\nf = open(path, 'r')","92614106":"f.readline()","cc3303a4":"f.seek(0)\ntext12 = f.read() # to read entire file\nlen(text12)","d27bc8ea":"text13 = text12.splitlines()\nlen(text13)","1a578f0c":"text14 = '\"Ethics are built right into the ideals and objectives of the United Nations\" \\\n#UNSG @ NY Society for Ethical Culture bit.ly\/2guVelr @UN @UN_Women  '","b813ba45":"text15 = text14.split(' ')\ntext15","51f38d51":"import re","fb118c43":"[w for w in text15 if re.search('@[A-Za-z0-9_]+', w)] # getting collouts","d2d5c218":"re.findall(r'[aieou]', text5)","17a6468e":"re.findall(r'[^aeiou]', text5) # find all consonants","5f47a532":"#re.findall(r'[\\d{1,2}[\/-]\\d{1,2}[\/-]\\d{2,4}', text_name)","12d842ef":"#re.findall(r'\\d{1,2} (?:Jan|Feb|Mar) \\d{2,4}', text_name)","3e6e5bce":"#re.findall(r'\\d{1,2} (?:Jan|Feb|Mar) [a-z]* \\d{2,4} ', text_name)","c0fc9ae8":"#re.findall(r'(?:\\d{1,2} )? (?:Jan|Feb|Mar) [a-z]* (?:\\d{1,2} )? \\d{2,4} ', text_name)","558023aa":"import pandas as pd\n\ntime_sentences = [\"Monday: The doctor's appointment is at 2:45pm.\", \n                  \"Tuesday: The dentist's appointment is at 11:30 am.\",\n                  \"Wednesday: At 7:00pm, there is a basketball game!\",\n                  \"Thursday: Be back home by 11:15 pm at the latest.\",\n                  \"Friday: Take the train at 08:10 am, arrive at 09:00am.\"]\n\ndf = pd.DataFrame(time_sentences, columns=['text'])\ndf","ad55378c":"df['text'].str.len()","947ed93f":"df['text'].str.split().str.len() # to find the number of tokens","034a611f":"df['text'].str.contains('appointment')","6dcc765e":"df['text'].str.count(r'\\d') # how many times a digit occurs","e108d4f9":"df['text'].str.findall(r'\\d')","08b90c1c":"# group and find the hours and minutes\ndf['text'].str.findall(r'(\\d?\\d):(\\d\\d)')","9814dd2a":"# replace weekdays with '???'\ndf['text'].str.replace(r'\\w+day\\b', '???')","0afa6991":"text_uni = \"R\u00e9sum\u00e9\"\nprint(len(text_uni))\nprint(text_uni)","0d0552da":"# if it was in Python 2\ntext_uni2 = u\"R\u00e9sum\u00e9\"\nprint(len(text_uni2))","af56763c":"Repetitions:\n* '*' 0 or more occurences\n* '+' one or more occurences\n* ? zero or one\n* {n} exactly n times\n* {n,} at least n times\n* {m,n} at least m, at most n","ba8a6c75":"## String operations\n*  s.lower()\n* s.upper()\n* s.titlecase()\n* s.split(t)\n* s.splitlines()  # to split the lines on new line char. or end of line char.\n* s.join(t)\n* s.strip() # to remove all whitespaces from the front of the string\n* s.rstrip() # \/\/\/ from the end of the string\n* s.find(t) # finds the index, going from the front\n* s.rfind(t) # ---, going from the end\n* s.replace(u,v)\n","4234f2c0":"## Cleaning text","2781fc8f":"* **'+'** means: one or more times\n* **.** any character, but just one\n* **^** start of a string\n* **$** end of a string\n* **[abc]** one of the characters within\n* **[^abc]** not a, b or c\n* **a|b** mathes a *or* b\n* () scoping for operators\n* \\b word boundary \n* \\d any digit, eq-nt to [0-9]\n* \\D any non-digit, eq-nt to [^0-9]\n* \\s any whitespace \n* \\S any non-whitespace char.\n* \\w alphanumeric char.\n* \\W non-alphanumeric","a23313b4":"## Handling larger texts","199b0f1c":"## Regular expressions for dates","76e40050":"## Regular Expressions","d82aec1d":"## Word comparison functions\n\n* s.startswith(t)\n* s.endswith(t)\n* t in s\n* s.isupper() , s.islower() , s.istitle() \n* s.isalpha() , s.isdigit() , s.isalnum()","5da31a58":"* f.readline()\n* f.read()\n* f.read(n) # to read n char-s\n* for line in f: do something\n* f.write(message)\n* f.close()\n* f.closed # to check if the file closed","0ec07037":"## Dealing with Unicode","8b42c911":"## Changing text","08adbc46":"## Redex"}}