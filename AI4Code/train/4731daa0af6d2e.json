{"cell_type":{"ad265e13":"code","5c58d5c8":"code","c7420c45":"code","cea713d0":"code","fd8312c3":"code","0058f18a":"code","fd2d9521":"code","de2b9444":"code","1fd3f9e8":"code","564dfcea":"code","3c6b062a":"code","b47459a6":"markdown","3f100886":"markdown","5de04ae1":"markdown","9fe71fe4":"markdown","945f2a76":"markdown"},"source":{"ad265e13":"#importing libraries \nimport os\nimport pandas as pd # pandas \nimport numpy as np #numpy \nimport plotly.express as px \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split, KFold\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import r2_score\nimport glob\nfrom tqdm import tqdm\nsns.set_theme(style=\"dark\")","5c58d5c8":"# loading the data \ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\nsample= pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv')","c7420c45":"print(train.columns)\nprint(test.columns)\nprint(sample.columns)","cea713d0":"EPSILON =  1e-10 # Yes, Python is awesome and supports scientific notation!\ndef rmspe(y_true,y_pred): \n    \n    rmspe1 = (np.sqrt(np.mean(np.square((y_true - y_pred) \/ (y_true + EPSILON))))) \n    return rmspe1\n\ny_true=train['target']\n#print(y_true)\ny_pred=train['target'].mean()\nprint(y_pred)\nrmspe_train=rmspe(y_true,y_pred)\nprint(rmspe_train)","fd8312c3":"train['target1'] = 100 * (train['stock_id'].pct_change())","0058f18a":"train.dropna(inplace=True)\nfig=plt.figure()\nfig.set_figwidth(12)\nplt.plot(train['target1'], label ='time_id')\nplt.legend(loc='upper right')\nplt.title('Daily target')\nplt.show()\n","fd2d9521":"#import statistics\n#variance=statistics.variance(train['target'], y_pred)\n#volatility=np.sqrt(variance)\n#print(volatility)\n#daily_volatility=np.sqrt(252)*volatility\n#print(daily_volatility)","de2b9444":"daily_volatility = train['target'].std()\nprint('Daily volatility: ', '{:.2f}%'.format(daily_volatility))\n\nmonthly_volatility = np.sqrt(21) * daily_volatility\nprint ('Monthly volatility: ', '{:.2f}%'.format(monthly_volatility))\n\nannual_volatility = np.sqrt(252) * daily_volatility\nprint ('Annual volatility: ', '{:.2f}%'.format(annual_volatility ))","1fd3f9e8":"fig=plt.figure()\nfig.set_figwidth(12)\nplt.plot(train['target'], label ='daily_volatility')\nplt.legend(loc='upper right')\nplt.title('Daily Volatility')\nplt.show()\n","564dfcea":"#test_volatility = pd.DataFrame({'stock_id': stock_id, 'time_id': time_id, 'volatility': relvol})","3c6b062a":"submission = pd.DataFrame({'row_id' : [], 'target' : []})  \nsubmission['row_id'] = train.apply(lambda x: str(int(x.stock_id)) + '-' + str(int(x.time_id)), axis=1)\nsubmission['target'] = train[\"target\"]\n\nsubmission.to_csv('submission.csv',index = False)","b47459a6":"The pct_change method will automatically calculate the percentage changes of the current day\u2019s close price compared with the previous day. Please note the percentage changes can be either positive or negative depending on the direction of the price changes. The resulting percentage changes are stored in the dataframe new column, \u201ctarget\u201d.","3f100886":"# Calculation of daily target\nNow, we are going to calculate the daily target of the stock investment based on the percentage of the close price changes. This can be done just by one line of Python script.","5de04ae1":"# Plotting graph","9fe71fe4":"# Calculation of daily, monthly, and annual volatility\nHere we are going to calculate the volatility of the stock in three levels: daily, monthly and annual.","945f2a76":"Submissions are evaluated using the root mean square percentage error, defined as:\n\n![image.png](attachment:c3a4a61f-052e-4fbe-a607-d9a9c09d1b56.png)"}}