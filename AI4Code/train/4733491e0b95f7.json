{"cell_type":{"0c342428":"code","d43e1950":"code","55aec362":"code","035ca834":"code","9be91225":"code","5cc45092":"code","aa79bf7a":"code","4598d2d9":"code","e32ea12e":"code","98be6181":"code","f8759782":"code","468629d9":"code","8006acbf":"code","32559222":"code","e84482dc":"code","9246c262":"code","17ffbe06":"code","e82c6743":"code","30455265":"code","18c55850":"code","60d8fc6e":"code","af12689a":"code","edb621fc":"code","0787e43c":"code","e5af5209":"code","de82dc7a":"code","ec29eb36":"code","5773924c":"code","490922fc":"code","ce630445":"code","bfdc7acd":"code","aef8c000":"code","bfe83861":"code","c1ad5126":"code","0d01266e":"code","fe4d5177":"code","e4f429be":"code","842e4642":"code","a9ee7a9e":"code","1bde6f95":"code","b797ae9a":"code","7dee0891":"code","02f31acd":"code","1052a4eb":"code","49c5b3d0":"markdown","a929b5b1":"markdown","e805f4fc":"markdown","a5092e23":"markdown","21faba61":"markdown","d09c1e78":"markdown","8e294287":"markdown","f1eea63f":"markdown","74bc9bc2":"markdown","affa9df5":"markdown"},"source":{"0c342428":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d43e1950":"# import itertools\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nnp.random.seed(22)\n\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","55aec362":"train_data = pd.read_csv('\/kaggle\/input\/black-friday-sales\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/black-friday-sales\/test.csv')\ntrain_data.columns = train_data.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\nprint('Train Data shape: ', train_data.shape)\ntrain_data.head()","035ca834":"train_data.dtypes","9be91225":"train_data.isnull().sum()","5cc45092":"train_data['type'] = 'train'\ntest_data['type'] = 'test'\n\nmaster_data = pd.concat([train_data, test_data])\nmaster_data.head()","aa79bf7a":"plt.figure(1)\nplt.subplot(121)\nsns.distplot(master_data[\"purchase\"]);\n\nplt.subplot(122)\nmaster_data[\"purchase\"].plot.box(figsize = (16, 6))\nplt.show()","4598d2d9":"plt.figure(figsize = (10, 5))\nprint(master_data[\"gender\"].value_counts())\nmaster_data['gender'].value_counts(normalize = True).plot.bar(title = 'Gender')","e32ea12e":"plt.figure(figsize = (10, 5))\nprint(master_data[\"age\"].value_counts())\nmaster_data['age'].value_counts(normalize = True).plot.bar(title = 'Age')","98be6181":"plt.figure(figsize = (10, 5))\nprint(master_data[\"stay_in_current_city_years\"].value_counts())\nmaster_data['stay_in_current_city_years'].value_counts(normalize = True).plot.bar(title = 'Stay in current city - Years')","f8759782":"plt.figure(figsize = (10, 5))\nprint(master_data[\"occupation\"].value_counts())\nmaster_data['occupation'].value_counts(normalize = True).plot.bar(title = 'Occupation')","468629d9":"plt.figure(figsize = (10, 5))\nprint(master_data[\"city_category\"].value_counts())\nmaster_data['city_category'].value_counts(normalize = True).plot.bar(title = 'City Category')","8006acbf":"plt.figure(figsize = (10, 5))\nprint(master_data[\"marital_status\"].value_counts())\nmaster_data['marital_status'].value_counts(normalize = True).plot.bar(title = 'Martial Status')","32559222":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_1\"].value_counts())\nmaster_data['product_category_1'].value_counts(normalize = True).plot.bar(title = 'Product Category 1')","e84482dc":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_2\"].value_counts())\nmaster_data['product_category_2'].value_counts(normalize = True).plot.bar(title = 'Product Category 2')","9246c262":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_3\"].value_counts())\nmaster_data['product_category_3'].value_counts(normalize = True).plot.bar(title = 'Product Category 3')","17ffbe06":"plt.figure(figsize = (12, 6))\nprod_by_cat = master_data.groupby('product_category_1')['product_id'].nunique()\n\nsns.barplot(x = prod_by_cat.index,y = prod_by_cat.values)\nplt.title('Number of Unique Items per Category')\nplt.show()","e82c6743":"plt.figure(figsize = (10, 5))\nsns.violinplot(x = 'city_category', y = 'purchase', hue = 'marital_status', data = master_data)","30455265":"plt.figure(figsize = (10, 5))\nsns.countplot(master_data[\"gender\"], hue = master_data[\"age\"]).set_title(\"Age & Gender\")\nsns.despine()","18c55850":"plt.figure(figsize = (10, 5))\nx = master_data.groupby([\"gender\"]).mean()[[\"purchase\"]].index\ny = master_data.groupby([\"gender\"]).mean()[[\"purchase\"]].values\nplt.plot(x, y,\"ro\")\nplt.xticks(x, [\"male\", \"female\"])\nplt.title(\"Mean purchase of different gender\")\nsns.despine()","60d8fc6e":"plt.figure(figsize = (10, 5))\nmaster_data.groupby(\"city_category\")[\"purchase\"].sum().plot.pie(title = \"City Categry\", \n                                                               startangle = 90, explode = (0.1, 0, 0), \n                                                               autopct = \"%1.1f%%\", shadow = True)","af12689a":"plt.figure(figsize = (10, 5))\nx = master_data.groupby([\"city_category\"]).mean()[[\"purchase\"]].index\ny = master_data.groupby([\"city_category\"]).mean()[[\"purchase\"]].values\nplt.plot(x, y,\"ro\")\nplt.title(\"Mean purchase of different city categories\")\nsns.despine()","edb621fc":"plt.figure(figsize = (10, 5))\nmaster_data[\"stay_in_current_city_years\"].value_counts().plot.pie(title = \"Years of staying in the city\", \n                                                                 explode = (0.1, 0, 0, 0, 0), \n                                                                 autopct = \"%1.1f%%\", shadow = True)","0787e43c":"master_data['product_category_2'] = master_data['product_category_2'].fillna(master_data['product_category_3'] - 1)\nmaster_data['product_category_2'] = master_data['product_category_2'].fillna(master_data['product_category_1'] + 1)\nmaster_data['product_category_3'] = master_data['product_category_3'].fillna(1 + master_data['product_category_2'])","e5af5209":"user_prod = master_data[['user_id', 'product_category_1', 'product_category_2', 'product_category_3']].drop_duplicates()","de82dc7a":"user_prod_1_dim = pd.DataFrame(master_data.groupby(['user_id', 'product_category_1'])['purchase'].count()).reset_index()\nuser_purchases = pd.DataFrame(master_data.groupby('user_id')['purchase'].count()).reset_index()\nuser_prod_1_dim = user_prod_1_dim.merge(user_purchases, on = 'user_id', how = 'left')\nuser_prod_1_dim['user_prod_1'] = user_prod_1_dim['purchase_x']\/user_prod_1_dim['purchase_y']\nuser_prod_1_dim = user_prod_1_dim.drop(['purchase_x', 'purchase_y'], axis = 1)\n\nuser_prod_2_dim = pd.DataFrame(master_data.groupby(['user_id', 'product_category_1', 'product_category_2'])['purchase'].count()).reset_index()\nuser_prod_2_dim = user_prod_2_dim.merge(user_purchases, on = 'user_id', how = 'left')\nuser_prod_2_dim['user_prod_2'] = user_prod_2_dim['purchase_x']\/user_prod_2_dim['purchase_y']\nuser_prod_2_dim = user_prod_2_dim.drop(['purchase_x', 'purchase_y'], axis = 1)\n\nuser_prod_3_dim = pd.DataFrame(master_data.groupby(['user_id', 'product_category_1', 'product_category_2', 'product_category_3'])['purchase'].count()).reset_index()\nuser_prod_3_dim = user_prod_3_dim.merge(user_purchases, on = 'user_id', how = 'left')\nuser_prod_3_dim['user_prod_3'] = user_prod_3_dim['purchase_x']\/user_prod_3_dim['purchase_y']\nuser_prod_3_dim = user_prod_3_dim.drop(['purchase_x', 'purchase_y'], axis = 1)\n\nuser_prod = user_prod.merge(user_prod_1_dim, on = ['user_id', 'product_category_1'], how = 'left')\nuser_prod = user_prod.merge(user_prod_2_dim, on = ['user_id', 'product_category_1', 'product_category_2'], how = 'left')\nuser_prod = user_prod.merge(user_prod_3_dim, on = ['user_id', 'product_category_1', 'product_category_2', 'product_category_3'], how = 'left')\nuser_prod.head()","ec29eb36":"master_data = master_data.merge(user_prod, on = ['user_id', 'product_category_1', 'product_category_2', 'product_category_3'], how = 'left')\nmaster_data.head()","5773924c":"# individual groupby dataframes for each gender\ngender_prod_m = master_data[master_data['gender'] == 'M'][['product_category_1','gender']].groupby('product_category_1').count()\ngender_prod_f = master_data[master_data['gender'] == 'F'][['product_category_1','gender']].groupby('product_category_1').count()\n\ngender_prod = pd.concat([gender_prod_m, gender_prod_f],axis = 1)\ngender_prod.columns = ['m_ratio','f_ratio']\n\n# Adjust to reflect ratios\ngender_prod['m_ratio'] = gender_prod['m_ratio'] \/ master_data[master_data['gender'] == 'M'].count()[0]\ngender_prod['f_ratio'] = gender_prod['f_ratio'] \/ master_data[master_data['gender'] == 'F'].count()[0]\n\n# Create likelihood of one gender to buy over the other\ngender_prod['likely_ratio'] = gender_prod['m_ratio'] \/ gender_prod['f_ratio']\n\ngender_prod['total_ratio'] = gender_prod['m_ratio'] + gender_prod['f_ratio']\ngender_prod = gender_prod.reset_index()\ngender_prod.head()","490922fc":"master_data = master_data.merge(gender_prod, on = 'product_category_1', how = 'left')\nmaster_data.head()","ce630445":"# Unique values for all the columns\nfor col in master_data.columns[~(master_data.columns.isin(['user_id', 'product_id', 'user_id', 'purchase', 'type',\n                                                           'm_ratio', 'f_ratio', 'likely_ratio', 'total_ratio']))].tolist():\n    print(\" Unique Values --> \" + col, ':', len(master_data[col].unique()), ': ', master_data[col].unique())","bfdc7acd":"testProdIDs = master_data.loc[(master_data['type'] == 'test'), 'product_id']","aef8c000":"for column in ['product_category_2', 'product_category_3']:\n    master_data[column] = master_data[column].astype('int8')\n\ntrain_data, test_data = master_data.loc[(master_data['type'] == 'train')], master_data.loc[(master_data['type'] == 'test')]\ntrain_data = train_data.drop(['user_id', 'type'], axis = 1)","bfe83861":"gender = {'F': 1, 'M': 2}\nage = {'0-17': 1, '55+': 2, '26-35': 7, '46-50': 4, '51-55': 3, '36-45': 6, '18-25': 5}\ncity_category = {'A':1,  'C':2, 'B': 3}\nstay_in_current_city_years = {'2': 4, '4+': 2, '3': 3, '1': 5, '0': 1}\n\ntrain_data['gender'] = train_data['gender'].map(gender)\ntest_data['gender'] = test_data['gender'].map(gender)\n\ntrain_data['age'] = train_data['age'].map(age)\ntest_data['age'] = test_data['age'].map(age)\n\ntrain_data['city_category'] = train_data['city_category'].map(city_category)\ntest_data['city_category'] = test_data['city_category'].map(city_category)\n\ntrain_data['stay_in_current_city_years'] = train_data['stay_in_current_city_years'].map(stay_in_current_city_years)\ntest_data['stay_in_current_city_years'] = test_data['stay_in_current_city_years'].map(stay_in_current_city_years)\n\ntestRes = test_data[['user_id']]\ntestRes['Product_ID'] = testProdIDs\ntest_data = test_data.drop(['user_id', 'type', 'purchase'], axis = 1)\n\ntrain_data.head()","c1ad5126":"# Label Encoding Product_IDs\nnew_product_ids = list(set(pd.unique(test_data['product_id'])) - set(pd.unique(train_data['product_id'])))\n\nle = LabelEncoder()\ntrain_data['product_id'] = le.fit_transform(train_data['product_id'])\ntest_data.loc[test_data['product_id'].isin(new_product_ids), 'product_id'] = -1\nnew_product_ids.append(-1)\n\ntest_data.loc[~test_data['product_id'].isin(new_product_ids), 'product_id'] = le.transform(test_data.loc[~test_data['product_id'].isin(new_product_ids), 'product_id'])\n\nprint(test_data.shape)","0d01266e":"X = train_data[train_data.columns[~(train_data.columns.isin(['purchase']))].tolist()]\n\nss = StandardScaler()\n\nX = ss.fit_transform(X)\n\ny = train_data['purchase'].values\n\ntestData = test_data.copy()\n\ntest_data = ss.fit_transform(test_data)","fe4d5177":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = XGBRegressor(random_state = 22, max_depth = 10, n_estimators = 600, objective = 'reg:squarederror')\n    model.fit(X_train, y_train)#, cat_features = [0,1,5,7,8,9,10,11,12])\n    preds = model.predict(X_test)\n    score = np.sqrt(mean_squared_error(y_test, preds))\n    scores.append(score)\n    print('Validation RMSE:', score)\nprint(\"Average Validation RMSE: \", sum(scores)\/len(scores))","e4f429be":"yPreds = model.predict(test_data)\ntestRes['Purchase'] = yPreds\nsubmission = testRes[['user_id', 'Product_ID', 'Purchase']]\n\nsubmission.columns = ['User_ID', 'Product_ID', 'Purchase']\nsubmission.to_csv('submission_XGB_v10.csv', index = False)\nsubmission.head()","842e4642":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = XGBRegressor(random_state = 22, max_depth = 10, n_estimators = 600, \n                         objective = 'reg:squarederror', booster = 'gbtree', eta = 0.1, nthread = 4,\n                         subsample = 0.8, colsample_bytree = 0.8, min_child_weight = 20,\n                         max_delta_step = 0, gamma = 0)\n    model.fit(X_train, y_train)#, cat_features = [0,1,5,7,8,9,10,11,12])\n    preds = model.predict(X_test)\n    score = np.sqrt(mean_squared_error(y_test, preds))\n    scores.append(score)\n    print('Validation RMSE:', score)\nprint(\"Average Validation RMSE: \", sum(scores)\/len(scores))","a9ee7a9e":"yPreds = model.predict(test_data)\ntestRes['Purchase'] = yPreds\nsubmission = testRes[['user_id', 'Product_ID', 'Purchase']]\n\nsubmission.columns = ['User_ID', 'Product_ID', 'Purchase']\nsubmission.to_csv('submission_XGB_v11.csv', index = False)\nsubmission.head()","1bde6f95":"train_data = train_data.drop(['product_category_2', 'product_category_3'], axis = 1)\ntest_data = testData.drop(['product_category_2', 'product_category_3'], axis = 1)\n\nX = train_data[train_data.columns[~(train_data.columns.isin(['purchase']))].tolist()]\n\nss = StandardScaler()\n\nX = ss.fit_transform(X)\n\ny = train_data['purchase'].values\n\ntest_data = ss.fit_transform(test_data)","b797ae9a":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = XGBRegressor(random_state = 22, max_depth = 10, n_estimators = 600, \n                         objective = 'reg:squarederror', booster = 'gbtree', eta = 0.1, nthread = 4,\n                         subsample = 0.8, colsample_bytree = 0.8, min_child_weight = 20,\n                         max_delta_step = 0, gamma = 0)\n    model.fit(X_train, y_train)#, cat_features = [0,1,5,7,8,9,10,11,12])\n    preds = model.predict(X_test)\n    score = np.sqrt(mean_squared_error(y_test, preds))\n    scores.append(score)\n    print('Validation RMSE:', score)\nprint(\"Average Validation RMSE: \", sum(scores)\/len(scores))","7dee0891":"yPreds = model.predict(test_data)\ntestRes['Purchase'] = yPreds\nsubmission = testRes[['user_id', 'Product_ID', 'Purchase']]\n\nsubmission.columns = ['User_ID', 'Product_ID', 'Purchase']\nsubmission.to_csv('submission_XGB_v12.csv', index = False)\nsubmission.head()","02f31acd":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = LGBMRegressor(random_state = 22, max_depth = 10, n_estimators = 600)\n    model.fit(X_train, y_train)#, cat_features = [0,1,5,7,8,9,10,11,12])\n    preds = model.predict(X_test)\n    score = np.sqrt(mean_squared_error(y_test, preds))\n    scores.append(score)\n    print('Validation RMSE:', score)\nprint(\"Average Validation RMSE: \", sum(scores)\/len(scores))","1052a4eb":"yPreds = model.predict(test_data)\ntestRes['Purchase'] = yPreds\nsubmission = testRes[['user_id', 'Product_ID', 'Purchase']]\n\nsubmission.columns = ['User_ID', 'Product_ID', 'Purchase']\nsubmission.to_csv('submission_LGB_v10.csv', index = False)\nsubmission.head()","49c5b3d0":"### XGBoost Regressor works better with tuned hyperparameters giving a RMSE of ~ 2570. LightGBM is fast though with a higher value of RMSE","a929b5b1":"### * A nice obsservation: Product category for a product is in an increasing order i.e. if prod_cat_1 = 3 then prod_cat_2 > 3 & prod_cat_3 > prod_cat_2","e805f4fc":"[**Analytics Vidhya: Black Friday Sales Prediction**](https:\/\/datahack.analyticsvidhya.com\/contest\/black-friday\/)\n\nA retail company \u201cABC Private Limited\u201d wants to understand the customer purchase behaviour (specifically, purchase amount) against various products of different categories. They have shared purchase summary of various customers for selected high volume products from last month.\nThe data set also contains customer demographics (age, gender, marital status, city_type, stay_in_current_city), product details (product_id and product category) and Total purchase_amount from last month.\n\nNow, they want to build a model to predict the purchase amount of customer against various products which will help them to create personalized offer for customers against different products.","a5092e23":"### dropping Product category 2 & 3","21faba61":"# XGBoost","d09c1e78":"## Exploratory Data Analysis","8e294287":"\nVariable Definition\n* User_ID\tUser ID\n* Product_ID\tProduct ID\n* Gender\tSex of User\n* Age\tAge in bins\n* Occupation\tOccupation (Masked)\n* City_Category\tCategory of the City (A,B,C)\n* Stay_In_Current_City_Years\tNumber of years stay in current city\n* Marital_Status\tMarital Status\n* Product_Category_1\tProduct Category (Masked)\n* Product_Category_2\tProduct may belongs to other category also (Masked)\n* Product_Category_3\tProduct may belongs to other category also (Masked)\n* Purchase\tPurchase Amount (Target Variable)","f1eea63f":"![](https:\/\/datahack-prod.s3.ap-south-1.amazonaws.com\/__sized__\/contest_cover\/BlackFriday_PP_banner_TEv4ldf-thumbnail-1200x1200.png)","74bc9bc2":"## LightGBM Model","affa9df5":"## Generating new features"}}