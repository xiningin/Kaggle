{"cell_type":{"556c5526":"code","2d73d06b":"code","bd4b5826":"code","c1574635":"code","ec2a03a1":"code","a213e490":"code","a59625a8":"code","a3af63e4":"code","eabd9f24":"code","4687f75b":"code","b79708da":"code","85cfbcfc":"code","8fc2f724":"code","a0e5e15e":"markdown","e215c3a4":"markdown","32eae7c5":"markdown","b7e518f5":"markdown","5b74fdc9":"markdown","17c03484":"markdown","037bd9e7":"markdown","4226c9f2":"markdown","3c396542":"markdown","a2db77fc":"markdown"},"source":{"556c5526":"from glob import glob\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.spatial import distance_matrix\nfrom ortools.graph import pywrapgraph\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp","2d73d06b":"\ndef list_lines(file_name):\n    \"\"\"Returns a list of integer lists.\"\"\"\n    with open(file_name) as file:\n        lines = file.read().splitlines()\n    line_list = [[int(n) for  n in ll.split()] for ll in lines]\n    return line_list\n\n\ndef set_params(line_list):\n    top_line = line_list[0]\n    params = {'DRONE_COUNT': top_line[2],\n              'WT_CAP': top_line[4],\n              'END_TIME': top_line[3],\n              }\n    return params\n\n\ndef find_wh_lines(line_list):\n    \"\"\"Provides the dividing line between warehouse and\n    order sections in the line list.\"\"\"\n    wh_count = line_list[3][0]\n    wh_endline = (wh_count*2)+4\n    return wh_endline\n\n\ndef get_weights(line_list):\n    weights = np.array(line_list[2])\n    return weights.astype(np.int16)\n\n\ndef get_inventories(line_list):\n    \"\"\"Returns a 2-d array of P products by W warehouses.\"\"\"\n    wh_endline = find_wh_lines(line_list)\n    invs = line_list[5:wh_endline+1:2]\n    supply = np.array(invs).transpose()\n    return supply.astype(np.int16)\n\n\ndef get_orders(line_list):\n    \"\"\"Returns a 2-d array of P products by C orders.\"\"\"\n    wh_endline = find_wh_lines(line_list)\n    demand = np.zeros((line_list[1][0], line_list[wh_endline][0]),\n                            dtype=np.int16)\n    orders = line_list[wh_endline+3::3]\n    for i,ord in enumerate(orders):\n        for prod in ord:\n            demand[prod, i] += 1\n    return demand.astype(np.int16)\n\n\ndef get_locs(line_list):\n    wh_endline = find_wh_lines(line_list)\n    wh_locs = np.array(line_list[4:wh_endline:2])\n    cust_locs = np.array(line_list[wh_endline+1::3])\n    return wh_locs.astype(np.int16), cust_locs.astype(np.int16)","bd4b5826":"# main\nfiles = ['..\/input\/hashcode-drone-delivery\/busy_day.in']\nline_list = list_lines(files[0])\n\nparams = set_params(line_list)\nsupply = get_inventories(line_list)\ndemand = get_orders(line_list)\nwh_locs, cust_locs = get_locs(line_list)\nweights = get_weights(line_list)","c1574635":"print(params)\nfor array in ['supply', 'wh_locs', 'demand', 'cust_locs', 'weights']:\n    print(array, eval(array).shape)","ec2a03a1":"import holoviews as hv\nhv.extension('bokeh')","a213e490":"\nfreqs, edges = np.histogram(weights, 20)\nwt_prod = hv.Histogram((edges, freqs)).options(xlabel=\"product weights\"\n                                               , width=250, title='Weight Distributions')\n\norder_weights = (weights.reshape(weights.size, -1)* demand) \\\n                    .sum(axis=0)\nfreqs, edges = np.histogram(order_weights, 20)\nwt_orders = hv.Histogram((edges, freqs)).options(xlabel=\"order weights\",\n                                                 width=400)\n\nsurplus = hv.Curve(supply.sum(axis=1) - demand.sum(axis=1)).options(width=500,\n                                            xlabel='Product Number', ylabel='Surplus', title='Total Surplus')\n\ncustomers = hv.Points(np.fliplr(cust_locs)).options(width=600, height=400, title='Warehouse and Customer Locations')\nwarehouses = hv.Points(np.fliplr(wh_locs)).options(size=8, alpha=0.5)\n\ndisplay(hv.Layout(wt_prod+wt_orders).options(shared_axes=False), surplus, \n            customers*warehouses)","a59625a8":"def assign_whs(supply, wh_locs, demand, cust_locs):\n    \"\"\"OR-tools function to assign warehouses to orders using a max-flow min-cost\n    solver. Numbering scheme is as follows:\n        warehouses = 1250 to 1259\n        customers\/orders = 0 to 1249\n    \n    Supply and demand do not have to be equal.\n    \"\"\"\n    assignments = []\n    count = 0\n    distances = distance_matrix(cust_locs, wh_locs)\n\n    for i in range(400):  # iterate over products\n        item_count = 0\n\n        # Network description\n        start_nodes = np.repeat(np.arange(1250,1260), 1250).tolist()\n        end_nodes = np.tile(np.arange(0,1250), 10).tolist()        \n        capacities = np.tile(demand[i], 10).tolist()\n        costs = np.transpose(distances).ravel().astype(int).tolist()\n        supplies = np.negative(demand[i]).tolist() + supply[i].tolist()\n                                            # nodes in numerical order\n        # Build solver\n        min_cost_flow = pywrapgraph.SimpleMinCostFlow()\n\n        for s in range(len(start_nodes)):\n            min_cost_flow.AddArcWithCapacityAndUnitCost(\n                start_nodes[s], end_nodes[s], capacities[s], costs[s]\n                )\n        for s in range(len(supplies)):\n            min_cost_flow.SetNodeSupply(s, supplies[s])\n\n        # Solve\n        if min_cost_flow.SolveMaxFlowWithMinCost() == min_cost_flow.OPTIMAL:\n            for arc in range(min_cost_flow.NumArcs()):\n                if min_cost_flow.Flow(arc) > 0:\n                    warehouse = min_cost_flow.Tail(arc) - 1250\n                    customer = min_cost_flow.Head(arc)\n                    product = i\n                    quant = min_cost_flow.Flow(arc)\n                    cost = min_cost_flow.UnitCost(arc)\n                    assign = [warehouse, customer, product, quant, cost]\n                    assignments.append(assign)\n                    item_count += quant\n        count += item_count\n    \n    print(f\"Products available: {supply.sum()} \\n\"\n            f\"Products ordered: {demand.sum()} \\n\"\n            f\"Products delivered: {count}\")              \n    return np.array(assignments)\n","a3af63e4":"# main\nassignments = assign_whs(supply, wh_locs, demand, cust_locs)\nassign_df = pd.DataFrame(assignments, columns=['wh', 'cust', 'prod_',\n                                               'quant', 'dist'])\nassign_df","eabd9f24":"def order_orders(df):\n\n    customers = df.cust.unique()\n    demand = df.groupby('cust')['quant'].sum()\n\n    locs = np.vstack((cust_locs[customers], wh_locs[0]))\n\n    distances = np.ceil(distance_matrix(locs, locs)).astype(int)\n\n    customer_map = dict(zip(customers, range(len(customers))))\n\n    data = {}\n    data['dists'] = distances.tolist()\n    data['drone_count'] = 1\n    data['warehouse'] = len(locs) - 1\n\n    # Create the routing index manager\n    manager = pywrapcp.RoutingIndexManager(len(data['dists']),\n                                           data['drone_count'], data['warehouse'])\n\n    routing = pywrapcp.RoutingModel(manager)\n\n    # Create and register a transit callback\n    def distance_callback(from_index, to_index):\n        \"\"\"Returns the distance between the two nodes.\"\"\"\n        # Convert from routing variable Index to distance matrix NodeIndex.\n        from_node = manager.IndexToNode(from_index)\n        to_node = manager.IndexToNode(to_index)\n        return data['dists'][from_node][to_node]\n\n    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n\n    # Define cost of each arc\n    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n\n\n    # Setting first solution heuristic\n    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n    search_parameters.first_solution_strategy = (\n            routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n\n    # Solve the problem\n    solution = routing.SolveWithParameters(search_parameters)\n\n    # Get vehicle routes\n    routes = []\n    for route_nbr in range(routing.vehicles()):\n        index = routing.Start(route_nbr)\n        route = [manager.IndexToNode(index)]\n    while not routing.IsEnd(index):\n      index = solution.Value(routing.NextVar(index))\n      route.append(manager.IndexToNode(index))\n    routes.append(route[1:-1])\n\n    # Single vehicle approximation\n    route = routes[0]\n\n    reverse_dict = {v: k for k,v in customer_map.items()}\n    cust_ids = [reverse_dict[r] for r in route]\n\n    df['cust_sort'] = pd.Categorical(df.cust, cust_ids)\n    df = df.sort_values('cust_sort')\n    return df\n","4687f75b":"def load_drones(df):\n    test_wt = 0\n    load_wts = []\n    df = df.sort_values('cust')\n    for i,tup in enumerate(df.itertuples()):\n        test_wt += tup.weight\n        if test_wt <= params['WT_CAP']:\n            load_wt = test_wt\n        else:\n            load_wt = tup.weight\n            test_wt = tup.weight\n        load_wts.append(load_wt)\n\n    df['load_weight'] = load_wts\n    df['load_tag'] = df.load_weight.eq(df.weight).cumsum()-1\n    return df\n\n\ndef set_loads(assignments):\n    assign_df = pd.DataFrame(assignments, columns=['wh', 'cust', 'prod_',\n                                                   'quant', 'dist'])\n    # Monster method chain to deal with quantities > 1 and define loads\n    assign_df = assign_df.reindex(assign_df.index.repeat(assign_df.quant)) \\\n                         .reset_index(drop=True) \\\n                         .assign(quant=1,\n                                 weight = lambda x: weights[x.prod_.to_numpy()],\n                                 work = lambda x: x.dist * x.weight) \\\n                         .groupby('wh', as_index=False).apply(load_drones) \\\n                         .sort_values(['wh', 'cust', 'load_tag']) \\\n                         .reset_index(drop=True)\n    return assign_df\n\n\ndef assign_drones(assign_df):\n    wh_work = assign_df.groupby('wh')['work'].sum()\n    drones_per_wh = (wh_work\/ wh_work.sum()\n                         * params['DRONE_COUNT'])\n    drone_counts = drones_per_wh.round(0).astype(int)\n\n    if drone_counts.sum() != params['DRONE_COUNT']:\n        drone_counts = np.ediff1d(drones_per_wh.cumsum().round(0).astype(int),\n                                        to_begin=drone_counts[0])\n\n    drone_whs = np.repeat(np.arange(len(wh_locs)), drone_counts)\n    drone_dict = dict(zip(range(params['DRONE_COUNT']), drone_whs))\n\n    drone_assigns = {}\n    for k, v in drone_dict.items():\n        drone_assigns[v] = drone_assigns.get(v, []) + [k]\n\n    df_list = []\n    for grp, df in assign_df.groupby('wh'):\n        drone_ids = drone_assigns[df.wh.iloc[0]]\n        df['drone_id'] = df.load_tag % len(drone_ids) + min(drone_ids)\n        df_list.append(df)\n\n    df_end = pd.concat(df_list)\n    return df_end\n\n\n# main \nassign_df = set_loads(assignments)\ndf_end = assign_drones(assign_df)\ndf_end = df_end.groupby(['wh', 'cust', 'load_tag', 'drone_id', 'prod_'],\n                            as_index=False)['quant'].sum()","b79708da":"def load_drones_improved(df):\n    test_wt = 0\n    load_wts = []\n    for i,tup in enumerate(df.itertuples()):\n        test_wt += tup.weight\n        if test_wt <= params['WT_CAP']:\n            load_wt = test_wt\n        else:\n            load_wt = tup.weight\n            test_wt = tup.weight\n        load_wts.append(load_wt)\n\n    df['load_weight'] = load_wts\n    df['load_tag'] = df.load_weight.eq(df.weight).cumsum()-1\n    return df\n\n\ndef reset_loads(df_end_reordered):\n    df_end_reordered = df_end_reordered.reset_index(drop=True) \\\n                                 .assign(weight = lambda x: weights[x.prod_.to_numpy()] * x.quant) \\\n                                 .groupby('wh', as_index=False).apply(load_drones_improved)\n    return df_end_reordered\n\n\ndef assign_drones(df_end_reordered):\n    df_list = []\n    for grp, df in df_end_reordered.groupby('wh'):\n        drone_ids = df.wh.iloc[0]\n        df['drone_id'] = df.load_tag % df.drone_id.nunique() + min(df.drone_id)\n        df_list.append(df)\n\n    df_end = pd.concat(df_list)\n    return df_end\n\n\ndf_end_reordered = df_end.groupby('wh').apply(order_orders) \\\n                         .pipe(reset_loads) \\\n                         .pipe(assign_drones)\n\ndf_end_reordered\n","85cfbcfc":"df_end_loading = df_end_reordered.groupby(['wh', 'load_tag', 'prod_'], as_index=False).agg(\n                                    drone_id = ('drone_id', 'first'),\n                                    quant = ('quant', 'sum'),\n                                     weight_sum = ('weight', 'sum')\n                                    )\ndf_end_loading\n","8fc2f724":"def write_instrux(df_load, df_deliver, sub):\n    line_count_load = 0\n    for tup in df_load.itertuples():\n        wh_text = f\"{tup.drone_id} L {tup.wh} {tup.prod_} {tup.quant}\\n\"\n        sub.write(wh_text)\n        line_count_load +=1\n    for tup in df_deliver.itertuples():\n        cust_text = f\"{tup.drone_id} D {tup.cust} {tup.prod_} {tup.quant}\\n\"\n        sub.write(cust_text)\n        line_count_load +=1\n    return line_count_load, wh_text, cust_text\n\n\nwith open('submission.csv', 'w') as sub:\n    sub.write(f\"{len(df_end_loading) + len(df_end_reordered)}\\n\")\n    line_count = 0    \n    \n    drone_tag = df_end_loading.drop_duplicates(['drone_id', 'load_tag'])\n\n    for dt in drone_tag.itertuples():\n        df_load_tag = df_end_loading[(df_end_loading.load_tag == dt.load_tag) & \\\n                                          (df_end_loading.drone_id == dt.drone_id)]\n        df_deliver_tag = df_end_reordered[(df_end_reordered.load_tag == dt.load_tag) & \\\n                                          (df_end_reordered.drone_id == dt.drone_id)]\n    \n        line_count_load, wh_text, cust_text = write_instrux(df_load_tag, df_deliver_tag, sub)\n        line_count += line_count_load\n\nprint('Sample output: \\n', wh_text, cust_text)\nprint('Line check:', len(df_end_loading) + len(df_end_reordered), line_count)","a0e5e15e":"# 1. Data wrangling\n\nThe first task is to extract the data from the compact text file.","e215c3a4":"# Create output\n\nThe final step is to create the formatted output. First though, there is one more optimization that might gain a few points: group the loading table by load tags and product so that two or more successive load instructions for the same product onto the same drone are loaded in one turn.","32eae7c5":"# Optimization 2: Customer sequence\n\nOnce we fix warehouse assingments, a next step is to deterine which order customers should be served. OR-Tools also has a [routing solver](https:\/\/developers.google.com\/optimization\/routing) to find ab optimal sequence. Given a starting location and a set of customers to serve, it produces a routing sequence that minimizes the longest distance traveled by any one vehicle.\n\n\n<img src=\"https:\/\/i.imgur.com\/uBDIOk1.png\" width=\"600\" \/>\n\n\n\n\n\n\n\nHere I use the simplest version of the routing solver as a quick way to find customers close together for drones delivering a load to two or more customers. The solver can deal with multiple vehicles, capacity constraints, and more.","b7e518f5":" Some visualization to check the arrays and get a sense of the landscape...","5b74fdc9":"In an earlier version of the notebook I allocated drones based on the workload at each warehouse and put orders in straight numeric sequence. I'll keep the code here even though it's not needed except for consistency of variable names.","17c03484":"# What else?\n\nThe output here is really a starting point for further optimization. A good next step would be to create a scoring function that scores your solution. Then you can run loops that swap delivery sequence, drone assignments, etc. and find better-scoring solutions.\n\nGood luck with the challenge!","037bd9e7":"This notebook is meant to gain familiarity with the puzzle and the data. You may find it interesting that we can use Google software to tackle a Google code competition. [Google OR-tools](https:\/\/developers.google.com\/optimization) is open-source software designed to address several type of optimization problems like this one.\n\nThe solution includes two successive optimizations. The first one is an [assignment problem](https:\/\/en.wikipedia.org\/wiki\/Assignment_problem) that assigns warehouses to service orders. The second one is a [vehicle routing problem](https:\/\/en.wikipedia.org\/wiki\/Vehicle_routing_problem) that provides a sequence of customers to serve.\n\nThe method performed better than I expected. It is hardly optimal in a global sense and yet still gets a score of nearly 94K.","4226c9f2":"# Optimization Routine 1: Warehouse assignments\n\nWarehouses are assigned to orders in a way that minimizes the total distance traveled by drones to fulfill orders. Assignments are made product by product. Of course, any time we divide a problem into parts and optimize those parts, we are almost sure to suboptimize the overall objective. Still, it's a reasonable place to start.\n\nThere are different methods to use when tackling an assignment problem. Here I use the [minimum cost flow solver](https:\/\/developers.google.com\/optimization\/flow\/assignment_min_cost_flow) to assign warehouses. The basic idea is you have a network of nodes and edges. There's a notional source node, a set of worker nodes (warehouses), a set of task nodes (orders) and a notional sink node. Here's a generic view of such a network.\n\n![flow](https:\/\/i.imgur.com\/u5jZYgv.png)\n\nThe link above has a good example. Here I use the SolveMaxFlowWithMinCost variation, which doesn't require supply and demand to be equal. That allows one to do away with source and sink nodes and simplify the network. It can also find a different optimum from the balanced min-cost solver, which may be better or worse for this challenge.","3c396542":"<img src='https:\/\/cnet1.cbsistatic.com\/img\/AvDDpG5BMtTqvvLNZWg3Y54Saq0=\/2020\/01\/08\/5e97dfbc-c4ab-456c-a80d-88c86276d945\/flipdish-manna-drone.jpg' width='500'>","a2db77fc":"This is the adjustment using Vehicle Routing. Drones are still assigned to a single warehouse and take turns for delivery according to a straight rotation - again, opportunities for improvement."}}