{"cell_type":{"572c7d65":"code","7ce7fda7":"code","9dde1217":"code","94bdc018":"code","2defef92":"code","0879cc30":"code","c149495f":"code","4b2e6bb1":"code","718ad348":"code","0b5f3c9b":"code","95d1756e":"code","08965678":"code","f3c933bd":"code","a0885a9a":"code","d26d657d":"code","24cfc25f":"code","3112512f":"code","5a500391":"code","bde9c7ee":"code","1c97c442":"code","b68cc0fa":"code","78a827be":"code","dc90632d":"code","9a4decb8":"code","60572bf1":"code","c132fb09":"code","47f90a50":"code","e8858df4":"code","7ffdef29":"code","1c68a00b":"markdown","68737c57":"markdown","5a001d61":"markdown","3a297558":"markdown","b1f7c3a8":"markdown","f5267391":"markdown","cd281ce6":"markdown","6c7821ae":"markdown","16cd6f62":"markdown"},"source":{"572c7d65":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","7ce7fda7":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","9dde1217":"# Missing values\npd.DataFrame({'Train': train.isnull().sum(), 'Test': test.isnull().sum()}, index=train.columns)","94bdc018":"# Extract titles from Names\ntrain['Title'] = train.Name.str.extract('([A-Za-z]+)\\.')\ntest['Title'] = test.Name.str.extract('([A-Za-z]+)\\.')\npd.DataFrame({'Train Count': train.Title.value_counts(), \n              'Test Count': test.Title.value_counts(),\n              'Train Age Mean': train.groupby('Title')['Age'].mean(),\n              'Test Age Mean': test.groupby('Title')['Age'].mean()},\n              index=train.Title.unique())","2defef92":"train.Title.replace(['Mme','Ms','Mlle','Lady', 'Sir'],\n                    ['Miss','Miss','Miss','Mrs','Mr'],\n                    inplace=True)\ntrain.Title.replace([i for i in train.Title.unique() if i not in ['Mr', 'Mrs', 'Miss', 'Master']],\n                    ('Others'),\n                    inplace=True)\npd.crosstab(train.Title, train.Survived, margins=True).style.background_gradient(cmap='summer_r')","0879cc30":"test.Title.replace(['Mme','Ms','Mlle','Lady', 'Sir'],\n                    ['Miss','Miss','Miss','Mrs','Mr'],\n                    inplace=True)\ntest.Title.replace([i for i in test.Title.unique() if i not in ['Mr', 'Mrs', 'Miss', 'Master']],\n                    ('Others'),\n                    inplace=True)\npd.crosstab(test.Title, test.Pclass, margins=True).style.background_gradient(cmap='summer_r')","c149495f":"# Train has 2 missing Embarked values\ntrain.loc[train.Embarked.isnull()]","4b2e6bb1":"train.loc[(train.Survived == 1) & (train.Pclass == 1) & ( train.Sex == 'female') & ( train.SibSp == 0) & ( train.Parch == 0)].groupby('Embarked').size()","718ad348":"# Fill with 'S'\ntrain.Embarked.fillna('S', inplace=True)","0b5f3c9b":"# Test has 1 missing Fare value\ntest.loc[test.Fare.isnull()]","95d1756e":"combined = pd.concat([train.drop('Survived', axis=1), test])\ncombined.loc[(combined.Pclass == 3) & (combined.Sex == 'male') & (combined.Embarked == 'S') & (combined.Title == 'Mr')].Fare.median()","08965678":"# Fill with 'S'\ntest.Fare.fillna(7.925, inplace=True)","f3c933bd":"sns.factorplot('Title', 'Age', hue='Pclass', data=combined)","a0885a9a":"combined.groupby('Title').Age.mean(), combined.groupby('Title').Age.median()","d26d657d":"# Assigning the NaN Values with the combined median age\ntrain.loc[(train.Age.isnull())&(train.Title=='Mr'),'Age']=29\ntrain.loc[(train.Age.isnull())&(train.Title=='Mrs'),'Age']=36\ntrain.loc[(train.Age.isnull())&(train.Title=='Miss'),'Age']=22\ntrain.loc[(train.Age.isnull())&(train.Title=='Master'),'Age']=4\ntrain.loc[(train.Age.isnull())&(train.Title=='Others'),'Age']=46\n\ntest.loc[(test.Age.isnull())&(test.Title=='Mr'),'Age']=29\ntest.loc[(test.Age.isnull())&(test.Title=='Mrs'),'Age']=36\ntest.loc[(test.Age.isnull())&(test.Title=='Miss'),'Age']=22\ntest.loc[(test.Age.isnull())&(test.Title=='Master'),'Age']=4\ntest.loc[(test.Age.isnull())&(test.Title=='Others'),'Age']=46","24cfc25f":"train['Age_band']=0\ntrain.loc[train['Age']>10,'Age_band']=1\ntrain.loc[train['Age']>20,'Age_band']=2\ntrain.loc[train['Age']>30,'Age_band']=3\ntrain.loc[train['Age']>40,'Age_band']=4\ntrain.loc[train['Age']>50,'Age_band']=5\ntrain.loc[train['Age']>60,'Age_band']=6\ntrain.loc[train['Age']>70,'Age_band']=7\n\ntest['Age_band']=0\ntest.loc[test['Age']>10,'Age_band']=1\ntest.loc[test['Age']>20,'Age_band']=2\ntest.loc[test['Age']>30,'Age_band']=3\ntest.loc[test['Age']>40,'Age_band']=4\ntest.loc[test['Age']>50,'Age_band']=5\ntest.loc[test['Age']>60,'Age_band']=6\ntest.loc[test['Age']>70,'Age_band']=7","3112512f":"sns.factorplot('Age_band','Survived',data=train,col='Pclass')","5a500391":"combined = pd.concat([train.drop('Survived', axis=1), test])\ncombined.Fare.hist()","bde9c7ee":"sns.factorplot('Pclass', 'Fare', hue='Sex', data=combined)","1c97c442":"# qcut splits or arranges the values according the number of \n# bins we have passed. So if we pass for 5 bins, it will arrange the \n# values equally spaced into 5 seperate bins or value ranges.\ncombined['Fare_band'] = pd.qcut(combined.Fare, 8)\ncombined['Fare_band'].value_counts()","b68cc0fa":"train['Fare_band']=0\ntrain.loc[train['Fare']>7.75,'Fare_band']=1\ntrain.loc[train['Fare']>7.896,'Fare_band']=2\ntrain.loc[train['Fare']>9.844,'Fare_band']=3\ntrain.loc[train['Fare']>14.454,'Fare_band']=4\ntrain.loc[train['Fare']>24.15,'Fare_band']=5\ntrain.loc[train['Fare']>31.275,'Fare_band']=6\ntrain.loc[train['Fare']>69.55,'Fare_band']=7\n\ntest['Fare_band']=0\ntest.loc[test['Fare']>7.75,'Fare_band']=1\ntest.loc[test['Fare']>7.896,'Fare_band']=2\ntest.loc[test['Fare']>9.844,'Fare_band']=3\ntest.loc[test['Fare']>14.454,'Fare_band']=4\ntest.loc[test['Fare']>24.15,'Fare_band']=5\ntest.loc[test['Fare']>31.275,'Fare_band']=6\ntest.loc[test['Fare']>69.55,'Fare_band']=7","78a827be":"sns.factorplot('Fare_band','Survived',data=train,hue='Sex')","dc90632d":"# Family column\ntrain['Family'] = train.SibSp + train.Parch\ntest['Family'] = test.SibSp + test.Parch","9a4decb8":"sns.factorplot('Family','Survived', hue='Sex', col='Pclass', data=train)","60572bf1":"# Ordinal encoding for Sex\ntrain['Sex'].replace(['male','female'], [0,1], inplace=True)\ntest['Sex'].replace(['male','female'], [0,1], inplace=True)\n\n# Ordinal encoding for Embarked\ntrain['Embarked'].replace(['S','C','Q'], [0,1,2], inplace=True)\ntest['Embarked'].replace(['S','C','Q'], [0,1,2], inplace=True)\n\n# Ordinal encoding for Titles\n# Mr = 0, Mrs = 1, Miss = 2, Master = 3, Others = 4\ntrain.Title.replace(['Mr','Mrs','Miss','Master','Others'], [0,1,2,3,4], inplace=True)\ntest.Title.replace(['Mr','Mrs','Miss','Master','Others'], [0,1,2,3,4], inplace=True)","c132fb09":"test","47f90a50":"useful = ['Sex', 'Pclass', 'Age_band', 'Embarked', 'Fare_band', 'SibSp', 'Parch', 'Family', 'Title', 'Survived']\ntrain[useful].to_csv('dietanic_train.csv', index=False)\n\nuseful = ['Sex', 'Pclass', 'Age_band', 'Embarked', 'Fare_band', 'SibSp', 'Parch', 'Family', 'Title']\ntest[useful].to_csv('dietanic_test.csv', index=False)","e8858df4":"# stratified folds\ntrain = pd.read_csv('.\/dietanic_train.csv')\ntrain","7ffdef29":"number_of_folds = 5\nfrom sklearn.model_selection import StratifiedKFold\n\n# Load original training dataset\nX = train.copy()\ny = X['Survived']\n# Add a column for fold number\nX[\"kfold\"] = -1\n\n# Split the data into folds\nskf = StratifiedKFold(n_splits=number_of_folds, shuffle=True, random_state=42)\nfor fold, (train_indices, valid_indices) in enumerate(skf.split(X, y)):\n    X.loc[valid_indices, \"kfold\"] = fold\n\n# Save the new train dataset\nX.to_csv(\"dietanic_folds.csv\", index=False)\nprint(\"Saved dietanic_folds.csv. Check output\")","1c68a00b":"## Age predict","68737c57":"These 2 women have the same ticket number so we'll assume they boarded from the same port.  \nThey both survived, Pclass = 1, and if I didn't know any better I would say they are mother and daughter but Parch = 0 for both so it's hard to tell.  ","5a001d61":"## Family","3a297558":"Mr - Males  \nMrs. - Women  \nMiss - Young women  \nMaster - kids  \nMme, Ms, Mlle - Replace with Miss  \nLady - Replace with Mrs  \nSir - Replace with Mr  \nRest - Others","b1f7c3a8":"Therefore, we can utilize Titles to create Age bands.","f5267391":"Binning of Continuous Age feature to Age_band. The maximum age of a passenger was 80. So lets divide the range from 0-80 into 8 bins. So 80\/8=10. So bins of size 10.","cd281ce6":"## Ordinal encoding","6c7821ae":"## Fare bands","16cd6f62":"## Save train, test and stratified csvs"}}