{"cell_type":{"7c322b16":"code","58c362b2":"code","87954e03":"code","89737616":"code","57e65371":"code","25456d19":"code","28d47ee5":"code","ba8b13b1":"code","0c04df79":"code","0192c7dc":"code","a57220f4":"code","bee93c01":"code","fbfe08b4":"code","a0521658":"code","3874c354":"code","3b1f4268":"code","ece64e77":"code","9aaa1674":"code","b56a7642":"code","68d96df8":"code","2153d477":"code","a0fd8209":"code","428f1383":"code","c8909d0d":"code","abd44c85":"code","ee2dfac5":"code","d85837df":"code","58028645":"code","9bc579e0":"code","6b87dc91":"code","8fe78b70":"code","079f432c":"code","3eb25f5b":"code","a055bc4f":"code","8d7471eb":"code","fef000e0":"code","78472794":"code","8ba3e333":"code","172679c9":"code","bbaffa5f":"code","d85d7957":"code","a57033db":"code","f31dc4d9":"code","b094c350":"code","95c5fa1a":"code","5c022932":"code","9aed3e73":"code","a045b8f2":"code","b19a9308":"code","82159f8b":"code","39eab191":"code","e1a62602":"code","38030c33":"code","16f681e6":"code","fabc9124":"code","009fbe16":"code","149a6919":"code","1333d437":"code","db3ba586":"code","73d5270b":"code","6d7ec299":"code","56cf5c69":"code","17e58bbd":"code","4ad1db3c":"code","9aa1d652":"code","630f5538":"code","04d8e01f":"code","16d99714":"code","2853125e":"code","c1ea6498":"code","78523d87":"code","b5fc5205":"code","d6d8b7fc":"code","39d7471c":"code","edddf7ac":"code","146c9907":"code","01b83353":"code","e04aed07":"code","8b392906":"code","78252193":"code","dff27991":"code","68e2a382":"code","dfd7e597":"code","36ee69ea":"code","77084aeb":"code","2879aeca":"code","dd221acf":"code","729f06c4":"code","80778e09":"code","43901ccf":"code","046232fa":"code","7ce9dddd":"code","a4a2837a":"code","c8db4f75":"code","b3fbcea8":"code","704dfece":"code","3255886c":"code","ebad20b8":"markdown","d3770590":"markdown","69e7e9f7":"markdown","5c203ae2":"markdown","6503e91c":"markdown","a5c4001d":"markdown","42205025":"markdown","ba3f063a":"markdown","d0c532f1":"markdown","dee19681":"markdown","525e6a56":"markdown","40639ec0":"markdown","4c2583af":"markdown","59679e0e":"markdown","508cee1a":"markdown","b334bd0b":"markdown","580dd84f":"markdown","1f88f758":"markdown","64625a50":"markdown"},"source":{"7c322b16":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px\nimport random\nimport plotly.figure_factory as ff\n\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, classification_report, plot_roc_curve\nfrom sklearn.model_selection import train_test_split, cross_validate\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\n\nimport cufflinks as cf \n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n\nfrom sklearn.neighbors import LocalOutlierFactor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","58c362b2":"pd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 500)\n","87954e03":"df = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","89737616":"df.head()","57e65371":"df.info()","25456d19":"df.describe().T","28d47ee5":"def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","ba8b13b1":"outlier_thresholds(df, \"Pregnancies\")","0c04df79":"outlier_thresholds(df, \"Glucose\")","0192c7dc":"outlier_thresholds(df, \"SkinThickness\")","a57220f4":"outlier_thresholds(df, \"Insulin\")","bee93c01":"outlier_thresholds(df, \"BMI\")","fbfe08b4":"outlier_thresholds(df, \"DiabetesPedigreeFunction\")","a0521658":"outlier_thresholds(df, \"Age\")","3874c354":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car","3b1f4268":"def check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","ece64e77":"cat_cols, num_cols, cat_but_car = grab_col_names(df,cat_th=10, car_th=20)","9aaa1674":"for col in num_cols:\n    print(col, check_outlier(df, col))","b56a7642":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n","68d96df8":"replace_with_thresholds(df, 'Insulin')","2153d477":"replace_with_thresholds(df, 'Age')","a0fd8209":"replace_with_thresholds(df, 'BloodPressure')","428f1383":"replace_with_thresholds(df, 'Pregnancies')","c8909d0d":"replace_with_thresholds(df, 'Glucose')\n","abd44c85":"replace_with_thresholds(df, 'BMI')","ee2dfac5":"replace_with_thresholds(df, 'DiabetesPedigreeFunction')","d85837df":"replace_with_thresholds(df, 'SkinThickness')","58028645":"cat_cols, num_cols, cat_but_car = grab_col_names(df,cat_th=10, car_th=20)","9bc579e0":"for col in num_cols:\n    print(col, check_outlier(df, col))","6b87dc91":"bins = [-1, 50, 70, 100, 125, int(df[\"Glucose\"].max())]","8fe78b70":"mylabels = ['anlams\u0131zca_dusuk','normal1', 'normal2', 'gizli_seker', 'diyabet']","079f432c":"df[\"Glucose_cat\"] = pd.cut(df[\"Glucose\"], bins, labels=mylabels)\n","3eb25f5b":"bins = [-1, 60, 80, 81, 90, 100, int(df[\"BloodPressure\"].max())]","a055bc4f":"mylabels = ['cok_dusuk', 'dusuk', 'ideal', 'saglikli', 'yuksek', 'cok_yuksek']","8d7471eb":"df[\"BloodPressure_cat\"] = pd.cut(df[\"BloodPressure\"], bins, labels=mylabels)","fef000e0":"df.head()","78472794":"bins = [20, 25, 50, 65, int(df[\"Age\"].max())]","8ba3e333":"mylabels = ['young_adult', 'adult', 'middle_age', 'senior']","172679c9":"df[\"age_cat\"] = pd.cut(df[\"Age\"], bins, labels=mylabels)","bbaffa5f":"df.head()","d85d7957":"cat_cols, num_cols, cat_but_car = grab_col_names(df,cat_th=10, car_th=20)","a57033db":"bins = [-1, 19, 25, 30, 35, int(df[\"Age\"].max())]","f31dc4d9":"mylabels = ['underweight', 'normal', 'overweight', 'obese' , 'extremelyobese']","b094c350":"df[\"BMI_cat\"] = pd.cut(df[\"BMI\"], bins, labels=mylabels)","95c5fa1a":"df.head()","5c022932":"df[df[\"BloodPressure_cat\"].isnull()]","9aed3e73":"def random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","a045b8f2":"species_count = df['Outcome'].value_counts()\ndata = [go.Bar(\n    x = species_count.index,\n    y = species_count.values,\n    marker = dict(color = random_colors(3),line=dict(color='#000000', width=2)))]\n\nlayout = go.Layout(\n   {\n      \"title\":\"Healthy VS Diabetic\",\n   }\n)\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","b19a9308":"trace = go.Pie(labels = list(df.Outcome.unique()), values = list(df.Outcome.value_counts()),\n                            hole = 0.2,\n               marker=dict(colors = random_colors(3), \n                           line=dict(color='#000000', width=2)\n                           ))\ndata = [trace]\nlayout = go.Layout(\n   {\n      \"title\":\"Healthy VS Diabetic\",\n   }\n)\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","82159f8b":"data = [go.Heatmap(z = np.array(df.corr().values),\n                   x = np.array(df.corr().columns),\n                   y = np.array(df.corr().columns),\n                     colorscale='Viridis',)\n       ]\nlayout = go.Layout(dict(title = 'Correlation Matrix for variables',\n                            #autosize = False,\n                            #height  = 1400,\n                            #width   = 1600,\n                            margin  = dict(r = 0 ,l = 100,\n                                           t = 0,b = 100,\n                                         ),\n                            yaxis   = dict(tickfont = dict(size = 9)),\n                            xaxis   = dict(tickfont = dict(size = 9)),\n                           )\n                      )\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","39eab191":"trace0 = go.Box(\n    name = 'Pregnancies',\n    y = df[\"Pregnancies\"]\n)\n\n\ndata = [trace0]\n\n\nlayout = go.Layout(\n   {\n      \"title\":\"Pregnancies \",\n   }\n)\n\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","e1a62602":"Diabetic = df[(df['Outcome'] != 0)]\nHealthy = df[(df['Outcome'] == 0)]\n\ntmp1 = Diabetic[\"Pregnancies\"]\ntmp2 = Healthy[\"Pregnancies\"]\nhist_data = [tmp1, tmp2]\n    \ngroup_labels = ['diabetic', 'healthy']\ncolors = random_colors(2)\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = 0, curve_type='kde')\n    \nfig['layout'].update(title = \"Pregnancies\")\n\npy.iplot(fig, filename = 'Density plot')","38030c33":"cols = \"Glucose\"\ntrace0 = go.Box(\n    name = cols,\n    y = df[cols]\n)\n\nDiabetic = df[(df['Outcome'] != 0)]\nHealthy = df[(df['Outcome'] == 0)]\n\ntmp1 = Diabetic[cols]\n\ntmp2 = Healthy[cols]\nhist_data = [tmp1, tmp2]\n    \ngroup_labels = ['diabetic', 'healthy']\ncolors = random_colors(2)\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = 0, curve_type='kde')\n    \nfig['layout'].update(title = cols)\n\npy.iplot(fig, filename = 'Density plot')","16f681e6":"cols = \"BloodPressure\"\ntrace0 = go.Box(\n    name = cols,\n    y = df[cols]\n)\n\nDiabetic = df[(df['Outcome'] != 0)]\nHealthy = df[(df['Outcome'] == 0)]\n\ntmp1 = Diabetic[cols]\n\ntmp2 = Healthy[cols]\nhist_data = [tmp1, tmp2]\n    \ngroup_labels = ['diabetic', 'healthy']\ncolors = random_colors(2)\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = 0, curve_type='kde')\n    \nfig['layout'].update(title = cols)\n\npy.iplot(fig, filename = 'Density plot')","fabc9124":"cols = \"Insulin\"\ntrace0 = go.Box(\n    name = cols,\n    y = df[cols]\n)\n\nDiabetic = df[(df['Outcome'] != 0)]\nHealthy = df[(df['Outcome'] == 0)]\n\ntmp1 = Diabetic[cols]\n\ntmp2 = Healthy[cols]\nhist_data = [tmp1, tmp2]\n    \ngroup_labels = ['diabetic', 'healthy']\ncolors = random_colors(2)\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = 0, curve_type='kde')\n    \nfig['layout'].update(title = cols)\n\npy.iplot(fig, filename = 'Density plot')","009fbe16":"cols = \"BMI\"\ntrace0 = go.Box(\n    name = cols,\n    y = df[cols]\n)\n\nDiabetic = df[(df['Outcome'] != 0)]\nHealthy = df[(df['Outcome'] == 0)]\n\ntmp1 = Diabetic[cols]\n\ntmp2 = Healthy[cols]\nhist_data = [tmp1, tmp2]\n    \ngroup_labels = ['diabetic', 'healthy']\ncolors = random_colors(2)\n\nfig = ff.create_distplot(hist_data, group_labels, colors = colors, show_hist = True, bin_size = 0, curve_type='kde')\n    \nfig['layout'].update(title = cols)\n\npy.iplot(fig, filename = 'Density plot')","149a6919":"ax = px.scatter_3d(df, x=\"Age\", y=\"Glucose\", z=\"Insulin\",template= \"plotly_dark\",color=\"Outcome\")\nax.show()","1333d437":"df.head()","db3ba586":"encode_glucose = {'anlams\u0131zca_dusuk': 0,\n                 'normal1': 1,\n                 'normal2': 3,\n                 'gizli_seker': 4,\n                 'diyabet': 5}","73d5270b":"df['Glucose_cat'] = df['Glucose_cat'].map(encode_glucose)","6d7ec299":"encode_bloodpressure = {'cok_dusuk': 0,\n                   'dusuk': 1,\n                   'ideal': 2,\n                   'saglikli': 3,\n                   'yuksek': 4,\n                   'cok_yuksek': 5}","56cf5c69":"df['BloodPressure_cat'] = df['BloodPressure_cat'].map(encode_bloodpressure)","17e58bbd":"encode_age = {'young_adult': 0,\n             'adult': 1,\n             'middle_age': 2,\n             'senior': 3}","4ad1db3c":"df['age_cat'] = df['age_cat'].map(encode_age)","9aa1d652":"encode_bmi = {'underweight': 0,\n              'normal': 1,\n              'overweight': 2,\n              'obese': 3,\n              'extremelyobese': 4}","630f5538":"df['BMI_cat'] = df['BMI_cat'].map(encode_bmi)","04d8e01f":"df.head()","16d99714":"df[\"BloodPressure_cat\"] = df[\"BloodPressure_cat\"].astype(int)","2853125e":"df[\"Glucose_cat\"] = df[\"Glucose_cat\"].astype(int)","c1ea6498":"df[\"age_cat\"] = df[\"age_cat\"].astype(int)","78523d87":"df[\"BMI_cat\"] = df[\"BMI_cat\"].astype(int)","b5fc5205":"df.info()","d6d8b7fc":"df.corr()","39d7471c":"data = [go.Heatmap(z = np.array(df.corr().values),\n                   x = np.array(df.corr().columns),\n                   y = np.array(df.corr().columns),\n                     colorscale='Viridis',)\n       ]\nlayout = go.Layout(dict(title = 'Correlation Matrix for variables',\n                            #autosize = False,\n                            #height  = 1400,\n                            #width   = 1600,\n                            margin  = dict(r = 0 ,l = 100,\n                                           t = 0,b = 100,\n                                         ),\n                            yaxis   = dict(tickfont = dict(size = 9)),\n                            xaxis   = dict(tickfont = dict(size = 9)),\n                           )\n                      )\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","edddf7ac":"df.drop([\"Age\", \"Glucose\", \"BloodPressure\", \"BMI\"], axis=1, inplace=True)","146c9907":"df.columns","01b83353":"data = [go.Heatmap(z = np.array(df.corr().values),\n                   x = np.array(df.corr().columns),\n                   y = np.array(df.corr().columns),\n                     colorscale='Viridis',)\n       ]\nlayout = go.Layout(dict(title = 'Correlation Matrix for variables',\n                            #autosize = False,\n                            #height  = 1400,\n                            #width   = 1600,\n                            margin  = dict(r = 0 ,l = 100,\n                                           t = 0,b = 100,\n                                         ),\n                            yaxis   = dict(tickfont = dict(size = 9)),\n                            xaxis   = dict(tickfont = dict(size = 9)),\n                           )\n                      )\n\nfig = go.Figure(data=data,layout = layout)\niplot(fig)","e04aed07":"df.info()","8b392906":"y = df['Outcome']","78252193":"X = df.drop(['Outcome'], axis=1)","dff27991":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)","68e2a382":"log_model = LogisticRegression(solver = 'liblinear').fit(X_train, y_train)","dfd7e597":"y_pred = log_model.predict(X_train)","36ee69ea":"y_pred[0:10]","77084aeb":"# s\u0131n\u0131f olas\u0131l\u0131klar\u0131\nlog_model.predict_proba(X_train)[0:10]","2879aeca":"# 1. s\u0131n\u0131fa ait olma olas\u0131l\u0131klar\u0131:\ny_prob = log_model.predict_proba(X_train)[:, 1]","dd221acf":"\n# Model Validation: 10-Fold Cross Validation\n\ny = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)\n","729f06c4":"log_model = LogisticRegression(solver = 'liblinear').fit(X, y)","80778e09":"cv_results = cross_validate(log_model,\n                            X, y,\n                            cv=5,\n                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])","43901ccf":"cv_results['test_accuracy'].mean()","046232fa":"cv_results['test_precision'].mean()","7ce9dddd":"cv_results['test_recall'].mean()","a4a2837a":"cv_results['test_f1'].mean()","c8db4f75":"cv_results['test_roc_auc'].mean()","b3fbcea8":"X.columns","704dfece":"random_user = X.sample(1, random_state=27)","3255886c":"log_model.predict(random_user)\n","ebad20b8":"## BloodPressure Analysis","d3770590":"## Age - Glucose - Insulin","69e7e9f7":"Age\n* 0-1 baby\n* 1-3 toddler\n* 4-12 child\n* 13-20 teen\n* 20-25 young adult \n* 25-50 adult\n* 50-65 middle age \n* 65-.. Senior\n* Note: In our data, the age starts at 21. That's why I categorized it starting from young_adult.","5c203ae2":"BMI\n* <18.5 Underweight\n* 18.5 - 24.5 Normal\n* 25 - 29.9 Overweight\n* 30 - 34.9 Obese\n* 35< Extremely Obese","6503e91c":"### Visualization for Target","a5c4001d":"\n## Load and Check Data","42205025":"## BMI Analysis","ba3f063a":"## Glucose Analysis","d0c532f1":"### Correlation","dee19681":"## Pregnancies Analysis","525e6a56":"## Insulin Analysis","40639ec0":"K\u00fc\u00e7\u00fck tansiyon (BloodPressure) de\u011ferleri nas\u0131l olmal\u0131?\n* D\u00fc\u015f\u00fck Tansiyon <60\n* En \u0130deal Tansiyon 80\n* Sa\u011fl\u0131kl\u0131 bir Tansiyon <90\n* Y\u00fcksek Tansiyon 90 - 100\n* \u00c7ok y\u00fcksek tansiyon >100","4c2583af":"## Categoric or Numeric Data Analysis","59679e0e":"<a id = \"2\"><\/a>\n## Basic Data Analysis","508cee1a":"## MODEL\n* **Logistic Regression**","b334bd0b":"# Introduction\n\u200b\n\n### Job Description\n\nCan you develop a machine learning model that can predict whether people have diabetes when their characteristics are specified?\n\n    \n### Dataset Story \n\n* The dataset is part of the large dataset held at the National Institutes of Diabetes-Digestive-Kidney Diseases in the USA.\n\n* Data used for diabetes research on Pima Indian women aged 21 and over living in Phoenix, the 5th largest city of the State of Arizona in the USA.\n\n* It consists of 768 observations and 8 numerical independent variables. The target variable is specified as \"outcome\"; 1 indicates positive diabetes test result, 0 indicates negative.\n\n    \n### Variables\n\n* Pregnancies \u2013 Number of pregnancies\n* Glucose \u2013 Glucose 2-hour plasma glucose concentration in the oral glucose tolerance test\n* Blood Pressure (mm Hg)\n* SkinThickness \u2013 Skin Thickness\n* Insulin \u2013 2-hour serum insulin (mu U\/ml)\n* DiabetesPedigreeFunction: \u2013 Function 2-hour plasma glucose concentration in the oral glucose tolerance test\n* Age \u2013 Age (years)\n* Outcome: Have the disease (1) or not (0)\n\n### Mission\n\nDevelop a diabetes prediction model by performing literature research, data preprocessing, and feature engineering.\n","580dd84f":"## Getting rid of outliers","1f88f758":"## Outliers","64625a50":"Glucose de\u011ferleri nas\u0131l olmal\u0131?\n\nA\u00e7 Kan \u015eekeri Seviyesi\n* 50\/70 mg\/ dl Hipoglisemi\n* 70\/100 Normal\n* 100\/125 Gizli \u015eeker\n* 126\/ve \u00fczeri Diyabet\n\nTok Kan \u015eekeri Seviyesi\n* 100\/140 Normal\n* 140\/199 Gizli \u015eeker\n* 200\/ve \u00fczeri diyabet\n"}}