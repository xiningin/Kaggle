{"cell_type":{"c394c114":"code","0083c2b8":"code","64248786":"code","dbb78249":"code","90ca6e7b":"code","209657ef":"code","7353b17d":"code","d3dae4d8":"code","261b0de3":"code","2cb80c94":"code","ac3f1e75":"code","7a9cd537":"code","b6d0b0a2":"code","7180809f":"code","9704bf05":"code","666f2711":"code","a9f60427":"code","fd0024bd":"code","28e9e347":"code","bbc2a41a":"code","db3ba930":"code","35d042c7":"code","cbbf8535":"code","d99e6336":"code","67b5e68b":"code","2981459a":"code","f9c486e3":"code","bff10f74":"code","2f1405f2":"code","3715142d":"markdown","a3fcf0de":"markdown","3bdeb371":"markdown","2cc94aa6":"markdown","14af2888":"markdown","d931847f":"markdown","315b7017":"markdown"},"source":{"c394c114":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0083c2b8":"\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport seaborn as sns","64248786":"!pip install xlrd","dbb78249":"!pip install openpyxl","90ca6e7b":"EPL18 = pd.read_excel('..\/input\/epl1718\/EPL2017-18.xlsx')\nprint(EPL18.columns.tolist())","209657ef":"EPL18.head()","7353b17d":"# We first identify whether the result was a win for the home team (H),\n# the away team (A) or a draw (D). We also create the counting variable.\n\nEPL18['hwinvalue']=np.where(EPL18['FTR']=='H',1,np.where(EPL18['FTR']=='D',.5,0))\nEPL18['awinvalue']=np.where(EPL18['FTR']=='A',1,np.where(EPL18['FTR']=='D',.5,0))\nEPL18['count']=1","d3dae4d8":"Epl17 = EPL18[EPL18[\"Date\"] < 20180000]\nEpl18 = EPL18[EPL18[\"Date\"] >= 20180000]\nEpl17.head()","261b0de3":"# we have to create separate dfs to calculate home team and away team performance\n# Here is the home team df, including only the variables we need.\nEpl17home = Epl17.groupby(['HomeTeam'])['count','hwinvalue', 'FTHG','FTAG'].sum().reset_index()\nEpl17home = Epl17home.rename(columns={'HomeTeam':'team','count':'Ph','FTHG':'FTHGh','FTAG':'FTAGh'})\nEpl17home.head()\n","2cb80c94":"# Now we create the mirror image df for the away team results.\nEpl17away = Epl17.groupby(['AwayTeam'])['count','awinvalue', 'FTHG','FTAG'].sum().reset_index()\nEpl17away = Epl17away.rename(columns={'AwayTeam':'team','count':'Pa','FTHG':'FTHGa','FTAG':'FTAGa'})\nEpl17away.head()","ac3f1e75":"Pl = pd.merge(Epl17home,Epl17away,on=[\"team\"])\nPl.head()","7a9cd537":"# Sum the results by home and away measures to get the team overall performance for the season\nPl[\"w\"] = Pl[\"hwinvalue\"] + Pl[\"awinvalue\"]\nPl[\"G\"] = Pl[\"Ph\"] + Pl[\"Pa\"]\nPl[\"GF\"] = Pl[\"FTHGh\"] + Pl[\"FTAGa\"]\nPl[\"GA\"] = Pl[\"FTHGa\"] + Pl[\"FTAGh\"]\nPl.sort_values('w',ascending = False)","b6d0b0a2":"# Create the win percentage and Pythagorean Expectation\nPl['wpc17'] = Pl['w']\/Pl['G']\nPl[\"pyth17\"] = Pl[\"GF\"]**2\/(Pl[\"GF\"]**2+Pl[\"GA\"]**2)\nPl.head()\n","7180809f":"Pl['diff'] = Pl['pyth17'] - Pl['wpc17']\nPl.sort_values(\"awinvalue\",ascending = False)","9704bf05":"Epl18home = Epl18.groupby(['HomeTeam'])['count','hwinvalue', 'FTHG','FTAG'].sum().reset_index()\nEpl18home = Epl18home.rename(columns={'HomeTeam':'team','count':'Ph1','FTHG':'FTHGh1','FTAG':'FTAGh1','hwinvalue':'hwinvalue1'})\nEpl18home.head()","666f2711":"Epl18away = Epl18.groupby(['AwayTeam'])['count','awinvalue', 'FTHG','FTAG'].sum().reset_index()\nEpl18away = Epl18away.rename(columns={'AwayTeam':'team','count':'Pa1','FTHG':'FTHGa1','FTAG':'FTAGa1','awinvalue':'awinvalue1'})\nEpl18away.head()","a9f60427":"Pl18 = pd.merge(Epl18home,Epl18away,on=[\"team\"])\nPl18.head()","fd0024bd":"Pl18[\"w1\"] = Pl18[\"hwinvalue1\"] + Pl18[\"awinvalue1\"]\nPl18[\"G1\"] = Pl18[\"Ph1\"] + Pl18[\"Pa1\"]\nPl18[\"GF1\"] = Pl18[\"FTHGh1\"] + Pl18[\"FTAGa1\"]\nPl18[\"GA1\"] = Pl18[\"FTHGa1\"] + Pl18[\"FTAGh1\"]","28e9e347":"Pl18.sort_values('w1',ascending = False)","bbc2a41a":"Pl18['wpc18'] = Pl18['w1']\/Pl18['G1']\nPl18[\"pyth18\"] = Pl18[\"GF1\"]**2\/(Pl18[\"GF1\"]**2+Pl18[\"GA1\"]**2)\nPl18.head()\n","db3ba930":"Pl18['d'] = Pl18['hwinvalue1'] - Pl18['awinvalue1']\nPl18","35d042c7":"Pl1718 = pd.merge(Pl,Pl18,on=[\"team\"])\nPl1718.head()","cbbf8535":"sns.relplot(x=\"pyth17\", y=\"wpc17\", data =Pl)","d99e6336":"\npyth_lm = smf.ols(formula = 'wpc17 ~ pyth17', data=Pl).fit()\npyth_lm.summary()","67b5e68b":"sns.relplot(x=\"pyth18\", y=\"wpc18\", data =Pl18)","2981459a":"pyth_lm = smf.ols(formula = 'wpc18 ~ pyth18', data=Pl18).fit()\npyth_lm.summary()","f9c486e3":"# The two plots look similar\n# We can be more precise still if we compare the correlation coefficients. The first row of the table shows the \n# correlation of win percentage in second half of the season against itself, win percentage in the first half of the season,\n# Pythagorean Expectation in the first half of the season, and Pythagorean Expectation in the second half of the season.\n# Our focus is on comparing the second and third columns.\n\nkeyvars = Pl1718[['team','wpc18','wpc17','pyth17','pyth18']]\nkeyvars.corr()","bff10f74":"sns.relplot(x=\"pyth17\", y=\"wpc18\", data =Pl1718)","2f1405f2":"sns.relplot(x=\"wpc17\", y=\"wpc18\", data =Pl1718)","3715142d":"Here , you can see the diff in performances at home and away","a3fcf0de":"We can see a kind of relation between wp and PE but it is not very evident due to the lack of datapoints","3bdeb371":"In the diff column ,you can see the difference between the win percentage and P.E .Thus you can say whether a team is ahead or behind from where it should be","2cc94aa6":"Pythagorean Expectation is a metric that evaluates a team\u2019s number of runs for and runs against and attempts to use that data to come up with what a team\u2019s win percentage \u201cshould\u201d be base on run data alone.\nIt is assumed that over a longer period of time (for example a baseball season), win\/loss percentage should correlate with run data based on the Pythagorean expectation formula.\nPythagorean expectation can be used to determine if a team is ahead or behind where it \u201cshould\u201d be based on run data. A team strongly lagging Pythagorean expectation is seen through this filter as due for a win streak, while one strongly ahead of it is seen as due for a losing streak.\nIn practice, Pythagorean win percentage has shown to be quite accurate \u2013 usually being off by 2 \u2013 3 wins over the course of a baseball season. Alternative forms of Pythagorean win percentage use a different exponent than 2.","14af2888":"Formula\nPythagorean Win = Runs Scored2\/(Runs Scored2 + Runs Allowed2)\nIt can also calculate as:\nPythagorean Win = 1 \/ (1 + (Runs Allowed \/ Runs Scored)2)","d931847f":"We can see from the correlation matrix that win percentage in the second half of the season is correlated with win percentage in the first half of the season - the correlation coefficient. It's not surprising that performance in the first half of the season is to an extent predictive of performance in the second half. But there are also clearly things that can change.\nWe could simply use first half win percentage as a predictor of second half win percentage, but when we look at the correlation matrix we can see that the Pythagorean Expectation is an even better forecast - the correlation coefficient is higher. To be sure, the difference is not large, but it is slightly better. This was, in fact, the initial impetus for Bill James when introducing the statistic. He argued that a win could ride on lucky hit and the difference of just one run, which made wins a less reliable predictor than the aggregate capacity to produce runs and limit conceding runs. As in many aspects of baseball analysis, our data show that James was quite right.Similar thought process could be applied in football","315b7017":"When we run our regression, again, we look at the coefficient on Pythagorean expectation, we have a value for the coefficient and we can see it's statistically highly significant. We have a very large T-statistic and a p-value again. When we look at the R squared up here, we can see an R squared of 0.9 for which tells us that our Pythagorean expectation is capturing a very large fraction, almost all the variation in lead position that we can find. What we've shown this time is that, even if we look at a very different competition we look at the world of soccer, we still find the same relationship we found in baseball and basketball which is telling us really this Pythagorean expectation seems to be a fairly common feature of all sports and the only outlier appears to be cricket data"}}