{"cell_type":{"7fcb7b2e":"code","4b1fe6df":"code","e27e48d9":"code","015e3d35":"code","17a43b5b":"code","3620b762":"code","b068dd7d":"code","62727285":"code","a574693f":"markdown","0367b445":"markdown","f01f2cbc":"markdown","69bcfb91":"markdown","d2eeeff4":"markdown"},"source":{"7fcb7b2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\nfrom pprint import pprint\n\n# Thanks to paultimothymooney for outlining how to use bq_helper to query this dataset\nimport bq_helper\nfrom bq_helper import BigQueryHelper\n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\nusfs = BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"usfs_fia\")\n\n# Need SQLite for forest fire dataset\nimport sqlite3\nconn = sqlite3.connect('..\/input\/FPA_FOD_20170508.sqlite')","4b1fe6df":"query1 = \"\"\"\nSELECT\n    species_common_name,\n    total_height,\n    current_diameter,\n    measurement_year,\n    plot_county_code\nFROM\n    `bigquery-public-data.usfs_fia.plot_tree`\nWHERE\n    plot_state_code = 53\n    AND total_height > 0\n;        \"\"\"\nresponse1 = usfs.query_to_pandas_safe(query1, max_gb_scanned=10)\n\n# Group together height and diameter measurements for each species taken each year\nheight_lst = response1.groupby(['species_common_name', 'measurement_year']).agg({'current_diameter': 'mean'})\n\n# Remove tree types that have at least 12 measurements, and transpose so subplots groups species and not year\nheight_df = height_lst.unstack().dropna(axis='index', thresh=12)\n\n# Rename columns to remove total_height label\nheight_df.columns = height_df.columns.map(lambda t: t[1])\n_ = height_df.transpose().plot.bar(subplots=True, layout=(40,2), figsize=(20, 100))","e27e48d9":"query2 = \"\"\"\nSELECT\n    AVG(current_diameter) as avg_dia,\n    measurement_year,\n    plot_county_code\nFROM\n    `bigquery-public-data.usfs_fia.plot_tree`\nWHERE\n    plot_state_code = 53\n    AND total_height > 0\nGROUP BY\n    plot_county_code,\n    measurement_year\n;        \"\"\"\nresponse2 = usfs.query_to_pandas_safe(query2, max_gb_scanned=10)\n# Turn the dataframe into a pivot table with the avg_dia as the values inside\npivoted = response2.pivot(index='measurement_year', columns='plot_county_code')\n# Remove any year that less than 80% the counties were measured\npivoted.dropna(inplace=True, thresh=len(pivoted.columns.values)*0.8)\n# Drop counties missing measurements\npivoted.dropna(axis='columns', inplace=True)\n# Rename columns to remove avg_dia from header\npivoted.columns = [code for _, code in pivoted.columns.values]\n\n# Create dictionaries to convert county code to county name and vice versa\nwa_counties = ['Adams', 'Asotin', 'Benton', 'Chelan', 'Clallam', 'Clark', 'Columbia', 'Cowlitz', 'Douglas', 'Ferry', 'Franklin'\n               , 'Garfield', 'Grant', 'Grays Harbor', 'Island', 'Jefferson', 'King', 'Kitsap', 'Kittitas', 'Klickitat'\n               , 'Lewis', 'Lincoln', 'Mason', 'Okanogan', 'Pacific', 'Pend Oreille', 'Pierce', 'San Juan', 'Skagit', 'Skamania'\n               , 'Snohomish', 'Spokane', 'Stevens', 'Thurston', 'Wahkiakum', 'Walla Walla', 'Whatcom', 'Whitman', 'Yakima']\nwa_county_codes = ['001', '003', '005', '007', '009', '011', '013', '015', '017', '019', '021', '023', '025'\n                   , '027', '029', '031', '033', '035', '037', '039', '041', '043', '045', '047', '049', '051'\n                   , '053', '055', '057', '059', '061', '063', '065', '067', '069', '071', '073', '075', '077']\n# Get county name given code\nwa_county_dict = {int(code): name.lower() for code, name in zip(wa_county_codes, wa_counties)}\n# Get code given county name\nwa_code_dict = {name.lower(): int(code) for code, name in zip(wa_county_codes, wa_counties)}\n\n# Create the correlation table with the headers as the county codes\ndf_corr = pivoted.corr()\n\n# Change the column headers to the country names for printing to make the pivot table easier to read\npivoted_named = pivoted.copy()\npivoted_named.columns = [wa_county_dict[code] for code in pivoted.columns.values]\ndf_corr_named = pivoted_named.corr()\n\n# Colour the cells green when strongly correlated and red when not\nimport seaborn as sns\ndf_corr_color = df_corr_named.style.background_gradient(cmap='RdYlGn')\ndf_corr_color\n\n# TODO: Could look into how correlated height and diameters are between counties as a way to determine that they have similar tree types","015e3d35":"df_diff_named = pivoted_named.diff()\ndf_corr2 = df_diff_named['columbia'].rolling(window=4).corr(other=df_diff_named['kitsap'])\ndf_std = df_corr2.rolling(window=2).std()\nfig, ax = plt.subplots()\ndf_corr2.plot(title='Diameter of Trees in Columbia vs. Kitsap Counties', x='Year', legend=True, ax=ax)\ndf_std.plot(legend=True, ax=ax)\n_ = ax.legend(['corr', 'std'])","17a43b5b":"# Check if every time this STD is above 0.7 if a fire occurred in either county by looking at a couple examples\n# First field is year, next 2 are the counties that it seems that a fire occurred\npred_fire_years = []\nthresh = 0.7\n# Get the difference in diameter each year in each county\ndf_diff = pivoted.diff()\nyears=df_diff.index.tolist()\n\nfor county1 in df_diff.columns.values:\n    for county2 in df_diff.columns.values:\n        if county1 == county2:\n            continue\n        # Get the correlation between each pair of counties\n        df_corr2 = df_diff[county1].rolling(window=4).corr(other=df_diff[county2])\n        # Find the std of the correlation like before\n        lst_std = df_corr2.rolling(window=2).std()\n        # If any are over 0.7 append them to the list\n        i = np.where(lst_std >= thresh)[0]\n        if len(i):\n            [pred_fire_years.append((years[index], county1, county2)) for index in i]\npprint(pred_fire_years[:5])","3620b762":"# Testing the accuracy of using the std to determine if a fire occurred in that county\nfire_by_year = pd.read_sql_query(\"SELECT group_concat(COUNTY) as counties, FIRE_YEAR FROM fires \\\n                                WHERE State='WA' AND FIRE_SIZE_CLASS IN ('C', 'D', 'E', 'F', 'G') AND COUNTY IS NOT NULL\\\n                                GROUP BY FIRE_YEAR;\", conn)\n\n# Convert the dataframe of counties to a dict of a list all the county codes that had a fire in each FIRE_YEAR\nfire_county_by_year_dict = {}\nfipa_counties = set(wa_county_dict.values())\nfor count, year in enumerate(fire_by_year['FIRE_YEAR']):\n    fire_county_by_year_dict[year] = []\n    for counter, county in enumerate(fire_by_year['counties'][count].split(',')):\n        try:\n            # Some rows are the correct number so just convert from str to int and insert\n            fire_county_by_year_dict[year].append(int(county))\n        except ValueError:\n            # The rest are named, convert these to the correct number then insert\n            county_name = county.split(' ')[0].lower()\n            try:\n                # If county name is valid this will append its county code to the dict\n                fire_county_by_year_dict[year].append(wa_code_dict[county_name])\n            except KeyError:\n                # County name is invalid, skip\n                continue\n\n# Initialize dict of counts of times that the prediction was correct in a county for that year\nverified_fire_years = {'_'.join([str(year), str(county1)]):0 for year, county1, county2 in pred_fire_years}\n[verified_fire_years.update({'_'.join([str(year), str(county2)]):0}) for year, county1, county2 in pred_fire_years]\n\nfor year, county1, county2 in pred_fire_years:\n    if year > 2015 or year < 1992:\n        # Forest Fire database only goes from 1992 to 2015\n        continue\n    counties_with_fire_that_year = fire_county_by_year_dict[year]\n    label1 = '_'.join([str(year), str(county1)])\n    label2 = '_'.join([str(year), str(county2)])\n    # If a predicted fire is found in the list of fires that happened that year then add 1 to the count\n    # since multiple pairs of counties may have predicted a fire\n    if county1 in counties_with_fire_that_year:\n        if label1 in verified_fire_years.keys():\n            verified_fire_years[label1] += 1\n        else:\n            verified_fire_years[label1] = 1\n    if county2 in counties_with_fire_that_year:\n        if label2 in verified_fire_years.keys():\n            verified_fire_years[label2] += 1\n        else:\n            verified_fire_years[label2] = 1\n    # Means that std predicted a fire that never happened, subtract a count\n    else:\n        if label1 in verified_fire_years.keys():\n            verified_fire_years[label1] -= 1\n        else:\n            verified_fire_years[label1] = 0\n        if label2 in verified_fire_years.keys():\n            verified_fire_years[label2] -= 1\n        else:\n            verified_fire_years[label2] = 0\n        verified_fire_years[label2] = 0\n\naccuracy = sum(verified_fire_years.values())\/len(pred_fire_years)\nprint(accuracy * 100)","b068dd7d":"# Now to try and visualize this impact, first plot a heat map where the intensity of the colour in each count shows\n# the relative number of forest fires in that county compared to the max in Washington\n\n# Get the locations of all forest fires in Washington state that exceeded 100 acres in size(class F-G)\ndf = pd.read_sql_query(\"SELECT LATITUDE, LONGITUDE, COUNTY FROM fires \\\n                        WHERE State='WA' AND FIRE_SIZE_CLASS IN ('C', 'D', 'E', 'F', 'G') AND COUNTY IS NOT NULL\\\n                        AND FIRE_YEAR = 2010;\", conn)\nffire_lats = df['LATITUDE']\nffire_lons = df['LONGITUDE']\nffire_county = df['COUNTY'].tolist()\n\nfor fipa_county, fipa_code in zip(wa_counties, wa_county_codes):\n    for counter, county in enumerate(ffire_county):\n        try:\n            # Some rows are the correct number so just convert from str to int and insert\n            ffire_county[counter] = int(county)\n        except ValueError:\n            # The rest are named, convert these to the correct number then insert\n            if fipa_county.lower() in county.lower():\n                ffire_county[counter] = int(fipa_code)\n\n# bounding box of Washington State\nbbox_ll = [45.543541, -124.848974]\nbbox_ur = [49.002431, -116.915580]\n\n# geographical center of united states\nlat_0 = 39.833333\nlon_0 = -98.583333\n\n\nfrom mpl_toolkits.basemap import Basemap, cm\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\nffire_counts = Counter(ffire_county)\n\nfig = plt.figure(figsize=(12,8))\n\n# create polar stereographic Basemap instance.\nMap = Basemap(projection='merc',\n            lon_0=lon_0,lat_0=90.,lat_ts=lat_0,\n            llcrnrlat=bbox_ll[0],urcrnrlat=bbox_ur[0],\n            llcrnrlon=bbox_ll[1],urcrnrlon=bbox_ur[1],\n            rsphere=6371200.,resolution='l',area_thresh=10)\n\n# draw coastlines, county, state and country boundaries and the edge of the map\nMap.drawcoastlines()\nMap.drawstates()\nMap.drawcountries()\nMap.drawcounties()\n\ncolorVotes = plt.get_cmap('Greens')\ncolors = []\npatches = []\n\n# get all the county names for gathering the shapefile attributes to find within the counties list of dicts\ncounty_names = []\nfor county_dict in Map.counties_info:\n    county_names.append((int(county_dict['COUNTY_FIP']), county_dict['STATE']))\nax = plt.gca()\n\n# Get the Polygon shape file from the list of counties and fill it in with a colour corresponding to the relative\n# number of forest fires in the county\nfor county, value in ffire_counts.items():\n    seg = Map.counties[county_names.index((county, 'WA'))]\n    color = colorVotes(value\/float(max(ffire_counts.values())))\n    colors.append(color) # add colors to colors list\n    poly = Polygon(seg, facecolor=color, edgecolor=color)\n    patches.append(poly) #add polygon to patches list\n    ax.add_patch(poly)\n\n# Some counties will not color in, possibly due to bad or missing shape file for that county or they didn't \n# have any measurements taken in them in this dataset\np = PatchCollection(patches, cmap=colorVotes)\np.set_array(np.array(colors))\ncb = fig.colorbar(p)\n# draw points where forest fires occurred\nx,y = Map(ffire_lons.values, ffire_lats.values)\nMap.plot(x, y, 'ro', markersize=4)\n\nplt.show()","62727285":"# Visualize the change in tree diameter in each country with the forest fires in each county plotted for that year\n\ndiff_dia_dict = {year: diff for year, diff in zip(df_diff.index.tolist(), df_diff.values.tolist())}\ncounty_codes = df_diff.columns.values.tolist()\n\nfig = plt.figure(figsize=(12, 8))\n# create polar stereographic BaseMap2 instance.\nMap2 = Basemap(projection='merc',\n            lon_0=lon_0,lat_0=90.,lat_ts=lat_0,\n            llcrnrlat=bbox_ll[0],urcrnrlat=bbox_ur[0],\n            llcrnrlon=bbox_ll[1],urcrnrlon=bbox_ur[1],\n            rsphere=6371200.,resolution='l',area_thresh=10)\n\n# draw coastlines, county, state and country boundaries and the edge of the Map2\nMap2.drawcoastlines()\nMap2.drawstates()\nMap2.drawcountries()\nMap2.drawcounties(linewidth=0.3)\n#print(Map2.counties_info)\n\ncolorVotes = plt.get_cmap('RdYlGn')\ncolors = []\npatches = []\n\n# get all the county names for gathering the shapefile attributes to find within the counties list of dicts\ncounty_names = []\nfor county_dict in Map2.counties_info:\n    county_names.append((int(county_dict['COUNTY_FIP']), county_dict['STATE']))\nax = plt.gca()\n#fig = plt.figure(figsize=(6,4))\n#fig2 = plt.subplots()\n\n# draw points where forest fires occurred\nx,y = Map2(ffire_lons.values, ffire_lats.values)\npoint = Map2.plot(x, y, 'ro', markersize=2)[0]\n\nprint(diff_dia_dict[2010])\n\nfor county, value in zip(county_codes, diff_dia_dict[2011]):\n    seg = Map2.counties[county_names.index((county, 'WA'))]\n    color = colorVotes(value)\n    colors.append(color) # add colors to colors list\n    poly = Polygon(seg, facecolor=color, edgecolor=color)\n    patches.append(poly) #add polygon to patches list\n    ax.add_patch(poly)\n    plt.title(2010)\n\np = PatchCollection(patches, cmap=colorVotes)\np.set_array(np.array(colors))\ncb = Map2.colorbar(p, ticks=[0,0.5,1])\ncb.ax.set_yticklabels([str(min(diff_dia_dict[2010])), str(sum(diff_dia_dict[2010])\/len(diff_dia_dict[2010])), str(max(diff_dia_dict[2010]))])\ncb.ax.set_ylabel('Change in Tree Diameter')\n\nplt.show()","a574693f":"82% detection accuracy is pretty good, this shows that a high (>0.7) standard deviation in average diameter of trees in a county is indicative of a forest fire happening there.","0367b445":"Counties in red had a significant decrease in tree in 2010, indicating that there should be more fires in these counties, which appears to generally be the case, but there are a couple outlier counties.","f01f2cbc":"We start by visualizing the tree heights by type over the years in Washington State (code 53)","69bcfb91":"Most counties tree diameters over all years generally do not correlate, the ones that do are of interest since they should clearly show when a fire occurred in one region and not the other","d2eeeff4":"A forest fire occurred 2010 in Columbia county, and It appears that this causes the std to jump"}}