{"cell_type":{"ab6d3621":"code","65a04e80":"code","818ad528":"code","a33d7f6c":"code","236b9e32":"code","b4cedaae":"code","a898b956":"code","1b186bd4":"code","77b14583":"code","7e915f47":"code","e632058e":"code","8ebb00cf":"code","4683936a":"code","621963a1":"code","ba3faae2":"code","164100a5":"code","b5f95b17":"code","179cd53f":"code","2923dbb5":"code","328f21bb":"code","8ac0c4d7":"code","c70d5593":"code","ac4b0a82":"code","c3d8f046":"code","bf42107b":"markdown","06834999":"markdown","536ff38b":"markdown"},"source":{"ab6d3621":"## use this command to activate virtual environment in jupyter notebook \n\n# 1. make the virtual environment \n# 2. install ipykernel in the environment \n# 3. make the kernel of jupyter notebook for your virtual environment with the command:\n#    >> python -m ipykernel install --user --name=your_virtual_environment_name\n\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns","65a04e80":"## loading the dataset \n\ndf = pd.read_csv('..\/input\/heart.csv')\ndf.head()","818ad528":"# renaming column names to be more interpretable \n\nupdated_cols = ['Age', 'Sex', 'ChestPainType', 'RestingBP', 'SerumCholestoral', 'FastingBloodSugar', 'RestingECG', \n               'MaxHeartRate', 'ExeriseEnducedAngina', 'OldPeak', 'SlopeOldPeak', 'MajorVessels', 'Thal', 'Output']\ndf.columns = updated_cols\ndf.head()","a33d7f6c":"# since all the features are numerical, we can use df.describe() to understand the statistical measures\n\ndf.describe()","236b9e32":"## plotting all the features to observe any interesting fact \n\n## 1. Age\n\nplt.figure(figsize=(15,7))\nplt.xlabel('Number of People')\nplt.ylabel('Age')\nplt.title('Age')\nplt.plot(df.Age)\nprint(\"Min Age: \", df.Age.min())\nprint(\"Mean Age: \", df.Age.mean())\nprint(\"Max Age: \", df.Age.max())","b4cedaae":"# 2. Sex\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(8,4))\nplt.title('Male v\/s Female')\nsns.countplot(x=\"Sex\", data=df)\nprint(\"Number of Males: \", (df.Sex==1).sum())\nprint(\"Number of Females: \", (df.Sex==0).sum())\nprint(\"Total People: \", df.Sex.count())","a898b956":"# 3. Chest Pain Type \n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(12,6))\nplt.title('Chest Pain Type')\nsns.countplot(x=\"ChestPainType\", data=df)\nprint(\"Number of Chest Pain Type 0: \", (df.ChestPainType==0).sum())\nprint(\"Number of Chest Pain Type 1: \", (df.ChestPainType==1).sum())\nprint(\"Number of Chest Pain Type 2: \", (df.ChestPainType==2).sum())\nprint(\"Number of Chest Pain Type 3: \", (df.ChestPainType==3).sum())","1b186bd4":"# 4. Blood Pressure \n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(12,6))\nplt.title('Resting Blood Pressure')\nplt.plot(df.RestingBP)\nprint(\"Highest value: \", df.RestingBP.max())\nprint(\"Mean value: \", df.RestingBP.mean())\nprint(\"Lowest value: \", df.RestingBP.min())","77b14583":"# 5. Serum Cholestrol\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(13,6))\nplt.title('Serum Cholestoral')\nplt.xlabel(\"Number of People\")\nplt.ylabel(\"Serum Cholestoral count\")\nplt.plot(df[\"SerumCholestoral\"])\nprint(\"Highest value: \", df.SerumCholestoral.max())\nprint(\"Mean value: \", df.SerumCholestoral.mean())\nprint(\"Lowest value: \", df.SerumCholestoral.min())","7e915f47":"# 6. Fasting Blood Sugar\n\nprint(\"Fasting Blood Sugar > 120 mg\/dl ?\")\nprint(\"Yes: 1\")\nprint(\"No: 0\")\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(9,5))\nplt.title('Fasting Blood Sugar')\nsns.countplot(x='FastingBloodSugar', data=df)\nplt.show()","e632058e":"# 7. Resting ECG\n\nsns.countplot(x='RestingECG', data=df)\nplt.title(\"Resting ECG\")\nplt.show()","8ebb00cf":"# 8. Max Heart Rate\n\nplt.figure(figsize=(9,4))\nplt.plot(df.MaxHeartRate)\nprint(\"Highest value: \", df.MaxHeartRate.max())\nprint(\"Mean value: \", df.MaxHeartRate.mean())\nprint(\"Lowest value: \", df.MaxHeartRate.min())\nplt.xlabel(\"Number of Poeple\")\nplt.ylabel(\"Heart Rate\")\nplt.title(\"Max Heart Rate\")\nplt.show()","4683936a":"# 9. Exerise Enduced Angina\n\nplt.figure(figsize=(7,4))\nsns.countplot(x='ExeriseEnducedAngina', data=df)\nplt.title(\"Exercise Enduced Angina\")\nplt.show()","621963a1":"# 10. Old Peak\n\nprint(\"Highest value: \", df.OldPeak.max())\nprint(\"Mean value: \", df.OldPeak.mean())\nprint(\"Lowest value: \", df.OldPeak.min())\nplt.figure(figsize=(9, 4))\nplt.title(\"Old Peak\")\nplt.plot(df.OldPeak)\nplt.show()","ba3faae2":"# 11. Slope Old Peak\n\nplt.figure(figsize=(9, 4))\nsns.countplot(x='SlopeOldPeak', data=df)\nplt.title(\"Slope Old Peak\")\nplt.show()","164100a5":"# 12. Major Vessels\n\nplt.figure(figsize=(9, 4))\nsns.countplot(data=df, x='MajorVessels')\nplt.title(\"Major Vessels\")\nplt.show()","b5f95b17":"# 13. Thal\n\nplt.figure(figsize=(10, 6))\nsns.countplot(x='Thal', data=df)\nplt.title(\"Thal\")\nplt.show()","179cd53f":"# 14. Output\n\nsns.countplot(x='Output', data=df)\nplt.title(\"Output\")\nplt.show()","2923dbb5":"# Preparing the features dataframe \n\nX = df.drop('Output', axis=1)\nX.head()","328f21bb":"# Preparing the depenedent variable \/ output\n\ny = df.Output\ny.head()","8ac0c4d7":"# Creating the training and test sets \n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)","c70d5593":"# Using Random Forest Classifier to be the first model \n\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier()\nrf = model.fit(X_train, y_train)\nrf_score = rf.score(X_test, y_test)\nprint(\"Score using Random Forest without any hyperparameter tuning: \", rf_score)","ac4b0a82":"# Using grid search for hyperparameter tuning for random forest to get the best paramaters and score \n\nfrom sklearn.model_selection import GridSearchCV\n\ngrid_param = {  \n    'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],\n    'criterion': ['gini', 'entropy'],\n    'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \n    'bootstrap': [True, False]\n}\n\ngd_sr = GridSearchCV(estimator=rf,  \n                     param_grid=grid_param,\n                     scoring='accuracy',\n                     cv=10,\n                     n_jobs=-1)\n\ngd_sr.fit(X_train, y_train)\n\nbest_parameters = gd_sr.best_params_ \nbest_score = gd_sr.best_score_\n\nprint(\"Best paramaters for RandomForestClassifier: \", best_parameters)\nprint(\"Best score for RandomForestClassifier: \", best_score )","c3d8f046":"# Using grid search for hyperparameter tuning for SVC to get the best paramaters and score \n\nfrom sklearn.svm import SVC\n\nsvc = SVC()\n\ngrid_param = {  \n      'C':[1,10,100,1000],\n      'gamma':[1,0.1,0.001,0.0001], \n      'kernel':['linear','rbf']\n}\n\ngd_sr = GridSearchCV(estimator=svc,  \n                     param_grid=grid_param,\n                     scoring='accuracy',\n                     cv=10,\n                     n_jobs=-1)\n\ngd_sr.fit(X_train, y_train)\n\nbest_parameters = gd_sr.best_params_  \nbest_score = gd_sr.best_score_\n\nprint(\"Best parameters for SVC: \", best_parameters)  \nprint(\"Best score for SVC: \", best_score)","bf42107b":"<i>This notebook is under active development and anybody can fork and build a better version. <\/i>\n\n<h3>Upcoming updates<\/h3>\n<li>Trying other models<\/li>\n<li>Better Data Analysis<\/li>\n<li>Better Data Preprocessing<\/li>\n<br>\n<i>Please do share your opinions and reccomendations :)<\/i>","06834999":"<h3>About this Dataset<\/h3>\n\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date. The \"output\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.\n\n<b>Attribute Information:<\/b>\n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\nThe names and social security numbers of the patients were recently removed from the database, replaced with dummy values. One file has been \"processed\", that one containing the Cleveland database. All four unprocessed files also exist in this directory.\n\n<b>Acknowledgements<\/b>\n1. Hungarian Institute of Cardiology. Budapest: Andras Janosi, M.D. \n2. University Hospital, Zurich, Switzerland: William Steinbrunn, M.D. \n3. University Hospital, Basel, Switzerland: Matthias Pfisterer, M.D. \n4. V.A. Medical Center, Long Beach and Cleveland Clinic Foundation: Robert Detrano, M.D., Ph.D.\n\n<i>Donor: David W. Aha (aha '@' ics.uci.edu) (714) 856-877<\/i>","536ff38b":"<h3> It can be clearly observed that using <font color='green'>Random Forest Classifier<\/font> with Grid Search gives us the best score of: <br> <br><font color='red'>0.85<\/font><br><\/h3>"}}