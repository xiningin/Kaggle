{"cell_type":{"7a79b37f":"code","07403695":"code","6e1d159b":"code","2a9d8514":"code","4b156235":"code","cbfc061f":"code","e18cc516":"code","a8f366a3":"code","884f4004":"code","2bee6f6e":"code","b333c57d":"code","2f67b62d":"code","a2196ce1":"code","c98fa2bd":"code","b2e1e9be":"code","39a3c33a":"code","a00e12a5":"code","503af65d":"code","59f8ac9c":"code","9cb71aec":"code","f0e25e46":"code","ea718823":"code","53ddec42":"code","0b54d838":"code","5e3a85ef":"markdown","50d1f56a":"markdown","fc9e1e37":"markdown","1186bdef":"markdown","0d332352":"markdown","d3d9b637":"markdown","c1f1ee0c":"markdown","09054836":"markdown","178eb431":"markdown","7080b299":"markdown","897a0f9f":"markdown","50430f88":"markdown","3b4e0f05":"markdown","ecb68f68":"markdown","a86e8bb8":"markdown","e1033287":"markdown","1267589c":"markdown","74920660":"markdown","6e753309":"markdown"},"source":{"7a79b37f":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","07403695":"from cycler import cycler\n\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nraw_dark_palette = [\n    (10, 132, 255), # Blue\n    (255, 159, 10), # Orange\n    (48, 209, 88),  # Green\n    (255, 69, 58),  # Red\n    (191, 90, 242), # Purple\n    (94, 92, 230),  # Indigo\n    (255, 55, 95),  # Pink\n    (100, 210, 255),# Teal\n    (255, 214, 10)  # Yellow\n]\n\nraw_gray_light_palette = [\n    (142, 142, 147),# Gray\n    (174, 174, 178),# Gray (2)\n    (199, 199, 204),# Gray (3)\n    (209, 209, 214),# Gray (4)\n    (229, 229, 234),# Gray (5)\n    (242, 242, 247),# Gray (6)\n]\n\nraw_gray_dark_palette = [\n    (142, 142, 147),# Gray\n    (99, 99, 102),  # Gray (2)\n    (72, 72, 74),   # Gray (3)\n    (58, 58, 60),   # Gray (4)\n    (44, 44, 46),   # Gray (5)\n    (28, 28, 39),   # Gray (6)\n]\n\n\nlight_palette = np.array(raw_light_palette)\/255\ndark_palette = np.array(raw_dark_palette)\/255\ngray_light_palette = np.array(raw_gray_light_palette)\/255\ngray_dark_palette = np.array(raw_gray_dark_palette)\/255\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',dark_palette)\nmpl.rcParams['figure.facecolor']  = gray_dark_palette[-2]\nmpl.rcParams['figure.edgecolor']  = gray_dark_palette[-2]\nmpl.rcParams['axes.facecolor'] =  gray_dark_palette[-2]\n\nwhite_color = gray_light_palette[-2]\nmpl.rcParams['text.color'] = white_color\nmpl.rcParams['axes.labelcolor'] = white_color\nmpl.rcParams['axes.edgecolor'] = white_color\nmpl.rcParams['xtick.color'] = white_color\nmpl.rcParams['ytick.color'] = white_color\n\nmpl.rcParams['figure.dpi'] = 200\n\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False","6e1d159b":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)","2a9d8514":"custom_palette(dark_palette)","4b156235":"train_df = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')\n\ndisplay(train_df.head())\ndisplay(test_df.head())\ndisplay(sample_submission.head())","cbfc061f":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","e18cc516":"display(sum(train_df.isnull().sum()))\ndisplay(sum(test_df.isnull().sum()))","a8f366a3":"features = [feature for feature in train_df.columns if 'feature' in feature]\ntarget_class = [target for target in sample_submission.columns if 'Class' in target]","884f4004":"fig, ax = plt.subplots()\nsns.countplot(x='target', data=train_df, order=sorted(train_df['target'].unique()), ax=ax)\nax.set_ylim(0, 63000)\nax.set_title('Target Distribution', weight='bold')\nplt.show()","2bee6f6e":"train_df.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","b333c57d":"test_df.describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","2f67b62d":"def diff_color(x):\n    color = 'red' if x<0 else ('green' if x > 0 else 'black')\n    return f'color: {color}'\n\n(train_df.describe() - test_df.describe())[test_df.columns].T.iloc[1:,1:].style\\\n        .bar(subset=['mean', 'std'], align='mid', color=['#d65f5f', '#5fba7d'])\\\n        .applymap(diff_color, subset=['min', 'max'])","a2196ce1":"fig, ax = plt.subplots(1, 1, figsize=(12, 6))\n\ny = np.array([train_df[f'feature_{i}'].nunique() for i in range(75)])\ny2 = np.array([test_df[f'feature_{i}'].nunique() for i in range(75)])\ncomp = y-y2\n\n\nax.bar(range(75), y2, alpha=0.7, color=gray_dark_palette[0], label='Test Dataset')\nax.bar(range(75),  comp*(comp>0), bottom=y2, color=dark_palette[2], alpha=0.7, label='Train > Test')\nax.bar(range(75), comp*(comp<0), bottom=y2-comp*(comp<0), color=dark_palette[3], alpha=0.7, label='Train < Test')\n\nax.set_yticks(range(0, 80, 5))\nax.margins(0.02)\nax.grid(axis='y', linestyle='--', zorder=5)\nax.set_title('# of Features Unique Values (Train\/Test)', loc='left', fontweight='bold')\nax.legend()\nplt.show()","c98fa2bd":"fig, axes = plt.subplots(1, 2, figsize=(18, 6))\n\ny = [train_df[f'feature_{i}'].nunique() for i in range(75)]\n\nfor ax in axes:\n    ax.bar(range(75), y, zorder=10)\n    ax.set_yticks(range(0, 80, 5))\n    ax.margins(0.02)\n    ax.grid(axis='y', linestyle='--', zorder=5)\n    y.sort()\n\naxes[0].set_title('# of Features Unique Values (Raw)', loc='left', fontweight='bold')\naxes[1].set_title('# of Features Unique Values (Sorted)', loc='left', fontweight='bold')\n\nplt.show()","b2e1e9be":"fig, axes = plt.subplots(19, 4, figsize=(10, 16))\n\nfor idx, ax in zip(range(75), axes.flatten()):\n    cnt = train_df[f'feature_{idx}'].value_counts().sort_index()\n    sns.kdeplot(x=f'feature_{idx}', \n                hue='target', hue_order=target_class,\n                data=train_df,\n                alpha=0.5, \n                linewidth=0.6, fill=True,\n                legend=False,\n                ax=ax)\n    \n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.spines['left'].set_visible(False)\n    cnt = len(train_df[f'feature_{idx}'].unique())\n    ax.set_title(f'Feature_{idx}({cnt})', loc='right', weight='bold', fontsize=11)\n\naxes.flatten()[-1].axis('off')    \naxes.flatten()[-2].axis('off')\n\nfig.supxlabel('Distribution by class (by feature)', ha='center', fontweight='bold')\n\n#f.delaxes(axes[19, 1])\nfig.tight_layout()\nplt.show()","39a3c33a":"zero_data = ((train_df.iloc[:,:75]==0).sum() \/ len(train_df) * 100)[::-1]\nfig, ax = plt.subplots(1,1,figsize=(10, 19))\n\nax.barh(zero_data.index, 100, color='#dadada', height=0.6)\nbarh = ax.barh(zero_data.index, zero_data, color=light_palette[1], height=0.6)\nax.bar_label(barh, fmt='%.01f %%', color='black')\nax.spines[['left', 'bottom']].set_visible(False)\n\nax.set_xticks([])\n\nax.set_title('# of Zeros (by feature)', loc='center', fontweight='bold', fontsize=15)    \nplt.show()","a00e12a5":"fig, axes = plt.subplots(13, 4, figsize=(10, 16))\n\nmean = train_df.groupby('target').mean().sort_index()\nstd = train_df.groupby('target').std().sort_index()\n\nfor idx, ax in zip(range(75), axes.flatten()):\n    ax.bar(mean[f'feature_{idx}'].index, mean[f'feature_{idx}'], \n           color=dark_palette[:4], width=0.6)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.margins(0.1)\n    ax.spines['left'].set_visible(False)\n    ax.set_title(f'Feature_{idx}', loc='right', weight='bold', fontsize=11)\n\naxes.flatten()[-1].axis('off')    \naxes.flatten()[-2].axis('off')\n\nfig.supxlabel('Average by class (by feature)', ha='center', fontweight='bold')\n\nfig.tight_layout()\nplt.show()","503af65d":"corr = train_df[features].corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\nfig, ax = plt.subplots(figsize=(14, 14))\n\n#plot heatmap\nsns.heatmap(corr,\n            square=True, center=0, linewidth=0.2,\n            cmap=sns.diverging_palette(240, 10, as_cmap=True),\n            mask=mask, ax=ax) \n\n# yticks\nax.set_title('Correlation of features', loc='left', fontweight='bold')\nplt.show()","59f8ac9c":"%%time\nimport sys\n!cp ..\/input\/rapids\/rapids.0.19.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","9cb71aec":"import cuml\n\nfrom cuml.manifold import TSNE\nimport sklearn.manifold as tsne_sklearn\nprint('cuML version',cuml.__version__)","f0e25e46":"y = np.array( [int(v.split('_')[1]) for v in train_df.target.values ] )\ntrain_df.drop( ['id','target'], inplace=True, axis=1 )","ea718823":"%%time\ntsne = TSNE(n_components=2, perplexity=30, random_state=2021)\ntrain_2D_rapids = tsne.fit_transform( train_df.values )","53ddec42":"plt.scatter(train_2D_rapids[:,0], train_2D_rapids[:,1], c=y, s=0.5)","0b54d838":"for i in range(5,50,5):\n    tsne = TSNE(n_components=2, perplexity=i)\n    train_2D = tsne.fit_transform(train_df)\n    plt.title(f\"perplexity: {i}\")\n    plt.scatter(train_2D[:,0], train_2D[:,1], c=y, s=0.5)\n    plt.show()","5e3a85ef":"# References\n- https:\/\/www.kaggle.com\/subinium\/tps-may-categorical-eda\n- https:\/\/www.kaggle.com\/titericz\/t-sne-visualization-with-rapids","50d1f56a":"# Reading the csv\ud83d\udcda","fc9e1e37":"## Target Distribution","1186bdef":"Most features are weak correlations - `0.14` or `less`.","0d332352":"<h1 id=\"title\" style=\"color:white;background:black;\">\n    <\/br>\n    <center>\n        [TPS - June 2021] Basic EDA\n    <\/center>\n<\/h1>","d3d9b637":"## Train - Describe()","c1f1ee0c":"## Test - Describe()","09054836":"The class distribution seems very mixed.","178eb431":"# Default Setting","7080b299":"[[TPS-May] Categorical EDA](https:\/\/www.kaggle.com\/subinium\/tps-may-categorical-eda) inspired me and this notebook has just previous default setting applied.\n\nIf you like this, check out the original notebook as well.","897a0f9f":"# Import Libraries \ud83d\udcda","50430f88":"- https:\/\/www.kaggle.com\/subinium\/dark-mode-visualization-apple-version","3b4e0f05":"# General Info.\ud83c\udccf","ecb68f68":"## Missing values","a86e8bb8":"## Correlation","e1033287":"## Check Train & Test shape","1267589c":"## Check Statistics in train and test","74920660":"# Class distribution visualization with t-SNE","6e753309":"# Basic EDA \ud83c\udfd5\ufe0f"}}