{"cell_type":{"9000746e":"code","08a90c68":"code","1c4ef69c":"code","e44959bd":"code","c54c562d":"code","8ba2ce79":"code","5d85288c":"code","4e0c02e5":"code","1c924df7":"code","801f52c3":"code","c82f1672":"code","9e93d6ed":"code","294d1bce":"code","aaa3661d":"code","ce1adccc":"code","b3abaaef":"code","e96b12fa":"code","7095d8dc":"code","4fd8734b":"code","cfd61b8d":"code","8515b1e3":"code","85a4bc62":"code","9deabbfb":"code","8953c312":"code","88b254e1":"code","27c7b754":"code","cd762658":"markdown","192c2206":"markdown","10959505":"markdown","22831497":"markdown","addf1c6e":"markdown","4f246a8b":"markdown","83bf1587":"markdown","8c1717a9":"markdown"},"source":{"9000746e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","08a90c68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1c4ef69c":"df = pd.read_csv('\/kaggle\/input\/Classified Data',index_col=0)\ndf.head()","e44959bd":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","c54c562d":"scaler.fit(df.drop('TARGET CLASS', axis=1))","8ba2ce79":"scaled_features = scaler.transform(df.drop('TARGET CLASS', axis=1))","5d85288c":"scaled_features","4e0c02e5":"df_scaled = pd.DataFrame(scaled_features, columns=df.columns[:-1])\ndf_scaled.head()","1c924df7":"from sklearn.model_selection import train_test_split","801f52c3":"X_train, X_test, y_train, y_test = train_test_split(scaled_features, df['TARGET CLASS'], test_size=0.30, random_state=42)","c82f1672":"from sklearn.neighbors import KNeighborsClassifier","9e93d6ed":"# K=1\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train, y_train)\npred = knn.predict(X_test)","294d1bce":"pred","aaa3661d":"y_test","ce1adccc":"pred != y_test","b3abaaef":"np.mean(pred != y_test)","e96b12fa":"pred == y_test","7095d8dc":"np.mean(pred == y_test)","4fd8734b":"from sklearn.metrics import classification_report, confusion_matrix","cfd61b8d":"confusion_matrix(y_test, pred)","8515b1e3":"classification_report(y_test, pred)","85a4bc62":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred = knn.predict(X_test)\n    error_rate.append(np.mean(pred != y_test))","9deabbfb":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40), error_rate, color='blue', linestyle='dashed', marker='o', markerfacecolor='red', markersize=10)\nplt.title(\"Error Rate vs K Value\")\nplt.xlabel(\"K Value\")\nplt.ylabel(\"Error Rate\")","8953c312":"#With K=15\n\nknn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(X_train, y_train)\npred = knn.predict(X_test)","88b254e1":"confusion_matrix(y_test, pred)","27c7b754":"classification_report(y_test, pred)","cd762658":"## K value Selection\nFor k value around 15 the model tends to have less error rate","192c2206":"\n## Standardize the Variables\n\nBecause the KNN classifier predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger effect on the distance between the observations, and hence on the KNN classifier, than variables that are on a small scale.\n","10959505":"## K Nearest Neighbors with Python\n\nYou've been given a classified data set from a company! They've hidden the feature column names but have given you the data and the target classes.\n\nWe'll try to use KNN to create a model that directly predicts a class for a new data point based off of the features.\n\nLet's grab it and use it!","22831497":"\n## Using KNN\n\nWe are trying to come up with a model to predict whether someone will TARGET CLASS or not.  \nWe'll start with k=1.\n","addf1c6e":"You've been given a classified data set from a company! They've hidden the feature column names but have given you the data and the target classes.\n\nWe'll try to use KNN to create a model that directly predicts a class for a new data point based off of the features.\n\nLet's grab it and use it!","4f246a8b":"## Choosing K Value\nElbow Method to choose good k value.","83bf1587":"## TRAIN TEST SPLIT","8c1717a9":"## Prediction and Evaluation\nLet's evaluate our KNN model."}}