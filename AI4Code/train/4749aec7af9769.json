{"cell_type":{"58d31bb3":"code","33a0d0ba":"code","a6e00b9a":"code","83dac6b7":"code","bbfd1df3":"code","007ef870":"code","687edc34":"code","2ac40c36":"code","ca35b455":"code","8a11ed48":"code","9be2dc26":"code","f1d85dd2":"code","82a16aab":"code","a5c78f63":"code","39b651cd":"code","ebb6282c":"code","f5d8da13":"code","0f346c95":"code","a3797f8a":"code","3b06e486":"code","23edb623":"code","c78a155b":"code","c632ca25":"code","afc31c34":"code","18faec89":"code","2aa7aa6f":"code","d134a7f8":"code","abb4435b":"code","445877e8":"code","f6fe5f7a":"code","0e8fea2e":"code","bd61f08c":"code","eb2a6f27":"code","9b7d412d":"code","8d0b051f":"code","9be0174d":"code","a4670729":"code","821f2f9e":"code","a6a019cc":"code","f9ee0bdb":"code","19d3c110":"code","d0840f66":"code","3c5c672b":"code","678bd587":"code","ccc1c270":"code","f53de5b1":"code","6d12beb6":"code","3a78fdc6":"code","c76d08e5":"code","fec9acd2":"code","2ae25904":"code","978bb798":"markdown","5dbfe048":"markdown","6476b806":"markdown","2e77ff6c":"markdown","44f4f316":"markdown","5e112b3e":"markdown","0324c3bf":"markdown","92263c9f":"markdown","0a72470f":"markdown","aa624922":"markdown","57aaad4e":"markdown","17327a92":"markdown","45065019":"markdown"},"source":{"58d31bb3":"import numpy as np, pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","33a0d0ba":"bmw= pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\nbmw.head()","a6e00b9a":"bmw.info()","83dac6b7":"bmw.model=bmw.model.astype('category')\nbmw['Model']=bmw.model.cat.codes\nbmw.drop('model', axis=1, inplace=True)","bbfd1df3":"bmw.year=bmw.year.astype('category')\nbmw['Year']=bmw.year.cat.codes\nbmw.drop('year', axis=1, inplace=True)","007ef870":"bmw.transmission=bmw.transmission.astype('category')\nbmw['Transmission']=bmw.transmission.cat.codes\nbmw.drop('transmission', axis=1, inplace=True)","687edc34":"bmw.fuelType=bmw.fuelType.astype('category')\nbmw['Fuel']=bmw.fuelType.cat.codes\nbmw.drop('fuelType', axis=1, inplace=True)","2ac40c36":"# now our dataset looks something like this:\nbmw.head()","ca35b455":"from sklearn.model_selection import train_test_split","8a11ed48":"bmw_train, bmw_test= train_test_split(bmw, test_size=0.3, random_state=100)","9be2dc26":"# going with bmw_train dataset to make our model","f1d85dd2":"bmw_train.columns","82a16aab":"var= ['price', 'mileage', 'tax', 'mpg', 'engineSize', 'Model', 'Year',\n       'Transmission', 'Fuel']","a5c78f63":"from sklearn.preprocessing import MinMaxScaler","39b651cd":"scaler=MinMaxScaler()","ebb6282c":"bmw_train[var]= scaler.fit_transform(bmw_train[var])","f5d8da13":"# After scaling our dataset looks something like this:\nbmw_train.head()","0f346c95":"y= bmw_train.pop('price')","a3797f8a":"import statsmodels.api as sm","3b06e486":"x= sm.add_constant(bmw_train)","23edb623":"lr01= sm.OLS(y,x).fit()\nprint(lr01.summary())","c78a155b":"bmw_train.drop('mpg', axis=1, inplace=True)","c632ca25":"# now, again building the model with remaing features\/columns\/independent variable\nX= sm.add_constant(bmw_train)","afc31c34":"lr02= sm.OLS(y,X).fit()\nprint(lr02.summary())","18faec89":"# every feature is significant\n# now we will check the nulti-collinearity among the features\/columns\/independent variables using VIF (Variance Inflation Factor)","2aa7aa6f":"from statsmodels.stats.outliers_influence import variance_inflation_factor","d134a7f8":"vif = pd.DataFrame()\nvif['Features'] = bmw_train.columns\nvif['VIF'] = [variance_inflation_factor(bmw_train.values, i) for i in range(bmw_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","abb4435b":"bmw_train.drop('engineSize',axis=1,inplace=True)","445877e8":"# building model with remaing independent variables\/ features\nx=sm.add_constant(bmw_train)","f6fe5f7a":"lr03=sm.OLS(y,x).fit()\nprint(lr03.summary())","0e8fea2e":"vif = pd.DataFrame()\nvif['Features'] = bmw_train.columns\nvif['VIF'] = [variance_inflation_factor(bmw_train.values, i) for i in range(bmw_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","bd61f08c":"y_pred= lr03.predict(x)","eb2a6f27":"residual= y-y_pred","9b7d412d":"import seaborn as sns\nimport matplotlib.pyplot as plt","8d0b051f":"sns.distplot(residual)","9be0174d":"bmw_test.head()","a4670729":"bmw_test.columns","821f2f9e":"var01=['price', 'mileage', 'tax', 'mpg', 'engineSize', 'Model', 'Year',\n       'Transmission', 'Fuel']","a6a019cc":"# scaling the features\nbmw_test[var01]=scaler.transform(bmw_test[var01])","f9ee0bdb":"# after scaling our dataset looks something like this:\nbmw_test.head()","19d3c110":"# dropping 'mpg' and 'engineSize' from our test_dataset\nbmw_test.drop(['mpg','engineSize'], axis=1, inplace=True)","d0840f66":"# seperating target variable from the test_dataset\ny_test=bmw_test.pop('price')","3c5c672b":"x_test=sm.add_constant(bmw_test)","678bd587":"# prediction on test_dataset using lr03 model, which we have build on the train_dataset\ny_test_pred=lr03.predict(x_test)","ccc1c270":"residual01=y_test-y_test_pred","f53de5b1":"sns.distplot(residual01)","6d12beb6":"plt.scatter(y_test, y_test_pred)\nplt.xlabel('y_test', fontsize=10)\nplt.ylabel('y_test_pred', fontsize=10)","3a78fdc6":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","c76d08e5":"# RMSE value\nnp.sqrt(mean_squared_error(y_test, y_test_pred))","fec9acd2":"# R_squared of test_dataset\nR_squared = r2_score(y_test, y_test_pred)\nR_squared","2ae25904":"print(lr03.summary())","978bb798":"### Final Equation","5dbfe048":"#### Price = -0.1862 - 0.1599*mileage + 0.1083*tax + 0.1339*Model + 0.3704*Year + 0.0091*Transmission - 0.0040*Fuel","6476b806":"##### All the features are having VIF less than 10, so **lr03** will be our final model","2e77ff6c":"##### Our resiual is normally distributed and having mean value nearly 0 ","44f4f316":"#### our target variable is price(y)","5e112b3e":"#### Residual Analysis","0324c3bf":"##### VIF more than 10 means high collinearity, so first we will drop 'engineSize'","92263c9f":"### Residual Analysis of train dataset(bmw_train)","0a72470f":"## Model Building","aa624922":"##### 'mpg' p-value is more than 5%, which means it is insignificant, so we will drop 'mpg' from our dataset","57aaad4e":"#### Will make the object type columns to category type so that we can perform linear regression model including those features also","17327a92":"##### All the features are significant, now we will look into their VIF","45065019":"## Test Dataset"}}