{"cell_type":{"31b9e165":"code","090779bf":"code","03bed3ef":"code","8ffa142e":"code","9869f22a":"code","061de622":"code","c01f7633":"code","851ac6c7":"code","514f7870":"code","605d0e87":"code","e104caad":"code","836ea24c":"code","d06b2dd0":"code","e693505a":"code","0211eaf6":"code","64f00cb7":"code","8b973706":"markdown","b6263472":"markdown","834fbc1f":"markdown","f3271a3d":"markdown","870bcd0b":"markdown","cdf88c35":"markdown","50b24e8d":"markdown","0b3b7d29":"markdown","c06302bb":"markdown","fcb7e6ca":"markdown","630a0db0":"markdown","e06df0c7":"markdown","2ab0ad03":"markdown"},"source":{"31b9e165":"####################################################################################\n# import Packages\n####################################################################################\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport gc\nimport time\nimport warnings\nimport os\n\n####################################################################################        \n# pre-setting\n####################################################################################\n%matplotlib inline\nwarnings.filterwarnings('ignore')\nnp.random.seed(seed=777)\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\npd.set_option(\"display.max_colwidth\", 80)\npd.options.display.precision = 3\ngc.enable()\n\n####################################################################################        \n# Read Dataset and make train, test data\n####################################################################################\ntrain_identity   = pd.read_csv(\"\/kaggle\/input\/train_identity.csv\"   )\ntrain_transaction= pd.read_csv(\"\/kaggle\/input\/train_transaction.csv\")\ntest_identity    = pd.read_csv(\"\/kaggle\/input\/test_identity.csv\"    )\ntest_transaction = pd.read_csv(\"\/kaggle\/input\/test_transaction.csv\" )\nprint(\"Read csv files\")\n\ntrain = train_transaction.merge(train_identity, how='outer', on='TransactionID',sort ='True')\ntest  = test_transaction.merge (test_identity , how='outer', on='TransactionID',sort ='True')\ndel train_identity,train_transaction,test_identity, test_transaction\nprint(\"Make train & test data\")\n\n####################################################################################        \n# write data frame to fearher\n####################################################################################\ntrain.to_feather(\"train.feather\")\ntest.to_feather(\"test.feather\")\nprint(\"Write feather data\")","090779bf":"####################################################################################   \n# Read DataFrame from feather\n####################################################################################   \ntrain = pd.read_feather(\"train.feather\")\ntest  = pd.read_feather(\"test.feather\")","03bed3ef":"####################################################################################   \n# Define Functions\n####################################################################################  \n\n####################################################################################   \n# make graph \n#  s:start column number, e:end column, max : max data number for object\n#  xl:set x log scale  yl:set y log scale \ndef make_graph(df,s,e,xl=0,yl=0,m=0):\n    for col in df.iloc[:,s:e]:\n        if(df[col].dtype != 'object'):\n            #Data\n            print(\"column:\",col)\n            print(\"dtype:{}  number:{}  unique:{}  NaN:{}\".format(df[col].dtype, df[col].count().sum(),\n                                                                  df[col].nunique(), df[col].isna().sum()))\n            print(\"min:{}  max:{}  ave:{:.3f}\".format(df[col].min(),df[col].max(),df[col].mean()))\n            #Graph\n            fig, ax = plt.subplots(1, 3, figsize=(16,2))\n                        \n            if(xl==1):\n                ax[0].set_xscale(\"log\")\n                ax[1].set_xscale(\"log\")\n                ax[2].set_xscale(\"log\")\n                \n            if(yl==1):\n                ax[0].set_yscale(\"log\")\n                ax[1].set_yscale(\"log\")\n                ax[2].set_yscale(\"log\")\n                \n        \n            sns.distplot(df[col], ax = ax[0], bins=50, kde = False ,color=\"b\")\n            ax[0].set_title(\"Hist : \" + col,fontsize=14)\n        \n            sns.distplot(df.loc[df['isFraud']==1, col], ax = ax[1], bins=50, kde = False ,color=\"r\")\n            ax[1].set_title(\"Hist : \" + col + \" (Fraud:1)\",fontsize=14)\n        \n            sns.distplot(df.loc[df['isFraud']==0, col], ax = ax[2], bins=50, kde = False ,color=\"g\")\n            ax[2].set_title(\"Hist : \" + col + \" (Fraud:0)\",fontsize=14)\n        \n            plt.show()\n    \n        else:\n            #Data\n            print(\"column:\",col)\n            print(\"dtype:{}  unique:{}  NaN:{}\".format(df[col].dtype, df[col].nunique(), df[col].isna().sum()))\n        \n            #Graph\n            fig, ax = plt.subplots(1, 3, figsize=(16,3))\n        \n            for i in range(3):\n                labels = ax[i].get_xticklabels()        \n                plt.setp(labels, rotation=45, fontsize=10)   \n            \n            if(m == 0):\n                col_tmp0 = df[col].value_counts()\n                col_tmp1 = df.loc[df['isFraud'] == 1 , col].value_counts()\n                col_tmp2 = df.loc[df['isFraud'] == 0 , col].value_counts()\n            else:\n                col_tmp0 = df[col].value_counts().head(m)\n                col_tmp1 = df.loc[df['isFraud'] == 1 , col].value_counts().head(m)\n                col_tmp2 = df.loc[df['isFraud'] == 0 , col].value_counts().head(m)\n\n            if(xl==1):\n                ax[0].set_xscale(\"log\")\n                ax[1].set_xscale(\"log\")\n                ax[2].set_xscale(\"log\")\n                \n            if(yl==1):\n                ax[0].set_yscale(\"log\")\n                ax[1].set_yscale(\"log\")\n                ax[2].set_yscale(\"log\")   \n                            \n            sns.barplot(ax = ax[0], x = col_tmp0.index, y = col_tmp0)\n            sns.barplot(ax = ax[1], x = col_tmp1.index, y = col_tmp1)\n            sns.barplot(ax = ax[2], x = col_tmp2.index, y = col_tmp2)\n            \n            ax[0].set_title(\"Hist : \" + col,fontsize=14)\n            ax[1].set_title(\"Hist : \" + col + \" (Fraud:1)\",fontsize=14)\n            ax[2].set_title(\"Hist : \" + col + \" (Fraud:0)\",fontsize=14)\n                   \n            plt.show()\n            continue\n    return\n","8ffa142e":"#################################################################################### \n#Check data of Train\n#################################################################################### \ntrain.head(15)","9869f22a":"make_graph(train,1,4,0,0,0)","061de622":"make_graph(train,5,15,0,0,0)","c01f7633":"print('_'*80)\nprint(\"P_emaildomain\")\nprint(train['P_emaildomain'].value_counts())\nprint('_'*80)\nprint(\"R_emaildomain\")\nprint(train['R_emaildomain'].value_counts())","851ac6c7":"make_graph(train,15,17,0,0,10)","514f7870":"make_graph(train,17,31,0,1,0)","605d0e87":"make_graph(train,31,46,0,1,0)","e104caad":"make_graph(train,46,55,0,1,0)","836ea24c":"make_graph(train,394,423,0,0,10)","d06b2dd0":"make_graph(train,423,425,0,0,10)\nmake_graph(train,426,427,0,0,10)","e693505a":"make_graph(train,425,426,0,0,0)\nmake_graph(train,427,432,0,0,0)","0211eaf6":"print('_'*80)\nprint(\"Device Info\")\nprint(train['DeviceInfo'].value_counts())","64f00cb7":"make_graph(train,432,434,0,0,10)","8b973706":"# **This Kernel is for Basic EDA**\nThis kernel is for the first data analysis in the CIS-IEEE Fraud Detection competition.\u3000In order to extract features, I have made a table and a graph from provided data set.","b6263472":"### **Regarding Card1-6, Addr1-2, Dist1-2**\n    Card1-6 : Payment card information, such as card type, card category, issue bank, country, etc.\n    Addr1,2 : Address\n    Dist1,2 : distances between (not limited) billing address, mailing address, zip code, IP address, phone area, etc.\n* Card3,5,6 data seems to be related to isFraud.\n* About Addr1 data, a difference appears around x=200.","834fbc1f":"### **About Emaildomain**\n    P_emaildomain : Purchaser email domain\n    R_emaildomain : Recipient email domain","f3271a3d":"## **Preparation of data alalisis**\n### Import packages and Read Data set","870bcd0b":"#### Id32, Id34-Id38","cdf88c35":"### **Regarding isFraud, Transaction DT, Tranzaction AMT**\n    Transaction DT  : Timedelta from a given reference datetime (not an actual timestamp)\n    Tranzaction AMT : Transaction payment amount in USD","50b24e8d":"### **C1-C14**\n    C1-C14 : counting, such as how many addresses are found to be associated with the payment card, etc. \n             The actual meaning is masked.","0b3b7d29":"#### Id30-Id31, Id33\n    Id 30 : OS type and Ver\n    Id 31 : Browzer  type and Ver\n    Id 33 : Disply resolution","c06302bb":"#### Device type and Device info","fcb7e6ca":"### **D1-D15**\n    D1-D15 : timedelta, such as days between previous transaction, etc.","630a0db0":"### **M1-M9**\n    M1-M9 : cmatch, such as names on card and address, etc.","e06df0c7":"### **Id01-Id29**    ","2ab0ad03":"### **Alanysis of Trainnig Data**"}}