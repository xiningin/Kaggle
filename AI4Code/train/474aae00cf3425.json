{"cell_type":{"1f9c6b15":"code","75ea6fa8":"code","dccd5b77":"code","24ca5457":"code","dfe0b112":"code","861a746f":"code","07fd9ed2":"code","cdb4b8dc":"code","84e131a6":"markdown","b6ed5c70":"markdown"},"source":{"1f9c6b15":"import gc\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import log_loss\nfrom scipy.stats import skew, kurtosis\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.manifold import TSNE\n\n%matplotlib inline","75ea6fa8":"def get_inputs(data, metadata):\n    metadata.drop(['ra','decl','gal_l','gal_b','mwebv','hostgal_photoz','ddf','distmod'],inplace=True,axis=1)\n    data['flux_ratio_sq'] = np.power(data['flux'] \/ data['flux_err'], 2.0)\n    data['flux_by_flux_ratio_sq'] = data['flux'] * data['flux_ratio_sq']\n    aggdata = data.groupby(['object_id','passband']).agg({'mjd': ['min', 'max', 'size'],\n                                             'flux': ['min', 'max', 'mean', 'median', 'std','skew'],\n                                             'flux_err': ['min', 'max', 'mean', 'median', 'std','skew'],\n                                             'flux_by_flux_ratio_sq': ['sum'],    \n                                             'flux_ratio_sq': ['sum'],                      \n                                             'detected': ['mean','std']}).reset_index(drop=False)\n    \n    cols = ['_'.join(str(s).strip() for s in col if s) if len(col)==2 else col for col in aggdata.columns ]\n    aggdata.columns = cols\n    aggdata = aggdata.merge(metadata,on='object_id',how='left')\n    aggdata.insert(1,'delta_passband', aggdata.mjd_max-aggdata.mjd_min)\n    aggdata.drop(['mjd_min','mjd_max'],inplace=True,axis=1)\n    aggdata['flux_diff'] = aggdata['flux_max'] - aggdata['flux_min']\n    aggdata['flux_dif2'] = (aggdata['flux_max'] - aggdata['flux_min']) \/ aggdata['flux_mean']\n    aggdata['flux_w_mean'] = aggdata['flux_by_flux_ratio_sq_sum'] \/ aggdata['flux_ratio_sq_sum']\n    aggdata['flux_dif3'] = (aggdata['flux_max'] - aggdata['flux_min']) \/ aggdata['flux_w_mean']\n    return aggdata","dccd5b77":"meta_train = pd.read_csv('..\/input\/training_set_metadata.csv')\ntrain = pd.read_csv('..\/input\/training_set.csv')\ntraindata = get_inputs(train,meta_train)","24ca5457":"features = list(set(traindata.columns).difference(set(['target','object_id','hostgal_photoz_err','hostgal_specz'])))\nallfeatures = ['object_id']+features","dfe0b112":"alldata = traindata.loc[:,allfeatures].copy()\nfor c in features:\n    print(c)\n    if(alldata[c].min()<0):\n        alldata.loc[~alldata[c].isnull(),c] = np.sign(alldata.loc[~alldata[c].isnull(),c])*np.log1p(np.abs(alldata.loc[~alldata[c].isnull(),c]))\n    elif((alldata[c].max()-alldata[c].min())>10):\n        alldata.loc[~alldata[c].isnull(),c] = np.log1p(alldata.loc[~alldata[c].isnull(),c])\nalldata.fillna(alldata.mean(),inplace=True)\nss = None\nss = StandardScaler()\nalldata.loc[:,features] = ss.fit_transform(alldata.loc[:,features])\nprint(ss.mean_)\nprint(ss.scale_)","861a746f":"model = TSNE(n_components=2, perplexity=30,random_state=0)\ntsnedata = model.fit_transform(alldata[features])","07fd9ed2":"plt.plot(tsnedata[:,0])","cdb4b8dc":"plt.plot(tsnedata[:,1])","84e131a6":"I could certainly be missing something but one can see a disting partition in the training data in terms of TSne","b6ed5c70":"Am I the only one to see two distinct distributions in train?  I am fast coming to the conclusion that this competition should be to focus on the data as just a **simulation** rather than modelling nature.  As an indicator I used the columns that have relatively few NaNs and then performed a TSne."}}