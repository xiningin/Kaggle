{"cell_type":{"ad9643d1":"code","6c718f3b":"code","684f57d5":"code","9a87dc35":"code","b085a513":"code","665b1ccc":"code","957ca903":"code","d6154458":"code","d7ec5da7":"code","fd6530a1":"code","704fa483":"code","19500024":"code","aeb6a1f3":"code","b93cad30":"code","472c3803":"code","07e26150":"code","ee37fd9a":"code","0086bdfb":"code","6298ce46":"code","4d0c759b":"markdown","374e0279":"markdown"},"source":{"ad9643d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","6c718f3b":"data  = pd.read_csv(\"..\/input\/data.csv\")","684f57d5":"data.info()","9a87dc35":"# unnamed ve id columns delete from dataset..\ndata.drop([\"Unnamed: 32\", \"id\"],axis=1, inplace = True)","b085a513":"data.head(5)","665b1ccc":"# bad tumors and good tumors convert object to integer\ndata.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]","957ca903":"data.info()","d6154458":"# separation of data into x and y columns..\ny = data.diagnosis.values\nx_data = data.drop([\"diagnosis\"],axis=1)","d7ec5da7":"# data normalization process..\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","fd6530a1":"data.head()","704fa483":"# train-test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state = 42)","19500024":"# change the shapes\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","aeb6a1f3":"# parameter initialize and sigmoid function\ndef initialize_weights_and_bias(dimension):\n    \n    w  = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","b93cad30":"# sigmoid function\ndef sigmoid(z):\n    \n    y_head = 1\/(1+np.exp(-z))\n    return y_head","472c3803":"# forward and backward propagation\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","07e26150":"# updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","ee37fd9a":"# prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n \n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","0086bdfb":"# \ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 100) ","6298ce46":"# sklearn\nfrom sklearn import linear_model\nlr = linear_model.LogisticRegression(random_state = 42,max_iter= 100)\nprint(\"test accuracy: {} \".format(lr.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(lr.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))","4d0c759b":"**** Initialize parameters weight and bias****","374e0279":"****Introduction****\n\nWhat i will do ?\n\n\n1. Initialize parameters weight and bias\n2. Forward propagation\n3. Loss & Cost function\n4. Backward propagation\n5. Prediction with learnt parameters weight and bias\n6. Logistic regression with sklearn"}}