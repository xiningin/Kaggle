{"cell_type":{"1e8acf37":"code","6ee4699d":"code","d0ea1654":"code","0d5908f5":"code","7589339e":"code","3c4d1981":"code","f3a01156":"code","7b5642bb":"code","32384c19":"code","652c79b4":"code","bedab29c":"code","b419c3b9":"code","525cb25b":"code","df6cc3eb":"code","ba28ed6b":"code","89975d7b":"code","5441ca5f":"code","17b48773":"code","e2dcc5e4":"code","0aac4c44":"code","e60ad9d9":"code","c92e39b7":"code","5ded8cfa":"code","e8be65c9":"code","6d66ee56":"code","f831eb02":"code","b27f3bb7":"code","3e4e9f50":"code","2f0c1c79":"code","f33361e3":"code","dfe89d0b":"code","8bdeda24":"code","a6d9140a":"code","55599e48":"code","6eaa1485":"code","fcf1ea2c":"code","68be8d89":"code","d631189e":"code","a92a8d02":"code","77eade26":"code","0fe0c8e5":"code","82b11d73":"code","4ec12921":"code","d078f3d7":"code","a54ec6ad":"markdown","534e3edc":"markdown","645affda":"markdown","130cf11e":"markdown","25af0168":"markdown","c0529181":"markdown","f163121a":"markdown","a938d3c4":"markdown","8af3431f":"markdown","56bbf493":"markdown","679f5e37":"markdown","9461645a":"markdown","12a79a95":"markdown","bd3dd13e":"markdown","7951915a":"markdown","d36688a1":"markdown","272407d3":"markdown"},"source":{"1e8acf37":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6ee4699d":"train = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv\")","d0ea1654":"train.head()","0d5908f5":"train['len1'] = train['text'].apply(lambda x:len(str(x).split(' ')))\ntrain['len2'] = train['selected_text'].apply(lambda x:len(str(x).split(' ')))\n\ntrain.head()","7589339e":"train['len1'].max()","3c4d1981":"submission.head()","f3a01156":"test.head()","7b5642bb":"train['sentiment'] = train['sentiment'].apply(lambda x: 2 if x == 'positive' else 1 if x == 'neutral' else 0)\ntrain.head()","32384c19":"selected_texts = train['selected_text'].astype(str)\nall_train_texts = train['text'].astype(str)\ntext_locations = [all_train_texts[i].find(s) for i, s in enumerate(selected_texts)]","652c79b4":"text_locations[:5]","bedab29c":"train['text_location'] = text_locations\ntrain.head()","b419c3b9":"test['sentiment'] = test['sentiment'].apply(lambda x: 2 if x == 'positive' else 1 if x == 'neutral' else 0)\ntest['len1'] = test['text'].apply(lambda x:len(str(x).split(' ')))\ntest.head()","525cb25b":"# to predict 'len2'\nY_train1 = train['len2']\nX_train1 = train[['sentiment', 'len1']]\nX_test = test[['sentiment', 'len1']]\n\n# to predict 'text_location'\nY_train2 = train['text_location']\nX_train2 = train[['sentiment', 'len1']]","df6cc3eb":"Y_train1.head()","ba28ed6b":"X_train1.head()","89975d7b":"X_test.head()","5441ca5f":"print(\"The mean length of full text in the training data is \" + str(round(train['len1'].mean(), 2)))","17b48773":"print(\"The median length of full text in the training data is \" + str(round(train['len1'].median(), 2)))","e2dcc5e4":"print(\"The most common length of full text in the training data is \" + str(round(train['len1'].mode()[0], 2)))","0aac4c44":"print(\"The mean length of full text in the test data is \" + str(round(test['len1'].mean(), 2)))","e60ad9d9":"print(\"The median length of full text in the test data is \" + str(round(test['len1'].median(), 2)))","c92e39b7":"print(\"The most common length of full text in the test data is \" + str(round(test['len1'].mode()[0], 2)))","5ded8cfa":"print(\"The mean length of selected text in the training data is \" + str(round(train['len2'].mean(), 2)))","e8be65c9":"print(\"The mean length of selected text in the training data is \" + str(round(train['len2'].median(), 2)))","6d66ee56":"print(\"The mean length of selected text in the training data is \" + str(round(train['len2'].mode()[0], 2)))","f831eb02":"from sklearn import linear_model\nimport lightgbm as lgb","b27f3bb7":"reg = lgb.LGBMRegressor()\n#reg = linear_model.LinearRegression()\nreg.fit(X_train1, Y_train1)","3e4e9f50":"predicted1 = np.round(reg.predict(X_test))\npredicted1[predicted1 < 1] = 1\npredicted1","2f0c1c79":"reg2 = lgb.LGBMRegressor()\n#reg2 = linear_model.LinearRegression()\nreg2.fit(X_train2, Y_train2)","f33361e3":"predicted2 = np.round(reg2.predict(X_test))\npredicted2[predicted2 < 1] = 1\npredicted2","dfe89d0b":"# now predctions are of the form: index of starting character + length of word\npredicted = predicted1 + predicted2\npredicted","8bdeda24":"sub = test[['textID', 'text']]\nsub['preds'] = predicted\nsub.head()","a6d9140a":"sub['text2'] = sub[\"text\"].apply(lambda x: x.split())\nsub","55599e48":"text2 = sub['text2']\ntext2","6eaa1485":"textx = sub['text'].tolist()\ntext_sub = [s[int(predicted2.tolist()[ind]):int(predicted2.tolist()[ind])+int(predicted1.tolist()[ind])] for ind, s in enumerate(textx)]","fcf1ea2c":"text_sub[:5]","68be8d89":"text2 = [l[-int(predicted.tolist()[ind]):] for ind, l in enumerate(text2)]","d631189e":"text2[:5]","a92a8d02":"sub['text22'] = text2\nsub.head()","77eade26":"sub['result'] = sub[\"text22\"].apply(lambda x: \" \".join(x))","0fe0c8e5":"sub.head()","82b11d73":"submission[\"selected_text\"] = sub['result']","4ec12921":"submission.head()","d078f3d7":"submission.to_csv('submission.csv', index=False)","a54ec6ad":"## Some Touch Ups","534e3edc":"## Mean, Median, Mode of Selected Text Lengths","645affda":"## Predicting Length of Selected Texts","130cf11e":"## Mean, Median, Mode of Full Text Lengths","25af0168":"## Pinpointing the Selected Text Starting and Endpoints (To Be Refined)","c0529181":"### Training Data","f163121a":"# Predictions With LightGBM","a938d3c4":"## This notebook will be periodically updated! Stay tuned and happy Kaggling! :)","8af3431f":"## The Original Pinpointing Method (To Be Refined)","56bbf493":"# Feature Engineering - Preparing Training & Test Data","679f5e37":"# Submission","9461645a":"## Predicting Starting Location of Selected Text","12a79a95":"Get starting locations of `selected_text` in `text`:","bd3dd13e":"# Import Libraries","7951915a":"# Data & Data Preprocessing","d36688a1":"# EDA","272407d3":"### Test Data"}}