{"cell_type":{"def1a894":"code","84ee1a9e":"code","39985854":"code","f23ecfae":"code","38dd167b":"code","263de7e4":"code","1a56ff7c":"code","46202c0a":"code","24e25665":"code","381eed1f":"code","0de4d31b":"markdown"},"source":{"def1a894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","84ee1a9e":"import os\nimport json\nimport pandas as pd\nfrom tqdm import tqdm # to make a progress bar\nimport re #hello regular expressions","39985854":"docs = []\ndirs = [\"biorxiv_medrxiv\", \"comm_use_subset\", \"custom_license\", \"noncomm_use_subset\"]\n\nfor d in dirs:\n    print (\"directory is: \", d)\n    for file in tqdm(os.listdir(f\"\/kaggle\/input\/CORD-19-research-challenge\/{d}\/{d}\")):\n        file_path = f\"\/kaggle\/input\/CORD-19-research-challenge\/{d}\/{d}\/{file}\"\n        \n        j = json.load(open(file_path, \"rb\"))\n        #print(j)\n        title = j[\"metadata\"][\"title\"]\n        try:\n            abstract = j[\"abstract\"][0][\"text\"]\n        except:\n            abstract = \"\"\n            #print(j[\"abstract\"])\n        \n        #print(abstract)\n        full_text = \"\"\n        for text in j[\"body_text\"]:\n            #print(text['text'])\n            full_text+=text['text']+\"\\n\\n\"\n        #print(full_text)\n        docs.append([title, abstract, full_text])\n        #break\n","f23ecfae":"df = pd.DataFrame(docs, columns=[\"title\", \"abstract\", \"full_text\"])\n#print (df.head())\ndf_incubation = df[df[\"full_text\"].str.contains(\"incubation\")]\n#print (df_incubation.head())\ntexts = df_incubation[\"full_text\"].values\n\nincubation_times = []","38dd167b":"regx_to_search = [\" \\d{1,2}\\.?\\d{1,2} (?=day)\" ,  # 14 days or 14.23 days\n                  \" \\d{1,2}\\.?\\d{1,2} to \\d{1,2}\\.?\\d{1,2} (?=day)\",  #3 to 5 days\n                  \" \\d{1,2}\\.?\\d{1,2}-\\d{1,2}\\.?\\d{1,2} (?=day)\"]   #3-5 days\n            \nfor t in texts:\n    #print(t)\n    for sentence in t.split(\". \"):\n        if \"incubation\" in sentence:\n            #print(sentence, \"\\n\\n\")\n            #single_day = re.findall(r\" \\d{1,2} day\", sentence)\n            for reg in regx_to_search:\n                single_day = re.findall(reg, sentence)\n                ## ?: 0 or 1 occurrence\n                if len(single_day) >= 1: #so there is at least one incubation period in this sentence\n                #if True:\n                    #print(\"\\n************\\n\",\"found: \",single_day, \"\\n**********************\")\n                    #print(sentence+\".\", \"\\n\\n\")\n                    incubation_times.append(single_day)\n","263de7e4":"#print (incubation_times)\nfinal_incubation_times = []\n\nimport statistics\n\nfor entry in incubation_times:\n    for p in entry:\n        if \"-\" in p:\n            divided = p.split(\"-\")\n            floated = [float(i) for i in divided]\n            final_incubation_times.append(statistics.mean(floated))\n        elif \"to\" in p:\n            divided = p.split(\"to\")\n            floated = [float(i) for i in divided]\n            final_incubation_times.append(statistics.mean(floated))\n        else:\n            final_incubation_times.append(float(p))\nprint(final_incubation_times[:50]) \nprint (len(final_incubation_times))","1a56ff7c":"file = open(\"incubation_data.txt\",\"w+\")\nfor time in final_incubation_times:\n    file.write(str(time))\nfile.close()","46202c0a":"file = open(\"incubation_data.txt\",\"r\")\nif file.mode == 'r':\n    contents = file.read()\nfile.close()","24e25665":"import matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use(\"ggplot\")\n\nplt.hist(final_incubation_times, bins=1000)\nplt.ylabel(\"bin counts\")\nplt.xlabel(\"incubation time (days)\")\nplt.xlim(0, 34)\nplt.show()","381eed1f":"import numpy as np\nprint(f\"The mean projected incubation time is {np.mean([i for i in final_incubation_times if i<34])} days\")","0de4d31b":"I followed sentdex video: https:\/\/www.youtube.com\/watch?v=S6GVXk6kbcs\n\nI improved the regex part and added some part for conversion"}}