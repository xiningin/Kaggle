{"cell_type":{"6041098f":"code","84256022":"code","f25e6ec3":"code","fd7fe45e":"code","a30abfe4":"code","e85b7813":"code","30266fd5":"code","c714cde0":"code","89249f16":"markdown","61a83f30":"markdown","0cf66d70":"markdown","4fa74df6":"markdown","e69ac130":"markdown","6bbfa253":"markdown","6a1302c0":"markdown","ae504879":"markdown","95dfcfbe":"markdown","5b05228c":"markdown","580bacd3":"markdown","af39f714":"markdown","4eb38912":"markdown","1382df70":"markdown","f305c936":"markdown","27824290":"markdown","52bcc78e":"markdown","a27c5ba4":"markdown"},"source":{"6041098f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly # for plotting\nimport matplotlib.pyplot as plt # for plotting\nimport scipy\nimport scipy.stats as st # for statistical calculations\nfrom scipy.stats import norm # normal distribution\nimport statsmodels.api as sm # to build the Q-Q graph","84256022":"# Sample Normal Distibution Histogram\n\nnormal_array = np.random.normal(7.0, 1.0, 50000)\n\nplt.rcParams[\"figure.figsize\"] = (10,5)\nplt.hist(normal_array, 100, color = \"orange\", ec=\"orange\")\n\nplt.xlabel(r'$x$',fontsize=15)\nplt.ylabel(r'$f(x|\\mu,\\sigma)$',fontsize=15)\n\nplt.title(\"Sample Normal Distibution Histogram\")\n\nplt.show()","f25e6ec3":"# Sample Normal Distibution Curve\n\nequal_steps_array = np.arange(start=-50, stop=50, step=1)\n\n# Set mean (mu) and standard deviation (sigma)\nmu = 0\nsigma = 10\n\n# Generate distributions using scipy norm.pdf() function\ndistributions = norm.pdf(equal_steps_array,mu,sigma)\n\n# Draw plot\nplt.rcParams[\"figure.figsize\"] = (10,5)\nplt.plot(equal_steps_array, distributions,label=r'$\\mu = 0$ $\\sigma = 10$')\n\nplt.title(\"Sample Normal Distibution Curve\")\n\nplt.legend(fontsize=15)\nplt.xlabel(r'$x$',fontsize=15)\nplt.ylabel(r'$f(x|\\mu,\\sigma)$',fontsize=15)","fd7fe45e":"# Upload the dataset and check the first few rows\nstudents = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\nstudents.head()","a30abfe4":"# Get statistical overview\nstudents.describe()","e85b7813":"# Set general plot dimensions\nplt.rcParams[\"figure.figsize\"] = (15,10)\nplt.xlim([0,100])\n\n# Build three subplots\nplt.subplot(1, 3, 1)\nmath = plt.hist(students['math score'], 15, density = True, color = \"green\")\nplt.title(\"Math Scores\")\n\nplt.subplot(1, 3, 2)\nreading = plt.hist(students['reading score'], 15, density = True, color = \"orange\")\nplt.title(\"Reading Scores\")\n\nplt.subplot(1, 3, 3)\nreading = plt.hist(students['writing score'], 15, density = True, color = \"blue\")\nplt.title(\"Writing Scores\")\n\n# Set the global title\nplt.suptitle(\"Normality check of students scores using histograms\")\nplt.show()","30266fd5":"# Math parameters and array\nprint(\"Math parameters:\")\nmean_math = np.mean(students['math score'])\nprint('Estimated mean: ', mean_math)\nstd_math = np.std(students['math score'])\nprint('Estimated standard deviation: ',  std_math, '\\n')\nx_math = np.arange(10,100,1)\ny_math = norm.pdf(x_math, mean_math, std_math)\n\n# Reading parameters and array\nprint(\"Reading parameters:\")\nmean_reading = np.mean(students['reading score'])\nprint('Estimated mean: ', mean_reading)\nstd_reading = np.std(students['reading score'])\nprint('Estimated standard deviation: ',  std_reading, '\\n')\nx_reading = np.arange(10,100,1)\ny_reading = norm.pdf(x_reading, mean_reading, std_reading)\n\n# Writing parameters and array\nprint(\"Writing parameters:\")\nmean_writing = np.mean(students['writing score'])\nprint('Estimated mean: ', mean_writing)\nstd_writing = np.std(students['writing score'])\nprint('Estimated standard deviation: ',  std_writing, '\\n')\nx_writing = np.arange(10,100,1)\ny_writing = norm.pdf(x_writing, mean_writing, std_writing)\n\n# Set general plot dimensions\nplt.rcParams[\"figure.figsize\"] = (15,10)\nplt.xlim([10,100])\n\n# Build three subplots\nplt.subplot(1, 3, 1)\nplt.plot(x_math, y_math, label = 'fitted curve', color = \"black\")\nplt.hist(students['math score'], 15, density = True, color = \"green\")\nplt.title(\"Math Scores\")\n\nplt.subplot(1, 3, 2)\nplt.plot(x_reading, y_reading, label = 'fitted curve', color = \"black\")\nplt.hist(students['reading score'], 15, density = True, color = \"orange\")\nplt.title(\"Reading Scores\")\n\nplt.subplot(1, 3, 3)\nplt.plot(x_writing, y_writing, label = 'fitted curve', color = \"black\")\nplt.hist(students['writing score'], 15, density = True, color = \"blue\")\nplt.title(\"Writing Scores\")\n\n# Set the global title\nplt.suptitle(\"Normality check of students scores using fitted curve\")\n\nplt.show()","c714cde0":"# Create three subplots\nfig, (ax1, ax2, ax3) = plt.subplots(ncols=3) \n\nsm.qqplot(students['math score'], markerfacecolor = \"green\", markeredgecolor = \"green\", line='45',  fit = True, ax=ax1)\nax1.set_title(\"Math Scores\")\n\nsm.qqplot(students['reading score'], markerfacecolor = \"orange\", markeredgecolor = \"orange\", line='45', fit = True, ax=ax2)\nax2.set_title(\"Reading Scores\")\n\nsm.qqplot(students['writing score'], markerfacecolor = \"blue\", markeredgecolor = \"blue\", line='45', fit = True, ax=ax3)\nax3.set_title(\"Writing Scores\")\n\n# Set the global title\nplt.suptitle(\"Normality check of students scores using Q-Q chart\")\n\nplt.show()","89249f16":"<a id=\"7\"><\/a> <br>\n## Normality Checks\n\nThere are a lot of different statistical methods that can be used in order to work with your data. Turns out that effectiveness of some methods depends on the data distribution. Parametric statistical methods should be used if data is normally distributed, and non-parametric ones in all other cases.\n\nHow to recognize whether your distribution is normal or not? First of all, normal distribution resembles a few important **characteristics**.\n\n<div class=\"alert alert-block alert-info\"> \ud83d\udccc Namely:\n    <ul>\n    <li>it is <b>symmetric<\/b> around the center;<\/li>\n    <li>its mode, median and mean are <b>equal<\/b>;<\/li>\n    <li>if you calculate the <b>total area<\/b> under the curve, you'll get 1 (or 100%) - remember it is all about probabilities, and probability can not be larger than 1!<\/li>\n    <li>there is a special type of normal distribution called <b>standard<\/b>, with mean equal to 0 and standard deviation equal to 1.<\/li>\n    <\/ul><\/div>\n\nAlso in order to check data for normality, various **visual techniques** can be used. \n\nIn this notebook, I will investigate [Students Performance in Exams Dataset](https:\/\/www.kaggle.com\/spscientist\/students-performance-in-exams), which contains students scores for three subjects - Maths, Reading and Writing. \n\nAfter getting to know the dataset, I will try to answer the question: **are the scores distributed normally**?  \n\nIn order to do it, I will build a histogram, try to fit a bell curve, and also draw a Q-Q plot. Stay tuned!\n","61a83f30":"This does look like Gaussian distibution!\n\nLet us go further and try to fit a bell curve over a histogram.","0cf66d70":"<a id=\"1\"><\/a> <br>\n## Introduction\n![edge2edge-media-uKlneQRwaxY-unsplash.jpg](attachment:1eba97cc-4672-459d-8947-5881dbe83000.jpg)\n\nIn this notebook we will have a look at an important statistics concept - **normal distribution**:\n* review some theory and get some inspiration;\n* build basic charts with Python and its awesome libs;\n* and finally, check the real world [Students Performance in Exams Dataset](https:\/\/www.kaggle.com\/spscientist\/students-performance-in-exams) for normality.","4fa74df6":"<a id=\"4\"><\/a> <br>\n### Sample Normal Distribution Curve: arange(), norm.pdf() methods\nNow we will build a normal distribution curve. For a change, a different numpy method for array generation will be used: **arange()**, which allows to set start, stop and step of your array. I will go from -50 to 50 with step 1.\n\nAs my array is by design centered at 0, the mean is obviously 0. I will set standard deviation to 10.\n\nNow I will pass my array, mean and standar deviation to the **norm.pdf()** scipy method to generate distributions, and finally build the curve. See how it resembles the bell?","e69ac130":"<a id=\"11\"><\/a> <br>\n### Students Scores Normality Check: Q-Q Graph\nA **Q-Q graph** (Q-Q stands for quantile-quantile, where quantile is just a portion of distribution) shows whether correllation exists between the given dataset and normal distribution. \n\nLet us build the graphs for all the disciplines and see whether the correlation exists!","6bbfa253":"## Conclusion\nThanks for joining me on this normal distribution recap, and I wish you to continue your data journey with bells on!\n\n\n![luis-perdigao-JMabq3k4gk8-unsplash.jpg](attachment:373502a6-de35-4378-9e42-b242d7649239.jpg)","6a1302c0":"Indeed, there exists correlation between students scores and the normal distribution line. This means that our data is **very close to Gaussian**! If I would have to do further modeling here, I would start with **parametrized** models, such as Logistic Regression or Naive Bayes.","ae504879":"<a id=\"13\"><\/a> <br>\n## References\n\n- Photo by <a href=\"https:\/\/unsplash.com\/@edge2edgemedia?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Edge2Edge Media<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/statistics?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash<\/a>\n\n- <a href=\"https:\/\/en.wikipedia.org\/wiki\/Carl_Friedrich_Gauss\">Carl_Friedrich_Gauss<\/a> on Wikipedia\n\n- <a href=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/a\/a9\/Empirical_Rule.PNG\">Empirical Rule<\/a> on Wikimedia\n\n- Photo by <a href=\"https:\/\/unsplash.com\/@scalabis?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Lu\u00eds Perdig\u00e3o<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/bell?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash<\/a>\n  \n\n  ","95dfcfbe":"<a id=\"3\"><\/a> <br>\n### Sample Normal Distribution Histogram: random.normal(), hist() methods\nHere is a very simple example of normal data distribution, visualized by a histogram.  \n\nLet us create an array with numpy **random.normal()** method. The array has 50000 values, the mean is set to 7.0, and the standard deviation is 1.0. This means that the majority of values should be close to 7.0, and usually not further that 1.0 from it.\n\nIn other words, the values should be concentrated around 7.0, and rarely get further away than 1.0 from the mean.\n\nWe then plot a histogram with 100 bars using matplotlib **hist()** method. Have a look:\n","5b05228c":"<a id=\"9\"><\/a> <br>\n### Students Scores Normality Check: Histogram Assumption\n\nHere, I will simply build three histograms, one for every discipline, and visually check whether data seems normally distributed. \n\nSee the code and charts below:","580bacd3":"So, what did we **learn about our data**?\n- there are 1000 scores for math, reading and writing;\n- all means are very close to each other - between 66 and 68.05;\n- all standard deviations are also close - between 14.6 and 15.19;\n- while there is a minimum score of 0 for math, for writing minimum is much higher - 10, and for reading myet higher - 17.00;\n- for all three disciplines the highest score of 100 was achieved at least by one student.\n\nLooks like we can start with the normality checks!","af39f714":"So the fitted bell curve fits actually quite well!","4eb38912":"<a id=\"8\"><\/a> <br>\n### Getting to Know Students Performance Dataset\n\nFirst, I will upload the dataset with pandas **read_csv()** function and check the first rows with **head()**.\n\nThen I will use **describe()** method to get a statistical overview about the numerical values contained in the dataset - namely the scores.","1382df70":"<a id=\"2\"><\/a> <br>\n## What Is Normal Distribution?\n**Normal distribution** is a type of probability distribution, which is very, very popular in the real world.\nAnother name for it is [Gaussian](https:\/\/en.wikipedia.org\/wiki\/Carl_Friedrich_Gauss) distribution, or \"bell curve\". By the way, I just got to know that [Carl Friedrich Gauss](https:\/\/en.wikipedia.org\/wiki\/Carl_Friedrich_Gauss) has studied and worked in Lower Saxony - the same region of Germany I currently live!\n\nLook how inspiring it is here (I took this photo in summer 2021 in Harz Mountains):\n\n![niedersachsen_res.jpg](attachment:634c822f-9252-4288-99d4-d434662ca428.jpg)","f305c936":"## Mean and Standard Deviation\n\nNormal distribution is described by two parameters: mean and standard deviation.\n\n**Mean (\u03bc)** - type of average value, which shows the center of data; it is calculated as sum of all values divided by their quantity. \n<div class=\"alert alert-block alert-info\"> \ud83d\udccc <b>Mean<\/b> is responsible for the <b>central point<\/b> of the normal distribution. If you increase the mean, your bell curve will move right; if you decrease mean, the bell will be shifted left, and in both cases it will stay the same height.<\/div>\n\n**Standard deviation (\u03c3)** - shows how different a typical value in the dataset can be from the mean. Very roughly, to calculate standard deviation you have to follow these steps:\n<ul>\n    <li> find differences between each value in the dataset and the mean;<\/li>\n    <li> square all these differences;<\/li>\n    <li> sum up the squares;<\/li>\n    <li> divide the sum by the quantity of values. <\/li>\n<\/ul>\n\n<div class=\"alert alert-block alert-info\"> \ud83d\udccc <b>Standard deviation<\/b> is all about <b>width<\/b> of your bell. Larger standard deviation will make the curve spread and low, smaller standard deviation will make it tall and narrow.<\/div>","27824290":"<a id=\"5\"><\/a> <br>\n## Empirical Rule\nIt is hard to believe, but it turns out that for a normal distribution, practically all data will fit within **three standard deviations** of the mean!\n\n<div class=\"alert alert-block alert-info\"> \ud83d\udccc Namely:\n    <ul>\n        <li><b>68%<\/b> of the data lies within 1 standard deviation of the mean, <\/li>\n        <li><b>95%<\/b> of the data lies within 2 standard deviations of the mean, <\/li>\n        <li><b>99.7%<\/b> of the data lies within 2 standard deviations of the mean. <\/li>\n    <\/ul><\/div>\n\n![Empirical_Rule_res.PNG](attachment:4470fff0-5c52-4b57-95fc-d89a943d4e7a.PNG)","52bcc78e":"<a id=\"10\"><\/a> <br>\n### Students Scores Normality Check: Fitted Curve\n\nNow as we know that the data looks Gaussian, we can try to fit a bell curve to prove it.\n\nFor that, we will first calculate mean and standard deviation, then generate a normally distributed array and finally plot the array curve. \n\nLet us do it for every discipline:\n","a27c5ba4":"## Examples\nI will illustrate the basic concept by a histogram and a curve, using slighly different methods and libraries. Check the imports and then the charts!"}}