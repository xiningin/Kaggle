{"cell_type":{"ee94f4c2":"code","c42dc7b0":"code","8039efac":"code","2417b9d4":"code","db402156":"code","4ccdd89c":"code","f66879be":"code","64e3ab22":"code","affc403e":"code","d7610a2b":"code","8ffc86f6":"code","6e84b0ab":"code","5a646adb":"code","7dd782e5":"code","de108a08":"code","38a7fe13":"code","9e40a3f2":"code","5b9188ac":"code","d5b2b7d2":"code","b618392f":"code","128eb0eb":"code","f051bbd8":"code","28045ba6":"code","40412da1":"code","dde18ffc":"code","6acf9724":"code","920c4706":"code","3845d106":"code","0526ed29":"code","e01b8fe7":"code","b4386bcb":"code","5af99830":"code","1902af39":"code","b2b95eca":"code","e9f86761":"code","28110aa6":"code","39ac513d":"code","c773cc87":"code","1adf16af":"code","e482f8de":"code","ae042575":"code","8e01132d":"code","1074b650":"code","fc75cee4":"code","b5e31789":"code","cd462e9a":"code","d0d40a12":"code","108f9806":"code","11ee3d3c":"code","4f4f2da4":"code","8e8cb296":"code","519b2b36":"code","b1de2b11":"code","b2ef34e4":"code","09ce2afb":"code","90f64244":"code","d1d05980":"code","8aef007e":"code","0933e1c1":"code","507df0f7":"code","b91faf76":"code","2539a033":"code","2046bc82":"code","9968c549":"code","e30cd5eb":"code","6f0f659b":"code","9083d2e6":"code","2e1255d9":"code","1817e75d":"code","86ca365d":"code","d5ab4712":"code","66a03cad":"code","39dec825":"code","3ad7212f":"code","e06296dc":"code","1a9a6e87":"code","7fe18798":"code","e3a4e129":"code","66ac72ab":"code","6471bb58":"code","f3917ea3":"code","b3e70108":"code","e382cf52":"code","6272c652":"code","fdab22e3":"code","08d27d69":"code","a6ac95f6":"code","c343ee4e":"code","8cead0e6":"code","d7661a91":"code","6e0be7af":"code","95cc45cd":"code","4224ccc5":"code","76e0fd75":"code","2838ef0e":"code","dae119d2":"code","21d83278":"code","0c4f281a":"code","524103af":"code","9ccaa577":"code","b365232f":"code","2c93024a":"code","b291479a":"code","851e5a1f":"markdown","5f4d403e":"markdown","bedc8be9":"markdown","6f316351":"markdown","435719f3":"markdown","024b30eb":"markdown","1a542dbb":"markdown","74eba302":"markdown","5ca5fe69":"markdown","f98a9e41":"markdown","d47bcca0":"markdown","014f157b":"markdown","1d3203a5":"markdown","091e9530":"markdown","5a734894":"markdown","ee0daf32":"markdown","4c74997d":"markdown","655865e2":"markdown","1ee33d82":"markdown","2f04c089":"markdown","aad657d4":"markdown","c65f9a7d":"markdown"},"source":{"ee94f4c2":"import os\nimport tarfile\nimport urllib","c42dc7b0":"DOWNLOAD_ROOT = \"https:\/\/raw.githubusercontent.com\/ageron\/handson-ml2\/master\/\"\nHOUSING_PATH = os.path.join(\"datasets\", \"housing\")\nHOUSING_URL = DOWNLOAD_ROOT + \"datasets\/housing\/housing.tgz\"","8039efac":"def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):\n    os.makedirs(housing_path, exist_ok=True)\n    tgz_path = os.path.join(housing_path, \"housing.tgz\")\n    urllib.request.urlretrieve(housing_url, tgz_path)\n    housing_tgz = tarfile.open(tgz_path)\n    housing_tgz.extractall(path=housing_path)\n    housing_tgz.close()","2417b9d4":"fetch_housing_data()","db402156":"import pandas as pd","4ccdd89c":"def load_housing_data(housing_path=HOUSING_PATH):\n    csv_path = os.path.join(housing_path, \"housing.csv\")\n    return pd.read_csv(csv_path)","f66879be":"housing = load_housing_data()\nhousing.head()","64e3ab22":"housing.info()","affc403e":"housing['ocean_proximity'].value_counts()","d7610a2b":"housing.describe()","8ffc86f6":"%matplotlib inline\nimport matplotlib.pyplot as plt\nhousing.hist(bins=50, figsize=(20,15))\nplt.show()","6e84b0ab":"import numpy as np","5a646adb":"def split_train_test(data, test_ratio):\n    shuffled_indices = np.random.permutation(len(data))\n    test_set_size = int(len(data) * test_ratio)\n    test_indices = shuffled_indices[:test_set_size]\n    train_indices = shuffled_indices[test_set_size:]\n    return data.iloc[train_indices], data.iloc[test_indices]","7dd782e5":"train_set, test_set = split_train_test(housing, 0.2)","de108a08":"len(train_set)","38a7fe13":"len(test_set)","9e40a3f2":"from zlib import crc32","5b9188ac":"def test_set_check(identifier, test_ratio):\n    return crc32(np.int64(identifier)) & 0xffffffff < test_ratio * 2**32","d5b2b7d2":"def split_train_test_by_id(data, test_ratio, id_column):\n    ids = data[id_column]\n    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio))\n    return data.loc[~in_test_set], data.loc[in_test_set]","b618392f":"housing_with_id = housing.reset_index()\ntrain_set, test_set = split_train_test_by_id(housing_with_id, 0.2, \"index\")","128eb0eb":"from sklearn.model_selection import train_test_split","f051bbd8":"train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)","28045ba6":"housing['income_cat'] = pd.cut(housing['median_income'], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], \n                               labels=[1, 2, 3, 4, 5])","40412da1":"housing['income_cat'].hist()","dde18ffc":"from sklearn.model_selection import StratifiedShuffleSplit","6acf9724":"split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)","920c4706":"for train_index, test_index in split.split(housing, housing['income_cat']):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","3845d106":"strat_test_set['income_cat'].value_counts() \/ len(strat_test_set)","0526ed29":"for set_ in (strat_train_set, strat_test_set):\n    set_.drop('income_cat', axis=1, inplace=True)","e01b8fe7":"housing = strat_train_set.copy()","b4386bcb":"housing.plot(kind='scatter', x='longitude', y='latitude')","5af99830":"housing.plot(kind='scatter', x='longitude', y='latitude', alpha=0.1)","1902af39":"housing.plot(kind='scatter', \n             x='longitude', \n             y='latitude', \n             alpha=0.4,\n             s=housing['population']\/100,\n             label='population',\n             figsize=(10,7),\n             c='median_house_value',\n             cmap=plt.get_cmap('jet'),\n             colorbar=True)\nplt.legend()","b2b95eca":"corr_matrix = housing.corr()","e9f86761":"corr_matrix['median_house_value'].sort_values(ascending=False)","28110aa6":"from pandas.plotting import scatter_matrix","39ac513d":"attributes = ['median_house_value', 'median_income', 'total_rooms', 'housing_median_age']\nscatter_matrix(housing[attributes], figsize=(12, 8))","c773cc87":"housing.plot(kind='scatter', x='median_income', y='median_house_value', alpha=0.1)","1adf16af":"housing['rooms_per_household'] = housing['total_rooms']\/housing['households']\nhousing['bedrooms_per_room'] = housing['total_bedrooms']\/housing['total_rooms']\nhousing['population_per_household'] = housing['population']\/housing['households']","e482f8de":"housing.head()","ae042575":"corr_matrix = housing.corr()","8e01132d":"corr_matrix['median_house_value'].sort_values(ascending=False)","1074b650":"housing = strat_train_set.drop(\"median_house_value\", axis=1)\nhousing_labels = strat_train_set[\"median_house_value\"].copy()\nsample_incomplete_rows = housing[housing.isnull().any(axis=1)].head()\nsample_incomplete_rows","fc75cee4":"sample_incomplete_rows.dropna(subset=[\"total_bedrooms\"])    # option 1","b5e31789":"sample_incomplete_rows.drop(\"total_bedrooms\", axis=1)       # option 2","cd462e9a":"median = housing[\"total_bedrooms\"].median()\nsample_incomplete_rows[\"total_bedrooms\"].fillna(median, inplace=True) # option 3","d0d40a12":"sample_incomplete_rows","108f9806":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy=\"median\")","11ee3d3c":"housing_num = housing.drop(\"ocean_proximity\", axis=1)\n# alternatively: housing_num = housing.select_dtypes(include=[np.number])","4f4f2da4":"imputer.fit(housing_num)","8e8cb296":"imputer.statistics_","519b2b36":"housing_num.median().values","b1de2b11":"X = imputer.transform(housing_num)","b2ef34e4":"housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n                          index=housing.index)","09ce2afb":"housing_tr.loc[sample_incomplete_rows.index.values]","90f64244":"imputer.strategy","d1d05980":"housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n                          index=housing_num.index)","8aef007e":"housing_tr.head()","0933e1c1":"housing_cat = housing[[\"ocean_proximity\"]]\nhousing_cat.head(10)","507df0f7":"from sklearn.preprocessing import OrdinalEncoder\n\nordinal_encoder = OrdinalEncoder()\nhousing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)\nhousing_cat_encoded[:10]","b91faf76":"ordinal_encoder.categories_","2539a033":"from sklearn.preprocessing import OneHotEncoder\n\ncat_encoder = OneHotEncoder()\nhousing_cat_1hot = cat_encoder.fit_transform(housing_cat)\nhousing_cat_1hot","2046bc82":"housing_cat_1hot.toarray()","9968c549":"cat_encoder = OneHotEncoder(sparse=False)\nhousing_cat_1hot = cat_encoder.fit_transform(housing_cat)\nhousing_cat_1hot","e30cd5eb":"cat_encoder.categories_","6f0f659b":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# column index\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n        \n    def fit(self, X, y=None):\n        return self  # nothing else to do\n    \n    def transform(self, X):\n        \n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        \n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n        \n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attribs = attr_adder.transform(housing.values)","9083d2e6":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler","2e1255d9":"num_pipeline =  Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('attribs_adder', CombinedAttributesAdder()),\n    ('std_scaler', StandardScaler())\n])","1817e75d":"housing_num_tr = num_pipeline.fit_transform(housing_num)","86ca365d":"from sklearn.compose import ColumnTransformer","d5ab4712":"num_attribs = list(housing_num)\ncat_attribs = ['ocean_proximity']","66a03cad":"full_pipeline = ColumnTransformer([\n    ('num', num_pipeline, num_attribs),\n    ('cat', OneHotEncoder(), cat_attribs)\n])","39dec825":"housing_prepared = full_pipeline.fit_transform(housing)","3ad7212f":"from sklearn.linear_model import LinearRegression","e06296dc":"lin_reg = LinearRegression()\nlin_reg.fit(housing_prepared, housing_labels)\nsome_data = housing.iloc[:5]\nsome_labels = housing_labels.iloc[:5]\nsome_data_prepared = full_pipeline.transform(some_data)\nprint('Predictions:', lin_reg.predict(some_data_prepared))\nprint('Labels', list(some_labels))","1a9a6e87":"from sklearn.metrics import mean_squared_error","7fe18798":"housing_predictions = lin_reg.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_labels, housing_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","e3a4e129":"from sklearn.tree import DecisionTreeRegressor","66ac72ab":"tree_reg = DecisionTreeRegressor()\ntree_reg.fit(housing_prepared, housing_labels)\nhousing_predictions = tree_reg.predict(housing_prepared)\ntree_mse = mean_squared_error(housing_labels, housing_predictions)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","6471bb58":"from sklearn.model_selection import cross_val_score","f3917ea3":"scores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10, n_jobs=-1)\ntree_rmse_scores = np.sqrt(-scores)","b3e70108":"def display_scores(scores):\n    print('Scores:', scores)\n    print('Mean:', scores.mean())\n    print('Standard deviation:', scores.std())","e382cf52":"display_scores(tree_rmse_scores)","6272c652":"lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10, n_jobs=-1)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","fdab22e3":"from sklearn.ensemble import RandomForestRegressor","08d27d69":"forest_reg = RandomForestRegressor()\nforest_reg.fit(housing_prepared, housing_labels)\nhousing_predictions = forest_reg.predict(housing_prepared)\nforest_mse = mean_squared_error(housing_labels, housing_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","a6ac95f6":"forest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels, scoring='neg_mean_squared_error', cv=10, n_jobs=-1)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","c343ee4e":"from sklearn.model_selection import GridSearchCV","8cead0e6":"param_grid = [\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 5]}\n]","d7661a91":"forest_reg = RandomForestRegressor()","6e0be7af":"grid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True,\n                           n_jobs=-1)","95cc45cd":"grid_search.fit(housing_prepared, housing_labels)","4224ccc5":"grid_search.best_params_","76e0fd75":"grid_search.best_estimator_","2838ef0e":"cvres = grid_search.cv_results_","dae119d2":"for mean_score, params in zip(cvres['mean_test_score'], cvres['params']):\n    print(np.sqrt(-mean_score), params)","21d83278":"feature_importances = grid_search.best_estimator_.feature_importances_","0c4f281a":"feature_importances","524103af":"extra_attribs = ['rooms_per_hhold', 'pop_per_hhold', 'bedrooms_per_room']\ncat_encoder = full_pipeline.named_transformers_['cat']\ncat_one_hot_attribs = list(cat_encoder.categories_[0])\nattributes = num_attribs + extra_attribs + cat_one_hot_attribs\nsorted(zip(feature_importances, attributes), reverse=True)","9ccaa577":"final_model = grid_search.best_estimator_\nX_test = strat_test_set.drop('median_house_value', axis=1)\ny_test = strat_test_set['median_house_value'].copy()\nX_test_prepared = full_pipeline.transform(X_test)\nfinal_predictions = final_model.predict(X_test_prepared)\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)\nfinal_rmse","b365232f":"from scipy import stats","2c93024a":"confidence = 0.95","b291479a":"squared_errors = (final_predictions - y_test)**2\nnp.sqrt(stats.t.interval(confidence, len(squared_errors) - 1, loc=squared_errors.mean(), scale=stats.sem(squared_errors)))","851e5a1f":"## Fine-Tune Your Model","5f4d403e":"### Looking for Correlations","bedc8be9":"### Grid Search","6f316351":"### Stratified sampling","435719f3":"### Visualizing Geographical Data","024b30eb":"### Histogram of income categories","1a542dbb":"## Discover and Visualize the Data to Gain Insights","74eba302":"## Download the data","5ca5fe69":"### Evaluate Your System on the Test Set","f98a9e41":"### Analyze the Best Models and Their Errors","d47bcca0":"### Split data with Scikit-Learn","014f157b":"### Training and Evaluating on the Training Set","1d3203a5":"## Select and Train a Model","091e9530":"### Transformation Pipelines","5a734894":"## Prepare the Data for Machine Learning Algorithms","ee0daf32":"### Data Cleaning","4c74997d":"### Better Evaluation Using Cross-Validation","655865e2":"## Create a Test Set","1ee33d82":"## Take a Quick Look at the Data Structure","2f04c089":"### How work a split data","aad657d4":"### Experimenting with Attribute Combinations","c65f9a7d":"### Correlations with pandas"}}