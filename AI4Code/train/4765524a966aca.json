{"cell_type":{"cc7f6895":"code","2929e1d8":"code","b69579de":"code","7f6fb084":"code","dcf28671":"code","0dbf62c7":"code","89d637bf":"code","2ebc8fa3":"code","2e7c10a1":"code","2ce5a6a7":"code","6aab68e8":"code","59e6c062":"code","647bb56d":"code","fd8c11f7":"code","9cb3eb4d":"code","5b38b6fe":"code","ea8e8676":"code","22ead184":"code","30eaecf1":"code","d95d68c8":"code","ebbfa860":"code","f0d4928b":"code","64791921":"code","a7bd517d":"code","edb7a434":"code","339778ac":"code","aef95dc5":"code","5ae97e66":"code","21003dc9":"code","d1ee4448":"code","e2c497b1":"code","50e5bebd":"code","04347c71":"code","ed9e0b2d":"code","4356429f":"markdown","cf0ff77d":"markdown","c307e368":"markdown","2eeb5e8f":"markdown","46a89a6e":"markdown","fd3289e5":"markdown","13a5de93":"markdown","613956a5":"markdown","cde9140d":"markdown","459f181d":"markdown","8f2c068e":"markdown","72393d37":"markdown","019b73e9":"markdown","5413a39f":"markdown"},"source":{"cc7f6895":"from tensorflow.keras.datasets import imdb\nfrom tensorflow.keras.models import Sequential, load_model, Model\nfrom tensorflow.keras.layers import Dense, Dropout, Embedding, Activation, CuDNNLSTM, LSTM, GRU, SpatialDropout1D, Flatten, Bidirectional   \nfrom tensorflow.keras import utils\nfrom tensorflow.keras.preprocessing import sequence\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","2929e1d8":"num_words=20000","b69579de":"data = np.load('..\/input\/imdb_train.npz', allow_pickle=True) \nx_train_src = data['x'] \ny_train_src = data['y']","7f6fb084":"x_test_src = np.load('..\/input\/imdb_test.npy', allow_pickle=True)","dcf28671":"index = 0\nprint(x_train_src[index])\nprint(y_train_src[index])","0dbf62c7":"maxlen = 1000","89d637bf":"x_train = pad_sequences(x_train_src, maxlen=maxlen)\nx_test = pad_sequences(x_test_src, maxlen=maxlen)","2ebc8fa3":"word_index = imdb.get_word_index()","2e7c10a1":"import os\nif not os.path.isfile(\"glove.6B.zip\"):\n    !wget http:\/\/nlp.stanford.edu\/data\/glove.6B.zip -O glove.6B.zip\n    !unzip glove.6B.zip","2ce5a6a7":"embeddings_index = dict()\nwith open('glove.6B.300d.txt', 'r') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        word_vector = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = word_vector","6aab68e8":"embedding_dim = 300\nembedding_matrix = np.zeros((num_words, embedding_dim))\nfor word, i in word_index.items():\n    if i < num_words - 3:\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i + 3] = embedding_vector","59e6c062":"# del word_index\n# del embeddings_index","647bb56d":"cb_EarlyStopping = EarlyStopping(monitor='val_acc', mode='max', verbose=1, patience=10)\ncb_ModelCheckpoint = ModelCheckpoint(filepath='model.best.hdf5', monitor='val_acc', mode='max', verbose=1, save_best_only=True)\ncb_ReduceLROnPlateau = ReduceLROnPlateau(monitor='val_acc', factor=0.1, patience=3, verbose=1, mode='max', min_lr=0.00000001)","fd8c11f7":"batch_size=64","9cb3eb4d":"model = Sequential()\nmodel.add(Embedding(num_words, embedding_dim, input_length=maxlen, batch_input_shape=(batch_size, maxlen)))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(800, return_sequences=False, stateful=True))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1, activation='sigmoid'))","5b38b6fe":"model.layers[0].set_weights([embedding_matrix])\nmodel.layers[0].trainable = False","ea8e8676":"# del embedding_matrix","22ead184":"model.summary()","30eaecf1":"model.compile(optimizer='rmsprop', \n              loss='binary_crossentropy', \n              metrics=['accuracy'])","d95d68c8":"train_apply_count = len(x_train) - len(x_train)%batch_size\nbatch_count = train_apply_count\/\/batch_size\nval_split = (batch_count*8\/\/10)*batch_size\n# train_apply_count = len(x_train) - len(x_train)%batch_size\n\n\ntrain_part_x, train_part_y = x_train[:val_split], y_train_src[:val_split]\nval_part_x, val_part_y = x_train[val_split:], y_train_src[val_split:]\n\nprint(f'batch_count: {batch_count}, val_split: {val_split}, train: {len(train_part_x)}, val: {len(val_part_x)}')\n\nsmall_test_part_x = x_train[train_apply_count:]\nsmall_test_part_y = y_train_src[train_apply_count:]\n\nprint(f'Allowed num of samples for statefull LSTM is [{train_apply_count}]. Small test part count is [{len(small_test_part_x)}]   ')\n","ebbfa860":"from datetime import datetime, timedelta\ntimestart = datetime.now()\nhistory = model.fit(train_part_x, \n                    train_part_y, \n                    epochs=1,\n                    batch_size=batch_size,\n                    validation_data=(val_part_x, val_part_y),\n                    verbose=1)\nround_time = (datetime.now() - timestart).seconds\nprint(f'round time: {round_time}')\n\n","f0d4928b":"allowed_hours = 8\nmax_epochs = (allowed_hours*60*60\/\/round_time)\n\nprint(f'maxEpochs: {max_epochs}, max_time: {timedelta(minutes=max_epochs*round_time\/\/60)}')","64791921":"history = model.fit(train_part_x, \n                    train_part_y, \n                    batch_size=batch_size,\n                    epochs=max_epochs,\n                    callbacks = [cb_EarlyStopping, cb_ModelCheckpoint, cb_ReduceLROnPlateau],\n                    validation_data=(val_part_x, val_part_y),\n                    verbose=1)","a7bd517d":"plt.plot(history.history['acc'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_acc'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","edb7a434":"actual_x_test_count = len(x_test)\nprint(actual_x_test_count)\npadding_count = batch_size - len(x_test)%batch_size\npadding = [x_test[0] for _ in range(padding_count)]\n\npadding_x_test = np.concatenate((x_test, padding))\nprint(len(x_test))\nprint(len(padding_x_test))\n\nprint([x[-1] for x in padding_x_test[9990:]])\nprint([x[-1] for x in x_test[9990:]])","339778ac":"predictions = model.predict(padding_x_test, batch_size=batch_size)\n","aef95dc5":"predictions = predictions[:actual_x_test_count]","5ae97e66":"predictions[:5]","21003dc9":"predictions = predictions.round()","d1ee4448":"predictions","e2c497b1":"out = np.column_stack((range(1, predictions.shape[0]+1), predictions))","50e5bebd":"out[:5]","04347c71":"np.savetxt('submission.csv', out, header=\"Id,Category\", \n            comments=\"\", fmt=\"%d,%d\")","ed9e0b2d":"!head submission.csv","4356429f":"\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0444\u0430\u0439\u043b ","cf0ff77d":"## \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0444\u0430\u0439\u043b \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f Kaggle","c307e368":"## \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","2eeb5e8f":"1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0448\u0430\u0431\u043b\u043e\u043d \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 Kaggle.\n2. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u043d\u0430 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u0443\u044e. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0442\u0440\u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0441\u0435\u0442\u0438:\n    - SimpleRNN\n    - GRU\n    - LSTM\n3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 DropOut, \u0447\u0442\u043e\u0431\u044b \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435:\n    * \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0439 SpatialDropout1D \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u043e\u044f Embedding\n    * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b dropout \u0438 recurrent_dropout \u0434\u043b\u044f \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432\n3. \u041c\u0435\u043d\u044f\u0439\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u0435\u0442\u0438 \u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438:\n    - \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0432 \u0441\u043b\u043e\u0435 Embedding.\n    - \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u0432 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u043c \u0441\u043b\u043e\u0435.\n    - \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 (Bidirectional)\n    - \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432 \u0432 \u0441\u0435\u0442\u0438.\n    - \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0438\u043d\u0438-\u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n    - \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u044b (GloVe, Word2Vec \u0438 \u0442.\u043f.).    \n4. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043e\u0431\u0443\u0447\u0438\u0442\u0435 \u0441\u0435\u0442\u044c \u0435\u0449\u0435 \u0440\u0430\u0437 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b.\n5. \u0421\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043e\u0442\u0447\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:\n     * \u041c\u0435\u0441\u0442\u043e \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0441\u0442\u0438\u0447\u044c\n     * \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n     * \u0421\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n     * \u0413\u0440\u0430\u0444\u0438\u043a \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","46a89a6e":"\u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u0434\u043e 0 \u0438\u043b\u0438 1","fd3289e5":"## \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435","13a5de93":"## \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430","613956a5":"## \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435","cde9140d":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","459f181d":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u044b \u0434\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043b\u043e\u0432 20000.","8f2c068e":"## \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","72393d37":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0443\u044e \u0441\u0435\u0442\u044c","019b73e9":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438","5413a39f":"## \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u0444\u0438\u043b\u044c\u043c\u044b \u0441 \u0441\u0430\u0439\u0442\u0430 IMDB\n\n\u0417\u0430\u043d\u044f\u0442\u0438\u0435 \u043d\u043e\u043c\u0435\u0440 \u0441\u0435\u043c\u044c \u043a\u0443\u0440\u0441\u0430 [\"\u041e\u0441\u043d\u043e\u0432\u044b \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u043d\u0430 Python\"](https:\/\/neural-university.ru\/neural-kurs).\n"}}