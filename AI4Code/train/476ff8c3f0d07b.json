{"cell_type":{"fcd3b778":"code","4ea22bfa":"code","d00fecbf":"code","57ed8537":"code","70af5cef":"code","3ec6086f":"code","4338c72e":"markdown","0c608b2a":"markdown","a3e80a17":"markdown","8f211991":"markdown","2ad2bbd6":"markdown"},"source":{"fcd3b778":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D\nfrom tensorflow.keras.layers import MaxPool2D\n\nworking_directory = r'..\/input\/butterfly-images40-species\/butterflies_rev2'\ntrain_dir = os.path.join(working_directory, 'train')\ntest_dir = os.path.join(working_directory, 'test')\nval_dir = os.path.join(working_directory, 'valid')","4ea22bfa":"img_height = 224\nimg_width = 224\nbatch_size = 64\n\ntrain_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    train_dir,\n    seed=123,\n    image_size=(img_height, img_width),\n    batch_size=batch_size)\n\ntest_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    test_dir,\n    seed=123,\n    image_size=(img_height, img_width),\n    batch_size=1)\n\nval_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    val_dir,\n    seed=123,\n    image_size=(img_height, img_width),\n    batch_size=batch_size);","d00fecbf":"# Let's check existing class names\nclass_names = train_ds.class_names","57ed8537":"# For higher perfomance on TPU: https:\/\/www.tensorflow.org\/guide\/data_performance\nAUTOTUNE = tf.data.AUTOTUNE\n\ntrain_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)\ntest_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)\nval_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)\n\n# setup basic model and pass it's input to our layers\nresnet_model = ResNet50(include_top=False,weights=\"imagenet\")\nx = resnet_model.output\nx = GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(1024,activation='relu')(x)\nx = tf.keras.layers.Dense(512,activation='relu')(x)\nres = tf.keras.layers.Dense(50, activation=\"softmax\")(x)\n\n# generate our model\nmodel = Model(inputs=resnet_model.input, outputs=res)\n\n# will not retrain weights\nfor layer in resnet_model.layers:\n    layer.trainable = False\n\nmodel.compile(\n    optimizer=tf.keras.optimizers.SGD(learning_rate=0.05),\n    loss=tf.losses.SparseCategoricalCrossentropy(),\n    metrics=['accuracy'])\n\nhist = model.fit(\n    train_ds,\n    validation_data=val_ds,\n    epochs=10,\n    verbose=1,\n).history\n\nmodel.summary()\n# model.save(r\"..\/input\/model\/\") only for local ipynb","70af5cef":"from sklearn.metrics import classification_report\n# Get ground truth\ny_true = []\nfor images, labels in test_ds:   \n    for label in labels:\n        y_true.append(class_names[label])\n\n# predict\ny_pred = []\nerrors = 0\ncount = 0\npreds = model.predict(test_ds)\nfor i, p in enumerate(preds):\n    count += 1\n    index = np.argmax(p)\n    y_pred.append(class_names[index])  \n    if class_names[index] != y_true[i]:\n        errors += 1\n\nprint(\"Accuracy\",(count-errors)* 100\/count)\nclassification_report(np.array(y_true), np.array(y_pred), target_names=class_names);","3ec6086f":"from matplotlib import pyplot as plt\nimg = tf.keras.preprocessing.image.load_img(r'..\/input\/butterfly-images40-species\/butterflies_rev2\/test\/chestnut\/4.jpg',\n                                            target_size=(img_height, img_width))\nimg_array = tf.expand_dims(tf.keras.preprocessing.image.img_to_array(img), 0)\n\nscore = tf.nn.softmax(model.predict(img_array))\nprint(\"This image most likely belongs to {} \".format(class_names[np.argmax(score)]))\nplt.imshow(img)","4338c72e":"### Get prediction","0c608b2a":"### Let's setup working path","a3e80a17":"### Visualize for specific butterfly","8f211991":"### Preprocessing datasets and setup batch size for training\n#### For better accuracy augmentation can be used. I'll miss it.","2ad2bbd6":"### Let's train model; selecting ResNet50 with imagenet weights as base."}}