{"cell_type":{"840b17ae":"code","53c1008c":"code","2a1de4c3":"code","b5d61320":"code","780ca092":"code","2c059318":"code","5dff4218":"code","efa6274d":"code","822f1666":"code","775afb17":"code","1bd4d060":"code","25d341f6":"code","3ba6ec99":"code","9f43c98b":"code","dc02fc59":"code","f64853be":"code","9c6dfe01":"code","9e2a029f":"code","785260e7":"code","6ffd6c70":"code","531170f3":"code","76a5ea1b":"code","365bd54f":"code","7c439e74":"code","b1f9baa1":"code","95ae895e":"code","1040c69f":"code","89950e74":"code","f0eb03d6":"markdown","339e4400":"markdown","9f920434":"markdown","7f9c9bfa":"markdown","88fbcd20":"markdown","fff86786":"markdown","49301610":"markdown","650052f7":"markdown","cdb43a10":"markdown","7c7959e9":"markdown","826c5386":"markdown","494e5334":"markdown","54270809":"markdown","727e8e7e":"markdown","d82de174":"markdown","8e5989a2":"markdown","f5b6e63d":"markdown","95666a9e":"markdown","7ec4cb09":"markdown","6800a024":"markdown","7de77527":"markdown","c1e7ee86":"markdown","0d66d1b0":"markdown","fa8a8890":"markdown","306f8037":"markdown"},"source":{"840b17ae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\nplays = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\npffscouting = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\n#tracking2018 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\n#tracking2019 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\n#tracking2020 = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')","53c1008c":"players.shape, games.shape, plays.shape","2a1de4c3":"players.head()","b5d61320":"players.isnull().sum()","780ca092":"players.dropna(subset=['collegeName', 'birthDate'], inplace=True, how='any')\nplayers = players.reset_index(drop=True)\nplayers.isnull().sum(), players.shape","2c059318":"for i in range(0,(len(players.height)-1)):\n    l = len(players.height[i])\n    if '-' in players.height[i]:\n        if l ==3:\n            players.height[i] = int(players.height[i][0])*12 + int(players.height[i][l-1])\n        else:\n            players.height[i] = int(players.height[i][0])*12 + int(players.height[i][l-1]) + 10\n    else:\n        players.height[i] = int(players.height[i])  \n        \n#players.height = players.height.astype('int')","5dff4218":"players.height.unique()","efa6274d":"from datetime import datetime, date\ntoday = date.today()\n\nplayers.birthDate = pd.to_datetime(players.birthDate)\nplayers.birthDate = players.birthDate.dt.strftime(\"%Y\/%m\/%d\")\n\nfor j in range(0,(len(players.height)-1)):\n    born = datetime.strptime(str(players.birthDate[j]), \"%Y\/%m\/%d\").date()\n    players.birthDate[j] = today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n\nplayers['age'] = players.birthDate\nplayers.drop(['birthDate'], axis=1, inplace=True)\n\n#players.birthDate = players.birthDate.astype('int')","822f1666":"players.age.unique()","775afb17":"players.head()","1bd4d060":"players.dtypes","25d341f6":"games.head()","3ba6ec99":"games.isnull().sum()","9f43c98b":"plays.head()","dc02fc59":"plays.isnull().sum().sum()","f64853be":"plays.isnull().sum()","9c6dfe01":"plays.drop(columns=['kickBlockerId', 'penaltyCodes', 'penaltyJerseyNumbers', 'penaltyYards', 'passResult', 'returnerId', 'yardlineSide'], inplace=True)","9e2a029f":"plays.kickReturnYardage.fillna(round(plays.kickReturnYardage.mean()), inplace=True)\nplays.kickLength.fillna(round(plays.kickLength.mean()), inplace=True)\nplays.isnull().sum().sum(), round(plays.kickReturnYardage.mean()), round(plays.kickLength.mean())\n\nplays.dropna(subset=['kickerId'],inplace=True)","785260e7":"plays.isnull().sum().sum()","6ffd6c70":"players.columns, games.columns, plays.columns","531170f3":"games_plays = pd.merge(games, plays, on='gameId')\ngames_plays.dtypes","76a5ea1b":"games_plays.columns","365bd54f":"players.columns","7c439e74":"import matplotlib.pyplot as plt\nimport seaborn as sns","b1f9baa1":"games_plays.season.value_counts().plot(kind='barh', figsize=(10,6), color='yellow')\nplt.show()\n\n#You can just do it with games_plays.season.value_counts() this also but visualization feels better.","95ae895e":"plt.subplot(1,2,1)\nplayers.height.value_counts().plot(kind='bar', figsize=(14,6), color='green')\nplt.xlabel('height')\n\nplt.subplot(1,2,2)\nplayers.age.value_counts().plot(kind='bar', figsize=(14,6), color='orange')\nplt.xlabel('age')\n\nplt.plot()","1040c69f":"players.collegeName.nunique()","89950e74":"players.collegeName.value_counts()","f0eb03d6":"##### Let's drop the player's data whose 'birthDate' is not avalable.\n##### Also, let's drop the missing data from 'collegeName'.","339e4400":"##### So players dataset is free of null values","9f920434":"### 1. Players","7f9c9bfa":"##### Some are int and other are object, we will treat them later as required","88fbcd20":"### 2. Games","fff86786":"#### Q3. Which college has produced maximum number of players?","49301610":"#### Let's convert 'height' to a simple integer and 'birthDate' to 'Age'","650052f7":"##### So plays dataset is free of null values","cdb43a10":"##### There is still a value which is not getting converted in to simple age just like above.","7c7959e9":"##### As most of the values are null in 'kickBlockerId', 'penaltyCodes', 'penaltyJerseyNumbers', 'penaltyYards', 'passResult', 'returnerId'","826c5386":"### Hi guys! This notebook will slowly enter into competition and achieve high scores.\n\n#### Please support and stay updated.\n\n### This notebook holds analysis and visualization for Players, Games, Plays, PffScouting data. To view analysis and visualizations of year wise tracking data check this notebook -> [NFL yearly tracking data complete !! \ud83c\udfc8](https:\/\/www.kaggle.com\/zwartfreak\/nfl-yearly-tracking-data-complete)\n\n##### P.S. This notebook is not completed yet, building it daily.","494e5334":"> ## Wow that was quite a task, relaxed to do it.","54270809":"##### There is still a value which is not getting converted in to simple integer.","727e8e7e":"##### Different types of columns are there, we will treat them later as required","d82de174":"##### No null values in Games","8e5989a2":"##### We can answer so many questions using Visualization.\n\n#### Q1. Which 'season' has most number of games?","f5b6e63d":"#### Q2. Find young and tall players.\nAs we have converted above, we can use age and height here.","95666a9e":"##### We can join games and plays dataset as gameId is the common column between them.","7ec4cb09":"> ## Data analysis","6800a024":"> ## Data visualization","7de77527":"##### That's hell lot of NULL values","c1e7ee86":"#### Q4. What is the relation between 'kicklength' and 'yardlinenumber'?","0d66d1b0":"#### There are different datasets so we will analyse them one by one.","fa8a8890":"### 3. Plays","306f8037":"##### As too many values unique values are there, let's not plot it."}}