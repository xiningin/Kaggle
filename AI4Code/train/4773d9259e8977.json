{"cell_type":{"ea988218":"code","db9743b9":"code","d4a109eb":"code","140df63b":"code","db659695":"code","c0b4684f":"code","a0cec05c":"code","6ae3b567":"code","007ff56e":"code","68caf2e4":"code","e883bb95":"code","35a610f9":"code","a0e038e8":"code","1620a477":"code","a94246d3":"code","7592a036":"code","bdf922a8":"code","5f029cca":"code","ca8bab40":"code","b1466385":"code","d48ee12b":"code","8e936a2f":"code","bc806717":"code","03962754":"code","dce8dfab":"code","2f670e8f":"code","c54dd336":"code","100cd68f":"code","79c85fe7":"code","150b9e7e":"code","fc2762aa":"code","8f81d692":"code","ae52c795":"code","20a15a14":"code","cd129b77":"code","25e9134c":"code","8c7284f4":"code","184e5ca1":"code","73e0eb40":"code","676e6e04":"code","75ad645b":"code","2de781c8":"code","cb9a6884":"code","30a79ff0":"code","33185cfd":"code","6ee4621b":"code","b1621072":"code","dc9b6189":"code","12f9e289":"code","14fafbd3":"code","80b8366f":"code","39fa0513":"code","11c7c63c":"code","79385c91":"code","37c78488":"code","88c1b023":"code","ea60bef3":"code","beb22450":"code","7d07842c":"code","73bfdd90":"code","156a88e4":"code","9498248f":"code","b445fabb":"code","acbd6acb":"code","81ed2fb8":"code","b09fd066":"code","f2296416":"code","dc7b2d1f":"code","55cfba6f":"code","a616f176":"code","4a8fcca5":"code","2ad494b6":"code","51da3242":"code","93238140":"code","16375ea3":"code","05e05404":"code","c359dc9c":"code","5f4e895d":"code","07a01069":"code","632f1724":"code","358cafd3":"code","142efb0f":"code","3222b333":"code","b62ea7b8":"code","b5df7867":"code","253c3d32":"code","eb6b14b4":"code","e4c6a0d2":"code","57295fc0":"code","13077af4":"code","aa8b58ed":"code","99982f6b":"code","0c576e32":"code","4f899453":"code","bc59bcc4":"code","176ae037":"code","28682528":"code","f3315f2e":"code","86004d54":"code","234eb8b5":"code","0427a4bf":"code","479b398b":"code","93b0678b":"markdown","f32042ab":"markdown","ec3aa635":"markdown","1d3dd215":"markdown","edb1d2d5":"markdown","d6dea06a":"markdown","fed3bde1":"markdown","7bd81963":"markdown","eb46e4ea":"markdown","156853eb":"markdown","6babad43":"markdown","0ca505be":"markdown","c138d787":"markdown","9fcde442":"markdown","fd146506":"markdown","03c99b22":"markdown","f3be26fa":"markdown","ec2798eb":"markdown","a38c2e27":"markdown","31ac9c66":"markdown"},"source":{"ea988218":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db9743b9":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import OneHotEncoder","d4a109eb":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","140df63b":"train.head()","db659695":"train.info()","c0b4684f":"train.columns[train.dtypes == 'object']","a0cec05c":"train.columns[train.dtypes == 'object'].size","6ae3b567":"X = train.copy()","007ff56e":"X.loc[X['LotFrontage'].isnull(), 'LotFrontage'] = 0","68caf2e4":"X.loc[X['Alley'].isnull(), 'Alley'] = 'no_alley'","e883bb95":"X.loc[X['MasVnrType'].isnull(), 'MasVnrType'] = 'None'\nX.loc[X['MasVnrArea'].isnull(), 'MasVnrArea'] = 0","35a610f9":"X.loc[X['BsmtQual'].isnull(), 'BsmtQual'] = 'no_basement'\nX.loc[X['BsmtCond'].isnull(), 'BsmtCond'] = 'no_basement'\nX.loc[X['BsmtExposure'].isnull(), 'BsmtExposure'] = 'no_basement'\nX.loc[X['BsmtFinType1'].isnull(), 'BsmtFinType1'] = 'no_basement'\nX.loc[X['BsmtFinType2'].isnull(), 'BsmtFinType2'] = 'no_basement'","a0e038e8":"X.loc[X['Electrical'].isnull(), 'Electrical'] = X['Electrical'].mode()[0]","1620a477":"X.loc[X['FireplaceQu'].isnull(), 'FireplaceQu'] = 'no_fireplace'","a94246d3":"X.loc[X['GarageType'].isnull(), 'GarageType'] = 'no_garage'\nX.loc[X['GarageYrBlt'].isnull(), 'GarageYrBlt'] = 0\nX.loc[X['GarageFinish'].isnull(), 'GarageFinish'] = 'no_garage'\nX.loc[X['GarageQual'].isnull(), 'GarageQual'] = 'no_garage'\nX.loc[X['GarageCond'].isnull(), 'GarageCond'] = 'no_garage'","7592a036":"X.loc[X['PoolQC'].isnull(), 'PoolQC'] = 'no_pool'","bdf922a8":"X.loc[X['Fence'].isnull(), 'Fence'] = 'no_fence'","5f029cca":"X.loc[X['MiscFeature'].isnull(), 'MiscFeature'] = 'none'","ca8bab40":"X.columns[X.isnull().any()]","b1466385":"X['MSSubClass'] = X['MSSubClass'].astype(str)\n","d48ee12b":"X_no_cat, y = X.loc[:, X.dtypes != 'object'].drop('SalePrice', axis=1), X['SalePrice']","8e936a2f":"X_no_cat_part, X_no_cat_valid, y_train_part, y_valid = train_test_split(\n    X_no_cat, y, test_size=0.3, random_state=2112)","bc806717":"forest = RandomForestRegressor(random_state=2112)","03962754":"np.mean(cross_val_score(forest, X_no_cat_part, y_train_part, \n                        cv=5, scoring='neg_root_mean_squared_error'))","dce8dfab":"forest.fit(X_no_cat_part, y_train_part)","2f670e8f":"np.sqrt(mean_squared_error(y_valid, forest.predict(X_no_cat_valid)))","c54dd336":"np.sqrt(mean_squared_log_error(y_valid, forest.predict(X_no_cat_valid)))","100cd68f":"from sklearn.preprocessing import LabelEncoder","79c85fe7":"label_encoder = LabelEncoder()","150b9e7e":"X_cat_label_enc = X.copy().drop('SalePrice', axis=1)","fc2762aa":"for col in X.columns[X.dtypes == 'object']:\n    X_cat_label_enc[col] = label_encoder.fit_transform(X_cat_label_enc[col])","8f81d692":"X_cat_label_enc.shape","ae52c795":"X_cat_label_enc_part, X_cat_label_enc_valid = train_test_split(X_cat_label_enc,\n                                                              test_size=0.3, random_state=2112)","20a15a14":"np.mean(cross_val_score(\n    forest, X_cat_label_enc_part, y_train_part, cv=5, scoring='neg_root_mean_squared_error'))","cd129b77":"np.sqrt(abs(np.mean(cross_val_score(\n    forest, X_cat_label_enc_part, y_train_part, cv=5, scoring='neg_mean_squared_log_error'))))","25e9134c":"forest.fit(X_cat_label_enc_part, y_train_part)","8c7284f4":"np.sqrt(mean_squared_error(y_valid, forest.predict(X_cat_label_enc_valid)))","184e5ca1":"np.sqrt(mean_squared_log_error(y_valid, forest.predict(X_cat_label_enc_valid)))","73e0eb40":"X['OverallQual'] = X['OverallQual'].astype(str)\nX['OverallCond'] = X['OverallCond'].astype(str)","676e6e04":"X_cat_dummies = pd.get_dummies(X, columns=X.columns[X.dtypes == 'object']).drop(\n    'SalePrice', axis=1)","75ad645b":"X_cat_dummies.shape","2de781c8":"X_cat_dummies_part, X_cat_dummies_valid = train_test_split(X_cat_dummies, \n                                                           test_size=0.3, random_state=2112)","cb9a6884":"np.mean(\n    cross_val_score(\n        forest, X_cat_dummies_part, y_train_part, cv=5, scoring='neg_root_mean_squared_error'))","30a79ff0":"forest.fit(X_cat_dummies_part, y_train_part)","33185cfd":"np.sqrt(mean_squared_error(y_valid, forest.predict(X_cat_dummies_valid)))","6ee4621b":"np.sqrt(mean_squared_log_error(y_valid, forest.predict(X_cat_dummies_valid)))","b1621072":"X_interact = X.copy()","dc9b6189":"cat_features = X.columns[X.dtypes == 'object']\nfor i, col1 in enumerate(cat_features):\n    for j, col2 in enumerate(cat_features[i + 1 :]):\n        X_interact[col1 + '_' + col2] = X_interact[col1] + '_' + X_interact[col2]","12f9e289":"X_interact.shape","14fafbd3":"X_interact.head()","80b8366f":"X_interact_cat_dummies = pd.get_dummies(X_interact, \n                                        columns=X_interact.columns[X_interact.dtypes == 'object']).drop('SalePrice', axis=1)","39fa0513":"X_interact_cat_dummies.shape","11c7c63c":"X_interact_cat_dummies_part, X_interact_cat_dummies_valid = train_test_split(\n    X_interact_cat_dummies, test_size=0.3, random_state=2112)","79385c91":"np.mean(\n    cross_val_score(forest, X_interact_cat_dummies_part, y_train_part, \n                    cv=5, scoring='neg_root_mean_squared_error', verbose=True, n_jobs=-1))","37c78488":"%%time\nforest.fit(X_interact_cat_dummies_part, y_train_part)","88c1b023":"np.sqrt(mean_squared_error(y_valid, forest.predict(X_interact_cat_dummies_valid)))","ea60bef3":"reg = LinearRegression()","beb22450":"np.mean(cross_val_score(reg, X_interact_cat_dummies_part, y_train_part, \n                        cv=5, scoring='neg_root_mean_squared_error'))","7d07842c":"%%time\nreg.fit(X_interact_cat_dummies_part, y_train_part)","73bfdd90":"np.sqrt(mean_squared_error(y_valid, reg.predict(X_interact_cat_dummies_valid)))","156a88e4":"from catboost import CatBoostRegressor","9498248f":"ctb = CatBoostRegressor(random_seed=2112)","b445fabb":"train_X, y = X.drop('SalePrice', axis=1), X['SalePrice']","acbd6acb":"train_X_part, valid_X, y_train_part, y_valid = train_test_split(\n    train_X, y, test_size=0.3, random_state=2112)","81ed2fb8":"cat_features_idx = np.where(train_X_part.dtypes == 'object')[0].tolist()","b09fd066":"%%time\nctb.fit(train_X_part, y_train_part, cat_features=cat_features_idx);","f2296416":"np.sqrt(mean_squared_error(y_valid, ctb.predict(valid_X)))","dc7b2d1f":"np.sqrt(mean_squared_log_error(y_valid, ctb.predict(valid_X)))","55cfba6f":"test.info()","a616f176":"test.columns[test.isnull().any()]","4a8fcca5":"# MSZoning\ntest.loc[test['MSZoning'].isnull(), 'MSZoning'] = 'RL'","2ad494b6":"test.loc[test['LotFrontage'].isnull(), 'LotFrontage'] = 0","51da3242":"test.loc[test['Alley'].isnull(), 'Alley'] = 'no_alley'","93238140":"# Utilities\ntest.loc[test['Utilities'].isnull(), 'Utilities'] = 'AllPub'","16375ea3":"# Exterior1st\n# Exterior2nd\ntest.loc[test['Exterior1st'].isnull(), 'Exterior1st'] = 'MetalSd'\ntest.loc[test['Exterior2nd'].isnull(), 'Exterior2nd'] = 'Wd Sdng'","05e05404":"test.loc[test['MasVnrType'].isnull(), 'MasVnrType'] = 'None'\ntest.loc[test['MasVnrArea'].isnull(), 'MasVnrArea'] = 0","c359dc9c":"test.loc[test['BsmtQual'].isnull(), 'BsmtQual'] = 'no_basement'\ntest.loc[test['BsmtCond'].isnull(), 'BsmtCond'] = 'no_basement'\ntest.loc[test['BsmtExposure'].isnull(), 'BsmtExposure'] = 'no_basement'\ntest.loc[test['BsmtFinType1'].isnull(), 'BsmtFinType1'] = 'no_basement'\ntest.loc[test['BsmtFinSF1'].isnull(), 'BsmtFinSF1'] = 0\ntest.loc[test['BsmtFinType2'].isnull(), 'BsmtFinType2'] = 'no_basement'\ntest.loc[test['BsmtFinSF2'].isnull(), 'BsmtFinSF2'] = 0\ntest.loc[test['BsmtUnfSF'].isnull(), 'BsmtUnfSF'] = 0\ntest.loc[test['TotalBsmtSF'].isnull(), 'TotalBsmtSF'] = 0\ntest.loc[test['BsmtFullBath'].isnull(), 'BsmtFullBath'] = 0\ntest.loc[test['BsmtHalfBath'].isnull(), 'BsmtHalfBath'] = 0","5f4e895d":"# KitchenQual\ntest.loc[test['KitchenQual'].isnull(), 'KitchenQual'] = test[test['OverallQual'] == 5]['KitchenQual'].mode()[0]","07a01069":"# Functional\ntest.loc[test['Functional'].isnull(), 'Functional'] = 'Mod'","632f1724":"test.loc[test['FireplaceQu'].isnull(), 'FireplaceQu'] = 'no_fireplace'","358cafd3":"test.loc[test['GarageType'].isnull(), 'GarageType'] = 'no_garage'\ntest.loc[test['GarageYrBlt'].isnull(), 'GarageYrBlt'] = 0\ntest.loc[test['GarageFinish'].isnull(), 'GarageFinish'] = 'no_garage'\ntest.loc[test['GarageCars'].isnull(), 'GarageCars'] = 0\ntest.loc[test['GarageArea'].isnull(), 'GarageArea'] = 0\ntest.loc[test['GarageQual'].isnull(), 'GarageQual'] = 'no_garage'\ntest.loc[test['GarageCond'].isnull(), 'GarageCond'] = 'no_garage'","142efb0f":"test.loc[test['PoolQC'].isnull(), 'PoolQC'] = 'no_pool'","3222b333":"test.loc[test['Fence'].isnull(), 'Fence'] = 'no_fence'","b62ea7b8":"test.loc[test['MiscFeature'].isnull(), 'MiscFeature'] = 'none'","b5df7867":"# SaleType\ntest.loc[test['SaleType'].isnull(), 'SaleType'] = 'Oth'","253c3d32":"test['MSSubClass'] = test['MSSubClass'].astype(str)\ntest['OverallQual'] = test['OverallQual'].astype(str)\ntest['OverallCond'] = test['OverallCond'].astype(str)","eb6b14b4":"test.shape","e4c6a0d2":"test_cat_dummies = pd.get_dummies(test, columns=test.columns[test.dtypes == 'object'])","57295fc0":"test_cat_dummies.shape","13077af4":"X_num = X.loc[:, X.dtypes != 'object'].drop('SalePrice', axis=1)\nX_cat = X.loc[:, X.dtypes == 'object']","aa8b58ed":"X_num.shape, X_cat.shape","99982f6b":"ohe = OneHotEncoder(sparse=False, handle_unknown='ignore')","0c576e32":"ohe.fit_transform(X_cat[cat_features])\ncat_features = X_cat.columns[X_cat.dtypes == 'object'].tolist()\ncolumn_name = ohe.get_feature_names(cat_features)\nX_cat_ohe = pd.DataFrame(ohe.fit_transform(X_cat[cat_features]), columns=column_name)\nX_ohe = pd.concat([X_num, X_cat_ohe], axis=1)","4f899453":"test_num = test.loc[:, test.dtypes != 'object']\ntest_cat = test.loc[:, test.dtypes == 'object']","bc59bcc4":"test_num.shape, test_cat.shape","176ae037":"ohe.transform(test[cat_features])\ntest_cat_ohe = pd.DataFrame(ohe.transform(test[cat_features]), columns=column_name)\ntest_ohe = pd.concat([test_num, test_cat_ohe], axis=1)","28682528":"X_ohe.shape, test_ohe.shape","f3315f2e":"forest.fit(X_ohe, y)","86004d54":"output = pd.DataFrame()\noutput['Id'] = test['Id']\noutput['SalePrice'] = forest.predict(test_ohe)\noutput.to_csv('output_forest.csv',index=False)","234eb8b5":"from catboost import CatBoostRegressor","0427a4bf":"ctb = CatBoostRegressor(random_seed=17)\ntrain_x, train_y = X.drop('SalePrice', axis=1), X['SalePrice']\ncat_features_idx = np.where(train_x.dtypes == \"object\")[0].tolist()\nctb.fit(train_x, train_y, cat_features=cat_features_idx)\ny_sub = ctb.predict(test)","479b398b":"output = pd.DataFrame()\noutput['Id'] = test['Id']\noutput['SalePrice'] = y_sub\noutput.to_csv('output_cb.csv',index=False)","93b0678b":"## Without categorical features","f32042ab":"## Pairwise interactions of features","ec3aa635":"predicting the result from the test data using a random forest or catboost","1d3dd215":"For each value of each categorical feature we will have its own binary feature.","edb1d2d5":"### Catboost","d6dea06a":"There are 24922 binary signs. That's a lot for such a task, and the random forest starts to take a long time and show worse results\nLet's look at the results of linear regression","fed3bde1":"A total of 43 attributes with string values.","7bd81963":"### LinearRegression","eb46e4ea":"We count the data and look at the first few lines. We see that we have many categorical features.","156853eb":"linear regression works much faster, but the results leave much to be desired","6babad43":"Since the training and test data have a different number of features(334 \/ 317), it is not possible to use them in the models. We use OneHotEncoder instead of pd.get_dummies() for training","0ca505be":"Fill in the missing values in the training data","c138d787":"## Binarization of categorical features (dummies, OHE)","9fcde442":"Let's first try to simply ignore the categorical features. Train a random forest and look at the mean_squared_error on the cross-validation and on the sampling. This will be our baseline.","fd146506":"Since the results have worsened, we will use OHE to prepare the data for the final prediction, we will also try Catboost","03c99b22":"## LabelEncoder for categorical features","f3be26fa":"## Final Submission","ec2798eb":"## Binarization of categorical features (dummies, OHE) + pairwise interactions","a38c2e27":"### Preparing test data","31ac9c66":"The Catboost library implements the technique of encoding categorical values with the average value of the target feature. The results are good when there are many important categorical features in the data."}}