{"cell_type":{"2941088b":"code","c35340a8":"code","4ec8d2dc":"code","e08131a8":"code","346a74af":"code","cfc1419d":"code","f21448a1":"code","34fe56b0":"code","a6fc0134":"code","a1b6deed":"code","f1658669":"code","67371f64":"code","bc805ece":"code","c03e3db5":"code","427e0a5a":"code","d088bf0f":"code","6ceea585":"code","de08ce5c":"code","ec9a4ade":"code","9dc0d4c6":"code","a721d927":"code","4145f5c6":"code","cc4015c1":"code","d79e93d4":"markdown","d05ad143":"markdown","40359029":"markdown","dd8fcbb9":"markdown","7902dcc9":"markdown","169f9ee0":"markdown","24c02d3d":"markdown","31b5912d":"markdown","1f5166cd":"markdown"},"source":{"2941088b":"%matplotlib inline\nimport os\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom datetime import date, timedelta","c35340a8":"class MetaData():\n    def __init__(self, path='..\/input'):\n        self.path = path\n\n    def Competitions(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Competitions.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'CompetitionId'})\n\n    def CompetitionTags(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'CompetitionTags.csv'), nrows=nrows)\n\n    def Datasets(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Datasets.csv'), nrows=nrows)\n\n    def DatasetTags(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'DatasetTags.csv'), nrows=nrows)\n\n    def DatasetVersions(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'DatasetVersions.csv'), nrows=nrows)\n\n    def DatasetVotes(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'DatasetVotes.csv'), nrows=nrows)\n\n    def DatasourceObjects(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'DatasourceObjects.csv'), nrows=nrows)\n\n    def Datasources(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Datasources.csv'), nrows=nrows)\n\n    def DatasourceVersionObjectTables(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'DatasourceVersionObjectTables.csv'), nrows=nrows)\n\n    def ForumMessages(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumMessages.csv'), nrows=nrows)\n        df['PostDate'] = pd.to_datetime(df['PostDate'])\n        df['PostWeek'] = [date_to_first_day_of_week(pd.Timestamp(d).date()) for d in df.PostDate]\n        return df.rename(columns={'Id': 'ForumMessageId'})\n\n    def ForumMessageVotes(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumMessageVotes.csv'), nrows=nrows)\n        df['VoteDate'] = pd.to_datetime(df['VoteDate'])\n        df['VoteWeek'] = [date_to_first_day_of_week(pd.Timestamp(d).date()) for d in df.VoteDate]\n        return df\n\n    def Forums(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Forums.csv'), nrows=nrows).rename(columns={'Id': 'ForumId'})\n\n    def ForumTopics(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'ForumTopics.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'ForumTopicId'})\n\n    def KernelLanguages(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'KernelLanguages.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'KernelLanguageId', 'DisplayName': 'KernelLanguageName'})\n\n    def Kernels(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Kernels.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'KernelId'})\n\n    def KernelTags(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'KernelTags.csv'), nrows=nrows)\n\n    def KernelVersionCompetitionSources(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'KernelVersionCompetitionSources.csv'), nrows=nrows)\n\n    def KernelVersionDatasetSources(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'KernelVersionDatasetSources.csv'), nrows=nrows)\n\n    def KernelVersionKernelSources(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'KernelVersionKernelSources.csv'), nrows=nrows)\n\n    def KernelVersionOutputFiles(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'KernelVersionOutputFiles.csv'), nrows=nrows)\n\n    def KernelVersions(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'KernelVersions.csv'), nrows=nrows)\n        df['CreationDate'] = pd.to_datetime(df['CreationDate'])\n        df['CreationWeek'] = [date_to_first_day_of_week(pd.Timestamp(d).date()) for d in df.CreationDate]\n        return df.rename(columns={'Id': 'KernelVersionId'})\n\n    def KernelVotes(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'KernelVotes.csv'), nrows=nrows)\n        df['VoteDate'] = pd.to_datetime(df['VoteDate'])\n        df['VoteWeek'] = [date_to_first_day_of_week(pd.Timestamp(d).date()) for d in df.VoteDate]\n        return df\n\n    def Medals(self):\n        df = pd.DataFrame([\n            [1, 'Gold', '#FFCE3F', '#A46A15'],\n            [2, 'Silver', '#E6E6E6', '#787775'],\n            [3, 'Bronze', '#EEB171', '#835036'],\n        ], columns=['Medal', 'MedalName', 'MedalBody', 'MedalBorder'])\n        return df\n\n    def Organizations(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Organizations.csv'), nrows=nrows)\n\n    def Submissions(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Submissions.csv'), nrows=nrows,\n                         usecols=['SubmittedUserId', 'TeamId', 'SubmissionDate'])\n        df['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\n        df['SubmissionWeek'] = [date_to_first_day_of_week(pd.Timestamp(d).date()) for d in df.SubmissionDate]\n        return df\n\n    def Tags(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'Tags.csv'), nrows=nrows)\n\n    def TeamMemberships(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'TeamMemberships.csv'), nrows=nrows)\n\n    def Teams(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Teams.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'TeamId'})\n\n    def UserAchievements(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'UserAchievements.csv'), nrows=nrows)\n\n    def UserFollowers(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'UserFollowers.csv'), nrows=nrows)\n\n    def UserOrganizations(self, nrows=None):\n        return pd.read_csv(os.path.join(self.path, 'UserOrganizations.csv'), nrows=nrows)\n\n    def Users(self, nrows=None):\n        df = pd.read_csv(os.path.join(self.path, 'Users.csv'), nrows=nrows)\n        return df.rename(columns={'Id': 'UserId'})\n\n    def PerformanceTiers(self):\n        df = pd.DataFrame([\n            [0, 'Novice', '#5ac995'],\n            [1, 'Contributor', '#00BBFF'],\n            [2, 'Expert', '#95628f'],\n            [3, 'Master', '#f96517'],\n            [4, 'GrandMaster', '#dca917'],\n            [5, 'KaggleTeam', '#008abb'],\n        ], columns=['PerformanceTier', 'PerformanceTierName', 'PerformanceTierColor'])\n        return df\n\n    def get_weekly_forum_votes(self):\n        fmv = self.ForumMessageVotes()\n        fm = self.ForumMessages()\n        ft = self.ForumTopics()\n        f = self.Forums()\n        fmv['cnt'] = 1\n        weekly_message_votes = fmv.groupby(['ForumMessageId', 'VoteWeek'])[['cnt']].sum().reset_index()\n        weekly_message_votes = weekly_message_votes.merge(fm[['ForumMessageId', 'ForumTopicId', 'Message']],\n                                                          on='ForumMessageId')\n        weekly_message_votes = weekly_message_votes.merge(ft[['ForumTopicId', 'ForumId', 'Title']], on='ForumTopicId')\n        weekly_message_votes = weekly_message_votes.merge(f[['ForumId', 'Title']], on='ForumId',\n                                                          suffixes=['Topic', 'Forum'])\n        return weekly_message_votes\n\n    def get_weekly_kernel_version_votes(self):\n        kernel_votes = self.KernelVotes()\n        kernel_versions = self.KernelVersions()\n        kernels = self.Kernels()\n        kernel_votes['cnt'] = 1\n        weekly_kernel_votes = kernel_votes.groupby(['KernelVersionId', 'VoteWeek'])[['cnt']].sum().reset_index()\n        weekly_kernel_votes = weekly_kernel_votes.merge(kernel_versions[['KernelVersionId', 'KernelId']],\n                                                        on='KernelVersionId')\n        weekly_kernel_votes = weekly_kernel_votes.merge(kernels[['KernelId', 'CurrentKernelVersionId']],\n                                                        on='KernelId')\n        weekly_kernel_votes = weekly_kernel_votes.merge(\n            kernel_versions[['KernelVersionId', 'KernelLanguageId', 'AuthorUserId', 'Title']],\n            left_on='CurrentKernelVersionId', right_on='KernelVersionId')\n        return weekly_kernel_votes\n\n    def get_kernel_vote_info(self):\n        kernel_votes = self.KernelVotes()\n        kernel_versions = self.KernelVersions()\n        kernels = self.Kernels()[[\n            'KernelId', 'CurrentKernelVersionId', 'AuthorUserId', 'Medal', 'CurrentUrlSlug', 'TotalVotes']]\n        users = self.Users()[['UserId', 'PerformanceTier', 'DisplayName']]\n\n        df = pd.merge(kernel_votes, users, on='UserId')\n        df = df.merge(kernel_versions[['KernelVersionId', 'KernelId']], on='KernelVersionId')\n        df = df.merge(kernels, on='KernelId')\n        df = df.merge(kernel_versions[['KernelVersionId', 'KernelLanguageId', 'Title']],\n                      left_on='CurrentKernelVersionId', right_on='KernelVersionId')\n        df = df.drop(['KernelVersionId_x', 'CurrentKernelVersionId', 'KernelVersionId_y'], axis=1)\n        df = df.merge(users, left_on='AuthorUserId', right_on='UserId', suffixes=['Voter', 'Author'])\n        df = df.drop(['AuthorUserId', 'Id'], axis=1)\n        df = df[df.UserIdVoter != df.UserIdAuthor]\n        return df\n\n\ndef date_to_first_day_of_week(day: date) -> date:\n    return day - timedelta(days=day.weekday())\n","4ec8d2dc":"start = dt.datetime.now()\n!cp ..\/input\/metacover\/MetaCoverV1.png .\n\nSTART_DATE = dt.date(2016, 1, 1)\nmd = MetaData('..\/input\/meta-kaggle')","e08131a8":"user_achievements = md.UserAchievements()\ntiers = md.PerformanceTiers()\ntier_sizes = user_achievements.groupby(['AchievementType', 'Tier'])[['Id']].count().reset_index()\ntier_sizes = tier_sizes.merge(tiers, left_on='Tier', right_on='PerformanceTier')\ntier_sizes['AchievementType'] = tier_sizes['AchievementType'].replace('Scripts', 'Kernels')\ntier_sizes = tier_sizes.sort_values(by=['AchievementType', 'PerformanceTier'])\ntier_sizes = tier_sizes[tier_sizes.PerformanceTier > 1]\n\ngrandmasters = user_achievements[user_achievements.Tier == 4]\ngrandmasters = grandmasters.merge(md.Users(), on='UserId').sort_values(by='AchievementType', ascending=False)\ngrandmasters[['AchievementType', 'TierAchievementDate', 'UserName', 'DisplayName', 'PerformanceTier']].head(20)","346a74af":"data = [\n    go.Bar(x=tier_sizes[tier_sizes['PerformanceTierName'] == tier_name].AchievementType.values,\n           y=tier_sizes[tier_sizes['PerformanceTierName'] == tier_name].Id.values,\n           marker=dict(color=tier_color),\n           name=tier_name)\n    for tier, tier_name, tier_color in tiers.values[:5]\n]\nlayout = go.Layout(\n    barmode='stack',\n    title='Kaggle Performance Tiers',\n    xaxis=dict(title='Achievement Type', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of users', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='TierSize')","cfc1419d":"weekly_kernel_version_votes = md.get_weekly_kernel_version_votes()\nweekly_kernel_version_votes = weekly_kernel_version_votes[weekly_kernel_version_votes['VoteWeek'] >= START_DATE]\nweekly_kernel_version_votes.shape\nweekly_kernel_version_votes.head()\n\nweekly_forum_votes = md.get_weekly_forum_votes()\nweekly_forum_votes = weekly_forum_votes[weekly_forum_votes['VoteWeek'] >= START_DATE]\nweekly_forum_votes = weekly_forum_votes.sort_values(by='cnt', ascending=False)\nweekly_forum_votes.head()\n\nweekly_total_forum_votes = weekly_forum_votes.groupby('VoteWeek')[['cnt']].sum().reset_index()\nweekly_total_kernel_votes = weekly_kernel_version_votes.groupby('VoteWeek')[['cnt']].sum().reset_index()","f21448a1":"data = [\n    go.Scatter(\n        x=weekly_total_forum_votes.VoteWeek.values,\n        y=weekly_total_forum_votes.cnt.values,\n        mode='lines',\n        name='Discussion',\n        line=dict(width=4, color='#5ac995')\n    ),\n    go.Scatter(\n        x=weekly_total_kernel_votes.VoteWeek.values,\n        y=weekly_total_kernel_votes.cnt.values,\n        mode='lines',\n        name='Kernel',\n        line=dict(width=4, color='#007FB4')\n    ),\n]\nlayout = go.Layout(\n    title='Kernels are getting more popular',\n    xaxis=dict(title='WeekStart', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (weekly)', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='users')","34fe56b0":"kernel_versions = md.KernelVersions()\nforum_messages = md.ForumMessages()\nsubmissions = md.Submissions()\n\nweekly_submitting_users = submissions.groupby('SubmissionWeek')[['SubmittedUserId']].nunique().reset_index()\nweekly_submitting_users = weekly_submitting_users[weekly_submitting_users['SubmissionWeek'] > START_DATE]\nweekly_kerneling_users = kernel_versions.groupby('CreationWeek')[['AuthorUserId']].nunique().reset_index()\nweekly_kerneling_users = weekly_kerneling_users[weekly_kerneling_users['CreationWeek'] > START_DATE]\nweekly_discussing_users = forum_messages.groupby('PostWeek')[['PostUserId']].nunique().reset_index()\nweekly_discussing_users = weekly_discussing_users[weekly_discussing_users['PostWeek'] > START_DATE]","a6fc0134":"data = [\n    go.Scatter(\n        x=weekly_submitting_users.SubmissionWeek.values,\n        y=weekly_submitting_users.SubmittedUserId.values,\n        mode='lines',\n        name='Competition',\n        line=dict(width=4, color='#3E4044')\n    ),\n    go.Scatter(\n        x=weekly_discussing_users.PostWeek.values,\n        y=weekly_discussing_users.PostUserId.values,\n        mode='lines',\n        name='Discussion',\n        line=dict(width=4, color='#5ac995')\n    ),\n    go.Scatter(\n        x=weekly_kerneling_users.CreationWeek.values,\n        y=weekly_kerneling_users.AuthorUserId.values,\n        mode='lines',\n        name='Kernel',\n        line=dict(width=4, color='#007FB4')\n    ),\n]\nlayout = go.Layout(\n    title='Weekly Active Users',\n    xaxis=dict(title='WeekStart', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of users (weekly)', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='weekly_users')","a1b6deed":"weekly_topic_votes = weekly_forum_votes.groupby(['VoteWeek', 'ForumTopicId', 'TitleTopic', 'TitleForum'])[['cnt']].sum()\nweekly_topic_votes = weekly_topic_votes.reset_index()\nweekly_topic_votes['TopicRank'] = weekly_topic_votes.groupby('VoteWeek')['cnt'].rank(ascending=False, method='first')\nweekly_topic_votes = weekly_topic_votes.sort_values(by='cnt', ascending=False)\n\nweekly_topic_votes.cnt.sum()\nweekly_topic_votes.head()\nweekly_topic_votes.shape\n\nweekly_top_topics = weekly_topic_votes[weekly_topic_votes.TopicRank == 1]\nweekly_top_topics = weekly_top_topics.sort_values(by='VoteWeek', ascending=False)\nweekly_top_topics.head()\nweekly_top_topics.cnt.sum()\nweekly_top_topics.shape\n\nweekly_top_topics['Title'] = weekly_top_topics['TitleTopic'] + ' - ' +  weekly_top_topics['TitleForum']","f1658669":"data = [\n    go.Scatter(\n        y=weekly_top_topics['cnt'].values,\n        x=weekly_top_topics['VoteWeek'].values,\n        mode='markers',\n        marker=dict(sizemode='diameter',\n                    sizeref=1,\n                    size=np.sqrt(weekly_top_topics['cnt'].values),\n                    color=weekly_top_topics['cnt'].values,\n                    colorscale='Viridis',\n                    showscale=True\n                    ),\n        text=weekly_top_topics.Title.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Weekly hottest forum topics',\n    hovermode='closest',\n    xaxis=dict(title='WeekStart', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (weekly)', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='WeeklyTopTopics')","67371f64":"weekly_kernel_votes = weekly_kernel_version_votes.groupby([\n    'VoteWeek', 'KernelId', 'KernelLanguageId', 'AuthorUserId', 'Title'\n])[['cnt']].sum().reset_index()\nweekly_kernel_votes['KernelRank'] = weekly_kernel_votes.groupby('VoteWeek')['cnt'].rank(ascending=False, method='first')\nweekly_kernel_votes = weekly_kernel_votes.sort_values(by='cnt', ascending=False)\n\nweekly_kernel_version_votes.shape\nweekly_kernel_version_votes.head()\nweekly_kernel_votes.shape\nweekly_kernel_votes.head()\n\nweekly_kernel_votes = weekly_kernel_votes.merge(md.Users()[['UserId', 'UserName', 'DisplayName']], left_on='AuthorUserId', right_on='UserId')\nweekly_kernel_votes['AuthorTitle'] = weekly_kernel_votes['DisplayName'] + ' - ' + weekly_kernel_votes['Title']\n\nweekly_top_kernels = weekly_kernel_votes[weekly_kernel_votes.KernelRank == 1]\nweekly_top_kernels = weekly_top_kernels.merge(md.KernelLanguages(), on='KernelLanguageId')\nweekly_top_kernels = weekly_top_kernels.sort_values(by='VoteWeek', ascending=False)\nweekly_top_kernels.head()\nweekly_top_kernels.cnt.sum()\nweekly_top_kernels.shape","bc805ece":"data = []\nfor language, language_color in [('Python', '#5ac995'), ('R', '#007FB4')]:\n    df = weekly_top_kernels[weekly_top_kernels['KernelLanguageName'] == language]\n    data.append(\n        go.Scatter(y=df['cnt'].values, x=df['VoteWeek'].values, mode='markers',\n                   marker=dict(sizemode='diameter',\n                               sizeref=0.7,\n                               size=np.sqrt(df['cnt'].values),\n                               color=language_color),\n                   text=df.AuthorTitle.values,\n                   name=language)\n    )\nlayout = go.Layout(\n    autosize=True,\n    title='Weekly hottest kernels',\n    hovermode='closest',\n    xaxis=dict(title='WeekStart', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (weekly)', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='WeeklyTopKernels')","c03e3db5":"kernel_info = md.get_kernel_vote_info()\n\nkernel_info['cnt'] = 1\nkernel_info.shape\nkernel_info.head(3)\n\ntop_kernels = kernel_info.groupby([\n    'KernelId', 'CurrentUrlSlug', 'Title', 'DisplayNameAuthor'])[['cnt']].sum()\ntop_kernels = top_kernels.sort_values(by='cnt', ascending=False).reset_index()\ntop_kernels['KernelRank'] = np.arange(len(top_kernels)) + 1\n\nkernels_tier_vote = kernel_info.groupby(['KernelId', 'PerformanceTierVoter'])[['cnt']].sum()\nkernels_tier_vote = kernels_tier_vote.reset_index().pivot('KernelId', 'PerformanceTierVoter', 'cnt')\nkernels_tier_vote = kernels_tier_vote.fillna(0).reset_index()\n\ntop_kernels = top_kernels.merge(kernels_tier_vote, on='KernelId')\ntop_kernels['AuthorTitle'] = top_kernels['DisplayNameAuthor'] + ' - ' + top_kernels['Title']\ntop_kernels.head()\n\ntier_votes = kernel_info.groupby('PerformanceTierVoter')[['cnt']].count().reset_index()\ntier_votes = tier_votes.merge(md.PerformanceTiers(), left_on='PerformanceTierVoter', right_on='PerformanceTier')\ntier_votes","427e0a5a":"top_k_kernels = top_kernels[:50]\ndata = [\n    go.Bar(x=[cnt],\n           y=[1],\n           marker=dict(color=tier_color),\n           name=tier_name,\n           orientation='h'\n           )\n    for tier_name, cnt, tier_color in tier_votes[['PerformanceTierName', 'cnt', 'PerformanceTierColor']].values\n]\nlayout = go.Layout(\n    barmode='stack',\n    height=300,\n    title='Votes by voter tier',\n    xaxis=dict(title='Votes', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(showgrid=False, zeroline=False, showline=False, showticklabels=False),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='VoterTierVotes')","d088bf0f":"top_k_kernels = top_kernels[:50]\ndata = [\n    go.Bar(\n        y=top_k_kernels['cnt'].values,\n        x=top_k_kernels['KernelRank'].values,\n        marker=dict(\n            color=top_k_kernels['cnt'].values,\n            colorscale='Viridis',\n            showscale=True\n        ),\n        text=top_k_kernels.AuthorTitle.values,\n    )\n]\nlayout = go.Layout(\n    autosize=True,\n    title='Alltime hottest kernels',\n    hovermode='closest',\n    xaxis=dict(title='Rank', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (all time)', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='AlltimeHottestKernels')","6ceea585":"kernel_points = kernel_info[kernel_info.PerformanceTierVoter > 0]\nkernel_points.shape\nkernel_points.head()\n\ntop_authors = kernel_points.groupby([\n    'UserIdAuthor', 'PerformanceTierAuthor', 'DisplayNameAuthor'])[['cnt']].sum()\ntop_authors = top_authors.sort_values(by='cnt', ascending=False).reset_index()\ntop_authors['AuthorRank'] = np.arange(len(top_authors)) + 1\ntop_authors = top_authors.merge(tiers, left_on='PerformanceTierAuthor', right_on='PerformanceTier')\ntop_authors = top_authors.sort_values(by='cnt', ascending=False).reset_index()\n\ntop_authors.head(3)","de08ce5c":"top_k_authors = top_authors[:30]\ndata = [\n    go.Bar(\n        y=top_k_authors['DisplayNameAuthor'].values,\n        x=top_k_authors['cnt'].values,\n        marker=dict(color=top_k_authors['PerformanceTierColor'].values),\n        orientation='h',\n        text=top_k_authors.DisplayNameAuthor.values,\n    )\n]\nlayout = go.Layout(\n    height=700,\n    autosize=True,\n    title='Alltime top authors',\n    hovermode='closest',\n    xaxis=dict(title='Votes', ticklen=5, zeroline=False, gridwidth=2, domain=[0.1, 1]),\n    yaxis=dict(title='', ticklen=5, gridwidth=2),\n    showlegend=False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='AlltimeTopAuthors')","ec9a4ade":"top_k_authors = top_authors[top_authors.PerformanceTierAuthor < 5]\ntop_k_authors = top_k_authors[:10]\ntop_author_points = kernel_points[kernel_points.UserIdAuthor.isin(top_k_authors.UserIdAuthor)]\ntop_author_points = top_author_points[['cnt', 'VoteDate', 'UserIdAuthor', 'PerformanceTierAuthor', 'DisplayNameAuthor']]\ntop_author_points['one'] = 1\n\ntop_author_points.shape\ntop_author_points.head()\n\nvote_dates = top_author_points[['VoteDate']].drop_duplicates()\nvote_dates['one'] = 1\nvote_dates = vote_dates[vote_dates['VoteDate'] > dt.datetime(2017, 1, 1)]\ncross_joined_points = pd.merge(top_author_points, vote_dates, on='one', suffixes=['Past', ''])\ncross_joined_points = cross_joined_points[cross_joined_points['VoteDatePast'] <= cross_joined_points['VoteDate']]\n\ncross_joined_points.shape\ncross_joined_points.head()\n\ncumulative_points = cross_joined_points.groupby(['DisplayNameAuthor', 'VoteDate'])[['one']].sum()\ncumulative_points = cumulative_points.reset_index().pivot('VoteDate','DisplayNameAuthor','one').fillna(0)\n\ncumulative_points.head()\ncumulative_points.shape\ncumulative_points.columns","9dc0d4c6":"data = [\n    go.Scatter(\n        x=cumulative_points.index,\n        y=cumulative_points[name].values,\n        mode='lines',\n        name=name,\n        line=dict(width=4)\n    ) for name in cumulative_points.columns\n]\nlayout = go.Layout(\n    title='Battle for the top',\n    xaxis=dict(title='Date', ticklen=5, zeroline=False, gridwidth=2),\n    yaxis=dict(title='Number of votes (cumulative)', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Battle4TheTop')","a721d927":"user_achievements = md.UserAchievements()\n\nkernel_medalists = user_achievements[user_achievements.AchievementType == 'Scripts'].copy()\nkernel_medalists['TotalMedal'] = kernel_medalists['TotalGold'] + kernel_medalists['TotalSilver'] + kernel_medalists['TotalBronze']\nkernel_medalists = kernel_medalists[kernel_medalists['TotalMedal'] > 0].copy()\nkernel_medalists = kernel_medalists.merge(md.Users(), on='UserId')\nkernel_medalists = kernel_medalists.sort_values(by=['TotalGold', 'TotalSilver', 'TotalBronze'], ascending=False)\n\nkernel_medalists.shape\nkernel_medalists.head()","4145f5c6":"top_k_medalists = kernel_medalists[:30]\ndata = [\n    go.Bar(\n        y=top_k_medalists['DisplayName'].values,\n        x=top_k_medalists['Total{}'.format(medal_name)].values,\n        marker=dict(color=medal_body,\n                    line=dict(color=medal_border, width=0)),\n        orientation='h',\n        text=top_k_medalists.DisplayName.values,\n        name=medal_name\n    )\n    for medal, medal_name, medal_body, medal_border in md.Medals().values\n]\nlayout = go.Layout(\n    height=700,\n    barmode='stack',\n    autosize=True,\n    title='Top Kernel Medalists',\n    hovermode='closest',\n    xaxis=dict(title='Medals', ticklen=5, zeroline=False, gridwidth=2, domain=[0.05, 1]),\n    yaxis=dict(title='', ticklen=5, gridwidth=2),\n    showlegend=True\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='TopMedalists')","cc4015c1":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))\n\ns ='''\nL\na\ns\nt\nR\nu\nn\n2\n0\n1\n9\n0\n4\n0\n9\n'''","d79e93d4":"Competitions are still the most popular pillar (and my favorite type as well).\n\nWhile we have more than hundred competition grandmasters there are only 6 kernel grandmasters \n(**Heads or Tails**, **SRK**, *DanB*, **Anisotropic**,  **Shivam Bansal**, **Olivier**)\nand 6 grandmasters in discussion category\n(*inversion*, *William Cukierski*, **CPMP**, **Heng CherKeng**, **Bojan Tunguz**, **NxGTR**)\n\n*Kaggle Team*\n","d05ad143":"# Top Authors\n\nNovice votes are excluded from the following charts.","40359029":"# Kaggle Progression System\n\nKaggle introduced the current [progression system](https:\/\/www.kaggle.com\/progression) in 2016. The Progression System is designed around three Kaggle categories of data science expertise: **Competitions**, **Kernels**, and **Discussion**. \n\nWithin each category of expertise, there are five performance tiers that can be achieved: **Novice**, **Contributor**, **Expert**, **Master**, and **Grandmaster**.","dd8fcbb9":"# Weekly Top Forum Topics\n\nThere are a few spikes in the weekly total discussion votes.\nThese spikes are often a result of a single hot topic.  \n\nThese are the most popular topic categories:\n\n* **Competition winning solutions**: [1st place with representation learning](https:\/\/www.kaggle.com\/c\/porto-seguro-safe-driver-prediction\/discussion\/44629), \n[1st place solution overview](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge\/discussion\/52557), etc.\n* **General Kaggle Forum** (e.g. [Kaggle Survey](https:\/\/www.kaggle.com\/general\/36940),\n[Data Scientist Hero](https:\/\/www.kaggle.com\/general\/20388),\n[Kaggle Progression System & Profile Redesign Launch](https:\/\/www.kaggle.com\/general\/22208), etc.\n* **Complaints about extreme competition rules**: [This is insane discrimination](https:\/\/www.kaggle.com\/c\/passenger-screening-algorithm-challenge\/discussion\/35118),\n[Concerns regarding the competitive spirit](https:\/\/www.kaggle.com\/c\/home-credit-default-risk\/discussion\/64045), etc.\n* **Leakage of course :)**: [The Data \"Property\"](https:\/\/www.kaggle.com\/c\/santander-value-prediction-challenge\/discussion\/61329),\n[The 'Magic' (Leak) feature is attached](https:\/\/www.kaggle.com\/c\/two-sigma-connect-rental-listing-inquiries\/discussion\/31870),\n[The Magical Feature](https:\/\/www.kaggle.com\/c\/bosch-production-line-performance\/discussion\/24065),\n[you were only supposed to blow the * doors off](https:\/\/www.kaggle.com\/c\/talkingdata-mobile-user-demographics\/discussion\/23286), etc.\n\n\n**Fun fact**: one little purple dot shows that this kernel was the hottest topic this week ( 24\/Sep\/2018).\n","7902dcc9":"# Weekly Top Kernels\n\nMost of the top kernels are written in python. Special achievement for Heads or Tails that he reached GM status with mostly R.\n\nThe most popular kernels are usually EDAs, Tutorials or high performing benchmarks.","169f9ee0":"# Acknowledgements\nThanks **amrrs** your related kernels inspired me!\n\n1.  https:\/\/www.kaggle.com\/nulldata\/a-kernel-about-popular-kaggle-kernels\n2. https:\/\/www.kaggle.com\/nulldata\/heya-kaggler-are-you-a-giver-or-a-taker","24c02d3d":"# Top Kernels\n\nMost of the votes are given by the largest tier, Novices. Please note that the progression system does not count novice votes.","31b5912d":"**The1owl** has the most medals among the top players while **Heads or Tails** is the other extreme example he has only Gold medals.","1f5166cd":"**SRK** has solid advantage although it is never too late to join the race.  **Shivam Bansal** joined kaggle 9 months ago and he reached 2nd rank and became Grandmaster!"}}