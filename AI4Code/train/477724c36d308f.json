{"cell_type":{"d099762c":"code","d1af3e5e":"code","dafb76fc":"code","192de965":"code","71147b5a":"code","c5a6a7cc":"code","451a13cf":"code","06bada91":"code","58c012d9":"code","bfa26d64":"markdown","186f9aff":"markdown","0d6c0cc8":"markdown","3e537a28":"markdown","61165800":"markdown","422edd4f":"markdown","4f5ef25c":"markdown","cd5a34d4":"markdown","40e325a9":"markdown","0943d7d7":"markdown","0e99a662":"markdown","3d70d7a8":"markdown"},"source":{"d099762c":"#installing the package in the container\n!pip install fuzzy","d1af3e5e":"# Importing the fuzzy package\nimport fuzzy\n# Exploring the output of fuzzy.nysiis\nfuzzy.nysiis","dafb76fc":"import pandas as pd\nauthor_df = pd.read_csv(\"..\/input\/gender-prediction-from-name-pronunciation\/nytkids_yearly.csv\", delimiter=';')\n\n# Looping through author_df['Author'] to extract the authors first names\nfirst_name = []\nfor name in author_df['Author']:\n    first_name.append(name.split()[0])\n    \n#extracting first name\nauthor_df['first_name'] = first_name\nauthor_df.head()","192de965":"import numpy as np\n\n# Looping through author's first names to create the nysiis (fuzzy) equivalent\nnysiis_name = []\nfor first_name in author_df['first_name']:\n    tmp = fuzzy.nysiis(first_name)\n    nysiis_name.append(tmp.split()[0])\n\n# Adding first_name as a column to author_df\nauthor_df['first_name'] = first_name\n# Adding nysiis_name as a column to author_df\nauthor_df['nysiis_name'] = nysiis_name\n\nnum_bananas_one = np.unique(author_df['first_name'])\nlst1 = list(num_bananas_one)\nnum_bananas_one = np.asarray(lst1)\n\nnum_bananas_two = np.unique(author_df['nysiis_name'])\nlst2 = list(num_bananas_two)\nnum_bananas_two = np.asarray(lst2)\n\n# Printing out the difference between unique firstnames and unique nysiis_names:\nprint(str(\"Difference is\" + str(num_bananas_one) + \",\" + str(num_bananas_two) + \".\"))","71147b5a":"import pandas as pd\nbabies_df = pd.read_csv('..\/input\/gender-prediction-from-name-pronunciation\/babynames_nysiis.csv', delimiter = ';')\n\ngender = []\nfor idx, row in babies_df.iterrows():\n    if row[1] > row[2]:\n        gender.append('F')\n    elif row[1] < row[2]:\n        gender.append('M')\n    elif row[1] == row[2]:\n        gender.append('N')\n    else:\n        gender\n# Adding a gender column to babies_df\nbabies_df['gender'] = pd.Series(gender)\nprint(babies_df.head(10))","c5a6a7cc":"def locate_in_list(a_list, element):\n   loc_of_name = a_list.index(element) if element in a_list else -1\n   return(loc_of_name)\n\nauthor_gender = []\n\nfor idx in author_df['nysiis_name']:\n   index = locate_in_list(list(babies_df['babynysiis']),idx)\n   #print(index)\n   if(index==-1): \n       author_gender.append('Unknown')\n   else: \n       author_gender.append(list(babies_df['gender'])[index])\n\nauthor_df['author_gender'] = author_gender \nauthor_df['author_gender'].value_counts()","451a13cf":"# Creating a list of unique years, sorted in ascending order.\nyears = np.unique(author_df['Year'])\n\nmales_by_yr = []\nfemales_by_yr = []\nunknown_by_yr = []\n\nfor yy in years:   \n   males_by_yr.append(len( author_df[ (author_df['Year']==yy) & (author_df['author_gender']=='M')  ] ))\n   females_by_yr.append(len( author_df[ (author_df['Year']==yy) & (author_df['author_gender']=='F')  ] ))\n   unknown_by_yr.append(len( author_df[ (author_df['Year']==yy) & (author_df['author_gender']=='Unknown')  ] ))\n\n# Printing out yearly values to examine changes over time\nprint(males_by_yr)\nprint(females_by_yr)\nprint(unknown_by_yr)","06bada91":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.bar(unknown_by_yr,'year')\nplt.title('Plot1')\nplt.xlabel('X')\nplt.ylabel('Y')\n","58c012d9":"years_shifted = [year + 0.25 for year in years]\n\n# Plotting males_by_yr by year\nplt.bar(males_by_yr, 'year', width = 0.25, color = 'lightblue')\n\n# Plotting females_by_yr by years_shifted\nplt.bar(females_by_yr, 'year_shifted', width = 0.25, color = 'pink')\n\nplt.title('Plot2')\nplt.xlabel('X')\nplt.ylabel('Y')","bfa26d64":"## KEY NOTE\n\nThis notebook is something little different form what we usually do here on Kaggle. I have used the dataset of names and analysed the sounds using fuzzy and hence predicted the gender of the names from the other dataset of authors.\n\nDataset used: [Name Phonics Dataset](https:\/\/www.kaggle.com\/amritvirsinghx\/gender-prediction-from-name-pronunciation)","186f9aff":"<a id=\"3\"><\/a>\n## 3. It's Time to Bring on The Phonics!\n<p>When we were young children, we were taught to read using phonics; sounding out the letters that compose words. So let's relive history and do that again, but using python this time. We will now create a new column or list that contains the phonetic equivalent of every first name that we just extracted. <\/p>\n<p>To make sure we're on the right track, let's compare the number of unique values in the <code>first_name<\/code> column and the number of unique values in the nysiis coded column. As a rule of thumb, the number of unique nysiis first names should be less than or equal to the number of actual first names.<\/p>","0d6c0cc8":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Notebook Navigation<\/h3>\n\n[1. Introduction: Sound It Out!](#1)   \n[2. Authoring The Authors](#2)  \n[3. It's Time to Bring on The Phonics!](#3)   \n[4. The Inbetweeners](#4)    \n[5. Playing Matchmaker](#5)       \n[6. Tally Up](#6)     \n[7. Foreign-Born Authors?](#7)     \n[8. Raising The Bar](#8)     ","3e537a28":"So we have loaded our base library to work with","61165800":"<a id=\"6\"><\/a>\n## 6. Tally Up\n<p>From the results above see that there are more female authors on the New York Times best seller's list than male authors. Our dataset spans 2008 to 2017. Let's find out if there have been changes over time.<\/p>","422edd4f":"<a id=\"8\"><\/a>\n## 8. Raising The Bar\n<p>What\u2019s more exciting than a bar chart is a grouped bar chart. This type of chart is good for displaying <em>changes<\/em> over time while also <em>comparing<\/em> two or more groups. Let\u2019s use a grouped bar chart to look at the distribution of male and female authors over time.<\/p>","4f5ef25c":"<a id=\"5\"><\/a>\n## 5. Playing Matchmaker\n<p>Now that we have identified the likely genders of different names, let's find author genders by searching for each author's name in the <code>babies_df<\/code> DataFrame, and extracting the associated gender. <\/p>","cd5a34d4":"If you want to replicate something similar please checkout this dataset:\n[Name Phonics Dataset](https:\/\/www.kaggle.com\/amritvirsinghx\/gender-prediction-from-name-pronunciation)\n\nYour feedback is appreciated :)","40e325a9":"<a id=\"2\"><\/a>\n## 2. Authoring The Authors\n<p>The New York Times puts out a weekly list of best-selling books from different genres, and which has been published since the 1930\u2019s.  We\u2019ll focus on Children\u2019s Picture Books, and analyze the gender distribution of authors to see if there have been changes over time. We'll begin by reading in the data on the best selling authors from 2008 to 2017.<\/p>","0943d7d7":"<a id=\"1\"><\/a>\n## 1.Introduction: Sound It Out!\n<p>Grey and Gray. Colour and Color. Words like these have been the cause of many heated arguments between Brits and Americans. Accents (and jokes) aside, there are many words that are pronounced the same way but have different spellings. While it is easy for us to realize their equivalence, basic programming commands will fail to equate such two strings. <\/p>\n<p>More extreme than word spellings are names because people have more flexibility in choosing to spell a name in a certain way. To some extent, tradition sometimes governs the way a name is spelled, which limits the number of variations of any given English name. But if we consider global names and their associated English spellings, you can only imagine how many ways they can be spelled out. <\/p>\n<p>One way to tackle this challenge is to write a program that checks if two strings sound the same, instead of checking for equivalence in spellings. We'll do that here using fuzzy name matching.<\/p>","0e99a662":"<a id=\"7\"><\/a>\n## 7. Foreign-Born Authors?\n<p>Our gender data comes from social security applications of individuals born in the US. Hence, one possible explanation for why there are \"unknown\" genders associated with some author names is because these authors were foreign-born. While making this assumption, we should note that these are only a subset of foreign-born authors as others will have names that have a match in <code>baby_df<\/code> (and in the social security dataset). <\/p>\n<p>Using a bar chart, let's explore the trend of foreign-born authors with no name matches in the social security dataset.<\/p>","3d70d7a8":"<a id=\"4\"><\/a>\n## 4. The Inbetweeners\n<p>We'll use <code>babynames_nysiis.csv<\/code> to identify author genders. The dataset contains unique NYSIIS versions of baby names, and also includes the percentage of times the name appeared as a female name (<code>perc_female<\/code>) and the percentage of times it appeared as a male name (<code>perc_male<\/code>). <\/p>\n<p>We'll use this data to create a list of <code>gender<\/code>. Let's make the following simplifying assumption: For each name, if <code>perc_female<\/code> is greater than <code>perc_male<\/code> then assume the name is female, if <code>perc_female<\/code> is less than <code>perc_male<\/code> then assume it is a male name, and if the percentages are equal then it's a \"neutral\" name.<\/p>"}}