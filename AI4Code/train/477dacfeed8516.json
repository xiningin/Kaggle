{"cell_type":{"9a3f7d29":"code","0cea4a46":"code","48c2fabc":"code","688b5a70":"code","cf182e2d":"code","ef18293a":"code","dd29dba3":"code","b1bc3f03":"code","955d7a08":"code","fed222ca":"code","e7880d68":"code","885c70e4":"code","c5cdd2e8":"code","d7b26748":"code","f3022a0c":"code","34465041":"code","2f71a292":"code","010d11c1":"code","d79afae7":"code","0953ce45":"code","c691542b":"code","a1f28239":"code","4ab21074":"code","a097f200":"code","0dbb99a2":"code","a32753d3":"code","ce54523c":"code","aaa3e869":"code","db825dc6":"code","bb382db4":"code","31c9e1ea":"code","6337145f":"code","660f5aac":"code","8def15f7":"code","c6fd8932":"code","8f0827a2":"code","af64ec29":"code","83a21874":"code","38530e93":"code","b99e8e93":"code","7b5b50f0":"code","e85a011a":"code","2f2c4100":"code","dfb181db":"code","6a44bc1d":"code","f8789d70":"code","f3aee534":"code","184c3bf0":"code","131cbe51":"code","f4b61d38":"code","b994f091":"markdown","fbd36827":"markdown"},"source":{"9a3f7d29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cea4a46":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nfull_df = pd.concat([train, test], axis=0)","48c2fabc":"full_df.head()","688b5a70":"full_df.info()","cf182e2d":"pd.set_option('display.max_rows', None)\nfull_df.isnull().sum()","ef18293a":"sns.scatterplot(data = full_df, x = 'LotFrontage', y =  'SalePrice')","dd29dba3":"full_df[full_df['LotFrontage'] > 300]","b1bc3f03":"rl_avg_lotfrontage = round(full_df[full_df['MSZoning'] == 'RL']['LotFrontage'].mean(), 2)\nfull_df.loc[full_df['LotFrontage'] > 300, 'LotFrontage'] = rl_avg_lotfrontage","955d7a08":"full_df[full_df['MSZoning'].isna()]","fed222ca":"full_df.groupby('MSZoning').count()","e7880d68":"full_df['MSZoning'] = full_df['MSZoning'].fillna('RL')","885c70e4":"def fill_missing_lotfrontage(lotfrontage, mszoning):\n    if np.isnan(lotfrontage):\n        if mszoning == 'C (all)':\n            avg_lotfrontage_c = round(full_df[full_df['MSZoning'] == 'C (all)']['LotFrontage'].mean(), 2)\n            return avg_lotfrontage_c\n        elif mszoning == 'FV':\n            avg_lotfrontage_fv = round(full_df[full_df['MSZoning'] == 'FV']['LotFrontage'].mean(), 2)\n            return avg_lotfrontage_fv\n        elif mszoning == 'RH':\n            avg_lotfrontage_rh = round(full_df[full_df['MSZoning'] == 'RH']['LotFrontage'].mean(), 2)\n            return avg_lotfrontage_rh\n        elif mszoning == 'RL':\n            avg_lotfrontage_rl = round(full_df[full_df['MSZoning'] == 'RL']['LotFrontage'].mean(), 2)\n            return avg_lotfrontage_rl\n        else:\n            avg_lotfrontage_rm = round(full_df[full_df['MSZoning'] == 'RM']['LotFrontage'].mean(), 2)\n            return avg_lotfrontage_rm\n    else:\n        return lotfrontage","c5cdd2e8":"full_df['LotFrontage'] = full_df.apply(lambda row : fill_missing_lotfrontage(row.LotFrontage, row.MSZoning), axis=1)\nfull_df['Alley'] = full_df['Alley'].fillna('NA')","d7b26748":"full_df.groupby(['MSZoning', 'Utilities'])['Utilities'].count()","f3022a0c":"full_df['Utilities'] = full_df['Utilities'].fillna('AllPub')\nfull_df['Exterior1st'] = full_df['Exterior1st'].fillna('VinylSd')\nfull_df['Exterior2nd'] = full_df['Exterior2nd'].fillna('VinylSd')","34465041":"full_df.groupby(['MSSubClass', 'MSZoning','MasVnrType'])['MasVnrType'].count()","2f71a292":"full_df['MasVnrType'] = full_df['MasVnrType'].fillna('None')\nfull_df['MasVnrArea'] = full_df['MasVnrArea'].fillna(0)","010d11c1":"full_df['BsmtFinType2'] = full_df.apply(lambda x : 'NA' if(pd.isna(x.BsmtQual) & pd.isna(x.BsmtCond)) else x.BsmtFinType2, axis = 1)\nfull_df['BsmtFinType1'] = full_df.apply(lambda x : 'NA' if(pd.isna(x.BsmtQual) & pd.isna(x.BsmtCond)) else x.BsmtFinType1, axis = 1)\nfull_df['BsmtExposure'] = full_df.apply(lambda x : 'NA' if(pd.isna(x.BsmtQual) & pd.isna(x.BsmtCond)) else x.BsmtExposure, axis = 1)\nfull_df['BsmtCond'] = full_df.apply(lambda x : 'NA' if(pd.isna(x.BsmtQual) & pd.isna(x.BsmtCond)) else x.BsmtCond, axis = 1)\nfull_df['BsmtQual'] = full_df.apply(lambda x : 'NA' if(pd.isna(x.BsmtQual) & (x.BsmtCond == 'NA')) else x.BsmtQual, axis = 1)\n","d79afae7":"full_df['BsmtQual'] = full_df['BsmtQual'].fillna('TA')\nfull_df['BsmtCond'] = full_df['BsmtCond'].fillna('TA')\nfull_df['BsmtExposure'] = full_df['BsmtExposure'].fillna('Av')","0953ce45":"full_df.fillna({'BsmtFinSF1' : 0.0, 'BsmtFinType2' : 'NA', 'BsmtFinSF2' : 0.0, 'BsmtUnfSF' : 0.0, 'TotalBsmtSF' : 0.0}, inplace = True)","c691542b":"full_df.fillna({'BsmtFullBath' : 0.0, 'BsmtHalfBath' : 0.0}, inplace=True)","a1f28239":"full_df['Electrical'].value_counts()","4ab21074":"full_df['Electrical'].fillna('SBrkr', inplace=True)","a097f200":"full_df.groupby(['KitchenAbvGr', 'KitchenQual'])['KitchenQual'].count()","0dbb99a2":"full_df['KitchenQual'].fillna('TA', inplace=True)","a32753d3":"full_df.groupby(['Functional'])['Functional'].count()","ce54523c":"full_df['Functional'].fillna('Typ', inplace=True)","aaa3e869":"full_df['Fireplaces'].value_counts()","db825dc6":"full_df['FireplaceQu'].fillna('NA', inplace=True)","bb382db4":"full_df.fillna({'GarageType' : 'NA', 'GarageYrBlt' : 0.0, 'GarageFinish' : 'NA', 'GarageQual' : 'NA', 'GarageCond' : 'NA', 'GarageCars' : 0.0, 'GarageArea' : 0.0}, inplace=True)","31c9e1ea":"# Dropping the columns due to large number of missing values\nfull_df.drop(['PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","6337145f":"full_df['SaleType'].value_counts()","660f5aac":"full_df['SaleType'].fillna('WD', inplace=True)","8def15f7":"full_df.isna().sum()","c6fd8932":"full_df.drop('Id', axis=1, inplace= True)","8f0827a2":"full_df_dummies = pd.get_dummies(full_df, drop_first=True)\nfull_df_dummies.info()","af64ec29":"test_features = full_df_dummies[full_df_dummies['SalePrice'].isna()].copy()\ntest_features.drop('SalePrice', axis =1 , inplace = True)\ntest_features.info()","83a21874":"train_features = full_df_dummies[full_df_dummies['SalePrice'].notna()].copy()\ntrain_features.info()","38530e93":"X_train = train_features.drop('SalePrice', axis = 1)\ny_train = train_features['SalePrice']","b99e8e93":"from xgboost import XGBRegressor\nxgbr = XGBRegressor()","7b5b50f0":"n_estimators = [1700, 1900, 2100, 2300, 2500,]\nmax_depth = [2, 3, 5, 10, 15]\nbooster = ['gbtree', 'gblinear']\nlearning_rate = [0.05, 0.10, 0.15, 0.20]\nmin_child_weight = [1, 2, 3, 4, 5]\nbase_score = [0.25, 0.50, 0.75, 1.0]\n\nhyperparameters_grid = {\n    'n_estimators' : n_estimators,\n    'max_depth' : max_depth,\n    'booster' : booster,\n    'learning_rate' : learning_rate,\n    'min_child_weight' : min_child_weight,\n    'base_score' : base_score\n}","e85a011a":"from sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=xgbr,\n                               param_distributions= hyperparameters_grid,\n                              cv = 5, n_iter= 10, n_jobs= 4, verbose= 5,\n                              return_train_score= True, random_state= 42)","2f2c4100":"random_cv.fit(X_train, y_train)","dfb181db":"random_cv.best_estimator_","6a44bc1d":"tuned_xgbr = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=2, missing=None, monotone_constraints='()',\n             n_estimators=1900, n_jobs=4, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","f8789d70":"tuned_xgbr.fit(X_train, y_train)","f3aee534":"tuned_xgbr_prediction = tuned_xgbr.predict(test_features)","184c3bf0":"tuned_xgbr_prediction","131cbe51":"predictions = pd.DataFrame(tuned_xgbr_prediction)\nsubmission = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\npred_ds = pd.concat([submission['Id'], predictions], axis=1)\npred_ds.columns = ['Id', 'SalePrice']\n","f4b61d38":"pred_ds.to_csv('sample_submission.csv', index= False)","b994f091":"**Missing Values**","fbd36827":"**Model Building**"}}