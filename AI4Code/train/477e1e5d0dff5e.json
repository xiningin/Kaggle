{"cell_type":{"995907df":"code","df3a19bc":"code","048e8be4":"code","6ad56bfb":"code","6e36d07b":"code","16397038":"code","7ee8f0d2":"code","770663a5":"code","5d40a2ab":"code","e4de4c13":"code","e3354dd0":"code","f97213fe":"code","2dc10b50":"code","58c1a9e7":"code","61fa0833":"code","f3ee5346":"code","e6a177fd":"code","b6db3fdc":"code","32c4bcdb":"code","91abeb00":"code","d9677cdc":"code","4ef68eeb":"code","40056797":"code","00f46e15":"code","ac1888ac":"code","ff41dda8":"code","51a9354d":"code","a8a1ef4d":"code","53cbb490":"code","a93f0f17":"code","b37c90d2":"code","f875eacb":"code","d142da88":"code","e6b6e88e":"code","25493bb0":"code","8eb8b01a":"code","69a5eb87":"code","60e83c2a":"code","e5632a63":"code","3ceba60b":"code","c86742dc":"markdown","fad190b3":"markdown","d288237d":"markdown"},"source":{"995907df":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas_profiling\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","df3a19bc":"df_train = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv')\ndf_train.head()","048e8be4":"df_train.shape","6ad56bfb":"df_train.isnull().sum()","6e36d07b":"df_train.dtypes","16397038":"fig, ax =plt.subplots(2,2,figsize=(16,8))\nsns.countplot(df_train['bin_0'], ax=ax[0,0])\nsns.countplot(df_train['bin_1'], ax=ax[0,1])\nsns.countplot(df_train['bin_2'], ax=ax[1,0])\nsns.countplot(df_train['bin_3'], ax=ax[1,1])\nfig.show()","7ee8f0d2":"plt.figure(figsize=(10,3))\nsns.countplot(df_train['bin_4'])","770663a5":"fig, ax =plt.subplots(2,2,figsize=(16,12))\nsns.countplot(df_train['nom_0'], ax=ax[0,0])\nsns.countplot(df_train['nom_1'], ax=ax[0,1])\nsns.countplot(df_train['nom_2'], ax=ax[1,0])\nsns.countplot(df_train['nom_3'], ax=ax[1,1])\nfig.show()","5d40a2ab":"plt.figure(figsize=(10,3))\nsns.countplot(df_train['nom_4'])","e4de4c13":"fig, ax =plt.subplots(3,2,figsize=(16,12))\nsns.countplot(df_train['ord_0'], ax=ax[0,0])\nsns.countplot(df_train['ord_1'], ax=ax[0,1])\nsns.countplot(df_train['ord_2'], ax=ax[1,0])\nsns.countplot(df_train['ord_3'].sort_values(), ax=ax[1,1])\nsns.countplot(df_train['ord_4'].sort_values(), ax=ax[2,0])\nsns.countplot(df_train['ord_5'].sort_values(), ax=ax[2,1])\nfig.show()","e3354dd0":"plt.figure(figsize=(10,3))\nsns.distplot(df_train['day'])","f97213fe":"plt.figure(figsize=(10,3))\nsns.distplot(df_train['month'])","2dc10b50":"plt.figure(figsize=(10,3))\nsns.countplot(df_train['target'])","58c1a9e7":"pd.value_counts(df_train['target'])","61fa0833":"x = df_train.drop(['target'],axis=1)\ny = df_train['target']","f3ee5346":"train = pd.DataFrame()\nlabel=LabelEncoder()\nfor c in  x.columns:\n    if(x[c].dtype=='object'):\n        train[c]=label.fit_transform(x[c])\n    else:\n        train[c]=x[c]","e6a177fd":"train.head()","b6db3fdc":"x_train, x_test, y_train, y_test = train_test_split(train, y, test_size=0.3, random_state=0)","32c4bcdb":"lg = LogisticRegression()","91abeb00":"lg.fit(x_train,y_train)","d9677cdc":"pred = lg.predict(x_test)","4ef68eeb":"print('Accuracy : ',accuracy_score(y_test,pred))","40056797":"x.head()","00f46e15":"one=OneHotEncoder()\n\none.fit(x)\ntrain=one.transform(x)\n\nprint('train data set has got {} rows and {} columns'.format(train.shape[0],train.shape[1]))","ac1888ac":"x_train, x_test, y_train, y_test = train_test_split(train, y, test_size=0.3, random_state=0)","ff41dda8":"lg1 = LogisticRegression()","51a9354d":"lg1.fit(x_train, y_train)","a8a1ef4d":"pred1 = lg1.predict(x_test)","53cbb490":"print('Accuracy : ',accuracy_score(y_test,pred1))","a93f0f17":"df_test = pd.read_csv('..\/input\/cat-in-the-dat\/test.csv')\ndf_test.head()","b37c90d2":"test_id = df_test['id']\ndf_test = df_test.drop(['id','nom_5','nom_6','nom_7','nom_8','nom_9'], axis=1)\nx =x.drop(['id','nom_5','nom_6','nom_7','nom_8','nom_9'], axis=1)","f875eacb":"hot = OneHotEncoder()\nhot.fit(df_test)\ntest=hot.transform(df_test)\n\nprint('test data set has got {} rows and {} columns'.format(test.shape[0],test.shape[1]))","d142da88":"one=OneHotEncoder()\n\none.fit(x[:200000])\ntrain=one.transform(x[:200000])\n\nprint('train data set has got {} rows and {} columns'.format(train.shape[0],train.shape[1]))","e6b6e88e":"final_lg = LogisticRegression()","25493bb0":"final_lg.fit(train,y[:200000])","8eb8b01a":"actual_pred = final_lg.predict(test)","69a5eb87":"predict = pd.DataFrame(actual_pred)\nid_t = pd.DataFrame(test_id)","60e83c2a":"submission = pd.concat([id_t,predict], axis=1)\nsubmission.columns = [\"id\", \"target\"]","e5632a63":"submission.head()","3ceba60b":"submission.to_csv('submission.csv',index=False)","c86742dc":"Label Encoding","fad190b3":"# Test with Actual data","d288237d":"# One-Hot Encoding"}}