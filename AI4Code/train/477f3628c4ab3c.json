{"cell_type":{"3f2766fa":"code","abf3ce64":"code","bd4adf33":"code","bfc0e114":"code","1e2d1ada":"code","1f0a8f49":"code","978a73e1":"code","1ea0abeb":"code","72d81c52":"code","adab4cd6":"code","2638fe75":"code","84e40277":"code","d1cef987":"code","34297d1d":"code","db0d8f34":"code","3a73e6e8":"code","462e90b7":"code","056213e9":"code","0ebc84bb":"code","c450ef4a":"code","835f86e8":"code","1f839e65":"code","78199fa1":"code","d3cbc5e9":"code","6936099a":"code","e9971f38":"code","f3887aac":"code","9da8b063":"code","ca571ecf":"code","4ba1af58":"code","aeae28c1":"code","3a2fe4d8":"code","3e1e2b5f":"code","076f581b":"code","a0ef84a5":"code","406d0f5a":"code","e5d74e9d":"code","7b6c1aca":"code","8566c5ae":"code","f1061098":"code","d36ebc34":"code","65a9f2af":"code","518e9e43":"code","94926fe0":"code","c70b97e5":"code","6359afab":"code","6af667f6":"code","5803f965":"code","4903ed31":"code","fb88b607":"code","264b2358":"code","f36c9294":"code","730c3bec":"code","d9377194":"code","77266918":"code","1389e3c0":"code","cd26607d":"code","237bc03e":"code","eb3b21cb":"code","01a2477a":"code","db45e1e1":"code","3ea5af76":"code","e5f251ea":"code","78c9e382":"code","1d806267":"code","32b71362":"code","b44c6997":"code","ac3c0aca":"code","fdbb6561":"code","16aaabe0":"code","a4c7cb4b":"code","31162303":"code","6c071ce4":"code","732ec6b7":"code","5383a51b":"code","c2d20946":"code","8c25f650":"code","342ce5cc":"code","c3150376":"code","fec88483":"code","44d2247a":"code","451cba93":"code","2523b5c2":"code","545cbd9d":"code","d929e659":"code","836517b4":"code","871c5a1f":"code","25864864":"code","ef3cef88":"code","cf98e804":"code","051e2e00":"code","3dc7ce8a":"code","0b5818bc":"code","69d48e55":"code","61095ac0":"code","2f3108ff":"code","b5fe903c":"code","20df1e64":"markdown","139294d3":"markdown","279d0d37":"markdown","584e1ff6":"markdown","0d7f4a0d":"markdown","41086a3e":"markdown","d87c0f3f":"markdown","6761fba6":"markdown","2e4ceb34":"markdown","6c1d5189":"markdown","3771be63":"markdown","e7101ac3":"markdown","cc6b1eea":"markdown","fbfcee60":"markdown","cc6dee02":"markdown","0cdccb26":"markdown","4c0069ff":"markdown","e42061b8":"markdown","ffc34ce2":"markdown","c939afc9":"markdown","7f825c6d":"markdown","a6f42f52":"markdown","4441b6e0":"markdown","0e75dd92":"markdown","d540028c":"markdown","b68090b0":"markdown","5c3f694a":"markdown","419b3bd9":"markdown","beb98864":"markdown","0585f972":"markdown","aefba3aa":"markdown","4ccbd5aa":"markdown","58eb0227":"markdown","921a0a69":"markdown","51049733":"markdown","3e6af85b":"markdown","7757847b":"markdown","3f1813bf":"markdown","1e882cc1":"markdown","b5717783":"markdown","4c15aa53":"markdown","74722484":"markdown","d76a8c39":"markdown","acd8d965":"markdown","59d96b48":"markdown","959972a1":"markdown","29ca6cf6":"markdown","90385173":"markdown","0a45fa79":"markdown","17693b6a":"markdown","b3cab0d4":"markdown","acd32636":"markdown","06392e3d":"markdown","3ae6bd5b":"markdown","e10b0dbe":"markdown","e0611b93":"markdown","b1a892bb":"markdown","c6428b48":"markdown","2ba9ab4c":"markdown","d3d6c6ac":"markdown","30873ecb":"markdown","7d314b04":"markdown","cc4fae1b":"markdown","cbfb3638":"markdown","56b1104a":"markdown","80ab4ddb":"markdown","11f2294f":"markdown","958a5558":"markdown"},"source":{"3f2766fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport re\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom pandas_profiling import ProfileReport\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abf3ce64":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","bd4adf33":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","bfc0e114":"train_data.shape","1e2d1ada":"train_data.describe(include='all')","1f0a8f49":"# describe(include = ['O']) will show the descriptive statistics of object data types.\ntrain_data.describe(include=['O'])","978a73e1":"profile = ProfileReport(train_data, title='Pandas Profiling Report',html={'style': {'full_width': True}}, sort=\"None\")\nprofile.to_widgets()\nprofile","1ea0abeb":"train_data.info()","72d81c52":"train_data.isnull().sum()","adab4cd6":"test_data.shape","2638fe75":"test_data.head()","84e40277":"test_data.info()","d1cef987":"test_data.isnull().sum()","34297d1d":"profile1 = ProfileReport(test_data, title=\"Titanic Dataset\", html={'style': {'full_width': True}}, sort=\"None\")\nprofile1.to_widgets()\nprofile1","db0d8f34":"survived = train_data[train_data['Survived'] == 1]\nnot_survived = train_data[train_data['Survived'] == 0]\n\nprint (\"Survived: %i (%.1f%%)\"%(len(survived), float(len(survived))\/len(train_data)*100.0))\nprint (\"Not Survived: %i (%.1f%%)\"%(len(not_survived), float(len(not_survived))\/len(train_data)*100.0))\nprint (\"Total: %i\"%len(train_data))","3a73e6e8":"#Pclass. It seems that Pclass is useful and requires no changes.\ntrain_data.pivot_table('PassengerId', 'Pclass', 'Survived', 'count').plot(kind='bar', stacked=True)","462e90b7":"train_data['Title'] = train_data['Name'].apply(lambda x: (re.search(' ([a-zA-Z]+)\\.', x)).group(1))\ntest_data['Title'] = test_data['Name'].apply(lambda x: (re.search(' ([a-zA-Z]+)\\.', x)).group(1))\n\ntrain_data['Title'].value_counts(), test_data['Title'].value_counts()","056213e9":"train_data.Pclass.value_counts()","0ebc84bb":"pclass_survived = train_data.groupby('Pclass').Survived.value_counts()\npclass_survived","c450ef4a":"# plotting the pclass vs survived\npclass_survived.unstack(level=1).plot(kind='bar', subplots=False)","835f86e8":"pclass_survived_average = train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()\npclass_survived_average\n","1f839e65":"pclass_survived_average.plot(kind='bar', subplots=False)","78199fa1":"# The above statement can be clearly understood from the plot below.\nsns.barplot(x='Pclass', y='Survived', data=train_data)","d3cbc5e9":"train_data.Sex.value_counts()","6936099a":"sex_survival = train_data.groupby('Sex').Survived.value_counts()\nsex_survival","e9971f38":"sex_survival.unstack(level=1).plot(kind='bar', subplots=False)","f3887aac":"sex_survived_average = train_data[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()\nsex_survived_average","9da8b063":"sex_survived_average.plot(kind='bar', subplots=False)","ca571ecf":"sns.barplot(x='Sex', y='Survived', data=train_data)","4ba1af58":"tab = pd.crosstab(train_data['Pclass'], train_data['Sex'])\nprint (tab)\n\ntab.div(tab.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=False)\nplt.xlabel('Pclass')\nplt.ylabel('Percentage')","aeae28c1":"sns.factorplot('Sex', 'Survived', hue='Pclass', size=4, aspect=2, data=train_data)","3a2fe4d8":"sns.factorplot(x='Pclass', y='Survived', hue='Sex', col='Embarked', data=train_data)","3e1e2b5f":"train_data.Embarked.value_counts()","076f581b":"train_data.groupby('Embarked').Survived.value_counts()","a0ef84a5":"train_data[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean()","406d0f5a":"sns.barplot(x='Embarked', y='Survived', data=train_data)","e5d74e9d":"train_data.Parch.value_counts()","7b6c1aca":"train_data.groupby('Parch').Survived.value_counts()","8566c5ae":"train_data[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean()\n","f1061098":"sns.barplot(x='Parch', y='Survived', ci=None, data=train_data) # ci=None will hide the error bar","d36ebc34":"train_data.SibSp.value_counts()","65a9f2af":"train_data.groupby('SibSp').Survived.value_counts()","518e9e43":"train_data[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean()","94926fe0":"sns.barplot(x='SibSp', y='Survived', ci=None, data=train_data) \n# ci=None will hide the error bar","c70b97e5":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nsns.violinplot(x=\"Embarked\", y=\"Age\", hue=\"Survived\", data=train_data, split=True, ax=ax1)\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train_data, split=True, ax=ax2)\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=train_data, split=True, ax=ax3)","6359afab":"total_survived = train_data[train_data['Survived']==1]\ntotal_not_survived = train_data[train_data['Survived']==0]\n\nmale_survived = train_data[(train_data['Survived']==1) & (train_data['Sex']==\"male\")]\nfemale_survived = train_data[(train_data['Survived']==1) & (train_data['Sex']==\"female\")]\n\nmale_not_survived = train_data[(train_data['Survived']==0) & (train_data['Sex']==\"male\")]\nfemale_not_survived = train_data[(train_data['Survived']==0) & (train_data['Sex']==\"female\")]","6af667f6":"plt.figure(figsize=[15,5])\nplt.subplot(111)\nsns.distplot(total_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='blue')\nsns.distplot(total_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Age')","5803f965":"plt.figure(figsize=[15,5])\n\nplt.subplot(121)\nsns.distplot(female_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='blue')\nsns.distplot(female_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Female Age')\n\nplt.subplot(122)\nsns.distplot(male_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='blue')\nsns.distplot(male_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=True, color='red', axlabel='Male Age')","4903ed31":"plt.figure(figsize=(15,6))\nsns.heatmap(train_data.drop('PassengerId',axis=1).corr(), vmax=0.6, square=True, annot=True)","fb88b607":"# combining train and test dataset\ntrain_test_data = [train_data, test_data]\n\n# extracting titles from Name column.\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.')\n","264b2358":"train_data.head()","f36c9294":"pd.crosstab(train_data['Title'], train_data['Sex'])","730c3bec":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n    'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n","d9377194":"sns.barplot(x='Title', y='Survived', ci=None, data=train_data)","77266918":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n","1389e3c0":"train_data.head()","cd26607d":"for dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n","237bc03e":"train_data.head()","eb3b21cb":"train_data.Embarked.value_counts()","01a2477a":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n","db45e1e1":"train_data.head()","3ea5af76":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n","e5f251ea":"train_data.head()","78c9e382":"for dataset in train_test_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain_data['AgeBand'] = pd.cut(train_data['Age'], 5)\n\nprint (train_data[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","1d806267":"train_data.head()","32b71362":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\n","b44c6997":"train_data.head()","ac3c0aca":" for dataset in train_test_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train_data['Fare'].median())\n","fdbb6561":"train_data['FareBand'] = pd.qcut(train_data['Fare'], 4)\nprint (train_data[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())\n","16aaabe0":"train_data.head()","a4c7cb4b":"\nfor dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","31162303":"train_data.head()","6c071ce4":"for dataset in train_test_data:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n\nprint (train_data[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())\n","732ec6b7":"train_data.head()","5383a51b":"sns.barplot(x='FamilySize', y='Survived', ci=None, data=train_data)\n","c2d20946":"for dataset in train_test_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \nprint (train_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())\n","8c25f650":"train_data.head()","342ce5cc":"test_data.head()","c3150376":"features_drop = ['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'FamilySize']\n\ntest = test_data.drop(features_drop, axis=1)\ntrain = train_data.drop(['PassengerId', 'AgeBand', 'FareBand','Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'FamilySize'], axis=1)","fec88483":"train.head()","44d2247a":"test.head()","451cba93":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']\nX_test = test.drop(\"PassengerId\", axis=1).copy()\n\nX_train.shape, y_train.shape, X_test.shape","2523b5c2":"# Importing Classifier Modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier","545cbd9d":"clf = LogisticRegression()\nclf.fit(X_train, y_train)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round( clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_log_reg) + '%')","d929e659":"clf = SVC()\nclf.fit(X_train, y_train)\ny_pred_svc = clf.predict(X_test)\nacc_svc = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_svc) + '%')","836517b4":"clf = LinearSVC()\nclf.fit(X_train, y_train)\ny_pred_linear_svc = clf.predict(X_test)\nacc_linear_svc = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_linear_svc) + '%')","871c5a1f":"clf = KNeighborsClassifier(n_neighbors = 5)\nclf.fit(X_train, y_train)\ny_pred_knn = clf.predict(X_test)\nacc_knn = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_knn) + '%')","25864864":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_decision_tree) + '%')","ef3cef88":"clf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_random_forest) + '%')","cf98e804":"clf = GaussianNB()\nclf.fit(X_train, y_train)\ny_pred_gnb = clf.predict(X_test)\nacc_gnb = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_gnb) + '%')","051e2e00":"clf = Perceptron(max_iter=7, tol=None)\nclf.fit(X_train, y_train)\ny_pred_perceptron = clf.predict(X_test)\nacc_perceptron = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_perceptron) + '%')","3dc7ce8a":"clf = SGDClassifier(max_iter=6, tol=None)\nclf.fit(X_train, y_train)\ny_pred_sgd = clf.predict(X_test)\nacc_sgd = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Train Accuracy: \" + str(acc_sgd) + '%')","0b5818bc":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest_training_set = clf.predict(X_train)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Accuracy: %i %% \\n\"%acc_random_forest)\n\nclass_names = ['Survived', 'Not Survived']\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_train, y_pred_random_forest_training_set)\nnp.set_printoptions(precision=2)\n\nprint ('Confusion Matrix in Numbers')\nprint (cnf_matrix)\nprint ('')\n\ncnf_matrix_percent = cnf_matrix.astype('float') \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\n\nprint ('Confusion Matrix in Percentage')\nprint (cnf_matrix_percent)\nprint ('')\n\ntrue_class_names = ['True Survived', 'True Not Survived']\npredicted_class_names = ['Predicted Survived', 'Predicted Not Survived']\n\ndf_cnf_matrix = pd.DataFrame(cnf_matrix, \n                             index = true_class_names,\n                             columns = predicted_class_names)\n\ndf_cnf_matrix_percent = pd.DataFrame(cnf_matrix_percent, \n                                     index = true_class_names,\n                                     columns = predicted_class_names)\n\nplt.figure(figsize = (15,5))\n\nplt.subplot(121)\nsns.heatmap(df_cnf_matrix, annot=True, fmt='d', cmap = \"Blues\")\n\nplt.subplot(122)\nsns.heatmap(df_cnf_matrix_percent, annot=True, cmap = \"Blues\")","69d48e55":"models = pd.DataFrame({\n    'Model': ['LR', 'SVM', 'L-SVC', \n              'KNN', 'DTree', 'RF', 'NB', \n              'Perceptron', 'SGD'],\n    \n    'Score': [acc_log_reg, acc_svc, acc_linear_svc, \n              acc_knn,  acc_decision_tree, acc_random_forest, acc_gnb, \n              acc_perceptron, acc_sgd]\n    })\n\nmodels = models.sort_values(by='Score', ascending=False)\nmodels","61095ac0":"sns.barplot(x='Model', y='Score', ci=None, data=models)","2f3108ff":"test.head()","b5fe903c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_log_reg\n    })\n\nsubmission.to_csv('gender_submission.csv', index=False)","20df1e64":"# NOTE:\n* The number of passengers with each Title is shown above.\n* We now replace some less common titles with the name \"Other\".","139294d3":"to know more about how to Evaluate a ML model performance read this article:\nhttps:\/\/towardsdatascience.com\/how-to-evaluate-machine-learning-model-performance-in-python-135b4ae27f7e\n\n\nConsider upvoting if it was good enough! \ud83d\ude03","279d0d37":"EDA(Exploratry Data Analysis) using Pandas_profiling library\n","584e1ff6":"# Feature Extraction","0d7f4a0d":"# 6) Random Forest\n[Random forests](https:\/\/en.wikipedia.org\/wiki\/Random_forest) or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Random decision forests correct for decision trees' habit of overfitting to their training set.\n\n[Ensemble methods](https:\/\/en.wikipedia.org\/wiki\/Ensemble_learning) use multiple learning algorithms to obtain better predictive performance than could be obtained from any of the constituent learning algorithms alone.","41086a3e":"##Brief Information about columns in given datasets:\n\n1. PassengerId : An unique index for passenger rows. It starts from 1 for first row and increments by 1 for every new rows.\n    \n2. Survived: Shows if the passenger survived or not. 1 stands for survived and 0 stands for not survived.\n\n3. Pclass: Ticket class. 1 stands for First class ticket. 2 stands for Second class ticket. 3 stands for Third class ticket.\n\n4. Name: Passenger's name. Name also contain title. \"Mr\" for man. \"Mrs\" for woman. \"Miss\" for girl. \"Master\" for boy.\n\n5. Sex: Passenger's sex. It's either Male or Female.\n\n6. Age: Passenger's age. \"NaN\" values in this column indicates that the age of that particular passenger has not been recorded.\n\n7. SibSp: Number of siblings or spouses travelling with each passenger.\n\n8. Parch: Number of parents of children travelling with each passenger.\n    \n9. Ticket: Ticket number.\n    \n10. Fare: How much money the passenger has paid for the travel journey.\n    \n11. Cabin: Cabin number of the passenger. \"NaN\" values in this column indicates that the cabin number of that particular passenger     has not been recorded.\n    \n12. Embarked: Port from where the particular passenger was embarked\/boarded.","d87c0f3f":"Below, I have just found out how many males and females are there in each Pclass then plotted a bar diagram with that information and found that there are more males among the 3rd Pclass passengers.","6761fba6":"3. Embarked Feature\n\nThere are empty values for some rows for Embarked column. The empty values are represented as \"nan\" in below list.","2e4ceb34":"> Now, we map *Age* according to *AgeBand*.","6c1d5189":"# 3) Linear SVM\nLinear SVM is a SVM model with linear kernel.\nIn the below code,[ LinearSVC](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.LinearSVC.html) stands for Linear Support Vector Classification.","3771be63":"# 9) Stochastic Gradient Descent (SGD)\n[Stochastic gradient descent](https:\/\/en.wikipedia.org\/wiki\/Stochastic_gradient_descent) (often shortened in SGD), also known as incremental gradient descent, is a stochastic approximation of the gradient descent optimization method for minimizing an objective function that is written as a sum of differentiable functions. In other words, SGD tries to find minima or maxima by iteration.\n\n","e7101ac3":"Names. It is a usual practice to extract Titles from Names to group passangers. Let's see unique values of Titles","cc6b1eea":"# NOTE:\nWe find that category \"S\" has maximum passengers. Hence, we replace \"nan\" values with \"S\".\n","fbfcee60":"> We are done with Feature Selection\/Engineering.\n> Now, we are ready to train a classifier with our feature set.\n> \n> ","cc6dee02":"It means training dataset have 891 rows and 12 columns","0cdccb26":"Now without using Pandas-Profiling Library do EDA(Exploratry Data Analysis)","4c0069ff":"# Comparing Models\nLet's compare the accuracy score of all the classifier models used above.","e42061b8":"# Plotting some distribution plots based on survival's sex","ffc34ce2":"Now EDA(Exploratry Data Analysis) using pandas-profiling library","c939afc9":"Map **Fare** according to **FareBand\n**\n","7f825c6d":"# NOTE:\nThere are many classifying algorithms present. Among them, we choose the following Classification algorithms for our problem:\n\n* Logistic Regression\n* Support Vector Machines (SVC)\n* Linear SVC\n* k-Nearest Neighbor (KNN)\n* Decision Tree\n* Random Forest\n* Naive Bayes (GaussianNB)\n* Perceptron\n* Stochastic Gradient Descent (SGD)\nHere's the training and testing procedure:\n\n> First, we train these classifiers with our training data.\n> After that, using the trained classifier, we predict the Survival outcome of test data.\n> Finally, we calculate the accuracy score (in percentange) of the trained classifier.\n\n # Please note: \n that the accuracy score is generated based on our training dataset.\n\n","a6f42f52":"NOTE:\nFrom the above plot, it can be seen that:\n\n* Women from 1st and 2nd Pclass have almost 100% survival chance.\n* Men from 2nd and 3rd Pclass have only around 10% survival chance.","4441b6e0":"# 8) Perceptron\n[Perceptron](https:\/\/en.wikipedia.org\/wiki\/Perceptron) is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector.","0e75dd92":"There are 177 rows with missing Age, 687 rows with missing Cabin and 2 rows with missing Embarked information.","d540028c":"# NOTE:\n* From the above table, we can see that **Decision Tree** and **Random Forest classfiers** have the highest accuracy score.\n* Among these two, we choose **Random Forest classifier** as it has the ability to limit overfitting as compared to **Decision Tree** classifier.","b68090b0":"## Correlating Features","5c3f694a":"As you can see above, we have added a new column named Title in the Train dataset with the Title present in the particular passenger name.","419b3bd9":"# NOTE:\nHigher class passengers have better survival chance (may be because they are more privilege to be saved).","beb98864":"# NOTE:\nFrom the above figures, we can see that:\n\n* Combining both male and female, we can see that children with age between 0 to 5 have better chance of survival.\n* Females with age between \"18 to 40\" and \"50 and above\" have higher chance of survival.\n* Males with age between 0 to 14 have better chance of survival.","0585f972":"# 4)  k -Nearest Neighbors\n[k -nearest neighbors algorithm (k-NN)](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm) is one of the simplest machine learning algorithms and is used for classification and regression. In both cases, the input consists of the  k  closest training examples in the feature space. The output depends on whether  k -NN is used for classification or regression:\n\n* In  k-NN classification, the output is a class membership. An object is classified by a majority vote of its neighbors, with the object being assigned to the class most common among its  k  nearest neighbors ( k  is a positive integer, typically small). If  k=1 , then the object is simply assigned to the class of that single nearest neighbor.\n\n* In  k-NN regression, the output is the property value for the object. This value is the average of the values of its  k  nearest neighbors.","aefba3aa":"# Feature Selection\n\n> We drop unnecessary columns\/features and keep only the useful ones for our experiment. Column PassengerId is only dropped from Train set because we need PassengerId in Test set while creating Submission file to Kaggle.","4ccbd5aa":"1. # Name Feature\nLet's first extract titles from Name column.","58eb0227":"In this section, we select the appropriate features to train our classifier.\nHere, we create new features based on existing features.\nWe also convert categorical features into numeric form.\n\n","921a0a69":"6. Parch vs. Survival","51049733":"# 2) Support Vector Machine (SVM)\n[Support Vector Machine (SVM)](https:\/\/en.wikipedia.org\/wiki\/Support_vector_machine) model is a Supervised Learning model used for classification and regression analysis. It is a representation of the examples as points in space, mapped so that the examples of the separate categories are divided by a clear gap that is as wide as possible. New examples are then mapped into that same space and predicted to belong to a category based on which side of the gap they fall.\n\nIn addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces. Suppose some given data points each belong to one of two classes, and the goal is to decide which class a new data point will be in. In the case of support vector machines, a data point is viewed as a  p -dimensional vector (a list of  p  numbers), and we want to know whether we can separate such points with a  (p\u22121) -dimensional hyperplane.\n\nWhen data are not labeled, supervised learning is not possible, and an unsupervised learning approach is required, which attempts to find natural clustering of the data to groups, and then map new data to these formed groups. The clustering algorithm which provides an improvement to the support vector machines is called support vector clustering and is often used in industrial applications either when data are not labeled or when only some data are labeled as a preprocessing for a classification pass.\n\nIn the below code, [SVC](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html) stands for Support Vector Classification.","3e6af85b":"8. Age vs. Survival","7757847b":"# 4.  Age Feature\n> We first fill the NULL values of Age with a random number between (mean_age - std_age) and (mean_age + std_age).\n> We then create a new column named AgeBand. This categorizes age into 5 different age range.\n> \n> ","3f1813bf":"We convert the categorical value of Sex into numeric. We represent 1 as female and 0 as male.","1e882cc1":"\n# NOTE:\n1) From Pclass violinplot, we can see that:\n\n* 1st Pclass has very few children as compared to other two classes.\n* 1st Plcass has more old people as compared to other two classes.\n* Almost all children (between age 0 to 10) of 2nd Pclass survived.\n* Most children of 3rd Pclass survived.\n* Younger people of 1st Pclass survived as compared to its older people.\n\n\n2) From Sex violinplot, we can see that:\n\nMost male children (between age 0 to 14) survived.\nFemales with age between 18 to 40 have better survival chance.","b5717783":"Relationship between Features and Survival\nIn this section, we analyze relationship between different features with respect to Survival. We see how different feature values show different survival chance. We also plot different kinds of diagrams to visualize our data and findings.","4c15aa53":"3. Pclass & Sex vs. Survival","74722484":"# Finding relations between features and survival","d76a8c39":"# 6. SibSp & Parch Feature\n> Combining SibSp & Parch feature, we create a new feature named FamilySize.","acd8d965":"1.  Pclass vs. Survival","59d96b48":"# 1) Logistic Regression\n[Logistic regression](https:\/\/en.wikipedia.org\/wiki\/Logistic_regression), or logit regression, or logit model is a regression model where the dependent variable (DV) is categorical. This article covers the case of a binary dependent variable\u2014that is, where it can take only two values, \"0\" and \"1\", which represent outcomes such as pass\/fail, win\/lose, alive\/dead or healthy\/sick. Cases where the dependent variable has more than two outcome categories may be analysed in multinomial logistic regression, or, if the multiple categories are ordered, in ordinal logistic regression.","959972a1":"We now convert the categorical value of **Embarked** into numeric.\nWe represent 0 as S, 1 as C and 2 as Q.","29ca6cf6":"# Accuracy scores:\n*  DTree => 86.87%\n*  RF => 86.87%\n*  KNN => 85.30%\n*  SVM => 82.94%\n*  LR => 80.58%\n*  L-SVC => 79.69%\n*  Perceptron => 78.23%\n*  NB => 77.67%\n*  SGD => 80.36%","90385173":"> Now, Create FareBand. We divide the Fare into 4 category range.","0a45fa79":"# NOTE:\nFrom the above plot, it can be seen that:\n\n* Almost all females from Pclass 1 and 2 survived.\n* Females dying were mostly from 3rd Pclass.\n* Males from Pclass 1 only have slightly higher survival chance than Pclass 2 and 3.","17693b6a":"# 5. Fare Feature\n> Replace missing Fare values with the median of Fare.","b3cab0d4":"# NOTE:\nHeatmap of Correlation between different features:\n\n* Positive numbers = Positive correlation, i.e. increase in one feature will increase the other feature & vice-versa.\n* Negative numbers = Negative correlation, i.e. increase in one feature will decrease the other feature & vice-versa.","acd32636":"# NOTE:\n**About data shows that:**\n* Having FamilySize upto 4 (from 2 to 4) has better survival chance.\n* FamilySize = 1, i.e. travelling alone has less survival chance.\n* Large FamilySize (size of 5 and above) also have less survival chance.\n\nLet's create a new feature named IsAlone. This feature is used to check how is the survival chance while travelling alone as compared to travelling with family.","06392e3d":"This is my First Kaggle Notebook","3ae6bd5b":"4.  Pclass, Sex & Embarked vs. Survival","e10b0dbe":"2. Sex vs. Survival","e0611b93":"In our case, we focus on which features have strong positive or negative correlation with the Survived feature.\n\n","b1a892bb":" 7. SibSp vs. Survival","c6428b48":"5. Embarked vs. Survived","2ba9ab4c":"It means test dataset have 418 rows and 11 columns","d3d6c6ac":"Now, we convert the categorical Title values into numeric form.","30873ecb":"# Classification & Accuracy\n> Define training and testing set","7d314b04":"There are 86 rows with missing Age, 327 rows with missing Cabin and 1 row with missing Fare information.","cc4fae1b":"# 7) Gaussian Naive Bayes\n[Naive Bayes](https:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier) classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features.\n\n[Bayes' theorem](https:\/\/en.wikipedia.org\/wiki\/Bayes%27_theorem) (alternatively Bayes' law or Bayes' rule) describes the probability of an event, based on prior knowledge of conditions that might be related to the event. For example, if cancer is related to age, then, using Bayes' theorem, a person's age can be used to more accurately assess the probability that they have cancer, compared to the assessment of the probability of cancer made without knowledge of the person's age.\n\nNaive Bayes is a simple technique for constructing classifiers: models that assign class labels to problem instances, represented as vectors of feature values, where the class labels are drawn from some finite set. It is not a single algorithm for training such classifiers, but a family of algorithms based on a common principle: all naive Bayes classifiers assume that the value of a particular feature is independent of the value of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 10 cm in diameter. A naive Bayes classifier considers each of these features to contribute independently to the probability that this fruit is an apple, regardless of any possible correlations between the color, roundness, and diameter features.\n\n","cbfb3638":"# 5) Decision Tree\nA [decision tree](https:\/\/en.wikipedia.org\/wiki\/Decision_tree) is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes). The paths from root to leaf represent classification rules.","56b1104a":"> This shows that travelling alone has only 30% survival chance.","80ab4ddb":"# Create Submission File for Kaggle Competition","11f2294f":"# Confusion Matrix\nA [confusion matrix](https:\/\/en.wikipedia.org\/wiki\/Confusion_matrix), also known as an error matrix, is a specific table layout that allows visualization of the performance of an algorithm. Each row of the matrix represents the instances in a predicted class while each column represents the instances in an actual class (or vice versa). The name stems from the fact that it makes it easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another).\n\nIn predictive analytics, a table of confusion (sometimes also called a confusion matrix), is a table with two rows and two columns that reports the number of false positives, false negatives, true positives, and true negatives. This allows more detailed analysis than mere proportion of correct classifications (accuracy). Accuracy is not a reliable metric for the real performance of a classifier, because it will yield misleading results if the data set is unbalanced (that is, when the numbers of observations in different classes vary greatly). For example, if there were 95 cats and only 5 dogs in the data set, a particular classifier might classify all the observations as cats. The overall accuracy would be 95%, but in more detail the classifier would have a 100% recognition rate for the cat class but a 0% recognition rate for the dog class.\n\nHere's another guide explaining [Confusion Matrix with example.](https:\/\/www.dataschool.io\/simple-guide-to-confusion-matrix-terminology\/)\n                 Predicted Positive  Predicted Negative\nActualPositive      TP                  FN\nActualNegative      FN                  TN\nIn this (Titanic problem) case:\n\n* **True Positive**: The classifier predicted Survived and the passenger actually Survived.\n* **True Negative**: The classifier predicted Not Survived and the passenger actually Not Survived.\n* **False Postiive**: The classifier predicted Survived but the passenger actually Not Survived.\n* **False Negative**: The classifier predicted Not Survived but the passenger actually Survived.\n \nIn the example code below, we plot a confusion matrix for the prediction of **Random Forest Classifier** on our training dataset. This shows how many entries are correctly and incorrectly predicted by our classifer.","958a5558":"# NOTE:\nFemales have better survival chance"}}