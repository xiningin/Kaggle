{"cell_type":{"851638cb":"code","db6f799f":"code","25cbddaf":"code","1d5f62d7":"code","8eb7cb48":"code","32dfa04c":"code","896870a2":"code","d8a95057":"code","94fb4f48":"code","025be7ce":"code","6e0086a9":"code","63733d7f":"code","be847cd7":"code","09b6079e":"code","62b90ff6":"code","9cea45bb":"code","4d1b07fc":"code","ff3de0e3":"markdown","c05e97bb":"markdown","cfc7731d":"markdown","acb539f1":"markdown","441c1ae3":"markdown","166df950":"markdown","900aac09":"markdown"},"source":{"851638cb":"package_paths = [\n    '..\/input\/pytorch-image-library\/pytorch-image-models-master\/pytorch-image-models-master',\n]\nimport sys;\n\nfor pth in package_paths:\n    sys.path.append(pth)\n\nimport timm","db6f799f":"import pandas as pd\nimport numpy as np\nimport cv2\nimport torch\nimport torch.nn as nn\nimport albumentations as A\nimport pytorch_lightning as pl\nimport matplotlib.pyplot as plt\n\nfrom torch.utils.data import Dataset, DataLoader\nfrom albumentations.core.composition import Compose, OneOf\nfrom albumentations.augmentations.transforms import CLAHE, GaussNoise, ISONoise\nfrom albumentations.pytorch import ToTensorV2\n\nfrom pytorch_lightning import Trainer, seed_everything\nfrom pytorch_lightning import Callback\nfrom pytorch_lightning.loggers import CSVLogger\nfrom pytorch_lightning.callbacks import ModelCheckpoint, EarlyStopping\n\nfrom sklearn.model_selection import StratifiedKFold","25cbddaf":"class CFG:\n    seed = 42\n    model_name = 'tf_efficientnet_b3_ns'\n    checkpoint = \"..\/input\/plant2021-models\/tf_efficientnet_b3_ns.ckpt\"\n    pretrained = False\n    img_size = 512\n    num_classes = 12\n    batch_size = 32\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","1d5f62d7":"PATH = \"..\/input\/plant-pathology-2021-fgvc8\/\"\nTEST_DIR = PATH + 'test_images\/'","8eb7cb48":"seed_everything(CFG.seed)","32dfa04c":"df_all = pd.read_csv(PATH + \"train.csv\")\nlabels = list(df_all['labels'].value_counts().keys())\nlabels_dict = dict(zip(labels, range(12)))","896870a2":"sub = pd.read_csv(PATH + \"sample_submission.csv\")\nsub.head()","d8a95057":"class PlantDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.image_id = df['image'].values\n        self.labels = df['labels'].values\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        image_id = self.image_id[idx]\n        label = self.labels[idx]\n        \n        image_path = TEST_DIR + image_id\n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        augmented = self.transform(image=image)\n        image = augmented['image']\n        return {'image':image, 'target': label}","94fb4f48":"def get_transform(phase: str):\n    if phase == 'train':\n        return Compose([\n            A.RandomResizedCrop(height=CFG.img_size, width=CFG.img_size),\n            A.HorizontalFlip(p=0.5),\n            A.ShiftScaleRotate(p=0.5),\n            A.RandomBrightnessContrast(p=0.5),\n            A.Normalize(),\n            ToTensorV2(),\n        ])\n    else:\n        return Compose([\n            A.Resize(height=CFG.img_size, width=CFG.img_size),\n            A.Normalize(),\n            ToTensorV2(),\n        ])","025be7ce":"test_dataset = PlantDataset(sub, get_transform('valid'))\ntest_loader = DataLoader(test_dataset, batch_size=CFG.batch_size, shuffle=False, num_workers=2)","6e0086a9":"class CustomResNet(nn.Module):\n    def __init__(self, model_name='resnet18', pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        in_features = self.model.get_classifier().in_features\n        self.model.fc = nn.Linear(in_features, CFG.num_classes)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x\n    \n    \nclass CustomEfficientNet(nn.Module):\n    def __init__(self, model_name='tf_efficientNet_b0_ns', pretrained=True):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        in_features = self.model.get_classifier().in_features\n        self.model.classifier = nn.Linear(in_features, CFG.num_classes)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x","63733d7f":"from collections import OrderedDict\n\ndef fix_model_state_dict(state_dict):\n    new_state_dict = OrderedDict()\n    for k, v in state_dict.items():\n        name = k\n        if name.startswith('model.'):\n            name = name[6:]  # remove 'model.' of dataparallel\n        new_state_dict[name] = v\n    return new_state_dict","be847cd7":"# model = CustomResNet(model_name=CFG.model_name, pretrained=CFG.pretrained)\nmodel = CustomEfficientNet(model_name=CFG.model_name, pretrained=CFG.pretrained)","09b6079e":"weight = torch.load(CFG.checkpoint)['state_dict']\nmodel.load_state_dict(fix_model_state_dict(weight))","62b90ff6":"model.cuda()\nmodel.eval()\n\npredictions = []\nfor batch in test_loader:\n    image = batch['image'].cuda()\n    with torch.no_grad():\n        outputs = model(image)\n        preds = outputs.argmax(1).detach().cpu().numpy()\n        predictions.append(preds)","9cea45bb":"inv_labels_dict = {v: k for k, v in labels_dict.items()}\ninv_labels_dict","4d1b07fc":"sub['labels'] = np.concatenate(predictions)\nsub = sub.replace({\"labels\": inv_labels_dict})\nsub.to_csv('submission.csv', index=False)\nsub.head()","ff3de0e3":"# Import","c05e97bb":"# Define Model","cfc7731d":"# Plant 2021 with PyTorch Lightning\nThis notebook uses the models learned in the following notebooks for inference.\n[Training notebook](https:\/\/www.kaggle.com\/pegasos\/plant2021-pytorch-lightning-starter-training)","acb539f1":"# Config","441c1ae3":"# Inference","166df950":"# Define Dataset","900aac09":"### Load images that have been pre-resized by AnkurSingh to speed up the learning process. https:\/\/www.kaggle.com\/c\/plant-pathology-2021-fgvc8\/discussion\/227032"}}