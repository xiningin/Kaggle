{"cell_type":{"00839d7b":"code","9fd77e15":"code","245e2619":"code","2c669d1a":"code","9851fe4c":"code","330da047":"code","e27484fa":"code","2ba367f9":"code","46516256":"code","4414e76e":"code","0cbe3f71":"code","6bf35128":"code","04951aa3":"code","b24b34d1":"code","388ecb24":"code","d662e1a9":"code","4c13972b":"code","828a7487":"code","3f1d928c":"code","d97a1290":"code","e239e664":"code","d01d286f":"code","0ad4a4f2":"code","08cd816c":"code","1a0a642b":"markdown","374c3746":"markdown","be62fe87":"markdown","ed6dda77":"markdown","07b08728":"markdown","14904951":"markdown","30822f27":"markdown"},"source":{"00839d7b":"import numpy\nimport pandas","9fd77e15":"from pandas import read_csv\n\n#import os\n#print(os.listdir(\"..\/input\/diamonds\"))\n\nfileName='..\/input\/diamonds\/diamonds.csv'\nData= read_csv(fileName)","245e2619":"print(\"Dimention of the data is \",Data.shape) ","2c669d1a":"Data.head()","9851fe4c":"types = Data.dtypes\ntypes","330da047":"Data.info()","e27484fa":"description = Data.describe()\ndescription","2ba367f9":"Data[\"cut\"].value_counts()","46516256":"Data[\"color\"].value_counts()","4414e76e":"Data[\"clarity\"].value_counts()","0cbe3f71":"from sklearn.preprocessing import LabelEncoder\n\nclass DataCleaning:\n    '''This class to preprocessing data '''\n    \n\n    def droppingZeros(self):\n        global Data\n        \n        '''  2-Min value of \"x\", \"y\", \"z\" are zero this indicates\n        that there are faulty values in data that represents dimensionless or 2-dimensional diamonds.\n        So we need to filter it'''\n        Data = Data.drop(Data[Data[\"x\"]==0].index)\n        Data = Data.drop(Data[Data[\"y\"]==0].index)\n        Data = Data.drop(Data[Data[\"z\"]==0].index)\n    \n        return Data.shape\n    \n    def outliersData(self):\n        '''This function to remove outliers values'''\n        \n        global Data\n        Data = Data[(Data[\"depth\"]<75)&(Data[\"depth\"]>45)]\n        Data = Data[(Data[\"table\"]<80)&(Data[\"table\"]>40)]\n        Data = Data[(Data[\"x\"]<30)]\n        Data = Data[(Data[\"y\"]<30)]\n        Data = Data[(Data[\"z\"]<30)&(Data[\"z\"]>2)]\n           \n        return Data.shape\n    \n    def unNamedClos(self):\n        '''This function to delete Unnamed colmuns which are indecis just '''\n        global Data\n        \n        Data.drop(Data.columns[0],axis=1,inplace=True)\n        return Data\n    \n    def Encoding(self):\n        '''This function to convert categorial attaribute to numeric values'''\n        \n        global Data\n        encoder=LabelEncoder()\n        \n        Data['color']=encoder.fit_transform(Data['color'])\n        Data_mapping={index: label for index, label in enumerate(encoder.classes_)}\n        \n        Data['cut']=encoder.fit_transform(Data['cut'])\n        Data_mapping={index: label for index, label in enumerate(encoder.classes_)}\n        \n        Data['clarity']=encoder.fit_transform(Data['clarity'])\n        Data_mapping={index: label for index, label in enumerate(encoder.classes_)}\n        \n        return Data","6bf35128":"p1=DataCleaning()\np1.droppingZeros()\np1.outliersData()\np1.unNamedClos()\np1.Encoding()","04951aa3":"import matplotlib.pyplot as plt\nimport seaborn as sns","b24b34d1":"class dataVis:\n    '''This class to visualize data '''\n\n    '''Histogram'''\n    def hist(self): \n        global Data\n        hist=Data.hist(figsize=(9,9))\n\n        return hist\n    \n    '''Pairplot'''\n    def pairPlot(self):\n        global Data\n        pair=sns.pairplot(Data, hue=\"cut\")\n\n        return pair\n    \n    '''Boxplot'''\n    def boxPlot(self):\n        global Data\n        box=Data.plot(kind='box', subplots=True, layout=(3,4), sharex=False, figsize=(12,12))\n        \n        return box\n    \n    '''Corrolation Matrix'''\n    def corr(self): \n        global Data        \n        plt.subplots(figsize=(10,8))\n        correlations = Data.corr(method='pearson')\n        corr=sns.heatmap(correlations, square=True, annot=True)\n\n        return corr","388ecb24":"dv = dataVis()","d662e1a9":"dv.hist()","4c13972b":"dv.pairPlot()","828a7487":"dv.boxPlot()","3f1d928c":"dv.corr()","d97a1290":"# KNN Classification\nfrom pandas import read_csv\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\n\narray = Data.values\nX = array[:,Data.columns!='price']\nY = array[:,6]\nnum_folds = 10\nkfold = KFold(n_splits=10)\nmodel = KNeighborsClassifier()\nresults = cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())","e239e664":"#naive bayes \nfrom pandas import read_csv\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\n\n\narray = Data.values\nX = array[:,Data.columns!='price']\nY = array[:,6]\n\n\nnum_folds = 10\nkfold = KFold(n_splits=10)\nmodel = GaussianNB() \nresults = cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())","d01d286f":"#random forest regressor\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor \n\narray = Data.values\nX = array[:,Data.columns!='price']\nY = array[:,6]\n\nnum_folds = 10\nkfold = KFold(n_splits=10)\nmodel = RandomForestRegressor()\nresults = cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())","0ad4a4f2":"#Desicion Tree\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\n\n\narray = Data.values\nX = array[:,Data.columns!='price']\nY = array[:,6]\n\nmodel = DecisionTreeRegressor()\nresults = cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())","08cd816c":"#Linear Regression\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\n\narray = Data.values\nX = array[:,Data.columns!='price']\nY = array[:,6]\n\nmodel = LinearRegression()\nresults = cross_val_score(model, X, Y, cv=kfold)\nprint(results.mean())","1a0a642b":"#### Let's look on our data set","374c3746":"### Correlation Matrix Plot.","be62fe87":"The Dataset consists of 53940 row and 11 columns. ","ed6dda77":"### Loading Data for ML","07b08728":"# Data visualisation ","14904951":"# Diamond price prediction","30822f27":"# Data Cleaning"}}