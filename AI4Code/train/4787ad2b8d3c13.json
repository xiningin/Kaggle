{"cell_type":{"ca097426":"code","6eef8e1c":"code","2b4705b9":"code","00d1ce6d":"code","e75a86d1":"code","38a50e72":"code","3ca508ae":"code","59c5403b":"code","8e4d6b3d":"code","408a7014":"code","92b49972":"code","11c3631a":"code","f7e020a1":"code","37011bd1":"code","9263d2e8":"code","7271a32b":"code","39662270":"code","ab415c38":"code","d380ce09":"code","7e048ed7":"code","0fb7f74f":"code","372c0f50":"code","d2e2a6ce":"code","9e4c03d0":"code","0299c2d0":"code","32de549b":"code","04fb9e8c":"code","9166afd1":"markdown","d1e2d987":"markdown","2e4ef9dd":"markdown","92538f3a":"markdown","a8253bea":"markdown","097b3c58":"markdown","06f771ef":"markdown","3df806ce":"markdown","09998c7a":"markdown","2aff9209":"markdown","7ff5c510":"markdown","45734d9f":"markdown","e64360c1":"markdown","c2e08f25":"markdown","70ca3ffa":"markdown","96691f1b":"markdown","6cdf08ef":"markdown","e50023c6":"markdown","1e290cd3":"markdown","67d4de44":"markdown","6baa7c0e":"markdown","b5efcdd3":"markdown","867d1c82":"markdown"},"source":{"ca097426":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6eef8e1c":"movies=pd.read_csv('..\/input\/mr-data\/movies.csv')  # movies data\nratings= pd.read_csv('..\/input\/mr-data\/ratings.csv')  # ratings data\nmovies.head(2) # movies dataset visualization","2b4705b9":"ratings.head(2)  # ratings dataset visualization","00d1ce6d":"movies['genres'].unique()","e75a86d1":"ratings['rating'].unique()","38a50e72":"movies['title'].unique()","3ca508ae":"sns.countplot(ratings['rating'])","59c5403b":"plt.figure(figsize=(10,8))\nratings['rating'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True)\nplt.show()","8e4d6b3d":"ratings=ratings[['userId','movieId','rating']] #separate columns from timestamp column\nratings_df=ratings.groupby(['userId','movieId']).agg(np.max) #Groupby data\nratings_df.head()","408a7014":"count_ratings=ratings.groupby('rating').count() #count all ratings\ncount_ratings","92b49972":"count_ratings['perc_total']=round(count_ratings['userId']*100\/count_ratings['userId'].sum(),\n                                  1)\ncount_ratings","11c3631a":"# PLotting of each ratings\ncount_ratings['perc_total'].plot.pie()  #pie plot","f7e020a1":"count_ratings['perc_total'].plot.bar()  # bar plot","37011bd1":"genres=movies['genres']\ngenres.head()  # visualization of genres column from movie dataset","9263d2e8":"genre_list=\" \"\nfor index,row in movies.iterrows():\n    genre_list+=row.genres+\"|\"\ngenre_list_split=genre_list.split(\"|\")\nnew_list=list(set(genre_list_split))\nnew_list.remove('')\nnew_list","7271a32b":"m=movies.copy() #make a copy of movies dataset","39662270":"for genre in new_list:\n    m[genre]=m.apply(lambda _:int(genre in _.genres),axis=1)\nm.head()","ab415c38":"avg=pd.DataFrame(ratings.groupby('movieId')['rating'].agg(['mean','count']))\navg # make a dataframe for each movie id with its corresponding ratings mean and count","d380ce09":"avg['movieId']=avg.index\navg # add the movieid column","7e048ed7":"np.percentile(avg['count'],70)","0fb7f74f":"np.percentile(avg['count'],50)","372c0f50":"idx2title={int(row['movieId']):row['title']\n          for _,row in movies.iterrows()}\nidx2title","d2e2a6ce":"title2idx={j:i for i,j in idx2title.items()}\ntitle2idx","9e4c03d0":"highratings=ratings[ratings.rating>=4]\nhighratings","0299c2d0":"itemsets=[[idx2title[mov] for mov in highratings[highratings.userId==user].movieId]\n         for user in highratings.userId]\nitemsets","32de549b":"from mlxtend.preprocessing import TransactionEncoder\nte=TransactionEncoder()\ntr_ary=te.fit(itemsets).transform(itemsets)\nDF=pd.DataFrame(tr_ary,columns=te.columns_)\nDF.head()","04fb9e8c":"from mlxtend.frequent_patterns import apriori, association_rules\nf=apriori(DF, min_support=0.2, use_colnames=True, max_len=2)\nrules=association_rules(f,metric='lift',min_threshold=2)\nrules.head()","9166afd1":" # MOVIE RECOMMENDATION ENGINE\n![image.png](attachment:18b981c5-719a-4745-9517-4ccd0c384d18.png)  ![image.png](attachment:458f996f-f20b-4e7a-b741-d81d1a29a2dd.png)\n\n**MOVIE RECOMMENDATION ENGINE** : A Engine which will recommend best movie to the user","d1e2d987":"**On the above 50 % movie has average count 3**","2e4ef9dd":"![image.png](attachment:245c2216-8026-4ca7-95f4-2b9fc66eb841.png)","92538f3a":"# Recommendation Engine making starts here\n![image.png](attachment:50c35eb0-9b1b-44c6-9158-c65857a9965c.png)","a8253bea":"**On the above display the all movie titles arranged one after the another**","097b3c58":"Pie Plot of Movies ratings","06f771ef":"Importing library files\n1. Pandas\n1. Numpy\n1. Matplotlib\n1. Seaborn","3df806ce":"**On the above display the all movie titles arranged one after the another in reverse order**","09998c7a":"**On the above, groupby data based on : Each user viewed which movies and how much rated for those movies.\nuserid 1 viewed movie ids 1,3,6,47,50 ans so on and gave individual rating for each movie.**","2aff9209":"**Recommendation engine will be made by using Apriori algorithm which is very much popular algorithm for Association Rule Mining.**","7ff5c510":"**Countplot of user ratings**","45734d9f":"**Find all types of unique ratings of movies**","e64360c1":"**On the above rows has been converted into columns and columns has been converted into rows.\nMovie does not rated is False and rated is True.**","c2e08f25":"**Load the dataset through pandas library**","70ca3ffa":"**Make a Data with title of the movie and genre of the data. If the genre of the movie matches the entire column then it shows 1.\nLike movie id 3 whose title is Grumpier Old Men(1995) and genre is Comedy|Romance. This movies genre matches the Romance column very much. '...' indicates there are few columns.**","96691f1b":"**On the above predict the percentage for each ratings. \n1. ratings 5.0 got 13.1 %\n1. ratings 4.5 got 8.5 %\n1. ratings 4.0 got 26.6 %\n1. ratings 3.5 got 13.0 %\n1. ratings 3.0 got 19.9 %\n1. ratings 2.5 got 5.5 %\n1. ratings 2.0 got 7.5 %\n1. ratings 1.5 got 1.8 %\n1. ratings 1.0 got 2.8 %\n1. ratings 0.5 got 1.4 %\nHighest rating is 4.0 and Lowest rating is 1.4 &**","6cdf08ef":"**Find all types of  unique movie genres**","e50023c6":"**On the above, the movie has been recommended to use user where 'antecedents' is the movie column and 'consequents' is the recommended movie column.\nIn the first row if the see the '(2001:A Space Odyssey(1968))' movie then '(Blade Runner(1982))' will be recommended to you for further view and whose confience of the view is 72 % approximately.\nLift column is used for to tell us likelihood of watching both movies together is 2.144151 times more than the likelihood of just watching one movie.\nSupport is the default popularity of an item. In mathematical terms the support of one item is nothing but the ratio of transactions involving one item to the total number of transactions. \nsupport(movie_1)=(All transactions involving movie_1)\/(total transactions)\nConviction compares the probability that X appears without Y if they were dependent with the actual frequency of the appearance of X without Y.\nThreshold in the Apriori algorithm identifies the item sets which are subsets of at least as each transaction is seen as a set of items.**","1e290cd3":"**On the above split the all movie genres from the dataset and used \"set\" data structure for non duplication of genres in the same. \nIf in the column \"|\" finds, it will separate the genres of movies and remove the duplication in the same by using \"set\" data structure.**","67d4de44":"**Display the movie data whose ratings is greater than or equal to 4**","6baa7c0e":"**Find all types of unique movie titles**","b5efcdd3":"**On the above display all movie names whose rating is greater than or equal to 4.0**","867d1c82":"**On the above 70 % movie has average count 7**"}}