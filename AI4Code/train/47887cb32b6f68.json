{"cell_type":{"9298a1ca":"code","fa7c6b40":"code","b08e93a5":"code","58172384":"code","a876e57e":"code","be3bb010":"code","aa89a1da":"code","15f3b406":"code","bfd2ab28":"code","6fd875b2":"code","606d85ab":"code","51bf6e3c":"code","b0a0d425":"code","2dde64b4":"code","f27e784e":"code","ab196501":"code","7b781caf":"code","9d4f2f68":"code","bfae2747":"code","aac7da7c":"code","2c5f94b5":"code","3e7f2cd8":"code","f1786629":"code","874da0d3":"code","997dba17":"code","ce6f2ca3":"code","7ac99860":"code","f7a5b317":"code","2d047c84":"markdown","1ff87200":"markdown","ff8680b5":"markdown","8fd96eda":"markdown","a48a426d":"markdown","bfbf0e8e":"markdown","46d46080":"markdown","bbcab4b2":"markdown"},"source":{"9298a1ca":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Sklearn\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.model_selection import cross_val_score\n\n#Keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom kerastuner.tuners import RandomSearch\nimport keras\nfrom keras.layers import Dense\nfrom sklearn.model_selection import KFold\nimport warnings\n\n\n%matplotlib inline\nsns.set_style('darkgrid')","fa7c6b40":"df=pd.read_csv('..\/input\/water-potability-2\/water_potability.csv', encoding= 'unicode_escape')\ndf.head(5)","b08e93a5":"df.describe()","58172384":"df.info()","a876e57e":"print(df.isnull().sum())","be3bb010":"df['ph']=df['ph'].fillna(df.groupby(['Potability'])['ph'].transform('mean'))\ndf['Sulfate']=df['Sulfate'].fillna(df.groupby(['Potability'])['Sulfate'].transform('mean'))\ndf['Trihalomethanes']=df['Trihalomethanes'].fillna(df.groupby(['Potability'])['Trihalomethanes'].transform('mean'))","aa89a1da":"df.isna().sum()","15f3b406":"df.describe()","bfd2ab28":"\nprint('Distribution of Target Variable within the sample data')\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize=(16,6))\n\ndf.Potability.value_counts().plot(kind='bar', color=['orange', 'steelblue'], rot=0, ax=ax[0])\n# Iterrating over the bars one-by-one\nfor bar in ax[0].patches:\n    ax[0].annotate(format(bar.get_height(), 'd'), (bar.get_x() + bar.get_width() \/ 2, bar.get_height()),\n                                                    ha='center', va='center', size=15, xytext=(0, -10),\n                                                    textcoords='offset points')\nax[0].tick_params(left=False, labelleft=False)\nax[0].xaxis.set_tick_params(labelsize=20)\n\nlabels = list(df['Potability'].unique())\n## use the wedgeprops and textprops arguments to style the wedges and texts, respectively\nax[1].pie(df['Potability'].value_counts(), labels=labels, autopct = '%1.1f%%',\n          colors=['orange', 'steelblue'], explode = [0.005]*len(labels),\n          textprops={'size': 'x-large'},\n         wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'})\n\nplt.show()\n\n","6fd875b2":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True)","606d85ab":"non_potable = df.query(\"Potability == 0\")\npotable = df.query(\"Potability == 1\")\n\nplt.figure(figsize = (15,15))\nfor ax, col in enumerate(df.columns[:9]):\n    plt.subplot(3,3, ax + 1)\n    plt.title(col)\n    sns.kdeplot(x = non_potable[col], label = \"Non Potable\")\n    sns.kdeplot(x = potable[col], label = \"Potable\")\n    plt.legend()\nplt.tight_layout()","51bf6e3c":"sns.pairplot(data=df)","b0a0d425":"X = df.drop(['Potability'], axis=1)\ny = df['Potability']","2dde64b4":"def build_model(hp):\n    model = keras.Sequential()\n    for i in range(hp.Int('num_layers',2,20)):\n        model.add(layers.Dense(units=hp.Int('units_'+str(i),min_value=32,max_value=512,step=32),activation='relu'))\n        model.add(layers.Dense(1, activation='linear'))\n        model.compile(\n        optimizer=tf.keras.optimizers.Adam(\n            hp.Choice('learning_rate', [1e-2, 1e-3, 1e-4])),\n        loss='mean_absolute_error',\n        metrics=['mean_absolute_error'])\n    return model","f27e784e":"tuner = RandomSearch(\n    build_model,\n    objective='val_mean_absolute_error',\n    max_trials=5,\n    executions_per_trial=3,\n    directory='project',\n    project_name='Air Quality Index')","ab196501":"print(tuner.search_space_summary())","7b781caf":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.2,random_state=1)","9d4f2f68":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","bfae2747":"classifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(19, activation = 'relu', input_dim = 9))\n\n# Adding the second hidden layer\nclassifier.add(Dense(20, activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(1, activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","aac7da7c":"classifier.fit(X_train, y_train, batch_size = 20, epochs = 100)","2c5f94b5":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","3e7f2cd8":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred.round())\nsns.heatmap(cm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False)\n#accuracy score\nfrom sklearn.metrics import accuracy_score\nac=accuracy_score(y_test, y_pred.round())\nprint('accuracy of the model: ',ac)","f1786629":"tuner.search(X_train,y_train,epochs=100,validation_data=(X_test,y_test))","874da0d3":"print(tuner.results_summary())","997dba17":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.losses import sparse_categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.model_selection import KFold\nfrom keras.regularizers import l2\nfrom keras.initializers import VarianceScaling\nimport numpy as np","ce6f2ca3":"acc_per_fold = []\nloss_per_fold = []\nno_epochs = 25\noptimizer = Adam()\nverbosity = 1\nnum_folds = 10\nloss_function = sparse_categorical_crossentropy","7ac99860":"from sklearn.model_selection import StratifiedKFold\n\nseed = 7\n#Define the K-fold Cross Validator\nkfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)","f7a5b317":"#K-fold Cross Validation model evaluation\nfold_no=1\ncvscores = []\nfor train,test in kfold.split(X,y):    \n    #Define the model architecture\n    model = Sequential()\n    model.add(Dense(19, input_dim=9,\n                    kernel_regularizer=l2(0.0001), # weight regularizer\n                    kernel_initializer=VarianceScaling(), # initializer\n                    activation='tanh'))\n    model.add(Dense(12,\n                    kernel_regularizer=l2(0.0001), # weight regularizer\n                    kernel_initializer=VarianceScaling(), # initializer \n                    activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    # Compile model\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    # Fit the model\n    print(f'Training for fold {fold_no} ...')\n    model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=0,validation_data=(X_test, y_test))\n      \n    # evaluate the model\n    scores = model.evaluate(X_test, y_test, verbose=0)\n#     print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n#     cvscores.append(scores[1] * 100)\n    print(f'Score for fold {fold_no}: {model.metrics_names[0]} of {scores[0]}; {model.metrics_names[1]} of {scores[1]*100}%')\n    acc_per_fold.append(scores[1] * 100)\n    loss_per_fold.append(scores[0])\n    \n    \n    fold_no = fold_no + 1\n    \n    #Compile the model\n    model.compile(loss=loss_function,optimizer='Adam',metrics=['accuracy'])\n# print(\"%.2f%% (+\/- %.2f%%)\" % (numpy.mean(cvscores), numpy.std(cvscores)))\n    \n    \n\n\n# == Provide average scores ==\nprint('------------------------------------------------------------------------')\nprint('Score per fold')\nfor i in range(0, len(acc_per_fold)):\n    print('------------------------------------------------------------------------')\n    print(f'> Fold {i+1} - Loss: {loss_per_fold[i]} - Accuracy: {acc_per_fold[i]}%')\nprint('------------------------------------------------------------------------')\nprint('Average scores for all folds:')\nprint(f'> Accuracy: {np.mean(acc_per_fold)} (+- {np.std(acc_per_fold)})')\nprint(f'> Loss: {np.mean(loss_per_fold)}')\nprint('------------------------------------------------------------------------')\n    ","2d047c84":"<h3 style=\"background-color:#333;font-family:Lato;font-size:250%;text-align:center;border-radius: 5px;color:#fff;padding:15px\">Hyperparameters<\/h3>","1ff87200":"<h3 style=\"background-color:#333;font-family:Lato;font-size:250%;text-align:center;border-radius: 5px;color:#fff;padding:15px\">Cross Validation<\/h3>","ff8680b5":"<h3 style=\"background-color:#333;font-family:Lato;font-size:250%;text-align:center;border-radius: 5px;color:#fff;padding:15px\">Problem Statement<\/h3>","8fd96eda":"<p>Potable water, also known as drinking water, comes from surface and ground sources and is treated to levels that that meet state and federal standards for consumption.<\/p>\n\n<p>Maintaining good water quality is essential to human health, the environment, agricultural industries, and the recreational value of waterways, wetlands, and coastal waters.<\/p>\n\n<p>According to that, I have searched for a water quality dataset and tried to figure out what constitutes safe, potable water and apply machine learning to it to distinguish potable and non-potable water<\/p>","a48a426d":"*     How many number of hidden layers we should have?\n*     How many number of neurons we should have in hidden layers?\n*     Learning Rate","bfbf0e8e":"<h3 style=\"background-color:#333;font-family:Lato;font-size:250%;text-align:center;border-radius: 5px;color:#fff;padding:15px\">Libraries and Utilities<\/h3>","46d46080":"<h3 style=\"background-color:#333;font-family:Lato;font-size:250%;text-align:center;border-radius: 5px;color:#fff;padding:15px\">Loading & Cleaning Data<\/h3>","bbcab4b2":"<h1 style=\"font-size:30px;line-height:1;padding:0px 0 20px;margin:0;font-weight:600;font-family:Oswald\">Assignment # 2 \u2013 EEM 600<\/h1>\n<h1 style=\"font-size:40px;line-height:1;padding:0px 0 20px;margin:0;font-weight:600;font-family:Oswald\">Design of Artificial Neural Networks System<\/h1>\n<h2>Part (A):<\/h2>\n<p>In this assignment you will practice writing backpropagation code, and training Neural \nNetworks. The goals of this assignment are as follows:<\/p>\n<ul>\n    <li>To set a problem by the student, then solve it. Please select the problem by yourself.<\/li>\n    <li>To understand ANNs (not yet the CNN) and how they are arranged in multi-layered \narchitectures.<\/li>\n    <li>To implement various update rules used to optimize Neural Networks\n implement dropout to regularize networks.<\/li>\n    <li>To show and effectively cross-validate, and find the best hyperparameters for Neural \nNetwork architecture.<\/li>\n    <\/ul>\n \n    \n<h2>Part (B):<\/h2>\n    <p>Cross-validate and find the best hyperparameters for Neural Network architecture:<\/p>\n    <ul>\n    <li>Show the plotting curves.<\/li>\n    <li>Explain the resulting code.<\/li>\n    <\/ul>\n<p>It is required from you to design an Artificial Neural Networks System, with quite large number \n    of inputs, outputs, and associated training patterns. (10 marks).<\/p>"}}