{"cell_type":{"46df779f":"code","e19d4112":"code","a19e0290":"code","a1b13079":"code","1bdec745":"code","e211f3fa":"code","87f5cdaf":"code","0f789681":"markdown","935c726c":"markdown","92eabb82":"markdown"},"source":{"46df779f":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e19d4112":"def preprocess(df):\n    #drop id\n    df.drop('id',inplace=True,axis=1)\n    #add constant\n    df['const'] = 1\n    \n    if 'target' in df.columns:\n        y = df['target'].values\n        df.drop('target',inplace=True,axis=1)\n    else:\n        y = None\n    \n    X = df.values \n    \n    return X, y\n","a19e0290":"class OLS():    \n    \"\"\"\"My own Ordinary Least Squares Class\"\"\"    \n    def __init__(self):\n        return\n    \n    def fit(self,X,y):\n        #find least squares solution and store the weights in W\n        self.X = X\n        self.y = y\n        self.W = np.linalg.lstsq(X,y,rcond=None)[0]\n        return \n\n    def predict(self,X):\n        # matrix multiply X with the transposed weights\n        return X @ self.W.T    \n    \n    def score(self):\n        #calculate the root mean squared error\n        y_hat = self.predict(self.X)\n        print(f'\\nRoot mean squared error: {np.sqrt(np.mean(((self.y-y_hat)**2)))}')\n        return\n    \n    def summary(self,names):\n        print('OLS Summary\\n\\nVariable\\tCoefficient')\n        for n,w in zip(names, self.W):\n            print(f'{n}\\t{w}' )\n        self.score()\n        return","a1b13079":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')\n\n#sanity check\nassert np.all(test_df['id'].values ==  sub['id'].values)\n\nX_train, y_train = preprocess(train_df)\nX_test, y_test = preprocess(test_df)","1bdec745":"ols = OLS()\nols.fit(X_train,y_train)\nols.summary(train_df.columns)","e211f3fa":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n\nclf = LinearRegression(fit_intercept=False)\nclf.fit(X_train,y_train)\n\nprint('OLS Summary\\n\\nVariable\\tCoefficient')\nfor n,w in zip(train_df.columns,clf.coef_):\n    print(f'{n}\\t{w}' )\n\nprint(f'\\nRoot mean squared error: {np.sqrt(mean_squared_error(clf.predict(X_train),y_train))}')","87f5cdaf":"sub['target'] = ols.predict(X_test)\n\nsub.to_csv('submission.csv',index=False)","0f789681":"## Ordinary Least Squares in just NumPy \n\nFor learning purposes. ","935c726c":"Great! The solution is the same! \ud83d\ude0c\n\nLets submit our predictions","92eabb82":"## Let's compare it with the sklearn LinearRegression"}}