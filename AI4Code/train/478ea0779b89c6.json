{"cell_type":{"23120719":"code","65e756e9":"code","77717b25":"code","b3f434c1":"code","a3c9bac1":"code","f7ce698b":"code","cf6948c3":"code","bf8e6443":"code","b78beb3a":"code","27b487f1":"code","c173f68d":"code","b1ee7df7":"code","54170997":"code","b83fb5ea":"code","5fd9b4f7":"code","650b2dc8":"code","590eb0f6":"code","7b5ba344":"code","e129ef2e":"code","373273ea":"markdown","84644066":"markdown","e3c550de":"markdown","a1ec1391":"markdown","b13dc5fc":"markdown","6f2b2019":"markdown","051702f8":"markdown","cd9d72fc":"markdown","aba76df3":"markdown","351da2e7":"markdown"},"source":{"23120719":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import linregress\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65e756e9":"df = pd.read_csv('..\/input\/flight-delay-prediction\/Jan_2019_ontime.csv')\ndf.drop(['Unnamed: 21'], axis=1, inplace = True)","77717b25":"df.head()","b3f434c1":"df.info()","a3c9bac1":"dflinreg=df\ndflinreg.dropna(inplace = True)\nlinregress(dflinreg['DEP_DEL15'], dflinreg['ARR_DEL15'])","f7ce698b":"linregress(dflinreg['DISTANCE'], dflinreg['ARR_DEL15'])","cf6948c3":"dftemp=df[['DIVERTED','DEP_DEL15']].copy()\ndftemp.dropna(inplace=True)\nlinregress(dftemp['DIVERTED'], dftemp['DEP_DEL15'])","bf8e6443":"dftemp[['DIVERTED','DEP_DEL15']].groupby(['DIVERTED']).mean()","b78beb3a":"delayPerAirport=df[['DEP_DEL15','ORIGIN_AIRPORT_ID']].groupby(['ORIGIN_AIRPORT_ID']).mean()\ndelayPerAirport.reset_index(inplace=True)\nplt.scatter(delayPerAirport['ORIGIN_AIRPORT_ID'],delayPerAirport['DEP_DEL15'])","27b487f1":"delayPerAirport=df[['ARR_DEL15','DEST_AIRPORT_ID']].groupby(['DEST_AIRPORT_ID']).mean()\ndelayPerAirport.reset_index(inplace=True)\nplt.scatter(delayPerAirport['DEST_AIRPORT_ID'],delayPerAirport['ARR_DEL15'])","c173f68d":"delayPerAirport=df[['ARR_DEL15','ORIGIN_AIRPORT_ID']].groupby(['ORIGIN_AIRPORT_ID']).mean()\ndelayPerAirport.reset_index(inplace=True)\nplt.scatter(delayPerAirport['ORIGIN_AIRPORT_ID'],delayPerAirport['ARR_DEL15'])","b1ee7df7":"delayDepPerTimeSlot= df[['DEP_TIME_BLK', 'DEP_DEL15']].groupby(['DEP_TIME_BLK']).mean()\ndelayDepPerTimeSlot","54170997":"#Function to transfer the arrival time to an arrival time block\ndef timeToBlock(t):\n    block=\"Nan\"\n    if(t> 0 and t< 600): block=\"0001-0559\"\n    if(t>559 and t< 700): block= \"0600-0659\"\n    if(t>659 and t< 800): block= \"0700-0759\"\n    if(t>759 and t< 900): block= \"0800-0859\"\n    if(t>859 and t< 1000): block= \"0900-0959\"\n    if(t>959 and t< 1100): block= \"1000-1059\"\n    if(t>1059 and t< 1200): block= \"1100-1159\"\n    if(t>1159 and t< 1300): block= \"1200-1259\"\n    if(t>1259 and t< 1400): block= \"1300-1359\"\n    if(t>1359 and t< 1500): block= \"1400-1459\"\n    if(t>1459 and t< 1600): block= \"1500-1559\"\n    if(t>1559 and t< 1700): block= \"1600-1659\"\n    if(t>1659 and t< 1800): block=\"1700-1759\"\n    if(t>1759 and t< 1900): block= \"1800-1859\"\n    if(t>1859 and t< 2000): block= \"1900-1959\"\n    if(t>1959 and t< 2100): block= \"2000-2059\"\n    if(t>2059 and t< 2200): block= \"2100-2159\"\n    if(t>2159 and t< 2300): block= \"2200-2259\"\n    if(t>2259 and t< 2400): block=\"2300-2359\"\n    return block","b83fb5ea":"df['ARR_TIME_BLK']=df['ARR_TIME'].apply(timeToBlock)\ndf.head()","5fd9b4f7":"delayArrPerTimeSlot= df[['ARR_TIME_BLK', 'ARR_DEL15']].groupby(['ARR_TIME_BLK']).mean()\ndelayArrPerTimeSlot","650b2dc8":"from sklearn.model_selection import train_test_split\n\nX=df.drop(['ARR_DEL15','CANCELLED', 'OP_UNIQUE_CARRIER', 'TAIL_NUM','OP_CARRIER_FL_NUM'\n           ,'DEST_AIRPORT_SEQ_ID','ARR_TIME_BLK', 'ORIGIN', 'OP_CARRIER', 'DEP_TIME_BLK',\n          'DEST','ORIGIN_AIRPORT_SEQ_ID'], axis=1)\ndf.dropna(inplace=True)\n#X=  X.select_dtypes(exclude=['object'])\ny=df['ARR_DEL15']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\nX.head()","590eb0f6":"df.isnull().any()","7b5ba344":"from sklearn.ensemble import RandomForestClassifier\n\nclf= RandomForestClassifier(max_depth=2, random_state=0)\nclf.fit(X_train,y_train)","e129ef2e":"clf.score(X_test, y_test)","373273ea":"We can do the same for the relation between the arrival block and the probability of arrival delay. However, No arrival block variable exists so we first had to create such a variable. ","84644066":"Diverted flights probably are more likely to be delayed than 'regular' flights. ","e3c550de":"There seems to be a wide variety in between airports. However, most airports stay withing the 0 - 0.3 range. \nIn the next step, the avarage delay on arrival is compared to the arrival airport:","a1ec1391":"It seems obvious that there is a correlation between the departure delay and the arrival delay. However, we don't expect a perfect correlation as a pilot can still catch up. ","b13dc5fc":"A longer flight (higher distance) means that more could go wrong so we would also expect a positive correlation \nbetween distance and delay","6f2b2019":"Again, the numbers vary quite a lot although most of the avarages are in the 0 - 0.3 array. ","051702f8":"# Delay prediction\nCreate a dataframe of possible predictors\nI will remove a list of variables:\n* Variables to be predicted; ARR_DEL15 and CANCELLED\n* OP_UNIQUE_CARRIER --> Same as OP_CARRIER_AIRLINE_ID\n* OP_CARRIER --> also used for carrier identification but not unique so less usefull as OP_CARRIER_AIRLINE_ID\n* TAIL_NUM, OP_CARRIER_FL_NUM --> Doesn't make sense to use the flight number as a predictor\n* DEP_Time_BLK --> use DEP_TIME\n* DEST --> Seems to consist of same information as other included variables\n* DEST_AIRPORT_SEQ_ID and ORIGIN_AIRPORT_SEQ_ID --> use constant airport ids for the moment. Could be interesting if there would be trends in airport performance\n","cd9d72fc":"# Data exploration\nWe will start by getting a feel of the data and check whether some intuitive relations hold. I will use the linregress to calculate linear correlations as this also give me an idea on whether the correlation is significant. ","aba76df3":"Probably some airports are better at time management than other airports. Let's see whether this is the case.\nWe start by calculating the average of the binary delay indicator for each airport:","351da2e7":"Another relationship that sounds intuitive but needs verification is whether it is actually true that  the number of departure and arrival delays increase during the day and decrease during the night. We start by comparing the historical probability that a flight was in delay per departure block."}}