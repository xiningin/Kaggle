{"cell_type":{"4f0565a4":"code","c8a463c1":"code","5c5e8267":"code","50fe7c75":"code","04ddfb70":"code","8b18131e":"code","5e2b916f":"code","5f5d8ac2":"code","e4a881cd":"code","2082bc4c":"code","fd93e15d":"code","26add82a":"code","cc8b5a0c":"code","7b282c01":"code","b11020a3":"code","aa89a7ed":"code","4f6ae5bd":"code","e3b5f8db":"code","80747d93":"code","0d1b72c4":"code","a2be1b58":"code","06e82bfc":"code","26db2d83":"code","9369fbdd":"code","1a11bca9":"code","4010b180":"code","293061b3":"code","4f989379":"code","6637e592":"code","27797c24":"code","f83eab18":"code","0952e2ca":"code","ea29f36d":"code","0af99f09":"code","1b9b75e9":"code","c1ba7b4c":"code","099b3f38":"code","e82b3b32":"code","4a54cb18":"code","9f7af27a":"code","1fc78b7f":"code","fdb8b7c9":"code","f5cf6d7d":"code","ac645c4e":"code","0e7ad6f8":"code","f969f03b":"code","ee2a3746":"code","23eacedb":"code","7defe7c1":"code","a33acd39":"code","27e87ca6":"code","a900f3ab":"code","a40d38cf":"code","dff7b3c5":"code","40efc197":"markdown","2e8cd98f":"markdown","a64a757a":"markdown","51644cb6":"markdown","8e3264d2":"markdown","3f6c52e2":"markdown"},"source":{"4f0565a4":"import sqlite3\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport sklearn as sk\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import pyplot\n#from fuzzywuzzy import fuzz\n#from fuzzywuzzy import process\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n#import xgboost as xgb\n#from xgboost import XGBRegressor\n\nfifa_extra = pd.read_csv('..\/input\/completedataset\/CompleteDataset.csv')\n\n#new feature to add --> Potential - Overall instead of potential.\n\nimport plotly as py\nimport plotly.graph_objs as go\nimport ipywidgets as widgets\nimport numpy as np\npy.offline.init_notebook_mode(connected =True)","c8a463c1":"FIFAFINAL = pd.DataFrame(data = fifa_extra, columns = ['Name' , 'Age', 'Nationality','Overall', 'Potential', 'Club' ,'Value', 'Wage', 'Special', 'Preferred Positions','Acceleration', 'Aggression', 'Agility', 'Balance', 'Ball control',\n       'Composure', 'Crossing', 'Curve', 'Dribbling', 'Finishing',\n       'Free kick accuracy', 'GK diving', 'GK handling', 'GK kicking',\n       'GK positioning', 'GK reflexes', 'Heading accuracy', 'Interceptions',\n       'Jumping', 'Long passing', 'Long shots', 'Marking', 'Penalties',\n       'Positioning', 'Reactions', 'Short passing', 'Shot power',\n       'Sliding tackle', 'Sprint speed', 'Stamina', 'Standing tackle',\n       'Strength', 'Vision', 'Volleys'])\n\ndef turnvalueintonumber(value):\n    #turn the wages and values into numbers\n    if 'M' in value:\n        a = float(value[1:(len(value)-1)])\n        b = a*1000\n        return b\n    elif 'K' in value:\n        b = float(value[1:(len(value)-1)])\n        return b\n\nFIFAFINAL['Value2'] = FIFAFINAL['Value'].apply(turnvalueintonumber)\nFIFAFINAL['Wage2'] = FIFAFINAL['Wage'].apply(turnvalueintonumber)\nFIFAFINAL2 = FIFAFINAL.dropna()\nFIFAFINAL2 = FIFAFINAL2.drop(columns = ['Value','Wage'])\nFIFAFINAL2['1'] = 1\n\n#FIFAFINAL2 IS JUST FIFAFINAL WITHOUT THE NA VALUES.\n\nlistprem = ['Bournemouth',\n'Arsenal',\n'Brighton & Hove Albion',\n'Burnley',\n'Swansea City',\n'Chelsea',\n'Crystal Palace',\n'Everton',\n'Stoke City',\n'Huddersfield Town',\n'Leicester City',\n'Liverpool',\n'Manchester City',\n'Manchester United',\n'Newcastle United',\n'Southampton',\n'Tottenham Hotspur',\n'Watford',\n'West Ham United',\n'West Bromwich Albion']\n\nFIFAFINAL2['BPL'] = FIFAFINAL2['Club'].apply(lambda x: 1 if x in listprem else 0)","5c5e8267":"def positions(X):\n    if 'GK' in str(X):\n        position = 'GK'\n    elif 'ST' in str(X):\n        position = 'Striker'\n    elif 'LW' in str(X):\n        position = 'Striker'\n    elif 'RW' in str(X):\n        position = 'Striker'\n    elif 'CM' in str(X):\n        position = 'Midfielder'\n    elif 'CDM' in str(X):\n        position = 'Midfielder'\n    elif 'CAM' in str(X):\n        position = 'Midfielder'\n    elif 'RM' in str(X):\n        position = 'Midfielder'\n    elif 'LM' in str(X):\n        position = 'Midfielder'\n    else:\n        position = 'Defender'\n    return position\n\nFIFAFINAL2['Pos'] = FIFAFINAL2['Preferred Positions'].apply(lambda x: positions(x))","50fe7c75":"FIFA4 = pd.merge(left = FIFAFINAL2, right= pd.get_dummies(FIFAFINAL2['Pos']),right_index=True,left_index=True,how='inner')","04ddfb70":"#Lets prepare the dataframes to go into the random forrest classifier.","8b18131e":"FIFA6 = FIFA4\ndef turntonum(numb):\n    if '+' in str(numb):\n        b = str(numb).split('+')\n        x2 = float(b[0]) + float(b[1])\n    elif '-' in str(numb):\n        b = str(numb).split('-')\n        x2 = float(b[0]) - float(b[1])\n    else:\n        x2 = float(numb)\n    return x2","5e2b916f":"FIFA6[\"Acceleration\"]=FIFA4[\"Acceleration\"].apply(lambda x: turntonum(x))\nFIFA6[\"Agility\"]=FIFA4[\"Agility\"].apply(lambda x: turntonum(x))\nFIFA6[\"Balance\"]=FIFA4[\"Balance\"].apply(lambda x: turntonum(x))\nFIFA6[\"Ball control\"]=FIFA4[\"Ball control\"].apply(lambda x: turntonum(x))\nFIFA6[\"Composure\"]=FIFA4[\"Composure\"].apply(lambda x: turntonum(x))\nFIFA6[\"Crossing\"]=FIFA4[\"Crossing\"].apply(lambda x: turntonum(x))\nFIFA6[\"Curve\"]=FIFA4[\"Curve\"].apply(lambda x: turntonum(x))\nFIFA6[\"Dribbling\"]=FIFA4[\"Dribbling\"].apply(lambda x: turntonum(x))\nFIFA6[\"Finishing\"]=FIFA4[\"Finishing\"].apply(lambda x: turntonum(x))\nFIFA6[\"Free kick accuracy\"]=FIFA4[\"Free kick accuracy\"].apply(lambda x: turntonum(x))\nFIFA6[\"GK diving\"]=FIFA4[\"GK diving\"].apply(lambda x: turntonum(x))\nFIFA6[\"GK handling\"]=FIFA4[\"GK handling\"].apply(lambda x: turntonum(x))\nFIFA6[\"GK kicking\"]=FIFA4[\"GK kicking\"].apply(lambda x: turntonum(x))\nFIFA6[\"GK positioning\"]=FIFA4[\"GK positioning\"].apply(lambda x: turntonum(x))\nFIFA6[\"GK reflexes\"]=FIFA4[\"GK reflexes\"].apply(lambda x: turntonum(x))\nFIFA6[\"Heading accuracy\"]=FIFA4[\"Heading accuracy\"].apply(lambda x: turntonum(x))\nFIFA6[\"Jumping\"]=FIFA4[\"Jumping\"].apply(lambda x: turntonum(x))\nFIFA6[\"Long passing\"]=FIFA4[\"Long passing\"].apply(lambda x: turntonum(x))\nFIFA6[\"Long shots\"]=FIFA4[\"Long shots\"].apply(lambda x: turntonum(x))\nFIFA6[\"Marking\"]=FIFA4[\"Marking\"].apply(lambda x: turntonum(x))\nFIFA6[\"Penalties\"]=FIFA4[\"Penalties\"].apply(lambda x: turntonum(x))\nFIFA6[\"Positioning\"]=FIFA4[\"Positioning\"].apply(lambda x: turntonum(x))\nFIFA6[\"Reactions\"]=FIFA4[\"Reactions\"].apply(lambda x: turntonum(x))\nFIFA6[\"Short passing\"]=FIFA4[\"Short passing\"].apply(lambda x: turntonum(x))\nFIFA6[\"Shot power\"]=FIFA4[\"Shot power\"].apply(lambda x: turntonum(x))\nFIFA6[\"Sliding tackle\"]=FIFA4[\"Sliding tackle\"].apply(lambda x: turntonum(x))\nFIFA6[\"Sprint speed\"]=FIFA4[\"Sprint speed\"].apply(lambda x: turntonum(x))\nFIFA6[\"Stamina\"]=FIFA4[\"Stamina\"].apply(lambda x: turntonum(x))\nFIFA6[\"Standing tackle\"]=FIFA4[\"Standing tackle\"].apply(lambda x: turntonum(x))\nFIFA6[\"Strength\"]=FIFA4[\"Strength\"].apply(lambda x: turntonum(x))\nFIFA6[\"Vision\"]=FIFA4[\"Vision\"].apply(lambda x: turntonum(x))\nFIFA6[\"Volleys\"]=FIFA4[\"Volleys\"].apply(lambda x: turntonum(x))\nFIFA6[\"Interceptions\"]=FIFA4[\"Interceptions\"].apply(lambda x: turntonum(x))\n","5f5d8ac2":"FIFA6['Aggression'] = FIFA4['Aggression'].apply(lambda x:turntonum(x))","e4a881cd":"FIFA6['GK'] = FIFA4['GK'].apply(lambda x: float(x))\nFIFA6['Midfielder'] = FIFA4['Midfielder'].apply(lambda x: float(x))\nFIFA6['Defender'] = FIFA4['Defender'].apply(lambda x: float(x))\nFIFA6['Striker'] = FIFA4['Striker'].apply(lambda x: float(x))","2082bc4c":"X1 = FIFA6.drop(columns = ['Preferred Positions', 'Wage2','Name','Club', 'Nationality','Pos','1', 'BPL'])\nY1 = FIFA6['Wage2']","fd93e15d":"X_train, X_test, Y_train, Y_test = train_test_split(X1,Y1,test_size=0.1, shuffle = True)","26add82a":"#Cleaning done","cc8b5a0c":"model = LinearRegression().fit(X = X_train, y = Y_train)\n\nmodel2 = RandomForestRegressor().fit(X = X_train, y = Y_train)\n\nprint(\"Linear Regression model 1\")\nprint (\"R squared of train set:\"  + str(model.score(X=X_train, y = Y_train)))\nprint (\"R squared of test set:\" + str(model.score(X=X_test, y=Y_test)))\n\n\nprint(\"Random forrest model 1\")\nprint (\"R squared of train set:\"  + str(model2.score(X=X_train, y = Y_train)))\nprint (\"R squared of test set:\" + str(model2.score(X=X_test, y=Y_test)))","7b282c01":"#listzz = FIFA6['Club'].unique()\n#listz = pd.DataFrame(data = listzz)\n#listz.to_csv(r'C:\\Users\\JabarivasalA\\Documents\\Football prediction\\lol2.csv',sep=',')\n\nprint (\"All the above steps have been run, some magic has been done to these clubs to separate clubs in the top 5 Europe leagues\"\n        \" and it is imported back in below \")","b11020a3":"model = RandomForestRegressor()","aa89a7ed":"imported = pd.read_csv('..\/input\/importz\/importz.csv')\n\nFIFA7 = pd.merge(left = FIFA6, right = imported, left_on = 'Club', right_on = 'club')","4f6ae5bd":"FIFA7.loc[FIFA7['country'].isnull(),'country'] = 0\nFIFA7.loc[FIFA7['country'] == 'Beskitas', 'country'] = 0","e3b5f8db":"FIFA8 = pd.merge(left = FIFA7, right = pd.get_dummies(data = FIFA7['country']), left_index=True, right_index = True)","80747d93":"FIFA8.loc[FIFA8['rev2'].isnull(),'rev2'] = 0\nX2 = FIFA8.drop(columns = ['Preferred Positions', 'Wage2','Name','Club', 'Nationality','Pos','1','club',0,'country', 'index', 'BPL', 'rev2'])\nY2 = FIFA8['Wage2']\n","0d1b72c4":"X_train, X_test, Y_train, Y_test = train_test_split(X2,Y2,test_size=0.1, shuffle = True)","a2be1b58":"model3 = LinearRegression().fit(X = X_train, y = Y_train)","06e82bfc":"model3.score(X = X_test, y = Y_test)","26db2d83":"model3.score(X = X_train, y = Y_train)","9369fbdd":"#82% accuracy!","1a11bca9":"model4 = RandomForestRegressor().fit(X = X_train, y = Y_train)\n\nprint (model4.score(X = X_test, y = Y_test))\nprint (model4.score(X = X_train, y = Y_train))","4010b180":"mergz = pd.merge(left = FIFA8, right = pd.DataFrame(model4.predict(X = X2)), left_index = True, right_index=True)","293061b3":"#89% accruacy! I'll take that!","4f989379":"mergz = mergz.rename(columns = {\"0_y\":\"predictedwage\"})\n#mergz = mergz.drop(columns = \"0_x\")\nmergz2 = mergz[mergz['country']!=0]\n#mergz2 only contains players in the top 5 Europe leagues.","6637e592":"mergz['potover'] = mergz['Potential'] - mergz['Overall']\nmergz['overpaid'] = mergz['Wage2'] - mergz['predictedwage']\n\nmergz2['potover'] = mergz2['Potential'] - mergz2['Overall']\nmergz2['overpaid'] = mergz2['Wage2'] - mergz2['predictedwage']\n","27797c24":"fig, ax = pyplot.subplots(figsize=(10,10))\nplt.scatter(y = mergz['overpaid'], x = mergz['potover'])\nplt.ylabel('Overpaid')\nplt.xlabel('potential increase')","f83eab18":"#Will potential-overall make a difference to our model?","0952e2ca":"FIFA6['potover'] = FIFA6['Potential']-FIFA6['Overall']","ea29f36d":"X1 = FIFA6.drop(columns = ['Preferred Positions', 'Wage2','Name','Club', 'Nationality','Pos','1'])\nY1 = FIFA6['Wage2']","0af99f09":"X_train, X_test, Y_train, Y_test = train_test_split(X1,Y1,test_size=0.1, shuffle = True)","1b9b75e9":"model8 = RandomForestRegressor()\nmodel8.fit(X= X_train, y = Y_train)","c1ba7b4c":"print (model8.score(X= X_train, y = Y_train), model8.score(X=X_test, y=Y_test))","099b3f38":"def countryadaptor(x):\n    b = 0\n    if x == \"Spain\":\n        b = 1\n    elif x == \"England\":\n        b = 2\n    elif x == \"Italy\":\n        b = 3\n    elif x == \"Germany\":\n        b = 4\n    elif x == \"France\":\n        b = 5\n    return b\n        \nmergz['Countrynumb'] = mergz['country'].apply(lambda x: countryadaptor(x))\nmergz2['Countrynumb'] = mergz2['country'].apply(lambda x: countryadaptor(x))","e82b3b32":"#so we've looked at wages. Now lets look at what positions are important ","4a54cb18":"plt.figure(figsize = (20,20))\nlayout = go.Layout(\n    title = 'Wage prediction model'\n    , yaxis = dict(title = 'predictedwages'),\n    xaxis = dict(\n        title = 'actualwages',\n        \n    ),autosize=False,\n    width=1250,\n    height=1250\n)\n\ntrace1 = go.Scatter(showlegend = True, x = mergz['Wage2'], y = mergz['predictedwage'], mode = 'markers', hovertext=mergz['Name'],\n                    \n                    marker=dict(\n        \n        color = mergz2['Countrynumb'],\n        colorscale = 'Jet',\n        \n        showscale=True\n    )\n                   )\n\nfig = go.Figure(data = [trace1], layout = layout)\npy.offline.iplot(fig)","9f7af27a":"plt.figure(figsize = (20,20))\nlayout = go.Layout(\n    title = 'Wage prediction model'\n    , yaxis = dict(title = 'overpaidby'),\n    xaxis = dict(\n        title = 'actualwages',\n        \n    ),autosize=False,\n    width=1250,\n    height=1250\n)\n\ntrace1 = go.Scatter(showlegend = True, x = mergz2['Wage2'], y = mergz2['overpaid'], mode = 'markers', hovertext=mergz2['Name'],\n                    \n                    marker=dict(\n        \n        color = mergz2['Countrynumb'],\n        colorscale = 'Jet',\n        \n        showscale=True\n    )\n                   )\n\nfig = go.Figure(data = [trace1], layout = layout)\npy.offline.iplot(fig)","1fc78b7f":"mergz3 = mergz2[(mergz2['Countrynumb'] == 1) | (mergz2['Countrynumb'] == 2)]\n\ndef positionnumbering(x):\n    b = 0\n    if x == 'GK':\n        b = 1\n    elif x == 'Defender':\n        b = 2\n    elif x == 'Midfielder':\n        b = 3\n    elif x == 'Striker':\n        b = 4\n    return b\nmergz['posnumber'] = mergz['Pos'].apply(lambda x: positionnumbering(x))","fdb8b7c9":"plt.figure(figsize = (20,20))\nlayout = go.Layout(\n    title = 'Wage prediction model'\n    , yaxis = dict(title = 'overpaidby'),\n    xaxis = dict(\n        title = 'actualwages',\n        \n    ),autosize=False,\n    width=1250,\n    height=1250\n)\n\ntrace1 = go.Scatter(showlegend = True, x = mergz['Wage2'], y = mergz['overpaid'], mode = 'markers', hovertext=mergz['Name'],\n                    \n                    marker=dict(\n        \n        color = mergz['posnumber'],\n        colorscale = 'RdBu',\n        \n        showscale=True\n    )\n                   )\n\nfig = go.Figure(data = [trace1], layout = layout)\npy.offline.iplot(fig)\nmergz.groupby(by = 'Pos').mean()[['overpaid','Wage2']]","f5cf6d7d":"a = mergz.groupby(by = 'Nationality').mean()[['overpaid','Age', 'Wage2']]\na.sort_values(by = 'overpaid')","ac645c4e":"#lets view the same stat for top 5 leagues.\nb = mergz2.groupby(by = 'Nationality').mean()[['overpaid','Age', 'Wage2']]\nb.sort_values(by = 'overpaid')","0e7ad6f8":"mergz.groupby(by = 'Pos').mean()\n#This allows us to see where the labour market is tight. It is tight for strikers which is why they are overpaid. A team with a limited budget should therefore buy midfielders or goalkeepers.\")","f969f03b":"#lets take out the club factor.","ee2a3746":"#lets predict total value.","23eacedb":"FIFA8['potover'] = FIFA8['Potential'] - FIFA8['Overall']","7defe7c1":"X3 = FIFA8.drop(columns = ['Preferred Positions','Name','Club', 'Nationality','Pos','1','club',0,'country', 'index', 'BPL', 'rev2','Value2'])\nY3 = FIFA8['Value2']\nX_train, X_test, Y_train, Y_test = train_test_split(X3,Y3,test_size=0.1, shuffle = True)\nmodel6 = LinearRegression().fit(X = X_train, y = Y_train)","a33acd39":"model6.score(X = X_test, y = Y_test)","27e87ca6":"predictions = model6.predict(X=X3).reshape(17725,1)\nactuals = np.array(Y3).reshape(17725,1)\n\npredarrays = np.concatenate((predictions, actuals), axis = 1)\npredarrays\n\ndataframez = pd.DataFrame(data = predarrays)\n\nmerger = pd.merge(left = dataframez, right = FIFA8, left_index = True, right_index = True)\nmerger.drop(columns = 1)\nmerger = merger.rename(index = str, columns = {'0_x':'predictedvalue'})\nmerger['posnumber'] = merger['Pos'].apply(lambda x: positionnumbering(x))\nmerger['Countrynumb'] = merger['country'].apply(lambda x: countryadaptor(x))","a900f3ab":"merger['predictedvalue'] = merger['predictedvalue'].apply(lambda x: x\/1000)\nmerger['Value2'] = merger['Value2'].apply(lambda x: x\/1000)","a40d38cf":"plt.figure(figsize = (15,15))\nlayout = go.Layout(\n    title = 'Wage prediction model'\n    , yaxis = dict(title = 'predictedvalue'),\n    xaxis = dict(\n        title = 'actualvalue',\n        \n    ),autosize=False,\n    width=1250,\n    height=1250\n)\n\ntrace1 = go.Scatter(showlegend = True, x = merger['Value2'], y = merger['predictedvalue'], mode = 'markers', hovertext=mergz['Name'],\n                    \n                    marker=dict(\n        \n        color = merger['posnumber'],\n        colorscale = 'RdBu',\n        \n        showscale=True\n    )\n                   )\n\nfig = go.Figure(data = [trace1], layout = layout)\npy.offline.iplot(fig)\nmergz.groupby(by = 'Pos').mean()[['overpaid','Wage2']]","dff7b3c5":"plt.figure(figsize = (15,15))\nlayout = go.Layout(\n    title = 'Wage prediction model'\n    , yaxis = dict(title = 'predictedvalue'),\n    xaxis = dict(\n        title = 'actualvalue',\n        \n    ),autosize=False,\n    width=1250,\n    height=1250\n)\n\ntrace1 = go.Scatter(showlegend = True, x = merger['Value2'], y = merger['predictedvalue'], mode = 'markers', hovertext=mergz['Name'],\n                    \n                    marker=dict(\n        \n        color = merger['Countrynumb'],\n        colorscale = 'Jet',\n        \n        showscale=True\n    )\n                   )\n\nfig = go.Figure(data = [trace1], layout = layout)\npy.offline.iplot(fig)\nmergz.groupby(by = 'Pos').mean()[['overpaid','Wage2']]","40efc197":"**4. Random Forrest model**","2e8cd98f":"**3. Linear Regression model**","a64a757a":"**5. Visualisations**","51644cb6":"**2. Data wrangling and creating new variables from existing data**","8e3264d2":"**1. Importing packages**","3f6c52e2":"**Contents**\n\nIn this notebook, I use a couple of machine learning models to calculate a footballers expected wage given their FIFA stats, position, nationality and the league they play in.\n\n1. Importing packages\n2. Data wrangling and creating new variables from existing data\n3. Linear Regression model\n4. Random Forrest model\n5. Visualisations\n\n"}}