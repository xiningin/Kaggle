{"cell_type":{"7e973673":"code","94d04399":"code","7a883d61":"code","e642fc2b":"code","5b918a56":"code","74dd05c3":"markdown","905b46d7":"markdown","33c0f21b":"markdown","8e3439ae":"markdown","82230d17":"markdown","90000173":"markdown","6bbb7065":"markdown"},"source":{"7e973673":"import numpy as np\nimport math\nimport plotly.graph_objects as go","94d04399":"def spheres(size, clr, dist=0): \n    \n    # Set up 100 points. First, do angles\n    theta = np.linspace(0,2*np.pi,100)\n    phi = np.linspace(0,np.pi,100)\n    \n    # Set up coordinates for points on the sphere\n    x0 = dist + size * np.outer(np.cos(theta),np.sin(phi))\n    y0 = size * np.outer(np.sin(theta),np.sin(phi))\n    z0 = size * np.outer(np.ones(100),np.cos(phi))\n    \n    # Set up trace\n    trace= go.Surface(x=x0, y=y0, z=z0, colorscale=[[0,clr], [1,clr]])\n    trace.update(showscale=False)\n\n    return trace","7a883d61":"def orbits(dist, offset=0, clr='white', wdth=2): \n    \n    # Initialize empty lists for eac set of coordinates\n    xcrd=[]\n    ycrd=[]\n    zcrd=[]\n    \n    # Calculate coordinates\n    for i in range(0,361):\n        xcrd=xcrd+[(round(np.cos(math.radians(i)),5)) * dist + offset]\n        ycrd=ycrd+[(round(np.sin(math.radians(i)),5)) * dist]\n        zcrd=zcrd+[0]\n    \n    trace = go.Scatter3d(x=xcrd, y=ycrd, z=zcrd, marker=dict(size=0.1), line=dict(color=clr,width=wdth))\n    return trace","e642fc2b":"def annot(xcrd, zcrd, txt, xancr='center'):\n    strng=dict(showarrow=False, x=xcrd, \n               y=0, z=zcrd, text=txt, \n               xanchor=xancr, font=dict(color='white',size=12))\n    return strng","5b918a56":"diameter_km = [200000, 4878, 12104, 12756, 6787, 142796, 120660, 51118, 48600]\ndiameter = [((i \/ 12756) * 2) for i in diameter_km]\ndistance_from_sun = [0, 57.9, 108.2, 149.6, 227.9, 778.6, 1433.5, 2872.5, 4495.1]\n\n# Create spheres for the Sun and planets\ntrace0=spheres(diameter[0], '#ffff00', distance_from_sun[0]) # Sun\ntrace1=spheres(diameter[1], '#87877d', distance_from_sun[1]) # Mercury\ntrace2=spheres(diameter[2], '#d23100', distance_from_sun[2]) # Venus\ntrace3=spheres(diameter[3], '#325bff', distance_from_sun[3]) # Earth\ntrace4=spheres(diameter[4], '#b20000', distance_from_sun[4]) # Mars\ntrace5=spheres(diameter[5], '#ebebd2', distance_from_sun[5]) # Jupyter\ntrace6=spheres(diameter[6], '#ebcd82', distance_from_sun[6]) # Saturn\ntrace7=spheres(diameter[7], '#37ffda', distance_from_sun[7]) # Uranus\ntrace8=spheres(diameter[8], '#2500ab', distance_from_sun[8]) # Neptune\n\n# Set up orbit traces\ntrace11 = orbits(distance_from_sun[1]) # Mercury\ntrace12 = orbits(distance_from_sun[2]) # Venus\ntrace13 = orbits(distance_from_sun[3]) # Earth\ntrace14 = orbits(distance_from_sun[4]) # Mars\ntrace15 = orbits(distance_from_sun[5]) # Jupyter\ntrace16 = orbits(distance_from_sun[6]) # Saturn\ntrace17 = orbits(distance_from_sun[7]) # Uranus\ntrace18 = orbits(distance_from_sun[8]) # Neptune\n\n# Use the same to draw a few rings for Saturn\ntrace21 = orbits(23, distance_from_sun[6], '#827962', 3) \ntrace22 = orbits(24, distance_from_sun[6], '#827962', 3) \ntrace23 = orbits(25, distance_from_sun[6], '#827962', 3)\ntrace24 = orbits(26, distance_from_sun[6], '#827962', 3) \ntrace25 = orbits(27, distance_from_sun[6], '#827962', 3) \ntrace26 = orbits(28, distance_from_sun[6], '#827962', 3)\n\nlayout=go.Layout(title = 'Solar System', showlegend=False, margin=dict(l=0, r=0, t=0, b=0),\n                  #paper_bgcolor = 'black',\n                  scene = dict(xaxis=dict(title='Distance from the Sun', \n                                          titlefont_color='black', \n                                          range=[-7000,7000], \n                                          backgroundcolor='black',\n                                          color='black',\n                                          gridcolor='black'),\n                               yaxis=dict(title='Distance from the Sun',\n                                          titlefont_color='black',\n                                          range=[-7000,7000],\n                                          backgroundcolor='black',\n                                          color='black',\n                                          gridcolor='black'\n                                          ),\n                               zaxis=dict(title='', \n                                          range=[-7000,7000],\n                                          backgroundcolor='black',\n                                          color='white', \n                                          gridcolor='black'\n                                         ),\n                               annotations=[\n                                   annot(distance_from_sun[0], 40, 'Sun', xancr='left'),\n                                   annot(distance_from_sun[1], 5, 'Mercury'),\n                                   annot(distance_from_sun[2], 9, 'Venus'),\n                                   annot(distance_from_sun[3], 9, 'Earth'),\n                                   annot(distance_from_sun[4], 7, 'Mars'),\n                                   annot(distance_from_sun[5], 30, 'Jupyter'),\n                                   annot(distance_from_sun[6], 28, 'Saturn'),\n                                   annot(distance_from_sun[7], 20, 'Uranus'),\n                                   annot(distance_from_sun[8], 20, 'Neptune'),\n                                   ]\n                               ))\n\nfig = go.Figure(data = [trace0, trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8,\n                        trace11, trace12, trace13, trace14, trace15, trace16, trace17, trace18,\n                        trace21, trace22, trace23, trace24, trace25, trace26],\n                layout = layout)\n\nfig.show()","74dd05c3":"## Now Let\u2019s Visualize The Solar System\nNow that we have all the little functions to help us out, we can put it all together and create the entire graph. Here is the code to visualize the solar system with Python:","905b46d7":"# Creating Orbits\n\nIf you look up into the sky, you won\u2019t see orbital lines everywhere. However, in solar system models, we like to draw orbits. Now I will define a new function that we can use for both, orbits as well as for drawing rings around the Saturn:","33c0f21b":"## Defining Annotations\nNow, this is a final function that we need to define. It\u2019s very basic and it will allow us to add the names of the planets to the location of our chosen coordinates.\n\nNote that we are using annotations instead of the marker text because we want the names of the planets to appear outside of the spheres","8e3439ae":"## Now let\u2019s walk through the code above:\n\n    1. We start by creating a few lists that contain the distance from the Sun and the diameter of celestial objects. Note that we had to reduce the size of the Sun by making it much smaller otherwise it would have made it too big for our graph.\n\n    2. While we have maintained the scale to ensure that the sizes of the planets are correct relative to each other, the Sun is not. In addition, the distance of the planets is to scale, for example, Jupyter is 7 times farther from the Sun than Venus.\n\n    3. However, we did not maintain the scale between the planets and the distance to the Sun because we expressed the diameter in kilometres while the distance was expressed in millions of kilometres.\n\n    4. Then we just use the functions defined previously to create traces for each sphere and orbit, including a few rings around Saturn.","82230d17":"## Visualize Solar System: The Sun and Planets\nTo minimize the amount of coding required, I\u2019ll define a function that will do the job of creating spheres for us. It is quite short, although it does require some knowledge of the spherical coordinate system. Alternatively, just accept that I will define the coordinates of a sphere as follows:","90000173":"## Visualize The Solar System\nI first thought to simply use the 3D Scatter plot by creating custom size markers for the Sun and planets. However, this was not ideal as the markers stayed the same size when zoomed in or out.\n\nThis led to unwanted effects such as Saturn\u2019s rings inside the planet and the Sun engulfing all rocky inner planets once zoomed out. This meant that I had to find a different solution to display the Sun and the planets.\n\nFortunately, Plotly also offers a 3D surface plot that I could use for my celestial objects. However, this required drawing several spheres, each different in size and colour.\n\nNow, I will start by importing all the libraries that we need for the task to visualize the solar system with Python:","6bbb7065":"To draw a sphere, we will need to pass an array for the x, y and z coordinates containing the points in space. Note that it is up to us to choose how many points we want to specify, however, if we choose too few, our sphere will not be as round as we would like.\n\nIn this case, we create two arrays containing 100 equally spaced points. Note that theta varies between 0 and 2pi while phi is between 0 and pi.\n\nOnce we have theta and phi, we simply calculate the x, y and z coordinates using the formulas above. Note, I used the size instead of the radius and also specified the distance which tells us the distance from the sun. This is how we can place our spheres in the right places.\n\nAlso note that Plotly requires a 2D array for the z coordinates, therefore, we have filled the first dimension with 1\u2019s, with the second dimension conforming to the formula.\n\nFinally, we define a color scale which can be a range of colors. However, in our case, we just want to have a color for each object, so although we still need to specify at least two arguments, we are simply passing the same color to both"}}