{"cell_type":{"e4085194":"code","9d4b3879":"code","6e2c1742":"code","bb2c354d":"code","85de6746":"code","3f0c3f23":"code","b0060a48":"code","64a32d01":"code","9c389145":"code","02ffca4d":"code","4104bebe":"code","8ab44a67":"markdown","4235f2b0":"markdown","c1d74f28":"markdown"},"source":{"e4085194":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d4b3879":"# Import Required Libraries\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nimport tensorflow as tf\n\nfrom pathlib import Path\nimport os.path","6e2c1742":"# File path\nimage_dir = Path('..\/input\/cat-and-dog\/training_set\/training_set')","bb2c354d":"#Creating dataframe with filepath and labels\nfilepath = list(image_dir.glob('**\/*.jpg'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepath))\nimg_df = pd.DataFrame(data = {\n    'Filepath' : filepath,\n    'Labels' : labels\n})","85de6746":"img_df.Filepath = img_df.Filepath.astype(str)\nimg_df","3f0c3f23":"# train test split\ntrain_df, test_df = train_test_split(img_df, train_size=0.7, shuffle = True, random_state=1)","b0060a48":"# Transform Image\ntrain_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/255,\n    horizontal_flip = True,\n    width_shift_range = 0.2,\n    height_shift_range = 0.2,\n    validation_split = 0.2\n)\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/255\n)","64a32d01":"train_img = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = 'Filepath',\n    y_col = 'Labels',\n    target_size = (224,224),\n    color_mode = 'rgb',\n    class_mode = 'binary',\n    batch_size = 32,\n    shuffle = True,\n    seed =42,\n    subset = 'training'\n)\nval_img = train_generator.flow_from_dataframe(\n    dataframe = train_df,\n    x_col = 'Filepath',\n    y_col = 'Labels',\n    target_size = (224,224),\n    color_mode = 'rgb',\n    class_mode = 'binary',\n    batch_size = 32,\n    shuffle = True,\n    seed = 42,\n    subset = 'validation'\n)\ntest_img = test_generator.flow_from_dataframe(\n    dataframe = test_df,\n    x_col = 'Filepath',\n    y_col = 'Labels',\n    target_size = (244,244),\n    color_mode = 'rgb',\n    class_mode = 'binary',\n    batch_size = 32,\n    shuffle = False\n)\n","9c389145":"# convolutional neural network\ninputs = tf.keras.Input(shape=(224,224,3))\nx = tf.keras.layers.Conv2D(filters = 16, kernel_size=(3,3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3),activation='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs = inputs, outputs = outputs)\n\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = ['accuracy']\n)\n\nhistory = model.fit(\n    train_img,\n    validation_data = val_img,\n    epochs = 100,\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(\n        monitor = 'val_loss',\n        patience = 5,\n        restore_best_weights = True\n        ),\n        tf.keras.callbacks.ReduceLROnPlateau(\n        monitor = 'val_loss',\n        patinence = 3\n        )\n    ])","02ffca4d":"results = model.evaluate(test_img, verbose=0)\nprint('Test Loss: {:.5f}'.format(results[0]))\nprint('Test Accuracy: {:.3f}%'.format(results[1]*100))","4104bebe":"predictions = (model.predict(test_img) >=0.5).astype(np.int)\ncm = confusion_matrix(test_img.labels, predictions, labels=[0,1])\nclr = classification_report(test_img.labels, predictions, labels=[0,1], target_names=[\"CAT\", \"DOG\"])\n\nplt.figure(figsize=(6,6))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\nplt.xticks(ticks=[0.5,1.5], labels=[\"CAT\", \"DOG\"])\nplt.yticks(ticks=[0.5,1.5], labels=[\"CAT\", \"DOG\"])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title(\"Confusion Matrics\")\nplt.show()\n\nprint('Classification Report : \\n',clr)","8ab44a67":"## Creating DataFrame","4235f2b0":"#### Training","c1d74f28":"#### Results"}}