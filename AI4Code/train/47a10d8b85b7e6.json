{"cell_type":{"e8fc0a25":"code","7aeadba4":"code","f901c9d9":"code","2473f713":"code","f3937d4c":"code","4c7e680b":"code","55245bd1":"code","3c429c1d":"code","e62090b8":"code","d989a0d2":"code","97d2fd86":"code","3e354753":"code","76f3b4bd":"code","2df8da10":"code","79495756":"code","fcf6be96":"code","e9ce814f":"code","975e9677":"code","497ccb8c":"code","de2407c2":"code","e6fcabef":"code","832ec202":"code","92f5cd1f":"code","1ac6a654":"code","12063dcf":"code","24337833":"code","2ed56933":"code","a558b7f8":"code","88d98ba8":"code","7d06aaba":"code","ff6a329f":"code","6c0a6bf1":"code","ec7a1a3e":"code","a961d41b":"code","ebd42e5e":"code","9d47c814":"code","72fe34a0":"code","40dd2c0e":"code","6e98c130":"code","340cb43c":"code","e00edcd1":"code","819468d0":"code","76a137c4":"code","de9f0d99":"code","15ef68a6":"code","fc6967ef":"code","ffadf388":"code","0fd752a5":"code","69a6abd6":"code","225aeb95":"code","2b535adb":"code","ee97bd84":"code","79b9bb03":"code","7ecfba0a":"code","fc0b2fe7":"code","7c423d46":"code","f5fd1163":"code","f09ec0aa":"markdown","8e1e5a06":"markdown","e64799c6":"markdown"},"source":{"e8fc0a25":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7aeadba4":"#visualization\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns \n\n# ignore error messages\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f901c9d9":"#assigning CSV files as pandas dataframes\nexample = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\ntrain = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')","2473f713":"example","f3937d4c":"#about 66% of the rows of the train dataset and 1 less column (target)\ntest","4c7e680b":"#are there NaNs?\ntest.isnull().values.any()","55245bd1":"train","3c429c1d":"#are there NaNs?\ntrain.isnull().values.any()","e62090b8":"train.describe(include='all')","d989a0d2":"train.corr().style.background_gradient(cmap='ocean')","97d2fd86":"#find possible outliers\n\n#Drop ID for visualization only\nnoID=train.drop(columns=['id'])\nboxplot1 =noID.boxplot(rot=45)","3e354753":"##Explore TARGET column\nboxplot2=train.boxplot(column=['target'])","76f3b4bd":"train.target.plot(kind='line', color='tan')","2df8da10":"train.target.describe()","79495756":"train.target.nunique()","fcf6be96":"train.target.value_counts()","e9ce814f":"train.plot(kind='density', subplots=True, layout=(26,1), sharex=False, figsize=(12,14))\nplt.show()","975e9677":"# dfs of the different types of data \ncats=train[['id', 'cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7',\n       'cat8', 'cat9']]\nnums=train[['id','cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5',\n       'cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12',\n       'cont13', 'target']]","497ccb8c":"cats.cat0.value_counts().plot(kind='barh', color='darkred', title='Column: Cat0',figsize=(6,3),edgecolor=(0,0,0))","de2407c2":"sns.countplot(cats['cat1'], palette = \"Set3\", edgecolor=(0,0,0))\nplt.xticks()","e6fcabef":"cats.cat2.value_counts().plot(kind='barh', title='Column: Cat2', color='darkorange', figsize=(6,3),edgecolor=(0,0,0))","832ec202":"sns.countplot(cats['cat3'], palette = \"Set2\", edgecolor=(0,0,0))\nplt.xticks()","92f5cd1f":"cats.cat4.value_counts().plot(kind='barh', color='purple', title='Column: Cat4',figsize=(8,3),edgecolor=(0,0,0))","1ac6a654":"sns.countplot(cats['cat5'], palette = \"icefire\", edgecolor=(0,0,0))\nplt.xticks()","12063dcf":"cats.cat6.value_counts().plot(kind='barh', color='forestgreen', title='Column: Cat6',figsize=(8,4),edgecolor=(0,0,0))","24337833":"cats.cat7.value_counts().plot(kind='barh', color='navy', title='Column: Cat7',figsize=(9,2),edgecolor=(0,0,0))","2ed56933":"sns.countplot(cats['cat8'], palette = \"Set1\", edgecolor=(0,0,0))\nplt.xticks()","a558b7f8":"cats.cat9.value_counts().plot(kind='barh', color='salmon', title='Column: Cat9',figsize=(6,5),edgecolor=(0,0,0))","88d98ba8":"#Drop ID for description\nnoID2=cats.drop(columns=['id'])\nnoID2.describe(include='all')","7d06aaba":"from sklearn import preprocessing \nfrom sklearn.preprocessing import LabelEncoder\n\nencoded1=noID2.apply(LabelEncoder().fit_transform)\nencoded1","ff6a329f":"encoded1.corr().style.background_gradient(cmap='YlOrBr')","6c0a6bf1":"#merge \nmerged1=  pd.merge(nums, encoded1, left_index=True, right_index=True, how=\"inner\")\nmerged1","ec7a1a3e":"merged1.corr().style.background_gradient(cmap='cubehelix')","a961d41b":"#Pre-process the dataset for ML\nfrom sklearn import preprocessing\n\n#MinMaxScaler is non-distorting feature-transformer method\nscaled = preprocessing.MinMaxScaler()\n\nminmaxed=scaled.fit_transform(merged1)\n\n#  convert the scaled array to dataframe\ndf1 = pd.DataFrame(minmaxed)\n\n#fix labels\ndf1.columns = ['id', 'cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5', 'cont6',\n       'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12', 'cont13',\n       'target','cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6',\n       'cat7', 'cat8', 'cat9' ]","ebd42e5e":"df1","9d47c814":"df1.corr().style.background_gradient(cmap='rocket')","72fe34a0":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.linear_model import LinearRegression\n\n#Linear regression\nX = df1['cat0'].values.reshape(-1,1)\ny = df1['target'].values.reshape(-1,1)\n","40dd2c0e":"#split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) #train the model","6e98c130":"#Intercept\nprint(regressor.intercept_)\n#Slope\nprint(regressor.coef_)","340cb43c":"#Predict\npred1 = regressor.predict(X_test)\n\n#actual value and predicted value\nLinReg = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': pred1.flatten()})\nLinReg","e00edcd1":"#regression line\n\nplt.scatter(X_test, y_test,  color='seagreen')\nplt.plot(X_test, pred1, color='blue', linewidth=3)\nplt.show()","819468d0":"# first 10 predictions\nfirst10preds=LinReg.head(10)\nc='darkorange', 'darkcyan'\nfirst10preds.plot(kind='bar',figsize=(9,6), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","76a137c4":"#evaluate models\nfrom sklearn.metrics import mean_squared_error \nfrom numpy import sqrt\n\nmse = mean_squared_error(y_test, pred1)\nprint(\"MSE: %.2f\" % mse)\nprint(\"RMSE: %.2f\" % sqrt(mse)) ","de9f0d99":"##Multiple variable regression\n\nX2 = df1[['cat1', 'cat3']].values\ny2 = df1['target'].values ","15ef68a6":"#split the data\nX_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size=0.3, random_state=2)\n\nTworegs = LinearRegression()  \nTworegs.fit(X_train, y_train) #train the model","fc6967ef":"#Predict\npred2 = Tworegs.predict(X_test)\n\n#actual value and predicted value\nMultReg = pd.DataFrame({'Actual': y_test, 'Predicted': pred2.flatten()})\nMultReg","ffadf388":"# first 10 predictions\nfirst10preds=MultReg.head(10)\nc='dimgray', 'darkred'\nfirst10preds.plot(kind='line',figsize=(7,4), color=c)\nplt.show()","0fd752a5":"mse = mean_squared_error(y_test, pred2)\nprint(\"MSE: %.2f\" % mse)\nprint(\"RMSE: %.2f\" % sqrt(mse)) ","69a6abd6":"sansTarget=df1[['id', 'cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5', 'cont6',\n       'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12', 'cont13',\n       'cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6',\n       'cat7', 'cat8', 'cat9']]","225aeb95":"#Bayesian Ridge\nfrom sklearn.linear_model import BayesianRidge \n\nX3, y3 = sansTarget.values, df1.target.values \n  \n# Splitting dataset into training and testing sets \nX_train, X_test, y_train, y_test = train_test_split(X3, y3, test_size = 0.6670, random_state = 3) \n  \n# Creating and training model \nmodel3 = BayesianRidge() \nmodel3.fit(X_train, y_train) \n  \n# Model making a prediction on test data \npred3 = model3.predict(X_test) ","2b535adb":"#Predict\npred3 = model3.predict(X_test)\n\n#actual value and predicted value\nBay = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': pred3.flatten()})\nBay","ee97bd84":"x_ax = range(len(y_test))\nplt.scatter(x_ax, y_test, s=3, color=\"sienna\", label=\"Actual\")\nplt.plot(x_ax, pred3, lw=0.5, color=\"lightseagreen\", label=\"Predicted\")\nplt.show() ","79b9bb03":"# first 10 predictions\nfirst10preds=Bay.head(10)\nc='purple', 'salmon'\nfirst10preds.plot(kind='barh',figsize=(9,6), color=c)\nplt.grid(which='major', linestyle='-', linewidth='0.3', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","7ecfba0a":"#a value of 0 (almost never achieved in practice) would indicate a perfect fit to the data. \n#In general, a lower RMSD is better than a higher one.\n\nmse = mean_squared_error(y_test, pred3)\n\nprint(\"MSE: %.2f\" % mse)\nprint(\"RMSE: %.2f\" % sqrt(mse)) ","fc0b2fe7":"#save\n\nprediction= pd.DataFrame(pred3)\n\nprediction.rename(columns = {0:'target'}, inplace=True)\n\nprediction['id'] = prediction.index","7c423d46":"#need 200000 rows\nresult=prediction[['id','target']].head(200000)\nresult","f5fd1163":"#df of results to csv\nresult.to_csv('result.csv',index=False)","f09ec0aa":"## Regression\nGoal: Finding the best-fitting line    \nTypes:   \n   ##1-Linear Regression (Single and multiple variables).    \n  \n   ##3-Bayesian Linear Regression    \n   ##4-SVR      ","8e1e5a06":"Datasets (test and train):","e64799c6":"## Explore the data:"}}