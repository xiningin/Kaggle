{"cell_type":{"57c1749b":"code","f838838f":"code","f133862d":"code","115144de":"code","032b0564":"code","a1182b15":"code","e4ebdd86":"code","16034958":"code","2261c83e":"code","0e1089bd":"code","f4f5daa5":"code","030b34a8":"code","a6da1f43":"code","87af60c7":"code","7fdfd3f5":"code","bb76196a":"code","0e5ebb3e":"code","0b349f6f":"code","a2629aae":"code","7823b897":"code","5f1f1842":"code","a62a3348":"code","14a3ef51":"code","e459e87a":"code","ecc2dc3b":"code","5bf83149":"code","dabece17":"code","3cda9057":"code","814f4872":"code","b79a9d5b":"code","04e7384e":"code","60793cb4":"code","626a5182":"code","fb892ee9":"code","46ab93a5":"code","95aa241c":"code","81406a7e":"code","03ddde03":"code","dcaddf6e":"code","938250c0":"code","8b7a9d89":"code","7d50da4b":"code","159f1e84":"code","f7640788":"code","2d05320d":"code","1f582198":"code","476f188d":"code","35004bd6":"markdown","a56928da":"markdown","efc015d7":"markdown","cb642b6c":"markdown","daaf30c6":"markdown","810b04c4":"markdown","c4f32e3f":"markdown","5c94f962":"markdown","acaa3fe4":"markdown","9121c5a8":"markdown","1549c196":"markdown","47da5262":"markdown","eed2796b":"markdown","4f8b6fc1":"markdown","be5b4d35":"markdown","c7497d8d":"markdown","59e19108":"markdown","031bdede":"markdown"},"source":{"57c1749b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f838838f":"df_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\ndf_sub = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\")","f133862d":"!pip install catboost\n!pip install shap\n!pip install featuretools","115144de":"import numpy as np\nimport pandas as pd\nimport random\nseed = 44  \nrandom.seed(seed)\nnp.random.seed(seed)\n\n# Import the libraries\nimport numpy as np \nimport pandas as pd \nimport re\nimport sys, gc, os\nfrom IPython.display import display\n\nfrom scipy import stats\n\nimport shap\nshap.initjs()\nimport featuretools as ft\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nfrom tqdm import tqdm\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import LinearSVR\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import MinMaxScaler, Normalizer, MaxAbsScaler\nfrom sklearn.preprocessing import (StandardScaler, PowerTransformer, QuantileTransformer ,LabelEncoder, \n                                   OneHotEncoder, OrdinalEncoder)\nimport catboost as cb\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor","032b0564":"test_ids = df_test[\"id\"].tolist()","a1182b15":"df_train.head()","e4ebdd86":"df_test.head()","16034958":"df_sub.head()","2261c83e":"df_train.shape, df_test.shape, df_sub.shape","0e1089bd":"df_train.isnull().value_counts().sum()","f4f5daa5":"df_test.isnull().value_counts().sum()","030b34a8":"categorical_feats= df_train.dtypes[df_train.dtypes == \"object\"].index; categorical_feats","a6da1f43":"numerical_feats= df_train.dtypes[df_train.dtypes != \"object\"].index; numerical_feats","87af60c7":"target = df_train['target']\ndf_train.drop('target', axis=1, inplace=True)","7fdfd3f5":"CAT= df_train.select_dtypes(include='object').columns.tolist()","bb76196a":"idx = 0\nf, axes = plt.subplots(5, 2, sharex=True, figsize=(12,14))\nplt.suptitle('Categorical features distribution', size=16, y=(0.94))\n\nfor row in range(5):\n    for col in range(2):\n        data = df_train[CAT[idx]].value_counts()\n        sns.barplot(x = data.values, y = data.index, palette='deep', ax=axes[row, col])\n        axes[row,col].set_title(CAT[idx])\n        idx += 1","0e5ebb3e":"NUM = df_train.select_dtypes('float64').columns.tolist()","0b349f6f":"plt.figure(figsize=(16,5))\nsns.violinplot(data=df_train[NUM], color='slategray')\nplt.title('Continuous features distribution');\n","a2629aae":"plt.figure(figsize=(10,10))\nsns.heatmap(df_train[NUM].join(target).corr(), square=True, linewidths=0.7, cmap=\"bone_r\");","7823b897":"plt.figure(figsize=(10,5))\nsns.histplot(target, color='slategray', stat='frequency');","5f1f1842":"len(target[target <= 4.3])","a62a3348":"to_drop = target[target <= 4.3].index\ntarget.drop(to_drop, inplace=True)\ndf_train.drop(to_drop, inplace=True)\n\nplt.figure(figsize=(10,5))\nsns.histplot(target, color='slategray', stat='frequency');","14a3ef51":"CAT_01 = list(set(CAT).difference(set(['cat6'])))\nCAT_01","e459e87a":"dummies_train = pd.get_dummies(df_train[CAT_01])\ndummies_test = pd.get_dummies(df_test[CAT_01])\n\ntrain = df_train[NUM].join(dummies_train)\ntest = df_test[NUM].join(dummies_test)","ecc2dc3b":"set(train.columns.tolist()).difference(set(test.columns.tolist()))","5bf83149":"#train.shape[1], test.shape[1]","dabece17":"train.head()","3cda9057":"train = df_train.copy()\ntest = df_test.copy()\n\ntrain.drop(['id'], axis=1, inplace=True)\ntest.drop(['id'], axis=1, inplace=True)\n\ntrain.shape, test.shape","814f4872":"SEED = 44","b79a9d5b":"cols = train.columns.tolist()\n\nct = ColumnTransformer([('onehot',OrdinalEncoder(), slice(len(CAT))),\n                        ('quantile',QuantileTransformer(random_state=SEED, n_quantiles=1500),\n                         slice(len(CAT),len(CAT) + len(NUM) + 5))])\n\ntrain = ct.fit_transform(train)\ntest = ct.transform(test)\n\ntrain = pd.DataFrame(train, columns = cols)\ntest = pd.DataFrame(test, columns = cols)\n\ntrain[CAT] = train[CAT] \/ 10\ntest[CAT] = test[CAT] \/ 10","04e7384e":"def feat_eng(df):\n\n    df['cont001'] = df['cont8'] * df['cont0']\n    df['cont002'] = df['cont9'] * df['cont0']\n    df['cont003'] = df['cont9'] * df['cont5']\n    df['cont004'] = df['cont8'] * df['cont5']\n    df['cont005'] = df['cont2'] * df['cont4']\n    df['cont006'] = df['cont1'] * df['cont3']\n    df['cont007'] = df['cont13'] * df['cont1']\n    \n    return df","60793cb4":"train = feat_eng(train)\ntest = feat_eng(test)\n\ntrain.shape, test.shape","626a5182":"to_transform = ['cont0', 'cont1', 'cont4', 'cont5', 'cont8', 'cont9', 'cont12']","fb892ee9":"def feat_eng_01(df):\n    \n    es = ft.EntitySet(id = 'data')\n\n    original_cols = to_transform\n\n    es = es.entity_from_dataframe(entity_id = 'data', \n                              dataframe = df[original_cols], \n                              index = 'id', \n                              time_index = None)\n    \n    new_features, new_feature_names = ft.dfs(entityset = es, target_entity = 'data', \n                                 trans_primitives = ['multiply_numeric'])\n    \n    new_features.reset_index(drop=True, inplace=True)\n    new_features.drop(original_cols, axis=1, inplace=True)\n    \n    return new_features","46ab93a5":"train_fe = feat_eng_01(train)\ntest_fe = feat_eng_01(test)\n\ntrain_fe.index = train.index\ntest_fe.index = test.index\n\ntrain = train.join(train_fe)\ntest = test.join(test_fe)\n\ntrain.shape, test.shape","95aa241c":"X_train, X_valid, y_train, y_valid = train_test_split(train, target, test_size=0.15, random_state=SEED)\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","81406a7e":"train_data = lgb.Dataset(X_train, label=y_train)\ntest_data = lgb.Dataset(X_valid, label=y_valid)\n\nparam = {'objective': 'regression',\n         'boosting': 'gbdt',  \n         'metric': 'rmse',\n         'learning_rate': 0.05, \n         'num_iterations': 7500,\n         'max_depth': -1,\n         'min_data_in_leaf': 15,\n         'bagging_fraction': 0.8,\n         'bagging_freq': 1,\n         'feature_fraction': 0.8\n         }\n\nclf = lgb.train(params=param, \n                early_stopping_rounds=100,\n                verbose_eval=100,\n                train_set=train_data,\n                valid_sets=[test_data])\n\ny_pred = clf.predict(X_valid)","03ddde03":"y_pred","dcaddf6e":"np.sqrt(mean_squared_error(y_valid, y_pred))","938250c0":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(), train.columns), reverse=True)[:], columns=['Value','Feature'])\nplt.figure(figsize=(20,20))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()","8b7a9d89":"Xtest = test\n\nXtest.head()","7d50da4b":"y = target","159f1e84":"errlgb = []\ny_pred_totlgb = []\n\nfold = KFold(n_splits= 10, shuffle=True, random_state=42)\n\nfor train_index, test_index in fold.split(train):\n    \n    X_train, X_test = train.loc[train_index], train.loc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_train, label=y_train)\n    test_data = lgb.Dataset(X_test, label=y_test)\n    \n    clf = lgb.train(params=param, \n                     early_stopping_rounds=200,\n                     verbose_eval=100,\n                     train_set=train_data,\n                     valid_sets=[test_data])\n\n    y_pred = clf.predict(X_test) \n\n    print(\"RMSE: \", np.sqrt(mean_squared_error(y_test, y_pred)))\n    \n    errlgb.append(np.sqrt(mean_squared_error(y_test, y_pred)))\n    \n    p = clf.predict(Xtest)\n    \n    y_pred_totlgb.append(p)","f7640788":"np.mean(y_pred_totlgb,0)","2d05320d":"y_pred = np.mean(y_pred_totlgb,0)","1f582198":"df_sub['target'] = y_pred\ndf_sub.head()","476f188d":"df_sub.to_csv('lgb_sub1_v4.csv', index=False)  # 0.84389 on LB","35004bd6":"# Feature engineering","a56928da":"# Exploring continuous features","efc015d7":"# Checking for categorical features","cb642b6c":"**we have like 89 outliers.**","daaf30c6":"# Exploring categorical features","810b04c4":"Let's see how many values bellow mark 4.3 do we have here.","c4f32e3f":"# Splitting train and test sets","5c94f962":"# Checking for numerical features","acaa3fe4":"# Manual feature egineering","9121c5a8":"# Feature Importance:","1549c196":"# Submission:","47da5262":"# MODEL: LGBMClassifier","eed2796b":"# Simple one-hot encoding","4f8b6fc1":"# FeatureTools","be5b4d35":"# Exploring target distribution","c7497d8d":"Looking Much better now.","59e19108":"# Predict on Test Set","031bdede":"# Categorical features encoding"}}