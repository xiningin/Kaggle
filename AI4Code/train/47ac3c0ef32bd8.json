{"cell_type":{"3058e696":"code","74a0350f":"code","1be3d8c3":"code","8aa3e090":"code","39f889d7":"code","b1da53cc":"code","b30d35ae":"code","85295703":"code","19e9e7a9":"code","f05cfeb2":"code","7969fbd6":"code","536dde56":"code","67d8c594":"code","64f0d441":"markdown","56a52df2":"markdown","bd0a844f":"markdown","db70275f":"markdown","e328ee07":"markdown","91893ad6":"markdown","535915f0":"markdown","658a731c":"markdown","f65d15b5":"markdown","17033f9a":"markdown","be2b78c0":"markdown","413536e3":"markdown"},"source":{"3058e696":"!pip install spotipy","74a0350f":"import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials \nclient_id = \"0054a24f2fc643c69d56d020dd5f70be\"\nclient_secret = \"98b4a4b772ad4eca934a92ca60c246a0\"\nclient_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)\nsp = spotipy.Spotify(client_credentials_manager=client_credentials_manager) ","1be3d8c3":"name = [\"Micheal Jackson\",\"pitbull\",\"Christina\",\"Elvis Presley\"]\nresult = sp.search(name) \nresult['tracks']['items'][1]['artists']","8aa3e090":"#Extract Artist's uri\nartists_uris = result['tracks']['items'][0]['artists'][0]['uri']\n#Pull all of the artist's albums\nartist_albums = sp.artist_albums(artists_uris, album_type='album')\n#Store artist's albums' names' and uris in separate lists\nartist_album_names = []\nartist_album_uris = []\nfor i in range(len(artist_albums['items'])):\n    artist_album_names.append(artist_albums['items'][i]['name'])\n    artist_album_uris.append(artist_albums['items'][i]['uri'])\n    \nartist_album_names\nartist_album_uris\n#Keep names and uris in same order to keep track of duplicate albums","39f889d7":"def album_songs(uri):\n    album = uri \n    spotify_albums[album] = {}\n    #Create keys-values of empty lists inside nested dictionary for album\n    spotify_albums[album]['album'] = [] \n    spotify_albums[album]['track_number'] = []\n    spotify_albums[album]['id'] = []\n    spotify_albums[album]['name'] = []\n    spotify_albums[album]['uri'] = []\n    #pull data on album tracks\n    tracks = sp.album_tracks(album) \n    for n in range(len(tracks['items'])): \n        spotify_albums[album]['album'].append(artist_album_names[album_count]) \n        spotify_albums[album]['track_number'].append(tracks['items'][n]['track_number'])\n        spotify_albums[album]['id'].append(tracks['items'][n]['id'])\n        spotify_albums[album]['name'].append(tracks['items'][n]['name'])\n        spotify_albums[album]['uri'].append(tracks['items'][n]['uri'])","b1da53cc":"spotify_albums = {}\nalbum_count = 0\nfor i in artist_album_uris: #each album\n    album_songs(i)\n    print(str(artist_album_names[album_count]) + \" album songs has been added to spotify_albums dictionary\")\n    album_count+=1 #Updates album count once all tracks have been added","b30d35ae":"def audio_features(album):\n    #Add new key-values to store audio features\n    spotify_albums[album]['acousticness'] = []\n    spotify_albums[album]['danceability'] = []\n    spotify_albums[album]['energy'] = []\n    spotify_albums[album]['instrumentalness'] = []\n    spotify_albums[album]['liveness'] = []\n    spotify_albums[album]['loudness'] = []\n    spotify_albums[album]['speechiness'] = []\n    spotify_albums[album]['tempo'] = []\n    spotify_albums[album]['valence'] = []\n    spotify_albums[album]['popularity'] = []\n    \n    track_count = 0\n    for track in spotify_albums[album]['uri']:\n        #pull audio features per track\n        features = sp.audio_features(track)\n        \n        #Append to relevant key-value\n        spotify_albums[album]['acousticness'].append(features[0]['acousticness'])\n        spotify_albums[album]['danceability'].append(features[0]['danceability'])\n        spotify_albums[album]['energy'].append(features[0]['energy'])\n        spotify_albums[album]['instrumentalness'].append(features[0]['instrumentalness'])\n        spotify_albums[album]['liveness'].append(features[0]['liveness'])\n        spotify_albums[album]['loudness'].append(features[0]['loudness'])\n        spotify_albums[album]['speechiness'].append(features[0]['speechiness'])\n        spotify_albums[album]['tempo'].append(features[0]['tempo'])\n        spotify_albums[album]['valence'].append(features[0]['valence'])\n        #popularity is stored elsewhere\n        pop = sp.track(track)\n        spotify_albums[album]['popularity'].append(pop['popularity'])\n        track_count+=1","85295703":"import time\nimport numpy as np\nsleep_min = 2\nsleep_max = 5\nstart_time = time.time()\nrequest_count = 0\nfor i in spotify_albums:\n    audio_features(i)\n    request_count+=1\n    if request_count % 5 == 0:\n        print(str(request_count) + \" playlists completed\")\n        time.sleep(np.random.uniform(sleep_min, sleep_max))\n        print('Loop #: {}'.format(request_count))\n        print('Elapsed Time: {} seconds'.format(time.time() - start_time))","19e9e7a9":"dic_df = {}\ndic_df['album'] = []\ndic_df['track_number'] = []\ndic_df['id'] = []\ndic_df['name'] = []\ndic_df['uri'] = []\ndic_df['acousticness'] = []\ndic_df['danceability'] = []\ndic_df['energy'] = []\ndic_df['instrumentalness'] = []\ndic_df['liveness'] = []\ndic_df['loudness'] = []\ndic_df['speechiness'] = []\ndic_df['tempo'] = []\ndic_df['valence'] = []\ndic_df['popularity'] = []\nfor album in spotify_albums: \n    for feature in spotify_albums[album]:\n        dic_df[feature].extend(spotify_albums[album][feature])\n        \nlen(dic_df['album'])","f05cfeb2":"import pandas as pd\ndataframe = pd.DataFrame.from_dict(dic_df)\ndataframe","7969fbd6":"print(len(dataframe))\nfinal_df = dataframe.sort_values('popularity', ascending=False).drop_duplicates('name').sort_index()\nprint(len(final_df))","536dde56":"final_df.head()","67d8c594":"final_df.to_csv(\"spotify_music.csv\")","64f0d441":"### Hope you know by now how to fetch SPOTIFY Music data from Spotify using its API. \n\n### In the next kernel notebook below will perform more detailed exploratory data analysis and go deep dive understanding the data from a song\/album popularity prospective\n\n### https:\/\/www.kaggle.com\/pavansanagapati\/spotify-music-eda-part2-music-classification\n\n# Please do leave your comments \/suggestions if any and greatly appreciate to UPVOTE if you like this notebook.","56a52df2":"### Extract audio features for each song\n\nTo store the audio features of each album track and append the data into lists representing all the music tracks for that album we add additional key-values.","bd0a844f":"Now let loop through albums extracting the audio features.For this we will add a random delay every few albums to avoid sending too many requests at Spotify's API.","db70275f":"# Introduction\nSpotify is one of the most popular streaming platforms in the world. They have an API for developers to utilise their huge database of music to build interesting applications and uncover insights into our listening habits.\n\nThis notebook focuses on how to extract Spotify data based on certain artist criteria using the Spotify API .\n\n![](https:\/\/miro.medium.com\/max\/10342\/1*m3xkO7nM64KwpmdWhXr_Vw.jpeg)\nSpotify Technology S.A.  is a Swedish media services provider and music streaming service. It is legally domiciled in Luxembourg and is headquartered in Stockholm, Sweden.\n\nFounded in 2006, the company's primary business is providing an audio streaming platform, the \"Spotify\" platform, that provides DRM-restricted music, videos and podcasts from record labels and media companies. As a freemium service, basic features are free with advertisements or automatic music videos, while additional features, such as offline listening and commercial-free listening, are offered via paid subscriptions.\n\nLaunched on October 2008, the Spotify platform provides access to over 50 million tracks.Users can browse by parameters such as artist, album, or genre, and can create, edit, and share playlists. Spotify is available in most of Europe and the Americas, Australia, New Zealand, and parts of Africa and Asia, and on most modern devices, including Windows, macOS, and Linux computers, and iOS, and Android smartphones and tablets.\n\n#### So what do we need to get started ?????\n\n* Spotify API permissions & credentials that could apply for here. For this log into the \u201cdashboard\u201d of \"**developer.spotify.com**\" and select \u201ccreate client id\u201d and follow the instructions. Spotify are not too strict on providing permissions so put anything you like when they ask for commercial application.\n\n![](https:\/\/i.ytimg.com\/vi\/prayNyuN3w0\/maxresdefault.jpg)\n\n* Python module \u2014 spotipy \u2014 imported\nOnce you have all that, you can dive into Spotify\u2019s API via Python.","e328ee07":"### **Extract all the songs from every album**\nNext would be to loop through each album to extract key album track data.","91893ad6":"Spotify has a duplicate issue which can be addressed by removing all but the most popular songs.","535915f0":"Now we can apply the function to each album URI in the list to pull the track data and  create an empty dictionary called to store the spotify album data.","658a731c":"Finally let us save this dataframe into a CSV file","f65d15b5":"#### Search for a particular artist to see what albums are available .In this case I have choosen **Jennifer Lopez** as the artist","17033f9a":"#### *To access Spotify authorised data we need to create our credentials like clientid and client_secret as well as spotify object to access the API*","be2b78c0":"Now its time to add the above spotify music data to a new dataframe but before we do so we need to first organise our data into a dictionary which can be converted into a dataframe.","413536e3":"### Extract Spotify albums \nWe will store Spotify URIs and album names in separate lists for reference that we can use later on during data analysis"}}