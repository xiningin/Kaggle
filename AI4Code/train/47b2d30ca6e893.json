{"cell_type":{"75dc6b25":"code","5ccfbbb6":"code","08468a94":"code","7ca1e084":"code","e8a7c074":"code","b7f7b8dc":"code","b13b2484":"code","edee2cb8":"code","e56061da":"code","ca443d68":"code","94650eec":"code","bff8f7a3":"markdown","768f9bcc":"markdown","60ac28bc":"markdown","fbd4f8a4":"markdown","1d875fcd":"markdown"},"source":{"75dc6b25":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import signal\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (16,10)\n\nnp.random.seed(30)","5ccfbbb6":"trainPath = '\/kaggle\/input\/seti-breakthrough-listen\/train_labels.csv'\nsampleSubmission = '\/kaggle\/input\/seti-breakthrough-listen\/sample_submission'","08468a94":"def loadData(id_, prefix='\/kaggle\/input\/seti-breakthrough-listen\/train'):\n    \"\"\" Wrapper to load a spectrogram by id \"\"\"\n    subdir = str(id_)[0]\n    return np.load(f'{prefix}\/{subdir}\/{id_}.npy').astype('float64')","7ca1e084":"def plotData(data):\n    \"\"\" Wrapper to nicely plot and label spectrogram \"\"\"\n    fig, axes = plt.subplots(6, 1)\n    for i, ax in enumerate(axes):\n        ax.imshow(data[i].astype(float), aspect='auto')\n        label = 'OFF' if i % 2 else 'ON'\n        ax.set_ylabel(label, fontsize=16)\n    fig.text(0.5, -0.02, 'Frequency ->', ha='center', fontsize=16)\n    fig.text(-0.02, 0.5, '<- Time', va='center', rotation='vertical', fontsize=16)\n    fig.tight_layout()\n    return fig, axes","e8a7c074":"def plotMeanData(data, axis=1):\n    \"\"\" Wrapper to plot mean data average over timer \"\"\"\n    meanData = pd.DataFrame(data.mean(axis=axis))\n    meanData['observation'] = ['ON', 'OFF', 'ON', 'OFF', 'ON', 'OFF']\n    meanData['snippet'] = ['1', '1', '2', '2', '3', '3']\n    meanData = (meanData\n                .melt(id_vars=['observation', 'snippet'])\n                .rename({'variable': 'Frequency', 'value': 'signal'}, axis=1))\n    sns.relplot(\n        data=meanData, x=\"Frequency\", y=\"signal\",\n        row=\"observation\", col='snippet', kind=\"line\")","b7f7b8dc":"# Read training data\ntrain = pd.read_csv(trainLabelsPath)\n# Split signals and no signals\ntrueSignal = train.loc[train['target'] == 1]\nnoSignal = train.loc[train['target'] == 0]\n\nprint(f'Total samples: {len(train)}')\ntrain.sample(5)","b13b2484":"# Only ~9% of training data is true positive\ntrainLabels.groupby('target').size() \/ len(train)","edee2cb8":"np.random.seed(30) # Ensure reproducibility of random choice\nrandomTruePositive = np.random.choice(trueSignal['id'].values)\ndataTP = loadData(randomTruePositive)\n_ = plotData(dataTP)","e56061da":"plotMeanData(dataTP)","ca443d68":"np.random.seed(30) # Ensure reproducibility of random choice\nrandomTrueNegative = np.random.choice(noSignal['id'].values)\ndataTN = loadData(randomTrueNegative)\n_ = plotData(dataTN)","94650eec":"plotMeanData(dataTN)","bff8f7a3":"## Signal vs. Frequency (averaged over time)","768f9bcc":"## Signal vs. Frequency (averaged over time)","60ac28bc":"# SETI Breakthrough Listen - E.T. Signal Search\n- I've not done much signal processing work before so am looking forward to having a go at this competition! Any and all comments welcome :)\n- To get started I've just written some quick wrapper functions to load and plot the data in preperation for more thorough EDA.","fbd4f8a4":"# First look at a true negative example\n  - A vertical needle like signal is apparent, but appears in all the 6 snippets.\n  - Since true needles can only appear in ON observations this is just an artefact.","1d875fcd":"# First look at a true positive example\n  - We know true signal 'needles' appear only in ON observation but not necessarily all ON observations.\n  - This example demonstrates that well with a very clear 'vertical' need in 2 of the 3 ON observations."}}