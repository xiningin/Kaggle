{"cell_type":{"98592985":"code","6d16ccad":"code","4968ee99":"code","f5040812":"code","9833def9":"code","75a9493d":"code","32a9bc3a":"code","d5ebdbb2":"code","88aef8b6":"code","5edd46fe":"code","7e4b58ed":"code","f7c40c60":"code","9906d241":"code","cc77b232":"code","ff2fc8bf":"code","d9d4a933":"code","333e0976":"code","576cebb8":"code","9a047794":"code","1847d029":"code","a1489b96":"code","5e1c1cd3":"code","3989eeab":"code","7c4cbae2":"code","f9ce04b0":"code","74dc6c8d":"code","4defef79":"code","583dd05a":"code","24586088":"code","fb2b355e":"code","08f18d05":"code","537c420f":"code","a51f401e":"code","8b671cda":"code","9ee7f217":"code","2f72b52e":"code","9c6f0f33":"code","e7ea33d3":"code","27683077":"code","661061bf":"code","176e824c":"code","79fada39":"code","597882ab":"code","14a54c8e":"code","03f457f4":"code","b0191c33":"code","34aa7590":"code","deda1178":"code","f2ab1bf8":"code","858a07e2":"code","646f77e6":"code","e4058952":"code","f8717cfe":"code","309a8a54":"code","edaefc72":"code","7cadf896":"code","9f691256":"code","208c61ad":"code","2c034dd6":"code","44d503ba":"code","4413c344":"code","58638c94":"code","99ad0a53":"markdown","e950ab9a":"markdown","6b00bb48":"markdown","0528ff29":"markdown","fee71331":"markdown","8d060d11":"markdown","debbfaa6":"markdown","71f976e1":"markdown","65916b3d":"markdown","c4b08a12":"markdown","7924326c":"markdown","95829cbc":"markdown","f46055da":"markdown","610f496c":"markdown","684fba95":"markdown","647c08fd":"markdown","5d4f2a83":"markdown","3ec43fa3":"markdown","69596268":"markdown","8c889cf5":"markdown","fd8c5889":"markdown","00e88fc7":"markdown","585e7450":"markdown","3124adc2":"markdown","912dadf5":"markdown","d65c8e22":"markdown","520bc410":"markdown","71e5612c":"markdown","2dc4c03d":"markdown","b83fbcb5":"markdown","1ff62832":"markdown","106defeb":"markdown","85908701":"markdown","b9e01066":"markdown","ced8220f":"markdown","1d4fb1d8":"markdown","8b83199e":"markdown","7b99ed33":"markdown","875c178d":"markdown","7836863c":"markdown"},"source":{"98592985":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d16ccad":"import plotly.graph_objects as go","4968ee99":"womens_western=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/women_westernwear.csv\")\nmens_western=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/mens_westernwear.csv\")\nlaptops=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/laptops.csv\")\nmobs=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/mobiles.csv\")\nbaby=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/baby.csv\")\nfood=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/food.csv\")\nfootwear=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/women_footwear.csv\")\nfurni=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/furn.csv\")\nbooks=pd.read_csv(\"\/kaggle\/input\/flipkart-data\/flipkart_data\/books.csv\")","f5040812":"womens_western.head(5)","9833def9":"laptops.head()","75a9493d":"laptops['Price']=laptops['Price'].str.replace(',','')\nlaptops['Original Prices']=laptops['Original Prices'].str.replace(',','')\nlaptops['Discount rates']=laptops['Discount rates'].str.replace('% off','')","32a9bc3a":"womens_western['Price']=womens_western['Price'].str.replace(',','')\nwomens_western['Original Prices']=womens_western['Original Prices'].str.replace(',','')\nwomens_western['Discount rates']=womens_western['Discount rates'].str.replace('% off','')","d5ebdbb2":"mens_western['Price']=mens_western['Price'].str.replace(',','')\nmens_western['Original Prices']=mens_western['Original Prices'].str.replace(',','')\nmens_western['Discount rates']=mens_western['Discount rates'].str.replace('% off','')","88aef8b6":"mobs['Price']=mobs['Price'].str.replace(',','')\nmobs['Original Prices']=mobs['Original Prices'].str.replace(',','')\nmobs['Discount rates']=mobs['Discount rates'].str.replace('% off','')","5edd46fe":"baby['Price']=baby['Price'].str.replace(',','')\nbaby['Original Prices']=baby['Original Prices'].str.replace(',','')\nbaby['Discount rates']=baby['Discount rates'].str.replace('% off','')","7e4b58ed":"food['Price']=food['Price'].str.replace(',','')\nfood['Original Prices']=food['Original Prices'].str.replace(',','')\nfood['Discount rates']=food['Discount rates'].str.replace('% off','')","f7c40c60":"footwear['Price']=footwear['Price'].str.replace(',','')\nfootwear['Original Prices']=footwear['Original Prices'].str.replace(',','')\nfootwear['Discount rates']=footwear['Discount rates'].str.replace('% off','')","9906d241":"furni['Price']=furni['Price'].str.replace(',','')\nfurni['Original Prices']=furni['Original Prices'].str.replace(',','')\nfurni['Discount rates']=furni['Discount rates'].str.replace('% off','')","cc77b232":"books['Price']=books['Price'].str.replace(',','')\nbooks['Original Prices']=books['Original Prices'].str.replace(',','')\nbooks['Discount rates']=books['Discount rates'].str.replace('% off','')","ff2fc8bf":"books_nona=books.dropna()\nfurni_nona=furni.dropna()\nbaby_nona=baby.dropna()","d9d4a933":"laptops_nona=laptops.dropna()\nfootwear_nona=footwear.dropna()\nwomens_western_nona=womens_western.dropna()\nfood_nona=food.dropna()\nmobs_nona=mobs.dropna()\nmens_western_nona=mens_western.dropna()\n","333e0976":"laptops_nona = laptops_nona[~laptops_nona['Discount rates'].isin(['Nan'])]\nfootwear_nona = footwear_nona[~footwear_nona['Discount rates'].isin(['Nan'])]\nfood_nona = food_nona[~food_nona['Discount rates'].isin(['Nan'])]\nmobs_nona = mobs_nona[~mobs_nona['Discount rates'].isin(['Nan'])]\nbaby_nona = baby_nona[~baby_nona['Discount rates'].isin(['Nan'])]\nfurni_nona = furni_nona[~furni_nona['Discount rates'].isin(['Nan'])]\nbooks_nona = books_nona[~books_nona['Discount rates'].isin(['Nan'])]","576cebb8":"womens_western_nona['Discount rates']=womens_western_nona['Discount rates'].astype(str).astype(int)\nfootwear_nona['Discount rates']=footwear_nona['Discount rates'].astype(str).astype(int)\nfood_nona['Discount rates']=food_nona['Discount rates'].astype(str).astype(int)\nmobs_nona['Discount rates']=mobs_nona['Discount rates'].astype(str).astype(int)\nbaby_nona['Discount rates']=baby_nona['Discount rates'].astype(str).astype(int)\nfurni_nona['Discount rates']=furni_nona['Discount rates'].astype(str).astype(int)\nbooks_nona['Discount rates']=books_nona['Discount rates'].astype(str).astype(int)\nlaptops_nona['Discount rates']=laptops_nona['Discount rates'].astype(str).astype(int)\nmens_western_nona['Discount rates']=mens_western_nona['Discount rates'].astype(str).astype(int)","9a047794":"x=['womens_westernwear','mens_westernwear','furniture','books','baby_products','footwear','laptops','mobiles', 'food']\ny=[womens_western_nona['Discount rates'].mean(),mens_western_nona['Discount rates'].mean(),furni_nona['Discount rates'].mean(),books_nona['Discount rates'].mean(),baby_nona['Discount rates'].mean(),footwear_nona['Discount rates'].mean(),laptops_nona['Discount rates'].mean(),mobs_nona['Discount rates'].mean(),food_nona['Discount rates'].mean()]","1847d029":"fig = go.Figure(data=[go.Bar(x=x, y=y)])\n# Customize aspect\nfig.update_traces(marker_color='rgb(255,160,122)', marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.update_layout(title_text='Discounts')\nfig.show()","a1489b96":"womens_western_nona['Price']=womens_western_nona['Price'].astype(str).astype(int)\nwomens_western_nona['Original Prices']=womens_western_nona['Original Prices'].astype(str).astype(int)\nmens_western_nona['Price']=mens_western_nona['Price'].astype(str).astype(int)\nmens_western_nona['Original Prices']=mens_western_nona['Original Prices'].astype(str).astype(int)","5e1c1cd3":"features=['Price','Original Prices','Discount rates']\nfig = go.Figure(data=[\n    go.Bar(name='Womens Clothing', x=features, y=[womens_western_nona['Price'].mean()\n                                                  ,womens_western_nona['Original Prices'].mean()\n                                                 ,womens_western_nona['Discount rates'].mean()]),\n    go.Bar(name='Mens Clothing', x=features, y=[mens_western_nona['Price'].mean()\n                                                  ,mens_western_nona['Original Prices'].mean()\n                                                 ,mens_western_nona['Discount rates'].mean()])\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","3989eeab":"womens_western_top10=womens_western_nona.sort_values(by='Original Prices', ascending=False)\nwomens_western_top10.head(10)\ncols=['Product Name','Image URLS']\nwomens_western_top10=womens_western_top10[cols].head(10)\nwomens_western_top10=womens_western_top10.set_index('Product Name')","7c4cbae2":"womens_western_top10=womens_western_top10.rename(columns={\"Image URLS\": \"img\"})","f9ce04b0":"from IPython.display import Image, HTML\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"width=\"60\" height=\"60\"\"\/>'\n\nHTML(womens_western_top10.to_html(escape=False ,formatters=dict(img=path_to_image_html),justify='center'))","74dc6c8d":"mens_top10=mens_western_nona.sort_values(by='Original Prices', ascending=False).head(10)\nmens_top10=mens_top10[cols]\nmens_top10=mens_top10.set_index('Product Name')\nmens_top10=mens_top10.rename(columns={\"Image URLS\": \"img\"})","4defef79":"HTML(mens_top10.to_html(escape=False ,formatters=dict(img=path_to_image_html),justify='center'))","583dd05a":"mobs1=mobs.sort_values(by='Ratings', ascending=False)","24586088":"top50=mobs1.head(50)\ncompanies=['Apple','Redmi','Vivo','OnePlus','Realme','OPPO','POCO']\nvals=[0,0,0,0,0,0,0]\ndictionary=dict(zip(companies,vals))\n","fb2b355e":"for i in list(top50['Product Name']):\n    for j in companies:\n        if j in i:\n            dictionary[j]+=1","08f18d05":"import plotly.express as px\nfig = px.pie(values=list(dictionary.values()), names=list(dictionary.keys()), color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","537c420f":"fig = px.line(mobs_nona, y=\"Discount rates\", x=\"Ratings\", title='Price VS Rating')\nfig.show()","a51f401e":"fig = px.treemap(mobs_nona, path=['Discount rates', 'Product Name'],color='Discount rates',values='Original Prices')\nfig.show()","8b671cda":"laptops1=laptops_nona.sort_values(by='Discount rates', ascending=False)","9ee7f217":"laptops1","2f72b52e":"import plotly.express as px\nfig = px.histogram(laptops1, x=\"Discount rates\",opacity=0.8,color_discrete_sequence=['indianred'])\nfig.show()","9c6f0f33":"fig = px.bar(laptops_nona, y=\"Original Prices\", x=\"Ratings\", title='Price VS Rating', color='Original Prices')\nfig.show()","e7ea33d3":"fig = px.treemap(footwear_nona, path=['Brand', 'Product Name'], values='Price')\nfig.show()","27683077":"footwear_sorted=footwear_nona.sort_values(by='Price')","661061bf":"footwear_sorted=footwear_sorted.rename(columns={\"Image URLS\": \"img\"})\nHTML(footwear_sorted.head(10).to_html(escape=False ,formatters=dict(img=path_to_image_html),justify='center'))","176e824c":"baby_nona","79fada39":"baby_s=baby_nona.sort_values(by='Discount rates', ascending=False)\nbaby_s=baby_s.head(20)\ncolors = ['rgb(239, 243, 255)', 'rgb(189, 215, 231)', 'rgb(107, 174, 214)',\n          'rgb(49, 130, 189)', 'rgb(8, 81, 156)',]\nfig = go.Figure(data=[go.Table(header=dict(values=['Product Name','Discount rate'],fill_color='black',font=dict(color='white', size=12)\n),\n                 cells=dict(values=[list(baby_s['Product Name']),list(baby_s['Discount rates'])],fill_color='rgb(107, 174, 214)',font=dict(color='black', size=12)))\n                     ])\nfig.show()","597882ab":"list(womens_western_top10['img'])","14a54c8e":"import imageio\nimport matplotlib.pyplot as plt\npic = imageio.imread('https:\/\/rukminim1.flixcart.com\/image\/329\/395\/k26h0280\/jacket\/g\/6\/q\/m-ttjk000814-tokyo-talkies-original-imafhhbqtxa76kf7.jpeg?q=50')\nplt.figure(figsize = (5,5))\nplt.imshow(pic)","03f457f4":"print('Type of the image : ' , type(pic)) \nprint('Shape of the image : {}'.format(pic.shape)) \nprint('Image Height {}'.format(pic.shape[0])) \nprint('Image Width {}'.format(pic.shape[1])) \nprint('Dimension of Image {}'.format(pic.ndim))","b0191c33":"print('Image size {}'.format(pic.size)) \nprint('Maximum RGB value in this image {}'.format(pic.max())) \nprint('Minimum RGB value in this image {}'.format(pic.min()))","34aa7590":"print('Value of only R channel {}'.format(pic[ 100, 50, 0])) \nprint('Value of only G channel {}'.format(pic[ 100, 50, 1])) \nprint('Value of only B channel {}'.format(pic[ 100, 50, 2]))","deda1178":"plt.title('R channel') \nplt.ylabel('Height {}'.format(pic.shape[0])) \nplt.xlabel('Width {}'.format(pic.shape[1])) \nplt.imshow(pic[ : , : , 0])\nplt.show()","f2ab1bf8":"plt.title('G channel')\nplt.ylabel('Height {}'.format(pic.shape[0])) \nplt.xlabel('Width {}'.format(pic.shape[1])) \nplt.imshow(pic[ : , : , 1]) \nplt.show()","858a07e2":"plt.title('B channel') \nplt.ylabel('Height {}'.format(pic.shape[0])) \nplt.xlabel('Width {}'.format(pic.shape[1])) \nplt.imshow(pic[ : , : , 2]) \nplt.show()","646f77e6":"pic[50:150 , : , 0] = 255 # full intensity to those pixel's R channel \nplt.figure( figsize = (5,5)) \nplt.imshow(pic) \nplt.show()","e4058952":"#Note that only the last column changes to change colors\npic[200:300 , : , 1] = 255 # full intensity to those pixel's G channel\n\nplt.figure( figsize = (5,5)) \nplt.imshow(pic) \nplt.show()","f8717cfe":"pic[350:, : , 2] = 255 # full intensity to those pixel's G channel\n\nplt.figure( figsize = (5,5)) \nplt.imshow(pic) \nplt.show()","309a8a54":"import numpy as np \npic=imageio.imread('https:\/\/rukminim1.flixcart.com\/image\/329\/395\/k26h0280\/jacket\/g\/6\/q\/m-ttjk000814-tokyo-talkies-original-imafhhbqtxa76kf7.jpeg?q=50')\nfig, ax = plt.subplots(nrows = 1, ncols=3, figsize=(15,5))  \nfor c, ax in zip(range(3), ax):     \n     # create zero matrix        \n     split_img = np.zeros(pic.shape, dtype=\"uint8\") \n     # 'dtype' by default: 'numpy.float64'  # assing each channel      \n     split_img[ :, :, c] = pic[ :, :, c] # display each channel     \n     ax.imshow(split_img)","edaefc72":"import numpy as np\nimport cv2\nfrom scipy.interpolate import interp1d\ndef brightness( im_file ):\n    im = Image.open(im_file).convert('L')\n    stat = ImageStat.Stat(im)\n    return stat.mean[0]\n\n\nfrom skimage import io\nimport numpy as np\n\ndef get(im):\n    t=io.imread(im)\n    return np.mean(t)\n","7cadf896":"footwear_sorted","9f691256":"footwear_sorted['brightness']=footwear_sorted['img'].apply(lambda x: get(x))","208c61ad":"grouped = footwear_sorted.groupby('Brand')\ng=grouped.aggregate(np.mean)","2c034dd6":"g_dark=g.sort_values(by='brightness')\ng_dark=g_dark.head(10)","44d503ba":"g_light=g.sort_values(by='brightness', ascending=False)\ng_light=g_light.head(10)","4413c344":"fig = px.bar(g_light, x=g_light.index, y='brightness', color='brightness')\nfig.show()","58638c94":"fig = go.Figure(go.Bar(\n            x=g_dark.index,\n            y=g_dark['brightness']))\n\nfig.show()","99ad0a53":"The difference is barely noticable but is present.","e950ab9a":"Here we can observe the maximum and minimum values in the image.","6b00bb48":"Type of the image shows that the image is in form of an array. Image height and width vary for all images.\nDimension of the image is the size of the array used by the image. In most cases, it is 3 as each matrix is alloted to Red, Green and Blue colors respectively.","0528ff29":"# Top brands","fee71331":"The very popular Asics brand has pixelated images amongst all other brands.","8d060d11":"# Data Cleaning","debbfaa6":"From the above observation, it is clear that images are nothing but layers of matrices stacked on top of each other.\nSplitting these matrices will result in images of one color (R,G or B).","71f976e1":"Most laptops have a discount rate of 10-14%.","65916b3d":"Grouping brands and calculating mean discount rates and average pixel values of images by each brand","c4b08a12":"Now, we have all three color intensities set to high (255) for specifically assigned columns.","7924326c":"Action footwear has the darkest pictures!","95829cbc":"So, discount rates for both the categories are almost same. But original prices of women's clothing are evidently higher than that of men's.","f46055da":"Most common rating in laptops is a whopping 4.5 with a mix of laptop prices. Therefore,the price of a laptop does not have any relation whatsoever with the rating.","610f496c":"# Most expensive footwear brands","684fba95":"### Are discount rates responsible for ratings?","647c08fd":"Viewing each channel seperately.\nFirst, set value of R channel=0","5d4f2a83":"Image analysis is a very interesting topic. Let us analyize one random image of a jacket to understand all properties.","3ec43fa3":"### Most inexpensive footwear items","69596268":"Fascinatingly,Apple being one of the most pricey company of the mobile industry in India, is the top-rated company by users.","8c889cf5":"Top most expensive footwear brands are: Puma, Nike,Action, Crocs, Sparx etc","fd8c5889":"A specific pixel located at Row : 100 ; Column : 50  denotes each channel's value of R,G,B.","00e88fc7":"# Image Analysis","585e7450":"# Dissecting layers of an image.","3124adc2":"Hence, Womens western wear clothing has highest discount rates followed by Mens clothing. Note that laptops have a mere 15% discount rate.","912dadf5":"The raw data has commas and fillers like '% off'. Therefore, the data ought to be cleaned.","d65c8e22":"We can say that a mobile with higher discount tends to be rated less than the ratings that are given with average discount rates (30-40%). The mobile phone with 75% discount has received a mere rating of 2.7.","520bc410":"# Electronics","71e5612c":"# Most Discounted Category","2dc4c03d":"# Priciest women's clothing items.","b83fbcb5":"# Flipkart is an online shopping website with a lot of ongoing sales. This notebook is an Exploratory Data Analysis for the platform with some additional image processing.","1ff62832":"# Analysing footwear image data and comparing brands","106defeb":"## Mobile data","85908701":"![image.png](attachment:image.png)","b9e01066":"# Men's Clothing VS Women's Clothing","ced8220f":"Lets individually change row intensities to get a clear understanding.","1d4fb1d8":"# Discount rates for items for babies.","8b83199e":"# Priciest Men's Clothing items","7b99ed33":"# Visualizing data","875c178d":"## Discount rates on laptops","7836863c":"# Does price of the laptop affect user rating?"}}