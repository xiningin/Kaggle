{"cell_type":{"275a6125":"code","b4d88bd4":"code","8abb0002":"code","b31fdda7":"code","2e28bfc1":"code","67c82bc1":"code","61a9c128":"code","488d7630":"code","4b8f7fbf":"code","16f15607":"code","0fc6166d":"code","9a4fdc2a":"code","60236142":"code","02e7f870":"code","524e4297":"code","3a968849":"code","228deeba":"code","5b959fb5":"code","159e02ad":"code","50efb181":"code","f375c5f3":"code","32c307f7":"code","6629be27":"code","323b8c2f":"code","de63e59e":"markdown","88b216b5":"markdown","2597124f":"markdown","0e204466":"markdown","8f370182":"markdown","d2d926ff":"markdown","5c8432c7":"markdown","162d702c":"markdown","46c48f9b":"markdown","d86150d2":"markdown","2f580da2":"markdown","8ed9e7c6":"markdown","22ccf315":"markdown","249c240f":"markdown","eb5c0f20":"markdown","5f374abd":"markdown","a72218d5":"markdown","46b6e2b0":"markdown","4de0761f":"markdown","66963947":"markdown","e1dd1f0b":"markdown"},"source":{"275a6125":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nbase_color=sns.color_palette()[8]\nsns.set(style=\"whitegrid\")\n%matplotlib inline \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b4d88bd4":"matches=pd.read_csv('\/kaggle\/input\/ipldata\/\/matches.csv')","8abb0002":"print(\"Matches shape{}\".format(matches.shape))\n\n","b31fdda7":"matches.head()","2e28bfc1":"\n#Checking null values \nmatches.isnull().sum()","67c82bc1":"matches[matches.city.isnull()]","61a9c128":"matches.city.fillna('Dubai ',inplace=True)","488d7630":"matches.replace('Rising Pune Supergiant','Rising Pune Supergiants',inplace=True)\n\nmatches.replace('Delhi Daredevils','Delhi Capitals',inplace=True)\n","4b8f7fbf":"#Modifying Data so as to plot second graph\nteam_1=matches.groupby(['team1']).count()\nteam_2=matches.groupby(['team2']).count()\ntotal_matches=team_1['id']+team_2['id']\ntotal_matches=pd.DataFrame(total_matches,columns=['id'])\ntotal_matches.reset_index(inplace=True)\n\ntotal_matches.replace('Delhi Daredevils','Delhi Capitals',inplace=True)\ntotal_matches.replace('Rising Pune Supergiant','Rising Pune Supergiants',inplace=True)\n\nplt.figure(figsize=(25,10))\nplt.subplot(1,2,1)\nsplot=sns.countplot(data=matches,x='season',color=base_color)\n\nplt.title('Matches Across Seasons',fontsize=30)\nplt.ylabel('Count',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\nplt.xlabel('Seasons',fontsize=20)\n\n# add annotations\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)\n    \n    \nplt.subplot(1,2,2)\n\nsplot=sns.barplot(data=total_matches,x='team1',y='id',color=base_color,order=total_matches.sort_values(by=['id'],ascending=False)['team1'])\n\nplt.title('Matches Played by each team',fontsize=30)\nplt.ylabel('Count',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\nplt.xlabel('Teams',fontsize=20)\n\n# add annotations\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)","16f15607":"plt.figure(figsize=(15,10))\n\nsplot=sns.countplot(data=matches,x='city',color=base_color,order=matches['city'].value_counts().index)\n\nplt.title('Matches Played in each city',fontsize=30)\nplt.ylabel('Count',fontsize=30)\nplt.xlabel('City',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\n\n# add annotations\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)","0fc6166d":"plt.figure(figsize=(20,8))\nsplot=sns.countplot(data=matches,x='venue',color=base_color,order=matches['venue'].value_counts().index)\nplt.xticks(rotation=90,fontsize=20);\nplt.title('Games at Each Venue',fontsize=15);\nplt.ylabel('Count',fontsize=20);\nplt.xlabel('Stadium Names',fontsize=20);\n\nfor p in splot.patches:\n    splot.annotate(format((p.get_height()), \".0f\"), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=10)","9a4fdc2a":"#Creating a columns for Toss Win percent in total match dataframe which we created above \n\ntotal_matches['percent_toss_wins']=(matches.groupby('toss_winner').count()['toss_decision'].values\/total_matches['id'].values)*100\n\n\nplt.figure(figsize=(15,10))\n#base_color=sns.color_palette()[7]\nsplot=sns.barplot(data=total_matches,x='team1',y='percent_toss_wins',color=base_color,order=total_matches.sort_values(by=['percent_toss_wins'],ascending=False)['team1'])\n\nplt.title('% Toss won by each team',fontsize=30)\nplt.ylabel('Percent',fontsize=30)\nplt.xlabel('Team',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\n\n# add annotations\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), \".1f\"), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)","60236142":"plt.figure(figsize=(20,8))\nplt.subplot(1,2,1)\nticks=[0,50,100,150,200,250,300,350]\nlabels=[(x\/matches.shape[0])*100 for x in ticks];\nlabels=['%.1f' % elem for elem in labels ]\nsplot=sns.countplot(data=matches,x='toss_decision',color=base_color)\nplt.yticks(ticks,labels);\nplt.xlabel('Toss Decision',fontsize=20);\nplt.ylabel('% Percent',fontsize=20);\nplt.xticks(fontsize=20);\n\nfor p in splot.patches:\n    splot.annotate(format((p.get_height()\/matches.shape[0])*100, \".1f\"), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)\n    \nplt.subplot(1,2,2)\nsns.countplot(x='season',hue='toss_decision',data=matches)\nplt.xlabel('Toss Decision',fontsize=20);\nplt.xticks(rotation=90,fontsize=20);\nplt.ylabel('Count',fontsize=20);","02e7f870":"plt.figure(figsize=(10,5))\nsns.countplot(x='toss_winner',hue='toss_decision',data=matches)\nplt.xlabel('Toss Decision',fontsize=20);\nplt.xticks(rotation=90,fontsize=20);\nplt.ylabel('Count',fontsize=20);","524e4297":"Team_list=['Mumbai Indians','Kings XI Punjab', 'Chennai Super Kings','Royal Challengers Bangalore','Kolkata Knight Riders','Delhi Capitals','Rajasthan Royals',                \n            'Sunrisers Hyderabad' ,'Deccan Chargers', 'Pune Warriors', 'Rising Pune Supergiants','Gujarat Lions', 'Kochi Tuskers Kerala']\n\n\ntotal_toss_wins=matches.groupby(['toss_winner']).count()                                             #counts for team winning the toss \nmatch_wins=matches[matches.winner==matches.toss_winner].groupby(['toss_winner','winner']).count()  # Counts for team winning the toss and winnng the match \npercent_wins={}\n\nfor Team in Team_list:\n    percent_wins.update({Team : (match_wins.loc[Team]['id']\/total_toss_wins.loc[Team]['id']).values[0]*100} )\n    \n\ntoss_and_game_win=pd.DataFrame.from_dict(percent_wins,orient='index',columns=['percent']).reset_index()","3a968849":"plt.figure(figsize=(15,10))\n#base_color=sns.color_palette()[7]\nsplot=sns.barplot(data=toss_and_game_win,x='index',y='percent',color=base_color,order=toss_and_game_win.sort_values(by=['percent'],ascending=False)['index'])\n\nplt.title(' Toss and game won by each team Percent',fontsize=30)\nplt.ylabel('Percent',fontsize=30)\nplt.xlabel('Team',fontsize=30)\nplt.xticks(rotation=90,fontsize=20)\n\n# add annotations\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), \".1f\"), (p.get_x() + p.get_width() \/ 2., p.get_height()), \\\n                   ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points',fontsize=20)","228deeba":"# Dropping Null values for umpire \nmatches.dropna(subset=['umpire1'],inplace=True,axis=0)","5b959fb5":"fig4, ax = plt.subplots(figsize=(12, 10))\nax.set_yticklabels(ax.get_yticklabels(), ha=\"right\", fontsize=12, weight='bold');\nax.set_xticklabels(ax.get_xticklabels(), fontsize=12, weight='bold');\ncbar_kws = {'orientation':\"horizontal\", 'pad':0.08, 'aspect':50};\ntop=10\nsns.heatmap(data=matches.groupby(['umpire1','umpire2']).size().to_frame('count').sort_values(by='count',ascending=False).head(top),annot=True,cmap='RdPu',ax=ax,cbar=False);\n\n## More umpire can be plotted but I am restricting it to top 10 . You can just change top parameter in the cell ","159e02ad":"#Making a dataframe for plotting top 10 player of match award winners \nPlayer_of_match=pd.DataFrame(matches.groupby('player_of_match').count()['id'].sort_values(ascending=False).head(10),columns=['id']).reset_index()\n\nplt.figure(figsize=(10,10));\nticks=[0,3,6,9,12,15,18,21]\n#base_color=sns.color_palette()[5]\nsns.barplot(y='id',x='player_of_match',data=Player_of_match,color=base_color);\nplt.xticks(rotation=90);\nplt.yticks(ticks,ticks);\nplt.xticks(fontsize=15);\nplt.title('Won Player of Match title',fontsize=20);\nplt.ylabel('Count',fontsize=20);\nplt.xlabel('Players',fontsize=20);","50efb181":"def head_to_head(df,team1,team2):\n    \"\"\"\n    Function which computes the head to head winner between two teams \n    \n    Input : Dataframe , str of team 1 and team 2 names \n    eg: headtohead(matches,'Mumbai Indians','Delhi Capitals')\n    \n    output : Prints a table for head to head winner\n    \n    \nTeam names can be selected among \n\nMumbai Indians                 \nKings XI Punjab                 \nChennai Super Kings             \nRoyal Challengers Bangalore     \nKolkata Knight Riders       \nDelhi Capitals                  \nRajasthan Royals                \nSunrisers Hyderabad             \nDeccan Chargers                 \nPune Warriors                   \nRising Pune Supergiants         \nGujarat Lions                   \nKochi Tuskers Kerala             \n    \n    \"\"\"\n    \n    \n    wins=df[(((df['team1']==team1) | (df['team2']==team1)) & ((df['team1']==team2)|(df['team2']==team2)))]\n    print(wins.groupby('winner').count()['id'])\n                                                         ","f375c5f3":"head_to_head(matches,'Mumbai Indians','Delhi Capitals')","32c307f7":"head_to_head(matches,'Mumbai Indians','Kolkata Knight Riders')","6629be27":"\nplt.figure(figsize=(10,8))\ng=sns.scatterplot(x='team1',y='team2',data=matches.sort_values(by='win_by_wickets',ascending=False,).head(100),hue='win_by_wickets', palette='tab10');\nplt.xticks(rotation=90,fontsize=15);\nplt.yticks(fontsize=15);\ng.legend(loc='center left', bbox_to_anchor=(1.25, 0.5), ncol=1);","323b8c2f":"fig=plt.figure(figsize=(20,10))\naxes=plt.subplot(1,2,2)\ng=sns.scatterplot(x='season',y='win_by_wickets',data=matches.sort_values(by='win_by_wickets',ascending=False,).head(100),hue='winner', palette='bright',legend=False);\nplt.xticks(rotation=90,fontsize=15);\nplt.yticks([10,9,8],fontsize=15);\n\nplt.xlabel('Season',fontsize=15);\nplt.ylabel('win_by_wickets',fontsize=15);\nplt.title('Top 100 wins batting second vs season',fontsize=15);\n\nplt.subplot(1,2,1)\ng=sns.scatterplot(x='season',y='win_by_runs',data=matches.sort_values(by='win_by_runs',ascending=False,).head(100),hue='winner', palette='tab20');\nplt.xticks(rotation=90,fontsize=15);\nplt.yticks(fontsize=15);\nplt.xlabel('Season',fontsize=15);\nplt.ylabel('win_by_runs',fontsize=15);\nplt.title('Top 100 wins batting fist vs season',fontsize=15);\ng.legend(loc='center left', bbox_to_anchor=(2.25, 0.5), ncol=1);\n\n","de63e59e":"# Decision after winning the toss. Do team prefer setting a target or chasing ?","88b216b5":"# Percent of Toss Won By Each Team ","2597124f":"# Observation \n\n## The above charts shows us how the matches where distributed across seasons . The higher number of matches in season 2011,2012 and 2013 where due to extra two teams added to the competitions \n\n\n## Also we see that Mumbai Indians have played the most matches\n\n","0e204466":"## We see that Rising Pune Supergaint and Rising Pune Supergaints are the same team just that there was name change in their second season so we need combine data for that team \n\n## Also Delhi capitals and Delhi Daredevils are the same team just rebranding so it would better to combine their data under Delhi Capital name ","8f370182":"# Most Man of Match awards won","d2d926ff":"# Lets Explore the match dataset via different visulaizations \n\n## Lets start by plotting matches played across season and also matches played by each team \n## Now we do not have a direct number for matches played by each team . However summing up the occurance of team name in team 1 and team 2 column should give us the total number of matches across each team across seasons ","5c8432c7":"\n# Feedback would be greatly appreciated \n\nAs Coronavirus spreads to the world and cancels sporting events including the IPL thereby rendering my Hotstar membership moot .So as a budding data-scientist I decided to subsitute to IPL window with a Data visulaization project of my own . I found the data set of all IPL games from 2008-2019 on [Kaggle](https:\/\/www.kaggle.com\/nowke9\/ipldata). \n\n## **The data set contained two csv file** \n\n**Matches.csv** : Information of all matches played in the IPL from 2008-2019 providing the below information \n\n>        id \n       season\t \n       city\t \n       date\t \n       team1\t\n       team2\t\n       toss_winner\n       toss_decision\n       result\n       dl_applied\n       winner\n       win_by_runs\n       win_by_wickets\n       player_of_match\n       venue\n       umpire1\n       umpire2\n       umpire3\n\n**Delivereris.csv** : Information of all balls bowled and it runs scored on it . This data set would be covered in depth in a seperate part 2 notebook \n\n\n ## **Data Collection and Cleaning**\n\nAs the data set was found on Kaggle it was quite clean . Even then I used functions like **.shape()**,  **isnull()**, **dtypes** , **head()** to explore the data and check if there was any null values. \n\n### Below are my observations<br>\n\n>        Third Umpire column is mostly filled by NaNs\n\n>        First and Second umpire for two matches where not known\n\n>        Missing city values I was able to fill using the venue information from the dataset\n\n>        The date format for 2008-2017 was %y%m%d and the date format for 2018-2019 %y%d%m\n\n>        Data for Rising Pune Supergaints and Rising Pune Supergaint same team but re-branding by adding a 's' to the end of the name was combined \n \n>        Similar thing was done for Delhi Capitals and Delhi Daredevils \n\n\n## **Data Visualization**\n\n### This Matches.csv file is throught explored to get the following insights \n\n>       Matches played across season \n      Matches played by each team\n      Matches played in each city \n      Matches played in each stadium \n      Percentage of toss won by each team \n      Decision after toss win Overall \n      Decsion after toss season wise \n      Decsion after toss season wise\n      Percentage of wins after for each team after winning the toss\n      Most common umpire pair across 10 season \n      Most Man-of-Match Wins<br>\n      Function to compute head to head wins between each team \n      100 big wins batting first \n      100 big wins batting second \n\n","162d702c":"# Stadium wise distribution ","46c48f9b":"## The above graph shows us the percentage a team wins the match if it has won the toss . For most team winning the toss is an advantage ","d86150d2":"# Obervation \n\n## We see higher percentage of teams prefer chasing overall across all seasons\n## Also we see that the prefer to chase or bat changes according to seasons \n","2f580da2":"# Does winning the toss means winning the match ?","8ed9e7c6":"# Toss Decision Broken Team Wise ","22ccf315":"# Function to compute the head to head wins between teams ","249c240f":"# Top 10 umpire combinations ","eb5c0f20":"# Observation \n\n## We see that Deccan Chargers( now defunt team ) had the most successfull toss winning percent ","5f374abd":"# Observation \n\n## The reason mumbai dominates over other city could be as some season semi-final and final are played in mumbai\n\n## Also mumbai team plays all its matches in one city unlike other teams who re allocate its home games to different cities ","a72218d5":"## We see there are 7 city location empty on further exploring the venue for the NAN are same 'Dubai International Cricket Stadium so I assume the city for the NAN should be Dubai ","46b6e2b0":"# Matches Played Across Seasons and Total Matches Played by Each Team  ","4de0761f":"# 100 Biggest wins while chasing\n\n# The color of dot indicates the magnitude of the win ","66963947":"# Matches In Each City ","e1dd1f0b":"# Obervation \n\n## Most team prefer to chase apart from Deccan Chargers , Pune Warriors ( Now defunct) and Chennai Super Kings "}}