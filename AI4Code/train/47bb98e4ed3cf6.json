{"cell_type":{"f508c8bd":"code","59e78996":"code","bdce658e":"code","adc8ed0d":"code","2a32e688":"code","72ad6930":"code","dbe7eeab":"markdown","e75b7ce2":"markdown","7874d0c2":"markdown","a6fef1ab":"markdown","e8e6d9fc":"markdown"},"source":{"f508c8bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport folium\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e78996":"df=pd.read_csv(\"\/kaggle\/input\/eurovision-2021-song-competition-voting-patterns\/Eurovision_televotes_2021.csv\")\ndf.columns","bdce658e":"from geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"your_app_name\")\ndef locate(country):\n    try:\n        # Geolocate the center of the country\n        loc = geolocator.geocode(country)\n        # return latitude and longitude\n        return (loc.latitude, loc.longitude)\n    except:\n        return np.nan\ncountriesloc={}\nfor x in df.iloc[:,0].values:\n    countriesloc[x]=locate(x)","adc8ed0d":"len(countriesloc)","2a32e688":"df.set_index('Country (Voters (vertical), Finalists (horizontal))',inplace=True)\ndf.head(3)","72ad6930":"def votes_to(country):\n    mp=folium.Map(countriesloc[country],zoom_start=3)\n    folium.Marker(countriesloc[country],icon=folium.Icon(color=\"red\")).add_to(mp)\n    lis=[(x,y) for x,y in zip(df.loc[country,:].index,df.loc[country,:].values)]\n    for x in lis:\n        if(x[1]>0):\n            folium.Marker(countriesloc[x[0]], popup=x[1]).add_to(mp)\n    display(mp)\nfor x in df.index:\n    print(x)\n    votes_to(x)","dbe7eeab":"> **Let's set our voters as a index for simplicity**","e75b7ce2":"# Let's Visualise The Each Voter's Votes Country Wise.\n> **Some Points to be noted here are :**\n* We Show all those countries in a map to whom Voter Voted greater Than 0\n* Red marker is the Voter and blue markers denote the countries to whom it Votes.\n* Each blue Marker is the Pop up which shows the point from 1-12.","7874d0c2":"# For the Solution of Task We only Want the first dataSet So lets import that one","a6fef1ab":"# From The Visualizations These Points Can Be Concluded\n> **Generally Contries Support Their Neibours i.e They Generally Vote For Their Neighbours**\n\n> **Some Countries That Dosn't Vote For Their Neighbours Are : Australia , Russia And Georgia**\n\n> **There Exist A General Patter That Countries Votes Their Neighbour Higher**","e8e6d9fc":"# Here we will find the longitude and lattitude of Every countries in our list to make map visuals"}}