{"cell_type":{"4b6584a0":"code","c285a445":"code","28bbf7e9":"code","b6a2b61e":"code","5aeeb9ce":"code","b0450965":"code","4d95a5d0":"code","d03068fd":"code","10e42bd8":"code","81bf6728":"code","9aaae746":"code","3df7d5c8":"code","cf0a2bf8":"code","bc07dfb4":"code","fed5f3bc":"code","d54ca3a4":"code","96b3b57b":"code","4df4c840":"markdown","573a522f":"markdown","e483e1f3":"markdown","cd84c669":"markdown","551e3b77":"markdown","55b126ca":"markdown","68d46e32":"markdown","2c4052e7":"markdown","ae7c1b64":"markdown","3a4103b4":"markdown","bc7a66e9":"markdown","db121770":"markdown","dcd99130":"markdown","07755fe2":"markdown","d4c8be6d":"markdown","50a6c784":"markdown","3235da6e":"markdown"},"source":{"4b6584a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c285a445":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport matplotlib.pyplot as plt","28bbf7e9":"plt.imshow(cv2.imread(\"\/kaggle\/input\/pothole-detection-dataset\/potholes\/125.jpg\"))","b6a2b61e":"plt.imshow(cv2.imread(\"\/kaggle\/input\/pothole-detection-dataset\/normal\/11.jpg\"))","5aeeb9ce":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   validation_split=0.2)\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/pothole-detection-dataset',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary',\n                                                 subset=\"training\")","b0450965":"validation_generator = train_datagen.flow_from_directory(\n    \"\/kaggle\/input\/pothole-detection-dataset\", # same directory as training data\n    target_size=(64, 64),\n    batch_size=32,\n    class_mode='binary',\n    subset='validation')","4d95a5d0":"cnn = tf.keras.models.Sequential()","d03068fd":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","10e42bd8":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","81bf6728":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","9aaae746":"cnn.add(tf.keras.layers.Flatten())","3df7d5c8":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","cf0a2bf8":"cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","bc07dfb4":"cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","fed5f3bc":"cnn.fit(x = training_set, validation_data = validation_generator, epochs = 25)","d54ca3a4":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/pothole-detection-dataset\/normal\/341.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'pothole'\nelse:\n  prediction = 'normal'","96b3b57b":"print(prediction)","4df4c840":"**Part 4 - Making a single prediction**","573a522f":"**Training the CNN on the Training set and evaluating it on the Validation set**","e483e1f3":"****Splitting dataset into training and validation and preprocessing the training set****","cd84c669":"**Step 5 - Output Layer**","551e3b77":"**Compiling the CNN**","55b126ca":"**CHECKING IMAGES FOR CONFIRMATION**","68d46e32":"**Part 2 - Building the CNN**","2c4052e7":"**Part 1 - Data Preprocessing**","ae7c1b64":"**Part 3 - Training the CNN**","3a4103b4":"**Adding a second convolutional layer**","bc7a66e9":"**Preprocessing the validation set**","db121770":"**Step 3 - Flattening**","dcd99130":"**Step 4 - Full Connection**","07755fe2":"**Step 2 - Pooling**","d4c8be6d":"**IMPORTING LIBRARIES**","50a6c784":"**Initialising the CNN**","3235da6e":"**Step 1 - Convolution**"}}