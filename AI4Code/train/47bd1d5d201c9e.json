{"cell_type":{"36bff823":"code","6f16833a":"code","74c2f54b":"code","591ba4ee":"code","06d199cb":"code","b9f6aba0":"code","670997b0":"code","1f681f97":"code","cd6245b7":"code","58977a62":"code","49fe8325":"code","7e43eca4":"code","beea1e7f":"code","b6acbec6":"code","9bbd43fe":"code","0e60879d":"code","9fa41784":"code","21422ad1":"code","e5b21455":"code","75fdc5a2":"code","04c97d88":"code","bf9f678f":"code","84cffe31":"code","4229cfbf":"markdown","52a71347":"markdown","c1463416":"markdown","d0639e45":"markdown","4b15e353":"markdown","54a68104":"markdown","60ea8af2":"markdown","cd510959":"markdown","f4040cc1":"markdown"},"source":{"36bff823":"import numpy as np\nimport pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom functools import reduce\nimport random\n\nimport warnings\nwarnings.filterwarnings('ignore')","6f16833a":"data = pd.read_csv('..\/input\/X_train.csv')\ntarget = pd.read_csv('..\/input\/y_train.csv')\ntest = pd.read_csv('..\/input\/X_test.csv')","74c2f54b":"data.info()","591ba4ee":"print(data.shape)\ndata.head()","06d199cb":"data = data[['series_id', 'measurement_number', 'orientation_X',\n       'orientation_Y', 'orientation_Z', 'orientation_W', 'angular_velocity_X',\n       'angular_velocity_Y', 'angular_velocity_Z', 'linear_acceleration_X',\n       'linear_acceleration_Y', 'linear_acceleration_Z']]","b9f6aba0":"f_data = pd.merge(data, target, how='inner')\nfull_data = f_data[['series_id', 'measurement_number', 'orientation_X',\n       'orientation_Y', 'orientation_Z', 'orientation_W', 'angular_velocity_X',\n       'angular_velocity_Y', 'angular_velocity_Z', 'linear_acceleration_X',\n       'linear_acceleration_Y', 'linear_acceleration_Z', 'surface']]","670997b0":"pd.value_counts(full_data['surface']).plot(kind='barh');","1f681f97":"plt.figure(figsize=(25,20))\nsns.set(font_scale=1.5)\nsns.heatmap(full_data.corr(),annot=True);","cd6245b7":"full_data.columns","58977a62":"from sklearn.ensemble import BaggingClassifier, RandomForestClassifier","49fe8325":"colum = ['series_id','orientation_X', 'orientation_Y',\n       'orientation_Z', 'orientation_W', 'angular_velocity_X',\n       'angular_velocity_Y', 'angular_velocity_Z', 'linear_acceleration_X',\n       'linear_acceleration_Y', 'linear_acceleration_Z']\ntr_dat = full_data[colum+['surface']].groupby(['series_id']).max()\ntr_dat_1 = full_data[colum].groupby(['series_id']).min()\ntr_dat_2 = full_data[colum].groupby(['series_id']).median()\ntr_dat_3 = full_data[colum].groupby(['series_id']).mean()\ntr_dat_4 = full_data[colum].groupby(['series_id']).std()\ntr_dat_5 = full_data[colum].groupby(['series_id']).quantile(0.25)\ntr_dat_6 = full_data[colum].groupby(['series_id']).quantile(0.5)\ntr_dat_7 = full_data[colum].groupby(['series_id']).quantile(0.75)\ntr_dat_8 = full_data[colum].groupby(['series_id']).max()\/full_data[colum].groupby(['series_id']).min()","7e43eca4":"tr_dat_5 = full_data[colum].groupby(['series_id']).quantile(0.25)\ntr_dat_5.head()","beea1e7f":"ss = [tr_dat,tr_dat_1,tr_dat_2,tr_dat_3,tr_dat_4,tr_dat_5,tr_dat_6,tr_dat_7,tr_dat_8]\ndf_final = reduce(lambda left,right: pd.merge(left,right,on='series_id'), ss)\ndf_final.head()","b6acbec6":"ts_dat = test[colum].groupby(['series_id']).max()\nts_dat_1 = test[colum].groupby(['series_id']).min()\nts_dat_2 = test[colum].groupby(['series_id']).median()\nts_dat_3 = test[colum].groupby(['series_id']).mean()\nts_dat_4 = test[colum].groupby(['series_id']).std()\nts_dat_5 = test[colum].groupby(['series_id']).quantile(0.25)\nts_dat_6 = test[colum].groupby(['series_id']).quantile(0.5)\nts_dat_7 = test[colum].groupby(['series_id']).quantile(0.75)\nts_dat_8 = test[colum].groupby(['series_id']).max()\/test[colum].groupby(['series_id']).min()\nts_ss = [ts_dat,ts_dat_1,ts_dat_2,ts_dat_3,ts_dat_4,ts_dat_5,ts_dat_6,ts_dat_7,ts_dat_8]\nts_final = reduce(lambda left,right: pd.merge(left,right,on='series_id'), ts_ss)\ncols = ['orientation_X_x', 'orientation_Y_x', 'orientation_Z_x',\n       'orientation_W_x', 'angular_velocity_X_x', 'angular_velocity_Y_x',\n       'angular_velocity_Z_x', 'linear_acceleration_X_x',\n       'linear_acceleration_Y_x', 'linear_acceleration_Z_x',\n       'orientation_X_y', 'orientation_Y_y', 'orientation_Z_y',\n       'orientation_W_y', 'angular_velocity_X_y', 'angular_velocity_Y_y',\n       'angular_velocity_Z_y', 'linear_acceleration_X_y',\n       'linear_acceleration_Y_y', 'linear_acceleration_Z_y', 'orientation_X_x',\n       'orientation_Y_x', 'orientation_Z_x', 'orientation_W_x',\n       'angular_velocity_X_x', 'angular_velocity_Y_x', 'angular_velocity_Z_x',\n       'linear_acceleration_X_x', 'linear_acceleration_Y_x',\n       'linear_acceleration_Z_x', 'orientation_X_y', 'orientation_Y_y',\n       'orientation_Z_y', 'orientation_W_y', 'angular_velocity_X_y',\n       'angular_velocity_Y_y', 'angular_velocity_Z_y',\n       'linear_acceleration_X_y', 'linear_acceleration_Y_y',\n       'linear_acceleration_Z_y', 'orientation_X_x', 'orientation_Y_x',\n       'orientation_Z_x', 'orientation_W_x', 'angular_velocity_X_x',\n       'angular_velocity_Y_x', 'angular_velocity_Z_x',\n       'linear_acceleration_X_x', 'linear_acceleration_Y_x',\n       'linear_acceleration_Z_x', 'angular_velocity_X_y',\n       'angular_velocity_Y_y', 'angular_velocity_Z_y',\n       'linear_acceleration_X_y', 'linear_acceleration_Y_y',\n       'linear_acceleration_Z_y', 'orientation_W_y', 'orientation_X_y',\n       'orientation_Y_y', 'orientation_Z_y', 'angular_velocity_X_x',\n       'angular_velocity_Y_x', 'angular_velocity_Z_x',\n       'linear_acceleration_X_x', 'linear_acceleration_Y_x',\n       'linear_acceleration_Z_x', 'orientation_W_x', 'orientation_X_x',\n       'orientation_Y_x', 'orientation_Z_x', 'angular_velocity_X_y',\n       'angular_velocity_Y_y', 'angular_velocity_Z_y',\n       'linear_acceleration_X_y', 'linear_acceleration_Y_y',\n       'linear_acceleration_Z_y', 'orientation_W_y', 'orientation_X_y',\n       'orientation_Y_y', 'orientation_Z_y', 'orientation_X', 'orientation_Y',\n       'orientation_Z', 'orientation_W', 'angular_velocity_X',\n       'angular_velocity_Y', 'angular_velocity_Z', 'linear_acceleration_X',\n       'linear_acceleration_Y', 'linear_acceleration_Z']","9bbd43fe":"trains = df_final[cols]\ntargs = df_final['surface']\ntests = ts_final[cols]","0e60879d":"data[data.series_id==0]['angular_velocity_Z'].plot();\nplt.show()\ndata[data.series_id==0]['orientation_X'].plot();","9fa41784":"from sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nnew_feat_x = []\nnew_feat_y = []\nnew_feat_z = []\nnew_feat_w = []\n\nskm = LinearRegression()\nfor i in range(3810):\n        qq = data[data.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_X'].index))\n        skm.fit(x, qq['orientation_X'].values)\n        new_feat_x.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3810):\n        qq = data[data.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_Y'].index))\n        skm.fit(x, qq['orientation_Y'].values)\n        new_feat_y.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3810):\n        qq = data[data.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_Z'].index))\n        skm.fit(x, qq['orientation_Z'].values)\n        new_feat_z.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3810):\n        qq = data[data.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_W'].index))\n        skm.fit(x, qq['orientation_W'].values)\n        new_feat_w.append([skm.intercept_, skm.coef_[0]])\n        \nnew_feat_x = np.array(new_feat_x)\nnew_feat_y = np.array(new_feat_y)\nnew_feat_z = np.array(new_feat_z)\nnew_feat_w = np.array(new_feat_w)\n","21422ad1":"trains['intercept_x'] = new_feat_x[:,0]\ntrains['coef_x'] = new_feat_x[:,1]\ntrains['intercept_y'] = new_feat_y[:,0]\ntrains['coef_y'] = new_feat_y[:,1]\ntrains['intercept_z'] = new_feat_z[:,0]\ntrains['coef_z'] = new_feat_z[:,1]\ntrains['intercept_w'] = new_feat_w[:,0]\ntrains['coef_w'] = new_feat_w[:,1]","e5b21455":"new_feat_x = []\nnew_feat_y = []\nnew_feat_z = []\nnew_feat_w = []\n\nnew_feat_ax = []\nnew_feat_ay = []\nnew_feat_az = []\nfor i in range(3816):\n        qq = test[test.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_X'].index))\n        skm.fit(x, qq['orientation_X'].values)\n        new_feat_x.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3816):\n        qq = test[test.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_Y'].index))\n        skm.fit(x, qq['orientation_Y'].values)\n        new_feat_y.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3816):\n        qq = test[test.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_Z'].index))\n        skm.fit(x, qq['orientation_Z'].values)\n        new_feat_z.append([skm.intercept_, skm.coef_[0]])\nfor i in range(3816):\n        qq = test[test.series_id==i]\n        x = np.transpose(np.atleast_2d(qq['orientation_W'].index))\n        skm.fit(x, qq['orientation_Z'].values)\n        new_feat_w.append([skm.intercept_, skm.coef_[0]])\n        \nnew_feat_x = np.array(new_feat_x)\nnew_feat_y = np.array(new_feat_y)\nnew_feat_z = np.array(new_feat_z)\nnew_feat_w = np.array(new_feat_w)\n\ntests['intercept_x'] = new_feat_x[:,0]\ntests['coef_x'] = new_feat_x[:,1]\ntests['intercept_y'] = new_feat_y[:,0]\ntests['coef_y'] = new_feat_y[:,1]\ntests['intercept_z'] = new_feat_z[:,0]\ntests['coef_z'] = new_feat_z[:,1]\ntests['intercept_w'] = new_feat_w[:,0]\ntests['coef_w'] = new_feat_w[:,1]","75fdc5a2":"print('X_train.shape = ', trains.shape)\ntrains.head()","04c97d88":"clf = RandomForestClassifier(n_estimators = 2000,\n                               max_depth=20, \n                             min_samples_split=5,\n                             class_weight='balanced')\n                            \nclf.fit(trains, targs)\nress  = clf.predict(tests)","bf9f678f":"submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nprint(len(submission))\nprint(test.shape)\nsubmission['surface'] = ress\nsubmission.to_csv(\"NEW_submission.csv\", index = False)\nsubmission.head()","84cffe31":"importance = pd.DataFrame({'value': clf.feature_importances_,\n                           'feature': np.array(trains.columns)})\nimportance.sort_values(by='value', ascending=False, inplace=True)\nplt.figure(figsize=(20, 20))\nsns.barplot(x='value', y='feature', data=importance);","4229cfbf":"## Feature engineering + Random Forest","52a71347":"Consider features in this dataset:","c1463416":"See on the example of data - it's nonlinear plot for every feature. We need some characteristics of this plot.","d0639e45":"Not missed values - good!","4b15e353":"Thank you for reading! I hope this kernel was useful for you.","54a68104":"See on the target distribution. Every class counts are very different, so we need use weights for our classifiers. <br>\nAll - 9 classes.","60ea8af2":"Most interesting - feature importance","cd510959":"Some features engineering:","f4040cc1":"Add correlation coefficient and intercept to the data. (from sklearn)"}}