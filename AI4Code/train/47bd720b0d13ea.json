{"cell_type":{"2a38882b":"code","a87b01bc":"code","ddcef42a":"code","7671b0bb":"code","6633d88c":"code","477cbd57":"code","a9f745bc":"code","47c32cdf":"code","763915fe":"code","f9bd5a0c":"code","f57ab5fc":"code","739d97a2":"code","e1403f37":"code","82a715e0":"code","7cddfa43":"code","1aa66fad":"code","7426aa3a":"code","3e8f6d7c":"code","1d81a66a":"markdown","f765a07d":"markdown","ff5773f2":"markdown","88699891":"markdown","5a4f29b0":"markdown","c029d0f1":"markdown","48a69a9e":"markdown","deade086":"markdown","36133e51":"markdown","c66384e6":"markdown","7d460793":"markdown","f889363b":"markdown"},"source":{"2a38882b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visualizations\nimport seaborn as sns #data visualizations\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a87b01bc":"data = pd.read_csv('..\/input\/ecommerce-data\/data.csv',encoding='unicode_escape')","ddcef42a":"data.head()","7671b0bb":"#look the data types\ndata.dtypes","6633d88c":"data['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'])\ndata.dtypes","477cbd57":"data_new = data.copy()","a9f745bc":"data_new = data_new[(data_new['UnitPrice'] > 0) & (data_new['Quantity'] > 0)]\ndata_new[data_new['UnitPrice'] == 0]","47c32cdf":"#That look the numeric data\nplt.subplots(figsize =(12,6))\nsns.boxplot(data_new.UnitPrice);","763915fe":"data_new.columns","f9bd5a0c":"data_new.groupby(by=['CustomerID','Country'])['InvoiceNo'].count().head()","f57ab5fc":"data_new['TotalPrice']=data_new['UnitPrice'] * data_new['Quantity']\ndata_new.head()","739d97a2":"data_new.groupby(by=['CustomerID'], as_index=False)['TotalPrice'].sum().head()","e1403f37":"#Review by date\ndata_new['purch_month'] = data_new.InvoiceDate.dt.to_period('M').astype(str)\norder_per_month = data_new.groupby(by='purch_month', as_index=False).TotalPrice.sum()\nplt.figure(figsize = (12,5))\nax = sns.lineplot(x=\"purch_month\", y = \"TotalPrice\", data=order_per_month)\nax.set_title('Orders per month');\n","82a715e0":"data_new_2= data_new.groupby('Country')['InvoiceNo'].count().sort_values(ascending= False)\n","7cddfa43":"data_new_2.head()","1aa66fad":"sns.set(font_scale=1.4)\ndata_new_2.plot(kind='barh', figsize=(7, 10), rot=0)\nplt.xlabel(\"Orders\", labelpad=14)\nplt.ylabel(\"Country\", labelpad=14)\nplt.title(\"OrdersperCountry\", y=1.02);","7426aa3a":"data_grouped =  data_new.groupby(by=['Country','purch_month'], as_index=False)['TotalPrice'].sum()\ndata_grouped['percentage'] = data_grouped['TotalPrice']\/data_grouped['TotalPrice'].sum()\ndata_per =  data_grouped.groupby(by=['Country'], as_index=False)['percentage'].sum().sort_values('percentage',ascending=False)\ndata_per.head()","3e8f6d7c":"df = data_grouped[data_grouped['Country'].isin(['United Kingdom','Netherlands'])]\nplt.figure(figsize=(16,6))\nd=np.arange(1,13)\nsns.lineplot(data = df, x='purch_month', y='TotalPrice',err_style='bars', hue= 'Country');","1d81a66a":"We convert the 'InvoiceDate' column from object to datetime so that you can use it in subsequent calculations.","f765a07d":"looking at dense places and ends","ff5773f2":"To find the total spend of a customer","88699891":"Discounted prices, dirty data etc. can. To get rid of this, we take orders with a **price and quantity greater than 0:**\nHere we have filtered out 'UnitPrice' to 0 for control.","5a4f29b0":"Upload data and look at the top 5","c029d0f1":"* Total turnover on a monthly basis\n* We create a year-month-based column, then visualize it:","48a69a9e":"To find the total price paid for a product in an order, we multiply the columns of 'UnitPrice' and 'Quantity'.\n","deade086":"We look at the share that countries receive based on their total spending.","36133e51":"We filter the first 2 countries that have the highest share in sales and look at the train on monthly sales:","c66384e6":"Most orders come from the United Kingdom,","7d460793":"# ***Finally***\n**In England, the effect of 'Black Friday' or 'Halloween' is higher than the effect on sales in the Netherlands.**","f889363b":"Here is how many orders a customer places on a country basis:"}}