{"cell_type":{"c24a75a4":"code","7d143db0":"code","7d30a1c0":"code","045835a8":"code","2f73661f":"code","2acd96c7":"code","39b61884":"code","abfded4a":"code","8b7b9228":"code","ccc200cb":"code","5570b9d9":"code","6d5dfed3":"code","f55d03d1":"code","337e0b03":"code","e7a65111":"code","7bd70d10":"code","967df863":"code","7a4f81f6":"code","93467520":"code","a76bdf7c":"code","d55d0bdb":"code","c9ab0fa8":"code","37ff4758":"code","73e1a150":"code","a24d2349":"code","2565e563":"code","5664a0c5":"code","d495ee9c":"code","82fba28c":"code","4af224ae":"code","5010d41b":"code","27423deb":"code","0aa10f84":"code","84081907":"code","fd18f26a":"code","30d96255":"markdown","32e8dcd2":"markdown","913540a8":"markdown","b6b8663e":"markdown","a388e66a":"markdown","c5797e0f":"markdown","276da4ed":"markdown","d70fc0e1":"markdown","bf057848":"markdown"},"source":{"c24a75a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d143db0":"#\ud559\uc2b5\ubaa8\ub378\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import VotingClassifier\n\n#\uc804\ucc98\ub9ac \ubc0f \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\n#\uacb0\uacfc\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\n\n#\uc2dc\uac01\ud654\n\nimport matplotlib.pylab as plt\n%matplotlib inline","7d30a1c0":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","045835a8":"train.info()","2f73661f":"train.describe(include='all')","2acd96c7":"train.shape","39b61884":"train = train.drop_duplicates(keep=False) # \uc911\ubcf5\ud589 \uc81c\uac70","abfded4a":"train.isnull().sum() #\uacb0\uce21\uce58 \ud655\uc778","8b7b9228":"train = train.fillna(train.mean()).dropna() # \ub098\uc774\uc5d0 \ub300\ud55c \uacb0\uce21\uce58\ub97c \ucc44\uc6cc\ub123\uace0 \ud0d1\uc2b9\ud56d\uad6c\uc640 \uac1d\uc2e4\ubc88\ud638\uac00 \uc5c6\ub294 \uac83\uc740 \uc0ad\uc81c","ccc200cb":"train['Age'] = train['Age'].astype(int) # \uc18c\uc218\uc810 \uc81c\uac70\ntrain['Age'] = train['Age'].astype('float64')","5570b9d9":"train.isnull().sum(), train.info()","6d5dfed3":"X = train.drop(['PassengerId','Survived','Name','Ticket','Cabin'],axis=1)\ny = train['Survived']","f55d03d1":"X","337e0b03":"# X_ols = pd.get_dummies(X,columns =['Sex','Embarked','Pclass','SibSp','Parch'],drop_first=True)\nX = pd.get_dummies(X,columns =['Sex','Embarked','Pclass']) ","e7a65111":"scaler = StandardScaler() # \uc2a4\ucf00\uc77c\ub9c1\nx = scaler.fit_transform(X)","7bd70d10":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)","967df863":"lr = LogisticRegression()\nlr.fit(x_train,y_train)\npred = lr.predict(x_test)\naccuracy_score(y_test,pred)","7a4f81f6":"print(classification_report(y_test,pred))","93467520":"lr = LogisticRegression()\ndt = DecisionTreeClassifier()\nrf = RandomForestClassifier()\nnb = GaussianNB()\n\neclf_h =VotingClassifier(estimators = [('lr',lr),('dt',dt),('rf',rf),('nb',nb)],voting='hard')\neclf_s =VotingClassifier(estimators = [('lr',lr),('dt',dt),('rf',rf),('nb',nb)],voting='soft')\nmodels = [lr,dt,rf,nb,eclf_h,eclf_s]","a76bdf7c":"for model in models:\n  model.fit(x_train,y_train)\n  predictions = model.predict(x_test)\n  score = model.score(x_test,y_test)\n  print(score)","d55d0bdb":"X.columns","c9ab0fa8":"test.columns","37ff4758":"test_id = test['PassengerId']","73e1a150":"test = test.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\ntest = pd.get_dummies(test,columns =['Sex','Embarked','Pclass']) \ntest","a24d2349":"X.shape,test.shape","2565e563":"test = test.dropna()\ntest","5664a0c5":"test =scaler.fit_transform(test)\ntest","d495ee9c":"eclf_result = eclf_s.predict(test)","82fba28c":"import tensorflow as tf\nfrom tensorflow.keras import layers","4af224ae":"np_test = np.array(test)","5010d41b":"inputs = tf.keras.Input(x[1].shape)\nly1=tf.keras.layers.Dense(12,activation=tf.nn.relu)(inputs)\nly2=tf.keras.layers.Dense(8,activation=tf.nn.relu)(ly1)\nly3=tf.keras.layers.Dense(16,activation=tf.nn.relu)(ly2)\nly4=tf.keras.layers.Dense(128,activation=tf.nn.relu)(ly3)\nly5=tf.keras.layers.Dense(64,activation=tf.nn.relu)(ly4)\nly6=tf.keras.layers.Dense(32,activation=tf.nn.relu)(ly5)\noutputs =tf.keras.layers.Dense(1,activation=tf.nn.relu)(ly6)\n\nmodel = tf.keras.Model(inputs=inputs,outputs=outputs)\nmodel.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy','BinaryCrossentropy'])\nhist = model.fit(x_train,y_train, epochs = 200, batch_size=32, validation_split=0.2)","27423deb":"model.evaluate(x_test,y_test)","0aa10f84":"hist.history.keys()","84081907":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])","fd18f26a":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])","30d96255":"# \ub370\uc774\ud130\uc14b \uc77d\uc5b4\uc624\uae30","32e8dcd2":"## Votingclass_soft\ub85c \ub098\uc628 test \ub370\uc774\ud130\uc758 \uc885\uc18d\ubcc0\uc218 \uac12","913540a8":"## LogisticRegression","b6b8663e":"# Perceptrons","a388e66a":"## preprocessing","c5797e0f":"# \uc0ac\uc6a9\ud55c \ubaa8\ub4c8","276da4ed":"## \ub2e4\ub978 \ubd84\ub958\ubaa8\ub378\ub4e4 \uc0ac\uc6a9","d70fc0e1":"- votingclass soft\uac00 \uc2a4\ucf54\uc5b4\uac00 \uc81c\uc77c \ub192\uac8c\ub098\uc654\ub2e4\n\n- \uc544\ub798\uc5d0\uc11c test \ud30c\uc77c\ub85c predict \ud574\ubcf4\uae30\uc704\ud574 test data \uc804\ucc98\ub9ac","bf057848":"# Classification"}}