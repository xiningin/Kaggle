{"cell_type":{"52762299":"code","14dfcfcc":"code","4b34bae2":"code","d99c1021":"code","da4ffe41":"code","2b082d84":"code","cb60f683":"code","5c85e69a":"code","c50cd71b":"code","740a729a":"code","e0b1b84f":"code","18f3e4b6":"code","2fbe6466":"code","5899a023":"code","e6d5903f":"code","8eac8558":"code","8218d282":"code","0db797ff":"code","1fbaa556":"code","0680510b":"code","a92c5e61":"markdown","25d5ec3d":"markdown","46d6c5db":"markdown","1e317d12":"markdown","45d3162c":"markdown","cc6f3a2e":"markdown","3607bb17":"markdown","3a41956e":"markdown","8f69ee1d":"markdown","0855c227":"markdown","0045f8eb":"markdown","91642811":"markdown","8cfac5b9":"markdown","6424310e":"markdown","8bb0c4f5":"markdown","1464ad93":"markdown","ba339f50":"markdown"},"source":{"52762299":"import os\nprint(os.listdir('..\/input\/flowers-recognition\/flowers'))\n","14dfcfcc":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n","4b34bae2":"# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image","d99c1021":"FLOWER_DAISY_DIR='..\/input\/flowers-recognition\/flowers\/daisy'\nFLOWER_SUNFLOWER_DIR='..\/input\/flowers-recognition\/flowers\/sunflower'\nFLOWER_TULIP_DIR='..\/input\/flowers-recognition\/flowers\/tulip'\nFLOWER_DANDI_DIR='..\/input\/flowers-recognition\/flowers\/dandelion'\nFLOWER_ROSE_DIR='..\/input\/flowers-recognition\/flowers\/rose'\n\nX=[]\nZ=[]\nIMG_SIZE=150","da4ffe41":"def assign_label(img,flower_type):\n    return flower_type","2b082d84":"from tqdm import tqdm\n\ndef make_train_data(flower_type,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,flower_type)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","cb60f683":"make_train_data('Daisy',FLOWER_DAISY_DIR)\nprint(len(X))\n","5c85e69a":"make_train_data('Sunflower',FLOWER_SUNFLOWER_DIR)\nprint(len(X))","c50cd71b":"make_train_data('Tulip',FLOWER_TULIP_DIR)\nprint(len(X))\n","740a729a":"make_train_data('Dandelion',FLOWER_DANDI_DIR)\nprint(len(X))","e0b1b84f":"make_train_data('Rose',FLOWER_ROSE_DIR)\nprint(len(X))","18f3e4b6":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,5)\nX=np.array(X)\nX=X\/255","2fbe6466":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=42)\n","5899a023":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\nnp.random.seed(42)\nrn.seed(42)\ntf.set_random_seed(42)","e6d5903f":"# # modelling starts using a CNN.\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (150,150,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \n\nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(5, activation = \"softmax\"))\n","8eac8558":"batch_size=128\nepochs=50\n\nfrom keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","8218d282":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","0db797ff":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","1fbaa556":"model.summary()\n","0680510b":"History = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)\n# model.fit(x_train,y_train,epochs=epochs,batch_size=batch_size,validation_data = (x_test,y_test))","a92c5e61":"> **Resizing and appending the array for Dandelion**","25d5ec3d":"> **Resizing and appending the array for Daisy**","46d6c5db":"#   **CONVOLUTION NEURAL NETWOTK**\n \n       The advancements in Computer Vision with Deep Learning has been constructed and perfected with time, primarily over one particular algorithm \u2014 a Convolutional Neural Network.\n       A CNN typically has three layers: a convolutional layer, pooling layer, and fully connected layer.\n* Convolution Layer\n       The convolution layer is the core building block of the CNN. It carries the main portion of the network\u2019s computational load.\n* Pooling Layer\n       The pooling layer replaces the output of the network at certain locations by deriving a summary statistic of the nearby outputs.\n*  Fully Connected Layer\n       Neurons in this layer have full connectivity with all neurons in the preceding and succeeding layer as seen in regular FCNN\n* Non-Linearity Layers\n       Since convolution is a linear operation and images are far from linear, non-linearity layers are often placed directly after the     \n       convolutional layer to introduce non-linearity to the activation map\n       sigmoid,tanh,Relu are some of the activation functions","1e317d12":"IMPORTING BASIC PACKAGES","45d3162c":"> **Implementing CNN model**","cc6f3a2e":"> **Using Adam optimizer**","3607bb17":"READING ALL THE IMAGES FROM DIFFERENT FOLDERS","3a41956e":"> **Understanding the model**","8f69ee1d":"> **splitting for test and train**","0855c227":"> **Data augumentation**","0045f8eb":"> labeling the images with thier names ","91642811":"Model prediction","8cfac5b9":"> **label encoding and trasnforming every pixel to 1 and 0 for better understanding**","6424310e":"> **Resizing and appending the array for sunflower**","8bb0c4f5":"> in this function we are going to\n     1.Read the images one by one\n     2.Resizing it\n     3.storing in a array\n    ","1464ad93":"> **Resizing and appending the array for Rose**","ba339f50":"> **Resizing and appending the array for Tulip**"}}