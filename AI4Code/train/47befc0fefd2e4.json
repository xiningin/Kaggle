{"cell_type":{"63ca6b55":"code","bd887629":"code","d87e1bd4":"code","69041f74":"code","41742740":"code","e74f7a6f":"code","e33ef095":"code","e71aeb75":"code","7403a7f9":"code","4ea62578":"code","af8131e6":"code","76ddfc06":"markdown"},"source":{"63ca6b55":"import os\nimport json\nimport glob\nimport random\nimport collections\n\nimport numpy as np\nimport pandas as pd\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom tqdm.notebook import tqdm\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import layers\n\n\n\nTYPES = [\"FLAIR\", \"T1w\", \"T2w\", \"T1wCE\"]\nWHITE_THRESHOLD = 10 # out of 255\nEXCLUDE = [109, 123, 709]\n\n\ntrain_df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\ntest_df = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv')\ntrain_df = train_df[~train_df.BraTS21ID.isin(EXCLUDE)]","bd887629":"def load_dicom(path, size = 224):\n    ''' \n    Reads a DICOM image, standardizes so that the pixel values are between 0 and 1, then rescales to 0 and 255\n    \n    Note super sure if this kind of scaling is appropriate, but everyone seems to do it. \n    '''\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return cv2.resize(data, (size, size))\n\ndef get_all_image_paths(brats21id, image_type, folder='train'): \n    '''\n    Returns an arry of all the images of a particular type for a particular patient ID\n    '''\n    assert(image_type in TYPES)\n    \n    patient_path = os.path.join(\n        \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/%s\/\" % folder, \n        str(brats21id).zfill(5),\n    )\n\n    paths = sorted(\n        glob.glob(os.path.join(patient_path, image_type, \"*\")), \n        key=lambda x: int(x[:-4].split(\"-\")[-1]),\n    )\n    \n    num_images = len(paths)\n    \n    start = int(num_images * 0.25)\n    end = int(num_images * 0.75)\n\n    interval = 3\n    \n    if num_images < 10: \n        interval = 1\n    \n    return np.array(paths[start:end:interval])\n\ndef get_all_images(brats21id, image_type, folder='train', size=225):\n    return [load_dicom(path, size) for path in get_all_image_paths(brats21id, image_type, folder)]\n","d87e1bd4":"IMAGE_SIZE = 32\n\ndef get_all_data_for_train(image_type):\n    global train_df\n    \n    X = []\n    y = []\n    train_ids = []\n\n    for i in tqdm(train_df.index):\n        x = train_df.loc[i]\n        images = get_all_images(int(x['BraTS21ID']), image_type, 'train', IMAGE_SIZE)\n        label = x['MGMT_value']\n\n        X += images\n        y += [label] * len(images)\n        train_ids += [int(x['BraTS21ID'])] * len(images)\n        assert(len(X) == len(y))\n    return np.array(X), np.array(y), np.array(train_ids)\n\ndef get_all_data_for_test(image_type):\n    global test_df\n    \n    X = []\n    test_ids = []\n\n    for i in tqdm(test_df.index):\n        x = test_df.loc[i]\n        images = get_all_images(int(x['BraTS21ID']), image_type, 'test', IMAGE_SIZE)\n        X += images\n        test_ids += [int(x['BraTS21ID'])] * len(images)\n\n    return np.array(X), np.array(test_ids)","69041f74":"X, y, trainidt = get_all_data_for_train('T1wCE')\nX_test, testidt = get_all_data_for_test('T1wCE')\nX.shape, y.shape, trainidt.shape","41742740":"X.shape, y.shape","e74f7a6f":"X_train, X_valid, y_train, y_valid, trainidt_train, trainidt_valid = train_test_split(X, y, trainidt, test_size=0.2)\nX_train = tf.expand_dims(X_train, axis=-1)\nX_valid = tf.expand_dims(X_valid, axis=-1)\n\ny_train = to_categorical(y_train)\ny_valid = to_categorical(y_valid)\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape, trainidt_train.shape, trainidt_valid.shape","e33ef095":"tf.keras.backend.clear_session()\ninputs = keras.Input(shape=X_train.shape[1:])\n\nh = keras.layers.experimental.preprocessing.Rescaling(1.\/255)(inputs)\n\nh = keras.layers.Conv2D(64, kernel_size=(4, 4), activation=\"relu\", name=\"Conv_1\")(h) \n# pooling layer\nh = keras.layers.MaxPool2D(pool_size=(2,2))(h) \n\n# convolutional layer!\nh = keras.layers.Conv2D(32, kernel_size=(2, 2), activation=\"relu\", name=\"Conv_2\")(h) \n# pooling layer\nh = keras.layers.MaxPool2D(pool_size=(1,1))(h)\n\nh = keras.layers.Dropout(0.3)(h)   \n\nh = keras.layers.Flatten()(h) \nh = keras.layers.Dropout(0.2)(h)\nh = keras.layers.Dense(32, activation='relu')(h)   \n\noutput = keras.layers.Dense(2, activation=\"softmax\")(h)\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\", patience=20)\n\n\nmodel = keras.Model(inputs, output)\nprint(model.summary())\n\ncheckpoint_filepath = 'best_model.h5'\nmodel_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_filepath,\n    save_weights_only=False,\n    monitor='val_auc',\n    mode='max',\n    save_best_only=True,\n    save_freq='epoch'\n)\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=[tf.keras.metrics.AUC(), \"accuracy\"])\n\nhistory = model.fit(\n    x=X_train, \n    y = y_train, \n    epochs=100, \n    callbacks=[model_checkpoint_callback, early_stopping], \n    validation_data= (X_valid, y_valid)\n)","e71aeb75":"model_best = tf.keras.models.load_model(filepath=checkpoint_filepath)","7403a7f9":"y_pred = model_best.predict(X_valid)\n\npred = np.argmax(y_pred, axis=1)\n\nresult=pd.DataFrame(trainidt_valid)\nresult[1]=pred\n\nresult.columns=['BraTS21ID','MGMT_value']\nresult2 = result.groupby('BraTS21ID',as_index=False).mean()\n\nresult2 = result2.merge(train_df, on='BraTS21ID')\nroc_auc_score(result2.MGMT_value_y, result2.MGMT_value_x,)","4ea62578":"len(result2)","af8131e6":"sample = pd.read_csv('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/sample_submission.csv')\n\ny_pred = model_best.predict(X_test)\n\npred = np.argmax(y_pred, axis=1)\n\nresult=pd.DataFrame(testidt)\nresult[1]=pred\n\nresult.columns=['BraTS21ID','MGMT_value']\nresult2 = result.groupby('BraTS21ID',as_index=False).mean()\nresult2['BraTS21ID'] = sample['BraTS21ID']\nresult2['MGMT_value'] = result2['MGMT_value'].apply(lambda x:round(x*10)\/10)\nresult2.to_csv('submission.csv',index=False)\nresult2","76ddfc06":"# Import Datasets"}}