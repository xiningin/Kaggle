{"cell_type":{"f908dbe6":"code","158b2b3e":"code","357b590d":"code","01dfd326":"code","c2265ca5":"code","0748b75c":"code","6e9046f7":"code","1c6cb86b":"code","d427e2df":"code","91fbb3bb":"code","482c7c44":"code","3b7b110a":"code","912e4775":"code","bf8d3623":"code","af6b5919":"code","6d7a8d9d":"code","76fca336":"code","9d676ed0":"code","2a7b338e":"code","0840763e":"code","9aeb7079":"code","ff70a0d0":"code","da69d41b":"code","03d3a41e":"code","fdc163c9":"code","c6bafb3d":"code","10bb85a8":"code","cb9d66b5":"code","ab9fc4cd":"code","259fddc4":"code","f8a05df0":"code","fea9a345":"code","b5f4af6d":"code","b04cda75":"code","239960bc":"code","3d85996d":"code","35c0e572":"code","081f03c6":"code","bb7b0aa4":"code","a53f582d":"code","5485f513":"markdown","1feaff7d":"markdown","464d9301":"markdown","b1e301e1":"markdown","a520f5c3":"markdown"},"source":{"f908dbe6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport plotly.express as px","158b2b3e":"# Suppressing Scientific Notation\npd.options.display.float_format = '{:,.2f}'.format","357b590d":"data = pd.read_csv('\/kaggle\/input\/top-10-highest-grossing-films-19752018\/blockbusters.csv')\ndata.head()","01dfd326":"data.shape","c2265ca5":"data.columns","0748b75c":"data.isna().values","6e9046f7":"# To Find if the DataFrame has Null Values\ndata.isna().values.any()","1c6cb86b":"# To Find columns which has Null Values\ndata.isna().any()","d427e2df":"# To Find if the DataFrame has any Duplicates\ndata.duplicated().values.any()","91fbb3bb":"data.info()","482c7c44":"data.worldwide_gross = data.worldwide_gross.str.replace('$', '').str.replace(',', '')\ndata.worldwide_gross = pd.to_numeric(data.worldwide_gross)\n\ndata.info()","3b7b110a":"data.describe()","912e4775":"data['studio'][data['worldwide_gross'].idxmax()]","bf8d3623":"data['studio'][data['worldwide_gross'].idxmin()]","af6b5919":"data.groupby(\"Main_Genre\").title.count().sort_values(ascending=False)","6d7a8d9d":"# if x = NaN, then x != x\ndf_2_genres = data.loc[data.Genre_2 == data.Genre_2]\ndf_2_genres.reset_index(drop=True, inplace=True)\nprint(f\"Number of Films with 2 genres = {df_2_genres.title.count()}\")\ndf_2_genres.head()","76fca336":"df_3_genres = data.query(\"Genre_3 == Genre_3\")\n# Without drop=True, original index will form a column\ndf_3_genres.reset_index(inplace=True, drop=True)\nprint(f\"Number of Films with 3 Genres = {df_3_genres.title.count()}\")\ndf_3_genres.head()","9d676ed0":"data.groupby('year').title.count()","2a7b338e":"year_to_gross = data.groupby('year').worldwide_gross.sum().sort_values(ascending=False)","0840763e":"# Number of Studios\nlen(data.studio.unique())","9aeb7079":"avg_length_studios = data.groupby('studio').length.mean().sort_values(ascending=False)\navg_length_studios.head()","ff70a0d0":"avg_gross_main_genre = data.groupby('Main_Genre').worldwide_gross.mean()\navg_gross_main_genre.head()","da69d41b":"plt.figure(figsize=(10,6), dpi=120)\nplt.title(\"Main Genre v\/s Worlwide Gross\", fontsize=14)\nplt.xticks(fontsize=14, rotation=45)\nplt.yticks(fontsize=14)\n\nplt.xlabel(\"Main Genre\", fontsize=14)\nplt.ylabel(\"Worldwide Gross in 100 millions\", fontsize=14)\n\nplt.grid(color=\"grey\", linestyle=\"--\", alpha=0.5)\nplt.bar(avg_gross_main_genre.index, avg_gross_main_genre.values)","03d3a41e":"plt.figure(figsize=(14,8), dpi=120)\n\navg_gross_sorted = avg_gross_main_genre.sort_values(ascending=False)\n\nwith sns.axes_style('darkgrid'):\n    fig = sns.barplot(x=avg_gross_sorted.index, \n                y=avg_gross_sorted.values)\n    fig.set(xlabel=\"Main Genre\", ylabel=\"Worlwide Gross in 100 Millions\", title=\"Main Genre v\/s Worlwide Gross\")\n#     plt.xlabel(\"Main Genre\")\n#     plt.ylabel(\"Worldwide Gross in 10 Millions\")\n    plt.show(fig)","fdc163c9":"fig = px.bar(x=avg_gross_main_genre.index, y=avg_gross_main_genre.values, color=avg_gross_main_genre.values)\nfig.update_layout(xaxis_title=\"Main Genre\", yaxis_title=\"Worldwide Gross\")\nfig.show()","c6bafb3d":"df_1_genres = data.loc[data.Genre_2 != data.Genre_2]\n# df_2_genres\n# df_3_genres\ndf_1_genres.head()","10bb85a8":"genre_gross_avg = [df_1_genres.worldwide_gross.mean(), df_2_genres.worldwide_gross.mean(), df_3_genres.worldwide_gross.mean()]\n\nplt.figure(figsize=(10, 6), dpi=120)\nplt.title(\"Number of Genres v\/s Average Worlwide Gross Revenue\", fontsize=14)\nplt.xlabel(\"Number of Genres\", fontsize=14)\nplt.ylabel(\"Average Worldwide Gross Revenue\", fontsize=14)\n\nplt.xticks(np.arange(1, 4, step=1))\n\nplt.bar([1, 2, 3], genre_gross_avg, color=['black'], edgecolor=\"red\")","cb9d66b5":"plt.figure(figsize=(14, 8), dpi=120)\n\nplt.title(\"Length of Films\", fontsize=14)\nplt.xlabel(\"Number of Films\", fontsize=14)\nplt.ylabel(\"Length of Film\", fontsize=14)\n\nplt.grid(color=\"grey\", linestyle=\"--\", alpha=0.5)\nplt.hist(data.length, edgecolor='black')","ab9fc4cd":"plt.figure(figsize=(14,8), dpi=200)\n\nwith sns.axes_style('whitegrid'):  # Axis colours\n  ax = sns.scatterplot(data=data,\n                       x='worldwide_gross', \n                       y='length',\n                       hue='length', # Colour of Dots\n                       size='worldwide_gross') # Size of Dots\n \n#   ax.set(ylim=(0, 3000000000),\n#         xlim=(0, 450000000),\n#         ylabel='Revenue in $ billions',\n#         xlabel='Budget in $100 millions')","259fddc4":"fig = px.scatter(data, x=\"worldwide_gross\", y=\"length\", color=\"length\",\n                 size='worldwide_gross')\nfig.show()","f8a05df0":"plt.figure(figsize=(14,8), dpi=120)\n\nplt.title(\"Mean Length of Films by each Studio House\", fontsize=14)\nplt.xlabel(\"Studio\", fontsize=14)\nplt.ylabel(\"Length of Film\")\n\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\n\nplt.grid(color=\"grey\", linestyle=\"--\", alpha=0.3)\nplt.bar(avg_length_studios.index, avg_length_studios.values)","fea9a345":"total_gross_studio = data.groupby(\"studio\").worldwide_gross.sum().sort_values(ascending=False)\n\nplt.figure(figsize=(14,8), dpi=120)\n\nplt.title(\"Total Worldwide Gross by each Studio House\", fontsize=14)\nplt.xlabel(\"Studio\", fontsize=14)\nplt.ylabel(\"Total Worldwide Gross\", fontsize=14)\n\nplt.xticks(rotation=15)\nplt.yticks(fontsize=12)\n\nplt.grid(color=\"grey\", linestyle=\"--\", alpha=0.3)\nplt.bar(total_gross_studio.index, total_gross_studio.values)\nplt.plot(total_gross_studio.index, total_gross_studio.values, color=\"orange\")","b5f4af6d":"total_gross_rating = data.groupby('rating').worldwide_gross.sum().sort_values(ascending=False)\n\npx.bar(x=total_gross_rating.index, y=total_gross_rating.values, color=total_gross_rating.index)","b04cda75":"genre_count = data.groupby('Main_Genre').title.count().sort_values(ascending=False)\n\nplt.figure(figsize=(14,8), dpi=120)\n\nwith sns.axes_style('darkgrid'):\n    fig = sns.barplot(x=genre_count.index, \n                y=genre_count.values)\n    fig.set(xlabel=\"Main Genre\", ylabel=\"Count\", title=\"Number of Films of Each Genre\")\n    plt.show(fig)","239960bc":"data_copy = pd.DataFrame(data)\ndata_copy['rating_count'] = data_copy['rating']\ngenre_rating = data_copy.groupby(by=['Main_Genre','rating'], as_index=False).agg({'rating_count': pd.Series.count})\n \ngenre_rating = genre_rating.sort_values(ascending=False, by='rating_count')\n\ngenre_rating.head()","3d85996d":"burst = px.sunburst(genre_rating, path=['Main_Genre', 'rating'], values='rating_count', title='Genre v\/s Rating')\nburst.show()","35c0e572":"fig = px.bar(genre_rating, x=\"rating\", y=\"rating_count\", color=\"Main_Genre\", barmode = 'stack')\n \nfig.show()","081f03c6":"genre_length = data.groupby('Main_Genre').length.mean().sort_values(ascending=False)\n\nplt.figure(figsize=(14,8), dpi=120)\n\nplt.title(\"Mean Length v\/s Genre\", fontsize=14)\nplt.xlabel(\"Main Genre\", fontsize=14)\nplt.ylabel(\"Length of Film\")\n\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\n\nplt.grid(color=\"grey\", linestyle=\"--\", alpha=0.3)\nplt.bar(genre_length.index, genre_length.values)","bb7b0aa4":"plt.figure(figsize=(14,8), dpi=120)\n\nsns.set_style(\"whitegrid\")\nfig = sns.lineplot(x='imdb_rating', y='worldwide_gross', data=data, color='red')\nfig.set_title(\"iMDB Ratings v\/s Worldwide Gross\")\nfig.set(xlabel=\"iMDB Rating\", ylabel=\"Worldwide Gross\")","a53f582d":"print(\"That's It!\")","5485f513":"## Exploring the Data for Conclusions\n1. `Main_Genre` v\/s `worldwide_gross`\n2. More than 1 Genre v\/s `worldwide_gross`\n3. `length` v\/s `worldwide_gross`\n4. `studio` v\/s Mean `worldwide_gross`\n5. `rating` v\/s `worldwide_gross`\n6. `rating` v\/s `Main_Genre`\n7. `length` v\/s `studio`\n8. Mean `length` v\/s `Main_Genre`\n9. Average `length` of Films\n10. Number of Films of Each Genre\n11. iMDB Rating v\/s Worldwide Gross","1feaff7d":"## Descriptive Statistics\n1. What is the average worldwide gross revenue of films?\n2. What is the highest worldwide gross revenue of any film?\n3. Which studio house had the highest grossing and the lowest grossing films?\n4. How many movies of each genre?\n5. How many movies had 2 genres?\n6. How many movies had 3 genres?\n7. In which year were most number of movies released?\n8. Which year had maximum gross earnings?\n9. Average length of movies of each Studio","464d9301":"## Read the Data","b1e301e1":"## Explore and Clean the Data\n\nAnswer these questions about the dataset:\n1. How many rows and columns does the dataset contain?\n2. Are there any NaN values present?\n3. Are there any duplicate rows?\n4. What are the data types of the columns?","a520f5c3":"## Data Type Conversion\nConvert `worldwide_gross` from String to integer. Remove '$' and ','"}}