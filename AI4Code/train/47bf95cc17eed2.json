{"cell_type":{"08ed1fbc":"code","99a4e729":"code","6e167300":"code","ba81c779":"code","6600c7f8":"code","20e4277f":"code","883249c2":"code","cd712fb9":"code","d8388daf":"code","dc985294":"code","b1a22f83":"code","9f7a1614":"code","bb58402f":"code","d59486b9":"code","fa6b76f5":"code","33a9d463":"code","795173a6":"code","d97ec16f":"code","e4454126":"code","45c95a57":"code","c0a1374f":"code","b8cf5ae4":"code","eb731619":"code","e2a01b17":"code","5b00217d":"code","7f070d8b":"code","aa9127ad":"code","24221d99":"code","01a2d6b6":"code","b05beebe":"code","779c8507":"code","d7647afb":"code","6fdbce0a":"markdown","11b46b3e":"markdown","318e3828":"markdown","5e95c9ba":"markdown","91007d6b":"markdown","40115fd2":"markdown","1af680cb":"markdown","d855ae10":"markdown","6973260d":"markdown","22b8b7b5":"markdown","6639286e":"markdown","8d3a53a3":"markdown","820c1760":"markdown","7ba0fd26":"markdown","b9142b94":"markdown","4e643b1d":"markdown","11f80005":"markdown","ed866a1f":"markdown","46bfe67a":"markdown","e65925d2":"markdown","e7089cbc":"markdown","642e0a4b":"markdown","c94b5344":"markdown","8403b6b3":"markdown","e6e296f4":"markdown","bafec037":"markdown","ae3a8994":"markdown","f157ea95":"markdown","fdb8016c":"markdown"},"source":{"08ed1fbc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","99a4e729":"df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","6e167300":"df.head()","ba81c779":"df.info()","6600c7f8":"# Category\n\ncat = df.Category.unique()\ncat","20e4277f":"plt.figure(figsize=(12,12))\n\nmost_cat = df.Category.value_counts()\nsns.barplot(x=most_cat, y=most_cat.index, data=df)","883249c2":"# Rating\n\ndf.Rating.unique()","cd712fb9":"df['Rating'].replace(to_replace=[19.0], value=[1.9],inplace=True)\nsns.distplot(df.Rating)","d8388daf":"g = sns.FacetGrid(df, col='Category', palette=\"Set1\",  col_wrap=5, height=4)\ng = (g.map(sns.distplot, \"Rating\", hist=False, rug=True, color=\"r\"))","dc985294":"# Mean Rating\n\nplt.figure(figsize=(12,12))\n\nmean_rat = df.groupby(['Category'])['Rating'].mean().sort_values(ascending=False)\nsns.barplot(x=mean_rat, y=mean_rat.index, data=df)","b1a22f83":"# Reviews\n\ndf.Reviews.unique()","9f7a1614":"# inside review there is a value with 3.0M with M stand for million, lets change it so it can be measure as float\n\nReviews = []\n\nfor x in df.Reviews:\n    x = x.replace('M','00')\n    Reviews.append(x)\n\nReviews = list(map(float, Reviews))\ndf['reviews'] = Reviews\nsns.distplot(Reviews)","bb58402f":"g = sns.FacetGrid(df, col='Category', palette=\"Set1\",  col_wrap=5, height=4)\ng = (g.map(plt.hist, \"Reviews\", color=\"g\"))","d59486b9":"# Total reviews\n\nplt.figure(figsize=(12,12))\nsum_rew = df.groupby(['Category'])['reviews'].sum().sort_values(ascending=False)\nsns.barplot(x=sum_rew, y=sum_rew.index, data=df)","fa6b76f5":"# Mean reviews\n\nplt.figure(figsize=(12,12))\nmean_rew = df.groupby(['Category'])['reviews'].mean().sort_values(ascending=False)\nsns.barplot(x=mean_rew, y=mean_rew.index, data=df)","33a9d463":"# Installs\n\ndf.Installs.unique()","795173a6":"df['Installs'].replace(to_replace=['0', 'Free'], value=['0+','0+'],inplace=True)","d97ec16f":"Installs = []\n\nfor x in df.Installs:\n    x = x.replace(',', '')\n    Installs.append(x[:-1])\n\nInstalls = list(map(float, Installs))\ndf['installs'] = Installs\nsns.distplot(Installs)","e4454126":"g = sns.FacetGrid(df, col='Category', palette=\"Set1\",  col_wrap=5, height=4)\ng = (g.map(plt.hist, \"installs\", bins=5, color='c'))","45c95a57":"# Total Installs\n\nplt.figure(figsize=(12,12))\nsum_inst = df.groupby(['Category'])['installs'].sum().sort_values(ascending=False)\nsns.barplot(x=sum_inst, y=sum_inst.index, data=df)","c0a1374f":"# Mean Install\n\nplt.figure(figsize=(12,12))\nmean_ints = df.groupby(['Category'])['installs'].mean().sort_values(ascending=False)\nsns.barplot(x=mean_ints, y=mean_ints.index, data=df)","b8cf5ae4":"df.Size.unique()","eb731619":"df['Size'].replace(to_replace=['Varies with device'], value=['0'],inplace=True)","e2a01b17":"# i need to diiscard + and , value. amd change M for million. Then check the distibution.\n\nSize = []\n\nfor x in df.Size:\n    x = x.replace('+', '')\n    x = x.replace(',', '')\n    if 'M' in x:\n        if '.' in x:\n            x = x.replace('.', '')\n            x = x.replace('M', '00')\n        else:\n            x = x.replace('M', '000')\n    elif 'k' in x:\n        x = x.replace('k', '')\n    Size.append(x)\n\nSize = list(map(float, Size))\ndf['size'] = Size\nsns.distplot(Size)","5b00217d":"g = sns.FacetGrid(df, col='Category',  col_wrap=5, height=4)\ng = (g.map(plt.hist, \"size\", bins=5, color='y'))","7f070d8b":"# Mean Size\n\nplt.figure(figsize=(12,12))\nmean_size = df.groupby(['Category'])['size'].mean().sort_values(ascending=False)\nsns.barplot(x=mean_size, y=mean_size.index, data=df)","aa9127ad":"# Type for category\n\ndf.Type.unique()","24221d99":"df['Type'].replace(to_replace=['0'], value=['Free'],inplace=True)\ndf['Type'].fillna('Free', inplace=True)","01a2d6b6":"print(df.groupby('Category')['Type'].value_counts())\nType_cat = df.groupby('Category')['Type'].value_counts().unstack().plot.barh(figsize=(10,20), width=0.7)\nplt.show()","b05beebe":"# And Ver\n\ndf['Android Ver'].unique()","779c8507":"df['Android Ver'].replace(to_replace=['4.4W and up','Varies with device'], value=['4.4','1.0'],inplace=True)\ndf['Android Ver'].replace({k: '1.0' for k in ['1.0','1.0 and up','1.5 and up','1.6 and up']},inplace=True)\ndf['Android Ver'].replace({k: '2.0' for k in ['2.0 and up','2.0.1 and up','2.1 and up','2.2 and up','2.2 - 7.1.1','2.3 and up','2.3.3 and up']},inplace=True)\ndf['Android Ver'].replace({k: '3.0' for k in ['3.0 and up','3.1 and up','3.2 and up']},inplace=True)\ndf['Android Ver'].replace({k: '4.0' for k in ['4.0 and up','4.0.3 and up','4.0.3 - 7.1.1','4.1 and up','4.1 - 7.1.1','4.2 and up','4.3 and up','4.4','4.4 and up']},inplace=True)\ndf['Android Ver'].replace({k: '5.0' for k in ['5.0 - 6.0','5.0 - 7.1.1','5.0 - 8.0','5.0 and up','5.1 and up']},inplace=True)\ndf['Android Ver'].replace({k: '6.0' for k in ['6.0 and up']},inplace=True)\ndf['Android Ver'].replace({k: '7.0' for k in ['7.0 - 7.1.1','7.0 and up','7.1 and up']},inplace=True)\ndf['Android Ver'].replace({k: '8.0' for k in ['8.0 and up']},inplace=True)\ndf['Android Ver'].fillna('1.0', inplace=True)","d7647afb":"print(df.groupby('Category')['Android Ver'].value_counts())\nType_cat = df.groupby('Category')['Android Ver'].value_counts().unstack().plot.barh(figsize=(10,18), width=1)\nplt.show()","6fdbce0a":"## EDA\n\nLet's take a look on all the category","11b46b3e":"And this is the average of rating by category, family and game has a lot of quantity causing the low on average rating, on the other side event has the highest average rating by category.\n\nNext is reviews, review sometime can measure the app popularity.\nThe more reviews, the better.","318e3828":"That's a lot of value. let's deal with varies and change to 0 first. Then we will do the same thing like installs column.","5e95c9ba":"By the horizontal is the rating value, and verticaly is quantity of the rating. ","91007d6b":"This graph is the correlation between category and reviews, Family and game category had a lot of reviews.\nSome app also almost had no review at all, like event, beauty, medical, parenting and more. it is interesting Event app has a high rating but rare review on it.","40115fd2":"There is 0 and null value, let's change them to free.","1af680cb":"## Import Modules","d855ae10":"Now i'm going to transform this column into float as well like review. First we need to change the 0 and Free value to 0+. Next we need to replace the ',' value and discard the + sign form the value.","6973260d":"Most of the rating is around 4. Let's see how rating is distributed by category column","22b8b7b5":"This graph is the distribution of total reviews on each app.","6639286e":"Wow, there is around 2000 app with family category, followed by game category with 1200 app. And this '1.9' Category, i don't know what it is, but it only had 1 app so far, so its not visible on the graph. Let's look at the rating, and what kind of correlation share between category and rating.","8d3a53a3":"There we had a null values, i'm going to leave it as it is. And a '19' for rating is not possible, so i assume it's a '1.9'. So let's change it and see the distribution value on rating column.","820c1760":"Now this is messy, i'm going to group it to 1 till 8 version of android. Change the null value to 1.0.","7ba0fd26":"The Type column, let's check if the app is free or paid.","b9142b94":"DIstributed value of Install on each category.","4e643b1d":"Next, let's go for size.","11f80005":"This is the distribution of size column in Kb.","ed866a1f":"Showing the amount of total reviews.","46bfe67a":"The mosy installed app is game, and the average of install is comunication app.","e65925d2":"## Introduction\n\nHai kagglers, this kernel is about EDA from google playstore app dataset. Enjoy.","e7089cbc":"Most of the app on playstore use android 4.0 as the standard minimum version on their app. There is also a few use version 2.0 like game and family.","642e0a4b":"The average size of game app is the highest around 40 MB.","c94b5344":"## END\n\n\nThat is all the EDA of this dataset, Thank you kagglers.","8403b6b3":"This is the average of reviews on each category.\n\nLet's move on to next column, installs.","e6e296f4":"Then again, family category has the most free and paid app on the playstore. We can see social app is always free, like entertainment, event, education, comic, and more. The medical has a high amount of paid app considering quantity of medical app is not much.","bafec037":"So we got 34 category on this dataset, let's see which one is the famous category","ae3a8994":"So we got a total 10841 row with 13 columns, a few missing value. I'm gonna handle each of them on the run. let's start by splitting the dataset by category.","f157ea95":"## Quick Look","fdb8016c":"Last is the version of android you should have before accessing the app."}}