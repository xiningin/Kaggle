{"cell_type":{"fba66a4c":"code","38145205":"code","812ea69d":"code","76bbfa6a":"code","fb210537":"code","7e488d8f":"code","42d30791":"code","a2ce49ab":"code","24f47656":"markdown","7ed01403":"markdown"},"source":{"fba66a4c":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom random import choice\nfrom tensorflow.keras import layers, models, metrics\nfrom kaggle_environments import make, evaluate","38145205":"\n# Creates a model\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (2,2), activation='relu', data_format='channels_first', input_shape=(1,6,7)))\nmodel.add(layers.Conv2D(64, (2,2), activation='relu'))\nmodel.add(layers.Conv2D(64, (2,2), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64,activation='relu'))\nmodel.add(layers.Dense(7,activation='softmax'))\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='mse',\n    metrics=[metrics.MeanSquaredError()]\n\n)\n\nmodel.summary()","812ea69d":"\n# reads and forms the data\ndef read_dataset(dataset_path):\n    with open(dataset_path, 'rb') as file:\n        size = os.fstat(file.fileno()).st_size\n        data = np.load(file)\n        while file.tell() < size:\n            data = np.vstack(data, np.load(file))\n        return data\n\nstates = read_dataset('..\/input\/connect-4-training-data\/training_data_states.npy')\npreds = read_dataset('..\/input\/connect-4-training-data\/training_data_preds.npy')\n\nstates = np.expand_dims(states, axis=1)\n\nhistory = model.fit(states, preds, epochs=40, verbose=1)\nplt.plot(history.history['mean_squared_error'])","76bbfa6a":"#This agent checks for different valid moves using the dat a set\ndef agent(obs):\n    board = obs.board\n    valid_moves = [i for i in range(7) if board[i] == 0]\n    \n    state = np.array(board, dtype=np.int8).reshape(1,1,6,7)\n    preds = model(state)\n    \n    preds = np.squeeze(preds)\n    next_move = np.argmax(preds)\n    next_move = int(next_move)\n    \n    if next_move in valid_moves:\n        return next_move\n    else:\n        return choice(valid_moves)","fb210537":"#this evaluates the results of each game to give us how good the machine is\nevaluation_result = evaluate('connectx', [agent, 'random'], num_episodes=1000)\n\nwins = 0\nfor score in evaluation_result:\n    if score == [1,-1]:\n        wins += 1\n\n        print('Neural network\\'s win rate against a random agent in 1000 games is:', str(wins\/10)+'%')","7e488d8f":"# model = Sequential([\n#     Flatten(input_shape=(6,7)),\n#     Dense(10),\n#     Dense(7, activation='softmax')\n# ])\n\n# model.summary()\n\n# board_state = np.arange(42).reshape(1,6,7)\n\n# move_probability = model(board_state)[0]\n# tf.argmax(move_probability).numpy()","42d30791":"# from typing import Tuple\n# from kaggle_environments import make, evaluate\n# import numpy as np\n# import random\n\n# class Agent:\n#     def __init__(self, board, player):\n#         self.board    = board\n#         self.T        = board.T \n#         self.stones   = np.count_nonzero(board)\n#         self.player   = player\n#         self.opponent = 1 if player == 2 else 2\n    \n#     def play(self, move, color):\n#         self.board[move] = color\n        \n#     def revert(self, move):\n#         self.board[move] = 0\n        \n#     def valid_moves(self):\n#         return [\n#             (5 - np.count_nonzero(self.T[column]), column) \\\n#             for column in range(7) \\\n#             if np.count_nonzero(self.T[column]) < 6\n#         ]\n    \n#     @staticmethod\n#     def windows(arr, col):\n#         '''\n#         Returns consecutive subarrays of size 4\n#         that contains the entry at index `col` in 1d array `arr`,\n#         '''\n#         assert arr.ndim == 1 and len(arr) > 4 and col in range(len(arr))\n\n#         if col < 4:\n#             end = min(col, len(arr)-4) + 1\n#             return (arr[i:i+4] for i in range(end))\n        \n#         start = col-3\n#         end   = min(col, len(arr)-4) + 1\n#         return (arr[i:i+4] for i in range(start, end))\n    \n#     def is_col_connect_four(self, move, color):\n#         '''\n#         Check if there is any connected-4 in the column of `move`.\n#         '''\n#         row, col = move\n#         return (self.T[col, row:row+4] == color).all() \\\n#             if row <= 2 \\\n#             else False\n#     def is_row_connect_four(self, move, color):\n#         '''\n#         Check if there is any connected-4 in the row of `move`.\n#         '''\n#         row, col = move\n#         row = self.board[row]\n#         return any((arr == color).all() for arr in self.windows(row, col))\n    \n#     def is_diags_connect_four(self, move, color):\n#         '''\n#         Check if there is any connected-4 in both diagonals that passed through `move`.\n#         '''\n#         row, col     = move\n#         major_offset = col - row\n#         minor_offset = row + col - 6\n    \n#     # make sure major diagonal is at least of length 4\n#         if major_offset in range(-2, 4):\n#             major = np.diagonal(self.board, offset=major_offset)\n#             if len(major) == 4:\n#                 if (major == color).all():\n#                     return True\n#             else:\n#                 # column of `move` in the major diagonal\n#                 major_col = min(row, col)\n#                 if any((arr == color).all() for arr in self.windows(major, major_col)):\n#                     return True\n#         # make sure major diagonal is at least of length 4\n#         if minor_offset in range(-3, 3):\n#             minor = np.diagonal(np.rot90(self.board), offset=minor_offset)\n#             if len(minor) == 4:\n#                 if (minor == color).all():\n#                     return True\n#             else:\n#                 # column of `move` in the minor diagonal\n#                 minor_col = min(row, 6-col)\n#                 if any((arr == color).all() for arr in self.windows(minor, minor_col)):\n#                     return True\n#         return False\n#     def is_winning(self, move, color):\n#         self.play(move, color)\n        \n#         if self.is_col_connect_four(move, color) \\\n#         or self.is_row_connect_four(move, color) \\\n#         or self.is_diags_connect_four(move, color):\n#             self.revert(move)\n#             return True\n        \n#         self.revert(move)\n#         return False\n    \n#     def is_double_threat(self, move, color):\n#         prev_threats = set()\n#         for each_move in self.valid_moves():\n#             if self.is_winning(each_move, color):\n#                 prev_threats.add(each_move)\n                \n#         self.play(move, color)\n        \n#         curr_threats = set()\n#         for each_move in self.valid_moves():\n#             if self.is_winning(each_move, color):\n#                 curr_threats.add(each_move)\n                \n#         self.revert(move)\n        \n#         return len(curr_threats) - len(prev_threats) >= 2\n\n# def MOST_POWERFUL_AI(observation):\n#     game_board = observation.board\n#     game_board = np.array(game_board, dtype=np.int8).reshape(6,7)\n    \n#     player_color = observation.mark\n#     opponent_color = 1 if player_color == 2 else 2\n#     agent = Agent(game_board, player_color)\n    \n#     for color in [player_color, opponent_color]: \n#         for column in range(7):\n#             for move in agent.valid_moves():\n#                 if agent.is_winning(move, color):\n#                     return move[1]\n#     bad_moves = []\n\n#     for move in agent.valid_moves():\n#         agent.play(move, player_color)\n#         for next_move in agent.valid_moves():\n#             if agent.is_winning(next_move, opponent_color):\n#                 bad_moves.append(move)\n#                 break\n#         agent.revert(move)\n    \n#     #print('At step',np.count_nonzero(game_board), 'bad moves are:', bad_moves)\n#     good_moves = set(agent.valid_moves()) - set(bad_moves)\n#     if good_moves:\n        \n#         for each_move in good_moves:\n#             if agent.is_double_threat(each_move, player_color):\n#                 return each_move[1]\n            \n#         for each_move in good_moves:\n#             if agent.is_double_threat(each_move, opponent_color):\n#                 #print('Found Double Threat of opponent at', each_move)\n#                 return each_move[1]\n            \n#         return random.choice(list(good_moves))[1]\n    \n#     return random.choice([column for column in range(7) if game_board[0, column] == 0])\n\n# env = make(\"connectx\", debug=True)\n# env.play([None, MOST_POWERFUL_AI])\n# # env.run(['negamax', MOST_POWERFUL_AI])\n# # env.render(mode=\"ipython\")","a2ce49ab":"# position = Tuple[int, int]\n\n# class Board:\n#     def __init__(self, data):\n#         self.data = data\n#         self.indices = np.arange(42, dtype=np.int8).reshape(6,7)\n#         self.rotated = np.rot90(self.indices)\n        \n#     def row(self, index: int):\n#         return self.data[index]\n    \n#     def col(self,index: int):\n#         return self.data.T[index]\n    \n#     def rows(self, start: int, end: int):\n#         return self.data[start:end+1]\n    \n#     def cols(self,start: int,end: int):\n#         return self.data.T[start:end+1]\n    \n#     def play(self,move: position,color: int):\n#         self.data[move] = color\n     \n#     def remove(self, move: position):\n#         self.data[move] = 0\n        \n#     def possible_move_at(self, col: int):\n        \n#         row = 5 - np.count_nonzero(self.col(col))\n#         if row < 0:\n#             return None\n        \n#         return row, col\n#     def possible_moves(self):\n#         return [\n#             self.possible_move_at(col) for col in range(7) \\\n#             if self.possible_move_at(col) != None\n#         ]\n        \n#     def is_winning_at_col(self, move: position, color: int):\n#         row, col = move\n#         if row <= 2:\n#             self.play(move,color)\n#             colum_array = self.col(col)\n#             stones = colum_array[row: row+4]\n#             if (stones == color).all():\n#                 self.remove(move)\n#                 return True\n#         self.remove(move)\n#         return\n    \n#     def is_winning_at_row(self, move: position, color: int):\n#         table = {\n#             0: [[0, 1, 2, 3]],\n#             1: [[0, 1, 2, 3], [1, 2, 3, 4]],\n#             2: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]],\n#             3: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]],\n#             4: [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]],\n#             5: [[2, 3, 4, 5], [3, 4, 5, 6]],\n#             6: [[3, 4, 5, 6]]\n#         }\n        \n#         self.play(move, color)\n        \n#         row_idx, col_idx = move\n#         segment_indices = table[col_idx]\n#         row = self.row(row_idx)\n        \n        \n\n            \n#         self.remove(move)\n#         return False\n    \n#     def is_winning_at_diagonals(self, move: position, color: int):\n#         five_stones_table = {\n#             0: [[0, 1, 2, 3]],\n#             1: [[0, 1, 2, 3], [1, 2, 3, 4]],\n#             2: [[0, 1, 2, 3], [1, 2, 3, 4]],\n#             3: [[0, 1, 2, 3], [1, 2, 3, 4]],\n#             4: [[1, 2, 3, 4]]\n#         }\n#         six_stones_table = {\n#             0: [[0, 1, 2, 3]],\n#             1: [[0, 1, 2, 3], [1, 2, 3, 4]],\n#             2: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]],\n#             3: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]],\n#             4: [[1, 2, 3, 4], [2, 3, 4, 5]],\n#             5: [[2, 3, 4, 5]]\n#         }\n#         lookup_tables = {\n#             5: five_stones_table,\n#             6: six_stones_table\n#         }\n        \n#         self.play(move, color)\n        \n#         row, col = move\n#         move_index = row * 7 + col\n        \n#         major_diagonal_index = np.diagonal(self.indices, offset=col-row)\n#         minor_diagonal_index = np.diagonal(self.rotated, offset=col+row-6)\n        \n#         flat_board = self.data.reshape(42)\n        \n#         for diagonal in [major_diagonal_index, minor_diagonal_index]:\n#             if len(diagonal) >= 4:\n#                 if len(diagonal) == 4:\n#                     stones = flat_board[diagonal]\n#                     if (stones == color).all():\n#                         self.remove(move)\n#                     return True\n#                 else:\n#                     segment_indices_table = lookup_tables[len(diagonal)]\n#                     idx = np.where(diagonal == move_index)[0][0]\n#                     segment_indices = segment_indices_table[idx]\n#                     for segment in segment_indices:\n#                         stones = flat_board[diagonal[segment]]\n#                         if (stones == color).all():\n#                             self.remove(move)\n#                             return True\n        \n        \n#         self.remove(move)\n#         return False\n    \n#     def is_winning_immediately(self, move: position, color:int) -> bool:\n#         return self.is_winning_at_col(move, color)\\\n#         or self.is_winning_at_row(move, color)\\\n#         or self.is_winning_at_diagonals(move, color)\n    \n#     def is_losing_next_move(self, move: position, color:int) -> bool:\n#         row, col = move\n        \n#         if row > 0:\n#             next_move = row- 1, col\n            \n#             opponent = 1 if color ==2 else 2\n#             if self.is_winning_immediately(next_move, opponent):\n#                 return True\n#         return False\n        \n    \n# def analyze(board,player):\n#     moves = board.possible_moves()\n#     opponent = 1 if player == 2 else 2\n#     for current_move in moves:\n#         if board.is_winning_immediately(current_move, player):\n#             return current_move[1]\n        \n#     for current_move in moves:\n#         if board.is_winning_immediately(current_move, opponent):\n#             return current_move[1]\n        \n#     safe_moves = set()\n#     for current_move in moves:\n#         if board.is_losing_next_move(current_move, player):\n#             safe_moves.add(current_move)\n            \n#     if safe_moves:\n#         return random.choice(list(safe_moves))[1]\n#     return random.choice(moves)[1]\n\n# def my_agent(observation):\n#     array = observation.board\n#     array = np.asarray(array,dtype=np.int8).reshape(6,7)\n    \n#     board = Board(data=array)    \n#     player = observation.mark\n    \n#     return analyze(board,player)\n\n# env = make(\"connectx\", debug=True)\n# trainer = env.train([None, \"random\"])\n# obs = trainer.reset()\n# for _ in range(1000):\n#     action = my_agent(obs)\n#     obs, reward, done, info = trainer.step(action)\n#     if done:\n#         obs = trainer.reset()\n\n\n# env = make('connectx', debug=True)\n# env.play([None,my_agent])\n# env.render(mode='ipython',width=700,height=600)","24f47656":"# Acknowledgements\n\n1. Inspired by article [Applying Machine Learning to Connect Four](http:\/\/cs229.stanford.edu\/proj2019aut\/data\/assignment_308832_raw\/26646701.pdf)\n2. Inspired by kernel [Scoring connect-x agents](https:\/\/www.kaggle.com\/petercnudde\/scoring-connect-x-agents) by Peter Cnudde, Industry Fellow at UC Berkerly\n3. We plan to obtain a set of training data by querying https:\/\/connect4.gamesolver.org\n4. We obtain the training data for educational purpose only.","7ed01403":"## Vanilla CNN in TensorFlow modified from [this tutorial](https:\/\/www.tensorflow.org\/tutorials\/images\/cnn)"}}