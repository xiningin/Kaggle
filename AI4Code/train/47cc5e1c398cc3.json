{"cell_type":{"9654d4ad":"code","9a29bbab":"code","1d7f13b7":"code","52f99c7e":"code","5c7fa2ac":"code","e7b1d850":"code","f3b3db10":"code","2d3d3dd3":"code","7f64545e":"code","3147601d":"code","1a21e1ba":"code","ac5a654e":"code","27fc945a":"code","6e47975f":"code","46fce558":"code","54c41826":"code","927bd758":"code","8b0997f2":"code","a96d3cce":"code","c8a78ce1":"code","df40ea78":"code","8b344637":"code","6ee53677":"code","57ada257":"code","771c9b2a":"code","71a44124":"code","d634e2c2":"code","1108acff":"code","37de0cd6":"code","7454888b":"code","ac25c2f5":"code","64555b43":"code","f55550b8":"code","25844c6d":"code","3b8a8874":"markdown","2be82087":"markdown","363ffa8e":"markdown","f2cc7daf":"markdown","2176a1b2":"markdown","64408e06":"markdown"},"source":{"9654d4ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a29bbab":"# Import necessary libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","1d7f13b7":"df = pd.read_csv(\"..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 5.csv\",encoding=\"utf-8\", delimiter=',')\ndf.head()","52f99c7e":"# total numbers of rows and Columns in dataset\nRow, Col = df.shape\nprint(f'There are {Row} Rows and {Col} columns')\n","5c7fa2ac":"# Print information about dataset\ndf.info()","e7b1d850":"# Print statistical summary\ndf.describe()","f3b3db10":"# Unique values of each column\ndf.nunique()","2d3d3dd3":"# checking null value\ndf.isnull().sum()","7f64545e":"# the count of each book\ndf['Book Name'].value_counts()","3147601d":"# pick the best selling book and replace null values on it \nbest_book = df['Book Name'].value_counts().index[0]\ndf['Book Name'] = df['Book Name'].fillna(best_book)","1a21e1ba":"# count each city\ndf['City'].value_counts()","ac5a654e":"# pick used more city and replace null values\n\nbest_city = df['City'].value_counts().index[0]\ndf['City'] = df['City'].fillna(best_city)","27fc945a":"# find count for each payment method\n\ndf['Payment Method'].value_counts()","6e47975f":"# Combine 'Cash on delivery' and 'Cash on Delivery (COD)' as 'Cash on Delivery'\ndf['Payment Method'].replace({'Cash on delivery' : 'Cash on Delivery','Cash on Delivery (COD)': 'Cash on Delivery'}, inplace=True)","46fce558":"# Pick the payment method used most frequently, and replace null values with it\n\nbest_method = df['Payment Method'].value_counts().index[0]\nbest_method\ndf['Payment Method'] = df['Payment Method'].fillna(best_method)","54c41826":"# Now check null value exist or not\ndf.isnull().sum()","927bd758":"# Show top 10 books\nbest_book = df['Book Name'].explode().value_counts()[0:10]\nbest_book","8b0997f2":"# Show top 10 books with Matplotlib\n\nplt.title('Top 10 Best Selling Books')\ndf[df['Order Status']=='Completed']['Book Name'].value_counts().iloc[:10].sort_values().plot.barh()\n","a96d3cce":"# Show the top 10 books with Searborn\nfig, ax = plt.subplots()\nax = sns.barplot(x=best_book.index,y=best_book.values)\nax.set_xlabel('Books Name', fontsize=20)\nax.set_ylabel('Selling Frequency', fontsize=20)\nax.set_xticklabels(best_book.index, rotation='vertical', fontsize=10)\nfig.set_size_inches([15,6])\nplt.show()","c8a78ce1":"# Show the first five row\ndf.head()","df40ea78":"# check each order and their frequency\norders = df['Order Status'].value_counts()\norders","8b344637":"# Visulize the order status with bar chart\nfig, ax = plt.subplots()\nax = sns.barplot(x=orders.index,y=orders.values)\nax.set_xlabel('Order Status', fontsize= 20)\nax.set_ylabel('Orders Frequency', fontsize=20)\nax.set_xticklabels(orders.index, rotation='vertical', fontsize=10)\nfig.set_size_inches([10,6])\nplt.show()","6ee53677":"# find the year from order data and time and find the order on each year\nyear = pd.DatetimeIndex(df['Order Date & Time']).year.value_counts()\nyear","57ada257":"# Visulize the order yearwise\nplt.figure(figsize=(15,6))\nyear.plot(kind='bar',title='Orders Year Wise')","771c9b2a":"# find order for each day\ndays = pd.DatetimeIndex(df['Order Date & Time']).day_name().value_counts()\ndays","71a44124":"# Visulize the orders count for each day\nplt.figure(figsize=(12,6))\ndays.plot(kind='bar', title='Order Day Wise')","d634e2c2":"# complete orders citywise\ncity = df[df['Order Status'] == 'Completed']\ncity['City'].value_counts()","1108acff":"# plot of first 20 cities (completed orders) \ncomplete = city['City'].value_counts()[0:20]\nplt.figure(figsize=(12,6))\ncomplete.plot(kind='bar', title='Completed orders citywise')\n","37de0cd6":"# Cancelled orders citywise\ncancel = df[df['Order Status'] == 'Cancelled']\ncancel['City'].value_counts()","7454888b":"# plot of first 20 cities (cancelled order)\ncancel = cancel['City'].value_counts()[0:20]\nplt.figure(figsize=(12,6))\ncancel.plot(kind='bar', title='Cancelled orders citywise')","ac25c2f5":"# Return orders citywise\nret = df[df['Order Status'] == 'Returned']\nret['City'].value_counts()","64555b43":"# plot for first 20 cities (returned oders)\nret = ret['City'].value_counts()[0:20]\nplt.figure(figsize=(12,6))\nret.plot(kind='bar', title='Returned orders citywise')","f55550b8":"# First 20 Cities Order complete percentage\norders = df['City'].value_counts()[0:20]\ncompleted = df[df['Order Status'] == 'Completed']\ncompleted = completed['City'].value_counts()[0:20]\npercent = []\nfor i in range(20):\n    percent.append((complete[i] * 100) \/ orders[i])","25844c6d":"fig, ax = plt.subplots()\nax = sns.barplot(x=completed, y=percent)\nax.set_xlabel('City Name', fontsize=20)\nax.set_ylabel('Percentage Frequency', fontsize=20)\nax.set_xticklabels(orders.index,rotation='vertical',fontsize=10)\nfig.set_size_inches([15,6])\nplt.show()","3b8a8874":"# 2) Visualize order status frequency","2be82087":"# 4) Find the corelation between city and order status","363ffa8e":"# 3) Find date and time with order status","f2cc7daf":"In the 'Payment Method' there are two values 'Cash on delivery' and 'Cash on Delivery (COD)' which are same. So, we will combine these two values into one value 'Cash on Delivery'.","2176a1b2":"# **Challenge Gufhtugu Dataset**\n\nQ1: What is the best-selling book?\n\nQ2: Visualize order status frequency\n\nQ3: Find a correlation between date and time with order status\n\nQ4: Find a correlation between city and order status\n\nQ5: Find any hidden patterns that are counter-intuitive for a layman\n\nQ6: Can we predict number of orders, or book names in advance?","64408e06":"# 1 - Top 10 Best Selling Books"}}