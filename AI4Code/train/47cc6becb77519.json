{"cell_type":{"851bb93a":"code","f3bb08d9":"code","82c6d47a":"code","d79b5e03":"code","a66d6085":"code","b2003a09":"code","252ddfa7":"code","e5ff7b17":"markdown","1e80fa4f":"markdown","c108bfb8":"markdown","8019173f":"markdown","460a36b9":"markdown","9ac91331":"markdown","0a7e4ed9":"markdown","ca84d634":"markdown"},"source":{"851bb93a":"file_path=\"\/kaggle\/input\/videotempfile\/motorcycle racing-H264 75.mov\"\nprint(file_path)","f3bb08d9":"import cv2\n# capture the video\ncap = cv2.VideoCapture(file_path)\n\n# check if capture was successful\nif not cap.isOpened(): \n    print(\"Could not open!\")\nelse:\n    print(\"Video read successful!\")\n    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n    fps    = cap.get(cv2.CAP_PROP_FPS)\n    print('Total frames: ' + str(total_frames))\n    print('width: ' + str(width))\n    print('height: ' + str(height))\n    print('fps: ' + str(fps))","82c6d47a":"#cap = cv2.VideoCapture(file_path)\n#ret, frame = cap.read()\n#while(1):\n#    ret, frame = cap.read()\n#    cv2.imshow('frame',frame)\n#    if cv2.waitKey(1) & 0xFF == ord('q') or ret==False :\n#        cap.release()\n#        cv2.destroyAllWindows()\n#        break\n#    cv2.imshow('frame',frame)","d79b5e03":"## Creating Directory for storing the file . \nimport os\nif not os.path.exists('\/kaggle\/working\/images'):\n    os.makedirs('\/kaggle\/working\/images')\n","a66d6085":"## The length for Video  VID_20170801_192851240.mp4 is 104 Seconds and it creates 2833 images for it which is roughtly 27 image per second\nimport cv2\nfile_path=\"\/kaggle\/input\/videotempfile\/motorcycle racing-H264 75.mov\"\nvidcap = cv2.VideoCapture(file_path)\n#vidcap = cv2.VideoCapture(0)\nsuccess,image = vidcap.read()\n\n#################### Setting up parameters ################\n\nseconds = 1\nfps = vidcap.get(cv2.CAP_PROP_FPS) # Gets the frames per second\n#multiplier = fps * seconds\n\n#################### Initiate Process ################\n\nwhile success:\n    frameId = int(round(vidcap.get(1))) #current frame number, rounded b\/c sometimes you get frame intervals which aren't integers...this adds a little imprecision but is likely good enough\n    \n    #cv2.imshow(\"myvideo\",image.astype('uint8'))\n    ## Every frame has 29 image so every second we are getting 5\n    if frameId % 5 == 0:\n        cv2.imwrite(\"\/kaggle\/working\/images\/Test_Image_%d.jpg\" % frameId, image)\n    #if cv2.waitKey(1) & 0xFF==25:\n    #    break\n    success, image = vidcap.read()\nvidcap.release()\nprint (\"Complete\")","b2003a09":"# Display the Folder \n!ls \/kaggle\/working\/images |wc -l","252ddfa7":"import glob\nimport matplotlib.pyplot as plt\nfilenames = glob.glob(\"\/kaggle\/working\/images\/*.jpg\")\n#images = [cv2.imread(img) for img in filenames]\ncount=0\nfor file in filenames:\n    imag1=cv2.imread(file)\n    plt.imshow(imag1)\n    plt.show()\n","e5ff7b17":"# The following Code will Work on Local Machine Due to some resources constraint not working \n1. The Code is play the Video File . \n1. Letter q is used to exit the file \n1. To play your file just put the path of your local video in file_path variable.","1e80fa4f":"# Reading the file and writing frames to \n1.fps is used to get frame per second\n1.For every Second we get 29 Images so divide by 5 we will get 5-6 images per second hence 68 images.\n1. imwrite is cv2 function to write to folder\n1. Frameid returns a no which is used to change the no of image\n1. If we dont use % 5 then 29-30 *11 would be there in the folder ( You can test this userself ) . ","c108bfb8":"# Printing the Image Details \n1. The Following Program is to Display the Details of Video \n1. As this the Video file width and Height remains the Same for all.\n1. fps gives the no of frame per second in video\n1. This is kind of Boiler plate code can be used anywhere for each video","8019173f":"# Domain Images from Video\n# Problem Statement : Video to images for each frame\n1. There are many cases where images are required from video\n1. Following program will convert images from video\n1. Its expected to get 25-60 Images per second in a high quality video's\n1. Motorcycle racing Video Used in the Files is [Video](https:\/\/www.youtube.com\/watch?v=3sB8Gql4spk)\n1. File was manully uploaded here in Videotempfile \n1. Its a 11 Second Video.","460a36b9":"# Lets see display the Files in created from video\n1. glob is Python Function used to list of files \n1. Here we are using cv2 to display files\n1. There are 68 Image in this .\n1. ","9ac91331":"# Code to Convert file \n1. Create Folder to Kaggle to Store the Images \n1. Wanted to save the files in seperate directory so the below code.\n1. This will create directory if not exist else will just skip.","0a7e4ed9":"# Thanks for completing ,If you like please UpVote.\n1. Please click on name to view my profile\n* Notebook created by <a href = \"https:\/\/www.linkedin.com\/in\/narendrasharma\/\">Narendra Sharma<\/a> <hr>\n1. Please share your comments on what you feel and how to improve.","ca84d634":"## List of Files written in Images Folder \n1. You can See there 95 Images written \n1. if we have not divided by 5 we would have got 11 * 30  close to 330 image you can test it yourself . "}}