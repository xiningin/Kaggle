{"cell_type":{"afed094e":"code","e05f3cb1":"code","b47bfa09":"code","05414cf3":"code","ec0d0cee":"code","46fe1e14":"code","a7b48dcd":"code","f6e7d3f1":"code","ec7fcf76":"code","4839923f":"code","aba75f7a":"code","49e0d90b":"code","ed2caff0":"code","a41e3118":"code","6022924e":"code","37b8bc57":"code","04cf65b7":"code","9b961875":"code","038e8494":"code","4f6ec1f6":"code","924cf50d":"code","660155ac":"code","e0853dc0":"code","016d5e1b":"code","3687fbec":"code","71e2ed17":"code","3898d508":"code","d76c0b5c":"code","29bbce07":"code","8e65bedd":"code","7e3a1781":"code","daa2c2ce":"markdown","93374011":"markdown","0dee7fbb":"markdown","26eeecb8":"markdown","3eddc2e0":"markdown","327dcdcb":"markdown","706099e2":"markdown","83c17300":"markdown","9a24fc89":"markdown","f6293605":"markdown","790f6316":"markdown","e35d2f78":"markdown","c7997e8b":"markdown","4f5f3942":"markdown","79b80c47":"markdown","2b92df6b":"markdown","3131fe60":"markdown","231b55f1":"markdown","3dac69a3":"markdown","b36191e7":"markdown","62b37d4c":"markdown"},"source":{"afed094e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e05f3cb1":"import numpy as np \nimport pandas as pd\nimport datetime\n\n\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b47bfa09":"shoot=pd.read_csv('..\/input\/us-police-shootings\/shootings.csv')\ndf=shoot.copy()","05414cf3":"df.head()","ec0d0cee":"df.info()","46fe1e14":"df.describe()","a7b48dcd":"df.shape","f6e7d3f1":"#Date\ndf['date']=pd.to_datetime(shoot['date'])\ndf['year']=pd.to_datetime(shoot['date']).dt.year\ndf['month']=pd.to_datetime(shoot['date']).dt.month\ndf['month_name']=df['date'].dt.strftime('%B')\n","ec7fcf76":"# Age\ndf['age_freq']=np.where(df['age']<18,'<18',np.where((df['age']>17)&(df['age']<=30),'18-30',\nnp.where((df['age']>30)&(df['age']<=40),'31-40',np.where(df['age']>50,'50+',\nnp.where((df['age']>40)&(df['age']<=50),'41-50',\"Not Specified\")))))","4839923f":"# Count\ndf['Count']=1","aba75f7a":"df.head(5)","49e0d90b":"df.info()","ed2caff0":"# 2015 Monthly death report (1)\n\n# Bar Chart - Gradient & Text Position\n\ndf_year=df[df['year']==2015]\ndf_month=df_year['month_name'].value_counts().reset_index().rename(columns={'index':'month_name','month_name':'Count'})\n\n# Sort month\n\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\ndf_month['month_name'] = pd.Categorical(df_month['month_name'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\ndf_month=df_month.sort_values('month_name').reset_index(drop=True)\n\n\n\nfig = go.Figure(go.Bar(\n    x=df_month['month_name'],y=df_month['Count'],\n    marker={'color': df_month['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_month['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='2015 Monthly death report',xaxis_title=\"Month\",yaxis_title=\"Number of death\",title_x=0.5)\nfig.show()","a41e3118":"# 2015 Monthly death report (2)\n\n# Basic Line Plot\n\ndf_year=df[df['year']==2015]\ndf_month=df_year['month_name'].value_counts().reset_index().rename(columns={'index':'month_name','month_name':'Count'})\n\n\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\ndf_month['month_name'] = pd.Categorical(df_month['month_name'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\ndf_month=df_month.sort_values('month_name').reset_index(drop=True)\n\nfig = go.Figure(data=go.Scatter(x=df_month['month_name'],\n                                y=df_month['Count'],\n                                mode='lines')) # hover text goes here\nfig.update_layout(title='Monthly Deaths over time',xaxis_title=\"Date\",yaxis_title=\"Number of Deaths\",title_x=0.5)\nfig.show()","6022924e":"# 2015 Monthly death report (3)\n\n# Basic Pie\n\nfig = go.Figure([go.Pie(labels=df_month2015['month_name'], values=df_month2015['Count'])])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=12,insidetextorientation='radial')\n\nfig.update_layout(title=\"Month\",title_x=0.5)\nfig.show()","37b8bc57":"# Types of line plot\n\n#2015\n\ndf_year=df[df['year']==2015]\ndf_month2015=df_year['month_name'].value_counts().reset_index().rename(columns={'index':'month_name','month_name':'Count'})\n\n# Sort month\n\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\ndf_month2015['month_name'] = pd.Categorical(df_month2015['month_name'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\ndf_month2015=df_month2015.sort_values('month_name').reset_index(drop=True)\n\n#2016\n\ndf_year=df[df['year']==2016]\ndf_month2016=df_year['month_name'].value_counts().reset_index().rename(columns={'index':'month_name','month_name':'Count'})\n\n# Sort month\n\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\ndf_month2016['month_name'] = pd.Categorical(df_month2016['month_name'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\ndf_month2016=df_month2016.sort_values('month_name').reset_index(drop=True)\ndf_month2016\n\n#2017\n\ndf_year=df[df['year']==2017]\ndf_month2017=df_year['month_name'].value_counts().reset_index().rename(columns={'index':'month_name','month_name':'Count'})\n\n# Sort month\n\ncustom_dict ={\"January\":0,\"February\":1,\"March\":2, \"April\":3,\"May\":4,\"June\":5,\"July\":6,\"August\":7,\"September\":8,\"October\":9,\"November\":10,\"December\":11}\ndf_month2017['month_name'] = pd.Categorical(df_month2017['month_name'], categories=sorted(custom_dict, key=custom_dict.get), ordered=True)\ndf_month2017=df_month2017.sort_values('month_name').reset_index(drop=True)\ndf_month2017\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=df_month2015['month_name'], y=df_month2015['Count'], name = '2015-Dot',\n                         line=dict(color='royalblue', width=4,dash=\"dot\")))\n\nfig.add_trace(go.Scatter(x=df_month2016['month_name'], y=df_month2016['Count'], name = '2016-Dashdot',\n                         line=dict(color='green', width=4,dash=\"dashdot\")))\n\nfig.add_trace(go.Scatter(x=df_month2017['month_name'], y=df_month2017['Count'], name = '2017-Dash',\n                         line=dict(color='brown', width=4,dash=\"dash\")))\nfig.update_layout(title='Monthly Deaths over time different years',xaxis_title=\"Month\",yaxis_title=\"Number of Deaths\",title_x=0.5)\nfig.show()","04cf65b7":"# Simple Bubble Plot\n\ndf_manner_of_death=df['manner_of_death'].value_counts().to_frame().reset_index().rename(columns={'index':'manner_of_death','manner_of_death':'Count'})\n\nfig = go.Figure(data=[go.Scatter(\n    x=df_manner_of_death['manner_of_death'], y=df_manner_of_death['Count'],\n    mode='markers',\n    marker=dict(\n        size=df_manner_of_death['Count']*0.04))]) # Multiplying by 0.04 to reduce size and stay uniform accross all points\n\nfig.update_layout(title='Manner of Death',xaxis_title=\"Class\",yaxis_title=\"Number of Deaths\",title_x=0.5)\nfig.show()","9b961875":"# Bubble Plot with Color gradient\n\ndf['age_category']=np.where((df['age']<19),\"below 19\",\n                                 np.where((df['age']>18)&(df['age']<=30),\"19-30\",\n                                    np.where((df['age']>30)&(df['age']<=50),\"31-50\",\n                                                np.where(df['age']>50,\"Above 50\",\"NULL\"))))\n\nage=df['age_category'].value_counts().to_frame().reset_index().rename(columns={'index':'age_category','age_category':'Count'})\n\n\nfig = go.Figure(data=[go.Scatter(\n    x=age['age_category'], y=age['Count'],\n    mode='markers',\n    marker=dict(\n        color=age['Count'],\n        size=age['Count']*0.05,\n        showscale=True\n    ))])\n\nfig.update_layout(title='Age Frequency ',xaxis_title=\"Age Category\",yaxis_title=\"Number of Deaths\",title_x=0.5)\nfig.show()","038e8494":"# Bar Chart - Gradient & Text Position\n\narmed=df['armed'].value_counts()[:12].to_frame().reset_index().rename(columns={'index':'armed','armed':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=armed['armed'],y=armed['Count'],\n    marker={'color': armed['Count'], \n    'colorscale': 'Viridis'},  \n    text=armed['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 12 Weapons',xaxis_title=\"Weapons\",yaxis_title=\"Number of Weapons\",title_x=0.5)\nfig.show()","4f6ec1f6":"# Bar Chart - Stack\/Group\n\ndf[\"year\"]=pd.to_datetime(shoot['date']).dt.year\n\nca2_gun=df[(df['state']=='CA')&\n           ((df['year']==2015)|(df['year']==2016)|(df['year']==2017)|(df['year']==2018)|(df['year']==2019)|(df['year']==2020))]['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'})\ntx2_gun=df[(df['state']=='TX')&\n           ((df['year']==2015)|(df['year']==2016)|(df['year']==2017)|(df['year']==2018)|(df['year']==2019)|(df['year']==2020))]['year'].value_counts().to_frame().reset_index().rename(columns={'index':'year','year':'count'})\n  \n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=ca2_gun['year'],\n                y=ca2_gun['count'],\n                name='California',\n                marker_color='royalblue'\n                ))\nfig.add_trace(go.Bar(x=tx2_gun['year'],\n                y=tx2_gun['count'],\n                name='Texas',\n                marker_color='violet'\n                ))\n\nfig.update_layout(title_text='Past 5 years',xaxis_title=\"Year\",yaxis_title=\"Number of Death\",\n                  barmode='stack',title_x=0.5) # by default it is group, else barmode='group'\nfig.show()","924cf50d":"# Frequency of Race (1)\n\n# 9.Horizontal Bar Chart \n\ndf_category=df['race'].value_counts().reset_index().rename(columns={'index':'race','race':'count'}).sort_values('count',ascending=\"False\")\n\nfig = go.Figure(go.Bar(y=df_category['race'], x=df_category['count'], # Need to revert x and y axis\n                      orientation=\"h\")) # default orentation value is \"v\" - vertical ,we need to change it as orientation=\"h\"\nfig.update_layout(title_text=' Race  Frequency ',xaxis_title=\"Count\",yaxis_title=\"Race\",title_x=0.5)\nfig.show()","660155ac":"# Frequency of Race (2)\n\n# Pie with custom colors\n\ndf_race=df['race'].value_counts().to_frame().reset_index().rename(columns={'index':'race','race':'count'})\n\ncolors=['lightcyan','cyan','royalblue','blue','darkblue',\"darkcyan\"]\nfig = go.Figure([go.Pie(labels=df_race['race'], values=df_race['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Race Frequency\",title_x=0.5)\nfig.show()","e0853dc0":"# Sunburst Gradient\n\nsun_df=df[['gender','manner_of_death','race','Count']].groupby(['gender','manner_of_death','race']).agg('sum').reset_index()\n\nfig = px.sunburst(sun_df, path=['gender','manner_of_death','race'], values='Count',\n                  color=sun_df['Count'],\n                  color_continuous_scale='orrd') \nfig.update_layout(title=\"Death distribution by Sex, Manner Of Death and Race\",title_x=0.5)\nfig.show()","016d5e1b":"#11.Distribution of Age \n\n# Basic Box Plot\n\ndf_age=df['age']\n\nfig = go.Figure(go.Box(y=df_age,name=\" Age\")) # to get Horizonal plot change axis :  x=df_age\nfig.update_layout(title=\"Distribution of Age\")\nfig.show()","3687fbec":"#11.1 Distribution of Age With Race \n\n# Grouped Box Plot\n\ndf_ageW=df[df['race']==\"White\"]['age']\ndf_ageB=df[df['race']==\"Black\"]['age']\ndf_ageH=df[df['race']==\"Hispanic\"]['age']\ndf_ageA=df[df['race']==\"Asian\"]['age']\ndf_ageN=df[df['race']==\"Native\"]['age']\ndf_ageO=df[df['race']==\"Other\"]['age']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df_ageW,\n                     marker_color=\"cyan\",\n                     name=\"White Age\"))\nfig.add_trace(go.Box(y=df_ageB,\n                     marker_color=\"darkcyan\",\n                     name=\"Black Age\" ))\nfig.add_trace(go.Box(y=df_ageH,\n                     marker_color=\"royalblue\",\n                     name=\"Hispanic Age \"))\nfig.add_trace(go.Box(y=df_ageA,\n                     marker_color=\"navy\",\n                     name=\"Asian Age \"))\nfig.add_trace(go.Box(y=df_ageN,\n                     marker_color=\"darkblue\",\n                     name=\"Native Age \"))\nfig.add_trace(go.Box(y=df_ageO,\n                     marker_color=\"blue\",\n                     name=\"Other Age \"))\nfig.update_layout(title=\"Distribution of Age with Race\")\nfig.show()","71e2ed17":"#11.2 Distribution of White Age\n\n# Violin Boxplot\n\ndf_age=df[df['race']==\"White\"]['age']\n\nfig = go.Figure(data=go.Violin(y=df_age, box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='White age'))\n\nfig.update_layout(yaxis_zeroline=False,title=\"Distribution of White age\")\nfig.show()","3898d508":"# Basic Histogram\n\ndf_age=df['age']\n\nfig = go.Figure(data=[go.Histogram(x=df_age,  # To get Horizontal plot ,change axis - y=df_age\n                                  marker_color=\"green\",\n                       xbins=dict(\n                      start=10, #start range of bin\n                      end=100,  #end range of bin\n                      size=10   #size of bin\n                      ))])\nfig.update_layout(title=\"Age Distribution Of The Deceased\",xaxis_title=\"Age\",yaxis_title=\"Counts\",title_x=0.5)\nfig.show()","d76c0b5c":"#  Bar Chart - Gradient & Text Position \n\ndf_top10=df.groupby('city')['Count'].sum().reset_index().sort_values(by='Count',ascending=False)\ndf_top10=df_top10.head(12)\n\nfig = go.Figure(go.Bar(\n    x=df_top10['city'],y=df_top10['Count'],\n    marker={'color': df_month['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_month['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Top 12 City death report',xaxis_title=\"City\",yaxis_title=\"Number of death\",title_x=0.5)\nfig.show()","29bbce07":"# Pie with custom colors\n\ndf_mental=df[df['signs_of_mental_illness']==True]\n\ndf_grouped=df_mental.groupby('race')['Count'].sum().reset_index()\n\n\ndf_mental=df[df['signs_of_mental_illness']==True]\n\ndf_grouped=df_mental.groupby('race')['Count'].sum().reset_index()\n\ncolors=['lightcyan','cyan','royalblue','blue','darkblue',\"darkcyan\"]\nfig = go.Figure([go.Pie(labels=df_grouped['race'], values=df_grouped['Count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Signs Of Mental Illness Categories\",title_x=0.5)\nfig.show()","8e65bedd":"#  Bar Chart - Gradient & Text Position\n\ndf_threat_level=df.groupby('threat_level')['Count'].sum().reset_index()\n\n\nfig = go.Figure(go.Bar(\n    x=df_threat_level['threat_level'],y=df_threat_level['Count'],\n    marker={'color': df_threat_level['Count'], \n    'colorscale': 'Viridis'},  \n    text=armed['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Threat Level',yaxis_title=\"Number of Threat level\",title_x=0.5)\nfig.show()","7e3a1781":"# Facet Bar Chart\n\ndf_facet=df[['gender','race','threat_level','age']].groupby(['gender','race','threat_level']).agg('mean').reset_index()\n\nfig = px.bar(df_facet, x=\"gender\", y=\"age\",color=\"race\",barmode=\"group\",\n             facet_col=\"threat_level\",\n             )\nfig.update_layout(title_text='Death Persons AVG Age with Gender,Race,Threat Level',title_x=0.1)\nfig.show()","daa2c2ce":"# <a id='8'> 8. California And Texas Death Reports<\/a>","93374011":"# Table of contents\n- <a href='#17'>  Dataset Introduction <\/a> \n- <a href='#1'>1. Importing Libraries and Dataset <\/a> \n- <a href='#2'>2. Feature Generation<\/a> \n- <a href='#3'>3. 2015 Monthly Death Report <\/a> \n- <a href='#4'>4. Monthly Deaths Over Time Different Years  <\/a> \n- <a href='#5'>5. Manner Of Death <\/a>\n- <a href='#6'>6. Frequency of Age <\/a> \n- <a href='#7'>7. Frequency of Weapons <\/a> \n- <a href='#8'>8. California And Texas Death Reports <\/a>\n- <a href='#9'>9. Frequency of Race <\/a>\n- <a href='#10'>10. Death Distribution By Sex,Manner Of Death and Race <\/a>\n- <a href='#11'>11. Distribution of Age <\/a>\n- <a href='#12'>12. Age Distribution Of The Deceased <\/a>\n- <a href='#13'>13. Top 12 City Deaths Reports <\/a>\n- <a href='#14'>14. Number of deaths by Gender,year,race <\/a>\n- <a href='#15'>15. Top 20 cities where most shooting occurred <\/a>\n- <a href='#16'>16. Death Persons AVG Age with Gender,Race,Threat Level","0dee7fbb":"# <a id='5'> 5. Manner Of Death  <\/a>","26eeecb8":"# <a id='9'> 9. Frequency of Race <\/a>","3eddc2e0":"\n**It contains basic data about people like their name, age, gender and race. Along with it, is the shooting\/killing information, like date of event, where it happened? how they were shot? did they attack? Were they holding weapons? Did they show any mental illness? Was the policeman wearing a camera\/was the incident recorded? Did the suspect flee? Apart from that, a category column holds type of weapon used by the suspect**","327dcdcb":"I hope you enjoyed my kernel.If you like this notebook, an <font size=+1 color=\"darkcyan\"><b>Upvote<\/b><\/font> would be great ! :) \n\nThanks for your time.\n\n","706099e2":"# <a id='17'> Dataset Introduction<\/a>","83c17300":"# <a id='6'> 6. Frequency of Age  <\/a>","9a24fc89":"# <a id='1'> 1. Importing Libraries and Dataset<\/a>","f6293605":"# <a id='3'> 3. 2015 Monthly Death Report  <\/a>","790f6316":"# <a id='4'> 4. Monthly Deaths Over Time Different Years  <\/a>","e35d2f78":"# <a id='12'> 12. Age Distribution Of The Deceased <\/a>","c7997e8b":"> # <a id='16'> 16. Death Persons AVG Age with Gender,Race,Threat Level <\/a>","4f5f3942":"<font color=\"chocolate\" size=+2.5><b>End Note<\/b><\/font>","79b80c47":"> # <a id='14'> 14. Signs Of Mental Illness Categories <\/a>","2b92df6b":"# <a id='10'> 10. Death Distribution By Sex, Manner Of Death and Race <\/a>","3131fe60":"# <a id='13'> 13. Top 12 City Deaths Reports <\/a>","231b55f1":"> # <a id='15'> 15. Threat Level <\/a>","3dac69a3":"# <a id='7'> 7. Frequency of Weapons <\/a>","b36191e7":"# <a id='2'> 2. Feature Generation<\/a>","62b37d4c":"# <a id='11'> 11.Distribution of Age <\/a>"}}