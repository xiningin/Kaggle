{"cell_type":{"578bcf5c":"code","b7195689":"code","18cda343":"code","b476f37c":"code","c8b52445":"code","f698fc9d":"code","75c2199d":"code","c7d4457b":"code","98ebdf42":"code","a1a939c3":"code","c62e9006":"code","925d9da1":"code","b89cc568":"code","c4df48d5":"code","f536092d":"code","c81e30dc":"code","8e49c062":"code","0eeb925d":"code","83830482":"code","c563ddbb":"code","87d32a97":"code","1e329f83":"code","7a583f86":"code","96d9aa73":"code","eb70e0c1":"code","6ab630f6":"code","b171a052":"code","de6c2b03":"code","c75911e9":"code","94f6409e":"code","749b45b6":"code","7ddb62f7":"code","3a19a66b":"code","bbed1d4b":"code","09be085d":"markdown","fd9ad6dd":"markdown","6cf10d15":"markdown","a177ad11":"markdown","7d89312f":"markdown","1126b25f":"markdown","0d2b9112":"markdown","ea150f8c":"markdown","94d3ee96":"markdown","015d07bc":"markdown","3cfcdae5":"markdown"},"source":{"578bcf5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # visualization library\nimport matplotlib.pyplot as plt # visualization library\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Any results you write to the current directory are saved as output.","b7195689":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample = pd.read_csv('..\/input\/sample_submission.csv')","18cda343":"train.head(10)","b476f37c":"train.tail(10)","c8b52445":"train.info()","f698fc9d":"for x in train.keys():\n    print(x)","75c2199d":"train.isnull().sum()","c7d4457b":"from datetime import datetime\n\ntrain['pickup_datetime'] = train['pickup_datetime'].astype('datetime64[ns]')\ntrain['dropoff_datetime'] = train['dropoff_datetime'].astype('datetime64[ns]')","98ebdf42":"pick_features = ['pickup_datetime', 'dropoff_datetime', 'vendor_id']\npick_df = train[pick_features].copy(True)\npick_df.head()","a1a939c3":"# Pull out the month, the week,day of week and hour of day and make a new feature for each\n\npick_df['week'] = pick_df.loc[:,'pickup_datetime'].dt.week;\npick_df['weekday'] = pick_df.loc[:,'pickup_datetime'].dt.weekday;\npick_df['hour'] = pick_df.loc[:,'pickup_datetime'].dt.hour;\npick_df['month'] = pick_df.loc[:,'pickup_datetime'].dt.month;\n\n# Count number of pickups made per month and hour of day\nmonth_usage = pd.value_counts(pick_df['month']).sort_index()\nhour_usage = pd.value_counts(pick_df['hour']).sort_index()","c62e9006":"figure = plt.subplot(2, 1, 2)\nhour_usage.plot.bar(alpha = 0.5, color = 'orange')\nplt.title('Pickups over Hour of Day', fontsize = 20)\nplt.xlabel('hour', fontsize = 18)\nplt.ylabel('Count', fontsize = 18)\nplt.xticks(rotation=0)\nplt.yticks(fontsize = 18)\nplt.show()","925d9da1":"figure = plt.subplot(2, 1, 2)\nmonth_usage.plot.bar(alpha = 0.5, color = 'pink')\nplt.title('Pickups over Month', fontsize = 20)\nplt.xlabel('Month', fontsize = 18)\nplt.ylabel('Count', fontsize = 18)\nplt.xticks(rotation=0)\nplt.yticks(fontsize = 18)\nplt.show()","b89cc568":"train.passenger_count.min()","c4df48d5":"train.passenger_count.max()","f536092d":"train.plot.scatter(x='pickup_longitude',y='pickup_latitude')\nplt.show()","c81e30dc":"train.plot.scatter(x='dropoff_longitude',y='dropoff_latitude')\nplt.show()","8e49c062":"train.trip_duration.min()","0eeb925d":"train.trip_duration.max()","83830482":"train.boxplot(figsize=(15,10))\nplt.show()","c563ddbb":"# As said before, there is no need to have the min (0 passenger), we will drop it\ntrain = train[train['passenger_count']>= 1]","87d32a97":"# The trip duration's range is between 1 sec to 3526282 sec\n# We will drop values that are inferior to 1 min (60 sec) and superior to 166 min (10 000 sec).\ntrain = train[train['trip_duration']>= 1 ]\ntrain = train[train['trip_duration']<= 10000 ]","1e329f83":"# We will drop the longitude and latitude (in pickup and dropoff that looks like outliers)\ntrain = train.loc[train['pickup_longitude']> -90]\ntrain = train.loc[train['pickup_latitude']< 47.5]\n\ntrain = train.loc[train['dropoff_longitude']> -90]\ntrain = train.loc[train['dropoff_latitude']> 34]","7a583f86":"col_diff = list(set(train.columns).difference(set(test.columns)))\ncol_diff","96d9aa73":"# To use the pickup and dropoff location, we will calculate the distance between them\ntrain['dist'] = abs((train['pickup_latitude']-train['dropoff_latitude'])\n                        + (train['pickup_longitude']-train['dropoff_longitude']))\ntest['dist'] = abs((test['pickup_latitude']-test['dropoff_latitude'])\n                        + (test['pickup_longitude']-test['dropoff_longitude']))","eb70e0c1":"y = train[\"trip_duration\"]  # This is our target\nX = train[[\"passenger_count\",\"vendor_id\", \"pickup_longitude\", \"pickup_latitude\", \"dropoff_longitude\",\"dropoff_latitude\", \"dist\" ]]","6ab630f6":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score","b171a052":"randf = RandomForestRegressor()","de6c2b03":"randf.fit(X, y)","c75911e9":"shuffle = ShuffleSplit(n_splits=5, train_size=0.5, test_size=0.25, random_state=42)","94f6409e":"cv_score = cross_val_score(randf, X, y, cv=shuffle, scoring='neg_mean_squared_log_error')\nfor i in range(len(cv_score)):\n    cv_score[i] = np.sqrt(abs(cv_score[i]))\nprint(np.mean(cv_score))","749b45b6":"test.head()","7ddb62f7":"X_test = test[[\"vendor_id\", \"passenger_count\",\"pickup_longitude\", \"pickup_latitude\",\"dropoff_longitude\",\"dropoff_latitude\",\"dist\"]]\nprediction = randf.predict(X_test)\nprediction","3a19a66b":"my_submission = pd.DataFrame({'id': test.id, 'trip_duration': prediction})\nmy_submission.head()","bbed1d4b":"my_submission.to_csv('submission.csv', index=False)","09be085d":"The pick hours of taxi trip are between 5 PM to 8 PM. During the night (from 12 AM to 7 AM) there is less taxi trip In terms of months, there are approximately as many users from January to June\n","fd9ad6dd":"## Data preprocessing","6cf10d15":"## Data Loading","a177ad11":"## Model Selection","7d89312f":"## Features engineering","1126b25f":"## Prediction","0d2b9112":"### Outliers","ea150f8c":"There is 0 to 9 passengers by taxi trip. We will later drop the taxi trip with 0 passengers (because there must be atleast 1 passenger)\n","94d3ee96":"## Data Exploration","015d07bc":"The trip duration's range is between 1 sec to 3526282 sec We will later adjust this range\n","3cfcdae5":"In a business point of view, we can firstly said :\n\n    - the driver who extends the trip to earn more money (however, there is no taxi_fare column so no)\n    - the geographical position of the people between the beginning and the end of the race\n    - the time at which people took the taxi (e.g. during traffic jams or not; during the day or not etc.)\n\n"}}