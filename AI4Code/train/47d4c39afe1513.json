{"cell_type":{"c1a8674e":"code","5ce32aac":"code","28b4b145":"code","73dbd12c":"code","d8ec81e7":"code","1ec0372e":"code","72ff6332":"code","fbe98873":"code","2ea6049f":"code","a87b4e0b":"code","e3f2a369":"code","fda7f632":"code","c04772b6":"code","59188bd5":"code","44097e0e":"code","4f562d85":"code","663d820f":"code","57686319":"code","08bdeb51":"code","f556904a":"code","1ca72355":"code","fdb97974":"code","bc42bbff":"code","a6ea7a17":"code","c1962c3c":"code","ca1a7b82":"code","fd104b42":"code","2897ff09":"code","7519e16f":"markdown","640e9ba5":"markdown","f00d0528":"markdown","5e58ae24":"markdown","d036576b":"markdown","f37571e0":"markdown","b1fe5982":"markdown","15383466":"markdown","6dfe3b9d":"markdown","741a6e81":"markdown","0641c9fc":"markdown","6f039a07":"markdown","16e59065":"markdown","bad99c07":"markdown","d576f81f":"markdown","78a1fdab":"markdown","ecb395bb":"markdown","43f9b199":"markdown","bd3793d1":"markdown","02d86a17":"markdown","bdb11868":"markdown","72fc4a6a":"markdown","3b9d8327":"markdown","0429fbab":"markdown"},"source":{"c1a8674e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split\n\n\nplt.style.use('seaborn-colorblind')\n\nraw_data = pd.read_excel('\/kaggle\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx')","5ce32aac":"raw_data.head(5)","28b4b145":"df_ICU_list = raw_data.groupby(\"PATIENT_VISIT_IDENTIFIER\").agg({\"ICU\":(list)})\nraw_data['ICU_list'] = raw_data.apply(lambda row: df_ICU_list.loc[row['PATIENT_VISIT_IDENTIFIER']]['ICU'], axis=1)","73dbd12c":"raw_data['VALID_WINDOW'] = raw_data.apply(lambda row: row['ICU_list'].index(1) if 1 in row['ICU_list'] else 5, axis=1)","d8ec81e7":"labs_and_vitals = raw_data.iloc[:, 13:-4].columns\nbefore_transform = raw_data[labs_and_vitals].isna().sum()\nfor index, row in raw_data.iterrows():\n    if index%5 > row['VALID_WINDOW']:\n        raw_data.loc[index, labs_and_vitals] = np.nan","1ec0372e":"raw_data[labs_and_vitals].isna().sum() - before_transform","72ff6332":"data = raw_data.drop(['ICU_list','VALID_WINDOW'], axis=1)","fbe98873":"len(data)\/5","2ea6049f":"temporary_grouped_data = data.groupby(\"PATIENT_VISIT_IDENTIFIER\").agg(list)\ntemporary_grouped_data","a87b4e0b":"## Separating features columns like the starter notebook\ncomorb_lst = [i for i in data.columns if \"DISEASE\" in i]\ncomorb_lst.extend([\"HTN\", \"IMMUNOCOMPROMISED\", \"OTHER\"])\n\ndemo_lst = [i for i in data.columns if \"AGE_\" in i]\ndemo_lst.append(\"GENDER\")\n\nvitalSigns_lst = data.iloc[:,193:-2].columns.tolist()\n\nlab_lst = data.iloc[:,13:193].columns.tolist()","e3f2a369":"set(temporary_grouped_data[demo_lst].astype('str').values.ravel().tolist())","fda7f632":"set(temporary_grouped_data[vitalSigns_lst+lab_lst].astype('str').values.ravel().tolist()[:50])","c04772b6":"set(temporary_grouped_data['ICU'].astype('str').values.ravel().tolist())","59188bd5":"set(temporary_grouped_data[comorb_lst].astype('str').values.ravel().tolist())","44097e0e":"nan = np.nan\ndef agg_function(column):\n    removed_nan = list(filter(lambda v: v==v, column))\n    if str(list(column)) == '[nan, nan, nan, nan, nan]': return np.nan\n    elif column.name == 'ICU': return list(column)\n    elif column.name in comorb_lst: return max(column)\n    elif column.name in demo_lst: return max(column)\n    elif column.name in vitalSigns_lst+lab_lst: return (sum(removed_nan) \/ len(removed_nan) )\n    else: return column\n        \nflattened_data = data.groupby(\"PATIENT_VISIT_IDENTIFIER\").agg(agg_function)\nflattened_data.head()","4f562d85":"flattened_data['ICU_int'] = flattened_data.apply(lambda row: 0 if 1 not in list(row['ICU']) else 1, axis=1)","663d820f":"flattened_data.reset_index(inplace=True)","57686319":"def plot_demo(dataset, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    for i, column in enumerate(dataset.columns):\n        values = flattened_data[column].value_counts().sort_values(ascending=False)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        sns.countplot(y=column, data=dataset, order=flattened_data[column].value_counts().index)\n        for i, v in enumerate(values):\n            ax.text(v - (v\/2), i, v, {'backgroundcolor': 'white', 'fontsize': 14})\n    \nplot_demo(flattened_data[demo_lst], cols=3, width=20, height=5, hspace=0.45, wspace=0.4)","08bdeb51":"def comorbs_plot(dataset, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    for i, column in enumerate(dataset.columns):\n        values = flattened_data[column].value_counts().sort_values(ascending=False)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        sns.countplot(y=column, data=dataset)\n        for i, v in enumerate(values):\n            ax.text(v - (v\/2), i, v, {'backgroundcolor': 'white'}) if len(values) > 1  else ax.text(v - (v\/2),0 , v, {'backgroundcolor': 'white'})\n    \ncomorbs_plot(flattened_data[comorb_lst], cols=3, width=20, height=20, hspace=0.4, wspace=0.4)","f556904a":"def vitalsandlabs_plot(dataset, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    for i, column in enumerate(dataset.columns):\n        values = flattened_data[column].value_counts().sort_values(ascending=False)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        try:\n            sns.distplot(dataset[column])\n        except RuntimeError as re:\n            if str(re).startswith(\"Selected KDE bandwidth is 0\"):\n                sns.distplot(dataset[column], kde_kws={'bw': 0.1})\n            else:\n                raise re\n        plt.xticks(rotation=0)\n","1ca72355":"vitalsandlabs_plot(flattened_data.loc[:,[i for i in flattened_data.columns if 'MEAN' in i]], cols=4, width=20, height=20, hspace=0.55, wspace=0.25)","fdb97974":"vlabs = flattened_data.loc[:,[i for i in flattened_data.columns if 'MEAN' in i]]\nvlabs['ICU'] = flattened_data['ICU_int']","bc42bbff":"fig = plt.figure(figsize=(10,7))\nsns.heatmap(vlabs.corr(), cmap=\"RdBu_r\")","a6ea7a17":"def comorbs_plot(dataset, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    for i, column in enumerate(dataset.columns):\n        values = flattened_data[column].value_counts().sort_values(ascending=True)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        sns.countplot(y=column, data=dataset)\n        for i, v in enumerate(values):\n            ax.text(v - (v\/2), i, v, {'backgroundcolor': 'white'}) if len(values) > 1  else ax.text(v - (v\/2),0 , v, {'backgroundcolor': 'white'})\n    \ncomorbs_plot(flattened_data.iloc[:,-1:], cols=1, width=10, height=5, hspace=0.45, wspace=0.5)","c1962c3c":"flattened_data['AGE_PERCENTIL'] = flattened_data['AGE_PERCENTIL'].apply(lambda row: int(row[:1]) if row[:1] != 'A' else 9)","ca1a7b82":"model_data = flattened_data.dropna()\nX = model_data.drop(['ICU', 'ICU_int'], axis=1)\ny = model_data['ICU_int']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","fd104b42":"clf = RandomForestClassifier(max_depth=4, max_leaf_nodes=5, random_state=42)\nclf.fit(X_train, y_train)\nimportance = clf.feature_importances_\nimportance = pd.DataFrame(importance, index=X.columns, columns=[\"Importance\"])\nimportance.sort_values(by='Importance', ascending=True).plot(kind='barh', figsize=(20,len(importance)\/2));","2897ff09":"clf.score(X_test, y_test)","7519e16f":"We can only use the objective features up until that VALID_WINDOW index.\n\nTransforming to NaN the cells in labs and vitals columns in which the row represent events out of the valid window:","640e9ba5":"For numeric data, labs and vitals, the mean of the values of all usable windows was obtained.","f00d0528":"Number of removed values per column after this process:","5e58ae24":"## 1. Non Usable Data","d036576b":"After grouping, we have 385 rows, each representing a patient, with lines conrresponding to each patient transformed in lists.\n\n\nLet's check these lists.","f37571e0":"If the patient was ever admitted to the ICU, get the index of the WINDOW in which it happened.","b1fe5982":"Update (15\/07\/2020): Authors have updated the data description, making clear that in rows where ICU = 1, data cannot be used for modelling. I will update this kernel as soon as possible.","15383466":"In the dataset, each row represents the time window in which an event happened: vitals obtained, exam results available, ICU admission.\n\nIn this section, the features will be described for each patient, ignoring windows. ","6dfe3b9d":"## Getting to Know the Data: EDA","741a6e81":"### <font color='grey'>2.2 Patient Characteristics","0641c9fc":"For target variable, vitals, labs and demographics features, it seems fine.\n\nBut the comorbidities features are being represented in various ways. For some patients, 1 is repeated in every window after the first. In some, 1 is attributed only in one of the windows. \nMaybe because information about comorbidities became available only in later windows?\n\nFor this analysis, we are ignoring windows, so, let's flatten the dataset.","6f039a07":"#### <font color='grey'>1. Demographics","16e59065":"### <font color='grey'>2.1 Flattening the dataset","bad99c07":"According to the dataset description:\n> Beware NOT to use the data when the target variable is present, as it is unknown the order of the event (maybe the target event happened before the results were obtained). They were kept there so we can grow this dataset in other outcomes latter on.\n\nAnd according to Felipe Veiga's et al. starter kernel Window Example:\n> The inpatient 0 was addmited at window \"Above-12\". So, it could be used any window size.","d576f81f":"How many patients the dataset represents?\n\nEach patient takes 5 rows, one for each window.","78a1fdab":"#### <font color='grey'>3. Vitals and Labs","ecb395bb":"### <font color='grey'> COVID-19 - Clinical Data to assess diagnosis","43f9b199":"### <font color='grey'>1.1 Removing invalid data","bd3793d1":"## 3. Feature Importances","02d86a17":"Thus, this analisys considers that we can only use objective measures (vital signs and labs) until the first window in which the patient is addmited to the ICU, <b>inclusively(?)<\/b>, in order to avoid feeding models with data that happened after the observed outcome.\n\nIf that's not the case, I will update this notebook accordingly.","bdb11868":"#### <font color='grey'>4. ICU","72fc4a6a":"## 2. Patient View","3b9d8327":"Aggregating ICU admission status into a list and making it in a column of the dataset","0429fbab":"Interesting. It looks like every patient had \"Other\" comorbidity in at least one window of the visit."}}