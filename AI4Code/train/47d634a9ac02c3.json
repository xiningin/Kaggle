{"cell_type":{"b66ebd64":"code","295d37c5":"code","f1096a0d":"code","f6a7b41b":"code","f58fcfb8":"code","62453a34":"code","78b44f42":"code","1eba0ce4":"code","9d29978e":"code","6421ab22":"code","a68b6f39":"code","a56b3ba6":"code","7dfe02a5":"code","7f108c38":"code","4f303f94":"code","a36fc80a":"code","32df9b23":"code","b20569e9":"code","0e6da1fe":"code","f2dd1818":"code","7066e7a4":"code","6c0116c3":"code","09e1a053":"code","6bb56483":"code","576a7be6":"code","d269f052":"code","fcab9a28":"code","7aec5164":"code","d3579fda":"code","5323c506":"code","8d636323":"code","14c2bf1f":"code","27562065":"code","bf7768b9":"code","30aa4fa2":"code","5f1834e2":"code","b0cf0e9c":"code","71fe5202":"code","147fd2bf":"code","c189320d":"code","782a7f02":"code","baeb4687":"code","6174c6a9":"code","87cf413b":"code","89fff789":"code","07cc87db":"code","067a8831":"code","77b8cf80":"code","e0cf9c93":"code","895497d5":"code","6217c46a":"code","61eb5473":"code","cf230b7c":"code","4be385ad":"code","ff322bb8":"code","d49101f0":"code","3041fd05":"code","239e3cc7":"code","13a3ae12":"code","83445bbe":"code","25dc1a3c":"code","b0d43595":"code","889b58d3":"code","8c882a13":"code","35b2c083":"code","f80a11cd":"code","768cb50b":"code","3041914f":"code","fc40e2ee":"code","b2973d11":"code","09939061":"code","acd682ae":"code","6c3d58f5":"code","c250e981":"code","920333ab":"code","460ce2dd":"code","6025c8f5":"code","f9185eac":"code","4fecbdba":"code","4c674e58":"code","d98a4b69":"code","bb3c329e":"code","0c2a9c14":"code","5612e07c":"code","7b192a14":"code","e57ee749":"code","47cece9d":"code","fe00b70a":"code","39d83ec0":"code","3a3be1c0":"code","02a23cc9":"markdown","f08b5f24":"markdown","d7c1b759":"markdown","e86dde1d":"markdown","b0364ee6":"markdown","fb10b46a":"markdown","a69befc8":"markdown","81e2698b":"markdown","46164e8e":"markdown","449f39b1":"markdown","039c009b":"markdown","035d7a99":"markdown","b2c8a7d6":"markdown","8822001e":"markdown","86b7ba87":"markdown","c800e7ca":"markdown","cc9f1217":"markdown","2438b8ce":"markdown","29b543db":"markdown","2f791861":"markdown","891b6e23":"markdown"},"source":{"b66ebd64":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","295d37c5":"data = pd.read_csv(\"..\/input\/paris-housing-classification\/ParisHousingClass.csv\")\ndata.head()","f1096a0d":"data.info()","f6a7b41b":"data.shape","f58fcfb8":"data.describe()","62453a34":"sns.heatmap(data.isnull(), cbar = False)","78b44f42":"data.isnull().sum()","1eba0ce4":"df = data.copy()","9d29978e":"df.head()","6421ab22":"df.columns","a68b6f39":"df[\"category\"].value_counts()","a56b3ba6":"sns.countplot( x = df['category'])","7dfe02a5":"round(df['category'].value_counts()\/df.shape[0]*100,2).plot.pie(autopct = '%1.1f%%', colors = ['lightcoral', 'pink'])","7f108c38":"df['category'].replace(\"Basic\", 0 , inplace = True)\ndf['category'].replace(\"Luxury\", 1 , inplace = True)\n# Changing to numeric type","4f303f94":"df.head()","a36fc80a":"df.info()","32df9b23":"df.duplicated().sum()","b20569e9":"plt.figure(figsize=(20,12))\nsns.heatmap(df.corr(), cbar = True,annot = True, cmap='RdPu', linewidths=1, linecolor='black')","0e6da1fe":"df.columns","f2dd1818":"sns.countplot(x = df[\"hasYard\"], hue=df[\"category\"],palette=\"rocket\")","7066e7a4":"pd.crosstab(data['category'], data['hasYard'], margins=True).style.background_gradient(cmap=\"PuBuGn\")","6c0116c3":"sns.countplot(x = df[\"hasPool\"], hue=df[\"category\"],palette=\"rocket\")","09e1a053":"pd.crosstab(data['category'], data['hasPool'], margins=True).style.background_gradient(cmap=\"PuBuGn\")","6bb56483":"sns.countplot(x = df[\"isNewBuilt\"], hue=df[\"category\"],palette=\"rocket\")","576a7be6":"pd.crosstab(data['category'], data['isNewBuilt'], margins=True).style.background_gradient(cmap=\"PuBuGn\")","d269f052":"sns.countplot(x = df[\"hasStorageRoom\"] , hue=df[\"category\"],palette=\"rocket\")","fcab9a28":"sns.countplot(x = df[\"hasStormProtector\"] , hue=df[\"category\"],palette=\"rocket\")","7aec5164":"sns.lineplot(x = data[\"made\"], y = data[\"price\"] , hue = data[\"category\"])","d3579fda":"sns.lineplot(x = data[\"squareMeters\"], y = data[\"price\"] , hue = data[\"category\"])","5323c506":"plt.scatter(data = df , x=\"squareMeters\" , y=\"numberOfRooms\" , c =df[\"category\"], cmap = 'Blues', alpha = 0.3)\nplt.colorbar ()\nplt.show()\n# Luxurious apartments are distributed almost evenly","8d636323":"plt.scatter(data = df , x=\"numberOfRooms\" , y=\"floors\" , c =df[\"category\"], cmap = 'Purples', alpha = 0.3)\nplt.colorbar ()\nplt.show()\n# Luxurious apartments are distributed almost evenly","14c2bf1f":"# Checking price against squareMeters\ndf['price']\/df['squareMeters']\n# The relation between them is that price is almost 100* the square meters\n# so i will drop one of them","27562065":"df = df.drop([\"price\"], axis = 1)","bf7768b9":"df.info()","30aa4fa2":"# Checking outliers\ndf.plot(kind = \"box\" , subplots = True , figsize = (18,18) ,  layout = (6,3))\nplt.show()\n# There are almost no outliers, except in the category. Which makes sense\n# since luxurious apartments are a minority (around 12.6% as shown previously)","5f1834e2":"luxury = df[df['category']==1]\nluxury\n#take all luxury records","b0cf0e9c":"luxury.shape","71fe5202":"basic = df[df['category']==0].sample(1265)\nbasic\n#Taking sample of basic records equal to luxury records","147fd2bf":"basic.shape","c189320d":"equal = [basic,luxury]\nbalanced_result = pd.concat(equal) # to merge the data\nbalanced_result\n","782a7f02":"balanced_result['category'].value_counts()","baeb4687":"balanced_result.shape","6174c6a9":"X = balanced_result.drop('category',axis=1)\ny = balanced_result['category']","87cf413b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx = scaler.fit_transform(X)","89fff789":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(x,y, test_size=0.3 , random_state=42)","07cc87db":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier(max_depth = 2, max_features=5)\nrf_model.fit(X_train, Y_train)","067a8831":"rf_model.score(X_train,Y_train)","77b8cf80":"y_predict = rf_model.predict(X_test)","e0cf9c93":"rf_model.score(X_test,Y_test)","895497d5":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, y_predict))","6217c46a":"from sklearn.metrics import confusion_matrix, classification_report\nconfusion_matrix(Y_test, y_predict)\n# Same as above, all basic apartments were correctly classified\n# But here, also luxurious ones were correctly classified\n# Which means 100% accuracy, with no overfitting","61eb5473":"from sklearn.neighbors import KNeighborsClassifier\nknn_model = KNeighborsClassifier(n_neighbors=3 )\nknn_model.fit(X_train, Y_train)","cf230b7c":"knn_model.score(X_train,Y_train)","4be385ad":"kY_predict = knn_model.predict(X_test)","ff322bb8":"knn_model.score(X_test,Y_test)","d49101f0":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, kY_predict))","3041fd05":"confusion_matrix(Y_test, kY_predict)","239e3cc7":"from xgboost import XGBClassifier","13a3ae12":"xgb_model = XGBClassifier(learning_rate= 0.4 , max_depth= 2 , objective=\"binary:logistic\")","83445bbe":"xgb_model.fit(X_train, Y_train)","25dc1a3c":"xgb_model.score(X_train,Y_train)","b0d43595":"xgbY_predict = xgb_model.predict(X_test) ","889b58d3":"xgb_model.score(X_test,Y_test)","8c882a13":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, xgbY_predict))","35b2c083":"confusion_matrix(Y_test, xgbY_predict)","f80a11cd":"df.info()","768cb50b":"from sklearn.utils import resample\n# Create two different dataframes of majority and minority class\ndf_majority = df[(df['category']==0)]\ndf_minority = df[(df['category']==1)]\n# upsample minority class\ndf_minority_upsampled = resample(df_minority,\n                                replace = True,   # sample with replacement\n                                n_samples = 7500, # to match majority class\n                                random_state =42) # reproducible results\n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_minority_upsampled, df_majority])","3041914f":"df_upsampled.shape","fc40e2ee":"df_upsampled['category'].value_counts()","b2973d11":"X2 = df_upsampled.drop('category',axis=1)\ny2 = df_upsampled['category']","09939061":"scaler2 = StandardScaler()\nx2 = scaler2.fit_transform(X2)\nX2_train,X2_test,Y2_train,Y2_test = train_test_split(x2,y2, test_size=0.3 , random_state=42)","acd682ae":"knn_model2 = KNeighborsClassifier(n_neighbors=3 )\nknn_model2.fit(X2_train, Y2_train)\n","6c3d58f5":"knn_model2.score(X2_train,Y2_train)","c250e981":"kY_predict2 = knn_model2.predict(X2_test)","920333ab":"knn_model2.score(X2_test,Y2_test)","460ce2dd":"print(classification_report(Y2_test, kY_predict2))","6025c8f5":"confusion_matrix(Y2_test, kY_predict2)","f9185eac":"rf_model2 = RandomForestClassifier(max_depth = 2, max_features=5)\nrf_model2.fit(X2_train, Y2_train)","4fecbdba":"rf_model2.score(X2_train,Y2_train)","4c674e58":"y_predict2 = rf_model2.predict(X2_test)","d98a4b69":"rf_model2.score(X2_test,Y2_test)","bb3c329e":"print(classification_report(Y2_test, y_predict2))","0c2a9c14":"confusion_matrix(Y2_test, y_predict2)","5612e07c":"xgb_model2 = XGBClassifier(learning_rate= 0.4 , max_depth= 2 , objective=\"binary:logistic\")","7b192a14":"xgb_model2.fit(X2_train, Y2_train)","e57ee749":"xgb_model2.score(X2_train,Y2_train)","47cece9d":"xgbY2_predict = xgb_model2.predict(X2_test)","fe00b70a":"xgb_model2.score(X2_test,Y2_test)","39d83ec0":"print(classification_report(Y2_test, xgbY2_predict))","3a3be1c0":"confusion_matrix(Y2_test, xgbY2_predict)","02a23cc9":"**The relation between made year and price for both classes**","f08b5f24":"**We notice that all luxurious apartments must have yards, but not all apartments with yards are luxurious**","d7c1b759":"**We notice here there is linear relation between square meters and price**","e86dde1d":"**The number of luxurious apartments that have storm protector is little more than they dont**","b0364ee6":"**So in this case Random Forest algorithm is beter than Knn**","fb10b46a":"**I will plot some graphs for the strongest features with our target**","a69befc8":"**Spliting data**","81e2698b":"**The result of training and testing accuracy is 100% which is perfect and there is no overfitting**","46164e8e":"**So after up sampling still Random Forest and XGBoost beter than Knn algorithm in this data**","449f39b1":"**Lets try to up sample the data and try again**","039c009b":"**Data scaling**","035d7a99":"**We notice that all luxurious apartments must have pools, but not all apartments with pools are luxurious**","b2c8a7d6":"**We notice that all luxurious apartments its new built, but not all new built apartments its luxurious**","8822001e":"**The number of luxurious apartments that have storage room is little more than they dont**","86b7ba87":"NO null in data","c800e7ca":"**Now i will undersampling the data to be equal to luxury**","cc9f1217":"**Build random forest model**","2438b8ce":"**So there are no missing and no duplicate in data**","29b543db":"**I noteced from this corraltion matrix that our target has a strong relation with hasYard , hasPool and isNewBuilt columns and i found strong relation with price and squareMeters so we have to delete one of them**","2f791861":"**I decided to drop price**","891b6e23":"**So data in category column not balanced**"}}