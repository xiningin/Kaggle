{"cell_type":{"f85017a1":"code","706d7dd1":"code","decafeb9":"code","b418552a":"code","0a9efe84":"code","51af1ba8":"code","53e04a8b":"code","7af348df":"code","3e17c273":"code","19eed0b8":"code","67d5040a":"code","4e40bda6":"code","643a3178":"code","b97eaebf":"code","9f1bd370":"code","3571a9df":"code","a9c5b344":"code","35758521":"code","2519ab40":"code","efe1ed8c":"code","640320b8":"code","e4a75a52":"code","07db3602":"code","5f24fc0d":"code","18acf67f":"code","77392911":"code","ae5f2d17":"code","778b24db":"code","b08fd933":"code","ea2f2f0c":"code","e949d1e3":"code","e7070964":"code","f452328f":"code","3122c7b6":"code","3212e777":"code","0fc5031c":"code","e84b0471":"code","9d074727":"code","11fcf643":"markdown","b9514d03":"markdown","404044ff":"markdown","6c830dc6":"markdown","b74b83e4":"markdown","79ed58cd":"markdown","306373d3":"markdown","7f92aa57":"markdown","75565683":"markdown","35b89aba":"markdown","d33cf4c5":"markdown","d3e4bbc4":"markdown","c3bbebeb":"markdown","2e21f038":"markdown","ae933dd6":"markdown","2109f74b":"markdown","78227a6c":"markdown","2e8e55e8":"markdown"},"source":{"f85017a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","706d7dd1":"import pandas as pd","decafeb9":"corna_rok = pd.read_csv(\"\/kaggle\/input\/covid19-in-south-korea\/corona_rok.csv\")\nmers_rok = pd.read_csv(\"\/kaggle\/input\/covid19-in-south-korea\/mers_rok.csv\")\nSars_rok = pd.read_csv(\"\/kaggle\/input\/covid19-in-south-korea\/2003-SARS_rok.csv\")","b418552a":"print(corna_rok)\nprint(corna_rok.info())","0a9efe84":"corna_rok","51af1ba8":"print(mers_rok.head())","53e04a8b":"print(Sars_rok.head())\nprint(Sars_rok.info())","7af348df":"mres_rok_pre = mers_rok[['reported','number','death']].groupby(['reported'],as_index = False).count()","3e17c273":"mres_rok_pre","19eed0b8":"corna_rok['index'] = pd.Series(['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65'], index = corna_rok.index)\ncorna_rok","67d5040a":"Sars_rok['index'] = pd.Series(['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59'], index = Sars_rok.index)\nSars_rok","4e40bda6":"mres_rok_pre['index'] = pd.Series(['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35'], index = mres_rok_pre.index)\nmres_rok_pre","643a3178":"# import module to draw plots\n\nimport numpy as np\nimport plotly.offline as pyo\nimport plotly.graph_objs as go","b97eaebf":"trace1 = go.Scatter(x = corna_rok['index'], y = corna_rok['confirmed'], mode = 'lines', name = 'corna_rok')\ntrace2 = go.Scatter(x = Sars_rok['index'], y = Sars_rok['confirmed'], mode = 'lines', name = 'Sars_rok')\ntrace3 = go.Scatter(x = mres_rok_pre['index'], y = mres_rok_pre['number'], mode = 'lines', name = 'mres_rok_pre')\n\ndata = [trace1, trace2, trace3]\npyo.iplot(data)","9f1bd370":"from sklearn.preprocessing import MinMaxScaler\nprint(corna_rok['confirmed'].tail())\nprint(Sars_rok['confirmed'].head())\nprint(mres_rok_pre['number'].head())","3571a9df":"scaler = MinMaxScaler()\ncorna_rok['confirmed_scaled'] = scaler.fit_transform(corna_rok['confirmed'].values.reshape(-1,1))\nmres_rok_pre['confirmed_scaled'] = scaler.fit_transform(mres_rok_pre['number'].values.reshape(-1,1))\nSars_rok['confirmed_scaled'] = scaler.fit_transform(Sars_rok['confirmed'].values.reshape(-1,1))","a9c5b344":"corna_rok.head()","35758521":"mres_rok_pre.head()","2519ab40":"Sars_rok.head()","efe1ed8c":"trace1 = go.Scatter(x = corna_rok['index'], y = corna_rok['confirmed_scaled'], mode = 'lines', name = 'corna_rok')\ntrace2 = go.Scatter(x = Sars_rok['index'], y = Sars_rok['confirmed_scaled'], mode = 'lines', name = 'Sars_rok')\ntrace3 = go.Scatter(x = mres_rok_pre['index'], y = mres_rok_pre['confirmed_scaled'], mode = 'lines', name = 'mres_rok_pre')\n\ndata = [trace1, trace2, trace3]\npyo.iplot(data)","640320b8":"corna_rok.head()","e4a75a52":"corna_arima = corna_rok[['dates','confirmed']]\ncorna_arima.head()","07db3602":"corna_arima.dtypes","5f24fc0d":"corna_arima['dates'] = pd.DatetimeIndex(corna_arima['dates'])","18acf67f":"corna_arima = corna_arima.rename(columns = {'dates':'ds', 'confirmed':'y'})\ncorna_arima","77392911":"corna_arima['y'] = corna_arima['y'].values.astype(float)","ae5f2d17":"corna_arima.dtypes","778b24db":"corna_arima = corna_arima.set_index(\"ds\")","b08fd933":"corna_arima.head()","ea2f2f0c":"import matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\ncorna_arima.plot()\nplt.show()","e949d1e3":"plot_acf(corna_arima)\nplot_pacf(corna_arima)\nplt.figure(figsize=(20,4))\nplt.show()","e7070964":"diff_1 = corna_arima.diff(periods=1).iloc[1:]\ndiff_1.plot()\nplot_acf(diff_1)\nplot_pacf(diff_1)\nplt.show()","f452328f":"from statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.arima_model import ARIMAResults","3122c7b6":"model = ARIMA(corna_arima, order=(2,1,0))\nmodel_fit = model.fit(trend = 'nc', full_output = True, disp=1)\nprint(model_fit.summary())","3212e777":"model_fit.plot_predict()\nfore = model_fit.forecast(steps = 1)\nprint(fore)","0fc5031c":"# ARIMA\uc758 p,d,q\ub97c \ubcc0\uacbd\nmodel = ARIMA(corna_arima, order=(0,1,1))\nmodel_fit = model.fit(trend = 'nc', full_output = True, disp=1)\nprint(model_fit.summary())","e84b0471":"model_fit.plot_predict()\n\n# \ubaa8\ub378\uc5d0 \ub3cc\ub9b0\uac78 \uc608\uce21\ud574\uc11c \ubcf4\uc5ec\uc918\ub77c\nfore = model_fit.forecast(steps = 1)\nprint(fore)","9d074727":"corna_arima.tail()","11fcf643":"- check the data types","b9514d03":"- in ARIMA model, we should estimate the proper coefficient of pcf and pacf.\n- frist, draw some graphs","404044ff":"- i will use 'ds' for index","6c830dc6":"read and check the csv files.","b74b83e4":"- three dataset's date aren't same at all. so i use theirs index only to draw visualization","79ed58cd":"- let's convert int64 that is type of 'y' to float. \n- ARIMA model only treats float data type.","306373d3":"### now i will apply time series analytics for corna_rok datset","7f92aa57":"- to use ARIMA, i manipulated existing dataset.","75565683":"first, import module what i needed","35b89aba":"- \uc774 \ub370\uc774\ud130\ub294 \ud55c\uad6d\uc5d0\uc11c \ubc1c\uc0dd \ud588\uc5c8\ub358 \uc0ac\uc2a4, \uba54\ub974\uc2a4, \ucf54\ub85c\ub098\uc5d0 \uad00\ud55c \uac83\uc785\ub2c8\ub2e4. \n- \uacf5\ud1b5\uc801\uc73c\ub85c \ubc1c\uc0dd\ud55c \uc2dc\uae30, \ud655\uc9c4\uc790, \uc0ac\ub9dd\uc790, \uc644\uce58\uc790\uac00 \uae30\ub85d\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \n- \uccab \ubbf8\ub2c8 \ud504\ub85c\uc81d\ud2b8\uc778 \uc774\uc720\ub85c \uc870\uae08\uc740 \uac00\ubccd\uac8c \uc811\uadfc\ud574 \ubcf4\uace0\uc790 \ud558\uc600\uc2b5\ub2c8\ub2e4. \n- \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n- 1. \ub370\uc774\ud130\ub97c \ubd84\uc11d \ubaa9\uc801\uc5d0 \ub9de\uac8c \uc804\ucc98\ub9ac \ud55c\ub2e4.\n- 2. \ucd5c\uc885 \ubaa9\ud45c\ub294 \uc2dc\uacc4\uc5f4 \ubd84\uc11d\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud655\uc9c4\uc790 \uc218\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774\uace0, \uc815\ud655\ub3c4\ub97c \ube44\uad50\ud558\uae30 \uc704\ud574 \uc774\ub3d9\ud3c9\uade0\uc744 \uc0ac\uc6a9\ud574\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","d33cf4c5":"- corna_arima is consist of object and int64 data type.\n- convert object that is type of 'date' to DatetimeIndex.","d3e4bbc4":"- first model's predict value is '**9336**' and second in '9269'. the predicted date is '03-27'\n- the real value of 03-27 is '**9332**'.\n- predict value of first model is more accurate that second model.","c3bbebeb":"- Corna and Sars files are mainly consists of 'date', 'confrimed, and 'deaths'.\n- but Mers file is consist of many columns that i don't needed.\n- so i will remove useless columns and use 'groupby' function to calcuate counts based 'date' column in Mers file.","2e21f038":"- 9332","ae933dd6":"- using MinMaxScaler, i can see more detail about the distribution.\n- as you can see for COVID 19 and SARS increased rapidly.","2109f74b":"- it shows us non stationary process, we need to convert non-stationary things to stationary things.\n- second, therefore,above the reason, we should apply 'difference' for origin dataset.","78227a6c":"- their values are too unbalnce to compare. therefore, i will use normalization all values.","2e8e55e8":"- it has a lot of manners choosing pcf and pacf coefficient. \n- i use the simple manner that is choose a point observing autocorrelation graphs of acf and pacf.  "}}