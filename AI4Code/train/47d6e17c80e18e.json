{"cell_type":{"47ffdb82":"code","de73e028":"code","7d2ec35a":"code","4610b4d9":"code","9d0bec3e":"code","c5481c95":"code","8854d15e":"code","449056df":"code","9b784a5a":"code","d40f77a4":"code","695cde7a":"code","fad3df50":"code","d7c19863":"code","2d4a7b9f":"code","cd801ca5":"code","e9abad9f":"code","a43f11ab":"code","cf51a459":"code","a12a40c8":"code","d5bd899c":"code","9b2affcb":"code","55b28d12":"code","a7637295":"code","1508a99b":"code","01baefed":"code","89b3a0bb":"code","d211ac74":"code","38a645ea":"code","94fc8397":"code","330913c8":"code","0c63d802":"code","cba403bc":"code","08296df1":"code","2c781500":"code","c733fcfa":"code","0200c1c5":"code","e98790ba":"code","81faa9b3":"markdown","8079f378":"markdown","75560b5a":"markdown","25717d97":"markdown","002ea480":"markdown","6a8a18a3":"markdown","49b81488":"markdown","88948277":"markdown","bab41ee8":"markdown","25dba289":"markdown","acdb9ef2":"markdown","23be8c6b":"markdown","f59853ca":"markdown","4c08af40":"markdown","461ec909":"markdown","6868d04b":"markdown","b6d97b78":"markdown","7da6582c":"markdown","40a385f9":"markdown","a15a0841":"markdown","f4d2f22e":"markdown","65d870d1":"markdown"},"source":{"47ffdb82":"import requests\nfrom io import BytesIO\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torchvision\nfrom torchvision import transforms as pth_transforms\nimport numpy as np\nfrom PIL import Image\nimport os\nimport numpy as np\nimport pandas as pd\nimport cv2\nfrom tqdm import tqdm","de73e028":"patch_size = 8  #8\nmodel = torch.hub.load('facebookresearch\/dino:main', 'dino_vits16')\n#device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","7d2ec35a":"for p in model.parameters():\n    p.requires_grad = False\n\nif torch.cuda.is_available():\n    model.cuda()\n    \nmodel.eval()\nmodel.to(device)","4610b4d9":"transform = pth_transforms.Compose([\n    pth_transforms.ToTensor(),\n    pth_transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),\n])","9d0bec3e":"data_dir='..\/input\/image-classification\/images\/images'\nNames0 = os.listdir(data_dir)\nNames=sorted(Names0)\nprint(Names)\nprint(len(Names))","c5481c95":"Names2=[]\nfor name in Names:\n    name2=name.replace(' ','_')\n    Names2+=[name2]\n    !mkdir {name2}","8854d15e":"!ls","449056df":"N=list(range(len(Names)))\nnormal_mapping=dict(zip(Names,N))\nreverse_mapping=dict(zip(N,Names))","9b784a5a":"for i,name in enumerate(Names):\n    path0=os.path.join(data_dir,name)\n    \n    for im in tqdm(os.listdir(path0)):\n      \n        path1=os.path.join(path0,im)\n        img_npy = cv2.imread(path1)\n        #print(img_npy.shape) #(128,128,3)\n        #print(type(img_npy))\n        if type(img_npy)==np.ndarray:\n            img_npy = cv2.resize(img_npy,dsize=(512,512),interpolation=cv2.INTER_CUBIC)    ####\n            img = transform(img_npy)\n            w, h = img.shape[1] - img.shape[1] % patch_size, img.shape[2] - img.shape[2] % patch_size\n            img = img[:, :w, :h].unsqueeze(0)\n            w_featmap = img.shape[-2] \/\/ patch_size\n            h_featmap = img.shape[-1] \/\/ patch_size\n            attentions = model.get_last_selfattention(img.cuda())    ###img.cuda()\n\n            nh = attentions.shape[1]\n            attentions = attentions[0, :, 0, 1:].reshape(nh, -1)\n            val, idx = torch.sort(attentions)\n            val \/= torch.sum(val, dim=1, keepdim=True)\n            cumval = torch.cumsum(val, dim=1)\n\n            threshold = 0.6\n            th_attn = cumval > (1 - threshold)\n            idx2 = torch.argsort(idx)\n\n            for head in range(nh):\n                th_attn[head] = th_attn[head][idx2[head]]\n\n            th_attn = th_attn.reshape(nh, w_featmap\/\/2, h_featmap\/\/2).float()\n            th_attn = nn.functional.interpolate(th_attn.unsqueeze(0), scale_factor=patch_size, mode=\"nearest\")[0].cpu().numpy()\n            attentions = attentions.reshape(nh, w_featmap\/\/2, h_featmap\/\/2)\n            attentions = nn.functional.interpolate(attentions.unsqueeze(0), scale_factor=patch_size, mode=\"nearest\")[0].cpu().numpy()\n            attentions_mean = np.mean(attentions, axis=0)\n            name2=Names2[i]\n\n            path2=os.path.join(name2,im[0:-4]+'.png')\n            #print(path2)\n            #plt.imshow(attentions_mean)\n            cv2.imwrite(path2,attentions_mean*2000)     ### \n            #plt.show()\n\n            #img2=cv2.imread(path2,cv2.IMREAD_GRAYSCALE)\n            #print(img2.shape)\n            #plt.imshow(img2)\n            #plt.show()\n        else:\n            print(type(img_npy))\n            ","d40f77a4":"import tensorflow as tf \nimport numpy as np \nimport matplotlib.pyplot as plt \ntf.__version__","695cde7a":"img_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n                            #rotation_range=90,\n                            brightness_range=(0.5,1), \n                            #shear_range=0.2, \n                            #zoom_range=0.2,\n                            channel_shift_range=0.2,\n                            horizontal_flip=True,\n                            vertical_flip=True,\n                            rescale=1.\/255,\n                            validation_split=0.3)","fad3df50":"root_dir = '\/kaggle\/working'   #Transfer learning of DINO attention map image\n\nimg_generator_flow_train = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(512,512),\n    batch_size=16,\n    shuffle=True,\n    subset=\"training\")\n\nimg_generator_flow_valid = img_generator.flow_from_directory(\n    directory=root_dir,\n    target_size=(512,512),\n    batch_size=16,\n    shuffle=True,\n    subset=\"validation\")","d7c19863":"imgs, labels = next(iter(img_generator_flow_train))\nprint(labels)","2d4a7b9f":"for img, label in zip(imgs, labels):\n    print(img.shape)\n    plt.imshow(img)\n    value=np.argmax(label)\n    plt.title(reverse_mapping[value])\n    plt.show()","cd801ca5":"base_model = tf.keras.applications.InceptionV3(input_shape=(512,512,3),\n                                               include_top=False,\n                                               weights = \"imagenet\"\n                                               )","e9abad9f":"base_model.trainable = False","a43f11ab":"model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(len(Names), activation=\"softmax\")\n])","cf51a459":"model.summary()","a12a40c8":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = 0.001),\n              loss = tf.keras.losses.CategoricalCrossentropy(),\n              metrics = [tf.keras.metrics.CategoricalAccuracy()])","d5bd899c":"model.fit(img_generator_flow_train, \n          validation_data=img_generator_flow_valid, \n          steps_per_epoch=8, epochs=32) #8,32","9b2affcb":"# Visualise train \/ Valid Accuracy\nplt.plot(model.history.history[\"categorical_accuracy\"], c=\"r\", label=\"train_accuracy\")\nplt.plot(model.history.history[\"val_categorical_accuracy\"], c=\"b\", label=\"test_accuracy\")\nplt.legend(loc=\"upper left\")\nplt.show()","55b28d12":"# Visualise train \/ Valid Loss\nplt.plot(model.history.history[\"loss\"], c=\"r\", label=\"train_loss\")\nplt.plot(model.history.history[\"val_loss\"], c=\"b\", label=\"test_loss\")\nplt.legend(loc=\"upper left\")\nplt.show()","a7637295":"imgs, labels = next(iter(img_generator_flow_valid))","1508a99b":"print(labels)","01baefed":"for layer in model.layers:\n    print(layer.name)","89b3a0bb":"base_model = model.layers[0]","d211ac74":"tf.keras.utils.plot_model(base_model, show_shapes=True, show_layer_names=True)","38a645ea":"for layer in base_model.layers:\n    print(layer.name)","94fc8397":"last_conv_layer_name = \"mixed10\"\nclassifier_layer_names = [layer.name for layer in model.layers][1:]","330913c8":"# We start by setting up the dependencies we will use\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Display\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","0c63d802":"# The Grad-CAM algorithm\ndef get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a \"batch\"\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    return array\n\n\ndef make_gradcam_heatmap(\n    img_array, base_model, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = base_model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(base_model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by \"how important this channel is\" with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n    heatmap = np.maximum(heatmap, 0) \/ np.max(heatmap)\n    return heatmap","cba403bc":"# Print what the top predicted class is\npreds = model.predict(imgs)\npred_labels = tf.argmax(preds, axis = -1)\n\nprint(\"Prediction output:\", preds)\nprint(\"Predicted label:\", pred_labels)","08296df1":"# Generate class activation heatmap\nheatmaps = []\n\nfor img in imgs:\n    heatmap = make_gradcam_heatmap(\n    tf.expand_dims(img,axis=0),\n        base_model, model, \n        last_conv_layer_name, \n        classifier_layer_names\n  )\n    heatmaps.append(heatmap)\n\n# Display heatmap\nplt.matshow(heatmaps[0])\nplt.show()\n","2c781500":"from pathlib import Path\n\nfor img, pred_label, true_label, heatmap in zip(imgs, pred_labels, labels, heatmaps): \n    # We rescale heatmap to a range 0-255\n    heatmap = np.uint8(255 * heatmap)\n\n    # We use jet colormap to colorize heatmap\n    jet = cm.get_cmap(\"jet\")\n\n    # We use RGB values of the colormap\n    jet_colors = jet(np.arange(256))[:, :3]\n    jet_heatmap = jet_colors[heatmap]\n\n    # We create an image with RGB colorized heatmap\n    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)\n    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))\n    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)\n\n    # Superimpose the heatmap on original image\n    superimposed_img = jet_heatmap * 0.003 + img\n    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)\n\n    # Save the superimposed image\n    save_path = \"saved_img.jpg\"\n    superimposed_img.save(save_path)\n\n    # Display Grad CAM\n    pred_file_path = np.argmax(img_generator_flow_valid.labels == pred_label)\n    pred_label_name = Path(img_generator_flow_valid.filepaths[pred_file_path]).parent.name\n\n    true_file_path = np.argmax(img_generator_flow_valid.labels == tf.argmax(true_label))\n    true_label_name = Path(img_generator_flow_valid.filepaths[true_file_path]).parent.name\n\n    print(\"Predicted label:\",pred_label_name)\n    print(\"True label:\", true_label_name)\n\n    display(Image(save_path))","c733fcfa":"LABEL=[]\nfor item in labels:\n    LABEL+=[np.argmax(item)]\nPRED=pred_labels.numpy().tolist()","0200c1c5":"print(LABEL)\nprint(PRED)","e98790ba":"from sklearn.metrics import classification_report\nprint(classification_report(LABEL,PRED))","81faa9b3":"### Work flow of this scripts\n- Create DINO attention map images and saved\n- Transfer learning using DINO attention map image","8079f378":"### Create model","75560b5a":"!rm -rf art\n!rm -rf and\n!rm -rf culture\n!rm -rf food\n!rm -rf d\n!rm -rf rinks\n!rm -rf travel\n!rm -rf adventure\n!rm -rf architecure\n!ls","25717d97":"### Visualize a batch of images","002ea480":"### Create heatmap","6a8a18a3":"## Interpretation with Grad Cam","49b81488":"### make_gradcam_heatmap","88948277":"### Compile model","bab41ee8":"## Transfer Learning ","25dba289":"### Prepare img_generator_flow","acdb9ef2":"## Preprocessing with ImageDataGenerator","23be8c6b":"### Set the weights of the imported model","f59853ca":"### Import a pretrained model\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/InceptionV3","4c08af40":"### Visualize accuracy and loss","461ec909":"### Prepare ImageDataGenerator\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/preprocessing\/image\/ImageDataGenerator","6868d04b":"# Create DINO attention map images and saved\nhttps:\/\/www.kaggle.com\/stpeteishii\/dandelion-image-dino-vision-transformers","b6d97b78":"### Predicted label and heatmap","7da6582c":"# Transfer learning of DINO attention map image","40a385f9":"### Create imgs and labels","a15a0841":"# Google Image DINO Attention Transfer Learning\nhttps:\/\/www.kaggle.com\/stpeteishii\/google-image-dino-attention-transfer-learning-mlex\n<div align=\"left\">\n<img src=\"https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle\" alt=\"upvote\">\n<\/div>","f4d2f22e":"### Predict","65d870d1":"### Train the model"}}