{"cell_type":{"ec229575":"code","b7148fca":"code","b89f28f8":"code","5aa563ac":"code","7c4f9a8c":"code","b8f12c05":"code","c83e849b":"code","7a177e0d":"code","caeab152":"code","8aa9e20e":"code","8ae67cbd":"code","00f8991d":"code","a2652c63":"code","38c5accc":"code","c04d3b6a":"code","1356c7d6":"code","1bb62924":"code","5688f145":"code","4af56c3c":"code","691b1369":"code","21f48a86":"code","9a1f0bf2":"code","c134f559":"code","fc3f3409":"code","243a516d":"code","2a32f29e":"code","93adaad4":"code","2e0cd17d":"code","3d1ba249":"code","cfcbd1ab":"code","2ee7adc9":"code","ce9ecd7b":"code","f66aa500":"code","2e870889":"code","413f4eb2":"code","83ad24b9":"code","2c7f38b5":"code","0d8a245e":"code","371fd601":"code","01b16af1":"code","b107c2af":"code","266404b3":"code","43f7f585":"code","f2a9e499":"code","9af847fd":"code","8fa330e4":"code","062e3596":"code","dee352e4":"code","8704ac4a":"code","762fca45":"code","ec5fe5bb":"code","e74cba73":"code","16e192d4":"code","ccbbfa00":"code","97e301a6":"code","2470aa52":"code","eedb9cc2":"code","ff52eda9":"code","9bb49708":"code","949bc59c":"code","0cc0cbde":"code","5d369d8d":"markdown","a1c6916b":"markdown","0a62a925":"markdown","0ddfac78":"markdown","67b5d909":"markdown","5dfc4da7":"markdown","5318b2c2":"markdown","2a304049":"markdown","b59439d8":"markdown","036eb36f":"markdown","07c6cef1":"markdown","10c08fba":"markdown","8401809f":"markdown","aad1f6fe":"markdown","8a71f40f":"markdown","07f7cf52":"markdown","60859dde":"markdown","c4ca119b":"markdown","e119763b":"markdown","14aef40c":"markdown","e92a0967":"markdown","6c24c2fb":"markdown","8f9725ac":"markdown","000b0c55":"markdown","e6ce057a":"markdown","2248db32":"markdown","4e998358":"markdown","72927521":"markdown","d628b55f":"markdown","0493866e":"markdown","decf2f2b":"markdown","6a367f86":"markdown","b56c8e64":"markdown","308021c2":"markdown","2d24e824":"markdown","e26dccfc":"markdown","d334e645":"markdown","82feb187":"markdown","22bb7087":"markdown","0419f5ee":"markdown","88ced036":"markdown","ce4d3aff":"markdown","e0f56698":"markdown","96c6d387":"markdown","4f616b62":"markdown","0754f5ba":"markdown","f786e704":"markdown","9693be73":"markdown","8bfd7ebf":"markdown","d3ff6a50":"markdown","96b421a6":"markdown","067912a1":"markdown","44c538df":"markdown","b70589a7":"markdown","3f7257ac":"markdown","da3803e0":"markdown","77b6c3f1":"markdown","2da82e9f":"markdown","2f48ba8f":"markdown","736ee57e":"markdown","5cb45591":"markdown","dfa9102e":"markdown","cb0f2cde":"markdown","cdf0a809":"markdown","cb986abf":"markdown","9a89c858":"markdown","39dd4ea9":"markdown"},"source":{"ec229575":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\nfrom plotly import tools\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nfrom sklearn.preprocessing import LabelEncoder\n","b7148fca":"\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b89f28f8":"df= pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","5aa563ac":"df.head()","7c4f9a8c":"df.shape","b8f12c05":"df.isnull().sum()","c83e849b":"from kaggle.competitions import nflrush\n\n# You can only call make_env() once, so don't lose it!\nenv = nflrush.make_env()\n\n# You can only iterate through a result from `env.iter_test()` once\n# so be careful not to lose it once you start iterating.\niter_test = env.iter_test()\n\n(test_df, sample_prediction_df) = next(iter_test)\n#test_df","7a177e0d":"test_df.head()","caeab152":"state_dictionary={'Huston':'Texas', 'Mexico City':'Mexico','Jacksonville':'Florida','Baltimore':'Maryland',\n                  'Landover':'Maryland', 'New Orleans':'Louisiana','Orchard Park' : 'New York',\n                  'Cleveland':'Ohio','Tampa':'Florida','Carson': 'California', 'Charlotte':'North Carolina',\n                  'Minneapolis':'Minnesota','Detroit':'Michigan', 'Houston':'Texas', 'Chicago':'Illinois',\n                  'Nashville':'Tennessee','Miami Gardens':'Florida', 'E. Rutherford': 'New Jersey',   \n                  'Pittsburgh':'Pennsylvania', 'Arlington':'Texas', 'Baltimore': 'Maryland', \n                  'New Orleans':'Louisiana','Atlanta':'Georgia', 'Jacksonville': 'Florida',\n                  'New Orleans': 'Louisiana', 'Seattle':'Washington', 'East Rutherford':'New Jersey', \n                  'Cincinnati':'Ohio', 'Foxborough':'Massachusetts','Oakland': 'California',\n                  'Arlington':'Texas', 'Glendale': 'Arizona', 'Pittsburgh':' Kansas', 'London':'England',\n                  'Orchard Park': 'New York','Philadelphia': 'Pennsylvania', 'Kansas City':'Missouri',\n                  'Los Angeles':'California', 'Santa Clara':'California','Jacksonville':'Florida',\n                  'East Rutherford': 'New Jersey','Indianapolis':'Indiana', 'Green Bay':'Wisconsin', \n                  'Denver':'Colorado','Charlotte': 'North Carolina','Tampa':'Florida',\n                   'Chicago. IL':'Illinois', 'Cleveland Ohio':'Ohio', 'Jacksonville Florida':'Florida', 'Orchard Park NY':'New York'}","8aa9e20e":"Location=[]\nfor i in df.Location:\n    try:\n        Location.append(i.split(',')[0])\n    except:\n         Location.append(i.split(' '))[0]","8ae67cbd":"df['Location']=Location\ndf['State']=df['Location'].map(state_dictionary)","00f8991d":"temp=df.drop_duplicates('HomeTeamAbbr', keep='last')['State']\nCode=['CA','FL','TX','OH','NJ','MD','GA','MA','WI','AZ','NC','PA','WA','KS','MO','IN','IL','NY',\n     'TN','MI','MN','CO','LA']\nTeams_from_state=pd.DataFrame()\nTeams_from_state['Sate']=temp.value_counts().index\nTeams_from_state['Count']=temp.value_counts().values\nTeams_from_state['Code']=Code","a2652c63":"fig = go.Figure(data=go.Choropleth(\n    locations=Teams_from_state['Code'], # Spatial coordinates\n    z = Teams_from_state['Count'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Reds',\n    colorbar_title = \"Teams per State\",\n))\n\nfig.update_layout(\n    title_text = 'Teams from each state of USA in NFL',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","38c5accc":"df['Dummy']=[1]*len(df) #Adding a dummy column for future use","c04d3b6a":"temp=df.drop_duplicates('GameId', keep='last')\ntemp_df = temp.groupby([\"Season\"])[\"Dummy\"].agg([\"sum\"]).reset_index()\ntemp_df.columns = [\"Season\",\"TotalGames\"]\nfig = go.Figure(data=[go.Pie(labels=temp_df['Season'], values=temp_df['TotalGames'],hole=0.2)])\nfig.show()","1356c7d6":"temp=df.drop_duplicates('GameId', keep='last')['Week']\nMatches_on_weekly_basis=pd.DataFrame()\nMatches_on_weekly_basis['Week']=temp.value_counts().index\nMatches_on_weekly_basis['Count']=temp.value_counts().values\nMatches_on_weekly_basis=Matches_on_weekly_basis.sort_values(by='Week')\nfig = px.line(Matches_on_weekly_basis, x=\"Week\", y=\"Count\", title='Matches on Weekly Basis')\nfig.show()","1bb62924":"Type_map={'Outdoor':'Outdoor','Outdoors':'Outdoor','Oudoor':'Outdoor'\n         ,'Ourdoor':'Outdoor','Outside':'Outdoor','Outdor':'Outdoor'\n         ,'Outddors':'Outdoor','Retractable Roof':'Retractable Roof',\n         'Retr. Roof-Closed':'Retractable Roof','Retr. Roof - Closed':'Retractable Roof',\n         'Retr. Roof Closed':'Retractable Roof',  \"Outdoor Retr Roof-Open\":\"Outdoor\",\n         \"Indoors\":\"Indoor\",\"Indoor\":\"Indoor\",\"Indoor, Roof Closed\":\"Indoor\",\n         \"Doom\":\"Doom\",\"Domed, closed\":\"Doom\",\"Domed, open\":\"Doom\",\"Closed Dome\":\"Doom\"\n         ,\"Bowl\":\"Bowl\",\"Open\":\"Outdoor\",\"Cloudy\":\"Outdoor\",\"Domed, Open\":\"Doom\"\n         ,'Retr. Roof-Open':'Retractable Roof',\"Retr. Roof - Open\":\"Retractable Roof\",\n          \"Indoor, Open Roof\":\"Indoor\",\"Heinz Field\" :\"Heinz Field\"}","5688f145":"df.StadiumType=df.StadiumType.map(Type_map)\nStadium=pd.DataFrame()\nStadium['Type']=df.StadiumType.value_counts().index\nStadium['Count']=df.StadiumType.value_counts().values\n","4af56c3c":"import plotly.offline as pyo\npy.init_notebook_mode(connected=True)\nfig = go.Figure(data=[go.Pie(labels=Stadium['Type'], values=Stadium['Count'],hole=0.2)])\nfig.show()","691b1369":"df['Turf'].unique()\n\nTurf_map={\"Grass\":\"Grass\",\"grass\":\"Grass\",'Twenty-Four\/Seven Turf':\"FieldTurf\",\n          'DD GrassMaster':'DD GrassMaster','A-Turf Titan':'A-Turf Titan',\n          \"FieldTurf 360\":\"FieldTurf\",\"FieldTurf360\":\"FieldTurf\",'UBU Sports Speed S5-M':'UBU Sports Speed S5-M',\n         \"Field Turf\":\"FieldTurf\",\"Natural\":\"Natural\", \"Natural Grass\":\"Natural\",\n         \"Natural grass\":\"Natural\",\"Naturall Grass\":\"Natural\",'SISGrass':'Grass',\n          'UBU Speed Series-S5-M':\"UBU Speed Series-S5-M\",\"Artifical\":\"Artifical\",\"Artificial\":\"Artifical\"}","21f48a86":"df.Turf=df.Turf.map(Turf_map)\ntemp=df.groupby(['StadiumType','Turf']).agg('count')['Dummy']","9a1f0bf2":"temp.unstack(level=0).plot(kind='bar', subplots=True,figsize=(10,10))","c134f559":"temp=df.drop_duplicates('GameId', keep='last')\ntemp_df = df.groupby([\"Week\",\"StadiumType\"])[\"StadiumType\"].agg([\"count\"]).reset_index()\ntemp_df.columns = [\"Week\",\"StadiumType\", \"Count\"]\n#temp_df.Country = temp_df[temp_df.Country != 'United Kingdom']\n\nfig = px.scatter(temp_df, x=\"Week\", y=\"StadiumType\", color=\"StadiumType\", size=\"Count\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Matches played in different Stadium Types on each week\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","fc3f3409":"temp=df.drop_duplicates('GameId', keep='last')\ntemp_df = df.groupby([\"Week\",\"GameWeather\"])[\"GameWeather\"].agg([\"count\"]).reset_index()\ntemp_df.columns = [\"Week\",\"GameWeather\", \"Count\"]\n\n\nfig = px.scatter(temp_df, x=\"Week\", y=\"GameWeather\", color=\"GameWeather\", size=\"Count\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Game weather on each week\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=600,\n    showlegend=False\n)\nfig.update_layout(layout)\nfig.show()","243a516d":"temp_df=df.loc[df.Season==2017]\ntemp_df=temp_df.drop_duplicates('GameId', keep='last')\ntemp_df=temp_df[[\"WindSpeed\",\"WindDirection\"]]\ntemp_df=temp_df.dropna()\nfig = px.bar_polar(temp_df, r=\"WindSpeed\", theta=\"WindDirection\",\n                   color=\"WindSpeed\", template=\"plotly_dark\",\n                   color_discrete_sequence= px.colors.sequential.Plasma[-2::-1])\nfig.show()","2a32f29e":"temp_df=df.loc[df.Season==2018]\ntemp_df=temp_df.drop_duplicates('GameId', keep='last')\ntemp_df=temp_df[[\"WindSpeed\",\"WindDirection\"]]\ntemp_df=temp_df.dropna()\nfig = px.bar_polar(temp_df, r=\"WindSpeed\", theta=\"WindDirection\",\n                   color=\"WindSpeed\", template=\"plotly_dark\",\n                   color_discrete_sequence= px.colors.sequential.Plasma[-2::-1])\nfig.show()","93adaad4":"temp=df.drop_duplicates('PlayId', keep='last')['Position']\nPlayer_Analysis=pd.DataFrame()\nPlayer_Analysis['Position']=temp.value_counts().index\nPlayer_Analysis['Count']=temp.value_counts().values\n\nfig = px.bar(Player_Analysis, x='Position', y='Count',\n             hover_data=['Count'], color='Count',\n             labels={'pop':'Total Number of Players on each position'}, height=400)\nfig.show()","2e0cd17d":"# Add histogram data\nx1 =df.loc[df.HomeTeamAbbr=='LA']['PlayerWeight']\n# Group data together\nhist_data = [x1]\n\ngroup_labels = ['PlayerWeight']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()","3d1ba249":"from operator import add\nfoot=[int(ht[0]) for ht in df.PlayerHeight.str.split('-')]\ninches=[int(ht[1]) for ht in df.PlayerHeight.str.split('-')]\nheight=list(map(add,[x*30.48 for x in foot],[x*2.54 for x in inches]))\ndf.PlayerHeight=height","cfcbd1ab":"import plotly.figure_factory as ff\nimport numpy as np\n\n\n# Add histogram data\nx1 =df.loc[df.HomeTeamAbbr=='LA']['PlayerHeight']\n# Group data together\nhist_data = [x1]\n\ngroup_labels = ['PlayerHeight']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()","2ee7adc9":"from wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\ninv_names = []\nfor invs in df['PlayerCollegeName']:\n    for inv in str(invs).split():\n        if inv != \"\":\n            inv_names.append(inv.strip().lower().replace(\"'\",\"\"))\n            \ndef plot_wordcloud(text, mask=None, max_words=40, max_font_size=80, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown', 'nan', ' nan'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    prefer_horizontal = 1.0,\n                    max_font_size = max_font_size, \n                    min_font_size = 10,\n                    random_state = 42,\n                    #color_func = lambda *args, **kwargs: (140,0,0),\n                    #color_func = color_map(),\n                    colormap=\"Blues\",\n                    width=600, \n                    height=300,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        #image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_color), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size, 'color': 'blue',\n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'blue', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n\nplot_wordcloud(' '.join(inv_names), title=\"Player's College Name\")","ce9ecd7b":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\ncreate_football_field()\nplt.show()","f66aa500":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Team\"]==\"home\"]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Home Players movement Along the field \")\nfig.tight_layout()\nplt.show()","2e870889":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Team\"]==\"away\"]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Away Players movement Along the field \")\nfig.tight_layout()\nplt.show()","413f4eb2":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Quarter\"]==1]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Players movement Along the field in Quater -1\")\nfig.tight_layout()\nplt.show()","83ad24b9":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Quarter\"]==2]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Players movement Along the field in Quater -2\")\nfig.tight_layout()\nplt.show()","2c7f38b5":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Quarter\"]==3]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Players movement Along the field in Quater -3\")\nfig.tight_layout()\nplt.show()","0d8a245e":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Quarter\"]==4]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Players movement Along the field in Quater -4\")\nfig.tight_layout()\nplt.show()","371fd601":"fig, ax = create_football_field()\ntemp_df=df.loc[df[\"Quarter\"]==5]\ntemp_df=temp_df[['X','Y']]\n\nplt.hist2d(temp_df[\"X\"],temp_df[\"Y\"])\nplt.colorbar()\nplt.title(\"Players movement Along the field in Quater -5\")\nfig.tight_layout()\nplt.show()","01b16af1":"temp=df.loc[df[\"HomeTeamAbbr\"]==df[\"PossessionTeam\"]]\nBall_Possession=pd.DataFrame()\nBall_Possession[\"Team\"]=[\"Home\",\"Away\"]\nBall_Possession['Percent']=[len(temp)\/len(df)*100,(100-len(temp)\/len(df)*100)]\n\nimport plotly.offline as pyo\n#py.init_notebook_mode(connected=True)\nfig = go.Figure(data=[go.Pie(labels=Ball_Possession[\"Team\"], values=Ball_Possession['Percent'],hole=0.2)])\nfig.show()","b107c2af":"temp_df=df.loc[df[\"NflIdRusher\"] == df[\"NflId\"]]\nfig = px.scatter(temp_df, x=\"S\", y=\"A\")\nfig.update_layout(title=\"Speed VS Yards\")\nfig.show()","266404b3":"#fig, ax = create_football_field()\ntemp_df=df.loc[df[\"NflIdRusher\"] == df[\"NflId\"]]\nfig=px.scatter(temp_df, x=\"S\", y=\"Yards\")\nfig.update_layout(title=\"Speed VS Yards\")\nfig.show()","43f7f585":"test_df.StadiumType=test_df.StadiumType.map(Type_map)","f2a9e499":"test_df.Turf=test_df.Turf.map(Turf_map)","9af847fd":"WindMap={'SW':\"SW\", 'NNE':\"NE\", 'SE':\"SE\",'East':\"E\", np.nan:np.nan, 'NE':\"NE\", 'North':\"N\", 'S':\"S\", 'Northwest':\"NW\",\n       'SouthWest':\"SW\", 'ENE':\"NE\", 'ESE':\"SE\", 'SSW':\"SW\", 'NW':\"NW\", 'Northeast':\"NE\", 'From S':\"S\", 'W':\"W\",\n       'South':\"S\", 'West-Southwest':\"SW\", 'E':\"E\", '13':'13','N':\"N\", 'NNW':\"NW\",\n       'South Southeast':\"SE\", 'SSE':\"SE\", 'West':\"W\", 'WSW':\"SW\", 'From SW':\"SW\", 'WNW':\"NW\", 's':\"S\",\n       'NorthEast':\"NE\", 'from W':\"W\", 'W-NW':\"NW\", 'South Southwest':\"SW\", 'Southeast':\"SE\",\n       'From WSW':\"SW\", 'West Northwest':\"NW\", 'Calm':\"Calm\", 'From SSE':\"SE\", 'From W':\"W\",\n       'East North East':\"NE\", 'From ESE':\"SE\", 'EAST':\"E\", 'East Southeast':\"SE\",\n       'From SSW':\"SW\", '8':\"8\", 'North East':\"NE\", 'Southwest':\"SW\", 'North\/Northwest':\"NW\",\n       'From NNE':\"NE\", '1':\"NE\", 'N-NE':\"NE\", 'W-SW':\"SW\", 'From NNW':\"NW\"}","8fa330e4":"df.WindDirection=df.WindDirection.map(WindMap)\ntest_df.WindDirection=test_df.WindDirection.map(WindMap)","062e3596":"#from operator import add\n#foot=[int(ht[0]) for ht in test_df.PlayerHeight.str.split('-')]\n#inches=[int(ht[1]) for ht in test_df.PlayerHeight.str.split('-')]\n#height=list(map(add,[x*30.48 for x in foot],[x*2.54 for x in inches]))\n#test_df.PlayerHeight=height","dee352e4":"Location=[]\nfor i in test_df.Location:\n    try:\n        Location.append(i.split(',')[0])\n    except:\n         Location.append(i.split(' '))[0]\ntest_df['Location']=Location\ntest_df['State']=df['Location'].map(state_dictionary)","8704ac4a":"df['StadiumType']=df.groupby('HomeTeamAbbr')['StadiumType'].transform(lambda x: (x.fillna(x.mode())))","762fca45":"df['WindSpeed']=df.groupby(['Week','GameId'])['WindSpeed'].transform(lambda x: x.fillna(x.mode()))\ndf['WindDirection']=df.groupby(['Week','GameId'])['WindDirection'].transform(lambda x: x.fillna(x.mode()))","ec5fe5bb":"#cols=df.columns\n#num_cols = df._get_numeric_data().columns\n#cat_cols=list(set(cols) - set(num_cols))","e74cba73":"#df._get_numeric_data().columns","16e192d4":"#cat_cols","ccbbfa00":"#for i in cat_cols:\n#    df[i]=LabelEncoder().fit_transform(df[i].astype(str)) \n#    test_df[i]=LabelEncoder().fit_transform(test_df[i].astype(str)) ","97e301a6":"cols=df.columns\nnum_cols = df._get_numeric_data().columns\ncat_cols=list(set(cols) - set(num_cols))","2470aa52":"cat_cols","eedb9cc2":"df.Yards.unique()","ff52eda9":"#y_train = df.loc[range(0, 509762, 22), \"Yards\"]","9bb49708":"#y_train.head(100)","949bc59c":"#y_train = np.zeros(shape=(df.shape[0], 199))\n#for i,yard in enumerate(df['Yards'][::22]):\n#    y_train[i, yard+99:] = np.ones(shape=(1, 100-yard))\n","0cc0cbde":"#y_train_ = np.array([df[\"Yards\"][i] for i in range(0,509762,22)])\n#data = [0 for i in range(199)]\n#for y in y_train_:\n#    data[int(y+99)]+=1\n#plt.plot([i-99 for i in range(199)],data)","5d369d8d":"**Player weight's Distribution across NFL**","a1c6916b":"**Weather of the game over the week's in NFL**","0a62a925":"Please **upvote ** the kernel if you find it useful","0ddfac78":"**Quater 2**","67b5d909":"## Missing value imputation","5dfc4da7":"**Direction of the wind**\n\nWhich can genrally be the 8 different but those have given in different formats which will be generalized over here\n","5318b2c2":"**WindSpeed** and **WindDirection** can be filled using Location, Time, Weather and weak of the play","2a304049":"**Objective the Competition**\n\nIn the National Football League (NFL), roughly a third of teams\u2019 offensive yardage comes from run plays. A running play or rushing play is a tactic in which the football is advanced up the field by a player running it rather than passing it. Competition is to develop a model to predict how many yards a team will gain on given rushing plays as they happen. We are given the data when the ball is handed off (TimeHandoff) to forecast the yardage gained on that play.","b59439d8":"## Speed Vs Acceleration\n\n- Speed is the **distance covered** in a unit of time while acceleration is the **rate of change of speed**","036eb36f":"## Feature Generalization","07c6cef1":"## **Player's movement along the field Home vs Away**","10c08fba":"**Wind Direction Vs Wind Speed on season 2017**","8401809f":"**Stadium** based on Location\n","aad1f6fe":"## **Content**\n\n* [**About the Competition**](#1)\n    * Objective of the Competition\n    * About the kernel\n    * Key TakeAways\n* [**Importing the necessary Packages**](#2)\n* [**Initial Data preparation**](#3)\n* [**Exploratory Data Analysis**](#4)\n    * Stadium and Match Analysis\n    * Player Analysis\n    * Objective Anaysis\n* [**Feature Engineering**](#5)\n    * Feature Generalization\n    * Feature Creation  \n    * Missing Value Imputation\n    * Label Encoding\n* [**What are we predicting?**](#6)\n    * Detailed Explanation\n    * How cummulative distribution works?\n   \n\n \n\n","8a71f40f":"**Observations**\n\nFrom this we can clearly see that **California** has the maximum number of teams in **NFL**\n","07f7cf52":"**StadiumType** It can be filled using the Home Team Info","60859dde":"## Exploratory Data Analysis <a id=\"4\"><\/a>","c4ca119b":"**About this kernel**\n\nThis kernel will acts as a guide covering the A-Z topics on this data \n\nIf you don't know how the American football works I would highly recommend you to visit this [discussion](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/111945#latest-651107)","e119763b":"## About the Competition <a id=\"1\"><\/a>\n\n![Alt_Text](https:\/\/media.giphy.com\/media\/Qe6qalKCHM5Da\/giphy.gif)\n\n\n\n\nThe dataset of the competition contains Next Gen Stats tracking data for running plays we will predict how many yards a team will gain on a rushing play in an NFL regular season game.We have to loop through a series of rushing plays; for each play, you'll receive the position, velocity, orientation, and more for all 22 players on the field at the moment of handing the ball off to the rusher, along with many other features such as teams, stadium, weather conditions, etc.We'll have to use this information to predict how many yards the team will gain on the play as a cumulative probability distribution. Once we make that prediction, we can move on to the next rushing play.","14aef40c":"**Different Types of Stadium present in the NFL **","e92a0967":"We can clearly see there are few missing values present in the data we'll try to explore the data try find if there are any relation to impute the missing data","6c24c2fb":"## Initial Data Preparation <a id=\"3\"><\/a>","8f9725ac":"**Home Team**","000b0c55":"## **Modelling**","e6ce057a":"**The plots made are interactive one's feel free to hover over**","2248db32":"**Different types of turfs in Different types of Stadium**","4e998358":"**Quater 1**","72927521":"## **Player's movement along the field in Quaterwise**","d628b55f":"**Key Takeaway's**\n\n* Extensive EDA\n* Understanding the nature of NFL\n* Effective Story Telling\n* Creative Feature Engineering\n* Modelling\n* Ensembling","0493866e":"## Stadium and Matches Analysis","decf2f2b":"**Player's Position Analysis**","6a367f86":"## Feature Engineering <a id=\"5\"><\/a>","b56c8e64":"**Matches Weekly basis**","308021c2":"**Reading the test data**","2d24e824":"Since player's participating in a sport tend to be in a particular Figure and since the data is very huge we'll take data for particular team and find the distribtuion since it might represent whole set of NFL players","e26dccfc":"**Wind Direction VS Wind Speed on season 2018**","d334e645":"**Data available based on season**","82feb187":"**Quater 5**","22bb7087":"**Location** provided contains City as well as State of the city so I am trying to seperate those city and state into two columns ","0419f5ee":"**State and City** are given as a single variable so I'm splitting into two variables","88ced036":"**Observations:**\n\n* Minimum Number of Matches conducted in a week is 26 and in week 9\n\n* Maximum Number of Matches conducted in a week is 32 and in week 2 and 13-16","ce4d3aff":"**Quater 3**","e0f56698":"**Players from Most College**","96c6d387":"## Importing the necessary Packages <a id=\"2\"><\/a>","4f616b62":"**Player Position and Meaning**\n\n**WR** -A **wide receiver**, also referred to as wideouts or simply receivers, is an offensive position in American and Canadian football, and is a **key player**.\n\n**CB**-A **cornerback**, also referred to as a corner or defensive halfback in older parlance, is a member of the defensive backfield or secondary in American and Canadian football.\n\n![image.png](attachment:image.png)\n\n\nSource:[Wikipedia](https:\/\/en.wikipedia.org\/wiki\/American_football_positions)\n\nTo have a more clear understanding please visit the source","0754f5ba":"**How Cummulative distribution works??**\n\nYou might arrive at a question why from 7 that's what **cummulative distribution** is about!!\n\nCumulative distribution functions describe real random variables. Suppose that X is a random variable that takes as its values real numbers. Then the cumulative distribution function F for X is the function whose value at a real number x is the probability that X takes on a value less than or equal to x.\n\n\n**F(x)=P(X\u2264x)**\n\n\nEach c.d.f. F has the following four properties:\n\n1. F is a nondecreasing function.\n2. F is right continuous.\n3. limx\u2192\u221eF(x)=1.\n4. limx\u2192\u2212\u221eF(x)=0.","f786e704":"The observation's and the plots made above are general. Now, let's get into the analysis of the **Objective** of the Competition","9693be73":"**This kernel is not completed yet stay tuned for updates**","8bfd7ebf":"## **Player's Analysis**","d3ff6a50":"**StadiumType**\n\nStadiumType which is usually about whether the stadium is **indoor** or **outdoor**\n\nThe stadium Type provided contains names in different formats all of them had been generalised into a common format in the EDA section above","96b421a6":"**Observations**\n\n* Players movements in **Quaters 1,3,4** are almost same\n\n* Players movements in **Quater 2** is little low\n \n* Players movements in **Quater 5** is very low ---> Over Time","067912a1":" **Detailed Explanation**\n \n**Short answer**: the number of yards gained or lost on every play.\n\n**Long answer**: every 22 lines in the train data stand for one play.\nthe format of the submission is a little different than just the number of yards,\nfor every possible outcome of the play - you need to provide the probability of this outcome.\n\nThe value for Yards-2 should be your prediction for the probability that the team gains at most -2 yards, and Yard10 is the probability that the team gains at most 10 yards. Theoretically, Yards99 should equal 1.0.\n\n**For example**: if your model is 100% sure that 7 or less yards will be gained in this play - than the prediction should look like this:\n\n![image.png](attachment:image.png)\n\n\nAnswer was referred from the this [disscussion ](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112375#latest-647367)","44c538df":"## What are we predicting? <a id=\"6\"><\/a>\n\n\n","b70589a7":"## Feature Creation","3f7257ac":"**Matches Distribution on Stadium Types on Weekly Basis**","da3803e0":"**Away Team**","77b6c3f1":"**Height Distribution across NFL Players**","2da82e9f":"## Label Encoding","2f48ba8f":"**Finding the number of teams from Each state**","736ee57e":"**Heigth**\n\nConverting feet to cm","5cb45591":"To create the visulaization of the NFL ground this amazing [kernel](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position) has been refernced","dfa9102e":"**Turf**\n\nTurf here represents the nature of the field wether the stadium has grass or natural field which is again been represented in different formats and has been normalized","cb0f2cde":"**Quater 4**","cdf0a809":"For our convenience we'll convert the height into centimeter's","cb986abf":"**Observation**\n\nHome Team is dominating on comparing the plots","9a89c858":"## Speed Vs Yards","39dd4ea9":"## Ball Possesion **Home Vs Away**"}}