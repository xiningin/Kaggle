{"cell_type":{"af898999":"code","0bcfba6f":"code","6150e3e3":"code","7fdc83cf":"code","24a16206":"code","1f54f789":"code","a3ffbc9c":"code","a7b2d910":"code","d6c272c9":"code","63a9cebd":"code","26746eb3":"code","1c5d94f9":"code","edc3e68e":"code","1100b085":"code","365edf6a":"code","8479d9d8":"markdown","cdc546e4":"markdown","d58620c8":"markdown","7e471752":"markdown"},"source":{"af898999":"import gc\nimport numpy as np\nimport pandas as pd\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import probplot\nfrom fbprophet import Prophet\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0bcfba6f":"column_types = {\n    'store':'int8',\n    'item':'int8',\n    'sales':'float64',\n}\ntrain = pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/train.csv',dtype=column_types,parse_dates=['date'])\ntest = pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/test.csv',dtype=column_types,parse_dates=['date'])\nsubmission = pd.read_csv('\/kaggle\/input\/demand-forecasting-kernels-only\/sample_submission.csv')","6150e3e3":"train.info()","7fdc83cf":"test.info()","24a16206":"print('Train from {%s} to {%s}' % (train.date.min(),train.date.max()))\nprint('Test from {%s} to {%s}' % (test.date.min(),test.date.max()))","1f54f789":"pre_skew = train['sales'].skew()\npre_kurt = train['sales'].kurt()\n\ntrain['sales'] = np.log1p(train['sales'])\n\nprint('Training Set Sales Skew from {%f} downto {%f}' % (pre_skew,train['sales'].skew()))\nprint('Training Set Sales Kurtosis from {%f} downto {%f}' % (pre_kurt,train['sales'].kurt()))","a3ffbc9c":"rcParams['figure.figsize'] = 10, 5\ntrain_ph = train[train.store==1][train.item==1][['date','sales']].copy().rename(index=str, columns={\"date\": \"ds\", \"sales\": \"y\"})\nph = Prophet()\nph.fit(train_ph)\nforecast = ph.predict(train_ph[['ds']])\nfigure = ph.plot(forecast)\nfigure.show()","a7b2d910":"y = []\ny_hat_ph = []\nmodels = {}\nfor k,si in train.groupby(['store','item']):\n    print(k,si.sales.min(),si.sales.max())\n    _si = si[['date','sales']]\n    _si = _si.rename(index=str, columns={'date':'ds','sales':'y'})\n#     y+=(_si.y.tolist())\n    model = Prophet()\n    model.fit(_si)\n#     y_hat_ph+=(ph.predict(_si[['ds']]).yhat.tolist())\n    models[str(si.store.iloc[0])+'_'+str(si.item.iloc[0])] = model","d6c272c9":"# rcParams['figure.figsize'] = 20, 5\n# plt.plot(y[:200])\n# plt.plot(y_hat_ph[:200])\n# plt.show()","63a9cebd":"# rmse = np.sqrt(mean_squared_error(y, y_hat_ph))\n# print(\"The root mean squared error with prophet between y and y_hat_ph is {%f}.\" % rmse)","26746eb3":"# 31+28+31=90\n# future = m.make_future_dataframe(periods=90, freq='D')\n\nfuture_data = models[str(1)+'_'+str(1)].make_future_dataframe(periods=90, freq='D')\n\n# for....\nforecast_data = models[str(1)+'_'+str(1)].predict(future_data)\nforecast_data.iloc[-(365*2+90):].yhat.plot()","1c5d94f9":"forecast_data.iloc[-10:]","edc3e68e":"forecast_datas = pd.DataFrame({'ds':[],'store':[],'item':[],'yhat':[]})\nfor k,si in train.groupby(['store','item']):\n    print(k)\n    forecast_data = models[str(si.store.iloc[0])+'_'+str(si.item.iloc[0])].predict(future_data)\n    forecast_data['store'] = si.store.iloc[0]\n    forecast_data['item'] = si.item.iloc[0]\n    forecast_datas = forecast_datas.append(forecast_data.iloc[-90:][['ds','store','item','yhat']],ignore_index=True)\nforecast_datas.info()","1100b085":"forecast_datas.rename(columns={'ds':'date'}, inplace = True)\ntest = test.merge(forecast_datas, on=['store','item','date'], how='left')\nsubmission = submission.merge(test[['id','yhat']], on=['id'], how='left')\nsubmission = submission.drop(['sales'], axis=1)\nsubmission.rename(columns={'yhat':'sales'}, inplace=True)\nsubmission.sales =  submission.sales.apply(np.expm1)\nsubmission = submission.sort_values(by='id')\nsubmission.head(10)","365edf6a":"submission.to_csv('submission.csv', index=None)","8479d9d8":"## PREPROCESS\n\nLog1p Transform for sales.\n\n\n- all_data['SalePrice'] = np.log1p(all_data['SalePrice'])\n- predictions[name] = np.expm1(model.predict(train_x))","cdc546e4":"### Prophet\n\nonly item==1&store==1.\n\nhttps:\/\/blog.csdn.net\/anshuai_aw1\/article\/details\/83412058","d58620c8":"### Build Submission File","7e471752":"## Summary\n\nThe end."}}