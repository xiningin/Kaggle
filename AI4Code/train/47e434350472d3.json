{"cell_type":{"bf199c6d":"code","68d18b55":"code","08c772c5":"code","9c1ac823":"code","5556f504":"code","17e7a3ea":"code","3fbb164b":"code","f3eed780":"code","b2640bba":"code","0cc8381a":"code","a080ffd9":"code","c37399bf":"code","64bac9f2":"code","a88b047e":"code","115f3818":"code","0799c711":"code","b1733f5a":"code","6312eb23":"code","aaff6d7f":"code","100fe201":"code","1d6a5208":"markdown","4a3ba18a":"markdown","2b59e9e0":"markdown","1d751f85":"markdown","e22cdcce":"markdown","9a65d451":"markdown","cf04eff8":"markdown","8361b25c":"markdown","9aa11293":"markdown","b1d9ba9e":"markdown","a3d84329":"markdown","06eb6f4c":"markdown","495eabf8":"markdown","6404b3ad":"markdown","f3d7a8cf":"markdown","19680144":"markdown","bb0191cb":"markdown","1bd6d5a8":"markdown","06632744":"markdown","766f105c":"markdown","8c340f39":"markdown","10e02a8d":"markdown","4e57c575":"markdown","66295c4a":"markdown","2763210c":"markdown","cd1dbce2":"markdown"},"source":{"bf199c6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68d18b55":"import numpy as np \nimport pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\ndf = df.drop(columns=['id'])\nprint(df)","08c772c5":"print(len(df.columns))","9c1ac823":"print(df.shape[0])","5556f504":"df.date = df.date.str.replace('T000000', '')\ndf.date = pd.to_datetime(df.date, format='%Y%m%d')\nprint(df)","17e7a3ea":"df.loc[df['yr_renovated'] == 0, 'yr_renovated'] = df['yr_built']\nprint(df)","3fbb164b":"print(df.drop(columns=['date']).mean())","f3eed780":"print(df.drop(columns=['date']).median())","b2640bba":"df.drop(columns=['date']).mode().iloc[0]","0cc8381a":"df.plot.scatter(x = 'sqft_living', y = 'price', s = 0.1, title = 'My First Graph lol') ","a080ffd9":"df.plot.scatter(x = 'sqft_lot', y = 'price', s = 0.1) ","c37399bf":"df['rooms'] = df['bathrooms'] + df['bedrooms']\nprint(df['rooms'].mean())","64bac9f2":"df.boxplot(column=['bedrooms', 'bathrooms', 'floors', 'condition', 'view', 'waterfront']) ","a88b047e":"df_picky = df.loc[ ((df['bedrooms'] >= 3) & (df['bedrooms'] <= 5)) & \n              (df['bathrooms'] >= 2) & \n              (df['condition'] >= 3) & \n              ((df['sqft_living'] >= 2000) & (df['sqft_living'] <= 3000)) &\n              (df['price'] < 600000) &\n              (df['yr_built'] > 1960) ]\nprint(df_picky)","115f3818":"print(df_picky.shape[0])","0799c711":"df_picky['price'].min()","b1733f5a":"#Theres more than one hose with the largest lot\nprint(df.loc[df['sqft_lot'] == df_picky['sqft_lot'].max()].price.mean())","6312eb23":"df_picky.hist(column= 'price', bins = 40)","aaff6d7f":"df_picky.plot.scatter(x = 'sqft_living', y = 'price', s = 0.1) ","100fe201":"df_picky_zipcodes = df_picky.loc[ (df_picky['zipcode'] == 98118) | (df_picky['zipcode'] == 98108)]\ndf_picky_zipcodes.plot(x = 'date', y = 'price')","1d6a5208":"### Your answer.","4a3ba18a":"How many houses in the database meet these requirements?","2b59e9e0":"Show the mode average of all columns (minus the date column). Mode produces a new pandas dataframe. Display only the first row of this dataframe.","1d751f85":"Grab the housesalesprediction file.\nRemove the ID variable.\nDisplay the DF.","e22cdcce":"What is price of the house with the largest lot?","9a65d451":"*** The Square living space is a better indicator*** ","cf04eff8":"How many remaining variables are there?","8361b25c":"Create a new column, 'rooms', which is the combination of both bedrooms and bathrooms.\nMake a scatter plot of the rooms (x) and price (y).","9aa11293":"Your friend has narrowed their choice down to only houses in the zip codes of 98118 or 98108, both of which are near their work.\n\nCreate a new dataframe with only these houses, then create a plot (not a scatter, a regular plot) with the x values as the date and the y values as the price.","b1d9ba9e":"Which of the two variables seems to be a better predictor of price? No code, just answer below.","a3d84329":"What is the lowest priced house?","06eb6f4c":"There are some houses that are -very- likely bad data. Use some code, common sense, and your judgment to find at least 3 houses with likely bad data. Explain why they are likely bad data.\n\nOne of these three should be relatively obvious from the last few graphs. Remove that one house from the data then re-run your boxplot.","495eabf8":"Create a scatter plot with the x axis as the living square foot and the y axis as the price. Add the parameter s = 0.1 to make the size of the plotted points smaller.","6404b3ad":"Make the date column turn into actual dates. Then sort the DF by date.\n  \n1) Replace the 'T000000' with ''\n  \n2) There is a pandas method, pd.to_datetime, that can be applied to a particular column. If you add in the format parameter to this method you can specify how your current String is set and it will convert your String to a datetime. Format codes can be found here: https:\/\/docs.python.org\/3\/library\/datetime.html#strftime-and-strptime-format-codes.  Example: pd.to_datetime( df.columnA, format='%m%d%y' ) would work on all Strings with 030588 format to turn them into the correct March 5, 1988 format.\n\nDisplay the DF.","f3d7a8cf":"### Your answer.","19680144":"**Certain outliers exist such as the house with lots of bedrooms, areas with a high cost of living (low sqft with high price), and poorer neighborhoods**","bb0191cb":"Show the median average of all columns (minus the date column).","1bd6d5a8":"Create a scatter plot for the living square feet versus the price. Use s as 0.1 again.","06632744":"Zeroes in the yr_renovated column represent there is no data about when the house was last renovated. Update all 0s in the column to match the yr_built value instead, but keep all non-0s as they were. Display the DF.","766f105c":"You have been tasked with helping a friend find a house. They want a house with 3-5 bedrooms, 2 or more bathrooms, in good condition (3+), and between 2000 and 3000 square feet (all number inclusive). They have an upper price limit of $600k. They are also afraid of older houses and refuse to look at any house built before 1990.\n\nCreate a new df which only has houses that meet this requirements.","8c340f39":"### Your answer.","10e02a8d":"Create a scatter plot with the x axis as the square foot of the lot and the y axis as the price. Add the parameter s = 0.1 to make the size of the plotted points smaller.","4e57c575":"How many houses are tracked in the data?","66295c4a":"Create a histogram of the prices in the new dataframe. Use 40 bins.","2763210c":"Show the mean average of all columns (minus the date column).","cd1dbce2":"Create a box plot that includes the bedrooms, bathrooms, floors, condition, view, and waterfront all on the same plot."}}