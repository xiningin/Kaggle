{"cell_type":{"390668eb":"code","ad560155":"code","94a4d65b":"code","470d125a":"code","bb6b03ee":"code","48f46cf5":"code","67d0c5c3":"code","0bc3de8a":"code","2edc7400":"code","faac7919":"code","6b580e57":"markdown","b35a0004":"markdown","cfb88e73":"markdown"},"source":{"390668eb":"pip install MoviePy","ad560155":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94a4d65b":"import moviepy.editor as moviepy\nclip = moviepy.VideoFileClip(\"\/kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_6__anandaliyanage__5tw2pojykz8.avi\")\nclip.write_videofile(\"\/kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_6__anandaliyanage__5tw2pojykz8.mp4\")","470d125a":" %matplotlib inline","bb6b03ee":"from IPython.display import Video\n\nVideo(\"\/kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_6__anandaliyanage__5tw2pojykz8.avi\")","48f46cf5":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# read video\ncap = cv2.VideoCapture('\/kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_6__anandaliyanage__5tw2pojykz8.avi')\n\nret, frame = cap.read()    \nplt.figure()\nplt.imshow(frame)","67d0c5c3":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# read video\ncap = cv2.VideoCapture('\/kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/stadium_crowds__Maracana_Football_Crowd_Atmosphere__thetravelmap__xfi3rvFKIPU.avi')\n\nret, frame = cap.read()    \nplt.figure()\nplt.imshow(frame)","0bc3de8a":"import cv2\nimport numpy as np\n\n# Create a VideoCapture object and read from input file\n# If the input is the camera, pass 0 instead of the video file name\ncap = cv2.VideoCapture('kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_6__anandaliyanage__5tw2pojykz8.avi')\n\n\n# Check if camera opened successfully\nif (cap.isOpened()== False): \n  print(\"Error opening video stream or file\")\n \n# Read until video is completed\nwhile(cap.isOpened()):\n  # Capture frame-by-frame\n  ret, frame = cap.read()\n  if ret == True:\n \n    # Display the resulting frame\n    cv2.imshow('Frame',frame)\n \n    # Press Q on keyboard to  exit\n    if cv2.waitKey(25) & 0xFF == ord('q'):\n      break\n \n  # Break the loop\n  else: \n    break\n \n# When everything done, release the video capture object\ncap.release()\n \n# Closes all the frames\ncv2.destroyAllWindows()","2edc7400":"#include \"opencv2\/opencv.hpp\"\n#include <iostream>\n\nusing namespace std;\nusing namespace cv;\n \nint main(){\n \n  \/\/ Create a VideoCapture object and open the input file\n  \/\/ If the input is the web camera, pass 0 instead of the video file name\n  VideoCapture cap(\"kaggle\/input\/moviesviolencenonviolence\/movies\/NonViolence\/football_crowds__Giants_of_Brazil_5_of_.avi\"); \n    \n  \/\/ Check if camera opened successfully\n  if(!cap.isOpened()){\n    cout << \"Error opening video stream or file\" << endl;\n    return -1;\n  }\n     \n  while(1){\n \n    Mat frame;\n    \/\/ Capture frame-by-frame\n    cap >> frame;\n  \n    \/\/ If the frame is empty, break immediately\n    if (frame.empty())\n      break;\n \n    \/\/ Display the resulting frame\n    imshow( \"Frame\", frame );\n \n    \/\/ Press  ESC on keyboard to exit\n    char c=(char)waitKey(25);\n    if(c==27)\n      break;\n  }\n  \n  \/\/ When everything done, release the video capture object\n  cap.release();\n \n  \/\/ Closes all the frames\n  destroyAllWindows();\n     \n  return 0;\n}","faac7919":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#a83a32','#a8324e','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh! @mpwolke' )","6b580e57":"#I hope someone make a Notebook, so that I could learn how to work with .avi files ","b35a0004":"#Trying another way. It didn't work too.","cfb88e73":"#No Movie. No .avi file"}}