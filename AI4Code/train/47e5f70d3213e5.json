{"cell_type":{"672ce676":"code","364c05c4":"code","2983dcc0":"code","0af91bfc":"code","db6ec3e3":"code","91431bf1":"code","9a4f7b9d":"code","27a4cd6a":"code","61d25d79":"code","b4684413":"code","0179bb30":"code","b4fcae7d":"code","ec93d72c":"code","3f7f7e05":"code","a20e696b":"code","f68e26bd":"code","5053febc":"code","d62d5a2f":"code","7c81baff":"code","3508a2ae":"code","a0ba9ffe":"code","bbcdf0fd":"code","5ce73373":"code","aeff2025":"code","9deb0299":"code","40248547":"code","68f8fde7":"code","2323c144":"code","7ec7c801":"code","6d8c489b":"code","2dc1cd12":"code","c4e592c6":"code","4305db99":"code","2f472fbf":"code","19c82b1f":"code","b3fc7167":"code","7839d2fe":"code","fd211114":"code","575f0269":"code","bc9fbfcb":"code","4a0e562d":"code","5bef27f6":"code","d53f475b":"code","1cedc206":"code","f8b9a338":"code","73b4c840":"code","76ca256a":"code","25e7231e":"code","9108a952":"code","87ad52ab":"code","0718ac6f":"code","bf0aa96b":"code","96fcc558":"code","11fe6df5":"code","57e77f32":"code","74c9606e":"code","765c7afd":"code","16e8e8af":"code","393a65c8":"code","6ea31fe5":"code","1b13c81a":"code","3a434fef":"code","94bb8446":"code","59df1d5e":"code","be271f4b":"code","b10bd9f2":"markdown","2897e263":"markdown","58f67012":"markdown","1fbeb2c4":"markdown","7a9dfeb6":"markdown","85d569ad":"markdown","03404721":"markdown","2ac30105":"markdown"},"source":{"672ce676":"#lets create an empty list\nnames = []\ntype(names)","364c05c4":"#lets create a list with items\nprg_lst = ['Python', 'Java','C++','Kotlin','C','Ruby','Swift','Pascal']\nprg_lst","2983dcc0":"#Accessing the list items by its index\nprg_lst[3]","0af91bfc":"prg_lst[-3]","db6ec3e3":"#access mutliple items from index 3 to 7\nprg_lst[3:8]","91431bf1":"prg_lst[3:]","9a4f7b9d":"prg_lst[:7]","27a4cd6a":"#Updating the list items\nstock_lst = ['HP','GOOG','TSLA','MSFT','AAPL','AMZN','NFLX']\nstock_lst","61d25d79":"#append(element): This method adds a single element to the end of the list. \nnames","b4684413":"names.append('Jagrit Gaur')","0179bb30":"names.append('Adithya Bhushan')\nnames","b4fcae7d":"name_list = ['Aditya Gupta','Aditya Sankrityayan','Adithya Singh']\nnames.append(name_list)\nnames","ec93d72c":"#extend(list2):L it adds the element in list2 to the end of the list \nnew_lst = ['Alisha Lohia','Amey Thakur','Amit']\nname_list.extend(new_lst)","3f7f7e05":"name_list","a20e696b":"#innsert(index, element): It inserts an item at a given index\nstock_lst.insert(1, \"GE\")\nstock_lst","f68e26bd":"#remove(element): This removes the item whose value is element provided in an argument\nstock_lst.remove('GE')\nstock_lst","5053febc":"#pop(): This function removes and returns the last item in the list\nstock_lst.pop()","d62d5a2f":"#pop(index)\nstock_lst.pop(3)","7c81baff":"#index(element): Returns the index of the first item whose value is provided in an argument\nstock_lst.index('GOOG')","3508a2ae":"stock_lst.append(\"GOOG\")\nstock_lst.append(\"GOOG\")\nstock_lst.append(\"GOOG\")\nstock_lst.append(\"GOOG\")\nstock_lst.append(\"GOOG\")\nstock_lst.append(\"GOOG\")","a0ba9ffe":"stock_lst","bbcdf0fd":"#count(element): Returns the number of times element appears in the list\nstock_lst.count('GOOG')","5ce73373":"#sort(): This will return the sorted list\nstock_lst.sort()","aeff2025":"stock_lst","9deb0299":"new_lst = ['A',23, 78.90, 78>98]\nnew_lst","40248547":"#Accepting the input from the user\nx = int(input('Enter first number'))\ny = int(input('Enter second number'))\n\nprint('Sum of {0} and {1} is {2} '.format(x,y,x+y))","68f8fde7":"#creating tuple\ntp1 = (1,2,3)\nprint(tp1, type(tp1))","2323c144":"#Tuples with heterogenous data\ntp2 = ('Nawaz','ML','DS',32, 67, 87, 76>35)\ntp2","7ec7c801":"#creating tuple without the braces\ntp3 = 90, 676, 'ABC',78.66\nprint(type(tp3))","6d8c489b":"#creating a tuple with repetitive elements  5 to be there in the tuple 7 times\ntp_r = (5,) * 7\ntp_r","2dc1cd12":"#Accessing tuple elements\ntp2[0]","c4e592c6":"len(tp3)","4305db99":"#tuple concatenation\nt1 = (1,2,3)\nt2 = 4,5","2f472fbf":"t1 += 4,5\nt1","19c82b1f":"t1 + t2","b3fc7167":"#Unpacking Tuples\nt3 = (5,6,7)\nx,y,z = t3","7839d2fe":"x","fd211114":"t3.index(6)","575f0269":"t4 = (7, )*8\nt4","bc9fbfcb":"t4.count(7)","4a0e562d":"#lets create a simple dictionary\ntickers = {}\ntype(tickers)","5bef27f6":"#now lets create a enpty dictionary using dict method\nnew_tick = dict()\ntype(new_tick)","d53f475b":"#lets create dictionaries with values\ntickers = {\n    'GOOG': 'Alphabet Inc',\n    'AAPL': 'Apple Inc',\n    'MSFT': 'Microsoft Corporation'\n}\ntickers","1cedc206":"#lets create dictionary with multiple data types\nticker = {\n    'symbol':'AAPL',\n    'price': 224.96,\n    'company': 'Apple Inc',\n    'founded': 1976,\n    'products': ['Machinstosh','iPad','iPod','iPhone']\n}\nticker","f8b9a338":"#lets create a nbested dictionary\ntick = {\n    'AAPL': {\n        'name': 'Apple Inc',\n        'price': 224.96\n    },\n    'GOOG': {\n        'name': 'Alphabet Inc',\n        'price': 1194.64\n    }\n}","73b4c840":"tick ","76ca256a":"#same keys\nsame_keys = {\n    'symbol': 'AAPL',\n    'symbol': 'GOOG'\n\n}\nsame_keys","25e7231e":"#Accessing the dictionary items\nticker","9108a952":"ticker['price']","87ad52ab":"ticker['products']","0718ac6f":"ticker['products'][1]","bf0aa96b":"#Lets update an new itme to the dictionary\nticker['founders'] = ['Steve Jobs','Steve Woznaik','Ronald Wayne']\nticker","96fcc558":"#deleting an item\ndel(ticker['founders'])\nticker","11fe6df5":"#lets find the length of the dictionary\nlen(ticker)","57e77f32":"#lets discuss some of the popular methods provided by dict class\n#items(): This method returns an object containing keys and values\nticker.items()","74c9606e":"#keys():This method returns all the keys of the calling dictionary\nticker.keys()","765c7afd":"#print all the values\nticker.values()","16e8e8af":"#pop(key): This method pops out the item whose key is given as an argument\ntickers.pop('GOOG') ","393a65c8":"#copy(): This method copies the calling dictionary to another dictionary\naapl = ticker.copy()\naapl","6ea31fe5":"#lets delete all the contents of the dictionary\naapl.clear()\naapl","1b13c81a":"#update(): This method allows to add new key-value pair from another dictionary\ntk1 = {'NFLX':'Netflix'}\ntk2 = {'AMZN': 'Amazon'}","3a434fef":"new_tk = {}","94bb8446":"new_tk.update(tk1)\nnew_tk","59df1d5e":"new_tk.update(tk2)\nnew_tk","be271f4b":"dik = {'ho': 'hoho', 'la': 'lala'}\nnew_tk.update(dik)","b10bd9f2":"**Task:**\n1. Create an empty list\n2. Add items to the list by user input, atleast 10\n3. Sort the given list\n4. Using extend method, add some more items to the list\n5. Using pop and pop(index) delete the last element and element in the index 6\n7. print back the list","2897e263":"**Advantages of using Tuples**\n\n1. They protect the data, as they are immutable\n2. Tuples are faster than lists\n3. They can be used as keys to the dictionary","58f67012":"**List Manipulation**","1fbeb2c4":"# **Day 2**\n\n**Containers**\n\nThese are the data structures that holds or contain data in them\n1. List\n2. Tuple \n3. Dictionary\n\n**List**\n\nA list is data structure that holds an collection of items, i.e. we can store a sequence of items in a list. Lists are created by placing all items in square brackets([]) seperated by comma.\n\nLists are mutable in nature.","7a9dfeb6":"**Dictionary**\n\nA dictionary is an unordered collection of items, which stores data in key value pair, seperated by comma and enclosed within curly brackets.\n\n**Note:** We can use only immutable objects like strings, or tuples for the keys of the dictionary, and keys shd be unique.","85d569ad":"**Tuple Methods**\n\nindex(element): This method returns the index of the element\n\ncount(): This method counts the number of occurences of the element.","03404721":"**Tuples**\n\nTuples are immutable data structures which contain heterogeneous sequence of elements seperated by commas. The elements of the list are accesed by indexing or unpacking","2ac30105":"**Dictionary Methods**"}}