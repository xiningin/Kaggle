{"cell_type":{"d2c80be2":"code","18f93604":"code","ec9fcf2c":"code","52f13f95":"code","4176ab1d":"code","4a2f9c0a":"code","09afe256":"code","ec19749f":"code","8a905d45":"code","e712eee4":"code","e97fc290":"code","6c7ec931":"code","d4d23ad8":"code","6825f6aa":"code","e32d5099":"code","3bce164b":"code","a0e29d88":"code","c4b78e23":"code","23152f96":"code","ad8835b3":"code","42a4c1ec":"code","64fa8a20":"code","e2866586":"code","cfaa2c77":"code","41b9e71d":"code","52a23201":"code","8fdc001b":"code","7ed0e635":"code","e5003a0a":"code","7dab4a84":"code","b0a6b373":"code","c17f7107":"code","4df804b9":"code","c77f4713":"code","dd2a750c":"code","410d08e2":"code","03d7fd0e":"code","290f8bd2":"code","7a4148b5":"code","f6251262":"code","4b920c8d":"code","d738ab4b":"code","4c35136a":"code","4e95bd21":"code","6b07bb06":"markdown","eccb2b13":"markdown","0ed8d8f2":"markdown","37afb5d0":"markdown","84d2a8ff":"markdown","08fe1eca":"markdown","3482c12d":"markdown","54582a11":"markdown"},"source":{"d2c80be2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","18f93604":"train_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","ec9fcf2c":"train_data.head(10)","52f13f95":"test_data.head(10)","4176ab1d":"train_data.info()","4a2f9c0a":"test_data.info()","09afe256":"print(train_data.shape)\nprint(test_data.shape)","ec19749f":"train_data.describe()","8a905d45":"pd.options.display.min_rows = 80\ntrain_data.isnull().sum().sort_values(ascending=False)","e712eee4":"train_data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence','GarageYrBlt'], axis = 1, inplace = True)\ntest_data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence','GarageYrBlt'], axis = 1, inplace = True)","e97fc290":"train_data['FireplaceQu'] = train_data['FireplaceQu'].fillna(train_data['FireplaceQu'].dropna().mode()[0])\ntrain_data['LotFrontage'] = train_data['LotFrontage'].fillna(train_data['LotFrontage'].dropna().mode()[0])\ntrain_data['GarageCond'] = train_data['GarageCond'].fillna(train_data['GarageCond'].dropna().mode()[0])\ntrain_data['GarageType'] = train_data['GarageType'].fillna(train_data['GarageType'].dropna().mode()[0])\ntrain_data['GarageFinish'] = train_data['GarageFinish'].fillna(train_data['GarageFinish'].dropna().mode()[0])\ntrain_data['GarageQual'] = train_data['GarageQual'].fillna(train_data['GarageQual'].dropna().mode()[0])\ntrain_data['BsmtFinType2'] = train_data['BsmtFinType2'].fillna(train_data['BsmtFinType2'].dropna().mode()[0])\ntrain_data['BsmtExposure'] = train_data['BsmtExposure'].fillna(train_data['BsmtExposure'].dropna().mode()[0])\ntrain_data['BsmtQual'] = train_data['BsmtQual'].fillna(train_data['BsmtQual'].dropna().mode()[0])\ntrain_data['BsmtCond'] = train_data['BsmtCond'].fillna(train_data['BsmtCond'].dropna().mode()[0])\ntrain_data['BsmtFinType1'] = train_data['BsmtFinType1'].fillna(train_data['BsmtFinType1'].dropna().mode()[0])\ntrain_data['MasVnrArea'] = train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].dropna().mode()[0])\ntrain_data['MasVnrType'] = train_data['MasVnrType'].fillna(train_data['MasVnrType'].dropna().mode()[0])\ntrain_data['Electrical'] = train_data['Electrical'].fillna(train_data['Electrical'].dropna().mode()[0])","6c7ec931":"train_data.isnull().sum().sort_values(ascending=False)","d4d23ad8":"test_data.isnull().sum().sort_values(ascending=False)","6825f6aa":"test_data['FireplaceQu'] = test_data['FireplaceQu'].fillna(test_data['FireplaceQu'].dropna().mode()[0])\ntest_data['LotFrontage'] = test_data['LotFrontage'].fillna(test_data['LotFrontage'].dropna().mode()[0])\ntest_data['GarageCond'] = test_data['GarageCond'].fillna(test_data['GarageCond'].dropna().mode()[0])\ntest_data['GarageType'] = test_data['GarageType'].fillna(test_data['GarageType'].dropna().mode()[0])\ntest_data['GarageFinish'] = test_data['GarageFinish'].fillna(test_data['GarageFinish'].dropna().mode()[0])\ntest_data['GarageQual'] = test_data['GarageQual'].fillna(test_data['GarageQual'].dropna().mode()[0])\ntest_data['BsmtFinType2'] = test_data['BsmtFinType2'].fillna(test_data['BsmtFinType2'].dropna().mode()[0])\ntest_data['BsmtExposure'] = test_data['BsmtExposure'].fillna(test_data['BsmtExposure'].dropna().mode()[0])\ntest_data['BsmtQual'] = test_data['BsmtQual'].fillna(test_data['BsmtQual'].dropna().mode()[0])\ntest_data['BsmtCond'] = test_data['BsmtCond'].fillna(test_data['BsmtCond'].dropna().mode()[0])\ntest_data['BsmtFinType1'] = test_data['BsmtFinType1'].fillna(test_data['BsmtFinType1'].dropna().mode()[0])\ntest_data['MasVnrArea'] = test_data['MasVnrArea'].fillna(test_data['MasVnrArea'].dropna().mode()[0])\ntest_data['MasVnrType'] = test_data['MasVnrType'].fillna(test_data['MasVnrType'].dropna().mode()[0])\ntest_data['MSZoning'] = test_data['MSZoning'].fillna(test_data['MSZoning'].dropna().mode()[0])\ntest_data['BsmtHalfBath'] = test_data['BsmtHalfBath'].fillna(test_data['BsmtHalfBath'].dropna().mode()[0])\ntest_data['Functional'] = test_data['Functional'].fillna(test_data['Functional'].dropna().mode()[0])\ntest_data['BsmtFullBath'] = test_data['BsmtFullBath'].fillna(test_data['BsmtFullBath'].dropna().mode()[0])\ntest_data['Utilities'] = test_data['Utilities'].fillna(test_data['Utilities'].dropna().mode()[0])\ntest_data['Exterior1st'] = test_data['Exterior1st'].fillna(test_data['Exterior1st'].dropna().mode()[0])\ntest_data['Exterior2nd'] = test_data['Exterior2nd'].fillna(test_data['Exterior2nd'].dropna().mode()[0])\ntest_data['KitchenQual'] = test_data['KitchenQual'].fillna(test_data['KitchenQual'].dropna().mode()[0])\ntest_data['SaleType'] = test_data['SaleType'].fillna(test_data['SaleType'].dropna().mode()[0])","e32d5099":"test_data['BsmtFinSF1'] = test_data['BsmtFinSF1'].fillna(test_data['BsmtFinSF1'].dropna().mean())\ntest_data['BsmtFinSF2'] = test_data['BsmtFinSF2'].fillna(test_data['BsmtFinSF2'].dropna().mean())\ntest_data['BsmtUnfSF'] = test_data['BsmtUnfSF'].fillna(test_data['BsmtUnfSF'].dropna().mean())\ntest_data['TotalBsmtSF'] = test_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].dropna().mean())\ntest_data['GarageCars'] = test_data['GarageCars'].fillna(test_data['GarageCars'].dropna().mean())\ntest_data['GarageArea'] = test_data['GarageArea'].fillna(test_data['GarageArea'].dropna().mean())","3bce164b":"test_data.isnull().sum().sort_values(ascending=False)","a0e29d88":"train_data.info()","c4b78e23":"test_data.info()","23152f96":"train_data.corr()","ad8835b3":"plt.figure(figsize=(35,15))\na = sns.heatmap(train_data.corr(), annot=True, fmt='.1f')\nsns.heatmap(train_data.corr())","42a4c1ec":"final_df = pd.concat([train_data,test_data],axis=0)\nfinal_df","64fa8a20":"def category(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","e2866586":"cat_feature = [feature for feature in train_data.columns if train_data[feature].dtype==\"O\"]\nlen(cat_feature)","cfaa2c77":"final_df = category(cat_feature)","41b9e71d":"final_df.shape","52a23201":"train_df = final_df.iloc[:1460,:]\ntest_df= final_df.iloc[1460:,:]","8fdc001b":"train_df","7ed0e635":"test_df","e5003a0a":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","7dab4a84":"tId = test_df[\"Id\"]","b0a6b373":"X_train=train_df.drop(['SalePrice'],axis=1)\nY_train=train_df['SalePrice']","c17f7107":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\ntest_df = sc.transform(test_df)","4df804b9":"X_train","c77f4713":"test_df","dd2a750c":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X_train,Y_train)","410d08e2":"reg.coef_","03d7fd0e":"reg.intercept_","290f8bd2":"reg.score(X_train,Y_train)","7a4148b5":"result = reg.predict(X_train)","f6251262":"tst_data = pd.DataFrame()\ntst_data['Actual Values'] = Y_train\ntst_data['Predicted_values'] = result\ntst_data","4b920c8d":"plt.figure(figsize = (6,4))\nplt.plot(Y_train, 'o', color = 'blue', label = 'Actual Values')\nplt.plot(result, color = 'green', label = 'Predicted Values')\nplt.legend()","d738ab4b":"Y_pred = reg.predict(test_df)","4c35136a":"lst = tId\nlst2 = list(Y_pred)\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['Id', 'SalePrice'])","4e95bd21":"df.to_csv('result.csv',index=False)","6b07bb06":"## Concatenating train and test data and doing one hot encoding for categorical data","eccb2b13":"## Final predictions","0ed8d8f2":"## Comparing the actual and predicted values from the data","37afb5d0":"## Exporting the data into a csv file","84d2a8ff":"## Using linear regression on the data\u00b6","08fe1eca":"## Dealing with null values in train and test data","3482c12d":"# ASSIGNMENT - 7.2\n# name -SAPNA KUMARI\n# reg no - AIRSS1103\n# college-HMR INSTITUTE OF TECHNOLOGY AND MANAGEMENT","54582a11":"## Scaling the data"}}