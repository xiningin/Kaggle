{"cell_type":{"f82cef3f":"code","48e0c7aa":"code","94da15ff":"code","183cb6e0":"code","4ceb4234":"code","2dc106ca":"code","9b24af66":"code","8cc3e22b":"code","c89416bf":"code","af8b860a":"code","432e8e65":"code","494d9b60":"code","691c3ab4":"code","dec0f2fe":"code","1ec35c67":"code","e95b244e":"code","149f2249":"code","8073b386":"code","b7818716":"code","cb8156b3":"code","b166b5be":"code","85503210":"code","9d4c0ea4":"code","34191ec4":"markdown","39bfda51":"markdown","95467214":"markdown","6a9f7497":"markdown","4e941df1":"markdown","731c6df2":"markdown","5162bcac":"markdown"},"source":{"f82cef3f":"import pandas as pd\nimport numpy as np\nimport gc\nimport lightgbm as lgbm\n\nfrom matplotlib import pyplot as plt \n\nfrom sklearn.metrics import mean_absolute_error\n\nfrom datetime import datetime, timedelta\nfrom tqdm.auto import tqdm","48e0c7aa":"df_train = pd.read_csv('..\/input\/mlb-player-digital-engagement-forecasting\/train_updated.csv')\nprint(df_train.shape)\ndf_train.head()","94da15ff":"df_train.info()","183cb6e0":"def json_to_df(df, column):\n    num_rows = len(df)\n    \n    data_list = []\n    for row in tqdm(range(num_rows)):\n        \n        json_data = df.iloc[row][column]\n        if str(json_data) != \"nan\":\n            data = pd.read_json(json_data)\n            data_list.append(data)\n        \n    all_data = pd.concat(data_list, axis = 0)\n    \n    return all_data","4ceb4234":"player_engagement = json_to_df(df_train, 'nextDayPlayerEngagement')\nplayer_engagement.insert(0, 'date', pd.to_datetime(player_engagement['engagementMetricsDate'])-\\\n                                                   timedelta(days=1))\nplayer_engagement['engagementMetricsDate'] = pd.to_datetime(player_engagement['engagementMetricsDate'])\nplayer_engagement.reset_index(drop=True, inplace=True)\nprint(player_engagement.shape)\nplayer_engagement.head()","2dc106ca":"player_engagement[['target1','target2','target3','target4']] = player_engagement[['target1','target2','target3','target4']].astype(np.float16)","9b24af66":"lag = 7\n\nlag_df = player_engagement.loc[player_engagement['date'] >= player_engagement.loc[0, 'date'] +\\\n                               timedelta(lag)]\n\nfor x in tqdm(range(1, (lag+1))):\n    drop_columns = [f'date_{x}', f'engagementMetricsDate_{x}']\n    lag_df = lag_df.merge(player_engagement, how='left', \n                          left_on=['date', 'playerId'],\n                          right_on=['engagementMetricsDate', 'playerId'],\n                          suffixes=['',f'_{x}'])\n    lag_df.drop(columns=drop_columns, inplace=True)\n    lag_df['date'] = lag_df['date'] - timedelta(days=1)\n    \nlag_df['date'] = lag_df['date'] + timedelta(days=lag)\nlag_df = lag_df.drop(columns=['engagementMetricsDate'])\nlag_df = lag_df.dropna()\nlag_df.head()","8cc3e22b":"feature_columns = [x for x in lag_df.columns[6:]]\nfeature_columns","c89416bf":"lag_df.info()","af8b860a":"lag_df = lag_df.sort_values(by=['date','playerId']).reset_index(drop=True)\nlag_df.head()","432e8e65":"for x in range(4):\n    columns = [f'target{x+1}_{i+1}' for i in range(lag)]\n    lag_df[f'target{x+1}_median'] = lag_df[columns].median(axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_mean'] = lag_df[columns].mean(axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_max'] = lag_df[columns].max(axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_min'] = lag_df[columns].min(axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_lower_quartile'] = lag_df[columns].quantile(0.25, axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_upper_quartile'] = lag_df[columns].quantile(0.75, axis=1).astype(np.float32)\n    lag_df[f'target{x+1}_skewness'] = lag_df[columns].skew(axis=1).astype(np.float32)\n    lag_df = lag_df.drop(columns=columns)","494d9b60":"lag_df.head()","691c3ab4":"lag_df.shape","dec0f2fe":"target_columns = [x for x in lag_df.columns[2:6]]\ntarget_columns","1ec35c67":"feature_columns = [x for x in lag_df.columns[6:]]\nfeature_columns","e95b244e":"def lgbm_fit(X_train, y_train, X_val, y_val, params):\n    model = lgbm.LGBMRegressor(**params)\n    model.fit(\n        X_train,\n        y_train,\n        eval_set=[(X_val, y_val)],\n        early_stopping_rounds=100, \n        verbose=100\n    )\n    \n    pred = model.predict(X_val)\n    \n    score = mean_absolute_error(pred, y_val)\n    \n    return model, score","149f2249":"# create training and validation dataset for training \ntrain_index = lag_df.loc[lag_df['date']<datetime(2021,5,1), feature_columns].index.to_numpy()\nval_index = lag_df.loc[lag_df['date']>=datetime(2021,5,1), feature_columns].index.to_numpy()\n\nX_train = lag_df.loc[train_index, feature_columns].to_numpy()\ny_train = lag_df.loc[train_index, target_columns]\n    \nX_val = lag_df.loc[val_index, feature_columns].to_numpy()\ny_val = lag_df.loc[val_index, target_columns]","8073b386":"params = {\n    'boosting_type': 'gbrt',\n    'objective':'mae',\n#     'subsample': 0.5,\n#     'subsample_freq': 1,\n    'learning_rate': 0.03,\n    'num_leaves': 2**11-1,\n    'min_data_in_leaf': 2**12-1,\n#     'feature_fraction': 0.5,\n    'max_bin': 200,\n    'n_estimators': 2500,\n#     'boost_from_average': False,\n    \"random_seed\":42,\n}\n\nlgbm_model1, score1 = lgbm_fit(X_train, y_train['target1'], X_val, y_val['target1'], params)\n\nlgbm_model2, score2 = lgbm_fit(X_train, y_train['target2'], X_val, y_val['target2'], params)\n\nlgbm_model3, score3 = lgbm_fit(X_train, y_train['target3'], X_val, y_val['target3'], params)\n\nlgbm_model4, score4 = lgbm_fit(X_train, y_train['target4'], X_val, y_val['target4'], params)\n\nscore = (score1+score2+score3+score4)\/4\nprint(f'Overall MAE Score:{score}')\n\n#0.7293","b7818716":"def plot_target_pred(playerId, model, target=1):\n    x1 = lag_df[lag_df['playerId'].isin([playerId])]\n    x2 = x1[x1['date']>=datetime(2021,5,1)]\n    \n    pred = model.predict(x2[feature_columns])\n    \n    plt.figure(figsize=(20,6))\n    plt.plot(x1['date'], x1[f'target{target}'])\n    plt.plot(x2['date'], pred)\n    plt.xlabel(f'date')\n    plt.ylabel(f'target')\n    plt.title(f'playerId {playerId}')\n    plt.legend([f'target{target}', 'pred'], loc='upper right')\n    plt.show()","cb8156b3":"# Plotting prediction result\n# for example, playerId = 593590\nplayerId = 593590\nplot_target_pred(playerId, lgbm_model1, target=1)\nplot_target_pred(playerId, lgbm_model2, target=2)\nplot_target_pred(playerId, lgbm_model3, target=3)\nplot_target_pred(playerId, lgbm_model4, target=4)","b166b5be":"def prediction(df):\n    df = df.reset_index()\n    df['date'] = pd.to_datetime(df['date'], format='%Y%m%d')\n    df['playerId'] = df['date_playerId'].apply(lambda x: x.split('_')[1]).astype(int)\n    \n    for x in range(lag):\n        df['date'] = df['date'] - timedelta(days=1)\n        df = df.merge(player_engagement, how='left', on=['date', 'playerId'], suffixes=['',f'_{x+1}'])\n        df = df.fillna(0.)\n    \n    for x in range(4):\n        columns = [f'target{x+1}_{i+1}' for i in range(lag)]\n        df[f'target{x+1}_median'] = df[columns].median(axis=1)\n        df[f'target{x+1}_mean'] = df[columns].mean(axis=1)\n        df[f'target{x+1}_max'] = df[columns].max(axis=1)\n        df[f'target{x+1}_min'] = df[columns].min(axis=1)\n        df[f'target{x+1}_lower_quartile'] = df[columns].quantile(0.25, axis=1)\n        df[f'target{x+1}_upper_quartile'] = df[columns].quantile(0.75, axis=1)\n        df[f'target{x+1}_skewness'] = df[columns].skew(axis=1)\n        df = df.drop(columns=columns)\n        \n    target1_pred = lgbm_model1.predict(df[feature_columns].to_numpy())\n    target2_pred = lgbm_model2.predict(df[feature_columns].to_numpy())\n    target3_pred = lgbm_model3.predict(df[feature_columns].to_numpy())\n    target4_pred = lgbm_model4.predict(df[feature_columns].to_numpy())\n    \n    return target1_pred, target2_pred, target3_pred, target4_pred","85503210":"player_engagement = player_engagement.drop(columns=['engagementMetricsDate'])","9d4c0ea4":"import mlb\n\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set\n\nfor (test_df, sample_prediction_df) in iter_test:\n    target1, target2, target3, target4 = prediction(sample_prediction_df)\n    sample_prediction_df['target1'] = np.clip(target1, 0, 100)\n    sample_prediction_df['target2'] = np.clip(target2, 0, 100)\n    sample_prediction_df['target3'] = np.clip(target3, 0, 100)\n    sample_prediction_df['target4'] = np.clip(target4, 0, 100)\n    env.predict(sample_prediction_df)","34191ec4":"# Target Inference","39bfda51":"# Create Descriptive Statistics Based on Lag Features","95467214":"Some parameters values below are copy-pasted from this [notebook](https:\/\/www.kaggle.com\/lhagiimn\/lightgbm-catboost-ann-2505f2) by [lhagiimn](https:\/\/www.kaggle.com\/lhagiimn) at cell 14.","6a9f7497":"# Create Lag Features","4e941df1":"# Create Unnested Dataset","731c6df2":"# Plotting Prediction Result","5162bcac":"# Train LightGBM Model"}}