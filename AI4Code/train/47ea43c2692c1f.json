{"cell_type":{"2a598c01":"code","ded78732":"code","6be59045":"code","532b17e0":"code","eb22426b":"code","1b1fc871":"code","96a38675":"code","b607d6fd":"code","acd686cb":"code","43585c3a":"code","9772a067":"code","98d2498b":"code","f5fa041a":"code","3bbe3062":"code","fdc99ad4":"code","9022b35c":"code","18c8467e":"code","95c141f3":"code","2522cd04":"code","bc807d4f":"code","d0875d80":"code","316fbff9":"code","c7f59878":"code","18c3c6c5":"code","2e3d156b":"code","b847f902":"code","8e34d877":"code","63138dc9":"code","b3d5bd22":"code","d1629b4e":"code","47657680":"code","42ce80f7":"code","3ed3e092":"code","6dcc0a22":"code","9ebb7654":"code","7bc197d1":"code","e59a986f":"code","dc191233":"code","7633c187":"code","ad494719":"code","2c9e2b18":"code","56df9a76":"code","dbbec5ee":"code","3fc23ed7":"code","125abe08":"code","f9b435df":"code","445b2c20":"code","cd2a11b7":"code","e7c477a0":"code","acfe327e":"code","6ca0e81e":"code","111b6340":"code","f0abfc67":"code","5701a7be":"code","1a5fe334":"code","a57492b8":"code","d3fa3dc7":"code","86ad8217":"code","437a0143":"code","6af5bfbe":"code","775dd7c9":"code","48050b39":"code","6c748a84":"code","1079761e":"code","520bf406":"code","4a17c314":"code","22de72c3":"code","c3822fc8":"code","1969a9dc":"code","ca2126ca":"code","96fcb7dd":"code","f460d3d8":"code","3400cf57":"code","9a3d3a78":"code","44f70252":"code","aa3001a4":"code","e2810ea4":"code","b9d9c6af":"code","4d5c9094":"code","df988170":"code","ca778ef3":"code","a774211a":"code","ee2725fe":"code","5852077d":"code","300982bb":"code","31c2922f":"code","311bb302":"code","1f530e30":"code","52a910f2":"code","717085ff":"code","5c6d5e75":"code","5e0efc46":"code","707684f6":"code","9c065f49":"code","39949c7b":"code","b991f267":"code","e6de7bea":"code","3c561d12":"code","2ba85f58":"code","17fea9bd":"markdown"},"source":{"2a598c01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ded78732":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score, classification_report,f1_score,roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import KFold, cross_val_score,StratifiedKFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV,RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier","6be59045":"traindf =  pd.read_csv(\"..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/train.csv\")\ntestdf = pd.read_csv(\"..\/input\/turkiye-is-bankasi-machine-learning-challenge-4\/MLChallenge4\/test.csv\")","532b17e0":"testdf.head()","eb22426b":"traindf.MC_NAME.value_counts()","1b1fc871":"traindf.head()","96a38675":"traindf.drop_duplicates(inplace=True)","b607d6fd":"new = traindf.groupby([\"CITY\",\"TARGET\"]).agg([\"count\",np.mean])","acd686cb":"idx= pd.IndexSlice","43585c3a":"new.loc[:,idx[:,\"count\"]].sort_values(\"CITY\")","9772a067":"(traindf.COUNTRY.str.len()-traindf.COUNTRY.str.strip().str.len()).unique()\n","98d2498b":"factor = 3\nupper_lim = traindf['TXN_AMNT'].mean () +traindf['TXN_AMNT'].std () * factor\nlower_lim = traindf['TXN_AMNT'].mean () - traindf['TXN_AMNT'].std () * factor\n\ntraindf = traindf[(traindf['TXN_AMNT'] < upper_lim) & (traindf['TXN_AMNT'] > lower_lim)]","f5fa041a":"traindf[traindf[\"TARGET\"] ==1 ][\"CITY\"].value_counts().head(25)","3bbe3062":"traindf[traindf[\"CITY\"] ==\"709d68810f1bc0d67eb62e12acd84f05486e83f50792bf7b716a\"][\"CITY\"].value_counts()","fdc99ad4":"traindf[traindf[\"CITY\"] ==\"582c7d25f982181f9aae5abf839031a880ac4343d446fb0a35f0\"][\"CITY\"].value_counts()","9022b35c":"traindf[traindf[\"CITY\"] ==\"7e943c4295cfab64ebe6d2cbe98bc5514e17d6e2dee0386ed230\"][\"CITY\"].value_counts()","18c8467e":"traindf[traindf[\"CITY\"] ==\"7134d02f0eaad804d8ce3f8b84d4c25d4bf0fc8162b76c3bdfee\"][\"CITY\"].value_counts()","95c141f3":"traindf[traindf[\"CITY\"] ==\"67cabdc2a2c63f96788f6e0ea2e143c0e5d703b8c40bdfdc3a9e\"][\"CITY\"].value_counts()","2522cd04":"traindf.groupby(\"CITY\")[\"TARGET\"].value_counts()","bc807d4f":"c\u0131tydf = traindf[traindf[\"TARGET\"] == 1][\"CITY\"].value_counts().head(100)","d0875d80":"c\u0131tydf = pd.DataFrame(c\u0131tydf)\nc\u0131tydf = c\u0131tydf.reset_index()\nc\u0131tydf.columns = ['unique_values', 'counts']","316fbff9":"c\u0131tydf2 = traindf[\"CITY\"].value_counts().head(5000)","c7f59878":"c\u0131tydf","18c3c6c5":"c\u0131tydf2 = pd.DataFrame(c\u0131tydf2)\nc\u0131tydf2 = c\u0131tydf2.reset_index()\nc\u0131tydf2.columns = ['unique_values2', 'counts2']","2e3d156b":" Liste =list(set(traindf.CITY) & set(c\u0131tydf.unique_values))","b847f902":"main_df = pd.concat((traindf.iloc[:,1:],testdf))","8e34d877":"main_df.head()","63138dc9":"main_df.shape","b3d5bd22":"df = main_df.copy()","d1629b4e":"def funct(i):\n    \n    if i ==\"8c1e38274fba4c2119fd88120b70c29cd468c6444058da8225c9\" :\n    \n     i = 'C'\n    elif i in Liste:\n     i = 'A'\n    else:\n     i = 'B'\n    return i","47657680":"df.CITY = [funct(i) for i in df.CITY]","42ce80f7":"df.CITY.value_counts()","3ed3e092":"df.CITY.value_counts()","6dcc0a22":"df.head()","9ebb7654":"main_df[\"MC_ID\"].nunique()","7bc197d1":"main_df[\"CITY\"].nunique()","e59a986f":"df = df.drop([\"CST_NR\",\"CC_NR\",\"MC_ID\",],axis = 1)","dc191233":"df.head()","7633c187":"df[\"TXN_TRM\"].unique()","ad494719":"df = df.drop([\"TXN_TRM\",],axis = 1)","2c9e2b18":"df.head()","56df9a76":"df[\"TXN_ENTRY\"].nunique()\n","dbbec5ee":"df[\"MC_NAME\"].nunique()\n","3fc23ed7":"main_df[\"MCC_CODE\"].nunique()","125abe08":"df = df.drop([\"MC_NAME\"],axis = 1)","f9b435df":"df.head()","445b2c20":"df.info()","cd2a11b7":"df.TXN_SOURCE.unique()","e7c477a0":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True, cmap='RdYlBu')","acfe327e":"df.columns","6ca0e81e":" df['TXN_AMNT'] = df['TXN_AMNT'].astype(int)\n df['DAY_OF_MONTH'] = df['DAY_OF_MONTH'].astype(int)\n df['TXN_TIME'] = df['TXN_TIME'].astype(int)\n df['DAY_OF_WEEK'] = df['DAY_OF_WEEK'].astype(int)","111b6340":"df.head()","f0abfc67":"df.describe()","5701a7be":"df[\"TXN_TIME\"] = df[\"TXN_TIME\"]\/100","1a5fe334":"df.head()","a57492b8":"df[\"TXN_TIME\"] = round(df[\"TXN_TIME\"])","d3fa3dc7":"df.head()","86ad8217":"def daymonth(i):\n if i <= 10 :\n  i = \"Firstpart\"\n elif i > 10 and i <= 20 : \n  i = \"MediumPart\"\n else: \n  i = \"LastPart\"   \n return i","437a0143":"df[\"DAY_OF_MONTH\"] = [daymonth(i) for i in df[\"DAY_OF_MONTH\"]]\n\ndf.head()","6af5bfbe":" df['TXN_AMNT'] = df['TXN_AMNT'].astype(\"category\")\n df['DAY_OF_MONTH'] = df['DAY_OF_MONTH'].astype(\"category\")\n df['TXN_TIME'] = df['TXN_TIME'].astype(\"category\")\n df['DAY_OF_WEEK'] = df['DAY_OF_WEEK'].astype(\"category\")\n df[\"COUNTRY\"] = df[\"COUNTRY\"].astype(\"category\")\n df[\"MCC_CODE\"] = df[\"MCC_CODE\"].astype(\"category\")\n df[\"TXN_SOURCE\"] = df [\"TXN_SOURCE\"].astype(\"category\")\n df[\"CITY\"]= df[\"CITY\"].astype(\"category\")","775dd7c9":"cat = [\"TXN_SOURCE\",\"TXN_ENTRY\",\"COUNTRY\",\"MCC_CODE\",\"CITY\",\"DAY_OF_MONTH\"]","48050b39":"df = pd.get_dummies(data = df, columns = cat, drop_first= True)","6c748a84":"df.head()","1079761e":"testdf1 = testdf.copy()","520bf406":"df = df.drop(\"ID\", axis = 1)","4a17c314":"from sklearn.preprocessing import StandardScaler","22de72c3":"cols = df.columns","c3822fc8":"scaler = StandardScaler()\ndf = scaler.fit_transform(df)\n","1969a9dc":"df = pd.DataFrame(data = df, columns = [cols])","ca2126ca":"df.head()","96fcb7dd":"X_train = df[:traindf.shape[0]]\n\nX_test = df[traindf.shape[0]:]\n\ny= traindf.TARGET","f460d3d8":"X_train.head()","3400cf57":"X_test.head()","9a3d3a78":"from xgboost import XGBClassifier","44f70252":"parameters = {\n    'max_depth': range (6,11 , 1),\n    'n_estimators': range(5, 30, 5),\n    'learning_rate': [0.3,0.5,0.8,1,2],\n     'penalty':['l2', 'l1']\n    \n}","aa3001a4":"estimator = XGBClassifier(random_state = 42 )\n","e2810ea4":"rsc = RandomizedSearchCV(estimator=estimator,param_distributions= parameters ,cv=5, n_iter = 4, verbose=1, scoring='roc_auc') \n","b9d9c6af":"rsc.fit(X_train,y)","4d5c9094":"rsc.best_params_","df988170":"rsc.best_score_\n\n","ca778ef3":"xgb = XGBClassifier(\n   max_depth= 10,\n    n_estimators= 25,\n    learning_rate= 0.5,\n    penalty = \"l2\",\n    random_state = 42\n)","a774211a":"xgb.fit(X_train,y)","ee2725fe":"feature_important = xgb.get_booster().get_score(importance_type='weight')\nkeys = list(feature_important.keys())\nvalues = list(feature_important.values())\n\ndata = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\ndata.nlargest(50, columns=\"score\").plot(kind='barh', figsize = (20,10)) ## plot top 40 features","5852077d":"y_train_pred = xgb.predict(X_train)","300982bb":"roc = roc_auc_score(y,y_train_pred)","31c2922f":"roc","311bb302":"y_pred = xgb.predict_proba(X_test)","1f530e30":"type(y_pred)","52a910f2":"y_pred","717085ff":"df_new = pd.concat([X_test, pd.DataFrame(y_pred)], axis=1)","5c6d5e75":"df_new.columns","5e0efc46":"cols = [\"ID\", 1]","707684f6":"new = pd.DataFrame(data = df_new, columns=cols )","9c065f49":"new.head()","39949c7b":"new.columns = [\"ID\",\"Predicted\"]","b991f267":"submission_file = new.copy()","e6de7bea":"submission_file[\"ID\"] = submission_file[\"ID\"].astype(\"int32\")","3c561d12":"submission_file.head()","2ba85f58":"submission_file.to_csv('submission.csv', index=False)","17fea9bd":"# ******OUTL\u0130ERS******"}}