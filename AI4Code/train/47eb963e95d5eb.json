{"cell_type":{"6bfbaed3":"code","8fa5443c":"code","fadf7d48":"code","e6882991":"code","9e8f51e6":"code","bcc730ee":"markdown","3548494a":"markdown","b6affaba":"markdown","5c6f8c61":"markdown","85b44e1d":"markdown","d609d996":"markdown"},"source":{"6bfbaed3":"import os\n\ndef get_number_of_files_in_working_directory():\n    \"\"\" count number of files in the Kaggle working directory \"\"\"\n    num = len(os.listdir('.\/'))\n    if num is None:\n        print('no files in the working Kaggle directory')\n    else:\n        print(f'There are {num} files in the working Kaggle directory')\n\ndef delete_all_files_in_working_directory(are_you_sure = 'True'):\n    ''' Delete complitly all the files in Kaggle working directory'''\n    if are_you_sure == 'True':\n        for files in os.listdir('.\/'):\n            os.remove(files)\n        print('All files are deleted!')\n    elif are_you_sure != 'True':\n        print('Nothing is deleted!')\n    else:\n        print('Nothing is deleted!')\n        \ndef get_frames_from_image(image_path):\n    ''' Get the all frames from video with cv2 '''\n    import cv2\n    cap_ = cv2.VideoCapture(image_path)\n    frames_ = []\n    while(cap_.isOpened()):\n        result, frame = cap_.read()\n        if result:\n            frames_.append(frame)\n            del result, frame\n        else:\n            break\n    cap_.release()\n    return frames_\n\ndef draw_picture(path):\n    ''''''\n    im = Image.open(path)\n    width, height = im.size\n    print(path, width, height)\n    img = mpimg.imread(path)\n    imgplot = plt.imshow(img)\n    plt.show();\n    \ndef dump_file(file_name_with_extention: str, data: object):\n    import json\n    try:\n        with open(file_name_with_extention, 'w') as ff:\n            json.dump(data, ff)\n    except Exception as e:\n        print(e)\n    print('done')\n    \ndef read_images_in_working_directory_to_array(file_pah):\n    image_list = []\n    for file in os.listdir(file_pah):\n        if file.endswith('.jpg'):\n            image_list.append(Image.open(file).convert(\"RGB\"))\n    return image_list\n\ndef find_min_value_y(data) -> list:\n    ''' min value for each face feature left'''\n    return [min(face_landmarks_list[0][key], key=lambda t:t[0])[0] for key in face_landmarks_list[0].keys()]\n    \ndef find_min_value_x(data) -> list:\n    ''' min value for each face feature right '''\n    return [min(face_landmarks_list[0][keys], key=lambda t:t[1])[1] for keys in face_landmarks_list[0].keys()]\n\ndef find_max_value_y(data) -> list:\n    ''' max value for each face feature left'''\n    return [max(face_landmarks_list[0][key], key=lambda t:t[0])[0] for key in face_landmarks_list[0].keys()]\n\ndef find_max_value_x(data) -> list:\n    ''' max value for each face feature right'''\n    return [max(face_landmarks_list[0][keys], key=lambda t:t[1])[1] for keys in face_landmarks_list[0].keys()]\n\ndef get_4_relation_matrix(face_landmarks):\n    \n#     if len(face_landmarks) != 9:\n#         raise ValueError('not 9 features')\n    # Horizontal face features\n    res_min_y = find_min_value_y(face_landmarks)\n    res_max_y = find_max_value_y(face_landmarks)\n    # find relation of botton features between  of the face\n    relation_botton_face = [x \/ sum(res_min_y) for x in res_min_y]\n    # find relation of top of features between of the face\n    relation_top_face = [x \/ sum(res_max_y) for x in res_max_y]\n    \n    # Vertical features\n    res_min_x = find_min_value_x(face_landmarks)\n    res_max_x = find_max_value_x(face_landmarks)\n    # find relation of left side of the face\n    relation_left = [x \/ sum(res_min_x) for x in res_min_x]\n    # find relation of right of the face\n    relation_right = [x \/ sum(res_max_x) for x in res_max_x]\n\n    return relation_botton_face, relation_top_face, relation_left, relation_right\n\ndef draw_landmark_on_faces(image):\n    # !pip install face_recognition\n    # show landmarks on the face\n    face_landmarks_list = face_recognition.face_landmarks(image)\n    pil_image = Image.fromarray(image)\n    d = ImageDraw.Draw(pil_image)\n    for face_landmarks in face_landmarks_list:\n        for facial_feature in face_landmarks.keys():\n            d.line(face_landmarks[facial_feature], width=3)\n    display(pil_image)","8fa5443c":"get_number_of_files_in_working_directory()","fadf7d48":"# create file \ntest_file_to_write1 = open('test_to_write1.txt','w+')\ntest_file_to_write2 = open('test_to_write2.txt','w+')\n# write some text \ntest_file_to_write1.write('file1 to test')\ntest_file_to_write2.write('file2 to test')","e6882991":"delete_all_files_in_working_directory(are_you_sure='True')","9e8f51e6":"get_number_of_files_in_working_directory()","bcc730ee":"# Utilities functions for Kaggle notebooks\n\n## 1. function to get number of files in Kaggle working directory\n\n## 2. function to delete all files in Kaggle working directory \n\n## 3. Get frames from Video with OpenCV\n\n## 4. Draw picture from image path\n\n## 5. Dump a file in json, text and other format\n\n## 6. Read images as array from working directory with folder path\n\n## 7. Utility functions to work with face landmark data for images\n\n## 8. Draw face landmark on the face from one image\n\n\n","3548494a":"### Thanks for reading, hopefully it was worth it, pls add suggestions \/ comments \n### https:\/\/www.linkedin.com\/in\/volodymyrgavrish\/","b6affaba":"### Check now how many files are in Kaggle working directory","5c6f8c61":"### Create file and load to working directory","85b44e1d":"### Check current number of files in Kaggle directory (should 0)","d609d996":"### Let delete all the files in working Kaggle directory"}}