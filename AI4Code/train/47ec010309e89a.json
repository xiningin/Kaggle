{"cell_type":{"491d982d":"code","ecb495c3":"code","fa3a5736":"code","8dff90c5":"code","83696841":"code","4e494a28":"code","80d74db4":"code","0ee9c885":"code","fdb62100":"code","0818e182":"code","b693610d":"code","9a0bfe2e":"code","09d98396":"code","92993bd3":"code","ea323179":"code","efecb2b7":"code","f8fe8e11":"markdown","b9ce4729":"markdown","43939f6b":"markdown","55cd407a":"markdown","005815e1":"markdown","b30f0fc5":"markdown"},"source":{"491d982d":"# Let's start with importing packages\nimport pandas  as pd\n\nimport numpy as np\nimport matplotlib.pyplot  as plt\n\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","ecb495c3":"## Let's create a function for loading the data to pandas dataframe\ndef process_data(dataframe_path, data='training_data'):\n    df = pd.read_csv(dataframe_path) # makes the copy of incoming dataframe\n    if data!=\"training_data\":\n        # test data won't have labels so returning \n        df = df.values.reshape(-1, 28, 28, 1)\n        return df\n    \n    labels = df.pop(\"label\") # pop function removes the label and assign it to labels variable\n    labels = tf.keras.utils.to_categorical(labels, num_classes=10, dtype='float32')\n    \n    df = df.values.reshape(-1, 28, 28, 1)\n    return df, labels","fa3a5736":"# Path of the datas\ntrain_data_path = \"..\/input\/digit-recognizer\/train.csv\"\ntest_data_path = \"..\/input\/digit-recognizer\/test.csv\"","8dff90c5":"train_x, train_y = process_data(train_data_path, data='training_data')\ntest_x = process_data(test_data_path, data=\"testing_data\")","83696841":"plt.figure(figsize=(20, 10))\nprint(\"DATA WITHOUT AGUMENTATION\")\nfor i in range(20):\n    plt.subplot(4,5, i%10+1)\n    plt.imshow(train_x[i], cmap=\"gray\")\n    plt.title(str(np.argmax([train_y[i]])))\n    plt.axis('off')","4e494a28":"# Loading the data to ImageDataGenerator class and agumenting them\ntrain_gen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=30, # Rotates the image within 30 degree ramdomly\n    shear_range=0.1,\n    zoom_range=[0.8, 1.0], # Randomly zooms the images\n    rescale=1.0\/255, # normalizes the data\n    validation_split=0.2\n)\n\nvalid_gen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.0\/255, # normalizes the data\n    validation_split=0.2\n)\n\ntrain_generator = train_gen.flow(train_x, train_y, shuffle=True, batch_size=32)\nvalid_generator = valid_gen.flow(train_x, train_y, shuffle=False, batch_size=32)","80d74db4":"img, labels = next(train_generator)","0ee9c885":"plt.figure(figsize=(20, 8))\nprint(\"DATA AFTER APPLYING random zooming, rotating [AGUMENTATING]\")\nfor i in range(24):\n    plt.subplot(3,8, i%24+1)\n    plt.imshow(img[i], cmap=\"gray\")\n    plt.title(str(np.argmax([labels[i]])))\n    plt.axis('off')","fdb62100":"# importing packages for model\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten, GlobalAveragePooling2D, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import CategoricalCrossentropy","0818e182":"def build_model():\n    model = tf.keras.Sequential()\n\n    model.add(Conv2D(8, (5,5), input_shape=[28,28,1], activation='relu'))\n    model.add(Conv2D(8, (3,3), padding='SAME', activation='relu'))\n    model.add(MaxPooling2D())\n    \n    model.add(BatchNormalization(axis=-1))\n    model.add(Conv2D(16, (3,3), padding='SAME', activation='relu'))\n    model.add(MaxPooling2D())\n\n    model.add(BatchNormalization(axis=-1))\n    model.add(Conv2D(16, (3,3), padding='SAME', activation='relu'))\n    model.add(Conv2D(32, (3,3), padding='SAME', activation='relu'))\n    model.add(MaxPooling2D())\n\n    model.add(BatchNormalization(axis=-1))\n    model.add(Flatten())\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(10, activation='softmax'))\n\n    # Compiling the model\n    model.compile(optimizer=Adam(learning_rate=0.0005), loss=CategoricalCrossentropy(), metrics=['accuracy'])\n    \n    return model","b693610d":"# Summary of the model\nmodels = {}\n\nmodels[0] = build_model()\nmodels[1] = build_model()\nmodels[2] = build_model()\nmodels[3] = build_model()\n\nmodels[0].summary()","9a0bfe2e":"# Train the model by uncommenting\nfor i in range(4):\n    print(\"\\nTraining model 1\\n\")\n    models[i].fit(train_generator, validation_data=valid_generator, epochs=10)","09d98396":"# Visualizing the training\nstats = pd.DataFrame(history.history)\nloss  = stats[['loss', 'val_loss']]\nacc = stats[['accuracy', 'val_accuracy']]\nloss.plot()\nacc.plot()","92993bd3":"preds = {}\nfor i in range(4):\n    preds[i] = models[i].predict(test_x)    ","ea323179":"prediction = preds[0] +  preds[1] + preds[2] + preds[3]\nprediction = np.array([np.argmax(x) for x in prediction])","efecb2b7":"# Creating and saving submission.csv file\nsubmission_file = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission_file.Label = prediction\nsubmission_file.to_csv('submission.csv', index=False)","f8fe8e11":"# **Reading Data**","b9ce4729":"# **Predicting Test data**","43939f6b":"* The accuracy is about 99% it's neat.\n* The loss is 0.2","55cd407a":"# **Importing Packages**","005815e1":"# **How is the data?**","b30f0fc5":"# **BUILDING MODEL**"}}