{"cell_type":{"e89e847a":"code","3dec73de":"code","87ff35c9":"code","c8d84249":"code","f279a403":"code","f3cd1dce":"code","09526c95":"code","c1bb56e2":"code","b41d6a3a":"code","959195e1":"code","9c960c0d":"code","76b555b4":"code","c2542e0a":"code","098f74da":"code","40459796":"code","4bbf8255":"code","a7ccad06":"code","70078e04":"code","2f44d58f":"code","eeed549e":"code","ecfadc3e":"code","4163c8b8":"code","d8e83ee7":"code","b74e028b":"code","cc81e346":"code","dbbb80aa":"code","aa0da309":"markdown","7c77082b":"markdown","97e709e2":"markdown","658285f6":"markdown","c4c0ebc3":"markdown","d0deb285":"markdown","254460de":"markdown","777b97dc":"markdown","24f79eb0":"markdown","689d7e24":"markdown","807b4135":"markdown","d272c6d2":"markdown","e44d2551":"markdown","43e3d9b6":"markdown","96012ed7":"markdown","4265bd56":"markdown","4be4268e":"markdown","43be1e6b":"markdown","18bf3cc4":"markdown","8a9ece90":"markdown","c922eae4":"markdown","0fb6a5ba":"markdown","e543f32b":"markdown","874845fc":"markdown","83e2e06e":"markdown","a540de00":"markdown","d1fe7864":"markdown","8ec426ff":"markdown","057fbc0e":"markdown","23682b38":"markdown","ca4e6d72":"markdown","e9d244d0":"markdown","cea7b6ed":"markdown","12a48810":"markdown","6af44a52":"markdown"},"source":{"e89e847a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport sklearn\nimport statistics \nimport math  \n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom plotly.offline import init_notebook_mode, iplot, plot","3dec73de":"data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntarget = data['SalePrice']\ndata.shape","87ff35c9":"data.dtypes.value_counts()","c8d84249":"numerical_cols = []\nobject_cols = []\n\n[numerical_cols.append(i) for i in data.columns if data[i].dtype == 'int64' or data[i].dtype == 'float64']\n[object_cols.append(i) for i in data.columns if data[i].dtype == 'O'];\n","f279a403":"for i in numerical_cols:\n    print(\"{} : {}%\" .format (i , 100*(data[i].isnull().sum()\/data.shape[0])))\n    data[i].fillna(value =0,inplace=True)","f3cd1dce":"corr_df = data[numerical_cols].corr(method='pearson')\ncorr_df = corr_df['SalePrice'].sort_values()\nfig = px.bar(corr_df[11:-1],color=corr_df[11:-1].values)\nfig.update_layout(title = 'Correlation scores of top numerical features w.r.t SalePrice',\n                  xaxis= dict(title= 'Features',showgrid=False,gridcolor='lightgrey'),\n                  yaxis= dict(title= 'SalePrice',showgrid=False),\n                  plot_bgcolor='rgba(0,0,0,0)')\nfig.show()","09526c95":"#taking the most important features into consideration and excluding the rest.\nnumerical_cols = []\n[numerical_cols.append(i) for i in corr_df[11:-1].index];","c1bb56e2":"[data.groupby(i).mean()['SalePrice'] for i in object_cols]","b41d6a3a":"drop_cols =[ i for i in object_cols if 100*(data[i].isnull().sum()\/data.shape[0])>40]\nfor i in drop_cols:\n    x = 100*(data[i].isnull().sum()\/data.shape[0])\n    print(\"{} : {}%\" .format (i ,x))\n[object_cols.remove(i) for i in drop_cols];","959195e1":"for i in object_cols:\n    data[i].fillna(value = data[i].mode()[0], inplace = True)","9c960c0d":"fig = px.scatter(data, x=\"TotalBsmtSF\", y=\"GrLivArea\", size=\"GarageArea\", color=\"OverallQual\",\n           hover_name=\"HouseStyle\",log_x = True)\nfig.update_layout(title = \"GrLivArea vs TotalBsmtSF scaled by quality and Type of House\")\nfig.show()\n","76b555b4":"fig = px.scatter_matrix(data, dimensions=[\"OverallQual\", \"GrLivArea\", \"TotalBsmtSF\", \"GarageArea\"], color=\"BldgType\")\nfig.show()","c2542e0a":"trace1 = go.Scatter(\n                    x = data.OpenPorchSF,\n                    y = data.SalePrice,\n                    mode = \"markers\",\n                    name = \"Open Porch SF\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= data.OpenPorchSF)\n\ntrace2 = go.Scatter(\n                    x = data.ScreenPorch,\n                    y = data.SalePrice,\n                    mode = \"markers\",\n                    name = \"Screen Porch SF\",\n                    marker = dict(color = 'peachpuff'),\n                    text= data.ScreenPorch)\ndf = [trace1, trace2]\nlayout = dict(title = 'SalePrices per Porch area square feet',\n              xaxis= dict(title= 'Porch Type(open\/screen)',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'SalePrice',ticklen= 5,zeroline= False),\n              plot_bgcolor='rgba(0,0,0,0.7)'\n             )\nfig = dict(data = df, layout =layout)\niplot(fig)","098f74da":"fig = px.scatter(data, x=\"LotFrontage\", y=\"LotArea\", color=\"LotShape\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","40459796":"df0 = data.groupby(['Exterior1st']).median()['SalePrice']\ndf0 = df0.sort_values()\ndf1 = data.groupby(['Exterior2nd']).median()['SalePrice']\n\ntrace0 = go.Bar(\n    x = df0.index,\n    y = df0,\n    name =\"Exterior1st\",\n    marker = dict(color = 'palevioletred')\n)\ntrace1 = go.Bar(x = df0.index,\n    y = df1,\n     name =\"Exterior2nd\",            \n    marker = dict(color = 'papayawhip') )\ndfr = [trace0,trace1]\nlayout = dict(title = 'Median of SalePrices per Exterior Categories',\n              xaxis= dict(title= 'Exterior',ticklen= 6,showgrid=False),\n              yaxis= dict(title= 'SalePrice',ticklen= 6,showgrid=False),\n              plot_bgcolor='rgba(0,0,0,0.2)',\n             )\nfig = dict(data = dfr, layout =layout)\n\niplot(fig)","4bbf8255":"fig = make_subplots(rows=2, cols=1)\nfig.add_trace(go.Box(\n                    x = data.Exterior1st,\n                    y = data.SalePrice,\n                    name = \"Exterior1st\",\n                    marker = dict(color = 'palevioletred'),\n                    text= data.Exterior1st),\n             row=1, col=1\n            )\nfig.add_trace(go.Box(\n                    x = data.Exterior2nd,\n                    y = data.SalePrice,\n                    name = \"Exterior2nd\",\n                    marker = dict(color = 'paleturquoise'),\n                    text= data.Exterior2nd),\n             row=2, col=1\n            )\nfig.update_xaxes(title_text=\"Exterior1st\", row=1, col=1)\nfig.update_xaxes(title_text=\"Exterior2nd\", row=2, col=1)\nfig.update_yaxes(title_text=\"SalePrice\", row=1, col=1)\nfig.update_yaxes(title_text=\"SalePrice\", row=2, col=1)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.update_layout(\n              plot_bgcolor='rgba(0,0,0,1)',title_text=\"SalePrices per Exterior Finishing square feet\")\niplot(fig)","a7ccad06":"fig = make_subplots(rows=3, cols=2)\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"HouseStyle\"]),\n    name = \"House Style\",\n    text= \"House Style\"\n),row=1,col=1)\n\n\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"Neighborhood\"]),\n    name = \"Neighborhood\",\n    text= \"House Style\"\n),row=1,col=2)\n\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"MSZoning\"]),\n    name = \"MSZoning\",\n    text= \"MSZoning\"\n),row=2,col=1)\n\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"BldgType\"]),\n    name = \"BldgType\",\n    text= \"Building Type\"\n),row=2,col=2)\n\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"RoofStyle\"]),\n    name = \"RoofStyle\",\n    text= \"Roof Style\"\n),row=3,col=1)\nfig.add_trace(go.Box(\n    arg = dict(\n    y = data[\"SalePrice\"],\n    x = data[\"BsmtCond\"]),\n    name = \"Basement Condition\",\n    text= \"Basement condition\"\n),row=3,col=2)\n\n\nfig.update_layout(title = 'SalePrices per Amenities',height=800, width=1000,\n              plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n","70078e04":"fig = px.sunburst(data, path=['MSZoning','Neighborhood'], values='SalePrice',\n                  color='OverallQual')\nfig.update_layout()\nfig.show()","2f44d58f":"fig1 = px.pie(data, values='TotalBsmtSF', names='BsmtCond', title='Total basement area vs condition')\nfig1.show()\nfig2 = px.pie(data, values='TotalBsmtSF', names='BsmtQual', title='Total Basement area vs quality')\nfig2.show()","eeed549e":"fig = px.scatter_3d(data, x=\"GarageFinish\", y=\"GarageCond\", z=\"GarageType\", color=\"GarageType\", size=\"GarageArea\",\n                  symbol=\"GarageType\")\nfig.show()","ecfadc3e":"for i in numerical_cols:\n    data[i] = (data[i]-np.mean(data[i]))\/np.std(data[i])\nfinal_cols = numerical_cols\nfinal_cols.append('SalePrice')\n[final_cols.append(i) for i in object_cols]\nfor i in data.columns:\n    if i not in final_cols:\n        data.drop(i,inplace=True,axis=1)","4163c8b8":"label_encoding_cols  = {'LotShape': {'IR3':1, 'IR2':2, 'IR1':3,'Reg':4},\n                        'LotConfig': {'Inside': 1, 'Corner':2, 'CulDSac':3,'FR2':4,'FR3':5},\n                        'LandSlope': {'Sev': 1, 'Mod':2, 'Gtl':3},\n                        \"ExterQual\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"ExterCond\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"BsmtQual\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"BsmtCond\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"BsmtExposure\": {\"NA\": 0, \"No\": 0, \"Mn\": 1, \"Av\": 2,\"Gd\":3},\n                        \"BsmtFinType1\": {\"NA\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3,\"BLQ\": 4, \"ALQ\": 5, \"GLQ\":5 },\n                        \"BsmtFinType2\": {\"NA\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3,\"BLQ\": 4, \"ALQ\": 5, \"GLQ\":5 },\n                        \"HeatingQC\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"CentralAir\": {'N':0,'Y':1},\n                        \"KitchenQual\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"Functional\": {\"Sal\":0,\"Sev\":1,\"Maj1\":2,\"Maj2\":2,\"Mod\":3,\"Min1\":4,'Min2':4,'Typ':5},\n                        \"GarageType\": {\"CarPort\":0,\"2Types\":1,\"Detchd\":2,\"Basment\":3,\"BuiltIn\":4,\"Attchd\":5},\n                        \"GarageFinish\": {\"No Garage\":0,\"Unf\":1,\"RFn\":2,\"Fin\":3},\n                        \"GarageQual\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        \"GarageCond\": {\"NA\":0,\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5},\n                        'SaleCondition' : {'Partial':0,'Family':1,'Alloca':2,'AdjLand':3,'Abnorml':4,'Normal':5}}\ndata = data.replace(label_encoding_cols)","d8e83ee7":"one_hot_cols = [i for i in object_cols if data[i].dtype == 'O']\n\nj=0\nfor i in [4,8,12,16,-1]:\n    g = sns.PairGrid(data, y_vars=\"SalePrice\",\n                 x_vars= one_hot_cols[j:i],height = 4, aspect = 0.75)\n    g.map(sns.pointplot)\n    for ax in g.axes.flat: \n        ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    sns.despine(fig=g.fig, left=True)\n    j=i","b74e028b":"for i in one_hot_cols:\n    data[i] = data[i].astype('category')\ndata1 = pd.get_dummies(data, drop_first = True, columns = one_hot_cols)","cc81e346":"cols = data1.columns\nscaler = StandardScaler()\ndata1 = scaler.fit_transform(data1)\ndata1 = pd.DataFrame(data1, columns = cols )","dbbb80aa":"data1.head()","aa0da309":"# Visualizing the nominal features before one hot encoding them","7c77082b":"Vinyl sliding is the highest priced exterior type for dwellings. Its range of prices is pretty spread too. Cement beds have a lower avarage but they have a skew in their price trend. CBlocks are rarely preffered.<br>\nLocations and zones must manipulate the prices of the apartments, hence i have plotted them against each other. Roof Styles, House Styles, Building styles come next in our minds while setting the prices. Let's have a look.","97e709e2":"For the location of the apartments, Northridge Heights and Stone Brook are the costliest neighborhoods in the Ames city limits, while Northpark Villa and Blustem are the cheapest ones.Cheapest zones include commericial and Residential High Density zones, quite intuitive and the costliest are Residential low and medium density zones.<br>\n\n2 storey house styles will be difficult to afford, thanks to their high prices, and single family building, most probably because of their demand they are costly.\nTypes of basments dont affect the saleprices much, judging by their almost similar avarages, tho houses with typical have a lot of outliners.\nHip roof styles have outliners and they are pretty much deviated from their mean. They can be costly, they can be not, nothing much can be said about it in this case.","658285f6":"Most neighborhoods are listed under low density residential zones, which are pretty high priced and have a good rating, as we saw earlier as well. Few zones such such as medium density residential and floating village residential. They are pretty cheap zones, as we can see from the sector sizes. ","c4c0ebc3":"Biggest group living spaces correspond to biggest basements and as we can see, most of them are highly rated on quality. The smaller ones, even though they should be easier to maitain, have rather been rated less. Perhaps, people care more about large living area.","d0deb285":"# Label Encoding and One hot encoding","254460de":"Filling NUll values of the numerical features.","777b97dc":"Filling the minor missing values with the mode.","24f79eb0":"# Custom Pie Charts: Plotting Catagories and numerical features against each other.\nBasement area with respect to their quality and condition.","689d7e24":"# Scaling data: Standard Scaling, and dropping unnecessary columns. ","807b4135":"# Importing libraries","d272c6d2":"# Standardizing the entire dataset","e44d2551":"# Scatter plot - with trendlines and error bars\nTrendlines give a sense of direction to a scatterd mess, also extrapolated the existing data.In Pyplot the hover data also lists the R2 score of the features. Error bars are the best to analyse distribution of data about their mean,how deviated they are. I have visualised the characterestics of the Lot dimensions with their shpapes.","43e3d9b6":"Now the data is ready for modelling.","96012ed7":"# Grouped bar plots: Comparison of similar features and their relationship with the saleprice.\n\nExterior type 1 and 2 have similar catagories, though the numbers are different. Let's compare them against saleprice.","4265bd56":"# Easy and Custom scatter plots for visualizing multiple features at once:\nI have visualized the Open porch area and Screen Porch with respect to the Saleprice. We can judge the spread of the data, the avarage and most prefered values of each features from such plots.","4be4268e":"# 3D scatter plots: Information overload.\nI have plotted the garage attributes to the 3D scatter plot matrix. The garage finishing status, garage Condition, garage types against each other. The sizes are with respect to the relative garage area and colored with respect to the types.","43be1e6b":"# EDA with PyPlot\nA large number of diverse features makes it difficult to understand what really matters at the end. A solution to this problem is EDA, and Plotly library makes it easier,interactive and gives it a catchy look. I have explored the PyPlot API by visualizing a number of numerical, ordinal, and categorical features. Please hit an upvote if you like it!<br>![image.png](attachment:image.png)\n","18bf3cc4":"I have plotted medians rather than means to avoid getting manipulated by outliners of skewness in the data catagories. Type 1 has been plotted in ascending order for better comparison. Imitation Stucco have the highest mid prices for type 1, but pretty low in type 2. Brick Face is the highest priced for type 2. Probably these correspond to the front of the house and back of house respectively for type 1 and 2 judging by the difference in materials preferred. Box plots would give a better idea about the general spread of the data. Let's move on.","8a9ece90":"# Pie Charts: Explore majority and minority in catagories\nNormal Pie charts and sunburst plots say a lot about composition of that data. The hover data can contain all the nessacary information you'd like to include and know about. Plotly pie charts are easily customizable.","c922eae4":"# Scatter plot- Look at the relation between general features of a house.\nPLotting Above ground living area with respect to total basement area, colored according to the overall quality of the apartment. The sizes define the garage area. ","0fb6a5ba":"# Data Preparation:\nThat was enough of visualizations, now lets scale and convert the data to prepare it for modelling.","e543f32b":"# Bar Plot - feature selection (numerical)\nLet's checkout the most important numerical features in the dataset","874845fc":"Dropping columns with majority missing values, since they're are not reliable, or they might not always be available while predicting on test cases.","83e2e06e":"# Box Plot - EDA masters (Why? they list the mean,spread,outliners,skewness and catagories at once)\nI love box plots, because of the amount of information they hold about the data plotted on them. ","a540de00":"Blue wins! Or the single family building types populate majority of the data. We can see townhouse units a little here and there. Duplexes are a rare choice. Also we can conclude the fact that houses with garages are well appreciated, judging by the high overall quality rating.","d1fe7864":"# Scatter matrix- Another way to look at the general features\nPlotting the overall quality, above ground living area, basement area and garage area against each other, colored according to the building types. ","8ec426ff":"I have plotted a sunburst chart for visualizing the neighborhoods in each zones. And their overall quality and saleprices. Let's have a look:","057fbc0e":"I have plotted the exterior architecture type with respect to the SalePrice. It will show the extreme SalePrices with respect to exterior type, hence the outliners. We will also how exterior types differ in the way they are priced on avarage.","23682b38":"For better understanding of the data, let's seperate the numerical and the catagorical features. ","ca4e6d72":"Constituent data types ","e9d244d0":"# Catagorical features\nNow, since the numerical features selection has been done, let's analyze the correlation of the catagorical features with respect to the Target variable. ","cea7b6ed":"EDA gives an idea about how to encode a catagorical feature, whether to encode by label or get dummies. By a look at a graph we'll be able to decide how to scale features, how to impute the missing values, and how do they affect our target to be predicted. Let's get into it!","12a48810":"# A look at the data","6af44a52":"# Numerical Data"}}