{"cell_type":{"3f7a06f4":"code","aea36b84":"code","aa03d3b8":"code","b619f8e2":"code","f27fffb1":"code","e0723354":"code","133f300c":"code","4f0182a3":"code","c3640896":"code","6f939de3":"code","081517eb":"code","1ac52948":"code","72cc6ec1":"code","13a7c530":"code","258809cb":"code","52d3f38d":"code","353b98c5":"code","682abc02":"code","5e8cd845":"code","23453717":"code","4fa22e89":"markdown","9f0d25b2":"markdown","8dd05719":"markdown","538b1ca6":"markdown","2a934959":"markdown","7e8abb19":"markdown","908b7e26":"markdown","fc9323d5":"markdown","f72477fb":"markdown","f62a5aff":"markdown","4b7fa619":"markdown","c32f2898":"markdown","51f23ca8":"markdown","3d3a560a":"markdown","f6243f88":"markdown","d942b758":"markdown","35f681c6":"markdown","debc23a3":"markdown"},"source":{"3f7a06f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session data=pd.read_csv('train.csv')\n","aea36b84":"data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndata.head()\n\n","aa03d3b8":"data.isna().sum()\n","b619f8e2":"data.fillna(value = data.median(),inplace = True)\ndata.isna().sum()","f27fffb1":"test.isna().sum()","e0723354":"test['Age'].fillna(value = test['Age'].median(),inplace = True)","133f300c":"test.isna().sum()","4f0182a3":"row_of_data=test.loc[test.Fare.isna()== True]\npclass=int(row_of_data['Pclass'])\nprint(pclass)","c3640896":"fare_replace = test.loc[test.Pclass == 3].Fare.median()\ntest['Fare'].fillna(value = fare_replace,inplace = True)\n","6f939de3":"y = data.iloc[:, 1].values\nx = data.iloc[:,data.columns != 'Survived' ].values","081517eb":"# the variables names\nvariables = ['PassengerId','Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\n\n\n# convert x into dataframe\nx  = pd.DataFrame(x, columns = variables)\n\n# convert test data into dataframe\ntest  = pd.DataFrame(test, columns = variables)","1ac52948":"# drop the non useful columns from train data \nx=x.drop(['Name','Cabin','Ticket','PassengerId'], axis = 1)\nx=x.drop(['Embarked'], axis = 1)","72cc6ec1":"\n# drop the non useful columns from test data also\ntest=test.drop(['Name','Cabin','Ticket','Embarked'], axis = 1)\npassengerid=test.iloc[:,0]\ntest=test.drop(['PassengerId'], axis = 1)","13a7c530":"x['Sex'].replace(to_replace='male',value=1,inplace=True)\nx['Sex'].replace(to_replace='female',value=0,inplace=True)\ntest['Sex'].replace(to_replace='male',value=1,inplace=True)\ntest['Sex'].replace(to_replace='female',value=0,inplace=True)","258809cb":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","52d3f38d":"\n\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(max_depth=10, min_samples_leaf=6, min_samples_split=6,n_estimators=1750)\nclassifier.fit(x_train, y_train)","353b98c5":"y_test_pred = classifier.predict(x_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_test_pred)\nprint(cm)\naccuracy_score(y_test, y_test_pred)","682abc02":" \ny_pred = classifier.predict(test)","5e8cd845":"\npredections = pd.DataFrame()\npredections['PassengerId']=passengerid\npredections['Survived']=y_pred","23453717":"predections.to_csv(\"pedictions.csv\",index= False)","4fa22e89":"**save it to csv**\n","9f0d25b2":"**fill the age **","8dd05719":"**get the class of the person of nan value in fare**","538b1ca6":"**evaluate the accuracy of the model with predicting test data we have from spliting**","2a934959":"**nitiate the random forrest regression  model  and fit it to the train data**","7e8abb19":"# model preprocessing\n","908b7e26":"**fill the the nan values of age in train and check the count again**","fc9323d5":"**encode male=1 , female=0 in both test and train data**","f72477fb":"**fill the fare nan value**","f62a5aff":"# model bulding","4b7fa619":"\n\n**split the data for testing the model befor applying it on the real test data**","c32f2898":"**count the sum of nan values in train data**","51f23ca8":"**count the nan values in test data**","3d3a560a":"**drop the unnescessary columns**","f6243f88":"**split the train data into x,y**","d942b758":"**make a dataframe and add 2 columns : passenger id , survived (predicted)**","35f681c6":"**predict the (survive) column  for kaggle test data**","debc23a3":"# model evaluation"}}