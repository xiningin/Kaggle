{"cell_type":{"1c06dd48":"code","841b9328":"code","af64342c":"code","c8518570":"code","daa01657":"code","7e744510":"code","69cb0d12":"code","e66aac0e":"code","0d1a5270":"code","71d8503a":"code","14c05b26":"code","7c79d9b2":"code","f809b558":"code","97cc77e1":"code","a3b84b1c":"code","770e73e5":"code","29378d57":"markdown","a905c154":"markdown","1b5d1db3":"markdown","4be933f0":"markdown"},"source":{"1c06dd48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","841b9328":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\n\n\nplt.style.use('fivethirtyeight')","af64342c":"heart_data = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\n\nheart_data.head(5)","c8518570":"heart_data.info()","daa01657":"heart_data[heart_data.duplicated()]","7e744510":"heart_data.drop_duplicates(inplace=True)","69cb0d12":"heart_data.info()","e66aac0e":"heart_data.describe()","0d1a5270":"#check correlation to idenitify what has more correlation with the out\n\nplt.figure(figsize=(16,8))\nsns.heatmap(heart_data.corr(),annot=True)\nplt.show()","71d8503a":"#split the data to feature and label\n\nX = heart_data.iloc[:, 0: -1]\ny = heart_data.iloc[:, -1:]","14c05b26":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 0)","7c79d9b2":"#scalled the data\nscaler = StandardScaler()\n\nX_test_scaled = scaler.fit_transform(X_test)\nX_train_scaled = scaler.fit_transform(X_train)\n\ny_train_scaled = scaler.fit_transform(y_train)\ny_test_scaled = scaler.fit_transform(y_test)","f809b558":"knn = KNeighborsClassifier(n_neighbors = 7)  \nknn.fit(X_train_scaled, y_train)\n\nknn_predicted = knn.predict(X_test_scaled)\n\n#model fit check \ntrain_score = knn.score(X_train_scaled, y_train)\ntest_score = knn.score(X_test_scaled, y_test)\n\nprint('test fit score: {}'.format(knn.score(X_test_scaled, y_test)))\nprint('train fit score: {}'.format(knn.score(X_train_scaled, y_train)))\nprint('Confusion matrix: {}'.format(confusion_matrix(y_test, knn_predicted)))\nprint('Accuracy score: {}'.format(accuracy_score(y_test, knn_predicted)))\nprint('Y_test: {}'.format(y_test.head(25)))\nprint('predicted data: {}'.format(knn_predicted[:15]))","97cc77e1":"lrc = LogisticRegression(C=10).fit(X_train_scaled, y_train)\n\npdct =lrc.predict(X_test_scaled)\n\nprint('model prediction: {}'.format(pdct))\nprint('model y test: {}'.format(y_test))\nprint('test fit score: {}'.format(lrc.score(X_test_scaled, y_test)))\nprint('train fit score: {}'.format(lrc.score(X_train_scaled, y_train)))\nprint('confussion metric: {}'.format(confusion_matrix(y_test, pdct)))\nprint('model prediction accuracy: {}'.format(accuracy_score(y_test, pdct)))\n","a3b84b1c":"#Suppot vector machine\nsvc = SVC()\nsvc.fit(X_train_scaled, y_train)\nsvc_predict = svc.predict(X_test_scaled)\n\n\nprint('model prediction: {}'.format(svc_predict))\nprint('model y test: {}'.format(y_test))\nprint('test fit score: {}'.format(svc.score(X_test_scaled, y_test)))\nprint('train fit score: {}'.format(svc.score(X_train_scaled, y_train)))\nprint('confussion metric: {}'.format(confusion_matrix(y_test, svc_predict)))\nprint('model prediction accuracy: {}'.format(accuracy_score(y_test, svc_predict)))","770e73e5":"dt = DecisionTreeClassifier(max_depth = 2).fit(X_train, y_train)\ndt.fit(X_train_scaled, y_train)\ndt_predict = dt.predict(X_test_scaled)\n\nprint('model prediction: {}'.format(dt_predict))\nprint('model y test: {}'.format(y_test))\nprint('test fit score: {}'.format(dt.score(X_test_scaled, y_test)))\nprint('train fit score: {}'.format(dt.score(X_train_scaled, y_train)))\nprint('confussion metric: {}'.format(confusion_matrix(y_test, dt_predict)))\nprint('model prediction accuracy: {}'.format(accuracy_score(y_test, dt_predict)))","29378d57":"**above heat map correlation is miss leading we know that excesises and chol directly correlated with heart desieses.******","a905c154":"logistic regression\n\n","1b5d1db3":"KNN and Suppory Vector machine got the good accuracy score = 90.16%\n\nKNN's confusion metrics is = [[24  3]\n                             [ 3 31]]\n\ntest fit score: 0.8688524590163934\n\ntrain fit score: 0.8547717842323651                          \n\n---------------------------------------------------------------------------\nSupport Vector machine's confusion metix = [[24  3]\n                                           [ 3 31]]\n                                          \ntest fit score: 0.9016393442622951\n \ntrain fit score: 0.908713692946058\n\nvector machine model has good model fit score. so I choice the Support Vector machine for this dataset\n\n\nNote:- I am new to Data Science\/Machine learning. I started machine learning a month ago. I really appreciate your suggestions the improve my skills. I am Kindly request from you, Please correct me If I went wrong in the flow which I did to this data set. I appreciate your ideas.","4be933f0":"# **model evaluation for the heart attack dataset.**\n\nAbout this dataset\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\nca: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\n\nValue 1: typical angina\nValue 2: atypical angina\nValue 3: non-anginal pain\nValue 4: asymptomatic\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrest_ecg : resting electrocardiographic results\n\nValue 0: normal\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\nthalach : maximum heart rate achieved\n\ntarget : 0= less chance of heart attack 1= more chance of heart attack"}}