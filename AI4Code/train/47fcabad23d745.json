{"cell_type":{"b9af10bd":"code","14179ecd":"code","4f6c7205":"code","f757a87d":"code","a73a7db9":"code","ceb4f381":"code","7f947f1e":"code","1ded24f5":"code","14c8b4b3":"code","1f7ed729":"code","420af45c":"code","05d7c79e":"code","965ef6b3":"markdown","055f5832":"markdown","a1bbbe31":"markdown","04b77168":"markdown","b97cd14e":"markdown","bef249f7":"markdown"},"source":{"b9af10bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14179ecd":"import matplotlib.pyplot as plt ","4f6c7205":"#read in data \ndf_agg = pd.read_csv('\/kaggle\/input\/ken-jee-youtube-data\/Aggregated_Metrics_By_Video.csv')\ndf_agg_country_sub = pd.read_csv('\/kaggle\/input\/ken-jee-youtube-data\/Aggregated_Metrics_By_Country_And_Subscriber_Status.csv')\ndf_ts = pd.read_csv('\/kaggle\/input\/ken-jee-youtube-data\/Video_Performance_Over_Time.csv')\ndf_comments = pd.read_csv('\/kaggle\/input\/ken-jee-youtube-data\/All_Comments_Final.csv')","f757a87d":"#look at columns for each dataframe \nprint(df_agg.columns)\nprint(df_agg_country_sub.columns)\nprint(df_ts.columns)\nprint(df_comments.columns)\n","a73a7db9":"df_agg.describe()","ceb4f381":"#likes distribution\ndf_agg.Likes.hist(bins = 100)","7f947f1e":"df_agg['Im\u00adpres\u00adsions click-through rate (%)'].hist()","1ded24f5":"#basic feature engieering example\ndf_agg['view_like_ratio'] = df_agg.Views \/ df_agg.Likes\nprint(df_agg[['view_like_ratio','Video title']].sort_values('view_like_ratio',ascending=False))\ndf_agg.view_like_ratio.hist()","14c8b4b3":"#views by country \n#looks like these numbers are daily averages, still useful?\npd.pivot_table(df_agg_country_sub, index = 'Country Code', values = 'Views').sort_values('Views',ascending = False)","1f7ed729":"#subscribed to not subscribed values \npd.pivot_table(df_agg_country_sub, index = 'Is Subscribed', values = 'Views').sort_values('Views',ascending = False)","420af45c":"#converting to date time \ndf_ts['Date'] = pd.to_datetime(df_ts['Date'])\n#getting views per day \nviews_per_day = pd.pivot_table(df_ts.loc[:,['Views','Date']],index = 'Date', values = 'Views', aggfunc = 'sum').reset_index()\n# graphing views per day\nplt.plot(views_per_day.Date,views_per_day.Views)","05d7c79e":"#top commented videos\npd.pivot_table(df_comments, index = 'VidId', values = 'Comment_ID', aggfunc = 'count').sort_values('Comment_ID', ascending = False)\n\n#could you join this back to the other dataset? ","965ef6b3":"## Time Series Data","055f5832":"## Comment Data","a1bbbe31":"## Aggregated data by country & subscriber","04b77168":"## Aggregated data \n**Notes**\n- Few videos skew number of likes, views, subscribers, etc. (what made these videos stand apart?)\n- What other variables like view \/ like ratio can we engineer to evaluate performance ","b97cd14e":"## Your Turn! \n### I started you off with the bare minimum, it's your turn to add your insights to the analysis. Excited to see what you come up with!!\nI'm constantly thinking about questions like:\n- What topics get the most viewership?\n- What do are people asking for in the comments?\n- What impacts watch time and click through rate?\n- Can we predict if a title will be clickable? \n- What thumbnails are most appealing (thumbnail data available in df_agg)\n- What is different about my \"viral\" videos and normal videos\n- Who is the core audience of my channel?\n\n### Some cool projects that could be done\n- Chatbot to answer common questions \n- Thumbnail feature extraction (taking characteristics from the thumbnails and analyzing if those predict ctr) - Could use something like cloudvision to extract features: https:\/\/cloud.google.com\/vision\/docs\/drag-and-drop ","bef249f7":"# Summary code \nIn this notebook I very lightly explore the data. The goal of this is to get you familiar with the basic features in the data so that you can start exploring it on your own. "}}