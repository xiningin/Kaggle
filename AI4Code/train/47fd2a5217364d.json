{"cell_type":{"77de8945":"code","ed3c4e2d":"code","370b8fb0":"code","d1470ec8":"code","2195c2c4":"code","e9e8b811":"code","41c07ddb":"code","7fd550ea":"code","3c1f4b64":"code","29263758":"code","9f1736ad":"code","8c805b2d":"code","f17d67bc":"code","daf30f9f":"markdown","78e2caee":"markdown","f888c0a3":"markdown","26a46825":"markdown"},"source":{"77de8945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ed3c4e2d":"import pandas as pd\nimport numpy  as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom torch.utils.data import TensorDataset, DataLoader\n","370b8fb0":"class Preproc:\n    def __init__(self):\n        self.train, self.valid = train_test_split(pd.read_csv('..\/input\/train.csv'), test_size = 0.1)\n        self.test              = pd.read_csv('..\/input\/test.csv')\n        self.fix() # fix wrong data according to discussion\n        self.proc_collection()\n        self.proc_budget()\n        self.proc_genres()\n        self.proc_popularity()\n        self.proc_runtime()\n        self.proc_homepage()\n        self.proc_overview()\n        self.proc_companies()\n        self.proc_countries()\n        self.proc_spoken_languages()\n        self.proc_Keywords()\n        self.proc_cast()\n        self.proc_crew()\n        self.proc_release_date()\n        self.proc_status()\n        self.label_encoding()\n        self.proc_drop()\n        self.train.revenue = self.train.revenue.apply(np.log)\n        self.valid.revenue = self.valid.revenue.apply(np.log)\n    \n    def fix(self):\n        self.train.loc[self.train['id'] == 16,'revenue']   = 192864\n        self.train.loc[self.train['id'] == 90,'budget']    = 30000000\n        self.train.loc[self.train['id'] == 118,'budget']   = 60000000\n        self.train.loc[self.train['id'] == 149,'budget']   = 18000000\n        self.train.loc[self.train['id'] == 313,'revenue']  = 12000000\n        self.train.loc[self.train['id'] == 451,'revenue']  = 12000000\n        self.train.loc[self.train['id'] == 464,'budget']   = 20000000\n        self.train.loc[self.train['id'] == 470,'budget']   = 13000000\n        self.train.loc[self.train['id'] == 513,'budget']   = 930000\n        self.train.loc[self.train['id'] == 797,'budget']   = 8000000\n        self.train.loc[self.train['id'] == 819,'budget']   = 90000000\n        self.train.loc[self.train['id'] == 850,'budget']   = 90000000\n        self.train.loc[self.train['id'] == 1007,'budget']  = 2\n        self.train.loc[self.train['id'] == 1112,'budget']  = 7500000\n        self.train.loc[self.train['id'] == 1131,'budget']  = 4300000\n        self.train.loc[self.train['id'] == 1359,'budget']  = 10000000\n        self.train.loc[self.train['id'] == 1542,'budget']  = 1\n        self.train.loc[self.train['id'] == 1570,'budget']  = 15800000\n        self.train.loc[self.train['id'] == 1571,'budget']  = 4000000\n        self.train.loc[self.train['id'] == 1714,'budget']  = 46000000\n        self.train.loc[self.train['id'] == 1721,'budget']  = 17500000\n        self.train.loc[self.train['id'] == 1865,'revenue'] = 25000000\n        self.train.loc[self.train['id'] == 1885,'budget']  = 12\n        self.train.loc[self.train['id'] == 2091,'budget']  = 10\n        self.train.loc[self.train['id'] == 2268,'budget']  = 17500000\n        self.train.loc[self.train['id'] == 2491,'budget']  = 6\n        self.train.loc[self.train['id'] == 2602,'budget']  = 31000000\n        self.train.loc[self.train['id'] == 2612,'budget']  = 15000000\n        self.train.loc[self.train['id'] == 2696,'budget']  = 10000000\n        self.train.loc[self.train['id'] == 2801,'budget']  = 10000000\n        self.train.loc[self.train['id'] == 335,'budget']   = 2\n        self.train.loc[self.train['id'] == 348,'budget']   = 12\n        self.train.loc[self.train['id'] == 470,'budget']   = 13000000\n        self.train.loc[self.train['id'] == 513,'budget']   = 1100000\n        self.train.loc[self.train['id'] == 640,'budget']   = 6\n        self.train.loc[self.train['id'] == 696,'budget']   = 1\n        self.train.loc[self.train['id'] == 797,'budget']   = 8000000\n        self.train.loc[self.train['id'] == 850,'budget']   = 1500000\n        self.train.loc[self.train['id'] == 1199,'budget']  = 5\n        self.train.loc[self.train['id'] == 1282,'budget']  = 9\n        self.train.loc[self.train['id'] == 1347,'budget']  = 1\n        self.train.loc[self.train['id'] == 1755,'budget']  = 2\n        self.train.loc[self.train['id'] == 1801,'budget']  = 5\n        self.train.loc[self.train['id'] == 1918,'budget']  = 592\n        self.train.loc[self.train['id'] == 2033,'budget']  = 4\n        self.train.loc[self.train['id'] == 2118,'budget']  = 344\n        self.train.loc[self.train['id'] == 2252,'budget']  = 130\n        self.train.loc[self.train['id'] == 2256,'budget']  = 1\n        self.train.loc[self.train['id'] == 2696,'budget']  = 10000000\n\n\n        self.valid.loc[self.valid['id'] == 16,'revenue']   = 192864\n        self.valid.loc[self.valid['id'] == 90,'budget']    = 30000000\n        self.valid.loc[self.valid['id'] == 118,'budget']   = 60000000\n        self.valid.loc[self.valid['id'] == 149,'budget']   = 18000000\n        self.valid.loc[self.valid['id'] == 313,'revenue']  = 12000000\n        self.valid.loc[self.valid['id'] == 451,'revenue']  = 12000000\n        self.valid.loc[self.valid['id'] == 464,'budget']   = 20000000\n        self.valid.loc[self.valid['id'] == 470,'budget']   = 13000000\n        self.valid.loc[self.valid['id'] == 513,'budget']   = 930000\n        self.valid.loc[self.valid['id'] == 797,'budget']   = 8000000\n        self.valid.loc[self.valid['id'] == 819,'budget']   = 90000000\n        self.valid.loc[self.valid['id'] == 850,'budget']   = 90000000\n        self.valid.loc[self.valid['id'] == 1007,'budget']  = 2\n        self.valid.loc[self.valid['id'] == 1112,'budget']  = 7500000\n        self.valid.loc[self.valid['id'] == 1131,'budget']  = 4300000\n        self.valid.loc[self.valid['id'] == 1359,'budget']  = 10000000\n        self.valid.loc[self.valid['id'] == 1542,'budget']  = 1\n        self.valid.loc[self.valid['id'] == 1570,'budget']  = 15800000\n        self.valid.loc[self.valid['id'] == 1571,'budget']  = 4000000\n        self.valid.loc[self.valid['id'] == 1714,'budget']  = 46000000\n        self.valid.loc[self.valid['id'] == 1721,'budget']  = 17500000\n        self.valid.loc[self.valid['id'] == 1865,'revenue'] = 25000000\n        self.valid.loc[self.valid['id'] == 1885,'budget']  = 12\n        self.valid.loc[self.valid['id'] == 2091,'budget']  = 10\n        self.valid.loc[self.valid['id'] == 2268,'budget']  = 17500000\n        self.valid.loc[self.valid['id'] == 2491,'budget']  = 6\n        self.valid.loc[self.valid['id'] == 2602,'budget']  = 31000000\n        self.valid.loc[self.valid['id'] == 2612,'budget']  = 15000000\n        self.valid.loc[self.valid['id'] == 2696,'budget']  = 10000000\n        self.valid.loc[self.valid['id'] == 2801,'budget']  = 10000000\n        self.valid.loc[self.valid['id'] == 335,'budget']   = 2\n        self.valid.loc[self.valid['id'] == 348,'budget']   = 12\n        self.valid.loc[self.valid['id'] == 470,'budget']   = 13000000\n        self.valid.loc[self.valid['id'] == 513,'budget']   = 1100000\n        self.valid.loc[self.valid['id'] == 640,'budget']   = 6\n        self.valid.loc[self.valid['id'] == 696,'budget']   = 1\n        self.valid.loc[self.valid['id'] == 797,'budget']   = 8000000\n        self.valid.loc[self.valid['id'] == 850,'budget']   = 1500000\n        self.valid.loc[self.valid['id'] == 1199,'budget']  = 5\n        self.valid.loc[self.valid['id'] == 1282,'budget']  = 9\n        self.valid.loc[self.valid['id'] == 1347,'budget']  = 1\n        self.valid.loc[self.valid['id'] == 1755,'budget']  = 2\n        self.valid.loc[self.valid['id'] == 1801,'budget']  = 5\n        self.valid.loc[self.valid['id'] == 1918,'budget']  = 592\n        self.valid.loc[self.valid['id'] == 2033,'budget']  = 4\n        self.valid.loc[self.valid['id'] == 2118,'budget']  = 344\n        self.valid.loc[self.valid['id'] == 2252,'budget']  = 130\n        self.valid.loc[self.valid['id'] == 2256,'budget']  = 1\n        self.valid.loc[self.valid['id'] == 2696,'budget']  = 10000000\n\n        self.test.loc[self.test['id'] == 3033,'budget'] = 250 \n        self.test.loc[self.test['id'] == 3051,'budget'] = 50\n        self.test.loc[self.test['id'] == 3084,'budget'] = 337\n        self.test.loc[self.test['id'] == 3224,'budget'] = 4  \n        self.test.loc[self.test['id'] == 3594,'budget'] = 25  \n        self.test.loc[self.test['id'] == 3619,'budget'] = 500  \n        self.test.loc[self.test['id'] == 3831,'budget'] = 3  \n        self.test.loc[self.test['id'] == 3935,'budget'] = 500  \n        self.test.loc[self.test['id'] == 4049,'budget'] = 995946 \n        self.test.loc[self.test['id'] == 4424,'budget'] = 3  \n        self.test.loc[self.test['id'] == 4460,'budget'] = 8  \n        self.test.loc[self.test['id'] == 4555,'budget'] = 1200000 \n        self.test.loc[self.test['id'] == 4624,'budget'] = 30 \n        self.test.loc[self.test['id'] == 4645,'budget'] = 500 \n        self.test.loc[self.test['id'] == 4709,'budget'] = 450 \n        self.test.loc[self.test['id'] == 4839,'budget'] = 7\n        self.test.loc[self.test['id'] == 3125,'budget'] = 25 \n        self.test.loc[self.test['id'] == 3142,'budget'] = 1\n        self.test.loc[self.test['id'] == 3201,'budget'] = 450\n        self.test.loc[self.test['id'] == 3222,'budget'] = 6\n        self.test.loc[self.test['id'] == 3545,'budget'] = 38\n        self.test.loc[self.test['id'] == 3670,'budget'] = 18\n        self.test.loc[self.test['id'] == 3792,'budget'] = 19\n        self.test.loc[self.test['id'] == 3881,'budget'] = 7\n        self.test.loc[self.test['id'] == 3969,'budget'] = 400\n        self.test.loc[self.test['id'] == 4196,'budget'] = 6\n        self.test.loc[self.test['id'] == 4221,'budget'] = 11\n        self.test.loc[self.test['id'] == 4222,'budget'] = 500\n        self.test.loc[self.test['id'] == 4285,'budget'] = 11\n        self.test.loc[self.test['id'] == 4319,'budget'] = 1\n        self.test.loc[self.test['id'] == 4639,'budget'] = 10\n        self.test.loc[self.test['id'] == 4719,'budget'] = 45\n        self.test.loc[self.test['id'] == 4822,'budget'] = 22\n        self.test.loc[self.test['id'] == 4829,'budget'] = 20\n        self.test.loc[self.test['id'] == 4969,'budget'] = 20\n        self.test.loc[self.test['id'] == 5021,'budget'] = 40 \n        self.test.loc[self.test['id'] == 5035,'budget'] = 1 \n        self.test.loc[self.test['id'] == 5063,'budget'] = 14 \n        self.test.loc[self.test['id'] == 5119,'budget'] = 2 \n        self.test.loc[self.test['id'] == 5214,'budget'] = 30 \n        self.test.loc[self.test['id'] == 5221,'budget'] = 50 \n        self.test.loc[self.test['id'] == 4903,'budget'] = 15\n        self.test.loc[self.test['id'] == 4983,'budget'] = 3\n        self.test.loc[self.test['id'] == 5102,'budget'] = 28\n        self.test.loc[self.test['id'] == 5217,'budget'] = 75\n        self.test.loc[self.test['id'] == 5224,'budget'] = 3 \n        self.test.loc[self.test['id'] == 5469,'budget'] = 20 \n        self.test.loc[self.test['id'] == 5840,'budget'] = 1 \n        self.test.loc[self.test['id'] == 5960,'budget'] = 30\n        self.test.loc[self.test['id'] == 6506,'budget'] = 11 \n        self.test.loc[self.test['id'] == 6553,'budget'] = 280\n        self.test.loc[self.test['id'] == 6561,'budget'] = 7\n        self.test.loc[self.test['id'] == 6582,'budget'] = 218\n        self.test.loc[self.test['id'] == 6638,'budget'] = 5\n        self.test.loc[self.test['id'] == 6749,'budget'] = 8 \n        self.test.loc[self.test['id'] == 6759,'budget'] = 50 \n        self.test.loc[self.test['id'] == 6856,'budget'] = 10\n        self.test.loc[self.test['id'] == 6858,'budget'] =  100\n        self.test.loc[self.test['id'] == 6876,'budget'] =  250\n        self.test.loc[self.test['id'] == 6972,'budget'] = 1\n        self.test.loc[self.test['id'] == 7079,'budget'] = 8000000\n        self.test.loc[self.test['id'] == 7150,'budget'] = 118\n        self.test.loc[self.test['id'] == 6506,'budget'] = 118\n        self.test.loc[self.test['id'] == 7225,'budget'] = 6\n        self.test.loc[self.test['id'] == 7231,'budget'] = 85\n        self.test.loc[self.test['id'] == 5222,'budget'] = 5\n        self.test.loc[self.test['id'] == 5322,'budget'] = 90\n        self.test.loc[self.test['id'] == 5350,'budget'] = 70\n        self.test.loc[self.test['id'] == 5378,'budget'] = 10\n        self.test.loc[self.test['id'] == 5545,'budget'] = 80\n        self.test.loc[self.test['id'] == 5810,'budget'] = 8\n        self.test.loc[self.test['id'] == 5926,'budget'] = 300\n        self.test.loc[self.test['id'] == 5927,'budget'] = 4\n        self.test.loc[self.test['id'] == 5986,'budget'] = 1\n        self.test.loc[self.test['id'] == 6053,'budget'] = 20\n        self.test.loc[self.test['id'] == 6104,'budget'] = 1\n        self.test.loc[self.test['id'] == 6130,'budget'] = 30\n        self.test.loc[self.test['id'] == 6301,'budget'] = 150\n        self.test.loc[self.test['id'] == 6276,'budget'] = 100\n        self.test.loc[self.test['id'] == 6473,'budget'] = 100\n        self.test.loc[self.test['id'] == 6842,'budget'] = 30\n    \n    def proc_collection(self):\n        self.train.belongs_to_collection = self.train.belongs_to_collection.notna()\n        self.valid.belongs_to_collection = self.valid.belongs_to_collection.notna()\n        self.test.belongs_to_collection  = self.test.belongs_to_collection.notna()\n    \n    def proc_budget(self):\n        self.train['median_budget'] = self.train.budget == 0\n        self.valid['median_budget'] = self.valid.budget == 0\n        self.test['median_budget']  = self.test.budget  == 0\n        median_budget = self.train.loc[self.train.median_budget == False, 'budget'].median()\n\n        self.train.loc[self.train.median_budget, 'budget'] = median_budget\n        self.valid.loc[self.valid.median_budget, 'budget'] = median_budget\n        self.test.loc[self.test.median_budget, 'budget']   = median_budget\n\n        self.train.budget = self.train.budget.apply(np.log)\n        self.valid.budget = self.valid.budget.apply(np.log)\n        self.test.budget  = self.test.budget.apply(np.log)\n        \n        mu  = self.train.budget.mean()\n        std = self.train.budget.std()\n\n        self.train.budget = self.train.budget.apply(lambda x : (x - mu) \/ std)\n        self.valid.budget = self.valid.budget.apply(lambda x : (x - mu) \/ std)\n        self.test.budget  = self.test.budget.apply(lambda x : (x - mu) \/ std)\n\n    def proc_popularity(self):\n        self.train.popularity = self.train.popularity.apply(np.sqrt)\n        self.valid.popularity = self.valid.popularity.apply(np.sqrt)\n        self.test.popularity  = self.test.popularity.apply(np.sqrt)\n        \n        mu  = self.train.popularity.mean()\n        std = self.train.popularity.std()\n\n        self.train.popularity = self.train.popularity.apply(lambda x : (x - mu) \/ std)\n        self.valid.popularity = self.valid.popularity.apply(lambda x : (x - mu) \/ std)\n        self.test.popularity  = self.test.popularity.apply(lambda x : (x - mu) \/ std)\n\n    def proc_runtime(self):\n        median_runtime = self.train.runtime.median()\n        self.train.runtime.fillna(median_runtime, inplace = True)\n        self.valid.runtime.fillna(median_runtime, inplace = True)\n        self.test.runtime.fillna(median_runtime, inplace = True)\n\n        mu  = self.train.runtime.mean()\n        std = self.train.runtime.std()\n\n        self.train.runtime = self.train.runtime.apply(lambda x : (x - mu) \/ std)\n        self.valid.runtime = self.valid.runtime.apply(lambda x : (x - mu) \/ std)\n        self.test.runtime  = self.test.runtime.apply(lambda x : (x - mu) \/ std)\n\n    def proc_genres(self):\n        self.train.genres.fillna('[]', inplace =  True)\n        self.valid.genres.fillna('[]', inplace =  True)\n        self.test.genres.fillna('[]', inplace =  True)\n\n        genres  = pd.concat([self.train.genres, self.valid.genres, self.test.genres])\n        gen_set = set()\n        for rec in genres:\n            for g in eval(rec):\n                gen_set.add(g['name'])\n        for g in gen_set:\n            self.train[g] = self.train.genres.apply(lambda rec : g in rec)\n            self.valid[g] = self.valid.genres.apply(lambda rec : g in rec)\n            self.test[g]  = self.test.genres.apply(lambda rec : g in rec)\n        self.train.drop(columns = 'genres', inplace = True)\n        self.valid.drop(columns = 'genres', inplace = True)\n        self.test.drop( columns = 'genres', inplace = True)\n    \n    def proc_homepage(self):\n        self.train.homepage = self.train.homepage.notna()\n        self.valid.homepage = self.valid.homepage.notna()\n        self.test.homepage  = self.test.homepage.notna()\n    \n    def proc_imdb(self):\n        self.train.drop(columns = 'imdb_id', inplace = True)\n        self.valid.drop(columns = 'imdb_id', inplace = True)\n        self.test.drop(columns = 'imdb_id', inplace = True)\n\n    def proc_drop(self):\n        self.train.drop(columns = ['imdb_id', 'original_title', 'poster_path', 'title', 'tagline'], inplace = True)\n        self.valid.drop(columns = ['imdb_id', 'original_title', 'poster_path', 'title', 'tagline'], inplace = True)\n        self.test.drop(columns  = ['imdb_id', 'original_title', 'poster_path', 'title', 'tagline'], inplace = True)\n    \n    def proc_overview(self):\n        self.train.overview = self.train.overview.fillna('').apply(lambda rec : len(rec.split()))\n        self.valid.overview = self.valid.overview.fillna('').apply(lambda rec : len(rec.split()))\n        self.test.overview  = self.test.overview.fillna('').apply(lambda rec : len(rec.split()))\n\n    def proc_companies(self):\n        self.train.production_companies = self.train.production_companies.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.production_companies = self.valid.production_companies.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.production_companies  = self.test.production_companies.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_countries(self):\n        self.train.production_countries = self.train.production_countries.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.production_countries = self.valid.production_countries.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.production_countries  = self.test.production_countries.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_spoken_languages(self):\n        self.train.spoken_languages = self.train.spoken_languages.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.spoken_languages = self.valid.spoken_languages.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.spoken_languages  = self.test.spoken_languages.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_Keywords(self):\n        self.train.Keywords = self.train.Keywords.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.Keywords = self.valid.Keywords.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.Keywords  = self.test.Keywords.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_cast(self):\n        self.train.cast = self.train.cast.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.cast = self.valid.cast.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.cast  = self.test.cast.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_crew(self):\n        self.train.crew = self.train.crew.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.valid.crew = self.valid.crew.fillna('[]').apply(lambda rec : len(eval(rec)))\n        self.test.crew  = self.test.crew.fillna('[]').apply(lambda rec : len(eval(rec)))\n\n    def proc_release_date(self):\n        self.train['release_year'] = self.train.release_date.astype('datetime64').apply(lambda rec : rec.year if rec.year < 2019 else rec.year - 100)\n        self.valid['release_year'] = self.valid.release_date.astype('datetime64').apply(lambda rec : rec.year if rec.year < 2019 else rec.year - 100)\n        self.test['release_year']  = self.test.release_date.astype('datetime64').apply(lambda rec : rec.year  if rec.year < 2019 else rec.year - 100)\n        self.test.release_year.fillna(self.train.release_year.median(), inplace = True)\n\n        self.train['release_month'] = self.train.release_date.astype('datetime64').apply(lambda rec : rec.month)\n        self.valid['release_month'] = self.valid.release_date.astype('datetime64').apply(lambda rec : rec.month)\n        self.test['release_month']  = self.test.release_date.astype('datetime64').apply(lambda rec  : rec.month)\n        self.test.release_month.fillna(self.train.release_month.median(), inplace = True)\n\n        self.train.drop(columns = 'release_date', inplace = True)\n        self.valid.drop(columns = 'release_date', inplace = True)\n        self.test.drop( columns = 'release_date', inplace = True)\n    \n    def proc_status(self):\n        self.test.status.fillna('Released', inplace = True)\n    \n    def label_encoding(self):\n        self.cat_names  = [ 'belongs_to_collection' , 'homepage' , 'original_language' , 'status' , 'median_budget' , 'TV Movie' , 'Drama' , 'Music' , 'Horror' , 'Foreign' , 'War' , 'Romance' , 'Mystery' , 'Western' , 'Thriller' , 'Science Fiction' , 'Action' , 'Adventure' , 'Animation' , 'Fantasy' , 'History' , 'Documentary' , 'Comedy' , 'Family' , 'Crime' , 'release_month']\n        self.target     = 'revenue'\n        \n        self.cat_nums = []\n        for cat in self.cat_names:\n            all_cat         = pd.concat([self.train[cat], self.valid[cat], self.test[cat]])\n            encoder         = LabelEncoder().fit(all_cat)\n            self.train[cat] = encoder.transform(self.train[cat])\n            self.valid[cat] = encoder.transform(self.valid[cat])\n            self.test[cat]  = encoder.transform(self.test[cat])\n            self.cat_nums.append(len(encoder.classes_))\n    \n    def cont_normalization(self):\n        self.cont_names = [ 'budget' , 'overview' , 'popularity' , 'production_companies' , 'production_countries' , 'runtime' , 'spoken_languages' , 'Keywords' , 'cast' , 'crew' , 'release_year']\n        for cont in self.cont_names:\n            mean             = self.train[cont].mean()\n            std              = self.train[cont].std()\n            self.train[cont] = self.train[cont].apply(lambda x : (x - mean) \/ std)\n            self.valid[cont] = self.valid[cont].apply(lambda x : (x - mean) \/ std)\n            self.test[cont]  = self.test[cont].apply(lambda x  : (x - mean) \/ std)\n","d1470ec8":"proc = Preproc()\n","2195c2c4":"proc.train.head()","e9e8b811":"proc.valid.head()","41c07ddb":"proc.test.head()","7fd550ea":"import numpy  as np\nimport torch\nimport torch.nn as nn\n\nclass EmbModel(nn.Module):\n    def __init__(self, cat_nums, dim, num_hiddens = 50, dr = 0.01):\n        super(EmbModel, self).__init__()\n        self.cat_nums       = cat_nums\n        self.total_emb_size = 0\n        self.emb_list       = nn.ModuleList()\n        for cn in cat_nums:\n            emb_size = min(50, (cn + 1) \/\/ 2)\n            self.emb_list.append(nn.Embedding(cn, emb_size))\n            self.total_emb_size += emb_size\n        \n        self.emb_drop = nn.Dropout(p = dr)\n        self.mlp = nn.Sequential(\n                nn.Linear(self.total_emb_size + dim, num_hiddens), \n                nn.ReLU(inplace = True), \n                nn.Dropout(p = dr), \n                nn.Linear(num_hiddens, num_hiddens), \n                nn.ReLU(inplace = True), \n                nn.Dropout(p = dr), \n                nn.Linear(num_hiddens, 1)\n        )\n    def forward(self, xcat, xcont):\n        embs   = torch.cat([self.emb_list[i](xcat[:, i]) for i in range(len(self.cat_nums))], dim = 1)\n        mlp_in = torch.cat((self.emb_drop(embs), xcont), dim = 1)\n        return self.mlp(mlp_in)\n","3c1f4b64":"proc.cont_normalization()\nxcat = torch.LongTensor(proc.train[proc.cat_names].values.astype(np.int64))\nxcont = torch.FloatTensor(proc.train[proc.cont_names].values)\ny = torch.FloatTensor(proc.train.revenue.values)\n\nvxcat = torch.LongTensor(proc.valid[proc.cat_names].values.astype(np.int64))\nvxcont = torch.FloatTensor(proc.valid[proc.cont_names].values)\nvy = torch.FloatTensor(proc.valid.revenue.values)\n\nnn = EmbModel(proc.cat_nums, len(proc.cont_names),num_hiddens=100, dr = 0.3)\nopt = torch.optim.Adam(nn.parameters(), lr = 3e-3)\nscheduler = torch.optim.lr_scheduler.LambdaLR(opt, lambda iter: (1+iter)**-0.3)\ncrit = torch.nn.MSELoss(reduction='sum')\n\n\nym = y.mean()\nystd = y.std()\n\ny = (y - ym) \/ ystd\nvy = (vy - ym) \/ ystd\n\nds = TensorDataset(xcat,xcont,y)\ndl = DataLoader(ds,shuffle=True,batch_size=32)","29263758":"for epoch in range(60):\n    mse = 0.\n    for bx_cat,bx_cont,by in dl:\n        py = nn(bx_cat,bx_cont).squeeze()\n        loss = crit(py,by)\n        mse += loss.detach().item()\n        opt.zero_grad()\n        loss.backward()\n        opt.step()\n        scheduler.step()\n    \n    vmse = crit(vy, nn(vxcat,vxcont).squeeze()) \/ vy.numel()\n    print('Epoch %4d loss = %g %g' % (epoch, ystd**2 * mse \/ y.numel(), ystd**2 * vmse))","9f1736ad":"\ntx_cat = torch.LongTensor(proc.test[proc.cat_names].values.astype(np.int64))\ntx_cont = torch.FloatTensor(proc.test[proc.cont_names].values.astype(np.float64))\n\nnum_ens = 1000\npred = torch.zeros(num_ens, tx_cat.shape[0])\nwith torch.no_grad():\n    for i in range(num_ens):\n        pred[i] = ystd * nn(tx_cat, tx_cont).squeeze() + ym\n\npred_test = pred.mean(dim = 0).exp().numpy()","8c805b2d":"proc.test.set_index('id', inplace = True)\nproc.test['revenue'] = pred_test","f17d67bc":"proc.test.loc[:,['revenue']].to_csv('submission.csv')","daf30f9f":"# Mini-batch training","78e2caee":"# Preprocessing","f888c0a3":"# Neural network with Embedding and Dropout","26a46825":"# MC-dropout Ensemble"}}