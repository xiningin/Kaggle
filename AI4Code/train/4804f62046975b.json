{"cell_type":{"a9b8567d":"code","530768c7":"code","3086c360":"code","9196dac2":"code","ae12bbb8":"code","39099169":"code","bf8d3059":"code","6629ce81":"code","95f7e879":"code","3f474c16":"code","88b457f6":"code","ff3f987d":"code","8aab50a7":"code","77c6cb6e":"code","2730b698":"code","546b8182":"code","f6502348":"code","1b4895ca":"code","ff3811d0":"code","e2f4915d":"code","93a9f490":"code","d62ff857":"code","711d526d":"code","646d8952":"code","744d1393":"code","45336efc":"code","104b1f71":"code","d4fd3ecb":"code","7e2a0d6c":"code","04a12d71":"code","af79096f":"code","bb297e78":"code","fd93a024":"code","223da70e":"code","9f9362e9":"code","75f5c30b":"code","877c2d43":"code","094ceef6":"code","8668bb01":"code","65af0875":"code","fbfc4071":"code","8fc9e6f3":"code","a8cb22fd":"code","b6a1f56e":"code","8dd637d7":"code","132e65d1":"code","c0c3f21f":"code","06102007":"code","759e134a":"code","bd44d56e":"code","b77ad279":"code","331be5c7":"code","fe0d5afe":"code","a689eb16":"code","fbe0d22f":"code","d12bc134":"code","1d3e42c9":"code","9d8afa23":"code","52040c51":"code","fd64806f":"code","ceaae88e":"code","690f8712":"code","eea9f025":"code","efaa7f7f":"code","22c46f6d":"code","85e75c9a":"code","c914af1f":"code","958ef9fe":"code","5f95744b":"code","bc4fb2f0":"markdown"},"source":{"a9b8567d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","530768c7":"train = pd.read_csv('\/kaggle\/input\/Train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Test.csv')\n","3086c360":"train.head()","9196dac2":"train.describe(include=\"O\")","ae12bbb8":"test.describe(include=\"O\")","39099169":"train.describe()","bf8d3059":"train.corr(method ='pearson')","6629ce81":"train.describe(include='O')","95f7e879":"train.Product_Brand.unique()","3f474c16":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.figure(figsize=(20,3))\nsns.countplot(x='Item_Category', data=train)\nplt.xticks(plt.xticks()[0], train.Item_Category, rotation=90)\nplt.show()","88b457f6":"train.groupby('Item_Category')[['Item_Category','Subcategory_1','Subcategory_2']].count()\n","ff3f987d":"test","8aab50a7":"test.drop(columns=['Item_Rating','Date'], inplace=True)","77c6cb6e":"test","2730b698":"test","546b8182":"df = train\ndf\n","f6502348":"df.drop(columns=['Selling_Price','Item_Rating','Date'],inplace=True)","1b4895ca":"data = pd.concat([df, test], ignore_index=True)","ff3811d0":"data.iloc[0:2452]","e2f4915d":"from sklearn.preprocessing import LabelEncoder\n","93a9f490":"dum_df = pd.get_dummies(data[\"Item_Category\"], prefix='Type_is_' )\ndum_df\ndata = data.join(dum_df)\n","d62ff857":"data.drop(columns=['Item_Category'], inplace=True)\ndata","711d526d":"dum_df = pd.get_dummies(data[\"Subcategory_1\"], prefix='sub_1_Type_is_' )\ndum_df\n","646d8952":"data = data.join(dum_df)\ndata.drop(columns=['Subcategory_1'], inplace=True)\ndata","744d1393":"dum_df = pd.get_dummies(data[\"Subcategory_2\"], prefix='sub_2_Type_is_' )\ndum_df","45336efc":"\ndata = data.join(dum_df)\ndata.drop(columns=['Subcategory_2'], inplace=True)","104b1f71":"data","d4fd3ecb":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndata = data\ndata['Product_Brand'] = le.fit_transform(data['Product_Brand'])\ndata.tail(20)","7e2a0d6c":"data = data.drop(columns=['Product'])","04a12d71":"data","af79096f":"x_data = data.iloc[0:2452]\nx_data\ntest_y = data.iloc[2452:]\ntest_y","bb297e78":"train","fd93a024":"train = pd.read_csv('\/kaggle\/input\/Train.csv')\ny_data = train[['Selling_Price']]\ny_data\n","223da70e":"\nfrom math import sqrt \nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error","9f9362e9":"x_data.shape, y_data.shape","75f5c30b":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import KFold\n\nerrxgb = []\ny_pred_totxgb = []\n\nfold = KFold(n_splits=15, shuffle=True, random_state=42)\n\nfor train_index, test_index in fold.split(x_data):\n#     X_train, X_test = .loc[train_index], x_data.loc[test_index]\n#     y_train, y_test = y_data[train_index], [test_index]\n\n    X_train, X_test = x_data.iloc[train_index], x_data.iloc[test_index]\n    y_train, y_test = y_data.iloc[train_index], y_data.iloc[test_index]\n    \n    xgb = XGBRegressor(random_state=42)\n    xgb.fit(X_train, y_train)\n\n    y_pred_xgb = xgb.predict(X_test)\n    y_pred_xgb = np.abs(y_pred_xgb)\n  \n    score = np.sqrt(mean_squared_log_error(y_test, y_pred_xgb))\n    print(score)\n#     print(\"RMSLE: \", sqrt(mean_squared_log_error(np.exp(y_test), np.exp(y_pred_xgb))))\n\n#     errxgb.append(sqrt(mean_squared_log_error(np.exp(y_test), np.exp(y_pred_xgb))))\n    p = xgb.predict(test_y)\n    y_pred_totxgb.append(p)","877c2d43":"\nfinal = (np.mean(y_pred_totxgb,0))","094ceef6":"# for i in final:\n#     print(i)","8668bb01":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split","65af0875":"X_train, X_test, Y_train, Y_test = train_test_split(x_data, y_data, test_size=0.05, random_state=43)\n\n","fbfc4071":"model = XGBRegressor(\n                    \n)\n# from sklearn.ensemble import RandomForestRegressor\n# from sklearn.neighbors import KNeighborsRegressor\n# from sklearn.linear_model import Ridge\n# from sklearn.preprocessing import StandardScaler\n# from sklearn.pipeline import make_pipeline\n# model = make_pipeline(StandardScaler(), KNeighborsRegressor(n_neighbors=1,algorithm = \"brute\",p=1))","8fc9e6f3":"model.fit(x_data, y_data)","a8cb22fd":"preds = model.predict(X_test)\npreds = np.abs(preds)","b6a1f56e":"from sklearn.metrics import mean_squared_log_error\nscore = np.sqrt(mean_squared_log_error(Y_test, preds))\nprint(score)\n# from sklearn.metrics import r2_score\n# print(r2_score(Y_test, preds))","8dd637d7":"test_predict = model.predict(test_y)","132e65d1":"# xgb1 = XGBRegressor()\n# parameters = {\n#               'learning_rate': [.07,0.9,1.0,1.5,1.9,2.0,2.5,2.9,3.0,3.3,3.5], #so called `eta` value\n#               'max_depth': [5,7,8,9],\n#               'min_child_weight': [1,2,3,4,5],\n#               }\n\n# xgb_grid = GridSearchCV(xgb1,\n#                         parameters,\n#                         cv = 3,\n#                         n_jobs = 5,\n#                         verbose=True)\n\n# xgb_grid.fit(X_train, Y_train)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","c0c3f21f":"# for i in test_predict:\n#     print (i)","06102007":"import lightgbm as lgb","759e134a":"new_model = lgb.LGBMRegressor()","bd44d56e":"new_model.fit(X_train, Y_train)","b77ad279":"preds = new_model.predict(X_test)","331be5c7":"import numpy as np\npreds = np.abs(preds)","fe0d5afe":"from sklearn.metrics import mean_squared_log_error\nscore = np.sqrt(mean_squared_log_error(Y_test, preds))\nprint(score)\nnew_model.score(X_test, Y_test)","a689eb16":"import catboost as cb","fbe0d22f":"cat_model = cb.CatBoostRegressor()","d12bc134":"cat_model.fit(X_train, Y_train)","1d3e42c9":"preds = cat_model.predict(X_test)\npreds = np.abs(preds)","9d8afa23":"from sklearn.metrics import mean_squared_log_error\nscore = np.sqrt(mean_squared_log_error(Y_test, preds))\nprint(score)\ncat_model.score(X_test, Y_test)","52040c51":"test_predict = cat_model.predict(test_y)","fd64806f":"# for i in test_predict:\n#     print (i)","ceaae88e":"from sklearn import linear_model\nreg = linear_model.Lasso(alpha=0.1)\n","690f8712":"reg.fit(X_train, Y_train)","eea9f025":"preds = cat_model.predict(X_test)\npreds = np.abs(preds)","efaa7f7f":"from sklearn import linear_model\nreg = linear_model.Lasso(alpha=0.1)\n\n\n","22c46f6d":"reg.fit(X_train, Y_train)","85e75c9a":"preds = reg.predict(X_test)\npreds = np.abs(preds)","c914af1f":"from sklearn.metrics import mean_squared_log_error\nscore = np.sqrt(mean_squared_log_error(Y_test, preds))\nprint(score)","958ef9fe":"test_predict = reg.predict(test_y)","5f95744b":"# for i in test_predict:\n#     print (i)","bc4fb2f0":"> trying new method"}}