{"cell_type":{"bb964dee":"code","30f3b7c2":"code","c4dad731":"code","ee4ea1d2":"code","7b91caf6":"code","14419b60":"code","13be8e17":"code","810320bc":"code","275cec24":"code","802c2a44":"code","b6433761":"code","824e9778":"code","0ea6ae9b":"code","c268d1fe":"code","4ad6e630":"code","8b54edde":"code","45f8fce9":"code","d9723328":"code","e984f5fd":"code","7e2fd013":"code","f4082235":"code","dfad3a12":"code","dd594ff4":"code","95beed36":"code","5100d68b":"code","d7e18acb":"code","f098d1fe":"code","bf7b118f":"code","d7f86ec1":"code","6fc9411c":"code","dfe1719a":"code","3241d58b":"code","86893a5d":"code","913262fa":"code","46f4081f":"markdown","40f0b708":"markdown","e3ae9e51":"markdown","1c28b308":"markdown","79534eda":"markdown","e558b257":"markdown","e28e3a59":"markdown","b7b5e8c7":"markdown","52d4d70c":"markdown","bcd780f4":"markdown"},"source":{"bb964dee":"import os\nimport glob\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense,GlobalAveragePooling2D, Dropout\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.callbacks import Callback,EarlyStopping","30f3b7c2":"path = '..\/input\/surface-crack-detection\/'\npath_all = list(glob.glob(path+'**\/*jpg'))\npath_Negative = path + 'Negative\/*.jpg'\npath_Positive = path + 'Positive\/*.jpg'","c4dad731":"sns.barplot(x=['Negative','Positive'], y=[len(path_Negative), len(path_Positive)])\nplt.title('Negative and Positive')","ee4ea1d2":"labels = list(map(lambda x:os.path.split(os.path.split(x)[0])[1], path_all))\nfile_Path = pd.Series(path_all, name='File_Path').astype(str)\nlabels = pd.Series(labels, name='Label')\ndata = pd.concat([file_Path, labels], axis=1)\ndata = data.sample(frac=1).reset_index(drop=True)\ndata.head()","7b91caf6":"fig, axes = plt.subplots(nrows=2, ncols=3,figsize=(10,5), subplot_kw={'xticks':[], 'yticks':[]})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data.File_Path[i]))\n    ax.set_title(data.Label[i])\nplt.tight_layout()\nplt.show()","14419b60":"train_df, test_df = train_test_split(data, test_size=0.2, random_state=42)","13be8e17":"def gen(pre,train,test):\n    train_datagen = ImageDataGenerator(\n                        preprocessing_function=pre,\n                        validation_split=0.2)\n    test_datagen = ImageDataGenerator(\n                        preprocessing_function=pre)\n    \n    train_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='File_Path',\n        y_col='Label',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=64,\n        shuffle=True,\n        seed=42\n        )\n    valid_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='File_Path',\n        y_col='Label',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=64,\n        shuffle=False,\n        seed=42\n    )\n    test_gen = test_datagen.flow_from_dataframe(\n        dataframe=test,\n        x_col='File_Path',\n        y_col='Label',\n        target_size=(100,100),\n        color_mode='rgb',\n        class_mode='categorical',\n        batch_size=64,\n        shuffle=False\n    )\n    return train_gen, valid_gen, test_gen","810320bc":"def func(name_model):\n    pre_model = name_model(input_shape=(100,100, 3),\n                   include_top=False,\n                   weights='imagenet',\n                   pooling='avg')\n    pre_model.trainable = False\n    inputs = pre_model.input\n\n    x = Dense(64, activation='relu')(pre_model.output)\n    x = Dense(64, activation='relu')(x)\n    outputs = Dense(2, activation='softmax')(x)\n\n    model = Model(inputs=inputs, outputs=outputs)\n    model.compile(loss = 'categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])\n    my_callbacks  = [EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=1,\n                              mode='auto')]\n    return model, my_callbacks","275cec24":"def plot(history,df_test,test_gen,train_gen):\n    # Plotting Accuracy, val_accuracy, loss, val_loss\n    fig, ax = plt.subplots(1, 2, figsize=(10, 3))\n    ax = ax.ravel()\n\n    for i, met in enumerate(['accuracy', 'loss']):\n        ax[i].plot(history.history[met])\n        ax[i].plot(history.history['val_' + met])\n        ax[i].set_title('Model {}'.format(met))\n        ax[i].set_xlabel('epochs')\n        ax[i].set_ylabel(met)\n        ax[i].legend(['train', 'val'])\n        \n    # Predict Data Test\n    pred = model.predict(test_gen )\n    pred = np.argmax(pred,axis=1)\n    labels = (train_gen.class_indices)\n    labels = dict((v,k) for k,v in labels.items())\n    pred = [labels[k] for k in pred]\n    \n    # Classification report\n    cm=confusion_matrix(df_test.Label,pred)\n    clr = classification_report(df_test.Label, pred, target_names=[\"NEGATIVE\", \"POSITIVE\"])\n    print(clr)\n    # Display 6 picture of the dataset with their labels\n    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(plt.imread(df_test.File_Path.iloc[i+1]))\n        ax.set_title(f\"True: {df_test.Label.iloc[i+1]}\\nPredicted: {pred[i+1]}\")\n    plt.tight_layout()\n    plt.show()\n        \n    return history","802c2a44":"def result_test(test,model_use):\n    results = model_use.evaluate(test, verbose=0)\n    \n    print(\"    Test Loss: {:.5f}\".format(results[0]))\n    print(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))\n    \n    return results","b6433761":"from tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\nvgg_pre=preprocess_input\ntrain_gen_VGG, valid_gen_VGG, test_gen_VGG = gen(vgg_pre,train_df,test_df)","824e9778":"model, callback=func(VGG16)","0ea6ae9b":"history = model.fit(\n    train_gen_VGG,\n    validation_data=valid_gen_VGG,\n    epochs=100,\n    callbacks=callback\n)","c268d1fe":"history=plot(history,test_df,test_gen_VGG,train_gen_VGG)","4ad6e630":"result = result_test(test_gen_VGG,model)","8b54edde":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nRestNet_pre=preprocess_input\ntrain_gen_RestNet, valid_gen_RestNet, test_gen_RestNet = gen(RestNet_pre,train_df,test_df)","45f8fce9":"ResNet50_model, callback=func(ResNet50)","d9723328":"history = ResNet50_model.fit(\n    train_gen_RestNet,\n    validation_data=valid_gen_RestNet,\n    epochs=100,\n    callbacks=callback\n)","e984f5fd":"history_ResNet=plot(history,test_df,test_gen_RestNet,train_gen_RestNet)","7e2fd013":"result_ResNet = result_test(test_gen_RestNet,ResNet50_model)","f4082235":"result_ResNet","dfad3a12":"from tensorflow.keras.applications import Xception\nfrom tensorflow.keras.applications.xception import preprocess_input\nXception_pre=preprocess_input\ntrain_gen_Xception, valid_gen_Xception, test_gen_Xception = gen(Xception_pre,train_df,test_df)","dd594ff4":"Xception_model, callback=func(Xception)","95beed36":"history = Xception_model.fit(\n    train_gen_Xception,\n    validation_data=valid_gen_Xception,\n    epochs=100,\n    callbacks=callback\n)","5100d68b":"history_Xception=plot(history,test_df,test_gen_Xception,train_gen_Xception)","d7e18acb":"result_Xception = result_test(test_gen_Xception,Xception_model)","f098d1fe":"from tensorflow.keras.applications import MobileNet\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nMobileNet_pre=preprocess_input\ntrain_gen_MobileNet, valid_gen_MobileNet, test_gen_MobileNet = gen(MobileNet_pre,train_df,test_df)","bf7b118f":"MobileNet_model, callback=func(MobileNet)","d7f86ec1":"history_MobileNet = MobileNet_model.fit(\n    train_gen_MobileNet,\n    validation_data=valid_gen_MobileNet,\n    epochs=100,\n    callbacks=callback\n)","6fc9411c":"history=plot(history,test_df,test_gen_MobileNet,train_gen_MobileNet)","dfe1719a":"result_MobileNet = result_test(test_gen_MobileNet,MobileNet_model)","3241d58b":"output = pd.DataFrame({'Model':['VGG16','ResNet50','Xception','MobileNet'],\n                      'Accuracy':[result[1], result_ResNet[1], result_Xception[1], result_MobileNet[1]]})","86893a5d":"output","913262fa":"sns.barplot(x='Accuracy', y='Model', data=output)","46f4081f":"# Xception","40f0b708":"# Train & Test Split","e3ae9e51":"# Load Dataset","1c28b308":"# Visualizing the Dataset","79534eda":"# VGG16","e558b257":"# Final Report","e28e3a59":"# MobileNet ","b7b5e8c7":"# ResNet50 ","52d4d70c":"# Functions","bcd780f4":"# Importing Libraries"}}