{"cell_type":{"7eaa8568":"code","be688586":"code","6668d394":"code","a74f2603":"code","d8cc35d5":"code","509570fe":"code","e759f7e4":"code","d0a06d18":"code","4c0313d2":"code","669cd7de":"code","d390c1cd":"code","c9e98565":"code","8d20c98a":"code","05179b40":"code","7eaeb11e":"code","c6acea4a":"code","582b132f":"code","6ce96444":"code","220b63cd":"code","2b3eaf7e":"code","d3c2bde5":"code","50d8a64e":"code","0d705568":"markdown","577fc363":"markdown","22f708ef":"markdown","b0d39015":"markdown","9cc5c510":"markdown","0cbb6834":"markdown","51863245":"markdown","f09c300e":"markdown","e824dfa3":"markdown","8a01906f":"markdown","2653e20e":"markdown","2997fbdd":"markdown","2fdfc40e":"markdown","74a041ac":"markdown"},"source":{"7eaa8568":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix","be688586":"path = '\/kaggle\/input\/sign-language-mnist\/'\nos.listdir(path)","6668d394":"train_data = pd.read_csv(path+'sign_mnist_train.csv')\ntest_data = pd.read_csv(path+'sign_mnist_test.csv')","a74f2603":"print('Number samples train:', len(train_data))\nprint('Number samples test:', len(test_data))","d8cc35d5":"train_data.head()","509570fe":"test_data.head()","e759f7e4":"labels = list(train_data['label'].value_counts().keys().sort_values())","d0a06d18":"print('Number of image pixel:', len(train_data.columns[1:]))\nprint('Quadratic image size:', int(np.sqrt(len(train_data.columns[1:]))))\nprint('Number of labels:', len(labels))","4c0313d2":"fig, axs = plt.subplots(1, 2, figsize=(12, 4), sharey=True)\n    \naxs[0].bar(labels, 100*train_data['label'].value_counts().sort_index().values\/len(train_data), color='yellowgreen')\naxs[1].bar(labels, 100*test_data['label'].value_counts().sort_index().values\/len(test_data), color='sandybrown')\naxs[0].grid()\naxs[1].grid()\naxs[0].set_title('Train labels')\naxs[1].set_title('Test labels')\naxs[0].set_ylabel('%')\nplt.show()","669cd7de":"X_train = train_data[train_data.columns[1:]]\nX_test = test_data[test_data.columns[1:]]\n\nX_train = X_train.values.reshape(-1, 28, 28, 1)\nX_test = X_test.values.reshape(-1, 28, 28, 1)\n\ny_train = train_data['label']\ny_test = test_data['label']\n\ny_train = to_categorical(y_train, num_classes = 25)\ny_test = to_categorical(y_test, num_classes = 25)","d390c1cd":"fig, axs = plt.subplots(4, 6, figsize=(15, 10))\nfig.subplots_adjust(hspace = 0.2, wspace=.1)\naxs = axs.ravel()\nfor i in range(24):\n    idx = train_data[train_data['label']==labels[i]].index[0]\n    axs[i].imshow(X_train[idx][:,:,0], cmap='gray')\n    axs[i].set_title(y_train[idx].argmax())\n    axs[i].set_xticklabels([])\n    axs[i].set_yticklabels([])","c9e98565":"X_train = X_train.astype('float32')\/255\nX_test = X_test.astype('float32')\/255","8d20c98a":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(25, activation = \"softmax\"))","05179b40":"optimizer = RMSprop(lr=0.001,rho=0.9, epsilon=1e-08, decay=0.0)","7eaeb11e":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","c6acea4a":"model.summary()","582b132f":"epochs = 5\nbatch_size = 64","6ce96444":"datagen = ImageDataGenerator(featurewise_center=False,\n                             samplewise_center=False,\n                             featurewise_std_normalization=False,\n                             samplewise_std_normalization=False,\n                             zca_whitening=False,\n                             rotation_range=10,\n                             zoom_range = 0.1,\n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             horizontal_flip=False,\n                             vertical_flip=False)\ndatagen.fit(X_train)","220b63cd":"history = model.fit(datagen.flow(X_train, y_train,\n                                 batch_size=batch_size),\n                                 epochs = epochs,\n                                 validation_data = (X_test, y_test),\n                                 )","2b3eaf7e":"fig, axs = plt.subplots(1, 2, figsize=(20, 6))\nfig.subplots_adjust(hspace = .2, wspace=.2)\naxs = axs.ravel()\nloss = history.history['loss']\nloss_val = history.history['val_loss']\nepochs = range(1, len(loss)+1)\naxs[0].plot(epochs, loss, 'bo', label='loss_train')\naxs[0].plot(epochs, loss_val, 'ro', label='loss_val')\naxs[0].set_title('Value of the loss function')\naxs[0].set_xlabel('epochs')\naxs[0].set_ylabel('value of the loss function')\naxs[0].legend()\naxs[0].grid()\nacc = history.history['accuracy']\nacc_val = history.history['val_accuracy']\naxs[1].plot(epochs, acc, 'bo', label='accuracy_train')\naxs[1].plot(epochs, acc_val, 'ro', label='accuracy_val')\naxs[1].set_title('Accuracy')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Value of accuracy')\naxs[1].legend()\naxs[1].grid()\nplt.show()","d3c2bde5":"y_pred = model.predict(X_test)","50d8a64e":"conf_mat = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\n\nfig, ax = plot_confusion_matrix(conf_mat=conf_mat,\n                                show_normed=False,\n                                show_absolute=True,\n                                figsize=(12, 12))\nfig.show()","0d705568":"# Overview","577fc363":"# Define Model","22f708ef":"# Load Data","b0d39015":"# Intro\nWelcome to the [Sign Language MINST](https:\/\/www.kaggle.com\/datamunge\/sign-language-mnist) dataset\n![](https:\/\/storage.googleapis.com\/kaggle-datasets-images\/3258\/5337\/0dade1b95b22cceac471b309fc8a8f63\/dataset-cover.png)\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Thank you. <\/span>","9cc5c510":"# Libraries","0cbb6834":"# Define Image Data Generator","51863245":"# Analyse Training","f09c300e":"# Exploratory Data Analysis","e824dfa3":"# Prepare Data","8a01906f":"# Analyse Wrong Predictions","2653e20e":"# Train Model","2997fbdd":"Distribution of the labels in the train and test set:","2fdfc40e":"# Path","74a041ac":"Scale Data"}}