{"cell_type":{"e57aca26":"code","e3e76518":"code","20d7d814":"code","30013bf6":"code","10a7c027":"code","797a8664":"code","9ab58f61":"code","f15d08c6":"code","023f2e71":"code","cb5ed0e8":"code","52e9369f":"code","5ebd53e0":"code","185b08ba":"code","eb31c350":"code","d55a1162":"code","b29d113f":"code","ee9fce3e":"code","36db7d34":"code","bbf6cd8e":"code","abb94028":"code","5cca3e16":"code","0947f3cc":"code","d76ca27c":"code","9956c7f7":"markdown","7af3b0b3":"markdown","1ce2248a":"markdown","b6aff628":"markdown","ceb4adfd":"markdown","5214b9c9":"markdown","06840989":"markdown","12eb72e4":"markdown","0105b0e9":"markdown","78c2528c":"markdown","ab2a5df7":"markdown","64470aa7":"markdown","8b09b565":"markdown","d0b900a8":"markdown","ae4409d0":"markdown","f08bf24d":"markdown","0e573fd1":"markdown","107158ac":"markdown","427d18d9":"markdown","b2bf65d7":"markdown","bcde5748":"markdown"},"source":{"e57aca26":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None\n\n\nimport os\n\nplayers_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')\npff_data_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\ntracking2020_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')\ngames_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/games.csv')\nplays_df = pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/plays.csv')\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3e76518":"plays_tracking2020_df = pd.merge(plays_df, tracking2020_df, left_on=['playId', plays_df['specialTeamsPlayType'].str.lower()], right_on=['playId', 'event'])","20d7d814":"plays_tracking2020_df = plays_tracking2020_df.rename(columns={\"gameId_y\": \"gameId\"})","30013bf6":"max_a_df = plays_tracking2020_df.loc[plays_tracking2020_df.groupby(\"nflId\")['a'].idxmax()]\nplayer_2020_master_df = max_a_df[['nflId', 'a', 'displayName', 'position']].copy()\nplayer_2020_master_df = player_2020_master_df.rename(columns={\"a\": \"max_acceleration\"})\nplayer_2020_master_df = player_2020_master_df.reset_index(drop=True)\nplayer_2020_master_df.head(10)","10a7c027":"unique_plays_tracking2020_df = plays_tracking2020_df.drop_duplicates(subset=['playId'])\nunique_kickoffs_tracking2020_df = unique_plays_tracking2020_df[unique_plays_tracking2020_df['specialTeamsPlayType'] == 'Kickoff']\nunique_kickoffs_tracking2020_df['nflId'].value_counts()\n\nplayer_2020_kickoff_aggregate = {}\n\nfor nfl_Id in player_2020_master_df.nflId:\n    kickoff_snaps = unique_kickoffs_tracking2020_df.loc[(unique_kickoffs_tracking2020_df['nflId'] == nfl_Id)].shape[0]\n    \n    if kickoff_snaps > 0:\n        player_2020_kickoff_aggregate[nfl_Id] = kickoff_snaps\n    else:\n        player_2020_kickoff_aggregate[nfl_Id] = 0\n\nplayer_2020_kickoff_snaps_series = pd.Series(player_2020_kickoff_aggregate)\nplayer_2020_master_df['kickoff_snaps'] = player_2020_kickoff_snaps_series.values\n\n\nunique_plays_tracking2020_df = plays_tracking2020_df.drop_duplicates(subset=['playId'])\nunique_punts_tracking2020_df = unique_plays_tracking2020_df[unique_plays_tracking2020_df['specialTeamsPlayType'] == 'Punt']\nunique_punts_tracking2020_df.head(20)\nunique_punts_tracking2020_df['nflId'].value_counts()\n\nplayer_2020_punt_aggregate = {}\n\nfor nfl_Id in player_2020_master_df.nflId:\n    punt_snaps = unique_punts_tracking2020_df.loc[(unique_punts_tracking2020_df['nflId'] == nfl_Id)].shape[0]\n    \n    if punt_snaps > 0:\n        player_2020_punt_aggregate[nfl_Id] = punt_snaps\n    else:\n        player_2020_punt_aggregate[nfl_Id] = 0\n        \nplayer_2020_punt_snaps_series = pd.Series(player_2020_punt_aggregate)\nplayer_2020_master_df['punt_snaps'] = player_2020_punt_snaps_series.values\nplayer_2020_master_df['punt_or_kickoff'] = player_2020_master_df['kickoff_snaps'] + player_2020_master_df['punt_snaps']","797a8664":"unique_plays_tracking2020_df = plays_tracking2020_df.drop_duplicates(subset=['playId'])\ngames_plays_tracking2020_df = pd.merge(plays_tracking2020_df, games_df[['gameId','homeTeamAbbr','visitorTeamAbbr']], on=['gameId'])\ngames_plays_tracking2020_df = games_plays_tracking2020_df.sort_values(by=['nflId'], ascending=True)\n\nplayer_2020_team_aggregate = {}\nfor i in games_plays_tracking2020_df.index:\n    \n    nflId = games_plays_tracking2020_df['nflId'][i]\n    displayName = games_plays_tracking2020_df['displayName'][i]\n    team = games_plays_tracking2020_df['team'][i]\n    homeTeamAbbr = games_plays_tracking2020_df['homeTeamAbbr'][i]\n    visitorTeamAbbr = games_plays_tracking2020_df['visitorTeamAbbr'][i]\n    jerseyNumber = games_plays_tracking2020_df['jerseyNumber'][i]\n    \n    if team == 'home':\n        \n        jerseyNumber = str(int(jerseyNumber))\n        try:\n            player_2020_team_aggregate[f'{nflId}'].add(f'{homeTeamAbbr} {jerseyNumber}')\n        except KeyError:\n            player_2020_team_aggregate[f'{nflId}'] = {f'{homeTeamAbbr} {jerseyNumber}'}\n    elif team == 'away':\n        \n        jerseyNumber = str(int(jerseyNumber))\n        try:\n            player_2020_team_aggregate[f'{nflId}'].add(f'{visitorTeamAbbr} {jerseyNumber}')\n        except KeyError:\n            player_2020_team_aggregate[f'{nflId}'] = {f'{visitorTeamAbbr} {jerseyNumber}'}\n\nplayer_2020_team_series = pd.Series(player_2020_team_aggregate)\nplayer_2020_master_df['team_jerseyNumber'] = player_2020_team_series.values\nplayer_2020_master_df.head(20)","9ab58f61":"games_pff_df = pd.merge(pff_data_df, games_df, left_on=['gameId'], right_on=['gameId'])\npff_2020_df = games_pff_df[(games_pff_df['season'] == 2020)]","f15d08c6":"solo_tackle_aggregate = {}\n\nfor nflId in player_2020_master_df['nflId']:\n    \n    team_jerseyNumbers = player_2020_master_df.loc[(player_2020_master_df['nflId'] == nflId)].team_jerseyNumber.iloc[0]\n    \n    total_solo_tackles = 0\n    for team_jerseyNumber in team_jerseyNumbers:\n        \n        team_jerseyNumber = team_jerseyNumber.strip()\n        total_solo_tackles += pff_2020_df.loc[(pff_2020_df['tackler'] == team_jerseyNumber)].shape[0] \n    \n    nflId = str(int(nflId))\n    solo_tackle_aggregate[f'{nflId}'] = total_solo_tackles\n\nsolo_tackle_aggregate_series = pd.Series(solo_tackle_aggregate)\nplayer_2020_master_df['solo_tackles'] = solo_tackle_aggregate_series.values","023f2e71":"player_2020_assist_tackle_aggregate = {}\n\nfor nflId in player_2020_master_df['nflId']:\n    \n    team_jerseyNumbers = player_2020_master_df.loc[(player_2020_master_df['nflId'] == nflId)].team_jerseyNumber.iloc[0]\n    \n    total_assist_tackles = 0\n    for team_jerseyNumber in team_jerseyNumbers:\n        \n        team_jerseyNumber = team_jerseyNumber.strip()\n        total_assist_tackles += pff_2020_df.loc[(pff_2020_df['assistTackler'] == team_jerseyNumber)].shape[0] \n    \n    nflId = str(int(nflId))\n    player_2020_assist_tackle_aggregate[f'{nflId}'] = total_assist_tackles\n    \nplayer_2020_assist_tackle_series = pd.Series(player_2020_assist_tackle_aggregate)\nplayer_2020_master_df['assist_tackles'] = player_2020_assist_tackle_series.values","cb5ed0e8":"player_2020_master_df['total_tackles'] = player_2020_master_df['solo_tackles'] + (player_2020_master_df['assist_tackles'] \/ 2)","52e9369f":"player_2020_missed_tackle_aggregate = {}\n\nfor nflId in player_2020_master_df['nflId']:\n    \n    team_jerseyNumbers = player_2020_master_df.loc[(player_2020_master_df['nflId'] == nflId)].team_jerseyNumber.iloc[0]\n    total_missed_tackles = 0\n    for team_jerseyNumber in team_jerseyNumbers:\n\n        team_jerseyNumber = team_jerseyNumber.strip()\n        total_missed_tackles += pff_2020_df['missedTackler'].str.contains(team_jerseyNumber).sum() \n    \n    nflId = str(int(nflId))\n    player_2020_missed_tackle_aggregate[f'{nflId}'] = total_missed_tackles\n    \nplayer_2020_missed_tackle_series = pd.Series(player_2020_missed_tackle_aggregate)\nplayer_2020_master_df['missed_tackles'] = player_2020_missed_tackle_series.values","5ebd53e0":"player_2020_master_df['net_tackles'] = player_2020_master_df['total_tackles'] - player_2020_master_df['missed_tackles']","185b08ba":"player_2020_master_df['tackle_efficiency'] = player_2020_master_df['net_tackles'] \/ player_2020_master_df['punt_or_kickoff']","eb31c350":"filtered_master_dataframe = player_2020_master_df.loc[(player_2020_master_df['punt_or_kickoff'] > 30)]","d55a1162":"max_acceleration = filtered_master_dataframe[\"max_acceleration\"]\ntotal_tackles = filtered_master_dataframe[\"net_tackles\"]\nmax_acceleration_tackles_correlation = max_acceleration.corr(total_tackles)\nprint(max_acceleration_tackles_correlation)","b29d113f":"max_acceleration_tackles_line = filtered_master_dataframe.plot.line(x='max_acceleration', y='total_tackles')","ee9fce3e":"filtered_master_dataframe['efficiency_rank'] = filtered_master_dataframe['tackle_efficiency'].rank(ascending=False)\nfiltered_master_dataframe['max_acceleration_rank'] = filtered_master_dataframe['max_acceleration'].rank(ascending=False)","36db7d34":"filtered_master_dataframe['kipper'] = filtered_master_dataframe['efficiency_rank'] + filtered_master_dataframe['max_acceleration_rank']","bbf6cd8e":"filtered_master_dataframe = filtered_master_dataframe.sort_values('kipper')\nrank_columns = ['nflId','displayName', 'kipper', 'efficiency_rank', 'max_acceleration_rank', 'tackle_efficiency', 'team_jerseyNumber']\nrank_master_dataframe_30_snaps = pd.DataFrame(filtered_master_dataframe, columns=rank_columns)\nrank_master_dataframe_30_snaps.head(10)","abb94028":"filtered_master_dataframe_20 = player_2020_master_df.loc[(player_2020_master_df['punt_or_kickoff'] > 20)]\nmax_acceleration_20 = filtered_master_dataframe_20[\"max_acceleration\"]\nnet_tackles_20 = filtered_master_dataframe_20[\"net_tackles\"]\n\nfiltered_master_dataframe_20['efficiency_rank'] = filtered_master_dataframe_20['tackle_efficiency'].rank(ascending=False)\nfiltered_master_dataframe_20['max_acceleration_rank'] = filtered_master_dataframe_20['max_acceleration'].rank(ascending=False)\n\nfiltered_master_dataframe_20['kipper'] = filtered_master_dataframe_20['efficiency_rank'] + filtered_master_dataframe_20['max_acceleration_rank']\n\nfiltered_master_dataframe_20 = filtered_master_dataframe_20.sort_values('kipper')\nrank_master_dataframe_20_snaps = pd.DataFrame(filtered_master_dataframe_20, columns=rank_columns)\nrank_master_dataframe_20_snaps.head(10)","5cca3e16":"filtered_master_dataframe_10 = player_2020_master_df.loc[(player_2020_master_df['punt_or_kickoff'] > 10)]\nmax_acceleration_10 = filtered_master_dataframe_10[\"max_acceleration\"]\nnet_tackles_10 = filtered_master_dataframe_10[\"net_tackles\"]\n\nfiltered_master_dataframe_10['efficiency_rank'] = filtered_master_dataframe_10['tackle_efficiency'].rank(ascending=False)\nfiltered_master_dataframe_10['max_acceleration_rank'] = filtered_master_dataframe_10['max_acceleration'].rank(ascending=False)\n\nfiltered_master_dataframe_10['kipper'] = filtered_master_dataframe_10['efficiency_rank'] + filtered_master_dataframe_10['max_acceleration_rank']\n\nfiltered_master_dataframe_10 = filtered_master_dataframe_10.sort_values('kipper')\nrank_master_dataframe_10_snaps = pd.DataFrame(filtered_master_dataframe_10, columns=rank_columns)\n","0947f3cc":"rank_master_dataframe_10_snaps.head(10)","d76ca27c":"player_2020_master_df.to_csv('player_2020_master_df.csv')\nfiltered_master_dataframe.to_csv('filtered_master_dataframe.csv')","9956c7f7":" <center>Get Tackling Efficiency for each player<\/center>","7af3b0b3":"<center>Organize Players By Assisted Tackles Made<\/center>","1ce2248a":" <center><h1>Create a rank of players with 20 or more snaps<\/h1><\/center>","b6aff628":"<center><h1>Big Data Bowl 2022<\/h1><\/center>\n<center><h2>Evaluating Headhunters: KIPPER<\/h2><\/center>\n<center><h3>Kickoff and Punt Player Efficiency Rating<\/h3><\/center>","ceb4adfd":" <center>Players with more than 30 Kickoff or Punt snaps in 2020<\/center>","5214b9c9":" <center>Get Net Tackles<\/center>","06840989":" <center>Organize Players by Missed Tackles<\/center>","12eb72e4":"# <center>Max Acceleration By Player 2020<\/center>","0105b0e9":"# <center>Create ranking of players by kickoff and punt snaps<\/center>\n\nThe KIPPER rating (Please don't sue me John Hollinger) factors in the player's net tackling efficiency and their acceleration. Acceleration impacts more than just tackling, the change in direction is also needed to properly fill a lane on kickoff and punt. ","78c2528c":"# <center>Conclusion<\/center>\n\nA clearly defined metric makes special teams personnel management much more straightforward. A KIPPER rank can be calculated every 10 kickof + punt snaps, roughly equating to each game. This gives so much opportunity to players in the preseason and in training camp. This does not even factor the many ways I am improving KIPPER after the current round of the competition, like accomodating kickers and punters.\n\nFor players over 30 snaps, the fact that the top 3 (**Jordan Dangerfield**, **Sherrick McManis**, and **Craig Robertson**) were all special teams captains last season whie the 4th (**Anthony Levine**) was a co-captain shows that KIPPER is looking at the right features and can only get more refined. Jordan Dangerfield having the best KIPPER on 10+ snaps, 20+ snaps, and 30+ snaps also shows how elite and consistent he was.\n","ab2a5df7":"# <center>Correlation Between Acceleration and Net Tackles<\/center>\n\nMax acceleration has a 77.57% positive correlation with net tackles, while max speed had a week positive correlation. This makes perfect sense because anyone who played knows that straightforward speed is not enough, you have to be able to change direction quickly and meet the target at an angle. Or as an old coach said \"You meet them where they are going to be, not where they are\". Usama Young also referenced this in the starter video when he said:\n\u201cSpeed and angles, you can\u2019t teach speed but oftentimes angles beat speed\u201d. \n\nAnd when it comes to fighting off blocks: **ACCELERATION CREATES SEPERATION!**","64470aa7":" <center>Get the team and jersey for each player (Including Team Switches)<\/center>","8b09b565":" <center>Combine Plays Dataframe and Tracking 2020 on playID<\/center>","d0b900a8":" <center><h1>Organize Players By Tackles Made and Missed<\/h1><\/center>\n","ae4409d0":"<center>Get PFF Dataframe for the 2020 season<\/center>","f08bf24d":" <center>Organize players by snaps played on Kickoff and Punt in 2020<\/center>","0e573fd1":"<center><h1>Create a rank of players with 10 or more snaps<\/h1><\/center>","107158ac":"<iframe width=\"1250\" height=\"703\" src=\"https:\/\/www.youtube.com\/embed\/lVipB3i3H1g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","427d18d9":" <center>Get Total Tackles<\/center>","b2bf65d7":"Special teams units are filled with the unsung heroes of the game. The irony is that greatness on special teams is excellent job security because great teams have great special teams units. Football is a game of inches and champions value every inch of better field position. I am creating a metric to capture the true value of performance of these headhunters on the field.","bcde5748":"# <center>Bonus Content<\/center>\n<center>Found a video giving credit to our MVP last season!<\/center>"}}