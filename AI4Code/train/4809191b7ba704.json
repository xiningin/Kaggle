{"cell_type":{"9604b185":"code","96b3ddbe":"code","e1030e98":"code","d0098865":"code","0bc9b851":"code","62143709":"code","4ffbdad3":"code","6957ca5d":"code","1f2dc548":"code","462b214d":"code","f8032e37":"code","b05c6cc0":"code","ed7054f8":"markdown","8abed143":"markdown","460c430b":"markdown","c5fa8418":"markdown","e5cd19f1":"markdown","a31611ec":"markdown","4d64d798":"markdown","dc80c77d":"markdown","ce355813":"markdown","0b832487":"markdown","faa30939":"markdown","091d9c09":"markdown","405e1d8c":"markdown"},"source":{"9604b185":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.applications.vgg19 import VGG19\nimport tensorflow.keras.backend as K\n\n\nfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/digitally-reconstructed-radiographs-drr-bones'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n\nbone_drr = pd.DataFrame([(x, x.replace('.png','_mask.png')) for x in files if not x.endswith('_mask.png')])\nbone_drr.columns = ['image','bones']\n\nprint(f'Total instances: {bone_drr.shape[0]}')","96b3ddbe":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(cv2.imread(bone_drr.image[20], 0), 'gray')\naxes[1].imshow(cv2.imread(bone_drr.bones[20], 0), 'gray')\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(cv2.imread(bone_drr.image[40], 0), 'gray')\naxes[1].imshow(cv2.imread(bone_drr.bones[40], 0), 'gray')\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(cv2.imread(bone_drr.image[60], 0), 'gray')\naxes[1].imshow(cv2.imread(bone_drr.bones[60], 0), 'gray')","e1030e98":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import (\n    Input,\n    BatchNormalization,\n    Conv2D,\n    MaxPooling2D,\n    UpSampling2D,\n    concatenate,\n    Conv2DTranspose,\n    Lambda,\n    Reshape,\n    add,\n)\nimport tensorflow.keras.backend as K\n\n\ndef dilated_unet(im_shape, addition=1, dilate=1, dilate_rate=1):\n    x = inputs = Input(im_shape)\n\n    down1 = Conv2D(\n        44, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(x)\n    down1 = Conv2D(\n        44,\n        3,\n        activation=\"relu\",\n        padding=\"same\",\n        dilation_rate=dilate_rate,\n        kernel_initializer=\"he_normal\",\n    )(x)\n    down1pool = MaxPooling2D((2, 2), strides=(2, 2))(down1)\n    down2 = Conv2D(\n        88, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(down1pool)\n    down2 = Conv2D(\n        88,\n        3,\n        activation=\"relu\",\n        padding=\"same\",\n        dilation_rate=dilate_rate,\n        kernel_initializer=\"he_normal\",\n    )(down1pool)\n    down2pool = MaxPooling2D((2, 2), strides=(2, 2))(down2)\n    down3 = Conv2D(\n        176, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(down2pool)\n    down3 = Conv2D(\n        176,\n        3,\n        activation=\"relu\",\n        padding=\"same\",\n        dilation_rate=dilate_rate,\n        kernel_initializer=\"he_normal\",\n    )(down3)\n    down3pool = MaxPooling2D((2, 2), strides=(2, 2))(down3)\n\n    if dilate == 1:\n        # stacked dilated convolution at the bottleneck\n        dilate1 = Conv2D(\n            176,\n            3,\n            activation=\"relu\",\n            padding=\"same\",\n            dilation_rate=1,\n            kernel_initializer=\"he_normal\",\n        )(down3pool)\n        dilate2 = Conv2D(\n            176,\n            3,\n            activation=\"relu\",\n            padding=\"same\",\n            dilation_rate=2,\n            kernel_initializer=\"he_normal\",\n        )(dilate1)\n        if addition == 1:\n            dilate_all_added = add([dilate1, dilate2])\n            up3 = UpSampling2D((2, 2))(dilate_all_added)\n        else:\n            up3 = UpSampling2D((2, 2))(dilate2)\n    up3 = Conv2D(\n        88, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up3)\n    up3 = concatenate([down3, up3])\n    up3 = Conv2D(\n        88, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up3)\n    up3 = Conv2D(\n        88, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up3)\n\n    up2 = UpSampling2D((2, 2))(up3)\n    up2 = Conv2D(\n        44, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up2)\n    up2 = concatenate([down2, up2])\n    up2 = Conv2D(\n        44, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up2)\n    up2 = Conv2D(\n        44, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up2)\n\n    up1 = UpSampling2D((2, 2))(up2)\n    up1 = Conv2D(\n        22, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up1)\n    up1 = concatenate([down1, up1])\n    up1 = Conv2D(\n        22, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up1)\n    up1 = Conv2D(\n        22, 3, activation=\"relu\", padding=\"same\", kernel_initializer=\"he_normal\"\n    )(up1)\n    x = Conv2D(1, 1, activation=\"tanh\")(up1)\n    net = Model(inputs=inputs, outputs=x)\n    return net","d0098865":"\"\"\"Fairly basic set of tools for real-time data augmentation on image data.\nCan easily be extended to include new transformations,\nnew preprocessing methods, etc...\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport numpy as np\nimport re\nfrom scipy import linalg\nimport scipy.ndimage as ndi\nfrom six.moves import range\nimport os\nimport threading\nimport warnings\nimport cv2\n\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.utils import Sequence\n\ntry:\n    from PIL import Image as pil_image\nexcept ImportError:\n    pil_image = None\n\n\ndef random_rotation(x, rg, row_axis=1, col_axis=2, channel_axis=0,\n                    fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random rotation of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        rg: Rotation range, in degrees.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Rotated Numpy image tensor.\n    \"\"\"\n    theta = np.pi \/ 180 * np.random.uniform(-rg, rg)\n    rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0],\n                                [np.sin(theta), np.cos(theta), 0],\n                                [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(rotation_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x\n\n\ndef random_shift(x, wrg, hrg, row_axis=1, col_axis=2, channel_axis=0,\n                 fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial shift of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        wrg: Width shift range, as a float fraction of the width.\n        hrg: Height shift range, as a float fraction of the height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Shifted Numpy image tensor.\n    \"\"\"\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    tx = np.random.uniform(-hrg, hrg) * h\n    ty = np.random.uniform(-wrg, wrg) * w\n    translation_matrix = np.array([[1, 0, tx],\n                                   [0, 1, ty],\n                                   [0, 0, 1]])\n\n    transform_matrix = translation_matrix  # no need to do offset\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x\n\n\ndef random_shear(x, intensity, row_axis=1, col_axis=2, channel_axis=0,\n                 fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial shear of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        intensity: Transformation intensity.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Sheared Numpy image tensor.\n    \"\"\"\n    shear = np.random.uniform(-intensity, intensity)\n    shear_matrix = np.array([[1, -np.sin(shear), 0],\n                             [0, np.cos(shear), 0],\n                             [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(shear_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x\n\n\ndef random_zoom(x, zoom_range, row_axis=1, col_axis=2, channel_axis=0,\n                fill_mode='nearest', cval=0.):\n    \"\"\"Performs a random spatial zoom of a Numpy image tensor.\n\n    # Arguments\n        x: Input tensor. Must be 3D.\n        zoom_range: Tuple of floats; zoom range for width and height.\n        row_axis: Index of axis for rows in the input tensor.\n        col_axis: Index of axis for columns in the input tensor.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        Zoomed Numpy image tensor.\n\n    # Raises\n        ValueError: if `zoom_range` isn't a tuple.\n    \"\"\"\n    if len(zoom_range) != 2:\n        raise ValueError('zoom_range should be a tuple or list of two floats. '\n                         'Received arg: ', zoom_range)\n\n    if zoom_range[0] == 1 and zoom_range[1] == 1:\n        zx, zy = 1, 1\n    else:\n        zx, zy = np.random.uniform(zoom_range[0], zoom_range[1], 2)\n    zoom_matrix = np.array([[zx, 0, 0],\n                            [0, zy, 0],\n                            [0, 0, 1]])\n\n    h, w = x.shape[row_axis], x.shape[col_axis]\n    transform_matrix = transform_matrix_offset_center(zoom_matrix, h, w)\n    x = apply_transform(x, transform_matrix, channel_axis, fill_mode, cval)\n    return x\n\n\ndef random_channel_shift(x, intensity, channel_axis=0):\n    x = np.rollaxis(x, channel_axis, 0)\n    min_x, max_x = np.min(x), np.max(x)\n    channel_images = [np.clip(x_channel + np.random.uniform(-intensity, intensity), min_x, max_x)\n                      for x_channel in x]\n    x = np.stack(channel_images, axis=0)\n    x = np.rollaxis(x, 0, channel_axis + 1)\n    return x\n\n\ndef transform_matrix_offset_center(matrix, x, y):\n    o_x = float(x) \/ 2 + 0.5\n    o_y = float(y) \/ 2 + 0.5\n    offset_matrix = np.array([[1, 0, o_x], [0, 1, o_y], [0, 0, 1]])\n    reset_matrix = np.array([[1, 0, -o_x], [0, 1, -o_y], [0, 0, 1]])\n    transform_matrix = np.dot(np.dot(offset_matrix, matrix), reset_matrix)\n    return transform_matrix\n\n\ndef apply_transform(x,\n                    transform_matrix,\n                    channel_axis=0,\n                    fill_mode='nearest',\n                    cval=0.):\n    \"\"\"Apply the image transformation specified by a matrix.\n\n    # Arguments\n        x: 2D numpy array, single image.\n        transform_matrix: Numpy array specifying the geometric transformation.\n        channel_axis: Index of axis for channels in the input tensor.\n        fill_mode: Points outside the boundaries of the input\n            are filled according to the given mode\n            (one of `{'constant', 'nearest', 'reflect', 'wrap'}`).\n        cval: Value used for points outside the boundaries\n            of the input if `mode='constant'`.\n\n    # Returns\n        The transformed version of the input.\n    \"\"\"\n    x = np.rollaxis(x, channel_axis, 0)\n    final_affine_matrix = transform_matrix[:2, :2]\n    final_offset = transform_matrix[:2, 2]\n    channel_images = [ndi.interpolation.affine_transform(\n        x_channel,\n        final_affine_matrix,\n        final_offset,\n        order=0,\n        mode=fill_mode,\n        cval=cval) for x_channel in x]\n    x = np.stack(channel_images, axis=0)\n    x = np.rollaxis(x, 0, channel_axis + 1)\n    return x\n\n\ndef flip_axis(x, axis):\n    x = np.asarray(x).swapaxes(axis, 0)\n    x = x[::-1, ...]\n    x = x.swapaxes(0, axis)\n    return x\n\n\ndef array_to_img(x, data_format=None, scale=True):\n    \"\"\"Converts a 3D Numpy array to a PIL Image instance.\n\n    # Arguments\n        x: Input Numpy array.\n        data_format: Image data format.\n        scale: Whether to rescale image values\n            to be within [0, 255].\n\n    # Returns\n        A PIL Image instance.\n\n    # Raises\n        ImportError: if PIL is not available.\n        ValueError: if invalid `x` or `data_format` is passed.\n    \"\"\"\n    if pil_image is None:\n        raise ImportError('Could not import PIL.Image. '\n                          'The use of `array_to_img` requires PIL.')\n    x = np.asarray(x, dtype=K.floatx())\n    if x.ndim != 3:\n        raise ValueError('Expected image array to have rank 3 (single image). '\n                         'Got array with shape:', x.shape)\n\n    if data_format is None:\n        data_format = K.image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Invalid data_format:', data_format)\n\n    # Original Numpy array x has format (height, width, channel)\n    # or (channel, height, width)\n    # but target PIL image has format (width, height, channel)\n    if data_format == 'channels_first':\n        x = x.transpose(1, 2, 0)\n    if scale:\n        x = x + max(-np.min(x), 0)\n        x_max = np.max(x)\n        if x_max != 0:\n            x \/= x_max\n        x *= 255\n    if x.shape[2] == 3:\n        # RGB\n        return pil_image.fromarray(x.astype('uint8'), 'RGB')\n    elif x.shape[2] == 1:\n        # grayscale\n        return pil_image.fromarray(x[:, :, 0].astype('uint8'), 'L')\n    else:\n        raise ValueError('Unsupported channel number: ', x.shape[2])\n\n\ndef img_to_array(img, data_format=None):\n    \"\"\"Converts a PIL Image instance to a Numpy array.\n\n    # Arguments\n        img: PIL Image instance.\n        data_format: Image data format.\n\n    # Returns\n        A 3D Numpy array.\n\n    # Raises\n        ValueError: if invalid `img` or `data_format` is passed.\n    \"\"\"\n    if data_format is None:\n        data_format = K.image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ', data_format)\n    # Numpy array x has format (height, width, channel)\n    # or (channel, height, width)\n    # but original PIL image has format (width, height, channel)\n    x = np.asarray(img, dtype=K.floatx())\n    if len(x.shape) == 3:\n        if data_format == 'channels_first':\n            x = x.transpose(2, 0, 1)\n    elif len(x.shape) == 2:\n        if data_format == 'channels_first':\n            x = x.reshape((1, x.shape[0], x.shape[1]))\n        else:\n            x = x.reshape((x.shape[0], x.shape[1], 1))\n    else:\n        raise ValueError('Unsupported image shape: ', x.shape)\n    return x\n\n\ndef load_img(path, grayscale=False, target_size=None):\n    \"\"\"Loads an image into PIL format.\n\n    # Arguments\n        path: Path to image file\n        grayscale: Boolean, whether to load the image as grayscale.\n        target_size: Either `None` (default to original size)\n            or tuple of ints `(img_height, img_width)`.\n\n    # Returns\n        A PIL Image instance.\n\n    # Raises\n        ImportError: if PIL is not available.\n    \"\"\"\n    if pil_image is None:\n        raise ImportError('Could not import PIL.Image. '\n                          'The use of `array_to_img` requires PIL.')\n    img = pil_image.open(path)\n    if grayscale:\n        if img.mode != 'L':\n            img = img.convert('L')\n    else:\n        if img.mode != 'RGB':\n            img = img.convert('RGB')\n    if target_size:\n        hw_tuple = (target_size[1], target_size[0])\n        if img.size != hw_tuple:\n            img = img.resize(hw_tuple)\n    return img\n\n\ndef list_pictures(directory, ext='jpg|jpeg|bmp|png'):\n    return [os.path.join(root, f)\n            for root, _, files in os.walk(directory) for f in files\n            if re.match(r'([\\w]+\\.(?:' + ext + '))', f)]\n\n\nclass ImageDataGenerator(object):\n    \"\"\"Generate minibatches of image data with real-time data augmentation.\n\n    # Arguments\n        featurewise_center: set input mean to 0 over the dataset.\n        samplewise_center: set each sample mean to 0.\n        featurewise_std_normalization: divide inputs by std of the dataset.\n        samplewise_std_normalization: divide each input by its std.\n        zca_whitening: apply ZCA whitening.\n        rotation_range: degrees (0 to 180).\n        width_shift_range: fraction of total width.\n        height_shift_range: fraction of total height.\n        shear_range: shear intensity (shear angle in radians).\n        zoom_range: amount of zoom. if scalar z, zoom will be randomly picked\n            in the range [1-z, 1+z]. A sequence of two can be passed instead\n            to select this range.\n        channel_shift_range: shift range for each channels.\n        fill_mode: points outside the boundaries are filled according to the\n            given mode ('constant', 'nearest', 'reflect' or 'wrap'). Default\n            is 'nearest'.\n        cval: value used for points outside the boundaries when fill_mode is\n            'constant'. Default is 0.\n        horizontal_flip: whether to randomly flip images horizontally.\n        vertical_flip: whether to randomly flip images vertically.\n        rescale: rescaling factor. If None or 0, no rescaling is applied,\n            otherwise we multiply the data by the value provided\n            (before applying any other transformation).\n        preprocessing_function: function that will be implied on each input.\n            The function will run before any other modification on it.\n            The function should take one argument:\n            one image (Numpy tensor with rank 3),\n            and should output a Numpy tensor with the same shape.\n        data_format: 'channels_first' or 'channels_last'. In 'channels_first' mode, the channels dimension\n            (the depth) is at index 1, in 'channels_last' mode it is at index 3.\n            It defaults to the `image_data_format` value found in your\n            Keras config file at `~\/.keras\/keras.json`.\n            If you never set it, then it will be \"channels_last\".\n    \"\"\"\n\n    def __init__(self,\n                 featurewise_center=False,\n                 samplewise_center=False,\n                 featurewise_std_normalization=False,\n                 samplewise_std_normalization=False,\n                 zca_whitening=False,\n                 rotation_range=0.,\n                 width_shift_range=0.,\n                 height_shift_range=0.,\n                 shear_range=0.,\n                 zoom_range=0.,\n                 channel_shift_range=0.,\n                 fill_mode='nearest',\n                 cval=0.,\n                 horizontal_flip=False,\n                 vertical_flip=False,\n                 rescale=None,\n                 preprocessing_function=None,\n                 data_format=None):\n        if data_format is None:\n            data_format = K.image_data_format()\n        self.featurewise_center = featurewise_center\n        self.samplewise_center = samplewise_center\n        self.featurewise_std_normalization = featurewise_std_normalization\n        self.samplewise_std_normalization = samplewise_std_normalization\n        self.zca_whitening = zca_whitening\n        self.rotation_range = rotation_range\n        self.width_shift_range = width_shift_range\n        self.height_shift_range = height_shift_range\n        self.shear_range = shear_range\n        self.zoom_range = zoom_range\n        self.channel_shift_range = channel_shift_range\n        self.fill_mode = fill_mode\n        self.cval = cval\n        self.horizontal_flip = horizontal_flip\n        self.vertical_flip = vertical_flip\n        self.rescale = rescale\n        self.preprocessing_function = preprocessing_function\n\n        if data_format not in {'channels_last', 'channels_first'}:\n            raise ValueError('data_format should be \"channels_last\" (channel after row and '\n                             'column) or \"channels_first\" (channel before row and column). '\n                             'Received arg: ', data_format)\n        self.data_format = data_format\n        if data_format == 'channels_first':\n            self.channel_axis = 1\n            self.row_axis = 2\n            self.col_axis = 3\n        if data_format == 'channels_last':\n            self.channel_axis = 3\n            self.row_axis = 1\n            self.col_axis = 2\n\n        self.mean = None\n        self.std = None\n        self.principal_components = None\n\n        if np.isscalar(zoom_range):\n            self.zoom_range = [1 - zoom_range, 1 + zoom_range]\n        elif len(zoom_range) == 2:\n            self.zoom_range = [zoom_range[0], zoom_range[1]]\n        else:\n            raise ValueError('zoom_range should be a float or '\n                             'a tuple or list of two floats. '\n                             'Received arg: ', zoom_range)\n\n    def flow(self, x, y=None, batch_size=32, shuffle=True, seed=None,\n             save_to_dir=None, save_prefix='', save_format='jpeg'):\n        return NumpyArrayIterator(\n            x, y, self,\n            batch_size=batch_size,\n            shuffle=shuffle,\n            seed=seed,\n            data_format=self.data_format,\n            save_to_dir=save_to_dir,\n            save_prefix=save_prefix,\n            save_format=save_format)\n\n    def standardize(self, x):\n        \"\"\"Apply the normalization configuration to a batch of inputs.\n\n        # Arguments\n            x: batch of inputs to be normalized.\n\n        # Returns\n            The inputs, normalized.\n        \"\"\"\n        if self.preprocessing_function:\n            x = self.preprocessing_function(x)\n        if self.rescale:\n            x *= self.rescale\n        # x is a single image, so it doesn't have image number at index 0\n        img_channel_axis = self.channel_axis - 1\n        if self.samplewise_center:\n            x -= np.mean(x, axis=img_channel_axis, keepdims=True)\n        if self.samplewise_std_normalization:\n            x \/= (np.std(x, axis=img_channel_axis, keepdims=True) + 1e-7)\n\n        if self.featurewise_center:\n            if self.mean is not None:\n                x -= self.mean\n            else:\n                warnings.warn('This ImageDataGenerator specifies '\n                              '`featurewise_center`, but it hasn\\'t'\n                              'been fit on any training data. Fit it '\n                              'first by calling `.fit(numpy_data)`.')\n        if self.featurewise_std_normalization:\n            if self.std is not None:\n                x \/= (self.std + 1e-7)\n            else:\n                warnings.warn('This ImageDataGenerator specifies '\n                              '`featurewise_std_normalization`, but it hasn\\'t'\n                              'been fit on any training data. Fit it '\n                              'first by calling `.fit(numpy_data)`.')\n        if self.zca_whitening:\n            if self.principal_components is not None:\n                flatx = np.reshape(x, (x.size))\n                whitex = np.dot(flatx, self.principal_components)\n                x = np.reshape(whitex, (x.shape[0], x.shape[1], x.shape[2]))\n            else:\n                warnings.warn('This ImageDataGenerator specifies '\n                              '`zca_whitening`, but it hasn\\'t'\n                              'been fit on any training data. Fit it '\n                              'first by calling `.fit(numpy_data)`.')\n        return x\n\n    def random_transform(self, x, y):\n        \"\"\"Randomly augment a single image tensor + image mask.\n\n        # Arguments\n            x: 3D tensor, single image.\n            y: 3D tensor, image mask.\n\n        # Returns\n            A randomly transformed version of the input (same shape).\n        \"\"\"\n        # x is a single image, so it doesn't have image number at index 0\n        img_row_axis = self.row_axis - 1\n        img_col_axis = self.col_axis - 1\n        img_channel_axis = self.channel_axis - 1\n\n        # use composition of homographies\n        # to generate final transform that needs to be applied\n        if self.rotation_range:\n            theta = np.pi \/ 180 * np.random.uniform(-self.rotation_range, self.rotation_range)\n        else:\n            theta = 0\n\n        if self.height_shift_range:\n            tx = np.random.uniform(-self.height_shift_range, self.height_shift_range) * x.shape[img_row_axis]\n        else:\n            tx = 0\n\n        if self.width_shift_range:\n            ty = np.random.uniform(-self.width_shift_range, self.width_shift_range) * x.shape[img_col_axis]\n        else:\n            ty = 0\n\n        if self.shear_range:\n            shear = np.random.uniform(-self.shear_range, self.shear_range)\n        else:\n            shear = 0\n\n        if self.zoom_range[0] == 1 and self.zoom_range[1] == 1:\n            zx, zy = 1, 1\n        else:\n            zx, zy = np.random.uniform(self.zoom_range[0], self.zoom_range[1], 2)\n\n        transform_matrix = None\n        if theta != 0:\n            rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0],\n                                        [np.sin(theta), np.cos(theta), 0],\n                                        [0, 0, 1]])\n            transform_matrix = rotation_matrix\n\n        if tx != 0 or ty != 0:\n            shift_matrix = np.array([[1, 0, tx],\n                                     [0, 1, ty],\n                                     [0, 0, 1]])\n            transform_matrix = shift_matrix if transform_matrix is None else np.dot(transform_matrix, shift_matrix)\n\n        if shear != 0:\n            shear_matrix = np.array([[1, -np.sin(shear), 0],\n                                    [0, np.cos(shear), 0],\n                                    [0, 0, 1]])\n            transform_matrix = shear_matrix if transform_matrix is None else np.dot(transform_matrix, shear_matrix)\n\n        if zx != 1 or zy != 1:\n            zoom_matrix = np.array([[zx, 0, 0],\n                                    [0, zy, 0],\n                                    [0, 0, 1]])\n            transform_matrix = zoom_matrix if transform_matrix is None else np.dot(transform_matrix, zoom_matrix)\n\n        if transform_matrix is not None:\n            h, w = x.shape[img_row_axis], x.shape[img_col_axis]\n            transform_matrix = transform_matrix_offset_center(transform_matrix, h, w)\n            x = apply_transform(x, transform_matrix, img_channel_axis,\n                                fill_mode=self.fill_mode, cval=self.cval)\n            y = apply_transform(y, transform_matrix, img_channel_axis,\n                                fill_mode=self.fill_mode, cval=self.cval)\n\n        if self.channel_shift_range != 0:\n            x = random_channel_shift(x,\n                                     self.channel_shift_range,\n                                     img_channel_axis)\n            y = random_channel_shift(y,\n                                     self.channel_shift_range,\n                                     img_channel_axis)\n        if self.horizontal_flip:\n            if np.random.random() < 0.5:\n                x = flip_axis(x, img_col_axis)\n                y = flip_axis(y, img_col_axis)\n\n        if self.vertical_flip:\n            if np.random.random() < 0.5:\n                x = flip_axis(x, img_row_axis)\n                y = flip_axis(y, img_row_axis)\n\n        ### put random R or L letters\n        if np.random.random() < 0.5:\n            t = np.zeros(x.shape).astype(np.uint8)\n            adj1 = int((np.random.random() - 0.5) * 20)\n            adj2 = int((np.random.random() - 0.5) * 20)      \n            col = np.max(x)    \n            t = cv2.putText(img=t, text=\"R\", org=(50+adj1,50+adj2),\n                    fontFace=cv2.FONT_HERSHEY_SIMPLEX , fontScale=1, color=[255, 255, 255], thickness=2)\n            x[t>0] = np.max(x) \n\n        if np.random.random() < 0.5:\n            t = np.zeros(x.shape).astype(np.uint8)\n            adj1 = int((np.random.random() - 0.5) * 20)\n            adj2 = int((np.random.random() - 0.5) * 20)      \n            col = np.max(x)    \n            t = cv2.putText(img=t, text=\"L\", org=(450+adj1,50+adj2),\n                    fontFace=cv2.FONT_HERSHEY_SIMPLEX , fontScale=1, color=[255, 255, 255], thickness=2)\n            x[t>0] = np.max(x)\n\n        return x, y\n\n    def fit(self, x,\n            augment=False,\n            rounds=1,\n            seed=None):\n        \"\"\"Fits internal statistics to some sample data.\n\n        Required for featurewise_center, featurewise_std_normalization\n        and zca_whitening.\n\n        # Arguments\n            x: Numpy array, the data to fit on. Should have rank 4.\n                In case of grayscale data,\n                the channels axis should have value 1, and in case\n                of RGB data, it should have value 3.\n            augment: Whether to fit on randomly augmented samples\n            rounds: If `augment`,\n                how many augmentation passes to do over the data\n            seed: random seed.\n\n        # Raises\n            ValueError: in case of invalid input `x`.\n        \"\"\"\n        x = np.asarray(x, dtype=K.floatx())\n        if x.ndim != 4:\n            raise ValueError('Input to `.fit()` should have rank 4. '\n                             'Got array with shape: ' + str(x.shape))\n        if x.shape[self.channel_axis] not in {1, 3, 4}:\n            raise ValueError(\n                'Expected input to be images (as Numpy array) '\n                'following the data format convention \"' + self.data_format + '\" '\n                '(channels on axis ' + str(self.channel_axis) + '), i.e. expected '\n                'either 1, 3 or 4 channels on axis ' + str(self.channel_axis) + '. '\n                'However, it was passed an array with shape ' + str(x.shape) +\n                ' (' + str(x.shape[self.channel_axis]) + ' channels).')\n\n        if seed is not None:\n            np.random.seed(seed)\n\n        x = np.copy(x)\n        if augment:\n            ax = np.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx())\n            for r in range(rounds):\n                for i in range(x.shape[0]):\n                    ax[i + r * x.shape[0]], _ = self.random_transform(x[i], x[i])\n            x = ax\n\n        if self.featurewise_center:\n            self.mean = np.mean(x, axis=(0, self.row_axis, self.col_axis))\n            broadcast_shape = [1, 1, 1]\n            broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n            self.mean = np.reshape(self.mean, broadcast_shape)\n            x -= self.mean\n\n        if self.featurewise_std_normalization:\n            self.std = np.std(x, axis=(0, self.row_axis, self.col_axis))\n            broadcast_shape = [1, 1, 1]\n            broadcast_shape[self.channel_axis - 1] = x.shape[self.channel_axis]\n            self.std = np.reshape(self.std, broadcast_shape)\n            x \/= (self.std + K.epsilon())\n\n        if self.zca_whitening:\n            flat_x = np.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3]))\n            sigma = np.dot(flat_x.T, flat_x) \/ flat_x.shape[0]\n            u, s, _ = linalg.svd(sigma)\n            self.principal_components = np.dot(np.dot(u, np.diag(1. \/ np.sqrt(s + 10e-7))), u.T)\n\n\nclass Iterator(Sequence):\n    \"\"\"Abstract base class for image data iterators.\n\n    # Arguments\n        n: Integer, total number of samples in the dataset to loop over.\n        batch_size: Integer, size of a batch.\n        shuffle: Boolean, whether to shuffle the data between epochs.\n        seed: Random seeding for data shuffling.\n    \"\"\"\n\n    def __init__(self, n, batch_size, shuffle, seed):\n        self.n = n\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        self.batch_index = 0\n        self.total_batches_seen = 0\n        self.lock = threading.Lock()\n        self.index_generator = self._flow_index(n, batch_size, shuffle, seed)\n\n    def reset(self):\n        self.batch_index = 0\n\n    def _flow_index(self, n, batch_size=32, shuffle=False, seed=None):\n        # Ensure self.batch_index is 0.\n        self.reset()\n        while 1:\n            if seed is not None:\n                np.random.seed(seed + self.total_batches_seen)\n            if self.batch_index == 0:\n                index_array = np.arange(n)\n                if shuffle:\n                    index_array = np.random.permutation(n)\n\n            current_index = (self.batch_index * batch_size) % n\n            if n > current_index + batch_size:\n                current_batch_size = batch_size\n                self.batch_index += 1\n            else:\n                current_batch_size = n - current_index\n                self.batch_index = 0\n            self.total_batches_seen += 1\n            yield (index_array[current_index: current_index + current_batch_size],\n                   current_index, current_batch_size)\n\n    def __iter__(self):\n        # Needed if we want to do something like:\n        # for x, y in data_gen.flow(...):\n        return self\n\n    def __next__(self, *args, **kwargs):\n        return self.next(*args, **kwargs)\n\n\nclass NumpyArrayIterator(Iterator):\n    \"\"\"Iterator yielding data from a Numpy array.\n\n    # Arguments\n        x: Numpy array of input data.\n        y: Numpy array of targets data.\n        image_data_generator: Instance of `ImageDataGenerator`\n            to use for random transformations and normalization.\n        batch_size: Integer, size of a batch.\n        shuffle: Boolean, whether to shuffle the data between epochs.\n        seed: Random seed for data shuffling.\n        data_format: String, one of `channels_first`, `channels_last`.\n        save_to_dir: Optional directory where to save the pictures\n            being yielded, in a viewable format. This is useful\n            for visualizing the random transformations being\n            applied, for debugging purposes.\n        save_prefix: String prefix to use for saving sample\n            images (if `save_to_dir` is set).\n        save_format: Format to use for saving sample images\n            (if `save_to_dir` is set).\n    \"\"\"\n\n    def __init__(self, x, y, image_data_generator,\n                 batch_size=32, shuffle=False, seed=None,\n                 data_format=None,\n                 save_to_dir=None, save_prefix='', save_format='jpeg'):\n        if y is not None and len(x) != len(y):\n            raise ValueError('X (images tensor) and y (labels) '\n                             'should have the same length. '\n                             'Found: X.shape = %s, y.shape = %s' %\n                             (np.asarray(x).shape, np.asarray(y).shape))\n\n        if data_format is None:\n            data_format = K.image_data_format()\n        self.x = np.asarray(x, dtype=K.floatx())\n\n        if self.x.ndim != 4:\n            raise ValueError('Input data in `NumpyArrayIterator` '\n                             'should have rank 4. You passed an array '\n                             'with shape', self.x.shape)\n        channels_axis = 3 if data_format == 'channels_last' else 1\n        if self.x.shape[channels_axis] not in {1, 3, 4}:\n            raise ValueError('NumpyArrayIterator is set to use the '\n                             'data format convention \"' + data_format + '\" '\n                             '(channels on axis ' + str(channels_axis) + '), i.e. expected '\n                             'either 1, 3 or 4 channels on axis ' + str(channels_axis) + '. '\n                             'However, it was passed an array with shape ' + str(self.x.shape) +\n                             ' (' + str(self.x.shape[channels_axis]) + ' channels).')\n        if y is not None:\n            self.y = np.asarray(y)\n        else:\n            self.y = None\n        self.image_data_generator = image_data_generator\n        self.shape = x.shape\n        self.batch_size = batch_size\n        self.data_format = data_format\n        self.save_to_dir = save_to_dir\n        self.save_prefix = save_prefix\n        self.save_format = save_format\n        super(NumpyArrayIterator, self).__init__(x.shape[0], batch_size, shuffle, seed)\n\n\n    def __len__(self):\n        \"\"\"Denotes the number of batches per epoch\"\"\"\n        if len(self.x) % self.batch_size == 0:\n            self.epoch_size = len(self.x) \/\/ self.batch_size\n        else:\n            self.epoch_size = len(self.x) \/\/ self.batch_size + 1\n        return self.epoch_size\n\n    def __getitem__(self, _):\n        \"\"\"For python 2.x.\n\n        # Returns\n            The next batch.\n        \"\"\"\n        # Keeps under lock only the mechanism which advances\n        # the indexing of each batch.\n        with self.lock:\n            index_array, current_index, current_batch_size = next(self.index_generator)\n        # The transformation of images is not under thread lock\n        # so it can be done in parallel\n        batch_x_shape = [current_batch_size] + list(self.x.shape)[1:]\n        batch_x_shape = tuple(batch_x_shape)\n        batch_x = np.zeros(batch_x_shape, dtype=K.floatx())\n        batch_y = np.zeros(tuple([current_batch_size] + list(self.x.shape)[1:]), dtype=K.floatx())\n        for i, j in enumerate(index_array):\n            x = self.x[j]\n            y = self.y[j]\n            x, y = self.image_data_generator.random_transform(x.astype(K.floatx()), y.astype(K.floatx()))\n            x = self.image_data_generator.standardize(x)\n            batch_x[i] = x\n            batch_y[i] = y\n\n        if self.save_to_dir:\n            for i in range(current_batch_size):\n                imgx = array_to_img(batch_x[i], self.data_format, scale=True)\n                imgy = array_to_img(batch_y[i], self.data_format, scale=True)\n                fname = '{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,\n                                                                  index=current_index + i,\n                                                                  hash=np.random.randint(1e4),\n                                                                  format=self.save_format)\n                imgx.save(os.path.join(self.save_to_dir, 'x_' + fname))\n                imgy.save(os.path.join(self.save_to_dir, 'y_' + fname))\n        if self.y is None:\n            return batch_x\n        return batch_x, batch_y","0bc9b851":"#tensorflow 2.1 error\n#ValueError: tf.function-decorated function tried to create variables on non-first call\n#temporary workaround...\ntf.compat.v1.disable_eager_execution()\n\ndef perceptual_loss_vgg19(y_true, y_pred):\n    # must ensure that y_true and y_pred come from same distribution\n    # nice to have - similar distribution to vgg19 inputs\n    y_pred = tf.image.grayscale_to_rgb(y_pred, name=None) #need to convert as UNet outputs single channel\n    vgg = VGG19(include_top=False, weights=\"imagenet\", input_shape=(512, 512, 3))\n    loss_model = Model(\n        inputs=vgg.input, outputs=vgg.get_layer(\"block3_conv3\").output\n    )\n    return K.mean(K.square(loss_model(y_true) - loss_model(y_pred)))","62143709":"def load_data(df, im_shape):\n    X, y = [], []\n    for i, item in df.iterrows():\n        img = cv2.imread(item[0], 0)\n        img = cv2.resize(img, im_shape[:2])\n        img = img.astype(np.float32)\n        img -= img.mean()\n        img \/= img.std()\n        img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n        mask = cv2.imread(item[1]) \/ 255\n        mask = cv2.resize(mask, im_shape[:2])\n        X.append(img)\n        y.append(mask)\n    X = np.array(X)\n    y = np.array(y)\n    return X, y\n\n\n# Shuffle rows in dataframe. Random state is set for reproducibility.\nbone_drr = bone_drr.sample(frac=1, random_state=23)\ndf_train = bone_drr[:160].reset_index(drop=True)\ndf_val = bone_drr[160:].reset_index(drop=True)\n\n# Load training and validation data\nim_shape = (512, 512, 3)\nX_train, y_train = load_data(df_train, im_shape)\nX_val, y_val = load_data(df_val, im_shape)","4ffbdad3":"UNet = dilated_unet(im_shape)\nUNet.compile(optimizer=\"adam\", loss=perceptual_loss_vgg19, metrics=[perceptual_loss_vgg19])\n\nmodel_file_format = \"model_dilated_unet512_vgg19.{epoch:03d}.hdf5\"\ncheckpointer = ModelCheckpoint(model_file_format, period=10)\n\ntrain_gen = ImageDataGenerator(\n    horizontal_flip=True,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    rescale=1.0,\n    zoom_range=0.2,\n    fill_mode=\"nearest\",\n    cval=0,\n)\n\ntest_gen = ImageDataGenerator(rescale=1.0)\n\nbatch_size = 4\ntrain_steps_per_epoch = (df_train.shape[0] + batch_size - 1) \/\/ batch_size\nval_steps_per_epoch = (df_val.shape[0] + batch_size - 1) \/\/ batch_size\n\nUNet.fit_generator(\n    train_gen.flow(X_train, y_train, batch_size=batch_size),\n    steps_per_epoch=train_steps_per_epoch,\n    epochs=100,\n    callbacks=[checkpointer],\n    validation_data=test_gen.flow(X_val, y_val, batch_size=batch_size),\n    validation_steps=val_steps_per_epoch,\n)","6957ca5d":"from tensorflow.keras.models import load_model\n\nclass BoneSegmentation:\n\n    def __init__(self, model_path, input_shape):\n        self.unet = load_model(model_path, compile=False)\n        self.input_shape = input_shape\n        self.datagen = ImageDataGenerator(rescale=1.0)\n\n    def preprocess_image(self, img, unet_input_shape):\n        img = cv2.resize(img, unet_input_shape[:2])\n        img = img.astype(np.float32)\n        img -= img.mean()\n        img \/= img.std()\n        img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)\n        img = np.array(img)\n        return img\n\n    def predict(self, image):\n        img = self.preprocess_image(image, self.input_shape)\n        pred = self.unet.predict(np.expand_dims(np.array(img), 0))[0, :, :, 0]\n        pred[pred < 0] = 0\n        return pred\n    \nmodel = BoneSegmentation('\/kaggle\/working\/model_dilated_unet512_vgg19.100.hdf5', input_shape=(512, 512, 3))","1f2dc548":"padchest = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/padchest-chest-xrays-sample\/sample'):\n    for filename in filenames:\n        padchest.append(os.path.join(dirname, filename))","462b214d":"img = cv2.imread('\/kaggle\/input\/padchest-chest-xrays-sample\/sample\/216840111366964012819207061112010316094555679_04-017-068.png', 0)\npred = model.predict(img)\npred = cv2.resize(pred, (img.shape[1], img.shape[0]))\npred = pred - np.min(pred)\npred = (pred \/ np.max(pred) * 255).astype(np.uint8)    \n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(img, 'gray')\naxes[1].imshow(pred, 'gray')","f8032e37":"merge = cv2.addWeighted(img, 1, pred, 0.4, 0)\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(img, 'gray')\naxes[1].imshow(merge, 'gray')","b05c6cc0":"merge = cv2.addWeighted(img, 1, pred, -0.3, 0)\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\naxes[0].imshow(img, 'gray')\naxes[1].imshow(merge, 'gray')","ed7054f8":"## Model evaluation\n\nIt would not make any sense to validate on the validation split of our model. So let's just take a few chest X-ray samples from open datasets. I chose PadChest, but you can use any other - I have collected quite a few datasets (please be sure to check my profile :))\n\nLet's define our model class and load weights:","8abed143":"Some contribution was made to synthetically generate \"R\" and \"L\" letters on the left upper and right upper corners - this can be seen in most chest X-rays. So our synthetic X-rays will get some prior knowledge about how real X-rays look like!\n\n## Training UNet\n\nBefore start training something, let's look at the proposed loss function to use during training.\nAs the training sample is quite small, standard loss functions like MSE or RMSE on pixel level not necessarily translates to good looking bone mask predictions - this was also observed in the paper. Perception loss was introduced - which is a very interesting concept.\n\nThe idea of perception loss is to compare feature maps of proxy model, providing original input (bone mask) and predicted output (predicted bone mask by UNet) - and calculating difference between them. The smaller overall mean difference - the more conceptually similar original and predicted images are! \n\nMoreover, perceptual loss helps us somewhat deal with data being synthetic, as model focuses less on overfitting to the blurry synthetic data we have. This is important for our task - transfer the model to real X-rays.\n\nLet's use good old VGG19 model and take one of its layers as a perception vector:","460c430b":"And finally visualizations!","c5fa8418":"## Results\n\n3D CT scan transformations to 2D chest X-ray representations are useful to make models suitable for 2D X-ray modality. It has been shown, that such models are capable of segmentation of specific parts of chest with given limited amount of data.","e5cd19f1":"Let's output some example images:","a31611ec":"The chest X-ray image looks too blurry to be considered a standard X-ray. Other than that, it is a nice looking image with no artifacts. As for bone mask layer - it appears only bone tissue is visualized - this is what we want to predict on a regular chest X-ray!\n\nSo, we have almost 200 images to work with. It seems like not much, but the images are heavily standardized, thus it may be possible for a network to learn something here. Fingers crossed!\n\nTime to train something!\n\n\n## UNet + dilated convolutions + perception loss\n\nThe analyzed paper (https:\/\/arxiv.org\/pdf\/2003.10839.pdf) used standard UNet model with dilated convolutions. Let's take one, shamelessly taken from https:\/\/github.com\/GlastonburyC\/Dilated-U-net\/blob\/master\/dilatedUnet.py.\n","4d64d798":"It seems rib removal is a harder task. I guess the framework can be easily adjusted for that, but maybe for the next time!","dc80c77d":"# UNet to predict bone layer on chest X-rays\n\nWe are going to use **synthetically** generated X-rays in the form of CT DRR to train UNet model with perception loss. The dataset https:\/\/www.kaggle.com\/raddar\/digitally-reconstructed-radiographs-drr-bones will be used in further experiments.\n\nDigitally Reconstructed Radiograph (DRR) is a novel approach to generate synthetic chest X-rays (CXR) from real CT scan data. Although real data was used, I am using term **synthetic**, as the DRR images were generated in a process described with parametric model (more on that: https:\/\/arxiv.org\/pdf\/2003.10839.pdf). The parameters were selected to pass the human eye test - if the generated image resembles appearance of a real chest X-ray. Moreover, the synthetic images would be considered too blurry and of very low quality compared to X-rays taken with standard X-ray devices.\n\nAlthough DRR has obvious drawbacks, it can make use of most of the good stuff coming from CT scans, like bones, soft tissue, organs, etc. can be easily separated.\n\nThis notebook was an interesting weekend project for me to explore, if chest CT scan data can yield a model suitable for chest X-ray modality. It could also solve some tasks such as segmenting the ribs and other bones - which is a very tedious task to hand label on chest X-rays.\n\n\n## Data preparation\n\nLet's read the images and put image paths into workable pandas format:","ce355813":"Bones are more well defined!\n\nSilly attempt to remove ribs:","0b832487":"Finally, we can load the data and train the model. ","faa30939":"To be honest - this is beyond my expectations! We used something synthetic and it performs very well on a real task! \nHaving an option to easily switch on\/off bone view in chest X-rays could help radiologists to quickly spot fractures - it is really easy to miss them if you are tired\/not focused enough. From my experience, fractures is one of the hardest tasks for radiologists (and deep learning models as well) - so this could be useful.\n\n\nLet's see how predicted bone mask overlays original image:","091d9c09":"Read the file list:","405e1d8c":"Slight modifications were made - most importantly output layer activation function set to `tanh`. Typically, UNet is trained on binary masks, but there is no restriction for us to train pixel wise regression! If you looked at our bone masks again - pixels are not binary!\n\nNow time to define a data generator, which again is shamelessly taken from https:\/\/github.com\/imlab-uiip\/lung-segmentation-2d.\nAs the repository was quite old, some modifications were made to meet with `tensorflow.keras` framework."}}