{"cell_type":{"17b38396":"code","a06e76aa":"code","fb9c3cc6":"code","199ef4f9":"code","d378684a":"code","6e5841d7":"code","55ed49bd":"code","9fbe8b0e":"code","649bcd9b":"code","21ed48bc":"code","a6a4e775":"code","cb1eac2e":"code","b1e3a3ac":"code","65b23601":"code","1c372b52":"code","3989bcff":"code","c24ad055":"code","647e084d":"code","373ad5c1":"code","0ac6dea3":"code","69da56d5":"code","997cc21c":"code","ddffd1b5":"code","17a66391":"code","c5285744":"code","50128e43":"code","235bb66d":"code","a306ef44":"code","d164792a":"code","45c9bcee":"code","7152d6ac":"code","1750627a":"code","0feca891":"code","4be873ad":"code","80134ea0":"code","6ca5e080":"code","6193f7f3":"code","fc498dfe":"code","d5281347":"code","8de5eced":"code","ca0fdd81":"code","16202770":"code","9474008a":"code","a66956f6":"code","7a661b0d":"code","bfae608b":"code","f136c5e2":"code","5744f3da":"code","c89f4964":"code","fec29734":"code","a63eadf1":"code","34ab0238":"code","6068a2af":"code","ad01624e":"code","75051104":"code","71d02317":"code","9e2a771f":"code","ac1c9c24":"code","e8de4e32":"code","c2512b79":"code","d9cc10e9":"code","33f42b5a":"code","511afcf6":"code","e17f7262":"code","43f7bded":"code","735b88e4":"code","e1b9def4":"code","c8898d02":"code","1dc27f52":"code","4800dfbb":"code","37a888d2":"code","b92b098a":"code","96cd1b77":"code","bfd8823b":"code","68ba8718":"code","c9ea4599":"code","e8a5b121":"code","988aba27":"code","6921fbdd":"code","6f9034db":"code","ad94d0e7":"code","fee43ce6":"code","a81b8ba4":"code","654211bd":"code","b011eff7":"code","095959b8":"code","b82dd076":"code","da56d652":"code","1213be16":"code","3f470de8":"code","2ca8394c":"code","2375d7bc":"markdown","020a004d":"markdown","a7978c4c":"markdown","c48dfaa0":"markdown","4c1992d6":"markdown","122f18a0":"markdown","f88481da":"markdown","2f78f96c":"markdown","6ab9d080":"markdown","4044ea84":"markdown","5765c768":"markdown","444df439":"markdown","7aa31ab7":"markdown","705d0e6d":"markdown","ad56d328":"markdown","19883c57":"markdown","0f120763":"markdown","1ceb24cf":"markdown","1999b32d":"markdown","6defe637":"markdown","1d8b21cb":"markdown","5167ce1d":"markdown","ed5da612":"markdown","bea94afd":"markdown","456f9677":"markdown","218c41f4":"markdown","515678e5":"markdown","2d7f3ea1":"markdown","585e56b5":"markdown","ba81efa5":"markdown","9b81dc12":"markdown","cd5509bc":"markdown","598fed8f":"markdown","e6a8f2e0":"markdown","3cd75bc2":"markdown","8a5b2ed3":"markdown","25c518c4":"markdown","5d7a3bc2":"markdown","138977e1":"markdown","d5e15bd1":"markdown","51c9ee5c":"markdown","92c8295a":"markdown","28c7d447":"markdown","44a9eae7":"markdown","8d9d17ab":"markdown","cd71654c":"markdown","50b2ebe7":"markdown","bb6c994e":"markdown","d1526790":"markdown","a4dd3072":"markdown","0129cce4":"markdown","8460fd59":"markdown","86a4e349":"markdown","f5bfaa29":"markdown","54832c17":"markdown","9a54865a":"markdown","1d4a8e23":"markdown","e9bdafe9":"markdown","f59c28a8":"markdown","b3d82cb9":"markdown","042f4938":"markdown","580d93bd":"markdown","5dfc2571":"markdown","86417d25":"markdown","83b0f3d6":"markdown","02064afa":"markdown","bc42840a":"markdown","d60b6b96":"markdown","0bac01bd":"markdown","132c790a":"markdown","b4fd8401":"markdown","b4837011":"markdown","88e1ed34":"markdown","271c8abc":"markdown"},"source":{"17b38396":"pip install openpyxl","a06e76aa":"#importing libraries\nimport pandas as pd #Data Cleaning  \nimport numpy as np #Linear Algebra\nimport seaborn as sns #Ad\nsns.set_style(\"whitegrid\")\nimport matplotlib.pyplot as plt\n\n#Text Precprocessing tools\nimport re\n\n# suppress warnings \nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n## Setting some pandas options\npd.set_option('display.max_columns',1000)\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_colwidth', 1000)\npd.options.display.float_format = \"{:.2f}\".format","fb9c3cc6":"#Importing data files\ndf = pd.read_excel('..\/input\/contactcarscom-dataset\/Contactcars.com used cars data.xlsx')","199ef4f9":"#checking data first rows\ndf.head(5)","d378684a":"#checking data general info\ndf.info()","6e5841d7":"#dropping unnamed column\ndf.drop('Unnamed: 0',axis=1,inplace=True)","55ed49bd":"#Fixing Kilometers_crossed column by removing 'used' and 'Km' from the value and represent the number of kilometers only\ndf['Kilometers_crossed']=df['Kilometers_crossed'].str.replace(r'|', '').str.replace(r'Used', '').str.replace(r'KM', '')","9fbe8b0e":"#Removing the currency 'EGP' from the price since we only use one currency which is Egyptian pounds\ndf['Car_price']=df['Car_price'].str.replace(r'EGP', '').str.replace(r',', '')\ndf['Car_price'] = df['Car_price'].str.strip()","649bcd9b":"#splitting values of Seller's City column into two columns (Area and Governorate)\ndf[['Area','Governorate']]=df['Seller\\'s City'].str.split(pat='|',expand=True)","21ed48bc":"#Filling the na values in the created columns with Not available\ndf['Governorate'] = df['Governorate']. fillna('Not available')\ndf['Area'] = df['Area']. fillna('Not available')","a6a4e775":"#Stripping spaces from values\ndf['Governorate'] = df['Governorate'].str.strip()\ndf['Area'] = df['Area'].str.strip()","cb1eac2e":"#List for all Governorates in our datasets extracted from Governorate column\nGovernorate=['Eastern', 'Cairo', 'Port Said', 'Alexandria',\n       'Monufia','Qalyubia', 'Giza', 'Suez',\n       'El Beheira', 'Sohag', 'Dakahlia', 'Damietta', 'Ismailia',\n       'Helwan', 'Fayoum','Western','Nuweiba','Qena', 'Red Sea',\n       'Minya', 'Kafr El Sheikh', 'South Sinai', 'Asyut',\n       'Bani Sweif', 'Hurghada',\n       'Marsa Matrouh', 'Aswan', 'Luxor','El Tor']","b1e3a3ac":"#List of all Areas in our data sets extracted from the Area column\nArea=['6th of October','Zagazig', 'Heliopolis', 'El Dawhi', 'Muharram Bey',\n       'Nasr City', 'Sadat City', 'Sharabia', 'Asafra',\n       'Oasis Road', 'Qalyoub', 'Faisal', 'Gesr El Swes',\n       'Alexandria Desert Road', 'Saba Pasha', 'El Haram',\n       'El Darasa', 'Maadi', 'El Mohndseen', 'East District', 'Awayed',\n       'Glim', 'Delngat', 'Shubra', 'Gerga', 'New Cairo', 'El Montza',\n       'New Damietta', 'Mit Ghamar', 'Com Hammad', 'Burj Al Arab',\n       'Madinty', 'Abbasiya', 'Shbeen El Koom', 'Sheikh Zayed',\n       'El Sherouq City', 'Sidi Gaber', 'The Fifth Settlement',\n       'El Zayton', 'Ain Shams', 'Rasheed', 'Smouha', 'Nozha',\n       'El Tal El Kebeer', 'El Roda', 'Bolkly', 'Shbeen El Qanater',\n       'Road El Farag', 'Miami', 'Mokattam', 'Bulaq Dakror', 'Doki',\n       'Benha', 'Gianaclis', 'Riyadh', 'Kafr Saad', 'Atsa', 'Roushdy',\n       'Tanta', 'Bab El Louk', 'El Zawya El Hamra', 'Agouza', 'Bitash',\n       'El Mina', 'Port Fouad', 'El Salam City', 'Sidi Bishr', 'Quesna',\n       'Imbaba', 'Lazhoghly', 'Shubra Al Khaimah', 'El Sawah',\n       'Kafr al-Dawwar', 'El Oobor', 'Waili', 'Warraq', 'Smart Village',\n       'Al Ajmi', 'Fagus', 'Hadaeq El Qoba', 'Fustat', 'Kafr Abdo',\n       'Ras Gharib', 'Shoubrakhit', \"Berket El Saba'\", 'Abu al-Matamir',\n       'Manial', 'El Sayda Zeinab', 'Zefta', 'El Rehab', 'Laurent',\n       'Bulaq', 'Dar AISalaam', 'Tella', 'Wardian', 'South of Giza',\n       'Ashmon', 'Derb Negm', 'El Santa', 'El Ibrahmya', 'Sherbin',\n       'El Masala', 'Katameya', 'Hagar El Notia', 'Karmoos', 'Sedi Salm',\n       'Qantara East', 'Badr City', 'Zamalek', 'Husseinieh',\n       '1st Disrtict', 'Mandara', '10th of Ramadan', 'Abu Tisht',\n       'Senbellawein', 'El Ramal', 'Egypt Ismailia Desert Road',\n       'El Marg', 'Hanoville', 'Ras Al Barr', 'Qutour', 'Alshatby',\n       'Belina', 'Abdeen', 'Ezbt El Borg', 'Ataqah', 'Desouq', 'Aga',\n       'Baghos Bahari', 'Sporting', 'Attarin', 'Bab Sharq', 'Khanka',\n       'Abu Qir', 'Ras Sidr', 'Fayed', 'Osim', 'Damanhur', 'The Bagour',\n       'Nag Hammadi', 'Sheraton housing', 'El Dahria', 'Ihnasia',\n       'Mustafa Kamel', 'Mahalla al-Kubra', 'The Corniche', 'Malloy',\n       'Victoria', 'Belqas', 'Talkha', 'Juhayna', 'Abo Youssef',\n       'San Stefano', 'El Omranya', 'Kafr Shukr', 'Badrasheen',\n       \"El Seyof Shama'a\", 'El Geizra', 'El Qanater El Khayreya',\n       'Sheraton Road', 'Abu Rawash', 'El Tahrir', 'Abi Al Abbas',\n       'Fleming', 'North Giza', 'Ameria', 'Dikirnis', 'Menouf', 'Manshia',\n       'Tookh', 'El Daher', 'Down Town', 'Port Tawfiq', 'El Sahel',\n       'El Malak El Saleh', 'Bani Sweif New', 'Hosh Issa', 'Samalout',\n       'Saraya al-Qobba', 'Bella', 'Qusiya', 'El Syoof', 'Mahmoudia',\n       'Maamoura', 'Al-Azhar', 'Bani Mazar', 'Ras El Tin', 'Stanley',\n       'Mina Hurghada Road', 'El manzala', 'El Helmeya El Gadida',\n       'El Mataria', 'Awlad Saqr', 'Waboor El Maya', 'Hadabt Om El Sayed',\n       'Abu Hammad', 'Rahmaniyah', 'Sawalha', 'Mansheyet El-Bakry',\n       'Sharm El-Shaikh', 'Cleopatra', 'Magaga', 'El Hamam', 'Kom Ombo',\n       'Tor Sinai', 'Backus', 'West district', 'El Malaha', 'Abu Qurqas',\n       'Kafr Saqr', 'Sharq district', 'El Qasasen El Gededa',\n       'Asafra Bahri', 'Qaleen', 'Ayyat', 'El Bastin', 'Edco', 'Akhmim',\n       'El Zohor', 'Abu Sultan', 'Tahta', 'Kiman Faris', 'Nabq Bay',\n       'El Qareen', 'Mashtoul Souk', 'Mahtet El Ramal', 'Saqala',\n       'El Hadqa', 'El Shohda', 'Matai', 'Abu Kabir', 'Camp Caesar',\n       'Al-Manakh district', 'Azbakeya', 'Belbeis', 'Garden City',\n       'SARS Allian', 'Esna', 'Maragha', 'Qantara West', 'El Zarqa',\n       'Samanoud', 'Qaha', 'Al Wasta', 'Farshout', 'Dayrout',\n       'Minia al-Qamh', 'Ancient Egypt', 'Moqbel', 'Salam District',\n       'Kabary', 'Tamiya', 'Bahry', 'Gomrok', 'Sahl Hasheesh', \"Monsha'a\",\n       'The Saraya', 'Bayadeya', 'Mansheh Nasser', 'Dahar', 'Deshna',\n       'El mahta El Gedida', 'Manshiet al-Qanater', 'Azarita', 'Ghamra',\n       'Asafra Qebly', 'Saqqara', 'Nabrwa', 'Sohag Center', 'Tama',\n       'El Qora Road', 'The Hadra', 'Kafr El Zayat', \"Ne'ema Bay\",\n       'Mubarak district', 'Manial Al Rawda', 'El Gouna', 'Abu Sawyer',\n       'Atlas', 'Qeft', 'Arachya Egypt', 'El Qanyat',\n       'New Nubaria, Tahrir District', 'Salihiya', 'Al Ghanyem',\n       'El Syoof tram', 'Abasiri', 'Baltim and Burullus',\n       'Arbaeen District', 'Anfoushi', 'Saint Catherine', 'Ain Helwan',\n       'Al Franj District', 'Edfu', 'Itai El Barod', 'Manfloot',\n       'Abu Tig', 'ELHussein', 'Al Kawthar', 'Mustorod', 'Mena El Basal',\n       'Wadi Natrun', 'El Fagala', 'Dora', 'Ras El Soda',\n       'Al Qasr El Ainy', \"El Ahya'\", 'Abu Hummus', 'Bab El Sharia',\n       'El Bahr El Azam', \"Sultan's land\", 'Hadaq Helwan', 'El Gomrok',\n       'Alex-Agricultural Road', 'Naqada', 'El Gamalia', 'Wingate',\n       '15th of May', 'El Hai El Ferengy']","65b23601":"#Making sure that each value inside Governorate and Area columns is consistent and in the right place\nfor i in range(len(df.Governorate)):\n    for a in Governorate:\n        if a in df.Area[i]:\n            df.Governorate[i]=df.Area[i]\n            df.Area[i]='Not available'\n    for a in Area:\n        if a in df.Governorate[i]:    \n            df.Area[i]=df.Governorate[i]\n            df.Governorate[i]='Not available'","1c372b52":"#Checking results\ndf[['Seller\\'s City','Area','Governorate']].head(10)","3989bcff":"#Making sure all the not available values has the same letter case\ndf=df.replace(r'Not Available', 'Not available')","c24ad055":"#Changing the columns types\ndf['Car_price']=pd.to_numeric(df['Car_price'])\ndf['Model_year']= df['Model_year'].astype(str)","647e084d":"df['Kilometers_crossed']=df['Kilometers_crossed'].str.replace(r',', '')\ndf['Kilometers_crossed']=pd.to_numeric(df['Kilometers_crossed'])","373ad5c1":"#Dropping Not available date rows \ndf=df[df['Ad_post_date'] != 'Not available']","0ac6dea3":"#changing Ad_post_date column into date type\ndf['Ad_post_date']=pd.to_datetime(df['Ad_post_date'])","69da56d5":"# Now we can extracte week day,month name from date column\ndf['week_day']=df['Ad_post_date'].dt.day_name()\ndf['Month']=df['Ad_post_date'].dt.month_name()","997cc21c":"#checking results\ndf.head(1)","ddffd1b5":"#extracting factory painted cars and cars that had accidents and payment options from the description column\nFactory_paint_description=[]\naccident=[]\nPayment_option=[]\nfor i in df[\"Car_description\"]:\n    if '\u0641\u0627\u0628' in i or '\u0641\u0628' in i:\n        Factory_paint_description.append('Factory Paint')\n    else:\n        Factory_paint_description.append('Not available')\nfor i in df[\"Car_description\"]:\n    if '\u062d\u0627\u062f\u062b' in i:\n        accident.append('accident')\n    else:\n        accident.append('Not available')\nfor i in df[\"Car_description\"]:\n    if '\u0642\u0633\u0637' in i or '\u0627\u0642\u0633\u0627' in i or '\u0623\u0642\u0633\u0627' in i:\n        Payment_option.append('Installment')\n    else:\n        Payment_option.append('Cash')","17a66391":"#Creating columns for the lists extracted\ndf['Factory_paint_description']=Factory_paint_description\ndf['accident']=accident\ndf['Payment_option']=Payment_option","c5285744":"#checking results\ndf[['Car_description','Car_paint','Factory_paint_description','accident','Payment_option']]","50128e43":"#Merging the two columns together\ndf['Car_paint_final'] = np.select([df.Car_paint != df.Factory_paint_description , df.Car_paint == df.Factory_paint_description], ['Factoty Paint', df.Car_paint])","235bb66d":"#checking final results\ndf[['Car_description','Car_paint','Factory_paint_description','Car_paint_final','accident','Payment_option']]","a306ef44":"# We will remove the columns that we have their information extracted in subcolumns since we are not going to use them\ndf.drop(['Seller\\'s City','Car_paint','Ad_post_date','Interior_Features','Exterior_Features','Multimedia_Features','Safety_Features','Factory_paint_description'],axis=1,inplace=True)","d164792a":"#Checking results\ndf.head(2)","45c9bcee":"# checking numerical Data statistics\ndf.describe(percentiles=None)","7152d6ac":"#checking outliers for car prices with it's Sub_models\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Model_name',y='Car_price',data=df);\nplt.xticks(rotation=90);","1750627a":"#Eliminating outliers\ndf=df[(df['Car_price']>10000) & (df['Car_price']<1000000)]","0feca891":"#checking results after eleminating outliers\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Model_name',y='Car_price',data=df);\nplt.xticks(rotation=90);","4be873ad":"#checking outliers for car prices with it's model years\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Model_year',y='Car_price',data=df);\nplt.xticks(rotation=90);","80134ea0":"#checking high prices for old cars\ndf[(df['Car_price']>100000)&(df['Model_year']<'1995')]","6ca5e080":"df.drop(index=2462,inplace=True)\ndf.drop(index=11744,inplace=True)\ndf.drop(index=4045,inplace=True)\ndf.drop(index=6188,inplace=True)\ndf.drop(index=4713,inplace=True)\ndf.drop(index=5818,inplace=True)","6193f7f3":"#checking low prices for some early years cars cars\ndf[(df['Car_price']<50000)&(df['Model_year']>='2013')]","fc498dfe":"df.drop(index=7513,inplace=True)\ndf.drop(index=8445,inplace=True)\ndf.drop(index=10457,inplace=True)\ndf.drop(index=10683,inplace=True)","d5281347":"#checking results after eleminating outliers\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Model_year',y='Car_price',data=df);\nplt.xticks(rotation=90);","8de5eced":"#checking outliers for car prices with it's Kilometers\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Kilometers_crossed',y='Car_price',data=df);\nplt.xticks(rotation=90);","ca0fdd81":"#Eliminating outliers\ndf=df[(df['Kilometers_crossed']>1000) & (df['Kilometers_crossed']<600000)]","16202770":"#checking results after eliminating outliers\nplt.figure(figsize=(15,15),dpi=100);\nsns.scatterplot(x='Kilometers_crossed',y='Car_price',data=df);\nplt.xticks(rotation=90);","9474008a":"def outlier_treatment(datacolumn):\n    sorted(datacolumn)\n    Q1,Q3 = np.percentile(datacolumn , [25,75])\n    IQR = Q3 - Q1\n    lower_range = Q1 - (1.5 * IQR)\n    upper_range = Q3 + (1.5 * IQR)\n    return lower_range,upper_range","a66956f6":"df[(df['Model_name']=='Chevrolet')&(df['SubModel_name']=='Chevrolet Lanos')&(df['Model_year']=='2015')&(df['Motor_capacity']=='1500 cc')]","7a661b0d":"# Now we will run the outliers handling function\nfor index, row in df.iterrows():\n    d=df[(df['Model_name']==row['Model_name'][0:])&(df['SubModel_name']==row['SubModel_name'][0:])&(df['Model_year']==row['Model_year'][0:])&(df['Motor_capacity']==row['Motor_capacity'][0:])&(df['accident']==row['accident'][0:])&(df['Body_type']==row['Body_type'][0:])]\n    p=d['Car_price'].median()\n    sorted(d['Car_price'])\n    Q1,Q3 = np.percentile(d['Car_price'] , [25,75])\n    IQR = Q3 - Q1\n    lower_rangeCar_price = Q1 - (1.5 * IQR)\n    upper_rangeCar_price = Q3 + (1.5 * IQR)\n    if row['Car_price'] < lower_rangeCar_price:\n        df.at[index,'Car_price']=p\n    elif row['Car_price'] > upper_rangeCar_price:\n        df.at[index,'Car_price']=p","bfae608b":"#checking results on the same type of car\ndf[(df['Model_name']=='Chevrolet')&(df['SubModel_name']=='Chevrolet Lanos')&(df['Model_year']=='2015')&(df['Motor_capacity']=='1500 cc')]","f136c5e2":"# How many Not Available strings in each column\ncount_missing_Transactions = df[df=='Not available'].count()\npercent_missing_Transactions = round(df[df=='Not available'].count()\/len(df) * 100, 1)\nmissing_Transactions = pd.concat([count_missing_Transactions, percent_missing_Transactions], axis = 1)\nmissing_Transactions.columns = [\"Missing (count)\", \"Missing (%)\"]\nmissing_Transactions.sort_values(by=\"Missing (%)\",ascending=False)","5744f3da":"#dropping more that 96% percent columns \ndf.drop(['Front_Camera','Multi_function_steering_wheel','Front_parking_sensors','Navigation_System','Tire_Pressure_Monitoring_TPMS','Electronic_Stability_Program_ESP','Paddle_shifters','accident'],axis=1,inplace=True)","c89f4964":"df=df[df['Governorate'] != 'Not available']","fec29734":"# How many Not Available strings in each column\ncount_missing_Transactions = df[df=='Not available'].count()\npercent_missing_Transactions = round(df[df=='Not available'].count()\/len(df) * 100, 1)\nmissing_Transactions = pd.concat([count_missing_Transactions, percent_missing_Transactions], axis = 1)\nmissing_Transactions.columns = [\"Missing (count)\", \"Missing (%)\"]\nmissing_Transactions.sort_values(by=\"Missing (%)\",ascending=False)","a63eadf1":"df[(df.duplicated())]","34ab0238":"#dropping duplicated rows\ndf.drop_duplicates(inplace=True)","6068a2af":"#Distribution of Cars Prices among cars\nplt.figure(figsize=(8,4),dpi=100);\nsns.histplot(df['Car_price']);\nplt.axvline(df['Car_price'].mean(),color = \"red\")\nplt.title('Distribution of Cars Prices among cars');\nxx,locs=plt.xticks()\nll=['%.1f' % a for a in xx]\nplt.xticks(xx,ll)\nplt.xlim()\nplt.show()","ad01624e":"#Average car parices\ndf['Car_price'].mean()","75051104":"#Distribution of Cars Kilometers crossed among cars\nplt.figure(figsize=(8,4),dpi=100);\nsns.boxplot(df['Kilometers_crossed']);\nplt.axvline(df['Kilometers_crossed'].mean(),color = \"red\")\nplt.title('Distribution of Kilometers crossed among cars');\nxx,locs=plt.xticks()\nll=['%.1f' % a for a in xx]\nplt.xticks(xx,ll)\nplt.show()","71d02317":"#Average Kilometers_crossed\ndf['Kilometers_crossed'].mean()","9e2a771f":"#Cars distribution by model names\nplt.figure(figsize = (15,10), dpi = 100)\nbase_color = sns.color_palette()[0]\n\ncounts = df['Model_name'].value_counts(normalize = True)\nsns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Model name')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nprint(counts * 100)\n\nplt.title(\"Cars distribution by model names - percent\")\nplt.show()","ac1c9c24":"#Cars distribution by Model year\nplt.figure(figsize = (10,10), dpi = 100)\nbase_color = sns.color_palette()[0]\n\ncounts = df['Model_year'].value_counts(normalize = True)\nsns.lineplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Model_year')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.title('Cars distribution by Model year')\nprint(counts * 100)","e8de4e32":"#Cars distribution by Body type\nplt.figure(figsize = (8,4), dpi = 100)\nbase_color = sns.color_palette()[0]\n\ncounts = df['Body_type'].value_counts(normalize = True)\nsns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Body_type')\nplt.ylabel('Count')\nplt.title('Cars distribution by Body type')\nprint(counts * 100)","c2512b79":"#Cars distribution by Transmission type\nplt.figure(figsize = (8,7), dpi = 100)\nbase_color = sns.color_palette()[0]\n\ncounts = df['Transmission_type'].value_counts(normalize = True)\ncounts.plot.pie()\n#sns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Transmission_type')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.title('Cars distribution by Transmission type')\nprint(counts * 100)","d9cc10e9":"#Cars distribution by Motor capacity\nplt.figure(figsize = (8,8), dpi = 100)\nbase_color = sns.color_palette()[0]\n\ncounts = df['Motor_capacity'].value_counts(normalize = True)\nsns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Motor_capacity')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.title('Cars distribution by Motor capacity')\nprint(counts * 100)","33f42b5a":"#Cars distribution by Car color\nplt.figure(figsize = (8,4), dpi = 100)\nbase_color = sns.color_palette()[0]\n\nCar_color_values=['Baby Blue','Beige','Black','Blue','Bronze','Brown','Champagne','Dark Grey','Gold','Gray','Green','Maroon','Navy Blue','Orange','Pink','Purple','Red','Silver','Turquoise','White','Yellow']\n\ncounts = df['Car_color'].value_counts(normalize = True)\nsns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Car_color')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.title('Cars distribution by Car color')\nprint(counts * 100)","511afcf6":"df.head(1)","e17f7262":"#Cars distribution by Governorate\nplt.figure(figsize = (8,8), dpi = 100)\nbase_color = sns.color_palette()[0]\ncounts = df['Governorate'].value_counts(normalize = True)\nsns.barplot(x = counts.index, y = counts.values, color=base_color)\nplt.xlabel('Governorate')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.title('Cars distribution by Governorate')\nprint(counts * 100)","43f7bded":"#Cars prices by Kilometers\nplt.figure(figsize=(8,4),dpi=100);\nsns.regplot(data=df,x='Kilometers_crossed',y='Car_price',color=base_color);\nplt.xlabel('Kilometers_crossed');\nplt.ylabel('Car_price');\nplt.title('Cars prices by Kilometers');","735b88e4":"#Average Car prices by model names\nplt.figure(figsize=(15,15),dpi=100);\ncounts = df.groupby('Model_name')['Car_price'].mean().sort_values(ascending=False)\nsns.barplot(data=df,y=counts.index,x=counts.values,color=base_color);\nplt.xlabel('Car prices');\nplt.ylabel('model names');\nplt.xticks(rotation=90)\nplt.title('Average Car prices by model names');\nprint(counts)","e1b9def4":"#Average Car prices by Transmission type\nplt.figure(figsize=(8,4),dpi=100);\n\nTransmission_type_values=['CVT','Dual Clutch','Manual','Automatic']\nTransmission = pd.api.types.CategoricalDtype(ordered=True, categories=Transmission_type_values)\ndf['Transmission_type'] = df['Transmission_type'].astype(Transmission)\n\ncounts = df.groupby('Transmission_type')['Car_price'].mean().sort_values(ascending=False)\nsns.barplot(data=df,x=counts.index,y=counts.values,color=base_color);\nplt.xlabel('Car prices');\nplt.ylabel('Transmission type');\nplt.title('Average Car prices by Transmission type');\nprint(counts)","c8898d02":"#The Most cars sold in every Governorate\nfig, ax = plt.subplots(4,8, figsize=(15,4),dpi=500)\nfig.tight_layout(w_pad=3)\nplt.subplots_adjust(bottom=0.5,top=5)\nplt.axis('off')\nbbox_inches=0\n\n# unpack all the axes subplots\nax = ax.ravel()\n\n# assign the plot to each subplot in axe\nfor i, c in enumerate(df['Governorate'].unique()):\n    df[df['Governorate']==c].groupby(['Governorate','Model_name'])['Model_name'].count().sort_values(ascending=False).head(5).plot(kind='bar',ax=ax[i],title=None);\n    ax[i].title.set_text(c);\n    ax[i].set_xlabel('')","1dc27f52":"#filtering cars with the same features but with different Kilometers crossed  \ndf[(df['Model_name']=='Chevrolet') & (df['SubModel_name']=='Chevrolet Lanos')]\ndf[(df['Model_name']=='Chevrolet') & (df['SubModel_name']=='Chevrolet Lanos') & (df['Model_year']=='2010') & (df['Body_type']=='Sedan') & (df['Motor_capacity']=='1500 cc') & (df['Transmission_type']=='Manual') & (df['Car_color']=='Maroon') & (df['Car_paint_final']=='Factory Paint')]","4800dfbb":"df['Car_description'][5170]","37a888d2":"df['Car_description'][6453]","b92b098a":"#plotting the figure\ndf[(df['Model_name']=='Chevrolet') & (df['SubModel_name']=='Chevrolet Lanos') & (df['Model_year']=='2010') & (df['Body_type']=='Sedan') & (df['Motor_capacity']=='1500 cc') & (df['Transmission_type']=='Manual') & (df['Car_color']=='Maroon') & (df['Car_paint_final']=='Factory Paint')].plot.bar(figsize = (10,6),x='Kilometers_crossed',y='Car_price')\nplt.title('Car prices for the same car with the same features but with different model years',size=13);\nplt.xlabel('Kilometers_crossed',size=13);\nplt.ylabel('Car price',size=13);\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left');\nplt.xlim(right=4.5)","96cd1b77":"#filtering cars with the same features but with different Model year \ndf[(df['Model_name']=='Fiat') & (df['SubModel_name']=='Fiat 128 nova') & (df['Kilometers_crossed']==9999) & (df['Body_type']=='Sedan') & (df['Motor_capacity']=='1300 cc') & (df['Transmission_type']=='Manual') & (df['Car_color']=='White')]","bfd8823b":"df['Car_description'][93]","68ba8718":"df['Car_description'][158]","c9ea4599":"df['Car_description'][3432]","e8a5b121":"df['Car_description'][3729]","988aba27":"df['Car_description'][4140]","6921fbdd":"#plotting the figure\ndf[(df['Model_name']=='Fiat') & (df['SubModel_name']=='Fiat 128 nova') & (df['Kilometers_crossed']==9999) & (df['Body_type']=='Sedan') & (df['Motor_capacity']=='1300 cc') & (df['Transmission_type']=='Manual') & (df['Car_color']=='White')].plot.bar(figsize = (10,6),x='Model_year',y='Car_price')\nplt.title('Car prices for the same car with the same features but with different model years',size=13);\nplt.xlabel('Model year',size=13);\nplt.ylabel('Car price',size=13);\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left');\nplt.xlim(right=4.5)","6f9034db":"#count of each Submodel\ndf['SubModel_name'].value_counts()","ad94d0e7":"#Removing submodels mentioned less than 30 times\ns = df['SubModel_name'].value_counts()\ndf=df[df.isin(s.index[s >=30]).values]","fee43ce6":"#Selecting features into a new dataframe that we will use to train the model on\ndf1=df[['Payment_option','Kilometers_crossed','Model_name','SubModel_name','Area','Governorate','Motor_capacity','Car_color','Analoge_Air_Condition','Electronic_window','Car_paint_final','Model_year','Transmission_type','Body_type','Sun_Roof','Rear_view_camera','Cruise_Control','Rear_parking_sensors','Leather_Seats','Bluetooth','Air_Bags_Passenger','Anti_Lock_Braking_System_ABS','USB','Power_mirror','Aux','Air_Bags_For_Driver','Car_price','Side_Airbags','car_key','Panorama_roof','Traction_Control','Touch_screen','Waranty_condition']]","a81b8ba4":"#Transforming using label_encoder since it turned out to be our best option\nfrom sklearn.preprocessing import LabelEncoder\n\ndf1['Model_name']=LabelEncoder().fit_transform(df1['Model_name'])\ndf1['SubModel_name']=LabelEncoder().fit_transform(df1['SubModel_name'])\ndf1['Area']=LabelEncoder().fit_transform(df1['Area'])\ndf1['Governorate']=LabelEncoder().fit_transform(df1['Governorate'])\ndf1['Motor_capacity']=LabelEncoder().fit_transform(df1['Motor_capacity'])\ndf1['Car_color']=LabelEncoder().fit_transform(df1['Car_color'])\ndf1['Analoge_Air_Condition']=LabelEncoder().fit_transform(df1['Analoge_Air_Condition'])\ndf1['Electronic_window']=LabelEncoder().fit_transform(df1['Electronic_window'])\ndf1['Car_paint_final']=LabelEncoder().fit_transform(df1['Car_paint_final'])\ndf1['Model_year']=LabelEncoder().fit_transform(df1['Model_year'])\ndf1['Transmission_type']=LabelEncoder().fit_transform(df1['Transmission_type'])\ndf1['Sun_Roof']=LabelEncoder().fit_transform(df1['Sun_Roof'])\ndf1['Rear_view_camera']=LabelEncoder().fit_transform(df1['Rear_view_camera'])\ndf1['Cruise_Control']=LabelEncoder().fit_transform(df1['Cruise_Control'])\ndf1['Rear_parking_sensors']=LabelEncoder().fit_transform(df1['Rear_parking_sensors'])\ndf1['Leather_Seats']=LabelEncoder().fit_transform(df1['Leather_Seats'])\ndf1['Air_Bags_Passenger']=LabelEncoder().fit_transform(df1['Air_Bags_Passenger'])\ndf1['Anti_Lock_Braking_System_ABS']=LabelEncoder().fit_transform(df1['Anti_Lock_Braking_System_ABS'])\ndf1['USB']=LabelEncoder().fit_transform(df1['USB'])\ndf1['Power_mirror']=LabelEncoder().fit_transform(df1['Power_mirror'])\ndf1['Aux']=LabelEncoder().fit_transform(df1['Aux'])\ndf1['Air_Bags_For_Driver']=LabelEncoder().fit_transform(df1['Air_Bags_For_Driver'])\ndf1['Bluetooth']=LabelEncoder().fit_transform(df1['Bluetooth'])\ndf1['Body_type']=LabelEncoder().fit_transform(df1['Body_type'])\ndf1['Side_Airbags']=LabelEncoder().fit_transform(df1['Side_Airbags'])\ndf1['car_key']=LabelEncoder().fit_transform(df1['car_key'])\ndf1['Panorama_roof']=LabelEncoder().fit_transform(df1['Panorama_roof'])\ndf1['Traction_Control']=LabelEncoder().fit_transform(df1['Traction_Control'])\ndf1['Touch_screen']=LabelEncoder().fit_transform(df1['Touch_screen'])\ndf1['Waranty_condition']=LabelEncoder().fit_transform(df1['Waranty_condition'])\ndf1['Payment_option']=LabelEncoder().fit_transform(df1['Payment_option'])","654211bd":"# Assign x features\nX=df1.drop('Car_price',axis=1)","b011eff7":"#assigning target column\ny=df1['Car_price']","095959b8":"#creating a table to mention accuracy of each model we use\nresults = pd.DataFrame(columns=['R2','MAE','RMSE'])","b82dd076":"# importing split feature\nfrom sklearn.model_selection import train_test_split\n\n#splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=200)","da56d652":"# importing linear regression\nfrom sklearn.linear_model import LinearRegression\n\nLR=LinearRegression()\n\n#fitting data\nLR.fit(X_train,y_train)\n\n#import assessing metrics\nfrom sklearn import metrics\n\n#predicting on data\nLRpredictions=LR.predict(X_test)\nR2 = LR.score(X_test, y_test)\nMAE = metrics.mean_absolute_error(y_test,LRpredictions)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test,LRpredictions))\n\n\n\n\n#Assessing results using MAE & RMSE \nprint('MAE=', MAE)\nprint('RMSE=', RMSE)\nprint('R2=', R2)\n\nresults.at['Linear Regression', 'MAE'] = MAE\nresults.at['Linear Regression', 'RMSE'] = RMSE\nresults.at['Linear Regression', 'R2'] = R2","1213be16":"# importing DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n\nDT=DecisionTreeRegressor()\n\n#fitting data\nDT.fit(X_train,y_train)\n\n#predicting on data\nDTpredictions=DT.predict(X_test)\nR2 = DT.score(X_test, y_test)\nMAE = metrics.mean_absolute_error(y_test,DTpredictions)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test,DTpredictions))\n\n\n#Assessing results using MAE & RMSE \nprint('MAE=', MAE)\nprint('RMSE=', RMSE)\nprint('R2=', R2)\n\nresults.at['Decision Tree Regressor', 'MAE'] = MAE\nresults.at['Decision Tree Regressor', 'RMSE'] = RMSE\nresults.at['Decision Tree Regressor', 'R2'] = R2","3f470de8":"# importing RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nRF=RandomForestRegressor()\n\n#fitting data\nRF.fit(X_train,y_train)\n\n#predicting on data\nRFpredictions=RF.predict(X_test)\nR2 = RF.score(X_test, y_test)\nMAE = metrics.mean_absolute_error(y_test,RFpredictions)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test,RFpredictions))\n\n\n#Assessing results using MAE & RMSE \nprint('MAE=', MAE)\nprint('RMSE=', RMSE)\nprint('R2=', R2)\n\n\nresults.at['Random Forest Regressor', 'MAE'] = MAE\nresults.at['Random Forest Regressor', 'RMSE'] = RMSE\nresults.at['Random Forest Regressor', 'R2'] = R2","2ca8394c":"results","2375d7bc":"3. Random Forest Regressor","020a004d":"### 2.Model year","a7978c4c":"**Graphic conclusion:**\n- As illustrated above for the cars with the same description mentioned and same features and color we can see that the only difference is the year and every year has it's own price range (As the Model year increases the price gets higher)\n","c48dfaa0":"## Duplicates Handling","4c1992d6":"### Multivariate Analysis","122f18a0":"**Graphic conclusion:**\n- Most of the Ads are posted in Cairo & Giza","f88481da":"### Bivariate Analysis","2f78f96c":"I will install openpyxl package to enable me to import xlsx files in kaggle notebboks","6ab9d080":"Excellent!\n\nNow we have two column for Car paint condition, the first is car_paint(Selected an option from the Ad) and the second is  Factory_paint_description (Seller mentioned in the description column) , now we will merge car_paint and the Factory_paint_description together into car_paint_final column.","4044ea84":"As we can see there are Some cars that have high kilometers number over than 700,000 but with very high prices\n\nWe will remove any number of kilometers less than 1000 which doesn't represent a used car category and more than 700,000 because it is most likely the highest number of kilometers crossed by a car in our country","5765c768":"Moving on to the next step in outliers handling , the following is an automated approach that handles each car with an outlier price.\n\nNow since the pricing of these Ads are made by random individuals and each seller can price his car as he likes , we can find alot of unreasonable prices requested by sellers which can be outliers and decrease our model performance\n\nSo in order to fix that, i created a function that iterates and gathers all the cars that are similar in Model name, Submodel, Model year, Motor capacity, Body type and wether the car had an accident or not (Because that's a logical reason for a dramatic price change) and calculates the median price of these cars prices and replace the outliers with it.\n\nNote: We chose median because it is not affected by outliers unlike mean","444df439":"Distribution is more logical","7aa31ab7":"As we can see this is the right representation of the -ve relation between car price and kilometers crossed as as the car crosses more kilometers the car price decreases","705d0e6d":"### 1.Kilometers","ad56d328":"So in order to fix these Issue:\n\n**For the First Issue** My Goal is to have a column that represents wether the car still has it's Factory paint or not, wether this information has been mentioned in the Car_paint column only or in the description column only or mentioned in both of them.\n\nSo inorder to do that i will create a column with the name of Factory_paint_description that extracts from the describtion column wether the car has it's factory paint or not and merge the Car_paint and the Factory_paint_description columns together.\n\n**For the Second Issue** I will extract a new column from the Description column that mentiones the payment option for the car (Cash,Installments)\n\n**For the Third Issue** I will extract an accident column which mentiones wether the car have had an accident or not.","19883c57":"Note: I had to do the above step now so it enables me to transform the Ad_post_date column into a datetime column type , because it can't be transformed into datetime while it has string values 'Note available' in it.","0f120763":"## About the Dataset","1ceb24cf":"Below is a function that takes in two conditions and and when a condition is met it gives a specific value based on that condition.\n\n- If both the values in the two column are not equal in a record it will Give me 'Factory paint' as a value in the new column\n\n- If both of them are euqal it will Give me the Value in the Car_paint record\n","1999b32d":"**Graphic conclusion:**\n- Most of the used cars Ads are for sedan cars which is basicaly because there are more sedan cars in the market than the Hatchback and other types of body types\n- Some ad posters didn't mention the Car Body type","6defe637":"**Graphic conclusion:**\n- The Graph concludes that there is a negative correlation between the Kilometers crossed and the car prices which means the as the kilometers crossed increases the car price decreases \n- The pearson correlation between both of them is -0.217","1d8b21cb":"Excellent, let's Move on","5167ce1d":"**Graphic conclusion:**\n- It seems that The Transmission type is also an important feature that would affect the price of the car since every Transmission type has it's price range","ed5da612":"1. Linear Regression","bea94afd":" **Conclusion:**\n \n- As illustrated above , when the Kilometers of the car increased , the price decreased , even though both of the cars have the same conditions","456f9677":"I have around 12,000 different Ads scraped from contactcars.com with 45 columns that describes the cars main and submain features such as(Model name,Submodel,Model year,Kilometers crossed,Body_type,Transmission_type,Motor_capacity,...) and several other features that would help us understand more information about each car","218c41f4":"**Graphic conclusion:**\n- Most of the car models on the website are for 2015 year, maybe there was something specific to that year in car production we need to do more further analysis if needed\n","515678e5":"Objective of this Notebook:\n\nIn this notebook i will continue with my project stages and conduct:\n\n1. Data Cleaning\n2. Features Engineering\n3. Data Anlaysis\n4. Applying Machine Learning Model","2d7f3ea1":"- The below prices don't seem logical and there is not explanation in the description column so we will remove them","585e56b5":"**Graphoc conclusion:** It seems that some prices are not priced logically relative to their model years as we can see, there are some cars with model years of 1965 but the car price is so high , so either the car is some kind of an antique that only collectors would pay that amount of money for ... which is something that should have been mentioned in the description column or the car has been wrongly priced.\n\nSo let's investigate that in the cell bellow,  we will fitler these specific cars.","ba81efa5":"First of all we will drop the submodels that we have in our data that are represented less than 30 times to enhance our model prediction","9b81dc12":"Below is a function that takes in a column and sort it's values and calculate it's IQR,Q1,Q2 and Calculates the extremely higher and lower values that we should eliminate from our dataset , i will use it in my function","cd5509bc":"**Graphic Conclusion:**\n\nThe Figure shows the most cars posted for sale in each Governorate ","598fed8f":"After splitting the Seller's city column we faced two issue:\n\n- First issues is that since the values in the Seller's City column were not consistent which means that some of the Ads had the 'Governorate' only and some had the 'Area' only, and some didn't have values at all ('Not availale'), so as a result after splitting we got some null values in both of the new columns.\n\n\n- Second issue is that after splitting, some of the Areas were mentioned as Governorates and Vice versa.","e6a8f2e0":"**Graphic conclusion:**\n- Most of the Ad posters didn't mention the car color\n- The most colors in the cars is Black & Silverm","3cd75bc2":"**Graph Conclusion:** \n- Average Cars price is around 170,000 L.E","8a5b2ed3":"## Used Cars Market: Data Analysis & Prices Prediction","25c518c4":"I have noticed that some dates are not shown in the Ad_post_date column and by going back to their original Ads on the website, it showed that their dates and mobile numbers weren't mentioned.\n\nThis means that these Ads are expired and not available for sale any more so i will remove them from my dataframe and use the rest of the available data.","5d7a3bc2":"## Exploratory Data Analysis","138977e1":"Now we are done with our analysis and answered important questions that intrests the Contributors, We will move on to our Machine learning that will predict each car price according to it's features","d5e15bd1":"Now checking results","51c9ee5c":"As we can see ubove in the first car index of 963 the car price is 85,000 which is lower than the Median of the rest of the car prices and is considered as an outlier, so we will apply our loop and check the results","92c8295a":"**Graphic conclusion:**\n- Most of the Motor capacity for sale is 1600 cc","28c7d447":"**Graph Conclusion:** \n- Most of the cars sold are The Korean cars (Huyndai, Chevrolet, Kia, Renault, Daewoo) since they are the most used type of cars in our market(due to it's good prices compared to the values and options it provides)\n","44a9eae7":"## Model Building and Evaluation","8d9d17ab":"## Features Engineering","cd71654c":"We will check The car prices distribution relative to their Model names, Model years, Kilometers crossed","50b2ebe7":"Distribtuion seems more realistic","bb6c994e":"### Conclusion:\n\nEventually, the best Machine learning model that we have used was the Random Forset algorithm which gave us the lowest MAE & RMSE, There is more space for improvement of course which we will conduct on a larger scale of data.","d1526790":"let's move on to the next step","a4dd3072":"- In this section, we will investigate relationships between pairs of variables in our data","0129cce4":"Now let's move to the Not available values , since i scraped the data myself from the internet and i made sure to replace any missing values with \"Not available\" instead of null values, i will search for the 'Not availabe' values inside each column instead of nan values and investigate the reason for it's inexistence , if it's logical and expresses the condition of the car then we will use it as it is in our model , if it's not then we will fix it.","8460fd59":"Our obejctive is to Understand:\n\n1. What are the distributions of features along the dataset\n2. What are the features that affect the car prices mostly so we can use them in our ML model\n \nFeatures that will help support our investigation:\n\n1. Car price\n2. Kilometers crossed\n3. Model name\n4. SubModel name\t\n5. Model year\n6. Body type\n7. Transmission type\n8. Motor capacity\n9. Waranty condition\n10. Car paint final","86a4e349":"Now, Let's Change some column types","f5bfaa29":"Inorder to fix these two issues:\n\n- For the First issue i will fill in the null values with 'Not available' and deal with them later in the Not available handling step.\n\n- For the Second issue i will create two lists that have all the Areas and Governorates in our dataset and loop through the two columns to make sure that each value is consistent with it's column","54832c17":" The general information about the dataframe point out to several issues:\n- We need to drop the unnamed column\n- Some features need Features Engineering before we start changing its type.\n- For the Car description column, we will search for specific keywords in it that would help us understand more about the car condition and it's pricing and create columns that represent these keywords so we can use them in our Model.\n- Not available value is a value that represents the lack of information in the cell which could be because of many reasons, either the Ad didn't specify that information or the car doesn't have that feature in it, we will investigate that later on during the analysis but we need to make sure that all of the 'Not available' values have the same letters so we can filter them later on.\n- Car_price column type needs to be changed to int.\n- Model_year column type needs to be changed to str.\n- Ad_post_date needs to be changed to date.","9a54865a":"- The above values are for entirely duplicated rows across the dataframe which is not useful for us and , i will drop them","1d4a8e23":"**Graphic conclusion:**\n- Most of the cars Transmission type is Automatic , the manual has almost the same percentage in the market with 43% which indicates that our market is almost divided equally between Automatic & Manual cars and so few other transmission types(CVT,Dual Clutch)\n","e9bdafe9":"- We can see that we have some unrealistic values in the minimmum amount for prices and kilometers crossed with (1 kilometers and 110 price) and same thing goes for the maximum amount with (111111111 kilometers and 22000000 price) , I will fix that in the next step","f59c28a8":"Now before we apply the function let's find an example of an outlier that our function will solve , we will Check a specific car that has the same Model_name , SubModel_name , Model_year , Motor_capacity as shown below","b3d82cb9":"Now as we can see the car with index of 963 it's price has been changed to 110000 which is the median price of the same car with the same features","042f4938":"**Graph Conclusion:** \n- Average number of Kilometers crossed is 117,000 KM","580d93bd":"- Some of the cars have installments plan so we will leave them as they are\n\n- Some of the prices don't seem logical and there is not explanation in the description column as well so we will remove them.","5dfc2571":"Observations:","86417d25":"### Univariate Analysis","83b0f3d6":"Removing commas from the numbers represented in the Kilometers crossed column and changing it's type to numeric","02064afa":"- We are going to remove missing column more than 96% from our dataset since it's not going to benefit us and use the rest of the information\n \n- We don't have missing values in the main features such as (Mobile number) which is the unique identifier for each AD and (Model name,Sub model name)\n\n- I will remove the Governorates that are missing and leave the missing areas and colors as it seems the best practice for the model accuracy (I tried different options and this is the best option)","bc42840a":"**Graph conclusion:** As per the figure above and after looking further into the car prices column and the statistics of our numerical columns we found out that some sellers post unrealistic prices such as (180,150,220000000,...) just to fill in the section of the car price in the Ad.\n\nSo as per my Domain knowledge i will keep as a starter the cars prices in the dataset from 20,000 till 1,000,000 because this is most likely the figures that represent the cars prices in our market.","d60b6b96":"- In this section we will investigate several feature together to find out how does some independent features affect our dependent feature (Car price)\n\n- In the below figures we will filter several cars with the same features and keep one different independent feature among them & check how that feature affect the price\n\n- We have already illustrated using regplot the relation between kilometers column and price column but we will further elaborate that using a real life example from our dataset\n","0bac01bd":"- In this section, we will investigate distributions of individual variables along the dataset","132c790a":"## Handling Missing data","b4fd8401":"2. Decision Tree Regressor","b4837011":"## Outliers handling","88e1ed34":"Moving to the Description column\n\nAfter i have reviewed some of the Ads i have noticed some Issues:\n\n**First Issue** is that even though there is a section in the Ad that the seller could use to specify if the car is still with it's Factory paint (represented in the Car_paint column),\nsome of the sellers did not choose that option in the Ad, even though they stated in the description of the car that it's still with it's Factory paint.\n\n\n**Second Issue** is that there is no option in the Ad to specify the payment options even though some cars have isntallments plan with them and it is mentioned only in the description column.\n\n**Third Issue** is that there are some cars that have had accidents which have affected their prices dramatically. and that information is mentioned only in the description column.","271c8abc":"### Purpose the study\n\nThe Used cars market in the past few years has reached a big improvement in the number of Buyers, Sellers and Investors due to the Economic developments that the country has gone through.\n\nThis has raised alot of questions about the market and raised the concern to estimate the prices of different types of used cars.\n\nFor that purpose i have conducted a Data Science project that would reveal some insights about the market and predicts the different cars prices\n\n\nIn the previous notebook i have scraped around 12000 Ads from www.contactcars.com"}}