{"cell_type":{"53cc8f58":"code","0b97c3f6":"code","c866a45c":"code","b868b2a6":"code","a481bbd7":"code","1890736d":"code","c9a4c66e":"code","f0b32f52":"code","c6f426de":"code","0a71b882":"code","390852c4":"code","feec5a1a":"code","d707f446":"code","617e3b93":"code","c30ef08c":"code","ece6bb17":"code","3b8bc172":"code","579e56f3":"code","499bd84f":"code","c1817445":"code","b2db3c60":"markdown","c22c71a6":"markdown","83cd6d2b":"markdown","d8fe3f42":"markdown"},"source":{"53cc8f58":"import numpy as np\nimport pandas as pd\n\nnp.random.seed(2018)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras import regularizers\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Model\nfrom keras.layers import Dense, Dropout, Flatten\n\n\nimport os\nfrom tqdm import tqdm\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport cv2\nfrom keras.preprocessing.image import ImageDataGenerator","0b97c3f6":"df_train = pd.read_csv('..\/input\/dog-breed-identification\/labels.csv') # arquivo com os nomes das imagens e as suas ra\u00e7as para o treino\ndf_test = pd.read_csv('..\/input\/dog-breed-identification\/sample_submission.csv') # arquivo com os nomes das imagens de teste","c866a45c":"df_train.head()","b868b2a6":"df_test.head()","a481bbd7":"targets_series = pd.Series(df_train['breed'])\none_hot = pd.get_dummies(targets_series, sparse = True)","1890736d":"one_hot_labels = np.asarray(one_hot)","c9a4c66e":"im_size = 197","f0b32f52":"x_train = []\ny_train = []\nx_test = []","c6f426de":"i = 0 \nfor f, breed in tqdm(df_train.values):\n    img = cv2.imread('..\/input\/dog-breed-identification\/train\/{}.jpg'.format(f))\n    x_train.append(cv2.resize(img, (im_size, im_size)))\n    label = one_hot_labels[i]\n    y_train.append(label)\n    i += 1","0a71b882":"# apagando df_train para diminuir uso da mem\u00f3ria\ndel df_train","390852c4":"for f in tqdm(df_test['id'].values):\n    img = cv2.imread('..\/input\/dog-breed-identification\/test\/{}.jpg'.format(f))\n    x_test.append(cv2.resize(img, (im_size, im_size)))","feec5a1a":"num_class = 120","d707f446":"X_train, X_valid, Y_train, Y_valid = train_test_split(x_train, y_train,shuffle=True,  test_size=0.2, random_state=1)","617e3b93":"datagen = ImageDataGenerator(width_shift_range=0.2,\n                            height_shift_range=0.2,\n                            zoom_range=0.2,\n                            rotation_range=30,\n                            vertical_flip=False,\n                            horizontal_flip=True)\n\ndatagen.fit(X_train)","c30ef08c":"train_generator = datagen.flow(np.array(X_train), np.array(Y_train), \n                               batch_size=32) ","ece6bb17":"def create_my_model(use_regularizer, optimizer):\n    base_model = VGG16(weights=\"..\/input\/keras-pretrained-models\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\",include_top=False, input_shape=(im_size, im_size, 3))\n    dropout = base_model.output\n    dropout = Dropout(0.5)(dropout)\n    model_with_dropout = Model(inputs=base_model.input, outputs=dropout)\n        \n    x = base_model.output\n    x = Flatten()(x)\n    predictions = Dense(num_class, activation='softmax', kernel_regularizer=regularizers.l2(0.0015), activity_regularizer=regularizers.l1(0.0015))(x)\n    \n    my_model = Model(inputs=base_model.input, outputs=predictions)\n    \n#     for layer in my_model.layers:\n#         layer.treinable = False\n    \n    my_model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n    return my_model\n","3b8bc172":"def gerar_grafico(historia, titulo):\n    plt.plot(historia.history['acc'])\n    plt.plot(historia.history['val_acc'])\n    plt.title('Acur\u00e1cia ' + titulo)\n    plt.ylabel('Acur\u00e1cia')\n    plt.xlabel('\u00c9pocas')\n    plt.legend(['treino', 'valida\u00e7\u00e3o'], loc='upper left')\n    plt.show()\n    plt.plot(historia.history['loss'])\n    plt.plot(historia.history['val_loss'])\n    plt.title('Loss ' + titulo)\n    plt.ylabel('Loss')\n    plt.xlabel('\u00c9pocas')\n    plt.legend(['treino', 'valida\u00e7\u00e3o'], loc='upper left')\n    plt.show()","579e56f3":"model_rmsprop_com_regularizador = create_my_model(use_regularizer=True, optimizer='rmsprop')\nmodel_sgd_com_regularizador = create_my_model(use_regularizer=True, optimizer='sgd')","499bd84f":"history_rmsprop_com_regularizador = model_rmsprop_com_regularizador.fit_generator(\n    train_generator,\n    epochs=10, steps_per_epoch=len(X_train) \/ 18, #len(X_train) \/ 18,\n    validation_data=(np.array(X_train), np.array(Y_train)), validation_steps=len(X_valid) \/ 18)\n\npreds = model_rmsprop_com_regularizador.predict(np.array(x_test), verbose=1)\n\ngerar_grafico(history_rmsprop_com_regularizador, \n              \"VGG16 with RMSprop\")\n\nsub = pd.DataFrame(preds)\ncol_names = one_hot.columns.values\nsub.columns = col_names\nsub.insert(0, 'id', df_test['id'])\nsub.head(5)\n\nsub.to_csv(\"predictions_vgg16_with_RMSProp.csv\")\n\nmodel_rmsprop_com_regularizador.save('vgg16_with_RMSProp.h5')\n","c1817445":"history_sgd_com_regularizador = model_sgd_com_regularizador.fit_generator(\n    train_generator,\n    epochs=10, steps_per_epoch=len(X_train) \/ 18, #len(X_train) \/ 18,\n    validation_data=(np.array(X_train), np.array(Y_train)), validation_steps=len(X_valid) \/ 18)\n\npreds = model_sgd_com_regularizador.predict(np.array(x_test), verbose=1)\n\ngerar_grafico(history_sgd_com_regularizador, \n              \"VGG16 com SGD\")\n\nsub = pd.DataFrame(preds)\ncol_names = one_hot.columns.values\nsub.columns = col_names\nsub.insert(0, 'id', df_test['id'])\nsub.head(5)\n\nsub.to_csv(\"output_sgd_v2_com_data_augmentation_e_sem_regularizador.csv\")\n\nmodel_sgd_com_regularizador.save('sgd_v2_com_data_augmentation_e_sem_regularizador.h5')","b2db3c60":"A seguinte iremos ler as imagens de treino e teste.","c22c71a6":"VGG16  com Regulariza\u00e7\u00e3o + Data Augmentation + Dropout 0.5","83cd6d2b":"As ra\u00e7as precisam estar usando o *one-hot encode*","d8fe3f42":"Fazendo a leitura dos csv's para conseguir os nomes das imagens e suas ra\u00e7as."}}