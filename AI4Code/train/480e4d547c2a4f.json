{"cell_type":{"6139f66f":"code","651709d7":"code","301d3c40":"code","262c4474":"code","ba3056c9":"code","8230d0ec":"code","dd3e79b0":"code","5322fd55":"code","2cceedb6":"code","7ded9200":"code","755e7167":"code","880bc758":"code","214f3a6c":"code","82e3309e":"code","42fbd1f1":"code","80bbed97":"code","8f655c6b":"code","dcf6a78c":"code","b89c10e5":"code","f895bcab":"code","750f2be0":"code","b7f95ce0":"code","893c5c39":"code","75d87294":"code","92a87350":"code","0f65d506":"code","265e79fe":"code","638f2667":"code","699f732d":"code","fd614816":"code","978d7d00":"code","742d150b":"code","d364043b":"markdown","dc240cf8":"markdown","041925d4":"markdown","6eaca6c9":"markdown","01102af2":"markdown","472dd5aa":"markdown","9030501a":"markdown","f7371349":"markdown","44cdbeb0":"markdown","fb824639":"markdown","3fbc02ca":"markdown","4b0e7d1d":"markdown","34b70ef8":"markdown","65334020":"markdown","d11a41fd":"markdown","1544f353":"markdown","0a8cbffc":"markdown","2c1ff3c7":"markdown","af1f6523":"markdown","15a671ef":"markdown","9e4a93c6":"markdown","878c55a7":"markdown","6e084206":"markdown"},"source":{"6139f66f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","651709d7":"df = pd.read_csv('..\/input\/google-playstore-apps\/Google-Playstore.csv')","301d3c40":"df['count'] = 1","262c4474":"# top 4 cateogry based on number of apps exist\ny = 5\napps_of_category = df.groupby('Category').count()['count'].sort_values(ascending=False)\nx_values = list(apps_of_category.index[0:y])\ny_values = list(apps_of_category[0:y])\n# plt.rcParams[\"font.family\"] = \"Poppins\"\nplt.figure(figsize=(12,6))\nclrs = ['grey' if (x < max(y_values)) else 'green' for x in y_values]\nplt.bar(x_values, y_values, linewidth=15, width = 0.4, color=clrs)\nplt.title('Cateogry with highest Number of Apps', fontsize=20)\nplt.xlabel('Cateogry', fontsize=15, labelpad=20)\nplt.ylabel('Number of Apps', fontsize=15, labelpad=20)\nplt.tick_params('both', labelsize=15, labelcolor='black')\nplt.margins(x=0.1, y=0.1, tight=True)\nplt.savefig('top_category.jpg', dpi=200)","ba3056c9":"# remove na values from install\ntop_downloaded_apps = df[df['Installs'].isna() == False].sort_values('Installs', ascending=False)\n# indexing to find rank of app\ntop_downloaded_apps.reset_index(inplace=True)\n# remove special character from installs column\ntop_downloaded_apps['Installs'] = top_downloaded_apps['Installs'].str.replace('\\+|,', '').apply(pd.to_numeric)\n# sorting apps from installs\ntop_downloaded_apps = top_downloaded_apps.sort_values('Installs', ascending=False)","8230d0ec":"# printing the first app based on number of downloads\ntop_downloaded_apps.iloc[:1,:]","dd3e79b0":"top_downloaded_apps[top_downloaded_apps['App Name'] == 'Calculator'].iloc[0]","5322fd55":"# Sorting based on Price\ndf.sort_values('Price', ascending=False).iloc[:1,:]","2cceedb6":"df['Released Year'] = df['Released'].str[-4:].apply(pd.to_numeric)\ndf['Released Date'] = df['Released'].str[-8:-6].apply(pd.to_numeric)\noldest_apps = df[(df['Released Year'].isna() == False) & (df['Released Date'].isna() == False)]","7ded9200":"# sorting apps from installs\noldest_apps = oldest_apps.sort_values('Released Year', ascending=True)","755e7167":"# taking only first year of uploaded apps and first month\n_2010_apps = oldest_apps[(oldest_apps['Released Year'] == oldest_apps['Released Year'].iloc[0]) \n                         & \n                         (oldest_apps['Released'].str.contains('Jan'))].sort_values('Released Date', ascending =True)","880bc758":"_2010_apps.iloc[0]","214f3a6c":"Add_supported = df[df['Ad Supported'] == True].count()['count']\nNon_Add_supported = df[df['Ad Supported'] == False].count()['count']\ntotal_sum = Add_supported + Non_Add_supported","82e3309e":"Ratio_supported = round((Add_supported\/total_sum)*100,2)\nRatio_Non_supported = round((Non_Add_supported\/total_sum)*100,2)\n\n# They exist with equal ratios\nprint('The Add-suported apps ratio is', Ratio_supported, '\\n', 'The Non Add-suported apps ratio is', Ratio_Non_supported)","42fbd1f1":"x_values = list(df.groupby(\"Rating\").count()['count'].index)\ny_values = list(df.groupby(\"Rating\").count()['count'].values)","80bbed97":"plt.figure(figsize=(13,8))\nclrs = ['grey' if (x < max(y_values)) else 'green' for x in y_values ]\nplt.bar(x_values, y_values, linewidth=15, width = 0.4, color=clrs)\nplt.title('Apps Rating Distribution', fontsize=20)\nplt.xlabel('Rating', fontsize=15, labelpad=20)\nplt.ylabel('Number of Apps', fontsize=15, labelpad=20)\nplt.tick_params('both', labelsize=15, labelcolor='black')\nplt.ticklabel_format(useOffset=False, style='plain')\nplt.savefig('Rating_count.jpg', dpi=200)","8f655c6b":"df_action = df[df['Category'] == 'Action']","dcf6a78c":"df_action[df_action['App Name'].str.lower().str.contains('war|action|fight|shoot|kill|crime')].sort_values('Installs', ascending=False).iloc[0]","b89c10e5":"d = {index: label for index, label in df.groupby('Category')}","f895bcab":"values = []\nkeys=[]\nfor key in d:\n    values.append(round(d[key]['Rating'].mean(),2))\n    keys.append(key)\n#     print(key, ' Category has average rating of', round(d[key]['Rating'].mean(),2), '\\n')\ndata = {'Category': keys, 'Average Rating': values}","750f2be0":"tester = pd.DataFrame(data=data)","b7f95ce0":"tester['Average Rating'].count()","893c5c39":"tester[tester['Average Rating'] < 3].count()","75d87294":"df_as = df[df['Rating'].isna() == False]['Rating']","92a87350":"df_as.mean()","0f65d506":"df_size_app_data = df[df['Size'].isna() == False]","265e79fe":"df_size_of_app = df_size_app_data.sort_values('Size', ascending=False)","638f2667":"df_size_measure = df_size_of_app[(df_size_of_app['Size'].str.contains('[0-9]')) & \n                                 (df_size_of_app['Size'].str.contains('k|K'))]","699f732d":"df_size_measure['size_new_1'] = df_size_measure['Size'].str.replace('k', '')\ndf_size_measure['size_new_2'] = df_size_measure['size_new_1'].str.replace(',', '').apply(pd.to_numeric)","fd614816":"print('The smallest size of an app is ',df_size_measure.iloc[0].Size)","978d7d00":"df_size_of_app = df_size_app_data.sort_values('Size', ascending=True)\ndf_size_measure = df_size_of_app[(df_size_of_app['Size'].str.contains('[0-9]')) & \n                                 (df_size_of_app['Size'].str.contains('m|M'))]\ndf_size_measure['size_new_1'] = df_size_measure['Size'].str.replace('m|M', '')\ndf_size_measure['size_new_2'] = df_size_measure['size_new_1'].str.replace(',', '').apply(pd.to_numeric)\nprint('The largest size of an app is ', df_size_measure.iloc[0].Size)","742d150b":"aa = df.groupby('Released Year').mean()['Rating']\n# plt.style.use('fivethirtyeight')\nx_values = list(aa.index)\ny_values = list(aa.values)\n# plt.rcParams[\"font.family\"] = \"Poppins\"\nplt.figure(figsize=(13,7))\nplt.plot(x_values, y_values, linewidth=5)\nplt.title('Rating History of Google Play Store', fontsize=20)\nplt.xlabel('Year', fontsize=25, labelpad=20 )\nplt.ylabel('Rating', fontsize=25, labelpad=20)\nplt.tick_params('both', labelsize=15, labelcolor='black')\nplt.margins(x=0.1, y=0.1, tight=True)\nplt.savefig('rating_past.jpg', dpi=200)","d364043b":"_____","dc240cf8":"_____","041925d4":"Importing Libraries","6eaca6c9":"Ratings analysis","01102af2":"Most Expensive App","472dd5aa":"Top four category based on number of apps","9030501a":"Each Category separate DataFrame","f7371349":"____","44cdbeb0":"The most oldest App","fb824639":"_____","3fbc02ca":"Number 1 app based on downloads","4b0e7d1d":"____","34b70ef8":"Average rating of google play store","65334020":"____","d11a41fd":"Rating Analysis of category","1544f353":"Smallest and largest size of app on playstore","0a8cbffc":"_______","2c1ff3c7":"Reading Data","af1f6523":"_____","15a671ef":"______","9e4a93c6":"Shooting games list","878c55a7":"Ratio of Add supported and non Add supported Apps","6e084206":"____"}}