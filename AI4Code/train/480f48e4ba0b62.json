{"cell_type":{"f6c714d1":"code","a56ace92":"code","2cee70e7":"code","d1db350e":"code","cceaf3a9":"code","144534a7":"code","2526e8af":"code","d11111d0":"code","2627f588":"code","b711a5ff":"code","f5152e8d":"code","c5fd1e7b":"code","b98821d8":"code","13e913a9":"code","7c3f9101":"code","ad71f787":"code","cb7bbd9c":"code","e92ff3c3":"code","e0bba988":"code","7a35c804":"code","111fe953":"code","befc6f1b":"code","aa415790":"code","cdaf9a9c":"code","9cc5fdbc":"markdown","766888ef":"markdown","38bc6f42":"markdown","df1055dc":"markdown","73fda665":"markdown","76405ceb":"markdown","c8b0544c":"markdown","8b5b6419":"markdown","9333f6a1":"markdown","9f82a3b8":"markdown"},"source":{"f6c714d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a56ace92":"#import the Libraries\n\nimport pandas as pd\nimport numpy as np\n\nimport datetime\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nfrom sklearn.metrics import accuracy_score\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.model_selection import train_test_split","2cee70e7":"# Importing the data and joining them so that we can preprocess data together\n\ntitanic_train=pd.read_csv(\"..\/input\/titanic\/train.csv\") #read the train data\ntitanic_test=pd.read_csv('..\/input\/titanic\/test.csv') #read the test data\ntitanic_train['Train'] = 1\ntitanic_test['Train'] = 0\ndf = titanic_train.append(titanic_test, ignore_index=True)\ndf = df.set_index('PassengerId')","d1db350e":"df.head()","cceaf3a9":"df.info()","144534a7":"df.describe()","2526e8af":"df.isnull().sum()","d11111d0":"Parch_df = pd.pivot_table(df, index='Survived',columns='Parch', values='Ticket', aggfunc='count')\nSib_df = pd.pivot_table(df, index='Survived',columns='SibSp', values='Ticket', aggfunc='count')\nPClass_df = pd.pivot_table(df, index='Survived',columns='Pclass', values='Ticket', aggfunc='count')\nSex_df = pd.pivot_table(df, index='Survived',columns='Sex', values='Ticket', aggfunc='count')\nEmbarked_df = pd.pivot_table(df, index='Survived',columns='Embarked', values='Ticket', aggfunc='count')\n#Cabin_df = pd.pivot_table(df, index='Survived',columns='Cabin', values='Ticket', aggfunc='count')\n\nprint(Parch_df)\nprint(\"\")\nprint(Sib_df)\nprint(\"\")\nprint(PClass_df)\nprint(\"\")\nprint(Sex_df)\nprint(\"\")\nprint(Embarked_df)\nprint(\"\")\n#print(Cabin_df)","2627f588":"# Filling null Values for Embarked\n#df['Age'].fillna(28,inplace = True)\ndf['Embarked'].fillna('S',inplace = True)\ndf['Fare'].fillna(14.4,inplace = True)","b711a5ff":"#Creating Age-group Categorical column\ndf['Title'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(df['Title'], df['Sex'])\n","f5152e8d":"#Cleaning Up the title\n#let's replace a few titles -> \"other\" and fix a few titles\ndf['Title'] = np.where((df.Title=='Capt') | (df.Title=='Countess') | (df.Title=='Don') | (df.Title=='Dona')\n                        | (df.Title=='Jonkheer') | (df.Title=='Lady') | (df.Title=='Sir') | (df.Title=='Major') | (df.Title=='Col'),'Other',df.Title)\n\ndf['Title'] = df['Title'].replace('Ms','Miss')\ndf['Title'] = df['Title'].replace('Mlle','Miss')\ndf['Title'] = df['Title'].replace('Mme','Mrs')","c5fd1e7b":"df.groupby('Title').Age.mean()","b98821d8":"df['Age'] = np.where((df.Age.isnull()) & (df.Title=='Master'),5,\n                        np.where((df.Age.isnull()) & (df.Title=='Miss'),22,\n                                 np.where((df.Age.isnull()) & (df.Title=='Mr'),32,\n                                          np.where((df.Age.isnull()) & (df.Title=='Mrs'),37,\n                                                  np.where((df.Age.isnull()) & (df.Title=='Other'),46,\n                                                           np.where((df.Age.isnull()) & (df.Title=='Dr'),44,\n                                                                    np.where((df.Age.isnull()) & (df.Title=='Rev'),41,df.Age)))))))","13e913a9":"df","7c3f9101":"#Relabeling sex to binary\ndf['Male'] = np.where(df.Sex=='male',1,0)","ad71f787":"df.head()","cb7bbd9c":"df = df.drop(['Name','Ticket','Cabin'],axis=1)","e92ff3c3":"#one hot encoding\ndf = pd.get_dummies(df)","e0bba988":"df.head()","7a35c804":"trainX, testX, trainY, testY = train_test_split(df[df.Survived.isnull()==False].drop('Survived',axis=1),df.Survived[df.Survived.isnull()==False],test_size=0.30, random_state=2019)","111fe953":"model = XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\n","befc6f1b":"AccuracyScore = [accuracy_score(y_pred,testY)]\nprint(AccuracyScore)","aa415790":"trainX = df[df.Survived.isnull()==False].drop(['Train','Survived'],axis=1)\ntrainY = df.Survived[df.Survived.isnull()==False]\ntestX = df[df.Survived.isnull()==True].drop(['Train','Survived'],axis=1)\nmodel = XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\nmodel.fit(trainX, trainY)","cdaf9a9c":"test = df[df.Train==0]\ntest['Survived'] = model.predict(testX).astype(int)\ntest = test.reset_index()\ntest[['PassengerId','Survived']].to_csv(\"submissionXGB.csv\",index=False)\nprint(\"done exporting!\")","9cc5fdbc":"### Relationship Analysis","766888ef":"# Filling Null Values","38bc6f42":"# Building Model","df1055dc":"**Filling null Values for Age**\n\n* to Fill value of age, we are going to consider the tittle in the Name\n* Notice that there is Miss, Master, Mr, Mrs, Others (Rev, Dr, Capt.)\n* We are going to fill in Age based on mean of each Category","73fda665":"# Import Data","76405ceb":"as you can see, there are nul-values in *Age*, *Cabin*, *fare* and *Embarked*\n\n* for *fare*, we are going to fill it with the median (14.4)\n* for *embarked*, since only 2 data is missing, we are going to fill it with the mode ('S')\n* for *cabin*, since we dont have more than 75% of the data, we will drop this feature\n* for *age*, we will fill this in based on title of the person (discussed more below)","c8b0544c":"## Label Encoding \/ One Hot Encoding","8b5b6419":"# Making Prediction","9333f6a1":"## Train-Test Split","9f82a3b8":"# Exploring Data"}}