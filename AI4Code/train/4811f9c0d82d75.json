{"cell_type":{"02bf5620":"code","ee983fc3":"code","23db59b0":"code","dbda11bc":"code","d0acc2f4":"code","1b21cb45":"code","a84e8192":"code","4b29a14f":"code","f82bb7be":"code","0b7709b7":"code","efb45fbe":"code","3b5a30ad":"code","8e9f3085":"code","3c16e886":"code","1d700983":"code","8274b1dd":"code","93e66883":"code","beacc70e":"code","622ade4d":"code","37397038":"code","e3c6f618":"code","c9fa2636":"code","71495eec":"code","da1383d5":"code","d72f4586":"markdown","7fa0ad97":"markdown","828368d2":"markdown","a6732026":"markdown","0c7f558f":"markdown","52b9487b":"markdown","59a34abb":"markdown"},"source":{"02bf5620":"import math\nimport shapely.geometry as shg\nimport fiona\nimport matplotlib.pyplot as plt","ee983fc3":"poly1 = [(1,1), (1,5), (5,5), (5,1), (1,1)]\npoly2 = [(2,1.3), (5,1.2), (6,3), (6,4) ,(3,5), (1.4,3), (1.5,2), (2,1.3)]\npoly3 = [(4,2), (4,3), (4,4), (3,4), (4,2)]\npoly4 = [(3,5), (5,2), (3,0), (2,2), (1,2), (3,5)]","23db59b0":"#Defines a function called centroid \ndef centroid(coords):\n    \"\"\"\n    Summary: \n    Calculates the centroid(spatial mean) of a polygon\n    -------------------------------------------------\n    Arguments:\n    coords of polygons\n    -------------------------------------------------\n    Returns:\n    Average x and Average y values\n    -------------------------------------------------\n    \"\"\"\n    \n    # ignore last coordinate if same as first to avoid repeated calculation\n    adj=1\n    if coords[0] != coords[-1]:\n        adj==0\n    \n    x, y = zip(*coords)\n    #Set mx and my a value of 0 before iteration\n    mx = 0\n    my = 0\n    #Iterates over the elements.\n    for i in range(len(coords)-adj):\n        mx = mx + x[i] #Sum up every values in x\n        my = my + y[i] #Sum up every values in y\n    #By getting the mean divide the number of the data in x and y\n    mx = mx \/ (len(coords)-adj)\n    my = my \/ (len(coords)-adj)  \n    return mx, my","dbda11bc":"xR, yR = centroid(poly1)\nprint(xR, yR)","d0acc2f4":"xR, yR = centroid(poly2)\nprint(xR, yR)","1b21cb45":"xR, yR = centroid(poly3)\nprint(xR, yR)","a84e8192":"xR, yR = centroid(poly4)\nprint(xR, yR)","4b29a14f":"#Defines a function called Area\ndef Area(poly):\n    \"\"\"\n    Summary: \n    Calculates the area of a polygon\n    -------------------------------------------------\n    Arguments:\n    coords of polygons\n    -------------------------------------------------\n    Returns:\n    The equation of the area\n    -------------------------------------------------\n    \"\"\"\n    \n    #Set xR and yR to be the centroid\n    xR, yR = centroid(poly)\n    #Set a to the value 0 before iteration\n    a = 0\n\n    for i in range(len(poly)-1):   #In order not to recalculate the first coordinate of the polygon, we have to put -1 after the sequence\n        xi = poly[i][0] #The current coordinate\n        yi = poly[i][1]\n        xj = poly[i+1][0] #The next coordinate\n        yj = poly[i+1][1]\n        \n        a = a + ((xj - xR)*(yi - yR)-(yj - yR)*(xi - xR)) #Assign a as a part of the equation\n        A = (abs(a))\/2 #Divide a by 2 and take the absolute value of the result\n        \n    return A\n    ","f82bb7be":"p1 = shg.Polygon(poly1)\nprint(\"Shapely area output is {}\".format(p1.area))\nprint(\"My calculated area output is {}\".format(Area(poly1)))","0b7709b7":"#Plot the polygon\npoly1 = shg.Polygon(poly1)\nx,y = poly1.exterior.xy\n\nplt.plot(poly1.exterior.xy[0], poly1.exterior.xy[1])\nplt.fill(poly1.exterior.xy[0], poly1.exterior.xy[1])\n\nplt.show()","efb45fbe":"p2 = shg.Polygon(poly2)\nprint(\"Shapely area output is {}\".format(p2.area))\nprint(\"My calculated area output is {}\".format(Area(poly2)))","3b5a30ad":"poly2 = shg.Polygon(poly2)\nx,y = poly2.exterior.xy\n\nplt.plot(poly2.exterior.xy[0], poly2.exterior.xy[1])\nplt.fill(poly2.exterior.xy[0], poly2.exterior.xy[1])\n\nplt.show()","8e9f3085":"p3 = shg.Polygon(poly3)\nprint(\"Shapely area output is {}\".format(p3.area))\nprint(\"My calculated area output is {}\".format(Area(poly3)))","3c16e886":"poly3 = shg.Polygon(poly3)\nx,y = poly3.exterior.xy\n\nplt.plot(poly3.exterior.xy[0], poly3.exterior.xy[1])\nplt.fill(poly3.exterior.xy[0], poly3.exterior.xy[1])\n\nplt.show()","1d700983":"p4 = shg.Polygon(poly4)\nprint(\"Shapely area output is {}\".format(p4.area))\nprint(\"My calculated area output is {}\".format(Area(poly4)))","8274b1dd":"poly4 = shg.Polygon(poly4)\nx,y = poly4.exterior.xy\n\nplt.plot(poly4.exterior.xy[0], poly4.exterior.xy[1])\nplt.fill(poly4.exterior.xy[0], poly4.exterior.xy[1])\n\nplt.show()","93e66883":"# Loading shapefile data into a list\nshapefile_polygons = []                  \n#a list to store the polygons we load\n\nc = fiona.open('..\/input\/ceg1713-data-files\/polygons.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shg.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)\n\nfor poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)","beacc70e":"#Area of polygons in Polygons Shapefile calculated by shapely function\nfor i in shapefile_polygons:\n    shg_poly = shg.Polygon(i)\n    res=Area(i)\n    print(\"The area is {}\".format(shg_poly.area))","622ade4d":"#Area of polygons in Polygons Shapefile calculated by my function\nfor i in shapefile_polygons:\n    print(\"Th area is {}\".format(Area(i)))","37397038":"#Save the area of polygons.shg outputs to a file\nw = open( '.\/areaofpolygons.shp','w' )\n\nw.write(str(Area(i)))\nw.close()","e3c6f618":"shapefile_buildings = []                  \n\nc = fiona.open('..\/input\/ceg1713-data-files\/buildings.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shg.shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    #Converts into the same format as the other data\n    shapefile_buildings.append(list(poly.exterior.coords))\n    \nplt.gca().set_aspect('equal', adjustable='box') \n\nfor poly in shapefile_buildings:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)","c9fa2636":"#Area of polygons in Buildings Shapefile calculated by shapely function\nfor i in shapefile_buildings:\n    shg_poly = shg.Polygon(i)\n    print(\"The area is {}\".format(shg_poly.area))","71495eec":"#Area of polygons in Buildings Shapefile calculated by my function\nfor i in shapefile_buildings:\n    print(\"The area is {}\".format(Area(i)))","da1383d5":"#Save the area of buildings.shg outputs to a file\nfor i in shapefile_buildings:\n    w = open( '.\/areaofbuildings.shp','w' )\n    \n    w.write(str(Area(i)))\n    w.close()","d72f4586":"## Testing of the \"Area\" function and compare the answers with the answers calculated by the shapely function","7fa0ad97":"## Testing of the \"centroid\" function","828368d2":"## Data of the testing polygons","a6732026":"## Loading data from Shapefiles","0c7f558f":"![formula.jpeg](attachment:a1c2e941-6ead-4176-a337-27711e2fcf9b.jpeg)\n\n**The formular for calculating the area of polygon**\n\nxi, yi = the current coordinate\n\nxj, yj = the next coordinate along\n\nxr, yr = the the centroid or mean of x and y)\n\n","52b9487b":"## Centroid Function","59a34abb":"## Area Function"}}