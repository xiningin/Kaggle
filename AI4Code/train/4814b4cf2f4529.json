{"cell_type":{"90488d56":"code","39509d35":"code","7169354a":"code","d2bba270":"code","3072d929":"code","15088eff":"code","7c363d09":"code","6f319772":"code","50a3bbc6":"code","d7d88508":"code","6802c13e":"code","d333c8a7":"code","5d2de3a9":"code","21fbf417":"code","3e7bbe4c":"code","f27994e8":"code","8eaa9dd3":"code","7ca1932b":"code","81c9a1bf":"code","c0d443ec":"code","d7261fe6":"code","13504757":"code","93da1e20":"code","1b3173b4":"code","5d031652":"code","537cf4e7":"code","4bf37a85":"code","2dd349e5":"code","bfd908a8":"code","1d271fcc":"code","447b76ec":"code","8bcc6d18":"code","b9c02009":"code","8623b7c7":"code","95de67a6":"code","4535e530":"code","f7a35cbd":"code","33f469a5":"code","4b957aef":"code","e198a983":"code","d9cc2ae8":"code","91b97151":"code","c65ddfa9":"code","56fc6600":"code","11ce4be3":"code","bc0d2438":"code","ce10a117":"code","2f641ee8":"code","c20e7a1c":"code","a1e62722":"code","6ecbecf9":"code","c9414eee":"code","1dc4c7a5":"code","df617891":"code","a8db20d6":"code","5544fc70":"code","d870972f":"code","fcadda7d":"code","ae65e23e":"code","2caabb76":"code","7824676f":"code","7a2a969f":"code","e477d88f":"code","6c3ed9a3":"code","176113f7":"code","ce110072":"code","cfae46fb":"code","0fe14867":"code","f7c8648e":"code","d342372e":"code","1b35b193":"code","2b756445":"code","24d08df4":"code","6b046351":"code","07788447":"code","510ff771":"code","a126cbfe":"code","183cc3d5":"code","e179555e":"code","0e749dde":"code","89f56531":"code","4be8af14":"code","d37ef662":"code","623780db":"code","a20269be":"code","6ce213ad":"code","52a20512":"code","6cd15a06":"code","43e4d3ee":"code","8dc224f3":"markdown","f5cffeab":"markdown"},"source":{"90488d56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\nimport re\nfrom nltk.corpus import stopwords\nimport pickle\nfrom tqdm import tqdm\nimport os\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39509d35":"!unzip \/kaggle\/input\/donorschoose-application-screening\/train.zip\n!unzip \/kaggle\/input\/donorschoose-application-screening\/resources.zip","7169354a":"!unzip \/kaggle\/input\/donorschoose-application-screening\/test.zip","d2bba270":"!unzip \/kaggle\/input\/donorschoose-application-screening\/sample_submission.zip","3072d929":"train_data = pd.read_csv('\/kaggle\/working\/train.csv')\nresource_data = pd.read_csv('\/kaggle\/working\/resources.csv')","15088eff":"test_data = pd.read_csv('\/kaggle\/working\/test.csv')","7c363d09":"train_data.head(2)","6f319772":"test_data.head(2)","50a3bbc6":"print(train_data.shape)\nprint(test_data.shape)","d7d88508":"train_data['source']='train'\ntest_data['source']='test'","6802c13e":"project_data = pd.concat([train_data,test_data],axis=0)","d333c8a7":"project_data.tail(2)","5d2de3a9":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","21fbf417":"project_data['project_grade_category'].value_counts()","3e7bbe4c":"project_data['project_grade_category'] = project_data['project_grade_category'].str.replace(' ','_')\nproject_data['project_grade_category'] = project_data['project_grade_category'].str.replace('-','_')\nproject_data['project_grade_category'] = project_data['project_grade_category'].str.lower()\nproject_data['project_grade_category'].value_counts()","f27994e8":"project_data['project_subject_categories'] = project_data['project_subject_categories'].str.replace(' The ','')\nproject_data['project_subject_categories'] = project_data['project_subject_categories'].str.replace(' ','')\nproject_data['project_subject_categories'] = project_data['project_subject_categories'].str.replace('&','_')\nproject_data['project_subject_categories'] = project_data['project_subject_categories'].str.replace(',','_')\nproject_data['project_subject_categories'] = project_data['project_subject_categories'].str.lower()","8eaa9dd3":"#teacher_prefix\nproject_data['teacher_prefix'].value_counts()","7ca1932b":"# check if we have any nan values are there\nprint(project_data['teacher_prefix'].isnull().values.any())\nprint(\"number of nan values\",project_data['teacher_prefix'].isnull().values.sum())","81c9a1bf":"project_data['teacher_prefix'].replace(np.nan,'Mr.',inplace=True)","c0d443ec":"project_data['teacher_prefix'] = project_data['teacher_prefix'].str.replace('.','')\nproject_data['teacher_prefix'] = project_data['teacher_prefix'].str.lower()\nproject_data['teacher_prefix'].value_counts()","d7261fe6":"project_data['project_subject_subcategories'].value_counts()","13504757":"project_data['project_subject_subcategories'] = project_data['project_subject_subcategories'].str.replace(' The ','')\nproject_data['project_subject_subcategories'] = project_data['project_subject_subcategories'].str.replace(' ','')\nproject_data['project_subject_subcategories'] = project_data['project_subject_subcategories'].str.replace('&','_')\nproject_data['project_subject_subcategories'] = project_data['project_subject_subcategories'].str.replace(',','_')\nproject_data['project_subject_subcategories'] = project_data['project_subject_subcategories'].str.lower()\nproject_data['project_subject_subcategories'].value_counts()","93da1e20":"project_data['school_state'].value_counts().head()","1b3173b4":"project_data['school_state'] = project_data['school_state'].str.lower()\nproject_data['school_state'].value_counts().head()","5d031652":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","537cf4e7":"# Removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","4bf37a85":"project_data['project_title'].head(5)","2dd349e5":"print(\"printing some random reviews\")\nprint(9, project_data['project_title'].values[9])\nprint(34, project_data['project_title'].values[34])\nprint(147, project_data['project_title'].values[147])","bfd908a8":"# Combining all the above stundents \nfrom tqdm import tqdm\ndef preprocess_text(text_data):\n    preprocessed_text = []\n    # tqdm is for printing the status bar\n    for sentance in tqdm(text_data):\n        sent = decontracted(sentance)\n        sent = sent.replace('\\\\r', ' ')\n        sent = sent.replace('\\\\n', ' ')\n        sent = sent.replace('\\\\\"', ' ')\n        sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n        # https:\/\/gist.github.com\/sebleier\/554280\n        sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n        preprocessed_text.append(sent.lower().strip())\n    return preprocessed_text","1d271fcc":"preprocessed_titles = preprocess_text(project_data['project_title'].values)","447b76ec":"print(\"printing some random reviews\")\nprint(9, preprocessed_titles[9])\nprint(34, preprocessed_titles[34])\nprint(147, preprocessed_titles[147])","8bcc6d18":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","b9c02009":"print(\"printing some random essay\")\nprint(9, project_data['essay'].values[9])\nprint('-'*50)\nprint(34, project_data['essay'].values[34])\nprint('-'*50)\nprint(147, project_data['essay'].values[147])","8623b7c7":"preprocessed_essays = preprocess_text(project_data['essay'].values)","95de67a6":"print(\"printing some random essay\")\nprint(9, preprocessed_essays[9])\nprint('-'*50)\nprint(34, preprocessed_essays[34])\nprint('-'*50)\nprint(147, preprocessed_essays[147])","4535e530":"# https:\/\/stackoverflow.com\/questions\/22407798\/how-to-reset-a-dataframes-indexes-for-all-groups-in-one-step\nprice_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprice_data.head(2)","f7a35cbd":"# join two dataframes in python: \nproject_data = pd.merge(project_data, price_data, on='id', how='left')","33f469a5":"project_data['price'].head()","4b957aef":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(project_data['price'].values.reshape(-1, 1))\nproject_data['std_price']=scaler.transform(project_data['price'].values.reshape(-1, 1) )","e198a983":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(project_data['price'].values.reshape(-1, 1))\nproject_data['nrm_price']=scaler.transform(project_data['price'].values.reshape(-1, 1))","d9cc2ae8":"project_data.head()","91b97151":"preprocessed_data = project_data[['project_is_approved','school_state','teacher_prefix','project_grade_category','project_subject_categories','project_subject_subcategories','project_is_approved','teacher_number_of_previously_posted_projects','essay','price','source']]","c65ddfa9":"preprocessed_data.head()","56fc6600":"preprocessed_data.rename(columns={'project_subject_categories':'clean_categories'},inplace=True)","11ce4be3":"preprocessed_data.rename(columns={'project_subject_subcategories':'clean_subcategories'},inplace=True)","bc0d2438":"preprocessed_data.head()","ce10a117":"preprocessed_data.to_csv('data.csv')","2f641ee8":"import pandas as pd","c20e7a1c":"data = pd.read_csv('\/kaggle\/working\/data.csv')","a1e62722":"data.head()","6ecbecf9":"data.drop(columns=['Unnamed: 0'],inplace=True)","c9414eee":"y = data[data['source']=='train']['project_is_approved'].values\nX_train = data[data['source']=='train'].drop(['project_is_approved','source'],axis=1)\nX_test = data[data['source']=='test'].drop(['project_is_approved','source'],axis=1)","1dc4c7a5":"X_train.head(2)","df617891":"# Splitting data into train, test and Cross Validation set\nfrom sklearn.model_selection import train_test_split\n# X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.33, stratify=y)\nX_train, X_cv, y_train,y_cv = train_test_split(X_train,y,test_size=0.20,stratify=y)","a8db20d6":"X_train.head(2)","5544fc70":"X_cv.head()","d870972f":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","fcadda7d":"vectorizer_essay = CountVectorizer(min_df=10,ngram_range=(1,3), max_features=2000)\nvectorizer2_essay = TfidfVectorizer(min_df=10,ngram_range=(1,3), max_features=2000)\n\nvectorizer_essay.fit(X_train['essay'].values) # fit has to happen only on train data\nvectorizer2_essay.fit(X_train['essay'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_essay_bow = vectorizer_essay.transform(X_train['essay'].values)\nX_cv_essay_bow = vectorizer_essay.transform(X_cv['essay'].values)\nX_test_essay_bow = vectorizer_essay.transform(X_test['essay'].values)\n# For set 2\nX_train_essay_tfidf = vectorizer2_essay.transform(X_train['essay'].values)\nX_cv_essay_tfidf = vectorizer2_essay.transform(X_cv['essay'].values)\nX_test_essay_tfidf = vectorizer2_essay.transform(X_test['essay'].values)","ae65e23e":"print(\"After vectorizations\")\nprint(X_train_essay_bow.shape, y_train.shape)\nprint(X_cv_essay_bow.shape, y_cv.shape)","2caabb76":"data['school_state'].unique()","7824676f":"vectorizer_ss = CountVectorizer()\n#vectorizer2_ss = TfidfVectorizer()\n\nvectorizer_ss.fit(X_train['school_state'].values) # fit has to happen only on train data\n#vectorizer2_ss.fit(X_train['school_state'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_state_ohe = vectorizer_ss.transform(X_train['school_state'].values)\nX_cv_state_ohe = vectorizer_ss.transform(X_cv['school_state'].values)\nX_test_state_ohe = vectorizer_ss.transform(X_test['school_state'].values)\n\nprint(\"After vectorizations\")\nprint(X_train_state_ohe.shape, y_train.shape)\nprint(X_cv_state_ohe.shape, y_cv.shape)","7a2a969f":"data['teacher_prefix'].value_counts()","e477d88f":"X_cv['teacher_prefix'].fillna('Mr.',inplace=True)","6c3ed9a3":"vectorizer_tp = CountVectorizer()\n#vectorizer2_tp = TfidfVectorizer()\n\nvectorizer_tp.fit(X_train['teacher_prefix'].values) # fit has to happen only on train data\n#vectorizer2_tp.fit(X_train['teacher_prefix'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_teacher_ohe = vectorizer_tp.transform(X_train['teacher_prefix'].values)\nX_cv_teacher_ohe = vectorizer_tp.transform(X_cv['teacher_prefix'].values)\nX_test_teacher_ohe = vectorizer_tp.transform(X_test['teacher_prefix'].values)\n\nprint(\"After vectorizations\")\nprint(X_train_teacher_ohe.shape, y_train.shape)\nprint(X_cv_teacher_ohe.shape, y_cv.shape)","176113f7":"data['project_grade_category'].value_counts()","ce110072":"vectorizer_pgc = CountVectorizer()\n#vectorizer2_pgc = TfidfVectorizer()\n\nvectorizer_pgc.fit(X_train['project_grade_category'].values) # fit has to happen only on train data\n#vectorizer2_pgc.fit(X_train['project_grade_category'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_grade_ohe = vectorizer_pgc.transform(X_train['project_grade_category'].values)\nX_cv_grade_ohe = vectorizer_pgc.transform(X_cv['project_grade_category'].values)\nX_test_grade_ohe = vectorizer_pgc.transform(X_test['project_grade_category'].values)\n\nprint(\"After vectorizations\")\nprint(X_train_grade_ohe.shape, y_train.shape)\nprint(X_cv_grade_ohe.shape, y_cv.shape)\nprint(\"=\"*100)","cfae46fb":"len(data['clean_categories'].value_counts())","0fe14867":"vectorizer_cc = CountVectorizer()\n#vectorizer2_cc = TfidfVectorizer()\n\nvectorizer_cc.fit(X_train['clean_categories'].values) # fit has to happen only on train data\n#vectorizer2_cc.fit(X_train['clean_categories'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_clean_categories_ohe = vectorizer_cc.transform(X_train['clean_categories'].values)\nX_cv_clean_categories_ohe = vectorizer_cc.transform(X_cv['clean_categories'].values)\nX_test_clean_categories_ohe = vectorizer_cc.transform(X_test['clean_categories'].values)\n\n\nprint(\"After vectorizations\")\nprint(X_train_clean_categories_ohe.shape, y_train.shape)\nprint(X_cv_clean_categories_ohe.shape, y_cv.shape)\nprint(\"=\"*100)","f7c8648e":"vectorizer_cs = CountVectorizer()\n#vectorizer2_cs = TfidfVectorizer()\n\nvectorizer_cs.fit(X_train['clean_subcategories'].values) # fit has to happen only on train data\n#vectorizer2_cs.fit(X_train['clean_subcategories'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer\/TfidfVectorizer to convert the text to vector\nX_train_clean_subcategories_ohe = vectorizer_cs.transform(X_train['clean_subcategories'].values)\nX_cv_clean_subcategories_ohe = vectorizer_cs.transform(X_cv['clean_subcategories'].values)\nX_test_clean_subcategories_ohe = vectorizer_cs.transform(X_test['clean_subcategories'].values)\nprint(\"After vectorizations\")\nprint(X_train_clean_subcategories_ohe.shape, y_train.shape)\nprint(X_cv_clean_subcategories_ohe.shape, y_cv.shape)\nprint(\"=\"*100)","d342372e":"from sklearn.preprocessing import Normalizer\nnormalizer_price = Normalizer()\n# Reshapes dataset\n# array.reshape(-1, 1) to 2D if your data has a single feature \nnormalizer_price.fit(X_train['price'].values.reshape(1,-1))\n\nX_train_price_norm = normalizer_price.transform(X_train['price'].values.reshape(-1,1))\nX_cv_price_norm = normalizer_price.transform(X_cv['price'].values.reshape(-1,1))\nX_test_price_norm = normalizer_price.transform(X_test['price'].values.reshape(-1,1))\n\nprint(\"After vectorizations\")\nprint(X_train_price_norm.shape, y_train.shape)\nprint(X_cv_price_norm.shape, y_cv.shape)\nprint(\"=\"*100)","1b35b193":"from sklearn.preprocessing import Normalizer\nnormalizer_tnppp = Normalizer()\n# Reshapes dataset\n# array.reshape(-1, 1) to 2D if your data has a single feature \nnormalizer_tnppp.fit(X_train['price'].values.reshape(1,-1))\n\nX_train_tnppp_norm = normalizer_tnppp.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\nX_cv_tnppp_norm = normalizer_tnppp.transform(X_cv['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\nX_test_tnppp_norm = normalizer_tnppp.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n\nprint(\"After vectorizations\")\nprint(X_train_tnppp_norm.shape, y_train.shape)\nprint(X_cv_tnppp_norm.shape, y_cv.shape)\nprint(\"=\"*100)","2b756445":"from scipy.sparse import hstack\nX_tr = hstack((X_train_essay_bow, X_train_state_ohe, X_train_teacher_ohe, X_train_grade_ohe, X_train_price_norm, X_train_clean_categories_ohe,X_train_clean_subcategories_ohe,X_train_tnppp_norm)).tocsr()\nX_cr = hstack((X_cv_essay_bow, X_cv_state_ohe, X_cv_teacher_ohe, X_cv_grade_ohe, X_cv_price_norm, X_cv_clean_categories_ohe,X_cv_clean_subcategories_ohe,X_cv_tnppp_norm)).tocsr()\nX_te = hstack((X_test_essay_bow, X_test_state_ohe, X_test_teacher_ohe, X_test_grade_ohe, X_test_price_norm, X_test_clean_categories_ohe,X_test_clean_subcategories_ohe,X_test_tnppp_norm)).tocsr()\n\nX_tr2 = hstack((X_train_essay_tfidf, X_train_state_ohe, X_train_teacher_ohe, X_train_grade_ohe, X_train_price_norm, X_train_clean_categories_ohe,X_train_clean_subcategories_ohe,X_train_tnppp_norm)).tocsr()\nX_cr2 = hstack((X_cv_essay_tfidf, X_cv_state_ohe, X_cv_teacher_ohe, X_cv_grade_ohe, X_cv_price_norm, X_cv_clean_categories_ohe,X_cv_clean_subcategories_ohe,X_cv_tnppp_norm)).tocsr()\nX_te2 = hstack((X_test_essay_tfidf, X_test_state_ohe, X_test_teacher_ohe, X_test_grade_ohe, X_test_price_norm, X_test_clean_categories_ohe,X_test_clean_subcategories_ohe,X_test_tnppp_norm)).tocsr()\n\nprint(\"Final Data matrix1 for BOW\")\nprint(X_tr.shape, y_train.shape)\nprint(X_cr.shape, y_cv.shape)\nprint(\"=\"*100)\n\nprint(\"Final Data matrix2 for Tfidf\")\nprint(X_tr2.shape, y_train.shape)\nprint(X_cr2.shape, y_cv.shape)\nprint(\"=\"*100)","24d08df4":"from sklearn.naive_bayes import MultinomialNB\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nfrom sklearn.model_selection import GridSearchCV","6b046351":"parameters = {'alpha':[0.0001,0.001,0.01,0.1,1,10,100,1000]}\nmnb_gs = MultinomialNB()\nclf_gs = GridSearchCV(mnb_gs,parameters,cv=4,scoring='roc_auc',return_train_score=True)\nclf_gs.fit(X_tr,y_train)\nresults_gs = pd.DataFrame(clf_gs.cv_results_)\n#results_gs","07788447":"results_gs = results_gs.sort_values(['param_alpha'])\ntrain_auc= results_gs['mean_train_score']\ntrain_auc_std= results_gs['std_train_score']\ncv_auc = results_gs['mean_test_score'] \ncv_auc_std= results_gs['std_test_score']\nlaplaceS_alpha =  results_gs['param_alpha']\nlaplaceS_alpha = list(map(lambda x: np.log10(x),laplaceS_alpha))\nplt.plot(laplaceS_alpha, train_auc, label='Train AUC')\nplt.plot(laplaceS_alpha, cv_auc, label='CV AUC')\nplt.scatter(laplaceS_alpha, train_auc, label='Train AUC points')\nplt.scatter(laplaceS_alpha, cv_auc, label='CV AUC points')\n\nplt.legend()\nplt.xlabel(\"Laplace Soomthing(alpha), with log: hyperparameter\")\nplt.ylabel(\"AUC\")\nplt.title(\"Hyper parameter Vs AUC plot(BOW implementation)\")\nplt.grid()\nplt.show()","510ff771":"X_cv","a126cbfe":"ans = mnb.predict_proba(X_te)[:,1]","183cc3d5":"print(len(ans))\nans","e179555e":"sample = pd.read_csv('\/kaggle\/working\/sample_submission.csv')","0e749dde":"sample.head()","89f56531":"sample['project_is_approved']=ans","4be8af14":"sample.head()","d37ef662":"sample.to_csv('ans.csv')","623780db":"from sklearn.ensemble import GradientBoostingClassifier","a20269be":"from sklearn.metrics import roc_curve, auc\ngbdt_clf_tfidf = GradientBoostingClassifier(learning_rate=0.1,min_samples_split=500)\ngbdt_clf_tfidf.fit(X_tr,y_train)\n\ny_train_pred =  gbdt_clf_tfidf.predict_proba(X_tr)[:,1] #mnb.predict(X_tr,)\ny_test_pred = gbdt_clf_tfidf.predict_proba(X_cr)[:,1]\n\ntrain_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_cv, y_test_pred)\n\nplt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\nplt.legend()\nplt.xlabel(\"FPR\")\nplt.ylabel(\"TPR\")\nplt.title(\"ROC_AUC CURVE(Tfidf implementation)\")\nplt.grid()\nplt.show()\n","6ce213ad":"ans_gbdt = gbdt_clf_tfidf.predict_proba(X_te)[:,1]","52a20512":"ans_gbdt","6cd15a06":"sample['project_is_approved']=ans_gbdt","43e4d3ee":"sample.to_csv('ans_gbdt.csv')","8dc224f3":"# Preprocessing Categorical Features","f5cffeab":"> we need to remove the spaces, replace the '-' with '_' and convert all the letters to small"}}