{"cell_type":{"6447d3c9":"code","67eaf305":"code","76568abd":"code","bb7c579f":"code","4eb6a414":"code","66eb7644":"code","7ede9f75":"code","a363b342":"code","4006a187":"code","a9d63ec1":"code","0d1ef626":"code","683038d0":"markdown","9a3d81a9":"markdown"},"source":{"6447d3c9":"#necessary imports\nimport os\nimport pandas as pd","67eaf305":"# Loading train data\ntrain_file = \"..\/input\/dbpediafromfasttext\/train.csv\"\ndf = pd.read_csv(train_file, header=None, names=['class','name','description'])\n# Loading test data\ntest_file = \"..\/input\/dbpediafromfasttext\/test.csv\"\ndf_test = pd.read_csv(test_file, header=None, names=['class','name','description'])\n# Data we have\nprint(\"Train:{} Test:{}\".format(df.shape,df_test.shape))","76568abd":"df.head()","bb7c579f":"df_test.head()","4eb6a414":"# Since we have no clue about the classes lets build one\n# Mapping from class number to class name\nclass_dict={\n            1:'Company',\n            2:'EducationalInstitution',\n            3:'Artist',\n            4:'Athlete',\n            5:'OfficeHolder',\n            6:'MeanOfTransportation',\n            7:'Building',\n            8:'NaturalPlace',\n            9:'Village',\n            10:'Animal',\n            11:'Plant',\n            12:'Album',\n            13:'Film',\n            14:'WrittenWork'\n        }\n\n# Mapping the classes\ndf['class_name'] = df['class'].map(class_dict)\ndf.head()","66eb7644":"df[\"class_name\"].value_counts()","7ede9f75":"# Lets do some cleaning of this text\ndef clean_it(text,normalize=True):\n    # Replacing possible issues with data. We can add or reduce the replacemtent in this chain\n    s = str(text).replace(',',' ').replace('\"','').replace('\\'',' \\' ').replace('.',' . ').replace('(',' ( ').\\\n            replace(')',' ) ').replace('!',' ! ').replace('?',' ? ').replace(':',' ').replace(';',' ').lower()\n    \n    # normalizing \/ encoding the text\n    if normalize:\n        s = s.normalize('NFKD').str.encode('ascii','ignore').str.decode('utf-8')\n    \n    return s\n\n# Now lets define a small function where we can use above cleaning on datasets\ndef clean_df(data, cleanit= False, shuffleit=False, encodeit=False, label_prefix='__class__'):\n    # Defining the new data\n    df = data[['name','description']].copy(deep=True)\n    df['class'] = label_prefix + data['class'].astype(str) + ' '\n    \n    # cleaning it\n    if cleanit:\n        df['name'] = df['name'].apply(lambda x: clean_it(x,encodeit))\n        df['description'] = df['description'].apply(lambda x: clean_it(x,encodeit))\n    \n    # shuffling it\n    if shuffleit:\n        df.sample(frac=1).reset_index(drop=True)\n            \n    return df","a363b342":"%%time\n# Transform the datasets using the above clean functions\ndf_train_cleaned = clean_df(df, True, True)\ndf_test_cleaned = clean_df(df_test, True, True)","4006a187":"# Write files to disk as fastText classifier API reads files from disk.\ntrain_file =  '\/dbpedia_train.csv'\ndf_train_cleaned.to_csv(train_file, header=None, index=False, columns=['class','name','description'] )\n\ntest_file = '\/dbpedia_test.csv'\ndf_test_cleaned.to_csv(test_file, header=None, index=False, columns=['class','name','description'] )\n","a9d63ec1":"from fasttext import train_supervised \n\"\"\"fastText expects and training file (csv), a model name as input arguments.\nlabel_prefix refers to the prefix before label string in the dataset.\ndefault is __label__. In our dataset, it is __class__. \nThere are several other parameters which can be seen in: \nhttps:\/\/pypi.org\/project\/fasttext\/\n\"\"\"\nmodel = train_supervised(input=train_file, label=\"__class__\", lr=1.0, epoch=75, loss='ova', wordNgrams=2, dim=200, thread=2, verbose=100)","0d1ef626":"for k in range(1,6):\n    results = model.test(test_file,k=k)\n    print(f\"Test Samples: {results[0]} Precision@{k} : {results[1]*100:2.4f} Recall@{k} : {results[2]*100:2.4f}\")","683038d0":"Try training a classifier on this dataset with, say, LogisticRegression to realize how fast fastText is! 93% Precision and Recall are hard numbers to beat, too!","9a3d81a9":"Now that we have the train and test files written into disk in a format fastText wants, we are ready to use it for text classification!"}}