{"cell_type":{"f3d3f05c":"code","dfd8e47b":"code","3331be45":"code","2ed27390":"code","fe594fda":"code","354be35b":"code","71aa54a9":"code","b94ecc9e":"code","09b8ef92":"code","32ddac8f":"code","c65cdbcb":"code","fa1dc115":"code","91af169c":"code","d5771cc3":"code","cc21dab4":"code","fd176a99":"code","ebdcfe63":"code","aa8498b4":"code","5784da9c":"code","58875632":"code","202745ae":"code","149bffde":"code","f576d56d":"code","7d97708c":"code","39f41986":"code","dc6b81c5":"code","030e24ef":"code","a9f2ff33":"code","b67234ef":"code","9b06e66b":"code","af479854":"code","5b723cb0":"code","d13f71c6":"code","5620281c":"code","873df76b":"markdown","a056a03c":"markdown","e40642b4":"markdown","aa35152f":"markdown","01c1f066":"markdown","daccc845":"markdown","ac2feb99":"markdown","1e8292ff":"markdown","c2948f41":"markdown","e303c042":"markdown","2df17f0d":"markdown"},"source":{"f3d3f05c":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nimport numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt","dfd8e47b":"def seed_everything(seed=0):\n    np.random.seed(seed)\n\nseed_everything()","3331be45":"# From kernel https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","2ed27390":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fe594fda":"#TRAIN\ntrain_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv', index_col='TransactionID')\n#train_identity = train_identity.dropna(thresh=10)\ntrain_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv', index_col='TransactionID')\n#train_transaction = train_transaction.dropna(thresh=10)","354be35b":"# TEST\ntest_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv', index_col='TransactionID')\n#test_identity = train_identity.dropna(thresh=10)\ntest_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv', index_col='TransactionID')\n#test_transaction = test_transaction.dropna(thresh=10)","71aa54a9":"# TRAIN\n# Reduce the number of zeros since it is imbalanced\ntrain_transaction_0 = train_transaction[train_transaction['isFraud'] == 0].sample(frac=0.05)\ntrain_transaction_1 = train_transaction[train_transaction['isFraud'] == 1]\ntrain_trans_reduced = pd.concat([train_transaction_0, train_transaction_1])\n\n\n\ntrain = train_trans_reduced.merge(train_identity,how='left', left_index=True, right_index=True)\ntrain_y = train['isFraud']\n\n# TEST\ntest_x = test_transaction.merge(test_identity,how='left', left_index=True, right_index=True)","b94ecc9e":"train = train.reset_index()\ntest_x = test_x.reset_index()","09b8ef92":"rm_cols = ['TransactionID','TransactionDT','isFraud']\n\n# Drop unnecessary columns\nfor col in rm_cols:\n    train = train.drop(col, axis=1)\n    if col != \"isFraud\":\n        test_x = test_x.drop(col, axis=1)","32ddac8f":"train_transaction['isFraud'].value_counts().plot(kind='bar', title=\"Before cleaning\")","c65cdbcb":"train_trans_reduced['isFraud'].value_counts().plot(kind='bar', title=\"After cleaning\")","fa1dc115":"del train_transaction\ndel train_transaction_0\ndel train_transaction_1\ndel train_identity\n\ndel test_transaction\ndel test_identity","91af169c":"p = 'P_emaildomain'\nr = 'R_emaildomain'\nuknown = 'email_not_provided'\n\nfor df in [train, test_x]:\n    df[p] = df[p].fillna(uknown)\n    df[r] = df[r].fillna(uknown)\n    \n    df['email_check'] = np.where((df[p]==df[r])&(df[p]!=uknown),1,0)\n\n    df[p+'_prefix'] = df[p].apply(lambda x: x.split('.')[0])\n    df[r+'_prefix'] = df[r].apply(lambda x: x.split('.')[0])","d5771cc3":"for col in list(train):\n    if train[col].dtype=='O' or train[col].dtype=='object':\n        print(col)\n        train[col] = train[col].fillna('unseen_before_label')\n        test_x[col]  = test_x[col].fillna('unseen_before_label')\n        \n        le = preprocessing.LabelEncoder()\n        le.fit(list(train[col])+list(test_x[col]))\n        train[col] = le.transform(train[col])\n        test_x[col]  = le.transform(test_x[col])\n        \n        train[col] = train[col]\n        test_x[col] = test_x[col]","cc21dab4":"# Reduce memory usage\ntrain_x = reduce_mem_usage(train)\ntest_x = reduce_mem_usage(test_x)","fd176a99":"# Creando conjuntos de validacion y test\nseed = 7\ntest_size = 0.35\nX_train, X_val, y_train, y_val = train_test_split(train_x, train_y, test_size=test_size, random_state=seed)","ebdcfe63":"params ={\n        'booster':'gbtree', \n        'objective':'binary:logistic', \n        'n_estimators':10000,\n        'rate_drop': 0.2 \n        }","aa8498b4":"my_model = XGBClassifier(**params)","5784da9c":"my_model.fit(\n            X_train, \n            y_train, \n            eval_set=[(X_train, y_train), (X_val, y_val)], \n            verbose=30, \n            eval_metric='auc',\n            early_stopping_rounds=40\n            )","58875632":"predictions = my_model.predict_proba(test_x)[:, 1]","202745ae":"def show_important_features(names, importances, limit, return_columns=False):\n    impo_list = zip(names, importances)\n    impo_list = sorted(impo_list, key=lambda t: t[1], reverse=True)\n    \n    sorted_importances = []\n    sorted_names = []\n    for idx, el in enumerate(impo_list):\n        if idx < limit:\n            sorted_names.append(el[0])\n            sorted_importances.append(el[1])\n    \n    if not return_columns:\n        fig, ax = plt.subplots(figsize=(9,7))\n        \n        ax.barh(sorted_names, sorted_importances, align='center')\n        ax.invert_yaxis()\n        ax.set_xlabel('Feature importance')\n        ax.set_title('Most influencial {} features'.format(limit))\n        \n        plt.show()\n    else:\n        return sorted_names","149bffde":"names = X_train.columns\nimportances = my_model.feature_importances_\nlimit = 20\n\nshow_important_features(names, importances, limit)","f576d56d":"# Creando conjuntos de validacion y test\nmost_important_80 = show_important_features(names, importances, 80, return_columns=True)","7d97708c":"new_train_x = train_x[train_x.columns & most_important_80]","39f41986":"seed = 7\ntest_size = 0.20\nX_train, X_val, y_train, y_val = train_test_split(new_train_x, train_y, test_size=test_size, random_state=seed)","dc6b81c5":"params ={\n        'booster':'gbtree', \n        'objective':'binary:logistic', \n        'n_estimators':10000\n        }","030e24ef":"my_model_importance = XGBClassifier(**params)","a9f2ff33":"my_model_importance.fit(\n            X_train, \n            y_train, \n            eval_set=[(X_train, y_train), (X_val, y_val)], \n            verbose=30, \n            eval_metric='auc',\n            early_stopping_rounds=40\n            )","b67234ef":"new_test_x = test_x[test_x.columns & most_important_80]","9b06e66b":"predictions_importance = my_model_importance.predict_proba(new_test_x)[:, 1]","af479854":"names = X_train.columns\nimportances = my_model_importance.feature_importances_\nlimit = 20\n\nshow_important_features(names, importances, limit)","5b723cb0":"final_predictions = (predictions_importance + predictions) \/ 2","d13f71c6":"submit = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv')\nsubmit['isFraud'] = final_predictions\nsubmit.head()","5620281c":"submit.to_csv('submission.csv', index=False)","873df76b":"**Combine two results**","a056a03c":"**Validation and test sets**","e40642b4":"**Reduce memory usage**","aa35152f":"**Submission**","01c1f066":"**Final predictions**","daccc845":"**Proporcion de unos y ceros**","ac2feb99":"**XGBoost model**","1e8292ff":"**Loading data**","c2948f41":"**Feature importance**","e303c042":"**Repeat training process with a new model with the 80 most influencial features then ensemble the results**","2df17f0d":"**Joining datasets**"}}