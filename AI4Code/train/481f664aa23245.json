{"cell_type":{"2017b6ed":"code","014ce43a":"code","af78536b":"code","a3bf0964":"code","e2d5ea15":"code","286cc307":"code","b479f889":"code","8ec13bde":"code","c4b87e78":"code","c0c999f0":"code","df8af55d":"code","66dee424":"code","59c53c2b":"code","24c6909d":"code","ebfc952e":"code","d0afbdf6":"code","2566dc4a":"code","53d9fa78":"code","35039d0a":"code","640de3dd":"code","08eddbd8":"code","f884e7a9":"code","093bf744":"code","41bc7a49":"code","66ee816f":"code","3d49c2bb":"code","92ef4fa8":"code","92f0f290":"code","b0dec8f3":"code","a5a5ff4b":"markdown","b294eb51":"markdown","597c28ca":"markdown","e6d33585":"markdown","f5e76318":"markdown"},"source":{"2017b6ed":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport zipfile\nimport glob\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","014ce43a":"!conda install -c rdkit rdkit -y","af78536b":"from rdkit import Chem\nfrom rdkit.Chem import Descriptors, Lipinski","a3bf0964":"all_csv = glob.glob('\/kaggle\/input\/betalactamase\/*.csv')","e2d5ea15":"df = pd.concat((pd.read_csv(csv)) for csv in all_csv )\ndf","286cc307":"df.info()","b479f889":"df.isnull().sum()","8ec13bde":"df.dropna(inplace = True)","c4b87e78":"df.info()","c0c999f0":"df.isnull().sum()","df8af55d":"df['target_pref_name'].value_counts().head()","66dee424":"df['bao_label'].value_counts()","59c53c2b":"df['standard_units'].value_counts()","24c6909d":"df['standard_type'].value_counts()","ebfc952e":"df2 = df.loc[(df.target_pref_name == 'Beta-lactamase AmpC') & (df.bao_label == 'assay format') & (df.standard_type == 'Potency')]\ndf2.reset_index(inplace = True)\ndf2","d0afbdf6":"bioactivity_threshold = []\n\nfor i in df2.pchembl_value:\n    if i >= 6:\n        bioactivity_threshold.append('active')\n    elif i <= 4:\n        bioactivity_threshold.append('inactive')\n    else:\n        bioactivity_threshold.append('intermediate')\n\nbioactivity_class = pd.Series(bioactivity_threshold, name = 'class')","2566dc4a":"df3 = pd.concat([df2, bioactivity_class], axis = 1)\ndf3.drop('index', axis = 1, inplace = True)","53d9fa78":"plt.figure(figsize = (6, 6))\n\nsns.countplot(x = 'class', data = df3, ec = 'black')\n\nplt.xlabel('Class', fontsize = 12, fontweight = 'bold')\nplt.ylabel('Count', fontsize = 12, fontweight = 'bold')\n\nplt.show()","35039d0a":"df_no_smiles = df3.drop('canonical_smiles', axis = 1)\ndf_no_smiles","640de3dd":"smiles = []\n\nfor i in df3.canonical_smiles.to_list():\n    cpd = str(i).split('.')\n    cpd_longest = max(cpd, key = len)\n    smiles.append(cpd_longest)\n\nSMILES = pd.Series(smiles, name = 'canonical_smiles')","08eddbd8":"df_clean_smiles = pd.concat([df_no_smiles, SMILES], axis = 1)\ndf_clean_smiles","f884e7a9":"def lipinski(smiles, verbose=False):\n\n    moldata= []\n    for elements in smiles:\n        mol=Chem.MolFromSmiles(elements) \n        moldata.append(mol)\n       \n    baseData= np.arange(1,1)\n    i=0  \n    for mol in moldata:        \n       \n        desc_MolWt = Descriptors.MolWt(mol)\n        desc_MolLogP = Descriptors.MolLogP(mol)\n        desc_NumHDonors = Lipinski.NumHDonors(mol)\n        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)\n           \n        row = np.array([desc_MolWt,\n                        desc_MolLogP,\n                        desc_NumHDonors,\n                        desc_NumHAcceptors])   \n    \n        if(i==0):\n            baseData=row\n        else:\n            baseData=np.vstack([baseData, row])\n        i=i+1      \n    \n    columnNames=[\"MW\",\"LogP\",\"NumHDonors\",\"NumHAcceptors\"]   \n    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n    \n    return descriptors","093bf744":"df_lipinski = lipinski(df_clean_smiles.canonical_smiles)\ndf_lipinski","41bc7a49":"df4 = pd.concat([df3, df_lipinski], axis = 1)\ndf4","66ee816f":"selection = ['molecule_chembl_id', 'canonical_smiles', 'pchembl_value', 'class', 'MW', 'LogP', 'NumHDonors', 'NumHAcceptors']\ndf_final = df4[selection]\ndf_final","3d49c2bb":"dataset = df_final[df_final['class'] != 'intermediate']\ndataset","92ef4fa8":"dataset.to_csv('AmpC_AssayFormat Lipinski Descriptors.csv', index = False)","92f0f290":"plt.figure(figsize = (8, 8))\n\nsns.countplot(x = 'class', data = dataset, ec = 'black')\n\nplt.xlabel('Bioactivity Class', fontsize = 14, fontweight = 'bold')\nplt.ylabel('Count', fontsize = 14, fontweight = 'bold')\n\nplt.show()","b0dec8f3":"plt.figure(figsize = (8, 8))\n\nsns.scatterplot(x = 'MW', y = 'LogP', data = dataset, hue = 'class', size = 'pchembl_value', ec = 'black', alpha = 0.7)\n\nplt.xlabel('MW', fontsize = 14, fontweight = 'bold')\nplt.ylabel('LogP', fontsize = 14, fontweight = 'bold')\nplt.legend(bbox_to_anchor = (1.05, 1), loc = 2, borderaxespad = 0)\n\nplt.show()","a5a5ff4b":"**Compound Classification**\n\n* Compound with pchembl value **greather than** or **equal to** 6 is will be classified as **active**\n* Compound with pchembl value **less than** or **equal to** 4 is will be classified as **inactive**\n* Compound with pchembl value **in between** 4-6 is will be classified as **intermediate**","b294eb51":"## **Calculate Lipinksi Descriptors** ##","597c28ca":"**Check Null Data**","e6d33585":"## **EDA** ##","f5e76318":" I will work on **Beta-lactamase AmpC** target, since it's the most compared to the others, with **assay format** and **Potency** to generate specific data with only 2 variables."}}