{"cell_type":{"911b7954":"code","ef2d0a73":"code","ca79d732":"code","e8869f31":"code","3dadafc4":"code","16c0c9ad":"code","74f8aace":"code","082d1c0c":"code","6089e69e":"code","e376e5bf":"markdown","c8bc0aac":"markdown","1796c707":"markdown","5100591e":"markdown","edaece8b":"markdown","fb959df2":"markdown"},"source":{"911b7954":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef2d0a73":"filelist = []\nfor i in range(1, 11):\n    filelist.append(\"..\/input\/user%d-venue-shortlist\/shortlist_user%d.csv\" % (i,i))\nfilelist","ca79d732":"combinedf = pd.concat([pd.read_csv(f) for f in filelist ])\ncombinedf.shape","e8869f31":"predictiondf = combinedf[['user_id', 'id']]\npredictiondf['ratings'] = 0\npredictiondf.head()","3dadafc4":"from surprise import Reader, Dataset, SVD\nreader = Reader()\ndata = Dataset.load_from_df(predictiondf, reader)\ntestset = data.build_full_trainset()","16c0c9ad":"from surprise import dump\nfile_name = '..\/input\/recommendation-model-training\/movie_svd_model'\n_, loaded_algo = dump.load(file_name)","74f8aace":"predictions = loaded_algo.test(testset.build_testset())","082d1c0c":"from collections import defaultdict\ndef get_top_n(predictions, n=10):\n    \"\"\"Return the top-N recommendation for each user from a set of predictions.\n\n    Args:\n        predictions(list of Prediction objects): The list of predictions, as\n            returned by the test method of an algorithm.\n        n(int): The number of recommendation to output for each user. Default\n            is 10.\n\n    Returns:\n    A dict where keys are user (raw) ids and values are lists of tuples:\n        [(raw item id, rating estimation), ...] of size n.\n    \"\"\"\n\n    # First map the predictions to each user.\n    top_n = defaultdict(list)\n    for uid, iid, true_r, est, _ in predictions:\n        top_n[uid].append((iid, est))\n\n    # Then sort the predictions for each user and retrieve the k highest ones.\n    for uid, user_ratings in top_n.items():\n        user_ratings.sort(key=lambda x: x[1], reverse=True)\n        top_n[uid] = user_ratings[:n]\n\n    return top_n","6089e69e":"top_n = get_top_n(predictions, n=10)\n\n# Print the recommended items for each user\nfor uid, user_ratings in top_n.items():\n    print(uid, [iid for (iid, _) in user_ratings])","e376e5bf":"Run predictions","c8bc0aac":"\n\nDefine a helper function to get top n recommendations\n","1796c707":"\n\nLet's retrieve all the shortlists for each user and put into a single dataframe\n","5100591e":"\n\nLoad saved model\n","edaece8b":"Now we need to pass this dataframe into our saved SVD model for it to make predictions","fb959df2":"Prepare a dataframe with just user_id, venue_id, and ratings column initialised to 0"}}