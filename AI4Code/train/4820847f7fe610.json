{"cell_type":{"e2f1fca8":"code","40634268":"code","b48c613d":"code","e9ef4907":"code","dc03e695":"code","75f3ba08":"code","15fa4570":"code","3c9d8261":"code","4deb7824":"code","89f6eacb":"code","7eabaa4e":"code","94b5de64":"code","99b405e7":"code","9b960580":"code","1bfc4ba5":"code","ef47483c":"code","17413844":"code","6ff025b8":"code","bd3b3fbb":"code","8579ed0c":"code","20b81144":"code","2f678556":"code","27f8fe4e":"code","0fdb4390":"code","a620de9c":"code","a664f61e":"code","3dfd3b7c":"code","b0dc7b05":"code","63480a39":"code","4b048c54":"code","9fd44bdd":"code","a2d05174":"code","19b5a4d4":"code","86e784f1":"code","95a4f371":"code","609b2b94":"code","24fad216":"code","4d0c5295":"code","ab390ba6":"code","2fd3a917":"code","7ab48a07":"code","412e5b1a":"code","0d5109a0":"code","c6b05413":"code","50204818":"markdown","133b1ee7":"markdown","cb1b795f":"markdown","b8ee1c02":"markdown","a6fa80f3":"markdown","f0ccdcf4":"markdown","adc955b9":"markdown","ec5bec5f":"markdown","b97b3f1c":"markdown","aac7c57e":"markdown","362b42b1":"markdown","8d21d946":"markdown","4a98c6de":"markdown","205c89bd":"markdown","b15174eb":"markdown","96be0f8f":"markdown","e347bbdc":"markdown","23a881bb":"markdown","43e9ea06":"markdown","c21c771a":"markdown","5ad60aa5":"markdown","a153bbed":"markdown","be85a971":"markdown","6eb99b52":"markdown","3891b521":"markdown","74873c0c":"markdown","88db3284":"markdown"},"source":{"e2f1fca8":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","40634268":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b48c613d":"def load_data():\n    df_train = pd.read_csv('\/kaggle\/input\/massp-health-insurance-prediction\/train.csv')\n    df_test = pd.read_csv('\/kaggle\/input\/massp-health-insurance-prediction\/test.csv')\n    df_test = df_test[['id', 'Gender', 'Age', 'Driving_License', 'Region_Code',\n       'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage', 'Annual_Premium',\n       'Policy_Sales_Channel', 'Vintage']]\n    return df_train, df_test\n\ndf_train, df_test = load_data()","e9ef4907":"print('K\u00edch th\u01b0\u1edbc t\u1eadp train: {}'.format(df_train.shape))\nprint('K\u00edch th\u01b0\u1edbc t\u1eadp test : {}'.format(df_test.shape))","dc03e695":"df_train.head()","75f3ba08":"df_test.head()","15fa4570":"df_train.info()","3c9d8261":"print('Ki\u1ec3m tra d\u1eef li\u1ec7u thi\u1ebfu t\u1eadp train: {}'.format(df_train.isnull().any().any()))\nprint('Ki\u1ec3m tra d\u1eef li\u1ec7u thi\u1ebfu t\u1eadp test : {}'.format(df_train.isnull().any().any()))","4deb7824":"def encode(df_train, df_test, exceptions=[]):\n    # Change categoricals to type 'category'\n    for df in [df_train, df_test]:\n        categoricals = df.select_dtypes(exclude=[np.number]).columns.values\n        for name in categoricals:\n            df[name] = df[name].astype(\"category\")\n            # Add a None category for missing values\n            if \"None\" not in df[name].cat.categories:\n                df[name].cat.add_categories(\"None\", inplace=True)\n        for name in exceptions:\n            df[name] = df[name].astype(\"category\")\n            if \"None\" not in df[name].cat.categories:\n                df[name].cat.add_categories(\"None\", inplace=True)\n    return df_train, df_test\n\ndf_train, df_test = encode(df_train, df_test, ['Policy_Sales_Channel', 'Region_Code', 'Driving_License', 'Previously_Insured'])","89f6eacb":"df_train.dtypes","7eabaa4e":"df_train.head()","94b5de64":"df_train.describe()","99b405e7":"df_test.describe()","9b960580":"df_train.select_dtypes(exclude=[np.number]).describe()","1bfc4ba5":"df_test.select_dtypes(exclude=[np.number]).describe()","ef47483c":"print('S\u1ed1 kh\u00e1ch kh\u00f4ng quan t\u00e2m', round(df_train.Response.value_counts()[0]\/len(df_train) * 100,2), '% d\u1eef li\u1ec7u')\nprint('S\u1ed1 kh\u00e1ch quan t\u00e2m', round(df_train.Response.value_counts()[1]\/len(df_train) * 100,2), '% d\u1eef li\u1ec7u')","17413844":"class_0 = df_train.Response.value_counts()[0]\nclass_1 = df_train.Response.value_counts()[1]\nlabels = ['1 - Quan t\u00e2m', '0 - Kh\u00f4ng quan t\u00e2m']\npie, ax = plt.subplots(figsize=[10,6])\nplt.pie([class_1, class_0], autopct=\"%.1f%%\", explode=[0.05]*2, labels=labels, pctdistance=0.5)\nplt.title(\"Ph\u1ea3n h\u1ed3i c\u1ee7a kh\u00e1ch h\u00e0ng\", fontsize=14);","6ff025b8":"def plot_stats(train, feature, label,width = 12):\n    x, y, hue = label, \"prop\", feature\n    temp = train[feature].value_counts()\n    df1 = pd.DataFrame({feature: temp.index,'S\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch h\u00e0ng ': temp.values})\n    hue_order = train[feature].unique()\n    f, axes = plt.subplots(1, 2, figsize=(width, 6))\n    s = sns.barplot(ax=axes[0], x=feature, y=\"S\u1ed1 l\u01b0\u1ee3ng kh\u00e1ch h\u00e0ng \", data=df1, order=hue_order)\n\n    prop_df = (train[hue]\n               .groupby(train[x])\n               .value_counts(normalize=True)\n               .rename(y)\n               .reset_index())\n\n    sns.barplot(x=x, y=y, hue=hue, data=prop_df, ax=axes[1], hue_order=hue_order)\n    plt.ylabel('Percent of target with the corresponding value [%]', fontsize=10)\n    plt.tick_params(axis='both', which='major', labelsize=10)\n    plt.show();","bd3b3fbb":"plot_stats(df_train, 'Gender', 'Response')","8579ed0c":"plot_stats(df_train, 'Driving_License', 'Response')","20b81144":"plot_stats(df_train, 'Previously_Insured', 'Response')","2f678556":"plot_stats(df_train, 'Vehicle_Age', 'Response')","27f8fe4e":"plot_stats(df_train, 'Vehicle_Damage', 'Response')","0fdb4390":"def plot_numeric_var(col):\n    plt.figure(num=None, figsize=(10, 4), dpi=80)\n    ax1 = sns.kdeplot(df_train.loc[df_train['Response'] == 1, col] , label = 'Customer is interested', linewidth=5.0)\n    sns.kdeplot(df_train.loc[df_train['Response'] == 0, col] , label = 'Customer is not interested', linewidth=5.0)\n\n    ax1.tick_params(axis='both', which='major', labelsize=15)\n    ax1.set_ylabel('Density', size=20)\n    ax1.set_xlabel(col, size=18)\n\n    leg = plt.legend()\n    leg_texts = leg.get_texts()\n    plt.setp(leg_texts, fontsize='x-large')\n    plt.grid()\n    plt.show()","a620de9c":"plot_numeric_var('Age')","a664f61e":"plot_numeric_var('Annual_Premium')","3dfd3b7c":"plot_numeric_var('Vintage')","b0dc7b05":"!pip install pycaret","63480a39":"from pycaret.classification import *","4b048c54":"clf = setup(\n    data=df_train.drop('id', axis=1), target='Response', session_id=123,\n    normalize=True,\n    transformation = True, \n    bin_numeric_features=['Age'],\n    fix_imbalance=True,\n    silent=True\n)","9fd44bdd":"compare_models()","a2d05174":"catboost = create_model('catboost')","19b5a4d4":"tuned_cat = tune_model(catboost, optimize='AUC')","86e784f1":"interpret_model(tuned_cat, plot='summary')","95a4f371":"evaluate_model(tuned_cat)","609b2b94":"predict_model(tuned_cat)","24fad216":"final_cat = finalize_model(tuned_cat)","4d0c5295":"predict_model(final_cat)","ab390ba6":"predict_model(final_cat, data=df_test.drop('id', axis=1), raw_score=True)","2fd3a917":"prep_pipe = get_config('prep_pipe')\nprep_pipe","7ab48a07":"predictions_test = final_cat.predict_proba(prep_pipe.transform(df_test.drop('id', axis=1)))","412e5b1a":"df_test = pd.read_csv('\/kaggle\/input\/massp-health-insurance-prediction\/test.csv')\nmy_submission = pd.DataFrame({'id': df_test.id, 'Response':predictions_test[:,1]})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('.\/submission.csv', index=False)","0d5109a0":"my_submission.head(10)","c6b05413":"from IPython.display import HTML\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\nThe raw code for this IPython notebook is by default hidden for easier reading.\nTo toggle on\/off the raw code, click <a href=\"javascript:code_toggle()\">here<\/a>.''')","50204818":"- Kh\u00e1ch h\u00e0ng c\u00f3 xe t\u1eebng b\u1ecb h\u1ecfng l\u00e0 quan t\u00e2m nhi\u1ec1u h\u01a1n \u0111\u1ebfn b\u1ea3o hi\u1ec3m xe c\u1ed9 h\u01a1n l\u00e0 kh\u00e1ch ch\u01b0a t\u1eebng b\u1ecb h\u1ecfng xe.","133b1ee7":"# <a id='2'>2. Data validation <\/a>","cb1b795f":"### Quan s\u00e1t c\u00e1c th\u1ed1ng k\u00ea","b8ee1c02":"- Kh\u00e1ch h\u00e0ng l\u00e2u n\u0103m chi\u1ebfm t\u1ec9 l\u1ec7 \u00edt, t\u1eadp trung ch\u1ee7 y\u1ebfu l\u00e0 s\u1eed d\u1ee5ng b\u1ea3o hi\u1ec3m c\u1ee7a c\u00f4ng ty t\u1eeb 2 n\u0103m tr\u1edf l\u1ea1i.\n- Kh\u00e1ch h\u00e0ng t\u1eeb 1-2 n\u0103m quan t\u00e2m h\u01a1n \u0111\u1ebfn b\u1ea3o hi\u1ec3m xe c\u1ed9 so v\u1edbi c\u00e1c l\u1edbp kh\u00e1ch h\u00e0ng kh\u00e1c.","a6fa80f3":"# <a id='1'>1. Problem defining","f0ccdcf4":"- Kh\u00f4ng c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t \u0111\u00e1ng k\u1ec3 gi\u1eefa 2 l\u1edbp kh\u00e1ch h\u00e0ng trong tr\u01b0\u1eddng n\u00e0y.","adc955b9":"## Thay \u0111\u1ed5i \u0111\u1ecbnh d\u1ea1ng c\u1ee7a c\u00e1c tr\u01b0\u1eddng ph\u00e2n lo\u1ea1i","ec5bec5f":"### Ki\u1ec3m tra d\u1eef li\u1ec7u thi\u1ebfu","b97b3f1c":"Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng model classification \u0111\u1ec3 ph\u00e2n lo\u1ea1i ng\u01b0\u1eddi d\u00f9ng v\u00e0o hai l\u1edbp `1` v\u00e0o `0`:\n- `1` - nh\u1eefng ng\u01b0\u1eddi s\u1ebd quan t\u00e2m \u0111\u1ebfn b\u1ea3o hi\u1ec3m xe c\u1ed9\n- `0` - kh\u00f4ng quan t\u00e2m","aac7c57e":"**Nh\u1eadn x\u00e9t:**\n- Th\u1ed1ng k\u00ea c\u00e1c tr\u01b0\u1eddng features c\u1ee7a 2 t\u1eadp t\u01b0\u01a1ng \u0111\u1ed1i nh\u1ea5t qu\u00e1n.\n- Ph\u00e2n b\u1ed1 c\u1ee7a tr\u01b0\u1eddng `Annual_Premium` kh\u00e1 l\u1ec7ch.","362b42b1":"## <a id='#3.1'>3.1. T\u1ed5ng quan tr\u01b0\u1eddng target <\/a>","8d21d946":"- C\u0169ng kh\u00f4ng c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t \u0111\u00e1ng k\u1ec3 n\u00e0o gi\u1eefa 2 l\u1edbp \u1edf tr\u01b0\u1eddng n\u00e0y.","4a98c6de":"**Nh\u1eadn x\u00e9t:** Ph\u00e2n b\u1ed1 c\u1ee7a tr\u01b0\u1eddng Target c\u00f3 s\u1ef1 m\u1ea5t c\u00e2n b\u1eb1ng.","205c89bd":"**Th\u00f4ng tin c\u00e1c tr\u01b0\u1eddng d\u1eef li\u1ec7u:**\n- `id`: M\u1ed7i kh\u00e1ch h\u00e0ng c\u00f3 1 id\n- `Gender`: Gi\u1edbi t\u00ednh kh\u00e1ch h\u00e0ng\n- `Age`: Tu\u1ed5i kh\u00e1ch h\u00e0ng\n- `Driving_License`: 0 : Kh\u00e1ch kh\u00f4ng c\u00f3 b\u1eb1ng l\u00e1i, 1 : C\u00f3 b\u1eb1ng l\u00e1i\n- `Region_Code`: M\u00e3 khu v\u1ef1c c\u1ee7a kh\u00e1ch h\u00e0ng\n- `Previously_Insured`: 1 : Kh\u00e1ch \u0111\u00e3 c\u00f3 b\u1ea3o hi\u1ec3m xe c\u1ed9, 0 : Ch\u01b0a c\u00f3 b\u1ea3o hi\u1ec3m \n- `Vehicle_Age`: Th\u1eddi gian mua xe\n- `Vehicle_Damage`: 1 : Xe c\u1ee7a kh\u00e1ch \u0111\u00e3 ph\u1ea3i \u0111i s\u1eeda. 0 : Ch\u01b0a ph\u1ea3i \u0111i s\u1eeda\n- `Annual_Premium`: Ph\u00ed b\u1ea3o hi\u1ec3m h\u00e0ng n\u0103m\n- `Policy_Sales_Channel`: C\u00e1c k\u00eanh b\u00e1n h\u00e0ng ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n- `Vintage`: Th\u1eddi gian b\u1eb1ng ng\u00e0y t\u1eeb khi kh\u00e1ch mua s\u1ea3n ph\u1ea9m c\u1ee7a c\u00f4ng ty\n- `Response`: 1 : Kh\u00e1ch quan t\u00e2m \u0111\u1ebfn b\u1ea3o hi\u1ec3m xe, 0 : Kh\u00f4ng quan t\u00e2m\n\nC\u00e1c tr\u01b0\u1eddng `Gender`, `Vehicle_Age` v\u00e0 `Vehicle_Damage` l\u00e0 c\u00e1c tr\u01b0\u1eddng ph\u00e2n lo\u1ea1i v\u00e0 c\u00e1c tr\u01b0\u1eddng c\u00f2n l\u1ea1i l\u00e0 tr\u01b0\u1eddng s\u1ed1.","b15174eb":"## <a id='#3.2'>3.2. Ph\u00e2n t\u00edch d\u1eef li\u1ec7u tr\u01b0\u1eddng ph\u00e2n lo\u1ea1i <\/a>","96be0f8f":"### Load data","e347bbdc":"- Nh\u1eadn th\u1ea5y kh\u00e1ch h\u00e0ng n\u1eef \u00edt h\u01a1n, nh\u01b0ng t\u1ec9 l\u1ec7 nam n\u1eef c\u00f3 ph\u1ea3n h\u1ed3i c\u00f3 ho\u1eb7c kh\u00f4ng quan t\u00e2m t\u01b0\u01a1ng \u0111\u1ed1i \u0111\u1ed3ng \u0111\u1ec1u.","23a881bb":"**Nh\u1eadn x\u00e9t:**\n- C\u00f3 s\u1ef1 ph\u00e2n ph\u1ed1i kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u gi\u1eefa \u1edf c\u00e1c \u0111\u1ed9 tu\u1ed5i \u0111\u1ed1i v\u1edbi target: Kh\u00e1c h\u00e0ng c\u00f3 \u0111\u1ed9 tu\u1ed5i l\u1edbn h\u01a1n (40-50) c\u00f3 xu h\u01b0\u1edbng quan t\u00e2m \u0111\u1ebfn b\u1ea3o hi\u1ec3m xe c\u1ed9.\n- \u0110\u1ed9 tu\u1ed5i t\u1eadp trung 20-30","43e9ea06":"## Outline\n\n- <a href='#1'>1. Problem defining<\/a>\n- <a href='#2'>2. Data validation <\/a>  \n- <a href='#3'>3. Data analyzing - Ph\u00e2n t\u00edch d\u1eef li\u1ec7u <\/a>\n- <a href='#4'>4. S\u1eed d\u1ee5ng PyCaret <\/a>","c21c771a":"- H\u1ea7u h\u1ebft kh\u00e1ch h\u00e0ng \u0111\u01b0\u1ee3c kh\u1ea3o s\u00e1t \u0111\u1ec1u c\u00f3 b\u1eb1ng l\u00e1i xe. ","5ad60aa5":"# <a href='#3'>3. Data analyzing - Ph\u00e2n t\u00edch d\u1eef li\u1ec7u <\/a>","a153bbed":"- Kh\u00f4ng c\u00f3 ch\u00eanh l\u1ec7ch l\u1edbn gi\u1eefa kh\u00e1ch h\u00e0ng \u0111\u00e3 v\u00e0 ch\u01b0a s\u1eed d\u1ee5ng b\u1ea3o hi\u1ec3m.\n- Nh\u1eefng ng\u01b0\u1eddi \u0111\u00e3 c\u00f3 b\u1ea3o hi\u1ec3m th\u00ec kh\u00f4ng quan t\u00e2m \u0111\u1ebfn b\u1ea3o hi\u1ec3m kh\u00e1c.","be85a971":"**M\u00f4 t\u1ea3**: X\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh d\u1ef1 \u0111o\u00e1n kh\u00e1ch h\u00e0ng \u0111\u00e3 s\u1eed d\u1ee5ng b\u1ea3o hi\u1ec3m s\u1ee9c kh\u1ecfe c\u00f3 tham gia b\u1ea3o hi\u1ec3m ph\u01b0\u01a1ng ti\u1ec7n \u0111i l\u1ea1i hay kh\u00f4ng.","6eb99b52":"## 3.3. Ph\u00e2n t\u00edch d\u1eef li\u1ec7u tr\u01b0\u1eddng s\u1ed1\n\n### H\u00e0m v\u1ebd ph\u00e2n ph\u1ed1i theo t\u1eebng target.","3891b521":"# T\u1ed5ng k\u1ebft\n\nNotebook n\u00e0y ch\u1ec9 m\u1edbi s\u1eed d\u1ee5ng nh\u1eefng t\u00ednh n\u0103ng c\u01a1 b\u1ea3n nh\u1ea5t c\u1ee7a th\u01b0 vi\u1ec7n PyCaret \u0111\u1ec3 x\u00e2y d\u1ef1ng m\u00f4 h\u00ecnh cho cu\u1ed9c thi in-class MaSSP - Health Insurance Prediction. \u0110\u1ec3 hi\u1ec3u r\u00f5 h\u01a1n v\u1ec1 th\u01b0 vi\u1ec7n PyCaret v\u00e0 s\u1eed d\u1ee5ng nh\u1eefng c\u00f4ng c\u1ee5 n\u00e2ng cao h\u01a1n do th\u01b0 vi\u1ec7n n\u00e0y cung c\u1ea5p, c\u00e1c b\u1ea1n c\u00f3 th\u1ec3 tham kh\u1ea3o trang [Github](https:\/\/github.com\/pycaret\/pycaret).","74873c0c":"# 4. S\u1eed d\u1ee5ng PyCaret\n\nTh\u01b0 vi\u1ec7n [PyCaret](https:\/\/github.com\/pycaret\/pycaret) cho ph\u00e9p t\u1ef1 \u0111\u1ed9ng h\u00f3a r\u1ea5t nhi\u1ec1u c\u00f4ng vi\u1ec7c trong x\u00e2y d\u1ef1ng m\u1ed9t m\u00f4 h\u00ecnh h\u1ecdc m\u00e1y. ","88db3284":"### Import c\u00e1c th\u01b0 vi\u1ec7n"}}