{"cell_type":{"b542378b":"code","14f18eec":"code","f69a9b8f":"code","c51f09c8":"code","7da6d29e":"code","ff063b77":"code","ae779dbf":"code","f7e67053":"code","131db878":"code","a28d3421":"code","4ce104e2":"code","09efafcf":"code","80c7c540":"code","07999a73":"code","636029ad":"code","ee603ae2":"code","45e3d10e":"code","0d983527":"markdown","57bac131":"markdown","ef67651a":"markdown","82f1eb49":"markdown","7ff5620f":"markdown","26a33de8":"markdown","d186876b":"markdown","054531ad":"markdown","1cb12660":"markdown","506fdf28":"markdown","49b3f5d2":"markdown","a7dbc492":"markdown","81e09318":"markdown","cfaa9b6f":"markdown","e25faa3b":"markdown","36309325":"markdown","7089626d":"markdown","563b59b2":"markdown","cfe4fc5f":"markdown","7dffac50":"markdown","b63fdf12":"markdown","a525720e":"markdown","e66bb396":"markdown","4a66cc7f":"markdown","cd97a8fe":"markdown","90580c26":"markdown","8845a650":"markdown","5d71919e":"markdown","7b01fe52":"markdown","847a5c55":"markdown","eb92b211":"markdown"},"source":{"b542378b":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport missingno as msno\nimport os\nimport time\nimport lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn import metrics\n\nplt.style.use('ggplot')\n%matplotlib inline","14f18eec":"data_path = '\/kaggle\/input\/ventilator-pressure-prediction'\n\ntrain = pd.read_csv(os.path.join(data_path, 'train.csv'))\ntest = pd.read_csv(os.path.join(data_path, 'test.csv'))\nsubmission = pd.read_csv(os.path.join(data_path, 'sample_submission.csv'))","f69a9b8f":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\nall_df = [train, test]\nfor df in all_df:\n    df = downcast(df)","c51f09c8":"print(train.shape)\ntrain.head()","7da6d29e":"print(test.shape)\ntest.head()","ff063b77":"print(submission.shape)\nsubmission.head()","ae779dbf":"def resumetable(df):\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Feature'})\n    summary['Num of null'] = df.isnull().sum().values\n    summary['Num of unique'] = df.nunique().values\n    summary['First value'] = df.loc[0].values\n    summary['Second value'] = df.loc[1].values\n    summary['Third value'] = df.loc[2].values\n    return summary","f7e67053":"resumetable(train)","131db878":"msno.bar(df=train, figsize=(7, 4));","a28d3421":"mpl.rc('font', size=15)\nplt.figure(figsize=(8, 5))\n\nax = sns.histplot(x='pressure', data=train)\nax.set_title('Target Distribution');","4ce104e2":"def write_percent(ax, total_size):\n    '''Traverse the figure object and display the ratio at the top of the bar graph.'''\n    for patch in ax.patches:\n        height = patch.get_height() # Figure height (number of data)\n        width = patch.get_width() # Figure width\n        left_coord = patch.get_x() # The x-axis position on the left edge of the figure\n        percent = height\/total_size*100 # percent\n        \n        # Type text in the (x, y) coordinates\n        ax.text(x=left_coord + width\/2.0, # x-axis position\n                y=height + total_size*0.001, # y-axis position\n                s=f'{percent:1.1f}%', # Text\n                ha='center') # in the middle","09efafcf":"fig, ax = plt.subplots(figsize = (12, 8))\n\nplt.subplot(2, 2, 1)\nax1 = sns.countplot(x='R', data=train)\nplt.title('Counts of R in train')\nwrite_percent(ax1, len(train))\n\nplt.subplot(2, 2, 2)\nax2 = sns.countplot(x='R', data=test)\nplt.title('Counts of R in test')\nwrite_percent(ax2, len(test))\n\nplt.subplot(2, 2, 3)\nax3 = sns.countplot(x='C', data=train)\nplt.title('Counts of C in train')\nwrite_percent(ax3, len(train))\n\nplt.subplot(2, 2, 4)\nax4 = sns.countplot(x='C', data=test)\nplt.title('Counts of C in test')\nwrite_percent(ax4, len(test))\n\nplt.tight_layout() # Space between the graphs","80c7c540":"mpl.rc('font', size=15)\nplt.figure(figsize=(8, 5))\n\nax = sns.histplot(x='u_in', data=train)\nax.set_title('U_in Distribution');","07999a73":"print(f'u_in min : {train[\"u_in\"].min()}')\nprint(f'u_in median : {train[\"u_in\"].median()}')\nprint(f'u_in mean : {train[\"u_in\"].mean()}')\nprint(f'u_in max : {train[\"u_in\"].max()}')","636029ad":"mpl.rc('font', size=12)\nfig, ax = plt.subplots(figsize = (10, 5))\n\nplt.subplot(1, 2, 1)\nax1 = sns.countplot(x='u_out', data=train)\nplt.title('Counts of u_out in train')\nwrite_percent(ax1, len(train))\n\nplt.subplot(1, 2, 2)\nax2 = sns.countplot(x='u_out', data=test)\nplt.title('Counts of u_out in test')\nwrite_percent(ax2, len(test))\n\nplt.tight_layout() # Space between the graphs","ee603ae2":"fig, ax= plt.subplots() \nfig.set_size_inches(10, 8)\n\nfeatures = ['R', 'C', 'time_step', 'u_in', 'u_out']\n\ncorrMatt = train[features].corr() # correlation matrix by features\n\nsns.heatmap(corrMatt, annot=True) # Plot correlation matrix heatmap\nax.set(title='Heatmap of features');","45e3d10e":"fig, ax1 = plt.subplots(figsize = (10, 6))\n\nbreath_1 = train.loc[train['breath_id'] == 1]\nax2 = ax1.twinx()\n\nax1.plot(breath_1['time_step'], breath_1['pressure'], 'r-', label='pressure')\nax1.plot(breath_1['time_step'], breath_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_1['time_step'], breath_1['u_out'], 'b-', label='u_out')\n\nax1.set_xlabel('Timestep')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7));","0d983527":"<h1 style='background:#acd6fa; border:0; color:black'><center>Google Brain - Ventilator Pressure Prediction EDA Starter<\/center><\/h1>\n\n<center><img width=700px; src=\"https:\/\/cdn.diabetesselfmanagement.com\/2020\/11\/dsm-diabetes-and-lung-health-shutterstock_1452313949.jpg\"><\/center>","57bac131":"# V. Null Value Check","ef67651a":"We can get useful information from feature summary.\n\n- **`id`** : The number of `id` is equal to the number of train data(6,036,000). Therefore, `id` is the unique value of the train data itself.\n- **`breath_id`** : Globally-unique time step for breaths. num of unique `id` divided by num of unique `breath_id` is 6,360,000 \/ 75,450 = 80. **Therefore each 80 lines has the same `breath_id`.** For example, `id` 0\\~79 has `breath_id` 1, `id` 80\\~159 has `breath_id` 2, `id` 160\\~239 has `breath_id` 3.\n- **`R`** : Lung attribute indicating how restricted the airway is. There are only three values in `R` so that **`R` is categorical feature.**\n- **`C`** : Lung attribute indicating how compliant the lung is. There are only three values in `C` so that **`C` is also categorical feature.**\n- **`time_step`** : The actual time stamp. **Continuous feature**\n- **`u_in`** : The control input for the inspiratory solenoid valve. Ranges from 0 to 100(0 is completely closed and no air is let in and 100 is completely open). **Continuous feature.**\n- **`u_out`** : The control input for the exploratory solenoid valve. Either 0(closed) or 1(open). **Categorical feature**\n- **`pressure`** : the airway pressure measured in the respiratory circuit (Target Value)","82f1eb49":"# III. Take a look at train, test, submission data","7ff5620f":"<h1 style='background:#acd6fa; border:0; color:black'><center>2. Data Visualizations<\/center><\/h1>","26a33de8":"## `u_in` distribution","d186876b":"# II. Downcast train, test data to save memory","054531ad":"# II. Plot heatmap of features representing correlations","1cb12660":"# I. Read Data","506fdf28":"There is no null value in every feature.","49b3f5d2":"This is a tip to save memory and speed up processing time by downcasting. ","a7dbc492":"`R` and `C` categorical features have a similar distribution in train and test data which  means that the pattern of train data and the pattern of test data are similar.","81e09318":"# III. Analysis for single breath_id","cfaa9b6f":"## Target distribution","e25faa3b":"<h1 style='background:#acd6fa; border:0; color:black'><center>1. Data Overview<\/center><\/h1>","36309325":"#### References\n- ANDREW LUKYANENKO's [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models)\n- CARL MCBRIDE ELLIS's [Ventilator Pressure: EDA and simple submission](https:\/\/www.kaggle.com\/carlmcbrideellis\/ventilator-pressure-eda-and-simple-submission)","7089626d":"### This is simple EDA notebook. I'll keep updating. PLEASE UPVOTE if you like this notebook. It will keep me motivated to update my notebook.\n## **Upvote is Free \ud83e\udd17**","563b59b2":"We can get data type, number of null values, number of unique values, 1st value, 2nd value, 3rd value by feature summary.","cfe4fc5f":"### Function for writing percent at the top of the bar graph","7dffac50":"## `R` and `C` distributions","b63fdf12":"Most of `u_in` values are concentrated between 0 and 10.","a525720e":"This graph is taken from ANDREW LUKYANENKO's [notebook](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models).","e66bb396":"# IV. Create Feature Summary","4a66cc7f":"## Function to create feature summary","cd97a8fe":"`pressure` is the target value which is we should predict in test data","90580c26":"## `u_out` distribution","8845a650":"# To Be Continued...","5d71919e":"`u_in` and `u_out` show the opposite pattern. Also, when `u_out` reaches 0, the pressure gradually increases, and when `u_out` reaches 1, the pressure abruptly decreases.","7b01fe52":"# I. Distributions","847a5c55":"`u_out` Distribution is exactly same between tarin and test data.","eb92b211":"There are lots of values around 7~8."}}