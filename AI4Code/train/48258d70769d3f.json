{"cell_type":{"7a5b3bb1":"code","120492c1":"code","52a714af":"code","722b0a9e":"code","48319050":"code","6b306c7f":"code","9b4ea0ed":"code","0eb3bd89":"code","d32471bf":"code","c87f8dfe":"code","4ba1cc61":"markdown","153f4e7a":"markdown","bcd9f4ce":"markdown","b3601d89":"markdown","1ad4295d":"markdown","1115f6b0":"markdown","f590828c":"markdown","40184fc6":"markdown"},"source":{"7a5b3bb1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","120492c1":"data = pd.read_csv(\"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\ndata.head()","52a714af":"print(data.shape)\ncat_cols = [\"gender\", \"ssc_b\", \"hsc_b\", \"hsc_s\", \"degree_t\", \"workex\", \"specialisation\"]","722b0a9e":"data = data.fillna(0)\ndata.isna().sum()","48319050":"print(\"before\\n\",data.dtypes)\nfor col in cat_cols:\n    data[col] = data[col].astype(\"category\")\nprint(\"after\\n\\n\", data.dtypes)","6b306c7f":"le = LabelEncoder()\nfor cal in cat_cols:\n    data[cal] = le.fit_transform(data[cal])\ndata.head()","9b4ea0ed":"X = data.drop([\"sl_no\",\"status\",\"salary\"], axis=1)\ny = le.fit_transform(data[\"status\"])","0eb3bd89":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","d32471bf":"clf = RandomForestClassifier()\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\nprint(\"Decision Tree Accuracy\", accuracy_score(y_test, pred) * 100,\"%\")\nprint(\"Importance of Features\", clf.feature_importances_ * 100)","c87f8dfe":"importance = clf.feature_importances_\ntot=0\nfor i,v in enumerate(importance):\n    print('Feature: %0s, Score: %.5f' % (X.columns[i],v))\n    tot=tot+v\nprint(tot)\n\nplt.xlabel('Feature')\nplt.ylabel('Degree of Importance')\nplt.bar(X.columns, importance)\nplt.xticks(rotation=90)\nplt.show()","4ba1cc61":"*Label encoding the category columns and then looking at the data*","153f4e7a":"*Changing dtypes from object to category*","bcd9f4ce":"*columns which contain categorical data*","b3601d89":"## Important Features in Placement are plotted below according to their importance generated by RandomTreeClassifier.","1ad4295d":"*Using RandomForestClassifier to train the model.*","1115f6b0":"*Filling NaN values*","f590828c":"*Dividing data into X and y.Dropped few columns due to data leakage and target leakage. Basically here salary column is causing target leakage because those who are not placed (0) have salary (0).*","40184fc6":"*Train test spilt*"}}