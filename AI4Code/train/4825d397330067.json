{"cell_type":{"afcf6b54":"code","c981f3a7":"code","d53227c2":"code","161d5d3d":"code","8a1b60dc":"code","2f97385e":"code","8032226c":"code","2d4fc43f":"code","b39c44bb":"code","8dc54c7a":"code","91ed9c66":"code","8e7f14b5":"code","9b78a361":"code","8e18bb11":"code","32c3e4b1":"code","d17c027b":"code","a96ea3fa":"code","dda2e7ca":"code","95b28080":"code","bd17b076":"markdown","29bf0c53":"markdown","5c14647a":"markdown","51af2155":"markdown","a731e6f0":"markdown","9cf89541":"markdown","038eba03":"markdown","96e2c62e":"markdown","68c6b965":"markdown","e19073db":"markdown","d4a173aa":"markdown","b139c919":"markdown","3e07a435":"markdown","0fdbe996":"markdown","3f64a967":"markdown","3b13b54b":"markdown","cf7bc6f4":"markdown","09360c48":"markdown","19b76a72":"markdown","7bdaca5c":"markdown","61796703":"markdown"},"source":{"afcf6b54":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport re\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\n\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# low case letters for column names just for comfortable coding \ntrain.columns = train.columns.str.lower()\ntest.columns = test.columns.str.lower()\n\nprint ('\\033[4m\\033[1m' + 'Train table info' + '\\033[0m')\ndisplay(train.info())\nprint ('\\033[4m\\033[1m' + 'Test table info' + '\\033[0m')\ndisplay(test.info())","c981f3a7":"general=pd.concat([train,test], axis=0)\n\ngeneral['fare'] = general.groupby('pclass')['fare'].transform(lambda x: x.fillna(x.median()))\ngeneral['embarked'] = general.groupby(['pclass'])['embarked'].transform(lambda x:x.fillna(x.value_counts().idxmax()))\ngeneral['title'] = general['name'].apply(lambda x: re.search(' ([A-Za-z]+)\\.', x).group(1).lower())\ngeneral['age'] = general.groupby(['sex','pclass','title'])['age'].transform(lambda x: x.fillna(x.median()))\ngeneral['age'] = general.groupby(['sex','pclass'])['age'].transform(lambda x: x.fillna(x.median())) #Drop 'title' category to fill in the rest of NA's\n\ndisplay(general.head(3))\ndisplay(general.info())","d53227c2":"display(general['fare'].value_counts().sort_index().head(3))\ngeneral.loc[general['fare']==0]\nprint()\nprint('Average age of passengers with a free ticket is {:.1f} years.'.format(\n    general.loc[general['fare']==0,'age'].mean()))","161d5d3d":"general['fare'] = general.groupby(['embarked','pclass'])['fare'].transform(lambda x: x.replace(0,x.median()))","8a1b60dc":"decks = {'U': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'T': 8}\ngeneral['deck_id'] = general['cabin'].fillna('U').apply(lambda c: decks.get(c[0]))\ngeneral['cabin_id'] = general['cabin'].str.extract('(\\d+)').astype('float').fillna(0).astype('int')\n\ndef even_odd(x):\n    if x == 0: return 0\n    elif x % 2 == 0: return 2\n    else: return 1\ngeneral['side_id'] = general['cabin_id'].apply(even_odd)\n\ngeneral['ticket_id'] = general['ticket'].str.extract('(\\d+)').astype('float').fillna(0).astype('int')\ngeneral[['ticket_letter', 'ticket_number']] = general['ticket'].str.split(' ',n=1, expand=True)\ngeneral.loc[general['ticket_number'].isna(), 'ticket_letter'] = 'None'\n\ngeneral['relatives'] = general['parch'] + general['sibsp']\ngeneral['is_single'] = general['relatives'].apply(lambda x: 1 if x == 0 else 0)\n\ndef age_cat(age):\n    if age <= 5:\n        return 1\n    if age <= 12:\n        return 2\n    if age <= 15:\n        return 3\n    if age <= 35:\n        return 4\n    if age <= 55:\n        return 5      \n    else:\n        return 6\ngeneral['age_cat'] = general['age'].apply(age_cat)\n\ngeneral['fare_cat'] = pd.qcut(general['fare'], 8, labels=[1,2,3,4,5,6,7,8]).astype('int')","2f97385e":"genders = {'male': 1, 'female': 0}\ngeneral['sex_id'] = general['sex'].apply(lambda x: genders.get(x))\n\nembarkments = {'S': 1, 'C': 2, 'Q': 3}\ngeneral['embarked_id'] = general['embarked'].apply(lambda x: embarkments.get(x))\n\ndecks = {'U': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'T': 8}\ngeneral['deck_id'] = general['cabin'].fillna('U').apply(lambda c: decks.get(c[0]))\n\ngeneral['ticket_letter_id'] = LabelEncoder().fit_transform(general['ticket_letter'])\n\ngeneral['title_id'] = LabelEncoder().fit_transform(general['title'])","8032226c":"sex_dummies = pd.get_dummies(general['sex'], prefix='sex_d', dummy_na=False)\ngeneral = pd.concat([general, sex_dummies], axis=1)\n\nembarked_dummies = pd.get_dummies(general['embarked'], prefix='embarked_d', dummy_na=False)\ngeneral = pd.concat([general, embarked_dummies], axis=1)\n\npclass_dummies = pd.get_dummies(general['pclass'], prefix='pclass_d', dummy_na=False)\ngeneral = pd.concat([general, pclass_dummies], axis=1)\n\ndeck_dummies = pd.get_dummies(general['deck_id'], prefix='deck_d', dummy_na=False)\ngeneral = pd.concat([general, deck_dummies], axis=1)\n\ntitle_dummies = pd.get_dummies(general['title'], prefix='title_d', dummy_na=False)\ngeneral = pd.concat([general, title_dummies], axis=1)","2d4fc43f":"train_filled = general.head(891)\n\ntest_filled = general.tail(418)\ntest_filled = test_filled.drop('survived', 1)","b39c44bb":"categories = ['survived','sex', 'pclass', 'fare', 'embarked', 'age', 'relatives', 'deck_id', 'title']\ncolors = ['lightgrey','darkkhaki','rosybrown', 'seagreen', 'lightsteelblue', 'goldenrod', 'darkcyan','indianred', 'orange']\nc=0\nfor i in categories:\n    fig = px.histogram(train_filled, x=i, color_discrete_sequence=[colors[c]])\n    fig.show()\n    c+=1","8dc54c7a":"sns.set_theme(style='darkgrid')\nfig = plt.figure(figsize=(15,10))\nfig.subplots_adjust(hspace=0.4)\nax1 = fig.add_subplot(3,1,1)\nax2 = fig.add_subplot(3,1,2)\nax3 = fig.add_subplot(3,1,3)\nsns.boxplot(x='age', data=train_filled, ax=ax1)\nsns.boxplot(x='fare', data=train_filled, ax=ax2,color='green')\nsns.boxplot(x='relatives', data=train_filled, ax=ax3, color='m')\nax1.set_title('Age', fontsize=20)\nax2.set_title('Fare', fontsize=20)\nax3.set_title('Relatives', fontsize=20)\nax1.set(xlabel=None)\nax2.set(xlabel=None)\nax3.set(xlabel=None)\nplt.show()","91ed9c66":"print ('\\033[4m\\033[1m' + 'Gender' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='sex', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Class' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='pclass', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Fare category' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='fare_cat', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Embarked' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='embarked', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Age category' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='age_cat', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Relatives' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='relatives', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Deck' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='deck_id', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Side' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='side_id', values='survived').style.background_gradient(cmap='Greens'))\nprint ('\\033[4m\\033[1m' + 'Title' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='title', values='survived').style.background_gradient(cmap='Greens'))","8e7f14b5":"heatmap_data = train_filled[['survived','sex_id','pclass','fare','fare_cat','age', 'age_cat','relatives','is_single','embarked_id', 'ticket_letter_id','title_id']]\nfig, ax = plt.subplots(figsize=(12,8))\nsns.heatmap(heatmap_data.corr(), annot=True, cmap='Greens')\nplt.show()","9b78a361":"columns=[\n#'passengerid',       \n#'survived',          \n'pclass',                             \n'age', \n'age_cat',\n'sibsp',               \n'parch',                           \n'fare',\n'fare_cat',\n'sex_id',            \n'relatives',           \n'embarked_id',        \n'is_single',          \n'deck_id',           \n'cabin_id',\n'side_id',\n'ticket_id',\n#'ticket_letter_id',\n'title_id',            \n'sex_d_female','sex_d_male',         \n'embarked_d_C','embarked_d_Q','embarked_d_S',        \n'pclass_d_1','pclass_d_2','pclass_d_3',          \n'deck_d_0','deck_d_1','deck_d_2','deck_d_3','deck_d_4','deck_d_5','deck_d_6','deck_d_7','deck_d_8',           \n'title_d_capt','title_d_col','title_d_countess','title_d_don','title_d_dona','title_d_dr','title_d_jonkheer',   \n'title_d_lady','title_d_major','title_d_master','title_d_miss','title_d_mlle','title_d_mme',       \n'title_d_mr','title_d_mrs', 'title_d_ms','title_d_rev','title_d_sir' \n]\n\ntest_final = test_filled[columns]\ntrain_final = train_filled[columns]","8e18bb11":"abs(pd.DataFrame(heatmap_data.corr()['survived'])).sort_values(by='survived', ascending=False).style.background_gradient(cmap='Greens')","32c3e4b1":"model = RandomForestClassifier()\nmodel.fit(train_final, train_filled['survived'])\nfeature_imp = pd.Series(model.feature_importances_, index=train_final.columns).sort_values(ascending=False).nlargest(25)\nplt.figure(figsize=[16,22])\nax=sns.barplot(y=feature_imp.index, x=feature_imp, palette='Blues_r', edgecolor='black')\nax.axes.set_title('Feature Importance',fontsize=25)\nax.tick_params(labelsize=15)\nplt.show()   ","d17c027b":"cv = StratifiedKFold(n_splits=3, random_state=None, shuffle=False)\nmodel = RandomForestClassifier(random_state=1, n_estimators=500, min_samples_split=8, min_samples_leaf=2)\nscores = cross_val_score(model, train_final, train_filled['survived'], cv=cv, n_jobs=-1)\nprint(\"Accuracy\/standard deviation: {}\/{}\".format(scores.mean(), scores.std()))","a96ea3fa":"model = RandomForestClassifier(random_state=1)\nparams = [{\n    'n_estimators': [100, 350, 500],\n    'min_samples_split': [6, 8, 10],\n    'min_samples_leaf': [2, 4, 6]\n}]\ngrid = GridSearchCV(model, params, cv=cv, refit=True, verbose=1, n_jobs=-1)\ngrid.fit(train_final, train_filled['survived'])\nbest = grid.best_estimator_\nprint('Accuracy (random forest auto): {} with params {}'\n      .format(grid.best_score_, grid.best_params_))","dda2e7ca":"model = RandomForestClassifier(random_state=1, n_estimators=500, min_samples_split=8, min_samples_leaf=2)\nmodel.fit(train_final, train_filled['survived'])\npredictions = model.predict(test_final)\nsubmission = pd.DataFrame({\n    'PassengerId': test_filled['passengerid'],\n    'Survived': predictions\n})\n\nsubmission['Survived'] = submission['Survived'].astype(int)","95b28080":"submission.to_csv('titanic_submission_ver8.csv', index=False)","bd17b076":"# 2. Creating new categories\nAs we [know](https:\/\/www.encyclopedia-titanica.org\/deck-plan-key.html), the letter in cabin number means **deck**, so we create a **'deck_id'** column, we extract digits from cabin number as well, and save it as **'cabin_id'**. Odd cabin numbers [means](https:\/\/www.encyclopedia-titanica.org\/titanic-deckplans\/b-deck.html) starboard side (right), and even cabin numbers means port side (left), so let's create **'side_id'** column. Let's extract digits and letters from ticket number as well, and save it as **'ticket_id' and 'ticket_letters**. Also we adding information about total number of **relatives**, **single** vs not single, and split the **'age' and 'fare' into categories**.","29bf0c53":"Converting some of the  categorical variables into **indicator variables**.","5c14647a":"# Titanic | One More Random Forest Solution","51af2155":"Generating an **output file** using best parameters:","a731e6f0":"# 4. Modeling\nLet's **select the features**. Let's write each feature from a new line so that it is easy to exclude it using '#':","9cf89541":"Let's evaluate the **importance of features** using the **RandomForestClassifier** algorithm:","038eba03":"Let's find out how the **features correlate to 'survived'**:\n\n([Satyabrata Roy](http:\/\/www.kaggle.com\/satyabrataroy\/40-insights-extraction-eda-titanic-dataset), Thank You!)","96e2c62e":"As we can see, several categories had the great impact on survival:\n   + gender\n   + class\n   + fare\n   + age\n   + relatives\n   + deck","68c6b965":"As we can see there are some passengers with free tickets, but they are not children, therefore, we replace the zero values with the average values, depending on the port of embarkation and class.","e19073db":"## Thank's for reading)","d4a173aa":"Let's make some **boxplots** as well:","b139c919":"Determining the **best parameters**:","3e07a435":"# 1. Filling NA's\nFor more accurate filling the missing values, we **combine** the tables. We also create a **'title'** column that contains the honorific from the 'name' column to more accurately fill in the missing age values.","0fdbe996":"Using **Cross-validation**:","3f64a967":"Let's find out how the categories **correlate** to each other:","3b13b54b":"The purpose of this work is to get familiar with machine learning basics using the Random Forest algorithm.","cf7bc6f4":"# 3. EDA\nAs we have filled NA's and have crated new categories, we can **split tables back** for analysis.","09360c48":"Let's make **histograms** to estimate the quantitative indicators of the categories. ","19b76a72":"Let's find out what most affected the **survival rate**.","7bdaca5c":"Let's create columns with **numeric equivalents** of categorical values, such as **'sex_id'**, **'embarked_id'** , **'ticket_letter_id'** and **'title_id'**.","61796703":"To achieve the best result, we can **exclude features** from the list above."}}