{"cell_type":{"286e49fd":"code","dc3d9826":"code","87f5615f":"code","74d49f10":"code","3abd7e2f":"code","fcfeb2e3":"code","97a1a8f5":"code","33ca6db5":"code","d370e139":"code","3822cb8a":"code","57365c67":"code","7bce3491":"code","7289c917":"code","e0e9eb89":"code","cb0d6d14":"code","4f3b4664":"code","fd93f0dd":"code","35d615b6":"code","cee3f947":"code","aea12308":"code","37773cfc":"code","51f697fc":"code","e5592609":"code","7e0ff626":"code","143a3ba2":"code","eb9079ee":"code","68b34a23":"code","45774c03":"code","82cf9b87":"markdown","9851ec14":"markdown","f8adcc3a":"markdown","b58bfb80":"markdown","b7eda4f9":"markdown","edd58c2d":"markdown"},"source":{"286e49fd":"import os\nimport numpy as np # linear algebra\nimport shutil","dc3d9826":"!pip install imutils\nfrom imutils import paths\nimport pandas as pd\nimport random\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nimport seaborn as sns\nimport itertools\n\n","87f5615f":"data_dir  = '..\/input\/covid19-delta-ct-14k'\ndata_list = sorted(list(paths.list_images(data_dir)))\n\nrandom.seed(99)\nrandom.shuffle(data_list)","74d49f10":"#define\nTEST_SIZE=0.14\n\n#Split the data into two groups (training\/validation and testing)\ntrain_filenames, test_filenames = train_test_split(data_list, test_size=TEST_SIZE)\n\nprint('Number of Train\/Valid data:',len(train_filenames))\nprint('Number of Test data ------:',len(test_filenames))","3abd7e2f":"#Create Temporary folder and directories for data:\n\n!mkdir \/tmp\/Covid_CT\n\n!mkdir \/tmp\/Covid_CT\/train_data\n!mkdir \/tmp\/Covid_CT\/train_data\/COVID\n!mkdir \/tmp\/Covid_CT\/train_data\/Non_COVID\n\n!mkdir \/tmp\/Covid_CT\/test_data\n!mkdir \/tmp\/Covid_CT\/test_data\/COVID\n!mkdir \/tmp\/Covid_CT\/test_data\/Non_COVID\n\n!ls '\/tmp\/Covid_CT\/train_data'","fcfeb2e3":"#Pipeline: convert each image to grayscale for Homogenization, repeat the layer to\n#prepare for base model as a RGB image and finally save them.\n\n#train filenames:\nf=0\nfor img in train_filenames: \n    i = cv2.imread(img)\n    i = cv2.cvtColor(i,cv2.COLOR_BGR2GRAY)        \n    rgb = np.repeat(i[..., np.newaxis], 3, -1)      \n    if (img.split(os.path.sep)[4] == 'COVID'):\n        cv2.imwrite(\"\/tmp\/Covid_CT\/train_data\/COVID\/p\"+str(f)+\".jpg\",rgb)\n    if (img.split(os.path.sep)[4] == 'Non_COVID'):\n        cv2.imwrite(\"\/tmp\/Covid_CT\/train_data\/Non_COVID\/n\"+str(f)+\".jpg\",rgb)\n    f+=1  \n#test filenames:\nf=0\nfor img in test_filenames: \n    i = cv2.imread(img)\n    i = cv2.cvtColor(i,cv2.COLOR_BGR2GRAY)\n    rgb = np.repeat(i[..., np.newaxis], 3, -1)      \n    if (img.split(os.path.sep)[4] == 'COVID'):\n        cv2.imwrite(\"\/tmp\/Covid_CT\/test_data\/COVID\/p\"+str(f)+\".jpg\",rgb)\n    if (img.split(os.path.sep)[4] == 'Non_COVID'):\n        cv2.imwrite(\"\/tmp\/Covid_CT\/test_data\/Non_COVID\/n\"+str(f)+\".jpg\",rgb)\n    f+=1","97a1a8f5":"#print the number of all the data:\n\nCOUNT_COVID= len(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/COVID'))) + len(list(paths.list_images('\/tmp\/Covid_CT\/test_data\/COVID')))\nCOUNT_Non_COVID= len(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/Non_COVID'))) + len(list(paths.list_images('\/tmp\/Covid_CT\/test_data\/Non_COVID')))\n\ndata = {'Cases':['COVID-19', 'Non-COVID-19'],\n        'Cases_count':[COUNT_COVID, COUNT_Non_COVID]\n       }\n\ndf = pd.DataFrame(data)\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(10,8))\nsns.barplot(x=df.index, y= df['Cases_count'].values)\nplt.title('Number of All the Data', fontsize=14)\nplt.xlabel('Case type', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.xticks(range(len(df.index)), ['COVID-19', 'Non-COVID-19'])\nplt.show()\n\nprint(df)","33ca6db5":"#print the details of each directory:\n\nprint('Number of train images :',len(list(paths.list_images('\/tmp\/Covid_CT\/train_data'))))\nprint('Covid-19 ------------- :',len(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/COVID'))))\nprint('Non-Covid-19 --------- :',len(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/Non_COVID'))))\nprint('\\n')\nprint('Number of test images :',len(list(paths.list_images('\/tmp\/Covid_CT\/test_data'))))\nprint('Covid-19 ------------ :',len(list(paths.list_images('\/tmp\/Covid_CT\/test_data\/COVID'))))\nprint('Non-Covid-19 -------- :',len(list(paths.list_images('\/tmp\/Covid_CT\/test_data\/Non_COVID'))))","d370e139":"#create sample data and show them:\n\nsample_imgs=[]\nsample_labels=[]\n\ntmp = sorted(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/COVID')))\nrandom.shuffle(tmp)\nfor X in tmp[:4]:\n    sample_imgs.append(cv2.imread(X))\n    sample_labels.append('COVID-19')\n        \ntmp = sorted(list(paths.list_images('\/tmp\/Covid_CT\/train_data\/Non_COVID')))\nrandom.shuffle(tmp)\nfor X in tmp[:4]:\n    sample_imgs.append(cv2.imread(X))\n    sample_labels.append('Non-COVID-19')     \n\n\nfor i in range(0, 8):\n    plt.subplot(2 , 4 , i+1)\n    plt.imshow(sample_imgs[i+0])\n    plt.title(sample_labels[i+0])\n    plt.xticks([]),plt.yticks([])\n    # show the plot\nplt.show()\n\n#sample_imgs = np.asarray(sample_imgs)\n#print(sample_imgs.shape)","3822cb8a":"#set the directories \nTRAIN_DATA_DIR = \"\/tmp\/Covid_CT\/train_data\"\nTEST_DATA_DIR  = \"\/tmp\/Covid_CT\/test_data\"","57365c67":"#defines \n\nIMG_HIGHT, IMG_WIDTH = 255,255\nBATCH_SIZE = 32\nVALID_SPLIT = 0.17","7bce3491":"#set the Pipeline with ImageDataGenerator(real-time data augmentation)\ndatagen = ImageDataGenerator(validation_split= VALID_SPLIT,      #Split Validation\n                             rescale=1.\/255,                    #Rescale to float\n                             #featurewise_center=True,\n                             #featurewise_std_normalization=True, \n                             samplewise_center=True,            #Set each sample mean to 0.\n                             samplewise_std_normalization=True, #Divide each input by its std. \n                             vertical_flip=True,                #Augmentation\n                             horizontal_flip=True,              #Augmentation\n                             rotation_range=30                  #Augmentation,random rotations.\n)\n#datagen.fit(sample_imgs)\n#print(datagen.mean)\n#print(datagen.std)","7289c917":"#set the Training and Vaidation Generators:\n\nTRAIN_GEN = datagen.flow_from_directory(\n            TRAIN_DATA_DIR,\n            target_size=(IMG_HIGHT, IMG_WIDTH),\n            batch_size=BATCH_SIZE,\n            class_mode='binary',\n            subset='training',\n            shuffle=True,\n            #color_mode=\"grayscale\",\n            seed=99\n)\nVALID_GEN = datagen.flow_from_directory(\n            TRAIN_DATA_DIR,\n            target_size=(IMG_HIGHT, IMG_WIDTH),\n            batch_size=BATCH_SIZE,\n            class_mode='binary',\n            subset='validation',\n            shuffle=True,\n            #color_mode=\"grayscale\",\n            seed=99\n)","e0e9eb89":"#Show random picture after the Augmentation and Normalization:\n\nfor X_batch, y_batch in TRAIN_GEN:\n    print(len(y_batch))\n    # create a grid of 3x3 images\n    for i in range(0, 4):\n        plt.subplot(2 , 2 , i+1)\n        plt.imshow(X_batch[i])\n        plt.title('COVID' if y_batch[i]==0 else 'Non_COVID')\n        plt.xticks([]),plt.yticks([])\n    # show the plot\n    plt.show()\n    break","cb0d6d14":"#create the pipeline and generator for Test data:\n\nt_datagen = ImageDataGenerator(rescale=1.\/255,\n                               #featurewise_center=True,\n                               #featurewise_std_normalization=True\n                               samplewise_std_normalization=True,\n                               samplewise_center=True\n)\n\nTEST_GEN = t_datagen.flow_from_directory(\n    TEST_DATA_DIR,\n    target_size=(IMG_HIGHT, IMG_WIDTH),\n    batch_size=2028,\n    class_mode='binary',\n    shuffle=True,\n    seed=99\n)","4f3b4664":"#defines:\n\nLEARNING_RATE = 0.00001\nEPOCHS = 30\nLOSS = 'sparse_categorical_crossentropy'\nMETRIC = 'accuracy'","fd93f0dd":"#set the model:\n\nbase = tf.keras.applications.resnet.ResNet152(\n        include_top=False,\n        weights='imagenet',\n        input_shape=(IMG_HIGHT, IMG_WIDTH, 3)\n)\n\nx = base.output\n\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.BatchNormalization()(x)\n\nx = tf.keras.layers.Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-5, l2=1e-4))(x)\nx = tf.keras.layers.Dropout(0.2)(x)\nx = tf.keras.layers.BatchNormalization()(x)\n\nx = tf.keras.layers.Dense(128, activation='relu',kernel_initializer='he_uniform')(x)\ny = tf.keras.layers.Dropout(0.3)(x)\n\nprediction = tf.keras.layers.Dense(2, activation='softmax')(y)\n\nmodel = Model(inputs= base.input, outputs= prediction)\n#model.summary()","35d615b6":"#Compile the model:\n\nmodel.compile(optimizer = Adam(learning_rate=LEARNING_RATE, beta_1=0.9, beta_2=0.999, epsilon=1e-08),\n              loss      = LOSS,\n              metrics   = [METRIC])","cee3f947":"STEP_SIZE_TRAIN=TRAIN_GEN.n\/\/TRAIN_GEN.batch_size\nprint('full steps number:', STEP_SIZE_TRAIN)\n\nearly = tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=5) #early stopping","aea12308":"#Train the model:\n\ntrainer= model.fit(TRAIN_GEN,\n                   validation_data= VALID_GEN,\n                   epochs=EPOCHS,\n                   steps_per_epoch=300,\n                   verbose=2,\n                   callbacks=[early])","37773cfc":"# Plotting train_loss vs val_loss:\n\nplt.figure(figsize=(10,5))\nplt.plot(trainer.history[\"loss\"],label=\"loss\")\nplt.plot(trainer.history[\"val_loss\"],label=\"val_loss\")\nplt.legend()","51f697fc":"# Plotting train_accuracy vs Val_accuracy:\n\nplt.figure(figsize=(10,5))\nplt.plot(trainer.history[\"accuracy\"],label=\"accuracy\")\nplt.plot(trainer.history[\"val_accuracy\"],label=\"val_accuracy\")\nplt.legend(loc='upper left')","e5592609":"for X_batch, y_batch in TEST_GEN:\n    y_test = y_batch\n    X_test = X_batch\n    break\n    \nprint('test label shape',y_test.shape)\nprint('test image shape',X_test.shape)\nprint('Evaluate on test-data:')\nmodel.evaluate(X_test,y_test)","7e0ff626":"pred = model.predict(X_test)\nbin_predict = np.argmax(pred,axis=1)\n\n#Confusion matrix:\nmatrix = confusion_matrix(y_test, bin_predict)\nprint('Confusion Matrix:\\n',matrix)","143a3ba2":"#Plot the Confusion matrix:\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n    sns.set(style=\"dark\")\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\n Accuracy={:0.4f}; Misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()\n\n    \nplot_confusion_matrix(cm           = np.array(matrix), \n                      normalize    = False,\n                      target_names = ['COVID-19','Non-COVID-19'],\n                      title        = \"Confusion Matrix\")\n\nplot_confusion_matrix(cm           = np.array(matrix), \n                      normalize    = True,\n                      target_names = ['COVID-19','Non-COVID-19'],\n                      title        = \"Confusion Matrix, Normalized\")","eb9079ee":"class_metrics = metrics.classification_report(y_test,bin_predict,labels=[0, 1])\nprint(class_metrics)","68b34a23":"FP = matrix.sum(axis=0) - np.diag(matrix)\nFN = matrix.sum(axis=1) - np.diag(matrix)\nTP = np.diag(matrix)\nTN = matrix[:].sum() - (FP + FN + TP)\n\nTPR = TP\/(TP+FN)\nTNR = TN\/(TN+FP) \nPPV = TP\/(TP+FP)\nNPV = TN\/(TN+FN)\nFPR = FP\/(FP+TN)\nFNR = FN\/(TP+FN)\nFDR = FP\/(TP+FP)\n\nACC = (TP+TN)\/(TP+FP+FN+TN)\n\nprint('Other Metrics:')\nMAE = mean_absolute_error(y_test, bin_predict)\n\nprint('MAE:', MAE)\nprint('Accuracy:', ACC)\nprint('Precision (positive predictive value):', PPV)\nprint('Recall (Sensitivity, hit rate, true positive rate):', TPR)\nprint('Specificity (true negative rate):', TNR)\nprint('Negative Predictive Value:', NPV)\nprint('Fall out (false positive rate):', FPR)\nprint('False Negative Rate:', FNR)\nprint('False discovery rate:', FDR)","45774c03":"model.save_weights('weights_MLP.h5')\n","82cf9b87":"# A Deep CNN-Based model for COVID-19 Detection.\u00b6\n\n> M Amir Eshraghi","9851ec14":"**1- Data preparation**\n","f8adcc3a":"**2- Create pre-processing and augmentation pipeline**\n","b58bfb80":"**4- Results**","b7eda4f9":"Deep CNN-Based for COVID-19 Detection Using Multiple Lung CT Scans. (Classes: Covid-19, Non-Covid-19)\n\n\u00a9 Proposed Method Implementation by **M Amir Eshraghi**.\n\nThis code is part of the new study and the the article will be referenced after the publication.\n\nOct 2021 \/ Mashhad, Iran.\n","edd58c2d":"**3- Create the Model**\n\n"}}