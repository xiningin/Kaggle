{"cell_type":{"e75485ee":"code","9b550f0c":"code","d4baa26e":"code","634619d8":"code","70698164":"code","67d5b50c":"code","2932df82":"code","fab6df40":"code","a0ef2782":"code","b91ee38e":"code","ab0f8ad8":"code","53efe5b5":"code","56f749a5":"code","10fc50a8":"code","aefd95de":"code","eaaadba5":"code","e1ce1516":"code","39fa006c":"code","fd23a6cf":"code","82bef954":"code","4373d0e4":"code","1f8a4e28":"code","131da5fe":"code","21e5f107":"code","4787595e":"markdown","2d5a40c0":"markdown","21c207a7":"markdown"},"source":{"e75485ee":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt","9b550f0c":"column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\ndata = pd.read_csv('..\/input\/boston-house-prices\/housing.csv', header=None, delimiter=r\"\\s+\", names=column_names)\nprint(data.head(5))","d4baa26e":"data.describe()","634619d8":"data.info()","70698164":"data.isnull().sum()","67d5b50c":"corrmat = data.corr()\ncorrmat","2932df82":"def getCorrelatedFeature(corrmat, threshold):\n  feature = []\n  value = []\n\n  for i, index in enumerate(corrmat.index):\n    if abs(corrmat[index])> threshold:\n      feature.append(index)\n      value.append(corrmat[index])\n\n  df = pd.DataFrame(data = value, index = feature, columns = ['Corr value'])\n  return df","fab6df40":"threshold = 0.50\ncorr_value = getCorrelatedFeature(corrmat['MEDV'], threshold)\ncorr_value","a0ef2782":"corr_value.index.values","b91ee38e":"correlated_data = data[corr_value.index]\ncorrelated_data.head()","ab0f8ad8":"sns.pairplot(correlated_data)\nplt.tight_layout()","53efe5b5":"sns.heatmap(correlated_data.corr(), annot=True, fmt=\".2\")","56f749a5":"from sklearn.model_selection import train_test_split\n\nx = correlated_data.drop(labels=['MEDV'], axis = 1)\ny = correlated_data['MEDV']\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=101)","10fc50a8":"X_train.shape, X_test.shape","aefd95de":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)","eaaadba5":"y_predict = model.predict(X_test)","e1ce1516":"df = pd.DataFrame(data = [y_predict, y_test])\ndf.T","39fa006c":"from sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nscore = r2_score(y_test, y_predict)\nmae = mean_absolute_error(y_test, y_predict)\n\nprint('r2_score: ', score)\nprint('mae: ', mae)","fd23a6cf":"from math import sqrt\n\nrms_LR = sqrt(mean_squared_error(y_test, y_predict))\nmse_LR = mean_squared_error(y_test, y_predict)\n\nprint('RMSE: ',rms_LR)\nprint('MSE: ',mse_LR)","82bef954":"from sklearn.tree import DecisionTreeRegressor\n\nDT = DecisionTreeRegressor()\nDT.fit(X_train, y_train)\nDT_pred = DT.predict(X_test)","4373d0e4":"rms_DT = sqrt(mean_squared_error(y_test, DT_pred))\nmse_DT = mean_squared_error(y_test, DT_pred)\n\nprint('RMSE: ',rms_DT)\nprint('MSE: ',mse_DT)","1f8a4e28":"from sklearn.ensemble import RandomForestRegressor\n\nRF = RandomForestRegressor()\nRF.fit(X_train, y_train)\nRF_pred = RF.predict(X_test)","131da5fe":"rms_RF = sqrt(mean_squared_error(y_test, RF_pred))\nmse_RF = mean_squared_error(y_test, RF_pred)\n\nprint('RMSE: ',rms_RF)\nprint('MSE: ',mse_RF)","21e5f107":"import pandas as pd\n\ncars = {'Model': ['Linear Regression','Decision Tree Regressor','RandomForest Regressor'],\n        'RMSE': [6.2868,5.7399,5.1294], 'MSE': [39.5243,32.9464,26.3107]}\n\ndf = pd.DataFrame(cars, columns = ['Model', 'RMSE', 'MSE'])\n\nprint (df)","4787595e":"Linear Regression","2d5a40c0":"RandomForest Regressor","21c207a7":"Decision Tree Regressor"}}