{"cell_type":{"c7278715":"code","1da23488":"code","bb2e53e0":"code","5f837bcb":"code","f9809af7":"code","933edc85":"code","85c95542":"code","004d120b":"code","815597eb":"code","ebd7929a":"code","5780daed":"code","f61b5f8f":"code","99253cd3":"code","bbf27aef":"code","d4dd0f14":"code","306ab5ab":"code","f90f7b90":"code","bb67dfb8":"code","b14f4e8c":"code","ecc55f63":"code","7a6265f3":"code","908688ad":"code","c41bec45":"code","9b32f416":"code","73b65c4f":"code","dde95a2d":"code","8961adcb":"code","8feb9cfb":"code","e6b70469":"code","504e4a1b":"code","8ed4cbf7":"code","e9e4d349":"code","4ff58d20":"code","2c5ca204":"code","ca312925":"code","c499dfcc":"code","bb422db7":"code","94142de9":"code","2b1f18a4":"code","0cc4e3b4":"code","9a074f13":"code","4cac58ba":"code","1de15706":"code","3ca10d06":"code","7abe32eb":"code","0fac174c":"markdown","2fb70d70":"markdown","d4d9d2b0":"markdown","3e4dbda1":"markdown","907ddb3b":"markdown","0645a3db":"markdown","3a44b9d1":"markdown","e42d570b":"markdown","3551db26":"markdown","afbb901c":"markdown","b420e53f":"markdown","694201ca":"markdown"},"source":{"c7278715":"import pandas as pd\npd.set_option('display.max_columns', 20)\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")               # Let's merge movie and rating \ndf.head()\n","1da23488":"df.shape                                                          # (20000797 rows,  6 columns)\ndf[\"title\"].nunique()                                             # A number of unique movies: 27262\ndf[\"title\"].value_counts().head()                                 # Number of ratings of movies\nrating_counts = pd.DataFrame(df[\"title\"].value_counts())          # Let's convert into the DataFrame.And let's assign as rating_counts\nrare_movies = rating_counts[rating_counts[\"title\"] <= 10000].index # Let's find rare movies.Movies with 10000 and below ratings are rarely watched.\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]                # So, finding the common movies are not thoug.\ncommon_movies.shape                                               # Now, except rare_movies, 12865877 rows left.\ncommon_movies[\"title\"].nunique()                                  # Now, except rare_movies, 462 movies left.","bb2e53e0":"user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df.head()   ##Using pivot method to view common_movies well","5f837bcb":"#We observe the 138493 users and 462 movies\nuser_movie_df.shape             ","f9809af7":"#We verify that the same number of the movies number\nlen(user_movie_df.columns)       ","933edc85":"#Let's keep the user 108170 as our_user_df\nour_user_df= user_movie_df[user_movie_df.index == 108170.0]    ","85c95542":"#We do not need movies which is not watched by our user.\nmovies_watched=our_user_df.columns[our_user_df.notna().any().tolist()]    ","004d120b":"#Let's have a look how many movies were watched by our user. 139 :)\nlen(movies_watched)    ","815597eb":"#Let's add movies_watched to movies_watched_df\nmovies_watched_df = user_movie_df[movies_watched]   ","ebd7929a":"movies_watched_df   ","5780daed":"#we removed NaN values.\nuser_movie_count = movies_watched_df.T.notnull().sum()   ","f61b5f8f":"#we solved the index problem.\nuser_movie_count = user_movie_count.reset_index()       ","99253cd3":"#we renamed the column names.\nuser_movie_count.columns = [\"userId\", \"movie_count\"]    ","bbf27aef":"#Let's have a look \"user_movie_count\"\nuser_movie_count.head()                                 ","d4dd0f14":"del df","306ab5ab":"#Users who watched 60 percent and above in 166 movies watched the same movies with our user.\nr=len(movies_watched) *60\/100           \nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > r][\"userId\"]","f90f7b90":"users_same_movies.head()","bb67dfb8":"#We see that there are 4902 users according to the rule above\nusers_same_movies.count()           \n","b14f4e8c":"#So, let's see the index of these users. We see totally 4902 user's indexes.\nusers_same_movies.index                 ","ecc55f63":"#we concat the our_user_df and movies_wathed_df\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],our_user_df[movies_watched]])\nfinal_df.head()","7a6265f3":"#We get the user as columns and use corr method. We see the correlation of each user with each other\nfinal_df.T.corr()   ","908688ad":"#we apply the corresponding methods\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()","c41bec45":"corr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1','user_id_2']\ncorr_df = corr_df.reset_index()","9b32f416":"corr_df.head()  ","73b65c4f":"#If the user_id_1 in corr_df is equal to 108170 which is our user, and the corr value is 0.50 and above,\n# this is the closest user for us.\ntop_users = corr_df[(corr_df[\"user_id_1\"] == 108170) & (corr_df[\"corr\"] >= 0.50)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)","dde95a2d":"top_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)","8961adcb":"#Let's observe the top users that are closest to our user (userId:108170)\ntop_users ","8feb9cfb":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","e6b70469":"#we merged top_users and rating\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')  \ntop_users_ratings.head()","504e4a1b":"# Except our user 108170\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != 108170]               ","8ed4cbf7":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()","e9e4d349":"# Let's use groupby on movieId and find the mean of weighted_rating\ntop_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})","4ff58d20":"# Let's assign as recommendation_df\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nrecommendation_df.head()","2c5ca204":"# We see the 11943 movies which is suggested.\nrecommendation_df[[\"movieId\"]].nunique() ","ca312925":"#Let's get the most weighted_rating movies above 2.5\nrecommendation_df[recommendation_df[\"weighted_rating\"] > 2.5] ","c499dfcc":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 2.5].sort_values(\"weighted_rating\", ascending=False)","bb422db7":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')","94142de9":"#Finally we see the first 5 recommended movies for our user\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]]).head(5) ","2b1f18a4":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","0cc4e3b4":"user = 108170\nmovie_id=rating[(rating[\"userId\"]==user) & (rating[\"rating\"]==5.0)].sort_values(by=\"timestamp\", ascending=False)[\"movieId\"][0:1].values[0]   ","9a074f13":"movie_id","4cac58ba":"#Let's see movie_id : 7044 is which movie.\ndef check_movie_id (dataframe,movie_id ):\n   movie_name=dataframe[dataframe[\"movieId\"]==movie_id][[\"title\"]].values[0].tolist()\n   print(movie_name)\n\ncheck_movie_id(movie, movie_id) ","1de15706":"movie_name= movie[movie[\"title\"]==\"Wild at Heart (1990)\"]\nmovie_name = user_movie_df[movie_name]","3ca10d06":"# Let's see the 5 movies closest to movie_name\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(5)","7abe32eb":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 2.5].sort_values(\"weighted_rating\", ascending=False)\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"].head(5)\n","0fac174c":"\n**Hybrid Movie Recommender**\n\n*Business Problem*\n\nMaking an recommendation using the item-based and user-based recommender\nmethods for the user whose ID is given.\n\n*Story of Dataset*\n\nThe dataset is provided by MovieLens, a movie recommendation service.\nIt includes the rating points which is given for movies and the movies.\nDataset contains 2,000,0263 ratings on 27,278 movies.\nThis data was collected by 138,493 users between 09.01.1995 and 31.03.2015.\nDataset was published on October 17, 2016. Users were randomly selected.\nThere is an information that all selected users have voted for at least 20 movies.\n\n*Variables of Dataset*\n\nMovie.csv\n* MovieId: A unique number for each movie\n* Title: Movie name\n\nRating.csv\n\n* Userid: A unique number for each user\n* MovieId: A unique number for each movie\n* Rating: The rating which is given by user to the movie\n* Timestamp: Evaluation date\n\nNOTE: The UserId which is given to us: 108170","2fb70d70":"Let's observe how many users watched the same movies at least once a time with our user. As we see that 166 movies title is in the columns and 138493 users in the rows.","d4d9d2b0":"Accessing the data and IDs of other users watching the same movies","3e4dbda1":"**Creating User Movie Df**","907ddb3b":"The last time the user gave the highest rating out of the movies he watched\nmaking an item-based suggestion based on the name of the movie.","0645a3db":"As we see below, we need most positive corelations in the corr columns.\nThe closer the Corr value is to 1, the more similarities there are. So minus corr not needed.","3a44b9d1":"User based suggestion","e42d570b":"Determining the most similar users with our user (Our UserId: 108170)","3551db26":"Calculating weighted average recommendation score and keeping first 5 movies.\n\nwe calculated it as weighted average score = corr * rating\n\nand assigned it to top_users_rating as a variable","afbb901c":"Item based suggestion","b420e53f":"Determining the movies watched by the user to whom the recommendation will be made. (UserId: 108170)","694201ca":"**Preparing Datasets**"}}