{"cell_type":{"dc385297":"code","05b1afc1":"code","c4ccaece":"code","0b694d6c":"code","f026977e":"code","761a22f2":"code","2428d9c2":"code","17399e28":"code","9ce2318b":"code","182bdf34":"code","0e6b17bc":"code","6aae3b8b":"code","ecd30577":"code","11083384":"code","aa50f061":"code","503edbfc":"code","e47a3c75":"code","4f306f27":"code","e29c4bd5":"code","32fcac0f":"code","39c2f041":"code","1eb148d1":"code","6e304da8":"code","6d40fa27":"code","bec42f37":"code","2691bf38":"markdown","c222df18":"markdown","7ddef772":"markdown","887d1053":"markdown","1bce8098":"markdown","3bbaff6a":"markdown","9e88e0f7":"markdown","092618bb":"markdown","bd2af9c1":"markdown","2f0c90cf":"markdown","5afcbab2":"markdown","a372a99b":"markdown","c7f1b1f3":"markdown","ff23838f":"markdown","fad96aad":"markdown","53358548":"markdown","ef60f2fd":"markdown","1d2ffaa9":"markdown","95d4a6e9":"markdown","3f721cb5":"markdown","7e62f5ee":"markdown","f1191343":"markdown"},"source":{"dc385297":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","05b1afc1":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf","c4ccaece":"numerical_features = ['age','trtbps','chol','thalachh','oldpeak']\ncategorical_features = ['sex','cp','fbs','restecg','exng','slp','caa','thall']","0b694d6c":"plt.figure(figsize=(8,6))\nsns.countplot(x=df['output']);","f026977e":"df.describe()","761a22f2":"_,ax = plt.subplots(1,2,figsize=(14,6))\n\nsns.histplot(data=df,x='age',hue='output',kde=True,ax=ax[0])\nsns.boxplot(data=df,y='age',x='output',ax=ax[1])","2428d9c2":"sns.countplot(data=df,x='sex',hue='output')","17399e28":"_,ax = plt.subplots(2,2,figsize=(16,10))\nfor i,x in enumerate(['trtbps','chol','thalachh','oldpeak']):\n    sns.histplot(data=df,x=x,hue='output',kde=True,ax=ax[i%2][i\/\/2])\n    ","9ce2318b":"_,ax = plt.subplots(4,2,figsize=(16,15))\nfor i,x in enumerate(['cp','fbs','restecg','exng','slp','caa','thall']):\n    sns.histplot(data=df,x=x,hue='output',kde=True,ax=ax[i%4][i\/\/4])","182bdf34":"df.isna().sum()","0e6b17bc":"from sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","6aae3b8b":"df.dtypes","ecd30577":"df[numerical_features]=df[numerical_features].astype('float64')\ndf[categorical_features] = df[categorical_features].astype('category')","11083384":"df.dtypes","aa50f061":"num_transformer = Pipeline(steps=[('scaler',StandardScaler())])\n\ncat_transformer = Pipeline(steps=[('onehot',OneHotEncoder(handle_unknown='ignore'))])\n\ntransformer = ColumnTransformer(transformers=[\n        ('num', num_transformer, numerical_features),\n        ('cat', cat_transformer,categorical_features)])\n","503edbfc":"from sklearn.metrics import recall_score, precision_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold,train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nimport numpy as np","e47a3c75":"df_train, df_test = train_test_split(df,random_state=1)\nX_test = df_test.drop(columns=['output'])\ny_test = df_test.output","4f306f27":"X = df_train.drop(columns=['output'])\ny = df_train.output","e29c4bd5":"def print_recall(model,message=''):\n    print('-'*9)\n    print(message)\n    pipeline = Pipeline(steps=[('transformer',transformer),('model',model)])\n    print('Recall = ',round(np.mean(cross_val_score(pipeline,X,y,scoring='recall')),5))\n    print('Precision = ',round(np.mean(cross_val_score(pipeline,X,y,scoring='precision')),5))    ","32fcac0f":"print_recall(LogisticRegression(C=0.1),'LogRegres, c = 0.1')\nprint_recall(LogisticRegression(C=1),'LogRegres, c = 1')\nprint_recall(LogisticRegression(C=10),'LogRegres, c = 10')\n\nprint_recall(SVC(C=0.1),'SVC, c = 0.1')\nprint_recall(SVC(C=1),'SVC, c = 1')\nprint_recall(SVC(C=10),'SVC, c = 10')","39c2f041":"print_recall(KNeighborsClassifier(n_neighbors=3),'KNN, k = 3')\nprint_recall(KNeighborsClassifier(n_neighbors=5),'KNN, k = 5')\nprint_recall(KNeighborsClassifier(n_neighbors=8),'KNN, k = 8')\n\nprint_recall(RandomForestClassifier(min_samples_leaf=1),'Forest, 1 sample per leaf')\nprint_recall(RandomForestClassifier(min_samples_leaf=3),'Forest, 3 samples per leaf')\nprint_recall(RandomForestClassifier(min_samples_leaf=5),'Forest, 5 samples per leaf')","1eb148d1":"pipeline = Pipeline(steps=[('transformer',transformer),('model',LogisticRegression(C=0.1))])","6e304da8":"prob = 0.0\nfor p in np.linspace(0.5,0,100):\n    kfold = KFold()\n    recall = list()\n    precision = list()\n    for train_idx,test_idx in kfold.split(X):\n        pipeline.fit(X.iloc[train_idx],y.iloc[train_idx])\n        proba = pipeline.predict_proba(X.iloc[test_idx])\n        predictions = proba[:,1] >= p\n        recall.append(recall_score(y.iloc[test_idx],predictions))\n        precision.append(precision_score(y.iloc[test_idx],predictions))\n\n    if np.mean(recall) > 0.95:\n        prob = p\n        print('p = ', p)\n        print('Recall = ', np.mean(recall))\n        print('Precision = ', np.mean(precision))\n        break","6d40fa27":"pipeline.fit(X,y);","bec42f37":"proba = pipeline.predict_proba(X_test)\npredictions = proba[:,1] >= prob\nprint('Recall = ',recall_score(y_test,predictions))\nprint('Precision = ',precision_score(y_test,predictions))","2691bf38":"The first thing I want to do is to separate categorical and numerical features because later we will need to make some transformations and plot some graphs.","c222df18":"Looks like our transformer is ready now we can make some models.","7ddef772":"From graph below we see strange thing - median age of people that are more likely to have heart attack is lower then median age of people that are less likely.","887d1053":"Let's look on how balanced our target variable is.","1bce8098":"As we see we need threshold ~ 0.39 to get recall = 0.95 let's check results on test set.","3bbaff6a":"In this data we don't have missing values.","9e88e0f7":"We see that there is no disbalance in target variable.\n\nIt is also nice practice to look on statistics and distributions of our features.","092618bb":"# Missing values","bd2af9c1":"Let's now focus on logistic regression and try to get recall equal to 0.95","2f0c90cf":"We want to scale our data to make all variables have similar values range. To do this we can't simply scale all data because this will lead to data leakage when we will be evaluating our model, so we have to split data on train and test set.\n\nEncoding is used to transform (categorical) data so that model can understand it, I will use OneHotEncoding since this is ont of the best choices for linear models.\n\nI will make pipeline for transformations using ColumnTransformer to do this I need to specify columns dtype to choose appropriate transformation for them.","5afcbab2":"From this graphs we can make conclusion that feature fbs might not be useful. To check this we can make two models first with this feature and  second without.","a372a99b":"# Scaling and Encoding","c7f1b1f3":"In this section we will look on dependency between target variable and features.","ff23838f":"# Introduction\nIn this task we have to classify whether person is likely to get heart attack, metric we want to maximize is recall (because we want to find all persons that are likely to get heart attack).\n\n    Age : Age of the patient\n\n    Sex : Sex of the patient\n\n    exang: exercise induced angina (1 = yes; 0 = no)\n\n    ca: number of major vessels (0-3)\n\n    cp : Chest Pain type chest pain type\n        Value 1: typical angina\n        Value 2: atypical angina\n        Value 3: non-anginal pain\n        Value 4: asymptomatic\n\n    trtbps : resting blood pressure (in mm Hg)\n\n    chol : cholestoral in mg\/dl fetched via BMI sensor\n\n    fbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\n    rest_ecg : resting electrocardiographic results\n        Value 0: normal\n        Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n        Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\n    thalach : maximum heart rate achieved\n\n    target(output) : 0= less chance of heart attack 1= more chance of heart attack\n","fad96aad":"# Imports & Read Data","53358548":"From the graphs we see that all this features might be useful.\n\nNow let's look on distribution of categorical variables. ","ef60f2fd":"# Modeling","1d2ffaa9":"# Univariate analysis","95d4a6e9":"Well, result differs, but this is because we have small dataset so the split has huge influence on the metrcis.","3f721cb5":"We see that sex labeled as 0 is more likely to have heart attack then sex 1.","7e62f5ee":"# Bivariate analysis","f1191343":"### From here we see some useful information about our features:\n\n    1. Min age = 29, max age = 77, mean age = 54.3, from here we see that we have no information about young people.\n    2. Sex mean 0.68 means that 68% of our observations are labeled as 1 \n    3. It also looks like we have no outliers (judging by the max-min values), maybe only the observation with chol = 564 is an outlier, but I will not remove it because it is very high but still achievable value.\n    4. We can make some other conclusions about our data but they won't be obvious for me and for most people "}}