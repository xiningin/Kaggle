{"cell_type":{"74cd30e7":"code","c329150f":"code","4680fdfc":"code","be148352":"code","550c429a":"code","ca969c7c":"code","06ffa57d":"code","8a01d6aa":"code","2af6a013":"code","8e767a04":"code","61b7fea7":"code","42313f43":"code","6ff5d277":"code","4872948b":"code","19bd07d4":"code","50af8d20":"code","e1ed4250":"code","bf618111":"code","47c9c784":"code","2ce1a47e":"code","c1c60ab9":"code","44de0f85":"code","00997634":"code","8689180b":"code","a85c86db":"code","83a1d53d":"code","f62016d6":"code","db4810ef":"code","c2c0aa70":"markdown","b42a48ff":"markdown","ce722ecb":"markdown","5cd0a8fe":"markdown","5560777c":"markdown","c0b41497":"markdown","3cd8e3fc":"markdown"},"source":{"74cd30e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c329150f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4680fdfc":"X_train_full = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\",index_col='Id')\nX_test_full = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\",index_col='Id')\nX_train_full.head()","be148352":"X_train_full.isnull().sum()","550c429a":"sns.heatmap(X_train_full.isnull(),yticklabels=False,cbar=False)","ca969c7c":"X_train_full.info()","06ffa57d":"X_train_full.shape","8a01d6aa":"X_train_full.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","2af6a013":"X_train_full['LotFrontage']=X_train_full['LotFrontage'].fillna(X_train_full['LotFrontage'].mean())\nX_train_full['BsmtCond']=X_train_full['BsmtCond'].fillna(X_train_full['BsmtCond'].mode()[0])\nX_train_full['BsmtQual']=X_train_full['BsmtQual'].fillna(X_train_full['BsmtQual'].mode()[0])\nX_train_full['FireplaceQu']=X_train_full['FireplaceQu'].fillna(X_train_full['FireplaceQu'].mode()[0])\nX_train_full['GarageType']=X_train_full['GarageType'].fillna(X_train_full['GarageType'].mode()[0])\nX_train_full['GarageFinish']=X_train_full['GarageFinish'].fillna(X_train_full['GarageFinish'].mode()[0])\nX_train_full['GarageQual']=X_train_full['GarageQual'].fillna(X_train_full['GarageQual'].mode()[0])\nX_train_full['GarageCond']=X_train_full['GarageCond'].fillna(X_train_full['GarageCond'].mode()[0])","8e767a04":"X_train_full.drop(['GarageYrBlt'],axis=1,inplace=True)","61b7fea7":"sns.heatmap(X_train_full.isnull(),yticklabels=False,cbar=False)","42313f43":"X_train_full['BsmtExposure']=X_train_full['BsmtExposure'].fillna(X_train_full['BsmtExposure'].mode()[0])\nX_train_full['BsmtFinType2'].isnull().sum()","6ff5d277":"X_train_full['BsmtFinType2']=X_train_full['BsmtFinType2'].fillna(X_train_full['BsmtFinType2'].mode()[0])\nX_train_full.info()","4872948b":"X_train_full['BsmtExposure']=X_train_full['BsmtExposure'].fillna(X_train_full['BsmtExposure'].mode()[0])\nX_train_full['BsmtFinType1']=X_train_full['BsmtFinType1'].fillna(X_train_full['BsmtFinType1'].mode()[0])\nX_train_full['BsmtFinType2']=X_train_full['BsmtFinType2'].fillna(X_train_full['BsmtFinType2'].mode()[0])\nX_train_full['MasVnrType']=X_train_full['MasVnrType'].fillna(X_train_full['MasVnrType'].mode()[0])\nX_train_full['MasVnrArea']=X_train_full['MasVnrArea'].fillna(X_train_full['MasVnrArea'].mode()[0])","19bd07d4":"X_train_full.dropna(inplace=True)","50af8d20":"X_train_full.head()","e1ed4250":"X_train_full.shape","bf618111":"X_test_full.info()","47c9c784":"X_test_full.drop(['Alley','PoolQC','Fence','MiscFeature','GarageYrBlt'],axis=1,inplace=True)","2ce1a47e":"sns.heatmap(X_test_full.isnull(),yticklabels=False,cbar=False)","c1c60ab9":"X_test_full.isnull().any()","44de0f85":"X_test_full['LotFrontage']=X_test_full['LotFrontage'].fillna(X_test_full['LotFrontage'].mean())\ncols=[col for col in X_test_full.columns if X_test_full[col].isnull().any()]","00997634":"for col in cols:\n    X_test_full[col]=X_test_full[col].fillna(X_test_full[col].mode()[0])","8689180b":"sns.heatmap(X_test_full.isnull(),yticklabels=False,cbar=False)","a85c86db":"X_test_full.shape","83a1d53d":"# Remove rows with missing target, separate target from predictors\nX_train_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_train_full.SalePrice              \nX_train_full.drop(['SalePrice'], axis=1, inplace=True)","f62016d6":"from sklearn.preprocessing import OneHotEncoder\n\n# Get list of categorical variables\ns = (X_train_full.dtypes == 'object')\nobject_cols = list(s[s].index)\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train_full[object_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test_full[object_cols]))\n\n# One-hot encoding removed index; put it back\nOH_cols_train.index = X_train_full.index\nOH_cols_test.index = X_test_full.index\n\n# Remove categorical columns (will replace with one-hot encoding)\nnum_X_train = X_train_full.drop(object_cols, axis=1)\nnum_X_test = X_test_full.drop(object_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\nOH_X_train = pd.concat([num_X_train, OH_cols_train], axis=1)\nOH_X_test = pd.concat([num_X_test, OH_cols_test], axis=1)","db4810ef":"from xgboost import XGBRegressor\nmodel = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                     max_depth=3, min_child_weight=0,\n                     gamma=0, subsample=0.7,\n                     colsample_bytree=0.7,\n                     objective='reg:squarederror', nthread=-1,\n                     scale_pos_weight=1, seed=27,\n                     reg_alpha=0.00006)\nmodel.fit(OH_X_train, y)\npreds_test = model.predict(OH_X_test)\n\noutput = pd.DataFrame({'Id': OH_X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","c2c0aa70":"# Drop columns with more missing values in Test Set","b42a48ff":"# Handling categorial variables","ce722ecb":"# Handling Missing Values in Training Set","5cd0a8fe":"# Fill missing values:","5560777c":"# Drop columns with more missing values in Training Set","c0b41497":"Fill missing values in test set:","3cd8e3fc":"# Handling Missing Values in Test Set"}}