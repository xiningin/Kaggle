{"cell_type":{"99aa5fd6":"code","96680f0a":"code","4966c742":"code","eb7e2b78":"code","fa013750":"code","414713f5":"code","b9be86dd":"code","d650823b":"code","0530adaf":"code","28a2ee41":"code","b9afd769":"code","f203efed":"code","c6932111":"code","13135ccb":"code","e845c637":"code","4dfa27b9":"code","47b1bdc0":"code","3c977511":"code","2b6fbdb8":"code","10977ba7":"code","e1776c24":"code","081f4fa8":"code","d685eee5":"code","1d6693ae":"code","cb30022f":"code","f5ca1851":"code","2644aab1":"code","e05d172e":"code","01bb5ee7":"code","c3a87f74":"code","bf541d86":"code","7bc4631d":"code","0def2d3e":"code","117a9f2c":"code","47a82eb1":"code","3ab3020d":"markdown","90023c08":"markdown","ff52c372":"markdown","833ff375":"markdown","0b1cdc73":"markdown","806fe25c":"markdown","902c834b":"markdown","56eb7756":"markdown"},"source":{"99aa5fd6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96680f0a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","4966c742":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","eb7e2b78":"edu = pd.read_csv('\/kaggle\/input\/data-science-lab\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","fa013750":"edu.head()\n","414713f5":"edu.tail()\n","b9be86dd":"edu.describe()","d650823b":"edu['Value']","0530adaf":"edu[10:14]","28a2ee41":"edu.iloc[90:94][['TIME','GEO']]","b9afd769":"edu[edu['Value'] > 6.5].tail()","f203efed":"edu[edu['Value'] > 6.5]","c6932111":"edu[edu[\"Value\"].isnull()].head()\n","13135ccb":"edu.max(axis = 0)","e845c637":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","4dfa27b9":"s = edu[\"Value\"]\/100\ns.head()","47b1bdc0":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","3c977511":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","2b6fbdb8":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","10977ba7":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","e1776c24":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","081f4fa8":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","d685eee5":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","1d6693ae":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","cb30022f":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","f5ca1851":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","2644aab1":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","e05d172e":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","01bb5ee7":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","c3a87f74":"pivedu.loc[['Spain','Portugal'], [2006,2011]]\n","bf541d86":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","7bc4631d":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=[False], method='first').head()","0def2d3e":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","117a9f2c":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","47a82eb1":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","3ab3020d":"Q2. the result is to show the first 5 rows ","90023c08":"Q5. it displays a subset of the four rows from 90 to 93 , and the only the columns \"Time\" and \"Geo\".","ff52c372":"Q6. It displays the final five rows in the set that have a value less that 6.5 in the \"value\" column.","833ff375":"Q3. we will have the last five rows in the table","0b1cdc73":"Q1 .  rows * columns = 384 * 3","806fe25c":"Q7. Using the first method , The rank is done according to the arrangement in the data set , no constratin about the values.the table ouput depend on the order of values in the data set and neglict the gap between them and no concern about ascending \/ descending orders of values. \n\nif it is ascending false : Highest values have the lowest rank . ","902c834b":"Q6. It displays the rows that have a value less that 6.5 in the \"value\" column for the whole table. ","56eb7756":"Q4 . it displays rows with defined names and represend statistical data about the set as maximum , minimum , mean , standard deviation ... etc in the column of time and value. [](http:\/\/)"}}