{"cell_type":{"d9116942":"code","10a2d55b":"code","fdd44267":"code","d19a6450":"code","fd540b31":"code","b3d77e81":"code","65cac015":"code","bb2c0481":"code","9b967b4e":"code","32b399f7":"code","7ab7c327":"code","7df57e4c":"code","1623f2ef":"code","86837bd8":"code","915b174a":"code","3aaad8b6":"code","6d666427":"code","f658a51a":"code","41726500":"code","4e346c75":"code","d614e5f8":"code","0d649e6f":"code","f92cd6f5":"code","aee3a4f2":"code","8ac39529":"code","54a1d838":"code","2dd61b82":"code","0f33dd98":"code","a91454ea":"code","dc085102":"code","a83c5546":"code","296f92e1":"code","4057310c":"code","8ec9ba15":"code","be254dba":"code","3034ad20":"code","34860c37":"code","4e982260":"code","d2581dde":"code","3f66e6a0":"code","22bb88c9":"code","2f5c327e":"code","df1b81dd":"code","352e8cfe":"code","e5a30a51":"code","a20ac6c1":"code","45609f4b":"code","56375f3f":"code","dd270f09":"code","a6d8a104":"code","fbf8a6b6":"code","a08b5b71":"code","9cb605b9":"code","70f64f89":"code","b827634a":"code","5876bc6e":"markdown","0d49922c":"markdown","0330ad4f":"markdown","0300fbcc":"markdown","d3ce473c":"markdown","49fbda28":"markdown","3871de5c":"markdown","d7e7c1ac":"markdown"},"source":{"d9116942":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline     \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10a2d55b":"df = pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')\nmatches = pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')","fdd44267":"sns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","d19a6450":"print(f'Number of rows    = {len(matches)}')\nprint(f'Number of columns = {len(matches.columns)}')\nmatches.head()","fd540b31":"print(f'Number of rows    = {len(df)}')\nprint(f'Number of columns = {len(df.columns)}')\ndf.head()","b3d77e81":"print(df.describe())","65cac015":"print(matches.describe())#Statistical information of datset","bb2c0481":"df.info()","9b967b4e":"matches.info()  #Getting the information about the matches dataframe","32b399f7":"matches.isnull().sum()","7ab7c327":"df.isnull().sum()","7df57e4c":"matches.columns","1623f2ef":"df.columns","86837bd8":"#Dropping the column of umpires as we will not be using it for any data analysis\ndf.drop(columns=['umpire1','umpire2'], inplace=True)","915b174a":"#Finding the shape of the matches dataframe\ndf.shape","3aaad8b6":"#Finding the columns of matches dataframe\ndf.columns","6d666427":"df.team1.unique()","f658a51a":"df.isnull()","41726500":"#Using replace method in pandas library\n\ndf.team1.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\ndf.team2.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)\ndf.winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant', 'Delhi Daredevils':'Delhi Capitals'},inplace=True)","4e346c75":"df.team1.unique()","d614e5f8":"#Finding the rows where the city is NaN\ndf[df.city.isna()]","0d649e6f":"df.sample(6)","f92cd6f5":"#placing city value to Dubai where there is no value\ndf.loc[[461,462,466,468,469,474,476],'city'] = 'Dubai'","aee3a4f2":"df.loc[[461,462,466,468,469,474,476]]","8ac39529":"df[df.result != 'normal']","54a1d838":"#Finding the rows where the winner is NaN\ndf[df.winner.isna()]","2dd61b82":"#Making Bangalore as Bengaluru\ndf.city.replace({'Bangalore' : 'Bengaluru'},inplace=True)\ndf.city.unique()","0f33dd98":"#Finding the number of IPL matches played till 2019\ndf.id.count()","a91454ea":"#Finding the number of teams who played IPL till 2019\nprint(df.team1.unique())\nprint('{} different teams played the IPL from 2008-2019'.format(df.team1.unique().shape[0]))","dc085102":"#NUMBER OF MATCHES IN EACH SEASON\nnum_matches_df = df.groupby('season')[['id']].count()\nnum_matches_df","a83c5546":"#Number of matches in each season\nplt.title('Number of matches in each season',fontweight=800)\nplt.xlabel('Seasons')\nplt.ylabel('Total no. of matches')\nplt.xticks(num_matches_df.index)\nplt.bar(num_matches_df.index,num_matches_df.id,width=0.8, color=['#15244C','#FFFF48','#292734','#EF2920','#CD202D','#ECC5F2',\n               '#294A73','#242307','#158EA6','#E82865',\n               '#005DB7','#C23E25'], alpha=0.8);","296f92e1":"#Number of matches won by each team from 2008-2019\n\nwinner_df = df.groupby('winner')[['id']].count()\nwinner_df=winner_df.sort_values('id', ascending=False).reset_index()\n\nwinner_df.rename(columns = { 'id': 'matches_won','winner':'team'}, inplace = True)\nwinner_df","4057310c":"#Number of matches in each season\nplt.title('Number of matches won by each team from 2008-2019',fontweight=800)\nplt.xlabel('Teams')\nplt.ylabel('Total no. of matches won')\nplt.xticks(rotation=90,fontsize=10)\nplt.bar(winner_df.team,winner_df.matches_won, color=['#15244C','#FFFF48','#292734','#EF2920','#CD202D','#ECC5F2',\n               '#294A73','#D4480B','#242307','#FD511F','#158EA6','#E82865',\n               '#005DB7','#C23E25','#E82878'], alpha=0.8)","8ec9ba15":"#COMPARISON BETWEEN MATCHES PLAYED AND MATCHES WON BY EACH TEAM\n\n#Total Number of matches played by each team\nmatches_team = pd.concat([df['team1'],df['team2']])\nmatches_team_df=matches_team.value_counts().reset_index()  \n#value_counts() return a Series containing counts of unique values.\n#Series.reset_index() function generate a new DataFrame or Series with the index reset\n\nmatches_team_df.columns=['team','total_matches']   #Make two Columns Teams and Total Matches\nmatches_team_df.set_index('team',inplace=True)     #Sets Team as index\nmerged_stats_df=matches_team_df.merge(winner_df,on='team')\nmerged_stats_df['winning_percent'] = (merged_stats_df.matches_won\/merged_stats_df.total_matches)*100\nmerged_stats_df","be254dba":"plt.title('Number of matches played vs Number of matches won',fontweight=800)\nplt.xlabel('Teams')\nplt.ylabel('Total no. of matches\/Winning Percent')\nplt.xticks(rotation=90)\nplt.bar(merged_stats_df.team,merged_stats_df.total_matches,alpha=0.4)\nplt.bar(merged_stats_df.team,merged_stats_df.matches_won, alpha=0.4)\nplt.plot(merged_stats_df.team,merged_stats_df.winning_percent,'x-r')\nplt.legend(['Winning Percent','Matches Played','Matches Won']);","3034ad20":"#MATCHES HOSTED BY EACH CITY\ncity_df = df.groupby('city')[['id']].count()\ncity_df=city_df.sort_values('id', ascending=False).reset_index()\n\ncity_df.rename(columns = { 'id': 'matches'}, inplace = True)\ncity_df","34860c37":"plt.figure(figsize=(30, 15))\nplt.title('Number of matches hosted by each city from 2008-2019',fontweight=800)\nsns.barplot(y='city', x='matches', data=city_df);","4e982260":"#Q1. Find the number of matches where toss winner is the match winner ?\nmatch_toss_winner_df = df[df['toss_winner']==df['winner']]\n\nmatch_toss_winner_df","d2581dde":"#Tie Result\nmatch_toss_winner_df = match_toss_winner_df[match_toss_winner_df.result != 'tie']\nprint('There are {} matches in the IPL played till now where toss winner is the winner of the match'.format(match_toss_winner_df.id.count()))","3f66e6a0":"#Q2. Find the number of matches where team batting first is the match winner ?\ncount_toss_winner_decision_df = match_toss_winner_df['toss_decision'].value_counts() #toss_winner decisions\ntoss_loser_match_winner_df = df[df['toss_winner']!=df['winner']] #cases where toss loser is match winner\ntoss_loser_match_winner_df = toss_loser_match_winner_df[toss_loser_match_winner_df.result != 'tie'] #Removing tie cases\ncount_toss_decision_loser_df = toss_loser_match_winner_df['toss_decision'].value_counts() #toss_loser decisions-will be reverse of toss_winner\nteam_bat_first_won =count_toss_decision_loser_df.field+count_toss_winner_decision_df.bat\nprint('Total number of matches where team batting first is the winner of the match is {}'.format(team_bat_first_won))","22bb88c9":"#Q3. Total matches played between SRH and RCB and which team won most matches ?\nMI_DC=df[((df.team1 ==\"Mumbai Indians\") & \n                   (df.team2 ==\"Delhi Capitals\")) | \n                  \n                  ((df.team2 ==\"Mumbai Indians\") & \n                   (df.team1 ==\"Delhi Capitals\"))]\nMI_DC","2f5c327e":"plt.title('MI vs DC')\nsns.countplot(x=MI_DC['winner'],palette=['#FFFF48','#15244C'])\nplt.text(-0.1,9,s=MI_DC['winner'].value_counts()['Mumbai Indians'], color='white', size=40)\nplt.text(0.95,15,s=MI_DC['winner'].value_counts()['Delhi Capitals'], color='white', size=40);","df1b81dd":"#Q4. Details of season winner and which team won most seasons? Also find the team which played most finals in IPL till 2019.\n#Creating a dataframe of final matches\nfinal_match_df = df.groupby('season').tail(1).sort_values('season').reset_index()\nfinal_match_df","352e8cfe":"final_match_df['winner'].value_counts()","e5a30a51":"plt.title('Count of Season Winners',fontweight=800)\nsns.countplot(x=final_match_df['winner'],palette=['#ECC5F2','#1C2C46','#FFFF48','#F0E1A1','#15244C','#D4480B']);","a20ac6c1":"final_match_team = pd.concat([final_match_df['team1'],final_match_df['team2']])\nfinal_match_team.value_counts()","45609f4b":"plt.title('Count of Finalists in IPL',fontweight=800)\nplt.xlabel('Teams')\nsns.countplot(x=final_match_team,palette=['#FFFF48','#1C2C46','#15244C','#CD202D','#D4480B','#ECC5F2','#EF2920','#F0E1A1','#E776CA'])\nplt.ylabel('Final Matches Played')\nplt.xticks(rotation=90);","56375f3f":"#Q5. Who are the top 10 players with most number of Man of the Match ?\nmom_count =df.groupby('player_of_match')[['id']].count()\nmom_count = mom_count.sort_values('id',ascending=False).head(10)\nmom_count","dd270f09":"plt.title(\"Top 10 Player with Most Man of the Match Awards\",fontweight=800 )\nsns.barplot(x=mom_count.index,y=mom_count.id, alpha=0.6);\nplt.xticks(rotation=90)\nplt.yticks(ticks=np.arange(0,25,5))\nplt.ylabel('No. of Awards')\nplt.xlabel('Players');","a6d8a104":"#Q6. Why number of matches are greater in 2011,2012 and 2013 ?\nteam_count=[];\nfor i in range(2008,2020):\n    team_count.append(df[df.season == i].team1.unique().shape[0])\n\nsns.barplot(x=np.arange(2008,2020),y=team_count)\nplt.title('Number of teams in each season', fontweight=800)\nplt.xlabel('Seasons')\nplt.ylabel('No. of teams')\nplt.yticks(np.arange(0,11));","fbf8a6b6":"each_season_winner = df.groupby('season')['season','winner'].tail(1)\neach_season_winner_sort = each_season_winner.sort_values('season',ascending = True)\nsns.countplot('winner', data = each_season_winner_sort)\nplt.xticks(rotation = 45, ha = 'right')\nplt.ylabel('Number of seasons won by any team.')\nplt.show()","a08b5b71":"#Top 10 Cities by Number Of matches\ncity_counts= df.groupby('city').apply(lambda x:x['city'].count()).reset_index(name='Match Counts')\ntop_cities_order=city_counts.sort_values(by='Match Counts',ascending=False)\ntop_cities=top_cities_order[:10]\nprint('Top 10 Cities with the maximum number of Matches Played:\\n',top_cities)\nplt.figure(figsize=(7,7))\nplt.pie(top_cities['Match Counts'],labels=top_cities['city'],autopct='%1.1f%%', startangle=30)\nplt.axis('equal')\nplt.title('Top Cities that have hosted IPL Matches',size=10)","9cb605b9":"#Effect of home ground:\nplt.figure(figsize = (12,6))\nvenue = df[['city','winner','season']]\nvenue_season = venue[venue['season'] == 2018]\nax = sns.countplot('city', data = venue_season, hue = 'winner' )\nplt.xticks(rotation=30, ha = 'right')\nplt.ylabel('Number of matches.')\nplt.show()","70f64f89":"#Season wise match summary of matches won by runs\nfig=plt.gcf()\nfig.set_size_inches(18.5,10.5)\nsns.swarmplot(df['season'],df[df['win_by_runs']!=0]['win_by_runs'],s=10)\nplt.xticks(rotation=90,fontsize=14)\nplt.yticks(fontsize=14)\nplt.xlabel('Season',fontsize=14)\nplt.ylabel('Runs',fontsize=14)\nplt.title('Season wise match summary of matches won by runs',fontsize=14)\nplt.show()","b827634a":"sns.pairplot(df)","5876bc6e":"# Data Analysis of IPL\nIndian Premier League (IPL) is a Twenty20 cricket format league in India. It is usually played in April and May every year. The league was founded by Board of Control for Cricket India (BCCI) in 2008. There have been twelve seasons of the IPL tournament. The current IPL title holders are the Mumbai Indians, who won the 2019 season.","0d49922c":"# DATA CLEANING","0330ad4f":"# Cleaning in Team Name:\nIn the above data, you can see there have been multiple name for the same team i.e Rising Pune Supergiants and Rising Pune Supergiant. It is due to ommission of 's'. Thus data cleaning is required for this error. 2. In the above data, you can see that there are same team with two difeerent name Delhi Daredevils and Delhi Capitals. Earlier the team's name is Delhi Daredevils but its new name is Delhi Capital.Thus data cleaning is required for this error.\nThere will be three columns where the fix will be required\n\nIn team1 column In team2 column In winner column","0300fbcc":"# LOADING THE DATASET","d3ce473c":"# print NO. OF ROW,COLUMN AND FIRST FIVE ROW","49fbda28":"# SUYASH PRATAP SINGH","3871de5c":"# Print random six row","d7e7c1ac":"# THANK YOU  "}}