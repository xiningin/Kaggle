{"cell_type":{"6e04b220":"code","a46f2e41":"code","ce46924c":"code","34d5b87b":"code","2934603c":"code","e9bbf574":"code","c280869f":"code","af4594f9":"code","554f7f0b":"code","f62aeb8f":"markdown","c2a305bb":"markdown","5bf3f4a0":"markdown","aab02cb0":"markdown","372649f5":"markdown"},"source":{"6e04b220":"import numpy as np \nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier","a46f2e41":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-oct-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv').to_pandas()","ce46924c":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","34d5b87b":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64','float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                else:\n                    df[col] = df[col].astype(np.float32)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","2934603c":"train = reduce_mem_usage(train)\ntest  = reduce_mem_usage(test)","e9bbf574":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","c280869f":"# xgboost params\nxgb_params = {\n    'max_depth': 6,\n    'n_estimators': 9500,\n    'subsample': 0.7,\n    'colsample_bytree': 0.2,\n    'colsample_bylevel': 0.6000000000000001,\n    'min_child_weight': 56.41980735551558,\n    'reg_lambda': 75.56651890088857,\n    'reg_alpha': 0.11766857055687065,\n    'gamma': 0.6407823221122686,\n    'booster': 'gbtree',\n    'eval_metric': 'auc',\n    'tree_method': 'gpu_hist',\n    'predictor': 'gpu_predictor',\n    'use_label_encoder': False\n}","af4594f9":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(test))\nxgb_oof = np.zeros(train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = XGBClassifier(**xgb_params)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, \n              y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=400,\n              verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    xgb_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","554f7f0b":"sub['target'] = predictions\nsub.to_csv(f'submission_xgboost_1.csv',index = False)\nnp.savez_compressed('oof_xgboost.npz', xgb_oof)","f62aeb8f":"# Model hyperparameters","c2a305bb":"# Imports","5bf3f4a0":"# Store submission and oof ","aab02cb0":"# 5-fold model training and prediction","372649f5":"# Load dataset"}}