{"cell_type":{"74670e39":"code","84daabc8":"code","e7303ffa":"code","ed9f220e":"code","eafc533e":"code","e0625ad0":"code","2c0da23f":"code","6bc6a4bc":"code","e20b9df1":"code","9508e131":"code","2c2d4b06":"code","0d3658d8":"code","bc8c191c":"code","13158ed5":"code","184ad784":"code","4124b193":"code","085b8746":"markdown","bb70f4bb":"markdown","693783f3":"markdown"},"source":{"74670e39":"import pandas as pd\nimport numpy as np\nimport torch\ndata = pd.read_csv('..\/input\/szeged-weather\/weatherHistory.csv')","84daabc8":"display(data)","e7303ffa":"input = np.array([data['Humidity'], data['Pressure (millibars)'],\n                 data['Wind Speed (km\/h)'], data['Wind Bearing (degrees)']],\n                 dtype=\"float32\").T\nprint(input)","ed9f220e":"target = np.array([data['Apparent Temperature (C)'], data['Temperature (C)']],\n                  dtype=\"float32\").T\nprint(target)","eafc533e":"input = torch.from_numpy(input)\ntarget = torch.from_numpy(target)\nprint(input)\nprint(target)","e0625ad0":"#declare random weight and bias\nw = torch.randn(2, 4, requires_grad=True,dtype=torch.float32)\nb = torch.randn(2, requires_grad=True, dtype=torch.float32)","2c0da23f":"# return (input*weight)+bias\ndef SModel(x):\n    return x @ w.t() + b","6bc6a4bc":"#mean absolute error\ndef MAE(t1, t2):\n    dif = torch.abs(t1 - t2)\n    return torch.sum(dif)\/dif.numel()","e20b9df1":"for i in range(30001):\n    pred = SModel(input)\n    loss = MAE(pred, target)\n    loss.backward()\n    with torch.no_grad():\n        w -= w.grad * 0.00001\n        b -= b.grad * 0.00001\n        w.grad.zero_()\n        b.grad.zero_()\n    if (i%1000==0 or i==10000):\n        print(\"Loss:{} at epoch:{}\/30000\".format(loss, i))","9508e131":"#Sample test input for random value\ntestInput = [[0.94, 1100, 15, 250]]\ntestInput = torch.tensor(testInput, dtype=torch.float32)\ntestPred = SModel(testInput)\nprint(testPred)","2c2d4b06":"from torch.utils.data import TensorDataset, DataLoader\nimport torch.nn as nn\ntstrain = TensorDataset(input, target)\ndltrain = DataLoader(tstrain, batch_size=5, shuffle=True)","0d3658d8":"model = nn.Linear(4, 2)\nmodel.bias","bc8c191c":"preds = model(input)\nlossfn = nn.SmoothL1Loss()\nloss = lossfn(preds, target)\nop = torch.optim.SGD(model.parameters(), 0.00001)","13158ed5":"def fit(epochs, model, lossfn, op, dltrain):\n    for epoch in range(epochs):\n        for i, j in dltrain:\n            pred = model(i)\n            loss = lossfn(pred, j)\n            loss.backward()\n            op.step()\n            op.zero_grad()\n        if (epoch%10==0 or epoch==epochs):\n            print(\"Loss:{} at epoch:{}\/{}\".format(loss, epoch+1, epochs))","184ad784":"fit(30, model, lossfn, op, dltrain)","4124b193":"model(torch.tensor([[0.91, 1661, 24, 222]]))","085b8746":"# **Using Build-In Functions**","bb70f4bb":"I'm going to predict the actual temperature & what's our human body feels like in that actual temperature using PyTorch. For that, I have several features called Humidity, Pressures, Wind Speed, Wind Bearing.","693783f3":"# **Without Build-In Functions**"}}