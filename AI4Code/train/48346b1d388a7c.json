{"cell_type":{"2236b1e2":"code","2d429295":"code","2716b23f":"code","aa1711e4":"code","0eabb1c4":"code","61e3a6eb":"code","073e4b50":"code","52fbfc96":"code","e736dd0d":"code","c03ab5a8":"code","718d52c1":"code","449e832b":"code","9ac472ef":"code","148c73d3":"code","d41562c1":"code","cfcd68d1":"code","96b621aa":"code","09f5a942":"code","c767c2dc":"code","f98dbfcc":"code","1b2b4f29":"markdown","cd3cde85":"markdown","66dbc07f":"markdown","50f73004":"markdown","0e9b4254":"markdown","b9e510d9":"markdown"},"source":{"2236b1e2":"import numpy as np\nimport pandas as pd \n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline","2d429295":"import keras\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization, Conv2D, MaxPooling2D\nfrom keras import regularizers, optimizers\nfrom keras import Input, Model\nfrom keras.applications import MobileNet, ResNet50","2716b23f":"main_path   = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/'\nbatch_size  = 128\nimage_size  = 224\nepochs      = 50\nval_rate    = 0.1\nbn_momentum = 0.9","aa1711e4":"def plot_batch(batch):\n    fig, axs = plt.subplots(4, 4, figsize=(15,10))\n    \n    for i in range(4):\n        for j in range(4):\n            img   = batch[0][i*4 + j]\n            axs[i, j].imshow(img)\n            \n    plt.show()\n    \ndef plot_history(history):\n    fig, axs = plt.subplots(1, 2, figsize=(15,5))\n    \n    axs[0].plot(history['loss'],     label = 'train_loss')\n    axs[0].plot(history['val_loss'], label = 'val_loss')\n    axs[0].legend()\n    axs[1].plot(history['categorical_accuracy'],     label = 'train_acc')\n    axs[1].plot(history['val_categorical_accuracy'], label = 'val__acc')\n    axs[1].legend()\n    \n    \n    plt.show()","0eabb1c4":"train_df = pd.read_csv(main_path + 'train.csv')\ntrain_df['image_id']                                  = train_df['image_id'] + '.jpg'\ntrain_df['y_col']                                     = train_df['image_id']\ntrain_df['y_col'][train_df['healthy'] == 1]           = 'healthy'\ntrain_df['y_col'][train_df['multiple_diseases'] == 1] = 'multiple_diseases'\ntrain_df['y_col'][train_df['rust'] == 1]              = 'rust'\ntrain_df['y_col'][train_df['scab'] == 1]              = 'scab'\ntrain_df","61e3a6eb":"plt.hist(train_df['y_col'])\nplt.show()","073e4b50":"data_gen = ImageDataGenerator(\n    rescale = 1.\/255,\n    horizontal_flip = True,\n    vertical_flip = True,\n    validation_split=val_rate\n)\n\ntrain = data_gen.flow_from_dataframe(\n    train_df,\n    directory = main_path + 'images',\n    x_col = 'image_id',\n    y_col = 'y_col',\n    class_mode = 'categorical',\n    target_size=(image_size, image_size),\n    batch_size = batch_size,\n    shuffle = True,\n    subset=\"training\",\n)\n\nval = data_gen.flow_from_dataframe(\n    train_df,\n    directory = main_path + 'images',\n    x_col = 'image_id',\n    y_col = 'y_col',\n    class_mode = 'categorical',\n    target_size=(image_size, image_size),\n    batch_size = batch_size,\n    shuffle = False,\n    subset=\"validation\",\n)","52fbfc96":"classes = train.class_indices\nclasses","e736dd0d":"for batch in train:\n    plot_batch(batch)\n    break","c03ab5a8":"inputs = Input(shape = (image_size, image_size, 3))\n\nmodel = ResNet50(\n    weights = None,\n    classes = 4\n)\n\nmodel.compile(optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['categorical_accuracy']\n)\n\nfor layer in model.layers:\n    if layer.name.split('_')[-1] == 'bn':\n        layer.momentum = bn_momentum","718d52c1":"model.summary()","449e832b":"keras.utils.plot_model(model, show_shapes=True, expand_nested=True)","9ac472ef":"history = model.fit(\n    train,\n    epochs=epochs,\n    validation_data = val\n)","148c73d3":"plot_history(history.history)","d41562c1":"submit = pd.read_csv(main_path + 'sample_submission.csv')\nsubmit['filename'] = submit['image_id'] + '.jpg'\nsubmit","cfcd68d1":"test_data_gen = ImageDataGenerator(\n    rescale = 1.\/255, \n)\n\ntest = test_data_gen.flow_from_dataframe(\n    submit,\n    directory = main_path + 'images',\n    x_col = 'filename',\n    class_mode = None,\n    target_size=(image_size, image_size),\n    batch_size = batch_size,\n    shuffle = False,\n)","96b621aa":"predict = model.predict(test, verbose = 1)","09f5a942":"submit['healthy']           = predict[:, classes['healthy']]\nsubmit['multiple_diseases'] = predict[:, classes['multiple_diseases']]\nsubmit['rust']              = predict[:, classes['rust']]\nsubmit['scab']              = predict[:, classes['scab']]\n\ndel submit['filename']","c767c2dc":"submit","f98dbfcc":"submit.to_csv(\"submission.csv\", index=False)","1b2b4f29":"# Submit","cd3cde85":"# Utilities","66dbc07f":"# Config","50f73004":"# Libraries","0e9b4254":"# Model","b9e510d9":"# Train and Validation Data"}}