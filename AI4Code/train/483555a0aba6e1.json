{"cell_type":{"8d4fa95d":"code","17c8dc5d":"code","8265ca55":"code","d15b995d":"code","7d6c32bf":"code","60fdac9a":"code","51129bf4":"code","c719afac":"code","fa3b5984":"code","0e042a11":"code","876f1328":"code","be855207":"code","bc45caa7":"code","50a51480":"code","113d4f74":"markdown","e4c63d61":"markdown","de02e798":"markdown","35510370":"markdown","37bbc2a9":"markdown","452cac0f":"markdown","48649664":"markdown","6ce1bf45":"markdown","f1a25828":"markdown","cb8c93c6":"markdown","46efbc21":"markdown","9f1c8f30":"markdown","37628f26":"markdown","c755f230":"markdown","eddc6e90":"markdown"},"source":{"8d4fa95d":"def mul(num):\n    \"\"\"\n    Prints the multipliaction table of a given number\n    \"\"\"\n    for i in range(1, 11):\n        print(\"{multiplier} * {multiplicand} = {multiplicantion}\".format(\n            multiplier=num, multiplicand=i, multiplicantion=num * i))\n\nmul(9)","17c8dc5d":"def checkPrime(max_num):\n    \"\"\"\n    Check whether the given number is prime or not\n    \"\"\"\n    for num in range (2, max_num):\n        if max_num % num == 0:\n            return False\n    return True\n\ndef twinPrime(max_num):\n    \"\"\"\n    Generates the list of twin primes\n    \"\"\"\n    for first_num in range(2, max_num):\n        second_num = first_num + 2\n        if (checkPrime(first_num) and checkPrime(second_num)):\n            print(\" {0} and {1}\".format(first_num, second_num))\n\nprint(\"Twin Prime: \")\ntwinPrime(1000)","8265ca55":"import math\n\nprime_list = []\n\ndef primeFactors(num):\n    \"\"\"\n    Returns the prime factors of a number\n    \"\"\"\n    \n    # for and while loop takes care of composite numbers\n    while num % 2 == 0:\n        prime_list.append(2)\n        num = num\/2\n        \n    # num will be odd by now, thus complexity can be reduced by discarding even numbers\n    # sqrt is used to discard composite numbers\n    for i in range(3, int(math.sqrt(num))+1, 2):\n        while num%i == 0:\n            prime_list.append(i)\n            num = num\/i\n\n    # when num is prime\n    if num > 2:\n        num = int(num)\n        prime_list.append(num)\n    return prime_list\n        \nprimeFactors(56)","d15b995d":"import operator as op\n\ndef factorial(num):\n    \"\"\"\n    Returns the factorial of a number\n    \"\"\"\n    \n    if num == 1:\n        return num\n    return num * factorial(num-1)\n\ndef permutation(n, r):\n    \"\"\"\n    Returns the permutation of a number\n    \"\"\"\n    return int(factorial(n) \/ factorial(n-r))\n\ndef combination(n, r):\n    \"\"\"\n    Returns the combinations of a number\n    \"\"\"\n    return int(factorial(n) \/ (factorial(r) * factorial(n-r)))\n\nprint(\"Permutation: \", permutation(15,4))\nprint(\"Combination: \", combination(15,4))","7d6c32bf":"def decToBin(num):\n    \"\"\"\n    Prints the binary number of a given decimal number using recursion\n    \"\"\"\n    if num > 1:\n        decToBin(num\/\/2)\n    print(num % 2, end=\"\")\n        \ndecToBin(11)","60fdac9a":"def exp(num, power):\n    \"\"\"\n    Returns the exponent of a given number with power\n    \"\"\"\n    if power == 0:\n        return 1\n    if num == 0:\n        return 0\n    answer = num\n    increment = num\n    \n    for i in range(1, power):\n        for j in range(1, num):\n            answer += increment\n        increment = answer\n    return answer\n\ndef cubesum(num):\n    \"\"\"\n    Returns the sum of cube of each digit of a given number\n    \"\"\"\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += exp(digit, 3) # digit ** 3\n        temp \/\/= 10\n    return sum\n\ndef isArmstrong(num):\n    \"\"\"\n    Check whether given number is Armstrong or not\n    \"\"\"\n    if cubesum(num) == num:\n        return True\n    else:\n        return False\n\ndef printArmstrong(num):\n    \"\"\"\n    Prints armstrong number in given range\n    \"\"\"\n    armstrong = []\n    for n in range(num):\n        if isArmstrong(n):\n            armstrong.append(n)\n    return armstrong\n    \nprint(\"Is 371 an armstrong number: \", isArmstrong(371))\nprint(\"Armstrong: \", printArmstrong(1000))","51129bf4":"def prodDigit(num):\n    \"\"\"\n    Returns the product of digits of given number\n    \"\"\"\n    temp = num\n    prod = 1\n    while temp > 0:\n        digit = temp % 10\n        prod *= digit\n        temp \/\/= 10\n    return prod\n\n\n# num = int(input(\"Enter a number: \"))\nnum = 54\nprint(\"Product of all digits of {0} is: {1}\".format(num, prodDigit(num)))","c719afac":"def MDR(num):\n    \"\"\"\n    Returns the MDR (Multiplicative Digital Root and Multiplicative Persistance of the given number\n    \"\"\"\n    s = str(num)\n    pers = 0\n    while len(s) > 1:\n        s = str(prodDigit(int(s)))\n        pers += 1\n    return int(s), pers\n\nnum = 341\nmdr, mper = MDR(num)\nprint(\"For {0} MDR is {1} and M Persistance is {2}\".format(num, mdr, mper))","fa3b5984":"def sumPdivisors(num):\n    \"\"\"\n    Returns the sum of proper divisors of a number\n    \"\"\"\n    divisors = []\n    for i in range(1, num):        \n        if num % i == 0:\n#             print(\"{0} is divisible by {1}\".format(num, i))\n            divisors.append(i)\n    return sum(divisors)\n            \n            \nsumPdivisors(36)","0e042a11":"def isPerfect(num):\n    \"\"\"\n    Checks whether given number is perfect or not\n    \"\"\"\n    return num == sumPdivisors(num)\n\ndef perfectNums(lower, upper):\n    \"\"\"\n    Prints the all perfect numbers in given range\n    \"\"\"\n    for i in range(lower, upper):\n        if isPerfect(i):\n            print(i)\n            \nperfectNums(0,100)","876f1328":"def amicableNum(lower, upper):\n    \"\"\"\n    Prints all amicable numbers in given range\n    \"\"\"\n    for num in range(lower, upper+1):\n        for num_ in range(num, upper+1):\n            if num != num_:\n                if amicablePair(num, num_):\n                    print(num, num_)\n        \ndef amicablePair(num1, num2):\n    \"\"\"\n    Checks whether given pair is amicable or not\n    \"\"\"\n    return (sumPdivisors(num1) == num2) and (sumPdivisors(num2) == num1)\n\namicableNum(1, 1000)","be855207":"def filterOdd(lst):\n    \"\"\"\n    Filter odd numbers from given list\n    \"\"\"\n    return list(filter(lambda num: (num%2 != 0), lst))\n\nfilterOdd([0,2,5,8,19,20,34,95])","bc45caa7":"def cube(lst):\n    \"\"\"\n    Returns the list of cubes of given number\n    \"\"\"\n    return list(map(lambda x: x**3, lst))\n\ncube([1, 3, 5, 9, 15])","50a51480":"def evenCube(lst):\n    \"\"\"\n    Returns the even cubes from the given list of numbers\n    \"\"\"\n    return cube(list(filter(lambda num: (num%2) == 0, lst)))\n\nevenCube([0,2,5,8,19,20,34,95])","113d4f74":"## 3. Write a program to find out the prime factors of a number. Example: prime factors of 56 - 2, 2, 2, 7\n","e4c63d61":"## 2.  Write a program to print twin primes  less than 1000. If two consecutive odd numbers are both prime then they are known as twin primes\n","de02e798":"## 4. Write a program to implement these formulae of permutations and combinations. \n\nNumber of permutations of n objects taken r at a time: p(n, r) = n! \/ (n-r)!.  \n\nNumber of combinations of n objects taken r at a time is: c(n, r) = n! \/ (r!*(n-r)!) = p(n,r) \/ r!\n","35510370":"## 13. Write a program which can map() to make a list whose elements are cube of elements in a given list","37bbc2a9":"## 7. Write a function prodDigits() that inputs a number and returns the product of digits of that number.\n","452cac0f":"## 14. Write a program which can map() and filter() to make a list whose elements are cube of even number in a given list","48649664":"## 6. Write a function cubesum() that accepts an integer and returns the sum of the cubes of individual digits of that number. Use this function to make functions PrintArmstrong() and isArmstrong() to print Armstrong numbers and to find whether is an Armstrong number.","6ce1bf45":"## 5. Write a function that converts a decimal number to binary number\n","f1a25828":"## 10. A number is called perfect if the sum of proper divisors of that number is equal to the number. For example 28 is perfect number, since 1+2+4+7+14=28. Write a program to print all the perfect numbers in a given range\n","cb8c93c6":"## 8. If all digits of a number n are multiplied by each other repeating with the product, the one digit number obtained at last is called the multiplicative digital root of n. The number of times digits need to be multiplied to reach one digit is called the multiplicative persistance of n. \n    \n    Example: 86 -> 48 -> 32 -> 6 (MDR 6, MPersistence 3)\n               341 -> 12->2           (MDR 2, MPersistence 2)\n               \nUsing the function prodDigits() of previous exercise write functions MDR() and MPersistence() that input a number and return its multiplicative digital root and multiplicative persistence respectively","46efbc21":"## 9. Write a function sumPdivisors() that finds the sum of proper divisors of a number. Proper divisors of a number are those numbers by which the number is divisible, except the number itself.  For example proper divisors of 36 are 1, 2, 3, 4, 6, 9, 18\n","9f1c8f30":"## 11. Two different numbers are called amicable numbers if the sum of the proper divisors of each is equal to the other number. For example 220 and 284 are amicable numbers.\n\n        Sum of proper divisors of 220 = 1+2+4+5+10+11+20+22+44+55+110 = 284\n        Sum of proper divisors of 284 = 1+2+4+71+142 = 220\n\nWrite a function to print pairs of amicable numbers in a range","37628f26":"## 12. Write a program which can filter odd numbers in a list by using filter function","c755f230":"# **Python Practice Questions On Functions**","eddc6e90":"## 1. Write a function that inputs a number and prints the multiplication table of that number\n"}}