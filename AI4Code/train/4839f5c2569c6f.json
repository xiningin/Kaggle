{"cell_type":{"6d8423d0":"code","0ad01950":"code","d3191e1d":"code","e3a1285c":"code","98e2d637":"code","16d56c4b":"code","b04ad583":"code","f27d8959":"code","69d6694a":"code","76f28cc0":"code","b646a5f5":"code","ae9eff12":"code","b53cd6e4":"code","b09f6cc4":"code","f7b2c799":"code","5a88c55f":"code","164c50a5":"code","d8a4d0f9":"code","67ea88e3":"markdown","e463c1b3":"markdown","48936036":"markdown","d1f0ab00":"markdown"},"source":{"6d8423d0":"import numpy as np \nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import f1_score as f1\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0ad01950":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 150)\n\nimport warnings\nwarnings.filterwarnings('ignore')","d3191e1d":"from sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn.metrics import make_scorer, mean_squared_error\nfrom scipy.stats import ttest_rel\nfrom statsmodels.stats.weightstats import zconfint, _tconfint_generic\n\n# \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0430\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f + \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0445(ttest_rel)\n# \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043c\u0430\u043b\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0442\u0430\u043a \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u0430\u043b\u044b\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0430\u044e 3 \u0444\u043e\u043b\u0434\u0430 n \u0440\u0430\u0437\n\ndef cross_val_ttest(model, X, y, prev_scores = None, k_folds = 3, n = 6):\n    if prev_scores is not None: \n        assert len(prev_scores) == k_folds * n\n    \n    scores_test = np.array([])\n    for i in range(n):\n        fold = StratifiedKFold(n_splits=k_folds, shuffle=True, random_state=i)\n        scorer = make_scorer(f1, average = 'macro')\n\n        scores_test_on_this_split = cross_val_score(estimator = model, X=X, y=y, cv=fold, scoring=scorer)\n        scores_test = np.append(scores_test, scores_test_on_this_split)\n\n        print('------ step ', i,' ------')\n\n    if prev_scores is not None: return scores_test, ttest_rel(scores_test, prev_scores)\n    else: return scores_test\n    \n# \u0434\u043e\u0432\u0435\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043d\u0430 \u0431\u0430\u0437\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430, \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \ndef tconfint(scores, alpha = 0.05):\n    mean = scores.mean()\n    scores_std = scores.std(ddof=1)\/np.sqrt(len(scores))\n    \n    return _tconfint_generic(mean, scores_std, len(scores) - 1, alpha, 'two-sided')\n\n# \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0430, \u043b\u0438\u0431\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ndef single_test(model, X_train, Y, X_test = None, subm_name = None):\n\n    x_train, x_valid, y_train, y_valid = train_test_split(X_train, Y, test_size = 0.3, shuffle = True, random_state = 10, stratify = Y)\n    model.fit(x_train, y_train)\n    pred_train = model.predict(x_valid)\n\n    if X_test is not None:\n        pred = model.predict(X_test)\n        return pred\n    \n    return f1(pred_train, y_valid, average = 'macro')","e3a1285c":"train = pd.read_csv('\/kaggle\/input\/mf-accelerator\/contest_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/mf-accelerator\/contest_test.csv')\ndata = pd.concat([train, test], ignore_index=True)","98e2d637":"# \u043f\u043e \u0442\u0430\u043a\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0438\u0437\u0443\u0447\u0438\u043b \u0432\u0441\u0435 \u0444\u0438\u0447\u0438\n\ncols = data.columns[2:]\ndef jitter(arr):\n    return arr + np.random.uniform(low=-0.25, high=0.25, size=len(arr))\n\nplt.figure(figsize = (10, 5))\n    \nplt.subplot(121)\nplt.scatter(jitter(train.TARGET), jitter(train[cols[55]]),  edgecolors=\"black\")\nplt.xlabel(cols[55])\nplt.xticks([0,1,2])\n\nplt.subplot(122)\nsns.boxplot(y=train[cols[55]])\nplt.xlabel('boxplot')","16d56c4b":"# \u0412\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043e\u0446\u0435\u043d\u0438\u043b \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0444\u0438\u0447\u0438, \"\u043d\u0430 \u0433\u043b\u0430\u0437\" \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u043b \u0444\u0438\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \n# (\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0443\u043f\u0430\u043b \u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0435)","b04ad583":"# \u043d\u0435 \u0431\u0443\u0434\u0443 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0432\u0441\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0438 \u043e\u0442\u0431\u043e\u0440\u043e\u043c \u0444\u0438\u0447\u0435\u0439 - \u044d\u0442\u043e \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435\n# \u0437\u0434\u0435\u0441\u044c - \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0444\u0438\u0447\u0430\u043c\u0438:\n# (\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439, \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u043e\u0442\u0431\u043e\u0440)\n\n# \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435, \u0446\u0435\u043b\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\nr_cols = ['FEATURE_21', 'FEATURE_225', 'FEATURE_102', 'FEATURE_110', 'FEATURE_24', 'FEATURE_139', 'FEATURE_83', 'FEATURE_252', 'FEATURE_111', 'FEATURE_90', 'FEATURE_34', 'FEATURE_57', 'FEATURE_147', 'FEATURE_82', 'FEATURE_76', 'FEATURE_97', 'FEATURE_86', 'FEATURE_51', 'FEATURE_77', 'FEATURE_170', 'FEATURE_58', 'FEATURE_23', 'FEATURE_108', 'FEATURE_114', 'FEATURE_7', 'FEATURE_168', 'FEATURE_103', 'FEATURE_169', 'FEATURE_47', 'FEATURE_95', 'FEATURE_141', 'FEATURE_61', 'FEATURE_113', 'FEATURE_46', 'FEATURE_59', 'FEATURE_62', 'FEATURE_67', 'FEATURE_65', 'FEATURE_105', 'FEATURE_89', 'FEATURE_143', 'FEATURE_240', 'FEATURE_99', 'FEATURE_228', 'FEATURE_68', 'FEATURE_50', 'FEATURE_52', 'FEATURE_64', 'FEATURE_244', 'FEATURE_107', 'FEATURE_217', 'FEATURE_101', 'FEATURE_26', 'FEATURE_94', 'FEATURE_45', 'FEATURE_33', 'FEATURE_106', 'FEATURE_38', 'FEATURE_80', 'FEATURE_85', 'FEATURE_96', 'FEATURE_109', 'FEATURE_66', 'FEATURE_160', 'FEATURE_79', 'FEATURE_98', 'FEATURE_177', 'FEATURE_25', 'FEATURE_60', 'FEATURE_91', 'FEATURE_87', 'FEATURE_223', 'FEATURE_53', 'FEATURE_186', 'FEATURE_100', 'FEATURE_112', 'FEATURE_35', 'FEATURE_63', 'FEATURE_236', 'FEATURE_104']\nz_cols = ['FEATURE_39', 'FEATURE_122', 'FEATURE_30', 'FEATURE_42', 'FEATURE_22', 'FEATURE_179', 'FEATURE_229', 'FEATURE_242', 'FEATURE_27', 'FEATURE_31', 'FEATURE_178', 'FEATURE_142', 'FEATURE_231', 'FEATURE_234', 'FEATURE_146', 'FEATURE_165', 'FEATURE_248', 'FEATURE_180', 'FEATURE_222', 'FEATURE_70', 'FEATURE_28', 'FEATURE_224', 'FEATURE_115', 'FEATURE_40', 'FEATURE_246', 'FEATURE_120', 'FEATURE_221', 'FEATURE_155', 'FEATURE_215', 'FEATURE_32', 'FEATURE_176', 'FEATURE_227', 'FEATURE_154', 'FEATURE_74', 'FEATURE_167', 'FEATURE_250', 'FEATURE_251', 'FEATURE_121', 'FEATURE_216', 'FEATURE_226', 'FEATURE_20', 'FEATURE_198', 'FEATURE_117', 'FEATURE_44', 'FEATURE_199', 'FEATURE_116', 'FEATURE_145', 'FEATURE_243', 'FEATURE_29', 'FEATURE_75', 'FEATURE_202', 'FEATURE_247', 'FEATURE_185', 'FEATURE_0', 'FEATURE_13', 'FEATURE_241', 'FEATURE_197', 'FEATURE_41', 'FEATURE_171', 'FEATURE_201', 'FEATURE_172', 'FEATURE_43']\n\nbi_cols = ['FEATURE_6', 'FEATURE_16', 'FEATURE_2', 'FEATURE_4', 'FEATURE_11', 'FEATURE_159', 'FEATURE_15', 'FEATURE_19', 'FEATURE_17', 'FEATURE_18', 'FEATURE_5', 'FEATURE_140']\ncat_cols = ['FEATURE_9', 'FEATURE_157', 'FEATURE_257', 'FEATURE_259', 'FEATURE_214', 'FEATURE_156', 'FEATURE_218', 'FEATURE_258', 'FEATURE_219', 'FEATURE_220', 'FEATURE_10']\n\nmiss_cols = ['FEATURE_73', 'FEATURE_213', 'FEATURE_191', 'FEATURE_175', 'FEATURE_192', 'FEATURE_173', 'FEATURE_188', 'FEATURE_134', 'FEATURE_203', 'FEATURE_153', 'FEATURE_8', 'FEATURE_138', 'FEATURE_149', 'FEATURE_211', 'FEATURE_238', 'FEATURE_195', 'FEATURE_212', 'FEATURE_125', 'FEATURE_152', 'FEATURE_210', 'FEATURE_126', 'FEATURE_150', 'FEATURE_206', 'FEATURE_209', 'FEATURE_193', 'FEATURE_124', 'FEATURE_71', 'FEATURE_189', 'FEATURE_137', 'FEATURE_12', 'FEATURE_183', 'FEATURE_194', 'FEATURE_72', 'FEATURE_136', 'FEATURE_196', 'FEATURE_151', 'FEATURE_174', 'FEATURE_181', 'FEATURE_132', 'FEATURE_187', 'FEATURE_129', 'FEATURE_133', 'FEATURE_162', 'FEATURE_239', 'FEATURE_190', 'FEATURE_128', 'FEATURE_130']\n\nuseless_cols = ['FEATURE_69', 'FEATURE_88', 'FEATURE_123', 'FEATURE_127', 'FEATURE_131', 'FEATURE_135', 'FEATURE_148', 'FEATURE_204', 'FEATURE_205', 'FEATURE_207', 'FEATURE_208', 'FEATURE_254', 'FEATURE_255']\nconst_cols = ['FEATURE_3', 'FEATURE_144', 'FEATURE_249', 'FEATURE_256']\n\ncatmiss_cols = ['FEATURE_213', 'FEATURE_203', 'FEATURE_211', 'FEATURE_212', 'FEATURE_210', 'FEATURE_206','FEATURE_209']\nnummiss_cols = ['FEATURE_134', 'FEATURE_124', 'FEATURE_137', 'FEATURE_73', 'FEATURE_125', 'FEATURE_175', 'FEATURE_181', 'FEATURE_195', 'FEATURE_71', 'FEATURE_132', 'FEATURE_196', 'FEATURE_136', 'FEATURE_151', 'FEATURE_133', 'FEATURE_129', 'FEATURE_239', 'FEATURE_153', 'FEATURE_192', 'FEATURE_189', 'FEATURE_173', 'FEATURE_12', 'FEATURE_138', 'FEATURE_8', 'FEATURE_193', 'FEATURE_190', 'FEATURE_174', 'FEATURE_162', 'FEATURE_72', 'FEATURE_130', 'FEATURE_183', 'FEATURE_191', 'FEATURE_128', 'FEATURE_149', 'FEATURE_152', 'FEATURE_188', 'FEATURE_194', 'FEATURE_187', 'FEATURE_150', 'FEATURE_126', 'FEATURE_238']","f27d8959":"# precomputed baseline score estimation\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0435 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 cross_val_ttest\n\ntest_baseline = np.array([0.49247369, 0.49354152, 0.48317658, 0.49637811, 0.48853664,\n       0.48700242, 0.4849887 , 0.48657228, 0.49926884, 0.49285571,\n       0.48597107, 0.49468759, 0.4903521 , 0.49272306, 0.49119276,\n       0.49750482, 0.48570297, 0.48399252])\ntconfint(test_baseline)","69d6694a":"# \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u044e \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u044e \u0434\u0430\u043d\u043d\u044b\u0435, \u0442.\u043a. \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0447\u0435\u0440\u0435\u0437\u0447\u0443\u0440 \u0432\u0435\u043b\u0438\u043a\u0438\n# \u0441\u043e\u0431\u0438\u0440\u0430\u044e \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n\nfrom sklearn.preprocessing import StandardScaler\n\ncurrent_cols = r_cols + z_cols + nummiss_cols\ndata_scaled = data[current_cols]\n\n# \u0441\u0434\u0432\u0438\u043d\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u043e \u0444\u0438\u0447\u0430\u043c \u0432 \"1\" \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nfor col in current_cols:\n    data_scaled[col] = data_scaled[col]-data_scaled[col].min()+1\n\ndata_scaled = np.log(data_scaled[current_cols])\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\ndata_scaled = pd.DataFrame(scaler.fit_transform(data_scaled), columns = current_cols).join(data[bi_cols])\n\n# ohe \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfor col in cat_cols:\n    ohe = pd.get_dummies(data[col], prefix = col)\n    data_scaled = data_scaled.join(ohe)\n    bi_cols = bi_cols + ohe.columns.tolist()\n\n# \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\ndata_scaled = data_scaled.join(data[catmiss_cols])","76f28cc0":"# \u043e\u0431\u044b\u0447\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 - \u0433\u0440\u0443\u0431\u043e, \u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e\n\nfrom sklearn.linear_model import Ridge\n\nfor col in nummiss_cols:\n    test_id = data_scaled[col].isna()\n    train_id = test_id == False\n\n    model = Ridge(random_state = 1)\n\n    X_train = data_scaled[bi_cols+r_cols+z_cols][train_id]\n    Y = data_scaled[col][train_id]\n\n    model.fit(X_train, Y)\n    print(mean_squared_error(model.predict(X_train), Y))\n\n    data_scaled[col][test_id] = model.predict(data_scaled[bi_cols+r_cols+z_cols][test_id])","b646a5f5":"# \u043b\u0435\u0441 - \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445\n\nfor col in catmiss_cols:\n    test_id = data_scaled[col].isna()\n    train_id = test_id == False\n\n    model = RandomForestClassifier(n_estimators=100, max_depth=8, random_state = 1, class_weight = 'balanced')\n\n    X_train = data_scaled[bi_cols+r_cols+z_cols+nummiss_cols][train_id]\n    Y = data_scaled[col][train_id]\n\n    model.fit(X_train, Y)\n    print(f1(model.predict(X_train), Y, average = 'macro'))\n\n    data_scaled[col][test_id] = model.predict(data_scaled[bi_cols+r_cols+z_cols+nummiss_cols][test_id])","ae9eff12":"# \u0438 \u0442\u043e\u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0438\u0445 \u0432 ohe\n\nfor col in catmiss_cols:\n    ohe = pd.get_dummies(data_scaled[col], prefix = col)\n    data_scaled = data_scaled.join(ohe)\n    bi_cols = bi_cols + ohe.columns.tolist()\n    data_scaled.drop([col], axis = 1, inplace = True)","b53cd6e4":"%%time\n\npreds = np.zeros((10, 3, 9484))\n\nfor i in range(10):\n    pred = single_test(model = RandomForestClassifier(n_estimators=200, max_depth=11, min_samples_leaf = 6, random_state=i, class_weight = 'balanced'), \n                X_train = data_scaled.iloc[:24521], \n                Y = train['TARGET'], \n                X_test = data_scaled.iloc[24521:])\n                \n    preds[i][0] = pred == 0\n    preds[i][1] = pred == 1\n    preds[i][2] = pred == 2\n    \n    print(i)\n    \nsubm = pd.DataFrame({'ID': test.ID, 'Predicted': np.argmax(preds.sum(axis = 0), axis = 0)})\nsubm.to_csv('rfc103-11-6_cols_scaled_ohe_nocorr.csv', index=False)","b09f6cc4":"# scores_test = []\n# for i in range(10): \n#     scores_test.append(cross_val_ttest(model = RandomForestClassifier(n_estimators=200, max_depth=11, min_samples_leaf = 6, random_state=i, class_weight = 'balanced'), \n#                 X = data_scaled.iloc[:24521], \n#                 y = train['TARGET'],\n#                 k_folds = 3, n = 3))","f7b2c799":"# np.vstack(scores_test).mean(axis = 1)","5a88c55f":"# single_test(model = RandomForestClassifier(n_estimators=200, max_depth=11, min_samples_leaf = 6, random_state=1, class_weight = 'balanced'), \n#                 X_train = data_scaled.iloc[:24521], \n#                 Y = train['TARGET']) \n#               #  X_test = data_scaled.iloc[24521:])","164c50a5":"# from catboost import CatBoostClassifier, Pool\n# import xgboost as xgb\n# from lightgbm import LGBMClassifier\n# from sklearn.utils.class_weight import compute_class_weight","d8a4d0f9":"# CLASS_WEIGHTS = compute_class_weight(class_weight='balanced', classes=[0,1,2], y=train['TARGET'])\n\n# pred = single_test(model = CatBoostClassifier(random_state=10, \n#                                        verbose = 0, \n#                                        class_weights=CLASS_WEIGHTS, \n#                                        custom_loss=['TotalF1'],\n#                                        loss_function = 'MultiClassOneVsAll'), \n#                 X_train = data_scaled.iloc[:24521], \n#                 Y = train['TARGET'],\n#                 X_test = data_scaled.iloc[24521:]) \n\n# subm = pd.DataFrame({'ID': test.ID, 'Predicted': pred.reshape(-1)})\n# subm.to_csv('cat_scaled_ohe.csv', index=False)","67ea88e3":"## \u0412\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","e463c1b3":"## \u041a\u0443\u0441\u043e\u0447\u0435\u043a EDA","48936036":"## \u041c\u043e\u0434\u0435\u043b\u044c\n\u0437\u0430\u0431\u0430\u0432\u043d\u043e, \u043d\u043e \u043b\u0443\u0447\u0448\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u0443\u044e \u043f\u0440\u0438\u0431\u0430\u0432\u043a\u0443, \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f random_state \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430)\n\u043e\u0431\u0443\u0447\u0438\u043b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0435\u0441\u043e\u0432 \u0438 \u0441\u043e\u0431\u0440\u0430\u043b \u0432 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c.\n\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u043c\u0438\u043c\u043e random_state \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u043b \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043c\u0443\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439.\n\n\u0431\u0443\u0441\u0442\u044b \u043a\u0430\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u0448\u043b\u0438, \u0445\u043e\u0442\u044f \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u043d\u0438\u0445 \u043e\u0441\u0442\u0430\u0432\u0430\u043b\u043e\u0441\u044c \u043c\u0430\u043b\u043e","d1f0ab00":"## Log & Scaling\nmove min to 1.0 for every col"}}