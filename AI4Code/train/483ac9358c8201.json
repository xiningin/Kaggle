{"cell_type":{"3093d77c":"code","40949cfa":"code","9b041158":"code","ae33f118":"code","bb0865c8":"code","d607c82d":"code","a5b091f3":"code","89a913c3":"code","b2df7069":"code","bf306159":"code","60070438":"code","3453b5ee":"code","fbe2ebbc":"code","c0790c77":"code","3d7bc79b":"code","3244cdb4":"code","349b58ce":"code","d1ee24ae":"code","bd8e76dc":"code","3ef86719":"code","b42326c3":"code","4f379e62":"code","a4c16e43":"code","c4f4f270":"code","c364ccc5":"code","ee239c2b":"code","c41e8185":"code","897abd48":"code","299d05ab":"code","0c58b22f":"code","e2689680":"code","4a10c11f":"code","136a118a":"code","94203f62":"code","46f280b4":"code","6c877cdf":"code","df424ae8":"code","914c154d":"code","bb92d489":"code","eec8d387":"code","a69be003":"code","9d4621cd":"code","a0eae686":"code","87bda072":"code","98e9eec6":"code","04245a84":"code","8714f80e":"code","21c75862":"code","5d5a86a5":"code","69797171":"code","e7bc83bc":"code","a2e08fa8":"code","5b600ba6":"code","005f0c14":"code","5bd44e6e":"code","2883b007":"code","3e507391":"code","41311a49":"code","be3d9d5f":"code","44497e9a":"code","f8a94023":"code","9abf51b5":"code","d6adffb6":"code","bae0b279":"code","aa26b517":"code","b7d8d58a":"code","7cbbb7b9":"code","97af3cf0":"code","9436c5f7":"code","e84f39ef":"code","d48b27e4":"code","6b4a4091":"markdown","5a274d1e":"markdown","8fdb02dd":"markdown","171c5f9b":"markdown","38819c09":"markdown","1cb15f91":"markdown","93067962":"markdown","9825bb10":"markdown"},"source":{"3093d77c":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","40949cfa":"train.head()","9b041158":"test.head()","ae33f118":"for col in train.columns:\n    print(\"No of unique values in column --{} is --{}\".format(col, train[col].nunique()))","bb0865c8":"for col in test.columns:\n    print(\"No of unique values in column --{} is --{}\".format(col, test[col].nunique()))","d607c82d":"print(\"Shape of Train is {}, Shape of Test is {}\".format(train.shape, test.shape))","a5b091f3":"for col in train.columns:\n    print(\"Number of Nan in train column --{} is --{}\".format(col, train[col].isna().sum()))","89a913c3":"train['target'].value_counts().plot(kind='bar')","b2df7069":"# to display maximum rows\n\npd.set_option('display.max_colwidth', -1)","bf306159":"train['text'].head(20)","60070438":"# I am creating a feature for length of tweets\n\ntrain['length'] = train['text'].str.len()\n\ntest['length'] = test['text'].str.len()","3453b5ee":"train['length']","fbe2ebbc":"train_1= train[train['target']==1]\ntrain_0= train[train['target']==0]","c0790c77":"print(\"Shape of train_1 is -- {}\".format(train_1.shape))\n\nprint(\"Shape of train_0 is -- {}\".format(train_0.shape))","3d7bc79b":"print(\"Average length of text in real dataset is --{}\".format(train_1[\"length\"].mean()))\n\nprint(\"Average length of text in fale dataset is --{}\".format(train_0[\"length\"].mean()))","3244cdb4":"#train_1[\"length\"].plot(kind= 'bar')","349b58ce":"#train_0[\"length\"].plot(kind= 'bar')","d1ee24ae":"import matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n\n\n","bd8e76dc":"# No of characters of the tweet\n\nfig,(axis0, axis1) = plt.subplots(1,2,figsize=(10,5))\naxis0.hist(train_1[\"length\"] , color='red')\n#axis0.plot(train_1[\"length\"], norm.pdf(train_1[\"length\"],0,2))\naxis0.set_title(\"Real Disaster tweets\")\n\n\naxis1.hist(train_0[\"length\"] , color='green')\naxis1.set_title(\"Fake Disaster tweets\")\n\nfig.suptitle('Characters in tweets')\nplt.show()","3ef86719":"# No of words in the tweet\n \nfig,( axis0, axis1) = plt.subplots(1,2, figsize=(10,5))\n\naxis0.hist(train_1[\"text\"].str.split().map(lambda x : len(x)) , color='red')\n\naxis1.hist(train_0['text'].str.split().map(lambda x : len(x)) , color ='green')\n\naxis0.set_title('Real Tweets Data')\n\naxis1.set_title('Fake Tweets Data')\n\nfig.suptitle(\"Number of words in tweet\")","b42326c3":"import numpy as np\nimport seaborn as sns","4f379e62":"# Average length of words in the tweet \n\nfig, (axis0, axis1) = plt.subplots(1,2, figsize=(10,5))\n\nword0 = (train_1[\"text\"].str.split().map(lambda x : len(x)))\n\nsns.distplot(word0.map(lambda x : np.mean(x)), color= 'red', ax= axis0)\naxis0.set_title('Real Tweets Data')  \n\n\nword1 = train_0['text'].str.split().map(lambda x :len(x))\nsns.distplot(word1.map(lambda x : np.mean(x)), color= 'green', ax = axis1)\naxis1.set_title('Fake Tweets Data')  \n\n#axis0.hist((train_1[\"text\"].str.split().map(lambda x : len(x)).mean()))\n           \n#axis1.hist((train_0[\"text\"].str.split().map(lambda x : len(x)), color = 'green'))\nplt.suptitle(\" Avegrage length of tweets\")","a4c16e43":"# Creating corpus from the data\n\ndef create_corpus(target):\n    \n    corpus= []\n    for values in train[train['target']== target]['text'].str.split():\n        for i in values:\n            corpus.append(i)\n            \n    return corpus","c4f4f270":"from collections import defaultdict\nfrom nltk.corpus import stopwords\nstop=set(stopwords.words('english'))\n","c364ccc5":"# Creating corpus for class 0\n\ncorpus_0 = create_corpus(0)\n\ndic=defaultdict(int)\nfor word in corpus_0:\n    if word in stop:\n        dic[word]+=1\n        \ntop=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10] \n\nprint(top)","ee239c2b":"x,y=zip(*top)\nplt.bar(x,y)\nplt.suptitle('Stop word Count')","c41e8185":"## analyzing the tweets with target 1\n\ncorpus_1 = create_corpus(1)\n\ndic = defaultdict(int)\n\nfor word in corpus_1:\n    if word in stop:\n       dic[word]+=1 \n    \n    top=sorted(dic.items(), key=lambda x:x[1],reverse=True)[:10] \n\nprint(top)","897abd48":"x,y = zip(*top)\nplt.bar(x,y)\nplt.suptitle('Stop word Count')","299d05ab":"fig, (axis0, axis1) = plt.subplots(1,2 , figsize= (10,5))\n\ndic= defaultdict(int)\n\nimport string\nspecial = string.punctuation\n\n\nfor i in corpus_1:\n    if i in special:\n        dic[i]+=1\n        \nx,y = zip(*dic.items())\naxis0.bar(x,y, color= 'red')\naxis0.set_title(\"Characters in Real tweets\")\n\nfor i in corpus_0:\n    if i in special:\n        dic[i] +=1\n        \nx,y = zip(*dic.items())\naxis1.bar(x,y, color = 'green')\naxis1.set_title(\"Characters in fake tweets\")\n\n","0c58b22f":"from collections import  Counter\n","e2689680":"counter = Counter(corpus_0)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:40]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)","4a10c11f":"sns.barplot(x=y, y=x)","136a118a":"from sklearn.feature_extraction.text import CountVectorizer\n","94203f62":"\ndef get_top_tweet_bigrams(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]","46f280b4":"plt.figure(figsize=(10,5))\ntop_tweet_bigrams=get_top_tweet_bigrams(train['text'])[:10]\nx,y=map(list,zip(*top_tweet_bigrams))\nsns.barplot(x=y,y=x)","6c877cdf":"df = pd.concat([train,test])\n\nprint(df.shape)","df424ae8":"import re","914c154d":"# Removing URLs\n    \ndef remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\n\n    ","bb92d489":"df['text'] = df['text'].apply(lambda x : remove_URL(x))","eec8d387":"# remove html\n\ndef remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\n#print(remove_html(example))","a69be003":"df['text'] = df['text'].apply(lambda x : remove_html(x))","9d4621cd":"# remove emojis\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\n","a0eae686":"df['text']=df['text'].apply(lambda x: remove_emoji(x))","87bda072":"# Remove Punctuations\n\ndef remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\nexample=\"I am a #king\"\nprint(remove_punct(example))","98e9eec6":"df['text']=df['text'].apply(lambda x : remove_punct(x))","04245a84":"!pip install pyspellchecker","8714f80e":"\n!pip install pyspellchecker\n\nimport spellchecker","21c75862":"## Correcting spellings \n\nfrom spellchecker import SpellChecker\nspell = SpellChecker()\n\ndef correct_spelling(text):\n    corrected_text = []\n    misspelled_word = spell.unknown(text.split())\n    \n    for word in text.split():\n        if word in misspelled_word:\n            corrected_text.append(spell.correction(word))\n        else:\n            corrected_text.append(word)\n    return \" \".join(corrected_text)\n\n\n        ","5d5a86a5":"text = \"corect me plese\"\ncorrect_spelling(text)","69797171":"from tqdm import tqdm\nfrom nltk.tokenize import word_tokenize\n","e7bc83bc":"def create_corpus(df):\n    corpus=[]\n    for tweet in tqdm(df['text']):\n        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus\n","a2e08fa8":"corpus = create_corpus(df)","5b600ba6":"embedding_dict={}\nwith open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word=values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","005f0c14":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam","5bd44e6e":"MAX_LEN=50\ntokenizer_obj=Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences=tokenizer_obj.texts_to_sequences(corpus)\n\ntweet_pad=pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')","2883b007":"word_index=tokenizer_obj.word_index\nprint('Number of unique words:',len(word_index))","3e507391":"num_words=len(word_index)+1\nembedding_matrix=np.zeros((num_words,100))\n\nfor word,i in tqdm(word_index.items()):\n    if i > num_words:\n        continue\n    \n    emb_vec=embedding_dict.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i]=emb_vec","41311a49":"model=Sequential()\n\nembedding=Embedding(num_words,100,embeddings_initializer=Constant(embedding_matrix),\n                   input_length=MAX_LEN,trainable=False)\n\nmodel.add(embedding)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\n\noptimzer=Adam(learning_rate=1e-5)\n\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy'])","be3d9d5f":"model.summary()","44497e9a":"train1=tweet_pad[:train.shape[0]]\ntest=tweet_pad[train.shape[0]:]","f8a94023":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\n","9abf51b5":"train['target']","d6adffb6":"X_train,X_test,y_train,y_test=train_test_split(train1,train['target'].values,test_size=0.15)\nprint('Shape of train',X_train.shape)\nprint(\"Shape of Validation \",X_test.shape)","bae0b279":"history=model.fit(X_train,y_train,batch_size=4,epochs=15,validation_data=(X_test,y_test),verbose=2)","aa26b517":"y_pred = model.predict(test)","b7d8d58a":"y_pred.shape","7cbbb7b9":"y_pre=np.round(y_pred).astype(int).reshape(3263)\ny_pre.shape","97af3cf0":"sample_sub=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')","9436c5f7":"sample_sub.shape","e84f39ef":"#sub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pre})\n\n\nsub = pd.DataFrame({'id': sample_sub['id'], 'target':y_pre})\nsub.to_csv('submission.csv',index=False)","d48b27e4":"data = pd.read_csv(\"submission.csv\")\ndata.shape","6b4a4091":"\n### Common words ","5a274d1e":"# Baseline Model","8fdb02dd":"* I have learnt immensely from [Shahules786](http:\/\/www.kaggle.com\/shahules) [kernel](http:\/\/https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove#Class-distribution). Kindly upvote that kernel as well if you like my work. \n\n* I will be working next on BERT for this problem. Will uplaod a notebook soon.\n\n","171c5f9b":"### Stopwords in tweets","38819c09":"### Ngram analysis","1cb15f91":"# Data Cleaning","93067962":"# Data Visualization","9825bb10":"# EDA of tweets"}}