{"cell_type":{"c18e7135":"code","16091c6d":"code","b3b8ab97":"code","d2402660":"code","41f16228":"code","d2b76d50":"code","a27f48ff":"code","8e1b65ad":"code","752a89a2":"code","ef41c8d9":"code","1f4910bf":"code","094fa4f2":"code","5a732210":"code","8cffb346":"code","a75a6f03":"markdown","26fd3238":"markdown"},"source":{"c18e7135":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16091c6d":"import pandas as ps\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nfrom pandas_profiling import ProfileReport\n\n# reading the dataset(csv file)\n\n\nplacements = ps.read_csv('..\/input\/engineering-placements-prediction\/collegePlace.csv')\nplacements.head(10)","b3b8ab97":"placements.info","d2402660":"# DF describe\nplacements.describe()","41f16228":"#The minimum and maximum values so far show signs of clarity(?). Let's see further","d2b76d50":"pandas_profile_key = ProfileReport(placements,title=\"Engineering Placements Report\")\npandas_profile_key.to_notebook_iframe()\n","a27f48ff":"# EDA Begins...\n\n# Comparing stream vs placed ratio plot\nplt.figure(figsize=(15,5))\nStream_vs_Place = placements.groupby('Stream')['PlacedOrNot'].sum()\nsn.barplot(x=Stream_vs_Place.index,y=Stream_vs_Place.values,palette = \"Blues\")","8e1b65ad":"# Onto comparing gender vs placed ratio plot\nGen_vs_Place = placements.groupby('Gender')['PlacedOrNot'].sum()\nplt.figure(figsize=(8,5))\nbarplot1 = sn.barplot(x=Gen_vs_Place.index,y=Gen_vs_Place.values,palette = \"crest_r\")\nbarplot1.set(xlabel=\"Gender\", ylabel = \"Placements\")\n","752a89a2":"# Onto comparing Hostel vs placed ratio plot\nHostel_vs_Place = placements.groupby('Hostel')['PlacedOrNot'].sum()\nplt.figure(figsize=(8,5))\nbarplot2 = sn.barplot(x=Hostel_vs_Place.index,y=Hostel_vs_Place.values,palette = \"Oranges\")\nbarplot2.set(xlabel=\"Hostel\", ylabel = \"Placements\")\n","ef41c8d9":"# Onto comparing CGPA vs placed ratio plot, Pandas Profile report showed high correlation,what's that all about ?\n\ncgpa_vs_Place = placements.groupby('CGPA')['PlacedOrNot'].sum()\nplt.figure(figsize=(8,5))\nbarplot3 = sn.barplot(x=cgpa_vs_Place.index,y=cgpa_vs_Place.values,palette = \"Oranges_r\")\nbarplot3.set(xlabel=\"CGPA\", ylabel = \"Placements\")\n\n","1f4910bf":"# Same relationship with a Pie plot.\n\nplt.figure(figsize=(28,11))\npie_chart1 = cgpa_vs_Place.plot.pie(autopct=\"%.1f%%\")","094fa4f2":"# Quickest ways to replace labelled values is Pandas' get dummies.\n\nplacements_fe = ps.get_dummies(placements)\nprint(placements_fe.head(10))","5a732210":"# Onto heatmap\nplt.figure(figsize=(28,21))\nsn.heatmap(placements_fe.corr(),cmap = \"gist_heat\")","8cffb346":"# Onto Modelling now...","a75a6f03":"**The \"Gender\" and \"Stream\" columns are strings( may need transformation for modelling) while PlacedOrNot column is set to binary(yaay!). Also the dataset holds 2966 rows x 8 columns**","26fd3238":"# The above give a 1-1 co-relation and provide awareness as we compare independent variables across competitive labels. Before proceeding to heatmaps and modelling, need a bit of label transformation for string based columns."}}