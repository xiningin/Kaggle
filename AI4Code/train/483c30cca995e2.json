{"cell_type":{"06f1df9b":"code","dc37b92c":"code","da5df0f5":"code","562cf29d":"code","750fadf9":"code","3f648faf":"code","201f9462":"code","feb8d15b":"code","d3f1b961":"code","62d3a186":"code","f3fbac42":"code","7f8e0a46":"code","5b91b1a5":"code","7c3b5cf6":"code","1e635125":"code","564dd580":"code","3b7e1315":"code","5f9aaf2f":"code","a89e4513":"code","a13ac2b4":"code","b33b9b4e":"markdown","2fc40fcf":"markdown","becfc006":"markdown","f7f8ec50":"markdown","1584046b":"markdown","315b35d2":"markdown","66117303":"markdown","5f92f11b":"markdown","ae2fb770":"markdown","546472c6":"markdown","247c1861":"markdown","5dd84308":"markdown","c94d3ddd":"markdown","79ffde82":"markdown","dd68852b":"markdown","2f954e1b":"markdown","696a493f":"markdown","b409aa81":"markdown","353305b7":"markdown"},"source":{"06f1df9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\"\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/d\/chandanmalla\/*'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc37b92c":"import pandas as pd\n#import bamboolib as bam\nimport seaborn as sns\npd.set_option('display.max_rows', 50)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n!pip install autoviz\nfrom autoviz.AutoViz_Class import AutoViz_Class\nfrom scipy import stats ## for KS test\nfrom prettytable import PrettyTable\n#!pip install sweetviz\n\n!pip install plotly\nsns.set()","da5df0f5":"purchase_data = pd.read_csv('\/kaggle\/input\/d\/chandanmalla\/ecommerce-marketing-purchase-and-psychographic\/Cleaned_Combined_Purchase_data_Final_Feature_Engineering_2.csv')\npurchase_data.rename(columns={\"Name on Invoice\": \"Name\"},inplace=True)\nsurvey_data = pd.read_csv('\/kaggle\/input\/d\/chandanmalla\/ecommerce-marketing-purchase-and-psychographic\/Cleaned_Survey_data_Final_Feature_Engineering_2.csv')\ncombined_data = pd.merge(purchase_data, survey_data, on = ['Name'], how = 'left')\nnull_index = combined_data[combined_data['I try to conserve electricity'].isna()].index.tolist()\npurchase_data.drop(null_index,axis=0,inplace=True) ##Dropping 77 rows for which survey response is not available.\n##Drop Extra Columns\npurchase_data.drop(['Unnamed: 0'],axis=1,inplace=True)\npurchase_data.drop(['Unnamed: 0.1'],axis=1,inplace=True)\nsurvey_data.drop(['Unnamed: 0'],axis=1,inplace=True)\n\n\ncombined_data = combined_data.dropna() ## 77 rows are NA and unavailable responses in survey are G3M2R6, G3M3R1, G3M3R2, G3M3R3, G3M3R4, G3M3R5, G5M4R24, G6M1R4\ncombined_data['Order Date'] = pd.to_datetime(combined_data['Order Date']) # to convert to Date Format\npurchase_data['Order Date'] = pd.to_datetime(purchase_data['Order Date']) # to convert to Date Form\npurchase_data = purchase_data[purchase_data['Order Date']>='01-Jan-2019'] ## Only data above 1st Jan 2019","562cf29d":"## Weekday\npurchase_data['WEEKDAY'] = np.where(((purchase_data['Order Date']).dt.dayofweek) < 5,'Weekday','Weekend')\n\n##Beginning_Mid_end of month\ndays = list(purchase_data['Order Date'].dt.day)\npurchase_data['Beginning_Mid_End_Month'] ='Beginning'\nfor i in range(purchase_data.shape[0]):\n    if days[i]>=10 and days[i]<20:\n        purchase_data['Beginning_Mid_End_Month'].values[i] = 'Mid'\n    elif days[i]>=20:\n        purchase_data['Beginning_Mid_End_Month'].values[i] = 'End'\n    else:\n        purchase_data['Beginning_Mid_End_Month'].values[i] = 'Beginning'\n\npurchase_data['Log_Final Price'] = np.log(purchase_data['Final Price'])","750fadf9":"AV = AutoViz_Class()\nfilename = \"\/kaggle\/input\/ecommerce-marketing-purchase-and-psychographic\/Cleaned_Combined_Purchase_data_Final_Feature_Engineering_2.csv\"\nsep = \",\"\ndft = AV.AutoViz(\n    filename,\n    sep=\",\",\n    depVar=\"\",\n    dfte=None,\n    header=0,\n    verbose=1,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=100,\n    save_plot_dir=None\n)","3f648faf":"AV = AutoViz_Class()\nfilename = \"\/kaggle\/input\/ecommerce-marketing-purchase-and-psychographic\/Cleaned_Survey_data_Final_Feature_Engineering_2.csv\"\nsep = \",\"\ndft = AV.AutoViz(\n    filename,\n    sep=\",\",\n    depVar=\"\",\n    dfte=None,\n    header=0,\n    verbose=1,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=100,\n    save_plot_dir=None\n)","201f9462":"## Transforming Price to log\npurchase_data['Log_Final Price'] = np.log(purchase_data['Final Price'])\n\n## Extracting each\nprice_1st_wave = purchase_data.loc[purchase_data['Covid']=='1st Wave','Final Price']\nprice_2nd_wave = purchase_data.loc[purchase_data['Covid']=='2nd Wave','Final Price']\nprice_no_covid = purchase_data.loc[purchase_data['Covid']=='No','Final Price']\n\n##KS test\n_,p_value_1st_2nd = stats.ks_2samp(price_1st_wave, price_2nd_wave)\n_,p_value_No_1st = stats.ks_2samp(price_1st_wave, price_no_covid)\n_,p_value_No_2nd = stats.ks_2samp(price_no_covid, price_2nd_wave)\n\n#Plot\nsns.boxplot(x='Log_Final Price',y='Covid',data = purchase_data)\nsns.FacetGrid(purchase_data,hue='Covid',height=5).map(sns.histplot,'Log_Final Price').add_legend()\n\n#plt.show()","feb8d15b":"t = PrettyTable(['1st Dist(Count)','2nd Dist(Count)','KS test p-value'])\nt.add_row(['1st_wave(1100)','2nd_wave (400)', p_value_1st_2nd])\nt.add_row(['1st_wave(1100)','No Covid (1600)', p_value_No_1st])\nt.add_row(['No Covid(1600)','2nd_wave (400)', p_value_No_2nd])\n\nprint(t)","d3f1b961":"\n## Extracting each\nprice_Tier_1 = purchase_data.loc[purchase_data['City_Tier']=='Tier_1','Final Price']\nprice_Tier_2 = purchase_data.loc[purchase_data['City_Tier']=='Tier_2','Final Price']\nprice_Tier_3 = purchase_data.loc[purchase_data['City_Tier']=='Tier 3','Final Price']\n\n##KS test\n_,p_value_Tier_1_Tier_2 = stats.ks_2samp(price_Tier_1, price_Tier_2)\n_,p_value_Tier_3_Tier_2 = stats.ks_2samp(price_Tier_3, price_Tier_2)\n_,p_value_Tier_1_Tier_3 = stats.ks_2samp(price_Tier_1, price_Tier_3)\n\n#Plot\nsns.boxplot(x='Log_Final Price',y='City_Tier',data = purchase_data)\nsns.FacetGrid(purchase_data,hue='City_Tier',height=5).map(sns.histplot,'Log_Final Price').add_legend()\n\n","62d3a186":"t = PrettyTable(['1st Dist(Count)','2nd Dist(Count)','KS test p-value'])\nt.add_row(['Tier_1(847)','Tier_2(1147)', p_value_Tier_1_Tier_2])\nt.add_row(['Tier_2(1147)','Tier_3(1099)', p_value_Tier_3_Tier_2])\nt.add_row(['Tier_1(847)','Tier_3(1099)', p_value_Tier_1_Tier_3])\n\nprint(t)","f3fbac42":"\n## Extracting each\nprice_Yes = purchase_data.loc[purchase_data['Sale']=='Yes','Final Price']\nprice_No = purchase_data.loc[purchase_data['Sale']=='No','Final Price']\n\n##KS test\n_,p_value_sale = stats.ks_2samp(price_Yes, price_No)\n\n\n#Plot\nsns.boxplot(x='Log_Final Price',y='Sale',data = purchase_data)\nsns.FacetGrid(purchase_data,hue='Sale',height=5).map(sns.histplot,'Log_Final Price').add_legend()\n\n","7f8e0a46":"print('Mean and Std_Dev for Sale Yes',np.mean(price_Yes),np.std(price_Yes))\nprint('Mean and Std_Dev for Sale No',np.mean(price_No),np.std(price_No))\n","5b91b1a5":"t = PrettyTable(['1st Dist(Count)','2nd Dist(Count)','KS test p-value'])\nt.add_row(['No(731)','Yes(2371)', p_value_sale])\n\nprint(t)","7c3b5cf6":"\n## Extracting each\nprice_Weekday = purchase_data.loc[purchase_data['WEEKDAY']=='Weekday','Final Price']\nprice_Weekend = purchase_data.loc[purchase_data['WEEKDAY']=='Weekend','Final Price']\n\n##KS test\n_,p_value_weekday = stats.ks_2samp(price_Weekday, price_Weekend)\n\n\n#Plot\nsns.boxplot(x='Log_Final Price',y='WEEKDAY',data = purchase_data)\n\nsns.FacetGrid(purchase_data,hue='WEEKDAY',height=5).map(sns.histplot,'Log_Final Price').add_legend()\n\n","1e635125":"t = PrettyTable(['1st Dist(Count)','2nd Dist(Count)','KS test p-value'])\nt.add_row(['Weekday(2000)','Weekend(800)', p_value_weekday])\n\nprint(t)","564dd580":"print('Mean and Std_Dev for Weekday',np.mean(price_Weekday),np.std(price_Weekday))\nprint('Mean and Std_Dev for Weekend',np.mean(price_Weekend),np.std(price_Weekend))\n","3b7e1315":"## Extracting each\nprice_Beginning = purchase_data.loc[purchase_data['Beginning_Mid_End_Month']=='Beginning','Final Price']\nprice_Mid = purchase_data.loc[purchase_data['Beginning_Mid_End_Month']=='Mid','Final Price']\nprice_End = purchase_data.loc[purchase_data['Beginning_Mid_End_Month']=='End','Final Price']\n\n##KS test\n_,p_value_Beginning_Mid = stats.ks_2samp(price_Beginning, price_Mid)\n_,p_value_Beginning_End = stats.ks_2samp(price_Beginning, price_End)\n_,p_value_Mid_End = stats.ks_2samp(price_Mid, price_End)\n\n#Plot\nsns.boxplot(x='Log_Final Price',y='Beginning_Mid_End_Month',data = purchase_data)\nsns.FacetGrid(purchase_data,hue='Beginning_Mid_End_Month',height=5).map(sns.histplot,'Log_Final Price').add_legend()\n\n","5f9aaf2f":"t = PrettyTable(['1st Dist(Count)','2nd Dist(Count)','KS test p-value'])\nt.add_row(['Beginning(847)','Mid(1147)', p_value_Beginning_Mid])\nt.add_row(['Beginning(1147)','End(1099)', p_value_Beginning_End])\nt.add_row(['Mid(847)','End(1099)', p_value_Mid_End])\n\nprint(t)","a89e4513":"purchase_data.info()","a13ac2b4":"show(purchase_data)","b33b9b4e":"## 1.1) Purchase Data","2fc40fcf":"#### Observation","becfc006":"## 2.2) Final Price and City Tier","f7f8ec50":"# Ideas","1584046b":"#### Observation\n\n1) Spending habits during sale time and no sale time is same, KS test also has high p-value, denoting we fail to reject **H0: Two samples are from same distirbution**","315b35d2":"#### Observation\n","66117303":"### 1.4) Final Price and Weekday","5f92f11b":"# 1) Autoviz","ae2fb770":"## 1.5) Final Price and Time of the Month","546472c6":"## 2.1) Final Price and Covid","247c1861":"# Chandan","5dd84308":"# Common","c94d3ddd":"## 1.3) Final Price and Sale","79ffde82":"#### Observation\n\n","dd68852b":"## 2) Univariate Analysis\n### Data: Purchase_data\n1) Continuous Column: MRP, Final Price\n\n*(MRP and Final Price have Corr of 0.9, will consider only Final Price as variable for evaluation b\/w them)*\n\n2) Categorical Column: Name, State, City, City_Tier, Covid, Categories,Subcategories, Sale, Beginning_Mid_End_Month, Weekday, Brand\n\n3) Non Negative Column: Order Date, Quantity, Ratings, Discount%, GST%%\n\n4) UseLess Column: Invoice ID","2f954e1b":"# Libraries","696a493f":"#  More Feature Engineering","b409aa81":"## 1.2) Survey Data","353305b7":"#### Observation"}}