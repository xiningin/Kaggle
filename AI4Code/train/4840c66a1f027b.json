{"cell_type":{"b35c4577":"code","ff3356d3":"code","67fdf383":"code","a7f3c67d":"code","062815d8":"code","d29cea5f":"code","ba2f990e":"code","2b442e44":"code","4b433e87":"code","c82cf814":"code","89497fab":"code","a893815c":"code","89ed5365":"code","17289e70":"code","48b46011":"code","b6be8ed4":"code","5255bb65":"code","83f95309":"code","ced9a7da":"code","a8d5395d":"code","b2849a55":"code","d00c1ed5":"code","ae467a03":"code","212fb74d":"code","f91b7849":"code","229d99db":"code","573e291c":"code","240ce9df":"code","1076e891":"code","4b7e7210":"code","dfbee1e2":"code","fc2a0421":"code","f408b0c4":"code","f109b49b":"code","83f7c905":"code","74e4b04f":"code","9fe6884a":"code","4760b69a":"code","8c8ccc09":"code","87b09164":"code","cff05889":"code","0b7ad465":"code","334e2143":"code","b7e0e826":"code","32243932":"code","eb04bcd1":"code","cd751b79":"code","b4e495bd":"code","5ac658b3":"code","9ca4a4ec":"code","ce80c10b":"code","f0e9ad82":"code","736d6e21":"code","f88154b5":"code","1c5da2d4":"code","1d4fdb9b":"code","aa65abc3":"code","a11b0eb1":"code","8452bf02":"code","e5c4aea5":"code","49c480eb":"code","dcd7ff08":"code","ba5cb704":"code","454fc217":"code","5cae5da3":"code","309e401e":"code","1785d89a":"code","3d96878e":"code","1cc86af0":"code","42ce0dcd":"code","71548168":"code","c00240cd":"code","f95fa960":"code","c3a594e0":"code","b1496abc":"code","e07fe483":"code","b4c99b1d":"code","101ac256":"code","00b077ce":"code","4c672132":"code","40ebb84d":"code","21701d73":"code","cd3bb6be":"code","0e4e8820":"code","21bfdda4":"code","e536416a":"code","0847f253":"code","3d328a4b":"code","27756ba1":"markdown"},"source":{"b35c4577":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport numpy as np\nimport pandas as pd","ff3356d3":"import fastai\nprint(\"fastai: \",fastai.__version__)\nimport torch\nprint(\"Torch: \",torch.__version__)\nimport torchvision\nprint(\"Torchvision: \",torchvision.__version__)\nimport sklearn\nprint(\"sklearn: \",sklearn.__version__)\nimport sys\nprint(\"Python: \",sys.version)","67fdf383":"# if torch.cuda.is_available():\n#     devID=torch.cuda.current_device()\n#     print(\"GPU: \",torch.cuda.get_device_name(devID))\n# else:\n#     print(\"Torch Cuda not avaialbe\")","a7f3c67d":"# device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n# device","062815d8":"from fastai.vision import *\nfrom fastai.metrics import error_rate\nfrom fastai import *","d29cea5f":"PATH = '..\/input\/petfinder-adoption-prediction\/'\nOUT_PATH = '.\/'","ba2f990e":"import os\nprint(os.listdir(OUT_PATH))","2b442e44":"import os\nprint(os.listdir(PATH))","4b433e87":"!pwd","c82cf814":"# !ls","89497fab":"import os\nprint(os.listdir(PATH+'test'))","a893815c":"trainCSV = pd.read_csv(PATH+'train\/train.csv')\ntrainCSV.head().T","89ed5365":"trainID = trainCSV[['PetID', 'AdoptionSpeed']].copy()\ntrainID.head()","17289e70":"# trainID.info()","48b46011":"# trainID.describe()","b6be8ed4":"classes = trainID['AdoptionSpeed'].value_counts()\nclasses","5255bb65":"# classes.shape, type(classes)","83f95309":"#check if target has any missing values\ntrainID['AdoptionSpeed'].isnull().values.any()","ced9a7da":"testCSV = pd.read_csv(PATH+'test\/test.csv')\ntestCSV.head().T","a8d5395d":"testID = testCSV[['PetID']].copy()\ntestID.head()","b2849a55":"path_img = PATH + 'train_images'\nfnames = get_image_files(path_img)\nfnames[:5]","d00c1ed5":"# open_image(fnames[0])","ae467a03":"# # print few images from train set\n# fig=plt.figure(figsize=(20, 15))\n# columns = 4\n# rows = 4\n# for i in range(1, columns*rows +1):\n#     img = plt.imread(fnames[i])\n#     fig.add_subplot(rows, columns, i)\n#     plt.imshow(img)\n# plt.show()","212fb74d":"# # read image size\n# im=array([list(open_image(image).size) for image in fnames])\n# type(im)","f91b7849":"# histogram of x\n# plt.hist(im[:,0]);","229d99db":"# histogram of y\n# plt.hist(im[:,1]);","573e291c":"tfms = get_transforms(do_flip=True)","240ce9df":"#view image augmentations\ndef get_ex(): return open_image(fnames[0])\n\ndef plots_f(rows, cols, width, height, **kwargs):\n    [get_ex().apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(\n     rows,cols,figsize=(width,height))[1].flatten())]","1076e891":"# plots_f(3, 4, 12, 6, size=224)","4b7e7210":"trainID.head()","dfbee1e2":"#pattern to parse full file path+name\n# group(0) - file name with index and jpg extension\n# group(1) - file name with index but without jpg extension\n# group(2) - file name without index nor jpeg extension\n# group(3) - file name index number\npat = r\"(([\\w\\.-]+)-(\\d+))\\.jpg\"\npat = re.compile(pat)\npat","fc2a0421":"#test and verify re parsing pattern\nres = pat.search(\"..\/input\/train_images\/8e0d65b3e-1.jpg\")\nres.group(0), res.group(1), res.group(2), res.group(3)","f408b0c4":"#create new empty DataFrame for each File image in the row and copied Adption Speed value\nNewList =  pd.DataFrame(columns=[\"PetID\",\"AdoptionSpeed\"])\nNewList","f109b49b":"# Loop through every file name, find match in Train Target DataFrame, extract Adoption Speed value, and \n# append new row into NewList DataFrame\nfor name in fnames:\n    #parse file path+name\n    res = pat.search(str(name))\n    #print(\"core name: \", res.group(2))      #file_core = res.group(2)\n    if ((trainID['PetID']==res.group(2)).values.any()): #if fname core is found in dataframe with PetID,AdoptionTime\n            AdoptionSpeed=trainID[trainID['PetID']==res.group(2)].AdoptionSpeed.values[0] #extract Adoption Time\n            #copy row into new Data Frame\n            NewList = NewList.append(pd.DataFrame({\"PetID\":[res.group(1)], \"AdoptionSpeed\":[AdoptionSpeed] }),ignore_index = True)","83f7c905":"NewList.head()","74e4b04f":"data = ImageDataBunch.from_df(PATH, NewList, folder='train_images', ds_tfms=tfms, size=224, suffix='.jpg', bs=8)","9fe6884a":"#Number of files\nlen(fnames)","4760b69a":"data.normalize(imagenet_stats)","8c8ccc09":"#show few images from data set with Adoptoin Speed as class above\n# data.show_batch(rows=2, figsize=(10,8), ds_type=DatasetType.Train)","87b09164":"#list data classes\nprint(data.classes)\nlen(data.classes)","cff05889":"#doc(create_cnn)","0b7ad465":"kappa = KappaScore()\nkappa.weights = \"quadratic\"\n","334e2143":"print(os.listdir(\"..\/input\/\"))","b7e0e826":"Path('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(parents=True, exist_ok = True)\nshutil.copy('..\/input\/resnet34fastai\/resnet34.pth', '\/tmp\/.cache\/torch\/checkpoints\/resnet34-333f7ec4.pth')","32243932":"#learn = cnn_learner(data, models.resnet34, path = OUT_PATH, metrics=error_rate)\nlearn = cnn_learner(data, models.resnet34, path = OUT_PATH, metrics=[kappa, accuracy])","eb04bcd1":"learn.model","cd751b79":"learn.fit_one_cycle(3)","b4e495bd":"learn.recorder.plot_losses()","5ac658b3":"learn.save('224_pre')","9ca4a4ec":"learn.load('224_pre');","ce80c10b":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot()","f0e9ad82":"#learn.fit_one_cycle(3, max_lr=slice(1e-3,5e-2))","736d6e21":"learn.fit_one_cycle(5, max_lr=slice(1e-6,1e-5))","f88154b5":"learn.recorder.plot_losses()","1c5da2d4":"#learn.fit_one_cycle(3, max_lr=slice(1e-6,1e-5))","1d4fdb9b":"learn.save('224_all')","aa65abc3":"learn.load('224_all');","a11b0eb1":"# interp = ClassificationInterpretation.from_learner(learn)\n# losses,idxs = interp.top_losses()\n# len(data.valid_ds)==len(losses)==len(idxs)","8452bf02":"# interp.plot_top_losses(9, figsize=(15,11))","e5c4aea5":"# # Run second itteration with size = 299\n# data = ImageDataBunch.from_df(PATH, NewList, folder='train_images', ds_tfms=tfms, size=299, suffix='.jpg', bs=8)\n# data.normalize(imagenet_stats)","49c480eb":"# learn.data = data\n# data.train_ds[0][0].shape","dcd7ff08":"# # preload last weights\n# learn.load('224_all')","ba5cb704":"# learn.freeze()\n# learn.lr_find(start_lr=1e-8)\n# learn.recorder.plot()","454fc217":"# learn.fit_one_cycle(3, max_lr=1e-4)","5cae5da3":"# learn.recorder.plot_losses()","309e401e":"# learn.save('299_pre')","1785d89a":"# learn.load('299_pre')","3d96878e":"# learn.unfreeze()\n# learn.lr_find()\n# learn.recorder.plot()","1cc86af0":"# learn.fit_one_cycle(3, max_lr=slice(1e-7,2e-6))","42ce0dcd":"# learn.recorder.plot_losses()","71548168":"# learn.save('299_all')","c00240cd":"learn.export()\nlearn.path","f95fa960":"# testing DataFrame\ntest = ImageList.from_folder(PATH+'test_images')\nlen(test)","c3a594e0":"learn = load_learner(path=learn.path, test=test)","b1496abc":"learn.data.test_ds.items","e07fe483":"learn.data.test_ds.items[5]","b4c99b1d":"learn.data.test_dl.device","101ac256":"learn.data.test_ds","00b077ce":"preds, _ = learn.get_preds(ds_type=DatasetType.Test)","4c672132":"# find highest probability \nPrediction = preds.argmax(dim=1)\nPrediction = Prediction.numpy().tolist()\nPrediction[:10]","40ebb84d":"# Prediction.shape","21701d73":"submission = pd.read_csv(PATH+'test\/sample_submission.csv')\nsubmission.head()","cd3bb6be":"submission.PetID[0]","0e4e8820":"import statistics\nimport math","21bfdda4":"# Extract file names wthout .jpg extension and path\nfnamesShort = [f.name[:-4] for f in learn.data.test_ds.items]\nfnamesShort[:10]","e536416a":"TotalPhotoMissing = 0\n# Iterate DataFrame for each index and row (index and value)\nfor index, PetID in submission.iterrows():\n    #print(index, PetID.values[0])  #extract Submission index and PetID core\n    \n    #find indices of all files in fnames that match PetID core name\n    indices = [i for i, s in enumerate(fnamesShort) if PetID.values[0] in s]  \n    #print(indices)\n    PetIdPredictions = [Prediction[i] for i in indices] # get list of predictions with given indeces\n    #print(PetIdPredictions)\n    if( len(PetIdPredictions) == 0):\n        TotalPhotoMissing += 1\n        #print(\"? \",index, indices, PetID.values[0])\n        FinalPrediction=2 # set to a common class\n    else:\n        FinalPrediction=math.ceil(statistics.median([Prediction[i] for i in indices])) #median with rounding up\n    #print(FinalPrediction)\n    submission.AdoptionSpeed[index] = FinalPrediction\nprint (\" Test set has \",TotalPhotoMissing, \"missing images\" )","0847f253":"submission.head()","3d328a4b":"submission.to_csv('submission.csv', index=False)","27756ba1":"* 0 - Pet was adopted on the same day as it was listed.\n* 1 - Pet was adopted between 1 and 7 days (1st week) after being listed.\n* 2 - Pet was adopted between 8 and 30 days (1st month) after being listed.\n* 3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed.\n* 4 - No adoption after 100 days of listed. (There are no pets in this dataset that waited between 90 and 100 days). "}}