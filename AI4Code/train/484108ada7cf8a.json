{"cell_type":{"09a81424":"code","1cf7a881":"code","d1ecd14b":"code","fd2e2ba6":"code","38543b6e":"code","86cdb3b6":"code","13d538ac":"code","c18194c2":"code","a356a0b6":"code","49519e41":"code","320c4598":"code","f6562fe5":"code","26a75425":"code","6261db72":"code","6c5f452f":"code","f409e67a":"code","fc80f12e":"code","914a6525":"code","1d31d2e6":"markdown","d2019707":"markdown","8a97872f":"markdown","71e874f6":"markdown","a4db20b5":"markdown","5e214c64":"markdown","e3fd0694":"markdown","54252fbd":"markdown","dc9bce73":"markdown","bb002b36":"markdown"},"source":{"09a81424":"import time\nimport numpy   as np\nimport pandas  as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport altair as alt\nimport missingno as msno\nimport unidecode\nfrom geopy.geocoders import Nominatim","1cf7a881":"train = pd.read_csv(\"..\/input\/murcia-car-challenge\/train.csv\",            index_col=\"Id\")\ntest  = pd.read_csv(\"..\/input\/murcia-car-challenge\/test.csv\",             index_col=\"Id\")\nsub   = pd.read_csv(\"..\/input\/murcia-car-challenge\/sampleSubmission.csv\", index_col=\"Id\")","d1ecd14b":"def cleanString(valor):\n    return unidecode.unidecode(valor.upper().strip())\n\ndef clean(data):\n    \n    data['Marca']  = data['Marca'].apply(cleanString)\n    data['Modelo'] = data['Modelo'].apply(cleanString)\n\n    data['Marca'].replace(\"MERCEDES\", \"MERCEDES-BENZ\",     inplace=True) # Fix Mercedes\n    data['Modelo'].replace(\"CLASE \", \"CLASE_\", regex=True, inplace=True) # Fix Mercedes models\n    data['Modelo'].replace(\"SERIE \", \"SERIE_\", regex=True, inplace=True) # Fix BMW models\n    data['Modelo'].replace(\"RANGE ROVER \", \"\", regex=True, inplace=True) # Fix Land Rover models\n    \n    return data\n\ntrain = clean(train)\ntest  = clean(test)","fd2e2ba6":"geolocator = Nominatim(user_agent=\"myGeocoder\")\n\nprovincias = train['Provincia'].unique().tolist()\nprovincias[:5]","38543b6e":"def getLatLon():\n    provincias_loc = pd.DataFrame(columns=('Provincia', 'Latitude', 'Longitude'))\n\n    for p in provincias:\n        loc = geolocator.geocode(p.replace('_', ' ') + \", Espa\u00f1a\")\n        print(p,\"-->\", loc, \"-->\", loc.latitude, loc.longitude)\n        provincias_loc = provincias_loc.append({'Provincia':p , 'Latitude':loc.latitude, 'Longitude':loc.longitude}, ignore_index=True)\n        time.sleep(.5)\n\n    provincias_loc.to_csv(\"provincias.csv\", index=False)\n\ngetLatLon()\nprovincias_loc = pd.read_csv(\"provincias.csv\")\nprovincias_loc.head()","86cdb3b6":"alt.Chart(provincias_loc).mark_circle().encode(\n    longitude='Longitude:Q',\n    latitude='Latitude:Q',\n    #color='leading digit:N',\n    tooltip='Provincia:N'\n)","13d538ac":"train = pd.merge(train, provincias_loc, on='Provincia', how='left')\ntest  = pd.merge(test,  provincias_loc, on='Provincia', how='left')","c18194c2":"train.head(3)","a356a0b6":"train[\"Modelo_1st\"] = train.Modelo.str.split().str.get(0)\ntest[\"Modelo_1st\"]  = test.Modelo.str.split().str.get(0)","49519e41":"def getMotorLitros(modelo):\n    if \". \" in modelo:\n        idx   = modelo.index(\". \")\n        left  = modelo[idx-1:idx]\n        right = modelo[idx+2:idx+3]\n        if left.isnumeric() and right.isnumeric():\n            return left+\".\"+right\n        else:\n            return None        \n    else:\n        return None\n\ntrain['Motor_litros'] = train['Modelo'].apply(getMotorLitros)\ntest['Motor_litros']  = test['Modelo'].apply(getMotorLitros)","320c4598":"train['Motor_litros'].value_counts()[:10]","f6562fe5":"train[[\"Marca\", \"Modelo\", \"Modelo_1st\", \"Motor_litros\"]].sample(10)","26a75425":"def tranform2type(Tiempo):\n    if   Tiempo.endswith('d\u00edas'):  return 'dias'\n    elif Tiempo.endswith('horas'): return 'horas'\n    elif Tiempo.endswith('hora'):  return 'hora'\n    elif Tiempo.endswith('min'):   return 'min'\n    elif Tiempo.endswith('seg'):   return 'seg'\n    elif Tiempo.endswith('nuevo anuncio'):  return 'nuevo anuncio'\n    elif Tiempo.endswith('destacado'):      return 'destacado'\n\n    \ndef tranform2dias(Tiempo):\n    if   Tiempo.endswith('d\u00edas'):  return int(Tiempo.replace(' d\u00edas', ''))\n    elif Tiempo.endswith('horas'): return int(Tiempo.replace(' horas', ''))\/24\n    elif Tiempo.endswith('hora'):  return int(Tiempo.replace(' hora', ''))\/24\n    elif Tiempo.endswith('min'):   return int(Tiempo.replace(' min', ''))\/(60*24)\n    elif Tiempo.endswith('seg'):   return int(Tiempo.replace(' seg', ''))\/(60*60*24)\n    elif Tiempo.endswith('nuevo anuncio'):  return 0\n    elif Tiempo.endswith('destacado'):      return -1\n\ntrain[\"Tiempo_d\u00edas\"] = train[\"Tiempo\"].apply(tranform2dias) # Variable numerica\ntrain[\"Tiempo_tipo\"] = train[\"Tiempo\"].apply(tranform2type) # Variable categorica\n\ntest[\"Tiempo_d\u00edas\"] = test[\"Tiempo\"].apply(tranform2dias) # Variable numerica\ntest[\"Tiempo_tipo\"] = test[\"Tiempo\"].apply(tranform2type) # Variable categorica","6261db72":"train[[\"Tiempo\", \"Tiempo_d\u00edas\", \"Tiempo_tipo\"]].sample(5)","6c5f452f":"current_year = 2020.1\ntrain[\"A\u00f1os hasta Feb 2020\"] = abs(train[\"A\u00f1o\"] - current_year)\ntrain[\"Kms medios por a\u00f1o\"]  = train[\"Kms\"] \/ train[\"A\u00f1os hasta Feb 2020\"]\n\ntest[\"A\u00f1os hasta Feb 2020\"] = abs(test[\"A\u00f1o\"] - current_year)\ntest[\"Kms medios por a\u00f1o\"]  = test[\"Kms\"] \/ train[\"A\u00f1os hasta Feb 2020\"]","f409e67a":"train[[\"Kms\", \"A\u00f1o\", \"A\u00f1os hasta Feb 2020\", \"Kms medios por a\u00f1o\"]].sample(10)","fc80f12e":"train.rename(columns={'A\u00f1o':         'Ano'},         inplace=True)\ntrain.rename(columns={'A\u00f1o_missing': 'Ano_missing'}, inplace=True)\ntrain.rename(columns={'Tiempo_d\u00edas': 'Tiempo_dias'}, inplace=True)\n\ntest.rename(columns={'A\u00f1o':         'Ano'},         inplace=True)\ntest.rename(columns={'A\u00f1o_missing': 'Ano_missing'}, inplace=True)\ntest.rename(columns={'Tiempo_d\u00edas': 'Tiempo_dias'}, inplace=True)","914a6525":"train.to_csv(\"train_featEng.csv\", index_label=\"Id\")\ntest.to_csv(\"test_featEng.csv\", index_label=\"Id\")","1d31d2e6":"# Kms recorridos medios al a\u00f1o","d2019707":"Le\u00f3n parece que no lo coje bien","8a97872f":"# <center> Feature engeniring\n# Provincias -> lat & lon","71e874f6":"## Data cleaning","a4db20b5":"# Rename to ascii colum names","5e214c64":"# Modelo \"gen\u00e9rico\" del coche","e3fd0694":"# Capacidad en litros del motor","54252fbd":"# Variable Tiempo\n1. Pasar todo a d\u00edas:\n2. Obtener tipos de Tiempo\n   - d\u00edas\n   - horas\n   - min\n   - seg\n   - nuevo anuncio\n   - destacado","dc9bce73":"## Read data","bb002b36":"# Save data"}}