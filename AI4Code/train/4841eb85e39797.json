{"cell_type":{"cf9b7e7d":"code","7f269daf":"code","736aa18b":"code","94518996":"code","f4694324":"code","c7ea844a":"code","ec179365":"code","195065fe":"code","7fa111df":"code","2ed117c5":"code","1375961e":"code","5e6d9984":"code","4e9715b0":"code","5b83303c":"code","4addae1c":"code","ae33d4aa":"code","273d3d0c":"code","d37218d9":"code","e467c77e":"code","8950af3c":"code","009c81f5":"code","f32a3119":"code","d0624480":"code","2094737d":"code","958cb3bc":"code","1ded7d46":"code","d4a1ed74":"code","414cd181":"code","1e9f93b8":"code","3f44df10":"code","9a67eb26":"code","e40ff4bf":"code","9a582aeb":"code","fe5434eb":"code","fe0efa4c":"code","70e7b942":"code","768b4784":"code","cbbf8ddf":"code","1c6a95a3":"code","72f99dd8":"code","39a3d063":"code","cc7262ea":"code","05a51a80":"code","4a4b2619":"code","153562f6":"code","37a7f55b":"markdown","758753d6":"markdown","0698b50a":"markdown","42ac3df9":"markdown","210fb470":"markdown","16f413c3":"markdown","e8ec275a":"markdown","36aea131":"markdown","a3c63539":"markdown"},"source":{"cf9b7e7d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7f269daf":"df_train = pd.read_csv(\"..\/input\/ccdata\/CC GENERAL.csv\")\ndf_train.shape","736aa18b":"df_train.head()","94518996":"df_train.info()","f4694324":"df_train.columns","c7ea844a":"df_train.describe()","ec179365":"!pip install dataprep","195065fe":"from dataprep.eda import plot, plot_correlation, create_report, plot_missing","7fa111df":"plot(df_train)","2ed117c5":"create_report(df_train)","1375961e":"df_train[\"CREDIT_LIMIT\"].fillna(df_train[\"CREDIT_LIMIT\"].median(), inplace=True)\ndf_train[\"MINIMUM_PAYMENTS\"].fillna(df_train[\"MINIMUM_PAYMENTS\"].median(), inplace=True)\ndf_train.drop(['CUST_ID'], axis=1, inplace=True)","5e6d9984":"fig, axes = plt.subplots(nrows=6, ncols=2, figsize=(50,80))\ndf_train[\"BALANCE\"].hist(bins=50, ax=axes[0][0]).set_title(\"BALANCE\", fontsize=30)\ndf_train[\"BALANCE\"].to_frame().boxplot(ax=axes[0][1], vert=False).set_title(\"BALANCE\", fontsize=30)\ndf_train[\"BALANCE_FREQUENCY\"].hist(bins=50, ax=axes[1][0]).set_title(\"BALANCE_FREQUENCY\", fontsize=30)\ndf_train[\"BALANCE_FREQUENCY\"].to_frame().boxplot(ax=axes[1][1], vert=False).set_title(\"BALANCE_FREQUENCY\", fontsize=30)\ndf_train[\"PURCHASES\"].hist(bins=50, ax=axes[2][0]).set_title(\"PURCHASES\", fontsize=30)\ndf_train[\"PURCHASES\"].to_frame().boxplot(ax=axes[2][1], vert=False).set_title(\"PURCHASES\", fontsize=30)\ndf_train[\"ONEOFF_PURCHASES\"].hist(bins=50, ax=axes[3][0]).set_title(\"BALANCE\", fontsize=30)\ndf_train[\"ONEOFF_PURCHASES\"].to_frame().boxplot(ax=axes[3][1], vert=False).set_title(\"BALANCE\", fontsize=30)\ndf_train[\"INSTALLMENTS_PURCHASES\"].hist(bins=50, ax=axes[4][0]).set_title(\"BALANCE_FREQUENCY\", fontsize=30)\ndf_train[\"INSTALLMENTS_PURCHASES\"].to_frame().boxplot(ax=axes[4][1], vert=False).set_title(\"BALANCE_FREQUENCY\", fontsize=30)\ndf_train[\"ONEOFF_PURCHASES_FREQUENCY\"].hist(bins=50, ax=axes[5][0]).set_title(\"ONEOFF_PURCHASES_FREQUENCY\", fontsize=30)\ndf_train[\"ONEOFF_PURCHASES_FREQUENCY\"].to_frame().boxplot(ax=axes[5][1], vert=False).set_title(\"ONEOFF_PURCHASES_FREQUENCY\", fontsize=30)\n","4e9715b0":"fig, axes = plt.subplots(nrows=9, ncols=2, figsize=(80,140))\ndf_train[\"PURCHASES_INSTALLMENTS_FREQUENCY\"].hist(bins=50, ax=axes[0][0]).set_title(\"PURCHASES_INSTALLMENTS_FREQUENCY\", fontsize=30)\ndf_train[\"PURCHASES_INSTALLMENTS_FREQUENCY\"].to_frame().boxplot(ax=axes[0][1], vert=False).set_title(\"PURCHASES_INSTALLMENTS_FREQUENCY\", fontsize=30)\ndf_train[\"CASH_ADVANCE_FREQUENCY\"].hist(bins=50, ax=axes[1][0]).set_title(\"CASH_ADVANCE_FREQUENCY\", fontsize=30)\ndf_train[\"CASH_ADVANCE_FREQUENCY\"].to_frame().boxplot(ax=axes[1][1], vert=False).set_title(\"CASH_ADVANCE_FREQUENCY\", fontsize=30)\ndf_train[\"CASH_ADVANCE_TRX\"].hist(bins=50, ax=axes[2][0]).set_title(\"CASH_ADVANCE_TRX\", fontsize=30)\ndf_train[\"CASH_ADVANCE_TRX\"].to_frame().boxplot(ax=axes[2][1], vert=False).set_title(\"CASH_ADVANCE_TRX\", fontsize=30)\ndf_train[\"PURCHASES_TRX\"].hist(bins=50, ax=axes[3][0]).set_title(\"PURCHASES_TRX\", fontsize=30)\ndf_train[\"PURCHASES_TRX\"].to_frame().boxplot(ax=axes[3][1], vert=False).set_title(\"PURCHASES_TRX\", fontsize=30)\ndf_train[\"CREDIT_LIMIT\"].hist(bins=50, ax=axes[4][0]).set_title(\"CREDIT_LIMIT\", fontsize=30)\ndf_train[\"CREDIT_LIMIT\"].to_frame().boxplot(ax=axes[4][1], vert=False).set_title(\"CREDIT_LIMIT\", fontsize=30)\ndf_train[\"PAYMENTS\"].hist(bins=50, ax=axes[5][0]).set_title(\"PAYMENTS\", fontsize=30)\ndf_train[\"PAYMENTS\"].to_frame().boxplot(ax=axes[5][1], vert=False).set_title(\"PAYMENTS\", fontsize=30)\ndf_train[\"MINIMUM_PAYMENTS\"].hist(bins=50, ax=axes[6][0]).set_title(\"MINIMUM_PAYMENTS\", fontsize=30)\ndf_train[\"MINIMUM_PAYMENTS\"].to_frame().boxplot(ax=axes[6][1], vert=False).set_title(\"MINIMUM_PAYMENTS\", fontsize=30)\ndf_train[\"PRC_FULL_PAYMENT\"].hist(bins=50, ax=axes[7][0]).set_title(\"PRC_FULL_PAYMENT\", fontsize=30)\ndf_train[\"PRC_FULL_PAYMENT\"].to_frame().boxplot(ax=axes[7][1], vert=False).set_title(\"PRC_FULL_PAYMENT\", fontsize=30)\ndf_train[\"CASH_ADVANCE\"].hist(bins=50, ax=axes[8][0]).set_title(\"CASH_ADVANCE\", fontsize=30)\ndf_train[\"CASH_ADVANCE\"].to_frame().boxplot(ax=axes[8][1], vert=False).set_title(\"CASH_ADVANCE\", fontsize=30)","5b83303c":"from typing import Tuple \nfrom sklearn.base import BaseEstimator, TransformerMixin","4addae1c":"def find_boxplot_boundaries(\n    col: pd.Series, whisker_coeff: float = 1.5\n)->  Tuple[float, float]:\n    Q1 = col.quantile(0.25)\n    Q3 = col.quantile(0.75)\n    IQR = Q3 - Q1\n    lower = Q1 - whisker_coeff*IQR\n    upper = Q3 + whisker_coeff*IQR\n    return lower, upper\nclass BoxplotOutlierClipper(BaseEstimator, TransformerMixin):\n    def __init__(self, whisker_coeff: float=1.5):\n        self.whisker = whisker_coeff\n        self.lower = None\n        self.upper = None\n    def fit(self, X: pd.Series):\n        self.lower, self.upper = find_boxplot_boundaries(X, self.whisker)\n        return self\n    def transform(self, X):\n        return X.clip(self.lower, self.upper)","ae33d4aa":"features = [\"BALANCE\", \"BALANCE_FREQUENCY\", \"PURCHASES\", \"ONEOFF_PURCHASES\", \"INSTALLMENTS_PURCHASES\", \"ONEOFF_PURCHASES_FREQUENCY\",\n            \"PURCHASES_INSTALLMENTS_FREQUENCY\", \"CASH_ADVANCE_FREQUENCY\", \"CASH_ADVANCE_TRX\", \"PURCHASES_TRX\", \"CREDIT_LIMIT\", \"PAYMENTS\",\n            \"MINIMUM_PAYMENTS\", \"PRC_FULL_PAYMENT\", \"CASH_ADVANCE\"\n           ]\na=[]\nfor i in features:\n    clipped = BoxplotOutlierClipper().fit_transform(df_train[i])\n    a.append(clipped)","273d3d0c":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(20,15))\na[0].hist(bins=50, ax=axes[0][0]).set_title(\"BALANCE\")\na[0].to_frame().boxplot(ax=axes[0][1], vert=False).set_title(\"BALANCE\")\na[1].hist(bins=50, ax=axes[1][0]).set_title(\"BALANCE_FREQUENCY\")\na[1].to_frame().boxplot(ax=axes[1][1], vert=False).set_title(\"BALANCE_FREQUENCY\")\na[2].hist(bins=50, ax=axes[2][0]).set_title(\"PURCHASES\")\na[2].to_frame().boxplot(ax=axes[2][1], vert=False).set_title(\"PURCHASES\")","d37218d9":"for (i, j) in enumerate(features,0):\n    df_train[j]=a[i]","e467c77e":"df_train.head()","8950af3c":"from sklearn.preprocessing import StandardScaler, normalize\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA","009c81f5":"# from sklearn.metrics.pairwise import consine_similarity\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.mixture import GaussianMixture\n# from sklearn.cluster import SpectraClustering\nfrom sklearn.cluster import DBSCAN","f32a3119":"train = StandardScaler().fit_transform(df_train)","d0624480":"scores = []\nrange_values = range(1, 20,1)\nfor i in range_values:\n    kmeans = KMeans(n_clusters=i)\n    kmeans.fit(train)\n    scores.append(kmeans.inertia_)","2094737d":"plt.plot(scores, marker='o')\nplt.xlabel('Clusters')\nplt.ylabel('Scores')","958cb3bc":"kmeans = KMeans(4)\nkmeans.fit(train)\nlabels = kmeans.labels_","1ded7d46":"kmeans.cluster_centers_.shape","d4a1ed74":"cluster_centers = pd.DataFrame(data=kmeans.cluster_centers_, columns=[df_train.columns])\ncluster_centers","414cd181":"labels.max(), labels.min()","1e9f93b8":"\ny_kmeans = kmeans.fit_predict(train)","3f44df10":"y_kmeans","9a67eb26":"credictcard_cluster = pd.concat([df_train, pd.DataFrame({'Cluster': labels})], axis=1)\ncredictcard_cluster.head()","e40ff4bf":"pca = PCA(n_components=2)\npca_train = pca.fit_transform(train)","9a582aeb":"pca_train","fe5434eb":"pca_df = pd.DataFrame(data=pca_train, columns=['v1', 'v2'])","fe0efa4c":"pca_df.head()","70e7b942":"pca_df_1 = pd.concat([pca_df, pd.DataFrame({'cluster': labels})], axis=1)\npca_df_1.head()","768b4784":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"v1\", y=\"v2\", hue = \"cluster\", data = pca_df_1, palette =['red','green','blue','pink'])\nplt.show()","cbbf8ddf":"kmeans_2 = KMeans(5)\nkmeans_2.fit(train)\nlabels_2 = kmeans_2.labels_","1c6a95a3":"pca_df_2 = pd.concat([pca_df, pd.DataFrame({'cluster': labels_2})], axis=1)\npca_df_2.head()","72f99dd8":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"v1\", y=\"v2\", hue = \"cluster\", data = pca_df_2, palette =['red','green','blue','pink',\"yellow\"])\nplt.show()","39a3d063":"kmeans_3 = KMeans(6)\nkmeans_3.fit(train)\nlabels_3 = kmeans_3.labels_","cc7262ea":"pca_df_3 = pd.concat([pca_df, pd.DataFrame({'cluster': labels_3})], axis=1)\npca_df_3.head()","05a51a80":"plt.figure(figsize=(10,10))\nax = sns.scatterplot(x=\"v1\", y=\"v2\", hue = \"cluster\", data = pca_df_3, palette =['red','green','blue','pink',\"yellow\", \"black\"])\nplt.show()","4a4b2619":"clusters=pd.concat([df_train, pd.DataFrame({'cluster':labels_3})], axis=1)\nclusters.head()","153562f6":"for c in clusters:\n    grid= sns.FacetGrid(clusters, col='cluster')\n    grid.map(plt.hist, c)","37a7f55b":"<h1> Credit Card Dataset For Clustering <\/h1> ","758753d6":"* Theo quan s\u00e1t, c\u1ee5m th\u1ee9 4 h\u00ecnh th\u00e0nh elbow c\u1ee7a \u0111\u01b0\u1eddng cong\n* Tuy nhi\u00ean gi\u00e1 tr\u1ecb kh\u00f4ng gi\u1ea3m tuy\u1ebfn t\u00ednh \u0111\u1ebfn c\u1ee5m th\u1ee9 8 \n* D\u1ee5a v\u00e0o Silhoute Score v\u00e0 Elbow, c\u00f3 th\u1ec3 ch\u1ecdn cluster 8","0698b50a":"* Mean balance is 1564\n* Balance frequency is frequently updated on average ~0.9\n* Purchases average is 1000\n* one off purchase average is 600\n* Average purchases frequency is around 0.5\n* average ONEOFF_PURCHASES_FREQUENCY, PURCHASES_INSTALLMENTS_FREQUENCY, and CASH_ADVANCE_FREQUENCY are generally low\n* Average credit limit ~ 4500\n* Percent of full payment is 15%\n* Average tenure is 11 years","42ac3df9":"<h2> PCA <\/h2>","210fb470":"C\u00f3 mong mu\u1ed1n x\u1eed l\u00ed \u0111\u1ed9 l\u1ec7ch trong d\u1eef li\u1ec7u c\u1ee7a m\u00ecnh hay kh\u00f4ng \u0111\u1ed1i v\u1edbi v\u1ea5n \u0111\u1ec1 ph\u00e2n c\u1ee5m. V\u00ed d\u1ee5 n\u1ebfu mu\u1ed1n ph\u00e2n c\u1ee5m \u0111\u1ec3 ph\u00e1t hi\u1ec7n h\u00e0ng lo\u1ea1i tr\u01b0\u1eddng h\u1ee3p \u0111\u00f3 th\u00ec kh\u00f4ng n\u00ean x\u1eed l\u00ed c\u00e1c ngo\u1ea1i l\u1ec7 v\u00ec m\u00f4 h\u00ecnh ph\u00e1t hi\u1ec7n ch\u00fang v\u00e0 nh\u00f3m ch\u00fang th\u00e0nh m\u1ed9t c\u1ee5m. \u0110\u1ed1i v\u1edbi b\u00e0i n\u00e0y, t\u00ecm ki\u1ebfm m\u1ed9t visualizayion t\u1ed1t v\u00ec v\u1ea1t s\u1ebd x\u1eed l\u00ed \u0111\u1ed9 l\u1ec7ch c\u00e0ng nhi\u1ec1u c\u00e0ng t\u1ed1t v\u00ec n\u00f3 s\u1ebd gi\u00fap m\u00f4 h\u00ecnh t\u1ea1o th\u00e0nh c\u00e1c c\u1ee5m t\u1ed1t h\u01a1n","16f413c3":"<b> Goals <\/b>: Ph\u00e1t tri\u1ec3n ph\u00e2n kh\u00fac kh\u00e1ch h\u00e0ng \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh chi\u1ebfn l\u01b0\u1ee3c ti\u1ebfp th\u1ecb <br>\n<b> Dataset <\/b>: T\u1eadp d\u0169 li\u1ec7u t\u00f3m t\u1eaft h\u00e0nh vi s\u1eed d\u1ee5ng c\u1ee7a kho\u1ea3ng 9000 ch\u1ee7 th\u1ebb t\u00edn d\u1ee5ng \u0111ang ho\u1ea1t \u0111\u1ed9ng trogn 6 th\u00e1ng g\u1ed3m 18 bi\u1ebfn h\u00e0nh vi","e8ec275a":"<h3> Description Dataset <\/h3>\n* CUSTID : Identification of Credit Card holder (Categorical) <br>\n* BALANCE : Balance amount left in their account to make purchases <br>\n* BALANCEFREQUENCY : How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)<br>\n* PURCHASES : Amount of purchases made from account <br>\n* ONEOFFPURCHASES : Maximum purchase amount done in one-go <br>\n* INSTALLMENTSPURCHASES : Amount of purchase done in installment <br>\n* CASHADVANCE : Cash in advance given by the user <br>\n* PURCHASESFREQUENCY : How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased) <br>\n* ONEOFFPURCHASESFREQUENCY : How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased) <br>\n* PURCHASESINSTALLMENTSFREQUENCY : How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done) <br>\n* CASHADVANCEFREQUENCY : How frequently the cash in advance being paid <br>\n* CASHADVANCETRX : Number of Transactions made with \"Cash in Advanced\" <br>\n* PURCHASESTRX : Numbe of purchase transactions made <br>\n* CREDITLIMIT : Limit of Credit Card for user <br>\n* PAYMENTS : Amount of Payment done by user <br>\n* MINIMUM_PAYMENTS : Minimum amount of payments made by user <br>\n* PRCFULLPAYMENT : Percent of full payment paid by user <br>\n* TENURE : Tenure of credit card service for user","36aea131":"<h2> 1. Data Preprocessing <\/h2>\n<h2> 2. Clustering using Kmeans <\/h2>\n<h2> 3. Interpretion of Clusters <\/h2>\n<h2> 4. Visualization of Cluster using PCA<\/h2>\n","a3c63539":"* 'PURCHASES' have high correlation between one-off purchases, 'installment purchases, purchase transactions, credit limit and payments.\n* Strong Positive Correlation between 'PURCHASES_FREQUENCY' and 'PURCHASES_INSTALLMENT_FREQUENCY'"}}