{"cell_type":{"21fbfd4d":"code","f26d0534":"code","bff8e286":"code","2d4d0059":"code","9d14174b":"code","4cfeac3c":"code","76ab9886":"code","84fd5fb6":"code","fe00c403":"code","d8807bf4":"code","1e6bc219":"code","aa3e3c6d":"code","b5fdefcb":"code","b5d5e46a":"code","e3407165":"code","1b6c4940":"code","5e5f0577":"code","b55db735":"code","524b7e84":"code","f81ddcbd":"markdown"},"source":{"21fbfd4d":"import pandas as pd, numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer","f26d0534":"!pip install indic-nlp-library","bff8e286":"train = pd.read_csv('..\/input\/iiitd-abuse-detection-challenge\/eam2021-train-set\/bq-results-20210825-203004-swh711l21gv2.csv')\ntest = pd.read_csv('..\/input\/iiitd-abuse-detection-challenge\/eam2021-test-set-public\/eam2021-test-set-public.csv')","2d4d0059":"train['label'].value_counts(normalize=True)","9d14174b":"train['language'].value_counts(normalize=True)","4cfeac3c":"lens = train.commentText.str.len()\nlens.mean(), lens.std(), lens.max()","76ab9886":"label_cols = ['label']","84fd5fb6":"len(train),len(test)","fe00c403":"train['commentText'].fillna(\"unknown\", inplace=True)\ntest['commentText'].fillna(\"unknown\", inplace=True)","d8807bf4":"import re, string\nfrom indicnlp.tokenize import indic_tokenize\ndef tokenize(s): return indic_tokenize.trivial_tokenize(s)","1e6bc219":"n = train.shape[0]\n\nvec = TfidfVectorizer(ngram_range=(1,2), tokenizer=tokenize,\n                      strip_accents='unicode', use_idf=1,\n               smooth_idf=1, sublinear_tf=1)\n\n\ntrn_term_doc = vec.fit_transform(train['commentText'])\ntest_term_doc = vec.transform(test['commentText'])","aa3e3c6d":"trn_term_doc, test_term_doc","b5fdefcb":"def pr(y_i, y):\n    p = x[y==y_i].sum(0)\n    return (p+1) \/ ((y==y_i).sum()+1)","b5d5e46a":"x = trn_term_doc\ntest_x = test_term_doc","e3407165":"def get_mdl(y):\n    y = y.values\n    r = np.log(pr(1,y) \/ pr(0,y))\n    m = LogisticRegression(C=2, dual=False, solver='liblinear')\n    x_nb = x.multiply(r)\n    return m.fit(x_nb, y), r","1b6c4940":"preds = np.zeros((len(test), len(label_cols)))\n\nfor i, j in enumerate(label_cols):\n    print('fit', j)\n    m,r = get_mdl(train[j])\n    preds = m.predict(test_x.multiply(r))","5e5f0577":"submid = pd.DataFrame({'Id': test[\"Id\"]})\nsubmission = pd.concat([submid, pd.DataFrame(preds, columns = ['Expected'])], axis=1)\n\nsubmission.to_csv('submission.csv', index=False)","b55db735":"submission.head(n=20)","524b7e84":"submission['Expected'].value_counts(normalize=True)","f81ddcbd":"## Credits: https:\/\/www.kaggle.com\/jhoward\/nb-svm-strong-linear-baseline "}}