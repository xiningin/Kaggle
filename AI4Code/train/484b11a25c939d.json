{"cell_type":{"230d31ff":"code","108ac3c0":"code","600698a0":"code","944ef350":"code","3f847e71":"code","23f89e03":"code","3eccbc91":"code","7882979b":"code","f2fdab20":"code","0d27dd3d":"code","d830b6e8":"code","ff72b42c":"code","ddd9fd25":"code","d147fc8e":"code","8876c151":"code","2cd36377":"code","5070ebf0":"code","9050775e":"code","35c80f33":"code","2fe9df5a":"code","5b3eb242":"code","4b51a442":"code","227887db":"code","b61d74cd":"code","8c77d879":"code","251d9afe":"markdown"},"source":{"230d31ff":"!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle\n\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!chmod 600 ~\/.kaggle\/kaggle.json\n\n!kaggle -v","108ac3c0":"! kaggle competitions download -c taxi","600698a0":"!unzip taxi.zip","944ef350":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport random\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler","3f847e71":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n    torch.cuda.manual_seed_all(777)","23f89e03":"train = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')","3eccbc91":"cab_type = {\"Uber\":0, \"Lyft\":1}\n\ntrain['cab_type']= train['cab_type'].map(cab_type)\ntest['cab_type']= test['cab_type'].map(cab_type)","7882979b":"summary_mapping = {\" Clear \":0,\" Drizzle \":1,\" Foggy \":2,\" Light Rain \":3,\" Mostly Cloudy \":4,\" Overcast \":5,\" Partly Cloudy \":6,\" Possible Drizzle \":7,\" Rain \":8}\n\ntrain['short_summary'] = train['short_summary'].map(summary_mapping)\ntest['short_summary'] = test['short_summary'].map(summary_mapping)","f2fdab20":"icon_mapping = {\" clear-day \":0,\" clear-night \":1,\" cloudy \":2,\" fog \":3,\" partly-cloudy-day \":4,\" partly-cloudy-night \":5,\" rain \":6}\n\ntrain['icon'] = train['icon'].map(icon_mapping)\ntest['icon'] = test['icon'].map(icon_mapping)","0d27dd3d":"train.drop('precipIntensity ',axis = 1,inplace=True)\ntrain.drop('precipProbability',axis = 1,inplace=True)\ntrain.drop('uvIndex',axis = 1,inplace=True)\ntrain.drop('precipIntensityMax',axis = 1,inplace=True)\ntrain.drop('ozone',axis = 1,inplace=True)\n\ntest.drop('precipIntensity ',axis = 1,inplace=True)\ntest.drop('precipProbability',axis = 1,inplace=True)\ntest.drop('uvIndex',axis = 1,inplace=True)\ntest.drop('precipIntensityMax',axis = 1,inplace=True)\ntest.drop('ozone',axis = 1,inplace=True)","d830b6e8":"x_data = train.loc[0:,\"cab_type\":]\ny_data = train.loc[0:,\"price\"]\n\nx_data = np.array(x_data)\ny_data = np.array(y_data)\nscaler = MinMaxScaler()\n\nx_data = scaler.fit_transform(x_data)\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device).reshape(-1,1)\n\nprint(x_train[:5])\nprint(x_train.shape)\nprint(y_train[:5])\nprint(y_train.shape)","ff72b42c":"learning_rate = 1e-3\n#1000\ntraining_epochs = 100\nbatch_size =65","ddd9fd25":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","d147fc8e":"linear1=torch.nn.Linear(14,512,bias=True)\nlinear2=torch.nn.Linear(512,512,bias=True)\nlinear3=torch.nn.Linear(512,512,bias=True)\nlinear4=torch.nn.Linear(512,512,bias=True)\nlinear5=torch.nn.Linear(512,1,bias=True)\n\ndropout=torch.nn.Dropout(p=0.3)\nrelu= torch.nn.LeakyReLU()","8876c151":"torch.nn.init.kaiming_uniform_(linear1.weight)\ntorch.nn.init.kaiming_uniform_(linear2.weight)\ntorch.nn.init.kaiming_uniform_(linear3.weight)\ntorch.nn.init.kaiming_normal_(linear4.weight)\ntorch.nn.init.kaiming_normal_(linear5.weight)","2cd36377":"loss = torch.nn.MSELoss().to(device)\noptimizer = optim.Adam(model.parameters(),lr = learning_rate)","5070ebf0":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n        \n    if(epoch%20 == 0):    \n        print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","9050775e":"x_test = test.loc[0:,\"cab_type\":]\nx_test = np.array(x_test)\nx_test = scaler.transform(x_test)\nx_test = torch.FloatTensor(x_test).to(device)\n\nx_test[:3]","35c80f33":"model(x_test)","2fe9df5a":"with torch.no_grad():\n\n    x_test=np.array(x_test.cpu())\n    x_test=torch.from_numpy(x_test).float().to(device)\n    predict=model(x_test)","5b3eb242":"\ncorrect_prediction = predict.cpu().numpy().reshape(-1,1)","4b51a442":"result = pd.read_csv('submission_form.csv')","227887db":"for i in range(len(predict)):\n  result['price'][i]=predict[i].item()","b61d74cd":"result['price'] = result['price'].astype(int)\nresult[:5]","8c77d879":"result.to_csv('submit.csv', index=False)","251d9afe":"### \ub2ec\ub77c\uc9c4 \uc810\n1. \ud2b9\uc131\uc911\uc5d0 \ubd88\ud544\uc694\ud558\ub2e4\uace0 \ub290\uaef4\uc9c0\ub294 \ud2b9\uc9d5\uc744 drop\n2. \ub808\uc774\uc5b4\uc758 \uac1c\uc218\ub97c 2-> 5\uac1c\ub85c \ub298\ub9bc\n3. \ucd08\uae30\ud654 \ubc29\ubc95\uc744 kaiming_uniform_\uacfc kaiming_normal_ \ub458 \ub2e4 \uc0ac\uc6a9\n"}}