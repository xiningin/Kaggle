{"cell_type":{"8d71e1b1":"code","573a3f58":"code","dd0a269b":"code","5f0f78c5":"code","fdb35101":"code","50a667a4":"code","5bd11c70":"code","d0c38543":"code","3e81dd03":"code","66fa441d":"code","52d32f53":"markdown","26f80c42":"markdown","8bcab159":"markdown","1f815597":"markdown","ecfc3d18":"markdown","35169e12":"markdown","bb332349":"markdown","65504972":"markdown"},"source":{"8d71e1b1":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier","573a3f58":"train = pd.read_csv('..\/input\/flight_delays_train.csv')\ntest = pd.read_csv('..\/input\/flight_delays_test.csv')","dd0a269b":"train.head()","5f0f78c5":"test.head()","fdb35101":"places = pd.Series((test['Origin'].append(test['Dest']).append(train['Origin']).append(train['Dest'])).unique()).to_dict()\nplaces_map = {v: k for k, v in places.items()}\nplaces_map","50a667a4":"carriers = pd.Series((test['UniqueCarrier'].append(test['UniqueCarrier']).append(train['UniqueCarrier']).append(train['UniqueCarrier'])).unique()).to_dict()\ncarriers_map = {v: k for k, v in carriers.items()}\ncarriers","5bd11c70":"def prepare_df(df):\n    df_copy = df.copy()\n    df_copy['Dest'] = df_copy['Dest'].map(places_map)\n    df_copy['Origin'] = df_copy['Origin'].map(places_map)\n    df_copy['UniqueCarrier'] = df_copy['UniqueCarrier'].map(carriers_map)\n    df_copy['Month'] = df_copy['Month'].str.replace('c-', '').astype(int)\n    df_copy['DayofMonth'] = df_copy['DayofMonth'].str.replace('c-', '').astype(int)\n    df_copy['DayOfWeek'] = df_copy['DayOfWeek'].str.replace('c-', '').astype(int)\n    return df_copy","d0c38543":"X_train, y_train = prepare_df(train), train['dep_delayed_15min'].map({'Y': 1, 'N': 0}).values\nX_train = X_train.drop(columns=['dep_delayed_15min'])\nX_test = prepare_df(test)","3e81dd03":"X_train_part, X_valid, y_train_part, y_valid = \\\n    train_test_split(X_train, y_train, \n                     test_size=0.3, random_state=17)\n    \nmodel = CatBoostClassifier(random_state=17, learning_rate=0.1, max_depth=5, verbose=False)\n\nmodel.fit(X_train_part, y_train_part)\nmodel_valid_pred = model.predict_proba(X_valid)[:, 1]\n\nroc_auc_score(y_valid, model_valid_pred)","66fa441d":"model.fit(X_train, y_train)\nmodel_test_pred = model.predict_proba(X_test)[:, 1]\n\npd.Series(model_test_pred, name='dep_delayed_15min').to_csv('xgb_2feat.csv', index_label='id', header=True)","52d32f53":"We need to map Origin\/Destination points and Carriers, so we can use these features in CatBoost.","26f80c42":"Function to prepare test and train dataframes for CatBoost:","8bcab159":"Making predictions to test set and forming a submission file:","1f815597":"\n\nYour task is to beat at least 2 benchmarks in this competition. Here you won\u2019t be provided with detailed instructions. We only give you a brief description of how the second benchmark was achieved using Xgboost. Hopefully, at this stage of the course, it's enough for you to take a quick look at the data in order to understand that this is the type of task where gradient boosting will do. Most likely it will be Xgboost, however, we\u2019ve got plenty of categorical features here.\n\n<img src=\"https:\/\/habrastorage.org\/webt\/fs\/42\/ms\/fs42ms0r7qsoj-da4x7yfntwrbq.jpeg\" width=40% \/>","ecfc3d18":"Training CatBoost and estimating holdout ROC AUC:","35169e12":"Mapping origin and destination points:","bb332349":"Mapping carriers:","65504972":"The result is 0.72701 score on the LB."}}