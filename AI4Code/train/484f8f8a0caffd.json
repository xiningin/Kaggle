{"cell_type":{"6af71818":"code","8e6f2289":"code","1685056f":"code","ca037d00":"code","cbcb378e":"code","a7571229":"code","a8dd7fd4":"code","a1561897":"code","ef2c57b5":"code","4a3b5804":"code","fccd5b3e":"code","a3962acd":"code","fcf296dd":"code","4a53d6c6":"code","d650ed9e":"code","d5533672":"code","70682988":"code","c7cba7c6":"markdown"},"source":{"6af71818":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e6f2289":"data = pd.read_csv('\/kaggle\/input\/positive-affirmations-with-tags\/positive_affirmations')","1685056f":"data.head()","ca037d00":"data.describe()","cbcb378e":"import matplotlib.pyplot as plt\nimport seaborn as sns","a7571229":"def fig(x, y):\n    plt.plot(x, y)","a8dd7fd4":"data['Tag'].value_counts().plot(kind=\"barh\")","a1561897":"ValueCounts = data['Tag'].value_counts()\nValueCounts","ef2c57b5":"from wordcloud import WordCloud, STOPWORDS","4a3b5804":"affirmation_words = '' \nstop_words = set(STOPWORDS)\nfor i in data.Affirmation: \n    i = str(i) \n    separate = i.split() \n    for j in range(len(separate)): \n        separate[j] = separate[j].lower() \n      \n    affirmation_words += \" \".join(separate)+\" \"","fccd5b3e":"final_wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stop_words, \n                min_font_size = 10).generate(affirmation_words)","a3962acd":"plt.figure(figsize = (10, 10), facecolor = None) \nplt.imshow(final_wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","fcf296dd":"tags = data['Tag'].unique()","4a53d6c6":"tags","d650ed9e":"Love_affirmations = data[data['Tag'] == 'love']","d5533672":"Love_affirmations","70682988":"for i in data[\"Tag\"].unique():\n    Love_words = ''\n    stop_words = set(STOPWORDS)\n    new_data = data[data['Tag'] == i]\n    for i in new_data.Affirmation: \n        i = str(i) \n        separate = i.split() \n        for j in range(len(separate)): \n            separate[j] = separate[j].lower() \n\n        Love_words += \" \".join(separate)+\" \"\n    final_wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stop_words, \n                min_font_size = 10).generate(Love_words)\n    plt.figure(figsize = (10, 10), facecolor = None) \n    plt.imshow(final_wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show()\n    ","c7cba7c6":"# LOVE"}}