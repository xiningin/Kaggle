{"cell_type":{"4801c139":"code","4e1df09b":"code","7b32522e":"code","789a35a0":"code","db3b9bb1":"code","4fa03c2c":"code","649e486c":"code","08ec35d1":"code","65812f93":"code","c6558db4":"code","177dacbe":"markdown","df2585d6":"markdown","059c9095":"markdown","02865005":"markdown","8134b8e9":"markdown"},"source":{"4801c139":"import pandas as pd\nimport sklearn as sk\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV\n","4e1df09b":"\ntrain_data = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",na_values = \"?\")\n\ntest_data = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\", na_values = \"?\")\n\n\nX_train1 = train_data[[\"age\", \n                      \"workclass\", \n                      \"fnlwgt\", \n                      \"education\", \n                      \"education.num\", \n                      \"marital.status\", \n                      \"occupation\", \n                      \"relationship\", \n                      \"race\", \n                      \"sex\", \n                      \"capital.gain\", \n                      \"capital.loss\", \n                      \"hours.per.week\", \n                      \"native.country\"] ]\n\nX_test = test_data[[\"age\", \n                      \"workclass\", \n                      \"fnlwgt\", \n                      \"education\", \n                      \"education.num\", \n                      \"marital.status\", \n                      \"occupation\", \n                      \"relationship\", \n                      \"race\", \n                      \"sex\", \n                      \"capital.gain\", \n                      \"capital.loss\", \n                      \"hours.per.week\", \n                      \"native.country\"] ]\n\n\nY_train = train_data[[\"income\"]]\n\n\n\nX_train = pd.get_dummies(X_train1)","7b32522e":"clf = DecisionTreeClassifier(random_state=0)\nscores = cross_val_score(clf, X_train, Y_train, cv=5, verbose = 2, n_jobs = -1)\nscores","789a35a0":"clf = GaussianNB()\nscores = cross_val_score(clf, X_train, Y_train, cv=5, verbose = 2, n_jobs = -1)\nscores","db3b9bb1":"clf = MLPClassifier()\nscores = cross_val_score(clf, X_train, Y_train, cv=5, verbose = 2, n_jobs = -1)\nscores","4fa03c2c":"\nparameters={'min_samples_split' : range(10,500,50),'max_depth': range(1,20,4)}\nclf_tree=DecisionTreeClassifier()\nclf=GridSearchCV(clf_tree,parameters, n_jobs = -1, verbose = 2)\nclf.fit( X_train, Y_train)\nclf.best_score_","649e486c":"clf.best_params_","08ec35d1":"\nframes = [X_test, X_train1]\nresult = pd.concat(frames, sort = False)\nresult = pd.get_dummies(result)\nX_test = result.head(16280)","65812f93":"final = DecisionTreeClassifier(max_depth = 9, min_samples_split = 10)\nfinal  = final.fit( X_train, Y_train)","c6558db4":"out = final.predict(X_test)\ndf = pd.DataFrame(out, columns=['Income'])\ndf.to_csv(\"submission.csv\", index_label = 'Id')","177dacbe":"O melhor resultado foi a a \u00e1rvore de decis\u00e3o","df2585d6":"Naive Bayes ","059c9095":"Rede Neural","02865005":"\u00c1rvore de decis\u00e3o","8134b8e9":"Melhores par\u00e2metros encontrados"}}