{"cell_type":{"b68cb9cf":"code","17264a17":"code","62a22cc1":"code","468d111f":"code","776543b6":"code","5e98b8d0":"code","91862f6f":"code","5f9d3e4c":"code","5457e463":"code","392fc59d":"code","af028fda":"code","02d5792b":"code","e025a313":"code","d60e99e1":"code","b341e202":"code","f43e48c2":"code","853a8f66":"code","3be451f4":"code","c1bccd07":"code","e0f04c09":"code","b8fd16d5":"code","557683a0":"markdown","b63ecd74":"markdown","8d6f36e9":"markdown","994ce1b8":"markdown","d6531a5d":"markdown","8af05ef4":"markdown","21f580ab":"markdown"},"source":{"b68cb9cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestRegressor\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17264a17":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","62a22cc1":"print(\"*\"*30)\nprint(\"Train Data Size: \", df_train.shape)\nprint(\"*\"*30)\nprint(\"Test Data Size: \", df_test.shape)\nprint(\"*\"*30)","468d111f":"df_train.describe()","776543b6":"df_train.info()","5e98b8d0":"for column in df_train:\n    if df_train[column].isna().sum() > 0 :\n        print(\"Feature: {0}{1}Number of Missing Values: {2}{3}Data type: {4}\".format(column,\" \"*(15-len(column)),df_train[column].isna().sum(),\" \"*(10-len(str(df_train[column].isna().sum()))),df_train[column].dtype))","91862f6f":"df_train[\"Alley\"].fillna(\"No Alley Acess\", inplace = True)\ndf_train[\"FireplaceQu\"].fillna(\"No Fireplace\", inplace = True)\ndf_train[\"PoolQC\"].fillna(\"No Pool\", inplace = True)\ndf_train[\"Fence\"].fillna(\"No Fence\", inplace = True)\ndf_train[\"BsmtQual\"].fillna(\"No Basement\", inplace = True)\ndf_train[\"BsmtCond\"].fillna(\"No Basement\", inplace = True)\ndf_train[\"BsmtExposure\"].fillna(\"No Basement\", inplace = True)\ndf_train[\"BsmtFinType1\"].fillna(\"No Basement\", inplace = True)\ndf_train[\"BsmtFinType2\"].fillna(\"No Basement\", inplace = True)\ndf_train[\"GarageType\"].fillna(\"No Garage\", inplace = True)\ndf_train[\"GarageFinish\"].fillna(\"No Garage\", inplace = True)\ndf_train[\"GarageQual\"].fillna(\"No Garage\", inplace = True)\ndf_train[\"GarageCond\"].fillna(\"No Garage\", inplace = True)\ndf_train[\"MiscFeature\"].fillna(\"None\", inplace = True)","5f9d3e4c":"# We need to remote the outliers before the filling with mean value.\nsorted(df_train[\"LotFrontage\"])\nQ1 = df_train[\"LotFrontage\"].quantile(0.10)\nQ3 = df_train[\"LotFrontage\"].quantile(0.90)\nIQR = Q3 - Q1\nlower_range = Q1 - (1.5 * IQR)\nupper_range = Q3 + (1.5 * IQR)\ndf_train.drop(df_train[(df_train[\"LotFrontage\"] < lower_range) | (df_train[\"LotFrontage\"] > upper_range)].index, inplace = True)","5457e463":"Q1 = df_train[\"MasVnrArea\"].quantile(0.10)\nQ3 = df_train[\"MasVnrArea\"].quantile(0.90)\nIQR = Q3 - Q1\nlower_range = Q1 - (1.5 * IQR)\nupper_range = Q3 + (1.5 * IQR)\ndf_train.drop(df_train[(df_train[\"MasVnrArea\"] < lower_range) | (df_train[\"MasVnrArea\"] > upper_range)].index, inplace = True)","392fc59d":"Q1 = df_train[\"GarageYrBlt\"].quantile(0.10)\nQ3 = df_train[\"GarageYrBlt\"].quantile(0.90)\nIQR = Q3 - Q1\nlower_range = Q1 - (1.5 * IQR)\nupper_range = Q3 + (1.5 * IQR)\ndf_train.drop(df_train[(df_train[\"GarageYrBlt\"] < lower_range) | (df_train[\"GarageYrBlt\"] > upper_range)].index, inplace = True)","af028fda":"df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean(), inplace = True)\ndf_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean(), inplace = True)\ndf_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mean(), inplace = True)","02d5792b":"df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode().iloc[0], inplace = True)\ndf_train['Electrical'].fillna(df_train['Electrical'].mode().iloc[0], inplace = True)","e025a313":"df_test[\"Alley\"].fillna(\"No Alley Acess\", inplace = True)\ndf_test[\"FireplaceQu\"].fillna(\"No Fireplace\", inplace = True)\ndf_test[\"PoolQC\"].fillna(\"No Pool\", inplace = True)\ndf_test[\"Fence\"].fillna(\"No Fence\", inplace = True)\ndf_test[\"BsmtQual\"].fillna(\"No Basement\", inplace = True)\ndf_test[\"BsmtCond\"].fillna(\"No Basement\", inplace = True)\ndf_test[\"BsmtExposure\"].fillna(\"No Basement\", inplace = True)\ndf_test[\"BsmtFinType1\"].fillna(\"No Basement\", inplace = True)\ndf_test[\"BsmtFinType2\"].fillna(\"No Basement\", inplace = True)\ndf_test[\"GarageType\"].fillna(\"No Garage\", inplace = True)\ndf_test[\"GarageFinish\"].fillna(\"No Garage\", inplace = True)\ndf_test[\"GarageQual\"].fillna(\"No Garage\", inplace = True)\ndf_test[\"GarageCond\"].fillna(\"No Garage\", inplace = True)\ndf_test[\"MiscFeature\"].fillna(\"None\", inplace = True)","d60e99e1":"# \nfor idx, column in enumerate(df_test):\n    if df_test[column].isna().sum() > 0 and df_test.dtypes[idx] !=object:\n        df_test[column].fillna(df_test[column].mean(), inplace = True)\n        print(\"Feature: {0}{1}Number of Missing Values: {2}{3}Data type: {4}\".format(column,\" \"*(15-len(column)),df_test[column].isna().sum(),\" \"*(10-len(str(df_test[column].isna().sum()))),df_test[column].dtype))\n    elif df_test[column].isna().sum() > 0 and df_test.dtypes[idx] == object:\n        df_test[column].fillna(df_test[column].mode().iloc[0], inplace = True)\n        print(\"Feature: {0}{1}Number of Missing Values: {2}{3}Data type: {4}\".format(column,\" \"*(15-len(column)),df_test[column].isna().sum(),\" \"*(10-len(str(df_test[column].isna().sum()))),df_test[column].dtype))","b341e202":"for column in df_train:\n    if df_train[column].isna().sum() > 0 :\n        print(\"Feature: {0}{1}Number of Missing Values: {2}{3}Data type: {4}\".format(column,\" \"*(15-len(column)),df_train[column].isna().sum(),\" \"*(10-len(str(df_train[column].isna().sum()))),df_train[column].dtype))\nprint(\"Train Data Size: \", df_train.shape)","f43e48c2":"categorical_variables = []\nfor idx, column in enumerate(df_train):\n    if df_train.dtypes[idx] == object:\n        categorical_variables.append(column)\nprint(df_train.shape)\nprint(df_test.shape)\ndf_train = pd.get_dummies(df_train, columns = categorical_variables)\ndf_test = pd.get_dummies(df_test, columns = categorical_variables)\nprint(df_train.shape)\nprint(df_test.shape)\n#farkl\u0131 kategorik de\u011fi\u015fkenler fazla column olu\u015fmas\u0131na neden oluyor","853a8f66":"# In order to create a model with same columns(except the one that we will predict) I am dropping columns which do not contain in df_test.\ncategorical_values = set(df_train.columns) - set(df_test.columns)\nfor value in categorical_values:\n    if value == \"SalePrice\":\n        pass\n    else:\n        df_train = df_train.drop(value, axis = 1)\nprint(df_train.shape)\nprint(df_test.shape)","3be451f4":"regressor = RandomForestRegressor(n_estimators=100, random_state=75)\nregressor.fit(df_train.loc[:, df_train.columns != 'SalePrice'], df_train[\"SalePrice\"])","c1bccd07":"print(df_test.shape)\nprint(df_train.shape)\ny_pred = regressor.predict(df_test)","e0f04c09":"data_tuples = list(zip(list(df_test[\"Id\"]),list(y_pred)))\ndf_final = pd.DataFrame(data_tuples, columns = ['Id', 'SalePrice'])\ndf_final","b8fd16d5":"df_final.to_csv('submission.csv', index=False)","557683a0":"Time to encode for categorical variables!","b63ecd74":"<a id=\"Modelling\"><\/a>\n# Modelling","8d6f36e9":"- Firstly we need to deal with missing data.","994ce1b8":"<a id=\"Overview\"><\/a>\n# Overview","d6531a5d":"Finally we don't have any missing data. Here we go for the modelling.","8af05ef4":"<a id=\"Data-Processing\"><\/a>\n# Data Processing","21f580ab":"- Same process needs to be applied on test df"}}