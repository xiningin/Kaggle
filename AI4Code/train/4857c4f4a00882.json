{"cell_type":{"797844aa":"code","aad780c5":"code","3d51e7c6":"code","cb4d83ec":"code","d50c440b":"code","5a5a9d38":"code","7632a8d5":"code","269f7f20":"code","43aa21e3":"code","6eef976b":"code","8475f1e8":"code","3c60db05":"code","87991078":"code","53f5bba3":"code","3ea62a71":"code","5ef93365":"code","c1c319be":"code","2af039aa":"code","517799d4":"code","1c3da870":"code","94cb6aad":"code","58d6a994":"code","f653bc0b":"code","c08bfcd9":"code","a12e9630":"code","985c534c":"code","e63fc254":"code","8388eed3":"code","8a1ecf92":"code","cd9b6c06":"code","4e479ab5":"code","8ae21916":"code","490f4cd6":"code","1631777e":"markdown","9e2fd6b8":"markdown","ba88c571":"markdown","5cdb261f":"markdown","adf476b3":"markdown","029b6c60":"markdown","e230eaa7":"markdown"},"source":{"797844aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aad780c5":"import cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline","3d51e7c6":"import pandas as pd","cb4d83ec":"trainpath = '\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv'\ntraindf = pd.read_csv(trainpath)","d50c440b":"traindf.head()","5a5a9d38":"traindf['age_approx'].describe()","7632a8d5":"JPEG_PATH = '\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/'\nDICOM_PATH = '\/kaggle\/input\/siim-isic-melanoma-classification\/'","269f7f20":"traindf['target'].plot(kind='hist')\nplt.xlabel(\"Category\")\nplt.ylabel(\"Images\")","43aa21e3":"traindf['target'].value_counts()","6eef976b":"traindf['benign_malignant'].value_counts()","8475f1e8":"malignDF = traindf[traindf['target'] == 1]\nmalignDF.head()","3c60db05":"import pydicom as dicom\nimport imageio\nimport matplotlib.pylab as plt\n\n\nmalignImagPath = os.path.join(DICOM_PATH+'train\/', 'ISIC_0149568.dcm')\nmalignImagPath2 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0188432.dcm')\nmalignImagPath3 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0207268.dcm')\nmalignImagPath4 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0247330.dcm')\n\nds = dicom.dcmread(malignImagPath)\nds2 = dicom.dcmread(malignImagPath2)\nds3 = dicom.dcmread(malignImagPath3)\nds4 = dicom.dcmread(malignImagPath4)\n\n","87991078":"\nbenignImagPath = os.path.join(DICOM_PATH+'train\/', 'ISIC_2637011.dcm')\nbenignImagPath2 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0015719.dcm')\nbenignImagPath3 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0068279.dcm')\nbenignImagPath4 = os.path.join(DICOM_PATH+'train\/', 'ISIC_0074268.dcm')\n\nbs = dicom.dcmread(benignImagPath)\nbs2 = dicom.dcmread(benignImagPath2)\nbs3 = dicom.dcmread(benignImagPath3)\nbs4 = dicom.dcmread(benignImagPath4)","53f5bba3":"\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(bs.pixel_array)\nplot2.imshow(bs2.pixel_array)\n\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(bs3.pixel_array)\nplot2.imshow(bs4.pixel_array)\nplt.title('Normal Images')\nplt.show()","3ea62a71":"\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(ds.pixel_array)\nplot2.imshow(ds2.pixel_array)\n\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(ds3.pixel_array)\nplot2.imshow(ds4.pixel_array)\nplt.title('AbNormal Images')\nplt.show()","5ef93365":"ds.pixel_array.shape","c1c319be":"ds.pixel_array.min()","2af039aa":"ds.pixel_array.max()","517799d4":"from pydicom.pixel_data_handlers.util import convert_color_space ","1c3da870":"rgbNormal = convert_color_space(bs.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbNormal2 = convert_color_space(bs2.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbNormal3 = convert_color_space(bs3.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbNormal4 = convert_color_space(bs4.pixel_array, 'YBR_FULL_422', 'RGB')","94cb6aad":"f, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(rgbNormal)\nplot2.imshow(rgbNormal2)\n\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(rgbNormal3)\nplot2.imshow(rgbNormal4)\nplt.title('Normal Images')\nplt.show()","58d6a994":"rgbAbNormal = convert_color_space(ds.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbAbNormal2 = convert_color_space(ds2.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbAbNormal3 = convert_color_space(ds3.pixel_array, 'YBR_FULL_422', 'RGB')\nrgbAbNormal4 = convert_color_space(ds4.pixel_array, 'YBR_FULL_422', 'RGB')","f653bc0b":"f, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(rgbAbNormal)\nplot2.imshow(rgbAbNormal2)\n\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(rgbAbNormal3)\nplot2.imshow(rgbAbNormal4)\nplt.title('AbNormal Images')\nplt.show()","c08bfcd9":"orig_normal = [bs.pixel_array, bs2.pixel_array, bs3.pixel_array, bs4.pixel_array]\norig_abnormal = [ds.pixel_array, ds2.pixel_array, ds3.pixel_array, ds4.pixel_array]\nrgbnormal_list = [rgbNormal, rgbNormal2, rgbNormal3, rgbNormal4]\nrgbabnormal_list = [rgbAbNormal, rgbAbNormal2, rgbAbNormal3, rgbAbNormal4]","a12e9630":"gray_normal = list(map(lambda image: cv2.cvtColor(image,cv2.COLOR_RGB2GRAY), rgbnormal_list))\ngray_abnormal = list(map(lambda image: cv2.cvtColor(image,cv2.COLOR_RGB2GRAY), rgbabnormal_list))\n","985c534c":"f, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(gray_normal[0])\nplot2.imshow(gray_normal[1])\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(gray_normal[2])\nplot2.imshow(gray_normal[3])\nplt.title('Normal Images')","e63fc254":"f, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(gray_abnormal[0])\nplot2.imshow(gray_abnormal[1])\n\nf, (plot1, plot2 ) = plt.subplots(1, 2)\nplot1.imshow(gray_abnormal[2])\nplot2.imshow(gray_abnormal[3])\nplt.title('AbNormal Images')","8388eed3":"import scipy.ndimage as ndi\n","8a1ecf92":"columns = 3\n# rows = len(os.listdir(DATA)) - 10\nrows = 4\nfor i in range(len(rgbnormal_list)):    \n    #histograms\n    hist_original = ndi.histogram(orig_normal[i], min=0, max=255, bins=256)\n    hist_rgb = ndi.histogram(rgbnormal_list[i], min=0, max=255, bins=256)\n    hist_gray = ndi.histogram(gray_normal[i], min=0, max=255, bins=256)\n    \n    \n    fig=plt.figure(figsize=(16, 16))\n    fig.add_subplot(rows, columns, i+1)    \n    plt.plot(hist_original)\n    \n    fig.add_subplot(rows, columns, i+1)   \n    plt.plot(hist_rgb)\n    \n    fig.add_subplot(rows, columns, i+1)  \n    plt.plot(hist_gray)\n    plt.title(\"Normal \"+str(i))\n\nplt.show()\n","cd9b6c06":"columns = 3\n# rows = len(os.listdir(DATA)) - 10\nrows = 4\nfor i in range(len(rgbabnormal_list)):    \n    #histograms\n    hist_original = ndi.histogram(orig_abnormal[i], min=0, max=255, bins=256)\n    hist_rgb = ndi.histogram(rgbabnormal_list[i], min=0, max=255, bins=256)\n    hist_gray = ndi.histogram(gray_abnormal[i], min=0, max=255, bins=256)\n    \n    \n    fig=plt.figure(figsize=(16, 16))\n    fig.add_subplot(rows, columns, i+1)    \n    plt.plot(hist_original)\n    \n    fig.add_subplot(rows, columns, i+1)   \n    plt.plot(hist_rgb)\n    \n    fig.add_subplot(rows, columns, i+1)  \n    plt.plot(hist_gray)\n    plt.title(\"AbNormal \"+str(i))\n\nplt.show()\n","4e479ab5":"normal = [bs.pixel_array, bs2.pixel_array, bs3.pixel_array, bs4.pixel_array]\nabnormal = [ds.pixel_array, ds2.pixel_array, ds3.pixel_array, ds4.pixel_array]\nnormal_hists = [histNormal, histNormal2, histNormal3, histNormal4]\nabnormal_hists = [histAbNormal, histAbNormal2, histAbNormal3, histAbNormal4]","8ae21916":"for i in range(len(normal)):\n    im = normal[i]\n    hist = normal_hists[i]\n    cdf = hist.cumsum() \/ hist.sum()\n    im_equalized = cdf[im] * 255\n    fig, axes = plt.subplots(1, 2)\n    axes[0].imshow(im)\n    axes[1].imshow(im_equalized)\n    plt.show()","490f4cd6":"for i in range(len(abnormal)):\n    im = abnormal[i]\n    hist = abnormal_hists[i]\n    cdf = hist.cumsum() \/ hist.sum()\n    im_equalized = cdf[im] * 255\n    fig, axes = plt.subplots(1, 2)\n    axes[0].imshow(im)\n    axes[1].imshow(im_equalized)\n    plt.show()","1631777e":"Equalizer on abnormal images","9e2fd6b8":"### Histograms\n\n- Histograms: count number of pixels at each intensity value.\n- Implemented in scipy.ndimage \n  - higher-dimensional arrays \n  - masked data\n- Advanced techniques and functionality in scikit-image\n\nPlotting the **histogram** of normal\/abnormal images****","ba88c571":"Equalizer on normal images","5cdb261f":"### Equalization\n\n- Distributions often skewed toward low intensities (background values).\n- **Equalization**: redistribute values to optimize full intensity range\n- **Cumulative distribution function**: (CDF) shows proportion of pixels in range.","adf476b3":"Coverting RGB into gray","029b6c60":"Plotting the before-aftert images after applying equalizer","e230eaa7":"Lets visualize it into RGB"}}