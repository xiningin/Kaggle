{"cell_type":{"4a7319c8":"code","26f92bd5":"code","44357920":"code","5f6263c2":"code","23f13333":"code","14b53d80":"code","2b372598":"code","0deee6aa":"code","81eaffb4":"code","84e4d6d1":"code","1a18bc5f":"code","86d52186":"code","3c92120d":"code","4985c2f9":"code","28699a70":"code","d1dcf8a9":"code","be82b436":"code","fb2cec8f":"code","53c7b650":"code","00ff5fb3":"code","50e0f401":"code","53246c17":"code","5c68ad72":"code","efaf0590":"code","26934add":"code","7e827149":"code","3d2ff183":"code","97514e08":"code","9ad42892":"code","4af9385a":"code","93d8712b":"code","c9e38096":"code","3d07f132":"code","e77f0168":"code","6267d2c9":"code","ae4c5768":"code","6c61b486":"code","1b19c432":"code","f73a8ed9":"code","99386109":"code","fd6aeed0":"code","8e1bcaaa":"code","d3075861":"code","6ff57e06":"code","d81c9057":"code","6192c556":"code","ef15e277":"code","a06b0ab8":"code","f3da37e8":"code","35ea856e":"code","50537044":"code","86d1be3c":"code","38c8acb9":"code","9c0e1251":"code","0f145f0a":"code","cc5c716f":"code","eab1bb89":"code","aa1997d0":"code","0ea1f894":"code","c9f981c1":"code","d5321daf":"code","1c20282e":"code","46b9344f":"code","86e3fca5":"code","548338b8":"code","ddb762a3":"code","b8e3dce5":"code","ecb2b4c8":"code","4ea21696":"code","910d5edc":"code","bc9c8eaa":"markdown","cfbae6e3":"markdown","b76af214":"markdown","294b8aa7":"markdown","07030bfb":"markdown","c7a7f86a":"markdown","12559870":"markdown","9da7b11d":"markdown","f54e6532":"markdown","40916725":"markdown","8474f547":"markdown"},"source":{"4a7319c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26f92bd5":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","44357920":"train.head()","5f6263c2":"test.head()","23f13333":"train.shape","14b53d80":"train.isnull().sum()","2b372598":"train.Embarked.mode()","0deee6aa":"train['Embarked'].fillna(value='S',inplace=True)","81eaffb4":"train.drop(['Cabin'],axis=1,inplace=True)","84e4d6d1":"train.head()","1a18bc5f":"test.drop(['Cabin'],axis=1,inplace=True)","86d52186":"test.head()","3c92120d":"train.describe()","4985c2f9":"test.describe()","28699a70":"import re\ndef split_it(data):\n    result = re.search('^.*,(.*)\\.\\s.*$', data)\n    if result.group(1) not in [' Mr', ' Miss', ' Mrs', ' Master']:\n        return ' Misc'\n    else:\n        return result.group(1)\n\ntrain['Title'] = train['Name'].apply(split_it)","d1dcf8a9":"train","be82b436":"test['Title']=test['Name'].apply(split_it)","fb2cec8f":"test","53c7b650":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","00ff5fb3":"train.drop(['Fare','PassengerId','Ticket','Name','Title'],axis=1,inplace=True)\ntest.drop(['Fare','PassengerId','Ticket','Name','Title'],axis=1,inplace=True)","50e0f401":"train.isnull().sum()","53246c17":"test.isnull().sum()","5c68ad72":"import matplotlib.pyplot as plt\nimport seaborn as sns","efaf0590":"x=train['Survived'].value_counts()\nlabel=['Not Survived(0)','Survived(1)']\ncurrent_palette=sns.color_palette('Set2')\nplt.figure(figsize=(11,5))\nplt.pie(x,labels=label,autopct='%1.1f%%',colors=current_palette)\nplt.show","26934add":"sns.countplot(x='Sex',hue='Survived',data=train,palette=sns.color_palette('Set2'))\nplt.gcf().set_size_inches(6, 5)","7e827149":"Pclass=['class1','class2','class3']\nplt.style.use('seaborn')\nax=sns.countplot(data=train,x='Pclass',hue='Survived',palette=sns.color_palette('Set2'))\nplt.legend(['Percentage not survived or unknown','Percentage of survived'])\nplt.gcf().set_size_inches(9,5)\nplt.show()","3d2ff183":"Y=train['Embarked'].value_counts()\nplt.style.use(\"seaborn\")\nmylabel=['Southampton','Cherbourg','Queenstown']\ncolors=sns.color_palette('Set2')\nplt.pie(Y,labels=mylabel,autopct='%1.1f',startangle=15,colors=colors)\nplt.gcf().set_size_inches(10,5)\nplt.show()","97514e08":"sns.countplot(x=train['Survived'],hue=pd.cut(train['Age'],5),palette=sns.color_palette('Set2'))\nplt.style.use(\"seaborn\")\nplt.gcf().set_size_inches(10,5)","9ad42892":"dum1=pd.get_dummies(train.Embarked)\ndum=pd.get_dummies(test.Embarked)","4af9385a":"merged = pd.concat([train,dum1], axis='columns')\nmerged1 = pd.concat([test,dum], axis='columns')","93d8712b":"dum2=pd.get_dummies(merged.Sex)\ndum3=pd.get_dummies(merged1.Sex)","c9e38096":"Train = pd.concat([merged,dum2], axis='columns')\nTest = pd.concat([merged1,dum3], axis='columns')","3d07f132":"Train.drop(['Sex','female','Embarked','S'],axis=\"columns\",inplace=True)\nTest.drop(['Sex','female','Embarked','S'],axis=\"columns\",inplace=True)","e77f0168":"Train.head()","6267d2c9":"Test.head()","ae4c5768":"Train.isnull().sum()","6c61b486":"Train.head()","1b19c432":"#Splitting train and test\nfrom sklearn.model_selection import train_test_split","f73a8ed9":"X=Train.drop('Survived',axis='columns')","99386109":"X","fd6aeed0":"y=Train['Survived']","8e1bcaaa":"y","d3075861":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=10)","6ff57e06":"X_train","d81c9057":"print(len(X_train),len(y_train),len(X_test),len(y_test))","6192c556":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()","ef15e277":"lr.fit(X_train,y_train)","a06b0ab8":"lr.predict(X_test)","f3da37e8":"lr.score(X_test,y_test)","35ea856e":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()","50537044":"rfc.fit(X_train,y_train)","86d1be3c":"rfc.predict(X_test)","38c8acb9":"rfc.score(X_test,y_test)","9c0e1251":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()","0f145f0a":"dtc.fit(X_train,y_train)","cc5c716f":"dtc.predict(X_test)","eab1bb89":"dtc.score(X_test,y_test)","aa1997d0":"from sklearn.neighbors import KNeighborsClassifier\nknc=KNeighborsClassifier()","0ea1f894":"knc.fit(X_train,y_train)","c9f981c1":"knc.predict(X_test)","d5321daf":"knc.score(X_test,y_test)","1c20282e":"from sklearn.svm import SVC\nsvc=SVC()","46b9344f":"svc.fit(X_train,y_train)","86e3fca5":"svc.predict(X_test)","548338b8":"svc.score(X_test,y_test)","ddb762a3":"rfc.fit(X,y)","b8e3dce5":"final = rfc.predict(Test)\nfinal.sum()","ecb2b4c8":"gender_submission=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ngender_submission","4ea21696":"submission=pd.DataFrame({\"PassengerId\":gender_submission[\"PassengerId\"],'Survived':final})\nsubmission","910d5edc":"submission.to_csv('submission.csv',index=False)","bc9c8eaa":"# Logistic Regression","cfbae6e3":"# Machine Learning","b76af214":"# Importing Dataset","294b8aa7":"# Support Vector Classifier","07030bfb":"# **Roadmap**\n* Importing Dataset\n* Handling Missing Values\n* Data Visualization\n* Handling Categorical Values\n* Machine Learning\n* Logistic Regression\n* Decision Tree Classifier\n* K Neighbors Classifier\n* Support Vector Classifier\n* Final Model","c7a7f86a":"# Data Visualization","12559870":"# Final Model","9da7b11d":"# Handling Missing values","f54e6532":"# Handling Categorical Values","40916725":"# K Neighbors Classifier","8474f547":"# Decision Tree Classifier"}}