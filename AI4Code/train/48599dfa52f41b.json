{"cell_type":{"914c36e0":"code","4b62ab13":"code","201b2d21":"code","7b92ae1f":"code","45b1f2f5":"code","c2a46e75":"code","4defcd9a":"code","384f3fdf":"code","f6d1c7e1":"code","6445426e":"code","02f439c6":"code","eeb65c46":"code","256d631b":"code","ae338e0c":"code","2f96d133":"code","d7d2f068":"code","4bc975cb":"code","7871ad48":"code","e136f22c":"code","1d5f4671":"code","e812b531":"code","febae1a4":"code","94bf1c2b":"markdown","69582105":"markdown","d8906d5f":"markdown","2a871dfa":"markdown","093d049b":"markdown","396edeef":"markdown","ad11267a":"markdown","44430199":"markdown"},"source":{"914c36e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b62ab13":"!pip install soundex","201b2d21":"import soundex","7b92ae1f":"# Running the soundex function\nworker = soundex.Soundex()","45b1f2f5":"worker.soundex(\"natural\")","c2a46e75":"worker.soundex(\"nataral\")","4defcd9a":"worker.soundex(\"nutural\")","384f3fdf":"worker.soundex(\"language\")","f6d1c7e1":"worker.soundex(\"processing\")","6445426e":"!apt install libasound2-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg --yes","02f439c6":"!python -m pip install pyaudio","eeb65c46":"!pip install SpeechRecognition","256d631b":"import speech_recognition as sr","ae338e0c":"# Run this on your local machine with a mic available\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Please say something\")\n    audio = r.listen(source)\n    print(\"Time over, thanks\")\n    \ntry:\n    print(\"I think you said: \"+r.recognize_google(audio))\nexcept:\n    pass","2f96d133":"# Working with other languages like Hindi\nr=sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Please say something\")\n    audio = r.listen(source)\n    print(\"Time over, thanks\")\ntry:\n    print(\"I think you said: \"+r.recognize_google(audio,\n    language ='hi-IN'));\nexcept sr.UnknownValueError:\n    print(\"Google Speech Recognition could not understand audio\")\nexcept sr.RequestError as e:\n    print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))\nexcept:\n    pass;","d7d2f068":"!pip install gTTS","4bc975cb":"from gtts import gTTS","7871ad48":"# Choosing language as english\nconvert = gTTS(text='I like this book', lang='en', slow=False)\n# Saving the converted audio in mp3 which can be played\nconvert.save(\"audio.mp3\")","e136f22c":"!pip install goslate","1d5f4671":"import goslate","e812b531":"text = \"Buenas noches\"","febae1a4":"gs = goslate.Goslate()\noutp = gs.translate(text, 'en')\n\nprint(outp)","94bf1c2b":"<h1>Introduction<\/h1>\n\nThis notebook serves as a guide for various techniques and libraries that can be used for phonetic\/voice data NLP tasks. We will cover some of the most popular tools and methods to extract information from these uncommon data sources. We will go over some major areas such as:\n\n* Text to speech\n* Speech to text\n* Phonetic matching","69582105":"<h2>Converting speech to text<\/h2>\nIt is a very useful technique as it allows us to extract NLP data in a convenient manner.","d8906d5f":"<h2>Speech translation<\/h2>","2a871dfa":"<h2>Converting text to speech<\/h2>","093d049b":"<h2>Phonetic matching<\/h2>\n\nRough matching of two words or sentences, also creates a string as an encoded version of the text or word. It is useful in searching corpus of texts, correcting spelling errors etc. This can be done after converting voice data into strings, and then correcting any confusing translations that may have been made in the process. It can also be used to correct typos in datasets:\n\nWe will be using the soundex library for our task here:","396edeef":"**We see that we get the same output for words that are similar to natural but have a typo\/are misspelt. This is so because the pronounciation is very similar to the root correct word**","ad11267a":"Experimenting with other words","44430199":"Through this section, we were able to explore various NLP applications based for sounds\/phonetics. These can now be incorporated into programs to create interactive audio chat bots, assistants and much more.\n\nThank you"}}