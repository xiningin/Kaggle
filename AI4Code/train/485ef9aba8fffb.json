{"cell_type":{"9dc6ae08":"code","d55c518c":"code","eace13b1":"code","df0b91d7":"code","5dc821cc":"code","f0bcb57e":"code","453fe0e8":"code","156f07fe":"code","12c46412":"code","4d1e08c4":"code","9eeb0cc6":"code","ebd38254":"code","37b3e9e6":"code","59975a7e":"code","5fbb5483":"code","816afe82":"code","28d85d13":"code","c4d35068":"code","441ff645":"code","1af38b1f":"code","9955f080":"code","7b8c06ad":"code","05877776":"code","c3b11007":"code","0147d941":"code","2b7f0277":"code","d1e5f6da":"code","2ab1d4a8":"code","8751aaca":"code","df53b466":"code","4cc7b1ea":"code","41017e8b":"code","7fb0d116":"code","15be778e":"code","05dafa93":"code","83d07ce8":"code","d6892ab6":"markdown","913aac31":"markdown","d40fe891":"markdown","cedb7a8e":"markdown","956bc8b3":"markdown","554f1015":"markdown","12412c0c":"markdown","8ef07699":"markdown","6ddf34b5":"markdown","81fd3edd":"markdown","d4fd71ee":"markdown","7f65e97b":"markdown","6f260760":"markdown","4b541f29":"markdown","334f23c8":"markdown","57494030":"markdown","905c3b01":"markdown","69148e52":"markdown","25519bac":"markdown","9156ca77":"markdown","10cccaa5":"markdown","cc31fb54":"markdown","962749fd":"markdown","f67ac80c":"markdown","bf6cdfa7":"markdown","9daee57c":"markdown","3f7e0637":"markdown","5df39ead":"markdown","ae4d2f7c":"markdown","3be6b828":"markdown","ecff52df":"markdown"},"source":{"9dc6ae08":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/train.csv', index_col='id')\ntest = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/test.csv', index_col='id')\nsubmission = pd.read_csv('\/kaggle\/input\/cat-in-the-dat\/sample_submission.csv', index_col='id')","d55c518c":"train.shape, test.shape","eace13b1":"train.head()","df0b91d7":"submission.head()","5dc821cc":"summary = pd.DataFrame(train.dtypes, columns=['dtypes'])\nsummary.head()","f0bcb57e":"summary = summary.reset_index()\nsummary = summary.rename(columns={'index': 'Feature'})\nsummary.head()","453fe0e8":"summary['Missing'] = train.isnull().sum().values  \nsummary['Uniques'] = train.nunique().values\nsummary['First Value'] = train.loc[0].values\nsummary['Second Value'] = train.loc[1].values\nsummary['Third Value'] = train.loc[2].values\nsummary.head()","156f07fe":"# Step 1: Create Data Frame by Feature\nsummary = pd.DataFrame(train.dtypes, columns=['dtypes'])\n\n# Step 2 : Rename column after reseting index\n# 2.1 Reset index\nsummary = summary.reset_index()\n# 2.2 Rename column\nsummary = summary.rename(columns={'index': 'Feature'})\n\n# Step 3 :  Add missing values, unique values, and input values from rows 1 to 3.\n# Missing values by feature\nsummary['Missing'] = train.isnull().sum().values    \n# Unique values by feature\nsummary['Uniques'] = train.nunique().values\n# Input values from rows 1 to 3\nsummary['First Value'] = train.loc[0].values\nsummary['Second Value'] = train.loc[1].values\nsummary['Third Value'] = train.loc[2].values","12c46412":"summary","4d1e08c4":"for i in range(3):\n    col = 'ord_' + str(i)\n    print(f'{col} unique values: {train[col].unique()}')","9eeb0cc6":"for i in range(3, 6):\n    col = 'ord_' + str(i)\n    print(f'{col} unique values: {train[col].unique()}')","ebd38254":"print('day unique values:', train['day'].unique())\nprint('month unique values:', train['month'].unique())\nprint('target unique values:', train['target'].unique())","37b3e9e6":"import seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline","59975a7e":"mpl.rc('font', size=15) # Set font size\nplt.figure(figsize=(7, 6)) # Set Figure size\n\n# Target Value Distribution Count Plot\nax = sns.countplot(x='target', data=train)\nax.set(title='Target Distribution');","5fbb5483":"rectangle = ax.patches[0] # First Rectangle object\nprint('Rectangle Height:', rectangle.get_height())\nprint('Rectangle Width:', rectangle.get_width())\nprint('Rectangle x-axis of the left border:', rectangle.get_x())","816afe82":"print('x-coordinate of text:', rectangle.get_x() + rectangle.get_width()\/2.0)\nprint('x-coordinate of text:', rectangle.get_height() + 1500)","28d85d13":"mpl.rc('font', size=15)\nplt.figure(figsize=(7, 6))\n\nax = sns.countplot(x='target', data=train)\n\ntotal_size = len(train) # Total number of training data\n\n# Circulates rectangle object, showing target values ratio at the top of the bar\nfor patch in ax.patches:\n    height = patch.get_height() # Rectangle height (Data Count)\n    width = patch.get_width() # Rectangle width\n    left_coord = patch.get_x() # Rectangle x-axis of the left border\n    percent = height\/total_size*100 # target values ratio\n    \n    # Enter text at (x, y)coordinates \n    ax.text(x=left_coord + width\/2.0, # x-axis position\n            y=height + 1500, # y-axis position\n            s='{:1.1f}%'.format(percent), # Text\n            ha='center') # Center alignment\n\nax.set_title('Target Distribution');","c4d35068":"mpl.rc('font', size=12)\nfigure, axes = plt.subplots(nrows=3, ncols=2) # Create a three-row, two-row Figure\nfigure.set_size_inches(10, 16) # Set Figure size\nplt.subplots_adjust(wspace=0.4, hspace=0.3) # Set margins between subplots","441ff645":"def get_row_col_idx(idx):\n    '''Returns the position of rows and columns in a subplot'''\n    row_idx = idx\/\/2\n    if idx%2 == 0:\n        col_idx = 0\n    else:\n        col_idx = 1\n    return row_idx, col_idx","1af38b1f":"# Binary Feature List\nbin_cols = ['bin_0', 'bin_1', 'bin_2', 'bin_3', 'bin_4']","9955f080":"mpl.rc('font', size=12)\nfigure, axes = plt.subplots(nrows=3, ncols=2)\nfigure.set_size_inches(10, 16) \nplt.subplots_adjust(wspace=0.4, hspace=0.3) \n\n# Create a Binary Feature Distribution Plot by Target Value for each Subplot\nfor idx, col in enumerate(train[bin_cols]): \n    row_idx, col_idx = get_row_col_idx(idx) # Subplot rows, column locations\n    ax = axes[row_idx, col_idx] # Set the axis on which you want to plot a graph\n    \n    # Target Value Distribution Count Plot\n    sns.countplot(x=col, \n                  data=train, \n                  hue='target', \n                  palette='pastel', # Set Graph Color\n                  ax=ax) \n    \n    ax.set_title(f'{col} Distribution by Target')","7b8c06ad":"def write_percent(ax):\n    '''Displays target values ratio at the top of the bar graph'''\n    for patch in ax.patches:\n        height = patch.get_height()\n        width = patch.get_width() \n        left_coord = patch.get_x()\n        percent = height\/total_size*100\n        \n        ax.text(left_coord + width\/2.0, \n                height+500, \n                '{:1.1f}%'.format(percent), \n                ha='center') ","05877776":"figure, axes = plt.subplots(nrows=3, ncols=2)\nfigure.set_size_inches(10, 16)\nplt.subplots_adjust(wspace=0.4, hspace=0.3)\n\nfor idx, col in enumerate(train[bin_cols]): \n    row_idx, col_idx = get_row_col_idx(idx)\n    ax = axes[row_idx, col_idx]\n    \n    sns.countplot(x=col, \n                  data=train, \n                  hue='target', \n                  palette='pastel',\n                  ax=ax) \n    \n    write_percent(ax)\n    ax.set_title(f'{col} Distribution by Target')","c3b11007":"pd.crosstab(train['nom_0'], train['target'])","0147d941":"pd.crosstab(train['nom_0'], train['target'], normalize='index')","2b7f0277":"crosstab = pd.crosstab(train['nom_0'], train['target'], normalize='index')*100\ncrosstab.reset_index()","d1e5f6da":"crosstab[1]","2ab1d4a8":"def get_crosstab(df, col):\n    '''create crosstab'''\n    crosstab = pd.crosstab(df[col], df['target'], normalize='index')*100\n    crosstab = crosstab.reset_index()\n    return crosstab","8751aaca":"def plot_pointplot(ax, col, crosstab):\n    '''Plot target value 1 ratio on common x-axis as a point plot'''\n    ax2 = ax.twinx() # Create a common x-axis\n    ax2 = sns.pointplot(x=col, y=1, data=crosstab,\n                        order=crosstab[col].values, # Point Plot Order\n                        color='black', # Point Plot Color\n                        legend=False)\n    ax2.set_ylim(crosstab[1].min()-5,crosstab[1].max()*1.1) #Set y-axis range\n    ax2.set_ylabel(\"Target 1 Ratio(%)\")","df53b466":"def plot_cat_dist_with_true_ratio(df, cols, num_rows, num_cols, size=(15, 20)):\n    figure, axes = plt.subplots(nrows=num_rows, ncols=num_cols)\n    figure.set_size_inches(size[0], size[1])\n\n    for idx, col in enumerate(df[cols]): \n        crosstab = get_crosstab(df, col) # create crosstab\n        \n        # Set the axis on which to plot the graph\n        if num_cols == 1:\n            ax = axes[idx]\n        else:\n            row_idx, col_idx = get_row_col_idx(idx)\n            ax = axes[row_idx, col_idx]\n            \n        sns.countplot(x=col, data=train, \n                      order=crosstab[col].values, \n                      color='skyblue', \n                      ax=ax) \n\n        write_percent(ax) # Indicate ratio by unique values\n        \n        plot_pointplot(ax, col, crosstab) # plot Pointplot\n        \n        ax.set_title(f'{col} Distribution') # Plot title\n        \n    plt.subplots_adjust(hspace=0.3, wspace=0.45)","4cc7b1ea":"nom_cols = ['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4'] # Nominal features\nplot_cat_dist_with_true_ratio(train, nom_cols, num_rows=3, num_cols=2)","41017e8b":"ord_cols = ['ord_0', 'ord_1', 'ord_2', 'ord_3'] # Ordinal features\nplot_cat_dist_with_true_ratio(train, ord_cols, \n                              num_rows=2, num_cols=2, size=(15, 12))","7fb0d116":"from pandas.api.types import CategoricalDtype \n\nord_1_value = ['Novice', 'Contributor', 'Expert', 'Master', 'Grandmaster']\nord_2_value = ['Freezing', 'Cold', 'Warm', 'Hot', 'Boiling Hot', 'Lava Hot']\n\n# Ordered categorical data types\nord_1_dtype = CategoricalDtype(categories=ord_1_value, ordered=True)\nord_2_dtype = CategoricalDtype(categories=ord_2_value, ordered=True)\n\n# Change data types\ntrain['ord_1'] = train['ord_1'].astype(ord_1_dtype)\ntrain['ord_2'] = train['ord_2'].astype(ord_2_dtype)","15be778e":"plot_cat_dist_with_true_ratio(train, ord_cols, num_rows=2, num_cols=2, size=(15, 12))","05dafa93":"plot_cat_dist_with_true_ratio(train, ['ord_4', 'ord_5'], num_rows=2, num_cols=1, size=(15, 12))","83d07ce8":"date_cols = ['day', 'month']\nplot_cat_dist_with_true_ratio(train, date_cols, num_rows=2, num_cols=1, size=(15, 12))","d6892ab6":"#### Step 3: Add missing values, unique values, and input values from rows 1 to 3","913aac31":"### Nominal Features Distribution","d40fe891":"#### day, month, target unique values","cedb7a8e":"### Date Features Distribution","956bc8b3":"#### Step 3: Create ratio feature distribution and target value 1 ratio point plot by feature generation function","554f1015":"Step 3-2 : Plot a binary feature distribution by target value ratio","12412c0c":"### Target Values Distribution","8ef07699":"- [Competition Link](https:\/\/www.kaggle.com\/c\/cat-in-the-dat\/)  \n- [Reference EDA notebook](https:\/\/www.kaggle.com\/kabure\/eda-feat-engineering-encode-conquer)","6ddf34b5":"# Categorical Feature Encoding Challenge EDA for Everyone","81fd3edd":"#### Step 2: Create a point plot generation function","d4fd71ee":"#### Step 2: Rename column after reseting index","7f65e97b":"#### Step 2: Assign Subplot to Each Axis\nStep 2-1 : Create a function to obtain subplot rows and column positions","6f260760":"### Ordinal Features Distribution","4b541f29":"ord_3, ord_4, ord_5 unique values","334f23c8":"Step 2-2 : Assign Binary Feature List","57494030":"#### Step 1: Create a crosstab generation function","905c3b01":"#### Step 1: Create Data Frame by Feature","69148e52":"#### Step 3: Show Ratio on a Graph","25519bac":"### Binary Features Distribution","9156ca77":"### I also shared [Top 1st Place Solution on Private LB Notebook](https:\/\/www.kaggle.com\/werooring\/top-1st-place-solution-on-private-lb)","10cccaa5":"### This is a basic EDA notebook for everyone(including beginners). If you think it's useful, please upvote. \ud83d\ude0a","cc31fb54":"Step 3-1 : Create a function that displays target values ratio at the top of the bar graph.","962749fd":"\nord_0, ord_1, ord_2, ord_3 distribution","f67ac80c":"#### Step 1: Prepare row n Figure for m","bf6cdfa7":"## Visualize Feature and Target Values","9daee57c":"## Look Around Data","3f7e0637":"Step 2-3 : Assign a subplot to each axis","5df39ead":"#### ord_0, ord_1, ord_2 unique values","ae4d2f7c":"### Create Feature Summary Table","3be6b828":"ord_4, ord_5 distribution","ecff52df":"#### Full codes"}}