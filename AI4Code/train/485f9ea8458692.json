{"cell_type":{"bc1e64ef":"code","7a1ccf2a":"code","c7abcc91":"code","e650a410":"code","273eb0ea":"code","3c6760a5":"code","a981a026":"code","132890ca":"code","4a5ac095":"code","5cf829e3":"code","ed7d2867":"code","f9b7cbaf":"code","152adc64":"code","2460d5c1":"code","0dae06fd":"markdown","94d51809":"markdown","b7940965":"markdown","668258d1":"markdown","faa7d8ec":"markdown","2035dd0d":"markdown","70cd6b28":"markdown","e7ef06e8":"markdown","350a2492":"markdown","615ea5e5":"markdown","d2006691":"markdown","bbf1e035":"markdown","03e71952":"markdown"},"source":{"bc1e64ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a1ccf2a":"# Importing the required libraries for this project\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nimport itertools\nimport warnings \nwarnings.filterwarnings(\"ignore\")","c7abcc91":" !wget https:\/\/www.dropbox.com\/s\/gax4zj8bfesaem8\/PUBG.csv?dl=0","e650a410":"pubg = pd.read_csv('PUBG.csv?dl=0') \npubg.head()","273eb0ea":"print(\"The average person kills {:.2f} players, 80% of people have {} kills or less, while the most kills ever recorded is {}.\".format(pubg['kills'].mean(),pubg['kills'].quantile(0.80), pubg['kills'].max()))","3c6760a5":"pubg1 = pubg.copy()\npubg1.loc[pubg1['kills'] > pubg1['kills'].quantile(0.99)] = '8+' \nplt.figure(figsize=(10,5)) \nsns.countplot(pubg1['kills'].astype('str').sort_values()) \nplt.title(\"Kill Count\",fontsize=25)\nplt.show()","a981a026":"kills = pubg.copy()\nkills['killsCategories'] = pd.cut(kills['kills'], [-1, 0, 2, 5, 10, 60], labels=['0_kills','2-4_kills', '4-5_kills', '7-9_kills', '10+_kills'])\nplt.figure(figsize=(14,6))\nsns.boxplot(x=\"killsCategories\", y=\"winPlacePerc\", data=kills)\nplt.show()","132890ca":"print(\"The average person walks for {:.2f}m, 80% of people have walked {}m or less, while the marathoner champion walked for {}m.\".format(pubg['walkDistance'].mean(), pubg['walkDistance'].quantile(0.80), pubg['walkDistance'].max()))\npubg2 = pubg.copy()\npubg2 = pubg2[pubg2['walkDistance'] < pubg['walkDistance'].quantile(0.99)] \nplt.figure(figsize=(20,15))\nplt.title(\"Walking Distance Distribution\",fontsize=20) \nsns.distplot(pubg2['walkDistance'])\nplt.show()\nsns.jointplot(x=\"winPlacePerc\", y=\"walkDistance\", data=pubg, height=10, ratio=3, color =\"green\")\nplt.show()","4a5ac095":"f,ax1 = plt.subplots(figsize =(20,10)) \nsns.pointplot(x='vehicleDestroys',y='winPlacePerc',data=pubg2,color='red',alpha=0.8) \nplt.xlabel('Number of Vehicle Destroys',fontsize = 15,color='blue') \nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Vehicle Destroys\/ Win Ratio',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","5cf829e3":"print(\"The average person uses {:.2f} heal items, 90% of people use {} or less\".format( pubg['heals'].mean(), pubg['heals'].quantile(0.90), pubg['heals'].max()))\nprint(\"The average person uses {:.2f} boost items, 90% of people use {} or less\".format (pubg['boosts'].mean(), pubg['boosts'].quantile(0.90), pubg['boosts'].max()))","ed7d2867":"pubg3 = pubg.copy()\npubg3 = pubg3[pubg3['heals'] < pubg3['heals'].quantile(0.90)] \npubg3 = pubg3[pubg3['boosts'] < pubg3['boosts'].quantile(0.90)]\nf,ax1 = plt.subplots(figsize =(20,10)) \nsns.pointplot(x='heals',y='winPlacePerc',data=pubg3,color='green',alpha=0.8) \nsns.pointplot(x='boosts',y='winPlacePerc',data=pubg3,color='blue',alpha=0.8) \nplt.text(4,0.6,'Heals',color='green',fontsize = 20,style = 'normal') \nplt.text(4,0.55,'Boosts',color='blue',fontsize = 20,style = 'normal') \nplt.xlabel('Number of heal\/boost items',fontsize = 15,color='black') \nplt.ylabel('Win Percentage',fontsize = 15,color='black')\nplt.title('Heals vs Boosts',fontsize = 20,color='black') \nplt.grid()\nplt.show()","f9b7cbaf":"solo = pubg[pubg['numGroups']>50]\nduo = pubg[(pubg['numGroups']>25) & (pubg['numGroups']<=50)]\nsquads = pubg[pubg['numGroups']<=25]\nprint(\"There are {} ({:.3f}%) solo games, {} ({:.3f}%) duo games and {} ({:.3f}%) squad games.\".format(len(solo), 100*len(solo)\/len(pubg), len(duo), 100*len(duo)\/len(pubg), len(squads), 100*len(squads)\/len(pubg),))\nf,ax1 = plt.subplots(figsize =(20,10)) \nsns.pointplot(x='kills',y='winPlacePerc',data=solo,color='black',alpha=0.8) \nsns.pointplot(x='kills',y='winPlacePerc',data=duo,color='green',alpha=0.8) \nsns.pointplot(x='kills',y='winPlacePerc',data=squads,color='brown',alpha=0.8) \nplt.text(37,0.6,'Solos',color='black',fontsize = 15,style = 'normal') \nplt.text(37,0.55,'Duos',color='green',fontsize = 15,style = 'normal') \nplt.text(37,0.5,'Squads',color='brown',fontsize = 15,style = 'normal') \nplt.xlabel('Number of kills',fontsize = 20,color='orange')\nplt.ylabel('Win Percentage',fontsize = 20,color='orange') \nplt.title('Solo vs Duo vs Squad Kills',fontsize = 20,color='orange') \nplt.grid()\nplt.show()","152adc64":"f,ax = plt.subplots(figsize=(25, 25)) \nsns.heatmap(pubg.corr(), annot=True, linewidths=.5, ax=ax) \nplt.show()","2460d5c1":"# Now we shall plot the heatmap for the features mentioned above\nk = 7 #number of variables for heatmap\nf,ax = plt.subplots(figsize=(11, 11))\ncols = pubg.corr().nlargest(k, 'winPlacePerc')['winPlacePerc'].index \ncm = np.corrcoef(pubg[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","0dae06fd":"We can observe that Walkdistance, boosts, weapons acquired, damage dealt, heals and kills are highly correlated with winplace percentage","94d51809":"It is observed that most people can't even make a single kill","b7940965":"Will destroying a vehicle increase one's winning percentage? Write your inference through visual observation.","668258d1":"Is the walking distance of an average person is correlated with the winning percentage?","faa7d8ec":"Group the players based on their number of kills and note down the Inference (Intermediate)","2035dd0d":"We can infer that more the player kills, more are his winning chances.","70cd6b28":"\nBehaviour of solos and duos are almost similar, but kills doesnot seem to matter much when playing squads","e7ef06e8":"**Dataset Description:**\n\nWe\u2019ll be using data collected by Kaggle via the PUBG Developer API (https:\/\/developer.pubg.com\/). The dataset comprises of 65,000 games worth of anonymized player data, split into training and test sets. For this exploratory analysis, we\u2019re only going to be looking at the training data set.\nThe training set comes in the form of a .CSV file. This file contains 113,290,736 individual data points in 26 columns and 4,357,336 rows.\ngroupId - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n(Think: Will groupID add any value in our prediction?)\nmatchId - Integer ID to identify a match. There are no matches that are in both the training and testing set.\n(Think: Why matchID won't add any value in our prediction?)\nassists - Number of times you helped your friend when he killed an enemy boosts -\nNumber of boost items used.\nWhat is it ? Boost may refer to Energy Drink,Painkillers, Adrenaline Syringe\n  About: The boost bar is a thin white line visible above the health bar. It is cut into 4 sections, which fill up when the player uses a boost item. The first section of the boost bar lasts for 1 minute and will heal 1%health every 8 seconds, for a total of 7% health.\ndamageDealt - Total damage dealt. Note: Self-inflicted damage is subtracted. DBNOs - edureka!\nNumber of enemy players knocked\nWhat is it? Stands for 'Down But No Out'. During Duo or squad play, when you lose all your hit points(HP), you get into this mode. In this mode, your duo or squad members can heal you, and that is why we don't count this as an out. 'Revive State' is a feature in BATTLEGROUNDS that can be used to revive downed squad mates. Once your HP reaches 0 you will go into a DBNO state. You can only crawl and drop items, but you cannot shoot or use items while in this state.\n","350a2492":"Visualize to observe the pattern in killing of solo, duo and group","615ea5e5":"Determine the Usage of healing and boosting of a person and visualize its trend","d2006691":"Visualize the kill count (Beginner)","bbf1e035":"To find the Kills by an average person (Beginner)","03e71952":"Visualize to find the highest positive and negative correlation with the target (Winplaceperc). Also, visualize the top-7 most positive correlated variables with the target. "}}