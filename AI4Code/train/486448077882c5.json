{"cell_type":{"ff24f215":"code","70a80c5b":"code","c4906e5d":"code","3a23705a":"code","036ef170":"code","b6cadc59":"code","bd3f28a2":"code","ec011df5":"code","96752ec1":"code","64af9a0d":"code","fdea1177":"code","4f8c8b69":"code","ebfa05af":"code","64cf58a3":"code","93da588f":"code","f2a9fcf8":"code","a5a9aa31":"code","b73c1376":"code","39757c2a":"code","b164e2d3":"code","bd686b44":"code","a3c6c029":"code","aa10f473":"code","0917213a":"code","960717c8":"code","a175cb71":"code","a2829327":"code","3316d7fd":"code","b0bef822":"code","a98f4c4d":"code","dea7c9c9":"code","e0a2fbfe":"code","9a82d77e":"code","241c3f14":"code","124e7b8d":"code","8de4c5ba":"code","c1b26d8a":"code","0350fc8b":"code","14572a06":"code","8559618e":"code","c5006f87":"code","109d8a8a":"code","3de74c6b":"code","09df3bba":"code","f82034d7":"code","a799e65f":"code","3738d168":"code","6c646162":"code","db9d80e6":"code","3a4a7671":"code","654081c2":"code","141428d9":"code","3346da49":"code","d812822e":"code","ac88908d":"code","ed7abb4c":"code","92a6ae69":"code","c87cafff":"code","dd9a4428":"code","bda14162":"code","dcfe4021":"code","2e117562":"code","019726c4":"code","7e23ced3":"code","23c0a33d":"code","9327ac4d":"code","d93f3b85":"code","08b1764c":"code","311e01e1":"code","6943082f":"code","51c76fc8":"code","fd7ab70c":"code","c65a8e40":"code","5b7fb51f":"markdown","467b2b3d":"markdown","0506df9b":"markdown","8daf6621":"markdown","92a551ef":"markdown","2c73d022":"markdown","fd287e8e":"markdown","6a95141c":"markdown","c8a3c7c0":"markdown","7c2c7d86":"markdown","4423fc89":"markdown","6a709a99":"markdown","c7bef3ef":"markdown","f04211ea":"markdown","07e8cf8f":"markdown","876be8d0":"markdown","2d3bfbd5":"markdown","bdf70d3c":"markdown","3e77ac2e":"markdown","07f01a9b":"markdown","3485c527":"markdown","09a40f7e":"markdown","08f35884":"markdown","aff6643c":"markdown","4dd004e3":"markdown","e50b4187":"markdown","140fa9bc":"markdown","5e46d0eb":"markdown","c5ec0319":"markdown","a25dd010":"markdown","f3eccd92":"markdown","26667207":"markdown"},"source":{"ff24f215":"pip install dnspython","70a80c5b":"#Dario: Importing libraries:\n\nimport pandas as pd\nimport json\nimport pymongo\nfrom pymongo import MongoClient\n\nimport pprint\nimport urllib.parse\nfrom bson.son import SON\nimport matplotlib.pyplot as plt \nimport numpy as np\n","c4906e5d":"#Defining client = Mongo Server:\n\nclient = MongoClient(\"mongodb+srv:\/\/geuser:melq.5491@bdegi.3pkrh.gcp.mongodb.net\/gre_EMD?retryWrites=true&w=majority\")\ndb = client.test","3a23705a":"#Accessing the database and exploring collections\n\ndb = client['gre_EMD'] #Defining db = Mongo database 'gre_EMD'\ndb.list_collection_names() #Listing all the collections inside the database db","036ef170":"# Defining each of the 4 collections\n\ncollection = db['gre10_depl']   #Dario: Defining collection = collection 'gre_depl' from database db\ntraj = db.gre10_traj            #Dario: defining traj = collection 'gre10_traj'\nmng = db.gre10_mng              #Dario: defining mng = collection 'gre10_mng'\npers = db.gre10_pers            #Dario: defining traj = collection 'gre10_traj'","b6cadc59":"#Defining view = the first document in the collection 'gre10_depl'\n\nview = collection.find_one()\nview  #Dario: example of first document as 'view'","bd3f28a2":"#Dario: chunk for showing the 63336 documents in the collection, do not run :s\n# for collection in collection.find():\n   # pprint.pprint(collection)","ec011df5":"viewtraj = traj.find_one() # Defining viewtraj = first document in gre10_traj collection\nviewtraj","96752ec1":"mng.count_documents({})","64af9a0d":"viewpers = pers.find_one() # Defining viewtraj = first document in gre10_traj collection\nviewpers","fdea1177":"# Grouping by ages and ordering from most frequent to least frequent\n\nages = [{\"$group\":{\"_id\":\"$age\",\"number\":{\"$sum\":1}}},{\"$sort\": SON([(\"number\", -1)])}]\nlist(pers.aggregate(ages))","4f8c8b69":"# Grouping by sex \n\ngender = [{\"$group\":{\"_id\":\"$sexe\",\"number\":{\"$sum\":1}}},{\"$sort\": SON([(\"_id\", 1)])}]\nlist(pers.aggregate(gender))","ebfa05af":"# Grouping by permis\n\npermis = [{\"$group\":{\"_id\":\"$permis\",\"number\":{\"$sum\":1}}},{\"$sort\": SON([(\"_id\", 1)])}]\nlist(pers.aggregate(permis))","64cf58a3":"# Grouping by age, and projecting last 'permis' for each group of age\n\npermis_age = [{\"$group\":{\"_id\":\"$age\",\"permis\":{\"$last\":'$permis'}}},{'$project':{ 'age':'$age', 'permis':'$permis'}},{\"$sort\": SON([(\"_id\", 1)])}]\nlist(pers.aggregate(permis_age))","93da588f":"# Creating a dataframe out of the 'pers' collection\n\nfrom pandas import DataFrame\n\ndf = DataFrame(list(pers.find()))\ndf","f2a9fcf8":"# cleaning df to have desired columns\n\npeople = df.drop([\"_id\",\"PP1\",\"tir\",\"zoneres\",\"NO_MEN\",\"NO_PERS\",\"typep\",\"lien\",\"TEL_PORT\",\"mail\",\"etabscol\",\"OCCU1\",\"OCCU2\",\"csp\",\"ABO_TC\",\"VAL_ABO\",\"TRAV_AUTRE\",\"travdom\",\"zonetrav\",\"dispovp\",\"PBM_STAT\",\"STAT_TRAV\",\"fqvelo\",\"FQ2R1\",\"FQ2R2\",\"fqvpcond\",\"fqvppass\",\"situveil\"], axis=1)\npeople","a5a9aa31":"# showing the type for each selected column\n\npeople.dtypes","b73c1376":"people.age=people.age.astype('int32')","39757c2a":"people.freqtcu = people.freqtcu.replace({'NA':'0'})\npeople.freqtcu = people.freqtcu.astype('int32')","b164e2d3":"people.freqtram = people.freqtram.replace({'NA':'0'})\npeople.freqtram = people.freqtram.astype('int32')","bd686b44":"people.freqrurb = people.freqrurb.replace({'NA':'0'})\npeople.freqrurb = people.freqrurb.astype('int32')","a3c6c029":"people.freqtransisere = people.freqtransisere.replace({'NA':'0'})\npeople.freqtransisere = people.freqtransisere.astype('int32')","aa10f473":"people.freqter = people.freqter.replace({'NA':'0'})\npeople.freqter = people.freqter.astype('int32')","0917213a":"people.sexe = people.sexe.replace({'1':'man','2':'woman'})","960717c8":"people.permis = people.permis.replace({'1':'yes','3':'yes', '2':'no','NA':'no'})","a175cb71":"# Verifying the new data types\n\npeople.dtypes","a2829327":"# Grouping by gender our new data frame 'people'\n\npeople_gender = people.groupby('sexe').size()\nprint(people_gender)","3316d7fd":"# Creating new variables for both genders in order to calculate the % of each\n\npeople_woman = people[(people.sexe == 'woman')]\npeople_man = people[(people.sexe == 'man')]","b0bef822":"print ('The rate of woman between 4 and 17 from the survey: ', float(len(people_woman)\/float(len(people))*100), '%.' )\nprint ('The rate of woman between 4 and 17 from the survey: ', float(len(people_man)\/float(len(people))*100), '%.' )","a98f4c4d":"# Analyzing the histogram based on the age categories\n\nage_ranges = [4,17,24,64,74,102]\nax = plt.hist(people.age, bins = age_ranges)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Population',fontsize=15)\nplt.show()","dea7c9c9":"infant = people [(people.age< 18)&(people.age>3)]\ninfant","e0a2fbfe":"infant.describe()","9a82d77e":"# Creating a data series out of the mean values (excluding the mean of age). \n# This data series will be used later for plotting.\n\nmean_infant_series = infant.describe().loc['mean',].drop('age',axis = 0)\nmean_infant_series","241c3f14":"# Creating a new variable sum_infant to add all the frequencies for each mean of transport.\n# We then plot the totals to know which mean of transport is the most used for this group.\n# We will replicate this procedure for each age category.\n\ncol_infant=list(infant)\ncol_infant.remove('age')\nsum_infant = infant[col_infant].sum(axis=0, numeric_only =True)\nsum_infant.plot(kind = 'bar', style = 'b', alpha = 0.4,\n                title = \"Total frequencies for -infant- group\",xlabel = 'Transport',ylabel='Total usage frequency')\n\n","124e7b8d":"youth = people [(people.age>17)&(people.age<25)]\nyouth","8de4c5ba":"youth.describe()","c1b26d8a":"mean_youth_series = youth.describe().loc['mean',].drop('age',axis = 0)\nmean_youth_series","0350fc8b":"col_youth=list(youth)\ncol_youth.remove('age')\nsum_youth = youth[col_youth].sum(axis=0, numeric_only =True)\nsum_youth.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total frequencies for -youth- group\",xlabel = 'Transport',ylabel='Total usage frequency')\n","14572a06":"adult = people [(people.age>24)&(people.age<65)]\nadult","8559618e":"adult.describe()","c5006f87":"mean_adult_series = adult.describe().loc['mean',].drop('age',axis = 0)\nmean_adult_series","109d8a8a":"col_adult=list(adult)\ncol_adult.remove('age')\nsum_adult = adult[col_adult].sum(axis=0, numeric_only =True)\nsum_adult.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total frequencies for -adult- group\",xlabel = 'Transport',ylabel='Total usage frequency')","3de74c6b":"senior = people [(people.age>64)&(people.age<75)]\nsenior","09df3bba":"senior.describe()","f82034d7":"mean_senior_series = senior.describe().loc['mean',].drop('age',axis = 0)\nmean_senior_series","a799e65f":"col_senior=list(senior)\ncol_senior.remove('age')\nsum_senior = senior[col_senior].sum(axis=0, numeric_only =True)\nsum_senior.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total frequencies for -senior- group\",xlabel = 'Transport',ylabel='Total usage frequency')","3738d168":"elder = people [(people.age>74)]\nelder","6c646162":"elder.describe()","db9d80e6":"mean_elder_series = elder.describe().loc['mean',].drop('age',axis = 0)\nmean_elder_series","3a4a7671":"col_elder=list(elder)\ncol_elder.remove('age')\nsum_elder = elder[col_elder].sum(axis=0, numeric_only =True)\nsum_elder.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total frequencies for -elder- group\",xlabel = 'Transport',ylabel='Total usage frequency')","654081c2":"# plotting the mean series we created before for each age category\n\nplt.plot(mean_infant_series.index, mean_infant_series.values,label = 'Infant')\nplt.plot(mean_youth_series.index, mean_youth_series.values,label = 'Youth')\nplt.plot(mean_adult_series.index, mean_adult_series.values,label = 'Adult')\nplt.plot(mean_senior_series.index, mean_senior_series.values,label = 'Senior')\nplt.plot(mean_elder_series.index, mean_elder_series.values,label = 'Elder')\n\nplt.legend(loc='best')\nplt.ylabel('Mean frequency')\nplt.title('Mean frequencies comparison')\n","141428d9":"#Make a dataframe with all the means by the frequency of transport\n\nmeans_by_age = {'Infants' : pd.Series(mean_infant_series, \n                       index =[\"freqtcu\",\"freqtram\",\"freqrurb\",\"freqtransisere\",\"freqter\"]), \n      'Youth': pd.Series(mean_youth_series, \n                       index =[\"freqtcu\",\"freqtram\",\"freqrurb\",\"freqtransisere\",\"freqter\"]),\n     \"Adult\": pd.Series(mean_adult_series, \n                       index =[\"freqtcu\",\"freqtram\",\"freqrurb\",\"freqtransisere\",\"freqter\"]), \n     \"Senior\":pd.Series(mean_senior_series, \n                       index =[\"freqtcu\",\"freqtram\",\"freqrurb\",\"freqtransisere\",\"freqter\"]), \n     \"Elder\":pd.Series(mean_elder_series, \n                       index =[\"freqtcu\",\"freqtram\",\"freqrurb\",\"freqtransisere\",\"freqter\"])} \nmeans = pd.DataFrame(means_by_age)\nmeans","3346da49":"#Transpose the matrix of means of transport use by our age range\nmeansT = means.transpose()\nage_category = ['Infant','Youth','Adult','Senior','Elder']\nmeansT","d812822e":"#mean_freqtcut1 = meansT[\"freqtcu\"]\n#mean_freqtcut1","ac88908d":"#Plotting the 2 data series\n\n#plt.bar(age_category,mean_freqtcut1)\n#plt.ylabel('Mean frequency TCU')\n#plt.xlabel('Age category')\n#plt.title('TCU')","ed7abb4c":"# Creating 2 lists based from the information got from above mean series\n\nmean_freqtcu = meansT[\"freqtcu\"]\nage_category = ['Infant','Youth','Adult','Senior','Elder']","92a6ae69":"#Plotting the 2 data series\n\nplt.bar(age_category,mean_freqtcu)\nplt.ylabel('Mean frequency TCU')\nplt.xlabel('Age category')\nplt.title('TCU')","c87cafff":"mean_freqtram = meansT[\"freqtram\"]\nage_category = ['Infant','Youth','Adult','Senior','Elder']","dd9a4428":"plt.bar(age_category,mean_freqtram)\nplt.ylabel('Mean frequency Tram')\nplt.xlabel('Age category')\nplt.title('Tram')","bda14162":"mean_freqrurb = meansT[\"freqrurb\"]\nage_category = ['Infant','Youth','Adult','Senior','Elder']","dcfe4021":"plt.bar(age_category,mean_freqrurb)\nplt.ylabel('Mean frequency RUrb')\nplt.xlabel('Age category')\nplt.title('RUrb')","2e117562":"mean_freqtransisere = meansT[\"freqtransisere\"]\nage_category = ['Infant','Youth','Adult','Senior','Elder']","019726c4":"plt.bar(age_category,mean_freqtransisere)\nplt.ylabel('Mean frequency Transisere')\nplt.xlabel('Age category')\nplt.title('Transisere')","7e23ced3":"mean_freqter = meansT[\"freqter\"]\nage_category = ['Infant','Youth','Adult','Senior','Elder']","23c0a33d":"plt.bar(age_category,mean_freqter)\nplt.ylabel('Mean frequency TER')\nplt.xlabel('Age category')\nplt.title('TER')","9327ac4d":"# Creating barplot for mean values frequency use according to our age category\n\nw=0.15\nx = ['Infant','Youth','Adult','Senior','Elder']\nTcu = meansT[\"freqtcu\"]\nTram = meansT[\"freqtram\"]\nRurb = meansT[\"freqrurb\"]\nTransiere = meansT[\"freqtransisere\"]\nTer = meansT[\"freqter\"]\n\nbar1 = np.arange(len(x))\nbar2 = [i+w for i in bar1]\nbar3 = [i+w for i in bar2]\nbar4 = [i+w for i in bar3]\nbar5 = [i+w for i in bar4]\n\nplt.bar(bar1,Tcu,w,label='TCU')\nplt.bar(bar2,Tram,w,label='TRAM')\nplt.bar(bar3,Rurb,w,label='RUBR')\nplt.bar(bar4,Transiere,w,label='Transis\u00e8re')\nplt.bar(bar5,Ter,w,label='TER')\n\nplt.xticks(bar1+w\/5,x)\nplt.xlabel('Age Category')\nplt.ylabel('Mean frequencies')\nplt.legend(bbox_to_anchor=(1.05, 1))\nplt.title('Mean frequencies comparison')\nplt.show()\n","d93f3b85":"# Creating a new Data frame for adults holding a driver license\n\nadult_permisdf = adult[(adult.permis == \"yes\")]\nadult_permisdf\n","08b1764c":"adult_permisdf.describe()","311e01e1":"adult_permis_meanseries = adult_permisdf.describe().loc['mean',].drop('age',axis = 0)\nadult_permis_meanseries","6943082f":"# Creating a new dataframe for adults without a driver license\n\nadult_notpermisdf = adult [(adult.permis == \"no\")]\nadult_notpermisdf","51c76fc8":"adult_notpermisdf.describe()","fd7ab70c":"adult_notpermis_meanseries = adult_notpermisdf.describe().loc['mean',].drop('age',axis = 0)\nadult_notpermis_meanseries","c65a8e40":"# Creating barplot for mean values of both groups of adults (holding a driver license and not)\n\nw=0.4\nx = ['TCU','Tram','RUrb','Transisere','TER']\nlicense = adult_permis_meanseries\nnotlicense = adult_notpermis_meanseries\n\nbar1 = np.arange(len(x))\nbar2 = [i+w for i in bar1]\n\nplt.bar(bar1,license,w,label='Adults holding a license')\nplt.bar(bar2,notlicense,w,label='Adults not holding a license')\n\nplt.xticks(bar1+w\/2,x)\nplt.xlabel('Transport')\nplt.ylabel('Mean frequencies')\nplt.legend(bbox_to_anchor=(1.05, 1))\nplt.title('Mean frequencies comparison')\nplt.show()\n\n","5b7fb51f":"Out of this graph we can observe that, in average, younger groups tend to use less public transportation. This may be due to the use of different transport like bicycle, because of living near to the schools, or because they don't have lots of needs of transportation.","467b2b3d":"As we can see, both percentages are pretty balanced. We can say that we succeed replacing the values for the 'sexe' column","0506df9b":"### Infant: 4-17 years old","8daf6621":"## Do adults holding a driver license use less the public transport?\nFor this part we focused on the adult category because it is the biggest group, and because of the age and economic activity, they tend to increase their mobility. We want to compare the mean frequencies of public transport usage between those holding a driver license and those who don't.","92a551ef":"# Data Selection and detailed querying\nAfter analizing the four collections, we decided to focus on the 'pers' collection only. So we explore the collection through some PyMongo queries:","2c73d022":"### For TCU:","fd287e8e":"### For Transisere:","6a95141c":"# MongoDB querying","c8a3c7c0":"### For Tram:","7c2c7d86":"Here we observe 4 different values. In order to get more information about what does each value mean, it may be usefull to compare the values with the age.","4423fc89":"### Senior: 65-74 years old","6a709a99":"Contrary to what was expected, we observe that adults with driver license use public transport more frequently than adults without it. However, it would be important to know the source of the data, because it may come specifically from public transport users, which could be a limitation for this study since we are not considering the rest of the population who never uses public transport.","c7bef3ef":"# Wrap up project\n## Team members: Joao Carlos Lopes, Luiza Medeiros, Dario Rosales ","f04211ea":"### Youth: 18-24 years old","07e8cf8f":"## Creating new data frames for each age category","876be8d0":"### Adult: 25-64 years old","2d3bfbd5":"# From MongoDB to Pandas DataFrame","bdf70d3c":"This bar plot is a clear way to compare the most used means of transport by our category age, as well as enable us to compare between the age categories. It shows that the group ages seems not to have a significant difference in the use of transport analysed, that is, the mean frequency in each transport category is almost the same in all groups ages. We also can identify that tram is the most frequent in 4 of the 5 ages, especially by youth.","3e77ac2e":"### For TER:","07f01a9b":"From the aggregation above we observe that group of ages bellow 18 show '2' or 'NA' for the permis attribute. We can then deduce that values 'NA' and '2' for permis mean that the person doesn't hold a driver license. On the other hand, values of '1' and '3' mean that the person does hold a driver license (perhaps car and motorcycle driver license). Values will be replaced later","3485c527":"We created a new df each group, and used the describe method to get a general overview of these new df. It is important to note that we have changed the values of gender and license. Our assumptions regarding the driver license seem to be good, since people under 18 are showing 'no' for this attribute.","09a40f7e":"While sorting by ages with PyMongo we could notice that some values are not the right type. So, we will change the type of values in order to be able to proceed with the analysis","08f35884":"### Elder: 75 years old and more ","aff6643c":"We observe that the most representative group of ages is from 25-64. This can be due to the fact that this is the group with widest range of ages (40 years). We can also say that this group is the one with higher prices for transport. ","4dd004e3":"We see that all attributes are 'object' type. We will change the numeric attributes to int32 data type, and replace the values of 'permis' and 'sexe' as specified before","e50b4187":"Dear all I really aprrecited the care and rigour of the project\n- I particularly liked the fact thet you stated research questions and that you interpreted the results\n- Maybe you could have given more details for justifying and argueing the choices you did for exploring the data to make your reasoning line more clear.\n- I missed and the end a figure where you depict the underlying architecture of the experiment exhibiting the interaction of kaggle with mongodb atlas cloud etc..","140fa9bc":"Out of this graph we can see that the most used transport is the Transisere. We also see that the TER is very low compared to the rest. This makes sense since it is a more costly transport, and for longer distances.","5e46d0eb":"## Defining age categories according to Grenoble's public transport rates\nFor our experiment we decided to create age categories according to public transport rates in Grenoble (TAG). These age categories are: (4-17),(18-24),(25-64),(65-74) and (75+)","c5ec0319":"## Which group of users are the most active in public transport?\nIn order to answer this question, we plot the mean frequencies for each transport, for each age category (We use the mean values since each age category size is different).","a25dd010":"### For RUrb:","f3eccd92":"For this exercise we will assume as 1 = male and 2 = female. We will replace the values later","26667207":"## Targetting users by mean of transport:\nFor more details, we will analyze each transport separately. We will compare, for each transport, all age categories to see which are the most frequent users."}}