{"cell_type":{"3ea610f2":"code","23097b01":"code","23049e0e":"code","60217102":"code","6a957e4b":"code","d32930f2":"code","7de25509":"code","7673d3c5":"code","63083ace":"code","b91ae4ad":"code","3bc7da53":"code","a13ed251":"code","dd72a664":"code","a0ece4c4":"code","fc22011e":"code","c52eded7":"code","2d02ff71":"code","92ac342e":"code","dc4a060c":"code","c00c9ba7":"code","0dbf2c4b":"code","b70397e4":"code","0b93fac3":"code","60b84b11":"code","553de119":"code","6b27804c":"code","c8803caf":"code","0dedb556":"markdown","3a51cf2b":"markdown","85c67f3b":"markdown","67a2a986":"markdown","a71b7f12":"markdown","488356f3":"markdown","eabd5589":"markdown","8702da2b":"markdown"},"source":{"3ea610f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23097b01":"train = pd.read_csv('..\/input\/titanic\/train.csv')","23049e0e":"train.corr()","60217102":"train.describe","6a957e4b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'SibSp', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Sibsp\")","d32930f2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Parch', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Parsh\")","7de25509":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Embarked', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Embarked\")","7673d3c5":"sns.distplot(train[train['Survived'] == 0].Fare, kde=False,rug=False)\nsns.distplot(train[train['Survived'] == 1].Fare,  kde=False,rug=False)","63083ace":"train.isnull().sum()","b91ae4ad":"train.Age.median()","3bc7da53":"train.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntrain[\"Age\"].fillna(train[\"Age\"].median(skipna=True), inplace=True)\ntrain[\"Embarked\"].fillna(train['Embarked'].value_counts().idxmax(), inplace=True)","a13ed251":"train['Alone']=np.where((train[\"SibSp\"]+train[\"Parch\"])>0, 0, 1)\ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","dd72a664":"train[['Pclass','Embarked','Sex']]","a0ece4c4":"pd.get_dummies(train['Sex'])","fc22011e":"training = pd.get_dummies(train, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntraining","c52eded7":"training.dtypes","2d02ff71":"from sklearn.preprocessing import StandardScaler\ntrain_standard = StandardScaler()\ntrain_copied = training.copy()\ntrain_standard.fit(train_copied[['Age','Fare']])\ntrain_std = pd.DataFrame(train_standard.transform(train_copied[['Age','Fare']]))\ntrain_std","92ac342e":"training[['Age','Fare'] ] = train_std\ntraining","dc4a060c":"from sklearn.linear_model import LogisticRegression\n\ncols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX = training[cols]\ny = training['Survived']\n# Build a logreg and compute the feature importances\nmodel = LogisticRegression()\n# create the RFE model and select 8 attributes\nmodel.fit(X,y)","c00c9ba7":"from sklearn.metrics import accuracy_score\ntrain_predicted = model.predict(X)\naccuracy_score(train_predicted, y)","0dbf2c4b":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.isnull().sum()","b70397e4":"test.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntest[\"Age\"].fillna(28, inplace=True)\ntest[\"Embarked\"].fillna(test['Embarked'].value_counts().idxmax(), inplace=True)\ntest[\"Fare\"].fillna(train.Fare.median(), inplace=True)\ntest['Alone']=np.where((test[\"SibSp\"]+test[\"Parch\"])>0, 0, 1)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntesting=pd.get_dummies(test, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntesting.dtypes","0b93fac3":"train_standard","60b84b11":"test_copied = testing.copy()\ntest_std = train_standard.transform(test_copied[['Age','Fare']])\ntest_std\ntesting[['Age','Fare']] = test_std\ntesting","553de119":"X_test=testing[cols]\nX_test.dtypes\ntest_predicted = model.predict(X_test)","6b27804c":"test_predicted","c8803caf":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = list(map(int, test_predicted))\nsub.to_csv('submission.csv', index=False)","0dedb556":"## \u6b20\u640d\u5024\u306e\u78ba\u8a8d","3a51cf2b":"## \u30c0\u30df\u30fc\u5909\u6570\u306e\u4f5c\u6210","85c67f3b":"## \u65b0\u3057\u3044\u7279\u5fb4\u306e\u8ffd\u52a0","67a2a986":"##\u3000\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","a71b7f12":"## \u6a19\u6e96\u5316","488356f3":"## Submission\u30c7\u30fc\u30bf\u306e\u7528\u610f","eabd5589":"## \u7279\u5fb4\u91cf\u3092\u78ba\u8a8d","8702da2b":"## \u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9\u56de\u5e30"}}