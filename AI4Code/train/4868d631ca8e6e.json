{"cell_type":{"2f06f075":"code","77b2a485":"code","1e3a77ca":"code","df5fb8a3":"code","2c371467":"code","05d92ab8":"code","cf2fdd3c":"code","26d338aa":"code","2ccb4e6f":"code","712030e1":"code","5fe1b040":"code","d35df416":"code","7a32a63b":"code","3ab00435":"code","23232118":"code","3f94873b":"code","c3205803":"code","07382484":"code","57aeed99":"code","5dcbb905":"code","b2e77579":"code","9375d45f":"code","8f86fced":"code","6e763ae3":"code","354c9951":"code","ee7e6a0e":"code","b8e0560c":"code","5118674f":"code","f9983f39":"code","b38efbf4":"code","a4a6a799":"code","264de83e":"code","0fc46727":"code","cb08af18":"code","143c325d":"code","e0a6513d":"code","c017a355":"code","d921aca1":"code","6226cad9":"code","35161532":"code","188fb4d1":"code","4ed22a23":"code","d4d6ce02":"code","e33b85e3":"code","eb2acb55":"code","45093bde":"code","52b05a72":"code","165c7b46":"code","21345850":"code","992b59e9":"code","d169c3dc":"code","610b2d30":"code","9e28f35c":"code","5f45e3e8":"code","6c62e564":"code","18c40a6e":"code","640bc836":"code","3f7b8543":"code","225eb50f":"code","76a28d3b":"code","634a75d9":"code","f9a00765":"code","4a2e5933":"code","f01ec592":"code","9e7e22f5":"code","ca5afbbd":"code","f5c983cf":"code","2a5c068e":"code","e14563fe":"code","5c68942b":"code","990e5dbe":"code","f6a8a72a":"code","dcd2b028":"code","eeb13d47":"code","9edab342":"markdown","5e669f50":"markdown","bd2771f0":"markdown","d698a053":"markdown","1262af34":"markdown","ab61e357":"markdown","6839f6f3":"markdown","39941722":"markdown","27900a0c":"markdown","1717feb2":"markdown","064b7474":"markdown","29a4bab2":"markdown","3f00c35d":"markdown","fba79a58":"markdown","c49ee378":"markdown","7392c456":"markdown","c2b3a2b4":"markdown","e7605549":"markdown","07e0ad2b":"markdown","a01b967b":"markdown","12110c0a":"markdown","42fdc8cb":"markdown","d54f00fe":"markdown","87853c63":"markdown"},"source":{"2f06f075":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter# \u0441\u0447\u0435\u0442\u0447\u0438\u043a\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","77b2a485":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","1e3a77ca":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","df5fb8a3":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","2c371467":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","05d92ab8":"col = ['Restaurant_id', 'City', 'Cuisine_Style', 'Ranking', 'Price_Range', 'Number_of_Reviews', 'Reviews', 'URL_TA', 'ID_TA','sample','Rating']\ndata.columns = col","cf2fdd3c":"data.info(100000)","26d338aa":"data","2ccb4e6f":"data['Restaurant_id'].value_counts()\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0432\u0441\u0435 \u043e\u043a","712030e1":"print(data['Restaurant_id'].describe())\n# \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e - \u0432 \u043e\u0434\u043d\u043e\u043c\u0443 id  \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438,\n# \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0435\u0439","5fe1b040":"data['Restaurant_id'] = [i[3:] for i in data['Restaurant_id']]\ndata['Restaurant_id'] = [int(i) for i in data['Restaurant_id']]\n\nprint(' ')\nprint(len(data['Restaurant_id']))\nprint(type(data['Restaurant_id'][1]))\n\n# \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435","d35df416":"a=data['Restaurant_id'].value_counts()\na=dict(a)\na=pd.DataFrame({'count':a}, columns=['count'])\n\nA=a.index\nB=a.values\n\ndata['chain']= data['Restaurant_id'].replace(A, B)\ndata[['Restaurant_id', 'chain']]","7a32a63b":"data.City.value_counts()\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442, \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f, \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0440\u0430\u043a\u043b\u0430\u0434\u043a\u043e\u0439 \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043c \u043d\u0435\u0442, \u0432\u0441\u0435 \u043e\u043a","3ab00435":"\nprint(data.City.describe())","23232118":"#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c City \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e dummy\ndata = pd.concat((data, pd.get_dummies(data.City)), axis=1)\ndata.info()","3f94873b":"A = list(data.City.value_counts().keys())\ndata1=pd.DataFrame()\ndata1['City'] = data['City']\ndata1['Ranking']=data['Ranking']\ndata1=pd.DataFrame(data1.groupby(['City']).max())\ndata2=data1['Ranking']\nA=list(data2.keys())\nB=list(data2)\n\ndata['Len_rest_in_city'] = data['City'].replace(A, B)\n\ndata['Std_ranking']=data['Ranking']\/data['Len_rest_in_city']\n\ndata.Std_ranking.describe()","c3205803":"data2","07382484":"number_city_residents_dict = {'Paris':2148327, 'Stockholm':961609, 'London':8908081, 'Berlin':3644826, 'Munich':1471508, 'Oporto':237591,\n       'Milan':1378689, 'Bratislava':437725, 'Vienna':1897491, 'Rome':2870500, 'Barcelona':1636762, 'Madrid':3266126,\n       'Dublin':1173179, 'Brussels':179277, 'Zurich':428737, 'Warsaw':1790658, 'Budapest':1752286, 'Copenhagen':615993,\n       'Amsterdam':872757, 'Lyon':506615, 'Hamburg':1841179, 'Lisbon':505526, 'Prague':1301132, 'Oslo':673469,\n       'Helsinki':655281, 'Edinburgh':488100, 'Geneva':200548, 'Ljubljana':284355, 'Athens':664046,\n       'Luxembourg':602005, 'Krakow':769498}\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u043a\u043e\u043b-\u0432\u043e\u043c \u0436\u0438\u0442\u0435\u043b\u0435\u0439\ndata['population'] = data['City'].replace(number_city_residents_dict)\nprint(len(data.population))\nprint(type(data.population[1]))","57aeed99":"country_dict = {'London': 'GreatBritain', 'Paris': 'France', 'Madrid': 'Spain', 'Barcelona': 'Spain', \n                'Berlin': 'Germany', 'Milan': 'Italy', 'Rome': 'Italy', 'Prague': 'CzechRepublic', \n                'Lisbon': 'Portugal', 'Vienna': 'Austria', 'Amsterdam': 'Netherlands', 'Brussels': 'Belgium', \n                'Hamburg': 'Germany', 'Munich': 'Germany', 'Lyon': 'France', 'Stockholm': 'Sweden', \n                'Budapest': 'Hungary', 'Warsaw': 'Poland', 'Dublin': 'Irland', 'Copenhagen': 'Denmark', \n                'Athens': 'Greece', 'Edinburgh': 'Scotland', 'Zurich': 'Switzeland', 'Oporto': 'Portugal', \n                'Geneva': 'Switzeland', 'Krakow': 'Poland', 'Oslo': 'Norway', 'Helsinki': 'Finland', \n                'Bratislava': 'Slovakia', 'Luxembourg': 'Luxembourg', 'Ljubljana': 'Slovenia'\n}\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0433\u043e\u0440\u043e\u0434\u0430-\u0441\u0442\u0440\u0430\u043d\u044b\n\ndata['Country'] = data.City.replace(country_dict)\nprint(data.Country.value_counts())\n\nA = list(data.Country.value_counts().keys())\nB = range(0, len(A))\ndict_country = dict(zip(A, B))\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u0442\u0440\u0430\u043d\n\n\ndata['Country_ind'] = data['Country'].replace(A, B)\n\nprint(len(data.Country_ind))\nprint(type(data.Country_ind[1]))","5dcbb905":"data['rew_on_pop'] = data['Number_of_Reviews']\/data['population']\ndata['rew_on_pop'] = data['rew_on_pop'].fillna(0)\n\nprint(len(data.rew_on_pop))\nprint(type(data.rew_on_pop[1]))","b2e77579":"# # \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n# list_of_unique_Cuisine = [x[0] for x in temp_counter.most_common()[-16:]]\n# data['unique_Cuisine_Style'] = data['Cuisine_Style'].apply(lambda x: 1 if len(set(x) & set(list_of_unique_Cuisine))>0  else 0).astype('float64')","9375d45f":"len(data[data['Cuisine_Style'].isna()])","8f86fced":"# \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 11590 (23.2%) \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \n# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e\ndata['NAN_Cuisine Style'] = pd.isna(data['Cuisine_Style']).astype('float64') \n\n\ndata['Cuisine_Style'] = data['Cuisine_Style'].fillna(\"['No_info']\")\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n\n# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043e \u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nle = LabelEncoder()\nle.fit(data['Cuisine_Style'])\ndata['code_Cuisine Style'] = le.transform(data['Cuisine_Style'])","6e763ae3":"# \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ndata['Cuisine_Style'] = data['Cuisine_Style'].str.findall(r\"'(\\b.*?\\b)'\")\n\ntemp_list = data['Cuisine_Style'].tolist()\n\ndef list_unrar(list_of_lists):\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043d\u0438\n    result=[]\n    for lst in list_of_lists:\n        result.extend(lst)\n    return result\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043d\u0438\ncoun=Counter(list_unrar(temp_list))\n\n\n\n# \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nlist_of_unique_Cuisine = [x[0] for x in coun.most_common()[-16:]]\ndata['unique_Cuisine_Style'] = data['Cuisine_Style'].apply(lambda x: 1 if len(set(x) & set(list_of_unique_Cuisine))>0  else 0).astype('float64')\n\ndata['Cuisine_Style2'] = data['Cuisine_Style']\n\n# coun = Counter(b)  # \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u043a\u0443\u0445\u043d\u0438\ncoun = dict(coun)\ncoun = pd.DataFrame({'count': coun}, columns=['count'])\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043d\u0438\na = coun['count'].mean()\n\nb = set(coun.query('count > @a').index)\n# \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438\n\nc = set(coun.index) - b\n# \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0435\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438\n\ncus_st = pd.DataFrame(data['Cuisine_Style2'].to_list()).stack()\nfor item in c:\n    cus_st = cus_st.replace(item, 'other_cuisine_style')\ncus_st = cus_st.groupby(level=[0]).apply(\",\".join).reset_index()\ndata['Cuisine_Style'] = cus_st[0]\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0435\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u043d\u0430 'other'\n\n\nb.add('other_cuisine_style')\n\ndef find_item(cell):\n    if item in cell:\n        return 1\n    return 0\n\n\nfor item in b:\n    data[item] = data['Cuisine_Style'].apply(find_item).astype(np.uint8)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n\n\ndata['count_Cuisine_Style'] = data['Cuisine_Style2'].apply(lambda x: len(x))\n# \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\n\nprint(len(data['Cuisine_Style']))\nprint(len(data['count_Cuisine_Style']))\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b, \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u044b","354c9951":"data.info()","ee7e6a0e":"print(data.Price_Range.describe())","b8e0560c":"price_dict ={'$':1, '$$ - $$$':2, '$$$$':3}\ndata['price_rank'] = data['Price_Range'].replace(price_dict)\n# \u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u0430\n\nprice_mode = data['price_rank'].mode()\ndata['price_rank'].fillna(int(price_mode), inplace=True)\n# \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0430\u043c\u043e\u0439 \u0447\u0430\u0441\u0442\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u043e\u0439\n\nprint('')\nprint(len(data.price_rank))\nprint(type(data.price_rank[1]))\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043d\u0430 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435","5118674f":"print(data.Reviews.describe())","f9983f39":"from datetime import datetime, date, time\ndata['Reviews'] = data.Reviews.replace(\"[[], []]\", 'No_info')\n# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","b38efbf4":"data['Last_rew'] = data['Reviews']\n\ndata['Last_rew']=data['Last_rew'].str[-27:-17]\n\nnow = datetime.now()","a4a6a799":"data['Last_rew']","264de83e":"#base['Last_rew'][base.Last_rew.str.contains(\"]\")]=now\ndata['Last_rew'][data.Last_rew.str.contains(\"]\")==True] = '01\/01\/2000'\ndata['Last_rew'] = data['Last_rew'].fillna('01\/01\/2000')","0fc46727":"data['Last_rew'] = data['Last_rew'].apply(pd.to_datetime) ","cb08af18":"data['Last_rew_data'] = now - data['Last_rew']","143c325d":"data['Last_rew_data'] = data['Last_rew_data'].apply(lambda x: x.total_seconds())# [i.total_seconds() for i in data.Last_rew_data]","e0a6513d":"data['Last_rew_data'] = data['Last_rew_data'].fillna(data['Last_rew_data'].max())\ndata['Last_rew_data'] = data['Last_rew_data'].astype(np.int64)\nprint('')\nprint(len(data.Last_rew_data))\nprint(type(data.Last_rew_data[1]))","c017a355":"m=data['Number_of_Reviews'].mean()\nprint(data['Number_of_Reviews'].describe())\n# \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u0442","d921aca1":"\ndata['Number_of_Reviews'].value_counts()\n# \u043d\u043e \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 - \u0442\u0430\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432","6226cad9":"data['Number_of_Reviews'] = data['Number_of_Reviews'].fillna('No_info')\n# \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 Not_info","35161532":"a = data.query('Reviews == \"No_info\" & Number_of_Reviews == \"No_info\"')\nb = list(a.index)\ndata['Number_of_Reviews'][b] = 0\n# \u0433\u0434\u0435 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043f\u0440\u0435\u0432\u044c\u044e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 - \u0441\u0442\u0430\u0432\u0438\u043c 0","188fb4d1":"len(data['Number_of_Reviews'])\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","4ed22a23":"data['Number_of_Reviews'] = data['Number_of_Reviews'].replace('No_info', m)\n\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n\nprint('')\nprint(len(data.Number_of_Reviews))\nprint(type(data.Number_of_Reviews[1]))","d4d6ce02":"A = list(data.City.value_counts().keys())\ndata1=pd.DataFrame()\ndata1['City'] = data['City']\ndata1['Number_of_Reviews']=data['Number_of_Reviews']","e33b85e3":"data2=pd.DataFrame(data1.groupby(['City']).sum())\ndata2=data2['Number_of_Reviews']\nA=list(data2.keys())\nB=list(data2)\n","eb2acb55":"data['Len_rew'] = data['City'].replace(A, B)\n\ndata['Std_num_rew']=data['Number_of_Reviews']\/data['Len_rew']","45093bde":"print(data['ID_TA'].describe())","52b05a72":"data['ID_TA']=data['ID_TA'].str[1:]\ndata.ID_TA = [float(i) for i in data.ID_TA]","165c7b46":"print('')\nprint(len(data.ID_TA))\nprint(type(data.ID_TA[1]))","21345850":"plt.rcParams['figure.figsize'] = (10,7)\ndata['Ranking'].hist(bins=100)","992b59e9":"data['City'].value_counts(ascending=True).plot(kind='barh')","d169c3dc":"data['Ranking'][data['City'] =='London'].hist(bins=100)","610b2d30":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (data['City'].value_counts())[0:10].index:\n    data['Ranking'][data['City'] == x].hist(bins=100)\nplt.show()","9e28f35c":"data['Rating'].value_counts(ascending=True).plot(kind='barh')","5f45e3e8":"data['Ranking'][data['Rating'] == 5].hist(bins=100)","6c62e564":"data['Ranking'][data['Rating'] < 4].hist(bins=100)","18c40a6e":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data[col].drop(['sample'], axis=1).corr(),)","640bc836":"data = data.drop('URL_TA', axis=1)\ndata = data.drop('Reviews', axis=1)\ndata = data.drop('Last_rew', axis=1)\ndata = data.drop('City', axis=1)\ndata = data.drop('Country', axis=1)\ndata = data.drop('Restaurant_id', axis=1)\ndata = data.drop('chain', axis=1)\ndata = data.drop('Cuisine_Style', axis=1)\ndata = data.drop('Cuisine_Style2', axis=1)\ndata = data.drop('Price_Range', axis=1)\n","3f7b8543":"data.info()","225eb50f":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.drop(['sample'], axis=1).corr(),)","76a28d3b":"\ndata.corr()","634a75d9":"pd.options.display.max_info_columns \ndata.info(verbose=True, max_cols=False, null_counts=True)","f9a00765":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","4a2e5933":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","f01ec592":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","9e7e22f5":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","ca5afbbd":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","f5c983cf":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","2a5c068e":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","e14563fe":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","5c68942b":"test_data.sample(10)\ntest_data = test_data.drop(['Rating'], axis=1)","990e5dbe":"len(test_data)","f6a8a72a":"len(sample_submission)","dcd2b028":"predict_submission = model.predict(test_data)\n\nlen(predict_submission)","eeb13d47":"def round_nearest(x, a):\n    return round(x \/ a) * a\n\nsample_submission['Rating'] = predict_submission.round(1)\nsample_submission['Rating'] = round_nearest(sample_submission['Rating'], 0.5)\n\n\nsample_submission.head(10)\n\nsample_submission.to_csv('submission.csv', index=False)","9edab342":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0438\u043a \u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e (\u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043f\u0438\u0448\u0443\u0442 \u0438\u0445)**","5e669f50":"**\u0423\u0434\u0430\u043b\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0438\u043b\u0438 \u043d\u0435\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0438\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0440\u0442\u044f\u0442 \u043d\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442**","bd2771f0":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","d698a053":"# DATA","1262af34":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Cuisine_Style (\u043a\u0443\u0445\u043d\u044f \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0431\u043b\u044e\u0434\u0430, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","ab61e357":"# Cleaning and Prepping Data","6839f6f3":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \"\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\" \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c","39941722":"# import","27900a0c":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Country (\u0441\u0442\u0440\u0430\u043d\u0430)**","1717feb2":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0441\u0435\u0442\u0438**","064b7474":"# Model \n\u0421\u0430\u043c ML","29a4bab2":"**\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 ID_TA (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor)**","3f00c35d":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Restaurant_id (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432)**","fba79a58":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","c49ee378":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","7392c456":"**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Population (\u043a\u043e\u043b-\u0432\u043e \u0436\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435)**","c2b3a2b4":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Number_of_Reviews (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","e7605549":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Price_Range (\u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435)**","07e0ad2b":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 Reviews (\u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430)**","a01b967b":"**\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430**","12110c0a":"# Data Preprocessing","42fdc8cb":"**\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0438\u043a \u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043a\u043e\u043b-\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443**","d54f00fe":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","87853c63":"**\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 City (\u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d)**"}}