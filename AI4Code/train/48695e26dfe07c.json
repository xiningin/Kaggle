{"cell_type":{"573fbeb5":"code","92aa41dd":"code","9f21c45c":"code","a2c23a0e":"code","f8c393df":"code","bc15823c":"code","6e238d09":"code","f516a6ee":"code","4a50fb7d":"code","68a8802c":"code","dc71243e":"code","f168593a":"code","ed618e59":"code","d1577ce0":"code","fa999581":"code","c83b51b0":"code","47416d40":"markdown","d6dc32cc":"markdown","b5c128d0":"markdown","6e84ffba":"markdown","45af3980":"markdown","267fa00c":"markdown","68a22354":"markdown"},"source":{"573fbeb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92aa41dd":"diamonds = pd.read_csv(\"\/kaggle\/input\/diamonds\/diamonds.csv\", index_col=0)","9f21c45c":"diamonds[\"volume\"] = diamonds[\"x\"] * diamonds[\"y\"] * diamonds[\"z\"]\ndiamonds = diamonds.drop([\"x\", \"y\", \"z\"], axis= 1)\ndiamonds = diamonds.drop(diamonds.index[diamonds[\"volume\"]== 0], axis= 0)","a2c23a0e":"diamonds.head()","f8c393df":"plt.figure(figsize=(10, 9))\ndf_corr = diamonds.corr()\nsns.heatmap(df_corr, cmap= sns.diverging_palette(250, 15, s=75, l=40,n=9, center=\"dark\"), annot=True)\nplt.title(\"Correlation of White and Red Wine\")\nplt.show()","bc15823c":"plt.figure(figsize=(15, 7))\nsns.distplot(diamonds[\"price\"], color=\"#5E3434\")\nplt.xlabel(\"Price\")\nplt.title(\"Distribution of Price in Diamond dataset\")\nprint(\"Highest Price in Diamond dataset: \", diamonds[\"price\"].max())\nplt.show()","6e238d09":"plt.figure(figsize=(15, 7))\nsns.distplot(diamonds[\"carat\"], color=\"#5E3434\")\nplt.xlabel(\"Carat\")\nplt.title(\"Distribution of Carat in Diamond dataset\")\nprint(\"Highest Carat in Diamond dataset: \", diamonds[\"carat\"].max())\nplt.show()","f516a6ee":"# From Worst to Best (Fair= Worst) ,(Ideal= Best)\nplt.figure(figsize= (15, 7))\ncut = sns.countplot(x= \"cut\", data= diamonds, palette= sns.color_palette(\"cubehelix\", 5),\n              order=[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"])\nplt.xlabel(\"Cut\")\nplt.ylabel(\"Number of Observations\")\nfor p in cut.patches:\n    height = p.get_height().round(2)\n    text = str(height)\n    cut.text(p.get_x()+p.get_width()\/2,height + 200,text, ha=\"center\")\nplt.show()","4a50fb7d":"plt.figure(figsize= (15, 7))\nsns.boxplot(x= \"cut\", y= \"price\", data= diamonds, palette= sns.color_palette(\"cubehelix\", 5),\n            order=[\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"])\nplt.xlabel(\"Cut\")\nplt.ylabel(\"Price\")\nplt.show()","68a8802c":"# From Worst to Best (I1= Worst) (IF= Best)\nplt.figure(figsize= (15, 7))\nclarity = sns.countplot(x= \"clarity\", data= diamonds, order=[\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"], palette= \"Set2\")\nplt.xlabel(\"Clarity\")\nplt.ylabel(\"Number of Observations\")\nfor p in clarity.patches:\n    height = p.get_height().round(2)\n    text = str(height)\n    clarity.text(p.get_x()+p.get_width()\/2,height + 200,text, ha=\"center\")\n\nplt.show()","dc71243e":"plt.figure(figsize= (15, 7))\nsns.violinplot(x= \"clarity\", y= \"price\", data= diamonds, inner= None,\n            order=[\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"], palette= \"Set2\")\nplt.xlabel(\"Clarity\")\nplt.ylabel(\"Price\")\nplt.show()","f168593a":"color_dict = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\", \"#5E3434\"]","ed618e59":"# From Worst to Best (J= Worst) (D= Best)\nplt.figure(figsize= (15, 7))\ncolor = sns.countplot(x= \"color\", data= diamonds, palette= color_dict, order=[\"J\", \"I\", \"H\", \"G\", \"F\", \"E\", \"D\"])\nplt.xlabel(\"Color\")\nplt.ylabel(\"Number of Observations\")\nfor p in color.patches:\n    height = p.get_height().round(2)\n    text = str(height)\n    color.text(p.get_x()+p.get_width()\/2,height + 200,text, ha=\"center\")\nplt.show()","d1577ce0":"plt.figure(figsize= (15, 7))\nsns.boxplot(x= \"color\", y= \"price\", data= diamonds, palette= color_dict, order=[\"J\", \"I\", \"H\", \"G\", \"F\", \"E\", \"D\"])\nplt.xlabel(\"Color\")\nplt.ylabel(\"Price\")\nplt.show()","fa999581":"plt.figure(figsize= (9, 9))\nsns.scatterplot(x= \"depth\", y= \"table\", data= diamonds, y_jitter=True, x_jitter= True, alpha=.5, hue= \"cut\")\nplt.xlabel(\"Depth\")\nplt.ylabel(\"Table\")\nplt.legend(ncol= 3)\nplt.xlim(50, 75)\nplt.ylim(48, 72)\nprint(\"Correlation of Depth and Table of Diamonds: \", round(diamonds[\"table\"].corr(diamonds[\"depth\"]),2))\nplt.show()","c83b51b0":"fig = px.scatter_3d(diamonds, x='carat', y='volume', z='price', color= \"cut\")\nfig.show()","47416d40":"# Clarity plots","d6dc32cc":"## Create volume of diamonds that contains x * y * z","b5c128d0":"## Scatterplot of Table and Depth with different cuts","6e84ffba":"# Cut plots","45af3980":"# Color plots","267fa00c":"## Distribution of \"Price\" and \"Carat\"","68a22354":"## 3D plot of \"Carat\", \"Volume\" and \"Price\" with different cuts"}}