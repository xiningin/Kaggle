{"cell_type":{"63272d68":"code","b38f9785":"code","c63a7ec6":"code","1fab4d59":"code","ca78bc97":"code","271b65a3":"code","9703cb48":"code","bafc2bd2":"code","7d766cec":"markdown","d059738e":"markdown","9aaba350":"markdown","f1b12766":"markdown"},"source":{"63272d68":"import os\nimport random\nimport pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\nfrom tqdm.notebook import trange, tqdm\nimport matplotlib.pyplot as plt\nimport gresearch_crypto","b38f9785":"TRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'\nSEED = 2021\nREMOVE_LB_TEST_OVERLAPPING_DATA = True\n\ndef fix_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n\nfix_seeds(SEED)","c63a7ec6":"train_df = pd.read_csv(TRAIN_CSV)\nasset_details_df = pd.read_csv(ASSET_DETAILS_CSV).sort_values('Asset_ID')\n\n# Remove the future\nif REMOVE_LB_TEST_OVERLAPPING_DATA:\n    train_df['datetime'] = pd.to_datetime(train_df['timestamp'], unit='s')\n    train_df = train_df[train_df['datetime'] < '2021-06-13 00:00:00']\n\ndisplay(train_df.head(3))\ndisplay(asset_details_df.head(3))","1fab4d59":"def data_complement(train_df, asset_details_df):\n    asset_df_list = []\n    for asset_id in tqdm(asset_details_df.Asset_ID):\n        \n        asset_name = asset_details_df.loc[asset_details_df.Asset_ID==asset_id, 'Asset_Name'].values[0]\n        print(f\"{asset_id: >2} {asset_name: <20}\", end=' ')\n        asset_df = train_df.loc[train_df.Asset_ID == asset_id].set_index('timestamp')\n        print(f\"Length : {len(asset_df):,}\", end=' -> ')\n        \n        # Re Index\n        asset_df = asset_df.reindex(range(train_df.timestamp.min(),train_df.timestamp.max()+60,60), method='pad')\n        asset_df['datetime'] = pd.to_datetime(asset_df.index, unit='s')\n        \n        # Data complement\n        asset_df['Asset_ID'] = asset_id\n        fill_cols = ['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']\n        asset_df[fill_cols] = asset_df[fill_cols].replace([np.inf, -np.inf], np.nan)  # Replace Infinite\n        asset_df[fill_cols] = asset_df[fill_cols].interpolate('index')\n        asset_df['Target'] =  asset_df['Target'].fillna(value=0.0)\n        asset_df[fill_cols] =  asset_df[fill_cols].fillna(asset_df[fill_cols].mean())\n        \n        # Drop if nan\n        asset_df = asset_df.dropna(subset=['Target'])\n        \n        print(f\"{len(asset_df):,}\")\n        asset_df_list.append(asset_df)  \n        \n    return pd.concat(asset_df_list, axis=0)","ca78bc97":"train_complemented_df = data_complement(train_df, asset_details_df)","271b65a3":"def plt_assets(df, asset_details_df):\n    plt.subplots_adjust(wspace=10.0, hspace=2.0)\n    fig = plt.figure(figsize=(18, 25))\n    for i, asset_id in enumerate(asset_details_df.Asset_ID):\n        asset_name = asset_details_df.loc[asset_details_df.Asset_ID==asset_id, 'Asset_Name'].values[0]\n        ax = fig.add_subplot(7, 2, i+1)\n        plt.xlabel('DateTime')\n        plt.ylabel(asset_name)\n        ax.plot(df.loc[df.Asset_ID==asset_id, 'Close'], color='red', label='Close')\n        plt.legend(loc='upper left')\n        ax2 = ax.twinx()\n        plt.grid()\n        ax2.plot(df.loc[df.Asset_ID==asset_id, 'Target'], color='blue', alpha=0.5, label='Target')\n        plt.legend(loc='upper right')\n    \n    plt.show()","9703cb48":"plt_assets(train_complemented_df, asset_details_df)","bafc2bd2":"display(train_complemented_df.head(3))","7d766cec":"## Data view","d059738e":"## Load data","9aaba350":"## Data complement","f1b12766":"# Crypto_DataComplement_Plot\n- Plot the Target and Close for each cryptocurrency.\n- Complement each cryptocurrency data so that they have the same time period."}}