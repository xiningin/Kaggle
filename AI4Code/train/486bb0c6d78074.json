{"cell_type":{"1af3d37a":"code","5648c542":"code","b2a5d8a3":"code","47e5037c":"code","60617faa":"code","e204976b":"code","64927f7b":"code","fc0c5fee":"code","cbff29ab":"code","e152949e":"code","cf272727":"code","89b6ed43":"code","4be87216":"code","7c51a8e7":"code","7fe862f0":"code","7a47e6b9":"code","9ebd6b86":"code","90ea40fe":"markdown","bd623d46":"markdown","67d967a1":"markdown","27172f94":"markdown","68a1e3ed":"markdown","20db4e13":"markdown","c5b0eaa9":"markdown","f55aff04":"markdown","aacac880":"markdown","b6a7f81e":"markdown","1af17325":"markdown","a9aa770b":"markdown","d687490f":"markdown"},"source":{"1af3d37a":"# Load packages\nimport pandas as pd\nimport numpy as np\nimport os\nimport time\n\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_predict,cross_val_score,train_test_split,StratifiedKFold\nfrom sklearn.metrics import classification_report,confusion_matrix,roc_curve,auc,precision_recall_curve,roc_curve, roc_auc_score\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\n%matplotlib inline","5648c542":"# Read data\ncredit_df = pd.read_csv('\/kaggle\/input\/UCI_Credit_Card.csv')","b2a5d8a3":"credit_df.shape","47e5037c":"# Class imbalance on whole dataset\ndef column_summary(df,col_name):\n    sum_df = df.groupby(str(col_name),as_index = False).agg({'ID':'nunique'})\n  \ncredit_df.groupby('default.payment.next.month',as_index = False).agg({'ID':'nunique'})","60617faa":"col_names = credit_df.columns\ncol_names","e204976b":"# List of features for dummies\ndum_list = ['SEX','EDUCATION','MARRIAGE','PAY_0','PAY_2','PAY_3','PAY_4','PAY_5','PAY_6']\n# loop through list and create dummies!\nfor i in dum_list:\n    dummies = pd.get_dummies(credit_df[str(i)]).rename(columns=lambda x: str(i)+'_' + str(x))\n    credit_df = pd.concat([credit_df, dummies], axis=1)\n\n# Dummies created, now drop one dummy for each category for modelling\nnew_cols = credit_df.columns\n\n# Drop all _2 dummies\ndrop_cols = [x for x in new_cols if x.endswith('_2')]\ndrop_cols\ncredit_df.drop(drop_cols, axis=1, inplace=True)\n\n# Now also drop original columns that were dummified as well as ID and \nnew_drop = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_0', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6','ID']\ncredit_df.drop(new_drop, axis=1, inplace=True)\n\n# Drop any duplicate columns from concat\ncredit_df = credit_df.loc[:,~credit_df.columns.duplicated()]","64927f7b":"credit_df.shape","fc0c5fee":"credit_df.head()","cbff29ab":"# split data into X and y\nY = credit_df[\"default.payment.next.month\"]\nX = credit_df.drop(\"default.payment.next.month\", axis=1,)\n\n# split data into train and test sets\nseed = 7\ntest_size = 0.4\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)","e152949e":"# Create classifier (default hyperparams)\nmodel = XGBClassifier()","cf272727":"# Specify CV method (stratified becasue of class imbalance)\nkfold = StratifiedKFold(n_splits=10, random_state=7)","89b6ed43":"# Get results of CV\nresults = cross_val_score(model, X_train, y_train, cv=kfold)\n# 82% Accuracy on training set w\/ default hyperparams\ncv_mean = results.mean() * 100\ncv_std = results.std()*100\nprint(\"Accuracy: %.2f%% (%.2f%%)\" % (cv_mean,cv_std ))","4be87216":"model = XGBClassifier()\nmodel.fit(X_train, y_train)","7c51a8e7":"# Get predicted probabilites\ny_pred = model.predict_proba(X_test)[:,1]\n\n# Round predictions for accuracy\npredictions = [round(value) for value in y_pred]\n\n# 82% Accuracy on holdout set (CV was good at estimating models performance!)\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","7fe862f0":"precision, recall, _ = precision_recall_curve(y_test, y_pred)\n\n# Plot PR Curve\nfig = plt.figure(figsize=(15,8))\nax1 = fig.add_subplot(1,2,1)\nax1.set_xlim([-0.05,1.05])\nax1.set_ylim([-0.05,1.05])\nax1.set_xlabel('Recall')\nax1.set_ylabel('Precision')\nax1.set_title('PR Curve')\np,r,_ = precision_recall_curve(y_test,y_pred)\nax1.plot(r,p)\nplt.show()","7a47e6b9":"fpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr, label='XGBOOST')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","9ebd6b86":"# 77% AUC\nauc = roc_auc_score(y_test, y_pred) * 100\nprint(\"ROC: %.2f%%\" % (auc))","90ea40fe":"## Run CV on initial XGB model","bd623d46":"## ROC Curve","67d967a1":"## Look at model performance on holdout set","27172f94":"# UCI Credit Card Default","68a1e3ed":"## EDA (brief)","20db4e13":"## Create dummies","c5b0eaa9":"## Load in packages","f55aff04":"## Train model on whole training set","aacac880":"## Split into test-train","b6a7f81e":"## Read in Data","1af17325":"### To prepare for modelling complete the following steps\n\n1. Drop ID\n2. Dumify\n    - SEX\n    - EDUCATION\n    - MARRIAGE\n    - PAY_0 -> PAY_6\n    (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months,\n    8=payment delay for eight months, 9=payment delay for nine months and above)\n3. Strip off y value -> default.payment.next.month ","a9aa770b":"## PR Curve","d687490f":"## Clean data and create dummy variables"}}