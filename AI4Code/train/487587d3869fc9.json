{"cell_type":{"347a7d60":"code","1bfcf03e":"code","9667af63":"code","e3bc7712":"code","ceeb1775":"code","5242fb2e":"code","665e5ab8":"code","bf05e462":"code","d9cdbcb9":"code","cdee0bf8":"code","5d87c491":"code","f727e7b1":"code","81fda211":"code","f9f408f0":"code","82f88373":"code","3c819235":"code","e86a718a":"code","9edaa74e":"code","822de993":"code","58feab7b":"code","0b2baa13":"code","16f529e4":"code","bf42bcc6":"code","792c4926":"code","24726099":"code","5fb2a645":"code","a95d9a5b":"code","14040771":"code","474a4ace":"code","a30bfc93":"code","4a82ae9a":"code","8ba54af6":"code","c1eddf3b":"code","b164001d":"code","c7fb9041":"code","744dcf6b":"code","a8acbc52":"code","8e266d64":"code","c7bbe6d1":"code","a7797cf9":"code","a412007a":"code","93ea24b4":"code","78bb9b21":"code","72f13d3a":"code","100cc4aa":"code","366caec4":"code","6c9c1cbc":"code","1c07fbc8":"code","9a44866c":"code","42f086d8":"code","7df309eb":"code","32dbe1a5":"code","d4964da3":"code","6a24f38a":"code","7dba7c2d":"code","5c9ca7c1":"code","a2880e82":"code","0c165203":"code","610df8d5":"code","56d6fac8":"code","eaf67b12":"code","7c3bb71e":"code","105e9e10":"code","46bc220e":"code","4c654f11":"code","d63ef6bd":"code","c2dec96c":"code","16e1048a":"code","3404a145":"code","7953c1b2":"code","e31b06f4":"code","287f0a60":"code","08a6f11d":"code","ed13cccb":"code","1a971361":"code","542053a1":"code","619b4672":"code","d16c9764":"code","a082cfb5":"code","27a1a934":"code","9bfb5fcf":"code","348ddaa7":"code","4a554642":"code","21b9b50d":"code","80331dba":"code","3480645e":"code","b05cc2c9":"code","260918d6":"code","3ab3f312":"code","dbf7d529":"code","5ebdc86b":"code","be3add73":"code","62be045f":"code","456d9e70":"code","c38af5e7":"code","dd7bed3c":"code","10a27f24":"code","a3ecd1f5":"code","9ed8f03b":"code","e8b580ef":"code","30f09309":"code","c371cf74":"markdown","57a35547":"markdown","7e456a25":"markdown","57931436":"markdown","c2b34b3e":"markdown","dab9ac65":"markdown","8f5c1c5c":"markdown","180cb355":"markdown","45db54b4":"markdown","f5a86d37":"markdown","fbd5c811":"markdown","7b4cf245":"markdown","cf2f7d1f":"markdown","95aeb5d2":"markdown","287a7090":"markdown","88cd62d9":"markdown","306d9f62":"markdown","d348c545":"markdown","ff742e09":"markdown","3d2a3f96":"markdown","83ae3d69":"markdown","f193c6ea":"markdown","79d8786b":"markdown","d66bc93a":"markdown","38fb9808":"markdown","e5d90ebd":"markdown","b3a18a57":"markdown","d5ca53f5":"markdown","c44290c1":"markdown","7de0a731":"markdown","8e80df68":"markdown","bf599151":"markdown","cbf10a7a":"markdown","d588588e":"markdown","43037292":"markdown","4e84cdac":"markdown","53925ae3":"markdown","ead4bc3a":"markdown","8f4dace3":"markdown","43b824f3":"markdown","dd3ffa99":"markdown","6af52a68":"markdown","c9e83649":"markdown","c504e318":"markdown","84658731":"markdown","edeb9604":"markdown","0c373b03":"markdown"},"source":{"347a7d60":"%%html\n\n<div class='tableauPlaceholder' id='viz1589830533527' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Dy&#47;DynamicHRstatistics&#47;DynamicHRstatistics&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='DynamicHRstatistics&#47;DynamicHRstatistics' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Dy&#47;DynamicHRstatistics&#47;DynamicHRstatistics&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1589830533527');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.minWidth='420px';vizElement.style.maxWidth='650px';vizElement.style.width='100%';vizElement.style.minHeight='587px';vizElement.style.maxHeight='887px';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='977px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","1bfcf03e":"import os","9667af63":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","e3bc7712":"from sklearn.preprocessing import LabelEncoder","ceeb1775":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report","5242fb2e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n% matplotlib inline","665e5ab8":"from tqdm import tqdm","bf05e462":"DATA_PATH = \"\/kaggle\/input\/softserve-ds-hackathon-2020\/\"","d9cdbcb9":"employees_df = pd.read_csv(os.path.join(DATA_PATH, \"employees.csv\"))\nsubmission_df = pd.read_csv(os.path.join(DATA_PATH, \"submission.csv\"))\nhistory_df = pd.read_csv(os.path.join(DATA_PATH, \"history.csv\"))","cdee0bf8":"# join history to employees by EmployeeID\n\nhistory_df = history_df.join(employees_df.set_index('EmployeeID'), on='EmployeeID')","5d87c491":"# create target\nhistory_df['target'] = 0\nhistory_df.target.loc[pd.notnull(history_df.DismissalDate)] = 1","f727e7b1":"# date columns to date time\nhistory_df.Date = pd.to_datetime(history_df.Date)\nemployees_df.HiringDate = pd.to_datetime(employees_df.HiringDate)\nemployees_df.DismissalDate = pd.to_datetime(employees_df.DismissalDate)","81fda211":"print('Shape: ', employees_df.shape)\nprint('Columns: ', employees_df.columns)\nemployees_df.head()","f9f408f0":"print('Number of unique employees: ', len(employees_df.EmployeeID.unique()))\nemployees_df.isna().sum()","82f88373":"print('Shape: ', history_df.shape)\nprint('Number of unique employees: ', len(history_df.EmployeeID.unique()))\nprint('Columns list: ', history_df.columns)\nhistory_df.head()","3c819235":"print('Shape: ', submission_df.shape)\nprint('Number of unique employees: ', len(submission_df.EmployeeID.unique()))\nsubmission_df.head()","e86a718a":"def value_counts_bar_chart(column_name):\n    sns.set(font_scale=1.4)\n    history_df[column_name].loc[history_df.target == 1].value_counts()[:20].plot(kind='bar', figsize=(15, 6), rot=0)\n    plt.xlabel(column_name, labelpad=14)\n    plt.ylabel(\"Count of Dismissal\", labelpad=14)\n    plt.title(\"Count of Dismissal by \"+column_name, y=1.02)","9edaa74e":"def value_counts_bar_chart_last_year(column_name):\n    last_year = history_df.Date.max() - pd.DateOffset(years=1)\n\n    sns.set(font_scale=1.4)\n    history_df[column_name].loc[(history_df.target == 1)&(history_df.Date>=last_year)].value_counts()[:20].plot(kind='bar', figsize=(15, 6), rot=0)\n    plt.xlabel(column_name, labelpad=14)\n    plt.ylabel(\"Count of Dismissal\", labelpad=14)\n    plt.title(\"Count of Dismissal by \"+column_name, y=1.02);","822de993":"value_counts_bar_chart('DevCenterID')","58feab7b":"value_counts_bar_chart_last_year('DevCenterID')","0b2baa13":"value_counts_bar_chart('SBUID')","16f529e4":"value_counts_bar_chart_last_year('SBUID')","bf42bcc6":"value_counts_bar_chart('PositionID')","792c4926":"value_counts_bar_chart_last_year('PositionID')","24726099":"value_counts_bar_chart('IsTrainee')","5fb2a645":"value_counts_bar_chart_last_year('IsTrainee')","a95d9a5b":"value_counts_bar_chart('LanguageLevelID')","14040771":"value_counts_bar_chart_last_year('LanguageLevelID')","474a4ace":"value_counts_bar_chart('CustomerID')","a30bfc93":"value_counts_bar_chart_last_year('CustomerID')","4a82ae9a":"value_counts_bar_chart('ProjectID')","8ba54af6":"value_counts_bar_chart_last_year('ProjectID')","c1eddf3b":"value_counts_bar_chart('IsInternalProject')","b164001d":"value_counts_bar_chart_last_year('IsInternalProject')","c7fb9041":"# value_counts_bar_chart('Utilization')","744dcf6b":"# value_counts_bar_chart_last_year('Utilization')","a8acbc52":"value_counts_bar_chart('HourVacation')","8e266d64":"value_counts_bar_chart_last_year('HourVacation')","c7bbe6d1":"value_counts_bar_chart('HourMobileReserve')","a7797cf9":"value_counts_bar_chart_last_year('HourMobileReserve')","a412007a":"value_counts_bar_chart('HourLockedReserve')","93ea24b4":"value_counts_bar_chart_last_year('HourLockedReserve')","78bb9b21":"# value_counts_bar_chart('OnSide')","72f13d3a":"# value_counts_bar_chart_last_year('OnSide')","100cc4aa":"value_counts_bar_chart('MonthOnPosition')","366caec4":"value_counts_bar_chart_last_year('MonthOnPosition')","6c9c1cbc":"value_counts_bar_chart('MonthOnSalary')","1c07fbc8":"value_counts_bar_chart_last_year('MonthOnSalary')","9a44866c":"value_counts_bar_chart('CompetenceGroupID')","42f086d8":"value_counts_bar_chart_last_year('CompetenceGroupID')","7df309eb":"value_counts_bar_chart('FunctionalOfficeID')","32dbe1a5":"value_counts_bar_chart_last_year('FunctionalOfficeID')","d4964da3":"value_counts_bar_chart('PaymentTypeId')","6a24f38a":"value_counts_bar_chart_last_year('PaymentTypeId')","7dba7c2d":"# value_counts_bar_chart('WageGross')","5c9ca7c1":"# value_counts_bar_chart_last_year('WageGross')","a2880e82":"value_counts_bar_chart('BonusOneTime')","0c165203":"value_counts_bar_chart_last_year('BonusOneTime')","610df8d5":"# value_counts_bar_chart('APM')","56d6fac8":"# value_counts_bar_chart_last_year('APM')","eaf67b12":"value_counts_bar_chart('PositionLevel')","7c3bb71e":"value_counts_bar_chart_last_year('PositionLevel')","105e9e10":"history_df.columns","46bc220e":"history_df.target.unique()","4c654f11":"# encode CustomerID\nlabelencoder= LabelEncoder()\nhistory_df['CustomerID'] = labelencoder.fit_transform(history_df['CustomerID'])","d63ef6bd":"# encode ProjectID\nhistory_df['ProjectID'] = history_df['ProjectID'].astype(str)\nlabelencoder= LabelEncoder()\nhistory_df['ProjectID'] = labelencoder.fit_transform(history_df['ProjectID'])","c2dec96c":"# create column with month number\nhistory_df['month'] = pd.DatetimeIndex(history_df['Date']).month","16e1048a":"# add work duration\n\nlast_date = history_df.Date.max()\nhistory_df.DismissalDate = history_df.DismissalDate.fillna(last_date)\nhistory_df.DismissalDate.isna().sum()\nhistory_df.DismissalDate = pd.to_datetime(history_df.DismissalDate)\nhistory_df.HiringDate = pd.to_datetime(history_df.HiringDate)\n\n\nhistory_df['workDuration'] = (history_df.DismissalDate - history_df.HiringDate) \/ np.timedelta64(1, 'M')","3404a145":"# Add mean and sum of bonuses\n\ncolumn_name = 'BonusOneTime'\nhistory_df['BonusMean'] = 0\nhistory_df['BonusSum'] = 0\n    \nfor index, row in tqdm(history_df.iterrows()):  \n    row_employee = row['EmployeeID']\n    row_date = row['Date']\n    \n    row_bonuses = history_df[['Date', column_name]].loc[(history_df.EmployeeID==row_employee)&(history_df.Date<=row_date)]\n    history_df.loc[index, 'BonusMean'] = row_bonuses[column_name].mean()\n    history_df.loc[index, 'BonusSum'] = row_bonuses[column_name].sum()","7953c1b2":"history_df[['BonusMean', 'BonusSum']].describe()","e31b06f4":"# add mean and max-min MonthOnSalary\n\ncolumn_name = 'MonthOnSalary'\nhistory_df['MonthOnSalaryMean'] = 0\nhistory_df['MonthOnSalaryDifference'] = 0\n    \nfor index, row in tqdm(history_df.iterrows()): \n    row_employee = row['EmployeeID']\n    row_date = row['Date']\n    \n    row_value = history_df[['Date', column_name]].loc[(history_df.EmployeeID==row_employee)&(history_df.Date<=row_date)]\n    history_df.loc[index, 'MonthOnSalaryMean'] = row_value[column_name].mean()\n    history_df.loc[index, 'MonthOnSalaryDifference'] = row_value[column_name].sum()","287f0a60":"history_df[['MonthOnSalaryMean', 'MonthOnSalaryDifference']].describe()","08a6f11d":"history_df.to_csv('prepareted_history.csv', index=False)","ed13cccb":"# history without last mount\n\n\ntrain_history_df = history_df.loc[history_df.Date != history_df.Date.max()]\ndev_history_df = history_df.loc[history_df.Date == history_df.Date.max()]","1a971361":"train_history_df.columns","542053a1":"drop_columns = [\n    'EmployeeID',\n    'Date',\n    'HiringDate',\n    'DismissalDate'\n]","619b4672":"train = train_history_df.drop(drop_columns, axis=1)","d16c9764":"X_train, X_test, y_train, y_test = train_test_split(\n    train.drop(['target'], axis=1), \n    train['target'], \n    test_size=0.3, \n    random_state=1\n)","a082cfb5":"def model_scoring(clf, X_test, y_test):\n    predicted= clf.predict(X_test)\n    print(classification_report(y_test, predicted))","27a1a934":"from sklearn.linear_model import LogisticRegression","9bfb5fcf":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nmodel_scoring(logreg, X_test, y_test)","348ddaa7":"coeff_df = pd.DataFrame(train.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False).round(5)","4a554642":"from sklearn.ensemble import RandomForestClassifier","21b9b50d":"model = RandomForestClassifier().fit(X_train, y_train)","80331dba":"# Actual class predictions\nrf_predictions = model.predict(X_test)\n# Probabilities for each class\nrf_probs = model.predict_proba(X_test)[:, 1]","3480645e":"# Extract feature importances\nfi = pd.DataFrame(\n    {'feature': list(X_train.columns),\n     'importance': model.feature_importances_}\n).sort_values('importance', ascending = False)\n\n# Display\nfi","b05cc2c9":"# Note: we can try one class classification: https:\/\/machinelearningmastery.com\/one-class-classification-algorithms\/","260918d6":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom lightgbm import LGBMClassifier","3ab3f312":"# clf = RandomForestClassifier().fit(X_train, y_train) # give 0.20435\nclf = GradientBoostingClassifier().fit(X_train, y_train) # give 0.21048","dbf7d529":"# clf = LGBMClassifier()\n# clf.fit(X_train, y_train)","5ebdc86b":"model_scoring(clf, X_test, y_test)","be3add73":"for employee in submission_df.EmployeeID.unique():\n    input_data = dev_history_df.loc[dev_history_df.EmployeeID == employee]\n    input_data = input_data.drop(drop_columns, axis=1)\n    input_data = input_data.drop(['target'], axis=1)\n    # predict = clf.predict(input_data)[0]\n    predict = clf.predict_proba(input_data)[0]\n    \n    if predict[1] >= 0.1 or predict[0] < 0.9:\n        predict = 1\n    else: \n        predict = 0\n    \n    submission_df.target.loc[submission_df.EmployeeID==employee] = predict","62be045f":"submission_df.target.value_counts()","456d9e70":"submission_df.to_csv('submission.csv', index=False)","c38af5e7":"history_df_0 = history_df.loc[history_df.target == 0] # those who resigned\nhistory_df_1 = history_df.loc[history_df.target == 1] # those who not resigned","dd7bed3c":"print('Max bonus: ', history_df.BonusOneTime.unique().max())\nprint('Min bonus: ', history_df.BonusOneTime.unique().min())\nprint('Mean bonus: ', history_df.BonusOneTime.unique().mean())","10a27f24":"print('Max bonus: ', history_df_0.BonusOneTime.unique().max())\nprint('Min bonus: ', history_df_0.BonusOneTime.unique().min())\nprint('Mean bonus: ', history_df_0.BonusOneTime.unique().mean())","a3ecd1f5":"print('Max bonus: ', history_df_1.BonusOneTime.unique().max())\nprint('Min bonus: ', history_df_1.BonusOneTime.unique().min())\nprint('Mean bonus: ', history_df_1.BonusOneTime.unique().mean())","9ed8f03b":"history_df.BonusOneTime.value_counts()[:10]\/history_df.shape[0]*100","e8b580ef":"history_df_0.BonusOneTime.value_counts()[:10]\/history_df_0.shape[0]*100","30f09309":"history_df_1.BonusOneTime.value_counts()[:10]\/history_df_1.shape[0]*100","c371cf74":"### MonthOnPosition \n\n- month without position changing as on the last month","57a35547":"# Evaluation","7e456a25":"### submission dataframe","57931436":"Our database has a lot of columns, and I don't have much time for in-depth analysis. Therefore, I need to prioritize features to research. I used logistic regression for this. (*See [Logistic Regression coef research](#Logistic-Regression-coef-research)*). I chose the largest and smallest coefficients of the trained model. There are:\n\n- **HourLockedReserve**\t= 0.01237\n- **SBUID**\t= 0.00768\n- **HourMobileReserve**\t= 0.00578\n\n- **MonthOnSalary**\t= -0.01054\n- **workDuration**\t= -0.02227\n- **BonusOneTime**\t= -0.03363 \n\nIt looks like, that first three item can affect negatively, and last three item have a positive effect. But Logistic Regression can not be source for conclusions, because it did not give high test results. Therefore, we need to visualize these indicators under different conditions.","c2b34b3e":"### BonusOneTime \n\n- One Time Bonus","dab9ac65":"# Data research","8f5c1c5c":"# Data preparation","180cb355":"Bonuses seem to reduce the risk of dismissal. See comparing in table:\n\n| fired employee|     |not fired employee  ||\n|----------|----------|----------|----------|\n| Bonus |% in category|Bonus  |% in category|\n| 0        | 87.86    | 0       | 82.83    |\n| 100      | 1.43     | 100     | 1.03     |\n| 200      | 1.07     | 200     | 0.71     |\n \n","45db54b4":"### APM \n\n- Employee APM","f5a86d37":"### IsTrainee \n\n- Trainee flag of Employee","fbd5c811":"# Split data","7b4cf245":"### BonusOneTime","cf2f7d1f":"### Utilization \n\n- percent of Employee load on Non-Internal Projects during last month","95aeb5d2":"### MonthOnSalary \n\n- month without salary increasing as on the last month","287a7090":"### Employees dataframe ","88cd62d9":"### HourMobileReserve \n\n- total hours in Mobile reserve as on the last month","306d9f62":"### PositionID \n\n- Identifier of Employee Position (like QC Engineer, Development Consultant, etc)","d348c545":"### history dataframe","ff742e09":"### SBUID \n\n- Employee Location in terms of Company Structure","3d2a3f96":"### Content\n\n1. [Import](#Import)\n2. [Constants](#Constants)\n3. [Read data](#Read-data)\n4. [Data research](#Data-research)\n5. [Visualization](#Visualization)\n6. [Data preparation](#Data-preparation)\n7. [Train preparation](#Train-preparation)\n8. [Split data](#Split-data)\n9. [Logistic Regression coef research](#Logistic-Regression-coef-research)\n10. [Training](#Training)\n11. [Evaluation](#Evaluation)\n12. [Submission](#Submission)\n13. [Analysis of the historical data and modelling results](#Analysis-of-the-historical-data-and-modelling-results)","83ae3d69":"### HourVacation \n\n- vacation hours are spent as on the last month","f193c6ea":"### LanguageLevelID\n\n- English Level Identifier (like Intermediate low, Upper-intermediate, etc)","79d8786b":"# Random forest coef research","d66bc93a":"### ProjectID \n\n- Employee Main Project Identifier","38fb9808":"### PositionLevel \n\n- Employee Seniority Level (Junior, Middle, Senior, etc)","e5d90ebd":"# Join tables\n","b3a18a57":"# Import","d5ca53f5":"# SoftServe DS Hackathon 2020\n\n![img](https:\/\/s.dou.ua\/CACHE\/images\/img\/announces\/Hackathon_2-01_1_HRdziq2\/3af11affb7e010c0d2440a7a4ed16181.png)","c44290c1":"# Constants","7de0a731":"### HourLockedReserve \n\n- total hours in Locked reserve as on the last month","8e80df68":"# Analysis of the historical data and modelling results","bf599151":"### IsInternalProject \n\n- Internal \/ External project flag","cbf10a7a":"# Submission","d588588e":"# Logistic Regression coef research","43037292":"### FunctionalOfficeID \n\n- Functional Office Identifier (like SDO, QMO, etc)","4e84cdac":"# Training","53925ae3":"### WageGross \n\n- Compensation GROSS","ead4bc3a":"### OnSide \n\n- was Employee involved to OnSite visit last month","8f4dace3":"# Tableau Visualization","43b824f3":"# Visualization","dd3ffa99":"# Read data","6af52a68":"### PaymentTypeId \n\n- Payment with respect to the country-specifics employment","c9e83649":"### CustomerID \n\n- Client Identifier (one client may be related to the several projects)","c504e318":"### Task\n\nSolution should be made with respect of the following business goals:\n\n1. Managers should have a notification about Employees even in case of insignificant risk of Dismissal\n2. Managers should get an information regarding Dismissal drivers - the interpretability of the prediction result is desirable\n3. Managers should get the recommendations regarding potential actions for Employees retention.","84658731":"### CompetenceGroupID \n\n- Employee Competency Group (like QC, Big Data, Data Science, etc)","edeb9604":"# Train preparation","0c373b03":"### DevCenterID\n- DevCenterID - Employee Location in terms of Company Geography"}}