{"cell_type":{"a27a0bda":"code","c00eabae":"code","a5f7175f":"code","461ba200":"code","ef99f4aa":"code","5317d67c":"code","52861786":"code","0e3f6351":"code","477a8c5d":"code","a80e9c46":"code","78ac197c":"code","f788679a":"code","a946ac57":"code","4737796c":"code","dbe3bf8a":"code","67032209":"code","4e5d4f88":"code","f497c837":"code","f2aa59b9":"markdown","ef13384f":"markdown","e2aa77e9":"markdown","9067484f":"markdown","a4c10eac":"markdown","aa2cfe0d":"markdown","201a5005":"markdown","03747d31":"markdown","0e994eaa":"markdown","9f25c7a4":"markdown","963d2335":"markdown","03ad039f":"markdown","1022f8bd":"markdown","0f9f6e2f":"markdown","da3cd570":"markdown","99b9cd24":"markdown","62140d28":"markdown","25eba84d":"markdown","19715940":"markdown","bbb43a03":"markdown","8376d566":"markdown","fd4c0094":"markdown","52db20df":"markdown","9fa454d9":"markdown","c3fa1c44":"markdown","b53000be":"markdown","8a8491d2":"markdown"},"source":{"a27a0bda":"import numpy as np\nimport pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\n#import warnings; warnings.simplefilter('ignore')\n%env JOBLIB_TEMP_FOLDER=\/tmp","c00eabae":"x_train = pd.read_csv('..\/input\/train.csv')\ny_train = x_train['label'].values\nx_train = x_train.drop('label', axis = 1).values\ntest    = pd.read_csv('..\/input\/test.csv').values\n","a5f7175f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train)\n","461ba200":"x_train_scaler = scaler.transform(x_train)\ntest_scaler = scaler.transform(test)\n","ef99f4aa":"#Using elbow-plot variance\/dimensions\nfrom sklearn.decomposition import PCA\npca = PCA()\npca.fit(x_train_scaler)\ncumsum = np.cumsum(pca.explained_variance_ratio_)*100\nd = [n for n in range(len(cumsum))]\nplt.figure(figsize=(10, 10))\nplt.plot(d,cumsum, color = 'red',label='cumulative explained variance')\nplt.title('Cumulative Explained Variance as a Function of the Number of Components')\nplt.ylabel('Cumulative Explained variance')\nplt.xlabel('Principal components')\nplt.axhline(y = 95, color='k', linestyle='--', label = '95% Explained Variance')\nplt.legend(loc='best')","5317d67c":"from sklearn.decomposition import PCA\npca = PCA(.95) \npca.fit(x_train_scaler)\n\nx_train_pca = pca.transform(x_train_scaler)\ntest_pca        = pca.transform(test_scaler)\n\n","52861786":"sample = x_train[23]\nsample.shape = (28,28)\n\n\na = plt.subplot(1,2,1)\na.set_title('Original Image')\nplt.imshow(sample, cmap = plt.cm.gray_r)\n\nsample = pca.inverse_transform(x_train_pca[23])\nsample.shape = (28,28)\n\nb = plt.subplot(1,2,2)\nb.set_title(\"Reduced after PCA\")\nplt.imshow(sample, cmap = plt.cm.gray_r)\n\n","0e3f6351":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\n# making skeletal model\nlogistic_regression = LogisticRegression(n_jobs = -1)\n\n# Set of parameters we want to try for out Model\nparameters = { 'C' : [1.1,1.25,1.5]}\n\n#Running the Model with above chosen parameter\ngrid_search = GridSearchCV(estimator = logistic_regression, param_grid = parameters , scoring = 'accuracy', cv = 3, n_jobs = -1 , verbose = 2)\ngrid_scores = grid_search.fit(x_train_pca , y_train)\n","477a8c5d":"print( grid_search.best_score_)\nprint(grid_search.best_params_)","a80e9c46":"# Making the Final Classification model.\nlogistic_regression = LogisticRegression( C = 1.25, n_jobs = -1)\ntick =datetime.datetime.now()\nlogistic_regression.fit(x_train_pca, y_train)\ntock=datetime.datetime.now()\nlr_train_time = tock - tick\nprint(\"Time taken for training a Logistic Regression model = \" + str(lr_train_time))\n","78ac197c":"tick=datetime.datetime.now()\nlr_train_predict=logistic_regression.predict(x_train_pca)\ntock=datetime.datetime.now()\nlr_pred_train_time = tock - tick\nprint('Time taken to predict the data points in the Test set is : ' + str(lr_pred_train_time))","f788679a":"#Making the confusion Matrix\n\nfrom sklearn.metrics import confusion_matrix\ncf= confusion_matrix(y_train, lr_train_predict)\n\n# Visualizing the Confusion Matrix`\n\nplt.matshow(cf , cmap = plt.cm.gray, )\nplt.show()\n\n","a946ac57":"# Analyzing the Errors\nrow_sums = cf.sum(axis=1 , keepdims = True)\nnormal_cf = cf\/row_sums\n\nnp.fill_diagonal(normal_cf,0)\nplt.matshow(normal_cf,cmap = plt.cm.gray)\n\nplt.title(\"error Analysis\")\nplt.show()\n\n","4737796c":"k = logistic_regression.score(x_train_pca, y_train)\nprint('the Accuracy on the Training set come out to be : ' + str(k))","dbe3bf8a":"import sklearn.metrics as skm\nprint(skm.classification_report( y_train , lr_train_predict ))","67032209":"predict = logistic_regression.predict(test_pca)\nprint(predict)","4e5d4f88":"\nsubmission = pd.DataFrame({'ImageId': range(1,len(predict)+1),\n                           'Label': predict})\nprint(submission)","f497c837":"submission.to_csv('out.csv', header=True, index = False)   # Generating output csv\nprint(submission)","f2aa59b9":"### Creating a submission CSV file","ef13384f":"## 2. Importing the dataset\nThis is done in the following way, Using the Pandas Library.\n#### Syntax: \n#### pd.read_csv('File_Name')\n\n### Also\n\n### We need to saperate the Independent and the dependent variables, i.e. x and y respectively.\nHere the matrix of 784 features are the independednt variable and the target labels corresponding to each image are the dependent variables.\n\n## 3. Making test and the training set\nThis is done so that the model trained must have some unseen data to test upon. Therefore 10,000 images are kept aside to test the performance of our model\u00a0upon.\n\nThe MNIST dataset is divided in to 4 parts:\n\n## x_train : \n        The dataset over which the model will be trained upon, it is a set of 60,000 greyscale images. Our Logistic Regression Algorithm will be trained over this data\n        \n## y_train :\n        This is the labelled dataset corresponding to the x_train, this contains the target labels corresponding to the Images of the dataset.\n        \n## x_test : \n        This is the dataset kept aside to test the Machine Learning model trained upon the Dataset x_train, so that out model will have unseen data to predict and test upon.\n        \n## y_test :\n        This is the labelled dataset corresponding to the x_train, this contains the target labels corresponding to the Images of the dataset.","e2aa77e9":"##  1. Importing the necessary Libraries\n\n### numpy\n        NumPy is the fundamental package for scientific computing with Python. It contains among other things: a powerful N-dimensional array object; sophisticated (broadcasting) functions\n\n### pandas\n        In computer programming, pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.\n        \n### datetime\n        In Python, date, time and datetime classes provides a number of function to deal with dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them, you are actually manipulating objects and not string or timestamps.\n        \n### matplotlib\n        Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy.","9067484f":"# Objective:\nTo demonstrate Logistic Regression on Mnist dataset with the help of PCA and GridSearchCV","a4c10eac":"## 8. Predicting values on training set","aa2cfe0d":"### Looking at the error analysis:\n\n#### most prominent errors are:\n\n$4,9$ and $9,4$\n\n$9,7$ and $7,9$\n\n$8,5$ but not $5,8$\n\n$5,3$ and $3,5$\n\n\n\n##### That is these values were often misunderstood ,\n##### but it should also be noted that the most of the errors are not symmetrical.","201a5005":"Here the the min Variance is set to 95%, therefore the the minimum dimentions are chosen keeping the stated Variance.","03747d31":"## 6. Comparing the images before and after applying the PCA","0e994eaa":"### True Positives (TP) - \nThese are the correctly predicted positive values which means that the value of actual class is yes and the value of predicted class is also yes. E.g. if actual class value indicates that this passenger survived and predicted class tells you the same thing.\n\n### True Negatives (TN) - \nThese are the correctly predicted negative values which means that the value of actual class is no and value of predicted class is also no. E.g. if actual class says this passenger did not survive and predicted class tells you the same thing.\n\nFalse positives and false negatives, these values occur when your actual class contradicts with the predicted class.\n\n### False Positives (FP) \u2013\nWhen actual class is no and predicted class is yes. E.g. if actual class says this passenger did not survive but predicted class tells you that this passenger will survive.\n\n### False Negatives (FN) \u2013\nWhen actual class is yes but predicted class in no. E.g. if actual class value indicates that this passenger survived and predicted class tells you that passenger will die.\n\nOnce you understand these four parameters then we can calculate Accuracy, Precision, Recall and F1 score.\n\n### F1 Score\nIn statistical analysis of binary classification, the F1 score (also F-score or F-measure) is a measure of a test's accuracy. It considers both the precision p and the recall r of the test to compute the score: p is the number of correct positive results divided by the number of all positive results returned by the classifier, and r is the number of correct positive results divided by the number of all relevant samples (all samples that should have been identified as positive). The F1 score is the harmonic average of the precision and recall, where an F1 score reaches its best value at 1 (perfect precision and recall) and worst at 0.\n\n ### $$F1 =\\frac{2}{\\frac{1}{Precision} + \\frac{1} {Recall} }$$","9f25c7a4":"## The F1 Score comes out to be 0.92, which is reasonably good.","963d2335":"### Here the warning issued is about the change of values from Interger to Float, which is OKAY for us.","03ad039f":"## Fitting the Scaler to the x_train\nso that the scaler can reshape itself to the X_train Dimensions\n","1022f8bd":"## 5. Dimentionality Reduction\nHaving too many features in the training set can make the training process extremely slow and makes it unlikely to get a good solution.\nIn statistics, machine learning, and information theory, dimensionality reduction or dimension reduction is the process of reducing the number of random variables under consideration by obtaining a set of principal variables. It can be divided into feature selection and feature extraction.\n\n## Principal component analysis (PCA)\nThe main linear technique for dimensionality reduction, principal component analysis, performs a linear mapping of the data to a lower-dimensional space in such a way that the variance of the data in the low-dimensional representation is maximized.","0f9f6e2f":"## 10. Error Analysis (Training Set)","da3cd570":"## 4. Feature Scaling:\nFeature scaling is a method used to standardize the range of independent variables or features of data. In data processing, it is also known as data normalization and is generally performed during the data preprocessing step.\n\n### Standardization\nIn machine learning, we can handle various types of data, e.g. audio signals and pixel values for image data, and this data can include multiple dimensions. Feature standardization makes the values of each feature in the data have zero-mean (when subtracting the mean in the numerator) and unit-variance. This method is widely used for normalization in many machine learning algorithms (e.g., support vector machines, logistic regression, and neural networks. The general method of calculation is to determine the distribution mean and standard deviation for each feature. Next we subtract the mean from each feature. Then we divide the values (mean is already subtracted) of each feature by its standard deviation.\n\n## Standard Scaler\n\n##  $$x'= \\frac{x - mean(x)}{\\sigma}$$\n","99b9cd24":"## 11. Accuracy on Training Set","62140d28":"#### As the best Hyper parameter turns out to be C = 0.1\n#### The final model should be made with the above mentioned Hyper-parameters\n         ","25eba84d":"## Now *implementing* the scalar over the x_train and x_test and transforming them to x_train_scaler and x_test_scaler","19715940":"### GridSearch Cross Validation\nIn machine learning, two tasks are commonly done at the same time in data pipelines: cross validation and (hyper)parameter tuning. Cross validation is the process of training learners using one set of data and testing it using a different set. Parameter tuning is the process to selecting the values for a model\u2019s parameters that maximize the accuracy of the model.","bbb43a03":"## 7. Logistic Regression:\nlogistic regression is a regression model where the dependent variable (DV) is categorical, where the output can take only two values, \"0\" and \"1\", which represent outcomes such as pass\/fail, win\/lose, alive\/dead or healthy\/sick. Cases where the dependent variable has more than two outcome categories may be analysed in multinomial logistic regression.\n\n###### MNIST dataset in a Multivariate Classification problem with 10 classes ( 0, 1, 2, ... , 9)\n\n## Applying the Logistic Regression model:","8376d566":"### Ploting the relation between the Variance and the Dimensions","fd4c0094":"##### Accuracy on the training set came out to be $92.51$% which is vey good indeed.","52db20df":"### Applying PCA and Transforming x_train_scaler and x_test_scaler to x_train_pca and x_test_pca respectively","9fa454d9":"### Here the rows represent the ACTUAL CLASS and the columns represent PREDICTED CLASS.\nthe whiteness across the diagonal shows the high values that Most of the class were predicted correctly.","c3fa1c44":"## 9. Confusion Matrix (Training Set)\nIn the field of machine learning and specifically the problem of statistical classification, a confusion matrix, also known as an error matrix,is a specific table layout that allows visualization of the performance of an algorithm, typically a supervised learning one (in unsupervised learning it is usually called a matching matrix). Each row of the matrix represents the instances in a predicted class while each column represents the instances in an actual class (or vice versa).The name stems from the fact that it makes it easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another).\n\nIt is a special kind of contingency table, with two dimensions (\"actual\" and \"predicted\"), and identical sets of \"classes\" in both dimensions (each combination of dimension and class is a variable in the contingency table).","b53000be":"# Running model on the test set.","8a8491d2":"## 12. Lets have a look at the classification report of prediction on training set"}}