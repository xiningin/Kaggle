{"cell_type":{"62e15169":"code","de4a8b41":"code","5dee8756":"code","973e9fde":"code","ff27d72a":"code","86f3bfb7":"code","f524d879":"code","d104253f":"code","c7986038":"code","fdefbce6":"markdown","ca0792b7":"markdown"},"source":{"62e15169":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport random\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras import backend as K\n\nimport matplotlib.pyplot as plt\nimport time\nfrom sklearn.model_selection import train_test_split","de4a8b41":"# Load Dataset\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\ny_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) \nprint(X_train.shape) # shape of data","5dee8756":"# Show image of training data\nplt.figure(figsize = (10, 10)) # set size of figure 10x10\nrand_indexes = np.random.randint(0, X_train.shape[0], 16) # select digit randomly\nfor index,im_index in enumerate(rand_indexes):\n    plt.subplot(4, 4, index+1)\n    plt.imshow(X_train.values[im_index].reshape(28,28), cmap = 'gray', interpolation = 'none')\n    plt.title('Class %d' % y_train[im_index])\nplt.tight_layout()","973e9fde":"# Prepare Dataset \nX_train = X_train.astype('float32') \/ 255\ntest = test.astype('float32')\/255\n\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\ny_train = keras.utils.to_categorical(y_train)\nnum_classes = y_train.shape[1]\n\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.2, random_state = int(time.time()))","ff27d72a":"# Build Model\nmodel = Sequential([\n# 1st Conv layer    \n        Conv2D(32, kernel_size = (3, 3), padding = 'same', activation = 'relu', input_shape = (28,28,1)),\n        MaxPool2D(pool_size = (2, 2)),\n        Dropout(0.25),\n        Conv2D(32, kernel_size = (3, 3), padding = 'same', activation = 'relu', input_shape = (28,28,1)),\n        MaxPool2D(pool_size = (2, 2)),\n        Dropout(0.25),\n# 2nd Conv layer        \n        Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same'),\n        MaxPool2D(pool_size = (2, 2)),\n        Dropout(0.25),\n# Fully Connected layer        \n        Flatten(),        \n        Dense(128, activation = 'relu'),\n        Dropout(0.5),\n        Dense(num_classes, activation = 'softmax')\n    ])\n\nmodel.summary()","86f3bfb7":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'Adam' , metrics = ['accuracy'])","f524d879":"# Train Model\nmodel.fit(X_train, y_train, batch_size = 512, epochs = 25, validation_data = (X_test, y_test), verbose = 1);","d104253f":"# Evaluate Model\nresult = model.evaluate(X_test, y_test, verbose = 0)\nprint('Accuracy: ', result[1])","c7986038":"# Exercises:\n# 1. change Conv kernel_size from 5x5 to 3x3 (smaller filter)\n# 2. add 3rd Conv layer (128)\n# 3. double Conv in Conv layer  (add another Conv2D after Conv2D)\n# 4. double FC layers (add Dense(64))\n# 5. smaller batch_size\n# 6. train more epochs","fdefbce6":"# MNIST CNN \n\na handwritten single digit recognizer","ca0792b7":"## CNN architecture\n![image.png](attachment:image.png)"}}