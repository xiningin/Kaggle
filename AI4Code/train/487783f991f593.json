{"cell_type":{"3406d98e":"code","4ade5658":"code","eb1a36dc":"code","296400ee":"code","e572b803":"code","09a741ac":"code","e4bd30c4":"code","a9e6021e":"code","496f0a52":"code","8b6849bf":"code","1994dcd8":"code","df771c6c":"code","d7f3eab0":"code","bf2e6311":"code","dea2e5e4":"markdown","62f1f9ce":"markdown","91b3b30e":"markdown","08e94622":"markdown","3e47166d":"markdown","bd659c4c":"markdown","08401ea6":"markdown","6f7e5ac8":"markdown","f4ebbdb8":"markdown","fad01ed6":"markdown","a114334a":"markdown","4f0eff97":"markdown"},"source":{"3406d98e":"import pandas as pd\n\nr_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']\nratings = pd.read_csv('..\/input\/ml-100k\/u.data', sep='\\t', names=r_cols)\n\nprint('matrix size:', ratings.shape)\nratings.head(10)","4ade5658":"import numpy as np\nnum_users = ratings.user_id.unique().shape[0]\nnum_movies = ratings.movie_id.unique().shape[0]\n\n# movie_id --> index, user_id --> column\nrating_matrix = pd.DataFrame(np.nan, index=range(1,num_movies+1), columns=range(1,num_users+1))\n\n# assign ratings to appropriate elements of the matrix\nfor i in range(ratings.shape[0]):\n    rating_matrix.iloc[ratings.movie_id[i]-1, ratings.user_id[i]-1] = ratings.rating[i]\n\n# plot rating_matrix\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, ax = plt.subplots(1,1,figsize=(10,6))\nax = sns.heatmap(rating_matrix, 0,5, cmap='rainbow')\n\nax.set_title('rating_matrix', fontsize=18)\n\nax.set_xlabel('user_id', fontsize=14)\nax.set_xticklabels(ax.get_xticklabels()[::100])\nax.set_xticks(ax.get_xticks()[::100])\n\nax.set_ylabel('movie_id', fontsize=14)\nax.set_yticklabels(ax.get_yticklabels()[::200])\nax.set_yticks(ax.get_yticks()[::200])\n\nplt.show()","eb1a36dc":"print('User ID: %d rated %d movies, the higest number of movies rated by one user.' %\n      (rating_matrix.notnull().sum(axis=0).idxmax(), rating_matrix.notnull().sum(axis=0).max()))","296400ee":"#rand_user_size = 30\n#rand_movie_size = 100\n#rand_user_id = np.random.choice(50, rand_user_size)\n#rand_movie_id = np.random.choice(150, rand_movie_size)\n\n#rand_rating_matrix = pd.DataFrame(rating_matrix,rand_movie_id,rand_user_id)\n\n#fig, ax = plt.subplots(1,1,figsize=(10,6))\n#ax = sns.heatmap(rand_rating_matrix, 0,5, cmap='rainbow')\n\n#ax.set_title('Randomly generated rating_matrix', fontsize=18)\n#ax.set_xlabel('random user_id', fontsize=14)\n#ax.set_ylabel('random movie_id', fontsize=14)\n#ax.set_xticklabels([])\n#ax.set_yticklabels([])\n\n#plt.show()","e572b803":"rand_user_size = 50\nrand_movie_size = 150\nrand_user_id = np.random.choice(50, rand_user_size)\nrand_movie_id = np.random.choice(150, rand_movie_size)\n\nrand_rating_matrix = pd.DataFrame(rating_matrix,rand_movie_id,rand_user_id)\n\nfig, ax = plt.subplots(1,1,figsize=(10,6))\nax = sns.heatmap(rand_rating_matrix, 0,5, cmap='rainbow')\n\nax.set_title('Randomly generated rating_matrix', fontsize=18)\nax.set_xlabel('random user_id', fontsize=14)\nax.set_ylabel('random movie_id', fontsize=14)\nax.set_xticklabels([])\nax.set_yticklabels([])\n\nplt.show()","09a741ac":"model_ratings = np.copy(rand_rating_matrix.values)\n\nmodel_mean = np.nanmean(model_ratings, axis=1)\n\nmodel_norm = model_ratings - model_mean.reshape(rand_movie_size,1)","e4bd30c4":"# build an initialized prediction matrix\n# set a number of features to learn\nn_features = 5\n\n# initialize parameters theta (user_prefs), X (movie_features)\n# movie_features\nX_init = np.random.randn(rand_movie_size, n_features)\n# user_prefs\ntheta_init = np.random.randn(rand_user_size, n_features)\n\n# create 1D array containing 'X' and 'theta'\ninitial_X_and_theta = np.r_[X_init.flatten(), theta_init.flatten()]\n\n# compute prediction matrix\ninit_ratings = X_init@theta_init.T\n\n# compare initialized predictions with normalized ratings\nfig, ax = plt.subplots(1,2,figsize=(14,6),sharey=True)\ncbar_ax = fig.add_axes([0.92, 0.2, .02, 0.6])\n\nfor ax, data, title in zip(ax, [init_ratings,model_norm],\n                           ['Predicted rating_matrix (initialized)','Actual rating matrix (normalized)']):\n\n    sns.heatmap(data, -3.1, 3.1, cbar=True, cbar_ax=cbar_ax, ax=ax)\n    ax.set_title(title, fontsize=18)\n    ax.set_xlabel('user_id', fontsize=14)\n    ax.set_ylabel('movie_id', fontsize=14)\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n\nplt.show()","a9e6021e":"# a method to separate 'X' and 'theta'\ndef X_and_theta_sep(X_and_theta, n_movies, n_users, n_features):\n\n    # extract 'X' from the first (n_movies*n_features) elements of 'X_and_theta'\n    X = X_and_theta[:n_movies*n_features].reshape(n_movies, n_features)\n    # extract 'theta' from the rest\n    theta = X_and_theta[n_movies*n_features:].reshape(n_users, n_features)\n\n    return X, theta","496f0a52":"# a method to calculate cost function\ndef cost_cal(X_and_theta, ratings, n_movies, n_users, n_features, reg_param):\n\n    # get 'X' and 'theta'\n    X, theta = X_and_theta_sep(X_and_theta, n_movies, n_users, n_features)\n\n    # calculate the cost function due to accuracy and regularization\n    cost = np.nansum((X@theta.T - ratings)**2)\/2\n    regCost = (reg_param\/2)*(np.sum(theta**2) + np.sum(X**2))\n\n    return cost + regCost","8b6849bf":"# set a regularization parameter\nreg_param = 1\n\n# initial cost value\nprint('Initial cost value:', cost_cal(initial_X_and_theta, model_norm, rand_movie_size, rand_user_size, n_features, reg_param))","1994dcd8":"# a method to calculate gradients\ndef gradient_cal(X_and_theta, ratings, n_movies, n_users, n_features, reg_param):\n\n    # get 'X' and 'theta'\n    X, theta = X_and_theta_sep(X_and_theta, n_movies, n_users, n_features)\n\n    # predicted rating\n    pred = X@theta.T\n    # calculate the difference between predicted and actual rating, replace NaN with 0\n    diff = np.nan_to_num(pred-ratings)\n\n    # set learning rate\n    learning_rate = 1\n    \n    # calculate gradients\n    X_grad = learning_rate*(diff@theta + reg_param*X)\n    theta_grad = learning_rate*(diff.T@X + reg_param*theta)\n\n    return np.r_[X_grad.flatten(), theta_grad.flatten()]","df771c6c":"from scipy.optimize import minimize\n\n# set a regularization parameter\nreg_param = 1\n\n# minimizing the cost function\nmin_res = minimize(cost_cal, initial_X_and_theta, args=(model_norm, rand_movie_size, rand_user_size, n_features, reg_param),\n         method=None, jac=gradient_cal, options={'maxiter':3000, 'disp':True})","d7f3eab0":"# initial cost value\nprint('Initial cost value:', cost_cal(initial_X_and_theta, model_norm, rand_movie_size, rand_user_size, n_features, reg_param))\n\n# final gradient array\nprint('Optimized cost value:', min_res.fun)\n\n# initial gradient array\nn_display = 5\nprint('Examples of initial gradient values (first %d elements): ' % n_display)\nprint(gradient_cal(initial_X_and_theta, model_norm, rand_movie_size, rand_user_size, n_features, reg_param)[:n_display])\n\n# final gradient array\nprint('Examples of optimized gradient values (first %d elements): ' % n_display)\nprint(min_res.jac[:n_display])","bf2e6311":"# get predicted 'X' and 'theta'\nX, theta = X_and_theta_sep(min_res.x, rand_movie_size, rand_user_size, n_features)\n\n# make rating predictions    \npredicted_ratings = X@theta.T\n\n# compare optimized predictions with normalized ratings\nfig, ax = plt.subplots(1,2,figsize=(14,6),sharey=True)\ncbar_ax = fig.add_axes([0.92, 0.2, .02, 0.6])\n\nfor ax, data, title in zip(ax, [predicted_ratings,model_norm],\n                           ['Predicted rating_matrix (optimized)','Actual rating matrix (normalized)']):\n\n    sns.heatmap(data, -3.1, 3.1, cbar=True, cbar_ax=cbar_ax, ax=ax)\n    ax.set_title(title, fontsize=18)\n    ax.set_xlabel('random user_id', fontsize=14)\n    ax.set_ylabel('random movie_id', fontsize=14)\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n\nplt.show()","dea2e5e4":"**Predictions and cost function (\u0e04\u0e48\u0e32\u0e04\u0e32\u0e14\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e41\u0e25\u0e30\u0e23\u0e32\u0e04\u0e32\u0e04\u0e27\u0e32\u0e21\u0e04\u0e25\u0e32\u0e14\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19)**","62f1f9ce":"**Optimized predictions (\u0e04\u0e48\u0e32\u0e04\u0e32\u0e14\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e19)**","91b3b30e":"**\u0e04\u0e33\u0e19\u0e27\u0e19\u0e04\u0e48\u0e32 Cost function**","08e94622":"**\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e19 gradients \u0e02\u0e2d\u0e07 cost function **","3e47166d":"\u0e01\u0e25\u0e38\u0e48\u0e21\u0e0a\u0e38\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07","bd659c4c":"**\u0e08\u0e31\u0e14\u0e40\u0e23\u0e35\u0e22\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e25\u0e07 matrix**","08401ea6":"**\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07\u0e42\u0e04\u0e49\u0e14 \u0e43\u0e0a\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e15\u0e32\u0e21\u0e2a\u0e40\u0e01\u0e25\u0e08\u0e23\u0e34\u0e07**\n\u0e08\u0e32\u0e01\u0e42\u0e04\u0e49\u0e14 rand_user_size = 30,\nrand_movie_size = 100","6f7e5ac8":"\u0e41\u0e1c\u0e19\u0e1c\u0e31\u0e07\u0e02\u0e2d\u0e07 Optimized rating_matrix (P) \u0e41\u0e25\u0e30 Actual rating_matrix (R)","f4ebbdb8":"**Optimization of predictions (\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e02\u0e2d\u0e07\u0e04\u0e48\u0e32\u0e04\u0e32\u0e14\u0e01\u0e32\u0e23\u0e13\u0e4c)**","fad01ed6":"**\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19\u0e20\u0e32\u0e1e\u0e22\u0e19\u0e15\u0e23\u0e4c\u0e2b\u0e25\u0e32\u0e22\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 \u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19\u0e44\u0e1b\u0e08\u0e33\u0e19\u0e27\u0e19\u0e01\u0e35\u0e48\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07**","a114334a":"**\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e48\u0e32 cost function \u0e43\u0e0a\u0e49\u0e40\u0e27\u0e25\u0e32\u0e40\u0e17\u0e48\u0e32\u0e44\u0e23 \u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e01\u0e35\u0e48\u0e23\u0e2d\u0e1a**","4f0eff97":"**\u0e2a\u0e38\u0e48\u0e21\u0e01\u0e25\u0e38\u0e48\u0e21\u0e20\u0e32\u0e1e\u0e22\u0e19\u0e15\u0e23\u0e4c\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e43\u0e2b\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19 \u0e21\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e1c\u0e19\u0e1c\u0e31\u0e07\u0e04\u0e30\u0e41\u0e19\u0e19 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e35\u0e08\u0e33\u0e19\u0e27\u0e19\u0e21\u0e32\u0e01**"}}