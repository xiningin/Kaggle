{"cell_type":{"634037c3":"code","51a04038":"code","7d5bb9e5":"code","de758972":"code","46ebcb6d":"code","28d5bcea":"code","13fedc97":"code","0bcacf6a":"code","0fcef3cf":"code","14f50110":"code","69bad86d":"code","8269841d":"code","a920fbfb":"code","20a121df":"code","f7b840b3":"code","2bafde02":"code","0b5a4fb4":"code","4a2e1fe6":"code","53841df0":"code","c7c51c35":"code","8642eaf7":"code","9b42d407":"code","0435da49":"code","ef2c926f":"code","822481ee":"code","6d0a749b":"code","ceac5e1f":"code","ad39cfad":"code","19780ed7":"code","cdcbaf19":"markdown","3aff28d3":"markdown","d97090e6":"markdown","79f6b052":"markdown","92828a09":"markdown","819aee5c":"markdown","80622a74":"markdown","e4790924":"markdown","10b13a29":"markdown","3d890d5b":"markdown","d6df3eee":"markdown","22ca9cd5":"markdown","63d3f323":"markdown","57e489bf":"markdown","056cf4e2":"markdown"},"source":{"634037c3":"# main libraries\nimport pandas as pd\nimport numpy as np\nimport time\n\n# visual libraries\nfrom matplotlib import pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D \nplt.style.use('ggplot')\n\n# sklearn libraries\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import normalize\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score,matthews_corrcoef,classification_report,roc_curve\nfrom sklearn.externals import joblib\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n","51a04038":"# Read the data in the CSV file using pandas\ndf = pd.read_csv('..\/input\/creditcard.csv')\ndf.head()","7d5bb9e5":"df.shape","de758972":"df.isnull().sum()","46ebcb6d":"All = df.shape[0]\nfraud = df[df['Class'] == 1]\nnonFraud = df[df['Class'] == 0]\n\nx = len(fraud)\/All\ny = len(nonFraud)\/All\n\nprint('frauds :',x*100,'%')\nprint('non frauds :',y*100,'%')","28d5bcea":"# Let's plot the Transaction class against the Frequency\nlabels = ['non frauds','fraud']\nclasses = pd.value_counts(df['Class'], sort = True)\nclasses.plot(kind = 'bar', rot=0)\nplt.title(\"Transaction class distribution\")\nplt.xticks(range(2), labels)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")","13fedc97":"# distribution of Amount\namount = [df['Amount'].values]\nsns.distplot(amount)","0bcacf6a":"# distribution of Time\ntime = df['Time'].values\nsns.distplot(time)","0fcef3cf":"# distribution of anomalous features\nanomalous_features = df.iloc[:,1:29].columns\n\nplt.figure(figsize=(12,28*4))\ngs = gridspec.GridSpec(28, 1)\nfor i, cn in enumerate(df[anomalous_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(df[cn][df.Class == 1], bins=50)\n    sns.distplot(df[cn][df.Class == 0], bins=50)\n    ax.set_xlabel('')\n    ax.set_title('histogram of feature: ' + str(cn))\nplt.show()","14f50110":"# heat map of correlation of features\ncorrelation_matrix = df.corr()\nfig = plt.figure(figsize=(12,9))\nsns.heatmap(correlation_matrix,vmax=0.8,square = True)\nplt.show()","69bad86d":"# Standardizing the features\ndf['Vamount'] = StandardScaler().fit_transform(df['Amount'].values.reshape(-1,1))\ndf['Vtime'] = StandardScaler().fit_transform(df['Time'].values.reshape(-1,1))\n\ndf = df.drop(['Time','Amount'], axis = 1)\ndf.head()","8269841d":"X = df.drop(['Class'], axis = 1)\ny = df['Class']\n\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X.values)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2'])","a920fbfb":"finalDf = pd.concat([principalDf, y], axis = 1)\nfinalDf.head()","20a121df":"# 2D visualization\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = [0, 1]\ncolors = ['r', 'g']\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf['Class'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']\n               , finalDf.loc[indicesToKeep, 'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","f7b840b3":"# Lets shuffle the data before creating the subsamples\ndf = df.sample(frac=1)\n\nfrauds = df[df['Class'] == 1]\nnon_frauds = df[df['Class'] == 0][:492]\n\nnew_df = pd.concat([non_frauds, frauds])\n# Shuffle dataframe rows\nnew_df = new_df.sample(frac=1, random_state=42)\n\nnew_df.head()","2bafde02":"# Let's plot the Transaction class against the Frequency\nlabels = ['non frauds','fraud']\nclasses = pd.value_counts(new_df['Class'], sort = True)\nclasses.plot(kind = 'bar', rot=0)\nplt.title(\"Transaction class distribution\")\nplt.xticks(range(2), labels)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")\n","0b5a4fb4":"# prepare the data\nfeatures = new_df.drop(['Class'], axis = 1)\nlabels = pd.DataFrame(new_df['Class'])\n\nfeature_array = features.values\nlabel_array = labels.values","4a2e1fe6":"# splitting the faeture array and label array keeping 80% for the trainnig sets\nX_train,X_test,y_train,y_test = train_test_split(feature_array,label_array,test_size=0.20)\n\n# normalize: Scale input vectors individually to unit norm (vector length).\nX_train = normalize(X_train)\nX_test=normalize(X_test)","53841df0":"neighbours = np.arange(1,25)\ntrain_accuracy =np.empty(len(neighbours))\ntest_accuracy = np.empty(len(neighbours))\n\nfor i,k in enumerate(neighbours):\n    #Setup a knn classifier with k neighbors\n    knn=KNeighborsClassifier(n_neighbors=k,algorithm=\"kd_tree\",n_jobs=-1)\n    \n    #Fit the model\n    knn.fit(X_train,y_train.ravel())\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train.ravel())\n    \n    #Compute accuracy on the test set\n    test_accuracy[i] = knn.score(X_test, y_test.ravel()) ","c7c51c35":"#Generate plot\nplt.title('k-NN Varying number of neighbors')\nplt.plot(neighbours, test_accuracy, label='Testing Accuracy')\nplt.plot(neighbours, train_accuracy, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","8642eaf7":"idx = np.where(test_accuracy == max(test_accuracy))\nx = neighbours[idx]","9b42d407":"#k_nearest_neighbours_classification\nknn=KNeighborsClassifier(n_neighbors=x[0],algorithm=\"kd_tree\",n_jobs=-1)\nknn.fit(X_train,y_train.ravel())","0435da49":"# save the model to disk\nfilename = 'finalized_model.sav'\njoblib.dump(knn, filename)","ef2c926f":"# load the model from disk\nknn = joblib.load(filename)","822481ee":"# predicting labels for testing set\nknn_predicted_test_labels=knn.predict(X_test)","6d0a749b":"from pylab import rcParams\n#plt.figure(figsize=(12, 12))\nrcParams['figure.figsize'] = 14, 8\nplt.subplot(222)\nplt.scatter(X_test[:, 0], X_test[:, 1], c=knn_predicted_test_labels)\nplt.title(\" Number of Blobs\")","ceac5e1f":"#scoring knn\nknn_accuracy_score  = accuracy_score(y_test,knn_predicted_test_labels)\nknn_precison_score  = precision_score(y_test,knn_predicted_test_labels)\nknn_recall_score    = recall_score(y_test,knn_predicted_test_labels)\nknn_f1_score        = f1_score(y_test,knn_predicted_test_labels)\nknn_MCC             = matthews_corrcoef(y_test,knn_predicted_test_labels)","ad39cfad":"#printing\nprint(\"\")\nprint(\"K-Nearest Neighbours\")\nprint(\"Scores\")\nprint(\"Accuracy -->\",knn_accuracy_score)\nprint(\"Precison -->\",knn_precison_score)\nprint(\"Recall -->\",knn_recall_score)\nprint(\"F1 -->\",knn_f1_score)\nprint(\"MCC -->\",knn_MCC)\nprint(classification_report(y_test,knn_predicted_test_labels))","19780ed7":"import seaborn as sns\nLABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(y_test, knn_predicted_test_labels)\nplt.figure(figsize=(12, 12))\nsns.heatmap(conf_matrix, xticklabels=LABELS, yticklabels=LABELS, annot=True, fmt=\"d\");\nplt.title(\"Confusion matrix\")\nplt.ylabel('True class')\nplt.xlabel('Predicted class')\nplt.show()","cdcbaf19":"# 3. Checking for missing values\nIn this data set, there are no missing values. So we don't need to handle missing values in the dataset.","3aff28d3":"For the model building I am using K Nearest Neighbors. So we need find an optimal K to get the best out of it. ","d97090e6":"# 2. Read data\nYou can find more details on dataset here: ","79f6b052":"## Let's look at the data. \nSo the dataset is labeled as 0s and 1s. 0 = non fraud and 1 = fraud. \n","92828a09":"# 5. Standardize the data\nThe dataset is  contains only numerical input variables which are the result of a PCA transformation. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. So PCA is effected by scale so we need to scale the features in the data before applying PCA. For the scaling I am using Scikit-learn's StandardScaler(). In order to fit to the scaler the data should be reshaped within -1 nad 1. ","819aee5c":"# 7. Data splitting","80622a74":"# Steps in Data Preprocessing\nHere iare the steps I have followed;\n1. Import libraries\n2. Read data\n3. Checking for missing values\n4. Checking for categorical data\n5. Standardize the data\n6. PCA transformation\n7. Data splitting","e4790924":"In this analysis I will not be dropping any features looking at the distribution of features, because I am still in the learning process of working with data preprocessing in numarous ways.So I would like to experiment  step by step on data.\n\nInstead all the features will be tranformed to scaled variables.","10b13a29":"# 1. Import libraries\nAs the main libraries, I am using Pandas, Numpy and time; \n* Pandas : Use for data manipulation and data analysis. \n* Numpy : fundamental package for scientific computing with Python. \n\nAs for the visualization I am using Matplotlib and Seaborn.\n\nFor the data preprocessing techniques and algorithms I used Scikit-learn libraries.","3d890d5b":"Since the data is highly imbalanced, I am only taking 492 rows from the non_fraud transactions.","d6df3eee":"In this analysis I will be using K Nearest Neighbors to build the model and as the dataset: Credit Card Fraud Detection dataset provided by Kaggle. For this analysis I focused more on data preprocessing because it helps to gain a better accuracy rather than just sending raw data and telling to build a model. \n\n# Data Preprocessing\nWhat is data preprocessing?  It is a data mining technique that transforms raw data into understandable format. Raw data(real world data) is always incomplete and that data cannot be send through a model. Yhay would cause certain errors. That is why we need to preprocess data before sending through a model.\n\nI have used severel preprocessing techniques in this analysis.\nWithout further a do let's get started!!!","22ca9cd5":"## Conclusion\nI tried without standardizing the data to get a better accuracy. But after I learnt this method and applied it, it gave a promising result. I am still doing experiments and still learning about data preprocessing techniques. I only used KNN algorithm for this dataset.  \nFeel free to comment and give an Upvote if you find this kernel helpful.\n","63d3f323":"# 4. Checking for categorical data\nthe only categorical cariable we have in this data set is the target variable.  Other features are already in numerical format, so no need of converting to categorical data.\n\n## Let's plot the distribution of features \nI used seaborn distplot() to visualize the distribution of features in the dataset.\nWe have 30 features and target variable  in the dataset. ","57e489bf":"Now all the features are standardize into unit sclae (mean = 0 and variance = 1)","056cf4e2":"# 6. PCA transformation\nPCA (Principal Component Analysis) mainly using to reduce the size of the feature space while retaining as much of the information as possible.  In here all the features transformed into 2 features using PCA."}}