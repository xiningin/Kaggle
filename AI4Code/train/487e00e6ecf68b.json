{"cell_type":{"4ca35f52":"code","b61c8f15":"code","29fe4d5a":"code","4f7de112":"code","f0367e5a":"code","53aff0c1":"code","411a4d47":"code","4b041c32":"code","539f2899":"code","d707ba9e":"code","753994d3":"code","4976f5fc":"code","8a0fce97":"code","ac2ff29f":"code","36f314e6":"code","000b9787":"code","2f73acf3":"code","8e1f5ed9":"code","0a4a9132":"code","5f817236":"markdown","a9a48376":"markdown","3a5a3a35":"markdown"},"source":{"4ca35f52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b61c8f15":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv')\nss = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')\ndf = train.copy()\nwkpath = '\/kaggle\/working'\nprint(train.shape)","29fe4d5a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()","4f7de112":"plt.figure(figsize=(12,8))\nsns.countplot(x=df['target'])","f0367e5a":"from sklearn.model_selection import StratifiedKFold, RepeatedKFold, cross_val_score\nfrom lightgbm import LGBMClassifier","53aff0c1":"df.describe()","411a4d47":"maps = ['Class_'+str(i) for i in range(1,10)]\ntargetmaps = {}\nfor i in range(len(maps)):\n    targetmaps[maps[i]]=i\ndf['target'] = df.target.map(targetmaps)\ndf['target'].value_counts()","4b041c32":"skf = StratifiedKFold(n_splits=5)","539f2899":"Y = df.target.values\nfor f, (t_, v_) in enumerate(skf.split(X=df, y=Y)):\n    df.loc[v_, 'kfold'] = f\n\ndf.to_csv(os.path.join(wkpath,'train_5folds.csv'), index=False)","d707ba9e":"lgc = LGBMClassifier()\nX = df.drop(['id', 'target', 'kfold'], axis=1)\nY = df.target\nprint(X.shape, Y.shape)\n","753994d3":"testcopy = test.drop(['id'], axis=1)\nprint(X.shape, testcopy.shape)\n\npredict_scores = []\n\nfor train_idx, test_idx in skf.split(X, Y):\n    print(\"Running ########\")\n    xtrain, xval = X.iloc[train_idx], X.iloc[test_idx]\n    ytrain, yval = Y.iloc[train_idx], Y.iloc[test_idx]\n    lgc.fit(xtrain, ytrain, eval_set=[(xval, yval)], early_stopping_rounds=10)\n    ypreds = lgc.predict_proba(testcopy)\n    predict_scores.append(ypreds)","4976f5fc":"ypreds.shape","8a0fce97":"id_arr = pd.DataFrame(data=[str(i) for i in range(200000,300000)], columns=['id'])\nid_arr.head()\n\nsubmission1 = pd.concat([id_arr, pd.DataFrame(ypreds, columns=['Class_'+str(i) for i in range(1,10)])], axis=1)\nsubmission1.head()\nsubmission1.to_csv(os.path.join(wkpath,'lgbm1_crossval.csv'), index=False)","ac2ff29f":"lgc2 = LGBMClassifier(learning_rate=0.01, num_iterations=200)","36f314e6":"testcopy = test.drop(['id'], axis=1)\nprint(X.shape, testcopy.shape)\n\npredict_scores2 = []\n\nfor train_idx, test_idx in skf.split(X, Y):\n    print(\"Running ########\")\n    xtrain, xval = X.iloc[train_idx], X.iloc[test_idx]\n    ytrain, yval = Y.iloc[train_idx], Y.iloc[test_idx]\n    lgc2.fit(xtrain, ytrain, eval_set=[(xval, yval)], early_stopping_rounds=10)\n    ypreds = lgc2.predict_proba(testcopy)\n    predict_scores2.append(ypreds)\nprint(predict_scores2.shape)","000b9787":"len(predict_scores)","2f73acf3":"predict_scores[0]","8e1f5ed9":"yfinal = np.mean(predict_scores, axis=0)\nyfinal.shape","0a4a9132":"submission2 = pd.concat([id_arr, pd.DataFrame(yfinal, columns=['Class_'+str(i) for i in range(1,10)])], axis=1)\nsubmission2.head()\nsubmission2.to_csv(os.path.join(wkpath,'lgbm2_crossval.csv'), index=False)\n","5f817236":"### StratifiedKFold with 5 splits","a9a48376":"### Trying LGBM Version 2","3a5a3a35":"### EDA for the dataset"}}