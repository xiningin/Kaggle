{"cell_type":{"32d9015b":"code","05e47f9f":"code","87282c0d":"code","2882c4fc":"code","d037a285":"code","f43b291b":"code","3f5b2097":"code","328a1e24":"code","8909beac":"code","428b422c":"code","d320ab91":"code","356bec19":"code","ab40c97b":"code","83c43eb5":"code","b8d81896":"code","9e917fb1":"code","88c7732f":"code","8fb7772a":"code","0f1d4630":"code","55625ef9":"code","32e36309":"code","60969d72":"code","524acaee":"code","2a6d4634":"code","c5e54ff6":"code","78eb2547":"code","4840d768":"code","2c04dd6f":"code","8effdeb8":"code","43e842c9":"code","ab5eacde":"code","8adc8e3f":"code","ef09929d":"code","6b109220":"code","4caf276f":"code","ff76018c":"code","c026e085":"markdown","f2722ff7":"markdown","206c7c36":"markdown","258125df":"markdown","adf5fa72":"markdown","6ac6977e":"markdown","0a1c1070":"markdown","937dae50":"markdown","6e679135":"markdown","2ac0a043":"markdown","d298fbb6":"markdown","f6c1ffe8":"markdown","1ca16f44":"markdown","cdc9edcc":"markdown","9f23f754":"markdown","714d06fe":"markdown","2db0928f":"markdown","f82f10a2":"markdown","93aa494a":"markdown","f007e076":"markdown","7a14bd5b":"markdown","66506503":"markdown","ccfcd5b0":"markdown","c9dc793a":"markdown","a7b0da4e":"markdown","00d80c46":"markdown","a5b5c6b4":"markdown","49d05835":"markdown","7b36c3c3":"markdown","888b3100":"markdown","33990270":"markdown","35f6c47c":"markdown","1b8f07b7":"markdown","7bee7963":"markdown","828f6635":"markdown","b8fcdb58":"markdown","09a7cd44":"markdown","63803c2a":"markdown","5bf5fb73":"markdown","398ed272":"markdown","a629eea3":"markdown","7f2256f3":"markdown"},"source":{"32d9015b":"pip install dnspython","05e47f9f":"import pandas as pd\nimport json\nimport pymongo\nfrom pymongo import MongoClient\n\nimport timeit\nimport pprint\nimport urllib.parse\nimport numpy as np\nimport matplotlib.pyplot as plt ","87282c0d":"\nclient = MongoClient(\"mongodb+srv:\/\/geuser:melq.5491@bdegi.3pkrh.gcp.mongodb.net\/gre_EMD?retryWrites=true&w=majority\")\ndb = client.test\n\n","2882c4fc":"db = client['gre_EMD'] ","d037a285":"db.list_collection_names()","f43b291b":"\ndb = client['gre_EMD']\ncollection0 = db['gre10_depl']\ncollection1 = db['gre10_traj']\ncollection2 = db['gre10_mng']\ncollection3 = db['gre10_pers']\n","3f5b2097":"view0 = collection0.find_one()\nview1 = collection1.find_one()\nview2 = collection2.find_one()\nview3 = collection3.find_one()","328a1e24":"view0","8909beac":"view1","428b422c":"view2","d320ab91":"view3","356bec19":"collection0.count_documents({})\n","ab40c97b":"collection1.count_documents({})\n","83c43eb5":"collection2.count_documents({})\n","b8d81896":"collection3.count_documents({})","9e917fb1":"\nduration = []\nfor x in collection0.find():\n    duration.append(int(x['duree']))\nprint(\"Mean value of a trip duration:\")\nprint(np.mean(duration))\nprint(\"Median value of a trip duration:\")\nprint(np.median(duration))\nprint(\"Variance of a trip duration:\")\nprint(np.var(duration))\nprint(\"Standard deviation of a trip duration:\")\nprint(np.std(duration))\nprint(\"Maximum duration of a trip:\")\nprint(np.max(duration))\nprint(\"Minimum duration of a trip:\")\nprint(np.min(duration))\n\ncount =0\nfor x in collection0.find():\n    if (x['duree']=='NA'):\n      count=count+1\n    \nprint(\"Number of null or NA values: \" + str(count))\n\n\n","88c7732f":"import matplotlib.pyplot as pyplot\npyplot.boxplot(duration)","8fb7772a":"age = []\nfor x in collection3.find():\n    age.append(int(x['age']))\nprint(\"Mean value of age:\")\nprint(np.mean(age))\nprint(\"Median value of age:\")\nprint(np.median(age))\nprint(\"Variance of age:\")\nprint(np.var(age))\nprint(\"Standard deviation of age:\")\nprint(np.std(age))\nprint(\"Maximum age:\")\nprint(np.max(age))\nprint(\"Minimum age:\")\nprint(np.min(age))\n\ncount =0\nfor x in collection3.find():\n    if (x['age']=='NA'):\n      count=count+1\n    \nprint(\"Number of null or NA values: \" + str(count))","0f1d4630":"pyplot.boxplot(age)","55625ef9":"from matplotlib.ticker import PercentFormatter\nplt.hist(age, 50, weights=np.ones(len(age)) \/ len(age), facecolor='g')\nplt.gca().yaxis.set_major_formatter(PercentFormatter(1))\nplt.xlabel('Age frequency')\nplt.ylabel('Percentage')\nplt.show()","32e36309":"print(collection3.distinct('OCCU1'))","60969d72":"occu = []\nfor x in collection3.find():\n    occu.append(x['OCCU1'])\n    \nfor i in range(0, len(occu)): \n    if(occu[i] == 'NA'):\n        occu[i] = 0\n    else:\n        occu[i] = int(occu[i]) \n        \n\n\nplt.plot(age, occu, 'ro')\nplt.yticks(np.arange(0, 10, step=1)) \nplt.xlabel(\"Age\")\nplt.ylabel(\"Occupation\")\nplt.show()","524acaee":"print(collection2.distinct('TYPE_OCU'))","2a6d4634":"vp = []\ntype_oc = []\ntype_hab = []\nfor x in collection2.find():\n    vp.append(int(x['VP_DISPO']))\n    type_oc.append(int(x['TYPE_OCU']))\n    type_hab.append(int(x['TYPE_HAB']))\n    \nplt.plot(type_oc, vp, 'go')\nplt.xticks(np.arange(1, 6, step=1)) \nplt.xlabel('Type of occupation')\nplt.ylabel('Number of cars')\nplt.show()","c5e54ff6":"plt.plot(type_hab, vp, 'bo')\nplt.xticks(np.arange(1, 6, step=1)) \nplt.xlabel('Type of habitation')\nplt.ylabel('Number of cars')\nplt.show()","78eb2547":"plt.plot(type_oc, type_hab, 'go')\nplt.xticks(np.arange(1, 6, step=1)) \nplt.yticks(np.arange(1, 6, step=1)) \nplt.xlabel('Type of occupation')\nplt.ylabel('Type of habitation')\nplt.show()    ","4840d768":"print(collection2.distinct('zoneres'))","2c04dd6f":"type_oc = []\nzoneres = []\nfor x in collection2.find():\n    type_oc.append(x['TYPE_OCU'])\n    zoneres.append(int(x['zoneres']))\n\nplt.figure(figsize=(8,2))\nplt.plot(zoneres, type_oc, 'bo')\nplt.xlabel('Zone of residence')\nplt.ylabel('Occupation')\nplt.show()","8effdeb8":"q = []\np = []\nfor x in collection0.find():\n    q.append(int(x['motifor']))\n    p.append(int(x['duree']))\n        \nplt.plot(q, p, 'bo')\nplt.xlabel('Type of motivation')\nplt.ylabel('Duration')\nplt.show()","43e842c9":"q = []\np = []\nfor x in collection0.find():\n    q.append(int(x['NO_DEPL']))\n    p.append(int(x['duree']))\n        \nplt.plot(p, q, 'bo')\nplt.xlabel('Duration')\nplt.ylabel('Number of trips')\nplt.show()","ab5eacde":"import collections\nvar = []\nsex = []\nvar1 = []\nvar2 = []\n\nfor x in collection3.find():\n    var.append((x['permis']))\n    sex.append(int(x['sexe']))\n    \nfor i in range(0, len(sex)): \n    if(sex[i] == 1):\n        var1.append(var[i])\n    else:\n        var2.append(var[i]) \n\noccur1 = {}\noccur2 = {}\noccur1 = dict(collections.Counter(var1))\noccur1 = dict(collections.OrderedDict(sorted(occur1.items())))\nprint(\"sex = 1, driving licence: \", occur1)\noccur2 = dict(collections.Counter(var2))\noccur2 = dict(collections.OrderedDict(sorted(occur2.items())))\nprint(\"sex = 2, driving licence: \", occur2)\n\n# Plot\n\nplt.figure()\nplt.subplot(121)\nplt.pie(list(occur1.values()),autopct='%1.1f%%', shadow=True, startangle=140, radius = 1.5, colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99'])\nplt.legend(title = \"Driving licence\", labels=list(occur1.keys()),bbox_to_anchor=(1.5,0),loc=\"lower right\")\nplt.title(\"Sex = 1\", y=1.10)\n\nplt.subplot(122)\nplt.pie(list(occur2.values()),autopct='%1.1f%%', shadow=True, startangle=140, radius = 1.5, colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99'])\nplt.title(\"Sex = 2\", y=1.10)\nplt.tight_layout()\n\nplt.show()\n","8adc8e3f":"import matplotlib.patches as mpatches\nvar = []\nsex = []\nvar1 = []\nvar2 = []\n\nfor x in collection3.find():\n    var.append((x['OCCU1']))\n    sex.append(int(x['sexe']))\n    \nfor i in range(0, len(sex)): \n    if(sex[i] == 1):\n        var1.append(var[i])\n    else:\n        var2.append(var[i]) \n\noccur1 = {}\noccur2 = {}\noccur1 = dict(collections.Counter(var1))\noccur1 = dict(collections.OrderedDict(sorted(occur1.items())))\nprint(\"sex = 1, occupation: \", occur1)\noccur2 = dict(collections.Counter(var2))\noccur2 = dict(collections.OrderedDict(sorted(occur2.items())))\nprint(\"sex = 2, occupation: \", occur2)\n\n# Plot\n\n#plt.figure()\n#plt.subplot(121)\n#plt.bar(range(len(occur1)), list(occur1.values()), align='center')\n#plt.xticks(range(len(occur1)), list(occur1.keys()))\n\n#plt.subplot(122)\n#plt.bar(range(len(occur2)), list(occur2.values()), align='center')\n#plt.xticks(range(len(occur2)), list(occur2.keys()))\n#plt.tight_layout()\n\nx1 = list(occur1.keys())\ny1 = list(occur1.values())\nx2 = list(occur2.keys())\ny2 = list(occur2.values())\nplt.plot(x1, y1, 'g')\nplt.plot(x2, y2, 'r')\nplt.xlabel(\"Occupation\")\nplt.ylabel(\"Number of people\")\ngreen_patch = mpatches.Patch(color='green', label='Sex = 1')\nred_patch = mpatches.Patch(color='red', label='Sex = 2')\nplt.legend(handles=[green_patch,red_patch])\nplt.show()\n","ef09929d":"var = []\nsex = []\nvar1 = []\nvar2 = []\n\nfor x in collection3.find():\n    var.append((x['fqvelo']))\n    sex.append(int(x['sexe']))\n    \nfor i in range(0, len(sex)): \n    if(sex[i] == 1):\n        var1.append(var[i])\n    else:\n        var2.append(var[i]) \n\noccur1 = {}\noccur2 = {}\n#occur = {}\noccur1 = dict(collections.Counter(var1))\noccur1 = dict(collections.OrderedDict(sorted(occur1.items())))\nprint(\"sex = 1, Frequency of bicycle usage: \", occur1)\noccur2 = dict(collections.Counter(var2))\noccur2 = dict(collections.OrderedDict(sorted(occur2.items())))\nprint(\"sex = 2, Frequency of bicycle usage: \", occur2)\n\n#occur = dict(collections.Counter(var))\n#occur = dict(collections.OrderedDict(sorted(occur.items())))\n\n# Plot\n\n#plt.bar(range(len(occur)), list(occur.values()), align='center')\n#plt.xticks(range(len(occur)), list(occur.keys()))\n#plt.show()\n\nx1 = list(occur1.keys())\ny1 = list(occur1.values())\nx2 = list(occur2.keys())\ny2 = list(occur2.values())\nplt.plot(x1, y1, 'g')\nplt.plot(x2, y2, 'r')\nplt.xlabel(\"Frequency of bicycle usage\")\nplt.ylabel(\"Number of people\")\ngreen_patch = mpatches.Patch(color='green', label='Sex = 1')\nred_patch = mpatches.Patch(color='red', label='Sex = 2')\nplt.legend(handles=[green_patch,red_patch])\nplt.show()\n","6b109220":"occur1= {}\nvar1 = []\nfor x in collection3.find():\n    var1.append((x['freqtram']))\noccur1 = dict(collections.Counter(var1))\noccur1 = dict(collections.OrderedDict(sorted(occur1.items())))\n\noccur2= {}\nvar2 = []\nfor x in collection3.find():\n    var2.append((x['fqvelo']))\noccur2 = dict(collections.Counter(var2))\noccur2 = dict(collections.OrderedDict(sorted(occur2.items())))\n\noccur3= {}\nvar3 = []\nfor x in collection3.find():\n    var3.append((x['fqvpcond']))\noccur3 = dict(collections.Counter(var3))\noccur3 = dict(collections.OrderedDict(sorted(occur3.items())))\n\n# Plot\nbarWidth = 0.25\n\nr1 = np.arange(len(occur1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n\nplt.bar(r1, list(occur1.values()), color='purple', width=barWidth, edgecolor='white', label='tram')\nplt.bar(r2, list(occur2.values()), color='salmon', width=barWidth, edgecolor='white', label='velo')\nplt.bar(r3, list(occur3.values()), color='aquamarine', width=barWidth, edgecolor='white', label='var3')\n\nplt.xticks([r + barWidth for r in range(len(occur1))], list(occur1.keys()))\nplt.xlabel(\"Frequency of transport usage among all the population\")\nplt.ylabel(\"Number of people\")\n\npatch1 = mpatches.Patch(color='purple', label='Tram')\npatch2 = mpatches.Patch(color='salmon', label='Bicycle')\npatch3 = mpatches.Patch(color='aquamarine', label='Car - driver')\nplt.legend(handles=[patch1, patch2, patch3])\n\nplt.show()","4caf276f":"zone = []\nfor x in collection0.find():\n    zone.append(int(x['zoneres']))\n    \nfreq = {} \nfor item in zone: \n    if (item in freq): \n        freq[item] += 1\n    else: \n        freq[item] = 1\n        \nprint(\"Frequency of values in the attribute 'zoneres': \", dict(sorted(freq.items(), key=lambda item: item[1], reverse=True)))\n","ff76018c":"mec = []\nfor x in collection0.find():\n    mec.append(int(x['tir']))\nfreq = {} \nfor item in mec: \n    if (item in freq): \n        freq[item] += 1\n    else: \n        freq[item] = 1\n\nprint(\"Frequency of values in the attribute 'tir': \",dict(sorted(freq.items(), key=lambda item: item[1])))","c026e085":"We would like to see the distinct values of one more field responsible for the people's occupation:","f2722ff7":"Now we would like to exlplore the dependencies of different attributes on the sex of people:","206c7c36":"****('TYPE_OCU') vs ('VP_DISPO') vs ('TYPE_HAB')****","258125df":"This graph matches the values from the attributes 'TYPE_OCCU' (x axis) and 'VP_DISPO' (y axis). It shows that people with type of occupation number  1 can have up to 5 private available cars in their households, people with type of occupations number 2 or 3 can have up to 4, and people with type of occupation number 4 or 5 up to 3.","adf5fa72":"To display the attributes associated with each collection, we print one object from each collection:","6ac6977e":"Now we would like to correlate the motivation for a travel with the trip duration:","0a1c1070":"We see that the occupation #1 is the more frequent for sex1 than for sex2. At the same time, sex2 has no such extreme difference in the frequency of the occupation #1 and #2 while for the sex1 the occupation #2 is very rare. \nAdditionally, sex1 doesn't do the occupation #8 but sex2 does. For the rest of occupations, there is no significant difference.","937dae50":"We can see that it is possible to use as well the attribute 'tir' for interval and hash sharding as the data is distributed quite evenly for different values of this attribute.","6e679135":"# 1. Exploring Views","2ac0a043":"We can see that the sex2 prefers to use a bicycle more often than the people of sex1.","d298fbb6":"The main point to higlight from this graph is that we can separate the motivations into two groups: those that lead to the travel duration up to 100-150 min, and those that lead to a longer travels (mainly up to 500 min).","f6c1ffe8":"# 3. Relating attributes","1ca16f44":"The boxplot confirms the values we obtained in the precedent chunk, it shows low mean value(18) compared to the maximum value for this attribute (750). Additionally, we can confirm that the min and max values are not the outliers. ","cdc9edcc":"Here we match the values from the attributes 'TYPE_HAB' (x axis) and 'VP_DISPO' (y axis).  The plot shows that people with type of habitation number 1 can have up to 5 private available cars in their households, people with type of habitation number 2, 3 or 4 can have up to 4, and people with type of habitation number 5 up to 2.","9f23f754":"From this plot it is visible that the value of age = 1 is the most frequent. This can happen if the default value of the attribute is set to be 1 which triggers bad interpretation of the data. Besides, we ca see a reduces frequency of the people from 20 to 30 y.o. and after 65 y.o.","714d06fe":"Now we would like to execute a quantitative analysis of the attribute 'age':","2db0928f":"We would like to shard the first collection as it is the biggest one. In this collections there are 63336 objects, so if we want to have 3 shards, each one will have approximately 21112 object.","f82f10a2":"# BAUTISTA C\u00e9sar, HRYHORYEVA Maryia,MANIGLIER Pablo, TAEI Fatemeh\n\n\n","93aa494a":"And to correlate the value of this field with the number of cars in the household:","f007e076":"# 4. Sharding","7a14bd5b":"Now we would like to compare how often people are taking a tram, a bicycle, and a car as a driver:","66506503":"> ****('OCCU1') vs ('age')****","ccfcd5b0":"For people with sex #1 we see that they have more driving licence of type 1 than people of sex #2\nFor the driving licence of type #2 the situation is opposite. \nThe number of permis of type 3 between both sexe is insignificant. In general, there is no significant difference between sex #1 and sex #2.","c9dc793a":"Here we are loading all the collections:","a7b0da4e":"The boxplot confirms the values we obtain on the precedent chunk, it shows less atypical values than the boxplot for the attribute 'duree', also a more centered value for the mean(37). Moreover, it confirms the values we obtained in the precedent chunk. To explore the age distribution more precisely, we will plot a histogram with age frequency.","00d80c46":"# 2. Attributes quantitative analysis","a5b5c6b4":"Firstly, we would like to see all the distinct values of the occupation attribute.","49d05835":"This graph matches the values from the attributes 'TYPE_OCCU' (x axis) and 'TYPE_HAB' (y axis). It shows that people with type of occupation number 1  or 2 dont have the type of habitation number 5 , people with type of occupations number 3 or 4 can have any type of habitation, and people with type of occupation number 5 just the type of habitation 1 and 4.","7b36c3c3":"Now, we would like to explore the dependencies between an age and an occupation.","888b3100":"The main occupations with the oldest ages are number 7 and 8 according to the graph. As the interpretation of different values of occupation is not given, we can try to make our own assumptions. After a discussion with the group members, we can relate the occupation number 5 with pupils and students (from 5 to 25 years approximately) and the occupation number 7 to retired (from 50 to 100 years old approximately) according to the age rank visualised on the graph. Besides, we can state that the youngest age for the other occupations is around 18 years old.","33990270":"This graph present us the type of occupation depending on the zone of residence. The type of occupation 1 and 3 are presented in the most part of the 59  different zones of residence. A bit less freqent, the occupations 2 and 4 are reprensented as well in the different zones of residence. Finally, the occupation 5 occurs only in the zone 1 and 2.  ","35f6c47c":"To start exploring the mobility of in the region of Grenoble, we would like to start with statistical characteristics of the attribute 'duration' of the collection 'deplacements'.","1b8f07b7":"Now we would like to explore the dependencies between the occupation type and the residence zone.","7bee7963":"The conclusion is that more someone travels, shorter the trips are. On the opposite, if a person travels rarely, it is more probable that his trip will be longer than the mean duration. This can be explained by the fact that people who need to take a transport to go to their work will be traveling frequently and they will not spend a lot of time in the transport. On the other hand, if a person goes to work by foot, this person will take a transport for a special occasions and longer distances.","828f6635":"We can see that the average age of travelling people is about 40 y.o. At the same time the minimum age is equal to 1 and the maximum - 102. According to the information the ages that are most frequent in the entries for this collections are between approximately 17 and 63 years old. To graphically depict the groups of numerical data through their quartiles we will use a boxplot:","b8fcdb58":"***Objective***: \n\nWe want to explore and understand the given dataset and analyze the main trends inside of it. \nOur objective is to make the segmentation of the different data in order to anaylze it in a specific and adapted context. ","09a7cd44":"As we can see, the attribute 'duration' is very spread. To understand the most common behavior of people, we should pay attention to the mean, median, and standard deviation values. However, the minimum duration of a trip found in the dataset is 1 min while the longest is 750 min (12.5h). Those values could be the outliers. To investigate them deeper, we would like to create a boxplot:","63803c2a":"We can notice that the most popular transport is tram. Afterwards, people prefer to take a bicycle. The frequency of car usage is quite even, approximately the same number of people are taking a car for a frequency #2,4 and 5.","5bf5fb73":"Firstly, we would like to view the collections names:","398ed272":"Let's investigate the relation between the number of trips and their durations:","a629eea3":"Display the number of entries in each collection","7f2256f3":"For sharding using intervals we can use attribute 'zoneres'. The first interval is zone #1 - 20735 obj., second interval is zone #2 - 17799 obj., third interval is zone #3-59 - 24802 obj. Interval-based partitioning supports more efficient range queries. However, it can result in an uneven distribution of data."}}