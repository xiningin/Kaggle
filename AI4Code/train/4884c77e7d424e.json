{"cell_type":{"57ed9287":"code","f5bce66b":"code","5a2d9c5a":"code","e9c0ad22":"code","aa687179":"code","4f7ecd3d":"code","5c61ce94":"code","f18996b4":"code","47bbcc0f":"code","915ae35e":"code","9e01f33b":"markdown","b1bdc291":"markdown","26e869b9":"markdown","9ee343d1":"markdown","d562abe0":"markdown","ff36ccba":"markdown","a6105ec5":"markdown","e14bda19":"markdown","e70be001":"markdown","51cd0864":"markdown","f5401658":"markdown","b51f2759":"markdown","f03a5f57":"markdown"},"source":{"57ed9287":"import numpy as np, pandas as pd, matplotlib.pyplot as plt, seaborn as sn\nfrom scipy.integrate import odeint, solve_ivp\nimport seaborn as sns\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename)) ","f5bce66b":"# Model Params\n###################################################################################################\n###################################################################################################\na = 2  #fear factor for country one       \nb = 2  #fear factor for country two \n\nc = 1  #restraint factor for c1\nd = 1  #restraint factorrestraint factor for c2\n\ne1 = -5 #strenous factors(?)these are basically here to create an equilibria, as far as i can tell, so cool.\ne2 = -5\n\n# Initial values\nweaponsC1_0 = +10   # initial weapons held by C1 \nweaponsC2_0 = +10   # initial weapons held by C2\n###################################################################################################\n###################################################################################################\n\n\n# Bundle parameters for ODE solver\nparams = [a, b, c, d, e1, e2]\n\n# Bundle initial conditions for ODE solver\ny0 = [weaponsC1_0, weaponsC2_0]\n\n\n# Make time array\ntStop = 6\ntInc = 0.1\nt = np.arange(0., tStop, tInc)\nlen(t)\n\ndef g(t_0):\n    return(((t > t_0)*(t < t_0+0.25)))\n\nplt.plot(t,200*(g(0.2)) + 400*g(4))","5a2d9c5a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nfrom scipy.integrate import odeint\n\n\n\n\ndef f(y, t, params):\n    weaponsC1, weaponsC2 = y\n    a, b, c, d, e1, e2 = params  \n    t_0 = 10\n    t_1 = 11\n    derivs = [ (a*weaponsC2- c*weaponsC1 + e1) + (2*(t > t_0)*(t < t_0+0.5)) + (3*(t > t_1)*(t < t_1+0.5)),       \n                (b*weaponsC1 - d*weaponsC2 + e2)] #+ (2*(t > t_0)*(t < t_0+0.5))+ (3*(t > t_1)*(t < t_1+0.5))]\n    return derivs\n\n\n\n\n\n\n#solve\npsoln = odeint(f, y0, t, args=(params,),rtol=1e-10, hmax = 0.01, tcrit = 5)\n","e9c0ad22":"# Plot results\nfig = plt.figure(1, figsize=(8,8))\n\n# Plot C2 Weapons as a function of time\nax1 = fig.add_subplot(311)\nax1.plot(t, psoln[:,0])\nax1.set_xlabel('time')\nax1.set_ylabel('C2 Weapons')\nax1.set_ylim(-1, max(psoln[:,0])+ math.sqrt(max(psoln[:,0])) )\n\n\n# Plot C1 Weapons as a function of time\nax2 = fig.add_subplot(312)\nax2.plot(t, psoln[:,1])\nax2.set_xlabel('time')\nax2.set_ylabel('C1 Weapons')\nax2.set_ylim(-1, max(psoln[:,0])+ math.sqrt(max(psoln[:,0])) )\n\n\n# Plot phase-space: C1 Weapons vs C2 Weapons\nax3 = fig.add_subplot(313)\nax3.plot(psoln[:,0], psoln[:,1], '.', ms=1)\nax3.set_xlabel('C2 Weapons')\nax3.set_ylabel('C1 Weapons')\n\nplt.tight_layout()\nplt.show()\n\nfrom pylab import *\n\nx, y = meshgrid(arange(-2, 20, .1), arange(-2, 20, 1))\n\nxdot = a*y-c*x+e1\nydot = b*x-d*y+e2\n\n\n\nplt.figure()\nplt.streamplot(x, y, xdot, ydot)\n\nx=linspace(-2,20,110)\ny=linspace(-2,20,110)","aa687179":"# Model Params\n###################################################################################################\n###################################################################################################\na = 3  #fear factor for country one       \nb = 2  #fear factor for country two \n\nc = 0.9  #restraint factor for c1\nd = 0.78  #restraint factorrestraint factor for c2\n\ne1 = 6 #strenous factors(?)these are basically here to create an equilibria, as far as i can tell, so cool.\ne2 = 0.2\n\n# Initial values\nweaponsC1_0 = 100    # initial weapons held by C1 \nweaponsC2_0 = 2  # initial weapons held by C2\n###################################################################################################\n###################################################################################################\n\n\n# Bundle parameters for ODE solver\nparams = [a, b, c, d, e1, e2]\n\n# Bundle initial conditions for ODE solver\ny0 = [weaponsC1_0, weaponsC2_0]\n\n\n# Make time array\ntStop = 3\ntInc = 0.1\nt = np.arange(0., tStop, tInc)\nlen(t)\n\ndef g(t_0):\n    return(((t > t_0)*(t < t_0+0.25)))\n\nk = 200*(g(0.2)) + (400*g(2))","4f7ecd3d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nfrom scipy.integrate import odeint\n\n\n\n\ndef f(y, t, params):\n    weaponsC1, weaponsC2 = y\n    a, b, c, d, e1, e2 = params  \n    t_0 = 0.2\n    t_1 = 0.3\n    t_2 = 2\n    t_3 = 4.5\n    t_4 = 6\n    (t_5,t_6,t_7,t_8) = (1,1.3,2,2.3)\n    derivs = [((1-(weaponsC1\/1200)) * (a*weaponsC2- c*weaponsC1 + e1)) + (500*(t > t_0)*(t < t_0+0.25)) + (700*(t > t_2)*(t < t_2+0.5)),# + (200*(t > t_5)*(t < t_5+0.5)) + (200*(t > t_7)*(t < t_7+0.5)),       \n              ((1-(weaponsC2\/750)) * (b*weaponsC1 - d*weaponsC2 + e2)) + (100*(t > t_0)*(t < t_0+0.5)) + (300*(t > t_2)*(t < t_2+0.5))]# + (100*(t > t_4)*(t < t_4+0.5))]#+ (100*(t > t_6)*(t < t_2+0.6))+ (100*(t > t_8)*(t < t_8+0.5))]\n    return derivs\n\n\n\n\n\n\n#solve\npsoln = odeint(f, y0, t, args=(params,), hmax = 0.01, tcrit = 5)\n","5c61ce94":"# Plot results\nfig = plt.figure(1, figsize=(8,8))\n\n# Plot C2 Weapons as a function of time\nax1 = fig.add_subplot(311)\nax1.plot(t, psoln[:,0])\nax1.set_xlabel('time')\nax1.set_ylabel('C2 Weapons')\nax1.set_ylim(-1, max(psoln[:,0])+ math.sqrt(max(psoln[:,0])) )\n\n\n# Plot C1 Weapons as a function of time\nax2 = fig.add_subplot(312)\nax2.plot(t, psoln[:,1])\nax2.plot(t, psoln[:,0])\nax2.plot(t, k)\nax2.set_xlabel('time')\nax2.set_ylabel('C1 Weapons')\nax2.set_ylim(-1, max(psoln[:,0])+ math.sqrt(max(psoln[:,0])) )\n\n\n#Plot phase-space: C1 Weapons vs C2 Weapons\nax3 = fig.add_subplot(313)\nax3.plot(psoln[:,0], psoln[:,1], '.', ms=1)\nax3.set_xlabel('C2 Weapons')\nax3.set_ylabel('C1 Weapons')\n\n#ax3 = fig.add_subplot(313)\n#ax3.plot(t, psoln[:,0])\n#ax3.plot(t, psoln[:,1])\n\n\n\nplt.tight_layout()\nplt.show()","f18996b4":"##\ndef model(y,t):\n    k = 0.3\n    t_0 = 3\n    dydt =  -y + (2*(t > t_0)*(t < t_0+0.4))\n    return dydt\n\n\n# initial condition\ny0 = 1\n\n# time points\n# Make time array\ntStop = 20\ntInc = 0.1\nt = np.arange(0., tStop, tInc)\nlen(t)\nsol = odeint(model,y0,t)\n\n# plot results\nplt.plot(t,sol)\nplt.xlabel('time')\nplt.ylabel('y(t)')\nplt.show()\n","47bbcc0f":"from pylab import *\n\nx, y = meshgrid(arange(-2, 20, .1), arange(-2, 20, 1))\n\nxdot = 3*y-2*x-5\nydot = 2*x-y-2\n\n\n\nplt.figure()\nplt.streamplot(x, y, xdot, ydot)\n\nx=linspace(-2,20,110)\ny=linspace(-2,20,110)\n\n\n","915ae35e":"x, y = meshgrid(arange(-2, 10, .1), arange(-2, 10, 1))\n\nxdot = (1-(x\/7)) * (3*y-2*x-5)\nydot = (1-(y\/9)) * (2*x-y-2)\n\n\n\nplt.figure()\nplt.streamplot(x, y, xdot, ydot)\n\nx=linspace(-2,7.5,110)\ny=linspace(-2,7.5,110)\n\n\n\n\nshow()","9e01f33b":"### What's going on here?\n\nthis is an implementation of the two-country richardson arms race model for a modelling course, made public so my group members can access the code.","b1bdc291":"# for testing , ignore","26e869b9":"# Model With Added Carrying Capacity","9ee343d1":" Arms race stable: $a = b = 1$; $c = d = 2$; $e1 = e2 =5$\n \n Arms race reduction: $a = b = 1$; $c = d = 2$; $e1 = e2 = -5$\n \n Total arms race: $a = b = 2$; $c = d = 1$; $e1 = e2 =5$;\n \n Unstable arms race: $a = b = 2$; $c = d = 1$; $e1 = e2 = -5$; start at weapons = 5(?)","d562abe0":"# Code Model","ff36ccba":"The forcing term here is super messy \u2014 I'd love to not do it this way, but Python has issues with time and indices in functions, so it seems you need to explicity put in every event into ODEint.","a6105ec5":"# Can we animate this?","e14bda19":"# Set Parameter Value","e70be001":"Just plots down here :)","51cd0864":"this is an example of forcing terms, but for a simple half life model \u2014 a good way to think of this is like a bucket with a leak being filled with water; the amount of water will trend to zero, however you can add water in at t0, t1, t2, etc, spiking the water up to a higher level.","f5401658":"yes, but most copy this code into a jupyter notebook; does not work in Kaggle sad :(","b51f2759":"What exactly does this model look like?\n\n$$ x' - (a(y) - b(x) + e1) = g(x) $$\n$$ y' - (a(x) - b(y) + e2) =  g(x) $$\n\nfor forcing term $g$. \n\n\nNote: we can easily add a carrying capacity \/ budget as:\n\n$$ x' = (1-\\frac{x}{x_{max}})(a(y) - b(x) + e1) + g $$ and \n$$ y' = (1-\\frac{y}{y_{max}})(a(x) - b(y) + e2) + g $$\n\nfor carrying capacity $x\/y_{max}$\n\n\n\nbut I didn't do this yet.","f03a5f57":"# Richardson Arm's Race Model"}}