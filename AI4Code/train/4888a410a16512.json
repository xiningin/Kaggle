{"cell_type":{"b65fbc95":"code","68d4aa0a":"code","cd185c39":"code","5d88f724":"code","a4c9cdb0":"code","fea4f8dd":"code","65bb5d41":"code","511b10bd":"code","81108f6b":"code","b5326664":"code","2ab9972a":"code","427637a7":"code","ed0fe689":"code","5524a5f0":"code","c3bc5cf9":"code","be25d73f":"code","32b49171":"code","59538d10":"code","f7871b97":"code","0735166e":"code","c22153e2":"code","ea83e50b":"markdown","49a2383b":"markdown","5838a653":"markdown","879f52fd":"markdown","0fbe7339":"markdown","645d68fd":"markdown","8e828f20":"markdown"},"source":{"b65fbc95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68d4aa0a":"from sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","cd185c39":"column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\nBoston_house_price=pd.read_csv(\"..\/input\/boston-house-prices\/housing.csv\", header=None, delimiter=r\"\\s+\", names=column_names)","5d88f724":"price_df=pd.DataFrame(Boston_house_price)","a4c9cdb0":"price_df.head()","fea4f8dd":"price_df.describe()","65bb5d41":"price_df.info()","511b10bd":"# let's plot all the columns to look at their distributions\nfor i in price_df.columns:\n    plt.figure(figsize=(7, 4))\n    sns.histplot(data=price_df, x=i, kde = True)\n    plt.show()","81108f6b":"corr=price_df.corr()\ncorr.shape","b5326664":"# Plotting the heatmap of correlation between features\nplt.figure(figsize=(20,20))\nsns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='Greens')","2ab9972a":"#Slitting the data\nX=price_df.drop(['MEDV'], axis=1)\nY=price_df['MEDV']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.3, random_state=4)","427637a7":"#import the library for Linear Regression\nfrom sklearn.linear_model import LinearRegression\n\n# Create a linear regressor\nmodel=LinearRegression()\n\n#Train the model using the training set\nmodel.fit(X_train, Y_train)","ed0fe689":"model.intercept_","5524a5f0":"#Converting the coefficient values to a dataframe\ncoeffcients = pd.DataFrame([X_train.columns,model.coef_]).T\ncoeffcients = coeffcients.rename(columns={0: 'Attribute', 1: 'Coefficients'})\ncoeffcients","c3bc5cf9":"# Model Prediction on train data\nY_pred=model.predict(X_train)","be25d73f":"# Model Evaluation\nprint('R^2:',metrics.r2_score(Y_train, Y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_train, Y_pred))*(len(Y_train)-1)\/(len(Y_train)-X_train.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_train, Y_pred))\nprint('MSE:',metrics.mean_squared_error(Y_train, Y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_train, Y_pred)))","32b49171":"# Visualizing the differences between actual prices and predicted values\nplt.scatter(Y_train, Y_pred)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","59538d10":"# Checking residuals\nplt.scatter(Y_pred,Y_train-Y_pred)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show()","f7871b97":"# Checking Normality of errors\nsns.distplot(Y_train-Y_pred)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show()","0735166e":"# Predicting Test data with the model\ny_test_pred = model.predict(X_test)","c22153e2":"# Model Evaluation\nacc_linreg = metrics.r2_score(Y_test, y_test_pred)\nprint('R^2:', acc_linreg)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(Y_test, y_test_pred))*(len(Y_test)-1)\/(len(Y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(Y_test, y_test_pred))\nprint('MSE:',metrics.mean_squared_error(Y_test, y_test_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(Y_test, Y_test_pred)))","ea83e50b":"There is a high positive corrilation between the following colums\n1. The number of rooms and price of the house\n2. The age of the house and the nitric oxide concentration\n3. the proportion of non-ratian business that are present and the nitric oxide concentration.\n4. Non-ratail business in the town have less amiunt of tax charged on the house.\n\nThe high negative corrilation is between the following columns\n1. Non-retail business and distance from the employment centers.\n2. Similarly, the nitric oxide concentration and distance from the employement centers.\n3. Age of the house and the distance from the employment center.\n\n","49a2383b":"Training the model","5838a653":"Checking the distribution of most variables:","879f52fd":"For Train Data","0fbe7339":"# Linear Regression","645d68fd":"# Univariate Analysis","8e828f20":"Model Evalutaion"}}