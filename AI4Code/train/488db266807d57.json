{"cell_type":{"4954b412":"code","998cab01":"code","e5204c2b":"code","c96c8246":"code","0cb9f954":"code","d19ac9a4":"code","e0e7c7d3":"code","3fe56137":"code","61ac6cb9":"code","590f3e97":"code","50be5335":"code","affdc965":"code","92d0ae40":"code","932c1541":"code","7670c7d0":"code","5b92789d":"code","8337a302":"code","9531ac19":"markdown","3fef5dea":"markdown","c857bf9a":"markdown","f244be6e":"markdown","c0f8ec4e":"markdown","16ed3c1d":"markdown","602a78dc":"markdown","e3c37021":"markdown","ed750ead":"markdown","b7cb6133":"markdown"},"source":{"4954b412":"import pandas as pd","998cab01":"path = r'..\/input'\ncourse_offerings = pd.read_csv(path+'\/course_offerings.csv')\ncourses = pd.read_csv(path+'\/courses.csv')\ngrade_distributions = pd.read_csv(path+'\/grade_distributions.csv')\ninstructors = pd.read_csv(path+'\/instructors.csv')\nrooms = pd.read_csv(path+'\/rooms.csv')\nschedules = pd.read_csv(path+'\/schedules.csv')\nsections = pd.read_csv(path+'\/sections.csv')\nsubject_memberships = pd.read_csv(path+'\/subject_memberships.csv')\nsubjects = pd.read_csv(path+'\/subjects.csv')\nteachings = pd.read_csv(path+'\/teachings.csv')","e5204c2b":"df = [course_offerings,courses,grade_distributions,instructors,rooms,\n     schedules,sections,subject_memberships,subjects,teachings]\nfor i in df:\n    print(i.columns)","c96c8246":"def grade_avg(worst_results):\n    worst_results['total_count'] = worst_results[['a_count', 'ab_count',\n           'b_count', 'bc_count', 'c_count', 'd_count', 'f_count']].sum(axis = 1)\n    worst_results['a_count'] = worst_results['a_count']\/worst_results['total_count']\n    worst_results['ab_count'] = worst_results['ab_count']\/worst_results['total_count']\n    worst_results['b_count'] = worst_results['b_count']\/worst_results['total_count']\n    worst_results['bc_count'] = worst_results['bc_count']\/worst_results['total_count']\n    worst_results['d_count'] = worst_results['d_count']\/worst_results['total_count']\n    worst_results['c_count'] = worst_results['c_count']\/worst_results['total_count']\n    worst_results['f_count'] = worst_results['f_count']\/worst_results['total_count']\n    return worst_results[worst_results['a_count'].notnull()]","0cb9f954":"worst_results = grade_distributions[['course_offering_uuid', 'section_number', 'a_count', 'ab_count',\n       'b_count', 'bc_count', 'c_count', 'd_count', 'f_count']].copy()\nworst_results = grade_avg(worst_results)\nworst_20 = worst_results[worst_results['total_count']>10].sort_values(['f_count','d_count',\n                                                           'c_count','b_count'],ascending=False).head(20)\nworst_20","d19ac9a4":"# we need to remove these 2 entries.\nsubjects = subjects[~subjects['code'].isin(['ZZZ','SAB'])]\nsubjects['code'] = subjects['code'].astype('int')\nworst_20 = worst_20.merge(subject_memberships, how = 'left',on = 'course_offering_uuid')\nworst_20 = worst_20.merge(subjects, how = 'left',left_on= 'subject_code',right_on= 'code')\nworst_20 = worst_20.drop(columns =['code','abbreviation'])\nworst_20\n","e0e7c7d3":"combine1 = worst_20.merge(sections, on = 'course_offering_uuid')\ncombine2 = combine1.merge(teachings,how = 'left', left_on='uuid',right_on='section_uuid')\ncombine2 = combine2.drop(columns = ['section_uuid'])\ncombine3 = combine2.merge(instructors,how = 'left', left_on='instructor_id',right_on='id')\ncombine3_math = combine3[combine3['name_x'] == 'Mathematics']\ncombine3.head(3)","3fe56137":"math_prof_score = pd.DataFrame(combine3_math.groupby(by = ['name_y']).agg({'a_count':'mean',\n'ab_count':'mean',\n'b_count':'mean',\n'bc_count':'mean',\n'c_count':'mean',\n'd_count':'mean',\n'f_count':'mean',\n'total_count':'mean','name_y':'count'}).sort_values(['f_count',\n                                                     'd_count',\n                                                           'c_count','b_count'],\n                                                    ascending=False))\nmath_prof_score = math_prof_score.rename(columns = {'name_y':'total_classes'})\nmath_prof_score.style.format({'a_count':\"{:.2%}\",\n                              'ab_count':\"{:.2%}\",\n                              'b_count':\"{:.2%}\",\n                             'bc_count':\"{:.2%}\",\n                             'c_count':\"{:.2%}\",\n                             'd_count':\"{:.2%}\",\n                             'f_count':\"{:.2%}\"})\n","61ac6cb9":"schedule_merge = schedules.merge(sections[['course_offering_uuid','schedule_uuid']], how = 'left',left_on='uuid',right_on= 'schedule_uuid')\ngrade_merge = grade_distributions[['course_offering_uuid', 'section_number', 'a_count', 'ab_count',\n       'b_count', 'bc_count', 'c_count', 'd_count', 'f_count']].copy()","590f3e97":"test = schedule_merge.merge(grade_merge, how = 'left', on = 'course_offering_uuid')\n#remove all the classes which are not scheduled \ntest = test[~\n((test['tues'] == False) &\n(test['sun'] == False) &\n(test['mon'] == False) &\n(test['wed'] == False) &\n(test['thurs'] == False) &\n(test['fri'] == False) &\n(test['sat'] == False)) ]\nprint(test.shape)","50be5335":"test_rep = test.replace({True:1,False:0})\ntest_rep['no_cls'] = test_rep['mon'] +test['tues']+test['sun']+test['wed']+test['thurs']+test['fri']+test['sat']\ntest_rep = grade_avg(test_rep)","affdc965":"# no significant results to say no of classes affect the grades\ntest_rep.groupby(by = test_rep['no_cls']).agg({'a_count':'mean',\n'ab_count':'mean',\n'b_count':'mean',\n'bc_count':'mean',\n'c_count':'mean',\n'd_count':'mean',\n'f_count':'mean',\n'uuid':'count'})","92d0ae40":"days_affect = test_rep[test_rep['no_cls']==1].copy()\nx = days_affect[['mon','tues','wed','thurs','fri','sat','sun']].idxmax(axis = 1)\ndays_affect['day'] =x\ndays_affect = days_affect[days_affect['a_count'].notnull()]\ndays_affect_grop = days_affect.groupby(by = days_affect['day']).agg({'a_count':'mean',\n'ab_count':'mean',\n'b_count':'mean',\n'bc_count':'mean',\n'c_count':'mean',\n'd_count':'mean',\n'f_count':'mean',\n'uuid':'count'})\ndays_affect_grop","932c1541":"Grade_section = grade_distributions.merge(sections, how = 'left',on = 'course_offering_uuid')\ngrade_prof = Grade_section.merge(teachings, how = 'left',left_on = 'uuid', right_on = 'section_uuid')\nstrict_instructor = grade_prof[['course_offering_uuid','a_count', 'ab_count',\n       'b_count', 'bc_count', 'c_count', 'd_count', 'f_count', 'instructor_id']].copy()\nstrict_instructor = grade_avg(strict_instructor)\n","7670c7d0":"strict_instructor = strict_instructor.merge(instructors,how = 'left', left_on='instructor_id',right_on= 'id')\nstrict_instructor.columns","5b92789d":"strict_instructor = strict_instructor.groupby(by = strict_instructor['name']).agg({'a_count':'mean',\n'ab_count':'mean',\n'b_count':'mean',\n'bc_count':'mean',\n'c_count':'mean',\n'd_count':'mean',\n'f_count':'mean',\n'course_offering_uuid':'count'}).sort_values(['f_count','d_count',\n                                                           'c_count','b_count'],ascending=False)\n","8337a302":"strict_instructor[strict_instructor['course_offering_uuid'] >5].head(10)","9531ac19":"## MATH MATH MATH\n\nI had the feeling. We can clearly observe most of the courses with bad grades are Math.\n\nSolution: \n1) University should apply some prerequisites for Math course.\n\n2) We can warn students about the past results.\n\n3) we can provide the list of professors who are strict or lenient and then they can choose accordingly\n\n## Below is the list of Math professor from strict to lenient and their grades distribution.","3fef5dea":"As number of classes does not have significant effect on the grades we will see if classes or days i.e. Monday, Friday, Sunday affects the grades.\nFor example: class grade on Monday vs Sunday or weekday vs weekend.\n\nFor that purpose, we are only considering the classes which held only once a week. One can dig deep by comparing all the possible ways. ","c857bf9a":"## what are these subjects ??\n\nLet's dig deep. We need to see that in which subjects students facing problem and getting bad grades.","f244be6e":"# UW Madison Courses: An Exploratory Analysis on worst grades\n\n## Points Covered in the Analysis\n\n1) What are the Worst Grades.\n\n2) In which subjects students struggling.\n\n3) Help them to select professor for tough courses.\n\n4) Analyze the effect of number of classes in a week on student\u2019s grades.\n\n5) Analyze the effect of week day for the classes.\n\n6) Warn student by flagging professors with strict grading.\n","c0f8ec4e":"### Select your professor carefully !!\n# Effect of number of classes in a week\n\nHere we are checking that is there any effect on grade of student based on how many classes scheduled for each subject within a week. For example: Math class: is twice a week, English class: Once a week (just an example, may not be true). So, we want to see there is any changes in grades if one class held 7 days a week as compare to 1 day a week.\n\n### Steps:\n\n1) merge schedule data with section to get tge course offering id.\n\n2) merge the new data to grade dataset to get the grades.\n\n3) filter the dataset where there is no class in whole week.\n\n4) Group by number of class to see the impact on grades\n","16ed3c1d":"# Worst Grades\nLet's start with finding out the worst grades and how it looks like. Where people are getting F and D's\nFor this Analysis we will only look at the class where there are more than 10 students in the class\nwe will look at the top 20 courses offering with worst grades.\n\nResults: We can observe there is class with half of students got F and all are above 20% fail.","602a78dc":"### Top 10 strict instructor","e3c37021":"# Effect of Week Day on grades.\n\nAnalyze the class grade based on the day class scheduled.\n\n### Steps:\n1) Filter the classes which only held once a week.\n\n2) Group by according the weekday and average the grades to analyze the effects.","ed750ead":"# Strict Instructor\nWe can help students by flagging each professor according their grading pattern. It will give students a preview of how strict a professor grades and then they can decide which course they want to take. Sometimes in universities there will be multiple professors teaching the same course, so this might students to select whose classes they want to take.\n\n### steps:\n1) Merge the grading dataset to section instructor to get the unique id for each instructor.\n\n2) Merge new dataset with the instructor\u2019s dataset to get the name. (you do not need to this step if you don't want to the names)\n\n3) calculate the % of people for each grade.\n\n4) At last average the grades by individual processor to identify how strict is the checking.\n\n5) Sort it by Fail, D grade and so on.\n","b7cb6133":"## Weekend classes are the best!\n\n#### On sunday 94% scored A, Saturday 75% scored A where as on Friday only 37% scored A :( \nWe have observed that the average grades of classes which held on Weekends have significantly higher number of A's whereas classes on the Friday(last working day) have really low A grade. Sometimes, I also don't feel like working on Fridays!\n"}}