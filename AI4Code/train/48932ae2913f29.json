{"cell_type":{"24dd588c":"code","ab6b0e4e":"code","a027650e":"code","5c0481dc":"code","7c0fae43":"code","aa8bdb26":"code","c6a589c9":"code","89f3fb32":"code","0de582f8":"code","27eafc20":"code","4507ab6a":"code","c175b6f0":"code","e0b2fd45":"code","5d6fa457":"code","15dc5dea":"markdown","2c13fef8":"markdown","d281ab11":"markdown","9ba8c1a6":"markdown","94ac30eb":"markdown","fb15354e":"markdown","b71bf561":"markdown","084ebf8c":"markdown"},"source":{"24dd588c":"import pandas as pd\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom us_state_abbrev_dictionary import us_state_abbrev, abbrev_us_state, regions, r_names\nfrom new_cases_utils import new_cases, new_cases1, new_cases_per_capita","ab6b0e4e":"covid_data = pd.read_csv('..\/input\/us-covid19-dataset-live-hourlydaily-updates\/US-counties_historical.csv')\n\ndef st_county_helper(row):    # This will come in handy when trying to query by county\n    return us_state_abbrev[row.state] + ', ' + row.county\n\ncovid_data['st_county'] = covid_data.apply(st_county_helper, axis='columns')","a027650e":"ny_cases, us_cases = new_cases(covid_data.query('state == \"New York\"'), covid_data)\n\nf1 = make_subplots(rows=1, cols=2, subplot_titles=(\"New York\", \"United States\"))\nf1.update_layout(width=800, height=400, showlegend=False, bargap=0, title_text=\"New COVID-19 Cases\")\nf1.add_trace(go.Bar(x=ny_cases.index, y=ny_cases.values), 1, 1)\nf1.add_trace(go.Bar(x=us_cases.index, y=us_cases.values), 1, 2)\n\nf1.show()","5c0481dc":"f2 = make_subplots(rows=2, cols=2, subplot_titles=r_names, shared_yaxes=True)\nf2.update_layout(width=800, height=700, showlegend=False, bargap=0, yaxis=dict(range=[0,45000]), title_text=\"New COVID-19 Cases by Region\")\n\nfor i in range(len(regions)):\n    rc = new_cases1(covid_data.query('state in @regions[@i]'), 'cases')\n    f2.add_trace(go.Bar(x=rc.index, y=rc.values), ((i\/\/2)%2)+1, (i%2)+1)   # little indexing trick I learned in Algo\n\nf2.show()","7c0fae43":"pres_data = pd.read_csv('..\/input\/2016uspresidentialvotebycounty\/pres16results.csv')\ncensus_data = pd.read_csv('..\/input\/us-county-population-estimates-20102019\/co-est2019-annres.csv').set_index('County').transpose()","aa8bdb26":"grouped = pres_data.groupby(['st', 'county', 'cand']).sum()\ndt_counties = grouped.apply(lambda x: [x.name[0], x.name[1], x.name[2]] if x.pct >= 0.5 else None, axis='columns')\n\ndjt_win = [] \nhrc_win = []\n\nfor row in dt_counties:\n    if row is None:\n        continue\n    if row[2] == 'Donald Trump':\n        djt_win.append(row[0] + ', ' + row[1].replace(' County', ''))\n    elif row[2] == 'Hillary Clinton':\n        hrc_win.append(row[0] + ', ' + row[1].replace(' County', ''))\n    else:\n        print(row[2])    # No other candidates received the majority of a county in the general election","c6a589c9":"h = covid_data.query('st_county in @hrc_win')\nd = covid_data.query('st_county in @djt_win')\n\nhrc_t,  djt_t  = new_cases(h, d)\nhrc_pc, djt_pc = new_cases_per_capita(h, d, census_data)\nprint(hrc_pc)","89f3fb32":"print(covid_data.county.unique())","0de582f8":"f3 = make_subplots(rows=2, cols=2, subplot_titles=(\"Hillary Clinton - New Cases\", \"Donald Trump - New Cases\", \"Hillary Clinton - New Cases Per Capita\",\"Donald Trump - New Cases Per Capita\"), shared_yaxes=True)\nf3.update_layout(width=800, height=800, showlegend=False, xaxis_showgrid=False, yaxis_showgrid=False, bargap=0, title_text=\"New Cases by 2016 Presidential Election Results (by County)\")\n\nf3.add_trace(go.Bar(x=hrc_t.index,  y=hrc_t.values), 1, 1)\nf3.add_trace(go.Bar(x=djt_t.index,  y=djt_t.values), 1, 2)\nf3.add_trace(go.Bar(x=hrc_pc.index, y=hrc_pc.values), 2, 1)\nf3.add_trace(go.Bar(x=djt_pc.index, y=djt_pc.values), 2, 2)\n\nf3.show()","27eafc20":"gov2016 = pd.read_csv('..\/input\/us-state-office-election-returns-2016\/stateoffices2016.csv',encoding=\"ISO-8859-1\").query('office == \"Governor\" or office == \"Governor and Lt. Governor\"')\ngov2017 = None\ngov2018 = pd.read_csv('..\/input\/us-state-office-election-returns-2018\/county_2018.csv',encoding=\"ISO-8859-1\").query('office == \"Governor\" or office == \"Governor and Lt. Governor\"')\ngov2019 = None","4507ab6a":"cand_mov1 = gov2016.groupby(['state', 'party']).apply(lambda r: r.candidatevotes.sum() \/ r.totalvotes).drop_duplicates()\ncand_mov2 = gov2018.groupby(['state', 'party']).apply(lambda r: r.candidatevotes \/ r.totalvotes).drop_duplicates()\n\ncand_mov = pd.concat([cand_mov1, cand_mov2], sort=False)\n\nst_races = {}\nfor st in [*gov2016.state.unique(), *gov2018.state.unique()]:\n    st_races[st] = {}\n    \nfor r in cand_mov.index:\n    st_races[r[0]][r[1]] = cand_mov[r]","c175b6f0":"rep_states = []\ndem_states = []\n\ni = 1\nfor k in st_races.keys():\n    t1 = max(st_races[k], key=st_races[k].get)\n    if t1 == 'republican':\n        rep_states.append(k)\n    elif t1 == 'democrat':\n        dem_states.append(k)\n    else:\n        print('Non-bipartisan party majority:', k, st_races[k])   # Issue with NY, we'll have to fix later","e0b2fd45":"rep, dem = new_cases(covid_data.query('state in @rep_states'), covid_data.query('state in @dem_states'))\n\nf4 = make_subplots(rows=2, cols=2, subplot_titles=(\"Democratic Governors\", \"Republican Governors\", \"PLACEHOLDER\", \"PLACEHOLDER\"), shared_yaxes=True)\n\nf4.add_trace(go.Bar(x=dem.index, y=dem.values), 1, 1)\nf4.add_trace(go.Bar(x=rep.index, y=rep.values), 1, 2)\nf4.add_trace(go.Bar(x=dem.index, y=dem.values), 2, 1)\nf4.add_trace(go.Bar(x=rep.index, y=rep.values), 2, 2)\n\nf4.update_layout(width=800, height=800, \n                 showlegend=False, bargap=0)\n\nf4.update_yaxes(title_text=\"New Cases - Total\", row=1, col=1)\nf4.update_yaxes(title_text=\"New Cases - Per Capita\", row=2, col=1)\n\nprint(\"This graph is misleading until I get all states in - I believe I'm missing mostly democratic states, which would make their cases seem significantly lower then it should be.\")\n# f4.show()","5d6fa457":"rep2, dem2 = new_cases(covid_data.query('state in @rep_states'), covid_data.query('state in @dem_states'))\n\nf5 = make_subplots(rows=2, cols=2, subplot_titles=(\"Democratic Candidates\", \"Republican Candidates\", \"PLACEHOLDER\", \"PLACEHOLDER\"), shared_yaxes=True)\n\nf5.add_trace(go.Bar(x=dem2.index, y=dem2.values), 1, 1)\nf5.add_trace(go.Bar(x=rep2.index, y=rep2.values), 1, 2)\nf5.add_trace(go.Bar(x=dem2.index, y=dem2.values), 2, 1)\nf5.add_trace(go.Bar(x=rep2.index, y=rep2.values), 2, 2)\n\nf5.update_layout(width=800, height=800, \n                 showlegend=False, bargap=0)\n\nf5.update_yaxes(title_text=\"New Cases - Total\", row=1, col=1)\nf5.update_yaxes(title_text=\"New Cases - Per Capita\", row=2, col=1)\n\nprint()\n# f5.show()","15dc5dea":"# COVID-19 Data","2c13fef8":"### Selecting and graphing a select group of states.","d281ab11":"### By Party of Winning Candidate (County-level)","9ba8c1a6":"# Project Partisan: COVID-19 in the US By Political Ideology\n\nVisuals of new COVID-19 infections in the US based on recent election results. Inspiration from NY Times visuals.\n\n### Elections Considered:\n- 2016 Presidential Election\n- 2016, 2017, 2018, 2019 Gubernatorial Elections\n\n# Left to-do\n- **Presidential**\n    - [ ] Per capita graphs\n    - [ ] Chip away at some missing county-level data in per cap calculations\n- **Gubernatorial**\n    - [ ] 2017 and 2019 election data (2 states in 2017 and ~6 in 2019?)\n    - [ ] New York 'total votes' data\n    - [ ] County-level graphs\n    - [ ] Per capita graphs\n- **Etc**\n    - [ ] Plot what states and what counties are selected for each map (geospacial?)\n    - [ ] Performance is pretty bad - should be able to optimize a lot","94ac30eb":"### By Party of Winning Candidate (State-level)","fb15354e":"# Gubinatorial Election Data","b71bf561":"# Presidential Election Data","084ebf8c":"## Cleaning\n\nFirst, lets build up a list of the current governors and their margin of victory by county, as we already have in the 2016 presidential election data. It may be advisable to port this out into a seperate script\/dataset."}}