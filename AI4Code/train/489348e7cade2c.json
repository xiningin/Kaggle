{"cell_type":{"dba8399b":"code","4b1e108b":"code","29244f80":"code","5f13aed1":"code","20fa2809":"code","f1cc260e":"code","3ff8338f":"code","0d4ca000":"code","ca642976":"code","3a06fff5":"code","08f1cec3":"code","7f51d571":"code","34dbd167":"code","0430d915":"code","2f7318e5":"code","301e2599":"code","a702a7b7":"code","8649f238":"code","653924b2":"code","3dcc4938":"code","b3c97b1a":"code","e9770587":"code","cc11a42a":"code","c5a1131c":"code","149704c0":"code","15111c90":"code","e825cba2":"code","80dd202e":"code","e1ca4f0e":"code","9ddf7cea":"code","51441a44":"code","1e7300fa":"code","5e1b1b12":"code","a98ded53":"code","ee700c39":"code","fb92f56d":"code","8d23dc2d":"code","e82070f8":"code","17fbbe12":"code","6862688d":"code","23637921":"code","29d414b4":"code","8eeb6955":"code","eb3024f7":"code","5a466278":"code","1fe9eebd":"code","57605cf5":"code","7b244821":"code","ca32ee8b":"code","ae5f235a":"code","efc00904":"code","1b3358c9":"code","aab269b1":"code","663c4292":"markdown","2e5718af":"markdown","a7275b56":"markdown","cb6195f0":"markdown","781722ad":"markdown","94f019af":"markdown","83658540":"markdown","55272c35":"markdown","783b725a":"markdown","f71127f7":"markdown","60f0a6e7":"markdown","15cfad20":"markdown","04467610":"markdown","a52a1ca1":"markdown","83489a68":"markdown","4af6f9c7":"markdown","9f97bd59":"markdown","585c0cf3":"markdown","5b40ea30":"markdown","4ae33e16":"markdown","b88e2e9f":"markdown","342db533":"markdown","bba09185":"markdown","02802836":"markdown","41a36151":"markdown"},"source":{"dba8399b":"# Install wget to download the data\n!pip install wget","4b1e108b":"# Import neccessary package\nimport os\nimport pandas as pd\nimport wget\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n\n%config InlineBackend.figure_format = 'retina' #high resolution for rendered images on notebook\n\n# Map visualization\nimport folium\nimport altair as alt\n\n# Plotly\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True) # Required to use plotly offline in jupyter notebook\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_white\"\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","29244f80":"# Remove on the downloaded csv files (new data everyday from the CSSEGI)\n! rm *.csv\n\n# The updated data from the Johns Hopkins University:\n# global confirm cases and death cases:\nurls = ['https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv', \n        'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv']\n\nfor url in urls:\n    filename = wget.download(url)\n# data will be in \/kaggle\/working folder","5f13aed1":"# Read the dataset\ncases_df = pd.read_csv('time_series_covid19_confirmed_global.csv')\ndeath_df = pd.read_csv('time_series_covid19_deaths_global.csv')\ncases_df.head()","20fa2809":"death_df.head()","f1cc260e":"## General information about the data\n\n# print(cases_df.shape)\n# print(\"All columns:\", cases_df.columns)\n# print(\"Types:\", cases_df.dtypes)\n\n# cases_df.describe(include='all')\n\n# ## Missing values ?\n# cases_df.info()\n# cases_df.isnull().sum().sort_values(ascending=False)\n\n# => Only missing value in Province\/State","3ff8338f":"## Combine Confirmed and Death Cases:\ndates = cases_df.columns[4:]\ncases_df_cleanup = cases_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                value_vars = dates, var_name = 'Date', value_name = 'Confirmed Cases')\ndeath_df_cleanup = death_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],\n                                value_vars = dates, var_name = 'Date', value_name = 'Deaths')\ndata = pd.concat([cases_df_cleanup, death_df_cleanup['Deaths']], axis = 1, sort = False)\ndata.head()","0d4ca000":"data.columns","ca642976":"len(data['Province\/State'].unique())","3a06fff5":"## Correct the values in 'Province\/State' \n##(remove the 'Recovered' values and the \",\" in 'Bonaire, Sint Eustatius and Saba' to avoid redundancy)\n\ndata = data[data['Province\/State'].str.contains('Recovered') != True]\ndata = data[data['Province\/State'].str.contains(',') != True]","08f1cec3":"len(data['Province\/State'].unique())","7f51d571":"len(data['Country\/Region'].unique())","34dbd167":"## Checking some country names\ndata[data['Country\/Region'] == 'Taiwan*']\n#data[data['Country\/Region'] == \"Cote d'Ivoire\"]","0430d915":"## Changing the country name for using the package 'pycoutry_convert'\n# Dict to change:\ncountry = {'US':'USA', \n           'Korea, South':'South Korea',\n           'Taiwan*': 'Taiwan',\n           'Congo (Kinshasa)': 'Democratic Republic of the Congo',\n           \"Cote d'Ivoire\": \"C\u00f4te d'Ivoire\",\n           'Reunion': 'R\u00e9union',\n           'Congo (Brazzaville)': 'Republic of the Congo',\n           'Bahamas, The': 'Bahamas',\n           'Gambia, The': 'Gambia'\n          }\nfor old, new in country.items():\n    data['Country\/Region'] = data['Country\/Region'].replace(old, new)","2f7318e5":"## Checking the result of changing some country names\n#data[data['Country\/Region'] == 'Taiwan']\ndata[data['Country\/Region'] == \"Bahamas\"]","301e2599":"len(data['Country\/Region'].unique())","a702a7b7":"## Show all of the data from China\n#data.loc[data['Country\/Region'] == 'China']\n\n## Show the specific data that is wrong (according to literature)\ndata[(data['Province\/State'] == 'Hubei') & (data['Date'] == '2\/12\/20')] ","8649f238":"## Fixing wrong data in a certain date in 'Hubei', China\n\n## fixing function\ndef fixing_value(date, region, value_name, new_value):\n    for key, val in new_value.items():\n        data.loc[(data['Date'] == date) & (data[region] == key), value_name] = val\n# fix data       \nhubei_feb12 = {'Hubei':34874}\nfixing_value('2\/12\/20', 'Province\/State', 'Confirmed Cases', hubei_feb12)\n\n#checking the fixing effect\ndata[(data['Province\/State'] == 'Hubei') & (data['Date'] == '2\/12\/20')] ","653924b2":"### Convert date from string to datetime type\n\ndata['Date'] = pd.to_datetime(data['Date'])\n# need to convert 'Date' data from string to datetime,\n# sort by date again. Otherwise 2\/1\/20 then 2\/10\/20 => wrong sorting\n#data['Date'] = data['Date'].dt.strftime('%m\/%d\/%Y')\ndata['Date'] = data['Date']\ndata.head()","3dcc4938":"data.to_csv('global_covid19cases.csv', index = False)","b3c97b1a":"## Show all of the data from US\n#data.loc[data['Country\/Region'] == 'US']\n\n## Extract the specific country data\nus_data = data[data['Country\/Region'] == 'US']\nus_data","e9770587":"## Extract the final date in the dataframe\ndate = data['Date'].iloc[-1]\n\nmost_recent_data = data[data['Date'] == date]\nprint('Globally COVID-19 data on date {}:\\n'.format(date))\nprint('Confirmed Cases:   {:,}'.format(most_recent_data['Confirmed Cases'].sum()))\nprint('Deaths Cases:      {:,}'.format(most_recent_data['Deaths'].sum()))","cc11a42a":"color_case = 'YlOrRd'\ncolor_death = 'YlOrRd'\n# color reference\n#cmaps['Sequential'] = [\n#            'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n#            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n#            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn']\n\ncountry_cases = most_recent_data.groupby('Country\/Region')['Confirmed Cases', 'Deaths'].sum().reset_index()\ncountry_cases.sort_values('Confirmed Cases', ascending = False)\\\n            .style.background_gradient(cmap = color_case, subset = ['Confirmed Cases'])\\\n            .background_gradient(cmap = color_death, subset = ['Deaths'])","c5a1131c":"## SINGLE VALUE GRAPH (** Using altair (alt) for this graph)\n## list of parameters\nbar_color = '#da635eff'\nsort_value = 'Confirmed Cases' # 'Deaths'\/'Recovered'\ny_axis = 'Country\/Region'# 'Province\/State'\ntop_num = 10 # number of country\nthreshold = 1000\n\n## preparing data for graph (extracting top countries)\ntop10_country = country_cases.sort_values(sort_value, ascending = False).head(top_num)\n# Can also choose not top_num but a cutoff threshold of sort_value\n#top10_country = country_cases[country_cases[sort_value] > threshold].sort_values(sort_value, ascending = False)\n\n## drawing graph\ndef drawing_single_value_bar_graph(data, bar_color, sort_value, y_axis, top_num):\n    \n    bars = alt.Chart(data)\\\n        .mark_bar(color = bar_color,cornerRadiusTopLeft = 3, cornerRadiusTopRight=3, size = 20, opacity = 0.7)\\\n        .encode(\n                    x = '{}:Q'.format(sort_value),\n                    y = alt.Y('{}:O'.format(y_axis), sort = '-x'))\\\n        .properties( \n            title = {\n            \"text\":['Top {}: {}'.format(y_axis, sort_value)],\n            \"subtitle\":['*Updated on {}'.format(date)],\n            \"fontSize\":15,\n            \"fontWeight\": 'bold',\n            \"font\":'Courier New',\n            }\n        )\n    # dx = 3 Nudges text to right so it doesn't appear on top of the bar\n    text = bars.mark_text(align = 'left', baseline = 'middle',dx = 3).encode(text = '{}:Q'.format(sort_value))\n\n    return (bars + text).properties( height = 400, width = 800)\n    \n\nfig = drawing_single_value_bar_graph(top10_country, bar_color, sort_value, y_axis, top_num)\nfig","149704c0":"## Using most_recent_data data\nmost_recent_data.head()","15111c90":"##### *********  MAP - STYLE 1  *********\n# Using folium\n# Data: Using most_recent_data dataframe\n\n## parameter for map\nmapstyle = 'CartoDB positron'\nline_color = '#da635eff'\nfill_color = '#da635eff'\nfill_opacity = 0.6\n# other styles: 'OpenStreetMap', \"Stamen Terrain\u201d, \u201cStamen Toner\u201d, \u201cStamen Watercolor\u201d\n\n## create map\nworld_map = folium.Map(location = [10,0], zoom_start = 2, max_zoom = 8, min_zoom = 2, tiles = mapstyle)\n## define detail of the map\nfor lat, long, case, name in zip(most_recent_data['Lat'], most_recent_data['Long'], most_recent_data['Confirmed Cases'],\\\n                                most_recent_data['Country\/Region']):\n    folium.CircleMarker([lat, long], radius = (int((np.log(case+1.00001)))+0.2),\n                       popup = (\"<h5 style='text-align:center;font-weight: bold'>\" + str(name).capitalize()+ \"<\/h5>\" + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(case) + '<br>'),\\\n                       color = line_color, weight= 1.5, \\\n                        fill_color = fill_color, fill_opacity = fill_opacity).add_to(world_map)\n# opacity = fill_opacity #opacity of the line \n \n## Save map\nworld_map.save(\".\/world_map.html\")\nworld_map\n","e825cba2":"##### *********  MAP - STYLE 2  *********\n# Using choropleth\n# Data: Using country_cases dataframe (log10 scale)\n\n## list of parameters\ncolor = '#da635eff' #'Reds'\nmap_value = 'Confirmed Cases' # 'Deaths'\/'Recovered'\n\n## function to drawing graph\ndef drawing_global_heatmap(country_cases, map_value, color):\n    temp_df = country_cases[['Country\/Region',map_value]]\n\n    fig = px.choropleth(temp_df, locations=\"Country\/Region\",\n                        color = np.log10(temp_df[map_value] + 1), # + 1 to avoid divided by 0, log0\n                        hover_name = \"Country\/Region\", # column to add to hover information\n                        hover_data = [map_value],\n                        color_continuous_scale = px.colors.sequential.Plasma,locationmode = \"country names\")\n    fig.update_geos(fitbounds = \"locations\", visible = False)\n    fig.update_layout(title_text = \"{} Heat Map (Log Scale)\".format(map_value), title_x = 0.5)\n    fig.update_coloraxes(colorbar_title = \"{}(Log Scale)\".format(map_value),colorscale=\"Reds\")\n    return fig\n## drawing graph\nfig = drawing_global_heatmap(country_cases, map_value, color)\n# fig.to_image(\"Global Heat Map {map_value}.png\")\nfig.show()","80dd202e":"## drawing graph\nfig = drawing_global_heatmap(country_cases,'Deaths', 'Reds')\n# fig.to_image(\"Global Heat Map {map_value}.png\")\nfig.show()","e1ca4f0e":"## Using datafram 'data'\ndata.head()\n# Note: this dataframe 'data' has detail data of some province\/state in the same country.\n# If analyzing country data: Must use groupby('Country\/Region') \n# to sum the cases of all the Province\/State of the same country, \n# for example, Canada:\ndata[data['Country\/Region'] == \"Canada\"]","9ddf7cea":"## Sum up all the cases in the world by date\nworld_cases_all_time = data.groupby('Date')['Confirmed Cases', 'Deaths'].sum().sort_values('Date').reset_index()\n\n# Adding 'New Confirmed Cases' column\nworld_cases_all_time['New Confirmed Cases'] = world_cases_all_time['Confirmed Cases'] - world_cases_all_time['Confirmed Cases'].shift(1)\n# # Adding 'Mortality' column\n# world_cases_all_time['Mortality'] = world_cases_all_time['Deaths']\/world_cases_all_time['Confirmed Cases']\n\n# Checking the adding\nworld_cases_all_time.head()\n#world_cases_all_time.tail()\n","51441a44":"## For good x-axis display (only show day and year)\n# world_cases_all_time['Date'] = pd.to_datetime(world_cases_all_time['Date'])\n# world_cases_all_time['Date'] = world_cases_all_time['Date'].dt.strftime('%m\/%d')\n##### *********  GRAPH - STYLE 1 - LINE  *********\n\n# Combine all the data together for drawing graph\nworld_cases_all_time_melt = world_cases_all_time.melt(id_vars = ['Date'], \n                                    value_vars = ['Confirmed Cases', 'Deaths', 'New Confirmed Cases'])\n#world_cases_all_time_melt.head()\n\nfig = px.line(world_cases_all_time_melt, x=\"Date\", y=\"value\", color='variable')\nfig.update_layout(title = {'text': 'Worldwide Confirmed\/Death Cases Over Time', 'x': 0.5},\n                   xaxis_title = 'Date (2020)',\n                   yaxis_title = 'Cases',\n                 legend = {'title': None})\n#fig.update_xaxes(dtick = 10) # changing the distance between ticks\nfig.show()","1e7300fa":"##### *********  GRAPH - STYLE 2 - BAR  *********\n# Using the dataframe world_cases_all_time\n# 'Date', Confirmed Cases', 'Deaths', 'New Confirmed Cases'\n\nfig = go.Figure(data=[\n    go.Bar(name = 'Confirmed Cases', x = world_cases_all_time['Date'], y = world_cases_all_time['Confirmed Cases']),\n    go.Bar(name = 'Deaths', x = world_cases_all_time['Date'], y = world_cases_all_time['Deaths'])\n])\n\nfig.update_layout(title = {'text': 'Worldwide Confirmed\/Death Cases Over Time', 'x': 0.5},\n                   xaxis_title = 'Date (2020)',\n                   yaxis_title = 'Cases',\n                 legend = {'title': None})\nfig.show()","5e1b1b12":"## Sum up all the cases for each country by date\ncountries_cases_all_time = data.groupby(['Date', 'Country\/Region'])['Confirmed Cases', 'Deaths'].sum().sort_values('Date').reset_index()\n\n# checking the grouping\ncountries_cases_all_time.tail()","a98ded53":"world_cases_all_time","ee700c39":"\n##### *********  MAP - STYLE 2 WITH ANIMATION  *********\n# Using choropleth\n# Data: Using country_cases dataframe (log10 scale)\n\n## list of parameters\ncolor = '#da635eff' #'Reds'\nmap_value = 'Confirmed Cases' # 'Deaths'\/'Recovered'\n\n## function to drawing graph\ntemp_df = countries_cases_all_time[['Date', 'Country\/Region','Confirmed Cases']]\ntemp_df['Date'] = temp_df['Date'].dt.strftime('%m\/%d\/%Y')\nfig = px.choropleth(temp_df, locations = \"Country\/Region\", locationmode = 'country names', \n                     color = np.log10(temp_df[map_value] + 1), \n                     hover_name = \"Country\/Region\", projection=\"mercator\",\n                     animation_frame = \"Date\", width = 1000, height = 800,\n                     color_continuous_scale = px.colors.sequential.Viridis,\n                     title = 'The Spread of COVID-19 Cases Across The World')\n\n#Showing the figure\n#fig.update_geos(fitbounds = \"locations\", visible = False)\nfig.update(layout_coloraxis_showscale=True)\nfig.update_coloraxes(colorbar_title = \"{} (Log Scale)\".format(map_value), colorscale = \"Reds\")\npy.offline.iplot(fig)\n# fig.to_image(\"Global Heat Map {map_value}.png\")","fb92f56d":"## Sum up all the cases for each country by date\ncountries_cases_all_time = data.groupby(['Date', 'Country\/Region'])['Confirmed Cases', 'Deaths'].sum().sort_values('Date').reset_index()\n\n# checking the grouping\ncountries_cases_all_time.tail()","8d23dc2d":"top10_country = country_cases.sort_values(sort_value, ascending = False).head(10)['Country\/Region'].unique()\ntop10_country_cases = countries_cases_all_time[countries_cases_all_time['Country\/Region'].isin(top10_country)]\ntop10_country_cases","e82070f8":"## Graph top 10 country, y = confirmed case\nfig = px.line(top10_country_cases,\n              x='Date', y='Confirmed Cases', color='Country\/Region',\n              title=f'Confirmed Cases for top 10 country')\nfig.update_layout(legend = {'title': None})\n#fig.update_xaxes(dtick = 10)\nfig.show()","17fbbe12":"## Graph top 10 country, y = log(confirmed case)\nfig = px.line(top10_country_cases,\n              x='Date', y='Confirmed Cases', color='Country\/Region',\n              title=f'Confirmed Cases for Top 10 Country')\nfig.update_layout(legend = {'title': None},\n                 xaxis_title = 'Date', yaxis_title = 'Log(Cases)')\n#fig.update_xaxes(dtick = 10)\nfig.update_layout(yaxis_type=\"log\")\nfig.show()","6862688d":"target_countries = np.array(['USA', 'United Kingdom', 'Spain', 'China', 'Italy', 'Germany',\n                             'Singapore', 'Japan','South Korea', 'Vietnam'])\ntarget_country_cases = countries_cases_all_time[countries_cases_all_time['Country\/Region'].isin(target_countries)]\nfig = px.line(target_country_cases,\n              x = 'Date', y = 'Confirmed Cases', color = 'Country\/Region',\n              title = f'Confirmed Cases for target countries')\nfig.update_layout(legend = {'title': None})\n#fig.update_xaxes(dtick = 10)\nfig.show()","23637921":"target_countries = np.array(['USA', 'United Kingdom', 'Spain', 'China', 'Italy', 'Germany',\n                             'Singapore', 'Japan','South Korea', 'Vietnam'])\ntarget_country_cases = countries_cases_all_time[countries_cases_all_time['Country\/Region'].isin(target_countries)]","29d414b4":"## Comparison since 50 cases in each country\n\nthreshold = 50 # 50 cases\ncountries_since_50cases = pd.DataFrame(columns = ['Date', 'Country\/Region',\n                                                 'Confirmed Cases', 'Deaths', 'Date Since 50 Cases', 'Confirmed Cases (log10)'])\nfor country_name in target_countries:\n    # Extract country data:\n    country = target_country_cases[target_country_cases['Country\/Region'] == country_name]\n    country = country[country['Confirmed Cases'] >= threshold]\n    start_date = country['Date'].min()\n    country['Date Since 50 Cases'] = (country['Date'] - start_date)\/pd.Timedelta('1 days')\n    country['Confirmed Cases (log10)'] = np.log10(country['Confirmed Cases'])\n    countries_since_50cases = countries_since_50cases.append(country)\ncountries_since_50cases","8eeb6955":"### HOW NUMBER OF COVID-19 CASES INCREASES SINCE 50 CASES IN EACH COUNTRY\n\n## Draw graph for different target countries:\nfig = px.line(countries_since_50cases,\n              x = 'Date Since 50 Cases', y = 'Confirmed Cases (log10)', color = 'Country\/Region',\n             hover_name = 'Country\/Region', hover_data = ['Date Since 50 Cases', 'Confirmed Cases'])\n## Update layout\nfig.update_layout(title = {'text': '<b>Number of Confirmed Cases by Country Since 50 Cases<\/b>',\n                           'x': 0.5},\n                   xaxis_title = '<b>Days Since 50 Cases<\/b>',\n                   yaxis_title = '<b>Confirmed Cases<\/b>',\n                     legend = {'title': None})\n\n## Add reference lines\n# Case doubles every day\nx1 = np.arange(0, 15)\ny1 = np.log10(2**(x1 + np.log2(50)))\nfig.add_trace(go.Scatter(x = x1, y = y1, mode='lines',\n                         name = 'Case doubles every day',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n# Case doubles every 3 days\nx3 = np.arange(0, 50)\ny3 = np.log10(2**(x3\/3 + np.log2(50)))\nfig.add_trace(go.Scatter(x = x3, y = y3, mode='lines',\n                         name = 'Case doubles every 3 days',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n# Case doubles every 6 days\nx6 = np.arange(0, 80)\ny6 = np.log10(2**(x6\/6 + np.log2(50)))\nfig.add_trace(go.Scatter(x = x6, y = y6, mode='lines',\n                         name = 'Case doubles every 6 days',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n# Case doubles every 2 weeks\nx14 = np.arange(0, 80)\ny14 = np.log10(2**(x14\/14 + np.log2(50)))\nfig.add_trace(go.Scatter(x = x14, y = y14, mode='lines',\n                         name = 'Case doubles every 2 weeks',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n## Add annotation for reference lines \nfig.update_layout(\n    annotations = [\n        dict(\n            x = x1[-1],\n            y = y1[-1],\n            text = \"Case doubles every day\"\n        ),\n        dict(\n            x = x3[-1],\n            y = y3[-1],\n            text = \"Case doubles every 3 days\"\n        ),\n        dict(\n            x = x6[-1],\n            y = y6[-1],\n            text = \"Case doubles every 6 days\"\n        ),\n        dict(\n            x = x14[-1],\n            y = y14[-1],\n            text = \"Case doubles every 2 weeks\"\n        )\n    ]\n)\n\n## Set y-axis to real number of cases (instead of log(cases)) to be more clear.\nfig.update_yaxes(\n    ticktext=[\"100 \", \"1K \", \"10K \", \"100K \", \"1M \"],\n    tickvals=[2, 3, 4, 5, 6],\n)\n\nfig.show()","eb3024f7":"## Comparison since 100 cases in each country\n\nthreshold = 100 # 100 cases\ncountries_since_100cases = pd.DataFrame(columns = ['Date', 'Country\/Region',\n                                                 'Confirmed Cases', 'Deaths', 'Date Since 100 Cases', 'Confirmed Cases (log10)'])\n\n# Record information for text label to the right end of every trace\nx_pos = []\ny_pos = []\nlabel = []\nfor country_name in target_countries:\n    # Extract country data:\n    label.append(country_name)\n    country = target_country_cases[target_country_cases['Country\/Region'] == country_name]\n    country = country[country['Confirmed Cases'] >= threshold]\n    start_date = country['Date'].min()\n    country['Date Since 100 Cases'] = (country['Date'] - start_date)\/pd.Timedelta('1 days')\n    country['Confirmed Cases (log10)'] = np.log10(country['Confirmed Cases'])\n    x_pos.append(country['Date Since 100 Cases'].iloc[-1] + 2)\n    y_pos.append(country['Confirmed Cases (log10)'].iloc[-1])\n    countries_since_100cases = countries_since_100cases.append(country)\ncountries_since_100cases","5a466278":"### HOW NUMBER OF COVID-19 CASES INCREASES SINCE 100 CASES IN EACH COUNTRY\n\n\n## Draw graph for different target countries:\nfig = px.line(countries_since_100cases,\n              x = 'Date Since 100 Cases', y = 'Confirmed Cases (log10)', color = 'Country\/Region',\n              color_discrete_sequence = px.colors.qualitative.Pastel1,\n             hover_name = 'Country\/Region', hover_data = ['Date Since 100 Cases', 'Confirmed Cases'])\n## Update layout\nfig.update_layout(title = {'text': '<b>Number of Confirmed Cases by Country Since 100 Cases<\/b>',\n                           'x': 0.5},\n                   xaxis_title = '<b>Days Since 100 Cases<\/b>',\n                   yaxis_title = '<b>Confirmed Cases<\/b>',\n                     legend = {'title': None})\n\n## Add reference lines\n# Case doubles every day\nx1 = np.arange(0, 15)\ny1 = np.log10(2**(x1 + np.log2(100)))\nfig.add_trace(go.Scatter(x = x1, y = y1, mode='lines',\n                         name = 'Case doubles every day',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n# Case doubles every 3 days\nx3 = np.arange(0, 50)\ny3 = np.log10(2**(x3\/3 + np.log2(100)))\nfig.add_trace(go.Scatter(x = x3, y = y3, mode='lines',\n                         name = 'Case doubles every 3 days',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n# Case doubles every 6 days\nx6 = np.arange(0, 80)\ny6 = np.log10(2**(x6\/6 + np.log2(100)))\nfig.add_trace(go.Scatter(x = x6, y = y6, mode='lines',\n                         name = 'Case doubles every 6 days',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n# Case doubles every 2 weeks\nx14 = np.arange(0, 80)\ny14 = np.log10(2**(x14\/14 + np.log2(100)))\nfig.add_trace(go.Scatter(x = x14, y = y14, mode='lines',\n                         name = 'Case doubles every 2 weeks',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n# Case doubles every 1 month\nx30 = np.arange(0, 80)\ny30 = np.log10(2**(x30\/30 + np.log2(100)))\nfig.add_trace(go.Scatter(x = x30, y = y30, mode='lines',\n                         name = 'Case doubles every 1 month',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(dash ='dash', width = 2,\n                                   color = ('rgb(200, 200, 200)'))))\n\n## Add a text label to the right end of every trace. Most of the code below  \n    # is adding specific offsets y position because some labels overlapped. \n# fig.add_trace(go.Scatter(\n#     x = x_pos, y= y_pos, mode = 'text', text = label\n# ))\n\n## Add Vietnam trace\ndf_vietnam = countries_since_100cases[countries_since_100cases['Country\/Region'] == 'Vietnam']\n\nfig.add_trace(go.Scatter(x = df_vietnam['Date Since 100 Cases'], y = df_vietnam['Confirmed Cases (log10)'], mode='lines',\n                         name = 'Vietnam',\n                         hoverinfo = \"none\", showlegend = False,\n                         line = dict(width = 4,\n                                   color = ('red'))))\n## Add annotation for reference lines \nfig.update_layout(\n    annotations = [\n        dict(\n            x = x1[-1],\n            y = y1[-1],\n            text = \"Case doubles every day\"\n        ),\n        dict(\n            x = x3[-1],\n            y = y3[-1],\n            text = \"Case doubles every 3 days\"\n        ),\n        dict(\n            x = x6[-1],\n            y = y6[-1],\n            text = \"Case doubles every 6 days\"\n        ),\n        dict(\n            x = x14[-1],\n            y = y14[-1],\n            text = \"Case doubles every 2 weeks\"\n        ),\n        dict(\n            x = x30[-1],\n            y = y30[-1],\n            text = \"Case doubles every 1 month\"\n        ),\n        ## Reference line for some countries (manually adjust since overlapped)\n        dict(\n            x = df_vietnam['Date Since 100 Cases'].iloc[-1] + 8,\n            y = df_vietnam['Confirmed Cases (log10)'].iloc[-1] + 0.02,\n            xref=\"x\",\n            yref=\"y\",\n            text = \"<b>Vietnam<\/b>\",\n            showarrow=False,align = 'right',\n            font=dict(\n            family=\"Courier New, monospace\",\n            size=16,\n            color=\"red\"\n            ),\n        )\n    ]\n)\n\n## Set y-axis to real number of cases (instead of log(cases)) to be more clear.\nfig.update_yaxes(\n    ticktext=[\"100 \", \"1K \", \"10K \", \"100K \", \"1M \"],\n    tickvals=[2, 3, 4, 5, 6],\n)\n\nfig.show()","1fe9eebd":"end_ =  countries_since_100cases['Date Since 100 Cases'].max()\nend_\nnew_df = pd.DataFrame(np.arange(0,end_ + 1))\nnew_df.columns = ['Date Since 100 Cases']\nnew_df ","57605cf5":"for country_name in target_countries:\n    #Extract each country\n    country = target_country_cases[target_country_cases['Country\/Region'] == country_name]\n    country = country[country['Confirmed Cases'] >= threshold]\n    start_date = country['Date'].min()\n    country['Date Since 50 Cases'] = (country['Date'] - start_date)\/pd.Timedelta('1 days')\n    country['Confirmed Cases (log10)'] = np.log10(country['Confirmed Cases'])\n    # New column for each country\n    new_df.join(country['Confirmed Cases (log10)'], lsuffix='_caller', rsuffix='_other')\n    \nnew_df","7b244821":"countries_since_100cases.head()","ca32ee8b":"### Need to separate each country as x and y\nfor country_name in target_countries:\n    country = countries_since_100cases[countries_since_100cases['Country\/Region'] == country_name]\n    x = country['Date Since 100 Cases']\n    y = country['Confirmed Cases (log10)']","ae5f235a":"country_name = 'USA'\ncountry = countries_since_100cases[countries_since_100cases['Country\/Region'] == country_name]\nx_USA = country['Date Since 100 Cases']\ny_USA = country['Confirmed Cases (log10)']","efc00904":"## NOT IN USE - JUST A REFERENCE\n## function for a reference line\n# def create_ref_line(threshold, num_days, x_limit, name):\n#     x = np.arange(0, x_limit)\n#     y = np.log10(2**(x\/num_days + np.log2(threshold)))\n#     ref_line = pd.DataFrame(columns = ['x', 'y','Name of Reference Line'])\n#     ref_line['x'] = x\n#     ref_line['y'] = y\n#     ref_line['Name of Reference Line'] = name\n#     return ref_line\n\n# threshold = 100\n# ## Add lines\n# line1 = create_ref_line(threshold, 1, 15, 'Case doubles every day')\n# line3 = create_ref_line(threshold, 3, 50, 'Case doubles every 3 days')\n# line6 = create_ref_line(threshold, 6, 80, 'Case doubles every 6 days')\n# line14 = create_ref_line(threshold, 14, 80, 'Case doubles every 2 weeks')\n# line30 = create_ref_line(threshold, 30, 80, 'Case doubles every month')","1b3358c9":"### HOW NUMBER OF COVID-19 CASES INCREASES SINCE 100 CASES IN EACH COUNTRY\n## Using FigureWidget\n\nthreshold = 100 # 100 cases\n\n# Reference line:\ndef create_line(threshold, num_days, x_limit):\n    return [0, np.log10(2**(0 + np.log2(threshold))), x_limit, \n            np.log10(2**(x_limit\/num_days + np.log2(threshold)))]\nline1 = create_line(100, 1, 15) # 'Case doubles every day'\nline3 = create_line(threshold, 3, 50) # 'Case doubles every 3 days'\nline6 = create_line(threshold, 6, 80) # 'Case doubles every 6 days'\nline14 = create_line(threshold, 14, 80) # 'Case doubles every 2 weeks'\nline30 = create_line(threshold, 30, 80) # 'Case doubles every month'\n    \nfig = go.FigureWidget()\nfig.layout.hovermode = 'closest'\nfig.layout.hoverdistance = -1 #ensures no \"gaps\" for selecting sparse data\ndefault_linewidth = 2\nhighlighted_linewidth_delta = 2\n\n\n\n## Update layout\nfig.update_layout(title = {'text': '<b>Number of Confirmed Cases by Country Since 100 Cases<\/b>',\n                           'x': 0.5},\n                   xaxis_title = '<b>Days Since 100 Cases<\/b>',\n                   yaxis_title = '<b>Confirmed Cases<\/b>',\n                     legend = {'title': None})\n\n## Add country data lines\nannotation_list = [] #add annotation to be use, lists can contain different variable types\nfor country_name in target_countries:\n    country = countries_since_100cases[countries_since_100cases['Country\/Region'] == country_name]\n    x = country['Date Since 100 Cases']\n    y = country['Confirmed Cases (log10)']\n    annotation_list.extend([x.iloc[-1], y.iloc[-1], country_name])\n    fig.add_trace(go.Scatter(x = x, y = y, mode='lines',\n                         name = country_name,\n                        showlegend = False,\n                         opacity = 0.8,\n                         line = dict(dash = 'solid', width = 2,\n                                   color = 'rgb(200, 200, 200)')))\nfig.add_shape(\n        # Case doubles every day\n            type=\"line\",\n            x0 = line1[0],\n            y0 = line1[1],\n            x1 = line1[2],\n            y1 = line1[3],\n            line = dict(\n                color = 'rgb(200, 200, 200)',\n                width = 2,\n                dash = \"dash\",\n            )\n)\nfig.add_shape(\n        # Case doubles every 3 days\n            type=\"line\",\n            x0 = line3[0],\n            y0 = line3[1],\n            x1 = line3[2],\n            y1 = line3[3],\n            line = dict(\n                color = 'rgb(200, 200, 200)',\n                width = 2,\n                dash = \"dash\",\n            )\n)\nfig.add_shape(\n        # Case doubles every 6 days\n            type=\"line\",\n            x0 = line6[0],\n            y0 = line6[1],\n            x1 = line6[2],\n            y1 = line6[3],\n            line = dict(\n                color = 'rgb(200, 200, 200)',\n                width = 2,\n                dash = \"dash\",\n            )\n)\nfig.add_shape(\n        # Case doubles every 14 days\n            type=\"line\",\n            x0 = line14[0],\n            y0 = line14[1],\n            x1 = line14[2],\n            y1 = line14[3],\n            line = dict(\n                color = 'rgb(200, 200, 200)',\n                width = 2,\n                dash = \"dash\",\n            )\n)\nfig.add_shape(\n        # Case doubles every 1 month\n            type=\"line\",\n            x0 = line30[0],\n            y0 = line30[1],\n            x1 = line30[2],\n            y1 = line30[3],\n            line = dict(\n                color = 'rgb(200, 200, 200)',\n                width = 2,\n                dash = \"dash\",\n            )\n)\n## Add annotation for reference lines \nfig.update_layout(\n    annotations = [\n        dict(\n            x = line1[2],\n            y = line1[3],\n            # xanchor=\"right\",\n            text = \"Case doubles every day\"\n        ),\n        dict(\n            x = line3[2],\n            y = line3[3],\n            text = \"Case doubles every 3 days\"\n        ),\n        dict(\n            x = line6[2],\n            y = line6[3],\n            text = \"Case doubles every 6 days\"\n        ),\n        dict(\n            x = line14[2],\n            y = line14[3],\n            text = \"Case doubles every 2 weeks\"\n        ),\n        dict(\n            x = line30[2],\n            y = line30[3],\n            text = \"Case doubles every 1 month\"\n        )\n    ]\n)\n\n## Set y-axis to real number of cases (instead of log(cases)) to be more clear.\n# fig.update_yaxes(\n#     ticktext=[\"100 \", \"1K \", \"10K \", \"100K \", \"1M \"],\n#     tickvals=[2, 3, 4, 5, 6],\n# )\n\n# our custom event handler\ndef update_trace(trace, points, selector):\n    # this list stores the points which were clicked on\n    # in all but one event they it be empty\n    if len(points.point_inds) > 0:\n        for i in range( len(fig.data) ):\n            #fig.data[i]['line']['width'] = default_linewidth + highlighted_linewidth_delta * (i == points.trace_index)\n            if i == points.trace_index:\n                fig.data[i]['line']['color'] = 'red'\n                fig.data[i]['line']['width'] = default_linewidth + highlighted_linewidth_delta\n            else:\n                fig.data[i]['line']['color'] = 'rgb(200, 200, 200)'\n                fig.data[i]['line']['width'] = default_linewidth\n                \n# we need to add the on_click event to each trace separately       \nfor i in range( len(fig.data) ):\n    fig.data[i].on_click(update_trace)\n\n# let's show the figure \nfig","aab269b1":"### NOT IN USE, JUST A REFERENCE - ADD COUNTRY NAME TO EACH LINE ON GRAPH\n### HOW NUMBER OF COVID-19 CASES INCREASES SINCE 100 CASES IN EACH COUNTRY\n## Using FigureWidget\n\n# threshold = 100 # 100 cases\n\n# # Reference line:\n# def create_line(threshold, num_days, x_limit):\n#     return [0, np.log10(2**(0 + np.log2(threshold))), x_limit, \n#             np.log10(2**(x_limit\/num_days + np.log2(threshold)))]\n# line1 = create_line(100, 1, 15) # 'Case doubles every day'\n# line3 = create_line(threshold, 3, 50) # 'Case doubles every 3 days'\n# line6 = create_line(threshold, 6, 80) # 'Case doubles every 6 days'\n# line14 = create_line(threshold, 14, 80) # 'Case doubles every 2 weeks'\n# line30 = create_line(threshold, 30, 80) # 'Case doubles every month'\n    \n# fig = go.FigureWidget()\n# fig.layout.hovermode = 'closest'\n# fig.layout.hoverdistance = -1 #ensures no \"gaps\" for selecting sparse data\n# default_linewidth = 2\n# highlighted_linewidth_delta = 2\n\n\n\n# ## Update layout\n# fig.update_layout(title = {'text': '<b>Number of Confirmed Cases by Country Since 100 Cases<\/b>',\n#                            'x': 0.5},\n#                    xaxis_title = '<b>Days Since 100 Cases<\/b>',\n#                    yaxis_title = '<b>Confirmed Cases<\/b>',\n#                      legend = {'title': None})\n\n# ## Add country data lines\n# annotation_list = [] #add annotation to be use, lists can contain different variable types\n# x_list = []\n# y_list = []\n# for country_name in target_countries:\n#     country = countries_since_100cases[countries_since_100cases['Country\/Region'] == country_name]\n#     x = country['Date Since 100 Cases']\n#     y = country['Confirmed Cases (log10)']\n#     annotation_list.append(country_name)\n#     x_list.append(x.iloc[-1])\n#     y_list.append(y.iloc[-1])\n    \n#     #draw line\n#     fig.add_trace(go.Scatter(x = x, y = y, mode='lines',\n#                          name = country_name,\n#                         showlegend = False,\n#                          opacity = 0.8,\n#                          line = dict(dash = 'solid', width = 2,\n#                                    color = 'rgb(200, 200, 200)')))\n\n# fig.add_shape(\n#         # Case doubles every day\n#             type=\"line\",\n#             x0 = line1[0],\n#             y0 = line1[1],\n#             x1 = line1[2],\n#             y1 = line1[3],\n#             line = dict(\n#                 color = 'rgb(200, 200, 200)',\n#                 width = 2,\n#                 dash = \"dash\",\n#             )\n# )\n# fig.add_shape(\n#         # Case doubles every 3 days\n#             type=\"line\",\n#             x0 = line3[0],\n#             y0 = line3[1],\n#             x1 = line3[2],\n#             y1 = line3[3],\n#             line = dict(\n#                 color = 'rgb(200, 200, 200)',\n#                 width = 2,\n#                 dash = \"dash\",\n#             )\n# )\n# fig.add_shape(\n#         # Case doubles every 6 days\n#             type=\"line\",\n#             x0 = line6[0],\n#             y0 = line6[1],\n#             x1 = line6[2],\n#             y1 = line6[3],\n#             line = dict(\n#                 color = 'rgb(200, 200, 200)',\n#                 width = 2,\n#                 dash = \"dash\",\n#             )\n# )\n# fig.add_shape(\n#         # Case doubles every 14 days\n#             type=\"line\",\n#             x0 = line14[0],\n#             y0 = line14[1],\n#             x1 = line14[2],\n#             y1 = line14[3],\n#             line = dict(\n#                 color = 'rgb(200, 200, 200)',\n#                 width = 2,\n#                 dash = \"dash\",\n#             )\n# )\n# fig.add_shape(\n#         # Case doubles every 1 month\n#             type=\"line\",\n#             x0 = line30[0],\n#             y0 = line30[1],\n#             x1 = line30[2],\n#             y1 = line30[3],\n#             line = dict(\n#                 color = 'rgb(200, 200, 200)',\n#                 width = 2,\n#                 dash = \"dash\",\n#             )\n# )\n# ## Add annotation for reference lines \n# fig.update_layout(\n#     annotations = [\n#         dict(\n#             x = line1[2],\n#             y = line1[3],\n#             # xanchor=\"right\",\n#             text = \"Case doubles every day\"\n#         ),\n#         dict(\n#             x = line3[2],\n#             y = line3[3],\n#             text = \"Case doubles every 3 days\"\n#         ),\n#         dict(\n#             x = line6[2],\n#             y = line6[3],\n#             text = \"Case doubles every 6 days\"\n#         ),\n#         dict(\n#             x = line14[2],\n#             y = line14[3],\n#             text = \"Case doubles every 2 weeks\"\n#         ),\n#         dict(\n#             x = line30[2],\n#             y = line30[3],\n#             text = \"Case doubles every 1 month\"\n#         )\n#     ]\n# )\n\n# fig.add_trace(go.Scatter(\n#     x=x_list,\n#     y=y_list,\n#     mode=\"text\",\n#     name=\"Country name\",\n#     text=annotation_list,\n#     textposition=\"top right\",\n#     textfont=dict(\n#         color=\"crimson\")\n# ))\n# fig.update_layout(showlegend=False)\n\n# # Set y-axis to real number of cases (instead of log(cases)) to be more clear.\n# fig.update_yaxes(\n#     ticktext=[\"100 \", \"1K \", \"10K \", \"100K \", \"1M \"],\n#     tickvals=[2, 3, 4, 5, 6],\n# )\n\n# # our custom event handler\n# def update_trace(trace, points, selector):\n#     # this list stores the points which were clicked on\n#     # in all but one event they it be empty\n#     if len(points.point_inds) > 0:\n#         for i in range( len(fig.data) ):\n#             #fig.data[i]['line']['width'] = default_linewidth + highlighted_linewidth_delta * (i == points.trace_index)\n#             if i == points.trace_index:\n#                 fig.data[i]['line']['color'] = 'red'\n#                 fig.data[i]['line']['width'] = default_linewidth + highlighted_linewidth_delta\n#             else:\n#                 fig.data[i]['line']['color'] = 'rgb(200, 200, 200)'\n#                 fig.data[i]['line']['width'] = default_linewidth\n                \n# # we need to add the on_click event to each trace separately       \n# for i in range( len(fig.data) ):\n#     fig.data[i].on_click(update_trace)\n\n# # let's show the figure \n# fig","663c4292":"**E. WORLD WIDE DETAIL REPORT SINCE THE EARLY STAGE OF THE PANDEMIC - UP TO NOW**","2e5718af":"**--- NOTE ABOUT HOW TO CALCULATE THE REFERENCE LINE FOR GRAPH ---**\n\nSet threshold = 50 (for 50 cases at day 0)\n\n**1. Number of cases doubles every day:**\n\nx = 0, 1, 2, ...\n\ny = 2^(x + log2(threshold))\n=> The result of y would be: 50, 100, 200, 400, 800, ...\n\n**2. Number of cases doubles every 2 days:**\n\nx = 0, 1, 2...\n\ny = 2^(x\/2 + log2(threshold))\n=> The result of y would be: 50, 71, 100, 141, 200, 282, 400....\n\n**3. Number of cases doubles every month (30 days):**\n\nx = 0, 1, 2...\n\ny = 2^(x\/30 + log2(threshold))\n=> The result of y would be: 50,51,17, 52.36, 53.59, ...","a7275b56":"**REFERENCE SOURCES**\n\n1. Kaggle:\n\nhttps:\/\/www.kaggle.com\/abhinand05\/covid-19-digging-a-bit-deeper\n\nhttps:\/\/www.kaggle.com\/corochann\/covid-19-eda-with-recent-update-on-april\n\nhttps:\/\/www.kaggle.com\/vikassingh1996\/coronavirus-an-exploratory-study-w-detail-report\/notebook\n\n2. TowardsDataScience:\n\nhttps:\/\/towardsdatascience.com\/visualizing-the-coronavirus-pandemic-with-choropleth-maps-7f30fccaecf5\n\n3. Other:\nThe data from https:\/\/github.com\/CSSEGISandData\/COVID-19","cb6195f0":"**1. Static graph**","781722ad":"**3. Graph presentation top 10 countries**","94f019af":"**4. Distribution of cases on map**","83658540":"**A. ENVIRONMENT SETUP**","55272c35":"# **COVID-19 - EXPLORATORY DATA ANALYSIS AND VISUALIZATION**\n\nThis kernel is created together with [another kernel](https:\/\/www.kaggle.com\/nhntran\/covid-19-vietnam-data-eda-and-visualization?scriptVersionId=32963257) which is for specific country data in Vietnam.\n\nThe writen up report for this analysis could be found at my blog (coming soon).\n\n*Data used in this kernel: Updated data from the Johns Hopkins University (the CSSEGI)*\n","783b725a":"**3. MORE INTERACTIVE GRAPH WITH HOVER FUNCTION - COMPARING COUNTRY SINCE 100 CONFIRMED CASES**\n\n- Hightlight the country of interest on graph","f71127f7":"**1. COMPARING DIFFERENT COUNTRIES - DAYS SINCE 50TH CASES**\n\nUsing the list of target_countries","60f0a6e7":"**F. COUNTRY COMPARISON**","15cfad20":"**4. Extracting specific data for each country**","04467610":"**3. Saving the data for further analysis**","a52a1ca1":"**If this kernel helps you, please upvote. Thank you! **","83489a68":"**1. The globally confirmed cases and deaths**","4af6f9c7":"**2. Merging and cleaning up the data**\n\n- Merge confirmed cases and death cases.\n- Correct the values in 'Province\/State' \n- Changing the country name for using the package 'pycoutry_convert'\n- Fixing wrong data in a certain date in 'Hubei', China\n","9f97bd59":"**C. DATA WRANGLING - DATA EXPLORATORY ANALYSIS**","585c0cf3":"**B. DOWNLOADING THE DATA**\n\nThe updated data from the Johns Hopkins University (the CSSEGI)","5b40ea30":"**D. WORLD WIDE DETAIL REPORT ON THE MOST UPDATED DAY (SINGLE DAY)**","4ae33e16":"**2. COMPARING COUNTRY SINCE 100 CONFIRMED CASES**","b88e2e9f":"**1. General information about the data**","342db533":"**2. Animated graph**","bba09185":"**G. FURTHER READING**\n\nMy report on Medium about the Vietnam data I worked on, combining with the world data analysis. (Coming soon)\n\nMy other kernels about the same topic: https:\/\/www.kaggle.com\/nhntran\/covid-19-vietnam-data-eda-and-visualization?scriptVersionId=32963257\n","02802836":"**2. Distribution of cases by country**","41a36151":"**MORE BEAUTIFUL GRAPH**"}}