{"cell_type":{"f7fafe83":"code","46da973e":"code","43171ba6":"code","81d43289":"code","8674edc3":"code","13a916c8":"code","1c09760b":"code","4885e07e":"markdown","b2e62518":"markdown","c8a00c70":"markdown","5b070d61":"markdown","9aae68a7":"markdown","0ac4cb19":"markdown"},"source":{"f7fafe83":"import cv2\nimport math\nimport random\nimport ast\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd","46da973e":"# draw image function\ndef draw_cv2(raw_strokes, base_size = 256, img_size=128, lw=6, time_color=True):\n    img = np.zeros((base_size, base_size), np.uint8)\n    for t, stroke in enumerate(raw_strokes):\n        for i in range(len(stroke[0]) - 1):\n            color = 255 - min(t, 10) * 13 if time_color else 255\n            _ = cv2.line(img, (stroke[0][i], stroke[1][i]), (stroke[0][i + 1], stroke[1][i + 1]), color, lw)\n    if img_size != base_size:\n        return cv2.resize(img, (img_size, img_size))\n    else:\n        return img   ","43171ba6":"# read test file\ntest = pd.read_csv('..\/input\/test_simplified.csv')","81d43289":"# choose a random image\ni = test[test['key_id'] == 9000052667981386].iloc[0]['drawing']\nimg = draw_cv2(ast.literal_eval(i),img_size=256)\nplt.imshow(img)","8674edc3":"# deform one stroke in a whole image\n# scale is pre-defined constant\ndef deform_single_line(line, scale = 10, eps = 0.00001):\n    x,y = line[0], line[1]\n    \n    # get start and end point x\/y\n    x_pre, y_pre = x[0],y[0]\n    x_end, y_end = x[-1],y[-1]\n    \n    # line distance between start point & end point\n    l_dis = math.sqrt((x_pre-x_end)**2 + (y_pre-y_end)**2)\n    \n    curve_dis = 0\n    for idx in range(len(x)-1):\n        sx,sy = x[idx],y[idx]\n        ex,ey = x[idx+1],y[idx+1]\n        \n        curve_dis += math.sqrt((sx-ex)**2 + (sy-ey)**2)\n\n    # ratio between line distance and curve distance\n    ratio = float(l_dis)\/(curve_dis+eps)\n    if ratio > 1:\n        return [x,y]\n    \n    # disturbance direction\n    r1 = (random.uniform(0,1)<=0.5)*2-1\n    r2 = (random.uniform(0,1)<=0.5)*2-1\n    res_x,res_y = x.copy(),y.copy()\n    \n    for idx in range(1,len(x)-1):\n        \n        # a little move\n        res_x[idx] += int(scale*r1*ratio*abs(np.random.randn()))\n        res_y[idx] += int(scale*r2*ratio*abs(np.random.randn()))\n        \n    res_line = [res_x, res_y]\n    return res_line\n\n# deform whole image by deform each strokes\ndef local_deform(lines):\n    res = []\n    for line in lines:\n        res.append(deform_single_line(line))\n    return res\n            \ndef scatter_line(line, base_size = 256, c ='b'):\n    x,y = line[0], line[1]\n    for idx,ele in enumerate(y):\n        y[idx] = base_size - ele\n    plt.scatter(x, y, c = c)\n    plt.xlim(0,base_size)\n    plt.ylim(0,base_size)\n","13a916c8":"before_ = ast.literal_eval(i)[0]\nafter_ = deform_single_line((ast.literal_eval(i)[0]))\n\nscatter_line(before_,c = 'b')\nscatter_line(after_,c = 'r')\nplt.show()","1c09760b":"img = draw_cv2(local_deform(ast.literal_eval(i)),img_size=256)\nplt.imshow(img)","4885e07e":"## Whole Image Local Deformation","b2e62518":"## Local deformation\n\nThe whole image consists of many strokes sequences, let's deform each local stroke.\nFirst we have to calculate the ratio between the line distance of start\/end point and the curve distance of stroke, to generate a Gaussian distribution standard variance. Then we sample from this Gaussian distribution to generate the coordinate disturbance in stroke points sequence.","c8a00c70":"we apply local deformation to blue point, then generate the deform result(red point)","5b070d61":"## Library input","9aae68a7":"## One stroke","0ac4cb19":"## Show Original Image"}}