{"cell_type":{"f1b0d3dc":"code","3cdc4f5c":"code","33a31c1d":"code","dc5ad032":"code","05d94db8":"code","a3a3c4e3":"code","5037a55e":"code","775df7f5":"code","6420a122":"code","a6c2b6a6":"code","eb7bb24d":"code","77657898":"code","7bfcffbd":"code","1f28a618":"code","236984b3":"code","6a149c45":"code","7d586e0e":"code","ffe7282b":"code","fba7229d":"code","f039a3e6":"code","0e921441":"code","e0dba5d6":"code","0761c07d":"code","76060709":"code","8b85adc9":"code","aac66ea8":"code","3c77ef31":"code","2ab37d33":"code","bc6786cd":"code","31404486":"code","d311dd85":"markdown","5aa055d3":"markdown","0f7f1fcb":"markdown","8b67881c":"markdown","952ae03a":"markdown","a53d146e":"markdown","0d16c9e8":"markdown","bb9d5152":"markdown","0fd773d8":"markdown","25c7500b":"markdown"},"source":{"f1b0d3dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cdc4f5c":"# Importing Liberaries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","33a31c1d":"# Loading the Data\ndf = pd.read_csv('\/kaggle\/input\/predict-pizza-price\/Pizza-Price.csv')\ndf","dc5ad032":"corr = df.corr()\ncorr.style.background_gradient(cmap='Reds')","05d94db8":"# Getting data Types\ndf.info()","a3a3c4e3":"# Checking Null values\ndf.isnull().sum()","5037a55e":"# Describing the data\npd.set_option('precision',3)\ndf.describe()","775df7f5":"# shape of data\ndf.shape","6420a122":"# Pizza which have Extra Cheeze\nprint(df['Extra Cheeze'].value_counts())\ndf['Extra Cheeze'].value_counts().plot.pie()","a6c2b6a6":"# Pizza which have Extra Mushroom\nprint(df['Extra Mushroom'].value_counts())\ndf['Extra Mushroom'].value_counts().plot.pie();","eb7bb24d":"# Pizza which are Extra Spicy\nprint(df['Extra Spicy'].value_counts())\ndf['Extra Spicy'].value_counts().plot.pie();","77657898":"# Pizza Size by Inch mostly ordered\nprint(df[' Size by Inch'].value_counts())\ndf[' Size by Inch'].value_counts().plot.pie();","7bfcffbd":"# Money spent by customers\nprint(df['Price'].value_counts())\ndf['Price'].value_counts().plot.pie();\nprint('Total money spent by customer: ', df['Price'].sum())","1f28a618":"sizeprice = pd.crosstab(index = df['Price'], columns = df[' Size by Inch'])\nprint(sizeprice)\nsizeprice.plot.line();\ncorr = sizeprice.corr()\ncorr.style.background_gradient(cmap='Blues')","236984b3":"# CHEEZE - PRIZE\ncheezeprice = pd.crosstab(index = df['Price'], columns = df['Extra Cheeze'])\nprint(cheezeprice)\ncheezeprice.plot.bar();\ncheezeprice.plot.line();","6a149c45":"# MUSHROOM - PRIZE\nmushprice = pd.crosstab(index = df['Price'], columns = df['Extra Mushroom'])\nprint(mushprice)\nmushprice.plot.bar();\nmushprice.plot.line();","7d586e0e":"# SPICY - PRIZE\nspiceprice = pd.crosstab(index = df['Price'], columns = df['Extra Spicy'])\nprint(spiceprice)\nspiceprice.plot.bar();\nspiceprice.plot.line();","ffe7282b":"# Replacing YES\/NO to 0\/1 in data\ndf.replace(('yes', 'no'), (1, 0), inplace=True)\ndf","fba7229d":"corr = df.corr()\ncorr.style.background_gradient(cmap='Greens')","f039a3e6":"# Getting Features\nfeatures = ['Extra Cheeze', 'Extra Mushroom', 'Extra Spicy', ' Size by Inch']\nx = df[features]\n\n# Predicting Value\ny = df['Price']","0e921441":"# import important liberaries\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 1\/4, random_state = 4)\n","e0dba5d6":"#Import Library for Accuracy Score\nfrom sklearn.metrics import accuracy_score\n\n#Import Library for Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\n#Initialize the Logistic Regression Classifier\nlogisreg = LogisticRegression()\n\n#Train the model using Training Dataset\nlogisreg.fit(x_train, y_train)\n\n# Prediction using test data\ny_pred = logisreg.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and y_pred\nacc_logisreg = accuracy_score(y_test, y_pred)\nprint( 'Accuracy of Logistic Regression model : ', acc_logisreg )\n","0761c07d":"#Import Library for Linear Discriminant Analysis\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import accuracy_score\n\n\n#Initialize the Linear Discriminant Analysis Classifier\nlda = LinearDiscriminantAnalysis()\n\n#Train the model using Training Dataset\nlda.fit(x_train, y_train)\n\n# Prediction using test data\nlda_pred = lda.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and lda_pred\nacc_lda = accuracy_score(y_test, lda_pred)\nprint( 'Accuracy of Linear Discriminant Analysis Classifier: ', acc_lda )\n","76060709":"#Import Library for Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\n\n#Initialize the Gaussian Naive Bayes Classifier\ngnb = GaussianNB()\n\n#Train the model using Training Dataset\ngnb.fit(x_train, y_train)\n\n# Prediction using test data\ngnb_pred = gnb.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and gnb_pred\nacc_ganb = accuracy_score(y_test, gnb_pred)\nprint( 'Accuracy of Gaussian Naive Bayes : ', acc_ganb )\n","8b85adc9":"#Import Library for Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Initialize the Decision Tree Classifier\ndtc = DecisionTreeClassifier()\n\n#Train the model using Training Dataset\ndtc.fit(x_train, y_train)\n\n# Prediction using test data\ndtc_pred = dtc.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and dtc_pred\nacc_dtree = accuracy_score(y_test, dtc_pred)\nprint( 'Accuracy of  Decision Tree Classifier : ', acc_dtree )\n","aac66ea8":"#Import Library for Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Initialize the Random Forest\nrfc = RandomForestClassifier()\n\n#Train the model using Training Dataset\nrfc.fit(x_train, y_train)\n\n# Prediction using test data\nrfc_pred = rfc.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and rfc_pred\nacc_rf = accuracy_score(y_test, rfc_pred)\nprint( 'Accuracy of  Random Forest : ', acc_rf )\n","3c77ef31":"#Import Library for Support Vector Machine\nfrom sklearn import svm\n\n#Initialize the Support Vector Classifier\nsvmodel = svm.SVC()\n\n#Train the model using Training Dataset\nsvmodel.fit(x_train, y_train)\n\n# Prediction using test data\nsvm_pred = svmodel.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and svm_pred\nacc_svc = accuracy_score(y_test, svm_pred)\nprint( 'Accuracy of Support Vector Classifier: ', acc_svc )\n","2ab37d33":"#Import Library for K Nearest Neighbour Model\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Initialize the K Nearest Neighbour Model with Default Value of K=5\nknnmodel = KNeighborsClassifier()\n\n#Train the model using Training Dataset\nknnmodel.fit(x_train, y_train)\n\n# Prediction using test data\nknn_pred = knnmodel.predict(x_test)\n\n# Calculate Model accuracy by comparing y_test and knn_pred\nacc_knn = accuracy_score(y_test, knn_pred)\nprint( 'Accuracy of KNN Classifier: ', acc_knn )\n","bc6786cd":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Linear Discriminant Analysis','Naive Bayes', 'Decision Tree', 'Random Forest', 'Support Vector Machines', \n              'K - Nearest Neighbors'],\n    'Score': [acc_logisreg, acc_lda, acc_ganb, acc_dtree, acc_rf, acc_svc, acc_knn]})\n\nmodels.sort_values(by='Score', ascending=False)\n","31404486":"# Predictions through THe upstaed MOdels\nprint('Price Predictions using Logistic Regression Model: ', logisreg.predict([[1,0,1,11]]))\n\nprint('Price Predictions using LDA Model: ', lda.predict([[1,0,1,11]]))\n\nprint('Price Predictions using Gaussian Naive Bayes Model: ', gnb.predict([[1,0,1,11]]))\n\nprint('Price Predictions using Decision Tree Model: ', dtc.predict([[1,0,1,11]]))\n\nprint('Price Predictions using Random Forest Model: ', rfc.predict([[1,0,1,11]]))\n\nprint('Price Predictions using SVM Model: ', svmodel.predict([[1,0,1,11]]))\n\nprint('Price Predictions using KNN Model: ', knnmodel.predict([[1,0,1,11]]))","d311dd85":"*** Linear Discriminent Analysis ***","5aa055d3":"# Model Selection","0f7f1fcb":"*** K Nearest Neighbour Classifier ***","8b67881c":"# Data Visualization","952ae03a":"*** Decision Tree Classifier ***","a53d146e":"*** Support Vector Machine SVM ***","0d16c9e8":"*** Logistic Regression ***","bb9d5152":"*** Gaussian Naive Bayes ***","0fd773d8":"*** Random Forest Classifier ***","25c7500b":"# Spliting data into Test and Training Data"}}