{"cell_type":{"2406b3ef":"code","09f6b62c":"code","c19d38fa":"code","3ec853fb":"code","8f4b256e":"code","030f945c":"code","5872b761":"code","d1f1fbac":"code","1f7e0b1d":"code","5c26ece1":"code","27b3a4d7":"code","d81732f7":"code","cb4925a7":"code","90ef6e98":"code","c8cbb59f":"code","a4103dad":"code","5f76db01":"code","689f1ad6":"code","5a2d8220":"code","6fbdaf5f":"code","cbf5735f":"code","4ec559e5":"code","0ea3f7a4":"code","54c041b9":"code","24adeb90":"code","6b6b0b46":"code","833a0505":"code","c13ab1c4":"code","f0e01fbd":"code","5dbf29b1":"code","c4337546":"code","ae5789d3":"code","a88e3c73":"code","6f6db1db":"code","ccae7502":"code","35e61f22":"code","2da4d89e":"code","e578dea9":"code","e69ca58e":"code","e2f68662":"code","38c82810":"code","646b2e7a":"code","dbda783f":"code","e0e572ef":"code","1d3d0789":"code","6e8403ff":"code","a422cced":"code","102fb941":"code","9fb2f1c9":"code","c4d817ad":"code","08c4c7fd":"code","f4194e1c":"code","fbf6695b":"code","9cb39fe4":"code","3eb39b75":"code","4bf95c32":"code","db631b85":"code","211812d8":"code","ddffc319":"code","5f0404e2":"code","2f55caf3":"code","4bf2acb0":"code","a87d81da":"code","21d16577":"code","c3eaad28":"code","a2f7e4cf":"code","9faa02d5":"code","7b74e032":"code","ad30f14d":"code","2cb6b0db":"code","4402ed87":"code","92bc7856":"code","f2b9e348":"code","b70b0bbf":"code","b96df86e":"code","63d374a6":"code","4e6e6dfd":"code","14aaf14e":"code","b9588129":"code","62a6c4a5":"code","247f19dc":"code","2ba5dc0f":"code","114a884a":"code","0cd39973":"code","e87993db":"code","f344c99b":"code","6ad74a13":"code","49ba97a5":"code","fee7c848":"code","ecdf69e7":"code","39b24ad4":"code","4b0e612a":"code","599be8b2":"code","b59ca7e4":"code","778c3af9":"code","f7d1a502":"code","21eacf54":"code","e234314e":"code","4fb6c1e6":"code","2ce44d35":"code","673b57f9":"code","cc44ab5a":"code","36b77c87":"code","678bd4c0":"code","5a6a018d":"code","f28a1a2f":"code","da313131":"code","3eea58a0":"code","e8d41547":"code","d2653597":"code","ee876378":"code","97e1e9f3":"code","3febc9ad":"code","073fed6c":"code","eaccc169":"code","4704fad2":"code","69f1f015":"code","3ed14941":"code","f4f3fc9b":"code","57e1f616":"code","2386c647":"code","6acef08f":"code","22a688b2":"code","9cb9a764":"code","9d92b9f1":"code","236a2e6b":"code","aac16034":"code","dc60d757":"markdown","11a5626b":"markdown","61641bd0":"markdown","8975721b":"markdown","bcd837dd":"markdown","bed82024":"markdown","e422b76a":"markdown","add34c7b":"markdown","6481fa0b":"markdown","fc26d358":"markdown","8bf683b8":"markdown","c75af077":"markdown","373f9351":"markdown","0977c9c6":"markdown","341310c1":"markdown","adb801aa":"markdown","123a8e4c":"markdown"},"source":{"2406b3ef":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt","09f6b62c":"from google.colab import drive\ndrive.mount('\/content\/drive')","c19d38fa":"!wget https:\/\/raw.githubusercontent.com\/ageron\/handson-ml\/master\/datasets\/housing\/housing.tgz","3ec853fb":"#Unzipping\n!tar --gunzip --extract --verbose --file=housing.tgz","8f4b256e":"!ls -lh *csv","030f945c":"housing = pd.read_csv('housing.csv')","5872b761":"housing.head(15)","d1f1fbac":"housing.info()","1f7e0b1d":"housing['ocean_proximity'].value_counts()","5c26ece1":"housing.describe()","27b3a4d7":"%matplotlib inline\nhousing.hist(bins = 100, figsize = (10, 15))\nplt.show()","d81732f7":"from sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(housing, test_size=0.20, random_state=42)","cb4925a7":"print(len(train_set), len(test_set))","90ef6e98":"print(16512+4128)","c8cbb59f":"train_set.head(2)","a4103dad":"test_set.head(2)","5f76db01":"housing[\"income_category\"] = pd.cut(housing[\"median_income\"], \n                                    bins=[0.0, 1.5, 3.0, 4.5, 6.0, np.inf],\n                                    labels = [1, 2, 3, 4, 5])\nprint(housing[\"income_category\"].value_counts())","689f1ad6":"housing.income_category.hist()","5a2d8220":"housing.head()","6fbdaf5f":"test_set.index[1]","cbf5735f":"train_set.index[1]","4ec559e5":"from sklearn.model_selection import StratifiedShuffleSplit\nsss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n\nfor train_index, test_index in sss.split(housing, housing[\"income_category\"]):\n  print(\"Train: \", train_index, \"Test: \", test_index)\n  strat_train_set = housing.loc[train_index]\n  strat_test_set = housing.loc[test_index]\n","0ea3f7a4":"def income_cat_proportion(data):\n  return data[\"income_category\"].value_counts() \/ len(data)\n\ntrain_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)\n\ncompare_props = pd.DataFrame({\n    \"Overall\": income_cat_proportion(housing),\n    \"Stratified\": income_cat_proportion(strat_train_set),\n    \"Random\": income_cat_proportion(test_set)\n}).sort_index()\n\ncompare_props[\"Rand. %error\"] = 100*compare_props[\"Random\"] \/ compare_props[\"Overall\"]\ncompare_props[\"Strat. %error\"] = 100*compare_props[\"Stratified\"] \/ compare_props[\"Overall\"]","54c041b9":"train_set.head(2)","24adeb90":"test_set.head(2)","6b6b0b46":"housing_.head()","833a0505":"compare_props","c13ab1c4":"strat_train_set","f0e01fbd":"strat_test_set","5dbf29b1":"16512+4128","c4337546":"for sett in (strat_train_set, strat_test_set):\n  sett.drop([\"income_category\"], axis=1, inplace=True)","ae5789d3":"strat_train_set","a88e3c73":"strat_test_set","6f6db1db":"housing = strat_train_set\nhousing","ccae7502":"housing.plot(x=\"longitude\", y=\"latitude\", kind=\"scatter\", grid= True)\nplt.show()","35e61f22":"xx = housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.1)\nxx","2da4d89e":"housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n    s=housing_[\"population\"]\/100, label=\"population\", figsize=(10,7),\n    c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n    sharex=False)\nplt.legend()","e578dea9":"corr_matrix = housing.corr()\ncorr_matrix","e69ca58e":"corr_matrix[\"median_house_value\"].sort_values(ascending=False)","e2f68662":"from pandas.plotting import scatter_matrix\n\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\"]\nscatter_matrix(housing[attributes], figsize=(12, 8))\n","38c82810":"housing.plot( kind=\"scatter\", x=\"median_income\", y=\"median_house_value\", alpha=0.1)\nplt.axis([0, 16, 0, 550000])","646b2e7a":"from google.colab import files\nxx = plt.figure()\nplt.scatter(x = housing[\"median_income\"], y=housing[\"median_house_value\"], alpha=0.1)\nplt.show()\n\nxx.savefig('ok.png')\nfiles.download('ok.png')","dbda783f":"housing[\"rooms_per_household\"] = housing[\"total_rooms\"] \/ housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"] \/ housing[\"total_rooms\"]\nhousing[\"population_per_household\"] = housing[\"population\"] \/ housing[\"households\"]","e0e572ef":"corr = housing_.corr()\ncorr[\"median_house_value\"].sort_values(ascending = False)","1d3d0789":"housing","6e8403ff":"strat_train_set.head(2)","a422cced":"strat_train_set = strat_train_set.drop(\"rooms_per_household\", axis = 1)\nstrat_train_set = strat_train_set.drop(\"bedrooms_per_room\", axis = 1)\nstrat_train_set = strat_train_set.drop(\"population_per_household\", axis = 1)","102fb941":"strat_train_set.head(2)","9fb2f1c9":"strat_test_set.head()","c4d817ad":"housing_train_data = strat_train_set.drop(\"median_house_value\", axis = 1)\nhousing_train_labels = strat_train_set[\"median_house_value\"].copy()","08c4c7fd":"housing_train_data","f4194e1c":"housing_train_labels.head()","fbf6695b":"strat_test_set","9cb39fe4":"incomplete_rows = housing_train_data[housing_train_data.isnull().any(axis=1)]\nincomplete_rows","3eb39b75":"#incomplete_rows = incomplete_rows.drop(\"total_bedrooms\", axis=1)\n#incomplete_rows","4bf95c32":"meddian = housing_train_data[\"total_bedrooms\"].median()\nincomplete_rows[\"total_bedrooms\"].fillna(meddian, inplace=True)\nincomplete_rows","db631b85":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy=\"median\")","211812d8":"housing_num = housing_train_data.select_dtypes(include=[np.number])\nhousing_num","ddffc319":"null_ros = housing_num[housing_num.isnull().any(axis=1)]\nnull_ros","5f0404e2":"imputer.fit(housing_num)","2f55caf3":"imputer.statistics_","4bf2acb0":"housing_num","a87d81da":"X = imputer.transform(housing_num)","21d16577":"housing_train_data_filled = pd.DataFrame(X, index=housing_train_data.index, columns=housing_num.columns)","c3eaad28":"housing_train_data_filled.loc[incomplete_rows.index.values]","a2f7e4cf":"housing_train_data_filled","9faa02d5":"housing_train_data_filled.index","7b74e032":"housing_train_data_filled.head()","ad30f14d":"#housing_train_data_filled = housing_train_data_filled.sort_index()\n#housing_train_data_filled","2cb6b0db":"housing_train_labels","4402ed87":"housing[['ocean_proximity']]","92bc7856":"from sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\nhousinng_cat = housing[[\"ocean_proximity\"]]\nhousing_cat_encoded = ordinal_encoder.fit_transform(housinng_cat)\nhousing_cat_encoded[0:10]","f2b9e348":"ordinal_encoder.categories_","b70b0bbf":"from sklearn.preprocessing import OneHotEncoder\none_hot_encoder = OneHotEncoder()\nhousing_cat_one_hot_encoded = one_hot_encoder.fit_transform(housinng_cat)","b96df86e":"housing_cat_one_hot_encoded","63d374a6":"housing_cat_one_hot_encoded.toarray()","4e6e6dfd":"\none_hot_encoder.categories_","14aaf14e":"from sklearn.base import BaseEstimator, TransformerMixin\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True):\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y = None):\n        return self\n    def transform(self, X):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        \n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attribs = attr_adder.transform(housing_train_data_filled.values)","b9588129":"housing_extra_attribs","62a6c4a5":"housing_extra_attribs = pd.DataFrame(\n    housing_extra_attribs,\n    columns=list(housing_train_data_filled.columns)+[\"rooms_per_household\", \"population_per_household\"],\n    index=housing_train_data_filled.index)\n\nhousing_extra_attribs","247f19dc":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nnum_pipeline = Pipeline([('imputer',\n                          SimpleImputer(strategy=\"median\")),\n                         ('attribs_adder', CombinedAttributesAdder()),\n                         ('std_scaler', StandardScaler()),])\nhousing_num_tr = num_pipeline.fit_transform(housing_num)","2ba5dc0f":"print(housing_num_tr)","114a884a":"len(housing_num_tr)","0cd39973":"housing_train_data.head(2)","e87993db":"from sklearn.compose import ColumnTransformer\n# list of numerical column names\nnum_attribs = list(housing_num)\n# list of categorical column names\ncat_attribs = [\"ocean_proximity\"]\n\nfull_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", OneHotEncoder(), cat_attribs),\n    ])\n\nhousing_prepared = full_pipeline.fit_transform(housing_train_data)","f344c99b":"housing_prepared","6ad74a13":"housing_prepared.shape","49ba97a5":"len(housing_train_labels)","fee7c848":"from sklearn.linear_model import LinearRegression\nlinear_regression = LinearRegression()\nlinear_regression.fit(housing_prepared, housing_train_labels)\n","ecdf69e7":"some_data = housing_train_data.iloc[: 5]\nsome_data","39b24ad4":"some_labels = housing_train_labels[0:5]\nsome_labels","4b0e612a":"some_data_prepared = full_pipeline.transform(some_data)","599be8b2":"predictions = linear_regression.predict(some_data_prepared)\npredictions","b59ca7e4":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n\nhousing_predictions = linear_regression.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_predictions, housing_train_labels)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","778c3af9":"lin_mae = mean_absolute_error(housing_predictions, housing_train_labels)\nlin_mae","f7d1a502":"from sklearn.tree import DecisionTreeRegressor\ndecision_tree_regressor = DecisionTreeRegressor(random_state=42)\ndecision_tree_regressor.fit(housing_prepared, housing_train_labels)","21eacf54":"housing_predictions = decision_tree_regressor.predict(housing_prepared)\ntree_mse = mean_squared_error(housing_predictions, housing_train_labels)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","e234314e":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(decision_tree_regressor, housing_prepared, housing_train_labels,\\\n                        scoring = \"neg_mean_squared_error\", cv = 10)\n\ntree_rmse_scores = np.sqrt(-scores)\n\ntree_rmse_scores","4fb6c1e6":"print(\"Mean of scores: \", tree_rmse_scores.mean())\nprint(\"Standard Deviation of Scores: \", tree_rmse_scores.std())","2ce44d35":"lin_scores = cross_val_score(linear_regression, housing_prepared, housing_train_labels,\\\n                             scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\nlin_rmse_scores","673b57f9":"print(\"Mean of scores: \", lin_rmse_scores.mean())\nprint(\"Standard Deviation of Scores: \", lin_rmse_scores.std())","cc44ab5a":"from sklearn.ensemble import RandomForestRegressor\nrandom_forest_regressor = RandomForestRegressor(n_estimators=100, random_state=42)\nrandom_forest_regressor.fit(housing_prepared, housing_train_labels)","36b77c87":"housing_predictions = random_forest_regressor.predict(housing_prepared)\nrandom_forest_mse = mean_squared_error(housing_train_labels, housing_predictions)\nrandom_forest_rmse = np.sqrt(random_forest_mse)\nrandom_forest_rmse","678bd4c0":"scores = cross_val_score(linear_regression, housing_prepared, housing_train_labels, scoring=\"neg_mean_squared_error\", cv=10)\npd.Series(np.sqrt(-scores)).describe()","5a6a018d":"from sklearn.model_selection import GridSearchCV\n\nparameters_grid = [\n                   {\n                       \"n_estimators\" : [3, 10, 10],\n                       \"max_features\" : [2, 4, 6, 8],\n                   },\n\n                   {\n                       \"bootstrap\" : [False],\n                       \"n_estimators\" : [3, 10],\n                       \"max_features\" : [2, 3, 4]\n                   }\n]\n\n\ngrid_search = GridSearchCV(random_forest_regressor, parameters_grid, cv=5,\n                           scoring = \"neg_mean_squared_error\", return_train_score = True)\ngrid_search.fit(housing_prepared, housing_train_labels)\n","f28a1a2f":"grid_search.best_params_","da313131":"grid_search.best_estimator_","3eea58a0":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","e8d41547":"pd.DataFrame(grid_search.cv_results_)","d2653597":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparams_distribs = {\n    \"n_estimators\" : randint(low = 1, high = 100),\n    \"max_features\" : randint(low = 1, high = 8)\n}\n\nrand_search = RandomizedSearchCV(random_forest_regressor, param_distributions = params_distribs,\n                                 n_iter=10, cv=5, scoring=\"neg_mean_squared_error\", random_state=42)\n\nrand_search.fit(housing_prepared, housing_train_labels)","ee876378":"cvres = rand_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n  print(np.sqrt(-mean_score), params)","97e1e9f3":"\nfeature_importances = grid_search.best_estimator_.feature_importances_\nfeature_importances","3febc9ad":"extra_attribs = [\"rooms_per_hhold\", \"pop_per_hhold\", \"bedrooms_per_room\"]\n#cat_encoder = cat_pipeline.named_steps[\"cat_encoder\"] # old solution\ncat_encoder = full_pipeline.named_transformers_[\"cat\"]\ncat_one_hot_attribs = list(cat_encoder.categories_[0])\nattributes = num_attribs + extra_attribs + cat_one_hot_attribs\nsorted(zip(feature_importances, attributes), reverse=True)","073fed6c":"strat_test_set","eaccc169":"X_test = strat_test_set.drop([\"median_house_value\"], axis=1)\nX_test","4704fad2":"grid_search.best_estimator_","69f1f015":"X_test = strat_test_set.drop(\"median_house_value\", axis=1)\ny_test = strat_test_set[\"median_house_value\"].copy()","3ed14941":"X_test","f4f3fc9b":"y_test","57e1f616":"final_model = grid_search.best_estimator_\n\nX_test_prepared = full_pipeline.transform(X_test)\nfinal_predictions = final_model.predict(X_test_prepared)\n\nfinal_mse = mean_squared_error(y_test.values, final_predictions)\nfinal_rmse = np.sqrt(final_mse)","2386c647":"final_rmse","6acef08f":"y_test","22a688b2":"y_test.index","9cb9a764":"y_test.values","9d92b9f1":"y_test.values[1]","236a2e6b":"final_predictions","aac16034":"good = bad = 0\n\neps = 0.15\n\nfor i in range(len(y_test)):\n\n  if ((abs(y_test.values[i] - final_predictions[i]))\/y_test.values[i]) <= eps :\n    good += 1\n  else:\n    bad += 1\n\nprint(\"Good Prediction # : \", good)\nprint(\"Bad Prediction # : \", bad)","dc60d757":"# Making the best possible model and testing the test data","11a5626b":"Fitting in linear regression model\n","61641bd0":"Finding and filling up the null values","8975721b":"# Preparation of data","bcd837dd":"Adding some new more useful columns using existing ones","bed82024":"Fitting on Decision Tree Regressor and calculating error matrics","e422b76a":"Turning a non-numeric(string) column to numeric","add34c7b":"One hot encoding","6481fa0b":"# Exploring the fetched data","fc26d358":"# Graphical Visualisation","8bf683b8":"## Fetching data from web and visualising\n[Tutorial](https:\/\/youtu.be\/U-nsgM9XWtU)","c75af077":"##Splitting data into train set and test set\n\nOn a serious note, random_state simply sets a seed to the random generator, so that your train-test splits are always deterministic. If you don't set a seed, it is different each time.","373f9351":"\nMaking pipeline for further use to prepare data","0977c9c6":"## Importing Libraries","341310c1":"Searching for better (\/best) hyperparameters and hand engineerable things","adb801aa":"Fitting on random forest regression and calculation of error metrics","123a8e4c":"Calculaton of error metrics"}}