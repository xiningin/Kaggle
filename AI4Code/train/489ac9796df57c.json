{"cell_type":{"5e2a0b0a":"code","7a1d1bcb":"code","a2935a0d":"code","05a38f77":"code","ffe840eb":"code","9f63c934":"code","9103258b":"code","0f8fa8fc":"code","fda053e4":"code","fe2ba91c":"code","74936866":"code","11c7204b":"code","983d0c35":"code","9e8f79d7":"code","d7c319e0":"code","a1c76da8":"code","ee1706b0":"code","52906e2e":"code","f99e52df":"code","0d01987c":"code","de3a23a1":"code","4c0dbbe5":"code","0de51b30":"code","f123c0ea":"code","60a11c79":"code","2420a70e":"code","b6e6cfe0":"markdown","3435ae30":"markdown","5ecc7d03":"markdown","a9d47d02":"markdown","f6fb5391":"markdown","f976cdd8":"markdown","640d5948":"markdown","1fc92b0e":"markdown","c64559cf":"markdown","943d26ba":"markdown","f5a7153b":"markdown","9df941ec":"markdown","0094dc08":"markdown","eb574776":"markdown","aa0e51db":"markdown","6a01c0f9":"markdown","3cd52662":"markdown","326884aa":"markdown","f3d9449d":"markdown","fc20747a":"markdown","352781c5":"markdown"},"source":{"5e2a0b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a1d1bcb":"pd.set_option('max_rows',800)\ndf=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.info()","a2935a0d":"#EDA\npregnancies=df.groupby('Outcome').agg({'Pregnancies':['describe']})\npregnancies.index=['Non-Diabetic','Diabetic']\n\npregnancies","05a38f77":"#EDA\nplt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='Pregnancies',data=df,palette='muted')\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,6)\nplt.xlabel('Diabetic or not')\nplt.ylabel('No. of Pregnancies')\nplt.title(\"Pregnancies\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","ffe840eb":"glucose=df.groupby('Outcome').agg({'Glucose':['describe']})\nglucose.index=['Non-Diabetic','Diabetic']\n\nglucose","9f63c934":"plt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='Glucose',data=df,palette='Set1')\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,160)\nplt.xlabel('Diabetic or not')\nplt.ylabel('Glucose Level')\nplt.title(\"Gluose Level\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","9103258b":"blood_pressure=df.groupby('Outcome').agg({'BloodPressure':['describe']})\nblood_pressure.index=['Non-Diabetic','Diabetic']\n\nblood_pressure","0f8fa8fc":"plt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='BloodPressure',data=df,palette='colorblind')\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,80)\nplt.xlabel('Diabetic or not')\nplt.ylabel('Blood Pressure Level')\nplt.title(\"Blood Pressure Level\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","fda053e4":"Skin_Thickness=df.groupby('Outcome').agg({'SkinThickness':['describe']})\nSkin_Thickness.index=['Non-Diabetic','Diabetic']\n\nSkin_Thickness","fe2ba91c":"plt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='SkinThickness',data=df,palette='hls')\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,26)\nplt.xlabel('Diabetic or not')\nplt.ylabel('Skin Thickness')\nplt.title(\"Skin Thickness\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","74936866":"Insulin=df.groupby('Outcome').agg({'Insulin':['describe']})\nInsulin.index=['Non-Diabetic','Diabetic']\n\nInsulin","11c7204b":"plt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='Insulin',data=df)\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,130)\nplt.xlabel('Diabetic or not')\nplt.ylabel('Insulin Level')\nplt.title(\"Insulin Level\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","983d0c35":"BMI=df.groupby('Outcome').agg({'BMI':['describe']})\nBMI.index=['Non-Diabetic','Diabetic']\n\nBMI","9e8f79d7":"plt.figure(figsize=(8,8))\nsns.barplot(x='Outcome',y='BMI',data=df)\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,40)\nplt.xlabel('Diabetic or not')\nplt.ylabel('BMI value')\nplt.title(\"Body Mass Index(BMI)\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)","d7c319e0":"Age=df.groupby('Outcome').agg({'Age':['describe']})\nAge.index=['Non-Diabetic','Diabetic']\n\nAge","a1c76da8":"df1=df.copy()\ndf1['Age']=pd.cut(df1['Age'],bins=5)\ndf1['Outcome'].replace({1:'Diabetic',0:'Non-Diabetic'},inplace=True)\n\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nsns.countplot(x='Age',hue='Outcome',data=df1)\nplt.xticks([0,1,2,3,4],['Young-Adults','Middle-Aged','Retirement-Age','Old','Very Old'])\nplt.xlabel('Age Groups')\nplt.ylabel('NUmber of Diabetic and Non-Diabetic')\nplt.title(\"Age Groups\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n\nplt.subplot(2,1,2)\nsns.barplot(x='Outcome',y='Age',data=df)\nplt.xticks([0,1],['Non-Diabetic','Diabetic'])\nplt.ylim(0,40)\nplt.xlabel('Diabetic or not')\nplt.ylabel('Age')\nplt.title(\"Age\")\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tight_layout()","ee1706b0":"filt1=(df['Outcome']==0)&(df['Glucose']==0)\nfilt2=(df['Outcome']==1)&(df['Glucose']==0)\ndf.loc[filt1,'Glucose']=110\ndf.loc[filt2,'Glucose']=141\n\nfilt1=(df['Outcome']==0)&(df['BloodPressure']==0)\nfilt2=(df['Outcome']==1)&(df['BloodPressure']==0)\ndf.loc[filt1,'BloodPressure']=68\ndf.loc[filt2,'BloodPressure']=71\n\nfilt1=(df['Outcome']==0)&(df['SkinThickness']==0)\nfilt2=(df['Outcome']==1)&(df['SkinThickness']==0)\ndf.loc[filt1,'SkinThickness']=20\ndf.loc[filt2,'SkinThickness']= 22\n\nfilt1=(df['Outcome']==0)&(df['Insulin']==0)\nfilt2=(df['Outcome']==1)&(df['Insulin']==0)\ndf.loc[filt1,'Insulin']=69\ndf.loc[filt2,'Insulin']=100\n\nfilt1=(df['Outcome']==0)&(df['BMI']==0)\nfilt2=(df['Outcome']==1)&(df['BMI']==0)\ndf.loc[filt1,'BMI']=30\ndf.loc[filt2,'BMI']=37","52906e2e":"from sklearn.preprocessing import MinMaxScaler\ndf_modified=df.copy()\ndf_modified.drop('Outcome',axis=1,inplace=True)\ncols=df_modified.columns\n\nscaler=MinMaxScaler()\n\ndf_modified=pd.DataFrame(scaler.fit_transform(df_modified))\ndf_modified.columns=cols\ndf_modified['Outcome']=df['Outcome']\ndf_modified['Outcome'].replace({0:'Non-Diabetic',1:'Diabetic'},inplace=True)","f99e52df":"x=sns.PairGrid(df_modified,hue='Outcome',vars=cols,despine=True,palette='colorblind',layout_pad=True)\nx.map_offdiag(sns.scatterplot)\nx.add_legend()\nx","0d01987c":"plt.figure(figsize=(15,15))\nsns.heatmap(data=df_modified[cols].corr(),xticklabels=True,yticklabels=True,cbar=True,linecolor='white',annot=True)","de3a23a1":"#Model Building\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,roc_auc_score\n\nxtrain,xtest,ytrain,ytest=train_test_split(df[cols],df['Outcome'],test_size=0.33,random_state=0)","4c0dbbe5":"\n#RandomForest\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf1=RandomForestClassifier(random_state=0,n_estimators=100,max_depth=100,max_features='auto')\nclf1.fit(xtrain,ytrain)\npredictions1=clf1.predict(xtest)\nprobabilities=clf1.predict_proba(xtest)\nimportance1=list(zip(xtrain.columns,clf1.feature_importances_))\n\nprint('accuracy'+' '+'='+' '+str(accuracy_score(ytest,predictions1)))\nprint('ROC score'+' '+'='+' '+str(roc_auc_score(ytest,probabilities[:,1])))\nprint('f1 score'+' '+'='+' '+str(f1_score(ytest,predictions1)))\nprint('recall score'+' '+'='+' '+str(recall_score(ytest,predictions1)))\nprint('precision score'+' '+'='+' '+str(precision_score(ytest,predictions1)))\nprint()\nprint()\nprint(\"Feature Importances:\")\nprint(importance1)","0de51b30":"#Gradient boosted Classifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nclf2= GradientBoostingClassifier(random_state=0,learning_rate=0.07,n_estimators=100,max_depth=3,max_features='auto')\nclf2.fit(xtrain,ytrain)\npredictions2=clf2.predict(xtest)\nprobabilities1=clf2.predict_proba(xtest)\nimportance2=list(zip(xtrain.columns,clf2.feature_importances_))\n\nprint('accuracy'+' '+'='+' '+str(accuracy_score(ytest,predictions2)))\nprint('ROC score'+' '+'='+' '+str(roc_auc_score(ytest,probabilities1[:,1])))\nprint('f1 score'+' '+'='+' '+str(f1_score(ytest,predictions2)))\nprint('recall score'+' '+'='+' '+str(recall_score(ytest,predictions2)))\nprint('precision score'+' '+'='+' '+str(precision_score(ytest,predictions2)))\nprint()\nprint()\nprint(\"Feature Importances:\")\nprint(importance2)","f123c0ea":"from sklearn.svm import SVC\n\nscaler.fit_transform(xtrain)\nscaler.transform(xtest)\n\nclf3=SVC(random_state=0,probability=True,C=80.0,gamma=0.00002,kernel='rbf')\nclf3.fit(xtrain,ytrain)\npredictions3=clf3.predict(xtest)\nprobabilities2=clf3.predict_proba(xtest)\n\nprint('accuracy'+' '+'='+' '+str(accuracy_score(ytest,predictions3)))\nprint('ROC score'+' '+'='+' '+str(roc_auc_score(ytest,probabilities2[:,1])))\nprint('f1 score'+' '+'='+' '+str(f1_score(ytest,predictions3)))\nprint('recall score'+' '+'='+' '+str(recall_score(ytest,predictions3)))\nprint('precision score'+' '+'='+' '+str(precision_score(ytest,predictions3)))","60a11c79":"from sklearn.linear_model import LogisticRegression\n\nscaler.fit_transform(xtrain)\nscaler.transform(xtest)\n\nclf4=LogisticRegression(random_state=0,C=0.09,max_iter=10000)\nclf4.fit(xtrain,ytrain)\npredictions4=clf4.predict(xtest)\nprobabilities3=clf4.predict_proba(xtest)\n\nprint('accuracy'+' '+'='+' '+str(accuracy_score(ytest,predictions4)))\nprint('ROC score'+' '+'='+' '+str(roc_auc_score(ytest,probabilities3[:,1])))\nprint('f1 score'+' '+'='+' '+str(f1_score(ytest,predictions4)))\nprint('recall score'+' '+'='+' '+str(recall_score(ytest,predictions4)))\nprint('precision score'+' '+'='+' '+str(precision_score(ytest,predictions4)))","2420a70e":"from sklearn.metrics import roc_curve\n\nfpr,tpr,thresholds=roc_curve(ytest,probabilities[:,1])\nfpr1,tpr1,thresholds1=roc_curve(ytest,probabilities1[:,1])\nfpr2,tpr2,thresholds2=roc_curve(ytest,probabilities2[:,1])\nfpr3,tpr3,thresholds3=roc_curve(ytest,probabilities3[:,1])\n\n\nplt.figure(figsize=(8,8))\nsns.lineplot(y=tpr,x=fpr,ci=None)\nsns.lineplot(y=tpr1,x=fpr1,ci=None)\nsns.lineplot(y=tpr2,x=fpr2,ci=None,color='black')\nsns.lineplot(y=tpr3,x=fpr3,ci=None,color='red')\n\nplt.legend(labels=['Random Forest','Gradient Boosting Classifier','Support Vector Classifier','Logistic Regression'])\nax=plt.gca()\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nplt.tight_layout()","b6e6cfe0":"**Gradient Boosted Classifier**","3435ae30":"**Analysis of Age data**","5ecc7d03":"# Data Preprocessing","a9d47d02":"**Analysis of Insulin data**","f6fb5391":"**In the above analysis we come to know that there are certain entries in the columns glucose, blood pressure,etc which display 0.Which practically is impossible hence we need to clean the data**","f976cdd8":"**Support Vector Machine**","640d5948":"**Analysis of Pregnancies data**","1fc92b0e":"**Logistic Regression**","c64559cf":"# Model Building","943d26ba":"# Feature Correlation","f5a7153b":"**From the above heatmap it is clear that there isnt much coleration among the features that will be used for training the data.The highest being 0.55**\n\n","9df941ec":"**Analysis of GLucose Data**","0094dc08":"**I have replaced the 0 with means of the features for diabetic and non-diabetic people seperately since diabetic people have different blood sugar and inuslin levels than non diabetics. This difference also effects their other vitals.**","eb574776":"**In the above figure i have grouped the age data into 5 categories** \n\n\n**21-33: Young Adults**\n\n**33-45: Middle Aged**\n\n**45-57: Retirement Age**\n\n**57-69  Old**\n\n**69-81  Very Old**","aa0e51db":"**Analysis of Skin Thickness data**","6a01c0f9":"**Analysis of Blood Pressure Data**","3cd52662":"**From the above ROC curve and AUC values Gradient Boosted Classifier has performed the best**","326884aa":"**Analysis of BMI data**","f3d9449d":"# Exploratory Data Analysis","fc20747a":"**Random Forest**","352781c5":"# ROC Curve"}}