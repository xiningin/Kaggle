{"cell_type":{"4ebb90f2":"code","db9617aa":"code","1abba7b2":"code","aea250fe":"code","dcf16e37":"code","2a8bfd51":"code","cd982822":"code","ac191e6b":"code","09b5b3a4":"code","1230b749":"code","6a610ed2":"code","49a78e86":"code","32781257":"code","84c435ec":"code","49c566ca":"code","ca3082eb":"markdown","9b075c5f":"markdown","06229a0f":"markdown","730075d2":"markdown","bd62d636":"markdown"},"source":{"4ebb90f2":"from sklearn import cross_validation\nfrom sklearn import tree\nfrom sklearn import svm\nfrom sklearn import ensemble\nfrom sklearn import neighbors\nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn import preprocessing","db9617aa":"%matplotlib inline \n\nfrom IPython.display import Image\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport tensorflow as tf","1abba7b2":"dataset = pd.read_csv('..\/input\/bigml_59c28831336c6604c800002a.csv')\n\nprint (dataset.shape)\n\n","aea250fe":"\nX = dataset.iloc[:, dataset.columns!='phone number'].values\nX = X[:,1:-1]\ny = dataset.iloc[:, -1].values\nprint(X[0])","dcf16e37":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])\nlw = LabelEncoder()\nX[:, 3] = le.fit_transform(X[:, 3])\nprint(X[0])\nY = dataset[\"churn\"].value_counts()\nsns.barplot(Y.index, Y.values)","2a8bfd51":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","cd982822":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X[0])","ac191e6b":"ann = tf.keras.models.Sequential()\nann.add(tf.keras.layers.Dense(units=8, activation='relu'))\nann.add(tf.keras.layers.Dense(units=8, activation='relu'))\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","09b5b3a4":"ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\nann.fit(X_train, y_train, batch_size = 20, epochs = 100)\n","1230b749":"y_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","6a610ed2":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(\"The accuracy achieved is:\",accuracy_score(y_test, y_pred)*100)","49a78e86":"feature = 'state'\nfig, ax = plt.subplots(1, 2, figsize=(20, 18))\ndataset[dataset.churn == True][feature].value_counts().plot('bar', ax=ax[1]).set_title('State wise-Churned')\ndataset[dataset.churn == False][feature].value_counts().plot('bar', ax=ax[0]).set_title('State wise-Not Churned')\n","32781257":"feature = 'area code'\nfig, ax = plt.subplots(1, 2, figsize=(20, 18))\ndataset[dataset.churn == True][feature].value_counts().plot('bar', ax=ax[1]).set_title('Area code wise-Churned')\ndataset[dataset.churn == False][feature].value_counts().plot('bar', ax=ax[0]).set_title('Area code wise-Not Churned')","84c435ec":"numerical_features = [\"total day charge\",\"total eve charge\",\"total night charge\",\"total intl charge\" ]\ndataset[numerical_features].describe()","49c566ca":"dataset[numerical_features].hist(bins=30, figsize=(20, 14))\n","ca3082eb":"# **BUILDING AND TRAINING OF NEURAL NETWORK**","9b075c5f":"# **CHURN ANALYSIS**# ","06229a0f":"## Dataset \nhttps:\/\/www.kaggle.com\/becksddf\/churn-in-telecoms-dataset\/data\n","730075d2":"> # DATA ANALYSIS","bd62d636":"# **CHURN PREDICTION MODEL TRAINING**"}}