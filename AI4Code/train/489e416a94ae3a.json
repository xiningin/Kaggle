{"cell_type":{"435df364":"code","b934cc37":"code","7d7b2e78":"code","c341d1f6":"code","a293d6fd":"code","6ef3414f":"code","856e0a3b":"code","a41ccd9f":"code","dece42c3":"code","b5c1f7e2":"code","4e38104b":"code","efde2f44":"code","648b9a4d":"code","fb3ca2b2":"code","8874dad2":"code","d20db65a":"code","73a82f0c":"code","3eae5233":"code","51d51e52":"code","d544e04f":"code","beee9d01":"code","546edc2d":"code","ab5ed5da":"code","0350d712":"code","b39f646f":"code","22b6a415":"code","8355f7d7":"code","1050a89c":"code","71264a57":"code","2b955e70":"code","72364b40":"code","a19e6271":"code","74cbbfc8":"code","e38492b1":"code","d19fc079":"code","e42b1b05":"code","0080793f":"code","ff1de2cc":"code","ba1489d1":"code","ff99781a":"code","ba4f0480":"code","ccefe4e3":"markdown","c4a1ac24":"markdown","47654b7f":"markdown","1c3a6aff":"markdown","871a67c3":"markdown","baae280d":"markdown","8f7ffcba":"markdown","1341c890":"markdown","1d643712":"markdown","ac579dab":"markdown","2a47a2d6":"markdown","4b940b36":"markdown","4c46744e":"markdown","95aecb18":"markdown","c0f712a2":"markdown","3a83042d":"markdown","0e7a7b39":"markdown","0d34adec":"markdown","e81eaada":"markdown","d5a18fec":"markdown"},"source":{"435df364":"import numpy as np\nimport pandas as pd\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b934cc37":"df_raw = pd.read_csv(r\"..\/input\/student-performance\/StudentsPerformance.csv\",header=\"infer\")\n\ndf_raw[:3]","7d7b2e78":"df = df_raw.copy()\ndf.describe().T","c341d1f6":"df.isnull().sum()","a293d6fd":"df1 = df[['race\/ethnicity','reading score', 'math score', 'writing score']]\ndf1 = df1.set_index('race\/ethnicity')\ndf2 = df1.cumsum(axis=1)","6ef3414f":"flatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nf, ax = plt.subplots(figsize=(10, 7))\nsns.lineplot(x = df1.index, y = df1['reading score'] , label='reading score',   color=sns.color_palette(\"Set2\", 10)[0])\nsns.lineplot(x = df1.index, y = df1['writing score' ], label='writing score',   color=sns.color_palette(\"Set2\", 10)[1])\nsns.lineplot(x = df1.index, y = df1['math score'], label='math score',   color=sns.color_palette(\"Set2\", 10)[2])\n\nplt.ylabel(\"score\")\nplt.xlabel('race\/ethnicity groups')\nax.legend(ncol=5, loc=\"upper center\", frameon=True)\nsns.despine(left=True, bottom=True)","856e0a3b":"f, ax = plt.subplots(figsize=(8, 6))\n\nsns.lineplot(x = df2.index, y = df2['reading score'] , label='reading score',   color=sns.color_palette(\"Set2\", 10)[0])\nsns.lineplot(x = df2.index, y = df2['writing score' ], label='writing score',   color=sns.color_palette(\"Set2\", 10)[1])\nsns.lineplot(x = df2.index, y = df2['math score'], label='math score',   color=sns.color_palette(\"Set2\", 10)[2])\n\nplt.ylabel(\"score\")\nplt.xlabel('race\/ethnicity groups')\nax.legend(ncol=5, loc=\"upper center\", frameon=True)\nsns.despine(left=True, bottom=True)","a41ccd9f":"df['total_score'] = sum([df['math score'], df['reading score'], df['writing score']])\ndf[:3]","dece42c3":"sns.barplot(x=df['total_score'], y=df['parental level of education'])","b5c1f7e2":"plt.hist(df['math score'], bins=15);","4e38104b":"fig, (ax1,ax2) = plt.subplots(1,2, figsize=(16,6))\n\nax1.set_title('lunch')\nsns.barplot(x = 'lunch', y = 'total_score', data= df, ax=ax1)\n\nax2.set_title('test preparation course')\nsns.barplot(x='test preparation course', y='total_score', data=df, ax=ax2)","efde2f44":"sns.countplot(df['race\/ethnicity'])\nplt.title('Comparison of various groups', fontweight = 30, fontsize = 20)\nplt.xlabel('Groups')\nplt.ylabel('count')\nplt.show()","648b9a4d":"plt.subplots(figsize=(10,5))\nsns.countplot(df['parental level of education'])\nplt.xlabel('Degree')\nplt.title(label = 'Parental Level of Education', fontsize=15,)\nplt.show()","fb3ca2b2":"sns.distplot(df['total_score'], color = 'blue')","8874dad2":"df.info()","d20db65a":"df.groupby('gender')['total_score'].mean()","73a82f0c":"df['gender'] = df['gender'].map({'male': 1, 'female':2})\ndf[:3]","3eae5233":"df.groupby('race\/ethnicity')['total_score'].mean().sort_values(ascending = True)","51d51e52":"df['race\/ethnicity'] = df['race\/ethnicity'].map({'group A': 1, 'group B': 2,\n                                                'group C': 3, 'group D': 4,\n                                                'group E': 5})\ndf[:3]","d544e04f":"df.groupby('parental level of education')['total_score'].mean().sort_values(ascending = True)","beee9d01":"df['parental level of education'] = df['parental level of education'].map({\n                                    'high school': 1, 'some high school': 2,\n                                    'some college': 3, \"associate's degree\": 4,\n                                    \"bachelor's degree\": 5, \"master's degree\": 6})\ndf[:3]","546edc2d":"df.groupby('lunch')['total_score'].mean().sort_values(ascending = True)","ab5ed5da":"df['lunch'] = df['lunch'].map({'free\/reduced': 1, 'standard' : 2})\ndf[:3]","0350d712":"df.groupby('test preparation course')['total_score'].mean().sort_values(ascending = True)","b39f646f":"df['test preparation course'] = df['test preparation course'].map({'none': 1, 'completed ': 2})\ndf[:3]","22b6a415":"df['test preparation course'] = df['test preparation course'].fillna(value=2).astype('int64')\ndf[:3]","8355f7d7":"df_corr = df.corr()\ndf_corr","1050a89c":"df_corr['total_score'].sort_values(ascending=False)","71264a57":"sns.heatmap(df_corr)","2b955e70":"df['average'] = round((df['total_score'] * 100) \/ 300).astype('int64')\ndf[:3]","72364b40":"df['average'].describe()","a19e6271":"def status_check(average):\n    if average >= 60:\n        return '1'\n    else:\n        return '0'","74cbbfc8":"df['status'] = df['average'].apply(status_check)\ndf[:3]","e38492b1":"def getgrade(average):\n    if(average >= 90):\n        return 6\n    if(80 <= average < 90):\n        return 5\n    if(70 <= average < 80):\n        return 4\n    if(60 <= average < 70):\n        return 3\n    if(50 <= average < 60):\n        return 2\n    else :\n        return 1\n\ndf['grades'] = df['average'].apply(lambda x: getgrade(x))\ndf[:3]","d19fc079":"df['grades'].value_counts().sort_values()","e42b1b05":"feature_vectors = df[['gender', 'race\/ethnicity', 'parental level of education','lunch',\n        'test preparation course', 'reading score','math score']].values\ntarget = df['grades'].values\nfeature_vectors.shape, target.shape","0080793f":"from sklearn.model_selection import train_test_split\n\n\nx_train, x_test, y_train, y_test = train_test_split(feature_vectors, target, \n                                                    test_size = 0.25, random_state = 45)","ff1de2cc":"from sklearn.preprocessing import MinMaxScaler\n\nscale = MinMaxScaler()\n\n# feeding the independent variable into the scaler\nx_train = scale.fit_transform(x_train)\nx_test = scale.transform(x_test)","ba1489d1":"from sklearn.linear_model import  LogisticRegression\n\n# creating a model\nmodel = LogisticRegression( max_iter=7000)\n\n# feeding the training data to the model\nmodel.fit(x_train, y_train)\n\n# calculating the classification accuracies\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))","ff99781a":"import sklearn\n\nmodel_svm = sklearn.svm.LinearSVC(penalty='l1', dual=False,loss='squared_hinge',  max_iter=7000)\n\n# feeding the training data to the model\nmodel_svm.fit(x_train, y_train)\n\n# calculating the classification accuracies\nprint(\"Training Accuracy :\", model_svm.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model_svm.score(x_test, y_test))","ba4f0480":"from sklearn.ensemble import RandomForestClassifier\n\n# creating a model\nmodel_rm = RandomForestClassifier()\n\n# feeding the training data to the model\nmodel_rm.fit(x_train, y_train)\n\n# predicting the x-test results\ny_pred = model_rm.predict(x_test)\n\n# calculating the accuracies\nprint(\"Training Accuracy :\", model_rm.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model_rm.score(x_test, y_test))","ccefe4e3":"In order to explore the correations between the features,\n\nwe vectorize the features to put them in the form of numeric representation.","c4a1ac24":"The matrix says that:\n\n1. if the reading score is high, the writing is likely high as well as math score.\n2. relatively, the important features when predict total score are \n   lunch,test preparation course, and parental level of education.","47654b7f":"There are clear relations between features and total_score.\n\nFor further deep exploration, we need t see all the features as in numbers.","1c3a6aff":"2) race\/ethnicity","871a67c3":"group E shows the highest score and group A shows the lowest score. So I lable them accordingly.","baae280d":"1) LogisticRegression","8f7ffcba":"3) parental level of education","1341c890":"## 2.Feature Vectorization","1d643712":"3) Random Forest","ac579dab":"female shows higher score in total, so I assign '1' to male and '2' to female.\n\nIt is like giving the rates for each categories.","2a47a2d6":"## 1. Explore Data","4b940b36":"## 4. Modelling","4c46744e":"4) lunch","95aecb18":"We need to visit following columns:\n\ngender, race\/ethnicity, parental level of education, lunch and test preparation course.\n\nWhat values would be the best for them? probability? ratio? mean?\n\n1) gender","c0f712a2":"## 3. Fit Data","3a83042d":"reference:\n\nhttps:\/\/thecleverprogrammer.com\/2020\/05\/21\/data-science-project-student-performance-analysis-with-machine-learning\/","0e7a7b39":"2) SVM","0d34adec":"Group E shows the highest score than other groups.","e81eaada":"5) test preparation course","d5a18fec":"## 0. Import libraries"}}