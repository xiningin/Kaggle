{"cell_type":{"aa951672":"code","cd958400":"code","a3916e32":"code","99857b9d":"code","e3a3a2fb":"code","eed1aca7":"code","735353ea":"code","64ac5657":"code","22a30f1c":"code","0b978c5e":"code","4fb8918d":"code","6f59b147":"code","0b2e57f1":"code","389a267d":"code","f2e57327":"code","996eb962":"code","2d0a378c":"code","cd00fb9b":"code","2facb37b":"code","f3fb6c6d":"code","44a07730":"code","5f67741a":"code","0505479e":"code","7da46747":"code","d3899db1":"code","bef1aa91":"code","e7cf846d":"code","2eb76573":"code","05efe7df":"code","5bf35562":"code","f5cf1ea8":"markdown","2a628a05":"markdown","accbc0df":"markdown","aa03b27a":"markdown","7a311329":"markdown","afe7ce13":"markdown","690cca81":"markdown","6e94f437":"markdown","590654ea":"markdown","728161d6":"markdown","170c1a59":"markdown","56cf5f7b":"markdown","6d950689":"markdown","c420e1e6":"markdown","95c928a5":"markdown","80f83844":"markdown","720e7e81":"markdown","2d44d7dc":"markdown","244e9837":"markdown","ff13239e":"markdown","d503f669":"markdown","703101f1":"markdown","16c62cc6":"markdown"},"source":{"aa951672":"import math\nimport numpy as np\nimport pandas as pd\nfrom sklearn import linear_model","cd958400":"NYC_temperature_data = \\\n    pd.read_csv(\"\/kaggle\/input\/rania-weather-nyc\/Final_Rania_weather_indoor_NYC.csv\", \\\n                header = 1)\n\nNYC_temperature_data.head()","a3916e32":"NYC_temperature_data.columns","99857b9d":"NYC_temperature_data = \\\n    NYC_temperature_data.rename(columns = \\\n        {'yr':'year',\n         ' mon': 'month',\n         ' day':'day',\n         ' hr':'hour',\n        'Outside TempF':'outside_temperature_F',\n         'Td':'outside_dew_point_temperature_F',\n        ' RH':'outside_relative_humidity',\n         ' Wspd':'wind_speed',\n        ' Wdir':'wind_direction_deg',\n         'pcp1hr':'precipitation_mm',\n        ' CFtot':'cloud_fraction_weather_station',\n        'CFsat':'cloud_fraction_satellite_broken',\n        ' IRsky':'IRsky_broken',\n         ' SWdir':'direct_sunlight',\n        ' SWdiff':'diffuse_sunlight',\n        ' sunzen':'sun_zenith_angle',\n         'sunaz':'sun_azimuth_angle',\n        'Inside TempC':'apartment_temperature_C',\n        'rh':'residential_relative_humidity',\n        'tDewC':'residential_dew_point_temperature_C',\n        'tempC':'house_temperature_C',\n        }).drop(columns = ['rh.1','tDewC.1'])","e3a3a2fb":"NYC_temperature_data.columns","eed1aca7":"# NYC_temperature_data = \\\n#     NYC_temperature_data.rename(\\\n#         columns = {'yr':'year', ' mon': 'month', ' day':'day', ' hr':'hour'}\\\n#     )\nNYC_temperature_data['datetime'] = \\\n    pd.to_datetime(NYC_temperature_data[['year','month','day','hour']])\nNYC_temperature_data['datetime']","735353ea":"temperature_variables = \\\n    ['outside_temperature_F','apartment_temperature_C', 'house_temperature_C']\nimport matplotlib.pyplot as plt\n\nfor temp_var in temperature_variables:\n    NYC_temperature_data[temp_var] = \\\n        NYC_temperature_data[temp_var].replace(-99, np.nan)\n    plt.figure()\n    plt.plot(NYC_temperature_data['datetime'], NYC_temperature_data[temp_var])\n    plt.title(temp_var + ' time series')\n    plt.ylabel(temp_var)\n    plt.xlabel('Date')","64ac5657":"NYC_temperature_data['average_residential_temperature_C'] = \\\n    ((NYC_temperature_data['apartment_temperature_C'] \\\n    + NYC_temperature_data['house_temperature_C']) \/ 2) \n\nNYC_temperature_data['average_residential_temperature_F'] = \\\n    NYC_temperature_data['average_residential_temperature_C'] * 9\/5 + 32\n\nNYC_temperature_data['average_residential_temperature_F']","22a30f1c":"def Calculate_Derived_Variables(NYC_temperature_data, w=0.5):\n    \n    NYC_temperature_data['sunlight_hitting_residence'] = \\\n        (1 - NYC_temperature_data['cloud_fraction_weather_station']\/100) \\\n        * NYC_temperature_data['direct_sunlight'] \\\n        + (NYC_temperature_data['diffuse_sunlight'] \/ 4)\n\n    \n    NYC_temperature_data['wall_or_window_temperature_F'] = \\\n        (w * NYC_temperature_data['average_residential_temperature_F']) \\\n        + ((1 - w) * NYC_temperature_data['outside_temperature_F'])\n\n    NYC_temperature_data['infrared_radiant_balance_F'] = \\\n        NYC_temperature_data['wall_or_window_temperature_F'] ** 4 - \\\n        ( (NYC_temperature_data['average_residential_temperature_F']) ** 4)\n    \n    return NYC_temperature_data","0b978c5e":"w = 0.5\nNYC_temperature_data = Calculate_Derived_Variables(NYC_temperature_data, w)","4fb8918d":"def Get_Average_Residential_Temperature(NYC_temperature_data, measurement_thresh=20):\n    # Get daily average residential temperature\n    NYC_temperature_data['average_residential_temperature_F'] = \\\n        NYC_temperature_data['average_residential_temperature_F'].replace(-99, np.nan)\n    daily_average_residential_temperature_F = \\\n        NYC_temperature_data.groupby(['year','month','day'])\\\n        ['average_residential_temperature_F'].mean().to_frame().reset_index()\n    daily_average_residential_temperature_F['datetime'] = \\\n        pd.to_datetime(daily_average_residential_temperature_F[['year','month','day']])\n    daily_average_residential_temperature_F = \\\n        daily_average_residential_temperature_F.set_index('datetime')\n\n    # Get number of measurements for each day\n    num_daily_res_temp_measurements = \\\n        NYC_temperature_data.groupby(['year','month','day'])\\\n        ['average_residential_temperature_F'].count().reset_index(name = 'count')\n    low_num_res_temp_measurements = \\\n        num_daily_res_temp_measurements[\\\n            num_daily_res_temp_measurements['count'] < measurement_thresh\n        ]\n    datetime_low_num_res_temp_measurements = \\\n        pd.to_datetime(low_num_res_temp_measurements[['year','month','day']])\\\n        .reset_index(drop = True)\n\n    # Remove dates with low number of hourly measurements\n\n    daily_average_res_temp_F = daily_average_residential_temperature_F\n    daily_average_res_temp_F.loc[datetime_low_num_res_temp_measurements,'average_residential_temperature_F'] = np.nan\n    daily_average_res_temp_F = \\\n        daily_average_res_temp_F.rename(columns = {'average_residential_temperature_F':'daily_average_residential_temperature_F'})\n    daily_average_res_temp_F.head()\n    \n    return NYC_temperature_data, daily_average_res_temp_F","6f59b147":"measurement_thresh = 20\nNYC_temperature_data, daily_average_res_temp_F = Get_Average_Residential_Temperature(NYC_temperature_data, measurement_thresh)","0b2e57f1":"def Calculate_Building_Storage_Temperature(daily_average_res_temp_F,decay_constant=2):\n    num_days = 3\n    n_range = list(range(1, num_days + 1))\n\n    building_storage_temperature = [np.nan] * len(daily_average_res_temp_F)\n    for row, temp in enumerate(daily_average_res_temp_F['daily_average_residential_temperature_F']):\n\n        res_temps = daily_average_res_temp_F['daily_average_residential_temperature_F']\\\n        .reset_index(drop = True)\n\n        if row >= num_days:\n            last_few_days_res_temps = \\\n                res_temps.loc[row - num_days : row - 1]\n\n            if last_few_days_res_temps.notnull().all():\n                weighted_res_temps_sum = 0\n                weight_sum = 0\n                for n in n_range:\n                    weight_n = math.e ** (-n \/ decay_constant)\n                    weight_sum += weight_n\n\n                    res_temp_n = res_temps.loc[row - n]\n                    weighted_res_temp_n = weight_n * res_temp_n\n                    weighted_res_temps_sum += weighted_res_temp_n\n\n                building_storage_temperature[row] = \\\n                    weighted_res_temps_sum \/ weight_sum\n\n    daily_average_res_temp_F['daily_building_storage_temperature_F'] = \\\n        building_storage_temperature\n\n    return daily_average_res_temp_F","389a267d":"decay_constant = 2\ndaily_average_res_temp_F = Calculate_Building_Storage_Temperature(daily_average_res_temp_F,decay_constant)\ndaily_average_res_temp_F","f2e57327":"def Get_and_Plot_Daily_Averages(daily_average_res_temp_F, NYC_temperature_data, measurement_thresh = 20, make_plot=True):\n    \n    daily_average_df = daily_average_res_temp_F.drop(columns = ['year','month','day'])\n    \n    derived_vars = ['wall_or_window_temperature_F','infrared_radiant_balance_F']\n    \n    other_vars = [\n        'outside_temperature_F', 'wind_speed',\n    #       'outside_relative_humidity','wind_direction_deg',\\\n    #     'precipitation_mm',\\\n    #       'cloud_fraction_satellite_broken','IRsky_broken',\\\n    #       'sun_zenith_angle','sun_azimuth_angle','residential_relative_humidity',\\\n    ]\n\n    for variable in derived_vars + other_vars:\n        # Get daily averages\n        NYC_temperature_data[variable] = \\\n            NYC_temperature_data[variable].replace(-99, np.nan)\n        daily_average_var = \\\n            NYC_temperature_data.groupby(['year','month','day'])\\\n            [variable].mean().to_frame().reset_index()\n        daily_average_var['datetime'] = \\\n            pd.to_datetime(daily_average_var[['year','month','day']])\n        daily_average_var = daily_average_var.set_index('datetime')\n\n        # Get number of measurements for each day\n        num_daily_measurements = \\\n            NYC_temperature_data.groupby(['year','month','day'])\\\n            [variable].count().reset_index(name = 'count')\n        low_num_measurements = \\\n            num_daily_measurements[num_daily_measurements['count'] < measurement_thresh]\n        datetime_low_num_measurements = \\\n            pd.to_datetime(low_num_measurements[['year','month','day']])\\\n            .reset_index(drop = True)\n\n        # Remove dates with low number of hourly measurements\n        daily_average_var = daily_average_var.drop(datetime_low_num_measurements)\n\n        # Save results of daily averages\n        daily_average_df = pd.merge(daily_average_df, \\\n                        daily_average_var[variable].rename('daily_average_' + variable),\\\n                        left_index = True, right_index = True, how = 'outer')\n\n        if make_plot:\n            plt.figure()\n            plt.plot(daily_average_var.index,daily_average_var[variable])\n            plt.title(variable + ' daily averages')\n            plt.ylabel(variable)\n            plt.xlabel('Date')\n        \n    return daily_average_df","996eb962":"daily_average_df = Get_and_Plot_Daily_Averages(daily_average_res_temp_F, NYC_temperature_data, measurement_thresh)\ndaily_average_df.head()","2d0a378c":"def Get_and_Plot_Half_Day_Averages(NYC_temperature_data, daily_average_df, measurement_thresh = 20, make_plot=True):\n    \n    time_of_day_changing_vars = \\\n        ['direct_sunlight','diffuse_sunlight','sunlight_hitting_residence',\\\n         'cloud_fraction_weather_station']\n\n    # If you want to only count hours of sunlight:\n    # morning_thresh = 4; afternoon_thresh = 5\n\n    # If you want to count all hours:\n    morning_thresh = 10; afternoon_thresh = 10;\n\n    for am_pm_var in time_of_day_changing_vars:\n    #     print(am_pm_var)\n        NYC_temperature_data[am_pm_var] = \\\n            NYC_temperature_data[am_pm_var].replace(-99, np.nan)\n        morning_data = NYC_temperature_data[NYC_temperature_data['hour'].between(0,11)] #.between(6,11)] (only sunlight hours (6am - 11am))\n        afternoon_data = NYC_temperature_data[NYC_temperature_data['hour'].between(12,23)] # .between(12,19)] (only sunlight hours (12 pm - 7pm))\n\n        morning_average_var = \\\n            morning_data.groupby(['year','month','day'])\\\n            [am_pm_var].mean().to_frame().reset_index()\n        morning_average_var['datetime'] = \\\n            pd.to_datetime(morning_average_var[['year','month','day']])\n        morning_average_var = morning_average_var.set_index('datetime')\n\n        afternoon_average_var = \\\n            afternoon_data.groupby(['year','month','day'])\\\n            [am_pm_var].mean().to_frame().reset_index()\n        afternoon_average_var['datetime'] = \\\n            pd.to_datetime(afternoon_average_var[['year','month','day']])\n        afternoon_average_var = afternoon_average_var.set_index('datetime')\n\n        # Get number of measurements for each part of day\n        num_morning_measurements = \\\n            morning_data.groupby(['year','month','day'])\\\n            [am_pm_var].count().reset_index(name = 'count')\n        low_num_morning_measurements = \\\n            num_morning_measurements[num_morning_measurements['count'] < morning_thresh]\n        datetime_low_num_morning_measurements = \\\n            pd.to_datetime(low_num_morning_measurements[['year','month','day']])\\\n            .reset_index(drop = True)\n\n        num_afternoon_measurements = \\\n            afternoon_data.groupby(['year','month','day'])\\\n            [am_pm_var].count().reset_index(name = 'count')\n        low_num_afternoon_measurements = \\\n            num_afternoon_measurements[num_afternoon_measurements['count'] \\\n                                       < afternoon_thresh]\n        datetime_low_num_afternoon_measurements = \\\n            pd.to_datetime(low_num_afternoon_measurements[['year','month','day']])\\\n            .reset_index(drop = True)\n\n        # Remove dates with low number of hourly measurements\n        morning_average_var = \\\n            morning_average_var.drop(datetime_low_num_morning_measurements)\n        afternoon_average_var = \\\n            afternoon_average_var.drop(datetime_low_num_afternoon_measurements)\n\n        # Save results of daily averages\n        daily_average_df = pd.merge(daily_average_df, \\\n                            morning_average_var[am_pm_var]\\\n                            .rename('morning_average_' + am_pm_var), \\\n                            left_index = True, right_index = True, how = 'outer')\n        daily_average_df = pd.merge(daily_average_df, \\\n                            afternoon_average_var[am_pm_var]\\\n                            .rename('afternoon_average_' + am_pm_var), \\\n                            left_index = True, right_index = True, how = 'outer')\n        if make_plot:\n            plt.figure()\n            plt.plot(morning_average_var.index,morning_average_var[am_pm_var])\n            plt.title(am_pm_var + ' morning averages')\n            plt.ylabel(am_pm_var)\n            plt.xlabel('Date')\n\n            plt.figure()\n            plt.plot(afternoon_average_var.index, afternoon_average_var[am_pm_var])\n            plt.title(am_pm_var + ' afternoon averages')\n            plt.ylabel(am_pm_var)\n            plt.xlabel('Date')\n        \n    return daily_average_df","cd00fb9b":"daily_average_df = Get_and_Plot_Half_Day_Averages(NYC_temperature_data, daily_average_df, measurement_thresh)\ndaily_average_df = daily_average_df.reset_index()\ndaily_average_df.head()","2facb37b":" daily_average_df.columns","f3fb6c6d":"def Calculate_Daily_Change_In_Residential_Temperature(daily_average_df):\n\n    daily_average_df = daily_average_df.reset_index()\n    \n    daily_change_in_residential_temperature = [np.nan]\n\n    for row in range(0,len(daily_average_df)-1):\n        daily_change_in_residential_temperature.append( \n            daily_average_df['daily_average_residential_temperature_F'].loc[row+1]\n            - daily_average_df['daily_average_residential_temperature_F'].loc[row]\n        )\n\n    daily_average_df['daily_change_in_average_residential_temperature_from_previous_day_F'] = \\\n        daily_change_in_residential_temperature\n    daily_average_df = daily_average_df.set_index('datetime')\n    \n    return daily_average_df","44a07730":"daily_average_df = Calculate_Daily_Change_In_Residential_Temperature(daily_average_df)","5f67741a":"daily_average_df[['daily_average_residential_temperature_F','daily_change_in_average_residential_temperature_from_previous_day_F']].head(10)","0505479e":"daily_average_df.columns","7da46747":"regression_variables = \\\n    ['daily_change_in_average_residential_temperature_from_previous_day_F', \\\n    'daily_average_outside_temperature_F',\\\n    'daily_average_residential_temperature_F',\\\n     'daily_average_wind_speed',\\\n    'daily_building_storage_temperature_F', \\\n    'morning_average_cloud_fraction_weather_station', \\\n    'afternoon_average_cloud_fraction_weather_station', \\\n    'morning_average_sunlight_hitting_residence', \\\n    'afternoon_average_sunlight_hitting_residence', \\\n    'daily_average_infrared_radiant_balance_F', \\\n    ]","d3899db1":"daily_average_df ","bef1aa91":"def Calculate_Regression_Coefficients(daily_average_df, w, decay_constant):\n    \n    daily_average_df_nulls_removed = daily_average_df[daily_average_df[regression_variables].notnull().all(axis = 1)]\n    \n    # Separate all terms of equation by k coefficient\n    x1 = (daily_average_df_nulls_removed['daily_average_outside_temperature_F'] \\\n        - daily_average_df_nulls_removed['daily_average_residential_temperature_F']).rename('x1')\n\n    x2 = (daily_average_df_nulls_removed['daily_average_wind_speed']\\\n        * (daily_average_df_nulls_removed['daily_average_outside_temperature_F'] \\\n        - daily_average_df_nulls_removed['daily_average_residential_temperature_F'])).rename('x2')\n\n    x3 = (daily_average_df_nulls_removed['daily_building_storage_temperature_F'] \\\n        - daily_average_df_nulls_removed['daily_average_residential_temperature_F']).rename('x3')\n\n    x4 = (daily_average_df_nulls_removed['morning_average_cloud_fraction_weather_station'] \\\n        * daily_average_df_nulls_removed['morning_average_sunlight_hitting_residence']).rename('x4')\n\n    x5 = (daily_average_df_nulls_removed['afternoon_average_cloud_fraction_weather_station'] \\\n        * daily_average_df_nulls_removed['afternoon_average_sunlight_hitting_residence']).rename('x5')\n\n    x6 = daily_average_df_nulls_removed['daily_average_infrared_radiant_balance_F'].rename('x6')\n\n    X = pd.concat([x1, x2, x3, x4, x5, x6], axis = 1)\n    X\n    \n    # y = dTr\/dt which is change in residential temperature\n    y = daily_average_df_nulls_removed['daily_change_in_average_residential_temperature_from_previous_day_F']\n    \n    # Get regression coefficients\n    regr = linear_model.LinearRegression()\n    regr.fit(X, y)\n    regression_coefficients = regr.coef_\n    \n    # Get line defined by regression coefficients\n    predicted_change_in_temperature = (X*regression_coefficients).sum(axis=1)\n    \n    # Plot regression line against actual change in temperature\n    actual_change_in_temperature = y\n    plt.figure()\n    plt.plot(\n         daily_average_df_nulls_removed.index,\n         actual_change_in_temperature,\n         predicted_change_in_temperature,\n    )\n    plt.legend(['actual','predicted'])\n    plt.xlabel('Date')\n    plt.ylabel('Daily Change in Temperature (F)')\n    plt.title('Multivariable Regression-Predicted and Actual Daily Change in Temperature.\\n'\n             'w: ' + str(w) + '\\ntau: ' + str(decay_constant))\n    \n    return regression_coefficients, predicted_change_in_temperature","e7cf846d":"regression_coefficients, predicted_change_in_temperature = Calculate_Regression_Coefficients(daily_average_df, w, decay_constant)","2eb76573":"def Main(NYC_temperature_data, measurement_thresh, decay_constant, w):\n\n    NYC_temperature_data = Calculate_Derived_Variables(NYC_temperature_data, w)\n    NYC_temperature_data, daily_average_res_temp_F = Get_Average_Residential_Temperature(NYC_temperature_data, measurement_thresh)\n    daily_average_res_temp_F = Calculate_Building_Storage_Temperature(daily_average_res_temp_F,decay_constant)\n    daily_average_df = Get_and_Plot_Daily_Averages(daily_average_res_temp_F, NYC_temperature_data, measurement_thresh, make_plot = False)\n    daily_average_df = Get_and_Plot_Half_Day_Averages(NYC_temperature_data, daily_average_df, measurement_thresh, make_plot = False)\n    daily_average_df = Calculate_Daily_Change_In_Residential_Temperature(daily_average_df)\n    regression_coefficients, predicted_change_in_temperature = Calculate_Regression_Coefficients(daily_average_df, w, decay_constant)\n    \n    return NYC_temperature_data, daily_average_df, regression_coefficients, predicted_change_in_temperature ","05efe7df":"decay_constant_list = list(range(1,5))\ndecay_constant_list\nw_array = 2.5\/10 * np.array(list(range(0,5)))\n\nfor decay_constant in decay_constant_list:\n    for w in w_array:\n        \n        NYC_temperature_data, daily_average_df, regression_coefficients, predicted_change_in_temperature = \\\n            Main(NYC_temperature_data, measurement_thresh, decay_constant, w)","5bf35562":"# import math\n# decay_constant = 2\n# num_days = 3\n# num_hours = num_days * 24\n# n_range = list(range(1, num_hours + 1))\n# building_storage_temperature = [np.nan] * len(NYC_temperature_data)\n\n# for row, temp in enumerate(NYC_temperature_data['residential_temperature_C']):\n    \n#     res_temps = NYC_temperature_data['residential_temperature_C']\n#     if row >= (3 * 24):\n        \n#         last_few_days_res_temps = \\\n#             res_temps.loc[row - num_hours:row]\n        \n#         if last_few_days_res_temps.notnull().all():\n            \n#             weighted_res_temps_sum = 0\n#             weight_sum = 0\n#             for n in n_range:\n#                 weight_n = math.e**(-n \/ decay_constant)\n#                 weight_sum += weight_n\n    \n#                 res_temp_n = res_temps.loc[row - n]\n#                 weighted_res_temp_n = weight_n * res_temp_n\n#                 weighted_res_temps_sum += weighted_res_temp_n\n    \n#             building_storage_temperature[row] = \\\n#                 weighted_res_temps_sum \/ weight_sum\n        \n# NYC_temperature_data['hourly_building_storage_temperature'] = \\\n#     building_storage_temperature\n\n# NYC_temperature_data[['datetime','residential_temperature_C',\\\n#     'building_storage_temperature']].loc[1500:1550]\n# NYC_temperature_data['residential_temperature_C'][1500]\n\n# NYC_temperature_data['building_storage_temperature'][1572]","f5cf1ea8":"# 3. Multiple regression","2a628a05":"# Read in data & inspect it","accbc0df":"### Get daily average residential temperature","aa03b27a":"# Scrap Code","7a311329":"dTr\/dt = 'daily_change_in_average_residential_temperature_from_previous_day_F'\n\n= ((outdoor conduction) + (building conduction) + (solar transfer) + (IR transfer))\n\n= (k1 + k2*W)(Ta - Tr) + k3(Tb-Tr) + (k4 * CFm + k5 * CFa)*S + k6*(Tw^4 - Tr^4)\n\n= k1*(Ta - Tr) + k2*W*(Ta-Tr) + k3(Tb-Tr) + k4*CFm*S + k5 * CFa * S + k6*(Tw^4 - Tr^4)\n\n\n= k1 * (daily_average_outside_temperature_F - daily_average_residential_temperature_F)\n+ k2 * daily_average_wind_speed * (daily_average_outside_temperature_F - daily_average_residential_temperature_F) \n+ k3 * (building_storage_temperature - daily_average_residential_temperature) \n+ (k4 * cloud_fraction_morning * sunlight_hitting_residence_morning)\n+ (k5 * cloud_fraction_afternoon * sunlight_hitting_residence_afternoon)\n+ k6 * (infrared_radiant_balance)","afe7ce13":"# 6. Adjust storage temperature conduction constant","690cca81":"### Calculate building storage temperature","6e94f437":"## assumed_values: w & decay_constant","590654ea":"## rename columns so it's easier to follow","728161d6":"Things to check:\n- how to use apartment vs. house temperature?\n- use fahrenheit or celsius? We assumed Fahrenheit...\n","170c1a59":"# 2. Daily Averages","56cf5f7b":"## Plug variables into regression","6d950689":"## Recalculate building storage temperature using: dTs\/dt = ks(Tr \u2013 Ts) ","c420e1e6":"## Get daily averages & make plots","95c928a5":"# 5. Calculate storage temp from conductive heat flow, re-do regression, and compare","80f83844":"## Remove NaNs","720e7e81":"## Get morning averages","2d44d7dc":"## Calculate daily change in temperature of building (dTr\/dt)","244e9837":"# 4. Adjust assumed values","ff13239e":"Make column of the average of the temperature variables","d503f669":"# 1. Plot temperature data","703101f1":"cloudy day: cloud_fraction = 100\n( 1 - cloud_fraction) * direct-sunlight\n= (1 - 1) * direct-sunlight \n= 0 * direct_sunlight = 0\n\nsunny day: cloud_fraction = 0\n( 1 - cloud_fraction) * direct-sunlight\n= (1 - 0) * direct_sunlight\n= 1 * direct-sunlight = direct_sunlight","16c62cc6":"## Calculate derived variables"}}