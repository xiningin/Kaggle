{"cell_type":{"09e90ec7":"code","4d61fbba":"code","8995fa89":"code","f35bd776":"code","7b8748e2":"code","9c8d2066":"code","c2fac648":"code","4a9bb12c":"code","a9dde280":"code","3ef799f4":"code","e054fbcf":"code","ff981f24":"code","5a696075":"code","d7055d98":"code","dc66e119":"code","f409e44b":"code","0ac1c178":"code","25ef6bde":"code","3aa0fb75":"code","dc717c12":"code","bbaf47b9":"code","6d1738f9":"code","07006563":"markdown","525b74bb":"markdown","3683f17b":"markdown","971cad3e":"markdown","7750af31":"markdown"},"source":{"09e90ec7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d61fbba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"dark\")\n!pip install xlrd\n!pip install autoviz\nfrom autoviz.AutoViz_Class import AutoViz_Class\n#Instantiate the AutoViz class\nAV = AutoViz_Class()\n","8995fa89":"df = pd.read_csv(\"\/kaggle\/input\/diamonds\/diamonds.csv\", sep = ',')\ndf.head()","f35bd776":"df_viz = AV.AutoViz(\"\/kaggle\/input\/diamonds\/diamonds.csv\")","7b8748e2":"df.info()","9c8d2066":"df.describe()","c2fac648":"df.isnull().any().sum()","4a9bb12c":"df.columns.unique()","a9dde280":"col = ['cut', 'color', 'clarity']\nfor col in col:\n    print('unique values are as below:', '\\n', col, '\\n', df[col].unique())\n    ","3ef799f4":"col = ['carat', 'depth', 'table']\nfor col in col:\n    plt.figure(figsize = (15,15))\n    sns.scatterplot(x= col, y = 'price' , hue = 'cut', data = df)\n    plt.show()\n    plt.figure(figsize = (15,15))\n    sns.scatterplot(x= col, y = 'price' , hue = 'color', data = df)\n    plt.show()\n    plt.figure(figsize = (15,15))\n    sns.scatterplot(x= col, y = 'price', hue = 'clarity', data = df)\n    plt.show()\n    ","e054fbcf":"df.columns","ff981f24":"plt.figure(figsize=(10,7))\ng = sns.FacetGrid(df, col=\"cut\", hue ='color' )\ng.map(sns.scatterplot, \"price\", \"carat\", alpha=.7)\ng.add_legend()","5a696075":"plt.figure(figsize=(10,7))\ng = sns.FacetGrid(df, col=\"clarity\", hue ='cut' )\ng.map(sns.scatterplot,\"carat\", 'price', alpha=.7)\ng.add_legend()","d7055d98":"#df.cut = le.fit_transform(df['cut'])\n#df.color = le.fit_transform(df['color'])\n#df.clarity = le.fit_transform(df['clarity'])\ndf = pd.get_dummies(df)","dc66e119":"df.head(2)","f409e44b":"df = df.drop(['Unnamed: 0'], axis = 1)\ndf.shape\ndf.columns\n","0ac1c178":"plt.figure(figsize = (15,10))\n\ncorr =df.corr()\nsns.heatmap(corr, cmap=\"coolwarm\", linewidths=1)","25ef6bde":"Q1 = df.quantile(0.2)\nQ3 = df.quantile(0.8)\nIQR = Q3 - Q1\n#print(IQR)","3aa0fb75":"df_out = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]\ndf_out.head()\n                                  ","dc717c12":"sns.pairplot(df_out, vars=['carat', 'depth','table','price', 'x','y','z'])","bbaf47b9":"# multiple groupby (carat and x both)\ndf1 = df_out.groupby(['x', 'carat']).count()['price']\nplt.figure(figsize=(10,7))  \n# plot the result\ndf1.plot()\nplt.xticks(rotation=45)\nplt.show()","6d1738f9":"# multiple groupby (carat and depth both)\ndf1 = df_out.groupby(['carat', 'price']).count()['depth']\nplt.figure(figsize=(10,7))  \n# plot the result\ndf1.plot()\nplt.xticks(rotation=45)\nplt.show()","07006563":"# Inference from above scatterplot\n1. Diamonds with carat range between 2-3 & cut betwen ideal & premium fetch higher price\n2. Diamonds with carat range between 2-3 & colors 'i' & 'j' fetch higher price\n3. Diamonds with carat range between 2-3 & clarity \"SI2 & SI1\" fetch higher price\n4. Diamonds with depth range between 60-65 & cut good, very good & Ideal fetch higher price\n5. Diamonds with table range between 60-70 & cut good, premium fetch higher price\n6. Diamonds with table range between 60-70 & color \"I\" fetch higher price","525b74bb":"> # ***Heat Map Showing relationship***","3683f17b":"# Pairplot after removing outliers","971cad3e":"> # ***Using Goupby Function***","7750af31":"# > > ***Removing Outliers***"}}