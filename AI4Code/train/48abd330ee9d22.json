{"cell_type":{"bf256b32":"code","d699417a":"code","cb7f999b":"code","4463981c":"code","0555863e":"code","6f47e5c1":"code","d840a0a5":"code","ce9609be":"code","63d57fb6":"code","e0215377":"code","bf6d38b4":"code","376b40cb":"code","8f788112":"code","95aa24eb":"code","1e6340e0":"code","7e6c6889":"code","f5c8d569":"code","91ecfa24":"code","f24647b3":"code","dcf78635":"markdown","300c959d":"markdown","b72189cd":"markdown"},"source":{"bf256b32":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport datetime","d699417a":"# \"timestamp\" - timestamp field for grouping the data\n# \"cnt\" - the count of a new bike shares\n# \"t1\" - real temperature in C\n# \"t2\" - temperature in C \"feels like\"\n# \"hum\" - humidity in percentage\n# \"wind_speed\" - wind speed in km\/h\n# \"weather_code\" - category of the weather\n# \"is_holiday\" - boolean field - 1 holiday \/ 0 non holiday\n# \"is_weekend\" - boolean field - 1 if the day is weekend\n# \"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\n# \"weather_code\" category description:\n# 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity\n# 2 = scattered clouds \/ few clouds\n# 3 = Broken clouds\n# 4 = Cloudy\n# 7 = Rain\/ light Rain shower\/ Light rain\n# 10 = rain with thunderstorm\n# 26 = snowfall\n# 94 = Freezing Fog","cb7f999b":"df = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\")\ndf.head()","4463981c":"df.describe()","0555863e":"df.info()","6f47e5c1":"df.columns","d840a0a5":"# plot heatmap with numeric features\nplt.figure(figsize=(16,5))\nsns.heatmap(data=df.corr(), cmap='YlGnBu', annot=True)\nplt.show()","ce9609be":"# Format and make date, hour, weekday name, weekday number, month features\n\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf['date'] = df['timestamp'].dt.date\ndf['hour'] = df['timestamp'].dt.hour\ndf['weekday_name'] = df['timestamp'].dt.weekday_name\ndf['weekday'] = df['timestamp'].dt.weekday\ndf['month'] = df['timestamp'].dt.month","63d57fb6":"df.head()","e0215377":"# Bikeshares by Time of Day\n\ndata_hour = df.loc[:, ['hour', 'cnt']]\ndata_hour_mean = data_hour.groupby('hour').mean()['cnt'].round()\n\n# Plot values calculated above\nplt.figure(figsize=(16,5))\nplt.bar(data_hour_mean.index, data_hour_mean, color='lightgreen')\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Average Number of BikeShares\")\nplt.xticks([0,2,4,6,8,10,12,14,16,18,20,22])\nplt.title(\"Bikeshares by Time of Day\")","bf6d38b4":"# Bikeshares by Day of Week\n\ndata_weekday = df.loc[:, ['weekday_name', 'cnt']]\ndata_weekday_mean = data_weekday.groupby('weekday_name').mean()['cnt'].round()\n\nday_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ndata_weekday_mean = data_weekday_mean.reindex(index = day_order)\n\nplt.figure(figsize=(10,5))\nplt.bar(data_weekday_mean.index, data_weekday_mean)\nplt.xlabel(\"Day of Week\")\nplt.ylabel(\"Average Number of BikeShares\")\nplt.title(\"Bikeshares by Day of Week\")","376b40cb":"# Plot weekdays vs weekends\n# \"is_weekend\" - boolean field - 1 if the day is weekend\n\ndf['is_weekend'] = df['is_weekend'].map({0: \"weekday\", 1:\"Weekend\"})\n\ndf_weekdays_vs_weekends =df.groupby(['is_weekend']).mean()['cnt']\n\ndf_weekdays_vs_weekends.plot(kind='bar')\nplt.xlabel(\"weekdays\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.title(\"Bikeshares by weekdays\")","8f788112":"# Plot holidays vs working days\n# \"is_holiday\" - boolean field - 1 holiday \/ 0 non holiday\n\ndf['is_holiday'] = df['is_holiday'].map({0: \"non holiday\", 1:\"holiday\"})\n\ndf_hoiday =df.groupby(['is_holiday']).mean()['cnt']\ndf_hoiday.plot(kind='bar')\nplt.xlabel(\"holidays\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.title(\"Bikeshares by holidays\")","95aa24eb":"# Plot season vs Avg. Number of BikeShares\n# \"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\ndf['season_new'] = df['season'].map({0:\"spring\", 1:\"summer\", 2:\"fall\", 3:\"winter\"})\n\ndf_season =df.groupby(['season_new']).mean()['cnt']\n\ndf_season.plot(kind='bar')\nplt.xlabel(\"season\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.title(\"Bikeshares by season\")","1e6340e0":"df_date = df.groupby(['date']).sum()['cnt']\nplt.figure(figsize=(16,5))\ndf_date.plot()\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of BikeShares \")\nplt.title(\"Bikeshares by Date\")","7e6c6889":"df_month = df.groupby(['month']).mean()['cnt'].round()\n\nplt.figure(figsize=(16,5))\nplt.bar(df_month.index, df_month)\nplt.xlabel(\"Month\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.xticks([1,2,3,4,5,6,7,8,9,10,11,12])\nplt.suptitle(\"Bikeshares by Month\")","f5c8d569":"#Bikeshares by Weather condition\n\n# \"weather_code\" category description:\n# 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity\n# 2 = scattered clouds \/ few clouds\n# 3 = Broken clouds\n# 4 = Cloudy\n# 7 = Rain\/ light Rain shower\/ Light rain\n# 10 = rain with thunderstorm\n# 26 = snowfall\n# 94 = Freezing Fog\n\ndf['weather_code'] = df['weather_code'].map({1:\"Clear\", 2:\"few clouds\", 3:\"Broken clouds\", 4:\"Cloudy\", \n                                             7:\"light Rain shower\", 10:\"rain with thunderstorm\", 26:\"snowfall\", 94:\"Freezing Fog\"})\n\ndf_weather = df.groupby(['weather_code']).mean()['cnt'].round()\n\nplt.figure(figsize=(10,5))\nplt.bar(df_weather.index, df_weather)\nplt.xlabel(\"Weather Condition\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.xticks(rotation=45,ha='right')\nplt.title(\"Bikeshares by Weather condition\")","91ecfa24":"#Bikeshares by weekday and day hours\n\ndf_day_vs_hour = df.loc[:,['weekday_name','hour','cnt']]\ndf_day_vs_hour_mean = pd.pivot_table(df_day_vs_hour,index=[\"weekday_name\"],values=[\"cnt\"], columns=[\"hour\"])\n\nday_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ndf_day_vs_hour_mean = df_day_vs_hour_mean.reindex(index = day_order)\n\nplt.figure(figsize=(25,5))\ng = sns.heatmap(data=df_day_vs_hour_mean, cmap=\"BuGn\", annot=True, linewidths=.5, fmt=\".1f\" )\nplt.xlabel(\"Day Hours\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.xticks(rotation=45,ha='right')\nplt.title(\"Bikeshares by weekday and day hours\")","f24647b3":"# Plot season vs day of week\n# \"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\ndf_season_vs_hour = df.loc[:,['season','weekday_name','cnt']]\n\ndf_season_vs_hour[\"season\"] = df_season_vs_hour[\"season\"].map({0: \"spring\", 1: \"summer\", 2: \"fall\",3: \"winter\"})\n\ndf_season_vs_hour_mean = pd.pivot_table(df_season_vs_hour,index=[\"weekday_name\"],values=[\"cnt\"], columns=[\"season\"], aggfunc=\"mean\")\n\nday_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\ndf_season_vs_hour_mean = df_season_vs_hour_mean.reindex(index = day_order)\n\nplt.figure(figsize=(10,5))\ng = sns.heatmap(data=df_season_vs_hour_mean, cmap=\"BuGn\", linewidths=.5, annot=True, fmt=\".1f\" )\nplt.xlabel(\"weekday_name\")\nplt.ylabel(\"Avg. Number of BikeShares \")\nplt.title(\"Bikeshares by Season and day of week\")","dcf78635":"# EDA","300c959d":"# Reading and knowing the data set","b72189cd":"# Importiing Libraries"}}