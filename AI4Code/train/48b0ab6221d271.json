{"cell_type":{"ddd96d1a":"code","3e946e9b":"code","87a559f7":"code","0ed877d4":"code","3e78c016":"code","87cb75d4":"code","9587f1a7":"code","08e7493e":"code","e21d61ff":"code","7d05e439":"code","8f66d2ee":"code","83406751":"code","b86d23c5":"code","960aadc7":"code","45253226":"code","b97a98d4":"code","3c3bed09":"code","03cb184e":"code","264a0870":"code","06c9a80e":"code","c974f17a":"code","597644bc":"code","ec79c8fb":"code","15606260":"code","29a821c9":"code","971aa41b":"code","f265280a":"code","a3501caf":"code","cdf0d6fa":"code","fe0299ff":"code","74dddc07":"code","0d410e08":"markdown","3c1c544f":"markdown","988de85e":"markdown","c13fe06a":"markdown","1274afc8":"markdown"},"source":{"ddd96d1a":"import pandas as pd  # data analysis library\nimport numpy as np  # comprehensive mathematical functions, random number generators, linear algebra routines, Fourier transforms, and more\nimport matplotlib.pyplot as plt  # provides an implicit way of plotting\nimport seaborn as sns  # for visualization\nfrom tqdm import tqdm  # progressbar decorator for iterators\nimport os  # for operating system\n\nimport warnings  # error processing\nwarnings.filterwarnings(\"ignore\")","3e946e9b":"train=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')    # read the train data file\ntest=pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')    # read the test data file","87a559f7":"print(\"\\n Name of the columns train data \\n \", train.columns.tolist(), '\\n')  # let's see the name of the columns train data\nprint('\\n Name of the columns test data \\n', test.columns.tolist(), '\\n')  # let's see the name of the columns test data","0ed877d4":"print('total number of columns train data', len(train.columns.tolist()))  # total number of columns\nprint('total number of columns test data', len(test.columns.tolist()))  # total number of columns","3e78c016":"train.head()  # display the first five rows of table data train","87cb75d4":"train.info()  # dataframe info","9587f1a7":"train.describe()  # dataframe statistics","08e7493e":"cols=train.columns.tolist()\nfig, ax = plt.subplots(28,2,figsize=(16,80))\nfor i in tqdm(range(56)):\n    if i<56:\n        r=i\/\/2\n        c=i%2\n        sns.histplot(train[train.Cover_Type==1][cols[i]], label=cols[i]+' Cover_Type=1', ax=ax[r,c], color='black',bins=20)\n        sns.histplot(train[train.Cover_Type==2][cols[i]], label=cols[i]+' Cover_Type=2', ax=ax[r,c], color='C1',bins=20)\n        sns.histplot(train[train.Cover_Type==3][cols[i]], label=cols[i]+' Cover_Type=3', ax=ax[r,c], color='C2',bins=20)\n        sns.histplot(train[train.Cover_Type==4][cols[i]], label=cols[i]+' Cover_Type=4', ax=ax[r,c], color='C3',bins=20)\n        sns.histplot(train[train.Cover_Type==5][cols[i]], label=cols[i]+' Cover_Type=5', ax=ax[r,c], color='C4',bins=20)\n        sns.histplot(train[train.Cover_Type==6][cols[i]], label=cols[i]+' Cover_Type=6', ax=ax[r,c], color='C5',bins=20)\n        sns.histplot(train[train.Cover_Type==7][cols[i]], label=cols[i]+' Cover_Type=7', ax=ax[r,c], color='C6',bins=20)\n        ax[r,c].legend()\n        ax[r,c].grid()\n    else:\n        r=i\/\/2\n        c=i%2\n        ax[r,c].axis(\"off\")       \nplt.show()","e21d61ff":"len(train['Id'].unique())  # Counting the number of unique values in a column","7d05e439":"df1 = train[0:50]\nplt.figure(figsize=(30, 30))\n\nsns.lineplot(data=df1)","8f66d2ee":"# train.value_counts()  # Counting the number of values","83406751":"train.groupby('Elevation').count()","b86d23c5":"#Check if there'is null values\ntrain.isnull().sum()","960aadc7":"train.iloc[:,:].hist(figsize=(18,18))\nplt.show()","45253226":"cols = [e for e in test.columns if e not in ('Id')]\ncontinous_features = cols[:10]\ncategorical_features = cols[10:]\n# plot continous features \ni = 1\nplt.figure()\nfig, ax = plt.subplots(2, 5,figsize=(20, 12))\nfor feature in continous_features:\n    plt.subplot(2, 5,i)\n    sns.histplot(train[feature],color=\"blue\", kde=True,bins=100, label='train_'+feature)\n    sns.histplot(test[feature],color=\"olive\", kde=True,bins=100, label='test_'+feature)\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show() ","b97a98d4":"test.head()  # display the first five rows of table data test","3c3bed09":"len(test['Id'].unique())  # Counting the number of unique values in a column","03cb184e":"test.info()  # dataframe info","264a0870":"test.describe()  # dataframe statistics","06c9a80e":"test.iloc[:,:].hist(figsize=(18,18))\nplt.show()","c974f17a":"df2 = test[0:50]\nplt.figure(figsize=(30, 30))\n\nsns.lineplot(data=df2)","597644bc":"#Check if there'is null values\ntest.isnull().sum()","ec79c8fb":"sns.catplot(x=\"Cover_Type\", kind=\"count\", palette=\"ch:.25\", data=train)","15606260":"train.Cover_Type.value_counts()","29a821c9":"fig, ax = plt.subplots()\nsns.countplot(x='Cover_Type', data=train, order=sorted(train['Cover_Type'].unique()), ax=ax)\nax.set_ylim(0, 2563000)\nax.set_title('Cover_Type Distribution', weight='bold')\nplt.show()","971aa41b":"corr = train[continous_features+['Cover_Type']].corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(3)","f265280a":"corr=train.corr()\nv=10\ncolmn = corr.nlargest(v, 'Cover_Type')['Cover_Type'].index \nxm = np.corrcoef(train[colmn].values.T)\nsns.set(font_scale=1.25)\nplt.figure(figsize=(18, 18))\nhm = sns.heatmap(xm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10},yticklabels=colmn.values, xticklabels=colmn.values)\nplt.show()","a3501caf":"train.iloc[:, :-1].describe().T.sort_values(by='std' , ascending = False).style.background_gradient().bar(subset=[\"max\"], color='green').bar(subset=[\"mean\",], color='blue')","cdf0d6fa":"print('\\n Before \\n')\nprint('total number of columns train data', len(train.columns.tolist()))  # total number of columns\nprint('total number of columns test data', len(test.columns.tolist()))  # total number of columns\n\n# since id does not carry any information, we will delete this column in both data sets\ntrain.drop([\"Id\"] , axis = 1 , inplace = True)\ntest.drop([\"Id\"] , axis = 1 , inplace = True)\n\nprint('\\n After \\n')\nprint('total number of columns train data', len(train.columns.tolist()))  # total number of columns\nprint('total number of columns test data', len(test.columns.tolist()))  # total number of columns","fe0299ff":"\nTARGET = 'Cover_Type'\nFEATURES = [col for col in train.columns if col not in ['id', TARGET]]\nRANDOM_STATE = 2021\n\ndf = pd.concat([train[FEATURES], test[FEATURES]], axis=0)\ncat_features = [col for col in FEATURES if df[col].nunique() < 25]\ncont_features = [col for col in FEATURES if df[col].nunique() >= 25]\ndel df\nplt.pie([len(cat_features), len(cont_features)],labels=['Categorical', 'Continuos'],autopct='%1.1f%%')\nplt.show()","74dddc07":"ncols = 5\nnrows = int(len(cont_features) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(18, 8), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = cont_features[r*ncols+c]\n        sns.kdeplot(x=train[col], ax=axes[r, c],label='Train data')\n        sns.kdeplot(x=test[col], ax=axes[r, c],label='Test data')\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=8, fontweight='bold')\n        axes[r, c].tick_params(labelsize=5, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(4)\n        axes[r, c].yaxis.offsetText.set_fontsize(4)\nplt.show()","0d410e08":"## Target distibution","3c1c544f":"Here we see that there is a significant imbalance in the output values. Especially when the value is 5 only in one case. All this makes learning very difficult.","988de85e":"the only difference is in the presence of one more column in the test date frame","c13fe06a":"### TPS-12-21 data vizualization for beginners","1274afc8":"### Features correlation"}}