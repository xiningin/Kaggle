{"cell_type":{"3fc85a71":"code","d43f283a":"code","f23ae872":"code","41d46a02":"code","71a3c01e":"code","793043de":"code","53a92c37":"code","772b2a06":"code","5b4dfeca":"code","8be2887f":"code","599e1862":"code","8ad84d88":"code","d89371f0":"code","70cc1a65":"code","7cd06ba5":"code","52ac5441":"code","e37352c4":"code","27cbafd6":"code","59d7e446":"markdown","a52253aa":"markdown","7df1de94":"markdown","15a5604c":"markdown","9473cf6e":"markdown","8cbe264a":"markdown","755c33ee":"markdown"},"source":{"3fc85a71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d43f283a":"RANDOM_STATE = 42\nna_filling = \"imputer\"\nscaling = False\noverSample = True","f23ae872":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random\nimport numpy as np\nimport pandas as pd\n\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, log_loss, mean_squared_error, mean_absolute_error, f1_score","41d46a02":"train_df = pd.read_csv(\"\/kaggle\/input\/killer-shrimp-invasion\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/killer-shrimp-invasion\/test.csv\")\n\ncolumns = list(train_df.columns)\n\nfeatures = [\n    'Salinity_today', \n    'Temperature_today', \n    'Substrate', \n    'Depth', \n    'Exposure', \n\n    'Temperature_today_exp', \n    'Depth_log', \n    'Exposure_log', \n    'Salin_div_depth',\n    'Temp_div_depth',\n    \n]\n\ncategoricals = [\n    'Substrate',\n]\n\nnumerical_features = [f for f in features if f not in categoricals]\n\ntarget = 'Presence'\n\n\n# init\nfor f in features:\n    if f not in train_df:\n        train_df[f] = 0.0\n        test_df[f]  = 0.0","71a3c01e":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\n\nif na_filling == \"imputer\":\n    imputer = IterativeImputer(max_iter = 10, random_state = RANDOM_STATE)\n    imputer.fit(train_df[features])\n    train_df[features] = pd.DataFrame(imputer.transform(train_df[features]), columns = features)\n    test_df[features] = pd.DataFrame(imputer.transform(test_df[features]), columns = features)\n\nelse:\n    train_df[numerical_features] = train_df[numerical_features].fillna(train_df[numerical_features].median())\n    test_df[numerical_features] = test_df[numerical_features].fillna(test_df[numerical_features].median())\n\n    train_df[categoricals] = train_df[categoricals].fillna(train_df[categoricals].mode().iloc[0])\n    test_df[categoricals] = test_df[categoricals].fillna(test_df[categoricals].mode().iloc[0])","793043de":"train_df['Exposure_log'] = np.log(train_df['Exposure'])\ntest_df['Exposure_log']  = np.log(test_df['Exposure'])\n\ntrain_df['Depth_log'] = np.log(np.abs(train_df['Depth']))\ntest_df['Depth_log'] = np.log(np.abs(test_df['Depth']))\n\ntrain_df['Temperature_today_exp'] = np.exp(train_df['Temperature_today'])\ntest_df['Temperature_today_exp'] = np.exp(test_df['Temperature_today'])\n\ntrain_df['Temp_div_depth'] = train_df['Temperature_today'] \/ train_df['Depth']\ntest_df['Temp_div_depth'] = test_df['Temperature_today']   \/ test_df['Depth']\n\ntrain_df['Salin_div_depth'] = train_df['Salinity_today'] \/ train_df['Depth']\ntest_df['Salin_div_depth'] = test_df['Salinity_today']   \/ test_df['Depth']","53a92c37":"features = set(features)\nfor df in [train_df, test_df]:\n    for i in range(2, 7):\n        new_feature = f'Temperature_today^{i}'\n        df[new_feature] = df['Temperature_today'] ** i\n        features.add(new_feature)\n        \nfeatures = list(features)","772b2a06":"train_df.head(5)","5b4dfeca":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf = pd.concat([train_df[numerical_features], test_df[numerical_features]], ignore_index=True)\nscaler.fit(df[numerical_features])","8be2887f":"models = []\n\nfor turn_i in range(10):\n    ros = RandomOverSampler()\n    _, _ = ros.fit_resample(train_df[features], train_df.Presence)\n    train_idx = ros.sample_indices_\n    _, _ = ros.fit_resample(train_df[features], train_df.Presence)\n    val_idx = ros.sample_indices_\n    \n    x_train, x_val = train_df.loc[train_idx, features], train_df.loc[val_idx, features]\n    y_train, y_val = train_df.loc[train_idx, target], train_df.loc[val_idx, target]\n    \n    model = CatBoostClassifier(iterations=50, verbose=False)\n    model.fit(x_train, y_train)\n    val_pred = model.predict(x_val)\n    score = roc_auc_score(y_val, val_pred)\n    models.append([score, turn_i])\n    model.save_model(f\"model_{turn_i}.cbm\")\n    print('Turn: {} score: {}'.format(turn_i, score))","599e1862":"models.sort(key=lambda x: x[0])\nbest_model_i = models[-1][1]\nbest_model = model.load_model(f\"model_{best_model_i}.cbm\")","8ad84d88":"import shap\nshap.initjs()\n\nexplainer = shap.TreeExplainer(best_model)\nshap_values = explainer.shap_values(train_df[features])","d89371f0":"s_i = 100\nshap.force_plot(explainer.expected_value, shap_values[s_i,:], train_df[features].iloc[s_i,:])","70cc1a65":"s_i = 0\nshap.force_plot(explainer.expected_value, shap_values[s_i,:], train_df[features].iloc[s_i,:])","7cd06ba5":"shap.dependence_plot(\"Temperature_today\", shap_values, train_df[features])","52ac5441":"shap.summary_plot(shap_values, train_df[features])","e37352c4":"shap.summary_plot(shap_values, train_df[features], plot_type=\"bar\")","27cbafd6":"y_probas = best_model.predict_proba(test_df[features])\nresult = pd.read_csv(\"\/kaggle\/input\/killer-shrimp-invasion\/temperature_submission.csv\")\nresult.Presence = y_probas[:, 1].round(3)\nresult.to_csv(\"submission.csv\", index=False)","59d7e446":"# Check Shapley values","a52253aa":"# Inference","7df1de94":"# Fill Na","15a5604c":"# More features","9473cf6e":"# Scaler","8cbe264a":"# Catboost","755c33ee":"# Get best model"}}