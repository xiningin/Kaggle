{"cell_type":{"733fe901":"code","d165b94c":"code","72168cb6":"code","b017984c":"code","cc475ec3":"code","d33cd4ed":"code","d0e96a3b":"code","358d602f":"code","372d681e":"code","835acbd1":"code","1cabb11e":"code","4a85e052":"code","20c558a1":"code","77a0e0fc":"code","e81018e0":"code","067517e6":"code","fc475630":"code","74b19049":"code","2bcb7419":"code","d891b29d":"code","a8e2cf9e":"code","7a834429":"code","2f4aca8b":"code","507b4012":"code","38c77e35":"code","59f50a07":"code","c39be9ec":"code","911d496d":"code","f1ad0f6f":"code","a2513181":"code","22c7f4f0":"code","2a872537":"code","50eff89d":"code","eeef0bb3":"code","6533eb40":"code","cdb5beb9":"code","95da360e":"code","e3a6a494":"code","153b9e11":"code","97909c2c":"code","73903f33":"code","f90664d7":"code","879737a4":"code","423ee88b":"code","ac7450b1":"code","7e725488":"code","d481fb81":"code","b93f2621":"code","782716ec":"code","5aebb856":"code","bc4415e8":"code","10b6bb1d":"markdown","68c0f10f":"markdown","2dfc99a1":"markdown","bb6c5cd7":"markdown","a1619a77":"markdown","eec5bbc2":"markdown","efb845f7":"markdown","d761f408":"markdown","d35a31ed":"markdown","c299e14f":"markdown","053765ff":"markdown","9c1806db":"markdown","72e87844":"markdown","e8bc3a66":"markdown","0a5549d2":"markdown","047200b9":"markdown","169ebe7a":"markdown","4e596115":"markdown","bb860708":"markdown","7b80de8a":"markdown","51bf80bf":"markdown","91e29b9a":"markdown","f4ba38ca":"markdown","6a5e7b8c":"markdown","be9f74e0":"markdown","56f55abb":"markdown"},"source":{"733fe901":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\nfrom datetime import date\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d165b94c":"data = pd.read_csv('\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\nprint(data.shape)\ndata.head()","72168cb6":"data = data.iloc[:,1:21]\ndata.info()","b017984c":"data.describe()","cc475ec3":"numerical = [var for var in data.columns if data[var].dtype!='O']\nprint('There are {} numerical variables'.format(len(numerical)))\nprint('The numerical variables are :', numerical)","d33cd4ed":"categorical = [var for var in data.columns if data[var].dtype=='O']\nprint('There are {} categorical variables'.format(len(categorical)))\nprint('The categorical variables are :', categorical)","d0e96a3b":"for var in categorical: \n    print(data[var].value_counts())\n    print(data[var].value_counts()\/np.float(len(data)))\n    print()","358d602f":"data.replace({'Unknown':np.nan},inplace=True)\ndata = data.dropna()\nprint(data.shape)","372d681e":"for var in categorical:\n    print(var, ' contains ', len(data[var].unique()), ' labels')","835acbd1":"df= data.copy()\ndf['Attrition_Flag'] = df.Attrition_Flag.replace({'Existing Customer':0,'Attrited Customer':1}).astype('int64')","1cabb11e":"data['Attrition_Flag'].value_counts()","4a85e052":"colors=('#DD7596','#8EB897')\nexplode=[0,0.1]\ndata['Attrition_Flag'].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of customer')\nplt.show()","20c558a1":"plt.subplots(figsize=(20,10))\nplt.title('Correlation between variables')\nsns.heatmap(df.corr(),annot=True,square=True,cmap='YlGnBu')","77a0e0fc":"numcorr = df.corr()\nNum = numcorr['Attrition_Flag'].sort_values(ascending=False).to_frame()\ncm = sns.color_palette('YlGnBu', as_cmap=True)\ns = Num.style.background_gradient(cmap=cm)\ns","e81018e0":"sns.displot(data['Total_Trans_Ct'], rug=True)\nplt.show()\n\nsns.displot(data['Total_Ct_Chng_Q4_Q1'])\nplt.show()","067517e6":"sns.jointplot(x=data['Total_Trans_Ct'],y=data['Total_Ct_Chng_Q4_Q1'],hue=data['Attrition_Flag'])","fc475630":"plt.figure(figsize=(8,4))\nplt.title('count of Gender colored by customers')\nsns.countplot(data=df,x='Gender',hue='Attrition_Flag')","74b19049":"plt.figure(figsize=(8,4))\nplt.title('count of Education Level colored by customers')\nsns.countplot(data=df,x='Education_Level',hue='Attrition_Flag')","2bcb7419":"plt.figure(figsize=(8,4))\nplt.title('count of Marital Status colored by customers')\nsns.countplot(data=df,x='Marital_Status',hue='Attrition_Flag')","d891b29d":"plt.figure(figsize=(8,4))\nplt.title('count of Income Category colored by customers')\nsns.countplot(data=df,x='Income_Category',hue='Attrition_Flag')","a8e2cf9e":"plt.figure(figsize=(8,4))\nplt.title('count of Card Category colored by customers')\nsns.countplot(data=df,x='Card_Category',hue='Attrition_Flag')","7a834429":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder() \n \ndata['Attrition_Flag'] = label_encoder.fit_transform(data['Attrition_Flag'])\ndata['Gender'] = label_encoder.fit_transform(data['Gender'])\ndata['Income_Category'] = label_encoder.fit_transform(data['Income_Category'])\ndata['Card_Category'] = label_encoder.fit_transform(data['Card_Category'])\ndata.head()","2f4aca8b":"print(data['Education_Level'].unique())\nprint(data['Marital_Status'].unique())","507b4012":"data = pd.get_dummies(data,columns=['Education_Level','Marital_Status'],prefix=['Education','Status'])\ndata.head()","38c77e35":"features = data.drop('Attrition_Flag',axis=1)\ntarget = data['Attrition_Flag']\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler() \nscaled_values = scaler.fit_transform(features) \nfeatures.loc[:,:] = scaled_values\nfeatures.head()","59f50a07":"from imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=0)\nX,y = sm.fit_resample(features,target)","c39be9ec":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","911d496d":"from sklearn.metrics import accuracy_score,recall_score,precision_score\nfrom sklearn.metrics import f1_score,confusion_matrix,roc_auc_score\n\ndef evaluation(y_test,y_pred):\n  acc = accuracy_score(y_test,y_pred)\n  rcl = recall_score(y_test,y_pred)\n  f1 = f1_score(y_test,y_pred)\n  auc_score = roc_auc_score(y_test,y_pred)\n  prec_score = precision_score(y_test,y_pred)\n \n\n  metric_dict={'accuracy': round(acc,3),\n               'recall': round(rcl,3),\n               'F1 score': round(f1,3),\n               'auc score': round(auc_score,3),\n               'precision': round(prec_score,3) \n              }\n\n  return print(metric_dict)","f1ad0f6f":"Results = pd.DataFrame({'Model': [],'Accuracy Score': [], 'Recall':[], 'F1score':[]})","a2513181":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier()\ntree.fit(X_train,y_train)\ny_pred1 = tree.predict(X_test)\nres = pd.DataFrame({\"Model\":['DecisionTreeClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred1,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred1)],\n                    \"F1score\": [f1_score(y_test,y_pred1)]})\nResults = Results.append(res)","22c7f4f0":"pd.crosstab(y_test,y_pred1,rownames=['Real data'],colnames=['Predicted'])","2a872537":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier()\nrfc.fit(X_train,y_train)\ny_pred2 = rfc.predict(X_test)\nres = pd.DataFrame({\"Model\":['RandomForestClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred2,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred2)],\n                    \"F1score\": [f1_score(y_test,y_pred2)]})\nResults = Results.append(res)","50eff89d":"pd.crosstab(y_test,y_pred2,rownames=['Real data'],colnames=['Predicted'])","eeef0bb3":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\ny_pred3 = knn.predict(X_test)\nres = pd.DataFrame({\"Model\":['KNeighborsClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred3,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred3)],\n                    \"F1score\": [f1_score(y_test,y_pred3)]})\nResults = Results.append(res)","6533eb40":"pd.crosstab(y_test,y_pred3,rownames=['Real data'],colnames=['Predicted'])","cdb5beb9":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(X_train,y_train)\ny_pred4 = svc.predict(X_test)\nres = pd.DataFrame({\"Model\":['SVC'],\n                    \"Accuracy Score\": [accuracy_score(y_pred4,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred4)],\n                    \"F1score\": [f1_score(y_test,y_pred4)]})\nResults = Results.append(res)","95da360e":"pd.crosstab(y_test,y_pred4,rownames=['Real data'],colnames=['Predicted'])","e3a6a494":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred5 = lr.predict(X_test)\nres = pd.DataFrame({\"Model\":['LogisticRegression'],\n                    \"Accuracy Score\": [accuracy_score(y_pred5,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred5)],\n                    \"F1score\": [f1_score(y_test,y_pred5)]})\nResults = Results.append(res)","153b9e11":"pd.crosstab(y_test,y_pred5,rownames=['Real data'],colnames=['Predicted'])","97909c2c":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier()\nxgb.fit(X_train,y_train)\ny_pred6 = xgb.predict(X_test)\nres = pd.DataFrame({\"Model\":['XGBClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred6,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred6)],\n                    \"F1score\": [f1_score(y_test,y_pred6)]})\nResults = Results.append(res)","73903f33":"pd.crosstab(y_test,y_pred6,rownames=['Real data'],colnames=['Predicted'])","f90664d7":"Results.sort_values(by='Accuracy Score',ascending=True)","879737a4":"from sklearn.metrics import classification_report,plot_confusion_matrix,plot_roc_curve","423ee88b":"model = XGBClassifier(objective='binary:logistic',eval_metric=['logloss'])\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","ac7450b1":"print(\" Best evaluation parameters achieved with XGBClassifier:\") \nevaluation(y_test,y_pred)","7e725488":"print(classification_report(y_test,y_pred))","d481fb81":"plot_confusion_matrix(model,X_test,y_test,cmap='YlOrBr')","b93f2621":"plot_roc_curve(model,X_test,y_test)","782716ec":"feat_importance = model.feature_importances_\nfeat_importance = pd.DataFrame(feat_importance,columns=['Score'],index=features.columns)","5aebb856":"feat_importance.sort_values(by='Score',ascending=False).style.background_gradient(cmap='OrRd')","bc4415e8":"plt.figure(figsize=(16,8))\nplt.title('Feature Importances')\nsns.barplot(x=feat_importance.Score,y=feat_importance.index)","10b6bb1d":"## 6. Model Evalution","68c0f10f":"#### Decision Tree Classifier","2dfc99a1":"#### Pie chart for target","bb6c5cd7":"**Delete the unknown values**","a1619a77":"## 4. Feature Engineering","eec5bbc2":"**Remove the unnecessary column**","efb845f7":"#### Logistic Regression","d761f408":"## 3. Data Preprocessing","d35a31ed":"#### Feature Importance","c299e14f":"#### XGB Classifier","053765ff":"#### KNN Classifier","9c1806db":"#### Dummy Variable Encoding","72e87844":"## 1. Reading Dataset","e8bc3a66":"#### SVC","0a5549d2":"#### Visualization for Categorical Variables\n\n* Attrition_Flag  contains  2  labels\n* Gender  contains  2  labels\n* Education_Level  contains  6  labels\n* Marital_Status  contains  3  labels\n* Income_Category  contains  5  labels\n* Card_Category  contains  4  labels","047200b9":"#### Random Forest Classifier","169ebe7a":"## 2. Exploratory Data Analysis","4e596115":"#### (B) Balance the target","bb860708":"#### (A) Feature Scaling","7b80de8a":"#### Univariate Distribution and Bivariate Distribution","51bf80bf":"#### Correlation between numerical features","91e29b9a":"### XGB Classifier","f4ba38ca":"#### Label Encoding","6a5e7b8c":"## 5. Building Model","be9f74e0":"How we see - **XGBClassifier** gives the best results","56f55abb":"**Conclusion:**\n\nI got maximum accuracy score of 0.982 on **XGBClassifier**."}}