{"cell_type":{"b1908429":"code","79ca3f52":"code","18a8ea76":"code","698971af":"code","e194bb29":"code","e40bd673":"code","065c830b":"code","682e45d0":"code","e23b3c79":"code","68f7dee6":"code","9a472732":"code","a8816840":"code","ff5d83a5":"code","9a20216c":"code","2943f241":"code","a5d6a521":"code","178dac66":"code","89dfd229":"code","fbac17d5":"code","973baa7d":"code","10207d01":"code","ab6f5751":"code","a943875e":"code","1b2983a1":"code","2a855a30":"code","feff6f0a":"code","8add5fdf":"code","5828b34f":"code","d7d86c56":"code","0f331602":"code","d01f958a":"code","36a40128":"code","2623e62c":"code","1f123b39":"code","a60b9329":"code","3322df12":"code","70480f23":"code","61783a97":"code","80ba6e99":"code","75656f67":"code","c13b7f5f":"code","c7717aaf":"code","9dbc77f8":"code","465e2b67":"code","e6db1190":"code","349716f8":"code","c4a19fc7":"code","3d967498":"code","8e24dcc0":"code","7136d344":"code","c7644ea7":"code","bd9d5681":"code","3d4b12b4":"code","cf076428":"code","8af8a509":"code","ac2845ff":"code","9340bce7":"code","b7060943":"code","8f4e8461":"markdown","b2fac8c9":"markdown","1648f7c3":"markdown","25297a2c":"markdown","c45a1868":"markdown","b19ff99d":"markdown","ea0a6e67":"markdown","685799d5":"markdown","eec9d5a1":"markdown","f9253b89":"markdown","3b88238b":"markdown","5a905b90":"markdown","6bd017ea":"markdown","8fe94a77":"markdown","f855a858":"markdown","b9c60ce6":"markdown","ab4ebcb6":"markdown","23ae7391":"markdown","94ec7a63":"markdown","5d5ae028":"markdown","504c3db2":"markdown","44130329":"markdown","2aab4cc0":"markdown","1bd0d30b":"markdown","e6614579":"markdown","ddc754f2":"markdown","47e5e8ba":"markdown","6eee665b":"markdown","50f18a0a":"markdown"},"source":{"b1908429":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# numpy and pandas for data manipulation\nimport numpy as np\nimport pandas as pd \n\n# sklearn preprocessing for dealing with categorical variables\nfrom sklearn.preprocessing import LabelEncoder\n\n# File system manangement\nimport os\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# matplotlib and seaborn for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","79ca3f52":"#see train data\ntrain_data = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_train.csv\")\ntrain_data.head()\n\n#target\u304b\u3069\u3046\u304b\u3092\u4e88\u60f3\u3059\u308b","18a8ea76":"#see train data\ntest_data = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_test.csv\")\ntest_data.head()","698971af":"#\u904e\u53bb\u306e\u518d\u5efa\u5c65\u6b74\nbureau_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau_balance.csv\")\nbureau_balance.head()","e194bb29":"#\u904e\u53bb\u306e\u518d\u5efa\u5c65\u6b74\nbureau = pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau.csv\")\nbureau.head()","e40bd673":"#\u904e\u53bb\u306e\u518d\u5efa\u5c65\u6b74\npos_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/POS_CASH_balance.csv\")\npos_balance.head()","065c830b":"#\u904e\u53bb\u306e\u518d\u5efa\u5c65\u6b74\npte_appli = pd.read_csv(\"..\/input\/home-credit-default-risk\/previous_application.csv\")\npte_appli.head()","682e45d0":"#\u904e\u53bb\u306e\u518d\u5efa\u5c65\u6b74\ninstallments_pay = pd.read_csv(\"..\/input\/home-credit-default-risk\/installments_payments.csv\")\ninstallments_pay.head()","e23b3c79":"# \u30ab\u30e9\u30e0\u306e\u8aac\u660e\u78ba\u8a8d\u7528\ncol_discription = pd.read_csv(\"..\/input\/home-credit-default-risk\/HomeCredit_columns_description.csv\")\ncol_discription.loc[col_discription.Row == 'EXT_SOURCE']","68f7dee6":"# \u307e\u305a\u306f\u76ee\u7684\u3068\u306a\u308b\u6307\u6a19\u306e\u6982\u8981\u304b\u3089\u78ba\u8a8d\u3059\u308b\n# \uff10\uff1a\u8fd4\u6e08\u53ef\u80fd\u8005\n# \uff11\uff1a\u8fd4\u6e08\u4e0d\u53ef\u80fd\u8005\n\ntrain_data['TARGET'].value_counts()","9a472732":"# null\u5024\u306a\u3069\u30c7\u30fc\u30bf\u6b20\u640d\u306e\u78ba\u8a8d\n\n# Function to calculate missing values by column# Funct \ndef missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        #iloc[\u884c, \u5217]\u3092\u6307\u5b9a\u3057\u3066\u629c\u304d\u51fa\u3057\n        #\u6b20\u640d\u304c\u306a\u3044\u30ab\u30e9\u30e0\u3092\u9664\u5916\n        #\u6b20\u640d\u7387\u304c\u9ad8\u3044\u9806\uff08\u964d\u9806\uff09\u3067\u4e26\u3073\u66ff\u3048\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","a8816840":"missing_values = missing_values_table(train_data)\nmissing_values.head(20)\n\n# \u3053\u3053\u3067\u53ef\u8996\u5316\u3055\u308c\u308b\u6b20\u640d\u5024\u306e\u3042\u308b\u30ab\u30e9\u30e0\u306f\u5f8c\u3005\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\uff08imputation\uff09\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044","ff5d83a5":"train_data.dtypes.value_counts()\n\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u78ba\u8a8d\n# float int \u306f\u6570\u5024\u578b\n# object\u306f\u6587\u5b57\u578b\u306a\u3069\u304c\u6df7\u5165","9a20216c":"# \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ab\u30e9\u30e0\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u306e\u500b\u6570\u3092\u8868\u793a\n# \u6587\u5b57\u60c5\u5831\u306e\u8a18\u5165\u306a\u306e\u304b\u4f55\u3089\u304b\u306e\u30af\u30e9\u30b9\u5206\u3051\u3057\u305f\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306a\u306e\u304b\u306e\u78ba\u8a8d\ntrain_data.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","2943f241":"# 2\u30af\u30e9\u30b9\u4ee5\u4e0b\u306e\u30ab\u30e9\u30e0\u306e\u51e6\u7406\n# sklern\u306elabelencoer\u3092\u4f7f\u7528\u3059\u308b\n\nle = LabelEncoder()\nle_count = 0\n\n# Iterate through the columns\nfor col in train_data:\n    if train_data[col].dtype == 'object':\n        # If 2 or fewer unique categories\n        if len(list(train_data[col].unique())) <= 2:\n            # \u30e9\u30d9\u30eb\u3068\u30e9\u30d9\u30ebID\u306e\u5bfe\u5fdc\u3065\u3051\uff0epositive\u306f0\u306b\u3057\u3088\u3046\uff0c\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u6c7a\u3081\u308b\n            le.fit(train_data[col])\n            \n            # Transform both training and testing data \u8fd4\u308a\u5024\u3092\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n            train_data[col] = le.transform(train_data[col])\n            test_data[col] = le.transform(test_data[col])\n            \n            # Keep track of how many columns were label encoded\n            le_count += 1\n            \nprint('%d columns were label encoded.' % le_count)","a5d6a521":"#one-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306eget_dummies\u95a2\u6570\u306b\u3064\u3044\u3066\ndf = pd.DataFrame({'sex':['female', np.nan, 'male', 'male', 'female', 'male'],\n                   'old':[12, 21, 31, 10, 22, 10]})\ndf.iloc[:,:]\n\n","178dac66":"test_df = pd.get_dummies(df)\n\ntest_df.iloc[:,:]\n\n#\u6587\u5b57\u578b\uff08object\u30ab\u30e9\u30e0\u306e\u307f\u5909\u63db\u3055\u308c\u308b\uff09","89dfd229":"# get_dummies()\uff1a\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30c0\u30df\u30fc\u5909\u6570\u306e\u4f5c\u6210\n# \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u300c\u6587\u5b57\u5217\u300d\u306a\u3069 dtype \u304c object \u306e\u5168\u3066\u306e\u30ab\u30e9\u30e0\u3092\u300c\u30c0\u30df\u30fc\u5909\u6570\u300d\u306b\u5909\u63db\u3059\u308b\n\n#\u4e0a\u8a18\u3067\u5909\u63db\u3057\u3066\u3044\u306a\u3044\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5bfe\u3057\u3066one-hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u51e6\u7406\ntrain_data = pd.get_dummies(train_data)\ntest_data = pd.get_dummies(test_data)\n\nprint('Training Features shape: ', train_data.shape)\nprint('Testing Features shape: ', test_data.shape)","fbac17d5":"#\u30ab\u30e9\u30e0\u3092\u305d\u308d\u3048\u308b\u95a2\u6570align\u306e\u8aac\u660e\nd1 = {'name': ['\u534a\u6ca2','\u5927\u548c\u7530','\u4e2d\u91ce\u6e21'], 'code': ['101', '102', '104']}\ndf1 = pd.DataFrame(data=d1)\ndf1\n","973baa7d":"d2 = {'code': ['101', '102', '103'], 'place': ['\u6771\u4eac','\u5927\u962a','\u540d\u53e4\u5c4b']}\ndf2 = pd.DataFrame(data=d2,index=[1,2,3])\ndf2","10207d01":"#align\u306e\u8fd4\u308a\u5024\u306f\uff12\u3064\u306b\u306a\u308b\ndf3,df4=df1.align(df2,join='inner',axis=1)\ndf3","ab6f5751":"#TARGET\u30ab\u30e9\u30e0\u306f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306a\u3044\u304c\u524a\u9664\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u30ab\u30e9\u30e0\u306a\u306e\u3067\u4e00\u5ea6\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u304a\u3044\u3066\u5f8c\u304b\u3089\u518d\u5ea6\u8ffd\u52a0\u3059\u308b\ntrain_labels = train_data['TARGET']\n\n# Align the training and testing data, keep only columns present in both dataframes\ntrain_data, test_data = train_data.align(test_data, join = 'inner', axis = 1)\n\n# Add the target back in\ntrain_data['TARGET'] = train_labels\n\nprint('Training Features shape: ', train_data.shape)\nprint('Testing Features shape: ', test_data.shape)","a943875e":"train_data['DAYS_EMPLOYED'].describe()\n# \u30de\u30a4\u30ca\u30b9\u3068\u30d7\u30e9\u30b9\u304c\u6df7\u5408\u3057\u3066\u3044\u308b\n# max\u306e\u6570\u304c\u5927\u304d\u3059\u304e\u30661000\u5e74\u3068\u306a\u3063\u3066\u3044\u308b\n# \u306a\u3069\u304b\u3089\u6b63\u3057\u3044\u6570\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3002\u3088\u308a\u8a73\u7d30\u306b\u30c7\u30fc\u30bf\u3092\u898b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","1b2983a1":"train_data['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","2a855a30":"anom = train_data[train_data['DAYS_EMPLOYED'] == 365243]\nnon_anom = train_data[train_data['DAYS_EMPLOYED'] != 365243]\nprint('The non-anomalies default on %0.2f%% of loans' % (100 * non_anom['TARGET'].mean()))\nprint('The anomalies default on %0.2f%% of loans' % (100 * anom['TARGET'].mean()))\nprint('There are %d anomalous days of employment' % len(anom))","feff6f0a":"# \u7570\u5e38\u5024\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3092\u683c\u7d0d\u3059\u308bDAYS_EMPLOYED_ANOM\u3092\u8ffd\u52a0\ntrain_data['DAYS_EMPLOYED_ANOM'] = train_data[\"DAYS_EMPLOYED\"] == 365243\n\n# \u7570\u5e38\u5024\u3092null\u3067\u7f6e\u304d\u63db\u3048\u308b implace=true\u306b\u3059\u308b\u3068\u5143\u306eDF\u304c\u5909\u63db\u3055\u308c\u308b\ntrain_data['DAYS_EMPLOYED'].replace({365243: np.nan}, inplace = True)\n\ntrain_data['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","8add5fdf":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3082\u540c\u69d8\u306e\u51e6\u7406\u3092\u304a\u3053\u306a\u3046\ntest_data['DAYS_EMPLOYED_ANOM'] = test_data[\"DAYS_EMPLOYED\"] == 365243\ntest_data[\"DAYS_EMPLOYED\"].replace({365243: np.nan}, inplace = True)\n\nprint('There are %d anomalies in the test data out of %d entries' % (test_data[\"DAYS_EMPLOYED_ANOM\"].sum(), len(test_data)))","5828b34f":"# Find correlations with the target and sort\ncorrelations = train_data.corr()['TARGET'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(15))\nprint('\\nMost Negative Correlations:\\n', correlations.head(15))","d7d86c56":"# \u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044DAYS_BIRTH\u306b\u3064\u3044\u3066\u5206\u6790\n# days_birth\u306f\u30de\u30a4\u30ca\u30b9\u6570\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u7d76\u5bfe\u5024\u306b\u4fee\u6b63\u3057\u3066\u7d76\u5bfe\u5024\u3092\u518d\u8a08\u7b97\ntrain_data['DAYS_BIRTH'] = abs(train_data['DAYS_BIRTH'])\ntrain_data['DAYS_BIRTH'].corr(train_data['TARGET'])","0f331602":"# \u30c6\u30f3\u30d7\u30ec\u56f3\u8868\u306e\u5f62\u3067\u56f3\u8868\u3092\u4f5c\u6210\nplt.style.use('fivethirtyeight')\n\n# \u5e74\u9f62\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nplt.hist(train_data['DAYS_BIRTH'] \/ 365, edgecolor = 'k', bins = 25)\nplt.title('Age of Client'); plt.xlabel('Age (years)'); plt.ylabel('Count');\n\n# \u6f20\u7136\u3068\u5e74\u9f62\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3057\u3066\u3082\u5916\u308c\u5024\u304c\u306a\u3044\u304b\u3069\u3046\u304b\u304f\u3089\u3044\u3057\u304b\u308f\u304b\u3089\u306a\u3044","d01f958a":"plt.figure(figsize = (10, 8))\n\n# KDE plot of loans that were repaid on time\nsns.kdeplot(train_data.loc[train_data['TARGET'] == 0, 'DAYS_BIRTH'] \/ 365, label = 'target == 0')\n\n# KDE plot of loans which were not repaid on time\nsns.kdeplot(train_data.loc[train_data['TARGET'] == 1, 'DAYS_BIRTH'] \/ 365, label = 'target == 1')\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');\n\n\n# TARGET\u306e\u5024\u5225\u306b\u5206\u5e03\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067\u3069\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u5b58\u5728\u3059\u308b\u306e\u304b\u3092\u53ef\u8996\u5316\u3059\u308b\n#\u5e74\u9f62\u304c\u9ad8\u304f\u306a\u308b\u306b\u3064\u308c\u3066\u8fd4\u6e08\u7387\u304c\u9ad8\u304f\u306a\u308b\u3053\u3068\u306f\u5206\u304b\u3063\u305f\u304c\u3069\u306e\u5e74\u9f62\u5c64\u306b\u7279\u5fb4\u304c\u3042\u308b\u306e\u304b\u306a\u3069\u3092\u5206\u6790\u3059\u308b\u305f\u3081","36a40128":"# \u7279\u5fb4\u3092\u8abf\u3079\u308b'TARGET', 'DAYS_BIRTH'\u306e\u30c7\u30fc\u30bf\u306e\u307f\u53d6\u308a\u51fa\u3059\nage_data = train_data[['TARGET', 'DAYS_BIRTH']]\nage_data['YEARS_BIRTH'] = age_data['DAYS_BIRTH'] \/ 365\n\n#20\uff5e70\u6b73\u306b\u3064\u3044\u306611\u306b\u308f\u3051\u308b\u3053\u3068\u30675\u6b73\uff0850\uff0f10\uff1d5\uff09\u3054\u3068\u306e\u968e\u7d1a\u3092\u4f5c\u6210\u3059\u308b\nage_data['YEARS_BINNED'] = pd.cut(age_data['YEARS_BIRTH'], bins = np.linspace(20, 70, num = 11))\nage_data.head(10)\n\n#5\u6b73\u3054\u3068\u306e\u968e\u7d1a\u5206\u3051\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u306e\u78ba\u8a8d\u3000YEARS_BINNED\u3092\u78ba\u8a8d","2623e62c":"# \u4e0a\u8a18\u3067\u306fTARGET\u3000DAYS_BIRTH\u3000YEARS_BIRTH\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u30ec\u30b3\u30fc\u30c9\u306e\u5024\u304c\u51fa\u3066\u3044\u305f\u3002\n#groupby\u3067\u5e73\u5747\u3092\u3068\u3063\u3066\u96c6\u8a08\u3092\u3057\u3066\u8868\u793a\u3059\u308b\nage_groups  = age_data.groupby('YEARS_BINNED').mean()\nage_groups","1f123b39":"plt.figure(figsize = (8, 8))\n\n# \u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f\u8868\u3092\u30b0\u30e9\u30d5\u5316 100\u5206\u7387\u306b\u3057\u3066\uff05\u3067\u8868\u793a\nplt.bar(age_groups.index.astype(str), 100 * age_groups['TARGET'])\n\n# Plot labeling\nplt.xticks(rotation = 75); plt.xlabel('Age Group (years)'); plt.ylabel('Failure to Repay (%)')\nplt.title('Failure to Repay by Age Group');","a60b9329":"# Extract the EXT_SOURCE variables and show correlations\next_data = train_data[['TARGET', 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH']]\next_data_corrs = ext_data.corr()\next_data_corrs\n","3322df12":"#\u76f8\u95a2\u4fc2\u6570\u306e\u53ef\u8996\u5316\uff08\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u8272\u3092\u4ed8\u3051\u308b\uff09\nplt.figure(figsize = (8, 6))\n\n# Heatmap of correlations\nsns.heatmap(ext_data_corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.6)\nplt.title('Correlation Heatmap');","70480f23":"plt.figure(figsize = (10, 12))\n\n# iterate through the sources\nfor i, source in enumerate(['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']):\n    \n    # create a new subplot for each source\n    plt.subplot(3, 1, i + 1)\n    # plot repaid loans\n    sns.kdeplot(train_data.loc[train_data['TARGET'] == 0, source], label = 'target == 0')\n    # plot loans that were not repaid\n    sns.kdeplot(train_data.loc[train_data['TARGET'] == 1, source], label = 'target == 1')\n    \n    # Label the plots\n    plt.title('Distribution of %s by Target Value' % source)\n    plt.xlabel('%s' % source); plt.ylabel('Density');\n    \nplt.tight_layout(h_pad = 2.5)\n    ","61783a97":"# \u4e0a\u8a18\u3067\u8abf\u3079\u305f\u30c7\u30fc\u30bf\u3067\u30da\u30a2\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\nplot_data = ext_data.drop(columns = ['DAYS_BIRTH']).copy()\n\n# \u751f\u5e74\u6708\u65e5\u306e\u5217\u3092\u8ffd\u52a0\nplot_data['YEARS_BIRTH'] = age_data['YEARS_BIRTH']\n\n# \u30d7\u30ed\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u5236\u9650\u3000\u591a\u3059\u304e\u308b\u3068\u6563\u5e03\u56f3\u304c\u5857\u308a\u3064\u3076\u3055\u308c\u307f\u3065\u3089\u304f\u306a\u308b\nplot_data = plot_data.dropna().loc[:100000, :]\n\n# \u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\ndef corr_func(x, y, **kwargs):\n    r = np.corrcoef(x, y)[0][1]\n    ax = plt.gca() #figure\u3068\u540c\u3058\u3088\u3046\u306a\u610f\u5473\n    \n    #\u6ce8\u91c8\u3092\u3064\u3051\u308b\n    ax.annotate(\"r = {:.2f}\".format(r),\n                xy=(.2, .8), xycoords=ax.transAxes,\n                size = 20)\n\n# Create the pairgrid object\ngrid = sns.PairGrid(data = plot_data, size = 3, diag_sharey=False,\n                    hue = 'TARGET',#\u56f3\u793a\u3055\u308c\u308b\u76ee\u7684\u5909\u6570\n                    vars = [x for x in list(plot_data.columns) if x != 'TARGET'])\n                    \n#\u53f3\u4e0a\u5074\u306f\u6563\u5e03\u56f3\ngrid.map_upper(plt.scatter, alpha = 0.2)\n\n#\u771f\u3093\u4e2d\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\ngrid.map_diag(sns.kdeplot)\n\n# Bottom is density plot\ngrid.map_lower(sns.kdeplot, cmap = plt.cm.OrRd_r);\n\nplt.suptitle('Ext Source and Age Features Pairs Plot', size = 32, y = 1.05);","80ba6e99":"# \u591a\u9805\u5f0f\u7279\u5fb4\u91cf\u5206\u6790\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\npoly_features = train_data[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH', 'TARGET']]\npoly_features_test = test_data[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH']]\n\n# \u6b20\u640d\u5024\u306e\u51e6\u7406\n#sklearn.preprocessing\u306e Imputer\u306f\u30b5\u30dd\u30fc\u30c8\u7d42\u4e86\u4e88\u5b9a\u306a\u306e\u3067SimpleImputer\u3092\u5229\u7528\u3059\u308b\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n\npoly_target = poly_features['TARGET']\n\npoly_features = poly_features.drop(columns = ['TARGET'])\n\n# Need to impute missing values\npoly_features = imputer.fit_transform(poly_features)\npoly_features_test = imputer.transform(poly_features_test)\n\nfrom sklearn.preprocessing import PolynomialFeatures\n                                  \n#\u591a\u9805\u5f0f\u7279\u5fb4\u91cf\u5206\u6790 \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\npoly_transformer = PolynomialFeatures(degree = 3)\n\n# Train the polynomial features\npoly_transformer.fit(poly_features)\n\n# Transform the features\npoly_features = poly_transformer.transform(poly_features)\npoly_features_test = poly_transformer.transform(poly_features_test)\nprint('Polynomial Features shape: ', poly_features.shape)\nprint('poly_features_test shape: ', poly_features_test.shape)","75656f67":"#\u4f5c\u6210\u3055\u308c\u305f\u7279\u5fb4\u91cf\u306e\u78ba\u8a8d\npoly_transformer.get_feature_names(input_features = ['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH'])[:15]","c13b7f5f":"#\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3068TARGET\u30ab\u30e9\u30e0\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d\u3059\u308b\n# Create a dataframe of the features \npoly_features = pd.DataFrame(poly_features, \n                             columns = poly_transformer.get_feature_names(['EXT_SOURCE_1', 'EXT_SOURCE_2', \n                                                                           'EXT_SOURCE_3', 'DAYS_BIRTH']))\n\n# Add in the target\npoly_features['TARGET'] = poly_target\n\n# Find the correlations with the target\npoly_corrs = poly_features.corr()['TARGET'].sort_values()\n\n# Display most negative and most positive\nprint(poly_corrs.head(10))\nprint(\"\")\nprint(\"\")\nprint(\"\")\nprint(poly_corrs.tail(5))","c7717aaf":"# \u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u683c\u7d0d\u3057\u305fDF\u3092\u4f5c\u6210\u3059\u308b\npoly_features_test = pd.DataFrame(poly_features_test, \n                                  columns = poly_transformer.get_feature_names(['EXT_SOURCE_1', 'EXT_SOURCE_2', \n                                                                                'EXT_SOURCE_3', 'DAYS_BIRTH']))\n\n# \u7279\u5fb4\u91cf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u683c\u7d0d\u3059\u308b\npoly_features['SK_ID_CURR'] = train_data['SK_ID_CURR']\napp_train_poly = train_data.merge(poly_features, on = 'SK_ID_CURR', how = 'left')\n\n# \u7279\u5fb4\u91cf\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u683c\u7d0d\u3059\u308b\npoly_features_test['SK_ID_CURR'] = test_data['SK_ID_CURR']\napp_test_poly = test_data.merge(poly_features_test, on = 'SK_ID_CURR', how = 'left')\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5171\u901a\u3059\u308b\u30ab\u30e9\u30e0\u306e\u307f\napp_train_poly, app_test_poly = app_train_poly.align(app_test_poly, join = 'inner', axis = 1)\n\n# \u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u8868\u793a\nprint('Training data with polynomial features shape: ', app_train_poly.shape)\nprint('Testing data with polynomial features shape:  ', app_test_poly.shape)","9dbc77f8":"app_train_domain = train_data.copy()\napp_test_domain = test_data.copy()\n\n#train\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\napp_train_domain['CREDIT_INCOME_PERCENT'] = app_train_domain['AMT_CREDIT'] \/ app_train_domain['AMT_INCOME_TOTAL']\napp_train_domain['ANNUITY_INCOME_PERCENT'] = app_train_domain['AMT_ANNUITY'] \/ app_train_domain['AMT_INCOME_TOTAL']\napp_train_domain['CREDIT_TERM'] = app_train_domain['AMT_ANNUITY'] \/ app_train_domain['AMT_CREDIT']\napp_train_domain['DAYS_EMPLOYED_PERCENT'] = app_train_domain['DAYS_EMPLOYED'] \/ app_train_domain['DAYS_BIRTH']\n\n#test\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\napp_test_domain['CREDIT_INCOME_PERCENT'] = app_test_domain['AMT_CREDIT'] \/ app_test_domain['AMT_INCOME_TOTAL']\napp_test_domain['ANNUITY_INCOME_PERCENT'] = app_test_domain['AMT_ANNUITY'] \/ app_test_domain['AMT_INCOME_TOTAL']\napp_test_domain['CREDIT_TERM'] = app_test_domain['AMT_ANNUITY'] \/ app_test_domain['AMT_CREDIT']\napp_test_domain['DAYS_EMPLOYED_PERCENT'] = app_test_domain['DAYS_EMPLOYED'] \/ app_test_domain['DAYS_BIRTH']","465e2b67":"#\u8996\u899a\u5316\u3057\u3066\u307f\u308b\n\n#\u63cf\u5199\u753b\u9762\u306e\u7528\u610f\nplt.figure(figsize = (12, 20))\n\n# \u5404\u7279\u5fb4\u91cf\u30ab\u30e9\u30e0\u3092\u30eb\u30fc\u30d7\u3055\u305b\u308b\nfor i, feature in enumerate(['CREDIT_INCOME_PERCENT', 'ANNUITY_INCOME_PERCENT', 'CREDIT_TERM', 'DAYS_EMPLOYED_PERCENT']):\n    \n    # \u63cf\u5199\u7bc4\u56f2\u3092\u5206\u5272\u3059\u308b\n    #\u7b2c\u4e00\u5f15\u6570\uff1a\u5206\u5272\u884c\u6570\u3000\u7b2c\u4e8c\u5f15\u6570\uff1a\u5206\u5272\u5217\u6570\u3000\u7b2c\u4e09\u5f15\u6570\uff1a\u4eca\u56de\u306e\u63cf\u5199\u7bc4\u56f2\n    plt.subplot(4, 1, i + 1)\n    \n    # \u30ed\u30fc\u30f3\u304c\u6255\u3048\u305f\u4eba\n    sns.kdeplot(app_train_domain.loc[app_train_domain['TARGET'] == 0, feature], label = 'target == 0')\n    # \u30ed\u30fc\u30f3\u304c\u6255\u3048\u306a\u304b\u3063\u305f\u4eba\n    sns.kdeplot(app_train_domain.loc[app_train_domain['TARGET'] == 1, feature], label = 'target == 1')\n    \n    # \u56f3\u8868\u306e\u8aac\u660e\u6587\n    plt.title('Distribution of %s by Target Value' % feature)\n    plt.xlabel('%s' % feature); plt.ylabel('Density');\n    \nplt.tight_layout(h_pad = 2.5)","e6db1190":"#\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler\n\n# target\u884c\u3092\u524a\u9664\nif 'TARGET' in train_data:\n    #\u8fd4\u308a\u5024\u3067\u4f55\u304b\u3092\u8fd4\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\n    train = train_data.drop(columns = ['TARGET'])\nelse:\n    train = train_data.copy()\n    \n# Feature \uff1d\u30ab\u30e9\u30e0\u540d\u30ea\u30b9\u30c8\nfeatures = list(train.columns)\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\ntest = test_data.copy()\n\n# null\u57cb\u3081\u3088\u3046\u306e\u30e2\u30c7\u30ebImputer\u3092\u7528\u610f\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n\n# \u6b63\u898f\u5316\u7528\u30e2\u30c7\u30ebscaler\u3092\u7528\u610f\nscaler = MinMaxScaler(feature_range = (0, 1))\n\n# \u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u308b\nimputer.fit(train)\n\n# \u30e2\u30c7\u30eb\u3092train test\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308b\ntrain = imputer.transform(train)\ntest = imputer.transform(test)\n\n# \u540c\u69d8\u306b\u6b63\u898f\u5316\u3082\u884c\u3046 \u2190 \u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u306e\u5f71\u97ff\u3092\u7b49\u3057\u304f\u3059\u308b\u305f\u3081\nscaler.fit(train)\ntrain = scaler.transform(train)\ntest = scaler.transform(test)\n\nprint('Training data shape: ', train.shape)\nprint('Testing data shape: ', test.shape)","349716f8":"#\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u7528\u3044\u305f\u4e88\u6e2c\nfrom sklearn.linear_model import LogisticRegression\n\n# \u30e2\u30c7\u30eb\u306e\u7528\u610f\u3000C\u306f\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\nlog_reg = LogisticRegression(C = 0.0001)\n\n# \u30e2\u30c7\u30eb\u306btrain\u30c7\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u3055\u305b\u308b\nlog_reg.fit(train, train_labels)","c4a19fc7":"# \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u3082\u3068\u306b\u4e88\u6e2c\u3092\u884c\u3046\n# 1\u884c\u76ee\uff1a\u8fd4\u6e08\u7387\uff080\u306e\u78ba\u7387\uff09\u30002\u884c\u76ee\uff1a\u672a\u8fd4\u6e08\u7387\uff081\u306e\u78ba\u7387\uff09\n#\u4eca\u56de\u306f\u672a\u8fd4\u6e08\u7387\u3092\u77e5\u308a\u305f\u3044\u306e\u30672\u884c\u76ee\u3092\u8fd4\u3059\nlog_reg_pred = log_reg.predict_proba(test)[:, 1]","3d967498":"# \u7d50\u679c\u3092\u8868\u793a\u3059\u308b\nsubmit = test_data[['SK_ID_CURR']]\nsubmit['TARGET'] = log_reg_pred\n\nsubmit.head()","8e24dcc0":"# \u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u3002\nsubmit.to_csv('log_reg_baseline.csv', index = False)","7136d344":"from sklearn.ensemble import RandomForestClassifier\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u5206\u985e\u5b50\u3092\u4f5c\u6210\u3059\u308b\n#n_estimators: \u6728\u306e\u6570\u3000\u5927\u304d\u3044\u7a0b\u5236\u5ea6\u304c\u3088\u304f\u306a\u308b\u304c\u305d\u306e\u5206\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308b\nrandom_forest = RandomForestClassifier(n_estimators = 100, random_state = 50, verbose = 1, n_jobs = -1)\n\n# \u5206\u985e\u5b50\u3092\u5b66\u7fd2\u3055\u305b\u308b\nrandom_forest.fit(train, train_labels)\n\n# \u30ab\u30e9\u30e0\u3054\u3068\u306e\u91cd\u8981\u5ea6\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b\nfeature_importance_values = random_forest.feature_importances_\nfeature_importances = pd.DataFrame({'feature': features, 'importance': feature_importance_values})\n\n# \u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\npredictions = random_forest.predict_proba(test)[:, 1]","c7644ea7":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\nsubmit = test_data[['SK_ID_CURR']]\nsubmit['TARGET'] = predictions\n\n# Save the submission dataframe\nsubmit.to_csv('random_forest_baseline.csv', index = False)","bd9d5681":"poly_features_names = list(app_train_poly.columns)\n\n# null\u57cb\u3081\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n\npoly_features = imputer.fit_transform(app_train_poly)\npoly_features_test = imputer.transform(app_test_poly)\n\n# \u6a19\u6e96\u5316\nscaler = MinMaxScaler(feature_range = (0, 1))\n\npoly_features = scaler.fit_transform(poly_features)\npoly_features_test = scaler.transform(poly_features_test)\n\nrandom_forest_poly = RandomForestClassifier(n_estimators = 100, random_state = 50, verbose = 1, n_jobs = -1)","3d4b12b4":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u5b66\u7fd2\nrandom_forest_poly.fit(poly_features, train_labels)\n\n# \u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3088\u308b\u4e88\u6e2c\u3092\u884c\u3046\npredictions = random_forest_poly.predict_proba(poly_features_test)[:, 1]\n\n\nsubmit = test_data[['SK_ID_CURR']]\nsubmit['TARGET'] = predictions\n\nsubmit.to_csv('random_forest_baseline_engineered.csv', index = False)","cf076428":"app_train_domain = app_train_domain.drop(columns = 'TARGET')\n\ndomain_features_names = list(app_train_domain.columns)\n\n# null\u57cb\u3081\nimputer = SimpleImputer(missing_values=np.nan, strategy='median')\n\ndomain_features = imputer.fit_transform(app_train_domain)\ndomain_features_test = imputer.transform(app_test_domain)\n\n# \u6a19\u6e96\u5316\nscaler = MinMaxScaler(feature_range = (0, 1))\n\ndomain_features = scaler.fit_transform(domain_features)\ndomain_features_test = scaler.transform(domain_features_test)\n\nrandom_forest_domain = RandomForestClassifier(n_estimators = 100, random_state = 50, verbose = 1, n_jobs = -1)\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\nrandom_forest_domain.fit(domain_features, train_labels)\n\n# \u7279\u5fb4\u91cf\u306e\u62bd\u51fa\nfeature_importance_values_domain = random_forest_domain.feature_importances_\nfeature_importances_domain = pd.DataFrame({'feature': domain_features_names, 'importance': feature_importance_values_domain})\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u884c\u3046\npredictions = random_forest_domain.predict_proba(domain_features_test)[:, 1]\n","8af8a509":"# Make a submission dataframe\nsubmit = test_data[['SK_ID_CURR']]\nsubmit['TARGET'] = predictions\n\n# Save the submission dataframe\nsubmit.to_csv('random_forest_baseline_domain.csv', index = False)","ac2845ff":"def plot_feature_importances(df):\n    \"\"\"\n    \u30e2\u30c7\u30eb\u304b\u3089\u91cd\u8981\u5ea6\u3092\u62bd\u51fa\u3059\u308b\u3002\u3088\u308a\u91cd\u8981\u5ea6\u304c\u9ad8\u3044\u65b9\u304c\u3044\u3044\u3002\n    \n    \u5f15\u6570\n        df (dataframe): \u7279\u5fb4\u91cf\u306e\u8f38\u5165\u91cf\u3002\u30ab\u30e9\u30e0\u540d\u306f `features` \u3068\u3044\u3046\u30ab\u30e9\u30e0\u306b\u3001\u91cd\u8981\u5ea6\u306f`importance`\u3068\u547c\u3070\u308c\u308b\u5217\u306b\u683c\u7d0d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        \n    Returns:\n        shows a plot of the 15 most importance features\n        \n        df (dataframe): feature importances sorted by importance (highest to lowest) \n        with a column for normalized importance\n      \u623b\u308a\u5024\n        \u6700\u3082\u91cd\u8981\u306a15\u500b\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n        \n        df (dataframe): \u91cd\u8981\u5ea6\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u7279\u5fb4\u91cf (\u6700\u9ad8\u304b\u3089\u6700\u4f4e) \n        \u91cd\u8981\u5ea6\u306f\u6b63\u898f\u5316\u3055\u308c\u308b\n        \"\"\"\n    \n    # \u91cd\u8981\u5ea6\u6607\u9806\u3067\u30ab\u30e9\u30e0\u3092\u4e26\u3073\u66ff\u3048\n    df = df.sort_values('importance', ascending = False).reset_index()\n    \n    # \u6b63\u898f\u5316\n    df['importance_normalized'] = df['importance'] \/ df['importance'].sum()\n\n    # \u91cd\u8981\u5ea6\u3092\u30ab\u30e9\u30e0\u3054\u3068\u306b\u53ef\u8996\u5316\u3059\u308b\n    plt.figure(figsize = (10, 6))\n    ax = plt.subplot()\n    \n    # \u91cd\u8981\u5ea6\u304c\u9ad8\u3044\u30ab\u30e9\u30e0\u304b\u3089\u6a2a\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u3002\n    ax.barh(list(reversed(list(df.index[:15]))), \n            df['importance_normalized'].head(15), \n            align = 'center', edgecolor = 'k')\n    \n    # y\u8ef8\u306b\u30e1\u30e2\u30ea\u3068\u30ab\u30e9\u30e0\u540d\u3092\u8ffd\u52a0\n    ax.set_yticks(list(reversed(list(df.index[:15]))))\n    ax.set_yticklabels(df['feature'].head(15))\n    \n    # \u56f3\u8868\u3092\u8868\u793a\n    plt.xlabel('Normalized Importance'); plt.title('Feature Importances')\n    plt.show()\n    \n    return df","9340bce7":"# Show the feature importances for the default features\nfeature_importances_sorted = plot_feature_importances(feature_importances)","b7060943":"feature_importances_domain_sorted = plot_feature_importances(feature_importances_domain)","8f4e8461":"Kaggle\u3067\u306f\u6700\u3082\u6709\u7528\u306a\u7279\u5fb4\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3082\u306e\u304c\u52dd\u3064<br>\n\u5c11\u306a\u304f\u3068\u3082\u69cb\u9020\u5316\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3001\u512a\u52dd\u30e2\u30c7\u30eb\u306f\u3059\u3079\u3066\u52fe\u914d\u30d6\u30fc\u30b9\u30c8\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\uff08XGBoost\u3084LightGBM\u3001CatBoost\uff09<br>\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30d1\u30bf\u30fc\u30f3\u306e1\u3064\u3067\u3042\u308b\u3001\u30e2\u30c7\u30eb\u69cb\u7bc9\u3084\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3088\u308a\u3082\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306e\u65b9\u304c\u6295\u8cc7\u5bfe\u52b9\u679c\u304c\u9ad8\u3044\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u308b\u3002<br>\n\u53c2\u7167\u8a18\u4e8b\uff1ahttps:\/\/community.alteryx.com\/t5\/Data-Science\/Feature-Engineering-Secret-to-Data-Science-Success\/ba-p\/545041<br>\n\n\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3068\u306f\u3001\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u3092\u8ffd\u52a0\u3059\u308b\u300c**\u7279\u5fb4\u69cb\u7bc9**\u300d\u3068\u3001\u6700\u3082\u91cd\u8981\u306a\u7279\u5fb4\u306e\u307f\u3092\u9078\u629e\u3059\u308b\u300c**\u7279\u5fb4\u9078\u629e**\u300d\u3001\u307e\u305f\u306f\u305d\u306e\u4ed6\u306e\u6b21\u5143\u524a\u6e1b\u65b9\u6cd5\u306e\u4e21\u65b9\u3092\u542b\u3080\u3001\u907a\u4f1d\u7684\u306a\u30d7\u30ed\u30bb\u30b9\u3092\u6307\u3059\u3002<br>\n\n\u4ed6\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u4f7f\u3044\u59cb\u3081\u308b\u3068\u3001\u591a\u304f\u306e\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u30012\u3064\u306e\u7c21\u5358\u306a\u7279\u5fb4\u91cf\u69cb\u7bc9\u6cd5\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002<br>\n\n>\u591a\u9805\u5f0f\u7279\u5fb4<br>\n>\u30c9\u30e1\u30a4\u30f3\u77e5\u8b58\u7279\u5fb4\u91cf","b2fac8c9":"\u7570\u5e38\u5024\u30825\u4e07\u30ec\u30b3\u30fc\u30c9\u3042\u308b\u3053\u3068\u304b\u3089null\u306e\u4ee3\u308f\u308a\u306b\u5165\u308c\u3089\u308c\u3066\u3044\u308b\u6570\u5024\u306e\u53ef\u80fd\u6027\u3042\u308a\u3002\n\nnull\u5024\u3067\u3042\u308b\u3053\u3068\u3082\u4e00\u3064\u306e\u7279\u5fb4\u91cf\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067null\u5024\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u3067TARGET\u306b\u5bfe\u3057\u3066\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002","1648f7c3":"\u82e5\u5e74\u5c64\uff0830\u4ee3\uff09\u3067\u975e\u8fd4\u6e08\u304c\u9ad8\u3044\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u308b\u3002\n\n\u30ab\u30e9\u30e0\u5168\u4f53\u3068\u3057\u3066\u306f\u76f8\u95a2\u4fc2\u6570\u306f\u512a\u4f4d\u3068\u306f\u8a00\u3048\u306a\u304b\u3063\u305f\u3002\n\n\u5b9f\u969b\u306b\u975e\u8fd4\u6e08\u8005\u306e\u4e88\u6e2c\u306b\u4f7f\u7528\u3067\u304d\u308b\u306e\u304b\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u5e74\u9f62\u5c64\u5225\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002","25297a2c":"\u660e\u3089\u304b\u306b\u82e5\u3044\u4e16\u4ee3\u307b\u3069\u975e\u8fd4\u6e08\u7387\u304c\u9ad8\u3044\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u3002","c45a1868":"CREDIT_INCOME_PERCENT, ANNUITY_INCOME_PERCENT, CREDIT_TERM, DAYS_EMPLOYED_PERCENT\u306a\u3069\u306e\u5c02\u9580\u77e5\u8b58\u3092\u5229\u7528\u3057\u3066\u8ffd\u52a0\u3057\u305f\u30ab\u30e9\u30e0\u304c\u91cd\u8981\u6307\u6a19\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002","b19ff99d":"\u53ef\u8996\u5316\u5185\u5bb9\u304b\u3089\u306f\u7279\u5fb4\u91cf\u306b\u3064\u3044\u3066\u30ed\u30fc\u30f3\u8fd4\u6e08\u8005\u3068\u672a\u8fd4\u6e08\u8005\u3067\u660e\u78ba\u306a\u9055\u3044\u306f\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u3002<br>\n\u30e2\u30c7\u30eb\u306b\u5165\u308c\u308b\u3068\u4f55\u304b\u610f\u5473\u304c\u51fa\u3066\u304f\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3059\u308b\u3002\n","ea0a6e67":"<h3>\u591a\u9805\u5f0f\u7279\u5fb4\u91cf(Polynomial Features)<\/h3>\n\u65e2\u5b58\u306e\u7279\u5fb4\u306e\u3079\u304d\u4e57\u3084\u3001\u65e2\u5b58\u306e\u7279\u5fb4\u9593\u306e\u76f8\u4e92\u4f5c\u7528\u9805\u3092\u7279\u5fb4\u3068\u3059\u308b\u3002<br>\n\u4f8b\u3048\u3070\u3001\u5909\u6570EXT_SOURCE_1^2\u3068EXT_SOURCE_2^2\u306e\u4ed6\u306b\u3001<br>\n\u3000\u3000\u3000\u3000EXT_SOURCE_1\u00d7EXT_SOURCE_2\u3001EXT_SOURCE_1^2\u00d7EXT_SOURCE_2^2\u3001EXT_SOURCE_1^2\u00d7EXT_SOURCE_2^2\u306a\u3069\u306e\u5909\u6570\u3092\u4f5c\u308b<br>\n<br>\n\u4ea4\u4e92\u4f5c\u7528\u9805\u306f\u3001\u8907\u6570\u306e\u5909\u6570\u306e\u5f71\u97ff\u3092\u6349\u3048\u308b\u305f\u3081\u306b\u7d71\u8a08\u30e2\u30c7\u30eb\u3067\u306f\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3042\u307e\u308a\u898b\u304b\u3051\u306a\u3044<br>\n<br>\nScikit-Learn\u306b\u306fPolynomialFeatures\u3068\u3044\u3046\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u3042\u308a\u3001\u6307\u5b9a\u3057\u305f\u6b21\u6570\u307e\u3067\u306e\u591a\u9805\u5f0f\u3068\u76f8\u4e92\u4f5c\u7528\u9805\u3092\u4f5c\u6210\u3059\u308b\u3002<br>\n\u3053\u3053\u3067\u306f\u6b21\u6570\u30923\u306b\u3057\u3066\u7d50\u679c\u3092\u898b\u308b\u3002\uff08\u591a\u9805\u5f0f\u7279\u5fb4\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u306f\u3001\u7279\u5fb4\u6570\u304c\u6b21\u6570\u306b\u5fdc\u3058\u3066\u6307\u6570\u95a2\u6570\u7684\u306b\u5897\u52a0\u3059\u308b\u3053\u3068\u3068\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304b\u3089\u3001\u3042\u307e\u308a\u9ad8\u3044\u6b21\u6570\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3002\uff09","685799d5":"<h3>\u30c9\u30e1\u30a4\u30f3\u5c02\u9580\u77e5\u8b58\u304b\u3089\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0<\/h3>\n","eec9d5a1":"35\u306e\u7279\u5fb4\u91cf\u304c\u65b0\u305f\u306b\u4f5c\u6210\u3055\u308c\u305f\u3002","f9253b89":"\u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u89e3\u6790\uff1aExploratory Data Analysis\uff08EDA\uff09\n\u7d71\u8a08\u5206\u6790\u3084\u53ef\u8996\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7406\u89e3\u3092\u6df1\u3081\u308b\u3002\n\u50be\u5411\u3001\u7570\u5e38\u5024\u3001\u30d1\u30bf\u30fc\u30f3\u3001\u76f8\u95a2\u95a2\u4fc2\u306a\u3069\u306e\u7279\u5fb4\u3092\u3042\u3076\u308a\u3060\u3059\u3002","3b88238b":"\u5e74\u9f62\u304c\u4e0a\u6607\u3059\u308b\u307b\u3069\u8fd4\u6e08\u7387\u306f\u9ad8\u304f\u306a\u308b\u3002","5a905b90":"<h3>\u30c9\u30e1\u30a4\u30f3\u30fb\u30ca\u30ec\u30c3\u30b8\u306e\u7279\u5fb4<\/h3><br>\n\u305d\u306e\u30c7\u30fc\u30bf\u306e\u5c02\u9580\u77e5\u8b58\u3092\u5229\u7528\u3057\u3066\u7279\u5fb4\u91cf\u3092\u65b0\u898f\u4f5c\u6210\u3057\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046<br>\n<br>\n<br>\n<br>\n\u4eca\u56de\u65b0\u898f\u4f5c\u6210\u3057\u3066\u307f\u308b\u7279\u5fb4\u91cf<br>\nCREDIT_INCOME_PERCENT\uff1a\u9867\u5ba2\u306e\u53ce\u5165\u306b\u5bfe\u3059\u308b\u4e0e\u4fe1\u984d\u306e\u5272\u5408\u3002<br>\nANNUITY_INCOME_PERCENT: \u9867\u5ba2\u306e\u53ce\u5165\u306b\u5bfe\u3059\u308b\u30ed\u30fc\u30f3\u306e\u5e74\u91d1\u984d\u306e\u5272\u5408<br>\nCREDIT_TERM: \u6708\u5358\u4f4d\u306e\u652f\u6255\u671f\u9593\uff08\u5e74\u91d1\u306f\u6708\u5358\u4f4d\u306e\u652f\u6255\u984d\u306a\u306e\u3067<br>\nDAYS_EMPLOYED_PERCENT: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5e74\u9f62\u306b\u5bfe\u3059\u308b\u96c7\u7528\u65e5\u6570\u306e\u5272\u5408<br>","6bd017ea":"EXT_SOURCE_3\u306fTARGET1\u3068\uff10\u3067\u5c71\u306e\u4f4d\u7f6e\u304c\u4ed6\u3088\u308a\u3082\u660e\u78ba\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3002<br>\n\u76f8\u95a2\u3068\u3057\u3066\u306f\u5f31\u3044\u304c\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u306f\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002","8fe94a77":"\u76f8\u95a2\u4fc2\u6570\n\n* .00-.19 \u201cvery weak\u201d\n* .20-.39 \u201cweak\u201d\n* .40-.59 \u201cmoderate\u201d\n* .60-.79 \u201cstrong\u201d\n* .80-1.0 \u201cvery strong\u201d","f855a858":"<h3>\u30e2\u30c7\u30eb\u306e\u6a5f\u80fd\u91cd\u8981\u6027<\/h3>\n\u30e2\u30c7\u30eb\u306e\u6a5f\u80fd\u3084\u7279\u5fb4\u91cf\u3092\u8abf\u7bc0\u3057\u3066\u4e88\u6e2c\u306e\u5411\u4e0a\u3092\u76ee\u6307\u3059\u3002","b9c60ce6":"\u5de5\u5b66\u7684\u306a\u7279\u5fb4\uff08Engineered Features\uff09\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3044\u4e88\u6e2c\u7d50\u679c\u3078\u306e\u5f71\u97ff\u3092\u78ba\u8a8d\u3059\u308b\n","ab4ebcb6":"<h1>\u3053\u3053\u304b\u3089\u30c7\u30fc\u30bf\u4e88\u6e2c\u3092\u884c\u3046<\/h1>\n\n\u4f55\u3082\u8003\u3048\u305a\u306b\u4e88\u6e2c\u3057\u305f\u5834\u54080.5\u306e\u78ba\u7387\u3067\u30ed\u30fc\u30f3\u304c\u8fd4\u6e08\u3067\u304d\u306a\u3044\u3068\u306a\u308b\u3002<br>\n\u3053\u308c\u3092Reciever Operating Characteristic Area Under the Curve (AUC ROC)\u3068\u3044\u3046\u3002<br>\n\n\u4eca\u56de\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff08Logistic Regression\uff09\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046\u3002<br>\n\n\n<h3>\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30<\/h3>\n\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u5834\u5408\u306e\u307f\u9ad8\u3044\u6027\u80fd\u3092\u767a\u63ee\u3059\u308b\u5206\u985e\u4e88\u6e2c\u65b9\u6cd5\u3002<br>\n\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u3068\u306f\u3001\u8aac\u660e\u5909\u6570\u304c\u4e8c\u6b21\u5143\u5e73\u9762\u4e0a\u306b\u3042\u308b\u3068\u3059\u308b\u3068\u3001\u3042\u308b\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u8aac\u660e\u5909\u6570\uff08\u306e\u5024\u306e\u96c6\u5408\uff09\u3068\u3001\u4ed6\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u8aac\u660e\u5909\u6570\uff08\u306e\u5024\u306e\u96c6\u5408\uff09\u3092\u3001\u4e00\u672c\u306e\u76f4\u7dda\u3092\u631f\u3093\u3067\u9694\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3002\n<br>\n<br>\n**\u554f\u984c\u70b9**\n\u5b66\u7fd2\u3057\u3059\u304e\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\uff08\u904e\u5b66\u7fd2\u72b6\u614b\uff09\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002<br>\n\u56f3\u306e\u4e00\u756a\u53f3\u306e\u3088\u3046\u306a\u72b6\u614b\u3002<br>\n\u3053\u306e\u3088\u3046\u306a\u72b6\u614b\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3068\u4f8b\u5916\u306a\u3069\u306e\u30c7\u30fc\u30bf\u306b\u5de6\u53f3\u3055\u308c\u3084\u3059\u304f\u306a\u308a\u3001<br>\n\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3068\u3057\u3066\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u306a\u308b\u3002<br>\n\n![https___qiita-image-store.s3.amazonaws.com_0_122354_38754384-54bd-f2a7-b572-8e7818cf6122.png](attachment:88ab0a99-fd9e-44ed-b001-c8ef356263ea.png)\n\n\n**\u5bfe\u7b56**\n\u904e\u5b66\u7fd2\u306f\u5206\u985e\u3092\u884c\u3063\u3066\u3044\u308b\u7dda\u306e\u8a08\u7b97\u5f0f\u306e\u6b21\u5143\u304c\u9ad8\u304f\u306a\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u767a\u751f\u3057\u3066\u3044\u308b\u3002<br>\n\u76f4\u7dda\uff08y = ax + b\uff09\u3088\u308a\u3082\u66f2\u7dda(y =cx^2 + ax + b)\u306e\u65b9\u304c\u4e0a\u624b\u304f\u5206\u985e\u3067\u304d\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u611f\u3058\u3002<br>\n\n\u305d\u3053\u3067\u6b63\u5247\u5316\u3068\u3044\u3046\u624b\u6bb5\u304c\u7528\u3044\u3089\u308c\u308b\u3002<br>\n\u6b63\u5247\u5316\u3067\u306f\u5206\u985e\u306e\u5f0f\u306b\u7528\u3044\u3089\u308c\u308ba,b,c\u306a\u3069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0f\u3055\u304f\u8a2d\u5b9a\u3059\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3042\u308b\u3002<br>\na,b,c\u306b\u3042\u305f\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0f\u3055\u304f\u3059\u308c\u3070x^2\u3084x\u306b\u3088\u308b\uff59\u3078\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308b\uff1d\u76f4\u7dda\u306b\u8fd1\u3065\u304f\uff08\u66f2\u7dda\u304c\u7de9\u3084\u304b\u306b\u306a\u308b\uff09<br>\n\n\u203b\u5b9f\u969b\u306b\u306f\u76ee\u7684\u95a2\u6570\u306e\u4fc2\u6570\uff08a,b,c\uff09\u3092\u76f4\u63a5\u3044\u3058\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002<br>\n\u3000\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc (Regularization Parameter) \u3068\u3044\u3046\u3082\u306e\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u9593\u63a5\u7684\u306b\u4fc2\u6570\u306e\u5f71\u97ff\u5ea6\u3092\u4e0b\u3052\u308b<br>\n\u3000\u8a73\u3057\u3044\u8a08\u7b97\u5f0f\u306a\u3069\u306f\u53c2\u8003\u30b5\u30a4\u30c8\u3092\u53c2\u7167<br>\n\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttps:\/\/qiita.com\/katsu1110\/items\/e4ef613559f02f183af5\n","23ae7391":"<h3>Random Forest<\/h3>\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u306e\u7cbe\u5ea6\u5411\u4e0a\u3092\u3055\u305b\u308b<br>\nhttps:\/\/qiita.com\/yshi12\/items\/6d30010b353b084b3749\n\nhttp:\/\/taustation.com\/random-forest-overview\/\n\nhttps:\/\/nomoto-eriko.hatenablog.com\/entry\/2018\/06\/06\/101729","94ec7a63":"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\n\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u3067\u51e6\u7406\u3067\u304d\u306a\u3044\n\nLabel encoding\n\u8981\u7d20\u30af\u30e9\u30b9\u306b\u5bfe\u3057\uff11\uff5e\u3000\u6570\u5b57\u3092\u632f\u308b\u3002\n\u8981\u7d20\u3069\u304a\u3057\u306b\u6570\u5b57\u306e\u5927\u304d\u3055\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u610f\u56f3\u3057\u306a\u3044\u91cd\u307f\u3065\u3051\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\u6240\u5f97\u306b\u5fdc\u3058\u305f\u968e\u7d1a\u306a\u3069\u306e\u5834\u5408\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u3048\u308b\n\u8077\u696d\u306a\u3069\u306e\u5834\u5408\u306f\u3057\u305f\u306eOne\u30fcHot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u305f\u65b9\u304c\u3044\u3044\n\u203b\uff12\u3064\u3057\u304b\u30af\u30e9\u30b9\u304c\u306a\u3044\u5834\u5408\u306f\uff10\uff0e\uff11\u3067\u51e6\u7406\u3067\u304d\u308b\u3002\n\nOne-hot encoding\n\u8981\u7d20\u30af\u30e9\u30b9\u4e00\u3064\u4e00\u3064\u306b\u5bfe\u3057\u5217\u3092\u4f5c\u308a\uff11\uff0c\uff10\u3067\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u51e6\u7406\u3059\u308b\n\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u591a\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3067\u306f\u3001\u7d20\u6027\uff08\u30c7\u30fc\u30bf\u306e\u6b21\u5143\uff09\u306e\u6570\u304c\u7206\u767a\u7684\u306b\u5897\u3048\u308b\u3002\nPCA\u3084\u4ed6\u306e\u6b21\u5143\u524a\u6e1b\u6cd5\u3092\u7528\u3044\u3066\u6b21\u5143\u6570\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u305f\u3060\u3057\u3001\u60c5\u5831\u306e\u4fdd\u6301\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\uff09","5d5ae028":"<h3>\u8ca0\u306e\u76f8\u95a2\u306e\u3042\u3063\u305fExterior Sources\u306b\u3064\u3044\u3066\u8003\u3048\u308b<\/h3>\n\nExterior Sources : Normalized score from external data source\n\n\u6a19\u6e96\u5316\u3057\u305f\u5916\u90e8\u30c7\u30fc\u30bf\uff08\u5185\u5bb9\u306f\u4e0d\u660e\uff09<br>\n\u4e0a\u51e6\u7406\u306e\u6587\u5b57\u5217\u51e6\u7406\u306b\u3088\u3063\u3066\u751f\u307e\u308c\u305f\u30ab\u30e9\u30e0\u3067\u306f\u306a\u3044\u3002\u305d\u308c\u305e\u308c\u306e\u30ab\u30e9\u30e0\u306b\u95a2\u4fc2\u304c\u3042\u308b\u304b\u3082\u308f\u304b\u3089\u306a\u3044\u3002\n\n\u5185\u90e8\u30c7\u30fc\u30bf\u304c\u4e0d\u660e\u306a\u306e\u306b\u5206\u6790\u306b\u4f7f\u7528\u3057\u3066\u3044\u3044\u306e\u304b\uff1f\n","504c3db2":"3\uff05\u4ee5\u4e0a\u306e\u6570\u5024\u306e\u4e56\u96e2\u304c\u3042\u308b\u3002\n\n\u7570\u5e38\u5024\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u6700\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u306f\u7570\u5e38\u5024\u3092null\u3068\u3057\u3066\u51e6\u7406\u3092\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u3002\n\n\u4eca\u56de\u306e\u7570\u5e38\u5024\u306f\u3059\u3079\u3066\u540c\u3058\u5024\u3067\u3042\u308a\u3001TARGET\u3078\u306e\u5f71\u97ff\u3082\u8003\u3048\u3089\u308c\u308b\u3002\n\nnull\u306b\u4e0a\u66f8\u304d\u3057\u305f\u3046\u3048\u3067\u7570\u5e38\u5024\u3067\u3042\u3063\u305f\u3053\u3068\u3092\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u65b0\u305f\u306a\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3059\u308b\u3002\n","44130329":"\u4f55\u3082\u3057\u3066\u306a\u3044\u6642\u3088\u308a\u76f8\u95a2\u4fc2\u6570\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308b\u3002<br>\n\u5b9f\u969b\u306b\u5143\u30c7\u30fc\u30bf\uff08\u306e\u30b3\u30d4\u30fc\uff09\u306b\u8ffd\u52a0\u3057\u3066\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u3048\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002<br>\n\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u304c\u3044\u3064\u3082\u4f7f\u3048\u308b\u3068\u306f\u9650\u3089\u306a\u3044\u3002\u5b9f\u969b\u306b\u5b66\u7fd2\u3055\u305b\u3066\u78ba\u8a8d\u3057\u306a\u3044\u3068\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u3002<br>","2aab4cc0":"\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u6570\u306b\u9055\u3044\u304c\u767a\u751f\n\u3053\u308c\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u30af\u30e9\u30b9\u306e\u9055\u3044\u306b\u3088\u308b\u3082\u306e\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306a\u3044\u30ab\u30e9\u30e0\u3092\u4f7f\u3046\u5fc5\u8981\u306f\u306a\u3044\u305f\u3081\u30c8\u30ec\u30a4\u30f3\u30c7\u30fc\u30bf\u304b\u3089\u524a\u9664\u3059\u308b\n","1bd0d30b":"\u53c2\u7167Note\nhttps:\/\/www.kaggle.com\/willkoehrsen\/start-here-a-gentle-introduction\n\n<h3>\u4ee5\u4e0b\u3067\u884c\u3046\u5206\u6790\u306e\u6d41\u308c<\/h3>\n\u554f\u984c\u3068\u30c7\u30fc\u30bf\u306e\u7406\u89e3<br>\n\u30c7\u30fc\u30bf\u306e\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u3068\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\uff08\u3053\u306e\u4f5c\u696d\u306f\u307b\u3068\u3093\u3069\u81ea\u5206\u305f\u3061\u3067\u884c\u3044\u307e\u3057\u305f<br>\n\u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790<br>\n\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb<br>\n\u30e2\u30c7\u30eb\u306e\u6539\u826f<br>\n\u30e2\u30c7\u30eb\u306e\u89e3\u91c8<br>\n\n\n\n\u30e2\u30c7\u30eb\u306e\u6b63\u78ba\u6027\u306b\u3064\u3044\u3066\n\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u6b63\u78ba\u6027\u3092\u53ef\u8996\u5316\u3059\u308b\u56f3\u8868\u3068\u3057\u3066ROC\u66f2\u7dda,AUC\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3002\n\nReciever Operating Characteristic (ROC) curve\n\n\n![image.png](attachment:ab99ad82-da3e-4756-8633-23ada27f1a8e.png)\n\n\u7dda\u304c\u5de6\u4e0a\u306b\u3042\u308b\u307b\u3069\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u3082\u306e\u306e\u5185\u672c\u5f53\u306b\u8981\u8acb\u3060\u3063\u305f\u6b63\u89e3\u7387\uff08True Positive\uff09\u304c\u9ad8\u304f\u3001\u4e0d\u6b63\u89e3\u7387\uff08False Positive\uff09\u304c\u4f4e\u3044\u3001\u826f\u3044\u30e2\u30c7\u30eb\u3068\u3044\u3048\u308b\u3002\u4f8b\u3067\u306f\u9752\uff1e\u8d64\uff1e\u9ed2\u306e\u9806\u3067\u3044\u3044\u30e2\u30c7\u30eb\u3002\n\n\nArea Under the Curve (AUC)\u306f\u305d\u306e\u540d\u306e\u901a\u308aROC\u66f2\u7dda\u306e\u4e0b\u306b\u3067\u304d\u305f\u30a8\u30ea\u30a2\u3092\u6307\u3057\u3066\u3044\u308b\u3002\nAUC\u306f0\u304b\u30891\u307e\u3067\u306e\u5024\u3092\u3068\u308a\u3001\u5024\u304c1\u306b\u8fd1\u3044\u307b\u3069\u5224\u5225\u80fd\uff08\u5224\u5225\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\uff09\u304c\u826f\u3044\u3053\u3068\u3092\u793a\u3059\u3002\n\nprecision(\u9069\u5408\u7387)\uff1dTP\uff0f\uff08TP\uff0bFP\uff09\uff1a\u967d\u6027\u306e\u5185\u3069\u306e\u304f\u3089\u3044\u306e\u5272\u5408\u3092\u691c\u77e5\u3067\u304d\u305f\u304b\nrecall(\u518d\u73fe\u7387)\uff1dTP\uff0f\uff08TP\uff0bFN\uff09\uff1a\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u3082\u306e\u306e\u5185\u3069\u306e\u7a0b\u5ea6\u304c\u672c\u5f53\u306b\u967d\u6027\u304b\n\nprecision(\u9069\u5408\u7387)\u3068recall(\u518d\u73fe\u7387)\u306f\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u95a2\u4fc2\n\u8aa4\u691c\u77e5\uff08\u518d\u73fe\u7387\uff09\u3092\u9ad8\u304f\u3059\u308b\u3068\u898b\u9003\u3059\u78ba\u7387\u304c\u9ad8\u304f\u306a\u308b\uff08\u9069\u5408\u7387\u304c\u4e0b\u304c\u308b\uff09\n\u9069\u5408\u7387\u3068\u518d\u73fe\u7387\u306e\u3069\u3061\u3089\u3092\u91cd\u8996\u3059\u308b\u304b\u306f\u5177\u4f53\u7684\u306b\u4f55\u3092\u5224\u65ad\u3059\u308b\u304b\u3067\u6bce\u56de\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n","e6614579":"\u30c7\u30fc\u30bf\u306e\u7570\u5e38\u5024\u306b\u5bfe\u3059\u308b\u51e6\u7406\n\nDAYS_BIRTH\u30ab\u30e9\u30e0\u306b\u3064\u3044\u3066\n\n\u73fe\u5728\u306e\u30ed\u30fc\u30f3\u7533\u8acb\u306b\u5bfe\u3057\u3066\u306e\u6570\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u5024\u304c\u30de\u30a4\u30ca\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u5024\u3092\u6b63\u306b\u76f4\u3057\u5358\u4f4d\u3092\u5e74\u306b\u3059\u308b\u51e6\u7406\u3092\u884c\u3046\n\n\u5e74\u306b\u76f4\u3059\u3053\u3068\u3067\u5165\u3063\u3066\u3044\u308b\u6570\u5024\uff1d\u5e74\u9f62\u3068\u306a\u308a\u59a5\u5f53\u306a\u6570\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u304c\u5224\u65ad\u3067\u304d\u308b","ddc754f2":"\u6700\u5f8c\u306b\u63a2\u7d22\u7684\u30d7\u30ed\u30c3\u30c8\u3068\u3057\u3066\u30da\u30a2\u30d7\u30ed\u30c3\u30c8\uff08\u884c\u5217\u6563\u5e03\u56f3\uff09\u3092\u884c\u3046\u3002<br>\npairplot\u306fseaborn\u3067\u6700\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u6a5f\u80fd\u306e\u4e00\u3064\u3002<br>\n\u5927\u91cf\u306e\u5909\u6570\u5217\u304c\u3042\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3001\u5168\u3066\u306e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u6bce\u306b\u76f8\u95a2\u95a2\u4fc2\u3092\u898b\u308b\u305f\u3081\u306e\u30d7\u30ed\u30c3\u30c8<br>\n\n![pairplot-explain.png](attachment:a6f1642d-cec1-4310-bce0-9121e098ca57.png)","47e5e8ba":"\u8d64\u306f\u8fd4\u6e08\u3055\u308c\u306a\u304b\u3063\u305f\u30ed\u30fc\u30f3\u3001\u9752\u306f\u8fd4\u6e08\u3055\u308c\u305f\u30ed\u30fc\u30f3\u3092\u793a\u3059","6eee665b":"\u30af\u30e9\u30b9\u4e0d\u5747\u8861\u554f\u984c\u3068\u306f\uff1f\n\u6a5f\u68b0\u5b66\u7fd2\u306b\u304a\u3044\u3066\u3001\u3042\u308b\u30af\u30e9\u30b9\u306e\u30c7\u30fc\u30bf\uff08\u30dd\u30b8\u30c6\u30a3\u30d6\uff09\u306e\u7dcf\u6570\u304c\u3001\u5225\u306e\u30af\u30e9\u30b9\u306e\u30c7\u30fc\u30bf\uff08\u30cd\u30ac\u30c6\u30a3\u30d6\uff09\u306e\u7dcf\u6570\u3088\u308a\u3082\u5727\u5012\u7684\u306b\u5c11\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u306e\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u5b9f\u969b\u306b\u306f\u6975\u3081\u3066\u4e00\u822c\u7684\u3067\u3001\u4e0d\u6b63\u691c\u77e5\u3001\u7570\u5e38\u691c\u77e5\u3001\u533b\u7642\u8a3a\u65ad\u3001\u6cb9\u6d41\u51fa\u691c\u77e5\u3001\u9854\u8a8d\u8b58\u306a\u3069\u69d8\u3005\u306a\u5206\u91ce\u3067\u89b3\u5bdf\u3055\u308c\u307e\u3059\u3002\n\n\u306a\u305c\u554f\u984c\u306a\u306e\u304b\uff1f\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u306ftarget\u306e\u4e00\u81f4\u7387\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b\u5b66\u7fd2\u3092\u884c\u3046\u3002\n\u3057\u304b\u3057\u9069\u5408\u7387\u3068\u518d\u73fe\u7387\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306b\u3042\u308b\u3088\u3046\u306b\u4e00\u6982\u306btarget\u306e\u7cbe\u5ea6\u3092\u9ad8\u304f\u3059\u308c\u3070\u3044\u3044\u3044\u3068\u3044\u3046\u3082\u306e\u3067\u306f\u306a\u3044\u3002\n\u967d\u6027\u3001\u9670\u6027\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u304c\u540c\u3058\u304f\u3089\u3044\u306a\u3089\u3070\u305d\u308c\u305e\u308c\u306e\u8aa4\u691c\u77e5\u3082\u540c\u3058\u91cd\u3055\u3067\u6271\u308f\u308c\u308b\u3002\n\u4eca\u56de\u306e\u3088\u3046\u306b\u4e00\u65b9\u306b\u504f\u308a\u304c\u3042\u308b\u5834\u5408\u3001\u504f\u3063\u3066\u3044\u308b\u65b9\u306e\u8aa4\u691c\u77e5\u4ef6\u6570\u304c\u591a\u304f\u306a\u308b\u306e\u3067\u305d\u308c\u3092\u88dc\u6b63\u3057\u3088\u3046\u3068\u3057\u3066\u5c11\u6570\u306e\u30af\u30e9\u30b9\u306e\u8aa4\u691c\u77e5\u7cbe\u5ea6\u304c\u306a\u3044\u304c\u3057\u308d\u306b\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\n\n\n\u4ee5\u4e0b\u3067\u4f8b\u3092\u6319\u3052\u308b\n\u53d6\u5f15\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u3069\u308c\u304c\u4e0d\u6b63\u3067\u3069\u308c\u304c\u672c\u7269\u304b\u3092\u8abf\u3079\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u96fb\u5b50\u5546\u53d6\u5f15\u4f01\u696d\u306b\u3068\u3063\u3066\u3001\u4e0d\u6b63\u306a\u53d6\u5f15\u304c\u884c\u308f\u308c\u308b\u3053\u3068\u306f\u3001\u304a\u5ba2\u69d8\u306e\u4fe1\u983c\u3092\u640d\u306a\u3044\u3001\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3067\u304d\u308b\u3060\u3051\u591a\u304f\u306e\u4e0d\u6b63\u53d6\u5f15\u3092\u898b\u3064\u3051\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n10000\u4ef6\u306e\u771f\u6b63\u306a\u53d6\u5f15\u306810\u4ef6\u306e\u4e0d\u6b63\u306a\u53d6\u5f15\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u5206\u985e\u5668\u306f\u4e0d\u6b63\u306a\u53d6\u5f15\u3092\u771f\u6b63\u306a\u53d6\u5f15\u3068\u3057\u3066\u5206\u985e\u3059\u308b\u50be\u5411\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u7406\u7531\u306f\u3001\u6570\u5b57\u3067\u7c21\u5358\u306b\u8aac\u660e\u3067\u304d\u307e\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a2\u3064\u306e\u53ef\u80fd\u6027\u306e\u3042\u308b\u51fa\u529b\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb1\u306f\u300110\u4ef6\u306e\u4e0d\u6b63\u306a\u53d6\u5f15\u306e\u3046\u30617\u4ef6\u3092\u771f\u6b63\u306a\u53d6\u5f15\u3068\u5206\u985e\u3057\u300110000\u4ef6\u306e\u771f\u6b63\u306a\u53d6\u5f15\u306e\u3046\u306110\u4ef6\u3092\u4e0d\u6b63\u306a\u53d6\u5f15\u3068\u5206\u985e\u3057\u305f\u3002\n\u30e2\u30c7\u30eb2\u306f\uff0c10\u4ef6\u306e\u4e0d\u6b63\u53d6\u5f15\u306e\u3046\u30612\u4ef6\u3092\u771f\u6b63\u306a\u53d6\u5f15\u3068\u5206\u985e\u3057\uff0c10000\u4ef6\u306e\u771f\u6b63\u306a\u53d6\u5f15\u306e\u3046\u3061100\u4ef6\u3092\u4e0d\u6b63\u306a\u53d6\u5f15\u3068\u5206\u985e\u3057\u305f\uff0e\n\u5206\u985e\u5668\u306e\u6027\u80fd\u304c\u30df\u30b9\u306e\u6570\u3067\u6c7a\u307e\u308b\u3068\u3059\u308c\u3070\uff0c\u30e2\u30c7\u30eb2\u304c102\u500b\u306e\u30df\u30b9\u3092\u3057\u305f\u306e\u306b\u5bfe\u3057\uff0c\u30e2\u30c7\u30eb1\u306f\u5408\u8a0817\u500b\u306e\u30df\u30b9\u3057\u304b\u3057\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u660e\u3089\u304b\u306b\u30e2\u30c7\u30eb1\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\u3001\u79c1\u305f\u3061\u306f\u4e0d\u6b63\u53d6\u5f15\u306e\u767a\u751f\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u305f\u3044\u306e\u3067\u3001\u4e0d\u6b63\u53d6\u5f15\u306e\u5206\u985e\u30672\u56de\u3057\u304b\u30df\u30b9\u3092\u3057\u306a\u304b\u3063\u305f\u30e2\u30c7\u30eb2\u3092\u4ee3\u308f\u308a\u306b\u9078\u3076\u3079\u304d\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u3053\u308c\u306b\u3088\u308a\u3001\u3088\u308a\u591a\u304f\u306e\u771f\u6b63\u306a\u53d6\u5f15\u304c\u4e0d\u6b63\u306a\u53d6\u5f15\u3068\u3057\u3066\u5206\u985e\u3055\u308c\u308b\u3068\u3044\u3046\u72a0\u7272\u3092\u6255\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u306f\u6211\u6162\u3067\u304d\u308b\u30b3\u30b9\u30c8\u3067\u3057\u3087\u3046\u3002\u3044\u305a\u308c\u306b\u3057\u3066\u3082\u3001\u4e00\u822c\u7684\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\u30e2\u30c7\u30eb2\u3088\u308a\u3082\u30e2\u30c7\u30eb1\u3092\u9078\u3093\u3067\u3057\u307e\u3046\u3053\u3068\u306b\u306a\u308a\u3001\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\u5b9f\u969b\u306b\u306f\u3001\u30e2\u30c7\u30eb2\u3092\u4f7f\u7528\u3059\u308c\u3070\u963b\u6b62\u3067\u304d\u305f\u306f\u305a\u306e\u4e0d\u6b63\u53d6\u5f15\u3092\u3001\u5927\u91cf\u306b\u901a\u904e\u3055\u305b\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u304a\u5ba2\u69d8\u306e\u4e0d\u5e78\u3068\u4f1a\u793e\u306e\u304a\u91d1\u306e\u640d\u5931\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002\n\n\u5143\u30b5\u30a4\u30c8\nhttp:\/\/www.chioka.in\/class-imbalance-problem\/\nwww.DeepL.com\/Translator\uff08\u7121\u6599\u7248\uff09\u3067\u7ffb\u8a33\u3057\u307e\u3057\u305f\u3002","50f18a0a":"EXT_SOURCE\u3001 DAYS_BIRTH\u306a\u3069\u304c\u76ee\u7684\u5909\u6570\u306b\u5927\u304d\u306a\u5f71\u97ff\u3092\u3042\u305f\u3048\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002<br>\n\u91cd\u8981\u5ea6\u304c\u4f4e\u3044\u7279\u5fb4\u30ab\u30e9\u30e0\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u4e88\u6e2c\u306e\u51e6\u7406\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002<br>\n\uff08\u4f59\u8a08\u306a\u30c7\u30fc\u30bf\u304c\u306a\u304f\u306a\u308b\u3053\u3068\u3067\u4e88\u6e2c\u7cbe\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u3002\uff09<br>\n"}}