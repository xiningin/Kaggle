{"cell_type":{"0a31795a":"code","5f6caa95":"code","ee609c55":"code","e84324cd":"code","9980c9ce":"code","3c28f399":"code","ed724624":"code","5db105b9":"code","6b51e358":"code","782b966d":"code","75137376":"code","1f4626b0":"code","b7336a5f":"code","278290b7":"code","e1e6f351":"code","8b456b2e":"code","b4579f5f":"code","d92cb52c":"code","37cdd344":"code","443ef16b":"code","74aab8b9":"code","e7308be1":"code","8d154499":"code","f7ea9f78":"code","ffb739bc":"code","7bd292bb":"code","a66b6226":"code","da1d98ba":"code","befad9d2":"code","591de16a":"code","dd459158":"code","26fa774f":"code","23ce08cf":"code","4f2c8f1f":"code","8acc0b13":"code","c3ee33e5":"code","33341b23":"code","fa1e313d":"code","faef605a":"code","cc615d10":"code","b6e4ece4":"code","6f15dbf4":"code","5e8f4286":"code","918c09f2":"code","e52270fd":"code","fd3a589f":"code","ceade02b":"code","0d01f9b6":"code","3161e63d":"code","edb7c1b8":"code","61178a1d":"markdown","2859b6dc":"markdown","c58c12b9":"markdown","dc1c3314":"markdown","de06034a":"markdown","168fb330":"markdown","8707b402":"markdown","1d87cdd9":"markdown","a765fba9":"markdown","51eaa05a":"markdown","e4470198":"markdown","1d63f588":"markdown","1414015b":"markdown","97838953":"markdown","58fa474d":"markdown","eef8dff2":"markdown"},"source":{"0a31795a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nfrom datetime import date\nimport plotly.express as px\nimport folium","5f6caa95":"### Sonoma County, CA\nSonoma = pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/Sonoma_County_Animal_Shelter_Intake_and_Outcome.csv')\n\n### King County, WA\nKing = pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/King_CountyWALost__found__adoptable_pets.csv')\n\n### Dallas, TX\nDallas = pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/Dallas_Animals_Inventory.csv')\n\n### Austin, TX\nAustin_Intakes = pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/Austin Animal Center Intakes.csv')\nAustin_Outcomes = pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/Austin Animal Center Outcomes.csv')\nAustin = pd.merge(Austin_Intakes, Austin_Outcomes, on='Animal ID')","ee609c55":"### Pull out values from columns of interest\nAustin.head(10)\n\n## Intake Condition: Normal, Sick, Injured, Pregnant, Nursing, Aged, Medical, Other, Behavior, Neonatal, Feral, Med Urgent, Space, Med Attn, Panleuk\n## Intake Type: Stray, Owner Surrender, Public Assist, Wildlife, Euthanasia Request, Abandoned\n## Animal Type_x: Dog, Cat, Bird, Livestock, Other\n## Outcome Type: Transfer, Return to Owner, Adoption, Euthanasia, Disposal, Died, Rto-Adopt, Missing, Relocate, nan\n\n## DateTime_x = Intake Date; DateTime_y = Outcome Date\n","e84324cd":"### Replace MonthYear_x - Intake and MonthYear_y - Outcome with shortened date frame\nAustin['MonthYear_x'] = pd.to_datetime(Austin['MonthYear_x'])\nAustin['Intake Date'] = Austin['MonthYear_x'].apply(lambda x: x.strftime('%Y-%m-%d'))\nAustin['MonthYear_y'] = pd.to_datetime(Austin['MonthYear_y'])\nAustin['Outcome Date'] = Austin['MonthYear_y'].apply(lambda x: x.strftime('%Y-%m-%d'))\nAustin['Intake Month'] = Austin['MonthYear_x'].apply(lambda x: x.strftime('%B %Y'))\nAustin['Outcome Month'] = Austin['MonthYear_y'].apply(lambda x: x.strftime('%B %Y'))\nAustin['Intake Date'] = pd.to_datetime(Austin['Intake Date'])\nAustin['Outcome Date'] = pd.to_datetime(Austin['Outcome Date'])\n\n### Drop MonthYear_x and MonthYear_y\nAustin = Austin.drop(columns=['MonthYear_x', 'MonthYear_y'])\n","9980c9ce":"## How many animal types are there?\ny = Austin['Animal Type_x'].value_counts()\nx = Austin['Animal Type_x'].unique()\nfig = px.bar(Austin, x=x, y=y, title='What types of Animals are Taken in?')\nfig.show()","3c28f399":"## What is the distribution of Intake Type?\n\ny1 = Austin['Intake Type'].value_counts()\nx1 = Austin['Intake Type'].unique()\nfig1 = px.bar(Austin, x=x1, y=y1, title='Austin Shelters Income Type Distribution')\nfig1.show()","ed724624":"y1 = Austin['Intake Type'].value_counts()\nx1 = Austin['Intake Type'].unique()\nfig1 = px.bar(Austin, x=x1, y=y1, title='Austin Shelters Intake Type Distribution')\nfig1.show()","5db105b9":"## What Condition is the Animal in Upon Intake? [Intake Condition]\n\ny2 = Austin['Intake Condition'].value_counts()\nx2 = Austin['Intake Condition'].unique()\nfig1 = px.bar(Austin, x=x2, y=y2, title='Austin Shelters Intake Condition')\nfig1.show()","6b51e358":"#Austin.to_csv('Austin_Data.csv')\nAustin_Data =pd.read_csv('\/kaggle\/input\/animal-shelter-intake-and-outcome\/Austin_Data.csv')\nAustin_Data = Austin_Data.drop(columns=['Unnamed: 0'])\nAustin_Data['Intake Date'] = pd.to_datetime(Austin_Data['Intake Date'])\nAustin_Data['Outcome Date'] = pd.to_datetime(Austin_Data['Outcome Date'])\n\nAustin_Data.dtypes\nAustin_Data['Animal Type_x'] = Austin_Data['Animal Type_x'].astype('category')\nAustin_Data['Animal Type_y'] = Austin_Data['Animal Type_y'].astype('category')\nAustin_Data['Name_x'] = Austin_Data['Name_x'].astype('string')\nAustin_Data['Name_y'] = Austin_Data['Name_y'].astype('string')\nAustin_Data['Breed_x'] = Austin_Data['Breed_x'].astype('string')\nAustin_Data['Breed_y'] = Austin_Data['Breed_y'].astype('string')\nAustin_Data['Color_x'] = Austin_Data['Color_x'].astype('string')\nAustin_Data['Color_y'] = Austin_Data['Color_y'].astype('string')\nAustin_Data['DateTime_x'] = Austin_Data['DateTime_x'].astype('datetime64')\nAustin_Data['DateTime_y'] = Austin_Data['DateTime_y'].astype('datetime64')","782b966d":"## How many pets were adopted during the pandemic? March 2020-now\n\n### First, I need to query the data rows that are only March 2020-now\nAustin_2020UP = Austin_Data.loc[Austin_Data['Outcome Date'] >= '2020-03-01']\nAustin_2020UP\ngroup = Austin_2020UP.reset_index().groupby(['Outcome Date', 'Animal Type_y'], as_index=False).count().rename(columns={'index': 'count'})\ngroup = group.drop(columns=['Animal ID', 'Name_x',\n       'DateTime_x', 'Found Location', 'Intake Type', 'Intake Condition',\n       'Animal Type_x', 'Sex upon Intake', 'Age upon Intake', 'Breed_x',\n       'Color_x', 'Name_y', 'DateTime_y', 'Date of Birth', 'Outcome Type',\n       'Outcome Subtype', 'Sex upon Outcome', 'Age upon Outcome', 'Breed_y',\n       'Color_y', 'Intake Date', 'Outcome Month', 'Intake Month'])\ngroup['Outcome Date'] = pd.to_datetime(group['Outcome Date'])\ngroup['Year'] = group['Outcome Date'].dt.year\nfig = px.line(group, x='Outcome Date', y='count', color='Animal Type_y')\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\n\nfig.show()","75137376":"Dog = Austin_2020UP[Austin_2020UP['Animal Type_x'] == 'Dog']\nCat = Austin_2020UP[Austin_2020UP['Animal Type_x'] == 'Cat']\nOther = Austin_2020UP[Austin_2020UP['Animal Type_x'] == 'Other']","1f4626b0":"### Chose to focus on the Dog Dataset\nDog = Dog.rename(columns={'Name_x': 'Name', 'Breed_x': 'Breed', 'Animal Type_y': 'Animal_Type', 'Color_y': 'Color'})\nDog = Dog.drop(columns=['Animal Type_x', 'Breed_y', 'DateTime_x', 'Color_x', 'Name_y', 'DateTime_y'])","b7336a5f":"## Calculated duration between intake and outcome then forgot about it in later analysis\nDog['Intake Date'] = pd.to_datetime(Dog['Intake Date'])\nDog['Outcome Date'] = pd.to_datetime(Dog['Outcome Date'])\nDog['Stay_Duration'] = Dog['Outcome Date'] - Dog['Intake Date']","278290b7":"Dog['Stay_Duration'].mean() #2939 Days for max, -674 days for min, 109 days for mean","e1e6f351":"Dog","8b456b2e":"Only_Dogs_Intake = Dog.groupby('Intake Date').count()","b4579f5f":"Only_Dogs_Intake = Only_Dogs_Intake.drop(columns=['Animal ID', 'Name', 'Found Location', 'Intake Type',\n       'Intake Condition', 'Sex upon Intake', 'Age upon Intake', 'Breed',\n'Date of Birth', 'Outcome Type', 'Outcome Subtype', 'Sex upon Outcome', 'Age upon Outcome', 'Color',\n       'Outcome Date', 'Intake Month', 'Outcome Month'])","d92cb52c":"Only_Dogs_Intake['Month'] = Only_Dogs_Intake.index.month\nOnly_Dogs_Intake['Year'] = Only_Dogs_Intake.index.year\nOnly_Dogs_Intake = Only_Dogs_Intake.drop(columns=['Stay_Duration'])\nOnly_Dogs_Intake","37cdd344":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller, kpss, acf, grangercausalitytests\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf,month_plot,quarter_plot\nfrom scipy import signal\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline \nsns.set_style(\"whitegrid\")\nplt.rc('xtick', labelsize=15) \nplt.rc('ytick', labelsize=15) ","443ef16b":"### create a 'Over Time Plot'\nfig, ax = plt.subplots(figsize=(15,6))\nsns.lineplot(x=Only_Dogs_Intake.index, y=Only_Dogs_Intake['Animal_Type'])\nax.set_title('# of Dogs Taken in Over Time', fontsize = 20, loc='center', fontdict=dict(weight='bold'))\nax.set_xlabel('Year', fontsize = 16, fontdict=dict(weight='bold'))\nax.set_ylabel('Count', fontsize = 16, fontdict=dict(weight='bold'))\nplt.tick_params(axis='y', which='major', labelsize=16)\nplt.tick_params(axis='x', which='major', labelsize=16)\n","74aab8b9":"Only_Dogs_Intake.groupby('Year').Animal_Type.count().plot.bar()\n##It's clear the pandemic boosted the number of dogs being taken in.","e7308be1":"## Create Seasonality Plot\nfig, ax = plt.subplots(figsize=(15,6))\npalette = sns.color_palette(\"ch:2.5,-.2,dark=.3\", 10)\nsns.lineplot(x= Only_Dogs_Intake['Month'], y=Only_Dogs_Intake['Animal_Type'], hue=Only_Dogs_Intake['Year'], palette=palette)\nax.set_title('Seasonal Plot of Intake Date for Austin Shelter Dogs', fontsize=20, loc='center', fontdict=dict(weight='bold'))\nax.set_xlabel('Month', fontsize=16, fontdict=dict(weight='bold'))\nax.set_ylabel('Count of Dogs', fontsize=16, fontdict=dict(weight='bold'))","8d154499":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))\nsns.boxplot(x=Only_Dogs_Intake['Year'], y=Only_Dogs_Intake['Animal_Type'], ax=ax[0])\nax[0].set_title('Year-wise Box Plot\\n(The Trend)', fontsize = 20, loc='center', fontdict=dict(weight='bold'))\nax[0].set_xlabel('Year', fontsize = 16, fontdict=dict(weight='bold'))\nax[0].set_ylabel('Count of Dogs', fontsize = 16, fontdict=dict(weight='bold'))\nsns.boxplot(x=Only_Dogs_Intake['Month'], y=Only_Dogs_Intake['Animal_Type'], ax=ax[1])\nax[1].set_title('Month-wise Box Plot\\n(The Seasonality)', fontsize = 20, loc='center', fontdict=dict(weight='bold'))\nax[1].set_xlabel('Month', fontsize = 16, fontdict=dict(weight='bold'))\nax[1].set_ylabel('Count of Dogs', fontsize = 16, fontdict=dict(weight='bold'))","f7ea9f78":"### Let's look at outcome\nDogs_Outcome= Dog.groupby('Outcome Date').count()","ffb739bc":"Dogs_Outcome = Dogs_Outcome.drop(columns=['Animal ID', 'Name', 'Found Location', 'Intake Type',\n       'Intake Condition', 'Sex upon Intake', 'Age upon Intake', 'Breed', 'Intake Date', 'Stay_Duration','Date of Birth', 'Outcome Type', 'Outcome Subtype', 'Sex upon Outcome', 'Age upon Outcome', 'Color',\n        'Intake Month', 'Outcome Month'])\nDogs_Outcome['Month'] = Dogs_Outcome.index.month\nDogs_Outcome['Year'] = Dogs_Outcome.index.year\n","7bd292bb":"Dogs_Outcome.groupby('Year').Animal_Type.mean().plot.bar()\n### Outcome Date shows the influence of the pandemic","a66b6226":"monthly = Dogs_Outcome.resample('M').sum()\nmonthly['Month'] = monthly.index.month\nmonthly['Year'] = monthly.index.year\nmonthly","da1d98ba":"monthly['Time Step'] = np.arange(len(monthly.index))\nmonthly.head()","befad9d2":"monthly.dtypes","591de16a":"### Using the same layout as seen in the first lesson of the Kaggle Time Series Course\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\n    \"figure\",\n    autolayout=True,\n    figsize=(11, 4),\n    titlesize=18,\n    titleweight='bold',\n)\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=16,\n    titlepad=10,\n)\n%config InlineBackend.figure_format = 'retina'\n\nfig, ax = plt.subplots()\nax.plot(\"Time Step\", \"Animal_Type\", data=monthly, color='0.75')\nax = sns.regplot(x='Time Step', y='Animal_Type', data=monthly, ci=None)\nax.set_title('TIme Plot of Dogs Only Outcome')\n                 ","dd459158":"## Add lag feature to shift the observations of the target series\n\nmonthly['Lag_1'] = monthly['Animal_Type'].shift(1)\n\ndf = monthly.reindex(columns=['Animal_Type', 'Lag_1'])\ndf.head()","26fa774f":"### Lag Plot of Dog Outcomes\nfig, ax = plt.subplots()\nax = sns.regplot(x='Lag_1', y='Animal_Type', data=monthly, ci=None)\nax.set_aspect('equal')\nax.set_title('Lag Plot of Dog Outcomes');","23ce08cf":"## Asking a New Question\n\nDog_Intake = Dog.drop(columns=['Outcome Date', 'Outcome Month'])\nDog_Intake['Year'] = pd.DatetimeIndex(Dog_Intake['Intake Date']).year\nDog_Intake['Month'] = pd.DatetimeIndex(Dog_Intake['Intake Date']).month\nDog_Intake","4f2c8f1f":"Dog_Outcome = Dog.drop(columns=['Intake Date', 'Intake Month'])\nDog_Outcome['Year'] = pd.DatetimeIndex(Dog_Outcome['Outcome Date']).year\nDog_Outcome['Month'] = pd.DatetimeIndex(Dog_Outcome['Outcome Date']).month\nDog_Outcome\n\n## FiX 'Fpund Locatio' so it works better with mapping\nDog_Outcome = Dog_Outcome.replace(to_replace = ' in ', value=' ', regex=True)\nDog_Outcome","8acc0b13":"### What does Intake to Outcome look like?\nin_to_out = Dog_Outcome[['Animal ID', 'Intake Type', 'Outcome Type']].groupby(['Intake Type', 'Outcome Type']).count()\nin_to_out","c3ee33e5":"fig, ax=plt.subplots(figsize=(20,15))\nsns.histplot(x='Intake Type', hue='Outcome Type', data=Dog_Outcome, multiple='dodge', ax=ax)","33341b23":"## Create a locations file\nLocations = Dog_Outcome['Found Location']\nLocations = Locations.replace(to_replace = ' in ', value=' ', regex=True)\nLocations = Locations.to_frame()\nLocations = Locations.drop_duplicates(keep='first')\n#Locations_File = Locations.to_csv('Austin Found Locations.csv')","fa1e313d":"### Upload that new file\nLocations = pd.read_csv('\/kaggle\/input\/austin-found-locations\/Austin Found Locations (1).csv')","faef605a":"## Use Nominatim via geopy.geocoders\n# CAVEAT: Bulk geocoding did not work out, so I used geocodio.io to upload my excel files in batches of 500 to create a small sample size\n#from geopy.geocoders import Nominatim\n#geolocator = Nominatim(user_agent=\"my_application\")\n#location = geolocator.geocode('6111 Softwood Dr Austin TX')\n#print(location.latitude, location.longitude)","cc615d10":"## Loaded up the transformed files with lat, lon included\nLocs_500 = pd.read_csv('\/kaggle\/input\/austin-found-locations\/500_Austin_Found (1).csv')\nLocs_501 = pd.read_csv('\/kaggle\/input\/austin-found-locations\/Austin_501t1000 (1).csv')\nLocs_1001 = pd.read_csv('\/kaggle\/input\/austin-found-locations\/Austin_1001t1500 (1).csv')","b6e4ece4":"### Change it so that given_address is Found Location and drop all na values\ni = Locs_500.fillna(value=0)\ni = i.rename(columns={\"given_address\": \"Found Location\"})","6f15dbf4":"L501 = Locs_501.fillna(value=0)\nL501 = Locs_501.rename(columns={\"given_address\": \"Found Location\"})\nL1001 = Locs_1001.fillna(value=0)\nL1001 = Locs_1001.rename(columns={\"given_address\": \"Found Location\"})","5e8f4286":"import folium\nm = folium.Map(location = [30.27,-97.74])\nm","918c09f2":"## turn lat,lon into coordinates that folium can work with\ncoords = i[['lat', 'lon']]\ncoords_list = coords.values.tolist()\nlen(coords_list)","e52270fd":"for point in range(0, len(coords_list)):\n    folium.Marker(location=coords_list[point], popup=i['suburb'][point],).add_to(m)","fd3a589f":"m","ceade02b":"### Append the 1500 found locations\nd = i.append(L501)\ne = d.append(L1001)","0d01f9b6":"# Merge with Dogs_Outcome Data Frame. Merge as many geocoded addresses as possible\ncombo= e.merge(Dog_Outcome, how='left', on='Found Location')","3161e63d":"## After merge, drop unneeded columns\ncombo.columns\ncombo = combo.drop(columns={'confidence_city_level', 'confidence_street_level', 'attribution',\n       'attribution_license', 'attribution_url'})","edb7c1b8":"combo","61178a1d":"#### Created a clean data file for Austin and then changed some column dtypes","2859b6dc":"2021 is the most standout INTAKE year and the months of March, June, and September have the highest count of dogs taken in, demonstrating that a beginning of the season is a good time for many dogs to be abandoned or found.","c58c12b9":"## Asking a New Question","dc1c3314":"### I imported a bunch of python packages before looking at the data. Some packages were added later as I tried other exploration routes","de06034a":"# Looked at March 2020 to Jan 2022 exclusively","168fb330":"# Asked Some Questions","8707b402":"## Then created separate groups based on Animal Type to do a deeper dive","1d87cdd9":"## Decided to only look at Dogs from this part forward to do a time series plot","a765fba9":"#### Then I imported shelter data I found, which ranged from Sonoma County to Austin County, TX","51eaa05a":"### Re-importing packages and creating a grid layout for time series plot","e4470198":"## Now you can plot clusters to find out where most dogs are taken in by animal control.\n\nThank you for following along, as you can see, I am all over the place, but I have good intentions with the erratic thoughts. Feedback is appreciated. I did not fully complete this project, i.e. I forgot to do a comparison with the Washington Dataset and I left Intake Dogs dataset high and dry, but I wanted to get this out there or else it would never see the light of day to benefit from public feedback.","1d63f588":"## Let's Look at Outcome Now","1414015b":"### I then did some data cleaning and transformations on the Austin data and as you'll see moving forward, I completely forget about the King County, WA data","97838953":"After looking at the datasets, AUSTIN has the most rows at 175034, followed by SONOMA with 22311, then DALLAS with 939 rows, and lastly, KING with 259 Rows. So, I'm going to analyze the bigger datasets, giving me a comparison between California and Washington","58fa474d":"## Linear Regression will be used","eef8dff2":"# **The Question that started this:**\nI wonder how many pets are being adopted right now? (Jan 2022, COVID Times)\nHow many Intakes have happy Outcomes?"}}