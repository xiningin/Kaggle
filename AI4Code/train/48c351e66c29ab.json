{"cell_type":{"834492d4":"code","41768201":"code","6b2478f4":"code","d16f3da3":"code","c8edab96":"code","8a7385aa":"code","fa363719":"code","b729a745":"markdown","8ef18293":"markdown"},"source":{"834492d4":"!pip install --no-index ..\/input\/cellpose-install\/cellpose-0.7.2-py3-none-any.whl --find-links=..\/input\/cellpose-install","41768201":"# !cp -r ..\/input\/cellpose-code .\/\n# %cd .\/cellpose-code","6b2478f4":"!mkdir \/content\n!cp '\/kaggle\/input\/sartorius-cellpose-model\/pseudo_3k_26_50_cellpose_residual_on_style_on_concatenation_off_train_2021_12_18_14_33_07.383445' \/content","d16f3da3":"%%writefile run.py\nimport torch\nimport numpy as np\nfrom cellpose import models, io, plot\nfrom pathlib import Path\nimport pandas as pd\n\ndef rle_encode(img):\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\ntest_dir = Path('\/kaggle\/input\/sartorius-cell-instance-segmentation\/test')\ntest_files = [fname for fname in test_dir.iterdir()]\nmodel =  models.CellposeModel(gpu=True,\\\n                            pretrained_model=['\/kaggle\/input\/sartorius-cellpose-final\/fold0_cellpose_2021_12_29_04_58_56.251435_epoch_19',\n                                              '\/kaggle\/input\/sartorius-cellpose-final\/fold1_cellpose_2021_12_29_09_09_40.859558_epoch_19',\n                                              '\/kaggle\/input\/sartorius-cellpose-final\/fold2_cellpose_2021_12_29_09_22_20.324645_epoch_19',\n                                              '\/kaggle\/input\/sartorius-cellpose-final\/fold3_cellpose_2021_12_29_09_35_14.250530_epoch_19',\n                                              '\/kaggle\/input\/sartorius-cellpose-final\/fold4_cellpose_2021_12_29_09_48_19.213322_epoch_19',\n                                             ])\nsize_model = torch.load('\/kaggle\/input\/sartorius-cellpose-model\/pseudo_size_model.pth')\nids, masks = [],[]\nfor fn in test_files:\n    test_image = io.imread(str(fn))\n    predicted_diams, diams_style = size_model.eval(test_image, channels=[0,0])\n    preds, flows, _ = model.eval(test_image, diameter=predicted_diams, channels=[0,0],\\\n                                 augment=True, resample=True,)\n#                                  diam_threshold=12, min_size=14,\\\n#                                  flow_threshold=0.4, mask_threshold=0.1)\n    for i in range (1, preds.max() + 1):\n        ids.append(fn.stem)\n        masks.append(rle_encode(preds == i))\n        \npd.DataFrame({'id':ids, 'predicted':masks}).to_csv('\/kaggle\/working\/submission.csv', index=False)\n","c8edab96":"!python run.py","8a7385aa":"# %cd ..\n# !rm -r cellpose-code","fa363719":"import pandas as pd\npd.read_csv('submission.csv')","b729a745":"# Inference example with a Cellpose model: www.cellpose.org\nThe model is based on U-Net, however rather than training it directly on bitmask targets they first convert them to \"spatial flows\" representations and train on that. This makes segmentation of dense and touching cells more reliable. For details and additional tricks they use see the paper \"Cellpose: a generalist algorithm for cellular segmentation\".\n\nTo train it I used the script provided in the cellpose repo ie: `python -m cellpose --train ...` after I converted the dataset to the input format it expects.\n\nIn inference I just submit the masks as they were returned from the model - no postprocessing","8ef18293":"#### I'm running it in a separate process rather than as a regular notebook because I've faced issues with numpy version not updating after the `pip install` above. If you know how to fix this please let me know."}}