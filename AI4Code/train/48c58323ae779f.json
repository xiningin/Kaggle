{"cell_type":{"f14082ae":"code","3ce5a9b9":"code","01c87229":"code","cb649bf6":"code","48e69ae5":"code","c8f33ede":"code","bcdc9315":"code","498f3c69":"code","c57b2a13":"code","ed1d3c9e":"code","ec178d82":"code","9d21b4af":"code","0287a11e":"code","0d6dc0ec":"code","37779d27":"code","b45cdcc9":"code","57ac4acf":"code","d13bc5dc":"code","21482716":"code","5e520db6":"code","c94c696d":"code","dc4f9803":"markdown","91bdf292":"markdown","b1697625":"markdown","939a8ed7":"markdown","9315d0dc":"markdown","fc10a2a0":"markdown","e0eefd87":"markdown","2e070699":"markdown","9bcc81c3":"markdown","b825f62f":"markdown","ce8c492a":"markdown","153d00ef":"markdown","af0e4516":"markdown"},"source":{"f14082ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ce5a9b9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as plt","01c87229":"df = pd.read_csv(\"..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv\")\ndf","cb649bf6":"df.isnull().sum()","48e69ae5":"sns.heatmap(df.isnull())","c8f33ede":"df[df['Gender']=='Female']","bcdc9315":"data = df.copy()\ndata","498f3c69":"data['temp']=data['Branch']\ndata['Branch'] = data['City']\ndata['City'] = data['temp']\n#data.drop(columns = ['temp'],inplace = True)\ndata","c57b2a13":"cols = {'City':'Branch','Branch':'City'}\ndata.columns = [cols.get(x,x) for x in data.columns]\ndata","ed1d3c9e":"data.drop('temp',axis = 1,inplace = True)\ndata","ec178d82":"a,b = data.iloc[1],data.iloc[2]\ntemp = data.iloc[1].copy()\ndata.iloc[1] = b\ndata.iloc[2] = temp\ndata\n","9d21b4af":"new_data = data[data['Invoice ID'].str.contains('9')]\nnew_data","0287a11e":"invoice = data['Invoice ID'].where(data['Quantity']>=2)\ninvoice.dropna(inplace = True)\ninvoice_df = pd.DataFrame(invoice)\ninvoice_df","0d6dc0ec":"data['Quantity'].where(data['Quantity']>=2).count()","37779d27":"inv = data.loc[(data['Rating'] >= 6) & (data['Payment'] == 'Cash') & (data['Gender']=='Male')]\ninv","b45cdcc9":"mem = data.loc[(data['Customer type'] == 'Member') & (data['Payment'] == 'Cash')]\nmem","57ac4acf":"rev = data.loc[(data['Tax 5%'] <= 10) & (data['Payment'] == 'Cash')]\nrev['Total'].sum()","d13bc5dc":"data['Date'] = pd.to_datetime(data['Date'])\nquant = data.loc[data['Date'] >'3\/25\/2019']\nquant","21482716":"quant['Quantity'].sum()","5e520db6":"avg = data.loc[data['Rating']>=6]\nperc = (avg['gross income']\/avg['Total'])*100\nperc","c94c696d":"sum(perc)\/len(perc)","dc4f9803":"## Average of the percent of gross income to total with rating above 6","91bdf292":"## Total quantity purchased after 3\/25\/2019","b1697625":"# Aim- Data Manipulation","939a8ed7":"Understanding and quering the data is the most basic and important step. I gave an attemp to play around the data! ","9315d0dc":"## Total revenue with tax below 10% and cash payment","fc10a2a0":"# Conclusion","e0eefd87":"Playing with data is interesting and a needed skill.\n","2e070699":"## Data frame with member customers who pay using cash","9bcc81c3":"## Invoice ID with cash payment by males and rating above 6","b825f62f":"## Make a df of rows having \"9\" in their invoice id","ce8c492a":"# Interchange any two rows in tha dataframe using pandas","153d00ef":"## Interchange any two columns","af0e4516":"## Print all invoices with quantity>=2"}}