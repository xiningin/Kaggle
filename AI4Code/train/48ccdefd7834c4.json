{"cell_type":{"5c759b5f":"code","37b723cd":"code","12972ea5":"code","4a9f52f5":"code","cea5a341":"code","c3e1972c":"code","386b0a75":"code","2ef5ca3c":"code","5d98e657":"code","0e2f5ece":"code","1867fabf":"code","3631509d":"code","5f4ddfa9":"code","af8008aa":"code","90c1595a":"code","8755da89":"code","b3ded684":"code","8f23a407":"code","ebbc9896":"code","a1f4d329":"code","cebb4a19":"code","97cdea7c":"code","b3287430":"code","3b0203e6":"code","aa093bd3":"code","73de79fd":"code","bf17d473":"code","0ae224ee":"code","2a7ff9f1":"code","c6b052bf":"code","421befef":"code","d57784e7":"code","827e8ee5":"code","19a14b69":"code","99162471":"code","ce016b6d":"code","89aed5bd":"code","729c2160":"code","7c0877d6":"code","cb492365":"code","cafa7f02":"code","a28528a1":"code","bb2261a3":"code","ace9698e":"code","779555d3":"code","4f55f0a5":"code","c63e1356":"code","3c530854":"code","2b52f568":"code","3efea77c":"code","ac0a5c69":"code","11c29d9b":"code","1a27e628":"code","5a3939a4":"code","6532402b":"code","b7b060a0":"code","0bbe23b9":"code","cd7fc890":"code","a61cb7b8":"code","2a57713f":"code","bc6caf24":"code","55058340":"code","ef901571":"code","8b015ba9":"code","310dd849":"code","987866d4":"code","97c5b211":"code","7742b605":"code","486f4aa3":"code","155f2df5":"code","00ea6f1b":"markdown","3237a43d":"markdown","7a41a27f":"markdown","1aa04536":"markdown","67762e3e":"markdown","7539d373":"markdown","d21d5d7d":"markdown","e8129fcc":"markdown","445d5edf":"markdown","da00e159":"markdown","ee257b2b":"markdown","c1b7b2bd":"markdown"},"source":{"5c759b5f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno\nfrom warnings import filterwarnings","37b723cd":"filterwarnings('ignore')","12972ea5":"data = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')","4a9f52f5":"data.info()","cea5a341":"missingno.matrix(data)","c3e1972c":"train = data[:100000]\ntest = data[-100000:]","386b0a75":"train['No-show'].unique()","2ef5ca3c":"train['No-show'].value_counts().plot(kind = 'barh')","5d98e657":"from sklearn.utils import resample","0e2f5ece":"df_major = train[train['No-show'] == 'No']\ndf_minor = train[train['No-show'] == 'Yes']","1867fabf":"df_upsample = resample(df_minor, n_samples = 76000, random_state = 42)","3631509d":"df = pd.concat([df_major, df_upsample], axis = 0)","5f4ddfa9":"df['No-show'].value_counts().plot(kind = 'barh')","af8008aa":"df.columns","90c1595a":"sns.countplot(df['No-show'], hue = df['Scholarship'])","8755da89":"sns.countplot(df['No-show'], hue = df['Gender'])","b3ded684":"sns.countplot(df['No-show'], hue = df['SMS_received'])","8f23a407":"sns.countplot(df['No-show'], hue = df['Hipertension'])","ebbc9896":"sns.countplot(df['No-show'], hue = df['Diabetes'])","a1f4d329":"sns.countplot(df['No-show'], hue = df['Alcoholism'])","cebb4a19":"df[['ScheduledDay', 'AppointmentDay']].head()","97cdea7c":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])","b3287430":"df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])","3b0203e6":"def add_datepart(dataframe, col, prefix, drop):\n    \n    dataframe[prefix+'_'+'Year'] = dataframe[col].dt.year\n    dataframe[prefix+'_'+'Month'] = dataframe[col].dt.month\n    dataframe[prefix+'_'+'Week'] = dataframe[col].dt.week\n    dataframe[prefix+'_'+'Day'] = dataframe[col].dt.day\n    dataframe[prefix+'_'+'DayOfWeek'] = dataframe[col].dt.dayofweek\n    dataframe[prefix+'_'+'DayOfYear'] = dataframe[col].dt.dayofyear\n    dataframe[prefix+'_'+'MonthEnd'] = dataframe[col].dt.is_month_end\n    dataframe[prefix+'_'+'MonthStart'] = dataframe[col].dt.is_month_start\n    dataframe[prefix+'_'+'QuarterEnd'] = dataframe[col].dt.is_quarter_end\n    dataframe[prefix+'_'+'QuarterStart'] = dataframe[col].dt.is_quarter_start\n    dataframe[prefix+'_'+'YearEnd'] = dataframe[col].dt.is_year_end\n    dataframe[prefix+'_'+'YearStart'] = dataframe[col].dt.is_year_start\n    \n    if drop:\n        dataframe.drop(col, 1, inplace = True)\n    return dataframe","aa093bd3":"df = add_datepart(df, 'ScheduledDay', 'SD', drop = True)\ndf = add_datepart(df, 'AppointmentDay', 'AD', drop = True)","73de79fd":"df.columns","bf17d473":"df.head().transpose()","0ae224ee":" binary = ['SD_MonthEnd', 'SD_MonthStart', 'SD_QuarterEnd', 'SD_QuarterStart', 'SD_YearEnd',\n          'SD_YearStart','AD_MonthEnd', 'AD_MonthStart','AD_QuarterEnd', 'AD_QuarterStart',\n          'AD_YearEnd', 'AD_YearStart', 'Gender', 'No-show']","2a7ff9f1":"def Boolen(x):\n    \n    if x == False:\n        return 0\n    elif x == 'No':\n        return 0\n    elif x == 'Yes':\n        return 1\n    elif x == True:\n        return 1\n    elif x == 'M':\n        return 1\n    else:\n        return 0","c6b052bf":"for cols in binary:\n    df[cols] = df[cols].apply(Boolen)","421befef":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder().fit(df['Neighbourhood'])","d57784e7":"df['Neighbourhood']=le.transform(df['Neighbourhood'])","827e8ee5":"test['Neighbourhood'] = le.transform(test['Neighbourhood'])","19a14b69":"from xgboost import XGBClassifier as xgb\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier as cbc","99162471":"models = [\n    (xgb(), 'xgb'),\n    (GradientBoostingClassifier(), 'gbt'),\n    (RandomForestClassifier(), 'rf'),\n    (BernoulliNB(), 'bnb'),\n    (GaussianNB(), 'gb'),\n    (LogisticRegression(), 'lr')]","ce016b6d":"score = {'Model': [],\n         'train': [],\n         'test': []}","89aed5bd":"def model_score(model_info):\n\n    name = model_info[1]\n    model = model_info[0]\n    print(name)\n    model.fit(X_train , y_train)\n    \n    score['Model'].append(name)\n    score['train'].append(model.score(X_train, y_train))\n    score['test'].append(model.score(X_test, y_test))","729c2160":"from sklearn.model_selection import train_test_split as tst","7c0877d6":"target_column = 'No-show'","cb492365":"df.drop(['PatientId', 'AppointmentID'], axis = 1, inplace = True)","cafa7f02":"X_train, X_test, y_train, y_test = tst(df.drop(target_column, 1), df[target_column], random_state = 42, test_size = 0.2)","a28528a1":"for model in models:\n    model_score(model)\n\npd.DataFrame(score)","bb2261a3":" cat_features = ['SD_MonthEnd', 'SD_MonthStart', 'SD_QuarterEnd', 'SD_QuarterStart', 'SD_YearEnd',\n                  'SD_YearStart','AD_MonthEnd', 'AD_MonthStart','AD_QuarterEnd', 'AD_QuarterStart',\n                  'AD_YearEnd', 'AD_YearStart', 'Gender', 'Scholarship', 'Hipertension', 'Diabetes',\n                  'Alcoholism', 'Handcap', 'SMS_received']","ace9698e":"cat = cbc(iterations = 350) \ncat.fit(X_train, y_train, cat_features, plot = True, verbose = 10, eval_set = (X_test, y_test), )","779555d3":"score['Model'].append('cbc')\nscore['train'].append(cat.score(X_train, y_train))\nscore['test'].append(cat.score(X_test, y_test))\npd.DataFrame(score)","4f55f0a5":"from sklearn.ensemble import VotingClassifier","c63e1356":"estimators = [\n            ('xgb', xgb()),\n            ('gbt', GradientBoostingClassifier()),\n            ('rf',RandomForestClassifier()),\n            ('lr',LogisticRegression()),\n            ('CBC', cbc(verbose = 50))]","3c530854":"model = VotingClassifier(estimators, voting = 'soft')\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","2b52f568":"from sklearn.metrics import classification_report","3efea77c":"print(classification_report(y_test, model.predict(X_test)))","ac0a5c69":"from sklearn.metrics import roc_auc_score","11c29d9b":"roc_auc_score(y_test, model.predict(X_test))","1a27e628":"from sklearn.model_selection import RandomizedSearchCV","5a3939a4":"X_mini = X_train[:int(len(X_train)*0.4)]\ny_mini = y_train[:int(len(y_train)*0.4)]","6532402b":"param_grid = {'n_estimators':np.arange(10,70,10),\n              'max_features':np.arange(0.1, 1, 0.1),\n              'bootstrap':[True, False]}\n\nclf = RandomizedSearchCV(RandomForestClassifier(), param_grid).fit(X_mini, y_mini)\n\nclf = clf.best_estimator_","b7b060a0":"roc_auc_score(y_test, clf.predict(X_test))","0bbe23b9":"params = {'max_depth': np.arange(3,9,1),\n          'max_features': np.arange(0.1, 1, 0.1),\n          'subsample': [0.1, 0.5, 1]}\n\nclf_g = RandomizedSearchCV(GradientBoostingClassifier(), params).fit(X_mini, y_mini)","cd7fc890":"roc_auc_score(y_test, clf_g.best_estimator_.predict(X_test))","a61cb7b8":"param_grid = {'penalty': ['l1', 'l2', 'elasticnet', 'none'], \n              'C':np.arange(0.5, 1, 0.1)}\n\nclf_lr = RandomizedSearchCV(LogisticRegression(), param_grid).fit(X_train, y_train)","2a57713f":"roc_auc_score(y_test, clf_lr.best_estimator_.predict(X_test))","bc6caf24":"clf","55058340":"estimators = [\n            ('xgb', xgb()),\n            ('rf',clf),\n            ('CBC', cbc(verbose = 50))]\n\nmodel = VotingClassifier(estimators, voting = 'soft')\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","ef901571":"model_2 = VotingClassifier(estimators, voting = 'hard')\nmodel_2.fit(X_train, y_train)\nmodel_2.score(X_test, y_test)","8b015ba9":"roc_auc_score(y_test, model_2.predict(X_test))","310dd849":"roc_auc_score(y_test, model.predict(X_test))","987866d4":"print(classification_report(y_test, model.predict(X_test)))","97c5b211":"def pipeline(df):\n    df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\n    df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])    \n    df = add_datepart(df, 'ScheduledDay', 'SD', drop = True)\n    df = add_datepart(df, 'AppointmentDay', 'AD', drop = True)\n    df['Neighbourhood']=le.transform(df['Neighbourhood'])\n    for cols in binary:\n        df[cols] = df[cols].apply(Boolen)\n    \n    label = df['No-show']\n    X = df.drop('No-show',1)\n    \n    print(roc_auc_score(label, model.predict(X)), '\\n')\n    print(print(classification_report(label, model.predict(X))))","7742b605":"data = data.drop(['AppointmentID', 'PatientId'], axis = 1)","486f4aa3":"pipeline(data)","155f2df5":"model.score(data.drop('No-show', 1), data['No-show'])","00ea6f1b":"3. Logistic Regression","3237a43d":"There are no null values","7a41a27f":"Lets try upsampling the data","1aa04536":"2. Gradient Boosting Classifier","67762e3e":"### HyperParameter Tuning","7539d373":"1. Random Forest Regressor","d21d5d7d":"This is an highly imbalanced dataset. Lets fix that by : *SMOTE *Upsampling","e8129fcc":"### ACHIEVED OVER 90% ROC_AUC SCORE AND 90% ACCURACY ON TOTAL DATASET","445d5edf":"### FINAL MODEL","da00e159":"### 1. Target Variable","ee257b2b":"### Feature Engineering","c1b7b2bd":"### EXPLORATORY DATA ANALYSIS"}}