{"cell_type":{"943dc148":"code","f1626283":"code","2d5206d1":"code","e9c8d9ee":"code","b4496de5":"code","fa550b92":"code","fbf263cb":"code","ee18da6d":"code","616d579a":"code","182afd5f":"code","53d5c73f":"code","a8f26dcb":"code","fa39ac07":"code","3f3fe6f8":"code","9cffc0c9":"code","b9d1c890":"code","c55682d6":"code","12393afb":"code","e9dfcd56":"code","d8510388":"code","fcb35b4b":"code","51d3e421":"code","47f9eed1":"markdown","fac4d9ab":"markdown","60fb8202":"markdown","4af2763e":"markdown","cc694f70":"markdown","45c5d10e":"markdown","0c4056c1":"markdown","07509daa":"markdown","fc29e065":"markdown"},"source":{"943dc148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1626283":"import matplotlib.pyplot as plt  \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n%matplotlib inline","2d5206d1":"df = pd.read_csv('\/kaggle\/input\/usa-housingcsv\/USA_Housing.csv')\ndf.head()","e9c8d9ee":"df.shape","b4496de5":"df.info()","fa550b92":"df.isnull().sum()\n# there is no null value","fbf263cb":"df.rename(columns={'Avg. Area Income' : 'income',\n                   'Avg. Area House Age':'age',\n                   'Avg. Area Number of Rooms':'numb_room',\n                   'Avg. Area Number of Bedrooms':'numb_bedroom',\n                   'Area Population':'population',\n                   'Price':'price',\n                   'Address':'address'},inplace=True)\ndf.columns","ee18da6d":"sns.pairplot(df)","616d579a":"plt.figure(figsize=(14,8))\nplt.tight_layout()\nsns.distplot(df['price'])","182afd5f":"df.drop('address', axis=1, inplace=True)  # we can drop unnecessary columns ( F.I: \"address\" it doesn't contain any numeric value)\ndf.columns","53d5c73f":"for i in df.columns[:5]:\n    sns.regplot(i, 'price', data=df)\n    plt.show()","a8f26dcb":"X = df[['income', 'age', 'numb_room', 'numb_bedroom', 'population']] # features\ny = df['price'] # target","fa39ac07":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","3f3fe6f8":"regressor = LinearRegression()  \nregressor.fit(X_train, y_train)","9cffc0c9":"# intercept\nprint(regressor.intercept_)\nprint(regressor.coef_) ","b9d1c890":"coeff_df = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficient'])  \ncoeff_df","c55682d6":"y_pred = regressor.predict(X_test)","12393afb":"df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf.head(10)","e9dfcd56":"X_test","d8510388":"new_df = df.head(25)\n\nnew_df.plot(kind='bar',figsize=(16,10))\nplt.show()","fcb35b4b":"R2 = metrics.r2_score(y_test, y_pred)\nprint('R^2 score :' , R2)\nn = X_test.shape[0] #sample size\np = X_test.shape[1] #number of predictors\nprint('Adjusted R^2 :' , 1-(1-R2)*(n-1)\/(n-p-1))\nprint('Adjusted R^2 :'  , 1 -metrics.r2_score(y_test, y_pred))\nprint('Mean Absolute Error:' , metrics.mean_absolute_error(y_test, y_pred)) \nprint('Mean Squared Error:' , metrics.mean_squared_error(y_test, y_pred)) \nprint('Root Mean Squared Error:' , np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n","51d3e421":"params = [[30000, 12, 3, 1, 10000]] # income - $, age, rooms, bedrooms, populations of area\npredicted_price = regressor.predict(params)\nprint(\"Predicted price:\", round(predicted_price[0]), \"$\")","47f9eed1":"### import libraries","fac4d9ab":"## Model Evaluation","60fb8202":"## Training a Linear Regression Model","4af2763e":"### Regression Evaluation Metrics","cc694f70":"#### Train Test Split","45c5d10e":"### Check out the Data","0c4056c1":"## Change name of columns","07509daa":"# Predict house price","fc29e065":"## Visualization"}}