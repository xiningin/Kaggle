{"cell_type":{"14ab40b4":"code","eb4ebb2f":"code","e674e89b":"code","24f052db":"code","c49d5136":"code","89347018":"code","0a59416f":"code","5289c579":"code","71dbfb25":"code","ce9753da":"code","57f8ab23":"code","acb655c9":"code","e98d4d66":"code","1e2098b3":"code","14cfac8c":"code","b0ffa05a":"code","a795762a":"code","a81400a0":"code","33353a59":"code","6cdef034":"code","2cacd016":"code","30c10004":"code","bbd2f60a":"code","37685968":"code","75d7eb55":"code","f02c7707":"code","a4780cb0":"code","0b6ccd45":"code","0298ff41":"code","ff10ef0a":"code","b5c637c1":"code","5cfa9e56":"code","f18c591b":"code","09f7ca96":"code","4aaf3ba6":"code","bcdac6cb":"code","8f1c1b4f":"markdown","d0724e24":"markdown","57dfe719":"markdown","eaf9965f":"markdown","df74a9eb":"markdown","75235a25":"markdown","7cf28f98":"markdown","904f6d5c":"markdown","00628db4":"markdown","f96a60a9":"markdown","0d04b6e1":"markdown","949c3413":"markdown","d5d13962":"markdown","1ac273af":"markdown","5c51cad7":"markdown","7b021ff5":"markdown","47f64e68":"markdown","52dc3705":"markdown","aa418fe0":"markdown","7f6751b2":"markdown","48c8b1aa":"markdown","eedae0cb":"markdown","37d2920a":"markdown","d0b01938":"markdown","852e61cc":"markdown"},"source":{"14ab40b4":"# matplotlib\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u308b\u3088\u3046\u306b\n!pip install japanize_matplotlib -Uq\n\n# RainCloud Plot(\u6563\u5e03\u56f3\uff0bBoxPlot\uff0bViolin\u3092\u4e00\u3064\u3067\u8868\u793a)\n!pip install ptitprince -Uq\n\n# \u6b20\u640d\u5024\u3092\u53ef\u8996\u5316\n!pip install missingno -Uq\n\n# \u30d9\u30f3\u56f3\u3092\u4f5c\u6210\n!pip install matplotlib-venn -Uq","eb4ebb2f":"import warnings\nwarnings.simplefilter('ignore')\n\nimport os\nimport gc\ngc.enable()\nimport sys\nimport glob\nimport math\nimport time\nimport random\nimport string\nimport psutil\nimport pathlib\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\nfrom ptitprince import RainCloud\nfrom matplotlib_venn import venn2\n\n\nfrom tqdm.auto import tqdm as tqdmp\nfrom tqdm.autonotebook import tqdm as tqdm\ntqdmp.pandas()\n\n## Model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\nimport lightgbm as lgb","e674e89b":"# \u5b9f\u9a13\u3067\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306fConfig\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u5b9f\u9a13\u4f55\u3084\u3063\u305f\u304b\u306a\u3068\u5f8c\u3067\u632f\u308a\u8fd4\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u306a\u308b\u3079\u304fConfig\u3060\u3051\u898b\u308c\u3070\u308f\u304b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\n\nclass CFG:\n    \n    def __init__(self):\n        \n        self.debug=True\n        self.seed=42\n        self.n_fold = 5\n        self.environment='Kaggle'  # 'AWS' or 'Kaggle' or 'Colab'\n        self.project='Shiggle_1st',\n        self.exp_name = '001_Baseline'\n        self.objective = 'rmse'\n        self.metric = 'rmse'\n        self.learning_rate = 0.1\n        self.num_boost_round = 1000\n        self.early_stopping_rounds = 30\n        self.num_leaves = 16\n        \nCONFIG = CFG()","24f052db":"## \u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u306eSeed\u56fa\u5b9a\ndef seed_everything(seed:int==42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CONFIG.seed)","c49d5136":"## \u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3068\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\n@contextmanager\ndef timer(name:str, slack:bool=False):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    print(f'<< {name} >> Start')\n    yield\n    \n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    \n    print(f\"<< {name} >> {m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec\", file=sys.stderr)","89347018":"# \u500b\u4eba\u7684\u306bAWS\u3084Kaggle\u74b0\u5883\u3084Google Colab\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3057\u3066\u3044\u308b\u306e\u3067\u307e\u3068\u3081\u3066\u3044\u307e\u3059\nif CONFIG.environment == 'AWS':\n    INPUT_DIR = Path('\/mnt\/work\/data\/kaggle\/shiggle_1st\/')\n    MODEL_DIR = Path(f'..\/models\/{CONFIG.exp_name}\/')\n    OUTPUT_DIR = Path(f'..\/data\/interim\/{CONFIG.exp_name}\/')\n    \n    os.makedirs(MODEL_DIR, exist_ok=True)\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    \n    print(f\"Your environment is 'AWS'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n    \n    \nelif CONFIG.environment == 'Kaggle':\n    INPUT_DIR = Path('..\/input\/shigglecup-1st\/DATA\/')\n    MODEL_DIR = Path('.\/')\n    OUTPUT_DIR = Path('.\/')\n    print(f\"Your environment is 'Kaggle'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n\n    \nelif CONFIG.environment == 'Colab':\n    INPUT_DIR = Path('\/content\/drive\/MyDrive\/kaggle\/Shiggle_1st\/data\/raw')\n    BASE_DIR = Path(\"\/content\/drive\/MyDrive\/kaggle\/Shiggle_1st\/data\/\")\n\n    MODEL_DIR = BASE_DIR \/ f'{CONFIG.exp_name}'\n    OUTPUT_DIR = BASE_DIR \/ f'{CONFIG.exp_name}\/'\n\n    os.makedirs(MODEL_DIR, exist_ok=True)\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    \n    if not os.path.exists(INPUT_DIR):\n        print('Please Mount your Google Drive.')\n    else:\n        print(f\"Your environment is 'Colab'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n        \nelse:\n    print(\"Please choose 'AWS' or 'Kaggle' or 'Colab'.\\nINPUT_DIR is not found.\")","0a59416f":"with timer('Data Load'):\n    train_df = pd.read_csv(INPUT_DIR \/ 'train.csv')\n    test_df = pd.read_csv(INPUT_DIR \/ 'test.csv')\n    sub_df = pd.read_csv(INPUT_DIR \/ 'sample_submission.csv')\n    \n    print(f'Train: {train_df.shape} | Test: {test_df.shape}')","5289c579":"train_df.head().T","71dbfb25":"## Train\u3068Test\u3092\u7d50\u5408\u3057\u307e\u3059\n## \u3042\u3068\u3067\u5206\u3051\u3089\u308c\u308b\u3088\u3046\u306bflag\u3092\u4ed8\u4e0e\u3057\u307e\u3059\n\ntrain_df['flag'] = 0\ntest_df['flag'] = 1\n\nwith timer('train test concat'):\n    whole_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","ce9753da":"with timer('log transform w\/ target'):\n    whole_df['target'] = whole_df['target'].progress_apply(lambda x: np.log1p(x))\n\n    plt.figure(figsize=(12,5), tight_layout=True)\n    sns.histplot(whole_df['target'], bins=30)\n    plt.show()","57f8ab23":"with timer('log transform w\/ height & weight'):\n    whole_df['height'] = whole_df['height'].progress_apply(lambda x: np.log1p(x))\n    whole_df['weight'] = whole_df['weight'].progress_apply(lambda x: np.log1p(x))","acb655c9":"plt.figure(figsize=(8,5), tight_layout=True)\nsns.jointplot(data=whole_df, x='height', y='weight')\nplt.show()","e98d4d66":"def count_type(df:pd.DataFrame) -> pd.DataFrame:\n    \n    _df = df.copy()\n    # type_2\u304cnan\u3067\u3042\u308c\u3070\u3001\u30bf\u30a4\u30d7\u6570\u306f1\u3068\u3059\u308b\n    _df['num_type'] = _df['type_2'].progress_apply(lambda x: 1 if x is np.nan else 2)\n\n    return _df","1e2098b3":"with timer('\u30bf\u30a4\u30d7\u6570\u3092\u30ab\u30a6\u30f3\u30c8'):\n    whole_df = count_type(whole_df)","14cfac8c":"## type_1\u3068type_2\u306e\u72ec\u81ea\u306e\u3082\u306e\u304c\u306a\u3044\u304b\u3092\u30d9\u30f3\u56f3\u3067\u78ba\u8a8d\u3057\u307e\u3059\nplt.figure(figsize=(8,6))\nvenn2(subsets=[set(train_df['type_1'].unique().tolist()),\n               set(train_df['type_2'].unique().tolist())],\n      set_labels=('A:type_1','B:type_2'))\nplt.title('type_1\u3068type_2\u306e\u30e6\u30cb\u30fc\u30af\u6570',fontsize=20)","b0ffa05a":"## Label Encoding\n## Label Encoding\u306fpandas\u306efactorize\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\nwith timer('label encoding w\/ type'):\n    labels, uniques = pd.concat([whole_df['type_1'], whole_df['type_2']], axis=0).factorize()\n    whole_df['type_1'] = labels[:len(whole_df)]\n    whole_df['type_2'] = labels[len(whole_df):]\n    display(whole_df.head())","a795762a":"with timer('\u7a2e\u65cf\u5024\u8a08\u7b97'):\n    whole_df['Base_stats'] = whole_df[['hp', 'attack', 'defense', 'special_attack', 'special_defense', 'speed']].sum(axis=1)\n    display(whole_df.head())","a81400a0":"def count_ability(df:pd.DataFrame) -> pd.DataFrame:\n    \n    _df = df.copy()\n    # type_2\u304cnan\u3067\u3042\u308c\u3070\u3001\u30bf\u30a4\u30d7\u6570\u306f1\u3068\u3059\u308b\n    _df['num_ability'] = _df['ability_2'].progress_apply(lambda x: 1 if x is np.nan else 2)\n\n    return _df","33353a59":"with timer('ability\u6570\u3092\u30ab\u30a6\u30f3\u30c8'):\n    whole_df = count_ability(whole_df)","6cdef034":"## Label Encoding\nwith timer('label encoding w\/ ability'):\n    labels, uniques = pd.concat([whole_df['ability_1'], whole_df['ability_2']], axis=0).factorize()\n    whole_df['ability_1'] = labels[:len(whole_df)]\n    whole_df['ability_2'] = labels[len(whole_df):]\n    display(whole_df.head())","2cacd016":"## Label Encoding\nwith timer('label encoding w\/ ability_hidden'):\n    labels, uniques = whole_df['ability_hidden'].factorize()\n    whole_df['ability_hidden'] = labels\n    display(whole_df.head().T)","30c10004":"with timer('drop color'):\n    whole_df = whole_df.drop(['color_1', 'color_2', 'color_f'], axis=1)","bbd2f60a":"def count_egg_group(df:pd.DataFrame) -> pd.DataFrame:\n    \n    _df = df.copy()\n    # type_2\u304cnan\u3067\u3042\u308c\u3070\u3001\u30bf\u30a4\u30d7\u6570\u306f1\u3068\u3059\u308b\n    _df['num_egg_group'] = _df['egg_group_2'].progress_apply(lambda x: 1 if x is np.nan else 2)\n\n    return _df","37685968":"with timer('egg_group\u6570\u3092\u30ab\u30a6\u30f3\u30c8'):\n    whole_df = count_egg_group(whole_df)","75d7eb55":"## Label Encoding\nwith timer('label encoding w\/ egg_group_2'):\n    labels, uniques = pd.concat([whole_df['egg_group_1'], whole_df['egg_group_2']], axis=0).factorize()\n    whole_df['egg_group_1'] = labels[:len(whole_df)]\n    whole_df['egg_group_2'] = labels[len(whole_df):]\n    display(whole_df.head())","f02c7707":"with timer('drop image'):\n    whole_df = whole_df.drop('url_image', axis=1)","a4780cb0":"with timer('drop shape'):\n    whole_df = whole_df.drop('shape', axis=1)","0b6ccd45":"## \u4e0a\u8a18\u307e\u3067\u3067\u4e00\u65e6\u30c7\u30fc\u30bf\u306f\u3059\u3079\u3066\u5909\u63db\u3092\u5b8c\u4e86\n## \u30c7\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\nwhole_df.head().T","0298ff41":"## Data Split\nwith timer('Data Split'):\n    train_df = whole_df[whole_df['flag'] == 0].reset_index(drop=True)\n    test_df = whole_df[whole_df['flag'] == 1].reset_index(drop=True)\n    \n    print(f'Train: {train_df.shape} | Test: {test_df.shape}')","ff10ef0a":"## Non Training Columns\ndrop_cols = [\"id\", \"pokemon\", \"species_id\", \"target\"]","b5c637c1":"lgb_params = {\n    \"objective\": CONFIG.objective,\n    \"metric\": CONFIG.metric,\n    \"learning_rate\": CONFIG.learning_rate,\n    \"verbosity\": 0,\n    \"random_state\": CONFIG.seed,\n    \"num_leaves\": CONFIG.num_leaves\n}","5cfa9e56":"# Train\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024, Test\u5168\u4f53\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u78ba\u8a8d\noof = np.zeros(len(train_df))\npred = np.zeros(len(test_df))\n\n# Feature Importance\u3092\u78ba\u8a8d\nimportances_all = pd.DataFrame()","f18c591b":"CV = KFold(n_splits=CONFIG.n_fold, shuffle=True, random_state=CONFIG.seed)\n\n## Cross Validation\u3067Fold\u3054\u3068\u306b\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3001\u4e88\u6e2c\nfor fold, (tr_idx, va_idx) in enumerate(CV.split(train_df, train_df['target'])):\n    \n    print(f'======================= Fold {fold+1} =============================')\n    \n    # \u6642\u9593\u8a08\u6e2c\n    st_time = time.time()\n    \n    ## \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u5206\u96e2\n    X_train = train_df.loc[tr_idx, :]\n    X_valid = train_df.loc[va_idx, :]\n    \n    ## id\u306a\u3069\u306eNon-Training\u5217\u306f\u524a\u9664\n    X_train = X_train.drop(drop_cols, axis=1)\n    X_valid = X_valid.drop(drop_cols, axis=1)\n    \n    y_train = train_df.loc[tr_idx, 'target']\n    y_valid = train_df.loc[va_idx, 'target']\n    \n    ## LightGBM\u306eDataset\u5316\n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid)\n    \n    ## model \u306e\u5b66\u7fd2\n    lgb_model = lgb.train(\n        lgb_params,\n        lgb_train,\n        valid_sets = [lgb_train, lgb_eval], # train,valid\u4e21\u65b9\u8868\u793a\n        num_boost_round = CONFIG.num_boost_round,\n        early_stopping_rounds=CONFIG.early_stopping_rounds,\n        verbose_eval=0\n    )\n    \n    ## \u6700\u3082\u3088\u304b\u3063\u305fiteration\u3092\u6307\u5b9a\n    best_iter = lgb_model.best_iteration\n    \n    ## valid\u306e\u4e88\u6e2c\u5024\u3092\u683c\u7d0d\n    oof[va_idx] += lgb_model.predict(X_valid, num_iteration=best_iter)\n    \n    ## valid\u306e\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u5024\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n    score = mean_squared_error(y_valid, oof[va_idx]) ** .5\n    \n    ## test\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u683c\u7d0d\n    lgb_pred = lgb_model.predict(\n        test_df.drop(drop_cols, axis=1),\n        num_iteration=best_iter\n    )\n    \n    ## \u4e88\u6e2c\u5024\u306f\u5404Fold\u306e\u5e73\u5747\n    pred += lgb_pred\/CONFIG.n_fold\n    \n    ## Fold\u3054\u3068\u306eFeature Importance\n    importances = pd.DataFrame()\n    importances['feature'] = X_train.columns.tolist()\n    importances['lgb_gain'] = lgb_model.feature_importance()\n    importances['fold'] = fold+1\n    importances_all = pd.concat([importances_all, importances], axis=0, sort=False)\n    \n    ## Model Save\n    lgb_model.save_model(os.path.join(MODEL_DIR, f'lgb_model_fold{fold+1}.txt'))\n    \n    e_time = time.time() - st_time\n    print(f'Fold: {fold+1} | LightGBM: RMSLE={score:.6f} | Elapsed: {e_time:.0f}s')\n    \n    del lgb_model, X_train, X_valid, y_train, y_valid\n    _ = gc.collect()\n    \nprint(\"\u2605\"*50)\ntotal_score = mean_squared_error(train_df['target'], oof) ** .5\nprint(f'Total Scor: {total_score:.6f}')","09f7ca96":"plt.figure(figsize=(16, 5),tight_layout=True)\nsns.distplot(train_df['target'], label='train')\nsns.distplot(oof, label='oof')\nsns.distplot(pred, label='pred')\nplt.legend()\nplt.show()","4aaf3ba6":"mean_importance = importances_all.groupby('feature')['lgb_gain'].agg('mean')\nmean_importance = mean_importance.sort_values(ascending=False)\nimportance_list = mean_importance.index.tolist()[:20]\n\nplt.figure(figsize=(20, 6), tight_layout=True)\nsns.boxplot(data=importances_all[importances_all['feature'].isin(importance_list)].sort_values('lgb_gain', ascending=False),\n            x='feature', y='lgb_gain')\nplt.xticks(rotation=90)\nplt.title(\"\u7279\u5fb4\u91cf\u91cd\u8981\u5ea6 LightGBM\")\nplt.show()","bcdac6cb":"## sample_submission.csv\u306etarget\u3092pred\u3067\u7f6e\u304d\u63db\u3048\u3066\u3001csv\u3067\u4fdd\u5b58\u3002\n## pred\u306flog\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u3067\u3001expm1\u3067\u5143\u306b\u623b\u3059\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n## submissin\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u898b\u308c\u3070\u3001CVscore\u3082\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306bCV\u5024\u3082\u5165\u308c\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u50d5\u306f\u591a\u3044\u3067\u3059\u3002\n\nsub_df['target'] = np.expm1(pred)\nsub_df.to_csv(f'.\/{CONFIG.exp_name}_CV{total_score:.6f}_submision.csv', index=False)","8f1c1b4f":"- type_2\u306fnan\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001nan\u4ee5\u5916\u306f\u3059\u3079\u3066type_1\u3068type_2\u306e\u30e6\u30cb\u30fc\u30af\u6570\u306f\u540c\u3058\u3060\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002","d0724e24":"## \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d","57dfe719":"## \u7a2e\u65cf\u5024\n- attack, defense, special_attack, special_defense, speed, hp\u306f\u30dd\u30b1\u30e2\u30f3\u56fa\u6709\u306e\u80fd\u529b\u5024\u3092\u793a\u3059\u3082\u306e\u306a\u306e\u3067\u3001\u80fd\u529b\u306e\u5408\u8a08\u5024\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n![\u30df\u30df\u30c3\u30ad\u30e5](https:\/\/pokemon-elpis.xyz\/wp-content\/uploads\/2019\/12\/78919912_154354542541194_6523067578930167808_o-1.jpg)","eaf9965f":"- \u3053\u3053\u3067\u306f\u7c21\u5358\u306a\u7279\u5fb4\u4f5c\u6210\u3068\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u4f5c\u6210\u3001Submission\u307e\u3067\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n- \u4e0a\u306e\u30bb\u30eb\u30ab\u30e9\u30fc\u3068\u540c\u3058\u3088\u3046\u306a\u8272\u3092\u6301\u3064\u30dd\u30b1\u30e2\u30f3\u3001\u307f\u306a\u3055\u3093\u304a\u5206\u304b\u308a\u306b\u306a\u308a\u307e\u3059\u3067\u3057\u3087\u3046\u304b\u3002\n  - EDA\u306enotebook\u3082\u5225\u306e\u30dd\u30b1\u30e2\u30f3\u306e\u30ab\u30e9\u30fc\u3067\u8aac\u660e\u306e\u90e8\u5206\u306f\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u3002","df74a9eb":"## ability_hidden\n- \u3053\u3061\u3089\u3082\u72ec\u7acb\u3067Label Encoding\u3057\u3066\u3044\u304d\u307e\u3059","75235a25":"## Egg group\n- egg_group1, egg_group2\u3082type\u3068\u540c\u69d8\u306b\u30ab\u30a6\u30f3\u30c8\u6570\u3068\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3066\u3044\u304d\u307e\u3059","7cf28f98":"## ability\n- ability\u3082type\u3068\u540c\u69d8\u306b\u3001\u30a2\u30d3\u30ea\u30c6\u30a3\u6570\u3068\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059","904f6d5c":"<div class = 'alert alert-block alert-info'\n     style = 'background-color:#107b6a;\n              color:#ff7b73;\n              border-width:5px;\n              border-color:#084152;\n              font-family:Comic Sans MS'>\n    <p style = 'font-size:24px'>Baseline \u4f5c\u6210<\/p>\n    <a href = \"#Settings\"\n       style = \"color:#ff7b73;\n                font-size:14px\">1.Settings<\/a><br>\n    <a href = \"#Data-Load\"\n       style = \"color:#ff7b73;\n                font-size:14px\">2.Data Load<\/a><br>\n    <a href = \"#Preprocess\"\n       style = \"color:#ff7b73;\n                font-size:14px\">3.Preprocess<\/a><br>\n    <a href = \"#Training\"\n       style = \"color:#ff7b73;\n                font-size:14px\">4.Training<\/a><br>\n    <a href = \"#Submit\"\n       style = \"color:#ff7b73;\n                font-size:14px\">5.Submit<\/a><br>\n<\/div>","00628db4":"## url_image\n- \u9ad8\u6a4b\u3055\u3093\u304cefficientnetB0\u3092\u7528\u3044\u305f\u5206\u6790\u3092\u516c\u958b\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3067\u306f\u753b\u50cf\u306f\u4f7f\u308f\u305a\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002[\u53c2\u8003](https:\/\/www.kaggle.com\/shunsuketakahashi\/shiggle-1-effb0-training-cv-0-4293-lb-0-46497)","f96a60a9":"## shape\n- shape\u306fshape_id\u3067\u65e2\u306bEncoding\u3055\u308c\u3066\u3044\u308b\u3063\u307d\u3044\u306e\u3067\u3001shape\u306f\u4e00\u65e6\u524a\u9664","0d04b6e1":"## height, weight\n- EDA\u3067height\u3084weight\u306a\u3069\u306e\u7279\u5fb4\u306f\u5024\u57df\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u5206\u304b\u3063\u3066\u3044\u307e\u3059\n- \u5024\u57df\u304c\u5927\u304d\u3044\u3082\u306e\u3082\u5bfe\u6570\u5909\u63db\u3057\u307e\u3057\u3087\u3046","949c3413":"# Training\n- \u4eca\u56de\u306f\u56de\u5e30\u4e88\u6e2c\u3067\u3059\u306e\u3067\u3001KFold\u3067\u4e00\u65e6CrossValidation\u3092\u3057\u307e\u3059\u3002\n- test\u306b\u5bfe\u3057\u3066\u306fCrossValidation\u306e\u5404Fold\u3054\u3068\u306e\u4e88\u6e2c\u5024\u3092\u5e73\u5747\u3057\u307e\u3059\u3002\n- \u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u306fLightGBM\u3067\u3059\u3002","d5d13962":"## Data Check","1ac273af":"## Color\n- Color\u306f\u4e00\u65e6\u4eca\u56de\u306f\u4f7f\u308f\u306a\u3044\u65b9\u5411\u3067\u8003\u3048\u307e\u3059\n  - 16\u9032\u6570\u306e\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3042\u307e\u308aid\u3068\u5909\u308f\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u524a\u9664\u3057\u307e\u3059","5c51cad7":"# Data Load","7b021ff5":"- \u307e\u305a\u306f\u4eca\u56de\u306e\u8a55\u4fa1\u65b9\u6cd5\u304cRMSLE\u306a\u306e\u3067Target\u306e\u5024\u306flog\u3092\u3068\u308a\u307e\u3057\u3087\u3046\n  - log\u3092\u53d6\u308b\u969b\u306f\u3001np.log1p\u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\n  - \u3042\u3068\u3067\u623b\u3059\u3068\u304d\u306b\u306fnp.exp1m\u3092\u4f7f\u3044\u307e\u3059\u3002","47f64e68":"# Submit","52dc3705":"## \u4e88\u6e2c\u5024\u306e\u5206\u5e03\u3092\u78ba\u8a8d","aa418fe0":"# Settings","7f6751b2":"## Target\u3092log\u5909\u63db","48c8b1aa":"- output\u306b\u5410\u304d\u51fa\u3055\u308c\u305fsubmission.csv\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066submit\u3057\u3066\u307f\u307e\u3057\u3087\u3046","eedae0cb":"<img src=\"https:\/\/automaton-media.com\/wp-content\/uploads\/2019\/11\/20191121-106756-header-696x392.jpg\" width=200%>","37d2920a":"## type_1, type_2\n- \u30bf\u30a4\u30d7\u3092\u8907\u6570\u3082\u3064\u304b\u3069\u3046\u304b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n  - \u5358\u30bf\u30a4\u30d7\u306e\u30dd\u30b1\u30e2\u30f3\u306ftype_2\u304cnan\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3046\u307e\u304f\u4f7f\u3044\u307e\u3057\u3087\u3046\n- \u30bf\u30a4\u30d7\u306ftype_1, type_2\u3067\u5171\u901a\u306e\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u7528\u306b\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u3087\u3046","d0b01938":"# Preprocess","852e61cc":"- \u30c7\u30fc\u30bf\u306e\u6982\u89b3\u304b\u3089\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046"}}