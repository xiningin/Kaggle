{"cell_type":{"301500d9":"code","51cef8d3":"code","55bfb53d":"code","38aba02b":"code","710021af":"code","bf61b3fb":"code","e1be58e7":"markdown","f4ba0e0c":"markdown","dba83240":"markdown","9baaeaa2":"markdown","00e26f3e":"markdown"},"source":{"301500d9":"import numpy as np \nimport pandas as pd \nimport os\nimport re\nimport ast\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import StandardScaler as SS\nfrom sklearn.metrics.pairwise import cosine_similarity as cs\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","51cef8d3":"def col(df, colname = \"artists\"):\n    return np.array([int(x == colname) for x in df.columns]).argmax()\ndef query_artists(df, lists = [], full = False, strict = True):\n    return pd.concat([query_artist(df, string = name, strict = strict) for name in lists], axis = 0)\ndef query_artist(df, string = \"--\", full = False, strict = True):\n    lists = []\n    if(not(strict)):\n        string = \"(.*?)\"+string+\"(.*?)\"\n    for i, artist in enumerate(df[\"artists\"]):\n        if(len(re.findall(string, \"\".join(artist))) != 0):\n            if(full):\n                lists.append(df.iloc[i])\n            else:\n                lists.append(df.iloc[i, [col(df, \"artists\"), col(df, \"genres\")]])           \n    if(full): \n        return pd.DataFrame(lists, columns = df.columns)\n    else:\n        return pd.DataFrame(lists, columns = [\"artists\", \"genres\"])\ndef perfect_eval(string):\n    try:\n        return ast.literal_eval(string)\n    except:\n        return []\ndef create_random_dict(df_by_artists, length, score):\n    list_of_names = list(set(df_by_artists[\"artists\"]))\n    random_indices = [round(x) for x in np.random.random(length)*len(list_of_names)]\n    random_names = pd.Series(list_of_names).iloc[random_indices].values.tolist()\n    random_rates = [int(round(x)) for x in (score[0] + np.random.random(length)*(score[1]-score[0]))]\n    name_rate_dict = {}\n    for index in range(length):\n        name_rate_dict.update({random_names[index]: random_rates[index]})\n    return name_rate_dict\ndef rate_artist(df_by_artists, name_rate_dict):\n    name_rate_series = pd.DataFrame({\"rate\": name_rate_dict.values, \"artists\": name_rate_dict.index})\n    artists_genres = df_by_artists[df_by_artists[\"artists\"].isin(list(name_rate_dict.keys()))][[\"artists\", \"genres\"]]\n    df_name_rate = pd.merge(name_rate_series, artists_genres, on = \"artists\", how = \"inner\")\n    df_x = df_name_rate.copy()\n    for index, genres in enumerate(df_name_rate[\"genres\"]):\n        for genre in genres:\n            df_x.at[index, genre] = 1\n    df_x = df_x.fillna(0)\n    df_user = df_x[\"rate\"]\n    df_genre_matrix = df_x.drop([\"artists\", \"genres\", \"rate\"], axis = 1).reset_index(drop = True)\n    df_profile = df_genre_matrix.transpose().dot(df_user)\n    return df_profile\ndef select_artist(df_by_artists, df_rate):\n    list_of_id = []\n    for index, row in df_by_artists.iterrows():\n        for genre in row[\"genres\"]:\n            if(genre in df_rate.index):\n                list_of_id.append(index)\n    list_of_id = list(set(list_of_id))\n    df_select_columns = df_by_artists.iloc[list_of_id, [col(df_by_artists, \"artists\"), col(df_by_artists, \"genres\")]]\n    df_select = df_select_columns.copy()\n    for index, row in df_select_columns.iterrows():\n        for genre in row['genres']:\n            df_select.at[index, genre] = 1\n    df_select = df_select.fillna(0)[df_rate.index]\n    return df_select\ndef recommend_artist_by_genre(df_by_artists, name_rate_dict, how_many):\n    df_by_artists = df_by_artists.copy()\n    df_by_artists[\"genres\"] = [perfect_eval(genre) for genre in df_by_artists[\"genres\"]]\n    name_rate_series = pd.Series(name_rate_dict)\n    df_rate = rate_artist(df_by_artists, name_rate_series)\n    df_select = select_artist(df_by_artists, df_rate)\n    affinity_scores = ((df_select*df_rate).sum(axis=1))\/(df_rate.sum())\n    affinity_scores_sorted = pd.Series(affinity_scores, name = \"genre_affinity\").sort_values(ascending = False)\n    artists_in_df = df_by_artists.iloc[affinity_scores_sorted.index, [col(df_by_artists, \"artists\")]]\n    resulted_df = pd.concat([affinity_scores_sorted, artists_in_df], axis = 1)\n    output = resulted_df[~resulted_df[\"artists\"].isin(name_rate_series.index)].iloc[:how_many, :]\n    return output.reset_index()\ndef recommend_artist_by_audio(df_by_artists, name_rate_dict, how_many):\n    artists_given = df_by_artists[df_by_artists[\"artists\"].isin(name_rate_dict.keys())].set_index(\"artists\")[df_by_artists.dtypes[df_by_artists.dtypes == \"float64\"].index.tolist()]\n    artists = df_by_artists.set_index(\"artists\")[df_by_artists.dtypes[df_by_artists.dtypes == \"float64\"].index.tolist()]\n    name_rate_series = pd.Series(list(name_rate_dict.values()), index = list(name_rate_dict.keys()))\n    df_artists_given = pd.DataFrame(SS().fit_transform(artists_given), columns = artists_given.columns, index = artists_given.index)\n    df_artists = pd.DataFrame(SS().fit_transform(artists), index = artists.index, columns = artists.columns)\n    similarity_matrix = pd.DataFrame(cs(df_artists), index = df_artists.index, columns = df_artists.index)[df_artists_given.index]\n    top_artists = name_rate_series.dot(similarity_matrix.transpose())\/name_rate_series.sum()\n    top_artists = top_artists[~top_artists.index.isin(name_rate_series.index.tolist())].sort_values(ascending = False)[:how_many]\n    indexes_of_top_artists = pd.DataFrame({\"artists\": df_by_artists[df_by_artists[\"artists\"].isin(top_artists.index)][\"artists\"].values, \"index\": df_by_artists[df_by_artists[\"artists\"].isin(top_artists.index)].index})\n    df_top_artists = pd.merge(pd.DataFrame({\"audio_affinity\": top_artists.values, \"artists\": top_artists.index}), indexes_of_top_artists, on = \"artists\", how = \"inner\")\n    return df_top_artists\ndef pretty_recommend_artist(df_by_artists, name_rate_dict, how_many):\n    df_genre_affinity = recommend_artist_by_genre(df_by_artists, name_rate_dict, how_many)\n    df_audio_affinity = recommend_artist_by_audio(df_by_artists, name_rate_dict, how_many)\n    print(\"\\n\\n--- GENRE AFFINITY ---\\n\\n\")\n    for index, row in df_genre_affinity.iterrows():\n        print(\"Number \",str(index),\": \",row[\"artists\"],\" matching \",str(round(row[\"genre_affinity\"] * 100, 2)),\"%\")\n    print(\"\\n\\n--- AUDIO AFFINITY ---\\n\\n\")\n    for index, row in df_audio_affinity.iterrows():\n        print(\"Number \",str(index),\": \",row[\"artists\"],\" matching \",str(round(row[\"audio_affinity\"] * 100, 2)),\"%\")\n    print(\"\\n\\n\")\n    df_affinity = pd.merge(df_audio_affinity, df_genre_affinity, on = [\"index\", \"artists\"], how = \"outer\")\n    df_scores = pd.concat([pd.DataFrame({\"affinity\": df_affinity[\"audio_affinity\"].fillna(0)+df_affinity[\"genre_affinity\"].fillna(0)}), df_affinity[\"artists\"]], axis = 1)\n    plt.figure(figsize = (10, 10))\n    plt.bar(list(df_scores[\"artists\"]), list(df_scores[\"affinity\"]), color = [\"green\" for x in range(how_many)] + [\"yellow\" for x in range(how_many)])\n    plt.xticks(rotation = 90)\n    plt.xlabel(\"Artists\")\n    plt.ylabel(\"Score\")\n    plt.title(\"Audio-Score (Green) vs Genre-Score (Yellow): Comparison\")\n    return df_affinity","55bfb53d":"df_by_artists = pd.read_csv(\"\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv\")\n#name_rate_dict = create_random_dict(df_by_artists, 10, [0, 10])\nname_rate_dict = {\"Linkin Park\": 10, \"Red Hot Chili Peppers\": 9, \"Three Days Grace\": 7, \"Arctic Monkeys\": 4, \"Papa Roach\": 6, \"Green Day\": 8,\n                  \"Foo Fighters\": 1, \"Billy Talent\": 2, \"Nirvana\": 5, \"The Offspring\": 3}\nhow_many = 15","38aba02b":"query_artists(df_by_artists, list(name_rate_dict.keys()))","710021af":"df_affinity = pretty_recommend_artist(df_by_artists, name_rate_dict, how_many)","bf61b3fb":"df_affinity","e1be58e7":"# STEP 4: CHECK ARTISTS","f4ba0e0c":"# STEP 1: SETUP","dba83240":"# STEP 3: GENERATE INPUT","9baaeaa2":"# STEP 5: RUN RECOMMENDATION ENGINE","00e26f3e":"# STEP 2: CREATE FUNCTIONS"}}