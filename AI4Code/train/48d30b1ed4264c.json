{"cell_type":{"fdaa5942":"code","22fa37a0":"code","1cbabc68":"code","2120800a":"code","1094ec2b":"code","0115032e":"code","6f360ccf":"code","3f32896c":"code","3341e0fe":"code","88803250":"code","b715997f":"code","6812524a":"code","664851de":"code","024cc98e":"code","48d7e309":"code","fb1686e2":"markdown"},"source":{"fdaa5942":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\n\nfrom keras.applications import ResNet50\nfrom keras.layers import Dense,Dropout,Flatten,BatchNormalization\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.metrics import top_k_categorical_accuracy\n\n\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\n\nfrom keras.preprocessing import image\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/resnet50\/\"))\n\nfrom glob import glob\nfrom skimage.io import imread\n\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","22fa37a0":"train_dir = \"..\/input\/humpback-whale-identification\/train\/\"\ntest_dir = \"..\/input\/humpback-whale-identification\/test\/\"\n\nsample_submission = pd.read_csv(\"..\/input\/humpback-whale-identification\/sample_submission.csv\")\n\n# train.csv\ntrain_df = pd.read_csv(\"..\/input\/humpback-whale-identification\/train.csv\")\n\n# psudo test.csv\ntest_df = pd.DataFrame(sample_submission[\"Image\"])\ntest_df['Id'] = ''\n\nprint(\"train.csv shape = \"+str(train_df.shape))\nprint(\"test.csv shape = \"+str(test_df.shape))","1cbabc68":"# unique ids - also includes \"new values\" \nids = train_df[\"Id\"]\nids.value_counts().shape[0]","2120800a":"num_classes = 5005","1094ec2b":"#image_size = 224\ntrain_data_gen = ImageDataGenerator(preprocess_input)\ntest_data_gen = ImageDataGenerator(preprocess_input)","0115032e":"train_generator = train_data_gen.flow_from_dataframe(\n    dataframe=train_df,\n    directory=train_dir,\n    x_col='Image',\n    y_col='Id',\n    has_ext=True,\n    shuffle=True\n    )\n\ntest_generator = test_data_gen.flow_from_dataframe(\n    dataframe=test_df,\n    directory=test_dir,\n    x_col='Image',\n    y_col='Id',\n    has_ext=True,\n)\n\ntest_samples = test_generator.filenames","6f360ccf":"# Build the model\n\nbase_model = ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path)\n\nset_trainable = False\n\nfor layer in base_model.layers:\n    if layer.name == 'res5b_branch2a':\n        set_trainable = True\n    if set_trainable:\n        layer.trainable = True\n    else:\n        layer.trainable = False","3f32896c":"# ref - https:\/\/stats.stackexchange.com\/questions\/156471\/imagenet-what-is-top-1-and-top-5-error-rate\ndef top_5_accuracy(y_true, y_pred):\n    return top_k_categorical_accuracy(y_true, y_pred, k=5)","3341e0fe":"def build_model(base_model):\n    model = Sequential()\n    model.add(base_model)\n    #model.add(Flatten())\n    model.add(BatchNormalization(momentum=0.1, epsilon=1e-6))\n    model.add(Dropout(rate=0.5))\n    model.add(Dense(units=4096,activation='relu'))\n    model.add(Dropout(rate=0.5))\n    model.add(Dense(units=num_classes,activation='softmax'))\n    \n    return model\n\nmodel = build_model(base_model)\n\nmodel.summary()","88803250":"#adam = Adam()\nmodel.compile(optimizer='sgd',loss=['categorical_crossentropy'],metrics=[top_5_accuracy])","b715997f":"history = model.fit_generator(train_generator,steps_per_epoch=50,epochs=25)","6812524a":"test_generator.reset() #?\n\npredictions = model.predict_generator(generator=test_generator,verbose=1)","664851de":"unique_labels = np.unique(ids)\n\nlabels_dict = dict()\nlabels_list = []\nfor i in range(len(unique_labels)):\n    labels_dict[unique_labels[i]] = i\n    labels_list.append(unique_labels[i])","024cc98e":"best_th = 0.38\n\npreds_t = np.concatenate([np.zeros((predictions.shape[0],1))+best_th, predictions],axis=1)\nnp.save(\"preds.npy\",preds_t)","48d7e309":"sample_df = pd.read_csv(\"..\/input\/humpback-whale-identification\/sample_submission.csv\")\nsample_list = list(sample_df.Image)\nlabels_list = [\"new_whale\"]+labels_list\npred_list = [[labels_list[i] for i in p.argsort()[-5:][::-1]] for p in preds_t]\npred_dic = dict((key, value) for (key, value) in zip(test_samples,pred_list))\npred_list_cor = [' '.join(pred_dic[id]) for id in sample_list]\ndf = pd.DataFrame({'Image':sample_list,'Id': pred_list_cor})\ndf.to_csv('submission.csv', header=True, index=False)\ndf.head()","fb1686e2":"# Humpback whale identification using transfer learning\n\nTransfer learning allows us to use the knowledge of pretrained models for prediction on new dataset.\nIn this notebook, I have used ResNet50 architecture with imagenet weights. The architecture is then extended by  adding some more layers to base architecture.\n\nThe notebooks that I had referred are:\n- https:\/\/www.kaggle.com\/whatvermawhat\/resnet50-128x128\n- https:\/\/www.kaggle.com\/sukhadj\/humpback-whale-identification\n- https:\/\/www.kaggle.com\/winstonvan\/python-keras-resnet50-for-cancer\n\nThough the performance of the model on the given dataset is pretty bad, it is my attempt to simulate the transfer learning."}}