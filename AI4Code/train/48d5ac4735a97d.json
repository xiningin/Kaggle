{"cell_type":{"5550074d":"code","8977ef8c":"code","931b5617":"code","32451d57":"code","e564a105":"code","c4c2278b":"code","c9ce91c6":"code","b0a9c292":"code","8cb9beb0":"code","bccb0458":"code","7a6f8d13":"code","4bfe430e":"code","5374cfac":"code","e1f4f70f":"code","49fe43f9":"code","b354b169":"code","9bc6f2f9":"code","eaf6efb5":"code","00657e1b":"code","4e65ce46":"code","0de937c0":"code","ca6d07c3":"code","9d09f050":"code","85151127":"code","d59be2dd":"code","d2abda09":"code","d52c595a":"code","17a96823":"code","ba26d66c":"code","7c213db2":"code","3b872228":"code","7401f91d":"code","b4db8ca6":"code","e7efc3c5":"code","5a477df4":"code","1865ef87":"code","fba5ef35":"code","16ea9a3b":"code","ab15e44d":"code","ab1e2e10":"code","ab5078cd":"code","fe927ab6":"code","c96011ac":"code","59061e99":"code","2f248f82":"code","20406c25":"code","49e7ecf4":"code","83c379ed":"code","b936911d":"code","5f849b81":"code","1e983870":"code","0054f074":"code","b7553555":"markdown","1fe9605d":"markdown"},"source":{"5550074d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8977ef8c":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nfrom datetime import datetime","931b5617":"from sklearn.model_selection import train_test_split\ndf = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")\nXtrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\nXtest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")","32451d57":"Xtrain","e564a105":"Xtest","c4c2278b":"df","c9ce91c6":"#let's check the number of NaN values\nXtrain.Province_State.isnull().sum()","b0a9c292":"#breaking data in countries with lesser cases and with countries with higher cases\nregion_list = list(Xtrain.Country_Region.unique())\nregion_list","8cb9beb0":"\ncountries_500=[]\ncountries_500_cases = []\nfor i in region_list:\n    x= Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if (max_cases <500.0) & (max_cases > 250.0):\n        countries_500.append(i)\n        countries_500_cases.append(max_cases)\n#print(countries_500)\n#print(countries_500_cases)\ndf500 = pd.DataFrame({'country':countries_500})\ndf500_cases = pd.DataFrame({'cases': countries_500_cases})  \ndf500 = pd.concat([df500,df500_cases],axis=1)\n#new_index = df500.countrie_500_cases.sort_values(ascending= True).index.values#\n#sortes_data = df500.reindex(new_index)   \n\nplt.figure(2,figsize=(15,7))\nsns.barplot(df500.country,df500.cases,palette='Blues')\nx=plt.xticks(rotation = 80)\nx=plt.ylim(150,550)\nplt.title('Countries with less than 500 cases')","bccb0458":"countries_1k=[]\ncountries_1k_cases = []\nfor i in region_list:\n    x= Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if (max_cases <1000.0) & (max_cases >500.0):\n        countries_1k.append(i)\n        countries_1k_cases.append(max_cases)\n    \ndf_1k = pd.DataFrame({'country':countries_1k})\ndf_1k_cases = pd.DataFrame({'cases': countries_1k_cases})  \ndf_1k = pd.concat([df_1k,df_1k_cases],axis=1)\nnew_index = df_1k.cases.sort_values(ascending=True).index.values\ndf_1k = df_1k.reindex(new_index)\nplt.figure(2,figsize=(15,7))\nsns.barplot(df_1k.country,df_1k.cases,palette='BuGn')\nx=plt.xticks(rotation = 80)\nx=plt.ylim(400,1050)\nplt.title('Countries with less than 1k cases')","7a6f8d13":"#countries with 5k corona cirus cases\ncountries_5k=[]\ncountries_5k_cases=[]\nfor i in region_list:\n    x=Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if  (max_cases >1000.0) & (max_cases<5000.0):\n        countries_5k.append(i)\n        countries_5k_cases.append(max_cases)\ndf_5k = pd.DataFrame({'country':countries_5k})\ndf_5k_cases = pd.DataFrame({'cases': countries_5k_cases})  \ndf_5k = pd.concat([df_5k,df_5k_cases],axis=1)\nnew_index = df_5k.cases.sort_values(ascending=True).index.values\ndf_5k = df_5k.reindex(new_index)\nplt.figure(2,figsize=(15,11))\nsns.barplot(df_5k.country,df_5k.cases,palette='PRGn_r')\nx=plt.xticks(rotation = 80)\n#x=plt.ylim(700,5100)\nplt.title(' Countries having 5k  cases')","4bfe430e":"countries_10k=[]\ncountries_10k_cases=[]\nfor i in region_list:\n    x=Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if  (max_cases >5000.0) & (max_cases<10000.0):\n        countries_10k.append(i)\n        countries_10k_cases.append(max_cases)\ndf_10k = pd.DataFrame({'country':countries_10k})\ndf_10k_cases = pd.DataFrame({'cases': countries_10k_cases})  \ndf_10k = pd.concat([df_10k,df_10k_cases],axis=1)\nnew_index = df_10k.cases.sort_values(ascending=True).index.values\ndf_10k = df_10k.reindex(new_index)\nplt.figure(2,figsize=(15,7))\nsns.barplot(df_10k.country,df_10k.cases,palette='Purples')\nx=plt.xticks(rotation = 80)\n#x=plt.ylim(3050,10500)\nplt.title(\"countriees upto 10k cases\")","5374cfac":"countries_35k=[]\ncountries_35k_cases=[]\nfor i in region_list:\n    x=Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if  (max_cases >10000.0) & (max_cases<35000.0):\n        countries_35k.append(i)\n        countries_35k_cases.append(max_cases)\ndf_35k = pd.DataFrame({'country':countries_35k})\ndf_35k_cases = pd.DataFrame({'cases': countries_35k_cases})  \ndf_35k = pd.concat([df_35k,df_35k_cases],axis=1)\nnew_index = df_35k.cases.sort_values(ascending=True).index.values\ndf_35k = df_35k.reindex(new_index)\nplt.figure(2,figsize=(15,7))\nsns.barplot(df_35k.country,df_35k.cases,palette='PuBuGn')\nx=plt.xticks(rotation = 80)\n#x=plt.ylim(9000,25000)\nplt.title('Countries upto 35k Cases ----In  Danger')","e1f4f70f":"countries_k=[]\ncountries_k_cases=[]\nfor i in region_list:\n    x=Xtrain.ConfirmedCases[Xtrain.Country_Region == i]\n    max_cases= max(x)\n    if  (max_cases >35000.0 ) & (max_cases < 150000.0):\n        countries_k.append(i)\n        countries_k_cases.append(max_cases)\ndf_k = pd.DataFrame({'country':countries_k})\ndf_k_cases = pd.DataFrame({'cases': countries_k_cases})  \ndf_k = pd.concat([df_k,df_k_cases],axis=1)\nnew_index = df_k.cases.sort_values(ascending=True).index.values\ndf_k = df_k.reindex(new_index)\nplt.figure(2,figsize=(15,7))\nsns.barplot(df_k.country,df_k.cases,palette='winter_r')\nx=plt.xticks(rotation = 80)\n#x=plt.ylim(20000,270000)\nplt.title('Countries on 3rd phase')","49fe43f9":"f_count= []\nfor i in df_35k.country:\n    x= Xtrain.Fatalities[Xtrain.Country_Region == i ]\n    count = max(x)\n    f_count.append(count)\ndf_35k.insert(2,\"Fatilities\",f_count,True)    \n","b354b169":"f_count= []\nfor i in df_k.country:\n    x= Xtrain.Fatalities[Xtrain.Country_Region == i ]\n    count = max(x)\n    f_count.append(count)\ndf_k.insert(2,\"Fatilities\",f_count,True)    \ndf_k","9bc6f2f9":"plt.figure(1,figsize=(15,9))\nsns.jointplot(x='Fatilities',y='cases',kind='kde',data=df_35k)\n","eaf6efb5":"sns.jointplot(x='Fatilities',y='cases',kind='kde',data=df_k)","00657e1b":"plt.figure(1,figsize=(12,7))\nsns.pointplot(x='cases', y='Fatilities', data=df_35k,hue='country',join=False,palette='gist_rainbow')\nax=plt.xticks(rotation=90)\nplt.title('Fatilities on Confirmed Cases')","4e65ce46":"    plt.figure(1,figsize=(11,7))\nsns.pointplot(x='cases', y='Fatilities', data=df_k,hue='country',join=True)\nplt.title('Fatilities on Confirmed Cases')","0de937c0":"danger =[]\nfor i in region_list:\n    x= Xtrain[Xtrain.Country_Region == i]\n    max_cases = x.ConfirmedCases.max()\n    if  max_cases>150000:\n        danger.append(x)\ndf_France= pd.DataFrame(danger[0]) \ndf_Italy= pd.DataFrame(danger[2])\ndf_Spain =pd.DataFrame(danger[3])\ndf_US = pd.DataFrame(danger[4])\ndf_France.reset_index()\ndf_Italy.reset_index()\ndf_Spain.reset_index()\ndf_US.reset_index()","ca6d07c3":"dates= [datetime.strptime(ts, \"%Y-%m-%d\") for ts in df_France.Date]\ndates =[datetime.strftime(ts,\"%Y-%m-%d\") for ts in dates]\ndf_F= pd.DataFrame({\"Date\":dates})\ndf_F['year'],df_F['month'],df_F['day']=df_F['Date'].str.split('-').str\n","9d09f050":"df_France=pd.merge(df_France,df_F)\ndates= [datetime.strptime(ts, \"%Y-%m-%d\") for ts in df_Italy.Date]\ndates =[datetime.strftime(ts,\"%Y-%m-%d\") for ts in dates]\ndf_F= pd.DataFrame({\"Date\":dates})\ndf_F['year'],df_F['month'],df_F['day']=df_F['Date'].str.split('-').str\n","85151127":"df_Italy=pd.merge(df_F,df_Italy)\ndates= [datetime.strptime(ts, \"%Y-%m-%d\") for ts in df_Spain.Date]\ndates =[datetime.strftime(ts,\"%Y-%m-%d\") for ts in dates]\ndf_F= pd.DataFrame({\"Date\":dates})\ndf_F['year'],df_F['month'],df_F['day']=df_F['Date'].str.split('-').str\ndf_Spain=pd.merge(df_F,df_Spain)","d59be2dd":"dates= [datetime.strptime(ts, \"%Y-%m-%d\") for ts in df_US.Date]\ndates =[datetime.strftime(ts,\"%Y-%m-%d\") for ts in dates]\ndf_F= pd.DataFrame({\"Date\":dates})\ndf_F['year'],df_F['month'],df_F['day']=df_F['Date'].str.split('-').str\ndf_US=pd.merge(df_US,df_F)","d2abda09":"df_France['Fatalities'].plot(kind='kde',logy=True)\ndf_Spain['Fatalities'].plot(kind='kde',logy=True)\ndf_Italy['Fatalities'].plot(kind='kde',logy=True)\ndf_US['Fatalities'].plot(kind='kde',logy=True)\nplt.title('Logarithmic rate of Fatalities of countries at high risk')","d52c595a":"sns.distplot(a=df_Spain[\"Fatalities\"],label=True,kde=True,color='blue',bins=3)\nplt.title('Fatality rate in Spain')","17a96823":"sns.distplot(a=df_Italy[\"Fatalities\"],label=True,kde=True,color='purple',bins=3)\nplt.title('Fatality rate in Italy')","ba26d66c":"plt.figure(4,figsize=(19,10))\nplt.subplot(2,2,1)\nsns.regplot(x=df_US.Fatalities,y=df_US.ConfirmedCases,fit_reg=True,units=df_US.month)\nplt.title('US')\nplt.subplot(2,2,2)\nsns.regplot(x=df_France.Fatalities,y=df_France.ConfirmedCases,fit_reg=True)\nplt.title(\"France\")\nplt.subplot(2,2,3)\nsns.regplot(x=df_Spain.Fatalities,y=df_Spain.ConfirmedCases,fit_reg=True)\nplt.title(\"Spain\")\nplt.subplot(2,2,4)\nsns.regplot(x=df_Italy.Fatalities,y=df_Italy.ConfirmedCases,fit_reg=True)\nplt.title(\"Italy\")\nplt.subplots_adjust(hspace=.8,wspace=.8)\nplt.show()","7c213db2":"df_US","3b872228":"data_us=df_US.groupby(['Province_State']).std()","7401f91d":"data_us.Fatalities.plot()\nplt.figure(1,figsize=(19,10))\na=plt.xticks(rotation=80)","b4db8ca6":"data=df_US.groupby(['Province_State','month','day']).max()\ndata=data.drop(['Id'],axis=1)\ndata.plot()\n\nplt.figure(1,figsize=(19,10))\na=plt.xticks(rotation=80)","e7efc3c5":"sns.lmplot(x='ConfirmedCases',y='Fatalities',data=data_us)","5a477df4":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ntrain.Province_State.fillna('State',inplace=True)\ntrain.head(5)","1865ef87":"\ntest.Province_State.fillna('State',inplace=True)\ntest\n","fba5ef35":"from sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import mean_absolute_error\nimport os\nimport warnings","16ea9a3b":"from sklearn.ensemble import RandomForestRegressor\nmodel1= RandomForestRegressor(random_state=999)","ab15e44d":"train[\"Date\"] = pd.to_datetime(train[\"Date\"]).dt.strftime(\"%Y%m%d\")\n","ab1e2e10":"test[\"Date\"] = pd.to_datetime(test[\"Date\"]).dt.strftime(\"%Y%m%d\")","ab5078cd":"series_col=['Country_Region','Province_State']\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()","fe927ab6":"Xtrain=train.copy()\nXtest = test.copy()\nfor col in series_col:\n    Xtrain[col]=encoder.fit_transform(train[col])\n    Xtest[col]=encoder.transform(test[col])","c96011ac":"Xtrain.Province_State.unique()","59061e99":"features=['Date','Province_State','Country_Region']\ncases = ['ConfirmedCases']","2f248f82":"model1.fit(Xtrain[features],Xtrain[cases])\npred1=model1.predict(Xtest[features])","20406c25":"confirmed_case=[]\nfor i in pred1:\n    c=int(i)\n    confirmed_case.append(c)","49e7ecf4":"model1=RandomForestRegressor(random_state=999)","83c379ed":"\nfeatures=['Date','Province_State','Country_Region']\ndeaths=['Fatalities']\n\nmodel1.fit(Xtrain[features],Xtrain[deaths])\n\nprediction= model1.predict(Xtest[features])","b936911d":"deaths=[]\nfor i in prediction:\n    d=int(i)\n    deaths.append(d)","5f849b81":"submission = pd.DataFrame({'ForecastId':test['ForecastId'],'ConfirmedCases':confirmed_case,'Fatalities':deaths})","1e983870":"submission","0054f074":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","b7553555":"GETTING ALL THE NAMES OF COUNTRY PRESENT IN DATA SET","1fe9605d":"# CATEGORIZING THE COUNTRIES ACCOREDING TO CASES"}}