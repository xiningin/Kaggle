{"cell_type":{"55795f74":"code","19857abf":"code","e28ed523":"code","dcc2c183":"code","1e118d1b":"code","049df97f":"code","e31a7bfa":"code","0d334f0a":"code","8fd1c833":"code","5503bb0c":"code","aa3874d4":"code","7c62eb3a":"code","9b46593d":"code","abd2790b":"code","ed3d66b8":"code","58e315f0":"code","eb12a683":"code","b406227a":"code","58479db4":"code","d7756ad8":"code","a302e133":"code","a56f832e":"code","259a194b":"code","371f9d29":"code","cbe76370":"code","fa5494ee":"code","b4797c9b":"code","4fbb4a3e":"code","c67fa517":"code","51164e01":"code","c4a5b890":"code","73434fe2":"code","72e4d361":"code","b03fb887":"markdown","1ef9705f":"markdown","067fc17b":"markdown","7e042d30":"markdown","268af6d2":"markdown","df8e987e":"markdown","81c9c074":"markdown","ffec6234":"markdown","3d476fac":"markdown","68a6f14d":"markdown","fb1d5d22":"markdown","7ee828f0":"markdown","c0eaed77":"markdown","f2cd120c":"markdown","ef0eb6c8":"markdown","134c0637":"markdown","66411315":"markdown","39d810c2":"markdown","e712e244":"markdown","b0dc5215":"markdown","6543d664":"markdown","6a2a9e2a":"markdown","c25e412e":"markdown","f75c9bb0":"markdown","d54b74d3":"markdown","22e1da42":"markdown","62374a98":"markdown"},"source":{"55795f74":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\nimport seaborn as sns","19857abf":"Data = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","e28ed523":"Data.shape #Checking the number of rows and columns","dcc2c183":"Data.head(5) #Quick overview of the table and display first 5 rows of the dataset","1e118d1b":"Data.tail(5)","049df97f":"Data.drop(['id','name','host_name','last_review'], axis=1, inplace=True)","e31a7bfa":"Data.isnull().sum()","0d334f0a":"Data.fillna({'reviews_per_month':0}, inplace=True)\nData.reviews_per_month.isnull().sum() #Checking the changes made\nData.isnull().sum() #There are no null values left\n","8fd1c833":"Data.neighbourhood_group.unique()","5503bb0c":"Data.room_type.unique()","aa3874d4":"top_borough=Data.neighbourhood_group.value_counts()\ntop_borough1=pd.concat([Data.neighbourhood_group.value_counts() , \n                        Data.neighbourhood_group.value_counts(normalize=True).mul(100)],axis=1, keys=('listings','percentage'))\nprint (top_borough1)","7c62eb3a":"sns.set(rc={'figure.figsize':(12,8)})                     #Setting figure size for future visualizations\nsns.set_palette(\"pastel\")                                 #Set the palette to the \"pastel\" default palette\nV1 = sns.countplot(x='neighbourhood_group', data=Data)    #Using Seaborn to create a countplot directly \nV1.set_xlabel('Borough')                                  #Changing Labels\nV1.set_ylabel('Listings')\nV1.set_xticklabels(V1.get_xticklabels(), rotation=45)     #Rotating Labels slightly","9b46593d":"V2 = sns.countplot(y='neighbourhood',                                            #Create a Horizontal Plot\n                   data=Data,                                                    \n                   order=Data.neighbourhood.value_counts().iloc[:10].index,      #We want to view the top 10 Neighbourhoods\n                   edgecolor=(0,0,0),                                            #This cutomization gives us black borders around our plot bars\n                   linewidth=2)\nV2.set_title('Listings by Top NYC Neighbourhood')                                #Set Title\nV2.set_xlabel('Neighbourhood')                                  \nV2.set_ylabel('Listings')","abd2790b":"Data = Data.rename(columns = {\"number_of_reviews\" : \"Visits\"})   #Renaming the column to Visits\nData.head(2)                                                     #Checking the change that was made","ed3d66b8":"Listings_by_borough = pd.DataFrame(Data.neighbourhood_group.value_counts().reset_index().values, columns=['Borough', 'Listings']) #Creating a new table directly into a dataframe\nListings_by_borough = Listings_by_borough.sort_index(axis=0, ascending=True)                                                      #sorting the data\nListings_by_borough ['% Listings']=  (Listings_by_borough['Listings'] \/ Listings_by_borough['Listings'].sum())*100                #Adding a % Listings column\nListings_by_borough                                                                                                               #Printing the table","58e315f0":"V10 = sns.barplot(x='Borough', y = '% Listings',                                           \n                   data=Listings_by_borough,                                                         \n                   edgecolor=(0,0,0),                                            \n                   linewidth=2)\nV10.set_title('% Listings by Borough')\nV10.set_xlabel('Borough')                                  \nV10.set_ylabel('% Listings')","eb12a683":"visits_by_borough = Data.groupby(['neighbourhood_group'])['Visits'].agg(np.sum).reset_index()            #Using Groupby to get 'by Borough' and numpy sum function to get 'Total Vists'\nvisits_by_borough.columns = ['Borough', 'Visits']                                                        #Renaming the columns\nvisits_by_borough = visits_by_borough.sort_values('Visits', ascending=False)                             #Sorting Visit Values in descending order\nvisits_by_borough ['% Visits']=  (visits_by_borough['Visits'] \/ visits_by_borough['Visits'].sum())*100   #Creating a new column called % Visits\n\nvisits_by_borough                                                                                        #Printing the table","b406227a":"V3 = sns.barplot(x='Borough', y = '% Visits',                                           \n                   data=visits_by_borough,                                                         \n                   edgecolor=(0,0,0),                                            \n                   linewidth=2)\nV3.set_title('% Visits by Borough')\nV3.set_xlabel('Borough')                                  \nV3.set_ylabel('% Visits')","58479db4":"V4 = sns.barplot(\n    x='neighbourhood_group', y='Visits', \n    estimator=np.sum,                          # \"sum\" function from numpy as estimator , you can also use lambda x: sum(x==0)*100.0\/len(x) for a percentage function\n    data=Data,                                 # Raw dataset fed directly to Seaborn\n    edgecolor=(0,0,0), \n    linewidth=2,\n    ci=None)                                   #Removes error bars\n\nV4.set_title('Visits by Borough')\nV4.set_xlabel('Borough')                                  \nV4.set_ylabel('Visits')","d7756ad8":"V9=sns.barplot(x='neighbourhood',\n               y='Visits',\nestimator=np.sum,\ndata=Data,\nci=None,           \norder=Data.neighbourhood.value_counts().iloc[:10].index)\n\nV9.set_title(' Total Visits by Neighbourhood')\nV9.set_xlabel('Neighbourhood')                                  \nV9.set_ylabel('Visits')\nV9.set_xticklabels(V9.get_xticklabels(), rotation=45);","a302e133":"sns.set(style=\"whitegrid\")                                     #Setting a new style\nV6 = sns.barplot(\n    x='neighbourhood', y='Visits', \n    estimator=np.mean,                                         # \"mean\" function from numpy as estimator\n    data=Data,                                                 # Raw dataset fed directly to Seaborn\n    ci=None,                               \n    order=Data.neighbourhood.value_counts().iloc[:10].index)   #Top 10 Neighbourhoods only #Another Order function to get specific values order=Data['neighbourhood'].value_counts().index.tolist()[0:10]\n\nV6.set_title('Avg. Visits by Neighbourhood')\nV6.set_xlabel('Neighbourhood')                                  \nV6.set_ylabel('Visits')\nV6.set_xticklabels(V6.get_xticklabels(), rotation=45)","a56f832e":"V7 = sns.barplot(x='room_type',\n                 y='Visits',\n                 estimator=np.sum,                                         \n                 data=Data,\n                 ci=None,\n                 order=Data.room_type.value_counts().index)   \n\nV7.set_title('Visits by Roomtype')                                \nV7.set_xlabel('Room Type')\nV7.set_ylabel('Visits')","259a194b":"rt = Data.groupby(['room_type'])               #Generate a table to look at the numbers, grouped by room_type\nvrt = rt['Visits'].agg(np.sum).reset_index()   #aggregating the data with numpy sum function\nvrt","371f9d29":"price_bin=Data.price.value_counts(bins=[0,25,50,100,150,200,250,300,350,400,450,500,1000,2000,5000,10000])  #Using binning function to see listings fall in what price range\nprice_bin","cbe76370":"V8=price_bin.plot(kind ='bar')\nV8.set_title('Listings by Price Range')\nV8.set_ylabel('Listings')\nV8.set_xlabel('Price Range')\nV8.set_xticklabels(V8.get_xticklabels(), rotation=45)","fa5494ee":"Price_by_NG =Data.groupby(                                          #Groupby Borough\n   ['neighbourhood_group'], as_index=False                                \n).agg(\n    {\n         'Visits':sum,\n         'price':'mean'\n    }\n)\n\nPrice_by_NG = np.round(Price_by_NG, decimals=2)                     #Function to generate avg_price with only upto two decimals\nPrice_by_NG = Price_by_NG.rename(columns = {\"price\" : \"Avg_Price\"}) #Switching the column name to avg_price\nPrice_by_NG = Price_by_NG.sort_values('Visits',ascending=False)     #Sorting values by descending for Visits\nPrice_by_NG","b4797c9b":"sns.catplot(x='Avg_Price' , y='Visits', hue='neighbourhood_group', data=Price_by_NG, height=6, aspect=2);","4fbb4a3e":"Price_by_NG1 =Data.groupby(                                          #Groupby Borough\n   ['neighbourhood_group', 'room_type'], as_index=False                                \n).agg(\n    {\n         'Visits':sum,\n         'price':'mean'\n    }\n)\n\nPrice_by_NG1 = np.round(Price_by_NG1, decimals=2)                     #Function to generate avg_price with only upto two decimals\nPrice_by_NG1 = Price_by_NG1.rename(columns = {\"price\" : \"Avg_Price\"}) #Switching the column name to avg_price\nPrice_by_NG1 = Price_by_NG1.sort_values('Visits',ascending=False)     #Sorting values by descending for Visits\nPrice_by_NG1","c67fa517":"sns.relplot(x='Avg_Price' , y='Visits', hue='neighbourhood_group',col='room_type', data=Price_by_NG1);","51164e01":"Price_by_NG2 =Data.groupby(                                          \n   ['neighbourhood','room_type'], as_index=False                                \n).agg(\n    {\n         'Visits':sum,\n         'price':'mean'\n    }\n)\n\nPrice_by_NG2 = np.round(Price_by_NG2, decimals=2)                     \nPrice_by_NG2 = Price_by_NG2.rename(columns = {\"price\" : \"Avg_Price\"}) \nPrice_by_NG2 = Price_by_NG2.sort_values('Visits',ascending=False)\nPrice_by_NG2 = Price_by_NG2.head(10)\nsns.catplot(x='Avg_Price' , y='Visits', hue='neighbourhood', col='room_type',aspect=2, data=Price_by_NG2 );\nPrice_by_NG2","c4a5b890":"Price_by_N =Data.groupby(\n   ['neighbourhood'], as_index=False\n).agg(\n    {\n         'Visits':sum,\n         'price':'mean'\n    }\n)\n\nPrice_by_N = np.round(Price_by_N, decimals=2)\nPrice_by_N = Price_by_N.sort_values('Visits',ascending=False)\n\nPrice_by_N = Price_by_N.head(10)\n\nPrice_by_N","73434fe2":"fig,ax = plt.subplots()                                                             # create figure and axis objects with subplots()\nax.plot(Price_by_N.neighbourhood, Price_by_N.Visits, color=\"green\", marker=\"o\")     # make a plot\nax.set_xlabel(\"Neighbourhood\",fontsize=14)                                          # set x-axis label\nax.set_ylabel(\"Visits\",color=\"green\",fontsize=14)                                   # set y-axis label\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n\nax2=ax.twinx()                                                                      # twin object for two different y-axis on the sample plot\nax2.plot(Price_by_N.neighbourhood, Price_by_N.price,color=\"blue\",marker=\"s\")        # make a plot with different y-axis using second axis object\nax2.set_ylabel(\"Avg_Price\",color=\"blue\",fontsize=14)\nplt.show()\n# save the plot as a file\n#fig.savefig('two_different_y_axis_for_single_python_plot_with_twinx.jpg',\n            #format='jpeg',\n            #dpi=100,\n            #bbox_inches='tight')'''","72e4d361":"fig,ax = plt.subplots()\nax.plot(Price_by_NG.neighbourhood_group, Price_by_NG.Visits, color=\"green\", marker=\"o\")\nax.set_xlabel(\"Borough\",fontsize=14)\nax.set_ylabel(\"Visits\",color=\"green\",fontsize=14)\n\nax2=ax.twinx()\nax2.plot(Price_by_NG.neighbourhood_group, Price_by_NG.Avg_Price,color=\"blue\",marker=\"s\")\nax2.set_ylabel(\"Avg_Price\",color=\"blue\",fontsize=14)\nplt.show()","b03fb887":"<p style=\"color:##808080;\"> <font size=\"3\">\n#Before we highlight any trends we must check how many listings are available by borough\n    <\/font> <\/p>\n<Space> <\/space> \n<p style=\"color:##808080;\"> <font size=\"3\"> \n#we will use the value counts function to count the listings in each borough and also calculate it by percentage \n    <\/font> <\/p>\n","1ef9705f":"<font size=\"4\">**Data Verification**<\/font>","067fc17b":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#We are using the seaborn library to do the data visualizations and Matplotlib style commands to change labels & chart title\n<\/font> <\/p>","7e042d30":"<font size=\"4\">**Conclusion**<\/font>","268af6d2":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#Below is a default code in Kaggle Kernel. Use Data = pd.read_csv('AB_NYC_2019.csv') if doing it in a text editor like Jupyter\n<\/p>\n<space> <\/space>\n<p style=\"color:#808080;\"> #Note: The python file must be in the same folder as data file for it to read the data set without file path <\/font>  <\/p>","df8e987e":"<p style=\"color:##808080;\"> <font size=\"3\">\n#We will continue to use seaborn to visualize data and also pick up a few tricks for automation for future reports incase we have to re-run the analysis.\n    <\/font>\n<\/p>","81c9c074":"<font size=\"4\">**Data Analysis & Visualizations**<\/font>","ffec6234":"<p style=\"color:##808080;\"> <font size=\"3\">\n#We will use Groupby function and numpy sum function to get Visits by Borough and then add another column % Visits to also analyze % Visits by Borough \n    <\/font>\n<\/p>","3d476fac":"<font size=\"4\">**Introduction**<\/font>\n<space> <\/space>\nAirbnb has been one of the most disruptive companies in the tourism & hospitality industry in the past decade. Airbnb NYC dataset offers us a chance to analyze and learn more about one of the most popular tourism destinations in the whole world. There are over a thousand economic entities (in the toursim industry) who could learn so much about the market by just regularly forking insights from such open datasets. As we will see, despite not having any bookings count or time stamp data for calculation of traditional ROI models, the data set is still useful in learning more about Visits, Pricing, Boroughs etc.\n\nI have previously lived in New York City and that gives me an incentive to analyze the data especially comparing different bouroughs and neighbourhoods which paints a more robust picture in my imagination.","68a6f14d":"<p style=\"color:##808080;\">\n<font size=\"5\">**number_of_reviews = Visits**<\/font> <\/p>","fb1d5d22":"<font size=\"4\">**Data Wrangling**<\/font>\n<space> <\/space>","7ee828f0":"<p style=\"color:##808080;\"> <font size=\"3\">\n#For Visitation based insights we can use the number_of_reviews column as Visits as only visitors who have stayed in an Airbnb would leave a review of the place <\/font>\n<\/p> ","c0eaed77":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#There are a lot of customizations in seaborn. Running a similar analysis with top 10 Neighbourhoods of New York we can cutomize many chart attributes\n<\/font> <\/p>","f2cd120c":"<p style=\"color:##808080;\">\n<font size=\"3\">#Many of these data visualizations will form the basis of our insights deck. There is definitely room for more improvement but it also shows the extent of how far data insights projects can go. Our main goal was to create possible insights with Visits as when we compare to Listings it is a completely different story. We also saw how contrasting visits with price by Borough for example is a much more robust direction than the one with just listings. This is story of tourism and conversion, where visits matter more than availablity analysis as we move towards an ROI model and also understanding what affects a purchase decision of a customer on the Airbnb platform.\n    <\/font>\n<\/p>","ef0eb6c8":"<p style=\"color:##808080;\">\n<font size=\"3\">\n#Seaborn has a function called **estimator** which can help us do basic calculations like sum, mean through numpy as well as complex functions like % of the numeric variable. <\/p>\n    <space> <\/space>\n<p style=\"color:##808080;\">\n<font size=\"3\">#This eliminates the need to code data transformations through groupby and numpy sum functions before data visualization\n    <\/font>\n<\/p>","134c0637":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#Let's drop the columns we are not going to use for analysis. id,host_name, last review are not useful at the moment.  \n<\/p>\n<space> <\/space>\n<p style=\"color:##808080;\">\n#host_name will also be dropped and should be redacted for privacy reasons\n<\/font> <\/p>","66411315":"<p style=\"color:##808080;\">\n<font size=\"3\">#Analyzing data from the double axis graphs we can safely conclude that Price is not the only reason for a person choosing a specific neighbourhood or Borough\n    <\/font>\n<\/p>","39d810c2":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#We are now checking if there are any null values left in the remaining columns  \n<\/font> <\/p>","e712e244":"<font size=\"4\">**Objective**<\/font>\n<space> <\/space>\nBuild a Visitation based approach and try to derive more insights than general exploratory analysis. Such an approach could answer deeper business questions for hotels, toursim offices, economic bodies etc.\n","b0dc5215":"<p style=\"color:##808080;\">\n<font size=\"3\">#While Seaborn can easily generate a cat plot that accomodates three variables in the chart (with Hue) and we can use the col function to further add a category variable and generate more charts, Two axis plots are more helpful in qucikly understanding the comparision between three variables. Let's look at both below -\n    <\/font>\n<\/p>","6543d664":"<p style=\"color:##808080;\">\n<font size=\"3\">\n    Price Analysis & (Price+Visits) Double Axis Analysis\n    <\/font>\n<\/p>","6a2a9e2a":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#We will now try to run unique value functions to confirm that our dataset does not have any additional errors.  \n<\/font> <\/p>\n\n<space> <\/space>\n\n<p style=\"color:##808080;\"> <font size=\"3\"> \n#There are only four boroughs in New York city & Airbnb only offers three types of accomodation categories\n<\/font> <\/p>","c25e412e":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#Only reviews_per_month has null values. We can replace them with 0 with the fillna function  \n<\/font> <\/p>","f75c9bb0":"<p style=\"color:##808080;\"> <font size=\"3\"> \n#We can also see the last 5 rows with the tail function. Remember the count starts from 0 so the last row is 48,894 ! \n<\/font> <\/p>","d54b74d3":"<p style=\"color:##808080;\">\n<font size=\"3\">#While we can do a very detailed Price Analysis and create price segments, our goal right now is to garner some insights with respect to visits and if we can identify any trends when we compare them grouped by other attributes\n    <\/font>\n<\/p>","22e1da42":"<font size=\"4\">**Loading Libraries & Dataset**<\/font>","62374a98":"<font size=\"4\">**Approach**<\/font>\n<space> <\/space>\n1. Load the Data set\n2. Data Wrangling\n3. Data Verification\n4. Data Analysis & Visualisation\n\nBecause of limited data we cannot go into too much detail but we can atleast highlight some trends and try to build secondary insights that help support them."}}