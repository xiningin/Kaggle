{"cell_type":{"8e86b51b":"code","39cc7dbb":"code","65d0c801":"code","04958c42":"code","0ca46de7":"code","93f21bcc":"code","15537354":"code","7746fae3":"code","4f433b1d":"code","f9e570e5":"code","6390e13d":"code","e98a46bf":"code","7934be32":"code","6768c3b7":"code","b9df4350":"code","1357813c":"code","d8b49f18":"code","58b23faf":"code","ec52659a":"code","4c0b9812":"markdown","06a4a062":"markdown"},"source":{"8e86b51b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39cc7dbb":"df = pd.read_csv('\/kaggle\/input\/coronavirus-worldometers\/covid19.csv')\ndf","65d0c801":"import matplotlib.pyplot as plt\n\nplt.scatter(df.population, df.total_tests)\nplt.plot(df.population, df.total_tests)","04958c42":"df1 = df.drop(columns=['country'])","0ca46de7":"X = df1.drop(columns=['new_cases'])\ny = df1['new_cases']","93f21bcc":"#Important. The column new_cases is full of string values, so convert them to numerical values.\n\nfor i in range(213):    \n    if(type(y[i]) == str):\n        a = y[i].replace(',','')\n        a = int(a)\n        y[i] = a","15537354":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","7746fae3":"plt.scatter(X_test.population, y_test)\nplt.plot(X_test.population, y_test)","4f433b1d":"from sklearn import ensemble\n\nmodel = ensemble.GradientBoostingRegressor(n_estimators=400, max_depth=5, min_samples_split=2, learning_rate=0.01, loss='ls')","f9e570e5":"model.fit(X_train, y_train)","6390e13d":"model.predict(X_test)","e98a46bf":"from sklearn.metrics import accuracy_score\n\nmodel.score(X_test, y_test)","7934be32":"pred = model.predict(X_test)","6768c3b7":"plt.scatter(X_test.population, pred)\nplt.plot(X_test.population, pred)","b9df4350":"a_pred = model.predict(X)\n\na_pred","1357813c":"#Accuracy\n\nmodel.score(X, y)","d8b49f18":"print(\"Predictions: \\n\")\n\nfor i in range(212):\n    \n    print(\"New cases for\",df['country'][i],\": \",a_pred[i])\n","58b23faf":"result = pd.DataFrame({\"country\":df['country'],\"new_cases\":a_pred})\nresult","ec52659a":"result.to_csv(\"New_Cases_Predictions.csv\", index=False)","4c0b9812":"# Here, a_pred contains the predicted values for new cases of COVID-19.","06a4a062":"# We want to predict the new cases for each country. Let's build a model to do so."}}