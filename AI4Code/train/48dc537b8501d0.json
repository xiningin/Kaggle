{"cell_type":{"a7a4fcc3":"code","937e55b6":"code","8c2e743c":"code","098d19e2":"code","96d1f1fa":"code","8cc621bc":"code","8672cb26":"code","7f517af6":"code","6f9cbef9":"code","df7701b6":"code","125f50c2":"code","45719a14":"code","59e532e3":"code","47254b4b":"code","b22801b6":"code","7dcf90d6":"code","08f59ca3":"code","6732e4f2":"code","11f59a93":"code","94eb6bf3":"code","cb27a591":"code","9b84f63b":"code","ba870359":"code","62d65854":"code","31639d43":"code","ce843c77":"code","a0a947fe":"code","8b7521e1":"code","681a6630":"code","f78ad939":"code","49f716ab":"code","93fbf99a":"code","1ed02eb6":"code","18330985":"code","5cecf4f4":"code","9d97bd7d":"code","6dea1eea":"code","4550a8a9":"code","a6633c0d":"code","02b05210":"markdown","7d9cc6c8":"markdown","c94f1aa1":"markdown","f0ca1d0c":"markdown","4f50389d":"markdown","a55eb4cb":"markdown","5551254c":"markdown","6421133f":"markdown","48f1057e":"markdown","148b743b":"markdown","4e011e83":"markdown","9ea66ea4":"markdown","ed752b73":"markdown","cca633e6":"markdown","a36c32b5":"markdown","737b9eea":"markdown","6d4f97f2":"markdown","7ca71ef4":"markdown","d05b67a4":"markdown","a2df91fb":"markdown","840cb55e":"markdown","3a6a8713":"markdown","a7f45844":"markdown","15f9fd4d":"markdown","86d9be92":"markdown","d75c8e0f":"markdown","e698836e":"markdown","72464a99":"markdown","bcfff98a":"markdown","a6ea69dd":"markdown","2c974f69":"markdown","02121d8d":"markdown","d8263036":"markdown","16e62807":"markdown","2bd41c7b":"markdown","302a796c":"markdown","ee652ef0":"markdown"},"source":{"a7a4fcc3":"!pip install fbprophet","937e55b6":"# Standard libraries for numerical operations and plotting\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport os\nimport sys\nimport warnings\n\n\n# Specific plotting libraries\nfrom plotly.subplots import make_subplots\nfrom statsmodels.graphics.tsaplots import plot_acf\n\n# Prophet library\nfrom fbprophet import Prophet\n\n\nwarnings.filterwarnings('ignore')\nplt.style.use('ggplot')\npyo.init_notebook_mode()","8c2e743c":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='date', parse_dates=True, infer_datetime_format=True)\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col='date', parse_dates=True, infer_datetime_format=True)","098d19e2":"df_train.head()","96d1f1fa":"df_test.head()","8cc621bc":"print(f'Shape of the training data : {df_train.shape}')\nprint(f'Shape of the test data: {df_test.shape}')\nprint('-*'*20)\nprint(f'Start Date : {df_train.index[0]}')\nprint(f'End Date : {df_train.index[-1]}')\nprint('-*'*20)\nprint(f'Number of unique countries : {df_train[\"country\"].nunique()}')\nprint(f'Unique countries : {df_train[\"country\"].unique()}')\nprint('-*'*20)\nprint(f'Number of unique stores : {df_train[\"store\"].nunique()}')\nprint(f'Unique stores : {df_train[\"store\"].unique()}')\nprint('-*'*20)\nprint(f'Number of products : {df_train[\"product\"].nunique()}')\nprint(f'Unique stores : {df_train[\"product\"].unique()}')","8672cb26":"country_sizes = df_train.groupby(['country']).size()\nstore_sizes = df_train.groupby(['store']).size()\nproduct_sizes = df_train.groupby(['product']).size()\n\n\nfig, ax = plt.subplots(nrows=1, ncols=3, figsize=(12, 10))\n\nplt.subplots_adjust(wspace=0.85)\n\nax[0].pie(country_sizes.values, labels=country_sizes.index, explode=[0.2, 0.2, 0.0], \n          shadow=True, autopct='%1.2f%%', colors=['#f08e59', '#f0d759', '#59a4f0'])\nax[1].pie(store_sizes.values, labels=store_sizes.index, explode=[0.2, 0.0], shadow=True, autopct='%1.2f%%')\nax[2].pie(product_sizes.values, labels=product_sizes.index, explode=[0.2, 0.2, 0.0], \n          shadow=True, autopct='%1.2f%%', colors=['#e64747', '#4777e6', '#e6bc47'])\n\nfig.show()\n    ","7f517af6":"grouped_df1 = df_train.groupby(['country']).aggregate({'num_sold':'mean'}).sort_values(by=['num_sold'], ascending=False)\ngrouped_df1.plot(kind='bar', figsize=(10, 5), title='Which country has the highest sales (on an average)?')\nplt.show()","6f9cbef9":"grouped_df2 = df_train.groupby(['product']).aggregate({'num_sold':'mean'}).sort_values(by=['num_sold'], ascending=False)\ngrouped_df2.plot(kind='bar', figsize=(10, 5), title='Which product has the highest sales in all the stores in all the countries?', color='cornflowerblue')\nplt.show()","df7701b6":"grouped_df3 = df_train.groupby(['store']).aggregate({'num_sold':'mean'}).sort_values(by=['num_sold'], ascending=False)\ngrouped_df3.plot(kind='bar', figsize=(10, 5), title='Which store has the highest sales in all the countries?', color='#ffcb52')\nplt.show()","125f50c2":"grouped_df4 = df_train.groupby(['country', 'store', 'product']).aggregate({'num_sold':'mean'})\ngrouped_df4.unstack().plot(kind='bar', figsize=(10, 5), stacked=True, title='Overview of the data')\nplt.show()","45719a14":"fig, ax = plt.subplots(nrows = df_train['product'].nunique(), ncols=df_train['store'].nunique(), figsize=(12, 8))\nplt.subplots_adjust(top=1.5, wspace=1.0, hspace=0.5)\n\nfor i, prod in enumerate(df_train['product'].unique()):\n    for j, stores in enumerate(df_train['store'].unique()):\n        \n        d = df_train.loc[(df_train['product'] == prod) & (df_train['store'] == stores)].reset_index()\n        ax[i, j].set_title(f'Product : {prod}, Store : {stores}')\n        sns.lineplot(x='date', y='num_sold', data=d, hue='country', ax=ax[i, j])\n        ax[i, j].set_xticklabels(d['date'], rotation=90, fontdict=dict(fontsize=5))\n        \n        \nfig.show()","59e532e3":"def plot_ts(data, **kwargs):\n    \"\"\"\n    Function to plot an interactive time series plot.\n    \n    Parameters:\n    -----------\n    data : pandas.DataFrame\n        Represents the data with which you are working.\n\n    Returns:\n    --------\n    None.\n    \"\"\"\n    country = kwargs.get('country', 'Finland')\n    store = kwargs.get('store', 'KaggleMart')\n    title = kwargs.get('title', '')\n    plots = list()\n    \n    data = data.loc[(data['country'] == country) & (data['store'] == store)]\n    \n    for prod in data['product'].unique():\n        pl = go.Scatter(name=prod, x=data.index, y=data.loc[data['product']== prod]['num_sold'], mode='lines', line=dict(width=1.875))\n        plots.append(pl)\n    \n    fig = go.Figure(data=plots)\n    fig.update_layout({\"title\":title, \n                      \"xaxis\":{\n                          \"rangeslider\":dict(visible=True),\n                          \"rangeselector\":dict(buttons=list([\n                              dict(count=1, step='year', label='1y', stepmode='backward'),\n                              dict(count=3, step='year', label='3y', stepmode='backward'),\n                              dict(count=5, step='year', label='5y', stepmode='backward'),\n                              dict(step='all')\n                          ]))\n                      }})\n    \n    fig.show()\n    ","47254b4b":"plot_ts(df_train, country='Finland', store='KaggleMart', title='Kaggle Mart product sales in Finland')","b22801b6":"fig2, ax2 = plt.subplots(nrows = df_train['product'].nunique(), ncols=df_train['store'].nunique(), figsize=(12, 8))\nplt.subplots_adjust(top=1.5, wspace=1.0, hspace=0.5)\n\nfor i, prod in enumerate(df_train['product'].unique()):\n    for j, stores in enumerate(df_train['store'].unique()):\n        \n        d = df_train.loc[(df_train['product'] == prod) & (df_train['store'] == stores)]\n        plot_acf(d.loc[d['country'] == 'Norway']['num_sold'], ax=ax2[i, j], use_vlines=False, lags=1400, title=f'Product : {prod}, Store: {stores}', marker='x', label='Norway')\n        plot_acf(d.loc[d['country'] == 'Finland']['num_sold'], ax=ax2[i, j], use_vlines=False, lags=1400, title=f'Product : {prod}, Store: {stores}', marker='*', label='Finland')\n        plot_acf(d.loc[d['country'] == 'Sweden']['num_sold'], ax=ax2[i, j], use_vlines=False, lags=1400, title=f'Product : {prod}, Store: {stores}', marker='o', label='Sweden')\n        \nfig2.show()","7dcf90d6":"df_train['day'] = df_train.index.day_name()","08f59ca3":"wgroup1 = df_train.groupby(by=['day', 'country']).aggregate({'num_sold':'mean'}).reindex(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], level='day')\n\nwgroup1.unstack().plot(figsize=(10, 5), title='How is the sale in weekdays and weekends in different countries?')\nplt.show()","6732e4f2":"wgroup2 = df_train.groupby(by=['day', 'store']).aggregate({'num_sold':'mean'}).reindex(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], level='day')\n\nwgroup2.unstack().plot(figsize=(10, 5), title='How is the sale in weekdays and weekends of different stores in different countries?')\nplt.show()","11f59a93":"wgroup3 = df_train.groupby(by=['day', 'product']).aggregate({'num_sold':'mean'}).reindex(\n    ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], level='day')\n\nwgroup3.unstack().plot(figsize=(10, 5), title='How is the sale in weekdays and weekends of different products?')\nplt.show()","94eb6bf3":"df_train['month'] = df_train.index.month_name()","cb27a591":"mgroup1 = df_train.groupby(['month', 'country']).aggregate({\"num_sold\":'mean'}).reindex(['January', 'February', 'March',\n                                                                                        'April', 'May', 'June',\n                                                                                        'July', 'August', 'September',\n                                                                                        'October', 'November', 'December'], level='month')\n\nmgroup1.unstack().plot(figsize=(10, 5), title='How is the sale on different countries in different months?')\nplt.show()","9b84f63b":"mgroup2 = df_train.groupby(['month', 'store']).aggregate({\"num_sold\":'mean'}).reindex(['January', 'February', 'March',\n                                                                                        'April', 'May', 'June',\n                                                                                        'July', 'August', 'September',\n                                                                                        'October', 'November', 'December'], level='month')\n\nmgroup2.unstack().plot(figsize=(10, 5), title='How is the sale on different stores in different months?')\nplt.show()","ba870359":"mgroup3 = df_train.groupby(['month', 'product']).aggregate({\"num_sold\":'mean'}).reindex(['January', 'February', 'March',\n                                                                                        'April', 'May', 'June',\n                                                                                        'July', 'August', 'September',\n                                                                                        'October', 'November', 'December'], level='month')\n\nmgroup3.unstack().plot(figsize=(10, 5), title='How is the sale on different product in different months?')\nplt.show()","62d65854":"sample_df = df_train.loc[(df_train['country'] == 'Norway') & (df_train['store'] == 'KaggleRama') & (df_train['product'] == 'Kaggle Hat')]['num_sold']\n\nprint(f'Shape of the Sample Data Frame Training  : {sample_df.shape}')\n\nsample_df.plot(figsize=(10, 5), title='Time Series Plot of the sample dataframe')\nplt.show()","31639d43":"sample_df = sample_df.reset_index()\nsample_df.columns = ['ds', 'y']\nsample_df.head()\n\n\ntest_size = int(0.2*sample_df.shape[0])\nsample_df_train = sample_df.iloc[:-test_size]\nsample_df_test = sample_df.iloc[-test_size:]\n\nprint(f'Sample Data Frame train size : {sample_df_train.shape}')\nprint(f'Sample DataFrame test size : {sample_df_test.shape}')\nprint(f'Train Start Date: {sample_df_train.iloc[0][\"ds\"]} | Train End Date : {sample_df_train.iloc[-1][\"ds\"]}')\nprint(f'Train Start Date: {sample_df_test.iloc[0][\"ds\"]} | Test End Date : {sample_df_test.iloc[-1][\"ds\"]}')","ce843c77":"m = Prophet()","a0a947fe":"m.fit(sample_df_train)","8b7521e1":"future = m.make_future_dataframe(periods=sample_df_test.shape[0], freq='D')\nfuture.tail()","681a6630":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","f78ad939":"pd.concat([sample_df.set_index('ds')['y'], forecast.set_index('ds')['yhat']], axis=1).plot(figsize=(12, 8))\nplt.show()","49f716ab":"# Plots the forecast on the original value with the upper and lower threshold values.\nfig1 = m.plot(forecast)","93fbf99a":"# Plot the different components of the time series\nfig2 = m.plot_components(forecast)","1ed02eb6":"from fbprophet.plot import add_changepoints_to_plot\nfig3 = m.plot(forecast)\na = add_changepoints_to_plot(fig3.gca(), m, forecast)","18330985":"deltas = m.params['delta'].mean(0)\n\nfig = plt.figure(figsize=(10, 5), facecolor='w')\nax = fig.add_subplot(111)\nax.bar(range(len(deltas)), deltas, color='indianred')\nax.grid(True, which='major', c='cornflowerblue', ls='-', lw=1., alpha=.2)\nax.set_xlabel('changepoint')\nax.set_ylabel('Rate change')\nfig.tight_layout()\nfig.show()\n","5cecf4f4":"# As shown previously that Prophet requires only datetime and target values. Therefore we will need to remove the categorical variables from our dataset now.\ncombinations = list()\n\nfor country in df_train['country'].unique():\n    for store in df_train['store'].unique():\n        for prod in df_train['product'].unique():\n            combinations.append((country, store, prod))\n            \nmodels = [Prophet() for i in range(df_train['country'].nunique() * df_train['store'].nunique() * df_train['product'].nunique())]\nprint(len(models))","9d97bd7d":"preds = list()\n\nfor i, com in enumerate(combinations):\n    _df = df_train.loc[(df_train['country'] == com[0]) & (df_train['store'] == com[1]) &(df_train['product'] == com[2])]['num_sold'].reset_index()\n    _df.columns = ['ds', 'y']\n    models[i].fit(_df)\n    future = models[i].make_future_dataframe(periods=365, freq='D')\n    forecast = models[i].predict(future)[['ds', 'yhat']].tail(365)\n    preds.append(forecast)\n    del forecast\n    del future\n    \n    ","6dea1eea":"for i in range(df_train['country'].nunique() * df_train['store'].nunique() * df_train['product'].nunique()):\n    preds[i]['country'] = combinations[i][0]\n    preds[i]['store'] = combinations[i][1]\n    preds[i]['product'] = combinations[i][2]\n    \n    ","4550a8a9":"df_test_copy = df_test.copy().reset_index()\ndf_test_copy['num_sold'] = 0\nfor i, com in enumerate(combinations):\n    df_test_copy.loc[(df_test_copy['country'] == com[0]) & (df_test_copy['store'] == com[1]) & (df_test_copy['product'] == com[2]), \n                     'num_sold'] = preds[i]['yhat'].values\n    \ndf_test_copy","a6633c0d":"submission_df = df_test_copy[['row_id', 'num_sold']]\nsubmission_df.to_csv('submission.csv', index=False)","02b05210":"<a id='eda'><\/a><br\/>\n## Exploratory Data Analysis","7d9cc6c8":"You can even add your own custom data change points to the Prophet library to model it and make better predictions for your business.","c94f1aa1":"<a id=\"bs\"><\/a><br\/>\n## Basic Setup","f0ca1d0c":"### How is the sale on different product in different months?","4f50389d":"### Check the percentages of each categorical variables in the dataset","a55eb4cb":"### Observations\n\n* It can be observed that on an average the sales are it's peak on weekends, than on weekdays.","5551254c":"### How is the sale in weekdays and weekends of different products?","6421133f":"### Observations from the above plots\n\n* The Highest selling happens in **Norway** on an average.\n* **Kaggle Hat** is the most bought product on an average.\n* **Kaggle Rama** is the most visited shop than **Kaggle Mart** on an average.","48f1057e":"### Comparison of sales of different products of different stores in different countries","148b743b":"### Visualize the Changepoints","4e011e83":"<a id='prophet2'><\/a><br\/>\n## Application of fbProphet on our data","9ea66ea4":"### Which store has the highest sales in all the countries?","ed752b73":"# Time Series Playground : 2022 \ud83d\udcc8 \ud83d\udd30 \ud83d\ude80\n\nThis notebook contains the EDA of the Time Series Playground dataset and the use of fbProphet to build a basic model(baseline) for the prediction of sales of this dataset.\n\n![Prophet-logo](https:\/\/miro.medium.com\/max\/1400\/1*BVIwEoE5oEmHJU8XbV_mKA.png)\n\n\n\n\n\n\nIf you find this notebook informative please give it an upvote by pressing on the (\u25b2) button.\n","cca633e6":"### Observations:\n\n* A good shoot in sales is observed between the months of **March** - **May** and also between **November** and **December**.\n* We don't see any significant sales increase in the above mentioned time periods for the following products:\n    * Kaggle Mug\n    * Kaggle Sticker\n    ","a36c32b5":"<a id='prophet1'><\/a><br\/>\n## Application of Prophet for a single Country and a single store\n\nThis part show-cases how one needs to use Prophet for their use-cases. This is a much simpler version of all the complicated ways one case use Prophet to solve their business problems.","737b9eea":"### Which country has the highest sales (on an average)","6d4f97f2":"### Comparison of the average sales of different products of different stores in different countries","7ca71ef4":"### How is the sale on different countries in different months?","d05b67a4":"### Which product has the highest sales in all the stores in all the countries?","a2df91fb":"<a id='install'><\/a><br\/>\n## Installation of Prophet","840cb55e":"### Visualizing the direction of the changepoints","3a6a8713":"### Defining the Prophet Model","a7f45844":"<a id=\"intro\"><\/a><br\/>\n## Introduction to Prophet\n\n\nAs per [Facebook Prophet's page](https:\/\/facebook.github.io\/prophet\/):\n\n*Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.* \n\n*Prophet is open source software released by Facebook\u2019s Core Data Science team. It is available for download on CRAN and PyPI.*\n\n* Prophet decomposes time series data into **trend**, **seasonality**, and **holiday-effects**.\n* **Trend** : It is the non-periodic change in a time series data.\n* **Seasonality** : It is a periodic change in a time series, such as daily, weekly, monthly, yearly etc.\n* **Holiday-effects** : These effects alters the time series data in a seasonal way but on some particular time periods only.\n\nThe Prophet model can be showcase as an equation as follow\n$$\n\\begin{equation}\ny(t) = g(t) + s(t) + h(t) + \\epsilon(t)\n\\end{equation}\n$$\n\nwhere $g(t)$ represents the trend component, $s(t)$ represents the seasonality, $h(t)$ represents the holiday-effect components and $\\epsilon(t)$ represents the residual time series.","15f9fd4d":"## Table of Contents\n\n1. [Introduction to Prophet](#intro)\n2. [Advantages of Prophet](#advantages)\n3. [Installation of Prophet](#install)\n4. [Basic Setup](#bs)\n5. [Exploratory Data Analysis](#eda)\n6. [Application of Prophet for a single Country and a single store](#prophet1)\n7. [Application of fbProphet on our data](#prophet2)\n8. [References](#refer)","86d9be92":"### Plot an interactive Time Series","d75c8e0f":"### Forecasting","e698836e":"### How is the sale in weekdays and weekends in different countries?","72464a99":"### How is the sale on different stores in different months?","bcfff98a":"<a id='refer'\/><br\/>\n## References\n\n1. https:\/\/www.kaggle.com\/jeongbinpark\/tps-jan-simple-eda-and-fbprophet\n2. https:\/\/www.kaggle.com\/prashant111\/tutorial-time-series-forecasting-with-prophet\n3. https:\/\/www.youtube.com\/watch?v=D8CFPyi4ai4&list=PL3N9eeOlCrP5cK0QRQxeJd6GrQvhAtpBK&index=10\n4. https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html#python-api\n5. https:\/\/facebook.github.io\/prophet\/docs\/diagnostics.html#hyperparameter-tuning\n","a6ea69dd":"### Renaming Columns\n\nBefore proceeding with the Prophet forecasting, first some of the data columns names needs to be changed.\n* Prophet requires the target variable to renamed as `y`\n* And the time variable as `ds`.\n","2c974f69":"See this data is recorded in **Daily** Frequency.","02121d8d":"### Observations from AutoCorrelation Plot\n\nBefore deep diving into the above figure, let's first understand what an **AutoCorrelation Plot** is? An **AutoCorrelation** Plot is used to check how correlated are the data points in a time series are compared to it's lagged version. This plot also helps to discover any hidden factors (such as seasonality) in the data. \n\nWhat we can observe from the above autocorrelation plots are the following:\n> Note: The unit of x-axis is in days.\n\n* The autocorrelation plot of `Kaggle Hat` is similar to the autocorrelation plot of `Kaggle Mug`.\n* There is some sort of a **periodic pattern** present in the autocorrelation plot of the 3-different products hinting the possibility of a **seasonality** in the data.\n* For the 3 different countries(indicated in different colors) the pattern of the autocorrelation plot is exactly the same for all the stores and their products.\n\nWhat do I mean by seasonality? \n\nWell it's nothing fancy, put into simple words its a periodic behavior which the data shows such as we buy the most during Black Friday Sales rather than a normal day.","d8263036":"### How is the sale in weekdays and weekends of different stores in different countries?","16e62807":"### AutoCorrelation Plots","2bd41c7b":"### Model Fitting and Forecasting","302a796c":"<a id='advantages'><\/a><br\/>\n## Advantages of Prophet\n\nThe advantages of Prophet are as follow:\n\n* **Accurate and fast**: Prophet is used in many applications across Facebook for producing reliable forecasts for planning and goal setting.\n* **Fully Automatic**: Get a reasonable forecast on messy data with no manual effort\n* **Tunable forecasts**: The Prophet procedure includes many possibilities for users to tweak and adjust forecasts. You can use human-interpretable parameters to improve your forecast by adding your domain knowledge.\n* **Available in R or Python**: Prophet has been implemented in R or Python, and they share the same underlying Stan code for fitting.\n* **Robust to Outliers**\n* **Robust to Missing Data**\n* Can model the various components (such as trend, seasonality, holiday effects) of a time series pretty well.\n* Lastly, it's being developed by the Facebook core research team.","ee652ef0":"### Fitting the Prophet Model"}}