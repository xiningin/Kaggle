{"cell_type":{"fff38d44":"code","412387ae":"code","78970d0c":"code","c447e848":"code","a2a5ca72":"code","0f4fb8c7":"code","a48c1fd4":"code","a0435c1b":"code","b3838f04":"code","ebe8caa8":"code","366bb871":"code","93ec270d":"code","7ec962bf":"code","aa96c5ca":"code","6fbae23d":"code","632056c2":"code","25a964eb":"code","812f2809":"code","68831031":"code","fc40ecca":"code","43d4e662":"code","945e7f31":"code","4871a42b":"markdown","75895135":"markdown","a0b8c353":"markdown","ac0d48c8":"markdown","db47d994":"markdown","fffd1777":"markdown","30ff3b0d":"markdown"},"source":{"fff38d44":"#Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","412387ae":"# Dataset Load\nurl = '..\/input\/prediction-of-vehicle-type-by-silhouette\/vehicle.csv'\ndata = pd.read_csv(url, header='infer')","78970d0c":"data.shape","c447e848":"data.isna().sum()","a2a5ca72":"#Dropping the records with null \/ missing values\n\ndata = data.dropna()","0f4fb8c7":"data.head()","a48c1fd4":"data.groupby('class').size()","a0435c1b":"# --- Importing ML libraries ---\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder \n\n#Metrics Libraries\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\n\n#ML Classifier Algorithm Libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","b3838f04":"data.columns","ebe8caa8":"#Feature & Target Selection\nfeatures = ['compactness', 'circularity', 'distance_circularity', 'radius_ratio',\n       'pr.axis_aspect_ratio', 'max.length_aspect_ratio', 'scatter_ratio',\n       'elongatedness', 'pr.axis_rectangularity', 'max.length_rectangularity',\n       'scaled_variance', 'scaled_variance.1', 'scaled_radius_of_gyration',\n       'scaled_radius_of_gyration.1', 'skewness_about', 'skewness_about.1',\n       'skewness_about.2', 'hollows_ratio']\ntarget = ['class']\n\n# Feature& Target  Dataset\nX = data[features]\ny = data[target]","366bb871":"#Dataset Split  [train = 90%, test = 10%]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0) \n\n#Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","93ec270d":"# -- Building Model List --\nmodels = []\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nmodels.append(('RFC', RandomForestClassifier()))","7ec962bf":"# -- Model Evaluation --\nmodel_results = []\nmodel_names = []\n\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=None, shuffle=False)\n    cross_val_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')\n    model.verbose = False\n    model_results.append(cross_val_results)\n    model_names.append(name)\n    print(name, \":--\", \"Mean Accuracy =\", '{:.2%}'.format(cross_val_results.mean()), \n                       \"Standard Deviation Accuracy =\", '{:.2%}'.format(cross_val_results.std())\n         )","aa96c5ca":"# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(model_results)\nax.set_xticklabels(model_names)\nplt.show()","6fbae23d":"#Instantiating Model\nsvm = SVC(kernel = 'linear', random_state=0)","632056c2":"#Training the Model\nsvm.fit(X_train, y_train)","25a964eb":"#Making a prediction\ny_pred = svm.predict(X_test)\n\n# -- Calculating Metrics \nprint(\"Trained Model Accuracy Score - SVM Model: \",'{:.2%}'.format(accuracy_score(y_test,y_pred)) )","812f2809":"#Converting the Test Sample to DataFrame\nX_test_df = pd.DataFrame(list(X_test), columns=features)","68831031":"#Appending the Prediction to the Test Sample\n\nX_test_df['Predictions'] = y_pred","fc40ecca":"X_test_df.head()","43d4e662":"print(classification_report(y_test, y_pred))","945e7f31":"conf_matrix = pd.DataFrame(confusion_matrix(y_test, y_pred), columns=['bus','car','van'], index= ['bus','car','van'])\nconf_matrix.index.name = \"Actual\"\nconf_matrix.columns.name = \"Predicted\"\nplt.figure(figsize=(10,7))\nsns.set(font_scale=1.4)\nax = sns.heatmap(conf_matrix, annot=True, cmap='Blues', annot_kws={\"size\":12}, cbar=False)\n","4871a42b":"**Classification Report**","75895135":"**Making Predictions - SVM Model**","a0b8c353":"**Confusion Matrix**","ac0d48c8":"**Modeling & Prediction**\n\nUnder modeling & prediction, I shall compare multiple Classifier Models from SKLEARN library and try to find the model with highest accuracy. The model that gives the higest accuracy will then be used for making predictions on unseen data","db47d994":"**Exploration**","fffd1777":"**Model Creation & Evaluation**","30ff3b0d":"**As observed, SVM Model has provided the highest accuracy of 96.17% .**"}}