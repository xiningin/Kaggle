{"cell_type":{"f2ea1536":"code","4e118ba4":"code","b389a999":"code","8846d3ca":"code","a0fbffb9":"code","fc758cd0":"code","5ea03de1":"code","8faaf05d":"code","983484c9":"code","639b94d0":"code","e2aac35e":"code","dcda1429":"code","0fc2c77d":"code","b933f157":"code","d7ca3eab":"markdown","baf45d77":"markdown","0e0604c7":"markdown","c82d6f49":"markdown","6a65bf73":"markdown"},"source":{"f2ea1536":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e118ba4":"# importing packages\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf","b389a999":"# Reading data\ndata = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndata.head()","8846d3ca":"# Checking Nulls\ndata.isnull().sum()","a0fbffb9":"# Splitting the dependent and independent features\nX = data.iloc[:,:-1]\nY = data.iloc[:,-1]","fc758cd0":"# Dropping the unnecessary columns as they don't have much significance\nX.drop(['RowNumber','CustomerId','Surname'],axis=1, inplace=True)\nX.head()","5ea03de1":"# One-hot encoding of the categorical features\ngeography = pd.get_dummies(X['Geography'], drop_first = True)\ngender = pd.get_dummies(X['Gender'], drop_first=True)\nX = pd.concat([geography, gender, X], axis=1)","8faaf05d":"X.drop(['Geography','Gender'], axis=1, inplace=True)\nX.head()","983484c9":"# Splitting the training and testing data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3)","639b94d0":"# Scaling the input features so that mean = 0, SD = 1\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","e2aac35e":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units = 15, activation='relu',kernel_initializer='he_uniform'))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Dense(units=20, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(tf.keras.layers.Dropout(0.3))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","dcda1429":"model.fit(X_train, Y_train, epochs = 500)","0fc2c77d":"model.summary()","b933f157":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\npred = model.predict(X_test)\npred = (pred>0.5)\nprint('Accuracy Score on Testing data is {} %'.format(round(accuracy_score(pred, Y_test),2)*100))","d7ca3eab":"# Data Gathering","baf45d77":"# Model Building","0e0604c7":"# Feature Engineering","c82d6f49":"# Prediction and Model Validation","6a65bf73":"# Model Training"}}