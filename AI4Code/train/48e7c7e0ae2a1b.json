{"cell_type":{"78ccbc15":"code","b8b0bd92":"code","1521a87a":"code","f9a7670a":"code","3e87519c":"code","45716da3":"markdown"},"source":{"78ccbc15":"import os\nimport pandas as pd\nimport numpy as np\n\nfrom skimage import io\nfrom PIL import Image\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision.transforms as transforms\n\nTRAIN_CSV = '\/kaggle\/input\/petfinder-pawpularity-score\/train.csv'\nTRAIN_IMAGES_DIR = '\/kaggle\/input\/petfinder-pawpularity-score\/train'\n","b8b0bd92":"transform = transforms.Compose([\n    transforms.Resize(224),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n])\n\ntrain_csv = pd.read_csv(TRAIN_CSV)[['Id', 'Pawpularity']]\ntrain_csv['Id'] = train_csv['Id'] + '.jpg'\n\ntrain_csv.head()\n","1521a87a":"# a few modify default class\nclass CustomDataset(Dataset):\n    def __init__(self, df_labels, root, transform=None):\n        self.labels = df_labels\n        self.root = root\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, index):\n        img_path = os.path.join(self.root, self.labels.iloc[index, 0])\n        image = io.imread(img_path)\n        label = torch.tensor(int(self.labels.iloc[index, 1]))\n\n        if self.transform:\n            image = self.transform(Image.fromarray(image))\n\n        return (image, label)\n","f9a7670a":"dataset = CustomDataset(df_labels=train_csv, root=TRAIN_IMAGES_DIR, transform=transform)\nloader = DataLoader(dataset, batch_size=10, shuffle=True, num_workers=0)","3e87519c":"images, labels = next(iter(loader))","45716da3":"## Create PyTorch DataLoader\n\nMaybe gonna be helpful for someone :)"}}