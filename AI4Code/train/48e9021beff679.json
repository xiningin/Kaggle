{"cell_type":{"4bc2db85":"code","1dfc5ff1":"code","b099ae6f":"code","596a7695":"code","53c5e071":"code","42fa1a3c":"code","3590ec57":"code","7dcb02d3":"code","bcec732f":"code","5db2a44d":"code","91760cde":"code","6a556543":"code","e1391ea4":"code","d64822d7":"code","544a8bb8":"code","1a3b2c21":"code","b4bb46f8":"code","78f926fd":"code","2168bd6f":"code","50c27d53":"code","c43048a2":"code","f0ff6b77":"code","323f737e":"code","c2b5bee8":"code","c6bd4aad":"markdown","500f1da0":"markdown","7ba48bff":"markdown","cdd11e11":"markdown","e98dfc3b":"markdown","a32c2587":"markdown"},"source":{"4bc2db85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dfc5ff1":"df=pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","b099ae6f":"df.columns","596a7695":"df.info","53c5e071":"df.duplicated().sum() #checking for any duplicate record","42fa1a3c":"#Frequency Distribution of dtypes\ndf.dtypes.value_counts().plot(kind='barh')","3590ec57":"#Balanced dataset or not\nprint(df.Outcome.value_counts())\ndf.Outcome.value_counts().plot(kind='barh')","7dcb02d3":"#We will define a fuction to give basic stats information\n\ndef simple_stats(df):\n    b = pd.DataFrame()\n    b['Missing value'] = df.isnull().sum()\n    b['N unique value'] = df.nunique()\n    b['min value'] = df.min()\n    b['max value'] = df.max()\n    b['Mean']=df.mean().T\n    b['Median']=df.median().T\n    b['Mode']=df.mode().T[0]\n    b['Skewness'] = df.skew()\n    b['dtype'] = df.dtypes\n    return b\n\nraw_stats=simple_stats(df)\nraw_stats","bcec732f":"df_copy = df.copy(deep = True)\n#replace zero values as nan in relevent columns\nfor i in df_copy[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']]:\n    df_copy[i].replace(0, np.nan, inplace= True)\nstats_with_NAN=simple_stats(df_copy)\nstats_with_NAN","5db2a44d":"import seaborn as sns\n\nsns.pairplot(df_copy, hue='Outcome')#,palette=\"husl\")\n","91760cde":"sns.scatterplot(x = df_copy['Glucose'], y = df_copy['Age'], hue = \"Outcome\",\n                    data = df_copy)","6a556543":"\nsns.scatterplot(x = df_copy['Glucose'], y = df_copy['Insulin'], hue = \"Outcome\",\n                    data = df_copy)\nsns.jointplot('Glucose','Insulin',data = df_copy,kind='hex',color = \"g\")","e1391ea4":"df_copy.head()","d64822d7":"# !pip install pycaret","544a8bb8":"from pycaret.classification import *","1a3b2c21":"#we will separate our train and test data.\n\ndata = df_copy.sample(frac=0.80, random_state=786)\ndata_unseen = df_copy.drop(data.index).reset_index(drop=True)\ndata.reset_index(drop=True, inplace=True)\n\nprint('Train Data for Modeling: ' + str(data.shape))\nprint('Test Data For Predictions: ' + str(data_unseen.shape))","b4bb46f8":"#lets make setup required for claasification for using pycaret library\nsetup = setup(data = data, target = 'Outcome', session_id=123,normalize=True, remove_outliers=True, outliers_threshold=0.05)","78f926fd":"compare_models()","2168bd6f":"#lets create Extreme Gradient boosting\nlgb=create_model('lightgbm')","50c27d53":"#now lets hypertune with pycaret\ntuned_lgb=tune_model('lightgbm',n_iter=200)","c43048a2":"plot_model(tuned_lgb, plot = 'confusion_matrix')","f0ff6b77":"plot_model(tuned_lgb, plot = 'auc')","323f737e":"plot_model(tuned_lgb, plot = 'pr')","c2b5bee8":"predict_model(estimator=tuned_lgb,data=data_unseen)","c6bd4aad":"importing data and assign it to df","500f1da0":"*Lets do some visualization*","7ba48bff":"From above following observations can conclude:\n\nAfter looking mean and median and mode and histogram we came to know that most of features are skewed just because of the zero values concentration on one side, and having some outliers\nOn following columns, a value of zero does not make sense and thus indicates missing value.\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\n\nIt is better to replace zeros with NaN as to replace NaN with suitable values would be easier.","cdd11e11":"**Missing value treatment**","e98dfc3b":"# **we have seen its so simple to train models using pycaret for beginners**","a32c2587":"# **Solving Diabetic problem with Pycaret library**"}}