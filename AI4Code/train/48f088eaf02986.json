{"cell_type":{"6495f162":"code","0037c5bf":"code","b8ba86bc":"code","31178001":"code","3a9931f2":"code","8cc5f9d0":"code","9a09fee3":"code","3a352c6a":"code","eecc8859":"code","ae65ba42":"code","3a80cfe8":"code","8160a8f3":"code","6f63856d":"code","36115192":"code","a545052b":"code","8d6f3f07":"code","ac89e977":"code","a3c960e7":"code","bfa951a9":"code","f7c061dc":"code","73cb09bd":"code","f42975cf":"code","47f9b4dd":"code","76693f8d":"code","ea450b9b":"code","8e78d93d":"code","2192a225":"code","d1bbee13":"code","19919735":"code","c575a8c0":"code","daa485a7":"code","80cabe1b":"code","5986fc60":"code","de917e50":"code","f2501fb7":"code","7f8ac8eb":"code","1ed95914":"code","77af3a6e":"code","dce9a02d":"code","0eb179d3":"code","9c67e919":"code","7dc04731":"code","7a97b0cc":"code","23904aa5":"code","eb34e298":"code","4949a9aa":"code","288522a9":"code","d087b1b3":"code","7750860d":"code","16d8b091":"code","de55b88e":"code","c8f4d8ab":"code","e4d099b6":"code","07a7b3fc":"code","22e07925":"code","0e1f2efe":"code","84902b74":"code","8fdf15b9":"code","04b45dfe":"code","7270a8f9":"code","585836d6":"code","ebbc749e":"code","b98e0ab2":"code","9e88098d":"code","c379ea12":"code","9559134b":"code","4e9be1a0":"code","998d646a":"code","a49fae62":"code","6cae3744":"code","a84468b0":"code","0cd3cdd1":"code","f8a8484a":"code","8372266c":"code","9a618356":"code","c1b5d46f":"code","07a19d51":"code","e9c67a43":"code","d5fd6537":"code","c7aaa7ed":"code","293072da":"code","0edf9122":"code","f729337c":"code","3490f11d":"code","bdbb2d82":"code","ac297f2e":"code","07e505c5":"markdown","9ec684ae":"markdown","59b9fced":"markdown","08081fb7":"markdown","fbf9255b":"markdown","7b3c56ac":"markdown","a65f5a65":"markdown","61305dc6":"markdown","d34efc5b":"markdown","b73f68e2":"markdown","d5505c9e":"markdown","c6bafe2b":"markdown","1bcf5329":"markdown","7881f81a":"markdown","01597346":"markdown","f994c384":"markdown","a46c433f":"markdown","985fa96c":"markdown","b9027f51":"markdown"},"source":{"6495f162":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nimport imageio\nfrom IPython.display import Image\nimport matplotlib.image as mpimg\nfrom skimage.transform import resize\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport zipfile\nfrom io import BytesIO\nfrom nibabel import FileHolder\nfrom nibabel.analyze import AnalyzeImage\nimport PIL\nfrom IPython import display\nfrom skimage.morphology import convex_hull_image, erosion\nfrom skimage.morphology import square\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom skimage import data, io, filters\nimport skimage\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose, LeakyReLU, ReLU\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","0037c5bf":"Main_Path = Path(\"..\/input\/sea-turtle-face-detection\/data\/images\")","b8ba86bc":"JPG_Path = list(Main_Path.glob(r\"*.jpg\"))","31178001":"print(\"FIRST 5 JPG: \\n\",JPG_Path[0:5])","3a9931f2":"JPG_Series = pd.Series(JPG_Path,name=\"TURTLE\").astype(str)","8cc5f9d0":"print(JPG_Series.head(-1))","9a09fee3":"JPG_Series = sorted(JPG_Series)","3a352c6a":"print(\"1st: \",JPG_Series[0])\nprint(\"10st: \",JPG_Series[1])\nprint(\"100st: \",JPG_Series[2])\nprint(\"1000st: \",JPG_Series[3])\nprint(\"1001st: \",JPG_Series[4])\nprint(\"1002st: \",JPG_Series[5])","eecc8859":"plt.style.use(\"dark_background\")","ae65ba42":"def display_image(image):\n    \n    figure = plt.figure(figsize=(10,10))\n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    \n    plt.xlabel(Reading_Image.shape)\n    plt.ylabel(Reading_Image.size)\n    plt.imshow(Reading_Image)","3a80cfe8":"def reading_image(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    \n    return Reading_Image","8160a8f3":"display_image(JPG_Series[1])","6f63856d":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_image(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image)\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","36115192":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_image(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image[:,:,0].shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image[:,:,0],cmap=\"hot\")\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","a545052b":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_image(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image[:,:,0].shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image[:,:,0],cmap=\"jet\")\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","8d6f3f07":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_image(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image[:,:,0].shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image[:,:,0],cmap=\"Spectral\")\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","ac89e977":"def display_threshold(image):\n    \n    figure = plt.figure(figsize=(10,10))\n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    _,Threshold_Image = cv2.threshold(Reading_Image,150,255,cv2.THRESH_BINARY)\n    \n    plt.xlabel(Threshold_Image.shape)\n    plt.ylabel(Threshold_Image.size)\n    plt.imshow(Threshold_Image)","a3c960e7":"def reading_threshold(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2RGB)\n    _,Threshold_Image = cv2.threshold(Reading_Image,150,255,cv2.THRESH_BINARY)\n    \n    return Threshold_Image","bfa951a9":"display_threshold(JPG_Series[33])","f7c061dc":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_threshold(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image)\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","73cb09bd":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_threshold(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image[:,:,0].shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image[:,:,0])\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","f42975cf":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Reading_Image = reading_threshold(JPG_Series[indexing])\n    \n    operations.set_xlabel(Reading_Image[:,:,0].shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Reading_Image[:,:,0],cmap=\"jet\")\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","47f9b4dd":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[456]),cv2.COLOR_RGB2GRAY)\n\nplt.xlabel(Gray_Scale_Image.shape)\nplt.ylabel(Gray_Scale_Image.size)\nplt.imshow(Gray_Scale_Image,cmap=\"gray\")","76693f8d":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[456]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,215,255,cv2.THRESH_BINARY)\n\nplt.xlabel(Threshold_Gray.shape)\nplt.ylabel(Threshold_Gray.size)\nplt.imshow(Threshold_Gray)","ea450b9b":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[1]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,215,255,cv2.THRESH_BINARY)\n\nplt.xlabel(Threshold_Gray.shape)\nplt.ylabel(Threshold_Gray.size)\nplt.imshow(Threshold_Gray)","8e78d93d":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[900]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,215,255,cv2.THRESH_BINARY)\n\nplt.xlabel(Threshold_Gray.shape)\nplt.ylabel(Threshold_Gray.size)\nplt.imshow(Threshold_Gray)","2192a225":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Gray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[indexing]),cv2.COLOR_RGB2GRAY)\n    _,Threshold_Gray = cv2.threshold(Gray_Scale_Image,215,255,cv2.THRESH_BINARY)\n    \n    operations.set_xlabel(Threshold_Gray.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Threshold_Gray)\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","d1bbee13":"def display_adaptive_threshold(image):\n    \n    figure = plt.figure(figsize=(10,10))\n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Adaptive_Threshold = cv2.adaptiveThreshold(Reading_Image,20,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,17)\n    \n    plt.xlabel(Adaptive_Threshold.shape)\n    plt.ylabel(Adaptive_Threshold.size)\n    plt.imshow(Adaptive_Threshold)","19919735":"def reading_adaptive_threshold(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Adaptive_Threshold = cv2.adaptiveThreshold(Reading_Image,20,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,17)\n    \n    return Adaptive_Threshold","c575a8c0":"display_adaptive_threshold(JPG_Series[431])","daa485a7":"display_adaptive_threshold(JPG_Series[41])","80cabe1b":"display_adaptive_threshold(JPG_Series[4])","5986fc60":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Adaptive_Image = reading_adaptive_threshold(JPG_Series[indexing])\n    \n    operations.set_xlabel(Adaptive_Image.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Adaptive_Image)\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","de917e50":"def display_canny(image):\n    figure = plt.figure(figsize=(10,10))\n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Canny_Image = cv2.Canny(Reading_Image,100,600)\n    \n    plt.xlabel(Canny_Image.shape)\n    plt.ylabel(Canny_Image.size)\n    plt.imshow(Canny_Image)","f2501fb7":"def reading_canny(image):\n    \n    Reading_Image = cv2.cvtColor(cv2.imread(image),cv2.COLOR_BGR2GRAY)\n    Canny_Image = cv2.Canny(Reading_Image,100,600)\n    \n    return Canny_Image","7f8ac8eb":"display_canny(JPG_Series[712])","1ed95914":"display_canny(JPG_Series[12])","77af3a6e":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Canny_Image = reading_canny(JPG_Series[indexing])\n    \n    operations.set_xlabel(Canny_Image.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Canny_Image)\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","dce9a02d":"figure,axis = plt.subplots(4,4,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Canny_Image = reading_canny(JPG_Series[indexing])\n    \n    operations.set_xlabel(Canny_Image.shape)\n    operations.set_title(\"TURTLE\")\n    operations.imshow(Canny_Image,cmap=\"jet\")\n    operations.grid()\n\nplt.tight_layout()\nplt.show()","0eb179d3":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[900]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,155,255,cv2.THRESH_BINARY)\nCanny_Image = cv2.Canny(Threshold_Gray,100,600)\ncontours,_ = cv2.findContours(Canny_Image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDrawing_Contours = cv2.drawContours(Gray_Scale_Image, contours, -1, (255, 255, 255),2)\n\nplt.xlabel(Drawing_Contours.shape)\nplt.ylabel(Drawing_Contours.size)\nplt.imshow(Drawing_Contours)","9c67e919":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[9]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,155,255,cv2.THRESH_BINARY)\nCanny_Image = cv2.Canny(Threshold_Gray,100,600)\ncontours,_ = cv2.findContours(Canny_Image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDrawing_Contours = cv2.drawContours(Gray_Scale_Image, contours, -1, (255, 255, 255),2)\n\nplt.xlabel(Gray_Scale_Image.shape)\nplt.ylabel(Gray_Scale_Image.size)\nplt.imshow(Gray_Scale_Image)","7dc04731":"figure = plt.figure(figsize=(10,10))\n\nGray_Scale_Image = cv2.cvtColor(reading_image(JPG_Series[1000]),cv2.COLOR_RGB2GRAY)\n_,Threshold_Gray = cv2.threshold(Gray_Scale_Image,155,255,cv2.THRESH_BINARY)\nCanny_Image = cv2.Canny(Threshold_Gray,100,600)\ncontours,_ = cv2.findContours(Canny_Image,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\nDrawing_Contours = cv2.drawContours(Gray_Scale_Image, contours, -1, (255, 255, 255),2)\n\nplt.xlabel(Gray_Scale_Image.shape)\nplt.ylabel(Gray_Scale_Image.size)\nplt.imshow(Gray_Scale_Image)","7a97b0cc":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[1])\nCanny_Image = reading_canny(JPG_Series[1])\n\nMain_Image_2D = Main_Image[:,:,0]\n\nBlend_Image = cv2.addWeighted(Main_Image_2D,0.8,Canny_Image,0.4,0.5)\n\naxis[0].imshow(Main_Image)\naxis[1].imshow(Canny_Image)\naxis[2].imshow(Blend_Image)","23904aa5":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[10])\nCanny_Image = reading_canny(JPG_Series[10])\n\nMain_Image_2D = Main_Image[:,:,0]\n\nBlend_Image = cv2.addWeighted(Main_Image_2D,0.8,Canny_Image,0.4,0.5)\n\naxis[0].imshow(Main_Image)\naxis[1].imshow(Canny_Image)\naxis[2].imshow(Blend_Image)","eb34e298":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[100])\nCanny_Image = reading_canny(JPG_Series[100])\n\nMain_Image_2D = Main_Image[:,:,0]\n\nBlend_Image = cv2.addWeighted(Main_Image_2D,0.8,Canny_Image,0.4,0.5)\n\naxis[0].imshow(Main_Image)\naxis[1].imshow(Canny_Image)\naxis[2].imshow(Blend_Image)","4949a9aa":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[1000])\nCanny_Image = reading_canny(JPG_Series[1000])\n\nMain_Image_2D = Main_Image[:,:,0]\n\nBlend_Image = cv2.addWeighted(Main_Image_2D,0.8,Canny_Image,0.4,0.5)\n\naxis[0].imshow(Main_Image)\naxis[1].imshow(Canny_Image)\naxis[2].imshow(Blend_Image)","288522a9":"figure,axis = plt.subplots(1,3,figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[211])\nCanny_Image = reading_canny(JPG_Series[211])\n\nMain_Image_2D = Main_Image[:,:,0]\n\nBlend_Image = cv2.addWeighted(Main_Image_2D,0.8,Canny_Image,0.4,0.5)\n\naxis[0].imshow(Main_Image)\naxis[1].imshow(Canny_Image)\naxis[2].imshow(Blend_Image,cmap=\"jet\")","d087b1b3":"figure = plt.figure(figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[211])\nCanny_Image = reading_canny(JPG_Series[211])\nOut_Main = Main_Image.copy()\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.5,Out_Main,1.5,0,Out_Main)\n\nplt.imshow(Blend_Image)","7750860d":"figure = plt.figure(figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[211])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nplt.imshow(Blend_Image[:,:,0],cmap=\"jet\")","16d8b091":"figure = plt.figure(figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[2])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nplt.imshow(Blend_Image[:,:,0],cmap=\"jet\")","de55b88e":"figure = plt.figure(figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[659])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nplt.imshow(Blend_Image[:,:,0],cmap=\"jet\")","c8f4d8ab":"figure = plt.figure(figsize=(12,12))\n\nMain_Image = reading_image(JPG_Series[6])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nplt.imshow(Blend_Image[:,:,0],cmap=\"jet\")","e4d099b6":"figure = plt.figure(figsize=(6,6))\n\nMain_Image = reading_image(JPG_Series[6])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nHist_Image = plt.hist(Blend_Image.ravel(),256,[0,256])\n\ncolor = ('b','g','r')\nfor indexing,col in enumerate(color):\n    histr = cv2.calcHist([Blend_Image],[indexing],None,[256],[0,256])\n    plt.plot(histr,color = col)\n    plt.xlim([0,256])\nplt.show()","07a7b3fc":"figure = plt.figure(figsize=(6,6))\n\nMain_Image = reading_image(JPG_Series[600])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nHist_Image = plt.hist(Blend_Image.ravel(),256,[0,256])\n\ncolor = ('b','g','r')\nfor indexing,col in enumerate(color):\n    histr = cv2.calcHist([Blend_Image],[indexing],None,[256],[0,256])\n    plt.plot(histr,color = col)\n    plt.xlim([0,256])\n\nplt.show()","22e07925":"figure = plt.figure(figsize=(6,6))\n\nMain_Image = reading_image(JPG_Series[1000])\nCanny_Image = cv2.Canny(Main_Image,100,600)\n\nCopy_Main = Main_Image.copy()\nCopy_Main[Canny_Image == 1] = [255,0,0]\nCopy_Main[Canny_Image == 2] = [255,255,0]\nCopy_Main[Canny_Image == 3] = [255,255,255]\n\nOut_Main = Main_Image.copy()\n\nBlend_Image = cv2.addWeighted(Copy_Main,0.8,Out_Main,1.5,1.5,Out_Main)\n\nHist_Image = plt.hist(Blend_Image.ravel(),256,[0,256])\n\ncolor = ('b','g','r')\nfor indexing,col in enumerate(color):\n    histr = cv2.calcHist([Blend_Image],[indexing],None,[256],[0,256])\n    plt.plot(histr,color = col)\n    plt.xlim([0,256])\n\nplt.show()","0e1f2efe":"IMAGE_LIST = []\nMASK_LIST = []\n\nfor turtle_i,mask_i in zip(JPG_Series,JPG_Series):\n    \n    Reading_Image = reading_image(turtle_i)\n    Canny_Image = reading_canny(mask_i)\n    Reading_Image_2D = Reading_Image[:,:,0]\n\n    Blend_Image = cv2.addWeighted(Reading_Image_2D,0.8,Canny_Image,0.4,0.5)\n    \n    Resized_Main = cv2.resize(Reading_Image,(180,180))\n    Resized_Mask = cv2.resize(Blend_Image,(180,180))\n    \n    IMAGE_LIST.append(Resized_Main)\n    MASK_LIST.append(Resized_Mask)","84902b74":"print(len(IMAGE_LIST))\nprint(len(MASK_LIST))","8fdf15b9":"print(\"WHEN IT IS ARRAY IMAGE SHAPE: \",np.shape(np.array(IMAGE_LIST)))\nprint(\"WHEN IT IS ARRAY MASK SHAPE: \",np.shape(np.array(MASK_LIST)))","04b45dfe":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(MASK_LIST[0],cmap=\"jet\")\naxis[0].set_xlabel(MASK_LIST[0].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(IMAGE_LIST[0])\naxis[1].set_xlabel(IMAGE_LIST[0].shape)\naxis[1].set_title(\"ORIGINAL\")","7270a8f9":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(MASK_LIST[1900],cmap=\"jet\")\naxis[0].set_xlabel(MASK_LIST[1900].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(IMAGE_LIST[1900])\naxis[1].set_xlabel(IMAGE_LIST[1900].shape)\naxis[1].set_title(\"ORIGINAL\")","585836d6":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(MASK_LIST[19],cmap=\"jet\")\naxis[0].set_xlabel(MASK_LIST[19].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(IMAGE_LIST[19])\naxis[1].set_xlabel(IMAGE_LIST[19].shape)\naxis[1].set_title(\"ORIGINAL\")","ebbc749e":"X_Train = np.array(IMAGE_LIST,dtype=\"float32\")\nX_Test = np.array(MASK_LIST,dtype=\"float32\")","b98e0ab2":"X_Train = X_Train \/ 255.\nX_Test = X_Test \/ 255.","9e88098d":"print(\"TRAIN SHAPE: \",X_Train.shape)\nprint(\"TEST SHAPE: \",X_Test.shape)","c379ea12":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(X_Test[1],cmap=\"jet\")\naxis[0].set_xlabel(X_Test[1].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(X_Train[1])\naxis[1].set_xlabel(X_Train[1].shape)\naxis[1].set_title(\"ORIGINAL\")","9559134b":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(X_Test[100],cmap=\"jet\")\naxis[0].set_xlabel(X_Test[100].shape)\naxis[0].set_title(\"MASK\")\naxis[1].imshow(X_Train[100])\naxis[1].set_xlabel(X_Train[100].shape)\naxis[1].set_title(\"ORIGINAL\")","4e9be1a0":"Early_Stopper = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=3,mode=\"min\")\nCheckpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","998d646a":"compile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.00001)\noutput_class = 1","a49fae62":"Encoder_AE = Sequential()\nEncoder_AE.add(Conv2D(32,(5,5),kernel_initializer = 'he_normal'))\nEncoder_AE.add(BatchNormalization())\nEncoder_AE.add(ReLU())\n#\nEncoder_AE.add(Conv2D(64,(5,5),kernel_initializer = 'he_normal'))\nEncoder_AE.add(BatchNormalization())\nEncoder_AE.add(ReLU())\n#\nEncoder_AE.add(Conv2D(128,(5,5),kernel_initializer = 'he_normal'))\nEncoder_AE.add(BatchNormalization())\nEncoder_AE.add(ReLU())\n\n\nDecoder_AE = Sequential()\nDecoder_AE.add(Conv2DTranspose(64,(5,5)))\nDecoder_AE.add(ReLU())\n#\nDecoder_AE.add(Conv2DTranspose(32,(5,5)))\nDecoder_AE.add(ReLU())\n#\nDecoder_AE.add(Conv2DTranspose(output_class,(5,5)))\nDecoder_AE.add(ReLU())","6cae3744":"Auto_Encoder = Sequential([Encoder_AE,Decoder_AE])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer)","a84468b0":"Model_AutoEncoder = Auto_Encoder.fit(X_Train,X_Test,epochs=10,callbacks=[Checkpoint_Model])","0cd3cdd1":"Prediction_Seen = Auto_Encoder.predict(X_Train[:5])","f8a8484a":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(X_Train[4])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[4],cmap=\"jet\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen[4],cmap=\"Spectral\")\naxis[2].set_title(\"PREDICTION\")","8372266c":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(X_Train[1])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[1],cmap=\"jet\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen[1],cmap=\"Spectral\")\naxis[2].set_title(\"PREDICTION\")","9a618356":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(X_Train[2])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[2],cmap=\"jet\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen[2],cmap=\"Spectral\")\naxis[2].set_title(\"PREDICTION\")","c1b5d46f":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(X_Train[3])\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Prediction_Seen[3],cmap=\"jet\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen[3],cmap=\"Spectral\")\naxis[2].set_title(\"PREDICTION\")","07a19d51":"Prediction_Seen_Two = Auto_Encoder.predict(X_Train[5:20])","e9c67a43":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[0],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[0],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")","d5fd6537":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[3],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[3],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")","c7aaa7ed":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[6],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[6],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")","293072da":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[12],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[12],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")","0edf9122":"figure,axis = plt.subplots(1,2,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[11],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[11],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")","f729337c":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[7],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[7],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen_Two[7],cmap=\"hot\")\naxis[2].set_title(\"PREDICTION\")","3490f11d":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[8],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[8],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen_Two[8],cmap=\"hot\")\naxis[2].set_title(\"PREDICTION\")","bdbb2d82":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[5],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[5],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen_Two[5],cmap=\"hot\")\naxis[2].set_title(\"PREDICTION\")","ac297f2e":"figure,axis = plt.subplots(1,3,figsize=(10,10))\naxis[0].imshow(Prediction_Seen_Two[1],cmap=\"jet\")\naxis[0].set_title(\"PREDICTION\")\naxis[1].imshow(Prediction_Seen_Two[1],cmap=\"Spectral\")\naxis[1].set_title(\"PREDICTION\")\naxis[2].imshow(Prediction_Seen_Two[1],cmap=\"hot\")\naxis[2].set_title(\"PREDICTION\")","07e505c5":"#### JPG PATH","9ec684ae":"#### MAIN ","59b9fced":"# PACKAGES AND LIBRARIES","08081fb7":"#### TO ARRAY","fbf9255b":"# VISION PROCESS & ANALYSIS","7b3c56ac":"#### PREDICTION","a65f5a65":"#### FUNCTION & DISPLAY","61305dc6":"#### TO SERIES","d34efc5b":"# PATH PROCESS","b73f68e2":"#### HISTOGRAM","d5505c9e":"# MODEL","c6bafe2b":"#### ADD WEIGHTED","1bcf5329":"#### PARAMETERS","7881f81a":"## DATA PROCESS","01597346":"#### CHECKING","f994c384":"#### CALLBACKS","a46c433f":"#### STRUCTURE","985fa96c":"#### TRANSFORMATION","b9027f51":"#### BRIGHT MASK"}}