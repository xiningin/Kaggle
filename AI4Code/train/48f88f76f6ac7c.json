{"cell_type":{"960361f3":"code","ba0dfedb":"code","bdc5f8d3":"code","31bfc552":"code","765461b7":"code","3cd8f246":"code","218611c1":"code","aa3f2474":"code","00234d64":"code","2189fb7f":"code","af5d4923":"code","3b0a0d9f":"code","eebac9f7":"code","e2492e9b":"code","fe2d4164":"code","66e43ae7":"code","719d93c1":"code","9e8724d3":"code","4fca9fff":"code","c9bdf910":"code","f9b30704":"code","90b49cc0":"code","4f86a3a7":"code","038402f5":"code","7208a774":"code","72d9ea4f":"code","ca71bcc5":"code","a0b72e53":"markdown"},"source":{"960361f3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random\nimport cv2\nimport os\nimport gc\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.applications import InceptionResNetV2\nfrom keras import layers\nfrom keras import models\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img","ba0dfedb":"print(os.listdir(\"..\/input\/\"))","bdc5f8d3":"train_dir = '..\/input\/train'\ntest_dir = '..\/input\/test'\n\n# train_imgs = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir)]  #get full data set\ntrain_dogs = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i]  #get dog images\ntrain_cats = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i]  #get cat images\n\ntest_imgs = ['..\/input\/test\/{}'.format(i) for i in os.listdir(test_dir)] #get test images","31bfc552":"size=4000\ntrain_imgs = train_dogs[0:size] + train_cats[0:size]","765461b7":"random.shuffle(train_imgs)  # shuffle it randomly","3cd8f246":"img_size = 150","218611c1":"def read_and_process_image(list_of_images):\n    \"\"\"\n    Returns three arrays: \n        X is an array of resized images\n        y is an array of labels\n        l_id an array of Ids for submission\n    \"\"\"\n    X = [] # images\n    y = [] # labels\n    l_id = [] # id for submission\n    \n    for image in list_of_images:\n        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (img_size,img_size), interpolation=cv2.INTER_CUBIC))  #Read the image\n        basename = os.path.basename(image)\n        img_num = basename.split('.')[0]\n        l_id.append(img_num)\n        #get the labels\n        if 'dog' in image:\n            y.append(1)\n        elif 'cat' in image:\n            y.append(0)\n    \n    return X, y, l_id","aa3f2474":"X, y, l_id = read_and_process_image(train_imgs)","00234d64":"plt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range(columns):\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.imshow(X[i])","2189fb7f":"X = np.array(X)\ny = np.array(y)","af5d4923":"sns.countplot(y)\nplt.title('Labels for Cats and Dogs')\nplt.show()","3b0a0d9f":"print(\"Shape of train images is:\", X.shape)\nprint(\"Shape of labels is:\", y.shape)","eebac9f7":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=1)","e2492e9b":"del X\ndel y\ndel train_imgs\ndel train_dogs\ndel train_cats\ngc.collect()","fe2d4164":"print(\"Shape of X_train\",X_train.shape)\nprint(\"Shape of X_val\", X_val.shape)","66e43ae7":"ntrain = len(X_train)\nnval = len(X_val)","719d93c1":"conv_base = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=[150, 150, 3]) \nconv_base.trainable = False","9e8724d3":"model = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))   \n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])","4fca9fff":"#model.summary()","c9bdf910":"batch_size = 128  \n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,   #Scale the image between 0 and 1\n                                    #rotation_range=30,\n                                    #width_shift_range=0.2,\n                                    #height_shift_range=0.2,\n                                    #shear_range=0.2,\n                                    #zoom_range=0.2,\n                                    #horizontal_flip=True,\n                                    fill_mode='nearest')\n\nval_datagen = ImageDataGenerator(rescale=1.\/255) \n\ntrain_generator = train_datagen.flow(X_train, y_train,  batch_size=batch_size)\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)","f9b30704":"epochs = 10\nhistory = model.fit_generator(train_generator,\n                              steps_per_epoch=ntrain \/\/ batch_size,\n                              epochs=epochs,\n                              validation_data=val_generator,\n                              validation_steps=nval \/\/ batch_size)","90b49cc0":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\n\nplt.show()","4f86a3a7":"X_test, y_test, l_id = read_and_process_image(test_imgs[10:20]) #Y_test in this case will be empty.\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ni = 0\ncolumns = 5\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x, batch_size=1):\n    pred = model.predict(batch)\n    pred = np.float(pred)\n    if pred > 0.5:\n        text_labels.append('dog ({:.3f})'.format(pred))\n    else:\n        text_labels.append('cat ({:.3f})'.format(pred))\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.title('This is a ' + text_labels[i])\n    imgplot = plt.imshow(batch[0])\n    i += 1\n    if i % 10 == 0:\n        break\nplt.show()","038402f5":"del X_train\ndel X_val\ndel y_train\ndel y_val\ngc.collect()","7208a774":"X_test, y_test, l_id = read_and_process_image(test_imgs) \nx = np.array(X_test) \/ 255\ndel X_test\n\npredictions = model.predict(x)\npred=pd.DataFrame(predictions, columns=['label'])\nlid =pd.DataFrame(l_id, columns=['id'])\n\nsubmission = pd.concat([lid,pred],axis = 1)\nsubmission = submission.sort_values(['id'])\nsubmission.to_csv(\"cats_IncepRes.csv\",index=False)","72d9ea4f":"binary_pred=predictions\nbinary_pred[predictions>0.5] = 1\nbinary_pred[predictions<=0.5] = 0\n\npred=pd.DataFrame(binary_pred, columns=['label'])\nlid =pd.DataFrame(l_id, columns=['id'])\n\nsubmission = pd.concat([lid,pred],axis = 1)\nsubmission = submission.sort_values(['id'])\nsubmission.to_csv(\"cats_IncepRes_bp.csv\",index=False)\n","ca71bcc5":"binary_pred=predictions\nbinary_pred[predictions>0.80] = 1\nbinary_pred[predictions<=0.2] = 0\n\npred=pd.DataFrame(binary_pred, columns=['label'])\nlid =pd.DataFrame(l_id, columns=['id'])\n\nsubmission = pd.concat([lid,pred],axis = 1)\nsubmission = submission.sort_values(['id'])\nsubmission.to_csv(\"cats_IncepRes_bp2.csv\",index=False)","a0b72e53":"We are going to use the transfer learning technique where we are going to use the InceptionResnetV2 weights and count to get an accurate of **0.95%.**\n\nFor this kernel and for reasons of memory, we will reduce the number of training images and the number of iterations and still get a good result."}}