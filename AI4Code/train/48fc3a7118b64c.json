{"cell_type":{"0933b0ff":"code","0c41b3a5":"code","ce68efac":"code","17ffeddf":"code","92c2106d":"code","d9690310":"code","847742f0":"code","0fc587c2":"code","d4b5f1d3":"code","cb49a825":"code","346267da":"code","08645999":"code","7a9e0a53":"code","925d7f06":"code","5ea206cf":"code","e8c368f2":"code","111a6c5a":"code","1d7e869a":"code","53c2c53a":"code","f752a75d":"code","cb63be62":"code","0e048334":"code","42ff0274":"code","4a362d3d":"code","a20485b5":"code","f0375576":"code","5bff40fb":"code","58a22af3":"code","86590019":"code","07139534":"code","60324fc5":"code","eb78aa24":"code","94a14cf8":"code","069fd6f4":"code","fdfab100":"code","0b59164b":"code","26f37a0d":"code","b66f0d96":"code","ecdd417c":"code","47d3741e":"code","68cc686c":"code","42ff6156":"code","7eb164df":"code","3c5bcc93":"code","3dba5c77":"code","6f58973c":"code","0059364c":"code","0776450b":"code","71b5dc9c":"code","c2f257fd":"markdown","f198229d":"markdown","e459d23d":"markdown","95b36e2e":"markdown","ed89daf7":"markdown","4e2f581b":"markdown","f32fc2a5":"markdown","627add4b":"markdown","db582a48":"markdown","62406623":"markdown","3f1a6e4c":"markdown","6b503714":"markdown","0016128e":"markdown","8341f41a":"markdown","3aa83b82":"markdown","bddefb84":"markdown","391579e9":"markdown","26982ccd":"markdown","a55f2e11":"markdown"},"source":{"0933b0ff":"import pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nfrom copy import copy\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go","0c41b3a5":"# Read the stock data file\nstocks_df = pd.read_csv(r'\/kaggle\/input\/capital-asset-pricing-model-capm\/stock.csv')\nstocks_df.head()","ce68efac":"# Sort the data based on Date\nstocks_df = stocks_df.sort_values(by = ['Date'])\nstocks_df.head()","17ffeddf":"# Function to normalize the prices based on the initial price\ndef normalize(df):\n  x = df.copy()\n  for i in x.columns[1:]:\n    x[i] = x[i]\/x[i][0]\n  return x","92c2106d":"# Function to plot interactive plot\ndef interactive_plot(df, title):\n  fig = px.line(title = title)\n  for i in df.columns[1:]:\n    fig.add_scatter(x = df['Date'], y = df[i], name = i)\n  fig.show()","d9690310":"# Plot interactive chart\ninteractive_plot(stocks_df, 'Prices')","847742f0":"# Plot normalized interactive chart\ninteractive_plot(normalize(stocks_df), 'Normalized Prices')","0fc587c2":"# Function to calculate the daily returns \ndef daily_return(df):\n\n  df_daily_return = df.copy()\n  \n  # Loop through each stock\n  for i in df.columns[1:]:\n    \n    # Loop through each row belonging to the stock\n    for j in range(1, len(df)):\n      \n      # Calculate the percentage of change from the previous day\n      df_daily_return[i][j] = ((df[i][j]- df[i][j-1])\/df[i][j-1]) * 100\n    \n    # set the value of first row to zero, as previous value is not available\n    df_daily_return[i][0] = 0\n  return df_daily_return","d4b5f1d3":"# Get the daily returns \nstocks_daily_return = daily_return(stocks_df)\nstocks_daily_return.head()","cb49a825":"stocks_daily_return.mean()\n# S&P500 average daily return is 0.049%\n# Amazon average daily return is 0.15%\n# Google average daily return is 0.084%","346267da":"# Select any stock, let's say Apple \nstocks_daily_return['AAPL']","08645999":"# Select the S&P500 (Market)\nstocks_daily_return['sp500'].head()","7a9e0a53":"# plot a scatter plot between the selected stock and the S&P500 (Market)\nstocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = 'AAPL',figsize=(8, 8),color='green')\nplt.show()","925d7f06":"# Fit a polynomial between the selected stock and the S&P500 (Poly with order = 1 is a straight line)\n\n# beta represents the slope of the line regression line (market return vs. stock return). \n# Beta is a measure of the volatility or systematic risk of a security or portfolio compared to the entire market (S&P500) \n# Beta is used in the CAPM and describes the relationship between systematic risk and expected return for assets \n\n# Beta = 1.0, this indicates that its price activity is strongly correlated with the market. \n# Beta < 1, indicates that the security is theoretically less volatile than the market (Ex: Utility stocks). If the stock is included, this will make the portfolio less risky compared to the same portfolio without the stock.\n# Beta > 1, indicates that the security's price is more volatile than the market. For instance, Tesla stock beta is 1.26 indicating that it's 26% more volatile than the market. \n# Tech stocks generally have higher betas than S&P500 but they also have excess returns\n# MGM is 65% more volatile than the S&P500!\n\n\nbeta, alpha = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return['AAPL'], 1)\nprint('Beta for {} stock is = {} and alpha is = {}'.format('AAPL', round(beta,3), round(alpha,3)))  ","5ea206cf":"# Now let's plot the scatter plot and the straight line on one plot\nstocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = 'AAPL',figsize=(8, 8))\n\n# Straight line equation with alpha and beta parameters \n# Straight line equation is y = beta * rm + alpha\nplt.plot(stocks_daily_return['sp500'], beta * stocks_daily_return['sp500'] + alpha, '--', color = 'r')\nplt.show()\n","e8c368f2":"beta, alpha = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return['TSLA'], 1)\nprint('Beta for {} stock is = {} and alpha is = {}'.format('TSLA', round(beta,3), round(alpha,3)))  ","111a6c5a":"# Now let's plot the scatter plot and the straight line on one plot\nstocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = 'TSLA',figsize=(8, 8))\n\n# Straight line equation with alpha and beta parameters \n# Straight line equation is y = beta * rm + alpha\nplt.plot(stocks_daily_return['sp500'], beta * stocks_daily_return['sp500'] + alpha, '-', color = 'g')\nplt.show()","1d7e869a":"beta","53c2c53a":"# Let's calculate the average daily rate of return for S&P500\nstocks_daily_return['sp500'].mean()","f752a75d":"# Let's calculate the annualized rate of return for S&P500 \n# Note that out of 365 days\/year, stock exchanges are closed for 104 days during weekend days (Saturday and Sunday) \n# Check your answers with: https:\/\/dqydj.com\/sp-500-return-calculator\/\nrm = round(stocks_daily_return['sp500'].mean() * 252,3)\nrm","cb63be62":"# Assume risk free rate is zero\n# Also you can use the yield of a 10-years U.S. Government bond as a risk free rate\nrf = 0.66 \n\n# Calculate return for any security (APPL) using CAPM  \nER_AAPL = round(rf + ( beta * (rm-rf) ) ,3)\nER_AAPL","0e048334":"# You have to calculate Beta for AT&T first\nbeta, alpha = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return['T'], 1)\nprint('Beta for {} stock is = {} and alpha is = {}'.format('T', round(beta,3), round(alpha,3)))","42ff0274":"# Calculate return for AT&T using CAPM  \nER_T = round(rf + ( beta * (rm - rf) ),3) \nprint(ER_T)","4a362d3d":"# Let's do the same plots but in an interactive way\n# Explore some wierd points in the dataset: Tesla stock return was at 24% when the S&P500 return was -0.3%!\n\nfor i in stocks_daily_return.columns:\n  \n  if i != 'Date' and i != 'sp500':\n    \n    # Use plotly express to plot the scatter plot for every stock vs. the S&P500\n    fig = px.scatter(stocks_daily_return, x = 'sp500', y = i, title = i)\n\n    # Fit a straight line to the data and obtain beta and alpha\n    b, a = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return[i], 1)\n    \n    # Plot the straight line \n    fig.add_scatter(x = stocks_daily_return['sp500'], y = b*stocks_daily_return['sp500'] + a)\n    fig.show()","a20485b5":"# Let's view Beta for every stock \nbeta","f0375576":"# Let's view alpha for each of the stocks\n# Alpha describes the strategy's ability to beat the market (S&P500)\n# Alpha indicates the \u201cexcess return\u201d or \u201cabnormal rate of return,\u201d \n# A positive 0.175 alpha for Tesla means that the portfolio\u2019s return exceeded the benchmark S&P500 index by 17%.\n\nalpha","5bff40fb":"# Let's create a placeholder for all betas and alphas (empty dictionaries)\nbeta = {}\nalpha = {}\n\n# Loop on every stock daily return\nfor i in stocks_daily_return.columns:\n\n  # Ignoring the date and S&P500 Columns \n  if i != 'Date' and i != 'sp500':\n    # plot a scatter plot between each individual stock and the S&P500 (Market)\n    stocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = i,figsize=(8, 8))\n    \n    # Fit a polynomial between each stock and the S&P500 (Poly with order = 1 is a straight line)\n    b, a = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return[i], 1)\n    \n    plt.plot(stocks_daily_return['sp500'], b * stocks_daily_return['sp500'] + a, '-', color = 'r')\n    \n    beta[i] = b\n    \n    alpha[i] = a\n    \n    plt.show()","58a22af3":"# Obtain a list of all stock names\nkeys = list(beta.keys())\nkeys","86590019":"# Define the expected return dictionary\nER = {}\n\nrf = 0.66\nrm = round(stocks_daily_return['sp500'].mean() * 252,3) # this is the expected return of the market \nrm","07139534":"for i in keys:\n  # Calculate return for every security using CAPM  \n  ER[i] = rf + ( beta[i] * (rm-rf) ) ","60324fc5":"for i in keys:\n  print('Expected Return Based on CAPM for {} is {}%'.format(i, round(ER[i],3)))","eb78aa24":"# Assume equal weights in the portfolio\nportfolio_weights = 1\/8 * np.ones(8) \nportfolio_weights","94a14cf8":"# Calculate the portfolio return \nER_portfolio_all = round(sum(list(ER.values()) * portfolio_weights),3)\nprint('Expected Return Based on CAPM for the portfolio  is {}%\\n'.format(ER_portfolio_all))","069fd6f4":"# Calculate the portfolio return \nER_portfolio = round(0.50 * ER['AAPL'] +  0.50 * ER['AMZN'],3)\nprint('Expected Return Based on CAPM for the portfolio (50% allocation in Apple and 50% in Amazon) is {}%\\n'\n      .format(ER_portfolio))","fdfab100":"# Calculate the portfolio return \nER_portfolio_ConsumerServices = round(0.50 * ER['T'] +  0.50 * ER['MGM'],3)\nprint('Expected Return Based on CAPM for the portfolio (Consumer Services) is {}%\\n'\n      .format(ER_portfolio_ConsumerServices))","0b59164b":"# Calculate the portfolio return \nER_portfolio_Manufacturing = round(0.50 * ER['TSLA'] +  0.50 * ER['BA'],3)\nprint('Expected Return Based on CAPM for the portfolio (Manufacturing Sector) is {}%\\n'\n      .format(ER_portfolio_Manufacturing))","26f37a0d":"# Calculate the portfolio return \nER_portfolio_PersonalDevices = round(0.25 * ER['AAPL'] +  0.25 * ER['IBM']+0.25 * ER['GOOG'] +  0.25 * ER['AMZN'],3)\nprint('Expected Return Based on CAPM for the portfolio (Personal Devices Sector) is {}%\\n'\n      .format(ER_portfolio_PersonalDevices))","b66f0d96":"ER_portfolio_bm = round(0.25 * ER['T'] +  0.25 * ER['IBM']+0.25 * ER['GOOG'] +  0.25 * ER['AMZN'],3)\nprint('Expected Return Based on CAPM for the portfolio (Less than Market Return) is {}%\\n'\n      .format(ER_portfolio_bm))","ecdd417c":"ER_portfolio_am = round(0.25 * ER['AAPL'] +  0.25 * ER['BA']+ 0.25 * ER['MGM'] + 0.25 * ER['TSLA'] ,3)\nprint('Expected Return Based on CAPM for the portfolio (Above than  Market Return) is {}%\\n'\n      .format(ER_portfolio_am))","47d3741e":"sum=0\nfor i in keys:\n    sum=sum+ER[i] \nfor i in keys:\n  print('Contribution on CAPM for {} is {}'.format(i, round(ER[i]\/sum,2)))","68cc686c":"ER_portfolio_b = round(.12 * ER['AAPL'] +  .15 * ER['BA']+ 0.08 * ER['T'] + .18 * ER['MGM']+ \n                     0.11 * ER['AMZN'] +  .11 * ER['IBM']+ .14* ER['TSLA'] + .11* ER['GOOG'],3)\nprint('Expected Return Based on CAPM for the portfolio (Balanced Weightage) is {}%\\n'\n      .format(ER_portfolio_b))","42ff6156":"ER_portfolio_hp = round(0.33 * ER['TSLA'] +  0.33 * ER['BA']+ 0.34 * ER['MGM'] ,3)\nprint('Expected Return Based on CAPM for the portfolio (High performing) is {}%\\n'\n      .format(ER_portfolio_hp))","7eb164df":"# Calculate the portfolio return \nER_portfolio_lp = round(0.33 * ER['T'] +  0.33 * ER['GOOG']+0.34 * ER['IBM'],3)\nprint('Expected Return Based on CAPM for the portfolio (Weak performing) is {}%\\n'\n      .format(ER_portfolio_lp))","3c5bcc93":"ER_portfolio_ap = round(ER['AAPL'] ,3)\nprint('Expected Return Based on CAPM for the portfolio (Average performing) is {}%\\n'\n      .format(ER_portfolio_ap))","3dba5c77":"# Calculate the portfolio return \nER_portfolio_ed = round(0.50 * ER['T'] +  0.50 * ER['MGM'],3)\nprint('Expected Return Based on CAPM for the portfolio (Extremes) is {}%\\n'\n      .format(ER_portfolio_ed))","6f58973c":"# Calculate the portfolio return \nER_portfolio_ed = round(0.50 * ER['GOOG'] +  0.50 * ER['AAPL'],3)\nprint('Expected Return Based on CAPM for the portfolio (Median) is {}%\\n'\n      .format(ER_portfolio_ed))","0059364c":"data = {'Combinations':['AAPL', 'BA', 'T', 'MGM','AMZN','IBM','TSLA','GOOG','Equal Portfolio Weights',\n                        'AAPL+AMZN','Consumer Services','Manufacturing Sector','Personal Devices Sector',\n                        'Less than Market Return','Above than  Market Return','Balanced Weightage',\n                        'High performing','Weak performing','Average performing','Extremes','Median'], \n        'Expected Return Based on CAPM':[13.757,16.934, 9.423, 20.119,12.331,11.962,15.589,12.838,14.119,\n                                         13.044,14.771,16.261,12.722,11.639,16.6,14.833,17.573,11.413,\n                                         13.757,14.771,13.298]} \nReturns = pd.DataFrame(data)\nReturns.sort_values(by='Expected Return Based on CAPM', ascending=False,inplace=True)\nReturns","0776450b":"print(\"Top 5 Suggested Portfolio\") \nReturns[:5]","71b5dc9c":"print(\"Bottom 5 Suggested Portfolio\") \nReturns.tail()","c2f257fd":"**Suggested to invest, Returns better than S&P 500**","f198229d":"**Suggested to invest, Returns better than S&P 500**","e459d23d":"**Suggested to invest, Returns better than S&P 500**","95b36e2e":"**Suggested not to invest, Returns better than S&P 500**","ed89daf7":"**Suggested to invest, Returns better than S&P 500**","4e2f581b":"From Business & Market :\n- Technology company : AAPL \n- Aerospace company : BA\n- Telecommunications company : T \n- Hospitality company :  MGM\n- E-commerce company : AMZN\n- Computer hardware company : IBM\n- Electric car company : TSLA\n- Multinational conglomerate company : GOOG","f32fc2a5":"**Suggested to invest, Returns better than S&P 500**","627add4b":"**Suggested to invest, Returns better than S&P 500**","db582a48":"# CALCULATE BETA FOR A SINGLE STOCK","62406623":"**Suggested to invest, Returns better than S&P 500**","3f1a6e4c":"**Suggested not to invest, Returns better than S&P 500**","6b503714":"# CALCULATE DAILY RETURNS","0016128e":"**Suggested to invest, Returns better than S&P 500**","8341f41a":"#  IMPORT LIBRARIES\/DATASETS AND VISUALIZE STOCKS DATA","3aa83b82":"# APPLY THE CAPM FORMULA TO AN INDIVIDUAL STOCK ","bddefb84":"**Suggested to invest, Returns better than S&P 500**","391579e9":"**Suggested to invest, Returns better than S&P 500**","26982ccd":"# CALCULATE BETA FOR ALL STOCKS","a55f2e11":"**Suggested to invest, Returns better than S&P 500**"}}