{"cell_type":{"bb8e4ac7":"code","252f2d9a":"code","189825cd":"code","71de66a5":"code","30258df2":"code","a9d6a804":"code","d31a4df0":"code","c20ec8b7":"code","a72c23ec":"code","5d901aca":"code","bbe04fdf":"markdown"},"source":{"bb8e4ac7":"import numpy as np \nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Conv2D, Conv2DTranspose,UpSampling2D,Input ,Add\nfrom tensorflow.keras.utils import plot_model\nprint(tf.__version__)","252f2d9a":"physical_devices = tf.config.list_physical_devices('GPU') \nprint(\"Num GPUs:\", len(physical_devices)) \nprint(tf.test.is_built_with_cuda())\n#tf.debugging.set_log_device_placement(True)","189825cd":"fileList=[]\nfl=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fileList.append(os.path.join(dirname, filename))\nfor i in fileList:\n    if i.endswith('.jpg'):\n        fl.append(i)\nfileList=np.array(fl)","71de66a5":"verify=True\nif verify:\n    from PIL import Image\n    fl=[]\n    for filename in fileList:\n\n        try:\n          img = Image.open(filename)# open the image file\n          img.verify() # verify that it is, in fact an image\n          fl.append(filename)\n        except Exception:\n            print(\"Bad File\",filename)\n    fileList=np.array(fl)","30258df2":"IMG_SIZE=(256,256)\nbatch=8\ndef decode_img(x):\n    x=tf.io.read_file(x)\n    x=tf.image.decode_jpeg(x,channels=3)\n    x=tf.image.resize(x,IMG_SIZE)\n    return x\ndef rgb_to_gs(x):\n    gs = tf.image.rgb_to_grayscale(x)\n    gs=tf.math.divide(gs,255)\n    return gs\ndef rgb_to_yuv(x):\n    x=tf.image.rgb_to_yuv(x)\n    return x\n\ndef create_dataset(filename_list):\n    df=tf.data.Dataset.from_tensor_slices(filename_list)\n    im=df.map(decode_img)\n    gs=im.map(rgb_to_gs)\n    im=im.map(rgb_to_yuv)\n    df=tf.data.Dataset.zip((gs,im))\n    df=df.shuffle(50)\n    df=df.batch(batch)\n    df=df.prefetch(tf.data.experimental.AUTOTUNE)\n    return df","a9d6a804":"train_df=create_dataset(fileList[:int(len(fileList)*0.8)])\ntest_df=create_dataset(fileList[int(len(fileList)*0.8):])","d31a4df0":"ip=Input(shape=(256, 256,1))\nx=Conv2D(128,5,padding='same',activation='relu')(ip)\nx1=Conv2D(32,1,padding='same',activation='relu')(x)\nx2=Conv2D(32,3,padding='same',activation='relu')(x)\nx2=Conv2D(32,3,padding='same',activation='relu')(x2)\n\n\nx=Add()([x2,x1])\nx11=Conv2D(32,1,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x21)\nx=Add()([x21,x11])\nx11=Conv2D(32,1,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x21)\nx=Add()([x21,x11])\nx11=Conv2D(32,1,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x)\nx21=Conv2D(32,3,padding='same',activation='relu')(x21)\nx=Add()([x21,x11])\n\nx=Conv2DTranspose(32,3,padding='same',activation='relu')(x)\nx=Add()([x,x11])\nx=Conv2DTranspose(32,3,padding='same',activation='relu')(x)\n\nx=Add()([x,x1])\nx=Conv2DTranspose(32,5,padding='same',activation='relu')(x)\n\nx=Add()([x,x1])\nx=Conv2DTranspose(64,7,padding='same',activation='relu')(x)\nx=Conv2DTranspose(16,7,padding='same',activation='relu')(x)\nx=Conv2DTranspose(64,7,padding='same',activation='relu')(x)\nx=Conv2DTranspose(16,7,padding='same',activation='relu')(x)\nx=Conv2DTranspose(3,7,padding='same')(x)\nmodel=Model(inputs=ip,outputs=x)\n\n\nmodel.compile(optimizer = tf.keras.optimizers.Adam(), loss = tf.losses.MSE)\nmodel.summary()","c20ec8b7":"model.fit(train_df,\n        validation_data=test_df,\n          epochs=3)","a72c23ec":"model.save(\"ImageColourizationTFV2_256x256_XEpochs.h5\")","5d901aca":"im_no=8\nx,y=next(iter(test_df))\nyhat=model.predict(x)\nfig,axis=plt.subplots(im_no,3,figsize=(30, 10*im_no))\nfor i in range(im_no):\n    axis[i,0].imshow(np.array(x[i]).reshape(256,256),cmap='gray')\n    axis[i,0].axis('off')\n    rgb=cv2.cvtColor(np.float32(yhat[i]),cv2.COLOR_YUV2RGB)\n    axis[i,1].imshow(np.array(rgb).astype(int))\n    axis[i,1].axis('off')\n    rgb=cv2.cvtColor(np.float32(y[i]),cv2.COLOR_YUV2RGB)\n    axis[i,2].imshow(np.array(rgb).astype(int))\n    axis[i,2].axis('off')","bbe04fdf":"# Creating an Input PipeLine for the model"}}