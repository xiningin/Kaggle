{"cell_type":{"cbe1c5ad":"code","64c96a85":"code","1054d5e0":"code","124fe295":"code","8eaba506":"code","c584a8e2":"code","0d5e54f7":"code","63fc8995":"code","f393e733":"code","49fb19fa":"code","6c57c4be":"code","99fde6f8":"code","08c19d0d":"code","9d54e80d":"code","e26a5986":"code","67082589":"code","6d141451":"code","dec5c4a8":"code","b1120952":"code","1f8d30be":"code","32de6a3a":"code","5194b3e4":"code","6fb36db6":"code","81575e12":"code","e8fa4ea0":"code","0fc6d7cd":"code","260a9ee1":"code","69b91741":"markdown","5ee13852":"markdown","59a1a1d9":"markdown","89b81f5c":"markdown","6b1dc2d6":"markdown","8251bc4d":"markdown","7b69bfd8":"markdown","d99a77cc":"markdown","1de27517":"markdown","86c8674b":"markdown","47c94159":"markdown","f7143052":"markdown","5f2d6260":"markdown","dff6ffb4":"markdown","41c942de":"markdown","13a92e86":"markdown","b8a680a5":"markdown","22e1b49b":"markdown"},"source":{"cbe1c5ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(\"sunil Kumar\")\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport sqlite3 as sql\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\n# Any results you write to the current directory are saved as output.","64c96a85":"\n# using the SQLite Table to read data.\ndatabase = '..\/input\/database.sqlite'\ncon=sql.connect(database)\n#filtering only positive and negative reviews i.e. \n# not taking into consideration those reviews with Score=3\n# SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000, will give top 500000 data points\n# you can change the number to any other number based on your computing power\n\n# filtered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 500000\"\"\", con) \n# for tsne assignment you can take 5k data points\n\nfiltered_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews WHERE Score != 3 LIMIT 5000\"\"\", con) \n\n# Give reviews with Score>3 a positive rating, and reviews with a score<3 a negative rating.\ndef partition(x):\n    if x < 3:\n        return 0\n    return 1\n\n#changing reviews with score less than 3 to be positive and vice-versa\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition) \nfiltered_data['Score'] = positiveNegative\nprint(\"Number of data points in our data\", filtered_data.shape)\nfiltered_data.head(3)","1054d5e0":"display = pd.read_sql_query(\"\"\"\nSELECT UserId, ProductId, ProfileName, Time, Score, Text, COUNT(*)\nFROM Reviews\nGROUP BY UserId\nHAVING COUNT(*)>1\n\"\"\", con)","124fe295":"print(display.shape)\ndisplay.head()","8eaba506":"display[display['UserId']=='AZY10LLTJ71NX']","c584a8e2":"display['COUNT(*)'].sum()","0d5e54f7":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND UserId=\"AR5J8UI46CURR\"\nORDER BY ProductID\n\"\"\", con)\ndisplay.head()","63fc8995":"#Sorting data according to ProductId in ascending order\nsorted_data=filtered_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","f393e733":"#Deduplication of entries\nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","49fb19fa":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","6c57c4be":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","99fde6f8":"final=final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","08c19d0d":"#Before starting the next phase of preprocessing lets see the number of entries left\nprint(final.shape)\n\n#How many positive and negative reviews are present in our dataset?\nfinal['Score'].value_counts()","9d54e80d":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\n# <br \/><br \/> ==> after the above steps, we are getting \"br br\"\n# we are including them into stop words list\n# instead of <br \/> if we have <br\/> these tags would have revmoved in the 1st step\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","e26a5986":"# Cleaning the data removing html tags, stop words, converting to lower case etc..\n\n# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\nfrom bs4 import BeautifulSoup\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase\n\nfrom tqdm import tqdm\npreprocessed_reviews = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(final['Text'].values):\n    sentance = re.sub(r\"http\\S+\", \"\", sentance)\n    sentance = BeautifulSoup(sentance, 'lxml').get_text()\n    sentance = decontracted(sentance)\n    sentance = re.sub(\"\\S*\\d\\S*\", \"\", sentance).strip()\n    sentance = re.sub('[^A-Za-z]+', ' ', sentance)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sentance = ' '.join(e.lower() for e in sentance.split() if e.lower() not in stopwords)\n    preprocessed_reviews.append(sentance.strip())","67082589":"#BoW\ncount_vect = CountVectorizer() #in scikit-learn\ncount_vect.fit(preprocessed_reviews)\nprint(\"some feature names \", count_vect.get_feature_names()[:10])\nprint('='*50)\nfinal_counts = count_vect.fit_transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_counts))\nprint(\"the shape of out text BOW vectorizer \",final_counts.get_shape())\nprint(\"the number of unique words \", final_counts.get_shape()[1])","6d141451":"#bi-gram, tri-gram and n-gram\n\n#removing stop words like \"not\" should be avoided before building n-grams\n# count_vect = CountVectorizer(ngram_range=(1,2))\n# please do read the CountVectorizer documentation http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html\n# you can choose these numebrs min_df=10, max_features=5000, of your choice\ncount_vect = CountVectorizer(ngram_range=(1,2), min_df=10, max_features=5000)\nfinal_bigram_counts = count_vect.fit_transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_bigram_counts))\nprint(\"the shape of out text BOW vectorizer \",final_bigram_counts.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_bigram_counts.get_shape()[1])","dec5c4a8":"tf_idf_vect = TfidfVectorizer(ngram_range=(1,2), min_df=10)\ntf_idf_vect.fit(preprocessed_reviews)\nprint(\"some sample features(unique words in the corpus)\",tf_idf_vect.get_feature_names()[0:10])\nprint('='*50)\n\nfinal_tf_idf = tf_idf_vect.fit_transform(preprocessed_reviews)\nprint(\"the type of count vectorizer \",type(final_tf_idf))\nprint(\"the shape of out text TFIDF vectorizer \",final_tf_idf.get_shape())\nprint(\"the number of unique words including both unigrams and bigrams \", final_tf_idf.get_shape()[1])","b1120952":"# Train your own Word2Vec model using your own text corpus\ni=0\nlist_of_sentance=[]\nfor sentance in preprocessed_reviews:\n    list_of_sentance.append(sentance.split())\n\nw2v_model=Word2Vec(list_of_sentance,min_count=5,size=50, workers=4)\nprint(w2v_model.wv.most_similar('great'))\nprint('='*50)\nprint(w2v_model.wv.most_similar('worst'))","1f8d30be":"w2v_words = list(w2v_model.wv.vocab)\nprint(\"number of words that occured minimum 5 times \",len(w2v_words))\nprint(\"sample words \", w2v_words[0:50])","32de6a3a":"# average Word2Vec\n# compute average word2vec for each review.\nsent_vectors = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sent in tqdm(list_of_sentance): # for each review\/sentence\n    sent_vec = np.zeros(50) # as word vectors are of zero length 50, you might need to change this to 300 if you use google's w2v\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words:\n            vec = w2v_model.wv[word]\n            sent_vec += vec\n            cnt_words += 1\n    if cnt_words != 0:\n        sent_vec \/= cnt_words\n    sent_vectors.append(sent_vec)\nprint(len(sent_vectors))\nprint(len(sent_vectors[0]))","5194b3e4":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\nmodel = TfidfVectorizer()\nmodel.fit_transform(preprocessed_reviews)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(model.get_feature_names(), list(model.idf_)))","6fb36db6":"# TF-IDF weighted Word2Vec\ntfidf_feat = model.get_feature_names() # tfidf words\/col-names\n# final_tf_idf is the sparse matrix with row= sentence, col=word and cell_val = tfidf\n\ntfidf_sent_vectors = []; # the tfidf-w2v for each sentence\/review is stored in this list\nrow=0;\nfor sent in tqdm(list_of_sentance): # for each review\/sentence \n    sent_vec = np.zeros(50) # as word vectors are of zero length\n    weight_sum =0; # num of words with a valid vector in the sentence\/review\n    for word in sent: # for each word in a review\/sentence\n        if word in w2v_words and word in tfidf_feat:\n            vec = w2v_model.wv[word]\n#             tf_idf = tf_idf_matrix[row, tfidf_feat.index(word)]\n            # to reduce the computation we are \n            # dictionary[word] = idf value of word in whole courpus\n            # sent.count(word) = tf valeus of word in this review\n            tf_idf = dictionary[word]*(sent.count(word)\/len(sent))\n            sent_vec += (vec * tf_idf)\n            weight_sum += tf_idf\n    if weight_sum != 0:\n        sent_vec \/= weight_sum\n    tfidf_sent_vectors.append(sent_vec)\n    row += 1","81575e12":"import numpy as np\nfrom sklearn.manifold import TSNE\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nx=final_counts.toarray()\ny=final['Score'].values\ntsne=TSNE(n_components=2, perplexity=30, learning_rate=200)\nx_embedding=tsne.fit_transform(x)\nfor_tsne = np.hstack((x_embedding, y.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue', 2:'green'}\nsns.FacetGrid(for_tsne_df, hue='Score',size=10) \\\n   .map(plt.scatter, 'Dimension_x', 'Dimension_y') \\\n   .add_legend().fig.suptitle(\"Applying TSNE on TEXT BOW vectors\");","e8fa4ea0":"import numpy as np\nfrom sklearn.manifold import TSNE\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nx=final_tf_idf.toarray()\ny=final['Score'].values\ntsne=TSNE(n_components=2, perplexity=30, learning_rate=200)\nx_embedding=tsne.fit_transform(x)\nfor_tsne = np.hstack((x_embedding, y.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue', 2:'green'}\nsns.FacetGrid(for_tsne_df, hue='Score',size=10) \\\n   .map(plt.scatter, 'Dimension_x', 'Dimension_y') \\\n   .add_legend().fig.suptitle(\"Applying TSNE on TEXT TFIDF vectors\");","0fc6d7cd":"import numpy as np\nfrom sklearn.manifold import TSNE\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nx=sent_vectors\ny=final['Score'].values\ntsne=TSNE(n_components=2, perplexity=30, learning_rate=200)\nx_embedding=tsne.fit_transform(x)\nfor_tsne = np.hstack((x_embedding, y.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue', 2:'green'}\nsns.FacetGrid(for_tsne_df, hue='Score',size=10) \\\n   .map(plt.scatter, 'Dimension_x', 'Dimension_y') \\\n   .add_legend().fig.suptitle(\"Applying TSNE on TEXT AVG W2V vectors\");","260a9ee1":"import numpy as np\nfrom sklearn.manifold import TSNE\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nx=tfidf_sent_vectors\ny=final['Score'].values\ntsne=TSNE(n_components=2, perplexity=30, learning_rate=200)\nx_embedding=tsne.fit_transform(x)\nfor_tsne = np.hstack((x_embedding, y.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue', 2:'green'}\nsns.FacetGrid(for_tsne_df, hue='Score',size=10) \\\n   .map(plt.scatter, 'Dimension_x', 'Dimension_y') \\\n   .add_legend().fig.suptitle(\"Applying TSNE on TEXT TFIDF WEIGHTED W2V vectors\");","69b91741":"## [5.3] Applying TNSE on Text Avg W2V vectors","5ee13852":"<b>Observation:-<\/b> Helpfulness Numerator should be less than or equal to Helpfulness Denominator","59a1a1d9":"## [5.1] Applying TNSE on Text BOW vectors","89b81f5c":"**Average W2V**","6b1dc2d6":"<b>Observation:-<\/b> It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","8251bc4d":"**TFIDF WEIGHTED W2V MODEL**","7b69bfd8":"**WORD2VEC**","d99a77cc":"**Converting text into vectors using Average W2V and weighted TFIDF W2V**","1de27517":"**Bi Grams and n-Grams**","86c8674b":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text  and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","47c94159":"**Applying TSNE**\n<ol> \n    <li> you need to plot 4 tsne plots with each of these feature set\n        <ol>\n            <li>Review text, preprocessed one converted into vectors using (BOW)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (AVG W2v)<\/li>\n            <li>Review text, preprocessed one converted into vectors using (TFIDF W2v)<\/li>\n        <\/ol>\n    <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points <\/font><\/li>\n<\/ol>","f7143052":"**TF-IDF**","5f2d6260":"It is observed (as shown in the table below) that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of the data.  Following is an example:","dff6ffb4":"# [5.2] Applying TNSE on Text TFIDF vectors","41c942de":"**BAG OF WORDS**","13a92e86":"**Exploratory Data Analysis\nData Cleaning : Deduplication**","b8a680a5":"## [5.4] Applying TNSE on Text TFIDF weighted W2V vectors","22e1b49b":"**> 1. Read Data **"}}