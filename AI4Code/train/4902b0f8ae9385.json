{"cell_type":{"2414a28d":"code","f0e680a9":"code","51a9d8af":"code","f710fc2f":"code","e081103d":"code","4c9e3bbb":"code","ca79ca39":"code","bba0a02c":"code","b9ef3bbc":"code","808f35fd":"code","cae2cd4b":"code","403cb160":"code","0d3b1d23":"code","c435512c":"code","789c39be":"code","13253680":"code","edf69236":"code","88c5aefa":"code","568c8066":"code","593d3479":"code","b2aed8f7":"code","14fa3e0d":"code","25b70a29":"code","a42b993f":"code","4fd40126":"code","a5436e24":"code","b7b66d04":"code","b6619989":"code","0314db9e":"code","db259665":"code","942275c2":"code","bf9daad2":"code","a5a53540":"code","1d0407ae":"code","9f6e2067":"code","ac646b12":"code","c1767532":"code","4f1bf943":"code","c99ce93f":"code","e6fdaae9":"code","09803bf8":"code","719120aa":"code","584864df":"code","6f314cbe":"code","f117bf0a":"code","7c465799":"code","512dbb75":"code","f1d28ab4":"code","2e066aa7":"code","63515eb2":"code","b4cba65a":"code","a1ce8d69":"code","de340dd4":"code","0f707979":"code","a9ec72d8":"code","e784d144":"code","27387003":"code","737e28e4":"code","373e620a":"code","bbd3e760":"code","42a6481b":"code","55ede192":"code","d8f0a911":"code","cc11d56b":"markdown","747442d3":"markdown","54b26aac":"markdown","b1be79e0":"markdown","22caf780":"markdown","9ca8b0e1":"markdown","fe94550a":"markdown","d6ba4d43":"markdown","75bb35ff":"markdown","27653cab":"markdown","a49ca98d":"markdown","9c6d5dc9":"markdown","a262a69e":"markdown","e1232b87":"markdown","45583915":"markdown","5170e158":"markdown","183610ac":"markdown","014fdd51":"markdown","264cf96b":"markdown","ff319953":"markdown","9cd938a1":"markdown","03f39228":"markdown","aaf2c962":"markdown"},"source":{"2414a28d":"import numpy as np \nimport pandas as pd\nimport keras\nfrom matplotlib import pyplot as plt\nimport lightgbm as lgb\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f0e680a9":"%ls \/kaggle\/input\/credit-card-transactions","51a9d8af":"data = pd.read_csv('\/kaggle\/input\/credit-card-transactions\/credit_card_transactions-ibm_v2.csv', nrows=19999999)\ndata","f710fc2f":"data[data['User'] == 0]","e081103d":"data.dtypes","4c9e3bbb":"data['Zip'] = data['Zip'].fillna(0)\n\ndata['Amount'] = data['Amount'].apply(lambda s: float(s.replace(\"$\", \"\")))\ndata['Hour'] = data['Time'].apply(lambda s: int(s.split(\":\")[0]))\ndata['Minute'] = data['Time'].apply(lambda s: int(s.split(\":\")[1]))\n\ndata.drop(['Time'], axis=1, inplace=True)\ndata['Is Fraud?'] = data['Is Fraud?'].apply(lambda s: 0 + 1 * (s != \"No\"))\n\ndata['Merchant Name'] = data['Merchant Name'].astype(\"object\")\ndata['Card'] = data['Card'].astype(\"object\")\ndata['MCC'] = data['MCC'].astype(\"object\")\ndata['Zip'] = data['Zip'].astype(\"object\")","ca79ca39":"for col in data.columns:\n    if data[col].dtype == \"object\":\n        data[col] = data[col].fillna(\"\")","bba0a02c":"data['Merchant Name'] = data['Merchant Name'].astype(\"object\")\ndata['Card'] = data['Card'].astype(\"object\")\ndata['MCC'] = data['MCC'].astype(\"object\")\n\ndata.dtypes","b9ef3bbc":"data['Is Fraud?'].sum() \/ len(data['Is Fraud?'])","808f35fd":"y = data['Is Fraud?']\nX = data.drop(['Is Fraud?'], axis=1)","cae2cd4b":"categorial_columns = ['Zip', 'MCC', 'Card', 'Merchant Name', 'Use Chip', \n                      'Merchant City', 'Merchant State', 'Errors?']\n\nfor feature in categorial_columns:\n    encoder = sklearn.preprocessing.LabelEncoder()\n    encoder.fit(X.loc[:, feature])\n    X.loc[:, feature] = encoder.transform(X.loc[:, feature])","403cb160":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 42, stratify=y)","0d3b1d23":"model = lgb.LGBMClassifier()","c435512c":"%time\nmodel.fit(X_train, y_train, feature_name='auto', categorical_feature = categorial_columns)","789c39be":"y_pred = model.predict(X_test)","13253680":"print(classification_report(y_test, y_pred))","edf69236":"from lightgbm import plot_importance\nplot_importance(model)","88c5aefa":"import shap\nfrom sklearn.ensemble import RandomForestClassifier\nshap.initjs()","568c8066":"%time\nmy_model = RandomForestClassifier(n_estimators=15, random_state=42).fit(X_train, y_train)","593d3479":"y_pred = my_model.predict(X_test)","b2aed8f7":"print(classification_report(y_test, y_pred))","14fa3e0d":"data.to_csv('\/kaggle\/working\/credit_card_transactions_prepared.csv', index=False)","25b70a29":"import pickle\nfilename = 'sklearn_model.sav'\npickle.dump(my_model, open(filename, 'wb'))","a42b993f":"loaded_model = pickle.load(open(filename, 'rb'))\nprint(classification_report(y_test, loaded_model.predict(X_test)))","4fd40126":"y_pred.argmax(), y_pred[1430], y_test.iloc[1430]","a5436e24":"explainer = shap.TreeExplainer(my_model)\nshap_value = explainer.shap_values(X_test[1429:1431])","b7b66d04":"shap.force_plot(explainer.expected_value[1], shap_value[1][0,:], feature_names=list(X_test.columns))","b6619989":"shap.force_plot(explainer.expected_value[1], shap_value[1][1,:], feature_names=list(X_test.columns))","0314db9e":"explainer = shap.TreeExplainer(my_model)\nshap_values = explainer.shap_values(X_test[:150])\nshap.summary_plot(shap_values[1], X_test[:150])","db259665":"fraud_indx = y_test[y_test == 1].index[:100]\nnorm_indx = y_test[y_test == 0].index[:100]\nindx = fraud_indx.append(norm_indx)","942275c2":"explainer = shap.TreeExplainer(my_model)\nshap_values = explainer.shap_values(X_test.loc[indx])\nshap.summary_plot(shap_values[1], X_test.loc[indx])","bf9daad2":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, RNN\nfrom keras.layers.recurrent import LSTM\nfrom tqdm import tqdm\nfrom keras import regularizers\nfrom keras import metrics\nimport time, datetime\nimport keras.backend as K","a5a53540":"data[(data['User'] == 0) & (data['Is Fraud?'] == 1)]","1d0407ae":"len(data[(data['User'] == 0)])","9f6e2067":"from collections import Counter\nuser_frauds = Counter(data[data['Is Fraud?'] == 1]['User'])\n# user_frauds","ac646b12":"data['Use Chip'].value_counts()","c1767532":"data['Merchant State'].value_counts()","4f1bf943":"data['Merchant City'].value_counts()","c99ce93f":"data['Merchant Name'].value_counts()","e6fdaae9":"data['MCC'].value_counts() #MCC","09803bf8":"# dict(sorted(user_frauds.items(), key=lambda item: -item[1]))","719120aa":"# \u0447\u0438\u0441\u0442\u043e \u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043e\u0434\u043d\u043e\u0433\u043e user\ndata_ = data[data['User'] == 1604].copy()\ndata_[data_['Is Fraud?'] == 1]","584864df":"def get_timestamp(year, month, day, hour, minute):\n    '''getting timestamp(one number) from yeqr, month, day, hour and minute'''\n    return int(time.mktime((year, month, day, hour, minute, 0, 1, 48, 0)))","6f314cbe":"data_['Timestamp'] = data_.apply(lambda x : get_timestamp(x['Year'], x['Month'], x['Day'], x['Hour'], x['Minute']), axis=1)\ndata_.drop(['Year', 'Month', 'Day', 'Hour', 'Minute'], axis=1, inplace=True)","f117bf0a":"# \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0444\u0440\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\ndata_['Is Fraud?'].sum() \/ len(data_['Is Fraud?'])","7c465799":"categorial_columns = ['Zip', 'MCC', 'Card', 'Merchant Name', 'Use Chip', \n                      'Merchant City', 'Merchant State', 'Errors?']\n\nfor feature in categorial_columns:\n    encoder = sklearn.preprocessing.LabelEncoder()\n    encoder.fit(data_.loc[:, feature])\n    data_.loc[:, feature] = encoder.transform(data_.loc[:, feature])","512dbb75":"# data = data[data['User'].isin([1604, 1019, 813, 897, 914, 190, 615, 1607, 1248, 413])]\n# data['Timestamp'] = data.apply(lambda x : get_timestamp(x['Year'], x['Month'], x['Day'], x['Hour'], x['Minute']), axis=1)\n# data.drop(['Year', 'Month', 'Day', 'Hour', 'Minute'], axis=1, inplace=True)\n# data = data.drop(columns=['Year', 'Month', 'Day', 'Hour', 'Minute'])\n# data = data.sort_values(['User', 'Timestamp'])\n# data","f1d28ab4":"def resample_series(data, window=10):\n    X_res = np.zeros([(data.shape[0] - window) * window, len(data.columns) - 1])\n    y_res = []\n    \n    data = data.sort_values(['User', 'Timestamp'])\n    X = data.drop('Is Fraud?', axis=1)\n    y = data['Is Fraud?']\n        \n    for i in tqdm(range(X.shape[0]-window)):\n        beg = i\n        end = beg + window\n        X_res[(window * i) : (window * (i+1)), :] = np.array(X.iloc[beg:end])\n        y_res.append(y.iloc[end])\n        \n    return X_res.reshape((int(X_res.shape[0] \/ window), window, X_res.shape[1])), np.array(y_res)","2e066aa7":"# X_train, y_train = resample_series(data[data['User'].isin([1604, 1019, 813, 897, 914, 413, 615, 1607])])\n# X_test, y_test = resample_series(data[data['User'].isin([1248, 190])])","63515eb2":"# \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nX_train, y_train = resample_series(data_, 20)\nX_test, y_test = X_train[int(0.8 * len(X_train)):], y_train[int(0.8 * len(y_train)):]\nX_train, y_train = X_train[:int(0.8 * len(X_train))], y_train[:int(0.8 * len(y_train))]","b4cba65a":"print(1 \/ np.mean(y_train))","a1ce8d69":"def weighted_binary_crossentropy(y_true, y_pred):\n  weights = (K.abs(y_true-1) * 350) + 1.0\n  bce = K.binary_crossentropy(y_true, y_pred)\n  weighted_bce = K.mean(bce * weights)\n  return weighted_bce","de340dd4":"model = Sequential()\n\nmodel.add(LSTM(32, input_shape=X_train.shape[1:], use_bias=True, bias_initializer='zeros', \n               kernel_initializer='glorot_uniform', activation='relu'))\nmodel.add(Dense(2, kernel_initializer='glorot_uniform', activation='softmax'))\n\nmodel.compile(loss=weighted_binary_crossentropy, optimizer='adam', metrics=['accuracy'])\nprint(model.summary())","0f707979":"b = np.zeros((y_train.size, 2))\nb[np.arange(y_train.size),y_train] = 1","a9ec72d8":"model.fit(X_train, b, epochs=8, validation_split=0.2)","e784d144":"test_pred = model.predict(X_test)\nprint(classification_report(y_test, test_pred.argmax(axis=1)))","27387003":"METRICS = [\n      keras.metrics.BinaryAccuracy(name='accuracy'),\n      keras.metrics.Precision(name='precision'),\n      keras.metrics.Recall(name='recall'),\n      keras.metrics.AUC(name='prc', curve='PR'), \n]","737e28e4":"model_ = Sequential()\nmodel_.add(LSTM(128, input_shape=X_train.shape[1:], activation='relu', return_sequences=True))\nmodel_.add(Dropout(0.2))\nmodel_.add(LSTM(64, activation='relu', #return_sequences=True\n               ))\nmodel_.add(Dropout(0.2))\nmodel_.add(Dense(8, kernel_initializer='glorot_uniform'))\n\nmodel_.add(Dense(2, kernel_initializer='glorot_uniform', activation='softmax'))\n\nmodel_.compile(loss='binary_crossentropy', optimizer='adam', metrics=METRICS)\n\nmodel_.fit(X_train, b, epochs=2, validation_split=0.2\n#            , class_weight={0 : 1, 1: 350}\n          )","373e620a":"test_pred = model_.predict(X_test)\nprint(classification_report(y_test, test_pred.argmax(axis=1)))","bbd3e760":"def make_model(input_shape):\n    input_layer = keras.layers.Input(input_shape)\n\n    conv1 = keras.layers.Conv1D(filters=64, kernel_size=3, padding=\"same\")(input_layer)\n    conv1 = keras.layers.BatchNormalization()(conv1)\n    conv1 = keras.layers.ReLU()(conv1)\n    \n    conv2 = keras.layers.Conv1D(filters=64, kernel_size=3, padding=\"same\")(conv1)\n    conv2 = keras.layers.BatchNormalization()(conv2)\n    conv2 = keras.layers.ReLU()(conv2)\n\n    conv3 = keras.layers.Conv1D(filters=64, kernel_size=3, padding=\"same\")(conv2)\n    conv3 = keras.layers.BatchNormalization()(conv3)\n    conv3 = keras.layers.ReLU()(conv3)\n\n    gap = keras.layers.GlobalAveragePooling1D()(conv3)\n\n    output_layer = keras.layers.Dense(2, activation=\"softmax\")(gap)\n\n    return keras.models.Model(inputs=input_layer, outputs=output_layer)","42a6481b":"\nmodel = make_model(input_shape=X_train.shape[1:])\n\nmodel.compile(\n    optimizer=\"adam\",\n    loss=weighted_binary_crossentropy,\n    metrics=METRICS,\n)\n\nmodel.fit(\n    X_train,\n    b,\n    epochs=10,\n    validation_split=0.2,\n    class_weight={0 : 1, 1: 350}\n)\n\ntest_pred = model.predict(X_test)\nprint(classification_report(y_test, test_pred.argmax(axis=1)))","55ede192":"def make_model(input_shape):\n    input_layer = keras.layers.Input(input_shape)\n\n    conv1 = keras.layers.Conv1D(filters=64, kernel_size=3, padding=\"same\")(input_layer)\n    conv1 = keras.layers.BatchNormalization()(conv1)\n    conv1 = keras.layers.ReLU()(conv1)\n    \n    gap = keras.layers.GlobalAveragePooling1D()(conv1)\n\n    output_layer = keras.layers.Dense(2, activation=\"softmax\")(gap)\n\n    return keras.models.Model(inputs=input_layer, outputs=output_layer)","d8f0a911":"model = make_model(input_shape=X_train.shape[1:])\n\nmodel.compile(\n    optimizer=\"adam\",\n    loss='binary_crossentropy',\n    metrics=METRICS,\n)\n\nmodel.fit(\n    X_train,\n    b,\n    epochs=2,\n    validation_split=0.2,\n#     class_weight={0 : 350, 1: 1}\n)\n\ntest_pred = model.predict(X_test)\nprint(classification_report(y_test, test_pred.argmax(axis=1)))","cc11d56b":"## \u041f\u0435\u0440\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c light GBM with LIME.","747442d3":"`1604: 90,\n 1019: 88,\n 813: 85,\n 897: 85,\n 914: 83,\n 190: 82,\n 615: 81,\n 1607: 81,\n 1248: 79,\n 413: 78`","54b26aac":"\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0432 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u043a\u0430, \u0437\u0430 \u0434\u0435\u043d\u044c \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3-4 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u0441 \u043d\u0435\u0431\u043e\u044c\u0448\u0438\u043c\u0438 \u0438\u043d\u0442\u0440\u0435\u0432\u0430\u043b\u0430\u043c\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0442\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432.","b1be79e0":"## \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \nMCC \u043a\u043e\u0434\u044b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0433\u0434\u0435 \u0431\u044b\u043b\u0430 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f, \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430(\u0431\u043e\u043b\u044c\u0448\u0435\/\u043c\u0435\u043d\u044c\u0448\u0435) \u0432 \u043d\u0438\u0445 \u043d\u0435\u0442, \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 \u0432 Merchant Name, Card \u0438 Zip code, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0445 \u0432 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c encoding \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","22caf780":"### \u0414\u0440\u0443\u0433\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c CNN\n\u043f\u043e \u0438\u0434\u0435\u0435 \u043e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0443\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0441\u0432\u043e\u0435\u043e\u0431\u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439(\u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 amount \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439).","9ca8b0e1":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0441 \u0440\u0430\u0432\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u0438 \u043d\u0435\u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.","fe94550a":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0434\u0435\u043b\u043e \u0432 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u0447\u0435\u043c-\u0442\u043e \u0442\u0430\u043a\u043e\u043c, \u0443\u043f\u043e\u0440\u043d\u043e \u043d\u0435 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0444\u0440\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u044a \u0434\u0430\u043d\u043d\u044b\u0445.","d6ba4d43":"\u0422\u043e\u043b\u044c\u043a\u043e \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d f1-score \u0432 0.72, \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e, \u043d\u043e \u0445\u0443\u0436\u0435, \u0447\u0435\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u0430\u044f \u0432 light GBM. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c. \u0417\u0430\u0439\u043c\u0435\u043c\u0441\u044f \u0438\u043d\u0442\u0440\u0435\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u0435\u0439.","75bb35ff":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0438\u043a\u0430\u043a\u043e\u0439, \u0434\u0430\u0436\u0435 \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0443\u044e \u0444-\u0438\u044e \u043f\u043e\u0442\u0435\u0440\u044c, \u0434\u0435\u0442\u0435\u043a\u0442\u0438\u0442\u044c \u0444\u0440\u043e\u0434\u043e\u0432\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u0445\u043e\u0447\u0435\u0442, \u043f\u043e\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0441\u043b\u043e\u0436\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c\n### \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u043e\u0436\u043d\u0435\u0435","27653cab":"\u0427\u0442\u043e \u0432\u0430\u0436\u043d\u043e, \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0438\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u043f\u0430\u043b\u043e \u043d\u0435\u043b\u044c\u0437\u044f, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e user \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438(\u043f\u043e timestamp) \u043d\u0430\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u0443\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0442\u0440\u0435\u0437\u043e\u0447\u043a\u0438 \u043f\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e 10 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043d\u0430 \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0442\u0434\u0435\u043b\u0438\u0432 \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \"\u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e\" \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430.","a49ca98d":"\u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u043e\u0431\u0443\u0447\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 f1-score \u0432 0.75 \u0434\u043b\u044f \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439(\u043d\u0430 \u043d\u0435\u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0441\u043e\u0431\u043e \u043d\u0435\u0442). \u0412 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0440\u0435\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438.","9c6d5dc9":"\u0412\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 20 \u043c\u043b\u043d \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 20000 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 1000 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0425\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0430\u0441\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0432 \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438 \u0442\u0430\u043a \u043c\u0430\u043b\u043e. \u0422\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u0437\u044f\u0442\u044c 10 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.","a262a69e":"**\u0412\u044b\u0432\u043e\u0434\u044b:**\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u044f \u0434\u043e\u043b\u0433\u043e \u043f\u044b\u0442\u0430\u043b\u0441\u044f, \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440, \u0444-\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445, \u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0442\u0430\u043b\u0430 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0442\u044c \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0435\u0442, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u044f \u0443\u0432\u0435\u0440\u0435\u043d, \u0447\u0442\u043e cnn \u0438 lstm \u044d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0433 \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u044c\u0442\u0430\u0442 \u043d\u0435 \u0445\u0443\u0436\u0435, \u0447\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0434\u0435\u0440\u0435\u0432\u0431\u0435\u0432.","e1232b87":"\u0417\u0434\u0435\u0441\u044c 13000 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0447\u0442\u043e \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0434\u043e\u0433\u0430\u0434\u043a\u0443 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e one-hot encoding \u0437\u0434\u0435\u0441\u044c \u043e\u043f\u0430\u0441\u0435\u043d \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445.","45583915":"## Shap with Sklearn","5170e158":"\u0422\u043e \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b, \u0442\u043e\u043b\u044c\u043a\u043e 0.1% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u044f\u043b\u044f\u044e\u0442\u0441\u044f \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u043c\u0438. \u0412 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0431\u0430\u043b\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 train\/test \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0437\u0430 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u044b.","183610ac":"### \u041d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f","014fdd51":"### \u0421\u0430\u043c\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c","264cf96b":"**\u0412\u044b\u0432\u043e\u0434** \u041a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0433\u0440\u0430\u044e\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u0443\u044e \u0440\u043e\u043b\u044c \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u0442\u0440\u0430\u0437\u0430\u043a\u0446\u0438\u0439. \u0423\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e year \u0438\u0433\u0440\u0430\u0435\u0442 \u043d\u0435\u043c\u0430\u043b\u043e\u0432\u0430\u0436\u043d\u0443\u044e \u0440\u043e\u043b\u044c, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0437-\u0437\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e(200 \u0437\u0430\u043f\u0438\u0441\u0435\u0439) \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0442\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0430\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u0446\u0438\u0438 \u0442\u043e\u0436\u0435 \u0432\u0430\u0436\u0435\u043d, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0435 \u0442\u0430\u043a \u0441\u0438\u043b\u044c\u043d\u043e, \u043a\u0430\u043a MCC, Merchant (State, Name, City), Zip code \u0438 Use Chip, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u043a\u0438 \u043c\u0430\u043a\u0441\u0438\u0440\u0443\u044e\u0442\u0441\u044f, \u043d\u0435 \u0441\u043e\u0432\u0435\u0440\u0448\u0430\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u043e\u043a\u0443\u043f\u043a\u0438.","ff319953":"### \u0424\u0440\u043e\u0434\u043e\u0432\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f","9cd938a1":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043e\u0431\u043e\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445(\u0441 \u0444\u0440\u043e\u0434\u043e\u0432\u043e\u0439 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439) \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043b\u0438 feature MCC, Merchant State, Zip code \u0438 Use Chip. \u0412\u0441\u0435 \u044d\u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e, MCC \u043a\u043e\u0434 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0442\u043e, \u0433\u0434\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0431\u044b\u043b\u0430 \u0441\u043e\u0432\u0435\u0440\u0435\u0448\u0435\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f(\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\/\u043f\u043b\u0430\u0442\u0435\u0436\u043d\u0430\u044f \u0441\u0438\u0442\u0441\u0435\u043c\u0430), \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0447\u0442\u043e \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u044e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u043e\u0447\u043a\u0438. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e merchant(state, city, name) \u0438 zip code. Use chip \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u0442\u0440\u0430\u0437\u0430\u043a\u0446\u0438\u0438(\u0447\u0442\u043e \u0442\u043e\u0436\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e, online \/ swipe \/ chip). \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \"\u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c\" \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438. \u0414\u043b\u044f \u0443\u0441\u043e\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 150 \u043f\u0435\u0440\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0430 \u043f\u043e\u0442\u043e\u043c \u043d\u0430 100 \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u0438 100 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0445.","03f39228":"## \u0427\u0430\u0441\u0442\u044c \u0432\u0442\u043e\u0440\u0430\u044f: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 RNN(LSTM) \u0438 CNN \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439","aaf2c962":"## Encoding \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n\u041f\u043e \u0441\u043c\u044b\u0441\u043b\u0443 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043d\u0435\u0442\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c one-hot encoding, \u043e\u0434\u043d\u0430\u043a\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e, \u044d\u0442\u043e \u0432\u0441\u0435 \u043d\u0435 \u0432\u043b\u0435\u0437\u0435\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c label-encoding."}}