{"cell_type":{"9c502619":"code","1381ebc3":"code","4dc897f6":"code","bd89bff3":"code","c0b7c818":"code","dbda95bd":"code","71dc92cd":"code","cd8b1862":"code","c82e3408":"code","45b15bee":"code","1414d6f3":"code","893e8690":"code","0c582b2b":"code","1b68de2f":"markdown","a4b83e06":"markdown","df799646":"markdown","e29c187d":"markdown","6c148f16":"markdown","d5f26aaa":"markdown"},"source":{"9c502619":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1381ebc3":"#I loaded my data from home data for ML course\nhome_data_path = '..\/input\/home-data-for-ml-course\/train.csv'\nhome_data = pd.read_csv(home_data_path)","4dc897f6":"home_data.head()","bd89bff3":"home_data.describe()","c0b7c818":"#checking the columns \nhome_data.columns","dbda95bd":"#import\nfrom sklearn.model_selection import train_test_split\n#creating the target data which is called y\ny = home_data.SalePrice\n#creating features\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[features]\n\n#split the data into train and val\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,random_state = 1)\n\n\n\n","71dc92cd":"#import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nhome_model = RandomForestRegressor(random_state = 1)","cd8b1862":"home_model.fit(train_X,train_y)","c82e3408":"home_prediction = home_model.predict(val_X)","45b15bee":"print(home_prediction)","1414d6f3":"#importing metrics from sklearn\nfrom sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(home_prediction,val_y)","893e8690":"print(val_mae)","0c582b2b":"y.head()","1b68de2f":"# Splitting tha data into train and test By using train_test_split function of Sklearn","a4b83e06":"## Let's compare our prediction with the actual test value","df799646":"# Load our Data","e29c187d":"# Fit the model","6c148f16":"# Specifying Model","d5f26aaa":"## Make Predictions"}}