{"cell_type":{"119c9c3d":"code","ef390df0":"code","911860cd":"code","f62cffc9":"code","cd617e79":"code","adcf982d":"code","916e40a3":"code","ab2ee8df":"code","68e4a617":"code","99ebef32":"code","8f07d11c":"code","04e1adcb":"code","5e12be28":"code","9aa5acc3":"code","ba344d6b":"code","283c5cf3":"code","6325714b":"code","f14b9961":"code","43607923":"code","24d3d07f":"code","7c05ea98":"code","e7798d62":"code","37753ed0":"code","6d5d6637":"code","d01485ef":"code","cd7425e8":"code","3cf688c9":"code","381290bd":"markdown","14538253":"markdown","bd284f7a":"markdown","eb529a0e":"markdown","5b1b8308":"markdown","dafea70c":"markdown","185d2bd0":"markdown","7ea9dc72":"markdown","ebaea84c":"markdown","af4006d4":"markdown","6302496a":"markdown","0a567a3c":"markdown","eca06268":"markdown","4c61b1a2":"markdown","6e818d69":"markdown","99e27bc4":"markdown","61f59a5f":"markdown","996adea5":"markdown","3df75574":"markdown","2fb560fa":"markdown","04b71c1c":"markdown","9e3602a3":"markdown","b2d32b5d":"markdown","e4ea804a":"markdown","219484bf":"markdown","7cabfd57":"markdown","1a3ce558":"markdown","ef88c275":"markdown","e1dfa659":"markdown","7af3ffa5":"markdown","e8c31838":"markdown","090d2e94":"markdown","e0900635":"markdown","d64d3f81":"markdown","6158123c":"markdown","9e24a5d4":"markdown"},"source":{"119c9c3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport json, requests\nfrom datetime import date\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom IPython.display import display\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nimport requests\nfrom io import StringIO\nimport pandas as pd\nimport requests\nfrom io import StringIO\nimport plotly.figure_factory as ff\nimport datetime\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n# Any results you write to the current directory are saved as output.","ef390df0":"# Common Methods\ndef State_Top_Analysis(number_top,input_df):\n    result = input_df[:number_top]\n    df1 = input_df.iloc[number_top:]\n    result.loc['Rest of India'] = df1.sum()\n    return(result)\n\ndef State_Top_Analysis2(number_top,input_df,top_number):\n    result = input_df[0:0]\n    df1 = input_df.iloc[:number_top]\n    result.loc[top_number] = df1.sum()\n    df2 = input_df.iloc[number_top:]\n    result.loc['Rest of India'] = df2.sum()\n    return(result)\n\ndef total_tests(startdate,enddate):\n    #startdate = datetime.datetime.strptime(startdate , '%Y-%m-%d').date()\n    #enddate = datetime.datetime.strptime(enddate , '%Y-%m-%d').date()\n    startdate_tests = india_tested_numbers_data.loc[india_tested_numbers_data['Date']== startdate]['Total Samples Tested'].max()\n    enddate_tests = india_tested_numbers_data.loc[india_tested_numbers_data['Date']== enddate]['Total Samples Tested'].max()\n    totaltests = enddate_tests - startdate_tests\n    return (totaltests)\n\ndef calculate_doublingtime(startdate,enddate):\n    #startdate = datetime.datetime.strptime(startdate , '%Y-%m-%d').date()\n    #enddate = datetime.datetime.strptime(enddate , '%Y-%m-%d').date()\n    number_of_days = enddate - startdate\n    cases_on_enddate =  case_time_series.loc[case_time_series['Casedate']== enddate]['Total Confirmed'].max()\n    cases_on_startdate = case_time_series.loc[case_time_series['Casedate']== startdate]['Total Confirmed'].max()\n    doublingrate = ((number_of_days.days*np.log(2))\/(np.log(cases_on_enddate\/cases_on_startdate)))\n    doublingrate = np.round(doublingrate)\n    return (doublingrate)\n\ndef doublingtime_predict(startdate,enddate,numberofdaystopredict):\n    #startdate = datetime.datetime.strptime(startdate , '%Y-%m-%d').date()\n    #enddate = datetime.datetime.strptime(enddate , '%Y-%m-%d').date()\n    number_of_days = enddate - startdate\n    cases_on_enddate =  case_time_series.loc[case_time_series['Casedate']== enddate]['Total Confirmed'].max()\n    cases_on_startdate = case_time_series.loc[case_time_series['Casedate']== startdate]['Total Confirmed'].max()\n    doublingrate = ((number_of_days.days*np.log(2))\/(np.log(cases_on_enddate\/cases_on_startdate)))\n    doublingrate = np.round(doublingrate)\n    predicteddoublingrate = cases_on_enddate * ((2**(1\/doublingrate))** numberofdaystopredict)\n    predicteddoublingrate = np.round(predicteddoublingrate,0)\n    return (predicteddoublingrate)\n\n\n#Global Variables \nwidth = 700\nheight = 550\ncolorscale = [[0, '#1f77b4'],[.5, '#f2e5ff'],[1, '#ffffff']]","911860cd":"import requests\n#Input DF1\nurl = \"https:\/\/api.covid19india.org\/csv\/latest\/case_time_series.csv\"\nreq = requests.get(url)\ndata = StringIO(req.text)\ncase_time_series = pd.read_csv(data)\ncase_time_series = case_time_series.dropna()\ncase_time_series['year'] = 2020\ncase_time_series['Casedate']  =  case_time_series['Date'].astype(str)  + case_time_series['year'].astype(str) \ncase_time_series['Casedate']  = pd.to_datetime(case_time_series['Casedate']).dt.date\ncase_time_series['Casedate']  = pd.to_datetime(case_time_series['Casedate'],format='%Y-%m-%d')\ncase_time_series['ConfirmedGrowthFactor'] = ( case_time_series['Daily Confirmed'] \/ case_time_series['Daily Confirmed'].shift(1))\ncase_time_series['RecoveredGrowthFactor'] = ( case_time_series['Daily Recovered'] \/ case_time_series['Daily Recovered'].shift(1))\ncase_time_series['DeathGrowthFactor'] = ( case_time_series['Daily Deceased'] \/ case_time_series['Daily Deceased'].shift(1))\n#case_time_series = case_time_series.replace([np.inf, -np.inf], np.nan)\n#case_time_series = case_time_series.fillna(0)\n\n#Input DF2\nurl = \"https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv\"\nreq = requests.get(url)\ndata = StringIO(req.text)\nstate_wise = pd.read_csv(data)\n\n\n#Input DF3\nurl = \"https:\/\/api.covid19india.org\/csv\/latest\/statewise_tested_numbers_data.csv\"\nreq = requests.get(url)\ndata = StringIO(req.text)\nstatewise_tested_numbers_data = pd.read_csv(data)\nstatewise_tested_numbers_data['Date'] = statewise_tested_numbers_data['Updated On']\nstatewise_tested_numbers_data['Date'] = pd.to_datetime(statewise_tested_numbers_data['Date'], format='%d\/%m\/%Y')\nstatewise_tested_numbers_data.set_index(\"Date\")\n \n#Input DF4\nurl = \"https:\/\/api.covid19india.org\/csv\/latest\/tested_numbers_icmr_data.csv\"\nreq = requests.get(url)\ndata = StringIO(req.text)\nindia_tested_numbers_data = pd.read_csv(data)\nindia_tested_numbers_data['Date'] = india_tested_numbers_data['Update Time Stamp']\nindia_tested_numbers_data['Date'] = pd.to_datetime(india_tested_numbers_data['Update Time Stamp'],dayfirst=True).dt.date\nindia_tested_numbers_data['Date'] = pd.to_datetime(india_tested_numbers_data['Date'],format='%Y-%m-%d')\n#india_tested_numbers_data\n\n#DF4\ntotal_covid_count = case_time_series[case_time_series['Casedate']==case_time_series['Casedate'].max()]\ntotal_covid_count = total_covid_count.drop(['Casedate','Daily Confirmed','Daily Deceased','Daily Recovered','Date','year'],axis=1)\ntotal_covid_count['National RecoveryRate'] = round(total_covid_count['Total Recovered'] \/ total_covid_count['Total Confirmed'],4) * 100\ntotal_covid_count['National DeathRate'] = round(total_covid_count['Total Deceased'] \/total_covid_count['Total Confirmed'], 4) * 100\nmean = case_time_series['ConfirmedGrowthFactor'].mean()","f62cffc9":"start_date = case_time_series['Casedate'].min().date()\nprocess_date = case_time_series['Casedate'].max().date()\nnumber_of_days = process_date - start_date\nprint('Timeline of Covid-19 in India')\nprint('')\nprint('as of',case_time_series['Casedate'].max().strftime('%d\/%m\/%Y'))\nprint('')\nprint ('Date of First Covid-19 Case                    :',start_date.strftime('%d\/%b\/%Y'))\nprint('Number of days since the first Covid-19 Case   :',number_of_days.days ,'days')\n","cd617e79":"date = case_time_series['Casedate'].max()\ntotal_covid_count_bulletin1 = case_time_series[case_time_series['Casedate']== date ]\ntotal_covid_count_bulletin1 = total_covid_count_bulletin1.drop(['Casedate','Daily Confirmed','Daily Deceased','Daily Recovered','Date','year','ConfirmedGrowthFactor','RecoveredGrowthFactor','DeathGrowthFactor'],axis=1)\ntotal_covid_count_copy = total_covid_count_bulletin1.copy()\ntotal_covid_count_bulletin2 = pd.DataFrame()\ntemp_df = case_time_series[case_time_series['Casedate']>='2020-03-14']\ntotal_covid_count_bulletin2['National RecoveryRate'] = np.round(total_covid_count_bulletin1['Total Recovered'] \/ total_covid_count_bulletin1['Total Confirmed'],2) * 100\ntotal_covid_count_bulletin2['National DeathRate'] = np.round(total_covid_count_bulletin1['Total Deceased'] \/total_covid_count_bulletin1['Total Confirmed'], 2) * 100\ntotal_covid_count_bulletin2['National Growth Factor (Mean)'] = np.round(temp_df['ConfirmedGrowthFactor'].mean(),2)\ntotal_covid_count_bulletin2['Total Tests'] = np.round(india_tested_numbers_data['Total Samples Tested'].max(),2)\ntotal_covid_count_bulletin2['Total Tests \/ Million'] = np.round(((total_covid_count_bulletin2['Total Tests']\/1376000000)*1000000),0)\ntotal_covid_count_bulletin2['TestPositivityRate'] = round(total_covid_count_bulletin1['Total Confirmed'] \/ total_covid_count_bulletin2['Total Tests'],2)*100\n\ntotal_covid_count_bulletin1 = total_covid_count_bulletin1.to_string(index=False)\nprint('as of',date.strftime('%d\/%b\/%Y'))\nprint('')\nprint(total_covid_count_bulletin1)\n","adcf982d":"total_covid_count_bulletin3 = total_covid_count_bulletin2.drop(['Total Tests','Total Tests \/ Million','TestPositivityRate'],axis = 1)\ntotal_covid_count_bulletin3 = total_covid_count_bulletin3.to_string(index=False)\nprint(total_covid_count_bulletin3)\n#fig =  ff.create_table(total_covid_count_bulletin3, colorscale=colorscale)\n#fig.show()","916e40a3":"total_covid_count_bulletin3 = total_covid_count_bulletin2.drop(['National Growth Factor (Mean)','National DeathRate','National RecoveryRate'],axis = 1)\ntotal_covid_count_bulletin3 = total_covid_count_bulletin3.to_string(index=False)\nprint(total_covid_count_bulletin3)","ab2ee8df":"data = {'':['ConfirmedCases','RecoveredCases','DeceasedCases','ActiveCases','RecoveryRate','DeathRate','GrowthFactor','TotalTests','TestPositivityRate']}   \nvirus_trends = pd.DataFrame(data)\nlast7daysdate = process_date -  pd.to_timedelta(6 , unit='d')\nprevious7daysdate = last7daysdate -  pd.to_timedelta(6 , unit='d')\ntemp_df = case_time_series[case_time_series['Casedate']>='2020-03-14']\noverall =  case_time_series[case_time_series['Casedate'] <= process_date]\nlast7days = case_time_series[(case_time_series['Casedate'] >= last7daysdate) & (case_time_series['Casedate'] <= (process_date))]\nprevious7days = case_time_series[(case_time_series['Casedate'] >= previous7daysdate) & (case_time_series['Casedate'] <= (last7daysdate))]\n\nvirus_trends.ix [0,'Overall']         = overall ['Daily Confirmed'].sum()\nvirus_trends.ix [0,'Last 7 Days']     = last7days ['Daily Confirmed'].sum()\nvirus_trends.ix [0,'Previous 7 Days'] = previous7days ['Daily Confirmed'].sum()\nvirus_trends.ix [1,'Overall']         = overall ['Daily Recovered'].sum()\nvirus_trends.ix [1,'Last 7 Days']     = last7days ['Daily Recovered'].sum()\nvirus_trends.ix [1,'Previous 7 Days'] = previous7days ['Daily Recovered'].sum()\nvirus_trends.ix [2,'Overall']         = overall ['Daily Deceased'].sum()\nvirus_trends.ix [2,'Last 7 Days']     = last7days ['Daily Deceased'].sum()\nvirus_trends.ix [2,'Previous 7 Days'] = previous7days ['Daily Deceased'].sum()\nvirus_trends.ix [3,'Overall']         = [overall ['Daily Confirmed'].sum() - overall ['Daily Recovered'].sum() - overall ['Daily Deceased'].sum() ]\nvirus_trends.ix [3,'Last 7 Days']     = [last7days ['Daily Confirmed'].sum() - last7days ['Daily Recovered'].sum() - last7days ['Daily Deceased'].sum() ]\nvirus_trends.ix [3,'Previous 7 Days'] = [previous7days ['Daily Confirmed'].sum() - previous7days ['Daily Recovered'].sum() - previous7days ['Daily Deceased'].sum() ]\nvirus_trends.ix [4,'Overall']         = round(overall['Daily Recovered'].sum() \/ overall['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [4,'Last 7 Days']     = round(last7days['Daily Recovered'].sum() \/ last7days['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [4,'Previous 7 Days'] = round(previous7days['Daily Recovered'].sum() \/ previous7days['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [5,'Overall']         = round(overall['Daily Deceased'].sum() \/ overall['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [5,'Last 7 Days']     = round(last7days['Daily Deceased'].sum() \/ last7days['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [5,'Previous 7 Days'] = round(previous7days['Daily Deceased'].sum() \/ previous7days['Daily Confirmed'].sum(),4) * 100\nvirus_trends.ix [6,'Overall']         = round(temp_df['ConfirmedGrowthFactor'].mean(),4)\nvirus_trends.ix [6,'Last 7 Days']     = round(last7days['ConfirmedGrowthFactor'].mean(),4) \nvirus_trends.ix [6,'Previous 7 Days'] = round(previous7days['ConfirmedGrowthFactor'].mean(),4) \nvirus_trends.ix [7,'Overall']         = india_tested_numbers_data['Total Samples Tested'].max()\nvirus_trends.ix [7,'Last 7 Days']     = total_tests(last7daysdate,process_date)\nvirus_trends.ix [7,'Previous 7 Days'] = total_tests(previous7daysdate,last7daysdate)\nvirus_trends.ix [8,'Overall']         = round ((virus_trends.loc[0]['Overall']\/ virus_trends.loc[7]['Overall']),4) * 100\nvirus_trends.ix [8,'Last 7 Days']     =  round ((virus_trends.loc[0]['Last 7 Days']\/ virus_trends.loc[7]['Last 7 Days']),4) * 100\nvirus_trends.ix [8,'Previous 7 Days'] =  round ((virus_trends.loc[0]['Previous 7 Days']\/ virus_trends.loc[7]['Previous 7 Days']),4) * 100\nfig =  ff.create_table(virus_trends, colorscale=colorscale)\nfig.show()\n","68e4a617":"trace1 = go.Scatter(\n                x=case_time_series['Casedate'],\n                y=case_time_series['Total Confirmed'],\n                name=\"Confirmed\",\n                mode='lines+markers',\n                line_color='orange')\ntrace2 = go.Scatter(\n                x=case_time_series['Casedate'],\n                y=case_time_series['Total Deceased'],\n                name=\"Deaths\",\n                mode='lines+markers',\n                line_color='grey')\n\ntrace3 = go.Scatter(\n                x=case_time_series['Casedate'],\n                y=case_time_series['Total Recovered'],\n                name=\"Recovered\",\n                mode='lines+markers',\n                line_color='green')\n\n\n\nlayout = go.Layout(template=\"ggplot2\", width=width, height=height, title_text = '<b>Spread of the Coronavirus In India Since jan 30 <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1,trace2,trace3], layout = layout)\nfig.show()\n\n\n","99ebef32":"fig = px.bar(case_time_series, \n             x=\"Casedate\", y=\"Daily Confirmed\", \n             title='<b>Addition of new confirmed cases<\/b>', \n             orientation='v', \n             width=width, height=height)\nfig.update_layout(template = 'ggplot2',font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","8f07d11c":"state_cases = pd.pivot_table(state_wise, values=['Confirmed','Deaths','Recovered','Active'], index='State', aggfunc='max')\nstate_cases = state_cases [state_cases.index != 'Total']\nstate_cases = state_cases.sort_values(by='Active', ascending= False)\nstate_cases.style.background_gradient(cmap='Greys' ,subset=[\"Deaths\"])\\\n.background_gradient(cmap='Blues' ,subset=[\"Active\"])\\\n.background_gradient(cmap='YlOrRd' ,subset=[\"Confirmed\"])\\\n.background_gradient(cmap='Greens' ,subset=[\"Recovered\"])\n","04e1adcb":"State_Top1 = State_Top_Analysis2(1,state_cases,'Maharastra')\nState_Top5 = State_Top_Analysis2(5,state_cases,'Top 5 States')\nState_Top10 = State_Top_Analysis2(10,state_cases,'Top 10 States')\n\nfig = make_subplots (rows=1, cols=3, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"},{\"type\": \"pie\"}]],\n                     subplot_titles=['Maharastra vs ROI', 'Top 5  vs ROI',\n                                     'Top 10  vs ROI'])\ntrace1 = go.Pie(\n                labels=State_Top1.index,\n                values=State_Top1.Active,\n                hoverinfo='label+percent+value', \n                textfont_size=12,\n                name = 'graph1',\n                marker=dict(line=dict(color='#000000', width=2)))        \nfig.append_trace(trace1, 1, 1)\n\ntrace2 = go.Pie(\n                labels=State_Top5.index,\n                values=State_Top5.Active,\n                hoverinfo='label+percent+value', \n                textfont_size=12,\n                name ='graph 2',\n                marker=dict(line=dict(color='#000000', width=2)))                         \nfig.append_trace(trace2, 1, 2)\n\ntrace3 = go.Pie(\n                labels=State_Top10.index,\n                values=State_Top10.Active,\n                hoverinfo='label+percent+value', \n                textfont_size=12,\n                name ='graph 2',\n                marker=dict(line=dict(color='#000000', width=2)))                         \nfig.append_trace(trace3, 1, 3)\n\n\n\nlayout = go.Layout(width=width, height=height,title = '<b>Confirmed Cases : Top 10 States VS Rest of India <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\n\nfig = go.Figure(fig)\nfig.show()\n","5e12be28":"state_cases_deaths = state_cases.sort_values(by='Deaths', ascending= False)\nstate_cases_cured = state_cases.sort_values(by='Recovered', ascending= False)\nState_Top10_breakup_cured  = State_Top_Analysis(10,state_cases_cured)\nState_Top10_breakup_deaths  = State_Top_Analysis(10,state_cases_deaths)\n\nfig = make_subplots (rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]],\n                     subplot_titles=['Recovered cases in States\/UTs', 'Deaths in States\/UTs'])\ntrace1 = go.Pie(\n                labels=State_Top10_breakup_cured.index,\n                values=State_Top10_breakup_cured.Recovered,\n                hoverinfo='label+percent+value', \n                textfont_size=12,\n                name = 'graph1',\n                marker=dict(line=dict(color='#000000', width=2)))\n                            \nfig.append_trace(trace1, 1, 1)\n\ncolors = ['paired']\ntrace2 = go.Pie(\n                labels=State_Top10_breakup_deaths.index,\n                values=State_Top10_breakup_deaths.Deaths,\n                hoverinfo='label+percent+value', \n                textfont_size=12,\n                name ='graph 2',\n                marker=dict(line=dict(color='#000000', width=2)))\n                            \nfig.append_trace(trace2, 1, 2)\n\nlayout = go.Layout(width=width, height=height,title_text = '<b>Confirmed Cases : Top 10 States VS Rest of India <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\n\nfig = go.Figure(fig)\nfig.show()\n","9aa5acc3":"State_Top20_breakup = State_Top_Analysis(21,state_cases)\nState_Top20_breakup['State\/UT'] = State_Top20_breakup.index\nState_Top20_breakup['RecoveryRate'] = np.round((State_Top20_breakup['Recovered'] \/ State_Top20_breakup['Confirmed']) *100 , decimals =1)\nState_Top20_breakup['DeathRate'] = np.round((State_Top20_breakup[\"Deaths\"]\/State_Top20_breakup[\"Confirmed\"]) *100,decimals=1)\n\nState_Top20_breakup_recoveryrate = State_Top20_breakup.sort_values('RecoveryRate', ascending= True)\n\n\nfig = px.bar(State_Top20_breakup_recoveryrate,\n             x=\"RecoveryRate\", y=\"State\/UT\", \n             title='Recovery Rate in States\/UTs', \n             text='RecoveryRate',\n             orientation='h', \n             width=width, height=900)\nfig.update_traces(marker_color='Green', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()\n\n","ba344d6b":"State_Top20_breakup_deathrate = State_Top20_breakup.sort_values('DeathRate', ascending= True)\nfig = px.bar(State_Top20_breakup_deathrate,\n             x=\"DeathRate\", y=\"State\/UT\", \n             title='Death Rate in States \/ UTs', \n             text='DeathRate', \n             orientation='h', \n             width=width, height=900)\nfig.update_traces(marker_color='grey', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","283c5cf3":"#DF for State testing\nState_testing = pd.pivot_table(statewise_tested_numbers_data, values=['Test positivity rate','Total Tested' ,'Tests per thousand','Tests per million'], index='State', aggfunc='max')\nState_testing = State_testing.sort_values('Total Tested', ascending= False)\nState_testing = State_testing.combine_first(state_cases)\nState_testing ['Recoveryrate'] = np.round((State_testing['Recovered'] \/ State_testing['Confirmed']) *100 , decimals =1)\nState_testing['DeathRate'] = np.round((State_testing[\"Deaths\"]\/State_testing[\"Confirmed\"]) *100,decimals=1)\nState_testing['TestpositivityRate'] = np.round((State_testing['Confirmed'] \/ State_testing['Total Tested'])*100,decimals=1)\nState_testing = State_testing.dropna(axis=0)\nState_testing = State_testing.astype(float)\n\n#Split into top10 and 10-20\nState_testing = State_testing.sort_values('Confirmed', ascending= False)\nState_confirmed_1to10 = State_testing[0:10]\nState_confirmed_10to20 = State_testing[11:21]\n\n#For National Recovery rate line\nnationalrr = total_covid_count_bulletin2['National RecoveryRate'].values\nstatetop20tests = State_testing [0:21]\ndata = {'x':[nationalrr,nationalrr], 'y':[0,max(statetop20tests['Tests per million'])]} \ndf_recoveryrate = pd.DataFrame(data) \ndf_recoveryrate = df_recoveryrate.astype(float)\n\nfig = go.Figure()\ntrace1 =go.Scatter(\n                    x = State_confirmed_1to10['Recoveryrate'],\n                    y = State_confirmed_1to10['Tests per million'],\n                    mode = \"markers\",  \n                    line_color='Red',\n                    name = 'First 10 Confirmed States',\n                    text= State_confirmed_1to10.index)\ntrace2 =go.Scatter(\n                    x = State_confirmed_10to20['Recoveryrate'],\n                    y = State_confirmed_10to20['Tests per million'],\n                    mode = \"markers\",  \n                    line_color='orange',\n                    name = '[10 - 20] Confirmed States',\n                    text= State_confirmed_10to20.index)\n\ntrace3 =go.Scatter(\n                    x = df_recoveryrate['x'],\n                    y = df_recoveryrate['y'],\n                    mode = \"lines\",  \n                    name=\"National Recoveryrate\",\n                    line_color='green',\n                    text = total_covid_count_bulletin2['National RecoveryRate'])\n\nlayout = dict(\n              \n              xaxis= dict(title= 'Recovery Rate',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Tests per million',ticklen= 5,zeroline= False)\n             )\n\nfig = go.Figure(data = [trace1,trace2,trace3], layout = layout)\n\n\n\nfig.show()\n","6325714b":"#Rearrange DF to active cases\nState_testing = State_testing.sort_values('Active', ascending= False)\nState_active_1to10 = State_testing[0:10]\nState_active_10to20 = State_testing[11:21]\nnationalrr = total_covid_count_bulletin2['National RecoveryRate'].values\nnationaldr = total_covid_count_bulletin2['National DeathRate'].values\nstaterr = max(State_testing['DeathRate'])\ndata = {'x':[nationalrr,nationalrr], 'y':[0,staterr]} \ndf_State_rr = pd.DataFrame(data) \ndf_State_rr = df_State_rr.astype(float)\n\n#natioanl Death Rate line\ndata = {'x':[50,100], 'y':[nationaldr,nationaldr]} \ndf_State_dr = pd.DataFrame(data) \ndf_State_dr = df_State_dr.astype(float)\n\ntrace1 =go.Scatter(\n                    x = State_active_1to10['Recoveryrate'],\n                    y = State_active_1to10['DeathRate'],\n                    mode = \"markers\",  \n                    name = 'Top 10 Active States',\n                    line_color='Red',\n                    text= State_active_1to10.index)\ntrace2 =go.Scatter(\n                    x = State_active_10to20['Recoveryrate'],\n                    y = State_active_10to20['DeathRate'],\n                    mode = \"markers\",  \n                    name = '[10-20] Active States',\n                    line_color='Orange',\n                    text= State_active_10to20.index)\n\ntrace3 =go.Scatter(\n                    x = df_State_rr['x'],\n                    y = df_State_rr['y'],\n                    mode = \"lines\",  \n                    name=\"National Recoveryrate\",\n                    line_color='green',\n                    text = total_covid_count_bulletin2['National RecoveryRate'])\ntrace4 =go.Scatter(\n                    x = df_State_dr['x'],\n                    y = df_State_dr['y'],\n                    mode = \"lines\",  \n                    name=\"National Death Rate\",\n                    line_color='grey',\n                    text = total_covid_count_bulletin2['National DeathRate'])\n\ndata = [trace1,trace2,trace3,trace4]\nlayout = dict(\n              xaxis= dict(title= 'Recovery Rate',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Death rate',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n","f14b9961":"#National Test Positivity line\nnationaltestpositivity = total_covid_count_bulletin2['TestPositivityRate'].values\ndata = {'x':[nationaltestpositivity,nationaltestpositivity], 'y':[0,max(statetop20tests['Tests per million'])]} \ndf_testpositive = pd.DataFrame(data) \ndf_testpositive = df_testpositive.astype(float)\n\n#National Test\/Milllion Line\nnationaltestmillion = total_covid_count_bulletin2['Total Tests \/ Million'].values\ndata = {'x':[0,max(statetop20tests['TestpositivityRate'])], 'y':[nationaltestmillion,nationaltestmillion]} \ndf_testmillion = pd.DataFrame(data) \ndf_testmillion = df_testmillion.astype(float)\n\n\nfig = go.Figure()\ntrace1 =go.Scatter(\n                    x = State_confirmed_1to10['TestpositivityRate'],\n                    y = State_confirmed_1to10['Tests per million'],\n                    mode = \"markers\",  \n                    line_color='Red',\n                    name = 'First 10 Confirmed States',\n                    text= State_confirmed_1to10.index)\ntrace2 =go.Scatter(\n                    x = State_confirmed_10to20['TestpositivityRate'],\n                    y = State_confirmed_10to20['Tests per million'],\n                    mode = \"markers\",  \n                    line_color='orange',\n                    name = '[10 - 20] Confirmed States',\n                    text= State_confirmed_10to20.index)\n\ntrace3 =go.Scatter(\n                    x = df_testpositive['x'],\n                    y = df_testpositive['y'],\n                    mode = \"lines\",  \n                    name=\"National Test Positivity Rate\",\n                    line_color='green',\n                    text = total_covid_count_bulletin2['TestPositivityRate'])\ntrace4 =go.Scatter(\n                    x = df_testmillion['x'],\n                    y = df_testmillion['y'],\n                    mode = \"lines\",  \n                    name=\"National Tests\/Million\",\n                    line_color='grey',\n                    text = total_covid_count_bulletin2['Total Tests \/ Million'])\n\nlayout = dict(\n              \n              xaxis= dict(title= 'Test Positivity Rate',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Tests per million',ticklen= 5,zeroline= False)\n             )\n\n\n\nfig = go.Figure(data = [trace1,trace2,trace3,trace4], layout = layout)\n\n\n\nfig.show()\n","43607923":"start_date = '2020-03-25'\nstart_date = pd.to_datetime(start_date)\nprocess_date = case_time_series['Casedate'].max().date()\nnumber_of_days = process_date - start_date.date()\nprint('Timeline of Lockdown in India')\nprint('')\nprint('as of',case_time_series['Casedate'].max().strftime('%d\/%m\/%Y'))\nprint('')\nprint ('Date of First lockdown                             :',start_date.strftime('%d\/%b\/%Y'))\nprint('Number of days in lockdown (Inc Partial lockdowns) :',number_of_days.days ,'days')\nprint('Current Lockdown Version                           : Unlock 4.0')\n","24d3d07f":"data = {'Lockdown_Version':['Lockdown 1.0','Lockdown 2.0','Lockdown 3.0','Lockdown 4.0' ,'Unlock 1.0','Unlock 2.0','Unlock 3.0','Unlock 4.0'],'No of Days':[21,19,14,14,30,31,31,30]}   \nlockdown_df = pd.DataFrame(data)\n#cases_lockdown\nlockdown1_cases = case_time_series[(case_time_series['Casedate'] >= '2020-03-25') & (case_time_series['Casedate'] <= '2020-04-14')]\nlockdown2_cases = case_time_series[(case_time_series['Casedate'] >= '2020-04-15') & (case_time_series['Casedate'] <= '2020-05-03')]\nlockdown3_cases = case_time_series[(case_time_series['Casedate'] >= '2020-05-04') & (case_time_series['Casedate'] <= '2020-05-17')]\nlockdown4_cases = case_time_series[(case_time_series['Casedate'] >= '2020-05-18') & (case_time_series['Casedate'] <= '2020-05-31')]\nlockdown5_cases = case_time_series[(case_time_series['Casedate'] >= '2020-06-01') & (case_time_series['Casedate'] <= '2020-06-30')]\nlockdown6_cases = case_time_series[(case_time_series['Casedate'] >= '2020-07-01') & (case_time_series['Casedate'] <= '2020-07-31')]\nlockdown7_cases = case_time_series[(case_time_series['Casedate'] >= '2020-08-01') & (case_time_series['Casedate'] <= '2020-08-31')]\nlockdown8_cases = case_time_series[(case_time_series['Casedate'] >= '2020-09-01') & (case_time_series['Casedate'] <= '2020-09-30')]\nlockdown_df.ix [0,'ConfirmedCases'] = lockdown1_cases['Daily Confirmed'].sum()\nlockdown_df.ix [1,'ConfirmedCases'] = lockdown2_cases['Daily Confirmed'].sum()\nlockdown_df.ix [2,'ConfirmedCases'] = lockdown3_cases['Daily Confirmed'].sum()\nlockdown_df.ix [3,'ConfirmedCases'] = lockdown4_cases['Daily Confirmed'].sum()\nlockdown_df.ix [4,'ConfirmedCases'] = lockdown5_cases['Daily Confirmed'].sum()\nlockdown_df.ix [5,'ConfirmedCases'] = lockdown6_cases['Daily Confirmed'].sum()\nlockdown_df.ix [6,'ConfirmedCases'] = lockdown7_cases['Daily Confirmed'].sum()\nlockdown_df.ix [7,'ConfirmedCases'] = lockdown8_cases['Daily Confirmed'].sum()\nlockdown_df['Confirmed\/Day'] = round (lockdown_df['ConfirmedCases'] \/ lockdown_df['No of Days'],0)\nlockdown_df.ix [0,'Recovered'] = lockdown1_cases['Daily Recovered'].sum()\nlockdown_df.ix [1,'Recovered'] = lockdown2_cases['Daily Recovered'].sum()\nlockdown_df.ix [2,'Recovered'] = lockdown3_cases['Daily Recovered'].sum()\nlockdown_df.ix [3,'Recovered'] = lockdown4_cases['Daily Recovered'].sum()\nlockdown_df.ix [4,'Recovered'] = lockdown5_cases['Daily Recovered'].sum()\nlockdown_df.ix [5,'Recovered'] = lockdown6_cases['Daily Recovered'].sum()\nlockdown_df.ix [6,'Recovered'] = lockdown7_cases['Daily Recovered'].sum()\nlockdown_df.ix [7,'Recovered'] = lockdown8_cases['Daily Recovered'].sum()\nlockdown_df['Recovered\/Day'] = round (lockdown_df['Recovered'] \/ lockdown_df['No of Days'],0)\nlockdown_df.ix [0,'Deceased'] = lockdown1_cases['Daily Deceased'].sum()\nlockdown_df.ix [1,'Deceased'] = lockdown2_cases['Daily Deceased'].sum()\nlockdown_df.ix [2,'Deceased'] = lockdown3_cases['Daily Deceased'].sum()\nlockdown_df.ix [3,'Deceased'] = lockdown4_cases['Daily Deceased'].sum()\nlockdown_df.ix [4,'Deceased'] = lockdown5_cases['Daily Deceased'].sum()\nlockdown_df.ix [5,'Deceased'] = lockdown6_cases['Daily Deceased'].sum()\nlockdown_df.ix [6,'Deceased'] = lockdown7_cases['Daily Deceased'].sum()\nlockdown_df.ix [7,'Deceased'] = lockdown8_cases['Daily Deceased'].sum()\nlockdown_df['Deceased\/Day'] = round (lockdown_df['Deceased'] \/ lockdown_df['No of Days'],0)\nlockdown_df.ix [0,'TotalTests'] = total_tests('2020-03-25','2020-04-14')\nlockdown_df.ix [1,'TotalTests'] = total_tests('2020-04-15','2020-05-03')\nlockdown_df.ix [2,'TotalTests'] = total_tests('2020-05-04','2020-05-17')\nlockdown_df.ix [3,'TotalTests'] = total_tests('2020-05-17','2020-05-31')\nlockdown_df.ix [4,'TotalTests'] = total_tests('2020-06-01','2020-06-30')\nlockdown_df.ix [5,'TotalTests'] = total_tests('2020-07-01','2020-07-31')\nlockdown_df.ix [6,'TotalTests'] = total_tests('2020-08-01','2020-08-31')\nlockdown_df.ix [7,'TotalTests'] = total_tests('2020-09-01','2020-09-02')\nlockdown_df['Tests\/Day'] = round (lockdown_df['TotalTests'] \/ lockdown_df['No of Days'],0)\nlockdown_df['Tests\/Million'] = round(((lockdown_df['TotalTests']\/1376000000)*1000000),0)\nlockdown_df.ix [0,'GrowthFactor'] = round (lockdown1_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [1,'GrowthFactor'] = round (lockdown2_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [2,'GrowthFactor'] = round (lockdown3_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [3,'GrowthFactor'] = round (lockdown4_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [4,'GrowthFactor'] = round (lockdown5_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [5,'GrowthFactor'] = round (lockdown6_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [6,'GrowthFactor'] = round (lockdown7_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df.ix [7,'GrowthFactor'] = round (lockdown8_cases['ConfirmedGrowthFactor'].mean(),2)\nlockdown_df['RecoveryRate'] = round(100 * (lockdown_df['Recovered'] \/ lockdown_df['ConfirmedCases']),2)\nlockdown_df['DeathRate'] =  round (100 * (lockdown_df['Deceased'] \/ lockdown_df['ConfirmedCases']),2)\nlockdown_df['TestPositivityRate'] =  round (100 * (lockdown_df['ConfirmedCases'] \/ lockdown_df['TotalTests']),2)\n","7c05ea98":"lockdown_cases = lockdown_df[['Lockdown_Version','No of Days','ConfirmedCases','Recovered','Deceased','TotalTests']].copy()\nfig =  ff.create_table(lockdown_cases, colorscale=colorscale)\nfig.show()","e7798d62":"lockdown_cases2 = lockdown_df[['Lockdown_Version','No of Days','Confirmed\/Day','Recovered\/Day','Deceased\/Day','Tests\/Day']].copy()\nfig =  ff.create_table(lockdown_cases2, colorscale=colorscale)\nfig.show()","37753ed0":"lockdown_cases3 = lockdown_df[['Lockdown_Version','Tests\/Million','GrowthFactor','RecoveryRate','DeathRate','TestPositivityRate']].copy()\nfig =  ff.create_table(lockdown_cases3, colorscale=colorscale)\nfig.show()","6d5d6637":"startdate = datetime.datetime.strptime('2020-03-01' , '%Y-%m-%d').date()\n#enddate = case_time_series['Casedate'].max().date()\nenddate = datetime.datetime.strptime('2020-09-02' , '%Y-%m-%d').date()\nweekfreq = pd.date_range(start=startdate ,end=enddate, freq='W')\nweek_df = pd.DataFrame(columns=['Startdate'])\nweek_df['Startdate'] = weekfreq\nweek_df['Enddate'] = week_df.shift(-1)\nweek_df['Enddate']  =week_df['Enddate'] - datetime.timedelta(days=1)\nfor i in range (len(weekfreq)):\n    week_df.ix[i,'DoublingDays'] = calculate_doublingtime(week_df.ix[i,'Startdate'],week_df.ix[i,'Enddate'])    \n    week_df.ix[i,'week'] = 'Week' + str(i)\n    week_df.ix[i,'PredictedCount'] = doublingtime_predict(week_df.ix[i,'Startdate'],week_df.ix[i,'Enddate'],7)\n    week_df.ix[i,'ActualCount'] = case_time_series.loc[case_time_series['Casedate'] == week_df.ix[i,'Enddate']]['Total Confirmed'].max()\nweek_df.ix[0,'week'] = '01\/Mar\/2020'   \nweek_df['PredictedCount'] = week_df['PredictedCount'].shift(1)\nweekly_df_doubling = week_df[['Startdate','Enddate','DoublingDays']].copy()\nweekly_df_doubling['Startdate'] =pd.to_datetime(weekly_df_doubling['Startdate']).dt.date\nweekly_df_doubling['Enddate'] =pd.to_datetime(weekly_df_doubling['Enddate']).dt.date\nweekly_df_doubling = weekly_df_doubling[weekly_df_doubling['Enddate'] <= case_time_series['Casedate'].max().date()]\n#fig =  ff.create_table(weekly_df_doubling, colorscale=colorscale)\n#fig.show()","d01485ef":"\ntrace1 = go.Scatter(\n                x=week_df['week'],\n                y=weekly_df_doubling['DoublingDays'],\n                name=\"Confirmed\",\n                mode='lines+markers',\n                line_color='orange')\n\nlayout = go.Layout(template=\"ggplot2\", width=width, height=height, title_text = '<b>Douling Days since March 01<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n","cd7425e8":"weekly_df_doubling_predict = week_df[['Enddate','PredictedCount','ActualCount']].copy()\nweekly_df_doubling_predict['Enddate'] =pd.to_datetime(weekly_df_doubling_predict['Enddate']).dt.date\nweekly_df_doubling_predict = weekly_df_doubling_predict[weekly_df_doubling_predict['Enddate'] <= enddate]\nweekly_df_doubling_predict = weekly_df_doubling_predict[10:]\nfig =  ff.create_table(weekly_df_doubling_predict, colorscale=colorscale)\nfig.show()","3cf688c9":"import plotly.graph_objects as go\n\n\nfig = go.Figure(data=[\n    go.Bar(name='Predicted', x=weekly_df_doubling_predict['Enddate'], y=weekly_df_doubling_predict['PredictedCount']),\n    go.Bar(name='Actual', x=weekly_df_doubling_predict['Enddate'], y=weekly_df_doubling_predict['ActualCount'])\n])\n\nfig.update_layout(barmode='group')\nfig.show()","381290bd":" # Doubling Days<a id=\"21\"><\/a>\n <n>Doubling time is time it takes for a desease to double in current size\/value","14538253":"# Recovery Rate and Death Rate\n* <n> Recovery rate is the percentage of patients who recovered on total confirmed cases\n* <n> Death rate is the percentage of patients who died on total confirmed cases\n* <n> Only states and UTs who are in top 20 have individual entries.Rest all are combined together","bd284f7a":" # Prediction of Confirmed Cases<a id=\"23\"><\/a>\n <n>By Reversing the doubling days equation we can predict the total confirmed cases on the particular day","eb529a0e":"# Percentage Comparison <a id=\"19\"><\/a>","5b1b8308":" # **Insights :**  <a id=\"20\"><\/a>\n \n**Good** \n1. <n> *Testing - Increase in Number of tests and thereby increasing Tests\/Million*\n2. <n> *Steady Increase in Recovery rate*\n3. <n> *Decrease in Death rate*\n4. <n> *Growth factor in declining trend*\n\n**Bad** \n1. <n> *Increase in number of confirmed cases which can overwhelme healthcare infrastucture*\n2. <n> *Deaths*\n","dafea70c":"<n> *In the above scatter plot*\n1. <n> *Green line represents the National Recovery Rate*\n2. <n> *Grey line represents the National Death Rate*\n3. <n> *Red Dot represents the First 10 States\/UT in terms of Confirmed cases*\n4. <n> *Yellow Dot represents the States\/UT in rank from 10 to 20*\n5. <n> *The Graph has 4 Quadrants [Q1,Q2,Q3,Q4] *\n6. <n> *Q1 \u2013 Top Right \u2013 High Recovery Rate and High Death Rate *\n7. <n> *Q2 \u2013 Top Left \u2013 Low Recovery Rate and High Death Rate *\n8. <n> *Q3 \u2013 Bottom left \u2013 Low Recovery Rate and Low Death Rate *\n9. <n> * Q4 \u2013 Bottom Right  - High Recovery Rate and Low Death Rate* \n    \n**<n> *Ideal Scenario***\n* <n> *States\/UT Needs to target to be in Q4*\n* <n> *States\/UT should not be in Q2*\n\n<n>\n # **Insights :**  <a id=\"12\"><\/a>\n1. <n> *5 of the top 20 States\/UT are in Q4 (High Recovery Rate and Low Death Rate).This reflects India\u2019s lower mortality rate in the world*\n2. <n> * 3 States\/UT are in Q2 (Low Recovery Rate and High Death Rate)*\n3. <n> *3 States\/UT are in Q1 (High Recovery Rate and High Death Rate)*\n4. <n> * 11 States\/UT are in Q3 (Low Recovery Rate and Low Death Rate)*\n","185d2bd0":"# TestPositivity vs Tests\/Million (Confirmed Cases)<a id=\"15\"><\/a>","7ea9dc72":"\n   <n> *In the above scatter plot*\n1. <n> *Green line represents the National Recovery Rate*\n2. <n> *Red Dot represents the First 10 States\/UT in terms of Confirmed cases*\n3. <n> *Yellow Dot represents the States\/UT in rank from 10 to 20*\n   \n**<n> *Ideal Scenario***\n\n* <n> *Anything to the right of the National Recovery Rate is Good. More away from the green line on right more the recovery rate *\n* <n> *Tests\/Million vary on basis of Covid spread , Population Density , Testing centres etc *\n* <n> *More higher in the graph the better for the states*\n* <n> *When States\/UT discharge more patients the green line will move towards the right *\n* <n> *When the active cases rise the green line will move towards the left* \n    \n\n # **Insights :** <a id=\"13\"><\/a>\n1. <n> *5 States\/UT in First 10 list are behind the national recovery rate*\n2. <n> *6 States\/UT in Rank [10 \u2013 20] are behind the national recovery rate*\n3. <n> *7 States\/UT have recovery rate above 80 Percentage*\n","ebaea84c":"# Death Rate in States\/UTs <a id=\"9\"><\/a>","af4006d4":"  # **Insights :** <a id=\"14\"><\/a>\n1. <n> *Maharastra has 25 out of 100 Total confirmed cases than Rest of India*\n2. <n> Every 38 out of 100  confirmed casses is from Top 5 states w.r.t Table above \n3. <n> *Every 78 out of 100 confirmed casses is from Top 10 states w.r.t Table above*\n   \n  \n ","6302496a":"# India Covid-19 Numbers  <a id=\"2\"><\/a>","0a567a3c":" # **Insights :** <a id=\"22\"><\/a>\nDoubling rate is continuously increasing since March 1,2020\n   \n","eca06268":"# Table of Contents\n*  [Timeline of Covid-19 in India](#1)\n*  [India Covid-19 Numbers](#2)\n*  [Recent Trends](#24)\n*  [Covid-19 Cases Timeline](#3)\n*  [Daily Confirmed Cases](#4)\n*  [Analysis of States\/UTs](#5)\n*  [Top1,Top 5,Top 10 States\/UTs Vs Rest Of India (RoI)](#6)\n*  [Insights](#14)\n*  [Recovered Cases and Deaths in States\/UTs ](#7)\n*  [Recovery Rate in States\/UTs](#8)\n*  [Death Rate in States\/UTs](#9)\n*  [Recovery Rate vs Tests\/Million](#10)\n*  [Insights](#13)\n*  [Reccovery rate vs Death rate](#11)\n*  [Insights](#12)\n*  [Test Positivity Rate vs Tests\/Million](#15)\n*  [Insights](#16)\n*  [Lockdown Analysis](#17)\n*  [Absolute Comparison](#18)\n*  [Percentage Comparison](#19)\n*  [Insights](#20)\n*  [Douling Days](#21)\n*  [Insights](#22)\n*  [Prediction Using DD](#23)","4c61b1a2":"# Recovered Cases and Deaths in States\/UTs <a id=\"7\"><\/a>","6e818d69":"*Since the number of days in lockdowns are not consistant hence lets calculate on per day basis*\n","99e27bc4":"* **Upcoming**\n<n>ML Prediction Model","61f59a5f":"**Version Details **\n<n>1.0 - Initial analysis and Visualizations - 22\/Apr\/2020\n<n>2.0 - Changed Data source , Additional Visualizations - 16\/May\/2020\n<n>3.0 - National Test Details , Growth Factor  - 26\/May\/2020   \n<n>4.0 - TestPositivityRate vs Tests\/Million  - 28\/May\/2020      \n<n>5.0 - Lockdown Analysis - 01\/Jun\/2020    \n<n>6.0 - Doubling Days and Prediction of Confimed cases using DD - 14\/Jun\/2020 \n<n>7.0 - Recent Trends (2 Week anlysis)  - 17\/Aug\/2020\n<br>\n    <br>\n    Your valuable feedback will be appreciated\n","996adea5":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/15\/Covid-19-curves-graphic2-stopthespread-v3.gif\/800px-Covid-19-curves-graphic2-stopthespread-v3.gif)\n\n\n","3df75574":"<n> The table below lists out the Tests\/Million,Growthfactor,RecoveryRate,DeathRate and TestPositivityRate across all lockdowns\n<n>\n<n> Description :\n<n>\n1.     Tests\/Million        - Number of tests performed on a million population\n2.     Growthfactor         - Average growth of confirmeed cases on a day by day basis\n3.     RecoveryRate         - Number of people recovered on Number of people with covid\n4.     DeathRate            - Number of people dead on Number of people with covid\n5.     TestPositivityRate   - Number of tests positive on total number of tests\n    ","2fb560fa":"<n> The table below lists out the Confirmedcases, Recovered, Deceased and Totaltests across all lockdowns\n<n>\n<n> Description :\n<n>\n1.     ConfimedCases - Number of confirmed cases in the particular lockdown\n2.     Recovered     - Number of people recovered in the particular lockdown\n3.     Deceased      - Number of people dead in the particular lockdown\n4.     TotalTests    - Number of Tests conducted in the particular lockdown\n    \nAll the values are calculated by finding the differnce between start date and end date of lockdown","04b71c1c":"# Recovery Rate vs Tests\/Million (Confirmed Cases) <a id=\"10\"><\/a>","9e3602a3":"\n*On 24 March 2020, the Government of India under Prime Minister Narendra Modi ordered a nationwide lockdown for 21 days, limiting movement of the entire 1.3 billion population of India as a preventive measure against the COVID-19 pandemic in India.It was ordered after a 14-hour voluntary public curfew on 22 March, followed by enforcement of a series of regulations in the country's COVID-19 affected regions. The lockdown was placed when the number of confirmed positive coronavirus cases in India was approximately 500*","b2d32b5d":"# Absolute Comparison <a id=\"18\"><\/a>","e4ea804a":"# Timeline of Covid-19 in India  <a id=\"1\"><\/a>","219484bf":"# Recovery Rate in States\/UTs <a id=\"8\"><\/a>","7cabfd57":"# Top1,Top 5,Top 10 States Vs Rest Of India (RoI)<a id=\"6\"><\/a>","1a3ce558":"# Recent Trends <a id=\"24\"><\/a>","ef88c275":"**<n>*Lockdown Phases***\n<n>\n<n>Phase 1 - Lockdown 1.0 - 25 March 2020 \u2013 14 April 2020 (21 days)\n<n>Phase 2 - Lockdown 2.0 - 15 April 2020 \u2013 3  May 2020 (19 days)\n<n>Phase 3 - Lockdown 3.0 - 4  May   2020 \u2013 17 May 2020 (14 days)\n<n>Phase 4 - Lockdown 4.0 - 18 May   2020 \u2013 31 May 2020 (14 days)\n<n>Phase 5 - Unlock 1.0 - 1  June  2020 \u2013 30 June 2020 (30 days)\n<n>Phase 6 - Unlock 2.0 - 1  July  2020 \u2013 31 July 2020 (31 days)\n<n>Phase 7 - Unlock 3.0 - 1  Aug  2020 \u2013 31 Aug 2020 (31 days)\n<n>Phase 8 - Unlock 4.0 - 1  Sep  2020 \u2013 30 Sep 2020 (30 days)    \n    \n<n>India is currently in Unlock 4.0 till Sep 30,2020","e1dfa659":"![](https:\/\/www.diagnosticimaging.com\/sites\/default\/files\/covid-19.png)","7af3ffa5":"# Covid-19 Cases Timeline  <a id=\"3\"><\/a>","e8c31838":"# Daily Confirmed Cases  <a id=\"4\"><\/a>","090d2e94":"# Analysis of States\/UTs  <a id=\"5\"><\/a>","e0900635":"# Lockdown Analysis<a id=\"17\"><\/a>\n\n","d64d3f81":"# Recovery Rate vs Death Rate (Active Cases)<a id=\"11\"><\/a>","6158123c":"<n>If the Actual confirmed cases is higher than the predicted value we can assume that Doubling days has reduced\n <n>If the Actual confirmed cases is lower than the predicted value we can assume that Doubling days has increased\n <n>More the doubling days more the better","9e24a5d4":"<n> *In the above scatter plot*\n1. <n> *Green line represents the National Test Positivity Rate*\n2. <n> *Grey line represents the National Tests\/Million *\n3. <n> *Red Dot represents the First 10 States\/UT in terms of Confirmed cases*\n4. <n> *Yellow Dot represents the States\/UT in rank from 10 to 20 in terms of Confirmed cases*\n5. <n> *The Graph has 4 Quadrants [Q1,Q2,Q3,Q4] *\n6. <n> *Q1 \u2013 Top Right \u2013 High Test Positivity Rate and High Tests\/Million *\n7. <n> *Q2 \u2013 Top Left \u2013 Low Test Positivity Rate and High Tests\/Million *\n8. <n> *Q3 \u2013 Bottom left \u2013 Low Test Positivity Rate and Low Tests\/Million *\n9. <n> * Q4 \u2013 Bottom Right  - High Test Positivity Rate and Low Tests\/Million* \n    \n**<n> *Ideal Scenario***\n* <n> *States\/UT Needs to target to be in Q2*\n* <n> *States\/UT should not be in Q4*\n\n<n>\n # **Insights :**  <a id=\"16\"><\/a>\n1. <n> * 1 States\/UT are in Q2 (Low Test Positivity Rate and High Tests\/Million)*\n2. <n> * 12 States\/UT are in Q3 (Low Test Positivity Rate and Low Tests\/Million)*\n3. <n> * 5 States\/UT are in Q4  (High Test Positivity Rate and Low Tests\/Million)*\n4. <n> * 2 States\/UT are in Q1 (High Test Positivity Rate and High Tests\/Million)*\n"}}