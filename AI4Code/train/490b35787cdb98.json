{"cell_type":{"b8a76829":"code","fa0e457c":"code","50ba30bb":"code","3d6d4f74":"code","d778f915":"code","6129d34f":"code","18636d22":"code","2a2456c0":"code","bdeaad43":"code","d9fc2f30":"code","c204402e":"code","4c1f5c9b":"code","803cdff5":"code","b426f47b":"code","76cf523c":"code","bf212c29":"code","11b52ae8":"markdown"},"source":{"b8a76829":"import os\nimport numpy as np\nimport cv2\nimport tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.utils import np_utils, plot_model\nimport datetime\nimport sklearn\nimport scikitplot\nfrom keras.callbacks import ModelCheckpoint, CSVLogger, TensorBoard, EarlyStopping, ReduceLROnPlateau\n    \nfrom sklearn.model_selection import train_test_split","fa0e457c":"TRAIN_MODEL = True\nMODEL_NAME = \"DenoiserModel.h5\"\n\n#DATA PATH\nDATA_PATH= '..\/input\/landscape-image-colorization\/Image Colorization\/grayscale\/'\n#MAX IMAGE SIZE: SIZExSIZE (anything smaller is padded, anything larger is cropped)\nSIZE = 152","50ba30bb":"one_image = cv2.imread('..\/input\/landscape-image-colorization\/Image Colorization\/grayscale\/0.jpg',0)[:,:,np.newaxis]\none_image.shape","3d6d4f74":"def count_image(data_path):\n    total_images = 0\n    return len(os.listdir(data_path))","d778f915":"def gen_noise(img):\n    SIZE = 152\n    CHANNELS = 1\n    \n    #Add Gaussian Noise\n    factor = 16\n    noisyimg = img + factor * np.random.normal(loc=0.0, scale=1.0, size=img.shape) \n    \n    filt = np.zeros(shape=(SIZE, SIZE,CHANNELS))\n    noisyimg = np.maximum.reduce([noisyimg,filt])\n    filt.fill(255)\n    noisyimg = np.minimum.reduce([noisyimg,filt])\n    \n    return noisyimg","6129d34f":"def image_to_array(total_image, data_path):\n    SIZE = 152\n    CHANNELS = 1\n    \n    image_array = np.empty(shape=(total_image, SIZE, SIZE,CHANNELS))\n    image_label = np.empty(shape=(total_image, SIZE, SIZE,CHANNELS))\n    \n    i = 0\n    shapes = set()\n    \n    for f in os.listdir(data_path):\n        #SET TO GRAYSCALE\n        \n        rawimg = cv2.imread(data_path + \"\/\" +f, 0)[:,:,np.newaxis]\n        img = np.zeros(shape=(SIZE, SIZE,CHANNELS))\n        \n        #Fit or crop to SIZE\n        img[0:np.min([rawimg.shape[0],SIZE]),0:np.min([rawimg.shape[1],SIZE]),:] = rawimg[0:np.min([rawimg.shape[0],SIZE]),0:np.min([rawimg.shape[1],SIZE]),:];\n        \n        #print(rawimg.shape)\n        \n        image_array[i] = gen_noise(img)\/255.\n        image_label[i] = img\/255.\n\n        i +=1\n    \n            \n    return image_array, image_label","18636d22":"if TRAIN_MODEL:\n    total_count = count_image(DATA_PATH)\n    full_image_array, full_image_label = image_to_array(total_count, DATA_PATH)\n    print(full_image_array.shape)\n    train_image_array, test_image_array, train_image_label, test_image_label = train_test_split(full_image_array,full_image_label,test_size=0.2)","2a2456c0":"#np.min(gen_noise(test_image_array[2,:,:,:]))","bdeaad43":"def denoiser_model():\n    SIZE = 152\n    CHANNELS = 1\n    \n    model= tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(SIZE, SIZE, CHANNELS)))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n\n    model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    \n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.Conv2D(CHANNELS, (3, 3), activation='relu', padding='same'))\n    \n    model.compile(optimizer=\n                  tf.keras.optimizers.Adam(),\n                  loss='mean_squared_error', metrics=['accuracy'])\n    return model\n\ndef denoiser_model_p():\n    SIZE = 152\n    CHANNELS = 1\n    \n    model= tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(SIZE, SIZE, CHANNELS)))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n\n    model.add(tf.keras.layers.Conv2D(48, (3, 3), activation='relu', padding='same'))\n    \n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.Conv2D(CHANNELS, (3, 3), activation='relu', padding='same'))\n    \n    model.compile(optimizer=\n                  tf.keras.optimizers.Adam(),\n                  loss='mean_squared_error', metrics=['accuracy'])\n    return model\n    \ndef denoiser_model_2():\n    SIZE = 152\n    CHANNELS = 1\n    \n    model= tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.Conv2D(16, (3, 3), activation='relu', padding='same', input_shape=(SIZE, SIZE, CHANNELS)))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n    model.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same', name='ENCODING'))\n    \n    model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    \n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(16, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.Conv2D(CHANNELS, (3, 3), activation='relu', padding='same', name='OUTPUT'))\n    \n    model.compile(optimizer=\n                  tf.keras.optimizers.Adam(),\n                  loss='mean_squared_error', metrics=['accuracy'])\n    return model\n\ndef denoiser_model_3():\n    SIZE = 152\n    CHANNELS = 1\n    \n    model= tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(SIZE, SIZE, CHANNELS)))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n    model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n    model.add(tf.keras.layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    \n    model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same', name='ENCODING'))\n    \n    model.add(tf.keras.layers.Conv2D(256, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n    model.add(tf.keras.layers.UpSampling2D((2, 2)))\n    model.add(tf.keras.layers.Conv2D(CHANNELS, (3, 3), activation='relu', padding='same', name='OUTPUT'))\n    \n    model.compile(optimizer=\n                  tf.keras.optimizers.Adam(),\n                  loss='mean_squared_error', metrics=['accuracy'])\n    return model\n\ndef denoiser_model_2_tpu():\n    SIZE = 152\n    CHANNELS = 1\n    \n    # detect and init the TPU\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n\n    # instantiate a distribution strategy\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n    # instantiating the model in the strategy scope creates the model on the TPU\n    with tpu_strategy.scope():\n        model= tf.keras.Sequential()\n\n        model.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=(SIZE, SIZE, CHANNELS)))\n        model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n        model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n        model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same'))\n        model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n\n        model.add(tf.keras.layers.MaxPooling2D((2, 2), padding='same', name='ENCODING'))\n\n        model.add(tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\n        model.add(tf.keras.layers.UpSampling2D((2, 2)))\n        model.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\n        model.add(tf.keras.layers.UpSampling2D((2, 2)))\n        model.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\n        model.add(tf.keras.layers.UpSampling2D((2, 2)))\n        model.add(tf.keras.layers.Conv2D(CHANNELS, (3, 3), activation='relu', padding='same', name='OUTPUT'))\n\n        model.compile(optimizer=\n                      tf.keras.optimizers.Adam(),\n                      loss='mean_squared_error', metrics=['accuracy'])\n        return model\n","d9fc2f30":"if TRAIN_MODEL:\n    denoiser = denoiser_model()\n    #denoiser = denoiser_model_2()\n    #denoiser = denoiser_model_p()\n    #denoiser = denoiser_model_2_tpu()\n    denoiser.summary()\n    \nelse:\n    print(\"I SHOULD LOAD YOUR MODEL HERE!\")\n    denoiser = tf.keras.models.load_model(MODEL_NAME)","c204402e":"plot_model(denoiser, to_file='model.png', show_shapes=True, show_layer_names=True)","4c1f5c9b":"if TRAIN_MODEL:\n    history = denoiser.fit(train_image_array, train_image_label,\n                           validation_data = (test_image_array,test_image_label),\n                           epochs=100, batch_size=32,\n                           #epochs=500, batch_size=32,\n                           #epochs=20, batch_size=64,\n                           shuffle=True, verbose = 1)\n    denoiser.save(MODEL_NAME)","803cdff5":"if TRAIN_MODEL:\n    sns.set()\n    fig = plt.figure(0, (12, 4))\n\n    ax = plt.subplot(1, 2, 1)\n    sns.lineplot(history.epoch, history.history['accuracy'], label='train')\n    sns.lineplot(history.epoch, history.history['val_accuracy'], label='valid')\n    plt.title('Accuracy')\n    plt.tight_layout()\n\n    ax = plt.subplot(1, 2, 2)\n    sns.lineplot(history.epoch, history.history['loss'], label='train')\n    sns.lineplot(history.epoch, history.history['val_loss'], label='valid')\n    plt.title('Loss')\n    plt.tight_layout()\n\n    plt.savefig('epoch_history.png')\n    plt.show()","b426f47b":"#sns.set()\nselect = 1\n\n#prediction = (denoiser.predict( train_image_array[select][:,:,np.newaxis],batch_size=1 )*255.)[:,:,0,0]\nprediction = (denoiser.predict( test_image_array[select][:,:,np.newaxis],batch_size=1 )*255.)[:,:,0,0]\n\nplt.imshow(prediction)\n#plt.imshow(train_image_array[select][:,:,0]*255.)\n#plt.imshow(train_image_label[select][:,:,0]*255.)\n#plt.imshow(test_image_array[select][:,:,0]*255.)\n#plt.imshow(test_image_label[select][:,:,0]*255.)\n#plt.imshow(test_image_array[select][:,:,0]*255. - test_image_label[select][:,:,0]*255.)\n#plt.imshow(prediction - test_image_label[select][:,:,0]*255.)","76cf523c":"#Training Samples\nfor select in range(5):\n    prediction = (denoiser.predict( train_image_array[select][:,:,np.newaxis],batch_size=1 )*255.)[:,:,0,0]\n    cv2.imwrite('train-predict-{}.png'.format(select),prediction)\n    cv2.imwrite('train-sample-{}.png'.format(select),train_image_array[select][:,:,0]*255.)\n    cv2.imwrite('train-truth-{}.png'.format(select),train_image_label[select][:,:,0]*255.)","bf212c29":"#Testing Samples\nfor select in range(5):\n    prediction = (denoiser.predict( test_image_array[select][:,:,np.newaxis],batch_size=1 )*255.)[:,:,0,0]\n    cv2.imwrite('test-predict-{}.png'.format(select),prediction)\n    cv2.imwrite('test-sample-{}.png'.format(select),test_image_array[select][:,:,0]*255.)\n    cv2.imwrite('test-truth-{}.png'.format(select),test_image_label[select][:,:,0]*255.)","11b52ae8":"Set the *TRAIN_MODEL* flag to True if you are training a new model, or to False if you are testing on a previously trained model."}}