{"cell_type":{"0e03199e":"code","4abe911f":"code","d13e0b7a":"code","76bc5fe0":"code","7dde5e28":"code","4fc59844":"code","ff0fa368":"code","3bffb2e9":"code","8882a28b":"code","a25b5c2f":"code","aae43761":"code","9ee68e80":"code","e5d27472":"code","aa7ba4cc":"code","51432414":"code","90692e37":"code","d8b14631":"code","65fbe0d9":"code","4ec22e2a":"code","270c7da5":"code","028b8987":"code","547afe23":"code","458f9f8a":"code","be96f760":"code","6dd14352":"code","2327c156":"code","776f20e3":"code","317c8cdf":"code","4885c3b3":"code","c3d41315":"markdown","bb32b48a":"markdown","85ffc895":"markdown"},"source":{"0e03199e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4abe911f":"\nimport plotly\nimport plotly.express as px","d13e0b7a":"movies = pd.read_csv('\/kaggle\/input\/digidb\/DigiDB_movelist.csv')","76bc5fe0":"movies.head(13)","7dde5e28":"support = pd.read_csv('\/kaggle\/input\/digidb\/DigiDB_supportlist.csv')","4fc59844":"support.head(13)","ff0fa368":"digimon = pd.read_csv('\/kaggle\/input\/digidb\/DigiDB_digimonlist.csv')","3bffb2e9":"digimon.head(13)","8882a28b":"support","a25b5c2f":"movies.info()","aae43761":"movies.describe()","9ee68e80":"support.describe()","e5d27472":"digimon.describe()","aa7ba4cc":"support.isnull().sum()","51432414":"movies.isnull().sum()","90692e37":"digimon.isnull().sum()","d8b14631":"movies.columns","65fbe0d9":"support.columns","4ec22e2a":"digimon.columns\n","270c7da5":"movies.rename(columns = {'Move':'move', 'SP Cost':'sp_cost', 'Type':'type', 'Power':'power', 'Attribute':'attribute', 'Inheritable':'inheritable', 'Description':'description' }, inplace = True)","028b8987":"movies","547afe23":"support.rename(columns = {'Name':'name', 'Description':'description'}, inplace = True)","458f9f8a":"support","be96f760":"digimon.columns","6dd14352":"digimon.rename(columns = {'Number':'number', 'Digimon':'digimon', 'Stage':'stage', 'Type':'type', 'Attribute':'attribute', 'Memory':'memory', 'Equip Slots':'equip_slots', \n'Lv 50 HP':'lv_50_hp', 'Lv50 SP':'lv_50_sp', 'Lv50 Atk':'lv_50_atk', 'Lv50 Def':'lv_50_def', 'Lv50 Int':'lv_50_int', 'Lv50 Spd':'lv_50_spd'}, inplace = True)","2327c156":"digimon","776f20e3":"stage_count = digimon.stage.value_counts()\nfig = px.bar(stage_count, x=stage_count.index, y=stage_count, labels={'y':'count', 'index':'stage'}, )\nfig.show()","317c8cdf":"dmpie = digimon.groupby('type')['digimon'].count()\ndmpie","4885c3b3":"type_col = ['type', 'amount']\ntype_data = [\n    ['Data', 60],\n    ['Free', 37],\n    ['Vaccine', 70],\n    ['Virus', 82]\n]\ntype_tab = pd.DataFrame(data=type_data, columns=type_col)\nfig = px.pie(type_tab, values='amount', names='type', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","c3d41315":"# Checking for NaN values","bb32b48a":"# Stage distribution - visualization code taken from Demchenko Anna notebook","85ffc895":"# Exploring the data"}}