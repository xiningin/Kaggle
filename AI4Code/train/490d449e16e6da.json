{"cell_type":{"170a1b64":"code","061ad0ae":"code","f288d232":"code","a2f79d93":"code","6f8bf787":"code","1419c904":"code","d34246e2":"code","51d4aa9e":"code","f8c119c4":"code","2d6f12b9":"code","848513a5":"code","d90ce243":"code","e9e82d31":"code","bf83c574":"code","d5aa671a":"code","f6b6555e":"code","6404b249":"markdown","7c0843ef":"markdown","b759c63c":"markdown","bf585f25":"markdown","2e71dcbf":"markdown","c4e20787":"markdown","6da52d86":"markdown","17e4eb15":"markdown","6f756dd9":"markdown","7a1e00bd":"markdown","9baeb24e":"markdown","7dcbdc60":"markdown","33f73552":"markdown","a2124113":"markdown","d135d9a2":"markdown"},"source":{"170a1b64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","061ad0ae":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as img\n%matplotlib inline\n\nfrom scipy.cluster.vq import kmeans,vq\nfrom scipy.cluster.vq import whiten\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport cv2\n\nimport warnings\nwarnings.filterwarnings('ignore')","f288d232":"# Read image and print dimensions\nimage = img.imread(\"\/kaggle\/input\/image3\/sunflower.jpg\")\nimage2 = img.imread(\"\/kaggle\/input\/butterfly\/butterfly.jpg\")\n\nprint('shape', image.shape)\nr, c = image.shape[:2]\nout_r = 500\nnew_image = cv2.resize(image, (int(out_r*float(c)\/r), out_r))\n\npixels = new_image.reshape((-1, 3))\n\nprint('pixels shape :', pixels.shape)\nprint('New shape :', new_image.shape)\n\nplt.figure(figsize=(14,10))\nplt.axis(\"off\")\n\nplt.subplot(121)\nplt.title('Actual Image')\nplt.imshow(image)\n\nplt.subplot(122)\nplt.title('Image with decreased pixels.')\nplt.imshow(new_image)\nplt.show()","a2f79d93":"r,g,b=[],[],[]\nfor row in new_image:\n    for r_val, g_val, b_val in row:\n        r.append(r_val)\n        g.append(g_val)\n        b.append(b_val)","6f8bf787":"# using scipy's inbuilt scaler whiten to scale.\nscaled_red = whiten(r)\nscaled_blue = whiten(b)\nscaled_green = whiten(g)","1419c904":"import pandas as pd\ndf = pd.DataFrame({'red':r,'blue':b,'green':g,'scaled_red':scaled_red,'scaled_blue':scaled_blue,\n                   'scaled_green':scaled_green})\ndf.head()","d34246e2":"distortions = []\nnum_clusters = range(1, 10)\n\nfor i in num_clusters:\n    cluster_centers, distortion = kmeans(df[['scaled_red','scaled_blue','scaled_green']],i)\n    distortions.append(distortion)","51d4aa9e":"# Create a line plot of num_clusters and distortions\nplt.plot(num_clusters, distortions)\nplt.xticks(num_clusters)\nplt.title('Elbow Plot', size=18)\nplt.xlabel('Number of Clusters')\nplt.ylabel(\"Distortions\")\nplt.show()","f8c119c4":"# using sklearn's inbuilt kmean for clustering data and finding cluster centers i.e. means for clusters.\nk_means= KMeans(n_clusters=5)\nk_means.fit(pixels)\nprint(k_means.cluster_centers_)","2d6f12b9":"colors = np.asarray(k_means.cluster_centers_, dtype='uint8')\nprint(colors)","848513a5":"print(\"Original Image --->\")\nplt.axis('off')\nplt.imshow(image)\nplt.show()\n\nprint(\"Dominant\",5,\"Colours of Image --->\")\nplt.axis('off')\nplt.imshow([colors])\nplt.show()","d90ce243":"# percentage of each extracted colour in the image\npixels_colourwise = np.unique(k_means.labels_, return_counts=True)[1]\npercentage = pixels_colourwise\/pixels.shape[0]\npercentage","e9e82d31":"colors","bf83c574":"plt.title('Dominance Of Colours', size=16)\nplt.bar(range(1,6), percentage, color=np.array(colors)\/255)\nplt.ylabel('Percentage')\nplt.xlabel('Colours')\nplt.show()","d5aa671a":"p=pixels.copy()\nfor px in range(pixels.shape[0]):\n    for _ in range(colors.shape[0]):\n        p[px]=colors[k_means.labels_[px]]","f6b6555e":"img = p.reshape(out_r, -1, 3)\n\nplt.figure(figsize=(14,10))\nplt.subplot(121)\nplt.title('Original Image with Decreased Pixels')\nplt.imshow(new_image)\n\nplt.subplot(122)\nplt.title('Regenerated Image using KMeans')\nplt.imshow(img)\nplt.show()","6404b249":"# Optimizing K(number of clusters)","7c0843ef":"**We can see from Elbow Plot that optimal value of k is 5.**","b759c63c":"1. **Elbow Method**","bf585f25":"**We can see in the bar plot the blue colour is most dominent in the image and it is actually right.**","2e71dcbf":"## Displaying Dominant Colours","c4e20787":"# Introduction\n\nI am using one of the images that i downloaded to extract the dominant colours.\nWell, We have to find dominant color in a given image. I will be using an unsupervised learning algorithm (K-Means Clustering).\n\n1. Read Image and convert it into low pixels.\n2. Using Elbow method to find optimal number of clusters of given image.\n3. Recreating model with optimal number of Cluster using sklearn KMeans\n4. Comparing dominance of extracted colour in image.\n5. In end i will regenerate image using these dominant colours (k centers).\n\nYou can read about Kmeans Clustering [here](https:\/\/towardsdatascience.com\/k-means-clustering-algorithm-applications-evaluation-methods-and-drawbacks-aa03e644b48a)","6da52d86":"# Regenerating Image.","17e4eb15":"# Preprocessing","6f756dd9":"* Thus we have generated pretty decent image from the clustered RGB values.","7a1e00bd":"# K-Means Clustering","9baeb24e":"#### Thank you for reading this notebook. I hope you like the notebook. ;-)","7dcbdc60":"Note - I am not able to implement silhouette method for optimizing n_clusters, so if anyone can help it is appreciated.","33f73552":"**Let us store RGB values of all pixels in lists r, g and b.**","a2124113":"## Scaling\n\nLet us scale the data using SciPY Library.\nYou can read more on SciPy Whiten [Here](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.cluster.vq.whiten.html)","d135d9a2":"# Dominance of Colours Extracted"}}