{"cell_type":{"cf7a7aa4":"code","797d76ff":"code","97f75af2":"code","72ffb56c":"code","9150452b":"code","b8c51d6e":"code","d5aa0762":"code","0cf682c6":"code","a5800a7c":"code","04c1d8bf":"code","90fd268d":"code","f5acacca":"code","9f86b985":"code","fc6bc23d":"code","d91693d3":"code","a57ad6e5":"code","4d5147e6":"code","7d065909":"code","9b07e5b3":"code","0e60590f":"code","da37573d":"code","db92d907":"code","a02ae358":"code","03f6d274":"code","6ae69360":"code","8d4e90c9":"code","b85770d4":"code","33b0fadd":"code","11ac0db1":"code","26e0bcb5":"code","7111ed9e":"code","feb9b876":"code","03550f9b":"code","42c46b0d":"code","50caf9b2":"code","15769653":"code","c4f5556d":"code","3af442e6":"code","799391d2":"code","45539a06":"code","63fdfbdc":"code","e4b5ce85":"code","7bf7665d":"markdown","4de57648":"markdown","1eebcc77":"markdown","db8e590b":"markdown","9d2ca763":"markdown","3db62f09":"markdown","892b0117":"markdown","e19760df":"markdown","19d16c6e":"markdown","655aae80":"markdown","6571bb32":"markdown","94bdef8d":"markdown","b31348b2":"markdown","426a7c5a":"markdown","68154638":"markdown","81eaf276":"markdown","2a5fee5b":"markdown","935a1cd1":"markdown","0deea9a3":"markdown"},"source":{"cf7a7aa4":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nimport warnings\nwarnings.filterwarnings('ignore') #Supress unnecessary warnings for readability and cleaner presentation\n\n\npd.set_option('display.float_format', lambda x: '%.3f' % x) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","797d76ff":"order_products_train = pd.read_csv('..\/input\/order_products__train.csv')\norder_products_prior = pd.read_csv('..\/input\/order_products__prior.csv')\norders = pd.read_csv('..\/input\/orders.csv')\nproducts = pd.read_csv('..\/input\/products.csv')\naisles = pd.read_csv('..\/input\/aisles.csv')\ndepartments = pd.read_csv('..\/input\/departments.csv')","97f75af2":"print(\"The order_products_train size is : \", order_products_train.shape)\nprint(\"The order_products_prior size is : \", order_products_prior.shape)","72ffb56c":"order_products_train.head(5)\n","9150452b":"order_products_prior.head(5)\n","b8c51d6e":"order_products_all = pd.concat([order_products_train, order_products_prior], axis=0)\n\nprint(\"The order_products_all size is : \", order_products_all.shape)","d5aa0762":"order_products_all.head(5)\n","0cf682c6":"total = order_products_all.isnull().sum().sort_values(ascending=False)\npercent = (order_products_all.isnull().sum()\/order_products_all.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total Missing', 'Percent'])\nmissing_data","a5800a7c":"# Check the number of unique orders and unique products\norders_Unique = len(set(order_products_all.order_id))\nproducts_Unique = len(set(order_products_all.product_id))\nprint(\"There are %s orders for %s products\" %(orders_Unique, products_Unique))","04c1d8bf":"grouped = order_products_all.groupby(\"order_id\")[\"add_to_cart_order\"].aggregate(\"max\").reset_index()\ngrouped = grouped.add_to_cart_order.value_counts()\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(15, 15))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\n\nplt.ylabel('Number of Orders', fontsize=15)\nplt.xlabel('Number of products added in order', fontsize=15)\nplt.show()","90fd268d":"#the most ordered products\ngrouped = order_products_all.groupby(\"product_id\")[\"reordered\"].aggregate({'Total_reorders': 'count'}).reset_index()\ngrouped = pd.merge(grouped, products[['product_id', 'product_name']], how='left', on=['product_id'])\ngrouped = grouped.sort_values(by='Total_reorders', ascending=False)[:10]\ngrouped","f5acacca":"grouped  = grouped.groupby(['product_name']).sum()['Total_reorders'].sort_values(ascending=False)\n\nsns.set_style('darkgrid')\nf, ax = plt.subplots(figsize=(12, 10))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of Reorders', fontsize=13)\nplt.xlabel('Most ordered Products', fontsize=13)\nplt.show()","9f86b985":"#reorder the same previous ordered products\ngrouped = order_products_all.groupby(\"reordered\")[\"product_id\"].aggregate({'Total_products': 'count'}).reset_index()\ngrouped['Ratios'] = grouped[\"Total_products\"].apply(lambda x: x \/grouped['Total_products'].sum())\ngrouped","fc6bc23d":"grouped  = grouped.groupby(['reordered']).sum()['Total_products'].sort_values(ascending=False)\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(5, 8))\nsns.barplot(grouped.index, grouped.values, palette='RdBu_r')\nplt.ylabel('Number of Products', fontsize=13)\nplt.xlabel('Reordered or Not Reordered', fontsize=13)\nplt.ticklabel_format(style='plain', axis='y')\nplt.show()","d91693d3":"#check the most reordered products\ngrouped = order_products_all.groupby(\"product_id\")[\"reordered\"].aggregate({'reorder_sum': sum,'reorder_total': 'count'}).reset_index()\ngrouped['reorder_probability'] = grouped['reorder_sum'] \/ grouped['reorder_total']\ngrouped = pd.merge(grouped, products[['product_id', 'product_name']], how='left', on=['product_id'])\ngrouped = grouped[grouped.reorder_total > 75].sort_values(['reorder_probability'], ascending=False)[:10]\ngrouped","a57ad6e5":"grouped  = grouped.groupby(['product_name']).sum()['reorder_probability'].sort_values(ascending=False)\n\nsns.set_style('darkgrid')\nf, ax = plt.subplots(figsize=(12, 10))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylim([0.85,0.95])\nplt.ylabel('Reorder probability', fontsize=13)\nplt.xlabel('Most reordered products', fontsize=12)\nplt.show()","4d5147e6":"print(\"The orders data size is : \", orders.shape)\nprint(\"Columns in orders data  are : \",  orders.columns.values)","7d065909":"orders.head(5)\n","9b07e5b3":"#check Misssing Data\norders_na = (orders.isnull().sum() \/ len(orders)) * 100\norders_na = orders_na.drop(orders_na[orders_na == 0].index).sort_values(ascending=False)\norders_na","0e60590f":"grouped = orders.groupby(\"order_id\")[\"order_hour_of_day\"].aggregate(\"sum\").reset_index()\ngrouped = grouped.order_hour_of_day.value_counts()\n\nsns.set_style('darkgrid')\nf, ax = plt.subplots(figsize=(15, 10))\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of orders', fontsize=13)\nplt.xlabel('Hours of order in a day', fontsize=13)\nplt.show()","da37573d":"grouped = orders.groupby(\"order_id\")[\"order_dow\"].aggregate(\"sum\").reset_index()\ngrouped = grouped.order_dow.value_counts()\n\nf, ax = plt.subplots(figsize=(10, 10))\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of orders', fontsize=13)\nplt.xlabel('Days of order in a week', fontsize=13)\nplt.show()","db92d907":"grouped = orders.groupby(\"order_id\")[\"days_since_prior_order\"].aggregate(\"sum\").reset_index()\ngrouped = grouped.days_since_prior_order.value_counts()\n\nfrom matplotlib.ticker import FormatStrFormatter\nf, ax = plt.subplots(figsize=(15, 10))\nsns.barplot(grouped.index, grouped.values)\nax.xaxis.set_major_formatter(FormatStrFormatter('%.0f'))\nplt.ylabel('Number of orders', fontsize=13)\nplt.xlabel('Period of reorder', fontsize=13)\nplt.show()","a02ae358":"grouped = orders.groupby(\"eval_set\")[\"order_id\"].aggregate({'Total_orders': 'count'}).reset_index()\ngrouped['Ratio'] = grouped[\"Total_orders\"].apply(lambda x: x \/grouped['Total_orders'].sum())\ngrouped","03f6d274":"grouped  = grouped.groupby(['eval_set']).sum()['Total_orders'].sort_values(ascending=False)\n\nsns.set_style('whitegrid')\nf, ax = plt.subplots(figsize=(8, 8))\nsns.barplot(grouped.index, grouped.values, palette='coolwarm')\nplt.ylabel('Number of Orders', fontsize=13)\nplt.xlabel('datasets', fontsize=13)\nplt.show()","6ae69360":"print(\"Number of unique customers in the whole dataset : \",len(set(orders.user_id)))\n","8d4e90c9":"grouped = orders.groupby(\"eval_set\")[\"user_id\"].apply(lambda x: len(x.unique()))\n\nplt.figure(figsize=(7,8))\nsns.barplot(grouped.index, grouped.values, palette='coolwarm')\nplt.ylabel('Number of users', fontsize=13)\nplt.xlabel('Eval set', fontsize=13)\nplt.title(\"Number of unique customers in each dataset\")\nplt.show()\n","b85770d4":"grouped = orders.groupby('user_id')['order_id'].apply(lambda x: len(x.unique())).reset_index()\ngrouped = grouped.groupby('order_id').aggregate(\"count\")\n\nsns.set_style(\"whitegrid\")\nf, ax = plt.subplots(figsize=(15, 12))\nsns.barplot(grouped.index, grouped.user_id)\nplt.ylabel('Numbers of Customers')\nplt.xlabel('Number of Orders per customer')\nplt.xticks(rotation='vertical')\nplt.show()","33b0fadd":"#display first five rows of our dataset.\nproducts.head(5)","11ac0db1":"departments.head(5)\n","26e0bcb5":"aisles.head(5)\n","7111ed9e":"items  = pd.merge(left =pd.merge(left=products, right=departments, how='left'), right=aisles, how='left')\nitems.head()","feb9b876":"grouped = items.groupby(\"department\")[\"product_id\"].aggregate({'Total_products': 'count'}).reset_index()\ngrouped['Ratio'] = grouped[\"Total_products\"].apply(lambda x: x \/grouped['Total_products'].sum())\ngrouped.sort_values(by='Total_products', ascending=False, inplace=True)\ngrouped","03550f9b":"grouped  = grouped.groupby(['department']).sum()['Total_products'].sort_values(ascending=False)\n\nsns.set_style(\"darkgrid\")\nf, ax = plt.subplots(figsize=(12, 15))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of products', fontsize=13)\nplt.xlabel('Departments', fontsize=13)\nplt.show()","42c46b0d":"grouped = items.groupby([\"department\", \"aisle\"])[\"product_id\"].aggregate({'Total_products': 'count'}).reset_index()\ngrouped.sort_values(by='Total_products', ascending=False, inplace=True)\nfig, axes = plt.subplots(7,3, figsize=(20,45), gridspec_kw =  dict(hspace=1.4))\nfor (aisle, group), ax in zip(grouped.groupby([\"department\"]), axes.flatten()):\n    g = sns.barplot(group.aisle, group.Total_products , ax=ax)\n    ax.set(xlabel = \"Aisles\", ylabel=\" Number of products\")\n    g.set_xticklabels(labels = group.aisle,rotation=90, fontsize=12)\n    ax.set_title(aisle, fontsize=15)","50caf9b2":"grouped = items.groupby(\"aisle\")[\"product_id\"].aggregate({'Total_products': 'count'}).reset_index()\ngrouped['Ratio'] = grouped[\"Total_products\"].apply(lambda x: x \/grouped['Total_products'].sum())\ngrouped = grouped.sort_values(by='Total_products', ascending=False)[:20]\ngrouped","15769653":"grouped  = grouped.groupby(['aisle']).sum()['Total_products'].sort_values(ascending=False)\n\nf, ax = plt.subplots(figsize=(12, 15))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of products', fontsize=13)\nplt.xlabel('Aisles', fontsize=13)\nplt.show()","c4f5556d":"users_flow = orders[['user_id', 'order_id']].merge(order_products_train[['order_id', 'product_id']],\n                                          how='inner', left_on='order_id', right_on='order_id')\n\nusers_flow = users_flow.merge(items, how='inner', left_on='product_id',\n                                         right_on='product_id')","3af442e6":"grouped = users_flow.groupby(\"department\")[\"order_id\"].aggregate({'Total_orders': 'count'}).reset_index()\ngrouped['Ratio'] = grouped[\"Total_orders\"].apply(lambda x: x \/grouped['Total_orders'].sum())\ngrouped.sort_values(by='Total_orders', ascending=False, inplace=True)\ngrouped","799391d2":"grouped  = grouped.groupby(['department']).sum()['Total_orders'].sort_values(ascending=False)\n\nf, ax = plt.subplots(figsize=(12, 15))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of Orders', fontsize=13)\nplt.xlabel('Departments', fontsize=13)\nplt.show()","45539a06":"grouped = users_flow.groupby([\"department\", \"aisle\"])[\"order_id\"].aggregate({'Total_orders': 'count'}).reset_index()\ngrouped.sort_values(by='Total_orders', ascending=False, inplace=True)\nfig, axes = plt.subplots(7,3, figsize=(20,45), gridspec_kw =  dict(hspace=1.4))\nfor (aisle, group), ax in zip(grouped.groupby([\"department\"]), axes.flatten()):\n    g = sns.barplot(group.aisle, group.Total_orders , ax=ax)\n    ax.set(xlabel = \"Aisles\", ylabel=\" Number of Orders\")\n    g.set_xticklabels(labels = group.aisle,rotation=90, fontsize=12)\n    ax.set_title(aisle, fontsize=15)","63fdfbdc":"grouped = users_flow.groupby(\"aisle\")[\"order_id\"].aggregate({'Total_orders': 'count'}).reset_index()\ngrouped['Ratio'] = grouped[\"Total_orders\"].apply(lambda x: x \/grouped['Total_orders'].sum())\ngrouped.sort_values(by='Total_orders', ascending=False, inplace=True )\ngrouped.head(10)","e4b5ce85":"grouped  = grouped.groupby(['aisle']).sum()['Total_orders'].sort_values(ascending=False)[:15]\n\nf, ax = plt.subplots(figsize=(12, 15))\nplt.xticks(rotation='vertical')\nsns.barplot(grouped.index, grouped.values)\nplt.ylabel('Number of Orders', fontsize=13)\nplt.xlabel('Aisles', fontsize=13)\nplt.show()","7bf7665d":"We can observe that most customers made 4 orders.\n\n","4de57648":"**Period of Reorders:\n**\n","1eebcc77":"**combine them in a single dataframe**","db8e590b":"**Most important Aisles over all Departments (by number of Products)\n**","9d2ca763":"**Customers in the whole dataset\n**\nthe total number of unique customers in the three datasets (prior, train, test)","3db62f09":"**Check Missing Data**","892b0117":"**Most important Aisles in each Department (by number of Products)\n**","e19760df":"**Days of Orders in a week:\n**\n","19d16c6e":"People usually reorder either after 1 week or after 1 month.\n\n","655aae80":"**Best Selling Aisles in each Department (number of Orders)\n**","6571bb32":"**** customers' favorite Departments and Aisles****","94bdef8d":"The only feature with missing values is days_since_prior_order with 6.028 % missing\n\n","b31348b2":"59 % of ordered products are previously ordered by customers.\n\n","426a7c5a":"**Hours of Order in a Day:\n**\nTime at which people usually order products.\n\n","68154638":"**Orders in the whole dataset\n**\nNumber and ratio of orders from the three datasets (prior, train, test).\n\n","81eaf276":"**Most important Departments (by number of products)\n**","2a5fee5b":"People usually order at days 0 and 1 (anonimyzed days and probably the week end)\n\n","935a1cd1":"People mostly order between 8 and 19 (anonimyzed hours and probably between 8 a.m and 7 p.m.)\n\n","0deea9a3":"**Orders made by each customer\n**\nthe number of orders made by each costumer in the whole dataset"}}