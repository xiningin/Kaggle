{"cell_type":{"fd969b9f":"code","1fd95e4c":"code","8d0ad5cc":"code","5158c535":"code","301b2e09":"code","448bdda0":"code","e6d0f9b3":"code","dcdf43d3":"code","167da3aa":"code","6223ef0d":"code","d2dd493b":"code","c9065f96":"code","d64e27dc":"code","d8b798f8":"code","bb053cba":"code","c51f2e1d":"code","ab4e1c68":"code","23b90546":"markdown","d24ae3f0":"markdown","53798d8b":"markdown","276e0286":"markdown"},"source":{"fd969b9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport catboost\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.cluster import KMeans\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1fd95e4c":"train = pd.read_csv(\"..\/input\/ucu-data\/traindata.csv\", index_col = 0)\ntest = pd.read_csv(\"..\/input\/ucu-machine-learning-inclass\/testdata.csv\", index_col = 0)\ndata = pd.concat([train, test], axis = 0, sort=False)","8d0ad5cc":"data['duration'] = np.log(data.duration)","5158c535":"campaigns = data.campaign.unique()\ncampaign_stats = data.groupby('campaign').mean().loc[:,['age', 'balance', 'duration']]\ndata['campaign_avg_balance'] = data['campaign'].apply(lambda x: campaign_stats.loc[x][1])\ndata['campaign_avg_duration'] = data['campaign'].apply(lambda x: campaign_stats.loc[x][2])","301b2e09":"jobs = data.job.unique()\njobs_stats = data.groupby('job').mean().loc[:,['age', 'balance', 'duration']]\ndata['job_avg_age'] = data['job'].apply(lambda x: jobs_stats.loc[x][0])\ndata['job_avg_balance'] = data['job'].apply(lambda x: jobs_stats.loc[x][1])","448bdda0":"edu = data.education.unique()\nedu_stats = data.groupby('education').mean().loc[:,['age', 'balance', 'duration']]\ndata['edu_avg_age'] = data['education'].apply(lambda x: edu_stats.loc[x][0])\ndata['edu_avg_balance'] = data['education'].apply(lambda x: edu_stats.loc[x][1])","e6d0f9b3":"marital = data.marital.unique()\nm_stats = data.groupby('marital').mean().loc[:,['age', 'balance', 'duration']]\ndata['marital_avg_age'] = data['marital'].apply(lambda x: m_stats.loc[x][0])\ndata['marital_avg_balance'] = data['marital'].apply(lambda x: m_stats.loc[x][1])","dcdf43d3":"def add_custom_clustering(data_in, cols, feature,k = 20):\n    data = data_in.copy()\n    cluster_data = data[cols]\n    c = KMeans(n_clusters = k)\n    c.fit(cluster_data)\n    Y = c.predict(cluster_data)\n    data[feature] = Y.astype(object)\n    return data","167da3aa":"data = add_custom_clustering(data, ['age'], 'age_cluster')\ndata = add_custom_clustering(data, ['balance'], 'balance_cluster')\ndata = add_custom_clustering(data, ['duration'], 'duration_cluster')\ndata = add_custom_clustering(data, ['age', 'balance', 'duration'], 'abd_cluster')\ndata = add_custom_clustering(data, ['day'], 'day_cluster')\ndata = add_custom_clustering(data, ['balance', 'duration'], 'bd_cluster')","6223ef0d":"#Prepare categorical features for catboost\ncols = list(data.columns)\ncols.remove('y')\ncategorical_features = [cols.index(col_name)for col_name in list(data.dtypes[data.dtypes == object].index)]","d2dd493b":"train = data[data.y.notnull()]\ntest = data[data.y.isna()]\n\ntrain_pool = catboost.Pool(data=train.drop(['y'], axis = 1),\n                           label=train['y'],\n                           cat_features=categorical_features)","c9065f96":"#This parameters are not tuned \nparams = {'loss_function': 'Logloss',\n          'eval_metric': 'AUC', \n          'depth': 5,\n          'l2_leaf_reg': 25,\n          'od_type': 'Iter',\n          'od_wait': 250,\n          'iterations': 200,\n          'learning_rate': 0.03,\n          'one_hot_max_size': 22}","d64e27dc":"cv_res = catboost.cv(pool=train_pool, params=params, fold_count=5) # Cross validation 5 folds","d8b798f8":"clf = catboost.CatBoostClassifier(**params)\nclf.fit(train_pool)","bb053cba":"list(zip(clf.feature_names_, clf.feature_importances_)) # Feature importances from catboost ","c51f2e1d":"def submit(predictions, filename):\n    submission = pd.read_csv('..\/input\/ucu-data\/sample_submission.csv')\n    submission.y = predictions\n    submission.to_csv(filename, index=False)","ab4e1c68":"predictions = clf.predict_proba(test.drop(['y'], axis = 1))[:, 1] # Get probabilities for `1` prediction\nsubmit(predictions, 'submission-kernel.csv')","23b90546":"## Predict and submit","d24ae3f0":"## Prepare data. Build features (mean + clustering)","53798d8b":"## Prepare and train catboost classifier ","276e0286":"## Read Data"}}