{"cell_type":{"5fc318b7":"code","625279a0":"code","35380dca":"code","159662f2":"code","2982efd2":"code","e748dce3":"code","5cf80cfb":"code","4559cab2":"code","0e09e5eb":"code","e1ac2e07":"code","50bfafae":"code","a8f71197":"code","694bd759":"code","86c2ef93":"code","ddcb10a3":"code","28a8fe59":"code","5173366d":"code","51c09295":"code","5618629c":"code","75b7509d":"code","0e2dbc3c":"code","97d71737":"code","2fae5729":"code","15deaa9c":"code","58aac7c7":"code","c4767e70":"code","de48c870":"code","22c79281":"code","9b8d8412":"code","2ea9f539":"code","1f5f5d98":"code","3b0b70be":"code","7c8fd2e9":"code","f487aaa7":"markdown","703e6807":"markdown","5ab1bbea":"markdown","1e6bf2a1":"markdown","8011be8e":"markdown","d9851454":"markdown","5d2beb43":"markdown","48f38814":"markdown","afc18e55":"markdown","ddeb26bf":"markdown","377ebb73":"markdown","268b01ac":"markdown","eb30e8e1":"markdown"},"source":{"5fc318b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(16,6))\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","625279a0":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')\ndata.head()","35380dca":"data.describe()","159662f2":"data.describe(include=\"O\")","2982efd2":"data.info()","e748dce3":"data.isna().sum()","5cf80cfb":"data=data[data.Country!='Others']\ndata.head()","4559cab2":"data[\"Date\"] = pd.to_datetime(data[\"Date\"])","0e09e5eb":"data['Last Update'] = pd.to_datetime(data['Last Update'])\ndata['Last Update'].head()","e1ac2e07":"data.groupby('Date').sum()['Confirmed'].plot()\nplt.grid()","50bfafae":"data.groupby('Date').sum()['Deaths'].plot()\nplt.grid()","a8f71197":"country_count = data['Country'].value_counts().reset_index()\ncountry_count = country_count.rename(columns={\"index\": \"Country\", \"Country\": \"Count\"})\ncountry_count.head()","694bd759":"country_count = pd.DataFrame(data.groupby('Country')['Confirmed'].max()).reset_index()\ncountry_count.head()","86c2ef93":"country_count_wo_mc=country_count[country_count.Country != 'Mainland China']\ncountry_count_wo_mc.head()","ddcb10a3":"import plotly.graph_objects as go\nfig = go.Figure(data = [go.Pie(labels = country_count_wo_mc.Country,values = country_count_wo_mc.Confirmed)])\nfig.update_layout(title=\"Country-wise distribution except Mainland China\")\nfig.show()","28a8fe59":"state_count = pd.DataFrame(data[data['Country']=='Mainland China'].groupby('Province\/State').max()['Confirmed']).reset_index()\nfig = go.Figure(data = [go.Pie(labels = state_count['Province\/State'],values = state_count.Confirmed)])\nfig.update_layout(title=\"State-wise distribution of Mainland China\")\nfig.show()","5173366d":"growth_country = pd.pivot_table(data[data.Country!='Mainland China'], values='Confirmed', columns='Country', index='Date')\ngrowth_country.plot(figsize=(18,12))","51c09295":"growth_state = pd.pivot_table(data[data['Country']=='Mainland China'], values='Confirmed', columns='Province\/State', index='Date')\ngrowth_state.plot(figsize=(18,12))","5618629c":"initial_country=data[data['Date'] == data['Date'][0]]['Country'].unique()\ninitial_country","75b7509d":"data[data['Date'] == data['Date'][0]].groupby('Country').sum()['Confirmed']","0e2dbc3c":"global_case_wo_mc = data[data.Country != 'Mainland China'].groupby('Country')['Confirmed','Deaths','Recovered'].max().reset_index()\nglobal_case_wo_mc.head()","97d71737":"fig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=global_case_wo_mc['Country'], y=global_case_wo_mc['Confirmed']),\n    go.Bar(name='Deaths', x=global_case_wo_mc['Country'], y=global_case_wo_mc['Deaths']),\n    go.Bar(name='Recovered', x=global_case_wo_mc['Country'], y=global_case_wo_mc['Recovered']),\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","2fae5729":"mainland_case = data[data['Country']=='Mainland China'].groupby('Province\/State')['Confirmed','Deaths','Recovered'].sum().reset_index()\nmainland_case.head()","15deaa9c":"fig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=mainland_case['Province\/State'], y=mainland_case['Confirmed']),\n    go.Bar(name='Deaths', x=mainland_case['Province\/State'], y=mainland_case['Deaths']),\n    go.Bar(name='Recovered', x=mainland_case['Province\/State'], y=mainland_case['Recovered']),\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","58aac7c7":"recovery_country = pd.pivot_table(data, values='Recovered', columns='Country', index='Date')\nrecovery_country.plot(figsize=(18,12))","c4767e70":"death_country = pd.pivot_table(data, values='Deaths', columns='Country', index='Date')\ndeath_country.plot(figsize=(18,12))","de48c870":"global_case = data.groupby('Country')['Confirmed','Deaths','Recovered'].max().reset_index()\nglobal_case","22c79281":"import folium \nfrom folium import plugins\nworld_data = pd.DataFrame({\n    'name':list(global_case['Country']),\n    'lat':[-25.2744,50.503887,-14.235004,12.565679,56.130366,35.86166,26.820553,61.92411,46.227638,51.165691,22.39643,20.593684,41.87194,-22.49,36.204824,22.198745,39.93,4.210484,23.634501,28.394857,12.879721,61.52401,1.352083,35.907757,40.463669,7.873054,60.128162,23.69781,15.870032,55.378052,37.09024,23.424076,14.058324],\n    'lon':[133.7751,4.469936,-51.92528,104.990963,-106.346771,104.195397,30.802498,25.748151,2.213749,10.451526,114.1095,78.96288,12.56738,17.01,138.252924,113.543873,116.38,101.975766,-102.552784,84.124008,121.774017,105.318756,103.819836,127.766922,-3.74922,80.771797,18.643501,120.960515,100.992541,-3.435973,-95.712891,53.847818,108.277199],\n    'Confirmed':list(global_case['Confirmed']),\n    'Recovered':list(global_case['Recovered']),\n    'Deaths':list(global_case['Deaths']),\n})\n\n# create map and display it\nworld_map = folium.Map(location=[10, -20], zoom_start=2.1,tiles='openstreetmap')\n\nfor lat, lon, value, name in zip(world_data['lat'], world_data['lon'], world_data['Confirmed'], world_data['name']):\n    if value>1000:\n        folium.CircleMarker([lat, lon],\n                        radius=value*0.0004,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\n    elif value>100:\n        folium.CircleMarker([lat, lon],\n                        radius=value*0.02,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\n    elif value<10:\n        folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\n    else:\n        folium.CircleMarker([lat, lon],\n                        radius=value*0.2,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","9b8d8412":"world_map = folium.Map(location=[10, -20], zoom_start=2.1,tiles='openstreetmap')\nfor lat, lon, value, name in zip(world_data['lat'], world_data['lon'], world_data['Recovered'], world_data['name']):\n    if value>0.0:\n        folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Recovered Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='green',\n                        \n                        fill_color='green',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","2ea9f539":"world_map = folium.Map(location=[10, -20], zoom_start=2.1,tiles='openstreetmap')\n\nfor lat, lon, value, name in zip(world_data['lat'], world_data['lon'], world_data['Deaths'], world_data['name']):\n    if value>0:\n        folium.CircleMarker([lat, lon],\n                        radius=8,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Death Cases as on 30th Jan 2020<\/strong>: ' + str(value) + '<br>'),\n                        color='black',\n                        \n                        fill_color='black',\n                        fill_opacity=0.7 ).add_to(world_map)","1f5f5d98":"import pycountry\ncountries = {}\nfor country in pycountry.countries:\n    countries[country.name] = country.alpha_3\ncountry_count[\"iso_alpha\"] = country_count['Country'].map(countries.get)","3b0b70be":"filetered_country=country_count.dropna()\nfiletered_country.head()","7c8fd2e9":"import plotly.express as px\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.choropleth(filetered_country, locations=\"iso_alpha\",\n                    color='Confirmed',\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    projection=\"natural earth\")\nfig.show()","f487aaa7":"Total Confirmed, Recovery and Death in each country","703e6807":"[](http:\/\/)Extracting Date and Time from the 'Last Update' column","5ab1bbea":"<h3> Confirmed, Recovery and Death globally on world map <\/h3>","1e6bf2a1":"<h1> **EDA** <\/h1>","8011be8e":"There are some countries whose iso_alpha value is not present and it is returning it as None. Droping those records.","d9851454":"Country-wise Distribution","5d2beb43":"Excluding country name Others","48f38814":"Checking Date-wise Trend of confirmed patients and number of death","afc18e55":"Country affected on the first day and number of confirmed cases on that date in each country.","ddeb26bf":"Total Confirmed, Recovery and Death in each Province\/State of Mainland China","377ebb73":"Growth trend of Corona virus in each Country individually except Mainland China","268b01ac":"Death Trend Globally","eb30e8e1":"Growth trend of Corona virus in each Province\/State of Mainland China individually"}}