{"cell_type":{"999e41cb":"code","b1eb156b":"code","9c1833d9":"code","bebee0e5":"code","579a1b98":"code","871e877c":"code","17c33a67":"code","f2e6e55a":"code","9ed1815a":"code","92814e66":"code","b261d2cb":"code","b75e959b":"code","92a23d18":"code","0d2b899e":"code","dfeed226":"code","13158d54":"markdown","6c894139":"markdown","079da50d":"markdown","c5946b8a":"markdown","588773f7":"markdown","100e1fd8":"markdown","fb13c205":"markdown","af02735b":"markdown"},"source":{"999e41cb":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import models, layers, optimizers\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau","b1eb156b":"train_dir = '..\/input\/gravity-spy-gravitational-waves\/train\/train\/'\ntest_dir = '..\/input\/\/gravity-spy-gravitational-waves\/test\/test\/'\nvalidation_dir = '..\/input\/\/gravity-spy-gravitational-waves\/validation\/validation\/'","9c1833d9":"class_names = os.listdir(train_dir)","bebee0e5":"plt.figure(figsize=(20,14))\nfor fold, i in zip(class_names,range(0,len(class_names))):\n\n    plt.subplot(4,6, i+1)\n    img_read = plt.imread(train_dir+fold+'\/'+os.listdir(train_dir+fold)[0])\n    plt.imshow(img_read)\n    plt.title(class_names[i])\n    \nplt.show()","579a1b98":"Batch_size = 128\n\ntr_gen = ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)\n\nval_gen =  ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)\n\nts_gen =  ImageDataGenerator(rescale = 1.\/255.,\n                           samplewise_center=True,\n                           samplewise_std_normalization=True)","871e877c":"tr_gen = tr_gen.flow_from_directory(train_dir,\n                                  batch_size=Batch_size,\n                                  classes=class_names,\n                                  class_mode='categorical',\n                                  shuffle=True,\n                                  target_size=(300,300),\n                                  seed= 42)","17c33a67":"val_gen = val_gen.flow_from_directory(validation_dir,\n                                      batch_size=Batch_size,\n                                      classes=class_names,\n                                      class_mode='categorical',\n                                      shuffle=True,\n                                      target_size=(300,300),\n                                      seed= 42)","f2e6e55a":"ts_gen = ts_gen.flow_from_directory(test_dir,\n                                  batch_size=Batch_size,\n                                  classes=class_names,\n                                  class_mode='categorical',\n                                  shuffle=False,\n                                  target_size=(300,300),\n                                  seed= 42)","9ed1815a":"model = models.Sequential()\n\n# Input and Conv1\nmodel.add(layers.Conv2D(filters=4, kernel_size=(3,3), strides=(2,2),\n                        activation = 'relu', padding='valid',\n                        input_shape = (300,300,3)))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.MaxPool2D(strides=2))\nmodel.add(layers.BatchNormalization())\n\n#Conv2\n\nmodel.add(layers.Conv2D(filters=16, kernel_size=(3,3), strides=(2,2),\n                       activation='relu', padding='valid'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.MaxPool2D(strides=2))\nmodel.add(layers.BatchNormalization())\n\n#Conv3\n\nmodel.add(layers.Conv2D(filters=32, kernel_size=(3,3),dilation_rate=(2,2),\n                       activation='relu', padding='same'))\nmodel.add(layers.Conv2D(filters=32, kernel_size=(3,3),\n                       activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.MaxPool2D(strides=3))\nmodel.add(layers.BatchNormalization())\n\n#Flattening and Fully Connected\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(200, activation= 'relu'))\nmodel.add(layers.Dense(100, activation= 'relu'))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.BatchNormalization())\n\n# Output\nmodel.add(layers.Dense(22, activation='softmax'))\n\nmodel.summary()","92814e66":"model.compile(optimizer=optimizers.Adam(lr=0.01),\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nes = EarlyStopping(monitor='val_loss',mode='min',patience=3,verbose=1)\nRLr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience = 2, verbose = 1, min_delta=1e-3,min_lr=1e-6)\n\nhistory= model.fit(tr_gen,\n                 epochs=5,\n                 steps_per_epoch=tr_gen.n\/Batch_size,\n                 validation_data=val_gen,\n                 validation_steps=val_gen.n\/Batch_size,\n                 callbacks=[es,RLr])","b261d2cb":"fig, ax=plt.subplots(2,1,figsize=(12,10))\nfig.suptitle('Train evaluation')\n\nwith plt.style.context('fivethirtyeight'):\n\n    sns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['accuracy'])\n    sns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['val_accuracy'])\n\n    ax[0].legend(['Train','Validation'])\n    ax[0].set_title('Accuracy')\n    ax[0].grid()\n\n    sns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['loss'])\n    sns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['val_loss'])\n\n    ax[1].legend(['Train','Validation'])\n    ax[1].set_title('Loss')\n    ax[1].grid()\n    \n\nplt.show()","b75e959b":"Y_pred = model.predict(ts_gen,steps=np.ceil(ts_gen.n\/Batch_size))\nY_pred = np.argmax(Y_pred, axis=1)\nY_ts = ts_gen.classes","92a23d18":"conf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='dark')\nplt.figure(figsize=(16,10))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":12},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap\\nGravitational Wave Type', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(class_names, fontdict={'fontsize':12,'rotation': 75})\nheatmap.set_yticklabels(class_names, fontdict={'fontsize':12,'rotation': 15})\nplt.show()\n\nprint('-Accuracy achieved: {:.2f}%\\n-Accuracy by model was: {:.2f}%\\n-Accuracy by validation was: {:.2f}%'.\n      format(accuracy_score(Y_ts,Y_pred)*100,(history.history['accuracy'][-1])*100,(history.history['val_accuracy'][-1])*100))","0d2b899e":"index=0\nindex_errors= []\n\nfor label, predict in zip(Y_ts,Y_pred):\n    if label != predict:\n        index_errors.append(index)\n    index +=1","dfeed226":"plt.figure(figsize=(20,20))\n\nfor i,img_index in zip(range(1,21),random.sample(index_errors,k=20)):\n    plt.subplot(4,5,i)\n    img_read = plt.imread(ts_gen.filepaths[img_index])\n    plt.imshow(img_read)\n    plt.title('Actual: '+str(class_names[Y_ts[img_index]])+'\\nPredict: '+str(class_names[Y_pred[img_index]])+'\\nImage_index:'+str(img_index))\nplt.show()","13158d54":"## Fitting","6c894139":"# Gravity Spy","079da50d":"## Architecture","c5946b8a":"# Preprocessing","588773f7":"# Errors Sample","100e1fd8":"# CNN Model","fb13c205":"### Evaluation","af02735b":"# Predictions "}}