{"cell_type":{"6faf23bc":"code","4097f5ec":"code","96641388":"code","76cf19a9":"code","ff31263c":"code","e984d841":"code","eb9951f9":"code","404dd4af":"code","d1924d83":"code","b1ea74ed":"code","e14f537b":"code","50b62913":"code","8bf739e9":"code","9283f09a":"code","ee69de04":"code","9ba28c4f":"code","2f01c3db":"code","f66fb16a":"code","63d70abe":"code","00254362":"code","01829c2b":"code","f906034a":"code","99353907":"code","8d22e755":"code","e47cd1c5":"code","7dc410c3":"code","3fd776a3":"code","4ff3225e":"code","13667064":"code","e5bcde60":"code","234f3944":"code","57e70666":"code","c45ca35a":"code","72fba730":"code","47406d0a":"code","8876425c":"code","24b955fa":"code","480b4be0":"code","0ef9212a":"code","bae0f11c":"code","9389c84e":"code","3d9b3c4b":"code","20db3c03":"code","cee5d0e1":"code","36676d8d":"code","a2b3abda":"code","87393760":"code","4476f7cb":"code","fc67033a":"code","9ff93795":"code","6c6b3dba":"code","1d98ed0f":"code","5e93457c":"code","a1756722":"code","362e2ff5":"code","00c18d81":"markdown","ca23f716":"markdown","b673b5c3":"markdown","754ce7e6":"markdown","fb01dbab":"markdown","a639f142":"markdown","89bf7642":"markdown","e14ac64a":"markdown","76ae4898":"markdown","48daca28":"markdown","cce330a0":"markdown","c93afc77":"markdown","641c6ae1":"markdown","d73ffa25":"markdown","90ae6e1b":"markdown","2fd34e2e":"markdown","98287a3a":"markdown","96905f13":"markdown","b8073e5d":"markdown","b845f6c8":"markdown","f4b1b4c9":"markdown","6237f4b2":"markdown","c2ecec0f":"markdown","1e7d2bec":"markdown","c2ad8a5d":"markdown","4e6c9d42":"markdown","94480f1e":"markdown","711320f1":"markdown","f8f1e183":"markdown","0a0872a7":"markdown","2bb2732b":"markdown"},"source":{"6faf23bc":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport warnings\nwarnings.filterwarnings('ignore')","4097f5ec":"data = pd.read_csv('..\/input\/insurance\/insurance.csv')","96641388":"data.head() ","76cf19a9":"data.count()","ff31263c":"pd.isnull(data).any() ","e984d841":"data.info() ","eb9951f9":"skw = round(data['charges'].skew(), 2)\nplt.figure(figsize=(10,6))\nsns.distplot(data['charges'], bins=50, norm_hist=False)\nplt.title(f'The Distribution of Medical Charges Skew:{skw}', fontsize=14)\nplt.xlabel('Charges', fontsize=14)\nplt.show() \n\nlog_charges = np.log(data['charges'])\nskw = round(log_charges.skew(), 2)\nplt.figure(figsize=(10,6))\nsns.distplot(log_charges, bins=50, norm_hist=False, color='indigo')\nplt.title(f'The Distribution of Medical Charges Skew:{skw}', fontsize=14)\nplt.xlabel('Log Charges', fontsize=14)\nplt.show() ","404dd4af":"pd.get_dummies(data['smoker'])['yes']","d1924d83":"data['smoker'] = pd.get_dummies(data['smoker'])['yes']","b1ea74ed":"data.head() ","e14f537b":"plt.figure(figsize=(10,6))\nplt.bar(x=['No','Yes'], height=[data.loc[data['smoker'] != 1].shape[0],data.loc[data['smoker'] == 1].shape[0]],color=\"indigo\" )\nplt.title(\"Smooker Bar Chart\")\nplt.show() ","50b62913":"charges_smoker = data.loc[data['smoker'] == 1, ['charges']].mean() \ncharges_nosmoker = data.loc[data['smoker'] == 0, ['charges']].mean() \n\nplt.figure(figsize=(10,6))\nplt.bar(x=['No','Yes'], height=[float(charges_nosmoker),float(charges_smoker)],color=\"purple\" )\nplt.title(\"Smooker Bar Chart\")\nplt.show() ","8bf739e9":"ages = data['age']\nages.describe() ","9283f09a":"plt.figure(figsize=(10,6))\nplt.hist(data['age'], bins=50, color='skyblue')\nplt.show()","ee69de04":"plt.figure(figsize=(10,6))\nplt.scatter(x=data['age'], y=data['charges'])\nplt.xlabel('Age')\nplt.ylabel('Charges')\nplt.title('Charges vs Age')\nplt.show() ","9ba28c4f":"categorical_ages = []\nfor index,value in ages.items():\n    if value >= 18 and value <=35:\n        categorical_ages.append('young')\n    elif value >= 36 and value <=55:\n        categorical_ages.append('senior')\n    else: \n        categorical_ages.append('elder')\n\ncategorical_ages = pd.Series(np.asanyarray(categorical_ages), index=ages.index)\ncategorical_ages.value_counts()\n","2f01c3db":"plt.figure(figsize=(10,8))\nplt.pie(x=categorical_ages.value_counts(),labels=['Young','Senior', 'Elder'],shadow=True,autopct='%1.1f%%')\nplt.title(\"Categorical Ages\", fontsize=16)\nplt.show() ","f66fb16a":"age_cty_data = data.copy() \nage_cty_data['age'] = categorical_ages \n\n\nyoung_mean=age_cty_data.loc[age_cty_data['age'] == 'young']['charges'].mean() \nsenior_mean = age_cty_data.loc[age_cty_data['age'] == 'senior']['charges'].mean()\nelder_mean = age_cty_data.loc[age_cty_data['age'] == 'elder']['charges'].mean()\n\n\nyoung_med = np.median(age_cty_data.loc[age_cty_data['age'] == 'young']['charges'])\nsenior_med = np.median(age_cty_data.loc[age_cty_data['age'] == 'senior']['charges'])\nelder_med = np.median( age_cty_data.loc[age_cty_data['age'] == 'elder']['charges'])\n\ndf = pd.DataFrame({'mean': [young_mean, senior_mean,elder_mean], 'median': [young_med, senior_med, elder_med]}, \n                  index=['Young Adult', 'Senior Adult', 'Elder'])\n\n\nax = df.plot.bar(rot=0, figsize=(10,6))","63d70abe":"young = age_cty_data.loc[age_cty_data['age'] == 'young'].loc[age_cty_data['smoker'] == 1]['charges']\nsenior = age_cty_data.loc[age_cty_data['age'] == 'senior'].loc[age_cty_data['smoker'] == 0]['charges']\nelder = age_cty_data.loc[age_cty_data['age'] == 'elder'].loc[age_cty_data['smoker'] == 0]['charges']\n\ndic = {\n    'mean': [np.mean(arr) for arr in [young, senior, elder]], \n    'median': [np.median(arr) for arr in [young, senior, elder]], \n}\n\ndf = pd.DataFrame(dic, index=['Young', 'Senior Adult', 'Elder'])\nax = df.plot.bar(rot=0, figsize=(10,6))","00254362":"data['age_category'] = categorical_ages \ndata.tail() ","01829c2b":"sex = pd.get_dummies(data['sex'])\ndata['sex'] = sex['male']\ndata.head() ","f906034a":"data['sex'].value_counts()","99353907":"skw = round(data['bmi'].skew(), 2)\nplt.figure(figsize=(10,6))\nsns.distplot(data['bmi'], bins=50, norm_hist=False)\nplt.title(f'The Distribution of BMI Skew:{skw}', fontsize=14)\nplt.xlabel('BMI', fontsize=14)\nplt.show()","8d22e755":"data['bmi'].describe() ","e47cd1c5":"plt.figure(figsize=(10,6))\nplt.scatter(x=data['bmi'], y=data['charges'], alpha=0.7, color='indigo')\nplt.xlabel('BMI', fontsize=14)\nplt.ylabel('Charges', fontsize=14)\nplt.title('BMI vs Charges')\nplt.show()","7dc410c3":"bmis = data['bmi']\n\ncategorical_bmi = []\nfor index,value in bmis.items():\n    if value <=18.5: \n        categorical_bmi.append('underweight')\n    elif value > 18.5 and value <= 24.9: \n        categorical_bmi.append('normalweight')\n    elif value > 24.9 and value < 29.9: \n        categorical_bmi.append('overweight')\n    else: \n        categorical_bmi.append('obese')\n\ncategorical_bmi = pd.Series(np.asanyarray(categorical_bmi), index=ages.index)\n\nplt.figure(figsize=(10,6))\nplt.pie(x=categorical_bmi.value_counts().values, \n        labels=[str.capitalize(i) for i in categorical_bmi.value_counts().index], shadow=True,autopct='%1.1f%%')\nplt.title('The Pop. of BMI')\nplt.show() ","3fd776a3":"bmi_charges = pd.concat([categorical_bmi, data['charges']], axis=1)\nbmi_charges.columns = ['bmi', 'charges']\n\nobese_charges = bmi_charges.loc[bmi_charges['bmi'] == 'obese', ['charges']]\noverweight_charges = bmi_charges.loc[bmi_charges['bmi'] == 'overweight', ['charges']]\nnormalweight_charges = bmi_charges.loc[bmi_charges['bmi'] == 'normalweight', ['charges']]\nunderweight_charges = bmi_charges.loc[bmi_charges['bmi'] == 'underweight', ['charges']]\n\narray = [obese_charges, overweight_charges, normalweight_charges,underweight_charges]\n\ndic = {\n    'mean': [np.mean(arr).values[0] for arr in array], \n    'median': [np.median(arr) for arr in array], \n    \n}\n\nindex=categorical_bmi.value_counts().index\n\n\ndf = pd.DataFrame(dic, index=index)\nax = df.plot.bar(rot=0, figsize=(10,6))","4ff3225e":"data['bmi_category'] = categorical_bmi\ndata.head() ","13667064":"f, (ax1, ax2, ax3) = plt.subplots(ncols=3, figsize=(18,8))\n\nsns.stripplot(y='charges', x='age_category', data=data, ax=ax1)\nax1.set_title('Stripplot of charges vs age_category')\n\nsns.stripplot(y='charges', x='age_category', data=data, hue='bmi_category', ax=ax2)\nax2.set_title('Stripplot of charges vs age_category')\n\nsns.stripplot(y='charges', x='smoker', data=data, hue='bmi_category', ax=ax3)\nax3.set_title('Stripplot of charges vs Smoker')\nplt.show()","e5bcde60":"data.head() ","234f3944":"%%time\ndfr = data.loc[:, ['charges', 'age', 'bmi', 'children', 'smoker']] \n\nsns.set(style=\"ticks\")\npal = [\"#BDBDBD\", \"#E91E63\"]\n\nsns.pairplot(dfr, hue=\"smoker\", palette=pal)\nplt.title(\"Smokers\")\nplt.show()","57e70666":"obese_smoker = data.loc[data['bmi_category'] == 'obese'].loc[data['smoker'] == 1]\nobese_nosmoker = data.loc[data['bmi_category'] == 'obese'].loc[data['smoker'] == 0]\n\nobese_smoker_skew = round(obese_smoker['charges'].skew(), 3) \njust_obese_skew = round( obese_nosmoker['charges'].skew(), 3) \n\nf, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18,8))\n\nsns.distplot(obese_smoker['charges'], bins=50, ax=ax1, color='skyblue')\nax1.set_title(f'Smoker Obese {obese_smoker_skew}',fontsize=14)\n\nsns.distplot(obese_nosmoker['charges'], bins=50, ax=ax2, color='#E91E63')\nax2.set_title(f'Just Obese {just_obese_skew}', fontsize=14)\n","c45ca35a":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='age', y='charges', hue='smoker', data=data, palette=pal,legend=\"full\",s=80, alpha=.7)\nplt.title('Age vs Charges', fontsize=14)\n\n\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='age', y='charges', hue='bmi_category', data=data, palette='muted',legend=\"full\",s=80, alpha=.7)\nplt.title('Age vs Charges', fontsize=14)\nplt.show()","72fba730":"data['children'].describe() ","47406d0a":"data['children'].value_counts()","8876425c":"data['region'].value_counts()","24b955fa":"unique_region = dict(pd.Series([0,1,2,3],index=data['region'].unique()))\ndata['region'] = data['region'].replace(unique_region)","480b4be0":"data.head() ","0ef9212a":"mask = np.zeros_like(data.corr())\ntriangle_indices = np.triu_indices_from(mask)\nmask[triangle_indices] = True\nmask","bae0f11c":"plt.figure(figsize=(16,10))\nsns.heatmap(data.corr(), mask=mask, annot=True,annot_kws={\n    'size': 14\n})\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","9389c84e":"data_log_charges = data \ndata_log_charges['charges'] = np.log(data_log_charges['charges'])\n\nplt.figure(figsize=(16,10))\nsns.heatmap(data_log_charges.corr(), mask=mask, annot=True,annot_kws={\n    'size': 14\n})\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","3d9b3c4b":"%%time\n\nsns.pairplot(data_log_charges, kind='reg', plot_kws={'line_kws':{'color': 'cyan'}})\nplt.show()","20db3c03":"data['bmi_category'] = data['bmi_category'].astype('category')\ndata['bmi_category'] = data['bmi_category'].cat.codes\n\ndata['age_category'] = data['age_category'].astype('category')\ndata['age_category'] = data['age_category'].cat.codes\ndata.head() \n","cee5d0e1":"# Model 1: log charges \ndata_log = data.drop(['age_category', 'bmi_category'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)","36676d8d":"regr = LinearRegression().fit(X=X_train, y=y_train)\n\nlog_target_caty_bmi_score = regr.score(X_train, y_train)\n\n\nprint('Intercept is', round(regr.intercept_,3))\nprint('R-squared for training set is', regr.score(X_train, y_train))\nprint('R-squared for testing set is', regr.score(X_test, y_test))\n\npd.DataFrame(regr.coef_, columns=['coef'], index=features.columns)","a2b3abda":"# Model 2 log target with categorical bmi \n\ndata_log = data.drop(['age_category', 'bmi'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)","87393760":"regr = LinearRegression().fit(X=X_train, y=y_train)\n\nlog_target_score = regr.score(X_train, y_train)\n\n\nprint('Intercept is', round(regr.intercept_,3))\nprint('R-squared for training set is', regr.score(X_train, y_train))\nprint('R-squared for testing set is', regr.score(X_test, y_test))\n\npd.DataFrame(regr.coef_, columns=['coef'], index=features.columns)","4476f7cb":"# Model 1: log charges \ndata_log = data.drop(['age_category', 'bmi_category'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)\n\nX_incl_const_log_target =sm.add_constant(X_train)\nmodel = sm.OLS(y_train, X_incl_const_log_target) \nresults_log_target = model.fit() \nround(results_log_target.pvalues, 3)","fc67033a":"# Model 2 log target with categorical bmi \ndata_log = data.drop(['age_category', 'bmi'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)\n\nX_incl_const_categorical_bmi =sm.add_constant(X_train)\nmodel = sm.OLS(y_train, X_incl_const_categorical_bmi) \nresults_categorical_bmi = model.fit() \nround(results_categorical_bmi.pvalues, 3)","9ff93795":"variance_inflation_factor(exog=np.asanyarray(X_incl_const_log_target), exog_idx=1)","6c6b3dba":"vifs_log_target = [variance_inflation_factor(exog=np.asanyarray(X_incl_const_log_target), exog_idx=i) \n        for i in range(len(X_incl_const_log_target.columns))]\n\nvifs_categorical = [variance_inflation_factor(exog=np.asanyarray(X_incl_const_categorical_bmi), exog_idx=i) \n        for i in range(len(X_incl_const_categorical_bmi.columns))]\n\npd.DataFrame(np.asanyarray([np.asanyarray(vifs_log_target).\n                            reshape(1,7), np.asanyarray(vifs_categorical).reshape(1,7)]).reshape(2,7),\n            columns=X_incl_const_log_target.columns, index=['Just Log Charges', 'Log Charges and Categorical BMI']\n            )","1d98ed0f":"dict_results = dict({\n    'Log Charges': {\n        'R-Squared': round( results_log_target.rsquared,3),\n        'BIC': round(results_log_target.bic, 3)\n    },\n    'Log Charges with Categorical BMI': {\n        'R-Squared': round( results_categorical_bmi.rsquared,3),\n        'BIC': round(results_categorical_bmi.bic, 3)\n    }\n})","5e93457c":"# Model 3 log charges without sex\ndata_log = data.drop(['age_category', 'bmi_category', 'sex'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)\n\nX_incl_const_witout_sex =sm.add_constant(X_train)\nmodel = sm.OLS(y_train, X_incl_const_witout_sex) \nresults_witoutsex = model.fit() \nround(results_witoutsex.pvalues, 3)\n\ndict_results['Log Charges Without Sex'] = {\n        'R-Squared': round( results_witoutsex.rsquared,3),\n        'BIC': round(results_witoutsex.bic, 3)\n    }","a1756722":"pd.DataFrame(dict_results)","362e2ff5":"# Predicted charges vs Actual Charges for Final Model \n\ndata_log = data.drop(['age_category', 'bmi_category', 'sex'], axis=1) \n\nlog_target = data_log['charges']\nfeatures = data_log.drop(['charges'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(features, log_target, test_size=0.2)\n\nregr = LinearRegression().fit(X_train, y_train) \n\npredicted_values = pd.Series(regr.predict(X_train))\ncorr = np.round(y_train.corr(predicted_values), 3)\n\nplt.figure(figsize=(10,6))\n\nplt.scatter(x=predicted_values, y=y_train)\nplt.plot(y_train, y_train, c='red')\nplt.title(f\"Predicted log prices vs Actual Log prices {corr}\", fontsize=14)\nplt.xlabel('Predicted Price',fontsize=14)\nplt.ylabel('Actual Price', fontsize=14) \n\n\n# residual vs predicted values \nplt.figure(figsize=(10,6))\ny = np.asanyarray(y_train)\ny_hat = np.asanyarray(predicted_values)\nresi = y - y_hat\nresi_mean = round(np.average(resi), 5)\nplt.scatter(x=predicted_values, y=resi, c=\"skyblue\",alpha=0.7)\nplt.ylabel('Residual', fontsize=14)\nplt.xlabel('Predicted Values', fontsize=14)\nplt.title(\"Residual vs Predicted Values\", fontsize=14)\n\n\nplt.figure(figsize=(10,6))\nsns.distplot(resi)\nplt.title(f'The Distribution of the Residuals Skew:{round(pd.Series(resi).skew(), 2)} Residual Mean {resi_mean}', fontsize=14)\n\nplt.show() ","00c18d81":"# Model Evaluation\n\n   ## P-Value  ","ca23f716":"## Improve Dataset ","b673b5c3":"# 5. Smoker Analysis","754ce7e6":"We got something, We clearly see that there is a relationship between obese who are smoker and charges. \nOtherside, the people that are smoker get significantly charged more than other people.\n\nLet's try to see this relationship","fb01dbab":"# Regression Residual Analyse","a639f142":"## Training & Test Dataset Split, Creation The First Model","89bf7642":"* You can infer it. You see that smoker young people spend more charges than others. \n* So We see the relationship with age, smoker and ofcourse charges","e14ac64a":"We can easily say that smoking is a characteristic that definitely affects patient's charges. ","76ae4898":"### The Linear Model assumption as follows\n\n1. Actual vs predicted plot is curve so that linear assumption fails.\n2. The residual mean is zero and residual distribution is skew 1.58. \n4. Error will insease after certian point because of curve.\n5. Variance inflation factor value for all of the features is less than 5, so there is no multicollearity.","48daca28":"#  Model Simplification & the BIC","cce330a0":"* We'll be using Linear Regression tech. So we want our features to be numerical. For this, we have to look at our categorical data. ","c93afc77":"* If VIF is greater that 10, it might be a problem for a feature. But you can see abowe there is not. ","641c6ae1":"# 4. bmi Analysis","d73ffa25":"# 4. Children Analysis\n","90ae6e1b":"We use the age feature more useful as a categorical variable, \nLet me think, If we had three category for example, Young-Senior-Elder people, It would be a good thing or a bad thing ? \n\nLet's see this!  \n\n* <b> Assume that,  <\/b>\n* Young Adult: from 18 - 35 \n* Senior Adult: from 36 - 55 \n* Elder: 56 or older ","2fd34e2e":"### Let's find out BMI statusses relationship with age and smoke","98287a3a":"* You see that the old people spend more charges than others. ","96905f13":" Pearson's correlation coefficient is a measure of the strength of the association between the two continuous variables. You shouldn't consider categorical variables like dummy var. ","b8073e5d":"# c. Multicollinearity\n\n* Actually, We didn't suspect multicollinearity because of our correlatin table. \n* If two or more variable were higly related to one another, they wouln't provide unique or independent information for our model. \n* But we're gonna look at it with VIF. \n* VIF(Variation Inflation Factor). ","b845f6c8":"### <\/br> [Weight Status](https:\/\/www.cdc.gov\/healthyweight\/assessing\/bmi\/adult_bmi\/index.html)\n\n* Underweight: BMI is less than 18.5\n* Normal weight: BMI is 18.5 to 24.9\n* Overweight: BMI is 25 to 29.9\n* Obese: BMI is 30 or more","f4b1b4c9":"Now, We are sure that smoker feature has a certain impact on charges and also mostly we see this effect on obese people.","6237f4b2":"* Now, We have two different model. \n    1. Using log charges \n    2. Using log charges with categorical bmi without bmi feature.\n    \n* And we saw their R-Squared score. Let's evaluate our models to imrove them. ","c2ecec0f":"### Improve Dataset \n\n* Let's add our finding to the dataset. \n* We can use them for another section. ","1e7d2bec":"# 6. Region Analysis","c2ad8a5d":"Actually, it looks like a pattern. We see it clearly, we'll analyze it.","4e6c9d42":"# Gather Data and Question \n\nIn this work, I am going to be working on a model that can give us an approximation as to what will be the charges of the patients. Step by step, we'll try to understand what this data is and what this data tries to explain to us. We'll go deep deeply into the dataset's features and analyse lots of things. ","94480f1e":"## 3. Sex Analysis \n* We should do it dummy variable first. ","711320f1":"## 2. Age Analysis ","f8f1e183":"## Correlation with Pearson Method\n\n## $$ \\rho _{XY} = corr(X,Y)$$\n## $$ -1.0 \\leq \\rho _{XY} \\leq +1.0 $$","0a0872a7":"# Visualising Data \n   \n   ## 1. The Distribution of Medical Charges \n   * The Distribution of Medical Charges has a left skewed disribution. \n   * In order to do it better, we can consider data transformation for this feature. For example Log Transformation ","2bb2732b":"# Imports"}}