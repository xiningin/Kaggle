{"cell_type":{"c0d23b67":"code","dde83212":"code","d8c40023":"code","675956a5":"code","89a410d2":"code","7ed31569":"code","a134572b":"code","75af5e72":"code","ae336641":"code","61298c60":"code","4eb0d968":"code","6643ebc9":"code","6b2e3033":"code","98207b7e":"code","9559230d":"code","acc72740":"code","f0cf2a3d":"code","5c727f25":"code","c3f031a9":"code","aca5b85a":"code","14da0c32":"code","95ac024b":"code","64ebf99b":"code","e67b82ec":"code","de785a7a":"code","335fc0b8":"code","44fca85b":"code","58b4068d":"code","1ab9950b":"code","7a5a42ee":"code","39f4899b":"code","2645b23a":"markdown","2ee708ae":"markdown","f222dd1b":"markdown","0011d5cd":"markdown","d9f42fbd":"markdown","b42c67e3":"markdown","fc7db90c":"markdown","fea038cf":"markdown","3d9b9a34":"markdown","abb96fcd":"markdown"},"source":{"c0d23b67":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","dde83212":"data = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","d8c40023":"data","675956a5":"data.isnull().sum()","89a410d2":"data = data.drop('img_name', axis=1)","7ed31569":"{column: list(data[column].unique()) for column in ['gender', 'ethnicity', 'age']}","a134572b":"data['age'] = pd.qcut(data['age'], q=4, labels=[0, 1, 2, 3])","75af5e72":"data","ae336641":"print(len(data['pixels'][0].split(' ')))\nprint(np.sqrt(2304))","61298c60":"num_pixels = 2304\nimg_height = 48\nimg_width = 48","4eb0d968":"target_columns = ['gender', 'ethnicity', 'age']\n\ny = data[target_columns]\nX = data.drop(target_columns, axis=1)","6643ebc9":"y","6b2e3033":"X","98207b7e":"X = pd.Series(X['pixels'])\nX = X.apply(lambda x: x.split(' '))\nX = X.apply(lambda x: np.array(list(map(lambda z: np.int(z), x))))\nX = np.array(X)\nX = np.stack(np.array(X), axis=0)\nX = np.reshape(X, (-1, 48, 48))\n\nX.shape","9559230d":"plt.figure(figsize=(10, 10))\n\nfor index, image in enumerate(np.random.randint(0, 1000, 9)):\n    plt.subplot(3, 3, index + 1)\n    plt.imshow(X[image])\n    plt.axis('off')\n\nplt.show()","acc72740":"y","f0cf2a3d":"y_gender = np.array(y['gender'])\ny_ethnicity = np.array(y['ethnicity'])\ny_age = np.array(y['age'])","5c727f25":"X.shape","c3f031a9":"def build_model(num_classes, activation='softmax', loss='sparse_categorical_crossentropy'):\n    \n    inputs = tf.keras.Input(shape=(img_height, img_width, 1))\n    x = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255)(inputs)\n    x = tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu')(x)\n    x = tf.keras.layers.MaxPooling2D()(x)\n    x = tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu')(x)\n    x = tf.keras.layers.MaxPooling2D()(x)\n    x = tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu')(x)\n    x = tf.keras.layers.MaxPooling2D()(x)\n    x = tf.keras.layers.Flatten()(x)\n    x = tf.keras.layers.Dense(128, activation='relu')(x)\n    outputs = tf.keras.layers.Dense(num_classes, activation=activation)(x)\n    \n    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    \n    \n    model.compile(\n        optimizer='adam',\n        loss=loss,\n        metrics=['accuracy']\n    )\n    \n    return model","aca5b85a":"{column: list(data[column].unique()) for column in ['gender', 'ethnicity', 'age']}","14da0c32":"X_gender_train, X_gender_test, y_gender_train, y_gender_test = train_test_split(X, y_gender, train_size=0.7)\nX_ethnicity_train, X_ethnicity_test, y_ethnicity_train, y_ethnicity_test = train_test_split(X, y_ethnicity, train_size=0.7)\nX_age_train, X_age_test, y_age_train, y_age_test = train_test_split(X, y_age, train_size=0.7)","95ac024b":"gender_model = build_model(1, activation='sigmoid', loss='binary_crossentropy')\n\ngender_history = gender_model.fit(\n    X_gender_train,\n    y_gender_train,\n    validation_split=0.2,\n    batch_size=64,\n    epochs=7,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()],\n    verbose=0\n)","64ebf99b":"fig = px.line(\n    gender_history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Gender Model\"\n)\n\nfig.show()","e67b82ec":"gender_acc = gender_model.evaluate(X_gender_test, y_gender_test)[1]","de785a7a":"ethnicity_model = build_model(5, activation='softmax', loss='sparse_categorical_crossentropy')\n\nethnicity_history = ethnicity_model.fit(\n    X_ethnicity_train,\n    y_ethnicity_train,\n    validation_split=0.2,\n    batch_size=64,\n    epochs=8,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()],\n    verbose=0\n)","335fc0b8":"fig = px.line(\n    ethnicity_history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Ethnicity Model\"\n)\n\nfig.show()","44fca85b":"ethnicity_acc = ethnicity_model.evaluate(X_ethnicity_test, y_ethnicity_test)[1]","58b4068d":"age_model = build_model(4, activation='softmax', loss='sparse_categorical_crossentropy')\n\nage_history = age_model.fit(\n    X_age_train,\n    y_age_train,\n    validation_split=0.2,\n    batch_size=64,\n    epochs=7,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()],\n    verbose=0\n)","1ab9950b":"fig = px.line(\n    age_history.history,\n    y=['loss', 'val_loss'],\n    labels={'index': \"Epoch\", 'value': \"Loss\"},\n    title=\"Age Model\"\n)\n\nfig.show()","7a5a42ee":"age_acc = age_model.evaluate(X_age_test, y_age_test)[1]","39f4899b":"fig = px.bar(\n    x=[\"Gender\", \"Ethnicity\", \"Age\"],\n    y=[gender_acc, ethnicity_acc, age_acc],\n    labels={'x': \"\", 'y': \"Accuracy\"},\n    color=[\"Gender\", \"Ethnicity\", \"Age\"],\n    title=\"Model Performance\"\n)\n\nfig.show()","2645b23a":"# Getting Started","2ee708ae":"## Age Model","f222dd1b":"# Results","0011d5cd":"# Preprocessing","d9f42fbd":"## Ethnicity Model","b42c67e3":"## Gender Model","fc7db90c":"# Visualization","fea038cf":"# Task for Today  \n***\n## Gender, Ethnicity, and Age Classification  \n\nGiven the face image data, let's see if we can correctly classify the **gender**, **ethnicity**, and **age** of a person.  \n  \nWe will use three different TensorFlow CNNs to make our predictions.","3d9b9a34":"# Training","abb96fcd":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/JuX3Rk7j554"}}