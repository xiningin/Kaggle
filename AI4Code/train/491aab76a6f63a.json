{"cell_type":{"2c9d124c":"code","6f1f37ed":"code","0f649ada":"code","048c9dfc":"code","ddc04263":"code","47cfdcbe":"code","74973b63":"code","52cde586":"code","04f47da4":"code","07289784":"code","956d84ec":"code","c564f479":"code","856162bf":"code","ad4984bc":"code","e3d23783":"code","d0a677e6":"code","fc48bd99":"code","6466fbc0":"code","612bdf76":"code","c641f50f":"code","9e129611":"code","e0ccb7da":"code","99e83a8d":"code","dc78ecff":"markdown","2257abc2":"markdown","b48046b0":"markdown","3ea6cfbb":"markdown","2bfc8559":"markdown","35f19846":"markdown","b7aba2d1":"markdown","846d2ef6":"markdown","40986d97":"markdown","1990e392":"markdown","569b2216":"markdown","f749a810":"markdown","74399191":"markdown","5aeda28d":"markdown","0424fbb7":"markdown","2791849c":"markdown","6ca7adca":"markdown","16334aef":"markdown","85f36c3d":"markdown","86d7e279":"markdown"},"source":{"2c9d124c":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly\nplotly.offline.init_notebook_mode()\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\nfrom scipy.stats import kurtosis, skew\nfrom scipy import stats\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nsns.set_context(\"paper\")\nplt.style.use('seaborn')","6f1f37ed":"df = pd.read_csv('..\/input\/wine-reviews\/winemag-data-130k-v2.csv', index_col=[0])","0f649ada":"class color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'\n\ndef DataDesc(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\ndef CalOutliers(df_num): \n    '''\n    \n    Leonardo Ferreira 20\/10\/2018\n    Set a numerical value and it will calculate the upper, lower and total number of outliers\n    It will print a lot of statistics of the numerical feature that you set on input\n    \n    '''\n    # calculating mean and std of the array\n    data_mean, data_std = np.mean(df_num), np.std(df_num)\n\n    # seting the cut line to both higher and lower values\n    # You can change this value\n    cut = data_std * 3\n\n    #Calculating the higher and lower cut values\n    lower, upper = data_mean - cut, data_mean + cut\n\n    # creating an array of lower, higher and total outlier values \n    outliers_lower = [x for x in df_num if x < lower]\n    outliers_higher = [x for x in df_num if x > upper]\n    outliers_total = [x for x in df_num if x < lower or x > upper]\n\n    # array without outlier values\n    outliers_removed = [x for x in df_num if x > lower and x < upper]\n    \n    print(color.BOLD+f'Lower outliers: {len(outliers_lower)}'+ color.END) # printing total number of values in lower cut of outliers\n    print(color.BOLD+f'Upper outliers: {len(outliers_higher)}'+ color.END) # printing total number of values in higher cut of outliers\n    print(color.BOLD+f'Total outliers: {len(outliers_total)}'+ color.END) # printing total number of values outliers of both sides\n    print(color.BOLD+f'Non - outliers: {len(outliers_removed)}'+ color.END) # printing total number of non outlier values\n    print(color.BOLD+f'% of Outliers : {round((len(outliers_total) \/ len(outliers_removed) )*100, 4)}'+ color.END ) # Percentual of outliers in points","048c9dfc":"DataDesc(df)","ddc04263":"display(df['points'].describe())\n\nfig = plt.figure(figsize=(20,5))\nplt.suptitle('Points Distribution', fontsize=30)\nax1 = fig.add_subplot(121)\n_ = sns.countplot(data=df, x='points', color='#963559', ax=ax1)\n#_ = ax1.set_title('Points Distribution', fontsize=30)\n_ = ax1.set_ylabel('Count', fontsize=20)\n_ = ax1.set_xlabel('Points', fontsize=20)\n\n\nax2 = fig.add_subplot(122)\n_ = plt.scatter(range(df.shape[0]), np.sort(df.points.values), color='#38A585')\n#_ = ax1.set_title('Points Distribution', fontsize=30)\n_ = ax2.set_ylabel('Points', fontsize=20)\n_ = ax2.set_xlabel('Total', fontsize=20)\n\nprint(\"\\n\")\ndisplay(CalOutliers(df['points']))","47cfdcbe":"display(df['price'].describe())\n\nfig = plt.figure(figsize=(20,5))\nplt.suptitle('Price Distribution', fontsize=30)\nax1 = fig.add_subplot(121)\n_ = sns.distplot(np.log(df['price'].dropna()), color='#963559', ax=ax1)\n#_ = ax1.set_title('Points Distribution', fontsize=30)\n_ = ax1.set_ylabel('Frequency Log', fontsize=20)\n_ = ax1.set_xlabel('Price(log)', fontsize=20)\n\n\nax2 = fig.add_subplot(122)\n_ = plt.scatter(range(df.shape[0]), np.sort(df.price.values), color='#38A585')\n#_ = ax1.set_title('Points Distribution', fontsize=30)\n_ = ax2.set_ylabel('Price', fontsize=20)\n_ = ax2.set_xlabel('Total', fontsize=20)\n\nprint(\"\\n\")\ndisplay(CalOutliers(df['price']))","74973b63":"df['price_log'] = np.log(df['price'])\n_ = sns.jointplot(data=df, x='price_log', y='points', color='#963559')","52cde586":"country_group = df.groupby('country').size().rename('Wines').reset_index()\nfig = px.pie(country_group, \n             values='Wines', names='country', \n             color_discrete_sequence=px.colors.sequential.RdBu,\n            title='Country wise distribution of Wine Samples',\n            width=800,\n            height=500)\n\nfig.update_layout(\n    margin=dict(l=25, r=20, t=30, b=50),\n    paper_bgcolor=\"#ECEFF9\",\n)\nfig.show()","04f47da4":"groups = df.groupby('country').filter(lambda x: len(x) >= 100).reset_index()\n\nprint('Average points = ', np.nanmean(list(groups.points)))\n\nlayout = {'title' : 'Wine Ratings across major Countries',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Points'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.points)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.points)),\n              'line': { 'dash': 'dashdot'},\n              'line_color': '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.country==country]['points'], \n    'type':'violin',\n    'name' : country,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,country in enumerate(list(set(groups.country)))]\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","07289784":"groups = df.groupby('country').filter(lambda x: len(x) >= 100).reset_index()\n\nprint('Average Price = ', np.nanmean(list(groups.price)))\n\nlayout = {'title' : 'Wine Prices across major Countries',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Price'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.price)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.price)),\n              'line': { 'dash': 'dashdot'},\n              'line_color' : '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.country==country]['price'], \n    'type':'violin',\n    'name' : country,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,country in enumerate(list(set(groups.country)))]\n\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","956d84ec":"cnt = df.groupby(['country','points'])['price'].agg(['count','min','max','mean']).sort_values(by='mean',ascending=False)[:10]\ncnt.reset_index(inplace=True)\ncnt.style.background_gradient(cmap='PuBuGn',high=0.5)","c564f479":"variety_group = df.groupby('variety').size().rename('Wines').reset_index()\n\nfamous_variety_group = variety_group.query('Wines > 1500').sort_values(by='Wines', ascending=False)\n\nfig  = px.bar(data_frame=famous_variety_group, x='variety', y='Wines', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_layout(width=900, height=350, title= {'text': \"Famous Varities of Wine samples\",\n                                                'y':0.95,'x':0.5,\n                                                'xanchor': 'center','yanchor': 'top'},\n                 margin = dict(l=25, r=10, t=35, b=10))","856162bf":"groups = df.groupby('variety').filter(lambda x: len(x) >= 1500).reset_index()\n\nprint('Average points = ', np.nanmean(list(groups.points)))\n\nlayout = {'title' : 'Wine Ratings of Famous Varieties',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Points'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.points)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.points)),\n              'line': { 'dash': 'dashdot'},\n              'line_color': '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.variety==variety]['points'], \n    'type':'violin',\n    'name' : variety,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,variety in enumerate(list(set(groups.variety)))]\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","ad4984bc":"groups = df.groupby('variety').filter(lambda x: len(x) >= 1500).reset_index()\n\nprint('Average price = ', np.nanmean(list(groups.points)))\n\nlayout = {'title' : 'Wine Prices from Famous Varieties',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Prices'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.price)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.price)),\n              'line': { 'dash': 'dashdot'},\n              'line_color': '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.variety==variety]['price'], \n    'type':'violin',\n    'name' : variety,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,variety in enumerate(list(set(groups.variety)))]\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","e3d23783":"taster_group = df.groupby('taster_name').size().rename('Wines').reset_index()\n\nfamous_taster_group = taster_group.query('Wines > 800').sort_values(by='Wines', ascending=False)\n\nfig  = px.bar(data_frame=famous_taster_group, x='taster_name', y='Wines', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_layout(width=900, height=350, title= {'text': \"Famous Tasters\",\n                                                'y':0.95,'x':0.5,\n                                                'xanchor': 'center','yanchor': 'top'},\n                 margin = dict(l=25, r=10, t=35, b=10))","d0a677e6":"groups = df.groupby('taster_name').filter(lambda x: len(x) >= 800).reset_index()\n\nprint('Average points = ', np.nanmean(list(groups.points)))\n\nlayout = {'title' : 'Wine Ratings by Famous Tasters',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Points'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.points)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.points)),\n              'line': { 'dash': 'dashdot'},\n              'line_color': '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.taster_name==taster]['points'], \n    'type':'violin',\n    'name' : taster,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,taster in enumerate(list(set(groups.taster_name)))]\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","fc48bd99":"groups = df.groupby('taster_name').filter(lambda x: len(x) >= 800).reset_index()\n\nprint('Average price = ', np.nanmean(list(groups.price)))\n\nlayout = {'title' : 'Wine Prices by Famous Tasters',\n        'xaxis': {'tickangle':-40},\n        'yaxis': {'title': 'Prices'},\n        'margin': dict(l=25, r=10, t=30, b=10),\n          'width' : 900,\n          'height' : 350,\n          'plot_bgcolor': '#ECEFF9',\n          'shapes': [{\n              'type' :'line',\n              'x0': -.5,\n              'y0': np.nanmean(list(groups.price)),\n              'x1': 19,\n              'y1': np.nanmean(list(groups.price)),\n              'line': { 'dash': 'dashdot'},\n              'line_color': '#38A585'\n          }]\n          }\n\ndata = [{\n    'y': df[df.taster_name==taster]['price'], \n    'type':'violin',\n    'name' : taster,\n    'showlegend':False,\n    'fillcolor' : '#963559',\n    'line_color': '#963559'\n    #'marker': {'color': 'Set2'}\n    } for i,taster in enumerate(list(set(groups.taster_name)))]\n\n\nplotly.offline.iplot({'data': data, 'layout': layout})","6466fbc0":"from wordcloud import WordCloud, STOPWORDS\n\nstopwords = set(STOPWORDS)\n\nnewStopWords = ['fruit', \"Drink\", \"black\", 'wine', 'drink', 'flavor']\n\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n    background_color='white',\n    stopwords=stopwords,\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(df['description'].astype(str)))\n\nprint(wordcloud)\nfig = plt.figure(figsize = (12,14))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - DESCRIPTION\",fontsize=25)\nplt.axis('off')\nplt.show()","612bdf76":"wordcloud = WordCloud(\n    background_color='white',\n    stopwords=stopwords,\n    max_words=300,\n    max_font_size=200, \n    width=1000, height=800,\n    random_state=42,\n).generate(\" \".join(df['title'].astype(str)))\n\nprint(wordcloud)\nfig = plt.figure(figsize = (12,14))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - Title\",fontsize=25)\nplt.axis('off')\nplt.show()","c641f50f":"\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nimport matplotlib.gridspec as gridspec\n\n\n# Top 10 countries based on number of wine samples\ncountry_list = df.groupby('country').size().rename('Count').reset_index().sort_values(by='Count', ascending=False)[:10]['country']\n\ngrid = gridspec.GridSpec(5, 2)\nplt.figure(figsize=(16,7*4))\n\nfor n, cat in enumerate(country_list):\n    \n    ax = plt.subplot(grid[n])   \n\n    vectorizer = TfidfVectorizer(ngram_range = (2, 3), min_df=5, \n                                 stop_words='english',\n                                 max_df=.5) \n    \n    X2 = vectorizer.fit_transform(df.loc[(df.country == cat)]['description']) \n    features = (vectorizer.get_feature_names()) \n    scores = (X2.toarray()) \n    \n    # Getting top ranking features \n    sums = X2.sum(axis = 0) \n    data1 = [] \n    \n    for col, term in enumerate(features): \n        data1.append( (term, sums[0,col] )) \n\n    ranking = pd.DataFrame(data1, columns = ['term','rank']) \n    words = (ranking.sort_values('rank', ascending = False))[:15]\n    \n    sns.barplot(x='term', y='rank', data=words, ax=ax, \n                color='#38A585', orient='v')\n    ax.set_title(f\"N-Grams for : {cat}\", fontsize=19)\n    ax.set_xticklabels(ax.get_xticklabels(),rotation=90, color='#963559')\n    ax.set_ylabel(' ')\n    ax.set_xlabel(\" \")\n\n    \nplt.suptitle(\"Top 15 N-Grams based on Wine's Description\", fontsize=23)\nplt.subplots_adjust(top = 0.95, hspace=.9, wspace=.1)\n\nplt.show()","9e129611":"from sklearn.neighbors import NearestNeighbors\nfrom scipy.sparse import csr_matrix\nfrom sklearn.decomposition import TruncatedSVD\n\ndata_recommend = df[['province','variety','points']]\ndata_recommend.dropna(axis=0, inplace=True)\ndata_recommend.drop_duplicates(['province','variety'], inplace=True)\n\ndata_pivot = data_recommend.pivot(index= 'variety',columns='province',values='points').fillna(0)\ndata_matrix = csr_matrix(data_pivot)","e0ccb7da":"knn = NearestNeighbors(n_neighbors=10, algorithm= 'brute', metric= 'cosine')\nmodel_knn = knn.fit(data_matrix)","99e83a8d":"for n in range(5):\n    query_index = np.random.choice(data_pivot.shape[0])\n    #print(n, query_index)\n    distance, indice = model_knn.kneighbors(data_pivot.iloc[query_index].values.reshape(1,-1), n_neighbors=6)\n    for i in range(0, len(distance.flatten())):\n        if  i == 0:\n            print('Recmmendation for ## {0} ##:'.format(data_pivot.index[query_index]))\n        else:\n            print('{0}: {1} with distance: {2}'.format(i,data_pivot.index[indice.flatten()[i]],distance.flatten()[i]))\n    print('\\n')","dc78ecff":"### Let's introduce countries","2257abc2":"* Percentage of outliers in Points feature is less than 0.1%\n* The distribution of points is similar to normal distribution and the range is between 80 to 100\n* There are more than 110k(out of 130k) samples of wines having points between 84 and 94\n* Lower bound outliers is 0 which can also be interpreted from the left plot","b48046b0":"## Exploring Different varieties of Wine & building a Recommender System based on a particular Variety\n\n\n![image.png](attachment:image.png)","3ea6cfbb":"### Frequently occuring Word Pairs\/Triplets in description","2bfc8559":"* Bordeaux-style Red Blend has some of the most expensive wines followed by Pinot noir\n* From above two plots(price & points), we can say that these two varieties are quite exclusive based on ratings(More than 50% samples have ratings above 90) and price.","35f19846":"### Coming finally to Tasters","b7aba2d1":"### Price description and Outliers","846d2ef6":"### 1. Reading Data","40986d97":"### Price vs Points","1990e392":"### Choosing 5 random varities and recommending top 6 neighbours","569b2216":"### Recommender System\n* Recommending top 5 matches of varities of wine\n* we will be using features province and points to recommend the different varieties of wine","f749a810":"### Points description and Outliers","74399191":"* Price feature can be converted to Normal Distribution\n* Prices can go higher than 3000\n* Around 120k samples have price below 250\n* There is now lower bound of outliers in the price values\n* Total outliers is less than 1%","5aeda28d":"* Almost all of the famous Wine Varieties have more than 50% samples with better ratings\n* Also many samples having rating more than 95 fall in these varieties","0424fbb7":"* Austria, Israel, Canada and Germany have more than 50% wine samples having Points greater 90.\n* More than 50% of Wine Samples from Chile and Romania have ratings less than 86 points\n* Some of the Wine samples from Italy, Portugal, US, Australia and France have ratings more than 97","2791849c":"### Description","6ca7adca":"* The general trend is that the higher rated wines are more expensive. But this is strictly not true.\n* There are many samples of wines(Low to medium price) having ratings between 95 to 90","16334aef":"### Next topic -  Variety!","85f36c3d":"* Most of the expensive samples are from France","86d7e279":"* Wine samples majorly are from USA followed by France, Italy, Spain and Portudal\n* There are around 54k,22k,19k,6k,5k samples from USA, France, Italy, Spain and Portudal respectively\n* Less than 50 samples are from Moldova,Brazil,Egypt,China,India, etc (17 countries)"}}