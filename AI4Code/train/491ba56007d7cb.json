{"cell_type":{"094bb8b4":"code","6e3850f9":"code","fb745244":"code","37dbfede":"code","7295a2fb":"code","efbcca88":"code","1a43ffb1":"code","7df14331":"code","7fe51ef5":"code","a704067f":"code","26646094":"code","8af0f190":"markdown","f10a9d0b":"markdown","2db8d05e":"markdown"},"source":{"094bb8b4":"import pandas as pd\nimport os","6e3850f9":"# Typing ftw\nfrom typing import List\n\nimport requests # For scraping from original source\nimport re # To pull out specific URLs in scraping\nimport time # Timing functions calls\nfrom zipfile import ZipFile # Creating compressed files","fb745244":"# Flag to run with debugging information (printouts)\nDEBUG = False","37dbfede":"def get_origin_destination_urls(url_origin_destination: str = 'http:\/\/64.111.127.166\/origin-destination', \n               ext: str ='csv.gz', use_full_path: bool = False, \n               printout: bool = False) -> List:\n    '''Return list of URLs of files (from given extension).\n        \n        Args: \n            url_origin_destination: Source to scrape file URLs from.\n            ext: Extension of files to search for (defaults \"csv.gz\").\n            use_full_path: Flag to return full path of files or relative path.\n            printout: Prints out information for basic debugging.\n    '''\n    \n    resp = requests.get(url_origin_destination)\n    # DEBUG\n    if printout:\n        print(resp.text)\n        \n    # Pattern to pull from HTML links for files\n    href_pattern = r'<a\\s+(?:[^>]*?\\s+)?href=([\"\\'])(\\S*\\.{})\\1+>'.format(ext)\n\n    # More efficient to compile (https:\/\/docs.python.org\/3\/library\/re.html#re.compile)\n    prog = re.compile(href_pattern)\n    file_group_list = prog.findall(resp.text)\n\n    # Decide to return full path in list of files\n    file_list = [group[-1] for group in file_group_list]\n    if use_full_path:\n        return [f'{url_origin_destination}\/{fname}' for fname in file_list]\n    else:\n        return file_list\n    ","7295a2fb":"# Example usage\nif DEBUG:\n    csv_list = get_origin_destination_urls(use_full_path=True)\n    df = pd.read_csv(csv_list[0], \n                     names=['Date','Hour','Origin Station','Destination Station','Trip Count']\n                    )","efbcca88":"# Retrieve the README (also will grab all other `txt`) files\ntxt_list = get_origin_destination_urls(use_full_path=True, ext='txt')\nfor txt_url in txt_list:\n    resp_txt_urls = requests.get(txt_url)\n    # Remove HTML escaped spaces\n    export_fname = txt_url.split('\/')[-1].replace('%20','')\n    with open(export_fname,'wb') as f:\n        f.write(resp_txt_urls.content)","1a43ffb1":"# Directory for all data\ntry:\n    os.mkdir('ridership')\nexcept:\n    print('New directory not made')","7df14331":"# Using the definition of columns from \"READ ME.txt\"\ncol_names = ['Date','Hour','Origin Station','Destination Station','Trip Count']\n\n# Retrieve all CSVs (`csv.gz`)\ncsv_list = get_origin_destination_urls(use_full_path=True)","7fe51ef5":"def time_eval(func):\n    '''Simple timer decorator to printout the time a function runs.\n    '''\n    def timer_wrapper(*args, **kw):\n        start = time.time()\n        print(f'Starting {func.__name__} run...')\n        result = func(*args, **kw)\n        elapsed_time = time.time() - start\n        print(f'Time to run {func.__name__}: {elapsed_time:.1f} seconds')\n        return result\n    return timer_wrapper","a704067f":"@time_eval\ndef create_df(csv_fname, col_names):\n    '''Creates a DataFrame of using only keeping certain columns.\n    '''\n    df = pd.read_csv(csv_fname, names=col_names)\n    return df\n\n\n@time_eval\ndef create_data_files(list_of_csvs, col_names):\n    '''Create one zip file of all CSVs.\n    '''\n    for csv_fname in list_of_csvs:\n        print(f'\\t Adding {csv_fname} to zip archive')\n        df = create_df(csv_fname, col_names)\n        export_fname = csv_fname.split('\/')[-1].replace('.csv.gz','.csv')\n        csv_fname = f'ridership\/{export_fname}'\n        # Ignore the default index (useless for this dataset)\n        df.to_csv(index=False, path_or_buf=csv_fname)\n","26646094":"# Iterated over each URL to create a separate file (for each year) in archive\ncreate_data_files(csv_list, col_names)","8af0f190":"Bay Area Rapid Transit (BART) hourly ridership by origin-destination can be pulled from BART's provided source: https:\/\/www.bart.gov\/about\/reports\/ridership","f10a9d0b":"# Note:\n>This notebook was originally made to update data in [bart-ridership notebook](https:\/\/www.kaggle.com\/mrgeislinger\/bart-ridership). However, this notebook will no longer be updated (data up-to date to 2020-12-31).\n>\n> Instead to get most recent data, please see a similar replacement notebook [bartridership notebook](https:\/\/www.kaggle.com\/mrgeislinger\/bartridership).","2db8d05e":"# BART Hourly Ridership Data Downloader"}}