{"cell_type":{"73dd01bb":"code","184e8647":"code","670f06fc":"code","faf11122":"code","1422f818":"code","22d7b549":"code","3a15f9c0":"code","fb23115d":"code","d6ca3604":"code","7e16aedc":"code","d7a8a57c":"code","2882518b":"code","1b79f769":"code","73424557":"code","3edea040":"code","fd1b4356":"code","b8515542":"code","65b356be":"code","2eefe642":"markdown","0ade9c91":"markdown","9301df5c":"markdown","fbf06211":"markdown","a23f8ab2":"markdown","6ed3b1f6":"markdown","da9d1984":"markdown","c70a3847":"markdown"},"source":{"73dd01bb":"# \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom keras.preprocessing.image import ImageDataGenerator\nimport random\nimport keras.backend as K\nimport tensorflow as tf\n\nimport cv2\nfrom PIL import Image\n\ntrain_dir = '..\/input\/train\/'\ntest_dir = '..\/input\/test\/'","184e8647":"# \u4e71\u6570seed\u306e\u56fa\u5b9a (keras\u306e\u5b66\u7fd2\u7d50\u679c\u306e\u518d\u73fe\u6027\u78ba\u4fdd)\nos.environ['PYTHONHASHSEED'] = '0'\nnp.random.seed(1111)\nrandom.seed(1111)\n\nsession_conf = tf.ConfigProto(\n    intra_op_parallelism_threads=1,\n    inter_op_parallelism_threads=1\n)\n\ntf.set_random_seed(1111)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)","670f06fc":"# target size\nWIDTH = 128\nHEIGHT = 128\n\n# mini batch size\nBATCH_SIZE = 64\n\n# number of epoch\nNUM_EPOCH = 100","faf11122":"# \u5b66\u7fd2\u66f2\u7dda\u306e\u63cf\u753b\u95a2\u6570\ndef show_fit_result(history):\n    plt.figure(figsize=(16,4))\n    \n    # plot accuracy\n    plt.subplot(1,2,1)\n    plt.plot(history.history['acc'], label='trn_acc', marker='.')\n    plt.plot(history.history['val_acc'], label='val_acc', marker='.')\n    plt.title('Accuracy')\n    plt.legend()\n    \n    # plot loss\n    plt.subplot(1,2,2)\n    plt.plot(history.history['loss'], label='trn_loss', marker='.')\n    plt.plot(history.history['val_loss'], label='val_loss', marker='.')\n    plt.title('Crossentropy')\n    plt.legend()","1422f818":"# \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d, label\u60c5\u5831\u306e\u53d6\u5f97\ntrain_df = pd.read_csv('..\/input\/train_label.csv', dtype='str')\ntest_df = pd.read_csv('..\/input\/sample_submission.csv', dtype='str')\n\ndisplay(train_df.head())\ndisplay(test_df.head())","22d7b549":"#-----------------------------------------------#\n# ImageDataGenerator\n#   - \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f & \u6c34\u5897\u3057(Data Augmentation)\n#   - \u5b66\u7fd2\u6642\u306b\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n#     \u2192Data Augmentation\u3092\u884c\u3046\n#   - Augmentation\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u884c\u3046\u306e\u3067\u30e1\u30e2\u30ea\u3092\u5727\u8feb\u3057\u306a\u3044\n#   - \u3069\u306e\u3088\u3046\u306a\u5909\u63db\u3092\u3059\u308b\u304b\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u6307\u5b9a\u3059\u308b\n#-----------------------------------------------#\n\n# train\u30c7\u30fc\u30bf\u7528\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,              # \u753b\u50cf\u306e\u6b63\u898f\u5316\n    #rotation_range=5,             # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u56de\u8ee2 (\u5358\u4f4d\uff1a\u5ea6)\n    #width_shift_range=0.2,        # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u6c34\u5e73\u30b7\u30d5\u30c8 (\u753b\u50cf\u6a2a\u5e45\u306b\u5bfe\u3059\u308b\u5272\u5408\u3092\u6307\u5b9a)\n    #height_shift_range=0.2,       # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u5782\u76f4\u30b7\u30d5\u30c8 (\u753b\u50cf\u7e26\u5e45\u306b\u5bfe\u3059\u308b\u5272\u5408\u3092\u6307\u5b9a)\n    #zoom_range=[0.8, 1.1],        # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u62e1\u7e2e (\u4e0b\u9650, \u4e0a\u9650)\n    horizontal_flip=False,         # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u5de6\u53f3\u53cd\u8ee2\n    vertical_flip=False,           # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u4e0a\u4e0b\u53cd\u8ee2\n    #brightness_range=[0.5, 1.5],  # \u30e9\u30f3\u30c0\u30e0\u306b\u753b\u50cf\u3092\u8f1d\u5ea6\u5909\u63db (\u4e0b\u9650, \u4e0a\u9650)\n    #fill_mode='nearest',          # \u753b\u50cf\u5909\u63db\u6642\u306b\u751f\u3058\u305f\u7a7a\u767d\u90e8\u5206\u306e\u57cb\u3081\u65b9 (nearest\u306f\u8fd1\u508d\u5024\u3067\u57cb\u3081\u308b)\n    validation_split = 0.3         # validation\u30c7\u30fc\u30bf\u306e\u5272\u5408\n    )\n\n# test\u30c7\u30fc\u30bf\u7528\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\n","3a15f9c0":"#-----------------------------------------------#\n# ImageDataGenerator.flow_from_dataframe\n#   - DataFrame\u304b\u3089\u30c7\u30fc\u30bf\u751f\u6210\u7528\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u4f5c\u6210\n#\n#     dataframe  : \u8aad\u307f\u8fbc\u3080DataFrame\n#     directory  : \u5143\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\n#     x_col      : \u753b\u50cf\u540d\u3092\u8868\u3059column\n#     y_col      : \u30e9\u30d9\u30eb\u3092\u8868\u3059column\n#     target_size: \u6307\u5b9a\u3057\u305f\u753b\u50cf\u30b5\u30a4\u30ba\u306b\u30ea\u30b5\u30a4\u30ba\u3059\u308b\n#     batch_size : \u5b66\u7fd2\u6642\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n#     class_mode : \u554f\u984c\u8a2d\u5b9a  'binary'=\u4e8c\u5024\u5206\u985e\n#     shuffle    : \u753b\u50cf\u8aad\u307f\u8fbc\u307f\u9806\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\n#     seed       : \u4e71\u6570\u30b7\u30fc\u30c9\u5024\n#     subset     : train\u30c7\u30fc\u30bf\u304bvalid\u30c7\u30fc\u30bf\u304b\u3092\u6307\u5b9a\n#-----------------------------------------------#\n\n# train\u30c7\u30fc\u30bf\u7528\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\ntrain_generator = train_datagen.flow_from_dataframe(\n            dataframe=train_df,\n            directory=train_dir,\n            x_col='filename',\n            y_col='label',\n            target_size=(WIDTH,HEIGHT),\n            batch_size=BATCH_SIZE,\n            class_mode='binary',\n            shuffle=True,\n            seed=1111,\n            subset = \"training\"\n        )\n\n# valid\u30c7\u30fc\u30bf\u7528\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\nval_generator = train_datagen.flow_from_dataframe(\n            dataframe=train_df,\n            directory=train_dir,\n            x_col='filename',\n            y_col='label',\n            target_size=(WIDTH,HEIGHT),\n            batch_size=BATCH_SIZE,\n            class_mode='binary',\n            shuffle=True,\n            seed=1111,\n            subset = \"validation\"\n        )\n\n# test\u30c7\u30fc\u30bf\u7528\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\ntest_generator = test_datagen.flow_from_dataframe(\n            dataframe=test_df,\n            directory=test_dir,\n            x_col='filename',\n            y_col=None,\n            target_size=(WIDTH,HEIGHT),\n            batch_size=BATCH_SIZE,\n            class_mode=None,\n            shuffle=False,\n            seed=1111\n        )","fb23115d":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import Adam\nfrom keras.initializers import glorot_uniform\n\ndef CNN(input_shape, kernel_size, max_pooling_size, act_func, drop_ratio):\n    # input_shape      : \u5165\u529b\u6b21\u5143\u6570 \n    # kernel_size      : \u7573\u307f\u8fbc\u307f\u5c64\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\n    # max_pooling_size : Pooling\u5c64\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\n    # act_func         : \u4e2d\u9593\u5c64\u306e\u6d3b\u6027\u5316\u95a2\u6570\n    # drop_ratio       : Dropout\u306e\u5272\u5408\n    \n    # kernel initializers\n    gl_init = glorot_uniform(1111)\n    \n    # Sequential\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\n    model = Sequential()\n    \n    # \u7573\u307f\u8fbc\u307f\u5c64\u3001Pooling\u5c64\u3001Dropout\u306e\u8ffd\u52a0\n    model.add(Conv2D(64, kernel_size, padding='same', activation=act_func,\n                     input_shape=input_shape, kernel_initializer=gl_init))\n    model.add(MaxPool2D(pool_size=max_pooling_size))\n    model.add(Dropout(drop_ratio, seed=1111))\n    \n    # \u7573\u307f\u8fbc\u307f\u5c64\u3001Pooling\u5c64\u3001Dropout\u306e\u8ffd\u52a0\n    model.add(Conv2D(64, kernel_size, padding='same', activation=act_func,\n                     kernel_initializer=gl_init))\n    model.add(MaxPool2D(pool_size=max_pooling_size))\n    model.add(Dropout(drop_ratio, seed=1111))\n    \n    # \u7573\u307f\u8fbc\u307f\u5c64\u3001Pooling\u5c64\u3001Dropout\u306e\u8ffd\u52a0\n    model.add(Conv2D(64, kernel_size, padding='same', activation=act_func,\n                     kernel_initializer=gl_init))\n    model.add(MaxPool2D(pool_size=max_pooling_size))\n    model.add(Dropout(drop_ratio, seed=1111))\n\n    # 2\u6b21\u5143-->1\u6b21\u5143\u3078\u306e\u5909\u63db\n    model.add(Flatten())\n    \n    # \u5168\u7d50\u5408\u5c64\u306e\u8ffd\u52a0\n    model.add(Dense(128, activation=act_func, kernel_initializer=gl_init))\n    \n    # \u51fa\u529b\u5c64\n    model.add(Dense(1, activation='sigmoid', kernel_initializer=gl_init))\n    \n    return model","d6ca3604":"# optimizer\u306e\u521d\u671f\u5316\nopt_adam = Adam(lr=0.0001)\n\n# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nCNN_model = CNN(input_shape=(WIDTH,HEIGHT,3),\n                kernel_size=(3,3),\n                max_pooling_size=(2,2),\n                act_func='relu',\n                drop_ratio=0.5)\n\n# \u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nCNN_model.compile(optimizer=opt_adam, loss='binary_crossentropy', metrics=['accuracy'])\n\n# \u30e2\u30c7\u30eb\u60c5\u5831\u3092\u8868\u793a\nCNN_model.summary()","7e16aedc":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau, CSVLogger\n\n# \u5404Epoch\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3059callback\ncallbacks = []\n\n# \u5b66\u7fd2\u30ed\u30b0\u3092CSV\u306b\u66f8\u304d\u51fa\u3059\ncallbacks.append(CSVLogger('history.csv'))\n\n# --\u904e\u5b66\u7fd2\u9632\u6b62\u7528callback--\n# patience\u3067\u6307\u5b9a\u3057\u305fEpoch\u306e\u9593, monitor\u306e\u5024\u304c\u6539\u5584\u3057\u306a\u3051\u308c\u3070\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\ncallbacks.append(EarlyStopping(patience=8, monitor='val_acc'))\n\n# --\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u7528callback--\n# patience\u3067\u6307\u5b9a\u3057\u305fEpoch\u306e\u9593, monitor\u306e\u5024\u304c\u6539\u5584\u3057\u306a\u3051\u308c\u3070\n# \u73fe\u5728\u306e\u5b66\u7fd2\u7387\u306bfactor\u3092\u304b\u3051\u3066\u5b66\u7fd2\u3092\u7d99\u7d9a\u3059\u308b\ncallbacks.append(ReduceLROnPlateau(patience=3, monitor='val_acc',\n                                   factor=0.5, min_lr=0.00001, verbose=1))","d7a8a57c":"# \u5b66\u7fd2\u306e\u5b9f\u65bd\nhistory = CNN_model.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_generator),\n    epochs=NUM_EPOCH,\n    validation_data=val_generator,\n    validation_steps=len(val_generator),\n    callbacks=callbacks)","2882518b":"# \u5b66\u7fd2\u7d50\u679c\u306e\u8868\u793a\nshow_fit_result(history)","1b79f769":"# test\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\npreds = CNN_model.predict_generator(test_generator, steps=len(test_generator), verbose=1)","73424557":"# test\u30c7\u30fc\u30bf\u4e88\u6e2c\u7d50\u679c\u306e\u8868\u793a\nsns.distplot(np.reshape(preds, (-1,)))","3edea040":"# (\u53c2\u8003)\u4e0b\u8a18\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u4e88\u6e2c\u7d50\u679c\u306eCSV\u30d5\u30a1\u30a4\u30eb\u3092Commit\u306a\u3057\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n# https:\/\/www.kaggle.com\/rtatman\/download-a-csv-file-from-a-kernel\nfrom IPython.display import HTML\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)","fd1b4356":"# submission\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['label'] = np.reshape(preds, (-1,))\nsubmission.to_csv('submission.csv', index=False)","b8515542":"# (\u53c2\u8003)CSV\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u306e\u751f\u6210\ncreate_download_link(submission)","65b356be":"submission.head()","2eefe642":"### **\u53c2\u8003\u30ea\u30f3\u30af**\n- [ImageDataGenerator\uff5cKeras\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https:\/\/keras.io\/ja\/preprocessing\/image\/)  \n- [Keras\u306b\u3088\u308b\u30c7\u30fc\u30bf\u62e1\u5f35\uff5c\u4eba\u5de5\u77e5\u80fd\u306b\u95a2\u3059\u308b\u65ad\u5275\u9332](http:\/\/aidiary.hatenablog.com\/entry\/20161212\/1481549365)","0ade9c91":"----\n# Import, Config, Utilities\n\u307e\u305a\u521d\u3081\u306b\u4e0b\u8a18\u3092\u884c\u3044\u307e\u3059\u3002\n- \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306eImport\n- \u5404\u7a2eConfig (\u4e71\u6570seed\u8a2d\u5b9a, \u5b66\u7fd2\u30d1\u30e9\u30e1\u30bf...etc)\n- Utility\u95a2\u6570\u306e\u5b9a\u7fa9","9301df5c":"### **\u6ce8\u610f**\n\u4e0a\u8a18\u3067\u4e71\u6570seed\u3092\u56fa\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u306f\u5b9f\u9a13\u306e\u518d\u73fe\u6027\u304c\u5f97\u3089\u308c\u307e\u3059\u304c\u3001\u5b8c\u5168\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002  \n(kernel\u7de8\u96c6\u4e2d\u306e\u5b66\u7fd2\u7d50\u679c\u3068Commit\u5f8c\u306e\u5b66\u7fd2\u7d50\u679c\u304c\u5fae\u5999\u306b\u7570\u306a\u308b)  \n\u3053\u308c\u306fNVIDIA\u88fdGPU\u306b\u304a\u3051\u308b\u4e26\u5217\u8a08\u7b97\u51e6\u7406\u304c\u975e\u6c7a\u5b9a\u7684\u3067\u3042\u308b\u305f\u3081\u3067\u3059\u3002  \n\u672ckernel\u306e\u6700\u5f8c\u306b\u306fCommit\u306a\u3057\u3067\u4e88\u6e2c\u7d50\u679c\u306eCSV\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u65b9\u6cd5\u3082\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","fbf06211":"----\n# Create model","a23f8ab2":"# Dogs vs Cats Recognition: InClass\n\u3053\u308c\u306f [Dogs vs Cats Recognition: InClass](https:\/\/www.kaggle.com\/c\/dog-cat-recognition\/overview)\u306eBase kernel\u3067\u3059\u3002  \nPython\u306eDeep learning\u7528\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af keras \u3092\u4f7f\u7528\u3057\u3001\u57fa\u672c\u7684\u306aCNN\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002  \n\u307e\u305fkeras\u306e ImageDataGenerator \u3092\u4f7f\u7528\u3057\u3001\u753b\u50cf\u306e\u6c34\u5897\u3057 (Data Augmentation) \u3092\u884c\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002","6ed3b1f6":"----\n# Make submission","da9d1984":"----\n# Read Datasets & Data Augmentation\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3068\u3001ImageDataGenerator\u306b\u3088\u308b\u753b\u50cf\u6c34\u5897\u3057\u3092\u884c\u3044\u307e\u3059\u3002","c70a3847":"----\n# Train model"}}