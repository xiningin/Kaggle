{"cell_type":{"174e65a2":"code","f38281b9":"code","d22a5e17":"code","b4c110f4":"code","8895272c":"code","f808baa7":"code","04c27b37":"code","7c9ab2d0":"code","c270694c":"code","11d2d547":"code","75f13a7b":"code","4a6fa592":"code","97f3ee8d":"code","e8c5d4dd":"code","2f906884":"code","794ccea6":"code","fd5033c7":"code","6519bdf7":"code","9b8d0359":"code","bbb5138b":"code","43067a40":"code","f5c8d783":"code","091cd8c2":"code","f45850aa":"code","83c50dcf":"code","567e7599":"code","47b5016d":"code","a4bd4abf":"code","cb2152e8":"code","d862f015":"code","7013ffc1":"code","c3cd495f":"code","41c472a1":"code","086afcaf":"code","57a77a17":"code","640cb18a":"code","a44d83fb":"code","7dba2e36":"code","13fb1de0":"code","291df04c":"code","52e55b71":"code","f757a97e":"code","70dbd669":"code","09a90f10":"code","847b63b4":"code","0682e3e8":"code","3800608f":"code","cd232b3d":"code","3b2206b9":"code","83e2d34a":"code","552eac4d":"code","e55d5f72":"code","2b2d177e":"code","55b27aed":"code","32258a75":"code","910c0726":"code","ecccabf8":"code","4a542c77":"code","eac6e24d":"code","6a8a9c28":"code","4f45d93b":"code","8982d05e":"code","54144e23":"code","4274d35a":"code","1cf5fe2d":"code","d710d361":"code","dd5d2107":"code","cd03bc19":"code","bed48801":"code","fb9e43f9":"code","36ba0956":"code","1727f6ac":"code","7d8d7850":"code","78134b95":"markdown","c689f0a4":"markdown","9df1806e":"markdown","63ba56eb":"markdown","c8b9ded2":"markdown","6de1824e":"markdown","30c3f75a":"markdown","6e3eedef":"markdown","858a159d":"markdown","50db0d03":"markdown","ecaafee4":"markdown","2a9aec4a":"markdown","18f56891":"markdown","775325f7":"markdown","7f93608d":"markdown","c15041ee":"markdown","eb4d8b85":"markdown","c7e8ce5b":"markdown","f0f24ede":"markdown","1108ee1d":"markdown","aa0ed4ef":"markdown","5ab173b8":"markdown","3d372372":"markdown","00c4ba80":"markdown","6266afe4":"markdown","9c9824b6":"markdown","763e0644":"markdown","50658325":"markdown","4065ee79":"markdown","18c514a2":"markdown","5eb992ff":"markdown","7ea33c17":"markdown","d72bea6c":"markdown","ec49ef86":"markdown","34ef38dd":"markdown","72d2ddc8":"markdown","f6b3d6c4":"markdown","9539c6b9":"markdown","b1eb63db":"markdown","f814f709":"markdown","55c17aa1":"markdown","6c4c90c9":"markdown","89891f6f":"markdown","9a55b6a8":"markdown","3e9ed079":"markdown","5ed0a387":"markdown","c02e2ce7":"markdown","28d56478":"markdown","559a89d4":"markdown","5a8aac27":"markdown","d3a82a12":"markdown","bbdc41d9":"markdown","8533a5bc":"markdown","1be0c9a0":"markdown","3450a9b5":"markdown","4a87ee72":"markdown","f89e753b":"markdown","a8344c8d":"markdown","e356ec3d":"markdown","6b8cb26c":"markdown","b3931446":"markdown","e28db5a4":"markdown","ab16675b":"markdown","e55a7457":"markdown","2539dd34":"markdown","80106a0d":"markdown","27f2409c":"markdown","e9cc676f":"markdown","92145c47":"markdown","fc95a28a":"markdown","2a062902":"markdown","365925ba":"markdown","e747c7b2":"markdown","9747585d":"markdown","c8497fa6":"markdown","3127234f":"markdown","64667c5b":"markdown","ffdcdc48":"markdown","6e6b2113":"markdown","a71304cf":"markdown","8ce41f12":"markdown","08e27d2d":"markdown","db1f007a":"markdown","99b63720":"markdown","00ed2d58":"markdown","46371e0b":"markdown","263d0d7d":"markdown","1edba641":"markdown","e2fbf697":"markdown","75009cfd":"markdown","13921590":"markdown","ac9f79d2":"markdown","43b4407c":"markdown","0055b19b":"markdown","dfa76632":"markdown","bbae6122":"markdown","14b83c27":"markdown","eda902d3":"markdown","1216dec0":"markdown","c5cb4da3":"markdown","4c43906b":"markdown","ed3f4353":"markdown","caeeb436":"markdown","358eb928":"markdown","d4bab70b":"markdown","a04cc798":"markdown","e5c2ae29":"markdown","8c257245":"markdown","78b81e93":"markdown","a2c5d006":"markdown","e6df3bf4":"markdown"},"source":{"174e65a2":"# assignning the integer value to x and printing x\nx=1 \nprint(x)\nprint(type(x))","f38281b9":"#assignning the Float type of value to x and printing x and data type of x\nx= 0.1 \nprint(x)\nprint(type(x))","d22a5e17":"#assignning the complex type of value to x and printing x and data type of x\nx=complex(2,3)\nprint(x)\nprint(type(x))","b4c110f4":"# example for boolean data type\na=2>1\nprint(a)","8895272c":"# example of creating a set\ns={4,2,5,1,'a','apple',1.4,2+3j}\nprint(s)","f808baa7":"#example of adding an element in already existing set\ns.add(\"star\")\nprint(s)","04c27b37":"#example of removing an element from already existing set\ns.remove(\"apple\")\nprint(s)","7c9ab2d0":"myDict={'Name':'Amogha','project':'IVECO','Year_joined':'2019'}\nprint(myDict)\nprint(len(myDict))","c270694c":"myDict['Name']","11d2d547":"myDict['Training']='Python'\nprint(myDict)\nprint(len(myDict))","75f13a7b":"del myDict['Year_joined']\nprint(myDict)\nprint(len(myDict))","4a6fa592":"myDict[\"project\"]='SINOTRUK'\nprint(myDict)\nprint(len(myDict))","97f3ee8d":"print(\"the list of keys are\",myDict.keys())\nprint(\"the list of values are\",myDict.values())","e8c5d4dd":"myDict.clear()\nprint(myDict)","2f906884":"del myDict\n#print(myDict)","794ccea6":"#creating the list of same data type and printing it\nl=[1,2,3,4,4]\nprint(l)","fd5033c7":"#creating a list of diffrent data types \nl1=[1,\"BOOT\",\"CAL\",\"APP\",3,\"EOL\"]\nprint(l1)","6519bdf7":"nums=[10,20,30,40,50,60,70,80,90]\nsliced_nums=nums[2:7]\nprint(sliced_nums)","9b8d0359":"print(len(nums))","bbb5138b":"num=[10,20,30,40,50,60,70,80,90]\nnum[0]=0\nprint(num )","43067a40":"num=[1,2,5,6,8]\nfor n in num:\n    print(n)","f5c8d783":"#Multidimensional Lists - A list may have more than one dimension.\na=[[1,2,3],[4,5,6]]\nprint(a)\nnestlist = [1,2,[10,20,30,[7,9,11,[100,200,300]]],[1,7,8]]\nprint(nestlist)","091cd8c2":"#Concatenation to combine the two lists, use a plus sign (+) between the two lists to be concatenated.\nfirst= [7,9,'dog']\nsecond = ['cat',13,14,12]\nprint(first + second)","f45850aa":"#Repetion of List\nprint(['a','b','c'] * 4)","83c50dcf":"#Exect and Append List\n\na=[1,5,7,9]\nb=[10,20,30,40]\na.extend(b)\nprint(a)","567e7599":"a=[1,5,7,9]\na.append(b)\nprint(a)","47b5016d":"a=[1,5,7,9]\nb=4\na.append(b)\nprint(a)","a4bd4abf":"fruits =('Apple','Banana','Orange')\nprint(fruits)","cb2152e8":"fruits=('Apple','Banana','orange')\nprint(fruits[1])","d862f015":"print(fruits[0:2])","7013ffc1":"#fruits[2]='Mango'","c3cd495f":"#Integers addded to integers\nnum1=3\nnum2=4\nprint(\"Integer added to integer:\",num1+num2)\n\n#Integers added to float\nnum3=1.2\nnum4=4\nprint(\"Float added to integer:\",num3+num4)","41c472a1":"#subracting integer from integer\nprint(\"subracting integer from integer:\",num2-num1)\n#subtracting floating from integer\nprint(\"Subtracting float from integer:\",num4-num3)","086afcaf":"#integer multiplied with integer\nprint(\"integer multiplied with integer:\",num1*num2)\n#float multiplied with integer\nprint(\"float multiplied with integer:\",num3*num2)","57a77a17":"#integer divided by integer\nprint(\"integer divided by integer:\",num1\/num2)\n#integer divided by float\nprint(\"integer divided by float:\",num1\/num3)","640cb18a":"#integer to the power of integer\nprint(num1**num2)\n#integer to the power of float\nprint(num1**num3)","a44d83fb":"#integer divided by ibteger\nprint(num1\/\/num2)\n#integer divided by float\nprint(num1\/\/num3)","7dba2e36":"7%4.1","13fb1de0":"#integers compared with integers\nprint(8>5)\n#integers compared with float\nprint(8>7.5)","291df04c":"#integers compared with integers\nprint(8<5)\n#integers compared with float\nprint(8<7.5)","52e55b71":"#integers compared with integers\nprint(8==5)\n#integers compared with float\nprint(8==7.5)","f757a97e":"#integers compared with integers\nprint(8!=5)\n#integers compared with float\nprint(8!=7.5)","70dbd669":"#integers compared with integers\nprint(8>=5)\n#integers compared with float\nprint(8>=7.5)","09a90f10":"#integers compared with integers\nprint(8<=5)\n#integers compared with float\nprint(8<=7.5)","847b63b4":"number=8\nprint(number)","0682e3e8":"num1=4\nnum2=5\nnum1+=num2\nprint(num1)","3800608f":"num1=4\nnum2=5\nnum1-=num2\nprint(num1)","cd232b3d":"num1=4\nnum2=5\nnum1*=num2\nprint(num1)","3b2206b9":"num1=4\nnum2=5\nnum1\/=num2\nprint(num1)","83e2d34a":"num1=4\nnum2=5\nnum1%=num2\nprint(num1)","552eac4d":"num1=4\nnum2=5\nnum1**=num2\nprint(num1)","e55d5f72":"num1=11\nnum2=5\nnum1\/\/=num2\nprint(num1)","2b2d177e":"8 and 9","55b27aed":"True or False","32258a75":"4 or 5","910c0726":"not False","ecccabf8":"not 5","4a542c77":"print(3 in [2,4,3])\nprint(8 in [2,3,4])","eac6e24d":"print(3 not in [2,4,3])\nprint(8 not in [2,3,4])","6a8a9c28":"6&5","4f45d93b":"3|4","8982d05e":" 3^4","54144e23":"~3","4274d35a":"4<<2","1cf5fe2d":"4>>2","d710d361":"4 is 4.0","dd5d2107":"a=3\nb=3\na is b","cd03bc19":"1 is not False","bed48801":"x=2\nif x==1:\n    z=1\n    print(\"Setting z to 1\")\nelif x==2:\n    print(\"Setting z to 2\")\nelif x==3:\n    print(\"Setting z to 3\")","fb9e43f9":"names=[(\"ram\",\"sham\"),(\"app\",\"boot\"),(\"start\",\"end\")]\nfor i in names:\n    print('s',i[1],i[0])","36ba0956":"prices =[12,34,56,78]\ntax=[0.2,0.4,0.5,0.6]\ntotal=[]\nfor i in range(len(prices)):\n    total.append(prices[i] + tax[i])\n    \nprint(total)    ","1727f6ac":"i=1\nwhile i<6:\n    print(i)\n    if i==3:\n        break\n    i+=1    ","7d8d7850":"def newfunc():\n    print(\"hello this is new function\")\n    \nnewfunc()    ","78134b95":"the above error proves that the myDict is deleted","c689f0a4":"-  Accessing a Value: To access a value, use the key in square bracke","9df1806e":"#### b. Logical or\n#### The logical or operator returns True if even one value is True. It returns False if both values are False.","63ba56eb":"#### Operation on Tuples","c8b9ded2":"#### e. Bitwise left-shift\n#### The bitwise left-shift operator [<<] shifts bits for a value by a given number of places left. It adds 0s to new positions.","6de1824e":"#### b. not in operator\n\n#### The not in operator returns True if the first value is not in second. It returns False otherwise.","30c3f75a":"#### The floor division operator [\/\/] divides one value by second and gives their quotient rounded to the next smallest whole number.","6e3eedef":"#### 4)Not equal to\n\n#### The not equal to operator [!=] returns True if the first value is not equal to the second.","858a159d":"#### Extend Append List","50db0d03":"#### The multiplication operator [*] multiplies two values and gives their product.","ecaafee4":"#### f. Modulus and Assign\n\n#### The modulus and assign operator [%=] performs modulus on two values and assigns to first.","2a9aec4a":"\"img\" keyword is used to insert an image which takes the src link as input\n\n\nex: img src=\"https:\/\/i1.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/Python-Bitwise-Operators.jpg?w=688&ssl=1\" \n\n<img src=\"https:\/\/i1.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/Python-Bitwise-Operators.jpg?w=688&ssl=1\"> ","18f56891":"## Basic Operators ","775325f7":"##  Python Membership Operators","7f93608d":"#### b. Add and assign\n\n#### The add and assign operator [+=] adds two values and assigns the result to the variable on left.","c15041ee":"#### Indexing for a list starts with 0, like for a string. Just like a string, negative indexingmeans starting from the last element of the list","eb4d8b85":"The basic syntax of the while loop is as follows:\n\nwhile expression:\n\n      statements\nelse:","c7e8ce5b":"<h1 style=\"background-color:Skyblue;font-family:Georgia;font-size:350%;text-align:center\"> Python Beginner's Guide <\/h1>\n<h1 style=\"background-color:green;font-family:Georgia;font-size:150%;text-align:right\"> - Amogha J Namannavar <\/h1>\n\n<img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5769fc401b631bab1addb2ab\/1541580975837-LGDSGDVK6EI6PD4KK4W5\/python-2.gif\" >\n\n","f0f24ede":"<img src=\"https:\/\/i1.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/python-arithmetic-operators-1.jpg?w=690&ssl=1\" >","1108ee1d":"#### 1) for loops","aa0ed4ef":"#### a. Logical and\n#### The logical and operator returns True if both values are True. Otherwise, it returns False.","5ab173b8":"Adding an element\n- to add an element assign the value to key","3d372372":"### Complex:\n- Complex data type holds a complex number.\n- Complex numbers are of the format: a+bi. Here, a and b are the real parts of the number and i is imaginary.","00c4ba80":"#### 1) Greater than\n\n#### The greater than operator [>] returns True if the first value is greater than the second.","6266afe4":"#### They can combine conditions. Python has 3 logical operators:\n\n- and (Logical and)\n- or (Logical or)\n- not (Logical not)","9c9824b6":"####  - Removing an element","763e0644":"Reassigning Elements\n\n- to reassign the elements for already existing key assign the value newly","50658325":"<h1 style=\"background-color:Skyblue;font-family:Georgia;font-size:250%;text-align:center\"> Data Types  <\/h1>","4065ee79":"## LOOPS","18c514a2":"#### c. Logical not\n#### The logical not operator returns True if an expression is True, otherwise returns False.","5eb992ff":"### Float :\n- Float holds floating point real values.\n","7ea33c17":"## 4) Dictionary \n\n\n- A dictionary is a collection which is unordered and changeable(mutable) .\n- Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.\n- Keys are unique for a particular dictionary but values need not be.\n- To get the number of key-value pairs present in the dictionary we can use \"len()\" function.","d72bea6c":" Defining and Calling a Function","ec49ef86":"Python data types can be classified into the following categories.\n\n<img src=\"https:\/\/programmersportal.com\/wp-content\/uploads\/2020\/10\/Data-types-in-Python.png\" >\n","34ef38dd":" Accessing and Slicing a Tuple \u2013 It is the same as a list.","72d2ddc8":"#### a)Assign\n\n#### The assign operator [=] puts the value on the right in the variable on left.","f6b3d6c4":"#### Operations on List","9539c6b9":"#### 2)while loops","b1eb63db":"#### Multidimensional Lists: A list may have more than one dimens","f814f709":" #### Repetition of List","55c17aa1":"#### The basic form of the for loop is as follows:\n\nfor var in sequence:\n\n       statements\n","6c4c90c9":"Getting List of Keys and Values\n\n- To get list of keys use keyword \"keys()\"\n- To get list of Values use keyword \"values()\"","89891f6f":"### 6) Tuples ","9a55b6a8":"## Python Bitwise Operators","3e9ed079":"#### Membership operators check whether a value is in another. Python has 2 membership operators:\n- in\n- not in","5ed0a387":"Deleting the dictionary \n\n- to clear the dictionary use the keyword \"del\" with the dictinary ","c02e2ce7":"#### By default in python 3 the division result will be of type float","28d56478":"### Python Relational Operators","559a89d4":"Clearning the dictionary\n \n- to clear a dictionary use the keyword \"clear()\" with the dictonary","5a8aac27":"<img src=\"https:\/\/i1.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/Python-Bitwise-Operators.jpg?w=688&ssl=1\" >","d3a82a12":"--> Len(): Length of a list is an inbuilt function.","bbdc41d9":"#### a. Bitwise and\n#### The bitwise and operator [&] performs logical AND on corresponding bits in values.","8533a5bc":"3|4 is 011|100. This is 111, which is 7.","1be0c9a0":"#### 3) Equal to\n\n#### The equal to operator [==] returns True if the first value is equal to the second.","3450a9b5":"if-else ststements\n\n- The basic form of the statement can be given as:\n\nif expression:\n \n          statement(s)\n          \nelif expression:\n\n          statement(s)\n          \nelif expression:\n\n         statement(s)\n. . .\n\nelse:\n\n     statements\n\n","4a87ee72":"## How to insert an image in notebook?","f89e753b":"#### The division operator [\/] divides one value by second and gives their quotient.","a8344c8d":"#### 2)Subtraction Operator\n#### The subtraction operator [-] subtracts second value from first and gives their difference.","e356ec3d":"### Adding and removing new elements in set:\n\n#### - Adding an element","6b8cb26c":"4<<2 is 100<<2. This is 10000. This is 16.","b3931446":"## Decision Loop - if else","e28db5a4":"It returns True if two objects have the same identity.","ab16675b":"A function is a block of organised, reusable code used to perform a single, related\naction. Functions provide better modularity for the application and a high degree of\ncode reusing.\nUsers can create their own functions called user-defined functions.\n","e55a7457":"##### Python Tuple is immutable , Once declared you cannot change its size or elements.","2539dd34":"## 5) List \n\n- A list is a collection of values. List may contain different types of values. The list can be defined as follows\n","80106a0d":"#### d. Multiply and assign\n\n#### The multiply and assign operator [*=] assigns the product to the variable on left.","27f2409c":"#### 2)Less than\n\n#### The less than operator [<] returns True if the first value is less than the second.\n","e9cc676f":"#### b. Bitwise or\n#### The bitwise or operator [|] performs logical OR on corresponding bits in values.","92145c47":"#### h. Floor divide and Assign\n\n#### The floor divide and assign operator [\/\/=] performs floor division on two values and assigns to first.","fc95a28a":"#### 6) Floor Division","2a062902":"## 3) Sets\n\n\n- Sets are unordered collection of unique elements.\n- There can only be one representative of any element.\n- Sets are declared using {} .\n- ex: set1={1,2,3,4} ","365925ba":"#### b. is not operator\n#### The is not operator returns True if the first value is not identical to the second. It returns False otherwise.","e747c7b2":"##  Python Assignment Operators\n\n<img src=\"https:\/\/i0.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/Python-Assignment-Operators.jpg?w=760&ssl=1\" >\n","9747585d":" The for loops and range functions: The range function accepts one, two or three\narguments. With a single integer argument, the range returns a sequence of\nintegers from 0 to one less than the argument provided. With two arguments, the\nfirst argument is used as a starting value instead of 0, and with three arguments,\nthe third argument is used as an increment instead of the implicit default of 1","c8497fa6":"### Following are a few features of Python which differentiate it from other programming languages\n- Python statements do not need to end with a special character \u2013 the Pythoninterpreter knows that you are done with an individual statement with thepresence of a newline which gets generated when you press the \u2018Return\u2019 key of the keyboard.\n- If a statement spans more than one line, the safest course of action is to use a backslash (\\) at the end of the line to let Python know that you are going to continue the statement on the next line.\n- Python uses indentation, that is, the amount of white space before the statement itself, to indicate the presence of loops.\n- Object Oriented Programming: Python is a true object-oriented language. Thebasic concept of object oriented programming is encapsulation, which is the ability to define an object that contains the data and all the information a program needs to operate on that data.\n","3127234f":"3^4 is 011^100. This is 111, which is 7.","64667c5b":"## Functions ","ffdcdc48":"#### Concatenation: Use a plus sign (+) between the two lists to be concatenate","6e6b2113":"#### 6) Less than equal to\n\n#### The less than or equal to operator [<=] returns True if the first value is greater than or equal to the second.","a71304cf":"#### A list is mutable, that is, reassign element","8ce41f12":"## 1) Numeric Data Types \n\n### - Integer(int) :\n- Int holds signed integers, You can use the type() function to find which class it belongs to.","08e27d2d":"#### a. in operator\n\n#### The in operator returns True if the first value is in second. Otherwise, it returns False.","db1f007a":"For 4 and 5, it doesn\u2019t give True, it gives the first value.","99b63720":"#### The modulus operator [%] divides one value by second and gives their remainder.","00ed2d58":"<h1 style=\"background-color:Skyblue;font-family:Georgia;font-size:250%;text-align:center\"> Basics of Python <\/h1>","46371e0b":"#### 4) Division operator","263d0d7d":"#### 7) Modulus","1edba641":"#### 3) Multiplication Operator","e2fbf697":"## Python Identity Operators\n\n#### Identity operators check whether two values are identical. Python has 2 identity operators as well:\n\n- is\n- is not","75009cfd":"#### Arithmetic Operations","13921590":"#### 5) Greater than equal to\n\n#### The greater than or equal to operator [>=] returns True if the first value is greater than or equal to the second.","ac9f79d2":"#### g. Exponentiation and Assign\n\n#### The exponentiation and assign operator [%=] performs exponentiation on two values and assigns to first.\n\n","43b4407c":"Delete an element\n\n- to delete an element use del keyword with the key","0055b19b":"<img src=\"https:\/\/i0.wp.com\/techvidvan.com\/tutorials\/wp-content\/uploads\/sites\/2\/2019\/12\/python-relational-operators-1.jpg?w=538&ssl=1\" >","dfa76632":"#### a. is operator\n#### The is operator returns True if the first value is the same as the second. Otherwise, it returns False.","bbae6122":"#### f. Bitwise right-shift\n#### The bitwise right-shift operator [>>] shifts bits for a value by given number of places right. Some bits are lost.","14b83c27":"## Python Logical Operators","eda902d3":"#### A tuple is like a list. It differs from the list in using parentheses instead of square brackets ","1216dec0":"#### The exponentiation operator [**] raises one value to power of second.","c5cb4da3":"##  2) Boolean \n\n- A Boolean can take true or false values\n","4c43906b":"For 8 and 9, it doesn\u2019t give True, it gives the last value.","ed3f4353":"--> Slicing a List: Split the list in parts","caeeb436":"#### c. Subtract and assign\n\n#### The subtract and assign operator [-=] subtracts second value from first and assigns to first.","358eb928":"#### The extend() function works only on the list. However, you can append() an integer to the list","d4bab70b":"#### 5) Exponentiation","a04cc798":"#### e. Divide and Assign\n\n#### The divide and assign operator [\/=] assigns the division of two values to the first.","e5c2ae29":"#### c. Bitwise xor\n#### The bitwise xor operator [^] performs logical XOR on corresponding bits in values.","8c257245":"#### Accessing elements of the List means that to loop over the list, we can use the for loop","78b81e93":"#### 1) Addition Operator\n\n#### The addition operator [+] adds two values and gives their sum.","a2c5d006":"1is not identical to False.","e6df3bf4":"#### d. Bitwise 1\u2019s complement\n#### The bitwise 1\u2019s complement operator [~] returns the bitwise negation of a value. Each bit is inverted."}}