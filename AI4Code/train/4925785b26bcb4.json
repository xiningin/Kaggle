{"cell_type":{"e4662b53":"code","eec4fa92":"code","2480095d":"code","edc67d4d":"code","0310c431":"code","09eb788c":"code","66de438b":"code","217c7af8":"code","87221eae":"code","559a33fc":"code","0d9732af":"code","ea83de0e":"code","73d6891e":"code","a4c5d206":"code","c3efe092":"code","2f79534d":"code","7d52998c":"code","a54dae64":"code","9014c42c":"code","27697bae":"code","2f20d0a4":"code","284aa978":"code","422bbba4":"code","63672e3d":"code","7ffc7e0c":"code","c0767a13":"code","638c0519":"code","ed268a3b":"code","099d9425":"code","18cc027e":"code","4924f8b8":"code","4d4d9f85":"code","16eeabe1":"markdown","6b19b278":"markdown","e29e42fd":"markdown","a5c4646a":"markdown","b99288ed":"markdown","54dc9326":"markdown","9e294121":"markdown","bad80a5d":"markdown"},"source":{"e4662b53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","eec4fa92":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.callbacks import ReduceLROnPlateau\n","2480095d":"train = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\nsample_sub=pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')","edc67d4d":"print('the row = {} and the column = {}'.format(train.shape[0],train.shape[1]))\nprint('for test the row = {} and the column = {}'.format(test.shape[0],test.shape[1]))","0310c431":"train.head()","09eb788c":"test.head()\ntest.drop(['id'],axis=1,inplace=True)","66de438b":"# Count label values\nsns.countplot(train['label'])","217c7af8":"# Input feature and Target variable\nX_train = train.drop('label',axis=1)\nY_train = train.label\nY_train","87221eae":"X_train= X_train\/255\ntest = test\/255\nX_train.head()","559a33fc":"X_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\n","0d9732af":"# Shape of images\nX_train.shape","ea83de0e":"from keras.utils.np_utils import to_categorical\nY_train=to_categorical(Y_train)","73d6891e":"Y_train","a4c5d206":"train_x,test_x,train_y,test_y = train_test_split(X_train,Y_train,test_size=0.10,random_state=42)","c3efe092":"plt.imshow(X_train[2][:,:,0])","2f79534d":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # r","7d52998c":"datagen.fit(X_train)","a54dae64":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(5,5),padding='Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32, kernel_size=(5,5),padding='Same',activation='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(BatchNormalization(momentum=0.15))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(BatchNormalization(momentum=.15))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10,activation='softmax'))\n","9014c42c":"model.summary()","27697bae":"optimizer=Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999)","2f20d0a4":"model.compile(optimizer=optimizer,loss=['categorical_crossentropy'],metrics=['accuracy'])","284aa978":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',\n                                            patience=3,\n                                            verbose=1,\n                                            factor=0.5,\n                                            min_lr=0.00001)\n","422bbba4":"epochs=30 \nbatch_size=64","63672e3d":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (test_x,test_y),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","7ffc7e0c":"fig,ax=plt.subplots(2,1)\nfig.set\nx=range(1,1+epochs)\nax[0].plot(x,history.history['loss'],color='red')\nax[0].plot(x,history.history['val_loss'],color='blue')\n\nax[1].plot(x,history.history['accuracy'],color='red')\nax[1].plot(x,history.history['val_accuracy'],color='blue')\nax[0].legend(['trainng loss','validation loss'])\nax[1].legend(['trainng acc','validation acc'])\nplt.xlabel('Number of epochs')\nplt.ylabel('accuracy')","c0767a13":"y_pre_test=model.predict(test_x)\ny_pre_test=np.argmax(y_pre_test,axis=1)\ny_test=np.argmax(test_y,axis=1)","638c0519":"conf=confusion_matrix(y_test,y_pre_test)\nconf=pd.DataFrame(conf,index=range(0,10),columns=range(0,10))","ed268a3b":"conf","099d9425":"test=pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\n\ntest_id=test.id\n\ntest=test.drop('id',axis=1)\ntest=test\/255\ntest=test.values.reshape(-1,28,28,1)\n\n\n","18cc027e":"y_pre=model.predict(test)     ##making prediction\ny_pre=np.argmax(y_pre,axis=1) ##changing the prediction intro labels","4924f8b8":"sample_sub['label']=y_pre\nsample_sub.to_csv('submission.csv',index=False)","4d4d9f85":"sample_sub.head()","16eeabe1":"### Normalization ","6b19b278":"# Feature Enginnering\n> **Here we convert yhe y_train values into a series of values.only the number place is 1 and else will be zero**","e29e42fd":"# Read Datasets","a5c4646a":"# Data Augmentation\n**In Data Augmentation, we create some fake images for better training purposes.The Images are generated with some changes like brightness,scalling,rotating and so on**","b99288ed":"# Import Packages ","54dc9326":"### Reshape of images\n**Here 1 denotes as Grayscale while we can also use RGB.RGB denote as 3 but gray scale take less time and less computational Power so we use grayscale**","9e294121":"# Model\n**This is a image Processing problem so we use CNN(Convolution Neural Network).**\n![image.png](attachment:07c58cf9-8ccd-4387-8c59-eed6bc663941.png)","bad80a5d":"**Id column is not useful so we have to drop it**"}}