{"cell_type":{"5d1b235c":"code","674be5d0":"code","b787a456":"code","d06cd662":"code","fbdfc260":"code","eac7ee82":"code","91b2a460":"code","318311a0":"code","de22f64f":"code","d8f70727":"code","05571051":"markdown"},"source":{"5d1b235c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","674be5d0":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_addons as tfa \nimport gc\ntf.__version__","b787a456":"# \u79cd\u5b50\u8bbe\u7f6e\nSEED = 1111\ntf.random.set_seed(SEED)\nnp.random.seed(SEED)\n","d06cd662":"%%time\n# train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain=pd.read_parquet('..\/input\/step01-csv-parquet\/dtrain.parquet')\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train[train['weight'] != 0]\ntrain['action'] = ((train['resp'].values) > 0).astype(int)\n\ntrain.fillna(train.mean(),inplace=True)\n\n# \u6d4b\u8bd5\u96c6\u6240\u9700\u7684\u586b\u5145\u7f3a\u5931\u503c f_mean\nraw_features = [c for c in train.columns if \"feature\" in c]\nf_mean = np.mean(train[raw_features[1:]].values,axis=0)\n\nnp.save(\"f_mean_online.npy\",f_mean)\ntrain.shape","fbdfc260":"def stats_features(tmp_df):\n    # \u6784\u5efa\u4e24\u4e2a\u4ea4\u53c9\u7279\u5f81\uff1ahttps:\/\/www.kaggle.com\/a763337092\/pytorch-resnet-starter-inference\n    tmp_df['feature_cross_41_42_43']=tmp_df['feature_41']+tmp_df['feature_42']+tmp_df['feature_43']\n    tmp_df['feature_cross_1_2']=tmp_df['feature_1']\/(tmp_df['feature_2']+1e-5)\n\n    # \u884c\uff1asum mean std median\n#     tmp_df['features_sum']=tmp_df[raw_features].sum(axis=1)\n#     tmp_df['features_mean']=tmp_df[raw_features].mean(axis=1)\n#     tmp_df['features_std']=tmp_df[raw_features].std(axis=1)\n#     tmp_df['features_var']=tmp_df[raw_features].var(axis=1)\n#     tmp_df['features_median']=tmp_df[raw_features].median(axis=1)\n\n    # skew sem kurtosis kurt\n    #tmp_df['features_skew']=tmp_df[raw_features].skew(axis=1)\n    #tmp_df['features_kurtosis']=tmp_df[raw_features].kurtosis(axis=1)\n    #tmp_df['features_kurt']=tmp_df[raw_features].kurt(axis=1) # Wall time: 23.4 s\n\n    #tmp_df['features_sem']=tmp_df[raw_features].sem(axis=1) # Wall time: 18.3 s\n\n    # \u884c\uff1amax min  \n#     tmp_df['features_max']=tmp_df[raw_features].max(axis=1)\n#     tmp_df['features_min']=tmp_df[raw_features].min(axis=1)\n    # print(train[['features_sum','features_mean','features_std','features_median','features_max','features_min']].head())\n    # pct\n    # train['features_prod']=train[raw_features].prod(axis=1)\n    # train['features_prod']\n\n    tmp_df.head()\n    return tmp_df\n    \n","eac7ee82":"train=stats_features(train)\ntrain.head()","91b2a460":"features = [c for c in train.columns if \"feature\" in c]","318311a0":"\nvalid = train.loc[(train.date >= 450) & (train.date < 500)].reset_index(drop=True)\n# train = train.loc[train.date < 450].reset_index(drop=True)\n\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\nX_train = train.loc[:, train.columns.str.contains('feature')]\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T\n\nX_valid = valid.loc[:, valid.columns.str.contains('feature')]\ny_valid = np.stack([(valid[c] > 0).astype('int') for c in resp_cols]).T\n\ndel train","de22f64f":"def create_resnet(\n    num_columns, num_labels, hidden_size, dropout_rate, label_smoothing, learning_rate\n):\n    \n    \n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x=tf.keras.layers.BatchNormalization()(inp)\n    x=tf.keras.layers.Dropout(dropout_rate)(x)\n    \n    \n    x1=tf.keras.layers.Dense(hidden_size)(x)\n    x1=tf.keras.layers.BatchNormalization()(x1)\n    x1=tf.keras.layers.LeakyReLU()(x1)\n    x1=tf.keras.layers.Dropout(dropout_rate)(x1)\n    \n    x = tf.keras.layers.concatenate([x, x1], axis=1)\n\n    \n    x2=tf.keras.layers.Dense(hidden_size)(x)\n    x2=tf.keras.layers.BatchNormalization(axis=1)(x2)\n    x2=tf.keras.layers.LeakyReLU()(x2)\n    x2=tf.keras.layers.Dropout(dropout_rate)(x2)\n    \n    x = tf.keras.layers.concatenate([x1, x2], axis=1)\n\n    \n    x3=tf.keras.layers.Dense(hidden_size)(x)\n    x3=tf.keras.layers.BatchNormalization(axis=1)(x3)\n    x3=tf.keras.layers.LeakyReLU()(x3)\n    x3=tf.keras.layers.Dropout(dropout_rate)(x3)\n    \n    x = tf.keras.layers.concatenate([x2, x3], axis=1)\n\n    x4=tf.keras.layers.Dense(hidden_size)(x)\n    x4=tf.keras.layers.BatchNormalization(axis=1)(x4)\n    x4=tf.keras.layers.LeakyReLU()(x4)\n    x4=tf.keras.layers.Dropout(dropout_rate)(x4)\n    \n    x = tf.keras.layers.concatenate([x3, x4], axis=1)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    \n    \n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n#         optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n#         optimizer=tfa.optimizers.AdamW(learning_rate=learning_rate,weight_decay=1e-5),\n        optimizer=tfa.optimizers.RectifiedAdam(lr=learning_rate,weight_decay=1e-5),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model\n\n\nNUM_FOLDS=5\n\nTRAINING=True\nif TRAINING:\n    for i in range(NUM_FOLDS):\n        tf.keras.backend.clear_session()\n\n\n        # \u79cd\u5b50\u8bbe\u7f6e\n        SEED = 1111\n        tf.random.set_seed(SEED+i)\n        np.random.seed(SEED+i)\n\n        reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',\n                                                         verbose=1,\n                                                         factor=0.2,\n                                                         patience=8, mode='min')\n\n\n        earlystop_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)\n        model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n            filepath='online_model_{}.weights'.format(i),\n            save_weights_only=True,\n            monitor='val_AUC',\n            mode='max',\n            verbose=1,\n            save_best_only=True)\n\n        dropout_rate=0.2\n        hidden_size=256\n        \n        label_smoothing = 0.005\n        learning_rate = 1e-3\n\n        clf = create_resnet(\n            len(features), 5, hidden_size, dropout_rate, label_smoothing, learning_rate\n            )\n\n        clf.summary()\n\n        clf.fit(X_train, y_train, epochs=200, batch_size=4096,validation_data=(X_valid,y_valid),\n               callbacks=[reduce_lr,\n                          earlystop_callback,\n                          model_checkpoint_callback])\n#         del clf\n        gc.collect()\n","d8f70727":"# from tqdm import tqdm\n\n# th = 0.502\n\n# f = np.median\n# clf.call = tf.function(clf.call, experimental_relax_shapes=True)\n\n# models=[clf,clf,clf,clf,clf]\n# import janestreet\n\n# env = janestreet.make_env()\n\n# for (test_df, pred_df) in tqdm(env.iter_test()):\n#     if test_df['weight'].item() > 0:\n# #         x_tt = test_df.loc[:, features].values\n# #         if np.isnan(x_tt[:, 1:].sum()):\n# #             x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n\n#         test_df = stats_features(test_df)\n#         x_tt = test_df.loc[:, features].values\n#         if np.isnan(x_tt[:, 1:130].sum()):\n#             x_tt[:, 1:130] = np.nan_to_num(x_tt[:, 1:130]) + np.isnan(x_tt[:, 1:130]) * f_mean\n\n#         pred = np.mean([model(x_tt, training=False).numpy() for model in models], axis=0)\n#         pred = f(pred)\n#         pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n#     else:\n#         pred_df.action = 0\n\n#     env.predict(pred_df)","05571051":"Pytorch Resnet \uff1ahttps:\/\/www.kaggle.com\/a763337092\/blending-tensorflow-and-pytorch\n\n\nTensorFlow-Resnet-Inference\uff1ahttps:\/\/www.kaggle.com\/quincyqiang\/tensorflow-resnet-inference?rvi=1"}}