{"cell_type":{"c75f387b":"code","9da23259":"code","6273d133":"code","641ed456":"code","8c563caf":"code","a835226e":"code","8a7742c8":"code","1cdfd1ab":"code","03ae873e":"code","dd5ae590":"code","8cadcb9a":"code","4a0c00da":"code","615efcbd":"code","cb237f2c":"code","44b456be":"code","7cebc1e2":"code","7f4b3bba":"code","ea0146a7":"code","8feb7156":"code","f5afdda0":"markdown","aba75b96":"markdown","fc781256":"markdown","a7ca39ab":"markdown"},"source":{"c75f387b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for plotting\nimport seaborn as sea #for visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9da23259":"#importing datasets \n\nmovies = pd.read_csv(\"..\/input\/\/imdb-20002019-movie-data-set-over-3000\/df_movie_ratings.csv\")\n\n#show the columns\n\nmovies.columns","6273d133":"movies.head()","641ed456":"#Removing Unwanted Column\nmovies = movies.drop(movies.columns[0], axis='columns')\n","8c563caf":"movies.columns","a835226e":"#we have 3 float columns, 3 integer and 3 object columns according to info() method\n\nmovies.info()","8a7742c8":"#some numeric informations about the movies_df\n\nmovies.describe()\n","1cdfd1ab":"#Correlation map with using seaborn lib.\n\nmovies_corr = movies.corr()\nf,ax = plt.subplots(figsize=(10, 10))\nsea.heatmap(movies_corr, annot = True, linewidths = 0.1, fmt= '.2f', ax=ax )\nplt.show()","03ae873e":"# these are the rating point in the database\n\nprint(\"Rating Points :\",movies['imdb'].unique())","dd5ae590":"# lets see how many films are there for each rating point\n\nprint(movies['imdb'].value_counts())","8cadcb9a":"# Visualizing rating points using pie chart\n\nplt.figure(1, figsize=(10,10))\nmovies['imdb'].value_counts().plot.pie(autopct=\"%1.1f%%\")","4a0c00da":"#scatter plot of movie and their ratings between 2000 - 2020\n\nplt.scatter(movies.year, movies.imdb, alpha = 0.07, label = \"Movie\", color = \"orange\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Ratings\")\nplt.legend(loc = \"lower right\")\nplt.show()","615efcbd":"#histogram plot about number of published movies according to year\n\nmovies.year.plot(kind = \"hist\", bins = 40, figsize = (12,8))\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of Movies\")\nplt.show()","cb237f2c":"movies[\"runtime\"].value_counts()\n","44b456be":"movies.runtime.value_counts()[:10].plot.pie(autopct='%1.1f%%',figsize=(10,10))\nplt.title('Top 10 runtime of Movies')","7cebc1e2":"movies['runtime'] = movies['runtime'].map(lambda x: x.lstrip(' ').rstrip('min'))","7f4b3bba":"movies_time=movies.runtime\nf,ax = plt.subplots(figsize=(14, 8))\nsea.distplot(movies_time, bins=20, kde=False,rug=True, ax=ax);\nplt.ylabel(\"Counts\")","ea0146a7":"movies['imdb'].corr(movies['metascore'])","8feb7156":"import matplotlib\nmatplotlib.style.use('ggplot')\n\nplt.scatter(movies.metascore, movies.imdb)\nplt.show()","f5afdda0":"***Lets Do Some Visualization to Get the Insights from the Data***","aba75b96":"**There seems to be a correlation, let's visualize.**","fc781256":"**Let's see if critics and users get along really well.**","a7ca39ab":"**INTRO:**\n\n**This is my first data analysis.\nPlease feel free to share your feedback & knowledge so that I can improve**\n\nThanks,\nAditya Totla"}}