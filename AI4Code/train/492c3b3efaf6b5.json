{"cell_type":{"02ddc1ac":"code","21ec5426":"code","e042ccda":"code","1577dfda":"code","d7d20a97":"code","19308716":"code","740ff6e9":"code","a0890cd5":"code","62e368cf":"code","bd91f3bd":"code","adb7b8fe":"code","c63b37b1":"code","1e53a649":"code","88302fda":"markdown","3d1ac2d8":"markdown","52e8f6d4":"markdown","59e72001":"markdown","e78a06a8":"markdown","45ea3ceb":"markdown","6a7830d1":"markdown","546754ff":"markdown","b615fb0c":"markdown","5d0b2e06":"markdown","9eddd1ed":"markdown"},"source":{"02ddc1ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21ec5426":"import csv\ncsv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/BattlesStaging_12292020_WL_tagged\/BattlesStaging_12292020_WL_tagged.csv\"\nchunk_size = 500000\n\ntext_file_reader = pd.read_csv(csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, chunksize = chunk_size, index_col = 0)","e042ccda":"dfList = []\ncounter = 0\n\nfor df in text_file_reader:\n    dfList.append(df)\n    counter= counter +1\n    print(\"Max rows read: \" + str(chunk_size * counter) )\n\ndf = pd.concat(dfList,sort=False)","1577dfda":"wincon_csv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/Wincons.csv\"\ndf_wincon = pd.read_csv(wincon_csv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, index_col = 0)","d7d20a97":"wincon_dict = dict(zip(df_wincon[\"card_id\"],df_wincon[\"card_name\"]))","19308716":"import json\ndef win_con_populator(row):\n\n    winner_win_con_id = 99999999\n    loser_win_con_id = 99999999\n    \n    \n    for key, value in wincon_dict.items():\n        if((key in json.loads(row['winner.cards.list']))&(winner_win_con_id == 99999999)):\n            winner_win_con_id = key\n    \n        if((key in json.loads(row['loser.cards.list']))&(loser_win_con_id == 99999999)):\n            loser_win_con_id = key\n            \n        if((winner_win_con_id !=99999999)&(loser_win_con_id !=99999999)):\n            break\n        \n    return winner_win_con_id, wincon_dict[winner_win_con_id], loser_win_con_id, wincon_dict[loser_win_con_id]","740ff6e9":"df['winner.wincon.card.id'] = 99999999\ndf['loser.wincon.card.id'] = 99999999\ndf['winner.wincon.card.name'] = None\ndf['loser.wincon.card.name'] = None\ndf['winner.wincon.card.id'],df['winner.wincon.card.name'],df['loser.wincon.card.id'],df['loser.wincon.card.name'] = zip(*df.apply(win_con_populator, axis=1))","a0890cd5":"df.head()","62e368cf":"def arena_placer(row):\n    arena_name = None\n    \n    if(row['average.startingTrophies'] < 300):\n        arena_name = '01.Goblin Stadium'\n    elif ((row['average.startingTrophies'] >= 300)&(row['average.startingTrophies'] < 600)):\n        arena_name = '02.Bone Pit' \n    elif ((row['average.startingTrophies'] >= 600)&(row['average.startingTrophies'] < 1000)):\n        arena_name = '03.Barbarian Bowl'\n    #1000\n    elif ((row['average.startingTrophies'] >= 1000)&(row['average.startingTrophies'] < 1300)):\n        arena_name = '04.P.E.K.K.A\\'s Playhouse'\n    elif ((row['average.startingTrophies'] >= 1300)&(row['average.startingTrophies'] < 1600)):\n        arena_name = '05.Spell Valley'  \n    elif ((row['average.startingTrophies'] >= 1600)&(row['average.startingTrophies'] < 2000)):\n        arena_name = '06.Builder\\'s Workshop'\n    # 2000\n    elif ((row['average.startingTrophies'] >= 2000)&(row['average.startingTrophies'] < 2300)):\n        arena_name = '07.Royal Arena'\n    elif ((row['average.startingTrophies'] >= 2300)&(row['average.startingTrophies'] < 2600)):\n        arena_name = '08.Frozen Peak'  \n    elif ((row['average.startingTrophies'] >= 2600)&(row['average.startingTrophies'] < 3000)):\n        arena_name = '09.Jungle Arena'\n    # 3000\n    elif ((row['average.startingTrophies'] >= 3000)&(row['average.startingTrophies'] < 3300)):\n        arena_name = '10.Hog Mountain'\n    elif ((row['average.startingTrophies'] >= 3300)&(row['average.startingTrophies'] < 3600)):\n        arena_name = '11.Electro Valley'  \n    elif ((row['average.startingTrophies'] >= 3600)&(row['average.startingTrophies'] < 4000)):\n        arena_name = '12.Spooky Town'\n    # 4000\n    elif ((row['average.startingTrophies'] >= 4000)&(row['average.startingTrophies'] < 4300)):\n        arena_name = '13.Challenger I'\n    elif ((row['average.startingTrophies'] >= 4300)&(row['average.startingTrophies'] < 4600)):\n        arena_name = '14.Challenger II'\n    elif ((row['average.startingTrophies'] >= 4600)&(row['average.startingTrophies'] < 5000)):\n        arena_name = '15.Challenger III'\n    # 5000\n    elif ((row['average.startingTrophies'] >= 5000)&(row['average.startingTrophies'] < 5300)):\n        arena_name = '16.Master I'\n    elif ((row['average.startingTrophies'] >= 5300)&(row['average.startingTrophies'] < 5600)):\n        arena_name = '17.Master II'\n    elif ((row['average.startingTrophies'] >= 5600)&(row['average.startingTrophies'] < 6000)):\n        arena_name = '18.Master III'\n    # 6000\n    elif ((row['average.startingTrophies'] >= 6000)&(row['average.startingTrophies'] < 6300)):\n        arena_name = '19.Champion'\n    elif ((row['average.startingTrophies'] >= 6300)&(row['average.startingTrophies'] < 6600)):\n        arena_name = '20.Grand Champion'\n    elif ((row['average.startingTrophies'] >= 6600)&(row['average.startingTrophies'] < 7000)):\n        arena_name = '21.Royal Champion'         \n    elif(row['average.startingTrophies'] >= 7000):\n        arena_name = '22.Ultimate Champion' \n        \n    return arena_name\n\ndf['average.startingTrophies'] = df['average.startingTrophies'].fillna(0)\ndf['arena.name'] = None\ndf['arena.name'] = df.apply(arena_placer, axis=1)","bd91f3bd":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import StrMethodFormatter\n\ndef plot_dataframe(df: pd.DataFrame, yAxisSource, title, xlabel, ylabel, labelField, yscale=None):\n    \n    ax = df.plot(y=yAxisSource, kind='bar', grid=True, figsize=(24,10), color=['#86bf91'], zorder=2, rot=45)\n    \n    ax.set_title(title)\n    ax.set_xlabel(xlabel, labelpad=20, weight='bold', size=12)\n    ax.set_ylabel(ylabel, labelpad=20, weight='bold', size=12)\n    \n    if(yscale!=None):\n        ax.set_yscale(yscale)\n    \n    # Format y-axis label\n    ax.yaxis.set_major_formatter(StrMethodFormatter('{x:,g}'))\n    \n    rects = ax.patches\n    \n    # Make some labels.\n    labels = df[labelField].tolist()\n    \n    for rect, label in zip(rects, labels):\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width() \/ 2, height + 5, label,\n                ha='center', va='bottom')\n\n    \n    plt.show()\n    ","adb7b8fe":"df_arena_counts = df.groupby(['arena.name'])[[\"arena.id\"]].count()\ndf_arena_counts.rename(columns={\"arena.id\": \"count\"}, inplace=True)\ndf_arena_counts.index = [x.split(\".\",1)[1] for x in df_arena_counts.index]\nplot_dataframe(df_arena_counts, [\"count\"], \"Matches Per Arena\", \"Arena Names\", \"Matches\", 'count', 'log')","c63b37b1":"df_arena_counts = df[df[\"arena.name\"].str.contains(\"Champion\", na=False)].groupby(['arena.name'])[[\"arena.id\"]].count()\ndf_arena_counts.rename(columns={\"arena.id\": \"count\"}, inplace=True)\ndf_arena_counts.index = [x.split(\".\",1)[1] for x in df_arena_counts.index]\nplot_dataframe(df_arena_counts,[\"count\"], \"Matches Per Champion Arena\", \"Arena Names\", \"Matches\", 'count', 'log')","1e53a649":"df_winner_win_cons = df[(df[\"arena.name\"].str.contains(\"Champion\", na=False))&(df['winner.wincon.card.name'] != df['loser.wincon.card.name'])].groupby(['winner.wincon.card.name'])[\"arena.id\"].count().reset_index(name='count').sort_values(['count'], ascending=False)\ndf_loser_win_cons = df[(df[\"arena.name\"].str.contains(\"Champion\", na=False))&(df['winner.wincon.card.name'] != df['loser.wincon.card.name'])].groupby(['loser.wincon.card.name'])[\"arena.id\"].count().reset_index(name='count').sort_values(['count'], ascending=False)\ndf_winner_win_cons.reset_index(drop=True, inplace=True)\ndf_loser_win_cons.reset_index(drop=True, inplace=True)\n\nresult = df_winner_win_cons.merge(df_loser_win_cons, left_on='winner.wincon.card.name', right_on='loser.wincon.card.name', how = \"inner\")\nresult.drop(['loser.wincon.card.name'], axis=1, errors='ignore', inplace=True)\nresult.rename(columns={\"count_x\": \"win_count\",\"count_y\": \"lose_count\"}, inplace=True)\nresult['win_percentage'] = result[\"win_count\"] \/ (result[\"win_count\"]+result[\"lose_count\"])\nresult['lose_percentage'] = result[\"lose_count\"] \/ (result[\"win_count\"]+result[\"lose_count\"])\nresult['total_matches'] = (result[\"win_count\"]+result[\"lose_count\"])\nresult.set_index(\"winner.wincon.card.name\",inplace=True)\n\nplot_dataframe(result,[\"win_count\"], \"Matches Won Per WinCon In Champion Arenas\", \"Win Cons\", \"Matches\", \"win_count\",\"log\")","88302fda":"### Let's plot the Win Cons Of the Winners of Matches In The Champions Arenas","3d1ac2d8":"### Let's define a function that will populate the wincons of the rows, both for the winner and loser player. We just followed the order of precedence of the wincons here https:\/\/www.deckshop.pro\/card\/flag\/win-condition","52e8f6d4":"### Let's get the Matches Per Arena","59e72001":"### Let's populate the wincons","e78a06a8":"### Let's define an arena placer function","45ea3ceb":"### Stitch and Load the dataframes into one","6a7830d1":"### Let's define a plotting function","546754ff":"### Just some eye checks","b615fb0c":"### Let's start loading the battles for one day","5d0b2e06":"### Let's get the Matches Per Champion Arena","9eddd1ed":"### Let's load the Win Conditions based from this website https:\/\/www.deckshop.pro\/card\/flag\/win-condition"}}