{"cell_type":{"ab4c825d":"code","c6a4a757":"code","d1049748":"code","be226864":"code","2957cee6":"code","f54ca9be":"code","b8ddb7c3":"code","475b547e":"code","950c7e02":"code","4c284589":"code","7c69550d":"code","4e72fb2a":"code","e8f83c03":"code","791217bd":"code","c9dafcf5":"code","cc147f61":"code","34621657":"code","2f9c02d3":"code","1af4d70e":"code","00839d75":"code","79943148":"code","228ccdd9":"code","6db76f46":"code","fdde9969":"code","231b1497":"code","692c2ae4":"code","9891dbbd":"code","61ca48df":"code","925d7585":"code","9fea2c5a":"code","3482bac5":"code","e766197b":"code","5d195fca":"code","a05f9323":"code","f251ad1d":"code","0bd8abf5":"code","42597377":"code","69079bcc":"code","f2560ea0":"code","794a77c6":"code","28e665f8":"code","27907662":"code","d8f064f0":"code","0792cd75":"code","1918521c":"code","470c29fb":"code","578ad05d":"code","9738c373":"code","daf2baea":"code","b7c5d9e0":"code","bf08d3db":"code","df442fd5":"code","e3b68f3e":"code","a6d0e41a":"code","8c49cfd4":"code","104ca539":"code","8c0e43e7":"code","25666b4e":"code","d7e4974a":"code","eaff6633":"code","ee72cc8d":"code","245c3666":"code","eab9680c":"code","a0c32862":"code","d233454a":"code","152c07c7":"code","95aafdb1":"code","c9544905":"code","4133b4c1":"code","dde4b6b4":"code","ad9a1455":"code","54a45e36":"code","16f80539":"code","2613c438":"code","b40738b1":"code","fb47407f":"code","bcaca977":"code","3a1ba593":"code","87dee2fa":"code","1ed486ce":"code","0320eb0c":"code","6c64fa12":"code","bf7b06e2":"code","23ba1607":"code","acbc3bec":"code","4ea9be9a":"code","0dad9aae":"code","f4ce2682":"code","acb3afbd":"code","fd7cf921":"code","441c6c55":"code","a9eb2d92":"code","65c57063":"code","a9ef1d0c":"code","d9a770a4":"code","a98e4f76":"code","8b947a5e":"code","3e9e75e3":"code","bc1357cd":"code","9a1c41c6":"code","8af97cb0":"code","56c2e036":"code","abc0f2e2":"code","329591a2":"code","a537b824":"code","e5980afc":"code","5f45c90b":"code","53cea218":"code","c3d0ce80":"code","73f0a935":"code","d451833a":"code","b4b14966":"code","721c9a40":"code","f1350614":"code","80a65a7a":"code","6562c060":"code","15d90406":"code","24f8f53c":"code","99f651dd":"code","1727f373":"code","9fd7adb3":"code","2bd354c2":"code","86fbc29f":"code","11dceeef":"code","95ee01bd":"code","635bfaec":"code","c27bf923":"code","e0a05f32":"code","4fdaa1a9":"code","851a422d":"code","36289924":"code","10e2642d":"code","eaab9001":"code","f61fb406":"code","b45caaab":"code","bad48f13":"code","e41c99ab":"code","fe616ad0":"code","f4d59ccf":"code","2d4144b9":"code","ae142a6e":"code","8fb92333":"code","586ee695":"code","7851d947":"code","cd766d64":"code","a4bf0857":"code","e3ee323d":"code","cdf018f3":"code","56572a50":"code","4e137204":"code","ce24bca9":"code","1d6c86dc":"code","1252acb7":"code","4c36b36c":"code","b8ae1f57":"code","459f7a31":"code","3429502f":"code","868d3cad":"code","e68cccb6":"code","db22e264":"code","622cd241":"code","7c9d3f26":"code","df0aae66":"code","600785f6":"code","0bfea7c2":"code","634beb61":"code","a756c829":"code","d45d0e7d":"code","c59223fc":"code","61482a9d":"code","23b4d0ab":"code","70dab089":"code","16398950":"code","a3a489eb":"code","13da18fe":"code","63d2a9e3":"code","91943e78":"code","48ac6c81":"code","9c03dcae":"code","8c3ba23a":"code","09bbc15b":"code","03f14c55":"code","a1ca7c18":"code","3d55b6a3":"code","a84013b9":"code","019383c4":"code","51fae304":"code","0fbc304b":"code","6913b7d6":"code","fc8b6dfa":"code","0174709a":"code","a84c226e":"code","6969832b":"code","7b8187f1":"code","5e7a21e5":"code","b8e00ab7":"code","140aa26f":"code","b6bc15d8":"code","b52b08ea":"code","f9d5c201":"code","34f414b3":"code","6d986db9":"code","97622dc7":"code","00db155e":"markdown","a1732ef8":"markdown","92764249":"markdown","0da3e00f":"markdown","01d7fd8d":"markdown","e80fa2ee":"markdown","b626dbb4":"markdown","38ba0b26":"markdown","1f9950f2":"markdown","6972323c":"markdown","d7e67175":"markdown","ed2329d8":"markdown","b6f850b8":"markdown","c5e749b4":"markdown","065d3271":"markdown","0d4cad74":"markdown","8e154b5e":"markdown","e65edd49":"markdown","39677af0":"markdown","a646425e":"markdown","ef670e9d":"markdown","99b530c8":"markdown","5c5f6e98":"markdown","68a694be":"markdown","aafb9d3e":"markdown","8d0a40aa":"markdown","1442ec13":"markdown","03a2d34d":"markdown","347e12a9":"markdown","8905ad5f":"markdown","6926c6bd":"markdown","ac114c11":"markdown","960f63d6":"markdown","87184b25":"markdown","39664756":"markdown","483c231c":"markdown","dc276bb6":"markdown","0e03b1ca":"markdown","cd7e23af":"markdown","906c05a8":"markdown","a399274e":"markdown","51b7fa06":"markdown","a338db0d":"markdown","cfbb1ac2":"markdown"},"source":{"ab4c825d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6a4a757":"test_df = pd.read_csv(\"\/kaggle\/input\/marketing-seris-customer-lifetime-value\/squark_automotive_CLV_production_data.csv\")\ndf = pd.read_csv(\"\/kaggle\/input\/marketing-seris-customer-lifetime-value\/squark_automotive_CLV_training_data.csv\")","d1049748":"test_df","be226864":"df.head()","2957cee6":"df.info()","f54ca9be":"9134 - 8099 #No. of NaN values","b8ddb7c3":"df.isnull().sum()","475b547e":"null_ids = np.where(df.isnull())[0]\nnull_ids","950c7e02":"null_df = df.iloc[null_ids]\nnull_df","4c284589":"df.dropna(how='all', inplace=True)","7c69550d":"df.info()","4e72fb2a":"df","e8f83c03":"df.Education.value_counts()","791217bd":"df.Gender.value_counts()","c9dafcf5":"df.Response.value_counts()","cc147f61":"df.Coverage.value_counts()","34621657":"df['Effective To Date'].dtype","2f9c02d3":"df['Effective To Date'] = pd.to_datetime(df['Effective To Date'])","1af4d70e":"df.head()","00839d75":"df['Effective To Date'].dtype","79943148":"df.info()","228ccdd9":"df['Number of Open Complaints'].value_counts()","6db76f46":"df['Sales Channel'].value_counts()","fdde9969":"df['Location Code'].value_counts()","231b1497":"df['Customer Lifetime Value'].describe()","692c2ae4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9891dbbd":"plt.boxplot(df['Customer Lifetime Value'])\nplt.show()  #WOW outlier galore","61ca48df":"plt.hist(df[\"Customer Lifetime Value\"])\nplt.xlabel(\"Customer Lifetime Value\")\nplt.ylabel(\"Counts\")","925d7585":"CLV_85_quant = df[\"Customer Lifetime Value\"].quantile(0.85)\nprint(\"CLV 85th percentile:\", CLV_85_quant)\nprint()\nCLV_90_quant = df[\"Customer Lifetime Value\"].quantile(0.90)\nprint(\"CLV 90th percentile:\", CLV_90_quant)\nprint()\nCLV_95_quant = df[\"Customer Lifetime Value\"].quantile(0.95)\nprint(\"CLV 95th percentile:\", CLV_95_quant)\nprint()\nCLV_97_quant = df[\"Customer Lifetime Value\"].quantile(0.97)\nprint(\"CLV 97th percentile:\", CLV_97_quant)\nprint()\nCLV_100_quant = df[\"Customer Lifetime Value\"].quantile(1)\nprint(\"CLV 100th percentile:\", CLV_100_quant, \" <-- Mad jump!\") ","9fea2c5a":"fig, axes = plt.subplots(1, 2, figsize=(10, 5))\nsns.kdeplot(ax=axes[0], x=df[\"Customer Lifetime Value\"], shade=True)\nsns.ecdfplot(ax=axes[1], x=df[\"Customer Lifetime Value\"])\nplt.show()","3482bac5":"df[df[\"Customer Lifetime Value\"] < df[\"Customer Lifetime Value\"].quantile(0.25)]","e766197b":"df[\"Customer Lifetime Value\"].skew() #positive skew as noticed in the histogram","5d195fca":"pd.set_option('display.max_columns', None)","a05f9323":"df_highCLV = df[df[\"Customer Lifetime Value\"] > 30000].sort_values(by=\"Customer Lifetime Value\")\ndf_highCLV","f251ad1d":"len(df[df[\"Customer Lifetime Value\"] > 8000])","0bd8abf5":"df_highCLV.Response.value_counts(normalize=True)","42597377":"df[df[\"Customer Lifetime Value\"] < df[\"Customer Lifetime Value\"].quantile(0.25)].Response.value_counts(normalize=True)","69079bcc":"df.Response.value_counts(normalize=True) #Majority of the customers responded with a 'No'","f2560ea0":"outliersA = []\noutliersB = []\noutliersC = []\nfor i in df[\"Customer Lifetime Value\"]:\n    if i > 8000:\n        outliersA.append(i)\nfor j in df[\"Income\"]:\n    if j == 0.0:\n        outliersB.append(j)\nfor k in df[\"Monthly Premium Auto\"]:\n    if k > 140:\n        outliersC.append(k)\noutliers = outliersA + outliersB + outliersC\nprint(len(set(outliers)))","794a77c6":"8099 - 2477","28e665f8":"df.Income.describe()","27907662":"plt.boxplot(df.Income)\nplt.show()","d8f064f0":"plt.figure(figsize=(8,6))\nplt.hist(df.Income, bins=20)\nplt.xlabel(\"Counts\")\nplt.ylabel(\"Income\")","0792cd75":"ran = np.arange(0, 10001)\ndf[\"Income\"].isin(ran).sum()","1918521c":"len(df[(df.Income>=0) & (df.Income<=10000)])","470c29fb":"df.Income.value_counts(bins=7)","578ad05d":"any(df.Income < 0.0)","9738c373":"fig, axes = plt.subplots(1, 2, figsize=(10, 5))\nsns.kdeplot(ax=axes[0], x=df.Income, shade=True)\nsns.ecdfplot(ax=axes[1], x=df.Income)\nplt.show()","daf2baea":"import scipy.stats as stats","b7c5d9e0":"df_numerical = df.select_dtypes(\"float64\")\ndf_numerical.head()","bf08d3db":"plt.figure(figsize=(9,5))\nplt.subplot(121)\nplt.boxplot(df_numerical[\"Monthly Premium Auto\"])\nplt.subplot(122)\nplt.boxplot(df_numerical[\"Customer Lifetime Value\"])\nplt.show()    #Outlier Galore","df442fd5":"df[\"Monthly Premium Auto\"].describe()","e3b68f3e":"plt.hist(df[\"Monthly Premium Auto\"], bins=20)\nplt.xlabel(\"Count\")\nplt.ylabel(\"Monthly Premium Auto\")","a6d0e41a":"fig, axes = plt.subplots(1, 2, figsize=(10, 5))\nsns.kdeplot(ax=axes[0], x=df[\"Monthly Premium Auto\"], shade=True)\nsns.ecdfplot(ax=axes[1], x=df[\"Monthly Premium Auto\"])\nplt.show()","8c49cfd4":"CLV_MPA_corr, _ = stats.pearsonr(df[\"Customer Lifetime Value\"], df[\"Monthly Premium Auto\"])\nCLV_MPA_corr","104ca539":"plt.scatter(df_numerical[\"Monthly Premium Auto\"], df_numerical[\"Customer Lifetime Value\"])\nplt.xlabel(\"MPA\")\nplt.ylabel(\"CLV\")\nplt.show()  ","8c0e43e7":"sns.distplot(df[\"Monthly Premium Auto\"], kde=True, color='black')","25666b4e":"sns.violinplot(df[\"Monthly Premium Auto\"])","d7e4974a":"corr_numerical = df_numerical.corr()\ncorr_numerical[\"Customer Lifetime Value\"]","eaff6633":"sns.set(rc={'figure.figsize':(9,6)})\nmatrix = np.triu(corr_numerical)\nsns.heatmap(corr_numerical, annot=True, mask=matrix)","ee72cc8d":"df_numerical['Number of Open Complaints'].value_counts()","245c3666":"fig, axes = plt.subplots(1, 3, figsize=(17, 6))\nsns.histplot(ax=axes[0], x=df_numerical[\"Number of Open Complaints\"])\nsns.kdeplot(ax=axes[1], x=df_numerical[\"Number of Open Complaints\"], shade=True)\nsns.ecdfplot(ax=axes[2], x=df_numerical[\"Number of Open Complaints\"])\nplt.show()","eab9680c":"plt.scatter(df_numerical[\"Number of Open Complaints\"], df_numerical[\"Customer Lifetime Value\"])\nplt.xlabel(\"Open Complaints\")\nplt.ylabel(\"CLV\")\nplt.show()  ","a0c32862":"plt.boxplot(df_numerical[\"Total Claim Amount\"])\nplt.show()","d233454a":"fig, axes = plt.subplots(1, 3, figsize=(18, 6))\nsns.histplot(ax=axes[0], x=df_numerical[\"Total Claim Amount\"], bins=20)\nsns.kdeplot(ax=axes[1], x=df_numerical[\"Total Claim Amount\"], shade=True)\nsns.ecdfplot(ax=axes[2], x=df_numerical[\"Total Claim Amount\"])\nplt.show()","152c07c7":"plt.scatter(df[\"Total Claim Amount\"], df[\"Customer Lifetime Value\"])\nplt.xlabel(\"Claim Amount\")\nplt.ylabel(\"CLV\")\nplt.show()","95aafdb1":"df[\"Customer Lifetime Value\"].skew()   #Positive Skew","c9544905":"df_cat = df.select_dtypes(\"object\")\nCLV = df[\"Customer Lifetime Value\"]\ndf_cat = df_cat.join(CLV)\ndf_cat.head()\n#print(df_cat.shape)","4133b4c1":"sns.boxplot(data=df_cat, x=\"Coverage\", y=\"Customer Lifetime Value\")","dde4b6b4":"sns.countplot(data=df_cat, x='Coverage')","ad9a1455":"sns.violinplot(data=df_cat, x='Coverage', y='Customer Lifetime Value')","54a45e36":"sns.countplot(data=df_cat, x=\"Education\")\nplt.show()","16f80539":"sns.boxplot(data=df_cat, x=\"Education\", y=\"Customer Lifetime Value\")\nplt.show()","2613c438":"def plot_categorical(data, x_feat, y_feat, row, col, w, h):\n    fig , axes = plt.subplots(row, col, figsize=(w,h))\n    sns.countplot(ax=axes[0], data=data, x=x_feat)\n    sns.boxplot(ax=axes[1], data=data, x=x_feat, y=y_feat)\n    sns.violinplot(ax=axes[2], data=data, x=x_feat, y=y_feat)\n    plt.show()","b40738b1":"plot_categorical(data=df_cat, x_feat=\"Gender\", y_feat=\"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","fb47407f":"plot_categorical(data=df_cat, x_feat=\"Marital Status\", y_feat=\"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","bcaca977":"plot_categorical(df_cat, \"Location Code\", \"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","3a1ba593":"df_cat.groupby([\"Gender\"]).mean().sort_values(by=\"Customer Lifetime Value\", ascending=False)","87dee2fa":"df_cat.groupby([\"Marital Status\"]).mean().sort_values(by=\"Customer Lifetime Value\", ascending=False)","1ed486ce":"df_cat.groupby([\"Location Code\"]).mean().sort_values(by=\"Customer Lifetime Value\", ascending=False)","0320eb0c":"urban_marital_status = df_cat.loc[df[\"Location Code\"] == \"Urban\"]\nsns.countplot(data=urban_marital_status, x=\"Marital Status\")\nplt.show()\nprint(urban_marital_status[\"Marital Status\"].value_counts())","6c64fa12":"#urban_marital_status = df_cat.loc[df[\"Location Code\"] == \"Urban\"]\nsns.countplot(data=urban_marital_status, x=\"Gender\")\nplt.show()\nprint(urban_marital_status[\"Gender\"].value_counts())","bf7b06e2":"suburban_marital_status = df_cat.loc[df[\"Location Code\"] == \"Suburban\"]\nsns.countplot(data=suburban_marital_status, x=\"Marital Status\")\nplt.show()\nprint(suburban_marital_status[\"Marital Status\"].value_counts())","23ba1607":"#suburban_marital_status = df_cat.loc[df[\"Location Code\"] == \"Suburban\"]\nsns.countplot(data=suburban_marital_status, x=\"Gender\")\nplt.show()\nprint(suburban_marital_status[\"Gender\"].value_counts())","acbc3bec":"female_marital_status = df_cat.loc[df[\"Gender\"] == \"F\"]\nsns.countplot(data=female_marital_status, x=\"Marital Status\")\nplt.show()\nprint(female_marital_status[\"Marital Status\"].value_counts())","4ea9be9a":"sns.countplot(data=female_marital_status, x=\"Location Code\")\nplt.show()\nprint(female_marital_status[\"Location Code\"].value_counts())","0dad9aae":"sns.boxplot(data=female_marital_status, x=\"Location Code\", y=\"Customer Lifetime Value\")\nplt.show()","f4ce2682":"sns.boxplot(data=female_marital_status, x=\"Marital Status\", y=\"Customer Lifetime Value\")\nplt.show()","acb3afbd":"plot_categorical(data=df_cat, x_feat=\"Policy\", y_feat=\"Customer Lifetime Value\", row=3, col=1, w=12, h=18)","fd7cf921":"plot_categorical(data=df_cat, x_feat=\"Policy Type\", y_feat=\"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","441c6c55":"plot_categorical(data=df_cat, x_feat=\"Vehicle Class\", y_feat=\"Customer Lifetime Value\", row=3, col=1, w=10, h=17)","a9eb2d92":"plot_categorical(data=df_cat, x_feat=\"Vehicle Size\", y_feat=\"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","65c57063":"plot_categorical(data=df_cat, x_feat=\"Sales Channel\", y_feat=\"Customer Lifetime Value\", row=1, col=3, w=22, h=6)","a9ef1d0c":"from mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\n\nfig = plt.figure(figsize=(6,6))\nax = Axes3D(fig, auto_add_to_figure=False)\nfig.add_axes(ax)\n\n# get colormap from seaborn\ncmap = ListedColormap(sns.color_palette(\"husl\", 256).as_hex())\n\n# plot\nx = df_numerical[\"Customer Lifetime Value\"]\ny= df_numerical[\"Monthly Premium Auto\"]\nz = df_numerical[\"Total Claim Amount\"]\n\nsc = ax.scatter(x, y, z, s=40, c=x, marker='o', cmap=cmap, alpha=1)\nax.set_xlabel('CLV')\nax.set_ylabel('MPA')\nax.set_zlabel('Claim Amount')\n\n# legend\nplt.legend(*sc.legend_elements(), bbox_to_anchor=(1.05, 1), loc=2)","d9a770a4":"sns.scatterplot(data=df, x=\"Monthly Premium Auto\", y=\"Total Claim Amount\", hue=\"Vehicle Class\", size=\"Customer Lifetime Value\")\nplt.show()","a98e4f76":"sns.FacetGrid(df, hue=\"Policy Type\", height=6).map(plt.scatter, \"Customer Lifetime Value\", \"Monthly Premium Auto\").add_legend()\nplt.show()","8b947a5e":"sns.FacetGrid(df, hue=\"Policy Type\", height=6).map(plt.scatter, \"Income\", \"Customer Lifetime Value\").add_legend()\nplt.show()","3e9e75e3":"sns.FacetGrid(df, hue=\"Policy Type\", height=7).map(plt.scatter, \"Vehicle Class\", \"Customer Lifetime Value\").add_legend()\nplt.show()","bc1357cd":"sns.FacetGrid(df, hue=\"Education\", height=6).map(plt.scatter, \"Number of Open Complaints\", \"Customer Lifetime Value\").add_legend()\nplt.show()","9a1c41c6":"sns.scatterplot(data=df, x=\"Education\", y=\"Customer Lifetime Value\")\nplt.show()","8af97cb0":"sns.pairplot(df_numerical)\nplt.show()","56c2e036":"female_clv = df_cat[df_cat[\"Gender\"] == \"F\"][\"Customer Lifetime Value\"]\nmale_clv = df_cat[df_cat[\"Gender\"] == \"M\"][\"Customer Lifetime Value\"]\n#print(\"Female mean: \", female_mean, \"Male mean: \", male_mean)","abc0f2e2":"t_test, p_value = stats.ttest_ind(a=female_clv, b=male_clv, equal_var=False)","329591a2":"if p_value < 0.05:\n    print(\"Reject the Null Hypothesis\")\nelse:\n    print(\"Accept the Null Hypothesis\")","a537b824":"print(p_value)","e5980afc":"df_cat[\"Customer Lifetime Value\"].mean()","5f45c90b":"table_1 = pd.crosstab(df_cat[\"Policy Type\"], df_cat[\"Vehicle Class\"])\nprint(table_1)","53cea218":"obs_vals = table_1.values\nprint(obs_vals)","c3d0ce80":"val = stats.chi2_contingency(table_1)\nprint(val)","73f0a935":"exp_val = val[3]","d451833a":"no_rows = table_1.shape[0]\nno_cols = table_1.shape[1]\ndeg_of_free = (no_rows-1) * (no_cols-1)\nprint(\"Degrees of Freedom:\", deg_of_free)\nalpha = 0.05","b4b14966":"from scipy.stats import chi2\nchi_sq = sum([(o-e)**2.\/e for o,e in zip(obs_vals, exp_val)])\nchi_sq_stat = 0\nfor i in chi_sq:\n    chi_sq_stat += i\nprint(\"chi_squared:\", chi_sq)\nprint(\"Chi Squared statistic:\", chi_sq_stat)","721c9a40":"critical_val = chi2.ppf(q=1-alpha, df=deg_of_free)\nprint(\"Critical value:\", critical_val)","f1350614":"p_value = 1-chi2.cdf(x=chi_sq_stat, df=deg_of_free)\nprint(\"p_value:\", p_value)\nprint(\"Significance level:\", alpha)\nprint(\"Degrees of Freedom:\", deg_of_free)","80a65a7a":"if chi_sq_stat >= critical_val:\n    print(\"Reject H0, there is a relationship b\/w the 2 categorical features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 categorical features\")\n    \nif p_value <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 categorical features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 categorical features\")","6562c060":"from scipy.stats import f_oneway","15d90406":"df_cat[\"Policy Type\"].unique()","24f8f53c":"policy_corp = df_cat.loc[df_cat[\"Policy Type\"] == 'Corporate Auto'][\"Customer Lifetime Value\"]\npolicy_pers = df_cat.loc[df_cat[\"Policy Type\"] == 'Personal Auto'][\"Customer Lifetime Value\"]\npolicy_spec = df_cat.loc[df_cat[\"Policy Type\"] == 'Special Auto'][\"Customer Lifetime Value\"]","99f651dd":"anova_policy_type = f_oneway(policy_corp, policy_pers, policy_spec)\nprint(anova_policy_type)","1727f373":"veh_class_vals = df_cat[\"Vehicle Class\"].unique()\nprint(veh_class_vals)","9fd7adb3":"vehicle_1 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[0]][\"Customer Lifetime Value\"]\nvehicle_2 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[1]][\"Customer Lifetime Value\"]\nvehicle_3 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[2]][\"Customer Lifetime Value\"]\nvehicle_4 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[3]][\"Customer Lifetime Value\"]\nvehicle_5 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[4]][\"Customer Lifetime Value\"]\nvehicle_6 = df_cat.loc[df_cat[\"Vehicle Class\"] == veh_class_vals[5]][\"Customer Lifetime Value\"]\n\nanova_veh_class = f_oneway(vehicle_1, vehicle_2, vehicle_3, vehicle_4, vehicle_5, vehicle_6)\nprint(anova_veh_class)\n\nif anova_veh_class[1] <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 features\")","2bd354c2":"marital_stat = df_cat[\"Marital Status\"].unique()\nprint(marital_stat)","86fbc29f":"marital_1 = df_cat.loc[df_cat[\"Marital Status\"] == marital_stat[0]][\"Customer Lifetime Value\"]\nmarital_2 = df_cat.loc[df_cat[\"Marital Status\"] == marital_stat[1]][\"Customer Lifetime Value\"]\nmarital_3 = df_cat.loc[df_cat[\"Marital Status\"] == marital_stat[2]][\"Customer Lifetime Value\"]\n\n\nanova_marital_stat = f_oneway(marital_1, marital_2, marital_3)\nprint(anova_marital_stat)\n\nif anova_marital_stat[1] <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 features\")","11dceeef":"location = df_cat[\"Location Code\"].unique()\nprint(location)","95ee01bd":"location_1 = df_cat.loc[df_cat[\"Location Code\"] == location[0]][\"Customer Lifetime Value\"]\nlocation_2 = df_cat.loc[df_cat[\"Location Code\"] == location[1]][\"Customer Lifetime Value\"]\nlocation_3 = df_cat.loc[df_cat[\"Location Code\"] == location[2]][\"Customer Lifetime Value\"]\n\n\nanova_location = f_oneway(location_1, location_2, location_3)\nprint(anova_location)\n\nif anova_location[1] <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 features\")","635bfaec":"sales_channel = df_cat[\"Sales Channel\"].unique()\nprint(sales_channel)","c27bf923":"sales_1 = df_cat.loc[df_cat[\"Sales Channel\"] == sales_channel[0]][\"Customer Lifetime Value\"]\nsales_2 = df_cat.loc[df_cat[\"Sales Channel\"] == sales_channel[1]][\"Customer Lifetime Value\"]\nsales_3 = df_cat.loc[df_cat[\"Sales Channel\"] == sales_channel[2]][\"Customer Lifetime Value\"]\nsales_4 = df_cat.loc[df_cat[\"Sales Channel\"] == sales_channel[3]][\"Customer Lifetime Value\"]\n\nanova_sales_channel = f_oneway(sales_1, sales_2, sales_3, sales_4)\nprint(anova_sales_channel)\n\nif anova_sales_channel[1] <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 features\")","e0a05f32":"renew_off = df_cat[\"Renew Offer Type\"].unique()\nprint(renew_off)","4fdaa1a9":"renew_1 = df_cat.loc[df_cat[\"Renew Offer Type\"] == renew_off[0]][\"Customer Lifetime Value\"]\nrenew_2 = df_cat.loc[df_cat[\"Renew Offer Type\"] == renew_off[1]][\"Customer Lifetime Value\"]\nrenew_3 = df_cat.loc[df_cat[\"Renew Offer Type\"] == renew_off[2]][\"Customer Lifetime Value\"]\nrenew_4 = df_cat.loc[df_cat[\"Renew Offer Type\"] == renew_off[3]][\"Customer Lifetime Value\"]\n\nanova_renew_offer = f_oneway(renew_1, renew_2, renew_3, renew_4)\nprint(anova_renew_offer)\n\nif anova_renew_offer[1] <= alpha:\n    print(\"Reject H0, there is a relationship b\/w the 2 features\")\nelse:\n    print(\"Retain H0, there is no relationship b\/w the 2 features\")","851a422d":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_regression","36289924":"from sklearn.preprocessing import LabelEncoder\ndf_cat = df_cat.drop(\"Customer Lifetime Value\", axis=1)","10e2642d":"df_cat.head()","eaab9001":"lab_encod = LabelEncoder()\nfor i in df_cat:\n    df_cat[i] = lab_encod.fit_transform(df_cat[i])\ndf_cat.head()","f61fb406":"df_encod = pd.concat([df_numerical, df_cat], axis=1)\ndf_encod.head()","b45caaab":"X = df_encod.drop('Customer Lifetime Value', axis=1)\ny = df_encod.iloc[:, 0] #CLV","bad48f13":"X.head()","e41c99ab":"best_features = SelectKBest(score_func=mutual_info_regression, k='all')\nfit = best_features.fit(X, np.log(y))","fe616ad0":"dfscores = pd.DataFrame(fit.scores_)\ndfcols = pd.DataFrame(X.columns)","f4d59ccf":"featureScore = pd.concat([dfscores, dfcols], axis=1)\nfeatureScore.columns = [\"Score\", \"Feature\"]\nfeatureScore","2d4144b9":"print(featureScore.nlargest(10, \"Score\"))","ae142a6e":"best_feat = ['Income', 'Total Claim Amount', 'Monthly Premium Auto', 'Months Since Policy Inception',\n             'Coverage', 'Vehicle Class', 'Months Since Last Claim', 'Number of Policies', 'Response', 'EmploymentStatus',\n            'Renew Offer Type']","8fb92333":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.diagnostic import het_breuschpagan","586ee695":"x = sm.add_constant(X)\ny = df_encod[\"Customer Lifetime Value\"]\nstats_mod = sm.OLS(y, x).fit()","7851d947":"x.shape","cd766d64":"bp_test = het_breuschpagan(stats_mod.resid, stats_mod.model.exog)","a4bf0857":"labels = ['LM Statistic', 'LM-Test p-value', 'F-Statistic', 'F-Test p-value']\nop_dict = dict(zip(labels, bp_test))\nprint(op_dict)","e3ee323d":"if op_dict[\"F-Test p-value\"] <= 0.05:\n    print(\"The dataset is Heteroskedastic\")\nelse:\n    print(\"The dataset is Homoskedastic\")","cdf018f3":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","56572a50":"np.random.seed(42)","4e137204":"X_best = X[best_feat]\nX_best.head()","ce24bca9":"print(X_best.shape, y.shape)","1d6c86dc":"y_log = np.log(y) #mitigate the skew and the heteroskedasticity","1252acb7":"X_train, X_test, y_train, y_test = train_test_split(X_best, y_log, test_size=0.3, random_state=42)","4c36b36c":"print(\"X train shape:\", X_train.shape)\nprint(\"y train shape:\", y_train.shape)\nprint(\"X test shape:\", X_test.shape)\nprint(\"y test shape:\", y_test.shape)","b8ae1f57":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score","459f7a31":"lin_reg = LinearRegression()\nlin_mod = lin_reg.fit(X_train, y_train)","3429502f":"lin_y_pred = lin_mod.predict(X_test)","868d3cad":"print(\"Linear Regression MSE:\", mean_squared_error(y_test, lin_y_pred))\nprint(\"Linear Regression RMSE:\", np.sqrt(mean_squared_error(y_test, lin_y_pred)))\nprint(\"Linear Regression MAE:\", mean_absolute_error(y_test, lin_y_pred))\nprint(\"Linear Regression R2 Score:\", r2_score(y_test, lin_y_pred))","e68cccb6":"df['Months Since Last Claim'].describe()","db22e264":"scale_em = [\"Monthly Premium Auto\", \"Income\", \"Total Claim Amount\", \"Months Since Last Claim\", \"Months Since Policy Inception\"]\nfrom sklearn.preprocessing import StandardScaler\nstd_scaler = StandardScaler()","622cd241":"X_train[scale_em] = std_scaler.fit_transform(X_train[scale_em])\nX_test[scale_em] = std_scaler.transform(X_test[scale_em])","7c9d3f26":"X_train.head()","df0aae66":"svm = SVR(kernel='rbf', C=100, epsilon=0.2)\nsvm_mod1 = svm.fit(X_train, y_train)","600785f6":"svm_y_pred = svm_mod1.predict(X_test)","0bfea7c2":"print(\"SVM MSE:\", mean_squared_error(y_test, svm_y_pred))\nprint(\"SVM RMSE:\", np.sqrt(mean_squared_error(y_test, svm_y_pred)))\nprint(\"SVM MAE:\", mean_absolute_error(y_test, svm_y_pred))\nprint(\"SVM R2 Score:\", r2_score(y_test, svm_y_pred))","634beb61":"print(X_train.size, y_train.size)","a756c829":"plt.scatter(X_train[\"Monthly Premium Auto\"],y_train)\nplt.plot(X_test[\"Monthly Premium Auto\"], svm_y_pred, 'k-')\nplt.show()","d45d0e7d":"rf_reg = RandomForestRegressor(n_estimators=150, random_state=42)\nrf_mod = rf_reg.fit(X_train, y_train)","c59223fc":"rf_y_pred = rf_mod.predict(X_test)","61482a9d":"print(\"Random Forest MSE:\", mean_squared_error(y_test, rf_y_pred))\nprint(\"Random Forest RMSE:\", np.sqrt(mean_squared_error(y_test, rf_y_pred)))\nprint(\"Random Forest MAE:\", mean_absolute_error(y_test, rf_y_pred))\nprint(\"Random Forest R2 Score:\", r2_score(y_test, rf_y_pred))","23b4d0ab":"gb_reg = GradientBoostingRegressor(n_estimators=150, random_state=42)\ngb_mod = gb_reg.fit(X_train, y_train)","70dab089":"gb_y_pred = gb_mod.predict(X_test)","16398950":"print(\"Gradient Boosting MSE:\", mean_squared_error(y_test, gb_y_pred))\nprint(\"Gradient Boosting RMSE:\", np.sqrt(mean_squared_error(y_test, gb_y_pred)))\nprint(\"Gradient Boosting MAE:\", mean_absolute_error(y_test, gb_y_pred))\nprint(\"Gradient Boosting R2 Score:\", r2_score(y_test, gb_y_pred))","a3a489eb":"from sklearn.model_selection import GridSearchCV\n\nrf_reg = RandomForestRegressor(random_state=42)\nparams = {'max_depth' : [10,20,30,40], 'n_estimators' : [100,200,150], 'bootstrap' : [True, False],\n          'max_features': ['auto', 'sqrt', 'log2'], 'max_leaf_nodes':[None, 2]}\n\nhp_tune = GridSearchCV(estimator=rf_reg, param_grid=params, scoring=\"neg_mean_squared_error\", cv=5, n_jobs=-1, return_train_score=True)\nhp_tune.fit(X_train,y_train)","13da18fe":"hp_tune.best_params_","63d2a9e3":"hp_tune.best_estimator_","91943e78":"rf_param = RandomForestRegressor(**hp_tune.best_params_)\nrf_mod_2 = rf_param.fit(X_train, y_train)","48ac6c81":"rf_pred2 = rf_mod_2.predict(X_test)","9c03dcae":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(gb_reg, X_train, y_train,\n                       scoring=\"neg_mean_squared_error\", cv=10)\ngb_rmse_scores = np.sqrt(-scores)\nprint(\"Scores:\", gb_rmse_scores)\nprint(\"Mean score:\", np.mean(gb_rmse_scores))\nprint(\"Std score:\", np.std(gb_rmse_scores))","8c3ba23a":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(rf_mod, X_train, y_train,\n                       scoring=\"neg_mean_squared_error\", cv=10)\nrf_rmse_scores = np.sqrt(-scores)\nprint(\"Scores:\", rf_rmse_scores)\nprint(\"Mean score:\", np.mean(rf_rmse_scores))\nprint(\"Std score:\", np.std(rf_rmse_scores))","09bbc15b":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(rf_param, X_train, y_train,\n                       scoring=\"neg_mean_squared_error\", cv=10)\nrf_rmse_scores = np.sqrt(-scores)\nprint(\"Scores:\", rf_rmse_scores)\nprint(\"Mean score:\", np.mean(rf_rmse_scores))\nprint(\"Std score:\", np.std(rf_rmse_scores))","03f14c55":"scores = cross_val_score(svm_mod1, X_train, y_train,\n                       scoring=\"neg_mean_squared_error\", cv=10)\nsvm_rmse_scores = np.sqrt(-scores)\nprint(\"Scores:\", svm_rmse_scores)\nprint(\"Mean score:\", np.mean(svm_rmse_scores))\nprint(\"Std score:\", np.std(svm_rmse_scores))","a1ca7c18":"from xgboost import XGBRegressor","3d55b6a3":"xgb = XGBRegressor(random_state=42)\nxgb_mod = xgb.fit(X_train, y_train)","a84013b9":"xgb_y_pred = xgb_mod.predict(X_test)","019383c4":"print(\"XGB MSE:\", mean_squared_error(y_test, xgb_y_pred))\nprint(\"XGB RMSE:\", np.sqrt(mean_squared_error(y_test, xgb_y_pred)))\nprint(\"XGB MAE:\", mean_absolute_error(y_test, xgb_y_pred))\nprint(\"XGB R2 Score:\", r2_score(y_test, xgb_y_pred))","51fae304":"any(test_df.isnull().sum())","0fbc304b":"test_df_num = test_df.select_dtypes([\"float64\", \"int64\"])\ntest_df_num.head()","6913b7d6":"test_df.info()","fc8b6dfa":"scale_em","0174709a":"test_df_num[scale_em] = std_scaler.transform(test_df_num[scale_em])","a84c226e":"test_df_cat = test_df.select_dtypes(\"object\")","6969832b":"test_df_cat.head()","7b8187f1":"for i in test_df_cat:\n    test_df_cat[i] = lab_encod.fit_transform(test_df_cat[i])\ntest_df_cat.head()","5e7a21e5":"best_feat","b8e00ab7":"new_test_df = pd.concat([test_df_cat, test_df_num], axis=1)","140aa26f":"for i in best_feat:\n    if i not in new_test_df:\n        print(i)","b6bc15d8":"no_policies = test_df[\"Number of Policies\"]\nnew_test_df = new_test_df.merge(no_policies)","b52b08ea":"new_test_df.head()","f9d5c201":"op = rf_param.predict(new_test_df[best_feat])","34f414b3":"op.shape, new_test_df.shape","6d986db9":"new_test_df['Customer Lifetime Value'] = np.exp(op)\n\ndf_out = pd.merge(test_df,new_test_df[['Customer Lifetime Value']],how = 'left',left_index = True, right_index = True)","97622dc7":"df_out","00db155e":"## Multivariate Analysis","a1732ef8":"### Random Forest","92764249":"People with lesser complaints are more likely to have a higher CLV. Hence the negative correlation!","0da3e00f":"# EDA","01d7fd8d":"# Predicting the output for test_df","e80fa2ee":"Married Suburban Female clients tend to bring in the most profit!","b626dbb4":"Could be a case of the People with Special Auto Policy are charged with lesser Premiums and also being irresponsible with their vehicles because their CLV isn't a lot and could be causing the company some damage.","38ba0b26":"### Gradient Boosting and Hyperparam tuning","1f9950f2":"### Linear Regression ","6972323c":"## Gender, Marital Status and Location code","d7e67175":"## Education","ed2329d8":"Chi Squared Test between policy type and vehicle class","b6f850b8":"## Monthly Premium Auto","c5e749b4":"# Model Selection and train test split","065d3271":"### Policy Type","0d4cad74":"## Categorical Features!","8e154b5e":"Inspite of their being what looks like outliers in a right skewed data, but we can't start messing around with it just yet!","e65edd49":"Females have a better mean CLV because of the higher population of females perhaps. So, they're there is no proper evidence that the female clients are more profitable. ","39677af0":"**Let's try to look at different features in this dataset and their relationship with Customer Lifetime Value**","a646425e":"### Heteroskedasticity Test","ef670e9d":"## Bivariate Analysis","99b530c8":"### XGB","5c5f6e98":"## Coverage","68a694be":"### Sales Channel and Renew Offer type","aafb9d3e":"### 2Sample T-test between the genders","8d0a40aa":"Some correlation between CLV and Total Claim Amount. So, the people generally have a claim amount 0-1500. The units are confusing, perhaps it is in thousands of dollars.","1442ec13":"# Significance Testing","03a2d34d":"About the same effect of each Qualification, Let's build a function to make your lives easier!","347e12a9":"There are more female clients than male, hence bringing in a better average CLV.\nMarital Status and Location Code are strikingly similar. Married people are the most popular and seems as though they are mostly from a suburban setting. While divorced clients seem to bring the best mean CLV. Rural clients seem to be bringing in a better CLV than the suburban clients.","8905ad5f":"## ANOVA Test","6926c6bd":"### Vehicle Class","ac114c11":"### Marital Status and Location Code","960f63d6":"Dataset is heteroskedastic.\nHomoskedastic = E(y|x1,x2,...,x23) == var A case where all the variables have a constant residual w.r.t the dependent variable. This is however not the case and we should therefore fix this by applying natural logrithm to the dependent variable.","87184b25":"# Feature Selection and Categorical Encoding","39664756":"H0: Female and male clients are equally profitable\n\nHA: Female clients are more profitable","483c231c":"ANOVA test to compare categorical variables with CLV. alpha = 0.05!","dc276bb6":"Clients with Personal Policies are the most profitable whereas the Special Auto Policy type are the least.","0e03b1ca":" We'll have to do Chi-squared test and ANOVA test with a few of these variables later","cd7e23af":"## Total Claim Amount","906c05a8":"### Support Vector Machine","a399274e":"## Number of Open Complaints","51b7fa06":"Just over the threshold! H0 stays and therefore the 2 features are not significant","a338db0d":"CLV and MPA are correlated. However there are other factors that help determine the CLV.\nLeaning towards the decision to not eliminate the large values seen in both the boxplots of CLV and MPA.\nPloughing through!!","cfbb1ac2":"### Function to plot categorical features"}}