{"cell_type":{"75e78392":"code","2f045ab1":"code","338644df":"code","46fc0ec5":"code","2f1f8fa3":"code","947f3be1":"code","59ff4fa6":"code","b06fc703":"code","9e04f41c":"code","a8e2ddcc":"code","75c9e665":"code","bdb54546":"code","872f6685":"code","126dd52a":"code","3851e090":"code","c8b9707d":"code","60b2ed70":"code","5571603b":"code","344afba2":"code","8f7a2cd0":"code","29940b00":"code","b6dfe09d":"code","4f827b48":"code","27ad4618":"code","3092aadf":"code","505f0ca8":"code","b1f3c8a2":"code","90f6ea9c":"code","93626131":"code","a5059851":"code","ee948bea":"code","a97c14bc":"code","901e5193":"code","339ed636":"code","81e23d08":"markdown","af796838":"markdown","7f7a6755":"markdown"},"source":{"75e78392":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f045ab1":"median_house_hold_in_come = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","338644df":"percentage_people_below_poverty_level.head()","46fc0ec5":"# Poverty rate of each state\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","2f1f8fa3":"# Most common 15 Name or Surname of killed people\nseparate = kill.name[kill.name != 'TK TK'].str.split() \na,b = zip(*separate)                    \nname_list = a+b                         \nname_count = Counter(name_list)         \nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n# \nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')","947f3be1":"percent_over_25_completed_highSchool.head()","59ff4fa6":"percent_over_25_completed_highSchool.info()","b06fc703":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique())\narea_highschool = []\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i]\n    area_highschool_rate = sum(x.percent_completed_hs)\/len(x)\n    area_highschool.append(area_highschool_rate)\n# sorting\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool})\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_highschool_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","9e04f41c":"share_race_city.head()","a8e2ddcc":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nshare_race_city.replace(['-'],0.0,inplace = True)\nshare_race_city.replace(['(X)'],0.0,inplace = True)\nshare_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race_city.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race_city['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race_city[share_race_city['Geographic area']==i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white,y=area_list,color='green',alpha = 0.5,label='White' )\nsns.barplot(x=share_black,y=area_list,color='blue',alpha = 0.7,label='African American')\nsns.barplot(x=share_native_american,y=area_list,color='cyan',alpha = 0.6,label='Native American')\nsns.barplot(x=share_asian,y=area_list,color='yellow',alpha = 0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='red',alpha = 0.6,label='Hispanic')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of State's Population According to Races \")","75c9e665":"# high school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max( sorted_data['area_poverty_ratio'])\nsorted_data2['area_highschool_ratio'] = sorted_data2['area_highschool_ratio']\/max( sorted_data2['area_highschool_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_highschool_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='area_list',y='area_poverty_ratio',data=data,color='blue',alpha=0.8)\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='orange',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio',color='orange',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'poverty ratio',color='blue',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('High School Graduate  VS  Poverty Rate',fontsize = 20,color='blue')\nplt.grid()","bdb54546":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_poverty_ratio, data.area_highschool_ratio, kind=\"kde\", size=10)\nplt.savefig('graph.png')\nplt.show()","872f6685":"data.head()","126dd52a":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"area_highschool_ratio\", data=data,size=7, ratio=3, color=\"r\")","3851e090":"kill.head()","c8b9707d":"kill.race.dropna(inplace = True)\nlabels = kill.race.value_counts().index\ncolors = {\"red\",\"green\",\"grey\",\"blue\",\"brown\",\"yellow\"}\nexplode = [ 0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n#visualization\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode = explode, labels = labels, colors=colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color = 'blue', fontsize = 15)\n","60b2ed70":"#Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code \n#lmplot\n#Show the results of a linear regression within each dataset\n\nsns.lmplot(x=\"area_poverty_ratio\",y=\"area_highschool_ratio\",data = data)\nplt.show()","5571603b":"#cubehelix plot\nsns.kdeplot(data.area_poverty_ratio,data.area_highschool_ratio, color='red',shade = True, cut=3)\nplt.show()","344afba2":"pal = sns.cubehelix_palette(2,rot =.5, dark =.3)\nsns.violinplot(data = data, palette = pal, inner=\"points\" )\nplt.show()","8f7a2cd0":"data.head()","29940b00":"f,ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(), annot=True,linewidth=.5,fmt='.1f', ax = ax)","b6dfe09d":"data.corr()","4f827b48":"#gender\n#age\n#Plot the orbital period with horrizontal boxes\nsns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data = kill, palette='PRGn')\nplt.show()","27ad4618":"#hue mean is class. It seperates classes.","3092aadf":"kill.head()","505f0ca8":"#swarm plot\n#manner of death : etes edilerek , sok tabancasiyla\n\nsns.swarmplot(x=\"gender\", y=\"age\", hue =\"manner_of_death\", data=kill)\n#Classification algoritmalar\u0131nda kullan\u0131ld\u0131\u0131g\u0131nda direk bize bir datay\u0131 nas\u0131l ay\u0131rabilece\u011fimizi g\u00f6sterir.\n#It shows that  (Who, how, how old) shooted.\nplt.show()","b1f3c8a2":"sns.pairplot(data)\nplt.show()","90f6ea9c":"#Count Plot\n#kill properties\n#Manner of death\n\nsns.countplot(kill.gender)\nsns.countplot(kill.manner_of_death)\nplt.title(\"gender\",color=\"blue\", fontsize = 15)","93626131":"# kill weapon\narmed = kill.armed.value_counts()\n#print(armed)\nplt.figure(figsize=(10,7))\nsns.barplot(x=armed[:7].index,y=armed[:7].values)\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","a5059851":"above25 =['above25' if i >= 25 else 'below25' for i in kill.age]\ndf = pd.DataFrame({'age':above25})\nsns.countplot(x=df.age)\nplt.ylabel('Number of Killed People')\nplt.title('Age of killed people',color = 'blue',fontsize=15)","ee948bea":"# Race of killed people\nsns.countplot(data=kill, x='race')\nplt.title('Race of killed people',color = 'blue',fontsize=15)","a97c14bc":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize=(10,7))\nsns.barplot(x=city[:12].index,y=city[:12].values)\nplt.xticks(rotation=45)\nplt.title('Most dangerous cities',color = 'blue',fontsize=15)","901e5193":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)","339ed636":"# Kill numbers from states in kill data\nsta = kill.state.value_counts().index[:10]\nsns.barplot(x=sta,y = kill.state.value_counts().values[:10])\nplt.title('Kill Numbers from States',color = 'blue',fontsize=15)","81e23d08":"# Joint Plot","af796838":"# Point Plot\n","7f7a6755":"# Bar Plot\n"}}