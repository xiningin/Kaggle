{"cell_type":{"14c61d0b":"code","c9d2ee16":"code","a4c053f0":"code","3f0e5d4f":"code","c20e2bad":"code","a7338a15":"code","27ddcdfe":"code","313fdc33":"code","63a58639":"code","6ccc7ba0":"code","104d7862":"code","f9dec227":"code","60246387":"code","6cae4f63":"code","79b41d55":"code","c21801b7":"markdown","23f17635":"markdown","162f65d6":"markdown","9bfe6a31":"markdown","ed1c96d2":"markdown","a0706bee":"markdown"},"source":{"14c61d0b":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\n\nfrom sklearn.model_selection import GridSearchCV","c9d2ee16":"data = pd.read_csv(\"..\/input\/concrete-compressive-strength-data-set\/concrete_data.csv\")\ndata.head()","a4c053f0":"data.shape","3f0e5d4f":"data.info()","c20e2bad":"data.describe()","a7338a15":"data","27ddcdfe":"def preprocess_input(df):\n    df = df.copy()\n    \n    y = df['concrete_compressive_strength'].copy()\n    X = df.drop('concrete_compressive_strength', axis=1).copy()\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = pd.DataFrame(scaler.transform(X_train), columns = X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","313fdc33":"X_train, X_test, y_train, y_test = preprocess_input(data)","63a58639":"print(X_train.mean())","6ccc7ba0":"print(X_train.var())","104d7862":"models = {\n    \"                     Linear Regression\" : LinearRegression(),\n    \"                 L2 (Ridge) Regression\" : Ridge(),\n    \"Support Vector Machine (Linear Kernel)\" : LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\" : SVR(),\n    \"                         Decision Tree\" : DecisionTreeRegressor(),\n    \"                        Neural Network\" : MLPRegressor(),\n    \"                         Random Forest\" : RandomForestRegressor(),\n    \"                     Gradient Boosting\" : GradientBoostingRegressor(),\n    \"                              AdaBoost\" : AdaBoostRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" model trained.\")","f9dec227":"for name, model in models.items():\n    print(name + \" R^2 : {:.5f}\".format(model.score(X_test,y_test)))","60246387":"best_model = GradientBoostingRegressor()\nbest_model.fit(X_train, y_train)\n\nprint(\"Model R^2 (Before Optimization) : {:.5f}\".format(best_model.score(X_test,y_test)))","6cae4f63":"params = {\n    'learning_rate' : [0.01, 0.1, 1.0],\n    'n_estimators' : [100, 150, 200],\n    'max_depth' : [3, 4, 5]\n}\n\nclf = GridSearchCV(best_model, params)\nclf.fit(X_train, y_train)\n\nclf.best_params_","79b41d55":"print(\"Model R^2 (After Optimization) : {:.5f}\".format(clf.score(X_test,y_test)))","c21801b7":"# Analyzing Dataset","23f17635":"# Model Selection","162f65d6":"# Importing Librabies","9bfe6a31":"# Finding Best Parameters for Gradient Boosting with GridSearchCV","ed1c96d2":"# Model Optimization","a0706bee":"# Prepocessing"}}