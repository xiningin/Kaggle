{"cell_type":{"22bfa749":"code","c585a45f":"code","394f5e04":"code","a7ba95b5":"code","7e39b836":"code","41ed0535":"markdown","0fbb4d62":"markdown","eaa6915a":"markdown","299d7f81":"markdown","cf6bd660":"markdown","83d2e3b3":"markdown","8e1158c0":"markdown","885888a5":"markdown"},"source":{"22bfa749":"import numpy as np \nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid', {\"axes.grid\" : False})\nsns.set_context('notebook')\nnp.random.seed(42)","c585a45f":"iris            = pd.read_csv(\".\/data\/iris.csv\")\nlenses          = pd.read_csv(\".\/data\/lenses_final.csv\")\ncar             = pd.read_csv(\".\/data\/cars.csv\")\nhorsecolic      = pd.read_table(\".\/data\/horse-colic.data\")","394f5e04":"from sklearn.neighbors import KNeighborsClassifier","a7ba95b5":"baseDados = pd.read_csv('data\/base_knn.csv')\n\nh = .01\nx_min, x_max = baseDados.X1.min() - 1, baseDados.X1.max() + 1\ny_min, y_max = baseDados.X2.min() - 1, baseDados.X2.max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n\nplt.scatter(baseDados.X1[baseDados.Y == 0], baseDados.X2[baseDados.Y == 0], c = 'darkgreen', marker = '_')\nplt.scatter(baseDados.X1[baseDados.Y == 1], baseDados.X2[baseDados.Y == 1], c = 'black', marker = '+')","7e39b836":"KNN = KNeighborsClassifier(n_neighbors = 2)\nX = baseDados[['X1','X2']]\nY = baseDados.Y\nKNN.fit(X,Y)\n\nZ = KNN.predict(np.c_[xx.ravel(), yy.ravel()])\n\nZ = Z.reshape(xx.shape)\nplt.figure()\nplt.pcolormesh(xx, yy, Z, cmap = plt.cm.Accent)\n\npred = KNN.predict(X)\nplt.scatter(baseDados.X1[Y == 0], baseDados.X2[Y == 0], c = 'darkgreen', marker = '_')\nplt.scatter(baseDados.X1[Y == 1], baseDados.X2[Y == 1], c = 'black', marker = '+')\nplt.scatter([2.5],[2.5], s = 100, c = 'darkgreen' if KNN.predict([[2.5,2.5]]) == 0 else 'black')\nplt.scatter([1.5],[1.0], s = 100, c = 'darkgreen' if KNN.predict([[1.5,1.0]]) == 0 else 'black')\nplt.scatter([3.5],[3.0], s = 100, c = 'darkgreen' if KNN.predict([[3.5,3.0]]) == 0 else 'black')","41ed0535":"Agora treinamos o algoritmo KNN e exibimos a fun\u00e7\u00e3o de decis\u00e3o (modelo) gerada pelo algoritmo.\n\n<b>Os c\u00edrculos s\u00e3o novos pontos que desejamos classificar como negativo ou positivo.<\/b>","0fbb4d62":"<h3> Scikit-Learn <\/h3>\nAgora, vamos rodar os c\u00f3digos abaixo que usam uma implementa\u00e7\u00e3o do algoritmo dispon\u00edvel no pacote <i>sklearn<\/i> (Scikit-Learn). Iremos ver como a escolha do <b>K<\/b> \u00e9 importante para o resultado do algoritmo.","eaa6915a":"Primeiro lemos a base, visualizamos e preparamos as vari\u00e1veis <i>xx<\/i> e <i>yy<\/i> que ser\u00e3o usadas para colorir a \u00e1rea que pertence \u00e0 cada classe na visualiza\u00e7\u00e3o do modelo","299d7f81":"<h1 style=\"text-align:center\"> Machine Learning Hands-On <\/h1>","cf6bd660":"<h2 style=\"text-align:center; margin:40px\"> KNN <\/h2>\n\n![](img\/knn.png)\n\nO algoritmo <b>K Nearest Neighbors (KNN)<\/b> consiste em encontrar os <b>K<\/b> vizinhos mais pr\u00f3ximos para determinar a classe (ou valor) de um elemento desconhecido.\n\n<b>Classifica\u00e7\u00e3o<\/b>:\n\n<ul>\n    <li>Vota\u00e7\u00e3o simples<\/li>\n    <li>Vota\u00e7\u00e3o ponderada pela dist\u00e2ncia<\/li>\n    <li>Etc...<\/li>\n<\/ul>\n\n<b>Regress\u00e3o<\/b>:\n\n<ul>\n    <li>M\u00e9dia simples<\/li>\n    <li>M\u00e9dia ponderada pela dist\u00e2ncia<\/li>\n    <li>Etc...<\/li>\n<\/ul>\n\n<h4><font color = \"red\">Aten\u00e7\u00e3o:<\/font> O KNN \u00e9 um algoritmo computacionalmente caro! <\/h4>","83d2e3b3":"<h3 class=\"title\"> Links \u00fateis: <\/h3>\n<br>\n<ol>\n  <li class=\"item\"><a href = \"http:\/\/scikit-learn.org\/stable\/\"> Sklearn<\/a>: principal biblioteca de aprendizado de m\u00e1quina para python.<\/li>\n  <li class=\"item\"><a href = \"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/\"> Pandas<\/a>: (quase) tudo o que voc\u00ea precisa para trabalhar rapidamente com tabelas<\/li>\n  <li class=\"item\"><a href = \"https:\/\/docs.scipy.org\/doc\/numpy\/reference\/index.html\"> Numpy<\/a>: fun\u00e7\u00f5es matem\u00e1ticas est\u00e3o aqui<\/li>\n  <li class=\"item\"><a href = \"https:\/\/matplotlib.org\/contents.html\"> Matplotlib<\/a>: te ajuda a plotar!<\/li>\n  <li class=\"item\"><a href = \"https:\/\/seaborn.pydata.org\/api.html\"> Seaborn<\/a>: Deixa a matplotlib bonita (cont\u00e9m plots mais bem estruturados)<\/li>\n<\/ol>","8e1158c0":"<b>Trabalharemos com as seguintes bases de dados:<\/b>\n- iris.csv\n- lenses_final.csv\n- car.data\n- horse-colic.data\n- PETR4.SA.csv\n- Boston.csv\n- artificial_data\n\n<b>Testem a leitura de um dos arquivos deste curso<\/b>\n- Acessem a documenta\u00e7\u00e3o da fun\u00e7\u00e3o <i>read_csv<\/i> do <i>pandas<\/i>: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.read_csv.html","885888a5":"<b>Vinicius F. Carid\u00e1<\/b>"}}