{"cell_type":{"4862fd89":"code","49c30e2e":"code","214d6933":"code","2fd54aec":"code","c216b9b3":"code","32d9e9be":"code","b99f3b67":"code","fed760a2":"code","80a07d25":"code","aa98d30f":"code","570df861":"code","ef8c77b4":"code","8cba2d88":"code","7627c697":"code","b34958e7":"code","2b5aded4":"code","b391ac1f":"code","9294382d":"code","2a7521c9":"code","b01bd99e":"markdown"},"source":{"4862fd89":"#import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nmatplotlib.rcParams[\"figure.figsize\"] = (12,10)\nimport seaborn as sns\n\n\nfrom sklearn.impute import SimpleImputer\n\n#Model library\nfrom sklearn.model_selection import train_test_split,cross_val_score, KFold, StratifiedKFold\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\n## import packages\nfrom tpot import TPOTClassifier\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler, RobustScaler\nimport datatable as dt\n\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, confusion_matrix, accuracy_score,roc_auc_score,mean_squared_error\nfrom tqdm import tqdm\nimport gc","49c30e2e":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\nsample= pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\ntrain.shape,test.shape","214d6933":"train.head()","2fd54aec":"train.info()","c216b9b3":"train.describe().T.style.bar(subset=['mean'], color='#FF595E')\\\n                           .background_gradient(subset=['50%'], cmap='PiYG') # highlight median","32d9e9be":"features = [x for x in train.columns.values if x[0]==\"f\"]","b99f3b67":"train['n_missing'] = train[features].isna().sum(axis=1)\ntrain['abs_sum'] = train[features].abs().sum(axis=1)\ntrain['sem'] = train[features].sem(axis=1)\ntrain['std'] = train[features].std(axis=1)\ntrain['avg'] = train[features].mean(axis=1)\ntrain['max'] = train[features].max(axis=1)\ntrain['min'] = train[features].min(axis=1)\n\ntest['n_missing'] = test[features].isna().sum(axis=1)\ntest['abs_sum'] = test[features].abs().sum(axis=1)\ntest['sem'] = test[features].sem(axis=1)\ntest['std'] = test[features].std(axis=1)\ntest['avg'] = test[features].mean(axis=1)\ntest['max'] = test[features].min(axis=1)\ntest['min'] = test[features].min(axis=1)","fed760a2":"fill_value_dict = {\n    'f1': 'Mean', \n    'f2': 'Median', \n    'f3': 'Median', \n    'f4': 'Median', \n    'f5': 'Mode', \n    'f6': 'Mean', \n    'f7': 'Median', \n    'f8': 'Median', \n    'f9': 'Median', \n    'f10': 'Median', \n    'f11': 'Mean', \n    'f12': 'Median', \n    'f13': 'Mean', \n    'f14': 'Median', \n    'f15': 'Mean', \n    'f16': 'Median', \n    'f17': 'Median', \n    'f18': 'Median', \n    'f19': 'Median', \n    'f20': 'Median', \n    'f21': 'Median', \n    'f22': 'Mean', \n    'f23': 'Mode', \n    'f24': 'Median', \n    'f25': 'Median', \n    'f26': 'Median', \n    'f27': 'Median', \n    'f28': 'Median', \n    'f29': 'Mode', \n    'f30': 'Median', \n    'f31': 'Median', \n    'f32': 'Median', \n    'f33': 'Median', \n    'f34': 'Mean', \n    'f35': 'Median', \n    'f36': 'Mean', \n    'f37': 'Median', \n    'f38': 'Median', \n    'f39': 'Median', \n    'f40': 'Mode', \n    'f41': 'Median', \n    'f42': 'Mode', \n    'f43': 'Mean', \n    'f44': 'Median', \n    'f45': 'Median', \n    'f46': 'Mean', \n    'f47': 'Mode', \n    'f48': 'Mean', \n    'f49': 'Mode', \n    'f50': 'Mode', \n    'f51': 'Median', \n    'f52': 'Median', \n    'f53': 'Median', \n    'f54': 'Mean', \n    'f55': 'Mean', \n    'f56': 'Mode', \n    'f57': 'Mean', \n    'f58': 'Median', \n    'f59': 'Median', \n    'f60': 'Median', \n    'f61': 'Median', \n    'f62': 'Median', \n    'f63': 'Median', \n    'f64': 'Median', \n    'f65': 'Mode', \n    'f66': 'Median', \n    'f67': 'Median', \n    'f68': 'Median', \n    'f69': 'Mean', \n    'f70': 'Mode', \n    'f71': 'Median', \n    'f72': 'Median', \n    'f73': 'Median', \n    'f74': 'Mode', \n    'f75': 'Mode', \n    'f76': 'Mean', \n    'f77': 'Mode', \n    'f78': 'Median', \n    'f79': 'Mean', \n    'f80': 'Median', \n    'f81': 'Mode', \n    'f82': 'Median', \n    'f83': 'Mode', \n    'f84': 'Median', \n    'f85': 'Median', \n    'f86': 'Median', \n    'f87': 'Median', \n    'f88': 'Median', \n    'f89': 'Median', \n    'f90': 'Mean', \n    'f91': 'Mode', \n    'f92': 'Median', \n    'f93': 'Median', \n    'f94': 'Median', \n    'f95': 'Median', \n    'f96': 'Median', \n    'f97': 'Mean', \n    'f98': 'Median', \n    'f99': 'Median', \n    'f100': 'Mode', \n    'f101': 'Median', \n    'f102': 'Median', \n    'f103': 'Median', \n    'f104': 'Median', \n    'f105': 'Median', \n    'f106': 'Median', \n    'f107': 'Median', \n    'f108': 'Median', \n    'f109': 'Mode', \n    'f110': 'Median', \n    'f111': 'Median', \n    'f112': 'Median', \n    'f113': 'Mean', \n    'f114': 'Median', \n    'f115': 'Median', \n    'f116': 'Mode', \n    'f117': 'Median', \n    'f118': 'Mean'\n}","80a07d25":"for col in tqdm(features):\n    if fill_value_dict.get(col)=='Mean':\n        fill_value = train[col].mean()\n    elif fill_value_dict.get(col)=='Median':\n        fill_value = train[col].median()\n    elif fill_value_dict.get(col)=='Mode':\n        fill_value = train[col].mode().iloc[0]\n    \n    train[col].fillna(fill_value, inplace=True)\n    test[col].fillna(fill_value, inplace=True)","aa98d30f":"X = train.drop([\"claim\"], axis=1)\nX_test = test\ny = train[\"claim\"]\n","570df861":"scaler = RobustScaler()\nX = scaler.fit_transform(X)\nX_test = scaler.transform(X_test)","ef8c77b4":"del test, train, scaler\ngc.collect()","8cba2d88":"!nvidia-smi","7627c697":"# Model hyperparameters\nSEED = 1\nlgbm_params = {'objective': 'binary',\n               'boosting_type': 'gbdt',\n               'num_leaves': 6,\n               'max_depth': 2,\n               'n_estimators': 10000,\n               'reg_alpha': 25.0,\n               'reg_lambda': 76.7,\n               'random_state': SEED,\n               'bagging_seed': SEED, \n               'feature_fraction_seed': SEED,\n               'n_jobs': -1,\n               'subsample': 1,\n               'subsample_freq': 1,\n               'colsample_bytree': 0.7,\n               'min_child_samples': 55,\n               'min_child_weight': 256,\n               'metric': 'AUC',\n               'verbosity': -1,\n               \"device\": \"gpu\",\n               \"gpu_platform_id\": 0,\n               \"gpu_device_id\": 0,\n              }","b34958e7":"%%time\n\nsplits = 5\nkf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=SEED)\n\npreds = np.zeros(len(X_test))\n\nfor train_idx, valid_idx in kf.split(X, y):    \n    lgb_train = lgb.Dataset(X[train_idx], y[train_idx], free_raw_data=False)\n    lgb_valid = lgb.Dataset(X[valid_idx], y[valid_idx], free_raw_data=False)\n\n    lgbm_params['learning_rate'] = 0.2\n    \n    model = lgb.train(lgbm_params,\n                      lgb_train,\n                      verbose_eval=-1,\n                      early_stopping_rounds=1000,\n                      valid_sets=[lgb_valid])\n    \n    lgbm_params['learning_rate'] = 0.1\n    \n    model = lgb.train(lgbm_params,\n                      lgb_train,\n                      init_model=model,\n                      verbose_eval=-1,\n                      early_stopping_rounds=1000,\n                      valid_sets=[lgb_valid])\n    \n    preds += model.predict(X_test) \/ splits\n    \n    gc.collect()","2b5aded4":"submission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv', index_col='id')\nsubmission['claim'] = preds\nsubmission.to_csv('submission_lgbm.csv')","b391ac1f":"df = pd.DataFrame()\ni = 0\nfor f in [\"..\/input\/tpssep21avgsubs\/submission (10).csv\",\n          \"..\/input\/tpssep21avgsubs\/submission (9).csv\",\n          \"..\/input\/tpssep21avgsubs\/tps-sep21-avg-best5.csv\",\n          \"..\/input\/tpssep21avgsubs\/tps-sep21-power_of-avg.csv\",\n          \".\/submission_lgbm.csv\",\n         ]:\n    print(f)\n    input_df = pd.read_csv(f)\n    df[i] = input_df.claim.rank()\n    i = i+1","9294382d":"df.corr()","2a7521c9":"submit_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsubmit_df['claim'] = df.mean(1)\nsubmit_df.to_csv(\"submission.csv\", index=False)","b01bd99e":"1. Mean: normal distribution\n2. Median: unimodal and skewed\n3. Mode: all other cases"}}