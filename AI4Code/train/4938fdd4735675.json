{"cell_type":{"2cc8141a":"code","0cee0baa":"code","62a1e19c":"code","151588c1":"code","dca317a2":"code","9abb018b":"code","61b82363":"code","0bab7e81":"code","d3d158df":"code","60059f3a":"code","df16180c":"code","7cada917":"code","dd0a791b":"code","85ea42bb":"code","d44e05e9":"code","06c59423":"code","0e613721":"code","348bd4fc":"code","8d8d4ea5":"code","1f0eee79":"code","712fdaed":"code","9965d340":"code","2e84f1a0":"code","4e8b4a9e":"code","bc5793a9":"code","2a199d9d":"code","5027c6cd":"code","c630756e":"code","227e1d53":"code","ecf90d91":"code","3c168850":"markdown","6e804b7e":"markdown","f6b7f47e":"markdown","0fb1a387":"markdown","e4dee5bb":"markdown","3474a34f":"markdown","93295ee3":"markdown","225b1733":"markdown","32f839a2":"markdown","33018886":"markdown","7b3b7f66":"markdown","7d795c95":"markdown"},"source":{"2cc8141a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","0cee0baa":"df = pd.read_csv(\"..\/input\/glass\/glass.csv\")\ndf.head()","62a1e19c":"# Looking for missing values in the dataset\ndf.isna().sum()","151588c1":"df.dtypes","dca317a2":"df.shape","9abb018b":"df.describe()","61b82363":"# Having a look at the correlation matrix\n\nfig, ax = plt.subplots(figsize=(10,8))\nsns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\", cbar=False);","0bab7e81":"df[\"Type\"].value_counts()","d3d158df":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(10,8))\n\nplt.pie(x=df[\"Type\"].value_counts(), \n        labels=[\"Type 2\", \"Type 1\", \"Type 7\", \"Type 3\", \"Type 5\", \"Type 6\"],\n        shadow = True, \n        autopct=\"%1.2f%%\", \n        )\nplt.title(\"Glass Types Distribution Pie Chart\",fontsize=15)\nplt.show()","60059f3a":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(figsize=(8,6)) \n\nsns.countplot(x = df[\"Type\"]);\nplt.title(\"Glass Types Distribution\",fontsize=15, y=1.03);","df16180c":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(3,1, figsize=(15,20)) \n\n\nsns.histplot(x = df[\"RI\"], kde=True, ax=ax[0], color=\"steelblue\");\nax[0].set_xlabel(\"RI\",fontsize=15);\n\nsns.histplot(x = df[\"Na\"], kde=True, ax=ax[1], color=\"green\");\nax[1].set_xlabel(\"Na\",fontsize=15);\n\nsns.histplot(x = df[\"Mg\"], kde=True, ax=ax[2], color=\"indigo\");\nax[2].set_xlabel(\"Mg\",fontsize=15);","7cada917":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(3,1, figsize=(15,20)) \n\n\nsns.histplot(x = df[\"Al\"], kde=True, ax=ax[0], color=\"steelblue\");\nax[0].set_xlabel(\"Al\",fontsize=15);\n\nsns.histplot(x = df[\"Si\"], kde=True, ax=ax[1], color=\"green\");\nax[1].set_xlabel(\"Si\",fontsize=15);\n\nsns.histplot(x = df[\"K\"], kde=True, ax=ax[2], color=\"indigo\");\nax[2].set_xlabel(\"K\",fontsize=15);","dd0a791b":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(3,1, figsize=(15,20)) \n\n\nsns.histplot(x = df[\"Ca\"], kde=True, ax=ax[0], color=\"steelblue\");\nax[0].set_xlabel(\"Ca\",fontsize=15);\n\nsns.histplot(x = df[\"Ba\"], kde=True, ax=ax[1], color=\"green\");\nax[1].set_xlabel(\"Ba\",fontsize=15);\n\nsns.histplot(x = df[\"Fe\"], kde=True, ax=ax[2], color=\"indigo\");\nax[2].set_xlabel(\"Fe\",fontsize=15);","85ea42bb":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(4,1, figsize=(15,25)) \n\nsns.scatterplot(x = df['Na'], y = df['RI'], hue = df['Type'], palette='viridis', legend=True, ax=ax[0])\nax[0].set_xlabel(\"Sodium (Na)\",fontsize=15);\n\nsns.scatterplot(x = df['Mg'], y = df['RI'], hue = df['Type'], palette='spring_r', legend=True, ax=ax[1])\nax[1].set_xlabel(\"Magnesium (Mg)\",fontsize=15);\n\nsns.scatterplot(x = df['Al'], y = df['RI'], hue = df['Type'], palette='flare_r', legend=True, ax=ax[2]);\nax[2].set_xlabel(\"Aluminum (Al)\",fontsize=15);\n\nsns.scatterplot(x = df['Fe'], y = df['RI'], hue = df['Type'], palette='nipy_spectral_r', legend=True, ax=ax[3]);\nax[3].set_xlabel(\"Iron (Fe)\",fontsize=15);","d44e05e9":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(4,1, figsize=(15,25)) \n\nsns.scatterplot(x = df['Si'], y = df['RI'], hue = df['Type'], palette='viridis', legend=True, ax=ax[0])\nax[0].set_xlabel(\"Silicon (Si)\",fontsize=15);\n\nsns.scatterplot(x = df['K'], y = df['RI'], hue = df['Type'], palette='spring_r', legend=True, ax=ax[1])\nax[1].set_xlabel(\"Potassium (K)\",fontsize=15);\n\nsns.scatterplot(x = df['Ca'], y = df['RI'], hue = df['Type'], palette='flare_r', legend=True, ax=ax[2]);\nax[2].set_xlabel(\"Calcium (Ca)\",fontsize=15);\n\nsns.scatterplot(x = df['Ba'], y = df['RI'], hue = df['Type'], palette='dark', legend=True, ax=ax[3]);\nax[3].set_xlabel(\"Barium (Ba)\",fontsize=15);","06c59423":"# X data\nX = df.drop(\"Type\", axis=1)\nX.head()","0e613721":"# y data\ny = df[\"Type\"]\ny.head()","348bd4fc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","8d8d4ea5":"len(X_train), len(X_test)","1f0eee79":"from sklearn.linear_model import LinearRegression\nnp.random.seed(42)\nlr = LinearRegression()\nlr.fit(X_train, y_train)","712fdaed":"LinearRegressionScore = lr.score(X_test, y_test)\nprint(\"Accuracy obtained by Linear Regression model:\",LinearRegressionScore*100)","9965d340":"from sklearn.ensemble import RandomForestClassifier\nnp.random.seed(42)\nrfc = RandomForestClassifier(n_estimators = 100)\nrfc.fit(X_train,y_train)","2e84f1a0":"RandomForestClassifierScore = rfc.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","4e8b4a9e":"from sklearn.neighbors import KNeighborsClassifier\nnp.random.seed(42)\nknn = KNeighborsClassifier(4)\nknn.fit(X_train,y_train)","bc5793a9":"KNeighborsClassifierScore = knn.score(X_test, y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","2a199d9d":"from catboost import CatBoostClassifier\nnp.random.seed(42)\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","5027c6cd":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","c630756e":"from sklearn.ensemble import GradientBoostingClassifier\nnp.random.seed(42)\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","227e1d53":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","ecf90d91":"x = [\"K Neighbors Classifier\",\n     \"Random Forest Classifier\",\n     \"Linear Regression\",\n     \"CatBoost Classifier\", \n     \"Gradient Boosting Classifier\"]\n\ny = [KNeighborsClassifierScore,\n     RandomForestClassifierScore,\n     LinearRegressionScore,\n     CatBoostClassifierScore, \n     GradientBoostingClassifierScore]\n\nplt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=15, y=1.03);","3c168850":"## <span style=\"color:royalblue;\"> Loading up the data <\/span>","6e804b7e":"* **RI**: Refractive index\n\n* **Na**: Sodium (unit measurement: weight percent in corresponding oxide, as are attributes 4-10)\n\n* **Mg**: Magnesium\n\n* **Al**: Aluminum\n\n* **Si**: Silicon\n\n* **K**: Potassium\n\n* **Ca**: Calcium\n\n* **Ba**: Barium\n\n* **Fe**: Iron\n\n* **Type of glass**: (class attribute)\n 1. Building Windows float processed \n 2. Building Windows non-float processed \n 3. Vehicle Windows float processed\n 4. Vehicle Windows non-float processed \n 5. Containers\n 6. Tableware\n 7. Headlamps","f6b7f47e":"![glasss.jpg](attachment:a0cf08ee-4e39-4964-b009-2def1b692df2.jpg)","0fb1a387":"## <span style=\"color:royalblue;\"> Splitting the data into training and test datasets <\/span>\nHere, we are trying to predict the glass type using the given data. Hence, the `Type` will be the y label and rest of the data will be the X or the input data.","e4dee5bb":"## <span style=\"color:royalblue;\"> CatBoost Classifier <\/span>","3474a34f":"# <span style=\"color:royalblue;\"> Glass Classification <\/span>","93295ee3":"## <span style=\"color:royalblue;\"> K Neighbors Classifier <\/span>","225b1733":"## <span style=\"color:royalblue;\"> Importing Libraries <\/span>","32f839a2":"## <span style=\"color:royalblue;\"> Linear Regression <\/span>","33018886":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","7b3b7f66":"## <span style=\"color:royalblue;\"> Random Forest Classifier <\/span>","7d795c95":"## <span style=\"color:royalblue;\"> Gradient Boosting Classifier <\/span>"}}