{"cell_type":{"4271c4e2":"code","0e36805a":"code","9c1bdb83":"code","8d4f2ee7":"code","3c264b8f":"code","b9410bb4":"code","36ff5fc9":"code","90add747":"code","60d2917d":"code","2df31afb":"code","11f20868":"code","63660137":"code","a8ec2af4":"code","06685713":"code","ea59ca09":"code","ce35e6e5":"code","48476964":"code","bb3cbaea":"code","159f6303":"code","80908a2c":"code","69cc00aa":"code","fc9e9766":"code","e554b9d8":"code","0224adde":"code","0193ed11":"code","562f6ef3":"code","843b9ccd":"code","52886099":"code","36a430e1":"code","7ec3bb16":"code","72c19d75":"code","793aaa06":"code","32e64f3a":"code","d94868ed":"code","3ed9a3ad":"code","e4979657":"markdown","7fd9a077":"markdown","8797f604":"markdown","c240ca48":"markdown"},"source":{"4271c4e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0e36805a":"customers = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","9c1bdb83":"customers.head(10)","8d4f2ee7":"customers.any().isnull()\n#no null values\ncustomers.info()\n#total charges is an object\n","3c264b8f":"#customers['TotalCharges'] = pd.to_numeric(customers['TotalCharges'], errors='raise')   \n#converting total charges to float, found non integer elements ' '\nnonintegers = customers[customers['TotalCharges'] == ' '] \nto_drop = nonintegers.index.tolist()\nto_drop","b9410bb4":"customers = customers.drop(to_drop, axis='index')\ncustomers['TotalCharges'] = pd.to_numeric(customers['TotalCharges'], errors='raise') ","36ff5fc9":"customers.any().isnull()\n#no NaN's in TotalCharges\n#i want to convert all the yes\/no's to 1's and 0's in churn\ncustomers['Churn'] = customers['Churn'].map(dict({'Yes':1,'No':0}))\n","90add747":"import plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n","60d2917d":"demographics = ['gender', 'Partner', 'SeniorCitizen', 'Dependents']\n\n\nfor i in demographics:\n    trace1 = go.Bar(\n        x=customers.groupby(i)['Churn'].sum().reset_index()[i],\n        y=customers.groupby(i)['Churn'].sum().reset_index()['Churn'],\n        name= i\n    )\n\n    data = [trace1]\n    layout = go.Layout(\n        title= i,\n        yaxis=dict(\n        title='Churn'\n        ),\n        barmode='group',\n        autosize=True,\n    width=600,\n    height=600,\n    margin=go.Margin(\n        l=70,\n        r=70,\n        b=100,\n        t=100,\n        pad=8\n    )\n    )\n    fig = go.Figure(data=data, layout=layout)\n    py.offline.iplot(fig)\n","2df31afb":"seniors = customers.loc[customers['SeniorCitizen'] == 1]\n\nnonseniors = customers.loc[customers['SeniorCitizen'] == 0]\n","11f20868":"hist_data = [seniors.groupby('tenure')['Churn'].sum(),nonseniors.groupby('tenure')['Churn'].sum()]\ngroup_labels = ['Seniors', 'Non-Seniors']\n\nimport plotly.figure_factory as ff\nfig = ff.create_distplot(hist_data, group_labels,bin_size=[1,1], curve_type='normal', show_rug=False)\npy.offline.iplot(fig)","63660137":"customers['InternetService'].value_counts()","a8ec2af4":"customers.groupby('InternetService')['Churn'].sum()\n#Nearly half of the customers who took fiber optic left","06685713":"seniors.groupby('InternetService')['Churn'].sum()","ea59ca09":"mask = ['DSL','Fiber optic']\ninternet = customers[customers['InternetService'].isin(mask)]","ce35e6e5":"categories = ['InternetService', 'OnlineSecurity', 'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract',\n             'PaperlessBilling','PaymentMethod']\ninternet.info()","48476964":"dumm = pd.get_dummies(internet,columns=categories,drop_first=True)","bb3cbaea":"corr = dumm.corr(method='spearman')\ncorr","159f6303":"mask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr,cmap=cmap, mask=mask,vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","80908a2c":"y = dumm.iloc[:,10].values\ndumm = dumm.drop(['customerID','Churn'],axis=1)\n","69cc00aa":"X = dumm","fc9e9766":"y\n\n","e554b9d8":"mask = ['gender','Partner','Dependents','PhoneService','MultipleLines']\nX = pd.get_dummies(dumm,columns=mask,drop_first=True)\n","0224adde":"X.head()","0193ed11":"#Splitting the dataset into the Training set and Test set\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 4)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n","562f6ef3":"# Fitting Logistic Regression to the Training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred1 = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred1)\n\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_pred1,y_test)\naccuracy\n\nprint (cm)\nprint (accuracy)","843b9ccd":"import lightgbm as lgb\n\nd_train = lgb.Dataset(X_train, label=y_train)\n\nparams = {}\nparams['learning_rate'] = 0.2\nparams['boosting_type'] = 'gbdt'\nparams['objective'] = 'binary'\nparams['metric'] = 'binary_logloss'\nparams['num_leaves'] = 5\nparams['max_depth'] = 15\n\n\nclf = lgb.train(params, d_train, 100)\n","52886099":"#Prediction\ny_pred2=clf.predict(X_test)\n\n#convert into binary values\nfor i in range(0,552):\n    if y_pred2[i]>=.52:       \n       y_pred2[i]=1\n    else:  \n       y_pred2[i]=0","36a430e1":"#Confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred2)\n#Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_pred2,y_test)","7ec3bb16":"cm","72c19d75":"accuracy","793aaa06":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\n\n\n# Predicting the Test set results\ny_pred3 = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred3)","32e64f3a":"#Confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred3)\n#Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_pred3,y_test)","d94868ed":"cm","3ed9a3ad":"accuracy","e4979657":"We can see how different the distributions are. Seniors are mostly leaving within 4 months. There is an opportunity there to figure out why such short tenures, but I'm also aware that there may be other age groups that have higher early churn.","7fd9a077":"The LightGBM model was the best performing in this case at 77%. Further improvements to the model could be made. ","8797f604":"Let's check the demographics of the people who discontinued their service.","c240ca48":"1869 people cancelled their service. \n\n* Regarding the gender of the presumed account holder, it looks like this dataset has an even amount of churners between men and women. \n* Almost 2x the rate of churn amongst people without a partner.\n* A large marjority were not senior citizens (74%), and had no dependents (82%).\n\nAlso, checking the amount of senior citizens (1142) shows that nearly 42% of them discontinue their service. Compare that to 20% of everyone else, and we can see that seniors are almost 2x as likely to stop using the service. \n\n"}}