{"cell_type":{"6b8c11f9":"code","ed6a73df":"code","45011425":"code","1cca6988":"code","ca9ef7b9":"code","ee720c2d":"code","408bddc0":"code","4337009c":"code","2847e9b2":"code","36c38b07":"code","f55e3414":"code","f59853a2":"code","a327efa4":"code","c7791ae9":"code","770a31c7":"code","c9d92fe6":"code","6d33af5d":"code","66061942":"code","0cf844f8":"code","36ad02b7":"code","53e52e3b":"code","7040a193":"code","32ee85e9":"code","93b428d6":"code","5c74c9da":"code","c106e6cb":"code","2166f117":"code","d0be2a1c":"code","a516d454":"code","4efea3ee":"code","62e7c5fb":"code","ce63238b":"code","2bd25797":"code","39fe228a":"code","c6802d84":"code","c2654273":"code","6d148dcd":"code","e050d498":"code","6439d72e":"markdown","d6188d56":"markdown","eacac30b":"markdown","e86d57eb":"markdown","df714027":"markdown","f6325c3c":"markdown","c2984582":"markdown","0f2dabc3":"markdown","5bb4cb41":"markdown","a946ba0e":"markdown","f01beece":"markdown","3ec7a905":"markdown","2771aac6":"markdown","3c69c17d":"markdown","bbc0a18b":"markdown","9e6e949b":"markdown","ec5196e7":"markdown","a532e825":"markdown"},"source":{"6b8c11f9":"from random import randint\nimport pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ed6a73df":"data_directory = os.path.join(os.getcwd(), '..\/input')\nprint(os.listdir(data_directory))","45011425":"!cat '..\/input\/readme.txt'","1cca6988":"data_dictionnary = {}\n\n# columns name from readme\n# define metadata and feature\noperational_settings = ['op_setting_{}'.format(i + 1) for i in range (3)]\nsensor_columns = ['sensor_{}'.format(i + 1) for i in range(27)]\nfeatures = operational_settings + sensor_columns\nmetadata = ['engine_no', 'time_in_cycles']\nlist_columns = metadata + features\n\n\nlist_file_train = [x for x in sorted(os.listdir(data_directory)) if 'train' in x]\n\n# names of the datasets\nfor file_train in list_file_train:\n    data_set_name = file_train.replace('train_', '').replace('.txt', '')\n    file_test = 'test_' + data_set_name + '.txt'\n    rul_test = 'RUL_' + data_set_name + '.txt'\n    \n    # dictionnaries with all datasets\n    data_dictionnary[data_set_name] = {\n        'df_train': pd.read_csv(os.path.join(data_directory, file_train), sep=' ', header=-1, names=list_columns),\n        'df_test': pd.read_csv(os.path.join(data_directory, file_test), sep=' ', header=-1, names=list_columns),\n        'RUL_test' :pd.read_csv(os.path.join(data_directory, rul_test), header=-1, names=['RUL']),\n    }","ca9ef7b9":"data_dictionnary['FD001']['df_train'].head()","ee720c2d":"# on train datasets, RUL starts at the maximum number of cycles and is decreasing down to 0\ndef add_rul(group):\n    group['RUL'] = [max(group['time_in_cycles'])] * len(group)\n    group['RUL'] = group['RUL'] - group['time_in_cycles']\n    del group['engine_no']\n    return group.reset_index()\n\nfor data_set in data_dictionnary:\n    data_dictionnary[data_set]['df_train'] = data_dictionnary[data_set]['df_train']\\\n                        .groupby('engine_no').apply(add_rul).reset_index()\n    del data_dictionnary[data_set]['df_train']['level_1']","408bddc0":"data_dictionnary['FD001']['df_train'].head()","4337009c":"CHOSEN_DATASET = 'FD001'\n\ndf = data_dictionnary[CHOSEN_DATASET]['df_train'].copy()\n\ndf_eval = data_dictionnary[CHOSEN_DATASET]['df_test'].copy()","2847e9b2":"dataset_description = df.describe()\ndataset_description","36c38b07":"axes = dataset_description.T.plot.bar(subplots=True, figsize=(15,10))","f55e3414":"############### Question 1 ###############\n# What can you conclude from the above graph?","f59853a2":"df_plot = df.copy()[features]\ndf_corr = df_plot.corr(method='pearson')\nfig, ax = plt.subplots(figsize=(15,15))\naxes = sns.heatmap(df_corr, linewidths=.2, )","a327efa4":"############### Question 2 ###############\n# Can you plot a correlation matrix with another correlation coefficient?","c7791ae9":"############### Question 3 ###############\n# What can happen when you have correlated features?","770a31c7":"nan_column = ?\nconst_columns = ?\nprint('Columns with all nan: \\n' + str(nan_column) + '\\n')\nprint('Columns with all const values: \\n' + str(const_columns) + '\\n')","c9d92fe6":"############### Question 4 ###############\n# Can you find all the couples that are strongly correlated ? What can be done about them ?","6d33af5d":"df_plot = df.copy()\ndf_plot = df_plot.sort_values(metadata)\ngraph = sns.PairGrid(data=df_plot, x_vars=\"RUL\", y_vars=features, hue=\"engine_no\", height=4, aspect=6,)\ngraph = graph.map(plt.plot, alpha=0.5)\ngraph = graph.set(xlim=(df_plot['RUL'].max(),df_plot['RUL'].min()))\n# graph = graph.add_legend()","66061942":"############### Question 5 ###############\n# What can you see from the above graphs?","0cf844f8":"############### Question 6 ###############\n# Would it be better to train on a smaller part?","36ad02b7":"number_of_engine_no = len(df['engine_no'].drop_duplicates())\n\nengine_no_val = range(50, 70)\nengine_no_train = [x for x in range(number_of_engine_no) if x not in engine_no_val]","53e52e3b":"selected_features = [x for x in features if x not in nan_column + const_columns]","7040a193":"data_train = df[df['engine_no'].isin(engine_no_train)]\ndata_val = df[df['engine_no'].isin(engine_no_val)]\n\nX_train, y_train = data_train[selected_features], data_train['RUL'] \nX_val, y_val = data_val[selected_features], data_val['RUL']\n\nX_eval = df_eval[selected_features]\n\n\nX_all, y_all = df[selected_features], df['RUL']","32ee85e9":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor()\nrf_reg.fit(X_train, y_train)","93b428d6":"print(\"Score on train data : \" + str(rf_reg.score(X_train, y_train)))\nprint(\"Score on test data : \" + str(rf_reg.score(X_val, y_val)))","5c74c9da":"############### Question 7 ###############\n# Did you overfit? If so, what solutions could you find?","c106e6cb":"############### Question 8 ###############\n# Can you have the RMSE?","2166f117":"from sklearn.model_selection import cross_val_score, cross_val_predict, cross_validate\ncv_results = cross_validate(rf_reg, X_train, y_train, cv=10, return_estimator=True)","d0be2a1c":"cv_results['test_score']","a516d454":"cv_results['estimator'][0].score(X_val, y_val)","4efea3ee":"cv_results['estimator'][1].score(X_val, y_val)","62e7c5fb":"cv_results['estimator'][2].score(X_val, y_val)","ce63238b":"cv_results['estimator'][3].score(X_val, y_val)","2bd25797":"cv_results['estimator'][4].score(X_val, y_val)","39fe228a":"############### Question 9 ###############\n# Try to improve you model.\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\n\nrf_reg = RandomForestRegressor()\ncross_val_score(rf_reg, X_train, y_train, cv=10)","c6802d84":"#y_pred = cross_val_predict(rf_reg, X_train, y_train, cv=10)\n#rf_reg.fit(X_train, y_train)\n#print(\"Score on test data : \" + str(rf_reg.score(X_val, y_val)))","c2654273":"df_pred = data_train.copy()\ndf_pred['pred'] = rf_reg.predict(X_train)\ndf_pred['error'] = df_pred['pred'] - df_pred['RUL']","6d148dcd":"df_plot = df_pred.copy()\ndf_plot = df_plot.sort_values(['engine_no', 'time_in_cycles'])\ng = sns.PairGrid(data=df_plot, x_vars=\"RUL\", y_vars=['RUL', 'pred', 'error'], hue=\"engine_no\", height=6, aspect=6,)\ng = g.map(plt.plot, alpha=0.5)\ng = g.set(xlim=(df_plot['RUL'].max(),df_plot['RUL'].min()))","e050d498":"df_eval['pred'] = rf_reg.predict(X_eval)\n\ndf_eval['result'] = df_eval['pred']\ndf_eval['engine_id'] = list(range(len(df_eval)))\n\ndf_eval[['engine_id','result']].to_csv('submission.csv', index=False)","6439d72e":"# Imports","d6188d56":"# Add RUL","eacac30b":"### Plotting some description of the dataset","e86d57eb":"# Making a prediction","df714027":"### Plotting the result ","f6325c3c":"# Prediction on test data and Output","c2984582":"# Choosing a dataset ","0f2dabc3":"# Load DATA","5bb4cb41":"### Selecting only relevant features","a946ba0e":"### Plot a temporal vizualisation of the features","f01beece":"### Splitting test \/ train data","3ec7a905":"### Find columns that can be dropped ","2771aac6":"# Data analysis","3c69c17d":"### Score the model ","bbc0a18b":"### Training a random forest","9e6e949b":"### Correlation matrix","ec5196e7":"### Making the split","a532e825":"# List data directory"}}