{"cell_type":{"4fdcae00":"code","6c521845":"code","e7dead20":"code","f6fc90fe":"code","00baec0c":"code","0d569c8d":"code","991ff165":"code","317a033a":"code","cf3e1b79":"code","21fe90ed":"code","028be0f2":"code","40ba8325":"code","388bf622":"code","21e84ccd":"code","836b3a15":"code","06245e02":"code","0359eaf6":"code","c30f2609":"code","4dadf8cd":"code","05c2a5da":"code","a2a7e351":"code","80172b58":"code","ff6270c8":"code","d35e5884":"code","33d58b4d":"code","648984de":"code","e4820033":"code","b496848b":"code","ee50f23b":"code","81691c33":"code","b3400ce2":"code","613f6e2c":"code","da638435":"code","ea29e7c2":"code","db70e187":"code","d82e3e65":"code","e6a48a9f":"code","04619df9":"code","392d5f2e":"code","fc075920":"code","ac4efa4a":"code","5f46b806":"code","065fa565":"code","dcf96429":"code","010d6860":"code","4b0ef47a":"code","d547224c":"code","32775032":"code","299e86dd":"code","0789d5b0":"code","da2492bd":"code","c4643dbc":"code","eba56e12":"code","37945d96":"code","7e75b0f5":"code","90c203d6":"code","294a0b99":"code","0194ef23":"code","5ab2477c":"code","4cbf2c1d":"code","e714554e":"code","a1390e2a":"markdown","1a3d2e91":"markdown","990dbba5":"markdown","30249e6e":"markdown","07eb9063":"markdown","b9d2a889":"markdown","ac028643":"markdown","f08e6115":"markdown","0e3d616c":"markdown","625627ea":"markdown","b0d48c0c":"markdown","e33340ea":"markdown","7e0ce176":"markdown","9383929a":"markdown","3a411130":"markdown","cc15bdcd":"markdown","fe0632e0":"markdown","76bfc93f":"markdown","173707f0":"markdown","fda67298":"markdown","8fbed1ac":"markdown","915d0883":"markdown","cf612204":"markdown","2140ba1a":"markdown","25791b29":"markdown","4684a338":"markdown","a138bc4e":"markdown"},"source":{"4fdcae00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c521845":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nfrom pylab import rcParams\nsns.set_style(\"darkgrid\")\n%matplotlib inline\n%matplotlib notebook\n\n#Importing plotly and cufflinks in offline mode\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n#Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\n\n#Figure&Display options\nplt.rcParams[\"figure.figsize\"] = (10,6)\npd.set_option('max_colwidth',200)\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 200)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\n#!pip install termcolor\nfrom termcolor import colored\nimport missingno as msno \n\n# !pip3 install termcolor\nimport colorama\nfrom colorama import Fore, Style  # maakes strings colored\nfrom termcolor import colored","e7dead20":"%matplotlib inline","f6fc90fe":"## Useful Functions\n\n###############################################################################\n\ndef missing(df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values\n\ndef missing_values(df):\n    return missing(df)[missing(df)['Missing_Number']>0]\n\n###############################################################################\n\ndef first_looking(df):\n    print(colored(\"Shape:\", attrs=['bold']), df.shape,'\\n',\n          f\"There is \", df.shape[0], \" observation and \", df.shape[1], \" columns in the dataset.\", '\\n',\n          colored('-'*79, 'red', attrs=['bold']),\n          colored(\"\\nInfo:\\n\", attrs=['bold']), sep='')\n    print(df.info(), '\\n', \n          colored('-'*79, 'red', attrs=['bold']), sep='')\n    print(colored(\"Number of Uniques:\\n\", attrs=['bold']), df.nunique(),'\\n',\n          colored('-'*79, 'red', attrs=['bold']), sep='')\n    print(colored(\"Missing Values:\\n\", attrs=['bold']), missing_values(df),'\\n', \n          colored('-'*79, 'red', attrs=['bold']), sep='')\n    print(colored(\"All Columns:\", attrs=['bold']), list(df.columns),'\\n', \n          colored('-'*79, 'red', attrs=['bold']), sep='')\n\n    df.columns= df.columns.str.lower().str.replace('&', '_').str.replace(' ', '_')\n\n    print(colored(\"Columns after rename:\", attrs=['bold']), list(df.columns),'\\n',\n              colored('-'*79, 'red', attrs=['bold']), sep='')\n\ndef duplicate_values(df):\n    duplicate_values = df.duplicated(subset=None, keep='first').sum()\n    if duplicate_values > 0:\n        df.drop_duplicates(keep='first', inplace=True)\n        print(duplicate_values, colored(\"duplicates were dropped\", attrs=['bold']),'\\n',\n              colored('-'*79, 'red', attrs=['bold']), sep='')\n    else:\n        print(colored(\"No duplicates\", attrs=['bold']),'\\n',\n              colored('-'*79, 'red', attrs=['bold']), sep='')\n        \ndef drop_columns(df, drop_columns):\n    if drop_columns !=[]:\n        df.drop(drop_columns, axis=1, inplace=True)\n        print(drop_columns, 'were dropped')\n    else:\n        print(colored('We will now check the missing values and if necessary drop some columns!!!', attrs=['bold']),'\\n',\n              colored('-'*79, 'red', attrs=['bold']), sep='')\n        \ndef drop_null(df, limit):\n    print('Shape:', df.shape)\n    for i in df.isnull().sum().index:\n        if (df.isnull().sum()[i]\/df.shape[0]*100)>limit:\n            print(df.isnull().sum()[i], 'percent of', i ,'null and were dropped')\n            df.drop(i, axis=1, inplace=True)\n            print('new shape:', df.shape)\n        else:\n            print(df.isnull().sum()[i], '%, percentage of missing values of', i ,'less than limit', limit, '%, so we will keep it.')\n    print('New shape after missing value control:', df.shape)\n\n###############################################################################","00baec0c":"df = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\")","0d569c8d":"df.head()","991ff165":"df.tail()","317a033a":"df.sample(5)","cf3e1b79":"with pd.option_context('display.max_columns', None):\n    first_looking(df)\n    duplicate_values(df)\n    drop_columns(df,[])\n    drop_null(df, 90)","21fe90ed":"df.describe().T","028be0f2":"df.describe(include=object).T","40ba8325":"df.season.value_counts(dropna=False)","388bf622":"# season\n\nplt.figure(figsize=(10,6))\nsns.countplot(x = \"season\", data = df);","21e84ccd":"# is_holiday\n\nplt.figure(figsize=(10,6))\nsns.countplot(x = \"is_holiday\", data = df);","836b3a15":"# is_weekend\n\nplt.figure(figsize=(10,6))\nsns.countplot(x = \"is_weekend\", data = df);","06245e02":"# weather_code\n\nplt.figure(figsize=(10,6))\nsns.countplot(x = \"weather_code\", data = df);","0359eaf6":"df_1 = df.copy()\n\ndf_1[\"timestamp\"] = pd.to_datetime(df_1[\"timestamp\"])\ndf_1.set_index(\"timestamp\", inplace = True)\n\ndf_1.head()","c30f2609":"from datetime import datetime\n\ndf_1[\"year_month\"] = df_1.index.strftime('%Y-%m')\ndf_1[\"year\"] = df_1.index.year\ndf_1[\"month\"] = df_1.index.month\ndf_1[\"day_of_month\"] = df_1.index.day\ndf_1[\"day_of_week\"] = df_1.index.day_of_week\ndf_1[\"hour\"] = df_1.index.hour\n\ndf_1.head()","4dadf8cd":"df.head()","05c2a5da":"# heatmap for all variables\n\ndf_1_corr = df_1.drop(\"year_month\", axis = 1)\nplt.figure(figsize=(15,10))\nsns.heatmap(df_1.corr(), annot = True, cmap = 'coolwarm');","a2a7e351":"df.corr().style.background_gradient(cmap='RdPu')","80172b58":"df_temp = df.corr()\n\ncount = \"Done\"\nfeature =[]\ncollinear=[]\nfor col in df_temp.columns:\n    for i in df_temp.index:\n        if (df_temp[col][i]> .9 and df_temp[col][i] < 1) or (df_temp[col][i]< -.9 and df_temp[col][i] > -1) :\n                feature.append(col)\n                collinear.append(i)\n                print(Fore.RED + f\"\\033[1mmulticolinearity alert in between\\033[0m {col} - {i}\")\n        else:\n            print(f\"For {col} and {i}, there is NO multicollinearity problem\") \n\nprint(\"\\033[1mThe number of strong corelated features:\\033[0m\", count)","ff6270c8":"target_variable = round(df_1_corr.corr().iloc[0].sort_values(ascending=False), 3)\ntarget_variable","d35e5884":"target_variable.index","33d58b4d":"target_variable.values","648984de":"target_variable_df = pd.DataFrame({\"Cnt\": [ 1.   ,  0.389,  0.369,  0.324,  0.116,  0.064,  0.01 , -0.018,\n                                   -0.052, -0.069, -0.096, -0.116, -0.167, -0.463]},\n                                    index=['cnt', 't1', 't2', 'hour', 'wind_speed', 'month', 'year',\n                                    'day_of_month', 'is_holiday', 'day_of_week', 'is_weekend', 'season',\n                                    'weather_code', 'hum'])","e4820033":"# heatmap for target variable\n\nplt.figure(figsize=(2.2,8))\nsns.heatmap(target_variable_df, vmin=-1, vmax=1, annot=True, fmt=\"g\", cmap = 'BrBG')\nplt.show()","b496848b":"target_variable = round(df_1_corr.corr().iloc[0].sort_values(), 3)\ntarget_variable","ee50f23b":"# correlation for target variable with pandas\n\nplt.figure(figsize=(10,6))\ntarget_variable.plot(x = target_variable.index, y = target_variable.values, kind = \"barh\", figsize = (10,6));","81691c33":"#correlation for target variable with seaborn\n\nplt.figure(figsize=(10,6))\nsns.barplot(x = df.corr().cnt.sort_values(ascending=False).values, \n            y=df.corr().cnt.sort_values(ascending=False).index);","b3400ce2":"# seaborn\n\nplt.figure(figsize=(20,6))\nsns.lineplot(data = df_1, x = df_1.index, y = \"cnt\")\n\nplt.show()","613f6e2c":"# matplotlib \n\nplt.figure(figsize=(20,6))\ndf.cnt.plot.line()","da638435":"df[df[\"cnt\"]>6000]","ea29e7c2":"df_1.describe()","db70e187":"# with lineplot\n\nplt.figure(figsize = (20,6))\nsns.lineplot(data = df_1, x = \"year_month\", y = \"cnt\", estimator = 'sum', ci = None)\nplt.xticks(rotation = 90);","d82e3e65":"# with lineplot\n\nplt.figure(figsize=(20,6))\nsns.lineplot(data = df_1, x = \"month\", y = \"cnt\");","e6a48a9f":"# with pointplot\n\nplt.figure(figsize=(20,6))\nsns.pointplot(data=df_1, x = \"month\", y = \"cnt\",  markers = \"o\");","04619df9":"# with barplot\n\nplt.figure(figsize=(20,6))\nsns.barplot(data = df_1, x = \"month\", y = \"cnt\");","392d5f2e":"# with lineplot (*whether it is a holiday or not*)\n\nplt.figure(figsize=(20,6))\nsns.lineplot(data = df_1, x = \"hour\", y = \"cnt\", hue = \"is_holiday\");","fc075920":"# with lineplot (*You may want to see seasonal breakdowns*)\n\nplt.figure(figsize=(20,6))\nsns.lineplot(data = df_1, x = \"hour\", y = \"cnt\", hue = \"season\");","ac4efa4a":"# with pointplot\n\nfig, ax = plt.subplots(nrows = 4, ncols = 1, figsize = (20,15))\nsns.pointplot(data = df_1, x = \"hour\", y = \"cnt\", ax = ax[0])\nsns.pointplot(data = df_1, x = \"hour\", y = \"cnt\", hue = \"is_holiday\", ax = ax[1])\nsns.pointplot(data = df_1, x = \"hour\", y = \"cnt\", hue = \"is_weekend\", ax = ax[2])\nsns.pointplot(data = df_1, x = \"hour\", y = \"cnt\", hue = \"season\", ax = ax[3]);","5f46b806":"# with barplot\n\nplt.figure(figsize=(10,6))\nsns.barplot(data = df_1, x = \"day_of_week\", y = \"cnt\", hue = \"is_weekend\");","065fa565":"# with pointplot\n\nfig, ax = plt.subplots(nrows = 2, ncols = 1, figsize = (20,10))\nsns.pointplot(data = df_1, x = \"day_of_week\", y = \"cnt\", ax = ax[0])\nsns.pointplot(data = df_1, x = \"day_of_week\", y = \"cnt\", hue = \"season\", ax = ax[1]);","dcf96429":"day_of_month = df_1.groupby('day_of_month')[['cnt']].mean().astype('int').T","010d6860":"#with lineplot\n\ndisplay(day_of_month)\nplt.figure(figsize=(20,6))\nsns.lineplot(data = df_1, x = \"day_of_month\", y = \"cnt\", );","4b0ef47a":"# with barplot\n\nplt.figure(figsize=(10,6))\nsns.barplot(data = df_1, x = \"year\", y = \"cnt\", );","d547224c":"df_1[\"season\"] != 2.0","32775032":"df_2 = df_1[df_1[\"season\"] != 2]\ndf_2","299e86dd":"# with barplot\n\nis_holiday = df[df.is_holiday == 1.0]\nsns.barplot(data = is_holiday, x = \"season\", y = \"cnt\");","0789d5b0":"df.is_weekend.value_counts()","da2492bd":"index = [\"weekday\", \"weekend\"]\nindex","c4643dbc":"values = [12444, 4970]\nvalues","eba56e12":"# pie chart\n\nplt.figure(figsize=(7,5))\ny = values\nmylabels = index\nmyexplode = [0, 0]\nplt.pie(y, labels = mylabels, labeldistance=1.1, explode = myexplode, startangle=0, autopct='%1.1f%%');","37945d96":"oran = df.is_weekend.value_counts().sum()\/100","7e75b0f5":"# with countplot\n\nplt.figure(figsize=(10,6))\nsns.countplot(data = df, x = \"is_weekend\");\nfor index,value in enumerate(df.is_weekend.value_counts()):\n    plt.text(index, value, f\"% {value\/oran:.3} - {value}\", ha=\"center\", va=\"bottom\", fontsize = 13)","90c203d6":"# with countplot\n\nplt.figure(figsize=(10,6))\nsns.countplot(x = \"weather_code\", data = df_1);","294a0b99":"# with catplot\n\nplt.figure(figsize=(6,4))\nsns.catplot(x = \"weather_code\", col = \"season\", col_wrap = 4, data = df_1, kind=\"count\");","0194ef23":"# matplotlip hist\n\nfig, ax = plt.subplots(nrows=2, ncols=2, figsize = (10,12))\nsns.histplot(data=df_1, x =\"t1\", ax = ax[0][0], bins = 10, stat = \"count\", color = \"orangered\", edgecolor = \"black\", linewidth = 2).set_title(\"t1\", fontsize = 13)\nsns.histplot(data=df_1, x =\"t2\", ax = ax[0][1], bins = 10, stat = \"count\", color = \"deepskyblue\", edgecolor = \"black\", linewidth = 2).set_title(\"t2\", fontsize = 13)\nsns.histplot(data=df_1, x =\"wind_speed\", ax = ax[1][0], bins = 10, stat = \"count\", color = \"mediumseagreen\", edgecolor = \"black\", linewidth = 2).set_title(\"wind_speed\", fontsize = 13)\nsns.histplot(data=df_1, x =\"hum\", ax = ax[1][1], bins = 10, stat = \"count\",  color = \"white\", edgecolor = \"black\", linewidth = 2).set_title(\"humidity\", fontsize = 13);","5ab2477c":"fig,axes = plt.subplots(nrows=2, ncols=2, figsize = (10,12))\n\naxes[0][0].hist(df_1[\"t1\"], bins = 10, color = \"orangered\", edgecolor = \"black\", linewidth = 2)\naxes[0][1].hist(df_1[\"t2\"], bins = 10, color = \"deepskyblue\", edgecolor = \"black\", linewidth = 2)\naxes[1][0].hist(df_1[\"wind_speed\"], bins = 10, color = \"mediumseagreen\", edgecolor = \"black\", linewidth = 2)\naxes[1][1].hist(df_1[\"hum\"], bins = 10, color = \"White\", edgecolor = \"black\", linewidth = 2)\n\naxes[0][0].set_title(\"t1\", fontsize = 13)\naxes[0][1].set_title(\"t2\", fontsize = 13)\naxes[1][0].set_title(\"wind_speed\", fontsize = 13)\naxes[1][1].set_title(\"humidity\", fontsize = 13);","4cbf2c1d":"# with seaborn scatterplot\n\nfig, ax = plt.subplots(nrows=2, ncols=1, figsize = (20,10))\n\nsns.scatterplot(x = \"t1\", y = \"hum\", hue = \"season\", data = df_1, ax = ax[0], palette = \"coolwarm\")\nsns.scatterplot(x = \"t1\", y = \"wind_speed\", hue = \"season\", data = df_1, ax = ax[1], palette = \"coolwarm\");","e714554e":"# with matplotlib scatterplot\n\nplt.figure(figsize=(15,10))\nplt.subplot(2,1,1)\nplt.scatter(data=df, x=\"t1\", y=\"hum\", c=\"season\", cmap=\"coolwarm\", s = 15)\nplt.title(\"t1 distribution According to humudity\", fontsize = 13)\nplt.subplot(2,1,2)\nplt.scatter(data=df, x=\"t1\", y=\"wind_speed\", c=\"season\", cmap=\"coolwarm\", s = 15)\nplt.title(\"t1 distribution According to wind speed\", fontsize = 13);","a1390e2a":"# WELCOME to my Bike Demand Visualization!","1a3d2e91":"### Let us plot the distribution of weather code by seasons","990dbba5":"### Plot bike shares by day of month","30249e6e":"### Plot bike shares over time using lineplot","07eb9063":"### For more clear understanding, let's visualize the correlation of the target variable and the other features with heatmap","b9d2a889":"### Read the csv and get basic information from the dataset","ac028643":"### Plot bike shares by day of week\n- You may want to see whether it is a holiday or not","f08e6115":"### Visulaize all the continuous variables with histogram and scatterplot","0e3d616c":"### There is something unusual with the count higher then 6000. There must be something special with that values. Let us look which day they are","625627ea":"### Considering that our dataset includes the observations from the beginning of 2015 to March 2017, it can be  seen that the annual usages are close to each other except for minor changes. ","b0d48c0c":"### Let us visualize the correlation with a heatmap","e33340ea":"### Here we are goint to make feature engineering. We will extract new columns (day of the week, day of the month, hour, month, season, year etc.)","7e0ce176":"### Everthing seems to be normal between the columns","9383929a":"### Let us visualize the correlation of the target variable and the other features with barplot","3a411130":"### Let us plot the distribution of various discrete features on (Season, haliday, weekend and weathercode)","cc15bdcd":"### Plot bike shares by hours on (holidays, weekend, season)","fe0632e0":"### Let us visualize the distribution of bike shares by weekday\/weekend with piechart and barplot","76bfc93f":"### Determines","173707f0":"#### Features\n\n- timestamp - timestamp field for grouping the data\n- cnt - the count of a new bike shares\n- t1 - real temperature in C\n- t2 - temperature in C \u201cfeels like\u201d\n- hum - humidity in percentage\n- wind_speed - wind speed in km\/h\n- weather_code - category of the weather\n- is_holiday - boolean field - 1 holiday \/ 0 non holiday\n- is_weekend - boolean field - 1 if the day is weekend\n- season - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\n**\"weather_code\" category description:**\n* 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity \n* 2 = scattered clouds \/ few clouds \n* 3 = Broken clouds \n* 4 = Cloudy \n* 7 = Rain\/ light Rain shower\/ Light rain \n* 10 = rain with thunderstorm \n* 26 = snowfall \n* 94 = Freezing Fog\n---","fda67298":"### Let us start with importing necessary libraries","8fbed1ac":"### We have come to the end of the visualization work I tried to do about this data set. I tried to use Seaborn and Matplotlib libraries.Looking forward to your feedback. Thanks a lot.","915d0883":"### People tend to biking in weekdays more than weekends","cf612204":"### As expected, in summer, bike shares is increasing","2140ba1a":"### Have a look at the data type of each variable, transform `timestamp` in type, and set it as index.","25791b29":"### Plot bike shares by months and year_of_month (use lineplot, pointplot, barplot)","4684a338":"### In the mornings, 07-09 and afternoons between 16-18, bike shares is increasing","a138bc4e":"### Plot bike shares by year and on holidays by seasons"}}