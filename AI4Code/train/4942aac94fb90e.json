{"cell_type":{"63537842":"code","64fef3de":"code","aaf6f880":"code","34b0ccc2":"code","818eb149":"code","2d1db8de":"code","a8f73cd5":"code","35be5a8c":"code","d25f8c24":"code","5dbac46a":"code","e8635531":"code","dc1d359f":"code","106d0007":"code","708198e7":"code","d63df214":"code","8c28848d":"code","e9762c96":"code","e094e144":"code","a2181ff9":"code","8341bc14":"code","ea339b20":"code","66076b93":"code","6917677a":"code","dea6e359":"code","6b9cfca0":"code","10c1ad45":"code","0c0537b2":"code","53658876":"code","45052f59":"markdown","0bb4cbeb":"markdown","dbfb6143":"markdown","aa8429ae":"markdown","33a36c9f":"markdown","9cef41e4":"markdown","69553ca9":"markdown","8bcc4122":"markdown","f545181c":"markdown","ebc177fa":"markdown","dba83c5e":"markdown","dabf6010":"markdown"},"source":{"63537842":"import pandas as pd\nimport spacy\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom IPython.core.display import display, HTML\n\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\ndisplay(HTML(\"<style>.output_result { max-width:100% !important; }<\/style>\"))\npd.set_option(\"display.max_rows\", 500)\npd.set_option(\"display.max_columns\", 500)\nplt.style.use('fivethirtyeight')","64fef3de":"data= pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ncol_names=['Duration', 'Age','Gender','Country', 'Education', 'Title', 'Num_Years_Code',\n                              'Lang_Python', 'Lang_R','Lang_SQL','Lang_C_','Lang_CPlus','Lang_Java_','Lang_Javascript',\n                              'Lang_Julia','Lang_Swift','Lang_Bash','Lang_MATLAB','Lang_None','Lang_Other','LangRec_First',\n                              'Env_Jupyter', 'Env_RStudio','Env_Visual','Env_VScode','Env_PyCharm','Env_Spyder',\n                              'Env_Notepad','Env_Sublime','Env_Vim','Env_MATLAB','Env_None','Env_Other',\n                              'Note_Kaggle', 'Note_Colab', 'Note_Azure', 'Note_Paperspace', 'Note_Binder',\n                              'Note_Ocean', 'Note_IBM', 'Note_Amzn_Sage', 'Note_Amzn_EMR', 'Note_Google_AI',\n                              'Note_Google_Datalab', 'Note_Databricks', 'Note_None', 'Note_Other', \n                              'Platform', 'Hardware_GPU', 'Hardware_TPU', 'Hardware_None', 'Hardware_Other',\n                              'Num_TPU', 'Visual_Matplotlib', 'Visual_Seaborn', 'Visual_Plotly', 'Visual_Ggplot',\n                              'Visual_Shiny', 'Visual_D3', 'Visual_Altair', 'Visual_Bokeh', 'Visual_Geoplotlib',\n                              'Visual_Leaflet', 'Visual_None', 'Visual_Other', 'Num_Years_ML', 'ML_SKLearn',\n                             'ML_TF', 'ML_Keras', 'ML_PyTorch', 'ML_FastAI', 'ML_MXNet', 'ML_Xgboost', 'ML_LightGBM',\n                             'ML_CatBoost', 'ML_Prophet', 'ML_H2O', 'ML_Caret', 'ML_Tidy', 'ML_JAX', 'ML_None',\n                             'ML_Other', 'MLalg_LR', 'MLalg_RF', 'MLalg_GB', 'MLalg_BA', 'MLalg_EA', 'MLalg_NN', 'MLalg_CNN', 'MLalg_GAN',\n                             'MLalg_RNN', 'MLalg_TN', 'MLalg_None', 'MLalg_Other', 'CV_GP', 'CV_IS', 'CV_OD', 'CV_IC', 'CV_GAN',\n                             'CV_None', 'CV_Other', 'NLP_WE', 'NLP_EDM', 'NLP_CE', 'NLP_TLM', 'NLP_None', 'NLP_Other', \n                             'Size_Company', 'Size_DS', 'Current_ML', 'Work_Analysis', 'Work_Infra', 'Work_ML_Prototype',\n                             'Work_ML', 'Work_ML_Improve', 'Work_Research', 'Work_None', 'Work_Other', 'Current_Comp',\n                             'Money_Spent', 'CloudPlt_AWS', 'CloudPlt_Azure', 'CloudPlt_GCP', 'CloudPlt_IBM', 'CloudPlt_Oracle', \n                             'CloudPlt_SAP', 'CloudPlt_Salesforce', 'CloudPlt_VMware', 'CloudPlt_Alibaba', 'CloudPlt_Tencent',\n                             'CloudPlt_None','CloudPlt_Other', 'Cloud_EC2', 'Cloud_Lambda', 'Cloud_Elastic', 'Cloud_Azure',\n                             'Cloud_AzureContainer', 'Cloud_AzureFunctions', 'Cloud_GoogleEngine', 'Cloud_GoogleFunc',\n                             'Cloud_GoogleRun', 'Cloud_GoogleApp', 'Cloud_None', 'Cloud_Other', 'MLPlt_Sagemaker', 'MLPlt_AmazonForecast',\n                             'MLPlt_AmazonRekog', 'MLPlt_AzureML', 'MLPlt_AzureCogn', 'MLPlt_GoogleAI', 'MLPlt_GoogleVideoAI',\n                             'MLPlt_GoogleNLP', 'MLPlt_GoogleVisionAI', 'MLPlt_None', 'MLPlt_Other', 'BigData_MySQL', 'BigData_PGSQL',\n                             'BigData_SQLite', 'BigData_Oracle', 'BigData_MongoDB', 'BigData_Snowflake', 'BigData_IBM',\n                             'BigData_MSSQL', 'BigData_Access', 'BigData_Azure', 'BigData_Redshift', 'BigData_Athena',\n                             'BigData_Dynamo', 'BigData_GoogleBigQuery', 'BigData_GoogleSQL', 'BigData_GoogleGirestore',\n                             'BigData_None', 'BigData_Other', 'BigData_Most', 'BI_Amazon', 'BI_Power', 'BI_Google', 'BI_Looker',\n                             'BI_Tableau', 'BI_Salesforce', 'BI_Einstein', 'BI_Qlik', 'BI_Domo', 'BI_TIBCO', 'BI_Alteryx',\n                             'BI_Sisense', 'BI_SAP', 'BI_None', 'BI_Other', 'BI_Most', 'AutoML_Aug', 'AutoML_FE', 'AutoML_MS', 'AutoML_MA',\n                             'AutoML_HPT', 'AutoML_Pipe', 'AutoML_None', 'AutoML_Other', 'AutoMLReg_Google', 'AutoMLReg_H2O',\n                             'AutoMLReg_Databricks', 'AutoMLReg_DaraRobot', 'AutoMLReg_Tpot', 'AutoMLReg_Keras', \n                             'AutoMLReg_Sklearn', 'AutoMLReg_ML', 'AutoMLReg_Xceessiv', 'AutoMLReg_MLbox', 'AutoMLReg_None',\n                             'AutoMLReg_Other', 'MLExp_Neptune', 'MLExp_WB', 'MLExp_Comet', 'MLExp_Sacred', 'MLExp_TB', \n                             'MLExp_Guild', 'MLExp_Polyaxon', 'MLExp_Trains', 'MLExp_Monitor', 'MLExp_None', 'MLExp_Other',\n                             'Deploy_Plotly', 'Deploy_Streamlit', 'Deploy_NBViewer', 'Deploy_GitHub', 'Deploy_Blog',\n                             'Deploy_Kaggle', 'Deploy_Colab', 'Deploy_Shiny', 'Deploy_None', 'Deploy_Other', 'Course_Coursera',\n                             'Course_edX', 'Course_Kaggle', 'Course_DataCamp', 'Course_FastAI', 'Course_Udacity', 'Course_Udemy',\n                             'Course_Linkedin', 'Course_Cloud', 'Course_Uni', 'Course_None', 'Course_Other', 'Primary_Analysis',\n                             'Fav_Media_Twitter', 'Fav_Media_Email', 'Fav_Media_Reddit', 'Fav_Media_Kaggle', 'Fav_Media_Course',\n                             'Fav_Media_Youtube', 'Fav_Media_Podcast', 'Fav_Media_Blog', 'Fav_Media_Journal', 'Fav_Media_Slack',\n                             'Fav_Media_None', 'Fav_Media_Other', 'Supp_Cloud_AWS', 'Supp_Cloud_Azure', 'Supp_Cloud_Google',\n                             'Supp_Cloud_IBM', 'Supp_Cloud_Oracle', 'Supp_Cloud_SAP', 'Supp_Cloud_VMware', 'Supp_Cloud_Salesforce',\n                             'Supp_Cloud_Alibaba', 'Supp_Cloud_Tencent', 'Supp_Cloud_None', 'Supp_Cloud_Other',\n                             'Supp_CloudPlt_EC2', 'Supp_CloudPlt_Lambda', 'Supp_CloudPlt_Elastic', 'Supp_CloudPlt_Azure',\n                             'Supp_CloudPlt_AzureContainer', 'Supp_CloudPlt_AzureFunc', 'Supp_CloudPlt_GoogleCompute',\n                             'Supp_CloudPlt_GoogleFunc', 'Supp_CloudPlt_GoogleRun', 'Supp_CloudPlt_GoogleApp', 'Supp_CloudPlt_None',\n                             'Supp_CloudPlt_Other', 'Supp_ML_Sagemaker', 'Supp_ML_AmznForecast', 'Supp_ML_AmznRekog',\n                             'Supp_ML_Azure', 'Supp_ML_AzureCogn', 'Supp_ML_GoogleAI', 'Supp_ML_GoogleVideoAI', 'Supp_ML_GoogleNLP',\n                             'Supp_ML_GoogleVisionAI', 'Supp_ML_None', 'Supp_ML_Other', 'Supp_BigData_MySQL', 'Supp_BigData_PGSQL',\n                             'Supp_BigData_SQLite', 'Supp_BigData_Oracle', 'Supp_BigData_MongoDB', 'Supp_BigData_Snowflake',\n                             'Supp_BigData_IBM', 'Supp_BigData_MSSQL', 'Supp_BigData_Access', 'Supp_BigData_Azure', 'Supp_BigData_Redshift',\n                             'Supp_BigData_Athena', 'Supp_BigData_Dynamo', 'Supp_BigData_GoogleBigQuery', 'Supp_BigData_GoogleSQL',\n                             'Supp_BigData_GoogleFirestore', 'Supp_BigData_None', 'Supp_BigData_Other', 'Supp_BI_Power', 'Supp_BI_Amzn',\n                             'Supp_BI_Google', 'Supp_BI_Looker', 'Supp_BI_Tableau', 'Supp_BI_Salesforce', 'Supp_BI_Einstein', \n                             'Supp_BI_Qlik', 'Supp_BI_Domo', 'Supp_BI_TIBCO', 'Supp_BI_Alteryx', 'Supp_BI_Sisense', \n                             'Supp_BI_SAP', 'Supp_BI_None', 'Supp_BI_Other', 'Supp_AutoML_Aug', 'Supp_AutoML_FE',\n                             'Supp_AutoML_MS', 'Supp_AutoML_MA', 'Supp_AutoML_HPT', 'Supp_AutoML_Pipe',\n                             'Supp_AutoML_None', 'Supp_AutoML_Other', 'Supp_AutoMLTool_Google', 'Supp_AutoMLTool_H2O',\n                             'Supp_AutoMLTool_Databricks', 'Supp_AutoMLTool_Datarobot', 'Supp_AutoMLTool_Tpot',\n                             'Supp_AutoMLTool_Keras', 'Supp_AutoMLTool_Sklearn', 'Supp_AutoMLTool_Auto',\n                             'Supp_AutoMLTool_Xcessiv', 'Supp_AutoMLTool_MLbox', 'Supp_AutoMLTool_None',\n                             'Supp_AutoMLTool_Other', 'Supp_MLExp_Neptune', 'Supp_MLExp_WB', 'Supp_MLExp_Comet',\n                             'Supp_MLExp_Sacred', 'Supp_MLExp_TB', 'Supp_MLExp_Guild', \n                             'Supp_MLExp_Polyaxon', 'Supp_MLExp_Trains', 'Supp_MLExp_Monitor',\n                             'Supp_MLExp_None', 'Supp_MLExp_Other']\n# data_orig.columns= col_names\n# data= data_orig.copy()\n# data.columns= data_orig.columns","aaf6f880":"data","34b0ccc2":"#For getting column names right\n[(data.columns[i],col) for i,col in enumerate(data.iloc[0])]","818eb149":"df_with_label= data[['Q1','Q2','Q3','Q4','Q5','Q6']]\nplatform_question= data[['Q37_Part_'+str(i) for i in range(1,12)]].copy()\nlanguage_question= data[['Q7_Part_'+str(i) for i in range(1,12)]].copy()","2d1db8de":"platform_question.columns","a8f73cd5":"df= pd.concat([df_with_label,platform_question,language_question],axis=1).drop(0)\ndf.columns","35be5a8c":"df.columns=['age','gender','country','education','job_title','coding_years','platform1','platform2','platform3',\n            'platform4','platform5','platform6','platform7','platform8','platform9','platform10','platform11','language1','language2','language3',\n            'language4','language5','language6','language7','language8','language9','language10','language11']","d25f8c24":"df.columns","5dbac46a":"df2= df[df['country']=='India'].copy()\ndf= df2.copy()","e8635531":"df[~ df['coding_years'].isna()]","dc1d359f":"df['coding_years'].value_counts()","106d0007":"#filling with mean and some Bias\ndef rep(X):\n    yrs= df['coding_years'].value_counts().index\n    if X==yrs[0]:\n        return np.random.choice(np.arange(start=1.1,stop=1.9,step=0.1))\n    if X==yrs[1]:\n        return np.random.choice(np.arange(start=3.1,stop=5.0,step=0.1))\n    if X==yrs[2]:\n        return np.random.choice(np.arange(start=5.1,stop=10,step=0.1))\n    if X==yrs[3]:\n        return np.random.choice(np.arange(start=0.1,stop=0.9,step=0.1))\n    if X==yrs[4]:\n        return 0\n    if X==yrs[5]:\n        return np.random.choice(np.arange(start=10.1,stop=20.0,step=0.1))\n    if X==yrs[6]:\n        return np.random.choice(np.arange(start=20.1,stop=30,step=0.1))\n    \ndf['coding_years']=df['coding_years'].apply(rep)\n","708198e7":"fig= plt.figure(figsize=(12,10))\ndef rep_name(X):\n    if 'language' in X:\n        return 'languages'\n    elif 'platform' in X:\n        return 'platforms'\n    else:\n        return X\ntemp= pd.DataFrame(df[df['coding_years'].isna()].isna().sum().sort_values(ascending=False)).reset_index()\ntemp['index']=temp['index'].apply(rep_name)\na= temp['index'].unique()\nb= temp[-8:][0].values\n\npd.DataFrame([a,b]).T.set_index(0).plot(kind='barh')\nplt.title(' fields skipped by Kagglers while giving answers')\nplt.xlim(0,400)\nplt.xlabel('Number of answers people didnt gave')\nplt.ylabel('Catgories')\nplt.legend().remove()\nplt.show()","d63df214":"df2= df.drop(df[df['coding_years'].isna()].index)","8c28848d":"df2= round((df2.groupby('job_title').mean()- df2.groupby('job_title').mean().loc['Student'])[:-1]*12)","e9762c96":"df2.plot(kind='barh',figsize=(12,5))\nfor i,name in enumerate(df2.index):\n    plt.annotate(xy= (int(df2.iloc[i].values)+1,i),s=int(df2.iloc[i].values))\nplt.xlabel('<---------- Months ---------->')\nplt.legend().remove()\nplt.title(\"Coding Experience of Employees working on different Jobs \")","e094e144":"df2= data['Q4'].drop(0)","a2181ff9":"def rep(X):\n    if 'Some college\/university study without earning a bachelor\u2019s degree' == X:\n        return 'less than bachelor'\n    elif 'No formal education past high school'== X:\n        return 'less than bachelor'\n    elif 'I prefer not to answer'==X:\n        return 'less than bachelor'\n    elif 'Master\u2019s degree'==X:\n        return 'Masters'\n    elif \"Bachelor\u2019s degree\"== X:\n        return 'Bachelor'\n    elif \"Doctoral degree\"== X:\n        return 'Higher than Masters'\n    elif \"Professional degree\"== X:\n        return 'Bachelor'\n\ndf2= df2.apply(rep).value_counts()","8341bc14":"df2= df2.loc[['less than bachelor','Bachelor','Masters','Higher than Masters']]","ea339b20":"plt.figure(figsize=(12,5))\ntotal= np.sum(df2.values)\nvals=((df2\/total)*100)\nplt.barh(df2.index,vals)\nplt.xlim((0,100))\nplt.ylabel('Education Level')\nplt.xlabel('# of Enthusiast')\nplt.title('Major Education streams of kagglers')\nplt.annotate(xytext=(62,0.4),xy=(44,2),s='Accounts for \\n more than 75% of audience',arrowprops = { 'facecolor' : 'black', 'shrink' : 0.05 })\nplt.annotate(xytext=(61,0.86),xy=(44,1),s='',arrowprops = { 'facecolor' : 'black', 'shrink' : 0.05 })\nfor i,num in enumerate(vals):\n    plt.annotate(xy=(np.round(num),i),s=str(round(num))+'%')\n    \nplt.show()\n","66076b93":"plt.figure(figsize=(12,5))\ndf2= df[['gender','education']].copy()\ndf2['education']= df2['education'].apply(rep)\ndf2 = pd.concat([df2[df2['gender']=='Man'],df2[df2['gender']=='Woman']])\nedu_cols= list(df2['education'].value_counts().index)\nedu_vals= list(df2['education'].value_counts().values)\ndf_group= df2.groupby('education')\ngroup=[]\nmen=[]\nwomen=[]\nx=[(group.append(col),men.append(df_group.get_group(col)['gender'].value_counts()[0]),women.append(df_group.get_group(col)['gender'].value_counts()[1])) for col in edu_cols]\nfig,ax= plt.subplots()\nz= ax.barh(y= group,width=men,label='Men',)\nz= ax.barh(y= group,width=women,label='Women')\nplt.title('Contribution of Men and Women in above streams')\nplt.legend()\nplt.show()","6917677a":"df2= df[['gender','country','job_title','language1','language2','language3','language4','language5','language6','language7','language8','language9','language10','language11']]\ndf2","dea6e359":"plt.figure(figsize=(12,6))\npy_r= df2[(df2['language1']=='Python') & (df2['language2']=='R')][['gender', 'country', 'job_title', 'language1', 'language2']]\n\nval= (py_r['job_title'].value_counts()\/py_r['job_title'].value_counts().sum() *100).values\nj_title= (py_r['job_title'].value_counts()\/py_r['job_title'].value_counts().sum() *100).index\n\ntitles= np.arange(start=0, stop=len(j_title)*2,step=2)\n\nplt.barh(y= titles, width=val,height=0.8,label='Both',color='green')\n\npy_only= df2[(df2['language1']=='Python') & ~(df2['language2']=='R')][['gender', 'country', 'job_title']]\nval= (py_only['job_title'].value_counts()[j_title]\/py_only['job_title'].value_counts().sum()*100).values\nplt.barh(y= titles-0.5, width=val,height=0.2,label='Only python',color='blue')\n\n\nr_only= df2[(df2['language2']=='R') & ~(df2['language2']=='python')][['gender', 'country', 'job_title']]\nval= (r_only['job_title'].value_counts()[j_title]\/r_only['job_title'].value_counts().sum()*100).values\nplt.barh(y= titles+0.35, width=val,height=0.2,label='Only R',color='red')\n\n\nplt.title('Python and R usage in various job categories in India')\nplt.ylabel('jobs')\nplt.xlabel('% of people')\nplt.xlim(0,50)\nplt.yticks(titles,j_title,)\nplt.legend()\nplt.show()","6b9cfca0":"sql= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language3'].value_counts().values\/len(df)*100\nC= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language4'].value_counts().values\/len(df)*100\nCplus= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language5'].value_counts().values\/len(df)*100\njava= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language6'].value_counts().values\/len(df)*100\njavascript= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language7'].value_counts().values\/len(df)*100\nswift= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language9'].value_counts().values\/len(df)*100\nbash= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language10'].value_counts().values\/len(df)*100\nmatlab= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language11'].value_counts().values \/len(df) *100\nfig,ax= plt.subplots()\nax.barh('sql',sql)\nax.barh('C',C)\nax.barh('Cplus',Cplus)\nax.barh('java',java)\nax.barh('javascript',javascript)\nax.barh('swift',swift)\nax.barh('bash',bash)\nax.barh('matlab',matlab)\nplt.title('If not python and R then what?')\nplt.xlim(0,5)","10c1ad45":"\ny_x= np.arange(start=0,stop=18,step=2.1)\nfig,ax=plt.subplots(figsize=(12,5))\n#with python\nsql= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language3'].value_counts().values\/len(df)*100\nC= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language4'].value_counts().values\/len(df)*100\nCplus= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language5'].value_counts().values\/len(df)*100\njava= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language6'].value_counts().values\/len(df)*100\njavascript= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language7'].value_counts().values\/len(df)*100\njulia= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language8'].value_counts().values\/len(df)*100\nswift= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language9'].value_counts().values\/len(df)*100\nbash= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language10'].value_counts().values\/len(df)*100\nmatlab= df2[(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language11'].value_counts().values \/len(df) *100\nax.barh(0,sql,color='#494ff0',label='Python')\nax.barh(2,C,color='#494ff0')\nax.barh(4,Cplus,color='#494ff0')\nax.barh(6,java,color='#494ff0')\nax.barh(8,javascript,color='#494ff0')\nax.barh(10,julia,color='#494ff0')\nax.barh(12,swift,color='#494ff0')\nax.barh(14,bash,color='#494ff0')\nax.barh(16,matlab,color='#494ff0')\n\n\n#with R\nsql= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language3'].value_counts().values\/len(df)*100\nC= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language4'].value_counts().values\/len(df)*100\nCplus= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language5'].value_counts().values\/len(df)*100\njava= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language6'].value_counts().values\/len(df)*100\njavascript= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language7'].value_counts().values\/len(df)*100\nswift= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language9'].value_counts().values\/len(df)*100\nbash= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language10'].value_counts().values\/len(df)*100\nmatlab= df2[~(df2['language1'] =='Python') & ~(df2['language2'] =='R')]['language11'].value_counts().values \/len(df) *100\njulia= df2[~(df2['language1'] =='Python') & (df2['language2'] =='R')]['language8'].value_counts().values\/len(df)*100\n\nax.barh(0+0.8,sql,color='#FF5733')\nax.barh(2+0.8,C,color='#FF5733')\nax.barh(4+0.8,Cplus,color='#FF5733')\nax.barh(6+0.8,java,color='#FF5733')\nax.barh(8+0.8,javascript,color='#FF5733')\nax.barh(10+0.8,julia,color='#FF5733')\nax.barh(12+0.8,swift,color='#FF5733')\nax.barh(14+0.8,bash,color='#FF5733')\nax.barh(16+0.8,matlab,color='#FF5733',label='R')\nplt.yticks(y_x,['sql','C','Cplus','java','javascript','julia','swift','bash','matlab'])\nplt.legend()\nplt.xlim(0,50)\nplt.title('Other Languages which responders knew along with python and R')\nplt.show()\n","0c0537b2":"df2= df[['job_title','language1','language2','language3','language4','language5','language6','language7','language8','language9','language10','language11']]\ndf2","53658876":"lang=['Python',\n 'R',\n 'SQL',\n 'C',\n 'C++',\n 'java',\n 'javascript',\n 'julia',\n 'Swift',\n 'Bash',\n 'matlab']\n\njob_titles=['Student',\n 'Software Engineer',\n 'Data Scientist',\n 'Currently not employed',\n 'Other',\n 'Data Analyst',\n 'Machine Learning Engineer',\n 'Business Analyst',\n 'Research Scientist',\n 'Product\/Project Manager',\n 'Data Engineer',\n 'Statistician',\n 'DBA\/Database Engineer']\nplt.figure(figsize=(12,5))\na= 2\nb= 5\nc= 6\ny_i= np.arange(start=0,stop= len(lang)*3,step=3)\n\nval=[]\nfor i in range(1,12):\n    val.append(int(df2.groupby('job_title').get_group(job_titles[a])['language'+str(i)].value_counts().values))\nplt.bar(y_i,val,label=str(job_titles[a]))\n\nval=[]\nfor i in range(1,12):\n    val.append(int(df2.groupby('job_title').get_group(job_titles[b])['language'+str(i)].value_counts().values))\nplt.bar(y_i+0.8,val,label=str(job_titles[b]))\n\nval=[]\nfor i in range(1,12):\n    val.append(int(df2.groupby('job_title').get_group(job_titles[c])['language'+str(i)].value_counts().values))\nplt.bar(y_i-0.8,val,label=str(job_titles[c]))\n\nplt.xticks(y_i,lang)\nplt.legend()\nplt.title('Comparing language skills between DS,DA and MLE among responders')\nplt.show()","45052f59":"## Q2: With what education Degree does enthusiast are learning to Explore the data?","0bb4cbeb":" ## In this Case Study, i have tried to ask the right question which can give some important answers of Kaggle Survey dataset","dbfb6143":"- Their are some people in dataset who have filled 1 options and then submitted the form. So no sense in considering their response.","aa8429ae":"\n## Python and R doesn't comprise 100% language being used, so if Not python and R then what?","33a36c9f":"## Q3:  Breaking the dilema between Python and R for the Best and most used language","9cef41e4":"From the above graph, It can be clearly seen that along with  python and R, SQL is an necessary skill which data lover must posses","69553ca9":"## Question 1 :In India with how much coding experience men and women are working on their current job of exploring data?\n","8bcc4122":"ISCED (International Standard Classification of Education) classifies education to mutliple categories\n$\n\\Bigg\\{\n- Primary education\n- Lower secondary education\n- Upper secondary education\n- Post-secondary non-tertiary education\n- Short-cycle tertiary education\n\\Bigg\\}\n$\n<b>Less than bachelor<\/b>\n<br>\n<b>\n- Bachelor's or equivalent\n- Master's or equivalent\n- Doctoral or equivalent \n<\/b>\n","f545181c":"## What toolset does different job position require ?","ebc177fa":"Source: https:\/\/en.wikipedia.org\/wiki\/International_Standard_Classification_of_Education","dba83c5e":"<b> When data is broken down into gender. we see that women among the respondents are comparatively less than men. In both groups,\nthe most popular education indicated is masters. The education proportions of females are very similar in masters and Bachelor. But repondents with less than bachelor degree are more male.<\/b>","dabf6010":"Student showing the highest ratio but it might of students who have learned or still learning the languages,\nWhile in a Job Position of Data Scientist Python does get used but as the scientist word refers as a person who does lots of experiments and for doing experiments we need to know lot's of tools to perform those experiments. In comparision with Python R surely does get's used up more becuase of its inbuilt statistical packages.\nIn every other job field mentioned except Machine Learning  Engineer and Software Engineer, all job positions use R more than python,\nSoftware engineering profession also include web development and other things so that may be the reason for the high ratio.\nwhereas for Machine Learning Enginner python surely get's used up more\n "}}