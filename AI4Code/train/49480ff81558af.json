{"cell_type":{"258721bf":"code","d3dbf9d3":"code","8aa8e6e3":"code","598becd5":"code","c71b0527":"code","39fc6429":"code","a51a2a97":"code","2aa701b6":"code","862a7280":"code","41666d05":"code","a3d60fb6":"code","8ecac6d9":"code","805ba165":"code","9bcedf4d":"code","98a9091e":"code","7c4b56c6":"code","79e698c0":"code","223e4f05":"code","fd8e37c7":"code","89524a77":"code","e5ffc827":"code","282fa7c9":"code","55a2da83":"code","28941542":"code","b306a000":"code","ad36f57b":"markdown"},"source":{"258721bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3dbf9d3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport sklearn\nimport pickle\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout\n%matplotlib inline","8aa8e6e3":"df = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')\ndf.head()","598becd5":"df.info()","c71b0527":"df.describe()","39fc6429":"df.drop(columns = ['RowNumber', 'CustomerId', 'Surname'], axis = 1, inplace = True)","a51a2a97":"values = df.IsActiveMember.value_counts()\nlabels = ['Not Active', 'Active']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","2aa701b6":"values = df.Exited.value_counts()\nlabels = ['Not Exited', 'Exited']\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","862a7280":"values = df.HasCrCard.value_counts()\nlabels = ['doesnt has CrCard', 'HasCrCard']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","41666d05":"values = df.Gender.value_counts()\nlabels = ['Male', 'Female']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","a3d60fb6":"values = df.Geography.value_counts()\nlabels = ['France', 'Germany', 'Spain']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.05,0.05)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nautotexts[2].set_color('black')\nplt.show()","8ecac6d9":"corr = df.corr()\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns ,cmap=\"Blues\")","805ba165":"df['Geography'] = df['Geography'].map({'France' : 0, 'Germany' : 1, 'Spain' : 2})\ndf['Gender'] = df['Gender'].map({'Male' : 0, 'Female' : 1})","9bcedf4d":"df.head()","98a9091e":"X = pd.DataFrame(df.iloc[:, :-1].values)\ny = df.iloc[:, -1].values","7c4b56c6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","79e698c0":"sc = StandardScaler()\nx_train = sc.fit_transform(X_train)\nx_test = sc.transform(X_test)","223e4f05":"x_train.shape","fd8e37c7":"model = Sequential()\nmodel.add(Dense(units = 12, activation = 'relu', input_dim = 10))\nmodel.add(Dense(units = 8,  activation = 'relu'))\nmodel.add(Dense(units = 1,  activation = 'sigmoid'))\nmodel.summary()","89524a77":"model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","e5ffc827":"model.fit(x_train,y_train, batch_size = 10, epochs = 20 ,validation_split=0.33)","282fa7c9":"y_pred = model.predict(x_test)","55a2da83":"score, acc = model.evaluate(x_test, y_test,\n                            batch_size=10)\nprint('Test accuracy:', acc)","28941542":"def build_model():\n    model = Sequential()\n    model.add(Dense(units = 12, activation = 'relu', input_dim = 10))\n    model.add(Dense(units = 8,  activation = 'relu'))\n    model.add(Dense(units = 1,  activation = 'sigmoid'))\n    model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return model","b306a000":"from sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nmodel = KerasClassifier(build_fn = build_model)\nbatches = [10,20,40,60,80,100]\nepochs= [20,50,100]\nparam = dict(batch_size=batches , epochs= epochs)\ngrid=GridSearchCV(estimator=model,param_grid=param)\nresult = grid.fit(x_train,y_train)\nprint(\"best : %f using %s\",(result.best_score_ , result.best_params_))","ad36f57b":"#2222"}}