{"cell_type":{"c6284570":"code","831561b9":"code","dc4d6a5f":"code","72f0bb0f":"code","41db93e1":"code","d21b32b9":"code","da99304b":"code","8ee66ada":"code","4ce152be":"code","63c07603":"code","6517aac0":"code","a564aedf":"code","04365331":"code","67287dac":"code","54209f37":"code","1b3a20fe":"code","b899dbf4":"code","22e25a18":"code","dcbc5ea4":"code","725deb29":"code","33f1ea50":"code","f279513f":"code","e7d55946":"code","e15e1f19":"code","05584789":"code","17eec8c4":"code","fae6bfab":"code","c4e2414f":"code","72a6deb5":"code","6d21566b":"code","8c54aacf":"code","f94ecae9":"code","7af8ceda":"code","a3695c6e":"code","bc04ed95":"code","45e26267":"code","0d6c335f":"code","e92bb52a":"code","f83bfc26":"code","82d455bb":"markdown","71c7a4b8":"markdown"},"source":{"c6284570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","831561b9":"from keras.datasets import cifar10\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, BatchNormalization\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import SGD\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import regularizers\n\nimport numpy as np\n\nseed = 7\nnp.random.seed(seed)","dc4d6a5f":"(x_train, y_train), (x_test, y_test) = cifar10.load_data()","72f0bb0f":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\n\nmean = np.mean(x_train,axis=(0,1,2,3))\nstd = np.std(x_train,axis=(0,1,2,3))\nx_train = (x_train - mean)\/(std + 1e-7)\nx_test = (x_test - mean)\/(std + 1e-7)","41db93e1":"num_class = 10\ny_train = to_categorical(y_train, )\ny_test = to_categorical(y_test)","d21b32b9":"model = Sequential()\nmodel.add(Conv2D(32,(3,3), input_shape = (32, 32, 3),padding='same', activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3),padding='same', activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add((Dropout(0.2)))\nmodel.add(Dense(no_class, activation='softmax'))","da99304b":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","8ee66ada":"model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=100, batch_size=96)","4ce152be":"model.evaluate(x_test, y_test)","63c07603":"model.evaluate(x_test, y_test)","6517aac0":"model = Sequential()\nmodel.add(Conv2D(32,(3,3), input_shape = (32, 32, 3),padding='same', activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(32,(3,3), activation = 'relu', padding = 'same'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3), activation = 'relu', padding = 'same'))\nmodel.add(Dropout(0.20))\n\nmodel.add(Conv2D(64,(3,3), activation = 'relu', padding = 'same'))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(128,(3,3), activation = 'relu', padding = 'same'))\nmodel.add(Dropout(0.20))\n\nmodel.add(Conv2D(128,(3,3), activation = 'relu', padding = 'same'))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dropout(0.20))\n\nmodel.add(Dense(1024, activation = 'relu'))\nmodel.add(Dropout(0.20))\n\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.20))\n\nmodel.add(Dense(no_class, activation = 'softmax'))","a564aedf":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","04365331":"model.fit(x_train, y_train, validation_data=(x_test, y_test),\n          epochs=100, batch_size=120)","67287dac":"model.evaluate(x_test, y_test)","54209f37":"test = np.load('..\/input\/features.npy')","1b3a20fe":"test.shape","b899dbf4":"Y_pred = model.predict_classes(test)","22e25a18":"Y_pred.shape","dcbc5ea4":"(y_train[1000])","725deb29":"submission = pd.DataFrame(columns=['id','label'])\na = np.array(range(1,300001))","33f1ea50":"submission['id'] = a\nsubmission['label'] = Y_pred","f279513f":"submission[(submission['label']==0)] = 'airplane'\nsubmission[(submission['label']==1)] = 'automobile'\nsubmission[(submission['label']==2)] = 'bird'\nsubmission[(submission['label']==3)] = 'cat'\nsubmission[(submission['label']==4)] = 'deer'\nsubmission[(submission['label']==5)] = 'dog'\nsubmission[(submission['label']==6)] = 'frog'\nsubmission[(submission['label']==7)] = 'horse'\nsubmission[(submission['label']==8)] = 'ship'\nsubmission[(submission['label']==9)] = 'truck'","e7d55946":"a = np.array(range(1,300001))","e15e1f19":"submission.to_csv('submission_30-6.csv', index=None)","05584789":"submission['id'] = a\nsubmission.head()","17eec8c4":"model = Sequential()\n\nmodel.add(Conv2D(32,(3,3), input_shape = (32, 32, 3),padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32,(3,3), padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64,(3,3), padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64,(3,3), padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(128,(3,3), padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128,(3,3), padding='same', activation = 'relu', kernel_regularizer = regularizers.l2(0.0001)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(num_class, activation='softmax'))\n\nmodel.summary()","fae6bfab":"# Data Augmentation\n\ndatagen = ImageDataGenerator(rotation_range=15, \n                             width_shift_range=0.1,\n                             height_shift_range=0.1,\n                             horizontal_flip=True)\ndatagen.fit(x_train)","c4e2414f":"model.compile(loss='categorical_crossentropy', \n              optimizer='adam',\n              metrics=['accuracy'])\n\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=64),\n                    steps_per_epoch=x_train.shape[0] \/\/ 64,epochs=50,\n                    validation_data=(x_test,y_test))","72a6deb5":"model.evaluate(x_test,y_test)","6d21566b":"y_pred = model.predict(test)","8c54aacf":"pred = np.argmax(y_pred, axis=1)","f94ecae9":"np.greater(np.argmax(y_pred[0]), 0.55)","7af8ceda":"submission = pd.DataFrame(columns=['id','label'])\na = np.array(range(1,300001))","a3695c6e":"submission['id'] = a\nsubmission['label'] = pred","bc04ed95":"submission.head()","45e26267":"submission[(submission['label']==0)] = 'airplane'\nsubmission[(submission['label']==1)] = 'automobile'\nsubmission[(submission['label']==2)] = 'bird'\nsubmission[(submission['label']==3)] = 'cat'\nsubmission[(submission['label']==4)] = 'deer'\nsubmission[(submission['label']==5)] = 'dog'\nsubmission[(submission['label']==6)] = 'frog'\nsubmission[(submission['label']==7)] = 'horse'\nsubmission[(submission['label']==8)] = 'ship'\nsubmission[(submission['label']==9)] = 'truck'\nsubmission.head()","0d6c335f":"submission['id'] = a","e92bb52a":"submission.head()","f83bfc26":"submission.to_csv('submission_02-07.csv', index=None)","82d455bb":"## Deep Network + Data Augmentation","71c7a4b8":"## Larger Network"}}