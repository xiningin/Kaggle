{"cell_type":{"3b87bd81":"code","9b5bd1c8":"code","72c5332b":"code","091fae6e":"code","8f114a00":"code","d7f70928":"code","4ab1a26a":"markdown","321382b5":"markdown"},"source":{"3b87bd81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n\ntweets = pd.read_csv('..\/input\/twcs\/twcs.csv')\n\ntweets.columns\n\ntweets.tail(10)","9b5bd1c8":"# I need to get the timestamp of the tweet that the company is responding to\n\n#Separating the original dataframe into inbounds and outbounds\ninbounds = tweets.loc[tweets['inbound'] == True]\noutbounds = tweets.loc[tweets['inbound'] == False]\n\n#Merging\/joining to be able to later find time between responses. Messy as a variable because the table looks so messy.\nmessy = pd.merge(outbounds, inbounds, left_on='in_response_to_tweet_id', right_on='tweet_id', how='outer')\n\n#Changing timestamp format\nmessy['outbound_time'] = pd.to_datetime(messy['created_at_x'], format='%a %b %d %H:%M:%S +0000 %Y')\nmessy['inbound_time'] = pd.to_datetime(messy['created_at_y'], format='%a %b %d %H:%M:%S +0000 %Y')\n\n#Calculating time between between outbound response and inbound message\nmessy['response_time'] = messy['outbound_time'] - messy['inbound_time']\n\nmessy.head()","72c5332b":"#Making sure the data type is a timedelta\/duration\nprint('from ' + str(messy['response_time'].dtype))\n\n#Making it easier to later do averages by converting to a float datatype\nmessy['converted_time'] = messy['response_time'].astype('timedelta64[s]') \/ 60\n\nprint('to ' + str(messy['converted_time'].dtype))","091fae6e":"# Getting the average response time per company.\nmessy.groupby('author_id_x')['converted_time'].mean()","8f114a00":"#I saw it says 94 mins is the average time it takes for a response. This does not seem realistic.\n#Focusing in on Uber and taking out outliers.\n\nUber = messy[messy['author_id_x'] == 'Uber_Support']\nuber_times = Uber['converted_time']\n\nuber_times.dropna()\n\ndef remove_outlier(uber_times):\n    q1 = uber_times.quantile(0.25)\n    q3 = uber_times.quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df_out = uber_times.loc[(uber_times > fence_low) & (uber_times < fence_high)]\n    return df_out\n\nno_outliers = remove_outlier(uber_times)\n\nimport matplotlib.pyplot as plt\nhist_plot = no_outliers.plot.hist(bins=50)\nhist_plot.set_title('Uber Support Response Time')\nhist_plot.set_xlabel('Mins to Response')\nhist_plot.set_ylabel('Frequency')\nplt.show()\n\nprint('Uber\\'s average response time is ' + str(round(no_outliers.mean(),2)) + ' minutes.' )","d7f70928":"#AskLyft\n\nlyft = messy[messy['author_id_x'] == 'AskLyft']\nlyft_times = lyft['converted_time']\nlyft_times.dropna()\n\ndef remove_outlier(lyft_times):\n    q1 = lyft_times.quantile(0.25)\n    q3 = lyft_times.quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    fence_low  = q1-1.5*iqr\n    fence_high = q3+1.5*iqr\n    df_out = lyft.loc[(lyft_times > fence_low) & (lyft_times < fence_high)]\n    return df_out\n\n\nlyft_no_outliers = remove_outlier(lyft_times)\n\nimport matplotlib.pyplot as plt\nhist_plot = lyft_no_outliers['converted_time'].plot.hist(bins=30)\nhist_plot.set_title('Lyft Support Response Time')\nhist_plot.set_xlabel('Response time (min)')\nhist_plot.set_ylabel('Frequency')\nplt.show()\n\nprint('Lyft\\'s average response time is ' + str(round(lyft_no_outliers['converted_time'].mean(),2)) + ' minutes.' )","4ab1a26a":"Uber's average response time is ~14 mins. I'm inferring that this is around their service level agreement for Twitter support and this is the response time that they staff to.\n\nSo what is Lyft's response time like out of curiosity since they compete as a rideshare app?","321382b5":"I'm focusing on Uber's Twitter support response times to infer what their their SLA (service level agreement) for response time is and then comparing it to Lyft further down with the same process. The same can be done for any company handle in the list."}}