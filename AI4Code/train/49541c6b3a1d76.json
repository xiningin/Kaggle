{"cell_type":{"dff27434":"code","8e33c29f":"code","1768f7d7":"code","26e1aae3":"code","822099c7":"code","bf0133e9":"code","48401ed3":"code","8a0aedbd":"code","923e07b1":"code","4c8b02bd":"code","de65cdc7":"code","c32abf49":"code","3b781aa5":"code","b0c299ea":"code","7b811a4b":"code","a845bac9":"code","51e73738":"code","c2a970c3":"markdown","2d098e8e":"markdown","ac2a248e":"markdown","428b383b":"markdown","5ed1010c":"markdown","33d02af9":"markdown","141935e3":"markdown","dc046256":"markdown","7a400fe8":"markdown","6578088d":"markdown","4c47627f":"markdown","337bb849":"markdown"},"source":{"dff27434":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.mode.chained_assignment = None  # default='warn'\n","8e33c29f":"# read Input file\ndf_bike_buyers = pd.read_csv('\/kaggle\/input\/bike-buyers\/bike_buyers.csv')\n\nprint(df_bike_buyers.head(10))","1768f7d7":"# Generic function to calculate missing values, zero values\ndef calcMissingValues(df):\n    '''    \n        This function is used to calculate : zero values, missing values, NA and returns a dataframe with the above calculated\n        values. Pass a dataframe to this function.    \n    '''\n    \n    # Calc zero values\n    zero_vals = (df == 0.0).astype(int).sum(axis = 0)\n    \n    # Calc missing values\n    missing_vals = df.isnull().sum()\n    \n    # Calc percentage of missing values\n    missing_val_percent = (missing_vals \/ len(df)) * 100.0\n    \n    df_miss_val = pd.concat([zero_vals , missing_vals, missing_val_percent] , axis = 1)\n    \n    # rename dataframe\n    df_miss_val = df_miss_val.rename(columns = {0: 'zero_vals' , 1: 'missing_vals' , 2: '%_missing_vals'})\n    df_miss_val['data_type'] = df.dtypes\n    \n    print(df_miss_val)\n    \n    return df_miss_val","26e1aae3":"# Test the function calc_missing_values\nmissing_df = calcMissingValues(df_bike_buyers)","822099c7":"# Describe the data\nprint(df_bike_buyers.describe())","bf0133e9":"# Plot missing values\ndf_bike_buyers.isnull().sum().plot(kind = 'barh' , figsize = (10 , 8) , grid = 'True' , color = 'orange')\nplt.title('Columns with count of missing values')\nplt.show()","48401ed3":"# Lets drop the rows that contain missing values\n# As seeing from the columns, we observe that some of the row values have not been recorded\ndf_bike_buyers_clean = df_bike_buyers.dropna()\n\n# We can also drop the ID column\ndf_bike_buyers_clean.drop('ID' , inplace = True, axis = 1)\n\n# Check the difference of rows dropped\nprint('Rows dropped: {}'.format(df_bike_buyers.shape[0] - df_bike_buyers_clean.shape[0]))\nprint('Clean data shape: {}'.format(df_bike_buyers_clean.shape))\n\n# Lets check if indeed the missing values have been dropped\nclean_df_stat = calcMissingValues(df_bike_buyers_clean)\n\n# We must not delete the zero values as they hold information relevant to the context of the problem\n# Here a value of zero for children indicates either the person is single with no kids, or married with no kids\n","8a0aedbd":"# Lets plot relationship and between marital status and bike purchase = yes\n\n# Get unique values for marital status\nprint(df_bike_buyers_clean['Marital Status'].unique())\n\n# Martial-Status --> Buying a bike (Yes)\n\ndf_bike_yes = df_bike_buyers_clean[df_bike_buyers_clean['Purchased Bike'] == 'Yes'].copy().reset_index()\n\n#print(df_martial_bike)\n\nmarital_bike = df_bike_yes.groupby(['Marital Status'], as_index = False)['Purchased Bike'].count()\n\nmarital_bike.plot(kind = 'bar' , x = 'Marital Status' , y = 'Purchased Bike', figsize = (6 , 6) , color = 'red' , grid = True , width = 0.2 , rot = 0)\nplt.tight_layout()\nplt.show()","923e07b1":"# Lets plot relationship and between gender and bike purchase = yes\n\n# Get unique values for marital status\nprint(df_bike_buyers_clean['Gender'].unique())\n\ndf_gender_bike = df_bike_yes.groupby(['Gender'], as_index = False)['Purchased Bike'].count()\n\nprint(df_gender_bike)\n\ndf_gender_bike.plot(kind = 'bar' , x = 'Gender' , y = 'Purchased Bike', figsize = (6 , 6) , color = 'blue' , grid = True , width = 0.2 , rot = 0)\nplt.legend(loc = 'best')\nplt.tight_layout()\nplt.show()\n","4c8b02bd":"# The max and min salary for those who purchased a bike\nprint('Max Salary: ${}'.format(df_bike_yes['Income'].max()), '  ', 'Min Salary: ${}'.format(df_bike_yes['Income'].min()))\nprint('Mean Salary: ${:.2f}'.format(df_bike_yes['Income'].mean()))\n\ndf_bike_yes['Income'].hist(bins = 10, color = 'red', alpha = 0.5 , figsize = (10 , 8) , grid = False)\nplt.axvline(df_bike_yes['Income'].mean(), color = 'k', linestyle = 'dashed', linewidth = 2)\nplt.title('Distribution of Income over bike purchases')\nplt.show()","de65cdc7":"# Plot distribution of age across purchases\nprint('Max Age: {} yrs'.format(df_bike_yes['Age'].max()), '  ', 'Min Age: {} yrs'.format(df_bike_yes['Age'].min()))\nprint('Mean Age: {:.0f} yrs'.format(df_bike_yes['Age'].mean()))\n\ndf_bike_yes['Age'].hist(bins = 10, color = 'red', alpha = 0.5 , figsize = (10 , 8) , grid = False)\nplt.axvline(df_bike_yes['Age'].mean(), color = 'k', linestyle = 'dashed', linewidth = 2)\nplt.title('Distribution of Age over bike purchases')\nplt.show()","c32abf49":"# Plot distribution of commute distance across purchases\n\ncommute_distance = df_bike_yes.groupby(['Commute Distance'], as_index = False)['Purchased Bike'].count()\n\nprint(commute_distance)\ncommute_distance.plot(kind = 'bar' , x = 'Commute Distance' , figsize = (10 , 8), y = 'Purchased Bike', color = 'yellow' , grid = False, rot = 0)\nplt.title('Distance leading to bike purchases')\nplt.tight_layout()\nplt.show()\n\n\n#df_bike_yes['Commute Distance'].hist(bins = 10, color = 'red', alpha = 0.5 , figsize = (10 , 8) , grid = False)\n#plt.axvline(df_bike_yes['Commute Distance'].mean(), color = 'k', linestyle = 'dashed', linewidth = 2)\n#plt.title('Distribution of Commute Distance over bike purchases')\n#plt.show()","3b781aa5":"# Display all categorical variables in the dataset\nprint(df_bike_buyers_clean.select_dtypes(include = ['object']))","b0c299ea":"# Map categorical values with numerical values\nmap_cat_cols = {'Marital Status': {'Married': 1, 'Single': 0},\n               'Gender': {'Male': 0 , 'Female': 1},\n                'Home Owner': {'Yes': 1, 'No': 0},\n               'Purchased Bike': {'Yes': 1, 'No': 0}}\n\n# Replace the categorical values with the mapped integer values\ndf_bike_buyers_clean = df_bike_buyers_clean.replace(map_cat_cols)\nprint(df_bike_buyers_clean.select_dtypes(include = ['object']))\n\nprint()\nprint(df_bike_buyers_clean.head(5))","7b811a4b":"# Lets check the unique values of other category columns\nprint(pd.concat([df_bike_buyers_clean['Education'], df_bike_buyers_clean['Occupation'], df_bike_buyers_clean['Commute Distance'], df_bike_buyers_clean['Region']]).unique())","a845bac9":"# Drop the region column\ndf_bike_clean = df_bike_buyers_clean.drop('Region' , axis = 1)\n\nprint(df_bike_clean.head(5))\n\n# One Hot Encoding using pd.get_dummies()\n# pd.get_dummies(obj_df, columns=[\"body_style\", \"drive_wheels\"], prefix=[\"body\", \"drive\"])\ndf_bike_clean = pd.get_dummies(df_bike_clean, columns=['Education', 'Occupation', 'Commute Distance'], prefix = ['edu', 'occ', 'dist'])\n\nprint()\nprint('After encoding...')\nprint()\nprint(df_bike_clean.head(5))","51e73738":"print(df_bike_clean.corrwith(df_bike_clean['Purchased Bike']).sort_values(ascending = False))\n\ncorr = df_bike_clean.corr()\n\n# Create mask for removing the upper triangle from the correlation heatmap\nmask_upper = np.zeros_like(corr , dtype = np.bool)\n\ncmap = sns.diverging_palette(220, 20, as_cmap=True)\n\nmask_upper[np.triu_indices_from(mask_upper)] = True\n\nplt.figure(figsize = (14 , 9))\nsns.heatmap(corr, mask = mask_upper,  linewidths = 1, cmap = cmap, center = 0)\nplt.title(\"Heatmap of Correlation Matrix\")\nplt.show()\n\n\n","c2a970c3":"From the above columns, we see that for *Gender*, *Marital Status*, *Home Owner* and *Purchased Bike* (Target Variable) there is few unique values (2 or 3). We can encode them by the process of mapping which would be easier in this dataset.","2d098e8e":"So people around 43 yrs tend to purchase bikes, is maintaining their health or fitness a key reason? Predictably the older aged groups tends to prefer biking less and younger aged groups < 20 have less bikes.","ac2a248e":"**Generic Function to calculate zero and missing Values**","428b383b":"There is only a slight difference between the genders when it comes to purchasing a bike, so we can safely consider *Gender* to be another key feature for prediction. We will observe next how the *income* is distributed for those who purchased bikes","5ed1010c":"# Correlation Matrix\n\nWe will now plot a correlation matrix of features with the target variables. To plot a correlation matrix all the features must have numerical values.","33d02af9":"From the above plot we can see people who are single are more likely to purchase a bike. So we can consider *Marital Status* to be a key feature to predict bike purchases.\n\nNext, let's look at the gender ratio of bike purchases","141935e3":"The average income is around $55K mark and the spread is consistent with few value towards the right tail.","dc046256":"# Encoding Categorical Variables","7a400fe8":"We do not need the *Region* column and can be dropped, for the rest of the categorical columns, let's do One-hot encoding using pandas.","6578088d":"Let's look at features which are categorical and investigate ways to encode them.","4c47627f":"# Data Visualization and EDA","337bb849":"# Reading Data"}}