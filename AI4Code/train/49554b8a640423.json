{"cell_type":{"85dfbea5":"code","d7031292":"code","f55dceaf":"code","ec545a7c":"code","41621106":"code","329b82b8":"code","3079d111":"code","5dbca73f":"code","70906689":"code","cea302db":"code","458c7af1":"code","0a887dff":"code","e75ca4a1":"code","75dfbadd":"code","f63776f6":"code","c7774cbf":"code","ea6c204b":"markdown","c3463181":"markdown","3c9bc418":"markdown","d0f7a5a0":"markdown","6f15a1e7":"markdown","ee7a037d":"markdown","ee2e49e7":"markdown","1d3173d9":"markdown","2ed3750f":"markdown","4c51a6ab":"markdown","5a6b41ae":"markdown","878f01a0":"markdown"},"source":{"85dfbea5":"%matplotlib inline\nfrom fastai.basics import *","d7031292":"n=100 # \u9009\u62e9\u6570\u636e\u70b9\u6570\u91cf","f55dceaf":"x = torch.ones(n,2)  # \u521b\u5efa\u4e00\u4e2a100\u884c2\u5217\u7684 2D tensor\nx[:,0].uniform_(-1.,1) # \u7528uniform random \u6765\u751f\u6210\u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u5217\u7684\u6570\u503c\nx[:5] # \u5c55\u793a\u524d5\u884c\u6570\u503c","ec545a7c":"a = tensor(3.,2); a # \u521b\u5efa\u4e00\u4e2a 1D tensor\uff0c \u5176\u5b9e\u662f\u4e00\u4e2avector","41621106":"y = x@a + torch.rand(n) # \u8bbe\u8ba1x\u4e0ey\u7684\u5173\u7cfb\u51fd\u6570","329b82b8":"plt.scatter(x[:,0], y); # \u4f5c\u56fe\uff1a\u753b\u51fax\u7684\u7b2c\u4e00\u5217\u503c\u4e0ey\u7684\u5173\u7cfb\u56fe","3079d111":"def mse(y_hat, y): return ((y_hat-y)**2).mean() # \u624b\u5199MSE\u51fd\u6570","5dbca73f":"a = tensor(-1.,1) # \u5c06 a_1 -> x_1, a_2 -> x_2, \u4e24\u4e2ax,\u5bf9\u5e94\u4e24\u4e2aa","70906689":"y_hat = x@a # \u7528\u6211\u4eec\u5047\u8bbe\u7684\u7ebf(a),\u4e0ex\uff0c\u4e00\u8d77\u6765\u9884\u6d4by\nmse(y_hat, y) # \u7528MSE\u6765\u8ba1\u7b97\u635f\u5931\u503c","cea302db":"plt.scatter(x[:,0],y) # \u753b\u51fax_1\u4e0ey\u7684\u5173\u7cfb\u56fe\nplt.scatter(x[:,0],y_hat); # \u753b\u51fax_\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\u56fe","458c7af1":"a = nn.Parameter(a); a # \u5c06 a\u7684\u503c\u8d4b\u7ed9\u6a21\u578b\u53c2\u6570","0a887dff":"def update(): # \u5f00\u59cb\u8bbe\u8ba1SGD\u51fd\u6570\n    y_hat = x@a # \u6784\u5efax, a, y\u4e4b\u95f4\u5173\u7cfb = \u6a21\u578b\u7ed3\u6784\n    loss = mse(y, y_hat) # \u7528MSE\u8ba1\u7b97\u635f\u5931\u503c\n    if t % 10 == 0: print(loss) # \u6bcf10\u6b21\u5faa\u73afiteration\uff0c\u6253\u5370\u5f53\u524d\u635f\u5931\u503c\n    loss.backward() # \u4ece\u635f\u5931\u503c\uff0c\u5012\u63a8\u51fa\u6bcf\u4e2aa\u7684gradient\n    with torch.no_grad():\n        a.sub_(lr * a.grad) # a\u7684\u66f4\u65b0\u516c\u5f0f => a = a - lr*a.grad\n        a.grad.zero_()","e75ca4a1":"lr = 1e-1 # \u5b66\u4e60\u7387\u8bbe\u5b9a\u57280.1\nfor t in range(100): update() # SGD\u51fd\u6570\u505a100\u6b21\u5faa\u73af\u8fed\u4ee3","75dfbadd":"plt.scatter(x[:,0],y)\nplt.scatter(x[:,0],x@a);","f63776f6":"from matplotlib import animation, rc\nrc('animation', html='jshtml')","c7774cbf":"a = nn.Parameter(tensor(-1.,1))\n\nfig = plt.figure()\nplt.scatter(x[:,0], y, c='orange')\nline, = plt.plot(x[:,0], x@a)\nplt.close()\n\ndef animate(i):\n    update()\n    line.set_ydata(x@a)\n    return line,\n\nanimation.FuncAnimation(fig, animate, np.arange(0, 100), interval=20)","ea6c204b":"# \u68af\u5ea6\u4e0b\u964d Gradient Descent","c3463181":"\u5047\u8bbe\u6211\u4eec\u8ba4\u4e3a\u7ebf\u7684\u6743\u91cd\u662f `a = (-1.0,1.0)`\uff0c \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 `y_hat`\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u9884\u6d4b\u503c\uff0c\u7136\u540e\u8ba1\u7b97y\u4e0e\u9884\u6d4b\u503c\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5373 error\u635f\u5931\u503c","3c9bc418":"## \u753b\u52a8\u8d77\u6765","d0f7a5a0":"\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4e0d\u505a\u5168\u6570\u636e\u8ba1\u7b97\uff0c\u800c\u662f\u4f7f\u7528*mini-batches\u5c0f\u6279\u91cf*\uff0c\u4e00\u5c0f\u7ec4\uff0c\u4e00\u5c0f\u7ec4\u7684\u6570\u636e\uff0c\u201d\u5582\u7ed9\u201c\u6a21\u578b\u6765\u8ba1\u7b97","6f15a1e7":"- Learning rate \u5b66\u4e60\u7387\n- Epoch \u6b21\n- Minibatch \u5c0f\u6279\u91cf\n- SGD \u68af\u5ea6\u4e0b\u964d\n- Model \/ Architecture \u6a21\u578b\u7ed3\u6784\n- Parameters \u6a21\u578b\u53c2\u6570\n- Loss function \u635f\u5931\u51fd\u6570\n\n\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u91c7\u7528*cross entropy loss*, \u4e5f\u53eb*negative log likelihood loss*. \u8fd9\u79cd\u65b9\u6cd5\u4f1a\u60e9\u7f5a\u9519\u8bef\u4f46\u9ad8\u81ea\u4fe1\u7684\u9884\u6d4b\uff0c\u5e2e\u52a9\u6b63\u786e\u4e0d\u81ea\u4fe1\u7684\u9884\u6d4b\u66f4\u81ea\u4fe1\u3002","ee7a037d":"\u6211\u4eec\u60f3\u77e5\u9053\u7684\u662f **\u53c2\u6570parameters** (\u6743\u91cdweights)\u4e5f\u5c31\u662f `a` \uff0c\u901a\u8fc7\u5bfb\u6c42\u66f4\u6709\u7684`a`\u6765\u8ba9\u6570\u636e\u70b9\u4e0e\u6211\u4eec\u5047\u8bbehypothesis,\u4e5f\u5c31\u662f `x@a`\u4e4b\u95f4\u7684\u5dee\u8ddderror \u8d8a\u6765\u8d8a\u5c0f\u3002\u4f46\u6211\u4eec\u4e8b\u5148\u5e76\u4e0d\u77e5\u9053\u600e\u6837\u7684\u7ebf\uff0c\u5373`a`\uff0c\u80fd\u6700\u4f18\u7684\u62df\u5408\u6570\u636e\uff0c\u6240\u4ee5\u9700\u8981SGD\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u641c\u7d22\u5bfb\u627e\u3002\u7ebf\u6027\u56de\u5f52\u5e38\u7528\u7684\u635f\u5931\u51fd\u6570\u662f **mean squared error \uff08MSE\uff09**. ","ee2e49e7":"\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u7279\u5b9a\u7684`a`\u8ba9`mse_loss`\u964d\u5230\u6700\u4f4e\u3002\n\n**\u68af\u5ea6\u4e0b\u964dGradient descent** \u662f\u6c42\u6700\u5c0f\u503c\u7684\u7b97\u6cd5\u3002\u901a\u8fc7\u4e00\u4e2a\u7528\u6743\u91cdweights\u6784\u5efa\u7684\u51fd\u6570\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u6743\u91cd\u521d\u59cb\u503c\uff0c\u7136\u540e\u4e0d\u65ad\u8fed\u4ee3\u6765\u4fee\u6b63weights\uff0c\u4fc3\u4f7f\u635f\u5931\u503c\u4e0d\u65ad\u964d\u4f4e\u3002\u8fed\u4ee3\u5bfb\u6c42\u6700\u5c0f\u635f\u5931\u503c\u662f\u901a\u8fc7\u4e0d\u65ad\u51cf\u53bb\u51fd\u6570 gradient\u5b9e\u73b0\u7684\u3002\n\n\u8fd9\u91cc\u7684gradient descent\u662f\u501f\u7528 [PyTorch](http:\/\/pytorch.org\/)\u57fa\u672c\u51fd\u6570\u6765\u5b9e\u73b0\u7684","1d3173d9":"Stochastic Gradient Descent (SGD) \u662f\u795e\u7ecf\u7f51\u7edcneural nets \u4e2d\u5e38\u89c1\u7684\u4e00\u79cd\u4f18\u5316\u7b97\u6cd5 **optimization** method\u3002\u672cNb\u5c06\u901a\u8fc7\u7b80\u5355\u7684\u6848\u4f8b\u89e3\u91caSGD\u5de5\u4f5c\u539f\u7406\u3002","2ed3750f":"\u7ebf\u6027\u56de\u5f52\u7684\u76ee\u6807\u662f\u7528\u4e00\u6761\u7ebf\u6765\u62df\u5408\u4e00\u7ec4\u6570\u636e\u70b9\u3002","4c51a6ab":"#  \u7ebf\u6027\u56de\u5f52\u95ee\u9898","5a6b41ae":"## \u5173\u952e\u8bcd\u6c47","878f01a0":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6307\u5b9a\u4e86\u4e00\u4e2a\u5047\u8bbe\u7ebf\uff08\u6a21\u578b\uff09\uff0c\u8ba1\u7b97\u4e86\u5b83\u4e0e\u6570\u636e\u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u635f\u5931\u503c\uff09\u3002\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u7528\u4f18\u5316\u7b97\u6cd5\u5e2e\u52a9\u5feb\u901f\u5bfb\u627e\u6700\u4f18\u7684\u6a21\u578b\uff0c`a`\u3002"}}