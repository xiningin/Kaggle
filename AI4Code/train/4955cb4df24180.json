{"cell_type":{"ed7c80ac":"code","87b25e94":"code","e20768d0":"code","bcae1238":"code","a4d48eca":"code","cac06794":"code","9b401723":"code","ce35bf6f":"code","a3425c54":"code","ee8ef14b":"code","435f94a0":"code","dc69c3fd":"code","03923019":"code","96e0af20":"code","1eae88e5":"code","b0a5249d":"code","986c1fa6":"code","f410027f":"code","4ffd3555":"code","b09b20d0":"code","28fd37fc":"code","66c25986":"code","fffe7c5a":"code","9c26072d":"code","ab8d4332":"code","96fcf445":"code","8aa851a0":"code","56655260":"code","d01603fa":"code","a5d8e097":"code","a23b4d72":"code","b2257440":"markdown"},"source":{"ed7c80ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87b25e94":"news = pd.read_csv('..\/input\/textdb3\/fake_or_real_news.csv')","e20768d0":"news.head()","bcae1238":"len(news)","a4d48eca":"news.isnull().any()","cac06794":"news['label'].value_counts()","9b401723":"from gensim.utils import simple_preprocess\nfrom gensim import corpora\nfrom gensim.models import TfidfModel","ce35bf6f":"def lemmatize_list(lis):\n    \"\"\"\n    Used to Lemmatize list of words\n    \n    :param lis: list of words to lemmatize\n    :returns: list of lemmatized words\n    :rtype: list\n    \"\"\"\n    from nltk.stem import WordNetLemmatizer\n    lemmatizer = WordNetLemmatizer()\n    return [lemmatizer.lemmatize(word) for word in lis]","a3425c54":"news['cleaned_title'] = news['title'].apply(simple_preprocess).apply(lemmatize_list)","ee8ef14b":"news.head()","435f94a0":"%matplotlib inline\n\nfrom wordcloud import WordCloud\n\nall_words = ' '.join([text for text in news.title])\n\nwordcloud = WordCloud(width= 800, height= 500,\n                          max_font_size = 110,\n                          collocations = False).generate(all_words)","dc69c3fd":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,7))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","03923019":"dictionary = corpora.Dictionary(news['cleaned_title'])","96e0af20":"dictionary[1]","1eae88e5":"bag_of_words = [dictionary.doc2bow(title) for title in news.cleaned_title]","b0a5249d":"from sklearn.feature_extraction.text import CountVectorizer\n\n#Creating the bag of words\nbow_title = CountVectorizer().fit(news['title'])","986c1fa6":"title_vect = bow_title.transform(news['title'])\n# bow_title['You Can Smell Hillary\u2019s Fear']\n# news['title'][0]","f410027f":"#TF-IDF\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf_transformer = TfidfTransformer().fit(title_vect)\nnews_tfidf = tfidf_transformer.transform(title_vect)\nprint(news_tfidf.shape)","4ffd3555":"# tfidf_model = TfidfModel(bag_of_words)","b09b20d0":"# titles_tfidf = [tfidf_model[bag_of_words[ind]] for ind in range(0,len(bag_of_words))]","28fd37fc":"# titles_tfidf[0]","66c25986":"X = news_tfidf\ny = news['label']","fffe7c5a":"# X = [[tup[1] for tup in lis] for lis in X]","9c26072d":"X[0]","ab8d4332":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train,Y_test= train_test_split(X, y, test_size=0.2, random_state=1)","96fcf445":"from sklearn.svm import SVC\nmodel = SVC()\ndetector = model.fit(X_train, Y_train)\n","8aa851a0":"predictions = detector.predict(X_test)\nprint(predictions)","56655260":"from sklearn.metrics import classification_report\nprint (classification_report(Y_test, predictions))","d01603fa":"from sklearn.linear_model import SGDClassifier\n\nfake_detector_svc = SGDClassifier().fit(X_train, Y_train)","a5d8e097":"prediction_svc = fake_detector_svc.predict(X_test)","a23b4d72":"print (classification_report(Y_test, prediction_svc))","b2257440":"Analysis 1 : \n* Real and Fake news are almost equally distributed.\n* We have three fields title, text and label\n* We have 6335 items\n* No Value is null"}}