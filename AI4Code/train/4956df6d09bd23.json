{"cell_type":{"e9fa65d9":"code","843c7310":"code","d79ca185":"code","170f23e1":"code","3d95f4e6":"code","97cd95e1":"code","3fa83cdc":"code","a3d39687":"code","6a462394":"code","7b03d131":"code","05881fe3":"code","9ef09524":"code","376292eb":"code","a4eb08c5":"code","b63b5b61":"code","c44397c4":"code","348cfbdd":"code","de58794e":"code","da0ebf90":"code","2e296ea5":"code","63a3aefa":"code","1cbac209":"code","74095ede":"markdown","8d8504a9":"markdown","cde5b9e1":"markdown","d444e420":"markdown","c6c78309":"markdown","99c279ab":"markdown","54f3fc26":"markdown"},"source":{"e9fa65d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","843c7310":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d79ca185":"df = pd.read_csv(\"\/kaggle\/input\/netflix-prize-shows-information\/imdb.csv\")\ndf.head()","170f23e1":"df.shape","3d95f4e6":"df.info()","97cd95e1":"df.isnull().sum()","3fa83cdc":"sns.heatmap(df.isnull())","a3d39687":"df.dropna(subset = [\"kind\", \"country\", \"rating\", \"genre\"], inplace = True)\ndf.reset_index(inplace = True)\ndf.isnull().sum()","6a462394":"sns.heatmap(df.corr(), annot = True)","7b03d131":"df[\"kind\"].value_counts()","05881fe3":"kind_df = pd.DataFrame(columns = [\"kind\", \"count\"]) \n\nkind_uni = df[\"kind\"].unique()\ncount_set = df[\"kind\"].value_counts()\n\nnew_datas = {\n    \"movie\" : 0,\n    \"series\" : 0,\n    \"episode\" : 0,\n    \"video game\" : 0,\n    \"tv short\" : 0,\n}\nfor idx, kind in enumerate(kind_uni) : \n    if \"movie\" in kind : \n        new_datas[\"movie\"] += count_set.loc[kind]\n    elif \"series\" in kind :\n        new_datas[\"series\"] += count_set.loc[kind]\n    else : \n        new_datas[kind] += count_set.loc[kind]\nfor key, val in new_datas.items() : \n    kind_df = kind_df.append({\"kind\" : key, \"count\" : val}, ignore_index = True)\n\nkind_df    \n","9ef09524":"fig = px.pie(kind_df, names = \"kind\", values = \"count\")\nfig.show()","376292eb":"df[\"countries\"] = df[\"country\"].apply(lambda x : True if x.find(',') != -1 else False)\ndf[\"countries\"].value_counts()","a4eb08c5":"country_df = df.where(df['countries'] == False)['country'].value_counts().to_frame()\ncountry_df.reset_index(inplace = True)\ncountry_df.rename(columns = {\"index\" : \"country\", \"country\" : \"count\"}, inplace = True)\ncountry_df.head()","b63b5b61":"plt.figure(figsize = (20, 25))\nplt.title(\"Number of content creation by Country\", fontsize = 18)\nsns.barplot(data = country_df, x = \"count\", y = \"country\")","c44397c4":"country_df = df.where(df['countries'] == False).groupby('country')['rating'].mean().sort_values(ascending = False).to_frame()\ncountry_df.reset_index(inplace = True)\ncountry_df.head()","348cfbdd":"plt.figure(figsize = (20, 25))\nplt.title(\"Means of Rating by Country\", fontsize = 18)\nsns.barplot(data = country_df, x = \"rating\", y = \"country\")","de58794e":"# Checking genre\ndf[\"genre\"].head(50)","da0ebf90":"genre_list = [\"Action\", \"Fantasy\", \"Comedy\", \"Horror\", \"Family\", \"Crime\", \"Documentary\", \"Animation\", \"Adventure\"]\n\nfor genre in genre_list :\n    df[genre] = df[\"genre\"].apply(lambda x : True if x.find(genre) != -1 else False)\n\ndf.head()","2e296ea5":"genre_df = pd.DataFrame(columns = [\"genre\", \"count\"])\nfor genre in genre_list : \n#     print(df[genre].value_counts())\n    genre_data = {\n        \"genre\" : genre,\n        \"count\" : df[genre].value_counts().iloc[1]\n    }\n    genre_df = genre_df.append(genre_data, ignore_index = True)\ngenre_df.head()","63a3aefa":"fig = px.bar(genre_df, x= \"genre\", y = \"count\")\nfig.show()","1cbac209":"fig = px.pie(genre_df, names = \"genre\", values = \"count\")\nfig.show()","74095ede":"Some of \"country\" columns has many data.\n\nso, i classified one country and several countries, and focused on data from one country.","8d8504a9":"I analyzed how it focus mean of rating by country, kind and number of genre.","cde5b9e1":"The \"kind\" column has several similer names.\n\nso, it need to clean.","d444e420":"Kind of Genre is various.\n\ni clean up datas by some categories.\n\n**(\"Action\", \"Fantasy\", \"Comedy\", \"Horror\", \"Family\", \"Crime\", \"Documentary\", \"Animation\", \"Adventure\")**\n","c6c78309":"* if look at the table above, most of netflix contents is movie.","99c279ab":"When Look at the table above, this dataset include many nan datas.\n> I decided to remove the columns including nan datas.","54f3fc26":"# EDA"}}