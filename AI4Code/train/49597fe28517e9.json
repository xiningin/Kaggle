{"cell_type":{"88ff586d":"code","770cd082":"code","2e70cb5f":"code","1fa51617":"code","8a4bd1bc":"code","51921ba7":"code","f4988141":"code","145a84e4":"code","f13c5b99":"code","c01331a1":"code","f45ee76c":"code","978ad775":"code","47f88c80":"code","70fdfae5":"code","5a19abce":"code","8a43ae02":"code","7b3d5c36":"code","1b2f0124":"code","3feeb015":"code","b885c519":"code","53c35629":"code","6685af37":"code","c0eb9f3d":"code","1675d977":"code","54ba7db1":"code","90d734fc":"code","52b9c1c4":"code","f9c6fb16":"code","4dcae3f8":"code","3586f372":"code","257ce28c":"code","1425a0f3":"code","a9b4e356":"code","0ee31b65":"code","af3d0c4a":"code","165efe8e":"code","8ec66efd":"code","43084c38":"code","5a62c71f":"code","d81cc2dc":"code","a91a9cb7":"code","f03dcab8":"code","519176a6":"code","dcd451ac":"code","e0fc6f2a":"markdown","047bdbcc":"markdown","546a78cf":"markdown","835b5141":"markdown","a52a6bf4":"markdown","77290e12":"markdown","5e65c8df":"markdown","a3343878":"markdown","5b816606":"markdown","047ca01c":"markdown","d6c7414e":"markdown","50258c89":"markdown","0fb813e8":"markdown","e6222038":"markdown","44c6a3b6":"markdown","ca751b3c":"markdown","fe2811e2":"markdown","4ceac7fd":"markdown","658a3d82":"markdown","655a6000":"markdown","7838be63":"markdown","42cdc5e0":"markdown","e96a262e":"markdown","a8292082":"markdown","4a034fe0":"markdown"},"source":{"88ff586d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom collections import defaultdict\nfrom collections import Counter\nplt.style.use('ggplot')\nstop = set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam","770cd082":"import os","2e70cb5f":"tweet = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntweet.head(3)","1fa51617":"print('there are {} rows and {} columns in train'.format(tweet.shape[0], tweet.shape[1]))\nprint('there are {} rows and {} columns in test'.format(test.shape[0], test.shape[1]))","8a4bd1bc":"x = tweet.target.value_counts()\n\nsns.barplot(x.index, x)\nplt.gca().set_ylabel('samples');","51921ba7":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\ntweet_len = tweet[tweet['target'] ==1]['text'].str.len()\nax1.hist(tweet_len, color ='black')\nax1.set_title('disaster tweets')\n\ntweet_len = tweet[tweet['target'] ==0]['text'].str.len()\nax2.hist(tweet_len, color ='blue')\nax2.set_title('characters in tweets')\nplt.show()","f4988141":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (10, 5))\ntweet_len = tweet[tweet['target']==1]['text'].str.split().map(lambda x : len(x))\nax1.hist(tweet_len, color = 'red')\nax1.set_title('diaster tweets')\n\ntweet_len = tweet[tweet['target'] == 0]['text'].str.split().map(lambda x : len(x))\nax2.hist(tweet_len, color ='green')\nax2.set_title('words in a tweet')\n\nplt.show();","145a84e4":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (10, 5))\nword = tweet[tweet['target']==1]['text'].str.split().apply(lambda x: [len(i) for i in x])\nsns.histplot(word.map(lambda x: np.mean(x)),ax=ax1, color='red')\nax1.set_title('disaster')\n\nword = tweet[tweet['target']== 0]['text'].str.split().apply(lambda x: [len(i) for i in x])\nsns.histplot(word.map(lambda x: np.mean(x)),ax=ax2, color='green')\nax2.set_title('Not disaster')\nfig.suptitle('average word length in each tweet')","f13c5b99":"def create_corpus(target):\n    corpus = []\n    \n    for x in tweet[tweet['target']==target]['text'].str.split():\n        for i in x:\n            corpus.append(i)\n    return corpus","c01331a1":"corpus = create_corpus(0)\n\ndic = defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word] += 1\n\ntop = sorted(dic.items(), key=lambda x:x[1], reverse = True)[:10]\n\nx, y = zip(*top)\nplt.bar(x, y)","f45ee76c":"corpus = create_corpus(1)\n\ndic = defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        dic[word] += 1\n\ntop = sorted(dic.items(), key=lambda x:x[1], reverse = True)[:10]\n\nx, y = zip(*top)\nplt.bar(x, y)","978ad775":"### real diaster tweet, target == 1\n\nplt.figure(figsize = (10, 5))\ncorpus = create_corpus(1)\n\ndic = defaultdict(int)\nimport string\nspecial = string.punctuation\n\nfor i in (corpus):\n    if i in special:\n        dic[i] += 1\n\nx, y = zip(*dic.items())\nplt.bar(x, y)","47f88c80":"### No diaster tweet, target == 0\n\nplt.figure(figsize = (10, 5))\ncorpus = create_corpus(0)\n\ndic = defaultdict(int)\nimport string\nspecial = string.punctuation\n\nfor i in (corpus):\n    if i in special:\n        dic[i] += 1\n\nx, y = zip(*dic.items())\nplt.bar(x, y)","70fdfae5":"counter = Counter(corpus)\nmost = counter.most_common()\n\nx = []\ny = []\n\nfor word, count in most[:40]:\n    if (word not in stop):\n        x.append(word)\n        y.append(count)","5a19abce":"sns.barplot(x=y, y=x);","8a43ae02":"def get_top_tweet_bigrams(corpus, n=None):\n    vec = CountVectorizer(ngram_range = (2,2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\n    \n    return words_freq[:n]","7b3d5c36":"plt.figure(figsize = (10,5))\ntop_tweet_bigrams = get_top_tweet_bigrams(tweet['text'])[:10]\nx, y = map(list, zip(*top_tweet_bigrams))\nsns.barplot(x=y, y=x)","1b2f0124":"df = pd.concat([tweet, test])\ndf.shape","3feeb015":"example = \"New competition launched :https:\/\/www.kaggle.com\/c\/nlp-getting-started\"","b885c519":"def remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'', text)\n\nremove_URL(example)","53c35629":"df['text'] = df['text'].apply(lambda x : remove_URL(x))","6685af37":"example = \"\"\"<div>\n<h1>Real or Fake<\/h1>\n<p>Kaggle <\/p>\n<a href=\"https:\/\/www.kaggle.com\/c\/nlp-getting-started\">getting started<\/a>\n<\/div>\"\"\"","c0eb9f3d":"def remove_html(text):\n    html = re.compile(r'<.*?>')\n    return html.sub(r'', text)\n\nprint(remove_html(example))","1675d977":"df['text'] = df['text'].apply(lambda x : remove_html(x))","54ba7db1":"def remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\nremove_emoji(\"Omg another Earthquake \ud83d\ude14\ud83d\ude14\")","90d734fc":"df['text']=df['text'].apply(lambda x: remove_emoji(x))","52b9c1c4":"def remove_punct(text):\n    table = str.maketrans('', '', string.punctuation)\n    return text.translate(table)\n\nexample=\"I am a #king\"\nprint(remove_punct(example))","f9c6fb16":"df['text']=df['text'].apply(lambda x : remove_punct(x))","4dcae3f8":"!pip install pyspellchecker","3586f372":"from spellchecker import SpellChecker\n\nspell = SpellChecker()\n\ndef correct_spellings(text):\n    corrected_text = []\n    misspelled_words = spell.unknown(text.split())\n    \n    for word in text.split():\n        if word in misspelled_words:\n            corrected_text.append(spell.correction(word))\n        else:\n            corrected_text.append(word)\n    return \" \".join(corrected_text)\n\ntext = 'corect me please'\ncorrect_spellings(text)","257ce28c":"# df['text'] = df['text'].apply(lambda x: correct_spellings(x))\n# this code takes too long time to finish","1425a0f3":"def create_corpus(df):\n    corpus = []\n    for tweet in tqdm(df['text']):\n        words = [word.lower() for word in word_tokenize(tweet)\n                if ((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus","a9b4e356":"corpus=create_corpus(df)","0ee31b65":"embedding_dict={}\nwith open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt','r') as f:\n    for line in f:\n        values=line.split()\n        word=values[0]\n        vectors=np.asarray(values[1:],'float32')\n        embedding_dict[word]=vectors\nf.close()","af3d0c4a":"MAX_LEN = 50\ntokenizer_obj = Tokenizer()\ntokenizer_obj.fit_on_texts(corpus)\nsequences = tokenizer_obj.texts_to_sequences(corpus)\n\ntweet_pad = pad_sequences(sequences, maxlen=MAX_LEN, \n                         truncating='post', padding='post')","165efe8e":"word_index = tokenizer_obj.word_index\nprint('number of unique words: ', len(word_index))","8ec66efd":"num_words = len(word_index)+1\nembedding_matrix = np.zeros((num_words, 100))\n\nfor word, i in tqdm(word_index.items()):\n    if i > num_words:\n        continue\n    \n    emb_vec = embedding_dict.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i] = emb_vec","43084c38":"model=Sequential()\n\nembedding = Embedding(num_words, 100, \n                      embeddings_initializer = Constant(embedding_matrix),\n                     input_length = MAX_LEN, trainable=False)\n\nmodel.add(embedding)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\noptimzer = Adam(learning_rate=1e-5)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimzer,metrics=['accuracy'])","5a62c71f":"model.summary()","d81cc2dc":"train = tweet_pad[:tweet.shape[0]]\ntest = tweet_pad[tweet.shape[0]:]","a91a9cb7":"X_train, X_test, y_train, y_test = train_test_split(train,\n                                                    tweet['target'].values,\n                                                    test_size=0.15)\n\nprint('shape of train', X_train.shape)\nprint('shape of validation', X_test.shape)","f03dcab8":"history = model.fit(X_train, y_train, batch_size=4, epochs=3, validation_data=(X_test, y_test),verbose=1)","519176a6":"sample_sub=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')","dcd451ac":"y_pre = model.predict(test)\ny_pre = np.round(y_pre).astype(int).reshape(3263)\nsub = pd.DataFrame({'id':sample_sub['id'].values.tolist(),\n                    'target':y_pre})\nsub.to_csv('submission.csv', index=False)","e0fc6f2a":"### Ngram analysis\n\nwe will do a bigram (n=2) analysis over the tweets. Let's check the most common bigrams in tweets.","047bdbcc":"#### Basic Intro\n\nIn this competition, you\u2019re challenged to build a machine learning model that predicts which Tweets are about real disasters and which one\u2019s aren\u2019t.","546a78cf":"### Baseline Model","835b5141":"### Remove punctuations","a52a6bf4":"#### Number of characters in tweets","77290e12":"### This code used the competition dataset, 'Natural Language Processing with Disaster Tweets'.\n\nThis code is writtend by Shahules, and thanks for sharing :) \n* Original code URL : **https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove\/data**","5e65c8df":"### Spelling Correction\n\nEven if I'm not good at spelling I can correct it with python. I will use pyspellcheck to do that.","a3343878":"#### Common words ?","5b816606":"### Removing emojis","047ca01c":"#### Average word length in a word","d6c7414e":"### Class distribution\n\nBefore we begin with anything else, let's check the class distribution. There are only two classes 0 and 1.","50258c89":"### Removing urls","0fb813e8":"### Removing HTML tags","e6222038":"The distribution of both seems to be alomost same. 120 to 140 characters in a tweet are the most common among both","44c6a3b6":"In both of them,\"the\" dominates which is followed by \"a\" in class 0 and \"in\" in class 1.\n\n### Analyzing punctuations.\n\nFirst let's check tweets indicating real disaster.","ca751b3c":"### Loading the data and getting basic idea","fe2811e2":"### GloVe for Vectorization\n\nHere we will use GloVe pretrained corpus model to represent our words. It is available in 3 variables: 50D, 100D and 200 Dimentional. ","4ceac7fd":"#### What's in this kernel?\n\n* Basic EDA\n* Data cleaning\n* Baseline model","658a3d82":"## Making our submission","655a6000":"### Common stopwords in tweets\n\nFirst we will analyze tweets with class 0","7838be63":"ohh, as expected ! There is a class distribution.There are more tweets with class 0 ( No disaster) than class 1 ( disaster tweets)","42cdc5e0":"And then, we will analyze tweets with class 1","e96a262e":"#### Importing required libraries","a8292082":"### Data cleaning\n\nAs we know, twitter tweets always have to be cleaned before we go onto modelling. So we will do some basic cleaning such as spelling correction, removing punctuations, removing html tags and emojis etc. ","4a034fe0":"#### Number of words in a tweet"}}