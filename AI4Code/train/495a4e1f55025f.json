{"cell_type":{"91a96be6":"code","296e70ab":"code","d49fd4c5":"code","556503e8":"code","69cfc33a":"code","2e4b0930":"code","1689085c":"code","273f2fa4":"code","8e03aa40":"code","b10249e3":"code","cfd37638":"code","5ec0e21b":"code","6996518d":"code","e2114055":"code","d06793c0":"code","11c5ba95":"code","0784ef2f":"code","c9eff295":"code","7569fa8b":"code","76dfb1ed":"code","3091ffc6":"code","a6c85830":"code","8271d44c":"code","9ec75269":"markdown","b0f8e8fb":"markdown","6a2eef9a":"markdown","36104088":"markdown","2b968087":"markdown","4975aa79":"markdown","e564bbbc":"markdown","7e5ff617":"markdown","2e85c2e3":"markdown","201da6dd":"markdown","4d87a975":"markdown","40431021":"markdown","29f9687e":"markdown","0dde970e":"markdown"},"source":{"91a96be6":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os","296e70ab":"#using the SQLite table to read data.\ncon = sqlite3.connect('..\/input\/database.sqlite')\n\n#Filetring reviews with only positive or negative reviews i.e not considering score=3\nfiltered_data = pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWhere Score!=3\n\"\"\", con)\n\n#Replace the score with positive or negative (1,2 - negative and 4,5 - positive) \n\ndef partition(x):\n    if x<3:\n        return 'negative'\n    return 'positive'\n\nactualScore = filtered_data['Score']\npositiveNegative = actualScore.map(partition)\nfiltered_data['Score'] = positiveNegative","d49fd4c5":"filtered_data.shape\nfiltered_data.head()","556503e8":"display = pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE SCORE != 3 AND UserId = \"AR5J8UI46CURR\"\nORDER BY ProductId\n\"\"\", con)\ndisplay","69cfc33a":"#Sorting data according to ProducId in dataframe\nsorted_data = filtered_data.sort_values('ProductId', axis=0, ascending = True, inplace = False, kind='quicksort', na_position='last')","2e4b0930":"#Deduplication of entries\nfinal = sorted_data.drop_duplicates(subset = {\"UserId\", \"ProfileName\", \"Time\", \"Text\"}, keep='first', inplace = False)\nfinal.shape","1689085c":"#Checking to see how much % of data still remains\n(final['Id'].size*1.0)\/(filtered_data['Id'].size*1.0)*100","273f2fa4":"display= pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\nWHERE Score != 3 AND Id=44737 OR Id=64422\nORDER BY ProductID\n\"\"\", con)\n\ndisplay.head()","8e03aa40":"final = final[final.HelpfulnessNumerator<=final.HelpfulnessDenominator]","b10249e3":"#How many positive and negative reviews left?\nfinal['Score'].value_counts()\n#final.shape","cfd37638":"#count_vec = CountVectorizer() #in scikit-learn\n#final_counts = count_vec.fit_transform(final['Text'].values)","5ec0e21b":"#type(final_counts)","6996518d":"#final_counts.shape","e2114055":"final['Text'].values[6]","d06793c0":"#Find sentences having HTML tags\n#i=0\n#for sentence in final['Text'].values:\n#    if(len(re.findall('<.*?>', sentence))):\n#        print(i)\n#        print(sentence)\n#        break\n#    i += 1","11c5ba95":"#Functions to clean HTML and Punctuation\n\nimport re #https:\/\/pymotw.com\/2\/re\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\n\nstop = set(stopwords.words('english')) #set of all stopwords \nsno = SnowballStemmer('english') #Initialize stemmer\n\ndef cleanhtml(sentence): #Function to clean html\n    cleanr = re.compile('<.*?>')\n    cleantext = re.sub(cleanr, ' ',sentence)\n    return cleantext\n\ndef cleanpunctuation(sentence): #Function to clean all punctuation\n    cleaned = re.sub(r'[?|!|\\'|\"|#]', r'',sentence)\n    cleaned = re.sub(r'[.|,|)|(|\\|\/]', r' ',cleaned)\n    return cleaned\n\nprint(stop)\nprint(sno.stem('tasty'))","0784ef2f":"#Root word for tasty#Code for implementing step-by-step the checks mentioned in the pre-processing phase\n#this code takes a while to run as it needs to run on 500k sentences.\nif not os.path.isfile('finals.sqlite'):\n    i=0\n    str1=' '\n    final_string=[]\n    all_positive_words=[] # store words from +ve reviews here\n    all_negative_words=[] # store words from -ve reviews here.\n    s=''\n    for sent in tqdm(final['Text'].values):\n        filtered_sentence=[]\n        #print(sent);\n        sent=cleanhtml(sent) # remove HTMl tags\n        for w in sent.split():\n            for cleaned_words in cleanpunctuation(w).split():\n                if((cleaned_words.isalpha()) & (len(cleaned_words)>2)):    \n                    if(cleaned_words.lower() not in stop):\n                        s=(sno.stem(cleaned_words.lower())).encode('utf8')\n                        filtered_sentence.append(s)\n                        if (final['Score'].values)[i] == 'positive': \n                            all_positive_words.append(s) #list of all words used to describe positive reviews\n                        if(final['Score'].values)[i] == 'negative':\n                            all_negative_words.append(s) #list of all words used to describe negative reviews reviews\n                    else:\n                        continue\n                else:\n                    continue \n        #print(filtered_sentence)\n        str1 = b\" \".join(filtered_sentence) #final string of cleaned words\n        #print(\"***********************************************************************\")\n\n        final_string.append(str1)\n        i+=1\n\n    #############---- storing the data into .sqlite file ------########################\n    final['CleanedText']=final_string #adding a column of CleanedText which displays the data after pre-processing of the review \n    final['CleanedText']=final['CleanedText'].str.decode(\"utf-8\")\n        # store final table into an SQlLite table for future.\n    conn = sqlite3.connect('finals.sqlite')\n    c=conn.cursor()\n    conn.text_factory = str\n    final.to_sql('Reviews', conn,  schema=None, if_exists='replace', \\\n                 index=True, index_label=None, chunksize=None, dtype=None)\n    conn.close()\n    \n    \n    with open('positive_words.pkl', 'wb') as f:\n        pickle.dump(all_positive_words, f)\n    with open('negitive_words.pkl', 'wb') as f:\n        pickle.dump(all_negative_words, f)\n\nprint(\"cell exec\")","c9eff295":"#using the SQLite table to read data.\ncon = sqlite3.connect('finals.sqlite')\n\n#Filetring reviews with only positive or negative reviews i.e not considering score=3\nfinal = pd.read_sql_query(\"\"\"\nSELECT *\nFROM Reviews\n\"\"\", con)","7569fa8b":"final['Text'].iloc[6]","76dfb1ed":"final['CleanedText'].iloc[6]","3091ffc6":"#freq_dist_positive = nltk.FreqDist(all_positive_words)\n#freq_dist_negative = nltk.FreqDist(all_negative_words)","a6c85830":"#print(\"Most Common Positive Words : \",freq_dist_positive.most_common(20))\n#print(\"Most Common Negative Words : \",freq_dist_negative.most_common(20))","8271d44c":"#bi-gram, tri-gram and n-gram\n\n#removing stop words like \"not\" should be avoided before building n-grams\ncount_vect = CountVectorizer() #in scikit-learn\nfinal_unigram_counts = count_vect.fit_transform(final['CleanedText'].values)\n#print(\"the type of count vectorizer \",type(final_bigram_counts))\nprint(\"the shape text BOW vectorizer \",final_unigram_counts.get_shape())\n#print(\"the number of unique words including both unigrams and bigrams \", final_bigram_counts.get_shape()[1])","9ec75269":"# [F] Bi-grams and n-grams (Bag of Words)","b0f8e8fb":"## Code to load final sqlite table","6a2eef9a":"<b>Observation<\/b>:- It was also seen that in two rows given below the value of HelpfulnessNumerator is greater than HelpfulnessDenominator which is not practically possible hence these two rows too are removed from calcualtions","36104088":"# [C] Data Cleaning: Deduplication","2b968087":"### Imports","4975aa79":"# [A] Amazon Fine Food Reviews Analysis\n\nData Source: https:\/\/www.kaggle.com\/snap\/amazon-fine-food-reviews\n\nThe Amazon Fine Food Reviews dataset consists of reviews of fine foods from Amazon.\n\nNumber of reviews: 568,454<br>\nNumber of users: 256,059<br>\nNumber of products: 74,258<br>\nTimespan: Oct 1999 - Oct 2012<br>\nNumber of Attributes\/Columns in data: 10<br>\n\nAttribute Information:<br>\n\nId<br>\nProductId - unique identifier for the product<br>\nUserId - unqiue identifier for the user<br>\nProfileName<br>\nHelpfulnessNumerator - number of users who found the review helpful<br>\nHelpfulnessDenominator - number of users who indicated whether they found the review helpful or not<br>\nScore - rating between 1 and 5<br>\nTime - timestamp for the review<br>\nSummary - brief summary of the review<br>\nText - text of the review<br>\n<b>Objective:<\/b>\nGiven a review, determine whether the review is positive (Rating of 4 or 5) or negative (rating of 1 or 2).\n\n\n[Q] How to determine if a review is positive or negative?\n\n[Ans] We could use the Score\/Rating. A rating of 4 or 5 could be cosnidered a positive review. A review of 1 or 2 could be considered negative. A review of 3 is nuetral and ignored. This is an approximate and proxy way of determining the polarity (positivity\/negativity) of a review.","e564bbbc":"# [B] Loading the data\n\nThe dataset is available in two forms\n\n.csv file<br>\nSQLite Database<br>\nIn order to load the data, We have used the SQLITE dataset as it easier to query the data and visualise the data efficiently. \nHere as we only want to get the global sentiment of the recommendations (positive or negative), we will purposefully ignore all Scores equal to 3. If the score id above 3, then the recommendation wil be set to \"positive\". Otherwise, it will be set to \"negative\".","7e5ff617":"# [E] Text Preprocessing","2e85c2e3":"# [D] Bag of Words","201da6dd":"As can be seen above the same user has multiple reviews of the with the same values for HelpfulnessNumerator, HelpfulnessDenominator, Score, Time, Summary and Text  and on doing analysis it was found that <br>\n<br> \nProductId=B000HDOPZG was Loacker Quadratini Vanilla Wafer Cookies, 8.82-Ounce Packages (Pack of 8)<br>\n<br> \nProductId=B000HDL1RQ was Loacker Quadratini Lemon Wafer Cookies, 8.82-Ounce Packages (Pack of 8) and so on<br>\n\nIt was inferred after analysis that reviews with same parameters other than ProductId belonged to the same product just having different flavour or quantity. Hence in order to reduce redundancy it was decided to eliminate the rows having same parameters.<br>\n\nThe method used for the same was that we first sort the data according to ProductId and then just keep the first similar product review and delelte the others. for eg. in the above just the review for ProductId=B000HDL1RQ remains. This method ensures that there is only one representative for each product and deduplication without sorting would lead to possibility of different representatives still existing for the same product.","4d87a975":"It is observed that the reviews data had many duplicate entries. Hence it was necessary to remove duplicates in order to get unbiased results for the analysis of data.","40431021":"In the preprocessing phase, we will do following things in order given below :- <br>\n<ol>\n    <li>Begin by removing HTML tags.<\/li>\n    <li>Remove any punctuations or limited set of special characters like , or . or # etc.<\/li>\n    <li>Check if the word is made up of english letters and is not alpha-numeric<\/li>\n    <li>Check to see if the length of the word is greater than 2 (as it was researched that there is no adjective in 2-letters)<\/li>\n    <li>Convert the word to lowercase<\/li>\n    <li>Remove Stopwords<\/li>\n    <li>Finally Snowball Stemming the word (it was obsereved to be better than Porter Stemming<\/li>\n<\/ol>\n<br>\n\nAfter which we collect the words used to describe positive and negative reviews","29f9687e":" **Motivation**\n\nNow that we have our list of words describing positive and negative reviews lets analyse them.<br>\n\nWe begin analysis by getting the frequency distribution of the words as shown below","0dde970e":"<b>Observation:-<\/b> From the above it can be seen that the most common positive and the negative words overlap for eg. 'like' could be used as 'not like' etc. <br>\nSo, it is a good idea to consider pairs of consequent words (bi-grams) or q sequnce of n consecutive words (n-grams)"}}