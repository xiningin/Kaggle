{"cell_type":{"f6f3f65b":"code","9202d1ec":"code","c42843b4":"code","6abc83f9":"code","91017e97":"code","4484304e":"code","130a0a08":"code","bc915daf":"code","88decde5":"code","c63a70d1":"code","917abaf5":"code","3a754ad3":"code","0fb4d5c9":"code","b6bb8830":"code","c7aecc34":"code","de193958":"code","3f3dd546":"code","e5255a11":"code","5b7a9c37":"code","a8effec3":"code","cde3802c":"code","2461e7d0":"code","59669efa":"code","4d409c1c":"code","94e286ec":"code","bd7df598":"code","92a9a065":"code","2be339d2":"code","3bcf84cc":"code","55462cdd":"code","4b2315f5":"code","d6dc2ec9":"code","bfcc3248":"code","99cffbef":"code","bc5ef154":"code","78216be1":"code","a0d88451":"code","bc8e93ca":"code","eb0f9b06":"code","4cb5af95":"code","51951b80":"code","75f8ebe2":"markdown","8455bc9b":"markdown","dd724648":"markdown","136a5127":"markdown","6dd9bcd7":"markdown","39bb44b8":"markdown","87ba52d9":"markdown","957821ff":"markdown","9bc96f4a":"markdown","965ba30b":"markdown","64b43eeb":"markdown"},"source":{"f6f3f65b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import GridSearchCV","9202d1ec":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train, test]","c42843b4":"train.head()","6abc83f9":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","91017e97":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","4484304e":"for df in combine:\n    df['Age'] = df[['Age','Pclass']].apply(impute_age,axis=1)","130a0a08":"train.drop('Cabin',axis=1,inplace=True)\ntest.drop('Cabin',axis=1,inplace=True)","bc915daf":"train.dropna(inplace=True)","88decde5":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","c63a70d1":"for df in combine:\n    df['Title'] = df['Name'].apply(lambda x:x.split(',')[1])\n    df['Title'] = df['Title'].apply(lambda x:x.split()[0])\n    df['Title'] = df['Title'].map(lambda x: x.replace('.',''))\ntrain.Title.value_counts()[:6]","917abaf5":"for df in combine:\n    df['Title'] = df['Title'].replace(['Don', 'Rev', 'Dr', 'Mme',\\\n       'Ms', 'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'the',\\\n       'Jonkheer'], 'Rare')\n\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')","3a754ad3":"train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","0fb4d5c9":"titles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor df in combine:\n    df['Title'] = df['Title'].map(titles)\n    df['Title'] = df['Title'].fillna(0)","b6bb8830":"for df in combine:\n    df['Sex'] = df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","c7aecc34":"embark_train = pd.get_dummies(train['Embarked'],drop_first=True)\nembark_test = pd.get_dummies(test['Embarked'],drop_first=True)","de193958":"for df in combine:\n    df.drop(['Embarked','Name','Ticket'],axis=1, inplace=True)\n","3f3dd546":"train = pd.concat([train,embark_train],axis=1)\ntest = pd.concat([test,embark_test],axis=1)","e5255a11":"test.Fare = test.Fare.replace(np.nan, test['Fare'].median())","5b7a9c37":"test.head()","a8effec3":"train['Age_int'] =pd.cut(train['Age'], 5)\ntrain['Age_int'].value_counts()","cde3802c":"frames = [train,test]\nfor df in frames:    \n    df.loc[ df['Age'] <= 16, 'Age'] = 0\n    df.loc[(df['Age'] > 16) & (df['Age'] <= 32), 'Age'] = 1\n    df.loc[(df['Age'] > 32) & (df['Age'] <= 48), 'Age'] = 2\n    df.loc[(df['Age'] > 48) & (df['Age'] <= 64), 'Age'] = 3\n    df.loc[ df['Age'] > 64, 'Age'] = 4","2461e7d0":"train['Fare_int'] =pd.cut(train['Fare'], 4)\ntrain['Fare_int'].value_counts()","59669efa":"for df in frames:    \n    df.loc[ df['Fare'] <= 128, 'Fare'] = 0\n    df.loc[(df['Fare'] > 128) & (df['Fare'] <= 256), 'Fare'] = 1\n    df.loc[(df['Fare'] > 256) & (df['Fare'] <= 384), 'Fare'] = 2\n    df.loc[ df['Fare'] > 384, 'Fare'] = 3\n","4d409c1c":"cols = ['Age_int','Fare_int']\ntrain = train.drop(cols, axis=1)","94e286ec":"train['FamSize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamSize'] = test['SibSp'] + test['Parch'] + 1","bd7df598":"train['IsAlone'] = train['FamSize']\ntest['IsAlone'] = test['FamSize']","92a9a065":"train['IsAlone'].unique()","2be339d2":"train['IsAlone'] = train['IsAlone'].replace([ 2,  5,  3,  7,  6,  4,  8, 11], 0)\ntest['IsAlone'] = test['IsAlone'].replace([ 2,  5,  3,  7,  6,  4,  8, 11], 0)","3bcf84cc":"train.head()","55462cdd":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport xgboost as xgb\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier)\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","4b2315f5":"X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n                                                    train['Survived'], test_size=0.30, \n                                                    random_state=0)","d6dc2ec9":"rf = RandomForestClassifier(n_jobs= -1,n_estimators= 500,warm_start=True,max_depth= 6,min_samples_leaf= 2,max_features= 'sqrt',\n    verbose=0)\net = ExtraTreesClassifier(n_jobs= -1,n_estimators= 500,max_depth= 8,min_samples_leaf= 2,verbose=0)\nada = AdaBoostClassifier(n_estimators=500, learning_rate=0.75)\ngb = GradientBoostingClassifier(n_estimators=500,max_depth= 5,min_samples_leaf= 2)\nsvc = SVC()","bfcc3248":"models = [rf,et,ada,gb,svc]\nfor model in models:\n    model.fit(X_train, y_train)\n    ","99cffbef":"preds_rf=rf.predict(X_test)\npreds_et=et.predict(X_test)\npreds_ada=ada.predict(X_test)\npreds_gb=gb.predict(X_test)\npreds_svc=svc.predict(X_test)","bc5ef154":"#Creating meta-features to train second level model\nx_first = pd.DataFrame( {'RandomForest': preds_rf,\n     'ExtraTrees': preds_et,\n     'AdaBoost': preds_ada,\n      'GradientBoost': preds_gb,\n        'SVC': preds_svc\n    })\n","78216be1":"#Creating meta-features to predict second level model\npreds_rf=rf.predict(test)\npreds_et=et.predict(test)\npreds_ada=ada.predict(test)\npreds_gb=gb.predict(test)\npreds_svc=svc.predict(test)","a0d88451":"x_second = pd.DataFrame( {'RandomForest': preds_rf,\n     'ExtraTrees': preds_et,\n     'AdaBoost': preds_ada,\n      'GradientBoost': preds_gb,\n       'SVC': preds_svc\n    })","bc8e93ca":"#adding alorithms like logreg and KNN, or excluding SVC didn't help to improve result\nsns.heatmap(x_first.corr(), annot=True)","eb0f9b06":"gbm = xgb.XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\n","4cb5af95":"gbm.fit(x_first,y_test)\npredictions_final = gbm.predict(x_second)","51951b80":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": predictions_final})\nsubmission.to_csv('gender_submission.csv', index=False)","75f8ebe2":"# Creating intervals for 'Age'","8455bc9b":"# Exploratory Data Analysis\n\n\n## Missing Data","dd724648":"# Building meta-model\n","136a5127":"# Submission","6dd9bcd7":"# Creating Dummy variables","39bb44b8":"\n\n# Building a first level model\n","87ba52d9":"___\n## Data Cleaning\n","957821ff":"# Creating intervals for 'Fare'","9bc96f4a":"## Converting Titles in Names into numbers\n","965ba30b":"# Creating New feature for 'Parch' and 'SibSp'","64b43eeb":"# Converting Sex feature into numbers"}}