{"cell_type":{"f148f01a":"code","0d8b8937":"code","3bd977e0":"code","2f8f6027":"code","5a898091":"code","0968433b":"code","d96f378e":"code","7318e795":"code","481e96a6":"code","e3ab8d83":"code","3cccc464":"code","8a107dd9":"code","6dfc7d22":"code","104cc280":"code","0e36caed":"code","e7f0888b":"code","6766305b":"code","25df9f22":"code","04dc372e":"code","f83683a5":"code","eff42469":"code","4e6b0521":"markdown","007c87d7":"markdown","60c2ba3f":"markdown","9df9b7fa":"markdown","f1523e8a":"markdown","be4ab5d4":"markdown","571258aa":"markdown","4292550a":"markdown","63b96890":"markdown","807c5034":"markdown","6ad6a2ea":"markdown"},"source":{"f148f01a":"import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n\r\nfrom sklearn import model_selection, linear_model, metrics, pipeline, preprocessing, impute\r\n","0d8b8937":"path_data='..\/input\/tabular-playground-series-sep-2021'\r\nX_test = pd.read_csv(path_data+'\/test.csv')\r\ntrain_df = pd.read_csv(path_data+'\/train.csv')\r\nTARGET = train_df.columns[-1]\r\n\r\ny_train = train_df[train_df.columns[-1]]\r\nX_train = train_df.drop(train_df.columns[-1], axis=1)\r\nprint(f'Test shape: {X_test.shape}, X_train shape: {X_train.shape}, y_train shape: {y_train.shape}')\r\nprint(f'Count of null-values: {X_train.isna().sum().sum()}')","3bd977e0":"X_train.head()","2f8f6027":"X_train.describe().T","5a898091":"bins = 50\r\nplts_grid = 5 ","0968433b":"fig = plt.figure(figsize = (20, 140))\r\nfor idx, i in enumerate(X_train.columns):\r\n    ax = fig.add_subplot(int(np.ceil(len(X_train.columns)\/plts_grid)), plts_grid, idx+1)\r\n    plt.hist(X_train[i], bins= bins , label='train')\r\n    plt.hist(X_test[i], bins = bins, label='test')\r\n    ax.set_title(i)\r\n    plt.legend()\r\n\r\nplt.text(9, -20000, 'Capition', size = 12)\r\nplt.show()","d96f378e":"fig = plt.figure(figsize = (20, 140))\r\nfor idx, i in enumerate(X_train.columns):    \r\n    fig.add_subplot(int(np.ceil(len(X_train.columns)\/plts_grid)), plts_grid, idx+1)\r\n    ax  = sns.boxplot(x = X_train[i] )\r\n    ax.set_title(i)   \r\nplt.show()","7318e795":"train_df['count_null'] = train_df.isna().sum(axis=1)\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2)\r\n\r\nsns.countplot(x='count_null', hue = TARGET, data=train_df, ax =ax1 )  \r\nsns.countplot(x='count_null', data=train_df, ax =ax2) \r\n\r\nax1.legend(title='Target: ')\r\nfig.suptitle('Distribution by count of missing values \u200b\u200bin a row: ')\r\nfig.set_figwidth(20) \r\n\r\nplt.show()\r\n","481e96a6":"train_df['count_null'] = train_df.isna().sum(axis=1)\r\ntrain_df['has_mis'] = train_df['count_null'] > 0 \r\n\r\nfig, ax = plt.subplots(1)\r\nsns.countplot(x='has_mis', hue = TARGET, data=train_df )  \r\nax.set_xlabel(\"Has missing values? \")\r\nax.legend( title= \"Target \")\r\nplt.show()","e3ab8d83":"X_train['n_missing'] = X_train.isna().sum(axis=1)\r\nX_test['n_missing'] = X_test.isna().sum(axis=1)","3cccc464":"columns_for_pred  = X_train.columns\r\ncolumns_for_pred","8a107dd9":"si = impute.SimpleImputer()\r\n\r\nX_train =  si.fit_transform(X_train)\r\nX_test =  si.fit_transform(X_test)","6dfc7d22":"scaler = preprocessing.StandardScaler()\r\nscaler.fit(X_train)\r\nX_train = pd.DataFrame(scaler.transform(X_train), columns=columns_for_pred)\r\nX_test = pd.DataFrame(scaler.transform(X_test), columns=columns_for_pred)","104cc280":"print(f'Count of null-values: {X_train.isna().sum().sum()}')","0e36caed":"simple_regressor = linear_model.LogisticRegressionCV(random_state=0)\r\nsimple_regressor.get_params()","e7f0888b":"%%time\r\nsimple_regressor.fit(X = X_train, y= y_train)","6766305b":"simple_regressor.get_params()","25df9f22":"predicted_values = simple_regressor.predict(X_train)\r\npredicted_proba = simple_regressor.predict_proba(X_train)[:,1]","04dc372e":"print(f'confusion_matrix: {metrics.confusion_matrix(y_train, predicted_values)}')\r\nprint(f'accuracy_score: {metrics.accuracy_score(y_train, predicted_values)}')\r\n\r\n\r\nprint(f'recall_score: {metrics.recall_score(y_train, predicted_values)}')\r\nprint(f'precision_score: {metrics.precision_score(y_train, predicted_values)}')\r\n\r\nprint(f'f1_score: {metrics.f1_score(y_train, predicted_values)}')\r\n\r\nprint(f'roc_auc_score: {metrics.roc_auc_score(y_train, predicted_proba)}')","f83683a5":"predictes_for_test = simple_regressor.predict_proba(X_test)","eff42469":"submission = pd.DataFrame({'id': pd.read_csv(path_data+'\/test.csv', usecols=['id'])['id'], 'claim': predictes_for_test[:,1]})\nsubmission.to_csv( 'submission.csv' ,index = 0)","4e6b0521":"## Missing values checking","007c87d7":"# Visualizations","60c2ba3f":"Use **SimpleImputer** to populate Nan-value in our dataset. \r\nIt is important that fit_transform() returns **ndarray**, not pd.DataFrame, so later, to apply methods with pd.DataFrame, the object will need to be cast to this type.","9df9b7fa":"# Simple data preparing","f1523e8a":"Add a column with count of missing objects in the row","be4ab5d4":"**LogisticRegressionCV** is a logistic regression that uses cross validation. ","571258aa":"# Make Submission! ","4292550a":"# Import data: for comfort, select the target column in a separate object.","63b96890":"Use **StandardScaler** to scale variables","807c5034":"# Logistic regression ","6ad6a2ea":"# Here you can see that most rows with a target = 1, have missing values."}}