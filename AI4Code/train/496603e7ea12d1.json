{"cell_type":{"292ddc03":"code","aede9bf0":"code","f3205a1f":"code","f9afe444":"code","0cf572c4":"code","d526322d":"code","0c1141e8":"code","411cd779":"code","d77b85db":"code","e9091da8":"code","e069e96c":"code","61fb6306":"markdown","92f3cfa8":"markdown"},"source":{"292ddc03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aede9bf0":"!pip install python-louvain","f3205a1f":"import matplotlib.pyplot as plt\nimport numpy as np\nimport networkx as nx\nfrom networkx.algorithms import community\nimport random\nimport pandas as pd\nimport community as community_louvain\ntry:\n    import pygraphviz\n    from networkx.drawing.nx_agraph import graphviz_layout\nexcept ImportError:\n    try:\n        import pydot\n        from networkx.drawing.nx_pydot import graphviz_layout\n    except ImportError:\n        raise ImportError(\"This example needs Graphviz and either \"\n                          \"PyGraphviz or pydot\")","f9afe444":"\n\ndf_nodes = pd.read_csv('\/kaggle\/input\/stack-overflow-tag-network\/stack_network_nodes.csv')\ndf_edges = pd.read_csv('\/kaggle\/input\/stack-overflow-tag-network\/stack_network_links.csv')","0cf572c4":"df_nodes.head()","d526322d":"df_edges.head()","0c1141e8":"# get edges and weight\nedges = df_edges[['source', 'target']].values.tolist()\nweights = [float(l) for l in df_edges.value.values.tolist()]","411cd779":"# Make Graph and apply weight\nG = nx.Graph(directed=True)\nG.add_edges_from(edges)\nfor cnt, a in enumerate(G.edges(data=True)):\n    G.edges[(a[0], a[1])]['weight'] = weights[cnt]","d77b85db":"def simple_Louvain(G):\n    \"\"\" Louvain method github basic example\"\"\"\n    partition = community_louvain.best_partition(G)\n    pos = graphviz_layout(G)\n    \n    max_k_w = []\n    for com in set(partition.values()):\n        list_nodes = [nodes for nodes in partition.keys()\n                      if partition[nodes] == com]\n        max_k_w = max_k_w + [list_nodes]\n\n    \n    node_mapping = {}\n    map_v = 0\n    for node in G.nodes():\n        node_mapping[node] = map_v\n        map_v += 1\n\n    community_num_group = len(max_k_w)\n    color_list_community = [[] for i in range(len(G.nodes()))]\n    \n    # color\n    for i in G.nodes():\n        for j in range(community_num_group):\n            if i in max_k_w[j]:\n                color_list_community[node_mapping[i]] = j\n    \n    return G, pos, color_list_community, community_num_group, max_k_w","e9091da8":"G, pos, color_list_community, community_num_group, max_k_w = simple_Louvain(G)","e069e96c":"\n\nedges = G.edges()\nFeature_color_sub = color_list_community\nnode_size = 70\n\nfig = plt.figure(figsize=(20, 10))\nim = nx.draw_networkx_nodes(G, pos, node_size=node_size, node_color=Feature_color_sub, cmap='jet', vmin=0, vmax=community_num_group, with_labels=False)\nnx.draw_networkx_edges(G, pos)\nnx.draw_networkx_labels(G, pos, font_size=12, font_color=\"black\")\nplt.xticks([])\nplt.yticks([])\nplt.colorbar(im)\nplt.show(block=False)","61fb6306":"# Network analysis with community detection - louvain algorithm\n\n- louvain algorithm : https:\/\/arxiv.org\/abs\/0803.0476\n- github : https:\/\/github.com\/taynaud\/python-louvain","92f3cfa8":"### Make simple Louvain function\n\n- This example is in github\n- I update code for add color"}}