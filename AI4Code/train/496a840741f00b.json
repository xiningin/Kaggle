{"cell_type":{"830248b5":"code","cb336983":"code","fab3fcf9":"code","86037bee":"code","24e0d31e":"code","e9341eb3":"code","35e8c6ad":"code","43447974":"code","58ae39ac":"code","d6712799":"code","72dd9ce9":"code","f0444be4":"code","62b21f29":"code","6646a8e2":"code","1704a777":"code","5b6a4e94":"code","5a2f3e83":"markdown","2af99bd8":"markdown","b3f7a100":"markdown","58ccbaee":"markdown","e6419fc9":"markdown","8815e3eb":"markdown","b4a6daf0":"markdown","76f4c7ab":"markdown","18f467fd":"markdown"},"source":{"830248b5":"import pandas as pd \nimport datetime\nimport os\nimport seaborn as sns\nfrom datetime import datetime\npd.set_option(\"display.max_columns\", None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nimport xml.etree.ElementTree as Xet\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn import preprocessing\nimport random\nimport seaborn as sns\nfrom datetime import datetime\npd.set_option(\"display.max_columns\", None)","cb336983":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\ntrain_df = pd.read_csv(os.path.join(dataset_path,'train.csv'))\nxtree = Xet.parse(os.path.join(dataset_path,'holidays.xml'))\nweather_df = pd.read_csv(os.path.join(dataset_path,'weather-sfcsv.csv'))\nweather_condition = weather_df['Weather_Condition'].unique()\nweather_condition_dict = dict(zip(weather_condition, range(len(weather_condition))))\nweather_df.replace({'Weather_Condition': weather_condition}, inplace=True)\nprint(\"The shape of the dataset is {}.\\n\\n\".format(train_df.shape))\ntrain_df.head()","fab3fcf9":"def extract_date(df, column_name, date_format):\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    df['Year'] = pd.DatetimeIndex(df[column_name]).year\n    df['Month'] = pd.DatetimeIndex(df[column_name]).month\n    df['Day'] = pd.DatetimeIndex(df[column_name]).day\n    if len(date_format) > 8:\n        df['Hour'] = pd.DatetimeIndex(df[column_name]).hour\n    df.drop([column_name], axis= 1, inplace=True)\n   ","86037bee":"def normalize_data(df, *args):\n    for arg in args:\n        df[arg] = (df[arg] - df[arg].mean())\/df[arg].std()\n        ","24e0d31e":"def merge_data(data):\n    extract_date(data, 'timestamp', '%Y-%m-%d %H:%M:%S')\n    data = data.drop_duplicates(subset=data.keys(), keep='last')\n    df = pd.merge(data, weather_df_wd,  how='left', left_on=['Year', 'Day', 'Month', 'Hour'], right_on = ['Year', 'Day', 'Month', 'Hour'])\n    df.dropna(axis=0, subset=['Weather_Condition', 'Temperature(F)', 'Humidity(%)', 'Visibility(mi)'], inplace=True)\n    df.fillna(value=df.mean(), inplace=True)\n    df.replace({True: 1, False: 0, 'Yes': 1, 'No': 0, 'R': 1, 'L': 0}, inplace=True)\n    df['Weather_Condition'].replace(df['Weather_Condition'].unique(),range(len(df['Weather_Condition'].unique())), inplace=True)\n    normalize_data(df, 'Lat', 'Lng', 'Wind_Speed(mph)', 'Wind_Chill(F)', 'Temperature(F)', 'Visibility(mi)', 'Year')\n    df['Humidity'] = df['Humidity(%)'] \/ 100\n    df = pd.merge(df, holiday_df,  how='left', left_on=['Year', 'Day', 'Month'], right_on = ['Year', 'Day', 'Month'])\n    df.fillna(0, inplace=True)\n    return df","e9341eb3":"xroot = xtree.getroot()\ndf_cols = ['date', 'description']\nrows = []\nfor node in xroot:\n    s_name = node.find(\"date\").text if node is not None else None\n    s_mail = node.find(\"description\").text if node is not None else None\n    rows.append({\"date\": s_name, \"description\": s_mail})\nholiday_df = pd.DataFrame(rows, columns = df_cols)\nextract_date(holiday_df, 'date', '%Y-%m-%d')\nholiday_df[\"description\"] = 1\nweather_df_wd = weather_df.drop_duplicates(subset=['Year', 'Day', 'Month', 'Hour'], keep='last')","35e8c6ad":"df = merge_data(train_df)","43447974":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\ncolumns_removed = ['ID', 'Roundabout', 'Bump', 'Humidity(%)',\n                   'No_Exit', 'Wind_Speed(mph)', 'Temperature(F)',\n                   'Visibility(mi)', 'Day', 'Severity']\nX_train = train_df.drop(columns=columns_removed)\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=columns_removed)\ny_val = val_df['Severity']","58ae39ac":"plt.figure(figsize=(20,10))\nplt.title('Data Correlation')\nsns.heatmap(X_train.corr(),annot= True,cmap='summer')","d6712799":"sns.pairplot(X_train)","72dd9ce9":"sns.pairplot(train_df[['Temperature(F)','Humidity(%)','Wind_Speed(mph)','Visibility(mi)', 'Distance(mi)', 'Severity']])","f0444be4":"sns.pairplot(train_df[['Lat', 'Lng', 'Crossing', 'Stop', 'Side', 'Severity']])","62b21f29":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","6646a8e2":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","1704a777":"test_df = pd.read_csv(os.path.join(dataset_path,'test.csv'))\n\nX_test = merge_data(test_df)\n\n# You should update\/remove the next line once you change the features used for training\ncolumns_removed = ['ID', 'Roundabout', 'Bump', 'Humidity(%)',\n                   'No_Exit', 'Wind_Speed(mph)', 'Temperature(F)',\n                   'Visibility(mi)', 'Day']\nX_test = X_test.drop(columns=columns_removed)\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","5b6a4e94":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","5a2f3e83":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","2af99bd8":"Well. That's a good start, right? A classifier that predicts all examples' `Severity` as 2 will get around 0.63. You should get better score as you add more features and do better data preprocessing.","b3f7a100":"Now let's test our classifier on the validation dataset and see the accuracy.","58ccbaee":"## Exploratory Data Analysis\nIn this step, one should load the data and analyze it. However, I'll load the data and do minimal analysis. You are encouraged to do thorough analysis!\n\nLet's load the data using `pandas` and have a look at the generated `DataFrame`.","e6419fc9":"## Data Splitting\n\nNow it's time to split the dataset for the training step. Typically the dataset is split into 3 subsets, namely, the training, validation and test sets. In our case, the test set is already predefined. So we'll split the \"training\" set into training and validation sets with 0.8:0.2 ratio. \n\n*Note: a good way to generate reproducible results is to set the seed to the algorithms that depends on randomization. This is done with the argument `random_state` in the following command* ","8815e3eb":"## Conclusion\n\nIn this notebook, we have demonstrated the essential steps that one should do in order to get \"slightly\" familiar with the data and the submission process. We chose not to go into details in each step to keep the welcoming notebook simple and make a room for improvement.\n\nYou're encourged to `Fork` the notebook, edit it, add your insights and use it to create your submission.","b4a6daf0":"## Model Training\n\nLet's train a model with the data! We'll train a Random Forest Classifier to demonstrate the process of making submissions. ","76f4c7ab":"## Submission File Generation\n\nWe have built a model and we'd like to submit our predictions on the test set! In order to do that, we'll load the test set, predict the class and save the submission file. \n\nFirst, we'll load the data.","18f467fd":"## You're here! \nWelcome to your first competition in the [ITI's AI Pro training program](https:\/\/ai.iti.gov.eg\/epita\/ai-engineer\/)! We hope you enjoy and learn as much as we did prepairing this competition.\n\n\n## Introduction\n\nIn the competition, it's required to predict the `Severity` of a car crash given info about the crash, e.g., location.\n\nThis is the getting started notebook. Things are kept simple so that it's easier to understand the steps and modify it.\n\nFeel free to `Fork` this notebook and share it with your modifications **OR** use it to create your submissions.\n\n### Prerequisites\nYou should know how to use python and a little bit of Machine Learning. You can apply the techniques you learned in the training program and submit the new solutions! \n\n### Checklist\nYou can participate in this competition the way you perefer. However, I recommend following these steps if this is your first time joining a competition on Kaggle.\n\n* Fork this notebook and run the cells in order.\n* Submit this solution.\n* Make changes to the data processing step as you see fit.\n* Submit the new solutions.\n\n*You can submit up to 5 submissions per day. You can select only one of the submission you make to be considered in the final ranking.*\n\n\nDon't hesitate to leave a comment or contact me if you have any question!"}}