{"cell_type":{"1b32ce85":"code","a48d79f1":"code","12cd08d6":"code","5bae1ff3":"code","5c7363f7":"code","3442b108":"code","09e323a4":"code","dbe49cda":"code","9012bc43":"code","2f40ab47":"code","f3c6103f":"code","322bef71":"code","43c8d66c":"code","5c7c5697":"code","4fa6f38a":"code","c341b92e":"code","14536277":"code","a0f6d0fa":"code","07d377f5":"code","cfd248e5":"code","e51eea3a":"code","620b2118":"code","afbac494":"code","c7aea930":"code","ae5e5188":"code","16efb78f":"code","63a634a1":"code","d9ad880d":"code","f136db85":"code","af26137a":"code","caa44d22":"code","4afb0f6a":"code","536e353c":"code","c28a6769":"code","dbefb33c":"code","b9ef8bb5":"code","f4e3d7d2":"code","aacc3f31":"code","dc93da21":"code","66cf00c0":"code","61491eed":"code","07790f5b":"code","f6a30b8c":"code","9f2ff0d9":"code","184940bd":"code","df2477c4":"code","85e90c7f":"code","14fc000f":"code","92c04574":"code","1bbe20bf":"code","afe52f6c":"code","5bb343cc":"code","b993d944":"code","30a7bdb9":"code","8b1ee4ce":"markdown","adfcf06f":"markdown","6ed5a061":"markdown","babe874b":"markdown","9ef8b3fc":"markdown","29d32fae":"markdown","99fd847a":"markdown","802a0eeb":"markdown","4fe07664":"markdown","b2e06920":"markdown","78e2e467":"markdown","5443dd41":"markdown","11219451":"markdown","fc482f38":"markdown","0bc18eeb":"markdown","c9347eca":"markdown","7819859c":"markdown","588cc925":"markdown","cb71746d":"markdown","40ab8b14":"markdown","f2f1417a":"markdown","89b3cfd9":"markdown","16ad6b53":"markdown","860e8afe":"markdown","d8ab2617":"markdown","8f9991d1":"markdown","fd98fe69":"markdown","4acf5110":"markdown","b0184b9b":"markdown"},"source":{"1b32ce85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a48d79f1":"import matplotlib.pyplot as plt\nimport seaborn as sns","12cd08d6":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_index = len(train)\nprint('No. of rows in train: ', train_index)\n\n#concatenating the datasets so that changes can be made in both\ntitanic = pd.concat([train, test], ignore_index=True)\ntitanic.head()","5bae1ff3":"titanic.info()","5c7363f7":"titanic.isnull().sum() #finding null values","3442b108":"titanic.describe()","09e323a4":"titanic.corr()","dbe49cda":"plt.figure(figsize=(10,8))\ncor = np.triu(titanic.corr())\nsns.heatmap(data=titanic.corr(), center=0, annot=True, mask=cor)","9012bc43":"titanic['Pclass'].value_counts()","2f40ab47":"sns.displot(data=titanic, x='Pclass', hue='Survived', multiple='stack')","f3c6103f":"sns.displot(data=titanic, x='Pclass',hue='Sex', multiple='dodge' )","322bef71":"x = titanic[['Sex', 'Survived']].value_counts()\nprint(x)\nprint()\nprint(f\"Total Female = {x.loc['female'].sum()}\")\nprint(f\"Survived Female = {x.loc['female'][1]}\")\nprint(f\"% female survived = {(x.loc['female'][1]\/x.loc['female'].sum())*100} \")\nprint()\nprint(f\"Total male = {x.loc['male'].sum()}\")\nprint(f\"Survived male = {x.loc['male'][1]}\")\nprint(f\"% male survived = {(x.loc['male'][1]\/x.loc['male'].sum())*100} \")\n","43c8d66c":"sns.catplot(data=titanic, kind='count', x='Sex', hue='Survived')","5c7c5697":"titanic['SibSp'].value_counts()","4fa6f38a":"sns.catplot(data=titanic, kind='count' ,x='SibSp', hue='Survived')","c341b92e":"titanic['Parch'].value_counts()","14536277":"sns.catplot(data=titanic, kind='count' ,x='Parch', hue='Survived')","a0f6d0fa":"plt.figure(figsize=(10,8))\nsns.histplot(data=titanic, x='Fare', kde=True, hue='Survived', multiple='dodge')","07d377f5":"sns.catplot(data=titanic, x='Embarked', hue='Survived', kind='count')","cfd248e5":"titanic['Ticket'].sample(10)","e51eea3a":"titanic['Ticket'].nunique() #number of unique values","620b2118":"sns.histplot(data=titanic, x='Age', kde=True, hue='Survived', multiple='dodge')","afbac494":"titanic['Cabin'].unique()","c7aea930":"titanic['Cabin'].isnull().sum()","ae5e5188":"titanic.groupby(['Embarked', 'Sex', 'Survived']).median()","16efb78f":"sns.relplot(data=titanic, x='Embarked', y='Age', col='Pclass', size='Survived', hue='Sex')","63a634a1":"titanic.isnull().sum()","d9ad880d":"# Fare has only one missing value. It can be filled with the median.\n\ntitanic['Fare'].fillna(titanic['Fare'].median(), inplace=True)","f136db85":"# Embarked has two missing values. Filling these with the most commin boarding value(i.e. 'S')\n\ntitanic['Embarked'].fillna('S', inplace=True)","af26137a":"# Cabin has many missing values. Therefore, the column is dropped.\n\ntitanic.drop('Cabin', axis=1, inplace=True)","caa44d22":"titanic.groupby(['Embarked', 'Sex', 'Pclass'])['Age'].mean()","4afb0f6a":"titanic['Age'] = titanic['Age'].fillna(titanic.groupby(['Embarked', 'Sex', 'Pclass'])['Age'].transform('mean'))","536e353c":"titanic.isnull().sum()","c28a6769":"print('Minimum age: ',titanic.Age.min())\nprint('Maximum age: ',titanic.Age.max())","dbefb33c":"titanic['Age-range'] = pd.cut(titanic['Age'], bins=[0,5,19,35,60,80 ], labels=['infant', 'kid', 'young', 'adult', 'old'] )\ntitanic['Age-range'].unique()","b9ef8bb5":"#Rounding age to two decimal places\n\ntitanic['Age'] = titanic['Age'].apply(lambda x: round(x, 2))","f4e3d7d2":"titanic['Title'] = titanic['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())","aacc3f31":"titanic['Title'].value_counts()","dc93da21":"# grouping less used titles into others\n\ntitanic['Title'] = titanic['Title'].map({\n    'Mr': 'Mr',\n    'Miss': 'Miss',\n    'Mrs': 'Mrs',\n    'Master': 'Master',\n    'Dr': 'Dr',\n    'Rev': 'Rev',\n    'Col': 'Officer',\n    'Major': 'Officer',\n    'Ms': 'Miss',\n    'Mlle': 'Miss',\n    'the Countess': 'Royalty',\n    'Capt': 'Officer',\n    'Dona': 'Royalty',\n    'Lady': 'Royalty',\n    'Don': 'Royalty',\n    'Jonkheer': 'Mr',\n    'Sir': 'Mr',\n    'Mme': 'Mrs',\n})\ntitanic['Title'].value_counts()","66cf00c0":"titanic['Family-size'] = titanic['SibSp']+titanic['Parch']+1","61491eed":"# Dropping columns: Name, SibSp, Parch and Ticket as these are no longer needed\n\ntitanic.drop(['Name', 'SibSp', 'Parch', 'Ticket'], axis=1, inplace=True)","07790f5b":"# Creating dummy variables for embarked, title, sex and age-range\n\nemb = pd.get_dummies(titanic['Embarked'], prefix='Embarked')\ntitl = pd.get_dummies(titanic['Title'], prefix='Title')\nsex = pd.get_dummies(titanic['Sex'], prefix='Sex')\nage = pd.get_dummies(titanic['Age-range'], prefix='age')\n\n# Concatenating dummy variables to dataframe\ntitanic = pd.concat([titanic, emb,titl, sex, age], axis=1)\n\n# Droping intial variables\ntitanic.drop(['Embarked', 'Title', 'Sex', 'Age-range'], axis=1, inplace=True)","f6a30b8c":"print(titanic.columns)\ntitanic.head()","9f2ff0d9":"# Splitting the titanic dataset to get back the train and test datasets\n\ntrain = titanic.loc[:train_index-1, :]","184940bd":"test = titanic.loc[train_index:, :]\ntest = test.drop('Survived', axis=1)","df2477c4":"# X : features of the train, and y: target variable of train\n\nX = train.drop('Survived', axis=1)\ny = train['Survived']","85e90c7f":"# Splitting again to test our models before finalizing\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)","14fc000f":"import warnings\nwarnings.filterwarnings('ignore')","92c04574":"from sklearn.linear_model import LogisticRegression\nscores = {}\nfor i in range(1,6):\n    model1 = LogisticRegression(max_iter=500*i)\n    model1.fit(X_train, y_train)\n    score = model1.score(X_test, y_test)\n    scores[500*i] = score\n\nprint('Scores for differet value of max_iter: ')\nfor i,j in scores.items():\n    print(i, ' : ', j)","1bbe20bf":"from sklearn.ensemble import RandomForestClassifier\n\nscores = {}\nfor i in range(1,10):\n    model2 = RandomForestClassifier(n_estimators = 200*i, random_state=0)\n    model2.fit(X_train, y_train)\n    score = model2.score(X_test, y_test)\n    scores[200*i] = score\n\nprint('Score for different values of n_estimators')\nfor i,j in scores.items():\n    print(i, ' : ', j)","afe52f6c":"from sklearn.ensemble import RandomForestClassifier\n\nrforest = RandomForestClassifier(n_estimators=1000, random_state=0)\nrforest.fit(X, y)\npredictions = rforest.predict(test)","5bb343cc":"submission = pd.DataFrame({'PassengerId': test['PassengerId'],\n                          'Survived': predictions})\nsubmission['Survived']= submission['Survived'].astype('int')\nsubmission.reset_index(inplace=True)\nsubmission = submission.drop('index', axis=1)","b993d944":"submission","30a7bdb9":"submission.to_csv('titanic_submission.csv', index=False)","8b1ee4ce":"### 1. Pclass\nHaving a 1st class ticket has its perks.  \nMost people in 1st class survived while most in 3rd class died.  \n2nd Class had least number of people while most were in 3rd Class.  \nPercent of women was more in 1st class","adfcf06f":"# Exploring the Data \nNow that we have our dataset loaded and ready, lets set sail...","6ed5a061":"# Importing the datasets\nRead the training and testing datsets into \"train\" and \"test\" respectively.  \nConcatenated both these into the \"titanic\" dataframe so that changes are applied on both the datasets simultaneously.  \nStored the length of training dataset in \"train_index\" to be able to split them later","babe874b":"# Exploratory data analysis\n### Let's look at how each variable relates to survival chances of passengers  ","9ef8b3fc":"# Introduction\nThe RMS Titanic, considered unsinkable, set sail on 15th April 1912, and ironically, sank in its maiden voyage after it hit an iceberg. Because it was considered unsinkable, it had very few life boats, and as a result most of the passengers did not survive. Here we have been given datasets consisting of passengers details. The train dataset has column depicting whether the passenger survived or not. We need to predict the same for the data given in the test dataset ","29d32fae":"### 5. Embarked\nC = Cherbourg, Q = Queenstown, S = Southampton  \nMost people had embarked from Southampton.  \nMore than 50% of people who boarded from Cherbourg survived.   ","99fd847a":"## Summarizing:\nYoung females in 1st class who had families and had the best chances of survival.  \nYoung men in 3rd class had the lowest chances of surviving ","802a0eeb":"# Feature Engineering\n### Creating four new features: Age-range, Title, Family-size and Cabin ","4fe07664":"We have few categorical variables: Sex, Survived and Embarked  \nWe can see that Age, Cabin, Fare and Embarked have missing values.  \nThe missing values in Survived are from the test data which we need to predict","b2e06920":"### 8.Cabin\nCabin values are alpha-numeric and has many missing values.  \nThis will be dropped later","78e2e467":"### 6. Ticket \nThe ticket number consist of alphabets and numbers in some and only numbers in some.   \nIt has 929 uniques values.   \nSeems irrelevant to survival, hence will be dropped later","5443dd41":"# Choosing a ML model ","11219451":"# Preprocessing\n### Filling in Missing Values","fc482f38":"### 7. Age\nMost people were young(15-30 years old)  \nThese had the lowest chances of survival.  \nMost children(0-10 years old) survived.  \nMost people older than 50 years also survived","0bc18eeb":"### 4. Fare\nBeing rich also pays off.  \nMore Passengers who paid higher fares survived.  \nMost passenger's fares were less than 50.  \n","c9347eca":"### 3. Sex\n\"*Women live longer than men.*\" is certainly true for the titanic.   \nFemales had a much better chance at survival than males.  \nWhile total number of males was almost double of number of females.  \n74% of all females survived.  \nOnly 18% males survived","7819859c":"### 3. SibSp and Parch\nSibSp: Number of Siblings\/spouse  \nParch: Number of Parents\/children  \nTogether these give us a overview of family size of each passenger.  \nPeople with family onboard had better chances of survival than single people ","588cc925":"### Age-range:\nCategorises passengers as infant, kid, young, adult or old, according to age","cb71746d":"# Splitting into train and test ","40ab8b14":"### Title:\nRetrieving and standardizing titles (Mr, Miss, Mrs...) from passenger names","f2f1417a":"Age has a few missing values. Filling it with mean age after grouping by ['Embarked', 'Sex', 'Pclass'] for greater accuracy","89b3cfd9":"# Encoding categorial variables ","16ad6b53":"### Logistic Regression ","860e8afe":"#### We get the best results with Random Forest Classifier with n_estimators between 800 and 1200.  ","d8ab2617":"### Random Forest Classifier","8f9991d1":"### Looking at the co-relation matrix we can infer the following:\n1. Survived and Fare are highly correlated.\n2. Fare is also affected by age, and number of family numbers\n3. Pclass has a negative corelation with Fare (i.e. 1st class has higher fare than 3rd class)\n4. Older people preferred 1st class.\n5. People in 1st class had better chances of survival","fd98fe69":"### Family-size:\nNo. of siblings\/spouse + No. of parents\/children + the passenger himself\/herself  \nSibSp + Parch + 1","4acf5110":"### Understanding what different columns represent:\n**PassengerId** : Unique Id assigned to each passenger  \n**Survived** : shows if the passenger survived or not. 1 for survived, 0 otherwise  \n**Pclass** : The class of the ticket. 1st, 2nd or 3rd class  \n**Name** : As the name suggests... Name of the passenger  \n**Sex** : Gender of the passenger  \n**Age** : Age of the passenger, in decimal if less than 1  \n**SibSp** : Number of siblings\/spouse with the passenger  \n**Parch** : Number of Parents\/Children with the passenger  \n**Ticket**: Ticket number of the passenger  \n**Fare** : Fare of the ticket  \n**Cabin**: Deck and Cabin alloted to the passenger  \n**Embarked** : Port of emabarktion","b0184b9b":"Columns Age, Cabin, Fare and Embarked have missing values."}}