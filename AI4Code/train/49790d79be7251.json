{"cell_type":{"9bdc1205":"code","f9a7d0ec":"code","e6eadbdb":"code","a3ab7236":"code","2fc5f58d":"code","e1bf85d5":"code","ad7c1035":"code","c1140b21":"code","8dc2c740":"code","21ad4af3":"code","3742db45":"code","729d7c35":"code","e2fa6d74":"code","5f10ce40":"code","52add3d2":"code","181515ed":"code","fcd64787":"code","b9932ac5":"code","de01317b":"code","f435ce46":"code","2484d929":"code","9be5b1c0":"code","fe23af69":"code","3d60a3bd":"code","13fb4bb8":"code","1cf0b60c":"code","8304554c":"code","cad4a3c6":"code","729d4656":"code","1b21e541":"code","65657616":"code","2c581551":"code","9c33be9b":"code","4aa78301":"code","b026bfce":"code","14c4d9de":"code","8132c74d":"code","8b220be1":"code","2667cd2a":"code","f2ddb9e2":"code","67839632":"code","53c9913d":"code","a066cf4c":"code","00ec7ecf":"code","d0615c82":"code","c5e6d9b5":"code","12f1a8d3":"code","2cd0ff92":"code","8937275a":"code","da4068fb":"code","07b67315":"code","7209e297":"code","cd01dbee":"code","549d28d4":"code","d504feaa":"code","12efbb95":"code","12a0a93f":"code","eec6ef8b":"code","c2473c66":"code","dd45b154":"code","b4417bff":"code","b51eaf07":"code","54915c54":"code","46bd2a8e":"code","e80a17eb":"markdown","22dda4c3":"markdown","3dcae197":"markdown","aa92d2be":"markdown","ca88b0c6":"markdown","ceda1929":"markdown","06de5661":"markdown","9fa33099":"markdown","63040a85":"markdown","1b84369a":"markdown","771ef781":"markdown","036d303e":"markdown"},"source":{"9bdc1205":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9a7d0ec":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","e6eadbdb":"# Importing all datasets\nchurn_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/churn_data.csv\")\nchurn_data.head()","a3ab7236":"customer_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/customer_data.csv\")\ncustomer_data.head()","2fc5f58d":"internet_data = pd.read_csv(\"\/kaggle\/input\/telecom-churn-data-sets\/internet_data.csv\")\ninternet_data.head()","e1bf85d5":"df_1=pd.merge(churn_data, customer_data, how='inner',on='customerID')","ad7c1035":"telecom=pd.merge(df_1,internet_data,how='inner',on='customerID')","c1140b21":"# Let's check the dataframe\ntelecom.head(5)","8dc2c740":"telecom.shape","21ad4af3":"telecom.describe()","3742db45":"telecom.info()","729d7c35":"#The varaible was imported as a string we need to convert it to float\ntelecom['TotalCharges']=pd.to_numeric(telecom['TotalCharges'],errors='coerce')","e2fa6d74":"telecom.info()","5f10ce40":"plt.figure(figsize=(20,40))\nplt.subplot(10,2,1)\nax = sns.distplot(telecom['tenure'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('Tenure (months)')\nplt.subplot(10,2,2)\nax = sns.countplot(x='PhoneService', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,3)\nax =sns.countplot(x='Contract', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,3)\nax =sns.countplot(x='Contract', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,4)\nax =sns.countplot(x='PaperlessBilling', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,5)\nax =sns.countplot(x='PaymentMethod', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,6)\nax =sns.countplot(x='Churn', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,7)\nax =sns.countplot(x='gender', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,8)\nax =sns.countplot(x='SeniorCitizen', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,9)\nax =sns.countplot(x='Partner', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,10)\nax =sns.countplot(x='Dependents', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,11)\nax =sns.countplot(x='MultipleLines', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,12)\nax =sns.countplot(x='InternetService', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,13)\nax =sns.countplot(x='OnlineSecurity', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,14)\nax =sns.countplot(x='OnlineBackup', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,15)\nax =sns.countplot(x='DeviceProtection', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,16)\nax =sns.countplot(x='TechSupport', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,17)\nax =sns.countplot(x='StreamingTV', data=telecom)\nax.set_ylabel('# of Customers')\n\nplt.subplot(10,2,18)\nax =sns.countplot(x='StreamingMovies', data=telecom)\nax.set_ylabel('# of Customers')\nplt.subplot(10,2,19)\nax = sns.distplot(telecom['MonthlyCharges'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('MonthlyCharges')\nplt.subplot(10,2,20)\nax = sns.distplot(telecom['TotalCharges'], hist=True, kde=False, \n             bins=int(180\/5), color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})\nax.set_ylabel('# of Customers')\nax.set_xlabel('TotalCharges');","52add3d2":"plt.figure(figsize=(25, 10))\nplt.subplot(1,3,1)\nsns.boxplot(x = 'tenure', y = 'Churn', data=telecom)\nplt.subplot(1,3,2)\nsns.boxplot(x = 'MonthlyCharges', y = 'Churn', data=telecom)\nplt.subplot(1,3,3)\nsns.boxplot(x = 'TotalCharges', y = 'Churn', data=telecom)\nplt.show()","181515ed":"# Converting some binary variables (Yes\/No) to 0\/1\nvarlist =  ['PhoneService', 'PaperlessBilling', 'Churn', 'Partner', 'Dependents']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\ntelecom[varlist] = telecom[varlist].apply(binary_map)","fcd64787":"# creating dummy varaibles\ndummy1 = pd.get_dummies(telecom[['Contract', 'PaymentMethod', 'gender', 'InternetService']], drop_first=True)\n\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom, dummy1], axis=1)","b9932ac5":"ml = pd.get_dummies(telecom['MultipleLines'], prefix='MultipleLines')\n# Dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1], axis=1)\n\n\nos = pd.get_dummies(telecom['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineBackup'.\nob = pd.get_dummies(telecom['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1], axis=1)\n\n# Creating dummy variables for the variable 'DeviceProtection'. \ndp = pd.get_dummies(telecom['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1], axis=1)\n\nts = pd.get_dummies(telecom['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingMovies'. \nsm = pd.get_dummies(telecom['StreamingMovies'], prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1], axis=1)","de01317b":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","f435ce46":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","2484d929":"num_telecom.describe(percentiles=[.25, .5, .75, .90, .95, .99])","9be5b1c0":"# checking for missing values\nround(100*(telecom.isnull().sum()\/len(telecom)),2)","fe23af69":"telecom.dropna(inplace=True)","3d60a3bd":"telecom = telecom.reset_index(drop=True)","13fb4bb8":"# creating the X and y varaibles\nX=telecom.drop(['Churn','customerID'],axis=1)","1cf0b60c":"y=telecom['Churn']","8304554c":"from sklearn.model_selection import train_test_split","cad4a3c6":"# creating the train and test split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","729d4656":"# Scaling the values \nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","1b21e541":"X_train[['tenure','MonthlyCharges','TotalCharges']]=scaler.fit_transform(X_train[['tenure','MonthlyCharges','TotalCharges']])","65657616":"X_test[['tenure','MonthlyCharges','TotalCharges']]=scaler.transform(X_test[['tenure','MonthlyCharges','TotalCharges']])","2c581551":"churn=(sum(telecom['Churn'])\/len(telecom['Churn'].index))*100\nchurn","9c33be9b":"# drawing the correlation \nimport matplotlib.pyplot as plt\nimport seaborn as sns","4aa78301":"plt.figure(figsize=(20,15))\nsns.heatmap(telecom.corr(),annot=True)","b026bfce":"plt.figure(figsize=(10,8))\ntelecom.corr()['Churn'].sort_values(ascending = False).plot(kind='bar');","14c4d9de":"# dropping the highly correlated dummy variables\nX_test = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                       'StreamingTV_No','StreamingMovies_No'], 1)\nX_train = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                         'StreamingTV_No','StreamingMovies_No'], 1)","8132c74d":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif.head()","8b220be1":"features_to_remove = vif.loc[vif['VIF'] >= 4.99,'Features'].values\nfeatures_to_remove = list(features_to_remove)\nprint(features_to_remove)","2667cd2a":"X_train = X_train.drop(columns=features_to_remove, axis = 1)\nX_train.head()","f2ddb9e2":"X_test = X_test.drop(columns=features_to_remove, axis = 1)\nX_test.head()","67839632":"from sklearn.svm import SVC\nmodel=SVC()","53c9913d":"svm_model=model.fit(X_train,y_train)","a066cf4c":"from sklearn.naive_bayes import GaussianNB\nmodel=GaussianNB()","00ec7ecf":"naivebayes_model=model.fit(X_train,y_train)","d0615c82":"from sklearn.tree import DecisionTreeClassifier\nmodel=DecisionTreeClassifier()","c5e6d9b5":"dt_model=model.fit(X_train,y_train)","12f1a8d3":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()","2cd0ff92":"rft_model=model.fit(X_train,y_train)","8937275a":"from sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier(n_estimators=125,max_depth=5)","da4068fb":"gbm_model=model.fit(X_train,y_train)","07b67315":"from xgboost import XGBRegressor","7209e297":"from xgboost import XGBClassifier\nmodel = XGBClassifier()","cd01dbee":"xgb_model=model.fit(X_train,y_train)","549d28d4":"# Evaluting model using precision_score, recall_score, accuracy_score,f1_score\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score,f1_score","d504feaa":"y_test_pred_svm=svm_model.predict(X_test)","12efbb95":"y_test_pred_naivebayes=naivebayes_model.predict(X_test)","12a0a93f":"y_test_pred_dt=dt_model.predict(X_test)","eec6ef8b":"y_test_pred_rft=rft_model.predict(X_test)","c2473c66":"y_test_pred_gbm=gbm_model.predict(X_test)","dd45b154":"y_test_pred_xgb=xgb_model.predict(X_test)","b4417bff":"print(\"SVM precision Score\", precision_score(y_test,y_test_pred_svm))\nprint(\"naivebayes precision Score\", precision_score(y_test,y_test_pred_naivebayes))\nprint(\"Decision Tree precision Score\", precision_score(y_test,y_test_pred_dt))\nprint(\"Random Forest precision Score\", precision_score(y_test,y_test_pred_rft))\nprint(\"GBM precision Score\", precision_score(y_test,y_test_pred_gbm))\nprint(\"XGB precision Score\", precision_score(y_test,y_test_pred_xgb))","b51eaf07":"print(\"SVM recall Score\", recall_score(y_test,y_test_pred_svm))\nprint(\"naivebayes recall Score\", recall_score(y_test,y_test_pred_naivebayes))\nprint(\"Decision Tree recall Score\", recall_score(y_test,y_test_pred_dt))\nprint(\"Random Forest recall Score\", recall_score(y_test,y_test_pred_rft))\nprint(\"GBM recall Score\", recall_score(y_test,y_test_pred_gbm))\nprint(\"XGB recall Score\", recall_score(y_test,y_test_pred_xgb))","54915c54":"print(\"SVM accuracy Score\", accuracy_score(y_test,y_test_pred_svm))\nprint(\"naivebayes accuracy Score\", accuracy_score(y_test,y_test_pred_naivebayes))\nprint(\"Decision Tree accuracy Score\", accuracy_score(y_test,y_test_pred_dt))\nprint(\"Random Forest accuracy Score\", accuracy_score(y_test,y_test_pred_rft))\nprint(\"GBM accuracy Score\", accuracy_score(y_test,y_test_pred_gbm))\nprint(\"XGB accuracy Score\", accuracy_score(y_test,y_test_pred_xgb))","46bd2a8e":"print(\"SVM F1 Score\", f1_score(y_test,y_test_pred_svm))\nprint(\"naivebayes F1 Score\", f1_score(y_test,y_test_pred_naivebayes))\nprint(\"Decision Tree F1 Score\", f1_score(y_test,y_test_pred_dt))\nprint(\"Random Forest F1 Score\", f1_score(y_test,y_test_pred_rft))\nprint(\"GBM F1 Score\", f1_score(y_test,y_test_pred_gbm))\nprint(\"XGB F1 Score\", f1_score(y_test,y_test_pred_xgb))","e80a17eb":"## Combining all data files into one consolidated dataframe","22dda4c3":"# EDA","3dcae197":"### Building RandomForest Model","aa92d2be":" ### Building XGBClassifier Model","ca88b0c6":"### Building Decision Tree Model","ceda1929":"### Building SVM Model","06de5661":"# Evaluating Model","9fa33099":"# Trying with Differnet Models to get better accuracy","63040a85":"### Building Naive Bayes Model","1b84369a":"# Importing and Merging Data","771ef781":"### Building GradientBoostingClassifier","036d303e":"# Test-Train Split and scaling"}}