{"cell_type":{"19564706":"code","142205c5":"code","54178b72":"code","5f779c94":"code","1e8486cb":"code","8ed4e7ee":"code","c4e4e3ad":"code","0d8c513d":"code","327c6312":"code","4244877e":"code","5b1a3cf7":"code","b369f34e":"code","64db08ae":"code","fbf7763c":"code","53c54b92":"code","6c8552e1":"code","7fd1fc45":"code","32ce2696":"code","38a9b830":"code","b1845f91":"code","f71a9056":"code","dd475172":"code","c701a8a6":"code","94bb6205":"code","0aee65ec":"code","86424081":"code","3c672e4d":"code","40d98284":"code","8e9720cb":"code","8fb23623":"code","350d661d":"code","8727975b":"code","c8802a54":"code","6e08e5fe":"code","0e858a54":"code","1e6eea66":"code","96de34db":"code","d14318aa":"code","124de212":"code","2fe6a2de":"code","e4aac018":"code","70f51ba5":"code","089a3f47":"code","0af80bdd":"code","2ef6b32c":"code","5e8ca1b2":"code","3d49c02f":"code","cbc07c3e":"code","56ad96e3":"code","c04354a7":"code","cec07018":"code","1bb6b408":"code","28b0e1a6":"code","43f47214":"code","689cfc1d":"code","aeaad3f1":"code","62036240":"code","35c5a9c4":"code","37c16d5d":"markdown","52725de5":"markdown","46b37586":"markdown","cf3e8aa7":"markdown","140ba734":"markdown","bfa06265":"markdown","ea6e147f":"markdown","50b6396d":"markdown","b6c15986":"markdown","930fc709":"markdown","e1bf6253":"markdown","4f9414b2":"markdown","6b10ad70":"markdown","fd87b89f":"markdown","3554f6f0":"markdown","6477ab7e":"markdown","d1436f75":"markdown","7b14954b":"markdown","cc5508dc":"markdown","c04fff50":"markdown","40076ed8":"markdown","788b37b7":"markdown","392460a4":"markdown","be633f5e":"markdown","05bbe59a":"markdown","66670789":"markdown","71167ad7":"markdown","b50fae46":"markdown"},"source":{"19564706":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","142205c5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","54178b72":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","5f779c94":"df_train.head()","1e8486cb":"df_train.columns","8ed4e7ee":"df_train.info()","c4e4e3ad":"df_train.describe()","0d8c513d":"df_train.isnull().sum().sort_values(ascending =False).head(20)","327c6312":"df_train.isnull().sum().sort_values(ascending =False).head(20)\/len(df_train)","4244877e":"df_train.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage',],axis=1,inplace=True)","5b1a3cf7":"import random\nmissing_values = df_train.columns[df_train.isna().any()].to_list()\nfor each in missing_values:\n    if (df_train[each].dtypes =='float64'):\n        minimum= int(df_train[each].quantile(0.25))\n        maximum= int(df_train[each].quantile(0.75))\n        A=df_train[df_train[each].isnull()].index.tolist()\n        for i in A:\n            df_train.loc[i,each]=random.randint(minimum,maximum)\n        df_train[each]=pd.to_numeric(df_train[each])\n   \n\n    elif(df_train[each].dtypes == 'object'):\n        if ('True' in str(df_train[each].str.contains('No').unique().tolist())):\n            df_train[each].fillna('No',inplace=True)\n        elif('True' in str(df_train[each].str.contains('None').unique().tolist())):\n            df_train[each].fillna('None',inplace=True)\n        elif('True' in str(df_train[each].str.contains('Unf').unique().tolist())):\n            df_train[each].fillna('Unf',inplace=True)\n        else:\n            A=df_train[df_train[each].isnull()].index.tolist()\n            unique = df_train[each].unique().tolist()\n            unique=pd.Series(unique).dropna().tolist()\n            for i in A:\n                df_train.loc[i,each]=random.choice(unique)\n\n\nmissing_values = df_test.columns[df_test.isna().any()].to_list()\nfor each in missing_values:\n    if (df_test[each].dtypes =='float64'):\n        minimum= int(df_test[each].quantile(0.25))\n        maximum= int(df_test[each].quantile(0.75))\n        A=df_test[df_test[each].isnull()].index.tolist()\n        for i in A:\n            df_test.loc[i,each]=random.randint(minimum,maximum)\n        df_test[each]=pd.to_numeric(df_test[each])\n   \n\n    elif(df_test[each].dtypes == 'object'):\n        if ('True' in str(df_test[each].str.contains('No').unique().tolist())):\n            df_test[each].fillna('No',inplace=True)\n        elif('True' in str(df_test[each].str.contains('None').unique().tolist())):\n            df_test[each].fillna('None',inplace=True)\n        elif('True' in str(df_test[each].str.contains('Unf').unique().tolist())):\n            df_test[each].fillna('Unf',inplace=True)\n        else:\n            A=df_test[df_test[each].isnull()].index.tolist()\n            unique = df_test[each].unique().tolist()\n            unique=pd.Series(unique).dropna().tolist()\n            for i in A:\n                df_test.loc[i,each]=random.choice(unique)\n","b369f34e":"df_train.drop(['Id'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)","64db08ae":"plt.figure(figsize=(25,25))\nsns.heatmap(df_train.corr(),annot=True,cmap='coolwarm')","fbf7763c":"plt.figure(figsize=(10,5))\ndf_train.corr()['SalePrice'].sort_values().drop('SalePrice').plot(kind='bar')","53c54b92":"fig = plt.figure(figsize=(15,10));   \nax1 = fig.add_subplot(3,4,1);  \nax2 = fig.add_subplot(3,4,2);\nax3 = fig.add_subplot(3,4,3);  \nax4 = fig.add_subplot(3,4,4);\nax5 = fig.add_subplot(3,4,5);  \nax6 = fig.add_subplot(3,4,6);\nax7 = fig.add_subplot(3,4,7);  \nax8 = fig.add_subplot(3,4,8);\nax9 = fig.add_subplot(3,4,9);  \nax10 = fig.add_subplot(3,4,10);\nax11 = fig.add_subplot(3,4,11);  \nax12 = fig.add_subplot(3,4,12);\n\nsns.boxplot(\"OverallQual\", \"SalePrice\", data=df_train,ax=ax1)\nsns.scatterplot(\"GrLivArea\", \"SalePrice\", data=df_train, ax=ax2)\nsns.boxplot(\"GarageCars\", \"SalePrice\", data=df_train,ax=ax3)\nsns.scatterplot(\"GarageArea\", \"SalePrice\", data=df_train, ax=ax4)\nsns.scatterplot(\"TotalBsmtSF\", \"SalePrice\", data=df_train,ax=ax5)\nsns.scatterplot(\"1stFlrSF\", \"SalePrice\", data=df_train, ax=ax6)\nsns.boxplot(\"FullBath\", \"SalePrice\", data=df_train,ax=ax7)\nsns.boxplot(\"TotRmsAbvGrd\", \"SalePrice\", data=df_train, ax=ax8)\nsns.scatterplot(\"YearBuilt\", \"SalePrice\", data=df_train,ax=ax9)\nsns.scatterplot(\"YearRemodAdd\", \"SalePrice\", data=df_train, ax=ax10)\nsns.boxplot(\"MasVnrType\", \"SalePrice\", data=df_train,ax=ax11)\nsns.boxplot(\"Fireplaces\", \"SalePrice\", data=df_train, ax=ax12)\nplt.tight_layout()","6c8552e1":"fig = plt.figure(figsize=(15,10));   \nax1 = fig.add_subplot(2,1,1);  \nax2 = fig.add_subplot(2,1,2);\nsns.distplot(df_train['YearBuilt'],bins=50,color='black',ax=ax1)\nsns.distplot(df_train['YearRemodAdd'],bins=50,color='black',ax=ax2)","7fd1fc45":"plt.figure(figsize=(12,8))\nsns.violinplot(x='TotRmsAbvGrd',y='GrLivArea',data=df_train)","32ce2696":"plt.figure(figsize=(12,8))\nsns.boxplot(x='FullBath',y='2ndFlrSF',data=df_train,hue='HalfBath',palette=\"BuGn_r\")","38a9b830":"plt.figure(figsize=(10,5))\ndf_train.corr()['OverallQual'].sort_values().drop(['OverallQual','SalePrice']).plot(kind='bar')","b1845f91":"catogorical_features_ = np.array([df_train.columns[df_train.dtypes == 'object'].to_list()])\ncatogorical_features_","f71a9056":"df_train['Utilities'].value_counts()","dd475172":"# All the records in utilities are mostly AllPub \ndf_train.drop('Utilities',axis=1,inplace=True)\ndf_test.drop('Utilities',axis=1,inplace=True)","c701a8a6":"fig = plt.figure(figsize=(20,15));   \nax1 = fig.add_subplot(4,4,1);  \nax2 = fig.add_subplot(4,4,2);\nax3 = fig.add_subplot(4,4,3);  \nax4 = fig.add_subplot(4,4,4);\nax5 = fig.add_subplot(4,4,5);  \nax6 = fig.add_subplot(4,4,6);\nax7 = fig.add_subplot(4,4,7);  \nax8 = fig.add_subplot(4,4,8);\nax9 = fig.add_subplot(4,4,9);  \nax10 = fig.add_subplot(4,4,10);\nax11 = fig.add_subplot(4,4,11);  \nax12 = fig.add_subplot(4,4,12);\nax13 = fig.add_subplot(4,4,13);  \nax14 = fig.add_subplot(4,4,14);\nax15 = fig.add_subplot(4,4,15);  \nax16 = fig.add_subplot(4,4,16);\n\nsns.boxplot(x=\"LotShape\",y= \"SalePrice\", data=df_train,ax=ax1)\nsns.boxplot(\"SaleCondition\", \"SalePrice\", data=df_train, ax=ax2)\nsns.boxplot(\"LandSlope\", \"SalePrice\", data=df_train,ax=ax3)\nsns.boxplot(\"Condition1\", \"SalePrice\", data=df_train, ax=ax4)\nsns.boxplot(\"BldgType\", \"SalePrice\", data=df_train,ax=ax5)\nsns.boxplot(\"HouseStyle\", \"SalePrice\", data=df_train, ax=ax6)\nsns.boxplot(\"RoofStyle\", \"SalePrice\", data=df_train,ax=ax7)\nsns.boxplot(\"Exterior1st\", \"SalePrice\", data=df_train, ax=ax8)\nsns.boxplot(\"Exterior2nd\", \"SalePrice\", data=df_train,ax=ax9)\nsns.boxplot(\"ExterQual\", \"SalePrice\", data=df_train, ax=ax10)\nsns.boxplot(\"ExterCond\", \"SalePrice\", data=df_train,ax=ax11)\nsns.boxplot(\"Foundation\", \"SalePrice\", data=df_train, ax=ax12)\nsns.boxplot(\"HeatingQC\", \"SalePrice\", data=df_train,ax=ax13)\nsns.boxplot(\"CentralAir\", \"SalePrice\", data=df_train, ax=ax14)\nsns.boxplot(\"KitchenQual\", \"SalePrice\", data=df_train,ax=ax15)\nsns.boxplot(\"SaleType\", \"SalePrice\", data=df_train, ax=ax16)\nplt.tight_layout()","94bb6205":"df_train['Foundation'].value_counts()","0aee65ec":"fig = plt.figure(figsize=(20,10));   \nax1 = fig.add_subplot(1,2,1);  \nax2 = fig.add_subplot(1,2,2);\nsns.boxplot(\"Exterior1st\", \"SalePrice\", data=df_train, ax=ax1)\nsns.boxplot(\"Exterior2nd\", \"SalePrice\", data=df_train,ax=ax2)\nplt.tight_layout()","86424081":"fig = plt.figure(figsize=(15,10));   \nax1 = fig.add_subplot(2,1,1);  \nax2 = fig.add_subplot(2,1,2);\nsns.distplot(df_train['1stFlrSF'],bins=30,color='black',ax=ax1)\nsns.distplot(df_train['2ndFlrSF'],bins=10,color='black',ax=ax2)","3c672e4d":"catogorical_features_ = np.delete(catogorical_features_,np.where(catogorical_features_=='Utilities'))","40d98284":"test_match=[]\nfor i,feature in enumerate(catogorical_features_): \n    test_match.append( (feature,(df_train[feature].nunique()  -  df_test[feature].nunique())))\n    if (df_train[feature].nunique()  -  df_test[feature].nunique()) != 0:\n        df_train.drop(feature,axis=1,inplace=True)\n        df_test.drop(feature,axis=1,inplace=True)","8e9720cb":"print(test_match)","8fb23623":"catogorical_features_ = np.array([df_train.columns[df_train.dtypes == 'object'].to_list()])\ndummies = []\nconcat_dummies=[]\nfor i,feature in enumerate(catogorical_features_[0]):\n    dummies.append(pd.get_dummies(df_train[feature],drop_first=True))\n    df_train = pd.concat([df_train,dummies[i]],axis=1) ","350d661d":"df_train.drop(['MSZoning', 'Street', 'LotShape', 'LandContour','LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n               'BldgType', 'RoofStyle','MasVnrType', 'ExterQual','Foundation',  'HeatingQC', 'CentralAir',\n         'KitchenQual', 'Functional', 'GarageFinish','PavedDrive', 'SaleType', 'SaleCondition','ExterCond',\n               'GarageCond',\n               'GarageType','GarageYrBlt','BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','BsmtQual'],\n              axis=1,inplace=True)","8727975b":"catogorical_features_ = np.array([df_test.columns[df_test.dtypes == 'object'].to_list()])\ndummies = []\nconcat_dummies=[]\nfor i,feature in enumerate(catogorical_features_[0]):\n    dummies.append(pd.get_dummies(df_test[feature],drop_first=True))\n    df_test = pd.concat([df_test,dummies[i]],axis=1) ","c8802a54":"df_test.drop(['MSZoning', 'Street', 'LotShape', 'LandContour','LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n               'BldgType', 'RoofStyle','MasVnrType', 'ExterQual','Foundation',  'HeatingQC', 'CentralAir',\n         'KitchenQual', 'Functional', 'GarageFinish','PavedDrive', 'SaleType', 'SaleCondition','ExterCond',\n             'GarageCond','GarageType','GarageYrBlt','BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','BsmtQual'],axis=1,inplace=True)","6e08e5fe":"X_train = np.array(df_train.drop('SalePrice',axis=1))\ny_train = np.array(df_train['SalePrice'])\nX_test = np.array(df_test)","0e858a54":"print('Shape of X_train {} \\nShape of y_test {}\\nShape of X_test {}'.format(X_train.shape,y_train.shape,X_test.shape))","1e6eea66":"from sklearn.preprocessing import MinMaxScaler\nmms = MinMaxScaler()\nX_train = mms.fit_transform(X_train)\nX_test = mms.transform(X_test)","96de34db":"y_train = mms.fit_transform(y_train.reshape(-1,1))","d14318aa":"from keras.models import Sequential\nfrom keras.layers import Dense,Dropout","124de212":"regressor = Sequential()\nregressor.add(Dense(units=512,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=256,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=256,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=128,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=1,activation='relu',kernel_initializer='uniform'))","2fe6a2de":"regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['mean_squared_error'])","e4aac018":"regressor.fit(X_train,y_train,epochs=100,batch_size=50)","70f51ba5":"losses = regressor.history.history\nlosses = np.array(pd.DataFrame(losses))\nplt.plot(losses)\nplt.xlabel('Epochs')\nplt.ylabel('loss')","089a3f47":"'''\ndef build_classifier(optimizer,units1,units2,units3,units4):\n    regressor = Sequential()\n    regressor.add(Dense(units=units1,activation='relu',kernel_initializer='uniform'))\n    regressor.add(Dense(units=units2,activation='relu',kernel_initializer='uniform'))\n    regressor.add(Dense(units=units3,activation='relu',kernel_initializer='uniform'))\n    regressor.add(Dense(units=units4,activation='relu',kernel_initializer='uniform'))\n    regressor.add(Dense(units=1,activation='relu',kernel_initializer='uniform'))\n    regressor.compile(optimizer=optimizer,loss='mean_squared_error',metrics=['mean_squared_error'])\n    return regressor\n\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nregressor = KerasRegressor(build_fn=build_classifier)\nparameters = {'batch_size':[10,15,25,32],\n             'epochs':[100,300,500],\n             'optimizer':['adam','rmsprop'],\n             'units1':[512,256],\n             'units2':[256,128],\n             'units3':[256,128],\n             'units4':[256,128,64]}\n\ngrid_search = GridSearchCV(estimator = regressor,\n                           param_grid = parameters,\n                           scoring = 'neg_mean_squared_error',\n                           cv = 3)\ngrid_search = grid_search.fit(X_train, y_train)\n'''\n","0af80bdd":"'''print(grid_search.best_score_)\nprint('\\n')\nprint(grid_search.best_params_)'''","2ef6b32c":"Best = {'batch_size': 15, 'epochs': 500, 'optimizer': 'adam', 'units1': 512, 'units2': 128, 'units3': 128, 'units4': 64}","5e8ca1b2":"#from keras.models import load_model\n#regressor.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'\n#del model  # deletes the existing model\n# returns a compiled model\n# identical to the previous one\n#regressor1 = load_model('my_model.h5')","3d49c02f":"regressor = Sequential()\nregressor.add(Dense(units=512,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=256,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=256,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=128,activation='relu',kernel_initializer='uniform'))\nregressor.add(Dense(units=1,activation='relu',kernel_initializer='uniform'))\nregressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['mean_squared_error'])","cbc07c3e":"regressor.fit(X_train,y_train,epochs=500,batch_size=15)","56ad96e3":"losses = regressor.history.history\nlosses = np.array(pd.DataFrame(losses))\nplt.plot(losses)\nplt.xlabel('Epochs')\nplt.ylabel('loss')","c04354a7":"regressor.summary()","cec07018":"y_pred = regressor.predict(X_test) \ny_pred_original = mms.inverse_transform(y_pred.reshape(-1,1))\ny_pred_original = y_pred_original.tolist()\ny_pred_original = [pred for i in y_pred_original for pred in i]","1bb6b408":"test_set =pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.DataFrame({'Id': test_set['Id'],'SalePrice': y_pred_original})","28b0e1a6":"#submission.to_csv('submission.csv', index=False)","43f47214":"from sklearn.ensemble import RandomForestRegressor\nregressor1 = RandomForestRegressor(n_estimators= 100)\nregressor1.fit(X_train,y_train)","689cfc1d":"y_pred1 = regressor1.predict(X_test) \ny_pred_original1 = mms.inverse_transform(y_pred1.reshape(-1,1))\ny_pred_original1 = y_pred_original1.tolist()\ny_pred_original1 = [pred for i in y_pred_original1 for pred in i]","aeaad3f1":"y_pred_final=[]\nfor i in range(0,1459):\n    y_pred_final.append((y_pred_original[i]*0.5)+(y_pred_original1[i]*0.5))","62036240":"submission = pd.DataFrame({'Id': test_set['Id'],'SalePrice': y_pred_final})","35c5a9c4":"submission.to_csv('submission.csv', index=False)","37c16d5d":"Now checking the correlation between continuous parameters and plotting the heatmap","52725de5":"## Prediction on test set","46b37586":"# Exploratory data analysis","cf3e8aa7":"1. **Furthur Imrovement on our submission**\n\nTraining more regressors and combining it with previous one's\n\nTake more missing values into consideration\n","140ba734":"For furthur fine tuning add dropout layers and more layers to the model","bfa06265":"Treatment of left parameters having missing values","ea6e147f":"For continous parameters, the most correlated values to Sale Price are given in the above plot","50b6396d":"## Housing price prediction using ANN","b6c15986":"Number of half baths in a house is independent of full baths. As, mostly in all houses the number of half baths is 1","930fc709":"Processing missing values","e1bf6253":"- 1st floor sqaure feet has a normal distribution\n- Houses with 2nd floor has around 0 to 250 square feet of area with some houses of range of 500 to 1000 square feet","4f9414b2":"# Artificial Neural Network","6b10ad70":"Removing the parameters with missing data ","fd87b89f":"#### Analysis on catagorical features with dtype object","3554f6f0":"#### Analysis from the above plot\nOverall Quality\n- SalePrice follows a linear relation with Overall quality of the house(as obvious)\n- When OverallQual = 10, the range of SalePrice is between 350,000 to 500,000\n\nGarage Cars\n- Evidenty, if the house has size of garage for accomodating 3 cars, the selling price will be more  \n- There are only 5 houses having 4 car space garage, so we can't say much about it, but the prices are lower than 3 car space houses\n\nFullBath, Total Rooms above ground and Fireplaces\n- More number of these parameter in the house, more is the selling price of the house\n- When the parameter starts to increase the variation in SalePrice also increases because it starts depending on other paramters more to make an accurate prediction.  \n\nMasVnrType\n- Masonry veneer Stone type has more selling price followed by brick face and common brick\n\nScatter Plots\n- all the scatterplots including GRLivArea, GarageArea, 1stFlrSF and TotalBsmtSF follows a linear trend with Sale Price\n\n","6477ab7e":"Lotshape\n- Houses with IR3 type of lots have maximum SalePrice\n\nSaleConditions\n- It is an important attribute as vatiation in SalePrice is more in it with the change in the parameters.\n- Houses with partial salescondition has maximum sales.\n\nLandSlope does not play an integral part in estimation of SalePrice\n\nCondition 1\n- So people prefer to pay more for the lots within the range of 200' to the north-south rail-road. \n- People prefer to pay less for the lots adjacent to arterial street.\n\nHouseStyle\n- 2 story and 1 story housing styles have better sales price than the other ones.\n- The other housing styles follow the constant trends for the sales price.\n\nExterQual\n- People are willing to pay more for the houses having excellent external quality.\n\nSaleType\n- The salesprice of the houses which are freshly constructed are maximum. ","d1436f75":"Percentage of missing data","7b14954b":"Piyush Singla Kaggle link -> https:\/\/www.kaggle.com\/mpiyu20\/account\nNikhil Singla Kaggle link -> https:\/\/www.kaggle.com\/nikhilsharma4","cc5508dc":"Removing the Id column","c04fff50":"## Tuning the ANN","40076ed8":"#### Converting catagorical features into dummy variable using pandas get dummies method","788b37b7":"Most of the houses were build in the 2000's and big chunk in 1950's and 1960's. Most of the houses were remodelled\/rebuilt in 1950","392460a4":"Importing the dataset","be633f5e":"#### Feature Scaling","05bbe59a":"## Training the ANN on best parameters","66670789":"Above plot define the parameters on which the overall quality of the house depends, that are Garage living area, Garage cars, year it was built and No. of full baths","71167ad7":"Commenting the code for timing constraint","b50fae46":"Now, analysing some most correlated parameters using Seaborn "}}