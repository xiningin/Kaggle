{"cell_type":{"15e76058":"code","bca5fa89":"code","d98567ec":"code","39756050":"code","bef9190d":"code","e911e0e4":"code","de02eeb2":"code","01ef6b9a":"code","6a7b8e67":"code","a931b858":"code","f5ee28a2":"code","4911a7cd":"code","52544d08":"code","78a0f041":"code","9fb0cd40":"code","25975afd":"code","3f4729f2":"code","353cc35f":"code","f5730cba":"code","96841174":"code","2f57938d":"markdown","b3b97d0b":"markdown","c9d71dd9":"markdown","85aa95e7":"markdown","3d3c7b6f":"markdown","efc74ba1":"markdown","118f29eb":"markdown","40cf4e71":"markdown","3139c89b":"markdown","31671526":"markdown","10d80df9":"markdown"},"source":{"15e76058":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np","bca5fa89":"from pathlib import Path\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))","d98567ec":"def plot_one(task, ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(task, axs[0,i],i,'train','input')\n        plot_one(task, axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(task, axs[0],0,'test','input')\n        plot_one(task, axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(task, axs[0,i],i,'test','input')\n            plot_one(task, axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() ","39756050":"tasks_input_shape_consistent = []\ntasks_output_shape_consistent = []\ntasks_both_shape_consistent = []\ntasks_input_and_output_same_shape = []\ntasks_others = []\n\nfor i, filename in enumerate(training_tasks):\n    task_file = str(training_path \/ filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        \n    input_shapes = [np.array(t[\"input\"]).shape for t in task[\"train\"]]\n    output_shapes = [np.array(t[\"output\"]).shape for t in task[\"train\"]]\n    is_input_shape_consistent = len(list(set(input_shapes))) == 1\n    is_output_shape_consistent = len(list(set(output_shapes))) == 1\n    if is_input_shape_consistent:\n        tasks_input_shape_consistent.append(task_file)\n    if is_output_shape_consistent:\n        tasks_output_shape_consistent.append(task_file)\n    if is_input_shape_consistent and is_output_shape_consistent:\n        tasks_both_shape_consistent.append(task_file)\n        \n    is_input_and_output_same_shape = all([shape_i == shape_o for shape_i, shape_o in zip(input_shapes, output_shapes)])\n    if is_input_and_output_same_shape:\n        tasks_input_and_output_same_shape.append(task_file)\n        \n    if not (is_input_shape_consistent or is_output_shape_consistent or is_input_and_output_same_shape):\n        tasks_others.append(task_file)\n\n        \nfor i, filename in enumerate(evaluation_tasks):\n    task_file = str(evaluation_path \/ filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        \n    input_shapes = [np.array(t[\"input\"]).shape for t in task[\"train\"]]\n    output_shapes = [np.array(t[\"output\"]).shape for t in task[\"train\"]]\n    is_input_shape_consistent = len(list(set(input_shapes))) == 1\n    is_output_shape_consistent = len(list(set(output_shapes))) == 1\n    if is_input_shape_consistent:\n        tasks_input_shape_consistent.append(task_file)\n    if is_output_shape_consistent:\n        tasks_output_shape_consistent.append(task_file)\n    if is_input_shape_consistent and is_output_shape_consistent:\n        tasks_both_shape_consistent.append(task_file)\n        \n    is_input_and_output_same_shape = all([shape_i == shape_o for shape_i, shape_o in zip(input_shapes, output_shapes)])\n    if is_input_and_output_same_shape:\n        tasks_input_and_output_same_shape.append(task_file)\n        \n    if not (is_input_shape_consistent or is_output_shape_consistent or is_input_and_output_same_shape):\n        tasks_others.append(task_file)","bef9190d":"print(\"all tasks:                   {:4d}\".format(len(training_tasks)))\nprint(\"input shape consistent:      {:4d}\".format(len(tasks_input_shape_consistent)))\nprint(\"output shape consistent:     {:4d}\".format(len(tasks_output_shape_consistent)))\nprint(\"both shape consistent:       {:4d}\".format(len(tasks_both_shape_consistent)))\nprint(\"input.shape == output.shape: {:4d}\".format(len(tasks_input_and_output_same_shape)))\nprint(\"others:                      {:4d}\".format(len(tasks_others)))","e911e0e4":"tasks_input_shape_consistent == tasks_output_shape_consistent","de02eeb2":"all([x == y for x, y in zip(tasks_input_shape_consistent, tasks_output_shape_consistent)])","01ef6b9a":"tasks_input_consistent_output_inconsistent = set(tasks_input_shape_consistent) - set(tasks_output_shape_consistent)\ntasks_input_inconsistent_output_consistent = set(tasks_output_shape_consistent) - set(tasks_input_shape_consistent)\n\nprint(\"only input shape consistent:   {:4d}\".format(len(tasks_input_consistent_output_inconsistent)))\nprint(\"only output shape consistent:  {:4d}\".format(len(tasks_input_inconsistent_output_consistent)))","6a7b8e67":"for i, filename in enumerate(list(tasks_input_consistent_output_inconsistent)[:5]):\n    task_file = str(filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    \n    plot_task(task)","a931b858":"for i, filename in enumerate(list(tasks_input_inconsistent_output_consistent)[:5]):\n    task_file = str(filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    \n    plot_task(task)","f5ee28a2":"for i, filename in enumerate(list(tasks_others)[:10]):\n    task_file = str(filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    \n    plot_task(task)","4911a7cd":"task_file = str(training_path \/ tasks_others[1])\n\nwith open(task_file, 'r') as f:\n    task = json.load(f)\n\nplot_task(task)","52544d08":"task_file = str(training_path \/ tasks_others[3])\n\nwith open(task_file, 'r') as f:\n    task = json.load(f)\n\nplot_task(task)","78a0f041":"tasks_shape_inconsitent = tasks_input_consistent_output_inconsistent | tasks_input_inconsistent_output_consistent | set(tasks_others)\n\nprint(\"only input shape consistent:         {:4d}\".format(len(tasks_input_consistent_output_inconsistent)))\nprint(\"only output shape consistent:        {:4d}\".format(len(tasks_input_inconsistent_output_consistent)))\nprint(\"both input and output inconsistent:  {:4d}\".format(len(tasks_others)))\nprint(\"----\")\nprint(\"union of those three:                {:4d}\".format(len(tasks_shape_inconsitent)))","9fb0cd40":"tasks_height_larger = set()\ntasks_width_larger = set()\ntasks_height_smaller = set()\ntasks_width_smaller = set()\ntasks_height_same = set()\ntasks_width_same = set()\ntasks_height_larger_or_same = set()\ntasks_width_larger_or_same = set()\ntasks_height_smaller_or_same = set()\ntasks_width_smaller_or_same = set()\n\nfor i, t in enumerate(tasks_shape_inconsitent):\n    task_file = str(training_path \/ t)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        \n    input_shapes = [np.array(t[\"input\"]).shape for t in task[\"train\"]]\n    output_shapes = [np.array(t[\"output\"]).shape for t in task[\"train\"]]\n\n    if all([i[0] < o[0] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_height_larger.add(t)\n    if all([i[1] < o[1] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_width_larger.add(t) \n    if all([i[0] > o[0] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_height_smaller.add(t)\n    if all([i[1] > o[1] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_width_smaller.add(t)\n    if all([i[0] == o[0] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_height_same.add(t)\n    if all([i[1] == o[1] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_width_same.add(t)\n    if all([i[0] <= o[0] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_height_larger_or_same.add(t)\n    if all([i[1] <= o[1] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_width_larger_or_same.add(t) \n    if all([i[0] >= o[0] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_height_smaller_or_same.add(t)\n    if all([i[1] >= o[1] for i, o in zip(input_shapes, output_shapes)]):\n        tasks_width_smaller_or_same.add(t)","25975afd":"tasks_large_small_consitent = tasks_height_larger | tasks_width_larger | tasks_height_smaller | tasks_width_smaller | tasks_height_same | tasks_width_same\nprint(len(tasks_large_small_consitent))","3f4729f2":"tasks_large_small_inconsitent = tasks_shape_inconsitent - (tasks_height_larger | tasks_width_larger | tasks_height_smaller | tasks_width_smaller | tasks_height_same | tasks_width_same)\nfor i, filename in enumerate(tasks_large_small_inconsitent):\n    task_file = str(training_path \/ filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    \n    plot_task(task)","353cc35f":"tasks_large_small_or_same_consitent = tasks_height_larger_or_same | tasks_width_larger_or_same | tasks_height_smaller_or_same | tasks_width_smaller_or_same\nprint(len(tasks_large_small_or_same_consitent))","f5730cba":"tasks_smaller_one_fits_in_larger_one = set()\n\nfor i, t in enumerate(tasks_shape_inconsitent):\n    task_file = str(training_path \/ t)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        \n    input_shapes = [np.array(t[\"input\"]).shape for t in task[\"train\"]]\n    output_shapes = [np.array(t[\"output\"]).shape for t in task[\"train\"]]\n        \n    larger_one_shapes = [i if i[0] * i[1] >= o[0] * o[1] else o for i, o in zip(input_shapes, output_shapes)]\n    smaller_one_shapes = [i if i[0] * i[1] < o[0] * o[1] else o for i, o in zip(input_shapes, output_shapes)]\n    \n    if all([l[0] >= s[0] and l[1] >= s[1] for l, s in zip(larger_one_shapes, smaller_one_shapes)]):\n        tasks_smaller_one_fits_in_larger_one.add(t)\n\nlen(tasks_smaller_one_fits_in_larger_one)","96841174":"for i, filename in enumerate(tasks_shape_inconsitent - tasks_smaller_one_fits_in_larger_one):\n    task_file = str(training_path \/ filename)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    \n    plot_task(task)","2f57938d":"Some tasks involve tiling and repeating:","b3b97d0b":"forked from: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\nLooking into shapes of inputs and outputs.","c9d71dd9":"Other tasks are \"Find-n-clip\":","85aa95e7":"## Larger or smaller\n\nAs you see, there are many \"find-n-clip\" tasks that might generate smaller outputs than input.\n\nIs it possible to determine output shape from input?\n\nLet's check.","3d3c7b6f":"Many \"find-n-crop\" tasks again. Some tasks are hard even for me!\n\nlet's check \"tasks_others\": both input and output shapes are inconsistent:","efc74ba1":"`len(tasks_large_small_consitent) == 148` is smaller than `len(tasks_shape_inconsitent) == 154`. Let's look into the difference:","118f29eb":"## Shape consistency\n\nDoes the shapes of inputs and outputs change?\nIf so, does the shape of input and output match?\n\nLet's check 'em!","40cf4e71":"As expected, some tasks have consistent shapes, others not.","3139c89b":"Many of those look related to finding something and cropping it.\n\nLet's look into tasks like \"output shapes are consitent but input shapes are not\"","31671526":"What? Are there cases like \"input shapes are consitent but output shapes are not\"?\n\nLet's see some of those:","10d80df9":"In some sompression tasks, direction for compression seems random.\n\nWell, how about this?"}}