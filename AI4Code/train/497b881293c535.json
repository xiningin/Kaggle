{"cell_type":{"4b638d3c":"code","78890859":"code","1b5fa4f4":"code","09584cc6":"code","c835209e":"code","58429e53":"code","d6e6ae2b":"code","2d867811":"code","26d5a52d":"code","816c9d7f":"code","f8b16dc1":"code","4bd09e81":"code","064fef55":"code","45db8798":"code","90ced091":"code","b3116a68":"code","6b2300ca":"code","5f04f1b0":"code","728726e5":"code","81fc4fad":"code","fd542c0c":"code","ef986296":"code","4c54feb9":"code","8ca32340":"code","d6b64900":"code","d0ea8417":"code","42b42c75":"code","7eebe50b":"code","138051c7":"code","6b9206ae":"code","e09892fa":"code","8e9db03f":"code","ef2a18d0":"code","4f0b2393":"code","e92f3ea3":"code","a8fb0601":"code","44865975":"code","c82b7bd6":"markdown","842cc86c":"markdown","34387629":"markdown"},"source":{"4b638d3c":"import pandas as pd\ncombats = pd.read_csv('..\/input\/combats.csv')\ncombats.head(3)","78890859":"pokemon = pd.read_csv('..\/input\/pokemon.csv')\npokemon_266_298 = pokemon[pokemon['#'].isin([266, 298])]\npokemon_266_298","1b5fa4f4":"names_dict = dict(zip(pokemon['#'], pokemon['Name']))\ncols = [\"First_pokemon\",\"Second_pokemon\",\"Winner\"]\ncombats_name = combats[cols].replace(names_dict)\ncombats_name.head(3)","09584cc6":"pokemon[\"stats_sum\"] = pokemon[\"HP\"] + pokemon[\"Attack\"] + pokemon[\"Defense\"] + pokemon[\"Sp. Atk\"] + pokemon[\"Sp. Def\"] + pokemon[\"Speed\"]\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint(pokemon[\"stats_sum\"].describe())\nsns.distplot(pokemon[\"stats_sum\"])\nplt.show()\n\n#G\u00dc\u00c7LER\u0130 + ATAKLARI + DEFANSLARNI HIZ ATAKLARI VE HIZ DEFASLARINI TOPLADIK VE BUNLARIN GRAF\u011e\u0130N\u0130 OLU\u015eTURDUK ","c835209e":"stats_sum_dict = dict(zip(pokemon['#'], pokemon['stats_sum']))\ncombats_stats_sum = combats[cols].replace(stats_sum_dict)\ndiff_stats_sum = abs(combats_stats_sum[\"First_pokemon\"]-combats_stats_sum[\"Second_pokemon\"])\nprint(diff_stats_sum.describe())\nsns.distplot(diff_stats_sum)\nplt.xlabel(\"diff_stats_sum\")\nplt.show()\n\n\n#TOPLAMLARIMIZIN ORALNLARINI ALARAK TEKRAR GRAF\u0130\u011e\u0130M\u0130ZE \u015eEK\u0130L VERD\u0130K ","58429e53":"combats_stats_sum[\"Loser\"] = combats_stats_sum.apply(lambda x: x[\"First_pokemon\"] if x[\"First_pokemon\"] !=  x[\"Winner\"] else x[\"Second_pokemon\"], axis = 1)\ndiff_win_lose_stats = combats_stats_sum[\"Winner\"] - combats_stats_sum[\"Loser\"]\nprint(diff_win_lose_stats.describe())\nsns.distplot(diff_win_lose_stats)\nplt.xlabel(\"diff_win_lose_stats\")\nplt.show()\n\n# KAZANMA \u0130STAT\u0130ST\u0130KLER\u0130M\u0130Z\u0130N DE GRAF\u0130\u011e\u0130N\u0130 \u00c7IKARDIK ","d6e6ae2b":"stats_sum_dict_re = dict(zip(pokemon['stats_sum'], pokemon['#']))\ncombats_stats_sum[\"diff\"] = diff_win_lose_stats\nsurpassing_stats_sum = combats_stats_sum[combats_stats_sum[\"diff\"] < -100]\nprint (\"\u00dcst\u00fcnleri a\u015fmak Sava\u015f numaras\u0131 : \" + str(len(surpassing_stats_sum)))\nsurpassing_id = surpassing_stats_sum[cols].replace(stats_sum_dict_re)\nsurpassing_name = surpassing_id[cols].replace(names_dict)\nsurpassing_name.join(combats_stats_sum[\"diff\"]).head(8)\n\n\n# B\u0130R\u0130NC\u0130 POKEMONLA \u0130K\u0130NC\u0130 POKEMONUN ARALARINDAK\u0130 KAZANANMA DURUMLARI \n# YAN\u0130 \u0130K\u0130 POKEMONU SAHAYA S\u00dcRD\u00dcN\u00dcZ VE K\u0130M\u0130N KAZANACA\u011eINA DA\u0130R B\u0130R TAHM\u0130NDE BULUNALIM VE CEVABI G\u00d6REL\u0130M >> RUN ","2d867811":"surpassing_name.join(combats_stats_sum[\"diff\"]).sort_values(by=\"diff\").head(4)","26d5a52d":"combats_stats_sum[\"First_Win\"] =  combats_stats_sum.apply(lambda x: 1 if x[\"First_pokemon\"] ==  x[\"Winner\"] else 0, axis = 1)\nsurpassing_stats_sum = combats_stats_sum[combats_stats_sum[\"diff\"] < -100]\nsns.distplot(surpassing_stats_sum[surpassing_stats_sum[\"First_Win\"]==0][\"diff\"], label=\"First_pokemon_win=0\")\nsns.distplot(surpassing_stats_sum[surpassing_stats_sum[\"First_Win\"]==1][\"diff\"], label=\"First_pokemon_win=1\")\nplt.legend()\nplt.show()","816c9d7f":"sns.distplot(combats_stats_sum[combats_stats_sum[\"First_Win\"]==0][\"diff\"], label=\"First_Win=0\")\nsns.distplot(combats_stats_sum[combats_stats_sum[\"First_Win\"]==1][\"diff\"], label=\"First_Win=1\")\nprint (\"-First_Win=0-\")\nprint (combats_stats_sum[combats_stats_sum[\"First_Win\"]==0][\"diff\"].describe())\nprint (\"-First_Win=1-\")\nprint (combats_stats_sum[combats_stats_sum[\"First_Win\"]==1][\"diff\"].describe())\nplt.legend()\nplt.show()","f8b16dc1":"print (\"There are {} Types.\".format(len(pokemon[\"Type 1\"].drop_duplicates())))\nlist(pokemon[\"Type 1\"].drop_duplicates())","4bd09e81":"type_cols = [\"Type 1\", \"Type 2\"]\nprint (\"There are {} unique type-combinations.\".format(len(pokemon[type_cols].drop_duplicates())))","064fef55":"pokemon[\"Type 2\"] = pokemon[\"Type 2\"].fillna(\"None\")\ntype_cross = pd.crosstab(pokemon[\"Type 1\"], pokemon[\"Type 2\"])\ntype_cross.plot.bar(stacked=True, figsize=(14,4))\nplt.legend(bbox_to_anchor=(0.01, 0.99), loc='upper left', ncol=5, fontsize=8, title=\"Type 2\")\nplt.show()","45db8798":"Normal = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nFighting = {\"Normal\": 2, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 0, \"Steel\": 2, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\nPoison = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 0.5, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0.5, \"Steel\": 0, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 2}\nGround = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 2, \"Ground\": 1, \"Flying\": 0, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 2, \"Water\": 1, \"Electric\": 2, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nFlying = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 0.5, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nBug = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 0.5, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\nRock = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 0.5, \"Flying\": 2, \"Bug\": 2, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 2, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nGhost = {\"Normal\": 0, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 1}\nSteel = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 0.5, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 0.5}\nFire = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nWater = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 2, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nElectric = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 0, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 1, \"Water\": 2, \"Electric\": 0.5, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nGrass = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 2, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 2, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nIce = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 0.5, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 1}\nPsychic = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 2, \"Ground\": 2, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 0, \"Fairy\": 1}\nDragon = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 0}\nDark = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 0.5}\nFairy = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 2, \"Fairy\": 1}\n\ntype_relation = {\"Normal\": Normal, \"Fighting\": Fighting, \"Poison\": Poison, \"Ground\": Ground, \"Flying\": Flying, \"Bug\": Bug, \"Rock\": Rock, \"Ghost\": Ghost, \"Steel\": Steel, \"Fire\": Fire, \"Water\": Water, \"Electric\": Electric, \"Grass\": Grass, \"Ice\": Ice, \"Psychic\": Psychic, \"Dragon\": Dragon, \"Dark\": Dark, \"Fairy\": Fairy}\ndf_type_relation = pd.DataFrame(type_relation)\nprint (\"Row is Diffender, Column is Attacker\")\ndf_type_relation","90ced091":"pokemon[\"Type\"] = pokemon.apply(lambda x: x[\"Type 1\"]+\"\/\"+x[\"Type 2\"], axis=1)\ntype_dict = dict(zip(pokemon['#'], pokemon['Type']))\ncombats_type = combats[cols].replace(type_dict)\ncombats_type[\"Loser\"] = combats_type.apply(lambda x: x[\"First_pokemon\"] if x[\"First_pokemon\"] !=  x[\"Winner\"] else x[\"Second_pokemon\"], axis = 1)\n\nzero_dict = {0: 0.25}\ndf_type_relation = df_type_relation[:].replace(zero_dict)\n\ndef calcRelation(combats_type):\n    r0 = 1\n    win_type1 = combats_type[\"Winner\"].split(\"\/\")[0]\n    win_type2 = combats_type[\"Winner\"].split(\"\/\")[1]\n    lose_type1 = combats_type[\"Loser\"].split(\"\/\")[0]\n    lose_type2 = combats_type[\"Loser\"].split(\"\/\")[1]\n    if win_type2 != \"None\" and lose_type2 != \"None\":\n        r1 = df_type_relation[win_type1][lose_type1]\n        r2 = df_type_relation[win_type1][lose_type2]\n        r3 = df_type_relation[win_type2][lose_type1]\n        r4 = df_type_relation[win_type2][lose_type2]\n        r = r0 * r1 * r2 * r3 * r4\n    elif win_type2 != \"None\" and lose_type2 == \"None\":\n        r1 = df_type_relation[win_type1][lose_type1]\n        r3 = df_type_relation[win_type2][lose_type1]\n        r = r0 * r1 * r3\n    elif win_type2 == \"None\" and lose_type2 != \"None\":\n        r1 = df_type_relation[win_type1][lose_type1]\n        r2 = df_type_relation[win_type1][lose_type2]\n        r = r0 * r1 * r2\n    elif win_type2 == \"None\" and lose_type2 == \"None\":\n        r1 = df_type_relation[win_type1][lose_type1]\n        r = r0 * r1\n    return r\n\ncombats_type[\"Relation\"] = combats_type.apply(lambda x: calcRelation(x), axis = 1)\nprint (combats_type[\"Relation\"].describe())\nsns.distplot(combats_type[\"Relation\"])\nplt.show()","b3116a68":"import numpy as np\nfrom wordcloud import WordCloud, ImageColorGenerator\nfrom PIL import Image\n\ncombats_names = combats[cols].replace(names_dict)\nprint (combats_names[\"Winner\"].value_counts()[:10])\nwinners = list(combats_names[\"Winner\"])\nwinners_str = [str(i) for i in winners]\nwinners_text = (\",\").join(winners_str)\nwc = WordCloud(background_color= \"black\", random_state=1, margin=3).generate(winners_text)\n","6b2300ca":"first_num = combats_names[\"First_pokemon\"].value_counts()\nsecond_num = combats_names[\"Second_pokemon\"].value_counts()\nbattle_num = first_num + second_num\nbattle_win = pd.DataFrame({\"battle\": battle_num, \"win\": combats_names[\"Winner\"].value_counts()}, columns=[\"battle\", \"win\"])\nbattle_win[\"ratio\"] = battle_win[\"win\"]\/battle_win[\"battle\"]\nbattle_win.sort_values(by=[\"ratio\"], ascending=False).head(10)","5f04f1b0":"battle_win.info()","728726e5":"battle_win[battle_win[\"win\"].isnull()]","81fc4fad":"battle_win.loc[\"Shuckle\", [\"win\", \"ratio\"]] = 0\nbattle_win[battle_win.index==\"Shuckle\"]","fd542c0c":"id_dict = dict(zip(pokemon['Name'], pokemon['#']))\nbattle_win[\"Name\"] = battle_win.index\nbattle_win[\"#\"] = battle_win[\"Name\"].replace(id_dict)\nratio_dict = dict(zip(battle_win['#'], battle_win['ratio']))\npokemon[\"ratio\"] = pokemon[\"#\"].replace(ratio_dict)\npokemon.head()","ef986296":"nobattle_pokemon = pokemon[pokemon[\"ratio\"]>1]\nprint (\"\".format(len(nobattle_pokemon.index)))\nnobattle_pokemon[[\"#\", \"Name\", \"ratio\"]]","4c54feb9":"pokemon.loc[62, \"Name\"] = \"Primeape\"\npokemon[pokemon[\"Name\"]==\"Primeape\"][[\"#\", \"Name\", \"ratio\"]]","8ca32340":"battle_pokemon = pokemon[pokemon[\"ratio\"] <= 1]\nsns.lmplot(x=\"stats_sum\", y=\"ratio\", data=battle_pokemon)","d6b64900":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(battle_pokemon[\"stats_sum\"].values.reshape(-1, 1), battle_pokemon[\"ratio\"].values.reshape(-1, 1))\nnobattle_pokemon[\"ratio\"] = linreg.predict(nobattle_pokemon[\"stats_sum\"].values.reshape(-1, 1))\nnobattle_pokemon[[\"#\", \"Name\", \"ratio\"]]","d0ea8417":"combats_add_data = combats.copy()\ntype_dict = dict(zip(pokemon['#'], pokemon['Type']))\nhp_dict = dict(zip(pokemon['#'], pokemon['HP']))\nattack_dict = dict(zip(pokemon['#'], pokemon['Attack']))\ndefense_dict = dict(zip(pokemon['#'], pokemon['Defense']))\nspattack_dict = dict(zip(pokemon['#'], pokemon['Sp. Atk']))\nspdefense_dict = dict(zip(pokemon['#'], pokemon['Sp. Def']))\nspeed_dict = dict(zip(pokemon['#'], pokemon['Speed']))\nstats_sum_dict = dict(zip(pokemon['#'], pokemon['stats_sum']))\nratio_dict = dict(zip(pokemon['#'], pokemon['ratio']))\ncombats_add_data[\"First_pokemon_type\"] = combats_add_data[\"First_pokemon\"].replace(type_dict)\ncombats_add_data[\"First_pokemon_hp\"] = combats_add_data[\"First_pokemon\"].replace(hp_dict)\ncombats_add_data[\"First_pokemon_attack\"] = combats_add_data[\"First_pokemon\"].replace(attack_dict)\ncombats_add_data[\"First_pokemon_defense\"] = combats_add_data[\"First_pokemon\"].replace(defense_dict)\ncombats_add_data[\"First_pokemon_spattack\"] = combats_add_data[\"First_pokemon\"].replace(spattack_dict)\ncombats_add_data[\"First_pokemon_spdefense\"] = combats_add_data[\"First_pokemon\"].replace(spdefense_dict)\ncombats_add_data[\"First_pokemon_speed\"] = combats_add_data[\"First_pokemon\"].replace(speed_dict)\ncombats_add_data[\"First_pokemon_stats\"] = combats_add_data[\"First_pokemon\"].replace(stats_sum_dict)\ncombats_add_data[\"First_pokemon_ratio\"] = combats_add_data[\"First_pokemon\"].replace(ratio_dict)\ncombats_add_data[\"Second_pokemon_type\"] = combats_add_data[\"Second_pokemon\"].replace(type_dict)\ncombats_add_data[\"Second_pokemon_hp\"] = combats_add_data[\"Second_pokemon\"].replace(hp_dict)\ncombats_add_data[\"Second_pokemon_attack\"] = combats_add_data[\"Second_pokemon\"].replace(attack_dict)\ncombats_add_data[\"Second_pokemon_defense\"] = combats_add_data[\"Second_pokemon\"].replace(defense_dict)\ncombats_add_data[\"Second_pokemon_spattack\"] = combats_add_data[\"Second_pokemon\"].replace(spattack_dict)\ncombats_add_data[\"Second_pokemon_spdefense\"] = combats_add_data[\"Second_pokemon\"].replace(spdefense_dict)\ncombats_add_data[\"Second_pokemon_speed\"] = combats_add_data[\"Second_pokemon\"].replace(speed_dict)\ncombats_add_data[\"Second_pokemon_stats\"] = combats_add_data[\"Second_pokemon\"].replace(stats_sum_dict)\ncombats_add_data[\"Second_pokemon_ratio\"] = combats_add_data[\"Second_pokemon\"].replace(ratio_dict)\n\n\ndef calcTypeRelation(combats_add_data):\n    r0 = 1\n    first_type1 = combats_add_data[\"First_pokemon_type\"].split(\"\/\")[0]\n    first_type2 = combats_add_data[\"First_pokemon_type\"].split(\"\/\")[1]\n    second_type1 = combats_add_data[\"Second_pokemon_type\"].split(\"\/\")[0]\n    second_type2 = combats_add_data[\"Second_pokemon_type\"].split(\"\/\")[1]\n    if first_type2 != \"None\" and second_type2 != \"None\":\n        r1 = df_type_relation[first_type1][second_type1]\n        r2 = df_type_relation[first_type1][second_type2]\n        r3 = df_type_relation[first_type2][second_type1]\n        r4 = df_type_relation[first_type2][second_type2]\n        r = r0 * r1 * r2 * r3 * r4\n    elif first_type2 != \"None\" and second_type2 == \"None\":\n        r1 = df_type_relation[first_type1][second_type1]\n        r3 = df_type_relation[first_type2][second_type1]\n        r = r0 * r1 * r3\n    elif first_type2 == \"None\" and second_type2 != \"None\":\n        r1 = df_type_relation[first_type1][second_type1]\n        r2 = df_type_relation[first_type1][second_type2]\n        r = r0 * r1 * r2\n    elif first_type2 == \"None\" and second_type2 == \"None\":\n        r1 = df_type_relation[first_type1][second_type1]\n        r = r0 * r1\n    return r\n\ncombats_add_data[\"Relation\"] = combats_add_data.apply(lambda x: calcTypeRelation(x), axis = 1)\ncombats_add_data[\"First_win\"] = combats_add_data.apply(lambda x: 1 if x[\"First_pokemon\"]==x[\"Winner\"] else 0, axis=1)\nnoneed_cols = [\"First_pokemon\", \"Second_pokemon\", \"Winner\", \"First_pokemon_type\", \"Second_pokemon_type\"]\ncombats_add_data = combats_add_data.drop(noneed_cols, axis=1)\ncombats_add_data.head()","42b42c75":"from sklearn.model_selection import train_test_split\n\nX = combats_add_data.drop(\"First_win\", axis=1)\ny = combats_add_data[\"First_win\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","7eebe50b":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log = round(logreg.score(X_test, y_test)*100, 2)\nacc_log","138051c7":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nacc_knn = round(knn.score(X_test, y_test) * 100, 2)\nacc_knn","6b9206ae":"# Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\nacc_gaussian = round(gaussian.score(X_test, y_test) * 100, 2)\nacc_gaussian","e09892fa":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\nacc_perceptron = round(perceptron.score(X_test, y_test) * 100, 2)\nacc_perceptron","8e9db03f":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nacc_decision_tree = round(decision_tree.score(X_test, y_test) * 100, 2)\nacc_decision_tree","ef2a18d0":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\nacc_random_forest","4f0b2393":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'KNN', \n              'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score': [acc_log, acc_knn, acc_gaussian, acc_perceptron, \n              acc_decision_tree, acc_random_forest]})\nmodels.sort_values(by='Score', ascending=False)","e92f3ea3":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = random_forest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","a8fb0601":"pokemon.sort_values(\"Speed\",ascending=False).head(10)","44865975":"tests = pd.read_csv('..\/input\/tests.csv')\ntests_add_data = tests.copy()\ntests_add_data[\"First_pokemon_type\"] = tests_add_data[\"First_pokemon\"].replace(type_dict)\ntests_add_data[\"First_pokemon_hp\"] = tests_add_data[\"First_pokemon\"].replace(hp_dict)\ntests_add_data[\"First_pokemon_attack\"] = tests_add_data[\"First_pokemon\"].replace(attack_dict)\ntests_add_data[\"First_pokemon_defense\"] = tests_add_data[\"First_pokemon\"].replace(defense_dict)\ntests_add_data[\"First_pokemon_spattack\"] = tests_add_data[\"First_pokemon\"].replace(spattack_dict)\ntests_add_data[\"First_pokemon_spdefense\"] = tests_add_data[\"First_pokemon\"].replace(spdefense_dict)\ntests_add_data[\"First_pokemon_speed\"] = tests_add_data[\"First_pokemon\"].replace(speed_dict)\ntests_add_data[\"First_pokemon_stats\"] = tests_add_data[\"First_pokemon\"].replace(stats_sum_dict)\ntests_add_data[\"First_pokemon_ratio\"] = tests_add_data[\"First_pokemon\"].replace(ratio_dict)\ntests_add_data[\"Second_pokemon_type\"] = tests_add_data[\"Second_pokemon\"].replace(type_dict)\ntests_add_data[\"Second_pokemon_hp\"] = tests_add_data[\"Second_pokemon\"].replace(hp_dict)\ntests_add_data[\"Second_pokemon_attack\"] = tests_add_data[\"Second_pokemon\"].replace(attack_dict)\ntests_add_data[\"Second_pokemon_defense\"] = tests_add_data[\"Second_pokemon\"].replace(defense_dict)\ntests_add_data[\"Second_pokemon_spattack\"] = tests_add_data[\"Second_pokemon\"].replace(spattack_dict)\ntests_add_data[\"Second_pokemon_spdefense\"] = tests_add_data[\"Second_pokemon\"].replace(spdefense_dict)\ntests_add_data[\"Second_pokemon_speed\"] = tests_add_data[\"Second_pokemon\"].replace(speed_dict)\ntests_add_data[\"Second_pokemon_stats\"] = tests_add_data[\"Second_pokemon\"].replace(stats_sum_dict)\ntests_add_data[\"Second_pokemon_ratio\"] = tests_add_data[\"Second_pokemon\"].replace(ratio_dict)\ntests_add_data[\"Relation\"] = tests_add_data.apply(lambda x: calcTypeRelation(x), axis = 1)\nnoneed_cols = [\"First_pokemon\", \"Second_pokemon\", \"First_pokemon_type\", \"Second_pokemon_type\"]\ntests_add_data = tests_add_data.drop(noneed_cols, axis=1)\ny_predict = random_forest.predict(tests_add_data)\ndata = {\"First_pokemon\": tests[\"First_pokemon\"], \"Second_pokemon\": tests[\"Second_pokemon\"], \"First_win\": y_predict}\nsubmission = pd.DataFrame(data=data, columns=[\"First_pokemon\", \"Second_pokemon\", \"First_win\"])\nwinner = pd.DataFrame(submission.apply(lambda x: x[\"First_pokemon\"] if x[\"First_win\"]==1 else x[\"Second_pokemon\"], axis=1), columns=[\"Winner\"])\nsubmission = pd.concat([submission, winner], axis=1)\nsubmission = submission.drop([\"First_win\"], axis=1)\nsubmission","c82b7bd6":"##### 2-3. Regression, Classifier and Verification","842cc86c":"## CBU SOFTWARE ENGINEER\u0130NG  MACHINE LEARN\u0130NG  EXAMPLE \n\n <    Ahmet GECI  \n -\n<   Furkan DO\u011eU\n-\n<     Furkan Alp ESEN\n-\n\n\n\n\n \n#### 1. Data analizi  & g\u00f6rselle\u015ftirme \n BAS\u0130T ANAL\u0130ZLER\n VE GRAF\u0130KLER\n\n### veri modelleme ve veri temizleme \nVER\u0130LER\u0130M\u0130ZDE EKS\u0130K VER\u0130 VARSA ONLARI TAMAMLICAZ \n TAHM\u0130NLER\u0130M\u0130Z \u0130\u00c7\u0130N VER\u0130M\u0130Z\u0130 HAZIRLICAZ   \n REGRESS\u0130ON , CLASSF\u0130ER  and VERF\u0130CAT\u0130ONS   ALGOR\u0130TMALARIMIZI \u0130\u015eL\u0130YEL\u0130M \n VE TAHM\u0130NLER\u0130M\u0130ZZZ   \n \n \n <<<<<<OUTPUTS \n \n 5\tRandom Forest\t94.98\n4\tDecision Tree\t93.06\n0\tLogistic Regression\t88.64\n1\tKNN\t85.66\n3\tPerceptron\t81.50\n2\tNaive Bayes\t78.11\n\n\n >>the best clasfier RANDOM  FOREST   94,.... <<<<< (W\u0130\u0130\u0130NNN)>>>>>>\n \n !!! RUN RUN RUN !!!!\n ,\n \n \n>>> B\u0130R\u0130NC\u0130 POKEMONLA \u0130K\u0130NC\u0130 POKEMONUN ARALARINDAK\u0130 KAZANANMA DURUMLARI \n YAN\u0130 \u0130K\u0130 POKEMONU SAHAYA S\u00dcRD\u00dcN\u00dcZ VE K\u0130M\u0130N KAZANACA\u011eINA DA\u0130R B\u0130R TAHM\u0130NDE BULUNALIM VE CEVABI G\u00d6REL\u0130M \n  -->>\n SON OLARAKTA VER\u0130LER\u0130M\u0130Z\u0130 TEST\u0130M\u0130ZLE KONTROL EDEL\u0130M \n \n BUNLARIDA F\u0130RST_POKEMAN  VE SECOND_POKEMAN \u0130LE  DEFANSE ATAK SPEED..... G\u0130B\u0130 DE\u011eERLER\u0130 F\u0130T ED\u0130CEZ  \n \n![](https:\/\/i.ytimg.com\/vi\/NiEABxi8G4U\/maxresdefault.jpg) ","34387629":"VER\u0130 SETLER\u0130M\u0130Z\u0130 Y\u00dcKLEYEL\u0130M >>>> RUN "}}