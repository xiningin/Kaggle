{"cell_type":{"116a2a9d":"code","1a87e30d":"code","45eaaf21":"code","24873625":"code","d3b6b43a":"code","de9b34cb":"code","56ebaadd":"code","e6ba4e42":"code","5c6fa46b":"code","40d05a8a":"code","25c87ef3":"code","8dff31e5":"code","ce3851c4":"code","32b12c80":"code","c3f7202b":"code","daac4bf3":"code","f059d28b":"code","960659b4":"code","bb7df213":"code","b7573054":"code","07a8def7":"code","317a25e7":"code","28ee7a86":"code","4539476f":"markdown","04cea411":"markdown","0781d8d3":"markdown","ffe52eee":"markdown","d0cf95e1":"markdown","d6c4e1a6":"markdown","1e4b5948":"markdown","bf272d86":"markdown","ef2f1db2":"markdown","dd5cfd4e":"markdown","ca70781e":"markdown"},"source":{"116a2a9d":"# import library \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom wordcloud import WordCloud\nfrom plotly import tools\nimport plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom wordcloud import WordCloud\ninit_notebook_mode(connected=True)","1a87e30d":"# load data\ndata = pd.read_csv(\"..\/input\/link-title-merge.csv\",low_memory=False)\ndel data['index']\n\n# make full-link \ndata.link = data.link.str.replace(\"ges\",\"http:\/\/www.2e.co.kr\/hp\/pages\")\n\n# make category \nurl_2e = \"http:\/\/www.2e.co.kr\/hp\/pages\/\"\ndata['category'] = None\ndata['category'] = np.where(data.link.str.contains(url_2e+\"share\"),\"share\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"career\"),\"career\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"about2e\"),\"about2e\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"contactus\"),\"contactus\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"member\"),\"member\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"insure\"),\"insure\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"event\"),\"event\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"etc\/Search\"),\"Search\",data.category)\ndata['category'] = np.where(data.link.str.contains(url_2e+\"etc\/rule2e\"),\"rule2e\",data.category)\n\n# check category values \ndata.category.value_counts()\ndata.category.isna().sum()\/len(data)\ndata[data.category.isna()].head()\n\n# make keyword\ndata['keyword'] = data.link.str.extract(r'&querys=(\\w+)')\n\n# segment time \ndata.time = data.time.astype(str)\ndata['year'] = data.time.str[0:4]\ndata['month'] = data.time.str[4:6]\ndata['day'] = data.time.str[6:8]\ndata['hour'] = data.time.str[8:10]\ndata['yearmonth'] = data[['year', 'month']].apply(lambda x: '-'.join(x), axis=1)\n#del data['time']\n\n# convert data type\nfor i in ['year','month','day','hour']:\n    data[i] = data[i].astype(int)\n\n# id \ndata['id'].value_counts().head(10)\n\n# eliminated admin from data\ndata = data[data.id!='admin']\n\n# eliminated first and last year \ndata['year'].agg(['min','max'])\ndata = data[~data.year.isin([2011,2018])]","45eaaf21":"data['isBlog'] = np.where(data.title.str.contains(\"\\[\") == False, 1, 0)\ndata['isNews'] = np.where(data.title.str.contains(\"\\[\") == True, 1, 0)\ndata['Others'] = np.where(data.title.str.contains(\"NaN\"), 1, 0)","24873625":"# data -> isBlog \/ isNews \/ Others\n((data['isBlog'] + data['isNews'] + data['Others']) == 1).mean()","d3b6b43a":"print(\"Blog Click : {}\".format(data['isBlog'].sum()))\nprint(\"News Click : {}\".format(data['isNews'].sum()))","de9b34cb":"# check Preference between Blog and News by ID\npreference_Blog_News = data.groupby('ip')['isBlog'].mean() - data.groupby('ip')['isNews'].mean()\n(preference_Blog_News > 0).mean()","56ebaadd":"# blogClick_by_hour\nblogClick_by_hour = data.groupby('year')['isBlog'].sum().reset_index()\nblogClick_by_hour.columns = ['year','blogClick']\n\n# newsClick_by_hour\nnewsClick_by_hour = data.groupby('year')['isNews'].sum().reset_index()\nnewsClick_by_hour.columns = ['year','newsClick']","e6ba4e42":"iplot([go.Scatter(x=blogClick_by_hour['year'],y=blogClick_by_hour['blogClick'], name=\"Blog-Click\"), \n       go.Scatter(x=newsClick_by_hour['year'],y=newsClick_by_hour['newsClick'], name=\"News-Click\")])","5c6fa46b":"othersClick_by_hour = data.groupby('year')['Others'].sum().reset_index()\nothersClick_by_hour.columns = ['year','othersClick']\niplot([go.Scatter(x=othersClick_by_hour['year'],y=othersClick_by_hour['othersClick'])])","40d05a8a":"# Top keyword by IP\nkeyword_by_ip_top = data.groupby('ip')['keyword'].value_counts().groupby('ip').head(1)\nkeyword_by_ip_top = pd.DataFrame(keyword_by_ip_top)\nkeyword_by_ip_top.columns = ['count']\nkeyword_by_ip_top = keyword_by_ip_top.reset_index()","25c87ef3":"# Top keyword by IP plot\ntmp = keyword_by_ip_top['keyword'].value_counts().reset_index()\niplot([go.Bar(x=tmp['index'].tolist()[:50],y=tmp['keyword'].tolist()[:50])])","8dff31e5":"# find weeks by year-month-day\nweekday_info = pd.concat([pd.Series([0,1,2,3,4,5,6]), pd.Series([\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"Sun\"])], axis = 1)\nweekday_info.columns = ['weekday', 'week']\n\ndata['weekday'] = [datetime.datetime(row[7], row[8], row[9]).weekday() for row in data.values]\n\ndata = pd.merge(data, weekday_info, how = 'left', on = 'weekday')","ce3851c4":"# visit_by_week\nvisit_by_week = data.groupby('week')['link'].count().reset_index()\nvisit_by_week = visit_by_week.iloc[[1,5,6,4,0,2,3],:] # it is for order week from Monday to Sunday\nvisit_by_week.columns = ['week','visits']\niplot([go.Scatter(x=visit_by_week['week'],y=visit_by_week['visits'])])","32b12c80":"# null ratio of id\ndata['id'].isnull().mean()","c3f7202b":"# id or not binary\ndata['isID'] = data['id'].notnull() * 1","daac4bf3":"link_by_id_ip = data.groupby(['isID','ip'])['link'].count().reset_index()","f059d28b":"link_by_id_ip.groupby('isID')['link'].mean().plot.bar()","960659b4":"# set index for in case back to the rawdata later\ndata_index = data.reset_index()\ndata_index = data_index.sort_values(by = ['ip','time'])\n\n# each number of ip\nip_count = data_index.groupby('ip')['link'].count()\n\n# cumsum of ip. It indicate that the last index of each ip\nip_count_cumsum = np.cumsum(ip_count)\n\n# time difference\ntime_diff = data_index['time'][1:].values.astype('int') - data_index['time'][:-1].values.astype('int')\n\n# first is 0\ntime_diff = np.concatenate((np.array([0]), time_diff), axis = 0)\n\n# set column\ndata_index['time_diff'] = time_diff\n\n# if ip is continuous, than 1 else 0\nisContinuous = np.concatenate((np.array([0]), data_index['ip'][1:].values == data_index['ip'][:-1].values), axis = 0)\n\n# ip is continuous & time difference is more than 1 hour --> Churn\nisChurn = np.where((time_diff * isContinuous) >= 10000, 1, 0)\n\n# last entrance of each ip --> churn\nisChurn[ip_count_cumsum-1] = 1\n\ndata_index['isChurn'] = isChurn","bb7df213":"data_index.groupby('category')['isChurn'].sum().plot.bar()","b7573054":"# except 'share'\npd.DataFrame(data_index.groupby('category')['isChurn'].sum()).query(\"category != 'share'\").plot.bar()","07a8def7":"tmp = data_index.groupby(['category', 'year'])['isChurn'].sum().reset_index()\nsns.factorplot(x=\"year\",y=\"isChurn\",hue=\"category\",data=tmp[tmp.category!=\"share\"])","317a25e7":"data_index_about2e_Churn = data_index.query(\"category == 'about2e' and isChurn == 1\")","28ee7a86":"data_index_about2e_Churn['link'].value_counts()","4539476f":"## '\ud22c\uc774'\ud0ed\uc5d0\uc11c \uc774\ud0c8\ud558\ub294 \ud398\uc774\uc9c0 \uc21c\uc704\n* 1\uc704 : '\uac1c\uc694' - 1629\uac74\n* 2\uc704 : '\uc5f0\ud601' - 1579\uac74\n* 3\uc704 : '\uc0ac\uc5c5\uc601\uc5ed(\ud604\uc7ac \uc5c6\uc5b4\uc84c\uc74c)' - 1439\uac74\n* 4\uc704 : '\uc8fc\uc694\uc11c\ube44\uc2a4' - 1438\uac74\n* 5\uc704 : '\uc778\uc0ac\ub9d0' - 1332\uac74\n* 6\uc704 : '\ud30c\ud2b8\ub108' - 884\uac74\n","04cea411":"* \uc8fc\ub9d0\uc5d0\ub294 \ubc29\ubb38\uc790\uac00 \uae09\uaca9\ud788 \uac10\uc18c\ud558\ub294 \uac83\uc744 \uc54c  \uc218 \uc788\uc74c","0781d8d3":"* Share \ud398\uc774\uc9c0\uc5d0\uc11c \uc774\ud0c8\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub9ce\uc74c","ffe52eee":"\n# \ubaa9\ucc28\n\n### \uc6f9\ud398\uc774\uc9c0 \ube44\uad50 (\uc218\uc815 \ud544\uc694)\n    1.1 \ube14\ub85c\uadf8 - \ube14\ub85c\uadf8 \uc774\uc678 \uae00 - \uae00\uc774 \uc544\ub2cc \ud398\uc774\uc9c0 \ud074\ub9ad \uc218\n    1.2 \ube14\ub85c\uadf8 \uae00, \ube14\ub85c\uadf8 \uc774\uc678 \uae00 ip\ubcc4 \uc120\ud638\ub3c4\n\n### \uac80\uc0c9 \ud0a4\uc6cc\ub4dc \uc21c\uc704 \n    2.1 ip \ubcc4\ub85c \uac00\uc7a5 \ub9ce\uc774 \uac80\uc0c9\ud55c \ub2e8\uc5b4\n\n### \ubc29\ubb38\uac1d \ud0d0\uc0c9\n    3.1 \uc8fc\ubcc4 \ubc29\ubb38\uac1d \uc218\n    3.2 ID \ub85c\uadf8\uc778 \ubc29\ubb38\uac1d or ID \ube44\ub85c\uadf8\uc778 \ubc29\ubb38\uac1d \ud074\ub9ad \uc218\n\n### \uc774\ud0c8 \ud0d0\uc0c9\n    4.1 \uc774\ud0c8 \uc815\uc758\n    4.2 \uce74\ud14c\uace0\ub9ac\ubcc4 \uc774\ud0c8 \uc218\n    4.3 \uce74\ud14c\uace0\ub9ac\ubcc4 \uc774\ud0c8 \uc0c1\uc138\n","d0cf95e1":"* \ube14\ub85c\uadf8 \uae00\uc744 \ud074\ub9ad\ud55c \uac74\uc218\uc640 \uadf8 \uc774\uc678\uc758 \uae00\uc744 \ud074\ub9ad\ud55c \uac74\uc218\ub294 \ud070 \ucc28\uc774\uac00 \ubcf4\uc774\uc9c0 \uc54a\uc74c","d6c4e1a6":"* mean : 0.095\n    * \uacb0\uacfc\ub294, \ud3c9\uade0\uc801\uc73c\ub85c \uc0ac\ub78c\ub9c8\ub2e4 Blog\ub97c \uc120\ud638\ud558\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc57d\uac04 \ub354 \ub192\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8","1e4b5948":"# \ud22c\uc774\ucee8\uc124\ud305 \uc6f9\uc0ac\uc774\ud2b8 \ub85c\uadf8 \ubd84\uc11d \ub9ac\ud3ec\ud2b8 \n* \ub370\uc774\ud130 \uc218\uc9d1 \uae30\uac04 : 2012.01 ~ 2017.12 \n* \ucd1d \ub370\uc774\ud130 \uac74\uc218 : 2906566\uac74","bf272d86":"* ID\ub97c \ub85c\uadf8\uc778\ud55c \uc0ac\ub78c\ubcf4\ub2e4 \ub85c\uadf8\uc778\ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\ub4e4\uc774 \ubc29\ubb38\ud558\ub294 \ud3c9\uade0 \ud398\uc774\uc9c0\uac00 \ub9ce\ub2e4.","ef2f1db2":"## \uc774\ud0c8 \uc815\uc758\n* \uac01 ip\ub2f9 \uadf8 \ub2e4\uc74c \ud589\ub3d9\uc774 1\uc2dc\uac04 \uc774\uc0c1 \uacf5\ubc31\uc774 \uc788\uc744 \uacbd\uc6b0","dd5cfd4e":"## \ub370\uc774\ud130 \uc885\ub958\ub97c\n* isBlog : Blog \uae00\n* isNews : \ub274\uc2a4\ud074\ub9ac\ud551, \uc5b8\ub860\ubcf4\ub3c4, Y\uc138\ubbf8\ub098 \ub4f1 \uae00\uc774\uae34 \ud55c\ub370 Blog \uae00\uc774 \uc544\ub2cc \uac83\ub4e4\n* Others : \uae00 \uc790\uccb4\uac00 \uc544\ub2cc \uac83\ub4e4\n\n--> 3\uac00\uc9c0 \ud328\ud134\uc73c\ub85c \ubd84\ub9ac\n","ca70781e":"* Share \ud398\uc774\uc9c0\ub97c \uc81c\uc678\ud55c \uacf3\uc5d0\uc11c \uc774\ud0c8. '\ud22c\uc774' \ud0ed \ub0b4\uc5d0\uc11c \ud65c\ub3d9\ud558\ub2e4\uac00 \ub9ce\uc774 \uc774\ud0c8\ud558\ub294 \uac83\uc73c\ub85c \ubcf4\uc784"}}