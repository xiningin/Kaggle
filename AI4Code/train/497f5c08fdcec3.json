{"cell_type":{"90a3a93d":"code","30aa8380":"code","9ae6a2d3":"code","6c052b44":"code","a072af9e":"code","dd7ba069":"code","e3f3bda1":"code","b4b6eae3":"code","720dc495":"code","9a5e8811":"code","f77437fe":"code","8da0fc1a":"code","8c4ffaee":"code","9b8770a8":"code","1d5a6f82":"code","4b810972":"code","17dda06b":"code","2f2677f7":"markdown","df40e8d1":"markdown","7e58ee47":"markdown","cd3309ae":"markdown","e05a4132":"markdown","0274c697":"markdown","40bd0d8c":"markdown","42b5b718":"markdown","3eb64009":"markdown","af68c426":"markdown","785325ff":"markdown","9c15f2cb":"markdown","406f65a5":"markdown","e871547f":"markdown","97c2109f":"markdown","0676e2a5":"markdown","a6b6d52d":"markdown","e1bef34f":"markdown"},"source":{"90a3a93d":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, accuracy_score\nfrom keras.preprocessing import image\n\nimport matplotlib.image as mpimg\nplt.rcParams.update({'figure.max_open_warning': 0})","30aa8380":"train_dir = '..\/input\/gravity-spy-gravitational-waves\/train\/train\/'\nvalidation_dir = '..\/input\/gravity-spy-gravitational-waves\/validation\/validation\/'\ntest_dir = '..\/input\/gravity-spy-gravitational-waves\/test\/test\/'","9ae6a2d3":"train_datagen = ImageDataGenerator(rescale=1. \/ 255)\nvalidation_datagen = ImageDataGenerator(rescale=1. \/ 255)  \ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)  ","6c052b44":"df = pd.read_csv(\"..\/input\/gravity-spy-gravitational-waves\/trainingset_v1d1_metadata.csv\") \ndf.label.value_counts()","a072af9e":"fullpath = train_dir + 'Blip\/' + os.listdir(train_dir + 'Blip')[0]\nimg=mpimg.imread(fullpath)\nplt.imshow(img)","dd7ba069":"classes_list = df.label.value_counts().index\nclasses_list = list(classes_list)","e3f3bda1":"plt.figure(figsize=(25, 25))\n    \nfor i in range(0, 22):\n    plt.subplot(8, 3, i+1)\n    fullpath = train_dir + classes_list[i] + '\/' + os.listdir(train_dir + classes_list[i])[0]\n    img=mpimg.imread(fullpath)\n    plt.imshow(img)","b4b6eae3":"training_batch_size = 64\nvalidation_batch_size = 32\nimg_dim = 250\n\ntrain_generator = train_datagen.flow_from_directory(\n  train_dir,                                                  \n  classes = classes_list,\n  target_size = (img_dim, img_dim),            \n  batch_size = training_batch_size,\n  class_mode = \"categorical\",\n  shuffle = True,\n  seed = 123)","720dc495":"validation_generator = validation_datagen.flow_from_directory(\n  validation_dir,\n  classes = classes_list,\n  target_size = (img_dim, img_dim),\n  batch_size = validation_batch_size,\n  class_mode = \"categorical\",\n  shuffle = True,\n  seed = 123)","9a5e8811":"test_size = !find '..\/input\/gravity-spy-gravitational-waves\/test\/test\/' -type f | wc -l\ntest_size = int(test_size[0])\ntest_batch_size = 1\n\ntest_generator = test_datagen.flow_from_directory(\n  test_dir,\n  classes = classes_list,\n  target_size = (img_dim, img_dim),\n  batch_size = test_batch_size,\n  class_mode = \"categorical\",\n  shuffle = False)","f77437fe":"input_shape = (img_dim, img_dim, 3)\n\nmodel = Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, (10, 10), input_shape=input_shape))\nmodel.add(tf.keras.layers.Activation('relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.25))\n\nmodel.add(tf.keras.layers.Conv2D(32, (5, 5)))\nmodel.add(tf.keras.layers.Activation('relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.25))\n\nmodel.add(tf.keras.layers.Conv2D(64, (3, 3)))\nmodel.add(tf.keras.layers.Activation('relu'))\nmodel.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(tf.keras.layers.Dropout(0.25))\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(img_dim, activation=\"relu\"))\nmodel.add(tf.keras.layers.Dropout(0.25))\nmodel.add(tf.keras.layers.Dense(22, activation=\"softmax\"))","8da0fc1a":"model.compile(loss = \"categorical_crossentropy\",  \n              optimizer = 'adam', \n              metrics=[\"accuracy\"])\n\ntraining_step_size = 32\nvalidation_step_size = 32\n\nhistory = model.fit_generator(\n  train_generator,\n  steps_per_epoch = training_step_size,\n  epochs = 20,\n  validation_data = validation_generator,\n  validation_steps = validation_step_size,\n  verbose = 1)","8c4ffaee":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","9b8770a8":"predictions = model.predict_generator(test_generator, steps = test_size, verbose = 1)","1d5a6f82":"df = pd.DataFrame(predictions)\ndf['filename'] = test_generator.filenames\ndf['truth'] = ''\ndf['truth'] = df['filename'].str.split('\/', 1, expand = True)\ndf['prediction_index'] = df[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]].idxmax(axis=1)\n\ndf['prediction'] = ''\n\nfor i in range(0,22):\n    df['prediction'][df['prediction_index'] == i] = classes_list[i]\n    \ncm = confusion_matrix(df['truth'], df['prediction'])\n\ncm_df = pd.DataFrame(cm)\n\ncm_df.columns = classes_list\ncm_df['signal'] = classes_list\n\ncm_df","4b810972":"import seaborn as sns\n\nplt.figure(figsize=(12, 12))\n\ncorr = cm_df.corr()\nax = sns.heatmap(\n    corr, \n    vmin=0, vmax=1, center=0.5,\n    cmap=sns.diverging_palette(0, 200, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","17dda06b":"accuracy = accuracy_score(df['truth'], df['prediction'])\naccuracy","2f2677f7":"Plot the confusion matrix as a correlation plot,","df40e8d1":"Let's start to create the model. First, the data sources,","7e58ee47":"This notebook uses a simple Keras deep learning model on the Gravity Spy dataset.","cd3309ae":"Make the predictions on the test set,","e05a4132":"Next, we create the actual CNN,","0274c697":"Point to the 3 directories,","40bd0d8c":"Let's have a look at the number of classes of image in the training data,","42b5b718":"# Gravity Spy Deep Learning Model","3eb64009":"As you can see, the model is getting the majority of classes correct.\n\nFinally, check the overall accuracy,","af68c426":"Take a look at examples of all the 22 classes,","785325ff":"Create a confusion matrix,","9c15f2cb":"Take a look at the accuracy and loss,","406f65a5":"Load libraries,","e871547f":"## Keras Model","97c2109f":"Get the class names,","0676e2a5":"As you can see, the most common type is 'Blip'. Here is what such an image looks like,","a6b6d52d":"Create the data generators,","e1bef34f":"Now, train the model,"}}