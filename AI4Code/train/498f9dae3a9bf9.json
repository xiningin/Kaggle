{"cell_type":{"71df5321":"code","639b8385":"code","8ba032b9":"code","f0333d37":"code","286afdb3":"code","94ad2d45":"code","fade8e60":"code","1abd642e":"code","73a4e2cb":"code","5a62acdd":"code","42be18df":"code","88ba40c6":"code","ed58d677":"code","3464fdc8":"code","ce58aa35":"code","0376c25b":"code","fc81af6d":"code","29039064":"code","f948b5c7":"code","365ffc3c":"code","039739c9":"code","5403bc46":"code","608bdd26":"code","8777b59c":"code","8a4b15b5":"code","e8fb2d7f":"code","c13ec190":"code","1806bb6d":"code","3990be4c":"code","02cccbc1":"code","76563eb0":"code","5b90e869":"code","7891be0e":"code","b82de2d9":"code","b772433e":"code","bf11eac1":"code","ee81f3d1":"code","8e8fa429":"code","4b3971d0":"code","b3531441":"code","0a021bd9":"code","4dacf5c5":"code","9f8ef482":"code","4f703e2f":"code","28c4fde7":"code","d9b0634e":"code","f0c34a5d":"code","39e3f248":"code","57843e1c":"code","f9593f6a":"markdown","3553756c":"markdown","4a97e127":"markdown","940eb8d5":"markdown","3de350e5":"markdown","5f199ccc":"markdown","31437d3f":"markdown","e6d29005":"markdown","08ff840c":"markdown"},"source":{"71df5321":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","639b8385":"data = pd.read_csv(\"..\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_size.csv\")","8ba032b9":"data.head(3)","f0333d37":"print(\"Shape of Dataset is\", data.shape)","286afdb3":"data.describe()","94ad2d45":"data.info()","fade8e60":"data.isnull().any()","1abd642e":"# Missing values\ndef missing_values_table(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_cols = mis_val_table.rename(columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_cols = mis_val_table_cols[mis_val_table_cols.iloc[:,1] != 0].sort_values('% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(df.shape[1]))   \n        print(\"There are \" + str(mis_val_table_cols.shape[0])+\" columns that have missing values.\")\n        return mis_val_table_cols","73a4e2cb":"miss_values= missing_values_table(data)\nmiss_values.style.background_gradient(cmap='plasma')","5a62acdd":"data['species'].value_counts()\nsns.countplot(data['species'],palette = \"gist_ncar\")","42be18df":"data['island'].value_counts()\nsns.countplot(data['island'], palette = \"cubehelix_r\")","88ba40c6":"data['sex'].value_counts()","ed58d677":"data['sex'].fillna(data['sex'].mode()[0],inplace=True)\ndata[\"sex\"].replace({\".\": \"FEMALE\"}, inplace=True)\ndata['sex'].value_counts()","3464fdc8":"sns.countplot(data['sex'],palette=\"cubehelix\")","ce58aa35":"data['culmen_length_mm'].groupby(data['sex']).mean()","0376c25b":"data.groupby(['sex', 'species'])['culmen_length_mm'].median()","fc81af6d":"col_to_imput = ['culmen_length_mm', 'culmen_depth_mm','flipper_length_mm', 'body_mass_g']\nfor item in col_to_imput:\n    data[item].fillna(data[item].median(),inplace=True)","29039064":"missing_values= missing_values_table(data)\nmissing_values.style.background_gradient(cmap='Reds')","f948b5c7":"sns.heatmap(data.isnull(), yticklabels= False)","365ffc3c":"sns.heatmap(data.corr(), annot = True, cmap=\"magma\" )","039739c9":"sns.pairplot(data,hue='species')","5403bc46":"sns.pairplot(data,hue='sex', palette=\"Dark2\" )","608bdd26":"fig,axes=plt.subplots(2,2,figsize=(10,10))\nsns.boxplot(x=data.species,y=data.flipper_length_mm,hue = data.sex, ax=axes[0,0])\nsns.boxplot(x=data.species,y=data.culmen_length_mm,hue = data.sex, ax=axes[0,1])\nsns.boxplot(x=data.species,y=data.culmen_depth_mm,hue = data.sex, ax=axes[1,0])\nsns.boxplot(x=data.species,y=data.body_mass_g,hue = data.sex, ax=axes[1,1])","8777b59c":"#distribution plot\nfig,axes=plt.subplots(2,2,figsize=(10,10))\nsns.distplot(data.flipper_length_mm,ax=axes[0,0])\nsns.distplot(data.culmen_length_mm,ax=axes[0,1])\nsns.distplot(data.culmen_depth_mm,ax=axes[1,0])\nsns.distplot(data.body_mass_g,ax=axes[1,1])","8a4b15b5":"col_list = ['culmen_length_mm', 'culmen_depth_mm','flipper_length_mm', 'body_mass_g']\ncol = 'species'\nrow = 'sex'\nfor i in col_list:\n    grid = sns.FacetGrid(data, col=col, row=row, size=2.2, aspect=1.6)\n    grid.map(plt.hist, i, alpha=.5, bins=20)\n    grid.add_legend();","e8fb2d7f":"sns.FacetGrid(data = data,row = \"island\", col = \"sex\").map(plt.scatter ,\"flipper_length_mm\",\"body_mass_g\").add_legend()","c13ec190":"sns.FacetGrid(data = data,row = \"island\", col = \"sex\").map(plt.scatter ,'culmen_length_mm', 'culmen_depth_mm' ).add_legend()","1806bb6d":"from sklearn.preprocessing import LabelEncoder \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","3990be4c":"le = LabelEncoder() \n  \ndata['sex']= le.fit_transform(data['sex']) \ndata['island']= le.fit_transform(data['island'])\ndata['species']= le.fit_transform(data['species'])","02cccbc1":"data.head()","76563eb0":"#defining logistic regression model\ndef logreg(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    lr = LogisticRegression()\n    lr.fit(X_train,y_train)\n    y_pred = lr.predict(X_val)\n    print('Accuracy : ', accuracy_score(y_val, y_pred))\n    print('F1 Score : ', f1_score(y_val, y_pred, average = 'weighted'))\n    print('Precision : ', precision_score(y_val, y_pred, average = 'weighted'))\n    print('Recall : ', recall_score(y_val, y_pred, average = 'weighted'))","5b90e869":"#defining decision tree model\ndef DesTre(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    dtc = DecisionTreeClassifier(criterion='entropy')\n    dtc.fit(X_train,y_train)\n    y_pred = dtc.predict(X_val)\n    print('Accuracy : ', accuracy_score(y_val, y_pred))\n    print('F1 Score : ', f1_score(y_val, y_pred, average = 'weighted'))\n    print('Precision : ', precision_score(y_val, y_pred, average = 'weighted'))\n    print('Recall : ', recall_score(y_val, y_pred, average = 'weighted'))","7891be0e":"#defining random forest classifer model\ndef rfc(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    rfc = RandomForestClassifier()\n    rfc.fit(X_train,y_train)\n    y_pred = rfc.predict(X_val)\n    print('Accuracy : ', accuracy_score(y_val, y_pred))\n    print('F1 Score : ', f1_score(y_val, y_pred, average = 'weighted'))\n    print('Precision : ', precision_score(y_val, y_pred, average = 'weighted'))\n    print('Recall : ', recall_score(y_val, y_pred, average = 'weighted'))","b82de2d9":"#defining k neighour model\ndef knn(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    knn = KNeighborsClassifier(n_neighbors=10,weights='distance',n_jobs=100)\n    knn.fit(X_train,y_train)\n    y_pred = knn.predict(X_val)\n    print('Accuracy : ', accuracy_score(y_val, y_pred))\n    print('F1 Score : ', f1_score(y_val, y_pred, average = 'weighted'))\n    print('Precision : ', precision_score(y_val, y_pred, average = 'weighted'))\n    print('Recall : ', recall_score(y_val, y_pred, average = 'weighted'))","b772433e":"X = data.drop('species', axis = 1)\ny = data['species']","bf11eac1":"logreg(X,y)","ee81f3d1":"DesTre(X,y)","8e8fa429":"rfc(X,y)","4b3971d0":"knn(X,y)","b3531441":"X_gender = data.drop('sex', axis = 1)\ny_gender = data['sex']","0a021bd9":"logreg(X_gender,y_gender)","4dacf5c5":"DesTre(X_gender,y_gender)","9f8ef482":"rfc(X_gender,y_gender)","4f703e2f":"knn(X_gender,y_gender)","28c4fde7":"X_island = data.drop('island', axis = 1)\ny_island = data['island']","d9b0634e":"logreg(X_island,y_island)","f0c34a5d":"DesTre(X_island,y_island)","39e3f248":"rfc(X_island,y_island)","57843e1c":"knn(X_island,y_island)","f9593f6a":"# Gender prediction","3553756c":"# Problem Type:\nPredict the Penguin\n\n### Predictors:\n- Sex\n- Culmen Length (mm)\n- Culmen Depth (mm)\n- Flipper Length (mm)\n- Body Mass (g)\n- Island\n\n### Target - Species:\n- Adelie\n- Chinstrap\n- Gentoo\n\n<img src=\"https:\/\/allisonhorst.github.io\/palmerpenguins\/reference\/figures\/lter_penguins.png\" alt=\"Drawing\" width=\"400\">","4a97e127":"# Label Encoding the Data","940eb8d5":"## Species Model","3de350e5":"# Island prediction","5f199ccc":"# The End","31437d3f":"# EDA and Missing Values Treatment","e6d29005":"# Importing libraries and loading data","08ff840c":"# Importing Model Libraries and Model Building"}}