{"cell_type":{"48653452":"code","de87f009":"code","8c9d0001":"code","d19eb050":"code","e60e3874":"code","1b4c6137":"code","c8c95d06":"code","f0168dd0":"code","0b8c34ef":"code","67ae64e4":"code","c7c46ad5":"code","7db439e9":"code","ce3e9a15":"code","0ba44648":"code","6781072f":"code","69fce39f":"code","f1899960":"code","962a536d":"code","32fc093c":"code","562a361b":"code","46e76b9a":"code","2b14a32c":"code","02feb867":"code","a29c095a":"code","46332920":"code","2275bf00":"code","9a842bf8":"code","e1401da7":"code","a28bfc9a":"code","64711c43":"code","abf2d6df":"code","7fb8b75a":"code","7133f2e3":"code","285c904a":"code","1189b223":"code","af05a10c":"code","3bd780e5":"markdown","3e6ff323":"markdown","0ba6d287":"markdown","92413b0e":"markdown","f40d8e83":"markdown","031aa97a":"markdown","d7303960":"markdown","cefaf52c":"markdown","53a44862":"markdown","66514963":"markdown","926d4c1c":"markdown","079e876e":"markdown","f2c59a7f":"markdown","be579b46":"markdown","14bfa6a7":"markdown","06dff975":"markdown","5cd31d7d":"markdown","896464ab":"markdown","1e816a85":"markdown","cba30b8c":"markdown"},"source":{"48653452":"#imports\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime as dt\npd.set_option('max_rows',1000)\nsns.set(rc={'figure.figsize':(15,10)})\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nimport sklearn.metrics as metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nfrom math import sqrt\n\n\n\n","de87f009":"df = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_o.csv')\n","8c9d0001":"df.isna().sum()","d19eb050":"df1 = df.copy()\ndf1['duration_ms'].head()","e60e3874":"df1['duration_ms'] = df1['duration_ms']\/1000\ndf1.rename({'duration_ms':'duration_in_seconds'},axis=1,inplace=True)\ndf1.info()","1b4c6137":"df[df.name=='We Will Rock You']","c8c95d06":"from collections import defaultdict\n\nfrequency=defaultdict(lambda:0)\n\nfor i in df:\n    frequency[i]=df[i].nunique()\n    \n\n\nfrequency\n\n\nfig,ax=plt.subplots(figsize=(25, 8))\n\nax.bar(frequency.keys(),frequency.values())\n\nplt.show()\n","f0168dd0":"frequency","0b8c34ef":"df1","67ae64e4":"df.popularity.unique()","c7c46ad5":"df.hist(figsize=(15,15))\nplt.show()","7db439e9":"plt.figure(figsize=(15,8))\nsns.heatmap(df1.corr(),annot=True)","ce3e9a15":"g_pn = df1.groupby(\"name\")['popularity'].sum().sort_values(ascending=False)[:20]\nsns.set(rc={'figure.figsize':(15,8)})\naxis = sns.barplot(g_pn.index, g_pn,palette='rocket')\naxis.set_title('Top Tracks with Popularity')\naxis.set_ylabel('Popularity')\naxis.set_xlabel('Tracks')\nplt.xticks(rotation = 90)","0ba44648":"g_ap = df1.groupby(\"artists\")['popularity'].sum().sort_values(ascending=False)[:20]\naxis = sns.barplot(g_ap.index, g_ap,palette='magma_r')\nsns.set(rc={'figure.figsize':(12,7)})\naxis.set_title('Top Artists with Popularity')\naxis.set_ylabel('Popularity')\naxis.set_xlabel('Artists')\nplt.xticks(rotation = 90)","6781072f":"columns = [\"acousticness\",\"danceability\",\"energy\",\"speechiness\",\"liveness\",\"valence\"]\nplt.figure(figsize=(15,10))\nfor c in columns:\n    x = df1.groupby('year')[c].mean()\n    sns.lineplot(x.index,x,label=c)\n    \nplt.title('Audio characteristics over year')\nplt.xlabel('Year')\nplt.ylabel('Characteristics')\nplt.show()","69fce39f":"g_an = df1.groupby('artists')['name'].count().sort_values(ascending=False)[:20]\naxis = sns.barplot(g_an.index, g_an,palette='winter')\nsns.set(rc={'figure.figsize':(12,7)})\naxis.set_title('Top artists with tracks')\naxis.set_ylabel('Track count')\naxis.set_xlabel('Artists')\nplt.xticks(rotation = 90)\nplt.show()","f1899960":"g_an = df1.groupby('artists')['danceability'].mean().sort_values(ascending=False)[:20]\naxis = sns.barplot(g_an.index, g_an,palette='summer')\naxis.set_title('Top artists with danceability')\nsns.set(rc={'figure.figsize':(12,7)})\naxis.set_ylabel('danceability')\naxis.set_xlabel('Artists')\nplt.xticks(rotation = 90)\nplt.show()","962a536d":"df1['year'].describe()","32fc093c":"bins = [1920,1960,2000,2020]\ndf1['year_bins'] = pd.cut(df1['year'],bins,labels=['20s-60s','60s-2000','2000-2020'])\ndf1['year_bins'].head(10)","562a361b":"g_yp = df1.groupby('year_bins')['popularity'].mean().sort_values(ascending=False)[:20]\naxis = sns.barplot(g_yp.index, g_yp,palette='autumn_r')\nsns.set(rc={'figure.figsize':(12,7)})\naxis.set_title('popularity categories')\naxis.set_xlabel('Categories')\naxis.set_ylabel('popularity')\n#plt.xticks(rotation = 90)\nplt.show()","46e76b9a":"plt.figure()\nsns.set(rc={'figure.figsize':(12,7)})\nsns.barplot('explicit','popularity',data=df1,palette='rocket_r')\nplt.show()","2b14a32c":"sns.barplot('key','popularity',data=df1)\nsns.set(rc={'figure.figsize':(12,7)})\nplt.show()","02feb867":"df.popularity.hist(figsize=(15,15),bins=10)","a29c095a":"np.random.seed(6)\npopular = np.random.choice(a= df['popularity'], size=500)\nprint(\"sample mean\",popular.mean())\nprint(\"population mean\",df['popularity'].mean())\n\nprint(\"standard deviation\",df['popularity'].std())","46332920":"from statsmodels.stats.weightstats import ztest","2275bf00":"def ZTest(x1,value,s):\n\n\n\n    z_value , p_value = ztest(x1 = x1,value =value )\n    \n    print('Z-score is :{}\\n'.format(z_value))\n    print('P-value is :{:.50f}\\n'.format(p_value))\n    \n    if p_value<0.05:\n        print('Null Hypothesis Rejected\\n')\n    else:\n        print('Null Hypothesis is not Rejected\\n')\n    \n    if(s=='below'):\n      if(z_value<0):\n        print(\"Alternative Hypothesis: Accepted \\t Left Tailed test \\n\")\n    else:\n      if(z_value>0):\n        print(\"Alternative Hypothesis: Accepted \\t Right Tailed test \\n\")\n        ","9a842bf8":"ZTest(df[df['name']=='White Christmas']['popularity'],df['popularity'].mean(),'above')","e1401da7":"ZTest(df[df['artists']==\"['Frank Sinatra']\"]['popularity'],df['popularity'].mean(),'above')\n","a28bfc9a":"import scipy.stats as stats\nimport math\n\ndef TTest(a,popmean,s):\n    \n\n\n    tscore,p_value=stats.ttest_1samp(a= a,popmean= popmean)\n    \n    print('T-score is :{}\\n'.format(tscore))\n    print('P-value is :{:.50f}\\n'.format(p_value))\n    \n    if p_value<0.05:\n        print('Null Hypothesis Rejected\\n')\n    else:\n        print('Null Hypothesis is not Rejected\\n')\n    \n    if(s=='below'):\n      if(tscore<0):\n        print(\"Alternative Hypothesis: Accepted \\t Left Tailed test \\n\")\n    else:\n      if(tscore>0):\n        print(\"Alternative Hypothesis: Accepted \\t Right Tailed test \\n\")\n    \n    \n    ","64711c43":"np.random.seed(40)\nchrs = np.random.choice(a= df['acousticness'], size=10000)","abf2d6df":"TTest(chrs,df['acousticness'].mean(),'below')","7fb8b75a":"import statsmodels.api as sm\nfrom scipy.stats import chi2_contingency\n\ndef chi_square_test(feature1,feature2):\n    sample_table=pd.crosstab(df[feature1],df[feature2])\n    \n    col_sum = sample_table.sum(axis=0)\n    col_percentage = (sample_table)\/col_sum\n    print(\"\")\n    print(\"Column percent are->>>>>\")\n    print(col_percentage)\n    print(\"\")\n    alpha=0.05\n    \n    stat, p, dof, expected = chi2_contingency(sample_table)\n    if p<=alpha:\n        mssg=\"Dependent (Reject Null Hypothesis)\"\n    else:\n        mssg=\"Independent (Null Hypothesis holds true)\"\n        \n    print('Chi-square value is: {:.2f} \\tp-value: {} \\tdf: {} \\tOutcome: {}'.format(stat, p,dof,mssg))","7133f2e3":"from scipy.stats import f_oneway\ndef anova(sample1,sample2,sample3):\n    F,p=f_oneway(sample1,sample2,sample3)  \n    if p<=0.05:\n        result='Reject'\n    else:\n        result='Accept'\n    print('F Statistic: {:.2f} \\tp-value: {:.5f} \\tNull Hypothesis: {}'.format(F, p,result))","285c904a":"chi_square_test('popularity','year')","1189b223":"np.random.seed(40)\nspeechiness = np.random.choice(a= df['speechiness'], size=100)\nenergy = np.random.choice(a= df['energy'], size=100)\ndanceability=np.random.choice(a= df['danceability'], size=100)\n","af05a10c":"anova(speechiness,energy,danceability)","3bd780e5":"Null Hypothesis: 'Acousticness did not decreased over the years\"\n\nAlternate Hypothesis : \"Acousticness decreased over the years\"","3e6ff323":"# F-Test (Chi Sq and ANOVA)","0ba6d287":"# frequency distribution","92413b0e":"Null Hypothesis : There is no variation between speechiness energy and danceability","f40d8e83":"As the P-value is greater than 0.05 so we can not reject the null hypothesis\n\nso the white christmas is indeed the most popular","031aa97a":"As the P-value is not greater than 0.05 so we can reject the null hypothesis\n\nso Frank sinatra was not the most popular artist","d7303960":"# Imports","cefaf52c":"As the P-value is greater than 0.05 so we can not reject the null hypothesis\n\nso Acousticness did not decreased over the years","53a44862":"# ANOVA Test\n\nalpha==0.05","66514963":"# Chi Sq Test\n\nalpha==0.05","926d4c1c":"**Histogram of Popularity Column**","079e876e":"Null Hypothesis: 'Frank Sinatra was the most popular Artist\"\n\nAlternate Hypothesis : \"Frank Sinatra was not the most popular Artist\"","f2c59a7f":"# Hypothesis Testing","be579b46":"# Exploratory Data Analysis","14bfa6a7":"Null Hypothesis: 'White Christmas was the most popular song\"\n\nAlternate Hypothesis : \"White Christmas was not the most popular song\"","06dff975":"# t-test\n\n**significance level (alpha) = 0.05**","5cd31d7d":"**check for null values**","896464ab":"# Z-test\n\n**significance level (alpha) = 0.05**","1e816a85":"# ANALYSIS AND HYPOTHESIS TESTING ON SPOTIFY TRACKS\n\n## **If you like it do upvote it!! :)**","cba30b8c":"Null Hypothesis : There is no relation between year of release and popularity of song"}}