{"cell_type":{"db5d2d66":"code","497b61d5":"code","5de873d0":"code","17321856":"code","24bcd122":"code","9d9abe80":"code","1405db92":"code","fa221d70":"code","fe6ea2ad":"code","a18ea144":"code","140d44be":"code","951d94ca":"code","f1235ed7":"code","eb76f8cf":"code","5aa0560c":"code","7c4935ca":"code","3d4b9640":"code","f9a17126":"code","0daff549":"code","3136b20e":"code","056c0d7f":"code","f8ad6932":"code","e94c63fd":"code","2e936acb":"code","83255d2c":"code","49b35df4":"code","3f7fc982":"code","307ca6d8":"code","ae693ba9":"code","64825851":"code","c45de0d9":"code","f6496000":"code","13edaa5c":"code","aade1bdb":"code","daa455fc":"code","93173c57":"code","0cf02320":"code","0327ea2b":"code","a0408abc":"markdown","dd7349a2":"markdown","a5a607a9":"markdown","76667350":"markdown","f15f0174":"markdown","e94339d9":"markdown","bbdf9426":"markdown","cadae2e3":"markdown","9baef71b":"markdown","eff62387":"markdown","0e919ff7":"markdown","e1cb7a3c":"markdown","94261fca":"markdown","f6071a72":"markdown","36f4c7ea":"markdown","2e3b813b":"markdown"},"source":{"db5d2d66":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","497b61d5":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","5de873d0":"train.head(3)","17321856":"train.describe()","24bcd122":"test.head(3)","9d9abe80":"test.describe()","1405db92":"train.isnull().sum()","fa221d70":"test.isnull().sum()","fe6ea2ad":"# Age Variable\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())\n\n# Fare Variable\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())\n\n# Embarked Variable\ntrain = train[train['Embarked'].notna()] ","a18ea144":"bins = [0, 20, 30, 40, 50, 60, 80]\n\ntrain['Age'] = pd.cut(train['Age'], bins)\ntest['Age'] = pd.cut(test['Age'], bins)\n\nplt.figure(figsize = (9, 6))\nsns.countplot(train['Age'], color = 'gold', label = 'Total')\nsns.countplot(train['Age'][train['Survived'] == 1], color = 'silver', label = 'Survived')\nplt.legend()\nplt.title('Age Group Count')\nplt.show()","140d44be":"survive_df = (train[['PassengerId', 'Sex', 'Survived']].groupby(['Survived', 'Sex']).agg(len)\n                                                       .rename({'PassengerId' : 'Count'}, axis = 1))\n\nsns.set_palette('Paired')\n\nsurvive_df.plot.pie(subplots = True, figsize = (8, 6), autopct = '%1.1f%%', shadow = True, explode = (0, 0.1, 0, 0))\nplt.legend(loc = 'upper right')\nplt.show()","951d94ca":"plt.figure(figsize = (7, 5))\nsns.set_palette('rocket_r')\nsns.countplot(train['Pclass'])\nplt.show()","f1235ed7":"ns_class = train['Pclass'][train['Survived'] == 1].value_counts().to_frame('Count')\n\nsns.set_palette('Paired')\n\nplt.figure(figsize = (6, 6))\nplt.pie(ns_class['Count'], labels = ns_class.index, autopct = '%1.1f%%', shadow = True)\nplt.legend(loc = 'upper right')\nplt.title('Survivors Proportion for each Passenger Class', fontsize = 25)\nplt.show()","eb76f8cf":"train['Title'] = train['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ntest['Title'] = test['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n\nprint(train['Title'].unique(),'\\n')\nprint(test['Title'].unique())","5aa0560c":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\",\n    \"Dona\" : \"Mrs\"\n}\n\ntrain['Title'] = train['Title'].map(Title_Dictionary)\ntest['Title'] = test['Title'].map(Title_Dictionary)","7c4935ca":"train['Members'] = train['SibSp'] + train['Parch']\ntest['Members'] = test['SibSp'] + test['Parch']\n\ntrain.drop(['SibSp', 'Parch', 'Ticket', 'Name'], axis = 1, inplace = True)\ntest.drop(['SibSp', 'Parch', 'Ticket', 'Name'], axis = 1, inplace = True)","3d4b9640":"train.head(3)","f9a17126":"plt.figure(figsize = (6, 6))\nsns.heatmap(train.corr(), annot = True)\nplt.show()","0daff549":"avg_fare_cls = train[['Pclass', 'Fare']].groupby('Pclass').mean()\nsns.set_palette('Blues_r')\nplt.figure(figsize = (5, 5))\nsns.barplot(data = avg_fare_cls.T)\nplt.title('Average Fare Per Class', fontsize = 20)\nplt.show()","3136b20e":"plt.figure(figsize = (8, 6))\nsns.countplot(train['Title'], color = 'magenta', label = 'Total')\nsns.countplot(train['Title'][train['Survived'] == 1], color = 'cyan', label = 'Survived')\nplt.legend()\nplt.show()","056c0d7f":"# Filling Missing values in Cabin with \"Unknown\" --> 'U'\ntrain['Cabin'].fillna('U', inplace = True)\ntest['Cabin'].fillna('U', inplace = True)\n\n# Using only first letter of Cabin feature\ntrain['Cabin'] = train['Cabin'].apply(lambda x : x[0])\ntest['Cabin'] = test['Cabin'].apply(lambda x : x[0])","f8ad6932":"train['Sex'].replace({'male' : 1, 'female' : 0}, inplace = True)\ntest['Sex'].replace({'male' : 1, 'female' : 0}, inplace = True)","e94c63fd":"# Age Dummies for Train and Test datasets\nage_train_d = pd.get_dummies(train['Age'], prefix = 'Age')\nage_test_d = pd.get_dummies(test['Age'], prefix = 'Age')","2e936acb":"# Cabin Dummies for Train and Test datasets\ncabin_train_d = pd.get_dummies(train['Cabin'], prefix = 'Cabin')\ncabin_test_d = pd.get_dummies(test['Cabin'], prefix = 'Cabin')","83255d2c":"# Title Dummies for Train and Test datasets\ntitle_train_d = pd.get_dummies(train['Title'], prefix = 'Title')\ntitle_test_d = pd.get_dummies(test['Title'], prefix = 'Title')","49b35df4":"# Embarked Dummies for Train and Test datasets\nemb_train_d = pd.get_dummies(train['Embarked'], prefix = 'Emb')\nemb_test_d = pd.get_dummies(test['Embarked'], prefix = 'Emb')","3f7fc982":"# Concatenating all the dummy variables with Train and Test dataset\ntrain = pd.concat([train, age_train_d, cabin_train_d, title_train_d, emb_train_d], axis = 1)\ntest = pd.concat([test, age_test_d, cabin_test_d, title_test_d, emb_test_d], axis = 1)","307ca6d8":"train.drop(['Cabin', 'Title', 'Embarked', 'Age', 'PassengerId'], axis = 1, inplace = True)\ntest.drop(['Cabin', 'Title', 'Embarked', 'Age', 'PassengerId'], axis = 1, inplace = True)","ae693ba9":"len(train.columns)","64825851":"len(test.columns)","c45de0d9":"X_train = train[['Pclass', 'Sex', 'Fare', 'Members', 'Age_(0, 20]',\n       'Age_(20, 30]', 'Age_(30, 40]', 'Age_(40, 50]', 'Age_(50, 60]',\n       'Age_(60, 80]', 'Cabin_A', 'Cabin_B', 'Cabin_C', 'Cabin_D', 'Cabin_E',\n       'Cabin_F', 'Cabin_G', 'Cabin_U', 'Title_Master', 'Title_Miss',\n       'Title_Mr', 'Title_Mrs', 'Title_Officer', 'Emb_C', 'Emb_Q', 'Emb_S']] \n\ny_train = train[['Survived']]","f6496000":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV","13edaa5c":"#Logistic Regression\nl_clf = LogisticRegression()\ngrid_values = {\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'penalty': ['l1', 'l2'],\n    'max_iter': list(range(100,800,100)),\n    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n}\n\ngrid_search = GridSearchCV(l_clf, param_grid=grid_values, cv = 5, verbose = 3)\ngrid_search","aade1bdb":"clf = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False).fit(X_train, y_train)","daa455fc":"y_pred = clf.predict(test)","93173c57":"y_pred","0cf02320":"result = pd.DataFrame()\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\nresult['PassengerId'] = test_df['PassengerId']\nresult['Survived'] = y_pred\nresult.head(3)","0327ea2b":"result.to_csv('Titanic_Predciton_Model_LogisticReg.csv', index = False)","a0408abc":"### Analysis on Passenger Class Variable","dd7349a2":"#### Dummy Coding Scheme","a5a607a9":"### Reducing columns","76667350":"### Correlation Matrix","f15f0174":"# Extracting the Title form Passenger Name\n\n+ VIP's have most chances of Surviving than others.","e94339d9":"+ Almost 53% of Male passengers did not survive and only 9% of females lost their lives.\n+ So, Clearly Survival proportion of Female passengers is much better than Male passengers.","bbdf9426":"# Data Cleaning\n\n### Missing Values","cadae2e3":"+ Assigning 1 to Male Passengers and 0 to Female Passenger","9baef71b":"+ So, the dataset have some missing values in Age, Fare, Cabin and Embarked Columns.\n+ Missing values in Age ---> Average Age.\n+ Missing Values in Fare ---> Average Fare.","eff62387":"+ Fare and Passenger Class are quite important factor for surviving.","0e919ff7":"### Survivied vs Title","e1cb7a3c":"### Data Preprocessing","94261fca":"# Model Selection","f6071a72":"#### So, there are 26 features in test data and 29 features in train data.","36f4c7ea":"### Analysis on Age Variable","2e3b813b":"### Fare vs Passenger Class"}}