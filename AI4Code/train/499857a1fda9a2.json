{"cell_type":{"184b0e82":"code","86ebea0a":"code","de68620f":"code","30539b42":"code","b20f5dea":"code","7341467a":"code","81e1a2aa":"code","ed479ecd":"code","536739d4":"code","bba3b8e1":"code","0b1650b6":"code","51e7c2a8":"markdown","e68a1d8e":"markdown","ddcf3029":"markdown","d4a279b9":"markdown","127d9eb3":"markdown","68c4b616":"markdown","38a0e3a5":"markdown","878f6a8a":"markdown"},"source":{"184b0e82":"import numpy as np\nimport pandas as pd\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\nfrom sklearn.model_selection import KFold","86ebea0a":"%%time\ndata = pd.read_csv('..\/input\/santander-value-prediction-challenge\/train.csv')\ntarget = np.log1p(data['target'])\ndata.drop(['ID', 'target'], axis=1, inplace=True)","de68620f":"%%time\nleak = pd.read_csv('..\/input\/breaking-lb-fresh-start-with-lag-selection\/train_leak.csv')\ndata['leak'] = leak['compiled_leak'].values\ndata['log_leak'] = np.log1p(leak['compiled_leak'].values)","30539b42":"%%time\ndef rmse(y_true, y_pred):\n    return mean_squared_error(y_true, y_pred) ** .5\n\nreg = XGBRegressor(n_estimators=1000)\nfolds = KFold(4, True, 134259)\nfold_idx = [(trn_, val_) for trn_, val_ in folds.split(data)]\nscores = []\n\nnb_values = data.nunique(dropna=False)\nnb_zeros = (data == 0).astype(np.uint8).sum(axis=0)\n\nfeatures = [f for f in data.columns if f not in ['log_leak', 'leak', 'target', 'ID']]\nfor _f in features:\n    score = 0\n    for trn_, val_ in fold_idx:\n        reg.fit(\n            data[['log_leak', _f]].iloc[trn_], target.iloc[trn_],\n            eval_set=[(data[['log_leak', _f]].iloc[val_], target.iloc[val_])],\n            eval_metric='rmse',\n            early_stopping_rounds=50,\n            verbose=False\n        )\n        score += rmse(target.iloc[val_], reg.predict(data[['log_leak', _f]].iloc[val_], ntree_limit=reg.best_ntree_limit)) \/ folds.n_splits\n    scores.append((_f, score))","b20f5dea":"report = pd.DataFrame(scores, columns=['feature', 'rmse']).set_index('feature')\nreport['nb_zeros'] = nb_zeros\nreport['nunique'] = nb_values\nreport.sort_values(by='rmse', ascending=True, inplace=True)","7341467a":"report.to_csv('feature_report.csv', index=True)","81e1a2aa":"good_features = report.loc[report['rmse'] <= 0.7955].index\nrmses = report.loc[report['rmse'] <= 0.7955, 'rmse'].values\ngood_features","ed479ecd":"test = pd.read_csv('..\/input\/santander-value-prediction-challenge\/test.csv')","536739d4":"%%time\ntst_leak = pd.read_csv('..\/input\/breaking-lb-fresh-start-with-lag-selection\/test_leak.csv')\ntest['leak'] = tst_leak['compiled_leak']\ntest['log_leak'] = np.log1p(tst_leak['compiled_leak'])","bba3b8e1":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\n\nfolds = KFold(n_splits=5, shuffle=True, random_state=1)\n\n# Use all features for stats\nfeatures = [f for f in data if f not in ['ID', 'leak', 'log_leak', 'target']]\ndata.replace(0, np.nan, inplace=True)\ndata['log_of_mean'] = np.log1p(data[features].replace(0, np.nan).mean(axis=1))\ndata['mean_of_log'] = np.log1p(data[features]).replace(0, np.nan).mean(axis=1)\ndata['log_of_median'] = np.log1p(data[features].replace(0, np.nan).median(axis=1))\ndata['nb_nans'] = data[features].isnull().sum(axis=1)\ndata['the_sum'] = np.log1p(data[features].sum(axis=1))\ndata['the_std'] = data[features].std(axis=1)\ndata['the_kur'] = data[features].kurtosis(axis=1)\n\ntest.replace(0, np.nan, inplace=True)\ntest['log_of_mean'] = np.log1p(test[features].replace(0, np.nan).mean(axis=1))\ntest['mean_of_log'] = np.log1p(test[features]).replace(0, np.nan).mean(axis=1)\ntest['log_of_median'] = np.log1p(test[features].replace(0, np.nan).median(axis=1))\ntest['nb_nans'] = test[features].isnull().sum(axis=1)\ntest['the_sum'] = np.log1p(test[features].sum(axis=1))\ntest['the_std'] = test[features].std(axis=1)\ntest['the_kur'] = test[features].kurtosis(axis=1)\n\n# Only use good features, log leak and stats for training\nfeatures = good_features.tolist()\nfeatures = features + ['log_leak', 'log_of_mean', 'mean_of_log', 'log_of_median', 'nb_nans', 'the_sum', 'the_std', 'the_kur']\ndtrain = lgb.Dataset(data=data[features], \n                     label=target, free_raw_data=False)\ntest['target'] = 0\n\ndtrain.construct()\noof_preds = np.zeros(data.shape[0])\n\nfor trn_idx, val_idx in folds.split(data):\n    lgb_params = {\n        'objective': 'regression',\n        'num_leaves': 58,\n        'subsample': 0.6143,\n        'colsample_bytree': 0.6453,\n        'min_split_gain': np.power(10, -2.5988),\n        'reg_alpha': np.power(10, -2.2887),\n        'reg_lambda': np.power(10, 1.7570),\n        'min_child_weight': np.power(10, -0.1477),\n        'verbose': -1,\n        'seed': 3,\n        'boosting_type': 'gbdt',\n        'max_depth': -1,\n        'learning_rate': 0.05,\n        'metric': 'l2',\n    }\n\n    clf = lgb.train(\n        params=lgb_params,\n        train_set=dtrain.subset(trn_idx),\n        valid_sets=dtrain.subset(val_idx),\n        num_boost_round=10000, \n        early_stopping_rounds=100,\n        verbose_eval=0\n    )\n\n    oof_preds[val_idx] = clf.predict(dtrain.data.iloc[val_idx])\n    test['target'] += clf.predict(test[features]) \/ folds.n_splits\n    print(mean_squared_error(target.iloc[val_idx], \n                             oof_preds[val_idx]) ** .5)\n\ndata['predictions'] = oof_preds\ndata.loc[data['leak'].notnull(), 'predictions'] = np.log1p(data.loc[data['leak'].notnull(), 'leak'])\nprint('OOF SCORE : %9.6f' \n      % (mean_squared_error(target, oof_preds) ** .5))\nprint('OOF SCORE with LEAK : %9.6f' \n      % (mean_squared_error(target, data['predictions']) ** .5))\n","0b1650b6":"test['target'] = np.expm1(test['target'])\ntest.loc[test['leak'].notnull(), 'target'] = test.loc[test['leak'].notnull(), 'leak']\ntest[['ID', 'target']].to_csv('leaky_submission.csv', index=False, float_format='%.2f')","51e7c2a8":"### Add leak to test","e68a1d8e":"### Add train leak","ddcf3029":"### Create dataframe","d4a279b9":"### Save submission","127d9eb3":"### Train lightgbm","68c4b616":"I've used the results found in : https:\/\/www.kaggle.com\/johnfarrell\/breaking-lb-fresh-start-with-lag-selection\/output and\nhttps:\/\/www.kaggle.com\/ogrellier\/feature-scoring-vs-zeros\n","38a0e3a5":"### Feature Scoring using XGBoost with the leak feature","878f6a8a":"### Select some features (threshold is not optimized)"}}