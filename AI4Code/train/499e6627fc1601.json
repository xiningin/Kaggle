{"cell_type":{"a007709c":"code","0bf5be08":"code","c609f129":"code","6a06ac48":"code","99b7aa4d":"code","8e680791":"code","07b8df47":"code","bf0fa6c6":"code","176cc691":"code","cfad9c77":"code","70c9e073":"code","1f48a289":"code","697134f2":"code","41b8eba1":"code","1b3d473d":"code","f17d5294":"code","d4509d32":"code","ac54abe0":"code","39102465":"code","53908f89":"code","bb21094e":"code","1e463755":"code","4ab026a7":"markdown","05ed32a8":"markdown","df98edda":"markdown","6c3ca3a1":"markdown","cb6c969d":"markdown","542dfb79":"markdown","d7c8e536":"markdown","700e5eca":"markdown","b46883c0":"markdown","adcf3426":"markdown","1822b7c9":"markdown","3786da86":"markdown","6ba020a2":"markdown","c82f6066":"markdown","62e46f9c":"markdown","009ce545":"markdown","e3a9e1aa":"markdown","c69d37a4":"markdown"},"source":{"a007709c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom geopy.distance import distance\nfrom geopy.distance import vincenty\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0bf5be08":"dfTrain = pd.read_csv(\"..\/input\/californiahouse\/train.csv\",\n          sep=r'\\s*,\\s*',\n          engine='python',\n          na_values=\"\")","c609f129":"dfTest = pd.read_csv(\"..\/input\/californiahouse\/test.csv\",\n         sep=r'\\s*,\\s*',\n         engine='python',\n         na_values=\"\")","6a06ac48":"dfTrain.shape","99b7aa4d":"dfTest.shape","8e680791":"dfTrain = dfTrain.drop(columns=['Id'])\ndfTrain.head()","07b8df47":"dfTrain.describe()","bf0fa6c6":"dfTrain['median_house_value'].hist()","176cc691":"plt.figure(figsize=(6,6))\nplt.title('Matriz de correla\u00e7\u00e3o')\nsns.heatmap(dfTrain.corr(), annot=True, linewidths=0.1)","cfad9c77":"dfTrain = dfTrain.drop(['households', 'total_bedrooms'], axis=1)\nplt.figure(figsize=(6,6))\nplt.title('Matriz de correla\u00e7\u00e3o')\nsns.heatmap(dfTrain.corr(), annot=True, linewidths=0.1)","70c9e073":"SF_COORD = (37.7749, -122.4194)\nLA_COORD = (34.0522, -118.2437)\nSD_COORD = (32.7157, -117.1611)\ndef calc_dist_cities(row):\n    local_coord = (row['latitude'], row['longitude'])\n    row['min_dist'] = min(vincenty(local_coord, SF_COORD).km, vincenty(local_coord, LA_COORD).km, vincenty(local_coord, SD_COORD).km)\n    return row\n\ndfTrain = dfTrain.apply(calc_dist_cities, axis=1)\ndfTrain = dfTrain.drop(['longitude', 'latitude'], axis=1)\nplt.figure(figsize=(6,6))\nplt.title('Matriz de correla\u00e7\u00e3o')\nsns.heatmap(dfTrain.corr(), annot=True, linewidths=0.1)","1f48a289":"def new_feat(row):\n    row['rapp'] = row['total_rooms'] \/ row['population'] * row['median_age']\n    return row\n\ndfTrain = dfTrain.apply(new_feat, axis=1)\ndfTrain = dfTrain.drop(['median_age', 'total_rooms', 'population'], axis=1)\nplt.figure(figsize=(6,6))\nplt.title('Matriz de correla\u00e7\u00e3o')\nsns.heatmap(dfTrain.corr(), annot=True, linewidths=0.1)","697134f2":"scaler = MinMaxScaler()\nselected_columns = ['median_income', 'min_dist', 'rapp']\ndfScaled = scaler.fit_transform(dfTrain[selected_columns])\nx_train, x_test, y_train, y_test = train_test_split(dfScaled, dfTrain['median_house_value'], test_size=0.20)","41b8eba1":"def rmsle(y_test, y_pred):\n    return np.sqrt(np.mean((np.log(y_pred+1) - np.log(y_test+1))**2))\n\nreg = LinearRegression()\nscorer = make_scorer(rmsle, greater_is_better=False)\nreg.fit(x_train, y_train)\ny_pred = reg.predict(x_test)\nprint(\"RMSLE: \" + str(rmsle(y_pred, y_test)))","1b3d473d":"param_grid = dict(n_neighbors=list(range(1,15)))\nneigh = KNeighborsClassifier()\ngrid_obj = GridSearchCV(neigh, param_grid, scoring=scorer, cv=5)\ngrid_obj.fit(x_train, y_train)\ngrid_obj.best_params_","f17d5294":"neigh = KNeighborsClassifier(n_neighbors=1)\nneigh.fit(x_train, y_train)\ny_pred = neigh.predict(x_test)\nprint(\"RMSLE: \" + str(rmsle(y_pred, y_test)))","d4509d32":"las = Lasso()\nparam_grid = dict(alpha=np.divide(list(range(1,100)),100))\ngrid_obj = GridSearchCV(las, param_grid, scoring=scorer, cv=5)\ngrid_obj.fit(x_train, y_train)\ngrid_obj.best_params_","ac54abe0":"las = Lasso(alpha=0.21)\nlas.fit(x_train, y_train)\ny_pred = las.predict(x_test)\nprint(\"RMSLE: \" + str(rmsle(y_pred, y_test)))","39102465":"#rfc = RandomForestClassifier()\n#param_grid = dict(n_estimators=np.multiply(list(range(1,12)), 5), max_depth=np.multiply(list(range(1,10)), 5))\n#grid_obj = GridSearchCV(rfc, param_grid, scoring=scorer, cv=5)\n#grid_obj.fit(x_train, y_train)\n#grid_obj.best_params_","53908f89":"rfc = RandomForestClassifier(n_estimators=50, max_depth=35, random_state=0)\nrfc.fit(x_train, y_train)\ny_pred = rfc.predict(x_test)\nprint(\"RMSLE: \" + str(rmsle(y_pred, y_test)))","bb21094e":"dfTest = dfTest.apply(calc_dist_cities, axis=1)\ndfTest = dfTest.apply(new_feat, axis=1)\ndfTest = dfTest.drop(['longitude', 'latitude', 'median_age', 'total_rooms', 'population', 'households', 'total_bedrooms'], axis=1)\ndfTest.head()","1e463755":"selected_model = las\nx_val_test = scaler.transform(dfTest[selected_columns])\ny_val_test = selected_model.predict(x_val_test)\ndfSave = pd.DataFrame(data={\"Id\" : dfTest[\"Id\"], \"median_house_value\" : y_val_test})\npd.DataFrame(dfSave[[\"Id\", \"median_house_value\"]], columns = [\"Id\", \"median_house_value\"]).to_csv(\"Output.csv\", index=False)","4ab026a7":"Realizando uma an\u00e1lise quantitativa inicial do dados","05ed32a8":"#### Random Forest","df98edda":"Tamb\u00e9m \u00e9 interessante saber como variam os valores das casas","6c3ca3a1":"### Import de bibliotecas","cb6c969d":"Existe uma correla\u00e7\u00e3o bem grande entre households e total_bedrooms por isso retiraremos o primeiro.\n\nAnalogamente ocorre para total_bedrooms e total_rooms de forma que retiraremos o primeiro.","542dfb79":"### PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es\n## Tarefa 3 - Regress\u00e3o","d7c8e536":"Comentado pois demora para fazer o upload, resultado: {'max_depth': 35, 'n_estimators': 50}","700e5eca":"#### Regress\u00e3o linear","b46883c0":"De onde se percebe uma concentra\u00e7\u00e3o de casas na regi\u00e3o de aproximadamente 150k com algumas casas pr\u00f3ximas de 500k.\n\nRealizando uma an\u00e1lise de correla\u00e7\u00e3o.","adcf3426":"### Aplica\u00e7\u00e3o dos modelos","1822b7c9":"### An\u00e1lise de dados","3786da86":"Conseguimos melhorar a correla\u00e7\u00e3o para -0.42.\nMedian_age, total_rooms e population tamb\u00e9m n\u00e3o aparentam ter muita correla\u00e7\u00e3o, vamos transformar em um novo par\u00e2metro que por testes realizados a m\u00e3o apresentou a melhor correla\u00e7\u00e3o: total_rooms * median_age \/ population.","6ba020a2":"### Leitura dos dados","c82f6066":"Replicando as altera\u00e7\u00f5es na base de sa\u00edda","62e46f9c":"#### Ridge\n","009ce545":"A latitude e a longitude n\u00e3o aparentam apresentar correla\u00e7\u00e3o consider\u00e1vel com o valor da casa, vamos converter para a dist\u00e2ncia das tr\u00eas maiores cidades da Calif\u00f3rnia:\n- S\u00e3o Francisco: 37.7749\u00b0 N, 122.4194\u00b0 W\n- Los Angeles: 34.0522\u00b0 N, 118.2437\u00b0 W\n- San Diego: 32.7157\u00b0 N, 117.1611\u00b0 W","e3a9e1aa":"#### KNN","c69d37a4":"### Arquivo de sa\u00edda"}}