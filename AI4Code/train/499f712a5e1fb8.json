{"cell_type":{"049dcebd":"code","6a1554c5":"code","09946b09":"code","8627fdd2":"code","098313cb":"code","ab571f5f":"code","5fc2b4eb":"code","4db4898f":"code","25a1be7c":"code","f0fd7188":"code","04eb9bad":"code","10d50c73":"code","57e757e6":"code","5ca0f713":"code","93dfb661":"code","11821766":"code","9dde051b":"code","c8ab008b":"code","8e219c43":"code","f35afb18":"code","abe77578":"code","12512804":"code","41671bb2":"code","a98bf2a2":"code","fbea38d7":"code","4723bf07":"code","4d66fdf5":"code","b1c756b4":"code","70e718bf":"code","75eb8f52":"code","6c449847":"code","2d7198f2":"code","eecaaaa6":"code","aa61067e":"code","a8fd1fab":"code","ee0c2eaa":"code","0e52e330":"code","4f840a8b":"code","0d101c01":"code","6e981a2a":"code","84e5bba0":"code","81c764d8":"code","60cb298e":"code","39a92047":"code","754bfe63":"code","89276225":"code","0386f047":"code","c203cc70":"code","78f05f06":"code","0855cb1d":"code","59405eee":"code","cf98d07c":"code","bfdbedad":"code","6b257703":"code","f516532f":"code","844a3fcf":"code","df01ec5a":"markdown","070f05d9":"markdown","6f2ed9b0":"markdown","ed6f1487":"markdown","09da86c0":"markdown","33985be4":"markdown","e907f831":"markdown","f680a7f3":"markdown","af9ee57e":"markdown","26540bfd":"markdown","6fdeedbf":"markdown","2cc4e65c":"markdown","2bf9b1c5":"markdown","8e7b383f":"markdown","0432b7fa":"markdown","30259149":"markdown","964521cc":"markdown","232f1d1c":"markdown","6e8cfb17":"markdown","5f186f5d":"markdown"},"source":{"049dcebd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6a1554c5":"#importing the dataset\ncar=pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')","09946b09":"car.head()","8627fdd2":"#shape of the dataset\ncar.shape","098313cb":"#datatypes of the columns\ncar.dtypes","ab571f5f":"#checking null values\ncar.isnull().sum()","5fc2b4eb":"car[car.mileage.isnull()]","4db4898f":"car[car.engine.isnull()]","25a1be7c":"car[car.max_power.isnull()]","f0fd7188":"car[car.torque.isnull()]","04eb9bad":"# dropping the null values\ncar.dropna(axis=0,inplace=True)","10d50c73":"car['torque'].unique()","57e757e6":"#dropping torque column\ncar.drop(['torque'],1,inplace=True)","5ca0f713":"#value counts of top 10 selling cars\ncar.name.value_counts().head(10)","93dfb661":"#visualizing the top 10 most sold cars\nplt.figure(figsize=(12,8))\ncar.name.value_counts().head(10).plot(kind='bar')\nplt.show()","11821766":"print(car['name'].unique())\nprint(car['name'].value_counts().sum())","9dde051b":"#dropping car name column\ncar.drop(['name'],1,inplace=True)","c8ab008b":"#modifying mileage, engine, max_power column\ncar['mileage']=car.mileage.apply(lambda x:float(x.split(' ')[0]))\ncar['engine']=car.engine.apply(lambda x:int(x.split(' ')[0]))\ncar['max_power']=car.max_power.apply(lambda x:float(x.split(' ')[0]))","8e219c43":"#creating new column \"no. of years driven\" by subtracting current year from year 2021 \ncar[\"years_driven\"]=int(2021)-car['year']\n","f35afb18":"#dropping year column\ncar.drop(['year'],1,inplace=True)","abe77578":"#describing the dataset\ncar.describe()","12512804":"#inspecting unique values in each column\ncolumns = pd.DataFrame({\n    \"column\":car.columns,\n    \"unique values\": [len(car[i].unique()) for i in car.columns],\n    \"types\": list(car.dtypes)\n})\nprint(columns)","41671bb2":"sns.lineplot(data=car, x=\"years_driven\", y=\"selling_price\")","a98bf2a2":"plt.figure(figsize=(15,8))\nsns.lineplot(data=car, x=\"km_driven\", y=\"selling_price\")","fbea38d7":"# countplots for fuel,seller_type,transmission and owner\nplt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nsns.countplot(car.fuel)\nplt.subplot(2,2,2)\nsns.countplot(car.seller_type)\nplt.subplot(2,2,3)\nsns.countplot(car.transmission)\nplt.subplot(2,2,4)\nsns.countplot(car.owner)\nplt.show()","4723bf07":"plt.figure(figsize=(15,8))\nsns.countplot(car.seats)","4d66fdf5":"#plotting categorical variable vs target variable\n\nplt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nsns.barplot(car.owner,car.selling_price)\nplt.subplot(2,2,2)\nsns.barplot(car.fuel,car.selling_price)\nplt.subplot(2,2,3)\nsns.barplot(car.seller_type,car.selling_price)\nplt.subplot(2,2,4)\nsns.barplot(car.transmission,car.selling_price)\nplt.show()","b1c756b4":"plt.figure(figsize=(15,8))\nsns.barplot(car.seats,car.selling_price)\nplt.show()","70e718bf":"#engine vs selling_price\nplt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nsns.scatterplot(car.engine,car.selling_price)\nplt.subplot(2,2,2)\nsns.scatterplot(car.mileage,car.selling_price)\nplt.subplot(2,2,3)\nsns.scatterplot(car.max_power,car.selling_price)\nplt.show()","75eb8f52":"# box plot for max_power\nplt.figure(figsize=(15,5))\nsns.boxplot(car.max_power)\nplt.show()","6c449847":"#dropping the outliers\ncar=car[~(car.max_power>260)]\n","2d7198f2":"# box plot for engine\nplt.figure(figsize=(15,5))\nsns.boxplot(car.engine)\nplt.show()","eecaaaa6":"#dropping the outliers\ncar=car[~(car.engine>3000)]","aa61067e":"# box plot for engine\nplt.figure(figsize=(15,5))\nsns.boxplot(car.mileage)\nplt.show()","a8fd1fab":"#dropping the outliers\ncar=car[~(car.mileage>32)|(car.mileage<5)]","ee0c2eaa":"#looking at pairplot for numerical data\nsns.pairplot(car)\nplt.show()","0e52e330":"#plotting the heatmap\nplt.figure(figsize=(16,10))\nsns.heatmap(car.corr(),annot=True)\nplt.show()","4f840a8b":"#dropping seats column\ncar.drop(['seats'],1,inplace=True)","0d101c01":"car['seller_type']=car['seller_type'].map({'Trustmark Dealer':'Trustmark_Dealer','Individual':'Individual','Dealer':'Dealer'})\ncar['owner']=car['owner'].map({'First Owner':'First_Owner','Second Owner':'Second_Owner','Third Owner':'Third_Owner','Fourth & Above Owner':'Fourth_and_Above_Owner','Test Drive Car':'Test_Drive_Car'})","6e981a2a":"#encoding categorical variables\ncar=pd.get_dummies(car,drop_first=True)","84e5bba0":"x=car.drop(['selling_price'],1)\ny=car['selling_price']","81c764d8":"#feature importance\nfrom sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor()\nmodel.fit(x,y)","60cb298e":"model_1=model.feature_importances_\ncolumns=x.columns\nfor i in range(len(columns)):\n    print(\"{} has importance value : {}\".format(columns[i],model_1[i]))\n    ","39a92047":"#vizualizing top 5 important features\nfeat_imp=pd.Series(model.feature_importances_,index=x.columns)\nfeat_imp.nlargest(5).plot(kind='barh')\nplt.show()","754bfe63":"#train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)\n","89276225":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import r2_score\ndef regression(model):\n    model=model()\n    r2=cross_val_score(model,x_train,y_train,scoring='r2',cv=5)\n    mean_r2=np.mean(r2)\n    print(mean_r2)","0386f047":"#training data on RandomforestRegressor model\nfrom sklearn.ensemble import RandomForestRegressor\nregression(RandomForestRegressor)","c203cc70":"#training data on ExtraTreesRegressor model\nfrom sklearn.ensemble import ExtraTreesRegressor\nregression(ExtraTreesRegressor)","78f05f06":"#training data on XGBRegressor model\nfrom xgboost import XGBRegressor\nregression(XGBRegressor)","0855cb1d":"from sklearn.ensemble import ExtraTreesRegressor\nregressor=ExtraTreesRegressor(random_state=49)\n","59405eee":"from sklearn.model_selection import RandomizedSearchCV\nn_estimators= [100, 300, 800, 1000]\nmax_depth = [10, 20, 30]\nmax_features=['auto', 'sqrt']\nmin_samples_split=[2,10,20,50,100]\nmin_samples_leaf=[1,2,5,10]\nhyperparameter={'n_estimators':n_estimators,'max_depth':max_depth,'max_features':max_features,'min_samples_split':min_samples_split,'min_samples_leaf':min_samples_leaf}\nRS_cv=RandomizedSearchCV(estimator=regressor,param_distributions=hyperparameter,scoring='r2',cv=5,n_jobs=4,return_train_score=True,verbose = 4,random_state=49)\nRS_cv.fit(x_train,y_train)","cf98d07c":"#best r2 score and parameter\nprint(RS_cv.best_params_)\nprint(RS_cv.best_score_)","bfdbedad":"#predicting on the test data\nprediction=RS_cv.predict(x_test)","6b257703":"#plotting distribution plot of y_test-prediction\nsns.distplot(y_test-prediction)","f516532f":"#scatter plot between actual outcome and predicted outcome \nplt.scatter(y_test,prediction)","844a3fcf":"#creating pickle file\n# dumping model to that file\nimport pickle\nfile = open('price_regression_model.pkl', 'wb')\npickle.dump(RS_cv, file)","df01ec5a":"Maruti Swift Dzire VDI is the most selling car","070f05d9":"### Finding the Best parameters for our model  ","6f2ed9b0":"## Hyperparameter optimization","ed6f1487":"inferences :\n\ntestdrive cars have high selling price\n\nselling price is high for diesel fuel type cars followed by petrol type\n\nautomatic transmission cars are highly priced than manual transmission\n\ndealer type selling price is more compared to individual selling price","09da86c0":"inferences:\n\nmost of the customers use \"diesel\/petrol\" fuel type cars\n\nmost of the cars are getting sold by individual seller type\n\nmost of the car's transmission is manual\n\nfirst owner cars are getting sold mostly than second,third and fourth and above","33985be4":"Above normal distribution signifies that our model is predicting acurately with some errors","e907f831":"most of the customers buy 5 seater cars","f680a7f3":"## Train test split","af9ee57e":"From the heapmap we can see that, selling price is not dependent on seats.\nThere is a very low correlation between selling price and seats. So we can drop seats column ","26540bfd":"7 seater cars have the high Selling price followed by 2 seater cars ","6fdeedbf":"There is very less scatter between the actual outcome and predicted outcome ","2cc4e65c":"Dropping torque column since the data have different type of units and different representation","2bf9b1c5":"Since ExtraTreesRegressor model is giving highest r^2 value, so we will do hyperparameter optimisation on ExtraTreesRegressor model ","8e7b383f":"The torque,mileage,max_power,engine and seats columns have null values at the same row indices. \nSo we can drop all the null values.","0432b7fa":"Dropping car name column as it is difficult to predict the selling price based on car name","30259149":"## Model training  ","964521cc":"As the no. of years driven increases, selling price decreases","232f1d1c":"### Feature importance","6e8cfb17":"## Feature engineering and vizualization","5f186f5d":"Most of the cars have selling price less than 4 lakhs, and also we can see that as the kms_driven increases selling price decreases"}}