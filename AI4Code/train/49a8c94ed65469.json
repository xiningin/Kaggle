{"cell_type":{"429d2a79":"code","16798316":"code","f85fb76d":"code","471f75ff":"code","3601f5e6":"code","54a6cb89":"code","d52055d9":"code","0b7fc7e0":"code","20c8a787":"code","897cd205":"code","07508020":"code","9c44b1bc":"code","80b3bd06":"code","e8c61f35":"code","f0203627":"code","47a22070":"code","bea27b2a":"code","07d45097":"code","693d7c69":"code","ace7ab2f":"code","8a2ca17c":"code","b83cd4d5":"code","f5ecf095":"code","e6daf8ed":"code","a29c5e6e":"code","d9dcc764":"markdown","24cc489c":"markdown","c9907fb8":"markdown","265de1a6":"markdown","63875c43":"markdown","10d59b23":"markdown","20c22c81":"markdown","bac1b94c":"markdown","e80bd85a":"markdown","308cb5ec":"markdown","1ef10c60":"markdown","5762e379":"markdown","429dd2e2":"markdown","9eec4371":"markdown","8d427fb9":"markdown","c0af3447":"markdown","e4197d0e":"markdown","2220bf12":"markdown","239a8901":"markdown"},"source":{"429d2a79":"import numpy as np\nnp.random.seed(0)\nfrom tensorflow.random import set_seed\nset_seed(0)\n\nimport pandas as pd\nfrom tensorflow import keras\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom tensorflow.keras import layers\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","16798316":"actual_df = pd.read_csv('..\/input\/gene-expression\/actual.csv')\nactual_df.head()","f85fb76d":"actual_df['cancer'].value_counts()","471f75ff":"actual_df.shape","3601f5e6":"y = actual_df.replace({'ALL':0, 'AML':1})\ny = y.set_index('patient')\nlabels = ['ALL', 'AML']","54a6cb89":"train_df = pd.read_csv('..\/input\/gene-expression\/data_set_ALL_AML_train.csv')\ntest_df = pd.read_csv('..\/input\/gene-expression\/data_set_ALL_AML_independent.csv')","d52055d9":"print(\"Shape of Training Data: \", train_df.shape)\nprint(\"Shape of Testing Data: \", test_df.shape)","0b7fc7e0":"train_df.head()","20c8a787":"train_to_keep=[col for col in train_df.columns if \"call\" not in col]\ntest_to_keep=[col for col in test_df.columns if \"call\" not in col]\n\nX_train = train_df[train_to_keep]\nX_test = test_df[test_to_keep]","897cd205":"X_train = X_train.T\nX_test = X_test.T","07508020":"X_train.columns = X_train.iloc[1]\nX_test.columns = X_test.iloc[1]\n\nX_train = X_train.drop(['Gene Description', 'Gene Accession Number'])\nX_test = X_test.drop(['Gene Description', 'Gene Accession Number'])","9c44b1bc":"X_train.index = X_train.index.astype(int)\nX_train.sort_index(inplace=True)\n\nX_test.index = X_test.index.astype(int)\nX_test.sort_index(inplace=True)","80b3bd06":"print(\"Shape of Training data:\\t\", X_train.shape)\nprint(\"Shape of Testing Data:\\t\", X_test.shape)","e8c61f35":"X_train.head()","f0203627":"y_train = y['cancer'][:38]\ny_test = y['cancer'][38:]","47a22070":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","bea27b2a":"fig, ax = plt.subplots(ncols=2, figsize=(15,5))\nsns.distplot(np.concatenate(X_train.values), ax=ax[0]).set_title('Original Data')\nsns.distplot(np.concatenate(X_train_scaled), ax=ax[1]).set_title('Scaled Data')\nplt.tight_layout\nplt.show()","07d45097":"pca = PCA(n_components = 0.95)\nX_train_pca = pca.fit_transform(X_train_scaled)\nX_test_pca = pca.transform(X_test_scaled)\nprint(X_train_pca.shape)\nprint(X_test_pca.shape)","693d7c69":"pca3 = PCA(n_components = 3).fit_transform(X_train_scaled)\ncolors = np.where(y_train==0, 'red', 'blue')\nplt.clf()\nfig = plt.figure(1, figsize=(10,6 ))\nax = Axes3D(fig, elev=-150, azim=110,)\nax.scatter(pca3[:, 0], pca3[:, 1], pca3[:, 2], c=colors, cmap=plt.cm.Paired,linewidths=10)\nax.set_title(\"First three PCA directions\")\nax.set_xlabel(\"PC1\")\nax.w_xaxis.set_ticklabels([])\nax.set_ylabel(\"PC2\")\nax.w_yaxis.set_ticklabels([])\nax.set_zlabel(\"PC3\")\nax.w_zaxis.set_ticklabels([])\nplt.show()","ace7ab2f":"NN_model = keras.Sequential([\n    layers.Dense(32, activation='relu', input_shape=X_train_pca[1].shape),\n    layers.Dense(16, activation='relu'),\n    layers.Dense(1, activation='sigmoid')\n])","8a2ca17c":"NN_model.compile(\n    loss='binary_crossentropy',\n    optimizer='adam',\n    metrics=['binary_accuracy']\n)","b83cd4d5":"early_stopping = keras.callbacks.EarlyStopping(\n    patience=5,\n    min_delta=0.005,\n    restore_best_weights=True,\n)","f5ecf095":"train_history = NN_model.fit(\n    X_train_pca, y_train,\n    validation_data=(X_test_pca, y_test),\n    batch_size = 8,\n    epochs = 200,\n    callbacks=[early_stopping]\n)","e6daf8ed":"pred = NN_model.predict_classes(X_test_pca)\nprint('Neural Network accuracy: ', round(accuracy_score(y_test, pred), 3))","a29c5e6e":"cm_nn = confusion_matrix(y_test, pred)\n\nax = plt.subplot()\nsns.heatmap(cm_nn, annot=True, ax = ax, fmt='g', cmap='Greens') \n\n# Labels, title and ticks\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels') \nax.set_title('Neural Network Confusion Matrix') \nax.xaxis.set_ticklabels(labels) \nax.yaxis.set_ticklabels(labels, rotation=360);","d9dcc764":"Loading training and testing datasets.","24cc489c":"## Dimentionality reduction(PCA)","c9907fb8":"# Importing the Modules","265de1a6":"## Standardizing Features","63875c43":"# Neural Network","10d59b23":"The first 4 lines will make your code reproducible.","20c22c81":"You need to apply the same PCA on training and testing sets.","bac1b94c":"The 7129 gene descriptions are provided as the rows and the values for each patient as the columns. This will clearly require some tidying up.","e80bd85a":"We can remove \"call\" columns from training and testing dataframes.","308cb5ec":"Now we can simply transpose both training and testing dataframes so that genes become columns(features) and patients become rows.","1ef10c60":"Recode label to numeric.","5762e379":"95% of variance is explained by 32 principal components. We can't plot something in 32 dimensions, so let's just see what the PCA looks like when we just pick the top three compoments.","429dd2e2":"Neither the training and testing row indexes are not in numeric order, so it's important that we reorder these, so that the labels will line up with the corresponding data.","9eec4371":"The first 2 rows are duplicated so we can remove 'Gene Description' and set 'Gene Accession Number' as the column headers.","8d427fb9":"# Loading Data","c0af3447":"The \"actual\" file contains all 72 patients in the study and the labels.","e4197d0e":"Now let's split the target labels into training and testing targets.","2220bf12":"Note that the test set must use identical scaling to the training set.","239a8901":"In the end, our data looks like this:"}}