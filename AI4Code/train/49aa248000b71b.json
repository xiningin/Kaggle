{"cell_type":{"3a8adcd8":"code","8ad7fe8e":"code","6bdeddeb":"code","27735d0c":"code","8e39fe27":"code","947db55a":"code","0dab49ef":"code","c65e0a45":"code","18456cec":"code","dbf5ca42":"code","355b3111":"code","7e341dcc":"code","1460a31b":"code","fbb398d8":"code","cd1d887e":"code","7e15e5b4":"code","d2c34caf":"code","de032d75":"code","e0070160":"code","31e07cef":"code","3b5ef891":"code","d0b294e1":"code","b7c0b894":"code","5bf115c3":"code","4a9538a9":"code","9683ca51":"code","612f6451":"code","551ec254":"code","1564e469":"code","9d24a267":"code","c4eccfb7":"code","1f74acaa":"code","85cceeb5":"code","5618b328":"code","338fabf5":"code","97841cba":"code","1c2c74a3":"code","62718810":"code","15fd5913":"code","0ba39a73":"code","fcc6f7b7":"code","42eae44e":"code","34c1643e":"code","222fc27e":"code","4bd83332":"code","131dd6df":"code","434cf169":"code","87a41042":"code","86fbfdbe":"code","a28fd414":"code","09a053e7":"code","d6b4496f":"code","8fd6a9c7":"code","92cf17fb":"code","6de51d7f":"code","69a4787e":"code","0fab774e":"code","61fe23a8":"code","18e60e0d":"code","ae4d5fa4":"code","632a41e1":"code","ee86b990":"code","fe095943":"code","315ee06a":"code","4b158dec":"code","8bbe3495":"code","b0a075dc":"code","64bde291":"code","5b09c980":"code","e70aace7":"markdown","ff475953":"markdown","b09d52e0":"markdown","8a49d3c3":"markdown","dcdc2d1e":"markdown","13535ebd":"markdown","5c3fe2fd":"markdown","9077197a":"markdown","f2f2908c":"markdown","070c65cc":"markdown","cc586d48":"markdown","4503f7dd":"markdown","dd6d1a88":"markdown","b090fc8f":"markdown","62eded4f":"markdown","aeb54720":"markdown","92eedb3a":"markdown","a911deaf":"markdown","d2249333":"markdown","5103ae7f":"markdown","1d935f22":"markdown","d6b2036f":"markdown","a307e345":"markdown","d40416f2":"markdown","d041ce47":"markdown","f7a0c604":"markdown","38879b9c":"markdown","dddaf849":"markdown","0892900e":"markdown","3f6579df":"markdown"},"source":{"3a8adcd8":"import os\nimport re\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('seaborn')\n%matplotlib inline","8ad7fe8e":"import sklearn\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as lgb","6bdeddeb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntrain_df.head(5)","27735d0c":"print(\"Titanic train dateset Shape : \", train_df.shape)\nprint(\"Titanic test dateset Shape : \", test_df.shape)","8e39fe27":"train_df.info()","947db55a":"train_df.describe()","0dab49ef":"Purples_palette = sns.color_palette(\"Purples\", 10)\nBuPu_palette = sns.color_palette(\"BuPu\", 10)\nsns.palplot(Purples_palette)\nsns.palplot(BuPu_palette)","c65e0a45":"train_df_null_count = pd.DataFrame(train_df.isnull().sum(), columns=[\"Train Null count\"])\ntest_df_null_count = pd.DataFrame(test_df.isnull().sum(), columns=[\"Test Null count\"])\n\nnull_df = pd.concat([train_df_null_count,test_df_null_count],axis=1)\nnull_df.head(100).style.background_gradient(cmap='Purples')","18456cec":"msno.matrix(df=train_df.iloc[:,:],figsize=(5,5),color=BuPu_palette[4])\nplt.show()","dbf5ca42":"Purples_palette_two = [Purples_palette[3], Purples_palette[6]]","355b3111":"fig = plt.figure(figsize=(8, 8))\n\ngs = fig.add_gridspec(3, 2)\n\n\nax_sex_survived = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='Sex',hue='Survived', data=train_df, ax=ax_sex_survived, \n              palette=Purples_palette_two)\n\n# ax_survived_sex.set_yticks([])\n\nax_pie_male = fig.add_subplot(gs[2, 0])\nax_pie_female = fig.add_subplot(gs[2, 1])\n# Sex\nmale = train_df[train_df['Sex']=='male']['Survived'].value_counts().sort_index()\nax_pie_male.pie(male, labels=male.index, autopct='%1.1f%%',explode = (0, 0.1), startangle=90,\n               colors=Purples_palette_two\n               )\n\nfemale = train_df[train_df['Sex']=='female']['Survived'].value_counts().sort_index()\nax_pie_female.pie(female, labels=female.index, autopct='%1.1f%%',explode = (0, 0.1), startangle=90,\n                colors=Purples_palette_two\n                 )\n\nfig.text(0.25,0.92,\"Distribution of Survived by Sex\", fontweight=\"bold\", fontfamily='serif', fontsize=17)\n\nax_sex_survived.patch.set_alpha(0)\n\nplt.show()","7e341dcc":"pd.crosstab(train_df['Sex'],train_df['Survived'],margins=True).style.background_gradient(cmap='Purples')","1460a31b":"pd.crosstab(train_df['Pclass'],train_df['Survived'],margins=True).style.background_gradient(cmap='BuPu')","fbb398d8":"BuPu_palette","cd1d887e":"Purples_palette_two_1 = [Purples_palette[4], Purples_palette[8]]\nBuPu_palette_two = [BuPu_palette[2],BuPu_palette[4]]","7e15e5b4":"fig, ax = plt.subplots(1,2, figsize=(16,8))\n\n\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train_df, palette=BuPu_palette_two, ax=ax[0])\nax[0].patch.set_alpha(0)\nax[0].text(-0.5,100,\"Plot showing the relationship \\nbetween Pclass and Age and Survived\", fontweight=\"bold\", fontfamily='serif', fontsize=13)\n\n\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=train_df, palette=Purples_palette_two_1, ax=ax[1])\nax[1].set_yticks([])\nax[1].set_ylabel('')\nax[1].patch.set_alpha(0)\nax[1].text(-0.5,100,\"Plot showing the relationship \\nbetween Sex and Age and Survived\", fontweight=\"bold\", fontfamily='serif', fontsize=13)\n\nfig.text(0.1,1,\"Violin plot showing the relationship Age and Survived\", fontweight=\"bold\", fontfamily='serif', fontsize=20)\nplt.show()","d2c34caf":"train_df","de032d75":"fig = px.scatter_3d(train_df[:1000], x='Age', y='Survived', z='Pclass',color='Age')\nfig.show()","e0070160":"corr = train_df.corr()\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, cmap='BuPu')\nplt.title(\"Titanic train data Heatmap\", fontweight=\"bold\", fontsize=17)\nplt.show()","31e07cef":"train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())\ntrain_df['Cabin'] = train_df['Cabin'].fillna(\"N\")\ntrain_df['Embarked'] = train_df['Embarked'].fillna(\"N\")","3b5ef891":"train_df.head()","d0b294e1":"train_df.loc[train_df[\"Fare\"].isnull(),\"Fare\"] = train_df[\"Fare\"].mean()\ntrain_df[\"Fare\"] = train_df[\"Fare\"].map(lambda i : np.log(i) if i > 0 else 0)","b7c0b894":"f, ax = plt.subplots(1, 1, figsize=(8, 6))\nsns.distplot(train_df['Fare'], label='Skewness : {:.2f}'.format(train_df['Fare'].skew()), ax=ax, color=BuPu_palette[-1])\nplt.legend(loc='best')\nplt.title(\"Check train data Skewness\", fontweight=\"bold\", fontsize=18)\nax.patch.set_alpha(0)\nplt.show()","5bf115c3":"train_df['Cabin'] = train_df['Cabin'].str[:1]\ntrain_df.head()","4a9538a9":"train_df.drop(['Name','PassengerId','Ticket'],axis=1,inplace=True)\ntrain_df.head()","9683ca51":"train_df['Cabin'].value_counts()","612f6451":"Cabin_T_index = train_df[train_df['Cabin']=='T'].index\ntrain_df.drop(Cabin_T_index,inplace=True)","551ec254":"train_df['Embarked'].value_counts()","1564e469":"Embarked_N_index = train_df[train_df['Embarked']=='N'].index\ntrain_df.drop(Embarked_N_index,inplace=True)","9d24a267":"train_df.head()","c4eccfb7":"train_df = pd.get_dummies(train_df)\ntrain_df.head()","1f74acaa":"train_df.shape","85cceeb5":"x = train_df.drop('Survived',axis=1)\ny = train_df['Survived']","5618b328":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","338fabf5":"print(\"X train data size : {}\".format(x_train.shape))\nprint(\"Y train data size : {}\".format(y_train.shape))\nprint(\" \")\nprint(\"X test data size : {}\".format(x_test.shape))\nprint(\"Y test data size : {}\".format(y_test.shape))","97841cba":"log_reg = LogisticRegression()\nlog_reg.fit(x_train,y_train)\npred = log_reg.predict(x_test)\nprint(\"Model Accuracy : \", accuracy_score(pred,y_test))","1c2c74a3":"dtree = DecisionTreeClassifier()\ndtree.fit(x_train,y_train)\npred = dtree.predict(x_test)\nprint(\"Model Accuracy : \", accuracy_score(pred,y_test))","62718810":"param = {'max_depth':[2,4,6,8],\n         'min_samples_split':[2,3,5],\n         'min_samples_leaf':[1,3,5]\n        }\ngrid = GridSearchCV(dtree,param_grid = param,scoring = 'accuracy',cv=5)\ngrid.fit(x,y)","15fd5913":"print(\"DecisionTreeClassifier RGridSearchCV's Best parametes : \")\ngrid.best_params_","0ba39a73":"print(\"DecisionTreeClassifier RGridSearchCV's Bset score : {}\".format(grid.best_score_))","fcc6f7b7":"scores = pd.DataFrame(grid.cv_results_)\nscores[['params','mean_test_score', 'split0_test_score','split1_test_score', 'split2_test_score', 'split3_test_score', 'split4_test_score', ]].style.background_gradient(cmap='Purples')","42eae44e":"score = cross_val_score(dtree, x, y,scoring='accuracy',cv=5)\nprint(\"Cross val socre's mean Accuracy : {}\".format(score.mean()))","34c1643e":"fig, ax = plt.subplots(1,1,figsize=(5,5))\nplt.plot(score, 's-',color=BuPu_palette[-1])\nax.set_title(\"cross_val_score per score\", fontweight=\"bold\", fontsize=17)\nax.set_xticks(range(0,5,1))\nax.set_ylabel(\"Score\")\nplt.show()","222fc27e":"rfc = RandomForestClassifier()","4bd83332":"param = {'n_estimators' : [100],\n         'max_depth':[10,12,14],\n         'min_samples_split':[1,1.5,2],\n         'min_samples_leaf':[5,7,9]\n        }\nrf_grid = GridSearchCV(rfc,param_grid = param,scoring = 'accuracy',cv=5)\nrf_grid.fit(x_train, y_train)","131dd6df":"print(\"RandomForestClassifier RGridSearchCV's Best parametes : \")\nrf_grid.best_params_","434cf169":"print(\"RandomForestClassifier RGridSearchCV's Bset score : {}\".format(rf_grid.best_score_))","87a41042":"scores = pd.DataFrame(rf_grid.cv_results_)\nscores[['params','mean_test_score', 'split0_test_score','split1_test_score', 'split2_test_score', 'split3_test_score', 'split4_test_score', ]].style.background_gradient(cmap='Purples')","86fbfdbe":"lgbm_x_test, lgbm_x_val, lgbm_y_test, lgbm_y_val = train_test_split(x_test, y_test, test_size=0.5)","a28fd414":"model = lgb.LGBMClassifier(n_estimators=5000)","09a053e7":"params = {'max_depth': [5, 8, 10],\n          'min_child_samples': [ 60, 70, 80],\n         'num_leaves' : [5, 8, 10]}","d6b4496f":"grid = GridSearchCV(model, param_grid=params)\ngrid.fit(x_train, y_train, early_stopping_rounds=100, eval_metric='binary_logloss',\n         eval_set=[(lgbm_x_val, lgbm_y_val)])","8fd6a9c7":"print(\"LGBMClassification GridSearchCV's Best parametes : \")\ngrid.best_params_","92cf17fb":"print(\"LGBMClassification GridSearchCV's Best Score : {}\".format(grid.best_score_))","6de51d7f":"model = lgb.LGBMClassifier(\n    n_estimators=1000,\n    num_leaves=8,\n    max_depth=8,\n    min_data=80,\n    learning_rate=0.008,\n    boosting='gbdt',\n    objective='binary',\n    metric='binary_logloss',\n    n_jobs=-1\n)","69a4787e":"model.fit(x_train, y_train,\n               eval_set=[(lgbm_x_val, lgbm_y_val)],\n               early_stopping_rounds=100\n               )","0fab774e":"pred = model.predict(lgbm_x_test)\nprint('Predict test data Accuracy : {:.4f}'.format(accuracy_score(lgbm_y_test, pred)))","61fe23a8":"pred = model.predict(x_test)\nprint('Predict test data Accuracy : {:.4f}'.format(accuracy_score(y_test, pred)))","18e60e0d":"submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ae4d5fa4":"test.head()","632a41e1":"test['Age'] = test['Age'].fillna(test['Age'].median())\ntest['Cabin'] = test['Cabin'].fillna(\"N\")\ntest['Embarked'] = test['Embarked'].fillna(\"N\")","ee86b990":"test.loc[test[\"Fare\"].isnull(),\"Fare\"] = test[\"Fare\"].mean()\ntest[\"Fare\"] = test[\"Fare\"].map(lambda i : np.log(i) if i > 0 else 0)","fe095943":"test['Cabin'] = test['Cabin'].str[:1]","315ee06a":"test.drop(['Name','PassengerId','Ticket'],axis=1,inplace=True)","4b158dec":"test = pd.get_dummies(test)\ntest.head()","8bbe3495":"test_pred = model.predict(test)","b0a075dc":"submission['Survived'] = test_pred\nsubmission.head()","64bde291":"submission['Survived'].value_counts()","5b09c980":"submission.to_csv('submission.csv',index=False)","e70aace7":"### 4-3) Drop unuseful columns","ff475953":"### 3-4) Plot relationship Age and Survived with Violin plot ","b09d52e0":"### 3-2) Plot the Distribution of Survived by Sex","8a49d3c3":"### 6-5) Select Model\n##### => This Notebook will use LGBMClassifier Model","dcdc2d1e":"### 6-4) * LGBMClassifier Modeling (with GridSearchCV)","13535ebd":"##### reference \n* https:\/\/www.kaggle.com\/subinium\/subin-s-visualization-notebooks-list: EDA part (Visualiztion)\n* https:\/\/kaggle-kr.tistory.com\/32 : EDA part (Visualiztion)\n* https:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution : Modeling part\n\n\n###  If this notebook is useful for your kaggling, \"UPVOTE\" for it \ud83d\udc40\n#### THX to Reading My Notebook\ud83c\udf08","5c3fe2fd":"### 5-2) Split Train data \/ Test data","9077197a":"### 6-1) LogisticRegression Modeling","f2f2908c":"# 2. Check out my data\n* Check Shape \/ Info \/ Describe","070c65cc":"### 7-1) Test data Preprocessing","cc586d48":"***\n\n## My workflow\n#### 1. Import & Install libray\n* Import basic libray\n* Import enginnering libray\n\n#### 2. Check out my data\n* Check Shape \/ Info \/ Describe\n\n#### 3. Exploratory Data Analysis(EDA) with Visualization [Before Preprocessing]\n* Plot the null values\n* Plot the Distribution of Survived by Sex\n* Plot Crosstab DataFrame ( Survived by Sex | Survived by Pclass )\n* Plot relationship Age and Survived with Violin plot \n* Plot the Survived and Pclass per Age with Sex [3d interactive Plot]\n* Titanic data Heatmap Plot\n\n#### 4. Prepocessing Data\n* Null value preprocessing\n* Normalize \"Fare\" | \"Cabin\" data\n* Drop unuseful columns\n* Skeweness Value(Outlier) Preprocessing\n\n#### 5. Feature Enginnering \n* OneHot Encoding\n* Split Train data \/ Test data\n\n#### 6. Modeling\n* LogisticRegression Modeling\n* DecisionTreeClassifier Modeling (with GridSearchCV \/ CrossValScore)\n* RandomForestClassifier Modeling (with GridSearchCV)\n* LGBMClassifier Modeling (with GridSearchCV)\n* Select Model\n\n#### 7. Submission\n* Test data Preprocessing\n* Submit the predictions","4503f7dd":"### 5-1) OneHot Encoding","dd6d1a88":"### 3-5) Plot the Survived and Pclass per Age with Sex [3d interactive Plot]","b090fc8f":"# 4. Prepocessing Data\n* Null value preprocessing\n* Normalize \"Fare\" | \"Cabin\" data\n* Drop unuseful columns\n* Skeweness Value(Outlier) Preprocessing","62eded4f":"### 6-2) DecisionTreeClassifier Modeling (with GridSearchCV \/ CrossValScore)","aeb54720":"# 5. Feature Enginnering \n* OneHot Encoding\n* Split Train data \/ Test data","92eedb3a":"# 7. Submission\n* Test data Preprocessing\n* Submit the predictions","a911deaf":"### 7-2) Submit the predictions","d2249333":"##### => Takes log transformation for data normalization.","5103ae7f":"### 3-6) Titanic data Heatmap Plot","1d935f22":"\n![titanic.jpg](attachment:5b38db78-b195-4d7f-987c-b59282135e28.jpg)\n\n# Titanic - Machine Learning from Disaster\n## Overview\n\nThis Notebook will be completed in two main ways.<br\/>\nFirst, find and visualize useful data or meaningful relationships within the data.<br\/>\nSecond, select a model based on the visualization of the previous process. Transform or refine the data into the appropriate form for the model to be used.<br\/><br\/>\n\n\nThis competition predicts survival through Survival, Pclass, Sex, Age, ...etc.<br\/>\nIt is the most representative competition of kaggle, and I will complete my notebooks based on my experience of participating in other competitions.\n\n##### \"What we need to be careful about here is that we don't have to use all the data to make predictions.\"<br\/>\n\n#### My opinion :\n* 1) We think it is important to understand the data well during the competition and to select the necessary data well.\n* 2) In addition, the process of preprocessing the data so that the model can learn well is also important.","d6b2036f":"### 6-3) RandomForestClassifier Modeling (with GridSearchCV)","a307e345":"#### \u2714\ufe0f This notebook will use this palettes.","d40416f2":"# 3. Exploratory Data Analysis(EDA) with Visualization [Before Preprocessing]\n* Plot the null values\n* Plot the Distribution of Survived by Sex\n* Plot Crosstab DataFrame ( Survived by Sex | Survived by Pclass )\n* Plot relationship Age and Survived with Violin plot \n* Plot the Survived and Pclass per Age with Sex [3d interactive Plot]\n* Titanic data Heatmap Plot","d041ce47":"### 3-1) Plot the null values","f7a0c604":"### 4-2) Normalize \"Fare\" | \"Cabin\" data","38879b9c":"# 1. Import & Install libray\n* Import basic libray\n* Import enginnering libray","dddaf849":"# 6. Modeling\n* LogisticRegression Modeling\n* DecisionTreeClassifier Modeling (with GridSearchCV \/ CrossValScore)\n* RandomForestClassifier Modeling (with GridSearchCV)\n* LGBMClassifier Modeling (with GridSearchCV)\n* Select Model","0892900e":"### 4-1) Null value preprocessing","3f6579df":"### 3-3) Plot Crosstab DataFrame ( Survived by Sex | Survived by Pclass )"}}