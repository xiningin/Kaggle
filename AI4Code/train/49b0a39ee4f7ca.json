{"cell_type":{"fcf7e192":"code","a250f04a":"code","d20d1df0":"code","715b2ff8":"code","8d2b9f2f":"code","b7d0069e":"code","0eeca331":"code","50c40c8d":"code","bf9e9567":"code","ea3bff41":"code","e0bdafc0":"code","5763c055":"code","9abd6cef":"code","fc220100":"code","c0c07d7e":"code","8119ca78":"code","6a4710d6":"code","23614057":"code","6bfb0132":"code","f49feb72":"code","e7a5b672":"code","3a413ab5":"code","ab2240b2":"code","930eb2c1":"code","065f1900":"code","ab2a6c1e":"code","e3b78a2b":"code","8c3b77f2":"code","93586319":"code","189a7c3b":"code","c32d56ee":"code","6e7939af":"code","735ac9e6":"code","718bbf5e":"code","b9eb92af":"code","fc9d6fd7":"code","06239b8c":"code","bcb025e4":"code","ed54b358":"code","07e20db1":"code","63f0e5bf":"code","dfbf525f":"code","e7c92417":"code","3507a048":"code","a9129a38":"code","41b8661e":"code","4f2da641":"code","1c14a865":"code","2c8a5e5f":"code","2bbe3341":"code","79a2e373":"code","9dceea54":"code","f0e3f91b":"code","b64e9298":"code","4b96ca39":"code","d93fa24b":"markdown","35aeb23b":"markdown"},"source":{"fcf7e192":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a250f04a":"df=pd.read_csv(\"..\/input\/Big_Cities_Health_Data_Inventory.csv\")","d20d1df0":"df.head()","715b2ff8":"df.info()","8d2b9f2f":"df[df.duplicated(keep=False)]","b7d0069e":"df.duplicated().sum()","0eeca331":"df.iloc[12320:12325,:]","50c40c8d":"df=df.drop_duplicates()","bf9e9567":"df.iloc[12320:12325,:]","ea3bff41":"#Since there are so many categorical column analyze what are the coluns are required.","e0bdafc0":"df.columns","5763c055":"df['Indicator Category'].value_counts()","9abd6cef":"df.Indicator.nunique()","fc220100":"df.Indicator.value_counts()","c0c07d7e":"#Assuming\/understanding that based on indicator it is already categorized and given as indocator category. So drop indaicator column","8119ca78":"df=df.drop(columns='Indicator')","6a4710d6":"df.Year.value_counts()","23614057":"#considering the rows which is not having the -(hyphen)\ndf = df[~df.Year.str.contains(\"-\")]","6bfb0132":"df.Year.value_counts()","f49feb72":"df.Gender.value_counts()","e7a5b672":"df['Race\/ Ethnicity'].value_counts()","3a413ab5":"df.Place.value_counts()","ab2240b2":"df['BCHC Requested Methodology'].value_counts()","930eb2c1":"df=df.drop(columns='BCHC Requested Methodology')","065f1900":"df.columns","ab2a6c1e":"df.Source.value_counts()","e3b78a2b":"df.Notes.value_counts()","8c3b77f2":"df.Methods.value_counts()","93586319":"#unable find any relevance - so removing the columns\ndf= df.drop(columns=[\"Source\",\"Notes\",\"Methods\"])\n\n","189a7c3b":"df.columns","c32d56ee":"df.info()","6e7939af":"df.Place","735ac9e6":"df[\"city_Info\"] = df.Place.apply(lambda x : x[-2:])","718bbf5e":"df[\"city_Info1\"] = df.Place.apply(lambda x : x[:-4])","b9eb92af":"df.city_Info1.head()","fc9d6fd7":"df[\"city_Info1\"].value_counts()","06239b8c":"df[\"city_Info\"].head()","bcb025e4":"df[\"city_Info\"].value_counts()","ed54b358":"df.head()","07e20db1":"df=df.drop(columns='Place')","63f0e5bf":"df.head()","dfbf525f":"df.Value.isna().sum()","e7c92417":"df.dropna(inplace=True)","3507a048":"#encoding \ndf_column_cat = df.select_dtypes(exclude=np.number).columns","a9129a38":"encoded_cat_col = pd.get_dummies(df[df_column_cat])","41b8661e":"df_final = pd.concat([df['Value'],encoded_cat_col], axis = 1)","4f2da641":"X = df_final.drop(columns=['Value'])\ny = df_final['Value']","1c14a865":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score","2c8a5e5f":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, random_state = 0)\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)","2bbe3341":"print(\"*****coefficient valuessss\",model.coef_)\nprint(\"*****intercept iss\",model.intercept_)","79a2e373":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","9dceea54":"train_predict = model.predict(X_train)\n\nmae_train = mean_absolute_error(y_train,train_predict)\n\nmse_train = mean_squared_error(y_train,train_predict)\n\nrmse_train = np.sqrt(mse_train)\n\nr2_train = r2_score(y_train,train_predict)\n\nmape_train = mean_absolute_percentage_error(y_train,train_predict)","f0e3f91b":"test_predict = model.predict(X_test)\n\nmae_test = mean_absolute_error(test_predict,y_test)\n\nmse_test = mean_squared_error(test_predict,y_test)\n\nrmse_test = np.sqrt(mean_squared_error(test_predict,y_test))\n\nr2_test = r2_score(y_test,test_predict)\n\nmape_test = mean_absolute_percentage_error(y_test,test_predict)","b64e9298":"print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\nprint('TRAIN: Mean Absolute Error(MAE): ',mae_train)\nprint('TRAIN: Mean Squared Error(MSE):',mse_train)\nprint('TRAIN: Root Mean Squared Error(RMSE):',rmse_train)\nprint('TRAIN: R square value:',r2_train)\nprint('TRAIN: Mean Absolute Percentage Error: ',mape_train)\nprint('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\nprint('TEST: Mean Absolute Error(MAE): ',mae_test)\nprint('TEST: Mean Squared Error(MSE):',mse_test)\nprint('TEST: Root Mean Squared Error(RMSE):',rmse_test)\nprint('TEST: R square value:',r2_test)\nprint('TEST: Mean Absolute Percentage Error: ',mape_test)","4b96ca39":"sns.scatterplot(y_train,train_predict)","d93fa24b":"There is no linearity between actual data and predicted data.NOT fit for linear regresson model.","35aeb23b":"few years are given in rage. either we can group it as any of the existing year like 2008 - 2012 as 2012 \nhere i am ignoring all the rows"}}