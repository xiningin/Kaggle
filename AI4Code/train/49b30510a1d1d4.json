{"cell_type":{"6caf0eda":"code","f68c4a24":"code","29437059":"code","63ea4371":"code","1e144799":"code","778c5908":"code","280243ee":"code","7041bcba":"code","35c13b82":"code","90742b39":"code","16823e39":"code","ceb485cc":"code","813d65c9":"code","5f580427":"code","237fbb1a":"code","a23141a1":"code","008b7c5c":"code","6f1d5445":"code","48a3a5cb":"code","37e14ae5":"code","cd59f6ba":"code","54575cc6":"code","b61bb6ce":"code","066b6aff":"code","2156d2cb":"code","481fd71a":"code","340b625e":"code","3cfccf30":"code","04235748":"code","3883a1c0":"code","74a0cbae":"code","a8630cb1":"code","a36b66d1":"code","50eb5242":"code","c9ec7a62":"code","1eecc542":"code","71820825":"code","8efbcf6a":"code","26704a03":"code","cfebdf56":"code","5fae9769":"code","c4d12292":"code","91b5ad9b":"markdown","666d9279":"markdown","a7cf7da7":"markdown","0977c216":"markdown","c7f635df":"markdown","fd382f89":"markdown","571dbf94":"markdown","ad5ac5b2":"markdown","256e1865":"markdown","44e7561d":"markdown","f7080ca9":"markdown","6e3c36b8":"markdown","b1d53bda":"markdown","8826e6ee":"markdown","58714c68":"markdown","687c570e":"markdown","bd619e13":"markdown","b33f3a79":"markdown","53b31514":"markdown","e72cba03":"markdown","1c3abf46":"markdown","11ae1635":"markdown","1e95e0e4":"markdown","2ac47fe2":"markdown","e729960f":"markdown","23c86ec3":"markdown","a084d75a":"markdown","254eb86c":"markdown","ec68debb":"markdown","117129b3":"markdown","0d6bfff5":"markdown","d1db1a62":"markdown","2db6ca92":"markdown","46a4362c":"markdown","ca08c5a4":"markdown","6247d923":"markdown","4c89ba1c":"markdown"},"source":{"6caf0eda":"! pip install BeautifulSoup4","f68c4a24":"import pandas as pd\nimport numpy as np\nimport requests\n\nfrom bs4 import BeautifulSoup\n\n\nsource = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_postal_codes_of_Canada:_M').text\n\nsoup = BeautifulSoup(source, 'html5lib')\n\npostal_codes_dict = {} # initialize an empty dictionary to save the data in\nfor table_cell in soup.find_all('td'):\n    try:\n        postal_code = table_cell.p.b.text # get the postal code\n        postal_code_investigate = table_cell.span.text\n        neighborhoods_data = table_cell.span.text # get the rest of the data in the cell\n        borough = neighborhoods_data.split('(')[0] # get the borough in the cell\n        \n        # if the cell is not assigned then ignore it\n        if neighborhoods_data == 'Not assigned':\n            neighborhoods = []\n        # else process the data and add it to the dictionary\n        else:\n            postal_codes_dict[postal_code] = {}\n            try:\n                neighborhoods = neighborhoods_data.split('(')[1]\n            \n                # remove parantheses from neighborhoods string\n                neighborhoods = neighborhoods.replace('(', ' ')\n                neighborhoods = neighborhoods.replace(')', ' ')\n\n                neighborhoods_names = neighborhoods.split('\/')\n                neighborhoods_clean = ', '.join([name.strip() for name in neighborhoods_names])\n            except:\n                borough = borough.strip('\\n')\n                neighborhoods_clean = borough\n \n            # add borough and neighborhood to dictionary\n            postal_codes_dict[postal_code]['borough'] = borough\n            postal_codes_dict[postal_code]['neighborhoods'] = neighborhoods_clean\n    except:\n        pass\n    \n# create an empty dataframe\ncolumns = ['PostalCode', 'Borough', 'Neighborhood']\ntoronto_data = pd.DataFrame(columns=columns)\ntoronto_data\n\n# populate dataframe with data from dictionary\nfor ind, postal_code in enumerate(postal_codes_dict):\n    borough = postal_codes_dict[postal_code]['borough']\n    neighborhood = postal_codes_dict[postal_code]['neighborhoods']\n    toronto_data = toronto_data.append({\"PostalCode\": postal_code, \n                                        \"Borough\": borough, \n                                        \"Neighborhood\": neighborhood},\n                                        ignore_index=True)\n\n# print number of rows of dataframe\ntoronto_data.shape[0]","29437059":"toronto_data.head()","63ea4371":"! pip install geocoder","1e144799":"import geocoder\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values","778c5908":"#get latitude and longitude using geocoder\n\n# initialize your variable to None\nlat_lng_coords = None\n\n# loop until you get the coordinates\nwhile(lat_lng_coords is None):\n  g = geocoder.arcgis('{}, Toronto, Ontario'.format('Postal Code'))\n  lat_lng_coords = g.latlng\n\nlatitude = lat_lng_coords[0]\nlongitude = lat_lng_coords[1]\n\nprint(latitude,longitude )","280243ee":"#read geospatial data file\ngeotable = pd.read_csv('..\/input\/task1234\/Geospatial_Coordinates.csv')\ngeotable.head()","7041bcba":"print(\"The shape of our wiki data is: \", toronto_data.shape)\nprint(\"the shape of our csv data is: \", geotable.shape)","35c13b82":"toronto_data.dtypes","90742b39":"geotable.dtypes","16823e39":"combined_data = toronto_data.join(geotable, how='inner')\ncombined_data","ceb485cc":"combined_data.shape","813d65c9":"from geopy.geocoders import Nominatim","5f580427":"address = 'Toronto, Ontario'\n\ngeolocator = Nominatim(user_agent=\"toronto_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The coordinates of Toronto are {}, {}.'.format(latitude, longitude))","237fbb1a":"import folium","a23141a1":"# Creating the map of Toronto\nmap_Toronto = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# adding markers to map\nfor latitude, longitude, borough, neighborhood in zip(combined_data['Latitude'], combined_data['Longitude'], combined_data['Borough'], combined_data['Neighborhood']):\n    label = '{}, {}'.format(neighborhood, borough)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [latitude, longitude],\n        radius=5,\n        popup=label,\n        color='red',\n        fill=True\n        ).add_to(map_Toronto)  \n    \nmap_Toronto","008b7c5c":"CLIENT_ID = 'PYVZQCSEAAC5DOIM2L3BONBCYVG3I3FDZPJJ4RWTNZI5Y3AC' \nCLIENT_SECRET = 'SKITZ3NAJXCKZDYWMLNCJR01V0RYXQUCMIG3WUSP1DOH2U3K'\nVERSION = '20180605' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","6f1d5445":"def getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius\n            )\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Neighbourhood', \n                  'Neighbourhood Latitude', \n                  'Neighbourhood Longitude', \n                  'Venue', \n                  'Venue Category']\n    \n    return(nearby_venues)","48a3a5cb":"venues_in_toronto = getNearbyVenues(combined_data['Neighborhood'], combined_data['Latitude'], combined_data['Longitude'])","37e14ae5":"venues_in_toronto.shape","cd59f6ba":"venues_in_toronto.head()","54575cc6":"venues_in_toronto.groupby('Neighbourhood').head()","b61bb6ce":"venues_in_toronto.groupby('Venue Category').max()","066b6aff":"toronto_venue_cat = pd.get_dummies(venues_in_toronto[['Venue Category']], prefix=\"\", prefix_sep=\"\")\ntoronto_venue_cat","2156d2cb":"toronto_venue_cat['Neighbourhood'] = venues_in_toronto['Neighbourhood'] \n\n# moving neighborhood column to the first column\nfixed_columns = [toronto_venue_cat.columns[-1]] + list(toronto_venue_cat.columns[:-1])\ntoronto_venue_cat = toronto_venue_cat[fixed_columns]\n\ntoronto_venue_cat.head()","481fd71a":"toronto_grouped = toronto_venue_cat.groupby('Neighbourhood').mean().reset_index()\ntoronto_grouped.head()","340b625e":"def return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","3cfccf30":"import numpy as np","04235748":"num_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighbourhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighbourhood'] = toronto_grouped['Neighbourhood']\n\nfor ind in np.arange(toronto_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head()","3883a1c0":"# import k-means from clustering stage\nfrom sklearn.cluster import KMeans","74a0cbae":"# set number of clusters\nk_num_clusters = 5\n\ntoronto_grouped_clustering = toronto_grouped.drop('Neighbourhood', 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=k_num_clusters, random_state=0).fit(toronto_grouped_clustering)\nkmeans","a8630cb1":"kmeans.labels_[0:100]","a36b66d1":"neighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)","50eb5242":"toronto_merged = combined_data\n\ntoronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index('Neighbourhood'), on='Neighborhood')\n\ntoronto_merged.head()","c9ec7a62":"toronto_merged_nonan = toronto_merged.dropna(subset=['Cluster Labels'])","1eecc542":"import matplotlib.cm as cm\nimport matplotlib.colors as colors","71820825":"map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(k_num_clusters)\nys = [i + x + (i*x)**2 for i in range(k_num_clusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(toronto_merged_nonan['Latitude'], toronto_merged_nonan['Longitude'], toronto_merged_nonan['Neighborhood'], toronto_merged_nonan['Cluster Labels']):\n    label = folium.Popup('Cluster ' + str(int(cluster) +1) + '\\n' + str(poi) , parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[int(cluster-1)],\n        fill=True,\n        fill_color=rainbow[int(cluster-1)]\n        ).add_to(map_clusters)\n        \nmap_clusters","8efbcf6a":"toronto_merged_nonan.loc[toronto_merged_nonan['Cluster Labels'] == 0, toronto_merged_nonan.columns[[1] + list(range(5, toronto_merged_nonan.shape[1]))]]","26704a03":"toronto_merged_nonan.loc[toronto_merged_nonan['Cluster Labels'] == 1, toronto_merged_nonan.columns[[1] + list(range(5, toronto_merged_nonan.shape[1]))]]","cfebdf56":"toronto_merged_nonan.loc[toronto_merged_nonan['Cluster Labels'] == 2, toronto_merged_nonan.columns[[1] + list(range(5, toronto_merged_nonan.shape[1]))]]","5fae9769":"toronto_merged_nonan.loc[toronto_merged_nonan['Cluster Labels'] == 3, toronto_merged_nonan.columns[[1] + list(range(5, toronto_merged_nonan.shape[1]))]]","c4d12292":"toronto_merged_nonan.loc[toronto_merged_nonan['Cluster Labels'] == 4, toronto_merged_nonan.columns[[1] + list(range(5, toronto_merged_nonan.shape[1]))]]","91b5ad9b":"#### Importing CSV File","666d9279":"Adding the neighbourhood to the encoded dataframe","a7cf7da7":"Checking the Venues based on Neighbourhood","0977c216":"So there are 405 records for each neighbourhood.\n\nChecking for the maximum venue categories","c7f635df":"Drawing inspiration from the previous lab where we cluster the neighbourhood of NYC, We cluster Toronto based on the similarities of the venues categories using Kmeans clustering and Foursquare API.","fd382f89":"Next, we create a function to get all the venue categories in Toronto","571dbf94":"**Solution**: We get 103 rows as expected when we do a inner join, so we have good data.","ad5ac5b2":"In this project, we will cluster Toronto neighbourhood based on venue categories! Specifically, this report will be targeted to stakeholders interested to know best venue for Buisness in Toronto, ON, Canada.","256e1865":"## One Hot encoding the venue Categories","44e7561d":"Let's make a function to get the top most common venue categories","f7080ca9":"## Battle of Neighborhoods - Toronto\nAuthor: Shwetal More","6e3c36b8":"Collecting the venues in Toronto for each Neighbourhood","b1d53bda":"## Introduction - Business Problem","8826e6ee":"Cluster 3","58714c68":"Initializing Foursquare API credentials","687c570e":"There are way too many venue categories, we can take the top 10 to cluster the neighbourhoods","bd619e13":"Cluster 5","b33f3a79":"Let's make the model to cluster our Neighbourhoods","53b31514":"#### Installing BeautifulSoup","e72cba03":"Let's visualize the map of Toronto","1c3abf46":"#### Installing geocoder","11ae1635":"Let's verify each of our clusters\n\nCluster 1","1e95e0e4":"Centers of candidate areas will be generated algorithmically and approximate addresses of centers of those areas will be obtained using **Geospatial Data** geocoding\n\nthe information of neighborhoods and venue categories in Toronto is from Scraping Wikipedia\n\nvenue categories and their location in every neighborhood will be obtained using **Foursquare API**.","2ac47fe2":"## Data","e729960f":"Plotting the clusters on the map","23c86ec3":"Since the dimensions are the same, we can try to join on the postal codes to get the required data.\n\nChecking the column types of both the dataframes, especially Postal Code column since we are trying to join on it","a084d75a":"We will group the Neighbourhoods, calculate the mean venue categories in each Neighbourhood","254eb86c":"## Importing Data","ec68debb":"Checking the labelling of our model","117129b3":"Join toronto_grouped with combined_data on neighbourhood to add latitude & longitude for each neighborhood to prepare it for plotting","0d6bfff5":"We have successfully cluster Toronto neighbourhood based on venue categories!","d1db1a62":"Cluster 2","2db6ca92":"#### Let's start solving the business problem by data analysis.","46a4362c":"Cluster 4","ca08c5a4":"Drop all the NaN values to prevent data skew","6247d923":"There are around 227 different types of Venue Categories. Interesting!","4c89ba1c":"So we have 1320 records and 5 columns. Checking sample data"}}