{"cell_type":{"a040404c":"code","d6388427":"code","a38062f2":"code","733c80ca":"code","00285f76":"code","6b3b9f7b":"code","afe99bcc":"code","9cff431e":"code","bc9e7c6c":"code","be9ada3b":"code","d3ca69f7":"markdown","75ea44c8":"markdown"},"source":{"a040404c":"# Load in the usual libraries\nimport numpy as np\nimport pandas as pd","d6388427":"# We shall define the function below to grab stock data for a desired symbol\ndef get_ticker(symbol):\n    return pd.read_csv('\/kaggle\/input\/sandp500\/individual_stocks_5yr\/individual_stocks_5yr\/' + symbol + '_data.csv').set_index('date').drop('Name', axis=1)","a38062f2":"# For this particular analysis, we shall be using Apple stocks\naapl_data = get_ticker('AAPL')\naapl_data.head()","733c80ca":"start_date = '2013-07-01'\nend_date = '2014-01-01'\n\nmask = (aapl_data.index >= start_date) & (aapl_data.index <= end_date)\n\nmean = aapl_data['close'].rolling(14).mean()\nupper = aapl_data['close'].rolling(14).mean() + 2 * aapl_data['close'].rolling(14).std()\nlower = aapl_data['close'].rolling(14).mean() - 2 * aapl_data['close'].rolling(14).std()\n\nmean[mask].plot(figsize=(16,9), lw=0.5)\nupper[mask].plot(lw=0.5)\nlower[mask].plot(lw=0.5)\n\naapl_data[mask]['close'].plot(lw=0.7);","00285f76":"# Define a class to handle a share in a stock\n\nclass Stock:\n    \n    def __init__(self, price, volume, date):\n        self.price = price\n        self.volume = volume\n        self.date = date\n        \n# Define a class to handle the stock information in the users portfolio\n\nclass Portfolio:\n    \n    # Store all of the portfolio short and long positions\n    short = []\n    long_ = []\n    \n    # An initiation function with $50k start money\n    def __init__(self, balance=50000):\n        self.balance = balance\n        \n    # A function to reset the user cash\n    def reset_balance(self, new_balance=50000): \n        self.balance = new_balance\n        \n    # A function to add a share to the users portfolio\n    def buy(self, stock, is_long):\n        if is_long:\n            self.long_.append(stock)\n            self.balance -= stock.price * stock.volume\n        else:\n            self.short.append(stock)\n            \n    \n    # A function to sell a position that was entered on a given date\n    def sell(self, date, volume, current_price, is_long):\n        \n        # Get the correct list\n        shlo = self.long_ if is_long else self.short\n        \n        # Find the desired date value\n        for i in range(0, len(shlo)):\n            \n            # If we find a stock with the correct date, sell the desired volume\n            if shlo[i].date == date:\n                \n                # Bound the volume by the maximum available\n                if shlo[i].volume > volume: volume = shlo[i].volume\n                \n                # Now adjust the values accordingly\n                shlo[i].volume -= volume\n                \n                # Adjust the price\n                if is_long:\n                    self.balance += current_price * volume\n                else:\n                    self.balance += (shlo[i].price - current_price) * volume\n                \n                # Delete the stock\n                shlo.pop(i)\n                \n                # Return prematurely\n                return\n            \n    def sell_all(self, current_price, is_long):\n        \n        # Get the correct list\n        shlo = self.long_ if is_long else self.short\n        \n        # Check that the list is not empty\n        if len(shlo) == 0: return\n        \n        # Sell all of the positions\n        for i in range(0, len(shlo)):\n            \n            # Call the sell function\n            self.sell(shlo[0].date, shlo[0].volume, current_price, is_long)\n                \n                \npf = Portfolio()","6b3b9f7b":"# We implement a basic bollinger band strategy whereby we go short once when the price goes high, and sell the short position once it goes below the mean\n# Conversely, we will purchase a long position once the price goes low, and sell once it returns above the mean\n\n# Set up the bollinger dataframe\nbol_df = pd.concat([aapl_data['close'], mean, upper, lower], axis=1, keys=['close', 'r_mean', 'upper', 'lower']).dropna()\nbol_df.head()","afe99bcc":"bol_df.plot(figsize=(28,15));","9cff431e":"# Now let's implement our bollinger band strategy\n\npf.reset_balance()\n\nbalance = pd.DataFrame()\n\n# Set a variable that will store the last state\n# so that we don't have too many trades occurring\ncur = 0\n\nfor index, row in bol_df.iterrows():\n    \n    if row['close'] >= row['upper']:\n        if cur != 1:\n            cur = 1\n            new_stock = Stock(row['close'], 1, index)\n            pf.buy(new_stock, False)\n            print('Going long at ' + str(row['close']) + ' with balance ' + str(pf.balance) + ' on ' + str(index))\n        \n    elif row['close'] <= row['lower']:\n        if cur != 2:\n            cur = 2\n            new_stock = Stock(row['close'], 1, index)\n            pf.buy(new_stock, True)\n            print('Going short at ' + str(row['close']) + ' with balance ' + str(pf.balance) + ' on ' + str(index))\n    \n    if row['close'] >= row['r_mean']:\n        if cur != 3:\n            cur = 3\n            pf.sell_all(row['close'], True)\n            print('Selling any existing  long positions at ' + str(row['close']) + ' on ' + str(index))\n        \n    elif row['close'] <= row['r_mean']:\n        if cur != 4:\n            cur = 4\n            pf.sell_all(row['close'], False)\n            print('Selling any existing short positions at ' + str(row['close']) + ' on ' + str(index))\n        \n    balance = pd.concat([balance, pd.Series({index : pf.balance})])","bc9e7c6c":"balance.columns = ['Balance']\nbalance.index.name = 'Date'\nbalance.head()","be9ada3b":"# Take a look at the users balance from trading\n\nbalance.plot(figsize=(16,9));","d3ca69f7":"# An investigation into the Bollinger Band Trading Strategy\n\nThe stock market is a crazy place. Prices go up, down, left, right, loop-the-loops, you get the idea. Many people use different methods of statistical analysis to predict the direction of the stock market, the first of which that many come across is the Bollinger Band strategy.\n\nThe idea of the Bollinger Band strategy is that we take the rolling mean and standard deviation over a set window, and if the stock price goes above the mean plus two times the standard deviation, then we enter a short position. If the stock price goes below the mean minus two time the standard deviation, then we enter a long position. In both scenarios, it is wise to exit the position once the stock price returns to the rolling mean.\n\nBefore we can describe the Bollinger Band strategy mathematically. For the rest of the description, we will asume that $n$ is a fixed value that we have chosen before the algorithm starts running. Let us now establish some notation:\n\n* Let $X_{r,n} = X_{r-n}, \\dots, X_{r}$ denote the observed closing prices from day $r-n$ to day $r$, where $r,n \\in \\mathbb{N}$;\n* Let $\\mathbb{E}[X_{r,n}] = \\frac{1}{n} \\sum_{i=r-n}^{n}{X_{i,0}}$ represent the rollling mean from day $r-n$ to day $r$;\n* Let $\\sigma_{X_{r,n}} = \\mathbb{E}[X_{r,n}^2] + \\mathbb[X_{r,n}]^2$ represent the rolling standard deviation from day $r-n$ to day $r$.\n\nA Bollinger Band is defined as a function $x \\mapsto \\mathbb{E}[X_{x,n}] \\pm 2 \\sigma_{X_{x,n}}$. More specifically,\n\n* The upper bollinger band is defined by the function $f_u(x) = \\mathbb{E}[X_{x,n}] + 2 \\sigma_{X_{x,n}}$;\n* The lower bollinger band is defined by the function $f_l(x) = \\mathbb{E}[X_{x,n}] - 2 \\sigma_{X_{x,n}}$.\n\nUsing these bollinger bands, we may partition the 'y-axis' of our trading chart into four different intervals at any date $x$ of trading:\n\n* The interval $L_e(x) = [0, f_l(x)]$ represents the interval between the date axis and the lower bolllinger;\n* The interval $S_l(x) = (f_l(x), \\mathbb{E}[X_{x,n}]]$ represents the interval between the lower bollinger and the rolling mean;\n* The interval $L_l(x) = (\\mathbb{E}[X_{x,n}], f_u(x))$ represents the interval between the rolling mean and the upper bollinger;\n* The interval $S_e(x) = [f_u(x), \\infty)$ represents the interval between the upper bollinger, and infinity.\n\nwhere L represents the intervals that will influence entering or leaving (e\/l respectively) a long position, and S a short position. Based off these intervals we may define indicator functions which tell the algorithm to carry out certain events in the execution. Let us define the change in balance function $Q:\\mathbb{R} \\to \\mathbb{R}$ by\n\n$$\nQ(x) =\\left\\{\n        \\begin{array}{ll}\n            -X_{x} & \\quad x \\in L_e(x) \\\\\n            X_{x-m} - X_{x} & \\quad x \\in S_l(x) \\\\\n            X_{x} & \\quad x \\in L_l(x) \\\\\n            0 & \\quad x \\in S_e(x)\n        \\end{array}\n    \\right.\n$$\n\nwhere $m \\in \\mathbb{N}$ represents the number of days since the last short position was entered. The problem with this function is that it carries out an event every day, but we only want it to carry out an event whenever there is a change in intervals. We will define the signal trigger function $T:\\mathbb{R} \\to \\{0,1\\}$ to combat this as:\n\n$$\nT(x) =\\left\\{\n        \\begin{array}{ll}\n            1 & \\quad \\exists S \\in \\{L_e, L_l, S_e, S_l\\} : X_{x-1} \\in S \\quad and \\quad X_{x} \\notin S\\\\\n            0 & \\quad otherwise\n        \\end{array}\n    \\right.\n$$\n\nWe may now express the users balance $B_n$ on any date $n$ may be expressed as\n\n$$B_n = B_0 + \\sum_{x=1}^{n}{T(x)Q(x)}$$\n\nso that their total returns $R_n$ over $n$ days may be expressed as\n\n$$R_n = B_n - B_0 = \\sum_{x=1}^{n}{T(x)Q(x)} - B_0$$\n\nWith all of the above established, let's take a look at the data.","75ea44c8":"## Conclusion\n\nIt is evident from the analysis that the bollinger band strategy is not very good. It can be seen from the graph that the balance fluctuates far too much for the bollinger band strategy to be financially feasible. Despite the evidence, it may be possible to combine the bollinger band strategy along with other signals to make wiser financial decisions that lead to a gross overall gain in capital."}}