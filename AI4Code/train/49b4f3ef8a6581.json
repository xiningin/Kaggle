{"cell_type":{"e7b635c2":"code","e64393fe":"code","71b8720b":"code","558ba536":"code","8cf3f3e1":"code","cdc3593d":"code","95f8330b":"code","30f2ff36":"code","1704a780":"code","5f22ea97":"code","be82f531":"code","1ce0c0a2":"code","3d196728":"code","3e83a496":"code","5ea57683":"code","7f457abe":"code","5300ce30":"code","d73614a4":"code","3f720a63":"code","a1ffa30f":"code","5c69a24d":"code","be85835e":"code","3d577e22":"code","c874d7da":"code","ac9c17b0":"code","8e360948":"code","9a38aee4":"code","fcfa9ff0":"code","150c4bb9":"code","e7995b7a":"code","d55666ec":"code","0dff9df9":"code","57f2f731":"code","5816160c":"code","dbf0e24e":"code","6f84fdfa":"code","fba200dc":"code","c88c3dc3":"code","70e948a2":"code","b66c3b0a":"code","1ec36513":"code","eb8675d1":"code","3639ce37":"code","d686544e":"code","e2752d6b":"code","abf3f447":"code","9744ad63":"code","36f4b10c":"code","ab6616a1":"code","3034c16c":"code","be7967de":"code","9f9a08c7":"code","10a34bdb":"code","7cf4eea1":"code","0c9e2f36":"code","a4a3e21e":"code","2b3fd6ea":"code","5239b059":"code","9cc9116a":"code","edb1cff2":"code","6260d5ff":"code","d9c06c2f":"code","57b3f36f":"code","3d06315d":"code","040828a1":"code","8e94809c":"code","d1227016":"code","1114364a":"code","f4317a15":"code","913211a2":"code","0117171f":"code","9d01ba8a":"code","029a3d6f":"code","203e8818":"code","046cbe31":"code","c6467ac1":"code","ba08706e":"code","d5ec8632":"code","b427e0a3":"code","94c3231c":"code","024722a3":"code","56618de3":"code","b6e4bdb0":"code","32d7ff34":"code","78c76fb2":"code","63d18df1":"code","1e46b70c":"code","ab5a3cd6":"code","08143c32":"code","9ca05c5d":"code","6b2845c6":"code","50da7bd4":"code","724e545e":"code","285e0f03":"code","652e82ad":"code","4fc76dd3":"code","8288ca80":"code","a9459387":"code","59adbbb2":"code","ed31524d":"code","d3fbc758":"code","ca84b0dc":"code","884f41f9":"code","df3ed5d8":"code","c405e34a":"code","5c4b1650":"code","e964faf2":"code","30ef66f2":"code","e7b97b4a":"code","3fa16a57":"code","61ff6b3f":"code","8e45a576":"code","c0e7c190":"code","a9f9ca10":"code","0d3da97e":"code","cb857648":"code","a31caba4":"code","eac4b3e9":"code","0b7dcedf":"code","467b93ef":"code","39d899a3":"markdown","d042cda1":"markdown","89a33ac1":"markdown","af5a34c4":"markdown","1a3dcb6e":"markdown","42e68c6e":"markdown","c5941722":"markdown","acf6b49a":"markdown","4ceebb75":"markdown","0a692a0e":"markdown","00eecb76":"markdown","92548506":"markdown","58d825ac":"markdown","2c03d31d":"markdown","b1202647":"markdown","9237cd08":"markdown","2f77fcd0":"markdown","5108f9e9":"markdown","f0d0eabe":"markdown","a3128e11":"markdown","5c1c390b":"markdown","fc3d62c7":"markdown","d83c617d":"markdown","ecf605d6":"markdown","fc75553f":"markdown","990c8429":"markdown"},"source":{"e7b635c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","e64393fe":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","71b8720b":"pd.pandas.set_option('display.max_columns',None)","558ba536":"df=pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","8cf3f3e1":"print(df.shape)","cdc3593d":"df.head()","95f8330b":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","30f2ff36":"df['quality']=pd.cut(df['quality'],bins=(2,6.5,8),labels=['Bad','Good'])","1704a780":"from sklearn.preprocessing import LabelEncoder\ncategory=LabelEncoder()\ndf['quality']=category.fit_transform(df['quality'])","5f22ea97":"df.head()","be82f531":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1]","1ce0c0a2":"X.isnull()","3d196728":"y.isnull()","3e83a496":"sns.pairplot(df)","5ea57683":"df.corr()","7f457abe":"corrmat=df.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(7,7))\ng=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap='RdYlGn')","5300ce30":"corrmat.index","d73614a4":"from sklearn.ensemble import ExtraTreesRegressor\nmodel=ExtraTreesRegressor()\nmodel.fit(X,y)","3f720a63":"X.head()","a1ffa30f":"print(model.feature_importances_)","5c69a24d":"feat_importances=pd.Series(model.feature_importances_,index=X.columns)\nfeat_importances.plot(kind='barh')\nplt.show()","be85835e":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)","3d577e22":"from sklearn.preprocessing import MinMaxScaler\nmin_max=MinMaxScaler()","c874d7da":"X_train=min_max.fit_transform(X_train)\nX_test=min_max.fit_transform(X_test)","ac9c17b0":"y_train.head()","8e360948":"from sklearn.tree import DecisionTreeClassifier","9a38aee4":"dtree=DecisionTreeClassifier()","fcfa9ff0":"dtree.fit(X_train,y_train)","150c4bb9":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(dtree,X,y,cv=5)","e7995b7a":"score.mean()","d55666ec":"prediction1=dtree.predict(X_test)","0dff9df9":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, prediction1))","57f2f731":"DecisionTreeClassifier()","5816160c":"params={\"splitter\":[\"best\",\"random\"],\n       \"max_depth\":[3,4,5,6,8,10,12,15],\n       \"min_samples_leaf\":[1,2,3,4,5],\n       \"min_weight_fraction_leaf\":[0.1,0.2,0.3,0.4],\n       \"max_features\":[\"auto\",\"log2\",\"sqrt\",None],\n       \"max_leaf_nodes\":[None,10,20,30,40,50,60,70]}","dbf0e24e":"from sklearn.model_selection import GridSearchCV","6f84fdfa":"random_search=GridSearchCV(dtree,param_grid=params,scoring=\"neg_mean_squared_error\",n_jobs=-1,cv=10,verbose=3)","fba200dc":"random_search.fit(X,y)","c88c3dc3":"print(random_search.best_params_)","70e948a2":"print(random_search.best_score_)","b66c3b0a":"random_search.best_estimator_","1ec36513":"dtree1=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=15, max_features='sqrt', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.1, presort='deprecated',\n                       random_state=None, splitter='best')","eb8675d1":"dtree1.fit(X_train,y_train)","3639ce37":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(dtree,X,y,cv=5)","d686544e":"score.mean()","e2752d6b":"predictions2=dtree1.predict(X_test)","abf3f447":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions2))","9744ad63":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=200)","36f4b10c":"rfc.fit(X_train,y_train)","ab6616a1":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(rfc,X,y,cv=5)","3034c16c":"score.mean()","be7967de":"predictions3=rfc.predict(X_test)","9f9a08c7":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions3))","10a34bdb":"import numpy as np\nfrom sklearn.model_selection import RandomizedSearchCV","7cf4eea1":"random_grid={\n    # Number of trees in random forest\n    'n_estimators': [int(x) for x in np.linspace(start=100,stop=1200,num=12)],\n    # Number of features to consider at every split         \n    'max_features': ['auto','sqrt'],\n    # Maximum number of levels in tree         \n    'max_depth': [int(x) for x in np.linspace(5,30, num=6)],\n    # Minimum number of samples required to split a node         \n    'min_samples_split': [2,5,10,15,100],\n    # Minimum number of samples required at each leaf node         \n    'min_samples_leaf': [1,2,5,10]}","0c9e2f36":"rf=RandomForestClassifier()","a4a3e21e":"random_search=RandomizedSearchCV(rf,\n                                 param_distributions=random_grid,\n                                 scoring='neg_mean_squared_error',\n                                 n_iter=100,\n                                 cv=5,\n                                 verbose=2,\n                                 random_state=0,\n                                 n_jobs=1)","2b3fd6ea":"random_search.fit(X_train,y_train)","5239b059":"random_search.best_params_","9cc9116a":"random_search.best_score_","edb1cff2":"random_search.best_estimator_","6260d5ff":"rdm_search=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=10, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=900,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)","d9c06c2f":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(rdm_search,X,y,cv=5)","57b3f36f":"score.mean()","3d06315d":"rdm_search.fit(X_train,y_train)","040828a1":"predictions4=rdm_search.predict(X_test)","8e94809c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions4))","d1227016":"from sklearn import svm\nsvm_model=svm.SVC() ","1114364a":"svm_model.fit(X_train,y_train)","f4317a15":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(svm_model,X,y,cv=5)","913211a2":"score.mean()","0117171f":"predictions5=svm_model.predict(X_test)","9d01ba8a":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions5))","029a3d6f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn import svm","203e8818":"svm=svm.SVC()","046cbe31":"param_grid={'C':[0.1,1,10,100,1000,10000],\n           'kernel':('linear','rbf'),\n           'gamma': [1,2,3,4,5,6,7,8,9,10]}","c6467ac1":"grid_search=GridSearchCV(svm,\n                        param_grid=param_grid,\n                        verbose=False,\n                        scoring='accuracy',\n                        cv=15,\n                        n_jobs=-1)","ba08706e":"grid_search.fit(X_train,y_train)","d5ec8632":"grid_search.best_params_","b427e0a3":"grid_search.best_score_","94c3231c":"grid_search.best_estimator_","024722a3":"from sklearn import svm\nsvm1=svm.SVC(C=10, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma=8, kernel='rbf', max_iter=-1,\n    probability=False, random_state=None, shrinking=True, tol=0.001,\n    verbose=False)","56618de3":"svm1.fit(X_train,y_train)","b6e4bdb0":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(svm1,X,y,cv=5)","32d7ff34":"score.mean()","78c76fb2":"predictions6=svm1.predict(X_test)","63d18df1":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions6))","1e46b70c":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier() ","ab5a3cd6":"knn.fit(X_train,y_train)","08143c32":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(knn,X,y,cv=5)","9ca05c5d":"score.mean()","6b2845c6":"predictions7=knn.predict(X_test)","50da7bd4":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions7))","724e545e":"leaf_size=list(range(1,50))\nn_neighbors=list(range(1,40))\np=[1,2]","285e0f03":"params=dict(leaf_size=leaf_size,n_neighbors=n_neighbors,p=p)","652e82ad":"knn_1=KNeighborsClassifier()","4fc76dd3":"grd_search=GridSearchCV(knn_1,params,cv=10)","8288ca80":"best_model=grd_search.fit(X_train,y_train)","a9459387":"best_model.best_params_","59adbbb2":"best_model.best_score_","ed31524d":"predictions8=best_model.predict(X_test)","d3fbc758":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions8))","ca84b0dc":"import xgboost\nxg_model=xgboost.XGBClassifier()","884f41f9":"xg_model.fit(X_train,y_train)","df3ed5d8":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(xg_model,X,y,cv=5)","c405e34a":"score.mean()","5c4b1650":"predictions9=xg_model.predict(X_test)","e964faf2":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions9))","30ef66f2":"from sklearn.model_selection import RandomizedSearchCV\nimport xgboost","e7b97b4a":"classifier=xgboost.XGBClassifier()","3fa16a57":"params1={\"learning_rate\":[0.05,0.10,0.15,0.20,0.25,0.30],\n        \"max_depth\":[3,4,5,6,8,10,12,15],\n        \"min_child_weight\":[1,3,5,7],\n        \"gamma\":[0.0,0.1,0.2,0.3,0.4],\n        \"colsample_bytree\":[0.3,0.4,0.5,0.7]}","61ff6b3f":"rdm_search=RandomizedSearchCV(classifier,params1,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","8e45a576":"rdm_search.fit(X_train,y_train)","c0e7c190":"rdm_search.best_estimator_","a9f9ca10":"rdm_search.best_params_","0d3da97e":"classifier1=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.3, gamma=0.0,\n              learning_rate=0.05, max_delta_step=0, max_depth=6,\n              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n              nthread=None, objective='binary:logistic', random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n              silent=None, subsample=1, verbosity=1)","cb857648":"classifier1.fit(X_train,y_train)","a31caba4":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(classifier1,X,y,cv=5)","eac4b3e9":"score.mean()","0b7dcedf":"predictions10=classifier1.predict(X_test)","467b93ef":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions10))","39d899a3":"### model evaluation","d042cda1":"Thank You for visiting my notebook. In this notebook you will go-through  various machine learning models.\n\nThe following are the methods I have done\n1.     Extrapolatory data analysis\n2.     Finding the feature importance\n3.     Standardization\n4.     Decision Tree Classifier\n5.     Random Forest Classifier\n6.     SVM Classifier\n7.     KNN\n8.     XGBoost Classifier","89a33ac1":"# finding the feature importance","af5a34c4":"### model evaluation","1a3dcb6e":"# Decisiion tree Classifier","42e68c6e":"### minmax scalar","c5941722":"# XGBoost Classifier","acf6b49a":"### model evaluation","4ceebb75":"# Standardization","0a692a0e":"### Hyperparameter tuning","00eecb76":"### model evaluation","92548506":"# Hyper Parameter tuning","58d825ac":"### model evaluation","2c03d31d":"# KNN","b1202647":"### model evaluation","9237cd08":"# Exploratory data analysis","2f77fcd0":"# Random Forest Classifier","5108f9e9":"# SVM","f0d0eabe":"# Classifing GOOD and BAD using Label Encoding","a3128e11":"# Hyper parameter tuning","5c1c390b":"# Hyper-Parameter Tuning","fc3d62c7":"### model evaluation","d83c617d":"### checking missing values","ecf605d6":"# Hyper Parameter Tuning","fc75553f":"### model evaluation","990c8429":"### model evaluation"}}