{"cell_type":{"f94dc283":"code","0dff16df":"code","2aa040ad":"code","61d2389a":"code","07ad1fcf":"code","82616931":"code","91f81ef1":"code","d373f1df":"code","c2386b50":"code","166f196e":"code","a3cdeb33":"code","670515e2":"code","494d78a1":"code","bac4f97e":"code","4220293f":"markdown"},"source":{"f94dc283":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n%matplotlib inline\nprint(os.listdir(\"..\/input\"))\n\ninputData = pd.read_csv(r\"..\/input\/eeg_clean.csv\");","0dff16df":"print(inputData.dtypes)\nprint(inputData.columns)\nprint(\"Data shape:\",inputData.shape)\nprint(inputData.head())\nprint(inputData.describe())\nprint(inputData.info())\n# Check for any nulls\nprint(inputData.isnull().sum())\n","2aa040ad":"# Lets convert the open\/closed category for eye into integers","61d2389a":"inputData['eye']=inputData[\"eye\"].astype('category')\ninputData[\"eye\"] = inputData[\"eye\"].cat.codes\n","07ad1fcf":"print (\"************************************\")\nprint (\"EXPERIMENT WITH TEST AND TRAIN SPLIT\")\nprint (\"************************************\")","82616931":"from sklearn.model_selection import train_test_split\nsplitRatio = 0.2\ntrain , test = train_test_split(inputData,test_size = splitRatio,random_state = 123,shuffle=True)\n\nplt.figure(figsize=(12,6))\nplt.subplot(121)\ntrain[\"eye\"].value_counts().plot.pie(labels = [\"1-open\",\"0-closed\"],\n                                              autopct = \"%1.0f%%\",\n                                              shadow = True,explode=[0,.1])\nplt.title(\"proportion of target class in train data\")\nplt.ylabel(\"\")\nplt.subplot(122)\ntest[\"eye\"].value_counts().plot.pie(labels = [\"1-open\",\"0-closed\"],\n                                             autopct = \"%1.0f%%\",\n                                             shadow = True,explode=[0,.1])\nplt.title(\"proportion of target class in test data\")\nplt.ylabel(\"\")\nplt.show()\n\n","91f81ef1":"#Seperating Predictor and target variables\n","d373f1df":"train_X = train[[x for x in train.columns if x not in [\"eye\"]]]\ntrain_Y = train[[\"eye\"]]\ntest_X  = test[[x for x in test.columns if x not in [\"eye\"]]]\ntest_Y  = test[[\"eye\"]]\n","c2386b50":"import lightgbm as lgbm\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,roc_curve,auc","166f196e":"# create dataset for lightgbm","a3cdeb33":"\nlgb_train = lgbm.Dataset(train_X, train_Y)\nlgb_eval = lgbm.Dataset(test_X, test_Y, reference=lgb_train)","670515e2":"params = {\n    'objective' :'binary',\n    'tree_learner':'data',\n    'learning_rate' : 0.1,\n    'num_leaves' :99 ,\n    'feature_fraction': 0.8, \n    'bagging_fraction': 0.8, \n    'bagging_freq':1,\n    'boosting_type' : 'gbdt',\n    'metric': 'binary_logloss'\n}\n","494d78a1":"classifier = lgbm.train(params, lgb_train, 700)\npredictions = classifier.predict(test_X)\npredictedLabels = (predictions>0.35).astype(int)\nprint (\"\\naccuracy_score :\",accuracy_score(test_Y,predictedLabels))\nprint (\"\\nclassification report :\\n\",(classification_report(test_Y,predictedLabels)))","bac4f97e":"plt.figure(figsize=(13,10))\nplt.subplot(221)\nsns.heatmap(confusion_matrix(test_Y,predictedLabels),annot=True,fmt = \"d\",linecolor=\"k\",linewidths=3)\nplt.title(\"CONFUSION MATRIX\",fontsize=20)\npredicting_probabilites = predictions\nfpr,tpr,thresholds = roc_curve(test_Y,predicting_probabilites)\nplt.subplot(222)\nplt.plot(fpr,tpr,label = (\"Area_under the curve :\",auc(fpr,tpr)),color = \"r\")\nplt.plot([1,0],[1,0],linestyle = \"dashed\",color =\"k\")\nplt.legend(loc = \"best\")\nplt.title(\"ROC - CURVE & AREA UNDER CURVE\",fontsize=20)    \ndataframe = pd.DataFrame(classifier.feature_importance(),train_X.columns).reset_index()\ndataframe = dataframe.rename(columns={\"index\":\"features\",0:\"coefficients\"})\ndataframe = dataframe.sort_values(by=\"coefficients\",ascending = False)\nplt.subplot(223)\nax = sns.barplot(x = \"coefficients\" ,y =\"features\",data=dataframe,palette=\"husl\")\nplt.title(\"FEATURE IMPORTANCES\",fontsize =20)\nfor i,j in enumerate(dataframe[\"coefficients\"]):\n    ax.text(.011,i,j,weight = \"bold\")\nplt.show()\n\n\n","4220293f":"1. # ****LightGBM prediction of on Eye open\/closed state from EEG Data"}}