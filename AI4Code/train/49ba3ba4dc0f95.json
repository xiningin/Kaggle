{"cell_type":{"a14fd4dc":"code","41b7bfe5":"code","08207ba6":"code","b34dce30":"code","a3c1a8fb":"code","02bb3bca":"code","c498dcc8":"code","ccb6da8a":"code","c9bc59db":"code","bf6ff96c":"code","094669b4":"code","6577267b":"code","4f2849bc":"code","97d9ab0e":"code","f65113aa":"code","0e4a95e5":"code","a490d74d":"code","035c28ac":"code","89ff105a":"code","37c8c5ea":"code","1d27aeef":"code","fb2ce51b":"code","d497d13f":"code","f09883d5":"code","514772c8":"code","7a8b6c85":"code","ad58e0b6":"code","0b298954":"code","32687a30":"code","dddb5db5":"code","b0879957":"code","057fefd2":"markdown","5371f78f":"markdown","04c4bf2a":"markdown","1e946c7b":"markdown","f4faacd6":"markdown","4a1ba9e2":"markdown","d66eaae4":"markdown","b509945c":"markdown","a1f85037":"markdown","13db065f":"markdown","6517fcff":"markdown","3584cbbb":"markdown","0ff5233f":"markdown","c3f44c65":"markdown","fb0ea985":"markdown","ceb68a65":"markdown","a0418804":"markdown","a0d95b19":"markdown","daa17f1d":"markdown","ea8291b7":"markdown","74a31913":"markdown","1ea80fa6":"markdown","6dd4bfcb":"markdown","a073fdc5":"markdown"},"source":{"a14fd4dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41b7bfe5":"# To install:\n# on kaggle - it is already preinstalled \n# !pip install python-igraph # Pay attention: not just \"pip install igraph\" \n# !pip install cairocffi # Module required for plots \n\n\nimport igraph # On kaggle it is pre-installed \n\nimport numpy as np\n#import pandas as pd\n#import os\n#import matplotlib.pyplot as plt","08207ba6":"g = igraph.Graph()\ng.add_vertices(5)\ng.add_edge(0, 4) # Connect nodes 0 and 4\ng.add_edges([(0,1), (1,2), (3,2) ]) # Add list of edges \nprint(g) # print info on graph  \n# IGRAPH U--- 5 4 -- # Means \"U\" - undirected, 5 - n_nodes, 4 - n_edges ","b34dce30":"# Nodes and Edges number\n\ng.vcount() , g.ecount()","a3c1a8fb":"# Edge list - list of tuples of nodes like (v1,v2) for each connected v1 and v2  \ng.get_edgelist()","02bb3bca":"print( type( g.get_adjacency() ) )\nprint( g.get_adjacency() )","c498dcc8":"igraph.plot(g,bbox = (200,100) )","ccb6da8a":"g = igraph.Graph(directed = True)\ng.add_vertices(5)\ng.add_edge(0, 4) # Connect nodes 0 and 4\ng.add_edges([(0,1), (1,2), (3,2) ])\n\nlayout = g.layout('kk') # kk - Kamada-Kawai layout - one of the most popular layouts \n# List of possible layouts is here: https:\/\/igraph.org\/python\/doc\/igraph.Graph-class.html#layout\nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g.vs]\nvisual_style[\"vertex_label\"] = range(g.vcount()) \nvisual_style[\"vertex_size\"] = 30\nigraph.plot(g, layout = layout, **visual_style, bbox = (300,100) )","c9bc59db":"g = igraph.Graph.Tree(40,3) # Lattice([10,10],  circular = False)\n#igraph.plot(g,  bbox=(200,200) )\nlayout = g.layout_grid( ) # reingold_tilford(root=[2])\nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['pink' for v in g.vs]\nvisual_style[\"vertex_label\"] = range(g.vcount()) \nvisual_style[\"vertex_size\"] = 20\nigraph.plot(g,  **visual_style, bbox = (200,200) ) # layout = layout,","bf6ff96c":"# Here is more advanced example - set layout by hands, shrink plot from margins by 80, put labels on edges, change size of scripts\ng2 = igraph.Graph()\ng2.add_vertices(3)\ng2.add_edges([[0,1],[1,2],[2,0], [2,2] ])\ng2.es['label'] = ['A','B','C','D'] # It is misleading to put so much unnecessary info on that graph \n\n#layout = g2.layout_circle()\nlayout = igraph.Layout([ (2, 0) , (3, 2), (0, 0), ])\nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['red','gray','green']\nvisual_style[\"vertex_label\"] = ['1','2','3']\nvisual_style[\"edge_label_size\"] = 40 # [2,2,2]\nvisual_style[\"margin\"] = 80\nvisual_style[\"vertex_size\"] = 30\n\nigraph.plot(g2, layout = layout, **visual_style,  bbox = (600,300))","094669b4":"# Create the graph with constructor \nvertices = [i for i in range(7)]\nedges = [(0,2),(0,1),(0,3),(1,0),(1,2),(1,3),(2,0),(2,1),(2,3),(3,0),(3,1),(3,2),(2,4),(4,5),(4,6),(5,4),(5,6),(6,4),(6,5)]\n\ng3 = igraph.Graph(vertex_attrs={\"label\":vertices}, edges=edges, directed=True)\nigraph.plot(g3, bbox = (200,200))","6577267b":"# However pay attention that here \nprint('Pay attention that - in such example igraph creates nodes 0,1 which he puts disconnened with everything: ')\ng3 = igraph.Graph( edges=[(2,3)], directed=True)\nigraph.plot(g3, bbox = (200,200))","4f2849bc":"# Also pay attention - edges can only be integers - to overcome that - see next item \ng3 = igraph.Graph()\ntry:\n    g3 = igraph.Graph( edges=[('a','b')], directed=True)\nexcept:\n    print('Exception - edges can be only integers ')\n","97d9ab0e":"g3 = igraph.Graph()\ng3 = igraph.Graph().TupleList([('a','b'),('a','b'), ('a','c'),('c','c')] , directed = True) # One add weight: list of tuples: (source, target, weight(optional))\nprint(g3.get_edgelist() )\nprint(list(g3.vs['name']))\n\nvisual_style = {}\n#visual_style[\"vertex_color\"] = ['red','gray','green']\nvisual_style[\"vertex_label\"] = list(g3.vs['name'])\nigraph.plot(g3, **visual_style,  bbox = (200,100))\n\n","f65113aa":"# Simple example \ndf = pd.DataFrame(data = [['a1','b1', 1, 'green'],['a2','b2',3,'red']], columns = ['Node 1', 'Node 2', 'Weight','Color'])\ndisplay(df)\ng3 = igraph.Graph.TupleList(df.itertuples(index=False), directed=True) #, weights=False, edge_attrs=[\"Weight\",'Color'])\nprint(g3.get_edgelist() )\n\nvisual_style = {}\nvisual_style[\"vertex_label\"] = list(g3.vs['name'])\nigraph.plot(g3, **visual_style,  bbox = (300,300))\n","0e4a95e5":"#  example 2: edges attributes. Some problem - seems code works okay in interactve mode on kaggle, but in \"commit mode\" not quite Okay \n\ndf = pd.DataFrame(data = [['a1','b1', 1, 'green'],['a2','b2',3,'red']], columns = ['Node 1', 'Node 2', 'Weight','Color'])\ndisplay(df)\ng3 = igraph.Graph.TupleList(df.itertuples(index=False), directed=True, weights=False, edge_attrs=[\"Weight\",'Color'])\nprint(g3.get_edgelist() )\nprint(list(g3.vs['name']))\nprint(list(g3.es['Weight']))\n\nvisual_style = {}\n#visual_style[\"vertex_color\"] = ['red','gray','green']\nvisual_style[\"vertex_label\"] = list(g3.vs['name'])\nvisual_style[\"edge_label\"] = list(g3.es['Weight'])\nvisual_style[\"edge_color\"] = list(g3.es['Color'])\nigraph.plot(g3, **visual_style,  bbox = (300,300))\n","a490d74d":"n = 10\nm = 20\ng = igraph.Graph.Erdos_Renyi(n,  m=m, directed=False, loops=False) # Generates a graph based on the Erdos-Renyi model.\n# https:\/\/igraph.org\/python\/doc\/igraph.Graph-class.html\n\nigraph.plot(g,  bbox = (300,100))\n","035c28ac":"g = igraph.Graph.Famous(\"zachary\") \nigraph.plot(g, bbox = (500,200))\n","89ff105a":"g = igraph.Graph(directed=True)\ng.add_vertices(4)\ng.add_edge(0,1)\ng.add_edge(1,2)\ng.neighbors(0), g.neighbors(1), g.neighbors(2) , g.neighbors(3) ","37c8c5ea":"g = igraph.Graph(directed=True)\ng.add_vertices(3)\ng.add_edge(0,1)\nprint( g.degree(), g.indegree(), g.outdegree() )\n\n\ng = igraph.Graph(directed=True)\ng.add_vertices(4)\ng.add_edge(0,1)\ng.add_edge(0,1) # this creates multi-graph, thus degrees would be doubled\nprint( g.degree(), g.indegree(), g.outdegree() )\n","1d27aeef":"g = igraph.Graph.Famous(\"zachary\") \nh = g.degree_distribution(bin_width=1) # Returns igraph.Histogram object https:\/\/igraph.org\/python\/doc\/igraph.statistics.Histogram-class.html\nprint(h)\nprint()\nprint(list(h.bins()) )\n\n","fb2ce51b":"g = igraph.Graph(directed=True)\ng.add_vertices(4)\ng.add_edge(0,1)\nfor v in g.vs:\n    print(v)\nprint('Edges')\nfor e in g.es:\n    print(e)\n    \n    ","d497d13f":"g = igraph.Graph(directed=True)\ng.add_vertices(2)\ng.add_edge(0,1)\nprint('Number of strongly connected compoenents', len( g.clusters(mode='STRONG')), 'what are them:', list( g.clusters(mode='STRONG') ) )\nprint('Number of weakly connected compoenents', len( g.clusters(mode='WEAK')), 'what are them:', list( g.clusters(mode='WEAK') ) )\nvisual_style = {}\nvisual_style[\"vertex_label\"] = range(g.vcount()) \nigraph.plot(g, **visual_style,  bbox = (100,40))\n","f09883d5":"########################################################################\n# Create test graph - see plot below\n########################################################################\n\ng = igraph.Graph()\ng.add_vertices(16)\nnodes = np.array([0,1,4,5])\nfor k in [0,2,8,10]:#,2,4,6,8]:\n  for i in nodes+k:\n    for j in nodes+k:\n      if i<=j: continue \n      g.add_edge(i, j)\ng.add_edge(1, 2)\ng.add_edge(4, 8)\ng.add_edge(13, 14)\ng.add_edge(7, 11)\n\n########################################################################\n# Cluster by Louvain algorithm \n# https:\/\/igraph.org\/python\/doc\/igraph.Graph-class.html#community_multilevel\n########################################################################\nlouvain_partition = g.community_multilevel()# weights=graph.es['weight'], return_levels=False)\nmodularity1 = g.modularity(louvain_partition)#, weights=graph.es['weight'])\nprint(\"The modularity for igraph-Louvain partition is {}\".format(modularity1))\n#print();\nprint('Partition info:')\nprint(louvain_partition)\n\n########################################################################\n# Cluster by optimal algorithm (applicable only for small graphs <100 nodes), it would be very slow otherwise \n# https:\/\/igraph.org\/python\/doc\/igraph.Graph-class.html#community_optimal_modularity\n########################################################################\nprint();\nv = g.community_optimal_modularity() # weights= gra.es[\"weight\"]) \nmodularity1 = g.modularity(v)#, weights=graph.es['weight'])\nprint(\"The modularity for igraph-optimal partition is {}\".format(modularity1))\n#print();\nprint('Partition info:')\nprint(v) \n\n########################################################################\n# Plot graph \n########################################################################\nlayout = g.layout_grid( ) # reingold_tilford(root=[2])\nvisual_style = {} \ndict_colors = {0:'Aqua', 1:'Aqua', 4:'Aqua', 5:'Aqua',2:'Aquamarine', 3:'Aquamarine', 6:'Aquamarine', 7:'Aquamarine',\n               8:'Crimson', 9:'Crimson', 12:'Crimson', 13:'Crimson',10:'Goldenrod', 11:'Goldenrod', 14:'Goldenrod', 15:'Goldenrod',\n               } # https:\/\/en.wikipedia.org\/wiki\/X11_color_names - colors by names supported by igraph \nvisual_style[\"vertex_color\"] = [dict_colors[k]  for k in range(g.vcount() )]\nvisual_style[\"vertex_label\"] = range(g.vcount()) \nigraph.plot(g, layout = layout, **visual_style, bbox = (200,200) )","514772c8":"# How to create partition by \"hands\"\n# igraph contains some bug - sometimes does not recongize np.int64 for partitions, needs to convert to \"int\"\n# but sometimes it works okay\n\nimport numpy as np\nimport igraph\n\nmatr_A = np.array( [[0,1,0],[0,0,0],[0,1,0]])\ng = igraph.Graph().Adjacency(matr_A.tolist())\ng.to_undirected(mode = 'collapse')\n\nmembership = [0,1,1] \n#membership = [ int(t ) for t in membership ] # Convert to int \nmodularity1 = g.modularity(membership)#, weights=graph.es['weight'])\nprint(\"The modularity for partition is {}\".format(modularity1))\n\nd = {0:'red',1:'green'}\nl = [d[membership[i]] for i in range(len(membership))]\nvisual_style = {}\nvisual_style[\"vertex_color\"] =l# [dict_colors[k]  for k in range(g.vcount() )]\nigraph.plot(g, **visual_style, bbox = (200,200) ) # layout = layout,\n","7a8b6c85":"matr_A = np.array( [[0,1,0],[0,0,0],[0,1,0]])\ng = igraph.Graph().Adjacency(matr_A.tolist())\n#g.to_undirected(mode = 'collapse')\nigraph.plot(g, bbox = (200,200))","ad58e0b6":"g.to_undirected(mode = 'collapse')\nigraph.plot(g, bbox = (200,200))","0b298954":"# Example to create a graph from correlation matrix of random vectors, binarized to 0,1 by some threshold\n\nimport numpy as np\nimport igraph\nX = np.random.randn(10,10)\ncormatr = np.corrcoef(X.transpose())\ncormatr\ncorrelation_threshold = 0.6\nprint(correlation_threshold, '= correlation_threshold')\n\na = np.where( np.abs(np.triu(cormatr,1)) > correlation_threshold )\nl = list( zip( a[0],a[1]) )\nprint(l)\n\nprint('Number of edges:', len(l) )\n\n\ng = igraph.Graph()\ng.add_vertices(len(cormatr))\ng.add_edges( list(l)  )\n\ng.to_undirected(mode = 'collapse')\nigraph.plot(g, bbox = (200,200))","32687a30":"import numpy as np\nimport igraph\nfrom sklearn.neighbors import NearestNeighbors\n\nX = np.random.rand(10,2)\nn_neighbors = 2\n#metric='cosine'#, \nmetric='minkowski' # default\n\nnbrs = NearestNeighbors(n_neighbors=n_neighbors, metric = metric).fit(X) #  algorithm='ball_tree' #  {\u2018mutual_proximity\u2019, \u2018local_scaling\u2019, \u2018dis_sim_local\u2019, None},\ndistances, indices = nbrs.kneighbors(X)\nedges = np.zeros( (0,2), dtype= int ) \nfor i in range(1,n_neighbors):\n    ed = indices[:,[0,i]]\n    edges = np.concatenate( (edges,ed), axis = 0 )\n\ng = igraph.Graph( directed = True )\ng.add_vertices(range(len(X)))\ng.add_edges(edges )\n\nigraph.plot(g, bbox = (200,200))\n","dddb5db5":"import numpy as np\na = (np.array([0, 0, 1, 2, 2]), np.array([0, 1, 2, 0, 2]))\nlist( zip(a[0],a[1]) )","b0879957":"import numpy as np\nimport igraph\nfrom sklearn.neighbors import kneighbors_graph\n\nX = np.random.rand(10,2)\n\nn_neighbors = 2\nm = kneighbors_graph(X, n_neighbors= 2, mode='connectivity' , include_self=False) #'distance' mode=  'connectivity'\nprint(type(m), m.shape)\n\nvec_degs = np.sum(m,axis = 0 )\nvec_degs = np.squeeze(np.array(vec_degs.ravel()))\nprint(' \"In\"-degress of nodes', vec_degs)\n\na = m.nonzero()\ng = igraph.Graph( directed = True )\ng.add_vertices(range(len(X)))\ng.add_edges(list( zip(a[0],a[1]) ) )\n\nigraph.plot(g, bbox = (200,200))\n\n","057fefd2":"## Erdos Renyi","5371f78f":"# Neigbours of current vertex","04c4bf2a":"## way 1 - via NearestNeighbors","1e946c7b":"# Zachary karate club\n\nhttps:\/\/en.wikipedia.org\/wiki\/Zachary%27s_karate_club","f4faacd6":"## Important: Create graph from edgelist e.g. columns of dataframe - use TupleList\n\nThat is kind of typical way to create data from loaded dataframes\n\ncreate igraph Graph from pandas dataframe\nhttps:\/\/stackoverflow.com\/a\/58411468\/625396\n","4a1ba9e2":"# Installing\n","d66eaae4":"## Way 2 - use np.where and zip - to get list of edges\n\n","b509945c":"# Connected components","a1f85037":"it is preliminary version, beeing updated. Alexander Chervov June 2020","13db065f":"# Create graph from adjency matrix ","6517fcff":"# Nodes and Edges\n\ng.vcount() , g.ecount()","3584cbbb":"# Iteration over nodes\/edges","0ff5233f":"# Other useful ways to create graphs","c3f44c65":"# Create Graph: create, AddNode, AddEdge","fb0ea985":"# igraph\n\nNotebook shows various examples\/functions how to work with \"igraph\" graph library. \nhttps:\/\/en.wikipedia.org\/wiki\/Igraph , https:\/\/igraph.org\/\n\nIt is one the two most popular graph libraries, together with networkX.\nIt is implemented in C (with Python and R interface) that is why it is quite fast.\nIt \"pip install\"s Okay on google.colab and already preinstalled on kaggle, but sometimes you might have problems installing it on local computers or nanoHub.org.\nDocumentation for Python is not ideal. \n\n\nThere is nice  book on graphs with igraph:  by G\u00e1bor Cs\u00e1rdi, Tam\u00e1s Nepusz, Edoardo Airoldi, \"Statistical Network Analysis with igraph\"\nhttps:\/\/sites.fas.harvard.edu\/~airoldi\/pub\/books\/BookDraft-CsardiNepuszAiroldi2016.pdf","ceb68a65":"## Way 1","a0418804":"# Documentation links and comments\n\nhttps:\/\/igraph.org\/python\/doc\/tutorial\/tutorial.html # Easy startup examples - start from here if you are just starting. Or look to the current notebook.\n\nhttps:\/\/igraph.org\/python\/doc\/igraph.Graph-class.html # Documentation on main functions is here. Second place where to look. \n \n\nThere is nice book on graphs with igraph: by G\u00e1bor Cs\u00e1rdi, Tam\u00e1s Nepusz, Edoardo Airoldi, \"Statistical Network Analysis with igraph\" https:\/\/sites.fas.harvard.edu\/~airoldi\/pub\/books\/BookDraft-CsardiNepuszAiroldi2016.pdf\nTam\u00e1s Nepusz - is the main author of the package, together with G\u00e1bor Cs\u00e1rdi \n\n\n\nhttps:\/\/igraph.org\/ # site of the igraph project \n\n\nExamples of igraph use  from medium\n\nhttps:\/\/towardsdatascience.com\/visualising-graph-data-with-python-igraph-b3cc81a495cf\n\nhttps:\/\/towardsdatascience.com\/newbies-guide-to-python-igraph-4e51689c35b4\n\n\nPS\n\nsome examples of use igraph for correlation analysis on kaggle:\n\nhttps:\/\/www.kaggle.com\/devisangeetha\/network-visualizations-with-igraph\n\nAnalysis of correlations between data with igraph:\n\nhttps:\/\/www.kaggle.com\/alexandervc\/genes-correlations-scrnaseq-stoeckius2017\n\nhttps:\/\/www.kaggle.com\/alexandervc\/correlation-analysis-scrnaseq-nestorova2016\n\nhttps:\/\/www.kaggle.com\/alexandervc\/moa-correlation-analysis-use-igraph\n\nhttps:\/\/www.kaggle.com\/alexandervc\/analysis-of-genes-correlations\/notebook\n\n\n\n\n\n\n","a0d95b19":"# Way 2 - via kneighbors_graph\n","daa17f1d":"# Get degrees of all nodes ","ea8291b7":"# KNN graphs and igraph\n\nConstruction of KNN graphs is built-in in sklearn. \nHere we show how one can convert it to igraph graph. ","74a31913":"# Plot graphs","1ea80fa6":"### Create the graph with constructor \n","6dd4bfcb":"# Modularity, Louvain clustering , etc...","a073fdc5":"# Create different types of graphs\n\nigraph has built-in generation for great number of graphs.\n\nSee https:\/\/igraph.org\/python\/doc\/igraph.GraphBase-class.html - read from the sub-items \"Asymmetric_Preference\", \"Atlas\"...\nIncluding most famous like:\n\nErdos_Renyi(n, p, m, directed=False, loops=False)\n\nBarabasi(n, m, outpref=False, directed=False, power=1, zero_appeal=1, implementation=\"psumtree\", start_from=None) # Barabasi-Albert model.\n\nWatts_Strogatz(dim, size, nei, p, loops=False, multiple=False)\n\nLattice(dim, nei=1, directed=False, mutual=True, circular=True) # Just lattice\n\nAnd many, many more... \n\nHowever, unfortunately, built-in collection of graph datasets \"Nexus\" is now depricated.\nIt contained many interesting graphs. "}}