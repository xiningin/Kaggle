{"cell_type":{"1cc9b410":"code","3df3bf4a":"code","b8b204c9":"code","8471ad22":"code","01c20246":"code","d1cd430e":"code","25d01954":"code","4636fc42":"code","82dcdd6f":"code","ceb499ed":"code","dda7c676":"code","a978b582":"code","b8b922ce":"code","d087c506":"code","f8b13388":"code","b2081bb5":"code","d8f4834f":"code","d3bcb501":"code","3354428e":"code","318cc487":"code","2ba5addb":"code","7c6ec70d":"code","aeb3866b":"code","6a1ea83b":"code","74e651d8":"code","9fec810a":"code","cb2b2554":"code","6c17179e":"code","7ced2fdd":"code","2540d2e6":"code","84836010":"code","c4dd3e40":"code","f2566ef2":"code","bfe31e50":"code","5fbad474":"code","e1caece0":"code","873f0260":"code","79d87c62":"code","47cf56ed":"code","372ae654":"code","080ef57f":"code","d391eea8":"code","994426cd":"code","e0f56f59":"code","fe6aacee":"code","b9749876":"code","e4ede42c":"code","12636917":"code","72529dc6":"code","c3d092e9":"code","16c088f0":"code","9c9ecc12":"code","ac6a0b64":"code","f2446818":"code","3f387585":"code","18049ae3":"code","2cf37bd0":"code","77691f32":"code","67270443":"markdown","71b3254c":"markdown","65570925":"markdown","dd499833":"markdown","0f7d184d":"markdown","08ee65f1":"markdown","840fb547":"markdown","715cd44e":"markdown","f6e2416e":"markdown","0ab5707c":"markdown","a3b0f01b":"markdown","a03a3302":"markdown","fd345239":"markdown","2317aebc":"markdown","60398c5e":"markdown","6dea6980":"markdown","e0ae6b37":"markdown","ea084a81":"markdown","cdf2d9e2":"markdown","71387e30":"markdown","0f14760c":"markdown","07e5d983":"markdown","5e30548f":"markdown","6ae6a8d4":"markdown","bf5c9b62":"markdown","12176472":"markdown","9060295c":"markdown","20f37073":"markdown","8a2c0be6":"markdown","21d5e3dd":"markdown","50adb5c8":"markdown"},"source":{"1cc9b410":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport pickle\nimport folium\nfrom folium.plugins import HeatMap\nimport sqlite3\nimport plotly.express as px\nimport os\n\npd.options.display.max_columns = None\npd.options.display.max_rows = 300","3df3bf4a":"data_dir = os.path.abspath('..\/input\/so-paulo-bus-system\/')","b8b204c9":"overview = pd.read_csv(os.path.join(data_dir, 'overview.csv'))\noverview.head()","8471ad22":"overview.info()","01c20246":"trips = pd.read_csv(os.path.join(data_dir, 'trips.csv'))","d1cd430e":"trips.head()","25d01954":"trips.info()","4636fc42":"routes = pd.read_csv(os.path.join(data_dir, 'routes.csv'))\nroutes.head()","82dcdd6f":"len(routes['route_id'].unique())","ceb499ed":"stops = pd.read_csv(os.path.join(data_dir, 'stops.csv'))\nstops.head()","dda7c676":"stops.info()","a978b582":"import numpy as np","b8b922ce":"stops['stop_desc'] = stops['stop_desc'].apply(lambda x: x if x != None else np.nan)","d087c506":"len(stops['stop_id'].unique())","f8b13388":"def generate_base_map(default_location=[-23.5489, -46.6388],default_zoom_start=11,):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)\n    return base_map","b2081bb5":"folium_map = generate_base_map()","d8f4834f":"# Getting unique stops\nunique_stops = stops.drop_duplicates(['stop_id'])\n\n# Generating map\nfor i in range(len(unique_stops)):\n    marker = folium.CircleMarker(location=[unique_stops['stop_lat'][i], unique_stops['stop_lon'][i]], radius = 1, color='r', fill=True)\n    marker.add_to(folium_map)","d3bcb501":"folium_map","3354428e":"stops['count'] = 1\nbase_map = generate_base_map()\nHeatMap(data=stops[['stop_lat', 'stop_lon', 'count']].groupby(['stop_lat', 'stop_lon']).sum().reset_index().values.tolist(), radius=8, max_zoom=15).add_to(base_map)\nbase_map","318cc487":"shapes = pd.read_csv(os.path.join(data_dir, 'shapes.csv'))","2ba5addb":"shapes.shape","7c6ec70d":"shapes.head()","aeb3866b":"shapes['shape_coords'] = shapes.apply(lambda x: (x['shape_pt_lat'], x['shape_pt_lon']), axis=1)","6a1ea83b":"shapes['shape_coords'].head()","74e651d8":"import random\ndef random_color():\n    a = random.randint(0,256)\n    b = random.randint(0,256)\n    c = random.randint(0,256)\n    rgbl=[a,b,c]\n    random.shuffle(rgbl)\n    return tuple(rgbl)\n\ndef genhex():\n    rgb = random_color()\n    return '#%02x%02x%02x' % rgb","9fec810a":"folium_map = generate_base_map()","cb2b2554":"for shape in list(shapes.groupby('shape_id')):\n    df = shape[1]\n    marker = folium.PolyLine(locations=df['shape_coords'].to_list(), color=genhex())\n    marker.add_to(folium_map)","6c17179e":"'''\nfor shape in list(shapes.groupby('shape_id')):\n    df = shape[1]\n    coord_list = df['shape_coords'].to_list()\n    initial_point = coord_list[0]\n    terminal_point = coord_list[len(coord_list)-1]\n    route_edges = [initial_point, terminal_point]\n    \n    for point in route_edges:\n        marker = folium.Marker(location=[point[0], point[1]])\n        marker.add_to(folium_map)\n'''\n0","7ced2fdd":"folium_map","2540d2e6":"overview.tail(80)","84836010":"stops_quantity = overview.groupby('trip_id').count()\nstops_quantity['index'].describe()","c4dd3e40":"stops_quantity.rename(columns = {'index':'stops_quantity'}, inplace=True)","f2566ef2":"px.histogram(stops_quantity, x='stops_quantity', histnorm='density', labels={'stops_quantity':'Number of Stops'})","bfe31e50":"stops_quantity.reset_index(inplace=True)","5fbad474":"stops_quantity.head()","e1caece0":"stops_quantity_merger = stops_quantity[['trip_id','stops_quantity']].copy()","873f0260":"overview_stops_qnt = overview.merge(stops_quantity_merger, on='trip_id', how='outer')","79d87c62":"shapes_stops_qnt = shapes.merge(overview_stops_qnt.drop_duplicates(['shape_id']), on='shape_id', how='outer')","47cf56ed":"shapes_stops_qnt.drop(['index_x', 'index_y'], axis=1, inplace=True)","372ae654":"many_stops_shapes = shapes_stops_qnt[shapes_stops_qnt['stops_quantity'] >= 80]","080ef57f":"folium_map = generate_base_map()","d391eea8":"for shape in list(many_stops_shapes.groupby('shape_id')):\n    df = shape[1]\n    marker = folium.PolyLine(locations=df['shape_coords'].to_list(), color=genhex())\n    marker.add_to(folium_map)","994426cd":"folium_map","e0f56f59":"few_stops_shapes = shapes_stops_qnt[shapes_stops_qnt['stops_quantity'] <= 10]","fe6aacee":"folium_map = generate_base_map()","b9749876":"for shape in list(few_stops_shapes.groupby('shape_id')):\n    df = shape[1]\n    marker = folium.PolyLine(locations=df['shape_coords'].to_list(), color=genhex())\n    marker.add_to(folium_map)","e4ede42c":"folium_map","12636917":"overview.head()","72529dc6":"overview.corr()","c3d092e9":"stop_times = pd.read_csv(os.path.join(data_dir, 'stop_times.csv'))","16c088f0":"stop_times.head()","9c9ecc12":"frequencies = pd.read_csv(os.path.join(data_dir, 'frequencies.csv'))","ac6a0b64":"frequencies.head()","f2446818":"frequencies[frequencies['trip_id'] == '1012-10-0']","3f387585":"overview.head()","18049ae3":"passengers = pd.read_csv(os.path.join(data_dir, 'passengers.csv'))\npassengers.head()","2cf37bd0":"# bus_position = pd.read_csv(os.path.join(data_dir, 'bus_position.csv'))\n# bus_position.head()","77691f32":"# bus_position.tail()","67270443":"<em>Importing libraries<\/em>","71b3254c":"**Now let's plot a heatmap of the stops!**\n\n<em>Here we are going to use all the stops in the stops data frame. Doing so, we can also weight the concentration of bus routes in a certain stop.<\/em>","65570925":"Pretty interesting! We candefinetly see some stops hotspots. There are also some areas that do not have much bus stops!","dd499833":"*This would be the code for adding the first and last stop of the route, but the map gets too laggy.*","0f7d184d":"*Generating Map*","08ee65f1":"It seems unnatural that a bus line has more than 80 lines. Now imagine having 132 lines! That is impressive. Let's see how these routes are displayed in map","840fb547":"### Stops Visualization\n\n**Now that we have the data frames, let's plot some maps to see the bus_stops**","715cd44e":"### Too heavy too run","f6e2416e":"*Generating map*","0ab5707c":"## Correlations","a3b0f01b":"*Creating lines with PolyLines*","a03a3302":"## Stops Stats","fd345239":"**Let's get the frequencies table**","2317aebc":"<em>Here we are getting only the unique stops. It will make the map lighter.<\/em>","60398c5e":"**Let's import one more table to plot the shape of the bus routes**","6dea6980":"# EDA for SPTrans Developer API - Group 21\n\n**This notebook performs some Exploratory Data Analysis over SPTrans Developer API. All the tables are in a SQL database, bus.db.**","e0ae6b37":"*Generating lines*","ea084a81":"*Plotting Map*","cdf2d9e2":"### Plotting stops with more than 80 stops","71387e30":"<em>Transforming coordinates in a tuple<\/em>","0f14760c":"*Example of frequencies for one bus line*","07e5d983":"*Genrating new map*","5e30548f":"**Importing some tables**","6ae6a8d4":"## Passengers Analysis","bf5c9b62":"<em>Function for generating new folium map<\/em>","12176472":"*Let's set a random color to each line so we can visualize better*","9060295c":"### Plotting lines with less than 5 stops","20f37073":"*Plotting Map*","8a2c0be6":"*Generating lines*","21d5e3dd":"Merging with the overview dataset","50adb5c8":"Dropping the unnecessary rows (Duplicates of stop_id) for plotting the map"}}