{"cell_type":{"4a97c035":"code","4d80da32":"code","e5c198b2":"code","22ff98dd":"code","45ea3b86":"code","0270eb8d":"code","1ae97caa":"code","094e39d6":"code","0403e307":"code","09000878":"code","3b9fdb2c":"code","f2c73895":"code","e02182bf":"code","07e18f98":"code","c84087e3":"code","654da32b":"code","7ec90ea1":"code","f0fefe95":"code","27134e82":"code","d28eacb0":"code","762804e3":"code","f1e0950b":"code","2ecb7360":"code","0eea0b0e":"code","c1748546":"code","e0d169ef":"code","8de41133":"code","21b296c4":"code","684870d5":"code","1cd8c182":"code","454bde56":"markdown","56bf84ae":"markdown","9ec814f6":"markdown","1191cfae":"markdown","d848ed61":"markdown","87aa7e42":"markdown","59a17ab1":"markdown","a53f9535":"markdown","defd5f57":"markdown","d166e5d2":"markdown"},"source":{"4a97c035":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d80da32":"!pip install pyspark","e5c198b2":"import pyspark\nfrom pyspark.sql import SparkSession\nspark=SparkSession.builder.appName('Cars').getOrCreate()","22ff98dd":"cars='\/kaggle\/input\/large-car-dataset\/CIS_Automotive_Kaggle_Sample.csv'\ndf_pyspark=spark.read.csv(cars)\ndf_pyspark=spark.read.option('header','true').csv(cars,inferSchema=True)","45ea3b86":"df_pyspark.printSchema()","0270eb8d":"df_pyspark.columns","1ae97caa":"from pyspark.sql.functions import datediff,col\ndf_pyspark=df_pyspark.withColumn('Time in Lot',datediff(df_pyspark['firstSeen'],df_pyspark['lastSeen']))","094e39d6":"df_pyspark.columns","0403e307":"from pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit\ntrain,test=df_pyspark.randomSplit([0.6, 0.4], seed=150)","09000878":"print((train.count(), len(train.columns)))","3b9fdb2c":"print((test.count(), len(test.columns)))","f2c73895":"import pyspark.sql.functions as func\ntrain.filter(func.col(\"Time in Lot\") < 0).count() ","e02182bf":"train.filter(func.col(\"Time in Lot\") == 0).count()","07e18f98":"train.filter(func.col(\"Time in Lot\") > 0).count()","c84087e3":"train.filter(func.col(\"Time in Lot\") > 0).select(['Time in Lot','firstSeen','lastSeen']).show()","654da32b":"import pyspark.sql.functions as func\n\ntrain=train.filter(func.col(\"Time in Lot\") <= 0)","7ec90ea1":"from pyspark.sql.functions import col,sum\ndf_pyspark.select(*(sum(col(c).isNull().cast(\"int\")).alias(c) for c in df_pyspark.columns))","f0fefe95":"from pyspark.sql.functions import col,sum\n\nmissing_df=train.select(*(sum(col(c).isNull().cast(\"int\")).alias(c) for c in train.columns)).toPandas()","27134e82":"missing_df=missing_df.loc[~(missing_df==0).all(axis=1)]","d28eacb0":"missing_df=missing_df.T","762804e3":"import pandas as pd\npercent_missing = missing_df[0] * 100 \/train.count()\nmissing_value_df = pd.DataFrame({'column_name': missing_df.index ,\n                                 'missing':missing_df[0],\n                                 'percent_missing': percent_missing})","f1e0950b":"missing_value_df=missing_value_df.sort_values(by=['percent_missing'])","2ecb7360":"pd.set_option('display.max_rows', None)\nmissing_value_df['percent_missing']","0eea0b0e":"len(missing_value_df[missing_value_df['percent_missing']>79])","c1748546":"missing_value_df.to_csv('missing_values.csv')","e0d169ef":"columns_to_drop = missing_value_df[missing_value_df['percent_missing']>79].column_name\ndf_pyspark = df_pyspark.drop(*columns_to_drop)","8de41133":"len(df_pyspark.columns)","21b296c4":"train.select('Time in Lot').show()","684870d5":"train['Time in Lot'].to_csv('Time_in_lot.csv')","1cd8c182":"from pyspark.ml.stat import Correlation\nfrom pyspark.ml.feature import VectorAssembler\n\n# convert to vector column first\nvector_col = \"corr_features\"\nassembler = VectorAssembler(inputCols=df_pyspark.columns, outputCol=vector_col)\ndf_vector = assembler.transform(df_pyspark).select(vector_col)\n\n# get correlation matrix\nmatrix = Correlation.corr(df_vector, vector_col)\n","454bde56":"Check to make sure the target was created.","56bf84ae":"Check to make sure the train-test-split worked.","9ec814f6":"**Interesting point:**\n\n\"Time in lot\" should probably be always negative. (Also, should change this to positive.)\n\nHOWEVER:\n\n\nNumber of instances of \"Time in lot\" negative: 3224740\n\n\nNumber of instances of \"Time in lot\" equal to zero: 191241\n\n\nNumber of instances of \"Time in lot\" positive: 111\n\nThe number of positives is 111\/3416092 of the total.\n\nIt makes sense to just delete these.\n","1191cfae":"Create csv file of missing values","d848ed61":"Train-test-split (60% training data, 40% test data)","87aa7e42":"Interesting target ideas: Asking price? Asking price is the same as selling price. It could be the case that car dealerships are setting bad targets. We could predict the car stock number, which is the amount of time the car has been on the lot. \n\nWe create the target, \"Time in lot\".","59a17ab1":"MISSING DATA","a53f9535":"Missing values:","defd5f57":"Understand the target better.","d166e5d2":"Take a quick look at the data structure."}}