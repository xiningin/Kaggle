{"cell_type":{"47084908":"code","db9ca9c2":"code","93c322c0":"code","ef1f77b7":"code","aa65ac92":"code","181085ef":"code","8a57afa7":"code","349dbd01":"code","784ee1e2":"code","24d38e6d":"code","7d6895fc":"code","a7e185e0":"code","b4d3c35e":"code","f7350d17":"code","a51272da":"code","ceefadd3":"code","d004ac7c":"code","97f38acb":"code","a8bb4fef":"code","0675eecc":"code","2cada755":"code","a8415474":"code","438d0fa2":"code","d076253f":"code","633e866b":"code","48b74409":"code","2571d3f3":"code","d207117d":"code","f9625ec2":"code","a0d22902":"code","aca78201":"code","dddc212b":"markdown","3a62b62f":"markdown"},"source":{"47084908":"import pandas as pd\nimport numpy as np\nimport category_encoders as ce\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, balanced_accuracy_score, roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.pipeline import make_pipeline, Pipeline\nfrom sklearn.preprocessing import MinMaxScaler, MaxAbsScaler, KBinsDiscretizer, FunctionTransformer\nfrom sklearn.model_selection import cross_val_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc; gc.enable()","db9ca9c2":"df = pd.read_csv('..\/input\/cat-in-the-dat-ii\/train.csv')","93c322c0":"test_df = pd.read_csv('..\/input\/cat-in-the-dat-ii\/test.csv')","ef1f77b7":"df.head()","aa65ac92":"df.describe()","181085ef":"df.isna().sum()","8a57afa7":"#filling missing values\nfor col in df:\n    if df[col].isna().sum() > 0:\n        df[col] = df[col].fillna(df[col].mode()[0])","349dbd01":"df.isna().sum()","784ee1e2":"#One Hot Encoding","24d38e6d":"y = df['target']\nX_train = df.drop(['target', 'id'], axis=1)\nX_test = test_df.drop(['id'], axis=1)","7d6895fc":"combined_data = pd.concat([X_train, X_test], axis=0, sort=False)\ncombined_data = pd.get_dummies(combined_data, columns=combined_data.columns, drop_first=True, sparse=True)\nX_train = combined_data.iloc[: len(df)]\nX_test = combined_data.iloc[len(df): ]","a7e185e0":"print(f'Shape of training dataset: {X_train.shape}')\nprint(f'Shape of test dataset: {X_test.shape}')","b4d3c35e":"#compress data to make everything run faster\nX_train = X_train.sparse.to_coo().tocsr()\nX_test = X_test.sparse.to_coo().tocsr()","f7350d17":"x_train, x_test, y_train, y_test = train_test_split(X_train, y, test_size=0.30)","a51272da":"lr = LogisticRegression(verbose = 100, max_iter = 600, C=0.5, solver='lbfgs')\n\nlr.fit(x_train, y_train)\n","ceefadd3":"train_preds = lr.predict_proba(x_train)[:,1]\ntest_preds = lr.predict_proba(x_test)[:,1]\n\nprint(\"AUC:\"); print(\"=\"*len(\"AUC:\"))\nprint(\"TRAIN:\", roc_auc_score(y_train, train_preds))\nprint(\"TEST:\", roc_auc_score(y_test, test_preds))","d004ac7c":"#Target Encoding","97f38acb":"df = pd.read_csv('..\/input\/cat-in-the-dat-ii\/train.csv')","a8bb4fef":"test_df = pd.read_csv('..\/input\/cat-in-the-dat-ii\/test.csv')","0675eecc":"#fill missing values\nfor col in df:\n    if df[col].isna().sum() > 0:\n        df[col] = df[col].fillna(df[col].mode()[0])","2cada755":"used_cols = [c for c in df.columns.tolist() if c not in ['target', 'id']]","a8415474":"#create a target encoder\nce_target_encoder = ce.TargetEncoder(cols = used_cols, smoothing=.3)","438d0fa2":"target = df['target']\nte_df = df.drop(['target', 'id'], axis=1)\nte_test_df = test_df.drop('id', axis=1)","d076253f":"ce_target_encoder.fit(te_df, target)","633e866b":"te_df = ce_target_encoder.transform(te_df)\nte_test_df = ce_target_encoder.transform(te_test_df)","48b74409":"y = target\nX_train = te_df\nX_test = te_test_df","2571d3f3":"test_id = test_df['id']","d207117d":"x_train, x_test, y_train, y_test = train_test_split(X_train, y, test_size=0.30)","f9625ec2":"lr = LogisticRegression(verbose = 100, max_iter = 600, C=0.5, solver='lbfgs')\n\nlr.fit(x_train, y_train)\n","a0d22902":"train_preds = lr.predict_proba(x_train)[:,1]\ntest_preds = lr.predict_proba(x_test)[:,1]\n\nprint(\"AUC:\"); print(\"=\"*len(\"AUC:\"))\nprint(\"TRAIN:\", roc_auc_score(y_train, train_preds))\nprint(\"TEST:\", roc_auc_score(y_test, test_preds))","aca78201":"submission = pd.read_csv(\"..\/input\/cat-in-the-dat-ii\/sample_submission.csv\")\nsubmission[\"id\"] = test_id\nsubmission[\"target\"] = lr.predict_proba(X_test)[:, 1]\nsubmission.to_csv(\"submission.csv\", index=False)","dddc212b":"Objective: See how different encoding methods work with Logistic Regression model","3a62b62f":"* One Hot encoding everything took way longer than Target encoding\n* In this instance Target Encoding performed better\n* Logistic Regression is a good easy to use model\n"}}