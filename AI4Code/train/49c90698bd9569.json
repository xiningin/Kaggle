{"cell_type":{"10332b4f":"code","cd00f546":"code","450e66d9":"code","e2cd7995":"code","ec048049":"code","e2efa615":"code","7eac79cd":"code","94bf2c38":"code","913c2067":"code","09ec2434":"code","be75394a":"code","8b07719b":"code","c46350e0":"code","a2c21aec":"code","ab84c37f":"code","8a31b54a":"code","e0acdfdd":"code","9036133d":"markdown","e559422f":"markdown","56471b45":"markdown","3f92217a":"markdown","49486eb0":"markdown","ac340ba7":"markdown","6ca2697e":"markdown"},"source":{"10332b4f":"import sklearn","cd00f546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\n\nimport os,cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 20, 10\n\n#from sklearn.utils import shuffle\n#from sklearn.cross_validation import train_test_split\n\nimport keras\n\nfrom keras.utils import np_utils\n\nfrom keras import backend as K\n\nfrom keras.models import Sequential\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.optimizers import SGD,RMSprop,adam\nfrom keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd","450e66d9":"# get the data\nfilname = '..\/input\/fer2013\/fer2013.csv'\nlabel_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']\nnames=['emotion','pixels','usage']\ndf=pd.read_csv('..\/input\/fer2013\/fer2013.csv',names=names, na_filter=False)\nim=df['pixels']\ndf.head()","e2cd7995":"a = df['emotion']\nidx = pd.Index(a)\ncount = idx.value_counts()\nprint(count)","ec048049":"print(idx)","e2efa615":"def getData(filname):\n    # images are 48x48\n    # N = 35887\n    Y = []\n    X = []\n    first = True\n    for line in open(filname):\n        #This condition skips the first condition\n        if first:\n            first = False\n        else:\n            row = line.split(',')\n            Y.append(int(row[0]))\n            X.append([int(p) for p in row[1].split()])\n\n    #X, Y = np.array(X) \/ 255.0, np.array(Y)\n    X, Y = np.array(X)\/255.0 , np.array(Y)\n    return X, Y\n","7eac79cd":"X, Y = getData(filname)\nnum_class = len(set(Y))\nprint(num_class)\n","94bf2c38":"N,D = X.shape\nX = X.reshape(N, 48, 48, 1)","913c2067":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","09ec2434":"img = X_train[780].reshape(48,48)\nplt.imshow(img, interpolation='nearest')\nplt.show()","be75394a":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","8b07719b":"no_images = 0\nno_sadness = 0\nno_anger = 0\nno_happy = 0\nno_fear = 0\nno_surprise = 0\nno_neutral = 0\n#epoch = 26\nepoch = 51\n\nfor e in range(epoch):\n    print('Epoch', e)\n    batches = 0\n    for x_batch, y_batch in aug.flow(X_train, y_train, batch_size=32):\n        batches += 1\n        no_images +=len(x_batch)\n        y_batch_real = y_batch\n        for label in y_batch_real:\n            if(label== 4):\n                no_sadness+=1\n            elif(label==0):\n                no_anger+=1\n            elif(label==3):\n                no_happy+=1\n            elif(label==2):\n                no_fear+=1\n            elif(label==5):\n                no_surprise+=1\n            elif(label==6):\n                no_neutral+=1\n        if(e==5):\n            emotion_count_5={'sadness':no_sadness,'anger':no_anger,'happy':no_happy,'fear':no_fear,'surprise':no_surprise,'neutral':no_neutral}\n        elif(e==15):\n            emotion_count_15={'sadness':no_sadness,'anger':no_anger,'happy':no_happy,'fear':no_fear,'surprise':no_surprise,'neutral':no_neutral}\n        elif(e==25):\n            emotion_count_25={'sadness':no_sadness,'anger':no_anger,'happy':no_happy,'fear':no_fear,'surprise':no_surprise,'neutral':no_neutral}\n        elif(e==35):\n            emotion_count_35={'sadness':no_sadness,'anger':no_anger,'happy':no_happy,'fear':no_fear,'surprise':no_surprise,'neutral':no_neutral}\n        elif(e==50):\n            emotion_count_50={'sadness':no_sadness,'anger':no_anger,'happy':no_happy,'fear':no_fear,'surprise':no_surprise,'neutral':no_neutral}\n          \n        if batches >= len(X_train) \/ 32:\n            # we need to break the loop by hand because\n            # the generator loops indefinitely\n            break","c46350e0":"print(emotion_count_5)","a2c21aec":"print(emotion_count_15)","ab84c37f":"print(emotion_count_25)","8a31b54a":"print(emotion_count_35)","e0acdfdd":"print(emotion_count_50)","9036133d":"No of images after augmentation","e559422f":"> > Reshape image","56471b45":"\n\nAfter 25 EPOCH\n","3f92217a":"****\n\nSplit Train Test data\n","49486eb0":"After 15 EPOCHS","ac340ba7":"Image Data Generator","6ca2697e":"After 5 EPOCHS"}}