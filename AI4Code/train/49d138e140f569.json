{"cell_type":{"660d93bb":"code","f797bea0":"code","7959338f":"code","21994705":"code","ccbf709f":"code","8c351624":"code","1ff20be0":"code","9b230c2e":"code","6f9b1f0f":"code","416406f7":"code","7b763124":"code","86b4b475":"code","6e98787c":"code","e89fbc56":"markdown","4f17f47e":"markdown","0cf6b64f":"markdown","6d9dd168":"markdown","90cb6954":"markdown","b4b27c60":"markdown"},"source":{"660d93bb":"%%time\n\nimport os\nimport logging\nimport sys\nimport time\nfrom datetime import timedelta\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.figure_factory as ff\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier as HGBClassifier","f797bea0":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-nov-2021\/\"\n\ntrain  = pd.read_csv(data_dir  + \"train.csv\")\ntest = pd.read_csv(data_dir + \"test.csv\")\nsubmission = pd.read_csv(data_dir + \"sample_submission.csv\")","7959338f":"%%time\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape, end=\"\\n\\n\")","21994705":"train.head()","ccbf709f":"test.head()","8c351624":"TARGET = \"target\"\n\nfeatures = [col for col in train.columns if col not in ('id', TARGET)]","1ff20be0":"%%time\n\ny = train.pop(TARGET)\nX = train.copy()\nX_test = test.drop(\"id\", axis=1).copy()\n\ndel train\ndel test","9b230c2e":"%%time\n\ndef predict_with_model(model, simple_fit=False, splits=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    for fold, (idx_train, idx_valid) in enumerate(skf.split(X, y)):\n        start_time = time.monotonic()\n        \n        X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n        X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n        \n        valid_ids = X_valid.id.values.tolist()\n\n        X_train = X_train[features]\n        X_valid = X_valid[features]\n\n        if simple_fit:\n            model.fit(X_train, y_train)\n        else:\n            model.fit(\n                X_train, y_train,\n                eval_set=[(X_valid, y_valid)],\n                early_stopping_rounds=180,\n                verbose=1000\n            )\n        \n        valid_pred = model.predict_proba(X_valid)[:, 1]\n        test_pred = model.predict_proba(X_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Fold {fold} | AUC: {score} | Took: {dur}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","6f9b1f0f":"%%time\n\ndef predict_with_models(models):\n    print(f\"Predicting with {len(models)} models...\", end=\"\\n\\n\")\n    for model_name, model in models:\n        start_time = time.monotonic()\n        \n        # simple fit for HGB\n        simple_fit = \"hgb\" in model_name\n        \n        print(\"-\" * 50)\n        print(f\"Using {model_name} model...\")\n        test_preds, valid_preds, scores = predict_with_model(model, simple_fit=simple_fit)\n        print(f\"Score: {np.mean(scores)}, Std: {np.std(scores)}\", end=\"\\n\\n\")\n\n        print(\"Saving predictions...\")\n        valid_preds.columns = [\"id\", model_name]\n        valid_preds.to_csv(f\"{model_name}_train.csv\", index=False)\n\n        test_preds_df = pd.DataFrame({\"id\": submission.id, model_name: test_preds})\n        test_preds_df.to_csv(f\"{model_name}_test.csv\", index=False)\n\n        sub = pd.DataFrame({\"id\": submission.id, TARGET: test_preds})\n        sub.to_csv(f\"{model_name}_submission.csv\", index=False)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Took: {dur}\")","416406f7":"%%time\n\nSEED = 42\n\nlgb1_params = {\n    \"random_state\": SEED,\n    \"n_estimators\": 1000,\n    \"objective\" : \"binary\",\n    \"metric\" : \"auc\",\n}\n\nxgb1_params = {\n    \"random_state\": SEED,\n    \"n_estimators\": 1000,\n    \"eval_metric\": \"auc\",\n    \"objective\":\"binary:logistic\",\n    \"booster\": \"gbtree\",\n    # cpu\n    \"tree_method\": \"hist\",\n    \"n_jobs\": -1,\n    ## gpu\n    #\"gpu_id\": 0,\n    #\"tree_method\": \"gpu_hist\",\n    #\"predictor\": \"gpu_predictor\"\n}\n\ncb1_params = {\n    \"random_seed\": SEED,\n    \"iterations\": 1000,\n    \"eval_metric\" : \"AUC\",\n    \"verbose\": 0,\n    # gpu\n    #\"task_type\" : \"GPU\",\n    #\"devices\" : \"0\",\n}\n\nhgb1_params = {\n    \"random_state\": SEED,\n    \"max_iter\": 1500,\n    \"scoring\": \"roc_auc\",\n    \"early_stopping\": True,\n}\n\n# Model name must be unique\nmodels = [\n    (\"lgb1\", LGBMClassifier(**lgb1_params)),\n    (\"xgb1\", XGBClassifier(**xgb1_params)),\n    (\"cb1\", CatBoostClassifier(**cb1_params)),\n    (\"hgb1\", HGBClassifier(**hgb1_params)),\n]","7b763124":"%%time\n\npredict_with_models(models)","86b4b475":"def load_viz_data(submission_files):\n    dfs = []\n    for submission_file in submission_files:\n        df = pd.read_csv(submission_file)\n        dfs.append((submission_file, df))\n        \n    hist_data = []\n    for i in range(len(dfs)):\n        _, df = dfs[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","6e98787c":"%%time\n\nsubmission_files = [f\"{model_name}_submission.csv\" for (model_name, _) in models]\nviz_data = load_viz_data(submission_files)\n\nfig = ff.create_distplot(viz_data, submission_files, show_hist=False, show_rug=False)\nfig.show()","e89fbc56":"## Predict","4f17f47e":"## Features","0cf6b64f":"## Load datasets","6d9dd168":"## TPS Nov. 2021 - Baseline XGBM\/LGBM\/CB\/HGB","90cb6954":"## Import libraries","b4b27c60":"## Visualize"}}