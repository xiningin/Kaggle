{"cell_type":{"25e30f85":"code","a0ac0cde":"code","c7dadd60":"code","db1eb315":"code","a3a3f4b9":"code","edb965de":"code","efca05b0":"code","524e91da":"code","0f267b0b":"code","695b4ecb":"code","e81cbead":"code","3142ad77":"code","eebed9ba":"code","57f078a5":"code","2e56e7a2":"code","a79a0114":"code","dc1d3c79":"code","c8321bd7":"code","2986f6a9":"code","c3e77272":"code","c5d3f219":"code","d5a05f2c":"code","ddca9d2e":"markdown"},"source":{"25e30f85":"import os\nimport sys \nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport pydicom\nimport glob\nfrom pathlib import Path\nfrom skimage.transform import resize\nimport numpy as np\nimport nibabel as nib\nimport matplotlib.pyplot as plt\nimport SimpleITK as sitk\nimport re\nimport subprocess\nimport multiprocessing\nfrom scipy import ndimage as ndi\nimport shutil\nimport tarfile\nimport skimage.transform as skTrans\ntrain_path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/'","a0ac0cde":"# installation captk \n# \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 captk","c7dadd60":"def install_captk(package_input_dir=\"\/kaggle\/input\/captk-181-installerbin\", working_dir=\"\/kaggle\/working\"):\n    print(\"\\n\\n... INSTALLING BC PACKAGE ...\\n\\n\")\n    os.system('apt install bc')\n    \n    print(\"\\n\\n... MOVING THE BIN PACKAGE TO WORKING DIRECTORY AND MODIFYING PERMISSIONS ...\\n\\n\")\n    !cp {os.path.join(package_input_dir, \"CaPTk_1.8.1_Installer.bin\")} {working_dir}\n    !chmod +x {os.path.join(working_dir, \"CaPTk_1.8.1_Installer.bin\")}\n    \n    print(\"\\n\\n... INSTALLING CAPTK ...\\n\\n\")\n    !echo -e Y | {os.path.join(working_dir, \"CaPTk_1.8.1_Installer.bin\")}\n    \n    print(\"\\n\\n... EXTRACT CONTENTS OF APPIMAGE ONTO HARD DRIVE ...\\n\\n\")\n    subprocess.call([os.path.join(working_dir, \"CaPTk\/1.8.1\/captk\"), \"--appimage-extract\"])\n    \n    # Add relevant directories to the respective paths\n    print(\"\\n\\n... ADD RELEVANT PATHS TO SYSTEM PATHS ...\\n\\n\")\n    os.environ['PATH'] = os.path.join(working_dir, \"squashfs-root\/usr\/lib:\") + os.environ['PATH'] \n    os.environ['LD_LIBRARY_PATH'] = os.path.join(working_dir, \"squashfs-root\/usr\/lib:\") + os.environ['LD_LIBRARY_PATH'] \n    \n    print(\"\\n\\n... SEE CAPTK COMMAND HELP [-h] ...\\n\\n\")\n    !{os.path.join(working_dir, \"squashfs-root\/usr\/bin\/Preprocessing\")} -h\n    \ninstall_captk()","db1eb315":"# dicom to nifti conversion\n# \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f dicom \u0432 nifti","a3a3f4b9":"train_dirs = os.listdir(train_path)","edb965de":"reader = sitk.ImageSeriesReader()\nreader.LoadPrivateTagsOn()","efca05b0":"if not os.path.isdir('.\/flair'):\n    os.mkdir('.\/flair')\nfor i, folder in enumerate(tqdm(train_dirs)): #train_dirs[:100]\n    train_study = train_dirs[i]\n    filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/FLAIR'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n    reader.SetFileNames(filenamesDICOM)\n    flair = reader.Execute()\n    sitk.WriteImage(flair, f'.\/flair\/test_{train_study}_flair.nii')","524e91da":"# if not os.path.isdir('.\/t1w'):\n#     os.mkdir('.\/t1w')\n# for i, folder in enumerate(tqdm(train_dirs)):\n#     train_study = train_dirs[i]\n#     filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/T1w'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n#     reader.SetFileNames(filenamesDICOM)\n#     flair = reader.Execute()\n#     sitk.WriteImage(flair, f'.\/t1w\/test_{train_study}_t1.nii.gz')","0f267b0b":"# if not os.path.isdir('.\/t1ce'):\n#     os.mkdir('.\/t1ce')\n# for i, folder in enumerate(tqdm(train_dirs)):\n#     train_study = train_dirs[i]\n#     filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/T1wCE'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n#     reader.SetFileNames(filenamesDICOM)\n#     flair = reader.Execute()\n#     sitk.WriteImage(flair, f'.\/t1ce\/test_{train_study}_t1ce.nii.gz')","695b4ecb":"# if not os.path.isdir('.\/t2w'):\n#     os.mkdir('.\/t2w')\n# for i, folder in enumerate(tqdm(train_dirs)):\n#     train_study = train_dirs[i]\n#     filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/T2w'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n#     reader.SetFileNames(filenamesDICOM)\n#     flair = reader.Execute()\n#     sitk.WriteImage(flair, f'.\/t2w\/test_{train_study}_t2.nii.gz')","e81cbead":"# \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f nifti \u043f\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0443  brats 20\n# registration of nifti on the model of brats 20","3142ad77":"flags={'-rME': 'NMI', '-rIS':'1', '-rNI':'100,50,5', '-reg': 'Affine'}\ncaptk = '.\/squashfs-root\/usr\/bin\/Preprocessing'\nfixed_file = '\/kaggle\/input\/brats20-dataset-training-validation\/BraTS2020_TrainingData\/MICCAI_BraTS2020_TrainingData\/BraTS20_Training_001\/BraTS20_Training_001_flair.nii'","eebed9ba":"# only flair\n# \u0442\u043e\u043b\u044c\u043a\u043e flair","57f078a5":"if not os.path.isdir('.\/flairreg'):\n    os.mkdir('.\/flairreg')\nfor i, file in enumerate(tqdm(os.listdir('.\/flair'))):\n    out = f'.\/flairreg\/{file}'\n    filepath = f'.\/flair\/{file}'\n    #command = f\"{captk} -i {file} -rFI {fixed_file} -o .\/flairreg\/{file}.gz -reg Affine -rIS {flags['-rIS']}\"\n    res = subprocess.call([captk, '-i', file, '-rFI', fixed_file, '-o', out,'-rME', flags['-rME'], '-reg', flags['-reg'], '-rIS', flags['-rIS']])\n    print(\"Returned Value: \", res)\n    if res==0:\n        os.remove(filepath)\n    else:\n        print('error')","2e56e7a2":"# only t1ce\n# \u0442\u043e\u043b\u044c\u043a\u043e t1ce","a79a0114":"if not os.path.isdir('.\/t1cereg'):\n    os.mkdir('.\/t1cereg')\nfor i, file in enumerate(tqdm(os.listdir('.\/t1ce'))):\n    out = f'.\/t1cereg\/{file}'\n    filepath = f'.\/t1ce\/{file}'\n    #command = f\"{captk} -i {file} -rFI {fixed_file} -o .\/flairreg\/{file}.gz -reg Affine -rIS {flags['-rIS']}\"\n    res = subprocess.call([captk, '-i', file, '-rFI', fixed_file, '-o', out,'-rME', flags['-rME'], '-reg', flags['-reg'], '-rIS', flags['-rIS']])\n    print(\"Returned Value: \", res)\n    if res==0:\n        os.remove(filepath)\n    else:\n        print('error')","dc1d3c79":"# convert and register flair at the same time\n# \u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f flair \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","c8321bd7":"if not os.path.isdir('.\/flair'):\n    os.mkdir('.\/flair')\nif not os.path.isdir('.\/flairreg'):\n    os.mkdir('.\/flairreg')\n#for i, folder in enumerate(tqdm(train_dirs)):\nfor i in range(len(sub_df)):\n    train_study = sub_df.iloc[i]['BraTS21ID']\n    filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/FLAIR'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n    reader.SetFileNames(filenamesDICOM)\n    flair = reader.Execute()\n    sitk.WriteImage(flair, f'.\/flair\/test_{train_study}_flair.nii.gz')\n    file = f'.\/flair\/test_{train_study}_flair.nii.gz'\n    oup = f'.\/flairreg\/test_{train_study}_flair.nii.gz'\n    res = subprocess.call([captk, '-i', file, '-rFI', fixed_file, '-o', oup,'-rME', flags['-rME'], '-reg', flags['-reg'], '-rIS', flags['-rIS']])\n    print(f\"{i} {file} Returned Value: \", res)\n    if res==0:\n        os.remove(file)\n    else:\n        print('error')","2986f6a9":"# convert and register t1ce at the same time\n# \u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f t1ce \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","c3e77272":"if not os.path.isdir('.\/t1ce'):\n    os.mkdir('.\/t1ce')\nif not os.path.isdir('.\/t1cereg'):\n    os.mkdir('.\/t1cereg')\nfor i, folder in enumerate(tqdm(train_dirs)):\n    train_study = train_dirs[i]\n    filenamesDICOM = sorted(reader.GetGDCMSeriesFileNames(f'{train_path}{train_study}\/T1wCE'), key=lambda var:[int(x) if x.isdigit() else x for x in re.findall(r'[^0-9]|[0-9]+', var)])\n    reader.SetFileNames(filenamesDICOM)\n    flair = reader.Execute()\n    sitk.WriteImage(flair, f'.\/t1ce\/test_{train_study}_t1ce.nii.gz')\n    file = f'.\/t1ce\/test_{train_study}_t1ce.nii.gz'\n    oup = f'.\/t1cereg\/test_{train_study}_t1ce.nii.gz'\n    res = subprocess.call([captk, '-i', file, '-rFI', fixed_file, '-o', oup,'-rME', flags['-rME'], '-reg', flags['-reg'], '-rIS', flags['-rIS']])\n    print(f\"{file} Returned Value: \", res)\n    if res==0:\n        os.remove(file)\n    else:\n        print('error')","c5d3f219":"!zip -r flairreg.zip .\/flairreg","d5a05f2c":"from IPython.display import FileLink\nFileLink('.\/flairreg.zip')","ddca9d2e":"### thanks to this person for part of the code\nhttps:\/\/www.kaggle.com\/dschettler8845\/captk-brats-preprocessing-cleaned-commented"}}