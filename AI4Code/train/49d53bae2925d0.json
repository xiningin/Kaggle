{"cell_type":{"b9f605c0":"code","b3480ef8":"code","f1e556aa":"code","185399f0":"code","85694c65":"code","5b9a8082":"code","6ed7429a":"code","2cba36a6":"code","aa7371ec":"code","d283b395":"code","a5dae180":"code","0588c393":"code","32a174d9":"code","2be1fa6f":"code","1c7bc20a":"code","08fde484":"code","6432fd1a":"code","d9720792":"code","507e4508":"code","87b22b31":"code","ab83b786":"markdown","7b687f36":"markdown","9732343a":"markdown","2e123548":"markdown","bc00a5be":"markdown","3565aba2":"markdown","cbb39f75":"markdown"},"source":{"b9f605c0":"import pandas as pd\nimport numpy as np\nimport math\nfrom datetime import datetime\nimport sqlite3\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","b3480ef8":"db = sqlite3.connect(\"..\/input\/clubhouse-dataset\/Clubhouse_Dataset_v1.db\")","f1e556aa":"df = pd.read_sql_query(\"SELECT * from user\", db)","185399f0":"df = df.replace('null',np.nan)\nnull = df.isnull().sum()","85694c65":"c = []\nfor i in enumerate(null):\n    if i[1]>10:\n        c.append(i[0])\n\ncolor = ['darkgreen',] * len(null)\n\nfor i in c:\n    color[i] = 'indianred'\n    \ndf_not_null = null - len(df)\ndf_not_null = df_not_null*-1    \nfig = go.Figure([go.Bar(x=df_not_null.index, y=df_not_null.values , text=df_not_null.values, marker_color=color)])\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(\n    title = 'Number of non-Nan values in dataset per coumn. Columns with missing values are in red',\n    autosize=False,\n    width=1100,\n    height=550)\nfig.show()","5b9a8082":"df['date_created'] = df['time_created'].apply(lambda x: datetime.strptime(x.split('T')[0], '%Y-%m-%d'))\ndf['year_created'] = df['date_created'].apply(lambda x: x.year)\ndf['month_created'] = df['date_created'].apply(lambda x: x.month_name())","6ed7429a":"accounts_per_day = df.groupby('date_created').agg('count')['name']\nfig = px.line(accounts_per_day,\n                x = accounts_per_day.index,\n                y = accounts_per_day.values)\nfig.update_layout(title='User growth')\nfig.update_yaxes(title_text=\"number of users\")\nfig.show()","2cba36a6":"accounts_per_month = df.groupby('month_created').agg('count')['name']\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\naccounts_per_month = accounts_per_month[month_order]\n\ndata = dict(\n    num=accounts_per_month.values,\n    month=accounts_per_month.index)\nfig = px.funnel(data, x='num', y='month')\nfig.update_layout(title='User growth per month')\nfig.show()","aa7371ec":"most_followers = df.sort_values('num_followers',ascending=False).head(10)","d283b395":"from plotly.subplots import make_subplots\ntrace0 = go.Bar(\n                x=most_followers.num_followers,\n                y=most_followers.username,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='followers',\n                orientation='h',\n                text = most_followers.num_followers,\n                texttemplate='%{text:.2s}', \n                textposition='outside'\n)\ntrace1 = go.Scatter(\n                x=most_followers.num_following,\n                y=most_followers.username,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='num_following'\n)\n\nlayout = dict(\n                title='Number of follows for the users with most followers',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.59]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.60, 1],side='top'),\n                legend=dict(x=0.30,y=1.038,font=dict(size=10) ),\n                margin=dict(l=20, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)'\n)\n\n# Creating two subplots\nfig = make_subplots(rows=1, cols=2, shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.01)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\n\nfig['layout'].update(layout)\niplot(fig)","a5dae180":"def has_both_accounts(ig,tw):\n    if type(ig) == str and type(tw) == str:\n        return True\n    elif type(ig) == float and type(tw) == float:\n        return False\n\ndf['twitter_and_ig'] = df[['twitter','instagram']].apply(lambda x: has_both_accounts(x['instagram'], x['twitter']), axis=1)","0588c393":"num_of_users_with_tw_and_ig = df.twitter_and_ig.value_counts()[True]\nnum_of_users_with_tw_and_ig = pd.Series({'both_tw_and_ig':num_of_users_with_tw_and_ig})","32a174d9":"series = pd.concat([df_not_null, num_of_users_with_tw_and_ig], axis=0) \nser = series[['instagram','twitter','both_tw_and_ig']]\/len(df)","2be1fa6f":"ser*100","1c7bc20a":"labels=('have twitter','no twitter')\nvalues=(ser.twitter,1-ser.twitter)\ntitle = 'twitter stats'\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, title = title)])\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500)\nfig.show()","08fde484":"labels=('have instagram','no instagram')\nvalues=(ser.instagram,1-ser.instagram)\ntitle = 'instagram stats'\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, title = title)])\nfig.update_layout(\n    autosize=False,\n    width=500,\n    height=500)\nfig.show()","6432fd1a":"labels=('have both ig and twitter','no instagram or twitter')\nvalues=(ser.both_tw_and_ig,1-ser.both_tw_and_ig)\ntitle = 'instagram and twitter stats'\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, title = title)])\nfig.update_layout(\n    autosize=False,\n    width=550,\n    height=550)\nfig.show()","d9720792":"df_by_invites = df.groupby('invited_by_user_profile')['name'].agg('count').reset_index().sort_values('name',ascending=False)\ndf_by_invites.rename(columns={'invited_by_user_profile':'user_id','name':'num_of_invited_users'},inplace=True)","507e4508":"user_names = df[['user_id','username','name']]\ndf_by_invites = pd.merge(df_by_invites,user_names, on='user_id')","87b22b31":"fig = go.Figure(data=[go.Table(header=dict(values=['Name', 'No of invited users']),\n                 cells=dict(values=[df_by_invites['name'],df_by_invites['num_of_invited_users']]))])\nfig.show()","ab83b786":"% of users with social media accounts","7b687f36":"How many users have:\n- a twitter acoount\n- an instagram account\n- both twitter and instagram accounts","9732343a":"When was the most active user growth","2e123548":"WordCloud Clubhouse usernames","bc00a5be":"Exploring the number of missing values in dataset","3565aba2":"Users with most followers and how many accounts do they follow?","cbb39f75":"Users with most invitees"}}