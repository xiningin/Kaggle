{"cell_type":{"545d8896":"code","3ed54455":"code","ffc30629":"code","1c145d9e":"code","88e02403":"code","03204dce":"code","33da5345":"code","fc644ae9":"code","b60f6583":"code","caf0b7b6":"code","d22225bd":"code","64f0e928":"code","4e75ab26":"code","7d51e85a":"code","9b59a878":"code","98b0a0e7":"code","c62e6174":"code","0f27a025":"code","3eb30155":"code","e877ef2b":"code","3b71022b":"code","e95222dc":"code","ee920b06":"code","2de364b4":"code","71a711b5":"code","0cc1061d":"code","8e37c091":"code","5b55c395":"code","c47d265c":"code","6b02530e":"code","c9084ce4":"code","0ff5afdf":"code","5fe5b6d3":"code","7675c587":"code","60639b78":"code","289a304d":"code","98235cad":"code","ad7eab4b":"code","2a7742f1":"code","e3309553":"code","a8a60749":"code","42ed200d":"code","042b6dc8":"code","615599ba":"code","30473101":"code","f907f79b":"code","6484371c":"markdown","2ee45985":"markdown","d2754eb3":"markdown","b5eb55c4":"markdown","04100afe":"markdown","a59b224c":"markdown","d4ed8c83":"markdown","1dc69c00":"markdown","97cf79af":"markdown","9bcd0d8b":"markdown","f25f774e":"markdown","66824f7f":"markdown"},"source":{"545d8896":"#Basic libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import spatial\n\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nimport operator\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","3ed54455":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","ffc30629":"df.head()","1c145d9e":"df.shape","88e02403":"df['type'].value_counts()","03204dce":"tv_shows = df.loc[df.type=='TV Show'].copy()","33da5345":"tv_shows.shape","fc644ae9":"ratings = pd.read_csv('\/kaggle\/input\/trending-tv-shows-on-netflix\/TV Shows - Netflix.csv')","b60f6583":"ratings.head()","caf0b7b6":"ratings.shape","d22225bd":"ratings = ratings.merge(tv_shows, left_on='Titles', right_on='title')","64f0e928":"ratings['Titles']","4e75ab26":"tv_shows.reset_index(inplace=True)","7d51e85a":"def tag_extractor(feature):\n    unique_words = []\n\n    for wordlist in tv_shows[feature].str.split(',').values: \n        for word in wordlist :\n            stripped_word = word.lstrip()\n            if stripped_word not in unique_words :\n                unique_words.append(stripped_word)\n                \n    return unique_words","9b59a878":"genreList = tag_extractor('listed_in')","98b0a0e7":"def binary(x, featureList):\n    binaryList = []\n    \n    for word in featureList:\n        \n        wList = []\n        for w in x.split(','):\n            wList.append(w.lstrip())\n        \n        \n        if word in wList:\n            binaryList.append(1)\n        else:\n            binaryList.append(0)\n            \n    return binaryList","c62e6174":"tv_shows['genres_bin'] = tv_shows['listed_in'].apply(lambda x: binary(x, genreList))","0f27a025":"import re\ntv_shows['duration'] = tv_shows['duration'].apply(lambda x: re.findall(r'\\d+', x))","3eb30155":"def numb_ex(numb_list):\n    for numb in numb_list:\n        return int(numb)","e877ef2b":"tv_shows['duration'] = tv_shows['duration'].apply(lambda x: numb_ex(x))","3b71022b":"tv_shows['rating'].value_counts(dropna=False)","e95222dc":"tv_shows.rating = tv_shows.rating.map({'TV-MA': 17, 'TV-14': 14, 'TV-PG': 12, 'TV-G': 10,\n                                                  'G': 10, 'TV-Y': 2, 'TV-Y7': 7, 'TV-Y7-FV': 7,\n                                                  'NR': 10, 'R': 12, 'NaN': 10, 'PG': 12})","ee920b06":"tv_shows['country'] = tv_shows['country'].astype(str)","2de364b4":"countryList = tag_extractor('country')","71a711b5":"tv_shows['country_bin'] = tv_shows['country'].apply(lambda x: binary(x, countryList))","0cc1061d":"tv_shows['cast'] = tv_shows['cast'].astype(str)","8e37c091":"castList = tag_extractor('cast')","5b55c395":"tv_shows['cast_bin'] = tv_shows['cast'].apply(lambda x: binary(x, castList))","c47d265c":"print('Duplicate entries: {}'.format(tv_shows.duplicated('title').sum()))\ntv_shows.drop_duplicates(subset='title', inplace = True)","6b02530e":"tv_shows['rating'].fillna(10, inplace=True)","c9084ce4":"tv_shows['description'] = tv_shows['description'].astype(str)","0ff5afdf":"vectorizer = TfidfVectorizer(analyzer = 'word',\n                                       min_df=0.0,\n                                       max_df = 1.0,\n                                       strip_accents = None,\n                                       encoding = 'utf-8')","5fe5b6d3":"vectorizer.fit_transform(tv_shows['description'].astype(str))","7675c587":"def cosine_sim(text1, text2):\n    tfidf = vectorizer.transform([text1, text2])\n    return ((tfidf * tfidf.T).A)[0,1]","60639b78":"def distance(show1, show2):\n    a = tv_shows.loc[tv_shows.title == show1]\n    b = tv_shows.loc[tv_shows.title == show2]\n    \n    descriptionA = a['description'].values\n    descriptionB = b['description'].values\n    \n    descriptionDistance = 1\/cosine_sim(str(descriptionA), str(descriptionB))\n    \n    \n    genresA = a['genres_bin'].values\n    genresB = b['genres_bin'].values\n    \n    dist = 0\n    for i in range(0,len(genresA[0])):\n        if (genresA[0][i] == genresB[0][i]) and (genresA[0][i]==1):\n            dist+=1\n\n    if dist==0:\n        genreDistance = len(genresA[0])\n        \n    else :\n        genreDistance = len(genresA[0]) \/ dist\n    \n    castA = a['cast_bin'].values\n    castB = b['cast_bin'].values\n   \n    dist = 0\n    for i in range(0,len(castA[0])):\n        if (castA[0][i] == castB[0][i]) and (castA[0][i]==1):\n            dist+=1\n\n    if dist==0:\n        castDistance = len(castA[0])\n        \n    else :\n        castDistance = len(castA[0]) \/ dist\n\n    \n    countryA = a['country_bin'].values\n    countryB = b['country_bin'].values\n\n    dist = 0\n    for i in range(0,len(countryA[0])):\n        if (countryA[0][i] == countryB[0][i]) and (countryA[0][i]==1):\n            dist+=1\n\n    if dist==0:\n        countryDistance = len(countryA[0])\n        \n    else :\n        countryDistance = len(countryA[0]) \/ dist\n    \n    ratingA = a['rating'].values\n    ratingB = b['rating'].values\n    ratingDistance = abs(int(ratingA) - int(ratingB))\n                                                   \n    durationA = a['duration'].values\n    durationB = b['duration'].values\n    \n    durationDistance = abs(int(durationA) - int(durationB))\n                              \n                                                   \n    return (0.05*descriptionDistance + genreDistance + 0.001*castDistance + 0.05*countryDistance + 0.1*ratingDistance + 0.05*durationDistance)","289a304d":"def get_recommendations(show):\n\n    distances = []\n    \n    for index, row in tv_shows.iterrows():\n        if row['title'] != show:\n            dist = distance(row['title'], show)\n            distances.append((row['title'], dist))\n    \n    distances.sort(key=operator.itemgetter(1))\n    neighbors = []\n    \n    for x in range(5):\n        neighbors.append(distances[x])\n\n            \n    return neighbors","98235cad":"def similar_shows_df(title):\n    neighbors = get_recommendations(str(title))\n    \n    df = tv_shows.loc[tv_shows.title == str(title)][['title', 'listed_in', 'description']]\n    \n    for i in range(0,5):\n        df = df.append(tv_shows.loc[tv_shows.title == neighbors[i][0]][['title', 'listed_in', 'description']], ignore_index=True)\n    df['distance'] = 0\n    \n    dist = [0] + [neighbors[i][1] for i in range(0,5)]\n    df['distance'] = dist\n    \n    return df\n    ","ad7eab4b":"ratings['Titles']","2a7742f1":"breaking_bad_df = similar_shows_df('Breaking Bad')\ndark_df = similar_shows_df('Dark')\nstranger_things_df = similar_shows_df('Stranger Things')\nsherlock_df = similar_shows_df('Sherlock')\nfriends_df =similar_shows_df('Friends')\nbetter_call_saul_df = similar_shows_df('Better Call Saul')\nsupernatural_df = similar_shows_df('Supernatural')\nblack_mirror_df = similar_shows_df('Black Mirror')\naot_df = similar_shows_df('Attack on Titan')\n","e3309553":"peaky_b_df = similar_shows_df('Peaky Blinders')","a8a60749":"\ntua_df = similar_shows_df('The Umbrella Academy')\nnarcos_df = similar_shows_df('Narcos')\ndaredevil_df = similar_shows_df(\"Marvel's Daredevil\")\ntwd_df = similar_shows_df('The Walking Dead')\npar_df = similar_shows_df('Parks and Recreation')\nsuits_df = similar_shows_df('Suits')\ndexter_df = similar_shows_df('Dexter')\nman_men_df = similar_shows_df('Mad Men')\nfma_df = similar_shows_df('Fullmetal Alchemist: Brotherhood')\nozark_df = similar_shows_df('Ozark')\nwitcher_df = similar_shows_df('The Witcher')\nlucifer_df = similar_shows_df('Lucifer')","42ed200d":"dfs = [breaking_bad_df, dark_df, stranger_things_df, sherlock_df, friends_df, better_call_saul_df, supernatural_df, black_mirror_df,\n      aot_df, peaky_b_df, tua_df, narcos_df, daredevil_df, twd_df, par_df, suits_df,  dexter_df, man_men_df, fma_df, ozark_df, witcher_df, lucifer_df]","042b6dc8":"data = []\n\nfor movie_df in dfs:\n    data.append(go.Table(\n        header=dict(\n            values=[k for k in movie_df.columns],\n            font=dict(size=10),\n            align=\"left\"\n        ),\n        cells=dict(\n            values=[movie_df[k].tolist() for k in movie_df.columns],\n            align = \"left\")\n    ))","615599ba":"fig = go.Figure(data=data)","30473101":"update_list = []\ni = 0\nfor title in ratings['Titles']:\n    update_list.append(dict(label=title, \n                     method=\"update\", \n                     args=[{\"visible\": ([False]*(i) + [True] + [False]*(len(ratings['Titles'])-i))}, \n                           {\"title\": title}])\n    )\n    i+=1","f907f79b":"# Add dropdown \nfig.update_layout( \n    updatemenus=[ \n        dict( \n            active=0, \n            buttons=update_list \n        ) \n    ]) \n  ","6484371c":"> <h2 id=\"casting\" style=\"font-family:verdana;\"> \n>          1.5 Casting \n>         <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-movie-recommendation-system\/#casting\">\u00b6<\/a>\n> \n<\/h2>","2ee45985":"<h1 id=\"feature\" style=\"font-family:verdana;\"> \n    <center>1. Feature Engineering\n        <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-tv-show-recommendation-system\/#feature\">\u00b6<\/a>\n    <\/center>\n<\/h1>","d2754eb3":"<h1 id=\"distance\" style=\"font-family:verdana;\"> \n    <center>2. Customized distance function\n        <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-tv-show-recommendation-system\/distance\">\u00b6<\/a>\n    <\/center>\n<\/h1>","b5eb55c4":"> <h2 id=\"country\" style=\"font-family:verdana;\"> \n>          1.4 Country \n>         <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-movie-recommendation-system\/#country\">\u00b6<\/a>\n> \n<\/h2>","04100afe":"***","a59b224c":"> <h2 id=\"rating\" style=\"font-family:verdana;\"> \n>          1.3 Rating \n>         <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-movie-recommendation-system\/#rating\">\u00b6<\/a>\n> \n<\/h2>","d4ed8c83":"> <h2 id=\"genre\" style=\"font-family:verdana;\"> \n>          1.1 Genre \n>         <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-movie-recommendation-system\/#genre\">\u00b6<\/a>\n> \n<\/h2>","1dc69c00":"<h1 id=\"plot\" style=\"font-family:verdana;\"> \n    <center>3. Interactive TV Show Recommendations\n        <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-tv-show-recommendation-system\/#plot\">\u00b6<\/a>\n    <\/center>\n<\/h1>","97cf79af":"<h1 style=\"font-family:verdana;\"> <center> Interactive Movie Recommendation System with Plotly <\/center> <\/h1>\n\n\n***","9bcd0d8b":"<center style=\"font-family:cursive; font-size:18px; color:#159364;\">Making the best out of plotly on Kaggle, it would be so much better with Dash though <\/center>","f25f774e":"> <h2 id=\"duration\" style=\"font-family:verdana;\"> \n>          1.2 Duration \n>         <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/miljan\/interactive-movie-recommendation-system\/#duration\">\u00b6<\/a>\n> \n<\/h2>","66824f7f":"***"}}