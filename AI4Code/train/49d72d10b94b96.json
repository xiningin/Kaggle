{"cell_type":{"eef4242a":"code","98dd55ea":"code","936e0b04":"code","864ba694":"code","0545cfb5":"code","f94312ac":"code","392f07ad":"code","d11112ae":"code","637628e6":"code","082df82e":"code","5920a537":"code","cad8ec0c":"code","1aedb031":"code","7ffeec54":"code","6bd6087b":"code","8323f956":"code","d3ebf47c":"code","ac0b96eb":"code","ef8494cf":"code","20347eb3":"code","c298e977":"code","fe03fb14":"code","a3c86d82":"code","9c89f35f":"code","e18e6ad0":"code","497b2866":"code","a9d07061":"code","673d4533":"code","133f82a7":"code","e001da62":"code","c3d109c4":"code","0213b512":"markdown","86612bc1":"markdown","5ab9f472":"markdown","d5bf0754":"markdown","710532d4":"markdown","3a2ddcb4":"markdown","8333113a":"markdown","094aefc0":"markdown","266b7b14":"markdown","e1facc3d":"markdown","9b0fdf47":"markdown","89aeddb6":"markdown","a16b6098":"markdown","3d8a8431":"markdown","47eae20e":"markdown","a6bd5536":"markdown","ddef32f4":"markdown","4c8b973b":"markdown"},"source":{"eef4242a":"!pip install plotly_express","98dd55ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport os\nimport json\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly_express as px\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","936e0b04":"def load_df(csv_path, nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = pd.json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","864ba694":"train_df = load_df('\/kaggle\/input\/ga-customer-revenue-prediction\/train.csv')\ntest_df = load_df('\/kaggle\/input\/ga-customer-revenue-prediction\/test.csv')\ntrain_df.to_csv('.\/train.csv', index=False)\ntest_df.to_csv('.\/test.csv', index=False)","0545cfb5":"train_df = pd.read_csv('.\/train.csv', low_memory=False)\ntest_df = pd.read_csv('.\/test.csv', low_memory=False)","f94312ac":"train_df.head()","392f07ad":"train_df.info()","d11112ae":"train_df['device.isMobile'] = train_df['device.isMobile'].astype(int)","637628e6":"train_df[['totals.visits', 'totals.hits', 'totals.pageviews', 'totals.bounces', 'totals.newVisits', 'totals.transactionRevenue']] = train_df[['totals.visits', 'totals.hits', 'totals.pageviews', 'totals.bounces', 'totals.newVisits', 'totals.transactionRevenue']].astype(float)","082df82e":"# Target Variable\ntrain_df['totals.transactionRevenue'] = train_df['totals.transactionRevenue'].fillna(0)","5920a537":"train_df.describe()","cad8ec0c":"null_df = pd.DataFrame(train_df.isnull().sum()*100\/train_df.shape[0], columns=['null_pct']).sort_values(by='null_pct', ascending=True)\nnull_df = null_df[null_df['null_pct'] > 0]\nax = null_df.plot(kind='barh', figsize=(10,7), color=\"coral\", fontsize=13, legend=False)\nfor i in ax.patches:\n    ax.text(i.get_width()+.3, i.get_y()+0.1, str(round(i.get_width(), 2))+'%', fontsize=15, color='dimgrey')","1aedb031":"null_df.index","7ffeec54":"# Dropping Mostly-Null Columns \ntrain_df = train_df.drop([\n    'sessionId', 'visitId', \\\n    'trafficSource.campaignCode', 'trafficSource.adContent', 'trafficSource.adwordsClickInfo.gclId', \\\n    'trafficSource.adwordsClickInfo.page', 'trafficSource.adwordsClickInfo.slot',\\\n    'trafficSource.adwordsClickInfo.adNetworkType', 'trafficSource.adwordsClickInfo.isVideoAd' \\\n], axis=1)\ntrain_df.shape","6bd6087b":"cat_df = pd.DataFrame(train_df.apply(lambda x: x.nunique()).sort_values(), columns=['num_uniques'])\nna_cols = cat_df[cat_df['num_uniques'] == 1].index\ncat_df = cat_df[cat_df['num_uniques'] != 1]\ntrain_df = train_df.drop(na_cols, axis=1)\ncat_df","8323f956":"train_df.shape","d3ebf47c":"train_df[\"totals.transactionRevenue\"] = train_df[\"totals.transactionRevenue\"].astype('float')\ngdf = train_df.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\nfig.suptitle('Target Variable - Original vs Log')\nax1.scatter(range(gdf.shape[0]), np.sort(gdf[\"totals.transactionRevenue\"].values))\nax2.scatter(range(gdf.shape[0]), np.sort(np.log1p(gdf[\"totals.transactionRevenue\"].values)))","ac0b96eb":"print(f\"Percentage of Customers who brought Revenue: {round(100 * sum(gdf['totals.transactionRevenue'] > 0) \/ gdf['totals.transactionRevenue'].shape[0], 2)}%\")","ef8494cf":"print(\"Number of unique visitors in train set : \",train_df.fullVisitorId.nunique(), \"\/\", train_df.shape[0])\nprint(\"Number of unique visitors in test set : \",test_df.fullVisitorId.nunique(), \"\/\", test_df.shape[0])\nprint(\"Number of common visitors in train and test set : \",len(set(train_df.fullVisitorId.unique()).intersection(set(test_df.fullVisitorId.unique())) ))\n","20347eb3":"train_df['totals.transactionRevenue'] = train_df['totals.transactionRevenue'].replace({0: np.nan})","c298e977":"def horizontal_bar_chart(cnt_srs, color):\n    trace = go.Bar(\n        y=cnt_srs.index[::-1],\n        x=cnt_srs.values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace","fe03fb14":"# Device Browser\ncnt_srs = train_df.groupby('device.browser')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.04, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1200, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Device Browser\")\npy.iplot(fig)\n","a3c86d82":"# Device Category\ncnt_srs = train_df.groupby('device.deviceCategory')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(71, 58, 131, 0.8)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(71, 58, 131, 0.8)')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"].head(10), 'rgba(71, 58, 131, 0.8)')\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.04, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1200, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Device Category\")\npy.iplot(fig)\n","9c89f35f":"# Operating system\ncnt_srs = train_df.groupby('device.operatingSystem')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(246, 78, 139, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10),'rgba(246, 78, 139, 0.6)')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"].head(10),'rgba(246, 78, 139, 0.6)')\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.04, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1200, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Operating System\")\npy.iplot(fig)\n","e18e6ad0":"# Continent\ncnt_srs = train_df.groupby('geoNetwork.continent')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(58, 71, 80, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(58, 71, 80, 0.6)')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"].head(10), 'rgba(58, 71, 80, 0.6)')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1500, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Continent\")\npy.iplot(fig)\n","497b2866":"# Sub Continent\ncnt_srs = train_df.groupby('geoNetwork.subContinent')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"], 'orange')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'orange')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"], 'orange')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1500, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Sub Continent\")\npy.iplot(fig)\n","a9d07061":"# Source\ncnt_srs = train_df.groupby('trafficSource.source')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'green')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'green')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"].head(10), 'green')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1500, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Traffic Source\")\npy.iplot(fig)","673d4533":"# Medium\ncnt_srs = train_df.groupby('trafficSource.medium')['totals.transactionRevenue'].agg(['size', 'count', 'mean'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\", \"mean\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"], 'purple')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'purple')\ntrace3 = horizontal_bar_chart(cnt_srs[\"mean\"], 'purple')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=3, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Count\", \"Non-zero Revenue Count\", \"Mean Revenue\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\n\nfig['layout'].update(height=1500, width=1200, paper_bgcolor='rgb(233,233,233)', title=\"Traffic Medium\")\npy.iplot(fig)","133f82a7":"gdf = train_df.groupby(\"fullVisitorId\").agg({'totals.hits': 'sum', 'totals.pageviews': 'sum', 'totals.transactionRevenue': 'sum'})\ngdf['isPayingVisitor'] = gdf['totals.transactionRevenue'] > 0","e001da62":"px.scatter(gdf, x='totals.hits', facet_col='isPayingVisitor')","c3d109c4":"px.scatter(gdf, x='totals.pageviews', facet_col='isPayingVisitor')","0213b512":"# Initial Analysis","86612bc1":"## Inspecting Categorical Columns","5ab9f472":"## User Activity Information","d5bf0754":"In this competition, the data set is so unbalanced that it's hard to say whether our solution can beat all-zeros, because most of the customers don't bring in any real revenue. And if a customer will pay, the minimum of transaction revenue is no less than 1E+07.\n\nThis is in line with what was explained in the competition overview:\n> The 80\/20 rule has proven true for many businesses\u2013only a small percentage of customers produce most of the revenue. As such, marketing teams are challenged to make appropriate investments in promotional strategies.\n\nIn this case, the ratio is even worse:","710532d4":"Inferences:\n\n* In the traffic source plot, even though Youtube has high number of counts in the dataset, the number of non-zero revenue counts are very less.\n* Google plex has a high ratio of non-zero revenue count to total count in the traffic source plot.\n* On the traffic source medium, \"referral\" has more number of non-zero revenue count compared to \"organic\" medium.","3a2ddcb4":"Inferences:\n\n* People with a higher(>300) number of \"hits\" tend to have a higher chance of being paying customers.\n* This holds true for \"pageviews\" as well and the distinction is clearer, suggesting that \"pageviews\" might be a more important feature than \"hits\"","8333113a":"## Target Variable Analysis","094aefc0":"## Traffic Information","266b7b14":"# In-Depth Analysis","e1facc3d":"Inferences:\n\n* Device Browser distribution looks similar on both the count and count of non-zero revenue plots\n* On the device category front, Desktop seem to have higher percentage of non-zero revenue counts compared to Mobile Devices.\n* In device operating system, though the number of counts is more from windows, the number of counts where revenue is not zero is more for Macintosh.\n* Chrome OS also has higher percentage of non-zero revenue counts\n* On the mobile OS side, iOS has more percentage of non-zero revenue counts compared to Android","9b0fdf47":"Inferences:\n\n* On the continent plot, we can see that America has both higher number of counts as well as highest number of counts where the revenue is non-zero\n* Though Asia and Europe have high number of counts, the number of non-zero revenue counts from these continents are comparatively low.\n* These two points hold true for the Sub Continents plot as well.","89aeddb6":"## Geographical Information","a16b6098":"## Device Information","3d8a8431":"# Imports","47eae20e":"The log operation normalizes the target and reduces the spread enough for a model to be able to predict it.","a6bd5536":"Since we are predicting the natural log of sum of all transactions of the user, let us sum up the transaction revenue at user level and take a log and then do a scatter plot.","ddef32f4":"## Inspecting Null Values","4c8b973b":"# Data Loading"}}