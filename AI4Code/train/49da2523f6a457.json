{"cell_type":{"71ad1bdd":"code","9224ee62":"code","2e7323ae":"code","b8fcc3d3":"code","7707b659":"code","838895a8":"code","c2fa640a":"code","f32411f0":"code","ee2d7049":"code","1e47f02b":"code","e1c41fc0":"code","f67a6691":"code","e27f6473":"code","e05d2cbc":"code","8e3f06eb":"code","1d9904df":"code","e3d8484b":"code","11914945":"code","d6ac08ff":"code","6b34e9a7":"code","2744de85":"code","f9d1630b":"code","94b28571":"code","1a12eb0f":"code","e6591b5d":"code","3888d58d":"code","1b208e62":"code","fefe1b8d":"code","26526a0e":"code","aaa5cc8e":"code","7ac20f13":"code","4092950c":"code","26efb2ae":"code","306c340d":"code","a7e0ec12":"code","a9480cf2":"code","78c68b3d":"code","814c08d1":"code","af6a2fc5":"code","72314e35":"code","c8d75a8e":"code","b0c61fbb":"code","a53fb6ed":"code","c2542952":"code","01bcb0a8":"code","b589007f":"code","9762cb8f":"code","60c20049":"code","758a94f4":"code","7bd911bb":"code","27ce0ff5":"code","cfcf53e0":"code","3fe6a80e":"code","4087edf3":"code","9998b836":"code","bf715648":"code","1da39d21":"code","e1e67628":"code","21d3c8a9":"code","fe849c8d":"code","aa8ae9d4":"code","13ed0f40":"code","3d2d5ead":"code","6760eac3":"code","db6bfd1a":"code","f89556be":"code","c7288712":"code","34d9dd8a":"code","f6fa437d":"code","2febb50d":"code","a98e7d64":"code","ea1d24cb":"code","0d424cb6":"code","01bd5981":"code","da3c024a":"code","a49d675a":"code","89ef82d6":"code","e637274d":"code","6b218512":"code","e1ef3539":"code","43b2c652":"code","1c7b9d65":"code","b8832fe1":"code","a0832685":"code","f21a4ac7":"markdown","42c001d7":"markdown","b0c52019":"markdown","68336657":"markdown","27fe7779":"markdown","f9eaa02c":"markdown","e1f00d19":"markdown","56e5ea37":"markdown","fb088a3b":"markdown","a123d943":"markdown","7805aeb0":"markdown","105a7a6d":"markdown","c1e9018a":"markdown","e347c1e6":"markdown","0be3dd28":"markdown"},"source":{"71ad1bdd":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import KNNImputer\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nimport sklearn.preprocessing as pre\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.metrics import mean_squared_error\nfrom catboost import CatBoostRegressor\nimport time","9224ee62":"#loading the train,test and sample datasets\ntrain = pd.read_csv(\"..\/input\/ml-lab-exam\/traindata_SJC.csv\")\ntest = pd.read_csv(\"..\/input\/ml-lab-exam\/testdata_SJC.csv\")","2e7323ae":"print(\"Train data :\",train.shape)\nprint(\"Test data :\",test.shape)","b8fcc3d3":"train.info()","7707b659":"print(train.isnull().sum())\ntrain.isnull().sum().plot.bar()","838895a8":"print(test.isnull().sum())\ntest.isnull().sum().plot.bar()","c2fa640a":"train.MaritalStatus.value_counts()","f32411f0":"# Replace the null values with Unknown \ntrain['MaritalStatus'].fillna('U',inplace = True)\ntest['MaritalStatus'].fillna('U',inplace = True)","ee2d7049":"# Replace the null values with Mean\ntrain['WeeklyWages'].fillna(train['WeeklyWages'].mean(),inplace = True)\ntest['WeeklyWages'].fillna(test['WeeklyWages'].mean(),inplace = True)","1e47f02b":"# Replace the null values with Mean\ntrain['HoursWorkedPerWeek'].fillna(train['HoursWorkedPerWeek'].mean(),inplace = True)","e1c41fc0":"print(test.isnull().sum())","f67a6691":"#data=train.sample(1000)\ndata=train","e27f6473":"data_test=test","e05d2cbc":"data.shape","8e3f06eb":"#Transform the data into datetime format\ndata['DateTimeOfAccident']=pd.to_datetime(data['DateTimeOfAccident'])\ndata_test['DateTimeOfAccident']=pd.to_datetime(data_test['DateTimeOfAccident'])","1d9904df":"data['DateReported']=pd.to_datetime(data['DateReported'])\ndata_test['DateReported']=pd.to_datetime(data_test['DateReported'])","e3d8484b":"data.head()","11914945":"data['Yearofaccident']=data.DateTimeOfAccident.dt.year\ndata_test['Yearofaccident']=data_test.DateTimeOfAccident.dt.year","d6ac08ff":"data['Hourofaccident']=data.DateTimeOfAccident.dt.hour\ndata_test['Hourofaccident']=data_test.DateTimeOfAccident.dt.hour","6b34e9a7":"# Split DateTimeOfAccident into Day,Month,Year\ndata['Acc_Day'] = data['DateTimeOfAccident'].dt.dayofweek\n\ndata['Acc_Month'] = data['DateTimeOfAccident'].dt.month\n\ndata['Acc_Year'] = data['DateTimeOfAccident'].dt.year\n\ndata_test['Acc_Day'] = data_test['DateTimeOfAccident'].dt.dayofweek\n\ndata_test['Acc_Month'] = data_test['DateTimeOfAccident'].dt.month\n\ndata_test['Acc_Year'] = data_test['DateTimeOfAccident'].dt.year","2744de85":"# calculte DayOfReportedDelay by subtract the DateReported and DateTimeOfAccident\ndata['DayOfReportedDelay']=data.DateReported-data.DateTimeOfAccident\ndata_test['DayOfReportedDelay']=data_test.DateReported-data.DateTimeOfAccident","f9d1630b":"data['DayOfReportedDelay']=data['DayOfReportedDelay'].astype('<m8[D]')\ndata_test['DayOfReportedDelay']=data_test['DayOfReportedDelay'].astype('<m8[D]')","94b28571":"data['DayOfReportedDelay']=data['DayOfReportedDelay'].astype('int64')\ndata_test['DayOfReportedDelay']=data_test['DayOfReportedDelay'].astype('int64')","1a12eb0f":"data.info()","e6591b5d":"data.head()","3888d58d":"sns.set(style=\"darkgrid\")\nfig, ax = plt.subplots(6, 3, figsize = (18, 13))\nsns.boxplot(x= data[\"UltimateIncurredClaimCost\"], ax = ax[0,0])\nsns.distplot(data['UltimateIncurredClaimCost'], ax = ax[0,1])\nsns.scatterplot(data.index,data['UltimateIncurredClaimCost'],ax=ax[0,2])\nsns.boxplot(x= data[\"InitialIncurredCalimsCost\"], ax = ax[1,0])\nsns.distplot(data['InitialIncurredCalimsCost'], ax = ax[1,1])\nsns.scatterplot(data.index,data['InitialIncurredCalimsCost'],ax=ax[1,2])\nsns.boxplot(x= data[\"Age\"], ax = ax[2,0])\nsns.distplot(data['Age'], ax = ax[2,1])\nsns.scatterplot(data.index,data['Age'],ax=ax[2,2])\nsns.boxplot(x= data[\"WeeklyWages\"], ax = ax[3,0])\nsns.distplot(data['WeeklyWages'], ax = ax[3,1])\nsns.scatterplot(data.index,data['WeeklyWages'],ax=ax[3,2])\nsns.boxplot(x= data[\"HoursWorkedPerWeek\"], ax = ax[4,0])\nsns.distplot(data['HoursWorkedPerWeek'], ax = ax[4,1])\nsns.scatterplot(data.index,data['HoursWorkedPerWeek'],ax=ax[4,2])\nsns.boxplot(x= data[\"Hourofaccident\"],ax= ax[5,0])\nsns.distplot(data['Hourofaccident'], ax = ax[5,1])\nsns.scatterplot(data.index,data['Hourofaccident'],ax=ax[5,2])\n\nplt.tight_layout()","1b208e62":"data.MaritalStatus.value_counts().plot.pie(autopct=\"%.1f%%\")","fefe1b8d":"data.Gender.value_counts().plot.pie(autopct=\"%.1f%%\")","26526a0e":"data.PartTimeFullTime.value_counts().plot.pie(autopct=\"%.1f%%\")","aaa5cc8e":"fig = plt.figure(figsize = (15,10))\n\nax1 = fig.add_subplot(2,3,1)\nsns.countplot(data = data, x = 'Acc_Day')\nax2 = fig.add_subplot(2,3,2)\nsns.countplot(data = data, x = 'Acc_Month')\nax3 = fig.add_subplot(2,3,3)\nsns.countplot(data = data, x = 'Acc_Year')\nplt.xticks(rotation=90)","7ac20f13":"data.select_dtypes(include=('object')).columns","4092950c":"fig = plt.figure(figsize = (15,10))\n\nax1 = fig.add_subplot(2,3,1)\nsns.countplot(data = data, x = 'Gender', ax=ax1)\n\nax2 = fig.add_subplot(2,3,2)\nsns.countplot(data = data, x = 'MaritalStatus', ax=ax2)\n\nax3 = fig.add_subplot(2,3,3)\nsns.countplot(data = data, x = 'PartTimeFullTime', ax=ax3)\n\nax4 = fig.add_subplot(2,3,4)\nplt.ylim(10, 200000)\nsns.boxplot(data = data, x = 'Gender', y = 'UltimateIncurredClaimCost' , ax=ax4)\n\nax5 = fig.add_subplot(2,3,5)\nplt.ylim(10, 200000)\nsns.boxplot(data = data, x = 'MaritalStatus', y = 'UltimateIncurredClaimCost', ax=ax5)\n\nax6 = fig.add_subplot(2,3,6)\nplt.ylim(10, 200000)\nsns.boxplot(data = data, x = 'PartTimeFullTime', y = 'UltimateIncurredClaimCost', ax=ax6)","26efb2ae":"#data1=data.drop(data[data.UltimateIncurredClaimCost==data.UltimateIncurredClaimCost[data.Gender=='F'].max()].index)","306c340d":"sns.scatterplot(data.Hourofaccident,data.UltimateIncurredClaimCost)","a7e0ec12":"fig = plt.figure(figsize=(15,5))\nsns.barplot(data.Yearofaccident,data.UltimateIncurredClaimCost)","a9480cf2":"print('Correlation :',data.DayOfReportedDelay.corr(data.UltimateIncurredClaimCost))\nsns.scatterplot(data.DayOfReportedDelay,data.UltimateIncurredClaimCost)","78c68b3d":"print('Correlation :',data.InitialIncurredCalimsCost.corr(data.UltimateIncurredClaimCost))\nsns.scatterplot(data.InitialIncurredCalimsCost,data.UltimateIncurredClaimCost)","814c08d1":"sns.scatterplot(data.HoursWorkedPerWeek,data.WeeklyWages,hue=data.PartTimeFullTime)","af6a2fc5":"print('Correlation :',data.WeeklyWages.corr(data.UltimateIncurredClaimCost))\nsns.scatterplot(data.WeeklyWages,data.UltimateIncurredClaimCost,hue=data.PartTimeFullTime)","72314e35":"fig = plt.figure(figsize = (20,5))\n\nax1 = fig.add_subplot(1,2,1)\nsns.countplot('DependentChildren',data=data,ax=ax1)\nax2 = fig.add_subplot(1,2,2)\nsns.countplot('DependentsOther',data=data,ax=ax2)","c8d75a8e":"data.columns","b0c61fbb":"sns.pairplot(data[['Age','Gender',\n       'DependentChildren', 'DependentsOther', 'WeeklyWages', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek','UltimateIncurredClaimCost']],hue='Gender')","a53fb6ed":"sns.pairplot(data[['Hourofaccident','Gender',\n       'DayOfReportedDelay', 'Acc_Day', 'Acc_Month', 'Acc_Year', 'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost']],hue='Gender')","c2542952":"sns.set(style=\"darkgrid\")\nfig = plt.figure(figsize=(15,5))\nsns.heatmap(data.corr(), annot=True)","01bcb0a8":"# Transform the InitialIncurredCalimsCost into the log scale\nplt.figure(figsize = (14, 7))\nplt.subplot(1, 2, 1)\nsns.distplot(data['InitialIncurredCalimsCost'])\nplt.subplot(1, 2, 2)\nplt.title('Log Scale')\nsns.distplot(np.log1p(data['InitialIncurredCalimsCost']))\ndata['InitialIncurredCalimsCost']=np.log1p(data['InitialIncurredCalimsCost'])","b589007f":"#Here, There are 1 entries with high HoursWorkedPerWeek, so drop that row\nprint(data.HoursWorkedPerWeek.describe())\ndata.HoursWorkedPerWeek.plot.box()","9762cb8f":"print(f\"There are {data[data['HoursWorkedPerWeek'] >= 400.000].__len__()} entries with HoursWorkedPerWeek\\n\")\ndata[data['HoursWorkedPerWeek'] >= 400.00].head(2)","60c20049":"data.drop([4653,6113], inplace = True)","758a94f4":"# Transform the InitialIncurredCalimsCost into the log scale\nplt.figure(figsize = (14, 7))\nplt.subplot(1, 2, 1)\nsns.distplot(data['HoursWorkedPerWeek'])\nplt.subplot(1, 2, 2)\nplt.title('Log Scale')\nsns.distplot(np.log1p(data['HoursWorkedPerWeek']))\ndata['HoursWorkedPerWeek']=np.log1p(data['HoursWorkedPerWeek'])\ndata_test['HoursWorkedPerWeek']=np.log1p(data_test['HoursWorkedPerWeek'])","7bd911bb":"# Transform the InitialIncurredCalimsCost into the log scale\nplt.figure(figsize = (14, 7))\nplt.subplot(1, 2, 1)\nsns.distplot(data['WeeklyWages'])\nplt.subplot(1, 2, 2)\nplt.title('Log Scale')\nsns.distplot(np.log1p(data['WeeklyWages']))\ndata['WeeklyWages']=np.log1p(data['WeeklyWages'])\ndata_test['WeeklyWages']=np.log1p(data_test['WeeklyWages'])","27ce0ff5":"#dummy_train = pd.get_dummies(data.drop(['ClaimDescription', 'ClaimNumber', 'DateTimeOfAccident', 'DateReported', 'InitialIncurredCalimsCost'], axis = 1))","cfcf53e0":"le=pre.LabelEncoder()","3fe6a80e":"for x in data.select_dtypes(include=('object','category')).columns:\n    data[x]=le.fit_transform(data[x])\nfor x in data_test.select_dtypes(include=('object','category')).columns:\n    data_test[x]=le.fit_transform(data_test[x])","4087edf3":"data.columns","9998b836":"data_clean=data[['Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost', 'Yearofaccident', 'Hourofaccident',\n       'DayOfReportedDelay', 'Acc_Day', 'Acc_Month', 'Acc_Year']]\ndata_clean_test=data_test[['Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n        'Yearofaccident', 'Hourofaccident',\n       'DayOfReportedDelay', 'Acc_Day', 'Acc_Month', 'Acc_Year']]","bf715648":"#data_clean.UltimateIncurredClaimCost>data_clean.UltimateIncurredClaimCost.mean+data_clean.UltimateIncurredClaimCost.std","1da39d21":"np.quantile(data_clean['UltimateIncurredClaimCost'],0.80)","e1e67628":"# Here all the values above  80% is considered as out liar, so remove that values\n#data_clean=data_clean[data_clean.UltimateIncurredClaimCost<np.quantile(data_clean['UltimateIncurredClaimCost'],0.80)]","21d3c8a9":"data_clean","fe849c8d":"# Getting the output variable\ny = data_clean['UltimateIncurredClaimCost']\n# Getting the input variables\ndf_test = data_clean.drop(['UltimateIncurredClaimCost'], axis=1)\nmix_max=pre.minmax_scale\nX=mix_max(df_test.values)\nX_test=mix_max(data_clean_test.values)\n\nX=pd.DataFrame(X,columns=df_test.columns.tolist())\nX_clean_test=pd.DataFrame(X_test,columns=data_clean_test.columns.tolist())\n","aa8ae9d4":"X_clean_test","13ed0f40":"data_clean.columns","3d2d5ead":"# Diving our input and output into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(\n                                    X, y, \n                                    test_size=0.33, \n                                    random_state=42\n                                   )","6760eac3":"# CatBoostRegressor (Default values)\ntic = time.time()\nCGB = CatBoostRegressor(logging_level='Silent')    \nCGB.fit(X_train, y_train)\nprint(\"time (sec):\" + \"%6.0f\" % (time.time() - tic))\n \n# Validation MSE\nresult = mean_squared_error(y_test, CGB.predict(X_test))\n#result = mean_squared_error(np.expm1(y_test), np.expm1(CGB.predict(X_test)))\nprint(\"MSE:\" + \"%6.2f\" % result)","db6bfd1a":"(pd.Series(CGB.feature_importances_, index=X_test.columns).nlargest(20).plot(kind='barh'))\nplt.show()","f89556be":"X=X[['Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'WeeklyWages',\n       'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n       'Yearofaccident', 'Hourofaccident',\n       'DayOfReportedDelay', 'Acc_Day', 'Acc_Month', 'Acc_Year']]","c7288712":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()","34d9dd8a":"# print('#_____________________Linear___________________# ')\n# lr.fit(X_train,y_train)\n# y_pred=lr.predict(X_test)\n# print(lr.score(X_train,y_train))\n# print(lr.score(X_test, y_test))\n# print(np.sqrt(mean_squared_error(y_test, y_pred)))","f6fa437d":"# predlin=lr.predict(X_clean_test)","2febb50d":"from mlxtend.regressor import StackingCVRegressor\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\nxgb = XGBRegressor()\nlgbm = LGBMRegressor()\nrf = RandomForestRegressor()\nridge = Ridge()\nlasso = Lasso()\nsvr = SVR(kernel='linear')","a98e7d64":"# print('#_____________________Ridge___________________# ')\n# ridge = Ridge()\n# ridge.fit(X_train,y_train)\n# print(\"Train data :\",ridge.score(X_train,y_train))\n# print(\"Test data :\",ridge.score(X_test,y_test))\n# pred = ridge.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","ea1d24cb":"# print('#_____________________Lasso___________________# ')\n# lasso = Lasso()\n# lasso.fit(X_train,y_train)\n# print(\"Train data :\",lasso.score(X_train,y_train))\n# print(\"Test data :\",lasso.score(X_test,y_test))\n# pred = lasso.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","0d424cb6":"# print('#_____________________SVR___________________# ')\n# svr = SVR(kernel='linear')\n# svr.fit(X_train,y_train)\n# print(\"Train data :\",svr.score(X_train,y_train))\n# print(\"Test data :\",svr.score(X_test,y_test))\n# pred = svr.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","01bd5981":"# print('#_____________________Random Forest___________________# ')\n# rf = RandomForestRegressor()\n# rf.fit(X_train,y_train)\n# print(\"Train data :\",rf.score(X_train,y_train))\n# print(\"Test data :\",rf.score(X_test,y_test))\n# pred = rf.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","da3c024a":"# predrf = rf.predict(X_clean_test)","a49d675a":"# print('#__________________XG Booster______________________# ')\n# xgb = XGBRegressor()\n# xgb.fit(X_train,y_train)\n# print(\"Train data :\",xgb.score(X_train,y_train))\n# print(\"Test data :\",xgb.score(X_test,y_test))\n# pred = xgb.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","89ef82d6":"# pred1 = xgb.predict(X_clean_test)","e637274d":"# print('#__________________Light Booster______________________# ')\n# lgbm = LGBMRegressor()\n# lgbm.fit(X_train,y_train)\n# print(\"Train data :\",lgbm.score(X_train,y_train))\n# print(\"Test data :\",lgbm.score(X_test,y_test))\n# pred = lgbm.predict(X_test)\n# print(np.sqrt(mean_squared_error(y_test, pred)))","6b218512":"# predict=lgbm.predict(X_clean_test)","e1ef3539":"stack = StackingCVRegressor(regressors=(ridge, lasso, rf, lgbm, xgb),\n                            meta_regressor=xgb, cv=12,\n                            use_features_in_secondary=True,\n                            store_train_meta_features=True,\n                            shuffle=False,\n                            random_state=42)\n\nstack.fit(X_train, y_train)","43b2c652":"print('#__________________Stacking______________________# ')\nprint(\"Train data :\",stack.score(X_train,y_train))\nprint(\"Test data :\",stack.score(X_test,y_test))\npred = stack.predict(X_test)\nprint(np.sqrt(mean_squared_error(y_test, pred)))","1c7b9d65":"X_clean_test","b8832fe1":"pred_stack = stack.predict(X_clean_test)","a0832685":"sub=pd.read_csv('..\/input\/ml-lab-exam\/sample_submission_csv.csv')\nsub['UltimateIncurredClaimCost'] = pred_stack\nsub.to_csv('submission_linear.csv', index = False)\nsub.head(5)","f21a4ac7":"## Feature selection","42c001d7":"## EDA","b0c52019":"## Data Normalization","68336657":"#### Bivariate","27fe7779":"## Modeling","f9eaa02c":"### Missing value imputation","e1f00d19":"#### Multivariate ","56e5ea37":"InitialIncurredCalimsCost,HoursWorkedPerWeek,WeeklyWages contains some Outliers so using log transformation remove that ,","fb088a3b":"#### Univariate","a123d943":"## Data Loading","7805aeb0":"### Outlier imputation","105a7a6d":"### Data transformation","c1e9018a":"## Data preprocessing ","e347c1e6":"#### Correlation","0be3dd28":"As compare to other model Stacking gives highest value and optimum RMSE"}}