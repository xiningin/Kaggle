{"cell_type":{"4b390664":"code","15acbdc0":"code","9d2486ed":"code","a944c0a6":"code","12721f86":"code","1bc22dea":"code","179811e1":"code","8f3a510a":"code","c7c89db2":"code","7c22939d":"code","51f0e56c":"code","c7afade1":"code","636bfda4":"code","7cdedee5":"code","c9b5fef3":"code","fd9ba2ae":"code","ed747a26":"code","5460f560":"code","5d87f615":"code","a5157e65":"code","799218e5":"code","f16042fc":"code","8dde9cfd":"code","5e65339e":"code","95d3a984":"code","52f5d5d3":"code","e23068d2":"code","d373ce1e":"code","2ead235e":"code","aa8c3d94":"code","7bc94a5b":"code","90c85b26":"code","2f4b5d5d":"code","6517b067":"code","83114c35":"code","669b6ffd":"code","e5a2289f":"code","23d37a77":"code","0c47b73c":"code","fb3b1512":"code","f3b7a673":"code","47a934c3":"code","c5535e6a":"code","8694f727":"code","655163dc":"code","c36ca726":"code","6deb6699":"code","2293da51":"code","8b75e1c6":"code","b5914a18":"code","56d687f2":"code","1abe8427":"code","5f380083":"code","a7ad3a0d":"code","613b9bb6":"code","e6a57848":"code","acb70ed1":"code","3fd21874":"code","f5acbc9a":"code","2874b99e":"code","e13a50b6":"code","ece6eef8":"code","43e9059a":"code","6c519c80":"code","4bf7e609":"code","9b4886ef":"code","d0f164ff":"code","1049c299":"code","5efd9c00":"code","f3b975dd":"code","84cecc4a":"code","d73b8cf2":"code","6c2bf193":"code","c1fc3e1f":"code","d8508c88":"code","e0888f9b":"code","72182c9d":"code","33a8fe82":"code","f3ea5992":"code","96024953":"code","d7571e7c":"code","c49bc48d":"code","7cff5c28":"code","8ea18248":"code","f2dbd68e":"markdown","5d84ced1":"markdown","95b4165b":"markdown","4e245376":"markdown","43df4e87":"markdown","1bf99cdb":"markdown","3185ff74":"markdown","9fa99614":"markdown","ee63092d":"markdown","1e40c7b0":"markdown","8c8b81b1":"markdown","2699e424":"markdown","752d3f6f":"markdown","6415d219":"markdown","e13e14d2":"markdown","1755312a":"markdown","abc3d1e2":"markdown","5db250bd":"markdown","a3fcf750":"markdown","90b3699e":"markdown","098d0d2a":"markdown","01abcb94":"markdown","195018c1":"markdown","e1b49103":"markdown","6dedd8d0":"markdown","d7ecd1b8":"markdown","a3860d94":"markdown","cd3b6a43":"markdown","7ede65c3":"markdown","7f5e8bbf":"markdown","d6e5d389":"markdown","60eb15b1":"markdown","a194b3c9":"markdown"},"source":{"4b390664":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm import tqdm #for printing status bar\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_curve, confusion_matrix\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom scipy.stats import randint as sp_randint\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom imblearn.over_sampling import SMOTE","15acbdc0":"train_df = pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/test.csv\")","9d2486ed":"train_df.head()","a944c0a6":"print(\"Number of train data points are\", train_df.shape[0])\nprint(\"Number of test data points are\", test_df.shape[0])","12721f86":"train_df.info()","1bc22dea":"print(\"Number of rows with null values is\", train_df.isnull().sum().sum())","179811e1":"#printing null values\ntrain_df[train_df.isnull().any(axis=1)]","8f3a510a":"# printing class label distribution of null values\ntrain_df[train_df.isnull().any(axis=1)][\"Is_Lead\"].value_counts()","c7c89db2":"print(\"Number of duplicate data points is : \", train_df.duplicated().sum())","7c22939d":"sns.set_style(\"whitegrid\")\nsns.countplot(x = \"Is_Lead\", data=train_df)\nplt.title(\"Is_Lead Distribution\")\nplt.show()","51f0e56c":"print(\"Total number of datapoints is\", train_df.shape[0])\nprint(\"Number of points in negative class is %d which is %f percent.\"%(len(train_df[\"Is_Lead\"] == 0),100-np.round(train_df[\"Is_Lead\"].mean()*100,2)))\nprint(\"Number of points in positive class is %d which is %f percent.\"%(len(train_df[\"Is_Lead\"] == 1),np.round(train_df[\"Is_Lead\"].mean()*100,2)))","c7afade1":"sns.countplot(x = \"Gender\", data= train_df)\nplt.show()","636bfda4":"sns.countplot(x = \"Is_Lead\", data = train_df, hue = \"Gender\")\nplt.title(\"Distribution of Gender for each class label\")\nplt.show()","7cdedee5":"sns.FacetGrid(data = train_df ,height=8,hue = \"Is_Lead\")\\\n    .map(sns.distplot, \"Age\") \\\n    .add_legend()\nplt.show()","c9b5fef3":"train_df.Region_Code.value_counts()","fd9ba2ae":"plt.figure(figsize=(30,7))\nsns.countplot(x = \"Region_Code\", data = train_df, hue = \"Is_Lead\", palette=\"pastel\")\nplt.title(\"Distribution of Region Code for each class label\")\nplt.show()","ed747a26":"train_df.Occupation.value_counts()","5460f560":"plt.figure(figsize=(10,7))\nsns.countplot(x = \"Is_Lead\", data = train_df, hue = \"Occupation\", palette=\"pastel\")\nplt.title(\"Distribution of Region Code for each class label\")\nplt.show()","5d87f615":"train_df.Channel_Code.value_counts()","a5157e65":"plt.figure(figsize=(10,7))\nsns.countplot(x = \"Is_Lead\", data = train_df, hue = \"Channel_Code\", palette=\"pastel\")\nplt.title(\"Distribution of Region Code for each class label\")\nplt.show()","799218e5":"sns.FacetGrid(data = train_df ,height=8,hue = \"Is_Lead\")\\\n    .map(sns.distplot, \"Vintage\") \\\n    .add_legend()\nplt.show()","f16042fc":"sns.boxplot(x = \"Avg_Account_Balance\",data = train_df,hue = \"Is_Lead\")\nplt.show()","8dde9cfd":"for i in range(0,101,10):\n    print(i,\"th percentile of avg_account_balance is\", np.percentile(train_df[\"Avg_Account_Balance\"], i))","5e65339e":"for i in range(90,101):\n    print(i,\"th percentile of avg_account_balance is\", np.percentile(train_df[\"Avg_Account_Balance\"], i))","95d3a984":"for i in range(991,1001):\n    print(i\/10,\"th percentile of avg_account_balance is\", np.percentile(train_df[\"Avg_Account_Balance\"], i\/10))","52f5d5d3":"sns.FacetGrid(data = train_df[train_df[\"Avg_Account_Balance\"]<0.4e7] ,height=8,hue = \"Is_Lead\")\\\n    .map(sns.distplot, \"Avg_Account_Balance\") \\\n    .add_legend()\nplt.show()","e23068d2":"sns.FacetGrid(data = train_df[train_df[\"Avg_Account_Balance\"]>0.4e7] ,height=8,hue = \"Is_Lead\")\\\n    .map(sns.distplot, \"Avg_Account_Balance\") \\\n    .add_legend()\nplt.show()","d373ce1e":"plt.figure(figsize=(10,7))\nsns.countplot(x = \"Is_Lead\", data = train_df, hue = \"Is_Active\", palette=\"pastel\")\nplt.title(\"Distribution of Region Code for each class label\")\nplt.show()","2ead235e":"train_df.Credit_Product.value_counts()","aa8c3d94":"# filling null values with No_Info\ntrain_df = train_df.fillna(\"No_Info\")\ntest_df = test_df.fillna(\"No_Info\")","7bc94a5b":"train_df.Credit_Product.value_counts()","90c85b26":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(10,7))\nsns.countplot(x = \"Is_Lead\", data = train_df, hue = \"Credit_Product\", palette=\"pastel\")\nplt.title(\"Distribution of Region Code for each class label\")\nplt.show()","2f4b5d5d":"#creating a copy of dataframe\ntrain_df_preprocessed = train_df.copy()\ntest_df_preprocessed = test_df.copy()","6517b067":"train_df.head()","83114c35":"train_df_preprocessed.head()","669b6ffd":"train_df_preprocessed.shape","e5a2289f":"train_df_preprocessed.info()","23d37a77":"# one hot encoding the categorical features\nencoder = CountVectorizer()\nfor column in tqdm([\"Gender\",\"Region_Code\",\"Occupation\",\"Channel_Code\",\"Credit_Product\",\"Is_Active\"]):\n    array1 = encoder.fit_transform(train_df[column]).toarray()\n    array1_df = pd.DataFrame(array1, columns= [column + str(i) for i in range(array1.shape[1])])\n    array2 = encoder.transform(test_df[column]).toarray()\n    array2_df = pd.DataFrame(array2, columns= [column + str(i) for i in range(array1.shape[1])])\n    train_df_preprocessed.drop(columns=column, inplace=True)\n    test_df_preprocessed.drop(columns = column, inplace = True)\n    train_df_preprocessed = pd.concat([train_df_preprocessed,array1_df], axis =1)\n    test_df_preprocessed = pd.concat([test_df_preprocessed,array2_df], axis = 1)\n    \n    \n    ","0c47b73c":"train_df_preprocessed.head()","fb3b1512":"test_df_preprocessed.head()","f3b7a673":"#dropping id column\ntrain_df_preprocessed.drop(columns = \"ID\", inplace = True)\ntest_df_preprocessed.drop(columns = \"ID\", inplace = True)","47a934c3":"train_df_preprocessed.head()","c5535e6a":"test_df_preprocessed.head()","8694f727":"# creating X and Y datasets\nY_train_onehot = train_df_preprocessed[\"Is_Lead\"]\nX_train_onehot = train_df_preprocessed.drop(columns = \"Is_Lead\")","655163dc":"Y_train_onehot.value_counts()","c36ca726":"X_train_onehot.head()","6deb6699":"#LGBMClassifier with RandomizedSearchCV for hyperparameter tuning\nparam_dist = {\"n_estimators\":sp_randint(40,100),\n              \"colsample_bytree\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"subsample\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"reg_lambda\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"reg_alpha\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"min_child_samples\": sp_randint(25,65),\n                \"max_depth\": sp_randint(1,20)}\n\nclf1 = LGBMClassifier(boosting_type = \"gbdt\",n_jobs =-1,random_state = 42)\n\nlgbm_random = RandomizedSearchCV(clf1, param_distributions=param_dist,\n                                   n_iter=20,cv=10,scoring='roc_auc',random_state=42,verbose=1)\n\nlgbm_random.fit(X_train_onehot,Y_train_onehot)\nprint('mean test scores',lgbm_random.cv_results_['mean_test_score'])","2293da51":"lgbm_random.best_params_","8b75e1c6":"final_model = LGBMClassifier(colsample_bytree =  0.8,\n max_depth =  8,\n min_child_samples = 45,\n n_estimators =  55,\n reg_lambda =  0.0001,\n reg_alpha= 0.1,\n subsample =  0.9, n_jobs=-1,boosting_type = \"gbdt\")\nfinal_model.fit(X_train_onehot,Y_train_onehot)\nproba = final_model.predict_proba(X_train_onehot)[:,1]\ntrain_score = roc_auc_score(Y_train_onehot,proba)\ncv_score = cross_val_score(final_model,X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=2,cv =5).mean()\nprint(cv_score)\nprint(train_score)","b5914a18":"#calculating test probabilites\ntest_proba = final_model.predict_proba(test_df_preprocessed)[:,1]\nfinal_solution = pd.DataFrame()\nfinal_solution[\"ID\"] = test_df[\"ID\"]\nfinal_solution[\"Is_Lead\"] = test_proba\n","56d687f2":"final_solution","1abe8427":"#saving to df\nfinal_solution.to_csv(\"final_solution.csv\")","5f380083":"df = pd.read_csv(\"final_solution.csv\")\ndf.head()\ndf.drop(columns = \"Unnamed: 0\",inplace = True)","a7ad3a0d":"df.head()","613b9bb6":"df.to_csv(\"solution.csv\", index=False)","e6a57848":"oversample = SMOTE(random_state=42, n_jobs=-1)\nX_train_ovr, Y_train_ovr = oversample.fit_resample(X_train_onehot,Y_train_onehot)\nprint(X_train_ovr.shape)\nprint(Y_train_ovr.shape)\nprint(Y_train_ovr.value_counts())","acb70ed1":"param_dist = {\"n_estimators\":sp_randint(40,100),\n              \"colsample_bytree\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"subsample\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"reg_lambda\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"reg_alpha\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"min_child_samples\": sp_randint(25,65),\n                \"max_depth\": sp_randint(1,20)}\n\n\nclf2 = LGBMClassifier(boosting_type = \"gbdt\",n_jobs =-1,random_state = 21,silent=True)\n\nlgbm_random1 = RandomizedSearchCV(clf2, param_distributions=param_dist,\n                                   n_iter=20,cv=10,scoring='roc_auc',random_state=21,verbose=1)\n\nlgbm_random1.fit(X_train_ovr,Y_train_ovr)\nprint('mean test scores',lgbm_random1.cv_results_['mean_test_score'])","3fd21874":"lgbm_random1.best_params_","f5acbc9a":"final_model1 = LGBMClassifier(colsample_bytree =  0.8,\n max_depth =  16,\n min_child_samples = 39,\n n_estimators =  86,\n reg_lambda =  0.001,\n reg_alpha= 1.0,\n subsample =  0.9, n_jobs=-1,boosting_type = \"gbdt\")\nfinal_model1.fit(X_train_ovr,Y_train_ovr)\nproba = final_model1.predict_proba(X_train_onehot)[:,1]\ntrain_score = roc_auc_score(Y_train_onehot,proba)\ncv_score = cross_val_score(final_model1,X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=2,cv =5).mean()\nprint(cv_score)\nprint(train_score)","2874b99e":"# Calculating test probabilites\ntest_proba1 = final_model1.predict_proba(test_df_preprocessed)[:,1]\nfinal_solution1 = pd.DataFrame()\nfinal_solution1[\"ID\"] = test_df[\"ID\"]\nfinal_solution1[\"Is_Lead\"] = test_proba1","e13a50b6":"# saving to df\nfinal_solution1.to_csv(\"solution1.csv\", index=False)","ece6eef8":"# taking average proba of both models\nfinal_solution1[\"Is_Lead\"] = (final_solution1[\"Is_Lead\"] + df[\"Is_Lead\"])\/2","43e9059a":"final_solution1.head()","6c519c80":"#final output file\nfinal_solution1.to_csv(\"solution3.csv\", index=False)","4bf7e609":"param_dist = {\"n_estimators\":sp_randint(40,100),\n              \"colsample_bytree\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"subsample\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"reg_lambda\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"reg_alpha\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"min_child_samples\": sp_randint(25,65),\n                \"max_depth\": sp_randint(1,20)}\n\nclf1 = LGBMClassifier(boosting_type = \"gbdt\",n_jobs =-1,random_state = 10)\n\nlgbm_random = RandomizedSearchCV(clf1, param_distributions=param_dist,\n                                   n_iter=20,cv=10,scoring='roc_auc',random_state=42,verbose=1)\n\nlgbm_random.fit(X_train_onehot,Y_train_onehot)\nprint('mean test scores',lgbm_random.cv_results_['mean_test_score'])","9b4886ef":"lgbm_random.best_estimator_","d0f164ff":"final_model = LGBMClassifier(colsample_bytree=0.8, max_depth=16, min_child_samples=39,\n               n_estimators=86, random_state=10, reg_alpha=1.0,\n               reg_lambda=0.001, subsample=0.8)\nfinal_model.fit(X_train_onehot,Y_train_onehot)\nproba = final_model.predict_proba(X_train_onehot)[:,1]\ntrain_score = roc_auc_score(Y_train_onehot,proba)\ncv_score = cross_val_score(final_model,X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=2,cv =5).mean()\nprint(cv_score)\nprint(train_score)","1049c299":"test_proba = final_model.predict_proba(test_df_preprocessed)[:,1]\nfinal_solution1 = pd.DataFrame()\nfinal_solution1[\"ID\"] = test_df[\"ID\"]\nfinal_solution1[\"Is_Lead\"] = test_proba","5efd9c00":"final_solution1.to_csv(\"submission_lgbm.csv\", index = False)","f3b975dd":"param_dist = {\"n_estimators\":sp_randint(40,100),\n              \"colsample_bytree\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"subsample\":np.array([0.5,0.6,0.7,0.8,0.9,1]),\n              \"reg_lambda\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"reg_alpha\":np.array([1e-5,1e-4,1e-3,1e-2,0.1,1,10,100]),\n              \"min_child_samples\": sp_randint(25,65),\n                \"max_depth\": sp_randint(1,20)}\n\nclf1 = XGBClassifier(boosting_type = \"gbdt\",n_jobs =-1,random_state = 0,verbosity =0,scale_pos_weight = 3.2158)\n\nxgb_random = RandomizedSearchCV(clf1, param_distributions=param_dist,\n                                   n_iter=20,cv=5,scoring='roc_auc',random_state=42,verbose=1)\n\nxgb_random.fit(X_train_onehot,Y_train_onehot)\nprint('mean test scores',xgb_random.cv_results_['mean_test_score'])","84cecc4a":"xgb_random.best_estimator_","d73b8cf2":"final_model_1 = XGBClassifier(base_score=0.5, booster='gbtree', boosting_type='gbdt',\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.6,\n              gamma=0, gpu_id=-1, importance_type='gain',\n              interaction_constraints='', learning_rate=0.300000012,\n              max_delta_step=0, max_depth=7, min_child_samples=52,\n              min_child_weight=1 ,monotone_constraints='()',\n              n_estimators=46, n_jobs=-1, num_parallel_tree=1, random_state=0,\n              reg_alpha=1e-05, reg_lambda=100.0, scale_pos_weight=3.2158,\n              subsample=0.8, tree_method='exact', validate_parameters=1,\n              verbosity=0)\nfinal_model_1.fit(X_train_onehot,Y_train_onehot)\nproba = final_model_1.predict_proba(X_train_onehot)[:,1]\ntrain_score = roc_auc_score(Y_train_onehot,proba)\ncv_score = cross_val_score(final_model_1,X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=2,cv =5).mean()\nprint(cv_score)\nprint(train_score)\n","6c2bf193":"test_proba_1 = final_model_1.predict_proba(test_df_preprocessed)[:,1]\nfinal_solution_1 = pd.DataFrame()\nfinal_solution_1[\"ID\"] = test_df[\"ID\"]\nfinal_solution_1[\"Is_Lead\"] = test_proba_1","c1fc3e1f":"final_solution_1.to_csv(\"xgb_solution.csv\", index = False)","d8508c88":"from mlxtend.classifier import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression","e0888f9b":"model_1  = LGBMClassifier(colsample_bytree=0.8, max_depth=16, min_child_samples=39,\n               n_estimators=86, random_state=10, reg_alpha=1.0,\n               reg_lambda=0.001, subsample=0.8)\nmodel_1.fit(X_train_onehot,Y_train_onehot)\n\nmodel_2 = XGBClassifier(base_score=0.5, booster='gbtree', boosting_type='gbdt',\n              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.6,\n              gamma=0, gpu_id=-1, importance_type='gain',\n              interaction_constraints='', learning_rate=0.300000012,\n              max_delta_step=0, max_depth=7, min_child_samples=52,\n              min_child_weight=1 ,monotone_constraints='()',\n              n_estimators=46, n_jobs=-1, num_parallel_tree=1, random_state=0,\n              reg_alpha=1e-05, reg_lambda=100.0, scale_pos_weight=3.2158,\n              subsample=0.8, tree_method='exact', validate_parameters=1,\n              verbosity=0)\nmodel_2.fit(X_train_onehot,Y_train_onehot)","72182c9d":"alpha = [1e-7,1e-6,1e-5, 0.0001,0.001,0.01,0.1,1,10] \nfor i in alpha:\n    lr = LogisticRegression(C = i )\n    sclf = StackingClassifier([model_1,model_2], meta_classifier=lr, use_probas=True )\n    sclf.fit(X_train_onehot,Y_train_onehot)\n    train_proba = sclf.predict_proba(X_train_onehot)[:,1]\n    train_score = roc_auc_score(Y_train_onehot,train_proba)\n    cv_score = cross_val_score(sclf, X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=0,cv =5).mean()\n    print(\"Stacking classifier for alpha = %f, train score is %f and cv_score is %f\"%(i, train_score, cv_score))\n    \n    \n    ","33a8fe82":"lr = LogisticRegression(C =0.0001)\nsclf =StackingClassifier([model_1,model_2], meta_classifier=lr, use_probas=True )\nsclf.fit(X_train_onehot,Y_train_onehot)\ntrain_proba = sclf.predict_proba(X_train_onehot)[:,1]\ntrain_score = roc_auc_score(Y_train_onehot,train_proba)\ncv_score = cross_val_score(sclf, X_train_onehot,Y_train_onehot,scoring=\"roc_auc\",verbose=0,cv =5).mean()\nprint(\"Stacking classifier for alpha = %f, train score is %f and cv_score is %f\"%(i, train_score, cv_score))","f3ea5992":"test_proba_sclf = sclf.predict_proba(test_df_preprocessed)[:,1]\nfinal_solution_sclf = pd.DataFrame()\nfinal_solution_sclf[\"ID\"] = test_df[\"ID\"]\nfinal_solution_sclf[\"Is_Lead\"] = test_proba_sclf","96024953":"final_solution_sclf.to_csv(\"sclf_submission.csv\", index = False)","d7571e7c":"final_solution_1 = pd.read_csv(\"solution3.csv\")","c49bc48d":"final_solution_x = final_solution_1.copy()","7cff5c28":"# Stacking stacking output with oversampled model output\nfinal_solution_x[\"Is_Lead\"] = (final_solution_1['Is_Lead'] + final_solution_sclf[\"Is_Lead\"])\/2","8ea18248":"final_solution_x.to_csv(\"submission_x.csv\", index = False)","f2dbd68e":"### Problem Statement ","5d84ced1":"## [2]. Machine Learning Problem","95b4165b":"### Dataset Overview","4e245376":"- Males and females are almost same in both the class labels","43df4e87":"- It can be seen that older people are dominant in class 1 and people in age 20 to 30 have dominant 0 class label","1bf99cdb":"Not much can be inferred from Avg_Account_Balance column alone","3185ff74":"## [4]. Exploratory Data Analysis","9fa99614":"- To further improve the model performance we will choose the average probability that we get from both of the models.","ee63092d":"- There are outliers present in avg_account_balance column; tried removing it but didn't get the desried results so not removing it.","1e40c7b0":"- The evaluation metric for this competition is roc_auc_score across all entries in the test set.","8c8b81b1":"### Oversampling","2699e424":"### Stacking classifier","752d3f6f":"- We will be using one hot encoding to encode the features.","6415d219":"### Importing Libraries","e13e14d2":"**Train Data**\n<p>\n\n\n    1. ID - Unique Identifier for a row\n    2. Gender - Gender of the Customer\n    3. Age - Age of the Customer (in Years)\n    4. Region_Code - Code of the Region for the customers\n    5. Occupation - Occupation Type for the customer\n    6. Channel_Code - Acquisition Channel Code for the Customer  (Encoded)\n    7. Vintage - Vintage for the Customer (In Months)\n    8. Credit_Product - If the Customer has any active credit product (Home loan,\n                      Personal loan, Credit Card etc.)\n    9. Avg_Account_Balance - Average Account Balance for the Customer in last 12 Months\n    10. Is_Active - If the Customer is Active in last 3 Months\n    11. Is_Lead(Target) - If the Customer is interested for the Credit Card\n                        - 0 : Customer is not interested\n                        - 1 : Customer is interested\n  <\/p>","1755312a":"- As there was a class imbalance present in the train data we will try to overcome it by oversampling. For this we will use SMOTE. ","abc3d1e2":"- Using tree based algorithms as the dimensionality of data is moderately low and most of the features are binary.\n- We will use Ensemble Techniques like Gradient Boosting for better model performance.","5db250bd":"- Region X1 and X4 is more likely to have Is_Lead = 0","a3fcf750":"- 0 majority for low Vintage 1 majority for high vintage","90b3699e":"### Loading Data ","098d0d2a":"## [5]. Pre-processing","01abcb94":"- Is_Lead is dominantly 1 if Credit_Product is Yes and is dominantly 1 if Credit__Product is No_info.","195018c1":"**Test Data**\n<p>\n\n\n    1. ID - Unique Identifier for a row\n    2. Gender - Gender of the Customer\n    3. Age - Age of the Customer (in Years)\n    4. Region_Code - Code of the Region for the customers\n    5. Occupation - Occupation Type for the customer\n    6. Channel_Code - Acquisition Channel Code for the Customer  (Encoded)\n    7. Vintage - Vintage for the Customer (In Months)\n    8. Credit_Product - If the Customer has any active credit product (Home loan,\n                      Personal loan, Credit Card etc.)\n    9. Avg_Account_Balance - Average Account Balance for the Customer in last 12 Months\n    10. Is_Active - If the Customer is Active in last 3 Months\n\n  <\/p>","e1b49103":"### Evaluation Metric","6dedd8d0":"## <div align = \"center\"> Credit Card Leak Prediction<\/div>","d7ecd1b8":"- Salaried employees are more likely to have class label 0 while Enterpreneur are more likely to have class label 1","a3860d94":"\nHappy Customer Bank is a mid-sized private bank that deals in all kinds of banking products, like Savings accounts, Current accounts, investment products, credit products, among other offerings.\n\nThe bank also cross-sells products to its existing customers and to do so they use different kinds of communication like tele-calling, e-mails, recommendations on net banking, mobile banking, etc. \n\nIn this case, the Happy Customer Bank wants to cross sell its credit cards to its existing customers. The bank has identified a set of customers that are eligible for taking these credit cards.<br>\n\nNow, the bank is looking for your help in identifying customers that could show higher intent towards a recommended credit card, given:\n- Customer details (gender, age, region etc.)\n- Details of his\/her relationship with the bank (Channel_Code,Vintage, 'Avg_Asset_Value etc.)","cd3b6a43":"## [3]. Reading Data","7ede65c3":"- There are null values present in the dataset and most of them have class label = 1. We will use this information later.","7f5e8bbf":"- It can be seen that the data is imbalanced.","d6e5d389":"## [1]. Business Problem","60eb15b1":"Given the information about customer and his relationship to the bank predict whether he\/she is interested for the credit card. \n- 0 if customer is not interested.\n- 1 if customer is interested.\n\n**Real-world\/Business objectives and constraints**<br>\n- No low-latency requirement. ","a194b3c9":"## [6]. Modelling"}}