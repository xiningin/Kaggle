{"cell_type":{"d3493576":"code","633e3000":"code","5498a4d1":"code","96ebefe5":"code","eeb29272":"code","35c21ad8":"code","8e4d6014":"code","089f744b":"code","7eccebc8":"code","28e551b3":"code","cea7039c":"code","98b56a1f":"code","ff7aad9f":"code","493ae225":"code","340c773d":"code","2c5c9a1a":"code","7d83df4b":"code","1b029376":"code","07bb9e07":"code","4c2a5bb6":"code","a9b72d08":"code","06729038":"markdown","ef02a387":"markdown","ee666c26":"markdown","6206d24e":"markdown","11a7bcce":"markdown","5e6e8441":"markdown","2299060a":"markdown","b8e087d3":"markdown","65674ce6":"markdown","1a155cd3":"markdown","a2ce8a00":"markdown","89508bfc":"markdown","177ee91d":"markdown","ed33ddcc":"markdown","fca70979":"markdown","8e0484cf":"markdown","a43d1520":"markdown","98cfbcca":"markdown","d5a28ef3":"markdown","21276837":"markdown","0a2f5c32":"markdown","187d941d":"markdown","9ee28657":"markdown","661aeb8e":"markdown","3c636c00":"markdown","ab0abc3d":"markdown","160b2422":"markdown","5eda10dc":"markdown","4d0336f7":"markdown"},"source":{"d3493576":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 1000)\nfrom tqdm import tqdm\nfrom sklearn.neighbors import BallTree\nimport math\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nfrom datetime import datetime\nimport pytz\nfrom IPython.display import HTML\nimport scipy.stats as stats\nimport matplotlib as mpl\nfrom matplotlib import animation, rc, use\nfrom matplotlib.patches import Rectangle, Arrow\nimport tensorflow as tf\nfrom matplotlib.patches import Polygon\nimport matplotlib.patheffects as pe\nimport gc\n\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    \n    return df\n\n\ndef get_dx_dy(radian_angle, dist):\n    dx = dist * math.cos(radian_angle)\n    dy = dist * math.sin(radian_angle)\n    return dx, dy\n\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='slategrey', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.3,\n                                edgecolor='k',\n                                facecolor='royalblue',\n                                alpha=0.4,\n                                zorder=1)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.3,\n                                edgecolor='k',\n                                facecolor='royalblue',\n                                alpha=0.4,\n                                zorder=1)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(0, 53.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\n\n\nclass CreateNFLData:\n\n    def __init__(self):\n        pass\n\n    def LoadData(self, Normal=True):\n        if Normal == True:\n            print(\"Loading Original Data\")\n            globbed_files = glob.glob(\"week*.csv\") #creates a list of all csv files\n            data = []\n            for csv in tqdm(globbed_files):\n                frame = pd.read_csv(csv, index_col=0)\n                data.append(frame)\n\n            WeekData = pd.concat(data).reset_index()\n            WeekData\n        \n        else:\n            print(\"Loading Modified Data\")\n            globbed_files = glob.glob(\"Revised Data\/*.csv\") #creates a list of all csv files\n            data = []\n            for csv in tqdm(globbed_files):\n                frame = pd.read_csv(csv, index_col=0)\n                data.append(frame)\n\n            WeekData = pd.concat(data).reset_index()\n            WeekData\n        return WeekData\n\n\n\n    def Standardize(self,W):\n        print(\"Standardizing Data..\")\n        W['Dir_rad'] = np.mod(90 - W.dir, 360) * math.pi\/180.0\n        W['ToLeft'] = W.playDirection == \"left\"\n        W['TeamOnOffense'] = \"home\"\n        W.loc[W.possessionTeam != W.PlayerTeam, 'TeamOnOffense'] = \"away\"\n        W['IsOnOffense'] = W.PlayerTeam == W.TeamOnOffense # Is player on offense?\n        W['YardLine_std'] = 100 - W.yardlineNumber\n        W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'YardLine_std'\n                ] = W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'yardlineNumber']\n        W['X_std'] = W.x\n        W.loc[W.ToLeft, 'X_std'] = 120 - W.loc[W.ToLeft, 'x'] \n        W['Y_std'] = W.y\n        W.loc[W.ToLeft, 'Y_std'] = 160\/3 - W.loc[W.ToLeft, 'y'] \n        #W['Orientation_std'] = -90 + W.Orientation\n        #W.loc[W.ToLeft, 'Orientation_std'] = np.mod(180 + W.loc[W.ToLeft, 'Orientation_std'], 360)\n        W['Dir_std'] = W.Dir_rad\n        W.loc[W.ToLeft, 'Dir_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Dir_rad'], 2*np.pi)\n        W['dx'] = round(W['s']*np.cos(W['Dir_std']),2)\n        W['dy'] = round(W['s']*np.sin(W['Dir_std']),2)\n        W['X_std'] = round(W['X_std'],2)\n        W['Y_std'] = round(W['Y_std'],2)\n        #W['Orientation_rad'] = np.mod(W.o, 360) * math.pi\/180.0\n        W['Orientation_rad'] = np.mod(-W.o + 90, 360) * math.pi\/180.0\n        W['Orientation_std'] = W.Orientation_rad\n        W.loc[W.ToLeft, 'Orientation_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Orientation_rad'], 2*np.pi)\n        W['MPH'] = W['s'] \/ 0.488889\n        return W\n\n    \n    def FrameData(self,WeekData1):\n        NotNone = WeekData1.query('event != \"None\"')\n        NotNone = NotNone.groupby(['gameId','playId','event'])['frameId'].max().reset_index()\n        NotNone = NotNone.set_index(['gameId','playId','event'], drop= True).unstack('event').reset_index()\n        NotNone.columns = [' '.join(col).strip() for col in NotNone.columns.values]\n        NotNone.columns = NotNone.columns.str.replace('frameId' , '')\n        NotNone.columns = NotNone.columns.str.replace(' ' , '')\n        NotNone['Code'] = NotNone['gameId'].astype(str) + \"-\" + NotNone['playId'].astype(str)\n        NotNone = NotNone.set_index('Code')\n        NotNone = NotNone.loc[~NotNone.index.duplicated(keep='first')]\n\n        for col in tqdm(NotNone.columns):\n            NotNone['Contains_' + str(col)] = np.where(NotNone[col] > 0, True, False)\n\n        Cols = ['ball_snap', 'man_in_motion', 'pass_arrived', 'pass_forward','pass_outcome_caught', 'play_action', 'run_pass_option', 'Contains_man_in_motion', 'Contains_pass_arrived', 'Contains_pass_forward', 'Contains_pass_outcome_caught', 'Contains_play_action','Contains_run_pass_option']\n    #   WeekData1 = pd.merge(df, NotNone, how=\"left\", left_on=['gameId','playId'], right_on=['gameId','playId'] )\n        for col in Cols:\n            WeekData1[col] = WeekData1.Code.map(NotNone[col])\n\n        del NotNone\n        gc.collect()\n\n        WeekData1['After_snap'] = np.where(WeekData1['frameId'] > WeekData1['ball_snap'],1,0)\n        WeekData1['After_Throw'] = np.where(WeekData1['frameId'] > WeekData1['pass_forward'],1,0)\n        WeekData1['After_PassArrived'] = np.where(WeekData1['frameId'] > WeekData1['pass_arrived'],1,0)\n        WeekData1['After_PlayAction'] = np.where(WeekData1['frameId'] > WeekData1['play_action'],1,0)\n    #   WeekData1['After_run_pass_option'] = np.where(WeekData1['frameId'] > WeekData1['run_pass_option'],1,0)\n        WeekData1['After_Catch'] = np.where(WeekData1['frameId'] > WeekData1['pass_outcome_caught'],1,0)\n\n        \n        LOS = WeekData1.query('displayName == \"Football\" & After_snap == 0')\n        LOS = LOS.groupby(['gameId','playId'])['X_std','Y_std'].agg('median').reset_index()\n        LOS.columns = ['gameId','playId','LOSX','LOSY']\n        LOS['Code'] = LOS['gameId'].astype(str) + \"-\" + LOS['playId'].astype(str)\n        LOS = LOS.set_index('Code')\n        LOS = LOS.loc[~LOS.index.duplicated(keep='first')]\n        WeekData1[\"LOSX\"] = WeekData1.Code.map(LOS['LOSX'])\n        WeekData1[\"LOSY\"] = WeekData1.Code.map(LOS['LOSY'])\n        WeekData1['Distfrom_LOSX'] = WeekData1['X_std'] - WeekData1['LOSX']\n        WeekData1['Distfrom_LOSY'] = WeekData1['Y_std'] - WeekData1['LOSY']\n        WeekData1['AbsDistfrom_LOSX'] = np.abs(WeekData1['X_std'] - WeekData1['LOSX'])\n        WeekData1['AbsDistfrom_LOSY'] = np.abs(WeekData1['Y_std'] - WeekData1['LOSY'])\n        del LOS\n        gc.collect()\n        return WeekData1\n    \n    def import_data(self,file,columns=False,cols=\"\"):\n        \"\"\"create a dataframe and optimize its memory usage\"\"\"\n        if columns == False:\n            df = pd.read_csv(file, low_memory=False)\n            df = reduce_mem_usage(df)\n        else:\n            df = pd.read_csv(file, low_memory=False, usecols=cols)\n            df = reduce_mem_usage(df)\n        return df\n    \n    \n\n\n\n\n\n\nclass AnimatePlay:\n    def __init__(self, play_df,player_id=[], Tri = False, MPH = False,Text=\"\",Show='jerseyNumber',method='all' ) -> None:\n        self._MAX_FIELD_Y = 53.3\n        self._MAX_FIELD_X = 120\n        self._MAX_FIELD_PLAYERS = 22\n        \n\n        self.Tri = Tri\n        self.MPH = MPH\n        self.player_id = player_id\n        self.Show = Show\n        self.method = method\n        self.Text = Text\n\n        self._CPLT = sns.color_palette(\"husl\", 2)\n        self._frame_data = play_df\n        self._times = sorted(play_df.time.unique())\n        self._stream = self.data_stream()\n        \n        self._date_format = \"%Y-%m-%dT%H:%M:%S.%fZ\" \n        self._mean_interval_ms = np.mean([delta.microseconds\/1000 for delta in np.diff(np.array([pytz.timezone('US\/Eastern').localize(datetime.strptime(date_string, self._date_format)) for date_string in self._times]))])\n        \n        self._fig, self._ax_field = create_football_field()\n\n        self._fig.set_figheight(10)\n        self._fig.set_figwidth(15)\n        \n        self._fig.tight_layout()\n        \n        self._ax_field = plt.gca()\n        \n        self._ax_home = self._ax_field.twinx()\n        self._ax_away = self._ax_field.twinx()\n        self._ax_jersey = self._ax_field.twinx()\n\n        self.ani = animation.FuncAnimation(self._fig, self.update, frames=len(self._times), interval = self._mean_interval_ms, \n                                          init_func=self.setup_plot, blit=False)\n        \n        plt.close()\n       \n    @staticmethod\n    def set_axis_plots(ax, max_x, max_y) -> None:\n        ax.xaxis.set_visible(False)\n        ax.yaxis.set_visible(False)\n\n        ax.set_xlim([0, max_x])\n        ax.set_ylim([0, max_y])\n        \n    @staticmethod\n    def convert_orientation(x):\n        return (-x + 90)%360\n    \n    @staticmethod\n    def polar_to_z(r, theta):\n        return r * np.exp( 1j * theta)\n    \n    @staticmethod\n    def deg_to_rad(deg):\n        return deg*np.pi\/180\n        \n    def data_stream(self):\n        for time in self._times:\n            yield self._frame_data[self._frame_data.time == time]\n    \n    def setup_plot(self): \n        self.set_axis_plots(self._ax_field, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        ball_snap_df = self._frame_data[(self._frame_data.event == 'ball_snap') & (self._frame_data.team == 'football')]\n        self._ax_field.axvline(ball_snap_df.X_std.to_numpy()[0], color = 'yellow', linestyle = '--')\n        \n        self.set_axis_plots(self._ax_home, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_away, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_jersey, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        for idx in range(10,120,10):\n            self._ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n            \n        self._scat_field = self._ax_field.scatter([], [], s = 200, color = 'red')\n        self._scat_home = self._ax_home.scatter([], [], s = 900, color = self._CPLT[0], edgecolors = 'k')\n        self._scat_away = self._ax_away.scatter([], [], s = 900, color = self._CPLT[1], edgecolors = 'k')\n        \n        self._scat_jersey_list = []\n        self._scat_number_list = []\n        self._scat_name_list = []\n        self._scat_mph_list = []\n        self._a_dir_list = []\n        self._a_or_list = []\n        self._a_tri_list = []\n        for _ in range(self._MAX_FIELD_PLAYERS):\n            self._scat_jersey_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black',fontweight='bold',fontsize='large',path_effects=[pe.withStroke(linewidth=3, foreground=\"white\")]))\n            self._scat_number_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white',fontweight='bold',fontsize=14,path_effects=[pe.withStroke(linewidth=5, foreground=\"dodgerblue\")]))\n            self._scat_name_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black',fontweight='bold',fontsize='larger',path_effects=[pe.withStroke(linewidth=5, foreground=\"gold\")]))\n            self._scat_mph_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'lime',fontweight='bold',fontsize='larger'))\n\n            self._a_dir_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_or_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_tri_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            \n        return (self._scat_field, self._scat_home, self._scat_away,*self._scat_mph_list, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n        \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'football':\n                self._scat_field.set_offsets(np.hstack([label_data.X_std, label_data.Y_std]))\n            elif label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.X_std, label_data.Y_std]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.X_std, label_data.Y_std]).T)\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        for (index, row) in pos_df[pos_df.jerseyNumber.notnull()].reset_index().iterrows():\n            self._scat_jersey_list[index].set_position((row.X_std, row.Y_std))\n            self._scat_jersey_list[index].set_text(row.position)\n            if self.method == 'single':\n                try:\n                    self._scat_number_list[index].set_text(np.where(np.isin(row.nflId,self.player_id) == True,str(self.Text) +\" \"+ str(round(row[self.Show],2)),\"\"))\n                    self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n                except:\n                    self._scat_number_list[index].set_text(np.where(np.isin(row.nflId,self.player_id) == True,str(self.Text) +\" \"+ str(row[self.Show]),\"\"))\n                    self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n                    pass\n            else:\n                try:\n                    self._scat_number_list[index].set_text(str(round(row[self.Show],2)))\n                    self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n                except:\n                    self._scat_number_list[index].set_text(row[self.Show])\n                    self._scat_number_list[index].set_position((row.X_std, row.Y_std+2.4))\n                    pass               \n\n            self._scat_name_list[index].set_text(np.where(row.frameId <= 10,row.displayName.split()[-1],\"\"))\n            self._scat_name_list[index].set_position((row.X_std, row.Y_std-1.9))\n            if self.MPH == True:\n                self._scat_mph_list[index].set_text(np.where((row.s \/ 0.488889) > 17,str(round(float(row.s \/ 0.488889),2)) + \" MPH\",\"\"))\n                self._scat_mph_list[index].set_position((row.X_std, row.Y_std+1.9))\n            else:\n                pass\n\n            player_vel = np.array([row.dx, row.dy])\n            player_orient = np.array([np.real(self.polar_to_z(3, row.Orientation_std)), np.imag(self.polar_to_z(3, row.Orientation_std))])\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.X_std, row.Y_std, player_vel[0], player_vel[1], color = 'black'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.X_std, row.Y_std, player_orient[0], player_orient[1], color = 'blue', width = 2))\n\n            if self.Tri == True:\n                if (self.method == 'single') & (np.isin(row.nflId,self.player_id) == True):\n                    self._a_tri_list[index].remove()\n                    self._a_tri_list[index] = self._ax_field.add_patch(Polygon([[row.X_std, row.Y_std], [row.X_std_COpp,row.Y_std_COpp],[row.X_std_QB,row.Y_std_QB]], closed=True, fill=False, hatch='\/',color='lime'))\n                else:\n      #              self._a_tri_list[index].remove()\n      #              self._a_tri_list[index] = self._ax_field.add_patch(Polygon([[row.X_std, row.Y_std], [row.X_std_COpp,row.Y_std_COpp],[row.X_std_QB,row.Y_std_QB]], closed=True, fill=False, hatch='\/',color='lime'))\n                    pass\n            else:\n                pass\n        \n        return (self._scat_field, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)","633e3000":"import pandas as pd\nimport numpy as np\nimport os\nimport seaborn as sns\nimport glob\nfrom tqdm import tqdm\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\npd.set_option('max_columns', 1000)\n\nfrom sklearn.neighbors import BallTree\n\n#from BDBUtils.Utilities import CreateNFLData\nfrom IPython.core.display import HTML\nimport time\nimport math\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nfrom datetime import datetime\nimport pytz\nfrom IPython.display import HTML\nimport scipy.stats as stats\nimport matplotlib as mpl\nfrom matplotlib import animation, rc\nfrom matplotlib.patches import Rectangle, Arrow\nimport tensorflow as tf\n#from BDBUtils.Utilities import CreateNFLData\n\nimport glob\nimport os\n\nnp.set_printoptions(suppress=True)\n\nimport gc\n\ndef convert_orientation(x):\n    return (x)%360\n\ndef deg_to_rad(deg):\n        return deg*np.pi\/180\n\n\n\nCreate = CreateNFLData()\n\nstart = time.process_time()\n\nWeeks = range(1,18)\n\n#globbed_files = glob.glob(\"..\/input\/revised-data\/*.csv\") #creates a list of all csv files\ndata = []\nfor n in tqdm(Weeks):\n    filename = '..\/input\/revised-data\/week' + str(n) + '.csv'\n    frame = Create.import_data(filename,columns=True, cols=['week', 'gameId', 'playId', 'frameId', 'time', 'nflId', 'displayName', 'jerseyNumber', 'position', 'team', 'X_std', 'Y_std', 'Dir_std', 'dx', 'dy', 'Orientation_std', 's', 'MPH', 'a', 'dis', 'event','route', 'PlayerTeam','yardlineNumber', 'YardLine_std', 'OnOffense',  'closestOpp_Id', 'Opp_Dist_COpp','route_COpp', 'X_std_COpp', 'Y_std_COpp', 'Dir_std_COpp', 'dx_COpp', 'dy_COpp', 'Orientation_std_COpp', 'MPH_COpp', 's_COpp', 'a_COpp', 'dis_COpp', 'position_COpp', 'Pos_Rank_COpp','closestTeam_Id', 'Team_Dist_CTm', 'nflId_y_CTm', 'route_CTm', 'X_std_CTm', 'Y_std_CTm','QB_Dist_QB', 'X_std_QB', 'Y_std_QB', 'Orientation_std_QB', 'FootDist', 'Targeted'])\n    frame['Code'] = frame['gameId'].astype(str) + \"-\" + frame['playId'].astype(str)\n    plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv', usecols=['gameId', 'playId','down', 'yardsToGo','penaltyCodes', 'penaltyJerseyNumbers', 'passResult', 'offensePlayResult', 'playResult', 'epa', 'isDefensivePI','offenseFormation',\t'personnelO',\t'defendersInTheBox',\t'personnelD',\t'typeDropback','playType'])\n    plays['Code'] = plays['gameId'].astype(str) + \"-\" + plays['playId'].astype(str)\n    plays = plays.set_index('Code')\n    plays = plays.loc[~plays.index.duplicated(keep='first')]\n    Cols = ['playId','down', 'yardsToGo','penaltyCodes', 'penaltyJerseyNumbers', 'passResult', 'offensePlayResult', 'playResult', 'epa', 'isDefensivePI','offenseFormation',\t'personnelO',\t'defendersInTheBox',\t'personnelD',\t'typeDropback','playType']\n    for col in Cols:\n        frame[col] = frame.Code.map(plays[col])\n    Obs = frame.select_dtypes(include=['object']).columns.to_list()\n    frame[Obs] = frame[Obs].astype('category')\n    data.append(frame)\n    del plays\n    gc.collect()\n    del frame\n    del Cols\n    del Obs\n    gc.collect()\n\nprint(\"finish\")\nWeekData = pd.concat(data).reset_index()\ndel data\ngc.collect()\n\n\nFinaldf1 = Create.FrameData(WeekData)\ndel WeekData\ngc.collect()\nFinaldf1.drop(['index','Code', 'ball_snap', 'man_in_motion', 'pass_arrived', 'pass_forward', 'pass_outcome_caught', 'play_action', 'run_pass_option'], axis=1, inplace=True)\nFinaldf1.memory_usage().sum() \/ (1024**2)\n\ngc.collect()\nFinaldf1.memory_usage().sum() \/ (1024**2)\n\nFinaldf1['QBslope'] = deg_to_rad(convert_orientation(np.rad2deg(np.arctan2(Finaldf1['Y_std_QB'] - Finaldf1['Y_std'], Finaldf1['X_std_QB'] - Finaldf1['X_std']))))\nFinaldf1['WRslope'] = deg_to_rad(convert_orientation(np.rad2deg(np.arctan2(Finaldf1['Y_std_COpp'] - Finaldf1['Y_std'],Finaldf1['X_std_COpp'] - Finaldf1['X_std']))))\n\nFinaldf1['QBslope1'] = convert_orientation(np.rad2deg(np.arctan2(Finaldf1['Y_std_QB'] - Finaldf1['Y_std'], Finaldf1['X_std_QB'] - Finaldf1['X_std'])))\nFinaldf1['WRslope1'] = convert_orientation(np.rad2deg(np.arctan2(Finaldf1['Y_std_COpp'] - Finaldf1['Y_std'],Finaldf1['X_std_COpp'] - Finaldf1['X_std'])))\nFinaldf1['Def_Or'] = convert_orientation(np.rad2deg(Finaldf1['Orientation_std']))\nFinaldf1['Diff_QB'] = Finaldf1['QBslope1'] - Finaldf1['Def_Or']\nFinaldf1['Diff_WR'] = Finaldf1['WRslope1'] - Finaldf1['Def_Or']\n\nFinaldf1['Diff_QB'] = abs(np.where(Finaldf1['Diff_QB'] < -180,Finaldf1['Diff_QB'] + 360,Finaldf1['Diff_QB'] ))\nFinaldf1['Diff_QB'] = abs(np.where(Finaldf1['Diff_QB'] > 180,Finaldf1['Diff_QB'] - 360,Finaldf1['Diff_QB'] ))\n\nFinaldf1['Diff_WR'] = abs(np.where(Finaldf1['Diff_WR'] < -180,Finaldf1['Diff_WR'] + 360,Finaldf1['Diff_WR'] ))\nFinaldf1['Diff_WR'] = abs(np.where(Finaldf1['Diff_WR'] > 180,Finaldf1['Diff_WR'] - 360,Finaldf1['Diff_WR'] ))\n\nFinaldf1['Player_POV'] = np.where(Finaldf1['Diff_QB'] < Finaldf1['Diff_WR'],\"QB\",Finaldf1['position_COpp'])\nFinaldf1['Looking_AtQB'] = np.where(Finaldf1['Diff_QB'] < Finaldf1['Diff_WR'],1,0)\n\nFinaldf1['diffDir'] = np.absolute(Finaldf1['Dir_std'] - Finaldf1['Dir_std_COpp'])\n\nFinaldf1['disRatio'] = Finaldf1['Opp_Dist_COpp'] \/ np.sqrt((Finaldf1['X_std_COpp'] - Finaldf1['X_std_CTm'])**2 + (Finaldf1['Y_std_COpp'] - Finaldf1['Y_std_CTm'])**2)\n\nFinaldf1['Event2'] = np.where(Finaldf1['After_snap'] == 0,\"Before Snap\",\"After Snap - Before Throw\")\nFinaldf1['Event2'] = np.where((Finaldf1['After_Throw'] == 1 & (Finaldf1['After_PassArrived'] == 0)),\"Ball in the Air\", Finaldf1['Event2'])\n\nFinaldf1['EventCount'] = Finaldf1.groupby(['gameId','playId','Event2'])['Event2'].transform('count') \/ Finaldf1.groupby(['gameId','playId'])['nflId'].transform('nunique')\nFinaldf1['EventOrder'] = Finaldf1.groupby(['gameId','playId','Event2'])['frameId'].rank(ascending=True, method='dense').astype(int)\nFinaldf1['EventPct'] = Finaldf1['EventOrder'] \/ Finaldf1['EventCount']\n\nFinaldf1['Partition'] = np.where(Finaldf1['EventPct'] > (1\/2), \"2nd Phase\", \"1st Phase\")\n\nFinaldf1['Group'] = Finaldf1['Event2'] + \"-\" + Finaldf1['Partition']\n\nFinaldf1['Player_POV'] = Finaldf1['Player_POV'].astype('category')\nFinaldf1['Event2'] = Finaldf1['Event2'].astype('category')\nFinaldf1['Partition'] = Finaldf1['Partition'].astype('category')\nFinaldf1['Group'] = Finaldf1['Group'].astype('category')\n\n","5498a4d1":"!pip install ipywidgets\n!jupyter nbextension enable --py --sys-prefix widgetsnbextension\n!pip install chart_studio","96ebefe5":"import plotly.figure_factory as ff\nRoutes = ['GO','HITCH','OUT','CROSS','IN','POST','SLANT','CORNER']\n\nOffBall = Finaldf1.loc[(Finaldf1['Group'] == \"After Snap - Before Throw-1st Phase\") & (Finaldf1['position'] == \"WR\") & (Finaldf1['position_COpp'] == \"CB\") & (Finaldf1['EventOrder'] <= 15) ]\n\n\nOffBall['MaxAccel'] = OffBall.groupby(['gameId','playId','nflId','route'])['a'].transform('max')\nOffBall['MaxAccelFrame'] = np.where(OffBall['a'] == OffBall['MaxAccel'],OffBall['EventOrder'],0)\nOffBall['MaxAccelFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxAccelFrame'].transform('max')\n\nOffBall['Maxdx'] = OffBall.groupby(['gameId','playId','nflId','route'])['dx'].transform('max')\nOffBall['MaxdxFrame'] = np.where(OffBall['dx'] == OffBall['Maxdx'],OffBall['EventOrder'],0)\nOffBall['MaxdxFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxdxFrame'].transform('max')\n\nOffBall['MaxSeparation'] = OffBall.groupby(['gameId','playId','nflId','route'])['Opp_Dist_COpp'].transform('max')\nOffBall['MaxSeparationFrame'] = np.where(OffBall['Opp_Dist_COpp'] == OffBall['MaxSeparation'],OffBall['EventOrder'],0)\nOffBall['MaxSeparationFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxSeparationFrame'].transform('max')\n\nOffBall['AccelDiff'] = OffBall['a'] - OffBall['a_COpp']\nOffBall['SpeedDiff'] = OffBall['s'] - OffBall['s_COpp']\nOffBall['dxDiff'] = OffBall['dx'] - OffBall['dx_COpp']\nOffBall['dyDiff'] = OffBall['dy'] - OffBall['dy_COpp']\n\n\n\nOffBall['MaxAccelDiff'] = OffBall.groupby(['gameId','playId','nflId','route'])['AccelDiff'].transform('max')\nOffBall['MaxAccelDiffFrame'] = np.where(OffBall['AccelDiff'] == OffBall['MaxAccelDiff'],OffBall['EventOrder'],0)\nOffBall['MaxAccelDiffFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxAccelDiffFrame'].transform('max')\n\nOffBall['MaxSpeedDiff'] = OffBall.groupby(['gameId','playId','nflId','route'])['SpeedDiff'].transform('max')\nOffBall['MaxSpeedDiffFrame'] = np.where(OffBall['SpeedDiff'] == OffBall['MaxSpeedDiff'],OffBall['EventOrder'],0)\nOffBall['MaxSpeedDiffFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxSpeedDiffFrame'].transform('max')\n\nOffBall['MaxdxDiff'] = OffBall.groupby(['gameId','playId','nflId','route'])['dxDiff'].transform('max')\nOffBall['MaxdxDiffFrame'] = np.where(OffBall['dxDiff'] == OffBall['MaxdxDiff'],OffBall['EventOrder'],0)\nOffBall['MaxdxDiffFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxdxDiffFrame'].transform('max')\n\nOffBall['MaxdyDiff'] = OffBall.groupby(['gameId','playId','nflId','route'])['dyDiff'].transform('max')\nOffBall['MaxdyDiffFrame'] = np.where(OffBall['dyDiff'] == OffBall['MaxdyDiff'],OffBall['EventOrder'],0)\nOffBall['MaxdyDiffFrame'] = OffBall.groupby(['gameId','playId','nflId','route'])['MaxdyDiffFrame'].transform('max')\n\nOffBall['CatchSuccess'] = np.where(OffBall['passResult'] == \"C\",0,1)\nOffBall['YardsSuccess'] = np.where(OffBall['offensePlayResult'] > 0,0,1)","eeb29272":"MAAE = OffBall.groupby(['week','gameId','playId','nflId','displayName','PlayerTeam','closestOpp_Id','route','Targeted','offensePlayResult','passResult','YardLine_std','down']).agg({'Opp_Dist_COpp':[('start', 'first'),('last', 'last'), ('mean', 'mean'), ('count', 'count'),('max','max')],\n\n                                                                                            'MPH':[('max', 'max'),('var', 'var'),('mean', 'mean'),],\n                                                                                            'a':[('max', 'max'),('var', 'var'),('mean', 'mean')],\n                                                                                            'dx':[('mean', 'mean'),('var','var'),('max','max')],\n                                                                                            'dy':[('mean', 'mean'),('var','var'),('max','max')],\n                                                                                            'dx_COpp':[('first', 'first'),('mean', 'mean'),('max','max')],\n                                                                                            'dy_COpp':[('first', 'first'),('mean', 'mean'),('max','max')],\n                                                                                            'a_COpp':[('mean', 'mean'),('max','max')],\n                                                                                            'MaxAccelFrame':[('max', 'max')],\n                                                                                            'epa':[('mean', 'mean')],\n                                                                                            'MaxdxFrame':[('max', 'max')],\n                                                                                            'MaxSeparationFrame':[('max', 'max')],\n                                                                                            'MaxAccelDiffFrame':[('max', 'max')],\n                                                                                            'MaxSpeedDiffFrame':[('max', 'max')],\n                                                                                            'MaxdxDiffFrame':[('max', 'max')],\n                                                                                            'MaxdyDiffFrame':[('max', 'max')],\n                                                                                            'X_std':[('start', 'first'),('last', 'last')]}).reset_index(drop=False)\nMAAE.columns = MAAE.columns.map('_'.join)\nMAAE = MAAE.loc[MAAE['Opp_Dist_COpp_start'] < 3]\nMAAE['count'] = MAAE.groupby(['nflId_','route_'])['displayName_'].transform('count')\n\n\nMAAE['dx_dff'] = MAAE['dx_mean'] - MAAE['dx_COpp_mean']\nMAAE['dy_dff'] = MAAE['dy_mean'] - MAAE['dx_COpp_mean']\nMAAE['a_dff'] = MAAE['a_mean'] - MAAE['a_COpp_mean']\n\n\nMAAE['MaxAccelbyFrame'] = MAAE['a_max'] \/ MAAE['MaxAccelFrame_max']\nMAAE['MaxdxbyFrame'] = MAAE['dx_max'] \/ MAAE['MaxdxFrame_max']\nMAAE['MaxSeparationbyFrame'] = MAAE['Opp_Dist_COpp_max'] \/ MAAE['MaxSeparationFrame_max']\n\n\n\nMAAE['MovingForward'] = MAAE['X_std_last'] - MAAE['X_std_start']\n\nMAAE['Total'] = MAAE.groupby(['gameId_','playId_','displayName_'])['Opp_Dist_COpp_count'].transform('sum')\nMAAE['FramePct'] = MAAE['Opp_Dist_COpp_count'] \/ MAAE['Total']\n\nMAAE = MAAE.query('MPH_max > 5 & Total >= 10 & Total <= 15 & FramePct == 1 & Opp_Dist_COpp_start <= 3 & Targeted_ == 1 & MovingForward > -1 & dx_COpp_first < .2 & Opp_Dist_COpp_last < 6').reset_index(drop=True)\n\nCols = ['Opp_Dist_COpp_start', 'Opp_Dist_COpp_last', 'Opp_Dist_COpp_mean',  'Opp_Dist_COpp_max', 'MPH_max', 'MPH_var', 'MPH_mean', 'a_max', 'a_var', 'dx_mean', 'dx_var', 'dx_max','dy_mean', 'dy_var', 'dy_max', 'dx_COpp_first','dx_COpp_mean', 'dx_COpp_max', 'MaxAccelFrame_max', 'MaxdxFrame_max', 'MaxSeparationFrame_max','dx_dff','dy_dff','a_dff','MaxAccelbyFrame','MaxdxbyFrame','MaxSeparationbyFrame','MaxAccelDiffFrame_max','MaxSpeedDiffFrame_max','MaxdxDiffFrame_max','MaxdyDiffFrame_max']\n\nfor col in Cols:\n    MAAE[col + \"_AE\"] = MAAE[col] - MAAE.groupby(['nflId_','route_'])[col].transform('mean')\n\n\n\nMAAE['PlaySuccess'] = np.where(MAAE['offensePlayResult_'] > 0, 0,1)\nMAAE['DefenderSuccess'] = np.where(MAAE['passResult_'] == \"C\",0,1)","35c21ad8":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split, RepeatedStratifiedKFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, roc_auc_score, confusion_matrix, precision_recall_curve, auc\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom scipy.stats import chi2_contingency\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\n\n\n\nCols = ['dx_max_AE','a_max_AE', 'MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE','MaxSeparationFrame_max_AE']\n\nX = MAAE[Cols]\n\ny = MAAE['DefenderSuccess']\n\n\nX[Cols] = SimpleImputer().fit_transform(X[Cols])\nX[Cols] = StandardScaler().fit_transform(X[Cols])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42, stratify=y)","8e4d6014":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,auc,roc_auc_score,confusion_matrix,accuracy_score,f1_score\nfrom sklearn.linear_model import RidgeClassifier\n\nmodel = LogisticRegression()\nsolvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l2']\nc_values = [100, 10, 1.0, 0.1, 0.01]\n# define grid search\ngrid = dict(solver=solvers,penalty=penalty,C=c_values)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=5, random_state=65)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_clf_acc = grid_search.fit(X, y)\n\nprint(\"Best: %f using %s\" % (grid_clf_acc.best_score_, grid_clf_acc.best_params_))\n\n#Predict values based on new parameters\ny_pred_acc = grid_clf_acc.predict(X_test)\ny_pred_acctrain = grid_clf_acc.predict(X_train)\n# New Model Evaluation metrics \nprint('Train Accuracy Score : ' + str(accuracy_score(y_train,y_pred_acctrain)))\nprint('-----------------------------------------------')\nprint('Test Accuracy Score : ' + str(accuracy_score(y_test,y_pred_acc)))\n\n\nMAAE['BasicSuccess_Prob'] = grid_clf_acc.predict_proba(X)[:,1]","089f744b":"from sklearn.preprocessing import MinMaxScaler\n\nPressScore = OffBall.groupby(['week','gameId','playId','nflId','displayName','PlayerTeam','closestOpp_Id','route','Targeted','offensePlayResult','passResult','YardLine_std','down']).agg({'Opp_Dist_COpp':[('start', 'first'),('last', 'last'), ('mean', 'mean'), ('count', 'count'),('max','max')],\n                                                                                            'MPH':[('max', 'max'),('var', 'var'),('mean', 'mean'),],\n                                                                                            'a':[('max', 'max'),('var', 'var'),('mean', 'mean')],\n                                                                                            'dx':[('mean', 'mean'),('var','var'),('max','max')],\n                                                                                            'dy':[('mean', 'mean'),('var','var'),('max','max')],\n                                                                                            'dx_COpp':[('first', 'first'),('mean', 'mean'),('max','max')],\n                                                                                            'dy_COpp':[('first', 'first'),('mean', 'mean'),('max','max')],\n                                                                                            'a_COpp':[('mean', 'mean'),('max','max')],\n                                                                                            'MaxAccelFrame':[('max', 'max')],\n                                                                                            'epa':[('mean', 'mean')],\n                                                                                            'MaxdxFrame':[('max', 'max')],\n                                                                                            'MaxSeparationFrame':[('max', 'max')],\n                                                                                            'MaxAccelDiffFrame':[('max', 'max')],\n                                                                                            'MaxSpeedDiffFrame':[('max', 'max')],\n                                                                                            'MaxdxDiffFrame':[('max', 'max')],\n                                                                                            'MaxdyDiffFrame':[('max', 'max')],\n                                                                                            'X_std':[('start', 'first'),('last', 'last')]}).reset_index(drop=False)\nPressScore.columns = PressScore.columns.map('_'.join)\nPressScore = PressScore.loc[PressScore['Opp_Dist_COpp_start'] < 3]\nPressScore['count'] = PressScore.groupby(['nflId_','route_'])['displayName_'].transform('count')\n\n\nPressScore['dx_dff'] = PressScore['dx_mean'] - PressScore['dx_COpp_mean']\nPressScore['dy_dff'] = PressScore['dy_mean'] - PressScore['dx_COpp_mean']\nPressScore['a_dff'] = PressScore['a_mean'] - PressScore['a_COpp_mean']\n\n\nPressScore['MaxAccelbyFrame'] = PressScore['a_max'] \/ PressScore['MaxAccelFrame_max']\nPressScore['MaxdxbyFrame'] = PressScore['dx_max'] \/ PressScore['MaxdxFrame_max']\nPressScore['MaxSeparationbyFrame'] = PressScore['Opp_Dist_COpp_max'] \/ PressScore['MaxSeparationFrame_max']\n\n#PressScore['Press_Success'] = np.where((PressScore['PressScore'] < 0) & (PressScore['DistCOpp_AE'] < 0),1,0)\n\n\n\nPressScore['Total'] = PressScore.groupby(['gameId_','playId_','displayName_'])['Opp_Dist_COpp_count'].transform('sum')\nPressScore['FramePct'] = PressScore['Opp_Dist_COpp_count'] \/ PressScore['Total']\n\nPressScore['PlaySuccess'] = np.where(PressScore['offensePlayResult_'] > 0, 0,1)\nPressScore['DefenderSuccess'] = np.where(PressScore['passResult_'] == \"C\",0,1)\n\n\nPressScore['MovingForward'] = PressScore['X_std_last'] - PressScore['X_std_start']\n\n\nPressScore1 = PressScore.query('MPH_max > 5 & Total >= 10 & Total <= 15 & FramePct == 1 & Opp_Dist_COpp_start <= 3 & MovingForward > -1 & dx_COpp_first < .2 & Opp_Dist_COpp_last < 6 & Targeted_ == 1').reset_index(drop=True)\n\n\nCols = ['Opp_Dist_COpp_start', 'Opp_Dist_COpp_last', 'Opp_Dist_COpp_mean',  'Opp_Dist_COpp_max', 'MPH_max', 'MPH_var', 'MPH_mean', 'a_max', 'a_var', 'dx_mean', 'dx_var', 'dx_max','dy_mean', 'dy_var', 'dy_max', 'dx_COpp_first', 'dx_COpp_mean', 'dx_COpp_max', 'MaxAccelFrame_max', 'MaxdxFrame_max', 'MaxSeparationFrame_max','dx_dff','dy_dff','a_dff','MaxAccelbyFrame','MaxdxbyFrame','MaxSeparationbyFrame','MaxAccelDiffFrame_max','MaxSpeedDiffFrame_max','MaxdxDiffFrame_max','MaxdyDiffFrame_max']\n\nfor col in Cols:\n    PressScore1[col + \"_AE\"] = PressScore1[col] - PressScore1.groupby(['nflId_','route_'])[col].transform('mean')\n\n\n\n\n\n\nCols =['dx_max_AE', 'a_max_AE','MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE','MaxSeparationFrame_max_AE']\n\n\nX = PressScore1[Cols]\n#X = pd.get_dummies(X)\n\n\n#Cols = ['MaxdxFrame_max', 'MaxSeparationFrame_max', 'MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE']\n\ny = PressScore1['DefenderSuccess']\n\n\nX[Cols] = SimpleImputer().fit_transform(X[Cols])\nX[Cols] = StandardScaler().fit_transform(X[Cols])\n\n\n\nPressScore1['PressScore'] = grid_clf_acc.predict_proba(X)[:,1]\nPressScore1['Press_Success'] = grid_clf_acc.predict(X)\nPressScore1[['PressScore']] = MinMaxScaler().fit_transform(PressScore1[['PressScore']])\nPressScore1['PressScore'] = PressScore1['PressScore']*100","7eccebc8":"import chart_studio.plotly as py\nimport plotly.figure_factory as ff\nimport math\n\npd.options.display.float_format = '{:.4f}'.format\n\nPress = PressScore1.filter(['gameId_','playId_','nflId_','dx_max_AE','dx_var_AE','dy_var_AE', 'a_max_AE','Opp_Dist_COpp_last_AE', 'MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE','MaxSeparationFrame_max_AE','PressScore','Press_Success'], axis=1)\nPress['Code'] = Press['gameId_'].astype(str) + \"-\" + Press['playId_'].astype(str) + \"-\" + Press['nflId_'].astype(str)\nPress = Press.set_index('Code')\nPress = Press.loc[~Press.index.duplicated(keep='first')]\n\n\n\ndef highlight_max(s):\n    is_max = s == s.max()\n    return ['background-color: green' if v else '' for v in is_max]\n\n\n\n\nOffBall['InitialDefDis'] = OffBall.groupby(['playId','nflId','closestOpp_Id'])['Opp_Dist_COpp'].transform('first')\nOffBall['Press'] = np.where(OffBall['InitialDefDis'] < 3, 1,0)\n#df = OffBall.query('displayName == \"Mike Evans\" & gameId == 2018110402 & playId ==558\t').head(10).filter(['playId','displayName','route','EventOrder','a'],axis=1).rename(columns={'EventOrder':'Frames'})\n#df = OffBall.query('displayName == \"Michael Thomas\" & gameId == 2018102101 & playId == 2235\t').head(10).filter(['playId','displayName','route','EventOrder','a'],axis=1).rename(columns={'EventOrder':'Frames'})\ndf = OffBall.query('displayName == \"Michael Thomas\" & gameId == 2018110409 & playId == 3891\t| displayName == \"Mike Evans\" & gameId == 2018110402 & playId == 558 | displayName == \"Tyreek Hill\" & gameId == 2018100705 & playId == 395 | displayName == \"Pierre Garcon\" & gameId == 2018101500 & playId == 1249| displayName == \"Michael Crabtree\" & gameId == 2018102101 & playId == 3444 | displayName == \"Devin Funchess\" & gameId == 2018121700 & playId == 2048 | displayName == \"Davante Adams\" & gameId == 2018102810 & playId == 412| displayName == \"Mike Evans\" & gameId == 2018090906 & playId == 3051 |  displayName == \"Tyreek Hill\" & gameId == 2018091605 & playId == 2430 ').filter(['gameId','playId','nflId','displayName','route','EventOrder','a','dx','Opp_Dist_COpp'],axis=1)#.rename(columns={'EventOrder':'Frames'})\n\n#df = OffBall.query('displayName == \"Mike Evans\" & gameId == 2018110402 & playId == 558').filter(['playId','displayName','route','EventOrder','a','dx'],axis=1)#.rename(columns={'EventOrder':'Frames'})\n\ndf.columns = ['gameId','playId','nflId','Name','route','Frames','Accel','Velocity','Separation']\n\ndf[\"Accel\"] = df['Accel'].map(lambda x: np.round(x,3))\ndf[\"Velocity\"] = df['Velocity'].map(lambda x: np.round(x,3))\ndf[\"Separation\"] = df['Separation'].map(lambda x: np.round(x,3))\n\ndf['AccelMax'] = OffBall.groupby(['displayName','route','Press'])['MaxAccel'].transform('mean')\ndf[\"AccelMax\"] = df['AccelMax'].map(lambda x: np.round(x,3))\n\ndf['dxMax'] = OffBall.groupby(['displayName','route','Press'])['Maxdx'].transform('mean')\ndf[\"dxMax\"] = df['dxMax'].map(lambda x: np.round(x,3))\n\ndf['MaxSeparation'] = OffBall.groupby(['displayName','route','Press'])['MaxSeparation'].transform('mean')\ndf[\"MaxSeparation\"] = df['MaxSeparation'].map(lambda x: np.round(x,3))\n\ndf['MaxSeparationFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxSeparationFrame'].transform('mean')\ndf[\"MaxSeparationFrameAvg\"] = df['MaxSeparationFrameAvg'].map(lambda x: np.round(x,3))\n\ndf['MaxdxFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxdxFrame'].transform('mean')\ndf[\"MaxdxFrameAvg\"] = df['MaxdxFrameAvg'].map(lambda x: np.round(x,3))\n\n\ndf['MaxAccelFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxAccelFrame'].transform('mean')\ndf[\"MaxAccelFrameAvg\"] = df['MaxAccelFrameAvg'].map(lambda x: np.round(x,3))\n\ndf['Code'] = df['gameId'].astype(str) + \"-\" + df['playId'].astype(str) + \"-\" + df['nflId'].astype(str)\n\ndf[\"Press Score\"] = df.Code.map(np.round(Press[\"PressScore\"],3))\n\ndel Press\ngc.collect()\n\n\ndf['Matchup'] = np.where((df['Name'] == \"Michael Thomas\") & (df['gameId'] == 2018110409) & (df['playId'] == 3891), \"Michael Thomas vs. Marcus Peters\", 0)\ndf['Matchup'] = np.where((df['Name'] == \"Mike Evans\") & (df['gameId'] == 2018110402) & (df['playId'] == 558), \"Mike Evans vs. James Bradberry\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Tyreek Hill\") & (df['gameId'] == 2018100705) & (df['playId'] == 395), \"Tyreek Hill vs. Jalen Ramsey\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Pierre Garcon\") & (df['gameId'] == 2018101500) & (df['playId'] == 1249), \"Pierre Garcon vs. Kevin King\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Michael Crabtree\") & (df['gameId'] == 2018102101) & (df['playId'] == 3444), \"Michael Crabtree vs. Ken Crawley\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Devin Funchess\") & (df['gameId'] == 2018121700) & (df['playId'] == 2048), \"Devin Funchess vs. Eli Apple\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Davante Adams\") & (df['gameId'] == 2018102810) & (df['playId'] == 412), \"Davante Adams vs. Marcus Peters\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Mike Evans\") & (df['gameId'] == 2018090906) & (df['playId'] == 3051), \"Mike Evans vs. Marshon Lattimore\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Tyreek Hill\") & (df['gameId'] == 2018091605) & (df['playId'] == 2430), \"Tyreek Hill vs. Artie Burns\", df['Matchup'])\n\n\ndf['link'] = np.where(df[\"Matchup\"] == \"Tyreek Hill vs. Jalen Ramsey\", \"https:\/\/media1.giphy.com\/media\/703yS4wdiLvJpzHion\/giphy.gif\", 0)\ndf['link'] = np.where(df[\"Matchup\"] == \"Michael Thomas vs. Marcus Peters\", \"https:\/\/media4.giphy.com\/media\/cXgBT9FPpHtGSxC4gY\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Mike Evans vs. James Bradberry\", \"https:\/\/images.actionnetwork.com\/blog\/2018\/11\/brad.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Pierre Garcon vs. Kevin King\", \"https:\/\/media3.giphy.com\/media\/Xdrtq0QgTiVGRBV1LH\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Michael Crabtree vs. Ken Crawley\", \"https:\/\/media0.giphy.com\/media\/CqO673JlHLKdnnEoRp\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Devin Funchess vs. Eli Apple\", \"https:\/\/media1.giphy.com\/media\/n8KgzfQQCHhFxbJUO5\/giphy.gif\", df['link'])\n\ndf['link'] = np.where(df[\"Matchup\"] == \"Davante Adams vs. Marcus Peters\", \"https:\/\/media2.giphy.com\/media\/eiWqmciwHLKiBdLmXT\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Mike Evans vs. Marshon Lattimore\", \"https:\/\/media2.giphy.com\/media\/Nwuo3dpeddNuxZh7e2\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Tyreek Hill vs. Artie Burns\", \"https:\/\/media1.giphy.com\/media\/a0yDA3nCY0jV2vh3EJ\/giphy.gif\", df['link'])","28e551b3":"import os\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nfrom skimage import io\n\nimport pandas as pd\nimport re\nfrom PIL import Image\nfrom IPython.core.display import Image\n\n#Names = sorted(set(df[\"Matchup\"]))\n\n\n\ndef Allplot(name):\n    Names = sorted(set(df[\"Matchup\"]))\n\n\n    play = df[(df[\"Matchup\"]==name)]\n\n    default = name\n\n    plot_names = []\n    use_names = []\n    buttons=[]\n    links = {}\n\n    fig = make_subplots(\n    rows=5, cols=1,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    x_title= \"Frame\",\n    specs=[[{\"type\": \"table\"}],\n            [{\"type\": \"table\"}],\n            [{\"type\": \"scatter\"}],\n            [{\"type\": \"scatter\"}],\n            [{\"type\": \"scatter\"}]],\n    subplot_titles=(\"Press Score\",\"Data\",\"Velocity\", \"Acceleration\",\"Separation\"))\n\n\n\n    fig.add_trace(\n        go.Scatter(\n            x=play[\"Frames\"],\n            y=play[\"Accel\"],\n            mode=\"lines\",\n            name=\"Acceleration\"),\n        row=4, col=1\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            x=play[\"Frames\"],\n            y=play[\"AccelMax\"],\n            mode=\"lines\",\n            name=\"Max Acceleration\", line_width=3, opacity=1, line_dash=\"dot\",line=dict(color='red', width=3)),\n        row=4, col=1\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            x=[play['MaxAccelFrameAvg'].iloc[0], play['MaxAccelFrameAvg'].iloc[0]],\n            y=[0,play['Accel'].max()+4],\n            mode=\"lines\",\n            text='Avg. Max Acceleration Frame',\n            name=\"Avg. Max Acceleration Frame\",visible=(name==default), line_width=3, opacity=1, line_dash=\"dot\",line=dict(color='blue', width=4)\n        ),\n        row=4, col=1\n    )\n\n\n\n    fig.add_trace(\n        go.Scatter(\n            x=play[\"Frames\"],\n            y=play[\"Velocity\"],\n            mode=\"lines\",\n            name=\"Velocity\"),\n        row=3, col=1\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            x=play[\"Frames\"],\n            y=play[\"dxMax\"],\n            mode=\"lines\",\n            name=\"Max Velocity\", line_width=3, opacity=1, line_dash=\"dot\",line=dict(color='red', width=3)),\n        row=3, col=1\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            x=[play['MaxdxFrameAvg'].iloc[0], play['MaxdxFrameAvg'].iloc[0]],\n            y=[play['Velocity'].min(),play['Velocity'].max()+4],\n            mode=\"lines\",\n            text='Avg. Max Velocity Frame',\n            name=\"Avg. Max Velocity Frame\",visible=(name==default), line_width=3, opacity=1, line_dash=\"dot\",line=dict(color='blue', width=4)\n        ),\n        row=3, col=1\n    )\n\n    fig.add_trace(\n        go.Scatter(\n            x=play[\"Frames\"],\n            y=play[\"Separation\"],\n            mode=\"lines\",\n            name=\"Separation\"),\n        row=5, col=1\n    )\n\n\n    fig.add_trace(\n        go.Scatter(\n            x=[play['MaxSeparationFrameAvg'].iloc[0], play['MaxSeparationFrameAvg'].iloc[0]],\n            y=[play['Separation'].min(),play['Separation'].max()+4],\n            mode=\"lines\",\n            text='Avg. Max Separation Frame',\n            name=\"Avg. Max Separation Frame\",visible=(name==default), line_width=3, opacity=1, line_dash=\"dot\",line=dict(color='blue', width=4)\n        ),\n        row=5, col=1\n    )\n\n\n\n    fig.add_trace(\n        go.Table(\n            header=dict(\n                values=[\"playId\", \"Name\", \"route\",\n                        \"Frames\", \"Accel\", \"Velocity\",\n                        \"Separation\"],\n                font=dict(size=10),\n                align=\"left\"\n            ),\n            cells=dict(\n                values=[play[k].tolist() for k in [\"playId\", \"Name\", \"route\",\n                        \"Frames\", \"Accel\", \"Velocity\",\n                        \"Separation\"]],\n                align = \"left\")\n        ),\n        row=2, col=1\n    )\n\n    fig.add_trace(\n        go.Table(\n            header=dict(\n                values=[\"Matchup\",\"Press Score\"],\n                font=dict(size=10),\n                align=\"left\"\n            ),\n            cells=dict(\n                values=[play[k].iloc[0] for k in [\"Matchup\",\"Press Score\"]],\n                line_color='darkslategray',\n                fill=dict(color=['white', 'paleturquoise']),\n                align=['left', 'center'],\n                font_size=18,\n                height=55)\n        ),\n        row=1, col=1\n    )\n\n    link = \"'<img src =\" + play['link'].iloc[0] + \">'\"\n    links.setdefault(name,[]).append(link)\n\n    fig.update_layout(\n        height=1000,\n        width=700,\n        showlegend=False,\n    #    title_text= display(HTML(link)),\n        margin = {'t':75, 'l':75})\n    \n    plot_names.extend([name]*10)\n\n\n    fig.update_layout(showlegend=False,title=display(HTML(links[name][0])))\n    return fig.show()","cea7039c":"Allplot('Mike Evans vs. James Bradberry')","98b56a1f":"Allplot('Mike Evans vs. Marshon Lattimore')","ff7aad9f":"CBs = Finaldf1.filter(['displayName','nflId','position','Targeted','playId','epa'], axis=1).query('position == \"CB\" & Targeted == 1')\nCBs = CBs.groupby(['displayName','nflId','position','playId'])['epa'].mean().reset_index()\nCBs = CBs.groupby(['displayName','nflId','position'])['epa'].mean().reset_index()\nCBs = CBs.set_index('nflId')\nCBs = CBs.loc[~CBs.index.duplicated(keep='first')]","493ae225":"#var1 = 'Press_Success'\nvar1 = 'PressScore'\nvar2 = 'DefenderSuccess'\n\nMAAE1 = PressScore1.groupby(['closestOpp_Id_']).agg({var1:[('mean', 'mean'),('count','count')],\n                                                         var2:[('mean', 'mean')],}).reset_index(drop=False)\nMAAE1.columns = MAAE1.columns.map('_'.join)\n\nMAAE1.columns = MAAE1.columns.str.replace(var2 +'_mean' , var2)\nMAAE1.columns = MAAE1.columns.str.replace(var1 + '_mean' , var1)\nMAAE1.columns = MAAE1.columns.str.replace(var1 + '_count' , 'count')\nMAAE1.columns = MAAE1.columns.str.replace('closestOpp_Id__' , 'closestOpp_Id_')\n\n#MAAE1[['mean']] = MinMaxScaler().fit_transform(MAAE1[['mean']])\nMAAE1[[var1]] = MinMaxScaler().fit_transform(MAAE1[[var1]])*100\nMAAE1['displayName'] = MAAE1.closestOpp_Id_.map(CBs['displayName'])\n#MAAE1['epa'] = MAAE1.closestOpp_Id_.map(CBs['epa'])\nMAAE1 = MAAE1.sort_values(by=[var1], ascending=False).query('count > 12')\nMAAE1.drop(['count'], axis=1, inplace=True)\n\n\nprint(\"Total players with more than 12 press coverage targeted snaps: \", len(MAAE1))\n\nprint(\"Top 10 Press Score\")\ndisplay(HTML(MAAE1.head(10).to_html()))\n\nfig, ax = plt.subplots(figsize=(15,10))\nslope, intercept, r_value, pv, se = stats.linregress(MAAE1[var1], MAAE1[var2])\n\nprint(var1 + \" vs. \" + var2, \" Correlation:\", r_value)\n\nsns.regplot(MAAE1[var1], MAAE1[var2], line_kws={'label':'$y=%3.7s*x+%3.7s$'%(slope, intercept)})\nplt.xticks(fontsize=15)\nplt.xlabel(\"Average \" + var1)\nplt.legend()\nplt.yticks(fontsize=15)\nplt.ylabel(\"Average \" + var2)","340c773d":"#var1 = 'Press_Success'\nvar1 = 'PressScore'\nvar2 = 'epa_mean'\n\nMAAE1 = PressScore1.groupby(['closestOpp_Id_']).agg({var1:[('mean', 'mean'),('count','count')],\n                                                         var2:[('mean', 'mean')],}).reset_index(drop=False)\nMAAE1.columns = MAAE1.columns.map('_'.join)\n\nMAAE1.columns = MAAE1.columns.str.replace(var2 +'_mean' , var2)\nMAAE1.columns = MAAE1.columns.str.replace(var1 + '_mean' , var1)\nMAAE1.columns = MAAE1.columns.str.replace(var1 + '_count' , 'count')\nMAAE1.columns = MAAE1.columns.str.replace('closestOpp_Id__' , 'closestOpp_Id_')\n\n#MAAE1[['mean']] = MinMaxScaler().fit_transform(MAAE1[['mean']])\nMAAE1[[var1]] = MinMaxScaler().fit_transform(MAAE1[[var1]])*100\nMAAE1['displayName'] = MAAE1.closestOpp_Id_.map(CBs['displayName'])\n#MAAE1['epa'] = MAAE1.closestOpp_Id_.map(CBs['epa'])\nMAAE1 = MAAE1.sort_values(by=[var1], ascending=False).query('count > 12')\nMAAE1.drop(['count'], axis=1, inplace=True)\n\n\nprint(len(MAAE1))\ndisplay(HTML(MAAE1.head(10).to_html()))\n\nfig, ax = plt.subplots(figsize=(15,10))\nslope, intercept, r_value, pv, se = stats.linregress(MAAE1[var1], MAAE1[var2])\n\nprint(var1 + \" vs. \" + var2, \" Correlation:\", r_value)\n\nsns.regplot(MAAE1[var1], MAAE1[var2], line_kws={'label':'$y=%3.7s*x+%3.7s$'%(slope, intercept)})\nplt.xticks(fontsize=15)\nplt.xlabel(\"Average \" + var1)\nplt.legend()\nplt.yticks(fontsize=15)\nplt.ylabel(\"Average \" + var2)","2c5c9a1a":"PressScore1 = PressScore.query('MPH_max > 5 & Total >= 10 & Total <= 15 & FramePct == 1 & Opp_Dist_COpp_start <= 3 & MovingForward > -1 & dx_COpp_first < .2 & Opp_Dist_COpp_last < 6 & route_ != \"SCREEN\"').reset_index(drop=True)\n\n\n\n\n\nCols = ['Opp_Dist_COpp_start', 'Opp_Dist_COpp_last', 'Opp_Dist_COpp_mean',  'Opp_Dist_COpp_max', 'MPH_max', 'MPH_var', 'MPH_mean', 'a_max', 'a_var', 'dx_mean', 'dx_var', 'dx_max','dy_mean', 'dy_var', 'dy_max', 'dx_COpp_first', 'dx_COpp_mean', 'dx_COpp_max', 'MaxAccelFrame_max', 'MaxdxFrame_max', 'MaxSeparationFrame_max','dx_dff','dy_dff','a_dff','MaxAccelbyFrame','MaxdxbyFrame','MaxSeparationbyFrame','MaxAccelDiffFrame_max','MaxSpeedDiffFrame_max','MaxdxDiffFrame_max','MaxdyDiffFrame_max']\n\nfor col in Cols:\n    PressScore1[col + \"_AE\"] = PressScore1[col] - PressScore1.groupby(['nflId_','route_'])[col].transform('mean')\n\nCols = ['dx_max_AE','a_max_AE','MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE','MaxSeparationFrame_max_AE']\n\n\nX = PressScore1[Cols]\n#X = pd.get_dummies(X)\n\n\n#Cols = ['MaxdxFrame_max', 'MaxSeparationFrame_max', 'MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE']\n\ny = PressScore1['DefenderSuccess']\n\n\nX[Cols] = SimpleImputer().fit_transform(X[Cols])\nX[Cols] = StandardScaler().fit_transform(X[Cols])\n\n\n\nPressScore1['PressScore'] = grid_clf_acc.predict_proba(X)[:,1]\nPressScore1['Press_Success'] = grid_clf_acc.predict(X)\nPressScore1[['PressScore']] = MinMaxScaler().fit_transform(PressScore1[['PressScore']])\nPressScore1['PressScore'] = PressScore1['PressScore']*100\n\nPress = PressScore1.filter(['gameId_','playId_','nflId_','dx_max_AE','dx_var_AE','dy_var_AE', 'a_max_AE','Opp_Dist_COpp_last_AE', 'MaxAccelFrame_max_AE',  'MaxdxFrame_max_AE','MaxSeparationFrame_max_AE','PressScore','Press_Success'], axis=1)\nPress['Code'] = Press['gameId_'].astype(str) + \"-\" + Press['playId_'].astype(str) + \"-\" + Press['nflId_'].astype(str)\nPress = Press.set_index('Code')\nPress = Press.loc[~Press.index.duplicated(keep='first')]\n\nOffBall['InitialDefDis'] = OffBall.groupby(['playId','nflId','closestOpp_Id'])['Opp_Dist_COpp'].transform('first')\nOffBall['Press'] = np.where(OffBall['InitialDefDis'] < 3, 1,0)\nOffBall.query('displayName == \"Mike Evans\"')\n\n\n#df = OffBall.query('displayName == \"Mike Evans\" & gameId == 2018110402 & playId ==558\t').head(10).filter(['playId','displayName','route','EventOrder','a'],axis=1).rename(columns={'EventOrder':'Frames'})\n#df = OffBall.query('displayName == \"Michael Thomas\" & gameId == 2018102101 & playId == 2235\t').head(10).filter(['playId','displayName','route','EventOrder','a'],axis=1).rename(columns={'EventOrder':'Frames'})\ndf = OffBall.query('displayName == \"Michael Thomas\" & gameId == 2018110409 & playId == 3891\t| displayName == \"Mike Evans\" & gameId == 2018110402 & playId == 558 | displayName == \"Tyreek Hill\" & gameId == 2018100705 & playId == 395 | displayName == \"Pierre Garcon\" & gameId == 2018101500 & playId == 1249| displayName == \"Michael Crabtree\" & gameId == 2018102101 & playId == 3444 | displayName == \"Devin Funchess\" & gameId == 2018121700 & playId == 2048 | displayName == \"Davante Adams\" & gameId == 2018102810 & playId == 412| displayName == \"Mike Evans\" & gameId == 2018090906 & playId == 3051 |  displayName == \"Tyreek Hill\" & gameId == 2018091605 & playId == 2430 ').filter(['gameId','playId','nflId','displayName','route','EventOrder','a','dx','Opp_Dist_COpp'],axis=1)#.rename(columns={'EventOrder':'Frames'})\n\n#df = OffBall.query('displayName == \"Mike Evans\" & gameId == 2018110402 & playId == 558').filter(['playId','displayName','route','EventOrder','a','dx'],axis=1)#.rename(columns={'EventOrder':'Frames'})\n\ndf.columns = ['gameId','playId','nflId','Name','route','Frames','Accel','Velocity','Separation']\n\ndf[\"Accel\"] = df['Accel'].map(lambda x: np.round(x,3))\ndf[\"Velocity\"] = df['Velocity'].map(lambda x: np.round(x,3))\ndf[\"Separation\"] = df['Separation'].map(lambda x: np.round(x,3))\n\ndf['AccelMax'] = OffBall.groupby(['displayName','route','Press'])['MaxAccel'].transform('mean')\ndf[\"AccelMax\"] = df['AccelMax'].map(lambda x: np.round(x,3))\n\ndf['dxMax'] = OffBall.groupby(['displayName','route','Press'])['Maxdx'].transform('mean')\ndf[\"dxMax\"] = df['dxMax'].map(lambda x: np.round(x,3))\n\ndf['MaxSeparation'] = OffBall.groupby(['displayName','route','Press'])['MaxSeparation'].transform('mean')\ndf[\"MaxSeparation\"] = df['MaxSeparation'].map(lambda x: np.round(x,3))\n\ndf['MaxSeparationFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxSeparationFrame'].transform('mean')\ndf[\"MaxSeparationFrameAvg\"] = df['MaxSeparationFrameAvg'].map(lambda x: np.round(x,3))\n\ndf['MaxdxFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxdxFrame'].transform('mean')\ndf[\"MaxdxFrameAvg\"] = df['MaxdxFrameAvg'].map(lambda x: np.round(x,3))\n\n\ndf['MaxAccelFrameAvg'] = OffBall.groupby(['displayName','route','Press'])['MaxAccelFrame'].transform('mean')\ndf[\"MaxAccelFrameAvg\"] = df['MaxAccelFrameAvg'].map(lambda x: np.round(x,3))\n\ndf['Code'] = df['gameId'].astype(str) + \"-\" + df['playId'].astype(str) + \"-\" + df['nflId'].astype(str)\n\ndf[\"Press Score\"] = df.Code.map(np.round(Press[\"PressScore\"],3))\n\n\n\ndf['Matchup'] = np.where((df['Name'] == \"Michael Thomas\") & (df['gameId'] == 2018110409) & (df['playId'] == 3891), \"Michael Thomas vs. Marcus Peters\", 0)\ndf['Matchup'] = np.where((df['Name'] == \"Pierre Garcon\") & (df['gameId'] == 2018101500) & (df['playId'] == 1249), \"Pierre Garcon vs. Kevin King\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Michael Crabtree\") & (df['gameId'] == 2018102101) & (df['playId'] == 3444), \"Michael Crabtree vs. Ken Crawley\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Devin Funchess\") & (df['gameId'] == 2018121700) & (df['playId'] == 2048), \"Devin Funchess vs. Eli Apple\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Davante Adams\") & (df['gameId'] == 2018102810) & (df['playId'] == 412), \"Davante Adams vs. Marcus Peters\", df['Matchup'])\ndf['Matchup'] = np.where((df['Name'] == \"Tyreek Hill\") & (df['gameId'] == 2018091605) & (df['playId'] == 2430), \"Tyreek Hill vs. Artie Burns\", df['Matchup'])\n\n\ndf['link'] = np.where(df[\"Matchup\"] == \"Michael Thomas vs. Marcus Peters\", \"https:\/\/media4.giphy.com\/media\/cXgBT9FPpHtGSxC4gY\/giphy.gif\", 0)\ndf['link'] = np.where(df[\"Matchup\"] == \"Pierre Garcon vs. Kevin King\", \"https:\/\/media3.giphy.com\/media\/Xdrtq0QgTiVGRBV1LH\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Michael Crabtree vs. Ken Crawley\", \"https:\/\/media0.giphy.com\/media\/CqO673JlHLKdnnEoRp\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Devin Funchess vs. Eli Apple\", \"https:\/\/media1.giphy.com\/media\/n8KgzfQQCHhFxbJUO5\/giphy.gif\", df['link'])\n\ndf['link'] = np.where(df[\"Matchup\"] == \"Davante Adams vs. Marcus Peters\", \"https:\/\/media2.giphy.com\/media\/eiWqmciwHLKiBdLmXT\/giphy.gif\", df['link'])\ndf['link'] = np.where(df[\"Matchup\"] == \"Tyreek Hill vs. Artie Burns\", \"https:\/\/media1.giphy.com\/media\/a0yDA3nCY0jV2vh3EJ\/giphy.gif\", df['link'])","7d83df4b":"Allplot('Pierre Garcon vs. Kevin King')","1b029376":"Allplot(\"Michael Thomas vs. Marcus Peters\")","07bb9e07":"Allplot(\"Devin Funchess vs. Eli Apple\")","4c2a5bb6":"Allplot(\"Tyreek Hill vs. Artie Burns\")","a9b72d08":"Allplot(\"Davante Adams vs. Marcus Peters\")","06729038":"You can see Mike Evans won at the line of scrimmage. Compared to what he normally produces on go routes during press coverage, here's how he did.\n\n- Max Velocity - Exceeded expected \u2714\ufe0f\n- Max Velocity Frame - Exceeded expected \u2714\ufe0f\n- Max Acceleration - Exceeded expected \u2714\ufe0f\n- Max Acceleration Frame - Exceeded expected \u2714\ufe0f\n- Max Separation Frame - Exceeded expected \u2714\ufe0f\n\nThus giving Marshon Lattimore a poor press grade of 22.4","ef02a387":"We can see a decent positive correlation of .28 with Defender Success, which indicates that cornerbacks with high average press scores may force incompletions \/ interceptions more often.  ","ee666c26":"-------------------------------------------------------------------------------------------------------------------------","6206d24e":"---------------------------------------------------------------------------------------------------------------------------------------------------------------------","11a7bcce":"# Variables Used:\n\nWe will use the receivers velocity, acceleration and separation for each press coverage play and compare it to what they generally produce for each metric on the specific route run. Please note, that this is technically data leakage because we will use the receivers average for the season, which will already include the evaluated play metrics baked into the average. However, since we have an entire seasons worth of data, there are enough data points to get a solid idea of what the receiver generally produces on each press coverage snap. In a perfect world, with large amounts of historical data, we would use a lag rolling average or lag weighted moving average.\n\n\n\n### **MVAE** - Max Velocity (dx) Above Expected\n - The max velocity relative to the x axis of the wide receiver, compared to the max velocity the receiver usually generates on that particular route during press coverage.\n\n\n### **MAAE** - Max Acceleration Above Expected\n- The max acceleration of the wide receiver, compared to the max acceleration the receiver usually generates on that particular route during press coverage\n\n \n### **MVFAE** - Max Velocity Frame (dx) Above Expected \n- The max velocity relative to the x axis frame of the wide receiver, compared to the max velocity frame the receiver usually generates on that particular route during press coverage\n\n \n### **MAFAE** - Max Acceleration Frame Above Expected\n- The max acceleration frame of the wide receiver, compared to the max acceleration frame the receiver usually generates on that particular route during press coverage\n\n \n### **MSFAE** - Max Separation Frame Above Expected \n- The max separation frame of the wide receiver, compared to the max separation frame the receiver usually generates on that particular route during press coverage\n\n\n# Target Variable:\n\nWe will use an inverse completion probability or in our case, \"Defender Success\" to measure the effectiveness of the press coverage. We expect that a successful press coverage will result in an incomplete pass or interception.\n\n\n### **Defender Success** \n- Binary variable with 0 = Completion Allowed, 1 = Incomplete pass or Interception","5e6e8441":"--------------------------------------------------------","2299060a":"# Non-Targeted Press Score","b8e087d3":"We can see that a correlation of -.22 between Press Score and EPA given up on press coverage. This signals that there may be some relationship between a good press at the line of scrimmage and EPA.","65674ce6":"Kevin King pressed Pierre Garcon so well that his velocity actually went into the negative at one point.","1a155cd3":"# Final Thoughts:\n\nIt looks like we may have found a way to quanitfy a cornerbacks ability to press a receiver at the line of scrimmage. Note that a high press score may not be indicative of the cornerbacks overall ability, however this is valuable information for GMs and defensive coordinators that are looking to find undervalued free agents \/ trade options that better fit their press heavy defensive scheme.\n\n\n\n## Other Work:\n\n1. [Shadow Cornerback + Coverage Analysis](https:\/\/www.kaggle.com\/jdruzzi\/shadow-cornerback-coverage-analysis)\n\n2. [Defender Bite Velocity on Play-Action](https:\/\/www.kaggle.com\/jdruzzi\/defender-bite-velocity-on-play-action)\n\n3. [Pass Coverage Classification](https:\/\/www.kaggle.com\/jdruzzi\/pass-coverage-classification-80-recall)\n\n4. [Quantifying Press Coverage](https:\/\/www.kaggle.com\/jdruzzi\/quantifying-press-coverage-ability)\n\n5. [Defender Tendencies: One-Cut Routes + Double Moves](https:\/\/www.kaggle.com\/jdruzzi\/defender-tendencies-one-cut-routes-double-moves)\n\n## Data:\n\n[Revised BDB Data](https:\/\/www.kaggle.com\/jdruzzi\/revised-bdb-data)","a2ce8a00":"--------------------------------------------------------------------------------------------------------------------------","89508bfc":"--------------------------------------------------------------------------------------------","177ee91d":"Below you will see the same graphic we showed earlier between Mike Evans and James Bradberry, except now we display Mike Evan's Acceleration, Velocity and Separation in the first 1.5 seconds of the play along with James Bradberry's Press Score.\n\n**The Red Horizontal lines** = The average max for each metric that Mike Evans usually generates on a slant route in press coverage\n\n**The Blue Vertical lines** = The average frame it takes Mike Evans to reach their max for each metric\n\n**Frames** = 1\/10 of a second","ed33ddcc":"------------------------------------------------------","fca70979":"# Targeted Press Score Vs. Targeted Press EPA","8e0484cf":"# Is This Noise?\n\nLet's see who performed the best during press coverage, and also look at how our press score correlates with Defender Success and EPA","a43d1520":"Press coverage is a technique in which the cornerback lines up close to the wide receiver at the line of scrimmage when the ball is snapped, and tries to engage in contact to disrupt the route. \n\nEvaluating a cornerback's press coverage ability could take hours of film study and can be subjective at times, today we want to figure out how to quantify the cornerback's ability to jam \/ press the receiver at the line of scrimmage during the first seconds of the play.","98cfbcca":"---------------------------------------------------------------------------------------------------","d5a28ef3":"# Bonus Examples","21276837":"# Beat the Press\n\nHere's another example of Mike Evans in press coverage except this time, he beats it.","0a2f5c32":"# Model\n\nInstead of predicting catch probability, where completion = 1, and incomplete\/interception = 0\n\nWe will predict Defender Success, where completion = 0, and incomplete\/interception = 1\n\nA simple model was generated using logistic regression. Even only analyzing the first 15 frames of the play, with no knowledge of the pass outcome, we were able to predict with roughly 58% accuracy whether it was a catch or not.\n\nWe can use the predicted probability of defender success, normalize it, and then multiply by 100 to create a scoring function.\n\n**Press Score** = MinMaxScalar(P(Defender Success)) x 100\n\n1-100 with 100 being the most ideal press coverage snap. A score above 50 would indicate a successful press coverage snap.","187d941d":"I will use the same graphic used in my piece on [shadow corners](https:\/\/www.kaggle.com\/jdruzzi\/shadow-cornerback-coverage-analysis). This is a textbook example of a good press coverage snap, the cornerback successfully slows down the timing of the receiver running the route by displaying his physicality at the line of scrimmage.","9ee28657":"![](https:\/\/images.actionnetwork.com\/blog\/2018\/11\/brad.gif)","661aeb8e":"# Criteria:\n\n- We only analyze the first 1.5 seconds of the play, this is to focus solely on hand-to-hand combat at the line of scrimmage between the cornerback and the wide receiver\n\n- Defender is within 3 yards of the receiver when the ball is snapped, indicating press coverage\n\n- Defender is the closest defensive player relative to the wide receiver for the complete duration of the play, indicating man-to-man coverage\n\n","3c636c00":"We've looked at targeted press score, but would it be possible measure press for receivers that weren't targeted?\n\nWe only take into account the initial 1.5 seconds, so this method can be applied to non-targeted receivers.\n\nLet's evaluate the highest graded non-targeted press play.","ab0abc3d":"# Press Coverage","160b2422":"# Targeted Press Score Vs. Targeted Press Defender Success","5eda10dc":"# Let's Visualize This","4d0336f7":"## How to Read This:\n\n1. **Press Score** - James Bradberry received a press grade of 61 against Mike Evans on this play, which means he was successful in disrupting the route to force an incompletion.\n\n2. **Data** - Here you can see the raw data for Mike Evans in the first 15 frames after the ball is snapped\n\n3. **Velocity**\n   - **Maximum Velocity** - You can clearly see that James Bradberry slowed down Mike Evan's velocity to less than what he generally produces on slant routes during press coverage. \n\n   - **Maximum Velocity Frame** - Mike Evans maximum velocity frame happened sooner than expected, if the receiver were to beat the cornerback off the ball then we would expect the max velcoity frame at either 14 or 15 frames.\n\n4. **Acceleration**\n   - **Maximum Acceleration** - like velocity, you see that James Bradberry slowed down Mike Evan's acceleration to less than what he generally produces on slant routes during press coverage. \n\n   - **Maximum Acceleration Frame** - Mike Evans maximum acceleration frame happened sooner than expected, we would expect max acceleration to also occur later on in the route\n   \n5. **Separation**\n   - **Maximum Separation Frame** - You can see his max separation frame occurs sooner than expected, meaning after initial contact, he was unable to fend off Bradberry."}}