{"cell_type":{"eab6999a":"code","de341535":"code","0cbe7972":"code","bd5a6c39":"code","4d5f5652":"code","335e016f":"code","33895099":"code","8f7c1c40":"code","a6cfe0a7":"code","958a5a4c":"code","87477d21":"code","1a44ac87":"code","4cace530":"code","0d305156":"code","abc35671":"code","6eba7a78":"code","74d720f3":"code","6d3b4d31":"code","05c10c04":"code","903679e7":"code","efa4c3fd":"code","332ab281":"code","796018af":"code","e12f7c92":"code","6fbbe1c6":"code","55717528":"code","5204ce6d":"code","08c5fd20":"code","d4b41fa5":"code","d0a01162":"code","571aeac4":"code","91856679":"code","cbf8979f":"markdown"},"source":{"eab6999a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","de341535":"df_train = pd.read_csv('..\/input\/train.csv')","0cbe7972":"df_train.head()","bd5a6c39":"df_train['diagnosis'].value_counts()\/len(df_train)","4d5f5652":"def load_dataset(path):\n    eye_files = os.listdir(path)\n    return eye_files","335e016f":"train_files = load_dataset('..\/input\/train_images')\ntest_files = load_dataset('..\/input\/test_images')","33895099":"dis_classes = df_train['diagnosis'].unique()","8f7c1c40":"print('There are %d total disease categories' %len(dis_classes))\nprint('There are %s total eye images. \\n' % len(np.hstack([train_files, test_files])))\nprint('There are %d training eye images. \\n' % len(train_files))\nprint('There are %d test eye images. \\n' % len(test_files))","a6cfe0a7":"import cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom glob import glob\n\ntrain_files = np.array(glob(\"..\/input\/train_images\/*\"))\ntest_files = np.array(glob(\"..\/input\/test_images\/*\"))\nimg = cv2.imread(train_files[1])\nplt.imshow(img)\nplt.show()\n","958a5a4c":"train_files[1]","87477d21":"df_train[df_train.id_code == 'cd01672507c9']","1a44ac87":"import random\nfor i in range(10):\n    plt.figure(figsize=(10,10))\n    i = random.choice(os.listdir('..\/input\/train_images'))\n    i_c = i.split('.')[0]\n    #print(os.path.join('..\/input\/train_images', i))\n    img = cv2.imread(os.path.join('..\/input\/train_images', i))\n    print(i, df_train[df_train.id_code == i_c])\n    plt.imshow(img)\n    plt.show()","4cace530":"def ed_hu_moments(image):\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    feature = cv2.HuMoments(cv2.moments(image)).flatten()\n    return feature","0d305156":"gray = cv2.cvtColor(cv2.imread('..\/input\/train_images\/3e61703b5ab2.png'), cv2.COLOR_BGR2GRAY)","abc35671":"image=cv2.imread('..\/input\/train_images\/3e61703b5ab2.png')\nplt.imshow(image)","6eba7a78":"bins= 8\ndef ed_histogram(image, mask=None):\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    hist = cv2.calcHist([image], [0,1,2], None, [bins,bins,bins],[0,256,0,256,0,256,] )\n    cv2.normalize(hist,hist)\n    return hist.flatten()","74d720f3":"ed_histogram(image)","6d3b4d31":"dis_classes","05c10c04":"labels=[]\nglobal_features=[]\nfor x in train_files:\n    image = cv2.imread(x)\n    \n    x_c = x.split('.')[2].split('\/')[3]\n    current_label =  np.array(df_train.loc[df_train.id_code == x_c,'diagnosis'])\n    labels.append(current_label)\n    \n    fv_hu_moments = ed_hu_moments(image)\n    fv_histogram = ed_histogram(image)\n    \n    global_feature = np.hstack([fv_hu_moments,fv_histogram])\n    global_features.append(global_feature)","903679e7":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_features=scaler.fit_transform(np.array(global_features))\n\nle = LabelEncoder()\ntarget = le.fit_transform(labels)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel1 = LogisticRegression(multi_class='ovr')\nmodel2 = RandomForestClassifier()\n","efa4c3fd":"model1.fit(global_features,labels)\nmodel2.fit(global_features,labels)","332ab281":"print(model1.score(global_features, labels))\nprint(model2.score(global_features, labels))","796018af":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit\n\n\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"\n    Generate a simple plot of the test and training learning curve.\n\n    Parameters\n    ----------\n    estimator : object type that implements the \"fit\" and \"predict\" methods\n        An object of that type which is cloned for each validation.\n\n    title : string\n        Title for the chart.\n\n    X : array-like, shape (n_samples, n_features)\n        Training vector, where n_samples is the number of samples and\n        n_features is the number of features.\n\n    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n        Target relative to X for classification or regression;\n        None for unsupervised learning.\n\n    ylim : tuple, shape (ymin, ymax), optional\n        Defines minimum and maximum yvalues plotted.\n\n    cv : int, cross-validation generator or an iterable, optional\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n          - None, to use the default 3-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, optional (default=None)\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like, shape (n_ticks,), dtype float or int\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the dtype is float, it is regarded as a\n        fraction of the maximum size of the training set (that is determined\n        by the selected validation method), i.e. it has to be within (0, 1].\n        Otherwise it is interpreted as absolute sizes of the training sets.\n        Note that for classification the number of samples usually have to\n        be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt\n\n\n","e12f7c92":"title = r\"Learning Curves Logistic Regression\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\nplot_learning_curve(model1, title, global_features, labels, cv=cv, n_jobs=4)\n\nplt.show()","6fbbe1c6":"title = r\"Learning Curves RandomForest Claassifier\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\nplot_learning_curve(model2, title, global_features, labels, cv=cv, n_jobs=4)\n\nplt.show()","55717528":"id_cds=[]\ntype(id_cds)","5204ce6d":"test_features = []\nid_cds = []\nfor x in test_files:\n    image = cv2.imread(x)\n    \n    x_c = x.split('.')[2].split('\/')[3]\n    id_cds.append(x_c)\n    \n    fv_hu_moments = ed_hu_moments(image)\n    fv_histogram = ed_histogram(image)\n    \n    test_feature = np.hstack([fv_hu_moments,fv_histogram])\n    test_features.append(test_feature)\n    ","08c5fd20":"test_preds = model2.predict(test_features)","d4b41fa5":"combined_results = pd.DataFrame({'id_code': id_cds, 'diagnosis': test_preds})","d0a01162":"combined_results.head()","571aeac4":"combined_results.shape","91856679":"combined_results.to_csv(\"submission.csv\",index=False)","cbf8979f":"# Feature Extraction"}}