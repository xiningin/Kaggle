{"cell_type":{"10f4dbb4":"code","946629f6":"code","5d57912f":"code","5560e512":"code","b0325f76":"code","6f4c962a":"code","f98600a6":"code","17eea91d":"code","67bc41db":"code","fcd19a78":"code","57996023":"code","e81c29dd":"code","47952a11":"code","07f737f3":"code","2fbfb70a":"code","870487b6":"code","5b66b7f4":"code","6c6aaecd":"code","f1ebec60":"code","112d328a":"code","b4392983":"code","686b4dca":"code","efa446c4":"code","65b42bfd":"code","a0c1c6dc":"code","ccd796b2":"code","876ccc2d":"code","8acd63fd":"code","3db4dd2b":"code","2f5c35e1":"code","8b8f9ad8":"code","79dcf309":"code","211a3dd5":"code","9fddca05":"code","cee23113":"code","b7e3f8b4":"code","063eb2b2":"code","1f6349fe":"code","6ee043c3":"code","e3525e56":"code","fe4d07eb":"code","da59bfdb":"code","6b71a784":"code","a59b808f":"code","37219d9d":"code","04420880":"code","ce31c66c":"code","a9a1d87d":"code","7c7092d6":"code","178b544f":"code","a2c660b3":"code","7126a9a0":"code","0bf91c5c":"code","e4302873":"code","4f0b87ad":"code","2f0e4f6e":"code","19daa444":"code","0fa81e7f":"markdown","3c1bfb35":"markdown","9cd37209":"markdown","e3bb9b53":"markdown","9d5962f8":"markdown","db380161":"markdown","e5a4fe37":"markdown","60c60b19":"markdown","0c889367":"markdown","b95587ea":"markdown","10d6a67f":"markdown","24f64621":"markdown","f8cfc3fb":"markdown","6a2056c1":"markdown","d768c7ae":"markdown","cb7ae378":"markdown","9dcd256a":"markdown","54da85a3":"markdown"},"source":{"10f4dbb4":"a = 5","946629f6":"print(a == 6)  # in this case '==' determines wether the two values are equal or not\nprint(a == 5)","5d57912f":"print(a > 7)  # checking for one value greater than the other\nprint(a > 4)\nprint(a >= 5)  # greater than or equal to","5560e512":"print(a < 4)  # checking for one value less than the other\nprint(a < 8)\nprint(a <= 5)  # less than or equal to","b0325f76":"print(a != 8)  # not equal to\nprint(a != 5)","6f4c962a":"print(\"salman\" == \"khan\")  # can compare strings too\nprint(\"salman\" != \"khan\")\nprint(\"khan\" == \"khan\")\nprint(\"A\" == \"a\")\nprint(\"A\" > \"B\")  # actually comparing ascii values here\nprint(\"B\" > \"A\")","f98600a6":"age = 21\nif age >= 18:  # if this statement qualifies the person can enter\n    print(\"You can enter,\")\nprint(\"move on!\")  # this statement will run no matter what, since it is out of the if block","17eea91d":"age = 12\nif age >= 18:\n    print(\"You can enter,\")\nprint(\"move on!\")","67bc41db":"age = 13\nif age >= 18:  # if this statement qualifies, the person can enter\n    print(\"You can enter,\")\nelse:  # if the above statement doesn't qualify, the person will be suggested another place\n    print(\"Go see Meat Loaf,\")\nprint(\"move on!\")","fcd19a78":"age = 31\nif age >= 18:\n    print(\"You can enter,\")\nelse:\n    print(\"Go see Meat Loaf,\")\nprint(\"move on!\")","57996023":"age = 13\nif age > 18:  # if this statement qualifies, the person can enter\n    print(\"You can enter,\")\n# if the above one doesnt qualify, program will run this \"ELIF\" statement and do as it says on qualification\nelif age == 18:\n    print(\"Please visit Pink Floyd,\")\nelse:  # if both of the above don't work, it will run this one\n    print(\"Go see Meat Loaf,\")\nprint(\"move on!\")","e81c29dd":"age = 31\nif age > 18:  # if this statement qualifies, the person can enter\n    print(\"You can enter,\")\n# if the above one doesnt qualify, program will run this \"ELIF\" statement and do as it says on qualification\nelif age == 18:\n    print(\"Please visit Pink Floyd,\")\nelse:  # if both of the above don't work, it will run this one\n    print(\"Go see Meat Loaf,\")\nprint(\"move on!\")","47952a11":"age = 18\nif age > 18:  # if this statement qualifies, the person can enter\n    print(\"You can enter,\")\n# if the above one doesnt qualify, program will run this \"ELIF\" statement and do as it says on qualification\nelif age == 18:\n    print(\"Please visit Pink Floyd,\")\nelse:  # if both of the above don't work, it will run this one\n    print(\"Go see Meat Loaf,\")\nprint(\"move on!\")","07f737f3":"# NOT operator inverses the boolean value\nprint(not True)\nprint(not False)","2fbfb70a":"# OR operator comes in between multiple boolean values and will be resulted in single\n# for the resulted boolean value to be true, any one of those multiple values must be a true\n# for the resulted boolean value to be false, all of the input multiple values must be false\n\nprint(True or True)  \nprint(True or False)\nprint(False or True)\nprint(False or False)  # here both input values are false, hence reslted in false","870487b6":"# can be used in the if statements like below!\n\nmovie_release_year = 1985\nif movie_release_year < 2000 or movie_release_year > 2010:\n    print(\"Yeah! I have watched it!\")\nelse:\n    print(\"No! I have not seen any movie released in that decade!\")","5b66b7f4":"movie_release_year = 2008\nif movie_release_year < 2000 or movie_release_year > 2010:\n    print(\"Yeah! I have watched it!\")\nelse:\n    print(\"No! I have not seen any movie released in that decade!\")","6c6aaecd":"movie_release_year = 2015\nif movie_release_year < 2000 or movie_release_year > 2010:\n    print(\"Yeah! I have watched it!\")\nelse:\n    print(\"No! I have not seen any movie released in that decade!\")","f1ebec60":"# AND operator comes in between multiple boolean values and will be resulted in single (just like OR)\n#for the resulted boolean value to be true, all of the multiple values must be a true\n# for the resulted boolean value to be false, any one of the input multiple values must be false\n\nprint(True and True)  # all are true\nprint(True and False)\nprint(False and True)\nprint(False and False)","112d328a":"birth_year = 1990\nif birth_year >= 1981 and birth_year <= 1996:\n    print(\"You're a Millennial!\")\nelse:\n        print(\"You're not a Millennial!\")","b4392983":"birth_year = 2000\nif birth_year >= 1981 and birth_year <= 1996:\n    print(\"You're a Millennial!\")\nelse:\n        print(\"You're not a Millennial!\")","686b4dca":"birth_year = 1973\nif birth_year >= 1981 and birth_year <= 1996:\n    print(\"You're a Millennial!\")\nelse:\n        print(\"You're not a Millennial!\")","efa446c4":"# range generates an ordered sequences\n# if its provided with one integer, it will range from zero to a number 1 less than that number\n# if its provided with two integers, it will range from first to a number 1 less than second integer\n\nprint(range(3))\nprint(range(10, 34))","65b42bfd":"# we can generate a list from range\n\nprint(list(range(3)))\nprint(list(range(10, 23)))","a0c1c6dc":"# here in this example, we have 5 different colored squares, we want to paint all 5 squares with white\n# we will use loops here\n# for loop is used here 5 time, because we want to paint each square one by one\n# with each turn of loop, one square is painted white and the program will rum 5 times\n# these 5 times are achieved by the range provided by us 'range(0, 5)'\n# this range will also serve as the index of list\n\nsquares = [\"red\", \"yellow\", \"green\", \"purple\", \"blue\"]\nfor i in range(0, 5):\n    squares[i] = \"white\"\nprint(squares)","ccd796b2":"squares = [\"red\", \"yellow\", \"green\", \"purple\", \"blue\"]\nfor square in squares:\n    print(square)\n    # square = \"white\" will also do the work done in the above cell\n    # as square here will one-by-one call the items of the list i.e. \"red\", \"yellow\", etc\n    # no need to use indexes this way\n    # no need to manually give the range too, as it will automatically run for all of the items of list","876ccc2d":"# enumerate is the function that is used to obtain the index and value of the sequence\n\nboxes = (\"red\", \"yellow\", \"green\")\nfor i,box in enumerate(boxes):\n    print(i, box)","8acd63fd":"# here we have a list of colors, we want to pick only reds from here\n# while loop will work until we are getting reds\n# loop will break once we would encounter a color that is not red and we will be then out of the loop\n\ncolors = [\"red\", \"red\", \"red\", \"yellow\", \"green\", \"red\", \"orange\", \"green\", \"red\"]\nred = []\ni = 0\nwhile colors[i] == \"red\":\n    red.append(colors[i])\n    i += 1\nprint(red)","3db4dd2b":"# len() funtion takes a sequence and tells length of that sequence\n# can be used on strings, lists, sets and dictionaries\n\nprint(len(\"salman\"))\nprint(len([2, 1, 0, 10, 45]))","2f5c35e1":"# sum() fuction takes numbers in sequence and returns their total sum\n# can find sums for integers, floats and complex numbers\n\nprint(sum([2+5j, 9 + 13j]))\nprint(sum([2, 1, 0, 10, 45]))\nprint(sum((3.7, 67)))","8b8f9ad8":"list_forsort = [123, 1200, 24, 6, 28, 12]  # example list","79dcf309":"# sorted() sorts the list in ascending order, if haven't instructed otherwise\n# generates another list, does not alter the original list\n\nprint(sorted(list_forsort))\nprint(list_forsort)","211a3dd5":"# sort is a function that will alter the orginal list as it does not generate another list\n\nprint(\"Initial list:\", list_forsort)\nlist_forsort.sort()\nprint(\"After 'sort()' function:\", list_forsort)","9fddca05":"def give_double(x):  # how to define function\n    x_doubled = 2 * x  # function body\n    return x_doubled  # return value","cee23113":"print(give_double(34))  # calling a function\ndoubled_4 = give_double(4)  # assigning return of function to a variable\nprint(doubled_4)","b7e3f8b4":"# Statement in triple double\/single quotes is Documentation String, helps to document the purpose of the function\n\ndef squared(a):\n    \"\"\"\n    squares the given number\"\n    \"\"\"\n    b = a ** 2\n    return b\nc = squared(4)\nprint(c)\nhelp(squared)","063eb2b2":"# Multiple Parameter, a function can have more than 1 arguments\n\ndef product(x, y):\n    z = x * y\n    return z\nprint(product(23, 56))","1f6349fe":"def product(w, x, y):\n    z = w * x * y\n    return z\nprint(product(12, 56.87, 5))","6ee043c3":"# it is not a must for a function to return a value\n# there can be an equally workable and normal function with no return value\n\ndef SK():\n    print(\"Salman\")\n    print(\"Khan\")\nSK()","e3525e56":"def no_work():\n    pass  # Python doesnt allow a function to have no body, here pass will fill in that requirement and will be doing nothing\nprint(no_work())  # when we dont return a vlue for a function, python saves a None in it\n\ndef no_work_none():  # Equilvalent to the above function\n    return None\nprint(no_work_none())","fe4d07eb":"def add1(a):\n    b = a + 1\n    print(a, \"+ 1 =\", b)\n    return b\nadd1(34)","da59bfdb":"a_list = [10, 9, 8, 7, 6, 5]\ndef printStuff(Stuff):\n    for i,s in enumerate(Stuff):  # using a loop inside a function\n        print(\"Album\", i, \"Rating is\", s)\nprintStuff(a_list)","6b71a784":"def collectnames(*name):  # if we put * before argument, the function collects the argument\n    for name in name:\n        print(name)\ncollectnames(\"salman\", \"khan\", \"m\")  # no matter how much names, we put in the argument, the function will print it","a59b808f":"def show_dict(**kv):  # same can be applied on dictionaries as well\n    for key in kv:\n        print(key, kv[key])\nshow_dict(name = \"salman\", age = 26, city = \"karachi\")","37219d9d":"# variables defined outside the function are called gloabal variables\n\ndef AddDC(x):\n    x = x + \"DC\"  # we have called a variable that hasnt been asssinged yet inside of function as well\n    print(x)\n    return(x)\nx = \"AC\"  # we are assigning the variable here\nz = AddDC(x)","04420880":"# local variables only exsists only within the scope of the function\n\ndef Thriller():\n    Date = \"1897\"\n    return Date\nDate = \"1982\"\nprint(Thriller())\nprint(Date)","ce31c66c":"def PinkFloyd():\n    global ClaimedSales  # a way how we can create a global variable inside a function\n    ClaimedSales = \"45M\"\n    return ClaimedSales\nPinkFloyd()\nprint(ClaimedSales)","a9a1d87d":"# importing the library, for later use\n# library not explained now\n# we will just use this library for methods on objects\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","7c7092d6":"class Circle(object):  # how to create a class\n    def __init__(self, radius, color):\n        \"\"\"\n        __init__ is a special method or constructor to initialize data attributes\n        self defines an object and is unique for each object\n        radius and color in this case are the attributes of the objects that will be created in this class\n        \"\"\"\n        self.radius = radius\n        self.color = color\n    \n    def add_radius(self, radius_inc):  # creating a fuction for the class, to modify the object's radius\n        self.radius += radius_inc\n        return self.radius\n        \n    def reduce_radius(self, radius_dec):\n        self.radius -= radius_dec\n        return self.radius\n    \n    def draw_circle(self):\n        \"\"\"\n        using matplotlib to draw the circle\n        just copied the body of this function for now\n        this will somehow print the drawn circle on screen\n        \"\"\"\n        plt.gca().add_patch(plt.Circle((0, 0), radius = self.radius, fc = self.color))\n        plt.axis(\"scaled\")\n        return plt.show","178b544f":"class Rectangle(object):\n    def __init__(self, height, width, color):\n        self.height = height;\n        self.width = width;\n        self.color - color;","a2c660b3":"cr10 = Circle(10, \"red\")  # creating a new object in class \"Circle\"\ncb4 = Circle(4, \"blue\")  # creating another","7126a9a0":"print(cr10.color)\nprint(cb4.radius)","0bf91c5c":"print(cr10.draw_circle())","e4302873":"cb4.radius = 40  # changing the attribute\nprint(cb4.radius)","4f0b87ad":"cb4.add_radius(6)  # calling method to increase the radius of the cirlce\nprint(cb4.radius)","2f0e4f6e":"cb4.reduce_radius(2)    # calling method to reduce the radius of the cirlce\nprint(cb4.radius)","19daa444":"dir(cb4)  # helps getting a list of methods that we can apply on a certain object","0fa81e7f":"### Logic Operators:","3c1bfb35":"#### The ELSE Statement:","9cd37209":"## Classes and Objects","e3bb9b53":"#### Global and Local Variables","9d5962f8":"## Loops (For and While)","db380161":"### FOR Loops:","e5a4fe37":"##### This file was made by me while I was teaching myself Python and I would be happy if this can help someone on Kaggle who wants to learn Python.","60c60b19":"### WHILE Loops:","0c889367":"#### SORTED VS SORT","b95587ea":"## Python Programming Fundamentals","10d6a67f":"## Functions","24f64621":"#### The ELIF Statement:","f8cfc3fb":"### Making Functions","6a2056c1":"### Branching:","d768c7ae":"## Conditions and Branching","cb7ae378":"#### The IF Statement:","9dcd256a":"### Built in Functions","54da85a3":"### Comparison Operators:"}}