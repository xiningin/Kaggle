{"cell_type":{"68cc3f44":"code","e61ccc27":"code","0ec926f1":"code","7b3057c5":"code","ffcd0230":"code","abba087a":"code","68331ee5":"code","1b5d9947":"code","268b9306":"code","1edb0c86":"code","09589bae":"code","10b064bd":"code","8cd3b476":"code","8de796b2":"code","44af834d":"code","cafcdce5":"code","582c714e":"code","57216d07":"code","1a5c44a4":"code","c89a165c":"code","f997c6cf":"code","3a13c614":"code","9482053f":"markdown","648112b3":"markdown","9311889e":"markdown","0e929298":"markdown","b75d72d5":"markdown","61d439fc":"markdown","0728c02d":"markdown","946cda0a":"markdown","4f3e1f8b":"markdown","3b8b7855":"markdown","51fccab1":"markdown","70d285ef":"markdown","efabcde4":"markdown"},"source":{"68cc3f44":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","e61ccc27":"data = pd.read_csv(\"..\/input\/database.csv\")\ndata.head()","0ec926f1":"data.columns","7b3057c5":"data = data[['Date', 'Time', 'Latitude', 'Longitude', 'Depth', 'Magnitude']]\ndata.head()","ffcd0230":"import datetime\nimport time\n\ntimestamp = []\nfor d, t in zip(data['Date'], data['Time']):\n    try:\n        ts = datetime.datetime.strptime(d+' '+t, '%m\/%d\/%Y %H:%M:%S')\n        timestamp.append(time.mktime(ts.timetuple()))\n    except ValueError:\n        # print('ValueError')\n        timestamp.append('ValueError')","abba087a":"timeStamp = pd.Series(timestamp)\ndata['Timestamp'] = timeStamp.values","68331ee5":"final_data = data.drop(['Date', 'Time'], axis=1)\nfinal_data = final_data[final_data.Timestamp != 'ValueError']\nfinal_data.head()","1b5d9947":"from mpl_toolkits.basemap import Basemap\n\nm = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')\n\nlongitudes = data[\"Longitude\"].tolist()\nlatitudes = data[\"Latitude\"].tolist()\n#m = Basemap(width=12000000,height=9000000,projection='lcc',\n            #resolution=None,lat_1=80.,lat_2=55,lat_0=80,lon_0=-107.)\nx,y = m(longitudes,latitudes)","268b9306":"fig = plt.figure(figsize=(12,10))\nplt.title(\"All affected areas\")\nm.plot(x, y, \"o\", markersize = 2, color = 'blue')\nm.drawcoastlines()\nm.fillcontinents(color='coral',lake_color='aqua')\nm.drawmapboundary()\nm.drawcountries()\nplt.show()","1edb0c86":"X = final_data[['Timestamp', 'Latitude', 'Longitude']]\ny = final_data[['Magnitude', 'Depth']]","09589bae":"from sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nprint(X_train.shape, X_test.shape, y_train.shape, X_test.shape)","10b064bd":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(random_state=42)\nreg.fit(X_train, y_train)\nreg.predict(X_test)","8cd3b476":"reg.score(X_test, y_test)","8de796b2":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'n_estimators':[10, 20, 50, 100, 200, 500]}\n\ngrid_obj = GridSearchCV(reg, parameters)\ngrid_fit = grid_obj.fit(X_train, y_train)\nbest_fit = grid_fit.best_estimator_\nbest_fit.predict(X_test)","44af834d":"best_fit.score(X_test, y_test)","cafcdce5":"from keras.models import Sequential\nfrom keras.layers import Dense\n\ndef create_model(neurons, activation, optimizer, loss):\n    model = Sequential()\n    model.add(Dense(neurons, activation=activation, input_shape=(3,)))\n    model.add(Dense(neurons, activation=activation))\n    model.add(Dense(2, activation='softmax'))\n    \n    model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])\n    \n    return model","582c714e":"from keras.wrappers.scikit_learn import KerasClassifier\n\nmodel = KerasClassifier(build_fn=create_model, verbose=0)\n\n# neurons = [16, 64, 128, 256]\nneurons = [16]\n# batch_size = [10, 20, 50, 100]\nbatch_size = [10]\nepochs = [10]\n# activation = ['relu', 'tanh', 'sigmoid', 'hard_sigmoid', 'linear', 'exponential']\nactivation = ['sigmoid', 'relu']\n# optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']\noptimizer = ['SGD', 'Adadelta']\nloss = ['squared_hinge']\n\nparam_grid = dict(neurons=neurons, batch_size=batch_size, epochs=epochs, activation=activation, optimizer=optimizer, loss=loss)","57216d07":"grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1)\ngrid_result = grid.fit(X_train, y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","1a5c44a4":"model = Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(3,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(optimizer='SGD', loss='squared_hinge', metrics=['accuracy'])","c89a165c":"model.fit(X_train, y_train, batch_size=10, epochs=20, verbose=1, validation_data=(X_test, y_test))","f997c6cf":"[test_loss, test_acc] = model.evaluate(X_test, y_test)\nprint(\"Evaluation result on Test Data : Loss = {}, accuracy = {}\".format(test_loss, test_acc))","3a13c614":"model.save('earthquake.h5')","9482053f":"We see that the above model performs better but it also has lot of noise (loss) which can be neglected for prediction and use it for furthur prediction.\n\nThe above model is saved for furthur prediction.","648112b3":"Read the data from csv and also columns which are necessary for the model and the column which needs to be predicted.","9311889e":"## Visualization\nHere, all the earthquakes from the database in visualized on to the world map which shows clear representation of the locations where frequency of the earthquake will be more. ","0e929298":"In this, we define the hyperparameters with two or more options to find the best fit.","b75d72d5":"Here, we used the RandomForestRegressor model to predict the outputs, we see the strange prediction from this with score above 80% which can be assumed to be best fit but not due to its predicted values.","61d439fc":"Import the necessary libraries required for buidling the model and data analysis of the earthquakes.","0728c02d":"Here, we find the best fit of the above model and get the mean test score and standard deviation of the best fit model.","946cda0a":"### Neural Network model\nIn the above case it was more kind of linear regressor where the predicted values are not as expected. So, Now, we build the neural network to fit the data for training set. Neural Network consists of three Dense layer with each 16, 16, 2 nodes and relu, relu and softmax as activation function.","4f3e1f8b":"### Splitting the Data\nFirstly, split the data into Xs and ys which are input to the model and output of the model respectively. Here, inputs are TImestamp, Latitude and Longitude and outputs are Magnitude and Depth. Split the Xs and ys into train and test with validation. Training dataset contains 80% and Test dataset contains 20%.","3b8b7855":"The best fit parameters are used for same model to compute the score with training data and testing data.","51fccab1":"Figure out the main features from earthquake data and create a object of that features, namely, Date, Time, Latitude, Longitude, Depth, Magnitude.","70d285ef":"Here, the data is random we need to scale according to inputs to the model. In this, we convert given Date and Time to Unix time which is in seconds and a numeral. This can be easily used as input for the network we built.","efabcde4":"# Earthquake Prediction\nIt is well known that if a disaster has happened in a region, it is likely to happen there again. Some regions really have frequent earthquakes, but this is just a comparative quantity compared to other regions.\nSo, predicting the earthquake with Date and Time, Latitude and Longitude from previous data is not a trend which follows like other things, it is natural occuring. "}}