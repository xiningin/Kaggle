{"cell_type":{"a83cac3a":"code","7a58bd2f":"code","ed4d9d7b":"code","3d637c7e":"code","1566cd68":"code","c2197990":"code","f4808edc":"code","88023fce":"code","30a8f85b":"code","1110c92d":"code","f2368821":"code","e5e7f1ce":"code","1ce67620":"code","21f6334d":"markdown","b53b10cd":"markdown","c9504e75":"markdown","ce010584":"markdown","3c410dd2":"markdown","cffec641":"markdown","329e0b8c":"markdown","c911c6d1":"markdown","b88d0d07":"markdown","780495f1":"markdown","5e7d75f2":"markdown","6eba6d0a":"markdown","79af2f82":"markdown","5e005da2":"markdown","6163846b":"markdown","6175820c":"markdown","372eb02a":"markdown","4f77e929":"markdown","575562b0":"markdown"},"source":{"a83cac3a":"# importing necessary libraries\nimport numpy as np\nimport pandas as pd\n\nfrom IPython.display import display\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')\n\nimport warnings\nwarnings.filterwarnings(action='once')","7a58bd2f":"# reading supermarket_sales data\ndf = pd.read_csv('..\/input\/supermarket-sales\/supermarket_sales - Sheet1.csv')\nprint('(rows, columns):', df.shape)","ed4d9d7b":"# exploring data\ndf.head(10)","3d637c7e":"df.columns","1566cd68":"# regenerating df with only necessary columns\ndf = df[['Gender', 'Product line', 'Quantity', 'Date', 'Time', 'Payment', 'gross income', 'Rating']]\n\n# renaming columns for usability purposes\ndf.columns = ['gender', 'product_line', 'quantity', 'date', 'time', 'payment', 'gross_income', 'rating']\n\ndf.columns","c2197990":"def combine_date_time(data, date, time, drop=True, front=False):\n    '''\n    Takes two separate date and time columns\n    and combine them into one datetime object column\n    \n    KEYWORD ARGUMENTS:\n        # data -- DataFrame\n            data source\n            \n        # date, time -- str\n            names for date and time columns\n            \n        # drop -- bool, default: True\n            if True, drops old date and time columns\n            \n        # front -- bool, default: False\n            if True, brings new datetime columns to index 0\n            \n    OUTPUT:\n        DataFrame with new datetime object column\n        and old date and time columns dropped\n    '''\n    data['datetime'] = data[date] + ' ' + data[time]\n    data.datetime = pd.to_datetime(data.datetime, infer_datetime_format=True)\n    \n    if drop == True:\n        data.drop(columns=[date, time], inplace=True)\n    \n    if front == True:\n        data = data.set_index('datetime').reset_index()","f4808edc":"# converting date and time columns to one 'datetime' column\ncombine_date_time(df, 'date', 'time')","88023fce":"df.dtypes","30a8f85b":"# assessing missing values \ndf.isnull().sum()","1110c92d":"# defining a function to help in plotting graphs\ndef plot_grpah(figsize=(10,8), figtype=None, y=None, x=None, hue=None, labels=None, save=False):\n    '''\n    Plots y, x, and hue arrays using seaborn library\n     \n    KEYWORD ARGUMENTS:\n        # figszie -- float, float, default: (10,8)\n            (width, height) in inches\n\n        # figtype -- str\n            figure type, options: 'barplot', 'boxplot', and 'pointplot'\n            \n        # y, x, hue -- array\n            inputs for plotting long-form data\n            \n        # labels -- list, default: None\n            in order (figure_title, ylabel, xlabel, legend_title)\n            \n        # save -- bool, default: False\n            save figure in 'png' format to main folder, uses figure's title as filename\n    \n    OUTPUT\n        returns Axes object with the plot drawn onto it\n    '''\n    # plotting figure\n    fig = plt.figure(figsize=figsize)\n    \n    if figtype == 'pointplot':\n        ax = sns.pointplot(y=y, x=x, hue=hue)\n    elif figtype == 'boxplot':\n        ax = sns.boxplot(y=y, x=x, hue=hue)\n    elif figtype == 'barplot':\n        ax = sns.barplot(y=y, x=x, hue=hue, ci=False)\n    else:\n        print('figtype must be specified')\n    \n    # setting up labels\n    fig = plt.title(labels[0])\n    ax.set_ylabel(labels[1])\n    ax.set_xlabel(labels[2])\n    fig = plt.legend(title=labels[3], loc='upper left', bbox_to_anchor=(1.0, 0.5), ncol=1)\n    \n    # exporting and showing figure\n    if save == True:\n        plt.savefig(fname=labels[0].replace(\" \", \"_\").lower(), dpi=72, bbox_inches='tight')       \n    \n    plt.show()","f2368821":"plot_grpah(\n    figtype='pointplot', y=(df.gross_income\/df.quantity), x=df.quantity, hue=df.gender, save=True,\n    labels=['Gross Income by Gender in Terms of Quantity', 'Gross Income Per Item ($)', 'Quantity', 'Gender']\n)","e5e7f1ce":"plot_grpah(\n    figtype='boxplot', y=df.rating, x=df.payment, hue=df.gender, save=True,\n    labels=['Customer Satisfaction by Gender in Terms of Payment Method', 'Rating', 'Payment Method', 'Gender']\n)","1ce67620":"plot_grpah(\n    figsize=(17,8), figtype='barplot', y=(df.gross_income\/df.quantity), x=df.datetime.dt.weekday_name, hue=df.product_line,\n    labels=['Product Line Gross Income by Day of The Week', 'Gross Income Per Item ($)', 'Day of The Week', 'Product Line'],\n    save=True\n)","21f6334d":"## 2. Data Understanding","b53b10cd":"Not all columns are needed in this analysis. Based on the questions proposed, only columns `Gender`, `Product line`, `Quantity`, `Date`, `Time`, `Payment`, `gross income`, and `Rating` are needed.\n\nAlso, since the objective of this analysis is quite simple and no application of machine learning will be used, and [with seaborn's capability to handle categorical variables](https:\/\/seaborn.pydata.org\/tutorial\/categorical.html), no further action will be taken on categorical variables and will be used as it is. Obviously, this saves the time and effort of encoding categorical variables and having to remap them again when plotting graphs.","c9504e75":"The graph shows that best gross income per item on Mondays and Thursdays are _fashion accessories_ items, on Tuesdays and Wednesdays are _electronic accessories_ items, on Fridays are_sports and travel_ items, on Saturdays are _food and beverages_ items, and on Sundays are _home and lifestyle_ items. \n\nThe graph also shows some interesting trends. For example, there is a significant increase in gross income per item on Fridays for _sport and travel_. Fridays also happen to be the worst day of the week for _home and lifestyle_ and _food and beverages_ items in terms of gross income per item. This might suggest a relationship between the three that should be investigated further.","ce010584":"# Customer Behavior to Drive\u00a0Sales \n\nThis notebook is to be submitted for \"Project 4: Write A Data Science Blog Post\" as part of [Udacity's Data Scientist Nanodegree](https:\/\/www.udacity.com\/course\/data-scientist-nanodegree). In this project, I am tasked with choosing a dataset, identifying three questions, and analyzing the data to find answers to these questions while following [CRISP-DM Process](https:\/\/www.ibm.com\/support\/knowledgecenter\/en\/SS3RA7_15.0.0\/com.ibm.spss.crispdm.help\/crisp_overview.htm). I am then tasked with writing a blog post in which I communicate findings to non-technical audience.","3c410dd2":"No missing values in the data. No further action is necessary.","cffec641":"To answer this question, a `boxplot` will be used with `rating` on y-axis, `payment` on the x-axis, and hue to be `gender` as a grouping variable to distinguish the two groups from each other.","329e0b8c":"Notebook is available on [GitHub](https:\/\/github.com\/alghsaleh\/Customer-Behavior-to-Drive-Sales\/blob\/master\/supermarket_sales.ipynb) and [Kaggle](https:\/\/www.kaggle.com\/alghsaleh\/customer-behavior-to-drive-sales). Blog post is available on [Medium](https:\/\/medium.com\/@alghsaleh\/customer-behavior-to-drive-sales-aaeeefb0b39e?source=friends_link&sk=2d1735c7229a5a0341547ffc1189fda7).","c911c6d1":"To answer this question, a `pointplot` will be used with `gross_income` divided by `quantity` on the y-axis to get gross income per item, `quantity` on the x-axis, and hue to be `gender` as a grouping variable to distinguish the two groups from each other.","b88d0d07":"The graph shows that male customers tend to give higher satisfaction ratings for shopping experience when they pay using e-wallets or credit cards. Female customers, contrarily, tend to give higher satisfaction ratings for shopping experience when paying in cash.","780495f1":"## 4. ~~Modeling & Evaluating~~ Analysis","5e7d75f2":"**Attribute Information:**  \n1. `Invoice id`: Computer-generated nvoice identification number.  \n2. `Branch`: Supercenter branch.\n3. `City`: Supercenters location.\n4. `Customer type`: Type of customers, members are member card holder and normal without member cards.  \n5. `Gender`: Gender type of customer.\n6. `Product line`: General item categorization groups.\n7. `Unit price`: Price of each product in U.S. Dollars.\n8. `Quantity`: Number of products purchased by customer.  \n9. `Tax`: 5% tax fee on total amount. \n10. `Total`: Total price including tax. \n11. `Date`: Date of purchase.  \n12. `Time`: Purchase time.\n13. `Payment`: Payment method used by customer for purchase.  \n14. `COGS`: Cost of goods sold.\n15. `Gross margin percentage`: Gross margin percentage.\n16. `Gross income`: Gross income.\n17. `Rating`: Customer stratification rating for shopping experience (On a scale of 1 to 10).","6eba6d0a":"The graph shows that male customers generate more gross income per item when buying items at lower quantity. This is most clear at a quantity of 1. On the other hand, female customers tend to generate more gross income per item when buying at higher quantities. Clearly shown at quantities 6, 7, and 8.","79af2f82":"## 3. Data Preparation","5e005da2":"## 1. Business Understanding\n\nThe dataset in use has been provided by supermarket company detailing their sales activities. The task is to find some insights that can help them improve their sales and marketing strategies.\n\nThree questions were proposed:\n* What quantities at which gender-specific customers generate more gross income?\n* How payment method affect gender-specific customer experience?\n* What day of the week product lines generates more gross income?","6163846b":"### 4.2. How payment method affect gender-specific customer satisfaction?","6175820c":"### 4.1. What quantities at which gender-specific customers generate more gross income?","372eb02a":"To answer this question, a `barplot` will be used with `gross_income` divided by `quantity` on the y-axis to get gross income per item, weekday will be extracted from `datetime` on the x-axis, and hue to be `product_line` as a grouping variable to distinguish groups from each other.","4f77e929":"### 4.3. What day of the week on which certain product lines generate more gross income?","575562b0":"## 5. Deployment"}}