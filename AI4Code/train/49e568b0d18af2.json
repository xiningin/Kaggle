{"cell_type":{"b1db27f1":"code","9ef8d9c1":"code","a4dd6b36":"code","60a19f4e":"code","43cd3869":"code","b80cfcf5":"code","91c2aa9f":"code","b5da739a":"code","32ec3973":"code","4b3ef998":"code","9a97e26f":"code","c8607f03":"code","e9b6c336":"code","a32ed79a":"code","a804ab36":"code","9f088b81":"code","5308866c":"code","b5145405":"code","f652159c":"code","38603cc3":"code","810e6511":"code","6f265963":"code","c7d6b9e6":"code","239ead41":"code","a6091a22":"code","5a17c9ba":"code","848c6a9c":"markdown","8b285d34":"markdown","6b466028":"markdown","9d6e74c9":"markdown","14066c16":"markdown","3dfd972a":"markdown","14bb4ef8":"markdown","cacb48b3":"markdown","01ebdc0d":"markdown","3ee75c04":"markdown","dafb2b2c":"markdown","27fd1663":"markdown","171276ed":"markdown","5177f666":"markdown","5c26cf13":"markdown"},"source":{"b1db27f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ef8d9c1":"!pip install tensorflow \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense","a4dd6b36":"dataset=pd.read_csv('..\/input\/fetal-health-classification\/fetal_health.csv')\ndataset","60a19f4e":"dataset.isnull().sum()","43cd3869":"fig=plt.figure()\nax=fig.add_subplot(1,1,1)\nax.hist(dataset['baseline value'])\nplt.title('plot of fetal baseline heart rate')\nplt.xlabel('baseline value of heart rate')\nplt.show()","b80cfcf5":"dataset['prolongued_decelerations'].unique()","91c2aa9f":"a=dataset.describe()\ndataset_stats=a.transpose()\ndataset_stats","b5da739a":"label=dataset['fetal_health']\nlabel","32ec3973":"def norm(x):\n    return(x-dataset_stats['mean'])\/dataset_stats['std']\nnormed_data=norm(dataset)\nnormed_data","4b3ef998":"features=normed_data.drop(columns='fetal_health')\nfeatures","9a97e26f":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(features,label, test_size=0.3)","c8607f03":"def build_model():\n    model=keras.Sequential([layers.Dense(8, activation='relu'),\n                                                 layers.Dense(6, activation='relu'),layers.Dropout(0.2),\n                            layers.Dense(4, activation='softmax')])\n    optimizer=tf.keras.optimizers.Adam(0.001)\n    model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n    return model","e9b6c336":"model=build_model()","a32ed79a":"history=model.fit(x_train,y_train, epochs=2000)","a804ab36":"plt.plot(history.history['loss'])\nplt.show()","9f088b81":"x_test","5308866c":"y_test","b5145405":"test_predictions=model.predict(x_test)\ntest_predictions","f652159c":"pred_classes = model.predict_classes(x_test, verbose=0)\npred_classes","38603cc3":"from sklearn.metrics import f1_score\nf1 = f1_score(y_test, pred_classes, average=None)\nf1","810e6511":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, pred_classes)","6f265963":"from sklearn import metrics\nprint(metrics.classification_report(y_test, pred_classes, digits=3))","c7d6b9e6":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfpr = {}\ntpr = {}\nthresh ={}\n\nn_class = 4\n\nfor i in range(n_class):    \n    fpr[i], tpr[i], thresh[i] = roc_curve(y_test, test_predictions[:,i], pos_label=i)\n    \n# plotting    \nplt.figure(figsize=(15,10))\nplt.plot(fpr[1], tpr[1], linestyle='--',color='orange', label='Class 1 vs Rest')\nplt.plot(fpr[2], tpr[2], linestyle='--',color='green', label='Class 2 vs Rest')\nplt.plot(fpr[3], tpr[3], linestyle='--',color='blue', label='Class 3 vs Rest')\nplt.title('Multiclass ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.savefig('Multiclass ROC',dpi=300)\n","239ead41":"score = roc_auc_score(y_test, test_predictions, average='weighted', multi_class='ovo', labels=[0,1,2,3])\nscore","a6091a22":"from sklearn.metrics import precision_recall_curve\nprecision = {}\nrecall = {}\nthresh ={}\nn_class = 4\n\nfor i in range(n_class):    \n    precision[i], recall[i], thresh[i] = roc_curve(y_test, test_predictions[:,i], pos_label=i)\n    \nplt.figure(figsize=(15,10))\nplt.plot(recall[1], precision[1],  linestyle='--',color='orange', label='Class 1 vs Rest')\nplt.plot(recall[2], precision[2],  linestyle='--',color='green', label='Class 2 vs Rest')\nplt.plot(recall[3], precision[3],  linestyle='--',color='blue', label='Class 3 vs Rest') \nplt.title('Multiclass Precision Recall curve')\nplt.xlabel('recall')\nplt.ylabel('precision')\nplt.legend(loc='upper left')   ","5a17c9ba":"from sklearn.metrics import recall_score\nrecall_score(y_test, pred_classes,  labels=None, pos_label=1, average='weighted', sample_weight=None, zero_division='warn')","848c6a9c":"**SINCE THE FEATURES ARE IN DIFFERENT SCALES, WE NORMALIZE THE DATA USING Z-SCORE NORMALIZATION**","8b285d34":"# TRAIN THE MODEL","6b466028":"**CHECK FOR NULL VALUES**","9d6e74c9":"# BUILD NN \n**BUILD A NEURAL NETWORK WITH TWO HIDDEN LAYERS WITH RELU ACTIVATION FUNCTION AND OUTPUT LAYER WITH SOFTMAX ACTIVATION FUNCTION. LOSS FUNCTION USED HERE ID SPARSE CATEGORICAL CROSS ENTROPY**","14066c16":"# CLASSIFICATION REPORT","3dfd972a":"# MULTICLASS ROC CURVE","14bb4ef8":"# ROC_AUC_SCORE","cacb48b3":"**LOAD DATASET**","01ebdc0d":"**IMPORTING OF IMPORTANT LIBRARIES**","3ee75c04":"**CALCULATION OF F1 SCORE. **","dafb2b2c":"# PRECISION RECALL CURVE","27fd1663":"**BASIC STATISTICS OF DATASET FEATURES**","171276ed":"# To Classify the health of a fetus as Normal, Suspect or Pathological using CTG data\nCardiotocograms (CTGs) are a simple and cost accessible option to assess fetal health, allowing healthcare professionals to take action in order to prevent child and maternal mortality. The equipment itself works by sending ultrasound pulses and reading its response, thus shedding light on fetal heart rate (FHR), fetal movements, uterine contractions and more.","5177f666":"# CONFUSION MATRIX","5c26cf13":"**PLOTTING OF LOSS FUNCTION**"}}