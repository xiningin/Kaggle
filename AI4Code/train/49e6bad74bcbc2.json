{"cell_type":{"64275e86":"code","f294dc22":"code","8df34ab9":"code","0a4545d5":"code","6df74b60":"code","03af9d87":"code","d6395242":"code","9343880c":"code","5ff60f40":"code","1e0b4e33":"code","820b5a8c":"code","ac19064e":"code","22267b55":"code","ff54c527":"code","b7e95b70":"code","82df84a9":"code","dd7ed558":"code","243183c2":"markdown","aae9af30":"markdown","c7ee6d73":"markdown","495fcd23":"markdown"},"source":{"64275e86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plt\nimport matplotlib.pyplot as plt\n#\u0443\u0432\u0435\u043b\u0438\u0447\u0438\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10, 5\n#\u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0432 svg \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u0442\u043a\u0438\u043c\u0438\n%config InlineBackend.figure_format = 'svg' \n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f294dc22":"DATA_PATH = '\/kaggle\/input\/sf-dl-movie-genre-classification\/'\nPATH      = '\/kaggle\/working\/'","8df34ab9":"train = pd.read_csv(DATA_PATH+'train.csv',)\ntrain.head()","0a4545d5":"train.info()","6df74b60":"train.genre.value_counts().plot(kind='bar',figsize=(12,4),fontsize=10)\nplt.xticks(rotation=60)\nplt.xlabel(\"Genres\",fontsize=10)\nplt.ylabel(\"Counts\",fontsize=10)","03af9d87":"test = pd.read_csv(DATA_PATH+'test.csv',)\ntest.head()","d6395242":"!pip install fasttext","9343880c":"import fasttext","5ff60f40":"# NLP Preprocessing\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import remove_stopwords\n\ntrain.iloc[:, 2] = train.iloc[:, 2].apply(lambda x: ' '.join(simple_preprocess(x)))\ntest.iloc[:, 1] = test.iloc[:, 1].apply(lambda x: ' '.join(simple_preprocess(x)))","1e0b4e33":"import numpy as np\nfrom sklearn.model_selection import train_test_split\n\nft_train, ft_test = train_test_split(train, random_state=42, test_size=0.2, stratify = train['genre'])","820b5a8c":"def to_ft_label(s):\n  return '__label__'+s.replace(',','_').replace(' ','_').replace('-','_')\n\nlabels_dict = {}\nfor g in train['genre']:\n  labels_dict[to_ft_label(g)] = g","ac19064e":"col = ['genre', 'text']\n\n# train\ntrain_for_ft = ft_train[col]\ntrain_for_ft['genre']=[to_ft_label(s) for s in train_for_ft['genre']]\n\n# test\ntest_for_ft = ft_test[col]\ntest_for_ft['genre']=[to_ft_label(s) for s in test_for_ft['genre']]","22267b55":"train_for_ft.to_csv(PATH + r'train_for_ft.csv', index=False, sep=' ', header=False, escapechar=\" \")\ntest_for_ft.to_csv(PATH + r'test_for_ft.csv', index=False, sep=' ', header=False, escapechar=\" \")","ff54c527":"model = fasttext.train_supervised(PATH + 'train_for_ft.csv', lr = 0.9)","b7e95b70":"# Evaluating performance on the entire test file\nmodel.test(PATH + 'test_for_ft.csv') ","82df84a9":"def predict(test):\n    return labels_dict[ model.predict(test['text'], k=1)[0][0] ]\ntest['predictions'] = test.apply(predict,axis=1)\n\ntest.head()","dd7ed558":"submission = pd.DataFrame({'id':range(1, len(test) + 1),\n                           'genre':test['predictions'].values},\n                          columns=['id', 'genre'])\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","243183c2":"\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445, \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 FastText \u0447\u0443\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0443\u0447\u0438\u0442\u044c\u0441\u044f","aae9af30":"# Movie-Genre Classification [FastText solution]","c7ee6d73":"\u041d\u0443 \u0432\u043e\u0442, \u044f \u0412\u0430\u0441 \u043f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u044e, \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 0.58-0.59, \u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u043a\u043e\u043b\u043e 10 \u0441\u0435\u043a\u0443\u043d\u0434!!!\n\u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043d\u044f\u0442\u044c \u0434\u043e \u0443\u0440\u043e\u0432\u043d\u044f 0.61-0.62, \u043d\u043e \u0432\u0440\u044f\u0434 \u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 0.65.","495fcd23":"\u0417\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441 \u0434\u0438\u043a\u0442\u0443\u0435\u0442 \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0440\u043e\u0433\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d, \u0438 \u043f\u0435\u0440\u0435\u0434 \u0412\u0430\u043c\u0438 \u0432\u0441\u0442\u0430\u0451\u0442 Trade-off \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e-\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c-\u043f\u0430\u043c\u044f\u0442\u044c. \u0417\u0434\u043e\u0440\u043e\u0432\u043e, \u043a\u043e\u0433\u0434\u0430 \u0441\u0430\u043c\u043e\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0435\u0449\u0435 \u0438 \u043d\u0435 \u0443\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043f\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0431\u043e\u043b\u0435\u0435 \"\u0442\u044f\u0436\u0435\u043b\u044b\u043c\" \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c. \u041d\u043e \u0442\u0430\u043a \u0431\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430.\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 Movie-Genre Classification \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435, \u0431\u0435\u0437 \u0442\u044e\u043d\u0438\u043d\u0433\u0430, \u043f\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0431\u044b\u043b\u043e \u0431\u044b \u0431\u043b\u0438\u0437\u043a\u043e \u043a 60%, \u0430 \u0432\u0440\u0435\u043c\u044f, \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u0440\u044f\u043b\u043e\u0441\u044c \u0432 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u0445 \u0441\u0435\u043a\u0443\u043d\u0434, \u0430 \u043d\u0435 \u0432 \u0447\u0430\u0441\u0430\u0445. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c **FastText** (https:\/\/pypi.org\/project\/fasttext)\n\u041f\u043e\u0435\u0445\u0430\u043b\u0438!"}}