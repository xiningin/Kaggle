{"cell_type":{"e9cd5d7f":"code","95ee5875":"code","4d63b140":"code","77587c2e":"code","c173ce03":"code","3b22c1ce":"code","f3b71aae":"code","1918f791":"code","a34922e2":"code","7df46017":"code","7b01ff83":"code","25dea69e":"code","dc059a45":"code","5cd39dd3":"code","0b381de9":"code","38a935f5":"code","2c851d01":"code","f21c99ab":"code","187a5e68":"code","74eab1fe":"code","65944313":"code","2b37d27c":"code","3cd0357e":"code","508cd40c":"code","a06e815f":"code","d60a5ef6":"code","3f4d04db":"code","09840dc1":"code","03f25dfa":"code","a7139352":"code","c86f70b9":"code","497c2b29":"markdown","d945a3f4":"markdown","626ca9b8":"markdown","362b8794":"markdown","42a9baf0":"markdown"},"source":{"e9cd5d7f":"#libraries importing\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O \nimport matplotlib.pyplot as plt #Visualization\nimport types\nfrom botocore.client import Config","95ee5875":"#Data set import \n\n\ndata = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata.head()\n","4d63b140":"data.shape","77587c2e":"#dataset summary \ndata.info()\n#3  float64 columns and 4 categorical culumns","c173ce03":"#dataset summary \ndata.describe()","3b22c1ce":"#convert Confirmed\tDeaths\tRecovered columns to int values\ndata['Confirmed']=data['Confirmed'].astype(int)\ndata['Deaths']=data['Deaths'].astype(int)\ndata['Recovered']=data['Recovered'].astype(int)\n\n#Clean Data: remove serial number column \ndata.drop(['SNo'], axis=1, inplace=True)\n#Replace Mainland China with China\ndata.replace({'Country': 'Mainland China'}, 'China', inplace=True)\ndata.info()","f3b71aae":"#check if there is empty values\ndata.isnull().any()\n","1918f791":"#Find rows with empty values\ndata[data.isnull().any(axis=1)]\n","a34922e2":"#Most affected country and chinese province\nprint('Most affected countries are:',data.groupby('Country\/Region')['Confirmed'].sum().sort_values(ascending=False))\n#Most affected Province\/State\nprint('Most affected countries are:',data.groupby('Province\/State')['Confirmed'].sum().sort_values(ascending=False))\nprint('Most affected country is China with:',data.loc[data['Country\/Region'] == 'Mainland China'].sum())","7df46017":"#No.of Countries  affected with Virus\ndata['Country\/Region'].unique()","7b01ff83":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nplt.rcParams[\"figure.figsize\"] = (16,9)\nplt.figure(figsize=(16,9));\n","25dea69e":"data[['Confirmed', 'Deaths', 'Recovered']].sum().plot(kind='bar')","dc059a45":"plt.figure(figsize=(12,7))\nchart = sns.countplot(data=data, x='Country\/Region', palette='Set1')\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right', fontweight='light');","5cd39dd3":"#data[data['Country\/Region'] != 'Mainland China'].groupby('ObservationDate').max().plot(kind='line') #except China","0b381de9":"#No of persons with confirmed virus is icreasing, Good news: No of death is stable.","38a935f5":"data.loc[data['Country\/Region'] == 'Mainland China'].groupby('ObservationDate').max().plot(kind='line') #In China","2c851d01":"train=int(data.groupby('ObservationDate')['Confirmed'].sum().reset_index().shape[0] * 0.8)\ntest=data.groupby('ObservationDate')['Confirmed'].sum().reset_index().shape[0]-train","f21c99ab":"confirmed_training_dataset = pd.DataFrame(data.groupby('ObservationDate')['Confirmed'].sum().reset_index()).rename(columns={'Date': 'x', 'Confirmed': 'y'})\nX_confirmed = np.array(confirmed_training_dataset.y)\n#X_confirmed=X_confirmed[:, None]\nX_confirmed_train=X_confirmed[:train, None]\nX_confirmed_test=X_confirmed[test:, None]","187a5e68":"death_training_dataset = pd.DataFrame(data.groupby('ObservationDate')['Deaths'].sum().reset_index()).rename(columns={'Date': 'x', 'Deaths': 'y'})\nX_death = np.array(death_training_dataset.y)\n#X_death=X_death[:, None]\nX_death_train=X_death[:train, None]\nX_death_test=X_death[test:, None]","74eab1fe":"recovered_training_dataset = pd.DataFrame(data.groupby('ObservationDate')['Recovered'].sum().reset_index()).rename(columns={'Date': 'x', 'Recovered': 'y'})\nX_recovered = np.array(recovered_training_dataset.y)\n#X_recovered=X_recovered[:, None]\nX_recovered_train=X_recovered[:train, None]\nX_recovered_test=X_recovered[test:, None]\n","65944313":"#Visualization of cloud points Confirmed Vs Death\nplt.scatter(X_confirmed,X_death)\n\nplt.title('Cloud points: Confirmed Vs Death ')\nplt.xlabel('Confirmed')\nplt.ylabel('Death')\n\nplt.show()","2b37d27c":"#Visualization of cloud points Confirmed Vs Recovered\nplt.scatter(X_confirmed,X_recovered)\nplt.title('Cloud points: Confirmed Vs recovered ')\nplt.xlabel('Confirmed')\nplt.ylabel('Recovered')\nplt.show()","3cd0357e":"# Fit linear model\nfrom sklearn.linear_model import LinearRegression\nreg_death1 = LinearRegression().fit(X_confirmed_train, X_death_train)\nreg_recovered1 = LinearRegression().fit(X_confirmed_train, X_recovered_train)","508cd40c":"# Fit Ridge Regression model\nfrom sklearn import linear_model\nreg_death2 = linear_model.Ridge(alpha=.5).fit(X_confirmed_train, X_death_train)\nreg_recovered2 = linear_model.Ridge(alpha=.5).fit(X_confirmed_train, X_recovered_train)","a06e815f":"# Fit LARS Lasso model\nfrom sklearn import linear_model\nreg_death3 = linear_model.LassoLars(alpha=.1).fit(X_confirmed_train, X_death_train)\nreg_recovered3 = linear_model.LassoLars(alpha=.1).fit(X_confirmed_train, X_recovered_train)","d60a5ef6":"#Prediction\nreg_death1.predict(X_death_test)","3f4d04db":"reg_recovered1.predict(X_recovered_test)","09840dc1":"## Plot outputs\nplt.title('Prediction: Confirmed Vs Recovered ')\nplt.scatter(X_recovered_test, X_recovered_test,  color='black')\nplt.plot(X_recovered_test, X_recovered_test, color='green', linewidth=3)\n\nplt.xticks(())\nplt.yticks(())\n\nplt.show()","03f25dfa":"## Plot outputs\nplt.title('Prediction: Confirmed Vs Recovered ')\nplt.scatter(X_confirmed_test, X_death_test,  color='black')\nplt.plot(X_confirmed_test, X_death_test, color='red', linewidth=3)\n\n#plt.xticks(())\n#plt.yticks(())\n\nplt.show()","a7139352":"reg_death.predict([[1000000],])#predict the death rate when No. of persons with confirmed coronavirus is 1M","c86f70b9":"reg_recovered.predict([[1000000],])#predict the recovering rate when No. of persons with confirmed coronavirus is 1M","497c2b29":"#Good predicted news!!! ","d945a3f4":"#---------------------Data importing","626ca9b8":"#---------------------Data Exploration-cleansing-converting-Correcting Completing","362b8794":"#---------------------Prediction --","42a9baf0":"#---------------------Dataset Visualisation"}}