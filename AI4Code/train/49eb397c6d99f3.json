{"cell_type":{"1a73932e":"code","5ad1b508":"code","7dc57d44":"code","28e3a510":"code","aef21498":"code","9eb0dfdf":"code","96325173":"code","9ff8a21e":"code","5882f4db":"code","140c9147":"code","961a60e3":"code","d1387e5e":"code","f3743a67":"code","446292d6":"markdown","20047bf1":"markdown"},"source":{"1a73932e":"!pip install keras-toolkit==0.1.0rc6 -q","5ad1b508":"from functools import partial\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport random\nimport tensorflow as tf\nfrom pathlib import Path\nfrom tensorflow.keras import applications\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import losses\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras import metrics\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications import resnet\nfrom sklearn.model_selection import train_test_split\nimport keras_toolkit as kt\nfrom kaggle_datasets import KaggleDatasets","7dc57d44":"target_shape = (200, 200)\ndef preprocess_image(filename, target_shape=target_shape):\n    \"\"\"\n    Load the specified file as a JPEG image, preprocess it and\n    resize it to the target shape.\n    \"\"\"\n\n    img_str = tf.io.read_file(filename)\n    img = tf.image.decode_jpeg(img_str, channels=3)\n    img = tf.image.resize(img, target_shape)\n    \n    # Resnet-style preprocessing, see: https:\/\/git.io\/JYo77\n    mean = [103.939, 116.779, 123.68]\n    img = img[..., ::-1]\n    img -= mean\n\n    return img\n\n\ndef build_triplets_dset(df, bsize=32, cache=True, shuffle=False):\n    \"\"\"\n    Given the filenames corresponding to the three images, load and\n    preprocess them.\n    \"\"\"\n    \n    build_dataset = partial(\n        kt.image.build_dataset,\n        decode_fn=preprocess_image,\n        bsize=bsize,\n        cache=cache,\n        shuffle=False\n    )\n\n    danchor = build_dataset(df.anchor)\n    dpositive = build_dataset(df.positive)\n    dnegative = build_dataset(df.negative)\n\n    dset = tf.data.Dataset.zip((danchor, dpositive, dnegative))\n    \n    if shuffle:\n        dset = dset.shuffle(shuffle)\n    \n    return dset","28e3a510":"COMPETITION_NAME = 'shopee-product-matching'\nstrategy = kt.accelerator.auto_select(verbose=True)\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('shopee-training-images-200px-jpg')\nBATCH_SIZE = strategy.num_replicas_in_sync * 16","aef21498":"train = pd.read_csv('..\/input\/shopee-generate-data-for-triplet-loss\/train_triplets_imgs.csv')\n\ntrain = train.apply(lambda col: GCS_DS_PATH + '\/' + col)\ntrain_paths, val_paths = train_test_split(train, train_size=0.8, random_state=42)\ntrain_paths.head()","9eb0dfdf":"dtrain = build_triplets_dset(\n    train_paths,\n    bsize=BATCH_SIZE,\n    cache=True,\n    shuffle=8192\n)\n\ndvalid = build_triplets_dset(\n    val_paths,\n    bsize=BATCH_SIZE,\n    cache=True,\n    shuffle=False\n)","96325173":"class DistanceLayer(layers.Layer):\n    \"\"\"\n    This layer is responsible for computing the distance between the anchor\n    embedding and the positive embedding, and the anchor embedding and the\n    negative embedding.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n    def call(self, anchor, positive, negative):\n        ap_distance = tf.reduce_sum(tf.square(anchor - positive), -1)\n        an_distance = tf.reduce_sum(tf.square(anchor - negative), -1)\n        return (ap_distance, an_distance)\n\n\nwith strategy.scope():\n    base_cnn = resnet.ResNet50(\n        weights=\"imagenet\", input_shape=target_shape + (3,), include_top=False, pooling='avg',\n    )\n    dropout = layers.Dropout(0.5, name='dropout')\n    reduce = layers.Dense(512, activation='linear', name='reduce')\n\n    trainable = False\n    for layer in base_cnn.layers:\n        if layer.name == \"conv5_block1_out\":\n            trainable = True\n        layer.trainable = trainable\n        \n    anchor_input = layers.Input(name=\"anchor\", shape=target_shape + (3,))\n    positive_input = layers.Input(name=\"positive\", shape=target_shape + (3,))\n    negative_input = layers.Input(name=\"negative\", shape=target_shape + (3,))\n\n    distances = DistanceLayer()(\n        reduce(dropout(base_cnn(anchor_input))),\n        reduce(dropout(base_cnn(positive_input))),\n        reduce(dropout(base_cnn(negative_input))),\n    )\n\n    siamese_network = Model(\n        inputs=[anchor_input, positive_input, negative_input], outputs=distances\n    )\n\nsiamese_network.summary()","9ff8a21e":"class SiameseModel(Model):\n    \"\"\"The Siamese Network model with a custom training and testing loops.\n\n    Computes the triplet loss using the three embeddings produced by the\n    Siamese Network.\n\n    The triplet loss is defined as:\n       L(A, P, N) = max(\u2016f(A) - f(P)\u2016\u00b2 - \u2016f(A) - f(N)\u2016\u00b2 + margin, 0)\n    \"\"\"\n\n    def __init__(self, siamese_network, margin=0.5):\n        super(SiameseModel, self).__init__()\n        self.siamese_network = siamese_network\n        self.margin = margin\n        self.loss_tracker = metrics.Mean(name=\"loss\")\n\n    def call(self, inputs):\n        return self.siamese_network(inputs)\n\n    def train_step(self, data):\n        # GradientTape is a context manager that records every operation that\n        # you do inside. We are using it here to compute the loss so we can get\n        # the gradients and apply them using the optimizer specified in\n        # `compile()`.\n        with tf.GradientTape() as tape:\n            loss = self._compute_loss(data)\n\n        # Storing the gradients of the loss function with respect to the\n        # weights\/parameters.\n        gradients = tape.gradient(loss, self.siamese_network.trainable_weights)\n\n        # Applying the gradients on the model using the specified optimizer\n        self.optimizer.apply_gradients(\n            zip(gradients, self.siamese_network.trainable_weights)\n        )\n\n        # Let's update and return the training loss metric.\n        self.loss_tracker.update_state(loss)\n        return {\"loss\": self.loss_tracker.result()}\n\n    def test_step(self, data):\n        loss = self._compute_loss(data)\n\n        # Let's update and return the loss metric.\n        self.loss_tracker.update_state(loss)\n        return {\"loss\": self.loss_tracker.result()}\n\n    def _compute_loss(self, data):\n        # The output of the network is a tuple containing the distances\n        # between the anchor and the positive example, and the anchor and\n        # the negative example.\n        ap_distance, an_distance = self.siamese_network(data)\n\n        # Computing the Triplet Loss by subtracting both distances and\n        # making sure we don't get a negative value.\n        loss = ap_distance - an_distance\n        loss = tf.maximum(loss + self.margin, 0.0)\n        return loss\n\n    @property\n    def metrics(self):\n        # We need to list our metrics here so the `reset_states()` can be\n        # called automatically.\n        return [self.loss_tracker]","5882f4db":"with strategy.scope():\n    siamese_model = SiameseModel(siamese_network)\n    siamese_model.compile(optimizer=optimizers.Adam(0.0001))","140c9147":"hist = siamese_model.fit(dtrain, epochs=10, validation_data=dvalid)","961a60e3":"with strategy.scope():\n    encoder = tf.keras.Sequential([\n        siamese_model.siamese_network.get_layer('resnet50'),\n        siamese_model.siamese_network.get_layer('dropout'),\n        siamese_model.siamese_network.get_layer('reduce'),\n    ])\n\n    encoder.save('encoder.h5')","d1387e5e":"siamese_model.save_weights('siamese_model.h5')\nsiamese_model.siamese_network.save_weights('siamese_network.h5')\nsiamese_model.siamese_network.get_layer('resnet50').save_weights('resnet50.h5')","f3743a67":"import plotly.express as px\npx.line(hist.history)","446292d6":"Documentation for `kt.image.build_dataset` [here](https:\/\/github.com\/xhlulu\/keras-toolkit\/blob\/master\/docs\/references.md#build_dataset).","20047bf1":"Copied with various changes from this excellent tutorial: https:\/\/keras.io\/examples\/vision\/siamese_network\/\n\nWhat I changed:\n* Used [keras-toolkit here](https:\/\/github.com\/xhlulu\/keras-toolkit) to simplify the workflow. \n* Save various pieces of the model that might be useful\n* Use Average pooling instead of flattening ResNet output\n* Very different data loading mechanism"}}