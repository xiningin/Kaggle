{"cell_type":{"381879bd":"code","7da4a68b":"code","a0b15fc9":"code","23a8893c":"code","07356a41":"code","080cd6d5":"code","3018c140":"code","ce40d8e3":"code","d6ba769b":"code","994ef667":"code","150247f3":"code","33e9efad":"code","22a8d1cf":"code","5803c1a5":"code","8ff4a91b":"code","4d9a1461":"code","86a616e8":"code","15cbc056":"code","da05aeab":"code","563cb548":"code","b693026b":"code","cb14ddde":"code","408d5536":"code","53eca2aa":"code","82de3e5c":"code","6a01eb17":"code","92dfa436":"code","0aeea92c":"code","dad38a43":"code","d730ae0d":"code","27a2692e":"code","03c7d574":"code","738e09f1":"code","cdfa44a8":"code","126d7540":"code","be878c17":"code","1642b64d":"code","2420ae31":"code","2a3488dd":"code","b0bbb3c6":"code","2d2dc6f1":"code","9df76dfd":"code","3627b5d6":"code","1d386517":"code","7b82c8d6":"code","91d82919":"code","01f6c31e":"code","9d540917":"code","f93ea680":"code","b162d0b4":"code","a4370cfe":"code","7fdfb25d":"code","bd03ade6":"code","9b1b1685":"code","87985046":"code","a3aeb0d0":"code","16629896":"code","99f217dd":"code","7976c085":"code","4aad0bca":"code","e3b4c8eb":"code","cc0655cb":"code","9ef94c16":"code","5a487f07":"code","714ee331":"code","f86c246d":"code","5f173c24":"code","6c7485c6":"code","af8a4282":"code","657fbbbf":"code","9d16a5a8":"code","aced31ca":"code","46bdd2a7":"code","5aa740c6":"code","af66f92b":"code","3e23cc90":"code","d200710f":"code","ebed1456":"code","3d616f37":"code","5a09360a":"code","50176f1e":"code","bdb237ae":"code","9f161630":"code","0e80e6a9":"code","67f994e8":"code","44a39295":"code","bd06843e":"code","2d9d2099":"code","2e6f651a":"code","6ead4030":"code","fc5135c6":"code","363c1089":"code","aa4aef96":"code","3bac6793":"markdown","dfd62162":"markdown","7ae5c843":"markdown","40e59ab8":"markdown","946220cd":"markdown","3529ba08":"markdown","5321d5b3":"markdown","59eb127d":"markdown","7c0cf0d3":"markdown","735cf844":"markdown","eb42f048":"markdown","a982e77c":"markdown","57a74e45":"markdown","d5f7f160":"markdown","f5378682":"markdown","6df59373":"markdown","ac811799":"markdown","065a1106":"markdown","8459fba7":"markdown","844497a7":"markdown","9b9d968c":"markdown","8ad7b755":"markdown","13730d06":"markdown","e804fb94":"markdown","e3c5eddf":"markdown","8e04b655":"markdown","26f1250e":"markdown","0e1b85a0":"markdown","05ccd262":"markdown","18e4f64c":"markdown","09548399":"markdown","002f0cc3":"markdown","c9bcc299":"markdown","bbcd4ccd":"markdown","3da40bb3":"markdown","351a60ca":"markdown","79b710fc":"markdown","c1aaf2d4":"markdown","0a6569d2":"markdown","edbb95ca":"markdown","f8e0042b":"markdown","9cd670c6":"markdown","08164815":"markdown"},"source":{"381879bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current sessio","7da4a68b":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId = test_df[\"PassengerId\"]","a0b15fc9":"train_df.columns","23a8893c":"train_df.info()","07356a41":"train_df.head()","080cd6d5":"train_df.describe()","3018c140":"train_df.info()","ce40d8e3":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    var = train_df[variable]\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","d6ba769b":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","994ef667":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts))","150247f3":"def plot_hist(variable):\n    \n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","33e9efad":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","22a8d1cf":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","5803c1a5":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","8ff4a91b":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","4d9a1461":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","86a616e8":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i,v in outlier_indices.items() if v > 2)\n        \n    return multiple_outliers","15cbc056":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","da05aeab":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","563cb548":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","b693026b":"train_df.columns[train_df.isnull().any()]","cb14ddde":"train_df.isnull().sum()","408d5536":"train_df.head()","53eca2aa":"train_df[train_df[\"Embarked\"].isnull()]","82de3e5c":"train_df.boxplot(column = \"Fare\",by = \"Embarked\")\nplt.show()","6a01eb17":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","92dfa436":"train_df[train_df[\"Fare\"].isnull()]","0aeea92c":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","dad38a43":"train_df[train_df[\"Fare\"].isnull()]","d730ae0d":"list1 = [\"SibSp\",\"Parch\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","27a2692e":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","03c7d574":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","738e09f1":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","cdfa44a8":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","126d7540":"g = sns.FacetGrid(train_df,col = \"Survived\",row = \"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins = 25)\ng.add_legend()\nplt.show()","be878c17":"g = sns.FacetGrid(train_df, row = \"Embarked\",size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","1642b64d":"g = sns.FacetGrid(train_df, col = \"Survived\",row = \"Embarked\",size=2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","2420ae31":"train_df[train_df[\"Age\"].isnull()]","2a3488dd":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","b0bbb3c6":"sns.factorplot(x=\"Sex\",y=\"Age\",hue = \"Pclass\",data=train_df,kind=\"box\")\nplt.show()","2d2dc6f1":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","9df76dfd":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","3627b5d6":"sns.heatmap(train_df[[\"Age\",\"Parch\",\"SibSp\",\"Pclass\",\"Sex\"]].corr(),annot = True)\nplt.show()","1d386517":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_median = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_median","7b82c8d6":"train_df[train_df[\"Age\"].isnull()]","91d82919":"train_df[\"Name\"].head()","01f6c31e":"name = train_df[\"Name\"] \ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","9d540917":"train_df[\"Title\"].head()","f93ea680":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation = 90)\nplt.show()","b162d0b4":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Other\")","a4370cfe":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation = 90)\nplt.show()","7fdfb25d":"train_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Mrs\" or i == \"Mlle\" or i == \"Ms\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","bd03ade6":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation = 90)\nplt.show()","9b1b1685":"g = sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Ms\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","87985046":"train_df.drop([\"Name\"],axis=1,inplace=True)","a3aeb0d0":"train_df.head()","16629896":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])","99f217dd":"train_df.head()","7976c085":"train_df.head()","4aad0bca":"train_df[\"FSize\"] = train_df[\"Parch\"] + train_df[\"SibSp\"] + 1","e3b4c8eb":"train_df.head()","cc0655cb":"g = sns.factorplot(x=\"FSize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survived\")\nplt.show()","9ef94c16":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"FSize\"]]","5a487f07":"train_df.head()","714ee331":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","f86c246d":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survived\")\nplt.show()","5f173c24":"train_df = pd.get_dummies(train_df, columns=[\"family_size\"])","6c7485c6":"train_df.head()","af8a4282":"train_df[\"Embarked\"].head()","657fbbbf":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","9d16a5a8":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","aced31ca":"train_df[\"Ticket\"].head(20)","46bdd2a7":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\",\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","5aa740c6":"train_df[\"Ticket\"].head(20)","af66f92b":"train_df.head()","3e23cc90":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(10)","d200710f":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","ebed1456":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns=[\"Pclass\"])","3d616f37":"train_df.head()","5a09360a":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])\ntrain_df.head()","50176f1e":"train_df.drop(labels = [\"Cabin\",\"PassengerId\"],axis=1,inplace=True)","bdb237ae":"train_df.columns","9f161630":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","0e80e6a9":"train_df_len","67f994e8":"test = train_df[train_df_len:]\ntest.drop([\"Survived\"],axis=1,inplace=True)","44a39295":"test.head()","bd06843e":"train = train_df[:train_df_len]\nX_train = train.drop([\"Survived\"],axis=1)\ny_train = train[\"Survived\"]\nX_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","2d9d2099":"logr = LogisticRegression(solver=\"liblinear\")\nlogr.fit(X_train,y_train)\nacc_logr_train = round(logr.score(X_train,y_train)*100,2)\nacc_logr_test = round(logr.score(X_test,y_test)*100,2)\nprint(\"Training accuracy: {}\".format(acc_logr_train))\nprint(\"Test accuracy: {}\".format(acc_logr_test))","2e6f651a":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\":range(10,500,20),\n                \"max_depth\":range(1,20,2)}\nsvc_param_grid = {\"kernel\":[\"rbf\"],\n                 \"gamma\":[0.001, 0.01, 0.1, 1],\n                 \"C\":[1,10,40,100,200,300,1000]}\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\nlogr_param_grid = {\"C\":np.logspace(-3,3,7),\n                  \"penalty\":[\"l1\",\"l2\"],\n                  \"solver\":[\"liblinear\"]}\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10 , dtype=int).tolist(),\n                 \"weights\":[\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logr_param_grid,\n                   knn_param_grid]","6ead4030":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","fc5135c6":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","363c1089":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                          voting = \"soft\",n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","aa4aef96":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_passengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\",index = False)","3bac6793":"<a id = \"9\"><a\/><br>\n## Find Missing Value\n","dfd62162":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","7ae5c843":"<a id = \"7\"><a\/><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Vlaue","40e59ab8":"<a id=\"30\"><a><br>\n# Train-Test Split\n","946220cd":"<a id=\"33\"><a><br>\n# Prediction and Submission","3529ba08":"<a id=\"18\"><a><br>\n# Embarked -- Sex -- Pclass -- Survived","5321d5b3":"<a id = \"3\"><a\/><br>\n# Univariate Variable Analysis\n* Categorical Variable:Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Varieble:Fare, age and passengerId","59eb127d":"<a id = \"6\"><a\/><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived  \n* Parch - Survived\n* SibSp - Survived    ","7c0cf0d3":"<a id =\"22\"><a><br>\n## Name -- Title","735cf844":"<a id=\"17\"><a><br>\n# Pclass -- Survived -- Age","eb42f048":"<a id=\"31\"><a><br>\n# Simple Logistic Regression","a982e77c":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.\n\n","57a74e45":"<a id = \"7\"><a\/><br>\n# Outlier Detection","d5f7f160":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.The sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = \"blue\">\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualizaton](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modeling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Ensemble Modeling](#33)","f5378682":"<a id=\"12\"><a><br>\n# Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","6df59373":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch\n* object(5): Cabin, Embarked, Sex, Name and Ticket\n","ac811799":"<a id=\"14\"><a><br>\n# Parch -- Survived","065a1106":"<a id=\"33\"><a><br>\n# Ensemble Modeling\n","8459fba7":"<a id=\"26\"><a><br>\n# Pclass\n    ","844497a7":"<a id=\"27\"><a><br>\n# Sex","9b9d968c":"<a id =\"25\"><a><br>\n# Ticket","8ad7b755":"<a id=\"32\"><a><br>\n# Hyprparameter Tuning -- Grid Search -- Validation\n    We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n    * Decision Tree\n    * SVM\n    * Random Forest\n    * KNN\n    * Logistic Regression\n    \n","13730d06":"<a id=\"15\"><a><br>\n# Pclass -- Survived","e804fb94":"<a id = \"10\"><a\/><br>\n## Fill Missing Value\n* Embarking has 2 missing value\n* Fare has only 1","e3c5eddf":"<a id =\"23\"><a><br>\n# Family Size","8e04b655":"<a id =\"24\"><a><br>\n# Embarked","26f1250e":"<a id = \"16\"><a><br>\n# Age -- Survived","0e1b85a0":"<a id = \"1\"><a\/><br>\n## Load and Check Data","05ccd262":"<a id=\"11\"><a><br>\n# Visualization","18e4f64c":"<a id = \"4\"><a\/><br>\n## Categorical Variable","09548399":"<a id=\"13\"><a><br>\n# SibSp -- Survived","002f0cc3":"<a id =\"21\"><a><br>\n# Feature Engineering","c9bcc299":"<a id=\"29\"><a><br>\n# Modeling","bbcd4ccd":"<a id = \"5\"><a\/><br>\n## Numerical Variable","3da40bb3":"Small families have more chance to survive than large families","351a60ca":"<a id=\"20\"><a><br>\n# Fill Missing: Age Feature","79b710fc":"<a id=\"28\"><a><br>\n# Drop Passenger ID and Cabin","c1aaf2d4":"* Fare feature seems to have correlation with survived feature (0.26).","0a6569d2":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","edbb95ca":"Sex is not informative for prediction, age distribution seems to be same","f8e0042b":"<a id = \"2\"><a\/><br>\n## Variable Description\n1. PassengerId: uniqe number to each passenger\n1. Survived: passenger survived:1 or died:0\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of person\n1. Age: age of person\n1. SibSp: numbe rof siblings\/spouses\n1. Parch: number of parents\/children\n1. Ticket: ticket number\n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","9cd670c6":"<a id =\"19\"><a><br>\n# Embarked -- Sex -- Fare -- Survived","08164815":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3"}}