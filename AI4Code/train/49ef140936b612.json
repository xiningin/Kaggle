{"cell_type":{"ab83cee8":"code","82fe62de":"code","1beca03d":"code","af3d831a":"code","8a78d494":"code","7c070c08":"code","de87ce7c":"code","a1b1869e":"code","42c8d6a7":"code","7849a3b2":"code","3d03c12c":"code","3131199b":"code","00e4eb55":"code","ba85911f":"code","493b95fe":"code","469e25ce":"code","5289eef6":"code","1c146d96":"code","8780c266":"markdown","66ce6d0f":"markdown","4d1f20fb":"markdown","5bb64f4d":"markdown"},"source":{"ab83cee8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split,ShuffleSplit,GridSearchCV\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,mean_squared_error,roc_curve,roc_auc_score,classification_report,r2_score,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC,SVR\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,GradientBoostingRegressor\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nimport seaborn as sns; sns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        df=pd.read_csv(os.path.join(dirname, filename))\n\n","82fe62de":"df.shape","1beca03d":"df.head()","af3d831a":"df.columns","8a78d494":"df.info()","7c070c08":"df.isnull().sum()","de87ce7c":"df.describe().T","a1b1869e":"columns=df.columns\nfor col in columns:\n    print(df[col].value_counts())","42c8d6a7":"f,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5, linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","7849a3b2":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")\n\nframes = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","3d03c12c":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","3131199b":"y = df.target.values\nX_data = df.drop(['target'], axis = 1)","00e4eb55":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler().fit(X_data)\nX = scaler.transform(X_data)","ba85911f":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 1)","493b95fe":"list_model=[\"Linear Regression\",\"Naive Bayes\", \"KNN\",\"SVC_linear\",\"SVC_rbf\",\"Decision Tree\",\"Random Forest\"]\n\n#all models\nlr = LogisticRegression(solver = 'liblinear')\nnb = GaussianNB()\nknn = KNeighborsClassifier()\nsvc_linear = SVC(kernel='linear')\nsvc_rbf = SVC(kernel='rbf')\ncart = DecisionTreeClassifier()\nrf = RandomForestClassifier()\n\nlist_abr=[lr,nb,knn,svc_linear,svc_rbf,cart,rf]\naccuracies={}\ncon_mat={}\n\nfor i in range(0,7):\n    model=list_abr[i].fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    acc=accuracy_score(y_test,y_pred)\n    cm = confusion_matrix(y_test,y_pred)\n    accuracies[list_model[i]] = acc\n    con_mat[list_model[i]] = cm","469e25ce":"accuracies","5289eef6":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"yellow\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.show()","1c146d96":"plt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nfor i in range(1,8):\n\n    plt.subplot(3,3,i)\n    plt.title(list_model[i-1] + \" Confusion Matrix\")\n    sns.heatmap(con_mat[list_model[i-1]],annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n    \nplt.show()","8780c266":"Without Tuning","66ce6d0f":"Comparing Models","4d1f20fb":"Confusion Matrix","5bb64f4d":"1-Linear Regression\n2-Naive Bayes\n3-KNN\n4-SVM\n5-Decision Tree\n6-Random Forest"}}