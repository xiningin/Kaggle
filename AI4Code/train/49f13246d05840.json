{"cell_type":{"6f19763c":"code","15708a0a":"code","0cf1ed98":"code","957cd62e":"code","80c17458":"code","c9df9427":"code","14b73ecd":"code","9a3f78c2":"code","44b92f08":"code","43dd8676":"code","028bed26":"code","69f9b1aa":"code","3d090f84":"code","0040855b":"code","483c10e7":"code","021fc059":"code","af68203f":"code","499dd005":"code","3af353b1":"code","5a1a3789":"code","18402f13":"code","878cb620":"code","794cce5d":"code","33ee95d4":"code","6459190f":"markdown","5854f32f":"markdown","72f30d5f":"markdown","bb6402a2":"markdown","c3a21457":"markdown","bb68fa3a":"markdown","29c8edd3":"markdown","3a25f0c7":"markdown","7466f7c0":"markdown","531911cf":"markdown","8630df11":"markdown","d01c5685":"markdown","f7c7d087":"markdown","e9f2c51f":"markdown","d6b12790":"markdown","e5a7b46b":"markdown","2a883893":"markdown","16b7cc21":"markdown","8533b4c5":"markdown","04122021":"markdown"},"source":{"6f19763c":"import warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nfrom keras.utils import to_categorical\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPooling2D,Flatten, Dropout\nfrom matplotlib import pyplot as plt\nimport pandas as pd","15708a0a":"traindf = pd.read_csv(\"..\/input\/train.csv\")\ntestdf = pd.read_csv(\"..\/input\/test.csv\")","0cf1ed98":"print(traindf.shape)\ntraindf.head()","957cd62e":"print(testdf.shape)\ntestdf.head()","80c17458":"train_lbls = traindf.label\nprint(len(train_lbls))\nprint(len(np.unique(train_lbls)))","c9df9427":"X_train = traindf.drop(labels = [\"label\"],axis = 1)\nprint(X_train.shape)","14b73ecd":"X_train = X_train \/ 255.0\ntest = testdf.as_matrix() \/ 255.0","9a3f78c2":"test_data = test.astype('float32')","44b92f08":"X_train = X_train.values.reshape(-1,28,28,1)","43dd8676":"test_data = test.reshape(-1, 28, 28, 1)","028bed26":"train_labels_one_hot = to_categorical(train_lbls)\n\n#Display the category label using one-hot encoding\nprint('Original label : ', train_lbls[2])\nprint('After conversion to categorical ( one-hot ) : ', train_labels_one_hot[2])","69f9b1aa":"model=Sequential()\n\nmodel.add(Conv2D(kernel_size=5,strides=1,filters=64,\n                padding='same',activation='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(kernel_size=5,strides=1,filters=64,\n                padding='same',activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=2,strides=2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(kernel_size=5,strides=1,filters=64,\n                padding='same',activation='relu'))\nmodel.add(Conv2D(kernel_size=5,strides=1,filters=64,\n                padding='same',activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=2,strides=2))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))","3d090f84":"model.summary()","0040855b":"from keras.optimizers import Adam\noptimizer=Adam(lr=1e-3)","483c10e7":"model.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=[\"accuracy\"])","021fc059":"history = model.fit(x=X_train, y=train_labels_one_hot,\n                    batch_size=256, epochs=10, verbose=1)","af68203f":"%matplotlib inline\n#Checking for overfitting\n\n#Plot the Loss Curves\nplt.figure(figsize=[8,6])\nplt.plot(history.history['acc'],'r',linewidth=3.0)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Plot',fontsize=16)","499dd005":"predictions = model.predict(test_data)\n\npredictions = [np.argmax(i) for i in predictions]\nlen(predictions)","3af353b1":"img_shape=(28,28)\n\ndef plot_images(images, cls_pred=None):\n    assert len(images) == 9\n    \n    # Create figure with 3x3 sub-plots.\n    fig, axes = plt.subplots(3, 3)\n    fig.subplots_adjust(hspace=0.3, wspace=0.3)\n\n    for i, ax in enumerate(axes.flat):\n        # Plot image.\n        ax.imshow(images[i].reshape(img_shape), cmap='binary')\n\n        # Show true and predicted classes.\n        xlabel = \"Pred: {0}\".format(cls_pred[i])\n\n        # Show the classes as the label on the x-axis.\n        ax.set_xlabel(xlabel)\n        \n        # Remove ticks from the plot.\n        ax.set_xticks([])\n        ax.set_yticks([])\n    \n    # Ensure the plot is shown correctly with multiple plots\n    # in a single Notebook cell.\n    plt.show()","5a1a3789":"images = test_data[9:18]\n\ny_pred=model.predict(x=images)\ncls_pred=np.argmax(y_pred,axis=1)\n\ncls_pred","18402f13":"y_pred = model.predict(x=images)\ncls_pred = np.argmax(y_pred, axis=1)","878cb620":"plot_images(images=images,\n           cls_pred=cls_pred)","794cce5d":"data = list(zip(list(range(1, 28001)), predictions))\n\nsubmission_df = pd.DataFrame(data, columns=['ImageId','Label'])\nsubmission_df.head()","33ee95d4":"submission_df.to_csv(\"Submission.csv\",index=False)","6459190f":"Using the Adam optimizer","5854f32f":"### Hence we have used Neural Networks to successfully predict handwritten image classes, with pretty high accuracy","72f30d5f":"### Compiling the model, using the Adam optimizer, with a categorical crossentropy loss so we can predict into multiple classes","bb6402a2":"Shape of the test and train labels to see how many test and train images we have","c3a21457":"There are 10 classes to classify the images into (0-9)","bb68fa3a":"Keras uses one hot encoding\n\nHence changing the labels from integer to categorical data","29c8edd3":"## Making the Keras Model","3a25f0c7":"### Making a submission file for Kaggle:","7466f7c0":"## Loading the dataset","531911cf":"## Library imports","8630df11":"Reshaping the training and test data so the neural network can take it as an input (4 dimensions)","d01c5685":"### Fitting out data onto the model, with 256 images at a time, for 10 epochs.","f7c7d087":"### Predicting the values of the test data","e9f2c51f":"### Plotting some image predictions from our neural model","d6b12790":"**Our data is now ready to be inputted into a neural network**","e5a7b46b":"We have 42,000 images, each one is 28x28 ","2a883893":"Converting values to lie between 0 and 1 (since they are currently digits between 0 and 255, denoting how black each pixel is)","16b7cc21":"### Plotting the accuracy","8533b4c5":"# Classifying hand drawn images into the digits they denote\n## An introduction to Keras using one of the most famous image classification problems\n\n**Please upvote if you find this kernel useful!**","04122021":"Adding dropout layers to reduce overfitting\n\n[Read more about layers here](https:\/\/forums.fast.ai\/t\/dense-vs-convolutional-vs-fully-connected-layers\/191\/2 \"Layers info.\")\n\nThe last Dense layer has 10 units (since we need to classify into 10 classes (0-9))"}}