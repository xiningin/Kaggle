{"cell_type":{"646d90a3":"code","6b1ac812":"code","cd73391d":"code","93918ff8":"code","5e132697":"code","01605509":"code","c3001d71":"code","026d831f":"code","6ae5b931":"code","ea93097a":"code","0b5f0a0f":"code","74d40932":"code","69f1a4c3":"code","eb37dfad":"code","f86244b3":"code","cd2588dc":"code","deace876":"code","e04cd8d2":"code","f1facad8":"code","d5a01851":"code","24adb9fb":"code","55f75008":"code","d97c5e45":"code","73b8f2ad":"code","ccb2e49f":"code","b84cdc85":"code","44164328":"code","784a1e1e":"code","83f0067d":"code","764e8334":"code","5077bb2f":"code","995e569c":"code","7aae13fc":"code","4e754429":"code","ce12c191":"code","6dd7ab84":"code","871a0e49":"markdown","ae6f538e":"markdown","67ec4edd":"markdown","60334ed9":"markdown","4358c336":"markdown","1fadfc4c":"markdown","a6549647":"markdown","79588d13":"markdown","1c26556c":"markdown"},"source":{"646d90a3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport zipfile # zip \ud30c\uc77c \ud480\uae30\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n\nimport os\nfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        # print(os.path.join(dirname, filename))\n        files.append(filename.split('.zip')[0])\n        with zipfile.ZipFile(os.path.join(dirname, filename),\"r\") as z:\n            z.extractall()","6b1ac812":"files","cd73391d":"departments = pd.read_csv('.\/'+files[0])\norder_products_train = pd.read_csv('.\/'+files[2], dtype = {'order_id' : np.int32, 'product_id' : np.int32,\n                                                           'add_to_cart_order' : np.int16, 'reordered' : np.int16})\norder_products_prior = pd.read_csv('.\/'+files[3], dtype = {'order_id' : np.int32, 'product_id' : np.int32,\n                                                           'add_to_cart_order' : np.int16, 'reordered' : np.int16})\norders = pd.read_csv('.\/'+files[4], dtype = {'order_id' : np.int32,'user_id' : np.int32,\n                                             'order_number' : np.int16,'order_dow' : np.int16,\n                                             'order_hour_of_day' : np.int16})\nproducts = pd.read_csv('.\/'+files[5])\naisles = pd.read_csv('.\/'+files[6])","93918ff8":"products_detail = pd.merge(products, aisles, on='aisle_id')\nproducts_detail = pd.merge(products_detail, departments, on='department_id')\n\norder_prior = pd.merge(order_products_prior, orders[['order_id', 'user_id']], on='order_id')\norder_train = pd.merge(order_products_train, orders[['order_id', 'user_id']], on='order_id')\n\ntrain_users = orders[orders['eval_set']=='train']['user_id'].values\n# train_users = np.sort(train_users) # train_user \uc5d0 \ud574\ub2f9\ud558\ub294 \uc720\uc800 \ubaa9\ub85d\ntest_users = orders[orders['eval_set']=='test']['user_id'].values\n# test_users = np.sort(test_users)\n\norder_prior_train = order_prior[order_prior['user_id'].isin(train_users)] # train \uc720\uc800\uc758 \uacfc\uac70 \uc8fc\ubb38\n# order_prior_train_all = pd.concat([order_prior_train, order_train]) # train \uc720\uc800\uc5d0 \ub300\ud55c order \uc815\ubcf4 \ucde8\ud569","5e132697":"## \uc804\uccb4 \ubb3c\uac74\uc5d0 \ub300\ud574\uc11c \uacfc\uac70 \uc2dc\uc810\ub4e4\uc758 \ud3c9\uade0\uac12\ub4e4\uc744 \uad6c\ud574\ubcf4\uc790\norder_prior_detail = pd.merge(order_prior, orders.drop(['user_id','eval_set'], axis=1), on='order_id')\norder_prior_detail","01605509":"product_reorder = order_prior_detail.groupby('product_id').sum()[['reordered']]\nlen(product_reorder),len(products_detail)","c3001d71":"# \uacfc\uac70\uc5d0 \ud55c\ubc88\ub3c4 \uc8fc\ubb38\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\ub4e4 \nordered_product = product_reorder.index\nall_product = products_detail.product_id\nnot_ordered_product = [a for a in all_product if a not in ordered_product]\nnot_ordered_product_detail = products_detail[products_detail['product_id'].isin(not_ordered_product)]\n\n# \uc8fc\ubb38\ub418\uc9c0 \uc54a\uc740 \ubb3c\uac74\uc774 train(\uac00\uc7a5 \ucd5c\uadfc \uc8fc\ubb38_\ud559\uc2b5\uc6a9)\uc5d0\uc11c \uc8fc\ubb38 \ub41c \uac8c \uc788\uc744\uae4c? - Yes\ndisplay(order_train[order_train['product_id'].isin(not_ordered_product)])","026d831f":"# \ud3c9\uade0 \uad6c\ub9e4 \uc2dc\uac04\ub300, \uc694\uc77c, add_to_cart_order \uc740 groupby \uc368\uc11c \uac00\uba74 \ub420 \ub4ef\nproduct_mean = order_prior_detail.groupby('product_id').mean()[['add_to_cart_order', 'order_dow','order_hour_of_day']].reset_index()\nproduct_mean.head()","6ae5b931":"# \uc7ac\uc8fc\ubb38\uc774 \uc5b4\ub290\uc815\ub3c4\ub85c \ub418\ub294\uc9c0 \ud655\uc778\ud574\ubcf4\uc790\na = order_prior_detail[order_prior_detail['days_since_prior_order'].notna()].groupby('reordered').count()['product_id']\na.apply(lambda x : x\/a.sum())","ea93097a":"user1_orders = order_prior_train[order_prior_train['user_id']==1]\nuser1_orders = pd.merge(user1_orders,orders[['order_id','order_number','order_dow','order_hour_of_day','days_since_prior_order']], on='order_id')\nuser1_orders.sort_values(by=['order_number','add_to_cart_order'], inplace=True)\n\nuser1_orders.head()","0b5f0a0f":"# \uc720\uc800\uac00 \uacfc\uac70\uc5d0 \uc0b0 \ubb3c\uac74 \uc885\ub958\nuser1_prior_products = user1_orders.product_id.unique()\n# \uc720\uc800\uac00 \uacfc\uac70\uc5d0 \uc8fc\ubb38\ud55c \ud69f\uc218\nuser1_orders_count = len(user1_orders.order_id.unique())\n# \uad6c\ub9e4\ud55c \ubb3c\uac74 \ubcc4\ub85c \uc7ac\uc8fc\ubb38 \ud69f\uc218\nuser1_products = user1_orders.groupby('product_id').sum()[['reordered']].reset_index()\nuser1_products = pd.merge(user1_products, products_detail[['product_id', 'product_name']], on='product_id')\n\n# \uae30\uc874 \ubb3c\uac74 \ubcc4 \uc7ac\uc8fc\ubb38\uc728\nuser1_products['reordered_ratio'] = user1_products['reordered'].apply(lambda x : x \/(len(user1_orders.order_id.unique())-1))\n# \uacfc\uac70\uc5d0 \ucd1d \uba87 \ubc88 \uad6c\ub9e4\ub97c \ud588\ub294\uac00? \nuser1_products['order_count'] = user1_products['reordered']+1\n# \uad6c\ub9e4 \ubb3c\uac74 \ucd1d \uac1c\uc218 \uc911 \uc774 \ubb3c\uac74\uc740 \uc5b4\ub290 \uc815\ub3c4 \ube44\uc911\uc744 \ucc28\uc9c0\ud558\ub294 \uac00? \nuser1_products['order_ratio'] = user1_products['order_count'].apply(lambda x : x\/len(user1_orders))\n\n# \ud574\ub2f9 \ubb3c\uac74\uc758 \ubb3c\uac74 \ud3c9\uade0 \uc8fc\uae30\ub294 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00? \nuser1_products['product_buy_term'] = user1_products['product_id'].apply(lambda x : user1_orders[(user1_orders['product_id'] == x) \\\n                                                                                                & (user1_orders['days_since_prior_order'] > 0)]['days_since_prior_order'].mean() \\\n                                                                       if len(user1_orders[(user1_orders['product_id'] == x)]) > 1 else np.nan)\n# \ud574\ub2f9 \ubb3c\uac74\uc744 \uc0ac\ub294 \ub370 \uc788\uc5b4\uc11c \ud3c9\uade0 \uc2dc\uac04\ub300\ub294 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00?\nuser1_products['product_buy_time'] = user1_products['product_id'].apply(lambda x : user1_orders[(user1_orders['product_id'] == x)]['order_hour_of_day'].mean())\n\nuser1_products.head()","74d40932":"# user_1 \uc774 \ucd5c\uc885\uc801\uc73c\ub85c \uc0b0 \ubb3c\uac74\uc740\nuser1_buy_final = order_train[order_train['user_id']==1].product_id.values\n\n# user_1\uc774 \uae30\uc874\uc5d0 \uc0b0 \ubb3c\uac74\ub4e4 \ub07c\ub9ac\uc758 \uc720\uc0ac\ub3c4\ub97c \uad6c\ud574\ubcf4\uc790 product_name + aisle or department\uc5b4\uc11c \uc0dd\uac01\ud574\uc57c\ud560 \ub4ef\nproducts_detail['product_name_lower'] = products_detail['product_name'].apply(lambda x : x.lower())\nproducts_detail['name+aisle'] = products_detail['product_name_lower'] + ' ' + products_detail['aisle']\nproducts_detail['name+department'] = products_detail['product_name_lower'] + ' ' + products_detail['department']\nproducts_detail['name+department+aisle'] = products_detail['product_name_lower'] + ' ' + products_detail['department'] + ' ' + products_detail['aisle']\n\n# user_1 \uc774 \uacfc\uac70\uc5d0 \uc0b0 \ubb3c\uac74 \uc774\ub984\n# user1_prior_products_name = products_detail[products_detail['product_id'].isin(user1_prior_products)]['name+department']","69f1a4c3":"count_vect = CountVectorizer(min_df=0, ngram_range=(1,2))\nproduct_mat = count_vect.fit_transform(user1_prior_products_name)\n\nproduct_sim = cosine_similarity(product_mat, product_mat)\nproduct_similarity = pd.DataFrame(product_sim, index = products_detail[products_detail['product_id'].isin(user1_prior_products)]['product_name'],\\\n                                  columns = products_detail[products_detail['product_id'].isin(user1_prior_products)]['product_name'])","eb37dfad":"user1_products['best_similar'] = user1_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False).index[1])\nuser1_products['best_similarity'] = user1_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False)[1])\nuser1_products","f86244b3":"# \uc0c8\ub85c\uc6b4 \ubb3c\uac74\uc774 \uc788\ub098\uc694? \nuser1_buy_new = []\nfor prod in user1_buy_final:\n    if prod not in user1_products.product_id.values:\n        print(prod)\n        user1_buy_new.append(prod)","cd2588dc":"# \uacb0\uacfc\uc801\uc73c\ub85c \uc720\uc800 1\uc774 \uc0b0 \ubaa9\ub85d\ub4e4 \uc804\ubd80 \ucde8\ud569\nuser1_buy_all = user1_prior_products.tolist() + user1_buy_new","deace876":"count_vect = CountVectorizer(min_df=0, ngram_range=(1,2))\nproduct_mat = count_vect.fit_transform(products_detail[products_detail['product_id'].isin(user1_buy_all)]['name+department'])\n\nproduct_sim = cosine_similarity(product_mat, product_mat)\nproduct_similarity = pd.DataFrame(product_sim, index = products_detail[products_detail['product_id'].isin(user1_buy_all)]['product_name'],\\\n                                  columns = products_detail[products_detail['product_id'].isin(user1_buy_all)]['product_name'])","e04cd8d2":"user1_buy_new_name = products_detail[products_detail['product_id'].isin(user1_buy_new)]['product_name'].values\n","f1facad8":"sum(product_similarity[products_detail[products_detail['product_id'].isin(user1_buy_new)]['product_name'].values].values>0.5)[0]-1 # \uc720\uc0ac\ub3c4\uac00 0.5 \ubcf4\ub2e4 \ud070\uac8c 2\uac1c \uc788\ub2e4","d5a01851":"#\uad00\uc810 1\ndef make_user_df(user_id):\n    user_orders = order_prior_train[order_prior_train['user_id']==user_id]\n    user_orders = pd.merge(user_orders,orders[['order_id','order_number','order_dow','order_hour_of_day','days_since_prior_order']], on='order_id')\n    user_orders.sort_values(by=['order_number','add_to_cart_order'], inplace=True)\n    \n    # \uc720\uc800\uac00 \uacfc\uac70\uc5d0 \uc0b0 \ubb3c\uac74 \uc885\ub958 (id \ub85c)\n    user_prior_products = user_orders.product_id.unique()\n    # \uc720\uc800\uac00 \uacfc\uac70\uc5d0 \uc8fc\ubb38\ud55c \ud69f\uc218 \n    user_orders_count = len(user_orders.order_id.unique())\n    # \uad6c\ub9e4\ud55c \ubb3c\uac74 \ubcc4\ub85c \uc7ac\uc8fc\ubb38 \ud69f\uc218\n    user_products = user_orders.groupby('product_id').sum()[['reordered']].reset_index()\n    user_products = pd.merge(user_products, products_detail[['product_id', 'product_name']], on='product_id')\n\n    # \uae30\uc874 \ubb3c\uac74 \ubcc4 \uc7ac\uc8fc\ubb38\uc728\n    user_products['reordered_ratio'] = user_products['reordered'].apply(lambda x : x \/(user_orders_count-1))\n    # \uacfc\uac70\uc5d0 \ucd1d \uba87 \ubc88 \uad6c\ub9e4\ub97c \ud588\ub294\uac00? \n    user_products['order_count'] = user_products['reordered']+1\n    # \uad6c\ub9e4 \ubb3c\uac74 \ucd1d \uac1c\uc218 \uc911 \uc774 \ubb3c\uac74\uc740 \uc5b4\ub290 \uc815\ub3c4 \ube44\uc911\uc744 \ucc28\uc9c0\ud558\ub294 \uac00? \n    user_products['order_ratio'] = user_products['order_count'].apply(lambda x : x\/len(user_orders))\n\n    # \ud574\ub2f9 \ubb3c\uac74\uc758 \ubb3c\uac74 \ud3c9\uade0 \uc8fc\uae30\ub294 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00? \n    user_products['product_buy_term'] = user_products['product_id'].apply(lambda x : user_orders[(user_orders['product_id'] == x) \\\n                                                                                                    & (user_orders['days_since_prior_order'] > 0)]['days_since_prior_order'].mean() \\\n                                                                           if len(user_orders[(user_orders['product_id'] == x)]) > 1 else np.nan)\n    # \ud574\ub2f9 \ubb3c\uac74\uc744 \uc0ac\ub294 \ub370 \uc788\uc5b4\uc11c \ud3c9\uade0 \uc2dc\uac04\ub300\ub294 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00?\n    user_products['product_buy_time'] = user_products['product_id'].apply(lambda x : user_orders[(user_orders['product_id'] == x)]['order_hour_of_day'].mean())\n    \n    # \uacfc\uac70\uc5d0 \uc0b0 \ubb3c\uac74 \uc774\ub984 + \ub300\ubd84\ub958\n    user_prior_products_name = products_detail[products_detail['product_id'].isin(user_prior_products)]['name+department']\n    \n    # \uae30\uc874 \ubb3c\uac74\ub4e4 \uc0ac\uc774\uc758 \uc720\uc0ac\ub3c4 \n    count_vect = CountVectorizer(min_df=0, ngram_range=(1,2))\n    product_mat = count_vect.fit_transform(user_prior_products_name)\n\n    product_sim = cosine_similarity(product_mat, product_mat)\n    product_similarity = pd.DataFrame(product_sim, index = products_detail[products_detail['product_id'].isin(user_prior_products)]['product_name'],\\\n                                  columns = products_detail[products_detail['product_id'].isin(user_prior_products)]['product_name'])\n    # print(len(user_prior_products_name)) \n    user_products['best1_similar'] = user_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False).index[1] \\\n                                                                         if len(user_prior_products_name)>1 else product_similarity[x].index[0])\n    user_products['best1_similarity'] = user_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False)[1]\\\n                                                                           if len(user_prior_products_name)>1 else product_similarity[x][0])\n    \n#     user_products['best2_similar'] = user_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False).index[2])\n#     user_products['best2_similarity'] = user_products['product_name'].apply(lambda x : product_similarity[x].sort_values(ascending=False)[2])\n    \n    return user_products","24adb9fb":"# \uad00\uc8102\ndef why_new_product(user_id):\n    prior_products = order_prior[order_prior['user_id']==user_id].product_id.unique()\n    final_products = order_train[order_train['user_id']==user_id].product_id.values\n    \n    user_buy_new = []\n    for prod in final_products:\n        if prod not in prior_products:\n            user_buy_new.append(prod)\n    \n    user_buy_all = prior_products.tolist() + user_buy_new\n    count_vect = CountVectorizer(min_df=0, ngram_range=(1,2))\n    product_mat = count_vect.fit_transform(products_detail[products_detail['product_id'].isin(user_buy_all)]['name+department'])\n\n    product_sim = cosine_similarity(product_mat, product_mat)\n    product_similarity = pd.DataFrame(product_sim, index = products_detail[products_detail['product_id'].isin(user_buy_all)]['product_name'],\\\n                                  columns = products_detail[products_detail['product_id'].isin(user_buy_all)]['product_name'])\n    \n    return product_similarity[products_detail[products_detail['product_id'].isin(user_buy_new)]['product_name']],user_buy_new","55f75008":"why_new_product(1)[1]","d97c5e45":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score","73b8f2ad":"user1_buy_new = order_train[order_train['user_id']==10].product_id.values\nuser1_df = make_user_df(10)\n\nprint(user1_buy_new\nuser1_df.product_id.values","ccb2e49f":"user1_df['final_reordered'] = user1_df['product_id'].apply(lambda x : 1 if x in user1_buy_new else 0)\nx = user1_df[['reordered_ratio']]\ny = user1_df['final_reordered']\n\nmodel = RandomForestClassifier()\nmodel.fit(x,y)\n\nprint(f'Accuracy : {accuracy_score(model.predict(x), y)}')\nprint(f'F1-score : {f1_score(model.predict(x), y)}')\nprint(f'Recall : {recall_score(model.predict(x), y)}')\nprint(f'Precision : {precision_score(model.predict(x), y)}')","b84cdc85":"model.predict(x), y.values","44164328":"def reordered_ratio_effect(user_id):\n    user_buy_new = order_train[order_train['user_id']==user_id].product_id.values\n    user_df = make_user_df(user_id)\n    \n    user_df['final_reordered'] = user_df['product_id'].apply(lambda x : 1 if x in user_buy_new else 0)\n    x = user_df[['reordered_ratio']]\n    y = user_df['final_reordered']\n    \n    model = RandomForestClassifier()\n    model.fit(x,y)\n    \n    print(f'Accuracy : {accuracy_score(model.predict(x), y)}')\n    print(f'F1-score : {f1_score(model.predict(x), y)}')\n    print(f'Recall : {recall_score(model.predict(x), y)}')\n    print(f'Precision : {precision_score(model.predict(x), y)}')\n    \n    return accuracy_score(model.predict(x),y), f1_score(model.predict(x),y)","784a1e1e":"import warnings\nwarnings.filterwarnings('ignore')","83f0067d":"order_prior.groupby('user_id').count()[['product_id']]","764e8334":"# user \ud45c\ubcf8\uc744 \uad6c\ud558\uae30 \uc704\ud574\uc11c user \uc815\ubcf4 \ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uc790\n# user \ub2f9 \uc8fc\ubb38 \ud69f\uc218\n# user \ub2f9 \ud3c9\uade0 \uad6c\ub9e4 \ubb3c\uac74 \uc218\n\ntmp = order_prior.groupby('user_id').count()[['product_id']].reset_index()\ntmp = tmp[tmp['user_id'].isin(train_users)]\ntrain_user = orders.groupby('user_id').count()[['order_id']].reset_index()\ntrain_user = train_user[train_user['user_id'].isin(train_users)]\ntrain_user = train_user.reset_index(drop=True)\ntrain_user = pd.merge(train_user, tmp, on='user_id')\ntrain_user.columns = ['user_id','\uc8fc\ubb38 \ud69f\uc218', '\uad6c\ub9e4 \ubb3c\uac74 \uc218']\ntrain_user['\ud3c9\uade0 \uad6c\ub9e4 \ubb3c\uac74 \uc218'] = train_user['\uad6c\ub9e4 \ubb3c\uac74 \uc218'] \/ train_user['\uc8fc\ubb38 \ud69f\uc218']\ntrain_user.head()","5077bb2f":"test = []\nfor i,user in enumerate([259,358,513,540]):\n    # print(f'user_{user}>>')\n    try:\n        acc, f1 = reordered_ratio_effect(user)\n        acc_f1.append([acc,f1])\n    except:\n        print(f'user_{user} \uc5d0\uc11c \uc5d0\ub7ec \ubc1c\uc0dd')\n        break\nprint('finished')","995e569c":"acc_f1 = []\nfor i,user in enumerate(train_users[:500]):\n    # print(f'user_{user}>>')\n    try:\n        acc, f1 = reordered_ratio_effect(user)\n        acc_f1.append([acc,f1])\n    except:\n        print(f'user_{user} \uc5d0\uc11c \uc5d0\ub7ec \ubc1c\uc0dd')\n        break\n    if (i+1) % 100 == 0:\n        print(round((i+1)\/500*100, 2),'% \uc9c4\ud589')\nprint('finished')","7aae13fc":"# user 500 \uba85\uc5d0 \ub300\ud55c \uc7ac\uad6c\ub9e4\uc728 feature \ud6a8\uc728\nuser500 = pd.DataFrame(acc_f1, columns = ['ACC', 'F1'])\nuser500['user_id'] = train_users[:500]\nuser500 = user500[['user_id', 'ACC','F1']]\nuser500.describe()","4e754429":"train_user = pd.merge(user500, train_user, on='user_id')","ce12c191":"# \uc815\ud655\ub3c4 1, F1-score 0\nk = train_user[(train_user['F1']==0) & (train_user['ACC']==1)].user_id.values\nfor i in k:\n    # \ub9c8\uc9c0\ub9c9\uc5d0 \uc0b0 \ubb3c\uac74\n    new_buy = order_train[order_train['user_id']==i].product_id.values\n    \n    # \uae30\uc874 \uad6c\ub9e4\ub0b4\uc5ed\n    user_df = make_user_df(i)\n    prior_buy = user1_df.product_id\n    \n    print(prior_buy.isin(new_buy).sum())","6dd7ab84":"train_user.sort_values(by='F1',ascending=False)","871a0e49":"### \ud568\uc218\ud654 \ud558\uae30 \uc774\uc804\uc5d0, user_id==1 \uc778 \uacbd\uc6b0\ub97c \uba3c\uc800 \ud30c\uc545\ud574\ubcf4\uc790","ae6f538e":"## '\uc7ac\uad6c\ub9e4\uc728' \uc740 \uc5b4\ub290\uc815\ub3c4\ub85c \uc601\ud5a5\uc744 \uc904\uae4c?","67ec4edd":"# \uad00\uc810 \u2160 \uae30\uc874\uc5d0 \uc0c0\ub358 \ubb3c\uac74\ub4e4 \uc911\uc5d0\uc11c \uc7ac\uad6c\ub9e4\ub97c \ud560\uae4c? \n- \uae30\uc874\uc5d0 \uc0c0\ub358 \ubb3c\uac74\ub4e4\uc5d0 \ub300\ud55c \ud2b9\uc131\uc774 \ud544\uc694\ud568\n    - \uc7ac\uad6c\ub9e4\uc728\n    - \uacfc\uac70 \uad6c\ub9e4 \ubb3c\ud488 \uc911 \uad6c\ub9e4 \ud69f\uc218\n    - \ubb3c\uac74 \uad6c\ub9e4 \uc8fc\uae30\n    - \ubb3c\uac74 \uad6c\ub9e4 \ud3c9\uade0 \uc2dc\uac04\n- \uae30\uc874\uc5d0 \uc0c0\ub358 \ubb3c\uac74\ub4e4 \ub07c\ub9ac\uc758 \uc720\uc0ac\ub3c4\ub294?\n    - \uc720\uc0ac\ub3c4\n    - \uc720\uc0ac\ud55c \uac83 \ub07c\ub9ac \uc911\ubcf5\ud574\uc11c \uc0ac\ub294 \uc815\ub3c4\uac00 \uc788\uc5c8\ub098?\n        - \ub9cc\uc57d, \ucd08\ucf54\ucfe0\ud0a4\ub97c \uc0c0\uc5c8\ub294\ub370 \ub2e4\uc74c\uc5d4 \ucd08\ucf54\uce69\ucfe0\ud0a4\ub97c \uc0c0\ub2e4\ub358\uc9c0","60334ed9":"# \ud544\uc694 \ubaa8\ub4c8 import & \ub370\uc774\ud130 zip \ud30c\uc77c \uc555\ucd95 \ud480\uae30","4358c336":"- \uc0c1\ud488 \uad6c\ub9e4\uc758 \ud750\ub984 \ub370\uc774\ud130\ub3c4 \ub123\uc5b4\uc11c \uc880 \ub354 \ud655\uc778\ud574\ubcfc \uac00\uce58\uac00 \uc788\uc74c","1fadfc4c":"# \ucffc\ub9ac\ub370\uc774\ud130 \ub9cc\ub4e4\uae30\n- products_detail : products, aisles, department \ud569\uce5c \uac83\n- order_prior\/train : order_products_prior\/train \uc5d0 user_id \ucd94\uac00\ud55c \uac83\n- train\/test_users : \ud559\uc2b5\/\ud14c\uc2a4\ud2b8 \uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc720\uc800 \ubaa9\ub85d\n- order_prior_train : train \uc720\uc800\uc758 \uacfc\uac70 \uc8fc\ubb38\ub4e4\n- order_prior_train_all : order_prior_train + order_train\n- order_prior_detail : order_prior + orders **by order_id**","a6549647":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","79588d13":"# \uad00\uc810 \u2161 \uae30\uc874\uc5d0 \uc0c0\ub358 \ubb3c\uac74\ub4e4 \ubc14\ud0d5\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ubb3c\uac74\uc744 \uc0b0\ub2e4\uba74 \uc5b4\ub5a4 \ubb3c\uac74\uc744 \uc0b4 \uac83\uc778\uac00?\n- \uc7ac\uad6c\ub9e4 \uac00\ub2a5\uc131\uc774 \ub192\uc740 \ubb3c\uac74\uacfc \uc720\uc0ac\ud55c \ubb3c\uac74\uc744 \uc0ac\uc9c0 \uc54a\uc558\uc744\uae4c?\n    - product name\uc758 \uc720\uc0ac\ub3c4 \ud30c\uc545","1c26556c":"# \uad00\uc810\ub4e4\uc744 \uc804\ubd80 \ud568\uc218\ud654"}}