{"cell_type":{"4c1e952b":"code","7cce906f":"code","a873d909":"code","0e9583f7":"code","048d4806":"code","867f04b0":"code","c82ee703":"code","8577d80b":"code","7a7ac6cf":"code","e54d6d2f":"code","05553d97":"code","ec284d08":"code","20245e53":"code","1f80e539":"code","2545991a":"code","33655687":"code","acd0a4fa":"code","579fd061":"code","f131ef6d":"code","6cf5af68":"code","258febcf":"code","897d4960":"code","9f2e353c":"code","8aaad609":"code","237608c9":"code","4d726b08":"code","9272e2d3":"markdown","0f07ed33":"markdown","083e87cc":"markdown","c32b0778":"markdown","615555a9":"markdown","4f2c27f9":"markdown","1078e33f":"markdown","024c2bcd":"markdown","e2e8620e":"markdown","385ab3d4":"markdown","2b9fd5d5":"markdown","3175778c":"markdown","d6cddfdc":"markdown","41cadc23":"markdown"},"source":{"4c1e952b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","7cce906f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a873d909":"# Carregando dados\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","0e9583f7":"train.head(2)","048d4806":"test.head(2)","867f04b0":"sub.head(2)","c82ee703":"train['label'].value_counts()","8577d80b":"sns.countplot(train['label']);","7a7ac6cf":"train.isnull().any().describe()","e54d6d2f":"test.isnull().any().describe()","05553d97":"X = train.drop(columns='label')\ny = train.label","ec284d08":"X = X \/ 255.0\ntest = test \/ 255.0","20245e53":"# Reshape imagem em 3 dimens\u00f5es (height = 28px, width = 28px , canal = 1)\nX = X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","1f80e539":"y = to_categorical(y, num_classes = 10)\ny[0]","2545991a":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.1, random_state=42)","33655687":"plt.imshow(X_train[1][:,:,0]);","acd0a4fa":"plt.imshow(X_train[2][:,:,0]);","579fd061":"datagen = ImageDataGenerator(featurewise_center=False,  # set input mean to 0 over the dataset\n                             samplewise_center=False,  # set each sample mean to 0\n                             featurewise_std_normalization=False,  # divide inputs by std of the dataset\n                             samplewise_std_normalization=False,  # divide each input by its std\n                             zca_whitening=False,  # apply ZCA whitening\n                             rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n                             zoom_range = 0.1, # Randomly zoom image \n                             width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n                             height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n                             horizontal_flip=False,  # randomly flip images\n                             vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","f131ef6d":"# Criando modelo\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","6cf5af68":"# Criando otimizador\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n# Compilando modelo\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n# Visualizando modelo\nmodel.summary()","258febcf":"epochs = 8\nbatch_size = 86","897d4960":"# Treinamento do modelo\nhistory = model.fit(datagen.flow(X_train,y_train, batch_size=batch_size),\n                    validation_data = (X_val,y_val),\n                    steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                    epochs = epochs)","9f2e353c":"# Plotando curvas de perda e acuracia para treino e valida\u00e7\u00e3o \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","8aaad609":"Y_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(y_val,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n\nplt.imshow(confusion_mtx, interpolation='nearest', cmap=plt.cm.Blues)\nplt.title('Confusion matrix')\nplt.colorbar()\ntick_marks = np.arange(len(range(10)))\nplt.xticks(tick_marks, range(10), rotation=45)\nplt.yticks(tick_marks, range(10))\n\nthresh = confusion_mtx.max() \/ 2.\nfor i, j in itertools.product(range(confusion_mtx.shape[0]), range(confusion_mtx.shape[1])):\n    plt.text(j, i, confusion_mtx[i, j], horizontalalignment=\"center\", color=\"white\" if confusion_mtx[i, j] > thresh else \"black\")\n\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label');","237608c9":"results = model.predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nresults.head()","4d726b08":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","9272e2d3":"## **Label para vetores**","0f07ed33":"## **Definindo as vari\u00e1veis**","083e87cc":"## **Aumento de dados - Data augmentation**","c32b0778":"## **Importando bibliotecas**","615555a9":"## **Modelo CNN**","4f2c27f9":"## **Predi\u00e7\u00e3o**","1078e33f":"## **Normalizando os dados**","024c2bcd":"Sem dados nulos em treino e teste","e2e8620e":"## **Avaliando o modelo**","385ab3d4":"## **Matriz de confus\u00e3o**","2b9fd5d5":"## **Divis\u00e3o dos dados de treino para valida\u00e7\u00e3o**","3175778c":"## **Visualizando dados**","d6cddfdc":"## **Reshape**","41cadc23":"## **Carregando dados**"}}