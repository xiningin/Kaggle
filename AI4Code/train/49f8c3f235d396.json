{"cell_type":{"32191f1f":"code","5cec9b18":"code","404a3b65":"code","b0feaa51":"code","bb11fac4":"code","f86e90c3":"code","b8e0e217":"code","10ffba5d":"code","56c4b265":"code","656bead1":"code","089a5d21":"code","aa43acf7":"code","6cc6dc78":"code","948cd1c1":"code","396ec92e":"code","7b39cadc":"code","9ad7014d":"code","e09bebf7":"code","5ad79037":"code","804b83e6":"code","3ec28680":"code","944e9dee":"code","bbb06ade":"code","6b234d5f":"code","cfb56cdd":"code","0818ce0d":"code","a925e930":"code","384d6d87":"code","a8dba84e":"code","65996cfc":"code","91440353":"code","e091694c":"code","f0a7d4ec":"code","130975b1":"code","40b54a60":"code","102b742b":"code","ca0f0b6d":"code","59f1fd46":"code","5e63bdf1":"code","579a2574":"code","d797dc49":"code","1e25a06e":"code","59f2b7de":"code","6d66e3d8":"code","2abc46af":"code","efa6692a":"code","da35e313":"code","6c6e267f":"code","d4837378":"code","c5ddace6":"code","055eb864":"code","9ffb3587":"code","ae55eae8":"code","e4df1f24":"code","ae826d02":"code","94a296ac":"code","af272a58":"code","2e971c7f":"code","993d5cd9":"code","0e5cc5cc":"code","2bee153f":"code","c5dd6676":"code","965c496e":"code","0b0c1c61":"code","44df5483":"code","80f1f60f":"code","1fda7061":"code","9447700a":"code","fe0e1852":"code","d976ddfc":"code","f2e00e2b":"code","a28958ff":"code","94271c92":"code","cf9c0875":"code","b49cf7b5":"code","97750667":"code","4e7b2063":"code","73e69cc5":"code","aff4bc09":"code","1bf0bd90":"code","e8d59030":"code","082d14fc":"code","a9c6e630":"markdown","bf340c61":"markdown","9ba12337":"markdown","1e4e3683":"markdown","64b91b9a":"markdown","3820908b":"markdown","7648e66d":"markdown","2c819b33":"markdown","cc691076":"markdown","b2cd1d5b":"markdown","0e8cb9e1":"markdown","57c3c662":"markdown","57790cfd":"markdown","fb0be0e9":"markdown","68921c78":"markdown","3ce7b0cc":"markdown","597fcccf":"markdown","af550242":"markdown","f52af12b":"markdown","581165c1":"markdown","96f0cc9b":"markdown","fb3ef27c":"markdown","d1e266f2":"markdown","162be40f":"markdown","8ebfef09":"markdown","a95aed55":"markdown","b32e85d2":"markdown","117153fb":"markdown","fdc7c003":"markdown","964622fc":"markdown","3ddd1baa":"markdown"},"source":{"32191f1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5cec9b18":"file = open('\/kaggle\/input\/ense3-lesson\/files\/adult.data', 'r')","404a3b65":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","b0feaa51":"print (data[1:2])","bb11fac4":"import pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","f86e90c3":"df.tail()","b8e0e217":"df.shape","10ffba5d":"counts = df.groupby('country').size()\n\nprint (counts) ","56c4b265":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","656bead1":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","089a5d21":"fm =df[(df.sex == 'Female')]\nfm.shape","aa43acf7":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","6cc6dc78":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","948cd1c1":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","396ec92e":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","7b39cadc":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","9ad7014d":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","e09bebf7":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","5ad79037":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","804b83e6":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","3ec28680":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","944e9dee":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","bbb06ade":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","6b234d5f":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","cfb56cdd":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","0818ce0d":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","a925e930":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()\n","384d6d87":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","a8dba84e":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","65996cfc":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","91440353":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","e091694c":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","f0a7d4ec":"df['age'].median()","130975b1":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","40b54a60":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","102b742b":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","ca0f0b6d":"ml1_age=ml1['age']\nfm1_age=fm1['age']","59f1fd46":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","5e63bdf1":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","579a2574":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","d797dc49":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","1e25a06e":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","59f2b7de":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","6d66e3d8":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","2abc46af":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","efa6692a":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","da35e313":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","6c6e267f":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","d4837378":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","c5ddace6":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","055eb864":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","9ffb3587":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","ae55eae8":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","e4df1f24":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","ae826d02":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","94a296ac":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","af272a58":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","2e971c7f":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, density=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","993d5cd9":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","0e5cc5cc":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","2bee153f":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","c5dd6676":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, density=True)","965c496e":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, density=True)\nplt.plot(xgrid, density(xgrid), 'r-')","0b0c1c61":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,density='True')","44df5483":"print ('The empirical mean of the sample is ', x.mean())","80f1f60f":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","1fda7061":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","9447700a":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","fe0e1852":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","d976ddfc":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","f2e00e2b":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","a28958ff":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","94271c92":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","cf9c0875":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","b49cf7b5":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x2',fontsize=15)\nplt.ylabel('y2',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x3',fontsize=15)\nplt.ylabel('y3',fontsize=15)","97750667":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x4',fontsize=15)\nplt.ylabel('y4',fontsize=15)\nplt.gcf().set_size_inches((10,10))","4e7b2063":"x1= [10.,8.,13.,9.,11.,14.,6.,4.,12.,7.,5.]\nx1=np.array(x1)\n\ny1=[8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68]\ny1= np.array(y1)\n\nx2= [10.,8.,13.,9.,11.,14.,6.,4.,12.,7.,5.]\nx2= np.array(x2)\n\ny2=[9.14,8.14,8.74, 8.77, 9.26, 8.1,  6.13, 3.1,  9.13, 7.26, 4.74]\ny2= np.array(y2)\n","73e69cc5":"x1=X[:,0]\ny1=X[:,1]\nx2=X[:,2]\ny2=X[:,3]\nx3=X[:,4]\ny3=X[:,5]\nx4=X[:,6]\ny4=X[:,7]\n\n\nprint(x1)\nprint(y1)\nprint(x2)\nprint(y2)\nprint(x3)\nprint(y3)\nprint(x4)\nprint(y4)","aff4bc09":"# Analyse statistique de la premi\u00e8re paire : x1,y1\n\nprint ('The empirical mean of x1 is ', x1.mean()) \nprint (\"Var(x1) = %.2f\" % np.var(x1)) \nprint ('The empirical mean of y1 is ', y1.mean()) \nprint (\"Var(y1) = %.2f\" % np.var(y1)) \nprint (\"Cov(x1, y1) = %.2f\" % Cov(x1, y1)) \nprint (\"Pearson rank coefficient: %.2f\" % Corr(x1, y1)) \nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(x1, y1)) ","1bf0bd90":"# Analyse statistique de la deuxi\u00e8me paire : x2,y2\n\nprint ('The empirical mean of x2 is ', x2.mean()) \nprint (\"Var(x2) = %.2f\" % np.var(x2)) \nprint ('The empirical mean of y2 is ', y2.mean()) \nprint (\"Var(y2) = %.2f\" % np.var(y2)) \nprint (\"Cov(x2, y2) = %.2f\" % Cov(x2, y2)) \nprint (\"Pearson rank coefficient: %.2f\" % Corr(x2, y2)) \nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(x2, y2)) ","e8d59030":"# Analyse statistique de la troisi\u00e8me paire : x3,y3\n\nprint ('The empirical mean of x3 is ', x3.mean()) \nprint (\"Var(x3) = %.2f\" % np.var(x3)) \nprint ('The empirical mean of y3 is ', y3.mean()) \nprint (\"Var(y3) = %.2f\" % np.var(y3)) \nprint (\"Cov(x3, y3) = %.2f\" % Cov(x3, y3)) \nprint (\"Pearson rank coefficient: %.2f\" % Corr(x3, y3)) \nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(x3, y3)) ","082d14fc":"# Analyse statistique de la quatri\u00e8me paire : x4,y4\n\nprint ('The empirical mean of x4 is ', x4.mean()) \nprint (\"Var(x4) = %.2f\" % np.var(x4)) \nprint ('The empirical mean of y4 is ', y4.mean()) \nprint (\"Var(y4) = %.2f\" % np.var(y4)) \nprint (\"Cov(x4, y4) = %.2f\" % Cov(x4, y4)) \nprint (\"Pearson rank coefficient: %.2f\" % Corr(x4, y4)) \nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(x4, y4)) ","a9c6e630":"21. En pointill\u00e9s noirs on voit les kernels (les noyaux) gnossiens autours des donn\u00e9es de la variable al\u00e9atoire x et en rouge on voit la somme de ces noyaux qui correspond \u00e0 une fonction continue qui approxime la densit\u00e9 de distribution. ","bf340c61":"21. Affiche l'asym\u00e9trie de la population des hommes, et de celle des femmes.  C'est \u00e0 dire comment la distribution des ages est r\u00e9partie autour de la m\u00e9diane. On remarque que celle des femmes est sup\u00e9rieur. Les deux valeurs sont positives donc pour les femmes et pour les hommes la queue de droite (les \u00e2ges sup\u00e9rieurs \u00e0 l'\u00e2ge m\u00e9dian) est plus longue ou grosse. ","9ba12337":"17. Cet histogramme est normalis\u00e9, le nombre de femmes est divis\u00e9 par le nombre total de l'\u00e9chantillon. On y voit la distribution des \u00e2ges des femmes en probabilit\u00e9 cumul\u00e9e.","1e4e3683":"9. Fait une \u00e9tude statistique (moyenne, variance, \u00e9cart type) des heures de travail hebdomadaires des femmes et des hommes. On note que les femmes travaillent en moyenne 6h de moins que les hommes. ","64b91b9a":"18. C'est histogramme normalis\u00e9 non cumul\u00e9 de l'age des hommes en bleu et femmes en rose. ","3820908b":"16. Cette fois-ci on observe un graphique avec une distribution cumul\u00e9e, correspondant \u00e0 la commande CDF (cumulative distribution function). On y voit la probabilit\u00e9 que l'individu ait un \u00e2ge inf\u00e9rieur ou \u00e9gale \u00e0 l'age en abscisse. L'histogramme est normalis\u00e9, le nombre d'hommes est divis\u00e9 par le nombre total de l'\u00e9chantillon.","7648e66d":"20. La diff\u00e9rence des moyennes d'\u00e2ge entre les femmes et les hommes et d'environ 2.5 ans.","2c819b33":"11. Affiche la repr\u00e9sentation graphique de la r\u00e9partition des \u00e2ges des femmes de l'\u00e9tude. Les plus repr\u00e9sent\u00e9es ont entre 17 et 24 ans environ, et il y en a environ 2500. Mais les plages d'\u00e2ge sont plus larges que pour les hommes. En effet, on remarque que pour les femmes l'histogramme compte 10 plages car on a \u00e9crit bins=10 alors que pour les hommes il en compte 20 car bins=20 dans le code. C'est pour cela que la tranche majoritaire chez les femmes atteint 2 500 individus, comme pour les hommes, alors que les hommes sont en moyenne deux fois plus nombreux que les femmes dans le dataframe (21 790 hommes contre 10 771 femmes).","cc691076":"On remarque que x1, x2 et x3 xont identiques. ","b2cd1d5b":"5. Donne le nombre de personnes travaillant dans chaque pays. Ainsi que toutes les personnes reli\u00e9es \u00e0 aucun pays avec le ?, c'est la junk information. USA : 29 170 personnes et 643 au Mexique.","0e8cb9e1":"3. df.tail affiche les 5 derni\u00e8res lignes du tableau. On peut donc voir qu'il y a 32561 personnes dans le dataframe.","57c3c662":"10. Donne les heures m\u00e9dianes de travail hebdomadaires pour les hommes et pour les femmes, qui sont identiques.","57790cfd":"13. Cette fois ci on affiche le PMF c'est \u00e0 dire la fonction de masse qui normalise les fr\u00e9quences d'apparition de chaque age par le nombre d'individus. Cet histogramme est normalis\u00e9, le nombre d'homme et de femmes est divis\u00e9 par le nombre total de l'\u00e9chantillon. On y voit la distribution des \u00e2ges des hommes (rose) et des femmes (bleu) avec en ordonn\u00e9e la fonction de masse, c'est \u00e0 dire la probabilit\u00e9 qu'une femme ou qu'un homme ait l'\u00e2ge des abscisses correspondant. On retrouve bien le fait que l'\u00e2ge le plus repr\u00e9sent\u00e9 chez les femmes est plus jeune que chez les hommes.","fb0be0e9":"19. Cet histogramme normalis\u00e9 affiche les porbabilit\u00e9s cumul\u00e9es de l'age des hommes en bleu. On devrait aussi avoir celui de l'age des femmes en rose. ","68921c78":"Le PDF permet de normaliser les fr\u00e9quences d'apparition de chaque valeur par le nombre d'individus. On affiche le PDF en fonction de la variable al\u00e9atoire X pour lambda=3. ","3ce7b0cc":"2. On met les donn\u00e9es du tableau data dans un Dataframe. Le df.columns donne la forme du Dataframe, l'ordre et le nom des colonnes. Il y a 15 donn\u00e9es par individu (son age, son sexe, son pays, sa situation maritale etc). df.head affiche les 5 premi\u00e8re lignes du tableau.","597fcccf":"Ce graphe pr\u00e9sente la fonction de distribution continue exponentielle pour le param\u00e8tre lambda=3. 1\/lambda correspond \u00e0 la moyenne de la distribution et 1\/lambda^2 correspond \u00e0 la variance.","af550242":"1. On avait ouvert en mode lecture le fichier pr\u00e9c\u00e9demment. Cette fois-ci on cr\u00e9e le tableau data. Puis on affiche les donn\u00e9es de la premi\u00e8re ligne du tableau, car on a demand\u00e9 les donn\u00e9es des lignes 1 \u00e0 2-1.","f52af12b":"On peut voir les \u00e2ges des individus en fonction de leur num\u00e9ro Sample. En bleu les individus \u00e0 haut salaire et en rose les individus \u00e0 haut salaire en enlevant les valeurs extr\u00e8mes comme vu pr\u00e9c\u00e9demment. ","581165c1":"L'erreur quadratique moyenne vaut 0.0011712408888372812. Cette erreur est faible car comme on le voit sur le graphe pr\u00e9c\u00e9dent il n'y a pas de valeurs trop \u00e9loign\u00e9es de la moyenne. \n","96f0cc9b":"10. Donne l'age m\u00e9dians des hommes et des femmes \u00e0 haut revenus. L'age m\u00e9dian des femmes est 3 ans inf\u00e9rieur \u00e0 celui des hommes. On remarque sans surprise que l'age m\u00e9dian des individus \u00e0 haut revenu est sup\u00e9rieur \u00e0 l'age m\u00e9dians de tous les individus confondus (hommes et femmes s\u00e9par\u00e9s).  ","fb3ef27c":"8. Donne la moyenne d'\u00e2ge des hommes \u00e0 haut salaires et des femmes \u00e0 haut salaires, gr\u00e2ce \u00e0 la fonction mean() appliqu\u00e9e au groupe ml1 des hommes \u00e0 haut revenus et au groupe fm1 des femmes \u00e0 haut revenus. Les femmes \u00e0 haut revenu sont en moyenne 2.5 ans moins ag\u00e9es que les hommes \u00e0 haut revenus (42.1 contre 44.6 ans).","d1e266f2":"On peut voir qu'en dessous de 40 ans ce sont les femmes les plus promues et pour un age sup\u00e9rieur \u00e0 40 ans environ ce sont les hommes qui sont plus promus. ","162be40f":"7. Donne le pourcentage de personnes \u00e0 haut revenu parmis toutes les personnes du tableau, puis donne le pourcentage d'hommes \u00e0 haut revenu parmis tous les hommes du tableau, puis donne le pourcentage de femmes \u00e0 haut revenus parmi toutes les femmes du tableau. Pour obtenir ces taux on a cr\u00e9e un dataframe df1 qui contient les individus \u00e0 haut salaire. Puis on d\u00e9finit des fonctions lambda qui utilisent la taille des dataframe ml fm ml1 et fm1 pour avoir acc\u00e8s au nombre d'individus dans chaque cat\u00e9gorie. En faisant des rapports de l'un sur l'autre on obtient des taux de personnes avec un salaire sup\u00e9rieur \u00e0 50K.","8ebfef09":"10. Affiche la repr\u00e9sentation graphique de la r\u00e9partition des \u00e2ges des hommes de l'\u00e9tude, sous forme d'histogramme.On peut donc par exemple noter que l'\u00e2ge le plus repr\u00e9sent\u00e9 se situe vers 35 ans et repr\u00e9sente environ 2400 personnes.","a95aed55":"4. Donne le nombre de lignes (32561) et de colonnes (15) du dataframe df.","b32e85d2":"14. Cet histogramme est normalis\u00e9, le nombre d'homme est divis\u00e9 par le nombre total de l'\u00e9chantillon. On y voit la distribution des \u00e2ges des hommes avec en ordonn\u00e9e la probabilit\u00e9 qu'un homme ait l'\u00e2ge des abscisses correspondant.","117153fb":"6. On fait une comparaison sur l'\u00e2ge. On ne peut pas savoir quel est l'\u00e2ge le plus repr\u00e9sent\u00e9 car on ne peut pas voir tous les \u00e2ges entre 22 et 84. D'apr\u00e8s le tableau 20 ans est l'\u00e2ge le plus repr\u00e9sent\u00e9 sur les 5 premiers et 5 derniers \u00e2ges d\u00e9finis.","fdc7c003":"12. Affiche un histogramme avec le nombre de femmes par tranche d'\u00e2ge en bleu, et idem pour les hommes en rose. La tranche majoritaire chez les hommes est environ 4 fois plus haute que chez les femmes car les tranches d'age des hommes sont deux fois plus grandes (bins=20 chez les femmes et bins=10 chez les hommes), et les hommes sont deux fois plus nombreux que les femmes dans le dataframe.","964622fc":"on cr\u00e9e un nouveau dataframe des individus \u00e0 haut salaire, en enlevant les ages sup\u00e9rieurs de 35 ans \u00e0 l'age m\u00e9dian et les ages inf\u00e9rieur de 15 ans \u00e0 l'age m\u00e9dian. Il reste 32492 individus dans le groupe.","3ddd1baa":"15. Cet histogramme est normalis\u00e9, le nombre de femmes est divis\u00e9 par le nombre total de l'\u00e9chantillon. On y voit la distribution des \u00e2ges des femmes avec en ordonn\u00e9e la probabilit\u00e9 qu'une femme ait l'\u00e2ge des abscisses correspondant."}}