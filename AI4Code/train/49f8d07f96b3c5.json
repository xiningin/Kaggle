{"cell_type":{"c0d1af51":"code","2f8a0fe5":"code","980cd1b8":"code","6d435ad4":"code","85fd25ac":"code","d67e94d1":"code","e18f56ab":"code","fc586ca5":"code","3d1aa1ed":"code","0069d06b":"code","a83af606":"code","614ac1f8":"code","2bea9f23":"code","892acb22":"code","fd80844c":"code","0ae43b54":"markdown","87952365":"markdown","1d634122":"markdown","e0990402":"markdown","0e46912d":"markdown","8974e79f":"markdown","015841c6":"markdown","77314d3d":"markdown","71d618c9":"markdown","54d4bb15":"markdown"},"source":{"c0d1af51":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nimport tensorflow \nimport os\nimport glob\nimport tqdm\n\nfrom tqdm import tqdm \n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, Conv2D, BatchNormalization, MaxPool2D, Dropout, Flatten, Dense\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\n%matplotlib inline ","2f8a0fe5":"# Training Data\n\nalluvial_soil = os.listdir('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Alluvial_Soil\/')\nblack_soil    = os.listdir('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Black_Soil\/')\nclay_soil     = os.listdir('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Clay_Soil\/')\nred_soil      = os.listdir('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Red_Soil\/')","980cd1b8":"a, b, c, d = len(alluvial_soil), len(black_soil), len(clay_soil), len(red_soil)\ne = a + b + c + d\nprint(\"Total images: \", e)","6d435ad4":"# Viewing - Black Soil \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\nfor i in range(0,5):\n    rand = np.random.randint(len(black_soil)) \n    img  = imread('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Black_Soil\/' + black_soil[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","85fd25ac":"# Viewing - Clay Soil \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\nfor i in range(0,5):\n    rand = np.random.randint(len(clay_soil)) \n    img  = imread('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Clay_Soil\/' + clay_soil[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","d67e94d1":"# Viewing - Red Soil \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\nfor i in range(0,5):\n    rand = np.random.randint(len(red_soil)) \n    img  = imread('..\/input\/soil-classification-image-data\/Soil_Dataset\/Train\/Red_Soil\/' + red_soil[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","e18f56ab":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=30,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   zoom_range=0.2,\n                                   shear_range=0.2,\n                                   fill_mode='nearest')\n\ntest_datagen  = ImageDataGenerator(rescale=1.\/255)","fc586ca5":"train_dataset = train_datagen.flow_from_directory(directory = '..\/input\/soil-classification-image-data\/Soil_Dataset\/Train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'categorical',\n                                                  batch_size = 64)","3d1aa1ed":"test_datset = test_datagen.flow_from_directory(directory = '..\/input\/soil-classification-image-data\/Soil_Dataset\/Test',\n                                               target_size = (224,224),\n                                               class_mode = 'categorical',\n                                               batch_size = 64)","0069d06b":"model = Sequential()","a83af606":"# Input Layer \nmodel.add(InputLayer(input_shape = (224,224,3)))\n\n\n# Layers\nmodel.add(Conv2D(filters = 32,  kernel_size  = (3, 3), strides=(1, 1), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2, 2), padding = 'valid'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64,  kernel_size  = (3, 3), strides=(1, 1), padding='valid', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2, 2), padding = 'valid'))\nmodel.add(Dropout(0.25))\n\n\n# Flatten()\nmodel.add(Flatten())\n\n\n# Full Connected Layer \nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\n\n# Output layer \nmodel.add(Dense(units = 4, activation = 'softmax'))","614ac1f8":"model.summary()","2bea9f23":"model.compile(optimizer = tensorflow.keras.optimizers.Adam(1e-5), loss = 'categorical_crossentropy', metrics = ['accuracy'])","892acb22":"filepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_accuracy', \n                              mode = 'max' , \n                              patience = 10)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_accuracy', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\nlearning_rate = ReduceLROnPlateau(monitor = 'val_accuracy',\n                                  mode = 'max',\n                                  verbose = 1,\n                                  factor = 0.1,\n                                  min_delta = 1e-5,\n                                  patience = 3)\n\ncallback_list = [earlystopping, checkpoint, learning_rate]","fd80844c":"model_history = model.fit(train_dataset,\n                          validation_data = test_datset,\n                          epochs = 500,\n                          verbose = 1,\n                          callbacks = callback_list)","0ae43b54":"> `DEFINING CALLBACKS`","87952365":"> `BUILDING LAYERS`","1d634122":"### MODEL BUILDING ","e0990402":"**`DATA AUGMENTATION`**","0e46912d":"> `MODEL COMPILE`","8974e79f":"### IMPORT \/ VIEWING \/ PREPROCESSING DATASET","015841c6":"> `MODEL INITIALIZATION`","77314d3d":"> `MODEL RUNNING`","71d618c9":"### IMPORT LIBRARIES","54d4bb15":"> `MODEL SUMMARY`"}}