{"cell_type":{"a8e07337":"code","cad75e8f":"code","bf2b7ab4":"code","cef00b98":"code","ba047d24":"code","46b924cb":"code","bad02b11":"code","9db0f3dc":"code","a07a7f76":"code","9f7113fa":"code","159a6866":"code","db0af131":"code","33174629":"code","bef9c36f":"code","a84ae180":"code","b4300d85":"code","9560fe37":"code","4505e194":"code","1ad53984":"code","78bf4785":"code","c2883d2a":"code","013cf6b5":"code","fc1874c3":"code","244a4fe9":"code","58d55321":"code","36571fcb":"code","db1d5d45":"code","e8df2279":"code","c5584027":"code","d529c37c":"code","19a483d5":"code","9fd5ac3f":"code","e9c45e1c":"code","adbf5372":"code","3ad92af9":"code","71f701f3":"code","53e0d33f":"code","e2930b46":"code","5e943c98":"code","ac125ee4":"code","869b8d12":"code","b7cd6d75":"code","54120300":"code","cd202ec3":"code","cc55e4a4":"code","a14abd01":"code","808eafe6":"code","6c0343e2":"code","31dad6b8":"code","93e374d7":"code","cc41f275":"code","a387ccaa":"code","5154b2ba":"code","93d41b70":"code","7214c9ab":"code","a41cc6da":"code","1f760303":"code","d71d89b4":"code","1a373e4c":"code","65e3142b":"code","20103a2a":"code","550e0de0":"code","96360eae":"code","9240e0c4":"code","2b664e3e":"code","338098d0":"code","b561151a":"code","ce09a66b":"code","9433b4ad":"code","2763b4aa":"code","f3bdd089":"code","7c964833":"code","1d2e8581":"code","9dd6dc15":"code","5d0c3390":"code","23f30e66":"code","0cfd4c26":"code","a745df57":"code","b0d9c3e6":"code","fb671f3b":"code","0b1df561":"code","ce28fde4":"code","d58c7f41":"code","f57cae0f":"code","b98ff199":"code","bcb09fff":"code","99cc2955":"code","eb1b7675":"code","334a16b2":"code","a78420e9":"code","ed71f8c8":"code","fab95bc5":"code","8b8e7b6b":"code","9515f4e5":"code","54fcf03f":"code","04be5f75":"code","1c91eb28":"code","157d1bf3":"code","6791c59c":"code","16bb0e5f":"code","7f574365":"code","4b527201":"code","2f90413c":"code","e5c907a6":"code","ef0ad2eb":"code","df956284":"code","c1630091":"code","2373dab9":"code","74349b8d":"code","ca34043d":"code","1420009c":"code","cb42f5bc":"code","5bc9e04f":"code","c1e2a300":"code","23467985":"code","bd7a7e61":"code","a1a7dce4":"code","8073609e":"code","6d2c11a7":"code","e512b696":"code","a975378e":"code","efb35ab4":"code","d7492d82":"code","16bdaec5":"code","faf63852":"code","cad288a8":"code","09ae958a":"markdown","451f1be5":"markdown","5009034f":"markdown","1cb506fe":"markdown","e0b0f163":"markdown","52fe5d62":"markdown","1ed3ff99":"markdown","0a8d4a5e":"markdown","d67e9337":"markdown","5d0d3af4":"markdown","fa4777a5":"markdown","50c35725":"markdown","553281e7":"markdown","6c3b0d47":"markdown","05801988":"markdown","a781d145":"markdown","e317b4bf":"markdown","eb7e7cda":"markdown","86d677ea":"markdown","124d8dd3":"markdown","d354c6b1":"markdown","b21a8804":"markdown","955ab9c0":"markdown","47d206a0":"markdown","5a507265":"markdown","f55d310a":"markdown","084a4f6c":"markdown","41b91ef4":"markdown"},"source":{"a8e07337":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cad75e8f":"heart = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","bf2b7ab4":"heart.info()","cef00b98":"heart.describe()","ba047d24":"heart.sample(5)","46b924cb":"heart.isnull().sum()","bad02b11":"heart.isnull().any(axis=1).sum()","9db0f3dc":"heart.groupby('target').mean()","a07a7f76":"plt.figure(figsize=(15,10))\nsns.heatmap(heart.corr(), cmap='Spectral', annot=True)\nplt.show()","9f7113fa":"abs(heart[heart['sex']==0].corr()['target'].drop(labels=['sex'])) - abs(heart[heart['sex']==1].corr()['target'].drop(labels=['sex']))","159a6866":"fig, ax = plt.subplots(figsize=(15,7))\nax.plot(heart[heart['sex']==0].corr()['target'].drop(labels=['sex', 'target']), label='Female')\nax.plot(heart[heart['sex']==1].corr()['target'].drop(labels=['sex', 'target']), label='Male')\nax.plot(heart.corr()['target'].drop(labels=['sex', 'target']), label='Both')\nplt.title('Correlation of heart disease with various parameters')\nplt.legend()","db0af131":"heart.groupby(['sex','target']).count()","33174629":"heart['age range'] = pd.cut(heart['age'], bins=[0, 40, 50, 60, 70, 100])","bef9c36f":"sns.countplot(heart['age range'], hue='target', data=heart)","a84ae180":"heart.groupby(['age range', 'sex', 'target'])['age'].count()","b4300d85":"heart.groupby(['age range', 'target', 'sex'])['age'].count()","9560fe37":"categorical_features = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal']","4505e194":"numerical_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']","1ad53984":"for i in numerical_features:\n    g = sns.FacetGrid(heart, col='sex', hue='target', height=5)\n    g.map(sns.distplot, i)","78bf4785":"fig, axes = plt.subplots(2, 4, figsize=(16,8))\nfor i, ax in enumerate(axes.ravel()):\n    sns.countplot(heart[categorical_features[i]], ax=ax, hue=heart['target'])\n    ax.set_xlabel(categorical_features[i])\nplt.tight_layout()","c2883d2a":"pp = numerical_features\npp.append('target')\npp","013cf6b5":"sns.pairplot(heart.loc[:, pp], hue='target')","fc1874c3":"from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.model_selection import train_test_split","244a4fe9":"from sklearn.linear_model import LogisticRegression","58d55321":"from sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score","36571fcb":"heart.head(3)","db1d5d45":"score_mean = {}\nscore_max = {}","e8df2279":"def process(dataframe, rand):\n    y = dataframe['target']\n    X = dataframe.drop(['target', 'age range'], axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = rand)\n    mct = make_column_transformer(\n            (OneHotEncoder(categories='auto', handle_unknown='ignore',sparse=False), ['cp', 'slope', 'thal']), \n            remainder=MinMaxScaler())\n    X_train = mct.fit_transform(X_train)\n    X_test = mct.transform(X_test)\n    return X_train, X_test, y_train, y_test","c5584027":"def regression(dataframe, rand):\n    y = dataframe['target']\n    X = dataframe.drop(['target', 'age range'], axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = rand)\n    mct = make_column_transformer(\n            (OneHotEncoder(categories='auto', sparse=False, handle_unknown='ignore'), ['cp', 'slope', 'thal']), \n            remainder=MinMaxScaler())\n    X_train = mct.fit_transform(X_train)\n    logreg = LogisticRegression(solver='liblinear')\n    logreg.fit(X_train, y_train)\n    X_test = mct.transform(X_test)\n    return logreg, X_test, y_test","d529c37c":"scores = []\nfor i in range(0, 200):\n    logreg, X_test, y_test = regression(heart, i)\n    scores.append(logreg.score(X_test, y_test))","19a483d5":"plt.figure(figsize=(15,5))\nplt.plot(scores)\nplt.xlabel('random state')\nplt.ylabel('regression score')","9fd5ac3f":"np.array(scores).mean()","e9c45e1c":"score_mean['Logistic Regression'] = np.round(np.array(scores).mean(), 2)","adbf5372":"logreg, X_test, y_test = regression(heart, 153)","3ad92af9":"logreg.score(X_test, y_test)","71f701f3":"score_max['Logistic Regression'] = np.round(logreg.score(X_test, y_test), 2)","53e0d33f":"predictions = logreg.predict(X_test)","e2930b46":"confusion_matrix(y_test, predictions)","5e943c98":"print(classification_report(y_test, predictions))","ac125ee4":"prob = logreg.predict_proba(X_test)","869b8d12":"roc_score = roc_auc_score(y_test, predictions)","b7cd6d75":"fpr, tpr, thresholds = roc_curve(y_test, prob[:, 1])","54120300":"plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % roc_score)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([-0.05, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")","cd202ec3":"sns.heatmap(prob[np.argsort(prob[:, 0])])","cc55e4a4":"plt.figure(figsize=(15,5))\nplt.plot(prob[np.argsort(prob[:, 0])])\nplt.xlabel('test case number')\nplt.ylabel('probability')\nplt.legend(['disease', 'no disease'])","a14abd01":"heart_f = heart[heart['sex']==0].drop(['sex'], axis=1)","808eafe6":"logreg_f, X_test, y_test = regression(heart_f, 0)","6c0343e2":"logreg_f.score(X_test, y_test)","31dad6b8":"heart_m = heart[heart['sex']==1].drop(['sex'], axis=1)","93e374d7":"logreg_m, X_test, y_test = regression(heart_m, 33)","cc41f275":"logreg_m.score(X_test, y_test)","a387ccaa":"scores = []\nfor i in range(0, 200):\n    logreg, X_test, y_test = regression(heart_f, i)\n    scores.append(logreg.score(X_test, y_test))","5154b2ba":"np.array(scores).mean()","93d41b70":"plt.figure(figsize=(15,5))\nplt.plot(scores)\nplt.xlabel('random state')\nplt.ylabel('regression score')","7214c9ab":"scores = []\nfor i in range(0, 200):\n    logreg, X_test, y_test = regression(heart_m, i)\n    scores.append(logreg.score(X_test, y_test))","a41cc6da":"np.array(scores).mean()","1f760303":"plt.figure(figsize=(15,5))\nplt.plot(scores)\nplt.xlabel('random state')\nplt.ylabel('regression score')","d71d89b4":"from sklearn.neighbors import KNeighborsClassifier","1a373e4c":"max_score = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    score_list = []\n    for i in range(1, 20):\n        knn = KNeighborsClassifier(n_neighbors = i)\n        knn.fit(X_train, y_train)\n        score_list.append(knn.score(X_test, y_test))\n    max_score.append(max(score_list))","65e3142b":"plt.figure(figsize=(15,5))\nplt.plot(max_score)","20103a2a":"np.array(max_score).mean()","550e0de0":"score_mean['K Nearest Neighbors'] = np.round(np.array(max_score).mean(), 2)","96360eae":"X_train, X_test, y_train, y_test = process(heart, 153)","9240e0c4":"score_list = []\nfor i in range(1, 20):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train, y_train)\n    score_list.append(knn.score(X_test, y_test))","2b664e3e":"max(score_list)","338098d0":"plt.plot(range(1,20), score_list)\nplt.xticks(range(1,20))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()","b561151a":"knn = KNeighborsClassifier(n_neighbors = 12)","ce09a66b":"knn.fit(X_train, y_train)","9433b4ad":"predictions = knn.predict(X_test)","2763b4aa":"knn.score(X_test, y_test)","f3bdd089":"score_max['K Nearest Neighbors'] = np.round(knn.score(X_test, y_test), 2)","7c964833":"score_mean","1d2e8581":"from sklearn.svm import SVC","9dd6dc15":"score_list = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    svm = SVC(1, gamma='scale')\n    svm.fit(X_train, y_train)\n    score_list.append(svm.score(X_test, y_test))","5d0c3390":"plt.figure(figsize=(15,5))\nplt.plot(score_list)","23f30e66":"np.array(score_list).mean()","0cfd4c26":"score_mean['Support Vector Machines'] = np.round(np.array(score_list).mean(), 2)","a745df57":"X_train, X_test, y_train, y_test = process(heart, 153)","b0d9c3e6":"svm = SVC(1, gamma='scale')","fb671f3b":"svm.fit(X_train, y_train)","0b1df561":"svm.score(X_test, y_test)","ce28fde4":"score_max['Support Vector Machines'] = np.round(svm.score(X_test, y_test), 2)","d58c7f41":"from sklearn.tree import DecisionTreeClassifier","f57cae0f":"score_list = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    dtc = DecisionTreeClassifier()\n    dtc.fit(X_train, y_train)\n    score_list.append(dtc.score(X_test, y_test))","b98ff199":"plt.figure(figsize=(15,5))\nplt.plot(score_list)","bcb09fff":"np.array(score_list).mean()","99cc2955":"score_mean['Decision Tree Classifier'] = np.round(np.array(score_list).mean(), 2)","eb1b7675":"X_train, X_test, y_train, y_test = process(heart, 5)","334a16b2":"dtc = DecisionTreeClassifier()","a78420e9":"dtc.fit(X_train, y_train)","ed71f8c8":"dtc.score(X_test, y_test)","fab95bc5":"score_max['Decision Tree Classifier'] = np.round(dtc.score(X_test, y_test), 2)","8b8e7b6b":"from sklearn.ensemble import RandomForestClassifier","9515f4e5":"score_list = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    rfc = RandomForestClassifier(n_estimators=100)\n    rfc.fit(X_train, y_train)\n    score_list.append(rfc.score(X_test, y_test))","54fcf03f":"plt.figure(figsize=(15,5))\nplt.plot(score_list)","04be5f75":"np.array(score_list).mean()","1c91eb28":"score_mean['Random Forest Classifier'] = np.round(np.array(score_list).mean(), 2)","157d1bf3":"X_train, X_test, y_train, y_test = process(heart, 153)","6791c59c":"rfc = RandomForestClassifier(n_estimators=100)","16bb0e5f":"rfc.fit(X_train, y_train)","7f574365":"rfc.score(X_test, y_test)","4b527201":"score_max['Random Forest Classifier'] = np.round(rfc.score(X_test, y_test), 2)","2f90413c":"from sklearn.naive_bayes import GaussianNB","e5c907a6":"score_list = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    gnb = GaussianNB()\n    gnb.fit(X_train, y_train)\n    score_list.append(gnb.score(X_test, y_test))","ef0ad2eb":"plt.figure(figsize=(15,5))\nplt.plot(score_list)","df956284":"np.array(score_list).mean()","c1630091":"score_mean['Naive Bayes'] = np.round(np.array(score_list).mean(), 2)","2373dab9":"X_train, X_test, y_train, y_test = process(heart, 153)","74349b8d":"gnb = GaussianNB()","ca34043d":"gnb.fit(X_train, y_train)","1420009c":"gnb.score(X_test, y_test)","cb42f5bc":"score_max['Naive Bayes'] = np.round(gnb.score(X_test, y_test), 2)","5bc9e04f":"from sklearn.neural_network import MLPClassifier","c1e2a300":"# To filter ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\nimport warnings\nwarnings.filterwarnings('ignore') ","23467985":"score_list = []\nfor i in range(200):\n    X_train, X_test, y_train, y_test = process(heart, i)\n    mlp = MLPClassifier(10, max_iter=200)\n    mlp.fit(X_train, y_train)\n    score_list.append(mlp.score(X_test, y_test))","bd7a7e61":"plt.figure(figsize=(15,5))\nplt.plot(score_list)","a1a7dce4":"np.array(score_list).mean()","8073609e":"score_mean['Neural Network'] = np.round(np.array(score_list).mean(), 2)","6d2c11a7":"X_train, X_test, y_train, y_test = process(heart, 153)","e512b696":"mlp = MLPClassifier(10, max_iter=200)","a975378e":"mlp.fit(X_train, y_train)","efb35ab4":"mlp.score(X_test, y_test)","d7492d82":"score_max['Neural Network'] = np.round(mlp.score(X_test, y_test), 2)","16bdaec5":"score_max","faf63852":"score_mean","cad288a8":"plt.figure(figsize=(10,5))\nplt.plot(list(score_mean.keys()), list(score_mean.values()), 'b-o', label = 'mean score')\nplt.plot(list(score_max.keys()), list(score_max.values()), 'r-*', label = 'max score')\nfor i, v in enumerate(score_mean.values()):\n    plt.text(i, v+.01, v)\nfor i, v in enumerate(score_max.values()):\n    plt.text(i, v+.01, v)\nplt.xticks(rotation=45)\nplt.ylim(0.7, 1)\nplt.legend()","09ae958a":"# Comparison of Classifiers","451f1be5":"Average score for random states between 0 and 200 is 0.79","5009034f":"Average score for random states between 0 and 200 is 0.82","1cb506fe":"Average score for random states between 0 and 200 is 0.83","e0b0f163":"Attribute Information:\n> 1. age\n> 2. sex (1 = male; 0 = female)\n> 3. chest pain type (4 values)\n> 4. resting blood pressure\n> 5. serum cholestoral in mg\/dl\n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved\n> 9. exercise induced angina\n> 10. oldpeak = ST depression induced by exercise relative to rest\n> 11. the slope of the peak exercise ST segment\n> 12. number of major vessels (0-3) colored by flourosopy\n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n> 14. target (1=yes, 0=no)","52fe5d62":"Regression score is varying with random state chosen for splitting data.","1ed3ff99":"# Random Forest Classifier","0a8d4a5e":"Average score for random states between 0 and 200 is 0.83","d67e9337":"# K Nearest Neighbors","5d0d3af4":"# Decision Tree Classifier","fa4777a5":"Average score for random states between 0 and 200 is 0.89 for females.","50c35725":"# Neural Network","553281e7":"# Logistic Regression","6c3b0d47":"Heat map of probabilities for each case.","05801988":"Difference of correlation coefficients in Male and Female","a781d145":"# Support Vector Machines","e317b4bf":"Check for any null values","eb7e7cda":"Average score for random states between 0 and 200 is 0.84","86d677ea":"## Observations:\n1. Age is negatively correlated with heart disease. As older people are more likely to get heart disease, they are likely to go for health check-up even when they have mild or no symptoms. Young people only go for health check-up when they have clear symptoms, so they are more likely to be diagnosed with having heart disease.\n2. cholesterol level, fasting blood glucose have negligible correlation with heart disease.\n3. Chest pain(cp), maximum heart rate(thalach), slope of ST segment in ECG are positively correlated with heart disease.\n4. exercise induced angina(exang), oldpeak(ST depression induced by exercise), number of major vessels (0-3) colored by flourosopy(ca), thal are negatively correlated with heart disease. In all of these correlation is less for Males than Females.\n5. trestbps and fbs are negatively correlated for females compared to Males.","124d8dd3":"# Data exploration","d354c6b1":"Females are more likely to be diagnosed with heart disease in all age groups.","b21a8804":"# Naive Bayes","955ab9c0":"Average score for random states between 0 and 200 is 0.79 for females.","47d206a0":"Average score for random states between 0 and 200 is 0.74","5a507265":"## Running the model separately for females and males","f55d310a":"Highest score is achieved with neighbors = 12","084a4f6c":"Regression model score is higher for females than males probably because correlation is stronger.","41b91ef4":"Average score for random states between 0 and 200 is 0.85"}}