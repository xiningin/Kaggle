{"cell_type":{"24d85894":"code","5f24eb9c":"code","9887097a":"code","5028a384":"code","f110e354":"code","ea8d17cc":"code","3fad7e4d":"code","fda159e5":"code","13c47652":"code","4e15f39d":"code","9361b22f":"code","a02ed193":"code","f7692875":"code","ae7eddbd":"code","e2cdbc42":"markdown","79803882":"markdown","2c9a7277":"markdown","a852647f":"markdown"},"source":{"24d85894":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f24eb9c":"import pandas as pd\nimport math\nimport scipy.stats as st\nfrom sklearn.preprocessing import MinMaxScaler","9887097a":"df =  pd.read_csv(\"\/kaggle\/input\/amazon-music-reviews\/Musical_instruments_reviews.csv\")","5028a384":"df.head()","f110e354":"# Average Rating\ndf[\"overall\"].mean()","ea8d17cc":"df['reviewTime'] = pd.to_datetime(df['reviewTime'])\ncurrent_date = pd.to_datetime('2016-01-01 0:0:0')\ndf[\"days\"] = (current_date - df['reviewTime']).dt.days\ndf.head()","3fad7e4d":"df[\"days_scaled\"] = MinMaxScaler(feature_range=(1,360)).fit(df[[\"days\"]]).transform(df[[\"days\"]])\ndf[\"days_scaled\"] = df[\"days_scaled\"].astype(int)\ndf.head()","fda159e5":"def time_based_weighted_average(dataframe, w1=28, w2=26, w3=24, w4=22):\n    return dataframe.loc[df[\"days_scaled\"] <= 30, \"overall\"].mean() * w1 \/ 100 + \\\n           dataframe.loc[(dataframe[\"days_scaled\"] > 30) & (dataframe[\"days_scaled\"] <= 90), \"overall\"].mean() * w2 \/ 100 + \\\n           dataframe.loc[(dataframe[\"days_scaled\"] > 90) & (dataframe[\"days_scaled\"] <= 180), \"overall\"].mean() * w3 \/ 100 + \\\n           dataframe.loc[(dataframe[\"days_scaled\"] > 180), \"overall\"].mean() * w4 \/ 100\n\ntime_based_weighted_average(df)","13c47652":"def convert_to_list(str_lst):\n    str_ = str_lst.strip(\"[]\").replace(\",\",\" \")\n    lst = str_.split()\n    lst_to_int = list(map(int, lst))\n    return lst_to_int\n        \ndef total_rating(lst_rating):\n    return lst_rating[1] # y\n\ndef helpful_rating(lst_rating):\n    return lst_rating[0] # x\n\ndf[\"helpful\"] = df[\"helpful\"].map(convert_to_list) # \"[x,y]\" -> [x,y]\ndf[\"total_ratings\"] = df[\"helpful\"].map(total_rating) # y\ndf[\"helpful\"] = df[\"helpful\"].map(helpful_rating) # x","4e15f39d":"df.head()","9361b22f":"df[\"helpful_no\"] = df[\"total_ratings\"] - df[\"helpful\"]\nup = df[\"helpful\"].tolist()\ndown = df[\"helpful_no\"].tolist()\ncomments = pd.DataFrame({\"up\": up, \"down\": down})","a02ed193":"def wilson_lower_bound(up, down, confidence=0.95):\n    n = up + down\n    if n == 0:\n        return 0\n    z = st.norm.ppf(1 - (1 - confidence) \/ 2)\n    phat = 1.0 * up \/ n\n    return (phat + z * z \/ (2 * n) - z * math.sqrt((phat * (1 - phat) + z * z \/ (4 * n)) \/ n)) \/ (1 + z * z \/ n)","f7692875":"comments[\"wlb\"] = comments.apply(lambda x: wilson_lower_bound(x[\"up\"], x[\"down\"]), axis=1)\ndf[\"wilson_lower_bound\"] = comments[\"wlb\"]","ae7eddbd":"df_top_comments = df.sort_values(\"wilson_lower_bound\",ascending=False).head(20)\ndf_top_comments[[\"overall\", \"summary\", \"helpful\", \"helpful_no\", \"wilson_lower_bound\"]]","e2cdbc42":"### We finally found the top 20 comments.  ","79803882":"##### After all these processes, we can now make a time based weighted average.","2c9a7277":"##### After this process, we found the total rating. Now we will calculate wilson lower bound.","a852647f":"##### Average Rating= 4.488\n##### Time-based Weighted Average Rating= 4.490"}}