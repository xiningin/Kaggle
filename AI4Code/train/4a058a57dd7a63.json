{"cell_type":{"d9e628df":"code","0b23b223":"code","403ec857":"code","8b3633c4":"code","f49d8c34":"code","5ac6edcb":"code","ef561908":"code","b225431c":"code","749ce5fd":"code","33c02efa":"code","89aec13e":"code","4a51793c":"code","291cc02b":"code","e5de8451":"code","e1536f52":"code","c4da7fcf":"code","cf326b83":"code","dff5d60c":"code","f8023995":"code","d7db1b6a":"code","bf9834cc":"code","e22b3827":"code","d3c37440":"code","327565f3":"code","3f1344c4":"code","2f53ba97":"code","c2a122a2":"code","2055ca84":"code","40915695":"code","faa2c55b":"code","3cf2f5ca":"code","467c65b7":"code","4b5cfe03":"code","217aabb2":"code","515e63ab":"code","b3f0b2a6":"code","8ade0d82":"code","f9cf9b23":"code","205ba7a8":"code","85a2a007":"code","1b49cdaf":"code","af3a4688":"code","83a71c82":"code","4cc8533a":"code","753b2a89":"code","86658746":"code","fba05c3e":"code","33c7e196":"code","774f99de":"code","482e48f3":"code","8c9f1998":"code","d79bd963":"code","adb1aa4a":"code","3db45cc1":"code","199d3dc6":"code","ddd4e2f8":"code","18df2dea":"code","4d76b611":"code","e888e874":"code","1f886b70":"code","6e9b26c7":"code","a6529799":"code","8f3de39f":"code","801842ca":"code","5f247864":"code","fcd883d6":"code","e24db7cd":"code","9dd3ebb1":"code","3e9c0620":"code","8871e9f0":"code","dea4cec2":"code","f941749b":"code","f6f5987f":"code","bf8431ca":"code","defe662c":"code","a7fec597":"code","bd70fa68":"code","2c5f97f4":"code","59027a70":"code","af326db5":"code","194ec920":"code","cebdd0ff":"code","3707d3e5":"code","74e9612a":"code","5c740103":"code","29f96fe1":"code","1f2253bb":"code","b4931dbb":"code","c716f058":"code","f9c8800e":"code","b3c0389a":"code","b50498e3":"code","c628900c":"code","90c18314":"code","db83f49b":"code","04dc620d":"code","0366c646":"code","69b6ca34":"code","f1eff4ac":"code","50140891":"code","e017a2af":"code","e290c19a":"code","2ec54543":"code","b45765c7":"code","24d73c62":"code","fb390c31":"code","0009ab58":"markdown","26a58414":"markdown","a1503741":"markdown","c8d1b889":"markdown","c36465ad":"markdown","00bb1764":"markdown","c13eed00":"markdown","5cb28c39":"markdown","981f80d7":"markdown","68729698":"markdown","1c7fcf1a":"markdown"},"source":{"d9e628df":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, recall_score,roc_auc_score, roc_curve, auc\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n","0b23b223":"dftrain = pd.read_csv('..\/input\/lt-vehicle-loan-default-prediction\/train.csv', parse_dates = [\"Date.of.Birth\",\"DisbursalDate\"])\ndftest = pd.read_csv('..\/input\/lt-vehicle-loan-default-prediction\/test.csv', parse_dates = [\"Date.of.Birth\",\"DisbursalDate\"])\n","403ec857":"#Check train test \nprint(dftrain.shape)\nprint(dftest.shape)\n","8b3633c4":"dfinfo = pd.read_csv('..\/input\/lt-vehicle-loan-default-prediction\/data_dictionary.csv')\n\ndfinfo","f49d8c34":"dftrain.head(5)","5ac6edcb":"dftrain.dtypes","ef561908":"dftrain.describe()","b225431c":"import pandas_profiling","749ce5fd":"pf1=pandas_profiling.ProfileReport(dftrain)\n","33c02efa":"pf1","89aec13e":"dftrain[\"PERFORM_CNS.SCORE.DESCRIPTION\"].value_counts()","4a51793c":"def risk_level(risk):\n    list1 = risk.split(\"-\")\n    if len(list1)==1:\n        return \"Risk_Unavaliable\"\n    else:\n        return list1[1]\n","291cc02b":"dftrain[\"Risk_level\"] = dftrain[\"PERFORM_CNS.SCORE.DESCRIPTION\"].apply(lambda x: risk_level(x))\ndftest[\"Risk_level\"] = dftest[\"PERFORM_CNS.SCORE.DESCRIPTION\"].apply(lambda x: risk_level(x))","e5de8451":"dftrain[\"Risk_level\"][:5]","e1536f52":"from datetime import date\n\ndef AgeinYears(date,df):\n    disbDate = df[\"DisbursalDate\"][i]\n    return disbDate.year - date.year - ((disbDate.month, disbDate.day) < (date.month, date.day))","c4da7fcf":"AgeinYrsTrain=[]\nfor i in range(len(dftrain)):\n    AgeinYrsTrain.append(AgeinYears(dftrain[\"Date.of.Birth\"][i],dftrain))\nAgeinYrsTest=[]\nfor i in range(len(dftest)):\n    AgeinYrsTest.append(AgeinYears(dftest[\"Date.of.Birth\"][i],dftest))\n    ","cf326b83":"dftrain[\"AgeinYrs\"]=AgeinYrsTrain\ndftest[\"AgeInYears\"]=AgeinYrsTest","dff5d60c":"dftrain.drop([\"UniqueID\",\"Employee_code_ID\"], axis=1, inplace=True)\ndftest.drop([\"UniqueID\",\"Employee_code_ID\"], axis=1, inplace=True)","f8023995":"def duration(duration):\n    list1=duration.split(\" \")\n    sumyrs = float(list1[0][:-3]) + float(list1[1][:-3])\/12\n    return round(sumyrs,2)","d7db1b6a":"dftrain[\"AVERAGE.ACCT.AGE_Years\"] = dftrain[\"AVERAGE.ACCT.AGE\"].apply(lambda x: duration(x))\ndftest[\"AVERAGE.ACCT.AGE_Years\"] = dftest[\"AVERAGE.ACCT.AGE\"].apply(lambda x: duration(x))\ndftrain[\"CREDIT.HISTORY.LENGTH_Years\"] = dftrain[\"CREDIT.HISTORY.LENGTH\"].apply(lambda x: duration(x))\ndftest[\"CREDIT.HISTORY.LENGTH_Years\"] = dftest[\"CREDIT.HISTORY.LENGTH\"].apply(lambda x: duration(x))","bf9834cc":"dftrain[\"CREDIT.HISTORY.LENGTH_Years\"][:5]","e22b3827":"dftrain.drop([\"AVERAGE.ACCT.AGE\",\"Aadhar_flag\",\"Current_pincode_ID\",\"Date.of.Birth\",\"DisbursalDate\",\"Driving_flag\",\"MobileNo_Avl_Flag\",\"PAN_flag\",\"PRI.DISBURSED.AMOUNT\",\"SEC.ACTIVE.ACCTS\",\"Passport_flag\",\"supplier_id\",\"branch_id\",\"VoterID_flag\",\"State_ID\",\"SEC.SANCTIONED.AMOUNT\",\"SEC.OVERDUE.ACCTS\",\"SEC.NO.OF.ACCTS\",\"SEC.INSTAL.AMT\",\"SEC.DISBURSED.AMOUNT\",\"SEC.CURRENT.BALANCE\"], axis=1, inplace=True)\ndftest.drop([\"AVERAGE.ACCT.AGE\",\"Aadhar_flag\",\"Current_pincode_ID\",\"Date.of.Birth\",\"DisbursalDate\",\"Driving_flag\",\"MobileNo_Avl_Flag\",\"PAN_flag\",\"PRI.DISBURSED.AMOUNT\",\"SEC.ACTIVE.ACCTS\",\"Passport_flag\",\"supplier_id\",\"branch_id\",\"VoterID_flag\",\"State_ID\",\"SEC.SANCTIONED.AMOUNT\",\"SEC.OVERDUE.ACCTS\",\"SEC.NO.OF.ACCTS\",\"SEC.INSTAL.AMT\",\"SEC.DISBURSED.AMOUNT\",\"SEC.CURRENT.BALANCE\"], axis=1, inplace=True)","d3c37440":"dftrain.drop([\"PERFORM_CNS.SCORE.DESCRIPTION\",\"CREDIT.HISTORY.LENGTH\"], axis=1, inplace=True)\ndftest.drop([\"PERFORM_CNS.SCORE.DESCRIPTION\",\"CREDIT.HISTORY.LENGTH\"], axis=1, inplace=True)","327565f3":"dftrain.head(10)","3f1344c4":"dftrain.isnull().sum()","2f53ba97":"#Replacing negative age with positive age. Assume typing error\ndftrain[\"AgeinYrs\"][dftrain[\"AgeinYrs\"]<0]=-dftrain[\"AgeinYrs\"]","c2a122a2":"dftrain[\"AgeinYrs\"].describe()","2055ca84":"dftrain.dropna(subset = [\"Employment.Type\"], inplace=True)\ndftest.dropna(subset = [\"Employment.Type\"], inplace=True)","40915695":"dftrain.isnull().sum()","faa2c55b":"pf2=pandas_profiling.ProfileReport(dftrain)\n","3cf2f5ca":"pf2","467c65b7":"dftrain[\"manufacturer_id\"].value_counts()","4b5cfe03":"dftrain.drop(dftrain[dftrain.manufacturer_id==156].index, inplace=True)","217aabb2":"dftest[\"manufacturer_id\"].value_counts()","515e63ab":"dftest.drop(dftest[dftest.manufacturer_id==155].index, inplace=True)","b3f0b2a6":"dftest[\"manufacturer_id\"].value_counts()","8ade0d82":"dftrain_onehot1 = pd.get_dummies(dftrain, columns=['manufacturer_id',\"Employment.Type\",\"Risk_level\"], prefix = ['MID_',\"ET_\",\"RL_\"],drop_first=True)\ndftest_onehot1 = pd.get_dummies(dftest, columns=['manufacturer_id',\"Employment.Type\",\"Risk_level\"], prefix = ['MID_',\"ET_\",\"RL_\"],drop_first=True)","f9cf9b23":"dftrain_onehot1.head()\n#Reference Dummy: ManufacturerID-45,EmployeeType: Salaried, Risk_Type, Risk_level: High Risk ","205ba7a8":"dftest_onehot1.head()","85a2a007":"X= dftrain_onehot1.loc[:, dftrain_onehot1.columns != 'loan_default']\nY= dftrain_onehot1[\"loan_default\"]","1b49cdaf":"X.columns","af3a4688":"variables = ['disbursed_amount', 'asset_cost', 'ltv', 'PERFORM_CNS.SCORE',\n       'PRI.NO.OF.ACCTS', 'PRI.ACTIVE.ACCTS', 'PRI.OVERDUE.ACCTS',\n       'PRI.CURRENT.BALANCE', 'PRI.SANCTIONED.AMOUNT', 'PRIMARY.INSTAL.AMT',\n       'NEW.ACCTS.IN.LAST.SIX.MONTHS', 'DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS',\n       'NO.OF_INQUIRIES', 'AgeinYrs', 'AVERAGE.ACCT.AGE_Years',\n       'CREDIT.HISTORY.LENGTH_Years']","83a71c82":"X.head()","4cc8533a":"Y.head()","753b2a89":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))","86658746":"scaled_training= X.copy()","fba05c3e":"X.head()","33c7e196":"scaled_training[variables] = scaler.fit_transform(scaled_training[variables])","774f99de":"scaled_training.head(5)","482e48f3":"from imblearn.over_sampling import SMOTE, ADASYN\nfrom collections import Counter\nX_resampled, y_resampled = SMOTE().fit_resample(scaled_training, Y)\nprint(sorted(Counter(y_resampled).items()))","8c9f1998":"X_resampled_ADS, y_resampled_ADS = ADASYN().fit_resample(scaled_training, Y)\nprint(sorted(Counter(y_resampled).items()))","d79bd963":"X_resampled_ADS","adb1aa4a":"y_resampled_ADS","3db45cc1":"X_resampled","199d3dc6":"x_train, x_test, y_train, y_test = train_test_split(X_resampled_ADS, y_resampled_ADS, test_size=0.30, random_state=42)","ddd4e2f8":"x_train.head()","18df2dea":"Counter(y_train)","4d76b611":"Counter(y_test)","e888e874":"log1 = LogisticRegression(penalty='l1',solver=\"liblinear\", max_iter=1000).fit(x_train,y_train)","1f886b70":"log1.score(x_train, y_train)","6e9b26c7":"predTrain = log1.predict(x_train)","a6529799":"predTrain[:5]","8f3de39f":"PredictionsTrain = pd.DataFrame(columns=[\"Prediction\",\"Actual\"])\nPredictionsTrain[\"Prediction\"]=predTrain\nPredictionsTrain[\"Actual\"] = y_train.tolist()\n","801842ca":"PredictionsTrain.head()","5f247864":"log1.score(x_test, y_test)","fcd883d6":"predTest = log1.predict(x_test)\n","e24db7cd":"predTest","9dd3ebb1":"PredictionsTest = pd.DataFrame(columns=[\"Prediction\",\"Actual\"])\nPredictionsTest[\"Prediction\"]=predTest\nPredictionsTest[\"Actual\"] = y_test.tolist()\n","3e9c0620":"PredictionsTest.head()","8871e9f0":"CoeffLogR = pd.DataFrame(columns=[\"Variable\",\"Coefficients\"])\nCoeffLogR[\"Variable\"]=X.columns\nCoeffLogR[\"Coefficients\"]=log1.coef_.tolist()[0]\nCoeffLogR.sort_values(\"Coefficients\", ascending = False)\n","dea4cec2":"# confusion matrix\nprint('Confusion Matrix')\nprint(pd.DataFrame(confusion_matrix(y_test, predTest)))","f941749b":"print('Accuracy',accuracy_score(y_test, predTest))\nprint('Recall',recall_score(y_test, predTest))\nprint('F1_score',f1_score(y_test, predTest))\nprint('ROC-AUC_score',roc_auc_score(y_test, predTest))\n","f6f5987f":"regrRM = RandomForestClassifier(n_estimators=300)\nregrRM.fit(x_train, y_train)","bf8431ca":"regrRM.score(x_train, y_train)","defe662c":"regrRM.score(x_test, y_test)","a7fec597":"predTestRF = regrRM.predict(x_test)\npredTestRF","bd70fa68":"print('Accuracy',accuracy_score(y_test, predTestRF))\nprint('Recall',recall_score(y_test, predTestRF))\nprint('F1_score',f1_score(y_test, predTestRF))\nprint('ROC-AUC_score',roc_auc_score(y_test, predTestRF))\n","2c5f97f4":"# Confusion matrix\nprint('Confusion Matrix')\nprint(pd.DataFrame(confusion_matrix(y_test, predTestRF)))","59027a70":"from sklearn.model_selection import RandomizedSearchCV\n\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 1000, num = 5)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 6)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n# Create the random grid\nrm_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}","af326db5":"\nrf2 = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \nrf2_random = RandomizedSearchCV(estimator = rf2, param_distributions = rm_grid, n_iter = 2, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf2_random.fit(x_train, y_train)","194ec920":"rf2_random.best_params_","cebdd0ff":"rf2_random.score(x_train, y_train)","3707d3e5":"rf2_random.score(x_test, y_test)","74e9612a":"from sklearn.ensemble import AdaBoostClassifier","5c740103":"adb = AdaBoostClassifier(n_estimators=300,learning_rate=0.1, random_state=42)","29f96fe1":"adb.fit(x_train, y_train)","1f2253bb":"adb.score(x_train, y_train)","b4931dbb":"adb.score(x_test, y_test)","c716f058":"predTestadb = adb.predict(x_test)","f9c8800e":"predTestadb","b3c0389a":"print('Accuracy',accuracy_score(y_test, predTestadb))\nprint('Recall',recall_score(y_test, predTestadb))\nprint('F1_score',f1_score(y_test, predTestadb))\nprint('ROC-AUC_score',roc_auc_score(y_test, predTestadb))","b50498e3":"print('Confusion Matrix')\nprint(pd.DataFrame(confusion_matrix(y_test, predTestadb)))","c628900c":"from sklearn.ensemble import GradientBoostingClassifier","90c18314":"gbt = GradientBoostingClassifier(loss='deviance', learning_rate=0.1, n_estimators=200)","db83f49b":"gbt.fit(x_train, y_train)","04dc620d":"gbt.score(x_train, y_train)","0366c646":"gbt.score(x_test, y_test)","69b6ca34":"predTestgbt = gbt.predict(x_test)\npredTestgbt","f1eff4ac":"print('Accuracy',accuracy_score(y_test, predTestgbt))\nprint('Recall',recall_score(y_test, predTestgbt))\nprint('F1_score',f1_score(y_test, predTestgbt))\nprint('ROC-AUC_score',roc_auc_score(y_test, predTestgbt))","50140891":"##Fitting to Test data provided","e017a2af":"scaled_testing=dftest_onehot1.copy()","e290c19a":"scaled_training.head()","2ec54543":"scaled_testing.head()","b45765c7":"scaled_testing=scaled_testing.rename(columns={\"AgeInYears\": \"AgeinYrs\"})","24d73c62":"scaled_testing[variables] = scaler.fit_transform(scaled_testing[variables])","fb390c31":"pred = rf2_random.predict(scaled_testing)\npred","0009ab58":"# Oversampling","26a58414":"![](https:\/\/outline-prod.imgix.net\/20191003-RgIQuFEohniqlf16PO6r?auto=format&q=60&w=1280&s=1ded7c95447fe7399c5fe80e4e6f9ad9)","a1503741":"# Random Forest Classifier","c8d1b889":"# Adaboost","c36465ad":"# Gradient Boost","00bb1764":"# Crossvalidation","c13eed00":"# EDA","5cb28c39":"# Will a person default his\/her car loan payment?","981f80d7":"# Scaling","68729698":"# Logistic Regression","1c7fcf1a":"# Splitting into training and testing"}}