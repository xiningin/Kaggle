{"cell_type":{"b2f4b588":"code","b5745afa":"code","2fff17e6":"code","8f10f9e8":"code","d88aced1":"code","1bd6aaf0":"code","f6dca413":"code","5952b01b":"code","7d893fdc":"code","8ed68df6":"code","23a13368":"code","89e840f4":"code","831138d1":"code","18dc6daf":"code","311bc58f":"code","fede49c0":"code","417c10f2":"code","4d5bfecc":"code","ba2c4c06":"code","0844a01f":"code","463ae847":"code","cad9fa9f":"code","cb24f337":"code","d5a6013b":"code","da81779e":"code","5c600dd5":"markdown","ba6446d3":"markdown","c8a869ce":"markdown","f15ff196":"markdown","b96e2347":"markdown","1ba94d96":"markdown","536d94db":"markdown","7300de52":"markdown","570132ae":"markdown","806653d8":"markdown"},"source":{"b2f4b588":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [20,8]\nimport seaborn as sns","b5745afa":"df = pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\ndf.drop(['CUST_ID'], axis=1,inplace=True)\ndisplay(df.shape)\ndisplay(df.head(2))\ndisplay(df.columns)","2fff17e6":"df.describe()","8f10f9e8":"df.info()","d88aced1":"missing_data=df[['CREDIT_LIMIT', 'MINIMUM_PAYMENTS']]\nmissing_data.isna().sum()","1bd6aaf0":"df['CREDIT_LIMIT'].fillna(df['CREDIT_LIMIT'].mode()[0], inplace=True)\ndf['MINIMUM_PAYMENTS'].fillna(df['MINIMUM_PAYMENTS'].mode()[0], inplace=True)","f6dca413":"import seaborn as sb\ncorr=df[['BALANCE', 'BALANCE_FREQUENCY', 'PURCHASES','PURCHASES_FREQUENCY','ONEOFF_PURCHASES', 'ONEOFF_PURCHASES_FREQUENCY',\n       'INSTALLMENTS_PURCHASES','PURCHASES_INSTALLMENTS_FREQUENCY','CASH_ADVANCE','CASH_ADVANCE_FREQUENCY']].corr()\n# sb.heatmap(corr, cmap=\"tab10\", annot=True, vmin=0, vmax=1)\nsb.heatmap(corr, cmap=\"YlGn\", annot=True, vmin=0, vmax=1)","5952b01b":"import seaborn as sb\ncorr1=df[['PURCHASES_TRX', 'CREDIT_LIMIT', 'PAYMENTS']].corr()\nsb.heatmap(corr1,  annot=True)","7d893fdc":"# from sklearn.preprocessing import MinMaxScaler\n# def scale_fn(data):\n#     scaler = MinMaxScaler().fit(data)\n#     return scaler.transform(data)\n# # col_list1=['PURCHASES_TRX','CREDIT_LIMIT', 'PAYMENTS', 'MINIMUM_PAYMENTS', 'PRC_FULL_PAYMENT']\n# for col in df.columns:\n#     df[col]=scale_fn(df[[col]])\n# df.describe()","8ed68df6":"cols=df.columns\nfor col in cols:\n    df[col] = np.log(1 + df[col])","23a13368":"X=df[['BALANCE', 'BALANCE_FREQUENCY', 'PURCHASES', 'ONEOFF_PURCHASES'\n      , 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE', 'PURCHASES_FREQUENCY'\n      ,'ONEOFF_PURCHASES_FREQUENCY', 'PURCHASES_INSTALLMENTS_FREQUENCY'\n       ,'CASH_ADVANCE_FREQUENCY', 'CASH_ADVANCE_TRX', 'PURCHASES_TRX'\n       ,'CREDIT_LIMIT', 'PAYMENTS', 'MINIMUM_PAYMENTS', 'PRC_FULL_PAYMENT'\n        ,'TENURE'\n       ]]","89e840f4":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=0.95)\nX_red = pca.fit_transform(X)\ndf_red1=pd.DataFrame(X_red)\ndisplay(df_red1.head(2))\n\nn_clusters=10\nkmeans_models = [KMeans(n_clusters=k, random_state=23).fit(X_red) for k in range (2, n_clusters)] #https:\/\/stackoverflow.com\/questions\/51382250\/valueerror-number-of-labels-is-1-valid-values-are-2-to-n-samples-1-inclusiv\n# print(silhouette_score(X_red, kmeans_models[0].labels_))\nsilhoutte_scores = [silhouette_score(X_red, model.labels_) for model in kmeans_models]\ninnertia = [model.inertia_ for model in kmeans_models]\ndata={'n_clusters':range(2,n_clusters),'innertia':innertia,'silhoutte_scores':silhoutte_scores}\nk_df=pd.DataFrame(data)\ndisplay(k_df)\n##\n\nplt.figure(figsize=(20,8))\nplt.title('Elbow method',fontsize=24)\nplt.xlabel('Number of Clusters',fontsize=24)\nplt.ylabel('WCSS(inertia)',fontsize=24)\nplt.plot(range(2, n_clusters), innertia,'-gD', label='line with marker')\nplt.show()\n\n\n\nsilhoutte_scores1 = silhoutte_scores[0:]\nplt.figure(figsize=(20,8))\nplt.plot(range(2, n_clusters), silhoutte_scores1, '-rD')\nplt.xticks([2, 3, 4,5,6,7,8,9,10])\nplt.title('Silhoutte scores vs Number of clusters',fontsize=24)\nplt.xlabel('Number of clusters',fontsize=24)\nplt.ylabel('Silhoutte score',fontsize=24)\nplt.show()\n","831138d1":"df_red1['y_pred2']=kmeans_models[0].labels_\ndf_red1['y_pred3']=kmeans_models[1].labels_\ndf_red1['y_pred4']=kmeans_models[2].labels_\ndf_red1['y_pred5']=kmeans_models[3].labels_\ndf_red1['y_pred6']=kmeans_models[4].labels_","18dc6daf":"import seaborn as sns\nsns.scatterplot(data=df_red1, x=0, y=1, hue=\"y_pred2\", palette=sns.color_palette(\"tab10\",2))","311bc58f":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"y_pred3\", palette=sns.color_palette(\"tab10\",3))","fede49c0":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"y_pred4\", palette=sns.color_palette(\"tab10\",4))","417c10f2":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"y_pred5\", palette=sns.color_palette(\"tab10\",5))","4d5bfecc":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"y_pred6\", palette=sns.color_palette(\"tab10\",6))","ba2c4c06":"from sklearn.neighbors import NearestNeighbors\nneigh = NearestNeighbors(n_neighbors=2).fit(X_red)\ndistance,indices=neigh.kneighbors(X_red)\n\ndistances=np.sort(distance,axis=0)\ndistances=distances[:,1]\nplt.plot(distances)","0844a01f":"from sklearn.cluster import DBSCAN\nfrom sklearn.metrics import silhouette_score\n\n\nclustering_models =[DBSCAN(eps=1.5, min_samples=min_samples).fit(X_red) for min_samples in range(7,15)]\nclusters_list=[clustering.labels_ for clustering in clustering_models]\ncluster=[len(set(clusters)) for clusters in clusters_list]\nprint(cluster)\nsilhouette_score1=[silhouette_score(X_red,clusters1) for clusters1 in clusters_list]\nprint(silhouette_score1)","463ae847":"from scipy.cluster.hierarchy import linkage, fcluster, dendrogram\nZ = linkage(X_red, method='ward')\nplt.figure()\ndendrogram(Z)\nplt.show()","cad9fa9f":"from sklearn.cluster import AgglomerativeClustering\nclustering_model =[AgglomerativeClustering(n_clusters=n_clusters).fit(X_red) for n_clusters in [2,3,4]]\ndf_red1['dendo_pred2']=clustering_model[0].labels_\ndf_red1['dendo_pred3']=clustering_model[1].labels_\ndf_red1['dendo_pred4']=clustering_model[2].labels_","cb24f337":"import seaborn as sns\nsns.scatterplot(data=df_red1, x=0, y=1, hue=\"dendo_pred2\", palette=sns.color_palette(\"tab10\",2))","d5a6013b":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"dendo_pred3\", palette=sns.color_palette(\"tab10\",3))","da81779e":"sns.scatterplot(data=df_red1, x=0, y=1, hue=\"dendo_pred4\", palette=sns.color_palette(\"tab10\",4))","5c600dd5":"# Approach 2 - Density-Based","ba6446d3":"# Load","c8a869ce":"From three Approach I learned that \n\n**1> Kmean**\n\nIf we cluster data into 2 cluster diagram looks  overfitted on data\n\nSo we can use cluster of 3, 4 to segment credit card customer\n\n**2> Density-Based**\n\nWe find good epsilon value (1,1.5,2) using  NearestNeighbors\n\nand apply min_samples of (7, 15) range\n\nBut It doesn't give better result as we expected So I ignoring it\n\n**3 > Hierarchical clustering**\n\nFirst we visualized using dendrogram  and find best cluster_numbers as 2,3,4\n\nAfter applying it in AgglomerativeClustering \n\nFor cluster data into 2 cluster diagram looks  overfitted on data\n\nSo we can use cluster of 3, 4 to segment credit card customer\n\n\n**FINAL**\n\nFrom approach 1 and 3  we get that 3, 4 is the best k value \n","f15ff196":"# Approach 1 - K-Means clustering","b96e2347":"# Correlation","1ba94d96":"# Approach 3 - Hierarchical clustering","536d94db":"# Scale","7300de52":"# Missing ","570132ae":"# Info","806653d8":"# Conclusion "}}