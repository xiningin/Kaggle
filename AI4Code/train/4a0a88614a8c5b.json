{"cell_type":{"916e4467":"code","3b521665":"code","89aacfd2":"code","dd9e8d73":"code","9847d652":"code","0388b3ab":"code","68e8deee":"markdown","9a3a5407":"markdown","96028c41":"markdown"},"source":{"916e4467":"from PIL import Image\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nfrom keras.preprocessing.image import ImageDataGenerator\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,Dropout,MaxPooling2D,Activation, BatchNormalization, GlobalAveragePooling2D\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam, SGD\nfrom keras.callbacks import CSVLogger, ModelCheckpoint, ReduceLROnPlateau\nfrom keras.regularizers import l2\nimport matplotlib.pyplot as plt","3b521665":"def load_data(dataframe=None, batch_size=16, mode='categorical'):\n    if dataframe is None:\n        dataframe = pd.read_csv('..\/input\/train.csv')\n    dataframe['has_cactus'] = dataframe['has_cactus'].apply(str)\n    gen = ImageDataGenerator(rescale=1.\/255., validation_split=0.1, horizontal_flip=True, vertical_flip=True)\n    \n    trainGen = gen.flow_from_dataframe(dataframe, directory='..\/input\/train\/train\/',  x_col='id', y_col='has_cactus', has_ext=True, target_size=(32, 32),\n        class_mode=mode, batch_size=batch_size, shuffle=True, subset='validation')\n    \n    testGen = gen.flow_from_dataframe(dataframe, directory='..\/input\/train\/train\/',  x_col='id',y_col='has_cactus', has_ext=True, target_size=(32, 32),\n        class_mode=mode, batch_size=batch_size, shuffle=True, subset='validation')\n    \n    return trainGen, testGen","89aacfd2":"# load data\ntrainGen, valGen = load_data(batch_size=32)","dd9e8d73":"# define model\ndef train_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), padding='same',\n                     input_shape=(32, 32, 3)))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(Conv2D(32, (3, 3)))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n\n    model.add(Conv2D(64, (3, 3), padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(Conv2D(64, (3, 3)))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.3))\n    \n    model.add(Conv2D(128, (3, 3), padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(Conv2D(128, (3, 3)))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten())\n#     model.add(GlobalAveragePooling2D())\n    model.add(Dense(16))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(Dropout(0.3))\n    model.add(Dense(2))\n    model.add(BatchNormalization())\n    model.add(Activation('softmax'))\n    \n    return model","9847d652":"model = train_model()\n# initiate Adam optimizer\nopt = keras.optimizers.RMSprop(lr=0.0005, decay=1e-5)\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\ncbs = [ReduceLROnPlateau(monitor='loss', factor=0.5, patience=1, min_lr=1e-5, verbose=1)]\n\nmodel.fit_generator(trainGen, steps_per_epoch=4922, epochs=4, validation_data=valGen, \n    validation_steps=493, shuffle=True, callbacks=cbs)","0388b3ab":"test_set = pd.read_csv('..\/input\/sample_submission.csv')\npred = np.empty((test_set.shape[0],))\nfor n in tqdm(range(test_set.shape[0])):\n    data = np.array(Image.open('..\/input\/test\/test\/'+test_set.id[n]))\n    data = data.astype(np.float32) \/ 255.\n    pred[n] = model.predict(data.reshape((1, 32, 32, 3)))[0][1]\n\ntest_set['has_cactus'] = pred\ntest_set.to_csv('sample_submission.csv', index=False)","68e8deee":"# Train model","9a3a5407":"[data prepairing part taken from this kernel ](https:\/\/www.kaggle.com\/ivanwang2016\/baseline)","96028c41":"# prepare data with labels"}}