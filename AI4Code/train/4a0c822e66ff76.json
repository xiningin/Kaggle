{"cell_type":{"b47c3eab":"code","31849f4c":"code","0e2488b3":"code","4f6b9e80":"code","c89ce558":"code","469f4841":"code","4a4fa433":"code","6d4f1d92":"code","4ce59a17":"code","fbf01d2b":"code","1a5775fe":"code","67cb7f15":"code","0a8e3ae2":"code","61157f8f":"code","4fc6e2ca":"code","b6870c60":"code","3555f8bd":"code","2a8eb316":"code","b3f940db":"code","d30fbd48":"code","87882816":"code","66024200":"code","412c5cf9":"code","b31e2c64":"code","fea4ab64":"code","c4ecb9d0":"code","d6cc7ade":"code","e9442a05":"code","6da14f07":"code","d83df791":"code","ece26116":"code","7b68464d":"code","e6c197b7":"code","28cb1d01":"code","9755a216":"code","b698dfe7":"code","19e2a0bd":"code","7a37bd02":"code","7cdbc9a0":"code","bde0867a":"code","3b5548b2":"code","90641eab":"code","b2d0f64e":"code","f15f8821":"code","2cdc98f5":"code","3b201a54":"code","c668de09":"code","7136bbbd":"code","0e051211":"code","045068e1":"code","dac27bc9":"code","963e28ef":"code","06fb11e6":"code","e80f5edc":"code","2109b1c4":"code","03a6d8b2":"code","aa8b9dab":"code","75a9c0fd":"code","d2c23b90":"code","1120fd72":"code","ae2a5305":"code","c00c28ac":"code","ac4dd1c5":"code","677685f2":"code","d4928143":"code","210f99cd":"code","8ba1eae5":"code","b125f956":"code","d9e5955c":"code","d8c77d84":"code","ac720c32":"code","edcf0aed":"code","276910c8":"code","80e3a5d4":"code","6f240a12":"code","49d7d549":"code","15d6c12b":"code","00228a65":"code","15d10b49":"markdown","5ed61327":"markdown","e8b8ecb3":"markdown","50565985":"markdown","17f5b071":"markdown","1745f370":"markdown","5dd400dd":"markdown","bb3fce88":"markdown","b10fd551":"markdown","95413214":"markdown","00c081ee":"markdown","53e4586b":"markdown","b0e2451e":"markdown","ebd00124":"markdown","850c2c78":"markdown","a08ccd4d":"markdown"},"source":{"b47c3eab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\n\n\npd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_rows\",None)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31849f4c":"match_data = pd.read_csv(\"\/kaggle\/input\/odi-cricket-matches-19712017\/ContinousDataset.csv\")\nx, y = match_data.shape\nprint(\"Rows = \",x)\nprint(\"Columns = \",y)\nmatch_data.head(5)","0e2488b3":"unique_teams = match_data[\"Winner\"].unique()\nprint(unique_teams)","4f6b9e80":"len(unique_teams)","c89ce558":"winner_count = match_data.loc[:,[\"Winner\",\"Scorecard\"]].groupby(\"Winner\").count()\nwinner_count[\"Percentage\"] = round(winner_count[\"Scorecard\"]*100\/x,0);\nwinner_count = winner_count.sort_values(\"Scorecard\",ascending=False)\nwinner_count","469f4841":"winner_count.iloc[:,0:1].plot(kind=\"bar\",figsize=(20,3))\nplt.xticks(rotation=45)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Wins\")\nplt.title(\"Team wise Matches wins\")\nplt.grid()\nplt.show()","4a4fa433":"winner_count.iloc[:,1:2].plot(kind=\"bar\",figsize=(20,3))\nplt.xticks(rotation=45)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Wins %\")\nplt.title(\"Team wise wins%\")\nplt.grid()\nplt.show()","6d4f1d92":"team_wise_matches_info = pd.DataFrame(columns=[\"TeamName\",\"MatchesPlayed\",\"MatchesWon\",\"WonPercentage\",\"LossPercentage\",\"Total_Home_Played\",\"Total_Home_Wins\",\"Home_Wins%\",\"Home_Innings_1st_1st\",\"Home_Innings_1st_2nd\",\"Home_Innings_2nd_1st\",\"Home_Innings_2nd_2nd\",\"Total_Away_Played\",\"Total_Away_Wins\",\"Away_Wins%\",\"Away_Innings_1st_1st\",\"Away_Innings_1st_2nd\",\"Away_Innings_2nd_1st\",\"Away_Innings_2nd_2nd\"])","4ce59a17":"def team_statistics(team,i):\n    #Calculating the total matches played by a team\n    total_matches_played = match_data[(match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)]\n    total_matches_played_rows,total_matches_played_columns = total_matches_played.shape\n   \n    #Calculating the total matches won by a team\n    total_matches_won = match_data[((match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)) & (match_data[\"Winner\"] == team)]\n    total_matches_won_rows, total_matches_won_columns = total_matches_won.shape\n    \n    #Calculating the total matches played by a team at Home Country\n    total_home_played = match_data[((match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)) & (match_data[\"Host_Country\"] == team)]\n    total_home_played_rows, total_home_played_columns = total_home_played.shape\n    \n    #Calculating the total matches won by a team at Home Country\n    team_home_won = match_data[((match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] == team)]\n    team_home_won_rows,team_home_won_columns = team_home_won.shape\n    \n    #Calculating the total matches won by a team1 in First Innings at Home Country \n    team_home_innings1_1st_country_won = match_data[(match_data[\"Team 1\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] == team) & (match_data[\"Innings_Team1\"] == \"First\")]\n    team_home_innings1_1st_country_won_rows,team_home_innings1_1st_country_won_columns = team_home_innings1_1st_country_won.shape\n    \n    #Calculating the total matches won by a team1 in Second Innings at Home Country \n    team_home_innings1_2nd_country_won = match_data[(match_data[\"Team 1\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] == team) & (match_data[\"Innings_Team1\"] == \"Second\")]\n    team_home_innings1_2nd_country_won_rows,team_home_innings1_2nd_country_won_columns = team_home_innings1_2nd_country_won.shape\n  \n    #Calculating the total matches won by a team2 in First Innings at Home Country \n    team_home_innings2_1st_country_won = match_data[(match_data[\"Team 2\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] == team) & (match_data[\"Innings_Team2\"] == \"First\")]\n    team_home_innings2_1st_country_won_rows,team_home_innings2_1st_country_won_columns = team_home_innings2_1st_country_won.shape\n    \n    #Calculating the total matches won by a team2 in Second Innings at Home Country \n    team_home_innings2_2nd_country_won = match_data[(match_data[\"Team 2\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] == team) & (match_data[\"Innings_Team2\"] == \"Second\")]\n    team_home_innings2_2nd_country_won_rows,team_home_innings2_2nd_country_won_columns = team_home_innings2_2nd_country_won.shape\n   \n    #Calculating the total matches played by a team at Away Country\n    total_away_played = match_data[((match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)) & (match_data[\"Host_Country\"] != team)]\n    total_away_played_rows, total_away_played_columns = total_away_played.shape\n    \n    #Calculating the total matches won by a team at Away Country\n    team_away_won = match_data[((match_data[\"Team 1\"] == team) | (match_data[\"Team 2\"] == team)) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] != team)]\n    team_away_won_rows,team_away_won_columns = team_away_won.shape\n    \n    #Calculating the total matches won by a team1 in First Innings at Away Country\n    team_away_innings1_1st_country_won = match_data[(match_data[\"Team 1\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] != team) & (match_data[\"Innings_Team1\"] == \"First\")]\n    team_away_innings1_1st_country_won_rows,team_away_innings1_1st_country_won_columns = team_away_innings1_1st_country_won.shape\n   \n    #Calculating the total matches won by a team1 in Second Innings at Away Country \n    team_away_innings1_2nd_country_won = match_data[(match_data[\"Team 1\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] != team) & (match_data[\"Innings_Team1\"] == \"Second\")]\n    team_away_innings1_2nd_country_won_rows,team_away_innings1_2nd_country_won_columns = team_away_innings1_2nd_country_won.shape\n    \n    #Calculating the total matches won by a team2 in First Innings at Away Country \n    team_away_innings2_1st_country_won = match_data[(match_data[\"Team 2\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] != team) & (match_data[\"Innings_Team2\"] == \"First\")]\n    team_away_innings2_1st_country_won_rows,team_away_innings2_1st_country_won_columns = team_away_innings2_1st_country_won.shape\n    \n    #Calculating the total matches won by a team2 in Second Innings at Away Country \n    team_away_innings2_2nd_country_won = match_data[(match_data[\"Team 2\"] == team) & (match_data[\"Winner\"] == team) & (match_data[\"Host_Country\"] != team) & (match_data[\"Innings_Team2\"] == \"Second\")]\n    team_away_innings2_2nd_country_won_rows,team_away_innings2_2nd_country_won_columns = team_away_innings2_2nd_country_won.shape\n        \n    team_wise_matches_info.at[i,\"TeamName\"] = team\n    team_wise_matches_info.at[i,\"MatchesPlayed\"] = total_matches_played_rows\n    team_wise_matches_info.at[i,\"MatchesWon\"] = total_matches_won_rows\n    team_wise_matches_info.at[i,\"WonPercentage\"] = round(total_matches_won_rows*100\/total_matches_played_rows,2)\n    team_wise_matches_info.at[i,\"LossPercentage\"] = 100-round(total_matches_won_rows*100\/total_matches_played_rows,2)\n    team_wise_matches_info.at[i,\"Total_Home_Played\"] = total_home_played_rows\n    team_wise_matches_info.at[i,\"Total_Home_Wins\"] = team_home_won_rows\n    team_wise_matches_info.at[i,\"Home_Innings_1st_1st\"] = team_home_innings1_1st_country_won_rows\n    team_wise_matches_info.at[i,\"Home_Innings_1st_2nd\"] = team_home_innings1_2nd_country_won_rows\n    team_wise_matches_info.at[i,\"Home_Innings_2nd_1st\"] = team_home_innings2_1st_country_won_rows\n    team_wise_matches_info.at[i,\"Home_Innings_2nd_2nd\"] = team_home_innings2_2nd_country_won_rows\n    team_wise_matches_info.at[i,\"Total_Away_Played\"] = total_away_played_rows\n    team_wise_matches_info.at[i,\"Total_Away_Wins\"] = team_away_won_rows\n    team_wise_matches_info.at[i,\"Away_Innings_1st_1st\"] = team_away_innings1_1st_country_won_rows\n    team_wise_matches_info.at[i,\"Away_Innings_1st_2nd\"] = team_away_innings1_2nd_country_won_rows\n    team_wise_matches_info.at[i,\"Away_Innings_2nd_1st\"] = team_away_innings2_1st_country_won_rows\n    team_wise_matches_info.at[i,\"Away_Innings_2nd_2nd\"] = team_away_innings2_2nd_country_won_rows\n    \n    if total_home_played_rows > 0:\n         team_wise_matches_info.at[i,\"Home_Wins%\"] = round(team_home_won_rows*100\/total_home_played_rows,2)\n    else :\n         team_wise_matches_info.at[i,\"Home_Wins%\"] = 0\n            \n    if total_away_played_rows > 0:\n         team_wise_matches_info.at[i,\"Away_Wins%\"] = round(team_away_won_rows*100\/total_away_played_rows,2)\n    else :\n         team_wise_matches_info.at[i,\"Away_Wins%\"] = 0","fbf01d2b":"i=0\n\nfor team in unique_teams:\n    data = team_statistics(team,i)\n    i=i+1   ","1a5775fe":"team_wise_matches_info = team_wise_matches_info.sort_values([\"MatchesPlayed\",\"MatchesWon\"],ascending=False)\nteam_wise_matches_info.head()","67cb7f15":"team_wise_matches_info.iloc[:,0:3].plot(kind=\"bar\",x=\"TeamName\",figsize=(25,3))\nplt.xticks(rotation=45)\nplt.xlabel(\"Teams\")\nplt.ylabel(\"Wins %\")\nplt.title(\"Matches Played Vs Matches Won Percentage\")\nplt.grid()\nplt.show()","0a8e3ae2":"def func(pct, allvalues): \n    absolute = int(pct \/ 100.*np.sum(allvalues)) \n    return \"{:.1f}%\\n({:d}%)\".format(pct, absolute)\n\nexplode = (0.1, 0.0, 0.2, 0.3, 0.0, 0.0) \nwp = { 'linewidth' : 1, 'edgecolor' : \"green\" } \n\nfig, ax = plt.subplots(figsize =(10, 7)) \nwedges, texts, autotexts = ax.pie(team_wise_matches_info[\"WonPercentage\"],autopct = lambda pct: func(pct, team_wise_matches_info[\"WonPercentage\"]),labels = team_wise_matches_info[\"TeamName\"],shadow = True,startangle = 90,wedgeprops = wp, textprops = dict(color =\"black\"))\n\nax.legend(wedges, team_wise_matches_info[\"TeamName\"],title =\"Cars\",loc =\"center left\", bbox_to_anchor =(1.5, 0, 0.5, 1)) \n\nplt.setp(autotexts, size = 7, weight =\"bold\") \nax.set_title(\"Matches Won Percentage\") ","61157f8f":"team_wise_matches_info_won_details  = pd.pivot_table(team_wise_matches_info,index=[\"MatchesPlayed\"],columns=\"TeamName\",values=\"MatchesWon\",fill_value=0,aggfunc=sum)\nplt.figure(figsize=(25,8))\nsns.heatmap(team_wise_matches_info_won_details,annot=True,fmt=\".0f\")\nplt.show()","4fc6e2ca":"team_wise_matches_info_won_details  = pd.pivot_table(team_wise_matches_info,index=[\"MatchesPlayed\"],columns=\"TeamName\",values=\"WonPercentage\",fill_value=0,aggfunc=sum)\nplt.figure(figsize=(25,8))\nsns.heatmap(team_wise_matches_info_won_details,annot=True,fmt=\"1.02f\")\nplt.xticks(rotation=45)\nplt.show()","b6870c60":"ground_wise_team_won_data = match_data[match_data[\"Host_Country\"] == \"India\"].pivot_table(index=\"Ground\",columns=\"Winner\",values=\"Scorecard\",fill_value=0,aggfunc=\"count\")\nground_wise_team_won_data","3555f8bd":"plt.figure(figsize=(25,10))\nsns.heatmap(ground_wise_team_won_data,linecolor='black',linewidth=1,annot=True, fmt=\".0f\")\nplt.show()","2a8eb316":"ground_wise_team_won_data = match_data.pivot_table(index=\"Ground\",columns=\"Winner\",values=\"Scorecard\",fill_value=0,aggfunc=\"count\")\nground_wise_team_won_data","b3f940db":"plt.figure(figsize=(25,30))\nsns.heatmap(ground_wise_team_won_data,linecolor='black',linewidth=1,annot=True, fmt=\".0f\")\nplt.show()","d30fbd48":"team_wise_matches_info.head()","87882816":"team_wise_matches_info.sort_values(\"MatchesPlayed\",ascending=False).head(1)","66024200":"team_wise_matches_info.sort_values(\"MatchesWon\",ascending=False).head(1)","412c5cf9":"team_wise_matches_info.sort_values(\"WonPercentage\",ascending=False).head(1)","b31e2c64":"team_wise_matches_info.sort_values(\"Total_Home_Played\",ascending=False).head(1)","fea4ab64":"team_wise_matches_info.sort_values(\"Total_Home_Wins\",ascending=False).head(1)","c4ecb9d0":"team_wise_matches_info.sort_values(\"Home_Wins%\",ascending=False).head(1)","d6cc7ade":"team_wise_matches_info.sort_values(\"Total_Away_Played\",ascending=False).head(1)","e9442a05":"team_wise_matches_info.sort_values(\"Total_Away_Wins\",ascending=False).head(1)","6da14f07":"team_wise_matches_info.sort_values(\"Away_Wins%\",ascending=False).head(1)","d83df791":"match_data_df = team_wise_matches_info","ece26116":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics, tree\n\nmatch_data_df.TeamName = pd.Categorical(match_data_df.TeamName)\nmatch_data_df[\"TeamName\"] = match_data_df.TeamName.cat.codes\n\nmatch_data_df","7b68464d":"pred_columns = match_data_df[:]\nprediction_var = pred_columns.columns\nprint(list(prediction_var))","e6c197b7":"train,test = train_test_split(match_data_df,test_size=0.2)\nprint(train.shape)\nprint(test.shape)","28cb1d01":"train_X = train[prediction_var]\ntrain_Y = train[\"TeamName\"]\nprint(list(train.columns))\n\ntest_X = train[prediction_var]\ntest_Y = train[\"TeamName\"]","9755a216":"gnb = GaussianNB()\ny_pred_gnb = gnb.fit(train_X,train_Y).predict(test_X)","b698dfe7":"cnf_matrix_gnb = metrics.confusion_matrix(test_Y,y_pred_gnb)\nprint(cnf_matrix_gnb)","19e2a0bd":"print(metrics.accuracy_score(test_Y,y_pred_gnb))","7a37bd02":"model = RandomForestClassifier(n_estimators=5)\nmodel.fit(train_X,train_Y)\nprediction = model.predict(test_X)\nprint(round(metrics.accuracy_score(test_Y,prediction),2))","7cdbc9a0":"label_df = pd.read_csv(\"\/kaggle\/input\/odi-cricket-matches-19712017\/LabelledDataset.csv\")","bde0867a":"label_df.head()","3b5548b2":"label_df.isna().sum()","90641eab":"lben= LabelEncoder()\n\nlabel_df[\"Winner\"] = lben.fit_transform(label_df[\"Winner\"])\nlabel_df.head()","b2d0f64e":"labels = label_df.pop(\"Winner\")","f15f8821":"label_df.head()","2cdc98f5":"x_train, x_test, y_train, y_test = train_test_split(label_df, labels,test_size=0.25,random_state = 25)","3b201a54":"rfc = RandomForestClassifier(n_estimators= 10, criterion=\"entropy\")\nrfc.fit(x_train, y_train)","c668de09":"y_pred = rfc.predict(x_test)","7136bbbd":"from sklearn.metrics import confusion_matrix  \ncm= confusion_matrix(y_test, y_pred)  \ncm","0e051211":"originalDataset_df = pd.read_csv(\"\/kaggle\/input\/odi-cricket-matches-19712017\/originalDataset.csv\")\noriginalDataset_df.head()","045068e1":"originalDataset_df.isna().sum()","dac27bc9":"originalDataset_df = originalDataset_df.dropna(how=\"any\")","963e28ef":"originalDataset_df.head()","06fb11e6":"team_name = input(\"Enter Team Name = \")\ndf = originalDataset_df[((originalDataset_df[\"Team 1\"] == team_name) | (originalDataset_df[\"Team 2\"] == team_name))]\nidx = (df['Team 2'] == team_name)\ndf.head()","e80f5edc":"df.loc[idx,['Team 1','Team 2']] = df.loc[idx,['Team 2','Team 1']].values\ndf.head()","2109b1c4":"head_to_head_matches_count = df.pivot_table(index=\"Team 2\",columns=\"Team 1\",values=\"Winner\",fill_value=0,aggfunc=\"count\")\nhead_to_head_matches_count.sort_values(team_name,ascending=False)","03a6d8b2":"india_ground_level_won_df = df.pivot_table(index=\"Team 1\",columns=\"Ground\",values=\"Scorecard\",fill_value=0,aggfunc=\"count\")\nindia_ground_level_won_df.head()\nplt.figure(figsize=(25,1))\nsns.heatmap(india_ground_level_won_df,linecolor='black',linewidth=1,annot=True, fmt=\".0f\")\nplt.show()","aa8b9dab":"ground_name = input(\"Enter Ground Name = \")\nground_level_won_df = originalDataset_df[(originalDataset_df[\"Ground\"]==ground_name)].pivot_table(index=\"Winner\",columns=\"Ground\",values=\"Scorecard\",fill_value=0,aggfunc=\"count\")\nground_level_won_df.head()\nplt.figure(figsize=(25,5))\nsns.heatmap(ground_level_won_df,linecolor='black',linewidth=1,annot=True, fmt=\".0f\")\nplt.show()","75a9c0fd":"head_to_head_matches_count = originalDataset_df.pivot_table(index=\"Team 1\",columns=\"Team 2\",values=\"Winner\",fill_value=0,aggfunc=\"count\")\nhead_to_head_matches_count","d2c23b90":"CategoricalDataset = pd.read_csv(\"\/kaggle\/input\/odi-cricket-matches-19712017\/CategoricalDataset.csv\")\nCategoricalDataset.head()","1120fd72":"from sklearn.preprocessing import StandardScaler","ae2a5305":"scaler = StandardScaler()","c00c28ac":"label_df = pd.read_csv(\"\/kaggle\/input\/odi-cricket-matches-19712017\/LabelledDataset.csv\")","ac4dd1c5":"scaler.fit(label_df.drop(\"Winner\",axis=1))","677685f2":"scaler_features = scaler.transform(label_df.drop(\"Winner\",axis=1))","d4928143":"df_label = pd.DataFrame(scaler_features,columns=label_df.columns[:-1])","210f99cd":"df_label.head()","8ba1eae5":"from sklearn.model_selection import train_test_split","b125f956":"x_train, x_test, y_train, y_test = train_test_split(scaler_features,label_df[\"Winner\"],test_size=0.3)","d9e5955c":"from sklearn.neighbors import KNeighborsClassifier","d8c77d84":"knn = KNeighborsClassifier(n_neighbors=1)","ac720c32":"knn.fit(x_train,y_train)","edcf0aed":"pred = knn.predict(x_test)","276910c8":"from sklearn.metrics import classification_report,confusion_matrix","80e3a5d4":"print(confusion_matrix(y_test,pred))","6f240a12":"print(classification_report(y_test,pred))","49d7d549":"error_rate = []\n\nfor i in range(1,30):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    pred_i = knn.predict(x_test)\n    error_rate.append(np.mean(y_test != pred_i))","15d6c12b":"plt.figure(figsize=(25,5))\nplt.plot(range(1,30),error_rate,color=\"blue\",linestyle=\"dashed\",marker=\"o\",markerfacecolor=\"red\",markersize=10)\nplt.title(\"Error Rate Vs KNN\")\nplt.xlabel(\"K Value\")\nplt.ylabel(\"Error Rate\")","00228a65":"knn = KNeighborsClassifier(n_neighbors=11)\nknn.fit(x_train,y_train)\npred = knn.predict(x_test)\nprint(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))","15d10b49":"# **Australia has won most matches winning percentage outside home town among all the teams**","5ed61327":"# **Pakistan has won most matches outside home town among all the teams**","e8b8ecb3":"# **South Africa has most winning percentage among all the teams**","50565985":"# ****South Africa has most matches winning % among all the teams****","17f5b071":"# **India Won most matches in Banglore**","1745f370":"# **Australia has won the most matches among all the teams**","5dd400dd":"# **Australia has won most matches among all the teams**","bb3fce88":" # **Defined the Data Frame**","b10fd551":"# **Australia has won most matches in home town among all the teams**","95413214":"# **India has played most matches among all the teams**","00c081ee":"# **Australia has played most matches in home town among all the teams**","53e4586b":"# **India has played most matches among all the teams**","b0e2451e":"# **Hong Kong has won most matches winning percentage in home town among all the teams**","ebd00124":"# **Defined the team_statistics function to calculate the team wise statistics and map those statistics to Data Frame**","850c2c78":"# **Pakistan has played most matches outside [](http:\/\/)home town among all the teams**","a08ccd4d":"# **Team Wise Winning Percentages**"}}