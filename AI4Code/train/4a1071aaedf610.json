{"cell_type":{"5c8930c9":"code","7e72acb5":"code","ecaa5c2e":"code","66cce1be":"code","bee2b56b":"code","845859f8":"code","48fd918e":"code","cc71743e":"code","eaf40964":"code","02eae345":"code","434bf277":"code","349cb6db":"code","ea964324":"code","1ce8ffcc":"code","874058b7":"code","9489f8a1":"code","959b6ba7":"markdown","5ed53d16":"markdown","7e3c6e46":"markdown","0f981155":"markdown","361e2ad4":"markdown","cffd0ed0":"markdown","0d653fa9":"markdown","2eaa365a":"markdown","db7a0213":"markdown"},"source":{"5c8930c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7e72acb5":"data = pd.read_csv('..\/input\/voice.csv')\ndata.head(5)","ecaa5c2e":"data.label.unique","66cce1be":"print(data.info())","bee2b56b":"data.label = [1 if each==\"female\" else 0 for each in data.label]","845859f8":"data.label.values","48fd918e":"y = data.label.values\nx_data = data.drop(['label'],axis=1)","cc71743e":"np.min(x_data)","eaf40964":"np.max(x_data)","02eae345":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","434bf277":"x.head(5)","349cb6db":"x_data.head(5)","ea964324":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)\n\n#Now lets transpose the above all\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train shape : \", x_train.shape)\nprint(\"x_test shape : \", x_test.shape)\nprint(\"y_train shape : \", y_train.shape)\nprint(\"y_test shape : \", y_test.shape)","1ce8ffcc":"def initialization(dimension):\n    w = np.full((dimension,1), 0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head\n","874058b7":"def f_b_propagation(w,b,x_train, y_train):\n    #forward propagation\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)\n    loss = -( y_train * np.log(y_head)- ( 1 - y_train ) * np.log( 1 - y_head))\n    cost = (np.sum(loss))\/x_train.shape[1]   # x_train.shape[1]is for scaling the cost\n    \n    #backward propagation\n    derivative_weight = (np.dot(x_train, ((y_head - y_train).T)))\/x_train.shape[1]\n    #x_train.shape[1] is for scaling purpose\n    \n    derivative_bias = np.sum(y_head - y_train)\/ x_train.shape[1]\n    #x_train.shape[1] is for scaling purpose\n    \n    gradients = {\"Derivative_Weight\": derivative_weight, \"Derivative_Bias\": derivative_bias}\n    \n    return cost, gradients","9489f8a1":"def update(w, b, x_train, y_train, learning_rate, number_of_iterations):\n    cost_list_1 = []\n    cost_list_2 = []\n    index = []\n    \n    #Iterate over the updating of parameters\n    for i in range(number_of_iterations):\n        #Make forward and backward propagation to find the cost and gradient\n        cost, gradients = forward_backward_propagation(w, b, x_train, y_train)\n        cost_list_1.append(cost)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        \n        if i % 10 == 0:\n            cost_list_2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration %i =  %f \" %(i, cost))\n        ","959b6ba7":"Now, we will create a function for forward and backward propagation","5ed53d16":"Now, we will write a function to update the parameters\n","7e3c6e46":"We will read the input data voice.csv using read_csv and check the top 5 rows from the data","0f981155":"Now, we will split the dataset into train and test","361e2ad4":"We will now create some basic functions for initializing the bias and weights and also a sigmoid function","cffd0ed0":"We will have the \"label\" values into 'y' and drop the \"label\" column and have 'x_data'","0d653fa9":"We will code \"female\" as 1 and \"male\" as 0.","2eaa365a":"We will now normalize the data","db7a0213":"Normalization logic: \n(x- min(x))\/(max(x)-min(x))"}}