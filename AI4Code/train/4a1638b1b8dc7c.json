{"cell_type":{"c4d5cb5f":"code","bc7071fe":"code","8c30fb28":"code","7fbea740":"code","922ba6b6":"code","0b2be83e":"code","9dbca6a4":"code","9fff3dd3":"code","8f99d606":"code","05abd3c9":"code","a8e513db":"code","affd6dae":"code","f3dfb1bc":"code","3f2f293b":"code","b5df8ed6":"code","4b69b192":"code","9eca3889":"code","899350ab":"code","17334d5c":"code","04bfb11e":"markdown","a943e6ea":"markdown","6d42636a":"markdown","95c3d940":"markdown","76bf7d1e":"markdown","d4afd8f2":"markdown","129d541c":"markdown","720e9e79":"markdown","4383535e":"markdown","5e2c9085":"markdown","80dcc8e7":"markdown","8c0bb6c8":"markdown","f3f30efd":"markdown","d7207804":"markdown","2477ba00":"markdown","68a32658":"markdown","a6642de2":"markdown","1cbfe448":"markdown","5c32a045":"markdown","aae66e3f":"markdown","004aa6f2":"markdown","e0d9230f":"markdown","fdd3acd3":"markdown","27cbc079":"markdown","0c7faad7":"markdown","79b9349a":"markdown","4873de37":"markdown","96ce8910":"markdown"},"source":{"c4d5cb5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bc7071fe":"# Load Iris dataset\niris=sns.load_dataset('iris')\niris\n","8c30fb28":"x_data = range(0, iris.shape[0])\ny_data = iris['sepal_length']\n\nfig, ax = plt.subplots()\nax.plot(x_data, y_data)\nax.set_title('Iris Dataset')\nax.grid()\n\n\nplt.show()","7fbea740":"x_data = range(0, iris.shape[0])\ny_data = iris['sepal_length']\n\nfig, ax = plt.subplots()\nax.plot(x_data, y_data)\nax.set_title('Iris Dataset')\nax.grid(color='r', linestyle='-', linewidth=1)\n\nplt.show()","922ba6b6":"x_data = range(0, iris.shape[0])\ny1_data = iris['petal_length']\ny2_data = iris['petal_width']\n\nfig, ax = plt.subplots()\nax.plot(x_data, y1_data)\nax.plot(x_data, y2_data)\nax.set_title('Iris Dataset')\n\nax.grid()\nax.legend()\nplt.show()","0b2be83e":"x_data = range(0, iris.shape[0])\ny1_data = iris['petal_length']\ny2_data = iris['petal_width']\n\nfig, ax = plt.subplots()\n\nax.set(xlabel='Samples',\n       ylabel='Sepal',\n       title='Iris Dataset')\n\nax.plot(x_data, y1_data,\n        x_data, y2_data, \"r\")\n\nax.legend()\nplt.show()\n","9dbca6a4":"x_data = range(0, iris.shape[0])\ny1_data = iris['sepal_length']\ny2_data = iris['sepal_width']\n\nplt.figure(1,figsize=(30,8))\n\nplt.subplot(1,2,1) # 1 fila, 2 columnas, indice = 1\nplt.plot(x_data, y1_data, '-', lw=2)\nplt.title('Iris Dataset')\nplt.legend()\nplt.xlabel('Sample')\nplt.ylabel('Length')\nplt.title('Sepal Length')\n\nplt.subplot(122) # equivalente a plt.subplot(1,2,2)\nplt.plot(x_data, y2_data, '-', color='r', lw=2)\nplt.xlabel('Sample')\nplt.ylabel('Width')\nplt.title('Sepal Width')\n\nplt.grid(True)\nplt.show()","9fff3dd3":"data = iris['species'].value_counts()\npoints = data.index\nfrequency = data.values\n\nfig, ax = plt.subplots(figsize=(8,6))\n\nax.bar(points, frequency)\nax.set_title('Iris Scores')\nax.set_xlabel('Species')\nax.set_ylabel('Frequency')\n\nplt.show()\n\n","8f99d606":"\nsns.countplot('species',data=iris)\nplt.show()","05abd3c9":"\ny_1 = iris[iris['species'] == 'setosa']['sepal_length']\ny_2 = iris[iris['species'] == 'versicolor']['sepal_length']\ny_3 = iris[iris['species'] == 'virginica']['sepal_length']\n\ny_4 = iris[iris['species'] == 'setosa']['petal_length']\ny_5 = iris[iris['species'] == 'versicolor']['petal_length']\ny_6 = iris[iris['species'] == 'virginica']['petal_length']\n\ny_7 = iris[iris['species'] == 'setosa']['sepal_width']\ny_8 = iris[iris['species'] == 'versicolor']['sepal_width']\ny_9 = iris[iris['species'] == 'virginica']['sepal_width']\n\n\ny_10 = iris[iris['species'] == 'setosa']['petal_width']\ny_11 = iris[iris['species'] == 'versicolor']['petal_width']\ny_12 = iris[iris['species'] == 'virginica']['petal_width']\n\n#x_labels = iris['species'].unique()\nx_labels = ['sepal length', 'sepal width', 'petal length', 'petal width']\nx_pos = np.arange(4)\n\nY_1 = [y_1.mean(), y_4.mean(), y_7.mean(), y_10.mean()]\nY_2 = [y_2.mean(), y_5.mean(), y_8.mean(), y_11.mean()]\nY_3 = [y_3.mean(), y_6.mean(), y_9.mean(), y_12.mean()]\n\n\nfig_size = [15,5]\n\nplt.figure(figsize=fig_size)\n\nplt.bar(x_pos-0.2, Y_1,color=\"r\",width=0.2)\nplt.bar(x_pos+0.2,Y_2,color=\"g\",width=0.2)\nplt.bar(x_pos, Y_3,color=\"b\", width=0.2)\n\n\nplt.title(\"Iris dataset\")\nplt.xticks(x_pos,x_labels);\nplt.xlabel(\"Features\")\nplt.ylabel(\"Mean\")\nplt.legend([\"setosa\",\"versicolor\", \"virginica\"])\nplt.show();","a8e513db":"df = sns.load_dataset('iris')\ndata1 = df.loc[df.species=='setosa', \"sepal_length\"]\ndata2 = df.loc[df.species=='virginica', \"sepal_length\"]\ndata3 = df.loc[df.species=='versicolor', \"sepal_length\"]\n\nplt.subplots(figsize=(7,6), dpi=100)\n\nsns.distplot( data1 , color=\"dodgerblue\", label=\"Setosa\")\nsns.distplot( data2 , color=\"orange\", label=\"virginica\")\nsns.distplot( data3 , color=\"deeppink\", label=\"versicolor\")\n\nplt.title('Iris Histogram')\nplt.legend();","affd6dae":"data1 = iris['sepal_length']\ndata2 = iris['sepal_width']\n\n# create a figure and axis\nfig, ax = plt.subplots()\n\n# scatter the sepal_length against the sepal_width\nax.scatter(data1, data2)\n\n# set a title and labels\nax.set_title('Iris Dataset')\nax.set_xlabel('sepal_length')\nax.set_ylabel('sepal_width')\n\nplt.show()","f3dfb1bc":"data1 = iris['sepal_length']\ndata2 = iris['sepal_width']\nspecies = iris['species']\n\ncolors = {'setosa':'r', 'versicolor':'g', 'virginica':'b'}\n\nfig, ax = plt.subplots()\n\nfor i in range(len(iris['sepal_length'])):\n    ax.scatter(data1[i], data2[i],color=colors[species[i]])\n\nax.set_title('Iris Dataset')\nax.set_xlabel('sepal_length')\nax.set_ylabel('sepal_width')\nplt.show()","3f2f293b":"sns.set_style(\"whitegrid\");\nsns.pairplot(iris, hue=\"species\", height=3);\nplt.show()","b5df8ed6":"\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.boxplot(\n    x='species', y='petal_length',\n    data=iris, order=['virginica','versicolor','setosa'],\n    linewidth=2.5, orient='v', dodge=False\n)","4b69b192":"data = iris['sepal_length']\n            \nax = sns.distplot(data, kde=True)\n","9eca3889":"# matriz de correlaci\u00f3n\ncorr = iris.corr()\n\nfig, ax = plt.subplots()\n\n# creaci\u00f3n del mapa de calor\nim = ax.imshow(corr.values)\n\n# etiquetas\nax.set_xticks(np.arange(len(corr.columns)))\nax.set_yticks(np.arange(len(corr.columns)))\nax.set_xticklabels(corr.columns)\nax.set_yticklabels(corr.columns)\n\n# rotaci\u00f3n de los textos\nplt.setp(ax.get_xticklabels(), \n         rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\nplt.show()","899350ab":"ax = sns.heatmap(iris.corr(), annot=True)","17334d5c":"from sklearn import tree\nfrom sklearn.datasets import load_iris\nimport graphviz \n\ndataset = load_iris()\n\nclf = tree.DecisionTreeClassifier()\n#clf = tree.DecisionTreeClassifier(random_state=0, max_depth=2)\nclf = clf.fit(dataset.data, dataset.target)\n\n\ndot_data = tree.export_graphviz(\n    clf, out_file=None, \n    feature_names=dataset.feature_names,  \n    class_names=dataset.target_names,  \n    filled=True, rounded=True,      \n    special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph ","04bfb11e":"Forma de obtener el histograma y la  gr\u00e1fica de distribuci\u00f3n utilizando Seaborn:","a943e6ea":"**1. Capa de backend:**\n\nEsta es la capa m\u00e1s baja de la arquitectura y en ella se realizan varias funciones necesarias  para el trazado de una figura. En la capa de backend hay 3 clases principales\n**FigureCanvas** (la capa \/ superficie sobre la que se dibujar\u00e1 la figura), \n**Renderer** (la clase que se encarga del dibujo en la superficie) y \n**Event** (para manejar los eventos del rat\u00f3n y el teclado). \n\nEn general, no trabajaremos con la capa Backend.\n","6d42636a":"Cuando queremos 2 o m\u00e1s figuras en una sola imagen, podemos utilizar subplot.\n\nplt.subplot puede tener 2 sintaxis:\n - plt.subplot(nrows, ncols, index)\n - plt.subplot(xyz)\n \ndonde xyz es un n\u00famero entero de 3 d\u00edgitos que representa: x-No de filas, y = No de columnas, z =  \u00edndice del gr\u00e1fico. \n\nEsta es una de las caracter\u00edsticas m\u00e1s \u00fatiles cuando queremos comparar dos o m\u00e1s figuras en la misma gr\u00e1fica en lugar de tenerlas en im\u00e1genes separadas.\n\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.subplot.html\n","95c3d940":"En la arquitectura de Matplotlib existen 3 capas:\n    1. Capa de backend\n    2. Capa de artista (artist layer)\n    3. Capa de scripting\n\n![imagen.png](attachment:imagen.png)","76bf7d1e":"## **Gr\u00e1ficos de dispersi\u00f3n (Scatter)** ## \n\nEn lo que respecta al aprendizaje autom\u00e1tico y la ciencia de datos, uno de los gr\u00e1ficos m\u00e1s utilizados para la visualizaci\u00f3n  de datos son los gr\u00e1ficos de dispersi\u00f3n (o, en ingl\u00e9s, scatter). Este gr\u00e1fico nos da una representaci\u00f3n de cada punto dentro del conjunto de datos. Los diagramas de dispersi\u00f3n est\u00e1n disponibles tanto en 2D como en 3D.","d4afd8f2":"# Graphviz\n\nLos algoritmos con \u00e1rbol de decisi\u00f3n son uno de los modelos no lineales m\u00e1s populares. \n\nPara visualizar estos \u00e1rboles usamos una herramienta especial llamada Graphviz.\n\nReference Sklearn: https:\/\/scikit-learn.org\/stable\/modules\/tree.html","129d541c":"![imagen.png](attachment:imagen.png)","720e9e79":"## **Gr\u00e1ficas por pares (Pair plots)** ## \n\nPodemos usar diagramas de dispersi\u00f3n en 2D (2 atributos) o en 3D (3 atributos), pero qu\u00e9 hacer cuando tenemos 4 o m\u00e1s. En estos casos es \u00fatil utilizar gr\u00e1ficas por pares.\n\nSupongamos que tenemos un n\u00famero n de atributos, las gr\u00e1ficas por pares nos crear\u00e1 una figura (nxn) donde las gr\u00e1ficas diagonales representan el histograma de la caracter\u00edstica correspondiente a esa fila y el resto de las gr\u00e1ficas las diferentes combinaciones de atributos.\n\nDe esta forma, al disponer de una visi\u00f3n m\u00e1s general obtenida al usar  gr\u00e1ficas por pares, podemos ver qu\u00e9 dos caracter\u00edsticas pueden explicar y separar mejor los datos para, luego,  usar la gr\u00e1fica de dispersi\u00f3n entre esas 2 caracter\u00edsticas para explorarla eb m\u00e1s en detalle. \n\nDado que obtendremos n x n gr\u00e1ficas para n caracter\u00edsticas, las gr\u00e1fica por pares puede volverse compleja cuando tenemos una gran cantidad de caracter\u00edsticas. En tales casos, la mejor opci\u00f3n ser\u00e1 usar una t\u00e9cnica de reducci\u00f3n de dimensionalidad para mapear datos en  2D y visualizarlos usando un diagrama de dispersi\u00f3n 2D.\n\nVamos a generar las gr\u00e1ficas por pares relativas al  dataset de Iris de forma que, observ\u00e1ndolas,  podemos concluir que, la longitud del p\u00e9talo y el ancho del p\u00e9talo son las 2 caracter\u00edsticas que pueden separar mejor los datos.\n\nDocumentation de Pairplots: https:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html","4383535e":"Obtener la misma gr\u00e1fica pero utilizando Seaborn:","5e2c9085":"Podemos el diagrama de cajas utilizando Seaborn:","80dcc8e7":"**Biblograf\u00eda complementaria:**\n\nMatplotlib\nhttps:\/\/www.pybonacci.org\/images\/2012\/08\/tutorial-de-matplotlib-pyplotv0-1-201208311.pdf\n","8c0bb6c8":"**3. Capa de scripting, Pyplot**\n\nMatplotlib tiene dos interfaces.La primera es una interfaz orientada a objetos (OO). En este caso, utilizamos una instancia de axes.Axes para representar visualizaciones en una instancia de la figure.Figure, y se programa en la capa de Artista.\n\nLa segunda interfaz se basa en MATLAB y utiliza una interfaz de estados, esta capa est\u00e1 encapsulada en una capa de scripting, el m\u00f3dulo pyplot. \n\nLa capa de scripting es la capa superior y los m\u00e9todos existentes en esta capa se encargan del manejo autom\u00e1tico de las capas inferiores. Tambi\u00e9n se le llama interfaz de estado (stateful interface).\n","f3f30efd":"## Mapa de calor (Heatmap) ##\n\nEl mapa de calor o heatmap es una  t\u00e9cnica de visualizaci\u00f3n utilizada para comparar 2 variables o caracter\u00edsticas con los valores correspondientes.\n\nPara el caso de la biblioteca  de seaborn, el mapa de calor crear\u00e1 una cuadr\u00edcula como trama (junto con una barra de color opcional). Si proporcionamos una matriz de entrada  con ciertos valores, el mapa de calor  reproduce exactamente la gr\u00e1fica de salida en la misma forma que la matriz de entrada y cada mosaico se colorea en funci\u00f3n de los valores proporcionados en cada elemento de la matriz.\n\nSeaborn documentation: https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html","d7207804":"## **Diagrama de barras (Bar chart)** ## \n\nEste tipo de gr\u00e1fico es uno de los m\u00e1s utilizado y se aplica  en muchos campos, no solo en el an\u00e1lisis de datos, sino tambi\u00e9n en an\u00e1lisis de tendencias. \n\nPor ejemplo, si queremos generar un diagrama de barras a partir del dataset de Iris, donde la posici\u00f3n de las barras se asocia a la especie (virginica, setosa, versicolor)  y la altura de la barra a la frecuencia de aparici\u00f3n en el dataset.\n\nDocumentation Link for Bar plot: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.bar.html","2477ba00":"## **Terminolog\u00eda de matplotlib** ##\n\nLa mayor\u00eda de los t\u00e9rminos son sencillos, pero lo m\u00e1s importante es recordar que:\n\n* La Figure es la imagen final que puede contener 1 o m\u00e1s Axes.\n* Los Axes representan una gr\u00e1fica individual \n* No confundir Axes con la palabra \"axis\", que se refiere al eje x \/ y de una gr\u00e1fica.\n\n![](https:\/\/www.python-course.eu\/images\/matplotlib_terms.png)\n\n","68a32658":"Podemos obtener el mapa de calor (heatmap)  m\u00e1s f\u00e1cilmente utilizando Seaborn:","a6642de2":"## **Distribuci\u00f3n de datos (Distribution plot)** ## \n\nNos permite observar la funci\u00f3n densidad de probabilidad de un conjunto de datos\n\nPara poner en pr\u00e1ctica este tipo de gr\u00e1ficos, podemos utilizar el dataset de Iris para crear un diagrama de distribuci\u00f3n en  funci\u00f3n de la longitud  o  ancho del p\u00e9talo (funci\u00f3n de entrada) y utilizar diferentes colores para los distintas  clases  que se van a predecir   (variable dependiente o salida). \n\n\nLas estructuras en forma de bloques afilados son histogramas y la curva suavizada la funci\u00f3n de densidad de probabilidad (PDF). El PDF de una curva puede ayudarnos a identificar la distribuci\u00f3n subyacente para esa caracter\u00edstica en concreto y esto es  una de las principales ventajas de la visualizaci\u00f3n de datos.\n\nDocumentation de distplot: https:\/\/seaborn.pydata.org\/generated\/seaborn.distplot.html","1cbfe448":"Ahora vamos a colorear los puntos seg\u00fan la especie.\n\nDocumentation sobre Scatterplot: https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.scatter.html ","5c32a045":"Para m\u00e1s informaci\u00f3n sobre la arquitectura de matplotlib: \n[https:\/\/www.aosabook.org\/en\/matplotlib.html]\n\n","aae66e3f":"Python tiene varios m\u00f3dulos para visualizar datos  y dentro de ellos destacan Matplotlib y Seaborn, este \u00faltimo utiliza matplotlib como capa base. Tambi\u00e9n hay tipos de gr\u00e1ficos similares en Pandas cuando todos los datos se almacenan en un dataframe de Pandas. ","004aa6f2":"## **Diagramas de caja (Box plots)** ## \n\nEl m\u00e1ximo inter\u00e9s del box-plot es visualizar la distribuci\u00f3n de una variable num\u00e9rica de la manera m\u00e1s simplificada posible. S\u00f3lo utiliza los valores de los cuartiles, los extremos (el m\u00ednimo y el m\u00e1ximo) y valores at\u00edpicos o outliers.\n\nLas l\u00edneas rectas en el m\u00e1ximo y el m\u00ednimo  se denominan bigotes mientras que los puntos fuera de los bigotes se considerar\u00e1n como valores at\u00edpicos (outliers). \n\nDocumentation de box plots: https:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html","e0d9230f":"Obtener la  gr\u00e1fica de distribuci\u00f3n  utilizando Seaborn:","fdd3acd3":"## **Gr\u00e1ficos lineales (Line plots)** ##\n\nEste es el gr\u00e1fico m\u00e1s frecuente en an\u00e1lisis de 2 variables. En este tipo de gr\u00e1ficos se unen los puntos mediante l\u00edneas rectas. \n\n![](https:\/\/miro.medium.com\/max\/1350\/1*c-GMdqYyW8a0XE2bh2y7Hw.png)","27cbc079":"**2. Capa de artista**\n\nEsta es la segunda capa de la arquitectura. En esta capa se lleva a cabo la mayor parte del trabajo de dibujar las diversas funciones. Si suponemos que  el papel es un objeto  FigureCanvas y el l\u00e1piz un objeto de tipo Renderer, entonces, la mano del pintor estar\u00eda dentro de la capa Artista, de ah\u00ed su nombre. Dentro de esta capa hay varias clases disponibles como por ejemplo: **Figure, Axes y Axis**.\n\n![imagen.png](attachment:imagen.png)","0c7faad7":"Cada Axes puede o no tener grid.\n\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.grid.html\n\n![imagen.png](attachment:imagen.png)","79b9349a":"Mostramos a continuaci\u00f3n el diagrama de dispersi\u00f3n simple (scatter) de forma que podamos ver todos los puntos que conforman el dataset. \n\n![](https:\/\/miro.medium.com\/max\/864\/1*KI8WDvcq2Wcmj1REgQ-u9w.png)","4873de37":"## **Arquitectura de Matplotlib** ##\n\nMatplotlib es un m\u00f3dulo de python para crear gr\u00e1ficos y visualizaciones de datos. Es el m\u00f3dulo de visualizaci\u00f3n de datos m\u00e1s popular de python, y es utilizado por otros m\u00f3dulos, como Tensorflow, Pandas o como dec\u00edamos anteriormente Seaborn.\n\n![imagen.png](attachment:imagen.png)","96ce8910":"**Axes:**\n\nAxes es el \u00e1rea completa de la figura. Esta  clase contiene los atributos necesarios para dibujar un gr\u00e1fico:\n* agregar un t\u00edtulo, \n* asignar etiquetas, \n* seleccionar valores de bin para diferentes tipos de gr\u00e1ficos en cada eje, etc.\n\nPodemos tener varios Axes en una sola figura.\n\n\n![](https:\/\/www.python-course.eu\/images\/matplotlib_object_hierarchy2.png)\n\n\n"}}