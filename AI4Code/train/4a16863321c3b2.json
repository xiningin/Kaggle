{"cell_type":{"32049991":"code","97128553":"code","c2885f7c":"code","0c006a00":"code","ead70ab2":"code","945cc98f":"code","2a6f0adc":"code","cda896c3":"code","8010911e":"code","a6d5ee8c":"code","bec45740":"code","1b1d230d":"code","189924bc":"code","6f317c9e":"code","82ec1c7f":"code","bc128d49":"code","a036c6d5":"code","ff492277":"code","43ebfda0":"code","d7f78d4f":"code","05b65ab9":"code","5decea51":"code","83f9e452":"markdown","8b423c6f":"markdown","e7a3f9b6":"markdown","d8f29117":"markdown","dc22c93a":"markdown","2a6708b8":"markdown","73d63b61":"markdown","982e111b":"markdown","248ac1f4":"markdown","1278c2b1":"markdown","b4e3396d":"markdown","ff3d5d58":"markdown","b3b14210":"markdown","a356a214":"markdown","64df0bf9":"markdown","1526fa33":"markdown","25c8fbbc":"markdown","891f7319":"markdown","569f8c26":"markdown","87bbf70a":"markdown","3a847519":"markdown","c8415fdf":"markdown","ab0214a3":"markdown","27c2d7cc":"markdown","d7206709":"markdown","5efd3177":"markdown","828f7cdc":"markdown","4f9804f4":"markdown","34cd57bf":"markdown","6cc0fdf3":"markdown","bed9f772":"markdown"},"source":{"32049991":"import numpy as np\n\n#adds support for large, multi-dimensional arrays and matrices\n#along with a large collection of high-level mathematical functions to operate.\n\n\nimport pandas as pd \n\n#high-performance,easy-to-use data structures","97128553":"fd = pd.read_csv(\"..\/input\/startup_funding.csv\")  # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfd.head(5)  #shows the first 5 DATASET","c2885f7c":"print(*fd.columns)","0c006a00":"del fd['Remarks'] #del - command\nfd.head(5)","ead70ab2":"leng=len(fd.index)+1  #find length\n\nprint(leng,\"ROWS are present in this DATASET\")","945cc98f":"name = fd['InvestorsName'].unique()   #stores unique values of INVESTORS NAME\namount = fd['AmountInUSD'].unique()   #stores unique values of INVESTORS NAME\n\n\nprint(*amount[:5])\ntype(amount)","2a6f0adc":"#to find unique names of listed cities\n\nuni_city = [] #array declaration\nuni_city = fd['CityLocation'].unique() #to find unique\n\nprint(uni_city[:5])\ntype(uni_city)","cda896c3":"uni_city_list=np.array(uni_city).tolist()  #converts np.array to list\n\nuni_city_list.append('R.m.d')   #appends RMD\n\nprint(uni_city_list[:5])\nprint(len(uni_city_list))   #prints len of list\n\ntype(uni_city_list)","8010911e":"startup={}\ntype(startup)\n\nfor i in range(0,len(uni_city)):\n    startup[uni_city[i]]=amount[i];\nfor i,j in startup.items():\n    print(i,\":\",j)","a6d5ee8c":"fd[fd.CityLocation == 'Chennai'].head(5)","bec45740":"#to convert string to float\n\nfd[\"AmountInUSD\"] = fd[\"AmountInUSD\"].apply(lambda x: float(str(x).replace(\",\",\"\"))) #expression conversion is done using lambda\nfd[\"AmountInUSD\"] = pd.to_numeric(fd[\"AmountInUSD\"]) #now those amount are converted to numeric format\n\nfd.head(5)\n\n\n\n#fd[\"Date\"] = fd[\"Date\"].apply(lambda x: float(str(x).replace(\"\/\",\"\"))) #expression conversion is done using lambda\n#fd[\"Date\"] = pd.to_numeric(fd[\"Date\"]) #now those amount are converted to numeric format\n\n#fd.head(5)\n","1b1d230d":"#to convert NaN (Not a NUMBER) to 0\n\nfd.fillna(0).head(5)","189924bc":"#total\n\nval = fd['AmountInUSD'].sum() #which sums up all the values in the row \"AmountInUSD\"\nprint(\"Total funding amount\",val) #print total\n\n","6f317c9e":"#to calculate max value and to print the max row\n\nmax_invest=max(fd['AmountInUSD'])  #find max\nprint(\"maximum amount invested\",max_invest)\n\n\nmax_index=fd['AmountInUSD'].idxmax()   #to assign max amount's index value\nfd.iloc[[max_index]]   #print the row\n\n\n","82ec1c7f":"min_invest=min(fd['AmountInUSD'])  \nprint(\"minimum amount invested\",min_invest)\n\n\nmin_index=fd['AmountInUSD'].idxmin()   #to assign max amount's index value\nfd.iloc[[min_index]]   #print the row\n","bc128d49":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n%matplotlib inline\n","a036c6d5":"cityname = fd['CityLocation'].value_counts().head(10)\nplt.figure(figsize=(15,8))\nsns.barplot(cityname.index, cityname.values)\nplt.xticks(rotation='vertical')\nplt.xlabel('Cities Name')\nplt.ylabel('Number of STARTUPS in each cities')\n\nplt.show()\n#fd.loc[fd['CityLocation'] == \"Mumbai\", 'AmountInUSD']\n\n#total = fd.loc[fd['CityLocation'] == \"Bangalore\", 'StartupName'].sum()\nx=0\nfor i in cityname.index:\n    print(\"Number of STARTUPS in\",i, \"are\",cityname.values[x])\n    x=x+1","ff492277":"plt.scatter(cityname.index,cityname.values)\nplt.xticks(rotation='vertical')\nplt.xlabel('Cities Name')\nplt.ylabel('Number of STARTUPS in each cities')\n\nplt.show()","43ebfda0":"plt.pie(cityname.values, labels = cityname.index, autopct = \"%.01f\")\nplt.show()","d7f78d4f":"investname = fd['InvestorsName'].value_counts().head(5)\nplt.figure(figsize=(15,8))\nsns.barplot(investname.index, investname.values)\n#plt.xticks(rotation='vertical')\nplt.xlabel('Investors Name')\nplt.ylabel('No. of Investments made')\n\nplt.show()\n\nx=0\nfor i in investname.index:\n    print(\"Investments made by\",i, \"on\",investname.values[x],\"startups\")\n    x=x+1","05b65ab9":"plt.scatter(investname.index,investname.values)\nplt.xticks(rotation='vertical')\nplt.xlabel('Investors Name')\nplt.ylabel('No. of Investments made')\n\nplt.show()","5decea51":"plt.pie(cityname.values, labels = cityname.index, autopct = \"%.01f\")\nplt.show()","83f9e452":"**DATA MANIPULATION**\n\n*1. IMPORT NUMPY AND PANDAS*\n> *1. 1 ASSIGNING DATASETS TO FD*\n> > *1. 1. 1 DISPLAY FIRST 5 OF THE ENTIRE DATASET*\n\n*2. TO VIEW EACH COLUMN NAME*\n> *2. 1 DELETE A SPECIFIC COLUMN*\n\n*3. TO FIND TOTAL NUMBER OF ROWS*\n\n*4. FETCH UNIQUE VALUES*\n> *4. 1*\n\n> *4. 2 DATASTRUCTURE IN PYTHON*\n\n*5. TO DISPLAY DATASET WITH SPECIFIC CONSTRAINTS*\n\n*6. CONVERT STRING TO FLOAT*\n\n*7. TO CACULATE MAX VALUE AND PRINT THE ROW WHICH HAS THE MAXIMUM VALUE*\n> *7.1 MINIMUM VALUE*\n\n**DATA VISUALIZATION**\n\n*SET 1 FOR VALUES CITYNAME.INDEX AND CITYNAME.VALUES*\n> *1. BAR GRAPH*\n> > *2. SCATTER PLOT*\n> > > *3. PIE CHART*\n\n*SET 2 FOR VALUES INVESTNAME.INDEX AND INVESTNAME.VALUES*\n> *1. BAR GRAPH*\n> > *2. SCATTER PLOT*\n> > > *3. PIE CHART*","8b423c6f":"![](http:\/\/www.digitalvidya.com\/wp-content\/uploads\/2018\/08\/data-structures-and-algorithms-in-python-1170x630.jpg)","e7a3f9b6":"**BASICS**","d8f29117":"![](http:\/\/static-news.moneycontrol.com\/static-mcnews\/2017\/04\/shutterstock_489439225-770x433.jpg)","dc22c93a":"**7.1 MINIMUM VALUE**","2a6708b8":"**2. SCATTER PLOT**","73d63b61":"*Done by* \n>*PRADIP*   \n>*GIRIRAM*   \n>*KALYAN*   \n>*NITHISH*","982e111b":"![](https:\/\/www.tertiarycourses.com.sg\/media\/catalog\/product\/cache\/1\/image\/512x\/040ec09b1e35df139433887a97daa66f\/d\/a\/data-visualization-python.jpg)","248ac1f4":"**2. TO VIEW EACH COLUMN NAME**","1278c2b1":"**SET 2 FOR VALUES INVESTNAME.INDEX AND INVESTNAME.VALUES**","b4e3396d":"**4. 1**","ff3d5d58":"**1. BAR GRAPH**","b3b14210":"*2. DICTIONARY*","a356a214":"*1. LIST*","64df0bf9":"**6. CONVERT STRING TO FLOAT**","1526fa33":"**DATASTRUCTURES**","25c8fbbc":"**3. TO FIND TOTAL NUMBER OF ROWS**","891f7319":"**6.1 CONVERSION OF NaN TO 0**","569f8c26":"**1. 1 ASSIGNING DATASETS TO FD**\n \n*1. 1. 1 DISPLAY FIRST 5 OF THE ENTIRE DATASET*","87bbf70a":"**7. TO CACULATE MAX VALUE AND PRINT THE ROW WHICH HAS THE MAXIMUM VALUE**","3a847519":"**3. PIE CHART**","c8415fdf":"![](http:\/\/assets.datacamp.com\/production\/tracks\/14\/badges\/original\/Data_Manipulation_10x.png?1506959694)","ab0214a3":"**SET 1 FOR VALUES CITYNAME.INDEX AND CITYNAME.VALUES**","27c2d7cc":"**2. 1 DELETE A SPECIFIC COLUMN**","d7206709":"**1. BAR GRAPH**","5efd3177":"1. IMPORT NUMPY AND PANDAS","828f7cdc":"**DATA VISUALIZATION**","4f9804f4":"**4. FETCH UNIQUE VALUES**","34cd57bf":"**5. TO DISPLAY DATASET WITH SPECIFIC CONSTRAINTS**","6cc0fdf3":"**2. SCATTER PLOT**","bed9f772":"**3. PIE CHART**"}}