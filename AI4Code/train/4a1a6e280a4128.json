{"cell_type":{"6919e37d":"code","796b680c":"code","f9eb393f":"code","064cd244":"code","f45e23f1":"code","d31d99d8":"code","6629974c":"code","461167c8":"code","e62ded96":"code","2313157a":"code","d794a1a9":"code","ab30f1bc":"code","ce3d83fe":"code","db6b0e6f":"markdown","30af380a":"markdown","249c416d":"markdown","8e682a05":"markdown","9bdbe5cc":"markdown","b37e4ded":"markdown","7dff5f84":"markdown","aca78556":"markdown","8bf29307":"markdown","1726ee37":"markdown","de68bf81":"markdown","0e798163":"markdown","5dabd56c":"markdown","ffd039d4":"markdown","9b29eb7d":"markdown","1aac3da8":"markdown","0434b7c7":"markdown"},"source":{"6919e37d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport ast\n\nplt.style.use('seaborn-ticks')","796b680c":"pokemon_data = pd.read_csv('..\/input\/pokemon-data.csv', \n                           sep = ';', converters={'Types':ast.literal_eval, 'Abilities':ast.literal_eval, 'Moves':ast.literal_eval})\nmove_data = pd.read_csv('..\/input\/move-data.csv', index_col = 0)\nfor var in ['Power', 'Accuracy']:\n    move_data[var].replace('None', np.nan, inplace=True)\n    move_data[var] = move_data[var].astype(float)","f9eb393f":"pokemon_data.head()","064cd244":"plt.scatter(pokemon_data.HP, pokemon_data.Attack, alpha = 0.3)\nplt.xlabel('HP')\nplt.ylabel('Attack')\nplt.show()","f45e23f1":"moves_list = []\nfor moves in pokemon_data.Moves:\n    moves_list.append(len(moves))\npokemon_data['Number of Moves'] = moves_list","d31d99d8":"pokemon_data['Number of Moves'] = [len(a) for a in pokemon_data.Moves]","6629974c":"plt.scatter(pokemon_data['Attack'], pokemon_data['Special Attack'], \n            c = pokemon_data['Number of Moves'], alpha = 0.3, cmap = 'viridis')\nc = plt.colorbar()\nc.set_label('Number of Moves')\nplt.xlabel('Attack')\nplt.ylabel('Special Attack')\nplt.show()","461167c8":"move_data.head()","e62ded96":"plt.hist(move_data.Power, range = (0, move_data.Power.max()), bins = 20)\nplt.xlabel('Power')\nplt.ylabel('Number of Moves')\nplt.show()","2313157a":"sns.barplot('Type', 'Power', data = move_data)\nplt.xticks(rotation = 45)\nplt.show()","d794a1a9":"sns.swarmplot('Type', 'Power', data = move_data, edgecolor = 'black', linewidth = 1)\nplt.xticks(rotation = 45)\nplt.show()","ab30f1bc":"sns.barplot('Type', 'Power', data = move_data)\nsns.swarmplot('Type', 'Power', data = move_data, edgecolor = 'black', linewidth = 1, alpha = 0.5)\nplt.xticks(rotation = 45)\nplt.show()","ce3d83fe":"for contest, marker in zip(set(move_data.Contest), ['o', 'x', 'D', '+', 'v', '*']):\n    plt.scatter('Power', 'PP', data = move_data[move_data.Contest == contest], marker = marker, alpha = 0.5, label = contest)\nplt.xlabel('Power')\nplt.ylabel('PP')\nplt.legend()\nplt.show()","db6b0e6f":"There are a couple of new things going on here that we haven't seen yet. You probably don't need to worry about these, but here's what we're doing if you're curious:\n- \"sep\" tells pandas what type of character separates the items. By default this is a comma (CSV stands for \"comma separated values\" but for whatever reason our datasets use a semicolon.\n- A few of our columns contain lists. If we use the default settings, these will get loaded as strings, which we definitely don't want. We can use \"converters\" to have pandas try to load things like lists when it sees them.\n- \"index_col\" tells pandas that one of the columns in the data should be used as the index. If we don't provide this, pandas will make a new index and we'll end up with an extra row of numbers that we don't need.\n- Whoever put together the move_data dataset used \"None\" when no value was available for Power or Accuracy. What this ends up doing is making the whole column come out as strings, which we don't want. We can fix this by 1) replacing the string \"None\" with nan (not a number), and 2) turning the column into floats (which are basically numbers with decimal points).\n\nOur datasets are now stored as something called a <b>dataframe<\/b>. Let's see what our first dataframe looks like:","30af380a":"Let's move on and look at the second dataframe, which has information about the individual moves the Pokemon can do.","249c416d":"We're using a few different libraries today:\n- matplotlib.pyplot is the library we typically use for making graphs with Python.\n- seaborn is built on top of matplotlib, and makes it easy to make extra-pretty graphs!\n- pandas is for working with dataframes. We'll use it to store and manipulate our datasets.\n- ast and numpy are things we're using because of the way our input data is formatted. You probably don't need to worry about them for the purposes of this tutorial! We used numpy last week, and you'll probably see it again in the future.\n\nWe can give libraries a shorter name when we import them so we won't have to type as much later on.\n\nImport libraries:","8e682a05":"What else can you think of to plot from either of these datasets?\n\nFor more inspiration, check out [the Seaborn gallery](https:\/\/seaborn.pydata.org\/examples\/index.html). Some types of graph that might work well for the datasets we have are the jointplot, scatterplot (this does the same thing as plt.scatter, but it has some nice extra features), violinplot, pairplot, or kdeplot. Are there any particularly cool patterns that you're able to find?","9bdbe5cc":"Load the datasets:","b37e4ded":"That last line added a new column to our dataframe called \"Number of Moves.\" Adding columns to dataframes works a lot like assigning variables.","7dff5f84":"Let's try something a bit more complicated. What if we wanted to know how many moves each Pokemon has? We don't have that number already calculated, but we do have a list of moves and can check its length using the `len` function. We can do that pretty easily by using a for loop to go through each thing in the \"Moves\" column.","aca78556":"Another fun plot using Seaborn is the swarmplot. This plots the individual data points so you can see both their distribution and how many there are at a glance. You can make this plot on its own, or overlay it on a bar plot.","8bf29307":"If you click inside the parentheses in plt.scatter(), a helpful box pops up with some of the other options you have with this function.\n\nTry making scatter plots of some of the other variables from the Pokemon dataset, and playing with some of the options in the scatter function.","1726ee37":"If you want to really nerd out with these datasets, here's a super-detailed notebook someone else has put together with more visualizations and stuff:\n\nhttps:\/\/github.com\/n2cholas\/pokemon-analysis\/blob\/master\/Competitive-Pokemon-Analysis-and-Modelling.ipynb","de68bf81":"Now let's try plotting that. If we want to look at three variables at a time, we can map one of the variables to the color of the points.","0e798163":"Today is going to be all about visualizing data. The dataset we've chosen to start with is [this awesome Pokemon dataset](https:\/\/github.com\/n2cholas\/pokemon-analysis). Because why not start with something fun?","5dabd56c":"What is the power of most of the moves? We can make a histogram to see that moves with a power between 50-80 or so are the most common.","ffd039d4":"But! There's an easier way! A **list comprehension** lets us take a simple for loop like the one above and write it in one line. The output of a list comprehension is always a new list, and we don't have to make any messy intermediate variables.\n\nAnything you can do with the list comprehension you can always do with a regular for loop, but they can make your code a lot easier to write and to read! The cell below does exactly the same thing as the one above, but it takes one line instead of four.","9b29eb7d":"How does power vary depending on the type of move? A bar graph is a good way to look at this. We can also making bar graphs pretty easily using matplotlib directly, but <b>Seaborn<\/b> makes it easy by doing the averaging for us.","1aac3da8":"What's the relationship between the power of a move and PP (how many times we can use it in a row)?\n\nWe can also use colors and\/or symbols to represent a third variable. This is like what we did with \"Number of moves\" earlier, but since we're talking about categories now instead of numbers, we need to use a for loop to plot each category one at a time.","0434b7c7":"Each row is a Pokemon, and each column contains a particular piece of information about that Pokemon.\n\nLet's get started making some plots of the Pokemon data using `matplotlib`! We'll start by plotting the Attack and HP stats for each Pokemon. You can try plotting other stats by changing \"HP\" and \"Attack\" to one of the other column names that contains numbers (see the cell above)."}}