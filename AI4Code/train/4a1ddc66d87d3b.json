{"cell_type":{"ab91f0ab":"code","01124c37":"code","c3508f16":"code","633f49b1":"code","5fdb87b8":"code","940e23cd":"code","bffdb6c4":"code","3f4340cd":"code","c908b01c":"code","622792d9":"code","ca434715":"code","c5368aab":"code","17e0e634":"code","61ef536c":"code","71fb77e4":"markdown","dd419f5a":"markdown","87070ae4":"markdown","3863ed4b":"markdown"},"source":{"ab91f0ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01124c37":"df=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv',index_col=0)","c3508f16":"df.head()","633f49b1":"df.info()","5fdb87b8":"df.isnull().any()","940e23cd":"import seaborn as sns\nsns.countplot(x='diagnosis',data=df)","bffdb6c4":"df.drop('Unnamed: 32',axis=1,inplace=True)\ndf.columns","3f4340cd":"x=df[['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]\ny=df['diagnosis']","c908b01c":"from sklearn.model_selection import train_test_split\nx_train,x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=101)","622792d9":"from sklearn.svm import SVC \nsvc=SVC()\nsvc.fit(x_train,y_train)\npred=svc.predict(x_test)","ca434715":"from sklearn.metrics import confusion_matrix,classification_report\nprint(confusion_matrix(y_test,pred))\nprint(classification_report(y_test,pred))\n","c5368aab":"para_grid={'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001],'kernel':['rbf']}\nfrom sklearn.model_selection import GridSearchCV\ngrid=GridSearchCV(SVC(),para_grid,refit=True,verbose=3)","17e0e634":"grid.fit(x_train,y_train)\ngrid.best_params_\ngrid.best_estimator_","61ef536c":"grid_predictions = grid.predict(x_test)\nprint(confusion_matrix(y_test,grid_predictions))\nprint(classification_report(y_test,grid_predictions))","71fb77e4":"Using svm ","dd419f5a":"Using grid search:","87070ae4":"a slight change in the output now","3863ed4b":"splitting the data into test and train "}}