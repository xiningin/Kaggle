{"cell_type":{"5b5e3236":"code","a5aa3f5e":"code","04514c3b":"code","870793ab":"code","f2a07463":"code","fbf47c21":"code","18307b38":"code","6361ab1c":"code","1cd65f43":"code","e3275f72":"code","ceccec6c":"code","a3838265":"code","33c37872":"code","de99da24":"code","6ac31b65":"code","936bcce6":"code","4a2a37c4":"code","5654d8eb":"code","c0fbdaae":"code","3a275684":"code","62c7da64":"code","84a92871":"markdown","355d7cb4":"markdown","e8009af7":"markdown","eac46ce2":"markdown","3185d449":"markdown","6e88d15b":"markdown","2db663e2":"markdown","0c0d7cbd":"markdown","0d1a2912":"markdown","5d401ab5":"markdown","bf0ff233":"markdown","90b3003b":"markdown","5761ff1c":"markdown","a804989d":"markdown","3c90b69c":"markdown","dee49307":"markdown"},"source":{"5b5e3236":"import os\nimport glob\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import Callback, EarlyStopping\nfrom sklearn.metrics import confusion_matrix, classification_report","a5aa3f5e":"path = '..\/input\/weather-dataset\/dataset'\npath_imgs = list(glob.glob(path+'\/**\/*.jpg'))","04514c3b":"labels = list(map(lambda x:os.path.split(os.path.split(x)[0])[1], path_imgs))\nfile_path = pd.Series(path_imgs, name='File_Path').astype(str)\nlabels = pd.Series(labels, name='Labels')\ndata = pd.concat([file_path, labels], axis=1)\ndata = data.sample(frac=1).reset_index(drop=True)\ndata.head()","870793ab":"fig, axes = plt.subplots(nrows=4, ncols=4, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data.File_Path[i]))\n    ax.set_title(data.Labels[i])\nplt.tight_layout()\nplt.show()","f2a07463":"counts = data.Labels.value_counts()\nsns.barplot(x=counts.index, y=counts)\nplt.xlabel('Labels')\nplt.ylabel('Count')\nplt.xticks(rotation=50);","fbf47c21":"train_df, test_df = train_test_split(data, test_size=0.2, random_state=2)","18307b38":"def gen(pre,train,test):\n    train_datagen = ImageDataGenerator(preprocessing_function=pre, validation_split=0.2)\n    test_datagen = ImageDataGenerator(preprocessing_function=pre)\n    \n    train_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='File_Path',\n        y_col='Labels',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=True,\n        seed=0,\n        subset='training',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\")\n    valid_gen = train_datagen.flow_from_dataframe(\n        dataframe=train,\n        x_col='File_Path',\n        y_col='Labels',\n        target_size=(100,100),\n        class_mode='categorical',\n        batch_size=32,\n        shuffle=False,\n        seed=0,\n        subset='validation',\n        rotation_range=30,\n        zoom_range=0.15,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.15,\n        horizontal_flip=True,\n        fill_mode=\"nearest\")\n    test_gen = test_datagen.flow_from_dataframe(\n        dataframe=test,\n        x_col='File_Path',\n        y_col='Labels',\n        target_size=(100,100),\n        color_mode='rgb',\n        class_mode='categorical',\n        batch_size=32,\n        verbose=0,\n        shuffle=False)\n    return train_gen, valid_gen, test_gen","6361ab1c":"def func(name_model):\n    pre_model = name_model(input_shape=(100,100, 3),\n                   include_top=False,\n                   weights='imagenet',\n                   pooling='avg')\n    pre_model.trainable = False\n    inputs = pre_model.input\n    x = Dense(100, activation='relu')(pre_model.output)\n    x = Dense(100, activation='relu')(x)\n    outputs = Dense(11, activation='softmax')(x)\n    model = Model(inputs=inputs, outputs=outputs)\n    model.compile(loss = 'categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])\n    my_callbacks  = [EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience=2,\n                              mode='auto')]\n    return model, my_callbacks","1cd65f43":"def plot(history,test_gen,train_gen,model):\n    # Plotting Accuracy, val_accuracy, loss, val_loss\n    fig, ax = plt.subplots(1, 2, figsize=(10, 3))\n    ax = ax.ravel()\n\n    for i, met in enumerate(['accuracy', 'loss']):\n        ax[i].plot(history.history[met])\n        ax[i].plot(history.history['val_' + met])\n        ax[i].set_title('Model {}'.format(met))\n        ax[i].set_xlabel('epochs')\n        ax[i].set_ylabel(met)\n        ax[i].legend(['Train', 'Validation'])\n        \n    # Predict Data Test\n    pred = model.predict(test_gen )\n    pred = np.argmax(pred,axis=1)\n    labels = (train_gen.class_indices)\n    labels = dict((v,k) for k,v in labels.items())\n    pred = [labels[k] for k in pred]\n    \n    # Classification report\n    cm=confusion_matrix(test_df.Labels,pred)\n    clr = classification_report(test_df.Labels, pred)\n    print(clr)\n    # Display 6 picture of the dataset with their labels\n    fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(12, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\n    for i, ax in enumerate(axes.flat):\n        ax.imshow(plt.imread(test_df.File_Path.iloc[i+1]))\n        ax.set_title(f\"True: {test_df.Labels.iloc[i+1]}\\nPredicted: {pred[i+1]}\")\n    plt.tight_layout()\n    plt.show()\n        \n    return history","e3275f72":"def result_test(test,model_use):\n    results = model_use.evaluate(test, verbose=0)\n    \n    print(\"    Test Loss: {:.5f}\".format(results[0]))\n    print(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))\n    \n    return results","ceccec6c":"from tensorflow.keras.applications import EfficientNetB7\nfrom tensorflow.keras.applications.efficientnet import preprocess_input\nENet_pre=preprocess_input\ntrain_gen_ENet, valid_gen_ENet, test_gen_ENet = gen(ENet_pre,train_df,test_df)\nENet_model, callback=func(EfficientNetB7)\nhistory = ENet_model.fit(\n    train_gen_ENet,\n    validation_data=valid_gen_ENet,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_ENet=plot(history,test_gen_ENet,train_gen_ENet, ENet_model)\n\nresult_ENet = result_test(test_gen_ENet,ENet_model)","a3838265":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nResNet_pre=preprocess_input\ntrain_gen_ResNet, valid_gen_ResNet, test_gen_ResNet = gen(ResNet_pre,train_df,test_df)\nResNet_model, callback=func(ResNet50)\nhistory = ResNet_model.fit(\n    train_gen_ResNet,\n    validation_data=valid_gen_ResNet,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_ResNet= plot(history,test_gen_ResNet,train_gen_ResNet, ResNet_model)\n\nresult_ResNet = result_test(test_gen_ResNet,ResNet_model)","33c37872":"from tensorflow.keras.applications import MobileNet\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nMobileNet_pre=preprocess_input\ntrain_gen_MobileNet, valid_gen_MobileNet, test_gen_MobileNet = gen(MobileNet_pre,train_df,test_df)\nMobileNet_model, callback=func(MobileNet)\nhistory = MobileNet_model.fit(\n    train_gen_MobileNet,\n    validation_data=valid_gen_MobileNet,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_MobileNet = plot(history,test_gen_MobileNet,train_gen_MobileNet, MobileNet_model)\n\nresult_MobileNet = result_test(test_gen_MobileNet,MobileNet_model)","de99da24":"from tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.applications.vgg19 import preprocess_input\nVGG19_pre=preprocess_input\ntrain_gen_VGG19, valid_gen_VGG19, test_gen_VGG19 = gen(VGG19_pre,train_df,test_df)\nVGG19_model, callback=func(VGG19)\nhistory = VGG19_model.fit(\n    train_gen_VGG19,\n    validation_data=valid_gen_VGG19,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_VGG19= plot(history,test_gen_VGG19,train_gen_VGG19, VGG19_model)\n\nresult_VGG19 = result_test(test_gen_VGG19,VGG19_model)","6ac31b65":"from tensorflow.keras.applications import Xception\nfrom tensorflow.keras.applications.xception import preprocess_input\nXception_pre=preprocess_input\ntrain_gen_Xception, valid_gen_Xception, test_gen_Xception = gen(Xception_pre,train_df,test_df)\nXception_model, callback=func(Xception)\nhistory = Xception_model.fit(\n    train_gen_Xception,\n    validation_data=valid_gen_Xception,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_Xception = plot(history,test_gen_Xception,train_gen_Xception, Xception_model)\nresult_Xception = result_tresult_Xception = result_test(test_gen_Xception,Xception_model)","936bcce6":"from tensorflow.keras.applications import InceptionResNetV2\nfrom tensorflow.keras.applications.inception_resnet_v2 import preprocess_input\nIRNV2_pre=preprocess_input\ntrain_gen_IRNV2, valid_gen_IRNV2, test_gen_IRNV2 = gen(IRNV2_pre,train_df,test_df)\nIRNV2_model, callback=func(InceptionResNetV2)\nhistory = IRNV2_model.fit(\n    train_gen_IRNV2,\n    validation_data=valid_gen_IRNV2,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory_IRNV2 =plot(history,test_gen_IRNV2,train_gen_IRNV2, IRNV2_model)\nresult_IRNV2 = result_tresult_IRNV2 = result_test(test_gen_IRNV2,IRNV2_model)","4a2a37c4":"from tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\nvgg_pre=preprocess_input\ntrain_gen_VGG, valid_gen_VGG, test_gen_VGG = gen(vgg_pre,train_df,test_df)\nmodel_VGG16, callback=func(VGG16)\nhistory = model_VGG16.fit(\n    train_gen_VGG,\n    validation_data=valid_gen_VGG,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory=plot(history,test_gen_VGG,train_gen_VGG, model_VGG16)\nresult_VGG16 = result_test(test_gen_VGG,model_VGG16)","5654d8eb":"from tensorflow.keras.applications import ResNet101\nfrom tensorflow.keras.applications.resnet import preprocess_input\n\nResNet101_pre=preprocess_input\ntrain_gen_ResNet101, valid_gen_ResNet101, test_gen_ResNet101 = gen(ResNet101_pre,train_df,test_df)\nmodel_ResNet101, callback=func(ResNet101)\nhistory = model_ResNet101.fit(\n    train_gen_ResNet101,\n    validation_data=valid_gen_ResNet101,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory=plot(history,test_gen_ResNet101,train_gen_ResNet101, model_ResNet101)\nresult_ResNet101 = result_test(test_gen_ResNet101,model_ResNet101)","c0fbdaae":"from tensorflow.keras.applications import DenseNet201\nfrom tensorflow.keras.applications.densenet import preprocess_input\n\nDenseNet201_pre=preprocess_input\ntrain_gen_DenseNet201, valid_gen_DenseNet201, test_gen_DenseNet201 = gen(DenseNet201_pre,train_df,test_df)\nmodel_DenseNet201, callback=func(DenseNet201)\nhistory = model_DenseNet201.fit(\n    train_gen_DenseNet201,\n    validation_data=valid_gen_DenseNet201,\n    epochs=100,\n    callbacks=callback,\n    verbose=0\n)\nhistory=plot(history,test_gen_DenseNet201,train_gen_DenseNet201, model_DenseNet201)\nresult_DenseNet201 = result_test(test_gen_DenseNet201,model_DenseNet201)","3a275684":"output = pd.DataFrame({'Model':['EfficientNetB7','ResNet50','MobileNet','VGG19','Xception','InceptionResNetV2',\n                               'VGG16','ResNet101','DenseNet201'],\n                      'Accuracy':[result_ENet[1], result_ResNet[1], result_MobileNet[1], result_VGG19[1],\n                                  result_Xception[1],result_IRNV2[1],result_VGG16[1],result_ResNet101[1],\n                                 result_DenseNet201[1]]})","62c7da64":"plt.figure(figsize=(12, 7))\nplots = sns.barplot(x='Model', y='Accuracy', data=output)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\n\nplt.xlabel(\"Models\", size=14)\nplt.ylabel(\"Accuracy\", size=14)\nplt.show()","84a92871":"# \u2714\ufe0f ResNet","355d7cb4":"# \u2714\ufe0f DenseNet201","e8009af7":"# \ud83d\udcda Training models","eac46ce2":"# \u2714\ufe0f InceptionResNetV2","3185d449":"# \ud83d\uddc3\ufe0f Load Dataset","6e88d15b":"# \u2714\ufe0f EfficientNetB7","2db663e2":"# \u2714\ufe0f ResNet101","0c0d7cbd":"# \ud83d\udcca Final Report","0d1a2912":"# \ud83d\udce5 Importing Libraries","5d401ab5":"# \ud83e\uddbe Functions","bf0ff233":"# \u2714\ufe0f MobileNet","90b3003b":"# \u2702\ufe0f Train & Test Split","5761ff1c":"# \ud83d\udd25 EDA & Visualization","a804989d":"# \u2714\ufe0f VGG16","3c90b69c":"# \u2714\ufe0f Xception","dee49307":"# \u2714\ufe0f VGG19"}}