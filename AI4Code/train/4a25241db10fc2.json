{"cell_type":{"e7906b57":"code","1180ee2d":"code","7a4e6fd7":"code","a3337f37":"code","9d04eb49":"code","ae217e10":"code","2e132027":"code","eb39f28c":"code","24f1998b":"code","b3daeed9":"code","b41ed434":"code","b053e105":"code","02b5df48":"code","43e5a9a9":"code","da4e906f":"code","353a8068":"code","83b39876":"code","7990d123":"code","52202566":"code","8524a472":"code","b09bbae8":"code","aaf72354":"code","9d376ee9":"code","93c9cefb":"code","5aa1f787":"code","733fd8e7":"code","8365dbb9":"code","ffcf2296":"code","a1675a96":"code","b8ccc3f1":"code","84f2de3e":"code","757c5c73":"code","c20748e8":"code","36c5eeef":"code","c9f0eecd":"code","2f0a8aa9":"code","1fe58ecc":"code","30a06e03":"code","08aa0f77":"code","76389da3":"markdown","66ff5da1":"markdown","46e2e3ec":"markdown","c07881bd":"markdown","61b09b35":"markdown","753415b2":"markdown","26f665db":"markdown","6f55dacd":"markdown","a5346c2a":"markdown","c47bde95":"markdown","10b57d4d":"markdown","98965f4e":"markdown","89cbc212":"markdown","8a7f4e7f":"markdown","63a977d8":"markdown","0d72dc4a":"markdown","ddc6ce78":"markdown","3cbadcb4":"markdown","949d34c8":"markdown","90179156":"markdown","7e82ff76":"markdown","7ca76f5b":"markdown","7d2d819a":"markdown","3181798f":"markdown","3f28cc82":"markdown","306d8f5c":"markdown","3b10c6ad":"markdown","cad28bcc":"markdown","ffc7a419":"markdown"},"source":{"e7906b57":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1180ee2d":"#Path for the dataset\n\npath1 = '..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv'","7a4e6fd7":"#Read the csv \n\ndatos = pd.read_csv(path1)","a3337f37":"#List of countrys\n\nlen(datos['country'].unique())","9d04eb49":"#See 10th rows (sample)\n\ndatos.sample(20)","ae217e10":"#Shape of the DataFrame\n\ndatos.shape","2e132027":"#List of columns\n\nlist(datos.columns)","eb39f28c":"#Unique values per column\n\ndatos.nunique()","24f1998b":"#Count the number of null per Country iso_code\n\ndatos[datos['iso_code'].isnull()]['country'].value_counts()","b3daeed9":"#First complete the iso_code for Northern Cyprus\n\nindices_northern_cyprus = list(datos[datos['country'] == 'Northern Cyprus'].index) #indices of rows for Northern Cyprus\n \nfor indice in indices_northern_cyprus:\n    datos.at[indice,'iso_code'] = 'CYP'","b41ed434":"datos['iso_code'] = datos['iso_code'].fillna('GBR')","b053e105":"#Again count the number of null per Country iso_code. The result is 0\n\ndatos[datos['iso_code'].isnull()]['country'].value_counts()","02b5df48":"datos.isnull().sum()","43e5a9a9":"#First five countrys con most vacinations\n\ntotal_vaccinations_contry = datos.groupby(\"country\").max().sort_values(by=\"total_vaccinations\",ascending=False)['total_vaccinations']\ntotal_vaccinations_contry.head()","da4e906f":"#Countrys with most vacinations\n\nfig,ax = plt.subplots(figsize=(16,10))\nax = sns.barplot(x = (total_vaccinations_contry.head(20).values)\/1e6, y = total_vaccinations_contry.head(20).index, color='coral')\nax.set_title(\"Absolute number of total immunizations in the country - 20th\", fontsize=20)\nax.set_xlabel(\"Total vaccinations [M]\", fontsize=16)\nax.set_ylabel(\"Country\", fontsize=16)\n\nplt.show()","353a8068":"total_vaccinations_argentina = datos[datos['country']=='Argentina'][['date','total_vaccinations']]\ntotal_vaccinations_argentina = total_vaccinations_argentina.dropna()","83b39876":"#Countrys with most vacinations\n\nx = total_vaccinations_argentina['date']\ny = total_vaccinations_argentina['total_vaccinations']\n\nfig,ax = plt.subplots(figsize=(16,10))\nax.plot(x, y\/1000, marker='o',ls='--',color='r')\nax.set_title(\"Absolute number of total immunizations in Argentina\", fontsize=20)\nax.set_ylabel(\"Total vaccinations [K]\", fontsize=16)\nax.set_xlabel(\"Day\", fontsize=16)\n\n\nax.set_xticks(x)\nax.set_xticklabels(x,fontsize=8,rotation = 70)\n\nplt.show()","7990d123":"#First five countrys\n\npeople_vaccinated_contry = datos.groupby(\"country\").max().sort_values(by=\"people_vaccinated\",ascending=False)[['people_vaccinated','people_fully_vaccinated']]\npeople_vaccinated_contry.head()","52202566":"labels = total_vaccinations_contry.head(20).index\npeople_vaccinated = people_vaccinated_contry['people_vaccinated'].head(20)\npeople_fully_vaccinated = people_vaccinated_contry['people_fully_vaccinated'].head(20)\n\nx = np.arange(len(labels)) \n\n\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots(figsize=(20,12))\n\nax.bar(labels, people_vaccinated\/1e6 , width, label='People Vaccinated')\nax.bar(labels, people_fully_vaccinated\/1e6, width,label='People Fully Vaccinated')\n\nax.set_ylabel('Total [M]',fontsize=18)\nax.set_xlabel('Country',fontsize=18)\nax.set_title(\"People vaccinates and fully vaccinated - 20th\",fontsize=22)\nax.set_xticks(x)\nax.set_xticklabels(labels,fontsize=14,rotation = 70)\n\nax.legend()\n\nplt.show()","8524a472":"people_vaccinated_argentina = datos[datos['country']=='Argentina'][['date','people_vaccinated','people_fully_vaccinated']]\npeople_vaccinated_argentina = people_vaccinated_argentina.dropna()","b09bbae8":"#Countrys with most vacinations\n\nx = people_vaccinated_argentina['date']\ny = people_vaccinated_argentina['people_vaccinated']\nz = people_vaccinated_argentina['people_fully_vaccinated']\n\nfig,ax = plt.subplots(figsize=(16,10))\nax.plot(x, y\/1000, marker='o',ls='--',color='r',label='People Vaccinated')\nax.plot(x, z\/1000, marker='o',ls='--',color='b',label='People Fully Vaccinated')\nax.set_title('People vaccinates and fully vaccinated - Argentina', fontsize=20)\nax.set_ylabel(\"Total vaccinations [K]\", fontsize=16)\nax.set_xlabel(\"Day\", fontsize=16)\n\n\nax.set_xticks(x)\nax.set_xticklabels(x,fontsize=8,rotation = 70)\n\nax.legend()\n\nplt.show()","aaf72354":"#First five countrys\n\nvaccinated_per_hundred = datos.groupby(\"country\").max().sort_values(by=\"total_vaccinations_per_hundred\",ascending=False)[['total_vaccinations_per_hundred','people_vaccinated_per_hundred','people_fully_vaccinated_per_hundred']]\nvaccinated_per_hundred.head()","9d376ee9":"labels = vaccinated_per_hundred.head(20).index\ntotal_vaccinations_per_hundred = vaccinated_per_hundred['total_vaccinations_per_hundred'].head(20)\npeople_vaccinated_per_hundred = vaccinated_per_hundred['people_vaccinated_per_hundred'].head(20)\npeople_fully_vaccinated_per_hundred = vaccinated_per_hundred['people_fully_vaccinated_per_hundred'].head(20)\n\nx = np.arange(len(labels)) \n\n\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots(figsize=(20,12))\n\nax.bar(labels, total_vaccinations_per_hundred , width, label='Total vaccinations per hundred')\nax.bar(labels, people_vaccinated_per_hundred, width,label='People vaccinated per hundred')\nax.bar(labels, people_fully_vaccinated_per_hundred, width,label='People fully vaccinated per hundred')\n\nax.set_ylabel('n \/ hundread',fontsize=18)\nax.set_xlabel('Country',fontsize=18)\nax.set_title(\"Vaccinations per hundred per country - 20th\",fontsize=22)\nax.set_xticks(x)\nax.set_xticklabels(labels,fontsize=14,rotation = 70)\n\nax.legend()\n\nplt.show()","93c9cefb":"vaccinated_per_hundread_argentina = datos[datos['country']=='Argentina'][['date','total_vaccinations_per_hundred','people_vaccinated_per_hundred','people_fully_vaccinated_per_hundred']]\nvaccinated_per_hundread_argentina = vaccinated_per_hundread_argentina.dropna()\nvaccinated_per_hundread_argentina","5aa1f787":"#Vacinations per hundread\n\na = vaccinated_per_hundread_argentina['date']\nb = vaccinated_per_hundread_argentina['total_vaccinations_per_hundred']\nc = vaccinated_per_hundread_argentina['people_vaccinated_per_hundred']\nd = vaccinated_per_hundread_argentina['people_fully_vaccinated_per_hundred']\n\nfig,ax = plt.subplots(figsize=(16,10))\nax.plot(a, b, marker='o',ls='--',color='r',label='Total vaccinations per hundred')\nax.plot(a, c, marker='o',ls='--',color='b',label='People vaccinated per hundred')\nax.plot(a, d, marker='o',ls='--',color='g',label='People fully vaccinated per hundred')\n\n\nax.set_title('Vaccinations per hundred - Argentina', fontsize=20)\nax.set_ylabel(\"n \/ hundread\", fontsize=16)\nax.set_xlabel(\"Day\", fontsize=16)\n\n\nax.set_xticks(a)\nax.set_xticklabels(a,fontsize=8,rotation = 70)\n\nax.legend()\n\nplt.show()","733fd8e7":"#First five countrys con most vacinations\n\ndaily_vaccinations_per_million = datos.groupby(\"country\").max().sort_values(by=\"daily_vaccinations_per_million\",ascending=False)['daily_vaccinations_per_million']\ndaily_vaccinations_per_million.head()","8365dbb9":"#Countrys with most vacinations\n\nfig,ax = plt.subplots(figsize=(16,10))\nax = sns.barplot(x = (daily_vaccinations_per_million.head(20).values), y = daily_vaccinations_per_million.head(20).index, color='coral')\nax.set_title(\"Daily vaccinations per million - 20th\", fontsize=20)\nax.set_xlabel('Ratio', fontsize=16)\nax.set_ylabel(\"Country\", fontsize=16)\n\nplt.show()","ffcf2296":"daily_vaccinations_per_million_argentina = datos[datos['country']=='Argentina'][['date','daily_vaccinations_per_million']]\ndaily_vaccinations_per_million_argentina = daily_vaccinations_per_million_argentina\ndaily_vaccinations_per_million_argentina.head()","a1675a96":"#Countrys with most vacinations\n\nx = daily_vaccinations_per_million_argentina['date']\ny = daily_vaccinations_per_million_argentina['daily_vaccinations_per_million']\n\nfig,ax = plt.subplots(figsize=(16,10))\nax.plot(x, y, marker='o',ls='--',color='r')\nax.set_title(\"Daily vaccinations per million in Argentina\", fontsize=20)\nax.set_ylabel(\"Ratio\", fontsize=16)\nax.set_xlabel(\"Day\", fontsize=16)\n\n\nax.set_xticks(x)\nax.set_xticklabels(x,fontsize=8,rotation = 70)\n\nplt.show()","b8ccc3f1":"#Vaccines in every country\n\nvaccines = datos.groupby(\"country\").max().sort_values(by=\"vaccines\",ascending=False)['vaccines']\nvaccines","84f2de3e":"#Split the text of each row and count the amount per row\n\ncount_vaccines = vaccines.str.split(',').map(lambda x: len(x))\ncount_vaccines.sort_values(ascending=False).head(10)","757c5c73":"#Revome white space in text\n\ndef remove_white_space(texto):\n    import re\n    pattern = r'^\\s*|\\s\\s*'\n    return re.sub(pattern, ' ', texto).strip()","c20748e8":"#In a dataframe I create a column for each vaccine in each row. Since the country that has the most different vaccines is 5, therefore I have 5 columns\ndf_vaccines = pd.DataFrame(list(vaccines.str.split(',')))\n\n#Going through each column I get a list of vaccines, which have repeated values because they have blank spaces in the text\nvaccine_list = []\nfor i in df_vaccines.columns:\n    candidate = df_vaccines[i].unique()\n    for j in candidate:\n        if j == None:\n            pass\n        else:\n            if j not in vaccine_list:\n                vaccine_list.append(j)\n\n#I remove the blank spaces from the texts that have it and I get a final list of vaccines             \nvaccine_list_final = []                \nfor k in vaccine_list:\n    k_new = remove_white_space(k)\n    if k_new not in vaccine_list_final:\n        vaccine_list_final.append(k_new)\n        \nvaccine_list_final","36c5eeef":"df_full_vaccines = pd.DataFrame(np.nan, index=vaccines.index, columns=vaccine_list_final)\ndf_full_vaccines","c9f0eecd":"df_vaccines_parcial = df_vaccines.set_index(vaccines.index)\ndf_vaccines_parcial","2f0a8aa9":"pd_list = []\nfor i in range(len(df_vaccines_parcial.columns)):\n    pd_list.append(df_vaccines_parcial[i])\n    \nnew_df = pd.concat(pd_list)","1fe58ecc":"for i in vaccine_list_final:\n    df_full_vaccines[i] = new_df[new_df==i]\n\ndf_full_vaccines","30a06e03":"vaccines_country = df_full_vaccines.count().sort_values(ascending=False)\nvaccines_country","08aa0f77":"#Countrys with most vacinations\n\nfig,ax = plt.subplots(figsize=(16,10))\nax = sns.barplot(x = vaccines_country.values, y = vaccines_country.index, color='lightblue')\nax.set_title(\"How many countries use a certain vaccine\", fontsize=20)\nax.set_xlabel(\"n\", fontsize=16)\nax.set_ylabel(\"Vaccine\", fontsize=16)\n\nplt.show()","76389da3":"There is a difference between the number of countrys (80) and iso_code (75)","66ff5da1":"I create a dataframe with all the NaN elements. I will use it to complete later","46e2e3ec":"Taking the previous dataframe I am going to concatenate all the columns into one","c07881bd":"### 4.4 How many countries use a certain vaccine","61b09b35":"### 4.1 Number of vaccines per country","753415b2":"### 3.1 Total vaccinations per contry\n\n\nWe analyze the column 'total_vaccinations': This is the absolute number of total immunizations in the country","26f665db":"# COVID-19 World Vaccination Progress\n\n\n**Updated to 25\/04\/2020**","6f55dacd":"### 3.7 Daily vaccinations per million\n\n\nWe analyze the column 'daily_vaccinations_per_million': Ratio (in ppm) between vaccination number and total population for the current date in the country","a5346c2a":"### 4.3 Full dataset of vaccines\n\n\nI am going to create a dataset that has the vaccine it has for each country. Each vaccine will be located in a specific column","c47bde95":"The rest of the NaN correspond to iso_code 'GBR'. We can fix this  with simple imputation","10b57d4d":"### 3.7 Daily vaccinations per million in Argentina - Evolution","98965f4e":"## 1. Moduls to Use","89cbc212":"### 3.6 Peope vaccinated and people fully vaccinated in Argentina - Evolution","8a7f4e7f":"Previously create a dataframe where in each column the vaccine that each country has is placed, but the vaccines per column are not unique.","63a977d8":"### 3.2 Total vaccinations in Argentina - Evolution","0d72dc4a":"More records than countrys are observed in total. This means that some countries have more than one record row","ddc6ce78":"### 4.2 List of vaccines\n\nBecause the names of the vaccines in each record are all in the same column for an specific row I need to perform cleaning operations to obtain the list of available vaccines","3cbadcb4":"As can be seen, 8 types of vaccines are available","949d34c8":"### 3.5 Vaccinations per hundred per country\n\n\nWe analyze the columns: \n\n    Total vaccinations per hundred - ratio (in percent) between vaccination number and total population up to the date in the country;\n    \n    Total number of people vaccinated per hundred - ratio (in percent) between population immunized and total population up to the date in the country;\n    \n    Total number of people fully vaccinated per hundred - ratio (in percent) between population fully immunized and total population up to the date in the country;","90179156":"Fixed the NaN in iso_code I observe the NaN in the rest of the columns","7e82ff76":"From the previous dataframe (concatenated) I am filtering by type of vaccine and placing in the corresponding column. I get a dataframe with 1 vaccine per column","7ca76f5b":"## 3. General Analysis","7d2d819a":"## 4. Vaccines\n\nWe analyze the column 'vaccines': total number of vaccines used in the country (up to date);","3181798f":"As can be seen, the names of the vaccines in each record are separated by a comma and they are all in the same column.","3f28cc82":"### 3.4 Peope vaccinated and people fully vaccinated in Argentina - Evolution","306d8f5c":"There is 80 diferents countrys","3b10c6ad":"## 2. Import Datasets","cad28bcc":"Not having the iso_code is a problem if I want to join with the geopandas base, therefore I am going to fill in the NaNs in this column","ffc7a419":"### 3.3 Peope vaccinated and people fully vaccinated per contry\n\n\nWe analyze the columns: \n\n    Total number of vaccinations - this is the absolute number of total immunizations in the country\n    \n   \n    Total number of people vaccinated - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;"}}