{"cell_type":{"00d1fdc0":"code","fd8faf21":"code","8a2e7b6f":"code","4036269a":"code","015ee8b8":"code","00931712":"code","d85a841d":"code","00a71e4b":"code","47be8f04":"code","b2f83827":"code","2bb63f19":"code","48060d5d":"code","c7d0e4bd":"code","50130ac6":"code","b9fa6623":"code","a45c1e2a":"code","b6eca987":"code","fad9e63a":"code","45640263":"code","72064777":"code","13871fd9":"code","968b0ad6":"code","68a97b1b":"code","4acb8ad3":"code","8e1ded69":"code","a4a0428a":"code","ef5d297b":"code","646db2ed":"code","9234f17b":"code","bba7c6c2":"code","bb401a59":"code","3d6aac0a":"code","9e698a3e":"code","e347bfe1":"code","4365f88f":"code","87cbe273":"code","a6ec01ed":"code","f4b2c1f4":"code","3e995bf9":"code","3f7ab336":"code","349d1127":"code","6763f615":"code","dd63d2f1":"code","9cd8c28f":"code","0836bd28":"code","a567529c":"code","2eb11b71":"code","1e093d25":"code","fb5e0cb7":"code","ecdc9b00":"code","80ee5630":"code","284d0d7c":"code","e82998bd":"code","499473f2":"code","0f9f18fd":"code","4d0c2b42":"code","f28f19cb":"code","1a2fee4d":"code","6b42b28f":"code","cd1bbbb4":"code","25779f58":"code","520ab4f5":"code","822e6a7a":"code","86aa69ba":"code","26a2f969":"code","447c76d7":"code","62b30133":"code","fed91e4a":"code","07a93812":"code","46154dab":"code","0d2b35de":"code","b173853b":"code","4b9e66ab":"code","d4bf8e50":"code","e43cec3f":"code","4c97bea9":"code","f54b7434":"code","65065969":"code","d3f6405c":"code","f24993d1":"code","89033346":"code","dcec8457":"code","d27a861e":"code","3b3f20b6":"code","09917319":"code","eabc834f":"code","4d7de515":"code","d688d202":"code","373d312c":"code","c372be3c":"code","d9f60e82":"code","2c3db1a8":"code","7a5c97b7":"code","754afd42":"code","fe46d3e5":"code","e1ba99fa":"code","1c94f615":"code","2f7d8c00":"code","d0ecc5a0":"code","9f2b8b22":"code","3da9d590":"code","a2a97872":"code","4f7368b7":"code","17959e5e":"code","2e1cf060":"code","a52a4301":"code","f2e1dc88":"code","82cc2a62":"code","25b4fc8b":"code","5782fbd4":"code","f2a31619":"markdown","627dd133":"markdown","0ba62536":"markdown","2c42fcbd":"markdown","afeb10e4":"markdown","f4dbbb14":"markdown","8d1e0e3d":"markdown","cfc896ca":"markdown","c4405ccb":"markdown","4744deae":"markdown","be6ce916":"markdown","40d15b0b":"markdown","d69b31c8":"markdown","dbf5c15b":"markdown","67853d1f":"markdown","cfa3c4cd":"markdown","e3fd13b3":"markdown","7896df62":"markdown","3f8d940b":"markdown","09c471fa":"markdown","f3dddf94":"markdown","4a702512":"markdown","d62d83ce":"markdown","49f0d1b7":"markdown","58ff4418":"markdown","cf5be28a":"markdown","492d9eef":"markdown","70e038fa":"markdown","02b95912":"markdown","8bd61a5c":"markdown","f9126f23":"markdown","1e1862a4":"markdown","ddcdae3f":"markdown","de54bf72":"markdown","57814a9f":"markdown","e1e35447":"markdown","7251ce75":"markdown","e457ea65":"markdown","ba9ce5dc":"markdown","e3f63625":"markdown","66c857fd":"markdown","242aa6ab":"markdown","40780707":"markdown","f04addc6":"markdown","1a1e3eb7":"markdown","2be1e164":"markdown","d1cd6b22":"markdown","60dee337":"markdown"},"source":{"00d1fdc0":"#Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","fd8faf21":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Defining Data file\npData = pd.read_csv(\"\/kaggle\/input\/parkinsons-data-set\/parkinsons.data\")","8a2e7b6f":"pData.head()","4036269a":"pData.shape","015ee8b8":"pData.columns","00931712":"pData.info()","d85a841d":"# Dropping name, not required for analysis(nominal variables)\npData= pData.drop(['name'], axis=1)","00a71e4b":"pData.head()","47be8f04":"pData.skew()","b2f83827":"pData.describe().T","2bb63f19":"#Distribution of target column\n\npData['status'] = pData['status'].astype('float') \n\npData['status'].value_counts()","48060d5d":"#Distribution of MDVP:Fo(Hz) - Average vocal fundamental frequency, MDVP:Fhi(Hz) - Maximum vocal fundamental frequency, MDVP:Flo(Hz) - Minimum vocal fundamental frequency\nfig, axes = plt.subplots(1, 3, figsize=(16, 4))\nsns.distplot(pData['MDVP:Fo(Hz)'],ax=axes[0])\nsns.distplot(pData['MDVP:Fhi(Hz)'],ax=axes[1])\nsns.distplot(pData['MDVP:Flo(Hz)'],ax=axes[2])","c7d0e4bd":"sns.distplot( pData[pData.status == 0]['MDVP:Fo(Hz)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Fo(Hz)'], color = 'g')","50130ac6":"plt.figure(figsize=(8,5))\nsns.boxplot(x='status',y='MDVP:Fo(Hz)',data=pData)","b9fa6623":"sns.distplot( pData[pData.status == 0]['MDVP:Fhi(Hz)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Fhi(Hz)'], color = 'g')","a45c1e2a":"plt.figure(figsize=(8,5))\nsns.boxplot(x='status',y='MDVP:Fhi(Hz)',data=pData)","b6eca987":"sns.distplot( pData[pData.status == 0]['MDVP:Flo(Hz)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Flo(Hz)'], color = 'g')","fad9e63a":"plt.figure(figsize=(8,5))\nsns.boxplot(x='status',y='MDVP:Flo(Hz)',data=pData)","45640263":"#Analysis of measures of variation in fundamental frequency\nfig, axes = plt.subplots(2, 3, figsize=(16, 8))\nsns.distplot(pData['MDVP:Jitter(%)'],bins=30,ax=axes[0,0])\nsns.distplot(pData['MDVP:Jitter(Abs)'],bins=30,ax=axes[0,1])\nsns.distplot(pData['MDVP:RAP'],bins=30,ax=axes[0,2])\n\nsns.distplot(pData['MDVP:PPQ'],bins=30,ax=axes[1,0])\nsns.distplot(pData['Jitter:DDP'],bins=30,ax=axes[1,1])\n","72064777":"sns.distplot( pData[pData.status == 0]['MDVP:Jitter(%)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Jitter(%)'], color = 'g')","13871fd9":"plt.figure(figsize=(8,5))\nsns.boxplot(x='status',y='MDVP:Jitter(%)',data=pData)","968b0ad6":"sns.distplot( pData[pData.status == 0]['MDVP:Jitter(Abs)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Jitter(Abs)'], color = 'g')","68a97b1b":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:Jitter(Abs)',data=pData)","4acb8ad3":"sns.distplot( pData[pData.status == 0]['MDVP:RAP'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:RAP'], color = 'g')","8e1ded69":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:RAP',data=pData)","a4a0428a":"sns.distplot( pData[pData.status == 0]['MDVP:PPQ'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:PPQ'], color = 'g')","ef5d297b":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:PPQ',data=pData)","646db2ed":"sns.distplot( pData[pData.status == 0]['Jitter:DDP'], color = 'r')\nsns.distplot( pData[pData.status == 1]['Jitter:DDP'], color = 'g')","9234f17b":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='Jitter:DDP',data=pData)","bba7c6c2":"#Analysis of  variation in amplitude\nfig, axes = plt.subplots(2, 3, figsize=(16, 8))\nsns.distplot(pData['MDVP:Shimmer'],ax=axes[0,0])\nsns.distplot(pData['MDVP:Shimmer(dB)'],ax=axes[0,1])\nsns.distplot(pData['Shimmer:APQ3'],ax=axes[0,2])\n\nsns.distplot(pData['Shimmer:APQ5'],ax=axes[1,0])\nsns.distplot(pData['MDVP:APQ'],ax=axes[1,1])\nsns.distplot(pData['Shimmer:DDA'],ax=axes[1,2])","bb401a59":"sns.distplot( pData[pData.status == 0]['MDVP:Shimmer'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Shimmer'], color = 'g')","3d6aac0a":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:Shimmer',data=pData)","9e698a3e":"sns.distplot( pData[pData.status == 0]['MDVP:Shimmer(dB)'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:Shimmer(dB)'], color = 'g')","e347bfe1":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:Shimmer(dB)',data=pData)","4365f88f":"sns.distplot( pData[pData.status == 0]['Shimmer:APQ3'], color = 'r')\nsns.distplot( pData[pData.status == 1]['Shimmer:APQ3'], color = 'g')","87cbe273":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='Shimmer:APQ3',data=pData)","a6ec01ed":"sns.distplot( pData[pData.status == 0]['Shimmer:APQ5'], color = 'r')\nsns.distplot( pData[pData.status == 1]['Shimmer:APQ5'], color = 'g')","f4b2c1f4":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='Shimmer:APQ5',data=pData)","3e995bf9":"sns.distplot( pData[pData.status == 0]['MDVP:APQ'], color = 'r')\nsns.distplot( pData[pData.status == 1]['MDVP:APQ'], color = 'g')","3f7ab336":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='MDVP:APQ',data=pData)","349d1127":"sns.distplot( pData[pData.status == 0]['Shimmer:DDA'], color = 'r')\nsns.distplot( pData[pData.status == 1]['Shimmer:DDA'], color = 'g')","6763f615":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='Shimmer:DDA',data=pData)","dd63d2f1":"#analysis for measures of ratio of noise to tonal components in the voice\nfig, axes = plt.subplots(1, 2, figsize=(20, 8))\nsns.distplot(pData['NHR'],ax=axes[0])\nsns.distplot(pData['HNR'],ax=axes[1])\n","9cd8c28f":"sns.distplot( pData[pData.status == 0]['NHR'], color = 'r')\nsns.distplot( pData[pData.status == 1]['NHR'], color = 'g')","0836bd28":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='NHR',data=pData)","a567529c":"sns.distplot( pData[pData.status == 0]['HNR'], color = 'r')\nsns.distplot( pData[pData.status == 1]['HNR'], color = 'g')","2eb11b71":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='HNR',data=pData)","1e093d25":"#analysis for wo nonlinear dynamical complexity measures\nfig, axes = plt.subplots(1, 2, figsize=(20,8))\nsns.distplot(pData['RPDE'],ax=axes[0])\nsns.distplot(pData['D2'],ax=axes[1])","fb5e0cb7":"sns.distplot( pData[pData.status == 0]['RPDE'], color = 'r')\nsns.distplot( pData[pData.status == 1]['RPDE'], color = 'g')","ecdc9b00":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='RPDE',data=pData)","80ee5630":"sns.distplot( pData[pData.status == 0]['D2'], color = 'r')\nsns.distplot( pData[pData.status == 1]['D2'], color = 'g')","284d0d7c":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='D2',data=pData)","e82998bd":"#Analysis of nonlinear measures of fundamental frequency variation \nfig, axes = plt.subplots(1, 3, figsize=(16, 4))\nsns.distplot(pData['spread1'],ax=axes[0])\nsns.distplot(pData['spread2'],ax=axes[1])\nsns.distplot(pData['PPE'],ax=axes[2])","499473f2":"sns.distplot( pData[pData.status == 0]['spread1'], color = 'r')\nsns.distplot( pData[pData.status == 1]['spread1'], color = 'g')","0f9f18fd":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='spread1',data=pData)","4d0c2b42":"sns.distplot( pData[pData.status == 0]['spread2'], color = 'r')\nsns.distplot( pData[pData.status == 1]['spread2'], color = 'g')","f28f19cb":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='spread2',data=pData)","1a2fee4d":"sns.distplot( pData[pData.status == 0]['PPE'], color = 'r')\nsns.distplot( pData[pData.status == 1]['PPE'], color = 'g')","6b42b28f":"plt.figure(figsize=(4,5))\nsns.boxplot(x='status',y='PPE',data=pData)","cd1bbbb4":"#Exploring the correlation\npData.corr()","25779f58":"corr = pData.corr()\nfig, ax = plt.subplots(figsize = [23,10])\nsns.heatmap(corr, annot = True, vmin = -1, vmax = 1, center = 0, cmap=\"coolwarm\")","520ab4f5":"#Filtering highly related columns\ncorr_pos = corr.abs()\nmask = (corr_pos < 0.8 ) \nfig, ax = plt.subplots(figsize = [23,10])\nsns.heatmap(corr, annot = True, vmin = -1, vmax = 1, center = 0, mask = mask, cmap=\"coolwarm\")","822e6a7a":"from scipy import stats\nz=np.abs(stats.zscore(pData))\nprint(z)","86aa69ba":"print(np.where(z > 3))","26a2f969":"z_pData =pData[(z < 3).all(axis=1)]\npData.shape,z_pData.shape","447c76d7":"corr = z_pData.corr()\n#Filtering highly related columns\ncorr_pos = corr.abs()\nmask = (corr_pos < 0.8 ) \nfig, ax = plt.subplots(figsize = [23,10])\nsns.heatmap(corr, annot = True, vmin = -1, vmax = 1, center = 0, mask = mask, cmap=\"coolwarm\")","62b30133":"X = pData.drop(['status'], axis = 1)\ny = pData['status']","fed91e4a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=8)","07a93812":"#Scaling\nfrom sklearn.preprocessing import StandardScaler\n\nscaler=StandardScaler().fit(X_train)\nscaler_x_train=scaler.transform(X_train)\n\nscaler=StandardScaler().fit(X_test)\nscaler_x_test=scaler.transform(X_test)","46154dab":"#For model metrics' calculation\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\n\ndef clf_scores(clf,y_predicted):\n    #Accuracy\n    acc_train = clf.score(X_train, y_train)*100\n    acc_test = clf.score(X_test, y_test)*100\n    \n    roc = roc_auc_score(y_test, y_predicted)*100\n    tn, fp, fn, tp = confusion_matrix(y_test, y_predicted).ravel()\n    cm = confusion_matrix(y_test, y_predicted)\n    correct = tp + tn\n    incorrect = fp + fn\n        \n    return acc_train, acc_test, roc, correct, incorrect, cm\n\ndef clf_table(clf,y_predicted):\n    cr=classification_report(y_test,y_predicted, digits=2)\n    return cr\n","0d2b35de":"#For capturing model's performance metrics\nperformance = pd.DataFrame(columns = ['Model', 'Accuracy', 'Recall', 'Precision', 'F1 Score', 'AUC'])\n","b173853b":"#Logistic regression\n\nfrom sklearn.linear_model import LogisticRegression\nclf_lr = LogisticRegression()\nclf_lr.fit(X_train, y_train)\n\nY_pred_lr = clf_lr.predict(X_test)\nprint(clf_scores(clf_lr, Y_pred_lr))","4b9e66ab":"from sklearn import preprocessing\nfrom sklearn.metrics import average_precision_score, confusion_matrix, accuracy_score, classification_report,f1_score\n\ncr1= clf_table(clf_lr, Y_pred_lr)\nprint(cr1)","d4bf8e50":"from sklearn import metrics\n#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, Y_pred_lr)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","e43cec3f":"performance = performance.append({'Model':'Linear Regression','Accuracy':'86','Recall':'94','Precision':'90','F1 Score':'92','AUC':'75.98'},ignore_index = True)","4c97bea9":"#KNN\n\nfrom sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors = 3)\nclf_knn.fit(X_train, y_train)\n\nY_pred_knn = clf_knn.predict(X_test)\nprint(clf_scores(clf_knn, Y_pred_knn))","f54b7434":"cr2 =clf_table(y_test,Y_pred_knn)\nprint(cr2)","65065969":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, Y_pred_knn)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","d3f6405c":"performance = performance.append({'Model':'KNN','Accuracy':'85','Recall':'91','Precision':'90','F1 Score':'91','AUC':'74.91'},ignore_index = True)","f24993d1":"#Naive Bayes\n\nfrom sklearn.naive_bayes import GaussianNB\nclf_gnb = GaussianNB()\nclf_gnb.fit(X_train, y_train)\n\nY_pred_gnb = clf_gnb.predict(X_test)\nprint(clf_scores(clf_gnb, Y_pred_gnb))","89033346":"cr3=clf_table(y_test,Y_pred_gnb)\nprint(cr3)","dcec8457":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, Y_pred_gnb)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","d27a861e":"performance = performance.append({'Model':'Naive Bayes','Accuracy':'71','Recall':'68','Precision':'94','F1 Score':'79','AUC':'75.71'},ignore_index = True)","3b3f20b6":"#SVM\n\nfrom sklearn.svm import SVC\nclf_svc = SVC(gamma=0.05, C=3,random_state=0)\nclf_svc.fit(X_train, y_train)\n\nY_pred_svc = clf_svc.predict(X_test)\nprint(clf_scores(clf_svc, Y_pred_svc))","09917319":"cr4 =clf_table(y_test,Y_pred_svc)\nprint(cr4)","eabc834f":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test,Y_pred_svc)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","4d7de515":"performance = performance.append({'Model':'SVM','Accuracy':'85','Recall':'100','Precision':'84','F1 Score':'91','AUC':'62.5'},ignore_index = True)","d688d202":"print(performance)","373d312c":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import StackingClassifier\n\n# defining level hetrogenious model\nlevel0 = list()\nlevel0.append(('lr', LogisticRegression()))\nlevel0.append(('knn', KNeighborsClassifier(n_neighbors = 29, weights = 'uniform', metric='euclidean')))\nlevel0.append(('cart', DecisionTreeClassifier()))\nlevel0.append(('svm', SVC(gamma=0.05, C=3)))\nlevel0.append(('bayes', GaussianNB()))\n\n# define meta learner model\nlevel1 = SVC(gamma=0.05, C=3)\n\n# define the stacking ensemble with cross validation of 10\nStack_model = StackingClassifier(estimators=level0, final_estimator=level1, cv=10)\n","c372be3c":"# predict the response\nStack_model.fit(scaler_x_train, y_train)\nprediction_Stack = Stack_model.predict(scaler_x_test)","d9f60e82":"print(clf_scores(Stack_model, prediction_Stack))","2c3db1a8":"cr5 = clf_table(Stack_model, prediction_Stack)\nprint(cr5)","7a5c97b7":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, prediction_Stack)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","754afd42":"performance = performance.append({'Model':'Stacking:SVM','Accuracy':'93','Recall':'98','Precision':'94','F1 Score':'96','AUC':'86.44'},ignore_index = True)","fe46d3e5":"#Stacking using Logistic reg. \n# define meta learner model\nlevel1 = LogisticRegression()\n\n# define the stacking ensemble with cross validation of 10\nStack_model = StackingClassifier(estimators=level0, final_estimator=level1, cv=10)","e1ba99fa":"# predict the response\nStack_model.fit(scaler_x_train, y_train)\nprediction_Stack = Stack_model.predict(scaler_x_test)","1c94f615":"print(clf_scores(Stack_model, prediction_Stack))","2f7d8c00":"cr6 = clf_table(Stack_model, prediction_Stack)\nprint(cr6)","d0ecc5a0":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, prediction_Stack)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack)) ","9f2b8b22":"performance = performance.append({'Model':'Stacking:LG','Accuracy':'92','Recall':'98','Precision':'92','F1 Score':'95','AUC':'82.27'},ignore_index = True)","3da9d590":"from sklearn.ensemble import RandomForestClassifier\n\nrfcl = RandomForestClassifier(n_estimators = 50)\nrfcl = rfcl.fit(X_train, y_train)\ny_pred_rf = rfcl.predict(X_test)\nprint(clf_scores(rfcl, y_pred_rf))","a2a97872":"cr7 = clf_table(rfcl, y_pred_rf)\nprint(cr7)","4f7368b7":"#determining ROC-AUC using fpr, tpr, threshold\nfpr, tpr, threshold = metrics.roc_curve(y_test, y_pred_rf)\nroc_auc_stack = metrics.auc(fpr, tpr)\nprint(\"AUC : % 1.4f\" %(roc_auc_stack))","17959e5e":"performance = performance.append({'Model':'Random Forest','Accuracy':'93','Recall':'100','Precision':'92','F1 Score':'96','AUC':'83.3'},ignore_index = True)","2e1cf060":"print(performance)","a52a4301":"performance.set_index(\"Model\", inplace = True)","f2e1dc88":"print(performance)","82cc2a62":"convert_dict = {'Accuracy': int, 'Recall': int,'Precision': int, 'F1 Score': int, 'AUC': float} \nsummary = performance.astype(convert_dict) ","25b4fc8b":"print(summary.dtypes)","5782fbd4":"plt.figure(figsize=(11,8))\nsns.lineplot(data=summary)","f2a31619":"Since target variables are disproportionate, f-score taken as basis for comparison of all models and logistic regression performed slightly better. Also SVM had 100% recall.","627dd133":"Peak of distribution very close and dispersion range very similar in case of both individuals.","0ba62536":"1. In all the measures of variation in amplitude, people having parkinson disease have a considerably wider range. \n2. But in the lower ranges of amplitudes, there is complete overlap over each other for both types of individuals.\n3. Very high peaks(almost three-fold to that of people with parkinson at the peak amplitude), with low dispersion can be seen in case of healthy individuals.","2c42fcbd":"Split the dataset into training and test set in the ratio of 70:30 (Training:Test)","afeb10e4":"Missing values not present.","f4dbbb14":"PPE of healthy people end near the median of PPE of people with Parkinsons(at around 0.2)\n\nPeople with PPE value > 0.2 have high probability of having parkinson's deisease.","8d1e0e3d":"Objective:\nGoal is to classify the patients into the respective labels using the attributes from\ntheir voice recordings","cfc896ca":"Healthy people have a very high peak(around NHR=0.1). \n\nPeople with NHR > 0.2 have very high probability of having parkinson's disease.","c4405ccb":"#### Result\n\nAccuracy : 85%\n\nRecall : 91%\n\nPrecision : 90%\n\nF1 Score : 91%\n\nAUC : 74.91%","4744deae":"Individuals with parkinsons disease have wider range ","be6ce916":"END","40d15b0b":"Compare all the models ","d69b31c8":"There is lots of variation in units of data, scaling needed.","dbf5c15b":"Frequency variation range of people with parkinsons is more even though peaks of distributions are quite close.","67853d1f":"1. MDVP:Jitter(%), MDVP:Jitter(Abs), MDVP:RAP, MDVP:PPQ, Jitter:DDP are highly correlated to NHR.\n2. MDVP:Shimmer, MDVP:Shimmer(dB), Shimmer:APQ3, Shimmer:APQ5, MDVP:APQ, Shimmer:DDAm are highly correlated to HNR.\n3. Speard1 and PPE are highly correlated.\n4. Status does not have any strong correlation with any variable.\n","cfa3c4cd":"People with Spread1 value of < -5.5 have high probability of having parkinson's disease.","e3fd13b3":"#### Result\n\nAccuracy : 71%\n\nRecall : 68%\n\nPrecision : 94%\n\nF1 Score : 79%\n\nAUC: 75.71%","7896df62":"Train a meta-classifier","3f8d940b":"Distirution of D2 almost resembles normal distribution.\nDistirution of RPDE is positively skewed.","09c471fa":"#### Conclusion\nAnalysing all the performance parameters, overall the Random Forest Algorithm performed the best. \nIt was closely followed by SVM based Stacking as the model results vary each time it is built.","f3dddf94":"Most of the features are Skewed.","4a702512":"Peak of distribution for health people is at 0.1 and for people with Parkinsons is between 0.2-0.25.\n\nAlthough peak of healthy people is still double in size to that of people with parkinsons, despite lower no. of healthy people in the sample population.","d62d83ce":"Train at least one standard Ensemble model - Random forest, Bagging,Boosting etc, and note the accuracy (10 points)","49f0d1b7":"Load the dataset","58ff4418":"#### Result\n\nAccuracy : 85%\n\nRecall : 100%\n\nPrecision : 84%\n\nF1 Score : 91%\n\nAUC: 62.5%","cf5be28a":"Eye-ball raw data to get a feel of the data in terms of number of records, structure of the file, number of attributes, types of attributes and a general idea of likely challenges in the dataset.","492d9eef":"Data distribution is positively skewed.","70e038fa":"All distributions have similar shape and are positively skewed.","02b95912":"Peaks of distribution don't coincide but there is no clear seperation in the frequencies' distribution of healthy and ill people .","8bd61a5c":"#### Result\n\nAccuracy : 92%\n\nRecall : 98%\n\nPrecision : 92%\n\nF1 Score : 95%\n\nAUC : 82.27%","f9126f23":"There seems to be no null values.","1e1862a4":"Removing the outliers of highly correlated columns decreased  correlation.\n\nAlso since the dataset is small outliers were not removed.","ddcdae3f":"#### Checking 5 point Summary","de54bf72":"The data has 195 patients and 24 features.","57814a9f":"Training standard classification algorithms ","e1e35447":"Preparing the data for training","7251ce75":"14 records of people were removed as outliers ","e457ea65":"Distribution of NHR is negatively skewed.\n\nDistribution of HNR is slightly positively skewed.","ba9ce5dc":"#### Seperating input and target variables","e3f63625":"All distributions have similar shape and are positively skewed.","66c857fd":"#### Result\n\nAccuracy : 86%\n\nRecall : 94%\n\nPrecision : 90%\n\nF1 Score : 92%\n\nAUC: 75.98%","242aa6ab":"There are more diseased people in the dataset.","40780707":"Univariate & bivariate analysis ","f04addc6":"#### Result\n\nAccuracy : 93%\n\nRecall : 100%\n\nPrecision : 92%\n\nF1 Score : 96%\n\nAUC : 83.33%","1a1e3eb7":"As the AUC of SVM based stacking classifier is higher, it is considered better.","2be1e164":"#### Result\n\nAccuracy : 93%\n\nRecall : 98%\n\nPrecision : 94%\n\nF1 Score : 96%\n\nAUC : 86.44%\n","d1cd6b22":"Individuals with HNR < 20, have higher probability of having parkinson's disease.","60dee337":"1. In all the measures of variation in fundamental frequency, people having parkinson disease have a considerably wider range. \n2. But in the lower ranges of frequencies, there is complete overlap over each other for both types of individuals.\n3. Very high peaks(almost three-fold to that of people with parkinson at the peak frequency), with low dispersion can be seen in case of healthy individuals."}}