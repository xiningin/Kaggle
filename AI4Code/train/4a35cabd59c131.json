{"cell_type":{"2ec10579":"code","32cc0f8a":"code","972945ec":"code","f30780fe":"code","f67274bb":"code","144f6303":"code","12079727":"code","96d6cd35":"code","6b1c7976":"code","c90f94ab":"code","0b7d9bd3":"code","2621549c":"code","e4eff374":"code","380f8e75":"code","9d612679":"code","4090b2c3":"code","62c5085e":"markdown","fe54a3ce":"markdown","2fe1f2d5":"markdown","85d41a38":"markdown","21cc2b4c":"markdown","3390b7c0":"markdown","ed4151e0":"markdown","555068b6":"markdown"},"source":{"2ec10579":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chi2_contingency \nfrom sklearn.preprocessing  import OrdinalEncoder, OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score, precision_score\nimport warnings\n\n\nwarnings.simplefilter(\"ignore\")\npd.set_option(\"max_columns\", None)","32cc0f8a":"class CONFIG:\n    path = \"..\/input\/mushroom-classification\/mushrooms.csv\"\n    seed = 42\n    folds = 5","972945ec":"dataset = pd.read_csv(CONFIG.path)","f30780fe":"def hide_spines(ax, spines=[\"top\", \"right\", \"left\", \"bottom\"]):\n    for spine in spines:\n        ax.spines[spine].set_visible(False)","f67274bb":"colors = [\"#ED3E2F\", \"#85BB65\"]\nmagma = sns.color_palette(\"magma\")\nsns.palplot(colors)\nsns.palplot(magma)","144f6303":"dataset","12079727":"fig = plt.figure(figsize=(7, 7))\nfig.set_facecolor(\"#fff\")\n\nax = fig.add_subplot()\nax.set_facecolor(\"#fff\")\n\nsns.countplot(x=\"class\", data=dataset, palette=colors, ec=\"#000\", alpha=1, linewidth=1.25, zorder=2, ax=ax)\nax.grid(axis=\"y\", linewidth=1.5, color=\"lightgrey\", linestyle=\"--\", zorder=0)\nax.xaxis.set_tick_params(size=0, labelsize=14, pad=7)\nax.set_xlabel(\"Class\", fontsize=17, fontfamily=\"serif\", labelpad=7)\nax.yaxis.set_tick_params(size=0, labelsize=12, pad=7)\nax.set_ylabel(\"Count\", fontsize=14, fontfamily=\"serif\", labelpad=7)\nhide_spines(ax, spines=[\"top\", \"right\", \"left\"])\nax.spines[\"bottom\"].set(linewidth=2.5)\n\nax.set_title(\"class Distribution\", fontsize=20, fontweight=\"bold\", fontfamily=\"serif\", loc=\"left\")\nax.set_ylim(1)\nfig.show()","96d6cd35":"features = dataset.columns[1:].tolist()\nprint(features, len(features))","6b1c7976":"rows = 8\ncols = 3\nfig = plt.figure(figsize=(15, 25))\nfig.set_facecolor(\"#fff\")\nfor idx, feature in enumerate(features):\n    ax = fig.add_subplot(rows, cols, idx+1)\n    ax.set_facecolor(\"#fff\")\n    ax.grid(axis=\"y\", linewidth=1, color=\"lightgrey\", linestyle=\"--\", zorder=0)\n    sns.countplot(x=feature, palette=magma_palette, data=dataset, ec=\"#000\", alpha=1, linewidth=1.5, zorder=2)\n    ax.xaxis.set_tick_params(size=0, labelsize=12, pad=7)\n    ax.yaxis.set_tick_params(size=0, labelsize=10, pad=7)\n    \n    if idx % cols == 0:\n        ax.set_ylabel(\"Count\", fontsize=14, fontfamily=\"serif\", labelpad=7)\n    else:\n        ax.set_ylabel(\"\")\n        \n    ax.set_xlabel(feature, fontsize=14, fontfamily=\"serif\", labelpad=7)\n    hide_spines(ax, spines=[\"top\", \"right\", \"left\"])\n    ax.spines[\"bottom\"].set(linewidth=2)\n    ax.set_ylim(1)\n\nfig.text(x=0.05, y=1.01, s=\"Features Distributions\", fontsize=22, fontweight=\"bold\", fontfamily=\"serif\")\nfig.tight_layout(w_pad=2, h_pad=1.5)\nfig.show()","c90f94ab":"rows = 8\ncols = 3\nmagma_palette = sns.color_palette(\"magma\")\nfig = plt.figure(figsize=(15, 25))\nfig.set_facecolor(\"#fff\")\nfor idx, feature in enumerate(features):\n    ax = fig.add_subplot(rows, cols, idx+1)\n    ax.set_facecolor(\"#fff\")\n    ax.grid(axis=\"y\", linewidth=1, color=\"lightgrey\", linestyle=\"--\", zorder=0)\n    sns.countplot(x=feature, palette=colors, hue=\"class\", data=dataset, ec=\"#000\", alpha=1, linewidth=1.5, zorder=2)\n    \n    feature_data_p = dataset[dataset[\"class\"] == \"p\"][feature].value_counts()\n    feature_data_e = dataset[dataset[\"class\"] == \"e\"][feature].value_counts()\n    \n    for idx_p in feature_data_p.index:\n        if idx_p not in feature_data_e.index:\n            feature_data_e[idx_p] = 0\n    \n    for idx_e in feature_data_e.index:\n        if idx_e not in feature_data_p.index:\n            feature_data_p[idx_e] = 0\n    \n    \n    feature_data_p = feature_data_p.sort_index()\n    feature_data_e = feature_data_e.sort_index()\n    \n    crosstable = pd.crosstab(feature_data_p.values, feature_data_e.values)\n    stat, p_value, dof , _ = chi2_contingency(crosstable)\n    \n    if idx % cols == 0:\n        ax.set_ylabel(\"Count\", fontsize=14, fontfamily=\"serif\", labelpad=7)\n    else:\n        ax.set_ylabel(\"\")\n        \n    ax.set_xlabel(feature, fontsize=14, fontfamily=\"serif\", labelpad=7)\n    hide_spines(ax, spines=[\"top\", \"right\", \"left\"])\n    ax.spines[\"bottom\"].set(linewidth=2)\n    ax.axvline(x=0, label=f\"chi^2 p_value: {np.round(p_value, 2)}\", visible=False, color=\"#000\")\n    ax.set_ylim(1)\n    ax.legend()\n\nfig.text(x=0.05, y=1.01, s=\"class - Features Distributions\", fontsize=22, fontweight=\"bold\", fontfamily=\"serif\")\nfig.tight_layout(w_pad=2, h_pad=1.5)\nfig.show()","0b7d9bd3":"most_useful_features = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"odor\", \"gill-color\", \"stalk-surface-below-ring\", \"veil-color\", \"ring-number\", \"ring-type\", \"spore-print-color\", \"population\", \"habitat\", \"class\"]\ncleaned_dataset = dataset[most_useful_features]\ncleaned_dataset","2621549c":"labels = cleaned_dataset.pop(\"class\").map({\"e\": 0, \"p\": 1}).values","e4eff374":"labels[:5]","380f8e75":"def ordinal_encode(X):\n    encoder = OrdinalEncoder().fit(X)\n    return encoder.transform(X)","9d612679":"encoded_dataset = ordinal_encode(cleaned_dataset)\nencoded_dataset.shape","4090b2c3":"strategy = KFold(n_splits=CONFIG.folds, random_state=CONFIG.seed, shuffle=True)\nfolds = strategy.split(encoded_dataset, labels)\naccuracies, precisions = [], []\nfor fold_idx, (train_indexes, test_indexes) in enumerate(folds):\n    print(f\"Fold: [{fold_idx+1}\/{CONFIG.folds}]\", end=\": \")\n    train_data, train_labels = encoded_dataset[train_indexes], labels[train_indexes]\n    test_data, test_labels = encoded_dataset[test_indexes], labels[test_indexes]\n    \n    fold_model = DecisionTreeClassifier().fit(train_data, train_labels)\n    \n    predictions = fold_model.predict(test_data)\n    accuracy = accuracy_score(test_labels, predictions)\n    precision = precision_score(test_labels, predictions)\n    print(f\"Accuracy: {accuracy}\", end=\" \")\n    print(f\"Precision: {precision}\", end=\"\\n\"*2)\n    accuracies.append(accuracy)\n    precisions.append(precision)\n    \naccuracies, precisions = np.array(accuracies), np.array(precisions)\nprint(f\"Mean Accuracy: {accuracies.mean()}\\nMean Precision: {precisions.mean()}\")","62c5085e":"## *class* - Features Relationships","fe54a3ce":"## Features Analysis","2fe1f2d5":"## Columns' descriptions\n\n<ul>\n<li><b>class<\/b>: edible=e, poisonous=p\n\n<li><b>cap-shape<\/b>: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\n<li><b>cap-surface<\/b>: fibrous=f,grooves=g,scaly=y,smooth=s\n\n<li><b>cap-color<\/b>: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\n<li><b>bruises<\/b>: bruises=t,no=f\n\n<li><b>odor<\/b>: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\n<li><b>gill-attachment<\/b>: attached=a,descending=d,free=f,notched=n\n\n<li><b>gill-spacing<\/b>: close=c,crowded=w,distant=d\n\n<li><b>gill-size<\/b>: broad=b,narrow=n\n\n<li><b>gill-color<\/b>: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\n<li><b>stalk-shape<\/b>: enlarging=e,tapering=t\n\n<li><b>stalk-root<\/b>: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\n<li><b>stalk-surface-above-ring<\/b>: fibrous=f,scaly=y,silky=k,smooth=s\n\n<li><b>stalk-surface-below-ring<\/b>: fibrous=f,scaly=y,silky=k,smooth=s\n\n<li><b>stalk-color-above-ring<\/b>: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n<li><b>stalk-color-below-ring<\/b>: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\n<li><b>veil-type<\/b>: partial=p,universal=u\n\n<li><b>veil-color<\/b>: brown=n,orange=o,white=w,yellow=y\n\n<li><b>ring-number<\/b>: none=n,one=o,two=t\n\n<li><b>ring-type<\/b>: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\n<li><b>spore-print-color<\/b>: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\n<li><b>population<\/b>: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\n<li><b>habitat<\/b>: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n<\/ul>","85d41a38":"## *class* Analysis","21cc2b4c":"# Model Building","3390b7c0":"# Exploratory Data Analysis","ed4151e0":"## First view","555068b6":"# Data Preprocessing"}}