{"cell_type":{"045e0070":"code","a76faec5":"code","49251b23":"code","2e29065b":"code","d9fe77fb":"code","f7b04cf3":"code","08b08cce":"code","0a114bbf":"code","abbcdec6":"code","2dda33e7":"code","c2806c2d":"code","a6ff04ff":"code","3e062777":"code","50bbca35":"markdown"},"source":{"045e0070":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a76faec5":"import numpy as np \nimport pandas as pd # for working with dataframes\nimport seaborn as sns # for data visualization \n\nfrom matplotlib import pyplot as plt # for plotting\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\nimport warnings # http:\/\/blog.johnmuellerbooks.com\/2015\/11\/30\/warnings-in-python-and-anaconda\/\nwarnings.filterwarnings(\"ignore\")","49251b23":"dataframe = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')\ndataframe.head()","2e29065b":"sns.lineplot(y = 'acousticness', x = 'popularity', data = dataframe)\nplt.title('Popularity Based on acousticness')","d9fe77fb":"sns.lineplot(y = 'danceability', x = 'popularity', data = dataframe)\nplt.title('Popularity Based on danceability')","f7b04cf3":"sns.lineplot(y = 'duration_ms', x = 'popularity', data = dataframe)\nplt.title('Popularity Based on duration_ms')","08b08cce":"sns.lineplot(y = 'energy', x = 'popularity', data = dataframe)\nplt.title('Popularity Based on energy')","0a114bbf":"sns.jointplot(y = 'explicit', x = 'popularity', data = dataframe)\nplt.title('Popularity Based on explicit')","abbcdec6":"dataframe.loc[dataframe['popularity'] < 57, 'popularity'] = 0 \ndataframe.loc[dataframe['popularity'] >= 57, 'popularity'] = 1\ndataframe.loc[dataframe['popularity'] == 1]","2dda33e7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import make_scorer, accuracy_score, roc_auc_score \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfeatures = [\"acousticness\",\"danceability\",\"duration_ms\",\"energy\",\"explicit\",\"instrumentalness\"\n            ,'key','liveness','loudness','mode','speechiness','tempo','valence','year']\ntraining = dataframe.sample(frac = 0.8,random_state = 420)\nX_train = training[features]\ny_train = training['popularity']\nX_test = dataframe.drop(training.index)[features]","c2806c2d":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.2, random_state = 420)","a6ff04ff":"RFC_Model = RandomForestClassifier()\nRFC_Model.fit(X_train, y_train)\nRFC_Predict = RFC_Model.predict(X_valid)\nRFC_Accuracy = accuracy_score(y_valid, RFC_Predict)\nprint(\"Accuracy: \" + str(RFC_Accuracy))\n\nRFC_AUC = roc_auc_score(y_valid, RFC_Predict) \nprint(\"AUC: \" + str(RFC_AUC))","3e062777":"LR_Model = LogisticRegression()\nLR_Model.fit(X_train, y_train)\nLR_Predict = LR_Model.predict(X_valid)\nLR_Accuracy = accuracy_score(y_valid, LR_Predict)\nprint(\"Accuracy: \" + str(LR_Accuracy))\n\nLR_AUC = roc_auc_score(y_valid, LR_Predict) \nprint(\"AUC: \" + str(LR_AUC))","50bbca35":"Don't need: release_date, id, year, "}}