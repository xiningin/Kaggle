{"cell_type":{"6cc5098f":"code","ba6bd70c":"code","33b6c115":"code","d58157f5":"code","72e9d779":"code","6706a1f8":"code","de69bbbf":"code","45800258":"code","cc667173":"code","b646c11a":"code","12dac515":"code","75057bf6":"code","42dc8766":"code","85e18f2e":"code","7045d231":"code","cb5d16ca":"code","f172bf32":"code","05393d3e":"code","934ee638":"code","cb42a3e1":"code","853d1da8":"code","23400f3c":"code","9a6ac8c3":"code","e3763702":"code","8fb94b23":"code","1e99b74a":"code","8ab54225":"markdown","a006680c":"markdown","70d975d7":"markdown","003a7c07":"markdown","6cbd136a":"markdown","1d27605d":"markdown","94d616c1":"markdown","998a6e94":"markdown","5d7ce991":"markdown","06daf20f":"markdown","dec937ca":"markdown","7568c434":"markdown","81812d48":"markdown"},"source":{"6cc5098f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ba6bd70c":"df = pd.read_csv(\"\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv\")\ndf.head()","33b6c115":"print(\"Numer of missin values in our temperature column: \", df.meantemp.isnull().sum())","d58157f5":"sns.pairplot(df)","72e9d779":"plt.figure(figsize=(18, 8))\nplt.plot(df.date, df['meantemp'])\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.title(\"Recorded Temperature\", fontsize=16)\nplt.show()","6706a1f8":"plt.figure(figsize=(18, 8))\nplt.fill_between(df.date, y1=df['meantemp'], y2=-df['meantemp'], alpha=0.5, linewidth=2, color='seagreen')\nplt.hlines(y=0, xmin=np.min(df.date), xmax=np.max(df.date), linewidth=.5)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.title(\"Recorded Temperature (Two sided view)\", fontsize=16)\nplt.show()","de69bbbf":"plt.figure(figsize=(18, 8))\ndates = pd.to_datetime(df.date.iloc[:-1])\nprint(\"Temperature Years on Record: \", *dates.dt.year.unique())\nfor i in dates.dt.year.unique():\n    plt.plot(df['meantemp'].iloc[:-1][dates.dt.year==i].values, label=i)\n    \nplt.xlabel(\"Month\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, 365, 32), labels=dates.dt.month_name().unique(), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.title(\"Recorded Temperature (Years Comparison)\", fontsize=16)\nplt.legend(fontsize=12)\nplt.show()","45800258":"plt.figure(figsize=(14, 8))\nsns.boxplot(x=dates.dt.year.iloc[:-1], y='meantemp', data=df.iloc[:-1])\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","cc667173":"plt.figure(figsize=(14, 8))\nsns.boxplot(x=dates.dt.month.iloc[:-1], y='meantemp', data=df.iloc[:-1])\nplt.xlabel(\"Month\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, 12), labels=dates.dt.month_name().unique(), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","b646c11a":"from statsmodels.tsa.seasonal import seasonal_decompose\n\n# Multiplicative Decomposition \ndecomp_mul = seasonal_decompose(df['meantemp'], model='multiplicative', extrapolate_trend='freq', period=365)\ndecomp_mul.plot()\nplt.show()","12dac515":"# Additive Decomposition\ndecomp_add = seasonal_decompose(df['meantemp'], model='additive', extrapolate_trend='freq', period=365)\ndecomp_add.plot()\nplt.show()","75057bf6":"from statsmodels.tsa.stattools import adfuller, kpss\n\n# Augmented Dickey Fuller (ADF) Test\nresult = adfuller(df['meantemp'].values, autolag='AIC')\nprint('ADF Statistic:', result[0], 'p-value:', result[1])\n\n# Kwiatkowski-Phillips-Schmidt-Shin (KPSS) Test\nresult = kpss(df['meantemp'].values, nlags=\"auto\", regression='c')\nprint('KPSS Statistic: ', result[0], 'p-value: ', result[1])","42dc8766":"from scipy import signal\n\nplt.figure(figsize=(18, 8))\ndetrended = signal.detrend(df['meantemp'].values)\nplt.plot(df.date, detrended)\nplt.title('Temperatures detrended by subtracting the least squares fit to the original series', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","85e18f2e":"plt.figure(figsize=(18, 8))\ndecomp_mul = seasonal_decompose(df['meantemp'], model='multiplicative', extrapolate_trend='freq', period=365)\ndetrended = df['meantemp'].values - decomp_mul.trend\nplt.plot(df.date, detrended)\nplt.title('Temperatures detrended by subtracting the trend component to the original series', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","7045d231":"plt.figure(figsize=(18, 8))\ndeseasonalized = df['meantemp'].values \/ decomp_mul.seasonal\nplt.plot(df.date, deseasonalized)\nplt.title('Temperatures deseasonalized by dividing the seasonal component to the original series', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","cb5d16ca":"from pandas.plotting import autocorrelation_plot\n\nplt.figure(figsize=(18, 8))\nautocorrelation_plot(df['meantemp'])\nplt.title('Autocorrelation Plot', fontsize=16)\nplt.xlabel(\"Lag\", fontsize=14)\nplt.ylabel(\"Autocorrelation\", fontsize=14)\nplt.show()","f172bf32":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nplot_acf(df['meantemp'], lags=365)\nplt.show()\nplot_pacf(df['meantemp'], lags=365)\nplt.show()","05393d3e":"from pandas.plotting import lag_plot\n\nplt.figure(figsize=(18, 8))\nlag_plot(df['meantemp'], lag=365)\nplt.title('Lag Plot', fontsize=16)\nplt.show()","934ee638":"plt.figure(figsize=(18, 8))\ndf_ma = df['meantemp'].rolling(30, center=True, closed='both').mean()\nplt.plot(df.date, df_ma)\nplt.title('Smoothing a time series (Using 30 days moving average)', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","cb42a3e1":"from statsmodels.nonparametric.smoothers_lowess import lowess\n\n# LOWESS smoothing (Locally Weighted Regression)\ndf_loess = pd.DataFrame(lowess(df['meantemp'], np.arange(len(df['meantemp'])), frac=0.10)[:, 1], index=df.date, columns=['meantemp'])\ndf_loess.head()","853d1da8":"plt.figure(figsize=(18, 8))\nplt.plot(df_loess.index, df_loess['meantemp'])\nplt.title('Smoothing a time series (Using LOWESS smoothing 10%)', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Temperature\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","23400f3c":"from statsmodels.tsa.stattools import grangercausalitytests\n\ngrangercausalitytests(df[['meantemp', 'humidity']], maxlag=2)","9a6ac8c3":"from statsmodels.tsa.arima.model import ARIMA\n\nmodel = ARIMA(df['meantemp'], order=(1,1,1))\nmodel_fit = model.fit()\nprint(model_fit.summary())","e3763702":"# Plotting residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nplt.figure(figsize=(18, 8))\nplt.plot(residuals)\nplt.title('Residuals', fontsize=16)\nplt.xlabel(\"Date\", fontsize=14)\nplt.ylabel(\"Amount of residuals\", fontsize=14)\nplt.xticks(np.arange(0, len(df.date)+1, 45), labels=[df.date[i] for i in range(0, len(df.date)+1, 45)], rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()","8fb94b23":"plt.figure(figsize=(18, 8))\nresiduals.plot(kind='kde', title='Density')\nplt.title('Density', fontsize=16)\nplt.show()","1e99b74a":"train = df['meantemp'][:int(np.floor((len(df)\/100)*70))]\ntest = df['meantemp'][int(np.floor((len(df)\/100)*70)):]\n\nmodel = ARIMA(train, order=(3, 2, 1))  \nfitted = model.fit()  \n\nfc = fitted.get_forecast(len(df['meantemp'][int(np.floor((len(df)\/100)*70)):]))  \nconf = fc.conf_int(alpha=0.05) # 95% confidence\n\nfc_series = pd.Series(fc.predicted_mean, index=test.index)\nlower_series = pd.Series(conf.iloc[:, 0], index=test.index)\nupper_series = pd.Series(conf.iloc[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(12,5), dpi=200)\nplt.plot(train, label='training')\nplt.plot(test, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","8ab54225":"## Lag Plot","a006680c":"## Smoothing a time series","70d975d7":"## Data Visualization","003a7c07":"## Deseasonalizing a time series","6cbd136a":"Exploring some of the key Time Series Analysis techniques used in order to pre-process temporal data and make predictions.\n\nFor additional informations about the theory and approach taken in this analysis, please refer to:\n- [Time Series Analysis in Python](https:\/\/www.machinelearningplus.com\/time-series\/time-series-analysis-python\/)\n- [ARIMA Model](https:\/\/www.machinelearningplus.com\/time-series\/arima-model-time-series-forecasting-python\/)","1d27605d":"## Autocorrelation and Partial-Autocorrelation","94d616c1":"## Testing for stationarity and trend stationarity","998a6e94":"## Granger Causality test\n\nUnderstanding if one time series will be useful to forecast another.","5d7ce991":"## Time Series Decomposition","06daf20f":"## Testing for Time Series Seasonality","dec937ca":"## Detrending a time series","7568c434":"## ARIMA (Auto Regressive Integrated Moving Average)","81812d48":"# Climate Time Series Analysis"}}