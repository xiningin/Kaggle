{"cell_type":{"77cd68c1":"code","45292880":"code","b98b5aa7":"code","744b8271":"code","c612b327":"code","06f112b2":"code","c686d2e1":"code","3481dcdb":"code","3bacaf92":"code","adc172ec":"code","580bd2e4":"code","9839f53a":"code","ec5de5bd":"code","70c71a1b":"code","14427d3a":"code","09f14f93":"code","7f5ff479":"code","24ba0e4b":"code","a3d3f958":"code","c76b9669":"code","2dc326d8":"code","3d2af670":"code","e680eaca":"code","8eb7caf9":"code","7757dc42":"code","5477b996":"code","62ca6b96":"code","c5b42411":"code","7428b9dc":"code","a510763c":"code","115fe9fa":"code","69716ebf":"code","992806e8":"code","883dcd34":"code","1513fc61":"code","555c5758":"code","7f781812":"code","beb4c1d6":"code","90177100":"code","8b160102":"code","16315dfe":"code","f89f2424":"code","aa95d8a2":"code","67afbd38":"code","dc8f30e9":"code","c6100526":"code","f4e8b89f":"code","250199d8":"code","5a01c930":"code","e0ceef3a":"code","d2496c2b":"code","7c076f99":"code","7f86dfe5":"code","2531a176":"code","9b941668":"code","27914a05":"code","848c17e6":"code","4be0a4b1":"code","5d31e3f5":"code","3179176a":"code","3839506f":"code","3c00d584":"code","5525eacb":"code","8f7a127a":"code","6e1f366b":"code","7f9bfb8f":"code","798b4662":"code","f37b22d1":"code","d2d960a9":"code","b810c0e8":"code","182fd867":"code","2cc18c40":"code","169aafcb":"code","bfdea6de":"code","a43a0bf9":"code","570ad4bc":"code","510cb55d":"code","3d0e9b16":"code","179d3c96":"code","feb68336":"markdown","db7bbbea":"markdown","9d57e639":"markdown","eca17941":"markdown","d8150e48":"markdown","3927973d":"markdown","517866af":"markdown","fad0f3b8":"markdown","7c9ac21e":"markdown","c646aa40":"markdown","39742ba1":"markdown","285da20c":"markdown","0d26cb9a":"markdown","67d1fb2e":"markdown","68b0005e":"markdown","a3d1d1f1":"markdown","661b2400":"markdown","90f14b2a":"markdown","87eb633e":"markdown","467fd4fb":"markdown","bbbffd1d":"markdown","8ec5466a":"markdown","40b6a84d":"markdown","c655b9c4":"markdown","7a842e47":"markdown"},"source":{"77cd68c1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,plot_roc_curve\nimport warnings\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings('ignore')\n%matplotlib inline","45292880":"#load the data to dataframe\ndf = pd.read_csv(\"..\/input\/employee-attrition\/HR-Employee-Attrition.csv\")","b98b5aa7":"df.head()","744b8271":"df.isna().sum()","c612b327":"df['Age'].nunique()","06f112b2":"df['Age'].value_counts()","c686d2e1":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['BusinessTravel'], hue = df['Attrition'])\n\nfor p in ax.patches:\n        ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+13))","3481dcdb":"df['DailyRate'].value_counts()","3bacaf92":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['Department'], hue = df['Attrition'])\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+13))","adc172ec":"df['DistanceFromHome'].value_counts()","580bd2e4":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['DistanceFromHome'], hue = df['Attrition'])\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()-0.01, p.get_height()+1))","9839f53a":"df.groupby(['JobRole', 'Attrition']).agg({'DistanceFromHome':np.mean})","ec5de5bd":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['Education'], hue = df['Attrition'])\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+5))","70c71a1b":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['EducationField'], hue = df['Attrition'])\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+5))","14427d3a":"df['EmployeeCount'].value_counts()\n#Employee count column has only one value in all rows, so probably we can drop this column","09f14f93":"df['EmployeeNumber'].nunique()\n#Each row of Employee Number column has unique value. ","7f5ff479":"df['EnvironmentSatisfaction'].value_counts()","24ba0e4b":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['EnvironmentSatisfaction'], hue = df['Attrition'], palette='viridis')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+3))","a3d3f958":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['Gender'], hue = df['Attrition'], palette='rainbow')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.18, p.get_height()+3))","c76b9669":"plt.figure(figsize=(10,6))\nsns.kdeplot(x = df['HourlyRate']) ","2dc326d8":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['JobInvolvement'], hue = df['Attrition'], palette='rainbow')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.13, p.get_height()+3))","3d2af670":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['JobLevel'], hue = df['Attrition'], palette='rainbow')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.13, p.get_height()+3))","e680eaca":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = df['JobRole'], hue = df['Attrition'], palette='viridis')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.12, p.get_height()+3))","8eb7caf9":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = df['JobSatisfaction'], hue = df['Attrition'], palette='Accent')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.16, p.get_height()+3))","7757dc42":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = df['MaritalStatus'], hue = df['Attrition'], palette='Accent_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.16, p.get_height()+3))","5477b996":"df['MonthlyIncome'].nunique()","62ca6b96":"df['MonthlyRate'].nunique()","c5b42411":"plt.figure(figsize=(16,10))\nsns.scatterplot(x = df['MonthlyIncome'], y = df['MonthlyRate'], hue = df['Attrition'])","7428b9dc":"df.groupby(['Education', 'Attrition']).agg({'MonthlyIncome':np.mean})","a510763c":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = df['NumCompaniesWorked'], hue = df['Attrition'], palette='Accent_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.11, p.get_height()+3))","115fe9fa":"df['Over18'].nunique()\n#This column has only one unique column, so we can drop this column","69716ebf":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['OverTime'], hue = df['Attrition'], palette='viridis_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.17, p.get_height()+3))","992806e8":"plt.figure(figsize = (16,10))\nax = sns.countplot(x = df['PercentSalaryHike'], hue = df['Attrition'], palette='viridis_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.05, p.get_height()+1))","883dcd34":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['PerformanceRating'], hue = df['Attrition'], palette='viridis_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.16, p.get_height()+5))","1513fc61":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['RelationshipSatisfaction'], hue = df['Attrition'], palette='Accent_r')\n\nfor p in ax.patches:\n        ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.12, p.get_height()+3))","555c5758":"df['StandardHours'].nunique()\n#Standard Hours column has only one unique value, so we can drop that column","7f781812":"plt.figure(figsize = (10,6))\nax = sns.countplot(x = df['StockOptionLevel'], hue = df['Attrition'], palette='Accent_r')\n\nfor p in ax.patches:\n        ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.12, p.get_height()+3))","beb4c1d6":"def value(col):\n    plt.figure(figsize = (16,10))\n    ax = sns.countplot(x = df[col], hue = df['Attrition'], palette='Accent_r')\n    for p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()-0.1, p.get_height()+2))\n    plt.tight_layout()\n    plt.show()\n   ","90177100":"value('TotalWorkingYears')","8b160102":"value('TrainingTimesLastYear')","16315dfe":"value('WorkLifeBalance')","f89f2424":"value('YearsAtCompany')","aa95d8a2":"value('YearsInCurrentRole')","67afbd38":"value('YearsSinceLastPromotion')","dc8f30e9":"value('YearsWithCurrManager')","c6100526":"df","f4e8b89f":"df['MonthlyIncome'].nunique()","250199d8":"final_df = df.drop(['EmployeeCount', 'Over18', 'StandardHours', 'EmployeeNumber'], axis =1)","5a01c930":"final_df","e0ceef3a":"cat_columns = final_df.select_dtypes(exclude = np.number).columns","d2496c2b":"cat_columns","7c076f99":"encode_df  = pd.DataFrame(index=final_df.index)","7f86dfe5":"encode_df = pd.get_dummies(final_df[cat_columns[1:]])","2531a176":"encode_df.head()","9b941668":"final_df.drop(['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'OverTime'], axis = 1, inplace = True)","27914a05":"final_concat_df = pd.concat([final_df,encode_df], axis =1)","848c17e6":"X = final_concat_df.drop('Attrition', axis =1)\ny = final_concat_df['Attrition']","4be0a4b1":"sc = StandardScaler()\n\nX_scaled = pd.DataFrame(sc.fit_transform(X), columns=X.columns)","5d31e3f5":"X_scaled","3179176a":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=123)","3839506f":"y.value_counts()","3c00d584":"lg = LogisticRegression()\n\nlg.fit(X_train, y_train)","5525eacb":"train_pred = lg.predict(X_train)\n\ntest_pred = lg.predict(X_test)","8f7a127a":"#train_data\ndef metrics(y_true,y_pred):\n    print('Confusion Matrix:\\n', confusion_matrix(y_true, y_pred))\n    print('\\n\\nAccuracy Score:\\n', accuracy_score(y_true, y_pred))\n    print('\\n\\nClassification Report: \\n', classification_report(y_true, y_pred))","6e1f366b":"print('Train Metrics')\nmetrics(y_train, train_pred)","7f9bfb8f":"print('Test Metrics')\nmetrics(y_test, test_pred)","798b4662":"plot_roc_curve(lg, X_train, y_train)","f37b22d1":"from sklearn.neighbors import KNeighborsClassifier","d2d960a9":"knn = KNeighborsClassifier(n_neighbors=7,n_jobs=-8)\n\nknn.fit(X_train, y_train)","b810c0e8":"train_pred_knn = knn.predict(X_train)\n\ntest_pred_knn = knn.predict(X_test)","182fd867":"print('Train Metrics')\n\nmetrics(y_train, train_pred_knn)","2cc18c40":"print('Test Metrics')\n\nmetrics(y_test, test_pred_knn)","169aafcb":"plot_roc_curve(knn, X_train, y_train)","bfdea6de":"from sklearn.naive_bayes import GaussianNB","a43a0bf9":"gb = GaussianNB()\n\ngb.fit(X_train, y_train)","570ad4bc":"train_pred_gb = gb.predict(X_train)\n\ntest_pred_gb = gb.predict(X_test)","510cb55d":"print('Train Metrics')\n\nmetrics(y_train, train_pred_gb)","3d0e9b16":"print('Test Metrics')\n\nmetrics(y_test, test_pred_gb)","179d3c96":"plot_roc_curve(gb, X_train, y_train)","feb68336":"**Observation**:\n* Married People have more probability No Employee Attrition.","db7bbbea":"**Observation**:\n* Travel Rarely category employee have more no. of no employee attrition.","9d57e639":"**Observation**:\n* Male employee have more no. of NO Employee attrition","eca17941":"#### Spliting","d8150e48":"**Observation**\n* Looks like R&D department has more no employee attrition","3927973d":"#### Scaling","517866af":"**Observation**:\n* Employee's Num of Companies Worked in 1 has more chance of No employee attrition ","fad0f3b8":"**\u2018show me a breakdown of distance from home by job role and attrition\u2019**","7c9ac21e":"**Observation**\n* Life Sciences education field employee have higher possibility no employee attrition","c646aa40":"#### Naive Bayes ","39742ba1":"#### KNN","285da20c":"**Observation**:\n* Education level 5 and Employee Attrition No have higher average of Monthly Income","0d26cb9a":"**Observation**:\n* Environment Satisfaction with value 3 & 4 have higher chance of No Employee Attrition ","67d1fb2e":"**Observation**:\n* No Overtime employee have higher chance of no employee attrition","68b0005e":"**Observation**\n* 3rd level education category employee have higher possibility no employee attrition","a3d1d1f1":"**Observation**\n* Stock Option level 0 and 1 have higher possibility of No employee attrition","661b2400":"#### Modelling","90f14b2a":"**Observations:**\n* JobInvolvement 3 have more no. of No Employee Attrition ","87eb633e":"**Observation**:\n* Job Level 2 has higher possibility of No Employee Attrition.\n","467fd4fb":"**Compare average monthly income by education and attrition**","bbbffd1d":"#### EDA","8ec5466a":"**Observation**:\n* Job Statisfaction level 4 has higher chance of no employee attrition.","40b6a84d":"Uncover the factors that lead to employee attrition and explore important questions such as \u2018show me a breakdown of distance from home by job role and attrition\u2019 or \u2018compare average monthly income by education and attrition\u2019. This is a fictional data set created by IBM data scientists.\n\nAlso available directly within Watson Analytics as Employee Performance","c655b9c4":"#### Feature Engineering","7a842e47":"**Observation**\n* People with less Distance from Home have the less chances of lead to Employee Attrition\n* People with higher Distance from Home may lead to employee attrition "}}