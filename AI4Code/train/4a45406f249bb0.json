{"cell_type":{"6659125f":"code","9bde1dc7":"code","b3cf8bdf":"code","cc0d95b0":"code","c7b8d249":"code","36c05336":"code","5a533c7d":"code","58ffbc4d":"code","9f45f3c8":"code","375d61e2":"code","cee52d0c":"code","c9a62c63":"code","da7219d4":"code","53e87367":"markdown","5e6034e9":"markdown","3aefef77":"markdown","59a6094b":"markdown","e28e3bc3":"markdown","ee40b13b":"markdown","7267781f":"markdown","5b161391":"markdown","cf99bdfe":"markdown","6713793d":"markdown","31e81b1b":"markdown"},"source":{"6659125f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bde1dc7":"data=pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","b3cf8bdf":"data","cc0d95b0":"data.Species.value_counts()","c7b8d249":"data.Species = data.Species.replace('Iris-setosa',1)\n\ndata.Species = data.Species.replace('Iris-versicolor',2)\n\ndata.Species = data.Species.replace('Iris-virginica',3)","36c05336":"Iris_setosa = data[data.Species == 1]\n\nIris_versicolor = data[data.Species==2]\n\nIris_virginica = data[data.Species==3]\n","5a533c7d":"plt.scatter(Iris_setosa[\"PetalLengthCm\"],Iris_setosa[\"SepalWidthCm\"],color = \"red\",alpha=0.8)\nplt.scatter(Iris_versicolor[\"PetalLengthCm\"],Iris_versicolor[\"SepalWidthCm\"],color=\"green\",alpha=0.8)\nplt.scatter(Iris_virginica[\"PetalLengthCm\"],Iris_virginica[\"SepalWidthCm\"],color = \"blue\",alpha=0.8)\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"PetalWidthCm\")\nplt.legend()\nplt.show()\n","58ffbc4d":"plt.scatter(Iris_setosa[\"PetalLengthCm\"],Iris_setosa[\"SepalWidthCm\"],color=\"black\",alpha=1)\nplt.scatter(Iris_versicolor[\"PetalLengthCm\"],Iris_versicolor[\"SepalWidthCm\"],color = \"black\",alpha=1)\nplt.scatter(Iris_virginica[\"PetalLengthCm\"],Iris_virginica[\"SepalWidthCm\"],color = \"black\",alpha=1)\nplt.xlabel(\"PetalLengthCm\")\nplt.ylabel(\"PetalWidthCm\")\nplt.legend()\nplt.show()","9f45f3c8":"from sklearn.cluster import KMeans\nwcss=[]\n\nfor k in range(1, 15):\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(data)\n    wcss.append(kmeans.inertia_)\n\nkmeans2 =KMeans(n_clusters=3)\n\nclusters = kmeans2.fit_predict(data)\n\ndata[\"label\"] = clusters\n\nplt.scatter(data[\"PetalLengthCm\"][data.label==0],data[\"SepalWidthCm\"][data.label==0], color=\"red\")\nplt.scatter(data[\"PetalLengthCm\"][data.label==1],data[\"SepalWidthCm\"][data.label==1], color=\"green\")\nplt.scatter(data[\"PetalLengthCm\"][data.label==2],data[\"SepalWidthCm\"][data.label==2], color=\"blue\")\n\nplt.show()","375d61e2":"from sklearn.cluster import KMeans\nwcss=[]\n\nfor k in range(1, 15):\n    kmeans=KMeans(n_clusters=k)\n    kmeans.fit(data)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),wcss)\nplt.xlabel(\"number of k (cluster) value\")\nplt.xlabel(\"wcss\")\nplt.show()","cee52d0c":"from scipy.cluster.hierarchy import linkage, dendrogram\n\nmerg = linkage(data,method=\"ward\")\ndendrogram(merg,leaf_rotation = 90)\nplt.xlabel(\"data points\")\nplt.ylabel(\"euclidean distance\")\nplt.show()","c9a62c63":"from sklearn.cluster import AgglomerativeClustering\nhiyerartical_cluster = AgglomerativeClustering(n_clusters = 2,affinity =\"euclidean\",linkage=\"ward\")\n\ncluster=hiyerartical_cluster.fit_predict(data)\n\ndata[\"label\"] = cluster\n\n","da7219d4":"plt.scatter(data[\"PetalLengthCm\"][data.label==0],data[\"SepalWidthCm\"][data.label==0], color=\"red\")\nplt.scatter(data[\"PetalLengthCm\"][data.label==1],data[\"SepalWidthCm\"][data.label==1], color=\"yellow\")\n\nplt.show()","53e87367":"<a id=\"1\"><\/a> <br>\n## A-Unsupervised Learning","5e6034e9":"<a id=\"5\"><\/a> <br>\n## Hierachy","3aefef77":"<a ><img src=\"https:\/\/python-graph-gallery.com\/wp-content\/uploads\/400_Basic_Dendrogram-480x470.png\" alt=\"1\" border=\"0\">\n    \n* To realise such a dendrogram, you first need to have a numeric matrix. Each line represent an entity (here a car). \n* Each column is a variable that describes the cars. The objective is to cluster the entities to know who share similarities with who.\n\n* At the end, entities that are highly similar are close in the Tree. Let\u2019s start by loading a dataset and the requested libraries:\n\n","59a6094b":"* we take the lowest point where the chart is sharp. \n* this is the 3rd point.","e28e3bc3":"* Looking at the longest line shows that n_clusters = 2.","ee40b13b":"* Here you can see our data and which group they belong to. however, our aim is to group the unknown data group.\n  so we will make them look like they are from the same group and we will find groups again with Kmeans","7267781f":"### sample picture:\n<a ><img src=\"https:\/\/miro.medium.com\/max\/640\/1*rq7pII1kmkGeH3WSI321tA.png\" alt=\"1\" border=\"0\">\n    \n    \n    \n","5b161391":"1. [Unsupervised Learning](#1)\n    1. [Kmeans Clustering](#2)\n    1. [Evaluation of Clustering](#3)\n    1. [Standardization](#4)\n    1. [Hierachy](#5)\n\n","cf99bdfe":"<a id=\"3\"><\/a> <br>\n## Evaluation of Clustering","6713793d":"<a ><img src=\"https:\/\/miro.medium.com\/max\/1080\/1*fz-rjYPPRlGEMdTI-RLbDg.png\" alt=\"1\" border=\"0\">\n    \n    \n* Step 1: Choose the number of clusters k\n* Step 2: Select k random points from the data as centroids\n* Step 3: Assign all the points to the closest cluster centroid\n* Step 4: Recompute the centroids of newly formed clusters\n* Step 5: Repeat steps 3 and 4","31e81b1b":"<a id=\"2\"><\/a> <br>\n## Kmeans Clustering"}}