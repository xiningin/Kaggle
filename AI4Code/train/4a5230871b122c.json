{"cell_type":{"ed82ceef":"code","1e971d4e":"code","f9bd7ebc":"code","8fe4b3b7":"code","fda8e69f":"code","a95cb182":"code","f83a1254":"markdown","2dc5b33e":"markdown","c4ec081b":"markdown","c5ab663c":"markdown","c1033552":"markdown","433a1133":"markdown"},"source":{"ed82ceef":"!pip install xmltodict\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport xmltodict\nimport random","1e971d4e":"def get_path(image_name):\n    home_path = '\/kaggle\/input\/medical-masks-dataset\/'\n    image_path = home_path + 'images\/' + image_name\n    \n    if image_name[-4:] == 'jpeg':\n        label_name = image_name[:-5] + '.xml'\n    else:\n        label_name = image_name[:-4] + '.xml'\n    \n    label_path = home_path + 'labels\/' + label_name\n        \n    return  image_path, label_path\n\n\ndef parse_xml(label_path):\n    x = xmltodict.parse(open(label_path , 'rb'))\n    item_list = x['annotation']['object']\n    \n    # when image has only one bounding box\n    if not isinstance(item_list, list):\n        item_list = [item_list]\n        \n    result = []\n    \n    for item in item_list:\n        name = item['name']\n        bndbox = [(int(item['bndbox']['xmin']), int(item['bndbox']['ymin'])),\n                  (int(item['bndbox']['xmax']), int(item['bndbox']['ymax']))]       \n        result.append((name, bndbox))\n    \n    size = [int(x['annotation']['size']['width']), \n            int(x['annotation']['size']['height'])]\n    \n    return result, size\n\n\ndef visualize_image(image_name, bndbox=True):\n    image_path, label_path = get_path(image_name)\n    \n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    if bndbox:\n        labels, size = parse_xml(label_path)\n        thickness = int(sum(size)\/400.)\n        \n        for label in labels:\n            name, bndbox = label\n            \n            if name == 'good':\n                cv2.rectangle(image, bndbox[0], bndbox[1], (0, 255, 0), thickness)\n            elif name == 'bad':\n                cv2.rectangle(image, bndbox[0], bndbox[1], (255, 0, 0), thickness)\n            else: # name == 'none'\n                cv2.rectangle(image, bndbox[0], bndbox[1], (0, 0, 255), thickness)\n    \n    plt.figure(figsize=(20, 20))\n    plt.subplot(1, 2, 1)\n    plt.axis('off')\n    plt.title(image_name)\n    plt.imshow(image)\n    plt.show()","f9bd7ebc":"# name_list = os.listdir('\/kaggle\/input\/medical-masks-dataset\/images')\n# names = random.sample(name_list, 5)\n\nnames = ['20200128150215888112.jpeg', '0602623232127-web-tete.jpg', '0_8w7mkX-PHcfMM5s6.jpeg']\n\nfor name in names:\n    visualize_image(name)","8fe4b3b7":"visualize_image('shutterstock_289132226.jpg')\nvisualize_image('funnyMask_thumb_20200201_J_1024.jpg')","fda8e69f":"visualize_image('maxresdefault.jpg')","a95cb182":"visualize_image('febfe125a0904416a97b9ff3be08517c.jpeg')","f83a1254":"## None - wearing masks not properly\nIf the mask does not cover the nose or mouth, it should be classified as 'none'. The person on the left in the picture below is wearing a mask, but the mask is lowered below the chin, exposing the nose and mouth to the outside air.","2dc5b33e":"# Visualize images with bounding box\nI tried to draw a bouding box with different colors according to the labels. \n\nGreen corresponds to 'good', red to 'bad', blue to 'none'.","c4ec081b":"# How the people in the picture wear masks\n## Good - wearing masks properly\nIf the mask covers the nose and mouth, it should classified as 'good'. The people in this dataset are classified as 'good' simply by covering their nose and mouth, regardless of the mask type. It doesn't even matter if it's not a mask.","c5ab663c":"# Imports","c1033552":"## Bad - not wearing masks\nIf he or she is not wearing a mask, it should classified as 'bad'.","433a1133":"# Define functions"}}