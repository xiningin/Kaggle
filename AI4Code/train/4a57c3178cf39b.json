{"cell_type":{"20cc5247":"code","16ba4601":"code","781f7359":"code","d97dabc1":"code","cbf02bd6":"code","476ebcd0":"code","dbcf77f9":"code","a0226ba1":"code","534b5e82":"code","8e69c74a":"code","e3bc6478":"code","6866fd69":"code","8a3d4a5c":"code","3d348596":"code","6f5e5091":"code","f6fc47c8":"code","e1684eae":"code","b90b5aa7":"code","637beb9d":"code","e0069df4":"code","d41f5852":"code","d19f6372":"code","a4e90bb2":"code","df156886":"code","091c88e2":"code","c3fc75c4":"code","d6e2843f":"code","c5b0229a":"code","7f6bc5bf":"code","902bcffd":"code","3df2d715":"code","3c1666b4":"code","afdbd482":"code","0c175151":"code","f6bfbcc0":"code","10688111":"code","8b7820f1":"code","41be4a96":"code","663dcea3":"code","f883a614":"code","f3e953da":"code","3705eaea":"code","e97a11cf":"code","21a87ff9":"code","0022c11a":"code","470e1fbd":"code","cd4d6f0c":"code","232370cc":"code","6a625932":"code","e8efaee7":"code","c7433380":"code","ec645a15":"code","50c60f9c":"code","dc05fefa":"code","651967bf":"code","bb5ca573":"code","270f26d8":"code","99b7bca4":"code","6dfd8579":"code","eef2a45a":"code","7494ff52":"code","a52e53bf":"code","d9b5bce4":"code","87bb920a":"code","3df38cc5":"code","623cf62d":"code","a620d771":"code","86ad19ad":"code","e846a1ce":"code","bce6612f":"code","fd4d4a69":"markdown","c257f171":"markdown","99271bc9":"markdown","646a2d30":"markdown","85d89a0b":"markdown","5c15d433":"markdown","a4c462cb":"markdown","c3dd7fe0":"markdown","4f5b4233":"markdown","f8f5d950":"markdown","4fd3e9ed":"markdown","7d5c91f5":"markdown","6e95ea9d":"markdown","11e89d58":"markdown","fa8bf5e4":"markdown","3b5dcb95":"markdown","94a0f396":"markdown","d2b13764":"markdown","145b8153":"markdown","f46c838c":"markdown","f010da8c":"markdown","540cec39":"markdown","3798bd99":"markdown","06881e72":"markdown","4045d782":"markdown"},"source":{"20cc5247":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16ba4601":"df=pd.read_csv('..\/input\/salary\/Salary.csv')","781f7359":"df.info()","d97dabc1":"list(df.columns)","cbf02bd6":"list(df.index)","476ebcd0":"df.head(15)","dbcf77f9":"Mean of columns","a0226ba1":"M=df.mean()","534b5e82":"type(M)","8e69c74a":"M","e3bc6478":"df.std()","6866fd69":"df.mean()['Salary']","8a3d4a5c":"df.std()['YearsExperience']","3d348596":"df.cov()","6f5e5091":"df.corr()","f6fc47c8":"df.cov()['Salary']['YearsExperience']","e1684eae":"df.corr()['Salary']['YearsExperience']","b90b5aa7":"import matplotlib.pyplot as plt","637beb9d":"%matplotlib inline","e0069df4":"plt.figure()\nplt.plot(df['YearsExperience'], df['Salary'])\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')","d41f5852":"plt.hist(df['Salary'])\nplt.title('Histogram of salary')","d19f6372":"plt.hist(df['YearsExperience'])\nplt.title('Histogram of years of experience')","a4e90bb2":"df.plot()","df156886":"df['Salary'].plot()","091c88e2":"df['YearsExperience'].plot()\nplt.xlabel('index of the data point')\nplt.ylabel('Years of experience')","c3fc75c4":"df.plot('YearsExperience','Salary')\n","d6e2843f":"df['Salary'].plot.kde()\nplt.title('Probability density of salary')","c5b0229a":"df['YearsExperience'].plot.kde()\nplt.title('YearsExperience')","7f6bc5bf":"from sklearn.model_selection import train_test_split","902bcffd":"X=df['YearsExperience']\nY=df['Salary']","3df2d715":"result=train_test_split(X,Y,test_size=0.2) #20% of data will be used for testing ","3c1666b4":"X_train=result[0] #predictors (features) for training \nX_test=result[1]  #predictors  (features) for testing\nY_train=result[2] #variable (labels) to be predicted used for training\nY_test=result[3]  #variables (labels) to be predicted used for testing","afdbd482":"X_train.shape","0c175151":"type(X_train)","f6bfbcc0":"Y_train.shape","10688111":"from sklearn.linear_model import LinearRegression","8b7820f1":"lr=LinearRegression() #untrained model","41be4a96":"lr.fit(X_train.to_numpy().reshape(-1,1),Y_train)","663dcea3":"xt=X_train.to_numpy()   #conversion to a numpy array and then use reshape(-1,1)","f883a614":"lr.fit(xt.reshape(-1,1),Y_train) #train our linear regression model","f3e953da":"xtest=X_test.to_numpy().reshape(-1,1)","3705eaea":"Ypred=lr.predict(xtest)  #use test data to predict the variable to be predicted","e97a11cf":"Ypred-Y_test","21a87ff9":"np.linalg.norm(Ypred-Y_test)\/np.linalg.norm(Y_test) #relative error","0022c11a":"np.mean(Ypred-Y_test) #average error","470e1fbd":"np.sqrt(np.linalg.norm(Ypred-Y_test)**2\/Ypred.shape[0]) # average square error","cd4d6f0c":"plt.plot(range(Ypred.shape[0]),Y_test,'r', range(Ypred.shape[0]),Ypred,'b')\n#plt.legend('True value','Predicted value')","232370cc":"df2=pd.read_csv('..\/input\/heights-and-weights\/data.csv')","6a625932":"df2.info()","e8efaee7":"list(df2.columns)","c7433380":"list(df2.index)","ec645a15":"df2.mean()","50c60f9c":"df2.std()","dc05fefa":"df2.corr()","651967bf":"df2.plot('Height','Weight')","bb5ca573":"df2.hist()","270f26d8":"from sklearn.model_selection import train_test_split","99b7bca4":"X2=df2['Height']\nY2=df2['Weight']","6dfd8579":"result2=train_test_split(X2,Y2,test_size=0.2)","eef2a45a":"X_train2=result2[0] #predictors (features) for training \nX_test2=result2[1]  #predictors  (features) for testing\nY_train2=result2[2] #variable (labels) to be predicted used for training\nY_test2=result2[3]  #variables (labels) to be predicted used for testing","7494ff52":"from sklearn.linear_model import LinearRegression\nlr2=LinearRegression()","a52e53bf":"lr2.fit(X_train2.to_numpy().reshape(-1,1),Y_train2)","d9b5bce4":"Z=np.array([1,2,3,4,5])","87bb920a":"Z.shape","3df38cc5":"Z.reshape(-1,1)","623cf62d":"Zt=Z.reshape(Z.shape[0],1)","a620d771":"Zt.shape","86ad19ad":"np.reshape(Z,(-1,1))","e846a1ce":"Ypred2=lr2.predict(X_test2.to_numpy().reshape(-1,1))","bce6612f":"plt.plot(range(Ypred2.shape[0]),Y_test2, 'r', range(Ypred2.shape[0]), Ypred2,'b')","fd4d4a69":"X_train, X_test, Y_test, Y_train are series","c257f171":"Import the type LinearRegression()","99271bc9":"Histograms","646a2d30":"Probability densities","85d89a0b":"Standard deviation: $\\sigma_{x}=\\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_{x})^2}$\n\n\nCovariance: $cov_{x,y}=\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_x)(y_i-m_y)$\n\n\nCorrelation: $cor_{x,y}=\\frac{cov_{x,y}}{\\sigma_x\\sigma_y}$. ","5c15d433":"Splitting data into training data and testing data","a4c462cb":"Machine learning: linear regression","c3dd7fe0":"Create a variable storing the model, first the untrained one, then train it. ","4f5b4233":"Train your model using data","f8f5d950":"Matplotlib should display any plot inside the notebook","4fd3e9ed":"List of columns","7d5c91f5":"Open the data file and create a pandas DataFrame based on.","6e95ea9d":"Relative error is quite small","11e89d58":"Mean and standard deviation for a column","fa8bf5e4":"df.std() standard deviation column wise, has the same structure as df.mean()","3b5dcb95":"Use matplotlib for plotting","94a0f396":"Reformat the variable X_train: convert it to a numpy.array and reshap it","d2b13764":"df.cov(), df.corr() -- covariance and correlation of columns, they are DataFrame objects, their columns and rows are indexed by the columns of df","145b8153":"List of row indices","f46c838c":"Evaluate the error: use norms, relative  sum of square error","f010da8c":"Test our model","540cec39":"M is a pandas series, its rows are the same as the columns of df\n\nMean: $m_{x}=\\frac{1}{n} \\sum_{i=1}^{n} x_i$","3798bd99":"Plotting","06881e72":"ae+y=$a \\cdot 10^y$\n\nae-y=$a \\cdot \\frac{1}{10^y}$\n\nExamples: 1.5e+3 = 1500\n\n           5e-2=0.05","4045d782":"Alternative: use built-in functions for DataFrame, which will use matplotlib"}}