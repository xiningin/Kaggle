{"cell_type":{"9e82fc87":"code","a1e432e3":"code","5c2cb6c2":"code","1487944b":"code","98f9c704":"code","eca4bf92":"code","d97f9e02":"code","1fe969ef":"code","83c4d259":"code","7ac17a48":"code","4bad9dbc":"code","f2d45fa7":"code","5bebf1a8":"code","7bd68d54":"code","366fe486":"code","670e9f3a":"code","c49944a2":"code","bb468fb3":"code","a107c070":"code","7121d1a2":"code","29aaf842":"code","1d8631bf":"code","ae9b436b":"code","41752b35":"code","b8cfd35d":"code","a3f4235f":"code","cb9c2a63":"code","21a08a93":"code","f279454c":"code","221f5f1b":"code","ca5a56c7":"code","c8cf7400":"code","54868960":"code","0a202ecf":"code","7b0371a7":"code","70023247":"code","f048efe4":"code","bd8d8b41":"code","e0f2ced2":"code","fe2105b8":"code","06c2a99c":"code","1755fb6e":"code","1b1340da":"code","e821e29d":"code","3c264d3b":"code","e83b0c7d":"code","f2814f98":"markdown","3380b9f0":"markdown","cdefec69":"markdown","6b433a80":"markdown","ffdd36ac":"markdown","c0b058be":"markdown","ccdfc566":"markdown","bdb58a55":"markdown","d686432c":"markdown","41a2d812":"markdown","c96bf4fe":"markdown","ccc36459":"markdown","6a9a4c50":"markdown","fb74c299":"markdown","eb60b67e":"markdown","7f8f28b0":"markdown","636b3a72":"markdown","fa3e9750":"markdown","e942a8ec":"markdown","2c424cde":"markdown","c325a9c5":"markdown","9aaa4bdb":"markdown","b468a396":"markdown","3157ca6f":"markdown","e1ad78c0":"markdown","676e8cef":"markdown","75368d3c":"markdown","64f39266":"markdown","be4d1b1f":"markdown","621375c0":"markdown","28bc8b99":"markdown","16010c4b":"markdown","57a43e59":"markdown","1d3772dc":"markdown","56e32daa":"markdown","63b238b5":"markdown","accd7549":"markdown","89868ff5":"markdown","facebb9c":"markdown","a590fdf2":"markdown","ffa6cabf":"markdown","e4356ec0":"markdown","aeedc580":"markdown","bdb61327":"markdown","934174e3":"markdown","88ea532f":"markdown"},"source":{"9e82fc87":"#The plotly Python library is an interactive, open-source plotting library that supports over 40 unique chart \n\n#Importing pandas library to read the dataset\n# and manipulate data by cleaning it or changing datatype\nimport pandas as pd\n\n#The figures produced by Plotly Express can always be built from the ground up \n#using graph objects, but this approach typically takes 5-100 lines of code rather than 1.\nimport plotly.express as px\nimport plotly.graph_objs as go\n\n#Its a combination of date and time along with the attributes year, month, day, hour, minute, second, microsecond\n#Python Datetime module supplies classes to work with date and time. These classes provide a number of functions to deal with dates, times and time intervals.\nfrom datetime import *\nfrom plotly.subplots import make_subplots\n\n\n#TO find longitude and latitude using neighbourhood\nfrom geopy.geocoders import Nominatim\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n#!pip install geopy\n#!pip install --upgrade plotly","a1e432e3":"# Reading dataset\ndf=pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\ndf.sample(5)","5c2cb6c2":"# Renaming columns to names that make more sense\ndf.rename(columns={'Handcap': 'Handicap','No-show': 'Missed'}, inplace=True)\n# replacing wrong values in handicap column since it only contains 0 or 1 it can't have the [2] as a value\ndf.Handicap.replace(2,1 ,inplace=True)\ndf['Handicap'].replace(3,1,inplace=True)\ndf['Handicap'].replace(4,1,inplace=True)\n# removing values in age column with -1\ndf=df[(df.Age > -1)]\n# changing the data type of ScheduledDay and AppintmentDay to datetime\ndf['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\ndf['AppointmentDay']= pd.to_datetime(df['AppointmentDay'])\n# no duplicate values\nsum(df.duplicated())\n# printing the first 5 values in the dataset\ndf.head()","1487944b":"# Deriving Day column from AppointmentDay column\ndf['Day']=df['AppointmentDay'].dt.day_name()\n# Deriving Number of diseases by adding [Alcoholism,Handicap,Diabetes,Hipertension]\ndf['Num_Of_Dieases']=df['Alcoholism']+df['Handicap']+df['Diabetes']+df['Hipertension']\n# Derving Age groups [Young Frin 0 to 20 years][Adult from 20 to 60 years][Elderly from 60 to the maximum  age in the dataset]\ndf['age-group']=pd.cut(df['Age'],[-1,20,60,df.Age.max()+1],labels=['Young','Adult','Elderly'])\n# Deriving time_left column by subtracting AppointmentDay from ScheduledDay\ndf['time_left']=df['AppointmentDay']-df['ScheduledDay']\n\na=timedelta(days = 0)\nb=timedelta(days = 7)\nc=timedelta(days = 30)\nzero=timedelta(days = 0)\n# time_left can't have negative values\ndf=df[df['time_left']>zero]\n# Derving Time into 3 categories [Short from 0 to 7 days][Intermediate from 7 to 30 days][Long from 30 to maximum number of days in the dataset]\ndf['Time']=pd.cut(df['time_left'],[a,b,c,df.time_left.max()],labels=['Short','Intermediate','Long'])","98f9c704":"df.info()","eca4bf92":"#declaring locations dictionary\nlocations = dict()\n#for uniquie values of neighbourhood\nfor neighbor in df[\"Neighbourhood\"].unique():\n #Send http request to get location Logitude, Latitude and address  \n  geolocator = Nominatim(user_agent=\"agent_name\")\n  #find location using Neighbourhood unique  values and country name \"Brazil\"\n  location = geolocator.geocode(neighbor+\" \"+\"brasile\")\n  # print(location)\n  #Assign unique neighbourhoods to the key of the locations dictionary and location to the value\n  locations[neighbor] = location","d97f9e02":"#declaring empty lists\naddress = []\nlongitude = []\nlatitude = []\n#for every neighbourhood in df\nfor neighbor in df[\"Neighbourhood\"]:\n#if the value of  the locations dic is empty assign nan to it (Nan values Would be dropped later)  \n  if locations[neighbor] is None:\n   longitude.append(None)\n   address.append(None)\n   latitude.append(None)\n   continue\n#add values to the lists\n  longitude.append(locations[neighbor].longitude)\n  latitude.append(locations[neighbor].latitude)\n  address.append(locations[neighbor].address)","1fe969ef":"#add lists to the dataframe\ndf[\"address\"] = address\ndf[\"longitude\"] = longitude\ndf[\"latitude\"] = latitude","83c4d259":"#drop nan values\ndf.dropna(inplace = True)","7ac17a48":"#replace values  from string to int to make some calculations\ndf['Missed'] = df['Missed'].replace(['Yes','No'],[1,0])\ndf.head()","4bad9dbc":"fig = px.scatter_mapbox(df,\n                        lat=df[\"latitude\"].unique(),\n                        lon=df[\"longitude\"].unique(),\n                        hover_name=df[\"Neighbourhood\"].unique(),\n                        size =df.groupby(\"Neighbourhood\")[\"Missed\"].count(),\n                        zoom=3,\n                        height=600)\n\nfig.update_layout(mapbox_style=\"open-street-map\",\n                  title=dict(text='Number of Patients in each Neighbourhood in Brazil',\n                  font=dict(family='Times New Roman', \n                  size=30),\n                  x=.3, ),\n                  plot_bgcolor='#F9F9F9',\n                  paper_bgcolor='#ECECEC')\nfig.show()\n\n                        ","f2d45fa7":"df['Missed'] = df['Missed'].replace([1,0],['Yes','No'])","5bebf1a8":"men = df[df.Gender=='M'].Age\nwomen = df[df.Gender=='F'].Age\n\nbox_m = go.Box(x=men, name=\"Male\", fillcolor='navy')\nbox_w = go.Box(x=women, name=\"Female\", fillcolor='lime')\nlayout = go.Layout(title='Age by gender')\nfig = go.Figure(data=[box_m, box_w], layout=layout)\nfig.show()","7bd68d54":"fig = px.treemap(df, path=[\"Missed\"],title=\"Percentage and count of Patients Attended(Missed=No) and Missed(Missed=Yes) the Appointment\",)\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25),)\nfig.show()","366fe486":"#yes -> missed no -> attended\ncolors = ['#22C50E','#CB3313']\nNoShow_count = df[\"Missed\"].value_counts(sort=True)\nlabels = [\"Attended\",\"Missed\"]\nvalues = NoShow_count.values\n\npie = go.Pie(labels=labels, values=values, marker=dict(colors=colors),hole=0.3)\nlayout = go.Layout(title='Percentage of Patients Missed and Attended to the Appointment')\nfig = go.Figure(data=[pie], layout=layout)\n\nfig.show()","670e9f3a":"Attend=df[df['Missed']==\"No\"]\nMiss=df[df['Missed']==\"Yes\"]\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=Attend['Age'],name='Attended'))\nfig.add_trace(go.Histogram(x=Miss['Age'],name='Missed'))\n\nfig.update_layout(barmode='overlay',\n                  xaxis_title_text=\"Age\",\n                  yaxis_title_text= 'Count',\n\n                        title=dict(text='The count of patients missed and attended to the appointment according to Age',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\n\nfig.update_traces(opacity=0.75)\nfig.show()","c49944a2":"fig = px.density_heatmap(df, x=df[\"Age\"], y=df[\"Missed\"],)\n\nfig.update_xaxes(range=[0,120],dtick=5)\nfig.update_layout(\n                        title=dict(text='Number of patients Attended and Missed the Appointment according to Age',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\n\n\nfig.show()","bb468fb3":"fig = px.density_heatmap(df, x=df[\"age-group\"], y=df[\"Missed\"],)\n\nfig.update_layout(\n                        title=dict(text='Number of patients attended and missed the appointment according to Age Group',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\n\n\nfig.show()","a107c070":"df[\"age-group\"].value_counts()","7121d1a2":"sample_df = df.groupby(\"age-group\").sample(n=12000, random_state=1)\nsample_df[\"age-group\"].value_counts()","29aaf842":"fig = px.density_heatmap(sample_df, x=sample_df[\"age-group\"], y=sample_df[\"Missed\"],)\n\nfig.update_layout(\n                        title=dict(text='Number of patients attended and missed the appointment according to Age',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\n\n\nfig.show()","1d8631bf":"fig = px.histogram(df, x=df['age-group'].values,\n                 color=\"Missed\", \n                   color_discrete_sequence =['#2A913C','#FF0000'],\n                   barmode=\"group\", \n                   barnorm=\"percent\",\n                   title=\"Percentage of people Missed And Attended According to Age\",\n                   labels={\"x\": \"Age Group\",'count':'Probability'},)\nfig.update_layout({\n    'plot_bgcolor':'#F9F9F9',\n    'paper_bgcolor':'#ECECEC',\n    'yaxis':{'gridcolor':'black'},\n    'xaxis_title_text':\"Age Group\",\n    'yaxis_title_text':'Percent'\n})\nfig.show()","ae9b436b":"import numpy as np\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=Attend['time_left'].dt.days,name='Attended'))\nfig.add_trace(go.Histogram(x=Miss['time_left'].dt.days,name='Missed'))\n\nfig.update_layout(barmode='overlay',\n                  xaxis_title_text=\"Days\",\n                  yaxis_title_text= 'Count',\n\n                        title=dict(text='The count of patients missed and attended to the appointment according to Days left',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\n\nfig.update_traces(opacity=0.75)\nfig.show()","41752b35":"fig = px.histogram(df, x=df['Time'].values,\n                   color=\"Missed\", \n                   color_discrete_sequence =['#2A913C','#FF0000'],\n                   barmode=\"group\", \n                   barnorm=\"percent\",\n                   title=\"Percentage of people Missed And Attended According to Time left\",\n                   labels={\"x\": \"Time\",'count':'Probability'},)\nfig.update_layout({\n    'plot_bgcolor':'#F9F9F9',\n    'paper_bgcolor':'#ECECEC',\n    'yaxis':{'gridcolor':'black'},\n    'xaxis_title_text':\"Time\",\n    'yaxis_title_text':'Percent'\n})\nfig.show()","b8cfd35d":"fig = px.density_heatmap(df, x=df['Missed'], y=df['Gender'],labels={\"x\": \"Missed\",'y':'Gender'})\nfig.update_layout(\n                        title=dict(text='Number of Patients Missed the Appointment according to Gender',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()","a3f4235f":"df[\"Gender\"].value_counts()","cb9c2a63":"sample_df_gender = df.groupby(\"Gender\").sample(n=20000, random_state=1)\nsample_df_gender[\"Gender\"].value_counts()","21a08a93":"fig = px.density_heatmap(sample_df_gender, x=sample_df_gender['Missed'], y=sample_df_gender['Gender'],labels={\"x\": \"Missed\",'y':'Gender'})\nfig.update_layout(\n                        title=dict(text='Number of patients missed the appointment according to Gender',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()","f279454c":"fig = px.histogram(df, x=df['Gender'].values,\n                   color=\"Missed\", \n                   color_discrete_sequence =['#2A913C','#FF0000'],\n                   barmode=\"group\", \n                   barnorm=\"percent\",\n                   title=\"Percentage of people missed And attended According to Gender\",\n                   labels={\"x\": \"Gender\",'count':'Probability'},)\nfig.update_layout({\n    'plot_bgcolor':'#F9F9F9',\n    'paper_bgcolor':'#ECECEC',\n    'yaxis':{'gridcolor':'black'},\n    'xaxis_title_text':\"Gender\",\n    'yaxis_title_text':'Percent'\n})\nfig.show()","221f5f1b":"labels = ['Friday','Tuesday','Monday','Wednesday','Thursday','Saturday']\nNoShow_count = Miss[\"Day\"].value_counts()\nvalues = NoShow_count.values\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',hole=0.3)])\nfig.update_layout(\n    title_text=\"Percentage of all patients missed according to days of the week\")\nfig.show()","ca5a56c7":"fig = px.histogram(df, x=df['Day'].values,\n                   color=\"Missed\", \n                   color_discrete_sequence =['#2A913C','#FF0000'],\n                   barmode=\"group\", \n                   barnorm=\"percent\",\n                   title=\"Percentage of people Missed And Attended According to Day of the week\",\n                   labels={\"x\": \"Days\"},)\nfig.update_layout({\n    'plot_bgcolor':'#F9F9F9',\n    'paper_bgcolor':'#ECECEC',\n    'yaxis':{'gridcolor':'black'},\n    'xaxis_title_text':\"Day of the week\",\n    'yaxis_title_text':'Percent'\n})\nfig.show()","c8cf7400":"fig = px.treemap(df, path=[px.Constant(\"Number Of Diseases\"),\"Num_Of_Dieases\",\"Missed\"],title=\"Missed(Yes) Or Attended(No) According to number of Diseases\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","54868960":"fig = px.histogram(df, x=df['Num_Of_Dieases'].values,\n                   color=\"Missed\", \n                   color_discrete_sequence =['#2A913C','#FF0000'],\n                   barmode=\"group\", \n                   barnorm=\"percent\",\n                   title=\"Percentage of people Missed And Attended According to Number of Dieases\",\n                   labels={\"x\": \"Number of Dieases\",'y':'Number of Dieases'},)\nfig.update_layout({\n    'plot_bgcolor':'#F9F9F9',\n    'paper_bgcolor':'#ECECEC',\n    'yaxis':{'gridcolor':'black'},\n    'xaxis_title_text':\"Number of Dieases\",\n    'yaxis_title_text':'Percent'\n})\nfig.show()","0a202ecf":"fig = px.density_heatmap(Miss,\n                         x=Miss[\"Hipertension\"],\n                         y=Miss[\"Missed\"],\n                         histnorm='percent' )\nfig.update_xaxes(range=[0,1],dtick=1)\nfig.update_layout(\n                        title=dict(text='Number of patients missed the appointment according to Hipertension disease',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()\n\nfig = px.density_heatmap(Miss,\n                         x=Miss[\"Diabetes\"],\n                         y=Miss[\"Missed\"],\n                         histnorm='percent' )\nfig.update_xaxes(range=[0,1],dtick=1)\nfig.update_layout(\n                        title=dict(text='Number of patients missed the appointment according to Diabetes disease',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()\n\n\nfig = px.density_heatmap(Miss,\n                         x=Miss[\"Handicap\"],\n                         y=Miss[\"Missed\"],\n                         histnorm='percent' )\nfig.update_xaxes(range=[0,1],dtick=1)\nfig.update_layout(\n                        title=dict(text='Number of patients missed the appointment according to Handicap disease',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()\n\nfig = px.density_heatmap(Miss,\n                         x=Miss[\"Alcoholism\"],\n                         y=Miss[\"Missed\"],\n                         histnorm='percent' )\nfig.update_xaxes(range=[0,1],dtick=1)\nfig.update_layout(\n                        title=dict(text='Number of patients missed according to Alcoholism disease',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()","7b0371a7":"fig = go.Figure()\n\nfig.add_trace(\n    go.Histogram(x=df['Neighbourhood'].values, y=df['Neighbourhood'].index,\n                          marker_color='#000000')\n\n)\nfig.update_layout(\n                        title=dict(text='Number of people in each Neighbourhood',\n                        font=dict(family='Times New Roman', \n                                  size=50), x=.5),plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC',yaxis={'gridcolor':'black'},\n)\n\nfig","70023247":"fig = px.treemap(df, path=[px.Constant(\"Neighbourhood\"),\"Neighbourhood\",\"Missed\"],title=\"How many Patients Missed and Attended to the appointment according to Neighbourhood\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25), uniformtext=dict(minsize=10, mode='hide'))\nfig.show()","f048efe4":"fig = go.Figure()\nDidnotCome=  df[df['Missed']==\"Yes\"]\nCame=  df[df['Missed']==\"No\"]\n\nfig.add_trace(\n    go.Histogram(x=DidnotCome['Neighbourhood'].values, y=DidnotCome.Neighbourhood, \n                          marker_color='#FF0000',name='Missed')\n\n\n)\nfig.add_trace(\n    go.Histogram(x=Came['Neighbourhood'].values, y=Came.Neighbourhood,\n                          marker_color='#2A913C',name='Attended')\n)\n\n\nfig.update_layout(\n                        title=dict(text='Number of patients missed and attended according to each Neighbourhood',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC',yaxis={'gridcolor':'black'},\n)\n\nfig","bd8d8b41":"df['Missed'] = df['Missed'].replace(['Yes','No'],[1,0])\nfig = px.scatter_mapbox(df,\n                        color_discrete_sequence=['red'],\n                        lat=df[\"latitude\"].unique(),\n                        lon=df[\"longitude\"].unique(),\n                        hover_name=df[\"Neighbourhood\"].unique(),\n                        size =df[df[\"Missed\"] == 1].groupby(\"Neighbourhood\")[\"Missed\"].count()\n                        ,zoom=3,\n                        height=600,)\n\nfig.update_layout(mapbox_style=\"open-street-map\",\n                  title=dict(text='Number of patients who missed the appointment in each neighbourhood in Brazil',\n                  font=dict(family='Times New Roman', \n                  size=30),\n                  x=.3, ),\n                  plot_bgcolor='#F9F9F9',\n                  paper_bgcolor='#ECECEC')\n\nfig.show()\ndf['Missed'] = df['Missed'].replace([1,0],['Yes','No'])","e0f2ced2":"fig = px.treemap(df, path=[px.Constant(\"Neighbourhood\"),\"Neighbourhood\",\"Age\"],title=\"Distribution of ages among Neighbourhoods\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25),font_family=\"Droid Serif\",title_font_color='#937900')\nfig.show()","fe2105b8":"fig = px.treemap(df, path=[px.Constant(\"Neighbourhood\"),\"Neighbourhood\",\"age-group\",\"Missed\"],title=\"Patients according to Age group in each Neighbourhood and how likely they attend or miss the appointment\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","06c2a99c":"fig = px.treemap(df, path=[px.Constant(\"Neighbourhood\"),\"Neighbourhood\",\"Num_Of_Dieases\",\"Missed\"],title=\"Which neighbourhood has high patients with number of diseases and how likely they attend or miss the appointment\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","1755fb6e":"fig = px.treemap(df, path=[px.Constant(\"Neighbourhood\"),\"Neighbourhood\",\"SMS_received\"],title=\"How many Patients recieved SMS according to Neighbourhood\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","1b1340da":"fig = px.treemap(df, path=[px.Constant(\"all\"),\"Day\",\"Neighbourhood\",\"Missed\"],title=\"Which neighbourhoods have the highest Patients regarding days\")\nfig.update_traces(root_color=\"lightgrey\", textinfo = \"label+value+percent parent\")\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","e821e29d":"df_Copy = df.copy()\ndf_Copy['Gender'] = df_Copy['Gender'].replace(['M','F'],[1,0])\ndf_Copy['Missed'] = df_Copy['Missed'].replace(['No','Yes'],[1,0])\n\nfig = px.scatter(df, x=df_Copy['Age'], y=df_Copy['Num_Of_Dieases'],color=df_Copy['Missed'],labels={\"x\": \"Ages\",'y':'Number of Diseases',\"color\" : \"Missed\"},)\nfig.update_traces(marker_size=14)\n\nfig.update_xaxes(showgrid=True, gridwidth=2, gridcolor='pink',range=[-1,120],dtick=5)\nfig.update_yaxes(showgrid=True, gridwidth=2, gridcolor='pink',range=[-1,5],dtick=1)\n\nfig.add_annotation(\n        x=54,\n        y=4,\n        xref=\"x\",\n        yref=\"y\",\n        text=\"Overlapping values\",\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=16,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-50,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.8\n        )\nfig.add_annotation(\n        x=115,\n        y=1,\n        xref=\"x\",\n        yref=\"y\",\n        text=\"Maximum Age\",\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=16,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-60,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.8\n        )\n\nfig.update_layout(\n                        title=dict(text='Scatter plot between Age and number of dieases',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC',)\n\nfig.show()","3c264d3b":"fig = px.density_heatmap(df, x=df['Missed'], y=df['SMS_received'],labels={\"x\":'Missed' ,'y':\"Recieved SMS\"})\nfig.update_yaxes(range=[0,1],dtick=1)\nfig.update_layout(\n    \n                        title=dict(text='Number of patients missed and attended the appointment according to SMS',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()","e83b0c7d":"fig = px.density_heatmap(sample_df_gender, x=sample_df_gender[\"Age\"],\n                         y=sample_df_gender[\"Missed\"],\n                         facet_row=sample_df_gender[\"Gender\"],\n                         facet_col=sample_df_gender[\"SMS_received\"],)\nfig.update_layout(\n                        title=dict(text='Number of patients missed and attended the Appointment according to Age, SMS recieved and Gender',\n                        font=dict(family='Times New Roman', \n                                  size=30), x=.5, ), plot_bgcolor='#F9F9F9', paper_bgcolor='#ECECEC')\nfig.show()","f2814f98":"In the female patients sector we can observe that recieving an sms had no significate impact to make them attend the appointment and as they get older the percetage that you attend the appointment increases.\n\nIn the male patients sector we can observe that recieving an sms had no significate impact to make them attend the appointment and from age 0 to 9 male patients are unlikely to miss their appointment, and also as they get older the percentage of attending to the appointment increases.","3380b9f0":"we can observe from the previous box plot that 25% of female are from 0 to 23 years old, 25%  from 23 years old to 45 years old, 25% from 40 to 57, 25% from 57 to 102 and 1 outlier 115 years old\n\n\nwe can observe from the previous box plot that 25% of male are from 0 to 11 years old, 25%  from 11 years old to 35 years old, 25% from 35 to 56 and 25% from 56 to 100\n\n\nSo most of male are younger than female in this dataset","cdefec69":"**CONCLUSION**","6b433a80":"we can observe that data is taken from differet neighbourhood and cities which makes data unbiased towards a specific city or area.\nit could give us pecise answers for our problem.","ffdd36ac":"**Data Cleaning**","c0b058be":"From the previous 4 density heatmaps we conclude that from the patients who missed the appoint 17% has possitive hypertension disease, 6.5% Diabetes 1.6% Handicap and 3% Alcoholism, which means the hypertension is the disease that makes patients miss the appointment the most followed by Diabetes.","ccdfc566":"when taking a sample we would visualize that gender alone is not a factor for the patient attending or missing the appointment","bdb58a55":"Considering the previous density heatmap we would conclude that Female attend their appointments more usual than Male, but we shouldn't take the previous chart into consideration since it is biased for female because the number of females in the dataset is approximately double the number of males, that is why  we need to take a equal sample of both genders and do the same plot to consider if gender differs in missing or attending to the appointment","d686432c":"**Is the day of the week asscoiated with not showing up?**","41a2d812":"In the previous density heat map we took 3 factors  (SMS, AGE ,GENDER) into consideration to visualize who missed or attended to the appointment","c96bf4fe":"**Is there are relation the time left for the appointment and the patient showing up?**","ccc36459":"**Factors that mostly affect patients attending or missing the appointment**\n\n**Number of Dieases** As it increasing the patient are unlikely to attend to the doctors appointment.\n\n**The neighbourhood** As the number of patients live in the neighbourhood increases they are more likely to attend to the appointment.\n\n**Age** As patients get older they are likely to attend to the doctors appointment.\n\n**Time left** As time left for the next appointment increases the probability the that patients go to it decreases.\n\n---\n**Factors that don't affect patients attending or missing the appointment**\n\n[**Gender**, **SMS Recieved**, **Days of the week**]\n","6a9a4c50":"The percentage of patients that missed the appointment is 28.5%.","fb74c299":"<a id='intro'><\/a>\n## Introduction\n\n>This dataset collects information\nfrom 71.9k medical appointments in\nBrazil and is focused on the question\nof whether or not patients show up\nfor their appointment\n>\n> By using tools and methods which are the factors are important for us to know in order to predict if a patient will show up for their scheduled appointment","eb60b67e":"**Deriving needed data for visualization**","7f8f28b0":"1)Remove all rows with age less than 0 because it doesn't make sense.\n2)Change the datatypes of Scheduled day and Appointment Day to their correct datatypes(datetime) to extract from them days of the   week.\n3)Check for duplicate rows.\n4)Calculate the time between the Scheduled day and Appointment day and use it as a new feature.\n","636b3a72":"It seems that most frequent period the scheduled day and the appointment day is between 0 & 20 days.\n\nAnd almost in all time left periods number of people who attend the appointment are more than people who miss the appointment.","fa3e9750":"Friday is the most day patients missed their appointments \"Only from the percetage of people missed the appointment\"","e942a8ec":"**Is the gender of the patient with not showing up?**","2c424cde":"\n# Project: Investigating The No Show Appointment and knowing its factors\n","c325a9c5":"**Observing how many patients recieved an SMS before the appointment in each neighboorhood and its relationship to missing or attending the appointment**","9aaa4bdb":"From the previous 2 graphs we can see that as the age increases the probability of the patient showing up increases.","b468a396":"we conclude from the previous histogram that the more the number of patients in the neighbourhood the more patients attend to the appointment and the less people Miss the appointment.","3157ca6f":"There are no significant difference for those patients who Attended(Missing=no) to the appointment according to recieving an SMS.\n\nThere is a small difference for those patients who Missed (Missing=Yes) according to recieving an SMS.","e1ad78c0":"**Lets see the percentage of patients attended and missed the appointment**","676e8cef":"We concluded from the pervious treemap that old patients are more likely to attend the appoint according to different neighbourhoods than Adults and young patients, and young and adult patient's attendance rate are approximately equal. ","75368d3c":"**Observing in each neighbourhood which ages are the most dominant**","64f39266":"The number of Patients attented to the  Appointment is more than who missed the appointment almost in all ages.\n\n","be4d1b1f":"**Extracting Address from neighbourhood and find longitude and latitude**","621375c0":"**Which disease makes patients miss the appointment the most?**\n\n","28bc8b99":"In this scatter plot we consider 2 factors (Age, Number of diseases) to visualize who attended or missed the appointment, if the color is yellow then the patient attended if the color is blue then the patient missed the appointment, we can't really take this scatter plot as a tool to consider if patients attend or not to the appointment since there are some overlapping in the data, so we miss some data when visualizing.","16010c4b":"**Observing The behaviour(Missed Or Attended to the Appointment) of patients on the same plot considering the Number of Dieases and Age**","57a43e59":"There are no missing values","1d3772dc":"It seems that as the time period between the Scheduled day and Appointment day increases ,the percentage of the person not showing up increases but it is very subtle.","56e32daa":"The previous density heatmap is biased because the number of people at every age are not equal, so we will split ages in 3 catergories [Young 0 to 20 years][Adult from 20 to 60 years][Elderly from 60 to maximum age in the dataset]","63b238b5":"The most popular neighbourhood is Jardim Camburi and also has the highest amount of patients missed and attended to the appointment.","accd7549":"Gender doesn't affect patient showing up or not because the percentages of females and males showing up are very similar.","89868ff5":"**Does the number of diseases affect the probability of patients showing up?**","facebb9c":"**Is there any relation between the patient's age  and patient showing up?**","a590fdf2":"**Observing the number of diseases patients have in each neighboorhood and its relationship to missing or attending the appointment**","ffa6cabf":"**Is there a realtion between the neighbourhood and the person showing up?**","e4356ec0":"**Observing which days of the week each neighbourhood has the most patients active and how many of them missed and attended to the appointment**\n\n\n","aeedc580":"**Is there a realtion between the recieving an SMS before the appointment and the person showing up?**","bdb61327":"There is no significant difference between the days of the week. ","934174e3":"From the previous two plots we conclude that The highest percentage of patients not showing up is four diseases, and patients that have from 1 to 3 diseases are more likely to attend the appointment more than patients that have no dieases.","88ea532f":"The number of patients in every group are not equal so we need to take a sample from each group"}}