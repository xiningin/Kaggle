{"cell_type":{"46a54d7e":"code","e90abc37":"code","4ed00c6f":"code","d16abdd1":"code","190b3d4b":"code","9fa95ec1":"code","337b01dd":"code","55fa3885":"code","0c5cdc53":"code","0061eb7d":"code","a3c45d28":"code","32c52a55":"code","7193f8b0":"code","afa7d141":"code","b6588b32":"code","35c51fb1":"code","02e4ac9c":"code","db6c271f":"code","686ab82e":"code","55f456ea":"code","2b74c7d0":"code","7bf78b21":"code","222e937b":"code","fa6eb0ac":"code","ce8a35c1":"code","5fdb90b2":"code","9336c18d":"code","d20df4fd":"code","e68f6363":"code","84396d55":"markdown","5fef63ef":"markdown","5e4e0743":"markdown"},"source":{"46a54d7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e90abc37":"data = pd.read_csv('..\/input\/wind-turbine-scada-dataset\/T1.csv')","4ed00c6f":"import matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport seaborn as sns\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d16abdd1":"data.shape","190b3d4b":"data.describe()","9fa95ec1":"data.isnull().sum()","337b01dd":"data = data\nexp = data['LV ActivePower (kW)']\nthe = data['Theoretical_Power_Curve (KWh)']\nplt.figure(figsize=(25,10)) \nplt.plot(data['Wind Speed (m\/s)'], data['LV ActivePower (kW)'], 'o', label='Real Power')\nplt.plot(data['Wind Speed (m\/s)'], data['Theoretical_Power_Curve (KWh)'], '.', label='theoretical_power_curve (kwh)')\nplt.xlabel('wind speed (m\/s)', size=15)\nplt.ylabel('Power Production (kw)', size=15)\nplt.title('Wind Turbine Power Production Prediction')\nplt.legend(fontsize=15)\nplt.show()","55fa3885":"import seaborn as sns\nsns.pairplot(data, markers='*')","0c5cdc53":"\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor","0061eb7d":"def outlier_remover(dat, prop, min, max):\n    d = dat\n    q_low = d[prop].quantile(min)\n    q_hi  = d[prop].quantile(max)\n    return d[(d[prop] < q_hi) & (d[prop] > q_low)]","a3c45d28":"# Create Sub-DataFrames\nd = {}\nstep = 50\ni = 1\nfor x in range(20, 3400, step):\n    d[i] = data.iloc[((data['LV ActivePower (kW)']>=x)&((data['LV ActivePower (kW)']<x+step))).values]\n    #print(d[i])\n    i = i + 1\nprint(\"There are in total of {} DataFrames\".format(i-1))","32c52a55":"d[69] = data.iloc[(data['LV ActivePower (kW)']>=3300).values]","7193f8b0":"# Remove outlier\nfor x in range(1, 70):\n    if x <= 3:\n        F = 0.95\n    elif ((x > 3) and (x <= 10)):\n        F = 0.9\n    elif ((x > 10) and (x <= 20)):\n        F = 0.92\n    elif ((x > 20) and (x < 30)):\n        F = 0.96\n    else:\n        F = 0.985\n    d[x] = outlier_remover(d[x], 'Wind Speed (m\/s)', 0.0001, F)","afa7d141":"df=pd.DataFrame()\nfor infile in range(1,70):\n    data = d[infile]\n    df=df.append(data,ignore_index=True)","b6588b32":"df.shape","35c51fb1":"data = df\nexp = data['LV ActivePower (kW)']\nthe = data['Theoretical_Power_Curve (KWh)']\nplt.figure(figsize=(25,10)) \nplt.plot(data['Wind Speed (m\/s)'], data['LV ActivePower (kW)'], 'o', label='Real Power')\nplt.plot(data['Wind Speed (m\/s)'], data['Theoretical_Power_Curve (KWh)'], '.', label='theoretical_power_curve (kwh)')\nplt.xlabel('wind speed (m\/s)', size=15)\nplt.ylabel('Power Production (kw)', size=15)\nplt.title('Wind Turbine Power Production Prediction')\nplt.legend(fontsize=15)\nplt.show()","02e4ac9c":"import matplotlib.pyplot as plt\ncolumns = ['LV ActivePower (kW)', 'Wind Speed (m\/s)', 'Theoretical_Power_Curve (KWh)', 'Wind Direction (\u00b0)']\ni=1\nplt.figure(figsize=(12,5))\nfor each in columns:\n    plt.subplot(1,4,i)\n    sns.boxplot(data = df, y= each)\n    plt.title(each)\n    i += 1","db6c271f":"ftrain = ['LV ActivePower (kW)', 'Wind Speed (m\/s)', 'Wind Direction (\u00b0)']\n\ndef Definedata():\n    # define dataset\n    data2 = df[ftrain]\n    X = data2.drop(columns=['LV ActivePower (kW)']).values\n    y = data2['LV ActivePower (kW)'].values\n    #lab_enc = preprocessing.LabelEncoder()\n    #y = lab_enc.fit_transform(y0)\n    return X, y","686ab82e":"def Models(models):\n    \n    model = models\n    X, y = Definedata()\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 25)\n    model.fit(X_train,y_train)\n    y_pred_test = model.predict(X_test)\n    y_pred_train = model.predict(X_train)\n    y_total = model.predict(X)\n    \n    print(\"\\t\\tError Table\")\n    print('Mean Absolute Error      : ', metrics.mean_absolute_error(y_test, y_pred_test))\n    print('Mean Squared  Error      : ', metrics.mean_squared_error(y_test, y_pred_test))\n    print('Root Mean Squared  Error : ', np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))\n    print('Accuracy on Traing set   : ', metrics.r2_score(y_train,y_pred_train))\n    print('Accuracy on Testing set  : ', metrics.r2_score(y_test,y_pred_test))\n    return y_total, y\n\ndef Featureimportances(models):\n    model = models\n    model.fit(X_train,y_train)\n    importances = model.feature_importances_\n    features = df_test.columns[:9]\n    imp = pd.DataFrame({'Features': ftest, 'Importance': importances})\n    imp['Sum Importance'] = imp['Importance'].cumsum()\n    imp = imp.sort_values(by = 'Importance')\n    return imp\n\ndef Graph_prediction(y_actual, y_predicted):\n    y = y_actual\n    y_total = y_predicted\n    TP = df['Theoretical_Power_Curve (KWh)']\n    number = len(df['Wind Speed (m\/s)'])\n    aa=[x for x in df['Wind Speed (m\/s)']]\n    plt.figure(figsize=(25,10)) \n    plt.plot(aa, y[:number], 'o', label='Real Power')\n    plt.plot(aa, y_total[:number], 'x', label='Predicted Power')\n    plt.plot(aa, TP[:number], '.', label='theoretical_power_curve (kwh)')\n    \n    plt.xlabel('wind speed (m\/s)', size=15)\n    plt.ylabel('Power Production (kw)', size=15)\n    plt.title('Wind Turbine Power Production Prediction')\n    plt.legend(fontsize=15)\n    plt.show()","55f456ea":"y_predicted, y_actual = Models(KNeighborsRegressor())\nGraph_prediction(y_actual, y_predicted)","2b74c7d0":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nplt.plot(y_actual[0:100], label=\"True\")\nplt.plot(y_predicted[0:100], label=\"Predicted\")\nplt.legend(loc='upper right')\nplt.xlabel(\"data points\")\nplt.ylabel(\"Power generated by system (kW)\")\nplt.show()","7bf78b21":"y_predicted, y_actual = Models(DecisionTreeRegressor())\nGraph_prediction(y_actual, y_predicted)","222e937b":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nplt.plot(y_actual[0:100], label=\"True\")\nplt.plot(y_predicted[0:100], label=\"Predicted\")\nplt.legend(loc='upper right')\nplt.xlabel(\"data points\")\nplt.ylabel(\"Power generated by system (kW)\")\nplt.show()","fa6eb0ac":"y_predicted, y_actual = Models(ExtraTreesRegressor())\nGraph_prediction(y_actual, y_predicted)","ce8a35c1":"# line plot of observed vs predicted\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nplt.plot(y_actual[0:100], label=\"True\")\nplt.plot(y_predicted[0:100], label=\"Predicted\")\nplt.legend(loc='upper right')\nplt.xlabel(\"data points\")\nplt.ylabel(\"Power generated by system (kW)\")\nplt.show()","5fdb90b2":"y_predicted, y_actual = Models(RandomForestRegressor(n_estimators=350,min_samples_split=2,min_samples_leaf=1,max_features='sqrt',max_depth=25))\nGraph_prediction(y_actual, y_predicted)","9336c18d":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nplt.plot(y_actual[0:100], label=\"True\")\nplt.plot(y_predicted[0:100], label=\"Predicted\")\nplt.legend(loc='upper right')\nplt.xlabel(\"Data points\")\nplt.ylabel(\"Power generated by system (kW)\")\nplt.show()","d20df4fd":"y_predicted, y_actual = Models(GradientBoostingRegressor(random_state=21, n_estimators=2000))\nGraph_prediction(y_actual, y_predicted)","e68f6363":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,10))\nplt.plot(y_actual[0:100], label=\"True\")\nplt.plot(y_predicted[0:100], label=\"Predicted\")\nplt.legend(loc='upper right')\nplt.xlabel(\"Data points\")\nplt.ylabel(\"Power generated by system (kW)\")\nplt.show()","84396d55":"Now, create multi-DataFrames ","5fef63ef":"Remove all outliers","5e4e0743":"Re-joint the DataFrames"}}