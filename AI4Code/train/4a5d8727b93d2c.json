{"cell_type":{"77924892":"code","04b655bf":"code","0016a6ca":"code","a23f1a17":"code","d223bc09":"code","fbf35305":"code","24c79b68":"code","9f96cd6d":"code","75197648":"code","4c1d29fd":"code","a2d67560":"code","f1e03e0a":"code","8bf166e1":"code","2c14b20f":"code","510d27c7":"markdown","22f04cf1":"markdown","2b83a433":"markdown","53d946a8":"markdown","2a0ba43f":"markdown","eee8af8f":"markdown","b8a41183":"markdown","25cec07f":"markdown","26dc4d6f":"markdown","d160c649":"markdown","dd013fba":"markdown","fadc7e89":"markdown","3a79ce1a":"markdown"},"source":{"77924892":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04b655bf":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","0016a6ca":"data = pd.read_csv('\/kaggle\/input\/hyundai-used-car-listing\/hyundi.csv')\ndata.head()","a23f1a17":"data.describe()","d223bc09":"fig, axes = plt.subplots(1, 3, figsize=(20, 8))\n\nfig.suptitle('How dist Obj values??', fontsize=30, c='b')\nfor i, var in enumerate(['model', 'transmission', 'fuelType']):\n    sns.countplot(x=var, data=data, ax=axes[i])\n    axes[i].set_title(f'{var}', fontsize=15)\n\nplt.tight_layout()\nplt.show()","fbf35305":"# check the 'model' because layout is broken\nfigure = plt.figure(figsize=(13, 8))\nmodel_top_15 = data['model'].value_counts()[:15]\nplt.barh(model_top_15.index, model_top_15, linewidth=3)\nplt.xticks(fontsize=10)\nplt.title('Top 15 Amount of Each models', fontsize=25)\nplt.show()","24c79b68":"quantitive_col = ['year', 'price', 'mileage', 'tax(\u00a3)', 'mpg', 'engineSize']\nfig, axes = plt.subplots(6, 2, figsize=(20, 10))\n\nfor i, var in enumerate(quantitive_col):\n    sns.histplot(x=var, data=data, ax=axes[i, 0], kde=True)\n    sns.boxplot(x=var, data=data, ax=axes[i, 1])\n    axes[i, 0].set_title(f\"{var}'s hist\", fontsize=20, c='b')\n    axes[i, 1].set_title(f\"{var}'s boxplot\", fontsize=20, c='r')\n\nplt.tight_layout()\nplt.show()","9f96cd6d":"# copy and cut the outliers\ndata_copy = data.copy()\ndata_copy = data_copy.query('price<40000')\ndata_copy = data_copy.query('mileage<120000')\ndata_copy = data_copy[data_copy['tax(\u00a3)'] < 300]\ndata_copy = data_copy.query('10<mpg<200')","75197648":"quantitive_col = ['year', 'price', 'mileage', 'tax(\u00a3)', 'mpg', 'engineSize']\nfig, axes = plt.subplots(6, 2, figsize=(20, 15))\n\nfor i, var in enumerate(quantitive_col):\n    sns.histplot(x=var, data=data_copy, ax=axes[i, 0], kde=True)\n    sns.boxplot(x=var, data=data_copy, ax=axes[i, 1])\n    axes[i, 0].set_title(f\"{var}'s hist\", fontsize=20, c='b')\n    axes[i, 1].set_title(f\"{var}'s boxplot\", fontsize=20, c='r')\n\nplt.tight_layout()\nplt.show()","4c1d29fd":"sns.pairplot(data_copy, kind='reg', diag_kind='kde')\nplt.show()","a2d67560":"corr = data_copy.corr()\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr, annot=True)\nplt.title('Check the num of correlation!', fontsize=30, color='blue')\nplt.show()","f1e03e0a":"X = data_copy.drop('price', axis=1)\nX = pd.get_dummies(X)\ny = data_copy['price']\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=123)","8bf166e1":"model = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint('MSE', mean_squared_error(y_true=y_test, y_pred=y_pred))\nprint('R2', r2_score(y_true=y_test, y_pred=y_pred))","2c14b20f":"X = data_copy.drop(['price'], axis=1)\nX['year'] = np.log(X['year'])\nX['mileage'] = np.log(X['mileage'])\nX = pd.get_dummies(X, drop_first=True)\ny = data_copy['price']\ny = np.log1p(y)\n\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=123)\n\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nprint('MSE', mean_squared_error(y_true=y_test, y_pred=y_pred))\nprint('R2', r2_score(y_true=y_test, y_pred=y_pred))","510d27c7":"<div style=\"background-color: lightyellow; padding:15px\">\n    <h3>OK, we get to know 'mileage and year' is a little strong correlation.<\/h3>\n    <h3> but it's natural for me because the longer we drive, the longer mileage is, haha.<\/h3>\n    <h4>So I think We can remove this year or col when we predict somethin in reg or modeling.<\/h4>\n<\/div>","22f04cf1":"<center><h2> OK, We don't have to fill null <\/h2><\/center>","2b83a433":"### OK! we can use this model! (\u203b but we mustn't forget we reverse the y value! now, y is log scaled.)","53d946a8":"### Check the Correlation!","2a0ba43f":"<h2 style=\"background-color:lightgreen; padding:15px\">Let's move to seek relationships of each cols!!!<\/h2>","eee8af8f":"<div style=\"text-align:center\"><h2 style=\"color:gray\">Try EDA, Visualization and finally try Linear-Reg<\/h2><\/div>","b8a41183":"<h2 style=\"background-color:lightgreen; padding:15px\"> How about the Quantitative variables' Distribution?? <\/h2>","25cec07f":"<div style=\"background-color: lightgreen; padding:8px\">\n    <h1>We try EDA and vizualisations this time<\/h1>\n    <h3>First, we seek each columns then, we seek relation among columns<\/h3>\n<\/div>","26dc4d6f":"<div style=\"background-color: lightyellow; padding:15px\">\n    <h3>OK, we have outliers in some columns!<\/h3>\n    <h3>So, I think we have to some outliers in price ~ mpg's col<\/h3>\n    <ul>\n        <li><h4>In <span style=\"color:red\">price<\/span>, we remove the values over 40,000<\/h4><\/li>\n        <li><h4>In <span style=\"color:blue\">mileage<\/span>, we remove the values over 120,000 <\/h4><\/li>\n        <li><h4>In <span style=\"color:green\">tax<\/span>, we remove the values over 300 <\/h4><\/li>\n        <li><h4>In <span style=\"color:gray\">mpg<\/span>, we remove the values of max<\/h4><\/li>\n    <\/ul>\n<\/div>","d160c649":"<div style=\"background-color: lightyellow; padding:15px\">\n    <h3>Above model doesn't work well<\/h3>\n    <h3>We have to tune the Explanatory variable.<\/h3>\n    <h4>If you have interests, Let's try what you think. My case, I use log scale and change the scaler!!<\/h4>\n<\/div>","dd013fba":"<h1 style=\"background-color:lightgreen; padding:15px\">In addtion try to modeling reg or something<\/h1>","fadc7e89":"<div style=\"background-color: lightyellow; padding:15px\">\n    <h3>transmission, fuelType is mosly Manual, Petrol<\/h3>\n    <h3>So, I think we have to some outliers in price ~ mpg's col<\/h3>\n<\/div>","3a79ce1a":"<div style=\"background-color: lightblue; padding:15px\">\n    <h1 style=\"color:red\">Conclusion<\/h1>\n    <h2>We seek the hyundai data this time. we got to know how each cols distributes and seek the relation, and finally we try to model this dataframe.<\/h2>\n    <h2>This case, we don't have to model and compete the accuracy. So that, I didn't try to use RandomForest or StratifiedKFold etc. If you want to try to get more accuracy or metrics, Let's GO!!<\/h2>\n<\/div>\n<h2 style=\"color:red\">If you like my notebook or try better EDA, Feel Free to upvotes or comment!!<\/h2>\n<h2>Thank you for visiting my notebook and let's try with me!!<h2>"}}