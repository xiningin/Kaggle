{"cell_type":{"0e7c66da":"code","388883e9":"code","8b2a84cf":"code","476e855d":"code","8362af49":"code","69bd41dc":"code","896285aa":"code","cc68dc4e":"code","edb29e8d":"code","15816fa7":"code","2dbf718d":"code","e5745aba":"code","0c368aa9":"code","827e2473":"code","e5dc0785":"code","d9b524bf":"code","99e599c3":"code","fed17199":"code","b1440513":"code","bb86fee6":"code","c3f7a043":"code","ba07cced":"code","392d9f77":"code","5b44f4d7":"code","7dc9faa5":"code","5544c536":"code","63b8f488":"code","9360c5aa":"code","a545d0c0":"code","c40ddd38":"code","531b1c35":"markdown","03ecf23c":"markdown","c84b1c02":"markdown","c1da2ec3":"markdown","e87090e7":"markdown","ae4cda8a":"markdown","98fa6bea":"markdown","d6055411":"markdown","4cb148e5":"markdown","e05ab25c":"markdown","b7a7dba4":"markdown","cfea7ab6":"markdown","d1217f8a":"markdown","3dec82e9":"markdown","598ea41e":"markdown","4a76b99a":"markdown","7d66fdc6":"markdown","b956e2f7":"markdown","8be13679":"markdown","19780b72":"markdown"},"source":{"0e7c66da":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras import models\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop ,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","388883e9":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","8b2a84cf":"print(train.shape)","476e855d":"print(test.shape)","8362af49":"Y_train = train[\"label\"]\n\n# Drop the 'label' column from training set\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\ng = sns.countplot(Y_train)","69bd41dc":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","896285aa":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","cc68dc4e":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","edb29e8d":"# Set the random seed\nrandom_seed = 2\n# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","15816fa7":"print(X_train.shape)\nprint(Y_train.shape)\nprint(X_val.shape)\nprint(Y_val.shape)\n","2dbf718d":"#g = plt.imshow(X_train[10][:,:,0])\nrow = 5\ncol = 5\nf, axarr = plt.subplots(row,col)\nfor i in range(row):\n    for j in range(col):\n        axarr[i,j].imshow(X_train[i+j][:,:,0]) \n","e5745aba":"# Set the CNN model \n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","0c368aa9":"model.summary()","827e2473":"# Define the optimizer\noptimizer = Adam()","e5dc0785":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","d9b524bf":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","99e599c3":"epochs = 35 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 64","fed17199":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","b1440513":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","bb86fee6":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","c3f7a043":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","ba07cced":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","392d9f77":"# Extracts the outputs of the top 12 layers\nlayer_outputs = [layer.output for layer in model.layers[:12]] \nimage_num = 590  #Change it to visualise different images\n# Creates a model that will return these outputs, given the model input\nactivation_model = models.Model(inputs=model.input, outputs=layer_outputs) ","5b44f4d7":"img_tensor = X_train[image_num]\nimg_tensor = np.expand_dims(img_tensor, axis = 0)\nactivations = activation_model.predict(img_tensor)","7dc9faa5":"first_layer_activation = activations[0]\nfor l in layer_outputs:\n    print(l.shape)","5544c536":"g = plt.imshow(X_train[image_num][:,:,0])","63b8f488":"plt.matshow(first_layer_activation[0, :, :, 25], cmap='viridis')","9360c5aa":"layer_names = []\nfor layer in model.layers[:12]:\n    layer_names.append(layer.name) # Names of the layers, so you can have them as part of your plot\n\nimages_per_row = 16\nfor layer_name, layer_activation in zip(layer_names, activations): # Displays the feature maps\n    n_features = layer_activation.shape[-1] # Number of features in the feature map\n    size = layer_activation.shape[1] #The feature map has shape (1, size, size, n_features).\n    n_cols = n_features \/\/ images_per_row # Tiles the activation channels in this matrix\n    display_grid = np.zeros((size * n_cols, images_per_row * size))\n    for col in range(n_cols): # Tiles each filter into a big horizontal grid\n        for row in range(images_per_row):\n            channel_image = layer_activation[0,\n                                             :, :,\n                                             col * images_per_row + row]\n            channel_image -= channel_image.mean() # Post-processes the feature to make it visually palatable\n            channel_image \/= channel_image.std()\n            channel_image *= 64\n            channel_image += 128\n            channel_image = np.clip(channel_image, 0, 255).astype('uint8')\n            display_grid[col * size : (col + 1) * size, # Displays the grid\n                         row * size : (row + 1) * size] = channel_image\n    scale = 1. \/ size\n    plt.figure(figsize=(scale * display_grid.shape[1],\n                        scale * display_grid.shape[0]))\n    plt.title(layer_name)\n    plt.grid(False)\n    plt.imshow(display_grid, aspect='auto', cmap='viridis')","a545d0c0":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","c40ddd38":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist.csv\",index=False)","531b1c35":"## Normalize the Data","03ecf23c":"## Define the data generator including augmentation","c84b1c02":"## Plot the training and validation loss and accuracy","c1da2ec3":"## Set model parameters","e87090e7":"## Reshaping the input to shape 28*28*1","ae4cda8a":"### Some examples","98fa6bea":"## Predict Images ","d6055411":"# CNN Filter Visualisation\n### In this notebook we will use the MNIST dataset and keras to construct a deep learning model based on CNNs and then try to visualise the outputs of all the filters in the model. This will help us to understand how the image is intercepted at each level of our model.","4cb148e5":"## Load Data","e05ab25c":"## Plot the confusion matrix","b7a7dba4":"let's visualise one filter of the first layer","cfea7ab6":"## Training the model","d1217f8a":"## Let's now have look at the miscalssified images","3dec82e9":"## Import Libraries","598ea41e":"## Now it's time to visualise the output for each layer","4a76b99a":"## Visualise Data Distribution","7d66fdc6":"### Now let's visualise all the filters of all the layers!!!!","b956e2f7":"## Convert the true labels to one hot vectors","8be13679":"## Train-Val Split","19780b72":"## Define the CNN Model"}}