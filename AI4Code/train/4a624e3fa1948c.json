{"cell_type":{"2140d043":"code","b10a17d7":"code","cf34e4ec":"code","51a1a15d":"code","fa1f0855":"code","52a8c4f0":"code","167ee6b6":"code","cbfe46bf":"code","38ea575b":"code","16dac82c":"code","ba3e2020":"code","fb9ca505":"code","58384e7e":"code","62ec4ae1":"code","b942f140":"code","1d7e3c6a":"code","f47f57b2":"code","37164213":"code","8f76ec7c":"code","e048df8b":"code","643f31aa":"code","f1a728aa":"code","1cffade6":"code","d105e71b":"code","69b62e9b":"code","82f266ac":"code","e1f4c0ba":"code","1c61e074":"code","937013f7":"code","54762437":"code","3d364cee":"code","bce06d6c":"code","47efd342":"code","c5f2c751":"code","34baeeb9":"code","0ee1aac6":"code","55e0ebea":"code","c2a27672":"markdown","5d599359":"markdown","b5aae489":"markdown","5e679d88":"markdown"},"source":{"2140d043":"!pip install -U dataprep","b10a17d7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom dataprep.eda import plot ,plot_diff, plot_missing,plot_correlation,create_report\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cf34e4ec":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngs = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","51a1a15d":"train_df.head()","fa1f0855":"test_df.head()","52a8c4f0":"train_df.describe()","167ee6b6":"train_df.info()","cbfe46bf":"test_df.info()","38ea575b":"plot(train_df)","16dac82c":"plot_correlation(train_df)","ba3e2020":"pom = train_df.drop(\"Survived\",axis=1,inplace=False)\nplot_diff([pom,test_df])","fb9ca505":"plot_missing(train_df)","58384e7e":"plot_missing(test_df)","62ec4ae1":"train_data_report = create_report(train_df)\n\ntrain_data_report.show()\n\ntrain_data_report.save(filename='train_data_report')","b942f140":"test_data_report = create_report(test_df)\n\ntest_data_report.show()\n\ntest_data_report.save(filename='test_data_report')","1d7e3c6a":"categorical_cols = [cname for cname in train_df.columns if\n                    train_df[cname].dtype == \"object\"]\nnumerical_cols = [cname for cname in train_df.columns if \n                train_df[cname].dtype in ['int64', 'float64']]\n\ncategorical_cols","f47f57b2":"numerical_cols","37164213":"train_df.isnull().sum()","8f76ec7c":"test_df.isnull().sum()","e048df8b":"train_df['title'] = np.NaN\ntest_df['title'] = np.NaN\ntrain_df['cabin_class'] = np.NaN\ntest_df['cabin_class'] = np.NaN\ntrain_df['alone'] = np.NaN\ntest_df['alone'] = np.NaN\n\n\nfor i,row in enumerate(train_df['Name']): \n    train_df['title'][i] = row.split(',')[1].split('.')[0]\n    \nfor i,row in enumerate(test_df['Name']): \n    test_df['title'][i] = row.split(',')[1].split('.')[0]\n    \nfor i,_ in enumerate(train_df['alone']):\n    if train_df['SibSp'][i] + train_df['Parch'][i] == 0: train_df['alone'][i] = 1\n    else: train_df['alone'][i] = 0\n        \nfor i,_ in enumerate(test_df['alone']):\n    if test_df['SibSp'][i] + test_df['Parch'][i] == 0: test_df['alone'][i] = 1\n    else: test_df['alone'][i] = 0\n        \nfor i,row in enumerate(train_df['Cabin']):\n    if str(row) != \"nan\":\n        train_df['cabin_class'][i] =  str(row)[:1]\n    \nfor i,row in enumerate(test_df['Cabin']):\n    if str(row) != \"nan\":\n        test_df['cabin_class'][i] =  str(row)[:1]\n","643f31aa":"train_df.drop('Cabin',axis=1,inplace=True)\ntest_df.drop('Cabin',axis=1,inplace=True)\n\ntrain_df.drop('Name',axis=1,inplace=True)\ntest_df.drop('Name',axis=1,inplace=True)\n\ntrain_df.drop('Ticket',axis=1,inplace=True)\ntest_df.drop('Ticket',axis=1,inplace=True)\n\ntrain_df.drop('PassengerId',axis=1,inplace=True)\ntest_ids = test_df.PassengerId\ntest_df.drop('PassengerId',axis=1,inplace=True)\n\nclasses = train_df.Survived\ntrain_df.drop('Survived',axis=1,inplace=True)\n","f1a728aa":"train_df.head()","1cffade6":"test_df.head()","d105e71b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","69b62e9b":"categorical_cols = [cname for cname in train_df.columns if\n                    train_df[cname].dtype == \"object\"]\nnumerical_cols = [cname for cname in train_df.columns if \n                train_df[cname].dtype in ['int64', 'float64']]","82f266ac":"numerical_cols","e1f4c0ba":"categorical_cols","1c61e074":"numerical_transformer = SimpleImputer(strategy=\"constant\")\n\n\ncategorical_transformer = Pipeline(steps=[\n                                        (\"imputer\",SimpleImputer(strategy=\"constant\")),\n                                        (\"onehot\",OneHotEncoder(handle_unknown=\"ignore\"))])\n\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","937013f7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","54762437":"X_train, X_valid, y_train, y_valid = train_test_split(train_df, classes, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=123)","3d364cee":"lr_model = LogisticRegression(max_iter=1000,random_state=123,C=0.175)\nrf_model = RandomForestClassifier(n_estimators=1000,random_state=123)\nxgb_model = XGBClassifier(n_estimators=1000,random_state=123,learning_rate=0.01)","bce06d6c":"lr_pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', lr_model)\n                     ])\nrf_pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', rf_model)\n                     ])\nxgb_pipe = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', xgb_model)\n                     ])","47efd342":"lr_pipe.fit(X_train,y_train)\nrf_pipe.fit(X_train,y_train)\nxgb_pipe.fit(X_train,y_train)","c5f2c751":"lr_pred = lr_pipe.predict(X_valid)\nrf_pred = rf_pipe.predict(X_valid)\nxgb_pred = xgb_pipe.predict(X_valid)","34baeeb9":"print(f\"Logistic regression accuracy: {accuracy_score(y_valid, lr_pred)}\")\nprint(f\"Random forest accuracy: {accuracy_score(y_valid, rf_pred)}\")\nprint(f\"XGB accuracy: {accuracy_score(y_valid, xgb_pred)}\")","0ee1aac6":"final_predictions = lr_pipe.predict(test_df)\n","55e0ebea":"submission = pd.DataFrame({'PassengerId':test_ids,'Survived':final_predictions})\nsubmission.to_csv('submission.csv',index = False)","c2a27672":"# SIMPLE FEATURE ENGINEERING\n\n# Modified version of @Chris Solomou's (christodoulos - username) version of feature engineering in his notebook","5d599359":"# FINAL NOTE:\n\nThis notebook is intended to be simple, so i used automated eda tools and did very minimum modeling.\nTo increase model score we should test cross validation score, tune hyper parameters, test more models, etc.\n\nHope this notebook helps you!\n\nAnd check out christodoulos from whom i took and modified feature engineering part and logistic regression hp.","b5aae489":"# SIMPLE EDA","5e679d88":"# MODELING"}}