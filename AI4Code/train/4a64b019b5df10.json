{"cell_type":{"d42cb564":"code","eb6c3d6e":"code","4473fd61":"code","bcce45b5":"code","0710cef3":"code","0e1c2959":"code","2287e530":"markdown","b7b6d0b1":"markdown"},"source":{"d42cb564":"!git clone https:\/\/github.com\/anonymousNeurIPS2021submission5254\/SupplementaryMaterial.git","eb6c3d6e":"import numpy as np\nimport pandas as pd\nimport sys\nimport os\nfrom time import time\nimport gc\nimport copy\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm\nfrom sklearn.model_selection import StratifiedKFold\nsys.path.append('\/kaggle\/working\/SupplementaryMaterial')\nfrom MLRNN import MLRNNClassifier","4473fd61":"train = pd.read_feather('\/kaggle\/input\/september-feather\/train_rg')\ntrain_nan_count = pd.read_feather('\/kaggle\/input\/september-feather\/train_rg_min', columns = ['nan_count'])\ntest =  pd.read_feather('\/kaggle\/input\/september-feather\/test_rg')\ntest_nan_count = pd.read_feather('\/kaggle\/input\/september-feather\/test_rg_min', columns = ['nan_count'])\n\nss = pd.read_csv('\/kaggle\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nFEATURES = [feat for feat in train.columns if 'f' in feat]\nTARGET = 'claim'\n\n######################\n#Feature Engineering\n#\n#Rank Gaussed features with row-wise statistics and \n# count of nans per row\n######################\n\n#Adding row wise features\nROW_WISE = ['min','max','std','var','mean']\nfor df in [train, test]:\n    df['min'] = df[FEATURES].min(axis=1)\n    df['max'] = df[FEATURES].max(axis=1)\n    df['std'] = df[FEATURES].std(axis=1)\n    df['var'] = df[FEATURES].var(axis=1)\n    df['mean'] = df[FEATURES].mean(axis=1)\n\n#Adding count all all nas\ntrain['nan_count'] = train_nan_count['nan_count'] \/ 14\ntest['nan_count'] = test_nan_count['nan_count'] \/ 14\n\n#Final Features for nn\nFEATURES = FEATURES + ROW_WISE + ['nan_count']","bcce45b5":"#Getting Parameter list\ncommon_parameters = {\"max_runtime\" : 900, \"width\" : 1024}\n#from https:\/\/www.kaggle.com\/ottpocket\/optuna-muddling?scriptVersionId=75812644\nMLR1_parameters = copy.deepcopy(common_parameters)\nMLR1_parameters[\"depth\"] = 3\nMLR1_parameters[\"learning_rate\"] = 0.0008981541684340913\nMLR1_parameters[\"max_iter\"] = 786","0710cef3":"rep = 20 #number of NN\nselected = 5\narchitectures = [MLR1_parameters]\n\n\npredictions = []\nvalid_performances = []\nfor i, rs in enumerate(range(rep)):\n    start = time()\n    print(f'Network: {i+1} of {rep},', sep=' ')\n    model = MLRNNClassifier(random_state = rs, **MLR1_parameters)\n    predictions.append(model.fit(train[FEATURES].values, train[TARGET].values).predict_proba(test[FEATURES].values)[:,1].astype(np.float16))\n    valid_performances.append(np.max(model.record[\"validation\"]))\n    model.delete_model_weights()\n    del model\n    print(f'Val: {valid_performances[-1] :.4f}, time: {time() - start :.2f}')\nss[TARGET] = np.mean([predictions[index] for index in np.argsort(valid_performances)[-selected:]],axis = 0)\n","0e1c2959":"ss.to_csv('ss.csv', index=False)","2287e530":"# Training\n\nWe pick the best 5 networks from 30 trained networks based on validation performance.\n\nCopied from [the paper's repo](https:\/\/github.com\/anonymousNeurIPS2021submission5254\/SupplementaryMaterial\/blob\/main\/MLR%20NN.ipynb).","b7b6d0b1":"# Data Prep"}}