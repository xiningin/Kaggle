{"cell_type":{"6730f16c":"code","3c772cfe":"code","cdd3e8d5":"code","b3a61bed":"code","38d243db":"code","d92de29e":"code","bc9fcd3d":"code","f061b964":"code","89b1d602":"code","4897e704":"code","e2450146":"code","dfe63be7":"code","aba4a983":"code","fba0ae25":"code","622d2df1":"code","c89a063f":"code","7edc7d0c":"code","6ba7ea76":"code","bfa9efde":"markdown","188fcf33":"markdown","d7a58cb1":"markdown","3c029005":"markdown","45b5cde4":"markdown","e5b7e1e3":"markdown","f772b2e3":"markdown","c746ae04":"markdown","ba9b6298":"markdown","e4f40e74":"markdown","5f7c710d":"markdown"},"source":{"6730f16c":"# Data Manipulation\nimport pandas as pd\nimport numpy as np\n\n# Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Models\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","3c772cfe":"# Read data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv', index_col='id')","cdd3e8d5":"# Predictors & Target\npredictors = train.columns[:-1]\ntarget = train.columns[-1]","b3a61bed":"# Styling\nplt.style.use('ggplot')\nplt.rcParams['axes.titlesize'] = 16\nplt.rcParams['axes.labelsize'] = 12\nplt.rcParams['xtick.labelsize'] = 'large'","38d243db":"# Size\nprint('Train set shape:', train.shape)\nprint('Test set shape:', test.shape)","d92de29e":"# Missing data\nprint('Missing values on the train data:', train.isnull().sum().sum())\nprint('Missing values on the test data:', test.isnull().sum().sum())","bc9fcd3d":"# Duplicated data\nprint('Duplicated rows on the train data:', train.duplicated().sum())\nprint('Duplicated rows on the test data:', test.duplicated().sum())","f061b964":"# Target\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), sharex=True)\nax1.title.set_text('Target Distribution')\nsns.distplot(train[target], ax=ax1)\nsns.boxplot(train[target], orient='h', ax=ax2);","89b1d602":"# Distribution in test set\nplt.figure(figsize=(10, 5))\nplt.title('Distribution of predictors')\nsns.boxplot(data=pd.melt(train[predictors]), x='variable', y='value');","4897e704":"# Distribution curve\nfig, axs = plt.subplots(7, 2, figsize=(12, 12))\nfor ax, pred in zip(axs.flatten(), predictors):\n    sns.distplot(train.loc[:, pred], ax=ax)\nplt.tight_layout()","e2450146":"# Correlation\ncorr = train.corr()\nplt.figure(figsize=(10, 10))\nplt.title('High Correlation - greater\/lower than +\/- 60%')\nsns.heatmap(corr[abs(corr) > 0.6], annot=True, cmap=\"YlGnBu\", square=True, linewidths =.5);","dfe63be7":"# Scatter plot\nfig, axs = plt.subplots(7, 2, figsize=(14, 16))\nfor ax, pred in zip(axs.flatten(), predictors):\n    train.plot.hexbin(x=pred, y=target, gridsize=(80, 20), ax=ax)\nplt.tight_layout()","aba4a983":"# Remove observations with +\/- 1.5 IQR\n# Quantiles & IQR\nq1 = train.quantile(0.25)\nq3 = train.quantile(0.75)\niqr = q3 - q1\n\n# Selection\nmask = (train >= (q1 - 1.5*iqr)) & (train <= q3 + 1.5*iqr)\ntrain = train[mask.apply(all, axis=1)]\n\nprint('Train set without outliers shape:', train.shape)","fba0ae25":"# Split ratio 0.2\nX_train, X_val, y_train, y_val = train_test_split(train[predictors], \n                                                  train[target], \n                                                  test_size = 0.2, \n                                                  random_state=2021)","622d2df1":"# XGB\nmodel = XGBRegressor(objective='reg:squarederror',\n                     booster = \"gbtree\",\n                     eval_metric = \"rmse\",\n                     tree_method = \"gpu_hist\",\n                     n_estimators = 1000,\n                     learning_rate = 0.04,\n                     eta = 0.1,\n                     max_depth = 7,\n                     subsample=0.85,\n                     colsample_bytree = 0.85,\n                     colsample_bylevel = 0.8,\n                     alpha = 0,\n                     random_state = 2021)","c89a063f":"# Fit mode\n%time model.fit(X_train, y_train)","7edc7d0c":"# Test\ny_val_pred = model.predict(X_val)\nprint('Validation Set RMSE:', np.sqrt(mean_squared_error(y_val, y_val_pred)))","6ba7ea76":"# Make predictions\ntest['target'] = model.predict(test[predictors])\n\n# Save\ntest['target'].to_csv('submission.csv')","bfa9efde":"# Tabular Playground Series - Jan 2021\n\n## If you have any suggestions feel free to leave a comment !","188fcf33":"### Link between predictor and target","d7a58cb1":"# Model XGBoost\n\n## Split data","3c029005":"## Define, train and test XGB model","45b5cde4":"# Data Cleaning\n\n## Remove outliers","e5b7e1e3":"## Bivariate Analysis\n\n### Correlation","f772b2e3":"# Exploration","c746ae04":"### Predictors","ba9b6298":"# Submission","e4f40e74":"# Setup","5f7c710d":"## Univariate Analysis\n\n### Target"}}