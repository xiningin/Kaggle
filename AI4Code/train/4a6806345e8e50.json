{"cell_type":{"81ae7885":"code","dc29717d":"code","72399520":"code","9013ab07":"code","983e79dc":"code","59af13b4":"code","892716b8":"code","701d214a":"code","bac35e5e":"code","f3912e94":"code","bbb589a4":"code","6c78a5a7":"code","5152c723":"code","7e9c350a":"code","1eba87dd":"code","d7cb824a":"code","7a5a3563":"code","c33cc96a":"markdown"},"source":{"81ae7885":"#Importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder","dc29717d":"#Loading dataset in dataframes\ngender = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain_df.head()\ntest_df.head()\n\ntrain_df.shape\ntest_df.shape","72399520":"#Gender submission data analysis\ngender.head()\ngender['Survived'].value_counts()\n#266 females and 152 males survived.\n\nax = sns.countplot(x='Survived', data=gender)\nax.bar_label(ax.containers[0])\nplt.show()","9013ab07":"#Train data analysis\ntrain_df.columns","983e79dc":"#Exploring training data\ntrain_df.shape","59af13b4":"train_df.nunique()","892716b8":"train_df['Pclass'].value_counts()\n#1-216,2-184,3-491 More ppl in 3rd class.\ntrain_df['Survived'].value_counts()\n#Survival rate--> 549->dead & 342->Survived","701d214a":"#CHECKING FOR NULL VALUES\ndef cleaning_data(df):\n    df.isnull().sum()\n    #Age,Cabin&embarked columns seems to have null data.\n\n    #Data cleaning\n    #Numerical continuous data -> so used this method\n    df['Age']= df['Age'].replace(np.NaN,df['Age'].mean())\n    df['Age'].isnull().sum()\n\n    #String data\n    df['Embarked'] = train_df['Embarked'].fillna(method='ffill')\n    df['Embarked']\n    \n    #Droping the unwanted columns\n    df.drop(['Cabin','Name','Ticket','SibSp','Parch','Fare'], axis=1, inplace=True)\n    \n    return df\n\ntrain_df = cleaning_data(train_df)\ntest_df = cleaning_data(test_df)\n\n#checking for null values in training data\ntrain_df.head()\ntrain_df.isnull().sum()\n\n#checking for null values in test data\ntest_df.head()\ntest_df.isnull().sum()","bac35e5e":"#Categorical variables\n#LABEL ENCODING\n\ndef labelling(df):\n    labelencoder = LabelEncoder()\n    # Sex\n    df['Sex'] = labelencoder.fit_transform(df['Sex'])\n    \n    # Embarked\n    df['Embarked'] = labelencoder.fit_transform(df['Embarked'])\n    \n    return df\n\ntrain_df = labelling(train_df)\ntest_df = labelling(test_df)\n\ntrain_df.head(),test_df.head()\n","f3912e94":"#DATA VISUALIZATION\n\n#survival plot\nax = sns.countplot(train_df['Survived'], linewidth=0.5, edgecolor=\"black\")\nax.bar_label(ax.containers[0])\nplt.title('Survival plot')\nplt.show()\n#342 people only survived from this tragedy.\n\n#Embarkment plot\nax = sns.countplot(train_df['Embarked'], linewidth=0.5, edgecolor=\"black\")\nax.bar_label(ax.containers[0])\nplt.title('Embarkment plot')\nplt.show()\n#Majority(644) people have boarded the ship from southampton. \n\n#age and survival plot\nsns.swarmplot(x = train_df['Survived'], y = train_df['Age'])\nplt.title('Age vs survival plot')\nplt.show()\n#There is equal survival and deaths in 20-40 age group ","bbb589a4":"#pclass and survival plot\nsns.FacetGrid(train_df, col = 'Pclass', row = 'Survived').map(sns.distplot, 'Age',bins=5)\nplt.show()","6c78a5a7":"#embarkment vs survival plot\nsns.catplot(x=\"Age\", y=\"Embarked\",hue=\"Survived\",row='Pclass',data=train_df,\n            orient=\"h\", height=4, aspect=3, palette=\"Set2\",kind=\"strip\")\nplt.show()\n\n#FINDINGS\n#First class people of age group between 20-50 embarked from Southampton has the high survival rate\n#pclass=1 (First class) people have more survival rate.\n#More deaths is seen in 3rd(lower) class people.","5152c723":"#Correlation\ncorr = train_df.corr()\n#correaltion visualization\nsns.heatmap(corr,annot=True)\nplt.show()\n\n#It seems that pclass & embarkment are positively correlated with survival. Age is negatively correlated with Survival\/","7e9c350a":"#To equalize the data\ntrain_df = train_df.drop('PassengerId',axis=1)\ntrain_df.head() , test_df.head()","1eba87dd":"#DATA MODELLING\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score \n\n\nX_train = train_df.drop('Survived', axis=1)\ny_train = train_df['Survived']\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\n\n\n\n#Decision tree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\ny_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\nacc_decision_tree\n\n# Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log\n\n#KNN\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\nacc_knn\n\n# Support vector machine\nsvc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 2)\nacc_svc\n\n# Random Forest\nrandom_forest = RandomForestClassifier()\nrandom_forest.fit(X_train, y_train)\ny_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest\nprint(y_pred)\n\n","d7cb824a":"models = pd.DataFrame({\n    'Model': ['Random Forest','Decision Tree','Logistic Regression', 'KNN','Support Vector Machines'],\n    'Score': [acc_random_forest,acc_decision_tree,acc_log,acc_knn,acc_svc]})\nmodels.sort_values(by='Score', ascending=False)","7a5a3563":"#SUBMISSION\nsubmission = pd.DataFrame({\"PassengerId\": test_df[\"PassengerId\"],\"Survived\": y_pred})\nsubmission\n#submission.to_csv('.\/submission.csv', index=False)","c33cc96a":"**INTRODUCTION:**\n\nThis notebook is intented for practice and my first submission in kaggle competition. Basic data analysis is done in order to predict the survival rate of passengers."}}