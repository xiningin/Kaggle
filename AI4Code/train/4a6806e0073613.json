{"cell_type":{"a3b1a5ec":"code","a5fdcbc6":"code","c4ce8bad":"code","6efcf2bd":"code","8c3724e2":"code","ae94f6f8":"code","6f886426":"code","f2afe38d":"code","201eb032":"code","c0a4ace7":"code","8c7d7610":"code","3f0ef034":"code","2e9d1d84":"code","f2063b29":"code","3cb3e3b8":"code","53c55bea":"code","87a3d1c4":"code","423643f6":"code","7543fd24":"code","6ce57dc8":"code","63f20957":"code","d4d128ba":"markdown","873a3e5a":"markdown"},"source":{"a3b1a5ec":" # Data preprocessing methods with Pandas\nimport numpy as np\nimport pandas as pd\n\n# reindex , sort_index\nobj = pd.Series([3, 7, 5, 6], index=['d', 'b', 'a', 'c'])\n\nframe = pd.DataFrame(np.arange(9).reshape((3, 3)),\n                     index=['a', 'b', 'c'],\n                     columns=['apple', 'banana', 'carrot'])","a5fdcbc6":"# reindex()\nobj_reindexed = obj.reindex(['a', 'b', 'c', 'd', 'e'])\n# sort_index()\n# axis=0 : Row , axis=1 : Columns\nobj_sorted = obj.sort_index(axis=0, ascending=True)","c4ce8bad":"obj_reindexed","6efcf2bd":"obj_sorted ","8c3724e2":"# pandas slicing is not necessary numbers style, but others(str, .. ) style.\n# pandas label name slicing is included end point.(but, numpy is not included end point)\n# loc , iloc\nframe[frame.banana ==4]","ae94f6f8":"frame.loc['a':'c']","6f886426":"#  vs. frame.loc['a':'c']\nframe.iloc[0:2]","f2afe38d":"from numpy import nan as NA\ndata = pd.Series([1, NA, 3.5, NA, 7])\ndata.dropna()","201eb032":"# drop rows with missing data.\ndata = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA],\n                     [NA, NA, NA], [NA, 6.5, 3.]])\n# drop columns with All missing data.\ncleaned = data.dropna(how='all', axis=1)\ndata","c0a4ace7":"cleaned","8c7d7610":"df = pd.DataFrame(np.random.randn(7, 3))\ndf.iloc[:4, 1] = NA\ndf.iloc[:2, 2] = NA\ndf","3f0ef034":"# drop missing data\ndf.dropna()","2e9d1d84":"df.dropna(thresh=2)","f2063b29":"# fill the missing data with dictionary style\ndf.fillna({1: 7, 2: 4})","3cb3e3b8":"df.fillna(method='bfill') # fill the missing data with before data","53c55bea":"df.fillna(df.mean()) # fill the missing data with the average value","87a3d1c4":"# drop the duplicated value \ndata = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'],\n                     'k2': [1, 1, 2, 3, 3, 4, 4]})\ndata","423643f6":"data.duplicated()","7543fd24":"data.drop_duplicates(['k1','k2'],keep='last') #remain the last value","6ce57dc8":"# replace value with specific value\ndf.replace(np.nan, -999)","63f20957":"# Good Tip! : generator method makes the iterator function to be used yield keyword.  \n\n# Tip1 : for loop with def\ndef value_squared(n=10):\n    for i in range(1, n+1):\n        yield i ** 2\n\ngen = value_squared()\n\nfor x in gen:\n    print(x, end=' \\n')\n\n#Tip2 : gropuby after itertools \nimport itertools\n\nfirst_letter = lambda x: x[0]\nnames = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven']\nfor letter, names in itertools.groupby(names, first_letter):\n    print(letter, list(names)) # names is a generator","d4d128ba":" # Data preprocessing methods with Pandas","873a3e5a":".. continue coding .. and Good luck!"}}