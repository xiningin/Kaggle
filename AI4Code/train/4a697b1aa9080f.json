{"cell_type":{"4672068a":"code","e885c05e":"code","8cca8e20":"code","7bdf4f73":"code","0aef22d4":"code","a1ff3010":"code","85f0f431":"code","4ed180f7":"code","c637662f":"code","6fc3b9e1":"code","c9934752":"code","138c45fa":"markdown"},"source":{"4672068a":"# install \n!pip install pyspark\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pyspark\nfrom pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.classification import GBTClassifier\nfrom pyspark.ml.classification import FMClassifier\nfrom pyspark.ml.classification import RandomForestClassifier\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.linalg import Vectors\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer, VectorIndexer, StringIndexerModel, IndexToString\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.appName(\"AssignmentBigData\").getOrCreate()","e885c05e":"# load data\ntrain = spark.read.format('csv').load('..\/input\/it2034ch1502-car-acceptability-prediction\/train.csv', header='True', inferschema='True')\ntest = spark.read.format('csv').load('..\/input\/it2034ch1502-car-acceptability-prediction\/test.csv', header='True', inferschema='True')\ntrain.show()\n#test.show()","8cca8e20":"labelIndexer = StringIndexer(inputCol=\"acceptability\", outputCol=\"label\")\nbuyIndexer = StringIndexer(inputCol=\"buying_price\", outputCol=\"indexedBuyPrice\")\n\nmaintenanceIndexer = StringIndexer(inputCol=\"maintenance_price\", outputCol=\"indexMaintenance\")\nsafetyIndexer = StringIndexer(inputCol=\"safety\", outputCol=\"indexSafety\")\ntrunkSizeIndexer = StringIndexer(inputCol=\"trunk_size\", outputCol=\"indexTrunkSize\")\nnumberOfDoorIndexer = StringIndexer(inputCol=\"number_of_doors\", outputCol=\"indexNumberOfDoor\")\ncarryCapacityIndexer = StringIndexer(inputCol=\"carry_capacity\", outputCol=\"indexCarryCapacity\")\n\n\nindexedLabelTrain=labelIndexer.fit(train).transform(train)\n#indexedLabelTrain.show(15)","7bdf4f73":"df1 = buyIndexer.fit(indexedLabelTrain).transform(indexedLabelTrain)\ndf1 = maintenanceIndexer.fit(df1).transform(df1)\ndf1 = safetyIndexer.fit(df1).transform(df1)\ndf1 = trunkSizeIndexer.fit(df1).transform(df1)\ndf1 = numberOfDoorIndexer.fit(df1).transform(df1)\ndf1 = carryCapacityIndexer.fit(df1).transform(df1)\n#df1.show(15)\n\n#df2 = buy","0aef22d4":"assembler = VectorAssembler(inputCols=[\"indexedBuyPrice\", \"indexMaintenance\", \"indexSafety\", \"indexTrunkSize\", \"indexNumberOfDoor\", \"indexCarryCapacity\"], outputCol=\"features\")\ndf2 = assembler.transform(df1)\n#df2.show(15)","a1ff3010":"#decission_tree_classifier_model2 = DecisionTreeClassifier(labelCol=\"label\", featuresCol=\"features\", maxDepth=24)\n#decission_tree_classifier_model2.fit(df2).transform(df2)\n\n#fm = FMClassifier(labelCol=\"label\", featuresCol=\"features\", stepSize=0.001)\n#fm.fit(df2).transform(df2).show(15)\n\nrf = RandomForestClassifier(labelCol=\"label\", featuresCol=\"features\", numTrees=64, maxDepth=16)\nrf.fit(df2).transform(df2)\n\n#lr = LogisticRegression(featuresCol=\"features\", labelCol=\"label\", regParam=1.0)\n#lr.fit(df2).transform(df2).show(15)\n\npipeline = Pipeline(stages = [buyIndexer, maintenanceIndexer,safetyIndexer, trunkSizeIndexer, numberOfDoorIndexer, carryCapacityIndexer, assembler, rf,])","85f0f431":"testSolutions = pipeline.fit(indexedLabelTrain).transform(test).select('car_id', 'prediction')\n#testSolutions.show()\n\nlabelsArray = [\"unacc\", \"acc\", \"good\", \"vgood\"]\ntestSolutions = IndexToString(inputCol=\"prediction\", outputCol='acceptability', labels=labelsArray).transform(testSolutions)\n#testSolutions.show()","4ed180f7":"solutions = testSolutions.select('car_id', 'acceptability')\nsolutions.show(200)\nsolutions.toPandas().to_csv(\"dumpsolutions.csv\", header=True, index=False)","c637662f":"\n\n# Train a DecisionTree model.\n#dt = DecisionTreeClassifier(labelCol=\"car_id\", featuresCol=\"output\")\n\n# Chain indexers and tree in a Pipeline\n#pipeline = Pipeline(stages=[labelIndexer, featureIndexer, dt])\n\n# Train model.  This also runs the indexers.\n#model = pipeline.fit(train)\n\n# Make predictions.\n#predictions = model.transform(test)\n\n# Select example rows to display.\n#predictions.select(\"car_id\", \"acceptability\").show(5)","6fc3b9e1":"# solutions = testSolutions.select('car_id', 'acceptability')\n# solutions.show()","c9934752":"# solutions.toPandas().to_csv(\"dumpsolutions.csv\",header=True, index=False)","138c45fa":"# Nh\u00f3m 123\nTh\u00e0nh vi\u00ean: \nNguy\u1ec5n Trung Hi\u1ebfu\nCH1901020"}}