{"cell_type":{"c8d05c8d":"code","b8e9bf13":"code","4b750132":"code","b790dc93":"code","8f30ca74":"code","43d6dc54":"code","f6d0f4ba":"code","4cbced00":"code","7b2a3474":"code","7ec45673":"code","691a9a95":"code","801477b2":"code","a3b8c7d7":"code","578886ec":"code","91964873":"code","b014ae45":"code","00f2dd0a":"code","da337942":"code","2215f8cb":"code","c3140df0":"code","27350659":"code","6287165a":"code","dba817ca":"code","eb7587ac":"code","1e5dd363":"code","83db3b8c":"markdown","6447dbd9":"markdown","604e07fc":"markdown","1b79ec03":"markdown","55fd11fb":"markdown","ce9374bc":"markdown","27b2e6e2":"markdown","0e1f53c7":"markdown"},"source":{"c8d05c8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8e9bf13":"import numpy as np \nimport pandas as pd\nimport pandas\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nimport seaborn as sns; sns.set()\n\nfrom sklearn import tree\nimport graphviz \nimport os\nimport preprocessing \n\nimport numpy as np \nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2, f_classif\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom xgboost import plot_tree, plot_importance\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4b750132":"dataset = pandas.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndataset.sample(10)","b790dc93":"dataset.info()","8f30ca74":"dataset.isnull().sum().sum()","43d6dc54":"dataset.describe().T","f6d0f4ba":"feature = ['blue', 'dual_sim', 'four_g', 'three_g', 'touch_screen', 'wifi']\n\nplt.figure(figsize=(20,10))\ncount = 0\n\nfor i in feature:\n    myexplode = [0.2, 0]\n    \n    colors = ['#66b3ff','#ff9999','#ff9999','#ffcc99']\n    \n    labels = dataset[i].value_counts().index\n    sizes = dataset[i].value_counts().values  \n    \n    plt.subplot(2,3,count+1)\n    plt.pie(sizes, labels=labels, explode = myexplode, shadow = True, startangle=90, colors=colors, autopct='%1.1f%%')\n    plt.title(f'Distribution of {feature[count]}', color = 'black',fontsize = 15)\n    count += 1","4cbced00":"plt.figure(figsize=(20,15))\npalette = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#fbdf70','#ac9fd0','#8b7470']\nsns.set_style('darkgrid')\nplt.subplot(2,2,1)\nsns.violinplot(x = 'price_range', y = 'px_height', data = dataset, palette=palette)\nplt.subplot(2,2,2)\nsns.violinplot(x = 'price_range', y = 'px_width', data = dataset, palette=palette)\nplt.subplot(2,2,3)\nsns.violinplot(x = 'price_range', y = 'sc_h', data = dataset, palette=palette)\nplt.subplot(2,2,4)\nsns.violinplot(x = 'price_range', y = 'sc_w', data = dataset, palette=palette)","7b2a3474":"palette = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#fbdf70','#ac9fd0','#8b7470']","7ec45673":"plt.figure(figsize=(20,15))\nsns.set_style('white')\nplt.subplot(2,2,1)\nsns.distplot(dataset['px_height'], color=\"#ff9999\").set_title('px_height Interval')\nplt.subplot(2,2,2)\nsns.distplot(dataset['px_width'], color=\"#66b3ff\").set_title('px_width Interval')\nplt.subplot(2,2,3)\nsns.distplot(dataset['ram'], color=\"#99ff99\").set_title('ram Interval')\nplt.subplot(2,2,4)\nsns.distplot(dataset['mobile_wt'], color=\"#ffcc99\").set_title('mobile_wt Interval')","691a9a95":"plt.figure(figsize=(20,15))\nsns.set_style('darkgrid')\nplt.subplot(2,2,1)\nsns.boxplot(x = 'price_range', y = 'talk_time', data = dataset, palette=palette)\nplt.subplot(2,2,2)\nsns.boxplot(x = 'price_range', y = 'pc', data = dataset, palette=palette)\nplt.subplot(2,2,3)\nsns.boxplot(x = 'price_range', y = 'n_cores', data = dataset, palette=palette)\nplt.subplot(2,2,4)\nsns.boxplot(x = 'price_range', y = 'm_dep', data = dataset, palette=palette)","801477b2":"import seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n\nplt.figure(figsize=(30,15))\n\nplt.subplot(2,3,1)\nsns.swarmplot(x=\"price_range\", y=\"int_memory\",hue=\"four_g\", data=dataset, palette=palette)\n\nplt.subplot(2,3,2)\nsns.swarmplot(x=\"price_range\", y=\"battery_power\",hue=\"four_g\", data=dataset, palette=palette)\n\nplt.subplot(2,3,3)\nsns.swarmplot(x=\"price_range\", y=\"clock_speed\",hue=\"four_g\", data=dataset, palette=palette)\n\nplt.show()","a3b8c7d7":"sns.set_style('white')\ncounts = dataset['n_cores'].value_counts()\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=counts.index, y=counts.values, palette=palette)\n\nplt.ylabel('Number of Samples')\nplt.xlabel('Core', style = 'normal', size = 24)\n\nplt.xticks(rotation = 45, size = 12)\nplt.yticks(rotation = 45, size = 12)\n\nplt.title('Distribution of Samples by # of Cores',color = 'black',fontsize=15)\nplt.show()","578886ec":"sns.set_style('darkgrid')\nf, ax = plt.subplots(figsize=(20,10))\nsns.despine(f, left=True, bottom=True)\nsns.set_theme(style=\"darkgrid\")\nsns.scatterplot(x=dataset['px_width'], y=dataset['px_height'],\n                hue=dataset['n_cores'], \n                size=\"price_range\",\n                palette='tab20',\n                hue_order=dataset['n_cores'],\n                sizes=(10, 50), \n                linewidth=0,\n                data=dataset)","91964873":"df = dataset\n\ndata = [\n    {\n        'y': df['px_height'],\n        'x': df.px_width,\n        'mode': 'markers',\n        'marker': {\n            'color': df['wifi'],\n            'size': df['n_cores'],\n            'showscale': True,\n            \n        },\n        \"text\" :  df.price_range,\n\n    }\n]\nlayout = go.Layout(barmode='group', hovermode=\"x unified\",\n                   title='Size: n_cores, Color: wifi', showlegend = False, \n                   xaxis=dict(title='px_width',ticklen= 5,zeroline= False),\n                   yaxis=dict(title='px_height',ticklen= 5,zeroline= False))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","b014ae45":"plt.figure(figsize=(12,8)) \nsns.heatmap(dataset.corr(), annot=False, cmap=palette, linewidths = 2)\nplt.show()","00f2dd0a":"columns = list(dataset.columns)\ncolumns.remove('price_range')","da337942":"features = columns\nlabel = ['price_range']\n\nX = dataset[features]\ny = dataset[label]","2215f8cb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.2, random_state=42)\n\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Total # of sample in validation dataset: {len(X_valid)}')\nprint(f'Total # of sample in test dataset: {len(X_test)}')","c3140df0":"sc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","27350659":"cv_results_acc = []\nmodels = {\n    'GaussianNB': GaussianNB(),\n    'BernoulliNB': BernoulliNB(),\n    'LogisticRegression': LogisticRegression(),\n    'RandomForestClassifier': RandomForestClassifier(),\n    'SupportVectorMachine': SVC(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'KNeighborsClassifier': KNeighborsClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n    'Stochastic Gradient Descent':  SGDClassifier(max_iter=5000, random_state=0),\n\n}\n\nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent']\n\ntrainScores = []\nvalidationScores = []\ntestScores = []\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  score = model.score(X_valid, y_valid)\n  #print(f'{m} validation score => {score*100}')\n    \n  print(f'{m}') \n  train_score = model.score(X_train, y_train)\n  print(f'Train score of trained model: {train_score*100}')\n  trainScores.append(train_score*100)\n\n  validation_score = model.score(X_valid, y_valid)\n  print(f'Validation score of trained model: {validation_score*100}')\n  validationScores.append(validation_score*100)\n\n  test_score = model.score(X_test, y_test)\n  print(f'Test score of trained model: {test_score*100}')\n  testScores.append(test_score*100)\n  print(\" \")\n    \n  y_predictions = model.predict(X_test)\n  conf_matrix = confusion_matrix(y_predictions, y_test)\n\n  print(f'Confussion Matrix: \\n{conf_matrix}\\n')\n\n  predictions = model.predict(X_test)\n  cm = confusion_matrix(predictions, y_test)\n\n  \n\n  print(\"\") \n  print(f'Classification Report: \\n{classification_report(predictions, y_test)}\\n')\n  print(\"\")\n   \n  for m in range (1):\n    current = modelNames[m]\n    modelNames.remove(modelNames[m])\n    cv_score = cross_val_score(model, X_train, y_train,scoring=\"accuracy\", cv=10)\n    cv_results_acc.append(cv_score.mean()*100)\n    print(\"Cross Validation Accuracy: %s: %f \" % (current, cv_score.mean()))\n\n  preds = model.predict(X_test)\n  confusion_matr = confusion_matrix(y_test, preds) #normalize = 'true'\n  print(\"############################################################################\")\n  print(\"\")\n  print(\"\")\n  print(\"\")","6287165a":"plt.figure(figsize=(20,10))\nsns.set_style('darkgrid')\nplt.title('Train - Validation - Test Scores of Models', fontweight='bold', size = 24)\n\nbarWidth = 0.25\n \nbars1 = trainScores\nbars2 = validationScores\nbars3 = testScores\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \nplt.bar(r1, bars1, color='blue', width=barWidth, edgecolor='white', label='train', yerr=0.5,ecolor=\"black\",capsize=10)\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='validation', yerr=0.5,ecolor=\"black\",capsize=10, alpha = .50)\nplt.bar(r3, bars3, color='red', width=barWidth, edgecolor='white', label='test', yerr=0.5,ecolor=\"black\",capsize=10, hatch = '-')\n \nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent']\n    \nplt.xlabel('Algorithms', fontweight='bold', size = 24)\nplt.ylabel('Scores', fontweight='bold', size = 24)\nplt.xticks([r + barWidth for r in range(len(bars1))], modelNames, rotation = 75)\n \nplt.legend()\nplt.show()","dba817ca":"for i in range(9):\n    print(f'Accuracy of {modelNames[i]} -----> {testScores[i]}')","eb7587ac":"plt.figure(figsize=(20,10))\nsns.set_style('darkgrid')\nplt.title('CV Scores Means', fontweight='bold', size = 24)\n\nbarWidth = 0.5\n \nbars2 = cv_results_acc\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\n \nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='black',  yerr=0.5,ecolor=\"black\",capsize=10)\n\n\nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent']\n    \nplt.xlabel('Algorithms', fontweight='bold', size = 24)\nplt.ylabel('Scores', fontweight='bold', size = 24)\nplt.xticks([r + barWidth for r in range(len(bars1))], modelNames, rotation = 75)\n \nplt.legend()\nplt.show()","1e5dd363":"for i in range(9):\n    print(f'Accuracy of {modelNames[i]} -----> {cv_results_acc[i]}')","83db3b8c":"# Correlation","6447dbd9":"# Read Datas & Explanation of Features & Information About Datasets","604e07fc":"# Train - Test Split","1b79ec03":"# Models","55fd11fb":"# Conclusion\n\nI made Visualization and Machine Learning on this notebook. If you like my visualization and you want to know how I made them, you can check my other notebooks which are about Seaborn and Plotly libraries. You can see them via this links:\n\n**EDA: Visualization with Plotly for Beginners**\n\n* https:\/\/www.kaggle.com\/barisscal\/eda-visualization-with-plotly-for-beginners\n\n\n**EDA: Visualization with Seaborn**\n\n* https:\/\/www.kaggle.com\/barisscal\/eda-visualization-with-seaborn\n\n\n* If you have questions, please comment them. I will try to explain if you don't understand.\n* If you liked this notebook, please let me know :)\n\nThank you for your time.","ce9374bc":"# Importing the Necessary Libraries","27b2e6e2":"# Mobile Price Classification and Exploratory Data Analysis","0e1f53c7":"# Exploratory Data Analysis"}}