{"cell_type":{"5b68bc23":"code","9bb61d71":"code","67e736ea":"code","4c413245":"code","17a89ed3":"code","5c25523c":"code","e5edd409":"code","a9586927":"code","77429f53":"code","8ed3a511":"code","6f4d9899":"code","bd2f664f":"code","73b643fb":"code","ae24e1d2":"code","5adc509f":"code","d9451c63":"code","36d14b18":"code","a80e00f0":"code","619216cd":"code","8052cffe":"code","76d198db":"code","df4afac8":"code","63fbdb5b":"code","d5630a8c":"code","b8678c4c":"code","f5cd83d0":"code","22353cfe":"code","b6b2239d":"code","f75d4b87":"code","82148a34":"code","c4e1457a":"code","69f887b2":"code","e0828fd3":"code","fad33078":"code","4ffba1dd":"code","a0be0b4b":"code","1355461b":"code","8e937ead":"code","9eb0c4aa":"code","c30cc75a":"code","cd998739":"code","427b5500":"markdown","b38c8e1e":"markdown"},"source":{"5b68bc23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bb61d71":"df = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","67e736ea":"df.head()","4c413245":"df.describe()","17a89ed3":"df['Preferred Foot'].value_counts()","5c25523c":"df.dtypes","e5edd409":"df.columns","a9586927":"def value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value'] = df['Value'].apply(value_to_int)\ndf['Wage'] = df['Wage'].apply(value_to_int)","77429f53":"df.drop(['Unnamed: 0'],axis=1,inplace=True)","8ed3a511":"df.drop(['Photo','Club Logo','Real Face'],axis=1,inplace=True)","6f4d9899":"print(df['Jersey Number'].nunique())\nprint(df['Jersey Number'].value_counts())\ndf['Jersey Number'].hist(bins=10,grid = False)\nprint(max(df['Jersey Number']))","bd2f664f":"missing_height = df[df['Height'].isnull()].index.tolist()\n","73b643fb":"df.drop(df.index[missing_height],inplace=True)","ae24e1d2":"df.drop(['Release Clause'],axis=1,inplace=True)","5adc509f":"pot =df.loc[df['Potential'].idxmax()][1]\novr =df.loc[df['Overall'].idxmax()][1]\ninte =df.loc[df['International Reputation'].idxmax()][1]\nshot =df.loc[df['ShotPower'].idxmax()][1]\nskill =df.loc[df['Skill Moves'].idxmax()][1]\nacc =df.loc[df['Acceleration'].idxmax()][1]\nprint(\"Highest Acceleration \"+acc+\" \"+ str(max(df['Acceleration'])))\nprint(\"Highest Skill Moves \"+skill+\" \"+ str(max(df['Skill Moves'])))\nprint(\"Highest Shot Power \"+shot+\" \"+ str(max(df['ShotPower'])))\nprint(\"Highest Potential \"+pot+\" \"+ str(max(df['Potential'])))\nprint(\"Highest International Reputation \"+inte+\" \"+ str(max(df['International Reputation'])))\nprint(\"Highest Overall \"+ovr+\" \"+str(max(df['Overall'])))","d9451c63":"attr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nprint('BEST IN DIFFERENT ASPECTS :')\nprint('_________________________\\n\\n')\nfor i in attr_cols:\n    print('Best {0} : {1}'.format(i,df.loc[df[i].idxmax()][1]))","36d14b18":"new_df = df[['Overall', 'Potential', 'Skill Moves', 'Position','Height', 'Weight', 'LS', 'ST', 'RS','LW','LF', 'CF', 'RF', 'RW', 'LAM','CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM','RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB','Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys','Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl','Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance','ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots','Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties','Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']]","a80e00f0":"new_df.info()","619216cd":"new_df['Position'].fillna('Unknown',inplace= True)","8052cffe":"new_df.isnull().sum()","76d198db":"sns.pairplot(new_df[[\"Skill Moves\",\"Finishing\",\"FKAccuracy\",\"SprintSpeed\",\"Acceleration\",\"Volleys\",\"Dribbling\",\"Penalties\"]], palette='deep')","df4afac8":"plt.rcParams['figure.figsize'] = (15, 7)\n\nsns.countplot(new_df['Position'],palette=\"deep\")\nplt.title(\"Player's positions distribution\", fontsize = 20)\nplt.tick_params(axis='x', rotation=70)\nplt.show()","63fbdb5b":"plt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df['Overall'], df['Age'], hue = df['Preferred Foot'], palette = 'rocket')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","d5630a8c":"plt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df['Overall'], df['International Reputation'], hue = df['Preferred Foot'], palette = 'rocket')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","b8678c4c":"plt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df['Overall'], df['Value'], hue = df['Preferred Foot'], palette = 'rocket')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","f5cd83d0":"plt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df['Overall'], df['Potential'], hue = df['Preferred Foot'], palette = 'rocket')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","22353cfe":"old =df.loc[df['Age'].idxmax()][1]\nprint(\"Oldest Player is \" + old + \" \"+str(max(df['Age'])) )\n#Oldest Player","b6b2239d":"print(df['Nationality'].nunique())\nprint(df['Nationality'].value_counts())","f75d4b87":"print(df['Club'].nunique())\nprint(df['Club'].value_counts())","82148a34":"df1 = new_df.copy()","c4e1457a":"df1.drop(['Height', 'Weight', 'LS', 'ST', 'RS','LW','LF', 'CF', 'RF', 'RW', 'LAM','CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM','RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'],axis=1,inplace = True)","69f887b2":"#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\ndf1['Simple_Position'] = df1.apply(simple_position,axis = 1)","e0828fd3":"#Split ID as a Target value\ntarget = df1.Overall\ndf2 = df1.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","fad33078":"#Applying Linear Regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))\n","4ffba1dd":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Linear Prediction of Player Rating\")\nplt.show()","a0be0b4b":"#Applying Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))\n\nfrom sklearn.metrics import accuracy_score\nprint(\"accuracy: \"+ str(accuracy_score(y_test,predictions)))","1355461b":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Logistic Regression Prediction of Player Rating\")\nplt.show()","8e937ead":"#Applying Logistic RandomForestClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))\n\nfrom sklearn.metrics import accuracy_score\nprint(\"accuracy: \"+ str(accuracy_score(y_test,predictions)))","9eb0c4aa":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"RandomForestClassifier Prediction of Player Rating\")\nplt.show()","c30cc75a":"#Applying Logistic KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))\n\nfrom sklearn.metrics import accuracy_score\nprint(\"accuracy: \"+ str(accuracy_score(y_test,predictions)))","cd998739":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"KNeighborsClassifier Prediction of Player Rating\")\nplt.show()","427b5500":"df.columns\n","b38c8e1e":"Weird analysis, but there are no 3 digit jersey number"}}