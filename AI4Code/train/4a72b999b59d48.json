{"cell_type":{"470e839b":"code","db347640":"code","5c52fed0":"code","b0e99478":"code","ca5d4458":"code","b5e8f4c4":"code","10b0ad2e":"code","d7aa35e7":"code","dadf2025":"code","3d6d955f":"code","6c643fe4":"code","96a3b1d7":"code","cbcfda6c":"code","f5a6937d":"markdown","9d8b7a92":"markdown","bd5c2682":"markdown","108bb4ac":"markdown"},"source":{"470e839b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import roc_auc_score\nimport warnings\nwarnings.filterwarnings(action='ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, Perceptron\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db347640":"train = pd.read_csv('..\/input\/iba-ml2-mid-project\/train.csv')\ntest = pd.read_csv('..\/input\/iba-ml2-mid-project\/test.csv')","5c52fed0":"train['credit_line_utilization']=train['credit_line_utilization'].apply(lambda x: float(str(x).replace(\",\",\".\")))\ntest['credit_line_utilization']=test['credit_line_utilization'].apply(lambda x: float(str(x).replace(\",\",\".\")))","b0e99478":"features =['age', 'number_dependent_family_members', 'monthly_income',\n       'number_of_credit_lines', 'real_estate_loans',\n       'ratio_debt_payment_to_income', 'credit_line_utilization',\n       'number_of_previous_late_payments_up_to_59_days',\n       'number_of_previous_late_payments_up_to_89_days',\n       'number_of_previous_late_payments_90_days_or_more']","ca5d4458":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    train, train.defaulted_on_loan, test_size=0.2, random_state=44)","b5e8f4c4":"#from sklearn.model_selection import GridSearchCV\n#mlpr = MLPRegressor()\n\n#param_list = {\"hidden_layer_sizes\": [(30,30),(20,20),(10,10,10),(50,40,30,20)], \"activation\": [\"identity\", \"logistic\", \"tanh\", \"relu\"], \"solver\": [\"lbfgs\", \"sgd\", \"adam\"], \"alpha\": [0.00005,0.0005]}\n#gridCV = GridSearchCV(estimator=mlpr, param_grid=param_list)\n#gridCV.fit(X_train, y_train)\n#gridCV.best_params_","10b0ad2e":"clf4 = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n    ('clf', KNeighborsClassifier(n_neighbors=9)) \n])\nclf4.fit(X_train[features], X_train.defaulted_on_loan)\npredict = clf4.predict_proba(X_test[features])\narc = roc_auc_score(X_test.defaulted_on_loan, predict[:,1])\narc","d7aa35e7":"clf1 = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n    ('clf', RandomForestClassifier(n_estimators=400)) \n])\nclf1.fit(X_train[features], X_train.defaulted_on_loan)\npredict = clf1.predict_proba(X_test[features])\narc = roc_auc_score(X_test.defaulted_on_loan, predict[:,1])\narc","dadf2025":"clf2 = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler()),\n    ('clf', LogisticRegression()) \n])\nclf2.fit(X_train[features], X_train.defaulted_on_loan)\npredict = clf2.predict_proba(X_test[features])\narc = roc_auc_score(X_test.defaulted_on_loan, predict[:,1])\narc","3d6d955f":"import xgboost as xgb\nfrom sklearn.datasets import make_classification\nclf3 = xgb.XGBClassifier(n_estimators = 100,max_depth = 3)\nclf3.fit(X_train[features], X_train.defaulted_on_loan)\npredict = clf3.predict_proba(X_test[features])\narc = roc_auc_score(X_test.defaulted_on_loan, predict[:,1])\narc","6c643fe4":"predict= clf3.predict_proba(test[features])\ntest['Predicted']=predict[:,1]","96a3b1d7":"submission = test[['Id','Predicted']]\nsubmission.to_csv('submission_v5.csv', index=False)","cbcfda6c":"submission.head()","f5a6937d":"# KNN Classifier imp","9d8b7a92":"# LogisticRegression imp","bd5c2682":"# XGB imp","108bb4ac":"# RandomForest imp"}}