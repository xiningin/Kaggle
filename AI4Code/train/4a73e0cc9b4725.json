{"cell_type":{"b5b0d0d2":"code","60415f70":"code","63d0cf2e":"code","231970f6":"code","83fd2677":"code","a2e748d1":"code","b861d1cd":"code","f499fdd2":"code","54ccad40":"code","22d13c13":"code","2aa6c53f":"code","e9d9d39f":"markdown","6e2b7fc5":"markdown","051f5960":"markdown","f3e42c34":"markdown","fdccfc75":"markdown","37debb41":"markdown","fc1bbbc9":"markdown","da8a5cc6":"markdown"},"source":{"b5b0d0d2":"# Import packages from numpy, CatBoost, pandas, sklearn\n\nimport numpy as np\nfrom catboost import CatBoostRegressor, FeaturesData, Pool\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error","60415f70":"# Since we're predicting \"SalePrice\", we set it to y_train then drop it\n# from the X_train dataset.\n\ntrain_df = pd.read_csv(\"..\/input\/train.csv\", encoding = 'utf-8')\ntest_df = pd.read_csv(\"..\/input\/test.csv\", encoding = 'utf-8')\n\ny_train = train_df['SalePrice']\n\nX_train = train_df.drop(['SalePrice'], axis=1)\nX_test = test_df","63d0cf2e":"# Function to determine if column in dataframe is string.\ndef is_str(col):\n    for i in col:\n        if pd.isnull(i):\n            continue\n        elif isinstance(i, str):\n            return True\n        else:\n            return False","231970f6":"# Splits the mixed dataframe into categorical and numerical features.\ndef split_features(df):\n    cfc = []\n    nfc = []\n    for column in df:\n        if is_str(df[column]):\n            cfc.append(column)\n        else:\n            nfc.append(column)\n    return df[cfc], df[nfc]","83fd2677":"# Replace all the nan categorical features with the same string \"None\".\n# Replace all the nan numerical features with numpy nanmean.\n\ndef preprocess(cat_features, num_features):\n    cat_features = cat_features.fillna(\"None\")\n    for column in num_features:\n        num_features[column].fillna(np.nanmean(num_features[column]), inplace=True)\n    return cat_features, num_features","a2e748d1":"# Apply the \"split_features\" function on the data.\ncat_tmp_train, num_tmp_train = split_features(X_train)\ncat_tmp_test, num_tmp_test = split_features(X_test)","b861d1cd":"# Now to apply the \"preprocess\" function.\n# Getting a \"SettingWithCopyWarning\" but I usually ignore it.\ncat_features_train, num_features_train = preprocess(cat_tmp_train, num_tmp_train)\ncat_features_test, num_features_test = preprocess(cat_tmp_test, num_tmp_test)","f499fdd2":"train_pool = Pool(\n    data = FeaturesData(num_feature_data = np.array(num_features_train.values, dtype=np.float32), \n                    cat_feature_data = np.array(cat_features_train.values, dtype=object), \n                    num_feature_names = list(num_features_train.columns.values), \n                    cat_feature_names = list(cat_features_train.columns.values)),\n    label =  np.array(y_train, dtype=np.float32)\n)","54ccad40":"test_pool = Pool(\n    data = FeaturesData(num_feature_data = np.array(num_features_test.values, dtype=np.float32), \n                    cat_feature_data = np.array(cat_features_test.values, dtype=object), \n                    num_feature_names = list(num_features_test.columns.values), \n                    cat_feature_names = list(cat_features_test.columns.values))\n)","22d13c13":"model = CatBoostRegressor(iterations=2000, learning_rate=0.05, depth=5)\n# Fit model\nmodel.fit(train_pool)\n# Get predictions\npreds = model.predict(test_pool)","2aa6c53f":"indx = np.array([i for i in range(1461,2920)])\ndf = pd.DataFrame({'Id': indx, 'SalePrice': preds}, columns=['Id', 'SalePrice'])\ndf.to_csv(\"submission.csv\", index=False)","e9d9d39f":"# House Prices Regression Using CatBoost","6e2b7fc5":"CatBoost's \"FeaturesData\" constructor can handle both categorical and numerical features, however the input dtypes are specific (np.float32 for numerical and object for categorical). See the documentation for more data types.","051f5960":"This is my first kernel, I decided to use the house prices dataset using CatBoost from Yandex.\nIf you'd like to know more about using catboost, here is a link to the docs:\nhttps:\/\/tech.yandex.com\/catboost\/doc\/dg\/concepts\/about-docpage\/\n\n","f3e42c34":"# Submission","fdccfc75":"Since it is my first kernel, I would greatly appreciate any feedback. Especially on handling nans in mixed datasets.\nI haven't yet looked into any outliers as my main concern was to make sure CatBoost works for me.\nI may later see if I can improve on the result.\nThanks for taking the time to read my kernel.","37debb41":"# Preprocessing","fc1bbbc9":"# Train & Predict\nNow all we have to do is train the model and predict using \"test_pool\".\nI found that the parameters: **\"iterations=2000, learning_rate=0.05, depth=5\"** give the best results so far.\n","da8a5cc6":"First I decided to split the features dataset into categorical and numerical features.\nThen deal with the nans. \nThis is to avoid errors using catboost's *\"FeaturesData\"* and *\"Pool\"* constructors."}}