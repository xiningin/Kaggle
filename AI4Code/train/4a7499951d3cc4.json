{"cell_type":{"ac443dac":"code","70ff8b34":"code","e90c9dfb":"code","576854cd":"code","eaf02ef5":"code","f1a67cda":"code","99b74fcb":"code","c8e51d92":"code","ed79f768":"code","0db9174a":"code","ff58613c":"code","9eb5bd5e":"code","bcd0061e":"code","4fbcb32d":"code","a7aabd82":"code","d790e84b":"code","f1778251":"code","35f21901":"markdown","b95aa0e2":"markdown","6329eaf6":"markdown","2acddf73":"markdown","203596f7":"markdown","087d9792":"markdown","9dc30ac7":"markdown","aeddd5cf":"markdown","7c4d5693":"markdown","f3401faf":"markdown","030df9ea":"markdown","ff060ece":"markdown","0d2d8216":"markdown","621e1a7e":"markdown"},"source":{"ac443dac":"metrics_dir = '\/kaggle\/input\/metrics'","70ff8b34":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom IPython.core import display as ICD","e90c9dfb":"def load_datasets():\n    datasets = []\n\n    for dirname, _, filenames in os.walk(metrics_dir):\n        splt = dirname.split('\/')[-1].split('-')\n\n        if not dirname.endswith('metrics'):\n            people = int(splt[0])\n            days = int(splt[1])\n\n            dataset = {\n                        'people': people,\n                        'days': days,\n                        'threads': {},\n                    }\n\n            for filename in filenames:\n                if 'csv' in filename:\n                    threads = int(filename.split('.')[0].replace('metrics', ''))\n                    path = os.path.join(dirname, filename)\n\n                    frame = pd.read_csv(path)\n\n                    frame['Days'] = days\n                    frame['Dataset Size'] = people\n                    frame['Concurrent Threads'] = threads\n\n                    thread = {\n                        'path': path,\n                        'df': frame\n                    }\n\n                    dataset['threads'][threads] = thread\n\n            dfs = []\n            for thread, data in dataset['threads'].items():\n                dfs.append(data['df'])\n\n            dataset['df'] = pd.concat(dfs)\n            datasets.append(dataset)\n    return datasets","576854cd":"def process(df):  \n    df.columns = [\"Identifier\", \"Type\", \"Time Elapsed\", \"Category\", \"Description\", 'Dataset Size', 'Concurrent Threads']\n    return df[df['Category'] == 'request'].groupby(\n        [\n            'Dataset Size', \n            'Concurrent Threads', \n            'Type'\n        ]\n    ).agg(\n        **{\n            'Count': ('Time Elapsed', 'count'), \n            'Mean': ('Time Elapsed', 'mean'), \n            'Total': ('Time Elapsed', 'sum'), \n            'Standard Deviation': ('Time Elapsed', 'std') \n        }\n    )","eaf02ef5":"def process2(df):  \n    df.columns = [\"Identifier\", \"Time Elapsed\", \"Category\", \"Description\", 'Days', 'Dataset Size', 'Concurrent Threads']\n    return df[df['Category'] == 'request'].groupby(\n        [\n            'Days', \n            'Dataset Size', \n            'Concurrent Threads'\n        ]\n    ).agg(\n        **{\n            'Count': ('Time Elapsed', 'count'), \n            'Mean': ('Time Elapsed', 'mean'), \n            'Total': ('Time Elapsed', 'sum'), \n            'Standard Deviation': ('Time Elapsed', 'std') \n        }\n    )","f1a67cda":"colormap = {\n    100: '#3A3D3B',\n    200: '#E84F5E',\n    500: '#B3CCBA',\n    750: '#2EACB3',\n    1000: '#F7F0DD'\n}","99b74fcb":"def plot3d(df, title=None, x_label=None, y_label=None, z_label=None):\n    \"\"\"matplotlib.use(\"pgf\")\n    matplotlib.rcParams.update({\n        \"pgf.texsystem\": \"pdflatex\",\n        'font.family': 'serif',\n        'text.usetex': True,\n        'pgf.rcfonts': False,\n    })\"\"\"\n    \n    # thickness of the bars\n    dx, dy = 1, 50\n\n    # prepare 3d axes\n    fig = plt.figure(figsize=(10,6))\n    ax = Axes3D(fig, auto_add_to_figure=False)\n    fig.add_axes(ax)\n\n    # set up positions for the bars \n    xpos = df.Days.ravel()\n    ypos = df['Dataset Size'].ravel()\n\n    # set the ticks in the middle of the bars\n    ax.set_xticks(df.Days.unique())\n    ax.set_yticks(df['Dataset Size'].unique())\n    \n    color=[colormap[size] for size in df['Dataset Size'].ravel()]\n\n    # the bars starts from 0 attitude\n    zpos = np.zeros(len(xpos))\n\n    # the bars' heights\n    dz = df.Mean.ravel()\n    \n    bottom = min(df['Dataset Size'].unique())\n    top = max(df['Dataset Size'].unique())\n\n    # plot \n    ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=color)\n\n    \n    if title is not None:\n        plt.title(title)\n        \n    if x_label is not None:\n        ax.set_xlabel(x_label)\n        \n    if x_label is not None:\n        ax.set_ylabel(y_label)\n        \n    if x_label is not None:\n        ax.set_zlabel(z_label)\n    plt.savefig(title + \".pgf\", bbox_inches='tight')  \n    plt.show()","c8e51d92":"datasets = load_datasets()","ed79f768":"combined = pd.concat([d['df'] for d in datasets])","0db9174a":"groups = sorted(combined.Days.unique())\ndays = {}\nfor group in groups:\n    days[group] = combined[combined['Days'] == group]","ff58613c":"for day, df in days.items():\n    print(f'Days: {day}')\n    ICD.display(process(df.drop('Days', axis=1)))\n    print(process(df.drop('Days', axis=1)).to_latex())","9eb5bd5e":"omega = combined[combined['type'] == 'omega']\n\nthread1 = omega[omega['Concurrent Threads'] == 1]\nthread10 = omega[omega['Concurrent Threads'] == 10]\nthread100 = omega[omega['Concurrent Threads'] == 100]","bcd0061e":"thread1 = process2(thread1.drop('type', axis=1)).reset_index()\n\nthread10 = process2(thread10.drop('type', axis=1)).reset_index()\n\nthread100 = process2(thread100.drop('type', axis=1)).reset_index()","4fbcb32d":"%matplotlib inline\n\nplot3d(thread1, \n   title=\"Mean Request Time (1 Thread)\", \n   x_label='Dataset Simulation Duration (Days)', \n   y_label='Dataset Size (People)', \n   z_label='Mean Request Time (Seconds)')\nplot3d(thread10,\n   title=\"Mean Request Time (10 Threads)\", \n   x_label='Dataset Simulation Duration (Days)', \n   y_label='Dataset Size (People)', \n   z_label='Mean Request Time (Seconds)')\nplot3d(thread100,\n   title=\"Mean Request Time (100 Threads)\", \n   x_label='Dataset Simulation Duration (Days)', \n   y_label='Dataset Size (People)', \n   z_label='Mean Request Time (Seconds)')","a7aabd82":"first = combined[(combined['Days'] == 28) & (combined['Dataset Size'] == 200) & (combined['type'] == 'omega')]\nsecond = combined[(combined['Days'] == 28) & (combined['Dataset Size'] == 500) & (combined['type'] == 'omega')]\nthird = combined[(combined['Days'] == 14) & (combined['Dataset Size'] == 500) & (combined['type'] == 'omega')]\nfourth = combined[(combined['Days'] == 14) & (combined['Dataset Size'] == 200) & (combined['type'] == 'omega')]\n\nmain = pd.concat([first, second, third, fourth])\n\n\nprint(process2(main.drop('type', axis=1)).round(decimals=3).to_latex())","d790e84b":"omega","f1778251":"import seaborn as sns\ng = sns.catplot(x = \"Days\",\n            y = \"value\",\n            hue = \"Concurrent Threads\",\n            data = combined,\n            col = \"Dataset Size\",\n            row = \"type\",\n            row_order=['omega', 'alpha', 'beta'],\n            kind = \"point\")\n\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Experiment Results', fontsize=30)\n[plt.setp(ax.get_xticklabels(), rotation=45) for ax in g.axes.flat]\n# plt.savefig(\"experiment.png\", bbox_inches='tight') \nplt.show()\n# Got it","35f21901":"# Metrics Processor\nProcesses metrics into tables grouped by type and ID with a full statistical description.\n\n## Step 1:\nCompile the list of files into a dictionary of datasets with people, days, and threads metadata","b95aa0e2":"Load the datasets into a list of dictionaries containing dataset metadata and a scoped dataframe of the data within the dataset","6329eaf6":"the combined table, grouped by days","2acddf73":"## Functions","203596f7":"Chunks of combined table to put into paper as LaTeX","087d9792":"Group a dataframe by dataset size, number of concurrent threads, and device type","9dc30ac7":"print each of the grouped-by-days tables","aeddd5cf":"plot days x dataset size x total request time\n\nplot days x dataset size x mean request time\n\nplot days x dataset size x standard deviation of request time","7c4d5693":"group the combined table, reset the index so you can access the index columns, then filter by device type","f3401faf":"Generate a 3D plot on the given x, y, and z axes","030df9ea":"Same as above, but includes input for 'Days'","ff060ece":"## Processing","0d2d8216":"setup variables with a single combined table","621e1a7e":"Load the data"}}