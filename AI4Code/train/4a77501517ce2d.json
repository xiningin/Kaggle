{"cell_type":{"a6080406":"code","6461ed4f":"code","76eba1be":"code","de798c7e":"code","621577c7":"code","9e877442":"code","6e43a73d":"code","e9c3af1e":"code","94fbe841":"code","47753ff1":"code","629a840c":"code","60225575":"code","8e4fd97f":"markdown","b7899dfe":"markdown","86e2c293":"markdown","ff9b5c3b":"markdown","84d6db20":"markdown","74774ead":"markdown","4d5f16e5":"markdown","3a2d9460":"markdown","b4e53951":"markdown","6c530a76":"markdown","61811907":"markdown","17266a34":"markdown","32c80f53":"markdown","59aa1c69":"markdown"},"source":{"a6080406":"import os\nimport joblib\nimport numpy as np\nimport pandas as pd\nimport warnings\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nimport seaborn as sns\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings('ignore')","6461ed4f":"train_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')","76eba1be":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","de798c7e":"print('Missing values in train dataset:', sum(train_df.isnull().sum()))\nprint('Missing values in test dataset:', sum(test_df.isnull().sum()))","621577c7":"print('Missing values per columns in train dataset')\nfor col in train_df.columns:\n    temp_col = train_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')","9e877442":"print('Missing values per columns in test dataset')\nfor col in test_df.columns:\n    temp_col = test_df[col].isnull().sum()\n    print(f'{col}: {temp_col}')","6e43a73d":"train_df.head()","e9c3af1e":"test_df.head()","94fbe841":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\n\ncolumn = 'Pclass'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1.2, 88, 'Features comparison', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-1.2, 87, 'Comparing features distribution between train and test dataset', color='#292929', fontsize=5, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax0_sns.set_xlabel(\"Ticket Class\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(0.46, 1.22))\n\ncolumn = 'Sex'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.legend(prop={'size': 3})\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.barplot(ax=ax1, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax1_sns.set_xlabel('Sex', fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.PercentFormatter())\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\nax1_sns.get_legend().remove()\n\ncolumn = 'Age'\nax3 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3.legend(prop={'size': 3})\nax3.tick_params(axis = \"y\", which = \"both\", left = False)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df['Age'], zorder=2, shade=True)\nax3_sns = sns.kdeplot(ax=ax3, x=test_df['Age'], zorder=2, shade=True)\nax3_sns.set_xlabel('Age', fontsize=5, weight='bold')\nax3_sns.set_ylabel('')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax3_sns.tick_params(labelsize=5)\nax3_sns.get_legend().remove()\n\ncolumn = 'SibSp'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax4 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4.legend(prop={'size': 3})\nax4.tick_params(axis = \"y\", which = \"both\", left = False)\nax4_sns = sns.barplot(ax=ax4, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax4_sns.set_xlabel('Siblings \/ spouse', fontsize=5, weight='bold')\nax4_sns.set_ylabel('')\nax4.yaxis.set_major_formatter(ticker.PercentFormatter())\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax4_sns.tick_params(labelsize=5)\nax4_sns.get_legend().remove()\n\ncolumn = 'Parch'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax5 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax5.spines[s].set_visible(False)\nax5.set_facecolor(background_color)\nax5.legend(prop={'size': 3})\nax5.tick_params(axis = \"y\", which = \"both\", left = False)\nax5_sns = sns.barplot(ax=ax5, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax5_sns.set_xlabel('Parents \/ children', fontsize=5, weight='bold')\nax5_sns.set_ylabel('')\nax5.yaxis.set_major_formatter(ticker.PercentFormatter())\nax5_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax5_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax5_sns.tick_params(labelsize=5)\nax5_sns.get_legend().remove()\n\ncolumn = 'Fare'\nax6 = fig.add_subplot(gs[1, 2])\nfor s in [\"right\", \"top\"]:\n    ax6.spines[s].set_visible(False)\nax6.set_facecolor(background_color)\nax6.legend(prop={'size': 3})\nax6.tick_params(axis = \"y\", which = \"both\", left = False)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df['Fare'], zorder=2, shade=True)\nax6_sns = sns.kdeplot(ax=ax6, x=test_df['Fare'], zorder=2, shade=True)\nax6_sns.set_xlabel('Fare', fontsize=5, weight='bold')\nax6_sns.set_ylabel('')\nax6_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax6_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax6_sns.tick_params(labelsize=5)\nax6_sns.get_legend().remove()\n\ntrain_df[\"Cabin\"] = train_df[\"Cabin\"].fillna(\"No\")\ntrain_df[\"Cabin_code\"] = train_df[\"Cabin\"].str[0]\ntest_df[\"Cabin\"] = test_df[\"Cabin\"].fillna(\"No\")\ntest_df[\"Cabin_code\"] = test_df[\"Cabin\"].str[0]\n\ncolumn = 'Cabin_code'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax7 = fig.add_subplot(gs[2, 0])\nfor s in [\"right\", \"top\"]:\n    ax7.spines[s].set_visible(False)\nax7.set_facecolor(background_color)\nax7.legend(prop={'size': 3})\nax7.tick_params(axis = \"y\", which = \"both\", left = False)\nax7_sns = sns.barplot(ax=ax7, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax7_sns.set_xlabel('Cabin', fontsize=5, weight='bold')\nax7_sns.set_ylabel('')\nax7.yaxis.set_major_formatter(ticker.PercentFormatter())\nax7_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax7_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax7_sns.tick_params(labelsize=5)\nax7_sns.get_legend().remove()\n\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"N\")\ntest_df[\"Embarked\"] = test_df[\"Embarked\"].fillna(\"N\")\n\ncolumn = 'Embarked'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax8 = fig.add_subplot(gs[2, 1])\nfor s in [\"right\", \"top\"]:\n    ax8.spines[s].set_visible(False)\nax8.set_facecolor(background_color)\nax8.legend(prop={'size': 3})\nax8.tick_params(axis = \"y\", which = \"both\", left = False)\nax8_sns = sns.barplot(ax=ax8, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax8_sns.set_xlabel('Port', fontsize=5, weight='bold')\nax8_sns.set_ylabel('')\nax8.yaxis.set_major_formatter(ticker.PercentFormatter())\nax8_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax8_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax8_sns.tick_params(labelsize=5)\nax8_sns.get_legend().remove()\n\nplt.show()","47753ff1":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(6, 1), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\n\ncolumn = 'Name'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train = temp_train.iloc[:5, :]\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test = temp_test.iloc[:5, :]\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-0.5, 50.5, 'Top 5 name comparison', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-0.5, 50, 'Comparing full name, first name and last name between train and test dataset', color='#292929', fontsize=5, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_combine['index'], y=temp_combine[column], zorder=2, hue=temp_combine['source'])\nax0_sns.set_xlabel(\"Full Name\",fontsize=5, weight='bold')\nax0_sns.set_xticklabels(ax0_sns.get_xticklabels(), rotation = 30, ha=\"right\")\nax0_sns.set_ylabel('')\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(0.58, 1.22))\n\ncolumn = 'FirstName'\ntrain_df = pd.concat([train_df, train_df['Name'].str.split(',', expand=True)], axis=1)\ntrain_df = train_df.rename(columns={0:'LastName', 1: 'FirstName'})\ntrain_df['FirstName'] = train_df[\"FirstName\"].str[1:]\ntrain_df['LastName'] = train_df[\"LastName\"].str[0:]\ntest_df = pd.concat([test_df, test_df['Name'].str.split(',', expand=True)], axis=1)\ntest_df = test_df.rename(columns={0:'LastName', 1: 'FirstName'})\ntest_df['FirstName'] = test_df[\"FirstName\"].str[1:]\ntest_df['LastName'] = test_df[\"LastName\"].str[0:]\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train = temp_train.iloc[:5, :]\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test = temp_test.iloc[:5, :]\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.barplot(ax=ax1, x=temp_combine['index'], y=temp_combine[column], zorder=2, hue=temp_combine['source'])\nax1_sns.set_xlabel(\"First Name\",fontsize=5, weight='bold')\nax1_sns.set_xticklabels(ax1_sns.get_xticklabels(), rotation = 30, ha=\"right\")\nax1_sns.set_ylabel('')\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\nax1_sns.get_legend().remove()\n\ncolumn = 'LastName'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train = temp_train.iloc[:5, :]\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test = temp_test.iloc[:5, :]\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\n\nax2 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax2.spines[s].set_visible(False)\nax2.set_facecolor(background_color)\nax2.tick_params(axis = \"y\", which = \"both\", left = False)\nax2_sns = sns.barplot(ax=ax2, x=temp_combine['index'], y=temp_combine[column], zorder=2, hue=temp_combine['source'])\nax2_sns.set_xlabel(\"Last Name\",fontsize=5, weight='bold')\nax2_sns.set_xticklabels(ax2_sns.get_xticklabels(), rotation = 30, ha=\"right\")\nax2_sns.set_ylabel('')\nax2_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax2_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax2_sns.tick_params(labelsize=5)\nax2_sns.get_legend().remove()","629a840c":"train_df['TicketCode'] = train_df['Ticket'].str.extract('(\\D+)')\ntrain_df['TicketCode'] = train_df['TicketCode'].str.replace('[^\\w\\s]','')\ntrain_df['TicketCode'] = train_df['TicketCode'].str.replace(' ','')\ntrain_df['TicketNumber'] = train_df['Ticket'].str.extract('(\\d+)')\ntrain_df['TicketNumber'] = train_df['TicketNumber'].astype(float)\ntrain_df['TicketCode'] = train_df['TicketCode'].fillna('N')\ntrain_df['TicketNumber'] = train_df['TicketNumber'].fillna(0)\ntest_df['TicketCode'] = test_df['Ticket'].str.extract('(\\D+)')\ntest_df['TicketCode'] = test_df['TicketCode'].str.replace('[^\\w\\s]','')\ntest_df['TicketCode'] = test_df['TicketCode'].str.replace(' ','')\ntest_df['TicketNumber'] = test_df['Ticket'].str.extract('(\\d+)')\ntest_df['TicketNumber'] = test_df['TicketNumber'].astype(float)\ntest_df['TicketCode'] = test_df['TicketCode'].fillna('N')\ntest_df['TicketNumber'] = test_df['TicketNumber'].fillna(0)\n\nplt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(6, 1), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\n\ncolumn = 'TicketCode'\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\ntemp_train = temp_train.iloc[:5, :]\ntemp_train['source'] = 'train'\ntemp_test = pd.DataFrame(test_df[column].value_counts()).reset_index(drop=False)\ntemp_test = temp_test.iloc[:5, :]\ntemp_test['source'] = 'test'\ntemp_combine = pd.concat([temp_train, temp_test], axis=0)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-0.5, 103, 'Ticket comparison', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-0.5, 102, 'Comparing ticket number distribution and top 5 ticket code between train and test dataset', color='#292929', fontsize=5, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_combine['index'], y=temp_combine[column]\/1000, zorder=2, hue=temp_combine['source'])\nax0_sns.set_xlabel(\"Ticket Code\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(0.37, 1.22))\n\ncolumn = 'TicketNumber'\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.legend(prop={'size': 3})\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.kdeplot(ax=ax1, x=train_df[column], zorder=2, shade=True)\nax1_sns = sns.kdeplot(ax=ax1, x=test_df[column], zorder=2, shade=True)\nax1_sns.set_xlabel('Ticket Number', fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\nax1_sns.get_legend().remove()\nax1_sns.ticklabel_format(style='sci', axis='both', scilimits=(0,0), useMathText=True)\nax1_sns.yaxis.get_offset_text().set_fontsize(5)\nax1_sns.xaxis.get_offset_text().set_fontsize(5)\n\nplt.show()","60225575":"plt.rcParams['figure.dpi'] = 300\nfig = plt.figure(figsize=(5, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 3)\ngs.update(wspace=0.4, hspace=0.8)\n\nbackground_color = \"#f6f5f5\"\n\ncolumn = 'Survived'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = pd.DataFrame(train_df[column].value_counts()).reset_index(drop=False)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0.tick_params(axis = \"y\", which = \"both\", left = False)\nax0.text(-1, 83, 'Survival Rate', color='black', fontsize=7, ha='left', va='bottom', weight='bold')\nax0.text(-1, 82, 'Survival rate on each individual feature', color='#292929', fontsize=5, ha='left', va='top')\nax0.text(1.18, 73.3, 'for age and fare', color='#292929', fontsize=4, ha='left', va='top')\nax0_sns = sns.barplot(ax=ax0, x=temp_train['index'], y=temp_train[column]\/1000, zorder=2)\nax0_sns.set_xlabel(\"Survived\",fontsize=5, weight='bold')\nax0_sns.set_ylabel('')\nax0.yaxis.set_major_formatter(ticker.PercentFormatter())\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0_sns.tick_params(labelsize=5)\nax0_sns.legend(['Survived', 'Not Survived'], ncol=2, facecolor=background_color, edgecolor=background_color, fontsize=4, bbox_to_anchor=(-0.26, 1.3), loc='upper left')\nleg = ax0_sns.get_legend()\nleg.legendHandles[0].set_color('#eeb977')\nleg.legendHandles[1].set_color('lightgray')\n\ncolumn = 'Pclass'\ncolor_map = ['#eeb977', 'lightgray', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\"]:\n    ax1.spines[s].set_visible(False)\nax1.set_facecolor(background_color)\nax1.tick_params(axis = \"y\", which = \"both\", left = False)\nax1_sns = sns.barplot(ax=ax1, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax1_sns.set_xlabel(\"Ticket Class\",fontsize=5, weight='bold')\nax1_sns.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.PercentFormatter())\nax1_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax1_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax1_sns.tick_params(labelsize=5)\n\ncolumn = 'Sex'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax2 = fig.add_subplot(gs[0, 2])\nfor s in [\"right\", \"top\"]:\n    ax2.spines[s].set_visible(False)\nax2.set_facecolor(background_color)\nax2.tick_params(axis = \"y\", which = \"both\", left = False)\nax2_sns = sns.barplot(ax=ax2, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax2_sns.set_xlabel(\"Sex\",fontsize=5, weight='bold')\nax2_sns.set_ylabel('')\nax2.yaxis.set_major_formatter(ticker.PercentFormatter())\nax2_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax2_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax2_sns.tick_params(labelsize=5)\n\ncolumn = 'Age'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax3 = fig.add_subplot(gs[1, 0])\nfor s in [\"right\", \"top\"]:\n    ax3.spines[s].set_visible(False)\nax3.set_facecolor(background_color)\nax3.tick_params(axis = \"y\", which = \"both\", left = False)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==1]['Age'], zorder=2, shade=True)\nax3_sns = sns.kdeplot(ax=ax3, x=train_df[train_df['Survived']==0]['Age'], zorder=2, shade=True)\nax3_sns.set_xlabel(\"Age\",fontsize=5, weight='bold')\nax3_sns.set_ylabel('')\nax3_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax3_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax3_sns.tick_params(labelsize=5)\n\ncolumn = 'SibSp'\ncolor_map = ['lightgray' for _ in range(7)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax4 = fig.add_subplot(gs[1, 1])\nfor s in [\"right\", \"top\"]:\n    ax4.spines[s].set_visible(False)\nax4.set_facecolor(background_color)\nax4.tick_params(axis = \"y\", which = \"both\", left = False)\nax4_sns = sns.barplot(ax=ax4, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax4_sns.set_xlabel(\"Siblings \/ spouses\",fontsize=5, weight='bold')\nax4_sns.set_ylabel('')\nax4.yaxis.set_major_formatter(ticker.PercentFormatter())\nax4_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax4_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax4_sns.tick_params(labelsize=5)\n\ncolumn = 'Parch'\ncolor_map = ['lightgray' for _ in range(8)]\ncolor_map[0] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax5 = fig.add_subplot(gs[1, 2])\nfor s in [\"right\", \"top\"]:\n    ax5.spines[s].set_visible(False)\nax5.set_facecolor(background_color)\nax5.tick_params(axis = \"y\", which = \"both\", left = False)\nax5_sns = sns.barplot(ax=ax5, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax5_sns.set_xlabel(\"Parents \/ children\",fontsize=5, weight='bold')\nax5_sns.set_ylabel('')\nax5.yaxis.set_major_formatter(ticker.PercentFormatter())\nax5_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax5_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax5_sns.tick_params(labelsize=5)\n\ncolumn = 'Fare'\ncolor_map = ['#eeb977', 'lightgray']\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax6 = fig.add_subplot(gs[2, 0])\nfor s in [\"right\", \"top\"]:\n    ax6.spines[s].set_visible(False)\nax6.set_facecolor(background_color)\nax6.tick_params(axis = \"y\", which = \"both\", left = False)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==1]['Fare'], zorder=2, shade=True)\nax6_sns = sns.kdeplot(ax=ax6, x=train_df[train_df['Survived']==0]['Fare'], zorder=2, shade=True)\nax6_sns.set_xlabel(\"Fare\",fontsize=5, weight='bold')\nax6_sns.set_ylabel('')\nax6_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax6_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax6_sns.tick_params(labelsize=5)\n\ncolumn = 'Cabin_code'\ncolor_map = ['lightgray' for _ in range(9)]\ncolor_map[7] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax7 = fig.add_subplot(gs[2, 1])\nfor s in [\"right\", \"top\"]:\n    ax7.spines[s].set_visible(False)\nax7.set_facecolor(background_color)\nax7.tick_params(axis = \"y\", which = \"both\", left = False)\nax7_sns = sns.barplot(ax=ax7, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax7_sns.set_xlabel(\"Cabin\",fontsize=5, weight='bold')\nax7_sns.set_ylabel('')\nax7.yaxis.set_major_formatter(ticker.PercentFormatter())\nax7_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax7_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax7_sns.tick_params(labelsize=5)\n\ncolumn = 'Embarked'\ncolor_map = ['lightgray' for _ in range(4)]\ncolor_map[3] = '#eeb977'\nsns.set_palette(sns.color_palette(color_map))\ntemp_train = train_df.groupby(column)['Survived'].sum()\nax8 = fig.add_subplot(gs[2, 2])\nfor s in [\"right\", \"top\"]:\n    ax8.spines[s].set_visible(False)\nax8.set_facecolor(background_color)\nax8.tick_params(axis = \"y\", which = \"both\", left = False)\nax8_sns = sns.barplot(ax=ax8, x=temp_train.index, y=temp_train\/1000, zorder=2)\nax8_sns.set_xlabel(\"Port\",fontsize=5, weight='bold')\nax8_sns.set_ylabel('')\nax8.yaxis.set_major_formatter(ticker.PercentFormatter())\nax8_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE')\nax8_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax8_sns.tick_params(labelsize=5)","8e4fd97f":"[back to top](#table-of-contents)\n<a id=\"4\"><\/a>\n# 4. Survival Rate\n\n[back to top](#table-of-contents)\n<a id=\"4.1\"><\/a>\n## 4.1. Calculation method\n\nThere are 2 calculation method to calculate survival rate:\n* a. By dividing survived passengers in each category with total observations which is `100,000` which is used in this notebook\n* b. There is another way to calculate the `survival rate` by dividing the survived passengers with its own category observations. \n\n**For example:**\n\nThere is 3 classes for `ticket class`, total passenger with `class 1` is `30,315` and the survived passengers is `17,576`. Based on the notes above, the `survival rate` will be:\n* Calculation a will have a survival rate of  17,576 \/ 100,000 = 17,6%, this calculation is used in this notebook.\n* Calculation b will have a survival rate of  17,576 \/ 30,315 = 58%\n\n[back to top](#table-of-contents)\n<a id=\"4.2\"><\/a>\n## 4.2. Feature survival rate","b7899dfe":"* **Full Name**\n    * Top 5 `full name` between `train` and `test` are different, top `full name` for `train` is `Johnson, John` while for `test` is `Smith, James`.\n    * `Johnson, William` and `Smith, Michael` are not part of top 5 `names` in `test` dataset but the `full name` are present in the `test` dataset. \n    * `Full name` that are not part of top 5 `train` dataset but are part of `test` dataset are `Smith, Robert` and `Smith, William` but these `full name` are present in the `train` dataset.\n    * Passengers that has same `full name` can be considered to be very small.\n    \n* **First Name**\n    * Top 5 `first name` are same between `train` and `test` dataset, they are `James`, `John`, `Robert`, `Michael` and `William`.\n    * Total numbers of top 5 passengers `first name` in `test` dataset are higher compared to `train` dataset.\n    * Passangers that has same `first name` are between than 1,000 - 2,500.\n\n* **Last Name**\n    * Top 5 `last name` are same between `train` and `test` dataset, they are `Smith`, `Johnson`, `Williams`, `Jones` and `Brown`.\n    * Total numbers of top 5 passengers `last name` in `test` dataset are about the same to `train` dataset.\n    * Passangers that has same `last name` are between than 500 - 1,500.","86e2c293":"[back to top](#table-of-contents)\n<a id=\"3\"><\/a>\n# 3. Features","ff9b5c3b":"* **Survived**\n\n    * There are `57,226` of Synthanic passengers `not survived` and `42,774` `survived` the accident, converted to `survival rate` of `57.2%` for `not survived` and `42.8%` for `survived`.\n\n* **Pclass**\n\n    * Ticket `class 1` has the highest chance to survived with `survival rate` at `17.6%` followed by `class 2` with `15%` and `class 3` with `10.1%`.\n    * Higher ticket class has a higher chance to survived, this may be a result of lifeboat priority based on ticket class.\n\n* **Sex**\n    * `Female` has higher chance to survived at `31.2%` compared to male, this may also be the result of lifeboat priority for female than male.\n    * `Male` has `survival rate` at `11.5%` which is a far below `Female`.\n    \n* **Age**    \n    * Passengers with age `15-40` have a lower chance to `survived` while older passengers at age `40 and above` have a higher probability to `survived`, this may also due to lifeboat priority for older people.\n\n* **SibSp**    \n    * Most of the passengers in Synthanic are travel alone, this make the `survival rate` for passengers without `siblings \/ spouses` higher than passengers with `siblings \/ spouses`.\n    * `Survival rate` for passengers without `siblings \/ spouses` are more than `30%`.\n    \n* **Parch**\n    *  As stated earlier, that most of the passengers in Synthanic are travel alone, this also make the `survival rate` for passenger that travel without `parents \/ children` are higher.\n    * `Survival rate` for passengers that travel without `parents \/ children` is almost `30%` which is almost the same with the `survival rate` for passenger that travel without `siblings \/ spouses`.\n    \n* **Fare**\n    * Consistent with `ticket class`, passengers with lower `fare` have a lower chance to `survived`. \n    * It's expected that passengers that buy a low `fare` get a lower `ticket class` but further analysis will be needed to explore more.\n\n* **Cabin**\n    * There are many missing values in the `cabin` number which it hard to make an analysis on the `survival rate`.\n    * Passengers with unknown `cabin` (`N`) has the highest `survival rate` which is above `20%` compared to others.\n    * Passengers with cabin `C` has the second highest `survival rate` that is above `5%`.\n    \n* **Embarked**\n    * Passengers that embarked from `Southampton` have the highest chance to survived which is above `20%`.\n    * The second highest `survival rate` are passengers that embarked from `Cherbourg` with `15%` `survival rate`. ","84d6db20":"# Table of Contents\n<a id=\"table-of-contents\"><\/a>\n* [1. Introduction](#1)\n* [2. General](#2)\n    * [2.1. Numbers of rows and columns](#2.1)\n    * [2.2. Numbers of missing values](#2.2)\n    * [2.3. First 5 rows](#2.3)\n* [3. Features](#3)\n    * [3.1 Features description](#3.1)\n    * [3.1 Features comparison](#3.2)\n* [4. Survival Rate](#4)\n    * [4.1 Calculation method](#4.1)\n    * [4.2 Feature survival rate](#4.2)","74774ead":"**First 5 rows in the test dataset**","4d5f16e5":"* **Ticket**\n\n    * `Ticket` feature is separated to 2 new features: `Ticket Code` and `Ticket Number`:\n        * Non-numeric will be categorize as `Ticket Code` while numeric will be categorize as `Ticket Number`.\n        * As some `Ticket` don't have non-numeric value or numeric value, it will create a missing value. Missing value will be categorize as `N` for `Ticket Code` and `0` for `Ticket Number`.\n        * Any puncutation will be delete to clean up the data.\n        \n* **Ticket Code**\n    * More than 60% of the `Ticket` don't have the non-numeric information as seen by higher `N` category.\n    * There is non-imbalance data between `train` and `test` dataset for `PC` category.\n    * Others categories contributed lower than 20%.\n    *  `STONO`are not part of top 5`Ticket Code` in `test` dataset but are present in the `test` dataset. \n    * `Ticket Code` that is not part of top 5 `train` dataset but are part of `test` dataset is `SCPARIS` but this `Ticket Code` is present in the `train` dataset.\n    \n* **Ticket Number**    \n    * There are `5,296` `Ticket` in `train` dataset don't have numeric numbers while in `test` dataset there are `5,817` ticket doesn't have numeric. They will be categorize as missing value replaced by `0`\n    * `Ticket Number` distribution between `train` and `test` dataset are resembling each others.","3a2d9460":"[back to top](#table-of-contents)\n<a id=\"3.1\"><\/a>\n## 3.1. Features descriptions\n\nThe data contains the following information:\n* **Pclass** - a proxy for socio-economic status (SES) where 1st = Upper, 2nd = Middle and 3rd = Lower. \n* **Sex** - male and female.\n* **Age** - fractional if it less than 1 and age estimation in the form of xx.5.\n* **SibSp** - number of siblings \/ spouses aboard the Synthanic; siblings are brother, sister, stepbrother and stepsister and spouses are husband and wife (mistresses and fianc\u00e9s were ignored).\n* **Parch** - # of parents \/ children aboard the Synthanic; parents are mother and father; child are daughter, son, stepdaughter and stepson. Some children travelled only with a nanny, therefore **Parch** is 0 for them.\n* **Fare** - the paassenger fare.\n* **Cabin** - the cabin number. \n* **Emarked** - port of embarkation where C is Cherbourg, Q is Queenstown and S is Southampton.\n* **Ticket** - ticket number.\n* **Name** - passengers name.\n* **Survived** - target variable where 0 is not survived and 1 is survived.\n\n[back to top](#table-of-contents)\n<a id=\"3.2\"><\/a>\n## 3.2. Features comparison\nThis section will try to explore and compare features in the `train` and `test` dataset. It should be noted that some features are not the same between `train` and `test` dataset as can be seen more detail on each sub-sections.","b4e53951":"[back to top](#table-of-contents)\n<a id=\"2.1\"><\/a>\n## 2.1. Numbers of rows and columns","6c530a76":"* **Pclass**\n    * Proportions between each classes are different in the `train` and `test`:\n        * `Class 3` in `train` dataset contributes `40%` while in `test` dataset, it has a contribution above `60%`.\n        * `Class 2` is at a very low of `10%` in `test` dataset while in `train` dataset, it contributes around `30%`.\n        * `Class 1` in the `train` and `test` dataset are quite the same but it is higher in the train dataset.\n\n* **Sex**\n    * Proportions between each classes are different in the `train` and `test`: \n    * `female` contributed more than `40%` in `train` dataset while in `test` dataset `female` only contributed `30%` of total dataset.\n    * `male` contributed more than `50%` in the `train` and `test` dataset. \n\n* **Age**\n    * Distribution between `train` and `test` dataset are different especially on range of `15-40`. \n    * There are missing value in the `train` and `test` dataset, they are `3,292` and `3,487`, respectively.\n\n* **SibSp**\n    * Number of siblings \/ spouses can be categorize into `7 categories`, this feature can be treated as a continuous or categorical and see how the model performed.\n    * There is `10%` differences on passenger that travel with 1 sibbling \/ spose between `train` and `test` dataset.\n    * The highest \/ maximum number of sibblings \/ spouses that is going aboard with the passengers is `8 people` and the lowest is traveling without any sibblings \/ spouses. \n    * Most of Synthanic passenger don't travel with their sibblings \/ sposes.\n\n* **Parch**\n    * Number of parents \/ children can be categorize into `8 categories`, this feature can also be treated as a continuous or categorical.\n    * The highest number of parents \/ children is `8 people` and the lowest is 0 meaning the passengers is traveling without their parents \/ childrens. \n    * This features strenghten the idea that most of the Synthanic passengers are traveling alone.\n\n* **Fare**\n    * `Fare` distribution between `train` and `test` dataset are quite resemble each other, though it's not perfect especially in the lower fare.\n    * The `highest` fare in `train` dataset is `744.66` while in `test` dataset is `680.7`.\n    * The `lowest` fare in `test` dataset is `0.05` and `0.68` in the `train` dataset.\n    * The `average` fare is `43.9` in `train` dataset and `45.4` in `test` dataset, not a far gap between them.\n    * Missing value in this feature are `134` in `train` dataset and `133` in `test` dataset.\n\n* **Cabin**\n    * `Cabin` numbers can extracted by taking the first letter in the feature. \n    * Be aware that this feature has the highest number of missing value of `67,866` in `train` dataset and `70,831` in `test` dataset, meaaning it's almost `70%` of the information are missing. A new `cabin` category `N` is created to address passengers without cabin number.\n    * `Cabin` can be categorize into `9 categories`, this feature can be treated as a continuous or categorical and see how the model performed.\n     * There is quite a distinct imbalance data between `train` and `test` dataset in cabin `C`.\n\n* **Embarked**\n    * A new `embarked` category `N` is created to address passengers without port of Embarkation.\n    * Most of Synthanic passengers are embarked from `Southampton` which contributes almost `70%` of the passengers.\n    * There are `205` missing values in `train` dataset and `277` missing values in the `test` dataset.","61811907":"[back to top](#table-of-contents)\n<a id=\"2\"><\/a>\n# 2. General\n\n**Observations:**\n* `train` and `test` dataset have a same `100,000` rows.\n* There is `76,165` missing values in the `train` and `79,909` missing values in `test` dataset. \n* Features that have missing values are `Age`, `Ticket`, `Fare`, `Cabin` and `Embarked`. \n* Most of the missing value come from `Cabin` feature, which contributed almost 90% of missing values both in`train` and `test` dataset. \n* In a row wise, it contributes around `70%` of the data. Missing values need to be treated carefully.","17266a34":"[back to top](#table-of-contents)\n<a id=\"2.2\"><\/a>\n## 2.2. Numbers of missing values","32c80f53":"[back to top](#table-of-contents)\n<a id=\"2.3\"><\/a>\n## 2.3. First 5 rows\n\n**First 5 rows in the train dataset**","59aa1c69":"[back to top](#table-of-contents)\n<a id=\"1\"><\/a>\n# 1. Introduction\n\nKaggle competitions are incredibly fun and rewarding, but they can also be intimidating for people who are relatively new in their data science journey. In the past, Kaggle have launched many Playground competitions that are more approachable than Featured competition, and thus more beginner-friendly.\n\nThe goal of these competitions is to provide a fun, but less challenging, tabular dataset. These competitions will be great for people looking for something in between the Titanic Getting Started competition and a Featured competition.\n\nThe dataset is used for this competition is synthetic but based on a real dataset (in this case, the actual Titanic data!) and generated using a CTGAN. The statistical properties of this dataset are very similar to the original Titanic dataset, but there's no way to \"cheat\" by using public labels for predictions."}}