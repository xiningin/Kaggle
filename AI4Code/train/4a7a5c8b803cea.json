{"cell_type":{"0dc514b9":"code","8c38be0f":"code","7231fa38":"code","34ef9014":"code","e61cfea0":"code","89384781":"code","00211323":"code","a45e0d96":"code","dba1713b":"code","c9fc8af7":"code","45a34e4a":"code","18bd84db":"code","0bf32c16":"code","25e6525a":"code","aaced6bf":"code","c8b42c61":"code","554ce9cc":"code","6a0aab51":"code","543a3998":"code","ff19b4c5":"code","cb0077a0":"code","e85c6c75":"code","f056704a":"code","23fa4c18":"code","091c572d":"code","12ec148e":"code","d298db41":"code","5d259c24":"code","5f1e57ca":"code","78d36f7f":"code","ac239cd0":"code","e9e65208":"code","ca07b96a":"code","e247a92d":"code","a6750396":"code","ed1462aa":"code","9dad1772":"code","dfa34239":"code","17b5375d":"code","2242f0bc":"code","dbac4b0f":"code","fe27453c":"code","6a262761":"code","59fbd5fd":"code","ba284eeb":"code","52a82b35":"code","e33ffa38":"code","b332725d":"code","21ded9eb":"code","05666385":"code","15cea229":"code","d47c676d":"code","1b82fa57":"code","b74a4aa4":"code","47eab55f":"code","988a0b20":"code","50025efb":"code","5231b428":"code","bf6933ff":"code","4ec69b53":"code","1ab7ccdb":"code","b54157af":"code","93a4b309":"code","f5be2c95":"code","111d4ea1":"code","a00e71e2":"code","019b3427":"code","dd539502":"code","d5ef605e":"code","1775acab":"code","57333612":"code","666ba358":"code","76a74501":"code","89226408":"code","5d0fc98d":"code","3e1d8bc3":"code","52b26482":"code","70e2d547":"code","4a5981da":"code","da48b03d":"code","a61adc57":"code","57392fb2":"code","450c3b81":"code","fcb0e5a9":"code","982bfcfe":"code","4826b548":"code","add94943":"code","f643f22f":"code","11b9c8ec":"code","55e35a63":"code","275a24bc":"code","db412e22":"code","b5a3221c":"code","6c8ffff8":"code","34d254d8":"code","c3165ea5":"code","36e5ff7d":"code","e94a44df":"code","21fc29d1":"code","e5c1756c":"code","0bf58ab4":"code","677da0c3":"code","21cc8068":"code","4a1fcc50":"code","650afc72":"code","266b9446":"code","c42d38db":"code","52617f45":"code","72830fd4":"code","174a3c3c":"code","0802e400":"code","ec5b286b":"code","f46a327a":"code","409c60d2":"code","79e105c9":"code","ba861bc7":"code","c6767b8e":"code","f352ab3c":"code","7f7face1":"code","6a15d6d9":"code","57cb2ab9":"code","7d1f2896":"code","bede582e":"code","1efaecbd":"code","8bfbb64d":"code","bf4f99ca":"code","40658bad":"code","dc3326f7":"code","bb16e544":"code","da4cfa78":"code","15f529da":"code","09ea8e2e":"code","ab20a90e":"code","1d612d66":"code","b233947d":"code","18a5f361":"code","ad3ad0eb":"code","f17f3a77":"code","b8dae9cb":"code","17281763":"code","6e9ebdb3":"code","ab1224bc":"code","6e55e97a":"code","db5025f4":"code","95cb7dc6":"code","48803b73":"code","5622c078":"code","baed5122":"code","830adb4d":"code","f3904cf9":"code","c893ff5d":"code","273f2252":"code","1508ca1b":"code","46ea4510":"code","7cd65d55":"code","69d29f7c":"code","9a14cd7e":"code","7ffabb0b":"code","6413586a":"code","b669f5ff":"code","3b19bd96":"code","d494aa8d":"code","a0bc3d56":"code","24684414":"code","d12d3667":"code","5af6ee77":"code","4da276cd":"code","1d12fc73":"code","e575b486":"code","1f5b3d2b":"code","66a4dcca":"code","da665c7a":"code","c96521e1":"code","32cd973d":"code","f06fe483":"code","a7e04621":"code","f5bbcd09":"code","3eb5be44":"code","cad3c4cf":"code","cec82717":"code","2c27d367":"code","795ef885":"code","6cf47fd6":"code","a1fa7aee":"code","1c6a6bd5":"code","bf637e3c":"code","ea25b243":"code","2b05c0fa":"code","d1cefe30":"code","d11b9454":"code","c2322b75":"code","09fc6688":"code","4b702940":"code","d57d2022":"code","edb28e46":"code","c5a8a3a5":"code","87f45dba":"code","24a978f7":"code","34a65cfd":"code","9ab2f684":"code","d4846e67":"code","29849021":"code","6e8cf6c6":"code","8f338216":"code","69305ce1":"code","3861ff37":"code","01d2caac":"code","64848508":"code","86bfe7a9":"code","bb1ff1b3":"code","65df3520":"code","e9db79ec":"code","529514d4":"code","7046acf8":"code","2f641698":"code","85b32a34":"code","6ff31411":"code","cfa479a8":"code","ef13c068":"code","c60841a8":"code","ceaa77e9":"code","5bf23b2e":"code","f185d48e":"code","06c33d44":"code","beadc2d9":"code","e6e9e802":"code","084f154c":"code","c47328d8":"code","7dac0f8d":"code","1c4169b4":"code","43f085a7":"code","13a2f4cf":"code","30e22dbf":"code","e9f3bec1":"code","dbcfb444":"code","fa220ce9":"code","2f25aaf8":"code","2df66d69":"code","e4f45cb3":"code","d4c2c1b8":"code","e598c755":"code","eacbbcce":"code","84dd7c60":"code","cb1b6d5f":"code","b07fc1d0":"code","ab9ed7ea":"code","90c84b8a":"code","a78e548d":"code","52f41efe":"code","806ddc28":"code","f5f15414":"code","d374e603":"code","7fd299ab":"markdown","1c84c9ad":"markdown","4d7ac819":"markdown","df3b43ab":"markdown","42b17458":"markdown","aeda721b":"markdown","ce5b7a56":"markdown","a2b13f7d":"markdown","21d9ee20":"markdown","5b531cd6":"markdown","d5d0ae28":"markdown","df536fa9":"markdown","c1274ebb":"markdown","ddd1bee6":"markdown","13cb3a51":"markdown","9fc63551":"markdown","f1f12343":"markdown","375c02d7":"markdown","5aec6059":"markdown","510147d2":"markdown","78784ff9":"markdown","a6f9b27c":"markdown","e9373810":"markdown","bed7a0fc":"markdown","cd82a99d":"markdown","38838c9e":"markdown","f8abc39f":"markdown","d5317857":"markdown","3d3065ff":"markdown","0bdb03ba":"markdown","69c96245":"markdown","ae0e9a93":"markdown","0b17a092":"markdown","d97baaf5":"markdown","e7b02a1c":"markdown","c2e594f1":"markdown","9fe5ba33":"markdown","4783ae99":"markdown","ca918fd0":"markdown","359bd703":"markdown","56bad609":"markdown","3358c1c7":"markdown","2b72c8e0":"markdown","2bc358f5":"markdown","2b1bd725":"markdown","77280a96":"markdown","da48f497":"markdown","3d5bbe55":"markdown","6e410a43":"markdown","3a66ea54":"markdown","956c81c3":"markdown","67a63627":"markdown","8e0893fe":"markdown","a1835082":"markdown","4ef89ab1":"markdown","e7b820aa":"markdown","a2bf701b":"markdown","a25bb2da":"markdown","26c01033":"markdown","0459905f":"markdown","91c9a49d":"markdown","7ccfec05":"markdown","2383babf":"markdown","08c6c404":"markdown","81a3c7b2":"markdown","96f0b7c4":"markdown","ec18f91c":"markdown","88a138e9":"markdown","8e3d506d":"markdown","e3688fae":"markdown","bdcd35b8":"markdown","16a923fe":"markdown","9f292d80":"markdown","e9e7ae62":"markdown","dcbd113d":"markdown","c68bd135":"markdown","3b9580e8":"markdown","c10e6b3d":"markdown","7cf3c4cf":"markdown","3059333f":"markdown","036dbba9":"markdown","77d5bac9":"markdown","d8f8153a":"markdown","1b5e1a01":"markdown","edbee017":"markdown","7b0e0afc":"markdown","202181f1":"markdown","12ae7ed2":"markdown","3ac957f6":"markdown","7a51cce7":"markdown","28ad5f53":"markdown","7e4978a9":"markdown","a9dadd74":"markdown","3b133846":"markdown","4d52dc6d":"markdown","8cec87f2":"markdown","3555ae34":"markdown","fe3adfbf":"markdown","c55243da":"markdown","3aad4b07":"markdown","e551cd1a":"markdown","c0490c30":"markdown","75a64989":"markdown","b112d161":"markdown","1d0a3aad":"markdown","24800b3b":"markdown","6465a2aa":"markdown","d5a213b3":"markdown","86434ee9":"markdown","4ebf9a64":"markdown","e49b32ad":"markdown","bfb811a9":"markdown","70706b26":"markdown","4d451cef":"markdown","3c22e3d0":"markdown","8b8fa8a6":"markdown","870c48ee":"markdown","b98a09c1":"markdown","cb60f9b6":"markdown","bc35faf2":"markdown","36c0068b":"markdown","8a13da2c":"markdown","5c64cf2c":"markdown","9f26af36":"markdown","f09391db":"markdown","b2c34f15":"markdown","3c3066f7":"markdown","c11072e3":"markdown","9ad6551c":"markdown","1164da65":"markdown","6bec1eea":"markdown","ac296d89":"markdown","406272da":"markdown","fc5e4a99":"markdown","45f0d149":"markdown","e2d07cf1":"markdown","a13a056b":"markdown","6cacd692":"markdown","6ff689b2":"markdown","2af14ca1":"markdown","679400d1":"markdown","8cd86ecb":"markdown","19878a2f":"markdown","d4f646ff":"markdown","74647211":"markdown","521683ad":"markdown","30dc8535":"markdown","0ab897ce":"markdown","4cc00dd3":"markdown","ccc96e6d":"markdown","87c82666":"markdown","5ba4da0e":"markdown","65c3afa3":"markdown","f8a59a4d":"markdown","6f806f5a":"markdown","ffffdbc6":"markdown","c53455b7":"markdown","331e8d49":"markdown","796491ea":"markdown","5e1d45bb":"markdown","b8c4859e":"markdown","efbef137":"markdown","275defee":"markdown","4e33f7c8":"markdown","cade541e":"markdown","fd6e52d9":"markdown","1fa15ee1":"markdown","c1ea26ab":"markdown","3500faf6":"markdown","5214698c":"markdown","0dd17bb7":"markdown","e1343d91":"markdown","0532745c":"markdown","953c41c7":"markdown","f81a9a8e":"markdown","2d27d9b3":"markdown","0f10ec94":"markdown","baff2d4b":"markdown","a8dedb00":"markdown","eb43906d":"markdown","4b4f1ced":"markdown","8c1218b5":"markdown","a66cb920":"markdown","986c4f70":"markdown","e7db08cb":"markdown","d8038bea":"markdown","579424d0":"markdown","389afc15":"markdown","0c66d29a":"markdown","12407489":"markdown","2ec0f7ac":"markdown","541d6e29":"markdown","347a129a":"markdown","529a3d9b":"markdown"},"source":{"0dc514b9":"print(\"Hello World\")","8c38be0f":"print(\"I love python\"); print(\"I love Programming\")","7231fa38":"#int data type\nprint( type(10) )\n\n#float data type\nprint( type(10.5) )\n\n#str data type\nprint( type(\"Hello python\") )\n\n#list data type\nprint( type([1,2,3,4]) )\n\n#tuple data type\nprint( type((1,2,3,4)) )\n\n#dict data type\nprint( type({\"one\": 1, \"two\": 2, \"three\": 3}) )\n\n#bool data type\nprint( type(5 > 4) )","34ef9014":"#samllCase \nname    = \"mohamed\"\n\n#camelCase\nmyName  = \"mohamed\"\n\n#snake_case\nmy_name = \"mohamed\"\n\nprint(name)\nprint(myName)\nprint(my_name)","e61cfea0":"help(\"keywords\")","89384781":"a, b, c = 1, 2, 3\n\nprint(a)\nprint(b)\nprint(c)\nprint(\"---------------------------\")\n\n#to swap values of two variables\nx = 5\ny = 6\n\nprint(\"x and y values before swaping\")\nprint(x)\nprint(y)\nprint(\"---------------------------\")\n\nx,y = y,x\n\nprint(\"x and y values after swaping\")\nprint(x)\nprint(y)","00211323":"#\\b : Back Space\nprint(\"Hello\\bPython\")\n\nprint(\"----------------------------\")\n\n#\\newline : Escape New Line + \\\nprint(\"Hello\\\nPython\")\n\nprint(\"----------------------------\")\n\n#\\\\ : Escape Back Slash\nprint(\"Hello\\\\Python\")\n\nprint(\"----------------------------\")\n\n#\\' : Escape Single Quotes\nprint(\"Hello\\'Python\\'\")","a45e0d96":"#\\\" : Escape Double Quotes\nprint(\"Hello\\\"Python\\\"\")\n\nprint(\"----------------------------\")\n\n#\\n : Line Feed\nprint(\"Hello\\nPython\")\n\nprint(\"----------------------------\")\n\n#\\r : Carriage Return\nprint(\"Welcome To All Programmers With \\rPython\")\n\nprint(\"----------------------------\")\n#\\t : Horizontal tab\nprint(\"Hello\\tPython\")\n\nprint(\"----------------------------\")\n\n#\\xhh : Character Hex Value\nprint(\"\\x4F\")","dba1713b":"txtOne = \"I love\"\ntxtTwo = \"python\"\n\nprint(txtOne + \" \" + txtTwo)","c9fc8af7":"msgOne = \"\"\"I love \nmachine learning\nso much\n\"\"\"\nmsgTwo = \"\"\"So I go to school\nto learn\nML\n\"\"\"\n\nfullmsg = msgOne + msgTwo\n\nprint(msgOne)\nprint(\"-------------------\")\nprint(msgTwo)\nprint(\"-------------------\")\nprint(fullmsg)","45a34e4a":"msgOne = \"I love\\nmachine learning\\nso much\"\nmsgTwo = \"So I go to school\\nto learn\\nML\"\n\nfullmsg = msgOne + msgTwo\n\nprint(msgOne)\nprint(\"-------------------\")\nprint(msgTwo)\nprint(\"-------------------\")\nprint(fullmsg)","18bd84db":"myString = \"I love python and machine learning\"\n\n#print whole string\nprint(myString) \n\n#print whole I\nprint(myString[0]) \n\n#print whole l\nprint(myString[2]) \n\n#print whole g\nprint(myString[-1]) ","0bf32c16":"#print whole string\nprint(myString)\n\n#print I love\nprint(myString[0:6])\n\n#print I love python and machine learning\n#If end is not specified will go to the end\nprint(myString[0:])\n\n#print I love p\n#If start is not specified will strart from the 0\nprint(myString[:8])","25e6525a":"#print whole string\nprint(myString)\n\n#print I love python and machine learning\nprint(myString[:])\n\n#print I love python and machine learnin\nprint(myString[0:-1:1])\n\n#print Ilv yhnadmcielann\nprint(myString[0:-1:2])\n\n#print I love python\nprint(myString[0:13:1])\n\n#print Ilv yhn\nprint(myString[0:13:2])","aaced6bf":"txt = \"I love python\"\n\nprint(txt)\nprint(len(txt))","c8b42c61":"FirstTxt = \"     I love python     \"\nFirstNewTxt = FirstTxt.strip()\n\nprint(FirstTxt)\nprint(len(FirstTxt))\n\nprint(FirstNewTxt)\nprint(len(FirstNewTxt))","554ce9cc":"secondTxt = \"#######I love python#######\"\nsecondNewTxt= secondTxt.strip(\"#\")\n\nThirdTxt = \"#@#@#@I love python#@#@#@\"\nThirdNewTxt = ThirdTxt.strip(\"#@\")\n\nprint(secondNewTxt)\nprint(ThirdNewTxt)","6a0aab51":"txt = \"#######I love python#######\"\nnewTxt = txt.rstrip(\"#\")\n\nprint(txt)\nprint(newTxt)","543a3998":"txt = \"#######I love python#######\"\nnewTxt = txt.lstrip(\"#\")\n\nprint(txt)\nprint(newTxt)","ff19b4c5":"txt = \"I Love maCHine LEArning and 4g TEChnology\"\ntitleText = txt.title()\n\nprint(txt)\nprint(titleText)","cb0077a0":"txt = \"i Love maCHine LEArning and 4g TEChnology\"\ncapitalizeText = txt.capitalize()\n\nprint(txt)\nprint(capitalizeText)","e85c6c75":"a, b, c, d = \"1\",\"10\",\"100\", \"1000\"\n\nprint(a)\nprint(b)\nprint(c)\nprint(d)\n\nprint(\"--------------------------\")\n\nprint(a.zfill(4))\nprint(b.zfill(4))\nprint(c.zfill(4))\nprint(d.zfill(4))","f056704a":"txt = \"i love python and machine learning\"\n\nprint(txt)\nprint(txt.upper())","23fa4c18":"txt = \"I loVe PyTHon and MaCHine LEARNING\"\n\nprint(txt)\nprint(txt.lower())","091c572d":"txtOne = \"i love python and machine learning\"\ntxtTwo = \"i-love-python-and-machine-learning\"\n\nprint(txtOne)\nprint(txtOne.split())\nprint(txtOne.split(\" \"))\nprint(txtOne.split(\" \",2))\n\nprint(\"----------------------------------\")\n\nprint(txtTwo)\nprint(txtTwo.split())\nprint(txtTwo.split(\"-\"))\nprint(txtTwo.split(\"-\",2))","12ec148e":"txtOne = \"i love python and machine learning\"\ntxtTwo = \"i-love-python-and-machine-learning\"\n\nprint(txtOne)\nprint(txtOne.rsplit())\nprint(txtOne.rsplit(\" \"))\nprint(txtOne.rsplit(\" \",2))\n\nprint(\"----------------------------------\")\n\nprint(txtTwo)\nprint(txtTwo.rsplit())\nprint(txtTwo.rsplit(\"-\"))\nprint(txtTwo.rsplit(\"-\",2))","d298db41":"myFavouritLang = \"Python\"\n\nprint(len(myFavouritLang))\nprint(myFavouritLang)\nprint(myFavouritLang.center(6))\nprint(myFavouritLang.center(20))\nprint(myFavouritLang.center(20,\"#\"))","5d259c24":"txt = \"I love python and javaScript and java\"\n\nprint(txt)\n\nprint(\"--------------------\")\n\nprint(txt.count(\"and\"))\nprint(txt.count(\"and\",14))\nprint(txt.count(\"and\",15))\nprint(txt.count(\"and\",30))\n\nprint(\"--------------------\")\n\nprint(txt.count(\"and\",0,5))\nprint(txt.count(\"and\",0,14))\nprint(txt.count(\"and\",14,30))","5f1e57ca":"txt = \"I LOve PYthoN\"\n\nprint(txt)\nprint(txt.swapcase())","78d36f7f":"myStr = \"@I go to my home\"\n\nprint(myStr)\nprint(myStr.startswith(\"@\"))\nprint(myStr.startswith(\"@I\"))\nprint(myStr.startswith(\"@k\"))","ac239cd0":"print(myStr)\nprint(myStr.startswith(\"@\",3))\nprint(myStr.startswith(\"g\",3))\nprint(myStr.startswith(\"t\",6,7))\nprint(myStr.startswith(\"too\",6,7))","e9e65208":"myStr = \"@I go to my home\"\n\nprint(myStr)\nprint(myStr.endswith(\"@\"))\nprint(myStr.endswith(\"e\"))\nprint(myStr.endswith(\"me\"))","ca07b96a":"print(myStr)\nprint(myStr.endswith(\"e\",-4))\nprint(myStr.endswith(\"g\",3))\nprint(myStr.endswith(\"t\",6,7))\nprint(myStr.endswith(\"too\",6,7))","e247a92d":"mystr = \"I love python\"\n\nprint(mystr.index(\"I\"))\nprint(mystr.index(\"love\"))\nprint(mystr.index(\"python\"))\n\n#will through error becuse i not find\n#print(mystr.index(\"i\")) ","a6750396":"mystr = \"I love python\"\n\nprint(mystr.find(\"I\"))\nprint(mystr.find(\"love\"))\nprint(mystr.find(\"python\"))\n\n#will print -1 becuse i not find\nprint(mystr.find(\"i\")) ","ed1462aa":"mystr = \"I love python\"\n\nprint(len(mystr))\nprint(mystr.rjust(13,\"#\"))\nprint(mystr.rjust(20,\"#\"))\nprint(mystr.rjust(20,\" \"))\nprint(len(mystr.rjust(20,\" \")))","9dad1772":"mystr = \"I love python\"\n\nprint(len(mystr))\nprint(mystr.ljust(13,\"#\"))\nprint(mystr.ljust(20,\"#\"))\nprint(mystr.ljust(20,\" \"))\nprint(len(mystr.ljust(20,\" \")))","dfa34239":"txtOne = \"\"\"I \ngo to school\nto learn\nmachine learning\"\"\"\n\ntxtTwo = \"I\\ngo to school\\nto learn\\nmachine learning\"\n\nprint(txtOne)\nprint(txtOne.splitlines())\n\nprint(\"----------------------------\")\n\nprint(txtTwo)\nprint(txtTwo.splitlines())","17b5375d":"mystr = \"I\\tlove\\tpython\"\n\nprint(mystr)\nprint(mystr.expandtabs(8))\nprint(mystr.expandtabs(7))\nprint(mystr.expandtabs(6))","2242f0bc":"txtOne = \"Introduction To Machine Learning\"\ntxtTwo = \"introduction to machine learning\"\n\nprint(txtOne.istitle())\nprint(txtTwo.istitle())","dbac4b0f":"charOne = \" \"\ncharTwo = \"\"\n\nprint(charOne.isspace())\nprint(charTwo.isspace())","fe27453c":"txtOne   = \"Introduction To Machine Learning\"\ntxtTwo   = \"introduction to machine learning\"\ntxtThree = \"introDuction to macHine lEArning\"\n\nprint(txtOne.islower())\nprint(txtTwo.islower())\nprint(txtThree.islower())","6a262761":"txtOne   = \"Introduction To Machine Learning\"\ntxtTwo   = \"introduction to machine learning\"\ntxtThree = \"introDuction to macHine lEArning\"\ntxtFour  = \"INTRODUCTION TO MACHINE LEARNING\"\n\nprint(txtOne.isupper())\nprint(txtTwo.isupper())\nprint(txtThree.isupper())\nprint(txtFour.isupper())","59fbd5fd":"variableOne = \"my_phone\"\nvariableTwo = \"myPhone\"\nvariableThree = \"44myPhone\"\nvariableFour = \"my-Phone\"\nvariableFive = \"my555Phone\"\n\nprint(variableOne.isidentifier())\nprint(variableTwo.isidentifier())\nprint(variableThree.isidentifier())\nprint(variableFour.isidentifier())\nprint(variableFive.isidentifier())","ba284eeb":"txtOne   = \"aaaabbbbxxxxyyyyzzzz\"\ntxtTwo   = \"AAAABBBBXXXXYYYYZZZZ\"\ntxtThree = \"aaaaBBBBxxxxYYYYzzzz\"\ntxtFour  = \"aaaa5555XXXX7777ZZZZ\"\n\nprint(txtOne.isalpha())\nprint(txtTwo.isalpha())\nprint(txtThree.isalpha())\nprint(txtFour.isalpha())","52a82b35":"txtOne   = \"aaaabbbbxxxxyyyyzzzz\"\ntxtTwo   = \"AAAABBBBXXXXYYYYZZZZ\"\ntxtThree = \"aaaaBBBBxxxxYYYYzzzz\"\ntxtFour  = \"aaaa5555XXXX7777ZZZZ\"\ntxtFive  = \"11112222333344445555\"\ntxtSix  =  \"@@@@5555XXXX7777ZZZZ\"\n\nprint(txtOne.isalnum())\nprint(txtTwo.isalnum())\nprint(txtThree.isalnum())\nprint(txtFour.isalnum())\nprint(txtFive.isalnum())\nprint(txtSix.isalnum())","e33ffa38":"myFavouritDate = \"20-05-2020\"\n\nprint(myFavouritDate)\nprint(myFavouritDate.replace(\"-\",\"\\\\\"))\nprint(myFavouritDate.replace(\"-\",\"\\\\\",1))","b332725d":"htmlMarkDown = \"<div><p>Hello World<\/p><\/div>\"\nnormalText   = htmlMarkDown.replace(\"<div>\",\"\")\nnormalText   = normalText.replace(\"<p>\",\"\")\nnormalText   = normalText.replace(\"<\/div>\",\"\")\nnormalText   = normalText.replace(\"<\/p>\",\"\")\n\nprint(htmlMarkDown)\nprint(normalText)","21ded9eb":"myList = [\"I\",\"Love\",\"Python\",\"And\",\"Machine\",\"Learning\"]\n\nprint(myList)\nprint(\"\".join(myList))\nprint(\" \".join(myList))\nprint(\"-\".join(myList))\nprint(\"*\".join(myList))","05666385":"subject = \"machine learning\"\nlang = \"python\"\nversion = 2.0\nexperince = 1\n\nprint(\"I love %s and %s programming language, I use tensorflow %f to build %s systems and I have %d years experince\" \\\n     %(subject,lang,version,subject,experince))","15cea229":"#control floating point number\nmodelAccuracy = 98.9578\n\nprint(\"My model accuracy = %f\" % modelAccuracy)\nprint(\"My model accuracy = %.0f\" % modelAccuracy)\nprint(\"My model accuracy = %.1f\" % modelAccuracy)\nprint(\"My model accuracy = %.2f\" % modelAccuracy)\nprint(\"My model accuracy = %.3f\" % modelAccuracy)\nprint(\"My model accuracy = %.4f\" % modelAccuracy)","d47c676d":"#truncate string\nmystr = \"machine learning\"\n\nprint(\"I love %s\" % mystr)\nprint(\"I love %.1s\" % mystr)\nprint(\"I love %.2s\" % mystr)\nprint(\"I love %.3s\" % mystr)\nprint(\"I love %.4s\" % mystr)\nprint(\"I love %.5s\" % mystr)","1b82fa57":"name = \"galal\"\nage  = 80\nsalary = 3500.587\n\nprint(\"Name : {:s} \\nage : {:d} \\nsalary : {:f}\".format(name,age,salary))","b74a4aa4":"#control floating point number\nmodelAccuracy = 98.9578\n\nprint(\"My model accuracy = {:f}\".format(modelAccuracy))\nprint(\"My model accuracy = {:.0f}\".format(modelAccuracy))\nprint(\"My model accuracy = {:.1f}\".format(modelAccuracy))\nprint(\"My model accuracy = {:.2f}\".format(modelAccuracy))\nprint(\"My model accuracy = {:.3f}\".format(modelAccuracy))\nprint(\"My model accuracy = {:.4f}\".format(modelAccuracy))","47eab55f":"#truncate string\nmystr = \"machine learning\"\n\nprint(\"I love {:s}\".format(mystr))\nprint(\"I love {:.1s}\".format(mystr))\nprint(\"I love {:.2s}\".format(mystr))\nprint(\"I love {:.3s}\".format(mystr))\nprint(\"I love {:.4s}\".format(mystr))\nprint(\"I love {:.5s}\".format(mystr))","988a0b20":"#format numbers\n\nbankMony = 98745214885697\n\nprint(\"Bank mony = {:d}\".format(bankMony))\nprint(\"Bank mony = {:_d}\".format(bankMony))\nprint(\"Bank mony = {:,d}\".format(bankMony))\nprint(\"Bank mony = {:+d}\".format(bankMony))","50025efb":"#rearrange items\none, two, three = 1,2,3\n\nprint(\"{} => {} => {}\".format(one, two, three))\nprint(\"{0} => {1} => {2}\".format(one, two, three))\nprint(\"{2} => {1} => {0}\".format(one, two, three))\nprint(\"{1} => {2} => {0}\".format(one, two, three))\nprint(\"{2} => {0} => {1}\".format(one, two, three))\n\nprint(\"----------------------------------------------\")\n\nprint(\"{} => {} => {}\".format(one, two, three))\nprint(\"{0:d} => {1:d} => {2:d}\".format(one, two, three))\nprint(\"{2:f} => {1:f} => {0:f}\".format(one, two, three))\nprint(\"{1:.2f} => {2:.2f} => {0:.2f}\".format(one, two, three))\nprint(\"{2:.3f} => {0:.4f} => {1:.5f}\".format(one, two, three))","5231b428":"subject = \"machine learning\"\nlang = \"python\"\nversion = 2.0\nexperince = 1\n\nprint(\"I love {subject} and {lang} programming language, I use tensorflow {version} \\\nto build {subject} systems and I have {experince} years experince\")\n\nprint(\"-----------------------------------------------------------------------------------\")\n\nprint(f\"I love {subject} and {lang} programming language, I use tensorflow {version} \\\nto build {subject} systems and I have {experince} years experince\")","bf6933ff":"print(10)\nprint(type(10))\nprint(-10)\nprint(type(-10))\n\nprint(\"------------------------\")\n\nprint(10.05)\nprint(type(10.05))\nprint(-10.05)\nprint(type(-10.05))\n\nprint(\"------------------------\")\n\ncomplexNum = 5+10j\nprint(complexNum)\nprint(type(complexNum))\nprint(\"Real part is : {}\".format(complexNum.real))\nprint(\"Imaginary part is : {}\".format(complexNum.imag))","4ec69b53":"intNum = 10\nprint(intNum)\nprint(float(intNum))\nprint(complex(intNum))\n\nprint(\"------------------\")\n\nfloatNum = 50.20\nprint(floatNum)\nprint(int(floatNum))\nprint(complex(floatNum))","1ab7ccdb":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 5+2j\n\nprint(\"{:d} + {:.1f} = {}\".format(firstNum, secondNum, firstNum + secondNum))\nprint(\"{:d} + {} = {}\".format(firstNum, ThirdNum, firstNum + ThirdNum))\nprint(\"{:.2f} + {} = {}\".format(secondNum, ThirdNum, secondNum + ThirdNum))","b54157af":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 5+2j\n\nprint(\"{:d} - {:.1f} = {}\".format(firstNum, secondNum, firstNum - secondNum))\nprint(\"{:d} - {} = {}\".format(firstNum, ThirdNum, firstNum - ThirdNum))\nprint(\"{:.2f} - {} = {}\".format(secondNum, ThirdNum, secondNum - ThirdNum))","93a4b309":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 5+2j\n\nprint(\"{:d} * {:.1f} = {}\".format(firstNum, secondNum, firstNum * secondNum))\nprint(\"{:d} * {} = {}\".format(firstNum, ThirdNum, firstNum * ThirdNum))\nprint(\"{:.2f} * {} = {}\".format(secondNum, ThirdNum, secondNum * ThirdNum))","f5be2c95":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 5+2j\n\nprint(\"{:d} \/ {:.1f} = {:.3f}\".format(firstNum, secondNum, firstNum \/ secondNum))\nprint(\"{:d} \/ {} = {:.3f}\".format(firstNum, ThirdNum, firstNum \/ ThirdNum))\nprint(\"{:.2f} \/ {} = {:.3f}\".format(secondNum, ThirdNum, secondNum \/ ThirdNum))","111d4ea1":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 3\n\nprint(\"{} % {} = {}\".format(firstNum, secondNum, firstNum % secondNum))\nprint(\"{} % {} = {}\".format(firstNum, ThirdNum, firstNum % ThirdNum))\nprint(\"{} % {} = {}\".format(ThirdNum, firstNum, ThirdNum % firstNum))\nprint(\"{} % {} = {}\".format(secondNum, firstNum, secondNum % firstNum))\nprint(\"{} % {} = {}\".format(secondNum, ThirdNum, secondNum % ThirdNum))\nprint(\"{} % {} = {}\".format(ThirdNum, secondNum, ThirdNum % secondNum))","a00e71e2":"firstNum = 2\nsecondNum = 2.5\nThirdNum = 2+5j\n\nprint(\"{} ** {} = {:.3f}\".format(firstNum, secondNum, firstNum ** secondNum))\nprint(\"{} ** {} = {:.3f}\".format(firstNum, ThirdNum,  firstNum ** ThirdNum))\nprint(\"{} ** {} = {:.3f}\".format(ThirdNum, firstNum,  ThirdNum ** firstNum))\nprint(\"{} ** {} = {:.3f}\".format(secondNum, firstNum, secondNum ** firstNum))\nprint(\"{} ** {} = {:.3f}\".format(secondNum, ThirdNum, secondNum ** ThirdNum))\nprint(\"{} ** {} = {:.3f}\".format(ThirdNum, secondNum, ThirdNum ** secondNum))","019b3427":"firstNum = 5\nsecondNum = 10.5\nThirdNum = 4\n\nprint(\"{:d} \/\/ {:.1f} = {:.1f}\".format(firstNum, secondNum, firstNum \/\/ secondNum))\nprint(\"{:d} \/\/ {} = {:.1f}\".format(firstNum, ThirdNum, firstNum \/\/ ThirdNum))\nprint(\"{:.2f} \/\/ {} = {:.1f}\".format(secondNum, ThirdNum, secondNum \/\/ ThirdNum))","dd539502":"mylist = [\"one\", \"two\", \"three\",\"four\",\"five\",\"six\",\"seven\"]\n\nprint(mylist)\nprint(mylist[0])\nprint(mylist[-1])\nprint(mylist[2:])\nprint(mylist[2:4])\nprint(mylist[0::2])\nprint(mylist[-1::-2])","d5ef605e":"mylist = [\"one\", \"two\", \"three\",\"four\",\"five\",\"six\",\"seven\"]\nprint(mylist)\n\nmylist[0] = 1\nmylist[-1] = 7\nprint(mylist)\n\nmylist[1:4] = [2,3,4]\nprint(mylist)\n\nmylist[4:] = []\nprint(mylist)\n\nmylist[1:] = \"python\"\nprint(mylist)\n\nmylist[1:] = [\"python\"]\nprint(mylist)","1775acab":"programmingLangs = [\"python\",\"javaScript\",\"php\"]\nprint(programmingLangs)\n\nprogrammingLangs.append(\"java\")\nprogrammingLangs.append(\"c++\")\nprogrammingLangs.append(\"c#\")\nprint(programmingLangs)\n\notherLang = [\"R\",\"kotlen\",\"c\"]\nprogrammingLangs.append(otherLang)\nprint(programmingLangs)\n\nprint(programmingLangs[0])\nprint(programmingLangs[1])\nprint(programmingLangs[5])\nprint(programmingLangs[6])\nprint(programmingLangs[-1])\nprint(programmingLangs[6][1])\nprint(programmingLangs[-1][1])","57333612":"numbers = [1,2,3,4,5]\nletters = [\"a\",\"b\",\"c\",\"d\",\"e\"]\nboolean = [True,False]\n\nprint(numbers)\nprint(letters)\nprint(boolean)\nprint(\"-----------------------------\")\n\nnumbers.extend(letters)\n\nprint(numbers)\nprint(letters)\nprint(boolean)\nprint(\"-----------------------------\")\n\n\nnumbers.extend(boolean)\n\nprint(numbers)\nprint(letters)\nprint(boolean)","666ba358":"numbers = [10,20,30,40,50,60,70,80,90,10]\nprint(numbers)\n\nnumbers.remove(40)\nprint(numbers)\n\nnumbers.remove(10)\nprint(numbers)","76a74501":"numbers = [50,60,10,90,70,60,50,70,30,20,40,10]\nprint(numbers)\n\nnumbers.sort()\nprint(numbers)\n\nprint(\"--------------------------------------------\")\n\nnumbers = [50,60,10,90,70,60,50,70,30,20,40,10]\nprint(numbers)\n\nnumbers.sort(reverse=False)\nprint(numbers)\n\nprint(\"--------------------------------------------\")\n\nnumbers = [50,60,10,90,70,60,50,70,30,20,40,10]\nprint(numbers)\n\nnumbers.sort(reverse=True)\nprint(numbers)","89226408":"letters = [\"a\",\"f\",\"c\",\"e\",\"k\"]\nprint(letters)\n\nletters.sort()\nprint(letters)\n\nprint(\"--------------------------------------------\")\n\nlettersWithNum = [\"a\",\"f\",\"c\",\"e\",\"k\",\"1\",\"5\",\"2\",\"3\",\"7\"]\nprint(lettersWithNum)\n\nlettersWithNum.sort()\nprint(lettersWithNum)\n\nprint(\"--------------------------------------------\")\n\nboolean = [True,False]\nprint(boolean)\n\nboolean.sort()\nprint(boolean)","5d0fc98d":"numbers = [10,20,30,40,50,60,70,80,90,100]\nletters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]\n\nprint(numbers)\nprint(letters)\n\nprint(\"-------------------------------------\")\n\nnumbers.reverse()\nletters.reverse()\n\nprint(numbers)\nprint(letters)","3e1d8bc3":"mylist = [1,2,3,4,5,\"a\",\"b\",\"c\",\"d\",\"e\",True,False]\n\nprint(mylist)\nmylist.clear()\nprint(mylist)","52b26482":"mainList  = [1,2,3,4,5]\nshallowCopyList = mainList.copy()\n\nprint(mainList)\nprint(shallowCopyList)\n\nprint(\"------------------------------\")\n\nmainList.append(6)\nmainList.append(7)\n\nprint(mainList)\nprint(shallowCopyList)\n\nprint(\"------------------------------\")\n\nshallowCopyList.remove(2)\nshallowCopyList.remove(3)\n\nprint(mainList)\nprint(shallowCopyList)","70e2d547":"numbers = [1,5,2,5,3,5,4,5]\nprint(numbers)\n\nprint(numbers.count(5))\nprint(numbers.count(10))","4a5981da":"numbers = [1,5,2,5,3,5,4,5]\nprint(numbers)\n\nprint(numbers.index(5))","da48b03d":"numbers = [10,50,70,80,110]\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(1,20)\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(2,30)\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(3,40)\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(5,60)\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(-1,100)\nprint(numbers)\nprint(\"---------------------------\")\n\nnumbers.insert(-2,90)\nprint(numbers)","a61adc57":"mylist = [1,2,3,4,5,6,7,8,9,10]\nprint(mylist)\n\nprint(\"-------------------------------\")\n\nprint(mylist.pop())\nprint(mylist)\n\nprint(\"-------------------------------\")\n\nprint(mylist.pop(0))\nprint(mylist)","57392fb2":"myFirstTuple = (\"one\",\"two\",\"three\",\"four\")\nmySecondTuple = \"five\", \"six\", \"seven\"\n\nprint(type(myFirstTuple))\nprint(type(mySecondTuple))\n\nprint(myFirstTuple)\nprint(mySecondTuple)\n\nprint(len(myFirstTuple))\nprint(len(mySecondTuple))","450c3b81":"myThirdTuple = (\"eight\")\nmyForthTuple = \"nine\"\n\nprint(type(myThirdTuple))\nprint(type(myForthTuple))\n\nprint(myThirdTuple)\nprint(myForthTuple)\n\nprint(len(myThirdTuple))\nprint(len(myForthTuple))","fcb0e5a9":"#tuble with one element\n\nmyThirdTuple = (\"eight\",)\nmyForthTuple = \"nine\",\n\nprint(type(myThirdTuple))\nprint(type(myForthTuple))\n\nprint(myThirdTuple)\nprint(myForthTuple)\n\nprint(len(myThirdTuple))\nprint(len(myForthTuple))","982bfcfe":"myTuple = (\"one\", \"two\", \"three\",\"four\",\"five\",\"six\",\"seven\")\n\nprint(myTuple)\nprint(myTuple[0])\nprint(myTuple[-1])\nprint(myTuple[2:])\nprint(myTuple[2:4])\nprint(myTuple[0::2])\nprint(myTuple[-1::-2])","4826b548":"myTuble = (1,5,2,5,3,5,4,5,5,6,5,7,5,8,5,9,5,10)\n\nprint(myTuble.count(1))\nprint(myTuble.count(5))","add94943":"myTuble = (1,2,3,4,5,6,7)\n\nprint(myTuble.index(1))\nprint(myTuble.index(7))","f643f22f":"mySet = {1,2,3,False,\"one\",\"Two\",\"Three\",(4,5,6,7),1,2,3,\"one\",\"Two\",\"Three\"}\n\nprint(len(mySet))\nprint(mySet)","11b9c8ec":"mySet","55e35a63":"myset = {1,2,3}\nprint(myset)\n\nmyset.clear()\nprint(myset)","275a24bc":"myFirstSet = {1,2,3}\nmySecondSet = {\"a\",\"b\",\"c\",1,2,3}\nmyThirdSet = {(10,20,30),(\"python\",\"R\")}\n\nprint(myFirstSet)\nprint(mySecondSet)\nprint(myThirdSet)\n\nprint(\"-----------------------\")\n\nmyForthSet = myFirstSet | mySecondSet \nmyFifthSet = myFirstSet.union(mySecondSet)\n\nmySixSet   = myFirstSet | mySecondSet | myThirdSet\nmySevenSet = myFirstSet.union(mySecondSet,myThirdSet)\n\nprint(myForthSet)\nprint(myFifthSet)\n\nprint(\"\\n\")\n\nprint(mySixSet)\nprint(mySevenSet)\n\nprint(\"-----------------------\")\n\nprint(myFirstSet)\nprint(mySecondSet)","db412e22":"mylist = {1,2,3}\nprint(mylist)\n\nmylist.add(4)\nmylist.add(5)\nprint(mylist)","b5a3221c":"mainSet  = {1,2,3,4,5}\nshallowCopySet = mainSet.copy()\n\nprint(mainSet)\nprint(shallowCopySet)\n\nprint(\"------------------------------\")\n\nmainSet.add(6)\nmainSet.add(7)\n\nprint(mainSet)\nprint(shallowCopySet)","6c8ffff8":"mySet = {1,2,3,4,5,6,7}\nprint(mySet)\n\nmySet.remove(5)\nprint(mySet)\n\n# will get KeyError\n# mySet.remove(99)","34d254d8":"mySet = {1,2,3,4,5,6,7}\nprint(mySet)\n\nmySet.discard(5)\nprint(mySet)\n\nmySet.discard(99)\nprint(mySet)","c3165ea5":"mySet = {1,2,3,4,5,6,7}\nprint(mySet)\n\nprint(\"----------------------\")\n\nprint(mySet.pop())\nprint(mySet)","36e5ff7d":"myFirstSet = {1,2,3}\nmySecondSet = {\"a\",\"b\",\"c\"}\nmylist = [\"Python\",\"R\",\"Java\"]\n\nprint(myFirstSet)\nprint(mySecondSet)\nprint(mylist)\n\nprint(\"-----------------------\")\n\nmyFirstSet.update(mySecondSet)\n\nprint(myFirstSet)\n\nprint(\"-----------------------\")\n\nmyFirstSet.update(mylist)\n\nprint(myFirstSet)","e94a44df":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nprint(myFirstList - mySecondList)\nprint(myFirstList.difference(mySecondList))\n\nprint(\"------------------------------------\")\n\nprint(myFirstList)\nprint(mySecondList)","21fc29d1":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nprint(mySecondList - myFirstList)\nprint(mySecondList.difference(myFirstList))\n\nprint(\"------------------------------------\")\n\nprint(myFirstList)\nprint(mySecondList)","e5c1756c":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nmyFirstList.difference_update(mySecondList)\n\nprint(myFirstList)\nprint(mySecondList)","0bf58ab4":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nprint(myFirstList & mySecondList)\nprint(myFirstList.intersection(mySecondList))\n\nprint(\"------------------------------------\")\n\nprint(myFirstList)\nprint(mySecondList)","677da0c3":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nmyFirstList.intersection_update(mySecondList)\n\nprint(myFirstList)\nprint(mySecondList)","21cc8068":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nprint(myFirstList ^ mySecondList)\nprint(myFirstList.symmetric_difference(mySecondList))\n\nprint(\"------------------------------------\")\n\nprint(myFirstList)\nprint(mySecondList)","4a1fcc50":"myFirstList = {1,2,3,4}\nmySecondList = {1,2,\"a\",\"b\",\"c\"}\n\nprint(myFirstList)\nprint(mySecondList)\n\nprint(\"------------------------------------\")\n\nmyFirstList.symmetric_difference_update(mySecondList)\n\nprint(myFirstList)\nprint(mySecondList)","650afc72":"setA = {1,2,3,4}\nsetB = {1,2,3}\nsetC = setA.copy()\nsetD = {1,2,3,4,5}\n\nprint(setA.issuperset(setB))\nprint(setA.issuperset(setC))\nprint(setA.issuperset(setD))","266b9446":"setA = {1,2,3,4}\nsetB = {1,2,3}\nsetC = setA.copy()\nsetD = {1,2,3,4,5}\n\nprint(setA.issubset(setB))\nprint(setA.issubset(setC))\nprint(setA.issubset(setD))","c42d38db":"setA = {1,2,3,4}\nsetB = {1,2,3}\nsetC = {1,2}\nsetD = {1}\nsetE = {10,20,30}\nsetF = {\"a\",\"b\",\"c\"}\n\nprint(setA.isdisjoint(setB))\nprint(setA.isdisjoint(setC))\nprint(setA.isdisjoint(setD))\nprint(setA.isdisjoint(setE))\nprint(setA.isdisjoint(setF))","52617f45":"student = {\n    \"name\" : \"Mohamed\",\n    \"age\"  : 22,\n    \"gpa\"  : 3.38,\n    \"country\" : \"Egypt\",\n    \"skills\" : [\"Web programming\",\n              \"Web scraping\",\n              \"Machine learning foundation\",\n              \"Deep learning foundation\"],\n    \n    \"TopFavouritSubject\" : (\"Decision support system\",\"Social analysis\")\n}\n\nprint(student)","72830fd4":"print(\"student name : {}\".format(student['name']))\nprint(\"student age : {}\".format(student['age']))\nprint(\"student gpa : {}\".format(student['gpa']))\nprint(\"student country : {}\".format(student['country']))\n   \nprint(\"=\"*50)\n\nprint(\"student skills #1 : {}\".format(student['skills'][0]))  \nprint(\"student skills #2 : {}\".format(student['skills'][1])) \nprint(\"student skills #3 : {}\".format(student['skills'][2])) \nprint(\"student skills #4 : {}\".format(student['skills'][3])) \n\nprint(\"=\"*50)\n\nprint(\"student f avourit subject #1 : {}\".format(student['TopFavouritSubject'][0])) \nprint(\"student f avourit subject #2 : {}\".format(student['TopFavouritSubject'][1])) ","174a3c3c":"#Two dimensional dictionary\nallStudents = {\n    \"1\" : { \n        \"name\" : \"Mohamed\",\n        \"age\"  : 22,\n        \"gpa\"  : 3.38,\n        \"country\" : \"Egypt\"\n    },\n    \n    \"2\" : { \n        \"name\" : \"salah\",\n        \"age\"  : 25,\n        \"gpa\"  : 3.46,\n        \"country\" : \"USA\"\n    },\n    \n    \"3\" : { \n        \"name\" : \"galal\",\n        \"age\"  : 24,\n        \"gpa\"  : 3.41,\n        \"country\" : \"Gemany\"\n    }   \n}\n\nprint(allStudents)\n\nprint(\"=\"*50)\n\nstudentNumber = \"3\"\n\nprint(\"student #{} name : {}\".format(studentNumber, allStudents[studentNumber]['name']))\nprint(\"student #{} age : {}\".format(studentNumber, allStudents[studentNumber]['age']))\nprint(\"student #{} gpa : {}\".format(studentNumber, allStudents[studentNumber]['gpa']))\nprint(\"student #{} country : {}\".format(studentNumber, allStudents[studentNumber]['country']))","0802e400":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nuser.clear()\nprint(user)","ec5b286b":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nuser[\"rank\"] = \"4th\"\nprint(user)\n\nprint(\"=\"*50)\n\nuser.update({\"name\": \"gamal\", \"country\":\"Egypt\",\"lang\":\"Arabic\"})\nprint(user)","f46a327a":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nuserCopy = user.copy()\n\nprint(user)\nprint(userCopy)\n\nprint(\"=\"*50)\n\nuser[\"rank\"] = \"4th\"\n\nprint(user)\nprint(userCopy)","409c60d2":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nprint(user.keys())","79e105c9":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nprint(user.values())","ba861bc7":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nprint(user.setdefault(\"name\",\"unKnown\"))\nprint(user.setdefault(\"country\",\"unKnown\"))\nprint(user)","c6767b8e":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nprint(user.popitem())\nprint(user)","f352ab3c":"user = {\n    \"name\" : \"ahmed\",\n    \"age\" : 22\n}\n\nprint(user)\n\nprint(\"=\"*50)\n\nprint(user.items())","7f7face1":"myList  = [\"name\",\"age\",\"country\"]\nmyTuple = (\"name\",\"age\",\"country\")\n\nlistValues   = [\"mohamed\",22,\"Egypt\"] \ntupleValues  = (\"mohamed\",22,\"Egypt\")\nuniqueValue  = \"unknown\"\n\nprint(dict.fromkeys(myList,listValues))\n\nprint(\"=\"*50)\n\nprint(dict.fromkeys(myList,tupleValues))\n\nprint(\"=\"*50)\n\nprint(dict.fromkeys(myList,uniqueValue))\n\nprint(\"=\"*50)\n\nprint(dict.fromkeys(myTuple,listValues))\n\nprint(\"=\"*50)\n\nprint(dict.fromkeys(myTuple,tupleValues))\n\nprint(\"=\"*50)\n\nprint(dict.fromkeys(myTuple,uniqueValue))","6a15d6d9":"mystr = \"\"\n\nprint(mystr.isspace())\n\nprint(\"=\"*50)\n\nprint(f\"100 > 200 : {100 > 200}\")\nprint(f\"100 > 50 : {100 > 50}\")\nprint(f\"100 < 20 : {100 < 20}\")\nprint(f\"100 < 200 : {100 < 200}\")\nprint(f\"100 == 100 : {100 == 100}\")\nprint(f\"100 == 100.00 : {100 == 100.00}\")","57cb2ab9":"#True values\nprint(bool(\"mohamed\"))\nprint(bool(100))\nprint(bool(100.55))\nprint(bool([1,2,3.05,4,5.05]))\nprint(bool([\"a\",\"b\",\"c\"]))\nprint(bool((1,2,3.05,4,5.05)))\nprint(bool((\"a\",\"b\",\"c\")))\nprint(bool({1,2,3.05,4,5.05}))\nprint(bool({\"a\",\"b\",\"c\"}))\nprint(bool({\"a\":1,\"b\":2,\"c\":3.05}))\nprint(bool(True))","7d1f2896":"#False values\nprint(bool())\nprint(bool(0))\nprint(bool(\"\"))\nprint(bool(''))\nprint(bool([]))\nprint(bool(()))\nprint(bool({}))\nprint(bool(None))\nprint(bool(False))","bede582e":"age = 20\ncountry = \"Egypt\"\ngpa = 3.38\n\nprint(age > 15 and country == \"Egypt\")\nprint(age > 15 and country == \"USA\")\nprint(age > 15 and country == \"Egypt\" and gpa > 2.0)\nprint(age > 22 and country == \"Egypt\" and gpa > 2.0)","1efaecbd":"age = 20\ncountry = \"Egypt\"\ngpa = 3.38\n\nprint(age > 15 or country == \"Egypt\")\nprint(age > 15 or country == \"USA\")\nprint(age > 15 or country == \"Egypt\" or gpa > 2.0)\nprint(age > 22 or country == \"Egypt\" or gpa > 2.0)\nprint(age > 22 or country == \"USA\"   or gpa < 2.0)","8bfbb64d":"age = 20\n\nprint(age > 15)\nprint(not age > 15)","bf4f99ca":"x = 20\nprint(x)","40658bad":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x + 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx += 10\nprint(x)","dc3326f7":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x - 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx -= 10\nprint(x)","bb16e544":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x * 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx *= 10\nprint(x)","da4cfa78":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x \/ 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx \/= 10\nprint(x)","15f529da":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x ** 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx **= 10\nprint(x)","09ea8e2e":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x % 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx %= 10\nprint(x)","ab20a90e":"x = 20\nprint(x)\n\nprint(\"=\"*50)\n\nx = x \/\/ 10\nprint(x)\n\nprint(\"=\"*50)\n\nx = 20\nx \/\/= 10\nprint(x)","1d612d66":"print(100 == 50)\nprint(100 == 100)\nprint(100 == 100.00)","b233947d":"print(100 != 50)\nprint(100 != 100)\nprint(100 != 100.00)","18a5f361":"print(100 > 50)\nprint(100 > 100)\nprint(100 > 100.00)","ad3ad0eb":"print(100 < 50)\nprint(100 < 100)\nprint(100 < 100.00)\nprint(100 < 200)","f17f3a77":"print(100 >= 50)\nprint(100 >= 100)\nprint(100 >= 100.00)\nprint(100 >= 200)","b8dae9cb":"print(100 <= 50)\nprint(100 <= 100)\nprint(100 <= 100.00)\nprint(100 <= 200)","17281763":"myInt = 10\nmyFloat = 10.55\n\nprint(myInt)\nprint(type(myInt))\n\nprint(\"=\"*50)\n\nprint(myFloat)\nprint(type(myFloat))\n\nprint(\"=\"*50)\n\nprint(str(myInt))\nprint(type(str(myInt)))\n\nprint(\"=\"*50)\n\nprint(str(myFloat))\nprint(type(str(myFloat)))","6e9ebdb3":"myIntStr = \"10\"\nmyFloatStr = \"10.55\"\n\nprint(myIntStr)\nprint(type(myIntStr))\n\nprint(\"=\"*50)\n\nprint(myFloatStr)\nprint(type(myFloatStr))\n\nprint(\"=\"*50)\n\nprint(int(myIntStr))\nprint(type(int(myIntStr)))\n\nprint(\"=\"*50)\n\n#Error : invalid literal for int() with base 10: '10.55'\n#print(int(myFloatStr))","ab1224bc":"myIntStr = \"10\"\nmyFloatStr = \"10.55\"\n\nprint(myIntStr)\nprint(type(myIntStr))\n\nprint(\"=\"*50)\n\nprint(myFloatStr)\nprint(type(myFloatStr))\n\nprint(\"=\"*50)\n\nprint(float(myIntStr))\nprint(type(int(myIntStr)))\n\nprint(\"=\"*50)\n\nprint(float(myFloatStr))\nprint(type(float(myFloatStr)))","6e55e97a":"myStr = \"mohamed\"\nmyInt = 10\nmyFloat = 10.55\nmyList = [1,2,3,4,5]\nmySet = {1,2,3,4,5}\nmyDict = {\"a\":1,\"b\":2,\"c\":3}\n\nprint(tuple(myStr))\n\n#Error : 'int' object is not iterable\n#print(tuple(myInt))\n\n#Error : 'float' object is not iterable\n#print(tuple(myFloat))\n\nprint(tuple(myList))\n\nprint(tuple(mySet))\n\nprint(tuple(myDict))","db5025f4":"myStr = \"mohamed\"\nmyInt = 10\nmyFloat = 10.55\nmyTuple = (1,2,3,4,5)\nmySet = {1,2,3,4,5}\nmyDict = {\"a\":1,\"b\":2,\"c\":3}\n\nprint(list(myStr))\n\n#Error : 'int' object is not iterable\n#print(list(myInt))\n\n#Error : 'float' object is not iterable\n#print(list(myFloat))\n\nprint(list(myTuple))\n\nprint(list(mySet))\n\nprint(list(myDict))","95cb7dc6":"myStr = \"mohamed\"\nmyInt = 10\nmyFloat = 10.55\nmyTuple = (1,2,3,4,5)\nmyList = [1,2,3,4,5]\nmyDict = {\"a\":1,\"b\":2,\"c\":3}\n\nprint(set(myStr))\n\n#Error : 'int' object is not iterable\n#print(set(myInt))\n\n#Error : 'float' object is not iterable\n#print(set(myFloat))\n\nprint(set(myTuple))\n\nprint(set(myList))\n\nprint(set(myDict))","48803b73":"myStr = \"mohamed\"\nmyInt = 10\nmyFloat = 10.55\nmyTuple = ((\"a\",1),(\"b\",2),(\"c\",3))\nmyList = [[\"a\",1],[\"b\",2],[\"c\",3]]\n\n#Error : unhashable type: 'set'\n#mySet = {{\"a\",1},{\"b\",2},{\"c\",3}}\n\n#Error : dictionary update sequence element #0 has length 1; 2 is required\n#print(dict(myStr))\n\n#Error : 'int' object is not iterable\n#print(dict(myInt))\n\n#Error : 'float' object is not iterable\n#print(dict(myFloat))\n\nprint(dict(myTuple))\n\nprint(dict(myList))","5622c078":"userName = \"Mohamed\"\ncountryList = [\"Egypt\", \"USA\", \"Kuwait\", \"Germany\", \"Italy\"]\ncountry = countryList[4]\n\nif country.lower() == \"egypt\":\n    print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 60% discount.\")\n    \nelif country.lower() == \"usa\":\n    print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 20% discount.\")\n    \nelse:\n    print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 10% discount.\")","baed5122":"userName = \"Mohamed\"\nstudent = True\ncountryList = [\"Egypt\", \"USA\", \"Kuwait\", \"Germany\", \"Italy\"]\ncountry = countryList[0]\n\nif country.lower() == \"egypt\":\n    if student:\n        print(f\"Welcome {userName.capitalize()} because you from {country} and student \\\n          \\nyou will get 80% discount.\")\n    else:\n        print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 60% discount.\")\n    \nelif country.lower() == \"usa\":\n    if student:\n        print(f\"Welcome {userName.capitalize()} because you from {country} and student \\\n          \\nyou will get 40% discount.\")\n    else:\n        print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 20% discount.\")\n    \nelse:\n    if student:\n        print(f\"Welcome {userName.capitalize()} because you from {country} and student \\\n          \\nyou will get 30% discount.\")\n    else:\n        print(f\"Welcome {userName.capitalize()} because you from {country} \\\n          \\nyou will get 10% discount.\")","830adb4d":"minAgeForWatching = 18\nwatcherAge = 18\n\nprint(\"Movie will start now for you :)\" if watcherAge >= minAgeForWatching else \"This movie not good for you.\")","f3904cf9":"myStr = \"mohamed\"\nmyList = [\"mohamed\",\"salah\",\"galal\"]\nmyTuple = (\"mohamed\",\"salah\",\"galal\")\nmySet = {\"mohamed\",\"salah\",\"galal\"}\nmyDict = {\"mohamed\":\"m\", \"salah\":\"s\", \"galal\":\"g\"}\n\nprint(\"m\" in myStr)\nprint(\"s\" in myStr)\nprint(\"M\" in myStr)\n\nprint(\"=\"*50)\n\nprint(\"mohamed\" in myList)\nprint(\"ahmed\" in myList)\nprint(\"galal\" in myList)","c893ff5d":"print(\"tarek\" in myTuple)\nprint(\"Mohamed\" in myTuple)\nprint(\"salah\" in myTuple)\n\nprint(\"=\"*50)\n\nprint(\"hassan\" in mySet)\nprint(\"gamal\" in mySet)\nprint(\"mohamed\" in mySet)  \n\nprint(\"=\"*50)\n\nprint(\"mohamed\" in myDict)\nprint(\"salag\" in myDict)\nprint(\"amr\" in myDict)","273f2252":"myStr = \"mohamed\"\nmyList = [\"mohamed\",\"salah\",\"galal\"]\nmyTuple = (\"mohamed\",\"salah\",\"galal\")\nmySet = {\"mohamed\",\"salah\",\"galal\"}\nmyDict = {\"mohamed\":\"m\", \"salah\":\"s\", \"galal\":\"g\"}\n\nprint(\"m\" not in myStr)\nprint(\"s\" not in myStr)\nprint(\"M\" not in myStr)\n\nprint(\"=\"*50)\n\nprint(\"mohamed\" not in myList)\nprint(\"ahmed\" not in myList)\nprint(\"galal\" not in myList)","1508ca1b":"print(\"tarek\" not in myTuple)\nprint(\"Mohamed\" not in myTuple)\nprint(\"salah\" not in myTuple)\n\nprint(\"=\"*50)\n\nprint(\"hassan\" not in mySet)\nprint(\"gamal\" not in mySet)\nprint(\"mohamed\" not in mySet)  \n\nprint(\"=\"*50)\n\nprint(\"mohamed\" not in myDict)\nprint(\"salag\" not in myDict)\nprint(\"amr\" not in myDict)","46ea4510":"val = 1\nlimit = 10\n\nwhile val <= limit:\n    print(val)\n    val += 1\n    \nelse :\n    print(\"\\n\"+\" Nice Shape :) \".center(21,\"=\"))","7cd65d55":"myFrinds = [\"ahmed\",\"gamal\",\"salah\",\"galal\",\"hassan\",\"hosam\",\"rgab\",\"mustafa\",\"hesham\",\"tarek\",\"tamer\"]\n\ni = 0\n\nwhile i < len(myFrinds):\n    print(f\"#{str(i+1).zfill(2)} : {myFrinds[i]}\")\n    i += 1","69d29f7c":"myList = [1,2,3]\nmyTuble = (1,2,3)\nmySet = {1,2,3}\nmyDict = {\"a\":1, \"b\":2, \"c\":3}\nmyStr = \"abc\"\n\nprint(\"-\"*50)\nprint(\" for loop using list \".center(50,\"-\"))\nprint(\"-\"*50)\n\nfor item in myList:\n    print(item)\n    \n\nprint(\"-\"*50)\nprint(\" for loop using tuble \".center(50,\"-\"))\nprint(\"-\"*50)\n\nfor item in myTuble:\n    print(item)","9a14cd7e":"print(\"-\"*50)\nprint(\" for loop using set \".center(50,\"-\"))\nprint(\"-\"*50)\n\nfor item in mySet:\n    print(item)\n    \nprint(\"-\"*50)\nprint(\" for loop using dict \".center(50,\"-\"))\nprint(\"-\"*50)\n\nfor item in myDict:\n    print(item)\n    \nprint(\"-\"*50)\nprint(\" for loop using string \".center(50,\"-\"))\nprint(\"-\"*50)\n\nfor item in myStr:\n    print(item)","7ffabb0b":"peoples = {\n    \"mohamed\":{\n        \"ML\":\"80%\",\n        \"DL\":\"60%\",\n        \"Python\":\"70%\"\n    },\n    \n    \"salah\":{\n        \"ML\":\"60%\",\n        \"DL\":\"20%\",\n        \"Python\":\"40%\"\n    },\n    \n    \"galal\":{\n        \"ML\":\"15%\",\n        \"DL\":\"5%\",\n        \"Python\":\"30%\"\n    }\n}\n\nfor name in peoples:\n    print(\"=\"*50)\n    print(f\" Technical skills of {name} \".center(50,\"=\"))\n    print(\"=\"*50)\n    print()\n    \n    for skill in peoples[name]:\n        print(f\"- {skill} = {peoples[name][skill]}\")\n        \n    print()    ","6413586a":"peoples = {\n    \"mohamed\":{\n        \"ML\":\"80%\",\n        \"DL\":\"60%\",\n        \"Python\":\"70%\"\n    },\n    \n    \"salah\":{\n        \"ML\":\"60%\",\n        \"DL\":\"20%\",\n        \"Python\":\"40%\"\n    },\n    \n    \"galal\":{\n        \"ML\":\"15%\",\n        \"DL\":\"5%\",\n        \"Python\":\"30%\"\n    }\n}\n\nfor name, skills in peoples.items():\n    print(\"=\"*50)\n    print(f\" Technical skills of {name} \".center(50,\"=\"))\n    print(\"=\"*50)\n    print()\n    \n    for skillName , skillProgress in skills.items():\n        print(f\"- {skillName} = {skillProgress}\")\n        \n    print()    ","b669f5ff":"myList = [1,2,3,4,5,6,7,8,9,10]\n\nfor i in myList:\n    if i == 5:\n        continue\n    print(i)","3b19bd96":"myList = [1,2,3,4,5,6,7,8,9,10]\n\nfor i in myList:\n    if i == 5:\n        break\n    print(i)","d494aa8d":"myList = [1,2,3,4,5,6,7,8,9,10]\n\nfor i in myList:\n    if i == 5:\n        #without pass will get error: unexpected EOF while parsing\n        pass\n    print(i)","a0bc3d56":"#without pass will get error: unexpected EOF while parsing\nif 10 > 5:\n    pass","24684414":"#function without return\ndef function_name():\n    print(\"Hello Python From Inside Function\")\n    \nfunction_name()  ","d12d3667":"#function with return\ndef function_name():\n    return \"Hello Python From Inside Function\"\n    \nfunctionReturnValue = function_name()  \nprint(functionReturnValue)","5af6ee77":"def say_hellow(name):\n    print(f\"Hellow {name.strip().capitalize()}\")\n    \nsay_hellow(\"mohamed\")\nsay_hellow(\"   ahmed\")\nsay_hellow(\"galal    \")\nsay_hellow(\"     osama    \")","4da276cd":"def add(num1,num2):\n    \n    if type(num1) == int or type(num1) == float and type(num2) == int or type(num2) == float:\n        return num1 + num2\n    \n    else:\n        return \"Only Numbers Allowed\"\n\nresult = add(1.5,2)\nprint(result)","1d12fc73":"myList = [1, 2, 3, 5]\nmyTuple = (1, 2, 3, 5)\nmyStr = \"ali\"\n\nprint(myList)\nprint(*myList)\n\nprint(\"=\"*50)\n\nprint(myTuple)\nprint(*myTuple)\n\nprint(\"=\"*50)\n\nprint(myStr)\nprint(*myStr)","e575b486":"def add(*numbers):\n    if len(numbers) < 2:\n        return \"You Must Enter Two Numbers At Least\"\n    else:\n        result = 0\n        for num in numbers:\n            result += num\n            \n        return result  \n    \nprint(add(1,2,3,4,5))  \nprint(add(*[1,2,3,4,5]))  ","1f5b3d2b":"def show_details(name, *skills):\n    \n    print(f\"Hello {name} Your Skills Is: \")\n    \n    for skill in skills:\n        print(skill)\n\nshow_details(\"Osama\", \"Html\", \"CSS\", \"JS\")\nprint(\"=\"*50)\nshow_details(\"Ahmed\", \"Html\", \"CSS\", \"JS\", \"Python\", \"PHP\", \"MySQL\")","66a4dcca":"mySkills = {\n  'Html': \"80%\",\n  'Css': \"70%\",\n  'Js': \"50%\",\n  'Python': \"80%\",\n  \"Go\": \"40%\"\n}\n\nprint(mySkills)\nprint(*mySkills)","da665c7a":"mySkills = {\n  'Html': \"80%\",\n  'Css': \"70%\",\n  'Js': \"50%\",\n  'Python': \"80%\",\n  \"Go\": \"40%\"\n}\n\ndef show_skills_and_progress(**skills):\n    for skill, value in skills.items():\n        print(f\"{skill} => {value}\")\n\nshow_skills_and_progress(**mySkills)","c96521e1":"def show_skills_and_progress(**skills):\n    for skill, value in skills.items():\n        print(f\"{skill} => {value}\")\n\nshow_skills_and_progress(Html = \"80%\" , Css=\"70%\", Js =\"50%\", Python = \"80%\", Go = \"40%\")","32cd973d":"mySkills = {\n  'Html': \"80%\",\n  'Css': \"70%\",\n  'Js': \"50%\",\n  'Python': \"80%\",\n  \"Go\": \"40%\"\n}\n\ndef show_skills(*skills):\n    for skill in skills:\n        print(f\"{skill}\")\n\nshow_skills(*mySkills)","f06fe483":"def say_hellow(name, to_country = \"unknown\", from_country = \"unknown\"):\n    print(f\"Welcome {name} we wish spend nice days in {to_country} and return happy to {from_country}\")\n    \nsay_hellow(\"mohamed\",\"Germany\",\"Egypt\")    \nsay_hellow(\"mohamed\",\"Germany\")   \nsay_hellow(\"mohamed\")   ","a7e04621":"def add(num1, num2 = 0):\n    return num1+num2\n\nprint(add(5,6))\nprint(add(5))","f5bbcd09":"x = 5\n\ndef one():\n    x = 4\n    print(f\"x value inside one() function = {x}\")\n       \ndef two():\n    x = 3\n    print(f\"x value inside two() function = {x}\")    \n\nprint(f\"x value from global scope = {x}\") \none()\ntwo()","3eb5be44":"x = 5\n\ndef one():\n    x = 4\n    print(f\"x value inside one() function = {x}\")\n       \ndef two():\n    \n    #overwrite x value \n    global x\n    \n    x = 3\n    print(f\"x value inside two() function = {x}\")    \n\nprint(f\"x value from global scope = {x}\") \none()\ntwo()\n\nprint(\"=\"*50)\n\nprint(f\"x value from global scope = {x}\") \none()\ntwo()","cad3c4cf":"def sayHellow(name = \"unknown\"):\n    print(f\"Hellow {name}\")\n    \nsayHellow()\nsayHellow(\"mohamed\")\n\nprint(\"=\"*50)\n\noutput = lambda name = \"unknown\" : print(f\"Hellow {name}\")\noutput()\noutput(\"mohamed\")","cec82717":"def add(num1, num2):\n    return num1 + num2\n\nresult = add(100,200)\nprint(result)\n\nprint(\"=\"*50)\n\nresultFromLambda = lambda num1, num2 : num1 + num2\nresultFromLambda(100,500)","2c27d367":"myList = [1,2,3,4,5]\nmyTuble = (1,2,3,4,None)\nmySet = {1,2,3,4}\nmyStr = \"\"\nmyDict = {\"a\":1,\"\":2}\n\nprint(all(myList))\nprint(all(myTuble))\nprint(all(mySet))\n\n#Check if it is a bug in python\nprint(all(myStr))\n\nprint(all(myDict))","795ef885":"myList = [1,2,3,4,5]\nmyTuble = (1,2,3,4,None)\nmySet = {1,2,3,4}\nmyStr = \"\"\nmyDict = {\"a\":1,\"\":2}\n\nprint(any(myList))\nprint(any(myTuble))\nprint(any(mySet))\nprint(any(myStr))\nprint(any(myDict))","6cf47fd6":"print(type(bin(5)))\nprint(\"=\"*50)\nfor i in range(11):\n    print(f\"Binary representation of {str(i).zfill(2)} = {bin(i)}\")","a1fa7aee":"x = 1\ny = 2\nz = 3\n\nprint(f\"The value of x variable located on memory address = {id(x)}\")\nprint(f\"The value of y variable located on memory address = {id(y)}\")\nprint(f\"The value of z variable located on memory address = {id(z)}\")","1c6a6bd5":"myList = [1,2,3,4,5]\nmyTuble = (1,2,3,4)\nmySet = {1,2,3,4}\nmyStr = \"\"\nmyDict = {5:\"ab\",6:\"cd\"}\n\nprint(sum(myList))\nprint(sum(myTuble))\nprint(sum(mySet, 50))\nprint(sum(myStr))\nprint(sum(myDict))","bf637e3c":"print(round(10.785))\nprint(round(10.785,None))\nprint(round(10.785,0))\n\nprint(\"=\"*50)\n\nprint(round(10.785,-1))\nprint(round(10.785,2))\nprint(round(10.785,3))\nprint(round(10.785,1))\nprint(round(10.555,1))\nprint(round(10.555,2))\nprint(round(10.555,1))\n\nprint(\"=\"*50)\n\nprint(round(10.2))\nprint(round(10.5))\nprint(round(10.6))","ea25b243":"print( list( range(0     ) ) )\nprint( list( range(5     ) ) )\nprint( list( range(5,11  ) ) )\nprint( list( range(5,11,2) ) )","2b05c0fa":"print(\"Welcom Python\")\n\nprint(\"=\"*50)\n\nprint(\"Welcom Python\",\"I Love Python\")\n\nprint(\"=\"*50)\n\nprint(\"Welcom Python\",\"I Love Python\", sep = \" @ \")\n\nprint(\"=\"*50)\n\nprint(\"Welcom Python\")\nprint(\"I Love Python\")\n\nprint(\"=\"*50)\n\nprint(\"Welcom Python\", end = \"\\t\")\nprint(\"I Love Python\")\n\nprint(\"=\"*50)\n\nprint(\"Welcom Python\", end = \" ---------- \")\nprint(\"I Love Python\")","d1cefe30":"print(abs(5))\nprint(abs(-5))","d11b9454":"print(f\"2 ^ 5  = {pow(2,5)}\")\nprint(f\"2 ^ 5 % 10 =  {pow(2,5,10)}\")","c2322b75":"myList_1 = [1,2,3,4,5]\nmyList_2 = [10,20,30,40,50]\nmyList_3 = [6]\nmyList_4 = [60]\n\nprint(max(myList_1))\nprint(max(myList_1, myList_2))\nprint(max(myList_1, myList_3))\nprint(max(myList_2, myList_4))","09fc6688":"myList_1 = [1,2,3,4,5]\nmyList_2 = [10,20,30,40,50]\nmyList_3 = [6]\nmyList_4 = [60]\n\nprint(min(myList_1))\nprint(min(myList_1, myList_2))\nprint(min(myList_1, myList_3))\nprint(min(myList_2, myList_4))","4b702940":"myList = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]\n\nprint(myList[0:3])\nprint(myList[slice(0,3)])\n\nprint(\"=\"*50)\n\nprint(myList[0:3])\nprint(myList[slice(3)])\n\nprint(\"=\"*50)\n\nprint(myList[3:5])\nprint(myList[slice(3,5)])\n\nprint(\"=\"*50)\n\nprint(myList[0:5:1])\nprint(myList[slice(0,5,1)])\n\nprint(\"=\"*50)\n\nprint(myList[0:5:2])\nprint(myList[slice(0,5,2)])","d57d2022":"def formatText(text):\n    return f\"- {text.strip().capitalize()} -\"\n\nnames = [\"mohamed\",\"salah    \",\"    galal\",\"   mustafa   \"]\n\nfor formatedText in map(formatText, names):\n    print(formatedText)","edb28e46":"names = [\"mohamed\",\"salah    \",\"    galal\",\"   mustafa   \"]\n\nfor formatedText in map(lambda text : f\"-- {text.strip().capitalize()} --\" , names):\n    print(formatedText)","c5a8a3a5":"for item in map(round,[10.5,12.25,100.59,23.89]):\n    print(item)","87f45dba":"def checkNum(num):\n    return num > 10\n\nnumbers = [5,8,10,21,15,18]\n\nfor num in filter(checkNum, numbers):\n    print(num)","24a978f7":"def checkText(text):\n    return text.startswith(\"M\") or text.startswith(\"m\")\n\ntexts = [\"Mohamed\",\"ali\",\"montaser\",\"gamal\"]\n\nfor text in filter(checkText, texts):\n    print(text)","34a65cfd":"mytexts = [\"Mohamed\",\"ali\",\"montaser\",\"gamal\"]\n\nfor mytext in filter(lambda mytext : mytext.startswith(\"M\") or mytext.startswith(\"m\"), mytexts):\n    print(mytext)","9ab2f684":"from functools import reduce\n\ndef mysum(num1,num2):\n    return num1 + num2\n\nmyNumbers = [1,2,3,4,5,6,7,8,9,10]\nresult = reduce(mysum,myNumbers)\n\nprint(result)","d4846e67":"myNumbers = [1,2,3,4,5,6,7,8,9,10]\nresult = reduce(lambda num1, num2 : num1 - num2 ,myNumbers)\n\nprint(result)","29849021":"names = [\"mohamed\",\"ali\",\"gamal\",\"naser\",\"salah\",\"galal\"]\n\nfor name in enumerate(names):\n    print(name)\n    \nprint(\"=\"*50)    \n\nfor count, name in enumerate(names, 100):\n    print(f\"{count} - {name}\")","6e8cf6c6":"print(help(sum))","8f338216":"skills = [\"html\",\"css\",\"js\",\"jquery\"]\n\nprint(type(reversed(skills)))\nprint(reversed(skills))\n\nfor skill in reversed(skills):\n    print(skill)","69305ce1":"import math\n\nprint(math.pi)","3861ff37":"import math as m\n\nprint(m.pi)","01d2caac":"from math import sin\n\nprint(sin(30))","64848508":"from math import sin as s\n\nprint(s(30))","86bfe7a9":"!pip --version","bb1ff1b3":"mypackages = !pip list\nprint(f\"You have {len(mypackages)} installed in your system\")\nprint(\"=\"*50)\nmypackages","65df3520":"#!pip install pyfiglet == 1.14.2\n#!pip install pyfiglet > 1.14.2\n#!pip install pyfiglet < 1.14.2\n#!pip install pyfiglet >= 1.14.2\n#!pip install pyfiglet <= 1.14.2\n\n!pip install pyfiglet","e9db79ec":"!pip install pip --upgrade","529514d4":"!pip install --user pip --upgrade","7046acf8":"import pyfiglet\n\nprint(pyfiglet.figlet_format(\"M . Abdullah Kamel\"))","2f641698":"import datetime as dt\n\nprint(dir(dt))\nprint(\"=\"*50)\nprint(dir(dt.datetime))","85b32a34":"import datetime as dt\n\nprint(dt.datetime.now())\n\nprint(\"=\"*50)\n\nprint(type(dt.datetime.now()))","6ff31411":"print(f\"current date : {dt.datetime.now().date()}\")\n\nprint(\"=\"*50)\n\nprint(f\"current year : {dt.datetime.now().year}\")\n\nprint(\"=\"*50)\n\nprint(f\"current month : {dt.datetime.now().month}\")\n\nprint(\"=\"*50)\n\nprint(f\"current day : {dt.datetime.now().day}\") ","cfa479a8":"print(f\"current time : {dt.datetime.now().time()}\")\n\nprint(\"=\"*50)\n\nprint(f\"current hour : {dt.datetime.now().time().hour}\")\n\nprint(\"=\"*50)\n\nprint(f\"current minute : {dt.datetime.now().time().minute}\")\n\nprint(\"=\"*50)\n\nprint(f\"current second : {dt.datetime.now().time().second}\")\n\nprint(\"=\"*50)\n\nprint(f\"current microsecond : {dt.datetime.now().time().microsecond}\")","ef13c068":"print(f\"min date : {dt.datetime.min}\")\n\nprint(\"=\"*50)\n\nprint(f\"max date : {dt.datetime.max}\")","c60841a8":"print(f\"min date : {dt.date.min}\")\n\nprint(\"=\"*50)\n\nprint(f\"max date : {dt.date.max}\")","ceaa77e9":"print(f\"min time : {dt.time.min}\")\n\nprint(\"=\"*50)\n\nprint(f\"max time : {dt.time.max}\")","5bf23b2e":"print(dt.datetime(1995, 9, 15))\n\nprint(\"=\"*50)\n\nprint(dt.datetime(1995, 9, 15, 5, 30, 7, 123456))","f185d48e":"myBirthDate = dt.datetime(2020, 7, 20)\ncurrdate = dt.datetime.now()\n\nprint(f\"I have {currdate - myBirthDate}\")\n\nprint(\"=\"*50)\n\nprint(f\"I have {(currdate - myBirthDate).days} day\")","06c33d44":"myBirthday = dt.datetime(2021, 7, 15)\n\nprint(myBirthday)\nprint(myBirthday.strftime(\"%a\"))\nprint(myBirthday.strftime(\"%A\"))\nprint(myBirthday.strftime(\"%b\"))\nprint(myBirthday.strftime(\"%B\"))","beadc2d9":"print(myBirthday.strftime(\"%d %B %Y\"))\nprint(myBirthday.strftime(\"%d, %B, %Y\"))\nprint(myBirthday.strftime(\"%d\/%B\/%Y\"))\nprint(myBirthday.strftime(\"%d - %B - %Y\"))\nprint(myBirthday.strftime(\"%B - %Y\"))","e6e9e802":"myString = \"Mohamed Abdullah\"\n\nmyList = [1, 2, 3, 4, 5]\n\nfor letter in myString:\n    print(letter, end=\" \")\n\nprint()\n\nfor number in myList:\n    print(number, end=\" \")","084f154c":"#to convert iterable to iterator\nmyIterator = iter(myString)\n\nprint(myIterator)\n\nprint(\"=\"*50)\n\nprint(next(myIterator))\nprint(next(myIterator))\nprint(next(myIterator))\nprint(next(myIterator))\nprint(next(myIterator))\nprint(next(myIterator))\nprint(next(myIterator))\n\nprint(\"=\"*50)\n\nfor letter in iter(\"Elzero\"):\n    print(letter, end=\" \")","c47328d8":"def myGenerator():\n    yield 1\n    yield 2\n    yield 3\n    yield 4\n    yield 5\n    \nfor item in myGenerator():\n    print(item)\n    \nprint(\"=\"*50)  \n\nprint(next(myGenerator()), end = \" \")\nprint(next(myGenerator()), end = \" \")\nprint(next(myGenerator()))","7dac0f8d":"myGen = myGenerator()\n\nprint(next(myGen))\nprint(\"Execute some of code\")\nprint(next(myGen))\nprint(next(myGen))\nprint(\"Execute some of code\")\nprint(next(myGen))\nprint(next(myGen))\n\nprint(\"=\"*50) \n\n#nothing will printed\nfor i in myGen:\n    print(i)","1c4169b4":"def myDecorator(myfunc):\n    \n    def wrapper():\n        \n        print(\"start decorator\")\n        \n        myfunc()\n        \n        print(\"end decorator\")\n        \n    return wrapper()  \n\ndef sayHellow():\n    print(\"Hellow my friends\")\n    \nmyDecorator(sayHellow)","43f085a7":"def myDecorator(myfunc):\n    \n    def wrapper():\n        \n        print(\"start decorator\")\n        \n        myfunc()\n        \n        print(\"end decorator\")\n        \n    return wrapper  \n\n@myDecorator\ndef sayHellow():\n    print(\"Hellow my friends\")\n    \nsayHellow()    ","13a2f4cf":"def myDecorator_1(myfunc):\n    \n    def wrapper():\n        \n        print(\"start decorator 1\")\n        \n        myfunc()\n        \n        print(\"end decorator 1\")\n        \n    return wrapper\n\ndef myDecorator_2(myfunc):\n    \n    def wrapper():\n        \n        print(\"start decorator 2\")\n        \n        myfunc()\n        \n        print(\"end decorator 2\")\n        \n    return wrapper\n\n@myDecorator_1\n@myDecorator_2\ndef sayHellow():\n    print(\"Hellow my friends\") \n    \nsayHellow()   ","30e22dbf":"def myDecorator_1(func):  # Decorator\n    \n    def nestedFunc(num1, num2):  # Any Name Its Just For Decoration\n        if num1 < 0 or num2 < 0:\n            print(\"Beware One Of The Numbers Is Less Than Zero\")\n\n        func(num1, num2)  # Execute Function\n        \n\n    return nestedFunc  # Return All Data\n\ndef myDecorator_2(func):  # Decorator\n\n    def nestedFunc(num1, num2):  # Any Name Its Just For Decoration\n        print(\"Coming From Decorator Two\")\n        \n        func(num1, num2)  # Execute Function\n\n    return nestedFunc  # Return All Data\n\n@myDecorator_1\n@myDecorator_2\ndef calculate(n1, n2):\n    print(n1 + n2)\n\ncalculate(-5, 90)\n\nprint(\"=\"*50)\n\n@myDecorator_2\n@myDecorator_1\ndef calculate(n1, n2):\n    print(n1 + n2)\n    \ncalculate(-5, 90)","e9f3bec1":"from time import time\nimport datetime as dt\n\ndef myDecorator(func):\n    \n    def wrapper():\n        start = time()\n        \n        func()\n        \n        end = time()\n        \n        print()\n        print(\"=\"*50)        \n        print(f\"\\nFunction Running Time Is: {end - start}\")\n        \n    return wrapper \n\n@myDecorator\ndef myBigLoop():\n    for i in range(0,100):\n        print(i , end = \" \")\n        \nmyBigLoop()      ","dbcfb444":"list1 = [1,2,3,4,5]\nlist2 = [\"a\",\"b\",\"c\"]\n\nfor item in zip(list1,list2):\n    print(item)\n    \nprint(\"=\"*50)  \n\nfor item1, item2 in zip(list1,list2):\n    print(f\"list #1 item {item1}\")\n    print(f\"list #2 item {item2}\")","fa220ce9":"list1 = [1, 2, 3, 4, 5]\nlist2 = [\"A\", \"B\", \"C\", \"D\"]\ntuple1 = (\"Man\", \"Woman\", \"Girl\", \"Boy\")\ndict1 = {\"Name\": \"Osama\", \"Age\": 36, \"Country\": \"Egypt\", \"Skill\": \"Python\"}\n\nfor item1, item2, item3, item4 in zip(list1, list2, tuple1, dict1):\n    print(\"List 1 Item =>\", item1)\n    print(\"List 2 Item =>\", item2)\n    print(\"Tuple 1 Item =>\", item3)\n    print(\"Dict 1 Key =>\", item4, \"Value =>\", dict1[item4])\n    print(\"=\"*50)","2f25aaf8":"def sayHellow(name):\n    '''This function say hellow to specific name'''\n    print(f\"Hellow {name}\")\n    \nprint(help(sayHellow)) \nprint(\"=\"*50)\nprint(sayHellow.__doc__)","2df66d69":"def sayHellow(name):\n    \"\"\"\n    Desc: \n        This function say hellow to specific name.\n    Parameter:\n        name that function say hellow for it.\n    Return:\n        No return.\n    \n    \"\"\"\n    print(f\"Hellow {name}\")\n    \nprint(help(sayHellow)) \nprint(\"=\"*50)\nprint(sayHellow.__doc__)","e4f45cb3":"x = -10\n\nif x < 0:\n    # raise Exception(\"x value must be greater than 0\")\n    print(\"You can remove the above comment to see exception output\")         ","d4c2c1b8":"y = \"10\"\n\nif type(y) != int:\n    # raise ValueError(\"Only Numbers Allowed\")\n    print(\"You can remove the above comment to see exception output\")","e598c755":"age_str = \"20\"\n\ntry :\n    age = int(age_str)\n    \nexcept :\n    \n    print(\"You must enter a number not string\")\n    \nelse :\n    \n    print(\"Bravo you enter valid value\")\n    \nfinally :\n    \n    print(\"Programe is finished good by\")","eacbbcce":"try :\n    #print(10\/0)\n    print(unknownvariable)\n    #print(int(\"hellow\"))\n    \nexcept ZeroDivisionError :\n    print(\"Can noy divied by zero\")\n    \nexcept NameError :\n    print(\"Identifier Not Found\")  \n    \nexcept:\n    print(\"Some error occure\")","84dd7c60":"def say_hello(name) -> str:\n    print(f\"Hello {name}\")\n\nsay_hello(10)","cb1b6d5f":"def calculate(n1:int, n2:int) -> int:\n    print(n1 + n2)\n\ncalculate(10, 40)","b07fc1d0":"import re\n#regexp to match email\n#^[A-z0-9_?.?]+@[A-z]+.[A-z]+$\n\n#regexp to match email end with .com or .net only\n#$[A-z0-9_?.?]+@[A-z]+.(com|net)$\n\nmy_search = re.search(r\"[A-Z]{2}\", \"OOsamaEElzero\")\n\nprint(my_search)\nprint(f\"match position from index {my_search.span()[0]} to {my_search.span()[1]}\")\nprint(f\"string search  : {my_search.string}\")\nprint(f\"matched string : {my_search.group()}\")\n\nif len(my_search.string) == len(my_search.group()):\n    print(f\"match percent = 100% => full match :)\")\nelse:\n    print(f\"match percent = {int((len(my_search.group())\/len(my_search.string))*100)}%\")","ab9ed7ea":"email = \"mohamed.abdullah.kamel1997@gmail.com\"\nis_email = re.search(r\"^[A-z0-9_?.?]+@[A-z]+.[A-z]+$\",email)\n\nif is_email:\n    print(f\"match position from index {is_email.span()[0]} to {is_email.span()[1]}\")\n    print(f\"string search  : {is_email.string}\")\n    print(f\"matched string : {is_email.group()}\")\n    \n    if len(is_email.string) == len(is_email.group()):\n        print(f\"match percent = 100% => full match :)\")\n    else:\n        print(f\"match percent = {int((len(is_email.group())\/len(is_email.string))*100)}%\")\n    \nelse:\n    print(\"This is Not A Valid Email\")","90c84b8a":"search = re.findall(r\"[A-Z]{2}\",\"MOhamED ABD\")\nprint(search)\n\nprint(\"=\"*50)\n\nsearch = re.findall(r\"[A-Z]{2}\",\"mohamed abdullah\")\nprint(search)","a78e548d":"string_one = \"I Love Python Programming Language\"\n\nsearch_one = re.split(r\"\\s\", string_one)\n\nprint(search_one)\n\nprint(\"=\" * 50)\n\nsearch_two = re.split(r\"\\s\", string_one,1)\n\nprint(search_two)\n\nprint(\"=\" * 50)\n\nstring_three = \"How-To_Write_A_Very-Good-Article\"\n\nsearch_three = re.split(r\"-|_\", string_three)\n\nprint(search_three)\n\nprint(\"=\" * 50)\n\nstring_four = \"How-To_Write_A_Very-Good-Article\"\n\nsearch_four = re.split(r\"-|_\", string_four,2)\n\nprint(search_four)","52f41efe":"my_string = \"I Love Python\"\n\nprint(re.sub(r\"\\s\", \"-\", my_string))\n\nprint(\"=\" * 50)\n\nprint(re.sub(r\"\\s\", \"-\", my_string, 1))","806ddc28":"print(re.search(r\"[A-Z]+\", \"mohamed\"))\n\nprint(\"=\" * 50)\n\nprint(re.search(\"[A-Z]+\",\"mohamed\",re.IGNORECASE))","f5f15414":"print(re.search(r\".+\", \"mohamed\\nabdullah\"))\n\nprint(\"=\" * 50)\n\nprint(re.search(\".+\",\"mohamed\\nabdullah\",re.DOTALL))","d374e603":"print(re.search(r\"[a-z]+\", \"mohamed\\nabdullah\"))\n\nprint(\"=\" * 50)\n\nprint(re.search(r\"[a-z]+\",\"mohamed\\nabdullah\",re.MULTILINE))","7fd299ab":"### 5.4.28 isalpha()","1c84c9ad":"## 13.5 ( >= )","4d7ac819":"## 19.5 sum()\nReturn the sum of a 'start' value (default: 0) plus an iterable of numbers.<br>\n\nWhen the iterable is empty, return the start value.\n<br>\nThis function is intended specifically for use with numeric values and may reject non-numeric types.","df3b43ab":"## 17.2 Loops Helpers\n\n* break\n* continue\n* pass","42b17458":"## 16.2 not in","aeda721b":"### 5.4.7 zfill()","ce5b7a56":"### 5.4.18 find()","a2b13f7d":"## 20.2 Install external packages\n\n* Package containe many modules\n* External packages downloaded from internet\n* You can install package using python package manager [pip]\n* [pip] install package and it's dependencies\n\n### 20.2.1 Check [pip] version","21d9ee20":"## 13.4 ( < )","5b531cd6":"## 13.6 ( <= )","d5d0ae28":"### 5.4.21 splitlines()","df536fa9":"### 5.4.6 capitalize()","c1274ebb":"## 18.3 Function Packing, Unpacking Arguments","ddd1bee6":"## 18.2 Function Parameters and Arguments\n\n* def                     => Function Keyword [Define]\n* say_hello()             => Function Name\n* name                    => Parameter\n* print(f\"Hello {name}\")  => Task\n* say_hello(\"Ahmed\")      => Ahmed is The Argument","13cb3a51":"## 6.2 Convertion Rules\n1. You can convert from int to float or complex.\n2. You can convert from float to int or complex.\n2. You can not convert complex to any type.","9fc63551":"### 9.1.5 remove()","f1f12343":"## 21.6 Start And End Of Time","375c02d7":"### 9.1.4 copy()","5aec6059":"### 5.4.19 rjust()","510147d2":"## 21.3 Current Time","78784ff9":"## 21.4 Start And End Of Date And Time","a6f9b27c":"### 5.4.20 ljust()","e9373810":"### 20.2.3 Install external pakage\n\nWe will install package named pyfiglet.","bed7a0fc":"### 5.4.24 isspace()","cd82a99d":"## 13.2 ( != )","38838c9e":"## 21.9 Format Date\n\nhttps:\/\/strftime.org\/","f8abc39f":"## 9.1 Set Methods\n\n* clear()\n* union()\n* add()\n* copy()\n* remove()\n* discard()\n* pop()\n* update()\n* difference()\n* difference_update()\n* intersection()\n* intersection_update()\n* symmetric_difference()\n* symmetric_difference_update()\n* issuperset()\n* issubset()\n* isdisjoint()\n\n### 9.1.1 clear()","d5317857":"### 10.1.8 items()","3d3065ff":"### 5.4.12 center()","0bdb03ba":"## 18.5 Function Scope","69c96245":"### 5.4.10 split()","ae0e9a93":"## 14.7 dict()","0b17a092":"## 12.8 ( \/\/= ) ","d97baaf5":"## 19.18 help()","e7b02a1c":"# 22. Iterable Vs Iterator\n\n**Iterable**\n* Object Contains Data That Can Be Iterated Upon\n* Examples (String, List, Set, Tuple, Dictionary)\n\n**Iterator**\n* Object Used To Iterate Over Iterable Using next() Method Return 1 Element At A Time\n* You Can Generate Iterator From Iterable When Using iter() Method\n* For Loop Already Calls iter() Method on The Iterable Behind The Scene\n* Gives \"StopIteration\" If Theres No Next Element\n\n## 22.1 Iterable Exampels","c2e594f1":"# 27. Errors And Exception Raising\n\n* Exceptions Is A Runtime Error Reporting Mechanism\n* Exception Gives You The Message To Understand The Problem\n* Traceback Gives You The Line To Look For The Code in This Line\n* Exceptions Have Types (SyntaxError, IndexError, KeyError, Etc...)\n* Exceptions List https:\/\/docs.python.org\/3\/library\/exceptions.html\n* raise Keyword Used To Raise Your Own Exceptions","9fe5ba33":"### 20.1.3 Function without alias","4783ae99":"## 14.5 list()","ca918fd0":"## 5.4 String Methods\n\n* len()\n* strip()\n* rstrip()\n* lstrip()\n* title()\n* capitalize()\n* zfill()\n* upper()\n* lower()\n* split()\n* rsplit()\n* center()\n* count()\n* swapcase()\n* startswith()\n* endswith()\n* index()\n* find()\n* rjust()\n* ljust()\n* splitlines()\n* expandtabs()\n* istitle()\n* isspace()\n* islower()\n* isupper()\n* isidentifier()\n* isalpha()\n* isalnum()\n* replace()\n* join()\n\n### 5.4.1 len()","359bd703":"## 14.2 int()","56bad609":"## 19.10 pow()\nEquivalent to x\\*\\*y (with two arguments) or x\\*\\*y % z (with three arguments)","3358c1c7":"## 14.6 set()","2b72c8e0":"# 23. Generator\n\n* Generator is a Function With \"yield\" Keyword Instead of \"return\"\n* It Support Iteration and Return Generator Iterator By Calling \"yield\"\n* Generator Function Can Have one or More \"yield\"\n* By Using next() It Resume From Where It Called \"yield\" Not From Begining\n* When Called, Its Not Start Automatically, Its Only Give You The Control","2bc358f5":"### 20.1.1 Module without alias","2b1bd725":"# 10. Dictionary\n\n* Dict items enclosed in curly braces.\n* Dict items are contains key : value.\n* Dict key need to be immutable => (number, string, tuple) list not allowed.\n* Dict value can have any data types.\n* Dict key need to be unique.\n* Dict is not ordered, you can access its element with key.","77280a96":"### 5.4.30 replace()","da48f497":"### 8.1.2 index()","3d5bbe55":"### 9.1.12 intersection_update()","6e410a43":"# 9. Set\n\n* Set items enclosed in curly braces.\n* Set items are not ordered and not indexed.\n* Set indexing and slicing can not be done.\n* Set has only immutable data types (numbers, strings, tuples) list and dict are not.\n* Set items is unique.","3a66ea54":"### 20.2.2 Check already installed packages in your system","956c81c3":"### 10.1.4 keys()","67a63627":"## 27.1 Exceptions Handling\n\n* **try     :** Try The Code and Test Errors.\n* **except  :** Handle The Errors If Its Found.\n* **else    :** If Theres No Errors.\n* **finally :** Run The Code whatever happen.","8e0893fe":"## 12.4 ( *= ) ","a1835082":"## 19.13 slice()\n\nslice(stop)\n<br>\nslice(start, stop[, step])\n<br><br>\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2])","4ef89ab1":"## 19.12 min()\n\nWith a single iterable argument, return its smallest item. The default keyword-only argument specifies an object to return\n<br>\nif the provided iterable is empty. With two or more arguments, return the smallest argument.","e7b820aa":"## 19.7 range()\nReturn an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.","a2bf701b":"### 9.1.15 issuperset()","a25bb2da":"### 5.4.15 startswith()","26c01033":"### 9.1.9 difference()","0459905f":"### 5.4.4 lstrip()","91c9a49d":"## 189.17 enumerate()\n\nenumerate(iterable, start = 0)","7ccfec05":"### 9.1.16 issubset()","2383babf":"### 5.4.17 index()","08c6c404":"### 5.5.2 String Formating (New Way)","81a3c7b2":"### 5.4.22 expandtabs()","96f0b7c4":"# Gentle Introduction To Python\n\n\n![Gentle Introduction To Python](https:\/\/365datascience.com\/resources\/blog\/2017-11-Programming-in-900-words-min.png)\n\n[Image Source](https:\/\/365datascience.com\/tutorials\/python-tutorials\/python-programming-explained\/)\n\n**Welcome All \ud83d\ude42**\n\nIn this notebook, We will learn together python language fundamentals.\n\nWe will talk about the following:\n\n1. Hello World\n2. Comments\n3. Data Types Overview\n4. Escape Sequences Characters\n5. Strings\n6. Numbers\n7. Lists\n8. Tuples \n9. Set\n10. Dictionary\n11. Boolean\n12. Assignment Operators\n13. Comparison Operators\n14. Type Conversion\n15. Control Flow ( if, elif, and else )\n16. Membership Operators\n17. Loops\n18. Function\n19. Built In Functions\n20. Built In Modules\n21. Date And Time\n22. Iterable Vs Iterator\n23. Generator\n24. Decorators\n25. Loop On Many Iterable With (ZIP)\n26. Doc string\n27. Errors And Exception Raising\n28. Type hinting\n\n**Let's start**","ec18f91c":"## 11.1 Boolean Operators\n\n* and\n* or \n* not\n\n### 11.1.1 and","88a138e9":"### 10.1.6 setdefault()","8e3d506d":"# 24. Decorators\n\n* Sometimes Called Meta Programming\n* Everything in Python is Object Even Functions\n* Decorator Take A Function and Add Some Functionality and Return It\n* Decorator Wrap Other Function and Enhance Their Behaviour\n* Decorator is Higher Order Function (Function Accept Function As Parameter)\n\n## 24.1 Exampel 1","e3688fae":"### 5.4.14 swapcase()","bdcd35b8":"# 14. Type Conversion\n\n* str()\n* int()\n* float()\n* tuple()\n* list()\n* set()\n* dict()\n\n## 14.1 str()","16a923fe":"### 7.1.8 count()","9f292d80":"## 15.3 Ternary Conditional Operator","e9e7ae62":"### 7.1.11 pop()\nRemove and return item at index (default last, inex = -1).","dcbd113d":"## 8.1 Tuple Methods \n\n* count()\n* index()\n\n### 8.1.1 count()","c68bd135":"### 9.1.6 discard()","3b9580e8":"### 5.4.26 isupper()","c10e6b3d":"### 5.4.8 upper()","7cf3c4cf":"## 12.7 ( %= ) ","3059333f":"## 5.2 Indexing (Access Single Item)","036dbba9":"### 6.3.5 Modulus (%)","77d5bac9":"### 20.1.2 Module with alias","d8f8153a":"## 7.1 List Methods\n\n* append()\n* extend()\n* remove()\n* sort()\n* reverse()\n* clear()\n* copy()\n* count()\n* index()\n* insert()\n* pop()\n\n### 7.1.1 append()","1b5e1a01":"## 5.3 Slicing (Access Multiple Sequence Item)","edbee017":"# 29. Regular Expressions\n\n* Sequence of Characters That Define A Search Pattern\n* Regular Expression is Not In Python Its General Concept\n* Used In [Credit Card Validation, IP Address Validation, Email Validation]\n* Test RegEx https:\/\/pythex.org\/\n* Characters Sheet https:\/\/www.debuggex.com\/cheatsheet\/regex\/python\n\n## 29.1 Regular Expression Basics\n\n* .\t  => Any character except newline\n* a\t  => The character a\n* ab  => The string ab\n* a|b => a or b\n* a*  => 0 or more a's\n* \\\t  => Escapes a special character\n\n<hr>\n\n## 29.2 Regular Expression Quantifiers\n\n* \\*     =>\t0 or more\n* \\+     =>\t1 or more\n* ?\t     => 0 or 1\n* {2}    =>\tExactly 2\n* {2,5} =>\tBetween 2 and 5\n* {2,}   =>\t2 or more\n* (,5}   =>\tUp to 5\n\n<hr>\n\n## 29.3 Regular Expression Character Classes\n\n* [ab-d]  => One character of: a, b, c, d\n* [^ab-d] => One character except: a, b, c, d\n* [\\b]\t  => Backspace character\n* \\d\t  => One digit\n* \\D\t  => One non-digit\n* \\s\t  => One whitespace\n* \\S\t  => One non-whitespace\n* \\w\t  => One word character\n* \\W\t  => One non-word character\n\n<hr>\n\n## 29.4 Regular Expression Assertions\n\n* ^\t       =>   Start of string\n* \\A       =>\tStart of string, ignores m flag\n* $        =>\tEnd of string\n* \\Z       =>\tEnd of string, ignores m flag\n* \\b       =>\tWord boundary\n* \\B       =>\tNon-word boundary\n* (?=...)  =>   Positive lookahead\n* (?!...)  => \tNegative lookahead\n* (?<=...) =>\tPositive lookbehind\n* (?<!...) =>\tNegative lookbehind\n* (?()|)   =>\tConditional\n\n<hr >\n\n## 29.5  Re Module Search And FindAll\n\n* search()  => Search A String For A Match And Return A First Match Only\n* findall() => Returns A List Of All Matches and Empty List if No Match\n\n<hr>\n\n## 29.6 Re Module Split And Sub\n\n* split(Pattern, String, MaxSplit)  => Return A List Of Elements Splitted On Each Match\n* sub(Pattern, Replace, String, ReplaceCount) => Replace Matches With What You Want\n\n<hr>\n\n## 29.7 Flags\n\n* IGNORECASE (I)\n* MULTILINE  (M)\n* DOTALL\n* VERBOSE\n","7b0e0afc":"### 5.5.3 String Formating (New Way : version 3.6+)","202181f1":"### 5.4.5 title()","12ae7ed2":"# 8. Tuples \n\n* Tuple items are enclosed in parentheses\n* You can remove parentheses if you want\n* Tuple Is ordered, to use index to access item\n* Tuple are immutable, you can't (Add, Edit, Delete)\n* Tuple items is not unique\n* Tuple Can have different data types\n* operators used in string and list available in tuple","3ac957f6":"### 7.1.2 extend()","7a51cce7":"## 21.8 Date Supstraction","28ad5f53":"### 7.1.10 insert()","7e4978a9":"## 21.5 Start And End Of Date","a9dadd74":"# 2. Comments\n\nComments are text notes added to the program to provide explanatory information about the source code. [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/concept-of-comments-in-computer-programming\/)\n\n\n**This explanatory information contain**\n\n* Information about file \n* License\n* Who created the file\n* Whene the file created\n* Why the file created\n\n**We can write comment**\n\n* Beside code line\n* Before code line\n\n**Comments can be used for the various purpose like**\n\n1. **Planning and reviewing :**  In comments, we can write the pseudocode which we planned before writing the source code. [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/concept-of-comments-in-computer-programming\/)\n2. **Code description :** Code description is used by the programmer to make others understand his\/her intent. It contains the summary of the code. [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/concept-of-comments-in-computer-programming\/)\n3. **Algorithmic description :** Comments are used for explanation of the methodology. [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/concept-of-comments-in-computer-programming\/)\n4. **Metadata :** Comments also contain metadata of the program. [geeksforgeeks](https:\/\/www.geeksforgeeks.org\/concept-of-comments-in-computer-programming\/)\n5. **Prevent :** Comments also prevent code from run.\n\n<hr>\n\n**\ud83d\udd3a Alert**\n<br>\n<pre>\n'''\nThis Is\nNot\nMultiple\nLine\nComments\n\n'''\n<\/pre>\n\nAbove code is not multiple line comments, is **unassigned string**\n<br>\n<br>\nThis is multiple line comments \ud83d\udc47\n<pre>\n# -------------------------------------\n# This Is\n# Multiple\n# Line\n# Comments\n# -------------------------------------\n<\/pre>\n\nThis is single line comment \ud83d\udc47\n<pre>\n# This is single line comment\n<\/pre>\n\n# 3. Data Types Overview\n\n1. int \n2. float \n3. str\n4. list\n5. tuple\n6. dict\n7. bool\n\n##  1: int \n\n**int** data type refere to integer numbers data like : <code>10, 20, 100, -10, -20, -100, etc ... <\/code>\n\n## 2: float\n\n**float** data type refere to floating point numbers data like : <code>10.5, 20.58, -10.089, -20.589, etc ... <\/code>\n\n## 3: str\n\n**str** data type refere to string data like : <code>\"Hello python\", \"Mohamed\", etc ... <\/code>\n\n## 4: list \n\n**list** data type refere to data that contain sequence of elements between two square brackets like : <code>[1,2,3,4], [\"a\",\"b\",\"c\"], etc ... <\/code>\n\n\n## 5: tuple \n\n**tuple** data type refere to data that contain sequence of elements between two parentheses like : <code>(1,2,3,4), (\"a\",\"b\",\"c\"), etc ... <\/code>\n\n<hr>\n\n**we will deal with the difference between list and tuple soon**\n\n## 6: dict \n\n**dict** data type refere to data that contain unordered key-value-pairs like : <code>{\"one\": 1, \"two\": 2, \"three\": 3}, etc ... <\/code>\n\n## 7: bool \n\n**bool** data type refere to data that contain True or False like : <code>True, False, 5 > 4 , 2 > 5 , etc ...<\/code>\n\n<hr>\n\nNow we will use built in function in python called **type()** that print data type for value.","3b133846":"### 5.4.31 join()","4d52dc6d":"# 5. Strings\n\n## 5.1 Concatenation","8cec87f2":"### 9.1.3 add()","3555ae34":"### 6.3.4 Divition (\/)","fe3adfbf":"## 24.4 Exampel 4","c55243da":"## 19.3 bin()\nReturn the binary representation of an integer.","3aad4b07":"### 6.3.3  Multiplication (*)","e551cd1a":"# 1. Hello World\n\nWe will start our learning journey by hello world program. \n\nThe purpose of that to know how print a message to user. Let's start.","c0490c30":"### 7.1.7 copy()","75a64989":"## 24.3 Exampel 3","b112d161":"### 5.4.2 strip()","1d0a3aad":"### 9.1.17 isdisjoint()","24800b3b":"### 9.1.2 union()","6465a2aa":"# 21. Date And Time","d5a213b3":"### 11.1.2 or","86434ee9":"## 21.2 Current Date","4ebf9a64":"### 9.1.13 symmetric_difference()","e49b32ad":"## 22.2 Iterator Exampels","bfb811a9":"# 4. Escape Sequences Characters\n\nIn computing and telecommunication, an escape character is a character that invokes an alternative interpretation on subsequent characters in a character sequence. An escape character is a particular case of metacharacters. [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Escape_character)\n\n* **\\b :** Back Space\n* **\\newline :** Escape New Line + \\\n* **\\\\\\ :** Escape Back Slash\n* **\\\\' :** Escape Single Quotes\n* **\\\\\" :** Escape Double Quotes\n* **\\n :** Line Feed\n* **\\r :** Carriage Return\n* **\\t :** Horizontal tab\n* **\\xhh :** Character Hex Value","70706b26":"To assign many values to many variable at same line of code","4d451cef":"### 5.4.13 count()","3c22e3d0":"### 20.2.4 Upgrade already installed package\nwe will upgrade pip package.","8b8fa8a6":"### 10.1.7 popitem()","870c48ee":"# 19. Built In Functions\n\n* all()\n* any()\n* bin()\n* id()\n* sum()\n* round()\n* range()\n* print()\n* abs()\n* pow()\n* min()\n* max()\n* slice()\n\n## 19.1 all()\nReturn True if bool(x) is True for all values x in the iterable.","b98a09c1":"## 21.7 Specific Date","cb60f9b6":"### 5.4.16 endswith()","bc35faf2":"## 26.2 Multiple Line Doc String","36c0068b":"## 19.14 map()\n\n* Map take a function + iterator\n* Map called map because it applay a function on all elements in iterator\n* The function can be pre-define, lambda, or built in function","8a13da2c":"## 13.3 ( > )","5c64cf2c":"# 25. Loop On Many Iterable With (ZIP)\n\n* zip() Return A Zip Object Contains All Objects\n* zip() Length Is The Length of Lowest Object\n\n## 25.1 Exampel 1","9f26af36":"### 9.1.11 intersection()","f09391db":"## 21.1 Current Date And Time","b2c34f15":"### 9.1.7 pop()\n\nRemove and return an arbitrary set element.<br>\nRaises KeyError if the set is empty.","3c3066f7":"## 12.2 ( += ) ","c11072e3":"**Note :** when set a variable name we must avoid **keywords** that python environment use it like <code>if, not, in, etc ... <\/code>\n<br>\n\nHere is a list of the Python keywords.","9ad6551c":"### 9.1.14 symmetric_difference_update()","1164da65":"### 6.3.2  Subtraction (-)","6bec1eea":"## 19.4 id()\nReturn the identity of an object.<br>\n\nThis is guaranteed to be unique among simultaneously existing objects. (CPython uses the object's memory address.)","ac296d89":"### 17.1.2 for","406272da":"## 19.11 max()\n\nWith a single iterable argument, return its biggest item. The default keyword-only argument specifies an object to return.\n<br>\nif the provided iterable is empty. With two or more arguments, return the largest argument.","fc5e4a99":"## Please If you find this Notebook useful, Upvote it to help others see it \ud83d\ude42","45f0d149":"### 5.4.9 lower()","e2d07cf1":"### 5.4.23 istitle()","a13a056b":"### 9.1.8 update()","6cacd692":"**Note :** we store data at memory location and refer to this location via **variable**. each variable has name.\n<br>\n<hr>\n\n**Variable name rules**\n1. Can strat with (a-z A-Z) or Underscore.\n2. Can not strat with number or special character.\n3. Can inculde numbers or Underscore.\n4. Can not inculde special character.\n5. Case Sensitive.\n\n<br>\n<hr>\n\n**Best practice when named variables**\n\n<br>\nIf variable name consist of one word\n<br>\n\n* Use samllCase format As => age not (Age or AGE)\n\n<br>\nIf variable name consist of two word or more\n<br>\n\n* Use **camelCase**  format like => myName , firstClassRoom\n* Use **snake_case** format like => my_name , first_class_room","6ff689b2":"### 10.1.5 values()","2af14ca1":"### 20.1.4 Function with alias","679400d1":"# 18. Function\n\n* A Function is A Reusable Block Of Code Do A Task.\n* A Function Run When You Call It.\n* A Function Accept Element To Deal With Called [Parameters].\n* A Function Can Do The Task Without Returning Data.\n* A Function Can Return Data After Job is Finished.\n* A Function Create To Prevent DRY.\n* A Function Accept Elements When You Call It Called [Arguments].\n* There's A Built-In Functions and User Defined Functions.\n* A Function Is For All Team and All Apps.\n\n## 18.1 Function And Return","8cd86ecb":"## 12.5 ( \/= ) ","19878a2f":"# 15. Control Flow ( if, elif, and else )\n\n## 15.1 Base Conditions","d4f646ff":"### 6.3.7 Floor Divition (\/\/)","74647211":"# 6. Numbers\n\n## 6.1 Numbers Types\n* int\n* float\n* complex","521683ad":"## 15.2 Nested Conditions","30dc8535":"## 5.5 String Formating\n\n### 5.5.1 String Formating (Old Way)","0ab897ce":"## 19.8 print()\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)<br>\n\nPrints the values to a stream, or to sys.stdout by default.\n<br><br>\n**Optional keyword arguments:**<br>\n* file:  a file-like object (stream); defaults to the current sys.stdout.\n* sep:   string inserted between values, default a space.\n* end:   string appended after the last value, default a newline.\n* flush: whether to forcibly flush the stream.","4cc00dd3":"### 7.1.3 remove()\n\nRemove first occurrence of value.","ccc96e6d":"## 10.1 Dictionary Methods\n\n* clear()\n* update()\n* copy()\n* keys()\n* values()\n* setdefault()\n* popitem()\n* items()\n* fromkeys()\n\n### 10.1.1 clear()","87c82666":"### 5.4.27 isidentifier()","5ba4da0e":"### 11.1.3 not","65c3afa3":"# 13. Comparison Operators\n\n* ==\n* !=\n* &gt;\n* &lt;\n* &gt;=\n* &lt;=\n\n## 13.1 ( == )","f8a59a4d":"## 12.3 ( -= ) ","6f806f5a":"# 7. Lists\n\n* List items are enclosed in square brackets\n* List are ordered , to use index to access items\n* List are mutable (Add, Edit, Delete)\n* List items is not unique\n* list Can have different data types","ffffdbc6":"## 18.6 Function Lambda\n\n* It has no name\n* You can call it online without define it\n* You can use it in return data from another function\n* Lambda used for simpel functions but def handel the large task\n* Lambda is one single exepression not block of code\n* Lambda type is function","c53455b7":"When you program with python you don't need to use semicolon to end statement like other programming languages as  <code>C++, C#, Java, etc...<\/code> But you need it when write multiple statements in same line.","331e8d49":"## 12.6 ( **= ) ","796491ea":"## 19.19 reversed()","5e1d45bb":"## 14.4 tuple()","b8c4859e":"## 19.9 abs()\nReturn the absolute value of the argument.","efbef137":"### 7.1.4 sort()","275defee":"**Advanced Dictionary**","4e33f7c8":"### 10.1.3 copy()","cade541e":"### 7.1.5 reverse()","fd6e52d9":"# 26. Doc string\n* Documentation string for class, module or function.\n* Can be accessed from the help or doc attributes.\n* Made for understanding the functionality of the complex code.\n* Theres one line and multiple line Doc Strings.\n\n## 26.1 One Line Doc String","1fa15ee1":"## 18.16 reduce()\n\n* Reduce take a function + iterator\n* The function can be pre-define or lambda\n* Reduce run a function on first and second element and give a result\n* Then run a function on a result and third element\n* Then run a function on a result and fourth element and so on","c1ea26ab":"### 9.1.10 difference_update()","3500faf6":"### 7.1.9 index()","5214698c":"## 25.2 Exampel 2","0dd17bb7":"# 28. Type hinting\nType hinting gives you the ability to hint the type of values that can be passed to a function or method.","e1343d91":"## 14.3 float()","0532745c":"### 5.4.11 rsplit()","953c41c7":"### 7.1.6 clear()","f81a9a8e":"## 18.4 Function Default Parameters","2d27d9b3":"## 19.15 filter()\n\n* Filter take a function + iterator\n* Filter run a function on all elements in iterator\n* The function can be pre-define or lambda\n* The function need to return boolean value\n* Filter out all elements for wich the function return true","0f10ec94":"### 5.4.25 islower()","baff2d4b":"## 24.5 Exampel 5 (Speed Test)","a8dedb00":"## 6.3 Arthmetic Operators\n\n* Addition\n* Subtraction\n* Multiplication\n* Divition\n* Modulus\n* Exponent\n* Floor Divition\n\n### 6.3.1 Addition (+)","eb43906d":"# 12. Assignment Operators\n\n* =\n* += \n* -= \n* *=\n* \/=\n* **=\n* %=\n* \/\/=\n\n## 12.1 ( = )","4b4f1ced":"## 19.2 any()\nReturn True if bool(x) is True for any x in the iterable.","8c1218b5":"## 24.2 Exampel 2","a66cb920":"# 11. Boolean\n\n* Boolean values are the two constant objects (False + True)","986c4f70":"### 10.1.2 update()","e7db08cb":"# 17. Loops\n\n## 17.1 Loops Techniques\n\n* while\n* for\n\n### 17.1.1 while","d8038bea":"## 19.6 round()\n\nRound a number to a given precision in decimal digits.<br>\n\nThe return value is an integer if ndigits is omitted or None. Otherwise the return value has the same type as the number.  ndigits may be negative.","579424d0":"### 6.3.6 Exponent (**)","389afc15":"# 20. Built In Modules\n\n* Module is a file contain a set of functions\n* You can import module in your app to help you\n* You can import multiple modules\n* You can create your own modules\n* Modules save your time\n\n## 20.1 Built your own module\n* Module without alias\n* Module with alias\n* Function without alias\n* Function with alias","0c66d29a":"### 20.2.5 Use --user to resolve any error occure during upgrade process","12407489":"### 20.2.6 Examples about new installed packages","2ec0f7ac":"### 5.4.29 isalnum()","541d6e29":"# 16 Membership Operators\n\n* in\n* not in\n\n## 16.1 in","347a129a":"### 5.4.3 rstrip()","529a3d9b":"### 10.1.9 fromkeys()"}}