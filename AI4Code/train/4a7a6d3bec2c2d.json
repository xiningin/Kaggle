{"cell_type":{"63ccb23a":"code","a6ac8b5d":"code","ba23483b":"code","c6fc441c":"code","c1410666":"code","0b167a69":"code","8c40d3f1":"code","87869191":"code","5745070c":"code","c8ed3782":"code","03ca7284":"code","cd5adf4f":"code","646d7701":"code","3566615e":"code","d86ccba5":"code","4dca5b55":"code","705aa9c3":"code","b8744a6b":"code","1bd539de":"code","097f44ef":"code","4b2f4839":"code","b03b63a5":"code","17574d2b":"code","49508fdb":"code","582fe809":"code","652ae65f":"code","f3b1aaad":"code","2505ab4e":"code","7ac7669a":"code","b22dc158":"code","c51b2332":"code","70088d26":"code","7afc2015":"code","46983c79":"code","52c5d977":"code","5ece472e":"code","07ae5870":"code","a6e0de93":"code","05ff34ce":"code","c03a71f5":"code","476b7e6d":"code","d77c5fbb":"code","356df75c":"code","bd4015b4":"code","e07b04a2":"code","4c985de2":"markdown","418e64b8":"markdown","0ef04dd5":"markdown","2ef4e90f":"markdown","afe8e369":"markdown","fa1864c6":"markdown","b44045e8":"markdown","3588b758":"markdown","a612c358":"markdown","c0357bf1":"markdown","d1bfcdf0":"markdown","2e1a165f":"markdown","14157094":"markdown","88370b46":"markdown","f7395fdf":"markdown","b89ec5ac":"markdown","202c5432":"markdown","2f267089":"markdown","546e6ffb":"markdown","3ed8db27":"markdown","c4b1328d":"markdown","e5c7ba75":"markdown","f23a18ff":"markdown","e0709b77":"markdown","1bb863b8":"markdown","ab305c3b":"markdown","e1d97587":"markdown"},"source":{"63ccb23a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6ac8b5d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom itertools import product\nfrom tqdm import tqdm, tqdm_notebook\n\nimport sklearn\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\nimport tensorflow as tf\nimport keras\nimport pickle\nimport gc","ba23483b":"for p in [np, pd, sklearn, lgb]:\n    print (p.__name__, p.__version__)","c6fc441c":"def downcast_dtypes(df):    \n    # Select columns to downcast\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols =   [c for c in df if df[c].dtype == \"int64\"]\n    \n    # Downcast\n    df[float_cols] = df[float_cols].astype(np.float32)\n    df[int_cols]   = df[int_cols].astype(np.int32)\n    \n    return df\n","c1410666":"sales = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitems_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","0b167a69":"sales.head()","8c40d3f1":"items_per_category = items.item_category_id.value_counts().iloc[:10]\nitems_per_category = items_per_category.sort_index(sort_remaining=True)","87869191":"sns.barplot(items_per_category.index, items_per_category.values)\nplt.xlabel(\"Item Category\")\nplt.ylabel(\"Number of items\")\nplt.title(\"Number of items per category\")","5745070c":"popular_shops = sales.groupby('shop_id')['item_cnt_day'].sum()\npopular_shops = popular_shops.sort_values(ascending=False)[:10]","c8ed3782":"sns.barplot(popular_shops.index, popular_shops.values)\nplt.xlabel(\"Shop ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Popular shops\")","03ca7284":"popular_items = sales.groupby('item_id')['item_cnt_day'].sum()\npopular_items = popular_items.sort_values(ascending=False)[:10]","cd5adf4f":"sns.barplot(popular_items.index, popular_items.values)\nplt.xlabel(\"Item ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Popular items\")","646d7701":"item_cnt_month = sales.groupby('date_block_num')['item_cnt_day'].sum()","3566615e":"plt.figure(figsize=(15,5))\nsns.barplot(item_cnt_month.index, item_cnt_month.values)\nplt.plot(item_cnt_month.index, item_cnt_month.values)\nplt.xlabel(\"Month number\")\nplt.ylabel(\"Count\")\nplt.title(\"Number of items sold in each month\")","d86ccba5":"price_cnt_month = sales.groupby('date_block_num')['item_price'].sum()","4dca5b55":"plt.figure(figsize=(15,5))\nsns.barplot(price_cnt_month.index, price_cnt_month.values)\nplt.plot(price_cnt_month.index, price_cnt_month.values)\nplt.xlabel(\"Month number\")\nplt.ylabel(\"Count\")\nplt.title(\"Total price of items sold in each month\")","705aa9c3":"np.corrcoef(item_cnt_month.values, price_cnt_month.values)","b8744a6b":"test_block = sales['date_block_num'].max() + 1\ntest_data['date_block_num'] = test_block\ntest_data = test_data.drop(columns=['ID'])\ntest_data.head()","1bd539de":"# Create \"grid\" with columns\nindex_cols = ['shop_id', 'item_id', 'date_block_num']\n\n# For every month we create a grid from all shops\/items combinations from that month\ngrid = []\nfor block_num in sales['date_block_num'].unique():\n    cur_shops = sales.loc[sales['date_block_num'] == block_num, 'shop_id'].unique()\n    cur_items = sales.loc[sales['date_block_num'] == block_num, 'item_id'].unique()\n    grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype='int32'))\n\ngrid = pd.DataFrame(np.vstack(grid), columns = index_cols, dtype=np.int32)\ngrid = pd.concat([grid, test_data])\ngrid.head()","097f44ef":"# Groupby data to get shop-item-month aggregates\ngb = sales.groupby(index_cols, as_index=False)['item_cnt_day'].sum()\ngb = gb.rename(columns={'item_cnt_day': 'target'})\nall_data = pd.merge(grid, gb, how='left', on=index_cols).fillna(0)\n\n# Same as above but with shop-month aggregates\ngb = sales.groupby(['shop_id', 'date_block_num'], as_index=False)['item_cnt_day'].sum()\ngb = gb.rename(columns={'item_cnt_day': 'target_shop'})\nall_data = pd.merge(all_data, gb, how='left', on=['shop_id', 'date_block_num']).fillna(0)\n\n# Same as above but with item-month aggregates\ngb = sales.groupby(['item_id', 'date_block_num'], as_index=False)['item_cnt_day'].sum()\ngb = gb.rename(columns={'item_cnt_day': 'target_item'})\nall_data = pd.merge(all_data, gb, how='left', on=['item_id', 'date_block_num']).fillna(0)\n\n# Downcast dtypes from 64 to 32 bit to save memory\nall_data = downcast_dtypes(all_data)\ndel grid, gb \ngc.collect();\nall_data.head()","4b2f4839":"# List of columns that we will use to create lags\ncols_to_rename = list(all_data.columns.difference(index_cols))\nshift_range = [1, 2, 3, 4, 5, 12]\n\nfor month_shift in tqdm_notebook(shift_range):\n    train_shift = all_data[index_cols + cols_to_rename].copy()\n    train_shift['date_block_num'] = train_shift['date_block_num'] + month_shift\n\n    foo = lambda x: '{}_lag_{}'.format(x, month_shift) if x in cols_to_rename else x\n    train_shift = train_shift.rename(columns=foo)\n\n    all_data = pd.merge(all_data, train_shift, on=index_cols, how='left').fillna(0)\n    \ndel train_shift\nall_data.head()","b03b63a5":"# Don't use old data from year 2013\nall_data = all_data[all_data['date_block_num'] >= 12]\n\n# List of all lagged features\nfit_cols = [col for col in all_data.columns if col[-1] in [str(item) for item in shift_range]]\n# We will drop these at fitting stage\nto_drop_cols = ['target_item', 'target_shop', 'target', 'date_block_num']\nto_drop_cols = list(set(list(all_data.columns)) - (set(fit_cols)|set(index_cols))) + ['date_block_num']\n\n# Category for each item\nitem_category_mapping = items[['item_id', 'item_category_id']].drop_duplicates()\nall_data = pd.merge(all_data, item_category_mapping, how='left', on='item_id')\nall_data = downcast_dtypes(all_data)\n\ngc.collect()","17574d2b":"to_drop_cols","49508fdb":"all_data.head()","582fe809":"dates = all_data['date_block_num']\n\ndates_train  = dates[dates <  test_block]\ndates_test  = dates[dates == test_block]","652ae65f":"X_train = all_data.loc[dates <  test_block].drop(to_drop_cols, axis=1)\nX_test =  all_data.loc[dates == test_block].drop(to_drop_cols, axis=1)\n\ny_train = all_data.loc[dates <  test_block, 'target'].values\ny_test =  all_data.loc[dates == test_block, 'target'].values","f3b1aaad":"X_train.head()","2505ab4e":"y_train","7ac7669a":"target_range = [0, 20]\ntarget_range","b22dc158":"lr = LinearRegression()\nlr.fit(X_train.values, y_train)\npred_lr = lr.predict(X_test.values).clip(*target_range)","c51b2332":"submission = pd.DataFrame({'ID': sample_submission.ID, 'item_cnt_month': pred_lr})\nsubmission.to_csv('submission_linear_regression.csv', index=False)","70088d26":"submission.head()","7afc2015":"lgb_params = {\n               'feature_fraction': 0.75,\n               'metric': 'rmse',\n               'nthread':1, \n               'min_data_in_leaf': 2**7, \n               'bagging_fraction': 0.75, \n               'learning_rate': 0.03, \n               'objective': 'mse', \n               'bagging_seed': 2**7,\n               'num_leaves': 2**7,\n               'bagging_freq':1,\n               'verbose':0 \n              }\n\nmodel = lgb.train(lgb_params, lgb.Dataset(X_train, label=y_train), 100)\npred_lgb = model.predict(X_test).clip(*target_range)\n","46983c79":"submission = pd.DataFrame({'ID': sample_submission.ID, 'item_cnt_month': pred_lgb})\nsubmission.to_csv('submission_lgb.csv', index=False)","52c5d977":"X_test_level2 = np.c_[pred_lr, pred_lgb]","5ece472e":"X_test_level2","07ae5870":"dates_train_level2 = dates_train[dates_train.isin([27, 28, 29, 30, 31, 32, 33])]\n\n# That is how we get target for the 2nd level dataset\ny_train_level2 = y_train[dates_train.isin(dates_train_level2)]\n","a6e0de93":"# And here we create 2nd level feeature matrix, init it with zeros first\nX_train_level2 = np.zeros([y_train_level2.shape[0], 2])\n\n# Now fill `X_train_level2` with metafeatures\nfor cur_block_num in [27, 28, 29, 30, 31, 32, 33]:\n    print(cur_block_num)\n    '''\n        1. Split `X_train` into parts\n           Remember, that corresponding dates are stored in `dates_train` \n        2. Fit linear regression \n        3. Fit LightGBM and put predictions          \n        4. Store predictions from 2. and 3. in the right place of `X_train_level2`. \n           You can use `dates_train_level2` for it\n           Make sure the order of the meta-features is the same as in `X_test_level2`\n    '''      \n    X_train_cur = all_data.loc[dates <  cur_block_num].drop(to_drop_cols, axis=1)\n    X_test_cur =  all_data.loc[dates == cur_block_num].drop(to_drop_cols, axis=1)\n\n    y_train_cur = all_data.loc[dates <  cur_block_num, 'target'].values\n    y_test_cur =  all_data.loc[dates == cur_block_num, 'target'].values\n    \n    lr.fit(X_train_cur.values, y_train_cur)\n    pred_lr = lr.predict(X_test_cur.values)\n    X_train_level2[dates_train_level2 == cur_block_num, 0] = pred_lr.clip(*target_range)\n    \n    model = lgb.train(lgb_params, lgb.Dataset(X_train_cur, label=y_train_cur), 100)\n    pred_lgb = model.predict(X_test_cur)\n    X_train_level2[dates_train_level2 == cur_block_num, 1] = pred_lgb.clip(*target_range)","05ff34ce":"plt.scatter(X_train_level2[:, 0], X_train_level2[:, 1])","c03a71f5":"alphas_to_try = np.linspace(0, 1, 1001)\n\nr2_scores = []\nfor alpha in alphas_to_try:\n    mix = alpha*X_train_level2[:,0] + (1-alpha)*X_train_level2[:,1]\n    r2_scores.append(r2_score(y_train_level2, mix))\n\nr2_scores = np.array(r2_scores)\n\n# YOUR CODE GOES HERE\nbest_alpha = alphas_to_try[r2_scores.argmax()]\nr2_train_simple_mix = r2_scores.max()\n\nprint('Best alpha: %f; Corresponding r2 score on train: %f' % (best_alpha, r2_train_simple_mix))","476b7e6d":"pred_simple_averaging = best_alpha*X_test_level2[:,0] + (1-best_alpha)*X_test_level2[:,1]\nsubmission = pd.DataFrame({'ID': sample_submission.ID, 'item_cnt_month': pred_simple_averaging})\nsubmission.to_csv('submission_simple_averaging.csv', index=False)","d77c5fbb":"lr.fit(X_train_level2, y_train_level2)","356df75c":"pred_stacking = lr.predict(X_test_level2).clip(*target_range)","bd4015b4":"submission = pd.DataFrame({'ID': sample_submission.ID, 'item_cnt_month': pred_stacking})\nsubmission.to_csv('submission_stacking.csv', index=False)","e07b04a2":"pred_stacking","4c985de2":"20949 is pretty popular huh!","418e64b8":"**Validation L2**","0ef04dd5":"There are spikes at November months but the overall trend is decreasing sales","2ef4e90f":"Target range is 0 to 20","afe8e369":"Linear Regression","fa1864c6":"Time series data - Use 2nd level validation scheme accordingly","b44045e8":"Get the popular shops cause that might contain a pattern","3588b758":"Roughly 0.735","a612c358":"Create grid from all shops\/items combinations from that month\u00b6","c0357bf1":"Total sales per month is groos amount","d1bfcdf0":"**Correlation between prediction methods**","2e1a165f":"Create features by grouping shops, items and month","14157094":"**Preprocessing**","88370b46":"Get popular items","f7395fdf":"features using previous months data","b89ec5ac":"**Models**","202c5432":"**Stacking**","2f267089":"Ensembling","546e6ffb":"\nConcatenate test predictions\n","3ed8db27":"Final Data","c4b1328d":"**Exploratory Data Analysis**\n\n\nItems per category\n","e5c7ba75":"Items sold per month","f23a18ff":"**Create train test split**","e0709b77":"LightGBM","1bb863b8":"Add \"item category id\"","ab305c3b":"Correlation between \"Number of items sold\" and \"Total price of all items\" in each month","e1d97587":"**Load Dataset**"}}