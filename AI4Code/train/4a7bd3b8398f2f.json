{"cell_type":{"655708ce":"code","9537e499":"code","ef1d113b":"code","21453400":"code","238c2daa":"code","33ee1f2f":"code","c54e3d03":"code","a3ad9179":"code","610b7f7a":"code","30a5ffc2":"code","57de923c":"code","f36a4ef8":"code","74f40081":"code","a720fcd3":"code","d9269998":"code","41ef5fc3":"code","36f88806":"code","646340b2":"code","cf70c680":"code","d7d4d139":"markdown","95ebc155":"markdown","15f997cb":"markdown","85c9cd02":"markdown","6271059a":"markdown","4805c4d5":"markdown","8fd07b33":"markdown","17757dda":"markdown"},"source":{"655708ce":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, ShuffleSplit,cross_val_score\nfrom sklearn import metrics\nimport warnings\nfrom sklearn.ensemble import RandomForestClassifier \nwarnings.filterwarnings(\"ignore\")","9537e499":"raw_data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv').iloc[:,1:]","ef1d113b":"raw_data","21453400":"raw_data.info()","238c2daa":"raw_data.drop(raw_data[raw_data['gender'] == 'Other'].index, inplace=True)","33ee1f2f":"age_interval = ['Teenager','Adult','Middleage','Elderly','Old']\nage_bin = [0,20,40,60,80,100]\nage_set = pd.cut(raw_data['age'],age_bin,labels=age_interval)\nage_set = pd.DataFrame(age_set)\nage_set.columns = [\"age_interval\"]\nraw_data = pd.concat([raw_data,age_set],axis=1)\nraw_data","c54e3d03":"sns.displot(raw_data,x=\"bmi\",hue=\"age_interval\",kind=\"kde\",fill=True)","a3ad9179":"Teenager_data  = pd.DataFrame()\nAdult_data     = pd.DataFrame()\nMiddleage_data = pd.DataFrame()\nElderly_data   = pd.DataFrame()\nOld_data       = pd.DataFrame()\nframe_list = [Teenager_data, Adult_data, Middleage_data, Elderly_data, Old_data]\n\nfor i in range(5):\n    data = raw_data[raw_data['age_interval']==age_interval[i]]['bmi'][raw_data[raw_data['age_interval']==age_interval[i]]['bmi'].notnull()]\n    value = np.argmax(np.bincount(data.astype(np.int32)))\n    frame_list[i] = raw_data[raw_data['age_interval']==age_interval[i]].copy()\n    frame_list[i].bmi = frame_list[i].bmi.fillna(value)\nframe_list[3]","610b7f7a":"plt.subplots(figsize=(20,5))\nsns.set_style(style=\"darkgrid\")\n\nplt.subplot(1,3,1)\nsns.countplot(\"ever_married\",data=raw_data,palette=\"Paired\",hue=\"stroke\")\n\nplt.subplot(1,3,2)\nsns.countplot(\"hypertension\",data=raw_data,palette=\"crest\",hue='stroke')\n\nplt.subplot(1,3,3)\nsns.countplot(\"heart_disease\",data=raw_data,palette=\"ocean\",hue='stroke')","30a5ffc2":"plt.subplots(figsize=(20,10))\n\nplt.subplot(2,3,1)\nsns.countplot(\"gender\",data=raw_data,palette=\"Paired\",hue='stroke')\n\nplt.subplot(2,3,2)\nsns.countplot(\"work_type\",data=raw_data,palette=\"crest\",hue='stroke')\n\nplt.subplot(2,3,3)\nsns.countplot(\"Residence_type\",data=raw_data,palette=\"ocean\",hue='stroke')","57de923c":"data = pd.concat([frame_list[i] for i in range(5)],axis=0)\ndata","f36a4ef8":"import plotly.figure_factory as ff\ngroup_labels = ['0', '1']\nl = [data['age'][(data[\"stroke\"] == 0)],data['age'][(data[\"stroke\"] == 1)]]\nfig = ff.create_distplot(l, group_labels,curve_type='kde',colors = ['orange', 'darkblue'])\nfig.update_layout(title_text='Age & Stroke Distribution',xaxis_title=\"Age Distribution\",yaxis_title=\"Frequency\")\nfig.show()\nl = [data['bmi'][(data[\"stroke\"] == 0)],data['bmi'][(data[\"stroke\"] == 1)]]\nfig = ff.create_distplot(l, group_labels,curve_type='kde',colors = ['orange', 'darkblue'])\nfig.update_layout(title_text='BMI & Stroke Distribution',xaxis_title=\"BMI Distribution\",yaxis_title=\"Frequency\")\nfig.show()\nl = [data['avg_glucose_level'][(data[\"stroke\"] == 0)],data['avg_glucose_level'][(data[\"stroke\"] == 1)]]\nfig = ff.create_distplot(l, group_labels,curve_type='kde',colors = ['orange', 'darkblue'])\nfig.update_layout(title_text='Avg Glucose Level & Stroke Distribution',xaxis_title=\"Avg_Glucose_Level Distribution\",yaxis_title=\"Frequency\")\nfig.show()","74f40081":"data['gender'] = data['gender'].map({'Male': int(0),'Female':int(1)})\ndata['ever_married'] = data['ever_married'].map({'Yes':int(1), 'No':int(0)})\ndata['work_type'] = data['work_type'].map({'Private':int(3), 'Self-employed':int(4),'Govt_job':int(2), 'children':int(1), 'Never_worked':int(0)})\ndata['Residence_type'] = data['Residence_type'].map({'Urban':int(2), 'Rural':int(1)})\ndata['smoking_status'] = data['smoking_status'].map({'formerly smoked':int(1),'never smoked':int(2), 'smokes':int(3),'Unknown':int(0)})\ndata['age_interval'] = data['age_interval'].map({'Teenager':int(1),'Adult':int(2), 'Middleage':int(3),'Elderly':int(4),'Old':int(5)})\ndata","a720fcd3":"shuffled_data = data.sample(frac=1,random_state=4)\nstroke = shuffled_data.loc[shuffled_data[\"stroke\"] == 1]\nnormal = shuffled_data.loc[shuffled_data[\"stroke\"] == 0].sample(n=249,random_state=50)\nmerged_data = pd.concat([stroke,normal],axis=0)\nmerged_data","d9269998":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\ncolorscale_1= [[1.0 , \"#A50026\"],[0.8888888888888888, \"#D73027\"],[0.7777777777777778, \"#F46D43\"],[0.6666666666666666, \"#FDAE61\"],\n                [0.5555555555555556, \"#FEE090\"],[0.4444444444444444, \"#F3F0E2\"],[0.3333333333333333, \"#E3FFFF\"],[0.2222222222222222, \"#ACE4FF\"],[0.1111111111111111, \"#74ADD1\"],[0.0 , \"#313695\"]]\nfig = make_subplots(rows=1, cols=1)\ndataset_val = merged_data.corr('pearson')\ndataset_idx = dataset_val.index\ndataset_col = dataset_val.columns\ndataset_val = dataset_val.values\nfig.add_trace(\ngo.Heatmap(x=dataset_col,y=dataset_idx,z=dataset_val,name='pearson',xgap=1,ygap=1,colorscale=colorscale_1),row=1, col=1)\nfig.update_layout(height=800, width=900)\nfig.show()","41ef5fc3":"columns = ['gender','age','hypertension','heart_disease','avg_glucose_level','bmi','smoking_status','age_interval']\nx = merged_data[columns]\ny = merged_data.iloc[:,-2]\nx","36f88806":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size =0.2,random_state =206)\nx_train","646340b2":"from sklearn.svm import SVC\nsvc = SVC(kernel='rbf')\nsvc.fit(x_train,y_train)\ny_predict = svc.predict(x_test)\nprint(\"SVM Accuracy:\",metrics.accuracy_score(y_test,y_predict))\nprint(\"SVM F1 score:\",metrics.f1_score(y_test,y_predict))\n\nsvc = SVC(kernel='rbf')\ncv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=206)\nscore = cross_val_score(svc,x,y,cv=cv)\nf1_score = cross_val_score(svc,x,y,cv=cv,scoring='f1_macro')\nprint(\"SVM 5 folds CV Acc:\",score.mean())\nprint(\"SVM 5 folds F1 score:\",f1_score.mean())","cf70c680":"rdf = RandomForestClassifier(random_state=163,bootstrap=True,max_depth=100,max_features = 'sqrt',\n                              min_samples_leaf= 1, min_samples_split= 5,n_estimators= 5)\nrdf.fit(x_train, y_train)\ny_predict = rdf.predict(x_test)\nprint(\"Random Forest Accuracy:\",metrics.accuracy_score(y_test, y_predict))\nprint(\"Random Forest F1 score:\",metrics.f1_score(y_test,y_predict))","d7d4d139":"**Convert category to numeric.**","95ebc155":"# **Random Forest**","15f997cb":"# **Library Import**","85c9cd02":"# **Support Vector Machine**","6271059a":"**suggest that there are some NAs in bmi column.** <br><br\/>\nSo, we want to fill NAs with the corresponding bmi value in PDF based on age interval.<br><br\/>\nAnd we drop the \"Other\" value in gender.","4805c4d5":"Add age labels to each age groups.","8fd07b33":"# **Data Preprocessing & Visualization**","17757dda":"**Fill NAs with bmi values corresponding to the highest density and seperate them by age group.**"}}