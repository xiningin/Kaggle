{"cell_type":{"fe5778c8":"code","69461774":"code","892d90cf":"code","8f5e64c9":"code","eca2b4bf":"code","95b131ce":"code","17b9fd90":"code","c1d17c69":"code","51e50391":"code","392ed8ec":"code","e93b2a7a":"code","e9e3840e":"code","ed925efc":"code","48089a93":"code","d2b91f08":"code","ef17f9e4":"code","fc0d975b":"code","d4c6ce8b":"code","a0727a58":"code","752cc26c":"code","f20b24e7":"code","8087a4a2":"code","34595c0a":"code","68732992":"code","bc3895bb":"code","963a0a33":"code","07ecde6d":"code","1ad46fab":"code","51593149":"code","45fc4fef":"code","5f7f575a":"code","19358e35":"code","76841612":"code","d7993362":"code","6bb4e285":"code","3887d84b":"code","92c913e9":"code","2ec41b05":"code","4b192791":"code","912c37a7":"code","53d4adc9":"code","124c0ed6":"code","71ed84c7":"code","f26dd266":"code","68eaed7a":"code","349a494c":"code","8fde3248":"code","e8bf0fed":"code","b07a59e2":"code","28ba2c96":"code","c21a3009":"code","cbf3c4b2":"code","b1bed8b4":"code","c6179747":"code","0b4129c2":"code","a0cc4a70":"code","8065d788":"code","0f04d48c":"code","9180a5fb":"code","c218d203":"code","3a5d3a7c":"code","898847eb":"code","4ada752c":"code","56a4dc79":"code","c3739264":"code","15c59aed":"code","4b4fee58":"code","a56e3483":"code","a1c4d229":"code","6bbe5d7d":"code","3c15f293":"code","94024bc8":"code","5a78a935":"code","3ef81cfd":"code","f2aa8ad9":"code","d9eb8f77":"code","4a81f430":"code","92358873":"code","686f8288":"code","0c7d7521":"code","5016c8ac":"code","97dec697":"code","8d2a1fa2":"code","bec9ab1b":"code","c7882701":"code","2c749238":"code","dfd873e8":"code","e190b103":"code","7be3f292":"code","6eb59a11":"code","9d2cee5d":"code","2b5d6fcd":"code","64862337":"code","a65bde8d":"code","4b04970a":"code","a7993e6c":"code","9d69b412":"code","53efce1f":"code","857af879":"code","8ddbacdb":"code","6ffd2be9":"code","1a43cca7":"code","3c53525f":"markdown","6cc58994":"markdown","3dd33fba":"markdown","6b010915":"markdown","f72e50bd":"markdown","b29c7289":"markdown","2d66fd3a":"markdown","6a65f165":"markdown","0e8e370c":"markdown","c3c7cdde":"markdown","9b47f03e":"markdown","5c635814":"markdown","14ef4828":"markdown","83e01d14":"markdown","b7eeaea6":"markdown","dd049e89":"markdown","3bfbd3c7":"markdown","47518c71":"markdown","3d67964d":"markdown","a04c5666":"markdown","8b90a616":"markdown","4315ae4a":"markdown","a507baae":"markdown","eee57e95":"markdown","058f33a1":"markdown","4c49b0fc":"markdown","da6efcbe":"markdown"},"source":{"fe5778c8":"import numpy as np \nimport pandas as pd \n\nimport os\nfiles = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))\n\nprint(files)","69461774":"df = pd.read_csv(files[0])","892d90cf":"df.head()","8f5e64c9":"df.columns","eca2b4bf":"df.shape","95b131ce":"df.describe()","17b9fd90":"# Number of missing values\ndf.isnull().sum()","c1d17c69":"print(df[['Age','Cabin']])","51e50391":"print(*df['Cabin'].unique())","392ed8ec":"len(df['Cabin'].unique())","e93b2a7a":"df.groupby('Survived').count()","e9e3840e":"df[df['Embarked'].isnull()]","ed925efc":"df.groupby('Survived').agg('Fare').mean()","48089a93":"df.groupby('Survived').agg('Fare').median()","d2b91f08":"df['Cabin_null'] = np.where(df['Cabin'].isnull(),1,0)","ef17f9e4":"df.head()","fc0d975b":"# Percentage of null values in Cabin\ndf['Cabin_null'].mean()","d4c6ce8b":"# Percentage of Cabin null values in Survived and Not Survived\ndf.groupby('Survived')['Cabin_null'].mean()","a0727a58":"df['Age_null'] = np.where(df['Age'].isnull(),1,0)","752cc26c":"df.head()","f20b24e7":"# Percentage of null values in Age\ndf['Age_null'].mean()","8087a4a2":"# Percentage of Age null values in Survived and Not Survived\npercent_Age_null_SNS = df.groupby('Survived')['Age_null'].mean()","34595c0a":"percent_Age_null_SNS","68732992":"ax = percent_Age_null_SNS.plot.bar()","bc3895bb":"import pandas as pd\ndf = pd.read_csv(files[0], usecols=['Age','Fare','Survived'])\ndf.head()","963a0a33":"df.isnull().mean()","07ecde6d":"def impute_nan(df, variable, median):\n    df[variable+\"_median\"]=df[variable].fillna(median)","1ad46fab":"median = df.Age.median()\nmedian","51593149":"impute_nan(df, 'Age', median)\ndf.head()","45fc4fef":"print(df['Age'].std())\nprint(df['Age_median'].std())","5f7f575a":"import matplotlib.pyplot as plt\nfig = plt.figure() \nax = fig.add_subplot(111)\ndf['Age'].plot(kind='kde', ax=ax) \ndf.Age_median.plot(kind='kde', ax=ax, color='red') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","19358e35":"df = pd.read_csv(files[0], usecols=['Age','Fare','Survived'])\ndf.head()","76841612":"df.isnull().mean()","d7993362":"num_rand_age = df['Age'].isnull().sum()\nprint(f\"There are {num_rand_age} null values in Age column.\")\nprint(f\"So, we need {num_rand_age} values from the Age column selected at random to imputate the NaNs\")","6bb4e285":"# Code to select num_rand_age not-null values from Age \ndf['Age'].dropna().sample(num_rand_age, random_state=0)","3887d84b":"# Compare with mean, median, and random imputation\ndef impute_nan(df, variable, mean, median):\n    df[variable+\"_mean\"]=df[variable].fillna(mean)\n    df[variable+\"_median\"]=df[variable].fillna(median)\n    df[variable+\"_random\"]=df[variable]\n    num_rand_age = df[variable].isnull().sum()\n    random_sample = df[variable].dropna().sample(num_rand_age, random_state=0)\n    random_sample.index = df[df[variable].isnull()].index\n    df.loc[df[variable].isnull(), variable+'_random'] = random_sample","92c913e9":"mean = df.Age.mean()\nprint(mean)\nmedian = df.Age.median()\nprint(median)","2ec41b05":"impute_nan(df, 'Age', mean, median)\ndf.head(20)","4b192791":"import matplotlib.pyplot as plt\nfig = plt.figure() \nax = fig.add_subplot(111)\ndf['Age'].plot(kind='kde', ax=ax, color='black') \ndf.Age_mean.plot(kind='kde', ax=ax, color='blue') \ndf.Age_median.plot(kind='kde', ax=ax, color='red') \ndf.Age_random.plot(kind='kde', ax=ax, color='green') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","912c37a7":"print('{:>30}'.format('Original Std. Dev: \\t')+str(df.Age.std()))\nprint('{:>30}'.format('Mean Imp. Std. Dev: \\t')+str(df.Age_mean.std()))\nprint('{:>30}'.format('Median Imp. Std. Dev: \\t')+str(df.Age_median.std()))\nprint('{:>30}'.format('Random Sample Imp. Std. Dev: \\t')+str(df.Age_random.std()))","53d4adc9":"df = pd.read_csv(files[0], usecols=['Age','Fare','Survived'])\ndf.head(10)","124c0ed6":"import numpy as np\ndf['Age_NaN'] = np.where(df['Age'].isnull(),1,0)\ndf.head(10)","71ed84c7":"impute_nan(df, 'Age', mean, median)\ndf.head(10)","f26dd266":"df.Age.hist(bins=50)","68eaed7a":"import seaborn as sns\nsns.boxplot(x='Age', data=df)","349a494c":"df.Age.mean() + 3*df.Age.std()","8fde3248":"def impute_nan(df, variable, extreme):\n    df[variable+'_end'] = df[variable].fillna(extreme)","e8bf0fed":"impute_nan(df, 'Age', df.Age.mean() + 3*df.Age.std())\ndf.head(10)","b07a59e2":"df.Age_end.hist(bins=50)","28ba2c96":"sns.boxplot(x='Age_end', data=df)","c21a3009":"import matplotlib.pyplot as plt\nfig = plt.figure() \nax = fig.add_subplot(111)\ndf.Age.plot(kind='kde', ax=ax, color='black') \ndf.Age_mean.plot(kind='kde', ax=ax, color='blue') \ndf.Age_median.plot(kind='kde', ax=ax, color='red') \ndf.Age_random.plot(kind='kde', ax=ax, color='green') \ndf.Age_end.plot(kind='kde', ax=ax, color='orange') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","cbf3c4b2":"print('{:>30}'.format('Original Std. Dev: \\t')+str(df.Age.std()))\nprint('{:>30}'.format('Mean Imp. Std. Dev: \\t')+str(df.Age_mean.std()))\nprint('{:>30}'.format('Median Imp. Std. Dev: \\t')+str(df.Age_median.std()))\nprint('{:>30}'.format('Random Sample Imp. Std. Dev: \\t')+str(df.Age_random.std()))\nprint('{:>30}'.format('End of Dist. Imp. Std. Dev: \\t')+str(df.Age_end.std()))","b1bed8b4":"df.Age.hist(bins=50)","c6179747":"def impute_nan(df, variable):\n    df[variable+'_zero'] = df[variable].fillna(0)\n    df[variable+'_hundred'] = df[variable].fillna(100)","0b4129c2":"impute_nan(df, 'Age')\ndf.head(10)","a0cc4a70":"df.Age_zero.hist(bins=50)","8065d788":"df.Age_hundred.hist(bins=50)","0f04d48c":"import matplotlib.pyplot as plt\nfig = plt.figure() \nax = fig.add_subplot(111)\ndf.Age.plot(kind='kde', ax=ax, color='black') \ndf.Age_mean.plot(kind='kde', ax=ax, color='blue') \ndf.Age_median.plot(kind='kde', ax=ax, color='red') \ndf.Age_random.plot(kind='kde', ax=ax, color='green') \ndf.Age_end.plot(kind='kde', ax=ax, color='orange') \ndf.Age_zero.plot(kind='kde', ax=ax, color='magenta') \ndf.Age_hundred.plot(kind='kde', ax=ax, color='pink') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","9180a5fb":"print('{:>30}'.format('Original Std. Dev: \\t')+str(df.Age.std()))\nprint('{:>30}'.format('Mean Imp. Std. Dev: \\t')+str(df.Age_mean.std()))\nprint('{:>30}'.format('Median Imp. Std. Dev: \\t')+str(df.Age_median.std()))\nprint('{:>30}'.format('Random Sample Imp. Std. Dev: \\t')+str(df.Age_random.std()))\nprint('{:>30}'.format('End of Dist. Imp. Std. Dev: \\t')+str(df.Age_end.std()))\nprint('{:>30}'.format('Arb. Val.(0) Imp. Std. Dev: \\t')+str(df.Age_zero.std()))\nprint('{:>30}'.format('Arb. Val.(100) Imp. Std. Dev: \\t')+str(df.Age_hundred.std()))","c218d203":"df = pd.read_csv(files[0], usecols=['Sex', 'Embarked'])\ndf.head()","3a5d3a7c":"df['Sex'].unique()","898847eb":"df['Embarked'].unique()","4ada752c":"print(df['Embarked'].isnull().sum())\nprint(df['Embarked'].isnull().mean())","56a4dc79":"df.shape","c3739264":"df.dropna(inplace=True)\ndf.shape","15c59aed":"pd.get_dummies(df)","4b4fee58":"pd.get_dummies(df, drop_first=True)","a56e3483":"df = pd.read_csv(files[0], usecols=['Pclass','Age','Fare','Survived'])\ndf.head()","a1c4d229":"df['Age'].fillna(df.Age.median(), inplace=True)","6bbe5d7d":"df.isnull().sum()","3c15f293":"# Density Plot\nimport matplotlib.pyplot as plt\n\ndef density_plot(df, df_scaled, feature):\n    fig = plt.figure(figsize=(20,5)) \n    ax = fig.add_subplot(121) \n    df[feature].plot(kind='kde', ax=ax, color='black')\n    lines, labels = ax.get_legend_handles_labels()\n    ax.legend(lines, labels, loc='best')\n    plt.title('Before Scaling')\n    ax = fig.add_subplot(122) \n    df_scaled[feature].plot(kind='kde', ax=ax, color='blue') \n    lines, labels = ax.get_legend_handles_labels()\n    ax.legend(lines, labels, loc='best')\n    plt.title('After Scaling')\n    plt.show()","94024bc8":"# Histogram\nimport matplotlib.pyplot as plt\ndef hist_plot(df, df_scaled, feature):\n    fig = plt.figure(figsize=(20,5)) \n    ax = fig.add_subplot(121) \n    df[feature].hist(bins=20)\n    plt.title('Before Scaling')\n    ax = fig.add_subplot(122) \n    df_scaled[feature].hist(bins=20)\n    plt.title('After Scaling')\n    plt.show()","5a78a935":"import matplotlib.pyplot as plt\nfig = plt.figure() \nax = fig.add_subplot(111)\ndf.Age.plot(kind='kde', ax=ax, color='black') \nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')\nplt.show()","3ef81cfd":"# StandardScaler\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df)\ndf_scaled = pd.DataFrame(df_scaled, columns=df.columns)","f2aa8ad9":"df_scaled","d9eb8f77":"density_plot(df, df_scaled, 'Age')","4a81f430":"hist_plot(df, df_scaled, 'Age')","92358873":"# Min Max Scaling\nfrom sklearn.preprocessing import MinMaxScaler\n\nmin_max = MinMaxScaler()\ndf_minmax = pd.DataFrame(min_max.fit_transform(df), columns=df.columns)\ndf_minmax","686f8288":"density_plot(df, df_minmax, 'Age')","0c7d7521":"hist_plot(df, df_minmax, 'Age')","5016c8ac":"density_plot(df, df_minmax, 'Pclass')","97dec697":"hist_plot(df, df_minmax, 'Pclass')","8d2a1fa2":"from sklearn.preprocessing import RobustScaler\n\nrobust = RobustScaler()\ndf_robust = pd.DataFrame(robust.fit_transform(df), columns=df.columns)\ndf_robust","bec9ab1b":"density_plot(df, df_robust, 'Age')","c7882701":"density_plot(df, df_robust, 'Pclass')","2c749238":"hist_plot(df, df_robust, 'Age')","dfd873e8":"hist_plot(df, df_robust, 'Pclass')","e190b103":"df.isnull().sum()","7be3f292":"import scipy.stats as stat, pylab","6eb59a11":"# Q-Q Plot\nimport matplotlib.pyplot as plt\ndef plot_data(df, feature):\n    plt.figure(figsize=(12,5))\n    plt.subplot(121)\n    df[feature].hist()\n    plt.subplot(122)\n    stat.probplot(df[feature], dist='norm', plot=pylab)","9d2cee5d":"plot_data(df, 'Age')","2b5d6fcd":"import numpy as np\ndf['Age_log'] = np.log(df['Age'])\nplot_data(df,'Age_log')","64862337":"plot_data(df, 'Fare')","a65bde8d":"df['Age_rec'] = 1\/(df['Age'])\nplot_data(df,'Age_rec')","4b04970a":"df['Age_sqrt'] = np.sqrt(df['Age'])\nplot_data(df,'Age_sqrt')","a7993e6c":"df['Age_exp'] = df['Age']**(1\/1.2)\nplot_data(df,'Age_exp')","9d69b412":"df['Age_boxcox'], parameter = stat.boxcox(df['Age'])","53efce1f":"print(parameter)","857af879":"plot_data(df, 'Age_boxcox')","8ddbacdb":"plot_data(df, 'Fare')","6ffd2be9":"# Fare\ndf['Fare_log'] = np.log(df['Fare']+1)\nplot_data(df, 'Fare_log')","1a43cca7":"df['Fare_boxcox'], parameter = stat.boxcox(df['Fare']+1)\nplot_data(df, 'Fare_boxcox')","3c53525f":"### Reciprocal T\n","6cc58994":"### Gaussian Transformation\n- logarithmic\n- reciprocal\n- square root\n- exponential\n- box cox","3dd33fba":"### After Scaling","6b010915":"### So we see that the distribution of the imputed sample remains same for random sample imputation (green) as the original distribution (black). But for mean (blue) and median (red) imputation the distribution gets distorted. It can be seen from the standard deviations as follows.","f72e50bd":"### Exponential","b29c7289":"### Square Root","2d66fd3a":"#### Random Sample Imputation\nAssumes data are missing completely at random","6a65f165":"### Now we see how to capture NaN values (or missing info) in a new feature (column)\nHere we will replace the NaN values in Age with any type of imputation method but also create a new feature which will contain the info of where the value was a NaN previously.","0e8e370c":"## One Hot Encoding","c3c7cdde":"### Arbitrary Value Imputation \nIt should not frequently present in the data.\n","9b47f03e":"#### Let's do the same for Age","5c635814":"### Logarithmic T","14ef4828":"Let's drop the NaNs from Embarked","83e01d14":"So we can see that in Age at row 5, there was previously a NaN. We can use this additional feature later on while using a model.","b7eeaea6":"We can drop any one category from each feature as its information is captured by the rest.","dd049e89":"### Robust Scaler","3bfbd3c7":"### Min Max Scaling","47518c71":"We will take the sample from outside the third standard deviation of the normal distribution.","3d67964d":"# Handling Categorical Features","a04c5666":"### StandardScaler","8b90a616":"Functions for plotting","4315ae4a":"# # Handling Missing Values","a507baae":"We can see that the outliers are now included but the distribution gets distorted.","eee57e95":"### End of Distribution Imputation","058f33a1":"# Standardization and Normalization","4c49b0fc":"### Box Cox","da6efcbe":"### Before Scaling"}}