{"cell_type":{"8002c87f":"code","1b4b5e4c":"code","8aec3621":"code","a4d778b9":"code","eeacf9d8":"code","9321ac4e":"code","74133b02":"code","eba19a59":"code","9a1be621":"code","6dec525d":"code","ef503b45":"code","2487bcbd":"code","ed1a1735":"code","755a7705":"code","d9ff1f1d":"code","607418a4":"code","57e56d93":"code","990f6318":"code","5894e447":"code","8771e9fa":"code","a146ed0d":"code","189aec4b":"code","842fe982":"code","93de77bb":"code","a267c8a2":"code","5db0fb04":"code","a76880af":"code","9410c145":"code","900a0fc6":"code","91ad5e6e":"code","fa3b8fb8":"code","50fc78cb":"code","21ec9ce1":"code","d4a82c4c":"code","0569d6f5":"code","b99dddaf":"code","a33d5c6c":"code","05b6f20a":"code","a641ea59":"code","0373f357":"code","175e03f9":"code","5522d996":"markdown","7805dd33":"markdown","406f59a4":"markdown","8f2e6342":"markdown","142529f0":"markdown","d25b0b12":"markdown","f60cfaf7":"markdown","ea47fc24":"markdown","44e958d0":"markdown","f07fcb51":"markdown","7c5d966f":"markdown","1ec73584":"markdown","8290d0de":"markdown","812184ce":"markdown","f947f3d8":"markdown","1fd4b05a":"markdown","34b9ea4b":"markdown","72f5a276":"markdown","3a7ffa83":"markdown","1eee5cb7":"markdown","74706ce5":"markdown","b631ffa3":"markdown","d4abe9a0":"markdown","f424811c":"markdown"},"source":{"8002c87f":"import pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","1b4b5e4c":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\n\ntrain_df = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\ntest_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))","8aec3621":"print(\"The shape of the dataset is {}.\\n\\n\".format(train_df.shape))\nprint(\"The shape of the dataset is {}.\\n\\n\".format(test_df.shape))","a4d778b9":"train_df.head()","eeacf9d8":"train_df.info()","9321ac4e":"cols_to_rename = {'Temperature(\ufffdC)': 'temperature',\n                   'Humidity(%)': 'humidity',\n                  'Wind speed (m\/s)': 'windspeed',\n                  'Visibility (10m)': 'visibility',\n                  'Dew point temperature(\ufffdC)': 'dewpoint',\n                  'Solar Radiation (MJ\/m2)': 'solarradiation',\n                  'Rainfall(mm)': 'rainfall',\n                  'Snowfall (cm)': 'snowfall',\n                  'Functioning Day': 'functioningday'}\nfor df in [train_df, test_df]:\n    df.rename(columns= cols_to_rename, inplace=True)","74133b02":"train_df.info()","eba19a59":"train_df.duplicated().sum()","9a1be621":"for df in [train_df, test_df]:\n    df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)","6dec525d":"train_df.info()","ef503b45":"train_df.head()","2487bcbd":"train_df.describe()","ed1a1735":"#add month , day, year columns\nfor df in [train_df, test_df]:\n    df['month'] = df['Date'].dt.month\n    df['year'] = df['Date'].dt.year","755a7705":"train_df_copy = train_df.copy() #contains main columns without feature processing","d9ff1f1d":"for df in [train_df, test_df]:\n    df['dayofweek'] = df['Date'].dt.dayofweek","607418a4":"for df in [train_df, test_df]:\n    df['weekend'] = (df['dayofweek'] >= 5 )*1","57e56d93":"train_df.head()","990f6318":"train_df.head()","5894e447":"for df in [train_df, test_df]:\n    df['Holiday'] = df['Holiday'].map({'Holiday': 1, 'No Holiday':0})\n    df['functioningday'] = df['functioningday'].map({'Yes': 1, 'No':0})","8771e9fa":"print(train_df.Hour.describe())\n_ = plt.scatter(train_df['Hour'] ,train_df['y'])\n_ = plt.xlabel('Hours')\n_ = plt.ylabel('y Rental Prediction')\nplt.show()","a146ed0d":"# ranges bins\nbins = [0, 6, 12, 18, 24]\n#categorized hour\ncategorized_hour = pd.cut(train_df['Hour'], bins)\ntrain_df['categorized_hour'] = categorized_hour\n\n#test_df\ncategorized_hour = pd.cut(test_df['Hour'], bins)\ntest_df['categorized_hour'] = categorized_hour","189aec4b":"print(train_df.temperature.min())\nprint(train_df.temperature.max())\nplt.hist(train_df.temperature)\nplt.show()","842fe982":"# ranges bins\nbins = [-20, -10, 0, 10, 20, 30, 40]\n#categorized temperature\ncategorized_temp = pd.cut(train_df['temperature'], bins)\ntrain_df['categorized_temp'] = categorized_temp\ntrain_df.categorized_temp\n\n#test_df\ncategorized_temp = pd.cut(test_df['temperature'], bins)\ntest_df['categorized_temp'] = categorized_temp\ntest_df.categorized_temp","93de77bb":"print(train_df.dewpoint.min())\nprint(train_df.dewpoint.max())\nplt.hist(train_df.dewpoint)\nplt.show()","a267c8a2":"# ranges bins\nbins = [-35, -20, -10, 0, 10, 20, 28]\n#categorized temperature\ncategorized_dewpoint = pd.cut(train_df['dewpoint'], bins)\ntrain_df['categorized_dewpoint'] = categorized_dewpoint\n\n#test_df\ncategorized_dewpoint = pd.cut(test_df['dewpoint'], bins)\ntest_df['categorized_dewpoint'] = categorized_dewpoint","5db0fb04":"train_df.columns","a76880af":"train_df.info()","9410c145":"#transform to object to make getdummies\ntrain_df['year'] = train_df['year'].astype('object')\ntrain_df['month'] = train_df['month'].astype('object')\ntrain_df['dayofweek'] = train_df['dayofweek'].astype('object')\n\ncols_to_onehot = ['year','month','dayofweek','Seasons',\n                  'categorized_temp', 'categorized_dewpoint', 'categorized_hour']\n\nonehot_columns = pd.get_dummies(train_df[cols_to_onehot])\ntrain_df = pd.concat([train_df, onehot_columns], axis=1)\n# drop columns\ntrain_df.drop(cols_to_onehot, axis=1, inplace=True)\n\n#onhot encoding for test_df\ntest_df['year'] = test_df['year'].astype('object')\ntest_df['month'] = test_df['month'].astype('object')\ntest_df['dayofweek'] = test_df['dayofweek'].astype('object')\n\nonehot_columns = pd.get_dummies(test_df[cols_to_onehot])\ntest_df = pd.concat([test_df, onehot_columns], axis=1)\n# drop columns\ntest_df.drop(cols_to_onehot, axis=1, inplace=True)","900a0fc6":"train_df.info()","91ad5e6e":"test_df.info()","fa3b8fb8":"cor_mx=train_df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(cor_mx,fmt='0.01f',annot=True)","50fc78cb":"cor_mx['y'].sort_values(ascending=False)","21ec9ce1":"train_df.columns","d4a82c4c":"from sklearn.model_selection import train_test_split\n\nfull_train_df = train_df.copy() #to be used for trainig with all data\n\ntrain_df, val_df = train_test_split(train_df, test_size=0.2, random_state=42)\n\nX_train = train_df.drop(columns=['y', 'ID','Date'])\ny_train = np.log(train_df['y']+1)\n\nX_val = val_df.drop(columns=['y', 'ID','Date'])\ny_val = np.log(val_df['y']+1)","0569d6f5":"import math\nimport numpy as np\ndef RMSLE(predict, target):\n    total = 0 \n    for k in range(len(predict)):\n        LPred= np.log1p(predict[k]+1)\n        LTarg = np.log1p(target[k] + 1)\n        if not (math.isnan(LPred)) and  not (math.isnan(LTarg)): \n            total = total + ((LPred-LTarg) **2)\n        \n    total = total \/ len(predict)        \n    return np.sqrt(total)","b99dddaf":"\nnp.exp(np.log(y_train+1))-1\nplt.hist(np.log(y_train+1))","a33d5c6c":"'''from catboost import CatBoostRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\ncat  = CatBoostRegressor(objective='Poisson',iterations=7000, learning_rate=0.04, depth=7,random_seed=45\n                         ,verbose=200,loss_function=\"Huber:delta=200\")\n\n\ncat.fit(X_train,y_train,eval_set=(X_val, y_val),use_best_model=True)\n\nscore = cat.score(X_train, y_train)  \nprint(\"Training score: \", score)\nvald_score = cat.score(X_val, y_val) \nprint(\"Validation score: \", vald_score)\n\ny_predicted = np.exp(cat.predict(X_val))-1\n\nprint ('My RMSLE for vald: ' + str(RMSLE( np.exp(cat.predict(X_val))-1,np.exp(np.array(y_val))-1) ))\nprint ('My RMSLE for train: ' + str(RMSLE( np.exp(cat.predict(X_train))-1,np.exp(np.array(y_train))-1) ))'''","05b6f20a":"from sklearn.ensemble import RandomForestRegressor\n\n# Create an instance of the classifier\n# try max depth\nRegressor = RandomForestRegressor(random_state=0,n_estimators=250)\n\n# Train the classifier\nRegressor = Regressor.fit(X_train, y_train)\n\nprint(\"The accuracy of the Regressor on the training set is \", (Regressor.score(X_train, y_train)))\nprint(\"The accuracy of the Regressor on the validation set is \", (Regressor.score(X_val, y_val)))\nprint ('My RMSLE for train: ' + str(RMSLE( np.exp(Regressor.predict(X_train))-1, np.exp(np.array(y_train))-1) ))\nprint ('My RMSLE for vald: ' + str(RMSLE( np.exp(Regressor.predict(X_val))-1, np.exp(np.array(y_val))-1) ))","a641ea59":"#full_train_df = full_train_df.sample(frac=1, random_state=1).reset_index(drop=True)\n##remove the next two #\nX_train = full_train_df.drop(columns=['y','ID','Date'])\ny_train = np.log(full_train_df['y']+1)\n\n#X_train = X_train[features]\n# Train the classifier\nRegressor.fit(X_train, y_train)\n\nprint(\"The accuracy of the Regressor on the training set is \", (Regressor.score(X_train, y_train)))\nprint(\"The accuracy of the Regressor on the validation set is \", (Regressor.score(X_val, y_val)))\nprint ('My RMSLE for train: ' + str(RMSLE( np.exp(Regressor.predict(X_train))-1, np.exp(np.array(y_train))-1) ))\nprint ('My RMSLE for vald: ' + str(RMSLE( np.exp(Regressor.predict(X_val))-1, np.exp(np.array(y_val))-1) ))","0373f357":"X_test = test_df.copy()\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test.drop(columns=['ID','Date'])\n\ny_test_predicted = np.exp(Regressor.predict(X_test))-1\n\ntest_df['y'] = y_test_predicted.astype(int)\n\ntest_df.head()","175e03f9":"test_df[['ID', 'y']].to_csv('\/kaggle\/working\/submission.csv', index=False)","5522d996":"## transform functioning day, holiday to 0,1","7805dd33":"# Exploratory Data Analysis","406f59a4":"# add day of week","8f2e6342":"## bining temperature into ranges","142529f0":"# Import The Libraries","d25b0b12":"# working with Date column","f60cfaf7":"# Read Data","ea47fc24":"# working with temperature column","44e958d0":"## onehot encoding year, month, dayofweek, Seasons, categorized_temp, categorized_dewpoint, categorized_hour","f07fcb51":"# working with dewpoint","7c5d966f":"# working with Hour column","1ec73584":"# Data Splitting","8290d0de":"# Model Training","812184ce":"## bining dewpoint","f947f3d8":"## check duplicates","1fd4b05a":"## check log & exp","34b9ea4b":"## RMSLE Root mean squared logarithmic error","72f5a276":"# Submission File Generation","3a7ffa83":"# Correlation matrix","1eee5cb7":"# CatBoost","74706ce5":"## Rename columns","b631ffa3":"# add weekend","d4abe9a0":"# Convert Date to datetime ","f424811c":"## bining hours"}}