{"cell_type":{"92107917":"code","949e17ca":"code","4e320065":"code","3006a68d":"code","a44ffe7b":"code","05a8f936":"code","40186e60":"code","4b791404":"code","5f92b292":"code","7f8819c4":"code","787b08c6":"markdown","b53db3d6":"markdown","76338869":"markdown","bbfb6101":"markdown","ca7b62af":"markdown","c284a5a2":"markdown","56a0dcd6":"markdown"},"source":{"92107917":"import gc\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom math import sqrt\nimport seaborn as sns\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import mean_squared_error,f1_score, accuracy_score","949e17ca":"train = pd.read_csv('..\/input\/ion-switch-model-ready-data-frame-to-work-locally\/train_ion_switch.csv')\ntest  = pd.read_csv('..\/input\/ion-switch-model-ready-data-frame-to-work-locally\/test_ion_switch.csv')","4e320065":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","3006a68d":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","a44ffe7b":"y     = train['open_channels']\ntrain = train.drop(['open_channels'],axis=1)","05a8f936":"id_train = train['time']\nid_test  = test['time']\n\ntrain = train.drop('time', axis = 1)\ntest  = test.drop( 'time', axis = 1)\n\nnfolds = 4\nfolds = KFold(n_splits=4, shuffle=True, random_state=4590)","40186e60":"params = {'min_child_weight': 7, 'colsample_bytree': 0.7, 'max_depth': 10, 'eta': 0.2,\n            'subsample': 0.6, 'lambda': 2, 'nthread': -1, 'booster' : 'gbtree', 'silent': 1, 'gamma' : 0, 'alpha': 1,\n            'eval_metric': 'rmse', 'objective': 'reg:squarederror'}","4b791404":"#feature_importance_df = np.zeros((train.shape[1], nfolds))\nmvalid = np.zeros(len(train))\nmfull  = np.zeros(len(test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, train.values)):\n    print('----')\n    print(\"fold n\u00b0{}\".format(fold_))\n    \n    x0,y0 = train.iloc[trn_idx], y[trn_idx]\n    x1,y1 = train.iloc[val_idx], y[val_idx]\n    \n    print(y0.size, y1.size)\n    \n    pd.DataFrame(y1).to_csv('y_test_fold' + str(fold_) + '.csv', index=False)\n    pd.DataFrame(y0).to_csv('y_test_exp_fold' + str(fold_) + '.csv', index=False)\n    \n    trn_data = xgb.DMatrix(x0, label= y0); val_data = xgb.DMatrix(x1, label= y1)\n    \n    num_round = 2000\n    clf = xgb.train(params, trn_data, num_round, evals = [(val_data, \"val_data\")], \n                    verbose_eval=200, early_stopping_rounds = 100)\n    mvalid[val_idx] = clf.predict(xgb.DMatrix(x1), ntree_limit=clf.best_iteration)\n    \n    pd.DataFrame(mvalid).to_csv('xgb_preds_exp_fold' + str(fold_) + '.csv', index=False)\n    \n    #feature_importance_df[:, fold_] = clf.feature_importance()\n    \n    mfull += clf.predict(xgb.DMatrix(test), ntree_limit=clf.best_iteration) \/ folds.n_splits\n    \n    pd.DataFrame(mfull).to_csv('xgb_preds_fold' + str(fold_) + '.csv', index=False)\n    \nnp.sqrt(mean_squared_error(mvalid, y))","5f92b292":"sub = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\n\nsubmission = pd.DataFrame()\nsubmission['time']  = sub['time']\nsubmission['open_channels'] = mfull\nsubmission['open_channels'] = submission['open_channels'].round(decimals=0)   # We used the regressor, so to convert to the class values we round it to the nearest decimal.\nsubmission['open_channels'] = submission['open_channels'].astype(int)         # And finally convert those values to integer to make the final submission file.\nsubmission.to_csv('submission.csv', float_format='%0.4f', index = False)","7f8819c4":"submission.tail()","787b08c6":"# K-Fold Technique for Cross-Validation","b53db3d6":"# File submission","76338869":"# Necessary imports","bbfb6101":"# Memory Reduction\nElse file will crash due to excessive memory usage","ca7b62af":"# Train the model","c284a5a2":"# Load train and test data","56a0dcd6":"Thanks [Firat Gonen](http:\/\/https:\/\/www.kaggle.com\/frtgnn) for helping me with this model on Ion Switching competition. This is a model we implemented in the initial stages of the competition and thus have an embarrasing score! :)"}}