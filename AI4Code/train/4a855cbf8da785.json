{"cell_type":{"1f41a4e3":"code","523f8aa0":"code","7591f08c":"code","a1f1459c":"code","a1ad2851":"code","953568b0":"code","8b7a7a62":"code","00c3eae9":"code","576dd60c":"code","02198256":"code","f9223e97":"code","db8b5684":"code","bbe62d04":"code","8f80b68f":"code","d31c4984":"code","e7d4c141":"code","7ee2a71b":"code","c2264bf5":"code","2605ac81":"code","fef8295d":"code","f0d7710f":"code","bc863170":"code","7b1fa40c":"code","1676b15f":"code","59a6178f":"code","d377e845":"code","e2817d93":"code","4aa7fa41":"code","0a0a00d6":"code","4e4631e2":"code","b1a7233a":"code","6a0498e8":"code","244ae772":"markdown","e72a15c6":"markdown","2fa33b37":"markdown","5485d0d5":"markdown","5cf81d06":"markdown","f7aad2b5":"markdown","74718200":"markdown","6b687eae":"markdown"},"source":{"1f41a4e3":"# Import Libraries","523f8aa0":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","7591f08c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","a1f1459c":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","a1ad2851":"train.info()","953568b0":"test.info()","8b7a7a62":"all = pd.concat([train, test], sort = False)\nall.info()","00c3eae9":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","576dd60c":"all.info()","02198256":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","f9223e97":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","db8b5684":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","bbe62d04":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","8f80b68f":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","d31c4984":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","e7d4c141":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","7ee2a71b":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","c2264bf5":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","2605ac81":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","fef8295d":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","f0d7710f":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","bc863170":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","7b1fa40c":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","1676b15f":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","59a6178f":"predictions = ada.predict(X_test)","d377e845":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","e2817d93":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","4aa7fa41":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","0a0a00d6":"t_pred = ada.predict(TestForPred).astype(int)","4e4631e2":"PassengerId = all_test['PassengerId']","b1a7233a":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","6a0498e8":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","244ae772":"****Check Accuracy","e72a15c6":"****Extra Features:","2fa33b37":"****Train\/Test Split","5485d0d5":"## Combine train and test","5cf81d06":"****Final Predictions","f7aad2b5":"****Check Accuracy","74718200":"# Import Data","6b687eae":"****Build AdaBoost"}}