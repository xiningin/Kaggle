{"cell_type":{"20f81f40":"code","acea5753":"code","2724fd4b":"code","08012c52":"code","c37d80c3":"code","6b5cdc78":"code","502431d4":"code","9064b822":"code","85b793c1":"code","83dbb44c":"code","5a7114d4":"code","1978dbf4":"code","ca97309b":"markdown","b6de5e99":"markdown","12011d0f":"markdown","a5f55872":"markdown","ecdcf5ca":"markdown","045611d8":"markdown","57eca47b":"markdown","49bf1613":"markdown"},"source":{"20f81f40":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping","acea5753":"FILE_PATH = '\/kaggle\/input\/clickbait-dataset\/clickbait_data.csv'\ndata = pd.read_csv(FILE_PATH)\ndata","2724fd4b":"text = data['headline'].values\nlabels = data['clickbait'].values\ntext_train, text_test, y_train, y_test = train_test_split(text, labels)\nprint(text_train.shape, text_test.shape, y_train.shape, y_test.shape)","08012c52":"vocab_size = 5000\nmaxlen = 500\nembedding_size = 32\n\ntokenizer = Tokenizer(num_words=vocab_size)\ntokenizer.fit_on_texts(text)\n\nX_train = tokenizer.texts_to_sequences(text_train)\nx_test = tokenizer.texts_to_sequences(text_test)\n\nX_train = pad_sequences(X_train, maxlen=maxlen)\nx_test = pad_sequences(x_test, maxlen=maxlen)","c37d80c3":"model = Sequential()\nmodel.add(Embedding(vocab_size, embedding_size, input_length=maxlen))\nmodel.add(LSTM(128))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()","6b5cdc78":"callbacks = [\n    EarlyStopping(\n        monitor='val_accuracy',\n        min_delta=1e-4,\n        patience=3,\n        verbose=1\n    ),\n    ModelCheckpoint(\n        filepath='weights.h5',\n        monitor='val_accuracy', \n        mode='max', \n        save_best_only=True,\n        save_weights_only=True,\n        verbose=1\n    )\n]","502431d4":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size=512, validation_data=(x_test, y_test), epochs=20, callbacks=callbacks)","9064b822":"model.load_weights('weights.h5')\nmodel.save('model.pb')","85b793c1":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nx = range(1, len(acc) + 1)\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.plot(x, acc, 'b', label='Training acc')\nplt.plot(x, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.subplot(1, 2, 2)\nplt.plot(x, loss, 'b', label='Training loss')\nplt.plot(x, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","83dbb44c":"preds = [round(i[0]) for i in model.predict(x_test)]\ncm = confusion_matrix(y_test, preds)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.xticks(range(2), ['Not clickbait', 'Clickbait'], fontsize=16)\nplt.yticks(range(2), ['Not clickbait', 'Clickbait'], fontsize=16)\nplt.show()","5a7114d4":"tn, fp, fn, tp = cm.ravel()\n\nprecision = tp\/(tp+fp)\nrecall = tp\/(tp+fn)\n\nprint(\"Recall of the model is {:.2f}\".format(recall))\nprint(\"Precision of the model is {:.2f}\".format(precision))","1978dbf4":"test = ['My biggest laugh reveal ever!', 'Learning game development with Unity', 'A tour of Japan\\'s Kansai region', '12 things NOT to do in Europe']\ntoken_text = pad_sequences(tokenizer.texts_to_sequences(test), maxlen=maxlen)\npreds = [round(i[0]) for i in model.predict(token_text)]\nfor (text, pred) in zip(test, preds):\n    label = 'Clickbait' if pred == 1.0 else 'Not Clickbait'\n    print(\"{} - {}\".format(text, label))","ca97309b":"# Plot confusion matrix and metrics","b6de5e99":"# Importing libraries","12011d0f":"# Run predictions on arbitrary user input","a5f55872":"# Plot training metrics","ecdcf5ca":"# Loading data","045611d8":"# Define and train model","57eca47b":"# Tokenize text","49bf1613":"# Train-test split"}}