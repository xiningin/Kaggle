{"cell_type":{"c9b41981":"code","a470b7f1":"code","8f9888d3":"code","35e26b01":"code","90601cc8":"code","82bc003a":"code","6cc3f7ec":"code","ff3e0111":"code","e1564bf2":"code","3f2ed718":"code","b4b83dff":"code","25a0e915":"code","c149fae7":"code","b1726e74":"code","ac963ffb":"code","d67dee87":"code","074c4eb1":"code","25fc582a":"code","e2301ad6":"code","4ee887ba":"code","a61131f6":"code","a11ead4a":"markdown","612000b3":"markdown","0feaa66e":"markdown","61f86933":"markdown","1a7d0071":"markdown","b2ea5bf5":"markdown","b634f741":"markdown","8748e39a":"markdown","8937a158":"markdown","bc14348a":"markdown","af6f22d9":"markdown"},"source":{"c9b41981":"# Importar bibliotecas \nimport os\nimport time\nimport pandas as pd\nimport numpy as np\nimport cv2\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential,load_model \nfrom keras.layers import Dense,Conv2D,Dropout,MaxPooling2D,Flatten\nfrom keras.callbacks import EarlyStopping\nfrom keras import optimizers","a470b7f1":"print(os.listdir(\"..\/input\"))","8f9888d3":"train_path='..\/input\/train\/train'\ntest_path='..\/input\/test\/test'","35e26b01":"label_train=pd.read_csv(\"..\/input\/train.csv\")\nprint(label_train.head(10))\n# ordenar os ID\nlabel_train=label_train.sort_values(by=['id'])\nprint(label_train.head(10))","90601cc8":"# criar 2 matrizes distintas, uma para ids e outra para labels\nids=label_train['id'].values\nlabels=label_train['has_cactus'].values","82bc003a":"print(ids)","6cc3f7ec":"train=[]\nX=[]\nY=[]\nfor index,imagem in enumerate(sorted(os.listdir(train_path))):\n    path=os.path.join(train_path,imagem)\n    frame=cv2.imread(path,cv2.IMREAD_COLOR)\n    X.append(frame)\n    train.append([np.array(frame),labels[index]])","ff3e0111":"train=np.array(train)\nprint(train[0].shape)\nprint(len(train))\nY=train[:,1]\n\nprint(len(Y))\ntrain=train[:,0]\nX=np.array(X)\n\nX.shape\n\nX=X\/255\ntrain=train\/255","e1564bf2":"plt.figure(figsize = (8,8))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    if Y[i]==1:\n        label=\"Tem Cactus\"\n    elif Y[i]==0:\n        label=\"N\u00e3o tem Cactus\"\n    plt.xlabel(label,fontsize=8)\n    plt.imshow(train[i])\nplt.suptitle(\"Primeiras imagems \",fontsize=8)\nplt.show()","3f2ed718":"Preparando os dados de Teste","b4b83dff":"#Preparando os dados de Teste\ntest_viz=[]\nX_test=[]\n\n# devolve o index do registro eo path da imagem \nfor index, imagem in enumerate(os.listdir(test_path)):\n    # concatena o caminho da imagem \n    path = os.path.join(test_path,imagem)\n    # ler com opencv e gera uma matrix \n    frame = cv2.imread(path,cv2.IMREAD_COLOR)\n    # indexa os frames ou imagems em array de imagens \n    X_test.append(frame)\n    # indexa um array de na primeira posicao do index \n    test_viz.append([np.array(frame),index])","25a0e915":"X_test=np.array(X_test)\nprint(X_test.shape)\n#print(X_test[1])\n\n# plt.imshow(X_test[1])\n# plt.show()\ntest_viz=np.array(test_viz)\nprint(test_viz.shape)\n\nid_test=test_viz[:,1]\nprint(id_test.shape)\n\ntest_viz=test_viz[:,0]\n\ntest_viz.shape\n\nX_test=X_test\/255\ntest_viz=test_viz\/255\n#print(test_viz[0])\n# plt.imshow(test_viz[1])\n# plt.show()","c149fae7":"# Plotar as primeiras 25 imagens no Conjunto de teste\nplt.figure(figsize = (8,8))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_viz[i])\nplt.suptitle(\"Primeiras imagems \",fontsize=8)\nplt.show()","b1726e74":"def convulacional():\n  \n  modelo = Sequential()\n  \n  modelo.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(32,32,3)))\n  \n  modelo.add(MaxPooling2D(pool_size=2,strides=1))\n  \n  modelo.add(Dropout(0.2))\n  \n  modelo.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\n  \n  modelo.add(MaxPooling2D(pool_size=2,strides=1))\n  \n  modelo.add(Dropout(0.2))\n  \n  modelo.add(Conv2D(filters=128,kernel_size=2,padding=\"same\",activation=\"relu\"))\n  \n  modelo.add(MaxPooling2D(pool_size=2,strides=1))\n  \n  modelo.add(Dropout(0.2))\n  \n  modelo.add(Flatten())\n  \n  modelo.add(Dense(32,activation=\"relu\"))\n  \n  modelo.add(Dense(64,activation=\"relu\"))\n  \n  modelo.add(Dropout(0.5))\n  \n  modelo.add(Dense(1,activation=\"sigmoid\"))\n   \n  return modelo ","ac963ffb":"# treinamento do modelo\n# chama a funcao adam que possui a estrutura do rede \nmodelo = convulacional()\n\n#seta os parametros de compila\u00e7\u00e3o da rede o tipo de perda e tipo de otimizador \n# exemplos de performaces e acuracia de otimizadores \nmodelo.compile(loss=\"binary_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\nmodelo.summary()","d67dee87":"# inicio do processo \ninicio = time.time()\n\n\nepocas = 40\nbatch = 32\n\n# modelo fit recebe treinamento X e teste Y do trainemnto\nhistorico = modelo.fit(X,Y,batch_size=batch,validation_split=0.2,epochs=epocas)\n\n# fim do processo \nfim = time.time()\n\nfim_processo = fim-inicio\n\nprint(\"Treinamento conclu\u00eddo em% d minutos e% d segundos\" %(fim_processo\/60,fim_processo*60))","074c4eb1":"acc=historico.history['acc']\nval_acc=historico.history['val_acc']\nloss=historico.history['loss']\nval_loss=historico.history['val_loss']","25fc582a":"plt.plot(acc)\nplt.plot(val_acc)\nplt.title('Cactus_identifier_net1 Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'])\nplt.show()","e2301ad6":"plt.plot(loss)\nplt.plot(val_loss)\nplt.title('Cactus_identifier_net1 Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train','Validation'])\nplt.show()","4ee887ba":"plt.figure()\nplt.plot(historico.history['acc'],'b*',)\nplt.plot(historico.history['val_acc'],'g')\nplt.title('model accuracy - batch size = '+str(batch))\nplt.ylabel('acc')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')  \nplt.show()","a61131f6":"result = modelo.evaluate(X, Y, batch_size=32)\nprint('\\ntrein. acc:', result[1])\nprint('trein. loss:', result[0])","a11ead4a":"> Import dataset Cactus","612000b3":"Treinamento do Modelo","0feaa66e":"Plotar as primeiras 25 imagens no Conjunto de treinamento","61f86933":"Prepara\u00e7\u00e3o do Dataset","1a7d0071":"Plotar as 25 primeiras imagens da base de treinamento","b2ea5bf5":"Preparando os dados de Teste","b634f741":"Normalizar a base","8748e39a":"Convulacional","8937a158":"Normaliza\u00e7\u00e3o da base ","bc14348a":"**Desafio kaggle actus\nPara avaliar o impacto das mudan\u00e7as clim\u00e1ticas na flora e fauna da Terra, \u00e9 vital quantificar como as atividades humanas, como explora\u00e7\u00e3o madeireira, minera\u00e7\u00e3o e agricultura, est\u00e3o impactando nossas \u00e1reas naturais protegidas. Pesquisadores no M\u00e9xico criaram o projeto VIGIA , que visa construir um sistema de vigil\u00e2ncia aut\u00f4noma de \u00e1reas protegidas. Um primeiro passo em tal esfor\u00e7o \u00e9 a capacidade de reconhecer a vegeta\u00e7\u00e3o dentro das \u00e1reas protegidas. Nesta competi\u00e7\u00e3o, voc\u00ea tem a tarefa de criar um algoritmo que possa identificar um tipo espec\u00edfico de cacto em imagens a\u00e9reas.**","af6f22d9":"Base de dados j\u00e1 est\u00e1 separada em treinamento e teste"}}