{"cell_type":{"95ed5003":"code","658b1908":"code","5818db00":"code","0fc05bc4":"code","7d97dd78":"code","7df51851":"code","4221f168":"code","27567cdb":"code","ed328368":"code","b83abd9c":"code","03c52f4d":"code","d5d2d710":"code","44e03ed5":"code","ce690180":"code","79433697":"code","32309258":"code","119c9971":"code","0dd514f2":"code","4ab5c21f":"code","899e6b1b":"code","e69a3208":"code","bcd9cf86":"code","defd9ef2":"code","04daed78":"code","2b1551ed":"code","f0cb5c08":"code","3a172bb2":"code","a48d7f23":"markdown"},"source":{"95ed5003":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","658b1908":"df=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf\n\n\n\n\n","5818db00":"df.dtypes","0fc05bc4":"df.columns","7d97dd78":"df.isnull().sum()","7df51851":"(df.groupby('anaemia')['high_blood_pressure'].count()).plot.bar()","4221f168":"df['high_blood_pressure'].value_counts().plot.bar()","27567cdb":"x=df.drop(['DEATH_EVENT'],axis=1)\ny=df['DEATH_EVENT']","ed328368":"x.shape,y.shape","b83abd9c":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.3,random_state=56)","03c52f4d":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()","d5d2d710":"train_xscaled=scaler.fit_transform(train_x)\ntrain_xscaled=pd.DataFrame(train_xscaled,columns=train_x.columns)","44e03ed5":"train_xscaled.head()","ce690180":"test_xscaled=scaler.fit_transform(test_x)\ntest_xscaled=pd.DataFrame(test_xscaled,columns=test_x.columns)","79433697":"test_xscaled.head()","32309258":"from sklearn.linear_model import LogisticRegression as LogReg\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix","119c9971":"logreg=LogReg()\nlogreg.fit(train_xscaled,train_y)","0dd514f2":"train_predict=logreg.predict(train_xscaled)\nprint('f1_score ',f1_score(train_predict,train_y))","4ab5c21f":"test_predict=logreg.predict(test_xscaled)\nprint('f1_score ',f1_score(test_predict,test_y))","899e6b1b":"train_predict=logreg.predict_proba(train_xscaled)\ntrain_predict","e69a3208":"train_preds=train_predict[:,1]\ntrain_preds","bcd9cf86":"train_preds.mean()","defd9ef2":"for i in range(0,len(train_preds)):\n    if train_preds[i]>0.33:\n        train_preds[i]=1\n    else:\n        train_preds[i]=0","04daed78":"train_preds","2b1551ed":"print('f1_score ',f1_score(train_preds,train_y))","f0cb5c08":"print('confusion_matrix :',confusion_matrix(test_y,test_predict))","3a172bb2":"from sklearn.metrics import classification_report as rep\nprint(rep(test_y,test_predict))","a48d7f23":"making prediction using predict_proba function"}}