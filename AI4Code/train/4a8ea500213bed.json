{"cell_type":{"2268007f":"code","5a111b17":"code","c5fde40c":"code","45aa5ce6":"code","0f10ac52":"code","8c16f346":"code","2a4667f3":"code","6b792d54":"code","6ced372c":"code","840659a3":"code","5a35068c":"code","4a5a33c8":"code","6dda8fbd":"code","829800ae":"code","6cc63e27":"code","18127240":"code","8075fe2c":"code","9b26339d":"code","d417a1f0":"code","22a65900":"code","f1800279":"code","e6228c8f":"code","44afa7c8":"code","ad997bd0":"markdown","2a34c6b1":"markdown","b4c0144f":"markdown","5682d7e0":"markdown","a5f691ab":"markdown","0b4090a4":"markdown","898feeb2":"markdown","1e3dfb0e":"markdown","ef21ffbe":"markdown","f99406f2":"markdown","70534c86":"markdown","e9e887c8":"markdown","45d5c095":"markdown","55762248":"markdown","60792f52":"markdown"},"source":{"2268007f":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\n\nfrom scipy.interpolate import interp1d\nfrom scipy.interpolate import make_interp_spline, BSpline","5a111b17":"df_global = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv\")\ndf_countries_others = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")\ndf_states = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByState.csv\")\ndf_major_cities = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByMajorCity.csv\")\ndf_cities = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv\")\ndf_emis = pd.read_csv(\"..\/input\/co2-and-ghg-emission-data\/emission data.csv\")","c5fde40c":"#converting dates to the same format\ndf_global['dt'] = pd.to_datetime(df_global.dt)\n\n#land average temperatures - some missing data\ndf_average_land = df_global.iloc[:, :3] # => 1750-2015\ndf_average_land = df_average_land.reset_index(drop=True)  #reset index\n\n#land average temperature, minimum temperature, maximum temperature, land and ocean temperature (1850-2015) - no missing data\ndf_global = df_global.dropna(axis = 0)  #easy by deleting the rows with missing data => drop the first 100 years\ndf_global = df_global.reset_index(drop=True)  #reset index\n\n\n#MISSING VALUES\n#see what are the missing values for land temperatures dataset\nnull_data = df_average_land[df_average_land.isnull().any(axis=1)]\n#print(null_data)  # => only the first 3 years have missing data\n                  # we should delete the first 3 years but we are not working with this dataset\n\n\n#see what are the missing values for land, min, max, land and occean\nnull_data2= df_global[df_global.isnull().any(axis=1)]\n#print(null_data2)  # => no missing values\n","45aa5ce6":"#separate the date column into day, month, year columns\ndf_global['day'] = df_global['dt'].dt.day\ndf_global['month'] = df_global['dt'].dt.month\ndf_global['year'] = df_global['dt'].dt.year\n\n#grouping by year\nearth_data = df_global.groupby(by = 'year')[['LandAverageTemperature', 'LandAverageTemperatureUncertainty',\n       'LandMaxTemperature', 'LandMaxTemperatureUncertainty',\n       'LandMinTemperature', 'LandMinTemperatureUncertainty',\n       'LandAndOceanAverageTemperature',\n       'LandAndOceanAverageTemperatureUncertainty']].mean().reset_index()\n\n#create new column called 'turnpoint', which says for each date if it is before or after 1975\nearth_data['turnpoint'] = np.where(earth_data['year'] <= 1975, 'before', 'after')\n\n\n#2 subplots for land and land+ocean\nfig = make_subplots(rows = 1, cols = 2)\nfig.update_layout(title={'text': \"Average Temperatures Before and After 1975\", 'x':0.5, 'xanchor': 'center'}, \n                  font=dict( family=\"Times New Roman\", size=20 ,color=\"white\"), \n                  template = \"plotly_dark\", title_font_size = 25, title_font_family = \"Times New Roman\", hovermode= 'closest')\n\n#boxplot for land average temperature\nfig.add_trace(go.Box(x = earth_data['LandAverageTemperature'], y = earth_data['turnpoint'],boxpoints = 'all',jitter = 0.3, \n                     pointpos = -1.6, marker_color = 'rgb(255,160,122)', boxmean = True, name = 'Land'),\n                     row = 1, col = 1)\n\n#boxplot for land+ocean average temperature\nfig.add_trace(go.Box(x = earth_data['LandAndOceanAverageTemperature'], y = earth_data['turnpoint'], boxpoints = 'all',jitter = 0.3, \n                     pointpos = -1.6, marker_color = 'rgb(32,178,170)', boxmean = True, name = 'Land and Ocean'),\n                     row = 1, col = 2)\n\nfig.update_traces(orientation='h')#horizontal orientation\n\n\n\n#boxmean -  if True, we can see the mean for each box, as a line inside the box\n#pointspos - sets the position of the sample points in relation to the box\n        #  - if 0, the sample points are places over the center of the box\n        #  - if negattive, points are under the box\n#boxpoints - shows or not the outliers\n#jitter -  the addition of a small amount of horizontal (or vertical) variability to the data in order to ensure \n           #all data points are visible,avoid overlapping","0f10ac52":"#convert to the same date format\ndf_countries_others['dt'] = pd.to_datetime (df_countries_others.dt)\n\n#list containing the non-countries - collonies, atolls, autonomous regions, continents etc.\nnon_country_lst=['Antarctica', 'Africa', 'Asia', 'Europe', 'North America', 'South America','Denmark', \n                 'France', 'Netherlands','United Kingdom','\u00c5land', 'American Samoa', 'Anguilla', 'Baker Island', \n                 'Bonaire', 'Saint Eustatius And Saba', 'British Virgin Islands', 'Cayman Islands', \n                 'Christmas Island', 'Falkland Islands (Islas Malvinas)', 'Faroe Islands', 'French Guiana', \n                 'French Southern And Antarctic Lands', 'Gaza Strip', 'Greenland', 'Guadeloupe', 'Guam', 'Guernsey', \n                 'Heard Island And Mcdonald Islands', 'Isle Of Man', 'Jersey', 'Kingman Reef', 'Macau', 'Martinique', \n                 'Mayotte', 'Montserrat', 'New Caledonia', 'Northern Mariana Islands', 'Palmyra Atoll', 'Reunion', \n                 'Saint Martin', 'Saint Pierre And Miquelon', 'South Georgia And The South Sandwich Islands', \n                 'Turks and Caicas Islands', 'Virgin Islands', 'Western Sahara']\n\n#list containing the continents\ncontinents = ['Antarctica', 'Africa', 'Asia', 'Australia', 'Europe', 'North America', 'South America']\n\n\n#new dataset containing the CONTINENTS - even if we will not be using it here\ndf_continents = df_countries_others[df_countries_others.Country.isin(continents)]\n\n#reseting the indexes of the continents dataset\ndf_continents.reset_index(drop=True)\n\n\n\n#new dataset containing COUNTRIES\ndf_countries = df_countries_others[~df_countries_others.Country.isin(non_country_lst)]\n\n#deleting Europe from the name of the actual countries\ndf_countries.loc[df_countries['Country'] == 'Denmark (Europe)', 'Country'] = 'Denmark'\ndf_countries.loc[df_countries['Country'] == 'France (Europe)', 'Country'] = 'France'\ndf_countries.loc[df_countries['Country'] == 'Netherlands (Europe)', 'Country'] = 'Netherlands'\ndf_countries.loc[df_countries['Country'] == 'United Kingdom (Europe)', 'Country'] = 'United Kingdom'\n\n#reseting the indexes of the countries dataset\ndf_countries = df_countries.reset_index(drop=True)\n\n#split the dt column into day, month, year\ndf_countries['day'] = df_countries['dt'].dt.day\ndf_countries['month'] = df_countries['dt'].dt.month\ndf_countries['year'] = df_countries['dt'].dt.year\n\n#group by country and show from what year the recordings start\ncountries_min_year = df_countries.groupby(['Country']).min()\n\n#since what year do all countries have a recording? => 1894\nmax(countries_min_year['year'].values)\n\n#countries dataset all starting in 1894 and ending in 2012, because 2013 is incomplete\ndf_countries_1894 = df_countries.copy()\ndf_countries_1894 = df_countries_1894[(df_countries['year']>= 1894) & (df_countries['year'] < 2013)]\n\n#MISSING DATA - 5 countries still have missing data in 1894-2012 interval - but we will not be using them\nnull_data_countries = df_countries_1894[df_countries_1894.isnull().any(axis=1)]\n#null_data_countries.groupby(['Country']).count()\n\n#reset index\ndf_countries_1894.reset_index(drop=True)\n\n#list with all countries for which we have temperature recordings - we will use this later\ncountries_temp = df_countries_1894['Country'].unique()\n#print(countries_temp)\n\n","8c16f346":"#we use df_countries_1894 which has complete information in 2012 about all contained countries\n\ncountries = np.unique((df_countries_1894['Country']))\nmean_temp = []\nfor country in countries:\n    mean_temp.append(df_countries_1894[(df_countries_1894['Country'] == country) & (df_countries_1894['year'] == 2012)]['AverageTemperature'].mean())\n    \n    \ndata = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_temp,\n        locationmode = 'country names',\n        text = countries,\n        colorscale = [[0.0, \"rgb(49,54,149)\"],\n                [0.1111111111111111, \"rgb(69,117,180)\"],\n                [0.2222222222222222, \"rgb(116,173,209)\"],\n                [0.3333333333333333, \"rgb(171,217,233)\"],\n                [0.4444444444444444, \"rgb(224,243,248)\"],\n                [0.5555555555555556, \"rgb(254,224,144)\"],\n                [0.6666666666666666, \"rgb(253,174,97)\"],\n                [0.7777777777777778, \"rgb(244,109,67)\"],\n                [0.8888888888888888, \"rgb(215,48,39)\"],\n                [1.0, \"rgb(165,0,38)\"]],\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Average\\nTemperature,\\n\u00b0C'),\n            font=dict(family='Times New Roman', size=18, color='black')\n            )\n       ]\n\nlayout = dict(\n    title = 'Average Land Temperature by Country in 2012',\n    font=dict(family='Times New Roman', size=20, color='black'),\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = 'rgb(0,0,0)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')\n    \n","2a4667f3":"#world emissions\ndf_emis_world = df_emis.copy()\ndf_emis_world = df_emis_world[df_emis_world['Country'] == 'World']\n#df_emis_world\n\n#countries emissions\ndf_emis_countries = df_emis.copy()\ndf_emis_countries = df_emis_countries[(df_emis_countries['Country'] != 'World') & (df_emis_countries['Country'] != 'Americas (other)') &\n                                      (df_emis_countries['Country'] != 'Asia and Pacific (other)') & (df_emis_countries['Country'] != 'EU-28') &\n                                      (df_emis_countries['Country'] != 'Europe (other)')]\n\n#keep only the countries for which we have temperature recordings\ndf_emis_countries = df_emis_countries[(df_emis_countries.Country.isin(countries_temp))]\ndf_emis_countries = df_emis_countries.reset_index(drop=True)\n\n#keep only 2007 - 2017 (no missing data)\ndf_emis_countries = df_emis_countries.drop(df_emis_countries.iloc[:, 1:257], axis = 1)\n\n#new column growing rate of emissions = 100(max-min)\/min\ndf_emis_countries['Growing Rate'] = ((df_emis_countries['2017'] - df_emis_countries['2007']) * 100) \/ df_emis_countries['2007']\n#df_emis_countries","6b792d54":"#df_emis_world #world emissions 1751 - 2017 but has strange format\n\nworld_emis = pd.read_csv(\"..\/input\/world-emissions\/world_emis_modif.csv\") #transposed in excel\nx_emis = world_emis['year']\ny_emis = world_emis['emissions']\n\n#font dictionary\nfont = {'family': 'serif',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 25\n        }\n\n#ticks font size\nplt.rcParams['xtick.labelsize'] = 20\nplt.rcParams['ytick.labelsize'] = 20\n\nplt.style.use('dark_background')\nplt.figure(figsize=(20,10))\n\nplt.plot(x_emis,y_emis, color = \"#FF7F50\",  linewidth = 5)\n\n#title\nplt.title('Evolution of World Emissions 1751-2017', fontdict=font)\nax=plt.gca()\nax.title.set_position([.5, 1.1])\n\n#labels\nplt.xlabel('Years', fontdict=font)\nplt.ylabel(\"Average Emissions (tonnes) \/ Year\", fontdict=font)\n\nplt.show()\n\n","6ced372c":"#extracting the 2 datasets\n\n#sorting ascending after growing rate of emissions\ndf_emis_countries = df_emis_countries.sort_values('Growing Rate', ascending=True)\n\n#top 10 countries for growing rate of emissions\ndf_low_emis = df_emis_countries.head(10)\ndf_low_emis = df_low_emis.sort_values('Country', ascending=True)  #sort alfabetically\ndf_low_emis = df_low_emis.reset_index(drop=True)\ndf_low_emis.to_csv('low_emis.csv')\n\n#bottom 10 countries for growing rate of emissions\ndf_high_emis = df_emis_countries.tail(10)\ndf_high_emis = df_high_emis.sort_values('Country', ascending=True)  #sort alfabetically\ndf_high_emis = df_high_emis.reset_index(drop=True)\ndf_high_emis.to_csv('high_emis.csv')","840659a3":"#importing the 2 datasets adjusted in excel and slecting the years 2007 and 2017\n\n#top 10 countries for growing rate of emissions for 2007 and 2017\ndf_high_emis_2years = pd.read_csv(\"..\/input\/emissions-sets-modified\/high_emis_modif.csv\") #transposed in excel\ndf_high_emis_2years = df_high_emis_2years[(df_high_emis_2years['Year'] == 2007) |\n                                      (df_high_emis_2years['Year'] == 2017)]\n\n\n#bottom 10 countries for growing rate of emissions for 2007 and 2017\ndf_low_emis_2years = pd.read_csv(\"..\/input\/emissions-sets-modified\/low_emis_modif.csv\") #transposed in excel\ndf_low_emis_2years = df_low_emis_2years[(df_low_emis_2years['Year'] == 2007) |\n                                      (df_low_emis_2years['Year'] == 2017)]","5a35068c":"#font dictionary\nfont_title = {'family': 'serif',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 28\n        }\n\n#countries font\nplt.rcParams['font.family'] = 'serif'\nplt.rcParams['font.size'] = '18'\n\n#bar charts\nfig, ax = plt.subplots(2,1, figsize = (10,10))\n\n\n\nx_countries = df_high_emis_2years['Country'][df_high_emis_2years['Year'] == 2007]\ny_2007 = df_high_emis_2years['Emissions'][df_high_emis_2years['Year'] == 2007]\ny_2017 = df_high_emis_2years['Emissions'][df_high_emis_2years['Year'] == 2017]\n\nax[0].barh(x_countries,y_2017)\nax[0].barh(x_countries, y_2007)\nax[0].set_xlabel('GHG (tonnes)')\nax[0].set_ylabel('Country')\n\nx_countries2 = df_low_emis_2years['Country'][df_low_emis_2years['Year'] == 2007]\ny2_2007 = df_low_emis_2years['Emissions'][df_low_emis_2years['Year'] == 2007]\ny2_2017 = df_low_emis_2years['Emissions'][df_low_emis_2years['Year'] == 2017]\n\nax[1].barh(x_countries2, y2_2017, label= '2017')\nax[1].barh(x_countries2, y2_2007, label= '2007')\nax[1].set_xlabel('GHG (tonnes)')\nax[1].set_ylabel('Country')\n\nplt.legend()\n\nax=plt.gca()\nax.title.set_position([.5, 1.1])\nplt.title('Growth Rate of Green House Gases', fontdict=font_title, x = 0.3, y=-0.3)\n\nplt.tight_layout(pad=1.08, h_pad=2.08, rect=(0,0,1.4,1.4))\nplt.show()","4a5a33c8":"#plt.rcParams.update(plt.rcParamsDefault)","6dda8fbd":"#average temperatures on years on countries\ncountries_average_year = df_countries_1894.copy()\ncountries_average_year = countries_average_year.groupby(['Country', 'year'])[['AverageTemperature']].mean().reset_index()\n\n#10 countries with high emissions growth rate\ncountries_10_high = countries_average_year.copy()\ncountries_10_high = countries_10_high[(countries_10_high.Country == 'Afghanistan') | (countries_10_high.Country == 'Angola') |\n                            (countries_10_high.Country == 'Benin') | (countries_10_high.Country == 'Bhutan') |\n                            (countries_10_high.Country == 'Cambodia') | (countries_10_high.Country == 'Equatorial Guinea') |\n                            (countries_10_high.Country == 'Liechtenstein') | (countries_10_high.Country == 'Namibia') |\n                            (countries_10_high.Country == 'Nepal') | (countries_10_high.Country == 'Oman')]\n\ncountries_10_high = countries_10_high[(countries_10_high.year == 1894) | (countries_10_high.year == 1900) |\n                            (countries_10_high.year == 1918) | (countries_10_high.year == 1930) |\n                            (countries_10_high.year == 1941) | (countries_10_high.year == 1957) |\n                            (countries_10_high.year == 1965) | (countries_10_high.year == 1979) |\n                            (countries_10_high.year == 1995) | (countries_10_high.year == 2012)]\ncountries_10_high = countries_10_high.reset_index(drop=True)\n\n\n\n#10 countries with low emissions growth rate\ncountries_10_low = countries_average_year.copy()\ncountries_10_low = countries_10_low[(countries_10_low.Country == 'Belgium') | (countries_10_low.Country == 'Denmark') |\n                            (countries_10_low.Country == 'France') | (countries_10_low.Country == 'Germany') |\n                            (countries_10_low.Country == 'Hungary') | (countries_10_low.Country == 'North Korea') |\n                            (countries_10_low.Country == 'Romania') | (countries_10_low.Country == 'Sweden') |\n                            (countries_10_low.Country == 'Ukraine') | (countries_10_low.Country == 'United Kingdom')]\n\ncountries_10_low = countries_10_low[(countries_10_low.year == 1894) | (countries_10_low.year == 1900) |\n                            (countries_10_low.year == 1918) | (countries_10_low.year == 1930) |\n                            (countries_10_low.year == 1941) | (countries_10_low.year == 1957) |\n                            (countries_10_low.year == 1965) | (countries_10_low.year == 1979) |\n                            (countries_10_low.year == 1995) | (countries_10_low.year == 2012)]\ncountries_10_low = countries_10_low.reset_index(drop=True)\n","829800ae":"#font dictionary\nfont = {'family': 'serif',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 25\n        }\n\nplt.figure(figsize=(12,12))\nplt.title('Evolution of Average Temperature in Time', fontdict=font)\nax=plt.gca()\nax.title.set_position([.5, 1.1])\n\npivot_table = countries_10_high.pivot('Country', 'year', 'AverageTemperature')\nsns.heatmap(pivot_table, annot=True, fmt=\".1f\", linewidths=.5, square=True, cmap='coolwarm',\n           cbar_kws={'label': 'Average Temperature \/ Year'})\nplt.xlabel('Years')\nplt.show()","6cc63e27":"#font dictionary\nfont = {'family': 'serif',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 25\n        }\n\nplt.figure(figsize=(12,12))\nplt.title('Evolution of Average Temperature in Time', fontdict=font)\nax=plt.gca()\nax.title.set_position([.5, 1.1])\n\npivot_table = countries_10_low.pivot('Country', 'year', 'AverageTemperature')\nsns.heatmap(pivot_table, annot=True, fmt=\".1f\", linewidths=.5, square=True, cmap='coolwarm',\n           cbar_kws={'label': 'Average Temperature \/ Year'})\nplt.xlabel('Years')\nplt.show()","18127240":"#convert dates to the same format\ndf_major_cities['dt'] = pd.to_datetime(df_major_cities.dt)\n\n#create three new columns for day, month and year\ndf_major_cities['day'] = df_major_cities['dt'].dt.day\ndf_major_cities['month'] = df_major_cities['dt'].dt.month\ndf_major_cities['year'] = df_major_cities['dt'].dt.year","8075fe2c":"#coldest cities in 2012 \n#as proved below, common years for all 5 cities are 1855-2012\n\n#see what are the cities\ncities_grouped_min = df_major_cities[df_major_cities.year == 2012][['City','Country',\n                    'AverageTemperature']].groupby(['City','Country']).mean().sort_values('AverageTemperature',ascending=True)[:5] #see what are the cities\n\n#Harbin - complete years: 1820-2012\ndf_Harbin = df_major_cities[df_major_cities.City == 'Harbin']\ndf_Harbin = df_Harbin.reset_index(drop=True)  #rest index\n#print(df_Harbin[df_Harbin.isnull().any(axis=1)].groupby(df_Harbin['year']).count())  #see years with missing data \ndf_Harbin = df_Harbin[(df_Harbin['year'] >= 1855) & (df_Harbin['year'] <= 2012)]  #keep only common years\ndf_Harbin = df_Harbin.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Saint Petersburg - complete years: 1753-2012\ndf_Saint_Petersburg = df_major_cities[df_major_cities.City == 'Saint Petersburg']\ndf_Saint_Petersburg = df_Saint_Petersburg.reset_index(drop=True)  #rest index\n#print(df_Saint_Petersburg[df_Saint_Petersburg.isnull().any(axis=1)].groupby(df_Saint_Petersburg['year']).count()) #see years with missing data\ndf_Saint_Petersburg = df_Saint_Petersburg[(df_Saint_Petersburg['year'] >= 1855) & (df_Saint_Petersburg['year'] <= 2012)]  #keep only common years\ndf_Saint_Petersburg = df_Saint_Petersburg.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Santiago - complete years: 1855-2012\ndf_Santiago = df_major_cities[df_major_cities.City == 'Santiago']\ndf_Santiago = df_Santiago.reset_index(drop=True)  #rest index\n#print(df_Santiago[df_Santiago.isnull().any(axis=1)].groupby(df_Santiago['year']).count()) #see years with missing data\ndf_Santiago = df_Santiago[(df_Santiago['year'] >= 1855) & (df_Santiago['year'] <= 2012)]  #keep only common years\ndf_Santiago = df_Santiago.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Changchun - complete years: 1833-2012\ndf_Changchun = df_major_cities[df_major_cities.City == 'Changchun']\ndf_Changchun = df_Changchun.reset_index(drop=True)  #rest index\n#print(df_Changchun[df_Changchun.isnull().any(axis=1)].groupby(df_Changchun['year']).count()) #see years with missing data\ndf_Changchun = df_Changchun[(df_Changchun['year'] >= 1855) & (df_Changchun['year'] <= 2012)]  #keep only common years\ndf_Changchun = df_Changchun.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Moscow - complete years: 1753-2012\ndf_Moscow = df_major_cities[df_major_cities.City == 'Moscow']\ndf_Moscow = df_Moscow.reset_index(drop=True)  #rest index\n#print(df_Moscow[df_Moscow.isnull().any(axis=1)].groupby(df_Moscow['year']).count()) #see years with missing data\ndf_Moscow = df_Moscow[(df_Moscow['year'] >= 1855) & (df_Moscow['year'] <= 2012)]  #keep only common years\ndf_Moscow = df_Moscow.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n","9b26339d":"#hottest cities in 2012\n#as proved below, common years for all 5 cities are 1870-2012\n\n#see what are the cities\ncities_grouped_max = df_major_cities[df_major_cities.year == 2012][['City','Country',\n                    'AverageTemperature']].groupby(['City','Country']).mean().sort_values('AverageTemperature',ascending=False).head()\n\n#Umm Durman - complete years: 1870-2012\ndf_Umm_Durman = df_major_cities[df_major_cities.City == 'Umm Durman']\ndf_Umm_Durman = df_Umm_Durman.reset_index(drop=True)  #rest index\n#print(df_Umm_Durman[df_Umm_Durman.isnull().any(axis=1)].groupby(df_Umm_Durman['year']).count()) #see years with missing data\ndf_Umm_Durman = df_Umm_Durman[(df_Umm_Durman['year'] >= 1870) & (df_Umm_Durman['year'] <= 2012)]  #keep only common years\ndf_Umm_Durman = df_Umm_Durman.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n#Madras - complete years: 1865-2012\ndf_Madras = df_major_cities[df_major_cities.City == 'Madras']\ndf_Madras = df_Madras.reset_index(drop=True)  #rest index\n#print(df_Madras[df_Madras.isnull().any(axis=1)].groupby(df_Madras['year']).count()) #see years with missing data\ndf_Madras = df_Madras[(df_Madras['year'] >= 1870) & (df_Madras['year'] <= 2012)]  #keep only common years\ndf_Madras = df_Madras.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Bangkok - complete years: 1863-2012\ndf_Bangkok = df_major_cities[df_major_cities.City == 'Bangkok']\ndf_Bangkok = df_Bangkok.reset_index(drop=True)  #rest index\n#print(df_Bangkok[df_Bangkok.isnull().any(axis=1)].groupby(df_Bangkok['year']).count()) #see years with missing data\ndf_Bangkok = df_Bangkok[(df_Bangkok['year'] >= 1870) & (df_Bangkok['year'] <= 2012)]  #keep only common years\ndf_Bangkok = df_Bangkok.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n\n\n#Jiddah - complete years: 1864-2012\ndf_Jiddah = df_major_cities[df_major_cities.City == 'Jiddah']\ndf_Jiddah = df_Jiddah.reset_index(drop=True)  #rest index\n#print(df_Jiddah[df_Jiddah.isnull().any(axis=1)].groupby(df_Jiddah['year']).count()) #see years with missing data\ndf_Jiddah = df_Jiddah[(df_Jiddah['year'] >= 1870) & (df_Jiddah['year'] <= 2012)]  #keep only common years\ndf_Jiddah = df_Jiddah.groupby('year')[['AverageTemperature', 'City', 'year']].mean()  #calculate yearly average temperature\n \n    \n#Ho Chi Minh City - complete years: 1863-2012\ndf_Ho_Chi_Minh = df_major_cities[df_major_cities.City == 'Ho Chi Minh City']\ndf_Ho_Chi_Minh = df_Ho_Chi_Minh.reset_index(drop=True)  #rest index\n#print(df_Ho_Chi_Minh[df_Ho_Chi_Minh.isnull().any(axis=1)].groupby(df_Ho_Chi_Minh['year']).count()) #see years with missing data\ndf_Ho_Chi_Minh = df_Ho_Chi_Minh[(df_Ho_Chi_Minh['year'] >= 1870) & (df_Ho_Chi_Minh['year'] <= 2012)]  #keep only common years\ndf_Ho_Chi_Minh = df_Ho_Chi_Minh.groupby('year')[['AverageTemperature', 'year']].mean()  #calculate yearly average temperature\n ","d417a1f0":"#coldest cities in 2012 \n\n#Harbin\nx_Harbin = df_Harbin['year']\ny_Harbin = df_Harbin['AverageTemperature']\n\n#Saint Petersburg\nx_Saint_Petersburg = df_Saint_Petersburg['year']\ny_Saint_Petersburg = df_Saint_Petersburg['AverageTemperature']\n\n#Santiago\nx_Santiago = df_Santiago['year']\ny_Santiago = df_Santiago['AverageTemperature']\n\n#Changchun\nx_Changchun = df_Changchun['year']\ny_Changchun = df_Changchun['AverageTemperature']\n\n#Moscow\nx_Moscow = df_Moscow['year']\ny_Moscow = df_Moscow['AverageTemperature']\n\n\n#plot\nfig, [[ax1, ax2],[ax3, ax4]] = plt.subplots(2,2,)\nfig.set_size_inches(18.5, 10.5)\nax1.plot(x_Harbin, y_Harbin, color = '#AFEEEE', linewidth = 3)\nax2.plot(x_Saint_Petersburg, y_Saint_Petersburg, color = '#48D1CC', linewidth = 3)\nax3.plot(x_Moscow,y_Moscow, color ='#20B2AA', linewidth = 3 )\nax4.plot(x_Changchun,y_Changchun, color = '#7FFFD4', linewidth = 3 )\n\nfig.subplots_adjust(hspace=.5)\nfig.suptitle('Global Warming - Coldest Cities in the World in 2012', fontsize=25)\nfig.text(0.5, 0.04, 'Years', ha='center', va='center', fontsize=20)\nfig.text(0.06, 0.5, 'Average Temperature \/ Year', ha='center', va='center', rotation='vertical', fontsize=20)\n\nax1.set_title('Habrin - China(N)', fontsize = 20)\nax2.set_title('Saint Petersburg - Rusia', fontsize = 20)\nax3.set_title('Moscow -Rusia', fontsize = 20)\nax4.set_title('Changchun - China', fontsize = 20)","22a65900":"#hotetst cities in 2012 \n\n#Umm Durman\nx_Umm_Durman = df_Umm_Durman['year']\ny_Umm_Durman = df_Umm_Durman['AverageTemperature']\n\n#Madras\nx_Madras = df_Madras['year']\ny_Madras = df_Madras['AverageTemperature']\n\n#Bangkok\nx_Bangkok = df_Bangkok['year']\ny_Bangkok = df_Bangkok['AverageTemperature']\n\n#Jiddah\nx_Jiddah = df_Jiddah['year']\ny_Jiddah = df_Jiddah['AverageTemperature']\n\n#Ho Chi Minh City\nx_Ho_Chi_Minh = df_Ho_Chi_Minh['year']\ny_Ho_Chi_Minh = df_Ho_Chi_Minh['AverageTemperature']\n\n\n#plot\nfig, [[ax1, ax2],[ax3, ax4]] = plt.subplots(2,2,)\nfig.set_size_inches(18.5, 10.5)\nax1.plot(x_Madras, y_Madras, color ='#FFB6C1', linewidth = 3)\nax2.plot(x_Ho_Chi_Minh, y_Ho_Chi_Minh, color = '#F08080', linewidth = 3)\nax3.plot(x_Umm_Durman,y_Umm_Durman, color ='#FFA07A', linewidth = 3 )\nax4.plot(x_Bangkok,y_Bangkok, '#DB7093', linewidth = 3 )\n\nfig.subplots_adjust(hspace=.5)\nfig.suptitle('Global Warming observed the hottest cities in the world', fontsize=20)\nfig.text(0.5, 0.04, 'Years', ha='center', va='center', fontsize=20)\nfig.text(0.06, 0.5, 'Average Temperature \/ Year', ha='center', va='center', rotation='vertical', fontsize=20)\n\nax1.set_title('Madras - India', fontsize=20)\nax2.set_title('Ho Chi Minh City - Vietnam', fontsize=20)\nax3.set_title('Durman - Sudan', fontsize=20)\nax4.set_title('Bangkok - Thailand', fontsize=20)","f1800279":"m = folium.Map(location = [34.047863, 100.619652], zoom_start = 3, tiles = 'Stamen Toner')\n\n#hottest cities\nfolium.Circle(location = [13.082680, 80.270721], popup = 'Madras', radius = 140000, fill=True, fill_color='crimson', color='crimson'\n ).add_to(m)\nfolium.Circle(location = [10.823099, 106.629662], popup = 'Ho Chi Minh City',  radius = 140000 , fill=True, fill_color='crimson', color='crimson'\n  ).add_to(m)\nfolium.Circle(location = [15.653120,32.481530], popup = 'Umm Durman',radius = 140000, fill=True, fill_color='crimson', color='crimson'\n  ).add_to(m)\nfolium.Circle(location = [13.756331, 100.501762], popup = 'Bangkok', radius = 140000, fill=True, fill_color='crimson', color='crimson'\n ).add_to(m)\n\n\n#coldest cities\nfolium.Circle(location =[45.803776, 126.534966], popup = 'Harbin', radius = 100000, fill=True, fill_color='blue', color='blue'\n ).add_to(m) \nfolium.Circle(location =[59.938480, 30.312481], popup = 'Saint Petersburg', radius = 100000, fill=True, fill_color='blue', color='blue'\n ).add_to(m) \nfolium.Circle(location =[55.755825, 37.617298], popup = 'Moscow', radius = 100000, fill=True, fill_color='blue', color='blue'\n ).add_to(m) \nfolium.Circle(location =[43.817070, 125.323547], popup = 'Changchun', radius = 100000, fill=True, fill_color='blue', color='blue'\n ).add_to(m)\n\nheat_data1 = [[45.803776, 126.534966, cities_grouped_min['AverageTemperature'][0] ]]\nheat_data2 = [[59.938480, 30.312481, cities_grouped_min['AverageTemperature'][1] ]]\nheat_data3 = [[55.755825, 37.617298, cities_grouped_min['AverageTemperature'][2] ]]\nheat_data4 = [[55.755825, 37.617298, cities_grouped_min['AverageTemperature'][3] ]]\nheat_data5 = [[15.653120,32.481530, cities_grouped_max['AverageTemperature'][0] ]]\nheat_data6 = [[13.082680, 80.270721, cities_grouped_max['AverageTemperature'][1]]]\nheat_data7 = [[13.756331, 100.501762, cities_grouped_max['AverageTemperature'][3]]]\nheat_data8 = [[10.823099, 106.629662, cities_grouped_max['AverageTemperature'][4]]]\nheat_data_cold = [heat_data1, heat_data2,heat_data3, heat_data4]\nheat_data_hot =  [heat_data5, heat_data6, heat_data7, heat_data8]\n\nfor i in heat_data_cold:\n    HeatMap(i).add_to(m)\n\nfor i in heat_data_hot:\n    HeatMap(i,gradient = {.33: 'red', .66: 'brown', 1: 'green'}).add_to(m)\nm","e6228c8f":"#import files\ndf = pd.read_csv(\"..\/input\/world-emissions\/Filtered_Major_Cities.csv\")\nco = pd.read_csv(\"..\/input\/world-emissions\/emis_cities.csv\")\nplt.style.use('dark_background')","44afa7c8":"#list_type variables holding the names of the cities and their colours that are to be attributed to the graph lines\ncities = ['Guangzhou', 'Shanghai', 'Tangshan', 'Tianjin']\ncolour = ['#BC8F8F', '#F4A460', '#8FBC8F', '#FF6347']\ni=0\n\n#gets the data of a city from the temperature file\ndef get_city_from_tempcsv(city_name):\n    \"\"\"\n    Returns a city object.\n    \"\"\" \n    city = df.loc[(df['City'] == city_name)]\n    city.reset_index(drop=True, inplace=True)\n    return city\n\n#gets the data of a city from the gasses file\ndef get_city_from_gascsv(city_name):\n    \"\"\"\n    Returns a city object.\n    \"\"\" \n    city = co.loc[(co['city'] == city_name)]\n    city.reset_index(drop=True, inplace=True)\n    return city\n\n#returns mean value of Average Temperature\ndef city_mean_temp(city_name):\n    \"\"\"\n    Returns the mean value of temperature for every year in a given city.\n    \"\"\"\n    current_city = get_city_from_tempcsv(city_name)\n    mean = current_city.groupby('year', as_index=False).mean()\n    return mean\n\n#returns mean value of Greenhouse gasses\ndef city_mean_gas(city_name):\n    \"\"\"\n    Returns the mean value of Greenhouse gasses for every year in a given city.\n    \"\"\"\n    current_city = get_city_from_gascsv(city_name)\n    mean = current_city.groupby('year', as_index=False).mean()\n    return mean\n\ndef plot_city_temps_with_spline(city_name):\n    \"\"\"\n    Returns plot with spline based on temperature of a given city\n    \"\"\"\n    data = city_mean_temp(city_name)\n    x = data['year']\n    y = data['AverageTemperature']\n    \n    x_new = np.linspace(1845, 2013, num=999, endpoint=True)\n    spl = make_interp_spline(x, y, k=3)\n    y_new = spl(x_new)\n    plt.plot(x_new, y_new, colour[i], linewidth=4, label=city_name)\n\ndef plot_city_gas_with_spline(city_name):\n    \"\"\"\n    Returns plot with spline based on gasses of a given city\n    \"\"\"\n    data = city_mean_gas(city_name)\n    x = data['year']\n    y = data['Greenhouse']\n\n    x_new = np.linspace(2014, 2020, num=7, endpoint=True)\n    spl = make_interp_spline(x, y, k=3)\n    y_new = spl(x_new)\n    plt.plot(x_new, y_new, colour[i], linewidth=4, label=city_name)\n    \n    \n    \n#font dictionary\nfont = {'family': 'serif',\n        'color':  'white',\n        'weight': 'normal',\n        'size': 25,\n        }\n    \n    \n#temperature graph\nplt.figure(figsize=(20,10))\n\n#labels for the temperature graph\nplt.xlabel('Years', fontdict=font)\nplt.ylabel('Average Temperature \/ Year', fontdict=font)\nplt.title('Evolution Of Temperature In Time', fontdict=font)\nax=plt.gca()\nax.title.set_position([.5, 1.1])\n\n\n#plotting evolution of temperature\/year\nfor nume in cities:\n    plot_city_temps_with_spline(nume)\n    i = i + 1\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n#emissions graph\nplt.figure(figsize=(20,10))\n\n#labels for the Greenhouse gases graph\nplt.xlabel('Years', fontdict=font)\nplt.ylabel('Average Greenhouse Emissions \/ Year (tones)', fontdict=font)\nplt.title('Evolution Of Greenhouse Gasses Emissions In Time', fontdict=font)\nax=plt.gca()\nax.title.set_position([.5, 1.1])\n\n\n#plotting evolution of Greenhouse emissions\/year\ni = 0\nnume = \"\"\nfor nume in cities:\n    plot_city_gas_with_spline(nume)\n    i = i + 1\nplt.legend()\nplt.show()","ad997bd0":"# 3 \"Emission Data\"\nThis is a dataset which contains GHG emissions (in tonnes), for years 1751-2017, for countries, continents etc.\n\n# 3.1 Data Cleaning\nWe will follow the steps:\n* divide it into 2 datasets:\n    1. world emissions\n    2. countries emissions (but only for the countries for which we also have temperature recordings)\n\n\n* for the countries dataset:\n    1. keep only 2007-2017 interval (no missing data)\n    2. add a new column with the Growing Emissions Rate = 100 (emissions 2017 - emissions 2007) \/ emissions 2007","2a34c6b1":"# 3.2.3 Heatmaps (2) - Average Year Temperature Evolution (1894-2012)\nWe will plot 2 heatmaps with average year temperature evolution, between 1894 and 2012.\nFor these heatmaps, we will use the same 2 sets of countries we used for the barcharts above.\n\nWe will follow the steps:\n* make a copy of df_countries_1894, our dataset with average temperature for each country, between 1894 and 2012\n* calculate yearly average temperatures for each country\n* extract 2 new datasets\n    1. countries_10_high - yearly average temperature for the countries which have the highest emissions growing rate\n    2. countries_10_low - yearly average temperature for the countries which have the lowest emissions growing rate\n    \n* for each set we will select 10 years in the interval 1894 and 2012\n* plot 2 heatmaps","b4c0144f":"# 1.2 Plotting - Boxplots - Before and After 1975 Average Temperature\nDoes global warming exist?\nIs there a difference between the average temperatures before 1975 and those after 1975?\nLet's ovserve this for both land and ocean average temperatures, using boxplots.\n\nWe will use df_global, which contains data between the years 1850 and 2015.\nFrom this dataframe, we will use the following columns:\n* date\n* land average temperature\n* land and ocean average temperature","5682d7e0":"# 3.2 Plotting\n# 3.2.1 Linegraph - Number of World Emissions 1751-2017","a5f691ab":"# 2 \"GlobalLandTemperaturesByCountry\"\n# 2.1 Data Cleaning\n* convert the dates to the same format (yyyy-mm-dd dd\/mm\/yyy => yyyy-mm-dd)\n* new dataset containing only the countries\n* new dataset containing only the continents\n\nWe will use the countries-only dataset.\nIn order to do data cleaning for this dataset, we will follow the steps:\n1. determine since what year do all countries have temperatures recordings => 1894\n2. delete all recordings from years < 1894\n3. see what countries still have missing data 1894: (we will not be using the years with missing data for these countries)\n    Federated States Of Micronesia\n    French Polynesia\n    Palau\n    Peru\n    South Georgia And The South Sandwich Isla\n","0b4090a4":"The datasets from this project show corelations regarding:\n\n* dates (months)\n* average temperatures\n* certain places on earth\n\nDetails about each dataset:\n\n*GlobalTemperatures*\n* dates\n* land average temperatures (1750 - 2015) (some are missing)\n* land maximum temperatures (1850 - 2015) (none are missing)\n* land minimum temperatures (1850 - 2015) (none are missing)\n* land and ocean average temperatures (1850 - 2015) (none are missing)\n\n\n*GlobalLandTemperaturesByCountry*\n* dates ( - 2013)\n* average temperatures (some are missing)\n* country (here are also colonies, atolls, autonomous regions, CONTINENTS, so this has to be sorted out)\n\n*GlobalLandTemperaturesByState*\n* dates\n* average temperatures (some are missing)\n* state\n* country (Australia, Brazil, Canada, China, India, Russia, United States)\n\n*GlobalLandTemperaturesByMajorCity*\n* dates\n* average temperatures (some are missing)\n* city\n* country\n* latitude (using the notation North, South)\n* longitude (using the notation East, West)\n\n*GlobalLandTemperaturesByCity*\n* dates\n* average temperatures (some are missing)\n* city\n* country\n* latitude (using the notation North, South)\n* longitude (using the notation East, West)\n\n\n\nIn this notebook, we are going to work with the following datasets:\n1. GlobalTemperatures\n2. GlobalLandTemperaturesByCountry\n3. GlobalLandTemperaturesByCity\n\n\nFor each of them, we will follow certain steps:\n Data Cleaning (for example, taking care of the missing data)\n Adjusting the dataset (for example adding columns or transposing to obtain a certain format)\n Plotting","898feeb2":"# 4.2.4 Average Temperature and GHG Emission Evolution\nIn this section, we will plot:\n1. average temperature evolution in Guangzhou, Shanghai, Tangshan and Tianjin\n2. GHG emission evolution in Guangzhou, Shanghai, Tangshan and Tianjin\n\nWe will use 2 datasets, which are already cleaned:\n1. Filtered_Major_Cities\n2. emis_cities","1e3dfb0e":"# Climate change: Earth Surface Temperature Data\u00b6\n# Know-How","ef21ffbe":"# 4.2.1 Line Graphs - Average Temperature Evolution for the Coldest Cities in 2012","f99406f2":"# 2.2 Plotting Average Land Temperature by Country in ","70534c86":"# 4.2.3 Map - Visual Representation of Hottest and Coldest Cities in 2012","e9e887c8":"# 4.2.2 Line Graphs - Average Temperature Evolution for the Hottest Cities in 2012","45d5c095":"# 3.2.2 Barcharts (2) - Emissions Growth Rate 2007-2017\nWe will plot 2 barcharts, using 2 datasets.\n\nIn order to do this, we will follow the steps:\n* sort the country emissions by Emissions Growth Rate, ascending\n\n* from this dataset, we will extract 2 datasets:\n    1. df_low_emis - the first 10 lines from the initial dataset\n                   - those are the countries with the lowest emissions growth rate\n    2. df_high_emis - the last 10 lines from the initial dataset\n                   - those are the countries with the highest emissions growth rate\n                   \n* both datasets will be modified in excel to have the necessary format\n* we will read those datasets (high_emis_modif.csv and low_emis_modif.csv)\n* for both of them we will plot 2 barcharts\n* each barchart will contain, for each country: \n    1. a bar representing the number of emissions in 2007\n    2. a bar representing the number of emissions in 2017                 \n\n","55762248":"# 1 \"GlobalTemperatures\"\n# 1.1 Data Cleaning\n* convert the dates to the same format (yyyy-mm-dd dd\/mm\/yyy => yyyy-mm-dd)\n* separate into 2 datasets\n    1. land average temperature - the first three columns (1750-2015)\n    2. land average temperature, minimum temperature, maximum temperature, land and ocean temperature (1850-2015)\n* delete the the parts with missing data","60792f52":"# 4 \"GlobalLandTemperaturesByMajorCity\"\nUsing this dataset, we will study the average temperature evolution in both the hottest and the coldest major cities in 2012.\nTherefore, we will start by extracting the hottest 5 cities and the coldest 5 cities in separate datasets.\n\n\n# 4.1 Data Cleaning\nWe will follow the steps:\n* converting the dates to the same format (yyyy-mm-dd dd\/mm\/yyy => yyyy-mm-dd)\n\n* create 2 new datasets to seewhat cities we have to analyze\n    1. cities_grouped_min - the cities with the lowest average temperature in 2012\n            * Harbin\n            * Saint Petersburg\n            * Moscow\n            * Changchun\n            * Santiago\n    2. cities_grouped_max - the cities with the highest average temperature in 2012\n            * Umm Durman\n            * Madras\n            * Bangkok\n            * Jiddah\n            * Ho Chi Minh City    \n            \n* for each city we will follow the steps\n        * create a new dataset\n        * print the lines with missing data grouped by years to determine which are the years with complete data\n        * comparing the years with complete data for each set of 5 cities, we will determine what years are common for each set\n        * keep only the years common for all 5 cities in the set\n        * group the set by years and compute yearly average temperature"}}