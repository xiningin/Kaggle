{"cell_type":{"c3f889f0":"code","a7f5fafe":"code","49602042":"code","1ea10b0a":"code","6e179c98":"code","d7b09e2a":"code","93ce2689":"code","db75cead":"code","d178bdc6":"code","220f5418":"code","bb34fbd2":"code","31a42887":"code","57f6aee8":"code","7592426a":"code","d275028b":"code","a1238e38":"markdown","adf3959d":"markdown"},"source":{"c3f889f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10,6)\npd.set_option('max_column', 100)\npd.set_option('max_row', 200)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a7f5fafe":"## Preprocess the data\ndef preprocess (df_rev):\n    processed_dataset = df_rev.copy()\n    \n    # Your code goes here\n    \n    return processed_dataset","49602042":"## Split train and test\ndef split_train_test(dataset, end_of_training_date):\n    \n    # training_data = \n    # testing_data = \n    \n    return training_data, testing_data","1ea10b0a":"## Split label and predictor\ndef split_label_and_predictor(train_or_test_data):\n    \n    # x_data =\n    # y_data =\n    \n    return x_data, y_data","6e179c98":"def fit(x_train, y_train):\n    model = RandomForestRegressor(random_state=14045)\n    model.fit(x_train, y_train)\n    return model","d7b09e2a":"def predict(model, x_test):\n    y_pred = model.predict(x_test)\n    return y_pred","93ce2689":"# If you want to submit, please change the value to \"2017-11-30\"\nend_of_training_date = \"2017-11-16\"","db75cead":"df = pd.read_csv('\/kaggle\/input\/uisummerschool\/Online_sales.csv')\ndf['Date'] = df['Date'].astype(str)\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.head()","d178bdc6":"df_rev = df.groupby('Date')['Revenue'].sum().reset_index(name='Revenue')\nadd_data = [['2017-12-01', 0], ['2017-12-02', 0], ['2017-12-03', 0],\n            ['2017-12-04', 0], ['2017-12-05', 0], ['2017-12-06', 0],\n            ['2017-12-07', 0], ['2017-12-08', 0], ['2017-12-09', 0],\n            ['2017-12-10', 0], ['2017-12-11', 0], ['2017-12-10', 0],\n            ['2017-12-13', 0], ['2017-12-14', 0]\n           ] \n  \n# Create the pandas DataFrame \nadd_data_df = pd.DataFrame(add_data, columns = ['Date', 'Revenue']) \nadd_data_df['Date'] = add_data_df['Date'].astype(str)\nadd_data_df['Date'] = pd.to_datetime(add_data_df['Date'])\n\ndf_rev = df_rev.append(add_data_df)\ndf_rev.head()","220f5418":"## Preprocess\ndaily_online_revenue = preprocess(df_rev).set_index('Date')\ndaily_online_revenue.head()","bb34fbd2":"## Split\ntraining_data, testing_data = split_train_test(daily_online_revenue,end_of_training_date)\nx_train, y_train = split_label_and_predictor(training_data)\nx_test, y_test = split_label_and_predictor(testing_data)","31a42887":"# Fit the model\nmodel = fit(x_train, y_train)","57f6aee8":"# Predict the model\ndf_rev2 = df_rev.copy()\nn_iteration = len(x_test)\nresult = []\nfor i in range(n_iteration):\n    y_pred = predict(model, pd.DataFrame(x_test.iloc[i]).transpose())\n    result.append(y_pred[0])\n    df_rev2.loc[df_rev2[\"Date\"]==x_test.index[i],\"Revenue\"] = y_pred\n    \n    # Repeat the whole process, except for model fitting\n    daily_online_revenue = preprocess(df_rev2).set_index('Date')\n    _, testing_data = split_train_test(daily_online_revenue,end_of_training_date)\n    x_test, _ = split_label_and_predictor(testing_data)\nresult","7592426a":"# THIS IS FOR VALIDATION PURPOSE\n# Prediction vs Actual\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\ncomparison = pd.DataFrame({\"Prediction\":result,\"Actual\":y_test.values})\ncomparison.index = y_test.index\nerror = sqrt(mean_squared_error(comparison[\"Actual\"], comparison[\"Prediction\"]))\nprint(\"Error Score (RMSE) = {}\".format(round(error,2)))\n\nhistorical = pd.DataFrame(y_train).rename(columns={\"Revenue\":\"Actual\"}).tail(14)\npd.concat([historical,comparison],sort=True).plot();","d275028b":"# Save the result to CSV for submission\nformatted_result = pd.DataFrame(result).reset_index().rename(columns={\"index\":\"Id\",0:\"Revenue\"})\ndisplay(formatted_result)\n\n# Uncomment the code below if you want to save the result\n# formatted_result.to_csv(\"result.csv\",index=False)","a1238e38":"**Main Code**\n\nNote: Please implement your code only inside the functions above, don't change anything below (except if you want to change the value of end_of_training_date for validation purpose)\n\n**The code won't be running properly if you make any direct change**","adf3959d":"**Please Implement These Functions**"}}