{"cell_type":{"3a541980":"code","0fa06413":"code","75a5cf91":"code","bb558e21":"code","14a7956c":"code","db159406":"code","fc429195":"code","9af2bf45":"code","9e7ae4b0":"code","6b4b852f":"code","50b0a7cd":"code","8666688a":"code","9bcce0a3":"code","c4d577ed":"code","24d06bfd":"code","904d9045":"code","25bad2f8":"code","1dc2e6ea":"code","23f75184":"code","a8aadb39":"code","a78a7515":"code","bedee31d":"code","c2deaebb":"code","31379950":"code","2c411b3e":"code","6d28a5ae":"code","efdc015d":"code","14aef365":"code","6f4d0175":"code","6b9bb950":"code","70b3af58":"code","5bad8fec":"code","e23c10df":"code","fd195f7f":"code","40cf6d3f":"code","4d8b0302":"code","4fe28cee":"code","c6cc3330":"code","0511d099":"code","1854d97a":"code","706a440f":"code","cd6105cb":"code","c48a5d4b":"markdown","7d6fd0b2":"markdown","15acc237":"markdown","a4572065":"markdown","5860896c":"markdown","182f7b77":"markdown","a1c53f03":"markdown","abdc6be6":"markdown","1af87809":"markdown","f1f5de0a":"markdown","8e741b0c":"markdown","54d250a2":"markdown","c076becd":"markdown","bf3d60b9":"markdown","c0651320":"markdown","0f4f1d4a":"markdown","2899c0ab":"markdown","7823c5c9":"markdown","b338b4db":"markdown"},"source":{"3a541980":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\n\n!pip install text2emotion\nimport text2emotion as te","0fa06413":"red_posts = pd.read_csv(\"..\/input\/reddit-wallstreetsbets-posts\/reddit_wsb.csv\")","75a5cf91":"red_posts","bb558e21":"red_posts[\"date\"] = pd.to_datetime(red_posts.timestamp).dt.date\nred_posts[\"hour\"] = pd.to_datetime(red_posts.timestamp).dt.hour\nred_posts[\"post_count\"] = 1\nred_posts","14a7956c":"agg_date = red_posts.groupby(\"date\").aggregate({\"score\": \"mean\", \"comms_num\": \"mean\", \"post_count\": \"sum\"})\nagg_hour = red_posts.groupby(\"hour\").aggregate({\"score\": \"mean\", \"comms_num\": \"mean\", \"post_count\": \"sum\"})","db159406":"agg_date","fc429195":"pd.options.plotting.backend = \"plotly\"","9af2bf45":"agg_hour.reset_index().plot(y = \"comms_num\")","9e7ae4b0":"\nagg_hour.reset_index().plot(y = \"score\")","6b4b852f":"agg_hour.reset_index().plot(y = \"post_count\")","50b0a7cd":"agg_date.reset_index().plot(y = \"comms_num\")","8666688a":"agg_date.reset_index().plot(y = \"score\")","9bcce0a3":"agg_date.reset_index().plot(y = \"post_count\")","c4d577ed":"red_posts[\"alltexts\"] = red_posts.title+' '+red_posts.body.astype(str)","24d06bfd":"red_posts[\"alltexts\"]","904d9045":"emotions = []\nfrom tqdm import tqdm_notebook as tqdm\ntqdm().pandas()\nfor text in tqdm(red_posts.alltexts):\n    emotions.append(te.get_emotion(str(text)))","25bad2f8":"emotion_data = pd.DataFrame.from_dict(emotions)\nposts['happy'] = emotion_data.Happy\nposts['angry'] = emotion_data.Angry\nposts['surprise'] = emotion_data.Surprise\nposts['sad'] = emotion_data.Sad\nposts['fear'] = emotion_data.Fear","1dc2e6ea":"for i in range(0,len(emotion_data.columns)):\n    red_posts[emotion_data.columns[i]] = emotion_data[emotion_data.columns[i]]","23f75184":"red_posts","a8aadb39":"agg_day = red_posts.groupby(\"date\").mean()\nagg_hour = red_posts.groupby([\"date\", \"hour\"]).mean()","a78a7515":"agg_hour","bedee31d":"fig = agg_hour.reset_index().plot(y = \"Happy\", labels={\"happy\": \"Ratio of words for each emotion\", \"index\": \"Hours since 9:00am on 1\/28\/2021\"},\ntitle=\"Trends in emotions expressed in r\/WallStreetBets posts by hour\")\n\nfig.add_scatter(y=agg_hour['Sad'], mode='lines', name = \"Sad\")\nfig.add_scatter(y=agg_hour['Angry'], mode='lines', name = \"Angry\")\nfig.add_scatter(y=agg_hour['Surprise'], mode='lines', name = \"Surprise\")\nfig.add_scatter(y=agg_hour['Fear'], mode='lines', name = \"Fear\")\nfig.show()","c2deaebb":"fig = agg_day.reset_index().plot(y = \"Happy\", labels={\"happy\": \"Ratio of words for each emotion\", \"index\": \"Days since 1\/28\/2021\"},\ntitle=\"Trends in emotions expressed in r\/WallStreetBets posts by day\")\n\nfig.add_scatter(y=agg_day['Sad'], mode='lines', name = \"Sad\")\nfig.add_scatter(y=agg_day['Angry'], mode='lines', name = \"Angry\")\nfig.add_scatter(y=agg_day['Surprise'], mode='lines', name = \"Surprise\")\nfig.add_scatter(y=agg_day['Fear'], mode='lines', name = \"Fear\")\nfig.show()","31379950":"pip install tiingo","2c411b3e":"from tiingo import TiingoClient","6d28a5ae":"config = {}\n\nconfig['session'] = True\n\nconfig['api_key'] = \"97efecd3df196b1717fb44bb60fcbe5882d4669f\"\n\nclient = TiingoClient(config)","efdc015d":"ticker_metadata = client.get_ticker_metadata(\"GME\")\n\nticker_price = client.get_ticker_price(\"GME\", frequency=\"daily\")\n\nhistorical_prices = client.get_dataframe(\"GME\", fmt='csv', startDate='2021-01-28', endDate='2021-02-08', frequency='daily')\n\ntickers = client.list_stock_tickers()","14aef365":"historical_prices = historical_prices.reset_index()","6f4d0175":"historical_prices[\"date\"] = pd.to_datetime(historical_prices.date).dt.date","6b9bb950":"historical_prices","70b3af58":"rednas_data = pd.merge(red_posts, historical_prices, on='date', how='right')","5bad8fec":"rednas_data","e23c10df":"rednas_date = rednas_data.groupby(\"date\").aggregate({\"Happy\": \"mean\", \"Angry\": \"mean\", \"Surprise\": \"mean\", \"Sad\": \"mean\", \"Fear\": \"mean\", \"score\": \"mean\", \"comms_num\": \"mean\", \"post_count\": \"sum\", \"adjClose\": \"mean\", \"adjOpen\": \"mean\"})\nrednas_date","fd195f7f":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ntrace1 = go.Scatter(\n    y=rednas_date['adjClose'],\n    x=rednas_date.reset_index().date,\n    name='Closing Price',\n    line=dict(color='red', width=4),\n\n)\ntrace2 = go.Scatter(\n    y=rednas_date[\"Happy\"],\n    x=rednas_date.reset_index().date,\n    name='Happiness',\n    yaxis='y2'\n\n)\ntrace3 = go.Scatter(\n    y=rednas_date[\"Angry\"],\n    x=rednas_date.reset_index().date,\n    name='Anger',\n    yaxis='y2'\n\n)\ntrace4 = go.Scatter(\n    y=rednas_date[\"Surprise\"],\n    x=rednas_date.reset_index().date,\n    name='Surprise',\n    yaxis='y2'\n\n)\ntrace5 = go.Scatter(\n    y=rednas_date[\"Fear\"],\n    x=rednas_date.reset_index().date,\n    name='Fear',\n    yaxis='y2'\n\n)\ntrace6 = go.Scatter(\n    y=rednas_date[\"Sad\"],\n    x=rednas_date.reset_index().date,\n    name='Sadness',\n    yaxis='y2'\n\n)\n\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(trace1)\nfig.add_trace(trace2,secondary_y=True)\nfig.add_trace(trace3,secondary_y=True)\nfig.add_trace(trace4,secondary_y=True)\nfig.add_trace(trace5,secondary_y=True)\nfig.add_trace(trace6,secondary_y=True)\nfig['layout'].update(height = 600, width = 800, title = 'Sentiments and Closing Price plotted with respect to the date',xaxis=dict(\n      tickangle=-90\n    ))\nfig.show()","40cf6d3f":"trace1 = go.Scatter(\n    y=rednas_date['adjOpen'],\n    x=rednas_date.reset_index().date,\n    name='Opening Price',\n    line=dict(color='red', width=4),\n\n)\ntrace2 = go.Scatter(\n    y=rednas_date[\"Happy\"],\n    x=rednas_date.reset_index().date,\n    name='Happiness',\n    yaxis='y2'\n\n)\ntrace3 = go.Scatter(\n    y=rednas_date[\"Angry\"],\n    x=rednas_date.reset_index().date,\n    name='Anger',\n    yaxis='y2'\n\n)\ntrace4 = go.Scatter(\n    y=rednas_date[\"Surprise\"],\n    x=rednas_date.reset_index().date,\n    name='Surprise',\n    yaxis='y2'\n\n)\ntrace5 = go.Scatter(\n    y=rednas_date[\"Fear\"],\n    x=rednas_date.reset_index().date,\n    name='Fear',\n    yaxis='y2'\n\n)\ntrace6 = go.Scatter(\n    y=rednas_date[\"Sad\"],\n    x=rednas_date.reset_index().date,\n    name='Sadness',\n    yaxis='y2'\n\n)\n\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(trace1)\nfig.add_trace(trace2,secondary_y=True)\nfig.add_trace(trace3,secondary_y=True)\nfig.add_trace(trace4,secondary_y=True)\nfig.add_trace(trace5,secondary_y=True)\nfig.add_trace(trace6,secondary_y=True)\nfig['layout'].update(height = 600, width = 800, title = 'Sentiments and Opening Price plotted with respect to the date',xaxis=dict(\n      tickangle=-90\n    ))\nfig.show()","4d8b0302":"rednas_date[\"delta\"] = rednas_date['adjOpen']-rednas_date[\"adjClose\"]","4fe28cee":"rednas_date","c6cc3330":"rednas_date.reset_index().plot(x='date',y='delta')","0511d099":"rednas_date.columns","1854d97a":"fig = make_subplots(rows=2, cols=1,shared_xaxes=True,subplot_titles=('Pearsons Correlation',  'Spearman Correlation'))\ncolorscale=     [[1.0              , \"rgb(165,0,38)\"],\n                [0.8888888888888888, \"rgb(215,48,39)\"],\n                [0.7777777777777778, \"rgb(244,109,67)\"],\n                [0.6666666666666666, \"rgb(253,174,97)\"],\n                [0.5555555555555556, \"rgb(254,224,144)\"],\n                [0.4444444444444444, \"rgb(224,243,248)\"],\n                [0.3333333333333333, \"rgb(171,217,233)\"],\n                [0.2222222222222222, \"rgb(116,173,209)\"],\n                [0.1111111111111111, \"rgb(69,117,180)\"],\n                [0.0               , \"rgb(49,54,149)\"]]","706a440f":"s_val =rednas_date.corr('pearson')\ns_idx = s_val.index\ns_col = s_val.columns\ns_val = s_val.values\nfig.add_trace(\n    go.Heatmap(x=s_col,y=s_idx,z=s_val,name='pearson',showscale=False,xgap=1,ygap=1,colorscale=colorscale),\n    row=1, col=1\n)\n\n\ns_val =rednas_date.corr('spearman')\ns_idx = s_val.index\ns_col = s_val.columns\ns_val = s_val.values\nfig.add_trace(\n    go.Heatmap(x=s_col,y=s_idx,z=s_val,xgap=1,ygap=1,colorscale=colorscale),\n    row=2, col=1\n)\n\nfig.update_layout(height=700, width=900, title_text=\"Locations That Contribute The Most To Our Cut-Offs\")\nfig.show()","cd6105cb":"trace1 = go.Scatter(\n    y=rednas_date['comms_num'],\n    x=rednas_date.reset_index().date,\n    name='Number of comments'\n\n)\ntrace2 = go.Scatter(\n    y=rednas_date[\"delta\"],\n    x=rednas_date.reset_index().date,\n    name='Difference between opening to closing prices',\n    yaxis='y2'\n\n)\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(trace1)\nfig.add_trace(trace2,secondary_y=True)\nfig['layout'].update(height = 600, width = 800, title = 'Sentiments and Opening Price plotted with respect to the date',xaxis=dict(\n      tickangle=-90\n    ))\nfig.show()","c48a5d4b":"## Using 'text2emotion' library to analyze and display the various emotions attributed to the posts (title+body)","7d6fd0b2":"### Aggregating by date and hour","15acc237":"### Plotting ratio of emotions by hour since 28\/01\/2021 9AM","a4572065":"###### Using data from NASDAQ","5860896c":"#### Dynamically adding the columns to. the main df","182f7b77":"#### Plotting the delta across time","a1c53f03":"### Sentiments and Closing Price plotted with respect to the date","abdc6be6":"### Obtaining historical data for. 'GME' stock using Tiingo","1af87809":"### Plotting ratio of emotions by day since 28\/01\/2021","f1f5de0a":"#### Changing the Pandas default plotting library to 'plotly'","8e741b0c":"### Creating columns to support aggregation and binning","54d250a2":"### Sentiments and Opening Price plotted with respect to the date","c076becd":"### Installing Tiingo ","bf3d60b9":"### Interactive graphs for:","c0651320":"### Calculating the difference between Opening and Closing Prices","0f4f1d4a":"### Combining the Titles and Bodies for each post","2899c0ab":"#### 1.Hourly activity","7823c5c9":"#### 2. Daily activity","b338b4db":"### Aggregate emotional identifiers against day\/hour"}}