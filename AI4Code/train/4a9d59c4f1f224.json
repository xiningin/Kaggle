{"cell_type":{"3a49ec32":"code","29e1c528":"code","b31ede7c":"code","c0221738":"code","996428cf":"code","42698643":"code","64ce5885":"code","1cf254c6":"code","a9acc4ed":"code","7da9fdc3":"code","e8731bc7":"code","6cf4986f":"code","81b34588":"code","20f4b0cb":"code","612c3eaa":"code","ed3958b3":"code","2e9a04cb":"code","24011b42":"code","c6f3023a":"code","0e4b9ab0":"code","2bdd638f":"code","83526a84":"code","ad2f6a29":"markdown","48445260":"markdown","a0ec2887":"markdown","6c62539a":"markdown","c91915cc":"markdown","7c0da8f7":"markdown","8eaecfaa":"markdown","dca0957c":"markdown"},"source":{"3a49ec32":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29e1c528":"import re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom scipy.sparse import vstack\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","b31ede7c":"df_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_sub = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\") \ndf_train.info()","c0221738":"df_train.drop_duplicates(subset=[\"text\", \"target\"], keep=\"first\", inplace=True)\nsep = df_train.shape[0]\ndf_train.info()","996428cf":"Y = df_train[\"target\"]\ndf_train.drop([\"target\"], axis=1, inplace=True)\nprint(df_train.shape, Y.shape)","42698643":"df_test = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ndf_test.info()","64ce5885":"df = pd.concat([df_train, df_test], axis=0)\ndf.drop([\"location\"], axis=1, inplace=True)\ndf.info()","1cf254c6":"df.head()","a9acc4ed":"# Decontraction\ndef decontracted(phrase):\n    # Specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # General\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","7da9fdc3":"# https:\/\/gist.github.com\/sebleier\/554280\n# We are removing the words from the stop words list: 'no', 'nor', 'not' as they generally hold\n# a lot of information regarding the meaning of the sentence.\n\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n    \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n    'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n    'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n    'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n    'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n    'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n    'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n    'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n    'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n    's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n    've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n    \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n    \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n    'won', \"won't\", 'wouldn', \"wouldn't\"])","e8731bc7":"# Combining all the above steps\npre_text = []\n\n# tqdm is for printing the status bar\nfor sen in tqdm(df['text'].values):\n    # Decontraction\n    sen = decontracted(sen)\n    # Remove words with numbers python: https:\/\/stackoverflow.com\/a\/18082370\/4084039\n    sen = re.sub(\"\\S*\\d\\S*\", \"\", sen).strip()\n    # Remove special characters: https:\/\/stackoverflow.com\/a\/5843547\/4084039\n    sen = re.sub('[^A-Za-z]+', ' ', sen)\n    # Removing all the stopwords\n    sen = ' '.join(e.lower() for e in sen.split() if e.lower() not in stopwords)\n    # Adding them back to pre_text\n    pre_text.append(sen.strip())","6cf4986f":"print(pre_text[10])\nprint(pre_text[20])\nprint(pre_text[30])","81b34588":"# count_vect = CountVectorizer(max_features=500, binary=False)\n\n# # Featurizing the Train Dataset (fit_transform)\n# fea_train = count_vect.fit_transform(pre_text[:sep])\n# print(fea_train.shape)\n\n# # Featuring the Test Dataset (transform)\n# fea_test = count_vect.transform(pre_text[sep:])\n# print(fea_test.shape)\n\n# fea_text = vstack([fea_train, fea_test])\n# fea_text.todense()\n# print(type(fea_text), fea_text.shape)","20f4b0cb":"# fea_names = count_vect.get_feature_names()\n# fea_to_ind = {}\n# for ind, fea in enumerate(fea_names):\n#     fea_to_ind[fea] = ind\n    \n# for i in range(df.shape[0]):\n#     key_words = df[\"keyword\"].iloc[i]\n#     if(not isinstance(key_words, float)):\n#         key_words = key_words.split('%20')\n#         indices = []\n#         for word in key_words:\n#             if word in fea_names:\n#                 indices.append(fea_to_ind[word])\n#         for ind in indices:\n#             fea_text[i, ind] = 2","612c3eaa":"tfidf_vect = TfidfVectorizer(\n    max_features=60000, ngram_range=(1,2), min_df=1, norm='l2', sublinear_tf=True\n)\n\n# Featurizing the Train Dataset (fit_transform)\nfea_train = tfidf_vect.fit_transform(pre_text[:sep])\nprint(fea_train.shape)\n\n# Featuring the Test Dataset (transform)\nfea_test = tfidf_vect.transform(pre_text[sep:])\nprint(fea_test.shape)\n\nfea_text = vstack([fea_train, fea_test])\nfea_text.todense()\nprint(type(fea_text), fea_text.shape)","ed3958b3":"df.drop([\"keyword\", \"text\"], axis=1, inplace=True)\nfea_text = pd.DataFrame.sparse.from_spmatrix(fea_text)\ndf_fea = pd.concat([df, fea_text.reindex(df.index)], axis=1)\nprint(df.shape, fea_text.shape, df_fea.shape)","2e9a04cb":"df_fea.head()","24011b42":"df_train = df_fea.iloc[ :sep, : ]\ndf_test = df_fea.iloc[sep: , : ]\n\nprint(df_train.columns)\n\nid_train = df_train['id']\ndf_train.drop(['id'], inplace=True, axis=1)\nid_test = df_test['id']\ndf_test.drop(['id'], inplace=True, axis=1)\n\nprint(df_train.shape, Y.shape, id_train.shape, df_test.shape, id_test.shape)","c6f3023a":"n = 1\nskf = StratifiedKFold(n_splits = 4)\n\nfor train_index, val_index in skf.split(df_train, Y):\n    X_train, X_val = df_train.iloc[train_index], df_train.iloc[val_index]\n    y_train, y_val = Y.iloc[train_index], Y.iloc[val_index]\n    model = LogisticRegression(max_iter = 1000, C = 3)\n    model.fit(X_train, y_train)\n    y_val_pred = model.predict(X_val)\n    y_val_train = model.predict(X_train)\n    print(\"Accuracy (Train) = \", f1_score(y_train, y_val_train))\n    print(\"F1 Score (Train) = \", f1_score(y_train, y_val_train))\n    print(\"Accuracy (Val) = \", f1_score(y_val, y_val_pred))\n    print(\"F1 Score (Val) = \", f1_score(y_val, y_val_pred))\n    \n    # Adding a Set of Predictions based off this model\n    df_sub[str(n)] = model.predict(df_test)\n    n += 1","0e4b9ab0":"fre = df_sub[['1', '2', '3', '4']].mode(axis=1)\ndf_sub['target'] = fre[0]\ndf_sub = df_sub[['id', 'target']]\ndf_sub['target'] = df_sub['target'].apply(lambda x : int(x))","2bdd638f":"df_sub.head()","83526a84":"df_sub.to_csv('submission.csv', index=False)","ad2f6a29":"## Binary Bag of Words (BoW)","48445260":"# Natural Language Processing with Disaster Sweets\n- Hola amigos, this is my Kaggle Notebook for the Kaggle competition Natural Language Processing with Disaster Tweets, which can be found [here](https:\/\/www.kaggle.com\/c\/nlp-getting-started\/overview)","a0ec2887":"# Preparing the dataset for Training","6c62539a":"# Installing & Importing Packages","c91915cc":"# Training the Model","7c0da8f7":"# Importing the Dataset","8eaecfaa":"# Pre-processing the Dataset\n- First, we will be performing the **decontraction** of all the contracted words like \"won't\", \"can't\", and many others.\n- Then, we removed all the words with numbers. Then, we removed all the special characters. Then, we removed all the stopwords\n- Finally, we saved all the pre-processed sentences in a list, which we use to over-write the original dataset.","dca0957c":"# Featurizing the Dataset\n- We will be trying Binary Bag of Words (BoW) as the first featurization technique. While performing this featurization, we have set the feature corresponding to key-word as 2, just to differentiate between the keyword and the rest of the words\n- This technique along with a Logistic Regression model gave worse results than the sample submission, hence dropping this approach."}}