{"cell_type":{"ca6a5fda":"code","ed86d807":"code","d6f49f26":"code","a03b7585":"code","be2c2c61":"code","ebf62992":"code","ee407c3b":"code","959ace09":"code","e44b0985":"code","4a41771a":"code","bda99177":"code","e983823c":"code","321bea86":"markdown"},"source":{"ca6a5fda":"# import libraries\nimport numpy as np, pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# visibility\npd.options.display.max_columns=100","ed86d807":"credit_data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ncredit_data.head()","d6f49f26":"# class imbalance status\ncredit_data.Class.value_counts(normalize=True)","a03b7585":"# check null values\ncredit_data.isnull().sum()","be2c2c61":"# check info\ncredit_data.info()","ebf62992":"# describe all the columns\ncredit_data.describe()","ee407c3b":"# import machine learning libraris to perform machine learning models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, plot_roc_curve, recall_score, precision_score","959ace09":"# assign X and y\nX = credit_data.drop(['Class'], axis=1)\ny = credit_data['Class']\n\n# train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=42)","e44b0985":"print(\"y_train Details: \")\nprint(y_train.value_counts(normalize=True))\n\nprint(\"===========================\")\n\nprint(\"y_test Details: \")\nprint(y_test.value_counts(normalize=True))\n","4a41771a":"# steps in pipeline\nsteps = [\n    (\"Preprocessing\", StandardScaler()),\n    (\"Classifier\", LogisticRegression(solver='liblinear'))\n]\n\n# pipeline object\npipe_LogRegg = Pipeline(steps=steps)\n\n# call fit as we would call classifiers\npipe_LogRegg.fit(X_train, y_train)","bda99177":"# evaluation functions\n\ndef all_classification_metrics(actual_output, predicted_output):\n    print(confusion_matrix(actual_output, predicted_output))\n    print(classification_report(actual_output, predicted_output))\n    print(\"Accuracy:\",round(accuracy_score(actual_output, predicted_output), 3))\n    print(\"Recall:\", round(recall_score(actual_output, predicted_output), 3))\n    print(\"Precision:\", round(precision_score(actual_output, predicted_output), 3))\n\n\ndef evaluation(model):\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    print(\"=\"*50)\n    # print train data metric scores\n    print(\"TRAIN data Details: \")\n    all_classification_metrics(y_train, y_train_pred)\n    print()\n    print(\"=\"*50,\"\\n\")\n    # print test data metric scores\n    print(\"TEST data Details: \")\n    all_classification_metrics(y_test, y_test_pred)\n    print(\"=\"*50,\"\\n\")\n    \n    # Plot ROC_AUC Curve\n    plot_roc_curve(model, X_test, y_test)\n    plt.title('ROC_AUC Curve', fontsize=16)\n    plt.show()","e983823c":"evaluation(pipe_LogRegg)","321bea86":"- No Null Values in any column"}}