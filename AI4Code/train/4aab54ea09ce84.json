{"cell_type":{"15d7e638":"code","0101f375":"code","085c892b":"code","eeb1b9de":"code","ac19299b":"code","81689a45":"code","1dfa6f90":"code","b7ae8084":"code","0cb55e68":"code","d7b8cf9e":"code","8bf02233":"code","fcd95521":"code","3366a011":"code","d35d905e":"code","d22a3765":"code","4a4a94fd":"code","a23f209e":"code","1ac68563":"code","1771d0a5":"code","4b0bc290":"code","24d0b6ef":"code","2b169ea8":"code","8dce4661":"markdown","cb4343c7":"markdown","9ae88a06":"markdown","6a0ea8d0":"markdown","1e487472":"markdown","51f678c0":"markdown","7abdff75":"markdown","92b1345b":"markdown","c95eaaf3":"markdown","c3fc0658":"markdown","b19189eb":"markdown","5aca6324":"markdown","a72d75b4":"markdown","de138ab2":"markdown","3073a05e":"markdown","8b0efe33":"markdown","2c744fed":"markdown","f80e15cd":"markdown","0f0e3007":"markdown","92af0d95":"markdown","ef5a52f8":"markdown"},"source":{"15d7e638":"!pip install git+https:\/\/github.com\/rwightman\/pytorch-image-models \n!pip install loguru","0101f375":"import os\nimport gc\nimport copy\nimport time\nimport random\n\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.cuda import amp\n\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\nfrom loguru import logger\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nimport timm\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\n\nfrom colorama import Fore\nb_ = Fore.BLUE","085c892b":"ROOT_DIR = \"..\/input\/seti-breakthrough-listen\"\nTRAIN_DIR = \"..\/input\/seti-breakthrough-listen\/train\"\nTEST_DIR = \"..\/input\/seti-breakthrough-listen\/test\"","eeb1b9de":"class CONFIG:\n    seed = 42\n    model_name = 'tf_efficientnetv2_s_in21k' \n    train_batch_size = 32\n    valid_batch_size = 64\n    img_size = 512\n    epochs = 5\n    learning_rate = 1e-4\n    min_lr = 1e-6\n    weight_decay = 1e-6\n    T_max = 10\n    scheduler = 'CosineAnnealingLR'\n    n_accumulate = 1\n    n_fold = 5\n    target_size = 1\n    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","ac19299b":"def set_seed(seed = 42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG.seed)","81689a45":"def get_train_file_path(image_id):\n    return \"..\/input\/seti-breakthrough-listen\/train\/{}\/{}.npy\".format(image_id[0], image_id)","1dfa6f90":"df = pd.read_csv(f\"{ROOT_DIR}\/train_labels.csv\")\nskf = StratifiedKFold(n_splits=CONFIG.n_fold, shuffle=True, random_state=CONFIG.seed)\nfor fold, ( _, val_) in enumerate(skf.split(X=df, y=df.target)):\n    df.loc[val_ , \"kfold\"] = int(fold)\n    \ndf['kfold'] = df['kfold'].astype(int)","b7ae8084":"df['file_path'] = df['id'].apply(get_train_file_path)\ndf.head()","0cb55e68":"class SETIDataset(Dataset):\n    def __init__(self, root_dir, df, transforms=None):\n        self.root_dir = root_dir\n        self.df = df\n        self.file_names = df['file_path'].values\n        self.labels = df['target'].values\n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        image = np.load(self.file_names[index]).astype(np.float32)\n        image = (image - image.mean(axis=(1,2), keepdims=True)) \/ image.std(axis=(1,2), keepdims=True)\n        image = np.vstack(image).transpose((1, 0))\n        label = torch.tensor(self.labels[index]).float()\n        \n        if self.transforms:\n            image = self.transforms(image=image)[\"image\"]\n            \n        return image, label","d7b8cf9e":"data_transforms = {\n    \"train\": A.Compose([\n        A.Resize(CONFIG.img_size, CONFIG.img_size),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.ShiftScaleRotate(shift_limit=0.1, \n                           scale_limit=0.15, \n                           rotate_limit=60, \n                           p=0.5),\n        A.CoarseDropout(p=0.5),\n        A.Cutout(p=0.5),\n        ToTensorV2()], p=1.),\n    \n    \"valid\": A.Compose([\n        A.Resize(CONFIG.img_size, CONFIG.img_size),\n        ToTensorV2()], p=1.)\n}","8bf02233":"class SETIModel(nn.Module):\n    def __init__(self, model_name, pretrained=True):\n        super(SETIModel, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained, in_chans=1)\n        self.n_features = self.model.classifier.in_features\n        self.model.classifier = nn.Linear(self.n_features, CONFIG.target_size)\n\n    def forward(self, x):\n        output = self.model(x)\n        return output\n    \nmodel = SETIModel(CONFIG.model_name)\nmodel.to(CONFIG.device);","fcd95521":"def mixup_data(x, y, alpha=1.0, use_cuda=True):\n    '''Returns mixed inputs, pairs of targets, and lambda'''\n    if alpha > 0:\n        lam = np.random.beta(alpha, alpha)\n    else:\n        lam = 1\n\n    batch_size = x.size()[0]\n    if use_cuda:\n        index = torch.randperm(batch_size).cuda()\n    else:\n        index = torch.randperm(batch_size)\n\n    mixed_x = lam * x + (1 - lam) * x[index, :]\n    y_a, y_b = y, y[index]\n    return mixed_x, y_a, y_b, lam\n\n\ndef mixup_criterion(criterion, pred, y_a, y_b, lam):\n    return lam * criterion(pred, y_a) + (1 - lam) * criterion(pred, y_b)","3366a011":"def criterion(outputs, targets):\n    return nn.BCEWithLogitsLoss()(outputs, targets)","d35d905e":"def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.train()\n    scaler = amp.GradScaler()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, (images, labels) in bar:         \n        images = images.to(device, dtype=torch.float)\n        labels = labels.to(device, dtype=torch.float)\n        \n        inputs, targets_a, targets_b, lam = mixup_data(images, labels.view(-1, 1))\n        \n        inputs = inputs.to(device, dtype=torch.float)\n        targets_a = targets_a.to(device, dtype=torch.float)\n        targets_b = targets_b.to(device, dtype=torch.float)\n        \n        batch_size = images.size(0)\n        \n        with amp.autocast(enabled=True):\n            outputs = model(inputs)\n            loss = mixup_criterion(criterion, outputs, targets_a, targets_b, lam)\n            loss = loss \/ CONFIG.n_accumulate\n            \n        scaler.scale(loss).backward()\n        \n        if (step + 1) % CONFIG.n_accumulate == 0:\n            scaler.step(optimizer)\n            scaler.update()\n            \n            # zero the parameter gradients\n            optimizer.zero_grad()\n                \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss\/dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])\n    gc.collect()\n    \n    return epoch_loss","d22a3765":"@torch.no_grad()\ndef valid_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.eval()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    TARGETS = []\n    PREDS = []\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, (images, labels) in bar:        \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        batch_size = images.size(0)\n        \n        outputs = model(images)\n        loss = criterion(outputs.view(-1), labels)\n        \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss\/dataset_size\n        \n        PREDS.append(outputs.sigmoid().cpu().detach().numpy())\n        TARGETS.append(labels.view(-1).cpu().detach().numpy())\n        \n        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])   \n    \n    TARGETS = np.concatenate(TARGETS)\n    PREDS = np.concatenate(PREDS)\n    val_auc = roc_auc_score(TARGETS, PREDS)\n    gc.collect()\n    \n    return epoch_loss, val_auc","4a4a94fd":"@logger.catch\ndef run(model, optimizer, scheduler, device, num_epochs):    \n    start = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_epoch_auc = 0\n    history = defaultdict(list)\n    \n    for epoch in range(1, num_epochs + 1): \n        gc.collect()\n        train_epoch_loss = train_one_epoch(model, optimizer, scheduler, \n                                           dataloader=train_loader, \n                                           device=CONFIG.device, epoch=epoch)\n        \n        valid_epoch_loss, valid_epoch_auc = valid_one_epoch(model, optimizer, scheduler,\n                                                            dataloader=valid_loader, \n                                                            device=CONFIG.device, epoch=epoch)\n    \n        history['Train Loss'].append(train_epoch_loss)\n        history['Valid Loss'].append(valid_epoch_loss)\n        history['Valid AUC'].append(valid_epoch_auc)\n        \n        print(f'Valid AUC: {valid_epoch_auc}')\n        \n        if scheduler is not None:\n            scheduler.step()\n        \n        # deep copy the model\n        if valid_epoch_auc >= best_epoch_auc:\n            print(f\"{b_}Validation AUC Improved ({best_epoch_auc} ---> {valid_epoch_auc})\")\n            best_epoch_auc = valid_epoch_auc\n            best_model_wts = copy.deepcopy(model.state_dict())\n            PATH = \"AUC{:.4f}_epoch{:.0f}.bin\".format(best_epoch_auc, epoch)\n            torch.save(model.state_dict(), PATH)\n            print(\"Model Saved\")\n            \n        print()\n    \n    end = time.time()\n    time_elapsed = end - start\n    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 3600, (time_elapsed % 3600) \/\/ 60, (time_elapsed % 3600) % 60))\n    print(\"Best AUC: {:.4f}\".format(best_epoch_auc))\n    \n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    \n    return model, history","a23f209e":"def prepare_data(fold):\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    \n    train_dataset = SETIDataset(TRAIN_DIR, df_train, transforms=data_transforms['train'])\n    valid_dataset = SETIDataset(TRAIN_DIR, df_valid, transforms=data_transforms['valid'])\n\n    train_loader = DataLoader(train_dataset, batch_size=CONFIG.train_batch_size, \n                              num_workers=4, shuffle=True, pin_memory=True)\n    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG.valid_batch_size, \n                              num_workers=4, shuffle=False, pin_memory=True)\n    \n    return train_loader, valid_loader","1ac68563":"def fetch_scheduler(optimizer):\n    if CONFIG.scheduler == 'CosineAnnealingLR':\n        scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=CONFIG.T_max, eta_min=CONFIG.min_lr)\n    elif CONFIG.scheduler == 'CosineAnnealingWarmRestarts':\n        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0=CONFIG.T_0, T_mult=1, eta_min=CONFIG.min_lr)\n    elif CONFIG.scheduler == None:\n        return None\n        \n    return scheduler","1771d0a5":"train_loader, valid_loader = prepare_data(fold=0)","4b0bc290":"optimizer = optim.Adam(model.parameters(), lr=CONFIG.learning_rate, weight_decay=CONFIG.weight_decay)\nscheduler = fetch_scheduler(optimizer)","24d0b6ef":"model, history = run(model, optimizer, scheduler=scheduler, device=CONFIG.device, num_epochs=CONFIG.epochs)","2b169ea8":"epochs = list(range(1, CONFIG.epochs + 1))\nfig = go.Figure()\ntrace1 = go.Scatter(x=epochs, y=history['Train Loss'],\n                    mode='lines+markers',\n                    name='Train Loss')\ntrace2 = go.Scatter(x=epochs, y=history['Valid Loss'],\n                    mode='lines+markers',\n                    name='Valid Loss')\nlayout = go.Layout(template=\"plotly_dark\", title='Loss Curve', \n                   xaxis=dict(title='Epochs'), yaxis=dict(title='Loss'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","8dce4661":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Validation Function<\/h1>","cb4343c7":"![](https:\/\/github.com\/google\/automl\/raw\/master\/efficientnetv2\/g3doc\/param_flops.png)","9ae88a06":"This paper introduces EfficientNetV2, a new family of convolutional networks that have faster\ntraining speed and better parameter efficiency\nthan previous models. To develop this family of\nmodels, we use a combination of training-aware\nneural architecture search and scaling, to jointly\noptimize training speed and parameter efficiency.\nThe models were searched from the search space\nenriched with new ops such as Fused-MBConv.\nOur experiments show that EfficientNetV2 models train much faster than state-of-the-art models\nwhile being up to 6.8x smaller\n\n*EfficientNetV2: Smaller Models and Faster Training: https:\/\/arxiv.org\/pdf\/2104.00298*","6a0ea8d0":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Configuration \u2699\ufe0f<\/h1>","1e487472":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Dataset Class<\/h1>","51f678c0":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Function<\/h1>","7abdff75":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Train Fold: 0<\/h1>","92b1345b":"Normalize each channel separately [https:\/\/www.kaggle.com\/c\/seti-breakthrough-listen\/discussion\/248194](https:\/\/www.kaggle.com\/c\/seti-breakthrough-listen\/discussion\/248194)","c95eaaf3":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Visualizations \ud83d\udcc9<\/h1>","c3fc0658":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Loss Function<\/h1>","b19189eb":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","5aca6324":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">EfficientNetV2<\/h1>\n<br>","a72d75b4":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Model<\/h1>","de138ab2":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Set Seed for Reproducibility<\/h1>","3073a05e":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Run<\/h1>","8b0efe33":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Define Optimizer and Scheduler<\/span>","2c744fed":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Folds<\/h1>","f80e15cd":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Import Required Libraries \ud83d\udcda<\/h1>","0f0e3007":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Create Dataloaders<\/span>","92af0d95":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Augmentations<\/h1>","ef5a52f8":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Install Required Libraries<\/h1>"}}