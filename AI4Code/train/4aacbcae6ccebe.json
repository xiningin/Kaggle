{"cell_type":{"95acabde":"code","aaa844c9":"code","1d5cdb5b":"code","47c2ab65":"code","6772654b":"code","85264072":"code","11100e0b":"code","c87942f0":"code","ff1a6f76":"code","4615cc63":"code","73c6583d":"code","f00bc26c":"code","a83c3f9f":"code","12a79cf5":"code","dd601b2b":"code","91c69410":"markdown","947ecfef":"markdown","5a39721d":"markdown","8477bcc6":"markdown","4513ffff":"markdown","636aad04":"markdown","344cfc1d":"markdown","ffe862b4":"markdown","a3981bb5":"markdown","467147c2":"markdown","f99754d5":"markdown","62ea8d60":"markdown","0b21a2ed":"markdown","0da5ce74":"markdown"},"source":{"95acabde":"import requests\nimport pandas as pd","aaa844c9":"raw= requests.get(\"https:\/\/services1.arcgis.com\/0MSEUqKaxRlEPj5g\/arcgis\/rest\/services\/ncov_cases2_v1\/FeatureServer\/2\/query?where=1%3D1&outFields=*&outSR=4326&f=json\")\nraw_json = raw.json()\nd = pd.DataFrame(raw_json[\"features\"])\nd.head(2)","1d5cdb5b":"data_list = d[\"attributes\"].tolist()\ndf = pd.DataFrame(data_list)\ndf.set_index(\"OBJECTID\")\ndf = df[[\"Country_Region\", \"Confirmed\", \"Deaths\", \"Recovered\"]]\ndf.head()","47c2ab65":"import geopandas as gpd","6772654b":"mapp=gpd.read_file('..\/input\/shapefile\/custom.geo.json')\nmapp.head()","85264072":"mapp = mapp.rename(columns={'geometry': 'geometry','name':'Country_Region'}).set_geometry('geometry')\nmapp.drop(mapp.columns.difference(['Country_Region','geometry']), 1, inplace=True)\nmapp[\"Country_Region\"].replace({\"United States\": \"US\", \"Korea\": \"Korea, South\", \"Macedonia\": \"North Macedonia\",\"Dominican Rep.\":\"Dominican Republic\",\"Eq. Guinea\":\"Equatorial Guinea\",\"Bosnia and Herz.\":\"Bosnia and Herzegovina\",\"Czech Rep.\":\"Czechia\",\"Dem. Rep. Congo\":\"Congo (Kinshasa)\",\"Lao PDR\":\"Laos\",\"Taiwan\":\"Taiwan*\",\"Central African Rep.\":\"Central African Republic\",\"W. Sahara\":\"Western Sahara\",\"Greenland\":\"Denmark\",\"C\u00f4te d'Ivoire\":\"Cote d'Ivoire\",\"Congo\":\"Congo (Brazzaville)\",\"S. Sudan\":\"South Sudan\"}, inplace=True)\nmapp.head(2)","11100e0b":"merged = mapp.merge(df, on = 'Country_Region', how='left')\nmerged[5:9]","c87942f0":"import json\nmerged_json = json.loads(merged.to_json())\njson_data = json.dumps(merged_json)","ff1a6f76":"from bokeh.io import output_notebook, show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar, HoverTool\nfrom bokeh.palettes import brewer","4615cc63":"geosource = GeoJSONDataSource(geojson = json_data)\npalette = brewer[\"Blues\"][9]\npalette = palette[::-1]\n#Instantiate LinearColorMapper that linearly maps numbers in a range, into a sequence of colors.\ncolor_mapper = LinearColorMapper(palette = palette, low = -500000, high = 2000000)\n#Create figure object.\np = figure(title = '', plot_height = 400 , plot_width = 810, toolbar_location = None)\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\np.xaxis.visible = False\np.yaxis.visible = False\np.background_fill_color = \"#D3D3D3\"\n#Add patch renderer to figure. \np.patches('xs','ys', source = geosource,fill_color = {'field' :'Confirmed', 'transform' : color_mapper},\n          line_color = '#D3D3D3', line_width = 0.6, fill_alpha = 1)\nhover = HoverTool(tooltips = [ ('Country: ','@Country_Region'),('Confirmed: ', '@Confirmed'),('Deaths: ','@Deaths')])\np.add_tools(hover)\n#Display figure inline in notebook.\noutput_notebook()\n#Display figure.\nshow(p)","73c6583d":"import plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","f00bc26c":"df_top10 = df.nlargest(10, \"Confirmed\")\ntop10_countries_1 = df_top10[\"Country_Region\"].tolist()\ntop10_confirmed = df_top10[\"Confirmed\"].tolist()\n\ndf_top20 = df.nlargest(10, \"Recovered\")\ntop10_countries_2 = df_top20[\"Country_Region\"].tolist()\ntop10_recovered = df_top20[\"Recovered\"].tolist()\n\ndf_top30 = df.nlargest(10, \"Deaths\")\ntop10_countries_3 = df_top30[\"Country_Region\"].tolist()\ntop10_deaths = df_top30[\"Deaths\"].tolist()","a83c3f9f":"total_confirmed = df[\"Confirmed\"].sum()\ntotal_recovered = df[\"Recovered\"].sum()\ntotal_deaths = df[\"Deaths\"].sum()","12a79cf5":"fig = make_subplots(\n    rows = 4, cols = 3,\n\n    specs=[\n            [    {\"type\": \"indicator\"}, {\"type\": \"indicator\"}, {\"type\": \"indicator\"} ],\n            [    {\"type\": \"bar\", \"colspan\":3}, None, None],\n            [    {\"type\": \"bar\", \"colspan\":3}, None, None],\n            [    {\"type\": \"bar\", \"colspan\":3}, None, None],\n          ]\n)","dd601b2b":"fig.add_trace(\n    go.Indicator(\n        mode=\"number\",\n        value=total_confirmed,\n        title=\"Confirmed Cases\",\n    ),\n    row=1, col=1\n)\nfig.add_trace(\n    go.Indicator(\n        mode=\"number\",\n        value=total_recovered,\n        title=\"Recovered Cases\",\n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Indicator(\n        mode=\"number\",\n        value=total_deaths,\n        title=\"Deaths\",\n    ),\n    row=1, col=3\n)\n\nfig.add_trace(\n    go.Bar(\n        x=top10_countries_1,\n        y=top10_confirmed, \n        name= \"Confirmed Cases\",\n        marker=dict(color=\"#001a66\"), \n        showlegend=True,\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Bar(x=top10_countries_2,\n        y=top10_recovered, \n        name= \"Recovered Cases\",\n        marker=dict(color=\"#004d99\"), \n        showlegend=True),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Bar(\n        x=top10_countries_3,\n        y=top10_deaths, \n        name= \"Deaths\",\n        marker=dict(color=\"#809fff\"), \n        showlegend=True),\n    row=4, col=1\n)\nfig.update_layout(\n    template=\"plotly_white\",\n    title = \"Global COVID-19 Cases\",\n    showlegend=True,\n    legend_orientation=\"h\",\n    legend=dict(x=0.65, y=0.8),\n)\n","91c69410":"### Merging both the datasets to obtain a final dataset dataset with the country name, it\u2019s geometry and the COVID-19 data","947ecfef":"### Selecting the required columns ","5a39721d":"Summing all the numbers for the indicators","8477bcc6":"### Keeping only the required columns and replacing the names of some countries so that they match with the ones in the data provided by the webservice","4513ffff":"# 1. Interactive choropleth map using Bokeh library\nFor this map, I have used two data sources. The first is a dataset of COVID-19 cases in every country. The aim is to produce a map on real time data. Therefore, instead of using a static datasource, like a .csv or an excel file, I have used the data derived from a web service. This code directly fetches data from the web service provided by ESRI using a request module. The data from this service is updated on a daily basis. So, whenever the code is run, the map is updated automatically.\nThe data can be accessed from:\n[https:\/\/services1.arcgis.com\/0MSEUqKaxRlEPj5g\/arcgis\/rest\/services\/ncov_cases2_v1\/FeatureServer\/2\/query?where=1%3D1&outFields=*&outSR=4326&f=json](http:\/\/)\n\nThe *requests* module fetces data from the source provided.\n\n\n","636aad04":"## Converting the dataframe into a Geodatasource and plotting the map ","344cfc1d":"### setting up the elements of the dashboard","ffe862b4":"### In this dashboard, top 10 countries with the highest number of active, confirmed and death have been displayed using bar graphs for comparsion. In addition to it, three indicators have been used to display the numbers in a large font.\n### It is an interactive dashboard. Whenever the pointer is hovered on the bars of the bar graph, the data pops out\n\n### Importing the required libraries and modules","a3981bb5":"The global spread of corona virus has motivated to data analysts to come up with ways to visualise country-wise data using various techniques. This notebook shows two visualisations of this data. First is a choropleth map and second is a mini-dashboard. Instead of using a static dataset, I've used data ***directly from a webservice***, where the data is updated on a daily basis. Therefore, ***this notebook shows new visualisations everytime it's run.***","467147c2":"### Bokeh is the library being used to make this map. It is one of the best python libraries for visualising data. It generates higly interactive plots\n### The map here is interactive. Whenever you hover the pointer over a country, the COVID-19 data for that country pops out","f99754d5":"### Preparing the data for the dashboard\nThe data from the webservice is used for the dashboard too. Lists of top 10 countries for each category are made","62ea8d60":"## Getting data for the map\nThe next dataset that is required is a shapefile of all the countries. A shape file consists of the geometry of each country on a map. For the I have used the ***Geopandas*** library","0b21a2ed":"Thus, a choropleth map is created with countries having a high number of COVID-19 cases coloured with a darker shade of blue.\n\n# Making a mini-dashboard using Plotly","0da5ce74":"### Making subplots for each element of the dashboard"}}