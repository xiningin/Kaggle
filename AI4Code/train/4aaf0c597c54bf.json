{"cell_type":{"5ab38986":"code","6c7d0752":"code","1cf46686":"code","699be542":"code","46dfd413":"code","a830368c":"code","44660b3f":"code","0f69a4b0":"code","d7ab5522":"code","1f2fa70a":"code","18b7799a":"code","f4d9da75":"code","52397c83":"code","98b35078":"code","90027f79":"code","c08385ef":"code","80e4cdc8":"code","18341c6f":"code","07d269fe":"code","6f333cbd":"code","d1b90cd9":"code","afbafb6b":"code","df59630a":"code","a3606c28":"code","96ede658":"code","0522e708":"markdown","55c7a6e3":"markdown","064c3bfe":"markdown"},"source":{"5ab38986":"import os\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom keras.models import Model\nfrom keras.layers import Input, Embedding, Dense, Conv2D, MaxPool2D\nfrom keras.layers import Reshape, Flatten, Concatenate, Dropout, SpatialDropout1D\nfrom keras.preprocessing import text, sequence\nfrom keras.callbacks import Callback\nimport warnings\n\nLEN_WORDS = 30\nLEN_EMBEDDING = 300","6c7d0752":"EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')","1cf46686":"X_train = train[\"question_text\"].fillna(\"fillna\").values\ny_train = train[\"target\"].values\nX_test = test[\"question_text\"].fillna(\"fillna\").values\n\nmax_features = 30000\nmaxlen = 40\nembed_size = 300\n\ntokenizer = text.Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(X_train) + list(X_test))\nX_train = tokenizer.texts_to_sequences(X_train)\nX_test = tokenizer.texts_to_sequences(X_test)\nx_train = sequence.pad_sequences(X_train, maxlen=maxlen)\nx_test = sequence.pad_sequences(X_test, maxlen=maxlen)","699be542":"def get_coefs(word, *arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE))\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix = np.zeros((nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix[i] = embedding_vector","46dfd413":"from keras.models import Sequential\nfrom keras.layers import CuDNNLSTM, Dense, Bidirectional, Dropout\nfrom keras.callbacks import Callback\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score","a830368c":"from keras import backend as K\n\ndef f1(y_true, y_pred):\n    def recall(y_true, y_pred):\n        \"\"\"Recall metric.\n\n        Only computes a batch-wise average of recall.\n\n        Computes the recall, a metric for multi-label classification of\n        how many relevant items are selected.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        \"\"\"Precision metric.\n\n        Only computes a batch-wise average of precision.\n\n        Computes the precision, a metric for multi-label classification of\n        how many selected items are relevant.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\nclass Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_f1s = []\n        self.val_recalls = []\n        self.val_precisions = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        val_predict = (np.asarray(self.model.predict(self.model.validation_data[0]))).round()\n        val_targ = self.model.validation_data[1]\n        _val_f1 = f1_score(val_targ, val_predict)\n        _val_recall = recall_score(val_targ, val_predict)\n        _val_precision = precision_score(val_targ, val_predict)\n        self.val_f1s.append(_val_f1)\n        self.val_recalls.append(_val_recall)\n        self.val_precisions.append(_val_precision)\n        print(\" \u2014 val_f1: %f \u2014 val_precision: %f \u2014 val_recall %f\" %(_val_f1, _val_precision, _val_recall))\n        return \n \nmy_metrics = Metrics()","44660b3f":"from keras.models import Model\nfrom keras.layers import Conv1D, Input, MaxPooling1D, Flatten, Dense, BatchNormalization, concatenate\nfrom keras.layers import LeakyReLU, Activation\nfrom keras.layers import LeakyReLU\n\nclass LeakyReLU(LeakyReLU):\n    def __init__(self, **kwargs):\n        self.__name__ = \"LeakyReLU\"\n        super(LeakyReLU, self).__init__(**kwargs)\n","0f69a4b0":"STRIDE_1 = 2\nSTRIDE_2 = 4\nSTRIDE_3 = 8\n\nFILTER_1 = 64\nFILTER_2 = 64\nFILTER_3 = 64","d7ab5522":"inp = Input(shape=(maxlen, ))\nembed_layer1 = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nembed_layer1 = SpatialDropout1D(0.4)(embed_layer1)\n\n# line1 = BatchNormalization()(Input_layer)\nline1 = Conv1D(FILTER_1, STRIDE_1)(embed_layer1)\nline1 = Activation(LeakyReLU())(line1)\nline1 = MaxPooling1D(STRIDE_1)(line1)\nline1 = Conv1D(FILTER_1, STRIDE_1)(line1)\nline1 = Activation(LeakyReLU())(line1)\nline1 = MaxPooling1D(STRIDE_1)(line1)\nline1 = Conv1D(FILTER_1, STRIDE_1)(line1)\nline1 = Activation(LeakyReLU())(line1)\nline1 = MaxPooling1D(STRIDE_1*2)(line1)  # global max pooling\nline1 = Flatten()(line1)\n\n# line2 = BatchNormalization()(Input_layer)\nline2 = Conv1D(FILTER_2, STRIDE_1)(embed_layer1)\nline2 = Activation(LeakyReLU())(line2)\nline2 = MaxPooling1D(STRIDE_1)(line2)\nline2 = Conv1D(FILTER_2, STRIDE_1)(line2)\nline2 = Activation(LeakyReLU())(line2)\nline2 = MaxPooling1D(STRIDE_1)(line2)\nline2 = Conv1D(FILTER_2, STRIDE_1)(line2)\nline2 = Activation(LeakyReLU())(line2)\nline2 = MaxPooling1D(STRIDE_1*2)(line2)  # global max pooling\nline2 = Flatten()(line2)\n\n# line3 = BatchNormalization()(Input_layer)\nline3 = Conv1D(FILTER_3, STRIDE_1)(embed_layer1)\nline3 = Activation(LeakyReLU())(line3)\nline3 = MaxPooling1D(STRIDE_1)(line3)\nline3 = Conv1D(FILTER_3, STRIDE_1)(line3)\nline3 = Activation(LeakyReLU())(line3)\nline3 = MaxPooling1D(STRIDE_1)(line3)\nline3 = Conv1D(FILTER_3, STRIDE_1)(line3)\nline3 = Activation(LeakyReLU())(line3)\nline3 = MaxPooling1D(STRIDE_1*2)(line3)  # global max pooling\nline3 = Flatten()(line3)\n\nconcat_layer = concatenate([line1, line2, line3])\n\nconv1d_dense = Dense(1024, activation='relu')(concat_layer)","1f2fa70a":"embed_layer2 = Embedding(max_features, embed_size, weights=[embedding_matrix])(inp)\nembed_layer2 = SpatialDropout1D(0.4)(embed_layer2)","18b7799a":"rnn_line = Bidirectional(CuDNNLSTM(32, return_sequences=True), input_shape=(maxlen, embed_size))(embed_layer2)\nrnn_line = Bidirectional(CuDNNLSTM(32))(rnn_line)\nrnn_dense = Dense(1024, activation='relu')(rnn_line)\n","f4d9da75":"total = concatenate([conv1d_dense, rnn_dense])\npreds = Dense(1, activation='sigmoid')(total)\n\nmodel = Model(inputs=inp, outputs=preds)","52397c83":"model.summary()","98b35078":"from keras.utils import plot_model\nplot_model(model, to_file='model.png')\n\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\n\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","90027f79":"from keras import backend as K","c08385ef":"def f1_loss(y_true, y_pred):\n    \"\"\"Custom f1 loss for bicategorical\n    y must be of shape where y.shape[-1] == 2\n    y[..., 0] must be the category for true\n    y[..., 1] must be the category for false\n    \"\"\"\n    true_truth = K.dot(y_true, K.constant([1., 0.], dtype='float32', shape=(2, 1)))\n    true_false = K.dot(y_true, K.constant([0., 1.], dtype='float32', shape=(2, 1)))\n\n    y_false = K.constant(1., dtype='float32') - y_true\n\n    fake_truth = K.dot(y_false, K.constant([1., 0.], dtype='float32', shape=(2, 1)))\n    fake_false = K.dot(y_false, K.constant([0., 1.], dtype='float32', shape=(2, 1)))\n\n    TP_temp = K.sum(true_truth * y_pred)\n    FP_temp = K.sum(fake_truth * y_pred)\n    FN_temp = K.sum(fake_false * y_pred)\n\n    loss = (FP_temp + FN_temp) \/ (2 * TP_temp + FP_temp + FN_temp + K.epsilon())\n","80e4cdc8":"model.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy', f1])","18341c6f":"X_tra, X_val, y_tra, y_val = train_test_split(x_train, y_train, train_size=0.95,\n                                              random_state=1989)","07d269fe":"class F1Evaluation(Callback):\n    def __init__(self, validation_data=(), interval=1):\n        super(Callback, self).__init__()\n\n        self.interval = interval\n        self.X_val, self.y_val = validation_data\n\n    def on_epoch_end(self, epoch, logs={}):\n        if epoch % self.interval == 0:\n            y_pred = self.model.predict(self.X_val, verbose=0)\n            y_pred = (y_pred > 0.5).astype(int)\n            score = f1_score(self.y_val, y_pred)\n            print(\"\\n F1 Score - epoch: %d - score: %.6f \\n\" % (epoch+1, score))","6f333cbd":"my_weights = '..\/working\/2_channel.h5'","d1b90cd9":"try:\n    model.load_weights(my_weights)\n    print('Load weights')\nexcept:\n    pass","afbafb6b":"batch_size = 256\nepochs = 50\n\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\ncheck_point = ModelCheckpoint(my_weights, monitor=\"val_f1\", mode=\"max\",\n                              verbose=True, save_best_only=True)\nearly_stop = EarlyStopping(monitor=\"val_f1\", mode=\"max\", patience=8,verbose=True)\nF1_Score = F1Evaluation(validation_data=(X_val, y_val), interval=1)\n\nhist = model.fit(X_tra, y_tra, batch_size=batch_size, epochs=epochs,\n                 validation_data=(X_val, y_val),\n                 callbacks=[early_stop, check_point, F1_Score], verbose=1)","df59630a":"from sklearn import metrics\n\npred_noemb_val_y = model.predict([X_val], batch_size=1024, verbose=1)\nscores_list = dict()\nfor thresh in np.arange(0.1, 0.6, 0.01):\n    thresh = np.round(thresh, 2)\n    temp_score = metrics.f1_score(y_val, (pred_noemb_val_y>thresh).astype(int))\n    scores_list[thresh] = temp_score\n    print(\"F1 score at threshold {0} is {1}\".format(thresh, metrics.f1_score(y_val, (pred_noemb_val_y>thresh).astype(int))))","a3606c28":"opt_threshold = max(scores_list, key=scores_list.get)","96ede658":"y_pred = model.predict(x_test, batch_size=1024, verbose=1)\ny_pred = (y_pred > opt_threshold).astype(int)\nsubmission['prediction'] = y_pred\nsubmission.to_csv('submission.csv', index=False)","0522e708":"# LSTM line","55c7a6e3":"- I referred below helpful kernels. Thanks for the authors! If you think this kernel is helpful, please upvote them!\n- https:\/\/www.kaggle.com\/yekenot\/2dcnn-textclassifier\n- https:\/\/www.kaggle.com\/applecer\/use-f1-to-select-model-lstm-based","064c3bfe":"# Conv1D line"}}