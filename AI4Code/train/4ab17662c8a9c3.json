{"cell_type":{"ae643848":"code","06ba3aeb":"code","78748db1":"code","ea56c590":"code","f418eaf5":"code","3c5a9e29":"code","cf00e94f":"code","567da0ac":"code","97805ad1":"code","e9200a18":"code","8ec6070c":"code","f45265cf":"code","971cfd49":"code","2af043bf":"code","70655d3f":"code","d458cf12":"markdown"},"source":{"ae643848":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom sklearn.metrics import mean_squared_error\n\nfrom catboost import CatBoostRegressor\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_colwidth', 0)","06ba3aeb":"filepath = '\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv'\ndf = pd.read_csv(filepath)\ndf['date'] = pd.to_datetime(df['date'])\ndf.head()","78748db1":"df.info()","ea56c590":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue'] * 100)), \n                                              x['measurable_impressions']) * 1000 , axis=1)\n\ndf = df.drop('total_revenue', axis=1)","f418eaf5":"SEP_DATE = pd.to_datetime('2019-06-22')\n\ndef split_data(data, sep_date):\n    train_data = data[(data['date'] < sep_date)].reset_index(drop=True)\n    test_data = data[(data['date'] >= sep_date)].reset_index(drop=True)\n    return train_data, test_data\n\ntrain_data, test_data = split_data(df, sep_date=SEP_DATE)","3c5a9e29":"def clean_CPM(data):\n    return data[\n        (data['CPM'] >= 0) \n        & (data['CPM'] < data['CPM'].quantile(0.95))\n    ].reset_index(drop=True)\n\ntrain_data = clean_CPM(train_data)\ntest_data = clean_CPM(test_data)","cf00e94f":"train_data.describe()","567da0ac":"train_data.agg(['unique']).transpose()","97805ad1":"columns_for_id_small_count = [\n    'site_id', \n    'ad_type_id', \n    'device_category_id', \n    'line_item_type_id', \n    'os_id', \n    'monetization_channel_id'\n]\n\n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(16, 15))\nfor idx, feat in  enumerate(columns_for_id_small_count):\n    sns.boxplot(x=feat, y='CPM', data=train_data, ax=axes[idx \/\/ 2, idx % 2])\n    axes[idx \/\/ 2, idx % 2].legend()\n    axes[idx \/\/ 2, idx % 2].set_xlabel(feat)\n    axes[idx \/\/ 2, idx % 2].set_ylabel('CPM');","e9200a18":"columns_for_id_big_count = [\n    'geo_id',\n    'order_id',\n    'ad_unit_id',\n]\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(16, 15))\nfor idx, feat in  enumerate(columns_for_id_big_count):\n    sns.boxplot(x=feat, y='CPM', data=train_data, ax=axes[idx], showfliers=False)\n    axes[idx].legend()\n    axes[idx].set_xlabel(feat)\n    axes[idx].set_ylabel('CPM');\n    xax = axes[idx].xaxis\n    xlabels = xax.get_ticklabels()\n    for label in xlabels:\n        label.set_rotation(90)","8ec6070c":"fig, axes = plt.subplots(figsize=(12, 6))\nsns.boxplot(x='date', y='CPM', data=train_data, showfliers=False, ax=axes)\nxax = axes.xaxis\nxlabels = xax.get_ticklabels()\nfor label in xlabels:\n    label.set_rotation(60)","f45265cf":"columns_for_num = [\n    'total_impressions', \n    'viewable_impressions', \n    'measurable_impressions',\n    'CPM'\n]\nsns.pairplot(train_data[columns_for_num])","971cfd49":"features = [\n    'site_id', \n    'ad_type_id', \n    'geo_id', \n    'device_category_id', \n    'advertiser_id', \n    'order_id',\n    'line_item_type_id', \n    'os_id', \n    'monetization_channel_id', \n    'ad_unit_id', \n    'total_impressions', \n    'viewable_impressions', \n    'measurable_impressions'\n]\n\nX_train, y_train = train_data[features], train_data['CPM']\nX_test, y_test = test_data[features], test_data['CPM']","2af043bf":"booster = CatBoostRegressor(\n    learning_rate=0.1, \n    max_depth=10, \n    iterations=200, \n    loss_function='RMSE',\n    logging_level='Silent',\n)\n\nbooster.fit(X_train, y_train)","70655d3f":"y_train_pred = booster.predict(X_train)\ny_test_pred = booster.predict(X_test)\n\nprint('TRAIN_MSE: ',round(mean_squared_error(y_train, y_train_pred), 4))\nprint('TEST_MSE: ',round(mean_squared_error(y_test, y_test_pred), 4))","d458cf12":"# TEST_MSE: 2833.7044"}}