{"cell_type":{"b5349329":"code","6459f6a5":"code","f8eefb08":"code","56b79189":"code","1182dcf8":"code","2793df19":"code","d66dcdff":"code","79be5f9c":"code","14a10dc5":"code","9e0f2886":"code","1e5abefc":"code","ea8517ea":"code","76d8ebad":"code","b1b85ced":"code","389438d5":"code","11d882d1":"code","446ddfd3":"code","ceafbfb3":"markdown","f1c5f526":"markdown"},"source":{"b5349329":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\nfrom sklearn.metrics import mean_squared_error,accuracy_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nbase=pd.read_excel(\"\/kaggle\/input\/tabela\/Tabel_Treinamento_RNA.xls\")\nx=np.array(base.drop([\"d\"],1))\ny=np.array(base.d)\nbase_teste=pd.read_csv(\"\/kaggle\/input\/basevalidacao\/teste.csv\")\nbase_teste\n\nxtest=np.array(base_teste.drop(['d'],1))\nytest=np.array(base_teste.d)\nxtest","6459f6a5":"def graf(x,w1,w2):\n    plt.plot(x[:,0],x[:,1], \"yo\",w1[0],w1[1],\"ro\",w2[0],w2[1],\"bo\")\n    plt.ylabel('x2')\n    plt.xlabel('x1')\n    plt.show()","f8eefb08":"def grafDist(omg1,omg2,w1,w2):\n    circle1 = plt.Circle(w1, np.max(distXW1), color='r', fill=False)\n    circle2 = plt.Circle(w2, np.max(distXW2), color='blue', fill=False)\n    fig, ax = plt.subplots()\n    ax.plot(omg1[:,0],omg1[:,1], \"yo\",omg2[:,0],omg2[:,1], \"co\",w1[0],w1[1],\"ro\",w2[0],w2[1],\"bo\")\n    ax.add_artist(circle1)\n    ax.add_artist(circle2)","56b79189":"plt.plot(x[:,0],x[:,1], \"ro\")\nplt.ylabel('x2')\nplt.xlabel('x1')\nplt.show()","1182dcf8":"w1=x[0]\nw2=x[1]\ngraf(x,w1,w2)\n","2793df19":"omg1I=np.array([[1]])\nomg2I=np.array([[1]])\nomg1F=np.array([[]])\nomg2F=np.array([[]])\ndistXW1=np.array([[]])\ndistXW2=np.array([[]])\n#omg1I=np.append(omg1I,1)\n#omg1I=np.append(omg1I,2)","d66dcdff":"def media(vet):\n    media1=0\n    media2=0\n    for i in range(len(vet)):        \n        if (i%2==0):\n            media1+=vet[i]           \n        else:\n            media2+=vet[i]           \n    return [media1\/(len(vet)\/2),media2\/(len(vet)\/2)]","79be5f9c":"while(np.array_equal(omg1I,omg1F)==False and np.array_equal(omg2I,omg2F)==False):    \n    omg1I=np.copy(omg1F)\n    omg2I=np.copy(omg2F)\n    omg1F=np.delete(0,0)\n    omg2F=np.delete(0,0)    \n    distXW1=np.delete(0,0)\n    distXW2=np.delete(0,0)\n    aux1=[]\n    aux2=[]\n    aux1.clear()\n    aux2.clear()\n    \n    for i in range(len(x)):\n        distW1=math.sqrt(sum((x[i]-w1)**2))     \n        distW2=math.sqrt(sum((x[i]-w2)**2)) \n     \n        if(distW1<distW2):\n            aux1.append(x[i])\n            distXW1=np.append(distXW1,distW1)\n\n        else:\n            aux2.append(x[i])\n            distXW2=np.append(distXW2,distW2)\n\n    omg1F=np.array(aux1)\n    omg2F=np.array(aux2)\n    w1=np.array([np.mean(omg1F[:, 0]), np.mean(omg1F[:, 1])])\n    w2=np.array([np.mean(omg2F[:, 0]), np.mean(omg2F[:, 1])])   \n    grafDist(omg1F,omg2F,w1,w2)\n    \n    ","14a10dc5":"def variancia(vet,w):\n    \n    return np.mean((vet-w)**2)","9e0f2886":"\nprint(\"-----------------------------------------------------------\")\nprint(\"omega: \",omg1F)\nprint(\"peso: \",w1)\nvar1=variancia(omg1F,w1)\nprint(\"Variancia1: \",var1)\nprint(\"-----------------------------------------------------------\")\nprint(\"omega: \",omg2F)\nprint(\"peso: \",w2)\nvar2=variancia(omg2F,w2)\nprint(\"Variancia2: \",var2)\nprint(\"-----------------------------------------------------------\")","1e5abefc":"def getG(vet,w,var):  \n    g=np.array([])\n    aux=[]\n    for i in range(len(vet)):        \n        div=sum((vet[i]-w)**2) \n        aux.append(math.exp(-div\/(2*var)))\n    g=np.append(g,aux)           \n          \n    \n    return g","ea8517ea":"def x_to_g(x,w1,w2,var1,var2):\n    bias=np.ones([len(x),1]) \n    g1=getG(x,w1,var1)\n    g2=getG(x,w2,var2)\n    z=np.array([g1,g2]).T\n    \n    return np.hstack((bias,z)) \n#['{:.3f}'.format(float(x)) for x in g1]\ndef gerarPesos(tam):       \n    return np.random.uniform(0,1,tam)\n\n#Fun\u00e7\u00e3o para achar o EQM\ndef eqmFun(X,y,w):       \n    yp=[]\n    for i in range(len(X)):\n        yp.append(np.dot(X[i],w))                        \n    return mean_squared_error(y,np.array(yp))","76d8ebad":"z=x_to_g(x,w1,w2,var1,var2)\nw=gerarPesos(len(x[0])+1)     \nwInicio=np.copy(w)              \ntolerancia=0.0000001\nl_rate=0.01\nnum_epocas=100000     \nepocas=0 \neqm=0.1  \neqmIni=0.1  ","b1b85ced":"    \nwhile (eqm>tolerancia):\n           \n    for i in range(len(x)): \n        yp= np.dot(z[i],w)    #Previsao para calcular o erro         \n        erro = y[i]-yp          #Calculo do Erro\n        w+=l_rate*erro*z[i]    #Atualiza os pesos\n        \n    eqmFim=eqmFun(z,y,w)       #EQM \"final\" que sera utilisado para o calculo do EQM de parada do loop                           \n    eqm=abs(eqmFim-eqmIni)      #Calculo do EQM que para o loop\n    print(\"EQM: {} | epocas: {}\".format(eqm,epocas))\n    #v_eqm.append(eqm)\n    eqmIni=eqmFim               #Copias o EQM \"final\" para o \"inicial\"\n    epocas+=1                   #Adicona 1 ao numero de epocas\n    if(epocas==num_epocas):     #Parada para quando atingir o maximo de epocas\n        break","389438d5":"def predict(X,w):\n    if(sum(w*X)>=0):\n        return 1#,sum(w*X)\n    else:\n        return -1#,sum(w*X)\n    \ndef predict1(X,w):    \n        return sum(w*X)\n    \n\n#print(predict(Zb[2],w))","11d882d1":"ztrei=x_to_g(x,w1,w2,var1,var2)\nsaida=np.array([])\n\nfor i in range(len(ztrei)):\n    saida=np.append(saida,predict(ztrei[i],w))\n    \nacc=accuracy_score(y,saida)\nprint('O modelo obteve {}% de acur\u00e1cia.'.format(acc*100))\n","446ddfd3":"ztest=x_to_g(xtest,w1,w2,var1,var2)\nsaida=np.array([])\ns=np.array([])\nfor i in range(len(ztest)):\n    saida=np.append(saida,predict(ztest[i],w))\n    s=np.append(s,predict1(ztest[i],w))\n    \nacc=accuracy_score(ytest,saida)\nprint('O modelo obteve {}% de acur\u00e1cia.'.format(acc*100))\nprint(\"saida pre\\n\",s)\nprint(\"saida pos\\n\",saida)\nprint(\"W\",w)","ceafbfb3":"# **Acuracy com a base de teste**","f1c5f526":"# **Acuracy com a base de treinamento**"}}