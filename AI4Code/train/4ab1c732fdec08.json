{"cell_type":{"2b48b96d":"code","a4b8fa0e":"code","139046c9":"code","402d386c":"code","132ec5ad":"code","c12b53c8":"code","edc13c29":"code","4e2f99c8":"code","7184a5c7":"code","3b5e047e":"code","7b60d7ea":"code","9213552f":"code","2e6718f0":"code","6336ac67":"code","691aa4bb":"code","bd70651b":"code","f8be2c9c":"code","316590b8":"code","6dde060a":"code","ec1cd9a6":"code","1cc36541":"code","bd8f1623":"code","554c391d":"code","45043a8a":"code","0fb200c3":"code","f3467711":"code","8d8d5a97":"code","68ec8e41":"code","5e63ddb1":"code","1350c446":"code","cbae13de":"code","15eff339":"code","2a1f8d0f":"code","19a3a3a7":"code","bd1d3cca":"code","c4ea5e79":"code","b81a1bc7":"code","ede09afc":"code","25a70a97":"code","bade6998":"code","b3b60387":"code","3e2892c1":"code","f2f3f5d3":"code","0c19c8ed":"code","cc3f504f":"code","a8759683":"code","141bfb96":"code","cedd0705":"code","ee6fdae0":"code","60515a03":"code","58acf995":"code","16ac2034":"code","f9588e89":"code","aacfd561":"code","48721e05":"code","49227b0c":"code","4c76e5e5":"code","4ca3b5a6":"code","d5df626e":"code","a4e2aaeb":"code","a6f329c7":"code","bb60ef6b":"code","c93e1cf5":"code","980b008a":"code","61f1e13c":"code","adf15f7b":"code","73d29504":"code","35b7721a":"code","96000cd7":"code","a086c163":"code","8783639c":"code","c165c203":"code","cdc73049":"markdown","e12bd51b":"markdown","35d1421c":"markdown","9b93d606":"markdown","448da17a":"markdown","b27ee2e6":"markdown","bfb5c139":"markdown","81958051":"markdown","0256816c":"markdown","84d0f114":"markdown","f457093b":"markdown","63b4a205":"markdown","23ca6f9f":"markdown","ac75abc1":"markdown","39fa1ed8":"markdown","52801222":"markdown","c953afe2":"markdown","14b82db4":"markdown","1ffb746c":"markdown","260fd9c8":"markdown","38b8f72b":"markdown","bca09e22":"markdown","eea63153":"markdown","8044cb0e":"markdown","9ad08db6":"markdown","dad705b2":"markdown","fce6dfa0":"markdown","fdf39073":"markdown","0b9dea8f":"markdown","afd53633":"markdown","9e500c14":"markdown","42a96df7":"markdown","b47b22ae":"markdown","1e99c33c":"markdown","de8f862d":"markdown","b80b9f82":"markdown","6ae021ba":"markdown","d5c7adbf":"markdown","2eaa7696":"markdown","90b6f434":"markdown","06dfe754":"markdown","a838abd4":"markdown","3cd1ba65":"markdown","39f76048":"markdown","ebdddd03":"markdown","9055896f":"markdown","0dd04751":"markdown","0e40212d":"markdown","c7d0d35e":"markdown","683c645a":"markdown","545fefdc":"markdown"},"source":{"2b48b96d":"import pandas as pd\nimport numpy as np\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport plotly.graph_objects as go","a4b8fa0e":"# Reading dataframe \ndf = pd.read_csv('..\/input\/dineout-restaurants-in-india\/dineout_restaurants.csv')\ndf.head()","139046c9":"# Evaluating dataframe\nprint('* Size of dataframe: {}\\n'.format(df.shape))\nprint('* Datatype of columns are:\\n {}\\n'.format(df.info()))","402d386c":"df.describe()","132ec5ad":"df['City'].value_counts()","c12b53c8":"df['State'] = df['City']\ndf['State'] = df['City'].replace({'Bangalore': 'Karnataka', 'Delhi':'Delhi NCR', 'Mumbai':'Maharashtra', 'Kolkata':'Bengal', 'Hyderabad':'Telangana', 'Ahmedabad':'Gujarat', 'Chennai':'Tamil Nadu', 'Pune':'Maharashtra', 'Jaipur':'Rajasthan', 'Chandigarh':'Punjab', 'Indore':'Madhya Pradesh', 'Gurgaon':'Delhi NCR', 'Noida':'Delhi NCR', 'Vadodara':'Gujarat', 'Lucknow':'Uttar Pradesh', 'Agra':'Uttar Pradesh', 'Nagpur':'Maharashtra', 'Surat':'Gujarat', 'Ludhiana':'Punjab', 'Goa':'Goa', 'Ghaziabad':'Delhi NCR', 'Udaipur':'Rajasthan', 'Kochi':'Kerala'})\ndf['State'].value_counts()","edc13c29":"kochi_df = df[df['City']=='Kochi']\nkochi_df.index\ndf = df.drop(kochi_df.index)\ndf['City'].value_counts()","4e2f99c8":"fig = ff.create_distplot([df.Rating],['Rating'],bin_size=0.1)\nfig.update_layout(title_text='Distribution of Restaraunt Ratings', \n                  title_font_color = 'medium turquoise', title_x = 0.47,\n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},)\n\niplot(fig, filename='Basic Distplot')","7184a5c7":"fig = ff.create_distplot([df.Cost],['Cost'],bin_size=100)\nfig.update_layout(title_text='Distribution of Restaraunt Cost', \n                  title_font_color = 'medium turquoise', title_x = 0.5,\n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},)\niplot(fig, filename='Basic Distplot')","3b5e047e":"fig = ff.create_distplot([df.Votes],['Votes'],bin_size=200)\nfig.update_layout(title_text='Distribution of Restaraunt Votes', \n                  title_font_color = 'medium turquoise', title_x = 0.5,\n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},)\niplot(fig, filename='Basic Distplot')","7b60d7ea":"# Forming dataframes in term of cities and state\ncity_restnts = df.groupby('City').sum()\nstate_restnt = df.groupby('State').sum()\n\n# List of states\nrestnt_state = df['State'].value_counts()\nrestnt_state","9213552f":"fig = px.bar(x = restnt_state.index, y=restnt_state)\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'States', yaxis_title = 'Total Restaurants', \n                  title_text='Restaraunt Distribution Across States', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","2e6718f0":"restnt_city = df['City'].value_counts().sort_values(ascending = True) \n\nfig = px.bar(y = restnt_city.index, x=restnt_city, color=restnt_city, orientation = 'h',\n            labels = {\n                'color': 'Total' +'<br>'+ 'Restaurants'\n            }) # color continuous scale\nfig.update_layout(yaxis_title = 'States', xaxis_title = 'Total Restaurants', \n                  title_text='Restaraunt Distribution Across Cities', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","6336ac67":"df.head()","691aa4bb":"# Forming state-wise dataframe\ndf_state = df.groupby('State').mean()\ndf_state.reset_index(level=0, inplace=True)\ndf_state","bd70651b":"fig = px.bar(df_state, x = 'State', y='Rating')\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'States', yaxis_title = 'Average Rating', \n                  title_text='Rating Distribution Across States', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\nfig.show()","f8be2c9c":"labels = df_state['State']\nx1 = df_state['Rating']\n\nnum_slices = len(x1)\ntheta = [(i+1.5)*360\/num_slices for i in range(num_slices)]\nr=x1\nwidth = [360 \/ num_slices for _ in range(num_slices)]\n\n\nbarpolar_plots = [go.Barpolar(r=[r], theta=[t], width=[w], name=n)\nfor r, t, w, n in zip(r, theta, width, labels)]\n\nfig = go.Figure(barpolar_plots)\n\nfig.update_layout(#     template='ggplot2',\n                    polar = dict(\n                        radialaxis = dict(range=[3.5, 4.25], showticklabels=True),\n                        angularaxis = dict(showticklabels=False, ticks='')\n                        ),\n                    title_text='Comparison of Ratings Across States', \n                    title_x=0.45,\n                    font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                  )\n)\nfig.show()","316590b8":"df_city = df.groupby('City').mean()\ndf_city.reset_index(level=0, inplace=True)\ndf_city","6dde060a":"fig = px.bar(df_city, x = 'City', y='Rating')\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'Cities', yaxis_title = 'Average Rating', \n                  title_text='Rating Distribution Across Cities', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\nfig.show()","ec1cd9a6":"labels = df_city['City']\nx1 = df_city['Rating']\n\nnum_slices = len(x1)\ntheta = [(i+1.5)*360\/num_slices for i in range(num_slices)]\nr=x1\nwidth = [360 \/ num_slices for _ in range(num_slices)]\n\nbarpolar_plots = [go.Barpolar(r=[r], theta=[t], width=[w], name=n)\nfor r, t, w, n in zip(r, theta, width, labels)]\n\nfig = go.Figure(barpolar_plots)\n\n\nfig.update_layout(#     template='ggplot2',\n                    polar = dict(\n                        radialaxis = dict(range=[3.5, 4.33], showticklabels=True),\n                        angularaxis = dict(showticklabels=False, ticks='')\n                        ),\n                    yaxis_title = 'States', xaxis_title = 'Total Restaurants', \n                    title_text='Comparison of Ratings Across Cities', \n                    title_x=0.47,\n                    font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n#                       color='rgb(12, 128, 128)'\n                  )\n)\nfig.show()","1cc36541":"df_state","bd8f1623":"# Cost distribution across states\ndf_state.sort_values(by=['Cost'], inplace=True)\n\nfig = px.bar(df_state, x = 'Cost', y='State', color = 'Cost', orientation = 'h',\n            labels = {\n                'Cost': 'Average' +'<br>'+ 'Cost'\n            })\nfig.update_layout(yaxis_title = 'States', xaxis_title = 'Average Cost', \n                  title_text='Average Cost Distribution Across States', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","554c391d":"df_city","45043a8a":"# Cost distribution across cities\ndf_city.sort_values(by=['Cost'], inplace=True)\ndf_city\nfig = px.bar(df_city, x = 'Cost', y='City', color = 'Cost', orientation = 'h',\n            labels = {\n                'Cost': 'Average' +'<br>'+ 'Cost'\n            })\nfig.update_layout(yaxis_title = 'States', xaxis_title = 'Average Cost', \n                  title_text='Average Cost Distribution Across Cities', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","0fb200c3":"df_state","f3467711":"# Cost distribution across states\ndf_state.sort_values(by=['Votes'], inplace=True)\n\nfig = px.bar(df_state, x = 'Votes', y='State', color = 'Votes', orientation = 'h',\n            labels = {\n                'Votes': 'Average' +'<br>'+ 'Votes'\n            })\nfig.update_layout(yaxis_title = 'States', xaxis_title = 'Average Votes', \n                  title_text='Votes Distribution Across States', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","8d8d5a97":"# Votes distribution across cities\ndf_city.sort_values(by=['Votes'], inplace=True)\n\nfig = px.bar(df_city, x = 'Votes', y='City', color = 'Votes', orientation = 'h',\n            labels = {\n                'Votes': 'Average' +'<br>'+ 'Votes'\n            })\nfig.update_layout(yaxis_title = 'Cities', xaxis_title = 'Average Votes', \n                  title_text='Votes Distribution Across Cities', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  )\n                  )\nfig.show()","68ec8e41":"restnt_state","5e63ddb1":"# Extracting total restaurants in each state and forming its dataframe\na = restnt_state.index\nb = restnt_state\ndf_state_restnts = pd.DataFrame(list(zip(a,b)))\ndf_state_restnts.columns = ['State', 'Total Restaurants']\ndf_state_restnts = df_state_restnts.set_index('State')\ndisplay(df_state_restnts)","1350c446":"df_state","cbae13de":"# Taking State column in dataframe as index\ndf_state = df_state.set_index('State')\ndf_state","15eff339":"# Matching indices of df_state_restnts with df_state \ndf_state_restnts.reindex(df_state.index)","2a1f8d0f":"# Adding total restaurants column to state dataframe  \ndf_state['Total Restaurants'] = df_state_restnts['Total Restaurants']\ndf_state","19a3a3a7":"# Normalizing columns with integer values\ndf_state_normalized = df_state.copy()\ncolumns = ['Rating', 'Votes', 'Cost', 'Total Restaurants']\n\n# apply normalization techniques\nfor column in columns:\n    df_state_normalized[column] = (df_state_normalized[column] \/ df_state_normalized[column].abs().max())\n\n# view normalized data\ndf_state_normalized.reset_index(level=0, inplace=True)\ndisplay(df_state_normalized)","bd1d3cca":"# Comparing attributes of all states using polar scatter plots\n\nfig = make_subplots(rows=6, cols=2, specs=[[{'type': 'polar'}]*2]*6, column_widths=[0.45, 0.45])\n\nfor index, state in enumerate(df_state_normalized['State']):\n    if index % 2 == 0:\n        row = int((index+2)\/2)\n        col = 1\n    else: \n        row = int((index+1)\/2) \n        col = 2\n      \n    fig.add_trace(go.Scatterpolar(\n          name = df_state_normalized['State'][index],\n          r = [df_state_normalized['Rating'][index], df_state_normalized['Votes'][index], df_state_normalized['Cost'][index], df_state_normalized['Total Restaurants'][index]],\n          theta=['Rating', 'Votes', 'Cost', 'Total Restaurants'],\n          fill = 'toself'    \n        ), row, col)\n\nfig.update_layout(height=2000, width=900, title_text=\"Comparison of Restaurants in Different States of India\", title_x=0.5, title_font_color = '#4B0082')\nfig.show()","c4ea5e79":"df.head()","b81a1bc7":"cuisines = df['Cuisine'].str.split(',').explode().unique().tolist()","ede09afc":"# Forming cuisine dataframe\ndata = []\ndf_filtered = pd.DataFrame()\ncolumns = ['Cuisine', 'Total Restaurants', 'Rating']\ndf_cuisine = pd.DataFrame(columns = columns)\n\nfor cuisine in cuisines:\n    \n    df['Cuisine Verification'] = df['Cuisine'].str.contains(cuisine, case=False, na=False).astype(int)\n    df_filtered = df[df['Cuisine Verification'] == 1]\n    total_restnt = len(df_filtered.index)\n    df = df.drop(['Cuisine Verification'], axis=1)\n    \n    avg_rating = df_filtered['Rating'].sum()\/total_restnt\n    df_cuisine = df_cuisine.append({'Cuisine': cuisine, 'Total Restaurants': total_restnt, 'Rating':avg_rating, }, ignore_index=True)","25a70a97":"df_cuisine.head(15)","bade6998":"df_cuisine.shape","b3b60387":"fig = go.Figure(data=[\n    go.Bar(name='Total Restaurants', x=df_cuisine['Cuisine'], y=df_cuisine['Total Restaurants'])\n])\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'Cuisines', yaxis_title = 'Total Restaurants', \n                  title_text='Cuisine Distribution Across Restaurants', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\nfig.show()","3e2892c1":"# Taking cuisines that are atleast served in over 300 restaurants \ndf_cuisine = df_cuisine[df_cuisine['Total Restaurants'] > 300]\ndf_cuisine.shape","f2f3f5d3":"fig = go.Figure(data=[\n    go.Bar(name='Total Restaurants', x=df_cuisine['Cuisine'], y=df_cuisine['Total Restaurants'])\n])\n\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'Cuisines', yaxis_title = 'Total Restaurants', \n                  title_text='Distribution of Top Cuisines Across Restaurants', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\nfig.show()","0c19c8ed":"# Printing some duplicate categories\ndf_cuisine.Cuisine[0], df_cuisine.Cuisine[13], df_cuisine.Cuisine[0], df_cuisine.Cuisine[64]","cc3f504f":"#  Reseting index and removing double space \ndf_cuisine = df_cuisine.reset_index(drop = True)   \ndf_cuisine.Cuisine = df_cuisine.Cuisine.str.replace('  ', '')\n\n# Verifying double space removal\ndf_cuisine.Cuisine[5], df_cuisine.Cuisine[13], df_cuisine.Cuisine[0], df_cuisine.Cuisine[3]","a8759683":"#  Identifying with duplicate values\nduplicate_cuisine = df_cuisine.duplicated(subset = ['Cuisine'])","141bfb96":"duplicate_cuisines = []\nduplicate_cuisines = df_cuisine.loc[duplicate_cuisine]['Cuisine']\nduplicate_cuisines","cedd0705":"duplicate_indices = []\n\n# Identifying indices dulplicate cuisines \nduplicate_bool = []\ncount = 0\nfor index, cuisine in enumerate(duplicate_cuisines):\n    duplicate_bool = df_cuisine['Cuisine'].str.find(cuisine)\n\n    for index, value in enumerate(duplicate_bool):\n        if value == 0:\n            duplicate_indices.append(index)\nduplicate_indices","ee6fdae0":"# Removing duplicate indices and updating attributes\ni = 0\nfor index in duplicate_indices:\n    \n    if (i) % 2 == 0:\n        count = 0\n        # Updating attributes in first duplicate index (or Original Index)\n        total_restnt_1 = (df_cuisine['Total Restaurants'][index])\n        avg_rating_1 = df_cuisine['Rating'][index]\n    \n    else:\n        count = 2\n        total_restnt_2 = (df_cuisine['Total Restaurants'][index])\n        avg_rating_2 = df_cuisine['Rating'][index]\n    \n    i += 1\n    if count == 2:\n        df_cuisine['Total Restaurants'][(index-1)] = (total_restnt_1 + total_restnt_2)\n        df_cuisine['Rating'][(index-1)] = ((total_restnt_1*avg_rating_1) + (total_restnt_2*avg_rating_2))\/(total_restnt_1 + total_restnt_2)\n        \n        # Removing second duplicate index\n        df_cuisine = df_cuisine.drop(index)","60515a03":"df_cuisine = df_cuisine.reset_index(drop = True)\ndf_cuisine","58acf995":"# Dropping Multi-cuisine\ndf_cuisine = df_cuisine.drop(index = 6)\ndf_cuisine = df_cuisine.reset_index(drop = True)\ndf_cuisine","16ac2034":"# Plotting cuisine with total restaurants\nfig = go.Figure(data=[\n    go.Bar(name='Total Restaurants', x=df_cuisine['Cuisine'], y=df_cuisine['Total Restaurants'])\n])\n\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'Cuisines', yaxis_title = 'Total Restaurants', \n                  title_text='Cuisine Distribution Across Restaurants', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\n\nfig.show()","f9588e89":"# Plotting rating with cuisines \nfig = go.Figure(data=[\n    go.Bar(name='Rating', x=df_cuisine['Cuisine'], y=df_cuisine['Rating']),\n])\n\nfig.update_traces(marker_color ='rgb(12, 128, 128)', opacity=1)\nfig.update_layout(xaxis_title = 'Cuisines', yaxis_title = 'Average Rating', \n                  title_text='Rating Distribution of Top Cuisines', \n                  title_x=0.5,\n                  font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n                      color='rgb(12, 128, 128)'\n                  ))\n\nfig.show()","aacfd561":"# Analysing with polar plot \nlabels = df_cuisine['Cuisine']\nx1 = df_cuisine['Rating']\nnum_slices = len(x1)\ntheta = [(i+1.5)*360\/num_slices for i in range(num_slices)]\nr=x1\nwidth = [360 \/ num_slices for _ in range(num_slices)]\n\nbarpolar_plots = [go.Barpolar(r=[r], theta=[t], width=[w], name=n)\nfor r, t, w, n in zip(r, theta, width, labels)]\n\nfig = go.Figure(barpolar_plots)\n\nfig.update_layout(#     template='ggplot2',\n                    polar = dict(\n                        radialaxis = dict(range=[3.8, 4.25], showticklabels=True),\n                        angularaxis = dict(showticklabels=False, ticks='')\n                        ),\n                    yaxis_title = 'States', xaxis_title = 'Total Restaurants', \n                    title_text='Comparison of Ratings of Different Cuisines', \n                    title_x=0.46,\n                    font=dict(\n                      family=\"Courier New, monospace\",\n                      size=12,\n#                       color='rgb(12, 128, 128)'\n                  )\n)\n\nfig.show()","48721e05":"df.head()","49227b0c":"# x = df[df['Cuisine'] == 'Multi-Cuisine']\n# x.head()\n# state_cuisines","4c76e5e5":"df_state = pd.DataFrame()\n\n# # Removing Multi-Cuisine\n# df = df['Multi-Cuisine']\n\ndef cuisine_info(state):\n    state_cuisines_clean =[]\n    \n#     Forming state dataframe\n    filter = (df['State'] == state)\n    df_state = df[filter].copy() \n    \n#     Filtering cuisines\n    state_cuisines = df_state['Cuisine'].str.split(',').explode().unique().tolist()\n    \n#     Removing 'Multi-Cuisine' category from cuisines    \n    a = 'Multi-Cuisine'\n    b = '  Multi-Cuisine'\n    if a in state_cuisines:\n        state_cuisines.remove('Multi-Cuisine')\n    if b in state_cuisines:\n        state_cuisines.remove('  Multi-Cuisine')\n\n    \n    for word in state_cuisines:\n        word = word.replace('  ', '')\n        state_cuisines_clean.append(word)\n    \n#     Removing duplicates from cuisines list\n    state_cuisines_clean = np.unique(state_cuisines_clean)\n    state_cuisines_clean\n    \n#     Forming state cuisine dataframe\n    \n    df_filtered = pd.DataFrame()\n    df_cuisine_state = pd.DataFrame()\n    # Forming cuisine df for state\n    for cuisine in state_cuisines_clean:\n        df_state['Cuisine Verification'] = df_state['Cuisine'].str.contains(cuisine, case=False, na=False).astype(int)\n        df_filtered = df_state[df_state['Cuisine Verification'] == 1]\n\n        total_restnt = len(df_filtered.index)\n        total_votes = len(df_filtered.index)\n        df_state = df_state.drop(['Cuisine Verification'], axis=1)\n\n        avg_rating = df_filtered['Rating'].sum()\/total_restnt\n\n        df_cuisine_state = df_cuisine_state.append({'Cuisine': cuisine, 'Total Restaurants': total_restnt, 'Total Votes': total_votes, 'Rating':avg_rating}, ignore_index=True)\n    \n    return df_cuisine_state    ","4ca3b5a6":"# Maharashtra cuisine dataframe\ncuisine_maharashtra = cuisine_info('Maharashtra')\n# Filtering top cusines \ntop_cuisine_maharashtra = cuisine_maharashtra[cuisine_maharashtra['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_maharashtra.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_maharashtra.reset_index(inplace = True, drop=True)\ntop_cuisine_maharashtra['Total Votes'] = top_cuisine_maharashtra['Total Votes'].astype('str') + ' votes'\n\n\n# Delhi NCR cuisine dataframe\ncuisine_delhi = cuisine_info('Delhi NCR')\n# Filtering top cusines \ntop_cuisine_delhi = cuisine_delhi[cuisine_delhi['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_delhi.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_delhi.reset_index(inplace = True, drop=True)\ntop_cuisine_delhi['Total Votes'] = top_cuisine_delhi['Total Votes'].astype('str') + ' votes'\n\n\n# Karnataka NCR cuisine dataframe\ncuisine_karnataka = cuisine_info('Karnataka')\n# Filtering top cusines \ntop_cuisine_karnataka = cuisine_karnataka[cuisine_karnataka['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_karnataka.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_karnataka.reset_index(inplace = True, drop=True)\ntop_cuisine_karnataka['Total Votes'] = top_cuisine_karnataka['Total Votes'].astype('str') + ' votes'\n\n\n# Bengal cuisine dataframe\ncuisine_bengal = cuisine_info('Bengal')\n# Filtering top cusines \ntop_cuisine_bengal = cuisine_bengal[cuisine_bengal['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_bengal.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_bengal.reset_index(inplace = True, drop=True)\ntop_cuisine_bengal['Total Votes'] = top_cuisine_bengal['Total Votes'].astype('str') + ' votes'\n\n\n# Telangana cuisine dataframe\ncuisine_telangana = cuisine_info('Telangana')\n# Filtering top cusines \ntop_cuisine_telangana = cuisine_telangana[cuisine_telangana['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_telangana.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_telangana.reset_index(inplace = True, drop=True)\ntop_cuisine_telangana['Total Votes'] = top_cuisine_telangana['Total Votes'].astype('str') + ' votes'\n\n\n# Gujarat cuisine dataframe\ncuisine_gujarat = cuisine_info('Gujarat')\n# Filtering top cusines \ntop_cuisine_gujarat = cuisine_gujarat[cuisine_gujarat['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_gujarat.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_gujarat.reset_index(inplace = True, drop=True)\ntop_cuisine_gujarat['Total Votes'] = top_cuisine_gujarat['Total Votes'].astype('str') + ' votes'\n\n\n# Tamil Nadu cuisine dataframe\ncuisine_tamil = cuisine_info('Tamil Nadu')\n# Filtering top cusines \ntop_cuisine_tamil = cuisine_tamil[cuisine_tamil['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_tamil.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_tamil.reset_index(inplace = True, drop=True)\ntop_cuisine_tamil['Total Votes'] = top_cuisine_tamil['Total Votes'].astype('str') + ' votes'\n\n\n# Punjab cuisine dataframe\ncuisine_punjab = cuisine_info('Punjab')\n# Filtering top cusines \ntop_cuisine_punjab = cuisine_punjab[cuisine_punjab['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_punjab.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_punjab.reset_index(inplace = True, drop=True)\ntop_cuisine_punjab['Total Votes'] = top_cuisine_punjab['Total Votes'].astype('str') + ' votes'\n\n\n# Rajasthan cuisine dataframe\ncuisine_rajasthan = cuisine_info('Rajasthan')\n# Filtering top cusines \ntop_cuisine_rajasthan = cuisine_rajasthan[cuisine_rajasthan['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_rajasthan.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_rajasthan.reset_index(inplace = True, drop=True)\ntop_cuisine_rajasthan['Total Votes'] = top_cuisine_rajasthan['Total Votes'].astype('str') + ' votes'\n\n\n# Madhya Pradesh cuisine dataframe\ncuisine_madhya = cuisine_info('Madhya Pradesh')\n# Filtering top cusines \ntop_cuisine_madhya = cuisine_madhya[cuisine_madhya['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_madhya.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_madhya.reset_index(inplace = True, drop=True)\ntop_cuisine_madhya['Total Votes'] = top_cuisine_madhya['Total Votes'].astype('str') + ' votes'\n\n# Uttar Pradesh cuisine dataframe\ncuisine_uttar = cuisine_info('Uttar Pradesh')\n# Filtering top cusines \ntop_cuisine_uttar = cuisine_uttar[cuisine_uttar['Total Votes']>50].reset_index(drop = True)\ntop_cuisine_uttar.sort_values(by='Rating', ascending=False, inplace=True)\ntop_cuisine_uttar.reset_index(inplace = True, drop=True)\ntop_cuisine_uttar['Total Votes'] = top_cuisine_uttar['Total Votes'].astype('str') + ' votes'\n\n# # Goa cuisine dataframe\n# cuisine_goa = pd.DataFrame()\n# cuisine_goa = cuisine_info('Goa')\n# cuisine_goa[cuisine_goa['Total Restaurants']>50].head(25)","d5df626e":"# Plotting Maharashtra cuisines\ntop_cuisine_maharashtra['State'] = 'Maharashtra'\nfig = px.treemap(top_cuisine_maharashtra, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                 labels = {'Votes'}\n                )\nfig.update_layout( title_text = 'Favourite Cuisines in Maharshtra',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5,\n                 )\nfig.show()\n\n\n# Plotting Delhi cuisines\ntop_cuisine_delhi['State'] = 'Delhi'\nfig = px.treemap(top_cuisine_delhi, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                )\nfig.update_layout( title_text = 'Favourite Cuisines in Delhi',\n                   title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Karnataka cuisines\ntop_cuisine_karnataka['State'] = 'Karnataka'\nfig = px.treemap(top_cuisine_karnataka, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout( title_text = 'Favourite Cuisines in Karnataka',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Bengal cuisines\ntop_cuisine_bengal['State'] = 'Bengal'\nfig = px.treemap(top_cuisine_bengal, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Bengal',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Telangana cuisines\ntop_cuisine_telangana['State'] = 'Telangana'\nfig = px.treemap(top_cuisine_telangana, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                )\n\nfig.update_layout(title_text = 'Favourite Cuisines in Telangana',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Gujarat cuisines\ntop_cuisine_gujarat['State'] = 'Gujarat'\nfig = px.treemap(top_cuisine_gujarat, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Gujarat',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Tamil Nadu cuisines\ntop_cuisine_tamil['State'] = 'Tamil Nadu'\nfig = px.treemap(top_cuisine_tamil, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Tamil Nadu',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n#  Plotting punjab cuisines \ntop_cuisine_punjab['State'] = 'Punjab'\nfig = px.treemap(top_cuisine_punjab, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Punjab',\n                  title_font_color = '#4B0082',\n#                  title_font_family = 'Times New Roman',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Rajasthan cuisines\ntop_cuisine_rajasthan['State'] = 'Rajasthan'\nfig = px.treemap(top_cuisine_rajasthan, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Rajasthan',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n\n# Plotting Madhya Pradesh cuisines\ntop_cuisine_madhya['State'] = 'Madhya Pradesh'\nfig = px.treemap(top_cuisine_madhya, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Madhya Pradesh',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()\n\n\n# Plotting Uttar Pradesh cuisines\ntop_cuisine_uttar['State'] = 'Uttar Pradesh'\nfig = px.treemap(top_cuisine_uttar, \n                 path=['State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout(title_text = 'Favourite Cuisines in Uttar Pradesh',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\n\nfig.show()","a4e2aaeb":"frames = [top_cuisine_uttar, top_cuisine_madhya, top_cuisine_rajasthan, top_cuisine_punjab, top_cuisine_tamil, top_cuisine_gujarat, top_cuisine_telangana, top_cuisine_bengal, top_cuisine_karnataka, top_cuisine_delhi, top_cuisine_maharashtra]\ntop_cuisine_india = pd.concat(frames)\ndisplay(top_cuisine_india)","a6f329c7":"top_cuisine_india['Country'] = 'India'\nfig = px.treemap(top_cuisine_india, \n                 path=['Country', 'State', 'Cuisine', 'Total Votes'], \n                 values='Rating',\n                 color='Rating'\n                )\nfig.update_layout( title_text = 'State-wise Favourite Cuisines in India',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5\n                 )\nfig.show()","bb60ef6b":"df.head()","c93e1cf5":"df_maharashtra = df[df['State'] == 'Maharashtra']\ndf_delhi = df[df['State'] == 'Delhi NCR']\ndf_karnataka = df[df['State'] == 'Karnataka']\ndf_maharashtra","980b008a":"def total_votes(locality):\n    df_x = df[df['Locality'] == locality]\n    total_votes = df_x['Votes'].sum()\n    return total_votes","61f1e13c":"# List of all localities\nmaharashtra_locations = df_maharashtra['Locality'].value_counts().index.tolist()\n\n# Obtaining total votes \ntotal_votes_value = []\ntotal_votes_list = []\nfor index, locality in enumerate(maharashtra_locations):\n    total_votes_value = total_votes(locality) \n    total_votes_list.append(total_votes_value)\n    \n# Locality-wise total restuarants in Maharashtra \nmaharashtra_location_counts = df_maharashtra['Locality'].value_counts()\n\n# Zipping required lists and forming dataframe\nlist_of_tuples = list(zip(maharashtra_locations, maharashtra_location_counts, total_votes_list))\nmaharashtra_locations_df = pd.DataFrame(list_of_tuples, columns = ['Location', 'Total Restaurants', 'Total Votes'])\nmaharashtra_locations_df","adf15f7b":"df_statedf_location = pd.DataFrame()\nrating_list = []\ncost_list = []\nlocation_rating_list = []\nlocation_cost_list = []\n\nfor index, location in enumerate(maharashtra_locations_df['Location']):\n    df_location = df[df['Locality'] == location]\n\n#     Calculating average rating\n\n    for rating in df_location[\"Rating\"]:\n        rating_list.append(rating)\n    avg_rating = sum(rating_list)\/len(rating_list)\n    location_rating_list.append(avg_rating)\n    \n#     Calculating average cost\n\n    for cost in df_location[\"Cost\"]:\n        cost_list.append(cost)\n    avg_cost = sum(cost_list)\/len(cost_list)\n    location_cost_list.append(avg_cost)\n\n#     Adding attributes to the dataframe\nmaharashtra_locations_df['Rating'] = location_rating_list\nmaharashtra_locations_df['Cost'] = location_cost_list\ntop_locations_maharashtra = maharashtra_locations_df[maharashtra_locations_df['Total Votes']>150]\ntop_locations_maharashtra['Total Votes'] = top_locations_maharashtra['Total Votes'].astype('str') + ' votes'","73d29504":"# Obtaining total votes for all localities in Delhi\n\n# List of all localities\ndelhi_locations = df_delhi['Locality'].value_counts().index.tolist()\n\n# Obtaining total votes\ntotal_votes_value = []\ntotal_votes_list = []\nfor index, locality in enumerate(delhi_locations):\n    total_votes_value = total_votes(locality) \n    total_votes_list.append(total_votes_value)\n    \n# Locality-wise total restuarants in Maharashtra \ndelhi_location_counts = df_delhi['Locality'].value_counts()\n\n# Zipping required lists and forming dataframe\nlist_of_tuples = list(zip(delhi_locations, delhi_location_counts, total_votes_list))\ndelhi_locations_df = pd.DataFrame(list_of_tuples, columns = ['Location', 'Total Restaurants', 'Total Votes'])\ndelhi_locations_df","35b7721a":"#     Adding attributes to the localities dataframe\ndf_location = pd.DataFrame()\nrating_list = []\ncost_list = []\nlocation_rating_list = []\nlocation_cost_list = []\n\nfor index, location in enumerate(delhi_locations_df['Location']):\n    df_location = df[df['Locality'] == location]\n\n#     Calculating average rating\n\n    for rating in df_location[\"Rating\"]:\n        rating_list.append(rating)\n    avg_rating = sum(rating_list)\/len(rating_list)\n    location_rating_list.append(avg_rating)\n    \n#     Calculating average cost\n\n    for cost in df_location[\"Cost\"]:\n        cost_list.append(cost)\n    avg_cost = sum(cost_list)\/len(cost_list)\n    location_cost_list.append(avg_cost)\n\n#     Adding attributes to the dataframe\ndelhi_locations_df['Rating'] = location_rating_list\ndelhi_locations_df['Cost'] = location_cost_list\ndelhi_locations_df.head(20)\ntop_locations_delhi = delhi_locations_df[delhi_locations_df['Total Votes']>150]\ntop_locations_delhi['Total Votes'] = top_locations_delhi['Total Votes'].astype('str') + ' votes'","96000cd7":"# Obtaining total votes for all localities in Delhi\n\n# List of all localities\nkarnataka_locations = df_karnataka['Locality'].value_counts().index.tolist()\n\n# Obtaining total votes\ntotal_votes_value = []\ntotal_votes_list = []\nfor index, locality in enumerate(karnataka_locations):\n    total_votes_value = total_votes(locality) \n    total_votes_list.append(total_votes_value)\n    \n# Locality-wise total restuarants in Maharashtra \nkarnataka_location_counts = df_karnataka['Locality'].value_counts()\n\n# Zipping required lists and forming dataframe\nlist_of_tuples = list(zip(karnataka_locations, karnataka_location_counts, total_votes_list))\nkarnataka_locations_df = pd.DataFrame(list_of_tuples, columns = ['Location', 'Total Restaurants', 'Total Votes'])\nkarnataka_locations_df","a086c163":"#     Adding attributes to the localities dataframe\ndf_location = pd.DataFrame()\nrating_list = []\ncost_list = []\nlocation_rating_list = []\nlocation_cost_list = []\n\nfor index, location in enumerate(karnataka_locations_df['Location']):\n    df_location = df[df['Locality'] == location]\n\n#     Calculating average rating\n\n    for rating in df_location[\"Rating\"]:\n        rating_list.append(rating)\n    avg_rating = sum(rating_list)\/len(rating_list)\n    location_rating_list.append(avg_rating)\n    \n#     Calculating average cost\n\n    for cost in df_location[\"Cost\"]:\n        cost_list.append(cost)\n    avg_cost = sum(cost_list)\/len(cost_list)\n    location_cost_list.append(avg_cost)\n\n#     Adding attributes to the dataframe\nkarnataka_locations_df['Rating'] = location_rating_list\nkarnataka_locations_df['Cost'] = location_cost_list\n# karnataka_locations_df.head(20)\n\ntop_locations_karnataka = karnataka_locations_df[karnataka_locations_df['Total Votes']>150]\ntop_locations_karnataka['Total Votes'] = top_locations_karnataka['Total Votes'].astype('str') + ' votes'","8783639c":"top_locations_karnataka.head()","c165c203":"fig = px.treemap(top_locations_maharashtra, \n                 path=['Location', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                 labels = {'Votes'}\n                )\nfig.update_layout( title_text = 'Top Localities in Maharashtra',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5,\n                 )\nfig.show()\n\n\n\n\nfig = px.treemap(top_locations_delhi, \n                 path=['Location', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                 labels = {'Votes'}\n                )\nfig.update_layout( title_text = 'Top Localities in Delhi',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5,\n                 )\nfig.show()\n\n\n\nfig = px.treemap(top_locations_karnataka, \n                 path=['Location', 'Total Votes'], \n                 values='Rating',\n                 color='Rating',\n                 labels = {'Votes'}\n                )\nfig.update_layout( title_text = 'Top Localities in Karnataka',\n                  title_font_color = '#4B0082',\n                  title_x = 0.5,\n                 )\nfig.show()\n","cdc73049":"<a id='2'><\/a>\n# <u> Question #1: How are restaurants distributed across India? <\/u>","e12bd51b":"## #6.2 Identifying Top Cuisines","35d1421c":"### Comparing Ratings with Polar Bar Plot","9b93d606":"## #3.1 State-wise Distribution","448da17a":"<a id='8'><\/a>\n# Question #7: How are the cuisines distributed among states? ","b27ee2e6":"## #8.3 Obtaining Votes for all Localities in Maharashtra","bfb5c139":"## <u>Table of Contents<\/u>\n*  [1. Analyzing Dataframe](#1)\n*  [2. How are restaurants distributed across India?](#2)\n*  [3. How are average ratings distributed across India?](#3)\n*  [4. How is cost distributed across India?](#4)\n*  [5. How are votes distributed across India?](#5)\n*  [6. How is the overall performance of restaurants across different states?](#6)\n*  [7. What are top cuisines in India?](#7)\n*  [8. How are the cuisines distributed among states?](#8)\n*  [9. What are top restaurant locations in Maharashtra, Delhi and Karnataka?](#9)\n*  [10. References](#10)","81958051":"<center>The bar graph shows that <b>rating variation is small<\/b> for different cities. <\/center>","0256816c":"## Distribution of restaraunt ratings, cost and votes in India ","84d0f114":"## #4.2 City-wise Distribution","f457093b":"## #8.1 Forming Individual Dataframes for all States","63b4a205":"# Libraries","23ca6f9f":"## #7.1 Declaring Function for Obtaining Cuisine Information","ac75abc1":"## Removing Kochi ","39fa1ed8":"## #8.2 Defining Function to Return Votes in a Locality","52801222":"<center> <b>Many cuisines<\/b> are served in <b>very few restaurants<\/b>. <\/center> ","c953afe2":"* Cuisines dataframe consists of <b>duplicate values<\/b>. \n* <b>Multi-Cuisine<\/b> is not a <b>valid category<\/b>. ","14b82db4":"### Comparing Ratings with Polar Bar Plot","1ffb746c":"## #6.1 Forming Cuisines Dataframe","260fd9c8":"## #8.6 Plotting Treemaps","38b8f72b":"<center>The bar graph shows that <b>rating variation is small<\/b> for different states. <\/center>","bca09e22":"## #2.1 State-Wise Distribution  ","eea63153":"## #3.2 City-wise Distribution","8044cb0e":"The above distribution **do not** provide analysis in **terms of states or cities**. The region-wise restaraunt performance is evaluated in following sections. ","9ad08db6":"<a id='3'><\/a>\n# <u>Question #2: How are average ratings distributed across India?<\/u>  ","dad705b2":"## #5.2 Comparing Attributes of all States","fce6dfa0":"## <u>Introduction<\/u>\n\n#### The notebook surveys and analyzes Dineout restaurants in Indian market. To determine regional performance and customer behaviour; region based analysis is perfomed. \n#### The project evaluates Indian restaurants on the basis of multiple attributes. This abstract key elements that are essential for restaurants to own beneficial position in the aggressive market. A comparison among different regions is also obtained to highlight scope of improvement.","fdf39073":"<a id='9'><\/a>\n# Question #8: What are top restaurant locations in Maharashtra, Delhi and Karnataka? ","0b9dea8f":"## #6.3 Plotting Cuisines with Ratings","afd53633":"<a id='4'><\/a>\n# <u>Question #3: How is cost distributed across India?<\/u>  ","9e500c14":"## #5.1 Adding Attributes to State Dataframe","42a96df7":"### Obtaining dataframe for Karnataka","b47b22ae":"## #8.4 Adding Attributes to the Localities Dataframe","1e99c33c":"### Obtaining Dataframe for Delhi","de8f862d":"## #4.1 State-wise Distribution ","b80b9f82":"<a id='10'><\/a>\n# References\nThe following notebooks and tutorials have enabled me to develop this notebook. The work in following links is very much appreciated:\n\n* EDA Inspiration: https:\/\/www.kaggle.com\/kurazh\/eda-game-sales\n* Notebook Inspiration: https:\/\/www.kaggle.com\/andreshg\/timeseries-analysis-a-complete-guide\n* Plotly Visualizations: https:\/\/www.kaggle.com\/thebrownviking20\/intermediate-visualization-tutorial-using-plotly\n* Statistical Visualizations: https:\/\/www.kaggle.com\/subinium\/basic-of-statistical-viz-plotly-seaborn\n* Polar Bar Plot: https:\/\/towardsdatascience.com\/improving-plotlys-polar-bar-charts-43f6eec867b7\n* Radar Plot: https:\/\/www.kaggle.com\/ivannatarov\/plotly-for-beginners-polar-charts-image\n* Tree Maps: https:\/\/towardsdatascience.com\/treemap-basics-with-python-777e5ed173d0\n* Plotly Reference: https:\/\/plotly.com\/python\/","6ae021ba":"**Cities** can be categorized in terms of **State**. ","d5c7adbf":"### Filtering cuisines","2eaa7696":"## #7.2 Forming Individual Cuisine Dataframes for all States","90b6f434":"<a id='1'><\/a>\n# Analyzing Dataframe ","06dfe754":"Double spacing before text is resulting in **dupicates**.","a838abd4":"<center>The bar graph shows that <b>rating variation is small<\/b> for different cities. <\/center>","3cd1ba65":"## #8.5 Similarly Obtaining Dataframes for Delhi and Karnataka","39f76048":"## #7.3 Plotting Consolidated Cuisine Table for India ","ebdddd03":"## Adding State Column","9055896f":"## #2.2 City-Wise Distribution","0dd04751":"<a id='6'><\/a>\n# <u>Question #5: How is the overall performance of restaurants across different states?<\/u>","0e40212d":"<a id='7'><\/a>\n# Question #6: What are top cuisines in India?  ","c7d0d35e":"## #7.2 Printing State-wise Cuisine Table  ","683c645a":"**Kochi** has **just two restaurants**.","545fefdc":"<a id='5'><\/a>\n# <u>Question #4: How are votes distributed across India?<\/u>  "}}