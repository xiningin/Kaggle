{"cell_type":{"090568c5":"code","38511485":"code","a4ebf9a3":"code","c70e9085":"code","873112a8":"code","e70157cb":"code","e093306d":"code","d178ec3a":"code","c1091fe1":"code","23f1a218":"code","dd0e39a1":"code","f0013797":"code","c6954519":"code","0a082cef":"code","6ff8a9b6":"code","9edf524e":"code","b2b47e2a":"code","7fa16bf1":"code","fe2be395":"code","510a5370":"code","7f7899d8":"code","423ee16b":"code","a497f3f7":"code","5824d4a5":"code","8d2d6290":"code","95b026ac":"code","dbf446d1":"code","d854823c":"code","f203ed88":"code","2eb79fb9":"code","1d0f0bdf":"code","ec4123b2":"markdown","c333929e":"markdown","1aaf9c08":"markdown","e30601fc":"markdown","fc73c762":"markdown","0f3ad3ad":"markdown","ec8a0592":"markdown","6e4757c1":"markdown","52deef10":"markdown","53f7bc18":"markdown","3ba52ab1":"markdown","6c8da510":"markdown"},"source":{"090568c5":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\n\nimport cv2\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport numpy as np\nfrom keras.utils import np_utils\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nimport tensorflow as tf\nfrom keras.optimizers import Adam\nfrom tensorflow.python.keras import backend as K\nfrom sklearn.model_selection import train_test_split\n\nfrom PIL import Image\nfrom mpl_toolkits.axes_grid1 import ImageGrid","38511485":"# List files available\nprint(os.listdir(\"..\/input\/siim-isic-melanoma-classification\"))","a4ebf9a3":"train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\nsubmission=pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')","c70e9085":"train.head()","873112a8":"train.columns","e70157cb":"test.columns","e093306d":"missing_col = ['sex','age_approx','anatom_site_general_challenge']\n\nfig, axes = plt.subplots(ncols = 2, figsize = (20,4),dpi = 100)\nsns.barplot(x= train[missing_col].isnull().sum().index , y= train[missing_col].isnull().sum().values, ax=axes[0])\nsns.barplot(x= test[missing_col].isnull().sum().index , y= test[missing_col].isnull().sum().values, ax=axes[1])\n\naxes[0].set_ylabel('Missing Value Count', size = 15, labelpad =20)\n\naxes[0].tick_params(axis ='x', labelsize = 15)\naxes[0].tick_params(axis='y', labelsize = 15)\n\naxes[1].tick_params(axis ='x', labelsize = 15)\naxes[1].tick_params(axis='y', labelsize = 15)\naxes[0].set_title('Training set', fontsize = 12)\naxes[1].set_title('Test set', fontsize  =12)\nplt.show()","d178ec3a":"train['target'].value_counts()","c1091fe1":"fig,axes = plt.subplots(ncols =1, figsize = (6,3), dpi = 100)\n\nsns.countplot(x = 'target', hue = 'target' , data=train)\n\nplt.tick_params(axis='x', labelsize=10)\nplt.tick_params(axis='y', labelsize=10)\naxes.set_xticklabels(['Benign(32542)', 'Melignant (584)'])\n\nplt.title('Number of examples')\nplt.show()","23f1a218":"data = train.groupby(['target','sex'])['benign_malignant'].count().to_frame().reset_index()\nax = sns.catplot(x='target',y= 'benign_malignant', hue='sex',data=data ,kind='bar')\nplt.xlabel(\"0: Benign, 1: Melignant\")\nplt.ylabel(\"Count of cases\")","dd0e39a1":"data = train.groupby(['sex','anatom_site_general_challenge'])['target'].count().to_frame().reset_index()\nax = sns.catplot(x='anatom_site_general_challenge',y= 'target', hue='sex',data=data ,kind='bar')\nplt.gcf().set_size_inches(10,4)\nplt.xlabel(\"Location of Image\")\nplt.ylabel(\"Count of Cases\")","f0013797":"CATEGORIES = ['benign','malignant']\nNUM_CATEGORIES = len(CATEGORIES)\nSEED = 1987\ndata_dir = '..\/input\/siim-isic-melanoma-classification\/jpeg\/'\ntrain_dir = data_dir+ 'train\/'\ntest_dir = data_dir +'test\/'\nsample_submission = pd.read_csv(os.path.join('..\/input\/siim-isic-melanoma-classification', 'sample_submission.csv'))","c6954519":"fig = plt.figure(1, figsize=(15, 10))\ngrid = ImageGrid(fig, 111, nrows_ncols=(NUM_CATEGORIES, 5), axes_pad=0.05)\ni = 0\nfor category_id, category in enumerate(CATEGORIES):\n    for filepath in train[train['benign_malignant'] == category]['image_name'].values[:5]:\n        ax = grid[i]\n        img = Image.open(\"..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/\"+filepath+\".jpg\")\n        img = img.resize((240,240))\n        ax.imshow(img)\n        ax.axis('off')\n        if i % 5 == 5 - 1:\n            ax.text(250, 112, category, verticalalignment='center')\n        i += 1\nplt.show();","0a082cef":"model = applications.VGG19(weights = \"imagenet\", include_top=False, input_shape = (300, 300, 3))","6ff8a9b6":"for layer in model.layers[:3]:\n    layer.trainable = False","9edf524e":"x = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(1024, activation=\"relu\")(x)\npredictions = Dense(1, activation=\"sigmoid\")(x) ","b2b47e2a":"#Thanks to https:\/\/www.kaggle.com\/ibtesama\/siim-baseline-keras-vgg16\ndef focal_loss(alpha=0.25,gamma=2.0):\n    def focal_crossentropy(y_true, y_pred):\n        y_true = tf.dtypes.cast(y_true, tf.float64)\n        y_pred = tf.dtypes.cast(y_pred, tf.float64)\n        bce = K.binary_crossentropy(y_true, y_pred)\n        \n        y_pred = K.clip(y_pred, K.epsilon(), 1.- K.epsilon())\n        p_t = (y_true*y_pred) + ((1-y_true)*(1-y_pred))\n        \n        alpha_factor = 1\n        modulating_factor = 1\n\n        alpha_factor = y_true*alpha + ((1-alpha)*(1-y_true))\n        modulating_factor = K.pow((1-p_t), gamma)\n\n        # compute the final loss and return\n        return K.mean(alpha_factor*modulating_factor*bce, axis=-1)\n    return focal_crossentropy","7fa16bf1":"opt = Adam(lr=1e-4)\nmodel_final = Model(inputs = model.input, outputs = predictions)\nmodel_final.compile(loss=focal_loss(), metrics=[tf.keras.metrics.AUC()],optimizer=opt)\n#model_final.compile(loss = focal_loss(), optimizer = optimizers.SGD(lr=0.00001, momentum=0.9), metrics=[\"accuracy\"])","fe2be395":"model_final.summary()","510a5370":"model_final.load_weights('..\/input\/melanoma-eda-vgg-keras-starter\/vgg16_1.h5')","7f7899d8":"labels=[]\ndata=[]\nfor i in range(train.shape[0]):\n    data.append(train_dir + train['image_name'].iloc[i]+'.jpg')\n    labels.append(train['target'].iloc[i])\ndf=pd.DataFrame(data)\ndf.columns=['images']\ndf['target']=labels","423ee16b":"test_data=[]\nfor i in range(test.shape[0]):\n    test_data.append(test_dir + test['image_name'].iloc[i]+'.jpg')\ndf_test=pd.DataFrame(test_data)\ndf_test.columns=['images']","a497f3f7":"\nX_train, X_val, y_train, y_val = train_test_split(df['images'],df['target'], test_size=0.2, random_state=1234)\ntrain=pd.DataFrame(X_train)\ntrain.columns=['images']\ntrain['target']=y_train\n\nvalidation=pd.DataFrame(X_val)\nvalidation.columns=['images']\nvalidation['target']=y_val","5824d4a5":"datagen = ImageDataGenerator(\n            rescale=1.\/255,\n            rotation_range=360.,\n            width_shift_range=0.3,\n            height_shift_range=0.3,\n            zoom_range=0.3,\n            horizontal_flip=True,\n            vertical_flip=True)\nval_datagen=ImageDataGenerator(rescale=1.\/255)","8d2d6290":"train_generator = datagen.flow_from_dataframe(\n    train,\n    x_col='images',\n    y_col='target',\n    target_size=(300, 300),\n    batch_size=64,\n    shuffle=True,\n    class_mode='raw')\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    validation,\n    x_col='images',\n    y_col='target',\n    target_size=(300, 300),\n    shuffle=False,\n    batch_size=64,\n    class_mode='raw')","95b026ac":"checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='loss', min_delta=0, patience=10, verbose=1, mode='auto')","dbf446d1":"nb_epochs = 2\nbatch_size=64\nnb_train_steps = train.shape[0]\/\/batch_size\nnb_val_steps=validation.shape[0]\/\/batch_size\nprint(\"Number of training and validation steps: {} and {}\".format(nb_train_steps,nb_val_steps))","d854823c":"model_final.fit_generator(\n    train_generator,\n    epochs=nb_epochs,\n    validation_data=validation_generator,\n    callbacks=[checkpoint, early])","f203ed88":"target=[]\nfor path in df_test['images']:\n    img=cv2.imread(str(path))\n    img = cv2.resize(img, (300,300))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    img=np.reshape(img,(1,300,300,3))\n    prediction=model_final.predict(img)\n    target.append(prediction[0][0])\n\n","2eb79fb9":"submission['target']=target","1d0f0bdf":"submission.to_csv('submission.csv', index=False)\nsubmission.head()","ec4123b2":"### Count of Target","c333929e":"## Importing Libraries","1aaf9c08":"### Submission","e30601fc":"### Training the model ","fc73c762":"## Visualizing Images","0f3ad3ad":"### Data Augmentation","ec8a0592":"Freezing starting layers so that weight of those layers are not required to be trained.","6e4757c1":"Adding few more layers and final prediction layer.","52deef10":"### Missing Count","53f7bc18":"## EDA","3ba52ab1":"## Model Creation","6c8da510":"## Data formating"}}