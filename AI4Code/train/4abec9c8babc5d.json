{"cell_type":{"78fff9e4":"code","4f669f68":"code","bcd78217":"code","13823834":"code","35dd870f":"code","cbee54e4":"code","e684bab4":"code","ae9528ec":"code","b9316dbd":"code","0646c2c3":"code","ac1c63eb":"code","951acc3c":"code","00dcf1e3":"code","b36298cb":"code","d9dc69fd":"code","10ac1f11":"code","f21d049f":"code","d1086edc":"code","06e02ad8":"code","78c1ad12":"markdown","e67ef769":"markdown","7a0d6573":"markdown","31291cb7":"markdown","5a4cc71a":"markdown","d0e3aa6e":"markdown","398fc5eb":"markdown"},"source":{"78fff9e4":"import warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom skimage.transform import resize\nfrom sklearn.model_selection import train_test_split\nfrom skimage.color import gray2rgb\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.optimizers import Adam, RMSprop\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization, Conv2D, MaxPooling2D, GlobalMaxPooling2D, Activation, Flatten\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3","4f669f68":"# Path to the SIIM Covid19 dataset\nbase_path = \"\/kaggle\/input\/siim-covid19-detection\/\"\n\n# Final image size for model input\nimg_size = 256\n\n# number of images in each of the two classes to get into the train set. Keep it real small for this demo.\nnum_images = 100\n\n# Number of epochs\nepochs = 10\n\n# number of batches\nbatch_size = 10","bcd78217":"# Load the data\nstudies_df = pd.read_csv(os.path.join(base_path,\"train_study_level.csv\"))\nimages_df = pd.read_csv(os.path.join(base_path,\"train_image_level.csv\"))","13823834":"# Loop through the dfs and remove the \"_study\" and \"_image\" from the ids so we can use them as keys to join on later\nstudies_df['id'] = studies_df['id'].map(lambda x: x.rstrip('_study'))\nimages_df['id'] = images_df['id'].map(lambda x: x.rstrip('_image'))","35dd870f":"# Merge the study and image df's on StudyInstanceUID\ndata_df = pd.merge(images_df, studies_df, how='inner', left_on='StudyInstanceUID', right_on='id')\ndata_df.drop(['id_y'], axis=1, inplace=True)","cbee54e4":"data_df.head()","e684bab4":"new_df = data_df[data_df['Atypical Appearance'] == 1]\n\nnew_df2 = new_df[new_df['Indeterminate Appearance'] == 1]\nnew_df2.head()","ae9528ec":"# Split the studies dataframe into negative and positive dataframes\npositive_images_df = data_df[data_df['Negative for Pneumonia'] == 0]\nnegative_images_df = data_df[data_df['Negative for Pneumonia'] == 1]","b9316dbd":"# This function finds the first image in a StudyInstanceUID directory and returns its path\ndef get_image_by_study_id(study_id):\n    study_path = base_path + \"train\/\" + study_id + \"\/\"\n    for subdir, dirs, files in os.walk(study_path):\n        for file in files:     \n            image = os.path.join(subdir, file)\n            if os.path.isfile(image):\n                return image\n    return \"none\"","0646c2c3":"# Function to resize pixels\ndef resize_image(pixels_in): \n    return resize(pixels_in, (img_size, img_size), anti_aliasing=True).astype(float)","ac1c63eb":"# Take a look at a random image\nimg_file = get_image_by_study_id(\"00c74279c5b7\")\nimg = pydicom.dcmread(img_file)\npixels = img.pixel_array\n\nprint(\"Pixel range: \" + str(np.amin(pixels)) + \" - \" + str(np.amax(pixels)))\nplt.imshow(pixels,cmap=\"gray\");","951acc3c":"# Iterate through images in the positive set and extract pixels. This takes a while with a large set.\n# Get only LE Explicit DICOMs and ignore other transfer syntaxes so we don't have to deal with pylibjpg\n\nX_train_data = []\ny_train_data = []\n\n# Iterate through the rows of the 'positive' DF\ncount = 0\nfor index, row in positive_images_df.iterrows():\n    img_file = get_image_by_study_id(row['StudyInstanceUID'])\n    img = pydicom.dcmread(img_file)\n    \n    # Get only Explicit VR LE Transfer Syntax\n    if img.file_meta.TransferSyntaxUID == \"1.2.840.10008.1.2.1\":\n        pixels = resize_image(img.pixel_array)\n        X_train_data.append(pixels)\n        y_train_data.append(row['Negative for Pneumonia'])\n        if (count == num_images):\n            break\n        count += 1\n    \nprint(\"Done getting \" + str(count) + \" negative images\")","00dcf1e3":"# Extract pixels from images in the negative set\ncount = 0\nfor index, row in negative_images_df.iterrows():\n    img_file = get_image_by_study_id(row['StudyInstanceUID'])\n    img = pydicom.dcmread(img_file)\n    if img.file_meta.TransferSyntaxUID == \"1.2.840.10008.1.2.1\":\n        pixels = resize_image(img.pixel_array)\n        X_train_data.append(pixels)\n        y_train_data.append(row['Negative for Pneumonia'])\n        if (count == num_images):\n            break\n        count += 1 \nprint(\"Done getting \" + str(count) + \" positive images\")","b36298cb":"# Split the train\/test data\nX_train, X_test, y_train, y_test = train_test_split(X_train_data, y_train_data, test_size = 0.3, random_state = 82, shuffle=True)\nprint(\"X_train len: \" + str(len(X_train)))\nprint(\"y_train len: \" + str(len(y_train)))\nprint(\"X_test len: \" + str(len(X_test)))\nprint(\"y_test len: \" + str(len(y_test)))","d9dc69fd":"# Convert the lists to arrays\nX_train = np.asarray(X_train)\nX_test = np.asarray(X_test)\ny_train = np.asarray(y_train)\ny_test = np.asarray(y_test)\n\n# Reshape the images to 3 channels\nX_train = gray2rgb(X_train)\nX_test = gray2rgb(X_test)","10ac1f11":"# Use InceptionV3 for transfer learning and add our data as the last layer.\npre_trained_model = InceptionV3(input_shape = (img_size, img_size, 3), include_top = False, weights = \"imagenet\")\n\n# Freeze the lower layers\nfor layer in pre_trained_model.layers:\n     layer.trainable = False\n        \nlast_layer = pre_trained_model.get_layer('mixed7')\nlast_output = last_layer.output\n\n# Add our layer\nlayer = Flatten()(last_output)\nlayer = Dense(1024, activation='relu')(layer)\nlayer = Dropout(0.2)(layer)                  \nlayer = Dense(1, activation='sigmoid')(layer)           \n\nmodel = Model(pre_trained_model.input, layer) \nmodel.compile(optimizer = RMSprop(lr=0.0001), loss = 'binary_crossentropy', metrics = ['acc'])\n\n# Fit the data\nhistory=model.fit(X_train,y_train,epochs=epochs,verbose=1,validation_data=(X_test,y_test))","f21d049f":"# plot training history\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","d1086edc":"model2 = Sequential()\nmodel2.add(Conv2D(32, (3, 3), activation=\"relu\", input_shape = X_train.shape[1:]))\nmodel2.add(BatchNormalization())\nmodel2.add(MaxPooling2D((2, 2)))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Conv2D(64, (3, 3), activation=\"relu\"))\nmodel2.add(BatchNormalization())\nmodel2.add(MaxPooling2D((2, 2)))\nmodel2.add(Dropout(0.3))\n\nmodel2.add(GlobalMaxPooling2D())\nmodel2.add(Dense(256, activation=\"relu\"))\nmodel2.add(Dropout(0.5))\nmodel2.add(Dense(1, activation=\"sigmoid\"))\n\nopt = Adam(learning_rate=0.001)\nmodel2.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])\nearly_stopping = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=10)\n\nhistory = model2.fit(X_train,y_train,batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(X_test, y_test),callbacks=[early_stopping])","06e02ad8":"# plot training history\nplt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","78c1ad12":"#### Here are some other processing notebooks I made:\n- Lung Segmentation Without CNN -> https:\/\/www.kaggle.com\/davidbroberts\/lung-segmentation-without-cnn\n- Applying filters to x-rays -> https:\/\/www.kaggle.com\/davidbroberts\/applying-filters-to-chest-x-rays\n- Rib supression on Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/rib-suppression-poc\n- Manual DICOM VOI LUT -> https:\/\/www.kaggle.com\/davidbroberts\/manual-dicom-voi-lut\n- Apply Unsharp Mask to Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/unsharp-masking-chest-x-rays\n- Cropping Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/cropping-chest-x-rays\n- Bounding Boxes on Cropped Images -> https:\/\/www.kaggle.com\/davidbroberts\/bounding-boxes-on-cropped-images\n- Visualizing Chest X-Ray bit planes -> https:\/\/www.kaggle.com\/davidbroberts\/visualizing-chest-x-ray-bitplanes\n- Standardizing Chest X-Ray Dataset Exports -> https:\/\/www.kaggle.com\/davidbroberts\/standardizing-cxr-datasets","e67ef769":"## Get the pixels","7a0d6573":"## Make some helper functions","31291cb7":"## Visualize an image","5a4cc71a":"#<div class='alert alert-info' style='text-align: center'><h1>DICOM Full Range Pixels as CNN Input<\/h1>\n    - yet another chest x-ray processing notebook -\n<\/div>\n**This notebook uses the full range of DICOM pixel values as input for a CNN and a Sequential model, rather than exporting 8 bit JPGs.**\n\n- It does not address MONOCHROME1 (inverted pixel intensities). Obviously this would have to be added.\n- It resizes the images to a managable size (256,256) by default. Which is lossy of course.\n- It ignores JPG compressed Transfer Syntaxes and only gets images that are in Explicit VR LE (to avoid pylibjpg install).\n- It only uses a few images and a few epochs to demonstrate the thought process. Clearly, it won't be accurate at all.\n- I didn't bother normalizing or otherwise apply any kind of processing to the data.\n- I'm sure the pros already do this, but I'm still trying to wrap my brain around it.\n\n**It seems that adding a VOI LUT, or bit plane slicing on the full range images would produce more usable results for the model.**","d0e3aa6e":"## Build the models","398fc5eb":"## Build a simple Sequential model with a couple layers"}}