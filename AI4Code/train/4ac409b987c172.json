{"cell_type":{"0139cd54":"code","752e690d":"code","b3f42655":"code","b92ac0b1":"code","c1ccf0ca":"code","bf7d5aa4":"code","66eadf34":"code","51ce9a4d":"code","bed434ac":"code","4cd7feca":"code","d23f5253":"code","0907e29f":"code","c82fda95":"code","99ea623f":"code","dc4ed7e2":"code","a1bb9b91":"code","6092ec7d":"code","f82a1b60":"code","ae8e82ae":"code","2db9d55b":"code","395ce800":"code","b1e3178c":"code","7c7f0c34":"code","8f2fef36":"code","dbd612eb":"code","83c99fed":"code","4c748ae2":"code","09535b0b":"code","9b0336a1":"code","0aee33b8":"code","9ccecd26":"code","1d457432":"code","a42e5fe4":"code","6235b7b0":"code","2a4eb2f3":"code","6eafdad5":"code","293b9379":"code","ee8d1d48":"code","46d86a92":"code","6ad9fb26":"code","a392a1b1":"code","1125b562":"code","10634810":"code","28591d4e":"code","79a0726c":"code","8332db51":"code","d5a8c15e":"code","6f774054":"code","0973d621":"code","14c94299":"code","bc9203b3":"code","b628deb2":"code","2b21fe10":"code","679cbe89":"code","66ab176d":"code","71c67342":"code","a984ad78":"code","02e4b814":"code","8c82e117":"code","43920250":"code","1e67f95f":"code","c136a28c":"code","48edb2bf":"code","73703deb":"code","478c0611":"code","82373267":"code","64317d11":"code","0d1a7e0e":"code","4e3075e5":"code","8c0a6702":"code","5d5773a8":"code","968563c7":"code","7dbb6d29":"code","c15dc204":"code","52ecca3c":"code","764fe8f0":"code","b29820de":"code","87f045da":"code","42be3207":"markdown","ccd27da1":"markdown","c34972e8":"markdown","ef1c7cfb":"markdown","ec6c9ee0":"markdown","fd5cafbb":"markdown"},"source":{"0139cd54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","752e690d":"def tuple_ex():\n    d = (1,2,3,4)\n    return d\na,b,c,d = tuple_ex()\nprint(a,b,c,d)","b3f42655":"x = 2\ndef deger():\n    x=3\n    return x\nprint(x)\nprint(deger())","b92ac0b1":"x=5\ndef sharp():\n    y=2*x\n    return y\nprint(sharp())","c1ccf0ca":"import builtins\ndir(builtins)","bf7d5aa4":"def square():\n    def add():\n        x = 4\n        y = 8\n        z = x * y\n        return z\n    return add()**2 \nprint(square())","66eadf34":"def sum(a, b=8,c=9):\n    z = a + b + c\n    return z\nprint(sum(5))","51ce9a4d":"def f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","bed434ac":"square = lambda x : 5 ** x\nprint(square(5))\ntotal = lambda x,y,z : x + y + z\nprint(total(5,4,3))","4cd7feca":"number_list = [5,6,7]\ny = map(lambda x : x ** 2, number_list)\nprint(list(y))","d23f5253":"# iteration example\nname = \"blackmamba\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","0907e29f":"list1 = [2,4,6,8]\nlist2 = [3,5,7,9]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","c82fda95":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","99ea623f":"num1 = [1,2,3]\nnum2 = [i + 1 for i in num1]\nprint(num2)","dc4ed7e2":"num3= [20,25,30]\nnum4 = [i ** 2 if i == 10 else i-5 if i<24 else i+5 for i in num3]\nprint(num4)","a1bb9b91":"data = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata.head(5) ","6092ec7d":"data.tail(5)","f82a1b60":"data.columns","ae8e82ae":"data.shape","2db9d55b":"data.info()","395ce800":"print(data['Country\/Region'].value_counts(dropna =False))","b1e3178c":"1,2,3,4,200","7c7f0c34":"def hesaplama():\n    t = (0,1,2,3,4,15)\n    return t\na,b,c,d,e,f = hesaplama()\nprint(a+b+c+d+e+f)","8f2fef36":"# data.boxplot(column='Recovered', by ='Province\/State')","dbd612eb":"data_new = data.tail(5)\ndata_new","83c99fed":"melted = pd.melt(frame=data_new, id_vars=\"Country\/Region\", value_vars=[\"Deaths\",\"Confirmed\"])\nmelted","4c748ae2":"#melted.pivot(index = 'Country\/Region', columns = 'variable',values='value')\n#hocam hata al\u0131yorum bakarsan\u0131z memnun olurum","09535b0b":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis=0, ignore_index=True)\nconc_data_row","9b0336a1":"data1 = data[\"Country\/Region\"].head()\ndata2 = data[\"Province\/State\"].head()\nconc_data_col = pd.concat([data1,data2],axis=1)\nconc_data_col","0aee33b8":"data.dtypes","9ccecd26":"data['SNo'] = data['SNo'].astype('category')\n#data['Speed'] = data['Speed'].astype('float')\ndata.dtypes","1d457432":"data.head(10)","a42e5fe4":"data[\"Province\/State\"].value_counts(dropna =False)","6235b7b0":"assert  data['Country\/Region'].notnull().all()","2a4eb2f3":"data1=data\ndata1[\"Province\/State\"].dropna(inplace = True)\ndata.head()","6eafdad5":"data.info()","293b9379":"data.head(100)","ee8d1d48":"country = [\"Turkey\",\"ABD\"]\npopulation = [\"80M\",\"3Mi\"]\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","46d86a92":"df[\"capital\"] = [\"Ankara\",\"Washington DC\"]\ndf","6ad9fb26":"df[\"income\"]=0\ndf","a392a1b1":"data1=data.loc[:,[\"Confirmed\",\"Deaths\"]]\ndata1.plot()","1125b562":"data1.plot(subplots=True)\nplt.show()","10634810":"data1.plot(kind = \"scatter\",x=\"Deaths\",y = \"Confirmed\")\nplt.show()","28591d4e":"data1.plot(kind = \"hist\",y = \"Confirmed\",bins = 50,range= (0,500))","79a0726c":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Deaths\",bins = 50,range= (0,250),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Confirmed\",bins = 50,range= (0,250),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","8332db51":"data.describe()","d5a8c15e":"time_list = [\"01\/22\/2020\",\"01\/29\/2020 \t\"]\nprint(type(time_list[1]))\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))\nprint(datetime_object)","6f774054":"import warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.tail()\ndate_list = [\"01\/22\/2020\",\"01\/23\/2020\",\"01\/24\/2020\",\"01\/25\/2020\",\"01\/26\/2020\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"ObservationDate\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"ObservationDate\")\ndata2 ","0973d621":"print(data2.loc[\"2020-01-22\"])\nprint(data2.loc[\"2020-01-22\":\"2020-01-26\"])","14c94299":"data2.resample(\"A\").mean()","bc9203b3":"data2.resample(\"M\").mean()","b628deb2":"#data = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n#data= data.set_index(\"#\")\n#data.head()\n##KeyError: \"None of ['#'] are in the columns\"","2b21fe10":"data2[\"Deaths\"][1]\n","679cbe89":"data2.Deaths[1]","66ab176d":"data.loc[1,[\"Deaths\"]]","71c67342":"data[[\"Recovered\",\"Deaths\"]]","a984ad78":"data.loc[1:20,\"Deaths\":]","02e4b814":"print(type(data[\"Recovered\"]))     # series\nprint(type(data[[\"Recovered\"]]))","8c82e117":"# Reverse slicing \ndata.loc[40:1:-1,\"Deaths\":\"Recovered\"]","43920250":"data.loc[1:10,\"Confirmed\":] ","1e67f95f":"boolean = data.Confirmed > 400\ndata[boolean]","c136a28c":"first_filter = data.Confirmed > 400\nsecond_filter = data.Deaths > 35\ndata[first_filter & second_filter]","48edb2bf":"data.Confirmed[data.Deaths<15]","73703deb":"def div(n):\n    return n\/2\ndata.Deaths.apply(div)","478c0611":"data.Deaths.apply(lambda n : n\/2)","82373267":"data[\"Remaining\"] = data.Confirmed - data.Deaths\ndata.tail()","64317d11":"print(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","0d1a7e0e":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf\n\n","4e3075e5":"df.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")","8c0a6702":"df1 = df.set_index(\"treatment\",\"gender\")\ndf1","5d5773a8":"df1.unstack(level=0)","968563c7":"df1.unstack(level=1)","7dbb6d29":"df","c15dc204":"df.groupby(\"treatment\").mean()","52ecca3c":"df.groupby(\"treatment\").age.max()","764fe8f0":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min() ","b29820de":"df.info","87f045da":"\n\nnum1 = [6,4,10,12]\n\nnum2 = [i**2 if i % 3 == 2 else i-1  for i in num1]\n\nprint(num2)\n\n","42be3207":"# 1. ******2. PYTHON DATA SCIENCE TOOLBOX\u00b6******","ccd27da1":"# 3.CLEANING DATA","c34972e8":"# PIVOTING DATA Reverse of melting.\n","ef1c7cfb":"# ##SON","ec6c9ee0":"# EXPLORATORY DATA ANALYSIS","fd5cafbb":"# 4. PANDAS FOUNDATION"}}