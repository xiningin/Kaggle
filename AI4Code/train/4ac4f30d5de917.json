{"cell_type":{"29770a45":"code","66a720c2":"code","3abe1d25":"code","a8dde4e7":"code","51020028":"code","25d74358":"code","0df59fe9":"code","330519f9":"code","bd0e46f3":"code","d88e09d7":"code","f30a71e4":"code","0a9e3dc0":"code","bcf79d0a":"code","8915f45e":"code","58fde0e1":"code","0991d978":"code","0427af2d":"markdown","e85062f1":"markdown","2737a82c":"markdown","7fc1c13c":"markdown","598e8abe":"markdown","4e5e68c4":"markdown","95837b8c":"markdown","2aa1a853":"markdown","a590004d":"markdown","f8d77226":"markdown","e3f1310d":"markdown","176b0143":"markdown","a159bde8":"markdown","23f3c2cd":"markdown","b7717b7e":"markdown","51109404":"markdown","5719967a":"markdown"},"source":{"29770a45":"import pandas as pd\nimport numpy as np\nfrom nltk.stem import WordNetLemmatizer\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nimport re\nimport spacy\nfrom nltk.corpus import sentiwordnet as swn\nfrom IPython.display import clear_output\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport plotly\nplotly.offline.init_notebook_mode (connected = True)","66a720c2":"data=pd.read_csv('..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')","3abe1d25":"data=data[['text']]","a8dde4e7":"data.head()","51020028":"# Function to preprocess the tweets data\ndef preprocess_tweet_data(data,name):\n    # Proprocessing the data\n    data[name]=data[name].str.lower()\n    # Code to remove the Hashtags from the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\B#\\S+','',x))\n    # Code to remove the links from the text\n    data[name]=data[name].apply(lambda x:re.sub(r\"http\\S+\", \"\", x))\n    # Code to remove the Special characters from the text \n    data[name]=data[name].apply(lambda x:' '.join(re.findall(r'\\w+', x)))\n    # Code to substitute the multiple spaces with single spaces\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n    # Code to remove all the single characters in the text\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+[a-zA-Z]\\s+', '', x))\n    # Remove the twitter handlers\n    data[name]=data[name].apply(lambda x:re.sub('@[^\\s]+','',x))\n\n# Function to tokenize and remove the stopwords    \ndef rem_stopwords_tokenize(data,name):\n      \n    def getting(sen):\n        example_sent = sen\n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n\n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n\n        filtered_sentence = [] \n\n        for w in word_tokens: \n            if w not in stop_words: \n                filtered_sentence.append(w) \n        return filtered_sentence\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x\n# Making a function to lemmatize all the words\nlemmatizer = WordNetLemmatizer() \ndef lemmatize_all(data,name):\n    arr=data[name]\n    a=[]\n    for i in arr:\n        b=[]\n        for j in i:\n            x=lemmatizer.lemmatize(j,pos='a')\n            x=lemmatizer.lemmatize(x)\n            b.append(x)\n        a.append(b)\n    data[name]=a\n# Function to make it back into a sentence \ndef make_sentences(data,name):\n    data[name]=data[name].apply(lambda x:' '.join([i+' ' for i in x]))\n    # Removing double spaces if created\n    data[name]=data[name].apply(lambda x:re.sub(r'\\s+', ' ', x, flags=re.I))\n\n","25d74358":"# Using the preprocessing function to preprocess the tweet data\npreprocess_tweet_data(data,'text')\n# Using tokenizer and removing the stopwords\nrem_stopwords_tokenize(data,'text')\n# Converting all the texts back to sentences\nmake_sentences(data,'text')","0df59fe9":"# Getting nlp from spacy.load\nnlp=spacy.load('en')\n# Making the function to get the sentiments out of the dataframe\ndef get_sentiment(data,name):\n    count=1\n    l=len(data)\n    positive_sentiments=[]\n    negative_sentiments=[]\n    for tex in data[name].values:\n        print('The current status is :',count*100\/l,'%')\n        tex=nlp(tex)\n        noun=[]\n        verb=[]\n        adj=[]\n        adv=[]\n        for i in tex :\n            if i.pos_=='NOUN':\n                noun.append(i)\n            elif i.pos_ =='ADJ':\n                adj.append(i)\n            elif i.pos_ =='VERB':\n                verb.append(i)\n            elif i.pos_=='ADV':\n                adv.append(i)\n        clear_output(wait=True)\n        count+=1\n        neg_score=[]\n        pos_score=[]\n        for i in tex :\n            try:\n                if i in noun:\n                    x=swn.senti_synset(str(i)+'.n.01')\n                    neg_score.append(x.neg_score())\n                    pos_score.append(x.pos_score())\n                elif i in adj:\n                    x=swn.senti_synset(str(i)+'.a.02')\n                    neg_score.append(x.neg_score())\n                    pos_score.append(x.pos_score())\n                elif i in adv :\n                    x=swn.senti_synset(str(i)+'.r.02')\n                    neg_score.append(x.neg_score())\n                    pos_score.append(x.pos_score())\n                elif i in verb :\n                    x=swn.senti_synset(str(i)+'.v.02')\n                    neg_score.append(x.neg_score())\n                    pos_score.append(x.pos_score())\n\n            except:\n                pass\n        positive_sentiments.append(np.mean(pos_score))\n        negative_sentiments.append(np.mean(neg_score))\n\n    data['Positive Sentiment']=positive_sentiments\n    data['Negative Sentiment']=negative_sentiments","330519f9":"get_sentiment(data,'text')","bd0e46f3":"data.head()","d88e09d7":"overall=[]\nfor i in range(len(data)):\n    if data['Positive Sentiment'][i]>data['Negative Sentiment'][i]:\n        overall.append('Positive')\n    elif data['Positive Sentiment'][i]<data['Negative Sentiment'][i]:\n        overall.append('Negative')\n    else:\n        overall.append('Neutral')\ndata['Overall Sentiment']=overall\n        \n","f30a71e4":"data.head()","0a9e3dc0":"sns.countplot(data['Overall Sentiment'])","bcf79d0a":"px.histogram(data['Negative Sentiment'],color=data['Overall Sentiment'])","8915f45e":"px.histogram(data['Positive Sentiment'],color=data['Overall Sentiment'])","58fde0e1":"text=' '\nfor i in data[data['Overall Sentiment']=='Positive']['text']:\n    text+=i+' '\n    \n# Make the figure\nwordcloud = WordCloud().generate(text)\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\n\nplt.show()","0991d978":"text=' '\nfor i in data[data['Overall Sentiment']=='Negative']['text']:\n    text+=i+' '\n    \n# Make the figure\nwordcloud = WordCloud().generate(text)\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\n\nplt.show()","0427af2d":"# Importing The Data","e85062f1":"# Histogram For Positive Sentiment Score","2737a82c":"# Preprocessing The Data","7fc1c13c":"# Importing The Packages","598e8abe":"# Using spacy to Position of a words and working it with sentiwordnet","4e5e68c4":"This dataset is about the pfizer tweets and here we are gonna explore it using spacy and sentiwordnet to get some sentiments on the tweets without any labels . Hope you like it :)","95837b8c":"# Having a look at the data","2aa1a853":"# Sentiment Analysis Using SentiwordNet and Spacy on Pfizer Tweet Dataset","a590004d":"# Hope you liked the file :)\n# Give an upvote if you got to learn something from the file :)\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","f8d77226":"Well we can see from this data that when there is a positive sentiment score between 0-0.17 we can see the exceptions anf the data can be clearly negative but when the positive score increases from 0.17 it's clear that the sentence is gonna be positive  .","e3f1310d":"Well from this we can clearly see when the negative sentiment score of the sentence increases there is a high chance for that sentnence being overall negative but we do see some exceptions while the negative sentiment score is between 0-0.2 .","176b0143":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhMWFRUXGBgYGBgYGBcVGBgXGBgXFxgXFRgYHSggGBolHRcXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy0lHyItLS0tLy0vLS0tLS0tLS0vLS0tLS0tLS0tLS0uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAMIBAwMBIgACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAEBQMGAAECBwj\/xABMEAABAwIDBAUHBgsHAwUAAAABAgMRACEEEjEFBkFREyJhcYEHMpGhsbLBI1JygtHwFDM0QlRic5OiwtIWFyRTY5LhFaOzQ4PD4vH\/xAAZAQACAwEAAAAAAAAAAAAAAAACAwABBAX\/xAAxEQACAgEEAQMCBAQHAAAAAAAAAQIRAwQSITFBE1FhMnEFkaHBIiOBsRQVQmLR4fD\/2gAMAwEAAhEDEQA\/AKvik5gXAOqIv9+NS7DISVK5o48TKaHxOPCkFEZAPzdRIETPKlWJbXATccY07qXKW1WCH7QeWSpKpF7x6RUeAwLjqg2UdXWQIkcSJ1rjZRICsx6ojtuSEj4UycV0bgDaiRGZEnnZxFvE+NDihv5ZHLgj2rs1DakoSLcx2fGiti4dCVFaetAIg9tKn8KUEnQG4vwNxTbC7SCG0ISBfzhxHb2zzrQ8S7XYCfPIxxryoCQLnjqB4i1MMCykoIVGaNaQYpLglSDImomsY4SAZFI4TpIZZasPgmUiXVg9lB4zDIdUEtWHtpW7h1Zc54HjT1lCXES2YcAkRRWuikr5FO1MCGsqkphXHtpYcQQvQ3prtDGqUUg+cNahUgKN9RegUop0D30dPRlk1rDuJUBCAY40HjHCJSamaxKuiyJEczVx+WXFnTOLT0pJSANIpttJhkpBCYMTalWxw2V5lXUNKk2xtBRWRlyCKa42gk6AcRiVJIA80G1NX2UOth0WNs0esUvfSpSRa3Dto1OHcZbkQUm5HI0uNVRU07srm0YSFRmgTp2dtJmMQhaglQkkxm5dxp8t5OaFpmTJ5d1Y5siF9IhvKBoB7aknvnwVXARgmkoy5HJIGvI8qIXmiVnMJPhNDswI4a2jU\/bUrqNL03akyJ8AT7k9UWvWi3CRpqr2IrvGJi9Y4QW0njKvYimLwA0YqQi47AezWhVKqdxdoEwTN+dDro4oGTIjTXZ+IzOBLgBEcRelik1M0\/cSqI4xQTRceDjajiM1hBGnLWisJtrOlDTicxzAAwONrzpQW0BICqAzRHC+vH0\/fSk8SiHbTLJstxCsX1EkQysKmNQ4jlTDbn4hf1ffTSLdL8er9mr3kU+28P8ADr70e+mnYlSSJJ3yVYCsrAmsrSZgYqKgI0++tOdjtF4lCyZSmQdTqBB5ij9l7AT+DgrkLVcRwnQRTHZ2yUt3MlRBBvaJB08K5MMbcrfRsSFWNwHRYdzNE524V2Z0mkTmLsAngrMDyJ1jsNXvE4JDicixKSRoSNL6juocbvYb\/LP+5X21rxtRVAyi2VzEgKZSrPmUTFzMACSJ4HsqJhwJ60WmBe9uY+NWgbAYGiD\/ALjUT+xmhBQm\/aSaJzVA7GR4NQICjYEeup8MlKCVKHdUmHwAKYUI5RW3mRluDbSaQ+eQ6IMYvpNZANKl5mTnQo6+HGnhcSpJSbZdDQX\/AE0LbEEzPhS3F3ZTTI9nO9MVFVlUYGvmpkihlYNtkghRnjenS1pUkBFu2pHG7LQvTh0qnMOtXLey4XrCTrUp2aCScy57x6rURhkZSIUVdhg\/CmONO0RKxVimkheRk8bnlQO0krC8q1TAkHn2VYsfhZMgZTQ2JwKVwVkgi1o+ymRdPkqUbQoViFIQASNZHExTYLC20SrXWk6tlFTqkiQkfna2olthIISlWaOfOs7u2yJvyGYjZjZWlM8Qaza+K6FzKm6YreEfzuALOUp83tqbH7NS6ZUo+EU2EVIttroTuLuTl01EaT7KicJ11Gk9tNxsZHz1er7KxOxkDRa\/V9lOoHkR4twKSALkezU1CqyEjtV7EVYBsJv5yvV9lb\/6EiIzKiZ4cY7OyrSoFpsrqnBlA4ifhUCjVnO77fzler7K1\/Z1v5yvV9lHwC4srC1WFcTVp\/s4185Xq+ytf2aa+cr1VTL2sqjzxIy8BUC02mrl\/Zhr5yvV9laO7DXzl+r7KW4ewVMS7m\/jl\/sz7yasG3Uywocyj3hWtnbFQwsrSpRKk5YMcweA7KJ2iwFoyGYKhprYz8KOKot9FLyRa3prKtY2K12+hP2VqmbhfpldVvbiCQno2jlF7LAB8FU73f2m88pQdShEJkBOadRc5uF6preIUUFISElKYSQBJ76d7h4l1x94ukqV0YuQBoQBp2VjT5H2WDePHrw+HW8jKpSSmAoGLqCTMEc6qP8AeBif8pg9wX\/XVo32\/Ine9HvprznYuDS6Sk9VRuDE6Xj78qIlj9XlDxA1Za9Cx\/NRO0N91NlKUNtrSUJUTKrKUJImaRbSaS+tKW0daCCAbyL2nWljGEvfT0EdkVCrLezv28ofiWo0upevAVY9j7cS831yhLhEhIzR66rGwdkYZ5otlwocBIgmRE2gG1MMFuqll2VuZRHVNUWrHGKW4lJytpXzAmq4N8Vs\/JDDiRqFKIIn6tG4rD4rCy62S63qrjbnFU3HYovLccPGDHLuqkiSlRZ9obUSkB1QnNeJ+NGYjegMtJWlKVhXAqiPGDVIddUpASTYaVypRUkJOgqKO0UXjAb5lxYQhlIm0lwi8TAGW+lNcTtJxGjQV3KPq6teaMIKYUkwUmrxsPbRcCU\/nm16jYyLDXd9GlJgphY1BMfClLu+6c2Uspj5wcmPDL8aM3h2EhLiVuAdaq\/tZDQQEIQDB1qlLwWx+\/vGWxnSylYIueky\/wApoHZe3UvPBPRdGVdaekmPDKKrDDhmJ+ytJdXmSUmVAmI5fZVNWqYNnppcQV8DlMdtJ9qb2lhxaCwDl\/1YJHMDJXW5iC444VRIAFF43ZKHFwtAUUmQeMcjVRyNMlUJR5QR+jf90f01seUAfo3\/AHB\/TXO2dgt5VOMpyqAMiKrhdI7ZGsfeIpnqN9EstjO+qlaYU93SgH0ZeyunN81gScIY\/aj+mqZh3ClWbMoHiR970xxRJbSrOq5Nza1tey9U8kkwlTQ+b35KiAMNE8S6I92sf36KPOwp\/eD+mqzgUoCgoqIIIITHHnPKpdvlBhKCDPWJi8ngOQF7VXqT3USltsd\/3hj9GP7wf01v+8K8fgpk\/wCoP6apYZHG1HYDCBShbtCu0XE0bm0CnZaG9\/5MDCmf2g\/pqR\/fpSBKsKY59KI92q3gkgOGTFxaito4cGZuOAHGdfGg9aV0Go8WWnd3eT8LWpPRdHlTmnNmmTHIUdtzFlpouBOcpUmxOUGTBvwiZ8Kru4jcPOWj5Md3n2inu9LgThlEiRmTbn1gIp6k3GwPIiG+rn6KP3v\/ANayq4jHvJEJCSOGtZWf1MvwMqIweGUkJPj3U33JMuufQ\/mTSYgU93OHyrn0P5hVxXICYz3y\/I3O9v3015sBF0yk9nCvSd8vyNf0m\/fTVIRh5SDEk93GmbbRUnTFjZXmmTMzPGe\/WmGGw7YeSXZKDc6zRBwiYGs0VjMFCUmLFIOs1GuQUM\/7LsO9fDv5TwBv\/wA1JspuV\/g+KOeNDNA4HDAMqcAMgxRb+yHA2MQFdYXI7KDzQxdWQ7bGKwZU2FktL80m9uU86q6GOqvuHvAfGrM5tpxSC2sBSSOOopU03Zf0R76KOhbYsQxXZZ50eGrCpFJB4X9tTaVYuDUacaN2G8G3krVoK30Vc9HUUG+ETclyWja21231oCj1RSLabKEOlKDKVDssaFLBrYZ502OiyS8fmLlqYJ9gxw3UJjTs9lD4fqqm47rU0KZ4TWujHKnR\/D5+WhT1kfCCdkbcGHWpQvm1A9tSbC2s47jAVKsrhw7KD6OukCCCNRRf5Z\/uKetT8Fv2vtJttYaUmc4Nx8aoy8GQ6UkECbd3CnOBxCkr6ZQzCQCTeJp3trFM4jIhuBlgzzNIno5wf7joZ4SRTW9nZlHhB14a1vGPEICRwUpM8YASOPfTbE7PW2qYKu0aeqluIYtxJzKUYFoISO+bUv8Aw2TvtfAbzw66fyL2muqTx0FaeUpapX2DgLDupiGwSByEcr1Epq57KHaXYHimBaL\/AAqfZaQFgcDr3ca6LdE4NkTmVoNOBPdQyjwFF2zC02HLGSCYtqec+imDsEAgHq6dvM0K2tKVlwQNYFp7+Qohp1xZlCZHbrpeBoazzT7HxfgY7qH5Zdj+KGvHrkzTPeVnNhymNVJ7OM0r3UUovOZtQ2ns\/OOoptvGkFiCYGZPtrXj+gU+ygubJcJ0A8a1TheEXJ6x9enCsqqYNgymyCRbWLU63PTDjn0P5hSgop1ukPlF\/R+IoF2Wuw\/fAf4RQ\/Wb99NVbB4JQF+InX73q074fkqo+e374qpYZKyIB9NOj0DPsnTgyUqMWHprHMUVICIsKxL6wCmLcajy8qLaBfsTMIXZAJhV4+\/dVgY2osApWiUEQeHo56GgMNnWlJkwiRJ7bwKmfxyFs5T5wMiltWxkXSE+LQkKOTTh9lZgWZKhrKdPrJrFCpEjKCTaU253i8cu2mKDk6QpyUeWDFEW5VooNSDvqWxHKt+PRVzMxZNX4iQJbEX1rWWiEpm3Gp8Js9bq0NtplazlSO3t5AamtkYQxrjgyynKb9wVszY9sVMnZL5Ehh0jmG1kemK9e2Ru7htnMqeWApaE5lukSfotg+bew4njSDYW92NxWObbRlQ0VdZvKD8mLqJUb5oGogTFqyLVOW541wvLNf8AhlGlN8vwjz\/DYIqKgbFIuDY+IqRWEzJCh9te7ba2G3iWylaRmg5Vx1kHgQeXMaGvD0PZOsjQm6ToDF6mDUPNddombTrFV9MA6EzEXtUrOHE5Va+ypjiZUVZbmPVXOKUSrPGWdAO6K28vgx3Fc\/8AqNqlAgcVW5RcX9NQss9ZPESNKnD6cgEda9cLJGhsIqlF8ouUlaY8fUWjmaUCY803pBiXytZUoAE6wKNCVBQE6j21I7gEpQcxkzY99Y8e3DJRfNmvJuzRbXFCZSJqEpgHl99aOSkTB0PGo1IEkAyPhWjLp45Pv7mfFnlD7ABTR+HwZKCbAD0+FRqbCDz5VOw5YgyZOnCuNli4ujrY5JqyHEMJygpIJSrThEfbUaMWswJskkgC2ut9aNagSAIkeEUPhmpXBIHfWaS9xy+BvuwsqxDpP+Wn3j6aZby\/iD9JNB7ATGJeEzDab8+saO3hTLMfrJ+NaMX0oGXkrCcSY1rK2pgCspm1CrZpa5USLSSbcO6m+6vnr+iPbSdVOd1fPc+iPbWehkewve\/8mP02\/fFJkKWoWTeL2P34U53w\/JT9Nv3hVcw+NcEi8kX9FMStEk6YRiEaAAzxtah0N2vzimbGDLyApaojgPjXC2coPb6qJPwC4+TpnMllYDasq4MwIGXUzwpYhcVcdg4VKsI6Tex7hHGqi8wULIOo8bG4PoNHig8k9qF5ZrHHczEuBN4lXbcJ8OJ9Q9np3k72MhWE6V1tK1OrUoFaQs5R1RdQ5pUfGvLkoJIAEk2A5k6CvoTZOADLTTI\/9NCU95AAJ8TJ8afrVHDjUI9v9hGjlLLNzl0itbe2hgcIsNuYVKyU5zkZZMJJKROYjiDXWzsDsvHJV0bDcpjMAjoVpnQ9SJ7wSKou+O0+kxz5HmhXRjub6p8MwJ8as\/krZl55wCwbSkntUQY\/gJ8aXPD6eHfbuvcbDNvyuFKhNvnud+CBLjRK2SYv5yFRIBI1FjB7IPMtvJVsqelxKuB6JueFgVn1pE99WbyiuJGz3c1pLYHf0iT7AaM3QwHQ4NlEQSnOr6TnXPomPCglqZS09S7boKOnis9rqrKx5Wcbkw7TIN3V5j9FsA+8pJ8KoGxdoqwryH27lMyDoQRCknvB8LVefKDsDG4rEgssFbSGwlJztpkklSiApQPED6tVf+w20f0Y\/vGv662aV4o4VGUlz3yvJk1KyvM5Ri+OuB5tbymKcaUhljolKBBWpebKDY5QEi+tz6Kp7eJbKFAp63Dl41Pj938Q042wtmHXIyozIJOYlIulRAuDryow7ibR\/Rj+8Z\/rp0IafGuGlfyJlPUTlym6+CuuDjxNdpaTlme8U\/G4u0f0Y\/vGf66B2vu1isMgOPtZEFQSDnbMqIJiEqJ0B9FPWbG+FJfmhDxZFy4v8mKQnlRIUAiCL+rxrez9nOvqyMoWtesJE+JOgHaasg8nmPUJKG0nkXBPjEj11WTLji6k0i8WLJJXFWVaTIP3FTJXKZUT9+dSbW2TiMMsIxDakEgxMEED5qhIPgbSKn2Rsp15J6NBUJy6gdaASLnkRS88o+nuTX3G4FL1NrT+wqgXi44GuQnSmWO2JiGgjO2YcJS2ElKyoiJASkkzccKZDcPHlGfoRp5pWjN6J9WtGs0FFOUkA8M3JqMWIl4dJGtRMJHAxOvdepdCUqTBEggiCCLEEHQzQqUjXKIrna2PKZ0NJL+FolxIOaEGUjjXL+EKIKoMifTRACYFrRwn11A\/eBcn4dtc5mwZbppPTOT\/AJaI7syopnvH+J+un40r3S\/HOz8xHvKpnvKPkfrp+NPx9Ip9Fd6QcZ9ArdFt7PbIBL0HllUY8RWUy4gVIAa1p\/u\/5yvojhHGlmOw5C5AgKGYDiAbQaY7toIUueKR7Tas3kYuybe0ThomPlG78utSXDNZYJJk\/nRY073sTLETEuI9tKsGvIjrElI7LGjT4I1yNMK4AOU68qGx+GMynSL2oXFYgp6xBSDw+ypWt5ChISlKVEghU+o1Ka5Ja6A9nbWW10iUqkLSUqSZiDx76EknUzR2xcMhcqXCSFSeRTy9NQYlsA24k119FFKN+WcnWNt\/CHO4ez+mxzCSJCFdIrub6w\/iyjxr27FKUlC1ISVLCVFKREqUAYF7XMV535Hdn3fxBHzWkn+Nf8lWffzeJeCYQpoJLi15QFAkZQCVGAR+qPGsGsby6jZHxwbdGli0++X3KLgtxMa5ZbSW5MlS1pNzqYQSSfCvS93dht4NgNIMxKlrNsyouo8hAAHICvO\/7fY1SZzto7Utj+aaRbW23iHrPvrcHKYT\/sTCfVTp4M+XiTSXwLhmw4uYpt\/Jad7tro2hicPgmDma6VOdQ0WrQlPNKUZr8SeyvTjAvoB6gK8i8lWBz41ThFmWyfrL6g9RX6K9B35x3Q4F9Q1Uno097hyW7gSfCs2pxpTjhj4\/ux+nyNwlll5\/sikueUPF9YpDQEmAUGQJsD1rmK9PwwXkR0kZ8qc0CBmgZoHATNeLboYLpsWwg3BWFn6KOsQe\/LHjXtG0MUGmnHVaIQpZ+qCamshCElGKL0s5STlJnj29O31p2qt9rKSyro0ZhmT1ElBkTfrFZ9FMdn787SfcS0ylla1cOjMAcSo5rJHOqzhcAvEPBDQzuOKJ7JN1KUeAFzNevbvbCY2ewrrCYzOvKtMXP0UDgPjWrUSxY4RTjcqpGXBHLOcndK7Y0YzIbBeWkqSmVrAyItckAmyR215ltlxza+OQw1KGEAqCj82QFOkfONgAezSTQu9++i8Uvo2ZTh0njYukaKXyTyT4m9hZvJOz8g86fOU7kn9VCUmB4rPopEcUtPB5X34+LHSyxzyWNdefmiwLRhtm4UlKcraIsPOcWbCTxUTx4dwqlbH3px+KxraUKAbKxnbShJSGgeuVKIzTFpkXjuq174vYFQQ3jllIkrSkdKJjqyejHCefGkjO+WzcKjJg2lKn5qSgE81rc6x74NLwpuLe1yk\/LXH5jcjSkluSS8efyGHlNLf4EQuJLiOjnXNMmPqZvTUm5WyUowLQUBK5dP1z1f4QmvONu7Wf2hiGwq2ZQQ2hPmpzkCe06SezhXtTbQSlKE6JASO4CB6qmeDxYowb5bsrDJZcsppdcFP3y201gShTbaV4kpIbzXS2gnrLIF5UbcJy9lyN196G8Rhwt51pDqZDiSoIAgmFAKOhTF9JmvOt4Mf+EYl5wmQVEI4whPVTHgJ7yaUdGLzr3Vqjo4PGk+\/f9hEtVJZG117B+9GOQ7i33Wz1FKsRxgBMjvInxpADeB41JiXCery17600kTSdQ1aiulwMwp02+3yFMtecL8AKndATFoA9JnjXBd6sfeK5DhVY8qwStmqNBO6n4576CfeVTTeMfI\/XT7DSzdMfLO\/QT7yqZ7xrysg\/rp+NaMfSBZVik86yuiusrQID33cxuqFCwOgsbU02CokqJ1KRPfMfCluOwycylKJF407aYbvZczgSSYA1tqTWPyafJJvQjMykc3Ee01Fh0oylChKY4UTvAOo2P9VH81BqeCFEjiKKrISvsMQkEWToFdvCq6cEsrcKEghM20kdnaKcuY4qEHTu5UG890eUNGVKvob9lC20VSYBsxwQM5MXmPGicRhstwZFtda5wuGKnCiIM+2pMZhVtqUCLV3dPNOEafg4mog1KVrye1eT3Z\/Q4BkEdZYLp\/8AcMp\/hyjwqkeVXHhWMba1DKBI16zhzH+EIqqI2\/jAABi8QALAB5wAAaADNUbT5ccKnVqUtQ89RKjmEQVE3NhFJx6OUMryyd9\/qNyauM8axRVdfoMWsUAR0SAQZBHCbXM8bUKeoTmTb83j6Pspuw22iFKgBV1JTzFKdtYhBJCJAF+7kO2nQdukgMi2xtvk9M8lOBCcK49F3XDH0WxlH8RXQfldxfUw+HGqlKcP1RlT7yvRVy3dwPQYVhnihtIV9IiV\/wARNeVeUfGB3HOX\/FhLY+qJV\/EpVc3B\/N1Tl93+yN+f+XplH+n\/ACN\/JDgSXX3johIbHLMsyqO0BI\/3VZvKRtPocHHF1aUR2Drq9SY8a8nwm0nm0ENPutXkhC1IBOkkJI4D1VzisY8+gdK845lNgtalxOsZiYrVk0rnm9ST49jNDVbMWyK5PVfJzspKMP8AhBTC37\/RbB6oHfGbxHKme8+wfwxsNKeW2gGVBAHXI0zTwGsc+4V4q1trFISEpxL6UpsEpdcAAGgACoAqVO38WY\/xeI7flnf6qCWhyb96kFHXY9mxxPQE+S5n9Id9CPsrjyebRaacxGDC5HSqLSlQM5HUUOUkISQON6of\/X8XqMXif3zn9VC4UTmJtw8Txo5afJKDWSVgx1GNTTxxo9i3v3XGNCCF9G43IBIkFKolKo0uAQe+16R7M8myEKC8Q7mSm5QiUpPPOs3jsAHfVUw+9OOQkJRiVwPnBLh9KwT66D2jtrEvnK8+tafmzCfFKYHqpMMGeK2qdIfPNhk9zjyWzZWGYe2yVYaCy0jpOqIQFhPRwjmMxCp5zV13hxnRYZ5yYIQQPpK6qfWRXjuAxLjZJacW2TY5FKQSBzym9SY7aeIUMrjzqk2JSpxaha4sTFTJpnOa54SRePMoxfHLbAHjkAsAI\/8A2KWOYuJ5n1dpqXHYhSuGnDl31E5gMiQomSq8cR303LqFFbV2xOPC5Pc+kSMJtzJqQJvNr1Gxaiui+2udk7N0OUbJkCI5Ry7aicSoco4VJBg1BiVWAmRy5Uph2Mt2SovOFX+Wnl85VHbzplj66fjS\/dYjpnY\/y0+8aY7zGGJ\/XT8adj6RT6K0V\/qCsrfT8wPRWU6hNj\/EMhURooXnieNdbAaUCsK1t7TWM2YbmesFn6wPDsrewAczhJv1f5qyeTU0b3l\/Ft\/tU+xVAHC3uQRzFG71D5Nof6yfdXS9LihwgCjt+AGTYh7okyACdIIpHiQqRJvwvYDl2UwdWVLEnwqDaCpJAAkcam0psl2M2ektM87+s0btJBKV5jceugNnYlTZtx4V3jsXZRGp4cIp+HM8UlfQjLiWSL9wGa6Qq4qBp4KsNeXHw51MkTXdhOM1cXwcSeOUHTQyal1YaTYnQ8LCaYbsbJU5jGWliR0gniMqOuoehJ9Na3dxCT1VoEomFCxi0iavXk\/ZSt9x0ea2nKm3FZ174SfTWHUZnjjJJeDfgwrI4yb8l6xD4QlS1eakFR7kgk+yvnvEvlxSlq85aio96iVH1mvYvKJjuiwDkGFOFLQ+sZV\/AFV4y4az\/h0OHL3G\/iE+VH2ISusaXBrlQ41zNdakcm3Ztaq1WLua5Xa1Sy6JA4QIqdtAIF\/CgiqpsKrrd9BNccDMbW6mGuEBOt6hZXF+JrnFvJBuRPL\/AIrptxWUlKfE1jyajHjjy+TdDDOcuOglGI6MZlQJoJ19S5VeOJ4+HKosmYyoyaK\/B7C8DlWDJnlLrg2wxJLnk6LKOiCk2UrVPMdtQOJOhmmCEhV4iBA+NQutEUqHAUuSHoU5ZOvZUhWYsIqRrDEC\/ETWlp5aGqk7LSoFIM1GGgTF6Ozi5N+A9FBOuGSmImltstIO3T\/HO\/QT7xppvKiWY\/XT8aW7rIh5wTPyab\/WNNN4B8j9dPxpsH\/DZbRUVdwrKYKwPMGaym+ohPpscbXVlw7UDKoQCD26nsrvd9wKzkCLJnt86hnsNlYSpSsxWQVBWkdnI0XsFCBnyCB1fHzqzv3NDTTI96YyMzYdMP8AxuUrfxLYsFE\/Gjt8x8m0P9X\/AONyq7gWQtwJJyg8eVMjG1YuUmnQ0bbtJHfQ6UJJPLkdfA07Tg0kK+UuB6aDQymb3t66iZGgbBiFWHdNS45Lam12yqHrrvDhsKGYEjsqXaS0FBCQdNT7KklZSZVXGpqfZ7qkrTm6yZuDcx2HnU3RV2yxJgCrTlHmLBqMuGh6xj20umG1JAHE61fdzNr4NhlYU+hKlLKlZjlAEAAEm3AnxrzjOpOt6HfUCNIJ1pU82SSqQ2OOEXaLx5TdtNvdA2y4hxICnCUKCxJ6qbpMTAV6aoi0HkfRQqsLJuIArlzDTpYcK0Ydd6UVFRv+plzaT1ZOTYQpJ5VAq3ZWvwKaBdwF9K0R\/E2+ofr\/ANCH+HJf6v0DRiUi2ZM94PsrHX06iTHIH40M3s7Q5hP2Ua01lN9KGWuyv6UkHHR4122wJWLURITHf9grhJWSDmjsFqafgwVYVpOGg0qWXJP6mNjihD6UbwzAAmP+KIUSRl05isDZ7qKaai5rPtSNF2RNYE5c\/CplJtepQtSh2ConHLxUVsrhE6EKyyBXDQE5jqOB0NbTilRANbVnPAVKfklrwcuuXIChEctBUPRCBe1SJRGaLTbwrmBZMwBxqvsEQKFp9VC49UxETEW50bmTJvbnS\/EOxNvGgZYz3WJLqpEQ2B\/EaZ7wD5IfTT7aS7mn5Z36A96nO8RPQ21zo96nQ+kpmsM6colN47KylThE3V6zWUGwlmYfaGbDqQ6rzDlBi54gU13bHVV9X40HtTCp7AOAHMXv20Zu2TlXMagCOUGoG3bIt7SAlmdOkP8A410pJBIhIBTrb0U23rZCwwkmAXFSe5tVL5EQFWjlrFHEXImK5ObQadlSjCpjXtNDOOAJg8fR31NCScua0Se+o0Q5ZwpKurwqbaTJS31o1ih8KFFQCb3rvaClZYPE+yja6A9xbU2GT1xFcCpsOOsKNoBPkPfFzPOhltAaGmSOtqON6hxWGBJi0UikNYBkorChKhlVauWGCRHGpUM89KFpBRbOsVs1MAoPhSZbMGmilG+XShAgk340UI0Dkd9A3QwQamQNJuKnWiKxpM2j\/ijAojSgai3KiFYeBwJOlaDNp9A51KWyB97ULkEkDIbMnsqYJIN6liU5QO\/tqJSSFZSapuwqolW6o2FkisaMaAd9dtM2kiK4XFDx0iNPycBHjXOSJmb6VM0rnWirSaKyUQPOjrGDFh3Ghk60W44kgyDrNCuKHC3GqKMBEEUBiHxliNJ\/4o5V1W1NLdoCNPGgrkuw7ck\/LO\/QHvU+3iVDBP6yPbSDcj8c5+zHvCnm85\/wyo+cj3hToEvgrRUTxrdDAntrKdtEbhvnUrNwhSqc7vphKxM3HrEn1k0rZJBWTc5p9NONiGUq7x7Kxp8mt9gO95MMx85fuGl+CazASqARfjFMd6UglgHms\/w\/80rwOI6PqiYPcRHKmrrgW+wtaUqypB0\/OPGtKaT1lDuEVvD4gBJkA8I41jTqTmzWHACpyTg6wnUWL3j1mjNvYUhtBsSJmLxJ1NLXlyQewUVisR8moAm+o7O+jd8AccimalZ1EcxUIqRNMFlkSFlIkADieMUI84DOUTHGum31QOKQBPKK5feCpGg4RSBzI2VCRBogOgAg3pc2I4VKlU8aCUS1ImcSItQyCa7KbWqTDIvUukTtkAvrRWUAXtIrpxoJVXZRmEHhQOVhKNADC4PPlRQSpR0rgsQbV0HCLeujk76BXHZzJSb1twyNawpjW5qNazULs2FGJJNbCpqMVoqq6KslzQOFRPOjnXCp7qjCR30e1FbmdZFGQBfWo1iSK6UVG81tU6mhkRGneqU3iRNL8fYkZRE+2intJoXEqBR20ssL3OTD7n7P+YU63n\/Jld6PfFJt0xGIWP8AT\/mTTjef8mX3o99NOh4I+iopcNZWk1qtFGYbYc9ZXdVi2MOqrvHsFarKxv6jYBb0+cx3uexNLXUidOfsrKyjQMjiukaGsrKIWbTR20R8n6KysopeCl0xUmuqysoxY\/w35KO+hsUKysrP5H+DtAoYce+srKGIUgpzzE1E151arKnggbivzK2ayspIZuoBrWVlFHsFkL3GolaVlZTUCzlegrYrdZVlETnCoVfGtVlMQDJU6HvFRE2NZWUuQSIleaaHeHVPhWVlAEGbp\/lCv2R95NOt5fyZfej301lZTYE8FQFZWVlaTMf\/2Q==)","a159bde8":"So when we are working with sentiwordnet we need to know the characterstic of the word for which we want to know the sentiment . So for finding that position of the word here we are gonna use Spacy.pos_ which tells us about the position of the word which then is used to get the sentiment using the sentiwordnet . We then average out the score for both the positive and the negative score from the whole sentence .\nThe positions compatible with the sentiwordnet are:\n* n - NOUN\n* v - VERB\n* a - ADJECTIVE\n* s - ADJECTIVE SATELLITE\n* r - ADVERB","23f3c2cd":"# Word Cloud For All The Positive Words :","b7717b7e":"# Histogram For Negative Sentiment","51109404":"Making the columns for the sentiments(Positive and Neagative ) and declearing overall sentiment which sohows whether the data is positive negative or neutral .","5719967a":"# Word Cloud For The Negative Words"}}