{"cell_type":{"9465b06e":"code","9345084f":"code","e5cc2824":"code","c58892c5":"code","d63caf77":"code","005c67f6":"code","7930b628":"code","63b0395e":"code","0490aecf":"code","0b1a15d2":"code","a3d9f5e9":"code","ae93da77":"code","c3cf4407":"code","a0731d34":"code","db7642b1":"code","dc28c7fb":"code","30e3ea5d":"code","7e8b18c2":"code","47a75e1c":"code","44dafcaa":"code","62c18641":"code","8b6c8358":"code","9b62ed0f":"code","516c659a":"code","6f6d4465":"code","ed2a69ab":"code","757b35fe":"code","0fd4e81f":"code","3efb573f":"code","839e8423":"code","45857f57":"code","3bccb142":"code","ce84ca47":"code","aaa910e4":"code","2abb0f12":"code","9f047f23":"code","31e7a383":"code","b482336f":"code","6260b8fd":"code","e15c82cb":"code","261f1683":"code","06821c3c":"code","c80de985":"code","fa12df03":"code","b3a3f458":"code","59bde6ea":"markdown","d6b94504":"markdown","3067a770":"markdown","aafa8711":"markdown","fb12f51f":"markdown","737c618f":"markdown","c541a1cc":"markdown","40ee9135":"markdown","9b6e9e0d":"markdown","665fdd4f":"markdown","6e7e56eb":"markdown","5bd50c95":"markdown","13564e10":"markdown","b254fa2d":"markdown","cfcdaeee":"markdown","75eeca54":"markdown","5d788df4":"markdown","ef752263":"markdown","73dde30c":"markdown","136a2b46":"markdown","6bbf32a5":"markdown","22becf87":"markdown","66cc5cb5":"markdown","aabe5b2f":"markdown","b5cd47f3":"markdown"},"source":{"9465b06e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/bournemouth-venues\"))\n\n# Any results you write to the current directory are saved as output.","9345084f":"import numpy as np\nimport pandas as pd","e5cc2824":"venues = pd.read_csv('..\/input\/bournemouth-venues\/bournemouth_venues.csv')\nvenues.head()","c58892c5":"# view the total objects and variables in the data set\nvenues.shape","d63caf77":"# view the type of data in the data \nvenues.info()","005c67f6":"# View the last 10 rows\nvenues.tail(10)","7930b628":"venues.isnull().sum()","63b0395e":"venues.describe().transpose()","0490aecf":"# Column count on Discrete data\n# Calculate the Column count on Venue Name\nvenues['Venue Name'].value_counts()","0b1a15d2":"# Calculate the Column count on Venue Category\nvenues['Venue Category'].value_counts()","a3d9f5e9":"# Import Library\nfrom scipy.stats import skew , kurtosis","ae93da77":"# Skewness and Kurtosis for -Venue Latitude\nprint(\"skewness of the Venue Latitude\" , skew(venues['Venue Latitude']))\nprint(\"kurtosis of the Venue Latitude\" , kurtosis(venues['Venue Latitude']))","c3cf4407":"# Skewness and Kurtosis for -Venue Longitude\nprint(\"skewness of the Venue Longitude\" , skew(venues['Venue Longitude']))\nprint(\"kurtosis of the Venue Longitude\" , kurtosis(venues['Venue Longitude']))","a0731d34":"# Import Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","db7642b1":"# Histogram\nvenues['Venue Longitude'].hist()","dc28c7fb":"# Plot\nfig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(venues['Venue Longitude'])\nplt.show()","30e3ea5d":"# Boxplot\nsns.boxplot(venues['Venue Longitude'])","7e8b18c2":"# Histogram\nvenues['Venue Latitude'].hist()","47a75e1c":"# Plot\nfig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(venues['Venue Latitude'])\nplt.show()","44dafcaa":"# Boxplot\nsns.boxplot(venues['Venue Latitude'])","62c18641":"# Histogram\nvenues['Venue Name'].hist()","8b6c8358":"# Plot\nfig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(venues['Venue Name'])\nplt.show()","9b62ed0f":"# Histogram\nvenues['Venue Category'].hist()","516c659a":"#Plot\nfig,ax = plt.subplots(figsize=(15,5))\nax = sns.countplot(venues['Venue Category'])\nplt.show()","6f6d4465":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='Venue Name',y='Venue Latitude',data=venues)\nplt.show()","ed2a69ab":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='Venue Name',y='Venue Longitude',data=venues)\nplt.show()","757b35fe":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='Venue Category',y='Venue Latitude',data=venues)\nplt.show()","0fd4e81f":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='Venue Category',y='Venue Longitude',data=venues)\nplt.show()","3efb573f":"f,ax = plt.subplots(figsize=(15,6))\nax = sns.boxplot(x='Venue Latitude',y='Venue Longitude',data=venues)\nplt.show()","839e8423":"sns.distplot(venues['Venue Latitude'])","45857f57":"sns.distplot(venues['Venue Longitude'])","3bccb142":"plt.figure(figsize=(14,10))\nsns.heatmap(venues.corr(),annot=True,cmap='hsv',fmt='.3f',linewidths=2)\nplt.show()","ce84ca47":"sns.pairplot(data=venues)","aaa910e4":"# Import libraries\nfrom sklearn.preprocessing import scale\nvenues1=venues.drop(columns = {'Venue Name' , 'Venue Category'})\nvenues1","2abb0f12":"venues_scale=scale(venues1)","9f047f23":"venues_scale","31e7a383":"import scipy.cluster.hierarchy as shc\nplt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(venues_scale, method='ward'))","b482336f":"# The x-axis contains the samples and y-axis represents the distance between these samples. The vertical line with maximum distance is the blue line and hence we can decide a threshold of 8 and cut the dendrogram:\n\nplt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(venues_scale, method='ward'))\nplt.axhline(y=8, color='r', linestyle='--')","6260b8fd":"# We have two clusters as this line cuts the dendrogram at two points. Let\u2019s now apply hierarchical clustering for 2 clusters\nfrom sklearn.cluster import AgglomerativeClustering\ncluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward')  \ncluster.fit_predict(venues_scale)","e15c82cb":"# Import LIbraries\nfrom sklearn.cluster import KMeans\nfrom scipy.spatial.distance import cdist","261f1683":"# apply K-means clustering\nwss = []\n#Sum_of_squared_distances = []\nK = np.arange(1,50)\nfor k in K:  \n    km = KMeans(n_clusters=k)\n    km = km.fit(venues_scale)\n    wss.append(km.inertia_)\nplt.plot(K, wss, 'bx-')\nplt.xlabel('k')\nplt.ylabel('K')\nplt.title('Elbow Method For Optimal k')\nplt.show()","06821c3c":"# Apply K-menas \nmodel=KMeans(n_clusters=3)\nmodel","c80de985":"# Fit the model\nvenues_fit = model.fit(venues_scale)\nvenues_fit","fa12df03":"# Predict the model\nfrom sklearn.cluster import KMeans\ny_kmeans = model.predict(venues_scale)\ny_kmeans","b3a3f458":"# Add the new column to existing\nvenues['clusters']=pd.Series(y_kmeans)\nvenues","59bde6ea":"# Read the Data set","d6b94504":"# Skewness and Kurtosis","3067a770":"# Exploratory Data Analysis (EDA)","aafa8711":"# 4. Venue Category","fb12f51f":"# 1. Venue Name Vs Venue Latitude","737c618f":"# 3. Venue Category Vs Venue Latitude","c541a1cc":"# Pair Plot","40ee9135":"# Import Libraries for data reading and stats","9b6e9e0d":"# Apply Un_supervised ML Algorithms","665fdd4f":"# 2. Venue Latitude","6e7e56eb":"# Correlation","5bd50c95":"# 4. Venue Category Vs Venue Longitude","13564e10":"# 3. Venue Name","b254fa2d":"# Univariate Analysis","cfcdaeee":"# 2. K-Means Clustering","75eeca54":"# 1. Venue Longitude","5d788df4":"# Check if any null values in the dataset","ef752263":"# 5 .Venue Latitude Vs Venue Longitude","73dde30c":"# Normalize \/ Scale the data","136a2b46":"There is no Null values in the data","6bbf32a5":"# Distribution Plot","22becf87":"# 2. Venu Name Vs Venue Longitude","66cc5cb5":"# Graphical Visulations","aabe5b2f":"# 1. H-Clustering","b5cd47f3":"# Bivariate Analysis"}}