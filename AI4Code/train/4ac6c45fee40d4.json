{"cell_type":{"43ceb1df":"code","165e457b":"code","f19de910":"code","485502ef":"code","733e2b48":"code","60e57dba":"code","d86d0596":"code","3d551576":"code","20b6dfcb":"code","a366418c":"code","87f9e974":"code","ca1317c6":"code","2d57ffdf":"code","dc70ccad":"code","a257c4b5":"code","c47a4f8a":"code","fd310b35":"code","66fdb5c1":"code","3f6accaf":"code","3fb18daf":"code","ed870de3":"code","02c54da2":"code","bad030d2":"code","05486c6f":"code","3f7e8bde":"code","7be7a560":"code","e2c657c1":"code","14eaf260":"code","9785fabd":"markdown"},"source":{"43ceb1df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom mlxtend.preprocessing import minmax_scaling\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","165e457b":"URL_COVID = \"..\/input\/covid19-dataset\/covid.csv\"\nURL_BTC = \"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\"\ndf_covid = pd.read_csv(URL_COVID)","f19de910":"df_covid.head()","485502ef":"df_covid_world = df_covid.loc[df_covid[\"location\"] == \"World\"]  ","733e2b48":"df_covid_world[\"date\"] = pd.to_datetime(df_covid_world[\"date\"])","60e57dba":"#pd_covid_world.info()","d86d0596":"df_covid_world = df_covid_world[[\"date\", \"location\", \"new_cases_smoothed\", \"total_cases\"]]","3d551576":"df_covid_world.head()","20b6dfcb":"df_covid_world.reset_index(inplace = True)","a366418c":"df_covid_world = df_covid_world.drop('index', 1)\n\ndf_covid_world.head()","87f9e974":"plt.figure(figsize=(14,8))\nplt.title=\"new Covid-19 Cases plotted alone\"\n\nsns.set_style(\"darkgrid\")\nsns.lineplot(x=df_covid_world[\"date\"], y=df_covid_world[\"new_cases_smoothed\"])","ca1317c6":"df_bitcoin = pd.read_csv(URL_BTC)","2d57ffdf":"df_bitcoin.head()","dc70ccad":"df_bitcoin[\"Timestamp\"] = pd.to_datetime(df_bitcoin[\"Timestamp\"], unit='s')\ndf_bitcoin.head()","a257c4b5":"df_bitcoin = df_bitcoin.dropna(subset=[\"High\"])","c47a4f8a":"df_bitcoin = df_bitcoin.reset_index()\ndf_bitcoin.head()","fd310b35":"df_bitcoin = df_bitcoin.drop('index', 1)","66fdb5c1":"df_bitcoin.head()","3f6accaf":"df_bitcoin = df_bitcoin[[\"High\", \"Timestamp\"]]","3fb18daf":"df_bitcoin.head()","ed870de3":"#df_bitcoin.Timestamp = pd.to_datetime(df_bitcoin.Timestamp, unit='s')","02c54da2":"df_bitcoin_reduced = df_bitcoin.loc[df_bitcoin.index % 5000 == 0]\ndf_bitcoin_reduced = df_bitcoin_reduced[(df_bitcoin_reduced['Timestamp'].dt.year > 2019)]\n#df_bitcoin_reduced = df_bitcoin_reduced.loc[df_bitcoin_reduced.Timestamp.dt.day > 2018]","bad030d2":"df_bitcoin_reduced.head()","05486c6f":"plt.figure(figsize=(14,8))\nplt.title=\"Historical bitcoin data plotted alone\"\n\nsns.set_style(\"darkgrid\")\nsns.lineplot(x=df_bitcoin_reduced.Timestamp, y=df_bitcoin_reduced.High)","3f7e8bde":"fig, ax = plt.subplots(1,2,figsize=(14,8))\n\nplt.xticks(rotation=45)\n\nsns.lineplot(x=df_bitcoin_reduced.Timestamp, y=df_bitcoin_reduced.High, ax=ax[0])\nax[0].set_title(\"Bitcoin price 2019->2021\")\n\nsns.lineplot(x=df_covid_world[\"date\"], y=df_covid_world[\"new_cases_smoothed\"], ax=ax[1])\nax[1].set_title(\"New covid-19 cases\")\n\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=45)\n","7be7a560":"from sklearn.preprocessing import MinMaxScaler\n\nx = df_bitcoin_reduced.High.values.reshape(-1,1) #returns a numpy array\nmin_max_scaler = MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf_bitcoin_reduced.High = x_scaled\n\ny = df_covid_world.new_cases_smoothed.values.reshape(-1,1)\ny_scaled = min_max_scaler.fit_transform(y)\ndf_covid_world.new_cases_smoothed = y_scaled\n\nfig, ax = plt.subplots(1,2,figsize=(14,8))\n\nplt.xticks(rotation=45)\n\nsns.lineplot(x=df_bitcoin_reduced.Timestamp, y=df_bitcoin_reduced.High, ax=ax[0])\nax[0].set_title(\"Bitcoin price 2019->2021\")\n\nsns.lineplot(x=df_covid_world[\"date\"], y=df_covid_world[\"new_cases_smoothed\"], ax=ax[1])\nax[1].set_title(\"New covid-19 cases\")\n\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation=45)\n","e2c657c1":"df_covid_world = df_covid_world.loc[df_covid_world[\"date\"] < \"2021-04-30\"]","14eaf260":"plt.figure(figsize=(14,8))\nplt.title=\"Combined covid-19 and bitcoin graph\"\n\n\nsns.lineplot(x=df_bitcoin_reduced.Timestamp, y=df_bitcoin_reduced.High)\nsns.lineplot(x=df_covid_world[\"date\"], y=df_covid_world[\"new_cases_smoothed\"])\n\n","9785fabd":"**Normalizing**"}}