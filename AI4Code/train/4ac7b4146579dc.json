{"cell_type":{"1c751022":"code","6ca232db":"code","9232cd26":"code","8c85c33c":"code","07d9552b":"code","bbe470fc":"code","9afbb456":"code","7b48212c":"code","4936c3d1":"code","a62b0cca":"code","69d67462":"code","2a25ab17":"code","d39798aa":"code","12eb359e":"code","6dc364c0":"code","055a3d9a":"markdown","a890d675":"markdown","c6fc3e66":"markdown","f713aed4":"markdown","db06a645":"markdown"},"source":{"1c751022":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn\n%matplotlib inline\n%pylab inline\npylab.rcParams['figure.figsize'] = (20, 11)\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6ca232db":"df = pd.read_csv('\/kaggle\/input\/nba-all-star-game-20002016\/NBA All Stars 2000-2016 - Sheet1.csv')","9232cd26":"df.head()","8c85c33c":"df = df.set_index('Year')","07d9552b":"df.head()","bbe470fc":"plt.title(\"WT & Time\", fontsize=16)\ndf[\"WT\"].plot(grid=True);","9afbb456":"labels = df['Selection Type'].value_counts().index\nvalues = df['Selection Type'].value_counts().values\n\nfig = px.pie(df, values=values, names=labels, title='Selection Type Distribution')\nfig.show()","7b48212c":"labels = df['Team'].value_counts().index\nvalues = df['Team'].value_counts().values\n\nfig = px.pie(df, values=values, names=labels, title='All-star players by team')\nfig.show()","4936c3d1":"labels = df['Nationality'].value_counts().index\nvalues = df['Nationality'].value_counts().values\n\nfig = px.pie(df, values=values, names=labels, title='Nationality Distribution')\nfig.show()","a62b0cca":"labels = df['HT'].value_counts().index\nvalues = df['HT'].value_counts().values\n\nfig = px.pie(df, values=values, names=labels, title='HT Distribution')\nfig.show()","69d67462":"labels = df['Pos'].value_counts().index\nvalues = df['Pos'].value_counts().values\n\nfig = px.pie(df, values=values, names=labels, title='Position Distribution')\nfig.show()","2a25ab17":"def plot_pie_charts(dataframe, features):\n    for feature in features:\n        labels = dataframe[feature].value_counts().index\n        values = dataframe[feature].value_counts().values\n        fig = px.pie(df, values=values, names=labels, title=f'{feature} Distribution')\n        fig.show()","d39798aa":"features = ['Pos', 'Nationality', 'HT', 'Selection Type', 'Team']\nplot_pie_charts(df, features)","12eb359e":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, max_words=None, max_font_size=None, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=max_words if max_words else 200,\n        max_font_size=max_font_size if max_font_size else 36, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(40, 20))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","6dc364c0":"show_wordcloud(df['Player'].values, max_words=150, max_font_size=48)","055a3d9a":"# Kobe Bryant, you will be the best forever. Rest in Peace.","a890d675":"# We use a lot of the same code to do only one thing. Let's create a function","c6fc3e66":"# Let's look at all the best NBA players we have","f713aed4":"# Our legends all here","db06a645":"# Now we can easily plot all the charts we've been plotting above"}}