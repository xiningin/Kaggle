{"cell_type":{"6963727f":"code","524ff7b0":"code","5acce288":"code","df5cf826":"code","2c3eac4d":"code","c00d751a":"code","2bfc03c0":"code","3beaf675":"code","3ac6baa6":"code","6bda6583":"code","ca04fef1":"code","6cda79b5":"code","6e23721f":"code","5c02d9ca":"code","bc284b8e":"code","bf4da0af":"code","db62c163":"code","06a4447e":"code","2667c25b":"code","ca3d4c09":"code","9ffd3d8c":"code","877ae2bb":"code","4407f466":"code","6018bdc4":"code","500d995d":"code","32c42af5":"code","e4e1a26a":"code","504843c1":"code","f7cbb3eb":"code","64f9bdeb":"code","f04693f4":"code","c8482d7f":"code","d18788b3":"code","7157e3c4":"code","7825a4f6":"code","132fe294":"code","f1719d22":"code","a0cdc5e3":"code","7c2e22cc":"code","cc0681eb":"code","c0720f71":"code","99844990":"code","9b310140":"code","a6328d56":"code","a8b00028":"code","39d865d9":"code","2495e695":"code","ad957ede":"code","51cdd933":"code","ee81d66a":"code","da2250e3":"code","c6a5b37f":"code","364bca37":"code","03d6403f":"code","708deb26":"code","020da27c":"code","0253cb3d":"code","a2c03a93":"code","56c64474":"code","e1a8dbb2":"code","7053731e":"code","b4d8f2aa":"code","72ac42f6":"code","cf73a5da":"code","25356106":"code","f292ea7d":"code","f279299f":"code","bde3b4ab":"code","83e38264":"code","d14b2d9d":"code","33caef37":"code","ad0b9b5d":"code","7137fcca":"code","c469be14":"code","405030fb":"code","e6cf3280":"code","3a5c8acd":"code","bad93888":"code","a22c8312":"code","041b9d26":"code","cf511c3a":"code","559c0729":"code","7ac64c85":"code","8d8cf428":"code","45fda2f3":"code","edf925b4":"code","0e0426f5":"code","c323384e":"code","9b688269":"markdown","481906b5":"markdown","683f45c7":"markdown","1e701b9c":"markdown","9409c5d0":"markdown","77c07bca":"markdown","8b454aec":"markdown","b64f682f":"markdown","85cba22d":"markdown","6e1bc8cc":"markdown","cd29d0dd":"markdown","f42a4f9d":"markdown","60871d0c":"markdown","2bd75a8d":"markdown","4e366904":"markdown","7d91f3b6":"markdown","a49d06a0":"markdown","0d90ad52":"markdown","5c66bedd":"markdown","aec60229":"markdown","bfae2fb1":"markdown","fe324a2a":"markdown","aeead89a":"markdown","cfd1ddfa":"markdown","a85dc855":"markdown","752768ed":"markdown","e06d65c9":"markdown","0106ae25":"markdown","ec0694e3":"markdown","36c2bf8a":"markdown","7287c854":"markdown","1194e0a9":"markdown","11ea7c0c":"markdown","a4df6ca5":"markdown","ba50074f":"markdown","b0fb262e":"markdown","a0dd55fc":"markdown","b8f011f6":"markdown","57e5dc3f":"markdown","8efdcd67":"markdown","ec906676":"markdown","5ca651c1":"markdown","ac6a694f":"markdown","1cb78aff":"markdown","d944525b":"markdown","c37d4308":"markdown","fcec5fe9":"markdown","c18292b1":"markdown","8dd91e99":"markdown","d7d43cca":"markdown","dc8fbb70":"markdown","c3e6cf13":"markdown"},"source":{"6963727f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\n\npd.set_option(\"display.max_columns\", 100)\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, accuracy_score, roc_auc_score, confusion_matrix","524ff7b0":"df = pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","5acce288":"df.head()","df5cf826":"df.dtypes","2c3eac4d":"df.SeniorCitizen.describe()","c00d751a":"df.SeniorCitizen.replace([0, 1], [\"No\", \"Yes\"], inplace= True)","2bfc03c0":"df.TotalCharges.describe()","3beaf675":"df.TotalCharges.unique()","3ac6baa6":"for charge in df.TotalCharges:\n    try:\n        charge = float(charge)\n    except:\n        print(\"charge:\", charge, \"length\", len(charge))","6bda6583":"charges = [float(charge) if charge != \" \" else np.nan for charge in df.TotalCharges]","ca04fef1":"df.TotalCharges = charges","6cda79b5":"df.describe()","6e23721f":"df.describe(include=object)","5c02d9ca":"df.hist(figsize=(15, 5), layout=(1, 3))\nplt.show()","bc284b8e":"sns.countplot(y=\"MultipleLines\", data= df)\nplt.show()\nsns.barplot(y=\"MultipleLines\", x=\"TotalCharges\", data= df)\nplt.show()\nsns.barplot(y=\"MultipleLines\", x=\"MonthlyCharges\", data= df)\nplt.show()","bf4da0af":"sns.lmplot(\"MonthlyCharges\", \"TotalCharges\", hue=\"InternetService\", data= df, fit_reg= False)","db62c163":"sns.lmplot(\"MonthlyCharges\", \"TotalCharges\", hue=\"Contract\", data= df, fit_reg= False)","06a4447e":"sns.lmplot(\"MonthlyCharges\", \"MonthlyCharges\", hue=\"InternetService\", data= df, fit_reg= False)","2667c25b":"sns.lmplot(\"tenure\", \"TotalCharges\", data= df, hue=\"Churn\", fit_reg= False)","ca3d4c09":"for col in df.dtypes[df.dtypes == object].index:\n    print(col, df[col].unique())","9ffd3d8c":"df[\"ProtectedCustomer\"] = [\"Yes\" if df.OnlineBackup[i]==\"Yes\" and df.OnlineSecurity[i]==\"Yes\" else \"No\" for i in range(len(df))]","877ae2bb":"df[\"StreamerCustomer\"] = [\"Yes\" if df.StreamingMovies[i]==\"Yes\" and df.StreamingTV[i]==\"Yes\" else \"No\" for i in range(len(df))]","4407f466":"df[\"FamilyCustomer\"] = [\"Yes\" if df.Partner[i]==\"Yes\" or df.Dependents[i]==\"Yes\" else \"No\" for i in range(len(df))]","6018bdc4":"df[\"OldFashioned\"] = [\"Yes\" if df.PaperlessBilling[i]==\"No\" and df.PaymentMethod[i]==\"Mailed check\" \\\n                      else \"No\" for i in range(len(df))]","500d995d":"df[\"PowerUser\"] = [\"Yes\" if df.ProtectedCustomer[i]==\"Yes\" and df.StreamerCustomer[i]==\"Yes\" \\\n                   and df.DeviceProtection[i]==\"Yes\" and df.TechSupport[i]==\"Yes\" else \"No\" for i in range(len(df))]","32c42af5":"df[\"FamilyMultiple\"] = [\"Yes\" if df.FamilyCustomer[i]==\"Yes\" and df.MultipleLines[i]==\"Yes\" else \"No\" for i in range(len(df))]","e4e1a26a":"df.describe()","504843c1":"df[\"FullCharges\"] = df.tenure * df.MonthlyCharges","f7cbb3eb":"df[\"Discount\"] = df.FullCharges - df.TotalCharges","64f9bdeb":"df.head()","f04693f4":"df.isna().sum()","c8482d7f":"df.TotalCharges.fillna(df.TotalCharges.median(), inplace= True)\ndf.Discount.fillna(df.Discount.median(), inplace= True)","d18788b3":"df.to_csv(\"cleaned.csv\", index= False)","7157e3c4":"df = pd.read_csv(\"cleaned.csv\")","7825a4f6":"df.shape","132fe294":"df.head()","f1719d22":"df.drop(\"customerID\", axis= 1, inplace= True)","a0cdc5e3":"df.Churn.replace([\"Yes\", \"No\"], [1, 0], inplace= True)","7c2e22cc":"df = pd.get_dummies(df)","cc0681eb":"X = df.drop(\"Churn\", axis= 1)\ny = df.Churn","c0720f71":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state= 1234)","99844990":"print( len(X_train), len(X_test), len(y_train), len(y_test) )","9b310140":"X_train.shape, y_train.shape","a6328d56":"pipelines = {\n    \"rf\": make_pipeline(StandardScaler(), RandomForestClassifier(random_state=123)),\n    \"gb\": make_pipeline(StandardScaler(), GradientBoostingClassifier(random_state=123)),\n    \"nb\": make_pipeline(StandardScaler(), GaussianNB()),\n    \"kn\": make_pipeline(StandardScaler(), KNeighborsClassifier())\n}","a8b00028":"pipelines[\"nb\"].get_params()","39d865d9":"rf_hyperparameters = {\n    \"randomforestclassifier__n_estimators\": [100, 200],\n    \"randomforestclassifier__max_features\": [\"auto\", \"sqrt\", 0.33]\n}\ngb_hyperparameters = {\n    \"gradientboostingclassifier__n_estimators\": [100, 200],\n    'gradientboostingclassifier__learning_rate': [0.05, 0.1, 0.2],\n    'gradientboostingclassifier__max_depth': [1, 3, 5]\n}\nkn_hyperparameters = {\n    'kneighborsclassifier__n_neighbors': [3, 5, 7, 10]\n}\nnb_hyperparameters = {\n    'gaussiannb__priors': [None]\n}\nhyperparameters = {\"rf\": rf_hyperparameters,\n                   \"gb\": gb_hyperparameters,\n                   \"nb\": nb_hyperparameters,\n                   \"kn\": kn_hyperparameters}","2495e695":"fitted_models = {}\n\nfor name, pipeline in pipelines.items():\n    model = GridSearchCV(pipeline, hyperparameters[name], cv= 10, n_jobs= -1)\n    model.fit(X_train, y_train)\n    fitted_models[name] = model\n    print(name, 'has been fitted.')","ad957ede":"for name, model in fitted_models.items():\n    print(name, model.best_score_)","51cdd933":"for name, model in fitted_models.items():\n    print(name)\n    print(\"-----------\")\n    pred = model.predict(X_test)\n    print('ACC:', accuracy_score(y_test, pred))\n    print(\"ROC:\", roc_auc_score(y_test, pred))\n    print(\"CoM:\\n\", confusion_matrix(y_test, pred))","ee81d66a":"with open('final_model_churn.pkl', 'wb') as f:\n    pickle.dump(fitted_models['gb'].best_estimator_, f)","da2250e3":"df = pd.read_csv(\"cleaned.csv\")","c6a5b37f":"df.shape","364bca37":"df.head()","03d6403f":"df.drop(\"customerID\", axis= 1, inplace= True)","708deb26":"for col in df.dtypes[df.dtypes==object].index:\n    if set(df[col].unique().tolist()) == set([\"Yes\", \"No\"]):\n        df[col].replace([\"Yes\", \"No\"], [1, 0], inplace= True)","020da27c":"df.head()","0253cb3d":"df.gender.replace([\"Male\", \"Female\"], [1, 0], inplace=True)","a2c03a93":"df = pd.get_dummies(df)","56c64474":"X = df.drop([\"TotalCharges\", \"FullCharges\"], axis= 1)\ny = df.TotalCharges","e1a8dbb2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state= 1234)","7053731e":"print( len(X_train), len(X_test), len(y_train), len(y_test) )","b4d8f2aa":"X_train.shape, y_train.shape","72ac42f6":"pipelines = {\n    \"rf\": make_pipeline(StandardScaler(), RandomForestRegressor(random_state=123)),\n    \"gb\": make_pipeline(StandardScaler(), GradientBoostingRegressor(random_state=123))\n}","cf73a5da":"rf_hyperparameters = {\n    \"randomforestregressor__n_estimators\": [100, 200],\n    \"randomforestregressor__max_features\": [\"auto\", \"sqrt\", 0.33]\n}\ngb_hyperparameters = {\n    \"gradientboostingregressor__n_estimators\": [100, 200],\n    'gradientboostingregressor__learning_rate': [0.05, 0.1, 0.2],\n    'gradientboostingregressor__max_depth': [1, 3, 5]\n}\nhyperparameters = {\"rf\": rf_hyperparameters,\n                   \"gb\": gb_hyperparameters}","25356106":"fitted_models = {}\n\nfor name, pipeline in pipelines.items():\n    model = GridSearchCV(pipeline, hyperparameters[name], cv= 10, n_jobs= -1)\n    model.fit(X_train, y_train)\n    fitted_models[name] = model\n    print(name, 'has been fitted.')","f292ea7d":"for name, model in fitted_models.items():\n    print(name, model.best_score_)","f279299f":"for name, model in fitted_models.items():\n    print(name)\n    print(\"-----------\")\n    pred = model.predict(X_test)\n    print('MAE:', mean_absolute_error(y_test, pred))\n    print(\"RMSE:\", np.sqrt(mean_squared_error(y_test, pred)))\n    \nprint(\"\\nMean:\", np.mean(y_test))","bde3b4ab":"plt.scatter(y, fitted_models[\"rf\"].predict(X))\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nx_lim = plt.xlim()\ny_lim = plt.ylim()\nplt.plot(x_lim, y_lim, \"k--\")\nplt.show()","83e38264":"with open('final_model_total_price.pkl', 'wb') as f:\n    pickle.dump(fitted_models['rf'].best_estimator_, f)","d14b2d9d":"df = pd.read_csv(\"cleaned.csv\")","33caef37":"df.shape","ad0b9b5d":"df.head()","7137fcca":"df.drop([\"customerID\", \"FullCharges\", \"Discount\", \"TotalCharges\"], axis= 1, inplace= True)","c469be14":"for col in df.dtypes[df.dtypes==object].index:\n    if set(df[col].unique().tolist()) == set([\"Yes\", \"No\"]):\n        df[col].replace([\"Yes\", \"No\"], [1, 0], inplace= True)","405030fb":"df.head()","e6cf3280":"df.gender.replace([\"Male\", \"Female\"], [1, 0], inplace=True)","3a5c8acd":"df = pd.get_dummies(df)","bad93888":"X = df.drop(\"MonthlyCharges\", axis= 1)\ny = df.MonthlyCharges","a22c8312":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2, random_state= 1234)","041b9d26":"print( len(X_train), len(X_test), len(y_train), len(y_test) )","cf511c3a":"X_train.shape, y_train.shape","559c0729":"pipelines = {\n    \"rf\": make_pipeline(StandardScaler(), RandomForestRegressor(random_state=123)),\n    \"gb\": make_pipeline(StandardScaler(), GradientBoostingRegressor(random_state=123))\n}","7ac64c85":"rf_hyperparameters = {\n    \"randomforestregressor__n_estimators\": [100, 200],\n    \"randomforestregressor__max_features\": [\"auto\", \"sqrt\", 0.33]\n}\ngb_hyperparameters = {\n    \"gradientboostingregressor__n_estimators\": [100, 200],\n    'gradientboostingregressor__learning_rate': [0.05, 0.1, 0.2],\n    'gradientboostingregressor__max_depth': [1, 3, 5]\n}\nhyperparameters = {\"rf\": rf_hyperparameters,\n                   \"gb\": gb_hyperparameters}","8d8cf428":"fitted_models = {}\n\nfor name, pipeline in pipelines.items():\n    model = GridSearchCV(pipeline, hyperparameters[name], cv= 10, n_jobs= -1)\n    model.fit(X_train, y_train)\n    fitted_models[name] = model\n    print(name, 'has been fitted.')","45fda2f3":"for name, model in fitted_models.items():\n    print(name, model.best_score_)","edf925b4":"for name, model in fitted_models.items():\n    print(name)\n    print(\"-----------\")\n    pred = model.predict(X_test)\n    print('MAE:', mean_absolute_error(y_test, pred))\n    print(\"RMSE:\", np.sqrt(mean_squared_error(y_test, pred)))\n    \nprint(\"\\nMean:\", np.mean(y_test))","0e0426f5":"plt.scatter(y, fitted_models[\"rf\"].predict(X))\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nx_lim = plt.xlim()\ny_lim = plt.ylim()\nplt.plot(x_lim, y_lim, \"k--\")\nplt.show()","c323384e":"with open('final_model_monthly_price.pkl', 'wb') as f:\n    pickle.dump(fitted_models['rf'].best_estimator_, f)","9b688269":"The graph above has Monthly Charges vs Total Charges where each datapoint is colored by the type of internet service they have","481906b5":"#### Each model's scores on the test set","683f45c7":"### Saving the best model","1e701b9c":"## Now we use the cleaned dataframe for predicting the churn of customers","9409c5d0":"## Now we use regression to predict the total price each customer pays\nAll of this follows a similar workflow as above!","77c07bca":"#### Each model's scores on the test set","8b454aec":"#### Each model's best r2 score on the training set","b64f682f":"# Finished!","85cba22d":"Senior citizen problem fixed, now gotta fix the TotalCharges","6e1bc8cc":"But what about the categorical variables? We don't want them feeling left out. On to some **COUNTPLOTS!!!**","cd29d0dd":"Initializing X and y","f42a4f9d":"#### Each model's scores on the test set","60871d0c":"Turning the database into a one-hot encoded database","2bd75a8d":"# Telco Churn Modelling Dataset\nLink to dataset [here](https:\/\/www.kaggle.com\/blastchar\/telco-customer-churn)  \nLink to GitHub hosting [here](https:\/\/github.com\/kartikay-bagla\/Telco-Churn-Analysis)  \nLink to Kaggle hosting [here](https:\/\/www.kaggle.com\/drvader\/data-viz-churn-prediction-price-regression)\nLink to my blog post of this [here](https:\/\/kartikay-bagla.github.io\/Telco-Churn-Analysis\/)  ","4e366904":"#### Each model's best r2 score on the training set","7d91f3b6":"Time to plot **HISTOGRAMS**","a49d06a0":"### Fitting the models to the training set","0d90ad52":"Creating pipelines through which we can feed data","5c66bedd":"Filling them with the medians","aec60229":"Same for the categorical variables","bfae2fb1":"Let's check out the top 5 rows of the data","fe324a2a":"### Saving the best model","aeead89a":"Checking for missing values","cfd1ddfa":"It seems that some charges are blanks. Real smart, guys.","a85dc855":"#### Each model's best r2 score on the training set","752768ed":"A dataset provided by a telecommunications company regarding its customers and whether they stopped using their services or not (churn). I'm using this to explore the data, and practice feature engineering along with classification and regression both.","e06d65c9":"### Plotting the results","0106ae25":"## Monthly bill regression","ec0694e3":"### Hyper parameter grid for all the models","36c2bf8a":"### Creating Model pipelines","7287c854":"### Hyper parameter grid for all the models","1194e0a9":"### Hyper parameter grid for all the models","11ea7c0c":"### Creating Model pipelines","a4df6ca5":"### Fitting the models to the training set","ba50074f":"Senior citizen should be an object (it will be converted back to onehot in the end though)  \nTotal charges should be a float\/int instead of an object","b0fb262e":"A ProtectedCustomer is one who has both Online backups and security, similarly I create other features","a0dd55fc":"### Splitting the dataset","b8f011f6":"Dropping the customerID as it is of no use to us currently","57e5dc3f":"Getting the list of tunable parameters for the models","8efdcd67":"### Creating Model pipelines","ec906676":"Those were all single variable distributions, but what happens when we bring more variables into the game?","5ca651c1":"### Saving the best model","ac6a694f":"### Fitting the models to the training set","1cb78aff":"Now lets see the datatypes of each column to make sure everything is correctly loaded","d944525b":"### Splitting the dataset","c37d4308":"I created another column - FullCharges which is the product of tenure and monthly charges and it closely resembles TotalCharges but differs by plus-minus 200 dollars at the max. Which may be due to excessive services or discounts applied which are not included in the monthly charges","fcec5fe9":"Now its time to get a feel for the numerical variables","c18292b1":"## Initially we start with Data Visualization and Exploration","8dd91e99":"### Plotting the results","d7d43cca":"Turning Churn into a binary categorical variable","dc8fbb70":"Now its time to create some **features**","c3e6cf13":"### Splitting the dataset"}}