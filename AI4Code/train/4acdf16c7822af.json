{"cell_type":{"3ef9ac03":"code","d97ef0c4":"code","dcc913ab":"code","f8582f7e":"code","45bf4b7d":"code","bc5c708f":"code","b48faca1":"code","7b2352f3":"code","143753c9":"code","9471809f":"code","4d97dbc0":"code","b0a6a400":"code","5d242b94":"code","3f175797":"code","22e73c4f":"code","10095731":"code","d58554af":"code","69365bd8":"code","54a78078":"markdown","bb97b2bb":"markdown","85333586":"markdown","b93dce0c":"markdown","470554e3":"markdown","5eb51480":"markdown","a73781ab":"markdown","545429c8":"markdown","6f980b40":"markdown","5e32d95f":"markdown","44e5fb16":"markdown"},"source":{"3ef9ac03":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport seaborn as sns\nimport sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")\nsns.set_theme(style=\"darkgrid\")\nfrom sklearn.metrics import accuracy_score, precision_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.model_selection import train_test_split","d97ef0c4":"dataset = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","dcc913ab":"dataset.info()","f8582f7e":"dataset.head()","45bf4b7d":"colormap = plt.cm.viridis\nplt.figure(figsize=(15,15))\nplt.title('Dataset Correlation of attributes', y=1.05, size=19)\nsns.heatmap(dataset.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","bc5c708f":"sns.countplot(x=\"output\", data=dataset)","b48faca1":"plt.figure(figsize=(12,4))\nsns.set_color_codes()\nsns.barplot(dataset[\"cp\"],dataset[\"output\"])\n\n","7b2352f3":"plt.figure(figsize=(18,5))\nsns.set_color_codes()\nsns.distplot(dataset[\"age\"])","143753c9":"sns.catplot(x=\"output\", y=\"age\", data=dataset)","9471809f":"plt.figure(figsize=(12,4))\nsns.set_color_codes()\nsns.boxplot(y=dataset[\"age\"],x=dataset[\"cp\"])","4d97dbc0":"pd.crosstab(dataset['output'],dataset['sex']).plot(kind=\"bar\",stacked=True)","b0a6a400":"col = [\"age\", \"trtbps\", \"chol\", \"thalachh\", \"oldpeak\", \"output\"]\ng = sns.pairplot(dataset[col], diag_kind=\"kde\", hue='output')\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")\nplt.show()","5d242b94":"X = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1:].values","3f175797":"\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 0)","22e73c4f":"sc = StandardScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.fit_transform(x_test)\n\n","10095731":"model_list = [LogisticRegression(random_state = 0), \n              SVC(probability=True), \n              GaussianNB(), \n              BernoulliNB(), \n              KNeighborsClassifier(n_neighbors = 3, metric = 'minkowski'), \n              DecisionTreeClassifier(random_state = 0), \n              RandomForestClassifier(n_estimators = 10, criterion = 'entropy'),\n              AdaBoostClassifier(n_estimators = 50),\n              XGBClassifier(n_estimators = 100),\n             ]\n\n","d58554af":"log_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns=log_cols)\n\nmodel_name = []\naccuracy = []\n\nfor clf in model_list:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    model_name.append(name)\n    print(\"=\"*60)\n    print(name, 'Classification Reports')\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    \n    ll = log_loss(y_test, train_predictions)\n    log_entry = pd.DataFrame([[name, acc*100, ll]], columns=log_cols)\n    log = log.append(log_entry)\n    print(classification_report(y_test, train_predictions))\n    accuracy.append(acc)\n    \n    print(\"Log Loss: {}\".format(ll))\n    categories = ['No', 'Yes']\n    cm = confusion_matrix(y_test, train_predictions)  \n    sns.heatmap(cm, cmap = 'Blues', fmt = '', annot = True,\n                xticklabels = categories, yticklabels = categories)\n\n    plt.xlabel(\"Predicted values\", fontdict = {'size':14}, labelpad = 10)\n    plt.ylabel(\"Actual values\"   , fontdict = {'size':14}, labelpad = 10)\n    plt.title (\"{} Confusion Matrix\".format(name), fontdict = {'size':18}, pad = 20)\n    plt.show()\n       \nprint(\"=\"*60)","69365bd8":"df = pd.DataFrame({'model_name': model_name, 'accuracy':accuracy}, index=model_name)\n\ndf.plot.barh(figsize=(9,5))\n\nfor index, value in enumerate(accuracy):\n    plt.text(value, index,\n             str(value)[:4]+\"%\")\n    \nplt.title(\"Models and Accuracy\")\n\nplt.show()\n","54a78078":"# Reading the csv file","bb97b2bb":"* ### Heart attack and by gender","85333586":"# Correlation of attributes","b93dce0c":"# Modelling","470554e3":"* ### Age and heart attack","5eb51480":"\n\n# Bivariate analysis \n\n* ###  Pain type and heart attack\n\n#### Reminding\n\n##### cp : Chest Pain type chest pain type\n* Value 1: typical angina\n* Value 2: atypical angina\n* Value 3: non-anginal pain\n* Value 4: asymptomatic","a73781ab":"* ### Age and cp","545429c8":"# Importing Libraries","6f980b40":"# Total count of heart attack","5e32d95f":"# Some information about the dataset","44e5fb16":"## Comparison"}}