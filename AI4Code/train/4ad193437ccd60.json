{"cell_type":{"3f6baaf1":"code","b62a7862":"code","3430e3be":"code","e5bfb70a":"code","63557695":"code","94ee020d":"code","2a1b6f22":"code","7f09c02c":"code","62126448":"code","b6fcf3c1":"code","6f8a0551":"code","3705d343":"code","adc2728c":"code","04676721":"code","1e3ad69f":"code","751a8d77":"code","9dc6cddd":"code","aef904a3":"code","55af5879":"code","c773b57a":"code","0aaefa5f":"code","14854630":"code","259b3987":"code","85759573":"code","760d9699":"code","57f210a4":"code","0afe45c8":"code","938cae9f":"code","d3d42742":"code","bb64aead":"code","63b1fac7":"code","ffabb1de":"code","714850ec":"code","77d42792":"code","49141258":"code","e1384b45":"code","2307bad3":"code","39459539":"code","57fb95b7":"code","2256ca0a":"code","371598f0":"code","884de15b":"code","c9be7e72":"code","116eddf4":"code","38105f96":"code","c0b70939":"code","78dfc38d":"code","d8918919":"code","690f6eaa":"code","1a7909d8":"code","258665a4":"code","79ff3811":"code","ecb701c2":"code","5f7fa23c":"code","76ed7f14":"code","5c82eb60":"code","2e076eb9":"code","63543894":"code","af316dde":"code","d3a68270":"code","eb9d8d48":"code","814a0087":"code","4b7a651f":"code","c4f5f1b0":"code","7db7fa2f":"code","d2d4edac":"code","ad01f4c2":"code","a279ccdf":"markdown","849aafe0":"markdown","bc6a0624":"markdown","3d02851f":"markdown","71abd4ef":"markdown","4bf96f77":"markdown","f1572d0f":"markdown","592f51ca":"markdown"},"source":{"3f6baaf1":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b62a7862":"path = '..\/input\/winequality-red.csv'","3430e3be":"df = pd.read_csv(path, delimiter=',')\ndf.head()","e5bfb70a":"df.describe()","63557695":"df.head()","94ee020d":"df.sample(10)","2a1b6f22":"df.shape","7f09c02c":"df.info()","62126448":"df.hist();","b6fcf3c1":"num_bins = 10\ndf.hist(bins=num_bins, figsize=(20,15));","6f8a0551":"import seaborn as sns\ncorr=df.corr()\ndf.corr()","3705d343":"import seaborn as sns\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values);","adc2728c":"df.plot(kind='scatter', x='pH', y='alcohol',alpha = 0.5,color = 'red', figsize=(9,9))\nplt.xlabel('pH')             \nplt.ylabel('alcohol')\nplt.title('pH & alcohol')        \nplt.show()","04676721":"Y = df.iloc[:,:8].values\nX = df.iloc[:,10:11].values","1e3ad69f":"from sklearn.model_selection import train_test_split  \nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0)","751a8d77":"from sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X_train, y_train) ","9dc6cddd":"X.size","aef904a3":"Y.size","55af5879":"features = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides',\n            'free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\ntarget = ['quality']","c773b57a":"df.isnull()","0aaefa5f":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nX = df[features]\ny = df[target]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=200)","14854630":"regressor = LinearRegression()\nregressor.fit(X_train, y_train)","259b3987":"y_prediction = regressor.predict(X_test)\nprint(y_prediction[:5])\nprint('*'*40)\nprint(y_test[:5])","85759573":"y_test.describe()\n","760d9699":"from math import sqrt\nRMSE = sqrt(mean_squared_error(y_true=y_test, y_pred=y_prediction))\nprint(RMSE)","57f210a4":"regressor = DecisionTreeRegressor(max_depth=50)\nregressor.fit(X_train, y_train)","0afe45c8":"y_prediction = regressor.predict(X_test)\ny_prediction[:5]","938cae9f":"y_test","d3d42742":"RMSE1 = sqrt(mean_squared_error(y_true=y_test, y_pred=y_prediction))\nprint(RMSE1)","bb64aead":"from sklearn.tree import DecisionTreeClassifier","63b1fac7":"data_classifier = df.copy()","ffabb1de":"data_classifier.head()","714850ec":"data_classifier['quality'].dtype\n","77d42792":"data_classifier['quality_label'] = (data_classifier['quality'] > 6.5)*1","49141258":"data_classifier['quality_label']\n","e1384b45":"features = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides',\n            'free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\ntarget_classifier = ['quality_label']","2307bad3":"X = data_classifier[features]\ny = data_classifier[target_classifier]","39459539":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=324)","57fb95b7":"wine_quality_classifier = DecisionTreeClassifier(max_leaf_nodes=20, random_state=0)","2256ca0a":"wine_quality_classifier.fit(X_train, y_train)","371598f0":"prediction = wine_quality_classifier.predict(X_test)\nprint(prediction)\nprint()\nprint(y_test['quality_label'])","884de15b":"accuracy_score(y_true=y_test, y_pred=prediction)","c9be7e72":"from sklearn.tree import DecisionTreeClassifier, export_graphviz","116eddf4":"export_graphviz(wine_quality_classifier, out_file='wine.dot', feature_names=features, filled=True)","38105f96":"!dot -Tpng 'wine.dot' -o 'wine.png'","c0b70939":"![images] (\"wine.png\")","78dfc38d":"from sklearn.linear_model import LogisticRegression","d8918919":"data_classifier.head()","690f6eaa":"features = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides',\n            'free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\ntarget_classifier = ['quality_label']","1a7909d8":"X = data_classifier[features]\ny = data_classifier[target_classifier]","258665a4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=324)","79ff3811":"logistic_regression = LogisticRegression()\nlogistic_regression.fit(X_train, y_train)","ecb701c2":"prediction = logistic_regression.predict(X_test)\nprint(prediction)\nprint(y_test)","5f7fa23c":"accuracy_score(y_true=y_test, y_pred=prediction)","76ed7f14":"#1 - \u043f\u043b\u043e\u0445\u043e\u0435\n#2 - \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n#3 - \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u043d\u043e\u0435\n#1,2,3 --> \u043f\u043b\u043e\u0445\u043e\u0435\n#4,5,6,7 --> \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435\n#8,9,10 --> \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u043d\u043e\u0435\nreviews = []\nfor i in df['quality']:\n    if i >= 1 and i <= 3:\n        reviews.append('1')\n    elif i >= 4 and i <= 7:\n        reviews.append('2')\n    elif i >= 8 and i <= 10:\n        reviews.append('3')\ndf['Reviews'] = reviews","5c82eb60":"x = df.iloc[:,:11]\ny = df['Reviews']","2e076eb9":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx = sc.fit_transform(x)","63543894":"from sklearn.decomposition import PCA","af316dde":"pca_new = PCA(n_components=8)\nx_new = pca_new.fit_transform(x)","d3a68270":"x_train, x_test, y_train, y_test = train_test_split(x_new, y, test_size = 0.4)","eb9d8d48":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","814a0087":"rf.fit(x_train, y_train)","4b7a651f":"rf_predict=rf.predict(x_test)","c4f5f1b0":"print(rf.feature_importances_)","7db7fa2f":"from sklearn.metrics import confusion_matrix, accuracy_score","d2d4edac":"acc_score = accuracy_score(y_test, rf_predict)\nprint(acc_score)","ad01f4c2":"export_graphviz(rf, out_file='tree.dot', feature_names=features, filled=True)","a279ccdf":"**\u0410 \u0435\u0449\u0435 \u0431\u044b\u043b\u043e \u0431\u044b \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043b\u0435\u0441\u0430**","849aafe0":"**\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \/\n\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439**","bc6a0624":"**\u0427\u0442\u043e-\u0442\u043e \u0432\u0441\u0435 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c\\ \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439**","3d02851f":"**\u0412\u043e\u0442 \u044d\u0442\u043e \u0434\u0430! 98%\\ \u0412\u044b\u0432\u043e\u0434: \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043b\u0435\u0441\u0430 - \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442!**","71abd4ef":"**\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e **","4bf96f77":"**\u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435-\u043a\u0430 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0449\u0435 \u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e**","f1572d0f":"**\u0412\u043e\u0442 \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u0434\u043e**","592f51ca":"**\u0422\u043e\u0436\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e, \u043d\u043e \u0441 \u0434\u0435\u0440\u0435\u0432\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0431\u044b\u043b\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e**"}}