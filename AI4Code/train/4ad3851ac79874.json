{"cell_type":{"e539b1ef":"code","259e9cd2":"code","e1fda4ab":"code","6bb53313":"code","fb20aa7f":"code","25a97b1b":"code","5c5e53ab":"code","d230a327":"code","18d47baf":"code","273b3e10":"code","27fb2834":"code","91425733":"code","df391fff":"code","27d1ea7c":"code","0e79fc42":"code","cdcb57ce":"code","9402269d":"code","db7bd178":"code","f703a179":"code","989b45d6":"code","1faab0d8":"code","75b2592c":"code","ce52cb3b":"code","abcd5bae":"code","c9163505":"code","03953de7":"code","2167b323":"code","763ab436":"code","207cc7d1":"code","7c64e640":"code","aea2d5cb":"code","12f8984b":"code","4dc1abe1":"code","cdf057de":"code","7d5be3b7":"code","5f0fceea":"code","3cb45b18":"code","485e61de":"code","055e9f9f":"code","14207f64":"code","61fed7f8":"code","e361db8d":"code","ce2a5f7b":"code","c5fe672f":"code","5f7a896a":"code","d042a8b8":"code","9f54954e":"code","4631813e":"code","69851849":"code","b0495097":"code","3a93afe0":"code","c4da5d4b":"code","569b0585":"code","995ecb5a":"code","b8d5eb9d":"code","d20698c6":"code","ee8bd35a":"code","e3f5a904":"code","35125229":"code","425a9ca8":"code","e69b96c5":"code","9b6341d7":"code","a9441ac4":"code","f3f17338":"code","8c65252a":"code","181852b2":"code","c84d80ee":"code","faf3c92e":"code","a50c3e9c":"code","16a30096":"code","2a7e8254":"code","616ee4d0":"code","d75c7a88":"code","320dc9b1":"code","194da95b":"code","1e5da673":"code","65fe8778":"code","675cdf77":"code","8c2f30b4":"code","45368e4a":"code","63071c57":"code","939ec9be":"code","18e98547":"code","9fbeee53":"code","8c750b58":"code","6594c43e":"code","ceae7271":"code","2f53c070":"code","c8021857":"code","a17b1c87":"code","70ae0bfe":"code","40348921":"code","36d79140":"code","b87241f2":"code","fc2c3ec0":"code","d5a37d77":"code","c3832237":"code","f6117a5f":"code","9023c4b7":"code","0e3d52f0":"code","d6ab2f35":"code","09d2e6ef":"code","b0a0d09e":"code","f99f1b5c":"code","cc3dde80":"code","e7a6646e":"code","6807c538":"code","b99118a0":"markdown","b857e095":"markdown","b707a3f4":"markdown","eb47ce33":"markdown","ff391fb0":"markdown","53ca954e":"markdown","5ea8ab10":"markdown","73dfe6c7":"markdown","cf818af9":"markdown","2028578f":"markdown","1c209560":"markdown","ea8fb11d":"markdown","6aef80b2":"markdown","22a7e422":"markdown","f2ece730":"markdown","b8ddade6":"markdown","28948828":"markdown","21b18a7f":"markdown","101b8eb2":"markdown","b788ca1a":"markdown","cd6d7292":"markdown","2c0ffc05":"markdown","89629b93":"markdown","a05c9c0a":"markdown","3ca38afd":"markdown","57c1fef7":"markdown","cd0da25e":"markdown","b01bafb0":"markdown","63f65c68":"markdown","eb8ec0b7":"markdown","62106958":"markdown","9a3cec6c":"markdown","f24b560f":"markdown","9485c414":"markdown","8199c81b":"markdown","ff25a073":"markdown","e4f47f67":"markdown","7cbbf346":"markdown","f2a5523c":"markdown","e36b979a":"markdown","b9547276":"markdown","8b2c568c":"markdown"},"source":{"e539b1ef":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport os","259e9cd2":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nprint(train.shape)\nprint(test.shape)","e1fda4ab":"#https:\/\/www.kaggle.com\/oguzerdo\/top-1-house-pricing-project-regression-models bu notebook bize \u00e7ok yard\u0131mc\u0131 oldu,te\u015fekk\u00fcr ederiz!\n# N\u00fcmerik de\u011fi\u015fkenlerin se\u00e7ilmesi\nnum_cols = [col for col in train.columns if train[col].dtype in ['int64', 'float64']]\n# Id & SalePrice de\u011fi\u015fkenlerinin \u00e7\u0131kar\u0131lmas\u0131\nnum_cols.remove('Id')\nnum_cols.remove('SalePrice')\n# Num_cols u dataframe e \u00e7evirme\nnum_analysis = train[num_cols].copy()\n# Eksik g\u00f6zlemlerin doldurulmas\u0131\nfor col in num_cols:\n    if num_analysis[col].isnull().sum() > 0:\n        num_analysis[col] = SimpleImputer(strategy='median').fit_transform(num_analysis[col].values.reshape(-1,1))\n        \n# Model\n# ExtraTressRegressor\nclf = ExtraTreesRegressor(random_state=42)\netreg_model = clf.fit(num_analysis, train.SalePrice)","6bb53313":"def plot_importance(model, features, num=len(num_cols), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features})\n    plt.figure(figsize=(16, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\nplot_importance(etreg_model, num_cols)","fb20aa7f":"plt.figure(figsize=(8,8))\nplt.title('\u00d6nemli de\u011fi\u015fkenlerin korelasyon matrisi')\ncols =['OverallQual', 'GarageCars', 'GrLivArea', 'YearBuilt', \n       'FullBath', '1stFlrSF', 'TotalBsmtSF', 'GarageArea','Fireplaces','GarageYrBlt','SalePrice']\nsns.heatmap(train[cols].corr(),annot=True,square=True);","25a97b1b":"# https:\/\/www.kaggle.com\/mviola\/house-prices-eda-lasso-lightgbm-0-11635 \ndef plot_numerical(col, discrete=False):\n    if discrete:\n        fig, ax = plt.subplots(1,2,figsize=(12,6))\n        sns.stripplot(x=col, y='SalePrice', data=train, ax=ax[0])\n        sns.countplot(train[col], ax=ax[1])\n        fig.suptitle(str(col) + ' analysis')\n    else:\n        fig, ax = plt.subplots(1,2,figsize=(12,6))\n        sns.scatterplot(x=col, y='SalePrice', data=train, ax=ax[0])\n        sns.distplot(train[col], kde=False, ax=ax[1])\n        fig.suptitle(str(col) + ' analysis')\n","5c5e53ab":"# cols =['OverallQual', 'GarageCars', 'GrLivArea', 'YearBuilt', \n       #'FullBath', '1stFlrSF', 'TotalBsmtSF', 'GarageArea','Fireplaces','GarageYrBlt','SalePrice']\nplot_numerical('OverallQual',discrete=True);","d230a327":"plot_numerical('GarageCars',discrete=True);","18d47baf":"plot_numerical('GrLivArea')","273b3e10":"plot_numerical('YearBuilt')","27fb2834":"plot_numerical('FullBath',discrete=True)\n# FullBath: \u00dcst katlardaki tam banyolar","91425733":"plot_numerical('1stFlrSF')\n# 1stFlrSF : 1.kat metrekare alan\u0131","df391fff":"plot_numerical('TotalBsmtSF')\n# TotalBsmtSF : Kare ayakl\u0131 duvar kaplama alan\u0131","27d1ea7c":"plot_numerical('GarageArea')","0e79fc42":"plot_numerical('Fireplaces',discrete=True)","cdcb57ce":"# Kategorik de\u011fi\u015fkenlerin se\u00e7ilmesi\ncat_features = [col for col in train.columns if train[col].dtype =='object']\n\ncat_analysis = train[cat_features].copy()\n\nfor col in cat_analysis:\n    if cat_analysis[col].isnull().sum() > 0:\n        cat_analysis[col] = SimpleImputer(strategy='constant').fit_transform(cat_analysis[col].values.reshape(-1,1))\n\n# One-Hot Encoding\ndef one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\ncat_analysis = one_hot_encoder(cat_analysis,cat_features)\n\n# Model \nclf = ExtraTreesRegressor(random_state=42)\nh = clf.fit(cat_analysis, train.SalePrice)","9402269d":"def plot_importance(model, features, save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(16, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:20])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\nplot_importance(h, cat_analysis)","db7bd178":"cat_analysis[\"SalePrice\"] = train[\"SalePrice\"]","f703a179":"def cat_plot(col1,col2):\n    # t\u00fcm veri\n    fig, ax = plt.subplots(1,2,figsize=(12,6), sharey=True)\n    sns.stripplot(x=col1, y='SalePrice', data=train, ax=ax[0])\n    sns.boxplot(x=col1, y='SalePrice', data=train, ax=ax[1])\n    ax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=90)\n    ax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=90)\n    fig.suptitle(str(col1) + ' analysis')\n    \n    # one-hot encoding\n    fig, ax = plt.subplots(1,2,figsize=(12,6), sharey=True)\n    sns.stripplot(x=col2, y='SalePrice', data=cat_analysis, ax=ax[0])\n    sns.boxplot(x=col2, y='SalePrice', data=cat_analysis, ax=ax[1])\n    fig.suptitle(str(col2) + ' analysis')","989b45d6":"cat_plot(\"ExterQual\",\"ExterQual_TA\")","1faab0d8":"cat_plot(\"BsmtQual\",\"BsmtQual_Ex\")","75b2592c":"cat_plot(\"FireplaceQu\",\"FireplaceQu_missing_value\")","ce52cb3b":"cat_plot(\"Neighborhood\",\"Neighborhood_NoRidge\")","abcd5bae":"#train.drop('Id', axis=1, inplace=True)\n#test.drop('Id', axis=1, inplace=True)","c9163505":"# Train ve test dataler\u0131n\u0131 birle\u015ftirme\ndf = pd.concat([train, test]).reset_index(drop=True)\nprint(df.shape)","03953de7":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n    \nmissing_values_table(df)","2167b323":"# Baz\u0131 de\u011fi\u015fkenledeki NAN olanlar\u0131 eksiklik olarak g\u00f6r\u00fcyor ama asl\u0131nda bunlar\n# eksiklik de\u011fil yoklu\u011fu ifade ediyor.Bu nedenle onlar\u0131 None olarak de\u011fi\u015ftirece\u011fim.\n\nnone_cols = ['Alley', 'PoolQC', 'MiscFeature', 'Fence', 'FireplaceQu', 'GarageType',\n             'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond',\n             'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType']\n\n\n# Say\u0131sal de\u011ferlerdeki Nan olanlar asl\u0131nda yokluk anlam\u0131nda oldu\u011fu i\u00e7in onlar\u0131 da 0 \n# ile de\u011fi\u015ftirece\u011fim.\n\nzero_cols = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath',\n             'BsmtHalfBath', 'GarageYrBlt', 'GarageArea', 'GarageCars', 'MasVnrArea']\n\n# Di\u011fer de\u011fi\u015fkenlerde eksiklik az oldu\u011fu i\u00e7in mod ile dolduraca\u011f\u0131m.\nfreq_cols = ['Electrical', 'Exterior1st', 'Exterior2nd', 'Functional', 'KitchenQual',\n             'SaleType', 'Utilities']\n\n\nfor col in zero_cols:\n    df[col].replace(np.nan, 0, inplace=True)\n\nfor col in none_cols:\n    df[col].replace(np.nan, 'None', inplace=True)\n    \nfor col in freq_cols:\n    df[col].replace(np.nan, df[col].mode()[0], inplace=True)","763ab436":"missing_values_table(df)","207cc7d1":"# MsZoning(genel imar s\u0131n\u0131fland\u0131rmas\u0131) de\u011fi\u015fkenindeki bo\u015f de\u011ferleri \n# MSSubClassa(in\u015faat s\u0131n\u0131f\u0131) g\u00f6re dolduraca\u011f\u0131m.\n\ndf['MSZoning'] = df.groupby('MSSubClass')['MSZoning'].apply(\n    lambda x: x.fillna(x.mode()[0]))\n\n# LotFrontage m\u00fclkiyetin cadde ile ba\u011flant\u0131s\u0131n\u0131 g\u00f6steren bir de\u011fi\u015fken, her mahallenin \n# cadde ba\u011flant\u0131s\u0131n\u0131n birbirine benzeyebilece\u011finden bunu Neighborhood'a g\u00f6re dolduraca\u011f\u0131m.\n\ndf['LotFrontage'] = df.groupby(\n    ['Neighborhood'])['LotFrontage'].apply(lambda x: x.fillna(x.median()))\n\nmissing_values_table(df)","7c64e640":"# Say\u0131sal de\u011fi\u015fken olup asl\u0131nda kategorik de\u011fi\u015fken olmas\u0131 gerekenleri d\u00fczeltme\ndf['MSSubClass'] = df['MSSubClass'].astype(str)\ndf['YrSold'] = df['YrSold'].astype(str)\ndf['MoSold'] = df['MoSold'].astype(str)\ndf.info()","aea2d5cb":"df[\"LotShape\"].value_counts()","12f8984b":"# LotShape(\u0130mar \u015fekli) de\u011fi\u015fkeninin IR2 ve IR3 alt s\u0131n\u0131flar\u0131n\u0131n frekans\u0131 d\u00fc\u015f\u00fck.\n# Bu nedenle bunlar\u0131 IR1 e atayaca\u011f\u0131m.\n\ndf.loc[(df[\"LotShape\"] == \"IR2\"), \"LotShape\"] = \"IR1\"\ndf.loc[(df[\"LotShape\"] == \"IR3\"), \"LotShape\"] = \"IR1\"\ndf[\"LotShape\"].value_counts()","4dc1abe1":"df[\"ExterQual\"].value_counts()","cdf057de":"# S\u0131n\u0131flar aras\u0131nda dengesizlik oldu\u011fu i\u00e7in Ex ve Gd(en iyi kaliteli iki s\u0131n\u0131f) birle\u015ftirdik.\n# TA ve Fa (orta kaliteli s\u0131n\u0131f) birle\u015ftirdik\n\ndf.loc[df[\"ExterQual\"]==\"Ex\",\"ExterQual\"]=2\ndf.loc[df[\"ExterQual\"]==\"Gd\",\"ExterQual\"]=2\ndf.loc[df[\"ExterQual\"]==\"TA\",\"ExterQual\"]=1\ndf.loc[df[\"ExterQual\"]==\"Fa\",\"ExterQual\"]=1\ndf[\"ExterQual\"]= df[\"ExterQual\"].astype(\"int\")\n\ndf[\"ExterQual\"].value_counts()","7d5be3b7":"df[\"BsmtQual\"].value_counts()","5f0fceea":"# S\u0131n\u0131flar aras\u0131nda dengesizlik oldu\u011fu i\u00e7in Ex ve Gd(90 ile 100 inches aras\u0131) birle\u015ftirdik.\n# TA ve Fa (70 ile 89 inches aras\u0131) birle\u015ftirdik.\n# None da yokluk oldu\u011fu i\u00e7in dokunmad\u0131k.\n\ndf.loc[df[\"BsmtQual\"]==\"Ex\",\"BsmtQual\"]=2\ndf.loc[df[\"BsmtQual\"]==\"Gd\",\"BsmtQual\"]=2\ndf.loc[df[\"BsmtQual\"]==\"TA\",\"BsmtQual\"]=1\ndf.loc[df[\"BsmtQual\"]==\"Fa\",\"BsmtQual\"]=1\ndf.loc[df[\"BsmtQual\"]==\"None\",\"BsmtQual\"]=0\ndf[\"BsmtQual\"]= df[\"BsmtQual\"].astype(\"int\")\ndf[\"BsmtQual\"].value_counts()","3cb45b18":"df[\"KitchenQual\"].value_counts()","485e61de":"df.loc[df[\"KitchenQual\"]==\"Ex\",\"KitchenQual\"]=2\ndf.loc[df[\"KitchenQual\"]==\"Gd\",\"KitchenQual\"]=2\ndf.loc[df[\"KitchenQual\"]==\"TA\",\"KitchenQual\"]=1\ndf.loc[df[\"KitchenQual\"]==\"Fa\",\"KitchenQual\"]=1\ndf[\"KitchenQual\"]= df[\"KitchenQual\"].astype(\"int\")\ndf[\"KitchenQual\"].value_counts()","055e9f9f":"df.groupby(\"Neighborhood\").agg({\"SalePrice\":\"mean\"}).sort_values(by=\"SalePrice\", ascending=False)","14207f64":"# https:\/\/www.kaggle.com\/oguzerdo\/top-1-house-pricing-project-regression-models\n# Target de\u011fi\u015fkeninin ortalamas\u0131na g\u00f6re birbirine benzeyen il\u00e7eleri birle\u015ftirdik.\n\nneigh_map = {'MeadowV': 1,'IDOTRR': 1,'BrDale': 1,'BrkSide': 2,'OldTown': 2,'Edwards': 2,\n             'Sawyer': 3,'Blueste': 3,'SWISU': 3,'NPkVill': 3,'NAmes': 3,'Mitchel': 4,\n             'SawyerW': 5,'NWAmes': 5,'Gilbert': 5,'Blmngtn': 5,'CollgCr': 5,\n             'ClearCr': 6,'Crawfor': 6,'Veenker': 7,'Somerst': 7,'Timber': 8,\n             'StoneBr': 9,'NridgHt': 10,'NoRidge': 10}\n\ndf['Neighborhood'] = df['Neighborhood'].map(neigh_map).astype('int')","61fed7f8":"# Derecelendirme i\u00e7eren de\u011fi\u015fkenleri ordinal yap\u0131ya getirece\u011fim.\n\next_map = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ndf['ExterCond'] = df['ExterCond'].map(ext_map).astype('int')\n\nbsm_map = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\n\ndf['BsmtCond'] = df['BsmtCond'].map(bsm_map).astype('int')\n\nbsmf_map = {'None': 0,'Unf': 1,'LwQ': 2,'Rec': 3,'BLQ': 4,'ALQ': 5,'GLQ': 6}\ndf['BsmtFinType1'] = df['BsmtFinType1'].map(bsmf_map).astype('int')\ndf['BsmtFinType2'] = df['BsmtFinType2'].map(bsmf_map).astype('int')\n\nheat_map = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ndf['HeatingQC'] = df['HeatingQC'].map(heat_map).astype('int')\n\ndf['FireplaceQu'] = df['FireplaceQu'].map(bsm_map).astype('int')\ndf['GarageCond'] = df['GarageCond'].map(bsm_map).astype('int')\ndf['GarageQual'] = df['GarageQual'].map(bsm_map).astype('int')","e361db8d":"df[\"GarageCars\"].value_counts()","ce2a5f7b":"df[\"LotConfig\"].value_counts()","c5fe672f":"df.loc[(df[\"LotConfig\"]==\"Inside\"),\"LotConfig\"] = 1\ndf.loc[(df[\"LotConfig\"]==\"FR2\"),\"LotConfig\"] = 1\ndf.loc[(df[\"LotConfig\"]==\"Corner\"),\"LotConfig\"] = 1\n\ndf.loc[(df[\"LotConfig\"]==\"FR3\"),\"LotConfig\"] = 2\ndf.loc[(df[\"LotConfig\"]==\"CulDSac\"),\"LotConfig\"] = 2\ndf[\"LotConfig\"].value_counts()","5f7a896a":"df[\"LandSlope\"].value_counts()","d042a8b8":"df.loc[df[\"LandSlope\"] == \"Gtl\", \"LandSlope\"] = 1\ndf.loc[df[\"LandSlope\"] == \"Sev\", \"LandSlope\"] = 2\ndf.loc[df[\"LandSlope\"] == \"Mod\", \"LandSlope\"] = 2\ndf[\"LandSlope\"]= df[\"LandSlope\"].astype(\"int\")\ndf[\"LandSlope\"].value_counts()","9f54954e":"df[\"OverallQual\"].value_counts()","4631813e":"df.loc[df[\"OverallQual\"] == 1, \"OverallQual\"] = 1\ndf.loc[df[\"OverallQual\"] == 2, \"OverallQual\"] = 1\ndf.loc[df[\"OverallQual\"] == 3, \"OverallQual\"] = 1\ndf.loc[df[\"OverallQual\"] == 4, \"OverallQual\"] = 2\ndf.loc[df[\"OverallQual\"] == 5, \"OverallQual\"] = 3\ndf.loc[df[\"OverallQual\"] == 6, \"OverallQual\"] = 4\ndf.loc[df[\"OverallQual\"] == 7, \"OverallQual\"] = 5\ndf.loc[df[\"OverallQual\"] == 8, \"OverallQual\"] = 6\ndf.loc[df[\"OverallQual\"] == 9, \"OverallQual\"] = 7\ndf.loc[df[\"OverallQual\"] == 10, \"OverallQual\"] = 8\ndf[\"OverallQual\"].value_counts()","69851849":"df[\"MasVnrType\"].value_counts()","b0495097":"df.loc[df[\"MasVnrType\"] == \"BrkCmn\" , \"MasVnrType\"] = \"None\" \ndf[\"MasVnrType\"].value_counts()","3a93afe0":"df[\"Foundation\"].value_counts()","c4da5d4b":"df.loc[df[\"Foundation\"] == \"Stone\", \"Foundation\"] = \"BrkTil\"\ndf.loc[df[\"Foundation\"] == \"Wood\", \"Foundation\"] = \"CBlock\"\ndf[\"Foundation\"].value_counts()","569b0585":"df[\"Fence\"].value_counts()","995ecb5a":"df.loc[df[\"Fence\"] == \"MnWw\", \"Fence\"] = \"MnPrv\"\ndf.loc[df[\"Fence\"] == \"GdWo\", \"Fence\"] = \"MnPrv\"\ndf[\"Fence\"].value_counts()","b8d5eb9d":"#Total banyo say\u0131s\u0131\ndf[\"TotalBath_NEW\"] = df['BsmtFullBath'] + df['BsmtHalfBath'] * 0.5 + df['FullBath'] + df['HalfBath'] * 0.5\n\n# Toplam Kat Say\u0131s\u0131\ndf['TotalSF_NEW'] = (df['BsmtFinSF1'] + df['BsmtFinSF2'] + df['1stFlrSF'] + df['2ndFlrSF'])\n\n#Toplam Veranda Alan\u0131\ndf['TotalPorchSF_NEW'] = (df['OpenPorchSF'] + df['3SsnPorch'] +df['EnclosedPorch'] +df['ScreenPorch'] + df['WoodDeckSF'])\n\n# kaliteleriyle ilgili de\u011fi\u015fkenler\ndf[\"OVER_QUAL_NEW\"] = df['OverallQual'] + df['OverallCond']\n\n#Bodrum kalitesi\ndf[\"BSMT_QUAL_NEW\"] = df['BsmtQual'] + df['BsmtCond']\n\n#D\u0131\u015f malzeme kalitesi\ndf[\"EX_QUAL_NEW\"] = df['ExterQual'] + df['ExterCond']\n\n#Garaj kalitesi\ndf['TotalGrgQual_NEW'] = (df['GarageQual'] + df['GarageCond'])\n\n#Genel kalite\ndf['TotalQual_NEW'] = df['OverallQual'] + df['EX_QUAL_NEW']  + df['TotalGrgQual_NEW'] + df['KitchenQual'] + df['HeatingQC']\n\n# LUX EVLER\ndf.loc[(df['Fireplaces'] > 0) & (df['GarageCars'] >= 3), \"LUX_NEW\"] = 1\ndf[\"LUX_NEW\"].fillna(0, inplace=True)\ndf[\"LUX_NEW\"] = df[\"LUX_NEW\"].astype(int)\n\n#Restore Edilmemi\u015f-Edilmemi\u015f\n\n#df[\"new_home\"] = df[\"YearBuilt\"]\ndf.loc[df[\"YearBuilt\"] == df[\"YearRemodAdd\"], \"NEW_home\"] = 0\ndf.loc[df[\"YearBuilt\"] != df[\"YearRemodAdd\"], \"NEW_home\"] = 1\n\ndf['QualPorch_NEW'] = df['EX_QUAL_NEW'] * df['TotalPorchSF_NEW']\n\ndf['HasPool_NEW'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['Has2ndFloor_NEW'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['HasGarage_NEW'] = df['TotalGrgQual_NEW'].apply(lambda x: 1 if x > 0 else 0)\ndf['HasFireplace_NEW'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ndf['HasPorch_NEW'] = df['QualPorch_NEW'].apply(lambda x: 1 if x > 0 else 0)\n\n# Bah\u00e7e alan\u0131\ndf[\"Garden_NEW\"]=df[\"LotArea\"] - df[\"GrLivArea\"]","d20698c6":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n    \ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","ee8bd35a":"num_cols = [col for col in df.columns if df[col].dtype in ['int64', 'float64']]\nfor col in num_cols:\n    replace_with_thresholds(df, col)","e3f5a904":"for col in num_cols:\n    print(col, check_outlier(df, col))","35125229":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","425a9ca8":"def rare_analyser(dataframe, target, cat_cols):\n    for col in cat_cols:\n        print(col, \":\", len(dataframe[col].value_counts()))\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO\": dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")\n\ndef rare_encoder(dataframe, rare_perc,cat_cols):\n    \n    rare_columns = [col for col in cat_cols if (dataframe[col].value_counts()\/len(dataframe) < 0.01).sum() > 1]\n\n    for col in rare_columns:\n        tmp = dataframe[col].value_counts() \/ len(dataframe)\n        rare_labels = tmp[tmp < rare_perc].index\n        dataframe[col] = np.where(dataframe[col].isin(rare_labels), 'Rare', dataframe[col])\n\n    return dataframe","e69b96c5":"rare_analyser(df, \"SalePrice\", cat_cols)","9b6341d7":"df = rare_encoder(df, 0.01, cat_cols)","a9441ac4":"rare_analyser(df, \"SalePrice\", cat_cols)","f3f17338":"useless_cols = [col for col in cat_cols if df[col].nunique() == 1 or\n                (df[col].nunique() == 2 and (df[col].value_counts() \/ len(df) <= 0.02).any(axis=None))]\nuseless_cols","8c65252a":"cat_cols = [col for col in cat_cols if col not in useless_cols]\ndf.shape","181852b2":"for col in useless_cols:\n    df.drop(col, axis=1, inplace=True)\ndf.shape","c84d80ee":"rare_analyser(df, \"SalePrice\", cat_cols)","faf3c92e":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","a50c3e9c":"df = one_hot_encoder(df, cat_cols, drop_first=True)\ndf.shape","16a30096":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","2a7e8254":"rare_analyser(df, \"SalePrice\", cat_cols)","616ee4d0":"useless_cols_new = [col for col in cat_cols if (df[col].value_counts() \/ len(df) <= 0.01).any(axis=None)]\nuseless_cols_new","d75c7a88":"df.shape","320dc9b1":"for col in useless_cols_new:\n    df.drop(col, axis=1, inplace=True)\ndf.shape","194da95b":"#test train setini \u00f6nce birle\u015ftirmi\u015ftik \u015fimdi ay\u0131ral\u0131m\ntrain_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()].drop(\"SalePrice\", axis=1)","1e5da673":"y = np.log1p(train_df['SalePrice'])\nX = train_df.drop([\"Id\", \"SalePrice\"], axis=1)","65fe8778":"from catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor","675cdf77":"models = [('LR', LinearRegression()),\n          (\"Ridge\", Ridge()),\n          (\"Lasso\", Lasso()),\n          (\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          ('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor()),\n          (\"CatBoost\", CatBoostRegressor(verbose=False))]","8c2f30b4":"for name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")","45368e4a":"lgbm_model = LGBMRegressor(random_state=46)","63071c57":"# modelleme \u00f6ncesi hata:\nrmse = np.mean(np.sqrt(-cross_val_score(lgbm_model,\n                                        X, y, cv=10, scoring=\"neg_mean_squared_error\")))\nrmse","939ec9be":"lgbm_params = {\"learning_rate\": [0.001, 0.01, 0.05, 0.1],\n               \"n_estimators\": [200, 500, 750],\n               \"max_depth\": [-1, 2, 5, 8],\n               \"colsample_bytree\": [1, 0.50, 0.75],\n               \"num_leaves\": [25, 31, 44]}","18e98547":"lgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=10,\n                            n_jobs=-1,\n                            verbose=True).fit(X, y)","9fbeee53":"lgbm_gs_best.best_params_","8c750b58":"final_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X, y)","6594c43e":"rmse = np.mean(np.sqrt(-cross_val_score(final_model, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\nrmse\n#hiperparametrelerin default kendi de\u011feriyle rmse 0.12676 idi.\n#optimizasyonlarla 0.1228 e indirdik","ceae7271":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')","2f53c070":"plot_importance(final_model, X, 50)","c8021857":"feature_imp = pd.DataFrame({'Value': final_model.feature_importances_, 'Feature': X.columns})\nfeature_imp.sort_values(by=\"Value\",ascending=False)","a17b1c87":"feature_imp[feature_imp[\"Value\"] > 0].shape","70ae0bfe":"feature_imp[feature_imp[\"Value\"] < 1].shape","40348921":"zero_imp_cols = feature_imp[feature_imp[\"Value\"] < 1][\"Feature\"].values\nzero_imp_cols","36d79140":"selected_cols = [col for col in X.columns if col not in zero_imp_cols]\nlen(selected_cols)","b87241f2":"lgbm_model = LGBMRegressor(random_state=46)","fc2c3ec0":"lgbm_params = {\"learning_rate\": [0.001, 0.01, 0.05, 0.1],\n               \"n_estimators\": [200, 500, 750],\n               \"max_depth\": [-1, 2, 5, 8],\n               \"colsample_bytree\": [1, 0.50, 0.75],\n               \"num_leaves\": [25, 31, 44]}","d5a37d77":"lgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=10,\n                            n_jobs=-1,\n                            verbose=True).fit(X[selected_cols], y)","c3832237":"final_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X[selected_cols], y)","f6117a5f":"rmse = np.mean(np.sqrt(-cross_val_score(final_model, X[selected_cols], y, cv=5, scoring=\"neg_mean_squared_error\")))\nrmse\n\n#bir \u00f6nceli rmse de\u011feri 0.12281029384862836\n#\u00e7\u00f6p de\u011fi\u015fkenlerle azaltm\u0131\u015f olduk biraz da olsa 0.12315210453826239","9023c4b7":"submission_df = pd.DataFrame()","0e3d52f0":"submission_df['Id'] = test_df[\"Id\"]","d6ab2f35":"y_pred_sub = final_model.predict(test_df[selected_cols])","09d2e6ef":"y_pred_sub = np.expm1(y_pred_sub) #\u00f6l\u00e7eklendirmi\u015ftik ya onu geri ald\u0131k","b0a0d09e":"submission_df['SalePrice'] = y_pred_sub","f99f1b5c":"submission_df[\"Id\"]=submission_df[\"Id\"].astype(\"int32\")","cc3dde80":"submission_df.dtypes","e7a6646e":"submission_df.to_csv('submission.csv', index=False)","6807c538":"submission_df","b99118a0":"# MODEL","b857e095":"* \u00dcst katta hi\u00e7 banyosu olmad\u0131\u011f\u0131 halde fiyat\u0131 y\u00fcksek olan evler var.","b707a3f4":"# base model","eb47ce33":"* Genel malzeme kalitesi y\u00fcksek olanlar\u0131n fiyatlar\u0131 daha y\u00fcksek.\n* Ama 10. kalitede olup fiyat\u0131 d\u00fc\u015f\u00fck olan iki g\u00f6zlem var bunlar ayk\u0131r\u0131 olabilir.\n* 5.ve 6. kalitede olan evlerin say\u0131s\u0131 daha fazla.","ff391fb0":"* TotalBsmtSF de\u011fi\u015fkeni toplam \"Basement\" y\u00fcz\u00f6l\u00e7\u00fcm\u00fcn\u00fc veriyor.\"GrLivArea\" ve \"1stFlrSF\" ve \"2ndFlrSF\" alan \u00f6l\u00e7\u00fcmlerinin toplam\u0131 oldu\u011fu i\u00e7in bu de\u011fi\u015fkenlerin grafikleri ile benzer oldu\u011fu g\u00f6r\u00fcl\u00fcyor.","53ca954e":"* Yap\u0131m y\u0131l\u0131 1880 ile 1900 aras\u0131nda olup fiyat\u0131 y\u00fcksek olan evler var.Bunlar tarihi yap\u0131lar olabilir.\n* 2000 y\u0131l\u0131 sonras\u0131nda yap\u0131lan evlerin fiyatlar\u0131 artm\u0131\u015f.","5ea8ab10":"### Missing Values","73dfe6c7":"## DATA PREPROCESSING & FEATURE ENGINEERING","cf818af9":"### - Foundation (Vak\u0131f tipi)","2028578f":"### ExterQual: D\u0131\u015f malzeme kalitesi\n* Ex: Excellent\n* Gd: Good\n* TA: Average \/ Typical\n* Fa: Fair\n* Po: Poor","1c209560":"* GarageCars ile GarageArea aras\u0131nda 0.88 lik pozitif y\u00f6nl\u00fc korelasyon var yani ili\u015fkileri y\u00fcksek.\n* YearBuilt ile GarageYrBlt aras\u0131nda 0.83 l\u00fck korelasyon var.\n* 1stFlrSF ile TotalBsmtSF aras\u0131nda 0.82 lik koralsyon var.","ea8fb11d":"### - MasVnrType (Duvar kaplama t\u00fcr\u00fc)","6aef80b2":"#### - LotShape(\u0130mar \u015fekli)","22a7e422":"# 4.Feature Selection","f2ece730":"## NEW FEATURES(YEN\u0130 DE\u011e\u0130\u015eKENLER)","b8ddade6":"* **Hyperparameter Optimization**","28948828":"#### - LotConfig(Parsel yap\u0131land\u0131rma)","21b18a7f":"#### - OverallQual(Genel malzeme ve biti\u015f kalitesi)","101b8eb2":"* Garaj alan\u0131 b\u00fcy\u00fck olup fiyat\u0131 d\u00fc\u015f\u00fck olan evler var.\n* Hi\u00e7 garaj\u0131 olmayan evler var.","b788ca1a":"### - Fence (\u00c7it kalitesi)","cd6d7292":"# 5.Hyperparameter Optimization with Selected Features","2c0ffc05":"## \u00d6nemli N\u00fcmerik De\u011fi\u015fkenlerin \u0130ncelenmesi","89629b93":"* 3 \u015f\u00f6minesi olup fiyat\u0131 daha d\u00fc\u015f\u00fck olan evler var.","a05c9c0a":"* Di\u011fer \u015fehirlere bak\u0131ld\u0131\u011f\u0131nda en y\u00fcksek fiyatl\u0131 evler North Ridge de g\u00f6r\u00fcn\u00fcyor bu nedenle SalePrice i\u00e7in belirleyici.Burada ayk\u0131r\u0131l\u0131k olabilir.Ayk\u0131r\u0131l\u0131ktan etkilenmi\u015f olabilir.\n### North Ridge de fiyatlar\u0131n y\u00fcksek olmas\u0131n\u0131n sebebi California State \u00dcniversitesinin bu il\u00e7ede olmas\u0131 olabilir,yani belki de ayk\u0131r\u0131l\u0131k de\u011fildir.","3ca38afd":"#### - Neighborhood (Ames \u015fehir s\u0131n\u0131rlar\u0131 i\u00e7indeki fiziksel konum)","57c1fef7":"* Ara\u00e7 kapasitesi fazla olanlar\u0131n ev fiyatlar\u0131n\u0131n y\u00fcksek olmas\u0131n\u0131 bekleriz.\n* Ama 3 ara\u00e7 kapasiteli garaj\u0131 olan evlerin fiyatlar\u0131 4 ara\u00e7 kapasiteli olanlardan daha fazla olmas\u0131 dikkat \u00e7ekiyor.\n* 4 ara\u00e7 kapasiteli garaj\u0131 olan evlerin fiyat\u0131 daha d\u00fc\u015f\u00fck g\u00f6r\u00fcn\u00fcyor.\n* 2 ara\u00e7 kapasiteli garaj\u0131 olan evlerin say\u0131s\u0131 daha fazla.","cd0da25e":"### FirePlaceQu: \u015e\u00f6mine kalitesi\n* Ex: Excellent-Exceptional masonry fireplace(ola\u011fan\u00fcst\u00fc duvar \u015f\u00f6minesi)\n* Gd: Good - masonry fireplace in main level(ana seviyede)\n* TA: Average \/ Typical- Prefabricated Fireplace in main living area or Masonry Fireplace in      basement(Prefabrik \u015f\u00f6mine ya da bodurm kat\u0131nda \u015f\u00f6mine)\n* Fa: Fair- Prefabricated Fireplace in basement(bodrum prefabrik \u015f\u00f6mine)\n* Po: Poor- Ben Franklin Stove\n* NA: No fireplace","b01bafb0":"#### - BsmtQual(Bodrum Y\u00fcksekli\u011fi)","63f65c68":"## \u00d6nemli Kategorik De\u011fi\u015fkenlerin \u0130ncelenmesi","eb8ec0b7":"#### - ExterQual(D\u0131\u015f malzeme kalitesi)","62106958":"#### KitchenQual(Mutfak kalitesi)","9a3cec6c":"## Feature Engineering","f24b560f":"* 1.kat metrekare alan\u0131 b\u00fcy\u00fck olup fiyat\u0131 d\u00fc\u015f\u00fck olan evler var.Di\u011fer de\u011fi\u015fkenlerle incelenmeli.","9485c414":"### BsmtQual: Bodrum y\u00fcksekli\u011fi\n* Ex: Excellent (100+inches)\n* Gd: Good (90-99)\n* TA: Average \/ Typical (80-89)\n* Fa: Fair (70-79)\n* Po: Poor (<70)\n* NA: No basement","8199c81b":"* Metrekaresi y\u00fcksek oldu\u011fu halde(4000-5000) fiyat\u0131 d\u00fc\u015f\u00fck olan iki g\u00f6zlem var,ayk\u0131r\u0131 olabilir.\n* GrLivArea ile SalePrice aras\u0131nda do\u011frusal ili\u015fki var gibi g\u00f6r\u00fcn\u00fcyor.\n* Evlerin oturma alan\u0131 genelde 1000 ile 2500 metrekare aras\u0131nda yo\u011funluk g\u00f6stermektedir.","ff25a073":"#### - GarageCars(Garaj\u0131n araba kapasitesi)","e4f47f67":"# Sonu\u00e7lar\u0131n Y\u00fcklenmesi","7cbbf346":"# One-Hot Encoder","f2a5523c":"### - LandSlope(M\u00fclk\u00fcn e\u011fimi)","e36b979a":"### Neighborhood: Ames \u015fehir s\u0131n\u0131rlar\u0131 i\u00e7indeki fiziksel konumlar\u0131\n* Neighborhood_NoRidge: Northridge","b9547276":"# RARE ENCODING","8b2c568c":"# OUTLIERS(Ayk\u0131r\u0131 de\u011ferler)"}}