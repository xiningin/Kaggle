{"cell_type":{"71449f52":"code","2d9b0542":"code","e94d6819":"code","7c3d3ea5":"code","5bd6ac8a":"code","baca9ca7":"code","2a009205":"code","24cf027f":"code","5261fc8a":"code","59b39b8b":"code","f121e1dc":"code","0762ec69":"code","80357154":"code","de0d48ba":"code","1c9d9736":"code","881816d5":"markdown","e09b0ae2":"markdown","a1041edb":"markdown","d33483f8":"markdown","e67792d0":"markdown","99cdbc36":"markdown","340ea68c":"markdown","ca32ef9e":"markdown","75a20893":"markdown","20aa560f":"markdown","cfe119fa":"markdown","d8ce47ac":"markdown"},"source":{"71449f52":"import numpy as np\nimport pandas as pd","2d9b0542":"train = pd.read_csv(\"..\/input\/train.csv\")","e94d6819":"X_train_org = np.array(train.drop(['label'], axis=1)).reshape((-1, 28, 28, 1))","7c3d3ea5":"from keras.utils.np_utils import to_categorical\ny_train_org = train.label\ny_train_org = to_categorical(y_train_org, num_classes=10)","5bd6ac8a":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_train_org, y_train_org, test_size = 0.01)","baca9ca7":"import matplotlib.pyplot as plt\nplt.imshow(X_train_org[0,:,:,0])","2a009205":"from keras import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Dropout, BatchNormalization, Flatten\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=64, kernel_size=(5, 5), strides=(1, 1), padding='same', \\\n                 input_shape=(28, 28, 1), name='conv2d_1'))\n\nmodel.add(MaxPool2D(pool_size=(2, 2), padding='same', name='maxpool_1'))\n\nmodel.add(Conv2D(filters=128, kernel_size=(5, 5), strides=(1, 1), padding='same', name='conv2d_2'))\n\nmodel.add(MaxPool2D(pool_size=(2, 2), padding='same', name='maxpool_2'))\n\nmodel.add(Flatten(name='flatten_1'))\n\nmodel.add(Dense(256, activation='relu', name='dense_1'))\nmodel.add(Dropout(0.4, name='dropout_1'))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(10, activation='softmax', name='dense_2'))","24cf027f":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","5261fc8a":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n        rescale=1\/255, # dividing all pixel value by 255, to make sure our input value is in (0,1)\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n)","59b39b8b":"batch_size = 64\ndata_flow = datagen.flow(x=X_train, y=y_train, batch_size=batch_size)\nhistory = model.fit_generator(data_flow, steps_per_epoch=len(X_train_org) \/\/ batch_size, \\\n                              epochs=10, validation_data=(X_val, y_val))","f121e1dc":"X_test = np.array(pd.read_csv(\"..\/input\/test.csv\")).reshape((-1, 28, 28, 1))\n# When predicting, remember to divide test image pixel value by 255, too.\nX_test = X_test \/ 255","0762ec69":"y_test = model.predict(X_test, verbose=1)","80357154":"y_test = np.argmax(y_test, axis=-1)","de0d48ba":"y_test = pd.DataFrame(y_test, index=range(1, len(y_test)+1), columns=['Label'])","1c9d9736":"y_test.to_csv(\"submission.csv\", index_label='ImageId')","881816d5":"## Building CNN model with keras","e09b0ae2":"Now take the `label` column as y, then convert the integer label to one-hot representation using `to_categorical`.","a1041edb":"Since we're going to use `ImageDataGenerator` to generate augmented image data on the fly, we have to make self-defined validation set, instead of using `modoel.fit(validation_split=...)`.","d33483f8":"Drop the `label` column first, then reshape the flattened array. \n\nThe image size is [28, 28], with only 1 channel. We don't need to know the exact number of training examples, just leave the first dimension to -1.","e67792d0":"Convert the one hot representation back to integer representation.","99cdbc36":"## Data preparation","340ea68c":"Many thanks to **Yassine Ghouzam**: [Introduction to CNN Keras ](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/comments)\n\nThere is a lot to discover...\n","ca32ef9e":"Fit the model.","75a20893":"Use `ImageDataGenerator` to generate augmented image data on the fly. ","20aa560f":"Submission.","cfe119fa":"Have a look at the data:","d8ce47ac":"## Predicting & Submission"}}