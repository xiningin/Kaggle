{"cell_type":{"39cb7411":"code","fc75ef58":"code","f98e1f2d":"code","5d93eed8":"code","ddea5b44":"code","5665014e":"code","f3bd4f4b":"code","49cc5baa":"code","8ff8778d":"code","7b6ba60d":"code","3ae6bcc3":"code","6a6bbb5b":"code","1d55b8f4":"code","70520f69":"code","41c35848":"code","d07d7af8":"code","422a97b3":"code","a457b3c8":"code","94954aad":"code","8771d98d":"code","56f3b27d":"code","be9933c5":"code","7f41d08a":"code","621d94d7":"code","34f0e835":"code","cd1cc2a1":"code","24e7405f":"code","ce7181ad":"code","0dce4535":"markdown"},"source":{"39cb7411":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\n# For reading stock data from yahoo\nfrom pandas_datareader.data import DataReader\n\n# For time stamps\nfrom datetime import datetime","fc75ef58":"# The tech stocks we'll use for this analysis\ntech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\n\n# Set up End and Start times for data grab\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\n\n\n#For loop for grabing yahoo finance data and setting as a dataframe\nfor stock in tech_list:   \n    # Set DataFrame as the Stock Ticker\n    globals()[stock] = DataReader(stock, 'yahoo', start, end)","f98e1f2d":"company_list = [AAPL, GOOG, MSFT, AMZN]\ncompany_name = [\"APPLE\", \"GOOGLE\", \"MICROSOFT\", \"AMAZON\"]\n\nfor company, com_name in zip(company_list, company_name):\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis=0)\ndf.tail(10)\n","5d93eed8":"AAPL.describe()","ddea5b44":"GOOG.describe()","5665014e":"MSFT.describe()","f3bd4f4b":"AMZN.describe()","49cc5baa":"plt.figure(figsize=(20, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Adj Close'].plot(color='r')\n    plt.ylabel('Adj Close')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","8ff8778d":"# Now let's plot the total volume of stock being traded each day\nplt.figure(figsize=(20, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Volume'].plot(color='g')\n    plt.ylabel('Volume')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","7b6ba60d":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()\ndf.groupby(\"company_name\").hist(figsize=(20, 10));","3ae6bcc3":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(20)\n\nAAPL[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('APPLE')\n\nGOOG[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('GOOGLE')\n\nMSFT[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('MICROSOFT')\n\nAMZN[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","6a6bbb5b":"# We'll use pct_change to find the percent change for each day\nfor company in company_list:\n    company['Daily Return'] = company['Adj Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(20)\n\nAAPL['Daily Return'].plot(ax=axes[0,0], legend=True,  marker='o',color='b')\naxes[0,0].set_title('APPLE')\n\nGOOG['Daily Return'].plot(ax=axes[0,1], legend=True,  marker='o',color='g')\naxes[0,1].set_title('GOOGLE')\n\nMSFT['Daily Return'].plot(ax=axes[1,0], legend=True, marker='o',color='r')\naxes[1,0].set_title('MICROSOFT')\n\nAMZN['Daily Return'].plot(ax=axes[1,1], legend=True,  marker='o',color='y')\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","1d55b8f4":"closing_df = DataReader(tech_list, 'yahoo', start, end)['Adj Close']\nclosing_df.head() ","70520f69":"tech_rets = closing_df.pct_change()\ntech_rets.head()\n","41c35848":"sns.pairplot(tech_rets, kind='reg')","d07d7af8":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturn_fig = sns.PairGrid(tech_rets.dropna())\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturn_fig.map_upper(plt.scatter, color='purple')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) \n# or the color map (BluePurple)\nreturn_fig.map_lower(sns.kdeplot, cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturn_fig.map_diag(plt.hist, bins=30)","422a97b3":"sns.heatmap(tech_rets.corr(), annot=True, cmap='gist_heat_r')","a457b3c8":"sns.heatmap(closing_df.corr(), annot=True, cmap='inferno')","94954aad":"rets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', \n                 arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3,rad=-0.3'))","8771d98d":"#Get the stock quote\ndf = DataReader('AAPL', data_source='yahoo', start='2012-01-01', end=datetime.now())\n#Show teh data\ndf","56f3b27d":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","be9933c5":"#Create a new dataframe with only the 'Close column\ndata = df.filter(['Close'])\n#Convert the dataframe to a numpy array\ndataset = data.values\n#Get the number of rows to train the model on\ntraining_data_len = int(np.ceil( len(dataset) * .8 ))\n\ntraining_data_len","7f41d08a":"#Scale the data\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","621d94d7":"#Create the training data set\n#Create the scaled training data set\ntrain_data = scaled_data[0:int(training_data_len), :]\n#Split the data into x_train and y_train data sets\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()\n        \n# Convert the x_train and y_train to numpy arrays \nx_train, y_train = np.array(x_train), np.array(y_train)\n\n#Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n# x_train.shape","34f0e835":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n#Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences= False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","cd1cc2a1":"#Create the testing data set\n#Create a new array containing scaled values from index 1543 to 2002 \ntest_data = scaled_data[training_data_len - 60: , :]\n#Create the data sets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \n# Convert the data to a numpy array\nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","24e7405f":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","ce7181ad":"valid","0dce4535":"## Conclusion :\nPredicted results resemble actual values to a good extent. Hence the model is successfully executed with near accurate expectancy."}}