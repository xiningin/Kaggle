{"cell_type":{"2e48cfbb":"code","c6bc091d":"code","9212305b":"code","941894df":"code","547b9865":"code","594bc317":"code","851e200c":"code","0a3837e1":"code","4529c5be":"code","fb1a56eb":"code","cf6ef866":"code","ec935a7e":"code","2f13c438":"markdown","07d33943":"markdown","7d95f9b4":"markdown","ddecaad8":"markdown","7994add0":"markdown","82f4a91b":"markdown","e1a91bc6":"markdown","6af545d0":"markdown"},"source":{"2e48cfbb":"#\u00a0Some imports, as usual.\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KernelDensity\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt","c6bc091d":"train_df = pd.read_csv('..\/input\/train.csv')","9212305b":"fig, ax = plt.subplots(figsize=(12, 8))\ntrain_df['var_81'].plot(kind='hist', bins=100, ax=ax)","941894df":"var_81_a = train_df['var_81'].values","547b9865":"kde = KernelDensity()\nkde.fit(var_81_a[:, None])","594bc317":"x_grid = np.linspace(var_81_a.min(), var_81_a.max(), 1000)\npdf = np.exp(kde.score_samples(x_grid[:, None]))","851e200c":"fig, ax = plt.subplots(figsize=(12, 8))\nax.plot(x_grid, pdf, linewidth=3, alpha=0.5, label='bw=%.2f' % kde.bandwidth)\nax.hist(var_81_a, 100, fc='gray', histtype='stepfilled', alpha=0.3, density=True)\nax.legend(loc='upper left')\nax.set_xlim(var_81_a.min(), var_81_a.max());","0a3837e1":"def fit_kde_and_plot(bandwidth):\n    \"\"\" Fit a kernel density estimator and plot the resulting graph. \"\"\"\n    kde = KernelDensity(bandwidth=bandwidth)\n    kde.fit(var_81_a[:, None])\n    x_grid = np.linspace(var_81_a.min(), var_81_a.max(), 1000)\n    pdf = np.exp(kde.score_samples(x_grid[:, None]))\n\n    fig, ax = plt.subplots(1, 1, figsize=(12, 8))\n    ax.plot(x_grid, pdf, linewidth=3, alpha=0.5, label='bw=%.2f' % kde.bandwidth)\n    ax.hist(var_81_a, 100, fc='gray', histtype='stepfilled', alpha=0.3, density=True)\n    ax.legend(loc='upper left')\n    ax.set_xlim(var_81_a.min(), var_81_a.max())\n    return ax","4529c5be":"fit_kde_and_plot(0.01)","fb1a56eb":"fit_kde_and_plot(0.1)","cf6ef866":"fit_kde_and_plot(0.5)","ec935a7e":"#\u00a0TODO: Investigate why this takse so much time to run...\n#\u00a0grid = GridSearchCV(KernelDensity(),\n#\u00a0                    {'bandwidth': [0.1, 0.2, 0.3, 0.4, 1.0]},\n#\u00a0                    cv=2, n_jobs=-1)\n#\u00a0grid.fit(var_81_a[:, None])\n#\u00a0print(grid.best_params_)","2f13c438":"Let's try this approach on the `var_81` feature.","07d33943":"In this short notebook, I will explore a [nonparametric statistics](https:\/\/en.wikipedia.org\/wiki\/Nonparametric_statistics) method \nfor fitting densities: [**kernel density estimation**](https:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation). \nNotice that this notebook is (mainly) inspired from this great [post](https:\/\/jakevdp.github.io\/blog\/2013\/12\/01\/kernel-density-estimation\/. ). \n\nLet's dive in!","7d95f9b4":"#\u00a0Fitting","ddecaad8":"#\u00a0Different bandwidths","7994add0":"#\u00a0Grid searching the best bandwidth","82f4a91b":"=> WIP: The grid search runs for a very long time, maybe I am doing something wrong? Any help is appreciated!","e1a91bc6":"=> A smaller bandwidth results in a more varying estimator and \na bigger value results in a smoother one. \n\nHave you spotted the [**bias-variance**](https:\/\/en.wikipedia.org\/wiki\/Bias%E2%80%93variance_tradeoff) trade-off already? ;)\n\nLet's try [**cross-validation**](https:\/\/en.wikipedia.org\/wiki\/Cross-validation_(statistics)) to find the best one.","6af545d0":"=> The fitted curve doesn't seem to follow the histogram. Could we do better? \n\nYes, we can. There is a hyperparameter that one can vary: the kernel bandwidth. \nLet's see how the fitted kde changes when this bandwidth changes. "}}