{"cell_type":{"6a564762":"code","38517b8a":"code","1bac6b21":"code","abc1ecbb":"code","d7593d2a":"code","a5cfbad6":"code","888b6fab":"code","29ab14a0":"code","9c82991f":"code","f19995dd":"code","a2f2e9cb":"code","ea497229":"code","e8c45e18":"markdown","6264ede2":"markdown","a36daa11":"markdown","211a8393":"markdown","b0d4bd9f":"markdown","a57e327a":"markdown","94295b89":"markdown","669a5ab9":"markdown","5cf3ef1c":"markdown"},"source":{"6a564762":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","38517b8a":"rest_country = pd.read_excel(\"..\/input\/Country-Code.xlsx\")\n\n\nrest_country.columns=['country code','country']\n\nprint (rest_country.head())\n\n\nrest_data=pd.read_csv('..\/input\/zomato.csv',encoding='latin-1') #\u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e  \u0442\u043e \u0431\u044b\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0447\u0442\u0435\u043d\u0438\u044f utf-8\n\nrest_data.columns=[x.lower() for x in rest_data.columns]\n\nprint (rest_data.head())","1bac6b21":"rest_all_data = pd.merge(rest_data,rest_country,on='country code',how='inner')\npd.merge(rest_data,rest_country,on='country code',how='inner')","abc1ecbb":"\n\n\n# rest_all_data.shape\n# rest_all_data['country'].unique()\n# print(rest_all_data['country'].value_counts())\n\n\n# rest_all_data['country'].value_counts().plot(kind='bar',title='Total Restaurants On Zomato In Countries'\n#                                              ,figsize=(20,10),fontsize=20)\n\nlabels = list(rest_all_data['country'].value_counts().index)\nvalues = list(rest_all_data['country'].value_counts().values)\n\nfig = {\n    \"data\":[\n        {\n            \"labels\" : labels,\n            \"values\" : values,\n            \"hoverinfo\" : 'label+percent',\n            \"domain\": {\"x\": [0, .9]},\n            \"hole\" : 0.6,\n            \"type\" : \"pie\",\n            \"rotation\":120,\n        },\n    ],\n    \"layout\": {\n        \"title\" : \"Zomato's Presence around the World\",\n        \"annotations\": [\n            {\n                \"font\": {\"size\":20},\n                \"showarrow\": True,\n                \"text\": \"Countries\",\n                \"x\":0.2,\n                \"y\":0.9,\n            },\n        ]\n    }\n}\n\niplot(fig)","d7593d2a":"# print(rest_all_data['city'].value_counts())\n# rest_all_data['city'].value_counts().plot(kind='bar',title='Total Restaurants On Zomato In Cities',figsize=(20,10),fontsize=20)\nlabels = list(rest_all_data['city'].value_counts().index)\nvalues = list(rest_all_data['city'].value_counts().values)\n\nfig = {\n    \"data\":[\n        {\n            \"labels\" : labels,\n            \"values\" : values,\n            \"hoverinfo\" : 'label+percent',\n            \"domain\": {\"x\": [0, .9]},\n            \"hole\" : 0.6,\n            \"type\" : \"pie\",\n            \"rotation\":50,\n        },\n    ],\n    \"layout\": {\n        \"title\" : \"Zomato's Presence around the World(city)\",\n        \"annotations\": [\n            {\n                \"font\": {\"size\":20},\n                \"showarrow\": True,\n                \"text\": \"\u0413\u043e\u0440\u043e\u0434\u0430\",\n                \"x\":0.2,\n                \"y\":0.9,\n            },\n        ]\n    }\n}\n\niplot(fig)","a5cfbad6":"# sns.countplot(x = \"aggregate rating\", hue = \"cuisines\", data = rest_all_data) \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 \u0438\u0437-\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","888b6fab":"rest_all_data['cuisines'].unique()","29ab14a0":"Cuisine_data =rest_all_data.groupby(['cuisines'], as_index=False)['restaurant id'].count()\nCuisine_data.columns = ['cuisines', 'Number of Resturants']\nTop15= (Cuisine_data.sort_values(['Number of Resturants'],ascending=False)).head(15)\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nsns.barplot(Top15['cuisines'], Top15['Number of Resturants'])\nplt.xlabel('cuisines', fontsize=20)\nplt.ylabel('Number of Resturants', fontsize=20)\nplt.title('Top 15 cuisines on Zomato', fontsize=30)\nplt.xticks(rotation = 90)\nplt.show()\n\n\ncorrelation = rest_all_data.groupby('restaurant name',as_index=False)[['aggregate rating','price range']].mean().round(2).sort_values(ascending=False,by='aggregate rating')\nweight = correlation['aggregate rating']\nheight = correlation['price range']\nplt.figure(figsize=(10,8))\nplt.scatter(weight,height,c='g',marker='o')\nplt.xlabel('Average Rating')\nplt.ylabel('Price range')\nplt.title('Average Rating Vs Price range')\nplt.show()","9c82991f":"sns.countplot(x = \"aggregate rating\", hue = \"has table booking\", data = rest_all_data)","f19995dd":"#\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u2022 Aggregate Rating: Average rating out of 5\n# \u2022 Rating color: depending upon the average rating color\n# \u2022 Rating text: text on the basis of rating of rating\n# \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433.\n# \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u044b \u043d\u0435 \u0442\u0435\u0440\u044f\u0435\u043c \u0433\u0430\u043c\u043c\u0443 \u0446\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f 'rating color'\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\nimport plotly.graph_objs as go\n\n\nplot_data = [dict(\n    type='scattergeo',\n    lon = rest_all_data['longitude'],\n    lat = rest_all_data['latitude'],\n    text = rest_all_data['restaurant name'],\n    mode = 'markers',\n    marker = dict(\n   cmin = 0,\n    color = rest_all_data['aggregate rating'],\n    cmax = rest_all_data['aggregate rating'].max(),\n    colorbar=dict(\n                title=\"Rating\"\n            )\n    )\n    \n)]\nlayout = dict(\n    title = 'Dependence on rating color',\n    hovermode='closest',\n    geo = dict(showframe=False, countrywidth=1, showcountries=True,\n               showcoastlines=True, projection=dict(type='mercator'))\n)\nfig = go.Figure(data=plot_data, layout=layout)\niplot(fig)","a2f2e9cb":"grouped_a=rest_all_data[rest_all_data['country code']==1].groupby('locality')\nlocality_dict={}\n\nfor key,item in grouped_a:\n\n    total_votes=item['votes'].sum()\n    w=(item['votes']*item['aggregate rating']).sum()\n    ans=w\/total_votes\n    locality_dict[key]=ans.round(3)\ntop_values=sorted(locality_dict,key=locality_dict.get,reverse=True)[0:10]\nprint(\"----------------------------------------------------\")\nprint(\"  Weighted User Rating for Localities in India\")\nprint(\"----------------------------------------------------\")\nfor i in top_values:\n    print(\"| {:37s} | {:3f} |\".format(i,locality_dict[i]))\n    print(\"----------------------------------------------------\")\n# Gouping data of All localities\ngrouped=rest_all_data.groupby('locality')\nlocality_dict={}\nprint()\nfor key,item in grouped:\n    total_votes=item['votes'].sum()\n    w=(item['votes']*item['aggregate rating']).sum()\n    ans=w\/total_votes\n    locality_dict[key]=ans.round(3)\ntop_values=sorted(locality_dict,key=locality_dict.get,reverse=True)[0:10]\nprint(\"---------------------------------------------------------\")\nprint(\"  Weighted User Rating for Localities All over the world\")\nprint(\"---------------------------------------------------------\")\nfor i in top_values:\n    print(\"| {:42s} | {:3f} |\".format(i,locality_dict[i]))\n    print(\"---------------------------------------------------------\")","ea497229":"# Handling Duplicate values of Restaurant Names\nrest_all_data['restaurant name']=rest_all_data['restaurant name'].replace(\"Giani's\",\"Giani\")\n# Dropping NaN values\nrest_all_data['restaurant name'].dropna(inplace=True)\nrestaurant_names=rest_all_data['restaurant name']\nr_dict={}\n# Creating the no. of outlets dictionary\nfor i in restaurant_names:\n    if i in r_dict:\n        r_dict[i]+=1\n    else:\n        r_dict[i]=1\nplt.figure(figsize=(10,8))\n# Sorting the values on the basis of no of outlets\noutlets_sorted=sorted(r_dict,key=r_dict.get,reverse=True)[0:15]\nprint(\"-----------------------------------------------\")\nprint(\"  Restaurants Having Highest Number Of Outlets\")\nprint(\"-----------------------------------------------\")\nprint(\"| {:20s} | {:14s} |\".format('Restaurant Name','No. Of Outlets'))\nprint(\"-----------------------------------------\")\nfor i in outlets_sorted:\n    print(\"| {:20s} | {:10d}     |\".format(i,r_dict[i]))\n    print(\"-----------------------------------------\")\n    # Plotting the graph\n    plt.barh(width=r_dict[i],y=i,height=0.7)\n    plt.text(y=i,x=r_dict[i]+1,s=r_dict[i])\nplt.title('Top 15 Restaurants having highest no. of outlets')\n\nplt.xlabel('No Of Outlets')\nplt.ylabel(\"Restaurant Names\")\nplt.show()\n","e8c45e18":"\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \u0426\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","6264ede2":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.","a36daa11":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u041e\u043d\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 input.","211a8393":"\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0441\u0432\u044f\u0437\u0438 \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430? \u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435 \u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.","b0d4bd9f":"\u041a\u0430\u043a\u0438\u0435 \u0435\u0449\u0451 \u0438\u043d\u0441\u0430\u0439\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445? \u0422\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435.","a57e327a":"\u041a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043d\u0438 \u043f\u043e\u0434\u0430\u044e\u0442 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445? \u041a\u0430\u043a \u0441\u0432\u044f\u0437\u0430\u043d \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c? \u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435 \u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.","94295b89":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **Rating color** (\u0438\u043b\u0438 **Rating text**) \u0432 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441 \u0433\u0435\u043e\u043b\u043e\u043a\u0430\u0446\u0438\u0435\u0439 (**Longitude**, **Latitude**). \u041a\u0430\u043a\u043e\u0439 \u0432\u044b\u0432\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c?","669a5ab9":"\u0415\u0441\u0442\u044c \u043b\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0438\u043a\u043e\u0432 \u0438 \u0431\u0435\u0437 \u043d\u0435\u0433\u043e? ","5cf3ef1c":"\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b? \u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0442\u043e\u043f-5 \u0441\u0442\u0440\u0430\u043d. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c."}}