{"cell_type":{"3b0b2608":"code","151f4466":"code","5705c1fb":"code","609e6665":"code","ed376551":"code","e338b86d":"code","92d79809":"code","f0f8bd07":"code","f0d07d46":"code","513ef688":"code","700f7228":"code","ac3e9bf8":"code","4c635a48":"code","0e7fbcef":"code","c85454ab":"code","922e8145":"code","e99d5294":"code","7df49416":"code","b47b5f3a":"code","ca7db884":"code","97e59753":"code","8bbb8f67":"code","998c6294":"code","99d7f303":"code","6ca8f6b3":"code","6a44f068":"code","ecfc4ea2":"code","1ce99dc0":"code","001c750d":"code","c5a94df9":"code","db036340":"code","c9193e25":"code","5f44142c":"code","d0e0f119":"code","e13da312":"code","d55c7ce1":"code","4ab31473":"code","3a873024":"code","f53932f7":"code","b9a28ecc":"code","27783fd1":"code","cc549b71":"code","64824ae6":"code","bbafbb57":"code","a0b99085":"code","7fcb05b6":"code","3400b94b":"code","b05bc81e":"code","ef92d0b6":"code","c38c4987":"code","51f3787f":"code","6b5d93e2":"code","dddccbdf":"code","bf47fe0d":"code","b7191989":"code","d0246ab6":"code","fb5679f0":"code","663633ce":"code","e8f9d2c8":"markdown","467272c8":"markdown","d0e4ce7a":"markdown","ea0b939b":"markdown","33d58deb":"markdown","fead52ff":"markdown","5b700b2b":"markdown","fe1c1007":"markdown","c238d940":"markdown","3f232326":"markdown","2ab237d0":"markdown","86a11162":"markdown","8fa29860":"markdown","7887d9ec":"markdown","f7ea29cc":"markdown","271103ef":"markdown","309bf737":"markdown","5b91489e":"markdown","45fc442a":"markdown","7d4cd059":"markdown","9c0245bb":"markdown","3cd953a4":"markdown","aa32885f":"markdown","3e99690b":"markdown","c35c7987":"markdown","7a6c0359":"markdown","a2699069":"markdown","dfadb42c":"markdown","a6010210":"markdown","6e200e61":"markdown","4cfba898":"markdown","f37a01da":"markdown","7f891832":"markdown","75af756f":"markdown","ae88ce18":"markdown","e3f92021":"markdown"},"source":{"3b0b2608":"# Import packages\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings(\"ignore\")\n\nsns.set(style=\"white\", font_scale=1.2)\n","151f4466":"# Load dataframes\n\ndf_train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\ndf_test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')","5705c1fb":"df_train.head()","609e6665":"df_test.head()","ed376551":"df_train.describe()","e338b86d":"df_train.describe(include='O')","92d79809":"print('df_train shape:', df_train.shape)\nprint('df_test shape:', df_test.shape)","f0f8bd07":"# Function to check missing values in each dataframe\n\ndef check_missing_values(df, df_name):\n    print(f'{df_name} - Missing values:')\n    print('-'*30)\n    columns = df.columns\n\n    for column in columns:\n        count_missing_values = df[column].isnull().sum()\n        missing_values = (count_missing_values \/ len(df[column])) * 100\n    \n        if missing_values !=0:\n            print(f'{column} --> {count_missing_values} values | {missing_values:.2f}%')","f0d07d46":"check_missing_values(df_train, 'DF TRAIN')","513ef688":"check_missing_values(df_test, 'DF TEST')","700f7228":"plt.figure(figsize=(20,5))\nsns.heatmap(df_train.isnull(), cmap='viridis', cbar=False, yticklabels=False)\nplt.title('MISSING VALUES')","ac3e9bf8":"na_means_donthave = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType',\n                 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature']","4c635a48":"# Function to drop columns with a threshold amount of missing values if that column is not an exception\n\ncolumns_to_drop = []\ndef drop_columns_with_n_missing_values(df, threshold, exceptions):\n    '''\n    df_list: list of dataframes\n    threshold: percentage of missing values threshold\n    exceptions: don't delete if it's from that column\n    '''\n    \n    for col in df.columns:\n        if col in exceptions:\n            continue\n        else:\n            if ((df[col].isnull().sum() \/ len(df[col]))*100  >= threshold):\n                columns_to_drop.append(col)            ","0e7fbcef":"drop_columns_with_n_missing_values(df_train, 40, na_means_donthave)","c85454ab":"print('Columns to drop:', columns_to_drop)","922e8145":"df_train.drop(columns_to_drop, axis=1, inplace=True)\ndf_test.drop(columns_to_drop, axis=1, inplace=True)","e99d5294":"#check_missing_values(df_train, 'DF TRAIN')","7df49416":"#check_missing_values(df_test, 'DF TEST')","b47b5f3a":"categoric_var = df_train.select_dtypes(include = [\"object\"]).columns\nnumeric_var = df_train.select_dtypes(exclude = [\"object\"]).columns\nnumeric_var = numeric_var.drop(\"SalePrice\")\n\nprint(\"Numeric variables : \" + str(len(numeric_var)))\nprint(\"Categoric variables : \" + str(len(categoric_var)))","ca7db884":"corr_mat = df_train.corr()\n\ncorr_mat['SalePrice'].sort_values(ascending=False)","97e59753":"plt.figure(figsize=(20,10))\nsns.heatmap(corr_mat, linecolor='white', linewidths=0.1)","8bbb8f67":"top_corr_mat = corr_mat.index[abs(corr_mat[\"SalePrice\"])>0.5]\n\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train[top_corr_mat].corr(), annot=True, cmap='coolwarm')","998c6294":"top_corr_features = list(top_corr_mat)","99d7f303":"sns.pairplot(df_train[top_corr_features])","6ca8f6b3":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='YearBuilt', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='YearRemodAdd', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","6a44f068":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='TotalBsmtSF', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='1stFlrSF', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","ecfc4ea2":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.regplot(x='GrLivArea', y='SalePrice', data=df_train, ax=axes[0])\nsns.regplot(x='GarageArea', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","1ce99dc0":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.barplot(x='OverallQual', y='SalePrice', data=df_train, ax=axes[0])\nsns.barplot(x='FullBath', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","001c750d":"fig, axes = plt.subplots(1,2, figsize=(12,4), sharey=True)\n\nsns.barplot(x='TotRmsAbvGrd', y='SalePrice', data=df_train, ax=axes[0])\nsns.barplot(x='GarageCars', y='SalePrice', data=df_train, ax=axes[1])\n\nplt.tight_layout()","c5a94df9":"# Train DF\nfor col in na_means_donthave:\n    df_train[col].fillna('Not', inplace=True)","db036340":"# Test DF\nfor col in na_means_donthave:\n    df_test[col].fillna('Not', inplace=True)","c9193e25":"#check_missing_values(df_train, 'DF TRAIN')","5f44142c":"#check_missing_values(df_test, 'DF TEST')","d0e0f119":"df_train[categoric_var].head()","e13da312":"for col in categoric_var:\n    df_train[col].fillna(df_train[col].mode()[0], inplace=True)","d55c7ce1":"for col in categoric_var:\n    df_test[col].fillna(df_test[col].mode()[0], inplace=True)","4ab31473":"df_train[numeric_var].head()","3a873024":"for col in numeric_var:\n    df_train[col].fillna(df_train[col].median(), inplace=True)","f53932f7":"for col in numeric_var:\n    df_test[col].fillna(df_test[col].median(), inplace=True)","b9a28ecc":"check_missing_values(df_train, 'DF TRAIN')","27783fd1":"check_missing_values(df_test, 'DF TEST')","cc549b71":"df_full = pd.concat((df_train, df_test), axis=0)","64824ae6":"df_full = pd.get_dummies(df_full, drop_first=True)","bbafbb57":"df_full['SalePrice']","a0b99085":"df_train = df_full[df_full['SalePrice'].isnull() == False]","7fcb05b6":"df_test = df_full[df_full['SalePrice'].isnull() == True]\n\ndf_test.drop('SalePrice', axis=1, inplace=True)","3400b94b":"print('df_train shape:', df_train.shape)\nprint('df_test shape:', df_test.shape)","b05bc81e":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import mean_squared_error","ef92d0b6":"# dictionary to append the RMSE results of each model\nresults = {}","c38c4987":"X = df_train.drop('SalePrice', axis=1)\ny = df_train['SalePrice']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","51f3787f":"reg = LinearRegression()\n\nreg.fit(X_train, y_train)\n\nreg_pred = reg.predict(X_test)","6b5d93e2":"reg_rmse = np.sqrt(mean_squared_error(y_test, reg_pred))\nprint('Linear Regression (simple) RMSE:', reg_rmse)\n\nresults['Linear Regression (simple)'] = reg_rmse","dddccbdf":"rf = RandomForestRegressor(random_state=1)\n\nrf.fit(X_train, y_train)\n\nrf_pred = rf.predict(X_test)","bf47fe0d":"rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))\nprint('Random Forest RMSE:', rf_rmse)\n\nresults['Random Forest'] = rf_rmse","b7191989":"xgb = XGBRegressor(objective='reg:squarederror')\n\nxgb.fit(X_train, y_train)\n\nxgb_pred = xgb.predict(X_test)","d0246ab6":"xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_pred))\nprint('XGB RMSE:', xgb_rmse)\n\nresults['XGB'] = xgb_rmse","fb5679f0":"pd.options.display.float_format = '{:.4f}'.format\ndf_results = pd.DataFrame(results.items(), columns=['Algorithm', 'RMSE'])\n\ndf_results.sort_values('RMSE')","663633ce":"xgb.fit(X, y)\n\nxgb_pred = xgb.predict(df_test)\n\nsubmission_xgb = pd.DataFrame({'Id':df_test.index, 'SalePrice':xgb_pred})\n\nsubmission_xgb.to_csv('submission_xgb.csv', index=False)","e8f9d2c8":"### Import Libraries and Data","467272c8":"# Predicting House Prices","d0e4ce7a":"1. **Replace the null values with the median of each column**","ea0b939b":"**There are some features where 'NA' means: DON'T HAVE that feature.**\n\nThese are: BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature","33d58deb":"### Fill NA missing values (simple)","fead52ff":"## Data Manipulation","5b700b2b":"#### Categorical data","fe1c1007":"This features are: BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature","c238d940":"### Drop columns with more than X% of missing values if not in exceptions","3f232326":"### Replace NA when it means 'Don't have this feature'","2ab237d0":"- Try and tune more models","86a11162":"### Numerical vs Categorical variables","8fa29860":"\u00a1I'll use that to check if the value on SalePrice is true or false, and then assign that rows to each dataframe!\n\nAnd then drop the column SalePrice from the df_test dataframe since it doesn't exist originally.","7887d9ec":"## Data Visualization","f7ea29cc":"### Random Forest","271103ef":"**Checking for missing values in both datasets**","309bf737":"## Results","5b91489e":"**Pair plot**","45fc442a":"#### Correlation Matrix","7d4cd059":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Introduction<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Import-Libraries-and-Data\" data-toc-modified-id=\"Import-Libraries-and-Data-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Import Libraries and Data<\/a><\/span><\/li><li><span><a href=\"#Check-dataframes\" data-toc-modified-id=\"Check-dataframes-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Check dataframes<\/a><\/span><\/li><li><span><a href=\"#Checking-missing-values\" data-toc-modified-id=\"Checking-missing-values-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Checking missing values<\/a><\/span><\/li><li><span><a href=\"#Drop-columns-with-more-than-X%-of-missing-values-if-not-in-exceptions\" data-toc-modified-id=\"Drop-columns-with-more-than-X%-of-missing-values-if-not-in-exceptions-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Drop columns with more than X% of missing values if not in exceptions<\/a><\/span><\/li><li><span><a href=\"#Numerical-vs-Categorical-variables\" data-toc-modified-id=\"Numerical-vs-Categorical-variables-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Numerical vs Categorical variables<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Visualization\" data-toc-modified-id=\"Data-Visualization-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Data Visualization<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Correlations\" data-toc-modified-id=\"Correlations-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Correlations<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Correlation-Matrix\" data-toc-modified-id=\"Correlation-Matrix-2.1.1\"><span class=\"toc-item-num\">2.1.1&nbsp;&nbsp;<\/span>Correlation Matrix<\/a><\/span><\/li><li><span><a href=\"#Top-features\" data-toc-modified-id=\"Top-features-2.1.2\"><span class=\"toc-item-num\">2.1.2&nbsp;&nbsp;<\/span>Top features<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Data-Manipulation\" data-toc-modified-id=\"Data-Manipulation-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Data Manipulation<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Replace-NA-when-it-means-'Don't-have-this-feature'\" data-toc-modified-id=\"Replace-NA-when-it-means-'Don't-have-this-feature'-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Replace NA when it means 'Don't have this feature'<\/a><\/span><\/li><li><span><a href=\"#Fill-NA-missing-values-(simple)\" data-toc-modified-id=\"Fill-NA-missing-values-(simple)-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Fill NA missing values (simple)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Categorical-data\" data-toc-modified-id=\"Categorical-data-3.2.1\"><span class=\"toc-item-num\">3.2.1&nbsp;&nbsp;<\/span>Categorical data<\/a><\/span><\/li><li><span><a href=\"#Numerical-Data\" data-toc-modified-id=\"Numerical-Data-3.2.2\"><span class=\"toc-item-num\">3.2.2&nbsp;&nbsp;<\/span>Numerical Data<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Encoding-features\" data-toc-modified-id=\"Encoding-features-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;<\/span>Encoding features<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Models\" data-toc-modified-id=\"Models-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Models<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Linear-Regresion-(simple)\" data-toc-modified-id=\"Linear-Regresion-(simple)-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Linear Regresion (simple)<\/a><\/span><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><\/li><li><span><a href=\"#XGBOOST\" data-toc-modified-id=\"XGBOOST-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>XGBOOST<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Results\" data-toc-modified-id=\"Results-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Results<\/a><\/span><\/li><li><span><a href=\"#Submissions\" data-toc-modified-id=\"Submissions-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Submissions<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#XGBOOST\" data-toc-modified-id=\"XGBOOST-6.2\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;<\/span>XGBOOST<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#To-do-list\" data-toc-modified-id=\"To-do-list-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>To do list<\/a><\/span><\/li><\/ul><\/div>","9c0245bb":"#### Top features","3cd953a4":"**Combine both dataframes to get dummies**, so we don't get inconsistent number of columns for each dataframes","aa32885f":"1. 1. **Replace the null values with the MODE of each column**","3e99690b":"### XGBOOST","c35c7987":"### Checking missing values","7a6c0359":"### XGBOOST","a2699069":"**Separate dataframes again**\n\nChecking SalePrice we can see that df_train has price values while df_test has NaN values","dfadb42c":"## Introduction","a6010210":"## To do list","6e200e61":"### Linear Regresion (simple)","4cfba898":"## Models","f37a01da":"#### Numerical Data","7f891832":"### Encoding features","75af756f":"## Submissions","ae88ce18":"### Correlations","e3f92021":"### Check dataframes"}}