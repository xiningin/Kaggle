{"cell_type":{"25e8f673":"code","1573c023":"code","065f08da":"code","3cadeb37":"code","bc3915e1":"code","35b44361":"code","7efe7f2b":"code","4e784da4":"markdown"},"source":{"25e8f673":"import pandas as pd\nimport sys\nimport numpy as np\nimport scipy as sp\nimport matplotlib.pyplot as plt\nfrom math import radians, cos, sin, asin, sqrt\nimport datetime\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\nsns.set(style=\"ticks\")\n%matplotlib inline\n\nhubway_data = pd.read_csv('..\/input\/hubway_trips.csv', low_memory=False)","1573c023":"year_to_age = lambda s:0 if 'N' in s else 2017- int(s)","065f08da":"fig, ax = plt.subplots(1,2, figsize = (15,6))\ngender_counts = np.unique(hubway_data['gender'].replace(np.nan, 'NaN', regex=True).values, return_counts=True)\ngender_counts\nax[0].bar(range(3), gender_counts[1], align='center', color=['black', 'green', 'teal'], alpha=0.5)\nax[0].set_xticks([0, 1, 2])\nax[0].set_xticklabels(['none', 'male', 'female', ' '])\nax[0].set_title('Users by Gender')\nage_col = 2017.0 - hubway_data['birth_date'].dropna().values\nage_counts = np.unique(age_col, return_counts=True)\nax[1].bar(age_counts[0], age_counts[1], align='center', width=0.4, alpha=0.6)\nax[1].axvline(x=np.mean(age_col), color='red', label='average age')\nax[1].axvline(x=np.percentile(age_col, 25), color='red', linestyle='--', label='lower quartile')\nax[1].axvline(x=np.percentile(age_col, 75), color='red', linestyle='--', label='upper quartile')\nax[1].set_xlim([1, 90])\nax[1].set_xlabel('Age')\nax[1].set_ylabel('Number of Checkouts')\nax[1].legend()\nax[1].set_title('Users by Age')\n\nplt.tight_layout()\nplt.show()","3cadeb37":"station_data = pd.read_csv('..\/input\/hubway_stations.csv', low_memory=False)[['id', 'lat', 'lng']]\nhubway_data_with_gps = hubway_data.join(station_data.set_index('id'), on='strt_statn')\ncheck_out_hours = hubway_data['start_date'].apply(lambda s: int(s[-8:-6]))\nfig, ax = plt.subplots(1, 1, figsize=(10, 5))\n\ncheck_out_counts = np.unique(check_out_hours, return_counts=True)\nax.bar(check_out_counts[0], check_out_counts[1], align='center', width=0.4, alpha=0.6)\nax.set_xlim([-1, 24])\nax.set_xticks(range(24))\nax.set_xlabel('Hour of Day')\nax.set_ylabel('Number of Checkouts')\nax.set_title('Time of Day vs Checkouts')\n\nplt.show()","bc3915e1":"def haversine(pt, lat2=42.355589, lon2=-71.060175):\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    lon1 = pt[0]\n    lat1 = pt[1]\n    \n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2)**2\n    c = 2 * asin(sqrt(a)) \n    r = 3956 # Radius of earth in miles\n    return c * r","35b44361":"station_counts = np.unique(hubway_data_with_gps['strt_statn'].dropna(), return_counts=True)\ncounts_df = pd.DataFrame({'id':station_counts[0], 'checkouts':station_counts[1]})\ncounts_df = counts_df.join(station_data.set_index('id'), on='id')\ncounts_df.head()\ncounts_df.loc[:, 'dist_to_center'] = list(map(haversine, counts_df[['lng', 'lat']].values))\ncounts_df.head()","7efe7f2b":"fig, ax = plt.subplots(1, 1, figsize=(10, 5))\n\nax.scatter(counts_df['dist_to_center'].values, counts_df['checkouts'].values)\n\nreg_line = LinearRegression()\nreg_line.fit(counts_df['dist_to_center'].values.reshape((len(counts_df['dist_to_center']), 1)), counts_df['checkouts'].values)\n\ndistances = np.linspace(counts_df['dist_to_center'].min(), counts_df['dist_to_center'].max(), 50)\n\nax.plot(distances, reg_line.predict(distances.reshape((len(distances), 1))), color='red', label='Regression Line')\n\nax.set_xlabel('Distance to City Center (Miles)')\nax.set_ylabel('Number of Checkouts')\nax.set_title('Distance to City Center vs Checkouts')\nax.legend()\n\nplt.show()","4e784da4":"**WHO ? **"}}