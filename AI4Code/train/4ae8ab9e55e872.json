{"cell_type":{"172efb54":"code","08a12f02":"code","fd451912":"code","00874da8":"code","f757f045":"code","2f82d7fb":"code","99cbed69":"code","f17c336a":"code","35231c61":"code","cce1e41f":"code","3b80d9cf":"code","6196d416":"code","6c60a455":"code","28bb57bd":"code","ad0405ed":"code","58e650c0":"code","4cb02041":"code","c1cd2972":"code","a4e8665e":"code","9336ae1f":"code","5049610f":"code","717d619f":"code","690c1e4c":"code","6e26b02f":"code","f8027caf":"code","24b440a1":"code","1ab1dd2a":"code","5c5c25c4":"code","39445b10":"code","8f8576f2":"code","9cc5940b":"code","12f4a60a":"code","86aa143d":"code","9e0c9568":"code","ab8bfbcc":"code","69628f61":"code","395f58e2":"code","5ed4341b":"code","06d8a5df":"code","cef3d934":"code","bf8612b0":"code","9113473c":"markdown","37238859":"markdown","2d4c8a92":"markdown","d079c7fc":"markdown","b8e4bb02":"markdown","76c75b94":"markdown","080e370d":"markdown","b264d9e8":"markdown","f07fb48f":"markdown","d96fa8d6":"markdown","c3a19fc2":"markdown","060cb6b9":"markdown","9812e0a5":"markdown"},"source":{"172efb54":"# Checking all the files present\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","08a12f02":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import cross_validate\n\nimport warnings; warnings.simplefilter('ignore')","fd451912":"md = pd. read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nlinks_small = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/links_small.csv')","00874da8":"\nlinks_small = links_small[links_small['tmdbId'].notnull()]['tmdbId']\nlinks_small","f757f045":"md = md.drop([19730, 29503, 35587])","2f82d7fb":"md['id'] = md['id'].astype(int)","99cbed69":"smd = md[md['id'].isin(links_small)]\nsmd.shape\n","f17c336a":"smd['tagline'] = smd['tagline'].fillna('')\nsmd['description'] =  smd['overview'] + smd['tagline']\nsmd['description'] = smd['description'].fillna('')","35231c61":"tf = TfidfVectorizer(analyzer='word',ngram_range=(1,2), min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(smd['description'])","cce1e41f":"tfidf_matrix.shape","3b80d9cf":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","6196d416":"smd = smd.reset_index()\ntitles = smd['title']\nindices = pd.Series(smd.index, index=smd['title'])","6c60a455":"def get_recommendations(title):\n    idx = indices[title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    sim_scores = sim_scores[1:31]\n    movie_indices = [i[0] for i in sim_scores]\n    return titles.iloc[movie_indices]","28bb57bd":"get_recommendations('The Godfather').head(10)","ad0405ed":"get_recommendations('The Dark Knight').head(10)","58e650c0":"credits = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/credits.csv')\nkeywords = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/keywords.csv')","4cb02041":"keywords['id'] = keywords['id'].astype(int)\ncredits['id'] = credits['id'].astype(int)\nmd['id'] = md['id'].astype('int')","c1cd2972":"md.shape","a4e8665e":"md = md.merge(credits, on='id')\nmd = md.merge(keywords, on='id')","9336ae1f":"smd = md[md['id'].isin(links_small)]\nsmd.shape","5049610f":"smd['cast'] = smd['cast'].apply(literal_eval)\nsmd['crew'] = smd['crew'].apply(literal_eval)\nsmd['keywords'] = smd['keywords'].apply(literal_eval)\nsmd['cast_size'] = smd['cast'].apply(lambda x:len(x))\nsmd['crew_size'] = smd['crew'].apply(lambda x:len(x))","717d619f":"smd['cast']","690c1e4c":"def get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","6e26b02f":"smd['director'] = smd['crew'].apply(get_director)","f8027caf":"smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\nsmd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)","24b440a1":"smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])","1ab1dd2a":"smd['cast'] = smd['cast'].apply(lambda x:[str.lower(i.replace(\" \",\"\")) for i in x])","5c5c25c4":"smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(\" \",\"\")))\nsmd['director'] = smd['director'].apply(lambda x:[x,x,x])","39445b10":"s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)\ns.name = 'keyword'","8f8576f2":"s = s.value_counts()","9cc5940b":"s = s[s>1]","12f4a60a":"stemmer = SnowballStemmer('english')\nstemmer.stem('dogs')","86aa143d":"def filter_keywords(x):\n    words = []\n    for i in x:\n        if i in s:\n            words.append(i)\n    return words","9e0c9568":"smd['keywords'][0]","ab8bfbcc":"smd['keywords'] = smd['keywords'].apply(filter_keywords)\nsmd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])\nsmd['keywords'] = smd['keywords'].apply(lambda x:[str.lower(i.replace(\" \",\"\")) for i in x])","69628f61":"smd['soup'] = smd['keywords'] + smd['cast'] + smd['director']\nsmd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))","395f58e2":"count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\ncount_matrix = count.fit_transform(smd['soup'])","5ed4341b":"cosine_sim = cosine_similarity(count_matrix, count_matrix)","06d8a5df":"smd = smd.reset_index()\ntitles = smd['title']\nindices = pd.Series(smd.index, index=smd['title'])","cef3d934":"get_recommendations('The Dark Knight').head(10)","bf8612b0":"get_recommendations('Mean Girls').head(10)","9113473c":"## Movie Description Based Recommender\nLet us first try to build a recommender using movie descriptions and taglines. We do not have a quantitative metric to judge our machine's performance so this will have to be done qualitatively.","37238859":"We have 9099 movies avaiable in our small movies metadata dataset","2d4c8a92":"One thing that we notice about our recommendation system is that it recommends movies regardless of ratings and popularity. It is true that Batman and Robin has a lot of similar characters as compared to The Dark Knight but it was a terrible movie that shouldn't be recommended to anyone.","d079c7fc":"We're all set. Let us now try and get the top recommendations for a few movies and see how good the recommendations are.","b8e4bb02":"Keywords occur in frequencies ranging from 1 to 610. We do not have any use for keywords that occur only once. Therefore, these can be safely removed. Finally, we will convert every word to its stem so that words such as Dogs and Dog are considered the same.","76c75b94":"My approach to building the recommender is going to be extremely hacky. What I plan on doing is creating a metadata dump for every movie which consists of genres, director, main actors and keywords. I then use a Count Vectorizer to create our count matrix as we did in the Description Recommender. The remaining steps are similar to what we did earlier: we calculate the cosine similarities and return movies that are most similar.\n\nThese are steps I follow in the preparation of my genres and credits data:\n\n1. Strip Spaces and Convert to Lowercase from all our features. This way, our engine will not confuse between Johnny Depp and Johnny Galecki.\n2. Mention Director 3 times to give it more weight relative to the entire cast.","080e370d":"# Content Based Filtering","b264d9e8":"I am much more satisfied with the results I get this time around. The recommendations seem to have recognized other Christopher Nolan movies (due to the high weightage given to director) and put them as top recommendations. I enjoyed watching The Dark Knight as well as some of the other ones in the list including Batman Begins, The Prestige and The Dark Knight Rises.\n\nWe can of course experiment on this engine by trying out different weights for our features (directors, actors, genres), limiting the number of keywords that can be used in the soup, weighing genres based on their frequency, only showing movies with the same languages, etc.","f07fb48f":"We see that for The Dark Knight, our system is able to identify it as a Batman film and subsequently recommend other Batman films as its top recommendations. But unfortunately, that is all this system can do at the moment. This is not of much use to most people as it doesn't take into considerations very important features such as cast, crew, director and genre, which determine the rating and the popularity of a movie. Someone who liked The Dark Knight probably likes it more because of Nolan and would hate Batman Forever and every other substandard movie in the Batman Franchise.\n\nTherefore, we are going to use much more suggestive metadata than Overview and Tagline. In the next subsection, we will build a more sophisticated recommender that takes genre, keywords, cast and crew into consideration.","d96fa8d6":"We now have our cast, crew, genres and credits, all in one dataframe. Let us wrangle this a little more using the following intuitions:\n\n1. Crew: From the crew, we will only pick the director as our feature since the others don't contribute that much to the feel of the movie.\n2. Cast: Choosing Cast is a little more tricky. Lesser known actors and minor roles do not really affect people's opinion of a movie. Therefore, we must only select the major characters and their respective actors. Arbitrarily we will choose the top 3 actors that appear in the credits list.","c3a19fc2":"## Loading Dataset","060cb6b9":"## Metadata Based Recommender\nTo build our standard metadata based content recommender, we will need to merge our current dataset with the crew and the keyword datasets. Let us prepare this data as our first step.","9812e0a5":"We will reuse the get_recommendations function that we had written earlier. Since our cosine similarity scores have changed, we expect it to give us different (and probably better) results. Let us check for The Dark Knight again and see what recommendations I get this time around."}}