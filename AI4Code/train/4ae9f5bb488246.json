{"cell_type":{"28a74f16":"code","fdab3e5a":"code","91860942":"code","74e6e1b7":"code","6d239509":"code","a67e269a":"code","41ac019b":"code","ea78489b":"code","5a628a60":"markdown","782a665e":"markdown"},"source":{"28a74f16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdab3e5a":"import json\npath = \"\/kaggle\/input\/json-data\/file.JSON\"\nf = open(path, \"r\")\ndata_dict= json.loads(f.read())\ndata_dict","91860942":"# data_dict = {\n# \"op\": \"equal\",\n# \"lhs\": {\n# \"op\": \"multiply\",\n# \"lhs\": 3,\n# \"rhs\": {\n# \"op\": \"add\",\n# \"lhs\": \"x\",\n# \"rhs\": 2\n# }\n# },\n# \"rhs\": 21\n# }\n\n","74e6e1b7":"# usefull functions and dicts\nop_dict = {\n    \"multiply\" : \"*\",\n    \"divide\" : \"\/\",\n    \"add\" : \"+\",\n    \"subtract\" : \"-\",\n    \"equal\": \"=\",\n}\n\nop_neg_dict = {\n    \"multiply\" : \"divide\",\n    \"divide\" : \"multiply\",\n    \"add\" : \"subtract\",\n    \"subtract\" : \"add\",\n    \"+\" : \"-\", \n    \"-\" : \"+\",\n    \"*\" : \"\/\",\n    \"\/\" : \"*\",\n    \n}\n\nexpressions = {\"*\", \"\/\", \"+\", \"-\", \"=\"}\n\n\n\ndef prefix_expression(data_dict, array=[]):\n    for k in data_dict:\n        if (type(data_dict[k]) == dict and data_dict[k] != np.nan):\n            array = prefix_expression(data_dict[k], array)\n#             print(\"hi\")\n        else:\n            if data_dict[k] in op_dict:\n                array.append(op_dict[data_dict[k]])\n            else:\n                array.append(data_dict[k])\n            \n    return array\n\ndef prerfix_to_infix(array):\n    exp_string=[]\n    length = len(array)\n    for i in range(length-1, -1, -1):\n        if array[i] in expressions:\n            oprant_1 = exp_string[len(exp_string)-1]\n            exp_string.pop()\n            oprant_2 = exp_string[len(exp_string)-1]\n            exp_string.pop()\n            temp_str = ''\n            if(i <= 1):\n                temp_str =  oprant_1 + \" \" + array[i]+\" \"+oprant_2\n            else:\n                temp_str = \"(\"+oprant_1+\" \"+array[i]+\" \"+oprant_2+\")\"\n            exp_string.append(temp_str)\n        else:\n            exp_string.append(str(array[i]))\n    \n    return exp_string\n\ndef empy(arr):\n    ar=[]\n    for i in arr:\n        if len(i) != 0:\n            ar.append(i)\n    return ar\n\ndef simplification(rhs, exp):\n    exp_string=[]\n    exp = \",\".join(exp.split(' ')).replace(\"(\", \"\").replace(\")\", \"\").replace(\"x\", \"\").split(\",\")\n    exp = empy(exp)\n    length = len(exp)\n    if(length>3):\n        i=1\n        while(i<length):\n            if ((exp[i] in expressions) and (exp[i+1] in expressions)):\n                exp_string.append(op_neg_dict[exp[i]]+exp[i-1]+\")\"+op_neg_dict[exp[i+1]])\n                i+=1\n            elif ((exp[i]) in expressions):\n                exp_string.append(op_neg_dict[exp[i]]+exp[i-1])\n            else:\n                exp_string.append(exp[i])\n            i+=1\n        return \"(\"+rhs+\"\".join(exp_string)\n    return rhs+exp[0,len(exp)-1]","6d239509":"print(\"method 1: \\n\")\narray = prefix_expression(data_dict, [])\nexp_string = prerfix_to_infix(array)\nprint(\"infix notation: \\n\", exp_string[0])\nexpression = exp_string[0]\nlhs = expression.split('=')[0]\nrhs = expression.split('=')[1]\nsimple_exp = simplification(rhs, lhs)\nprint(\"simple exp : \\n\", \"x =\", simple_exp)\neval(simple_exp)\nprint(\"solution is :\\n\", \"x = \", eval(simple_exp))\n","a67e269a":"\nclass node:\n    def __init__(self, ):\n        self.op = ''\n        self.neg_op = ''\n        self.lhs = ''\n        self.rhs = ''\n\n\ndef process(data, parent):\n    if type(data['lhs']) == dict:\n        parent.lhs=node()\n        process(data['lhs'], parent.lhs)\n    else:\n#         print(data['lhs'])\n        parent.lhs = data['lhs']\n    \n#     print(data['op'])\n    parent.op = data['op']\n    \n    if type(data['rhs']) == dict :\n        parent.rhs = node()\n        process(data['rhs'], parent.rhs)\n    else:\n#         print(data['rhs'])\n        parent.rhs = data['rhs']\n\n    return\n\ndef print_tree(tree, string =\"\", verbose=1 ):\n    if type(tree.lhs) == int or tree.lhs == 'x':\n        string = string + (str(tree.lhs))\n#         print(string)\n\n    else:\n        string = string + str(\" ( \")\n        string = print_tree(tree.lhs, string, 0)\n        string = string + str(\" ) \")\n\n    string = string + str(\" \")\n    string = string + op_dict[str(tree.op)]\n    string = string + str(\" \")\n#     print(tree.op)\n    \n    if type(tree.rhs) == int or tree.rhs == 'x':\n        string = string + (str(tree.rhs))\n#         print(string)\n    else:\n        string = string + str(\" ( \")\n        string = print_tree(tree.rhs, string, 0)\n        string = string + str(\" ) \")\n\n    if(verbose):\n        print(string)\n    return string\n        \ndef isin(tree):\n    if type(tree) == int:\n        return 0\n    if (tree) == 'x':\n        return 1\n    if tree.lhs == 'x':\n        return 1\n    if tree.rhs == 'x':\n        return 1\n    \n    type_tree_lhs = type(tree.lhs)\n    type_tree_rhs = type(tree.rhs)\n    \n    if type_tree_lhs != int:\n        if isin(tree.lhs):\n            return 1\n    \n    if type_tree_rhs != int:\n        if isin(tree.rhs):\n            return 1\n    \n    return 0","41ac019b":"\n\n\nprint(\"method 2: \\n\")\n\nfrom sympy import symbols, solve\ntree = node()\nprocess(data_dict, tree)\nprint(\"expression :\")\nstring = print_tree(tree)\nlhs = tree.lhs\nrhs = tree.rhs\ntree.lhs = node()\ntree.lhs.lhs = lhs\ntree.lhs.rhs = rhs\ntree.lhs.op = \"subtract\"\ntree.rhs = 0\nstring = print_tree(tree)\nx = symbols('x')\nexpr = string.split('=')[0]\nsol = solve(expr)\nprint(\"ans :\\nx = \", sol[0])","ea78489b":"print(\"method 1:\")\narray = prefix_expression(data_dict, [])\nexp_string = prerfix_to_infix(array)\nprint(\"infix notation: \\n\", exp_string[0])\nexpression = exp_string[0]\nlhs = expression.split('=')[0]\nrhs = expression.split('=')[1]\nsimple_exp = simplification(rhs, lhs)\nprint(\"simple exp : \\n\", \"x =\", simple_exp)\neval(simple_exp)\nprint(\"solution is :\\n\", \"x = \", eval(simple_exp))\n\n\n\nprint(\"\\n\\nmethod 2:\")\n\nfrom sympy import symbols, solve\ntree = node()\nprocess(data_dict, tree)\nprint(\"expression :\")\nstring = print_tree(tree)\nlhs = tree.lhs\nrhs = tree.rhs\ntree.lhs = node()\ntree.lhs.lhs = lhs\ntree.lhs.rhs = rhs\ntree.lhs.op = \"subtract\"\ntree.rhs = 0\nstring = print_tree(tree)\nx = symbols('x')\nexpr = string.split('=')[0]\nsol = solve(expr)\nprint(\"ans :\\nx = \", sol[0])","5a628a60":"**Method 2**","782a665e":"**Method 1**"}}