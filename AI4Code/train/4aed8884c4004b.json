{"cell_type":{"0c96f013":"code","ea498ca1":"code","273f0dba":"code","06206015":"code","25271ea8":"code","2bc5df79":"code","d3e6da8d":"code","63ef35c3":"code","f19c5c95":"code","6d5f4d46":"code","cf56ba34":"code","e9c77a4c":"code","9e89fd1d":"code","db810967":"code","9675ba31":"code","dbb57c52":"code","7300afd0":"code","8b890f06":"code","6beb5526":"code","33d3e55c":"code","acf09a0e":"code","3a64c7c3":"code","7c687a6a":"code","8ba28b42":"code","aae71bb3":"code","29bb5333":"code","d5d489cc":"code","c98dd0f2":"code","3278f15d":"code","4d0a46eb":"code","122e6d04":"code","3f38c4b6":"code","d0ea4acb":"code","8b2456a6":"code","1dce8e26":"code","5ab21b25":"code","bfcdc532":"code","044d848c":"code","e9dc4ffd":"code","7c037801":"code","d2514a15":"code","ca9eebde":"code","f0fc85a3":"code","f11a305b":"code","971116ec":"code","e6967247":"code","cfcd6bbf":"code","44cc2eab":"code","3cd10ef5":"code","bd2b6cea":"code","248dbbc3":"code","01633bf9":"code","758fe4fc":"code","5682f1b6":"code","4832ee53":"code","96506510":"code","1d1045b9":"code","68b071f3":"code","916966d0":"code","18b6fbf5":"code","f3d9e83d":"markdown","cfcf2b1a":"markdown","dec424ef":"markdown","e127d609":"markdown","b63542ef":"markdown","b911d6aa":"markdown","a6a7bff1":"markdown","f7ee2de5":"markdown","163cafa3":"markdown","c083b902":"markdown","22c1f849":"markdown","9e0d4b02":"markdown","084bc473":"markdown","a1abc9b6":"markdown","2cb72930":"markdown","ab591065":"markdown","28e252af":"markdown","ba74af14":"markdown","20419244":"markdown","0d5d2b9a":"markdown","d1fd0460":"markdown","2574c75a":"markdown","2439c591":"markdown","7ab7a481":"markdown","feeb8bdb":"markdown","fbf8df28":"markdown","cf4cd8d0":"markdown","4df56032":"markdown","7c744c93":"markdown","5f942cbd":"markdown","22e5fbe6":"markdown","ff08a0d4":"markdown","5c636ef4":"markdown","cf5cc834":"markdown","62871b49":"markdown","0569e374":"markdown","064fab90":"markdown","1f3e6c95":"markdown","21c15c14":"markdown","53f79d95":"markdown","4dcfeb6d":"markdown"},"source":{"0c96f013":"# Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport scipy.stats as st\nimport seaborn as sns\nimport warnings\n\n%matplotlib inline\n\npd.options.display.max_columns = None\nwarnings.filterwarnings('ignore')\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\n# Importing the train and test datasets in pandas dataframes\ntrain_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n# Drop the 'Id' column from the train dataframe\ntrain_data.drop(columns='Id', inplace=True)\n\ny_train = train_data['SalePrice']","ea498ca1":"# The shape of the data\ntrain_data.shape, test_data.shape, y_train.shape","273f0dba":"# Display the first five rows of the training dataset.\ntrain_data.head()","06206015":"# The description of the train dataset\ntrain_data.describe()","25271ea8":"# Looking the type of the columns in the dataset\ntrain_data.info()","2bc5df79":"# Showing the numerical varibales with the highest correlation with 'SalePrice', sorted from highest to lowest\ncorrelation = train_data.select_dtypes(include=[np.number]).corr()\n\nprint(correlation['SalePrice'].sort_values(ascending=False))","d3e6da8d":"# Heatmap of correlation of numeric features\nfig, ax = plt.subplots(figsize = (14,14))\n\nplt.title('Correlation Between Numeric Features', size=15)\nsns.heatmap(correlation, square=True, vmax=0.8, cmap='coolwarm', linewidths=0.01);","63ef35c3":"# Zoomed HeatMap of the most Correlayed variables\nzoomed_correlation = correlation.loc[['SalePrice','GrLivArea','TotalBsmtSF','OverallQual','FullBath','TotRmsAbvGrd','YearBuilt', 'YearRemodAdd', '1stFlrSF','GarageYrBlt','GarageCars','GarageArea'],\n                                     ['SalePrice','GrLivArea','TotalBsmtSF','OverallQual','FullBath','TotRmsAbvGrd','YearBuilt', 'YearRemodAdd', '1stFlrSF','GarageYrBlt','GarageCars','GarageArea']]\n\nfig , ax = plt.subplots(figsize = (14,14))\nplt.title('Zoomed Correlation Between Numeric Features', size=15)\nsns.heatmap(zoomed_correlation, square=True, vmax=0.8, annot=True, cmap='coolwarm', linewidths=0.01);","f19c5c95":"# Pair plot\ncols = ['SalePrice','GrLivArea','TotalBsmtSF','OverallQual','FullBath','TotRmsAbvGrd','YearBuilt', 'YearRemodAdd', '1stFlrSF','GarageYrBlt','GarageCars','GarageArea']\n\nsns.set()\nsns.pairplot(train_data[cols], size=2, kind='scatter', diag_kind='kde');","6d5f4d46":"plt.figure(figsize=(25,5))\n\nax1 = plt.subplot(1, 3, 1)\nplt.scatter(x=train_data.TotalBsmtSF, y=train_data.SalePrice)\nplt.title('TotalBsmtSF x SalePrice', size=15)\n\nax2 = plt.subplot(1, 3, 2)\nplt.scatter(x=train_data['1stFlrSF'], y=train_data.SalePrice)\nplt.title('1stFlrSF x SalePrice', size=15)\n\nax3 = plt.subplot(1, 3, 3)\nplt.scatter(x = train_data.GrLivArea, y=train_data.SalePrice)\nplt.title('GrLivArea x SalePrice', size=15)\n\nplt.show()","cf56ba34":"print(train_data.shape)\n\n# Removing the four outliers found \ntrain_data.drop(train_data[train_data['TotalBsmtSF'] > 5000].index, inplace=True)\ntrain_data.drop(train_data[train_data['1stFlrSF'] > 4000].index,inplace=True)\ntrain_data.drop(train_data[(train_data['GrLivArea'] > 4000) & (train_data['SalePrice'] < 300000)].index, inplace = True)\n\nprint(train_data.shape)","e9c77a4c":"# Visualising missing values of numeric features\nmsno.matrix(train_data.select_dtypes(include=[np.number]));","9e89fd1d":"# Visualising percentage of missing values of the top 5 numeric variables\ntotal = train_data.select_dtypes(include=[np.number]).isnull().sum().sort_values(ascending=False)\npercent = (train_data.select_dtypes(include=[np.number]).isnull().sum() \/ train_data.select_dtypes(include=[np.number]).isnull().count()).sort_values(ascending=False)\n\nmissing_data = pd.concat([total, percent], axis=1, join='outer', keys=['Missing Count', 'Missing Percentage'])\nmissing_data.index.name=' Numeric Feature'\nmissing_data.head(5)","db810967":"# Visualising missing values of categorical features\nmsno.matrix(train_data.select_dtypes(include=[np.object]));","9675ba31":"# Visualising percentage of missing values of the top 10 categorical variables\ntotal = train_data.select_dtypes(include=[np.object]).isnull().sum().sort_values(ascending=False)\npercent = (train_data.select_dtypes(include=[np.object]).isnull().sum() \/ train_data.select_dtypes(include=[np.object]).isnull().count()).sort_values(ascending=False)\n\nmissing_data = pd.concat([total, percent], axis=1,join='outer', keys=['Missing Count', 'Missing Percentage'])\nmissing_data.index.name =' Object Feature'\nmissing_data.head(20)","dbb57c52":"# Concatenate the training and test datasets into a single dataframe\ndata_full = pd.concat([train_data,test_data], ignore_index=True)\ndata_full.drop('Id', axis=1, inplace=True)\n\ndata_full.shape","7300afd0":"# Sum of missing values by numeric features\nsum_missing_values = data_full.select_dtypes(include=[np.number]).isnull().sum()\n\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","8b890f06":"# Numeric features with small number of NaNs: replace with 0\nfor col in ['BsmtHalfBath', 'BsmtFullBath', 'GarageArea', 'GarageCars', 'TotalBsmtSF', 'BsmtUnfSF', 'BsmtFinSF2', 'BsmtFinSF1']:\n    data_full[col].fillna(0, inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.number]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","6beb5526":"# Numeric features with medium number of NaNs: replace with the mean\ndata_full['MasVnrArea'].fillna(data_full['MasVnrArea'].mean(), inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.number]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","33d3e55c":"# Cut 'YearBuilt' into 10 parts\ndata_full['YearBuiltCut'] = pd.qcut(data_full['YearBuilt'], 10)\n\n# Impute the missing values of 'GarageYrBlt' based on the median of 'YearBuilt' \ndata_full['GarageYrBlt'] = data_full.groupby(['YearBuiltCut'])['GarageYrBlt'].transform(lambda x : x.fillna(x.median()))\n\n# Convert the values to integers\ndata_full['GarageYrBlt'] = data_full['GarageYrBlt'].astype(int)\n\n# Drop 'YearBuiltCut' column\ndata_full.drop('YearBuiltCut', axis=1, inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.number]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","acf09a0e":"# Cut 'LotArea' into 10 parts\ndata_full['LotAreaCut'] = pd.qcut(data_full['LotArea'], 10)\n\n# Impute the missing values of 'LotFrontage' based on the median of 'LotArea' and 'Neighborhood'\ndata_full['LotFrontage'] = data_full.groupby(['LotAreaCut','Neighborhood'])['LotFrontage'].transform(lambda x : x.fillna(x.median()))\ndata_full['LotFrontage'] = data_full.groupby(['LotAreaCut'])['LotFrontage'].transform(lambda x : x.fillna(x.median()))\n\n# Drop 'LotAreaCut' column\ndata_full.drop('LotAreaCut',axis=1,inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.number]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","3a64c7c3":"# Sum of missing values by feature (object)\nsum_missing_values = data_full.select_dtypes(include=[np.object]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","7c687a6a":"# Categorical features with less than 5 missing values: replace with the mode (most frequently occured value)\nfor col in ['MSZoning', 'Functional', 'Utilities', 'Exterior1st', 'SaleType', 'Exterior2nd', 'KitchenQual', 'Electrical']:\n    data_full[col].fillna(data_full[col].mode()[0], inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.object]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","8ba28b42":"# Categorical features with more than 5 missing values: replace with 'None'\nfor col in ['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','GarageQual','GarageCond','GarageFinish','GarageType','BsmtExposure','BsmtCond','BsmtQual','BsmtFinType2','BsmtFinType1','MasVnrType']:\n    data_full[col].fillna('None', inplace=True)\n\n# Check if missing values are imputed successfully\nsum_missing_values = data_full.select_dtypes(include=[np.object]).isnull().sum()\nsum_missing_values[sum_missing_values > 0].sort_values(ascending=False)","aae71bb3":"data_full.select_dtypes(include=[np.number]).columns","29bb5333":"# Converting numeric features to categorical features\nstr_cols = ['YrSold','YearRemodAdd','YearBuilt','MoSold','MSSubClass','GarageYrBlt']\n\nfor col in str_cols:\n    data_full[col] = data_full[col].astype(str)","d5d489cc":"data_full.select_dtypes(include=[np.object]).columns","c98dd0f2":"data_full['GarageCond'].unique()","3278f15d":"# ExterQual = Evaluates the quality of the material on the exterior: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor)\ndata_full[\"oExterQual\"] = data_full['ExterQual'].map({'Fa':1, 'TA':2, 'Gd':3, 'Ex':4})\n\n# ExterCond = Evaluates the present condition of the material on the exterior: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor)\ndata_full[\"oExterCond\"] = data_full['ExterCond'].map({'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})\n\n# BsmtQual = Evaluates the height of the basement: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor), NA(No Basement)\ndata_full[\"oBsmtQual\"] = data_full['BsmtQual'].map({'None':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})\n\n# BsmtExposure = Refers to walkout or garden level walls: Gd(Good), Av(Average), Mn(Minimum), No(No Exposure), NA(No Basement)\ndata_full[\"oBsmtExposure\"] = data_full['BsmtExposure'].map({'None':1, 'No':2, 'Av':3, 'Mn':3, 'Gd':4})\n\n# BsmtCond = Evaluates the general condition of the basement: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor), NA(No Basement)\ndata_full[\"oBsmtCond\"] = data_full['BsmtCond'].map({'None':1, 'Po':2, 'Fa':3, 'TA':3, 'Gd':4})\n\n# HeatingQC = Heating quality and condition: Ex(Excellent), Gd(Good), TA(Average), Fa(Fair), Po(Poor)\ndata_full[\"oHeatingQC\"] = data_full['HeatingQC'].map({'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})\n\n# KitchenQual: Kitchen quality: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor)\ndata_full[\"oKitchenQual\"] = data_full['KitchenQual'].map({'Fa':1, 'TA':2, 'Gd':3, 'Ex':4})\n\n# FireplaceQu: Fireplace quality: Ex(Excellent), Gd(Good), TA(Average), Fa(Fair), Po(Poor), NA(No Fireplace)\ndata_full[\"oFireplaceQu\"] = data_full['FireplaceQu'].map({'None':1, 'Po':2, 'Fa':3, 'TA':4, 'Gd':5, 'Ex':6})\n\n# GarageFinish: Interior finish of the garage: Fin(Finished), RFn(Rough Finished), Unf(Unfinished), NA(No Garage)\ndata_full[\"oGarageFinish\"] = data_full['GarageFinish'].map({'None':1, 'Unf':2, 'RFn':3, 'Fin':4})\n\n# GarageQual: Garage quality: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor), NA(No Garage)\ndata_full[\"oGarageQual\"] = data_full['GarageQual'].map({'None':1, 'Po':2, 'Fa':3, 'TA':4, 'Gd':5, 'Ex':6})\n\n# GarageCond: Garage condition: Ex(Excellent), Gd(Good), TA(Typical), Fa(Fair), Po(Poor), NA(No Garage)\ndata_full[\"oGarageCond\"] = data_full['GarageCond'].map({'None':1, 'Po':2, 'Fa':3, 'TA':4, 'Gd':5, 'Ex':6})\n\n# PavedDrive: Paved driveway: Y(Padev), P(Partial Pavement), N(Dirt)\ndata_full[\"oPavedDrive\"] = data_full['PavedDrive'].map({'N':1, 'P':2, 'Y':3})","4d0a46eb":"data_full.select_dtypes(include=[np.number]).columns","122e6d04":"# House square feet = First floor square feet + Second floor square feet + Total square feet of basement area\ndata_full['HouseSF'] = data_full['1stFlrSF'] + data_full['2ndFlrSF'] + data_full['TotalBsmtSF']\n\n# Porch square feet = Three season porch area in square feet + Enclosed porch area in square feet + Screen porch area in square feet\ndata_full['PorchSF'] = data_full['3SsnPorch'] + data_full['EnclosedPorch'] + data_full['OpenPorchSF'] + data_full['ScreenPorch']\n\n# Total square feet = House square feet + Porch square feet + Garage area\ndata_full['TotalSF'] = data_full['HouseSF'] + data_full['PorchSF'] + data_full['GarageArea']","3f38c4b6":"# Estimate Skewness of the data\ntrain_data.skew()","d0ea4acb":"# Estimate Kurtosis of the data\ntrain_data.kurt()","8b2456a6":"# Plot the Skewness and Kurtosis of the data\nplt.figure(figsize=(15,5))\n\nax1 = plt.subplot(1, 2, 1)\nsns.distplot(train_data.skew(), axlabel ='Skewness')\n\nax2 = plt.subplot(1, 2, 2)\nsns.distplot(train_data.kurt(), axlabel ='Kurtosis')\n\nplt.show()","1dce8e26":"from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom scipy.stats import skew\n\n# Label encoding class\nclass labenc(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        label = LabelEncoder()\n        \n        X['YrSold'] = label.fit_transform(X['YrSold'])\n        X['YearRemodAdd'] = label.fit_transform(X['YearRemodAdd'])\n        X['YearBuilt'] = label.fit_transform(X['YearBuilt'])\n        X['MoSold'] = label.fit_transform(X['MoSold'])\n        X['GarageYrBlt'] = label.fit_transform(X['GarageYrBlt'])\n        \n        return X\n    \n# Skewness transform class\nclass skewness(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        skewness = X.select_dtypes(include=[np.number]).apply(lambda x: skew(x))\n        skewness_features = skewness[abs(skewness) >= 1].index\n        \n        X[skewness_features] = np.log1p(X[skewness_features])\n        \n        return X\n\n# One hot encoding class\nclass onehotenc(BaseEstimator,TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        X = pd.get_dummies(X)\n        \n        return X","5ab21b25":"# Creating a copy of the full dataset\ndata_full_copy = data_full.copy()\n\n# Creating a new data with the applied transformations using a Pipeline\nfrom sklearn.pipeline import Pipeline\n\npipeline = Pipeline([('labenc', labenc()), ('skewness', skewness()), ('onehotenc', onehotenc())])\n\ndata_pipeline = pipeline.fit_transform(data_full_copy)\n\ndata_full.shape, data_pipeline.shape","bfcdc532":"data_full.head()","044d848c":"data_pipeline.head()","e9dc4ffd":"X_train = data_pipeline[:train_data.shape[0]]\ny_train = X_train['SalePrice']\nX_train.drop(columns='SalePrice', inplace=True)\n\nX_test = data_pipeline[train_data.shape[0]:]\nX_test.drop(columns='SalePrice', inplace=True)\n\nX_train.shape, y_train.shape, X_test.shape","7c037801":"plt.figure(figsize=(25,5))\n\nax1 = plt.subplot(1, 3, 1)\nsns.distplot(y_train, kde=False, fit=st.norm)\nplt.title('Normal', size = 15)\n\nax2 = plt.subplot(1, 3, 2)\nsns.distplot(y_train, kde=False, fit=st.lognorm)\nplt.title('Log Normal', size = 15)\n\nax3 = plt.subplot(1, 3, 3)\nsns.distplot(y_train, kde=False, fit=st.johnsonsu)\nplt.title('Johnson SU', size = 15)\n\nplt.show()","d2514a15":"# Transforming 'SalePrice' into normal distribution\ny_train_transformed = np.log(y_train)\n\ny_train_transformed.skew(), y_train_transformed.kurt()","ca9eebde":"# Plotting 'SalePrice' before and after the transformation\nplt.figure(figsize=(15,5))\n\nax1 = plt.subplot(1, 2, 1)\nsns.distplot(y_train)\nplt.title('Before Transformation', size=15)\n\nax2 = plt.subplot(1, 2, 2)\nsns.distplot(y_train_transformed)\nplt.title('After Transformation', size=15)\n\nplt.show()","f0fc85a3":"# Using RobustScaler to transform X_train and X_test\nfrom sklearn.preprocessing import RobustScaler\nrobust_scaler = RobustScaler()\n\nX_train_scaled = robust_scaler.fit(X_train).transform(X_train)\nX_test_scaled = robust_scaler.transform(X_test)","f11a305b":"# Shape of final data we will be working on\nX_train_scaled.shape, y_train_transformed.shape, X_test_scaled.shape","971116ec":"# Display features by their importance (lasso regression coefficient)\nfrom sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.001)\n\nlasso.fit(X_train_scaled, y_train_transformed)\n\ny_pred_lasso = lasso.predict(X_test_scaled)\n\nlasso_coeff = pd.DataFrame({'Feature Importance':lasso.coef_}, index=data_pipeline.drop(columns='SalePrice').columns)\nlasso_coeff.sort_values('Feature Importance', ascending=False)","e6967247":"# Plot features by importance (feature coefficient in the model)\nlasso_coeff[lasso_coeff['Feature Importance'] != 0].sort_values('Feature Importance').plot(kind='barh',figsize=(20,20))","cfcd6bbf":"from sklearn.decomposition import PCA\n\n# Concatenate the training and test datasets into a single dataframe\ndata_full_2 = np.concatenate([X_train_scaled, X_test_scaled])\n\n# Choose the number of principle components such that 95% of the variance is retained\npca = PCA(0.95)\ndata_full_2 = pca.fit_transform(data_full_2)\n\nvar_PCA = np.round(pca.explained_variance_ratio_ * 100, decimals=1)\n\n# Principal Component Analysis of data\nprint(var_PCA)","44cc2eab":"# Principal Component Analysis plot of the data\nplt.figure(figsize=(15,5))\n\nplt.bar(x=range(1, len(var_PCA) + 1), height=var_PCA)\nplt.ylabel(\"Explained Variance (%)\", size=15)\nplt.xlabel(\"Principle Components\", size=15)\nplt.title(\"Principle Component Analysis Plot : Training Data\", size=15)\nplt.show()","3cd10ef5":"# Shape of final data we will be working on\nX_train_scaled = data_full_2[:train_data.shape[0]]\n\nX_test_scaled = data_full_2[train_data.shape[0]:]\n\nX_train_scaled.shape, y_train_transformed.shape, X_test_scaled.shape","bd2b6cea":"# Importing the models\nfrom sklearn.linear_model import LinearRegression, BayesianRidge, ElasticNet, Lasso, SGDRegressor, Ridge\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import ExtraTreesRegressor, GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.svm import LinearSVR, SVR\n\n# kfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\n\n#alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\n#alphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\n#e_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\n#e_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]\n\n\n# Adicionar RidgeCV(alpha=alphas_alt, cv=kfolds)\n# Adicionar LassoCV(max_iter=1e7, alphas=alphas2, random_state=42, cv=kfolds)\n# Adicionar ElasticNetCV(max_iter=1e7, alphas=e_alphas, cv=kfolds, l1_ratio=e_l1ratio)\n# Adicionar SVR(C= 20, epsilon= 0.008, gamma=0.0003,)\n# Adicionar GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =42)\n# Adicionar LGBMRegressor(objective='regression', num_leaves=4, learning_rate=0.01, n_estimators=5000, max_bin=200, bagging_fraction=0.75, bagging_freq=5, bagging_seed=7, feature_fraction=0.2,\n# feature_fraction_seed=7, verbose=-1,)\n\n# Adicionar XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                    # max_depth=3, min_child_weight=0,\n                                    # gamma=0, subsample=0.7,\n                                    # colsample_bytree=0.7,\n                                    # objective='reg:linear', nthread=-1,\n                                    # scale_pos_weight=1, seed=27,\n                                    # reg_alpha=0.00006)\n                        \n# StackingCVRegressor(regressors=(ridge, lasso, elasticnet, gbr, xgboost, lightgbm),\n                               # meta_regressor=xgboost,\n                               # use_features_in_secondary=True)\n                        \n# Creating the models\nmodels = [LinearRegression(), \n          SVR(),\n          SGDRegressor(),\n          SGDRegressor(max_iter=1000, tol=1e-3),\n          GradientBoostingRegressor(),\n          RandomForestRegressor(),\n          Lasso(),\n          Lasso(alpha=0.01, max_iter=10000),\n          Ridge(),\n          BayesianRidge(),\n          KernelRidge(),\n          KernelRidge(alpha=0.6, kernel='polynomial',degree=2, coef0=2.5),\n          ElasticNet(),\n          ElasticNet(alpha=0.001, max_iter=10000), ExtraTreesRegressor()\n         ]\n\nnames = ['Linear Regression',\n         'Support Vector Regression',\n         'Stochastic Gradient Descent',\n         'Stochastic Gradient Descent 2',\n         'Gradient Boosting Tree',\n         'Random Forest',\n         'Lasso Regression',\n         'Lasso Regression 2',\n         'Ridge Regression',\n         'Bayesian Ridge Regression',\n         'Kernel Ridge Regression',\n         'Kernel Ridge Regression 2',\n         'Elastic Net Regularization',\n         'Elastic Net Regularization 2',\n         'Extra Trees Regression'\n        ]","248dbbc3":"# Define a root mean square error function\ndef rmse(model, X, y):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=5))\n    return rmse","01633bf9":"from sklearn.model_selection import KFold, cross_val_score\nwarnings.filterwarnings('ignore')\n\n# Perform 5-folds cross-validation to evaluate the models \nfor model, name in zip(models, names):\n    # Root mean square error\n    score = rmse(model, X_train_scaled, y_train_transformed)\n    print(\"- {}: Mean: {:.6f}, Std: {:4f}\".format(name, score.mean(), score.std()))","758fe4fc":"from sklearn.model_selection import GridSearchCV\n\nclass gridSearch():\n    def __init__(self, model):\n        self.model = model\n    def grid_get(self, param_grid):\n        grid_search = GridSearchCV(self.model, param_grid, cv=5, scoring='neg_mean_squared_error')\n        grid_search.fit(X_train_scaled, y_train_transformed)\n        grid_search.cv_results_['mean_test_score'] = np.sqrt(-grid_search.cv_results_['mean_test_score'])\n        \n        #print(pd.DataFrame(grid_search.cv_results_)[['params', 'mean_test_score', 'std_test_score']])\n        print('Best Parameters: {}, \\nBest Score: {}'.format(grid_search.best_params_, np.sqrt(-grid_search.best_score_)))","5682f1b6":"gridSearch(KernelRidge()).grid_get({'alpha':[3.5, 4, 4.5, 5, 5.5, 6, 6.5], 'kernel':[\"polynomial\"], 'degree':[3], 'coef0':[1, 1.5, 2, 2.5, 3, 3.5]})","4832ee53":"gridSearch(ElasticNet()).grid_get({'alpha':[0.006, 0.0065, 0.007, 0.0075, 0.008], 'l1_ratio':[0.070, 0.075, 0.080, 0.085, 0.09, 0.095], 'max_iter':[10000]})","96506510":"gridSearch(Ridge()).grid_get({'alpha':[10, 20, 25, 30, 35, 40, 45, 50, 55, 57, 60, 65, 70, 75, 80, 100], 'max_iter':[10000]})","1d1045b9":"gridSearch(SVR()).grid_get({'C':[13, 15, 17, 19, 21], 'kernel':[\"rbf\"], \"gamma\":[0.0005, 0.001, 0.002, 0.01], \"epsilon\":[0.01, 0.02, 0.03, 0.1]})","68b071f3":"gridSearch(Lasso()).grid_get({'alpha':[0.01, 0.001, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009], 'max_iter':[10000]})","916966d0":"ker = KernelRidge(alpha=6.5, coef0=2.5, degree=3, kernel='polynomial')\nela = ElasticNet(alpha=0.007, l1_ratio=0.07, max_iter=10000)\nridge = Ridge(alpha=35, max_iter= 10000)\nsvr = SVR(C=13, epsilon=0.03, gamma=0.001, kernel='rbf')\nlasso = Lasso(alpha=0.0006, max_iter=10000)\nbay = BayesianRidge()","18b6fbf5":"# Create the model (Random Forest Classifier) and run with the train data\nmodel = SVR(C=13, epsilon=0.03, gamma=0.001, kernel='rbf')\nmodel.fit(X_train_scaled, y_train_transformed)\n\n# Generate the predictions running the model in the test data\npredictions = np.exp(model.predict(X_test_scaled))\n\n# Create the output file \noutput = pd.DataFrame({'Id': test_data['Id'], 'SalePrice': predictions})\noutput.to_csv('submission.csv', index=False)\n\nprint(\"Your submission was successfully saved!\")","f3d9e83d":"## 14) Hyper-parameter Tuning\n\nFor choosing the most optimal hyper-parameters, we will perform gird search. the class GridSearchCV exhaustively considers all parameter combinations and generates candidates from a grid of parameter values specified with the param_grid parameter.\nSince we will use the same procedure for all models, we will start by creating a function which takes specified parameter values as entry.","cfcf2b1a":"## 05) Imputation of Missing Values\n\nLet's look at the missing valeus in our data. We will be using `msno` library. This library provides a small toolset of flexible and easy-to-use missing data visualizations and utilities that allows you to get a quick visual summary of the completeness (or lack thereof) of your dataset","dec424ef":"The only missing values that are left are within SalePrice, which is exactly the number of lignes in the test data (the values that we need to predict).","e127d609":"Since only two outliers were dropped, it means that the three features shared the same outlier.","b63542ef":"### 4. Support vector regression","b911d6aa":"## 10) Transformation and Scaling","a6a7bff1":"## 11) Feature Selection","f7ee2de5":"We will use lasso regression (l1 regularization method). Lasso shrinks the less important feature\u2019s coefficient to zero thus, removing some feature altogether. We can also use it to find the most important features in our dataset.","163cafa3":"We see that the models perform almost the same way with a score of 0.116. Let's define these models with the their respective best hyper-parameters.","c083b902":"## 07) Adding Features\n\nFirst, we will map some categorical variable that represent some sort of rating to an integer score.","22c1f849":"## 12) Principal Components Analysis\n\nPrincipal Components Analysis (PCA) is used to decompose a multivariate dataset in a set of successive orthogonal components that explain a maximum amount of the variance.","9e0d4b02":"We can see now that the number of features increases from 95 to 332 because of the feature transformations.","084bc473":"- We observe that `SalePrice` increases almost quadratically with `TotalBsmtSF`, `GrLivArea` and `1stFlrSF`. So we conclude that the price of the houses increases quadratically with its surface area. \n- We also observe that `SalePrice` increases exponentially with `OverallQual`.\n- We also observe from (`GrLivArea`-`1stFlSF`) and (`1stFlSF`-`TotalBsmSF`) that all the points are above the identity function line, which means that the ground living area has the biggest surface of all floors, and that the first floor area is generally bigger than the basement area.\n- We observe the same phenomenon for (`GarageYrBlt`-`YearBuilt`). which makes sense since we start building the garage after building the house, altough there are some exceptions in the data.","a1abc9b6":"Since 'MasVnrArea' only have 23 missing values, we can replace them with the mean of the column","2cb72930":"Based on the previous correlation heatmap, 'LotFrontage' is highly correlated with 'LotArea' and 'Neighborhood'. So let's use the same method to fill the missing values","ab591065":"## 08) Skewness and Kurtosis\n\n**Skewness** is a measure of the asymmetry of the probability distribution of a real-valued random variable about its mean. The skewness value can be positive, zero, negative, or undefined. For a unimodal distribution, negative skew commonly indicates that the tail is on the left side of the distribution, and positive skew indicates that the tail is on the right. \n\n**Kurtosis** is a measure of the \"tailedness\" of the probability distribution of a real-valued random variable. Like skewness, kurtosis describes the shape of a probability distribution and there are different ways of quantifying it for a theoretical distribution and corresponding ways of estimating it from a sample from a population. Different measures of kurtosis may have different interpretations.","28e252af":"We observe that `LotFrontage`, `GarageYrBlt` and `MasVnrArea` are the only one who have missing values","ba74af14":"## 04) Removing Outliers\n\nFrom the previous pair plots, we can see that there are outliers for `TotalBsmtSF`, `1stFlrSF` and `GrLivArea`. Let's use the scatterplot to observe these outliers more precisely","20419244":"- We observe two red squares **(2,2 and 3,3)** in the heatmap indicating high correlation. The first group of highly correlated variables is `TotalBsmtSF` and `1stFlrSF`. The second group is `GarageYrBlt`, `GarageCars` and `GarageArea`. This indicates the presence of multicollinearity.\n- The other four red squares **(1,1)** just indicate an obvious correlation between `GarageYrBlt` and `YearBuilt` and between `TotRmsAbvGrd` and `GrLivArea`","0d5d2b9a":"### 2. Elastic Net Regularization","d1fd0460":"## 13) Testing Different Models\n\nNow that we have finished preparing our data, it's time to test different models to see which one performs the best.\nThe models we will be testing are : \n- Linear Regression\n- Support Vector Regression\n- Stochastic Gradient Descent\n- Gradient boosting tree\n- Random forest\n- Lasso regression\n- Ridge regression\n- Elastic net regularization\n- Extra trees regression","2574c75a":"## 02) Data Description\n\nLet is start by taking a general look at the data we have to get an initial idea about it.","2439c591":"### 3. Ridge regression","7ab7a481":"Normal distribution doesn't fit, so SalePrice need to be transformed before creating the model. Best fit is unbounded Johnson distribution, altough log normal distribution also fits well","feeb8bdb":"We observe that `PoolQC`, `MiscFeature`, `Alley`, `Fence` and `FireplaceQu` have a significant amount of missing values.","fbf8df28":"## 03) Finding Correlation Features\n\nLet's look at some correlation features between all the features.","cf4cd8d0":"First of all, let's start by replacing the missing values in both the training and the test set. So we will be combining both datasets into one dataset","4df56032":"## 09) Label Encoding\n\nFor this section we will use Pipelines which are a way to streamline a lot of the routine processes. It provides a way to take code, fit it to the training data, apply it to the test data without having to copy and paste everything.\n\n- **Skewness**: Doing the transformation in the distribution to remove the positive skew. \n\n- **Label Encoder and One Hot Encoder:** These two encoders are parts of the SciKit Learn library in Python, and they are used to convert categorical data, or text data, into numbers, which our predictive models can better understand.","7c744c93":"Now we split the data to training and testing datasets again.","5f942cbd":"## 06) Correcting Features\n\nIf we take a look at the numeric variables, we see that some of them obviously don't make a sense being numerical like year related features. Let's take a closer look at each one of them in the data description file and see which ones need to be converted to categorical type.","22e5fbe6":"Next, we will add up some numeric features with each other to create new features that make sense","ff08a0d4":"## 15) Making Predictions and Submission\nNow it's time to make predictions and store them in a csv file with corresponding Ids. after we make prediction we need to transform them to their original shape with exponential function","5c636ef4":"### 1. Kernel Ridge Regression","cf5cc834":"# Predicting House Prices \n\n![alt text](https:\/\/image.flaticon.com\/icons\/svg\/70\/70016.svg)\n\n[Leonardo Fuchs](https:\/\/www.kaggle.com\/leofuchs) - May 2020\n\n---\n\nIn this notebook, we will go through the basic steps of making predictions based on a given dataset. The fifteen steps that I followed in this notebook are as follows:\n\n**01)** Importing Libraries and Datasets\n\n**02)** Data Description\n\n**03)** Finding Correlation Features\n\n**04)** Removing Outliers\n\n**05)** Imputation of Missing Values\n\n**06)** Correcting Features\n\n**07)** Adding Features\n\n**08)** Skewness and Kurtosis\n\n**09)** Label Encoding\n\n**10)** Transformation and Scaling\n\n**11)** Feature Selection\n\n**12)** Principal Component Analysis\n\n**13)** Testing Different Models\n\n**14)** Hyper-Parameter Tuning\n\n**15)** Making Predictions and Submission\n\n\n*Observation: This Notebook is based on the notebook presented by [Majdoubi Ahmed Amine](https:\/\/www.kaggle.com\/mjidiba).*","62871b49":"What's intersting here is that two of the variables that we have created 'HouseSF' and 'PorchSF' perform actually bad compared to their components. But when we sum all the surfaces as in 'TotalSF', which is just a combination of features that are significantly unimportant in this model, we suddently obtain the most important feature in the dataset.","0569e374":"We conclude that :\n- `TotalBsmtSF` and `1stFlrSF` are strongly correlated (0.82)\n- `TotRmsAbvGrd` and `GrLivArea` are strongly correlated (0.83)\n- `YearBuilt` and `GarageYrBlt` are strongly correlated (0.83)\n- `GarageCars` and `GarageArea` are strongly correlated (0.88)\n- `OverallQual` and `GrLivArea` are correlated with `SalePrice` (0.79 and 0.71)","064fab90":"There isn't much Kurtosis in the data columns, but Skewness is very present, meaning that distribution is not symetrical.","1f3e6c95":"Based on the previous correlation heatmap, 'GarageYrBlt' is highly correlated with 'YearBuilt', so let's replace the missing values by medians of 'YearBuilt'. To do that, we need to cut 'YearBuilt' into sections since it is a numeric variable","21c15c14":"Surprisingly, the Random forest and Extra trees regression models are the ones who performed the worst, and the linear regression model performed actually pretty good relative to the other models.\nBy compiling the above code several times and observing the different scores each time, we can classify the models by accuracy :\n\n- 1st : Kernel ridge regression\n- 2nd : Elastic net regularization and Bayesian ridge regression\n- 3rd : Ridge regression and Linear regression\n- 4rth : Support vector regression\n- 5th : Gradient boosting tree\n- 6th : Stochastic gradient  and Lasso regression\n- 7th : Random forest and Extra trees regression\n\nI think we got a good score in Elastic net regularization, Lasso regression and Stochastic gradient descent because we chose some good parameters. We can see that their score above is very bad when not specifing parameter values. So if we really want to know to best model, we need to choose optimal parameters for all the models, and tha's what we will do in the next section.","53f79d95":"## 01) Importing Libraries and Datasets","4dcfeb6d":"### 5. Lasso regression"}}