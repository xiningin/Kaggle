{"cell_type":{"5f14c549":"code","c2b37dcf":"code","8d835cfb":"code","203a006c":"code","b1326d12":"code","79550c65":"code","fc6e845a":"code","83c277e9":"code","7bb99868":"code","d8505824":"code","79e4ac8a":"code","8686d10a":"code","2cc1b0a7":"code","241342ab":"code","9052ce54":"code","2f0d10de":"code","3528918d":"code","e5be7813":"code","18ea392e":"code","48aa0322":"code","2bd7f734":"code","85fff690":"code","fe1a95d6":"code","e5df6b78":"code","b3e89fc7":"code","60e8facb":"code","b6762018":"code","86c691ae":"markdown","2baa83bd":"markdown","3c3b1152":"markdown","96416a9a":"markdown","0ab9ea4c":"markdown","bfad48e3":"markdown","8a6d9dd7":"markdown","a6f4035c":"markdown","7ce8e356":"markdown","cbf9a3a9":"markdown","8cfa0e0c":"markdown","b3db9c0d":"markdown","6b4deb95":"markdown","614a31bf":"markdown","8075834d":"markdown","2a005157":"markdown","b058f9a7":"markdown","87b60089":"markdown","045d89fe":"markdown","852d8eae":"markdown","4315789a":"markdown","e8f8badc":"markdown","ae5174f3":"markdown","a24d6aae":"markdown","9ac30d25":"markdown","388d66ee":"markdown","1cd97044":"markdown","5fb19a48":"markdown","7b22a3d2":"markdown","b040d3d1":"markdown","f711ffdf":"markdown","cf94f98d":"markdown","9e0bd825":"markdown","503e7a35":"markdown","ed801b6e":"markdown","4a6b98f5":"markdown","d9600fa5":"markdown","78f272a9":"markdown","889d3d57":"markdown","aca7a5ff":"markdown","f0f5e3c9":"markdown","dcf4ed79":"markdown","3095719e":"markdown","70edc68a":"markdown","d022350b":"markdown","dea84cca":"markdown","102d773d":"markdown","b9ea2dc8":"markdown","d3117bd3":"markdown","523a8d57":"markdown","8058890d":"markdown","12f88296":"markdown","8696d79a":"markdown","21623a33":"markdown","8df3d5fa":"markdown","7c19998d":"markdown","d478d7ff":"markdown"},"source":{"5f14c549":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv('..\/input\/covid19-hist-data\/COVID-19-geographic-disbtribution-worldwide-2020-06-07.csv', delimiter = ';', engine='python')\ndf['Date'] = pd.to_datetime(df[['day','month', 'year']])\ndf = df[df.continentExp != 'Oceania']\ndf.dropna(inplace = True)\ndisplay(df.head())\ndisplay(df.info())","c2b37dcf":"Data_to_plot = df[(df['Date'] == df['Date'].max()) & (df['deaths'] > 0) & (df['cases']> 0)]\n\nfig = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\",)\nfig.update_layout(title=\"Scatter 2\",xaxis_title=\"Cases (log)\",yaxis_title=\"Deaths (log)\")\nfig2 = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\",log_x=True, log_y=True)\nfig2.update_layout(title=\"Scatter 1\",xaxis_title=\"Cases (log)\",yaxis_title=\"Deaths (log)\")\n\nfig.show()\nfig2.show()","8d835cfb":"fig = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\", color=\"continentExp\",log_x=True, log_y=True, labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population'},marginal_y=\"rug\", marginal_x=\"rug\")\nfig.update_layout(title=\"Scatter 3\",xaxis_title=\"Cases (log)\",yaxis_title=\"Deaths (log)\")\nfig.show()\n\nfig2 = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\", color=\"continentExp\",log_x=True, log_y=True,size='popData2018', labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population'},marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\")\nfig2.update_layout(title=\"Scatter 4\",xaxis_title=\"Cases (log)\",yaxis_title=\"Deaths (log)\")\nfig2.show()","203a006c":"Data_to_plot = df[(df['cases'] > 0) & (df['deaths']> 0) & (df['year'] >= 2020)]\nfig = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\", facet_row=\"year\", facet_col=\"month\", color=\"continentExp\", trendline=\"ols\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population'})\nfig.update_layout(title=\"Scatter 5\",xaxis_title=\"Cases\",yaxis_title=\"Deaths\")\nfig.show()\n\nData_to_plot = df[(df['cases'] > 0) & (df['deaths']> 0) & (df['year'] >= 2020)]\nData_to_plot['Date_str']  = Data_to_plot['Date'].astype(str)\nfig2 = px.scatter(Data_to_plot, x=\"cases\", y=\"deaths\", animation_frame=\"Date_str\", size=\"cases\", color=\"continentExp\", hover_name=\"continentExp\", facet_col=\"continentExp\", facet_row=\"year\",log_x=True, log_y=True\n                ,labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'Date_str' : 'Date'})\nfig2.show()","b1326d12":"Data_to_plot = df.groupby('Date')[['deaths', 'cases']].sum().cumsum().reset_index()\nData_to_plot = pd.melt(Data_to_plot, id_vars=['Date'], value_vars=['cases', 'deaths'])\nfig = px.line(Data_to_plot, x=\"Date\", y=\"value\",color= 'variable', labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'value' : 'Value', 'variable' : 'Variable'},line_shape=\"spline\", render_mode=\"svg\")\nfig.update_layout(title=\"Line 1\",xaxis_title=\"Date\",yaxis_title=\"Cases\")\nfig.show()","79550c65":"Data_to_plot = df.groupby(['Date', 'continentExp'])[['deaths', 'cases']].sum().reset_index()\nfig = px.line(Data_to_plot, x=\"Date\", y=\"cases\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population'},line_shape=\"spline\", render_mode=\"svg\", hover_name=\"continentExp\", color = \"continentExp\")\nfig.update_layout(title=\"Line 2 (Cases)\",xaxis_title=\"Date\",yaxis_title=\"Cases\")\nfig.show()\n\nfig2 = px.line(Data_to_plot, x=\"Date\", y=\"deaths\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population'},      line_shape=\"spline\", render_mode=\"svg\", hover_name=\"continentExp\", color = \"continentExp\")\nfig2.update_layout(title=\"Line 3 (Deaths)\",xaxis_title=\"Date\",yaxis_title=\"Deaths\")\nfig2.show()","fc6e845a":"Data_to_plot = df.groupby(['Date', 'continentExp'])[['deaths', 'cases']].sum().reset_index()\nData_to_plot[['cumsum_deaths', 'cumsum_cases']] = Data_to_plot.groupby('continentExp').cumsum()\nfig = px.area(Data_to_plot, x=\"Date\", y=\"cumsum_deaths\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'cumsum_cases' : 'Cumulative Cases', 'cumsum_deaths' : 'Cumulative Deaths'},line_shape=\"spline\", hover_name=\"continentExp\", color = \"continentExp\")\nfig.update_layout(title=\"Area\",xaxis_title=\"Date\",yaxis_title=\"Cumulative Deaths\")\nfig.show()","83c277e9":"Data_to_plot = df.groupby(['Date'])[['deaths', 'cases']].sum().reset_index()\nfig = px.bar(Data_to_plot, x=\"Date\", y=\"cases\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'count':'Count'},)\nfig.update_layout(title=\"Bar 1\",xaxis_title=\"Date\",yaxis_title=\"Cases\")\nfig.show()","7bb99868":"Data_to_plot = df.groupby(['Date'])[['deaths', 'cases']].sum().reset_index()\nData_to_plot = pd.melt(Data_to_plot, id_vars=['Date'], value_vars=['cases', 'deaths'])\nData_to_plot\nfig = px.bar(Data_to_plot, x=\"Date\", y=\"value\", color=\"variable\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'variable':'Variables'},)\nfig.update_layout(title=\"Bar 2\",xaxis_title=\"Date\",yaxis_title=\"Values\")\nfig.show()\nfig2 = px.bar(Data_to_plot, x=\"Date\", y=\"value\", color=\"variable\", barmode=\"group\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'variable':'Variables'},)\nfig2.update_layout(title=\"Bar 3\",xaxis_title=\"Date\",yaxis_title=\"Values\")\nfig2.show()","d8505824":"Data_to_plot = df[df['Date'] == df['Date'].max()].groupby(['countriesAndTerritories'])[['deaths', 'cases']].sum().reset_index().sort_values(by = 'cases', ascending = True).tail(20)\nData_to_plot = pd.melt(Data_to_plot, id_vars=['countriesAndTerritories'], value_vars=['cases', 'deaths'])\nfig = px.bar(Data_to_plot,x='value', y=\"countriesAndTerritories\", color='variable',  text='value', orientation='h', width=700, labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'countriesAndTerritories' : 'Countries', 'variable':'Variables'},color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.update_layout(title=\"Bar 4\",xaxis_title=\"Values\",yaxis_title=\"Countries\")\nfig.show()","79e4ac8a":"Data_to_plot = df.copy()\nData_to_plot['deaths_log']  = np.log10(Data_to_plot['deaths'])\nData_to_plot['cases_log']  = np.log10(Data_to_plot['cases'])\nData_to_plot.head()\nfig = px.density_contour(Data_to_plot, x=\"deaths_log\", y=\"cases_log\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'cases_log' : 'Cases Log10', 'deaths_log' : 'Deaths Log10', 'count':'Count'},)\nfig.update_layout(title=\"Density Contour 1\",xaxis_title=\"Cases (log10)\",yaxis_title=\"Deaths (log10)\")\nfig.show()\nfig2 = px.density_contour(Data_to_plot, x=\"deaths_log\", y=\"cases_log\",color=\"continentExp\", marginal_x=\"rug\", marginal_y=\"histogram\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'cases_log' : 'Cases Log10', 'deaths_log' : 'Deaths Log10', 'count':'Count'},)\nfig2.update_layout(title=\"Density Contour 2\",xaxis_title=\"Cases (log10)\",yaxis_title=\"Deaths (log10)\")\nfig2.show()","8686d10a":"fig = px.density_heatmap(Data_to_plot, x=\"deaths_log\", y=\"cases_log\",marginal_x=\"rug\", marginal_y=\"histogram\",labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'popData2018' : 'Population', 'cases_log' : 'Cases Log10', 'deaths_log' : 'Deaths Log10', 'count':'Count'},)\nfig.update_layout(title=\"Density Heatmap\",xaxis_title=\"Cases (log10)\",yaxis_title=\"Deaths (log10)\")\nfig.show()","2cc1b0a7":"Data_to_plot = df[df['Date'] == df['Date'].max()].groupby(['continentExp'])[['deaths', 'cases']].sum().reset_index()\nfig = px.pie(Data_to_plot, values='cases', names='continentExp',labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'countriesAndTerritories' : 'Countries', 'variable':'Variables'},)\nfig.update_layout(title=\"Pie 1\")\nfig.show()\nData_to_plot = df[df['Date'] == df['Date'].max()].groupby(['countriesAndTerritories'])[['deaths', 'cases']].sum().reset_index()\nfig2 = px.pie(Data_to_plot, values='cases', names='countriesAndTerritories', labels={'continentExp' : 'Continent', 'cases': 'Cases', 'deaths': 'Deaths', 'countriesAndTerritories' : 'Countries', 'variable':'Variables'},)\nfig2.update_layout(title=\"Pie 2\",)\nfig2.show()","241342ab":"Data_to_plot = df[df.month.isin(['1','2','3','4','5'])].groupby(['month', 'countriesAndTerritories'])[['deaths', 'cases']].sum().reset_index()\nData_to_plot['deaths_log']  = np.log10(Data_to_plot['deaths']+1)\nData_to_plot['cases_log']  = np.log10(Data_to_plot['cases']+1)\nfig = px.strip(Data_to_plot, x=\"month\", y=\"cases_log\", labels={'continentExp' : 'Continent', 'cases_log': 'Cases Log10', 'deaths_log': 'Deaths Log10', 'month' : 'Month', 'variable':'Variables'},)\nfig.update_layout(title=\"Strip\")\nfig.show()","9052ce54":"Data_to_plot = df[df.month.isin(['1','2','3','4','5'])].groupby(['month', 'countriesAndTerritories'])[['deaths', 'cases']].sum().reset_index()\nData_to_plot = pd.melt(Data_to_plot, id_vars=['month', 'countriesAndTerritories'], value_vars=['cases', 'deaths'])\nData_to_plot['value_log10']  = np.log10(Data_to_plot['value']+1)\nfig = px.box(Data_to_plot, x=\"month\", y=\"value_log10\", color=\"variable\", notched=True, labels={'variable' : 'Variables', 'cases_log': 'Cases Log10', 'deaths_log': 'Deaths Log10', 'month' : 'Month', 'value_log10':'Values Log10'},)\nfig.update_layout(   title=\"Box\")\nfig.show()","2f0d10de":"fig = px.violin(Data_to_plot, x=\"month\", y=\"value_log10\", color=\"variable\", box=True, points=\"all\", labels={'variable' : 'Variables', 'cases_log': 'Cases Log10', 'deaths_log': 'Deaths Log10', 'month' : 'Month', 'value_log10':'Values Log10'},)\nfig.update_layout(title=\"Violin\")\nfig.show()","3528918d":"df_to_plot =  df[df.month.isin(['2'])][['cases','deaths','day','month', 'continentExp', 'popData2018']]\ndict_ = {'Asia' : 1, 'Europe' : 2, 'Africa' : 3, 'America' : 4}\ndf_to_plot['continentEmap'] = df_to_plot['continentExp'].map(dict_)\ndf_to_plot['cases_log10'] =  np.log10(df_to_plot['cases']+1)\ndf_to_plot['deaths_log10'] =  np.log10(df_to_plot['deaths']+1)\nfig = px.parallel_coordinates(df_to_plot[['cases_log10','deaths_log10','continentEmap']], color = 'continentEmap',labels={'cases_log10' : 'Cases Log10', 'deaths_log10': 'Deaths Log10', 'continentEmap': 'Continent Id', 'month' : 'Month', 'value_log10':'Values Log10'},color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=2)\nfig.update_layout(title=\"Parallel Coordinates\")\nfig.show()","e5be7813":"df_to_plot['cut_cases_log10'] = pd.cut(df_to_plot['cases_log10'], 4).astype(str)\ndf_to_plot['cut_deaths_log10'] = pd.cut(df_to_plot['deaths_log10'], 4).astype(str)\nfig = px.parallel_categories(df_to_plot[['cut_cases_log10','cut_deaths_log10','continentEmap']], color = 'continentEmap',labels={'cut_cases_log10' : 'Interval Cases Log10', 'cut_deaths_log10': 'Interval Deaths Log10', 'continentEmap': 'Continent Id', 'month' : 'Month', 'value_log10':'Values Log10'},color_continuous_scale=px.colors.diverging.Tealrose, color_continuous_midpoint=2)\nfig.update_layout(title=\"Parallel Categories\")\nfig.show()","18ea392e":"df2 =pd.DataFrame(np.random.rand(40,4))\ndf2['label'] = np.round((3*np.random.rand(40,1) - 3)*-1)\ndf2[df2['label'] == 0] = 1\ndf2['label'] = df2['label'].astype(int).map({1:'Label_1', 2:'Label_2', 3:'Label_3'})\ndf2.columns = ['Value_1','Value_2','Value_3','Value_4', 'Labels']\nfig = px.scatter_ternary(df2, a=\"Value_1\", b=\"Value_2\", c=\"Value_3\", color=\"Labels\", size=\"Value_4\", hover_name=\"Labels\",size_max=15, color_discrete_map = {\"Label_1\": \"blue\", \"Label_2\": \"green\", \"Label_3\":\"red\"},labels={'Value_1' : 'Value 1', 'Value_2': 'Value 2', 'Value_3': 'Value 3', 'Value_4' : 'Value 4'})\nfig.update_layout(title=\"Scatter Ternary\")\nfig.show()","48aa0322":"fig = px.line_ternary(df2, a=\"Value_1\", b=\"Value_2\", c=\"Value_3\", color=\"Labels\", hover_name=\"Labels\",line_dash=\"Labels\",color_discrete_map = {\"Label_1\": \"blue\", \"Label_2\": \"green\", \"Label_3\":\"red\"},labels={'Value_1' : 'Value 1', 'Value_2': 'Value 2', 'Value_3': 'Value 3', 'Value_4' : 'Value 4'})\nfig.update_layout(title=\"Line Ternary\")\nfig.show()","2bd7f734":"fig = px.scatter_3d(df2, x=\"Value_1\", y=\"Value_2\", z=\"Value_3\", color=\"Labels\", size=\"Value_4\", hover_name=\"Labels\",symbol=\"Labels\", color_discrete_map = {\"Label_1\": \"blue\", \"Label_2\": \"green\", \"Label_3\":\"red\"},labels={'Value_1' : 'Value 1', 'Value_2': 'Value 2', 'Value_3': 'Value 3', 'Value_4' : 'Value 4'})\nfig.update_layout(title=\"Scatter 3D\")\nfig.show()","85fff690":"df2 = pd.DataFrame(np.round((2.5*np.random.rand(128,1) - 2.5)*-1, 1))\ndf2['label'] = np.round((5*np.random.rand(128,1) - 5)*-1)\ndf2['direction'] = np.round((12*np.random.rand(128,1) - 12)*-1)\ndf2[df2['label'] == 0] = 1\ndf2[df2['direction'] == 0] = 1\ndf2['label'] = df2['label'].astype(int).map({1:'Label_1', 2:'Label_2', 3:'Label_3', 4:'Label_4' , 5:'Label_5'})\ndf2['direction'] = df2['direction'].astype(int).map({1 : 'D1', 2 : 'D2', 3 : 'D3', 4: 'D4', 5 : 'D5', 6 : 'D6', 7 : 'D7', 8 : 'D8', 9 : 'D9', 10 : 'D10', 11 : 'D11', 12 : 'D12'})\ndf2.columns = ['Values','Label','Direction']\nfig = px.scatter_polar(df2, r=\"Values\", theta=\"Direction\", color=\"Label\", symbol=\"Label\",color_discrete_sequence=px.colors.sequential.Rainbow)\nfig.update_layout(title=\"Scatter Polar\")\nfig.show()","fe1a95d6":"fig = px.line_polar(df2,r=\"Values\", theta=\"Direction\", color=\"Label\", line_close=\"Label\",line_dash=\"Label\",color_discrete_sequence=px.colors.sequential.Rainbow)\nfig.update_layout(title=\"Line Polar\")\nfig.show()","e5df6b78":"fig = px.bar_polar(df2,r=\"Values\", theta=\"Direction\", color=\"Label\", template=\"plotly_dark\",color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.update_layout(title=\"Bar Polar\")\nfig.show()","b3e89fc7":"df3 = pd.read_csv('..\/input\/covid19-in-usa\/us_counties_covid19_daily.csv')\ndf3['Date'] = pd.to_datetime(df3['date'])\ndf3 = df3[df3['Date'] == df3['Date'].max()]\ndf3 = df3.groupby('state').sum().reset_index()\n\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https:\/\/www.latlong.net\/category\/states-236-14.html'\n\nr = requests.get(url)\nhtml = r.text\n\nsoup = BeautifulSoup(html)\ntable = soup.find('table')\nrows = table.find_all('tr')\ndata = []\nfor row in rows[1:]:\n    cols = row.find_all('td')\n    cols = [ele.text.strip() for ele in cols]\n    data.append([ele for ele in cols if ele])\n\nresult = pd.DataFrame(data, columns=['Place_Name', 'Latitude', 'Longitude'])\n\nresult['Place_Name'] = result['Place_Name'].str.replace(', the USA', '')\nresult['Place_Name'] = result['Place_Name'].str.replace(', the US', '')\nresult['Place_Name'] = result['Place_Name'].str.replace(', USA', '')\nresult['Place_Name'] = result['Place_Name'].str.replace(' State', '')\nresult['Latitude'] = result['Latitude'].astype(float)\nresult['Longitude'] = result['Longitude'].astype(float)\n\ndf3 = df3.merge(result, left_on='state', right_on='Place_Name')\n","60e8facb":"px.set_mapbox_access_token('pk.eyJ1IjoibWVoZGlnYXNtaSIsImEiOiJjazkwcXplbGowNDNwM25saDBldzY0NmQwIn0.gYQr41tH3KKMOHnml_REeQ')\nfig = px.scatter_mapbox(df3, lat=\"Latitude\", lon=\"Longitude\",  color=\"cases\", size = \"cases\",  zoom=3, labels={'cases' : 'Cases'},  hover_name=\"state\",color_continuous_scale=px.colors.sequential.Plotly3)\nfig.update_layout(title=\"Map 1\")\nfig.show()\n\npx.data.gapminder()\ndf_to_plot = df.groupby(['Date', 'countryterritoryCode', 'countriesAndTerritories', 'month'])['cases','deaths'].sum().reset_index()\ndf_to_plot.loc[df_to_plot.cases < 0,'cases'] = 0\nfig2 = px.scatter_geo(df_to_plot, locations=\"countryterritoryCode\", color=\"cases\", hover_name=\"countriesAndTerritories\", size=\"cases\",labels={'cases' : 'Cases', 'countryterritoryCode' : 'Country', 'month' : 'Month'},projection=\"natural earth\", animation_frame=\"month\", color_continuous_scale=px.colors.sequential.Plotly3)\nfig2.update_layout(title=\"Map 2\")\nfig2.show()\n\ndf_to_plot2 = df_to_plot[df_to_plot.Date == df_to_plot.Date.max()]\nfig3 = px.scatter_geo(df_to_plot2, locations=\"countryterritoryCode\", color=\"deaths\",size=\"deaths\", projection=\"orthographic\", labels={'deaths' : 'Deaths', 'countryterritoryCode' : 'Country', 'month' : 'Month'},color_continuous_scale=px.colors.sequential.Plotly3, hover_name=\"countriesAndTerritories\")\nfig3.update_layout(title=\"Map 3\")\nfig3.show()","b6762018":"fig = px.choropleth(df_to_plot, locations=\"countryterritoryCode\", color=\"cases\", hover_name=\"countriesAndTerritories\", animation_frame=\"month\", range_color=[0,30000], labels={'cases' : 'Cases', 'countryterritoryCode' : 'Country', 'month' : 'Month'}, color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Map 4\")\nfig.show()","86c691ae":"# 16. Scatter Polar <a id=\"17\"><\/a>","2baa83bd":"# 14. Line Ternary <a id=\"15\"><\/a>","3c3b1152":"This is a brief tutorial on one of my favorite visualization libraries, Plotly.\n\nIn this Notebook we will highlight graphics built using the API of plotly which is called Plotly Express which allows to create figures easy to stylized by using a variety of data type.\n\nPlotly Official site : <a href=\"https:\/\/plotly.com\/\">Plotly Official<\/a>","96416a9a":"# 18. Bar Polar <a id=\"19\"><\/a>","0ab9ea4c":"It is possible to display two categories with a bar graph in two ways, the first one is stacked bars or grouped bars. to manipulate it you have to change the value of the attribute 'barmode'.","bfad48e3":"# Import Libraries, Read and Adjust Data <a id=\"1\"><\/a>","8a6d9dd7":"# 2. Line <a id=\"3\"><\/a>","a6f4035c":"The Box plot is like the strip plot but with more information on the allocation of values.\n\nit provides the median, the 4 quarters, the outliers if they exist, the min and the max and most importantly the density of the values where it is located, generally inside the large rectangle.\n\nWe can display two categories at the same time as shown here.","7ce8e356":"# 19. Maps <a id=\"20\"><\/a>","cbf9a3a9":"There is the sensational entry of the trinity force, and yes it is a graph with 3 dimensions represented in 2 dimensions, each axis is a variable and inside is a scatter which represents these point in these 3 dimensions.\n\nIt is effective to represent 3 dimensions in a flat space.\n\nWe can play with the size of the points and the colors as for the previous scatter plots.","8cfa0e0c":"# 6. Density Heatmap <a id=\"7\"><\/a>","b3db9c0d":"It is also possible to create area plots in the same way as line plots, the only thing that changes is the name of the function. 'px.area'","6b4deb95":"# 15.  Scatter 3D <a id=\"16\"><\/a>","614a31bf":"The data of the first map is data on the covid 19 in the dufferantes states in the USA.","8075834d":"The two graphs is a 2D representation on the cases and the dead of Covid 19. However, the first graph is not very legible because there are aberrant cases which zoom out the graph so the other points are found piled up and not very legible.\n\nIt is possible to remedy this by applying the logarithm function on the two axes to reduce the aberrant value while keeping the real values displayed on the axes and the tooltip.\n\nthis is really practical because in real time we treat the aberrant values by applying the logarithm to the basic data which arranges the display but distorts the values.\n\napplying the Log is done by combining the attributes 'log x' and 'log_y' to True.","2a005157":"# 4. Bar <a id=\"5\"><\/a>","b058f9a7":"As for the Line Ternary we can interchange the points by lines.","87b60089":"It is also possible to create subplots depending on a chosen category as shown in the first graph.\n\nAlso animate all this by changing the arrangement of the points relative to the date click Play in the second graph to see. Isn't that extraordinary?\n\nthere is a rumor which says that the first season of the Simpsons was made in this way .... I'm joking x) but it is possible!\n\nThe attributes which make it possible to realize the sub graphs are 'facet_col' and 'facet_row' and to realize an animation worthy of spielberg it is necessary to choose a value of time and to attribute it to 'animation_frame'","045d89fe":"This time instead of displaying 3 dimensions we can display several in a polar, here we have 12 axes, and each point inside corresponds to its value relative to this axis, it is possible to change the shape of the points with the attribute 'symbol'.","852d8eae":"The advantage of plotly compared to other libraries like Matplotlib or Seaborn, Plotly offers the possibility of interaction after display, it is possible to see the detail of a specific place with the tooltips, the possibility of applying filters and also to animate the graphs by making them change in relation to a unit of time and many other interactions.\n\nThis makes Plotly interesting for statisticians and also the general public and business. This makes Plotly interesting for statisticians and also the general public and business. We also use this interactivity to build Dashboards.","4315789a":"# 12. Parallel Categories <a id=\"13\"><\/a>","e8f8badc":"In this notebook i have chosen 3 data sets :\n<ul>\n  <li>Data updated on Covid 19 worldwide. Nothing better than manipulating the current trend data =).<\/li>\n  <li>Data generated randomly. To display the ternary graphs I needed 3 features with the same unit so I had to call numpy for that.<\/li>\n  <li>Data on Covid 19 but this time they are devoted to the states of the USA to display a global map of the United States and display the evolution of the epidemic on this map <\/li>\n<\/ul>\n\nIt is not a DEA on the covid 19, it is that I use these data for the different graphs because they are more meaningful at the moment.","ae5174f3":"# 9. Box <a id=\"10\"><\/a>","a24d6aae":"# 8. Strip <a id=\"9\"><\/a>","9ac30d25":"# 17. Line Polar <a id=\"18\"><\/a>","388d66ee":"# Conclusion <a id=\"22\"><\/a>\n\nPlotly is a great and versatile library, it allows you to generate basic graphs like lines, bars and pie but also it generates other original graphs like polar, ternary and parallel and also various maps for the good of in our eyes, the advantage of plotly graphs is that they are interactive and can be exploited by Muggles in other words by people who are part of the comain of mortals who do not know the enchanted world of data science.\n\nAll this is possible easily and in no more than two lines of code thanks to the API of plotly Express. using the low level everything will become more flexible and the possibilities will be increased tenfold.","1cd97044":"**Please, if you have suggestions to improve the content of my notebooks leave me your opinion in comments, and if you found this tutorial useful or simply you like to see these colorful graphs leave me an UpVote that motivates me.  =)**","5fb19a48":" # 11. Parallel Coordinates <a id=\"12\"><\/a>","7b22a3d2":"All graphs that are displayed I used the 'plotly.express' API\n\nI also call 'update_layout' to update the title and the names of the axes.\n\nAlso in all the graphics the first attribute is the data in Pandas Dataframe format and then the X and Y axes and sometimes Z which are the name of the column which represents these axes.\n","b040d3d1":"Hey!!! Thanks for reaching the end =D. I hope these graphs will help you in your own analyzes, give me your opinion on everything that happened above, Upvote if you want, it motivates me to invest myself again and again in future NoteBouks, see you soon, Bye =)","f711ffdf":"# 3. Area <a id=\"4\"><\/a>","cf94f98d":"# 13. Scatter Ternary <a id=\"14\"><\/a>","9e0bd825":"The Parallel Coordinates is one of the strong plot of Plotly, each pillar represents a continuous variable which is a feature of the input DataFrame and each link between these pillars is a row of the DataFrame.\n\nthe number of links in this graph corresponds to the number of rows in the DataFrame and we can choose the color criteria according to the varibal we choose, here it is continent Id.\n\nThis graph is very useful for understanding the main characteristics of a chosen variable by analyzing the routing of the links through the dimensions. it is exceptional!","503e7a35":"The Parallel Categories is almost the same as Parallel Coordinates but this time if it is discrete variables which are represented by the pillars and not continuous variables.\n\nThe dimensions are linked by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence of the combination of categories in the data set. WOW!","ed801b6e":"# Contents\n\n* [<font size=4>Import Libraries, Read and Adjust Data<\/font>](#1)\n* [<font size=4>1. Scatter<\/font>](#2)\n* [<font size=4>2. Line<\/font>](#3)\n* [<font size=4>3. Area<\/font>](#4)\n* [<font size=4>4. Bar<\/font>](#5)\n* [<font size=4>5. Density Contours<\/font>](#6)\n* [<font size=4>6. Density Heatmap<\/font>](#7)\n* [<font size=4>7. Pie<\/font>](#8)\n* [<font size=4>8. Strip<\/font>](#9)\n* [<font size=4>9. Box<\/font>](#10)\n* [<font size=4>10. Violin<\/font>](#11)\n* [<font size=4>11. Parallel Coordinates<\/font>](#12)\n* [<font size=4>12. Parallel Categories<\/font>](#13)\n* [<font size=4>13. Scatter Ternary<\/font>](#14)\n* [<font size=4>14. Line Ternary<\/font>](#15)\n* [<font size=4>15.  Scatter 3D<\/font>](#16)\n* [<font size=4>16. Scatter Polar<\/font>](#17)\n* [<font size=4>17. Line Polar<\/font>](#18)\n* [<font size=4>18. Bar Polar<\/font>](#19)\n* [<font size=4>19. Maps<\/font>](#20)\n* [<font size=4>20. Choropleth<\/font>](#21)\n* [<font size=4>Conclusion<\/font>](#22)","4a6b98f5":"<img src=\"https:\/\/i.postimg.cc\/TwYsbYT4\/density-countour.png\" align=\"right\" width=\"500\" height=\"400\">\nDensity contour is a graph which count the densest places with small circles and count for the least dense places with larger circles as shown in the capture on the right.\n\nGuess ... we can do this with plotly, we can even display countour plot for each category at the same time and add graphs to the marginals, it's so cool.\n\nThe attributes that allow this are the same as for the scatter.\n<BR CLEAR=\u201dleft\u201d \/>\n\n","d9600fa5":"It is also possible to display the bar chart vertically by changing the 'orientation' attribute and also display the values with the 'text' attribute.","78f272a9":"<img src=\"https:\/\/i.postimg.cc\/8zQ2VmqV\/t625c.jpg\" align=\"right\" width=\"300\" height=\"400\">\n\nWe can make scatter plots more interesting by changing the color of the points so that it represents a specific category and by highlighting the dencity of the points according to the perspective of the axes by displaying rug on the two marginal. as shown in the first graph.\n\nIt is also possible to modify the size of the points according to a specific measure, display the perspectives of the scatter with a boxplot or a violin plot and the most important thing is that we can display the linear regression of the points with their formula like this. is shown in the second graph. Isn't that great?\n\nThe lines appear curved because of the Log function but if we did not apply the lines will be straight.\n\nWe can put on the marginal what we want by modifying the attributes 'marginal_x' and 'marginal_y', Change the point size with 'size' and add the regression line with 'trendline'.\n\n<BR CLEAR=\u201dleft\u201d \/>","889d3d57":"We can absolutely display several map forms with Plotly, let's explore them one by one:\n\n- the first map is a map zoomed on the USA, each point is arranged according to the geographic coordinates that I scrapped on a site which provides the geolocation of the states of the USA, we assign the longitude to the attribute 'lon' and the latitude to attribute 'lat', the size and color of each point corresponds to the value entered, here it is the number of cases infected by covid 19. we can choose the zoom with the attribute 'zoom', it's crazy that plotly recognize them so easily. We can also change the theme of the map using the tocken provided by the MpBox site, this site has too good a map with a lot of detail with the names of the streets and the layout of the many shops. Website : <a href=\"https:\/\/www.mapbox.com\/\">mapbox<\/a>\n\n- The second map displays the same information as the first but this time it is animated by month. if we click on play we see the evolution of cases infected by covid 19 around the world since December 2019 until June 2020 we can do that to the attribute 'animation_frame'. it's fascinating. the second diffrance is the projection of the map this time it's \"natural earth\" we can change that by manipulating the attribute 'projection'. Plotly recognized the location of the countries not with their coordinates but with their code, it is universal and it is fortunately provided with the file i uploaded =).\n\n- The third map is the same as the second except that it is not animated (we can of course animate it) it is frozen on a precise date, and also it is spherical as in reality, \"flat earthers will not like the one\" x).","aca7a5ff":"The stip graphs are graphs that show the arrangement of a categorical variable with a continuous variable. and it appears as dots that form columns.\n\nThis shows the distribution of continuous values for each category.","f0f5e3c9":"# 1. Scatter <a id=\"2\"><\/a>","dcf4ed79":"Obviously Plotly also has the pedestal base and it manages it very well, it manages the space well to display the values in (percentage or not) even in small corners. it brings out the colors and there are lots of aesthetic changes that i do not have enough room to locate everything if not it will not be a notebook but an old scroll.","3095719e":"It's no wonder that you can display a bar graph with Plotly, it's basic, I want to say =).","70edc68a":"<img src=\"https:\/\/i.postimg.cc\/y82XjDRB\/logo-plotly.png\" alt=\"Plotly Logo\" width=\"600\" height=\"600\">","d022350b":"And also we just pointed the 3rd axis in depth to display an interactive 3D space which shows the arrangement of the points in 3D.\n\nThis graph can be manipulated by remaining on the left click and moving the mouse, the perspective of the graph changes and follows the movement.","dea84cca":"#  7. Pie <a id=\"8\"><\/a>","102d773d":"We can also display the densest places with a hitmap as for a heat sensor.","b9ea2dc8":"Here I generate random values between 0 and 1 for the following graphs.","d3117bd3":"A simple banal line plot with 2 progression curves.","523a8d57":"# 5. Density Contours <a id=\"6\"><\/a>","8058890d":"Finally it's the top! , I have merged everything in a choropleth map with one animation per month which is good, instead of displaying simple points there it is all the pay which is nuanced compared to the number of cases in its territory, as in previous maps, plotly to find which country it is thanks to the country code and it automatically filled the entire territory of the country with the color that corresponds to the number of cases in the latter. it's amazing.\n","12f88296":"# 20. Choropleth <a id=\"21\"><\/a>","8696d79a":"This graph is too beautiful, it represents the value by cones on each axis, each conn is devised in several pieces or the size is proportional to the value of the observation in the axis in question.\n\nwith a black background and young, orange and red shades it is too sexy\n\nit is exceptional I am in love.\n\n![tenor.gif](attachment:tenor.gif)","21623a33":"The violin plot are very similar to the box the only difference is instead of mounting the space between the second quartil and the fourth is a violin instead of a box, it is better because it is more explicit, the shape of the violin also changes depending on the density.\n\nWe can display the graphs in violin and also the stripes at the same time as displayed here.","8df3d5fa":"# 10. Violin <a id=\"11\"><\/a>","7c19998d":"In these graphs I displayed several curves in the same graph where each curve corresponds to information on a specific continent. What is interesting here is that it is possible to display titles in bold in the Tooltips, in the example I chose the name of the continent.\n\nIt is also possible to make the curves more beautiful by rounding the angles with the parameter 'line_shape'.","d478d7ff":"It is obviously possible to change the points by lines and change the continuity of the lines with the variable 'line_dash'."}}