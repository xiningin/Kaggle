{"cell_type":{"39e9380e":"code","09c647a2":"code","19c7d308":"code","87ab94c4":"code","b609c6a9":"code","d3a2260d":"code","f19f2610":"code","92c3adc2":"code","49c25106":"code","f9a59dec":"code","adedae19":"code","be4b0304":"code","482949c7":"markdown","12230a3e":"markdown","b15425fa":"markdown","957d179f":"markdown","0fc90738":"markdown","6819a169":"markdown","42d6e14e":"markdown","9e7c8b97":"markdown","5793d186":"markdown","97ade8b1":"markdown","aa734dfd":"markdown","56c8e1a3":"markdown","1a8e5f86":"markdown","454a3e09":"markdown","def1244d":"markdown","e2c65451":"markdown","d249e619":"markdown","bbf5aaa4":"markdown","c121420d":"markdown","d8ad9147":"markdown"},"source":{"39e9380e":"# \u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.model_selection import train_test_split\n\n# light GBM \u306e\u6e96\u5099\n! pip install lightgbm\nimport lightgbm as lgb\n\n# Warning\u304c\u3046\u308b\u3055\u3044\u306e\u3067\u304d\u308b\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","09c647a2":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\ntrain_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')","19c7d308":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30e9\u30d9\u30eb\u3092\u4ed8\u4e0e\ntrain_df['Dataset'] = 'train'\ntest_df['Dataset'] = 'test'\n\n# \u4e00\u3064\u306b\u307e\u3068\u3081\u308b\nall_df = pd.concat([train_df, test_df])","87ab94c4":"# \u7279\u5fb4\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306e\u5b9a\u7fa9\nfeature_cols_origin = [\n    'deg_C',\n    'absolute_humidity',\n    'relative_humidity',\n    'sensor_1',\n    'sensor_2',\n    'sensor_3',\n    'sensor_4',\n    'sensor_5',\n]\nfeature_cols_benzene = [\n    'absolute_humidity',\n    'deg_C',\n    'sensor_1',\n    'sensor_2',\n    'sensor_3',\n    'sensor_4',\n    'sensor_5',\n    'oclock',\n    'is_weekend',\n    'before_deg_C_1',\n    'before_deg_C_2',\n    'before_deg_C_3',\n    'before_deg_C_4',\n    'before_deg_C_5',\n    'before_abs_hum_1',\n    'before_abs_hum_2',\n    'before_abs_hum_3',\n    'before_abs_hum_4',\n    'before_abs_hum_5',\n]\nfeature_cols_carbon = [\n    'absolute_humidity',\n    'deg_C',\n    'sensor_1',\n    'sensor_2',\n    'sensor_3',\n    'sensor_4',\n    'sensor_5',\n    'oclock',\n    'is_weekend',\n    'before_deg_C_1',\n    'before_deg_C_2',\n    'before_deg_C_3',\n    'before_deg_C_4',\n    'before_deg_C_5',\n    'before_abs_hum_1',\n    'before_abs_hum_2',\n    'before_abs_hum_3',\n    'before_abs_hum_4',\n    'before_abs_hum_5',\n#     'target_benzene',\n]\nfeature_cols_nitrogen = [\n    'absolute_humidity',\n    'deg_C',\n    'sensor_1',\n    'sensor_2',\n    'sensor_3',\n    'sensor_4',\n    'sensor_5',\n    'oclock',\n    'is_weekend',\n    'before_deg_C_1',\n    'before_deg_C_2',\n    'before_deg_C_3',\n    'before_deg_C_4',\n    'before_deg_C_5',\n    'before_abs_hum_1',\n    'before_abs_hum_2',\n    'before_abs_hum_3',\n    'before_abs_hum_4',\n    'before_abs_hum_5',\n#     'target_carbon_monoxide'\n]\n\ntarget_cols = [\n    'target_carbon_monoxide',\n    'target_benzene',\n    'target_nitrogen_oxides'\n]","b609c6a9":"all_df['oclock'] = all_df['date_time'].str[-8:-6].astype('int16')\nall_df['oclock']","d3a2260d":"all_df[\"is_weekend\"] = (pd.to_datetime(all_df[\"date_time\"]).dt.dayofweek>=5).astype(\"int\")","f19f2610":"all_df['before_deg_C_1'] = all_df['deg_C'].shift(1)\nall_df['before_deg_C_2'] = all_df['deg_C'].shift(2)\nall_df['before_deg_C_3'] = all_df['deg_C'].shift(3)\nall_df['before_deg_C_4'] = all_df['deg_C'].shift(4)\nall_df['before_deg_C_5'] = all_df['deg_C'].shift(5)\nall_df['before_deg_C_5'] = all_df['deg_C'].shift(5)\nall_df['before_abs_hum_1'] = all_df['absolute_humidity'].shift(1)\nall_df['before_abs_hum_2'] = all_df['absolute_humidity'].shift(2)\nall_df['before_abs_hum_3'] = all_df['absolute_humidity'].shift(3)\nall_df['before_abs_hum_4'] = all_df['absolute_humidity'].shift(4)\nall_df['before_abs_hum_5'] = all_df['absolute_humidity'].shift(5)\nall_df['before_abs_hum_5'] = all_df['absolute_humidity'].shift(5)\nall_df = all_df.iloc[5:]\nall_df","92c3adc2":"import numpy as np\n\ndef minmax_norm(x, axis=None):\n    min = x.min(axis=axis, keepdims=True)\n    max = x.max(axis=axis, keepdims=True)\n    result = (x-min)\/(max-min)\n    return result\n\nfor feature in feature_cols_origin:\n    all_df[feature] = minmax_norm(all_df[feature].to_numpy())\nall_df","49c25106":"# \u8a13\u7df4\u30c7valid\u30fc\u30bf\u3068\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\nall_train = all_df[all_df['Dataset']=='train']\nall_train = all_train.drop(columns=['Dataset'])\ntrain, valid = train_test_split(all_train, random_state=42)\nX_train_carbon, y_train_carbon = train[feature_cols_carbon], train[target_cols[0]]\nX_train_benzene, y_train_benzene = train[feature_cols_benzene], train[target_cols[1]]\nX_train_nitrogen, y_train_nitrogen = train[feature_cols_nitrogen], train[target_cols[2]]\nX_valid_carbon, y_valid_carbon = valid[feature_cols_carbon], valid[target_cols[0]]\nX_valid_benzene, y_valid_benzene = valid[feature_cols_benzene], valid[target_cols[1]]\nX_valid_nitrogen, y_valid_nitrogen = valid[feature_cols_nitrogen], valid[target_cols[2]]\n\n# X_train, y_train_carbon, y_train_benzene, y_train_nitrogen  = train[feature_cols], train[target_cols[0]], train[target_cols[1]], train[target_cols[2]]\n# X_valid, y_valid_carbon, y_valid_benzene, y_valid_nitrogen  = valid[feature_cols], valid[target_cols[0]], valid[target_cols[1]], valid[target_cols[2]]\n\n# LightGBM\u306b\u306f\u3053\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067\u63a1\u7528\u3055\u308c\u3066\u308b\u8a55\u4fa1\u95a2\u6570rmsle\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\n# y \u21d2 t (=np.log1p(y))\n# \u3092\u9069\u7528\u3057\u305ft\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3092\u5b9f\u65bd\u3055\u305b\u308b\n# \u53c2\u8003...https:\/\/www.guruguru.science\/competitions\/13\/discussions\/cbb736e9-f0f7-4847-811e-fe038e8ed0e8\/\nt_train_carbon, t_train_benzene, t_train_nitrogen = np.log1p(y_train_carbon), np.log1p(y_train_benzene), np.log1p(y_train_nitrogen)\nt_valid_carbon, t_valid_benzene, t_valid_nitrogen = np.log1p(y_valid_carbon), np.log1p(y_valid_benzene), np.log1p(y_valid_nitrogen)\n\n# Light GBM\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6e96\u5099\ntrain_carbon = lgb.Dataset(X_train_carbon, t_train_carbon)\nvalid_carbon = lgb.Dataset(X_valid_carbon, t_valid_carbon)\ntrain_benzene = lgb.Dataset(X_train_benzene, t_train_benzene)\nvalid_benzene = lgb.Dataset(X_valid_benzene, t_valid_benzene)\ntrain_nitrogen = lgb.Dataset(X_train_nitrogen, t_train_nitrogen)\nvalid_nitrogen = lgb.Dataset(X_valid_nitrogen, t_valid_nitrogen)\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u6761\u4ef6\u306e\u5b9a\u7fa9\nparams = {\n    \"objective\": \"regression\",\n    \"metric\": \"rmse\"\n}\n\n# \u5b66\u7fd2\u306e\u5b9f\u65bd\nmodel_carbon = lgb.train(\n    params = params,\n    train_set = train_carbon,\n    valid_sets = [train_carbon, valid_carbon],\n    num_boost_round = 300,\n    verbose_eval=20\n)\nmodel_benzene = lgb.train(\n    params = params,\n    train_set = train_benzene,\n    valid_sets = [train_benzene, valid_benzene],\n    num_boost_round = 300,\n    verbose_eval=20\n)\nmodel_nitrogen = lgb.train(\n    params = params,\n    train_set = train_nitrogen,\n    valid_sets = [train_nitrogen, valid_nitrogen],\n    num_boost_round = 300,\n    verbose_eval=20\n)","f9a59dec":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6e96\u5099\nall_test = all_df[all_df['Dataset']=='test']\nall_test = all_test.drop(columns=['Dataset'])\nX_test_carbon = all_test[feature_cols_carbon]\nX_test_benzene = all_test[feature_cols_benzene]\nX_test_nitrogen = all_test[feature_cols_nitrogen]\n\n# \u63a8\u8ad6\u306e\u5b9f\u65bd\nt_predict_carbon = model_carbon.predict(X_test_carbon)\nt_predict_benzene = model_benzene.predict(X_test_benzene)\nt_predict_nitrogen = model_nitrogen.predict(X_test_nitrogen)\n\n# \u63a8\u8ad6\u7d50\u679c\u306ft\u3092\u63a8\u8ad6\u3057\u3066\u3044\u308b\u305f\u3081\u3001\n# t \u21d2 y (=np.expm1(y))\n# \u3067y\u3092\u8a08\u7b97\u3059\u308b\npredict_carbon = np.expm1(t_predict_carbon)\npredict_benzene = np.expm1(t_predict_benzene)\npredict_nitrogen = np.expm1(t_predict_nitrogen)\n\n# submission\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\ndate_time = all_test['date_time']\nsubmission_data = pd.DataFrame(np.array([date_time, predict_carbon, predict_benzene, predict_nitrogen]).T,\n                              columns=['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\nsubmission_data","adedae19":"for col in feature_cols_origin:\n    fig = plt.figure(figsize=[24, 10])\n\n    x = pd.to_datetime(train_df['date_time'], format='%Y-%m-%d %H:%M:%S').to_list()\n    y = train_df[col].to_list()\n    plt.plot(x, y, label='train')\n\n    x = pd.to_datetime(test_df['date_time'], format='%Y-%m-%d %H:%M:%S').to_list()\n    y = test_df[col].to_list()\n    plt.plot(x, y, label='test')\n\n    plt.xlim([pd.to_datetime(train_df.iloc[0]['date_time'], format='%Y-%m-%d %H:%M:%S')\n          , pd.to_datetime(test_df.iloc[-1]['date_time'], format='%Y-%m-%d %H:%M:%S')])\n    plt.xlabel('date time')\n    plt.ylabel(col)\n    plt.legend()\n    plt.show()\n\nfor col in target_cols:\n    fig = plt.figure(figsize=[24, 10])\n\n    x = pd.to_datetime(train_df['date_time'], format='%Y-%m-%d %H:%M:%S').to_list()\n    y = train_df[col].to_list()\n    plt.plot(x, y, label='train')\n\n    x = pd.to_datetime(submission_data['date_time'], format='%Y-%m-%d %H:%M:%S').to_list()\n    y = submission_data[col].to_list()\n    plt.plot(x, y, label='submission_data')\n\n    \n    plt.xlim([pd.to_datetime(train_df.iloc[0]['date_time'], format='%Y-%m-%d %H:%M:%S')\n              , pd.to_datetime(test_df.iloc[-1]['date_time'], format='%Y-%m-%d %H:%M:%S')])\n    plt.xlabel('date time')\n    plt.ylabel(col)\n    plt.legend()\n    plt.show()","be4b0304":"submission_data.to_csv('submission_first_model.csv', index=False)","482949c7":"### target\u30c7\u30fc\u30bf\u3092\u307b\u304b\u306etarget\u30c7\u30fc\u30bf\u306e\u63a8\u8ad6\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b","12230a3e":"## 4. \u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3067test\u30c7\u30fc\u30bf\u3092\u63a8\u8ad6 + \u63d0\u51fa","b15425fa":"## 2. \u30c7\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 ","957d179f":"### 2.2 \u6642\u523b\u30c7\u30fc\u30bf\u3092\u4ed8\u52a0\n\n\u6642\u523b\u306b\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308b\u4e8b\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3001`date_time`\u306e\u6642\u523b\u3001\u4e0a2\u30b1\u30bf\u306e\u30c7\u30fc\u30bf\u3092\u6642\u523b\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3057\u3001`oclock`\u3068\u3059\u308b\u3002","0fc90738":"### 2.3. \u9031\u672b\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n\n\u9031\u672b\u304b\u3069\u3046\u304b\u306b\u3088\u3063\u3066\u5927\u6c17\u6c5a\u67d3\u306e\u5f71\u97ff\u304c\u5909\u308f\u3063\u3066\u6765\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u305f\u3081\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0","6819a169":"### 2.6. \u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316\n\nminmaxnorm\u3092\u7528\u3044\u3066\u8aac\u660e\u5909\u6570\u5168\u3066\u6b63\u898f\u5316\u3092\u884c\u3046","42d6e14e":"### 3.1 \u30e2\u30c7\u30eb\u306e\u4f5c\u6210","9e7c8b97":"**\u30a4\u30f3\u30dd\u30fc\u30c8**","5793d186":"**\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f**","97ade8b1":"\u7279\u5fb4\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u3053\u3053\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304f","aa734dfd":"### 4.2. \u63a8\u8ad6\u7d50\u679c\u3092\u7c21\u5358\u306b\u63cf\u753b\u3057\u3066\u78ba\u8a8d","56c8e1a3":"### 2.1 \u5168\u4f53\u306e\u524d\u51e6\u7406\n\n\u4e8c\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u307e\u3068\u3081\u3066\u524d\u51e6\u7406\u3092\u3059\u308b\u306e\u3067\u3001\u5b66\u7fd2\u7528\u3068\u4e88\u6e2c\u7528\u3092\u5224\u65ad\u3059\u308b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u304a\u304f\u3002","1a8e5f86":"# TPS July First Model(LightGBM)\u306e\u4f5c\u6210\n\n[TPS July](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jul-2021) \u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u4e00\u90e8\u884c\u3044\u3001XGBoost\u3067\u63a8\u8ad6\u3092\u884c\u3046\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b.\n\n\u4eca\u56de\u4f5c\u6210\u3059\u308b\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u65b9\u91dd\u3067\u4f5c\u6210\u3059\u308b.\n\n- \u8aac\u660e\u5909\u6570\n    - \u6642\u523b\u30c7\u30fc\u30bf...**\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u8ffd\u52a0**\n    - \u6e29\u5ea6\u30c7\u30fc\u30bf(\u7d76\u5bfe\u5024)\n    - \u6e7f\u5ea6\u30c7\u30fc\u30bf(\u7d76\u5bfe\u5024)\n    - sensor1\n    - sensor2\n    - sensor3\n    - sensor4\n    - sensor5\n\n- \u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\n    - \u4e00\u9178\u5316\u70ad\u7d20\n    - \u30d9\u30f3\u30bc\u30f3\n    - \u7a92\u7d20\u9178\u5316\u7269\n    \n\u307e\u305f\u3001[\u3053\u306e\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3](https:\/\/www.kaggle.com\/anjalianupam\/tps-july-eda)\u304b\u3089\u3001\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u3044\u3082\u306e(\u7d76\u5bfe\u50240.5\u4ee5\u4e0a)\u3092\u63a8\u8ad6\u3067\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b.\n\n\u305d\u3057\u3066\u3001\n- benzene\u21d2sensor_2\u3068\u76f8\u95a2\u304c\u5f37\u3044\n- carbon\u21d2benzene\u3068\u76f8\u95a2\u304c\u5f37\u3044\n- nitrogen\u21d2carbon\u3068\u76f8\u95a2\u304c\u5f37\u3044\n\n\u3068\u3044\u3046\u3053\u3068\u304b\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3082\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b.","454a3e09":"## 3. \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n\nLight GBM\u3092\u7528\u3044\u305f\u5b66\u7fd2\u3092\u5b9f\u65bd\u3059\u308b.\n\n- \u53c2\u8003\u30a2\u30c9\u30ec\u30b9\nhttps:\/\/htomblog.com\/python-lightgbm#toc2","def1244d":"\u4ee5\u4e0a","e2c65451":"### \u5b63\u7bc0\u30e9\u30d9\u30eb\u3092\u8ffd\u52a0","d249e619":"### 2.4. 1~5\u6642\u9593\u524d\u306e\u6e29\u5ea6\u30c7\u30fc\u30bf\u3001\u6e7f\u5ea6\u30c7\u30fc\u30bf\u3092\u30e9\u30b0\u30c7\u30fc\u30bf\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\n\n\u98a8\u304c\u5f37\u304f\u306a\u3063\u305f\u308a\u3001\u96e8\u304c\u964d\u3063\u305f\u308a\u3059\u308b\u3068\u6c5a\u67d3\u304c\u548c\u3089\u3050\u3068\u306e\u7d50\u679c\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\n\n\u98a8\u3001\u96e8=\uff1e\u6c17\u5727\u5909\u5316\u304c\u767a\u751f=\uff1e\u76f4\u8fd1\u306e\u6e29\u5ea6\u5909\u5316\n\n\u3068\u3044\u3046\u95a2\u4fc2\u6027\u304c\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u30015\u6642\u9593\u524d\u307e\u3067\u306e\u6e29\u5ea6\u5dee\u3092\u7279\u5fb4\u5909\u6570\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059\u3002\n\uff08\u3053\u3053\u3067\u6700\u521d\u306e5\u6642\u9593\u5206\u306e\u30c7\u30fc\u30bf\u306fNan\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u3072\u3068\u307e\u305a\u9664\u304f\uff09","bbf5aaa4":"### 4.4. \u63d0\u51fa\u30c7\u30fc\u30bf\u3092CSV\u306b\u51fa\u529b","c121420d":"## 1. \u30a4\u30f3\u30dd\u30fc\u30c8+\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u6e96\u5099","d8ad9147":"### 4.1. \u63a8\u8ad6\u306e\u5b9f\u65bd"}}