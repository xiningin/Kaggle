{"cell_type":{"723b497c":"code","459f7c39":"code","5d6c18f2":"code","ebbc1c9b":"code","7acb3d21":"code","cead780b":"code","b19689ce":"code","f47e6fe5":"code","74291a1d":"code","6f0a5135":"code","839b1e87":"code","eac019a6":"code","95bda3f5":"code","f47b8867":"code","a364f575":"code","b9abd47a":"code","6ad90432":"code","0c422c73":"code","cb7d5e20":"code","85d15e58":"code","9348c7d9":"code","679fc059":"code","592b4d53":"code","6e5b9b70":"code","b889a3ce":"code","f248671c":"code","cb39e726":"code","3b4c7f48":"code","e0104301":"code","32918b52":"code","107b1a92":"code","698392b3":"code","885eab05":"code","3dc1ba1b":"code","64b3fa59":"code","c014d9fe":"code","e62099f0":"code","fea26131":"code","b53a65a6":"code","07caaefe":"code","7ce8fe56":"code","e91aad60":"code","4aa8d654":"code","b9c33a68":"code","326fd35e":"code","08d5750a":"code","0a4fe122":"code","6da6e13f":"code","698621fd":"code","20b695bb":"code","df7b98d7":"code","ded90318":"code","2d1428ec":"code","7e1c6afc":"code","646ca4b6":"code","62b7fbdd":"code","42e85f14":"code","8ea1a460":"code","b6a95575":"code","e6a6212d":"code","fd9e3b90":"code","791add4d":"code","f68d9f46":"code","3b2fc390":"code","ac7e9b94":"code","56cc9120":"code","98f809a7":"code","a7552e1f":"code","8cd0006b":"code","c770f2ec":"code","609e7979":"code","0cf9ab13":"code","1bf86fd1":"code","e75368a3":"code","e70a1094":"code","4c33404e":"code","c8cd2836":"markdown","6a66c6a1":"markdown","565cea8c":"markdown","5f2295bd":"markdown","ab8a7af5":"markdown","aacfb0a0":"markdown","679b1f7a":"markdown","639fa63e":"markdown","1a147c54":"markdown","7e6ed7d6":"markdown","003118bc":"markdown","31fd1fae":"markdown","42b3fb17":"markdown","ca214665":"markdown","b20c1106":"markdown","fe690bb3":"markdown","5703d940":"markdown","55d332d2":"markdown","6d6309d5":"markdown","95ea864d":"markdown","73045bd4":"markdown","a23a2359":"markdown","9da7b4f0":"markdown","ebee7846":"markdown","58a6d958":"markdown"},"source":{"723b497c":"!pip install git+https:\/\/github.com\/fastai\/fastai@2e1ccb58121dc648751e2109fc0fbf6925aa8887 2>\/dev\/null 1>\/dev\/null","459f7c39":"from fastai.imports import *\nfrom fastai.structured import *\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport numpy as np \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier #for the model\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz #plot tree\nfrom sklearn.metrics import roc_curve, auc #for model evaluation\nfrom sklearn.metrics import classification_report #for model evaluation\nfrom sklearn.metrics import confusion_matrix #for model evaluation\nfrom sklearn.model_selection import train_test_split #for data splitting\nimport eli5 #for purmutation importance\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom eli5.sklearn import PermutationImportance\nimport shap #for SHAP values\nfrom pdpbox import pdp, info_plots #for partial plots\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline \npd.options.mode.chained_assignment = None","5d6c18f2":"df = pd.read_csv(\"..\/input\/heart.csv\")","ebbc1c9b":"## from this kernel: https:\/\/www.kaggle.com\/tentotheminus9\/what-causes-heart-disease-explaining-the-model\n\ndf.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']\n\ndf['sex'][df['sex'] == 0] = 'female'\ndf['sex'][df['sex'] == 1] = 'male'\n\ndf['chest_pain_type'][df['chest_pain_type'] == 1] = 'typical angina'\ndf['chest_pain_type'][df['chest_pain_type'] == 2] = 'atypical angina'\ndf['chest_pain_type'][df['chest_pain_type'] == 3] = 'non-anginal pain'\ndf['chest_pain_type'][df['chest_pain_type'] == 4] = 'asymptomatic'\n\ndf['fasting_blood_sugar'][df['fasting_blood_sugar'] == 0] = 'lower than 120mg\/ml'\ndf['fasting_blood_sugar'][df['fasting_blood_sugar'] == 1] = 'greater than 120mg\/ml'\n\ndf['rest_ecg'][df['rest_ecg'] == 0] = 'normal'\ndf['rest_ecg'][df['rest_ecg'] == 1] = 'ST-T wave abnormality'\ndf['rest_ecg'][df['rest_ecg'] == 2] = 'left ventricular hypertrophy'\n\ndf['exercise_induced_angina'][df['exercise_induced_angina'] == 0] = 'no'\ndf['exercise_induced_angina'][df['exercise_induced_angina'] == 1] = 'yes'\n\ndf['st_slope'][df['st_slope'] == 1] = 'upsloping'\ndf['st_slope'][df['st_slope'] == 2] = 'flat'\ndf['st_slope'][df['st_slope'] == 3] = 'downsloping'\n\ndf['thalassemia'][df['thalassemia'] == 1] = 'normal'\ndf['thalassemia'][df['thalassemia'] == 2] = 'fixed defect'\ndf['thalassemia'][df['thalassemia'] == 3] = 'reversable defect'","7acb3d21":"df\n","cead780b":"import pandas_profiling\ndf_original=df","b19689ce":"profile = pandas_profiling.ProfileReport(df)","f47e6fe5":"profile","74291a1d":"df.columns","6f0a5135":"df.chest_pain_type = df.chest_pain_type.astype(\"category\")\ndf.exercise_induced_angina = df.exercise_induced_angina.astype(\"category\")\ndf.fasting_blood_sugar = df.fasting_blood_sugar.astype(\"category\")\ndf.rest_ecg = df.rest_ecg.astype(\"category\")\ndf.sex = df.sex.astype(\"category\")\ndf.st_slope = df.st_slope.astype(\"category\")\ndf.thalassemia = df.thalassemia.astype(\"category\")","839b1e87":"df = pd.get_dummies(df, drop_first=True)","eac019a6":"df_p,y,_=proc_df(df,\"target\")","95bda3f5":"df_p.head()","f47b8867":"from sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\n# Make an instance of the Model\npca = PCA(3)\ndf_p,y,_=proc_df(df_original,\"target\")\npca.fit(df_p)\nreduced_df= pca.transform(df_p)\nplt.scatter(reduced_df[:, 0], reduced_df[:, 1], alpha=0.2)\nplt.xlabel('component 1')\nplt.ylabel('component 2')\n","a364f575":"from mpl_toolkits.mplot3d import Axes3D\nplt.clf()\nfig = plt.figure(1, figsize=(4, 3))\nax = Axes3D(fig, rect=[0, 0, .95, 1], elev=48, azim=134)\nplt.cla()\nax.scatter(reduced_df[:, 0], reduced_df[:, 1], reduced_df[:, 2], c=y, edgecolor='k')\nplt.show()","b9abd47a":"\nfrom sklearn.manifold import TSNE\ntsne =TSNE(n_components=2, init='pca', random_state=0)\nx_tsne = tsne.fit_transform(reduced_df)\nplt.scatter(x_tsne[:, 0], x_tsne[:, 1], alpha=0.2)\nplt.xlabel('component 1')\nplt.ylabel('component 2')\n\n","6ad90432":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df.iloc[:,:-1])\nx_changed=scaler.transform(df.drop(['target'],axis=1))\nx_change_pd=pd.DataFrame(x_changed,columns=df.drop(['target'],axis=1).columns)\nX_train, X_test, y_train, y_test = train_test_split(x_change_pd, df['target'], test_size = .2, random_state=10) #split the data\nmodel = RandomForestClassifier(max_depth=5)\nmodel.fit(X_train, y_train)\nestimator = model.estimators_[1]\nfeature_names = [i for i in x_change_pd.columns]\n\ny_train_str = y_train.astype('str')\ny_train_str[y_train_str == '0'] = 'no disease'\ny_train_str[y_train_str == '1'] = 'disease'\ny_train_str = y_train_str.values\nexport_graphviz(estimator, out_file='tree.dot', \n                feature_names = feature_names,\n                class_names = y_train_str,\n                rounded = True, proportion = True, \n                label='root',\n                precision = 2, filled = True)\n\nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\nfrom IPython.display import Image\nImage(filename = 'tree.png')","0c422c73":"from sklearn.metrics import accuracy_score\npred_forest=model.predict(X_test)\naccuracy_forest = accuracy_score(y_test, pred_forest)\nprint(\"Accuracy: %.2f%%\" % (accuracy_forest * 100.0))","cb7d5e20":"data_dmatrix = xgb.DMatrix(data=X_train.iloc[:,:5],label=y_train)\n''''''\nparams = {'learning_rate': 0.2,\n                'max_depth':2, 'alpha': 3}\nxg_class = xgb.train(params=params, dtrain=data_dmatrix, num_boost_round=10)\nxgb.plot_tree(xg_class,num_trees=0)\nplt.rcParams['figure.figsize'] = [50, 10]\nplt.show()","85d15e58":"from sklearn.metrics import accuracy_score\nxg_classification = XGBClassifier(max_depth=4, learning_rate=0.1,\n             alpha =10,n_estimators = 20, random_state = 1,eval_metric='error')\nxg_classification.fit(X_train, y_train)\n\npreds = xg_classification.predict(X_test)\naccuracy = accuracy_score(y_test, preds)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","9348c7d9":"xgb.plot_importance(xg_class)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","679fc059":"df.head()\n\n","592b4d53":"x_change_pd","6e5b9b70":"y_test","b889a3ce":"from sklearn.model_selection import RandomizedSearchCV","f248671c":"rf_param_grid = {\n                 'max_depth' : [4, 6, 8,10],\n                 'n_estimators': range(1,30),\n                 'max_features': ['sqrt', 'auto', 'log2'],\n                 'min_samples_split': [2, 3, 10,20],\n                 'min_samples_leaf': [1, 3, 10,18],\n                 'bootstrap': [True, False],\n                 \n                 }","cb39e726":"m = RandomForestClassifier()","3b4c7f48":"m_r = RandomizedSearchCV(param_distributions=rf_param_grid, \n                                    estimator = m, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 5)","e0104301":"%time m_r.fit(df_p, y)","32918b52":"m_r.best_score_","107b1a92":"m_r.best_params_","698392b3":"rf_bp = m_r.best_params_","885eab05":"rf_classifier=RandomForestClassifier(n_estimators=rf_bp[\"n_estimators\"],\n                                     min_samples_split=rf_bp['min_samples_split'],\n                                     min_samples_leaf=rf_bp['min_samples_leaf'],\n                                     max_features=rf_bp['max_features'],\n                                     max_depth=rf_bp['max_depth'],\n                                     bootstrap=rf_bp['bootstrap'])","3dc1ba1b":"rf_classifier.fit(df_p,y)","64b3fa59":"fi = rf_feat_importance(rf_classifier,df_p)","c014d9fe":"def plot_fi(fi):\n    return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","e62099f0":"plot_fi(fi)","fea26131":"import lightgbm as lgbm","b53a65a6":"lgbm_model = lgbm.LGBMClassifier()","07caaefe":"lgbm_params = {\n    \"n_estimators\":[10,100,1000,2000],\n    'boosting_type': ['dart','gbdt'],          \n    'learning_rate': [0.05,0.1,0.2],       \n    'min_split_gain': [0.0,0.1,0.5,0.7],     \n    'min_child_weight': [0.001,0.003,0.01],     \n    'num_leaves': [10,21,41,61],            \n    'min_child_samples': [10,20,30,60,100]\n              }","7ce8fe56":"lgbm_model = lgbm.LGBMClassifier()","e91aad60":"lgbm_c = RandomizedSearchCV(param_distributions=lgbm_params, \n                                    estimator = lgbm_model, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 4)","4aa8d654":"lgbm_c.fit(df_p,y)","b9c33a68":"lgbm_bp =lgbm_c.best_params_","326fd35e":"lgbm_model = lgbm.LGBMClassifier(num_leaves=lgbm_bp[\"num_leaves\"],\n                                 n_estimators=lgbm_bp[\"n_estimators\"],\n                                 min_split_gain=lgbm_bp[\"min_split_gain\"],\n                                 min_child_weight=lgbm_bp[\"min_child_weight\"],\n                                 min_child_samples=lgbm_bp[\"min_child_samples\"],\n                                 learning_rate=lgbm_bp[\"learning_rate\"],\n                                 boosting_type=lgbm_bp[\"boosting_type\"])","08d5750a":"lgbm_model.fit(df_p,y)","0a4fe122":"def feature_imp(df,model):\n    fi = pd.DataFrame()\n    fi[\"feature\"] = df.columns\n    fi[\"importance\"] = model.feature_importances_\n    return fi.sort_values(by=\"importance\", ascending=False)","6da6e13f":"feature_imp(df_p,lgbm_model).plot('feature', 'importance', 'barh', figsize=(12,7), legend=False)","698621fd":"import xgboost as xgb","20b695bb":"xgb_classifier = xgb.XGBClassifier()","df7b98d7":"gbm_param_grid = {\n    'n_estimators': range(1,20),\n    'max_depth': range(1, 10),\n    'learning_rate': [.1,.4, .45, .5, .55, .6],\n    'colsample_bytree': [.6, .7, .8, .9, 1],\n    'booster':[\"gbtree\"],\n     'min_child_weight': [0.001,0.003,0.01],\n}","ded90318":"xgb_random = RandomizedSearchCV(param_distributions=gbm_param_grid, \n                                    estimator = xgb_classifier, scoring = \"accuracy\", \n                                    verbose = 0, n_iter = 100, cv = 4)","2d1428ec":"xgb_random.fit(df_p,y)","7e1c6afc":"xgb_bp = xgb_random.best_params_","646ca4b6":"xgb_model=xgb.XGBClassifier(n_estimators=xgb_bp[\"n_estimators\"],\n                            min_child_weight=xgb_bp[\"min_child_weight\"],\n                            max_depth=xgb_bp[\"max_depth\"],\n                            learning_rate=xgb_bp[\"learning_rate\"],\n                            colsample_bytree=xgb_bp[\"colsample_bytree\"],\n                            booster=xgb_bp[\"booster\"])","62b7fbdd":"xgb_model.fit(df_p,y)","42e85f14":"feature_imp(df_p,xgb_model).plot('feature', 'importance', 'barh', figsize=(12,7), legend=False)","8ea1a460":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>'\n    )","b6a95575":"rf_fm = rf_feat_importance(rf_classifier,df_p)\nlgbm_fm = feature_imp(df_p,lgbm_model)\nxgb_fm = feature_imp(df_p,xgb_model)","e6a6212d":"multi_table([rf_fm,lgbm_fm,xgb_fm])","fd9e3b90":"import seaborn as sns\ncorr = df_p.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(11, 9))\n\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,mask=mask,cmap='summer_r',vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","791add4d":"from scipy.cluster import hierarchy as hc","f68d9f46":"def hierarchy_tree(df):\n    corr = np.round(scipy.stats.spearmanr(df).correlation, 4)\n    corr_condensed = hc.distance.squareform(1-df.corr())\n    z = hc.linkage(corr_condensed, method='average')\n    fig = plt.figure(figsize=(16,10))\n    dendrogram = hc.dendrogram(z, labels=df.columns, orientation='left', leaf_font_size=16)\n    plt.show()","3b2fc390":"hierarchy_tree(df_p)","ac7e9b94":"df_p[\"target\"] = y  ","56cc9120":"df_p.columns","98f809a7":"max_heart_rate_achieved = pd.cut(df_p.max_heart_rate_achieved,4,labels=[\"71-104\",\"105-137\",\"138-170\",\"171-202\"])","a7552e1f":"df_p.columns","8cd0006b":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","c770f2ec":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],\n                    df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","609e7979":"cross1=pd.crosstab([df_p.st_slope_flat[df_p.st_slope_flat==1],df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],df_p[\"chest_pain_type_typical angina\"][df_p[\"chest_pain_type_typical angina\"]==1],\n                    df_p.target],max_heart_rate_achieved).style.background_gradient(cmap='summer_r')\ncross1","0cf9ab13":"cross1=pd.crosstab([df_p[\"thalassemia_fixed defect\"]],df_p.sex_male,margins=True).style.background_gradient(cmap='summer_r')\ncross1","1bf86fd1":"cross1=pd.crosstab([df_p[\"thalassemia_fixed defect\"][df_p[\"thalassemia_fixed defect\"]==1],df_p.target],df_p.sex_male).style.background_gradient(cmap='summer_r')\ncross1","e75368a3":"cross1=pd.crosstab([df_p.exercise_induced_angina_yes[df_p.exercise_induced_angina_yes==1],df_p.target],[df_p.st_slope_upsloping[df_p.st_slope_upsloping==1],df_p.st_depression]).style.background_gradient(cmap='summer_r')\ncross1","e70a1094":"age = pd.cut(df_p.age,6,labels=[\"(28.952, 37.0)\", \"(37.0, 45.0)\", \"(45.0, 53.0)\",\"(53.0, 61.0)\",\"(61.0, 69.0)\", \"(69.0, 77.0)\"])","4c33404e":"cross1=pd.crosstab([pd.cut(df_p.resting_blood_pressure,3),df_p.target],[age]).style.background_gradient(cmap='summer_r')\ncross1","c8cd2836":"### <b>Kernel goals <\/b>:\n#### data exploration and cleaning \n#### data modeling(Random Forest + LighGBM + XGBoost )\n#### feature importance \n#### investigation some correlation ","6a66c6a1":"#### <b>LightGBM Feature importance <\/b>","565cea8c":"#### <b>LightGBM<\/b>  <a class=\"anchor\" id=\"lgm\"><\/a>","5f2295bd":"#### Attribute Information: \n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","ab8a7af5":"## Data Cleaning <a class=\"anchor\" id=\"dc\"><\/a>","aacfb0a0":"### Top feature causing heart disease according to RF,LGBM,XGB <a class=\"anchor\" id=\"tf\"><\/a>","679b1f7a":"##  Investigating strongly correlated features <a class=\"anchor\" id=\"ic\"><\/a>","639fa63e":"### If you found this helpful a upvote would be very much appreciated :-)","1a147c54":"### <b>Introduction <\/b>","7e6ed7d6":"#### <b>Random Forest Feature importance<\/b> ","003118bc":"#### <b>Xgboost<\/b>  <a class=\"anchor\" id=\"xgb\"><\/a>","31fd1fae":"## feature correlation <a class=\"anchor\" id=\"fc\"><\/a>","42b3fb17":"<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*CQXQxHDKi0Q2IpdjhufEcw.jpeg\" style=\"height:300px;\" \/>","ca214665":"#### <b>quick exploration with pandas profiling <\/b>","b20c1106":"This database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date. The \"goal\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.\n","fe690bb3":"#### <b>XGboost Feature importance <\/b>","5703d940":"## Models <a class=\"anchor\" id=\"md\"><\/a>","55d332d2":"### <b>Contents<\/b>\n\n1. [Data Cleaning](#dc)\n2. [Models](#md) <br>\n    2.1 [Random Forest](#md)<br>\n    2.2 [LightGBM](#lgm)<br>\n    2.3 [XGBoost](#xgb)\n3. [Top feature causing heart disease](#tf)\n4. [Feature correlation ](#fc)\n5. [Investigating strongly correlated features](#ic)","6d6309d5":"#### Dataset information ","95ea864d":"## Heart Disease Diagnosis and Prediction","73045bd4":"## Thank you for reading ( \u0361\u1d54 \u035c\u0296 \u0361\u1d54 )","a23a2359":"#### <b>Random Forest<\/b>  <a class=\"anchor\" id=\"rd\"><\/a>","9da7b4f0":"#### <b> resting_blood_pressure is strong factory but only in early age <\/b>","ebee7846":"### crosstabing correlated features","58a6d958":"###### according to this data 93% of poeple that have st_slope_flat + thalassemia_fixed_defect + chest_pain_typical_argina have heart disease "}}