{"cell_type":{"a39baa35":"code","dc656c47":"code","21491d03":"code","625d4b57":"code","f27be054":"code","bbb39bd5":"code","55423d3f":"code","6f2d9c9f":"code","b37dd9d7":"code","e63da744":"code","1f85e7ba":"code","1a8a9381":"code","9bd21a41":"code","3ca9012f":"code","3b8e77c4":"code","e02756be":"code","dfe3e0d2":"code","d4d633c5":"code","5b13d30e":"code","429a332e":"code","701a3b30":"code","8399eaf6":"code","7cd4bd89":"code","00ca5145":"code","1b7b0eda":"code","341c877d":"code","58eed03b":"code","a9c281da":"markdown","d030e4b5":"markdown","254e3dfc":"markdown","799a164a":"markdown","6b3ecad0":"markdown","9a117c79":"markdown"},"source":{"a39baa35":"import keras\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Activation\nfrom keras.layers import AveragePooling2D, Input, Flatten\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.regularizers import l2\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.datasets import cifar10\nfrom keras.utils import to_categorical\nimport numpy as np\nimport os","dc656c47":"# Training parameters\nbatch_size = 32\nepochs = 120\nnum_classes = 10","21491d03":"# Load the CIFAR10 data.\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()","625d4b57":"# Input image dimensions.\ninput_shape = x_train.shape[1:]\ninput_shape","f27be054":"# Normalize data.\nx_train = x_train.astype('float32') \/ 255\nx_test = x_test.astype('float32') \/ 255","bbb39bd5":"# Subtracting pixel mean improves accuracy\nx_train_mean = np.mean(x_train, axis=0)\nx_train -= x_train_mean\nx_test -= x_train_mean","55423d3f":"print('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\nprint('y_train shape:', y_train.shape)","6f2d9c9f":"# Convert class vectors to binary class matrices.\ny_train = to_categorical(y_train, num_classes)\ny_test = to_categorical(y_test, num_classes)","b37dd9d7":"def lr_schedule(epoch):\n    lr = 1e-3\n    if epoch > 120:\n        lr *= 1e-2\n    return lr","e63da744":"def resnet_layer(inputs,\n                 num_filters=16,\n                 kernel_size=3,\n                 strides=1,\n                 activation='relu',\n                 batch_normalization=True,\n                 conv_first=True):\n    \n    conv = Conv2D(num_filters,\n                  kernel_size=kernel_size,\n                  strides=strides,\n                  padding='same',\n                  kernel_initializer='he_normal',\n                  kernel_regularizer=l2(1e-4))\n\n    x = inputs\n    if conv_first:\n        x = conv(x)\n        if batch_normalization:\n            x = BatchNormalization()(x)\n        if activation is not None:\n            x = Activation(activation)(x)\n    else:\n        if batch_normalization:\n            x = BatchNormalization()(x)\n        if activation is not None:\n            x = Activation(activation)(x)\n        x = conv(x)\n    return x","1f85e7ba":"n = 3\ndepth = n * 6 + 2","1a8a9381":"def resnet(input_shape, depth, num_classes=10):\n    # Start model definition.\n    num_filters = 16\n    num_res_blocks = int((depth - 2) \/ 6)\n\n    inputs = Input(shape=input_shape)\n    x = resnet_layer(inputs=inputs)\n    # Instantiate the stack of residual units\n    for stack in range(3):\n        for res_block in range(num_res_blocks):\n            strides = 1\n            if stack > 0 and res_block == 0:  # first layer but not first stack\n                strides = 2  # downsample\n            y = resnet_layer(inputs=x,\n                             num_filters=num_filters,\n                             strides=strides)\n            y = resnet_layer(inputs=y,\n                             num_filters=num_filters,\n                             activation=None)\n            if stack > 0 and res_block == 0:  # first layer but not first stack\n                # linear projection residual shortcut connection to match\n                # changed dims\n                x = resnet_layer(inputs=x,\n                                 num_filters=num_filters,\n                                 kernel_size=1,\n                                 strides=strides,\n                                 activation=None,\n                                 batch_normalization=False)\n            x = keras.layers.add([x, y])\n            x = Activation('relu')(x)\n        num_filters *= 2\n\n    # Add classifier on top.\n    # v1 does not use BN after last shortcut connection-ReLU\n    x = AveragePooling2D(pool_size=8)(x)\n    y = Flatten()(x)\n    outputs = Dense(num_classes,\n                    activation='softmax',\n                    kernel_initializer='he_normal')(y)\n\n    # Instantiate model.\n    model = Model(inputs=inputs, outputs=outputs)\n    return model","9bd21a41":"datagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    zca_epsilon=1e-06,\n    rotation_range=0,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.,\n    zoom_range=0.,\n    channel_shift_range=0.,\n    fill_mode='nearest',\n    cval=0.,\n    horizontal_flip=True,\n    vertical_flip=False,\n    rescale=None,\n    preprocessing_function=None,\n    data_format=None,\n    validation_split=0.0)\n    \ndatagen.fit(x_train)","3ca9012f":"model = resnet(input_shape=input_shape, depth=depth)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(learning_rate=lr_schedule(0)),\n              metrics=['accuracy'])","3b8e77c4":"model.summary()","e02756be":"# Prepare model model saving directory.\nsave_dir = os.path.join(os.getcwd(), 'saved_models')\nmodel_name = 'ResNet'\nif not os.path.isdir(save_dir):\n    os.makedirs(save_dir)\nfilepath = os.path.join(save_dir, model_name)","dfe3e0d2":"# Prepare callbacks for model saving and for learning rate adjustment.\ncheckpoint = ModelCheckpoint(filepath=filepath,\n                             monitor='val_acc',\n                             verbose=1,\n                             save_best_only=True)\n\nlr_scheduler = LearningRateScheduler(lr_schedule)\n\nlr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),\n                               cooldown=0,\n                               patience=5,\n                               min_lr=0.5e-6)\n\ncallbacks = [checkpoint, lr_reducer, lr_scheduler]","d4d633c5":"h=model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n                    validation_data=(x_test, y_test),\n                    epochs=epochs, verbose=1, workers=4,\n                    callbacks=callbacks)","5b13d30e":"model.save('resnet50.h5')","429a332e":"model.save_weights('resnet50_w.hdf5')","701a3b30":"import pickle\n\nf=open('resnet50_h.pckl','wb')\npickle.dump(h.history,f)\nf.close()","8399eaf6":"import matplotlib.pyplot as plt\nepoch_nums = range(1, epochs+1)\ntraining_loss = h.history[\"loss\"]\nvalidation_loss = h.history[\"val_loss\"]\nplt.plot(epoch_nums , training_loss)\nplt.plot(epoch_nums , validation_loss)\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['training','validation'], loc='upper right')\nplt.show()","7cd4bd89":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","00ca5145":"def testimage(result):\n    print(result) \n    if result[0][0]==1: \n        print(\"Airplane\") \n    elif result[0][1]==1: \n        print('Automobile') \n    elif result[0][2]==1: \n        print('Bird') \n    elif result[0][3]==1: \n        print('Cat') \n    elif result[0][4]==1: \n        print('Deer') \n    elif result[0][5]==1: \n        print('Dog') \n    elif result[0][6]==1: \n        print('Frog') \n    elif result[0][7]==1: \n        print('Horse') \n    elif result[0][8]==1: \n        print('Ship') \n    elif result[0][9]==1: \n        print('Truck') \n    else:\n        print('Error')","1b7b0eda":"from keras.preprocessing import image\n\ntest_image1 =image.load_img(\"..\/input\/Image\/dog1.jpg\",target_size =(32,32,3))\ntest_image =image.img_to_array(test_image1)\ntest_image =np.expand_dims(test_image, axis =0) \nresult = model.predict(test_image)\n#result = result.astype(int)\nplt.imshow(test_image1)\ntestimage(result)","341c877d":"y_pred_test = model.predict(x_test)\ny_pred_test_classes = np.argmax(y_pred_test, axis=1)\ny_pred_test_max_probas = np.max(y_pred_test, axis=1)","58eed03b":"cols = 8\nrows = 2\nNUM_CLASSES = 10\n# load data\n(x_train2, y_train2), (x_test2, y_test2) = cifar10.load_data()\ncifar10_classes = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \n                   \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\nfig = plt.figure(figsize=(2 * cols - 1, 3 * rows - 1))\nfor i in range(cols):\n    for j in range(rows):\n        random_index = np.random.randint(0, len(y_test2))\n        ax = fig.add_subplot(rows, cols, i * rows + j + 1)\n        ax.grid('off')\n        ax.axis('off')\n        ax.imshow(x_test2[random_index, :])\n        pred_label =  cifar10_classes[y_pred_test_classes[random_index]]\n        pred_proba = y_pred_test_max_probas[random_index]\n        true_label = cifar10_classes[y_test2[random_index, 0]]\n        ax.set_title(\"pred: {}\\nscore: {:.3}\\ntrue: {}\".format(\n               pred_label, pred_proba, true_label\n        ))\nplt.show()\n ","a9c281da":"# Loss","d030e4b5":"# Trained Model Score","254e3dfc":"# Compile the Model","799a164a":"# Test the Model","6b3ecad0":"# Data Augmentation","9a117c79":"# Train the Model"}}