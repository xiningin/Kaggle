{"cell_type":{"a10d3f75":"code","b0f3b148":"code","c064651b":"code","225f8022":"code","33ac8b3c":"code","90a78346":"code","026b380e":"code","b9c6aa3f":"code","4f9a0bcd":"code","3e7d5603":"code","931f7216":"code","58eb8c9e":"code","3b6412aa":"code","31e6e5ed":"code","7e650440":"code","7a52c95d":"code","e529fb4f":"code","b03154d9":"code","6b9ca70d":"code","0c46b274":"code","0002769c":"code","da36575a":"code","096f6b94":"code","3c054f3c":"code","5b48c82b":"code","ff6440c2":"code","a5e65550":"code","ac898a5c":"code","e021c6cc":"code","5d6d7902":"code","e558cf34":"code","5ed8d7a5":"code","bebed4d2":"code","c40fb9f7":"code","541cd9f7":"code","dc2df4b1":"code","427ff365":"markdown","58c191de":"markdown","0600bf57":"markdown","8ed5b963":"markdown","62db7f58":"markdown"},"source":{"a10d3f75":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","b0f3b148":"data0 = pd.read_csv(\"..\/input\/lung-cancer\/survey lung cancer.csv\")\ndata0[0:2].T","c064651b":"data0.columns","225f8022":"data0.info()","33ac8b3c":"print(data0['LUNG_CANCER'].value_counts())","90a78346":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","026b380e":"data1=df\ndata1[0:2].T","b9c6aa3f":"print(data1['LUNG_CANCER'].value_counts())","4f9a0bcd":"data1.columns","3e7d5603":"target=['LUNG_CANCER']\ndataY0=data1[target]\ndataX=data1.drop([target[0]],axis=1)","931f7216":"df_columns = list(dataX.columns)\nprint(df_columns)","58eb8c9e":"dataX=np.array(dataX)\ndataY0=np.array(dataY0)","3b6412aa":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\ntestX=dataX[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","31e6e5ed":"print(len(trainX))\nprint(len(testX))","7e650440":"train_df=pd.DataFrame(trainX)\ntest_df=pd.DataFrame(testX)","7a52c95d":"train_df.columns=df_columns\ntest_df.columns=df_columns","e529fb4f":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","b03154d9":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","6b9ca70d":"def to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","0c46b274":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","0002769c":"train_feat_df","da36575a":"test_feat_df","096f6b94":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","3c054f3c":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","5b48c82b":"y = trainY0\nprint(y.shape)","ff6440c2":"ydf=pd.DataFrame(y)\nydf","a5e65550":"\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_xlabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(y,oof)","ac898a5c":"print(target)","e021c6cc":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print(order[0:20].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","5d6d7902":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","e558cf34":"cols=['ALLERGY','SWALLOWING DIFFICULTY','COUGHING','WHEEZING','AGE',\n      'ANXIETY','PEER_PRESSURE','YELLOW_FINGERS', 'ALCOHOL CONSUMING',\n      'CHRONIC DISEASE','FATIGUE ','CHEST PAIN', 'GENDER','SHORTNESS OF BREATH','SMOKING']","5ed8d7a5":"print(len(cols))","bebed4d2":"fig, ax = plt.subplots(5,3,figsize=(15,15))\nfor i in tqdm(range(15)):\n    if i<15:\n        r=i\/\/3\n        c=i%3\n        sns.histplot(data1[data1.LUNG_CANCER==0][cols[i]], label=cols[i]+' (LUNG_CANCER=NO)', ax=ax[r,c], color='black',bins=15)\n        sns.histplot(data1[data1.LUNG_CANCER==1][cols[i]], label=cols[i]+' (LUNG_CANCER=YES)', ax=ax[r,c], color='C1',bins=20)        \n        ax[r,c].legend()\n        ax[r,c].grid()\n    else:\n        r=i\/\/3\n        c=i%3\n        ax[r,c].axis(\"off\")       \nplt.show()","c40fb9f7":"pred0 = np.array([model.predict(test_feat_df.values) for model in models])\npred1 = np.mean(pred0, axis=0)\nPRED = np.where(pred1<0.5,0,1)\nPRED[0:5]","541cd9f7":"ans=[]\nfor i in range(len(testY0)):\n    ans+=[testY0[i,0]]\nANS=np.array(ans)\nANS[0:5]","dc2df4b1":"from sklearn.metrics import classification_report, log_loss, accuracy_score\naccuracy=accuracy_score(PRED,ANS)\nprint(accuracy)","427ff365":"# Model","58c191de":"# Visualize Importance","0600bf57":"### Attribute information:\n\n* Gender: M(male), F(female)\n* Age: Age of the patient\n* Smoking: YES=2 , NO=1.\n* Yellow fingers: YES=2 , NO=1.\n* Anxiety: YES=2 , NO=1.\n* Peer_pressure: YES=2 , NO=1.\n* Chronic Disease: YES=2 , NO=1.\n* Fatigue: YES=2 , NO=1.\n* Allergy: YES=2 , NO=1.\n* Wheezing: YES=2 , NO=1.\n* Alcohol: YES=2 , NO=1.\n* Coughing: YES=2 , NO=1.\n* Shortness of Breath: YES=2 , NO=1.\n* Swallowing Difficulty: YES=2 , NO=1.\n* Chest pain: YES=2 , NO=1.\n* Lung Cancer: YES , NO.","8ed5b963":"# Data preparation","62db7f58":"# Target setting"}}