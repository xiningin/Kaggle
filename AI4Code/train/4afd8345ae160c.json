{"cell_type":{"941b67a4":"code","232192df":"code","9da362a8":"code","e9c37972":"code","e06b0ac5":"code","1da1a089":"code","f36c7a0e":"code","f6fbd5bd":"code","8997a1ed":"code","b4371ac3":"code","4027b0e8":"code","4e134e79":"code","e6885528":"code","5503b77c":"code","6c2a2b0c":"code","b8e5d2bc":"code","76a77cef":"code","6da1decf":"code","e0f82548":"code","e97cfdb7":"code","6642da26":"code","665e76c6":"code","2447451b":"code","89b17fdc":"code","0b82b459":"markdown","4ab653b3":"markdown"},"source":{"941b67a4":"#importing librabries\nimport pandas as pd\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers.core import Dropout,Activation,Dense,Flatten\nfrom keras.layers.convolutional import Convolution2D,MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","232192df":"data=pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest=pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')","9da362a8":"data.head()","e9c37972":"#reshaping\ndata.iloc[3,1:].values.reshape(28,28)","e06b0ac5":"X=data.iloc[:,1:].values.reshape(len(data),28,28,1)\ntest_1=test.iloc[:,1:].values.reshape(len(test),28,28,1)\ny=data.iloc[:,0].values","1da1a089":"X[1]","f36c7a0e":"y[1]","f6fbd5bd":"df_y=keras.utils.to_categorical(y,num_classes=10)","8997a1ed":"X=np.array(X)\ntest_2=np.array(test_1)\ndf_y=np.array(df_y)\nX=X\/255\ntest_3=test_2\/255","b4371ac3":"y","4027b0e8":"df_y","4e134e79":"X.shape","e6885528":"x_train, x_test, y_train, y_test = train_test_split(X,df_y,test_size=0.2,random_state=44)","5503b77c":"model=Sequential()\nmodel.add(Convolution2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Convolution2D(filters=32,kernel_size=(5,5),padding='Same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Convolution2D(filters=64,kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(Convolution2D(filters=64,kernel_size=(3,3),padding='Same',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","6c2a2b0c":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","b8e5d2bc":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","76a77cef":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","6da1decf":"epochs = 20\nbatch_size = 36","e0f82548":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X)","e97cfdb7":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test),\n                              verbose = 2, steps_per_epoch=x_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","6642da26":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","665e76c6":"results = model.predict(test_3)\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\nid_ = np.arange(0,results.shape[0])","2447451b":"save = pd.DataFrame({'id':id_,'label':results})\nprint(save.head(10))\nsave.to_csv('submission.csv',index=False)","89b17fdc":"save\n","0b82b459":"importing the data","4ab653b3":"## Kannada MNIST"}}