{"cell_type":{"09191c42":"code","282c6aa4":"code","59b05bca":"code","dc41c18c":"code","8d5b4efb":"code","f01389a9":"code","85333c9e":"code","42ea5b7e":"code","fa820a7c":"code","07bb2f30":"code","9541da39":"code","f3835117":"code","5c279092":"code","feb3a7e2":"code","6d50fb81":"code","6d72a086":"code","b733dcc9":"markdown","e867c22c":"markdown","334e2696":"markdown","e0b6e500":"markdown","bf0e8e6e":"markdown","36ec275b":"markdown","8c70dbe2":"markdown","03b71041":"markdown","98c7c2f0":"markdown","55dacaef":"markdown"},"source":{"09191c42":"from sklearn.datasets import load_iris #data\n#Gerekli K\u00fct\u00fcphanelerin import edilmesi\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nimport numpy as np\nimport pandas as pd\n\ndf = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(df['data'], df['target'], test_size = 0.20, random_state=7)","282c6aa4":"#SVM with default(rbf) kernel\nsvm_model = SVC(random_state = 7).fit(X_train, y_train)\ny_pred = svm_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","59b05bca":"#SVM with linear kernel\nsvm_model = SVC(kernel =\"linear\",random_state = 7).fit(X_train, y_train)\ny_pred = svm_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","dc41c18c":"#SVM with poly kernel\nsvm_model = SVC(kernel = \"poly\", random_state = 7).fit(X_train, y_train)\ny_pred = svm_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","8d5b4efb":"#Decision Tree Classifier with default parameters\ncart = DecisionTreeClassifier(random_state = 7)\ncart_model = cart.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","f01389a9":"#Decision Tree Classifier with different parameters\ncart = DecisionTreeClassifier(max_depth =14, max_features='log2', random_state = 7)\ncart_model = cart.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) \n#y\u00fckseltemedim hocam bunlar\u0131 :D","85333c9e":"#Decision Tree Classifier with different parameters-2\ncart = DecisionTreeClassifier(max_depth = 3,max_features = 4, random_state = 7)\ncart_model = cart.fit(X_train, y_train)\ny_pred = cart_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) \n#y\u00fckseltemedim hocam bunlar\u0131 :D","42ea5b7e":"#K-nearest neighbors with default parameters\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","fa820a7c":"#K-nearest neighbors with different parameters-1\nknn = KNeighborsClassifier(n_neighbors=14, algorithm='ball_tree')\nknn_model = knn.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","07bb2f30":"#K-nearest neighbors with different parameters-2\nknn = KNeighborsClassifier(n_neighbors = 8, weights = 'distance',leaf_size = 39, p = 150)\nknn_model = knn.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","9541da39":"#Random Forest Classifier with default parameters\nrf_model = RandomForestClassifier(random_state = 7).fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","f3835117":"#Ada Boost Classifier with default parameters\nadb_model = AdaBoostClassifier(random_state = 7).fit(X_train, y_train)\ny_pred = adb_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","5c279092":"#Ada Boost Classifier with svc model\nsvc = SVC(probability=True,kernel='linear')\nadb_model = AdaBoostClassifier(base_estimator = svc, random_state = 7).fit(X_train, y_train)\ny_pred = adb_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) \n\n","feb3a7e2":"#Bagging Classifier with default parameters\nbag_model = BaggingClassifier(random_state = 7).fit(X_train, y_train)\ny_pred = bag_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","6d50fb81":"#Bagging Classifier with svc model\nsvc = SVC(probability=True, kernel='linear')\nbag_model = BaggingClassifier(base_estimator = svc, random_state = 7).fit(X_train, y_train)\ny_pred = bag_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) \n","6d72a086":"#Voting Classifer with SVC,DTree and KNN\nKnn_clf = KNeighborsClassifier()\nDTree_clf = DecisionTreeClassifier()\nSVC_clf = SVC()\nvoting_clf = VotingClassifier(estimators=[('SVC', SVC_clf), ('DTree', DTree_clf), ('Knn', Knn_clf)], voting='hard')\nvoting_clf.fit(X_train, y_train)\neclf_model = voting_clf.fit(X_train, y_train)\ny_pred = eclf_model.predict(X_test)\nprint(\"**Confusion Matrix**\\n\",confusion_matrix(y_test, y_pred))\nprint(\"**Accuracy Score**\\n:\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred)) ","b733dcc9":"# 2-2- Ensemble(Kollektif) Modeller","e867c22c":"# 2-1- Basit Modeller","334e2696":"## 2-2-1- Random Forest Classifier","e0b6e500":"## 2-1-3- K-nearest neighbors","bf0e8e6e":"## 2-1-2- Decision Tree Classifier","36ec275b":"## 2-2-3- Bagging Classifier","8c70dbe2":"# Zeki Sistem Final \u00d6devi","03b71041":"## 2-2-4- Voting Classifer","98c7c2f0":"## 2-1-1- Support Vector Classification ","55dacaef":"## 2-2-2- Ada Boost Classifier"}}