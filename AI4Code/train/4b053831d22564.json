{"cell_type":{"1e9bd25f":"code","ab549340":"code","9ba33692":"code","1c868d67":"code","24c6a436":"code","73af14c1":"code","d8df6b77":"code","f4a92f77":"code","4abdc56b":"code","6c999e4d":"code","cf38253f":"code","bf8ea951":"markdown"},"source":{"1e9bd25f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\n\nfrom keras.utils import to_categorical\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ab549340":"df = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\nX_train = np.array(df.iloc[:,1:])\ny_train = np.array(df.iloc[:,0])\n\nX_train = np.reshape(X_train,(X_train.shape[0],28,28,1))","9ba33692":"def create_dev_set(X_train, Y_train):\n    ## split 60000 into 48000 and 12000 (0.2)\n    return train_test_split(X_train, Y_train, test_size = 0.15, random_state = 0)","1c868d67":"X_train, X_dev, y_train, y_dev = create_dev_set(X_train, y_train)\nprint('Training data shape : ', X_train.shape, y_train.shape)\nprint('Testing data shape : ', X_dev.shape, y_dev.shape)","24c6a436":"classes = np.unique(y_train)\nnClasses = len(classes)\nprint('Total number of outputs : ', nClasses)\nprint('Output classes : ', classes)","73af14c1":"X_train = X_train.astype('float32')\nX_dev = X_dev.astype('float32')\nX_train = X_train \/ 255.\nX_dev = X_dev \/ 255.\n\ny_train_one_hot = np.array(to_categorical(y_train))\ny_dev_one_hot = np.array(to_categorical(y_dev))","d8df6b77":"batch_size = 64\nepochs = 20\nnum_classes = 10\n\ndr = Sequential()\ndr.add(Conv2D(6, kernel_size=(3,3),activation='linear',input_shape=(28,28,1),padding='same'))\ndr.add(LeakyReLU(alpha=0.1))\ndr.add(MaxPooling2D((2,2),padding='same'))\ndr.add(Dropout(0.25))\ndr.add(Conv2D(16, (3,3), activation='linear',padding='same'))\ndr.add(LeakyReLU(alpha=0.1))\ndr.add(MaxPooling2D(pool_size=(2,2),padding='same'))\ndr.add(Dropout(0.25))\ndr.add(Conv2D(128, (3,3), activation='linear',padding='same'))\ndr.add(LeakyReLU(alpha=0.1))                  \ndr.add(MaxPooling2D(pool_size=(2,2),padding='same'))\ndr.add(Dropout(0.4))\ndr.add(Flatten())\ndr.add(Dense(120, activation='linear'))\ndr.add(LeakyReLU(alpha=0.1))         \ndr.add(Dropout(0.3))         \ndr.add(Dense(40, activation='linear'))\ndr.add(LeakyReLU(alpha=0.1))         \ndr.add(Dropout(0.2)) \ndr.add(Dense(num_classes, activation='softmax'))\n\ndr.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n\ndr.summary()\n\ntraining = dr.fit(X_train, y_train_one_hot, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(X_dev, y_dev_one_hot))\n\ndr.save(\"Conv2D_DR_dropout.h5py\")\n\ntest_eval = dr.evaluate(X_dev, y_dev_one_hot, verbose=0)\nprint(test_eval)\n\naccuracy = training.history['accuracy']\nval_accuracy = training.history['val_accuracy']\nloss = training.history['loss']\nval_loss = training.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","f4a92f77":"# from IPython.display import FileLink\n# FileLink(r\"Conv2D_DR_dropout.h5py\")","4abdc56b":"df_D = pd.read_csv(\"..\/input\/Kannada-MNIST\/Dig-MNIST.csv\")\nX_test1 = np.array(df_D.iloc[:,1:])\nX_test1 = np.reshape(X_test1,(X_test1.shape[0],28,28,1))\ny_test1 = np.array(df_D.iloc[:,0])\ny_test1_one_hot = np.array(to_categorical(y_test1))\n\nX_test1 = X_test1.astype('float32')\nX_test1 = X_test1 \/ 255.\n\ntest_eval = dr.evaluate(X_test1, y_test1_one_hot, verbose=0)\nprint(test_eval)\n\ntest_eval = dr.evaluate(X_dev, y_dev_one_hot, verbose=0)\nprint(test_eval)","6c999e4d":"df_test = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")\nX_test = np.array(df_test.iloc[:,1:])\nX_id = np.array(df_test.iloc[:,0])\nX_test = np.reshape(X_test,(X_test.shape[0],28,28,1))\n\nX_test = X_test.astype('float32')\nX_test = X_test \/ 255.\n\n\nres = dr.predict(X_test)\nres = pd.DataFrame(np.argmax(np.round(res),axis=1))\nres.columns = [\"label\"]\nimage_id = pd.DataFrame(np.arange(0,len(res),dtype=int))\nimage_id.columns=[\"id\"]\nresult = pd.concat([image_id, res], axis=1)\n# result.set_index(\"id\", inplace=True)\nresult.to_csv(\"submission.csv\", index=False)","cf38253f":"# from IPython.display import FileLink\n# FileLink(\"submission.csv\")","bf8ea951":"I am using Keras Conv2D with 20 epochs and batch sie of 64."}}