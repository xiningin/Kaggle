{"cell_type":{"d7e3d89c":"code","4248905e":"code","a7dcbb9e":"code","799b8608":"code","04debb1d":"code","524322d5":"code","0619b949":"code","ba302951":"code","a8d469e2":"code","03067aa9":"code","52928ac4":"code","7e9daf75":"code","44a232a6":"code","3b6ecd08":"code","455718bb":"code","7bda0584":"code","fd7bb336":"code","29cb920c":"code","a08fefb9":"code","818e461b":"code","65bfe2e4":"code","480b0013":"code","4f3305d9":"code","c124c4bd":"code","cfa99ac7":"code","3a11cd3e":"code","c0881c0a":"code","dc720936":"code","9997d487":"markdown","e69895e3":"markdown","1734b3e8":"markdown","e370fa55":"markdown","611bc276":"markdown","17fd577e":"markdown","75728344":"markdown","ad8271bd":"markdown","9885c54a":"markdown","5a2e67a0":"markdown","af311b63":"markdown","ba235cdf":"markdown","1e1bc1b6":"markdown","d9b52c88":"markdown","3b2150b1":"markdown","417309d8":"markdown","f76f0f82":"markdown","4bba4a8e":"markdown","8bb0861c":"markdown","d79cfc33":"markdown","507a73c4":"markdown","b70137b7":"markdown"},"source":{"d7e3d89c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport os\nimport io\nimport numpy as np\nimport pandas as pd\nfrom IPython.display import Image\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\n%matplotlib inline \npd.options.mode.chained_assignment = None  # default='warn'","4248905e":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# Any results you write to the current directory are saved as output.","a7dcbb9e":"df = pd.read_csv('\/kaggle\/input\/globalterror\/GlobalTerror.csv')","799b8608":"df.columns","04debb1d":"df.head()","524322d5":"# Level = Easy\n# Tests = mean\ndf['Casualities'].mean()","0619b949":"# Level: Easy \/ Medium\n# Tests: Barplot\nplt.subplots(figsize=(15,6))\nsns.countplot('Year',data=df,palette='RdYlGn_r',edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90) #make x ticks (years) horizontal' so they won't collapse with eachother\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","ba302951":"# Level: Easy\/Medium\n# Tests: Horizontal Barplot, Filtering\nplt.subplots(figsize=(15,6))\nsns.countplot(y='TargetType',data=df[df['Region'] == 'North America'],orient ='horizontal',palette='inferno')\nplt.title('Most common targets in the north american region')\nplt.show()","a8d469e2":"# Level: Easy\n# Tests: Piechart\ndf['WeaponType'].value_counts().plot.pie()","03067aa9":"# Level: Medium\n# Tests: Piechart, Working a series\nweapon_series = df['WeaponType'].value_counts()\nvalues_to_show = 5\nweapon_series = weapon_series.nlargest(values_to_show).append(pd.Series(weapon_series.nsmallest(weapon_series.size - values_to_show).sum(),index=['other']))\nweapon_series.plot.pie()","52928ac4":"# Level: Really Hard\n# Tests: Filtering, World Map, Filtering\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.patches as mpatches\nm3 = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\nlat_100=list(df[df['Casualities']>=75].latitude)\nlong_100=list(df[df['Casualities']>=75].longitude)\nx_100,y_100=m3(long_100,lat_100)\nm3.plot(x_100, y_100,'go',markersize=5,color = 'r')\nlat_=list(df[df['Casualities']<75].latitude)\nlong_=list(df[df['Casualities']<75].longitude)\nx_,y_=m3(long_,lat_)\nm3.plot(x_, y_,'go',markersize=2,color = 'b',alpha=0.4)\nm3.drawcoastlines()\nm3.drawcountries()\nm3.fillcontinents(lake_color='aqua')\nm3.drawmapboundary(fill_color='aqua')\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.title('Global Terrorist Attacks')\nplt.legend(loc='lower left',handles=[mpatches.Patch(color='b', label = \"< 75 casualities\"),\n                    mpatches.Patch(color='red',label='> 75 casualities')])\nplt.show()","7e9daf75":"from IPython.display import HTML\nimport base64\ngif = io.open('\/kaggle\/input\/globalterror\/UsaTerror.gif', 'rb').read()\nencoded = base64.b64encode(gif)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","44a232a6":"# Level: Crazy Hard\n# Tests: Filtering, WorldMap, ScatterPlot, Gif\nfrom matplotlib import animation,rc\nfrom IPython.display import display\nimport warnings\nterror_israel=df[df['Country']=='Israel']\nfig = plt.figure(figsize = (10,8))\ndef animate(Year):\n    ax = plt.axes()\n    ax.clear()\n    ax.set_title('Terrorism In Israel '+'\\n'+'Year:' +str(Year))\n    m6 = Basemap(projection='mill',llcrnrlat=28,llcrnrlon=34,urcrnrlat=35,urcrnrlon=37,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\n    lat_gif1=list(terror_israel[terror_israel['Year']==Year].latitude)\n    long_gif1=list(terror_israel[terror_israel['Year']==Year].longitude)\n    x_gif1,y_gif1=m6(long_gif1,lat_gif1)\n    m6.scatter(x_gif1, y_gif1,s=[killed+wounded for killed,wounded in zip(terror_israel[terror_israel['Year']==Year].Killed,terror_israel[terror_israel['Year']==Year].Wounded)],color ='r') \n    m6.drawcoastlines()\n    m6.drawcountries()\n    m6.fillcontinents(color='white',lake_color='aqua', zorder = 1,alpha=0.4)\n    m6.drawmapboundary(fill_color='aqua')\nani = animation.FuncAnimation(fig,animate,list(terror_israel.Year.unique()), interval = 1500)    \nani.save('animation.gif', writer='imagemagick', fps=1)\nplt.close(1)\nfilename = 'animation.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","3b6ecd08":"# Level: Easy\n# Tests: Groupby, mean, barplot\ncasualities_per_region = df.groupby('Region')['Casualities'].sum()\nsns.barplot(casualities_per_region.index,casualities_per_region.values)\nplt.xticks(rotation=90) #make x ticks (years) horizontal' so they won't collapse with eachother\nplt.title('Number of casualities per region')\nplt.show()","455718bb":"# Level: Easy\n# Tests: Filtering\nlist(df[(df['Day'] == 11) & (df['Month'] == 9) & (df['Year'] == 2001) & (df['Country'] == 'United States')]['Summary'])","7bda0584":"# Level: Easy\n# Tests: loc \/ iloc\ndf.loc[73905]['Summary']","fd7bb336":"# Level: Medium \/ Hard\n# Tests: Boxplot, Filtering, Groupby\ntop_n = 10\ntop_n_killer_groups = list(df.groupby('Group')['Casualities'].sum().sort_values(ascending=False).nlargest(top_n).index)\nsns.boxplot(x = \"Group\", y = \"Casualities\",data = df[df['Group'].isin(top_n_killer_groups)])\nplt.xticks(rotation=90) #make x ticks (years) horizontal' so they won't collapse with eachother\nplt.title('Number of casualities per region')\nplt.ylim(0,150)\nplt.show()","29cb920c":"# Level: Very Easy\n# Tests: sorting\nmost_deadly_attack = df.sort_values(by='Killed',ascending=False).max()\nprint(f'The most deadly terror attack was preformed in {most_deadly_attack[\"Country\"]} by {most_deadly_attack[\"Group\"]} and {int(most_deadly_attack[\"Killed\"])} were killed')","a08fefb9":"# Level: Hard\n# Tests: Lineplot, Groupby, Working with series\ntop_groups10=df['Group'].value_counts()[1:11].index\nfig, ax = plt.subplots(figsize=(15,7))\ndf[df['Group'].isin(top_groups10)].groupby(['Year','Group'])['Group'].value_counts().droplevel(2).unstack().fillna(0).plot(ax=ax)","818e461b":"# Level: Easy \/ Hard\n# Tests: groupby, Group barplot\nkilled_and_wounded_per_region = df.groupby('Region')[['Killed','Wounded']].sum()\nkilled_and_wounded_per_region.plot(kind='barh')\n\n","65bfe2e4":"# or using seaborn\nkilled_and_wounded_per_region = df.groupby('Region')[['Killed','Wounded']].sum()\nkilled_and_wounded_per_region = killed_and_wounded_per_region.reset_index()\nkilled_and_wounded_per_region = killed_and_wounded_per_region.melt('Region',var_name='a', value_name='b')\nsns.barplot(x='b', y='Region', hue='a', data=killed_and_wounded_per_region)\n","480b0013":"# Level: Easy\n# Tests: Mode, Filtering\ndf[df['Country'] == 'India']['AttackType'].mode()","4f3305d9":"# Level: Hard\n# Tests: Groupby, Working with series, mode\nmode_attackType_per_country = df.groupby('AttackType')['Country'].apply(lambda x: x.mode())\nmode_attackType_per_country","c124c4bd":"# Level: Easy\n# Tests: Lineplot\n\nfig, ax = plt.subplots(figsize=(15,7))\ndf[(df['AttackType'] == 'Armed Assault') & (df['Country'] == 'Pakistan')].groupby('Year').size().plot(ax=ax)","cfa99ac7":"country_stats = pd.read_csv('\/kaggle\/input\/undata-country-profiles\/country_profile_variables.csv')","3a11cd3e":"country_stats.head()","c0881c0a":"# Level: Hard\n# Tests, Merge, Maipulating the dataset\nmerged = country_stats.merge(df,left_on='country',right_on='Country',suffixes=('_left', '_right'),how='right')\nmerged['Region'] = merged['Region_right']\nmerged['Population'] = merged['Population in thousands (2017)'] * 1000\nmerged= merged.groupby(['country'])[['Region','Population']].first().reset_index()\n\nmerged","dc720936":"# Level: Hard\n# Tests: Scatterplot, working with series\ncountries_with_population = df[df['Country'].isin(merged['country'])]\nattacks_per_citizen = countries_with_population['Country'].value_counts().sort_index() \/ merged.set_index('country')['Population']\nkilled_per_citizen = countries_with_population.groupby('Country')['Killed'].sum() \/ merged.set_index('country')['Population']\nmerged.set_index('country')['Region']\nplot_df = pd.concat([attacks_per_citizen,killed_per_citizen,merged.set_index('country')['Region']], axis=1, keys=['attacks', 'killed','region'])\n\n\nplt.subplots(figsize=(15,6))\nsns.scatterplot(x='attacks', y='killed',data=plot_df, hue='region')","9997d487":"Create a scatter plot in which every dot represents a country. the x axis represents the number of attacks per citizen and the y axis represents the number of killed citizens per citizen. make each region be in a different color","e69895e3":"for example here is an example of this gif but instead of israel, its for the united states","1734b3e8":"for each Attack type, retrive the country which that attack type happens the most in \n(In other words, retrive the **mode** country foreach attack type)\n(Hint, read on the SeriesGroupBy.apply)","e370fa55":"Wow that pie chart is clutterd!, Show only the top 5 values from the piechart, and group the other values into an \"other\" section","611bc276":"Show the mean number of casualities from a terror attacl","17fd577e":"Based on the previous question, show a lineplot of the Armed Assault attacks in the country which it is most common through the years","75728344":"As you can see the region of this dataframe is formatted differently then the one we have in our terrorist attacks dataset.\ncreate a new dataset which has 3 columns, the name of the country, the population of the country and the region as it is mentioned in the terrorist attacks dataset (countries which do not appear in our terrorist attacks dataset are not important for us, so they don't have to be included)\n(notice that the population in this dataset is in thousands, we need the number of citizens (not in thousands))","ad8271bd":"Find the 9\/11 terror attack and print the summary of it (Hint, the \"9\/11\" attack actually refers to multipule attacks which happend in the same time in the United States)","9885c54a":"Find the terror attacks with the most killed, print the country it was in, the group who performed it and the number of killed","5a2e67a0":"Show a Grouped barplot of the total number of Killed and Wounded people in each region","af311b63":"Show a boxplot of casualities per group from the top 10 deadliest groups (who had the most casualities summed up)","ba235cdf":"Show the most used Weapon Types in a piechart","1e1bc1b6":"Things i wat to test on\n\nVisuallization:\n1. barplot \\ horizontal barplot\n2. Histogram\n3. pie chart\n4. Scatter plot\n5. boxplot\n6. violin plot\n7. heat map\n8. line graph\n9. multi bar barplot?\n10. world map (advanced)\n11. gif (really advanced)\n\npandas:\n1. simple mean,median,mode\n2. loc \\ iloc to find specific\n3. groupby\n4. merge\n5. Filtering\n6. sorting\n7. Maipulating the dataset\n8. Working with series","d9b52c88":"Create a Gif of a scatter plot ontop of the map of israel, where each frame represents a year and a the dots represent a terror attack, the bigger the dot the more casualities the terror attack had","3b2150b1":"We have another data set, with statistical data about countries","417309d8":"Show a lineplot of the number of terror attacks over the year by the top 10 infamous groups (who preformed the most terror attacks overall)","f76f0f82":"Show on a scatter plot ontop of the world map of terror attacks in two colors, blue when the number of casualities is below 75 and red when the number of casualities is above 75","4bba4a8e":"Show the summary of the terror attack in index 73905","8bb0861c":"Create a horizontal barplot showing the most popular Target Type From Terror Attacks in the North American Region","d79cfc33":"Show a Barplot\/Countplot of the number of of terrorist attacks every year","507a73c4":"Show The sum of casualities per region (on a barplot)","b70137b7":"Find The most Common attack type in india"}}