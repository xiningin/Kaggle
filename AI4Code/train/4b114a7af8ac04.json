{"cell_type":{"75eb9c78":"code","3eae5c64":"code","4b150616":"code","84500f53":"code","4c6fda84":"code","c41145ce":"code","7ece1adf":"code","4e8c7d4a":"code","b6ef6296":"code","36464dee":"code","4ad69c78":"code","268650f7":"code","54d85179":"code","1f1424a8":"code","84cad1b4":"code","39b0f6fb":"markdown"},"source":{"75eb9c78":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nimport os\nimport torch\nimport os\nimport shutil\n#from IPython.display import Image, clear_output  # to display images","3eae5c64":"output= \"\/kaggle\/working\/math-formula-detection\"\nfor dirname,subdirs, _ in os.walk('\/kaggle\/input\/math-formula-detection'):\n    for subdir in subdirs:\n        full_subdir = os.path.join(dirname,subdir)\n        for mydir,mysub,_ in os.walk(full_subdir):\n            for sub in mysub:\n                if sub==\"labels\":\n                    print(sub)\n                    full_mysub = os.path.join(mydir,sub)\n                    for mydir2,mysub2,_ in os.walk(full_mysub):\n                        for mysub3 in mysub2:\n                            output_dir = os.path.join(output,subdir,sub,mysub3)\n                            myfull_mysub= os.path.join(mydir2,mysub3)\n                            for mydir3,_,fileList in os.walk(myfull_mysub):\n                                for file in fileList:\n                                    file_path =os.path.join(mydir3,file)\n                                    new_txt_path = os.path.join(output_dir, file)\n                                    image_path =os.path.join(mydir,\"images\",mysub3,file)\n                                    image_file_path = image_path.split(\".\")[0] + \".jpg\" if subdir==\"ICDAR2021\" else image_path.split(\".\")[0] + \".png\"\n                                    image = Image.open(image_file_path)\n                                    image_width, image_height = image.size\n                                    image.close()\n                                    if not os.path.exists(output_dir):\n                                        os.makedirs(output_dir)\n                                    g = open(new_txt_path, 'w')\n                                    with open(file_path, 'r') as f:\n                                        \n                                        for i, line in enumerate(f.readlines()):\n                                            line = line.replace(' ', '')\n                                            line = line.strip('\\n').split('\\t')\n                                            ## The following 4 lines get the mid-x,mid-y,height,width (normalize [0,1])\n                                            label = line[0]\n                                            box_width = (int(line[3])-int(line[1]))\/image_width\n                                            box_height = (int(line[4])-int(line[2]))\/image_height\n                                            x1=round((int(line[1])\/image_width)+(box_width\/2),6)\n                                            y1 = round((int(line[2])\/image_height)+(box_height\/2),6)\n                                            w=round(box_width,6)\n                                            h = round(box_height,6)\n                                            data = label + '\\t' + str(x1) + '\\t' + str(y1) + '\\t' + str(w) + '\\t' + str(h) + '\\n'\n                                            g.write(data)\n                                        g.close()\n                                        \n                                break\n                        break\n            break\n        \n    break\n    ","4b150616":"output= \"\/kaggle\/working\/math-formula-detection\"\nfor dirname,subdirs, _ in os.walk('\/kaggle\/input\/math-formula-detection'):\n    for subdir in subdirs:\n        full_subdir = os.path.join(dirname,subdir)\n        for mydir,mysub,_ in os.walk(full_subdir):\n            for sub in mysub:\n                if sub==\"labels\":\n                    print(sub)\n                    full_mysub = os.path.join(mydir,sub)\n                    for mydir2,mysub2,_ in os.walk(full_mysub):\n                        for mysub3 in mysub2:\n                            output_dir = os.path.join(output,subdir,sub,mysub3)\n                            myfull_mysub= os.path.join(mydir2,mysub3)\n                            for mydir3,_,fileList in os.walk(myfull_mysub):\n                                for file in fileList:\n                                    file_path =os.path.join(mydir3,file)\n                                    new_txt_path = os.path.join(output_dir, file)\n                                    image_path =os.path.join(mydir,\"images\",mysub3,file)\n                                    image_file_path = image_path.split(\".\")[0] + \".jpg\" if subdir==\"ICDAR2021\" else image_path.split(\".\")[0] + \".png\"\n                                    image = Image.open(image_file_path)\n                                    image_width, image_height = image.size\n                                    image.close()\n                                    if not os.path.exists(output_dir):\n                                        os.makedirs(output_dir)\n                                    g = open(new_txt_path, 'w')\n                                    with open(file_path, 'r') as f:\n                                        \n                                        for i, line in enumerate(f.readlines()):\n                                            line = line.replace(' ', '')\n                                            line = line.strip('\\n').split('\\t')\n                                            ## The following 4 lines get the mid-x,mid-y,height,width (normalize [0,1])\n                                            label = line[0]\n                                            box_width = (int(line[3])-int(line[1]))\/image_width\n                                            box_height = (int(line[4])-int(line[2]))\/image_height\n                                            x1=round((int(line[1])\/image_width)+(box_width\/2),6)\n                                            y1 = round((int(line[2])\/image_height)+(box_height\/2),6)\n                                            w=round(box_width,6)\n                                            h = round(box_height,6)\n                                            data = label + '\\t' + str(x1) + '\\t' + str(y1) + '\\t' + str(w) + '\\t' + str(h) + '\\n'\n                                            g.write(data)\n                                        g.close()\n                                        \n                                break\n                        break\n            break\n        \n    break\n    ","84500f53":"output= \"\/kaggle\/working\/math-formula-detection\"\nfor dirname,subdirs, _ in os.walk('\/kaggle\/input\/math-formula-detection'):\n    for subdir in subdirs:\n        full_subdir = os.path.join(dirname,subdir)\n        for mydir,mysub,_ in os.walk(full_subdir):\n            for sub in mysub:\n                if sub==\"images\":\n                    full_mysub = os.path.join(mydir,sub)\n                    dst = os.path.join(output,subdir,\"images\")\n                    print(dst)\n                    shutil.copytree(full_mysub, dst)\n            break\n    break","4c6fda84":"#clone YOLOv5 and \n!git clone https:\/\/github.com\/ultralytics\/yolov5  # clone repo\n%cd yolov5\n%pip install -qr requirements.txt # install dependencies\n%pip install -q roboflow\n\n\nimport torch\nfrom yolov5 import utils\ndisplay = utils.notebook_init()  # checks\nprint(f\"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})\")","c41145ce":"import shutil \n#shutil.rm(\"\/kaggle\/working\/yolov5\/\")\n","7ece1adf":"import shutil\nsource = '\/kaggle\/input\/mydata\/ICDAR20.yaml'\ndestination = '\/kaggle\/working\/yolov5\/data\/ICDAR2019.yaml'\n\nshutil.copyfile(source, destination)","4e8c7d4a":"# Tensorboard  (optional)\n%load_ext tensorboard\n%tensorboard --logdir runs\/train","b6ef6296":"# Weights & Biases  (optional)\n%pip install -q wandb\nimport wandb\nwandb.login()","36464dee":"!python train.py --img 416 --batch 16 --epochs 2 --data data\/ICDAR2019.yaml --weights yolov5s.pt --cache","4ad69c78":"import pandas as pd\npd.read_csv(\"\/kaggle\/working\/yolov5\/runs\/train\/exp\/results.csv\")","268650f7":"!ls data\n","54d85179":"!add-apt-repository ppa:ubuntu-toolchain-r\/test -y","1f1424a8":"!apt-get update\n!apt-get upgrade libstdc++6 -y\n","84cad1b4":"!dpkg --configure -a","39b0f6fb":"**Step 1: Install Requirements**"}}