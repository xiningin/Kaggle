{"cell_type":{"8ffd65d0":"code","c4454e43":"code","3cd2fe2b":"code","d1df063d":"code","2bc369b0":"code","43435b8c":"code","fdb9b851":"code","ff6ee9e9":"code","a3bb9d09":"markdown","19c82550":"markdown","65e1e07d":"markdown","907a42fe":"markdown","97fd8d79":"markdown","56cf31af":"markdown","04a6fa90":"markdown","e5841fe1":"markdown","dc1252b8":"markdown","8838a14b":"markdown","62ef1250":"markdown"},"source":{"8ffd65d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c4454e43":"#First things first so import the packages and read the data using pandas as below\n\nfrom keras.datasets import mnist\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.cm as cm\nimport numpy as np\n\n# use Keras to import pre-shuffled MNIST database\n#(X_train, y_train), (X_test, y_test) = mnist.load_data()\ndata_train = pd.read_csv('..\/input\/train.csv')\nX_train = data_train.loc[:, data_train.columns != 'label']\nY_train = data_train['label']\n\nX_test = pd.read_csv('..\/input\/test.csv')\n\n\n\n\nprint(\"The MNIST database has a training set of %d examples.\" % len(X_train))\nprint(\"The MNIST database has a test set of %d examples.\" % len(X_test))","3cd2fe2b":"X_test = X_test.as_matrix()\nX_test = X_test.reshape(len(X_test),28,28)\n\nX_train = X_train.as_matrix()\nX_train = X_train.reshape(len(X_train),28,28)\n\n# rescale [0,255] --> [0,1]\nX_train = X_train.astype('float32')\/255\nX_test = X_test.astype('float32')\/255","d1df063d":"def visualize_input(img, ax):       \n    ax.imshow(img, cmap='gray')    \n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(X_test[2000], ax)\n#visualize_input(X_train[250], ax)\n#print(Y_train[0])","2bc369b0":"from keras.utils import np_utils\n\n# print first ten (integer-valued) training labels\nprint('Integer-valued labels:')\nprint(Y_train[250])\n\n# one-hot encode the labels\nY_train = np_utils.to_categorical(Y_train, 10)\n#y_test = np_utils.to_categorical(y_test, 10)\n\n# print first ten (one-hot) training labels\nprint('One-hot labels:')\nprint(Y_train[250])","43435b8c":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\nX_train = X_train.reshape(len(X_train),28,28,1)\n\n\n# define the model\nmodel = Sequential()\n#model.add(Flatten(input_shape=X_train.shape[1:]))\nmodel.add(Conv2D(filters=16, kernel_size=2, strides=2,padding='same', activation='relu', input_shape=(28, 28,1)))\n#model.add(GlobalAveragePooling2D())\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(filters=32, kernel_size=2, strides=2,padding='same', activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(filters=64, kernel_size=2, strides=2,padding='same', activation='relu'))\n#model.add(Dense(512, activation='relu'))\n#model.add(Dropout(0.5))\n#model.add(Dense(10, activation='softmax'))\n#model.add(MaxPooling2D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n# summarize the model\nmodel.summary()","fdb9b851":"model.compile(loss='categorical_crossentropy', optimizer='Adam',metrics=['accuracy'])","ff6ee9e9":"from keras.callbacks import ModelCheckpoint,TensorBoard \nimport tensorflow as tf\n# train the model\ncheckpointer = ModelCheckpoint(filepath='mnist.model.best.hdf5', \n                               verbose=1, save_best_only=True)\n#tf.summary.scalar('CheckPoint',checkpointer)\nBoard = TensorBoard(log_dir='..\/output\/logs', histogram_freq=0, batch_size=1000, write_graph=True, write_grads=False, write_images=True, embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None, embeddings_data=None)\n\nhist = model.fit(X_train, Y_train, batch_size=1000, epochs=5,\n          validation_split=0.2, callbacks=[checkpointer,Board],\n          verbose=1, shuffle=True)","a3bb9d09":"For more information about TensorBoard\nhttps:\/\/www.tensorflow.org\/guide\/summaries_and_tensorboard\n\nKera callback Tensor Board\nhttps:\/\/keras.io\/callbacks\/\n\nGive me thumb up if you like it and leave any comments and feedback. \n\nThanks\n","19c82550":"Here it is , it is run time so you can see the metrics as your model keeps training with each epochs.\n![image2.png](attachment:image.png)","65e1e07d":"Convert the data sets into matrix and reshape the inputs to 28 x 28 since each image is 768 pixels","907a42fe":"Compile the model with Adam optimizer","97fd8d79":"This is my first kernal and any feedback are really appreciate.\n\n","56cf31af":"Now lets check labels and corresponding value. We will convert the labels into binary format.","04a6fa90":"Click on SCALARS tab, to see the metrics as below \n\n![image1.png](attachment:image.png)\n\n","e5841fe1":"Visualize any one image and check how the pixels values are spread across the digit, The pixel value on the image will help us to identify the pattern.\n","dc1252b8":"Create the Convolution Neural Network using Keras","8838a14b":"Now it's the fun part to execute the Model and share the model with TensorBoard. As I used Keras to build the model, I delared the TensorBoard callback and passed the callback in the model execution.","62ef1250":"While the model is still in execution we can start the Tensor board with below command\n\nTensorboard --logdir='<<Your complete path the log directory' \n\nplease note logdir should be complete path any relative paths will not be accepted and throws an error message\n\nOnce the TensorBoard recognize the path and it gives below path \nhttp:\/\/yourmachinename:6006\nthis path might work in few machine if your machine recognize if not open the chrome and paste below path to open\nhttp:\/\/localhost:6006\n\nHere you go, you can see the grpah as below\n\n![image.png](attachment:image.png)"}}