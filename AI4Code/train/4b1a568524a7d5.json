{"cell_type":{"46c9900d":"code","49a26bd4":"code","57bc06fb":"code","fc787a37":"code","37f8e697":"code","00030dd8":"code","e636a590":"code","5556ba22":"code","51e29392":"code","eb17901f":"code","3065d8c3":"code","462ec2f8":"code","bd75a22c":"code","857efc76":"code","968210ca":"code","7407e27c":"code","e980fff5":"code","53c32283":"code","e47159ee":"code","b84baa9b":"code","d2feba79":"code","eea4b363":"code","dd1d9300":"code","17a96ab8":"code","00677c34":"code","b64e1931":"code","2cb84cac":"code","d64282c6":"code","e0c27a66":"code","0d769794":"code","98c2712f":"code","18a45724":"code","2e7afe7a":"code","95e22157":"code","3ed3f9ca":"code","c2cd0641":"code","ceafe8bf":"code","6cb6f037":"code","77e749bc":"code","5ada0d90":"code","717fb393":"code","0194c414":"code","735e8116":"code","d46f9801":"code","ef282dbe":"code","ee2cdd23":"code","2096eda7":"code","5f4746d3":"code","673d9b26":"code","b02f54d9":"code","92bd43cf":"code","b7898423":"code","f17a1715":"code","5c85fefb":"code","50c02483":"code","e53dc86b":"code","b9c439ba":"code","39c4741e":"code","6d2fd112":"code","f03db28e":"code","e2eebef2":"code","e2e8614a":"code","610a2c5f":"code","7597a310":"code","4e67a35b":"code","bf3fdeda":"markdown","afdd6331":"markdown","3ea68ef4":"markdown","412cfa97":"markdown","89bec12b":"markdown","f6804b11":"markdown","6d6ec4ec":"markdown","bea72bfe":"markdown","4990d9a4":"markdown","a2043ea8":"markdown","74843947":"markdown","c1ea3274":"markdown","46e06a24":"markdown","d2571bb9":"markdown","831b3157":"markdown","4cb1cd61":"markdown","6d7f61fd":"markdown","1a93c96e":"markdown","564cb58c":"markdown","d66caee7":"markdown","b7ada54e":"markdown","89c6e771":"markdown","d74a8a6d":"markdown","ffb66d69":"markdown","c1d6e83c":"markdown","9c7e2c45":"markdown","a4d08736":"markdown","1b5b504a":"markdown","d15b3ce1":"markdown","b220398a":"markdown","3cbd769a":"markdown","3d74a573":"markdown","c9e022bc":"markdown","92fff224":"markdown","9155c68b":"markdown","732e5349":"markdown","31cfbe62":"markdown","a8abb0b0":"markdown","aaf8ab58":"markdown","9446ad5a":"markdown","a6b03870":"markdown","ca977aea":"markdown","6a36dff9":"markdown","89e277a7":"markdown","fa7c0e6e":"markdown","4958687c":"markdown","e6ab1c58":"markdown","858a3f85":"markdown","988ca7ce":"markdown","fe011fb6":"markdown"},"source":{"46c9900d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot  as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49a26bd4":"dataset = pd.read_csv('..\/input\/housedata\/data.csv')\ndataset.info()","57bc06fb":"dataset.shape","fc787a37":"dataset.head()","37f8e697":"dataset.drop(['date'], axis = 1, inplace = True)\ndataset.head()","00030dd8":"dataset.country.value_counts()","e636a590":"dataset.drop(['country'], axis = 1, inplace = True)\ndataset.head()","5556ba22":"dataset.drop(['street', 'city'], axis = 1, inplace = True)\ndataset.head()","51e29392":"dataset.isnull().sum()","eb17901f":"a4_dims = (10, 8)\nfig, ax = plt.subplots(figsize=a4_dims)\ncor = dataset.corr()\nsns.heatmap(cor, annot = True, cmap=\"YlGnBu\")","3065d8c3":"a4_dims = (15, 5)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.barplot(x = dataset.bedrooms, y = dataset.price)","462ec2f8":"dataset.groupby('bedrooms').price.agg([len, min, max])","bd75a22c":"df = dataset[(dataset.bedrooms > 0) & (dataset.bedrooms < 9)].copy()","857efc76":"df.shape","968210ca":"df.statezip.value_counts()","7407e27c":"a4_dims = (5, 18)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.barplot(ax = ax, x = df.price, y = df.statezip)","e980fff5":"a4_dims = (15, 8)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.distplot(a = df.price, bins = 1000, color = 'r', ax = ax)","53c32283":"df.price.agg([min, max])","e47159ee":"len(df[(df.price == 0)])","b84baa9b":"a4_dims = (15, 5)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.barplot(x = df.bathrooms, y = df.price)","d2feba79":"zero_price = df[(df.price == 0)].copy()\nzero_price.shape","eea4b363":"zero_price.head()","dd1d9300":"sns.distplot(zero_price.sqft_living)","17a96ab8":"zero_price.agg([min, max, 'mean', 'median'])","00677c34":"sim_from_ori = df[(df.bedrooms == 4) & (df.bathrooms > 1) & (df.bathrooms < 4) & (df.sqft_living > 2500) & (df.sqft_living < 3000) & (df.floors < 3) & (df.yr_built < 1970)].copy()","b64e1931":"sim_from_ori.shape","2cb84cac":"sim_from_ori.head()","d64282c6":"sim_from_ori.price.mean()","e0c27a66":"yr_sqft = df[(df.sqft_living > 2499) & (df.sqft_living < 2900)].copy()\nyr_price_avg = yr_sqft.groupby('yr_built').price.agg('mean')","0d769794":"plt.plot(yr_price_avg)","98c2712f":"df.price.replace(to_replace = 0, value = 735000, inplace = True)\nlen(df[(df.price == 0)])","18a45724":"df.head()","2e7afe7a":"df.drop(['sqft_above'], axis = 1, inplace = True)\ndf.shape","95e22157":"df = df.reset_index()\ndf.info()","3ed3f9ca":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()","c2cd0641":"df['statezip_encoded'] = le.fit_transform(df.statezip)\ndf.head()","ceafe8bf":"df.statezip_encoded.value_counts()","6cb6f037":"df.drop(['statezip'], axis = 1, inplace = True)\ndf.head()","77e749bc":"from sklearn.preprocessing import OneHotEncoder\nohc = OneHotEncoder()","5ada0d90":"ohc_df = pd.DataFrame(ohc.fit_transform(df[['statezip_encoded']]).toarray())\n# ohc_df = ohc_df.astype(int)\nohc_df.head()","717fb393":"df = df.join(ohc_df)\ndf.head()","0194c414":"df.tail()","735e8116":"df.drop(['statezip_encoded'], axis = 1, inplace = True)","d46f9801":"df.info","ef282dbe":"df.shape","ee2cdd23":"X = df.iloc[:, 1:]\nX.shape","2096eda7":"y = df.price","5f4746d3":"from sklearn.model_selection import train_test_split\nX_train, X_rem, y_train, y_rem = train_test_split(X, y, test_size=0.1, random_state=42)","673d9b26":"print(len(X_train) \/ len(df))","b02f54d9":"X_val, X_test, y_val, y_test = train_test_split(X_rem, y_rem, test_size=0.5, random_state=42)\nprint(len(X_test) \/ len(y_rem))","92bd43cf":"print(len(X_train))\nprint(len(X_val))\nprint(len(X_val))","b7898423":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()","f17a1715":"lin_reg.fit(X_train, y_train)","5c85fefb":"from sklearn.metrics import mean_squared_error\ny_pred = lin_reg.predict(X_val)\nmse = mean_squared_error(y_pred, y_val)\nrmse = np.sqrt(mse)\nrmse","50c02483":"y_val.head(10)","e53dc86b":"y_pred","b9c439ba":"y_pred_test = lin_reg.predict(X_test)\nmse = mean_squared_error(y_pred_test, y_test)\nrmse = np.sqrt(mse)\nrmse","39c4741e":"lin_reg.score(X_test, y_test)","6d2fd112":"y_test","f03db28e":"y_pred_test","e2eebef2":"from sklearn.tree import DecisionTreeRegressor\n\nreg = DecisionTreeRegressor(random_state = 42, max_depth = 10)","e2e8614a":"reg.fit(X_train, y_train)","610a2c5f":"reg.score(X_test, y_test)","7597a310":"y_val.head(10)","4e67a35b":"y_pred_dt","bf3fdeda":"# Decision tree regression","afdd6331":"*need to set some price for these records*","3ea68ef4":"Get the average price of these instances","412cfa97":"# Handling the index order\nBy removing some rows our original dataset index is changed. Let's fix it","89bec12b":"Drop the statezip_encoded field","f6804b11":"# Analysis on bathroom feature w.r.t. price","6d6ec4ec":"**Checking for null values**","bea72bfe":"*Hence proved that 0 & 9 are outliers. Let's remove them*","4990d9a4":"Splitting dataset into train and remainder","a2043ea8":"Mergeing ohc_df into the main dataset","74843947":"# Splitting into train and test set","c1ea3274":"Since sqft_living is the most important feature and sqft_living & sqft_above are highly corellated we are going  to remove the sqft_above feature.","46e06a24":"# Linear regression","d2571bb9":"**Checking how many different Countries are there**","831b3157":"Groupby on price","4cb1cd61":"# Data Exploration","6d7f61fd":"Checking for unique zip code","1a93c96e":"# Analysis on all the instances whose price is 0","564cb58c":"# Handling categorical statezip feature","d66caee7":"*All the zip codes are of Washington. Let's do a correlation analysis of zip codes*","b7ada54e":"**Replacing all 0 price values with $730000**","89c6e771":"Predict","d74a8a6d":"Splitting remainder into validation and test set","ffb66d69":"Drop the statezip field","c1d6e83c":"Let's find more correlation between the 0 price houses","9c7e2c45":"Fitting the model","a4d08736":"Performing label encoder","1b5b504a":"*No null values present*","d15b3ce1":"corellation of price with no. of bedrooms","b220398a":"Let's get the count  of respective no. of bedrooms","3cbd769a":"**Delete date column** Date column is irrelevant","3d74a573":"*0 & 9 bedrooms are probably an outlier. Let's dive deeper*","c9e022bc":"Let's print the length of all the 3 splits","92fff224":"# Analysis on the zipcode feature","9155c68b":"# Feature reduction","732e5349":"Since we already have statezip, we can safely delete street and city.","31cfbe62":"**One hot encoding**","a8abb0b0":"Deleting the country column as all the records have the same country, hence irrelevant","aaf8ab58":"*This confirms our assumption. The avg. pricing of such houses is between 600000 to 800000*","9446ad5a":"# General corellation analysis","a6b03870":"**Loading Dataset**","ca977aea":"**We are going to use common ranges from the above table to get similar records from the original dataset and non-zero price to set the values of 0 price instances**","6a36dff9":"Let's confirm this by comparing with the other house price of the same yr_built and having similar sq_ft","89e277a7":"Let's get the unique value of the most important features","fa7c0e6e":"Let's confirm our label encoding","4958687c":"*Most of the 0 price houses are in the range 1000 - 5000 sqft*","e6ab1c58":"**How many instances are there with price = 0?**","858a3f85":"Let's look at the distribution of price","988ca7ce":"Getting all those instances","fe011fb6":"# Analysis on number of bedroom feature"}}