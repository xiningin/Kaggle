{"cell_type":{"a421961a":"code","f4d708d7":"code","e6ae91de":"code","fc8181ac":"code","487e661a":"code","02b974fd":"code","3fbab2d9":"code","b2efbae2":"code","b023f3ba":"code","4e43a88e":"code","3f7d626a":"code","19547585":"code","46e7528e":"code","3320b020":"code","a8f44978":"code","0e6f575f":"code","42dc3746":"code","19236798":"code","b5c8212e":"code","aafa7d11":"code","93fc16db":"code","a27cb9fe":"code","71b8558e":"code","a2a8b402":"code","ec432fec":"code","a438188c":"code","a1a44cff":"code","5ad47d6b":"code","10761db0":"code","07c45ed7":"code","2fde8ff0":"code","58cbef77":"code","712a9fa7":"code","0ed56fe0":"code","fed1a11a":"code","0e1600e2":"code","fe5ba310":"code","51b8f621":"code","4d4469fe":"code","d2cc0217":"code","3146e3bd":"code","a4580801":"code","92a1dd40":"code","8e047c0c":"code","0a47090c":"code","aedeb3d5":"code","be50800b":"code","f1e1cb33":"code","82f2ac15":"code","6757b0cd":"code","d1bff0ff":"code","b5a7c4eb":"code","0a528b11":"code","4ca083c1":"code","cdd20c78":"code","27476358":"code","3abfc473":"code","a4ac4d3c":"code","162136a2":"code","eb64166f":"code","8b8879a5":"code","93a5a731":"code","ec8546f7":"code","c59bf05f":"code","55fc75c4":"code","cf16ed17":"code","6d6e2e1c":"code","dd99d2a3":"markdown","d625d285":"markdown","91e429bb":"markdown","e1d331aa":"markdown","d48b5fcc":"markdown","6b36436d":"markdown","e1141560":"markdown","6519cb0f":"markdown","76dab147":"markdown"},"source":{"a421961a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegressionCV, LogisticRegression\nfrom sklearn.svm import SVC,LinearSVC\nfrom sklearn import preprocessing\nimport seaborn as sns\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier, OutputCodeClassifier\nimport category_encoders as ce\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom scipy.stats import randint as sp_randint,uniform as sp_ranprop\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import RFECV,RFE,SelectFromModel\nimport mlxtend as mx\nfrom mlxtend.classifier import  StackingCVClassifier\nfrom sklearn.neighbors import KNeighborsClassifier, NeighborhoodComponentsAnalysis,RadiusNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB , BernoulliNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom tempfile import mkdtemp\nfrom shutil import rmtree\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\ndef misclass(labels,results,wilderness):\n    analysis = pd.DataFrame({'labels':labels,'results':results,'wilderness':wilderness})\n    analysis['correct'] = (analysis.labels == analysis.results)+0\n    print(pd.crosstab(margins=True,index=analysis.labels,columns=analysis_db.wilderness,values=analysis.correct,aggfunc=np.mean,dropna=False))\n    print(pd.crosstab(margins=True,index=analysis.labels,columns=analysis_db.wilderness,values=analysis.correct,aggfunc=np.sum,dropna=False))\n    \ndef examine(est,validation_set,targets,raw_targets=None,importance_flag=True):\n    if (raw_targets is None):\n        raw_targets=targets\n    if (importance_flag):    \n        low_importances = pd.DataFrame({'importances':est.feature_importances_,\n                                     'names':validation_set.columns})\n        print(low_importances.sort_values('importances'))\n        \n    scores =  est.predict_proba(validation_set.values)[:,1]\n     \n    spreads = pd.DataFrame({'target':targets,\n                  'scores':scores,'raw_target': raw_targets})\n     \n    g = sns.FacetGrid( row='raw_target', data=spreads,sharey=False)\n    g.map(sns.distplot, \"scores\")\n    g.add_legend()\n   \ndef examine_score(scores,targets,raw_targets=None):\n    if (raw_targets is None):\n        raw_targets=targets\n      \n    spreads = pd.DataFrame({'target':targets,\n                  'scores':scores,'raw_target': raw_targets})\n     \n    g = sns.FacetGrid( row='raw_target', data=spreads,sharey=False)\n    g.map(sns.distplot, \"scores\")\n    g.add_legend()\n   ","f4d708d7":"import pandas_profiling","e6ae91de":"SHOWGRAPHS=False","fc8181ac":"#Input training data\ntraining_db = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\n","487e661a":"#training_db.profile_report()","02b974fd":"def transform_db(db):\n    new_db = db.drop(columns=['Soil_Type15','Soil_Type7']).eval(\n        \"calc_slope=Elevation\/(Horizontal_Distance_To_Hydrology+0.01)\").eval(\n        \"calc_slope2=Vertical_Distance_To_Hydrology\/(Horizontal_Distance_To_Hydrology+0.01)\").eval(\n        \"calc_slope3=Vertical_Distance_To_Hydrology\/(Horizontal_Distance_To_Roadways+0.01)\").eval(\n         \"sin_aspect=sin(Aspect\/180*3.14156926)\"\n         ).eval(\"sin_slope=sin(Slope\/180*3.14156926)\").eval(\"h_ratio1=Hillshade_9am\/(Hillshade_3pm+0.01)\").eval(\n            \"hratio2=Hillshade_9am\/(Hillshade_Noon+0.01)\").eval(\n            \"hratio3=Hillshade_3pm\/(Hillshade_Noon+0.01)\").eval(\n    \"diff1 = Elevation - Vertical_Distance_To_Hydrology\"\n    ).eval(\n    \"diff2 = Horizontal_Distance_To_Roadways  - Horizontal_Distance_To_Hydrology\"\n    ).eval(\n    \"diff3 = Horizontal_Distance_To_Roadways  - Horizontal_Distance_To_Fire_Points\"\n    ).eval(\n    \"diff4 = Horizontal_Distance_To_Hydrology- Horizontal_Distance_To_Fire_Points\"\n    ).eval(\"sum1 = Elevation + Vertical_Distance_To_Hydrology\"\n    ).eval(\n    \"sum2 = Horizontal_Distance_To_Roadways  + Horizontal_Distance_To_Hydrology\"\n    ).eval(\n    \"sum3 = Horizontal_Distance_To_Roadways  + Horizontal_Distance_To_Fire_Points\"\n    ).eval(\n    \"sum = Horizontal_Distance_To_Hydrology+ Horizontal_Distance_To_Fire_Points\"\n    ).eval(\"rockoutcropcomplex= Soil_Type1 + Soil_Type3 + Soil_Type4 + Soil_Type5 + Soil_Type6 \\\n                  + Soil_Type11  + Soil_Type28 + Soil_Type33\").eval(\n        \"rubbly = Soil_Type3 + Soil_Type4 + Soil_Type5 + Soil_Type10 + Soil_Type11 +\\\n         Soil_Type13\").eval(\n        \"Vanet = Soil_Type2 +Soil_Type5 + Soil_Type6\").eval(\"Bulwark = Soil_Type10 +Soil_Type11\").eval(\n        \"Leighcan = Soil_Type21 + Soil_Type22 + Soil_Type23 + Soil_Type24 + Soil_Type25+\\\n           Soil_Type27 + Soil_Type28 + Soil_Type31 + Soil_Type32 + Soil_Type33+\\\n           Soil_Type38\").eval(\n        \"ext_stony = Soil_Type1 + Soil_Type24 + Soil_Type25 + Soil_Type27 + Soil_Type28 +\\\n            Soil_Type29 + Soil_Type30 + Soil_Type31 + Soil_Type32 + Soil_Type33 +\\\n            Soil_Type34 + Soil_Type36 + Soil_Type37 + Soil_Type38 + Soil_Type39 +\\\n            Soil_Type40\").eval(\n           \"very_stony = Soil_Type2 + Soil_Type9 + Soil_Type18\").eval(\n           \"stony = Soil_Type6 + Soil_Type12\").eval(\n            \"interact1 = Elevation*Horizontal_Distance_To_Hydrology\"\n    ).eval(\n            \"interact2 = Elevation*Vertical_Distance_To_Hydrology\"\n    ).eval(\n            \"interact3 = Vertical_Distance_To_Hydrology*Horizontal_Distance_To_Hydrology\"\n    ).eval(\n     \"Elevation2 = Elevation*Elevation\"\n    ).eval(\n     \"Vertical_Distance_To_Hydrology2 = Vertical_Distance_To_Hydrology*Vertical_Distance_To_Hydrology\"\n    ).eval(\n     \"Horizontal_Distance_To_Hydrology2 = Horizontal_Distance_To_Hydrology*Horizontal_Distance_To_Hydrology\"\n    ).eval(\"total_light = Hillshade_9am+Hillshade_3pm+Hillshade_Noon\"\n                                                               ).eval(\n    \"morning=Hillshade_9am\/(total_light+0.01)\"\n    ).eval(\n    \"noon=Hillshade_Noon\/(total_light+0.01)\"\n    ).eval(\n    \"afternoon=Hillshade_3pm\/(total_light+0.01)\"\n    ).eval(\n    \"lightdiff1 = Hillshade_9am -Hillshade_3pm\"\n    ).eval(\n    \"lightdiff2 = Hillshade_9am -Hillshade_Noon\"\n    ).eval(\n    \"lightdiff3 = Hillshade_Noon -Hillshade_3pm\"\n    ).eval(\n    \"lightsum1 = Hillshade_9am +Hillshade_3pm\"\n    ).eval(\n    \"lightsum2 = Hillshade_9am +Hillshade_Noon\"\n    ).eval(\n    \"lightsum3 = Hillshade_Noon +Hillshade_3pm\"\n    ).eval(\n    \"North = ((Aspect >= 0) & (Aspect <=45) ) | ((Aspect>=315)&(Aspect<=360) )\"\n    ).eval(\n    \"East = ((Aspect > 45) & (Aspect <=135) )\"\n    ).eval(\n    \"South = ((Aspect > 135) & (Aspect <=225) )\"\n    ).eval(\n    \"West = ((Aspect > 225) & (Aspect <=315) )\"\n    ).eval(\n    \"SouthSlope = cos(South*Slope*3.141592653\/180)\"\n    ).eval(\n    \"WestSlope = cos(West*Slope*3.141592653\/180)\"\n    ).eval(\n    \"EastSlope = cos(East*Slope*3.141592653\/180)\"\n    ).eval(\n    \"NorthSlope = cos(North*Slope*3.141592653\/180)\"\n    )\n\n    \n    \n    new_db[\"accumulate\"]=0\n    soils = new_db.columns.values[\n                             new_db.columns.str.startswith(\"Soil_Type\")]\n    for i,name in enumerate(soils):\n            new_db.accumulate = new_db.accumulate + new_db[name]*int(name.replace('Soil_Type',''))\n        \n      \n    #return new_db.drop(columns=soils)\n    return new_db\n\ntransformed_training_db = transform_db(training_db)","3fbab2d9":"def analyse_db(training_db):\n   analysis_db = training_db.eval(\"wilderness = Wilderness_Area1+Wilderness_Area2*2+Wilderness_Area3*4+Wilderness_Area4*8\") \n   analysis_db[\"Cover_Type\"] = \"c\"+analysis_db.Cover_Type.astype(str)\n   analysis_db[\"wilderness\"] = \"w\"+analysis_db.wilderness.astype(str)\n   analysis_db[\"Grp_Flags\"] = analysis_db.Cover_Type.replace([\"c5\",\"c7\",\"c2\",\"c1\"],\"High\").replace([\"c4\",\"c3\",\"c6\"],\"Low\")\n   analysis_db = pd.concat((analysis_db,pd.get_dummies(analysis_db.Cover_Type,prefix='',dtype=int)),axis=1)\n   analysis_db[\"accumulate\"]=0\n   soils = analysis_db.columns.values[\n                             analysis_db.columns.str.startswith(\"Soil_Type\")]\n   for i,name in enumerate(soils):\n            analysis_db.accumulate = analysis_db.accumulate + analysis_db[name]*(2<<(i+1))\n\n   return analysis_db.eval(\"total_light = Hillshade_9am+Hillshade_3pm+Hillshade_Noon\"\n                                                               ).eval(\n    \"morning=Hillshade_9am\/(total_light+0.01)\"\n    ).eval(\n    \"noon=Hillshade_Noon\/(total_light+0.01)\"\n    ).eval(\n    \"afternoon=Hillshade_3pm\/(total_light+0.01)\"\n    ).eval(\n    \"lightdiff1 = Hillshade_9am -Hillshade_3pm\"\n    ).eval(\n    \"lightdiff2 = Hillshade_9am -Hillshade_Noon\"\n    ).eval(\n    \"lightdiff3 = Hillshade_Noon -Hillshade_3pm\"\n    ).eval(\n    \"lightsum1 = Hillshade_9am +Hillshade_3pm\"\n    ).eval(\n    \"lightsum2 = Hillshade_9am +Hillshade_Noon\"\n    ).eval(\n    \"lightsum3 = Hillshade_Noon +Hillshade_3pm\"\n    ).eval(\n    \"North = ((Aspect >= 0) & (Aspect <=45) ) | ((Aspect>=315)&(Aspect<=360) )\"\n    ).eval(\n    \"East = ((Aspect > 45) & (Aspect <=135) )\"\n    ).eval(\n    \"South = ((Aspect > 135) & (Aspect <=225) )\"\n    ).eval(\n    \"West = ((Aspect > 225) & (Aspect <=315) )\"\n    ).eval(\"direction = North + West*2 + South*3 +East*4\").eval(\n    \"SouthSlope = cos(South*Slope*3.141592653\/180)\"\n    ).eval(\n    \"WestSlope = cos(West*Slope*3.141592653\/180)\"\n    ).eval(\n    \"EastSlope = cos(East*Slope*3.141592653\/180)\"\n    ).eval(\n    \"NorthSlope = cos(North*Slope*3.141592653\/180)\"\n    )\n\nanalysis_db = analyse_db(training_db)","b2efbae2":"pd.crosstab(index=analysis_db.Cover_Type,columns=analysis_db.wilderness)","b023f3ba":"pd.crosstab(index=analysis_db.Cover_Type,columns=analysis_db.direction)","4e43a88e":"if (SHOWGRAPHS):\n sns.boxplot(x=\"wilderness\",y=\"Horizontal_Distance_To_Hydrology\",data=analysis_db)","3f7d626a":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"wilderness\",y=\"Vertical_Distance_To_Hydrology\",data=analysis_db) ","19547585":"if (SHOWGRAPHS):\n    sns.boxplot(x=\"Cover_Type\",y=\"Horizontal_Distance_To_Hydrology\",data=analysis_db)","46e7528e":"if (SHOWGRAPHS):\n    sns.boxplot(x=\"Cover_Type\",y=\"WestSlope\",data=analysis_db)","3320b020":"if (SHOWGRAPHS):\n    sns.boxplot(x=\"Cover_Type\",y=\"EastSlope\",data=analysis_db)","a8f44978":"if (SHOWGRAPHS):\n    sns.boxplot(x=\"Cover_Type\",y=\"SouthSlope\",data=analysis_db)","0e6f575f":"if (SHOWGRAPHS):\n    sns.boxplot(x=\"Cover_Type\",y=\"NorthSlope\",data=analysis_db)","42dc3746":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"Vertical_Distance_To_Hydrology\",data=analysis_db)","19236798":"if (SHOWGRAPHS):\n   sns.boxplot(x=\"Cover_Type\",y=\"Slope\",data=analysis_db)\n","b5c8212e":"\nif (SHOWGRAPHS):\n    sns.boxplot(x=\"wilderness\",y=\"Elevation\",data=analysis_db)","aafa7d11":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"Elevation\",data=analysis_db)","93fc16db":"if (SHOWGRAPHS):\n   sns.scatterplot(x=\"Elevation\",y=\"Vertical_Distance_To_Hydrology\",hue=\"Cover_Type\", \n                data=analysis_db)","a27cb9fe":"if (SHOWGRAPHS):\n      sns.violinplot(x=\"Cover_Type\",y='Horizontal_Distance_To_Fire_Points',data=analysis_db)","71b8558e":"if (SHOWGRAPHS):\n    sns.violinplot(x=\"Cover_Type\",y='Horizontal_Distance_To_Roadways',data=analysis_db)","a2a8b402":"if (SHOWGRAPHS):\n sns.violinplot(x=\"Cover_Type\",y=\"total_light\",data=analysis_db)","ec432fec":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"Aspect\",data=analysis_db)","a438188c":"if (SHOWGRAPHS):\n   sns.boxplot(x=\"Cover_Type\",y=\"Slope\",data=analysis_db)\n","a1a44cff":"if (SHOWGRAPHS):\n  sns.violinplot(x=\"Cover_Type\",y=\"morning\",data=analysis_db)","5ad47d6b":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"noon\",data=analysis_db)","10761db0":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"afternoon\",data=analysis_db)","07c45ed7":"if (SHOWGRAPHS):\n  sns.violinplot(x=\"Cover_Type\",y=\"lightdiff1\",data=analysis_db)\n","2fde8ff0":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"lightdiff2\",data=analysis_db)\n","58cbef77":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"lightdiff3\",data=analysis_db)\n","712a9fa7":"if (SHOWGRAPHS):\n sns.boxplot(x=\"Cover_Type\",y=\"lightsum1\",data=analysis_db)","0ed56fe0":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"lightsum3\",data=analysis_db)","fed1a11a":"if (SHOWGRAPHS):\n sns.boxplot(x=\"Cover_Type\",y=\"lightsum2\",data=analysis_db)","0e1600e2":"if (SHOWGRAPHS):\n  sns.scatterplot(x=\"Elevation\",y=\"Vertical_Distance_To_Hydrology\",hue=\"Grp_Flags\", \n                data=analysis_db)","fe5ba310":"if (SHOWGRAPHS):\n  sns.scatterplot(x=\"Elevation\",y=\"Horizontal_Distance_To_Hydrology\",hue=\"Grp_Flags\", \n                data=analysis_db)","51b8f621":"def diffgraph(cover,xaxis,yaxis):\n   g = sns.FacetGrid(col=\"wilderness\",row=\"accumulate\", data=analysis_db,hue=cover)\n   g.map(sns.scatterplot, xaxis,yaxis)\n   g.add_legend();\n\n\nif (SHOWGRAPHS):\n  diffgraph(\"_c5\",\"Elevation\",\"Vertical_Distance_To_Hydrology\")\n  diffgraph(\"_c5\",\"Vertical_Distance_To_Hydrology\",\"Horizontal_Distance_To_Hydrology\") \n\n","4d4469fe":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db.query(\"Grp_Flags=='High'\"),sharex=False,col_wrap=2)\n  g.map(sns.violinplot, \"Cover_Type\", \"Elevation\")\n  g.add_legend();","d2cc0217":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db.query(\"Grp_Flags=='Low'\"),sharex=False,col_wrap=2)\n  g.map(sns.violinplot, \"Cover_Type\", \"Elevation\")\n  g.add_legend();","3146e3bd":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2)\n  g.map(sns.violinplot, \"Cover_Type\", \"Elevation\")\n  g.add_legend();","a4580801":"if (SHOWGRAPHS):\n  sns.boxplot(x=\"Cover_Type\",y=\"Elevation\", data=analysis_db.query(\"Grp_Flags=='High'\"))","92a1dd40":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2)\n  g.map(sns.boxplot, \"Cover_Type\", \"Aspect\")\n  g.add_legend();","8e047c0c":"if (SHOWGRAPHS):\n g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2)\n g.map(sns.boxplot, \"Cover_Type\", \"Hillshade_3pm\")\n g.add_legend();","0a47090c":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2)\n  g.map(sns.boxplot, \"Cover_Type\", \"Hillshade_9am\")\n  g.add_legend();","aedeb3d5":"if (SHOWGRAPHS):\n g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2)\n g.map(sns.boxplot, \"Cover_Type\", \"Hillshade_Noon\")\n g.add_legend();","be50800b":"if (SHOWGRAPHS):\n  g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2,hue=\"Cover_Type\")\n  g.map(sns.scatterplot, \"Hillshade_3pm\", \"Hillshade_Noon\")\n  g.add_legend();","f1e1cb33":"if (SHOWGRAPHS):\n g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2,hue=\"Grp_Flags\")\n g.map(sns.scatterplot, \"Hillshade_3pm\", \"Hillshade_Noon\")\n g.add_legend();","82f2ac15":"if (SHOWGRAPHS):\n g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2,hue=\"Grp_Flags\")\n g.map(sns.scatterplot, \"Hillshade_3pm\", \"Hillshade_9am\")\n g.add_legend();","6757b0cd":"if (SHOWGRAPHS):\n g = sns.FacetGrid(col=\"wilderness\", data=analysis_db,sharex=False,col_wrap=2,hue=\"Grp_Flags\")\n g.map(sns.scatterplot, \"Aspect\", \"Slope\")\n g.add_legend();","d1bff0ff":"transformed_training_db.accumulate.unique().shape","b5a7c4eb":"\ntransformed_training_db.reset_index(inplace=True)\nIds_train,Ids_validate, y_train,y_validate = train_test_split(transformed_training_db['Id'],\n                                                          transformed_training_db['Cover_Type'],\n                                                          train_size=0.8,\n                                                          random_state=42,\n                                                         stratify=transformed_training_db['Cover_Type']\n                                                         ) \n\ntransformed_training_db.set_index('Id',inplace=True)\nX_train=transformed_training_db.drop(columns=['Cover_Type','index'],errors='ignore').loc[Ids_train]\nprint(X_train.head())\nX_validate=transformed_training_db.drop(columns=['Cover_Type','index'],errors='ignore').loc[Ids_validate]\n\n","0a528b11":"print(y_train.value_counts(),y_validate.value_counts(),transformed_training_db['Cover_Type'].value_counts())","4ca083c1":"#For each cover type get list of soil types it is associated with\n\ntypes = {}\n\nweights = {}\nfor cover,grp in transformed_training_db.loc[Ids_train].groupby('Cover_Type'):\n     types[cover] = [ 'Soil_Type'+str(soil_type) for soil_type in grp.accumulate.unique()]\n     weights[cover] = grp[types[cover]].sum()\/grp.shape[0]\n\n    \ndef soil_types(df):\n    for cover in types:   \n        df[\"soil_for\"+str(cover)]= (df[types[cover]]*weights[cover]).sum(axis=1)\n        \n    df[\"Low_soils\"] = df[[\"soil_for1\",\"soil_for2\",\"soil_for7\",\"soil_for5\"]].sum(axis=1)\n    df[\"High_soils\"] = df[[\"soil_for4\",\"soil_for3\",\"soil_for6\"]].sum(axis=1)\n    \nsoil_types(X_train)\nsoil_types(X_validate)\nsoil_types(analysis_db)","cdd20c78":"\n    \nparams ={\n\n 'randomforestclassifier__min_weight_fraction_leaf': [0.0,0.1,0.2],\n 'randomforestclassifier__n_estimators': sp_randint(100,4000),\n 'extratreesclassifier__n_estimators':  sp_randint(100,4000),\n 'pipeline-2__Features__estimator__n_estimators': sp_randint(50,400),\n  'pipeline-2__Features__max_features': sp_randint(5,50),\n 'pipeline-2__clf__colsample_bytree': sp_ranprop(),\n 'pipeline-2__clf__learning_rate': [0.2,0.1,0.05,0.01],\n 'pipeline-2__clf__max_depth': sp_randint(3,20),\n 'pipeline-2__clf__n_estimators': sp_randint(100,4000),\n 'pipeline-2__clf__reg_alpha': sp_randint(0,4),\n 'pipeline-2__clf__reg_lambda': sp_randint(0,4),\n 'pipeline-2__clf__subsample': sp_ranprop(),\n 'meta_classifier__Features__estimator__n_estimators': sp_randint(100,4000),\n 'meta_classifier__Features__max_features': sp_randint(3,60),\n 'meta_classifier__clf__colsample_bytree': sp_ranprop(),\n 'meta_classifier__clf__learning_rate': [0.2,0.1,0.05,0.01],\n 'meta_classifier__clf__max_depth':sp_randint(3,20),\n 'meta_classifier__clf__n_estimators': [1000,2000,4000,8000],\n 'meta_classifier__clf__reg_alpha': sp_randint(0,4),\n 'meta_classifier__clf__reg_lambda': sp_randint(0,4),\n 'pipeline-1__Features__estimator__n_estimators': sp_randint(50,400),\n 'pipeline-1__Features__max_features': sp_randint(2,7),    \n 'pipeline-1__NN__n_neighbors': sp_randint(1,4)\n}  ","27476358":"best_params = {'extratreesclassifier__n_estimators': 1250, \n               'meta_classifier__Features__estimator__n_estimators': 3981, \n               'meta_classifier__Features__max_features': 42, \n               'meta_classifier__clf__colsample_bytree': 0.4547010139728621, \n               'meta_classifier__clf__learning_rate': 0.01, \n               'meta_classifier__clf__max_depth': 19, \n               'meta_classifier__clf__n_estimators': 8000, \n               'meta_classifier__clf__reg_alpha': 1, \n               'meta_classifier__clf__reg_lambda': 0, \n               'pipeline-1__Features__estimator__n_estimators': 340, \n               'pipeline-1__Features__max_features': 2, \n               'pipeline-1__NN__n_neighbors': 2, \n               'pipeline-2__Features__estimator__n_estimators': 101, \n               'pipeline-2__Features__max_features': 27, \n               'pipeline-2__clf__colsample_bytree': 0.7363377647573023,\n               'pipeline-2__clf__learning_rate': 0.2,\n               'pipeline-2__clf__max_depth': 7,\n               'pipeline-2__clf__n_estimators': 1409,\n               'pipeline-2__clf__reg_alpha': 1, \n               'pipeline-2__clf__reg_lambda': 2,\n               'pipeline-2__clf__subsample': 0.8865179551312595, \n               'randomforestclassifier__min_weight_fraction_leaf': 0.0, \n               'randomforestclassifier__n_estimators': 1627}","3abfc473":"RANDOM_SEED = 42\n\n\nclf1 = Pipeline([ \n                                        ('Features',\n                                         SelectFromModel(RandomForestClassifier(random_state=RANDOM_SEED,\n                                                                                #class_weight=class_weights,\n                                                                                n_estimators=50,n_jobs=4)\n                                    ,max_features=4,\n                                                         threshold=-np.inf))\n                                      ,('Std', StandardScaler())\n                                      ,('metric',NeighborhoodComponentsAnalysis())\n                                     ,('NN',KNeighborsClassifier(n_neighbors=3,n_jobs=4))\n                                         ]#, memory=caches[1]\n)\n\nclf2 = RandomForestClassifier(random_state=47,n_estimators=3000,n_jobs=4,min_weight_fraction_leaf=0.1\n                              #,class_weight=class_weights\n\n )\n\n\nclf3 = ExtraTreesClassifier(random_state=47,n_estimators=1000,n_jobs=4\n                            #,class_weight=class_weights\n\n )\n                         \n \n\n \n\n\n\n  \n  \nclf4 = Pipeline([ ('Features',SelectFromModel(RandomForestClassifier(random_state=RANDOM_SEED,\n                                                                     #class_weight=class_weights,\n                                                                     n_estimators=500,n_jobs=4)\n                                    ,max_features=15,threshold=-np.inf)\n                     ),\n                                     \n                       ('clf', xgb.XGBClassifier(n_jobs=4,n_estimators=2000\n                                  ,learning_rate=0.2\n                                ,max_depth=12\n                                ,random_state=54                  \n                                ,colsample_bynode= 0.67\n                                 ,reg_alpha =  1\n                                 ))\n                    ]\n                   #,memory=caches[4]\n                                   )\n\n\n\n\n  \n\n\n\ngb = Pipeline([ ('Features',SelectFromModel(RandomForestClassifier(random_state=RANDOM_SEED,\n                                                                 #  class_weight=class_weights,\n                                                                   n_estimators=100,n_jobs=4)\n                                   ,max_features=50,threshold=-np.inf)\n                     ),\n                                     \n                       ('clf', \n                        xgb.XGBClassifier(n_jobs=4, colsample_bynode= 0.5465213014678215, \n                     colsample_bytree= 0.021671507502719622, \n                       learning_rate= 0.01, \n                       max_depth= 15, \n                        n_estimators= 4000, \n                        reg_alpha= 2, \n                       reg_lambda= 3,                             \n                       random_state=65               \n                                 )\n                       )\n                    ]\n                  # ,memory=caches[0]\n             )\n\n\nstack_model = StackingCVClassifier(classifiers=[\n                                  clf1\n                                  ,clf2\n                                 ,clf3\n                                  ,clf4\n                    \n                            ]   ,\n                            meta_classifier=gb,\n                            use_probas=True,\n                            use_features_in_secondary=True,      \n                                cv=StratifiedKFold(2),\n                            n_jobs=1,      \n                            random_state=RANDOM_SEED)\n\nstack_model = stack_model.set_params(**best_params)\n\n                        \n","a4ac4d3c":"minimal_columns = X_train.columns[~X_train.columns.str.startswith(\"Soil_Type\")]\n\n#grid = RandomizedSearchCV(estimator=stack_model, \n#                   param_distributions=params, \n#                    cv=StratifiedKFold(2),n_iter=20,scoring='accuracy',\n#                    refit='accuracy')\n\ndef std_output(model,X_train,y_train,X_validate):\n    \n    model.fit(X=X_train,y=y_train\n              #,sample_weight=low_weights.loc[y_train_low].values\n             )\n    \n    return           (model.predict_proba(X=X_validate) , \n                      model.predict(X=X_validate))\n\n\n","162136a2":"\nscores,predictions = std_output(stack_model,X_train[minimal_columns].values,y_train.values,X_validate[minimal_columns].values)\n#misclass(y_validate,predictions,analyse_db(training_db.loc[Ids_validate]).wilderness.values)\n","eb64166f":"for i in range(scores.shape[1]):\n  examine_score(scores[:,i],y_validate)\n  tpr,fpr,thresh = roc_curve(y_validate,scores[:,i])\n  sns.lineplot(x=fpr,y=tpr)\n  print(roc_auc_score(y_validate,scores[:,i]))\nprint(confusion_matrix(y_validate,predictions))","8b8879a5":"test_db = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\",index_col='Id')\nprediction_db = transform_db(test_db)\nsoil_types(prediction_db)\n#prediction_db = leave1out.transform(transform_db(test_db))\nprediction_db.head()","93a5a731":"predictions = stack_model.predict(prediction_db[minimal_columns])","ec8546f7":"ids = prediction_db.index.values","c59bf05f":"output_frame = pd.DataFrame({'Id':ids,'Cover_Type':predictions})","55fc75c4":"weights = output_frame.Cover_Type.value_counts()\/output_frame.shape[0]\nprint(weights)","cf16ed17":"output_frame.head()","6d6e2e1c":"output_frame.to_csv('submission.csv',index=False)","dd99d2a3":"Cover types \"c5\",\"c7\",\"c2\",\"c1\" vs  \"c3\",\"c6\",\"c4\" is easy (Elevation, Distance to Hydrology)\n\nCover type  \"c7\" vs \"c5\",\"c2\",\"c1\" based on Elevation should be easy.(Elevation)\n\nThen need to differentiate \"c3\",\"c6\",\"c4\" and \"c5\",\"c2\",\"c1\"\n","d625d285":"# Score test data","91e429bb":"# Fit model ","e1d331aa":"# Soil Type","d48b5fcc":"So \"w1\" and w3 have no Low group\nW8 has no high \nw4 (Wilderness_Area2) has mixed ","6b36436d":"# Setup Stacking and Gridsearch","e1141560":"# Evaluate Results","6519cb0f":"Is there a misclassification of something else as Cover type 2 ","76dab147":"# Split into training and validation"}}