{"cell_type":{"92eb9c5d":"code","fcc00d46":"code","54dae0d1":"code","215fb28e":"code","a81a8d0a":"code","d189c37b":"code","63926f0b":"code","5a8f28b9":"code","6186d956":"code","34aa69fc":"code","68b90ec4":"code","029c133b":"code","862b67ea":"code","12314428":"code","443472db":"code","d2f43956":"code","df5a2776":"code","15a343aa":"code","3991c047":"code","31d10494":"code","afd8b124":"code","a1cb5a3f":"code","fc8704b5":"code","743c5681":"code","ca48349b":"code","9dc7d919":"code","e1027179":"code","dffee7d8":"code","c592c804":"code","782cab98":"code","de05d98a":"code","532b3a4c":"code","4997782d":"code","8eef3ed4":"code","882032ba":"code","b683625c":"markdown","fbb392d5":"markdown","6e70a64a":"markdown","4d1d9494":"markdown","9d4b7439":"markdown","1e7b311c":"markdown","8bd477fb":"markdown","a3b6b50d":"markdown","d4b42dcf":"markdown","72407db2":"markdown","8ccf03c7":"markdown","92763ed3":"markdown","af4c5363":"markdown","2cb50fb6":"markdown","0b80f578":"markdown","3068a518":"markdown","bdf9bd10":"markdown","9e556f45":"markdown","2cb46584":"markdown","76143472":"markdown"},"source":{"92eb9c5d":"# Antes de qualquer coisa, vamos importar a biblioteca Pandas\nimport pandas as pd","fcc00d46":"pd.","54dae0d1":"# Vamos criar um DataFrame do resultado de uma vota\u00e7\u00e3o.\npd.DataFrame({'Sim':[10,15,2], 'Nao':[21, 4, 0], 'Talvez':[33, 12, 1], 'jamais':[40,34,77]})","215fb28e":"# Uma Serie tem apenas uma lista. Vamos criar uma Serie:\npd.Series([10,15,'sd',(1,'df')])\n#pd.Series(['Nitai','123','Casa'])","a81a8d0a":"# 1.1 Crie um DataFrame que tenha 3 colunas e 2 duas linhas com o nome: vendas\nProdutos = pd.DataFrame({'Produto':['Chocolate', 'Banana'], 'Quantidade':[200, 80], 'Pre\u00e7o':[3.00, 0.50]})\nProdutos","d189c37b":"# 1.2 Crie uma Serie que contenha o total dos produtos. Com os seguintes valores: 600, 40\nTotalProdutos = pd.Series([600, 40], index=[33,'qw'])\nTotalProdutos","63926f0b":"# 2. Salve o dataframe vendas criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas`\nProdutos.to_csv('produtos-31-10-2019.csv')","5a8f28b9":"# Lista os arquivos no diret\u00f3rio\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6186d956":"# Omite os warnings.. por enquanto\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Importa o pandas\nimport pandas as pd\n\n# Vamos abrir o arquivo em Excel (.xlsx) de uasgs\nuasgs = pd.ExcelFile('..\/input\/uasgs.xlsx')\n\n# Transforma de Excel para DataFrame. O Par\u00e2metro aqui \u00e9 o nome da aba (Sheet 1)\nuasgs = uasgs.parse('itensUASGago2019') \n\n# Visualiza as primeiras linhas do dataset \nuasgs.tail(3)","34aa69fc":"# DICA ESPECIAL: Mostrar mais colunas, op\u00e7\u00e3o do Pandas para n\u00e3o aparecer o \"...\" \npd.set_option('display.max_columns', 25)\nuasgs.head(3)","68b90ec4":"# Importa o arquivo CSV de licita\u00e7\u00e3o com o nome de licit\nlicit = pd.read_csv('..\/input\/licitacao.csv')\n\n# Visualiza as primeiras linhas do dataset \nlicit.head()","029c133b":"# 3. Fa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de modalidade e visualize suas primeiras linhas.\nimport pandas as pd\nmodalid = pd.read_csv('..\/input\/modalidade.csv')\n\n#pd.read_csv?\n\nmodalid.head()","862b67ea":"# 4.1 Renomeie a coluna codmodalidade do dataset modalidade para codigomodalidade\nmodalid = modalid.rename(columns={'codmodalidade':'codigomodalidade'})\n","12314428":"# 4.2 Fa\u00e7a a combina\u00e7\u00e3o para juntar os datasets de licita\u00e7\u00f5es e modalidades e salve num novo dataset chamado licitm\nlicitm = pd.merge(licit, modalid, on='modalidade')\nlicitm.head()","443472db":"licit.head()","d2f43956":"# EXEMPLOS\n\n# Retorna apenas a coluna dataPublicacao \nlicit['dataPublicacao']\n\n# Retorna apenas a segunda data\nlicit.dataPublicacao[1]\nlicit.dataPublicacao.iloc[1]\n\n# Retorna as primeiras 5 linhas\nlicit[:5]\n\n# Retorna apenas a ultima coluna\nlicit.iloc[:,-1]\n\n# Cria um dataset de exemplo apenas com as linhas 3 e 5 das colunas dataPublicacao e situacao\nexemplo = licit.loc[[3,5],['dataPublicacao','situacao']]\nexemplo\n\n# Retorna um dataset contendo apenas publicacoes do ano de 2019. Dataset com o nome de: a2019\na2019 = licit[licit['dataPublicacao'].str.contains('2019')]\na2019.head()","df5a2776":"# 5.1. Crie um dataset apenas com as colunas dataPublicacao e situacao de todos do ano de 2018: a2018\na2018 = licit.loc[licit['dataPublicacao'].str.contains('2018'),['dataPublicacao','situacao']]\na2018.head()","15a343aa":"# Importa datetime\nimport datetime\n\n# Imprime a data e hora\nprint(datetime.datetime.now())\n\n# Imprime apenas a data\nprint(datetime.date.today())\n\n# Imprime apenas o ano\nprint(datetime.date.today().year)\n\n# Imprime apenas o m\u00eas\nprint(datetime.date.today().month)\n\n# Imprime apenas o dia\nprint(datetime.date.today().day)\n\n# Imprime apenas a hora\nprint(datetime.datetime.today().timetz)","3991c047":"# Outro exemplo para imprimir o ano\nagora = datetime.datetime.now()\nagora.strftime('%d-%m-%Y %Hh%M:%S')","31d10494":"# Convertendo o formato da data de 2019-08-26 para 26\/08\/2019\ndatetime.datetime.strptime(\"2019-08-26\", '%Y-%m-%d').strftime('%d\/%m\/%Y')","afd8b124":"# Cria uma nova coluna com a data formatada de 26\/08\/2019 para 26-08-2019\nlicit['dataFormatada'] = [datetime.datetime.strptime(x, '%d\/%m\/%Y').strftime('%d-%m-%Y') for x in licit['dataPublicacao']]","a1cb5a3f":"# 1. Crie uma nova coluna no dataset de licit para o ano de publicacao: ano\nlicit['ano'] = [datetime.datetime.strptime(x, '%d\/%m\/%Y').strftime('%Y') for x in licit['dataPublicacao']]\nlicit.head(2)","fc8704b5":"# 1. Fa\u00e7a um agrupamento para descobrir a quantidade de licitacoes publicadas por ano\n# 2. Crie um DataFrame com o resultado da quantidade de licitacoes por ano\nlicitPorAno = pd.DataFrame(licit.groupby(['ano']).objeto.count())\n\na = licit.groupby(['ano']).objeto.count()\na.info()\n\n# 3. Ordene os valores e responda: Qual foi o ano que teve o menor n\u00famero de licitacoes publicadas?\nlicitPorAno.sort_values(by='objeto', ascending=False)","743c5681":"# Verifica se tem algum valor NaN no Dataset inteiro\nlicit.isnull().sum()\n\n# Verifica a quantidade de valores NaN apenas em uma coluna\nlicit['dataPublicacao'].isnull().sum()","ca48349b":"# 1. Importa o arquivo CSV de itens licita\u00e7\u00e3o com o nome de item\nitem = pd.read_csv('..\/input\/itemLicitacao.csv')\n\n# 2. Verifica se tem algum valor NaN\nitem.isnull().sum()\n\n# 3 Apague os registros NaN de licit. Quantas linhas restou no dataset?\nlicit.dropna(inplace=True)\n\nlicit.shape","9dc7d919":"# 1.1 RESPOSTA\n# 1.1 Crie um DataFrame que tenha 3 colunas e 2 duas linhas com o nome: vendas\n# Colunas:             Produto | Quantidade | Pre\u00e7o\n# Na primeira linha: Chocolate |    200     | 3,00 \n# Na segunda linha:     Banana |     80     | 0,50\nvendas = pd.DataFrame({'Produto':['Chocolate', 'Banana'], 'Quantidade':[200, 80], 'Pre\u00e7o':[3.00, 0.50]})\nvendas.head()","e1027179":"# 1.2 RESPOSTA\n# Crie uma Serie que contenha o total dos produtos. Com os seguintes valores: 600, 40\npd.Series([600, 40])","dffee7d8":"# RESPOSTA 2. Salve o dataframe vendas criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas`. \nvendas.to_csv('vendas.csv')","c592c804":"# 3. Fa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de modalidade e visualize suas primeiras linhas.\nimport pandas as pd\nmodali = pd.read_csv('..\/input\/modalidade.csv')\nmodali.head()","782cab98":"# 4.1 Renomeie a coluna codmodalidade do dataset modalidade para codigomodalidade\nmodalidade = modalidade.rename(columns={'codmodalidade':'codigomodalidade'})\nmodalidade.head()","de05d98a":"# 4.2 Fa\u00e7a a combina\u00e7\u00e3o para juntar os datasets de licita\u00e7\u00f5es e modalidades e salve num novo dataset chamado licitm\nlicitm = pd.merge(licit, modali, on='modalidade')\nlicitm.head()\n\n# Pode ser feito Usando o join tamb\u00e9m\nlicitm2 = licit.set_index('modalidade').join(modalidade.set_index('modalidade'))\nlicitm2.head()","532b3a4c":"# 5.1. Crie um dataset apenas com as colunas dataPublicacao e situacao de todos do ano de 2018: a2018\na2018 = licitm.loc[licitm['dataPublicacao'].str.contains('2018'),['dataPublicacao','situacao']]","4997782d":"# 6.1. Crie uma nova coluna no dataset de licit para o ano de publicacao: ano\nlicit['ano'] = [datetime.datetime.strptime(x, '%d\/%m\/%Y').strftime('%Y') for x in licit['dataPublicacao']]\nlicit.head()","8eef3ed4":"# 7.1 Fa\u00e7a um agrupamento para descobrir a quantidade de licitacoes publicadas por ano\nlicit.groupby('ano').numLicitacao.count()   # Cria uma Serie\nlicit.groupby('ano')[['numLicitacao']].count()  # Cria um DataFrame\n\n# 7.2 Crie um DataFrame com o resultado da quantidade de licitacoes por ano\nlicitporano = licit.groupby('ano')[['numLicitacao']].count()\n\n# 7.3 Ordene os valores e responda: Qual foi o ano que teve o menor n\u00famero de licitacoes publicadas?\nlicitporano.sort_values(by='numLicitacao', ascending=False)","882032ba":"# 8.1. Importa o arquivo CSV de itens licita\u00e7\u00e3o com o nome de item\nitem = pd.read_csv('..\/input\/itemLicitacao.csv')\nitem.head()\n\n# 8.2. Verifica se tem algum valor NaN\nitem.isnull().sum()\n\n# 8.2. ou\nlen(item[item.codigoOrgao.isnull()])\n\n# 8.3 Apague os registros NaN de licit. Quantas linhas restou no dataset?\nlicit.dropna(inplace=True)\nlicit.shape","b683625c":"# 4. Como renomear e combinar datasets\nFrequentemente precisamos renomear os dataset e tamb\u00e9m combinar dados de diferentes datasets. A fun\u00e7\u00e3o para renomear \u00e9 a `rename`, com a sintaxe `df.rename(columns={ 'nome_antigo':'novo_nome'})` para renomear nomes de colunas pelo nome. Ou ent\u00e3o `df.rename(index={0: 'primeiraColuna', 1: 'segundaColuna'})` para renomear nomes de colunas pela sua localiza\u00e7\u00e3o. \n\nA combina\u00e7\u00e3o ou integra\u00e7\u00e3o de datasets pode ser realizada com o `join`. A sintaxe \u00e9 a seguinte: `df.set_index('colunaChave').join(df2.set_index('colunaChave'))`\n\nOutra op\u00e7\u00e3o \u00e9 realizar a jun\u00e7\u00e3o atrav\u00e9s do `merge`. A sintaxe \u00e9 a seguinte:\n`pd.merge(dataset1, dataset2, on='nomeColunaChave')`\n\nA diferen\u00e7a entre JOIN e MERGE \u00e9 que:\n* JOIN transforma a coluna chave em \u00edndice e junta apenas dados n\u00e3o vazios\n* MERGE mant\u00e9m a coluna chave como coluna e junta todos os dados, inclusive os vazios\n\n### 4. Exerc\u00edcio\n1. Renomeie a coluna codmodalidade do dataset modalidade para codigomodalidade\n1. Fa\u00e7a a combina\u00e7\u00e3o para juntar os datasets de licita\u00e7\u00f5es e modalidades e salve num novo dataset chamado licitm","fbb392d5":"# 1. Como criar um dataset\nA estrutura de dados no Pandas pode ser de dois tipos: DataFrame ou Serie. Um **DataFrame** \u00e9 uma estrutura de duas dimens\u00f5es, uma tabela (com colunas e linhas), enquanto que uma **Serie** tem apenas uma dimens\u00e3o (apenas uma coluna de uma tabela, s\u00f3 que a coluna n\u00e3o tem um nome). ","6e70a64a":"1.2 Crie uma Serie que contenha o total dos produtos. Com os seguintes valores\n600, 40","4d1d9494":"# 8. Como lidar com valores faltantes (missing values)\nMissing Data ou Missing Values s\u00e3o **valores ausentes** mostrados como `NaN` que significa \"Not a Number\" e s\u00e3o do tipo float. Ter missing values no dataset \u00e9 um problema porque eles podem influenciar nas conclus\u00f5es sobre os dados. Isto porque os missing values s\u00e3o omitidos nas estat\u00edsticas e s\u00e3o ignorados nas opera\u00e7\u00f5es de count, sum, etc. Al\u00e9m disso, os valores ausentes reduzem o poder estat\u00edstico, podem enviesar a estimativa dos par\u00e2metros, reduzir a representatividade das amostras, distorcer os resultados das an\u00e1lises e gerar conclus\u00f5es inv\u00e1lidas. \n\nA melhor forma de evitar os missing values \u00e9 selecionar os registros mais completos no dataset de origem. Por\u00e9m, nem sempre isso \u00e9 poss\u00edvel porque simplesmente as vezes a informa\u00e7\u00e3o n\u00e3o est\u00e1 dispon\u00edvel. Nestes casos, as principais t\u00e9cnicas para lidar com missing data s\u00e3o:\n1. **Inser\u00e7\u00e3o:** preencher com os valores faltantes, inserir a m\u00e9dia ou mediana ou moda dos valores (para num\u00e9ricos), usar um modelo preditivo para estimar os valores faltantes ou simplesmente informar que \u00e9 um valor `Desconhecido` (para dados categ\u00f3ricos e textuais).\n2. **Exclus\u00e3o Parcial:** excluir os registros que est\u00e3o com valores faltantes.\n\nA sintaxe Python usada:\n* Para selecionar NaN: `df.isnull()`\n* Para substituir valores NaN: `df.fillna()`\n* Para substituir NaN pela m\u00e9dia: `df.fillna(df.mean(), inplace=True)`\n* Para substituir valores presentes por outros valores: `pd.replace(\"valor\",\"novo_valor\")`\n* Para remover os registros NaN: `df.dropna(inplace=True)`","9d4b7439":"### 5. Exerc\u00edcios\n1. Crie um dataset apenas com as colunas dataPublicacao e situacao de todos do ano de 2018: a2018","1e7b311c":"# 6. Como manipular datas\nO Python possui a biblioteca `datetime` que permite manipular o formato de datas e horas. Dentro do datetime, temos v\u00e1rios m\u00e9todos, como date, time, datetime, timezone. Veja alguns exemplos de uso.","8bd477fb":"### 3. Exerc\u00edcio\nFa\u00e7a a importa\u00e7\u00e3o do arquivo CSV de modalidade num novo DataFrame chamado `modalid` e visualize suas primeiras linhas.","a3b6b50d":"### 8. Exerc\u00edcios\n1. Importe o dataset de itens de licitacoes com o nome de item: item\n2. Qual a quantidade de registros NaN ?\n3. Apague os registros NaN de licit. Quantas linhas restou no dataset de licit? ","d4b42dcf":"# 7. Como agrupar e ordenar\nO agrupamento e a ordena\u00e7\u00e3o s\u00e3o muito usado para a explora\u00e7\u00e3o de dados e para v\u00e1rios outros prop\u00f3sitos. No Pandas, o agrupamento \u00e9 feito com o `groupby` e a ordena\u00e7\u00e3o com o `sort_values`. A sintaxe \u00e9 a seguinte: \n* `df.groupby([\"coluna\"]).coluna.funcao()` : para executar uma fun\u00e7\u00e3o em uma coluna\n* `df.groupby([\"coluna1\", \"coluna2\"]).coluna.funcao()` : para executar uma fun\u00e7\u00e3o em multiplas colunas\n* `df.groupby([\"coluna\"]).coluna.agg[[funcao1, funcao2])` : para executar multiplas fun\u00e7\u00f5es em uma coluna\n* `df.sort_values(by=\"coluna\", ascending=False)`: para ordenar uma coluna do maior valor para o menor\n* `df.sort_values(by=[\"coluna1\",\"coluna2\"])`: para ordenar por mais de uma coluna\n\n### 7. Exerc\u00edcios\n1. Fa\u00e7a um agrupamento para descobrir a quantidade de licitacoes por ano\n2. Crie um DataFrame com o resultado da quantidade de licitacoes por ano\n3. Ordene os valores do DataFrame criado e responda: Qual foi o ano que teve o maior n\u00famero de licitacoes publicadas?","72407db2":"### 6. Exerc\u00edcios\n1. Crie uma nova coluna no dataset de licit para o ano de publicacao: ano","8ccf03c7":"### 3.2 Como Abrir arquivos CSV\nO CSV \u00e9 um arquivo separado por v\u00edrgula. A fun\u00e7\u00e3o `read_csv` do Pandas permite ler um arquivo CSV e salvar em um DataFrame. Isto \u00e9 feito da seguinte forma: `dataframe = pd.read_csv('caminho\\arquivo.csv')`","92763ed3":"***\n# 9. Exerc\u00edcios Complementares (opcional)\n1. [Exerc\u00edcios Complementares de Cria\u00e7\u00e3o e Leitura de Datasets](https:\/\/www.kaggle.com\/kernels\/fork\/587970)\n2. [Exerc\u00edcios Complementares de Renomear e Combinar Datasets](https:\/\/www.kaggle.com\/kernels\/fork\/638064)\n3. [Exerc\u00edcios Complementares de Agrupamento e Ordena\u00e7\u00e3o de Dados](https:\/\/www.kaggle.com\/kernels\/fork\/598715)\n4. [Exerc\u00edcios Complementares para lidar com Missing Data](https:\/\/www.kaggle.com\/kernels\/fork\/598826)\n***\n\n### Pr\u00f3xima Aula\n[3. An\u00e1lise Explorat\u00f3ria e Visualiza\u00e7\u00e3o de Dados](https:\/\/www.kaggle.com\/deborareis\/3-analise-exploratoria-e-visualizacao-de-dados\/)","af4c5363":"# 3. Como abrir dados j\u00e1 existentes\nSaber como criar um dataset \u00e9 muito importante, mas na maioria das vezes usamos um dataset que j\u00e1 est\u00e1 pronto. Vamos abrir dados em Excel e em CSV.\n\nEssa fun\u00e7\u00e3o abaixo, criada no in\u00edcio de cada novo Notebook Kaggle, lista os arquivos existentes.","2cb50fb6":"# 2. Como salvar um DataFrame como arquivo CSV\nPara salvar como CSV um dataframe, basta usar a sintaxe `nomedodataframe.to_csv('nomearquivo.csv')`\n\n### 2. Exerc\u00edcio\nSalve o dataframe criado no exerc\u00edcio 1.1 num arquivo csv chamado `vendas.csv`. D\u00ea o commit e abra o resultado. Descubra... onde o arquivo CSV foi salvo? Voc\u00ea consegue fazer o download deste arquivo?","0b80f578":"***\n## RESPOSTAS DOS EXERC\u00cdCIOS","3068a518":"### 1. Exerc\u00edcio\n1.1 Crie um DataFrame que tenha 3 colunas: Produto | Quantidade | Pre\u00e7o. Como valores, tenha duas linhas com os seguintes valores na primeira linha: Chocolate | 200 | 3,00. Na segunda linha os valores: Banana | 80 | 0,50","bdf9bd10":"### 3.1 Como Abrir arquivos Excel\nPara abrir dados em Excel usamos `pd.ExcelFile()`","9e556f45":"# 5. Como selecionar subconjuntos de um dataset\n* .loc: retorna pelo nome (textual)\n* .iloc: retorna pela posi\u00e7\u00e3o (num\u00e9rico)\n* [ ]: retorna um elemento ou o range de elementos. Sendo: [linhas\/indices, colunas]","2cb46584":"**[Voltar para a P\u00e1gina Inicial do Curso](https:\/\/www.kaggle.com\/c\/ml-python-me)**\n\n# **Pr\u00e9-Processamento de Dados**\n![](https:\/\/www.kdnuggets.com\/images\/cartoon-machine-learning-class.jpg)\n\nNesta aula vamos aprender a manipular e formatar os dados com Python usando o Pandas. **Pandas** \u00e9 uma biblioteca para a an\u00e1lise de dados e manipula\u00e7\u00e3o da estrutura dos dados, usado para limpar, formatar e padronizar os dados.\n\n#### Conte\u00fado:\n1. Como criar um dataset\n2. Como salvar um DataFrame como arquivo CSV\n3. Como abrir dados CSV j\u00e1 existentes\n4. Como renomear e combinar datasets\n5. Como selecionar subconjuntos de um dataset\n6. Como manipular datas\n7. Como agrupar e ordenar os dados\n8. Como lidar com valores faltantes (missing values)\n9. Exerc\u00edcios Complementares (opcional)\n\n#### Refer\u00eancias adicionais:\n* [Resuminho do Pandas (Cheat Sheet)](https:\/\/assets.datacamp.com\/blog_assets\/PandasPythonForDataScience.pdf)\n* [Documenta\u00e7\u00e3o do Pandas](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/index.html)\n* [NumPy CheatSheet](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Numpy_Python_Cheat_Sheet.pdf)","76143472":"Lembrando que para converter o formato de data e hora. Usa-se a seguinte nomenclatura:\n* `%Y`:ano [2019 - 4 d\u00edgitos]\n* `%m`:m\u00eas [08 - 2 d\u00edgitos]\n* `%d`:dia [24 - 2 d\u00edgitos]\n* `%H`:hora [18 - 2 d\u00edgitos]\n* `%M`:minuto [59 - 2 d\u00edgitos]\n* `%S`:segundo [00 - 2 d\u00edgitos]"}}