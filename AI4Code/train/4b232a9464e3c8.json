{"cell_type":{"e8008e84":"code","c5c93e05":"code","a7b4542f":"code","31448346":"code","ddd2fc5c":"code","b0912f16":"code","69715d45":"code","fc4c0ad3":"code","d25f0b9f":"code","2b6981f7":"code","0429889a":"code","f7dfd16f":"code","9acf245d":"code","ead3885e":"code","a78075d0":"code","20d748b5":"code","9cdc5dad":"code","4eed3ec5":"code","275ccfbd":"code","c2ab915f":"code","5e2368aa":"code","7a028e8e":"code","ef3b4b76":"code","7c4cda06":"code","17b7d8ba":"code","f35177f5":"code","672da76f":"code","24fc3e22":"code","7d91c90a":"code","a027ab61":"code","c22664bc":"code","a96d66b2":"code","69ed5b91":"code","caeb606a":"code","51e29218":"code","5ed48a61":"code","59f2a58a":"code","0f3eb1ab":"code","2e9dd681":"code","486fc806":"code","ea00a046":"code","d05284da":"code","fb5d207a":"code","d9abd653":"code","4f7d5790":"code","83d32ded":"code","dd94da7a":"code","737e50a1":"code","e746f50d":"code","ad95c5a7":"code","70da7ea6":"code","59a66f9d":"markdown","b06dfabe":"markdown","2dfda17e":"markdown","cf53a99e":"markdown","145d42ef":"markdown","64ea7051":"markdown","ac3771c5":"markdown","d3e3f38d":"markdown","ffb1f8c5":"markdown","a89a7e97":"markdown","98908617":"markdown","bd691126":"markdown","73c63023":"markdown","1add45cf":"markdown","e81c5afb":"markdown","3ae687c0":"markdown","29b9c98a":"markdown","f7888f41":"markdown","f1ef9104":"markdown","4ea72cad":"markdown","50fb4087":"markdown","27682ace":"markdown","01c27979":"markdown","d755fd57":"markdown","c3a9e1c8":"markdown","5f060413":"markdown","ca6710cf":"markdown","20a97ddf":"markdown","9e753670":"markdown","4b1b1afb":"markdown","fa46689a":"markdown","04fd90ee":"markdown","a6eb3c9b":"markdown","2f3ab4e5":"markdown","662f4bba":"markdown","a3b848ad":"markdown","cd6ed3eb":"markdown"},"source":{"e8008e84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nimport matplotlib as p\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.graph_objs as gobj\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\n\nimport plotly.express as px       \nimport plotly.offline as py       \nimport plotly.graph_objects as go \nfrom plotly.subplots import make_subplots","c5c93e05":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","a7b4542f":"tests_by_country = import_data('\/kaggle\/input\/uncover\/UNCOVER\/our_world_in_data\/total-covid-19-tests-performed-by-country.csv')\ntests_per_million = import_data('\/kaggle\/input\/uncover\/UNCOVER\/our_world_in_data\/total-covid-19-tests-performed-per-million-people.csv')\ntests_vs_confirmed = import_data('\/kaggle\/input\/uncover\/UNCOVER\/our_world_in_data\/tests-conducted-vs-total-confirmed-cases-of-covid-19.csv')\ntestspermillion_vs_confirmed = import_data('\/kaggle\/input\/uncover\/UNCOVER\/our_world_in_data\/per-million-people-tests-conducted-vs-total-confirmed-cases-of-covid-19.csv')\nhospitalization = import_data('..\/input\/uncover\/UNCOVER\/ihme\/2020_03_30\/Hospitalization_all_locs.csv')","31448346":"display(tests_by_country.head(), tests_per_million.head())","ddd2fc5c":"tests_merged = pd.merge(tests_by_country, tests_per_million, on='entity')\ntests_merged = tests_merged.drop(['code_y', 'date_y'], axis = 1)\ntests_merged = tests_merged.rename(columns = {'code_x': 'code','date_x':'date'}) \ntests_merged.head()","b0912f16":"sorted_by_tests = tests_merged.sort_values('total_covid_19_tests')\nplt.figure(figsize=(30,25))\nplt.barh('entity','total_covid_19_tests', data=sorted_by_tests)\nplt.xlabel(\"total_covid_19_tests\", size=15)\nplt.ylabel(\"Salary in US Dollars\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"total_covid_19_tests vs entity\", size=18)","69715d45":"data = dict(type = 'choropleth',\n            locations = tests_merged['entity'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= tests_merged['entity'],\n            z=tests_merged['total_covid_19_tests'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Tests Performed','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","fc4c0ad3":"tests_aus = tests_merged[tests_merged['entity'].str.contains('Australia')]\ntests_aus","d25f0b9f":"sorted_by_date = tests_merged.sort_values('date')\nplt.figure(figsize=(25,10))\nplt.barh('date','total_covid_19_tests', data=sorted_by_date)\nplt.xlabel(\"total_covid_19_tests\", size=15)\nplt.ylabel(\"date\", size=15)\nplt.tick_params(axis='x',  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"total_covid_19_tests vs date\", size=18)","2b6981f7":"date_list = ['2020-03-05', '2020-03-07', '2020-03-10', '2020-03-13', '2020-03-17', '2020-03-18']\ntests_performed_lesser_freq = tests_merged[tests_merged['date'].isin(date_list)].sort_values('total_covid_19_tests', ascending = False)\ntests_performed_lesser_freq.head(10)","0429889a":"sorted_by_testspermillion = tests_merged.sort_values('total_covid_19_tests_per_million_people')\nplt.figure(figsize=(30,25))\nplt.barh('entity','total_covid_19_tests_per_million_people', data=sorted_by_testspermillion)\nplt.xlabel(\"total_covid_19_tests\", size=15)\nplt.ylabel(\"entity\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"total_covid_19_tests_per_million_people vs entity\", size=18)","f7dfd16f":"data = dict(type = 'choropleth',\n            locations = tests_merged['entity'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= tests_merged['entity'],\n            z=tests_merged['total_covid_19_tests_per_million_people'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Tests Performed per Million','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","9acf245d":"sorted_by_datepm = tests_merged.sort_values('date')\nplt.figure(figsize=(25,10))\nplt.barh('date','total_covid_19_tests_per_million_people', data=sorted_by_datepm)\nplt.xlabel(\"total_covid_19_tests_per_million_people\", size=15)\nplt.ylabel(\"date\", size=15)\nplt.tick_params(axis='x',  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"total_covid_19_tests_per_million_people vs date\", size=18)","ead3885e":"date_list = ['2020-03-10']\ntests_performed_pm_lesser_freq = tests_merged[tests_merged['date'].isin(date_list)].sort_values('total_covid_19_tests_per_million_people', ascending = False)\ntests_performed_pm_lesser_freq.head(10)","a78075d0":"display(tests_vs_confirmed.head(), testspermillion_vs_confirmed.head())","20d748b5":"grouped_by_entity = tests_vs_confirmed.groupby('entity').sum()['total_confirmed_cases_of_covid_19_cases'].sort_values(ascending=False).to_frame(name = 'Sum').reset_index()\ngrouped_by_entity","9cdc5dad":"#### Removing the entry for 'World' and all the 0 confirmed entries \ngrouped_by_entity = grouped_by_entity[(grouped_by_entity['entity'] != 'World')]\ngrouped_by_entity = grouped_by_entity[(grouped_by_entity['Sum'] != 0)]\ngrouped_by_entity","4eed3ec5":"grouped_by_entity = grouped_by_entity.sort_values('Sum')\nplt.figure(figsize=(40,50))\nplt.barh('entity','Sum', data=grouped_by_entity)\nplt.xlabel(\"total_confirmed_cases_of_covid_19_cases\", size=15)\nplt.ylabel(\"entity\", size=15)\nplt.tick_params(axis='x',  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"total_confirmed_cases_of_covid_19_cases vs entity\", size=25)","275ccfbd":"data = dict(type = 'choropleth',\n            locations = grouped_by_entity['entity'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= grouped_by_entity['entity'],\n            z=grouped_by_entity['Sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Confirmed Cases by Entity','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","c2ab915f":"# Not as pretty and effective as the original kernal I took help from. Tweaked a little bit.\n\n#Creating the interactive map\npy.init_notebook_mode(connected=True)\n\n#GroupingBy the dataset for the map\nformated_gdf = tests_vs_confirmed.groupby(['date', 'entity']).sum()['total_confirmed_cases_of_covid_19_cases'].to_frame(name = 'sum').reset_index()\nformated_gdf['sum'] = formated_gdf['sum'].fillna(0)\nformated_gdf['date'] = pd.to_datetime(formated_gdf['date'])\nformated_gdf['date'] = formated_gdf['date'].dt.strftime('%m\/%d\/%Y')\n\nformated_gdf['log_ConfirmedCases'] = np.log(formated_gdf['sum'] + 2)\n\n#Plotting the figure\nfig = px.choropleth(formated_gdf, locations=\"entity\", locationmode='country names', \n                     color=\"log_ConfirmedCases\", hover_name=\"entity\",projection=\"mercator\",\n                     animation_frame=\"date\",width=1000, height=800,\n                     color_continuous_scale=px.colors.sequential.Viridis,\n                     title='Confirmed Cases vs Entity')\n\n#Showing the figure\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","5e2368aa":"high_confirmed_list = ['China', 'Italy', 'Iran', 'United States', 'Spain', 'Germany', 'South Korea', 'France', 'Switzerland', 'United Kingdom']\nhigh_confirmed_cases = tests_vs_confirmed[tests_vs_confirmed['entity'].isin(high_confirmed_list)]","7a028e8e":"#Creating the interactive map\npy.init_notebook_mode(connected=True)\n\n#GroupingBy the dataset for the map\ngdf = high_confirmed_cases.groupby(['date', 'entity']).sum()['total_confirmed_cases_of_covid_19_cases'].to_frame(name = 'sum').reset_index()\ngdf['sum'] = gdf['sum'].fillna(0)\ngdf['date'] = pd.to_datetime(gdf['date'])\ngdf['date'] = gdf['date'].dt.strftime('%m\/%d\/%Y')\n\ngdf['log_ConfirmedCases'] = np.log(gdf['sum'] + 2)\n\n#Plotting the figure\nfig = px.choropleth(gdf, locations=\"entity\", locationmode='country names', \n                     color=\"log_ConfirmedCases\", hover_name=\"entity\",projection=\"mercator\",\n                     animation_frame=\"date\",width=1000, height=800,\n                     color_continuous_scale=px.colors.sequential.Viridis,\n                     title='High Confirmed Cases vs Entity')\n\n#Showing the figure\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","ef3b4b76":"high_confirmed_cases_china = high_confirmed_cases[high_confirmed_cases['entity'] == 'China'].sort_values('date')\nhigh_confirmed_cases_france = high_confirmed_cases[high_confirmed_cases['entity'] == 'France'].sort_values('date')\nhigh_confirmed_cases_germany = high_confirmed_cases[high_confirmed_cases['entity'] == 'Germany'].sort_values('date')\nhigh_confirmed_cases_iran = high_confirmed_cases[high_confirmed_cases['entity'] == 'Iran'].sort_values('date')\nhigh_confirmed_cases_italy = high_confirmed_cases[high_confirmed_cases['entity'] == 'Italy'].sort_values('date')\nhigh_confirmed_cases_skorea = high_confirmed_cases[high_confirmed_cases['entity'] == 'South Korea'].sort_values('date')\nhigh_confirmed_cases_spain = high_confirmed_cases[high_confirmed_cases['entity'] == 'Spain'].sort_values('date')\nhigh_confirmed_cases_switzerland = high_confirmed_cases[high_confirmed_cases['entity'] == 'Switzerland'].sort_values('date')\nhigh_confirmed_cases_uk = high_confirmed_cases[high_confirmed_cases['entity'] == 'United Kingdom'].sort_values('date')\nhigh_confirmed_cases_usa = high_confirmed_cases[high_confirmed_cases['entity'] == 'United States'].sort_values('date')","7c4cda06":"plt.figure(figsize=(30,10))\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_china, c='blue')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_france, c='red')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_germany, c='green')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_iran, c='orange')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_italy, c='yellow')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_skorea, c='teal')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_spain, c='pink')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_switzerland, c='purple')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_uk, c='gray')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=high_confirmed_cases_usa, c='black')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('China','France', 'Germany', 'Iran', 'Italy', 'South Korea', 'Spain', 'Switzerland', 'UK', 'USA'))\nplt.show()","17b7d8ba":"top10_fromlesser_list = ['Netherlands', 'Austria', 'Belgium', 'Norway', 'Sweden', 'Japan', 'Denmark', 'Canada', 'Australia', 'Portugal']\ntop10_fromlesser_cases = tests_vs_confirmed[tests_vs_confirmed['entity'].isin(top10_fromlesser_list)]","f35177f5":"top10_fromlesser_cases_ned = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Netherlands'].sort_values('date')\ntop10_fromlesser_cases_austria = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Austria'].sort_values('date')\ntop10_fromlesser_cases_belgium = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Belgium'].sort_values('date')\ntop10_fromlesser_cases_norway = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Norway'].sort_values('date')\ntop10_fromlesser_cases_sweden = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Sweden'].sort_values('date')\ntop10_fromlesser_cases_japan = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Japan'].sort_values('date')\ntop10_fromlesser_cases_denmark = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Denmark'].sort_values('date')\ntop10_fromlesser_cases_can = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Canada'].sort_values('date')\ntop10_fromlesser_cases_aus = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Australia'].sort_values('date')\ntop10_fromlesser_cases_portugal = top10_fromlesser_cases[top10_fromlesser_cases['entity'] == 'Portugal'].sort_values('date')","672da76f":"plt.figure(figsize=(30,10))\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_ned, c='blue')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_austria, c='red')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_belgium, c='green')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_norway, c='orange')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_sweden, c='yellow')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_japan, c='teal')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_denmark, c='pink')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_can, c='purple')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_aus, c='gray')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=top10_fromlesser_cases_portugal, c='black')\n\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Netherlands', 'Austria', 'Belgium', 'Norway', 'Sweden', 'Japan', 'Denmark', 'Canada', 'Australia', 'Portugal'))\nplt.show()","24fc3e22":"next10_fromlesser_list = ['Malaysia', 'Brazil', 'International', 'Israel', 'Czech Republic', 'Turkey', 'Ireland', 'Singapore', 'Greece', 'Thailand']\nnext10_fromlesser_cases = tests_vs_confirmed[tests_vs_confirmed['entity'].isin(next10_fromlesser_list)]","7d91c90a":"next10_fromlesser_cases_malay = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Malaysia'].sort_values('date')\nnext10_fromlesser_cases_brazil = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Brazil'].sort_values('date')\nnext10_fromlesser_cases_inter = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'International'].sort_values('date')\nnext10_fromlesser_cases_israel = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Israel'].sort_values('date')\nnext10_fromlesser_cases_czech = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Czech Republic'].sort_values('date')\nnext10_fromlesser_cases_turkey = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Turkey'].sort_values('date')\nnext10_fromlesser_cases_ireland = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Ireland'].sort_values('date')\nnext10_fromlesser_cases_singapore = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Singapore'].sort_values('date')\nnext10_fromlesser_cases_greece = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Greece'].sort_values('date')\nnext10_fromlesser_cases_thailand = next10_fromlesser_cases[next10_fromlesser_cases['entity'] == 'Thailand'].sort_values('date')","a027ab61":"plt.figure(figsize=(30,10))\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_malay, c='blue')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_brazil, c='red')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_inter, c='green')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_israel, c='orange')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_czech, c='yellow')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_turkey, c='teal')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_ireland, c='pink')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_singapore, c='purple')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_greece, c='gray')\nplt.plot('date','total_confirmed_cases_of_covid_19_cases', data=next10_fromlesser_cases_thailand, c='black')\n\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Malaysia', 'Brazil', 'International', 'Israel', 'Czech Republic', 'Turkey', 'Ireland', 'Singapore', 'Greece', 'Thailand'))\nplt.show()","c22664bc":"permil_grouped_by_entity = testspermillion_vs_confirmed.groupby('entity').sum()['total_confirmed_cases_of_covid_19_per_million_people_cases_per_million'].sort_values(ascending=False).to_frame(name = 'Sum').reset_index()\npermil_grouped_by_entity","a96d66b2":"#### Removing the entry for 'World' (if it exists) and all the 0 confirmed entries \npermil_grouped_by_entity = permil_grouped_by_entity[(permil_grouped_by_entity['entity'] != 'World')]\npermil_grouped_by_entity = permil_grouped_by_entity[(permil_grouped_by_entity['Sum'] != 0)]\npermil_grouped_by_entity","69ed5b91":"permil_grouped_by_entity = permil_grouped_by_entity.sort_values('Sum')\nplt.figure(figsize=(40,50))\nplt.barh('entity','Sum', data=permil_grouped_by_entity)\nplt.xlabel(\"total_confirmed_cases_of_covid_19_per_million_people_cases_per_million\", size=15)\nplt.ylabel(\"entity\", size=15)\nplt.tick_params(axis='x',  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"Confirmed Cases per Million vs Entity\", size=25)","caeb606a":"data = dict(type = 'choropleth',\n            locations = permil_grouped_by_entity['entity'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= permil_grouped_by_entity['entity'],\n            z=grouped_by_entity['Sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Confirmed Cases per Million by Entity','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","51e29218":"#Creating the interactive map\npy.init_notebook_mode(connected=True)\n\n#GroupingBy the dataset for the map\nformated_gdf = testspermillion_vs_confirmed.groupby(['date', 'entity']).sum()['total_confirmed_cases_of_covid_19_per_million_people_cases_per_million'].to_frame(name = 'sum').reset_index()\nformated_gdf['sum'] = formated_gdf['sum'].fillna(0)\nformated_gdf['date'] = pd.to_datetime(formated_gdf['date'])\nformated_gdf['date'] = formated_gdf['date'].dt.strftime('%m\/%d\/%Y')\n\nformated_gdf['log_ConfirmedCases'] = np.log(formated_gdf['sum'] + 2)\n\n#Plotting the figure\nfig = px.choropleth(formated_gdf, locations=\"entity\", locationmode='country names', \n                     color=\"log_ConfirmedCases\", hover_name=\"entity\",projection=\"mercator\",\n                     animation_frame=\"date\",width=1000, height=800,\n                     color_continuous_scale=px.colors.sequential.Viridis,\n                     title='Confirmed Cases per Million vs Entity')\n\n#Showing the figure\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","5ed48a61":"permil_grouped_by_entity = permil_grouped_by_entity.sort_values('Sum', ascending = False)\ntop10_confirmedcases_list = permil_grouped_by_entity.nlargest(10, ['Sum']).entity.to_list()\ntop10_confirmedcases = testspermillion_vs_confirmed[testspermillion_vs_confirmed['entity'].isin(top10_confirmedcases_list)]","59f2a58a":"top10_confirmedcases_list","0f3eb1ab":"top10_confirmedcases_sanmarino = top10_confirmedcases[top10_confirmedcases['entity'] == 'San Marino'].sort_values('date')\ntop10_confirmedcases_iceland = top10_confirmedcases[top10_confirmedcases['entity'] == 'Iceland'].sort_values('date')\ntop10_confirmedcases_faeroeislands = top10_confirmedcases[top10_confirmedcases['entity'] == 'Faeroe Islands'].sort_values('date')\ntop10_confirmedcases_vatican = top10_confirmedcases[top10_confirmedcases['entity'] == 'Vatican'].sort_values('date')\ntop10_confirmedcases_andorra = top10_confirmedcases[top10_confirmedcases['entity'] == 'Andorra'].sort_values('date')\ntop10_confirmedcases_italy = top10_confirmedcases[top10_confirmedcases['entity'] == 'Italy'].sort_values('date')\ntop10_confirmedcases_lux = top10_confirmedcases[top10_confirmedcases['entity'] == 'Luxembourg'].sort_values('date')\ntop10_confirmedcases_liech = top10_confirmedcases[top10_confirmedcases['entity'] == 'Liechtenstein'].sort_values('date')\ntop10_confirmedcases_swit = top10_confirmedcases[top10_confirmedcases['entity'] == 'Switzerland'].sort_values('date')\ntop10_confirmedcases_spain = top10_confirmedcases[top10_confirmedcases['entity'] == 'Spain'].sort_values('date')","2e9dd681":"plt.figure(figsize=(30,10))\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_sanmarino, c='blue')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_iceland, c='red')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_faeroeislands, c='green')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_vatican, c='orange')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_andorra, c='yellow')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_italy, c='teal')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_lux, c='pink')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_liech, c='purple')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_swit, c='gray')\nplt.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=top10_confirmedcases_spain, c='black')\n\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('San Marino', 'Iceland', 'Faeroe Islands', 'Vatican', 'Andorra', 'Italy', 'Luxembourg', 'Liechtenstein', 'Switzerland', 'Spain'))\nplt.show()","486fc806":"next10_confirmedcases_list = ['Monaco', 'Norway', 'South Korea', 'Austria', 'Iran', 'Gibraltar', 'Denmark', 'Bahrain', 'Belgium', 'France']\nnext10_confirmedcases = testspermillion_vs_confirmed[testspermillion_vs_confirmed['entity'].isin(next10_confirmedcases_list)]","ea00a046":"next10_confirmedcases_1 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[0]].sort_values('date').reset_index()\nnext10_confirmedcases_2 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[1]].sort_values('date').reset_index()\nnext10_confirmedcases_3 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[2]].sort_values('date').reset_index()\nnext10_confirmedcases_4 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[3]].sort_values('date').reset_index()\nnext10_confirmedcases_5 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[4]].sort_values('date').reset_index()\nnext10_confirmedcases_6 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[5]].sort_values('date').reset_index()\nnext10_confirmedcases_7 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[6]].sort_values('date').reset_index()\nnext10_confirmedcases_8 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[7]].sort_values('date').reset_index()\nnext10_confirmedcases_9 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[8]].sort_values('date').reset_index()\nnext10_confirmedcases_10 = next10_confirmedcases[next10_confirmedcases['entity'] == next10_confirmedcases_list[9]].sort_values('date').reset_index()","d05284da":"fig, ((ax1), (ax2), (ax3), (ax4), (ax5), (ax6), (ax7), (ax8), (ax9), (ax10)) = plt.subplots(10, 1, figsize = (30,70))\n# fig.suptitle('Sharing x per column, y per row')\nax1.set_title('Monaco')\nax2.set_title('Norway')\nax3.set_title('South Korea')\nax4.set_title('Austria')\nax5.set_title('Iran')\nax6.set_title('Gibraltar')\nax7.set_title('Denmark')\nax8.set_title('Bahrain')\nax9.set_title('Belgium')\nax10.set_title('France')\n\nax1.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_1, c='blue', linewidth = 3)\nax2.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_2, c='red', linewidth = 3)\nax3.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_3, c='green', linewidth = 3)\nax4.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_4, c='orange', linewidth = 3)\nax5.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_5, c='blue', linewidth = 3)\nax6.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_6, c='red', linewidth = 3)\nax7.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_7, c='green', linewidth = 3)\nax8.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_8, c='orange', linewidth = 3)\nax9.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_9, c='green', linewidth = 3)\nax10.plot('date','total_confirmed_cases_of_covid_19_per_million_people_cases_per_million', data=next10_confirmedcases_10, c='orange', linewidth = 3)\n\nfor ax in fig.get_axes():\n    ax.label_outer()\n    ax.tick_params(axis='x', rotation = 90,  labelsize = 15)\n    ax.tick_params(axis='y', labelsize = 15) \n","fb5d207a":"pd.set_option('display.max_columns', 200)\nhospitalization.tail() #Interesting","d9abd653":"hospitalization.describe()","4f7d5790":"newICU = hospitalization.groupby('location').sum()['newICU_mean'].to_frame(name = 'New ICU').reset_index()\nnewICU.head()","83d32ded":"newICU_by_location = newICU.sort_values('New ICU')\nplt.figure(figsize=(40,40))\nplt.barh('location','New ICU', data=newICU_by_location)\nplt.xlabel(\"New ICU\", size=15)\nplt.ylabel(\"location\", size=15)\nplt.tick_params(axis='x',  labelsize = 15)\nplt.tick_params(axis='y', labelsize = 15) \nplt.title(\"New ICU vs Location\", size=25)","dd94da7a":"death = hospitalization.groupby('location').sum()['deaths_mean'].to_frame(name = 'Deaths').reset_index()\ndeath.head()","737e50a1":"death_by_location = death.sort_values('Deaths')\nplt.figure(figsize=(40,40))\nplt.barh('location','Deaths', data=death_by_location)\nplt.xlabel(\"Deaths\", size=15)\nplt.ylabel(\"location\", size=15)\nplt.tick_params(axis='x',  labelsize = 15)\nplt.tick_params(axis='y', labelsize = 15) \nplt.title(\"Deaths vs Location\", size=25)","e746f50d":"top10_usdeaths_list = ['New York', 'Texas', 'Florida', 'Californa', 'Tennessee', 'Michigan', 'Georgia', 'North Carolina', 'Illinois', 'Louisiana']\ntop10_usdeaths = hospitalization[hospitalization['location'].isin(top10_usdeaths_list)]","ad95c5a7":"top10_usdeaths_ny = top10_usdeaths[top10_usdeaths['location'] == 'New York'].sort_values('date')\ntop10_usdeaths_tx = top10_usdeaths[top10_usdeaths['location'] == 'Texas'].sort_values('date')\ntop10_usdeaths_fl = top10_usdeaths[top10_usdeaths['location'] == 'Florida'].sort_values('date')\ntop10_usdeaths_ca = top10_usdeaths[top10_usdeaths['location'] == 'California'].sort_values('date')\ntop10_usdeaths_tn = top10_usdeaths[top10_usdeaths['location'] == 'Tennessee'].sort_values('date')\ntop10_usdeaths_mi = top10_usdeaths[top10_usdeaths['location'] == 'Michigan'].sort_values('date')\ntop10_usdeaths_ga = top10_usdeaths[top10_usdeaths['location'] == 'Georgia'].sort_values('date')\ntop10_usdeaths_nc = top10_usdeaths[top10_usdeaths['location'] == 'North Carolina'].sort_values('date')\ntop10_usdeaths_il = top10_usdeaths[top10_usdeaths['location'] == 'Illinois'].sort_values('date')\ntop10_usdeaths_lo = top10_usdeaths[top10_usdeaths['location'] == 'Louisiana'].sort_values('date')","70da7ea6":"plt.figure(figsize=(40,15))\nplt.plot('date','deaths_mean', data=top10_usdeaths_ny, c='blue')\nplt.plot('date','deaths_mean', data=top10_usdeaths_tx, c='red')\nplt.plot('date','deaths_mean', data=top10_usdeaths_fl, c='green')\nplt.plot('date','deaths_mean', data=top10_usdeaths_ca, c='orange')\nplt.plot('date','deaths_mean', data=top10_usdeaths_tn, c='yellow')\nplt.plot('date','deaths_mean', data=top10_usdeaths_mi, c='teal')\nplt.plot('date','deaths_mean', data=top10_usdeaths_ga, c='pink')\nplt.plot('date','deaths_mean', data=top10_usdeaths_nc, c='purple')\nplt.plot('date','deaths_mean', data=top10_usdeaths_il, c='gray')\nplt.plot('date','deaths_mean', data=top10_usdeaths_lo, c='black')\n\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('New York', 'Texas', 'Florida', 'Californa', 'Tennessee', 'Michigan', 'Georgia', 'North Carolina', 'Illinois', 'Louisiana'))\nplt.show()","59a66f9d":"### Never felt in such a hurry to see  ....","b06dfabe":"## 3.2.1 High Confirmed Cases per Million - Top 10 <a class=\"anchor\" id=\"3.2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","2dfda17e":"## 3.1 Total Confirmed Cases vs Entity <a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","cf53a99e":"## 3.1.3 Relatively lesser confirmed cases - Next 10 <a class=\"anchor\" id=\"3.1.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","145d42ef":"## 2.3 Total Tests Per Million vs Entity <a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","64ea7051":"#### Tests performed across entire Australia covering it's 8 provinces. I'm guessing 'Australia' below represents the Northern Territory","ac3771c5":"#### San Marino certainly has seen a steep rise in confirmed cases. So has Faeroe Islands.\n#### Vatican shows a constant confirmed cases for the timeline available - either it did not see any rise post 03\/17 or an error in data entry. \n#### Andorra and Luxemborg also shows steep rise in confirmed cases while rest are showing gradual but increase in the confirmed cases per million people","d3e3f38d":"#### Removing the entry for 'World' and all the 0 confirmed entries ","ffb1f8c5":"### kernels\n* https:\/\/www.kaggle.com\/aestheteaman01\/demographics-observation-for-pandemic-escalation\n\n### Resources\n* https:\/\/analyticsindiamag.com\/beginners_guide_geographical_plotting_with_plotly\/\n* https:\/\/plotly.com\/python\/choropleth-maps\/\n* https:\/\/matplotlib.org\/3.1.0\/gallery\/subplots_axes_and_figures\/subplots_demo.html","a89a7e97":"## 4 Hospitalization <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","98908617":"#### The tests performed reduced dramatically in the following couple of weeks post 02\/24, picked up in the end of 2nd week of March and then reached almost from where it started on 03\/20\n#### On observing the data for the lesser tests performed dates (below) Spain, Belgium, Sweden, Israel stood out - all of them port based. Was there a delay in realizing the impact or occurrences due to any sort of port based commutes?","bd691126":"## 2.4 Total Tests Per Million vs Date <a class=\"anchor\" id=\"2.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","73c63023":"#### Similar observations except for Singapore and Czech Republic for whom the rise in cases were checked. \n#### Countries like Brazil and Turkey have experience sharp increase in confirmed cases","1add45cf":"# Which populations are at risk of contracting COVID-19?","e81c5afb":"#### States like New York, Texas, Florida, California, Tennesse has seen relatively higher new ICU instances","3ae687c0":"![world.png](attachment:world.png)","29b9c98a":"#### Looking at the Tests Performed against Test Performed per Million Australia appears to be well covered. The fact that all the 8 provinces are involved could be the factor.\n#### For a lot of Tests Performed for China and Russia, the Test Performed per Million is relatively less. It could indicate that only focused region\/s being covered.","f7888f41":"## To be continued ....","f1ef9104":"## 3.2.2 High Confirmed Cases per Million - Next 10 <a class=\"anchor\" id=\"3.2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","4ea72cad":"## 4.2.1 Deaths Top 10 vs Location <a class=\"anchor\" id=\"4.2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","50fb4087":"## 2.1 Total Tests vs Entity <a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","27682ace":"## 3.1.2 Relatively lesser confirmed cases - Top 10 <a class=\"anchor\" id=\"3.1.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","01c27979":"#### Although the confirmed cases are relatively lesser in majority of the world but the below depiction shows the spread and the skewness of the confirmed cases ","d755fd57":"## Acknowledgements","c3a9e1c8":"#### Interesting","5f060413":"## 1. Libraries, Mem Reduction, Reading Files <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","ca6710cf":"## 2.2 Total Tests vs Date <a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","20a97ddf":"#### Excluding China, amongst the top 10 countries with high confirmed cases, we can clearly see the drastic rise in cases in March","9e753670":"## 3. Analyzing Confirmed Cases <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","4b1b1afb":"#### Similar observation in terms of when the spike happened","fa46689a":"## 3.2 Total Confirmed Cases Per Million vs Entity <a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","04fd90ee":"## 2. Analyzing Tests Performed data <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","a6eb3c9b":"## 4.1 New ICU vs Location <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","2f3ab4e5":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Libraries, Mem Reduction, Reading Files](#1)\n1. [Analyzing Tests Performed data](#2)\n    -  [2.1 Total Tests vs Entity](#2.1)\n    -  [2.2 Total Tests vs Date](#2.2)  \n    -  [2.3 Total Tests Per Million vs Entity](#2.3)  \n    -  [2.4 Total Tests Per Million vs Date](#2.4) \n1. [Analyzing Confirmed Cases](#3)\n    -  [3.1 Total Confirmed Cases vs Entity](#3.1)\n        -  [3.1.1 High Confirmed Cases - Top 10](#3.1.1) \n        -  [3.1.2 Relatively lesser confirmed cases - Top 10](#3.1.2)         \n        -  [3.1.3 Relatively lesser confirmed cases - Next 10](#3.1.3)  \n    -  [3.2 Total Confirmed Cases Per Million vs Entity](#3.2)\n        -  [3.2.1 High Confirmed Cases per Million - Top 10](#3.2.1) \n        -  [3.2.2 High Confirmed Cases per Million - Next 10](#3.2.2)         \n1. [Hospitalization](#4)\n    -  [4.1 New ICU vs Location](#4.1)  \n    -  [4.2 Deaths vs Location](#4.2)      \n        -  [4.2.1 Deaths Top 10 vs Location](#4.2.1)    ","662f4bba":"#### Again New York, Texas, Florida, California, Tennesse has higher deaths\n#### Also the New ICU cases and Deaths seem to have the same order in terms of frequencies","a3b848ad":"## 3.1.1 High Confirmed Cases - Top 10 <a class=\"anchor\" id=\"3.1.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","cd6ed3eb":"## 4.2 Deaths vs Location <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}