{"cell_type":{"46ef353f":"code","61a675a7":"code","76c2161d":"code","616152be":"code","eff3fffc":"code","86c55601":"code","995bb1fa":"code","506f8c87":"code","92dcbe42":"code","cc681961":"code","9e6f7e90":"code","7202e28e":"code","51d0941e":"code","a4c75af8":"code","daed8d4d":"code","ae1b415d":"code","309182a6":"code","3d070d00":"code","75930ac0":"code","0a6b0442":"code","9bea0dd4":"code","b961dc76":"code","a27d6b25":"code","2cb089c3":"code","9d9cecf5":"code","d746ae0e":"code","8527fa03":"code","130a7bee":"code","7cb522b4":"code","dab6ff07":"code","d0f75277":"code","c6f719fb":"code","392e6a5a":"code","0b73ab71":"code","ded9837c":"code","8c736f76":"code","f7164570":"code","18b3f71e":"code","5857b75f":"code","3c6b6f39":"code","efa48704":"code","d61f2cb6":"code","4adb7d2a":"code","b6dec77f":"code","7349238c":"code","2c1ed8ad":"code","56f68b15":"code","df2e48d0":"code","47baf063":"code","7bad4fea":"code","f02da90e":"markdown","4cff3ab2":"markdown","432b1eaf":"markdown","f306392d":"markdown","bbd7a155":"markdown","de1310c4":"markdown","26296e0c":"markdown","98179104":"markdown","bc527b71":"markdown","b11a0301":"markdown","2b10d178":"markdown"},"source":{"46ef353f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61a675a7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\npd.set_option('display.max_columns',None)\n%matplotlib inline\nwarnings.filterwarnings('ignore')","76c2161d":"train=pd.read_csv('\/kaggle\/input\/breastcancerdataset\/BRCA.csv',index_col='Patient_ID')","616152be":"train.head(5)","eff3fffc":"plt.figure(figsize=(12,5))\ntrain.boxplot()","86c55601":"train.describe().T","995bb1fa":"train.info()","506f8c87":"train.shape","92dcbe42":"train.isnull().sum()","cc681961":"train[train['Gender'].isna()]","9e6f7e90":"train=train[:-7]","7202e28e":"train.isnull().sum()","51d0941e":"train[train['Date_of_Last_Visit'].isna()]","a4c75af8":"train.drop('Date_of_Last_Visit',axis=1,inplace=True)","daed8d4d":"train['Date_of_Surgery']=pd.to_datetime(train['Date_of_Surgery'])","ae1b415d":"num_feat= train.select_dtypes(include='number').columns.tolist()\ncat_feat= train.select_dtypes(include='object').columns.tolist()","309182a6":"print(num_feat)\nprint(cat_feat)","3d070d00":"from scipy.stats import norm","75930ac0":"plt.figure(figsize=(16,12))\nfor i,feat in enumerate(num_feat):\n    plt.subplot(3,2,i+1)\n    sns.distplot(train[feat],fit=norm)\n    (mu,sigma)=norm.fit(train[feat])\n    plt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f})'.format(mu,sigma)],loc='best')\n    plt.tight_layout()\n    plt.title(feat)","0a6b0442":"train['Age'].mean()","9bea0dd4":"plt.figure(figsize=(16,17))\nfor i,feat in enumerate(cat_feat):\n    plt.subplot(4,3,i+1)\n    sns.countplot(x=feat,data=train,hue='Patient_Status')\n    plt.tight_layout()\n    plt.title(feat)","b961dc76":"train.isnull().sum()","a27d6b25":"train[train['Patient_Status'].isna()]","2cb089c3":"plt.figure(figsize=(8,8))\nsns.boxplot(x=train['Patient_Status'],y=train['Age'],hue=train['Tumour_Stage'])","9d9cecf5":"plt.figure(figsize=(8,8))\nsns.boxplot(x=train['Patient_Status'],y=train['Age'],hue=train['Surgery_type'])","d746ae0e":"plt.figure(figsize=(8,8))\nsns.boxplot(x=train['Patient_Status'],y=train['Age'],hue=train['Histology'])","8527fa03":"plt.figure(figsize=(8,8))\nsns.boxplot(x=train['Patient_Status'],y=train['Age'],hue=train['Gender'])","130a7bee":"plt.figure(figsize=(8,8))\nsns.boxplot(y=train['Protein1'],x=train['Patient_Status'],hue=train['Surgery_type'])","7cb522b4":"plt.figure(figsize=(8,8))\nsns.boxplot(x=train['Patient_Status'],y=train['Age'],hue=train['HER2 status'])","dab6ff07":"train['Patient_Status'].fillna(train['Patient_Status'].mode()[0],inplace=True)","d0f75277":"sns.set_palette(sns.color_palette('Set1',8))\nsns.pairplot(train,hue='Patient_Status',corner=True)","c6f719fb":"def dist_box(data):\n   # function plots a combined graph for univariate analysis of continous variable \n #to check spread, central tendency , dispersion and outliers .\n    Name=data.name.upper()\n    fig,(ax_box,ax_dis)= plt.subplots(nrows=2,sharex=True,\n                                     gridspec_kw={\"height_ratios\":(.25,.75)},figsize=(8,5))\n    mean=data.mean()\n    median=data.median()\n    mode=data.mode().tolist()[0]\n    sns.set_theme(style='white')\n    sns.set_palette(sns.color_palette('Set1',8))\n    fig.suptitle('SPREAD OF DATA FOR '+ Name ,fontsize=18,fontweight='bold')\n    sns.boxplot(x=data,showmeans=True,orient='h',ax=ax_box)\n    ax_box.set(xlabel='')\n    sns.set_palette(sns.color_palette('Set1',8))\n    sns.distplot(data,kde=False,ax=ax_dis)\n    ax_dis.axvline(mean,color='r',linestyle='--',linewidth=2)\n    ax_dis.axvline(median,color='g',linestyle='-',linewidth=2)\n    ax_dis.axvline(mode,color='y',linestyle='-',linewidth=2)\n    plt.legend({'Mean':mean,'Median':median,'Mode':mode})","392e6a5a":"for i in range(len(num_feat)):\n    dist_box(train[num_feat[i]])","0b73ab71":"title=cat_feat\nplt.figure(figsize=(13,16))\nsns.set_theme(style='white')\n\nfor i,feat in enumerate(cat_feat):\n    plt.subplot(4,2,i+1)\n    order=train[feat].value_counts(ascending=False).index\n    sns.set_palette('Set1')\n    ax=sns.countplot(x=train[feat],data=train,hue=train['Patient_Status'])\n    sns.despine(top=True,right=True,left=True)\n    for p in ax.patches:\n        percentage='{:.1f}%'.format(100*p.get_height()\/len(train[feat]))\n        x=p.get_x()+p.get_width()\/2-0.05\n        y=p.get_y() +p.get_height()\n        plt.annotate(percentage,(x,y),ha='center')\n    plt.tight_layout()\n    plt.title(title[i].upper())","ded9837c":"sns.set_palette(sns.color_palette('Set1',8))\nplt.figure(figsize=(15,7))\nsns.heatmap(train.corr(),annot=True,vmin=-1,vmax=1,cmap=plt.cm.Blues)\nplt.show()","8c736f76":"plt.figure(figsize=(15,10))\nfor i,feat in enumerate(num_feat):\n    plt.subplot(2,3,i+1)\n    sns.boxplot(x=train['Patient_Status'],y=train[feat],data=train)\n    sns.despine(top=True,right=True,left=True)\n    plt.tight_layout()\n    plt.title(feat.upper())","f7164570":"df=train.copy()","18b3f71e":"df['Age']","5857b75f":"df['Age']=pd.cut(df['Age'],bins=3)","3c6b6f39":"ls=df[df['Patient_Status']=='Dead']['Age']\ntype(ls)","efa48704":"df['Age']=pd.cut(df['Age'],bins=3)","d61f2cb6":"df['Age'].value_counts()","4adb7d2a":"data1=[86,177,71]\nAge=['Young','Old','Very Old']\ncolors=('orange','grey','brown')\nexplode=(0.1,0,0.3)\nwp={'linewidth':1, 'edgecolor':'green'}\ndef func(pct,allvalues):\n    absolute=int(pct\/100.*np.sum(allvalues))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nfig,ax= plt.subplots(figsize=(10,7))\nwedges, texts, autotexts = ax.pie(data1, \n                                  autopct = lambda pct: func(pct, data1),\n                                  explode = explode, \n                                  labels = Age,\n                                  shadow = True,\n                                  colors = colors,\n                                  startangle = 90,\n                                  wedgeprops = wp,\n                                  textprops = dict(color =\"white\"))\nax.legend(wedges, Age,\n          title =\"Deaths as per Age\",\n          loc =\"center left\",\n          bbox_to_anchor =(1, 0, 0.5,1))\n  \nplt.setp(autotexts, size = 8, weight =\"bold\")\nax.set_title(\"Distribution of Population as per their Age.\")\n  \n# show plot\nplt.show()","b6dec77f":"ls.value_counts()","7349238c":"data=[17,35,14]\nAge=['Young','Old','Very Old']\ncolors=('orange','grey','brown')\nexplode=(0.1,0,0.3)\nwp={'linewidth':1, 'edgecolor':'green'}","2c1ed8ad":"def func(pct,allvalues):\n    absolute=int(pct\/100.*np.sum(allvalues))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)","56f68b15":"fig,ax= plt.subplots(figsize=(10,7))\nwedges, texts, autotexts = ax.pie(data, \n                                  autopct = lambda pct: func(pct, data),\n                                  explode = explode, \n                                  labels = Age,\n                                  shadow = True,\n                                  colors = colors,\n                                  startangle = 90,\n                                  wedgeprops = wp,\n                                  textprops = dict(color =\"white\"))\nax.legend(wedges, Age,\n          title =\"Deaths as per Age\",\n          loc =\"center left\",\n          bbox_to_anchor =(1, 0, 0.5,1))\n  \nplt.setp(autotexts, size = 8, weight =\"bold\")\nax.set_title(\"Distribution of people who died as per their Age.\")\n  \n# show plot\nplt.show()","df2e48d0":"plt.pie(df['Age'])","47baf063":"#train['Age']=pd.cut(train['Age'],bins=3,labels=['Young','Old','Very Old'])","7bad4fea":"#train['surgery_year']=train['Date_of_Surgery'].dt.year\n#train['surgery_month']=train['Date_of_Surgery'].dt.month\n#train['surgery_week']=train['Date_of_Surgery'].dt.week\n#train['surgery_day_of_week']=train['Date_of_Surgery'].dt.dayofweek\n","f02da90e":"1. All numerical variables have bell-shaped distribution.\n2. Age has mean around 60.\n3. Protein1,Protein3,Protein4 have mean around 0.","4cff3ab2":"Since last 7 rows have all null values. We will remove it.","432b1eaf":"# Feature Engineering","f306392d":"Since, we can clearly see that for 'Infiltrating Ductal Carcinoma' Histology type Patient Status is 'ALive'.So we, can fill NAN values with 'Alive'.","bbd7a155":"There is no clear direct relationship between numerical columns.","de1310c4":"#### Univariate Analysis","26296e0c":"#### Bivariate Analysis","98179104":"##### Observations on Class","bc527b71":"Patients_Status shoul not depend on the date of  their last visit. so, we will delete this column.","b11a0301":"### Detailed Exploration of Data.","2b10d178":"#### Observations"}}