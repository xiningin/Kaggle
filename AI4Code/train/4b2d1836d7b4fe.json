{"cell_type":{"986bc071":"code","badb9b39":"code","d66e8188":"code","8eb7a87a":"code","00cad1f9":"code","38228279":"code","7350db93":"code","dc9dbe2f":"code","6067e5ea":"code","439ebb97":"code","3794fc89":"code","76b8c23a":"code","de4f6be9":"code","dccc1e11":"code","4d819920":"code","3582238e":"code","fdef1358":"code","98370bed":"code","95a4f34c":"code","9b280efe":"code","52dcdde9":"code","a320cead":"code","b040636c":"code","3329d748":"code","5e9983fa":"code","0aadd42b":"code","56520323":"code","a4fcb092":"code","2a4ff477":"code","d271c3bb":"code","61c97bd4":"code","5c834700":"code","dcdc31f1":"code","aea07f0b":"code","9250968c":"code","dc3471f3":"code","d81e010e":"code","8f862319":"code","11fca52e":"code","7d72e41a":"code","94fe711d":"code","69b137d4":"code","ebd53c6e":"code","9af8c69c":"code","af22a72c":"code","f9f2c482":"code","6d2d875c":"code","651f4d06":"code","4ad80a5d":"code","d5dfebcb":"code","db1aedb5":"code","fde12385":"code","60dcdbb5":"code","5ad71662":"code","f8274b6c":"code","5709e7be":"code","11857910":"code","87725cd6":"code","25515164":"code","ac148802":"code","ddda5110":"code","6300111a":"code","0c7261a3":"code","003df92e":"code","84dfbde2":"code","a1d8fee9":"code","927a9a60":"code","40a26c71":"markdown","8a12ec32":"markdown","9926401f":"markdown","87ac4950":"markdown"},"source":{"986bc071":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport os,sys\nfrom scipy import stats\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","badb9b39":"path = \"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\"","d66e8188":"data = pd.read_csv(path)","8eb7a87a":"data.head()","00cad1f9":"data.describe()","38228279":"#customer Id is not usefull for analysis \n\ndata.drop('customerID',axis='columns',inplace=True)","7350db93":"data.dtypes","dc9dbe2f":"data.TotalCharges.values","6067e5ea":"data.MonthlyCharges.values","439ebb97":"pd.to_numeric(data.TotalCharges,errors='coerce')","3794fc89":"pd.to_numeric(data.TotalCharges,errors='coerce').isnull()","76b8c23a":"data[pd.to_numeric(data.TotalCharges,errors='coerce').isnull()]","de4f6be9":"data[pd.to_numeric(data.TotalCharges,errors='coerce').isnull()].shape","dccc1e11":"data.shape","4d819920":"\ndata.iloc[488]","3582238e":"data.iloc[5218]['TotalCharges']","fdef1358":"data.shape","98370bed":"data1 = data[data.TotalCharges!='']\ndata1.shape","95a4f34c":"data1.dtypes","9b280efe":"data1.TotalCharges.dtypes","52dcdde9":"data1[data1.Churn=='No'].PhoneService","a320cead":"data1[data1.Churn=='No']","b040636c":"data1[data1.Churn=='No'].tenure","3329d748":"data1[data1.Churn=='Yes'].tenure","5e9983fa":"tenure_churn_no = data1[data1.Churn=='No'].tenure\ntenure_churn_yes = data1[data1.Churn=='Yes'].tenure\n\nplt.xlabel(\"tenure\")\nplt.ylabel(\"Number of Customers\")\nplt.title(\"Customer Churn Prediction Visualization\")\n\nplt.hist([tenure_churn_yes,tenure_churn_no],color=['green','red'],label=['ChurnYes','ChurnNo'])\nplt.legend()","0aadd42b":"monthly_churn_no = data1[data1.Churn=='No'].MonthlyCharges\nmonthly_churn_yes = data1[data1.Churn=='Yes'].MonthlyCharges\n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number of Customers\")\nplt.title(\"Customer Churn Prediction Visualization\")\n\nplt.hist([monthly_churn_yes,monthly_churn_no],rwidth=0.95,color=['green','red'],label=['ChurnYes','ChurnNo'])\nplt.legend()","56520323":"for column in data:\n    print(column)","a4fcb092":"for column in data:\n    print(data[column].unique())","2a4ff477":"for column in data:\n    print(f'{column} : {data[column].unique()}')","d271c3bb":"for column in data:\n    if data[column].dtypes=='object':\n        print(f'{column} : {data[column].unique()}')","61c97bd4":"def print_unique_col_values(data):\n    for column in data:\n        if data[column].dtypes=='object':\n            print(f'{column} : {data[column].unique()}')\n    ","5c834700":"print_unique_col_values(data1)","dcdc31f1":"data1.replace('No internet service','No',inplace=True)\ndata1.replace('No phone service','No',inplace=True)","aea07f0b":"print_unique_col_values(data1)","9250968c":"yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\nfor col in yes_no_columns:\n    data1[col].replace({'Yes':1,'No':0},inplace=True)","dc3471f3":"for col in data1:\n    print(f'{col}: {data1[col].unique()}')","d81e010e":"data1['gender'].replace({'Female':1,'Male':0},inplace=True)","8f862319":"data1['gender'].unique()","11fca52e":"pd.get_dummies(data=data1,columns=['InternetService','Contract','PaymentMethod'])","7d72e41a":"data2 = pd.get_dummies(data=data1,columns=['InternetService','Contract','PaymentMethod'])\ndata2.columns","94fe711d":"data2.sample(40)","69b137d4":"data2.dtypes","ebd53c6e":"data3 = data2.drop(['TotalCharges'], axis = 1)\ndata3","9af8c69c":"data3.columns","af22a72c":"cols_to_scale =['tenure','MonthlyCharges']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ndata3[cols_to_scale] = scaler.fit_transform(data3[cols_to_scale])","f9f2c482":"scaler = MinMaxScaler()\ndata3[cols_to_scale] = scaler.fit_transform(data3[cols_to_scale])\nprint(data3)","6d2d875c":"data3[cols_to_scale] = scaler.fit_transform(data3[cols_to_scale])","651f4d06":"data3[cols_to_scale]","4ad80a5d":"x = data3.drop('Churn',axis='columns')\ny = data3['Churn']","d5dfebcb":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=5)","db1aedb5":"x_train.shape","fde12385":"x_test.shape","60dcdbb5":"x_train[:10]","5ad71662":"len(x_train.columns)","f8274b6c":"import tensorflow as tf\nfrom tensorflow import keras\n\n\nmodel = keras.Sequential([\n    keras.layers.Dense(20,input_shape=(25,),activation='relu'),\n    keras.layers.Dense(14,activation='relu'),\n    keras.layers.Dense(1,activation='sigmoid'),\n])\n\n\n\n\n\n\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\n\n\n\nmodel.fit(x_train, y_train, epochs=100)\n\n\n\n","5709e7be":"model.evaluate(x_test, y_test)","11857910":"yp = model.predict(x_test)\nyp[:5]","87725cd6":"y_test[:10]","25515164":"y_pred = []\nfor element in yp:\n    if element > 0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)","ac148802":"y_pred[:10]","ddda5110":"y_pred[:10]","6300111a":"y_test[:5]","0c7261a3":"from sklearn.metrics import confusion_matrix, classification_report\n\nprint(classification_report(y_test,y_pred))","003df92e":"import seaborn as sn\n\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\n\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True,fmt = 'd')\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Truth\")\n","84dfbde2":"round((919+189)\/(919+197+189+104),2)","a1d8fee9":"round(189\/(189+104),2)","927a9a60":"round(919\/(919+197),2)","40a26c71":"i is integer and loc is location","8a12ec32":"Precision for class 0. who did not churn","9926401f":"Precision for class 1. who Churn","87ac4950":"One Hot Encoder"}}