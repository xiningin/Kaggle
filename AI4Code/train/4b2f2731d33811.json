{"cell_type":{"06ad6b0c":"code","14584bc7":"code","0d8b2f60":"code","51ffda29":"code","da9b772a":"code","cc94cd60":"code","ff3c21d1":"code","7480f23e":"code","0c3a1771":"code","4d81c618":"code","2139895b":"code","3ea569bb":"code","48d2f560":"code","afae7fbc":"code","e29fbcf6":"code","754fcf64":"code","6c7e026b":"code","d6d84886":"code","57ecc062":"code","4454ce40":"code","a05fc46b":"code","9b2516e2":"code","8c11b3fd":"code","eb894954":"code","98d22629":"code","76b7681f":"code","ca993b24":"code","d3e34067":"code","69f112f7":"code","797fd588":"code","39823725":"code","04068639":"code","26e02878":"code","7520cc05":"code","a15c5b93":"code","898f3015":"code","fe70aeff":"code","7180847e":"code","03fec938":"code","4dae9bc9":"code","0ec7d6d6":"code","f2e18ca7":"code","73eecc3c":"code","28ef5c33":"code","14a34334":"code","12eb8213":"code","1ad21125":"code","996b250f":"code","336ad361":"code","bb3e960d":"code","95061bdc":"markdown"},"source":{"06ad6b0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14584bc7":"match = pd.read_csv('\/kaggle\/input\/ipl-data-set\/matches.csv')\ndelivery = pd.read_csv('\/kaggle\/input\/ipl-data-set\/deliveries.csv')","0d8b2f60":"match.head()","51ffda29":"match.shape","da9b772a":"delivery.head()","cc94cd60":"total_score_df = delivery.groupby(['match_id','inning']).sum()['total_runs'].reset_index()","ff3c21d1":"total_score_df = total_score_df[total_score_df['inning'] == 1]","7480f23e":"total_score_df","0c3a1771":"match_df = match.merge(total_score_df[['match_id','total_runs']],left_on='id',right_on='match_id')","4d81c618":"match_df","2139895b":"match_df['team1'].unique()","3ea569bb":"teams = [\n    'Sunrisers Hyderabad',\n    'Mumbai Indians',\n    'Royal Challengers Bangalore',\n    'Kolkata Knight Riders',\n    'Kings XI Punjab',\n    'Chennai Super Kings',\n    'Rajasthan Royals',\n    'Delhi Capitals'\n]","48d2f560":"match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')\nmatch_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')\n\nmatch_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')\nmatch_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')","afae7fbc":"match_df = match_df[match_df['team1'].isin(teams)]\nmatch_df = match_df[match_df['team2'].isin(teams)]","e29fbcf6":"match_df.shape","754fcf64":"match_df = match_df[match_df['dl_applied'] == 0]","6c7e026b":"match_df = match_df[['match_id','city','winner','total_runs']]","d6d84886":"delivery_df = match_df.merge(delivery,on='match_id')","57ecc062":"delivery_df = delivery_df[delivery_df['inning'] == 2]","4454ce40":"delivery_df.shape","a05fc46b":"delivery_df.groupby(\"match_id\").cumsum()[\"total_runs_y\"]","9b2516e2":"delivery_df[\"curr_score\"] = delivery_df.groupby(\"match_id\").cumsum()[\"total_runs_y\"]","8c11b3fd":"delivery_df[\"runs_left\"] =  delivery_df[\"total_runs_x\"] - delivery_df[\"curr_score\"]","eb894954":"delivery_df","98d22629":"# find the balls left @ particular moment\ndelivery_df[\"balls_left\"] = 126 - (delivery_df[\"over\"]*6 + delivery_df[\"ball\"])","76b7681f":"# find the wickets left @moment\ndelivery_df[\"player_dismissed\"] = delivery_df[\"player_dismissed\"].fillna(\"0\")\ndelivery_df[\"player_dismissed\"] = delivery_df[\"player_dismissed\"].apply(lambda x : x if x==\"0\" else \"1\")\ndelivery_df[\"player_dismissed\"] = delivery_df[\"player_dismissed\"].astype(\"int\")\nwickets = delivery_df.groupby(\"match_id\").cumsum()[\"player_dismissed\"].values\ndelivery_df[\"wickets\"] = 10 - wickets  # wickets left\ndelivery_df.head()","ca993b24":"delivery_df[\"wickets\"]","d3e34067":"# current run rate\ndelivery_df[\"crr\"] = delivery_df[\"curr_score\"]*6 \/ (120 - delivery_df[\"balls_left\"])","69f112f7":"# required run rate\ndelivery_df[\"rrr\"] = (delivery_df[\"runs_left\"])*6 \/  delivery_df[\"balls_left\"]","797fd588":"delivery_df.sample()","39823725":"# result \"0\" ->lose batting team of 2nd inning and \"1\" ->reveres\ndelivery_df[\"result\"] = delivery_df.apply(lambda x : \"1\" if x[\"batting_team\"] == x[\"winner\"] else \"0\"  ,axis =1 )","04068639":"delivery_df.sample(5)","26e02878":"final_df = delivery_df[[\"batting_team\" ,\"bowling_team\" ,\"city\" ,\"runs_left\" ,\"balls_left\", \"wickets\" ,\"total_runs_x\" ,\"crr\" ,\"rrr\" ,\"result\"]]","7520cc05":"# to remove biasing we should shuffle our data as:\nfinal_df = final_df.sample(final_df.shape[0])","a15c5b93":"final_df = final_df.dropna()","898f3015":"final_df['balls_left']","fe70aeff":"final_df = final_df[final_df['balls_left'] != 0]","7180847e":"X = final_df.iloc[: ,:-1]\ny = final_df.iloc[: ,-1]\nfrom sklearn.model_selection import train_test_split as tts\nX_train ,X_test ,y_train ,y_test = tts(X,y ,test_size = 0.2 ,random_state = 1)","03fec938":"X_train","4dae9bc9":"# since first 3 cols are of string\/obj types so it makes trouble, so we aplly one hot encoding\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\ntrf = ColumnTransformer([\n    (\"trf\", OneHotEncoder(sparse =False ,drop =\"first\"),[\"batting_team\" , \"bowling_team\" ,\"city\"])\n]\n,remainder = \"passthrough\")","0ec7d6d6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline","f2e18ca7":"# create pipeline\npipe = Pipeline(steps =[\n    (\"step1\" ,trf),\n    (\"step2\" ,LogisticRegression(solver = \"liblinear\"))\n])","73eecc3c":"pipe.fit(X_train , y_train)","28ef5c33":"y_pred = pipe.predict(X_test)","14a34334":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test , y_pred)","12eb8213":"pipe.predict_proba(X_test)[10]","1ad21125":"def match_summary(row):\n    print(\"Batting Team-\" + row['batting_team'] + \" | Bowling Team-\" + row['bowling_team'] + \"\")","996b250f":"def match_progression(x_df,match_id,pipe):\n    match = x_df[x_df['match_id'] == match_id]\n    match = match[(match['ball'] == 6)]\n    temp_df = match[['batting_team','bowling_team','city','runs_left','balls_left','wickets','total_runs_x','crr','rrr']].dropna()\n    temp_df = temp_df[temp_df['balls_left'] != 0]\n    result = pipe.predict_proba(temp_df)\n    temp_df['lose'] = np.round(result.T[0]*100,1)\n    temp_df['win'] = np.round(result.T[1]*100,1)\n    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)\n    \n    target = temp_df['total_runs_x'].values[0]\n    runs = list(temp_df['runs_left'].values)\n    new_runs = runs[:]\n    runs.insert(0,target)\n    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)\n    wickets = list(temp_df['wickets'].values)\n    new_wickets = wickets[:]\n    new_wickets.insert(0,10)\n    wickets.append(0)\n    w = np.array(wickets)\n    nw = np.array(new_wickets)\n    temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]\n    \n    print(\"Target-\",target)\n    temp_df = temp_df[['end_of_over','runs_after_over','wickets_in_over','lose','win']]\n    return temp_df,target\n    ","336ad361":"temp_df,target = match_progression(delivery_df,141,pipe)\ntemp_df","bb3e960d":"import matplotlib.pyplot as plt\nplt.figure(figsize=(18,8))\nplt.plot(temp_df['end_of_over'],temp_df['wickets_in_over'],color='yellow',linewidth=3)\nplt.plot(temp_df['end_of_over'],temp_df['win'],color='#00a65a',linewidth=4)\nplt.plot(temp_df['end_of_over'],temp_df['lose'],color='red',linewidth=4)\nplt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])\nplt.title('Target-' + str(target))","95061bdc":"## Model Building"}}