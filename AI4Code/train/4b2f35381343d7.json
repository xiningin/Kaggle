{"cell_type":{"1aee8408":"code","77fa2158":"code","a288777b":"code","f4431f0b":"code","829e34cf":"code","140b0f86":"code","cf52b1b3":"code","4ed952b3":"code","b741cccc":"code","b4c82a52":"code","f1c34726":"code","1b98ad79":"code","e374ee46":"code","5f957cc8":"code","a0682a09":"code","a43e6e15":"code","aa07f04f":"code","576a929f":"code","76d4a4a9":"code","c333d2a5":"code","0f99c366":"code","c0fc8b3c":"code","40e5da6e":"code","a37a7345":"code","14e77699":"code","b274bb14":"markdown","7695d8f2":"markdown","b30b3a08":"markdown","888abb59":"markdown","8678b338":"markdown","2df5749e":"markdown","973ed660":"markdown","a6ead73d":"markdown","0f6bc60e":"markdown","b45d0b58":"markdown","88f5f9c8":"markdown","5e10a552":"markdown","b71a296d":"markdown","fa737033":"markdown"},"source":{"1aee8408":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv),\nimport types\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","77fa2158":"countryData = pd.read_csv(\"..\/input\/countries of the world.csv\")","a288777b":"countryData.info()","f4431f0b":"countryData.head(10)","829e34cf":"africaData = countryData[countryData[\"Region\"].str.contains('AFRICA')]\nafricaData = africaData.sort_values([\"GDP ($ per capita)\"],ascending = False)","140b0f86":"trace1 = go.Scatter(\n                    x = africaData[\"GDP ($ per capita)\"],\n                    y = africaData[\"Birthrate\"],\n                    mode = \"lines\",\n                    name = \"Birthrate\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text = africaData.Country)\n\ntrace2 = go.Scatter(\n                    x = africaData[\"GDP ($ per capita)\"],\n                    y = africaData[\"Deathrate\"],\n                    mode = \"lines+markers\",\n                    name = \"Deathrate\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text = africaData.Country)\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Birth and Death Rates of African Countries', xaxis = dict(title='GDP ($ per capita)', ticklen = 5, zeroline = False))\nfig = dict(data = data, layout = layout)\niplot(fig)","cf52b1b3":"def formatFloat(value):    \n    if isinstance(value, str):\n        return float(value.replace(',', '.'))\n    else:\n        return float(value)","4ed952b3":"\neuropeData = countryData[countryData[\"Region\"].str.contains('EUROPE')]\neuropeData[\"Literacy (%)\"].fillna(0, inplace = True)\neuropeData[\"Literacy (%)\"] = [formatFloat(i) for i in europeData[\"Literacy (%)\"]]\nasiaData = countryData[countryData[\"Region\"].str.contains('ASIA')]\nasiaData[\"Literacy (%)\"].fillna(0, inplace = True)\nasiaData[\"Literacy (%)\"] = [formatFloat(i) for i in asiaData[\"Literacy (%)\"]]\nlatinAmericaData = countryData[countryData[\"Region\"].str.contains('LATIN')]\nlatinAmericaData[\"Literacy (%)\"].fillna(0, inplace = True)\nlatinAmericaData[\"Literacy (%)\"] = [formatFloat(i) for i in latinAmericaData[\"Literacy (%)\"]]","b741cccc":"trace1 = go.Scatter(\n                    x = europeData[\"GDP ($ per capita)\"],\n                    #x = europeData[\"Population\"],\n                    y = europeData[\"Literacy (%)\"],\n                    mode = \"markers\",\n                    name = \"Europe\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text = europeData.Country)\n\ntrace2 = go.Scatter(\n                    x = asiaData[\"GDP ($ per capita)\"],\n                    #x = asiaData[\"Population\"],\n                    y = asiaData[\"Literacy (%)\"],\n                    mode = \"markers\",\n                    name = \"Asia\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text = asiaData.Country)\n\ntrace3 = go.Scatter(\n                    x = latinAmericaData[\"GDP ($ per capita)\"],\n                    #x = latinAmericaData[\"Population\"],\n                    y = latinAmericaData[\"Literacy (%)\"],\n                    mode = \"markers\",\n                    name = \"Latin America\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text = latinAmericaData.Country)\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Europe - Asia - Latin America Literacy Comparison (%)',\n              xaxis = dict(title = 'GDP ($ per capita)', ticklen = 5, zeroline = False),\n              yaxis = dict(title = 'Literacy (%)', ticklen = 5, zeroline = False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","b4c82a52":"areaData = countryData.sort_values([\"Area (sq. mi.)\"],ascending = False).iloc[:5,:]\nareaData[\"Pop. Density (per sq. mi.)\"] = [formatFloat(i) for i in areaData[\"Pop. Density (per sq. mi.)\"]]\nareaData = areaData.sort_values([\"Population\"], ascending = False)\n\nareaData","f1c34726":"trace1 = go.Bar(\n                x = areaData.Country,\n                y = areaData.Birthrate,\n                name = \"Birthrate\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)', line = dict(color = 'rgb(0, 0, 0)', width = 1.5)),\n                text = areaData.Country)\n\ntrace2 = go.Bar(\n                x = areaData.Country,\n                y = areaData.Deathrate,\n                name = \"Deathrate\",\n                marker = dict(color = 'rgba(0, 0, 128, 0.5)', line = dict(color = 'rgb(0, 0, 0)', width = 1.5)),\n                text = areaData.Country)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\", \n                   title = 'Birthrate and Deathrate of Top 5 Most Crowded Countries',\n                   xaxis = dict(title = 'Country', ticklen = 5, zeroline = False),\n                   yaxis = dict(title = 'Rates', ticklen = 5, zeroline = False))\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1b98ad79":"x = areaData.Country\n\ntrace1 = {\n  'x': x,\n  'y': areaData.Birthrate,\n  'name': 'Birthrate',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': areaData.Deathrate,\n  'name': 'Deathrate',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 5 Countries'},\n  'barmode': 'relative',\n  'title': 'Birthrate and Deathrate of Top 5 Most Crowded Countries'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e374ee46":"# data preparation\ncapitalData = countryData.sort_values([\"GDP ($ per capita)\"],ascending = False)\ncapitalData = capitalData.iloc[:5,:]\nlabels = capitalData.Country\ncapitalData.head()","5f957cc8":"# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": capitalData[\"GDP ($ per capita)\"],\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"GDP ($ per capita)\",\n      \"hoverinfo\":\"label + percent + name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Top 5 Countries With Highest GDP\",\n        \"annotations\": [\n            {\"font\": {\"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"GDP ($ per capita)\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","a0682a09":"europeData = europeData.sort_values([\"Area (sq. mi.)\"],ascending = False)\neuropeData[\"Pop. Density (per sq. mi.)\"] = [formatFloat(i) for i in europeData[\"Pop. Density (per sq. mi.)\"]]\neuropeData[\"Arable (%)\"].fillna(0, inplace = True)\neuropeData[\"Arable (%)\"] = [formatFloat(i) for i in europeData[\"Arable (%)\"]]\neuropeData[\"Agriculture\"].fillna(0, inplace = True)\neuropeData[\"Agriculture\"] = [(formatFloat(i)*100) for i in europeData[\"Agriculture\"]]","a43e6e15":"data = [\n    {\n        'y': europeData.Population,\n        'x': europeData[\"Area (sq. mi.)\"],\n        'mode': 'markers',\n        'marker': {\n            'color': europeData[\"Agriculture\"],\n            'size': europeData[\"Arable (%)\"],\n            'showscale': True\n        },\n        \"text\" :  europeData.Country    \n    }\n]\niplot(data)","aa07f04f":"# data preparation\nwesternEuropeData = countryData[countryData[\"Region\"].str.contains('WESTERN EUROPE')]\neasternEuropeData = countryData[countryData[\"Region\"].str.contains('EASTERN EUROPE')]","576a929f":"trace1 = go.Histogram(\n    x = westernEuropeData[\"GDP ($ per capita)\"],\n    opacity = 0.75,\n    name = \"WESTERN EUROPE\",\n    marker = dict(color = 'rgba(171, 50, 96, 0.6)'),\n    text = westernEuropeData.Country)\n\ntrace2 = go.Histogram(\n    x = easternEuropeData[\"GDP ($ per capita)\"],\n    opacity = 0.75,\n    name = \"EASTERN EUROPE\",\n    marker = dict(color = 'rgba(12, 50, 196, 0.6)'),\n    text = easternEuropeData.Country)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = 'overlay',\n                   title = '-----',\n                   xaxis=  dict(title = 'students-staff ratio'),\n                   yaxis = dict(title = 'Count'),\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","76d4a4a9":"regions = countryData.Region\nplt.subplots(figsize = (8, 8))\nwordcloud = WordCloud(\n                          background_color = 'white',\n                          width = 512,\n                          height = 384\n                         ).generate(\"\".join(regions))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\nplt.show()","c333d2a5":"trace1 = go.Box(\n    y = europeData[\"Arable (%)\"],\n    name = 'Population',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\n\ntrace2 = go.Box(\n    y = europeData[\"Agriculture\"],\n    name = 'Area (sq. mi.)',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\n\ndata = [trace1, trace2]\niplot(data)","0f99c366":"# import figure factory\nimport plotly.figure_factory as ff\n\n# prepare data\nscatterData = europeData.loc[:,[\"Arable (%)\", \"Agriculture\", \"Area (sq. mi.)\"]]\nscatterData[\"index\"] = np.arange(1, len(scatterData) + 1)\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(scatterData, \n                                  diag = 'box', \n                                  index = 'index', \n                                  colormap = 'Portland',\n                                  colormap_type = 'cat',\n                                  height = 700, \n                                  width = 700)\niplot(fig)","c0fc8b3c":"# data preparation\neuropeData = europeData.sort_values([\"GDP ($ per capita)\"], ascending = False)\n\n# first line plot\ntrace1 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData.Agriculture,\n    name = \"Agriculture\",\n    text = europeData.Country,\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)')\n)\n\n# second line plot\ntrace2 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Arable (%)\"],\n    xaxis = 'x2',\n    yaxis = 'y2',\n    name = \"Arable(%)\",\n    text = europeData.Country,\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)')\n)\n\n# combine trace1 and trace2\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2 = dict(domain = [0.6, 0.95], anchor = 'y2'),\n    yaxis2 = dict(domain = [0.6, 0.95], anchor = 'x2'),\n    title = 'Agriculture and Arable(%) vs GDP of Europen Countries'\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","40e5da6e":"europeData.head()","a37a7345":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Arable (%)\"],\n    z = europeData[\"Agriculture\"],\n    mode = 'markers',\n    text = europeData.Country,\n    marker = dict(\n        size = 10,\n        color = europeData[\"GDP ($ per capita)\"],\n        colorscale = 'Bluered'\n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin = dict(\n        l = 0,\n        r = 0,\n        b = 0,\n        t = 0  \n    )    \n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","14e77699":"trace1 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Arable (%)\"],\n    text = europeData.Country,\n    name = \"Arable (%)\"\n)\n\ntrace2 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Agriculture\"],\n    xaxis = 'x2',\n    yaxis = 'y2',\n    text = europeData.Country,\n    name = \"Agriculture\"\n)\n\ntrace3 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Area (sq. mi.)\"],\n    xaxis = 'x3',\n    yaxis = 'y3',\n    text = europeData.Country,\n    name = \"Area (sq. mi.)\"\n)\n\ntrace4 = go.Scatter(\n    x = europeData[\"GDP ($ per capita)\"],\n    y = europeData[\"Population\"],\n    xaxis = 'x4',\n    yaxis = 'y4',\n    text = europeData.Country,\n    name = \"Population\"\n)\n\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis = dict(\n        domain = [0, 0.45]\n    ),\n    yaxis= dict(\n        domain = [0, 0.45]\n    ),\n    xaxis2 = dict(\n        domain = [0.55, 1]\n    ),\n    yaxis2 = dict(\n        domain = [0, 0.45],\n        anchor = 'x2'\n    ),\n    xaxis3 = dict(\n        domain = [0, 0.45],\n        anchor = 'y3'\n    ),\n    yaxis3 = dict(\n        domain = [0.55, 1]\n    ),\n    xaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'y4'\n    ),\n    yaxis4 = dict(\n        domain = [0.55, 1],\n        anchor = 'x4'\n    ),\n    title = 'Arable (%), Agriculture, Area (sq. mi.) and Population vs GDP ($ per capita) of Europen Countries'\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","b274bb14":"<a id=12><\/a>\n**Agriculture and Arable(%) vs GDP of Europen Countries - Inset Plot **","7695d8f2":"<a id=14><\/a>\n**Arable (%), Agriculture, Area (sq. mi.) and Population vs GDP ($ per capita) of Europen Countries - Multiple Subplots**","b30b3a08":"<a id=\"6\"><\/a> \n**Top 5 Countries With Highest GDP - Pie Chart**","888abb59":"# Countries Data Exploration\nExamples of plotly visualization library usage. This is a self-training for data science and visualization tools. Thank you in advance for your review and comments.\n\n## Index of contents\n\n* Loading Data and checking features\n* [Birth and Death Rates of African Countries - Line Chart](#2)\n* [Europe - Asia - Latin America Literacy Comparison (%) - Scatter Chart](#3)\n* [Birthrate and Deathrate of Top 5 Most Crowded Countries - Group Bar Chart](#4)\n* [Birthrate and Deathrate of Top 5 Most Crowded Countries - Relative Bar Chart](#5)\n* [Top 5 Countries With Highest GDP - Pie Chart](#6)\n* [Europen Countries Population- Area and Agriculture\/Arable Scale-Bubble Chart](#7)\n* [GDP ($ per capita) Comparison of Eastern and Western Europe](#8)\n* [Word Cloud of Regions](#9)\n* [Europen Countries Arable (%) and Agriculture - BoxPlot](#10)\n* [Arable (%) , Agriculture, Area (sq. mi.) Covariance - Scatter Matrix](#11)\n* [Agriculture and Arable(%) vs GDP of Europen Countries - Inset Plot](#12)\n* [DP, Arable(%), Agriculture Values of Europen Countries - 3D Scatter Plot](#13)\n* [Arable (%), Agriculture, Area (sq. mi.) and Population vs GDP of Europen Countries - Multiple Subplots](#14)\n","8678b338":"<a id=\"9\"><\/a> \n**Word Cloud of Regions**","2df5749e":"<a id=\"5\"><\/a> \n**Birthrate and Deathrate of Top 5 Most Crowded Countries - Relative Bar Chart**","973ed660":"<a id=\"3\"><\/a> \n**Europe - Asia - Latin America Literacy Comparison (%) - Scatter Chart**","a6ead73d":"<a id=\"4\"><\/a> \n**Birthrate and Deathrate of Top 5 Most Crowded Countries - Group Bar Chart**","0f6bc60e":"<a id=\"10\"><\/a> \n**Europen Countries Arable (%) and Agriculture - BoxPlot**","b45d0b58":"<a id=\"11\"><\/a> \n**Arable (%) , Agriculture, Area (sq. mi.) Covariance - Scatter Matrix**","88f5f9c8":"<a id=\"8\"><\/a> \n**GDP ($ per capita) Comparison of Eastern and Western Europe**","5e10a552":"<a id=\"7\"><\/a> \n**Europen Countries Population- Area and Agriculture\/Arable Scale-Bubble Chart**","b71a296d":"<a id=13><\/a>\n**GDP, Arable(%), Agriculture Values of Europen Countries - 3D Scatter Plot**","fa737033":"<a id=\"2\"><\/a> \n**Birth and Death Rates of African Countries - Line Chart**"}}