{"cell_type":{"ce9b25d4":"code","7b577ebc":"code","ec5bdc50":"code","c3dbb5f3":"code","eec7c78f":"code","0455ff9d":"code","e4fbaebf":"code","0f1677a4":"code","20a5806f":"code","964b14ed":"code","8bb67fd6":"code","7bf8419c":"code","ad814c59":"code","3d4b9410":"code","8f193b7a":"code","27e25877":"markdown","c593ad03":"markdown","723cba44":"markdown","83acde5b":"markdown","aee37670":"markdown","82c38151":"markdown","0a60945e":"markdown","88fb714f":"markdown","f940155d":"markdown","e4360867":"markdown","fede28f8":"markdown","6d2f3cb9":"markdown","83f3e4e9":"markdown","b86146ed":"markdown","b5b4ab7d":"markdown"},"source":{"ce9b25d4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization tools\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7b577ebc":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","ec5bdc50":"df.sample(5)","c3dbb5f3":"df.info()","eec7c78f":"report = pp.ProfileReport(df)\n\nreport.to_file(\"report.html\")\n\nreport","0455ff9d":"import missingno as msno\nmsno.matrix(df)\nplt.show()","e4fbaebf":"f,ax = plt.subplots(figsize=(25, 15))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","0f1677a4":"X=df.iloc[:, 0:13]\nX.head()","20a5806f":"y=df.iloc[:,-1]\ny.head()","964b14ed":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\nX = scaler.transform(X)","8bb67fd6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","7bf8419c":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)","ad814c59":"print('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))","3d4b9410":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(cm, annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.0f',ax=ax)\nplt.show()\nplt.savefig('ConfusionMatrix.png')","8f193b7a":"from sklearn.metrics import  f1_score\nf1_score = f1_score(y_test, y_pred)\nprint(\"F1 Score:\")\nprint(f1_score)","27e25877":"# Thank You\n\nIf you have any suggestion or advice or feedback, I will be very appreciated to hear them.\n### Also there are other kernels\n* [FIFA 19 Player Data Analysis and Visualization EDA](https:\/\/www.kaggle.com\/ismailsefa\/f-fa-19-player-data-analysis-and-visualization-eda)\n* [Crimes Data Analysis and Visualzation (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/crimes-data-analysis-and-visualzation-eda)\n* [Google Play Store Apps Data Analysis (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/google-play-store-apps-data-analysis-eda)\n* [World Happiness Data Analysis and Visualization](https:\/\/www.kaggle.com\/ismailsefa\/world-happiness-data-analysis-and-visualization)\n* [Used Cars Data Analysis and Visualization (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/used-cars-data-analysis-and-visualization-eda)\n* [Gender Recognition by Voice Machine Learning SVM](https:\/\/www.kaggle.com\/ismailsefa\/gender-recognition-by-voice-machine-learning-svm)\n* [Iris Species Classify Machine Learning KNN](https:\/\/www.kaggle.com\/ismailsefa\/iris-species-classify-machine-learning-knn)\n* [Breast Cancer Diagnostic Machine Learning R-Forest](https:\/\/www.kaggle.com\/ismailsefa\/breast-cancer-diagnostic-machine-learning-r-forest)\n* [Heart Disease Predic Machine Learning Naive Bayes](https:\/\/www.kaggle.com\/ismailsefa\/heart-disease-predic-machine-learning-naive-bayes)\n* [Mushroom Classify Machine Learning Decision Tree](https:\/\/www.kaggle.com\/ismailsefa\/mushroom-classify-machine-learning-decision-tree)","c593ad03":"# Seaborn - Heatmap\n### Relationship between columns\n* 01 --> Direct proportion\n* 00 --> No relationship\n* -1 --> \u0130nverse proportion","723cba44":"# Accuracy Score","83acde5b":"# Heart Disease Predic Machine Learning Naive Bayes","aee37670":"# Pandas Profiling Report","82c38151":"# Build Naive Bayes Model with Default Hyperparameter","0a60945e":"# Separating Features and Labels","88fb714f":"### Used Libraries\n1. NumPy (Numerical Python)\n2. Pandas\n3. Matplotlib\n4. Seaborn\n5. Sckit learn\n6. Missingno","f940155d":"# Missingno - Missing Data","e4360867":"# F1 Score","fede28f8":"# Splitting Dataset into Training Set and Testing Set","6d2f3cb9":"# Confusion Matrix with Seaborn - Heatmap","83f3e4e9":"### Content:\n1. Pandas Profiling Report\n2. Missingo - Missing Data\n3. Seaborn - Heatmap\n4. Separating Features and Labels\n5. Data Standardisation\n6. Splitting Dataset into Training Set and Testing Set\n7. Build Naive Bayes Model with Default Hyperparameter\n8. Accuracy Score\n9. Confusion Matrix with Seaborn - Heatmap\n10. F1 Score","b86146ed":"### Reading Data","b5b4ab7d":"# Data Standardisation"}}