{"cell_type":{"1e508864":"code","a006e65a":"code","723f65ca":"code","de9e0c1b":"code","16000f7c":"code","10ddc7f4":"code","2ac9a34e":"code","6c6f2521":"code","91a3a6c2":"code","e3371cfe":"code","8e6d1a52":"code","c2bbb62a":"code","b010f45e":"code","02453752":"code","a55f201f":"code","13104e71":"markdown","b8148f69":"markdown","a2de8e6e":"markdown","49efe765":"markdown","3d2e848a":"markdown","0297a3bd":"markdown","e5d32513":"markdown","614273c1":"markdown"},"source":{"1e508864":"!pip install h5py scikit-optimize","a006e65a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom skopt import gp_minimize\n%matplotlib inline","723f65ca":"df = pd.read_csv('..\/input\/zmumu-dataset\/Zmumu.csv')\ndf.shape","de9e0c1b":"df['M'] = np.sqrt(2 * df['pt1'] * df['pt2'] * (np.cosh(df['eta1'] - df['eta2']) - np.cos(df['phi1'] - df['phi2'])))\ndf.head(2)","16000f7c":"def plot_mass(mass, bins_count=100):\n    y, x = np.histogram(mass, bins=bins_count, density=False)\n    err = np.sqrt(y)\n\n    fig = plt.figure(figsize=(15,7))\n    plt.title('Z mass', fontsize=20)\n    plt.xlabel(\"$m_{\\mu\\mu}$ [GeV]\", fontsize=20)\n    plt.ylabel(\"Number of events\", fontsize=20)\n    plt.errorbar(x[:-1], y, yerr=err, fmt='o', color='red', ecolor='grey', capthick=0.5, zorder=1, label=\"data\")\n    return y, x","10ddc7f4":"plot_mass(df.M);","2ac9a34e":"df_sign = None\ndf_isolation = None \ndf = df","6c6f2521":"plot_mass(df.M);","91a3a6c2":"def model_predict(params, X):\n    m0, sigma, ampl, bck = params\n    return bck + ampl \/ (sigma * np.sqrt(2 * np.pi)) * np.exp((-1) * (X - m0)**2 \/ (2 * sigma**2))","e3371cfe":"def model_loss(params, X, y):\n#     y, x = np.histogram(mass, bins=bins_count, density=False)\n#     residuals = model_predict(params, (x[1:] + x[:-1])\/2) - y \n    residuals = y - model_predict(params, X)\n    return np.sum(residuals**2) \/ len(residuals)","8e6d1a52":"def plot_mass_with_model(params, mass, bins_count=100):\n    y, X = plot_mass(mass, bins_count=bins_count)\n    X = (X[1:] + X[:-1]) \/ 2\n    error = model_loss(params, X, y)\n    plt.plot(X, model_predict(params, X), color='blue', linewidth=3.0, zorder=2, label=\"fit, loss=%.2f\" % error)\n    plt.legend(fontsize='x-large')","c2bbb62a":"from tqdm import tqdm\nfrom skopt import Optimizer\n\nsearch_space = [(90.0, 93.0), # m0 range\n    (0.5, 10.0), # sigma range\n    (2900, 2925), # amplitude range\n    (0, 50) # bck range\n    ]\ny, X = np.histogram(df.M, bins=120, density=False)\nX = (X[1:] + X[:-1]) \/ 2\nopt = Optimizer(search_space, base_estimator=\"GP\", acq_func=\"EI\", acq_optimizer=\"lbfgs\")","b010f45e":"from skopt.utils import create_result\nfor i in tqdm(range(50)):\n    next_x = opt.ask()\n    f_val = model_loss(next_x, X, y)\n    opt.tell(next_x, f_val)\n    \nres = create_result(Xi=opt.Xi, yi=opt.yi, space=opt.space,\n                         rng=opt.rng, models=opt.models)\n","02453752":"import skopt.plots\nskopt.plots.plot_convergence(res)\nprint (list(zip([\"m0\", \"sigma\", \"ampl\", \"bck\"], res.x)))\n","a55f201f":"plot_mass_with_model(res.x, df.M, bins_count=120)","13104e71":"Installing skopt","b8148f69":"##Automatically fitting the model parameters","a2de8e6e":"**Reading the Dataset**","49efe765":"##**Importing Libraries**","3d2e848a":"#**Mass Measurement of Z Boson**","0297a3bd":"##**Parameterized Model**","e5d32513":"##**The Working Model**","614273c1":"#**RESULTS** on how well the prediction fits the data"}}