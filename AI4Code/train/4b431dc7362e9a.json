{"cell_type":{"4856c377":"code","232f82a7":"code","9db1a448":"code","12f57e01":"code","e5a8b6e8":"code","801c901c":"code","b116f9bc":"code","3216098b":"code","36dc7e19":"code","f230d1f8":"code","5af79d42":"code","118adc36":"code","3dafe8e2":"code","4611ad6e":"code","631ec275":"code","6524f025":"code","0aa0aacf":"code","8fae6422":"code","e5a709fd":"code","568d469b":"code","619fff81":"code","816a19aa":"code","ae99e3e1":"code","e157ca00":"code","4f6bb7dc":"code","5288a317":"code","931f4d4b":"code","bbde3fa6":"code","83154a84":"code","a21d4ee0":"code","ec207ec6":"code","6b91d001":"code","603d3362":"code","89d81555":"code","e7e54cab":"code","494e0154":"code","942b5171":"code","b672bb5d":"code","1557fe75":"code","b3d6b8db":"code","1ba69976":"code","f707670e":"code","8f236e94":"code","badf8163":"code","72940823":"code","d351b054":"code","c831a42e":"code","1ae77252":"code","ffe17519":"code","d510ad64":"code","bf6712a7":"code","03ee7310":"code","4e5953f9":"code","bdcadaa8":"markdown","f265c2fe":"markdown","cacc4da3":"markdown","5fa1e010":"markdown","638a65ea":"markdown","3a2d52c5":"markdown","ba2047d9":"markdown","f279824d":"markdown","7016d6ea":"markdown","46fd85f1":"markdown","afeb51f6":"markdown","509d0a7b":"markdown","0876f904":"markdown","3c7bd655":"markdown","3ba70ba2":"markdown","2a5a24b9":"markdown","0282f557":"markdown","e3823a42":"markdown","f9d3a9fe":"markdown","593162c8":"markdown","0f776ac0":"markdown","dccf159f":"markdown"},"source":{"4856c377":"# Magic\n# %matplotlib inline\n\n# Utility Libraries\nfrom datetime import datetime\nimport pytz\n\n# HTML \nfrom IPython.display import HTML\n\n# Computation Libraries\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as stats\nfrom scipy.spatial.distance import pdist, squareform\n\n# Plotting libraries\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation, rc\nfrom matplotlib.patches import Rectangle, Arrow\n\n# Graph Libraries\nimport networkx as nx","232f82a7":"path_shared = '\/kaggle\/input\/nfl-big-data-bowl-2021\/{}'\n\ngames_df = pd.read_csv(path_shared.format('games.csv'))\nplays_df = pd.read_csv(path_shared.format('plays.csv'))\nplayers_df = pd.read_csv(path_shared.format('players.csv'))\nweek_df = pd.read_csv(path_shared.format('week1.csv'))","9db1a448":"# Select the game and play that you wish to see in week 1\n\ngame_idx = 5\nplay_idx = -15\n\nunique_game_ids = week_df.gameId.unique()\nunique_play_ids = week_df[week_df.gameId == unique_game_ids[game_idx]].playId.unique()\n\nplay_df = week_df[week_df.playId == unique_play_ids[play_idx]].sort_values(by = 'time')\nplay_df.head()","12f57e01":"class AnimatePlay:\n    def __init__(self, play_df, plot_size_len) -> None:\n        \"\"\"Initializes the datasets used to animate the play.\n\n        Parameters\n        ----------\n        play_df : DataFrame\n            Dataframe corresponding to the play information for the play that requires\n            animation. This data will come from the weeks dataframe and contains position\n            and velocity information for each of the players and the football.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self._MAX_FIELD_Y = 53.3\n        self._MAX_FIELD_X = 120\n        self._MAX_FIELD_PLAYERS = 22\n        \n        self._CPLT = sns.color_palette(\"husl\", 2)\n        self._frame_data = play_df\n        self._times = sorted(play_df.time.unique())\n        self._stream = self.data_stream()\n        \n        self._date_format = \"%Y-%m-%dT%H:%M:%S.%fZ\" \n        self._mean_interval_ms = np.mean([delta.microseconds\/1000 for delta in np.diff(np.array([pytz.timezone('US\/Eastern').localize(datetime.strptime(date_string, self._date_format)) for date_string in self._times]))])\n        \n        self._fig = plt.figure(figsize = (plot_size_len, plot_size_len*(self._MAX_FIELD_Y\/self._MAX_FIELD_X)))\n\n        self._ax_field = plt.gca()\n        \n        self._ax_home = self._ax_field.twinx()\n        self._ax_away = self._ax_field.twinx()\n        self._ax_jersey = self._ax_field.twinx()\n\n        self.ani = animation.FuncAnimation(self._fig, self.update, frames=len(self._times), interval = self._mean_interval_ms, \n                                          init_func=self.setup_plot, blit=False)\n        \n        plt.close()\n       \n    @staticmethod\n    def set_axis_plots(ax, max_x, max_y) -> None:\n        ax.xaxis.set_visible(False)\n        ax.yaxis.set_visible(False)\n\n        ax.set_xlim([0, max_x])\n        ax.set_ylim([0, max_y])\n        \n    @staticmethod\n    def convert_orientation(x):\n        return (-x + 90)%360\n    \n    @staticmethod\n    def polar_to_z(r, theta):\n        return r * np.exp( 1j * theta)\n    \n    @staticmethod\n    def deg_to_rad(deg):\n        return deg*np.pi\/180\n        \n    def data_stream(self):\n        for time in self._times:\n            yield self._frame_data[self._frame_data.time == time]\n    \n    def setup_plot(self): \n        self.set_axis_plots(self._ax_field, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n#         ball_snap_df = self._frame_data[(self._frame_data.event == 'ball_snap') & (self._frame_data.team == 'football')]\n#         self._ax_field.axvline(ball_snap_df.x.to_numpy()[0], color = 'k', linestyle = '--')\n        \n        self.set_axis_plots(self._ax_home, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_away, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_jersey, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        for idx in range(10,120,10):\n            self._ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n            \n        self._scat_field = self._ax_field.scatter([], [], s = 100, color = 'black')\n        self._scat_home = self._ax_home.scatter([], [], s = 500, color = self._CPLT[0], edgecolors = 'k')\n        self._scat_away = self._ax_away.scatter([], [], s = 500, color = self._CPLT[1], edgecolors = 'k')\n        \n        self._scat_jersey_list = []\n        self._scat_number_list = []\n        self._scat_name_list = []\n        self._a_dir_list = []\n        self._a_or_list = []\n        for _ in range(self._MAX_FIELD_PLAYERS):\n            self._scat_jersey_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white'))\n            self._scat_number_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n            self._scat_name_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n            \n            self._a_dir_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_or_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            \n        return (self._scat_field, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n        \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'football':\n                self._scat_field.set_offsets(np.hstack([label_data.x, label_data.y]))\n            elif label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        for (index, row) in pos_df[pos_df.jerseyNumber.notnull()].reset_index().iterrows():\n            self._scat_jersey_list[index].set_position((row.x, row.y))\n            self._scat_jersey_list[index].set_text(row.position)\n            self._scat_number_list[index].set_position((row.x, row.y+1.9))\n            self._scat_number_list[index].set_text(int(row.jerseyNumber))\n            self._scat_name_list[index].set_position((row.x, row.y-1.9))\n            self._scat_name_list[index].set_text(row.displayName.split()[-1])\n            \n            player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n            player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n            player_speed = row.s\n            \n            player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n            player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n                \n        \n        return (self._scat_field, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)","e5a8b6e8":"animated_play = AnimatePlay(play_df, 20)\nHTML(animated_play.ani.to_jshtml())","801c901c":"# Player positions\nplayer_throw = np.array([0, 0])\nplayer_catch = np.array([5, 0])\n\n# Setup required parameters of multivariate normal\nsigma = np.array([[1**2, 0], [0, 2**2]])\nmu = player_catch\n\n# Setup Random Variable with underlying distribution of multivariate normal\nrv = stats.multivariate_normal(mu, sigma)\n\n# Create grid of points to pass into multivariate normal\nx, y = np.mgrid[-5:10:.01, -5:5:.01]\npos = np.dstack((x, y))\n\n# Plot players and \nfig = plt.figure(figsize = (10, 10))\nax = plt.gca()\nax_influence = ax.twinx()\n\n# Plot the figure\nax_influence.contourf(x, y, rv.pdf(pos), alpha = 0.3, cmap = 'Reds')\n\nax.scatter(player_throw[0], player_throw[1], s = 300, color = 'k', label = 'thrower')\nax.scatter(player_catch[0], player_catch[1], s = 300, color = 'r', label = 'receiver')\n\nax.set_xlim([-5, 10])\nax.set_ylim([-5, 5])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\nax_influence.yaxis.set_visible(False)\n\nax.set\n\nfig.show()","b116f9bc":"# Player positions\nplayer_throw = np.array([0, 0])\nplayer_catch = np.array([5, 0])\n\n# Setup required parameters of multivariate normal\nsigma = np.array([[1**2, 0], [0, 2**2]])\nmu = player_catch\n\nsigma_throw = np.array([[1**2, 0], [0, 1**2]])\nmu_throw = player_throw\n\n# Setup Random Variable with underlying distribution of multivariate normal\nrv = stats.multivariate_normal(mu, sigma)\nrv_throw = stats.multivariate_normal(mu_throw, sigma_throw)\n\n# Create grid of points to pass into multivariate normal\nx, y = np.mgrid[-5:10:.01, -5:5:.01]\npos = np.dstack((x, y))\n\n# Plot players and \nfig = plt.figure(figsize = (10, 10))\nax = plt.gca()\nax_influence = ax.twinx()\n\n# Plot the figure\nax_influence.contourf(x, y, rv.pdf(pos), alpha = 0.3, cmap = 'Reds')\nax_influence.contourf(x, y, rv_throw.pdf(pos), alpha = 0.3, cmap = 'Greys')\n\n\nax.scatter(player_throw[0], player_throw[1], s = 300, color = 'k', label = 'thrower')\nax.scatter(player_catch[0], player_catch[1], s = 300, color = 'r', label = 'receiver')\n\nax.set_xlim([-5, 10])\nax.set_ylim([-5, 5])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\nax_influence.yaxis.set_visible(False)\n\nax.set\n\nfig.show()","3216098b":"x = np.arange(0, 30, 0.1)\n\n@np.vectorize\ndef radius_influence(x):\n    assert x >= 0\n\n    if x <= 18:\n        return 4 + (6\/(18**2))*(x**2)\n    else:\n        return 10\n    \nplt.plot(x, radius_influence(x), 'k')\nplt.xlabel('Distance From Ball')\nplt.ylabel('Influence Radius')\nplt.title('Influence Radius as a function of distance from ball')\n\nplt.show()","36dc7e19":"# Player positions\nplayer_throw = np.array([0, 0])\n\nsigma_throw = np.array([[1**2, 0], [0, 1**2]])\nmu_throw = player_throw\nvel_throw = np.array([6, 0])\n\nmu_throw = mu_throw + 0.5*vel_throw\n\nrv_throw = stats.multivariate_normal(mu_throw, sigma_throw)\n\n# Create grid of points to pass into multivariate normal\nx, y = np.mgrid[-10:10:.01, -10:10:.01]\npos = np.dstack((x, y))\n\n# Plot players and \nfig = plt.figure(figsize = (10, 10))\nax = plt.gca()\nax_influence = ax.twinx()\n\n# Plot the figure\nax_influence.contourf(x, y, rv_throw.pdf(pos), alpha = 0.3, cmap = 'Greys')\n\nax.scatter(player_throw[0], player_throw[1], s = 300, color = 'k', label = 'thrower')\nax.arrow(0, 0, 6, 0, head_width = 0.2, color = 'k')\n\nax.set_xlim([-10, 10])\nax.set_ylim([-10, 10])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\nax_influence.yaxis.set_visible(False)\n\nax.set\n\nfig.show()","f230d1f8":"x = np.arange(0,13,0.1)\n\nplt.plot(x\/13, 'k', label = 'linear')\nplt.plot(x**2\/13**2, 'r', label = 'exponential')\n\nplt.legend()\n\nplt.show()","5af79d42":"def speed_weighting(s):\n    return (s**2)\/(11.3**2)\n\nplayer_speed = 6\n\n# Player positions\nplayer_throw = np.array([0, 0])\n\nsigma_throw = np.array([[(radius_influence(0) + radius_influence(0)*speed_weighting(player_speed))\/2, 0], [0, (radius_influence(0) - radius_influence(0)*speed_weighting(player_speed))\/2]])\nmu_throw = player_throw\nvel_throw = np.array([player_speed, 0])\n\nmu_throw = mu_throw + 0.5*vel_throw\n\nrv_throw = stats.multivariate_normal(mu_throw, sigma_throw)\n\n# Create grid of points to pass into multivariate normal\nx, y = np.mgrid[-10:10:.01, -10:10:.01]\npos = np.dstack((x, y))\n\n# Plot players and \nfig = plt.figure(figsize = (10, 10))\nax = plt.gca()\nax_influence = ax.twinx()\n\n# Plot the figure\nax_influence.contourf(x, y, rv_throw.pdf(pos), alpha = 0.3, cmap = 'Greys')\n\nax.scatter(player_throw[0], player_throw[1], s = 300, color = 'k', label = 'thrower')\nax.arrow(0, 0, player_speed, 0, head_width = 0.2, color = 'k')\n\nax.set_xlim([-10, 10])\nax.set_ylim([-10, 10])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\nax_influence.yaxis.set_visible(False)\n\nax.set\n\nfig.show()","118adc36":"fig = plt.figure(figsize = (10, 10))\nax = plt.gca()\n\ntheta = np.pi\/4\n\nax.arrow(0,0,1,0, color = 'k', head_width = 0.05)\nax.arrow(0,0,0,1, color = 'k', head_width = 0.05)\nax.arrow(0,0,np.cos(theta),np.sin(theta), color = 'r', head_width = 0.05)\nax.arrow(0,0,-np.sin(theta),np.cos(theta), color = 'r', head_width = 0.05)\n\nax.set_xlim([-1.5, 1.5])\nax.set_ylim([-1.5, 1.5])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\n\nfig.show()\n","3dafe8e2":"def speed_weighting(s):\n    return (s**2)\/(11.3**2)\n\nplayer_speed = 6\ninfluence_rad = np.pi\/4\n\n# Player positions\nplayer_throw = np.array([0, 0])\n\nsigma_throw = np.array([[(radius_influence(0) + radius_influence(0)*speed_weighting(player_speed))\/2, 0], [0, (radius_influence(0) - radius_influence(0)*speed_weighting(player_speed))\/2]])\nmu_throw = player_throw\nvel_throw = np.array([np.sqrt(18), np.sqrt(18)])\n\nR = np.array([[np.cos(influence_rad), -np.sin(influence_rad)],[np.sin(influence_rad), np.cos(influence_rad)]])\n\nsigma_rotated = R@sigma_throw@R.T\n\nmu_throw = mu_throw + 0.5*vel_throw\n\n# rv_throw = stats.multivariate_normal(mu_throw, sigma_throw)\nrv_throw = stats.multivariate_normal(mu_throw, sigma_rotated)\n\n# Create grid of points to pass into multivariate normal\nx, y = np.mgrid[-10:10:.01, -10:10:.01]\npos = np.dstack((x, y))\n\n# Plot players and \nfig = plt.figure(figsize = (10, 10))\nax = plt.gca()\nax_influence = ax.twinx()\n\n# Plot the figure\nax_influence.contourf(x, y, rv_throw.pdf(pos), alpha = 0.3, cmap = 'Reds')\n\nax.scatter(player_throw[0], player_throw[1], s = 300, color = 'r', label = 'thrower')\nax.arrow(0, 0, vel_throw[0], vel_throw[1], head_width = 0.2, color = 'r')\n\nax.set_xlim([-10, 10])\nax.set_ylim([-10, 10])\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\nax_influence.yaxis.set_visible(False)\n\nax.set\n\nfig.show()","4611ad6e":"class AnimatePlayPitchControl(AnimatePlay):\n    def __init__(self, play_df, plot_size_len, show_control = True) -> None:\n        super().__init__(play_df, plot_size_len)\n        \"\"\"Initializes the datasets used to animate the play.\n\n        Parameters\n        ----------\n        play_df : DataFrame\n            Dataframe corresponding to the play information for the play that requires\n            animation. This data will come from the weeks dataframe and contains position\n            and velocity information for each of the players and the football.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self._MAX_PLAYER_SPEED = 11.3\n        self._X, self._Y, self._pos = self.generate_data_grid()\n        \n        self._ax_football = self._ax_field.twinx()\n        \n        self._show_control = show_control\n        plt.close()\n    \n    @staticmethod\n    @np.vectorize\n    def radius_influence(x):\n        assert x >= 0\n\n        if x <= 18:\n            return 4 + (6\/(18**2))*(x**2)\n        else:\n            return 10\n        \n    def generate_data_grid(self, N = 120):\n        # Our 2-dimensional distribution will be over variables X and Y\n        X = np.linspace(0, self._MAX_FIELD_X, N)\n        Y = np.linspace(0, self._MAX_FIELD_Y, N)\n        X, Y = np.meshgrid(X, Y)\n\n        # # Mean vector and covariance matrix\n        # mu = np.array([0., 1.])\n        # Sigma = np.array([[ 1. , -0.5], [-0.5,  1.5]])\n\n        # Pack X and Y into a single 3-dimensional array\n        pos = np.empty(X.shape + (2,))\n        pos[:, :, 0] = X\n        pos[:, :, 1] = Y\n        \n        return X, Y, pos\n    \n    @staticmethod\n    def sigmoid(x, k):\n        return 1 \/ (1 + np.exp(-k*x))\n\n    @staticmethod\n    def weighted_angle(x1, x2, w):\n        def normalize(v):\n            norm=np.linalg.norm(v, ord=1)\n            if norm==0:\n                norm=np.finfo(v.dtype).eps\n            return v\/norm\n\n        norm_weighted = w*normalize(x1) + (1-w)*normalize(x2)\n\n        return np.arctan2(norm_weighted[1], norm_weighted[0]) % (2*np.pi)\n        \n    @staticmethod\n    def multivariate_gaussian(pos, mu, Sigma):\n        \"\"\"Return the multivariate Gaussian distribution on array pos.\n\n        pos is an array constructed by packing the meshed arrays of variables\n        x_1, x_2, x_3, ..., x_k into its _last_ dimension.\n\n        \"\"\"\n\n        n = mu.shape[0]\n        Sigma_det = np.linalg.det(Sigma)\n        Sigma_inv = np.linalg.inv(Sigma)\n        N = np.sqrt((2*np.pi)**n * Sigma_det)\n        # This einsum call calculates (x-mu)T.Sigma-1.(x-mu) in a vectorized\n        # way across all the input variables.\n        fac = np.einsum('...k,kl,...l->...', pos-mu, Sigma_inv, pos-mu)\n\n        return np.exp(-fac \/ 2) \/ N\n        \n    def generate_sigma(self, influence_rad, player_speed, distance_from_football):\n        R = np.array([[np.cos(influence_rad), -np.sin(influence_rad)],[np.sin(influence_rad), np.cos(influence_rad)]])\n\n        speed_ratio = (player_speed**2)\/(self._MAX_PLAYER_SPEED**2)\n\n        S = np.array([[self.radius_influence(distance_from_football) + (self.radius_influence(distance_from_football)*speed_ratio), 0], \n        [0, self.radius_influence(distance_from_football) - (self.radius_influence(distance_from_football)*speed_ratio)]])\n        \n        return R@(S**2)@R.T\n    \n    def generate_mu(self, player_position, player_vel):\n        return player_position + 0.5*player_vel\n    \n    def setup_plot(self): \n        self.set_axis_plots(self._ax_field, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        ball_snap_df = self._frame_data[(self._frame_data.event == 'ball_snap') & (self._frame_data.team == 'football')]\n        self._ax_field.axvline(ball_snap_df.x.to_numpy()[0], color = 'k', linestyle = '--')\n        \n        self.set_axis_plots(self._ax_home, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_away, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_jersey, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        self.set_axis_plots(self._ax_football, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \n        for idx in range(10,120,10):\n            self._ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n            \n        self._scat_football = self._ax_football.scatter([], [], s = 100, color = 'black')\n        self._scat_home = self._ax_home.scatter([], [], s = 500, color = self._CPLT[0], edgecolors = 'k')\n        self._scat_away = self._ax_away.scatter([], [], s = 500, color = self._CPLT[1], edgecolors = 'k')\n        \n        self._scat_jersey_list = []\n        self._scat_number_list = []\n        self._scat_name_list = []\n        self._a_dir_list = []\n        self._a_or_list = []\n        self._inf_contours_list = []\n        for _ in range(self._MAX_FIELD_PLAYERS):\n            self._scat_jersey_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white'))\n            self._scat_number_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n            self._scat_name_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n            \n            self._a_dir_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            self._a_or_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n            \n            if not self._show_control:\n                self._inf_contours_list.append(self._ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]]))\n        \n        if self._show_control:\n            self._pitch_control_contour = self._ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]])\n            \n        return (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n        \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'football':\n                self._scat_football.set_offsets(np.hstack([label_data.x, label_data.y]))\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        inf_home_team = 0\n        inf_away_team = 0\n        \n        for (index, row) in pos_df[pos_df.jerseyNumber.notnull()].reset_index().iterrows():\n            self._scat_jersey_list[index].set_position((row.x, row.y))\n            self._scat_jersey_list[index].set_text(row.position)\n            self._scat_number_list[index].set_position((row.x, row.y+1.9))\n            self._scat_number_list[index].set_text(int(row.jerseyNumber))\n            self._scat_name_list[index].set_position((row.x, row.y-1.9))\n            self._scat_name_list[index].set_text(row.displayName.split()[-1])\n            \n            player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n            player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n            player_speed = row.s\n            player_position = np.array([row.x, row.y])\n            player_acc = row.a\n            \n            speed_w = player_speed\/self._MAX_PLAYER_SPEED\n            \n            player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n            player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n            \n            influence_rad = self.weighted_angle(player_vel, player_orient, speed_w)\n            \n            distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n            \n            sigma = self.generate_sigma(influence_rad, player_speed, distance_from_football)\n            mu = self.generate_mu(player_position, player_vel)\n            \n            Z = self.multivariate_gaussian(self._pos, mu, sigma)\n            Z_coarse = np.where(Z > 0.001, Z, np.nan)\n            \n            if not self._show_control:\n                for cont_info in self._inf_contours_list[index].collections:\n                    cont_info.remove()\n            \n            if row.team == 'home':\n                if self._show_control:\n                    inf_home_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Reds', levels = 10, alpha = 0.1)\n            elif row.team == 'away':\n                if self._show_control:\n                    inf_away_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Greens', levels = 10, alpha = 0.1)\n        \n        if self._show_control:\n            for cont_info in self._pitch_control_contour.collections:\n                    cont_info.remove()\n                \n            self._pitch_control_contour = self._ax_field.contourf(self._X, self._Y, self.sigmoid(inf_away_team\/len(pos_df[pos_df.team=='away']) - inf_home_team\/len(pos_df[pos_df.team=='home']),k = 1000), levels = 50, cmap='PiYG', vmin = 0.45, vmax = 0.55, alpha = 0.7)\n            \n#             self._fig.colorbar(self._pitch_control_contour, extend='min', shrink=0.9, ax=self._ax_field)\n        \n        return (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)","631ec275":"animated_play = AnimatePlayPitchControl(play_df, 20, show_control=False)\nHTML(animated_play.ani.to_jshtml())","6524f025":"frame_df = play_df[play_df.frameId == 30]\n\noff_team = frame_df[frame_df.position == 'QB']['team'].values[0]\ndef_team = 'home' if off_team == 'away' else 'away'\n\n@np.vectorize\ndef radius_influence(x):\n    assert x >= 0\n\n    if x <= 18:\n        return 4 + (6\/(18**2))*(x**2)\n    else:\n        return 10\n\ndef generate_data_grid(N = 120):\n    # Our 2-dimensional distribution will be over variables X and Y\n    X = np.linspace(0, _MAX_FIELD_X, N)\n    Y = np.linspace(0, _MAX_FIELD_Y, N)\n    X, Y = np.meshgrid(X, Y)\n\n    # # Mean vector and covariance matrix\n    # mu = np.array([0., 1.])\n    # Sigma = np.array([[ 1. , -0.5], [-0.5,  1.5]])\n\n    # Pack X and Y into a single 3-dimensional array\n    pos = np.empty(X.shape + (2,))\n    pos[:, :, 0] = X\n    pos[:, :, 1] = Y\n\n    return X, Y, pos\n\ndef sigmoid(x, k):\n    return 1 \/ (1 + np.exp(-k*x))\n\ndef weighted_angle(x1, x2, w):\n    def normalize(v):\n        norm=np.linalg.norm(v, ord=1)\n        if norm==0:\n            norm=np.finfo(v.dtype).eps\n        return v\/norm\n\n    norm_weighted = w*normalize(x1) + (1-w)*normalize(x2)\n\n    return np.arctan2(norm_weighted[1], norm_weighted[0]) % (2*np.pi)\n\ndef multivariate_gaussian(pos, mu, Sigma):\n    \"\"\"Return the multivariate Gaussian distribution on array pos.\n\n    pos is an array constructed by packing the meshed arrays of variables\n    x_1, x_2, x_3, ..., x_k into its _last_ dimension.\n\n    \"\"\"\n\n    n = mu.shape[0]\n    Sigma_det = np.linalg.det(Sigma)\n    Sigma_inv = np.linalg.inv(Sigma)\n    N = np.sqrt((2*np.pi)**n * Sigma_det)\n    # This einsum call calculates (x-mu)T.Sigma-1.(x-mu) in a vectorized\n    # way across all the input variables.\n    fac = np.einsum('...k,kl,...l->...', pos-mu, Sigma_inv, pos-mu)\n\n    return np.exp(-fac \/ 2) \/ N\n\ndef generate_sigma(influence_rad, player_speed, distance_from_football):\n    R = np.array([[np.cos(influence_rad), -np.sin(influence_rad)],[np.sin(influence_rad), np.cos(influence_rad)]])\n\n    speed_ratio = (player_speed**2)\/(_MAX_PLAYER_SPEED**2)\n\n    S = np.array([[radius_influence(distance_from_football) + (radius_influence(distance_from_football)*speed_ratio), 0], \n    [0, radius_influence(distance_from_football) - (radius_influence(distance_from_football)*speed_ratio)]])\n\n    return R@(S**2)@R.T\n\ndef generate_mu(player_position, player_vel):\n    return player_position + 0.5*player_vel\n\ndef set_axis_plots(ax, max_x, max_y) -> None:\n    ax.xaxis.set_visible(False)\n    ax.yaxis.set_visible(False)\n\n    ax.set_xlim([0, max_x])\n    ax.set_ylim([0, max_y])\n\ndef convert_orientation(x):\n    return (-x + 90)%360\n\ndef polar_to_z(r, theta):\n    return r * np.exp( 1j * theta)\n\ndef deg_to_rad(deg):\n    return deg*np.pi\/180\n\nplot_size_len = 20\n_show_control = False\n\n_MAX_PLAYER_SPEED = 11.3\n_MAX_FIELD_Y = 53.3\n_MAX_FIELD_X = 120\n_MAX_FIELD_PLAYERS = 22\n\n_CPLT = sns.color_palette(\"husl\", 2)\n_frame_data = play_df\n_times = sorted(play_df.time.unique())\n# _stream = data_stream()\n\n_date_format = \"%Y-%m-%dT%H:%M:%S.%fZ\" \n_mean_interval_ms = np.mean([delta.microseconds\/1000 for delta in np.diff(np.array([pytz.timezone('US\/Eastern').localize(datetime.strptime(date_string, _date_format)) for date_string in _times]))])\n\n_fig = plt.figure(figsize = (plot_size_len, plot_size_len*(_MAX_FIELD_Y\/_MAX_FIELD_X)))\n\n_ax_field = plt.gca()\n\n_ax_home = _ax_field.twinx()\n_ax_away = _ax_field.twinx()\n_ax_jersey = _ax_field.twinx()\n\n_X, _Y, _pos = generate_data_grid()\n_ax_football = _ax_field.twinx()\n\nset_axis_plots(_ax_field, _MAX_FIELD_X, _MAX_FIELD_Y)\n        \nball_snap_df = _frame_data[(_frame_data.event == 'ball_snap') & (_frame_data.team == 'football')]\n_ax_field.axvline(ball_snap_df.x.to_numpy()[0], color = 'k', linestyle = '--')\n\nset_axis_plots(_ax_home, _MAX_FIELD_X, _MAX_FIELD_Y)\nset_axis_plots(_ax_away, _MAX_FIELD_X, _MAX_FIELD_Y)\nset_axis_plots(_ax_jersey, _MAX_FIELD_X, _MAX_FIELD_Y)\nset_axis_plots(_ax_football, _MAX_FIELD_X, _MAX_FIELD_Y)\n\nfor idx in range(10,120,10):\n    _ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n    \n_scat_football = _ax_football.scatter([], [], s = 100, color = 'black')\n_scat_home = _ax_home.scatter([], [], s = 500, color = _CPLT[0], edgecolors = 'k')\n_scat_away = _ax_away.scatter([], [], s = 500, color = _CPLT[1], edgecolors = 'k')\n\n_scat_jersey_list = []\n_scat_number_list = []\n_scat_name_list = []\n_scat_prob_list = []\n_a_dir_list = []\n_a_or_list = []\n_inf_contours_list = []\nfor _ in range(_MAX_FIELD_PLAYERS):\n    _scat_jersey_list.append(_ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white'))\n    _scat_number_list.append(_ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n    _scat_name_list.append(_ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n    _scat_prob_list.append(_ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'red'))\n\n    _a_dir_list.append(_ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n    _a_or_list.append(_ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n\n    if not _show_control:\n        _inf_contours_list.append(_ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]]))\n        \npos_df = frame_df\n        \nfor label in pos_df.team.unique():\n    label_data = pos_df[pos_df.team == label]\n\n    if label == 'home':\n        _scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n    elif label == 'away':\n        _scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n    elif label == 'football':\n        _scat_football.set_offsets(np.hstack([label_data.x, label_data.y]))\n\njersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n\ninf_home_team = 0\ninf_away_team = 0\n\noff_team = pos_df[pos_df.position == 'QB']['team'].values[0]\ndef_team = 'home' if off_team == 'away' else 'away'\n\nZ_def = np.zeros((_pos.shape[0], _pos.shape[1]))\n\nZ_off = []\nfor (index, row) in pos_df[pos_df.jerseyNumber.notnull()].sort_values(by = 'displayName').reset_index().iterrows():\n    _scat_jersey_list[index].set_position((row.x, row.y))\n    _scat_jersey_list[index].set_text(row.position)\n    _scat_number_list[index].set_position((row.x, row.y+1.9))\n    _scat_number_list[index].set_text(int(row.jerseyNumber))\n    _scat_name_list[index].set_position((row.x, row.y-1.9))\n    _scat_name_list[index].set_text(row.displayName.split()[-1])\n\n    player_orientation_rad = deg_to_rad(convert_orientation(row.o))\n    player_direction_rad = deg_to_rad(convert_orientation(row.dir))\n    player_speed = row.s\n    player_position = np.array([row.x, row.y])\n    player_acc = row.a\n\n    speed_w = player_speed\/_MAX_PLAYER_SPEED\n\n    player_vel = np.array([np.real(polar_to_z(player_speed, player_direction_rad)), np.imag(polar_to_z(player_speed, player_direction_rad))])\n    player_orient = np.array([np.real(polar_to_z(2, player_orientation_rad)), np.imag(polar_to_z(2, player_orientation_rad))])\n\n    influence_rad = weighted_angle(player_vel, player_orient, speed_w)\n\n    distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n\n    _a_dir_list[index].remove()\n    _a_dir_list[index] = _ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n\n    _a_or_list[index].remove()\n    _a_or_list[index] = _ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n\n    sigma = generate_sigma(influence_rad, player_speed, distance_from_football)\n    mu = generate_mu(player_position, player_vel)\n\n    Z = multivariate_gaussian(_pos, mu, sigma)\n    Z_coarse = np.where(Z > 0.001, Z, np.nan)\n    \n    if row.team == def_team:\n        Z_def += np.where(Z > 0.001, Z, 0)\n        \n    if row.team == off_team and row.position != 'QB':\n        Z_off.append(np.where(Z > 0.001, Z, 0))\n#         print(row.displayName)\n        \n    if row.team == off_team and row.displayName == 'A.J. Green':\n        Z_test = np.where(Z > 0.001, Z, 0)\n#         print(row.displayName)\n\n    if not _show_control:\n        for cont_info in _inf_contours_list[index].collections:\n            cont_info.remove()\n\n    if row.team == 'home':\n        if _show_control:\n            inf_home_team += Z\n        else:\n            _inf_contours_list[index] = _ax_field.contourf(_X, _Y, Z_coarse, cmap='Reds', levels = 10, alpha = 0.1)\n    elif row.team == 'away':\n        if _show_control:\n            inf_away_team += Z\n        else:\n            _inf_contours_list[index] = _ax_field.contourf(_X, _Y, Z_coarse, cmap='Greens', levels = 10, alpha = 0.1)\n\ntot_off_freedom = list(np.clip(np.array(Z_off) - Z_def, 0, None))\ntot_area = np.sum(tot_off_freedom)\n# print(tot_area)\n# for (index, row) in pos_df[pos_df.jerseyNumber.notnull()].reset_index().iterrows():\n#     if row.team == off_team and row.position != 'QB':\n#         tot_area += np.sum(np.clip(np.where(Z > 0.001, Z, 0) - Z_def, 0, None))\n        \nfor (index, row) in pos_df[pos_df.jerseyNumber.notnull()].sort_values(by = 'displayName').reset_index().iterrows():\n    if row.team == off_team and row.position != 'QB':\n        _scat_prob_list[index].set_position((row.x, row.y+3.9))\n        x = np.sum(tot_off_freedom.pop(0))\n#         print(x, \" \", row.displayName)\n        \n        _scat_prob_list[index].set_text(f\"{x\/tot_area:.2f}\")","0aa0aacf":"plt.figure(figsize = (20, 10))\nplt.imshow(np.flip(Z_test, axis = 0), aspect = 'auto')\nplt.imshow(np.clip(np.flip(Z_test - Z_def, axis = 0), 0, None), aspect = 'auto', cmap = 'Greens')\n\nax = plt.gca()\n\nax.xaxis.set_visible(False)\nax.yaxis.set_visible(False)\n\nplt.title(\"Free Area for A.J. Green on Frame 30\")\n\nplt.show()\n\n# print(np.sum(np.clip(np.flip(Z_test - Z_def, axis = 0), 0, None)))","8fae6422":"class AnimatePlayPitchControlProb(AnimatePlayPitchControl):\n    def __init__(self, play_df, plot_size_len, show_control = False) -> None:\n        super().__init__(play_df, plot_size_len, show_control)\n    \n    def setup_plot(self):\n        ax_list = list(super().setup_plot())\n        \n        self._scat_prob_list = []\n        \n        temp_player_df = self._frame_data[self._frame_data.event == 'ball_snap']\n        \n        self._off_team = temp_player_df[temp_player_df.position == 'QB']['team'].values[0]\n        self._def_team = 'home' if self._off_team == 'away' else 'away'\n        \n        for (index, row) in temp_player_df[(temp_player_df.team == self._off_team) & (temp_player_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            self._scat_prob_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'red'))\n        \n        return (*ax_list, *self._scat_prob_list)\n    \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'football':\n                self._scat_football.set_offsets(np.hstack([label_data.x, label_data.y]))\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        inf_home_team = 0\n        inf_away_team = 0\n\n        Z_def = np.zeros((_pos.shape[0], _pos.shape[1]))\n\n        Z_off = []\n        \n        players_df = pos_df[pos_df.jerseyNumber.notnull()].sort_values(by = 'displayName').reset_index()\n        \n        for (index, row) in players_df.iterrows():\n            self._scat_jersey_list[index].set_position((row.x, row.y))\n            self._scat_jersey_list[index].set_text(row.position)\n            self._scat_number_list[index].set_position((row.x, row.y+1.9))\n            self._scat_number_list[index].set_text(int(row.jerseyNumber))\n            self._scat_name_list[index].set_position((row.x, row.y-1.9))\n            self._scat_name_list[index].set_text(row.displayName.split()[-1])\n            \n            player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n            player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n            player_speed = row.s\n            player_position = np.array([row.x, row.y])\n            player_acc = row.a\n            \n            speed_w = player_speed\/self._MAX_PLAYER_SPEED\n            \n            player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n            player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n            \n            influence_rad = self.weighted_angle(player_vel, player_orient, speed_w)\n            \n            distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n            \n            sigma = self.generate_sigma(influence_rad, player_speed, distance_from_football)\n            mu = self.generate_mu(player_position, player_vel)\n            \n            Z = self.multivariate_gaussian(self._pos, mu, sigma)\n            Z_coarse = np.where(Z > 0.001, Z, np.nan)\n            \n            if row.team == self._def_team:\n                Z_def += np.where(Z > 0.001, Z, 0)\n\n            if row.team == self._off_team and row.position != 'QB':\n                Z_off.append(np.where(Z > 0.001, Z, 0))\n            \n            if not self._show_control:\n                for cont_info in self._inf_contours_list[index].collections:\n                    cont_info.remove()\n            \n            if row.team == 'home':\n                if self._show_control:\n                    inf_home_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Reds', levels = 10, alpha = 0.1)\n            elif row.team == 'away':\n                if self._show_control:\n                    inf_away_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Greens', levels = 10, alpha = 0.1)\n        \n        if self._show_control:\n            for cont_info in self._pitch_control_contour.collections:\n                    cont_info.remove()\n                \n            self._pitch_control_contour = self._ax_field.contourf(self._X, self._Y, self.sigmoid(inf_away_team\/len(pos_df[pos_df.team=='away']) - inf_home_team\/len(pos_df[pos_df.team=='home']),k = 1000), levels = 50, cmap='PiYG', vmin = 0.45, vmax = 0.55, alpha = 0.7)\n            \n        tot_off_freedom = list(np.clip(np.array(Z_off) - Z_def, 0, None))\n        tot_area = np.sum(tot_off_freedom)\n        \n        for (index, row) in players_df[(players_df.team == self._off_team) & (players_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            self._scat_prob_list[index].set_position((row.x, row.y+3.9))\n            self._scat_prob_list[index].set_text(f\"{np.sum(tot_off_freedom.pop(0))\/tot_area:.2f}\")\n            \n        return (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list, *self._scat_prob_list)","e5a709fd":"animated_play = AnimatePlayPitchControlProb(play_df, 20, show_control=True)\nHTML(animated_play.ani.to_jshtml())","568d469b":"from scipy.stats import norm\n\nx = np.linspace(-np.pi, np.pi, num = 500)\n\ny_gauss = norm.pdf(x, loc = 0, scale = 0.7)\n\nplt.figure(figsize = (10, 5))\n\nplt.plot(x*180\/np.pi, y_gauss\/np.max(y_gauss), 'r')\n\nplt.xlabel('Degrees')\nplt.ylabel('Weighting')\n\nplt.title(\"QB Viewing Angle Weighting\")\n\nplt.show()","619fff81":"plt.figure(figsize = (20, 10))\n\nax = plt.gca()\nax.plot([0, 1], [0, 1])","816a19aa":"class AnimatePlayPitchControlProbQB(AnimatePlayPitchControlProb):\n    def __init__(self, play_df, plot_size_len, show_control = False) -> None:\n        super().__init__(play_df, plot_size_len, show_control)\n        \n        self._GAUSS_SCALE_RAD = 0.7\n        self._VIEW_ANGLE = 30\n        self._VIEW_WEIGHT_MAX = np.max(norm.pdf(np.linspace(-np.pi, np.pi, num = 500), loc = 0, scale = self._GAUSS_SCALE_RAD))\n        self._QB_VIEW_WEIGHTING = 0.7\n        \n    def setup_plot(self):\n        ax_list = list(super().setup_plot())\n        \n        self._qb_target = self._ax_field.plot([], [], color = 'grey', linewidth = 3)[0]\n        self._qb_target_secondary = self._ax_field.plot([], [], color = 'grey', linestyle = '--')[0]\n        \n        return (*ax_list, self._qb_target, self._qb_target_secondary)\n    \n    @staticmethod\n    def sigmoid(x, a1 = 0.5, a2 = 15):\n        return 1\/(1 + np.exp(-a1*(x - a2)))\n    \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'football':\n                self._scat_football.set_offsets(np.hstack([label_data.x, label_data.y]))\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        inf_home_team = 0\n        inf_away_team = 0\n\n        Z_def = np.zeros((_pos.shape[0], _pos.shape[1]))\n\n        Z_off = []\n        \n        players_df = pos_df[pos_df.jerseyNumber.notnull()].sort_values(by = 'displayName').reset_index()\n        \n        for (index, row) in players_df.iterrows():\n            self._scat_jersey_list[index].set_position((row.x, row.y))\n            self._scat_jersey_list[index].set_text(row.position)\n            self._scat_number_list[index].set_position((row.x, row.y+1.9))\n            self._scat_number_list[index].set_text(int(row.jerseyNumber))\n            self._scat_name_list[index].set_position((row.x, row.y-1.9))\n            self._scat_name_list[index].set_text(row.displayName.split()[-1])\n            \n            player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n            player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n            player_speed = row.s\n            player_position = np.array([row.x, row.y])\n            player_acc = row.a\n            \n            speed_w = player_speed\/self._MAX_PLAYER_SPEED\n            \n            player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n            player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n            \n            influence_rad = self.weighted_angle(player_vel, player_orient, speed_w)\n            \n            distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n            \n            sigma = self.generate_sigma(influence_rad, player_speed, distance_from_football)\n            mu = self.generate_mu(player_position, player_vel)\n            \n            Z = self.multivariate_gaussian(self._pos, mu, sigma)\n            Z_coarse = np.where(Z > 0.001, Z, np.nan)\n            \n            if row.team == self._def_team:\n                Z_def += np.where(Z > 0.001, Z, 0)\n\n            if row.team == self._off_team and row.position != 'QB':\n                Z_off.append(np.where(Z > 0.001, Z, 0))\n                \n            if row.position == 'QB':\n                qb_position = np.array([row.x, row.y])\n                qb_orientation = player_orientation_rad\n                qb_view_orientation = player_orientation_rad + (self.deg_to_rad(self._VIEW_ANGLE))\n                \n#                 print(qb_orientation*180\/np.pi)\n                \n            if not self._show_control:\n                for cont_info in self._inf_contours_list[index].collections:\n                    cont_info.remove()\n            \n            if row.team == 'home':\n                if self._show_control:\n                    inf_home_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Reds', levels = 10, alpha = 0.1)\n            elif row.team == 'away':\n                if self._show_control:\n                    inf_away_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Greens', levels = 10, alpha = 0.1)\n        \n        if self._show_control:\n            for cont_info in self._pitch_control_contour.collections:\n                    cont_info.remove()\n                \n            self._pitch_control_contour = self._ax_field.contourf(self._X, self._Y, self.sigmoid(inf_away_team\/len(pos_df[pos_df.team=='away']) - inf_home_team\/len(pos_df[pos_df.team=='home']),k = 1000), levels = 50, cmap='PiYG', vmin = 0.45, vmax = 0.55, alpha = 0.7)\n            \n        tot_off_freedom = list(np.clip(np.array(Z_off) - Z_def, 0, None))\n        \n        for (index, row) in players_df[(players_df.team == self._off_team) & (players_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            diff_vector = np.array([row.x, row.y]) - qb_position\n            angle_from_qb = self.deg_to_rad(np.arctan2(diff_vector[-1], diff_vector[0])*180\/np.pi)%(2*np.pi)\n            \n#             if row.displayName == 'A.J. Green':\n#                 print(angle_from_qb*180\/np.pi)\n#                 print(self.convert_orientation(np.arctan2(diff_vector[-1], diff_vector[0])*180\/np.pi))\n            \n            weighting = norm.pdf(angle_from_qb, loc = qb_view_orientation, scale = self._GAUSS_SCALE_RAD)\/self._VIEW_WEIGHT_MAX\n        \n            weighting_distance = self.sigmoid(np.linalg.norm(np.array([row.x, row.y]) - qb_position))\n            \n            tot_off_freedom[index] = weighting_distance*((1 - self._QB_VIEW_WEIGHTING)*tot_off_freedom[index] + self._QB_VIEW_WEIGHTING*tot_off_freedom[index]*weighting)\n        \n        tot_area = np.sum(tot_off_freedom)\n        \n        prob_list = []\n        plot_list = []\n        for (index, row) in players_df[(players_df.team == self._off_team) & (players_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            self._scat_prob_list[index].set_position((row.x, row.y+3.9))\n            cur_prob = np.sum(tot_off_freedom.pop(0))\/tot_area\n            prob_list.append(cur_prob)\n            plot_list.append(([row.x, qb_position[0]], [row.y, qb_position[-1]]))\n            self._scat_prob_list[index].set_text(f\"{cur_prob:.2f}\")\n            \n        self._qb_target.set_data(plot_list[np.argsort(prob_list)[-1]][0], plot_list[np.argsort(prob_list)[-1]][1])\n        self._qb_target_secondary.set_data(plot_list[np.argsort(prob_list)[-2]][0], plot_list[np.argsort(prob_list)[-2]][1])\n            \n        return (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list, *self._scat_prob_list, self._qb_target, self._qb_target_secondary)","ae99e3e1":"a1 = 0.5\na2 = 15\n\nx = np.linspace(-10, 40, 100) \nsigmoid = lambda x, a1, a2: 1\/(1 + np.exp(-a1*(x - a2)))\n\nplt.plot(x, sigmoid(x, a1, a2))","e157ca00":"class AnimatePlayPitchControlFullAnnotation(AnimatePlayPitchControlProbQB):\n    def __init__(self, play_df, plot_size_len, show_control = False) -> None:\n        super().__init__(play_df, plot_size_len, show_control)\n        \n        self._OFFENSE_POS = ['OL','OG','LG','RG','C' ,'OT','LT','RT','TE','WR','QB','HB','RB','TB','FB']\n        self._SPECIAL_POS = ['P', 'K', 'LS', 'H']\n        self._DEFENSE_POS = ['SS','FS', 'CB','DB','S','SAF','DE','DT','NT','DL','ILB','OLB','MLB','LB']\n        \n        self._def_player_num = len(self._frame_data[self._frame_data.position.isin(self._DEFENSE_POS)].nflId.unique())\n        self._MAX_COVERAGE = 2 # Max Offensive players a defender can cover\n        self._MAX_TARGETED = self._def_player_num # Max number of defensive players that can target any one offensive player\n        \n#         self._Cov_G = None # Placeholder for graph we will use to assign coverages\n        \n        self._MIN_DIST_FOR_DOUBLE = 10\n        \n        self._Cov_G = nx.DiGraph()\n        \n#         print(self._frame_data.frameId.unique()[:3])\n        \n#         self._frame_data = self._frame_data[self._frame_data.frameId.isin(self._frame_data.frameId.unique()[3:])]\n        \n#         self._GAUSS_SCALE_RAD = 0.7\n#         self._VIEW_ANGLE = 30\n#         self._VIEW_WEIGHT_MAX = np.max(norm.pdf(np.linspace(-np.pi, np.pi, num = 500), loc = 0, scale = self._GAUSS_SCALE_RAD))\n#         self._QB_VIEW_WEIGHTING = 0.7\n        \n    def setup_plot(self):\n        ax_list = list(super().setup_plot())\n        \n#         self._qb_target = self._ax_field.plot([], [], color = 'grey', linewidth = 3)[0]\n#         self._qb_target_secondary = self._ax_field.plot([], [], color = 'grey', linestyle = '--')[0]\n        \n        self._def_coverage_list = []\n        for _ in range(self._def_player_num):\n            for _ in range(self._MAX_COVERAGE):\n                self._def_coverage_list.append(self._ax_field.plot([], [], color = 'k', linestyle = '-', linewidth = 0.5)[0])\n                \n        print(self._def_coverage_list)\n        \n        return (*ax_list, *self._def_coverage_list)\n    \n    @staticmethod\n    def sigmoid(x, a1 = 0.5, a2 = 15):\n        return 1\/(1 + np.exp(-a1*(x - a2)))\n    \n    def update(self, anim_frame):\n        pos_df = next(self._stream)\n        \n        for label in pos_df.team.unique():\n            label_data = pos_df[pos_df.team == label]\n\n            if label == 'home':\n                self._scat_home.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'away':\n                self._scat_away.set_offsets(np.vstack([label_data.x, label_data.y]).T)\n            elif label == 'football':\n                self._scat_football.set_offsets(np.hstack([label_data.x, label_data.y]))\n\n        jersey_df = pos_df[pos_df.jerseyNumber.notnull()]\n        \n        inf_home_team = 0\n        inf_away_team = 0\n\n        Z_def = np.zeros((_pos.shape[0], _pos.shape[1]))\n\n        Z_off = []\n        \n        players_df = pos_df[pos_df.jerseyNumber.notnull()].sort_values(by = 'displayName').reset_index()\n        \n        for (index, row) in players_df.iterrows():\n            self._scat_jersey_list[index].set_position((row.x, row.y))\n            self._scat_jersey_list[index].set_text(row.position)\n            self._scat_number_list[index].set_position((row.x, row.y+1.9))\n            self._scat_number_list[index].set_text(int(row.jerseyNumber))\n            self._scat_name_list[index].set_position((row.x, row.y-1.9))\n            self._scat_name_list[index].set_text(row.displayName.split()[-1])\n            \n            player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n            player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n            player_speed = row.s\n            player_position = np.array([row.x, row.y])\n            player_acc = row.a\n            \n            speed_w = player_speed\/self._MAX_PLAYER_SPEED\n            \n            player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n            player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n            \n            influence_rad = self.weighted_angle(player_vel, player_orient, speed_w)\n            \n            distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n            \n            self._a_dir_list[index].remove()\n            self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n            \n            self._a_or_list[index].remove()\n            self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n            \n            sigma = self.generate_sigma(influence_rad, player_speed, distance_from_football)\n            mu = self.generate_mu(player_position, player_vel)\n            \n            Z = self.multivariate_gaussian(self._pos, mu, sigma)\n            Z_coarse = np.where(Z > 0.001, Z, np.nan)\n            \n            if row.team == self._def_team:\n                Z_def += np.where(Z > 0.001, Z, 0)\n\n            if row.team == self._off_team and row.position != 'QB':\n                Z_off.append(np.where(Z > 0.001, Z, 0))\n                \n            if row.position == 'QB':\n                qb_position = np.array([row.x, row.y])\n                qb_orientation = player_orientation_rad\n                qb_view_orientation = player_orientation_rad + (self.deg_to_rad(self._VIEW_ANGLE))\n                \n#                 print(qb_orientation*180\/np.pi)\n                \n            if not self._show_control:\n                for cont_info in self._inf_contours_list[index].collections:\n                    cont_info.remove()\n            \n            if row.team == 'home':\n                if self._show_control:\n                    inf_home_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Reds', levels = 10, alpha = 0.1)\n            elif row.team == 'away':\n                if self._show_control:\n                    inf_away_team += Z\n                else:\n                    self._inf_contours_list[index] = self._ax_field.contourf(self._X, self._Y, Z_coarse, cmap='Greens', levels = 10, alpha = 0.1)\n        \n        if self._show_control:\n            for cont_info in self._pitch_control_contour.collections:\n                    cont_info.remove()\n                \n            self._pitch_control_contour = self._ax_field.contourf(self._X, self._Y, self.sigmoid(inf_away_team\/len(pos_df[pos_df.team=='away']) - inf_home_team\/len(pos_df[pos_df.team=='home']),k = 1000), levels = 50, cmap='PiYG', vmin = 0.45, vmax = 0.55, alpha = 0.7)\n            \n        tot_off_freedom = list(np.clip(np.array(Z_off) - Z_def, 0, None))\n        \n        for (index, row) in players_df[(players_df.team == self._off_team) & (players_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            diff_vector = np.array([row.x, row.y]) - qb_position\n            angle_from_qb = self.deg_to_rad(np.arctan2(diff_vector[-1], diff_vector[0])*180\/np.pi)%(2*np.pi)\n            \n#             if row.displayName == 'A.J. Green':\n#                 print(angle_from_qb*180\/np.pi)\n#                 print(self.convert_orientation(np.arctan2(diff_vector[-1], diff_vector[0])*180\/np.pi))\n            \n            weighting = norm.pdf(angle_from_qb, loc = qb_view_orientation, scale = self._GAUSS_SCALE_RAD)\/self._VIEW_WEIGHT_MAX\n        \n            weighting_distance = self.sigmoid(np.linalg.norm(np.array([row.x, row.y]) - qb_position))\n            \n            tot_off_freedom[index] = weighting_distance*((1 - self._QB_VIEW_WEIGHTING)*tot_off_freedom[index] + self._QB_VIEW_WEIGHTING*tot_off_freedom[index]*weighting)\n        \n        tot_area = np.sum(tot_off_freedom)\n        \n        prob_list = []\n        plot_list = []\n        for (index, row) in players_df[(players_df.team == self._off_team) & (players_df.position != 'QB')].sort_values(by = 'displayName').reset_index().iterrows():\n            self._scat_prob_list[index].set_position((row.x, row.y+3.9))\n            cur_prob = np.sum(tot_off_freedom.pop(0))\/tot_area\n            prob_list.append(cur_prob)\n            plot_list.append(([row.x, qb_position[0]], [row.y, qb_position[-1]]))\n            self._scat_prob_list[index].set_text(f\"{cur_prob:.2f}\")\n            \n        self._qb_target.set_data(plot_list[np.argsort(prob_list)[-1]][0], plot_list[np.argsort(prob_list)[-1]][1])\n        self._qb_target_secondary.set_data(plot_list[np.argsort(prob_list)[-2]][0], plot_list[np.argsort(prob_list)[-2]][1])\n        \n        # Defense Coverages\n        \n        pos_df = players_df[['x', 'y']]\n    \n        dist = pdist(pos_df, 'euclidean')\n        dist_df = pd.DataFrame(np.round(squareform(dist)*1000).astype(int))\n        \n        distance_df = dist_df.loc[players_df.position.isin(self._DEFENSE_POS).to_numpy(), players_df.position.isin(self._OFFENSE_POS).to_numpy()]\n        \n#         if self._Cov_G is None:\n        if True:\n            self._offense_nodes = players_df.nflId.to_numpy()[list(distance_df.columns)]\n            self._defense_nodes = players_df.nflId.to_numpy()[list(distance_df.index.values)]\n\n            self._Cov_G.clear()\n            self._Cov_G.add_nodes_from(self._defense_nodes, bipartite = 0)\n            self._Cov_G.add_nodes_from(self._offense_nodes, bipartite = 1)\n            self._Cov_G.add_nodes_from(['s','e'])\n\n            self._end_edge_list = [(off_id, 'e', 1, self._MAX_TARGETED) for off_id in self._offense_nodes]\n        \n#         print(\"****\")\n#         print(self._Cov_G.edges())\n            \n#         self._Cov_G.remove_edges_from(self._Cov_G.edges())\n            \n        start_edge_list = [('s', def_id, 1, coverage) for def_id, coverage in zip(self._defense_nodes, [self._MAX_COVERAGE if x >= np.round(self._MIN_DIST_FOR_DOUBLE*1000) else 1 for x in np.min(distance_df.to_numpy(), axis = 1)])]\n        \n        player_id_arr = players_df.nflId.to_numpy()\n\n        player_edge_list = []\n        for (idx_def, row_def) in distance_df.iterrows():\n            for (idx_off, euc_dist) in row_def.items():\n                player_edge_list.append((player_id_arr[idx_def], player_id_arr[idx_off], euc_dist, 1))\n                \n#         print(player_edge_list)\n\n        edge_list = start_edge_list + self._end_edge_list + player_edge_list\n\n        [self._Cov_G.add_edge(x,y,weight=z, capacity = a) for x,y, z, a in edge_list]\n        \n#         print(self._Cov_G.edges())\n\n        flow_dict = nx.max_flow_min_cost(self._Cov_G, \"s\", \"e\")\n        \n#         print(flow_dict)\n        \n        list_idx = 0\n        for def_id in flow_dict.keys():\n            if def_id not in self._defense_nodes:\n                continue\n            def_pos = (players_df[players_df.nflId == def_id].x, players_df[players_df.nflId == def_id].y)\n            coverage_count = 0\n            for off_id in np.array(list(flow_dict[def_id].keys()))[np.array(list(flow_dict[def_id].values()))>0]:\n                off_pos = (players_df[players_df.nflId == off_id].x, players_df[players_df.nflId == off_id].y)\n                \n#                 print(self._def_coverage_list)\n#                 print(list_idx)\n\n#                 print([def_pos[0].values[0], off_pos[0].values[0]])\n#                 print([def_pos[1], off_pos[1]])\n                \n                \n                self._def_coverage_list[list_idx].set_data([def_pos[0].values[0], off_pos[0].values[0]], [def_pos[1].values[0], off_pos[1].values[0]])\n                \n                coverage_count += 1\n                list_idx += 1\n                \n            while coverage_count < self._MAX_COVERAGE:\n                coverage_count += 1\n                self._def_coverage_list[list_idx].set_data([], [])\n                list_idx += 1\n                \n#         print(\"Here\")\n#         print(self._def_coverage_list)\n        \n        return (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list, *self._scat_prob_list, self._qb_target, self._qb_target_secondary, *self._def_coverage_list)","4f6bb7dc":"game_idx = 0\nplay_idx = 8\n\nunique_game_ids = week_df.gameId.unique()\nunique_play_ids = week_df[week_df.gameId == unique_game_ids[game_idx]].playId.unique()\n\nplay_df = week_df[week_df.playId == unique_play_ids[play_idx]].sort_values(by = 'time')","5288a317":"play_df.frameId.isin(play_df.frameId.unique()[:3])","931f4d4b":"# animated_play = AnimatePlayPitchControlProbQB(play_df, 20, show_control=False)\n# HTML(animated_play.ani.to_jshtml())\n\nanimated_play = AnimatePlayPitchControlFullAnnotation(play_df, 20, show_control=False)\nHTML(animated_play.ani.to_jshtml())","bbde3fa6":"import os\n\nos.getcwd()","83154a84":"animated_play = AnimatePlayPitchControlFullAnnotation(play_df, 20, show_control=False)\nanimated_play.ani.save('\/kaggle\/working\/animation.gif', writer='imagemagick')","a21d4ee0":"from IPython.display import HTML, Image\n\nImage(url='animation.gif')","ec207ec6":"import os\nos.chdir('..')\nfrom IPython.display import FileLink\nFileLink('animation.gif')","6b91d001":"len(play_df[play_df.position.isin(OFFENSE_POS)].nflId.unique())","603d3362":"OFFENSE_POS = ['OL','OG','LG','RG','C' ,'OT','LT','RT','TE','WR','QB','HB','RB','TB','FB']\nSPECIAL_POS = ['P', 'K', 'LS', 'H']\nDEFENSE_POS = ['SS','FS', 'CB','DB','S','SAF','DE','DT','NT','DL','ILB','OLB','MLB','LB']\n\nunique_frames = play_df.frameId.unique()\nnum_offense = play_df[play_df.frameId == unique_frames[0]].position.isin(OFFENSE_POS).sum()\nnum_frame_entities = len(play_df[play_df.frameId == unique_frames[0]])\n\nnum_offense","89d81555":"from scipy.spatial.distance import pdist, squareform\n\nunique_frames = play_df.frameId.unique()\nnum_offense = play_df[play_df.frameId == unique_frames[0]].position.isin(OFFENSE_POS).sum()\n\nclosest_id = np.array([])\nclosest_dist = np.array([])\n\nfor idx, frame in enumerate(play_df.frameId.unique()):\n    \n    if idx > 1:\n        break\n    \n    frame_df = play_df[play_df.frameId == frame]\n    \n    player_df = frame_df[frame_df.nflId.notnull()].sort_values(by = 'displayName')\n    pos_df = player_df[['x', 'y']]\n    \n    dist = pdist(pos_df, 'euclidean')\n    dist_df = pd.DataFrame(np.round(squareform(dist)*1000).astype(int))\n    \n#     closest_id = np.hstack([closest_id, player_df[player_df.position.isin(OFFENSE_POS)].nflId.to_numpy()[np.argmin(dist_df.loc[:, player_df.position.isin(OFFENSE_POS).to_numpy()].to_numpy(), axis = 1)], np.nan])\n#     closest_dist = np.hstack([closest_dist, np.min(dist_df.loc[:, player_df.position.isin(OFFENSE_POS).to_numpy()].to_numpy(), axis = 1), np.nan])","e7e54cab":"player_df","494e0154":"player_df[player_df.position.isin(OFFENSE_POS)].nflId.to_numpy()\nplayer_df[player_df.position.isin(DEFENSE_POS)].nflId.to_numpy()","942b5171":"distance_df = dist_df.loc[player_df.position.isin(DEFENSE_POS).to_numpy(), player_df.position.isin(OFFENSE_POS).to_numpy()]\ndistance_df","b672bb5d":"player_df.nflId.to_numpy()","1557fe75":"find_name_from_id = lambda search_id: players_df[players_df.nflId == search_id].displayName.values[0]\n\n\n\nplayer_edge_list","b3d6b8db":"min_dist_for_double = 10\n","1ba69976":"offense_nodes = player_df.nflId.to_numpy()[list(distance_df.columns)]\ndefense_nodes = player_df.nflId.to_numpy()[list(distance_df.index.values)]\n\nCov_G = nx.DiGraph()\nCov_G.add_nodes_from(defense_nodes, bipartite = 0)\nCov_G.add_nodes_from(offense_nodes, bipartite = 1)\nCov_G.add_nodes_from(['s','e'])\n\n\nend_edge_list = [(off_id, 'e', 1, 2) for off_id in offense_nodes]\n\nstart_edge_list = [('s', def_id, 1, coverage) for def_id, coverage in zip(defense_nodes, [2 if x >= min_dist_for_double else 1 for x in np.min(distance_df.to_numpy(), axis = 1)])]\n\nplayer_id_arr = player_df.nflId.to_numpy()\n\nplayer_edge_list = []\nfor (idx_def, row_def) in distance_df.iterrows():\n    for (idx_off, euc_dist) in row_def.items():\n        player_edge_list.append((player_id_arr[idx_def], player_id_arr[idx_off], euc_dist, 1))\n        \nedge_list = start_edge_list + end_edge_list + player_edge_list\n\n[Cov_G.add_edge(x,y,weight=z, capacity = a) for x,y, z, a in edge_list]\n\nflow_dict = nx.max_flow_min_cost(Cov_G, \"s\", \"e\")","f707670e":"flow_dict","8f236e94":"np.array(list(flow_dict[2495613].keys()))\n\nlist(flow_dict[2495613].values())","badf8163":"np.array(list(flow_dict[2495613].keys()))[np.array(list(flow_dict[2495613].values()))>0]","72940823":"player_df[player_df.nflId == 2507828.]","d351b054":"find_name_from_id(player_id_arr[0])","c831a42e":"B = nx.Graph()\nB.add_nodes_from([1,2,3,4], bipartite=0) # Add the node attribute \"bipartite\"\nB.add_nodes_from(['abc','bcd','cef'], bipartite=1)\nB.add_nodes_from(['s','e'])\n\nmyEdges = [\n    ('s', 1, 1, 2, 1),\n    ('s', 2, 1, 2, 1),\n    ('s', 3, 1, 2, 1),\n    ('s', 4, 1, 2, 1),\n    \n    (1,'abc', 1, 1, 1), \n    (1,'bcd', 1, 1, 2), \n    (2,'bcd', 5, 1, 1), \n    (2,'cef', 6, 1, 2), \n    (3,'cef', 4, 1, 3), \n    (4,'abc', 7, 1, 3),\n    \n    ('abc', 'e', 1, 2, 1),\n    ('cef', 'e', 1, 2, 1),\n    ('bcd', 'e', 1, 2, 1)\n]\n\n[B.add_edge(x,y,weight=z, capacity = a, length = b) for x,y, z, a, b in myEdges]\n\nB.edges()","1ae77252":"B.remove_edges_from(B.edges())\n\nB.edges()","ffe17519":"import networkx as nx\n\nplay_df.loc[play_df.frameId == 1]","d510ad64":"# def __init__(self, play_df, plot_size_len, show_control = True) -> None:\n#     super().__init__(play_df, plot_size_len)\n#     \"\"\"Initializes the datasets used to animate the play.\n\n#     Parameters\n#     ----------\n#     play_df : DataFrame\n#         Dataframe corresponding to the play information for the play that requires\n#         animation. This data will come from the weeks dataframe and contains position\n#         and velocity information for each of the players and the football.\n\n#     Returns\n#     -------\n#     None\n#     \"\"\"\n#     self._MAX_PLAYER_SPEED = 11.3\n#     self._X, self._Y, self._pos = self.generate_data_grid()\n\n#     self._ax_football = self._ax_field.twinx()\n\n#     self._show_control = show_control\n#     plt.close()\n\n\n\n# def data_stream():\n#     for time in _times:\n#         yield _frame_data[self._frame_data.time == time]","bf6712a7":"\n        \n\n# if _show_control:\n#     _pitch_control_contour = _ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]])","03ee7310":"plt.figure(figsize = (20, 10))\nplt.imshow(np.flip(Z_test, axis = 0), aspect = 'auto')\nplt.imshow(np.clip(np.flip(Z_test - Z_def, axis = 0), 0, None), aspect = 'auto')\n\nprint(np.sum(np.clip(np.flip(Z_test - Z_def, axis = 0), 0, None)))","4e5953f9":"self.set_axis_plots(self._ax_field, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n        \nball_snap_df = self._frame_data[(self._frame_data.event == 'ball_snap') & (self._frame_data.team == 'football')]\nself._ax_field.axvline(ball_snap_df.x.to_numpy()[0], color = 'k', linestyle = '--')\n\nself.set_axis_plots(self._ax_home, self._MAX_FIELD_X, self._MAX_FIELD_Y)\nself.set_axis_plots(self._ax_away, self._MAX_FIELD_X, self._MAX_FIELD_Y)\nself.set_axis_plots(self._ax_jersey, self._MAX_FIELD_X, self._MAX_FIELD_Y)\nself.set_axis_plots(self._ax_football, self._MAX_FIELD_X, self._MAX_FIELD_Y)\n\nfor idx in range(10,120,10):\n    self._ax_field.axvline(idx, color = 'k', linestyle = '-', alpha = 0.05)\n\nself._scat_football = self._ax_football.scatter([], [], s = 100, color = 'black')\nself._scat_home = self._ax_home.scatter([], [], s = 500, color = self._CPLT[0], edgecolors = 'k')\nself._scat_away = self._ax_away.scatter([], [], s = 500, color = self._CPLT[1], edgecolors = 'k')\n\nself._scat_jersey_list = []\nself._scat_number_list = []\nself._scat_name_list = []\nself._a_dir_list = []\nself._a_or_list = []\nself._inf_contours_list = []\nfor _ in range(self._MAX_FIELD_PLAYERS):\n    self._scat_jersey_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'white'))\n    self._scat_number_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n    self._scat_name_list.append(self._ax_jersey.text(0, 0, '', horizontalalignment = 'center', verticalalignment = 'center', c = 'black'))\n\n    self._a_dir_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n    self._a_or_list.append(self._ax_field.add_patch(Arrow(0, 0, 0, 0, color = 'k')))\n\n    if not self._show_control:\n        self._inf_contours_list.append(self._ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]]))\n\nif self._show_control:\n    self._pitch_control_contour = self._ax_field.contourf([0, 0], [0, 0], [[0,0],[0,0]])\n\nreturn (self._scat_football, self._scat_home, self._scat_away, *self._scat_jersey_list, *self._scat_number_list, *self._scat_name_list)\n\nfor (index, row) in pos_df[frame_df.jerseyNumber.notnull()].reset_index().iterrows():\n    self._scat_jersey_list[index].set_position((row.x, row.y))\n    self._scat_jersey_list[index].set_text(row.position)\n    self._scat_number_list[index].set_position((row.x, row.y+1.9))\n    self._scat_number_list[index].set_text(int(row.jerseyNumber))\n    self._scat_name_list[index].set_position((row.x, row.y-1.9))\n    self._scat_name_list[index].set_text(row.displayName.split()[-1])\n\n    player_orientation_rad = self.deg_to_rad(self.convert_orientation(row.o))\n    player_direction_rad = self.deg_to_rad(self.convert_orientation(row.dir))\n    player_speed = row.s\n    player_position = np.array([row.x, row.y])\n    player_acc = row.a\n\n    speed_w = player_speed\/self._MAX_PLAYER_SPEED\n\n    player_vel = np.array([np.real(self.polar_to_z(player_speed, player_direction_rad)), np.imag(self.polar_to_z(player_speed, player_direction_rad))])\n    player_orient = np.array([np.real(self.polar_to_z(2, player_orientation_rad)), np.imag(self.polar_to_z(2, player_orientation_rad))])\n\n    influence_rad = self.weighted_angle(player_vel, player_orient, speed_w)\n\n    distance_from_football = np.sqrt((pos_df[pos_df.displayName == 'Football'].x - player_position[0])**2 + ((pos_df[pos_df.displayName == 'Football'].y - player_position[1]))**2).to_numpy()[0]\n\n    self._a_dir_list[index].remove()\n    self._a_dir_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_vel[0], player_vel[1], color = 'k'))\n\n    self._a_or_list[index].remove()\n    self._a_or_list[index] = self._ax_field.add_patch(Arrow(row.x, row.y, player_orient[0], player_orient[1], color = 'grey', width = 2))\n\n    sigma = self.generate_sigma(influence_rad, player_speed, distance_from_football)\n    mu = self.generate_mu(player_position, player_vel)\n\n    Z = self.multivariate_gaussian(self._pos, mu, sigma)","bdcadaa8":"I will perform the field control model for a single play. Let's select all of the positional data for a single play in a single game. You can change **game_idx** and **play_idx** to see whatever play you wish. Let's use *df.head()* to show the first few rows of the dataset that we will be making a control model from.\n\nThere are a few things to note here. All of the positional units are in yards. The velocity is in $\\frac{yards}{s}$, and the acceleration is in $\\frac{yards}{s^2}$. At each time point, we will have a row for every entity of interest in that particular play. Note that all 22 players on the field are not shown, only the players that are relevant to the pass play. **o** stands for the orientation of the player (i.e. which way their trunk is facing) and **dir** is the movement direction of the player. These two values will rarely be the same, so it is important to keep track of both of them during our model. Also note that these angles are in degrees, calculated from due north, clockwise. Generally, angles will be measured from due east counter-clockwise, so we must be careful to either remap these angles, or change model formulation to ensure we are doing the correct thing.\n\nAlso, not that the width of the pitch is 120 by 53.3. This will be useful to plot the pitch in the correct aspect ratio.","f265c2fe":"Now for the covariance, we need to stretch the covariance matrix along the axis that we are moving, and shrink it in the orthogonal direction as a function of velocity and distance from the ball. Since we know our covariance matrix is diagonal, this is easy as we just need to worry about the individual variances. For now, let's take the distance to the ball to be 0. The bigger the distance, the wider the covariance should be in either direction. \n\nThe initial covariance matrix we will use will be created from our distance-from-ball function $f_d(\\cdot)$.\n\n$\n\\Sigma=\n  \\begin{bmatrix}\n    f_d(t) & 0 \\\\\n    0 & f_d(t)\n  \\end{bmatrix}\n$\n\nWe will increase this in the direction of movement (in this case in the $x$ direction). To incorporate a weighting with speed, we will take the maximum possible speed and create a weighting function. The maximum possible recorded speed as of the time of writing this notebook is 23.1 mph set by Raheem Mostert of the 49ers. This corresponds to approximately 11.3 yards per second. We don't want this to be a linear weighting either. At lower speeds, it is still easier to change direction than at higher speeds so we want the weighting to be exponential. If a player reaches a maximum speed, we want the variance to be $f_d(t)$. If the player is at 0 speed, we want the variance to be $\\frac{f_d(t)}{2}$. This seems to have been set relatively arbitrarily by the authors, but if anyone has a reason as to why they did it this way, please let me know. In either case, you can tune the hyperparameters to ensure you are getting the correct radius of influence.\n\nTo meet the requirements of the speed weighting function, we can do $f_s(s) = \\frac{x^2}{11.3^2}$. Squaring will provide the effect we require. You can compare this with a linear weighting in the graph below","cacc4da3":"Note how the covariance extends based on the speed of the player. This is exactly the behaviour we wanted.\n\n## Modelling how direction affects region of influence\nWhile this works if the player is moving in the x or y direction, we need to reassess how we create the covariance matrix to work for a player travelling in any direction. To do this, we can use the spectral theorem knowing that our covariance matrix is symmetric and real.\n\n>**Spectral Theorem**:\nGiven $A \\in n\\times n$ is real, symmetric matrix, it can be factorized into $A=V S V^\\top$ where the columns of $V$ contain orthonormal eigenvectors, and the diagonal of $\\Sigma$ contains the corresponding eigenvalues.\n\nThe spectral theorem is used as a basies for PCA, and the eigenvectors will encode the orthogonal directions of highest variance. I will not go into the proof here, but for a very good tutorial on PCA, please see this [paper](https:\/\/arxiv.org\/pdf\/1404.1100.pdf) by Jonathan Shlens. Now, knowing what we know, we can work on backwards engineering a valid covariance matrix. \n\nFirst let's assume that we are taking our orientation from the x axis moving counter clockwise. By this I mean we would start at vector $(1, 0)$, and then rotate counter clockwise. Be aware that the data given by NFL starts at vector $(0, 1)$ and rotates clockwise. We will attempt to recreate $V$ first. As the columns of V will correspond to the two largest orthogonal degrees of variance, we can just think of V as a an orthonormal rotation matrix.\n\nTo better illustrate this, let us do an example. Assume that the direction is $\\pi\/4$ radians, or 45 degrees. We want to move our vector $(1, 0)$ to the corresponding point at 45 degrees on the unit circle. Using basic trigonometry, this is $(\\cos(\\theta), \\sin(\\theta))$. Similarly, we want to move the vector $(0, 1)$ to the corresponding point at 135 degrees. Again using basic trigonometry, this corresponds to $(-\\sin(\\theta), \\cos(\\theta))$. Both of these directions are unit normal (they are on the unit circle) and orthogonal (they are perpendicular). As such they are valid for use as orthonormal eigenvectors. As such, we can create our matrix as\n\n$\nV=\n  \\begin{bmatrix}\n    \\cos(\\theta) & -\\sin(\\theta) \\\\\n    \\sin(\\theta) & \\cos(\\theta)\n  \\end{bmatrix}\n$\n\nWe will use the same eigenvalues for our matrix that we did last time. This will stretch the rotate the principle components in the corresponding direction. As a reminder, this matrix is\n\n$\nS=\n  \\begin{bmatrix}\n    \\frac{f_d(t) + f_d(t) \\cdot f_s(s)}{2} & 0 \\\\\n    0 & \\frac{f_d(t) - f_d(t) \\cdot f_s(s)}{2}\n  \\end{bmatrix}\n$\n\nUsing the spectral theorem, we can now write out our new covariance matrix as\n\n$\\Sigma = VSV^\\top$\n\nTo show this in an example, I will first plot the rotation of the bases, and then the rotated multivariate gaussian.","5fa1e010":"It should be noted that all of this only works on actual plays. If there are trick plays, then we shall have issues because the visualizations expect the quarterback to be the one throwing the ball for all the probabilities to make sense.","638a65ea":"We don't want the likehlihood for players that are close to the quarterback to be high because o","3a2d52c5":"## Animation Result\nWe can now use this class to create an animation of the entire play. Just instantiate the class, then convert to JS.","ba2047d9":"To take a small peek into what is going on, I will show you the underlying free area that is used to calculate the freedom score. This underlying area is found by subtracting all of the influence functions from the defensive players. Each of the offensive players have such an area, and from this, we calculate the probabilities as shown in the graph above.","f279824d":"# Animation\n## Animation Class\n\nFirst let us make an animation that will show all of the entities moving across the pitch over time through the play. We are in luck that we have timestamps for each of the timepoints when the measurement was taken. This allows us to make a very precise estimate as to what the sampling rate is, and thus we can set an accurate framerate for the animation to simulate the play at \"real time\". This is calculated on line 26 as `self._mean_interval_ms`. \n\nIn this animation we plot:\n- Player positions\n- Line of scrimmage\n- Ball\n- Velocity vectors of the players\n- Orientation of players\n- Player last name\n- Player position\n- Player number\n\nOn small screens this may be too much information, but this just shows how you can do it. Feel free to remove as you wish. I will not go into this animation class in too much detail as it is not the focus of this notebook. Feel free to go through it, it is mostly just using matplotlib and basic math to show what we want.","7016d6ea":"Finish the graph theoretic approach to coverage assignments\nCompute man vs zone coverages for cornerbacks using some sort of clustering method\nCompute optimal path for defenders\n\nhttps:\/\/projecteuclid.org\/download\/pdfview_1\/euclid.aoas\/1430226086\nhttps:\/\/www.degruyter.com\/view\/journals\/jqas\/15\/2\/article-p141.xml\nhttps:\/\/mc-stan.org\/users\/documentation\/case-studies\/bball-hmm.html\n\nBishop Chapter 8 Graphs\nBishop HMM Chapter\nImplement Franks et. al HMM Model and Understand\nImplement Keshri et. al HMM Model and Understand\nAdd in extra domain knowledge and create a consolidated model\nPossibly use deep learning to improve model","46fd85f1":"# Setup\nBefore we get into the model, let's first load in all of the necessary libraries, and the dataset that we will be using.","afeb51f6":"# Pitch Control Model\n## Background\nThe pitch control model that we will be implementing consists of two main components.\n\n1. Individual player influence\n2. Team Pitch Control\n\nTeam pitch control falls into place relatively easily once we can model individual player influence, so most of our efforts will be concentrated on point 1.\n\n## Distance From Ball\nLet's think about how much influence any one player can have given their individual distance from the ball. If we imagine two players standing still and facing each other, 5 yards apart, and one throws the football, how much can the other possible move and still catch the football? Without accounting for other variables that may influence this like individual player acceleration, ball speed, etc., we can say maybe 2 yards on either side, and maybe 1 yard forward and backward. This will give us a 'region of influence' for the receiving player. In a very simple case, we can model a region like this as a gaussian distribution, with the mean centered at the player, and a covariance describing this region. This will be highly subjective based on modelling assumptions, but we can model something as follows. Note that when we create the covariance matrix, I am assuming no covariance. The variance occurs only on the individual axes, meaning the covariance matrix is diagonal.\n\nRed refers to the receiver, and black refers to the thrower. We are currently only drawing the influence of the receiver.","509d0a7b":"# Assigning Coverage\nMy current goal as we continue this notebook, is to figure out how to best assign coverages to each of the defenders. In a naive approach, this should not be too difficult. We can assign single coverage using some distance metric, and be done. However, I want to account for a few other factors in my model.\n\n1. I will assume that each player has a primary and secondary cover target\n2. I want to take into account where the quarterback is looking\n3. I want to take into account which receiver is a bigger \"threat\". This will be achieved by using receiver target probabilities as a proxy\n4. I want to take into account where the defender is looking\n\nAll of this can be done by creating some sort of weighted function matrix, which will take into account all of the assumptions. However, I have always wanted to get a little into graph theory, so instead we will be using a max-flow min-cost algorithm that will generate a bipartite graph. This will not be a matching because we are allowing for double coverage. I will then create a primary and secondary target for each of the defenders with importance probabilities, and we can plot it in our animations to see if it makes sense. Note that the coverages we get should be identical to the weighted function matrix. The weights on each of the graph edges will represent the function that takes into account all of the assumptions shown above.\n\nThe first step, is to create receiver probabilities using our influence function created above\n\n## Receiver Probabilities\nAs we already have influence areas for each of the players, creating the receiver probabilities should be reasonably straight forward. There are 2 variables we need to account for\n\n1. How \"free\" is a specific receiver\n2. Is the quarterback looking to throw their way\n\nThe two things that we need to note, it that firstly these probabilities only really matter up until the moment the ball is released. After that. the quarterback will be looking where the ball went, and the probabilities will be faulty. Additionally, we would need to add in a distance from ball metric and distance from quarterback metric to reweight probabilities. Once the ball has landed in a receiver's hand, we know with 100% target what the receiver probability is. We can expand on these points later.\n\nWith these two values, we can construct a probability of being thrown to for each of the players on the field that adheres to the 3 axioms of probability. How free a specific player is will depend on his influence gaussian, and that of the entire defending team. We will create a basic score during each frame of the play by subtracting the influence gaussian of the defensive team from that of the offensive player. We can zero out all negative values, and the aggregate remaining score will be the \"freedom score\" of that player.\n\nBelow I show an implemented example of the probabilities for each of the players during a certain frame of the play that we have been observing. Note the red probability scores on top of the players. These probabilities will add up to one across the receiving players.","0876f904":"## Dataset imports\nUsual dataset imports using *read_csv()*. I am only loading in week 1 data for this notebook as it is an example","3c7bd655":"Note how using the above formulation, we can now easily rotate the regions of influence as we like!\n\nThat is it! That brings to a close the section of regions of player influence. We now create such a region of influence for every single player in the team, and then we can move on to the pitch control section.","3ba70ba2":"## Team Pitch Control\nLet's now imagine that you have computed individual regions of influence for each of the ","2a5a24b9":"So now we can see the phenomenon that we want to model. The further away you are from the ball, the wider your region of influence will be, but it will also be weaker. This is because if you are far away from the ball, it will take time for the ball to reach you. In this time, you can move further. Influence is a very abstract concept, so feel free to model with any assumptions you like, but we will model this model using this assumption. The further you are from the ball, the more influence you will have, up to a certain distance. For soccer this makes a lot of sense as the game is continuous, however for American football, we may have to change this. Once a receiver catches the ball, another receiver on the other end of the field will have no influence on the play. We have not done this yet, but this is a weakness of the current model.\n\n### Distance from the ball influence function\nThe function for distance from the ball vs influence is set relatively arbitrarily for now. I have done something similar to the function that is provided in the paper, but this would need to be tuned using subject matter experts from the NFL. The current function we will use is\n\n$f(x) = 4 + (\\frac{6}{18^2})(x^2) \\textrm{   if   } x < 18$\n\n$f(x) = 10 \\textrm{   otherwise   }$\n\nNote that after 18 yards, the radius of influence is constant.","0282f557":"To tell if the quarterback is looking their way is slightly trickier. Unfortunately, the tracking device used to obtain this data is limited to only showing the orientation of the trunk of any individual player. However, I think in general, the quarterback will be looking over their shoulder, around 30 degrees to to the orientation of their trunk. I will leave out left handed QBs for now, but will need to account for that at some point. We will use this as a proxy for the viewing direction of the quarterback, and assign a radial gaussian to ensure we have a little margin for error. Then we can multiply this radial gaussian by the freedom scores of each of the offensive players, and recalculate our probabilities for each of the offensive players. To choose the Gaussian variance, I will try and mimic the human vision, which is about 120 degrees FOV. I don't want to give too much weighting to where the quarterback is looking, so \n\nThe only left handed QB I currently know of that is left handed is Tua, with Kellen Moore having retired in 2017. If we check for all of the QBs in the players list, they are all right handed, so we can forget about left handed QBs.","e3823a42":"How about the person throwing the ball? How much influence will they have at the moment they throw the ball? Again this would be dependent on many different factors, but let's keep it simple for now. At this moment in time, they could probably influence about 1 yard in any direction. Note that we are not looking at the influence gained from throwing the ball, but rather at the physical influence of any player as a function of distance from the ball. If we think of black as a wide receiver who has just caught the ball, all he can really do is run. We are assuming he has some influence on the space 1 yard in any direction around him. Let's plot this on our graph as well","f9d3a9fe":"The covariance can now just be written as a simple weighting\n\n$\n\\Sigma=\n  \\begin{bmatrix}\n    \\frac{f_d(t) + f_d(t) \\cdot f_s(s)}{2} & 0 \\\\\n    0 & \\frac{f_d(t) - f_d(t) \\cdot f_s(s)}{2}\n  \\end{bmatrix}\n$\n\nPlotting this, we get","593162c8":"## Library Imports","0f776ac0":"## Modelling how velocity affects region of influence\nAs a player is running in a high velocity in a specific direction, their region of influence should change to reflect the fact that it would be difficult for them to influence anything that is not in line with or nearly in line with the direction they are running. However they can also influence a much larger region in the direction that they are running because they are already running at a high velocity. This means we need to create a region of influence that is elongated in the region that the player is running, as a function of speed. When they are stationary, the variances in either direction should be the same, but as they start running, the difference between the variances should increase. For now, we will just focus on what occurs when the player runs on the basis axes. We will worry about direction later in this notebook.\n\nApart from just the covariance, the speed should also affect the mean of our region of influence. Someone who is running full speed should have less influence on the ground behind them, and more on the ground in front of them. We can model this by shifting the mu in the movement direction as a function of velocity.\n\nLet's plot this out, first by taking the low hanging fruit and plot out the mean shift. I will draw an arrow to signify the velocity of the player. We will shift the mean according to the following function\n\n$\\mathbf{\\mu^*} = \\mathbf{\\mu} + 0.5\\mathbf{v}$\n\nFor a player at the position $(0, 0)$ with a velocity vector $(6, 0)$ and no changes to the covariance matrix yet will have a covariance matrix as follows","dccf159f":"# Python Field Control Model\nHere is an implementation I quickly put together of the paper \"*Wide Open Spaces: A statistical technique for measuring space creation in professional soccer*\" for NFL data. This has not yet been completely error checked, but should work on most of the data, barring any outliers. I have made a few changes to the model which I will go over in more detail later, but the core is exactly the same. I will cover how this model is built mathematically in the near future, so that you can create changes to it to better reflect American Football rather than soccer.\n\nMarkdown of this notebook and further explanations will be added over the next week"}}