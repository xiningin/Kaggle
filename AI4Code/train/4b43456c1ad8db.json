{"cell_type":{"84a7b4b3":"code","2d73f2f4":"code","77aeed76":"code","4078eee1":"code","0b468464":"code","4d7b6393":"code","adb76c63":"code","8c0950fe":"code","9df55293":"code","4a2a867b":"code","3287c62a":"code","dcbc9769":"code","dd935f29":"code","98897fa2":"code","2db32f32":"code","a3d425d9":"code","c0164ef4":"code","46721c31":"code","3341b7ee":"code","a062e8ca":"code","933390a9":"code","f5407316":"code","ece3aee0":"markdown","3ebe216e":"markdown","cd4bba2c":"markdown","6f6a79ff":"markdown","9bbc09eb":"markdown","c1f2dd9c":"markdown","36d199ef":"markdown"},"source":{"84a7b4b3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-darkgrid')","2d73f2f4":"btc = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv')\n# Converting the Timestamp column from string to datetime\nbtc['Timestamp'] = [datetime.fromtimestamp(x) for x in btc['Timestamp']]\nbtc = btc.set_index('Timestamp')","77aeed76":"btc_daily = btc.resample(\"24H\").mean() #daily resampling","4078eee1":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import kpss\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf","0b468464":"def fill_missing(df):\n    ### function to impute missing values using interpolation ###\n    df['Open'] = df['Open'].interpolate()\n    df['Close'] = df['Close'].interpolate()\n    df['Weighted_Price'] = df['Weighted_Price'].interpolate()\n    df['Volume_(BTC)'] = df['Volume_(BTC)'].interpolate()\n    df['Volume_(Currency)'] = df['Volume_(Currency)'].interpolate()\n    df['High'] = df['High'].interpolate()\n    df['Low'] = df['Low'].interpolate()\n    print(df.head())\n    print(df.isnull().sum())\n    \nfill_missing(btc_daily)","4d7b6393":"\nplt.figure(figsize=(15,12))\nseries = btc_daily.Weighted_Price\nresult = seasonal_decompose(series, model='additive',period=1)\nresult.plot()","adb76c63":"# Renaming the column names accroding to Prophet's requirements\n\ndaily_data_fb = btc_daily.reset_index()[['Timestamp','Weighted_Price']].rename({'Timestamp':'ds','Weighted_Price':'y'}, axis=1)\ndaily_data_fb.head()","8c0950fe":"test_length = 365\nsplit_date = \"2020-01-01\"\ntrain_filt = daily_data_fb['ds'] <= split_date\ntest_filt = daily_data_fb['ds'] > split_date\n\ntrain_fb = daily_data_fb[train_filt]\ntest_fb = daily_data_fb[test_filt]\n\nprint(\"train data shape :\", train_fb.shape[0] \/ daily_data_fb.shape[0] * 100)\nprint(\"test data shape :\", test_fb.shape[0] \/ daily_data_fb.shape[0] * 100)","9df55293":"!pip install auto-ts","4a2a867b":"!pip install tscv","3287c62a":"\nfrom auto_ts import auto_timeseries as ATS","dcbc9769":"automl_model = ATS(\n    score_type='rmse',\n    forecast_period=test_length, time_interval='Day',\n    model_type='best', verbose=0\n)","dd935f29":"ts_column = 'ds'\ntarget = 'y'\nsep = ','","98897fa2":"automl_model.fit(\n    traindata=train_fb,\n    ts_column=ts_column,\n    target=target,\n    cv=5,\n    sep=',')","2db32f32":"automl_model.get_leaderboard()","a3d425d9":"\nautoml_model.plot_cv_scores()","c0164ef4":"# There is a Bug with Prophet folds: https:\/\/github.com\/AutoViML\/Auto_TS\/issues\/25\nautoml_model.get_cv_scores()","46721c31":"results_dict = automl_model.get_ml_dict()\nresults_dict['Prophet']['forecast']","3341b7ee":"results_dict['auto_SARIMAX']['forecast']","a062e8ca":"# Using Best Model\nfuture_predictions = automl_model.predict(\n    testdata=test_length\n)  \nfuture_predictions","933390a9":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_length,\n    model='auto_SARIMAX'\n)\nfuture_predictions","f5407316":"# Using specific model\nfuture_predictions = automl_model.predict(\n    testdata=test_length,\n    model='Prophet',\n    simple=False\n\n)\nfuture_predictions","ece3aee0":"#### Time Series Decomposition & Statistical Tests","3ebe216e":"![](https:\/\/github.com\/AutoViML\/Auto_TS\/raw\/master\/logo.png)\n\n[Auto_TS: Auto_TimeSeries](https:\/\/github.com\/AutoViML\/Auto_TS)","cd4bba2c":"## Glipse Data","6f6a79ff":"#### Forecast Results","9bbc09eb":"Read data","c1f2dd9c":"### Evaluate Results","36d199ef":"#### Time resampling"}}