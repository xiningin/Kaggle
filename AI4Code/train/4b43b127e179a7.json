{"cell_type":{"27d375cc":"code","a78bc0d2":"code","6fcb54cb":"code","988906c4":"code","87896f1a":"code","0b7a360d":"code","85b5af1e":"code","b5a4acd5":"code","6890c75c":"code","1a577db9":"code","c0383b26":"code","cbceb397":"code","5a7893a5":"code","d5e9577b":"code","4892cc3e":"code","e503fa9e":"code","f578f56a":"code","b8ac81f1":"code","6e42c6e1":"code","ee9b98de":"code","d1eed270":"code","69fad253":"code","38895426":"code","79d4d2db":"code","a6c5b862":"code","f6dc4d4b":"code","40902648":"code","be89c498":"markdown","f45abc0d":"markdown","d32e3039":"markdown","6572748f":"markdown","67e7717d":"markdown","fcbabb75":"markdown","9893fae8":"markdown","13800cd3":"markdown","2260c151":"markdown","3a687426":"markdown","978caddc":"markdown","1c24d883":"markdown"},"source":{"27d375cc":"#Basic Packages\nimport pandas as pd\nimport numpy as numpy\n\n#H2O\nimport h2o\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\n\n#Evaluation Packages\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score","a78bc0d2":"#Initialize H2O\nh2o.init()","6fcb54cb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","988906c4":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","87896f1a":"train.isnull().sum()","0b7a360d":"test.isnull().sum()","85b5af1e":"all = pd.concat([train, test], sort = False)\nall.info()","b5a4acd5":"#Fill Missing numbers with median for Age and Fare\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())\n\n#Treat Embarked\nall['Embarked'] = all['Embarked'].fillna(value=all['Embarked'].mode()[0])\n\n#Bin Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 \n\n#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\n\n#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1","6890c75c":"all.isnull().sum()","1a577db9":"#Extract Title from Name\nall['Title'] = all['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","c0383b26":"all['Title'].value_counts()","cbceb397":"#We will combine a few categories, since few of them are unique \nall['Title'] = all['Title'].replace(['Capt', 'Dr', 'Major', 'Rev'], 'Officer')\nall['Title'] = all['Title'].replace(['Lady', 'Countess', 'Don', 'Sir', 'Jonkheer', 'Dona'], 'Royal')\nall['Title'] = all['Title'].replace(['Mlle', 'Ms'], 'Miss')\nall['Title'] = all['Title'].replace(['Mme'], 'Mrs')\nall['Title'].value_counts()","5a7893a5":"#Drop unwanted variables\nall = all.drop(['Name', 'Ticket'], axis = 1)\nall.head()","d5e9577b":"all_dummies = pd.get_dummies(all, drop_first = True)\nall_dummies.head()","4892cc3e":"all_train = h2o.H2OFrame(all_dummies[all_dummies['Survived'].notna()])\nall_test = h2o.H2OFrame(all_dummies[all_dummies['Survived'].isna()])","e503fa9e":"#Get columns names for Building H2O Models\ntarget = 'Survived'\npredictors = [f for f in all_train.columns if f not in ['Survived','PassengerId']]","f578f56a":"train_df, valid_df, test_df = all_train.split_frame(ratios=[0.7, 0.15], seed=2018)","b8ac81f1":"#Covert dtype to factor as per H2O implementation\ntrain_df[target] = train_df[target].asfactor()\nvalid_df[target] = valid_df[target].asfactor()\ntest_df[target] = test_df[target].asfactor()","6e42c6e1":"#Check X Variables\npredictors","ee9b98de":"# initialize the H2O GBM \ngbm = H2OGradientBoostingEstimator()\n\n# train with the initialized model\ngbm.train(x=predictors, y=target, training_frame=train_df)","d1eed270":"#Predict on Test Frame to evaluate how well our model performed\n#as_data_frame() converts the data to Pandas DataFrame\npred_val = gbm.predict(test_df[predictors])[0].as_data_frame()\npred_val","69fad253":"true_val = (test_df[target]).as_data_frame()\nprediction_auc = roc_auc_score(pred_val, true_val)\nprediction_auc","38895426":"#Get X Variables from Competition Test Dataset\nTestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","79d4d2db":"#Predict\nfin_pred = gbm.predict(TestForPred[predictors])[0].as_data_frame()","a6c5b862":"#Get Competition Test Ids\nPassengerId = all_test['PassengerId'].as_data_frame()","f6dc4d4b":"#Make Submission File\nh2o_Sub = pd.DataFrame({'PassengerId': PassengerId['PassengerId'].tolist(), 'Survived':fin_pred['predict'].tolist() })\nh2o_Sub.head()","40902648":"#Export Submission File\nh2o_Sub.to_csv(\"1_h2o_Submission.csv\", index = False)","be89c498":"## Create Dummy Values\nWe will drop one of them using drop_first = True","f45abc0d":"# Build Model","d32e3039":"## Check for Missing Values","6572748f":"### Diving the dataset into Train, Validation and Test\n- **Train:** will be used to build model\n- **Validation** is used to help improve the evaluation metric (We will not use this in this kernel)\n- **Test** is used to help us evaluate the model we built","67e7717d":"# Check Accuracy","fcbabb75":"## Covert Pandas Dataframe to H2O Frame","9893fae8":"# Final Predictions for Competition","13800cd3":"# Treat Missing Values","2260c151":"# Import Libraries","3a687426":"## Extra Features: Title","978caddc":"# Import train and test Datasets","1c24d883":"# Train\/Test Split"}}