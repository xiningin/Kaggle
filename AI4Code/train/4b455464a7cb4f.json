{"cell_type":{"e4f56f57":"code","54953cba":"code","e0fc9a89":"code","3193fcf2":"code","e4bd30fc":"code","14f74304":"code","d635eac5":"code","80f9a961":"code","e87dde1a":"code","f50f9a34":"code","efc94a5a":"code","e9bdb8f2":"code","9164ec60":"code","1ee086fc":"code","de3b375d":"code","4bc39314":"code","e9450d51":"code","e54da1df":"code","3d936175":"code","d6021095":"code","dd2b755d":"code","8d526d87":"code","b3855c6d":"code","ac0c32ba":"code","5af78372":"code","ac9edb68":"code","ef701b6b":"code","587ce872":"code","12224195":"code","9269f376":"code","77edf491":"code","370e9b00":"markdown","2038381c":"markdown","3214bb1e":"markdown","c3ce3696":"markdown","de48cfa2":"markdown","3bf80310":"markdown","df43c0ab":"markdown","253ee4f5":"markdown","d55bf33b":"markdown","19c92464":"markdown","ff5cae0b":"markdown","432e803d":"markdown","2e1e2e87":"markdown","a6a912e9":"markdown","3ed2a74a":"markdown","db66275f":"markdown","36c4eb29":"markdown","0554634f":"markdown","4d25d96e":"markdown","5d4449f0":"markdown","86242f97":"markdown","bbc48f41":"markdown","e13c52d2":"markdown","7528ed98":"markdown","b6a759a2":"markdown"},"source":{"e4f56f57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54953cba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \nprint(\"Setup Complete\")","e0fc9a89":"trans = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\nprint(\"Data Load Complete\")","3193fcf2":"trans.head()","e4bd30fc":"trans.info()","14f74304":"trans.describe()","d635eac5":"trans[(trans['Amount']==0.000000) & trans['Class']==1 ].count()","80f9a961":"sns.distplot(trans[\"Amount\"],bins=10)","e87dde1a":"trans['Class'].value_counts()","f50f9a34":"trans[(trans['Amount'] > 1000) & (trans['Class'] == int(1))]","efc94a5a":"legit = trans[trans.Class == 0]\nfraud = trans[trans.Class == 1]","e9bdb8f2":"print(legit.shape)\nprint(fraud.shape)","9164ec60":"fraud.describe()","1ee086fc":"plt.figure(figsize=(18,10))\nsns.distplot(fraud[\"Amount\"])","de3b375d":"legit.describe()","4bc39314":"plt.figure(figsize=(18,10))\nsns.distplot(legit[\"Amount\"])","e9450d51":"legit = legit[(legit[\"Amount\"]>87.45) & (legit[\"Amount\"]<88.65)]","e54da1df":"new_data = pd.concat([legit,fraud],axis=0)","3d936175":"new_data.head(2)","d6021095":"X = new_data.drop(\"Class\",axis=1)\ny = new_data['Class']","dd2b755d":"from sklearn.preprocessing import StandardScaler","8d526d87":"ss = StandardScaler()","b3855c6d":"X = ss.fit_transform(X)","ac0c32ba":"from sklearn.model_selection import train_test_split","5af78372":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","ac9edb68":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","ef701b6b":"ran_model = RandomForestClassifier(n_estimators=250)\nxgb = XGBClassifier(learning_rate=0.2)","587ce872":"ran_model.fit(X_train,y_train)\nxgb.fit(X_train,y_train)","12224195":"ran_pred_xtrain = ran_model.predict(X_train)\nran_pred_xtest = ran_model.predict(X_test)\nxgb_pred_xtrain = xgb.predict(X_train)\nxgb_pred_xtest = xgb.predict(X_test)","9269f376":"from sklearn.metrics import accuracy_score","77edf491":"print(\"XGBoost : X_Train : Accuracy : \",accuracy_score(y_train,xgb_pred_xtrain))\nprint(\"XGBoost : X_Train : Accuracy : \",accuracy_score(y_test,xgb_pred_xtest))\nprint(\"Random Forest : X_Train : Accuracy : \",accuracy_score(y_train,ran_pred_xtrain))\nprint(\"Random Forest : X_Test : Accuracy : \",accuracy_score(y_test,ran_pred_xtest))","370e9b00":"Training Our Model With Some Parameters like Learning_rate of XGBoost And n_estimators For Random Forest","2038381c":"As we can see here 27 Enters Have Amount==0","3214bb1e":"# Data Standardization","c3ce3696":"So Below If You Check out the Minimum And Maximum Values Of \"Amount\" Column The Range Is Very Huge, But When You Look At 75% Value You Can See the 75% Value Is Close Of 77 So We Can Say That The \"Amount Column May Have Some Outliers.","de48cfa2":"# Prediction","3bf80310":"So Here What We Are Doning Is We Are Selecting All The Data From Legit Transaction Which Have Amount Between Range of 87.45-88.65 .  \nThis Will Help In Two Ways.\n1. The Average Amount Of \"Amount Column Will Remain The Same\".\n2. We Will Get Rid Of The Imbalance ","df43c0ab":"So Here We Are Standardizing All The Values In All The Columns, Ranging Them Between 0-1","253ee4f5":"As We Can See Below Are No Null Values Present In The Given Data Set","d55bf33b":"# Training Models","19c92464":"Here Are Predict For Test Data As Well Training Data Because,\nWe Want To See How Well Did Our Models Trained Them Self With The Training Data.","ff5cae0b":"# **Credit Card Fraud Detection**","432e803d":"## XGBoost\n## Random Forest","2e1e2e87":"So For This Data Set We Used Random Forest To Achieve 100% Accuracy For Training Data And 99% Accuracy For Test Data And Used XGBoost For This Data Set To Achieve 100% Accuracy In Both Training As Well As Test Data.","a6a912e9":"# Splitting Data","3ed2a74a":"# Data Exploration","db66275f":"Now As Our Models Are All Train Up,\nWe Are Ready To Predict For The Test Data","36c4eb29":"# Splitting Features And Target","0554634f":"So As We Can See Here Both Of Our Models Trained Them Self Pretty Well.\nAnd Given Accuracy Score Of 100% \n\nBut For The Test Data Random Forest Predicted The Credit Card Fraud With 97% Accuracy,\nAnd XGBoost Predicted Each And Every CreditCard Fraud.(100% Accuracy)","4d25d96e":"# Ml Models","5d4449f0":"# Thank You ","86242f97":"# Data Preprocessing","bbc48f41":"# Loading Data","e13c52d2":"As We Can See Here The Data Is Highly Imbalanced As Huge Chunk Of Data Is Of Legit Transaction.","7528ed98":"# Import Libraries","b6a759a2":"# Evaluation"}}