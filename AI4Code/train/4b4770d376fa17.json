{"cell_type":{"cac4fe54":"code","3ece3583":"code","a98f63f7":"code","52c3637c":"code","8ff9860e":"code","8fe0e4c7":"code","e78bce53":"code","2fe43253":"code","87350162":"code","8f833f40":"code","f24528e0":"code","6151f6f7":"code","37e4b837":"code","07575f28":"code","b31f6f20":"code","b329eb7f":"code","f48ea561":"code","d0520695":"code","03625b61":"code","36faf396":"code","8a80f8c3":"code","5788e52f":"code","2c5d7e74":"markdown","ad8399f6":"markdown","25c6c88d":"markdown","e79994cc":"markdown","1fda504d":"markdown","95b1fd26":"markdown","a00ec9f5":"markdown"},"source":{"cac4fe54":"import seaborn as sns\nimport pandas as pd\nimport numpy as np\nRANDOM_SEED = 777","3ece3583":"data = pd.read_csv('..\/input\/mlregression-cabbage-price\/train_cabbage_price.csv')\ndata.head()","a98f63f7":"data['year'].head()","52c3637c":"data['year'] = data['year'] - 20100000\ndata['month'] = data['year']%10000\ndata['year'] = data['year']\/\/10000\ndata['month'] = data['month']\/\/100 + data['month']%100\/30\ndata.head()","8ff9860e":"sns.set()\nsns.pairplot(data)","8fe0e4c7":"x = data.drop('avgPrice', axis=1)\ny = data['avgPrice']\nprint(x.shape)\nprint(y.shape)","e78bce53":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=RANDOM_SEED, shuffle=True)\nprint(x_train.shape)\nprint(x_test.shape)","2fe43253":"# \ub370\uc774\ud130 \ud45c\uc900\ud654\nfrom sklearn.preprocessing import StandardScaler\nscale=StandardScaler()\nx_train_std=scale.fit_transform(x_train)\nx_test_std=scale.transform(x_test)","87350162":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=2, weights='distance')\n\nknn.fit(x_train_std, y_train)\npred = knn.predict(x_test_std)\n\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(pred, y_test)**0.5)","8f833f40":"test = pd.read_csv('..\/input\/mlregression-cabbage-price\/test_cabbage_price.csv')\ntest.head()","f24528e0":"test['year'] = test['year'] - 20100000\ntest['month'] = test['year']%10000\ntest['year'] = test['year']\/\/10000\ntest['month'] = test['month']\/\/100 + test['month']%100\/30\ntest.head()","6151f6f7":"test_std = scale.transform(test)\nprint(test_std.shape)","37e4b837":"pred = knn.predict(test_std)\npred[:5]","07575f28":"submit = pd.read_csv('..\/input\/mlregression-cabbage-price\/sample_submit.csv', index_col=0)\nsubmit.head()","b31f6f20":"submit['Expected'] = pred\nsubmit.head()","b329eb7f":"submit.to_csv('submit.csv')","f48ea561":"x_train = x_train.drop('year', axis=1)\nx_test = x_test.drop('year', axis=1)\nx_train.head()","d0520695":"from sklearn.preprocessing import StandardScaler\nscale=StandardScaler()\nx_train_std=scale.fit_transform(x_train)\nx_test_std=scale.transform(x_test)\nfrom sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=19, weights='distance')\n\nknn.fit(x_train_std, y_train)\nnpred = knn.predict(x_test_std)\n\nfrom sklearn.metrics import mean_squared_error\nprint(mean_squared_error(npred, y_test)**0.5)","03625b61":"test = pd.read_csv('..\/input\/mlregression-cabbage-price\/test_cabbage_price.csv')\ntest['year'] = test['year'] - 20100000\ntest['month'] = test['year']%10000\ntest['year'] = test['year']\/\/10000\ntest['month'] = test['month']\/\/100 + test['month']%100\/30\ntest = test.drop('year', axis=1)\ntest_std = scale.transform(test)\nnpred = knn.predict(test_std)\nnpred[:5]","36faf396":"from sklearn.metrics import mean_squared_error\nprint(mean_squared_error(pred, npred)**0.5)","8a80f8c3":"nsubmit = pd.read_csv('..\/input\/mlregression-cabbage-price\/sample_submit.csv', index_col=0)\nnsubmit['Expected'] = npred\nnsubmit.head()","5788e52f":"nsubmit.to_csv('test.csv')","2c5d7e74":"# \uc2e4\ud5d8 \uacb0\uacfc\nyear\ub97c \uc81c\uac70\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\ub294 RMSE `1451.64240`, \uc81c\uac70\ud55c \ub370\uc774\ud130\ub294 `1235.47720`\uac00 \ub098\uc654\ub2e4.\n\n**\uacb0\ub860**: Train \ub370\uc774\ud130\uc758 \ubc94\uc8fc \uc678\uc758 \ub370\uc774\ud130\ub9cc \uc874\uc7ac\ud558\ub294 Column\uc740 \uc81c\uac70\ud558\ub294 \uac83\uc774 \ub0ab\ub2e4.","ad8399f6":"## Data EDA","25c6c88d":"## \ub0a0\uc9dc \uc804\ucc98\ub9ac\n\ub0a0\uc9dc\ub294 \uc2a4\ucf00\uc77c\uc774 \ub9e4\uc6b0 \ud070\ub370, \uc774\ub97c \ub530\ub85c \uc804\ucc98\ub9ac\ud574\uc8fc\uba74 \uc88b\ub2e4.","e79994cc":"## \uc2e4\ud5d8: Year\ub97c \uc81c\uac70\ud558\uba74 \ub354 \ub098\uc740 \uacb0\uacfc\uac00 \ub098\uc62c\uae4c?\n\ubcf8 \ub370\uc774\ud130\uc5d0\uc11c, test \uc14b\uc740 train \uc14b \uc774\ud6c4 \uae30\uac04\uc758 \ub370\uc774\ud130\ub85c \ub418\uc5b4\uc788\ub2e4. (train \uc14b\uc740 2010~2012\ub144, test \uc14b\uc740 2013\ub144 ~)\n\n\uc989, test\uc14b\uc5d0\uc11c \ub4f1\uc7a5\ud558\ub294 Year\ub294 \ubaa8\ub450 train \uc14b\uc5d0\uc11c \ubcfc \uc218 \uc5c6\ub358 \uac12\ub4e4\uc774\ub2e4. \uadf8\ub7ec\ub098 \uc22b\uc790\uac00 \ucee4\uc9c0\uae30\ub294 \ud558\uae30\uc5d0 \uae30\uc874 \ub370\uc774\ud130\ub4e4\uacfc \uac70\ub9ac\uac00 \uacc4\uc18d \uba40\uc5b4\uc9c0\ub294 \ud6a8\uacfc\ub294 \uc788\uc744 \uac83\uc774\ub2e4.\n\n\uc774\ub54c, year \ub370\uc774\ud130\ub97c \uadf8\ub300\ub85c \ub450\ub294 \uac83\uc774 \ud6a8\uacfc\uc801\uc77c\uae4c? \uc544\ub2c8\uba74 \uc81c\uac70\ud558\ub294 \uac83\uc774 \ud6a8\uacfc\uc801\uc77c\uae4c?","1fda504d":"## Data Split, Pre-Processing","95b1fd26":"# KNN Regression\uc73c\ub85c \uc591\ubc30\ucd94 \uac00\uaca9 \uc608\uce21\ud558\uae30","a00ec9f5":"## Prediction and Submission"}}