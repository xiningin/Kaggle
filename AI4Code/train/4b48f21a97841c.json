{"cell_type":{"5adf7609":"code","3ad397fa":"code","9bbb9095":"code","27676bc0":"code","44f9a7ce":"code","f60f0c98":"code","4686fedf":"code","f4376e19":"markdown","3db3ec2f":"markdown","24bd7117":"markdown","d901f221":"markdown"},"source":{"5adf7609":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport math","3ad397fa":"df = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")\ndata=df.values","9bbb9095":"n_groups = 100\ndf[\"group\"] = 0\nfor i in range(n_groups):\n    ids = np.arange(i*50000, (i+1)*50000)\n    df.loc[ids,\"group\"] = i","27676bc0":"for i in range(n_groups):\n    sub = df[df.group == i]\n    signals = sub.signal.values\n    imax, imin = math.floor(np.max(signals)), math.ceil(np.min(signals))\n    signals = (signals - np.min(signals))\/(np.max(signals) - np.min(signals))\n    signals = signals*(imax-imin)\n    df.loc[sub.index,\"open_channels\"] = [0,] + list(np.array(signals[:-1],np.int))","44f9a7ce":"print(data[:5,1])\nprint(data[:5,2])","f60f0c98":"prediction = np.array(df.open_channels, np.int)\nprint(prediction[:5])","4686fedf":"#To check I am working the metrics right ;-)\ngd=[1,2,3,4,5,6,7,8,9,0]\npr=[1,2,3,4,5,6,7,8,8,0]\n\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import accuracy_score\nprint(\"Regular Cohen's Kappa\", cohen_kappa_score(np.asarray(data[:,2],np.int),np.array(df.open_channels, np.int),weights=\"quadratic\"))\nprint(\"Quadratic Cohen's Kappa\", cohen_kappa_score(np.asarray(data[:,2],np.int),np.array(df.open_channels, np.int)))\nprint(\"Accuracy\", accuracy_score(data[:,2],np.array(df.open_channels, np.int)))\nprint(\"test Accuracy\", accuracy_score(gd,pr))","f4376e19":"Interesting! Of course we chose a really short and pure test to try and make it relatively achievable, but I am surprised by this one!\nLet's look and see how it performs with the traing data itself; treating THAT as test data if you get me","3db3ec2f":"OK, I guess I messed up, perhaps you could help with this?","24bd7117":"Looks good!\nSo get the metrics, Kappa, Quadratic Kappa and Accuracy;","d901f221":"We are not going to bother with sample submission, let's just test this smoothing method against the labels in the training data. Should be fine."}}