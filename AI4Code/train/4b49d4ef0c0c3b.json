{"cell_type":{"28566ce3":"code","e131013f":"code","8421bc61":"code","28db5022":"code","9d4cfed1":"code","d8c30f5c":"code","b6721aee":"code","f7d548a7":"code","559333e4":"code","3bda1c65":"code","dd32b0ea":"code","a7db5d28":"markdown","741cc6de":"markdown","52abb070":"markdown","05a2a188":"markdown","2fb41eb5":"markdown","38452493":"markdown","590a7e95":"markdown","5f9904a0":"markdown"},"source":{"28566ce3":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # plotting\nimport plotly.express as px # fancy plotting\n\n# import data\npositions = pd.read_csv(\"..\/input\/bwsc-2019-car-positions\/bwsc2019-car-positions.csv\")","e131013f":"positions.gps_when = pd.to_datetime(positions.gps_when)\npositions.drop_duplicates(subset=[\"gps_when\", \"car_name\"], inplace=True)","8421bc61":"positions.head()","28db5022":"positions.shape","9d4cfed1":"positions.describe()","d8c30f5c":"print(\"Participating countries: {}\".format(positions.country.unique()))\n\nprint(\"Number of participating teams: {}\".format(len(positions.name.unique())))\n\nprint(\"Participating cars: {}\".format(positions.car_name.unique()))\n","b6721aee":"positions.groupby(\"class_id\").car_name.unique()","f7d548a7":"reduced_data = positions.sample(n=2000)\n\nfig = px.scatter_geo(reduced_data, lat=\"lat\", lon=\"lng\")\nfig.show()","559333e4":"# filter class_id (5 = challenger, 6 = cruiser, 7 = adventure)\npositions_filtered = positions[positions.class_id == 5]\n\nfig, ax = plt.subplots(figsize=(18,10))\nfor label, df in positions_filtered.groupby(\"car_name\"):\n    df.plot(x=\"gps_when\", y=\"dist_adelaide\", ax=ax, label=label)","3bda1c65":"def haversine_np(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n\n    All args must be of equal length.    \n    \"\"\"\n    lon1, lat1, lon2, lat2 = map(np.radians, [lon1, lat1, lon2, lat2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = np.sin(dlat\/2.0)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/2.0)**2\n\n    c = 2 * np.arcsin(np.sqrt(a))\n    meters = 6367.0e3 * c\n    return meters\n","dd32b0ea":"car = \"BluePoint\"\n\n# clean DataFrame of positions for the selected car\ncar_position = positions[positions.car_name == car].sort_values(by=\"gps_when\").reset_index(drop=True)\n\n# calculate distance between GPS points and velocity\ncar_position[\"gps_dist\"] = haversine_np(car_position.lat.shift(), car_position.lng.shift(), car_position.loc[1:, 'lat'], car_position.loc[1:, 'lng']).fillna(0)\ndt = car_position.gps_when.diff().fillna(pd.Timedelta(seconds=1000)).map(pd.Timedelta.total_seconds)\ncar_position[\"velocity\"] = car_position.gps_dist \/ dt\n\nfig, ax = plt.subplots(figsize=(18,10))\ncar_position.plot(x=\"gps_when\", y=\"velocity\", ax=ax)\n\ntotal_distance = car_position.gps_dist.sum()\n\nprint(\"Distance driven: {}km\".format(total_distance\/1.0e3))","a7db5d28":"# Performance of a single car","741cc6de":"## What kind of data does the dataset contain?\nLet's have a look at the rows and colums, the number of entries and a general description of the data","52abb070":"# Route of the race\n","05a2a188":"# Comparison of cars in the same class","2fb41eb5":"# Importing and understanding the data","38452493":"## Preprocess \nConvert GPS timestamps from `string` to `datetime64` and remove duplicate entries","590a7e95":"Helper function to get the distance between two GPS coordinates","5f9904a0":"Participants in each class:"}}