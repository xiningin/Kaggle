{"cell_type":{"63b51ec5":"code","916b347b":"code","d34c6a80":"code","0c41f948":"code","ad08def8":"code","f8c45615":"code","edd374b9":"code","e871bb4f":"code","079f5507":"code","47e98303":"code","5c31b892":"code","63779d5f":"code","44af41a2":"code","acf2849f":"code","e6a4e4d9":"code","2d8c8ea5":"code","9bf7b98f":"code","0599a197":"code","59568463":"code","9dbf102d":"code","008e14a5":"code","35f3173d":"code","9e40da7d":"code","446c7b47":"code","a1f0e44e":"code","72e6cf2d":"code","203d7979":"code","0186d0ca":"code","623a3613":"code","c2ae6fc1":"code","a6aca4b8":"code","c2c342b8":"code","03cb4c05":"code","41c332a2":"markdown","b23583ba":"markdown","1b158855":"markdown","9c3f5753":"markdown","34c54685":"markdown","aecd3327":"markdown","e77374c7":"markdown"},"source":{"63b51ec5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","916b347b":"dataset = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","d34c6a80":"import pandas_profiling as pp\npp.ProfileReport(dataset)","0c41f948":"dataset .head()","ad08def8":"# from sklearn.impute import SimpleImputer\n\n# SimpleImputer = SimpleImputer() # Your code here\n# dataset = pd.DataFrame(SimpleImputer.fit_transform(dataset))","f8c45615":"# dataset = dataset.dropna()","edd374b9":"dataset=dataset.fillna(0)","e871bb4f":"# dataset[\"ph\"] = dataset[\"ph\"].fillna((dataset[\"ph\"].mean()))\n# dataset[\"Sulfate\"] = dataset[\"Sulfate\"].fillna((dataset[\"Sulfate\"].mean()))\n# dataset[\"Trihalomethanes\"] = dataset[\"Trihalomethanes\"].fillna((dataset[\"Trihalomethanes\"].mean()))","079f5507":"# Q1 = dataset.quantile(0.25)\n# Q3 = dataset.quantile(0.75)\n# IQR = Q3 - Q1\n# dataset = dataset[~((dataset < (Q1 - 1.5 * IQR)) |(dataset > (Q3 + 1.5 * IQR))).any(axis=1)]","47e98303":"sns.heatmap(dataset.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5c31b892":"x = dataset.iloc[:,0:9]\ny=dataset.iloc[:,9:]","63779d5f":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=42)","44af41a2":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.fit_transform(x_test)","acf2849f":"xgb_params = {'objective': 'binary:logistic',\n              'use_label_encoder': False,\n              'n_estimators': 2600,\n              'learning_rate': 0.04,\n              'subsample': 0.66,\n              'colsample_bytree': 0.1,\n              'max_depth': 8,\n              'booster': 'gbtree',\n              'gamma': 5.5,\n              'reg_alpha': 81.8,\n              'reg_lambda': 72.0,\n              'random_state': 42,\n              'tree_method': 'gpu_hist',\n              'n_jobs': 4}","e6a4e4d9":"def threshold(x):\n    if x > 0.55:\n        return 1\n    else:\n        return 0","2d8c8ea5":"from xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBClassifier","9bf7b98f":"from sklearn.linear_model import LinearRegression\n# Training a model on a full dataset\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","0599a197":"# preds.apply(threshold)\npreds = np.array([threshold(i) for i in preds])","59568463":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_test,preds)\nprint(\"Linear Regression accuracy value: {:.2f}\".format(accuracy))","9dbf102d":"from sklearn.tree import DecisionTreeRegressor\n# Training a model on a full dataset\nmodel = DecisionTreeRegressor()\nmodel.fit(x_train, y_train)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","008e14a5":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_test,preds)\nprint(\"DecisionTreeRegressor accuracy value: {:.2f}\".format(accuracy))","35f3173d":"# Training a model on a full dataset\nmodel = XGBRegressor()\nmodel.fit(x_train, y_train,\n          verbose=False)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","9e40da7d":"# preds.apply(threshold)\npreds = np.array([threshold(i) for i in preds])","446c7b47":"preds","a1f0e44e":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_test,preds)\nprint(\"XGBRegressor accuracy value: {:.2f}\".format(accuracy))","72e6cf2d":"# Training a model on a full dataset\nmodel = XGBClassifier()\nmodel.fit(x_train, y_train,\n          verbose=False)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","203d7979":"accuracy=accuracy_score(y_test,preds)\nprint(\"XGBClassifier accuracy value: {:.2f}\".format(accuracy))","0186d0ca":"# Training a model on a full dataset\nmodel = CatBoostRegressor()\nmodel.fit(x_train, y_train,\n          verbose=False)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","623a3613":"# preds.apply(threshold)\npreds = np.array([threshold(i) for i in preds])","c2ae6fc1":"accuracy=accuracy_score(y_test,preds)\nprint(\"XGBClassifier accuracy value: {:.2f}\".format(accuracy))","a6aca4b8":"# Training a model on a full dataset\nmodel = LGBMRegressor()\nmodel.fit(x_train, y_train,\n          verbose=False)\n# Making probability of class \"1\" predictions\npreds = model.predict(x_test)","c2c342b8":"# preds.apply(threshold)\npreds = np.array([threshold(i) for i in preds])","03cb4c05":"accuracy=accuracy_score(y_test,preds)\nprint(\"LGBMRegressor accuracy value: {:.2f}\".format(accuracy))","41c332a2":"# Linear Regression","b23583ba":"# LGBMRegressor","1b158855":"# Decision Tree","9c3f5753":"# XGB Classifier","34c54685":"# XGB Regressor","aecd3327":"# Training","e77374c7":"# Catboost"}}