{"cell_type":{"f2ce3f19":"code","69669bd6":"code","a8504ffc":"code","9010b124":"code","6a56af01":"code","bf5175f5":"code","c4ec1350":"code","2768d62b":"code","46115cff":"markdown","8af83298":"markdown","ec75c552":"markdown","aef31f55":"markdown","c42c8531":"markdown","f6dfd640":"markdown","604b4729":"markdown"},"source":{"f2ce3f19":"import numpy as np\nfrom keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D\nfrom keras.layers import Dense, Activation, Dropout, Flatten, GlobalAveragePooling2D\nfrom keras import optimizers\nfrom keras.models import Sequential, Model\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom keras.applications.inception_v3 import InceptionV3\n\nimport tensorflow as tf\n\nusing_gpu = tf.test.is_gpu_available()\n\nif using_gpu:\n    print(\"Using GPU - performance boost activated\")\nelse:\n    print(\"Not using GPU - performance may be slower\")","69669bd6":"IMG_SIZE = 150\nLEARNING_RATE = 0.001\nEPOCHS = 5\nBATCH_SIZE = 32\n\nTRAIN_SIZE = 8005\nTEST_SIZE = 2023\n\nTRAIN_DIR = '..\/input\/cat-and-dog\/training_set\/training_set'\nTEST_DIR = '..\/input\/cat-and-dog\/test_set\/test_set'","a8504ffc":"datagen = ImageDataGenerator(rescale=1.\/255)\n\nprint(\"Training Set\")\ntrain_gen = datagen.flow_from_directory(\n    TRAIN_DIR,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    classes=['dogs', 'cats'],\n    batch_size=BATCH_SIZE)\nprint(\"\")\n\nprint(\"Test Set\")\ntest_gen = datagen.flow_from_directory(\n    TEST_DIR,\n    target_size=(IMG_SIZE, IMG_SIZE),\n    classes=['dogs', 'cats'],\n    batch_size=BATCH_SIZE)","9010b124":"# Initialize Inception Model\ninception_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))\n\nfor layer in inception_model.layers:\n    layer.trainable = False\n\n# Add top layers\nx = inception_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(256, activation='relu', name='fc1')(x)\nx = Dropout(0.5)(x)\npredictions = Dense(2, activation='softmax', name='predictions')(x)\n\n# Combine base model with top layers\nmodel = Model(inception_model.input, predictions)\n\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy'])\n\nprint(\"Modified Inception V3 model ready\")","6a56af01":"# Begin training (Rocky montage music - 'Getting stronga!')\ntraining = model.fit_generator(\n    generator=train_gen,\n    steps_per_epoch= TRAIN_SIZE \/\/ BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=test_gen,\n    validation_steps= TEST_SIZE \/\/ BATCH_SIZE)","bf5175f5":"import matplotlib.pyplot as plt  \n\nfig, (ax0, ax1) = plt.subplots(ncols=2, figsize=(16,6))\n\n# loss history\nax0.plot(training.history['loss'])\nax0.plot(training.history['val_loss'])\nax0.set_title('Model Loss')\nax0.set_ylabel('Loss')\nax0.set_xlabel('Epoch')\nax0.legend(['Train', 'Test'], loc='upper right')\n\n#accuracy history\nax1.plot(training.history['accuracy'])\nax1.plot(training.history['val_accuracy'])\nax1.set_title('Model Accuracy')\nax1.set_ylabel('Accuracy')\nax1.set_xlabel('Epoch')\nax1.legend(['Train', 'Test'], loc='upper left')\n\nplt.show()","c4ec1350":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n\ndef predict(img_path):\n    # show image\n    show_image = mpimg.imread(TEST_IMG_PATH)\n    imgplot = plt.imshow(show_image)\n\n    # resize image and turn into array\n    img = load_img(img_path, target_size=(IMG_SIZE, IMG_SIZE))\n    x = img_to_array(img)\n    x = x.reshape((1,) + x.shape)\n    x = x\/255\n    result = model.predict(x).tolist()\n\n    # make a prediction with confidence\n    if result[0][0] >= 0.5:\n        prediction = 'DOG \ud83d\udc36'\n        confidence = (\"{:.2%}\".format(result[0][0]))\n    else:\n        prediction = 'CAT \ud83d\udc31'\n        confidence = (\"{:.2%}\".format(result[0][1]))\n        \n    print(\"I am {0} confident that this is a {1}\".format(confidence, prediction))\n    \nprint(\"Prediction function ready\")","2768d62b":"TEST_IMG_PATH = \"..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4015.jpg\"\n\npredict(TEST_IMG_PATH)","46115cff":"# 1. \ud83d\udce6 Importing Packages","8af83298":"# \ud83d\udc31\ud83d\udc36 Cat or Dog Machine Learning Exercise (Part II)\n\nIn this notebook, we are going to learn how to increase the accuracy of our model using **Transfer Learning**, where we can transfer information discovered by a previous machine learning model into our own.\n\nWe are going to use **Inception v3**, which is a pre-trained neural network trained on more than a million images from the **ImageNet** database.\n\n","ec75c552":"# 5. \ud83c\udfcb\ufe0f Train Model\n\n- **Loss** - a number indicating how bad the model's prediction was on a single example. We want closer to 0.\n- **Accuracy** - the fraction of predictions our model got right. We want closer to 1.\n- **Val Loss** - the loss computed on the validation set (data that have never been 'seen' by the model)\n- **Val Accuracy** - the accuracy computed on the validation set (data that have never been 'seen' by the model)","aef31f55":"# 2. \ud83c\udf9b\ufe0f Defining our Hyperparameters","c42c8531":"# 6. \ud83d\udcc9 Visualizing Training Results","f6dfd640":"# 3. \ud83d\uddbc\ufe0f Gathering our Training Images\n\n","604b4729":"# 4. \ud83e\udd16 Building the Model (with Inception V3)"}}