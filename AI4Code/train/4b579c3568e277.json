{"cell_type":{"5d5e91a3":"code","cedd4f69":"code","f8b8c1ce":"code","da9c6a6d":"code","f7226930":"code","4cdaf267":"code","863a105f":"code","7fbf81ab":"code","85adc23d":"code","b6e492ae":"code","258ecf04":"code","caf93f59":"code","a829dae4":"code","73148eea":"code","9b4f187d":"code","ce9d4a58":"code","65bc0d54":"code","1f70efa5":"code","aaa35883":"code","c2be2fe7":"code","eaeff454":"code","4766d99d":"code","05a23eea":"code","f63d57d3":"code","9c9446ec":"code","979cd721":"code","222b0790":"code","9400e4bf":"code","118444cc":"code","69b1c1d0":"code","f8deb228":"code","dc831048":"code","9c98e11a":"code","0e96072b":"code","109533d1":"code","5cb2e31c":"code","1b51ce9d":"code","c1dd20c8":"code","e7c97619":"code","2eb7fa02":"code","83143dcc":"code","2922e80b":"code","3eed2a2e":"code","dcf9dc0b":"code","9fb7ae51":"code","bedaccbc":"code","0e166e61":"code","adace420":"code","c03aaf73":"markdown","51de990c":"markdown","a6668eb0":"markdown","bccd0f89":"markdown","e491916f":"markdown","6dd87952":"markdown","9c9d3dc6":"markdown"},"source":{"5d5e91a3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","cedd4f69":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","f8b8c1ce":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","da9c6a6d":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","f7226930":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","4cdaf267":"train.isnull().sum()","863a105f":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","7fbf81ab":"test.isnull().sum()","85adc23d":"sns.countplot(x=\"Survived\",data=train)","b6e492ae":"sns.countplot(x=\"Sex\",data=train)","258ecf04":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","caf93f59":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","a829dae4":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","73148eea":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","9b4f187d":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","ce9d4a58":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","65bc0d54":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","1f70efa5":"train.dtypes","aaa35883":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","c2be2fe7":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","eaeff454":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","4766d99d":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","05a23eea":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","f63d57d3":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","9c9446ec":"df.isnull().sum()","979cd721":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","222b0790":"df.isnull().sum()","9400e4bf":"#GET SOME STATISTICS.\ndf.describe()","118444cc":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","69b1c1d0":"df.head()","f8deb228":"df.head()","dc831048":"from sklearn.model_selection import train_test_split","9c98e11a":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","0e96072b":"def models(x_train,y_train):\n    # USE RANDOM FOREST CLASSSIFIER\n    from sklearn.ensemble import RandomForestClassifier \n    forest=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\n    forest.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR RANDOM FOREST CLASSIFIER MODEL.\n    print('Random forest training accuracy:',forest.score(x_train,y_train))\n    \n    return forest","109533d1":"#GET AND TRAIN THE RANDOM FOREST CLASSIFIER MODELS\nmodel=models(x_train,y_train)","5cb2e31c":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","1b51ce9d":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}","c1dd20c8":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","e7c97619":"#DROP THE UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","2eb7fa02":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","83143dcc":"df1.isnull().sum()","2922e80b":"#REPLACING ALL THE NULL VALUES.\ndf1.fillna(df1.Age.mean(),inplace=True)\nround(df1[\"Age\"],1)\ndf1.head(10)","3eed2a2e":"df1.isnull().sum()","dcf9dc0b":"#GET SOME STATISTICS.\ndf1.describe()","9fb7ae51":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean()\/df1.Fare.std()))\n","bedaccbc":"df1.head()","0e166e61":"pred=model.predict(df1)","adace420":"pred","c03aaf73":"# PRINT THE PREDICTION ON RANDOM FOREST CLASSIFIER MODEL","51de990c":"# FEATURE SCALLING.","a6668eb0":"# CLEANING THE DATASET","bccd0f89":"# CREATE A FUNCTION WITH RANDOM FOREST CLASSIFIER MODEL","e491916f":"# IMPORTING PACKAGES.","6dd87952":"# DATA MODELLING","9c9d3dc6":"# DATA ANALYSIS."}}