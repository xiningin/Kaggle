{"cell_type":{"87d28ad5":"code","ce26cba8":"code","bdb5a75f":"code","9d91e576":"code","3681555b":"code","c799c8d5":"code","0ae3530d":"code","fd1ada77":"code","8884e4bf":"code","5ad757d3":"code","ded8d2bc":"code","18a7fe00":"code","b186f9b4":"code","6dfa2f60":"code","734108e3":"code","138066f4":"code","df9e5c1a":"code","d55e1050":"code","1eeccf68":"code","2e6e9356":"code","20e15044":"code","7b2a64ec":"code","318008b8":"code","663c8f7f":"code","4bf800b1":"code","ae90a2b8":"code","1ae4a906":"code","ee212953":"code","2da4fcd0":"code","a40146e6":"code","b05ef397":"code","be62f566":"code","11c5435f":"markdown","6a4698bd":"markdown","e038987c":"markdown","112ac0b4":"markdown","dd9f8e81":"markdown","9a79303e":"markdown","8dbdb9f1":"markdown"},"source":{"87d28ad5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nedu = pd.read_csv('..\/input\/datalab3\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","ce26cba8":"football","bdb5a75f":"edu","9d91e576":"edu.head()","3681555b":"edu.tail()","c799c8d5":"edu.describe()","0ae3530d":"edu['Value']","fd1ada77":"edu[10:14]","8884e4bf":"edu.iloc[90:94][['TIME','GEO']]","5ad757d3":"edu[edu['Value'] > 6.5].tail()","ded8d2bc":"edu[edu[\"Value\"].isnull()].head()","18a7fe00":"edu.max(axis = 0)","b186f9b4":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","6dfa2f60":"s = edu[\"Value\"]\/100\ns.head()","734108e3":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","138066f4":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","df9e5c1a":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","d55e1050":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","1eeccf68":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","2e6e9356":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","20e15044":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","7b2a64ec":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","318008b8":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","663c8f7f":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","4bf800b1":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","ae90a2b8":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","1ae4a906":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","ee212953":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","2da4fcd0":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first')","a40146e6":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","b05ef397":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","be62f566":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","11c5435f":"1. We observe that the size of the edu DataFrame is 384 rows x 3 columns: Time Geo and Value. ","6a4698bd":"4. The method describe will give statistical informations about the DataBase such as the number of values, the mean, the standard deviation, the quartiles, min and max values.. for each column.","e038987c":"6. The operation edu['Value'] > 6.5 returns True if the number inside the 'Value' column is superior to 6.5 and False if it is inferior. \n\nSo, the operation edu[edu['Value'] > 6.5] returns every row for each the operation edu['Value'] > 6.5 = True. ","112ac0b4":"7. The parameter ascending defines whether the datas should be ranked using ascending order or not. In our case the data are ranked in default mode which means in descending order, countries whith non NaN values are ranked from 1 to 22. 1st place is for the country which has the maximum total public expenditure on education as % of GDP, for all levels of education combined.","dd9f8e81":"3. The method tail, as opposite to the head method, will give the last rows of the DataBase. This time, ff we give a number n as argument to the method tail it will display the n last rows. ","9a79303e":"2. If we give a number n as argument to the method head it will display the n first rows. ","8dbdb9f1":"5. This index returns the rows 90 to 93 and the values inside the columns Time and Geo corresponding to each rows."}}