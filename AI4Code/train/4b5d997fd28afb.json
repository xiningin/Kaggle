{"cell_type":{"5a90b73e":"code","ce545fd3":"code","a0e81ddb":"code","6cbe2f59":"code","d9cba600":"code","cd3ca757":"code","1edaa1ea":"code","6a10885e":"code","10b7edb7":"code","dcfb0015":"code","459066fc":"code","540f3700":"code","52f21fbf":"code","4a1d4537":"code","85bb4d60":"code","f31b57d3":"code","c8c1f932":"code","08020819":"code","76b76b14":"code","aaf6e51b":"code","5bf9d0e5":"code","02053f29":"code","c578fe28":"code","a27e3f6b":"code","71ea829d":"code","13b7e920":"code","96b164d3":"code","0f45ca4b":"code","ec073350":"code","20bd04d2":"code","d3bb451f":"code","92f84283":"code","a645a1e2":"code","df58af04":"code","fb3462b5":"code","56cd78c4":"code","08b19f2a":"code","c8c4935c":"code","a05d05dd":"code","5ea78494":"code","225c80b5":"code","639f02ca":"code","4e885202":"code","68b99981":"markdown","898ad12b":"markdown","8ab30684":"markdown","ae4ff940":"markdown","52a58f87":"markdown","e08a16e3":"markdown","82a0c651":"markdown","b7c77756":"markdown","9035c935":"markdown","db02036d":"markdown"},"source":{"5a90b73e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","ce545fd3":"bike_train = pd.read_csv(r'..\/input\/bike-sharing-demand\/train.csv')","a0e81ddb":"bike_train","6cbe2f59":"bike_train.columns","d9cba600":"bike_train.index.values","cd3ca757":"bike_train.info()","1edaa1ea":"bike_train[\"Date\"] = bike_train.datetime.apply(lambda x : x.split()[0])\nbike_train[\"Date\"]   #\ub0a0\uc9dc split","6a10885e":"bike_train[\"Time\"] = bike_train.datetime.apply(lambda x : x[11:13].split(':')[0])\nbike_train[\"Time\"] = pd.to_numeric(bike_train.Time)\nbike_train[\"Time\"]  #\uc2dc\uac04 split","10b7edb7":"bike_train[\"Year\"] = bike_train.Date.apply(lambda x : x.split('-')[0])\nbike_train[\"Year\"] = pd.to_numeric(bike_train.Year)\nbike_train[\"Year\"]  # date \uc911 \uc5f0\ub3c4 split","dcfb0015":"bike_train[\"Month\"] = bike_train.Date.apply(lambda x : x.split('-')[1])\nbike_train[\"Month\"] = pd.to_numeric(bike_train.Month)\nbike_train[\"Month\"]  #date \uc911 \uc6d4 split","459066fc":"bike_train[\"Day\"] = bike_train.Date.apply(lambda x : x.split('-')[2])\nbike_train[\"Day\"] = pd.to_numeric(bike_train.Day)\nbike_train[\"Day\"]   # date \uc911 \uc77c split","540f3700":"pd.concat([bike_train[\"Date\"],bike_train[\"Time\"], bike_train[\"Year\"], bike_train[\"Month\"], bike_train[\"Day\"] ], axis=1)","52f21fbf":"bike_train = bike_train.drop('Date', axis=1)","4a1d4537":"bike_train   ","85bb4d60":"bike_train.info()","f31b57d3":"sns.factorplot(x='Time', y='count', data=bike_train, kind='bar',size=5,aspect=1.5)","c8c1f932":"bike1 = bike_train[bike_train['Month']==1].groupby('Day')['count'].mean()\nbike2 = bike_train[bike_train['Month']==2].groupby('Day')['count'].mean()\nbike3 = bike_train[bike_train['Month']==3].groupby('Day')['count'].mean()\nbike4 = bike_train[bike_train['Month']==4].groupby('Day')['count'].mean()\nbike5 = bike_train[bike_train['Month']==5].groupby('Day')['count'].mean()\nbike6 = bike_train[bike_train['Month']==6].groupby('Day')['count'].mean()\nbike7 = bike_train[bike_train['Month']==7].groupby('Day')['count'].mean()\nbike8 = bike_train[bike_train['Month']==8].groupby('Day')['count'].mean()\nbike9 = bike_train[bike_train['Month']==9].groupby('Day')['count'].mean()\nbike10 = bike_train[bike_train['Month']==10].groupby('Day')['count'].mean()\nbike11 = bike_train[bike_train['Month']==11].groupby('Day')['count'].mean()\nbike12 = bike_train[bike_train['Month']==12].groupby('Day')['count'].mean()\nbike13 = bike_train.groupby('Day')['count'].mean()","08020819":"bike_train_Month = pd.DataFrame({'Jan':bike1,'Fab':bike2,'Mar':bike3,'Apr':bike4,'May':bike5,'Jun':bike6,'Jul':bike7,'Aug':bike8,'Sep':bike9,'Oct':bike10,'Nov':bike11,'Dec':bike12})","76b76b14":"bike_train_Month","aaf6e51b":"plt.style.use('seaborn-darkgrid')   #Initialize the figure\npalette = plt.get_cmap('rainbow')      # create a color palette\nfig = plt.figure(figsize=(16,12))\nfig.suptitle(\"Bike demands by month and date\", fontsize='x-large')\n# multiple line plot\nnum=0\nfor column in bike_train_Month:\n    num+=1 \n    plt.subplot(4,3, num)\n    \n    plt.plot(bike_train_Month[column], marker='', color= palette(num), linewidth=1.9, alpha=0.9, label=column)\n    \n    plt.xlim(0, 20)\n    plt.ylim(50, 300)\n    plt.xticks([0,2,4,6,8,10,12,14,16,18,20])\n    if num in range(10) :\n        plt.tick_params(labelbottom='off')\n    if num not in [1,4,7,10] :\n        plt.tick_params(labelleft='off')\n        \n    plt.title(column, loc='left', fontsize=12, fontweight=0, color=palette(num))\n\n    # Axis title\n    plt.xlabel('Day')\n    plt.ylabel('count')","5bf9d0e5":"plt.style.use('seaborn-darkgrid')\npalette = plt.get_cmap('Set3')\nfig = plt.figure(figsize=(12,8))\nplt.xlabel(\"Day\")\nplt.ylabel(\"count\")\nplt.title(\"Bike demends by month\", loc='left', fontsize=20, fontweight=0, color='black')\n\nnum=0\n# multiple line plot\nfor column in bike_train_Month:\n    num+=1\n    plt.plot(bike_train_Month[column], marker='', color= palette(num), linewidth=2, alpha=0.9)\n    plt.plot(bike13, marker='', color= 'blue', linewidth=4, alpha=0.9)\nnum=0\nfor i in bike_train_Month.values[12][0:]:\n    num+=1\n    name=list(bike_train_Month)[num]\n    plt.text(10.2, i, name, horizontalalignment='left', size='small', color='black')\n\nplt.text(10.2, bike13, 'Average demend', horizontalalignment='left', size='small', color='blue')\n","02053f29":"weekend = bike_train.loc[(bike_train['holiday']== 0) & (bike_train['workingday'] == 0), : ]\nweekend\n#\uacf5\ud734\uc77c\uc740 \uc544\ub2c8\uc9c0\ub9cc \uc8fc\ub9d0","c578fe28":"weekday = bike_train.loc[(bike_train['holiday']== 0) & (bike_train['workingday'] == 1), : ]\nweekday\n# \uc8fc\uc911. \uc77c\ud558\ub294 \ub0a0","a27e3f6b":"holiday = bike_train.loc[(bike_train['holiday']== 1) & (bike_train['workingday'] == 0), : ]\nholiday\n# \uc8fc\ub9d0\uc774\uace0 \uacf5\ud734\uc77c","71ea829d":"holidayInworkday = bike_train.loc[(bike_train['holiday']== 1) & (bike_train['workingday'] == 1), : ]\nholidayInworkday    # \ub370\uc774\ud130 \uc5c6\uc74c. \uacf5\ud734\uc77c\uc774\uba74\uc11c \uc77c\ud558\ub294 \ub0a0 \uc77c \uc218 \uc5c6\uc74c.. \uadf8\ub807\ub2e4\uace0 \ud55c\ub2e4..","13b7e920":"bikeholiday =  pd.DataFrame({'Time':bike_train['Time'],'weekend':weekend['count'], 'weekday':weekday['count'], 'holiday':holiday['count']})","96b164d3":"# blue one\nplt.plot('Time', 'count', data= weekend.groupby('Time')['count'].max().reset_index(), linestyle='-', marker='o')\n# yellow one\nplt.plot('Time', 'count', data= weekday.groupby('Time')['count'].max().reset_index(), linestyle='-', marker='o')\n# green one\nplt.plot('Time', 'count', data= holiday.groupby('Time')['count'].max().reset_index(), linestyle='-', marker='o')\nplt.title('Daily bicycle demand based on holidays',fontsize=12, color='black')\nplt.xlabel(\"Time\")\nplt.ylabel('count')","0f45ca4b":"plt.plot('temp', 'count', data=bike_train, linestyle='', marker='o', markersize=0.7)\nplt.xlabel(\"Temperature\")\nplt.ylabel(\"count\")","ec073350":"plt.plot('atemp', 'count', data=bike_train, linestyle='', marker='o', markersize=0.7)\nplt.xlabel(\"Haptic Temperature\")\nplt.ylabel(\"count\")","20bd04d2":"plt.plot('humidity', 'count', data=bike_train, linestyle='', marker='o', markersize=0.7)\nplt.xlabel(\"Humidity\")\nplt.ylabel(\"count\")","d3bb451f":"plt.plot('windspeed', 'count', data=bike_train, linestyle='', marker='o', markersize=0.7)\nplt.xlabel(\"Wind speed\")\nplt.ylabel(\"count\")","92f84283":"bike_train = bike_train.drop(\"datetime\", axis=1)","a645a1e2":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics","df58af04":"X = bike_train[['temp', 'holiday',  'atemp', 'humidity', 'Month', 'Day', 'weather', 'season', 'workingday', 'windspeed']]\ny = bike_train['count']\nX_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=0.3, random_state=42  )\nforest = RandomForestClassifier(n_estimators=100, random_state=42)\nforest.fit(X_train, y_train)","fb3462b5":"print(\"Accuracy : \", forest.score(X_test, y_test))","56cd78c4":"from sklearn.ensemble import RandomForestRegressor\nX = bike_train[['temp', 'holiday', 'atemp', 'humidity', 'Month', 'Day', 'weather', 'season', 'workingday', 'windspeed' ]]\ny = bike_train['count']\nX_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=0.3, random_state=42 )\nforest_reg = RandomForestRegressor(n_estimators=100)\nforest_reg.fit(X_train, y_train)","08b19f2a":"print(\"Accuracy :\", forest_reg.score(X_test, y_test))","c8c4935c":"from sklearn.linear_model import LinearRegression\nX = bike_train[['temp', 'holiday', 'atemp', 'humidity', 'Month', 'Day', 'weather', 'season', 'workingday', 'windspeed' ]]\ny = bike_train['count']\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)","a05d05dd":"print(\"Accuracy :\", lin_reg.score(X_test, y_test))","5ea78494":"from sklearn.preprocessing import StandardScaler\nX = bike_train[['temp', 'holiday', 'atemp', 'humidity', 'Month', 'Day', 'weather', 'season', 'workingday', 'windspeed' ]]\ny = bike_train['count']\n\n\nscaler = StandardScaler()\nscaler.fit(X)\nX_scaled = scaler.transform(X)","225c80b5":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca.fit(X_scaled)\n\nX_pca = pca.transform(X_scaled)\nprint(\"\uc6d0\ubcf8 \ub370\uc774\ud130 \ud615\ud0dc: {}\".format(str(X_scaled.shape)))\nprint(\"\ucd95\uc18c\ub41c \ub370\uc774\ud130 \ud615\ud0dc: {}\".format(str(X_pca.shape)))","639f02ca":"plt.figure(figsize=(8,8))\nplt.plot(X_pca[y>500,0], X_pca[y>500,1], 'bo')\nplt.plot(X_pca[y<30,0], X_pca[y<30,1], 'ys')\nplt.xlabel('1st principal component')\nplt.ylabel('2nd principal component')","4e885202":"pca.explained_variance_ratio_","68b99981":"* Random Forest Regressor","898ad12b":"### \uc2dc\uac04\ub300\uc640 \uc790\uc804\uac70 \uc218\uc694\uc758 \uc0c1\uad00\uad00\uacc4\n#### \ud558\ub8e8 \uc911 \uc5b4\ub290 \uc2dc\uac04\ub300\uc5d0 \uc790\uc804\uac70\ub97c \ub9ce\uc774 \ud0c8\uae4c","8ab30684":"### \ub0a0\uc528\uc640 \uc790\uc804\uac70 \uc218\uc694\uc758 \uc0c1\uad00\uad00\uacc4","ae4ff940":"### \uc559\uc0c1\ube14 \ud559\uc2b5\uc744 \ud1b5\ud55c \uc608\uce21","52a58f87":"### PCA","e08a16e3":"\ub370\uc774\ud130 \uc804\ucc98\ub9ac","82a0c651":"* Random Forest Cassifier","b7c77756":"### Linear Regression","9035c935":"#### \uc6d4\ubcc4, \ub0a0\uc9dc\ubcc4 \uc790\uc804\uac70 \uc218\uc694\ub294 \uc5b4\ub5bb\uac8c \ub420\uae4c","db02036d":"### \ud734\ubb34\uc77c \uc5ec\ubd80\uc640 \uc790\uc804\uac70 \uc218\uc694\uc758 \uc0c1\uad00\uad00\uacc4"}}