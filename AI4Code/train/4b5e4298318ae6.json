{"cell_type":{"e5c63b01":"code","f0d1f42c":"code","b567ed5d":"code","dfcde365":"code","8877b6b1":"code","63aa8be7":"code","6887f79c":"code","2ce37e1c":"code","cbee67f8":"code","c2c740f5":"code","59a6ab03":"code","6309f00f":"code","fc00c2c6":"code","417e4903":"code","6f97d788":"code","eb68db7f":"code","36905994":"code","06812cb4":"code","a010964b":"code","58a543e5":"code","4e40345f":"code","fda33285":"code","58cc6f95":"code","b6d2029b":"code","e0bf8e54":"code","fc8d35a2":"code","11e3125c":"code","9217c0cb":"code","20e9362b":"code","43da7e9e":"code","cd9215ef":"code","3aa2b756":"code","934f2f49":"code","94e2fcab":"code","cd57a1cc":"code","3e3c3e62":"code","857673d0":"code","7ec730f9":"code","e553de6f":"code","e538a82b":"code","fb794e29":"code","b7436fe7":"code","ba8bc7f1":"code","1a2834d8":"code","7c7dd8b5":"code","5573eb62":"code","20ac6052":"code","9a3b2ae2":"code","647b08d2":"code","5561b305":"code","b777e320":"code","bb965568":"code","e138d9d5":"code","65f884ac":"code","238bd165":"code","53c802d6":"code","ee5226d7":"code","38e94ce0":"code","5c15ac75":"code","39256afd":"code","8c3492b5":"code","9058a68a":"code","6da12f62":"code","638b592f":"code","27589d5d":"code","7d91c8d4":"code","8e1f52f4":"code","bbec6b49":"code","d1cfb75a":"code","eed5303c":"code","717a58f9":"code","a5fc5e9d":"code","87d66758":"code","0e43fbe0":"code","1caa63f4":"code","427c2679":"code","d632055c":"code","82faaf17":"code","766c16a3":"code","c6aecf7e":"code","eb7de66e":"code","0ff4ed35":"code","66304605":"code","e47ff03d":"code","b328e367":"code","4860630a":"code","aadf1429":"code","d892fae1":"code","e38eb7e6":"code","5546710f":"code","7f93a158":"code","86250b37":"code","ac604289":"code","8348acd9":"code","9949e68d":"code","e1b303d0":"code","32c70a94":"code","040f0233":"code","0251cdfb":"code","8cf3c4ca":"code","72e71291":"code","bf9fdc79":"code","813a5221":"code","b2e43a5b":"code","4d9d646f":"code","b1815e5d":"code","d8d9c123":"code","0939001c":"code","e097e14f":"code","323fa2f5":"code","e307395f":"code","cc3987c6":"code","bea0f40e":"code","3998ee68":"code","e2b675f7":"code","c1e50bbe":"code","033818ca":"code","dee91680":"code","cc015071":"code","2d2180dd":"code","3f595cb7":"code","9bb989fc":"code","74b6ace0":"code","644a9ecd":"code","654deb39":"code","f42f4b20":"code","4241cb56":"code","4e0eb32a":"code","991c6852":"code","3e5c80b1":"code","36c85321":"code","e0c48c70":"code","4665b8f6":"markdown","e3c3ed3d":"markdown","ed3f5878":"markdown","9f3ec00c":"markdown","9acea59c":"markdown","23deddf9":"markdown","448dd4c0":"markdown","e31cb2a5":"markdown","f0e4a544":"markdown","ec6dd1e4":"markdown"},"source":{"e5c63b01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport gc\ngc.collect()","f0d1f42c":"!pip install pretrainedmodels\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n!pip install fastai==1.0.57\nimport fastai\n\nfrom fastai import *\nfrom fastai.vision import *\n\nfrom torchvision.models import *\nimport pretrainedmodels\n\nfrom utils import *\nimport sys\n\nfrom fastai.callbacks.hooks import *\n\nfrom fastai.callbacks.tracker import EarlyStoppingCallback\nfrom fastai.callbacks.tracker import SaveModelCallback\n\npath_wiki = Path('..\/input\/wiki-face-data\/wiki_crop\/wiki_crop\/')\npath_imdb = Path('..\/input\/imdb-wiki-faces-dataset\/imdb_crop\/imdb_crop\/')\n","b567ed5d":"import scipy.io\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta","dfcde365":"mat_wiki = scipy.io.loadmat('..\/input\/wiki-face-data\/wiki_crop\/wiki_crop\/wiki.mat')\nmat_imdb = scipy.io.loadmat('..\/input\/imdb-wiki-faces-dataset\/imdb_crop\/imdb_crop\/imdb.mat')","8877b6b1":"columns = [\"dob\", \"photo_taken\", \"full_path\", \"gender\", \"name\", \"face_location\", \n           \"face_score\", \"second_face_score\", 'celeb_names', 'celeb_id']","63aa8be7":"instances_wiki = mat_wiki['wiki'][0][0][0].shape[1]\ninstances_imdb = mat_imdb['imdb'][0][0][0].shape[1]\n\n\ndf_wiki = pd.DataFrame(index = range(0,instances_wiki), columns = columns)\ndf_imdb = pd.DataFrame(index = range(0,instances_imdb), columns = columns)","6887f79c":"for i in mat_wiki:\n    if i == \"wiki\":\n        current_array = mat_wiki[i][0][0]\n        for j in range(len(current_array)):\n            #print(columns[j],\": \",current_array[j])\n            df_wiki[columns[j]] = pd.DataFrame(current_array[j][0])\n            \n\nfor i in mat_imdb:\n    if i == \"imdb\":\n        current_array = mat_imdb[i][0][0]\n        for j in range(len(current_array)):\n            #print(columns[j],\": \",current_array[j])\n            df_imdb[columns[j]] = pd.DataFrame(current_array[j][0])","2ce37e1c":"df_wiki.head()","cbee67f8":"df_imdb.head()","c2c740f5":"df_wiki.shape, df_imdb.shape","59a6ab03":"def datenum_to_datetime(datenum):\n    \n    try:\n        days = datenum % 1\n        hours = days % 1 * 24\n        minutes = hours % 1 * 60\n        seconds = minutes % 1 * 60\n        exact_date = datetime.fromordinal(int(datenum)) \\\n           + timedelta(days=int(days)) \\\n           + timedelta(hours=int(hours)) \\\n           + timedelta(minutes=int(minutes)) \\\n           + timedelta(seconds=round(seconds)) \\\n           - timedelta(days=366)\n    \n        return exact_date.year\n    \n    except(ValueError, TypeError, OverflowError):\n        \n        return np.nan  ","6309f00f":"df_wiki['date_of_birth'] = df_wiki['dob'].apply(datenum_to_datetime) \ndf_imdb['date_of_birth'] = df_imdb['dob'].apply(datenum_to_datetime) ","fc00c2c6":"df_wiki['date_of_birth'].value_counts()\ndf_imdb['date_of_birth'].value_counts()","417e4903":"df_wiki['age'] = df_wiki['photo_taken'] - df_wiki['date_of_birth']\n\n#remove pictures does not include face\ndf_wiki = df_wiki[df_wiki['face_score'] != -np.inf]\n\n#some pictures include more than one face, remove them\ndf_wiki = df_wiki[df_wiki['second_face_score'].isna()]\n\n#check threshold\ndf_wiki = df_wiki[df_wiki['face_score'] >= 3.5]\n\ndf_wiki = df_wiki.drop(columns = ['name','face_score','second_face_score','date_of_birth','face_location'])\n\n#some guys seem to be greater than 100. some of these are paintings. remove these old guys\ndf_wiki = df_wiki[df_wiki['age'] <= 100]\n\n#some guys seem to be unborn in the data set\ndf_wiki = df_wiki[df_wiki['age'] > 0]","6f97d788":"df_imdb['age'] = df_imdb['photo_taken'] - df_imdb['date_of_birth']\n\n#remove pictures does not include face\ndf_imdb = df_imdb[df_imdb['face_score'] != -np.inf]\n\n#some pictures include more than one face, remove them\ndf_imdb = df_imdb[df_imdb['second_face_score'].isna()]\n\n#check threshold\ndf_imdb = df_imdb[df_imdb['face_score'] >= 3.5]\n\ndf_imdb = df_imdb.drop(columns = ['name','face_score','second_face_score','date_of_birth','face_location'])\n\n#some guys seem to be greater than 100. some of these are paintings. remove these old guys\ndf_imdb = df_imdb[df_imdb['age'] <= 100]\n\n#some guys seem to be unborn in the data set\ndf_imdb = df_imdb[df_imdb['age'] > 0]","eb68db7f":"df_wiki.head()","36905994":"df_wiki.shape, df_imdb.shape","06812cb4":"df_wiki['age'] = df_wiki['age'].apply(lambda x: int(x))\ndf_imdb['age'] = df_imdb['age'].apply(lambda x: int(x))","a010964b":"print(type(df_wiki['age']))\ndf_wiki['age'].value_counts()\ndf_imdb['age'].value_counts()","58a543e5":"df_wiki = df_wiki.drop(columns=['dob', 'photo_taken'])\ndf_imdb = df_imdb.drop(columns=['dob', 'photo_taken'])","4e40345f":"df_age_wiki = df_wiki.drop(columns=['gender', 'celeb_names', 'celeb_id'])\ndf_age_imdb = df_imdb.drop(columns=['gender', 'celeb_names', 'celeb_id'])","fda33285":"df_age_wiki['age'].value_counts()","58cc6f95":"df_imdb['age'].value_counts()","b6d2029b":"df_age_wiki['full_path'] = df_age_wiki['full_path'].str.get(0)\ndf_age_imdb['full_path'] = df_age_imdb['full_path'].str.get(0)","e0bf8e54":"df_age_wiki.dropna(axis=0, inplace=True)\ndf_age_imdb.dropna(axis=0, inplace=True)","fc8d35a2":"df_age_wiki.head()","11e3125c":"df_age_imdb.head()","9217c0cb":"df_age_wiki['age'] = df_age_wiki['age'].apply(lambda x: int(x))\ndf_age_imdb['age'] = df_age_imdb['age'].apply(lambda x: int(x))","20e9362b":"df_age_wiki.shape, df_age_imdb.shape","43da7e9e":"max_age = df_age_wiki[\"age\"].max(); print(max_age)\nmin_age = df_age_wiki[\"age\"].min(); print(min_age)","cd9215ef":"max_age = df_age_imdb[\"age\"].max(); print(max_age)\nmin_age = df_age_imdb[\"age\"].min(); print(min_age)","3aa2b756":"df_age_wiki.hist()","934f2f49":"df_age_imdb.hist()","94e2fcab":"seed = 42\n\n# # python RNG\n# import random\n# random.seed(seed)\n\n# # pytorch RNGs\n# import torch\n# torch.manual_seed(seed)\n# torch.backends.cudnn.deterministic = True\n# if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)\n\n# numpy RNG\nimport numpy as np\nnp.random.seed(seed)","cd57a1cc":"path = Path('..\/input\/')","3e3c3e62":"path_utk = Path('..\/input\/utk-face-cropped\/utkcropped\/utkcropped\/')","857673d0":"def extract_age(filename):\n    return float(filename.stem.split('_')[0])","7ec730f9":"tfms = get_transforms(max_rotate= 10.,max_zoom=1., max_lighting=0.20, do_flip=False,\n                      max_warp=0., xtra_tfms=[flip_lr(), brightness(change=(0.3, 0.60), p=0.7), contrast(scale=(0.5, 2), p=0.7),\n                                              crop_pad(size=600, padding_mode='border', row_pct=0.,col_pct=0.),\n                                              rand_zoom(scale=(1.,1.5)), rand_crop(),\n                                              perspective_warp(magnitude=(-0.1,0.1)),\n                                              #jitter(magnitude=(-0.05,0.05), p=0.5),\n                                              symmetric_warp(magnitude=(-0.1,0.1)) ])\n\npath_imdb = Path('..\/input\/imdb-wiki-faces-dataset\/imdb_crop\/imdb_crop\/')\npath_wiki = Path('..\/input\/wiki-face-data\/wiki_crop\/wiki_crop\/')\n\n\ndata_imdb = ImageList.from_df(df_age_imdb, path_imdb, cols=['full_path'], folder ='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\ndata_wiki_small = ImageList.from_df(df_age_wiki, path_wiki, cols=['full_path'], folder ='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\ndata_wiki_big = ImageList.from_df(df_age_wiki, path_wiki, cols=['full_path'], folder ='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)","e553de6f":"data_utk_small = ImageList.from_folder(path_utk).split_by_rand_pct(0.2, seed=42).label_from_func(extract_age, label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\ndata_utk_big = ImageList.from_folder(path_utk).split_by_rand_pct(0.2, seed=42).label_from_func(extract_age, label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)","e538a82b":"df_appa = pd.read_csv('\/kaggle\/input\/appa-real-face-cropped\/labels.csv')\ndf_appa.head()","fb794e29":"df_appa.rename(columns = {\"file_name\":\"full_path\", \"real_age\":\"age\"}, inplace=True)\ndf_appa['age'] = df_appa['age'].apply(lambda x: int(float(x)))","b7436fe7":"path = Path('..\/input\/appa-real-face-cropped\/final_files\/final_files\/')\npath_csv = '..\/input\/appa-real-face-cropped\/'\npath_folder = '..\/input\/appa-real-face-cropped\/final_files\/final_files\/'\n\ndata_appa_small = ImageList.from_df(df_appa, path, cols=['full_path'], folder ='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\ndata_appa_big = ImageList.from_df(df_appa, path, cols=['full_path'], folder ='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\n","ba8bc7f1":"data_imdb.show_batch(4, figsize=(12,12))","1a2834d8":"data_wiki_small.show_batch(4, figsize=(12,12))","7c7dd8b5":"data_wiki_big.show_batch(4, figsize=(12,12))","5573eb62":"data_utk_small.show_batch(4, figsize=(12,12))","20ac6052":"data_utk_big.show_batch(4, figsize=(12,12))","9a3b2ae2":"data_appa_small.show_batch(4, figsize=(12,12))","647b08d2":"data_appa_big.show_batch(4, figsize=(12,12))","5561b305":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom pathlib import Path\nimport random","b777e320":"opt_func = partial(optim.Adam, betas=(0.9,0.99), eps=1e-5)","bb965568":"def resnet(pretrained=False):\n    pretrained = 'imagenet' if pretrained else None\n    model = pretrainedmodels.resnet34(pretrained=pretrained)\n    return model","e138d9d5":"class L1LossFlat(nn.SmoothL1Loss):\n    def forward(self, input:Tensor, target:Tensor) -> Rank0Tensor:\n        return super().forward(input.view(-1), target.view(-1))","65f884ac":"df_utk_small = data_utk_small.to_df()","238bd165":"df_utk_small.head()","53c802d6":"df_utk_small.rename(columns = {\"x\":\"full_path\", \"y\":\"age\"}, inplace=True)\ndf_utk_small['age'] = df_utk_small['age'].apply(lambda x: int(float(x)))","ee5226d7":"df_utk_small.head()","38e94ce0":"df_appa.head()","5c15ac75":"src_wiki = '..\/input\/wiki-face-data\/wiki_crop\/wiki_crop\/'\nsrc_utk = '..\/input\/utk-face-cropped\/utkcropped\/utkcropped\/'\nsrc_appa = '..\/input\/appa-real-face-cropped\/final_files\/'\n\ndest = '..\/working\/wiki_utk\/'\n\nimport os\nimport shutil\nimport pathlib\n\npathlib.Path(dest).mkdir(parents=True, exist_ok=True)\n\nos.listdir(dest)","39256afd":"for root, dirs, files in os.walk(src_wiki):\n    for file in files:\n        path_file = os.path.join(root,file)\n        shutil.copy2(path_file, dest)","8c3492b5":"for root, dirs, files in os.walk(src_utk):\n    for file in files:\n        path_file = os.path.join(root,file)\n        shutil.copy2(path_file,dest)","9058a68a":"for root, dirs, files in os.walk(src_appa):\n    for file in files:\n        path_file = os.path.join(root,file)\n        shutil.copy2(path_file,dest)","6da12f62":"df_age_wiki.head()","638b592f":"df_age_wiki['full_path'] = df_age_wiki['full_path'].str[3:]\ndf_age_wiki.head()","27589d5d":"frames = [df_age_wiki, df_utk_small, df_appa]\ndf_wiki_utk_appa = pd.concat(frames)","7d91c8d4":"df_wiki_utk_appa.head()","8e1f52f4":"df_wiki_utk_appa.shape","bbec6b49":"os.listdir(dest)","d1cfb75a":"df_wiki_utk_appa.hist()","eed5303c":"df_wiki_utk_appa['age'].value_counts()","717a58f9":"df_wiki_utk_appa = df_wiki_utk_appa[df_wiki_utk_appa['age'] <= 100]\ndf_wiki_utk_appa = df_wiki_utk_appa[df_wiki_utk_appa['age'] > 0]","a5fc5e9d":"df_wiki_utk_appa['age'].min(), df_wiki_utk_appa['age'].max()","87d66758":"df_wiki_utk_appa['age'] = df_wiki_utk_appa['age'].astype(int)","0e43fbe0":"path_wiki_utk_appa = Path('..\/working\/wiki_utk\/')\n\nnp.random.seed(42)\n\ndata_wiki_small_src = (ImageList.from_df(df_wiki_utk_appa, path_wiki_utk_appa, cols=['full_path'], folder='.')\n                   .split_by_rand_pct(0.2, seed=42)\n                   .label_from_df(label_cls=FloatList))\n                   \n# data_wiki_big = ImageList.from_df(df_wiki_utk_appa, path_wiki_utk_appa, cols=['full_path'], folder='.').split_by_rand_pct(0.2, seed=42).label_from_df(label_cls=FloatList).transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256).databunch(bs=64*2,num_workers=0).normalize(imagenet_stats)\n","1caa63f4":"data_wiki_small = (data_wiki_small_src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=128)\n                   .databunch(bs=64,num_workers=0).normalize(imagenet_stats))","427c2679":"data_wiki_small.show_batch(4, figsize=(12,12))","d632055c":"class AgeModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        layers = list(models.resnet34(pretrained=True).children())[:-2]\n        layers += [AdaptiveConcatPool2d(), Flatten()]\n        #layers += [nn.BatchNorm1d(4096, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        #layers += [nn.Dropout(p=0.60)]\n        #layers += [nn.Linear(4096, 1024, bias=True), nn.ReLU(inplace=True)]\n        #layers += [nn.BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        #layers += [nn.Dropout(p=0.60)]\n        #layers += [nn.Linear(2048, 1024, bias=True), nn.ReLU(inplace=True)]\n        #layers += [nn.BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        #layers += [nn.Dropout(p=0.75)]\n        #layers += [nn.Linear(1024, 256, bias=True), nn.ReLU(inplace=True)]\n        #layers += [nn.BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        #layers += [nn.Dropout(p=0.50)]\n        #layers += [nn.Linear(512,256 , bias=True), nn.ReLU(inplace=True)]\n        layers += [nn.BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        layers += [nn.Dropout(p=0.50)]\n        layers += [nn.Linear(1024, 512, bias=True), nn.ReLU(inplace=True)]\n        layers += [nn.BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)]\n        layers += [nn.Dropout(p=0.50)]\n        layers += [nn.Linear(512, 16, bias=True), nn.ReLU(inplace=True)]\n        layers += [nn.Linear(16,1)]\n        self.agemodel = nn.Sequential(*layers)\n    def forward(self, x):\n        return self.agemodel(x).squeeze(-1)\n          # could add 116*torch.sigmoid","82faaf17":"model = AgeModel()","766c16a3":"learn = Learner(data_wiki_small, model, model_dir = \"\/temp\/model\/\", opt_func=opt_func, bn_wd=False, metrics=root_mean_squared_error,\n               callback_fns=[ShowGraph]).mixup(stack_y=False, alpha=0.2)\n\nlearn.loss_func = L1LossFlat()","c6aecf7e":"learn.split([model.agemodel[4],model.agemodel[6],model.agemodel[8]])","eb7de66e":"#learn = cnn_learner(data, resnet50, pretrained = True, model_dir = \"\/temp\/model\/\",callback_fns=[ShowGraph])\n#learn.loss_func = L1LossFlat()","0ff4ed35":"import fastai\nlearn.freeze_to(-1)\nlearn.lr_find()\nlearn.recorder.plot(suggestion = True)","66304605":"lr = 2e-2","e47ff03d":"learn.fit_one_cycle(5, max_lr=slice(lr), wd=(1e-6, 1e-4, 1e-2, 1e-1), pct_start=0.5, callbacks=[SaveModelCallback(learn)])","b328e367":"learn.save('first_head_resnet34')\nlearn.load('first_head_resnet34')","4860630a":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion = True)","aadf1429":"learn.fit_one_cycle(5, max_lr=slice(1e-6, lr\/5), wd=(1e-6, 1e-4, 1e-2, 1e-1), \n                    callbacks=[SaveModelCallback(learn)], pct_start=0.5)","d892fae1":"x,y = next(iter(learn.data.train_dl))\nx.shape","e38eb7e6":"learn.save('first_body_resnet34')\nlearn.load('first_body_resnet34')","5546710f":"learn.show_results()","7f93a158":"img = open_image('..\/input\/picture4\/PM_Modi_2015.jpg')\nimg","86250b37":"x = learn.predict(img)\nx","ac604289":"data_wiki_big = (data_wiki_small_src.transform(tfms, size=256)\n        .databunch(num_workers=0).normalize(imagenet_stats))\n\nlearn.data = data_wiki_big\ndata_wiki_big.train_ds[0][0].shape","8348acd9":"learn.freeze_to(-1)\nlearn.lr_find()\nlearn.recorder.plot(suggestion = True)","9949e68d":"lr = 5e-4","e1b303d0":"learn.fit_one_cycle(5, max_lr=slice(lr), wd=(1e-6, 1e-4, 1e-2, 1e-1), pct_start=0.5, callbacks=[SaveModelCallback(learn)])","32c70a94":"learn.recorder.plot_lr()","040f0233":"learn.recorder.plot_losses()","0251cdfb":"learn.save('second_head_resnet34')\nlearn.load('second_head_resnet34')","8cf3c4ca":"img = open_image('..\/input\/picture4\/PM_Modi_2015.jpg')\nimg","72e71291":"learn.predict(img)","bf9fdc79":"x,y = next(iter(learn.data.train_dl))\nx.shape","813a5221":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion = True)","b2e43a5b":"learn.fit_one_cycle(5, max_lr=slice(1e-6,1e-4), wd=(1e-6, 1e-4, 1e-2, 1e-1), callbacks=[SaveModelCallback(learn)], pct_start=0.5)","4d9d646f":"learn.save('second_body_resnet34')\nlearn.load('second_body_resnet34')","b1815e5d":"learn.show_results()","d8d9c123":"img = open_image('..\/input\/picture4\/PM_Modi_2015.jpg')\nimg","0939001c":"x = learn.predict(img)\nx","e097e14f":"learn.save('third_body_resnet34')\nlearn.load('third_body_resnet34')","323fa2f5":"class SaveFeatures():\n    features=None\n    def __init__(self, m): \n        self.hook = m.register_forward_hook(self.hook_fn)\n        self.features = None\n    def hook_fn(self, module, input, output): \n        out = output.detach().cpu().numpy()\n        if isinstance(self.features, type(None)):\n            self.features = out\n        else:\n            self.features = np.row_stack((self.features, out))\n    def remove(self): \n        self.hook.remove()","e307395f":"learn.model","cc3987c6":"# Second last layer of the model\nlearn.model.agemodel[16]","bea0f40e":"len(data_wiki_big.train_ds.items), len(data_wiki_big.valid_ds.items)","3998ee68":"sf = SaveFeatures(learn.model.agemodel[16])","e2b675f7":"_= learn.get_preds(data_wiki_big.train_ds)\n_= learn.get_preds(DatasetType.Valid)","c1e50bbe":"len(sf.features)","033818ca":"img_path = [str(x) for x in (list(data_wiki_big.train_ds.items) +list(data_wiki_big.valid_ds.items))]\nlabel = [x for x in (list(data_wiki_big.train_ds.y.items) +list(data_wiki_big.valid_ds.y.items))]\nlabel_id = [x for x in (list(data_wiki_big.train_ds.y.items) +list(data_wiki_big.valid_ds.y.items))]","dee91680":"df_new = pd.DataFrame({'img_path': img_path, 'label': label, 'label_id': label_id})\ndf_new","cc015071":"array = np.array(sf.features)","2d2180dd":"x=array.tolist()","3f595cb7":"df_new['img_repr'] = x","9bb989fc":"df_new","74b6ace0":"df_new.shape","644a9ecd":"from annoy import AnnoyIndex\n\nf = len(df_new['img_repr'][0])\nt = AnnoyIndex(f, metric='euclidean')","654deb39":"ntree = 500\n\nfor i, vector in enumerate(df_new['img_repr']):\n    t.add_item(i, vector)\n_  = t.build(ntree)","f42f4b20":"import time\ndef get_similar_images_annoy(img_index, num):\n    start = time.time()\n    base_img_id, base_vector, base_label  = df_new.iloc[img_index, [0,3,1]]\n    similar_img_ids = t.get_nns_by_item(img_index, num)\n    end = time.time()\n    print(f'{(end - start) * 1000} ms')\n    return base_img_id, base_label, df_new.iloc[similar_img_ids]","4241cb56":"num = 89\nbase_image, base_label, similar_images_df = get_similar_images_annoy(890, num)","4e0eb32a":"print(base_label)\nopen_image(base_image)","991c6852":"similar_images_df","3e5c80b1":"data_src = (ImageList.from_df(similar_images_df, path=\".\",cols=['img_path'], folder='.' )\n        .split_none()\n        .label_from_df(cols=['label'],label_cls=FloatList))","36c85321":"data = (data_src.transform(tfms, resize_method=ResizeMethod.CROP, padding_mode='border', size=256)\n                   .databunch(bs=num,num_workers=0).normalize(imagenet_stats))","e0c48c70":"data.show_batch(5)","4665b8f6":"## Fastai Modelling","e3c3ed3d":"## Preparing the Data for Fastai Models","ed3f5878":"## Import Libraries","9f3ec00c":"# Introduction\n\nIn this Notebook, I have tried to build a model which predicts the age of a person based on his or her face.\n\nThe techniques I have used to build this **Image Regression model** are based on Fastai's CNN  models.\n\nThe dataset I have used for this task are as follows:\n\n1. UTK Face Data\n2. Appa Real Face Data\n3. IMDB Wiki Face Data\n\nIn the course of this analysis, I have learnt many things:\n\n1. How to augment the data using Fastai's Image augmentation techinues.\n2. Loading and using Cadene's Pretrained Models (https:\/\/github.com\/Cadene\/pretrained-models.pytorch)\n3. How to use Image resizing technique which basically refers to gradually increase the size of image while training. This helps in achieving greater prediction accuracy.\n4. Discriminative Layers Training technique","9acea59c":"## A look at the Images","23deddf9":"## Image Resizing","448dd4c0":"## Fastai Age Model","e31cb2a5":"# Fastai Hooks","f0e4a544":"## Loading the Data","ec6dd1e4":"# Annoy"}}