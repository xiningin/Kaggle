{"cell_type":{"ca32d109":"code","22dc89f9":"code","b6999ff6":"code","a07bd630":"code","90e591cd":"code","ec1e7ae3":"code","cf94c8ac":"markdown","19fd3e58":"markdown","03410ae0":"markdown","21d8d1fd":"markdown","7f22f350":"markdown","36bd5a71":"markdown"},"source":{"ca32d109":"# import csv\n# import numpy as np\n\n# def transfer_to_array(file_name, with_label=True):\n#     print('Start reading {0}.'.format(file_name))\n#     # Check row count.\n#     with open(file_name) as file:\n#         cnt = sum(1 for line in file)\n\n#     # Initialize variables.\n#     labels = np.zeros((cnt-1))\n#     data = np.zeros((cnt-1, 28, 28, 1))\n#     if with_label:\n#         label_bit = 1\n#     else:\n#         label_bit = 0\n#     # Transfer to array. (cnt, 28, 28, 1)\n#     with open(file_name, newline='') as csv_file:\n#         rows = csv.reader(csv_file)\n#         is_first_row = True\n#         i = 0\n#         for row in rows:\n#             if not is_first_row:\n#                 if with_label:\n#                     labels[i] = np.int(row[0])\n#                 tmp = np.array(row[label_bit:784+label_bit], dtype=np.int).reshape(28, 28)\n#                 tmp = np.expand_dims(tmp, axis=3)\n#                 data[i] = tmp\n#                 i += 1\n#             else:\n#                 is_first_row = False\n\n#     print('Reading completed.')\n\n#     # Show image.\n#     # img = image.array_to_img(data[3])\n#     # img.show()\n\n#     return data, labels\n\n\n# x_train, y_train = transfer_to_array('07.Kaggle_train.csv', with_label=True)\n# x_test, y_test = transfer_to_array('07.Kaggle_test.csv', with_label=False)  # y_test will not be used.\n# print('Saving...')\n# np.savez_compressed('07.Kaggle_digit-recognizer.npz', x_train=x_train, y_train=y_train, x_test=x_test)\n# print('File: 07.Kaggle_digit-recognizer.npz Saved completed.')","22dc89f9":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, AveragePooling2D\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport csv\n\n## Settings in training phase.\nbatch_size = 256\nnum_classes = 10\nepochs = 100\n\n## Loads MNIST datasets(Kaggle).\nMNIST_dataset = np.load('\/kaggle\/input\/kaggle-digitrecognizer\/07.Kaggle_digit-recognizer.npz')\nmnist_x, mnist_y = MNIST_dataset['x_train'], MNIST_dataset['y_train']\n\n## Split the MNIST dataset into training set and developmnet set.\nx_train, x_dev, y_train, y_dev = train_test_split(mnist_x, mnist_y, test_size=0.05, random_state=1)\nprint('Size of training set:  {0}'.format(x_train.shape[0]))\nprint('Size of dev. set:      {0}'.format(x_dev.shape[0]))\n\n## Size of input images.\nimg_x, img_y = 28, 28\ninput_shape = (28, 28, 1)\n\n## Transfer y into one-hot vectors.\ny_train = np_utils.to_categorical(y_train, num_classes=num_classes)\ny_dev = np_utils.to_categorical(y_dev, num_classes=num_classes)\n\n## Normalize the input images' value.\nx_train = x_train.astype('float32')\nx_train \/= 255","b6999ff6":"## Initialize model.\nmodel = Sequential()\n## LeNet-5\n # Note: The shape of input images were changed to be (28x28), instead of (32x32).\nmodel.add(Conv2D(6, kernel_size=(5, 5), activation='relu', input_shape=input_shape))\nmodel.add(AveragePooling2D(pool_size=(2, 2), strides=2))\nmodel.add(Conv2D(16, kernel_size=(5, 5), activation='relu'))\nmodel.add(AveragePooling2D(pool_size=(2, 2), strides=2))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=120, activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(units=84, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n                optimizer=keras.optimizers.Adadelta(),\n                metrics=['accuracy'])\n\n## Show model summary.\nprint(model.summary())","a07bd630":"## Start training model.\ntrain_history = model.fit(x_train, y_train, epochs=epochs,\n                            batch_size=batch_size, verbose=2, validation_data=(x_dev, y_dev))","90e591cd":"## Read the test set.\nx_test = MNIST_dataset['x_test']\n\n## Predict the x_test.\npredictions = model.predict_classes(x_test)\nprint('Prediction completed.')","ec1e7ae3":"## Save as CSV for submission.\nwith open('07.Kaggle_submission.csv', 'w', newline='') as csv_file:\n    print('Saving file...')\n    csv_writer = csv.writer(csv_file, delimiter=',')\n\n    # Define column name.\n    csv_writer.writerow(['ImageId', 'Label'])\n    for i in range(len(predictions)):\n        csv_writer.writerow([i+1, predictions[i]])\n\n    print('File: 07.Kaggle_submission.csv Saved completed.')","cf94c8ac":"## Concolusion\n- According to the performance of LeNet-5 might not enough to gain better results. (We had already set the epoch to 100.) To gain better results, may have to add droupout, replace the activation function or build a deeper CNNs.","19fd3e58":"## Initializing\n- Read the training dataset.\n- Set the hyperparameters for training model.\n- Transfer y_train and y_dev into one-hot vectors.","03410ae0":"## Save the results\n- Save the result on Kaggle.\n- If you want to run this code on your own computer, may have to change the path.","21d8d1fd":"## Evaluate model performance by test dataset\n- Read the input images of the test dataset.\n- Predict the images by the model we just trained.","7f22f350":"## Build your own LeNet-5 model.\n- Activation function: ReLU\n- Dropout: 2 dropout layers were added into the last two fully connected layers.","36bd5a71":"# Kaggle - MNIST\n## Data preprocessing\n- Read the csv file, and save each image as a shape of (28, 28, 1).\n- The preprocess program is under below.\n- *Note that I preprocessed this dataset on my own computer and upload the npz file.* So if you run this code on Kaggle notebook may cause errors."}}