{"cell_type":{"79f2a7d8":"code","f634167a":"code","c6f8db9f":"code","a5020ab8":"code","f770d898":"code","a7569f54":"code","b4aeeb91":"code","e7b86d0d":"code","3b897deb":"code","95ed03a7":"code","25717580":"code","67c0b422":"code","d04e6b65":"code","444b5132":"code","1666155d":"code","ed2231f3":"code","fbf638f4":"code","d31cba65":"code","0f69fa59":"code","fa194411":"code","898f9060":"code","081a7dd3":"code","82cd6b52":"code","7e4b0a6f":"code","04eea8f7":"code","debaf63e":"code","96995ca8":"code","b24677c0":"code","67014eeb":"code","9409a3b4":"code","b7ca3967":"code","e6963601":"code","2ce804c6":"code","420bcd76":"code","978625b3":"code","9e95fddd":"code","c1ffd702":"code","f61b1466":"code","97232a15":"code","4698c2e6":"code","4b111d1d":"code","07cf5f25":"code","02a55e83":"code","4b5c41e6":"code","c6ca8522":"code","c35779f4":"code","2696afb2":"code","e341feb5":"code","2d0aa091":"code","01bc921c":"code","5da7039c":"markdown","94d0fced":"markdown","3a4e5a66":"markdown","ec2fc4d2":"markdown","4850f3e9":"markdown","45d0f62b":"markdown","e997e9e6":"markdown","b089f092":"markdown","6ae5b209":"markdown","81154571":"markdown","72223358":"markdown","e77b7a85":"markdown","fdfb13a2":"markdown","b526023d":"markdown","0be22451":"markdown","39acf31d":"markdown","465329a0":"markdown","83765eaa":"markdown","b8ad172a":"markdown"},"source":{"79f2a7d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport datetime\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, GradientBoostingRegressor, VotingRegressor, StackingRegressor, BaggingRegressor\n# explicitly require this experimental feature\nfrom sklearn.experimental import enable_hist_gradient_boosting  # noqa\n# now you can import normally from ensemble\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.datasets import make_regression\n\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nmatplotlib.rcParams.update({'font.size': 12})\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f634167a":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","c6f8db9f":"TRAIN_DATASET_PATH = '\/kaggle\/input\/moscow-real-estate-price-prediction\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/moscow-real-estate-price-prediction\/test.csv'","a5020ab8":"train = pd.read_csv(TRAIN_DATASET_PATH)","f770d898":"# \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u0440\u044f\u0434\u043e\u0432\n#pd.set_option('display.max_rows', None)\n# \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n#pd.set_option('display.max_columns', None)\n# \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0437\u0430\u043f\u0438\u0441\u0438\n#pd.set_option('display.max_colwidth', None)","a7569f54":"train.loc[(train['HouseYear'] > 1995) & (train['HouseYear'] <= 2020) & (train['Rooms'] == 2) & (train['Square'] > 70)]","b4aeeb91":"temp = train.loc[(train['HouseYear'] > 1900) & (train['HouseYear'] <= 2021)]\nfor item in temp.columns:\n    for rn in range(1,5):\n        if train[item].dtype in ['int64', 'float64']:\n            item_mean = temp.loc[temp['Rooms'] == rn,item].mean()\n            item_mode = temp.loc[temp['Rooms'] == rn,item].mode()[0]\n            item_median = temp.loc[temp['Rooms'] == rn,item].median()\n        else: \n            item_mean = None\n            item_mode = None\n            item_median = None\n        print('Rooms ', rn, '\\n')\n        print(item, 'Min value: ', temp.loc[temp['Rooms'] == rn,item].min(), '\\n',\n              'Mean value: ', item_mean, '\\n',\n              'Mode value: ', item_mode, '\\n',\n              'Median value: ', item_median, '\\n',\n              'Max value: ', temp.loc[temp['Rooms'] == rn,item].max(),  '\\n',\n               np.unique,  '\\n', '\\n')","e7b86d0d":"train.isnull().sum()","3b897deb":"# round flat area\ntrain['Square'] = train['Square'].round(2)\n# round LifeSquare\ntrain['LifeSquare'] = train['LifeSquare'].round(2)\n# round KitchenSquare\ntrain['KitchenSquare'] = train['KitchenSquare'].round(2)\n# round Price\ntrain['Price'] = train['Price'].round(0)\nprint(train.dtypes)","95ed03a7":"class DataPreprocessing:\n    \"\"\"Correction of the possible wrong data\"\"\"\n    def __init__(self):\n        self.av_X = pd.DataFrame()\n    \n    def district_corr(self, X):\n        X['WrongDistr'] = None\n        X.loc[(X['WrongDistr'].isnull()), 'WrongDistr'] = 0\n        \n        return X\n    \n    def square_correction(self, X):\n        wrongDataIdx = (X['Square'] <= 10)\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        \n        wrongDataIdx = ((X['Square'] < 10) & (X['LifeSquare'] > X['Rooms'] * 10))\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square', 'LifeSquare']] = X.loc[wrongDataIdx, ['LifeSquare', 'Square']]\n        wrongDataIdx = ((X['Square'] < X['LifeSquare']) & (X['LifeSquare'] > X['Rooms'] * 10))\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square', 'LifeSquare']] = X.loc[wrongDataIdx, ['LifeSquare', 'Square']]\n        wrongDataIdx = (X['Square']>300) & (X['Rooms']<5)\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square']] = X.loc[wrongDataIdx, ['Square']].values\/10\n        \n        wrongDataIdx = (X['Square']<=1)&(X['HouseYear']>1900)\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square']] = X.loc[wrongDataIdx, ['Square']].values * 100\n        \n        wrongDataIdx = (X['Square']<=10)&(X['HouseYear']>1900)\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square']] = X.loc[wrongDataIdx, ['Square']].values * 10\n        \n        wrongDataIdx = (X['Square']<22)&(X['Rooms']>=2)\n        X.loc[wrongDataIdx, 'WrongSquare'] = 1\n        X.loc[wrongDataIdx, ['Square']] = X.loc[wrongDataIdx, ['Square']].values * 10\n        \n        X.loc[(X['WrongSquare'].isnull()), 'WrongSquare'] = 0\n        X['Square'] = X['Square'].round(1)\n        return X\n\n    def house_year_correction(self, X):\n        X.loc[(X['HouseYear'] > datetime.datetime.now().year), 'WrongHouseYear'] = 1\n        X.loc[(X['HouseYear'] <= datetime.datetime.now().year), 'WrongHouseYear'] = 0\n        if (X['HouseYear'] > datetime.datetime.now().year).any():\n            # if house year is in the following formate ?????1910, will be used 1910 for house year \n            wrongDataIdx = ((X['HouseYear'] > datetime.datetime.now().year) &\n                            (datetime.datetime.now().year >= X['HouseYear'] % 10000) &\n                            (X['HouseYear'] % 10000 >= 1910))\n\n            X.loc[wrongDataIdx, 'HouseYear'] = X.loc[wrongDataIdx, 'HouseYear'] % 10000\n            # if house year is in the following formate ?910, will be used 1910 for house year\n            wrongDataIdx = ((X['HouseYear'] > datetime.datetime.now().year) &\n                            (X['HouseYear'] \/\/ 10000 == 0) &\n                            (X['HouseYear'] % 1000 >= 900))\n\n            X.loc[wrongDataIdx, 'HouseYear'] = X.loc[wrongDataIdx, 'HouseYear'] % 1000 + 1000\n            # if house year is in the following formate ?010, will be used 2010 for house year \n            #X.loc[(X['HouseYear'] > datetime.datetime.now().year) & (X['HouseYear'] \/\/ 10000 == 0) & (X['HouseYear'] % 1000 <= datetime.datetime.now().year) & ((X['Floor'] <= 10) | (X['HouseFloor'] <= 10)), 'HouseYear'] = X.loc[(X['HouseYear'] > datetime.datetime.now().year) & (X['HouseYear'] \/\/ 10000 == 0) & (X['HouseYear'] % 1000 <= datetime.datetime.now().year) & ((X['Floor'] <= 10) | (X['HouseFloor'] <= 10)), 'HouseYear'] % 1000 + 1000\n            # nowadays, mainly houses with more than 10 floors are being built\n            wrongDataIdx = ((X['HouseYear'] > datetime.datetime.now().year) &\n                            (X['HouseYear'] \/\/ 10000 == 0) &\n                            (X['HouseYear'] % 1000 <= datetime.datetime.now().year) &\n                            ((X['Floor'] > 10) | (X['HouseFloor'] > 10)))\n\n            X.loc[wrongDataIdx, 'HouseYear'] = X.loc[wrongDataIdx, 'HouseYear'] % 1000 + 2000\n            # for any other cases will be used current year.\n            X.loc[(X['HouseYear'] > datetime.datetime.now().year), 'HouseYear'] = datetime.datetime.now().year\n        floor = 30\n        year = 1998\n        wrongDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['HouseFloor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = np.median(X.loc[corrDataIdx, ['HouseYear']])\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n            \n        floor = 25\n        year = 1997\n        wrongDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['Floor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        floor = 22\n        year = 1997\n        wrongDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['HouseFloor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        floor = 21\n        year = 1995\n        wrongDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['Floor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n            \n        floor = 20\n        year = 1994\n        wrongDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['HouseFloor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        floor = 18\n        year = 1990\n        wrongDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['Floor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        wrongDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] <= year))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        floor = 17\n        year = 1986\n        wrongDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] <= year))\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= year) & (X['Floor'] >= floor),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Floor'] >= floor) & (X['HouseYear'] >= year) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n        \n        wrongDataIdx = ((X['HouseFloor'] >= floor) & (X['HouseYear'] <= year))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n\n        \"\"\"wrongDataIdx = (X['Square']>100) & (X['Square']<140) & (X['HouseYear'] <= 1990) & (X['HouseYear'] >= 1959)\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= 1994) & (X['Square']>100) & (X['Square']<140),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Square']>100) & (X['Square']<140) & (X['HouseYear'] >= 1990) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n\n        wrongDataIdx = (X['Square']>=140) & (X['Square']<180) & (X['HouseYear'] <= 1995) & (X['HouseYear'] >= 1959)\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= 1995) & (X['Square']>=140) & (X['Square']<180),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Square']>=140) & (X['Square']<180) & (X['HouseYear'] >= 1995) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\n\n        wrongDataIdx = (X['Square']>=180) & (X['Square']<300) & (X['HouseYear'] <= 1996) & (X['HouseYear'] >= 1958)\n        temp = pd.value_counts((X.loc[(X['HouseYear'] >= 1996) & (X['Square']>=180) & (X['Square']<300),'HouseYear'])).keys()\n        temp = temp[0:2]\n        corrDataIdx = ((X['Square']>=180) & (X['Square']<300) & (X['HouseYear'] >= 1996) & (X['HouseYear'] != temp[0]) & (X['HouseYear'] != temp[1]))\n        medianyear = (np.median(X.loc[corrDataIdx, ['HouseYear']]))\n        if not(np.isnan(medianyear)):\n            medianyear = round(medianyear)\n            X.loc[wrongDataIdx, 'WrongHouseYear'] = 1\n            X.loc[wrongDataIdx, ['HouseYear']] = medianyear\"\"\"\n        \n        \n        \n        X['HouseYear'] = X['HouseYear'].astype('int64')\n        \n        X.loc[(X['WrongHouseYear'].isnull()), 'WrongHouseYear'] = 0\n        return X\n    \n    def number_of_rooms_correction(self, X):   \n        X.loc[(X['Rooms'] == 19), 'Rooms'] = 1\n        X.loc[(X['Rooms'] == 19), 'WrongRooms'] = 1\n        X.loc[(X['Rooms'] == 10) & (X['HouseYear'] >= 1900), 'Rooms'] = 1\n        X.loc[(X['Rooms'] == 10) & (X['HouseYear'] >= 1900), 'WrongRooms'] = 1\n        X.loc[(X['Rooms'] == 0) & (X['Square'] <= 24), 'SingleRoom'] = 1\n        # 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 37) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 37) & (X['Rooms'] > 1) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        # 2\n        wrongDataIdx = ((X['Square'] >= 37) & (X['Square'] <= 56) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 37) & (X['Square'] <= 56) & ((X['Rooms'] != 2)) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        # 3\n        wrongDataIdx = ((X['Square'] >= 56) & (X['Square'] <= 71) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 56) & (X['Square'] <= 65) & ((X['Rooms'] != 2)&(X['Rooms'] != 3)) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 65) & (X['Square'] <= 71) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        # 4\n        wrongDataIdx = ((X['Square'] >= 71) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        wrongDataIdx = ((X['Square'] >= 71) & ((X['Rooms'] != 3)&(X['Rooms'] != 4) & (X['Rooms'] != 5)) & (X['HouseYear'] <= 1960))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        #--\n        # 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 38) & (X['Rooms'] == 0) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 38) & (X['Rooms'] > 1) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        # 2\n        wrongDataIdx = ((X['Square'] >= 38) & (X['Square'] < 59) & (X['Rooms'] == 0) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 38) & (X['Square'] < 59) & ((X['Rooms'] != 2)&(X['Rooms'] != 3)) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        # 3\n        wrongDataIdx = ((X['Square'] >= 59) & (X['Square'] < 76) & (X['Rooms'] == 0) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 59) & (X['Square'] < 66) & ((X['Rooms'] != 2)&(X['Rooms'] != 3)) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 66) & (X['Square'] < 76) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        # 4\n        wrongDataIdx = ((X['Square'] >= 78) & (X['Rooms'] == 0) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        wrongDataIdx = ((X['Square'] >= 78) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)&(X['Rooms'] != 5)) & (X['HouseYear'] > 1960) & (X['HouseYear'] <= 1980))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        #--\n        # 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 46) & (X['Rooms'] == 0) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 39) & (X['Rooms'] > 1) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 39) & (X['Square'] < 46) & (X['Rooms'] > 2) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        # 2\n        wrongDataIdx = ((X['Square'] >= 46) & (X['Square'] < 57) & (X['Rooms'] == 0) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 46) & (X['Square'] < 57) & ((X['Rooms'] != 2)&(X['Rooms'] != 3)) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        # 3\n        wrongDataIdx = ((X['Square'] >= 57) & (X['Square'] < 78) & (X['Rooms'] == 0) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 57) & (X['Square'] < 78) & ((X['Rooms'] != 2)&(X['Rooms'] != 3)&(X['Rooms'] != 4)) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        # 4\n        wrongDataIdx = ((X['Square'] >= 78) & (X['Square'] < 117) & (X['Rooms'] == 0) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        wrongDataIdx = ((X['Square'] >= 78) & (X['Square'] < 117) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)&(X['Rooms'] != 5)) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        # 5\n        wrongDataIdx = ((X['Square'] >= 117) & (X['Rooms'] == 0) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 5\n        wrongDataIdx = ((X['Square'] >= 117) & ((X['Rooms'] != 4)&(X['Rooms'] != 5)) & (X['HouseYear'] > 1980) & (X['HouseYear'] <= 1995))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 5\n        #--\n        # 1\n        wrongDataIdx = ((X['Square'] >= 10) & (X['Square'] < 45) & (X['Rooms'] == 0) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 10) & (X['Square'] < 45) & (X['Rooms'] > 1) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        # 2\n        wrongDataIdx = ((X['Square'] >= 45) & (X['Square'] < 60) & (X['Rooms'] == 0) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 45) & (X['Square'] < 65) & ((X['Rooms'] != 1)&(X['Rooms'] != 2)&(X['Rooms'] != 3)) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 65) & (X['Square'] < 70) & ((X['Rooms'] != 3)) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        # 3\n        wrongDataIdx = ((X['Square'] >= 60) & (X['Square'] < 88) & (X['Rooms'] == 0) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 70) & (X['Square'] < 88) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)&(X['Rooms'] != 5)) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        # 4\n        wrongDataIdx = ((X['Square'] >= 88) & (X['Square'] < 130) & (X['Rooms'] == 0) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        wrongDataIdx = ((X['Square'] >= 88) & (X['Square'] < 130) & ((X['Rooms'] != 3)&(X['Rooms'] != 4)&(X['Rooms'] != 5)) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        # 5\n        wrongDataIdx = ((X['Square'] >= 130) & (X['Rooms'] == 0) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 5\n        wrongDataIdx = ((X['Square'] >= 130) & ((X['Rooms'] != 4)&(X['Rooms'] != 5)&(X['Rooms'] != 6)) & (X['HouseYear'] > 1995) & (X['HouseYear'] <= 2020))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 5\n        #--\n        \n        \"\"\"\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 45) & (X['Rooms'] == 0) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        wrongDataIdx = ((X['Square'] >= 20) & (X['Square'] < 45) & (X['Rooms'] > 1) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 1\n        \n        \n        \n        wrongDataIdx = ((X['Square'] >= 43) & (X['Square'] < 64) & (X['Rooms'] == 0) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        wrongDataIdx = ((X['Square'] >= 47) & (X['Square'] < 80) & ((X['Rooms'] != 2) | (X['Rooms'] != 3)) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 2\n        \n        wrongDataIdx = ((X['Square'] >= 56) & (X['Square'] < 92) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        wrongDataIdx = ((X['Square'] >= 56) & (X['Square'] < 92) & ((X['Rooms'] != 3) | (X['Rooms'] != 4) | (X['Rooms'] != 5)) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\n        \n        wrongDataIdx = ((X['Square'] >= 59) & (X['Square'] < 110) & (X['Rooms'] == 0) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        wrongDataIdx = ((X['Square'] >= 59) & (X['Square'] < 110) & ((X['Rooms'] != 3) | (X['Rooms'] != 4) | (X['Rooms'] != 5)) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        \n        wrongDataIdx = ((X['Square'] >= 90) & (X['Square'] < 110) & ((X['Rooms'] != 4) | (X['Rooms'] != 5)) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\n        \"wrongDataIdx = ((X['Square'] >= 100) & ((X['Rooms'] != 4) | (X['Rooms'] != 5)) & (X['HouseYear'] <= 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 5\"\"\"\n        \n        \"\"\"wrongDataIdx = ((X['Square'] >= 64) & (X['Square'] < 120) & (X['Rooms'] == 0) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\"\"\"\n        \"\"\"wrongDataIdx = ((X['Square'] >= 65) & (X['Square'] < 90) & ((X['Rooms'] != 2) | (X['Rooms'] != 3)) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\"\"\"\n        \n        \"\"\"wrongDataIdx = ((X['Square'] >= 73) & (X['Square'] < 100) & ((X['Rooms'] != 3) | (X['Rooms'] != 4)) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 3\"\"\"\n        \n        \"\"\"wrongDataIdx = ((X['Square'] >= 100) & (X['Square'] < 120) & ((X['Rooms'] != 5) | (X['Rooms'] != 4)) & (X['HouseYear'] > 1993))\n        X.loc[wrongDataIdx, 'WrongRooms'] = 1\n        X.loc[wrongDataIdx, ['Rooms']] = 4\"\"\"\n        \n        X['Rooms'] = X['Rooms'].astype(int)\n        X.loc[(X['Rooms'] == 0), 'Rooms'] = 1\n        \n        X.loc[(X['WrongRooms'].isnull()), 'WrongRooms'] = 0\n        X.loc[(X['SingleRoom'].isnull()), 'SingleRoom'] = 0\n        return X\n    \n    def house_floor_correction(self, X):\n        wrongDataIdx = ((X['HouseFloor'] == 117))\n        X.loc[wrongDataIdx, 'WrongHouseFloor'] = 1\n        X.loc[wrongDataIdx, ['HouseFloor']] = 17\n        \n        wrongDataIdx = ((X['HouseFloor'] == 99))\n        X.loc[wrongDataIdx, 'WrongHouseFloor'] = 1\n        X.loc[wrongDataIdx, ['HouseFloor']] = 9\n        \n        \"\"\"wrongDataIdx = ((X['HouseFloor'] < X['Floor']) & (X['Floor'] <= 17) & (X['HouseYear'] < 1990))\n        X.loc[wrongDataIdx, 'WrongHouseFloor'] = 1\n        X.loc[wrongDataIdx, ['Floor','HouseFloor']] = X.loc[wrongDataIdx, ['HouseFloor','Floor']].values\"\"\"\n        \n        wrongDataIdx = ((X['HouseFloor'] < X['Floor']) & (X['HouseYear'] >= 1900))\n        X.loc[wrongDataIdx, 'WrongHouseFloor'] = 1\n        X.loc[wrongDataIdx, ['Floor','HouseFloor']] = X.loc[wrongDataIdx, ['HouseFloor','Floor']].values\n        step = 3\n        for hyear in range(1900,2020,4):\n            wrongDataIdx = ((X['HouseFloor'] < 5) & (X['HouseYear'] >= hyear - step) & (X['HouseYear'] <= hyear + step))\n            corrDataIdx = ((X['HouseFloor'] >= 5) & (X['HouseYear'] >= hyear - step) & (X['HouseYear'] <= hyear + step))\n            if ((X.loc[wrongDataIdx, 'HouseFloor'].count() != 0) & (X.loc[corrDataIdx, 'HouseFloor'].count() > 3)):\n                medianhfloor = X.loc[corrDataIdx, ['HouseFloor']].median()\n                if medianhfloor.isnull().any():\n                    corrDataIdx = ((X['HouseFloor'] >= 3) & (X['HouseYear'] >= hyear - step - 5) & (X['HouseYear'] <= hyear + step + 5))\n                    medianhfloor = X.loc[corrDataIdx, ['HouseFloor']].median()\n                X.loc[wrongDataIdx, 'HouseFloor'] = 1\n                X.loc[wrongDataIdx, ['HouseFloor']] = max(medianhfloor)\n        X['HouseFloor'] = X['HouseFloor'].round().astype(int)\n        X.loc[(X['WrongHouseFloor'].isnull()), 'WrongHouseFloor'] = 0\n        return X\n    \n    def floor_correction(self, X):\n        X.loc[(X['Floor'] == 0) & (X['HouseYear'] < 1945), 'Floor'] = 1\n        X.loc[(X['Floor'] == 0) & (X['HouseYear'] < 1945), 'WrongFloor'] = 1\n        X.loc[(X['Floor'] == 0) & (X['HouseYear'] > 1944), 'Floor'] = 9\n        X.loc[(X['Floor'] == 0) & (X['HouseYear'] > 1944), 'WrongFloor'] = 1\n   \n        wrongDataIdx = ((X['Floor'] > X['HouseFloor']))\n        # [a,b] = [b,a]\n        X.loc[wrongDataIdx, ['Floor','HouseFloor']] = X.loc[wrongDataIdx, ['HouseFloor','Floor']].values\n        X.loc[wrongDataIdx, 'WrongFloor'] = 1\n        X.loc[(X['Floor'] == 0), 'Floor'] = 1\n        X.loc[(X['Floor'] == 0), 'WrongFloor'] = 1\n        X['Floor'] = X['Floor'].round().astype(int)\n        X.loc[(X['WrongFloor'].isnull()), 'WrongFloor'] = 0\n        return X\n    \n    def life_square_correction(self, X):\n        wrongDataIdx = (X['LifeSquare'] < 7)\n        X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n        step = 14\n        for numrooms in range(1,6):\n            for houseyearstep in range(1900,2020,12):\n                corrDataIdx = ((X['Square'] > 20) & (X['LifeSquare'] > 10) & (X['LifeSquare'] < X['Square'] - 7) &(X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                squarediff = (X.loc[corrDataIdx, 'Square'].median() - X.loc[corrDataIdx, 'LifeSquare'].median())\n                if not(np.isnan(squarediff)):\n                    wrongDataIdx = ((X['LifeSquare'].isnull()) & (X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                    X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n                    X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n                    wrongDataIdx = ((X['LifeSquare'] < 10) & (X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                    X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n                    X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n                    wrongDataIdx = ((X['Square'] > 20) & (X['LifeSquare'] > X['Square'] - 8) & (X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                    X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n                    X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n                    wrongDataIdx = ((X['Square'] > 20) & (X['LifeSquare']\/X['Square'] > 0.87) & (X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                    X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n                    X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n                    wrongDataIdx = ((X['Square'] > 20) & (X['LifeSquare']\/X['Square'] < 0.5) & (X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep))\n                    X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n                    X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n        wrongDataIdx = ((X['LifeSquare'].isnull()))\n        corrDataIdx = ((X['Square'] > 20) & (X['LifeSquare'] > 6) & (X['LifeSquare'] < X['Square'] - 7))\n        squarediff = (X.loc[corrDataIdx, 'Square'].median() - X.loc[corrDataIdx, 'LifeSquare'].median())\n        if not(np.isnan(squarediff)):\n            X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n            X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n       \n        wrongDataIdx = (X['LifeSquare']\/X['Square'] > 0.87)\n        corrDataIdx = ((X['Square'] > 20) & (X['LifeSquare'] > 6) & (X['LifeSquare'] < X['Square'] - 7) & (X['LifeSquare']\/X['Square'] < 0.87))\n        squarediff = (X.loc[corrDataIdx, 'Square'].median() - X.loc[corrDataIdx, 'LifeSquare'].median())\n        if not(np.isnan(squarediff)):\n            X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square'] - squarediff\n            X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n        \n        wrongDataIdx = (X['LifeSquare'] <= 0)\n        X.loc[wrongDataIdx, 'LifeSquare'] = X.loc[wrongDataIdx, 'Square']\n        X.loc[wrongDataIdx, 'WrongLifeSquare'] = 1\n        X.loc[(X['WrongLifeSquare'].isnull()), 'WrongLifeSquare'] = 0\n        X['LifeSquare'] = X['LifeSquare'].round(1)\n        return X\n        \n    def kitchen_square_correction(self, X):\n        step = 6\n        for numrooms in range(1,6):\n            for houseyearstep in range(1900,2020,8):\n                if houseyearstep <= 1994:\n                    wrongDataIdx = ((X['KitchenSquare']\/X['Square'] >= 0.33))\n                    corrDataIdx = ((X['KitchenSquare']\/X['Square'] < 0.33) & (X['KitchenSquare'] > 4))\n                elif houseyearstep > 1994:\n                    wrongDataIdx = ((X['KitchenSquare']\/X['Square'] >= 0.43))\n                    corrDataIdx = ((X['KitchenSquare']\/X['Square'] < 0.43) & (X['KitchenSquare'] > 4))\n                wrongDataIdx1 = ((X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep + step))\n                mediankitchsquare = X.loc[corrDataIdx & wrongDataIdx1, 'KitchenSquare'].median()\n                if not(np.isnan(mediankitchsquare)):\n                    X.loc[wrongDataIdx & wrongDataIdx1, 'KitchenSquare'] = mediankitchsquare\n                    X.loc[wrongDataIdx & wrongDataIdx1, 'WrongKitchenSquare'] = 1\n                if houseyearstep <= 1994:\n                    wrongDataIdx = ((X['KitchenSquare'] <= 4))\n                    corrDataIdx = ((X['KitchenSquare']\/X['Square'] < 0.3) & (X['KitchenSquare'] > 4))\n                elif houseyearstep > 1994:\n                    wrongDataIdx = ((X['KitchenSquare'] <= 4))\n                    corrDataIdx = ((X['KitchenSquare']\/X['Square'] < 0.43) & (X['KitchenSquare'] > 4))\n                wrongDataIdx1 = ((X['Rooms'] == numrooms) & (X['HouseYear'] >= houseyearstep - step) & (X['HouseYear'] < houseyearstep + step))\n                mediankitchsquare = X.loc[corrDataIdx & wrongDataIdx1, 'KitchenSquare'].median()\n                if not(np.isnan(mediankitchsquare)):\n                    X.loc[wrongDataIdx & wrongDataIdx1, 'KitchenSquare'] = mediankitchsquare\n                    X.loc[wrongDataIdx & wrongDataIdx1, 'WrongKitchenSquare'] = 1\n        wrongDataIdx = (X['KitchenSquare'].isnull())\n        X.loc[wrongDataIdx, 'KitchenSquare'] = (X.loc[wrongDataIdx, 'Square'] - X.loc[wrongDataIdx, 'LifeSquare']) * 0.6\n        X.loc[(X['WrongKitchenSquare'].isnull()), 'WrongKitchenSquare'] = 0\n        return X\n    \n    def healthcare_1_corr(self, X):\n        distmin = int(min(X['DistrictId']))\n        distmax = int(max(X['DistrictId']))\n        for dist in range(distmin, distmax):\n            for hyear in range(1900, 2020):\n                wrongDataIdx = ((X['DistrictId'] == dist) & (X['HouseYear'] == hyear) & X['Healthcare_1'].isnull())\n                corrDataIdx = ((X['DistrictId'] == dist) & (X['HouseYear'] == hyear))\n                X.loc[wrongDataIdx, 'Healthcare_1'] = X.loc[corrDataIdx, 'Healthcare_1'].median()\n            wrongDataIdx = ((X['DistrictId'] == dist) & X['Healthcare_1'].isnull())\n            corrDataIdx = ((X['DistrictId'] == dist))\n            X.loc[wrongDataIdx, 'Healthcare_1'] = X.loc[corrDataIdx, 'Healthcare_1'].median()\n        wrongDataIdx = (X['Healthcare_1'].isnull())\n        X.loc[wrongDataIdx, 'Healthcare_1'] = X['Healthcare_1'].median()\n        return X\n    \n    def str_val_to_num(self, X):\n        str_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_2'] = X['Ecology_2'].replace(str_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].replace(str_to_numbers)\n        X['Shops_2'] = X['Shops_2'].replace(str_to_numbers)\n        return X\n    \n    def null_elements_correction(self, X):\n        self.av_X = pd.DataFrame(data = None, index = list('1'), columns = X.columns)\n        for item in X.columns:\n            if self.av_X[item].isnull().any():\n                if not('Wrong' in item):\n                    self.av_X.loc[self.av_X[item].isnull(), item] = X[item].median()\n                    #self.av_X.iloc[0][item] = X[item].median()\n                    self.av_X[item] = self.av_X[item].astype(X[item].dtypes)\n            if (X[item].isnull().any()) & (not('Wrong' in item)):\n                X.loc[(X[item].isnull()), item] = self.av_X.iloc[0][item]\n            else:\n                X.loc[(X[item].isnull()), item] = 0\n            #X.loc[(X[item].isnull()) & (item == 'HouseYear'), item] = datetime.datetime.now().year\n        #print('NaN elements: \\n', X.isnull().sum())\n        return X\n    \n    def data_correction(self, Y):\n        Y['Square'] = Y['Square'].round(2)\n        Y['LifeSquare'] = Y['LifeSquare'].round(2)\n        Y['KitchenSquare'] = Y['KitchenSquare'].round(2)\n        if 'Price' in Y.columns:\n            Y['Price'] = Y['Price'].round(2)\n        Y = self.district_corr(Y)\n        Y = self.square_correction(Y)\n        Y = self.house_year_correction(Y)\n        Y = self.house_floor_correction(Y)\n        Y = self.floor_correction(Y)\n        Y = self.number_of_rooms_correction(Y)\n        Y = self.life_square_correction(Y)\n        Y = self.kitchen_square_correction(Y)\n        Y = self.healthcare_1_corr(Y)\n        Y = self.str_val_to_num(Y)\n        Y = self.null_elements_correction(Y)\n        Y['Id'] = Y['Id'].astype(str)\n        return Y","25717580":"preprocessor = DataPreprocessing()\ntrain = preprocessor.data_correction(train)","67c0b422":"for item in train.columns:\n    if train[item].dtype in ['int64', 'float64']:\n        item_mean = train[item].mean()\n        item_mode = train[item].mode()[0]\n        item_median = train[item].median()\n    else: item_mean = None\n    print(item, 'Min value: ', train[item].min(), '\\n',\n          'Mean value: ', item_mean, '\\n',\n          'Mode value: ', item_mode, '\\n',\n          'Median value: ', item_median, '\\n',\n          'Max value: ', train[item].max(),  '\\n',\n           np.unique,  '\\n', '\\n')","d04e6b65":"plt.figure(figsize = (10,10))\ndataindx = (train['Square'] >= 19) & (train['HouseYear'] >= 1900) & (train['HouseYear'] <= 2020) & (train['DistrictId'] >= 1)\nsns.scatterplot(x = train.loc[dataindx, 'HouseYear'], y = train.loc[dataindx, 'DistrictId'])\nplt.grid(b = True, which = 'both')\nplt.minorticks_on\nplt.show()\ntrain.loc[dataindx, 'HouseYear'].count()","444b5132":"for hyear in range(1957,2021):\n    print(hyear, ' - ' ,train.loc[train['HouseYear'] == hyear, 'DistrictId'].count())\n","1666155d":"for item in train.columns:\n    print(item, ' -- ', 'Unique values:', pd.unique(train[item]), '\\n', '\\n', pd.value_counts((train[item])), '\\n\\n\\n' )","ed2231f3":"plt.hist(train['HouseYear'], bins = 2022-1900, range = (1900,2021), log = False)\nplt.show()","fbf638f4":"plt.figure(figsize = (10,10))\ndataindx = (train['Square'] > 150) & (train['HouseYear'] <= 2020) & (train['DistrictId'] >= 1)\nsns.scatterplot(x = train.loc[dataindx, 'HouseYear'], y = train.loc[dataindx, 'DistrictId'])\nplt.grid(b = True, which = 'both')\nplt.minorticks_on\nplt.show()\ntrain.loc[dataindx, 'HouseYear'].count()","d31cba65":"train.isnull().sum().sum()","0f69fa59":"train.info()","fa194411":"plt.scatter(train['Rooms'], train['Price']\/train['Square'])\nplt.grid(True)\nplt.show()","898f9060":"bins_num = 15\nprice_per_area = 10000\nfig, axs = plt.subplots(3, 2, figsize=(12, 12), tight_layout=True)\naxs[0,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 1) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'orange', range = [1000,10000])\naxs[0,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 2) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'yellow', range = [1000,10000])\naxs[0,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 3) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'green', range = [1000,10000])\naxs[0,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 4) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'grey', range = [1000,10000])\naxs[0,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 5) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'blue', range = [1000,10000])\naxs[0,0].legend(labels=['Rooms = 1', 'Rooms = 2', 'Rooms = 3', 'Rooms = 4', 'Rooms = 5', 'Rooms = 6'])\naxs[0,1].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 1) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'orange', range = [1000,10000])\naxs[0,1].axvline((train['Price']\/train['Square']).loc[(train['Rooms'] == 1) & ((train['Price']\/train['Square']) < price_per_area)].mean(), color='k', linestyle='dashed', linewidth=1)\naxs[1,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 2) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'yellow', range = [1000,10000])\naxs[1,0].axvline((train['Price']\/train['Square']).loc[(train['Rooms'] == 2) & ((train['Price']\/train['Square']) < price_per_area)].mean(), color='k', linestyle='dashed', linewidth=1)\naxs[1,1].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 3) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'green', range = [1000,10000])\naxs[1,1].axvline((train['Price']\/train['Square']).loc[(train['Rooms'] == 3) & ((train['Price']\/train['Square']) < price_per_area)].mean(), color='k', linestyle='dashed', linewidth=1)\naxs[2,0].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 4) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'grey', range = [1000,10000])\naxs[2,0].axvline((train['Price']\/train['Square']).loc[(train['Rooms'] == 4) & ((train['Price']\/train['Square']) < price_per_area)].mean(), color='k', linestyle='dashed', linewidth=1)\naxs[2,1].hist((train['Price']\/train['Square']).loc[(train['Rooms'] == 5) & ((train['Price']\/train['Square']) < price_per_area)], bins = bins_num, density = True, alpha = 0.4, color = 'blue', range = [1000,10000])\naxs[2,1].axvline((train['Price']\/train['Square']).loc[(train['Rooms'] == 5) & ((train['Price']\/train['Square']) < price_per_area)].mean(), color='k', linestyle='dashed', linewidth=1)\naxs[0,0].set_xlabel('Price per m^2')\naxs[0,1].set_xlabel('Price per m^2')\naxs[1,0].set_xlabel('Price per m^2')\naxs[1,1].set_xlabel('Price per m^2')\naxs[2,0].set_xlabel('Price per m^2')\naxs[2,1].set_xlabel('Price per m^2')\naxs[0,0].grid(True)\naxs[0,1].grid(True)\naxs[1,0].grid(True)\naxs[1,1].grid(True)\naxs[2,0].grid(True)\naxs[2,1].grid(True)\nplt.show()","081a7dd3":"fig, axs = plt.subplots(1, 2, figsize=(14, 5))\naxs[0].hist2d(train['Rooms'], train['Price'], bins=(5, 80), norm = colors.LogNorm())\naxs[1].hist2d(train['Rooms'], train['Price']\/train['Square'], bins=(5, 80), norm = colors.LogNorm(), range = [[0,6],[1000, 10000]])\naxs[0].grid(True)\naxs[1].grid(True)\naxs[0].set_xlabel('Rooms')\naxs[0].set_title('Price')\naxs[0].set_ylabel('Price')\naxs[1].set_xlabel('Rooms')\naxs[1].set_title('Price per square')\naxs[1].set_ylabel('Price per m^2')\nplt.show()","82cd6b52":"fig, axs = plt.subplots(1, 2, figsize=(14, 5), sharex=True, sharey=True, tight_layout=True)\naxs[0].hist2d(train['Floor'], train['Price']\/train['Square'], bins=(20, 80), norm = colors.LogNorm(), range = [[1,50],[1000, 10000]])\naxs[1].hist2d(train['HouseFloor'], train['Price']\/train['Square'], bins=(20, 80), norm = colors.LogNorm(), range = [[1,50],[1000, 10000]])\naxs[0].grid(True)\naxs[1].grid(True)\naxs[0].set_xlabel('Floor')\naxs[0].set_title('Price per m^2 from floor')\naxs[0].set_ylabel('Price per m^2')\naxs[1].set_xlabel('House floor')\naxs[1].set_title('Price per square from house floor')\naxs[1].set_ylabel('Price per m^2')\nplt.show()","7e4b0a6f":"fig, axs = plt.subplots(1, 2, figsize=(14, 5))\naxs[0].hist2d(train['HouseYear'], train['Price'], bins=(6, 80), norm = colors.LogNorm(), range = [[1900,2020],[50000, 650000]])\naxs[1].hist2d(train['HouseYear'], train['Price']\/train['Square'], bins=(6, 80), norm = colors.LogNorm(), range = [[1900,2020],[1000, 10000]])\naxs[0].grid(True)\naxs[1].grid(True)\naxs[0].set_xlabel('HouseYear')\naxs[0].set_title('Price')\naxs[0].set_ylabel('Price')\naxs[1].set_xlabel('HouseYear')\naxs[1].set_title('Price per square')\naxs[1].set_ylabel('Price per m^2')\nplt.show()","04eea8f7":"fig, axs = plt.subplots(1, 2, figsize=(14, 5))\naxs[0].hist2d(train['DistrictId'], train['Price'], bins=(6, 80), norm = colors.LogNorm())\naxs[1].hist2d(train['DistrictId'], train['Price']\/train['Square'], bins=(6, 80), norm = colors.LogNorm(), range = [[0,200],[1000, 10000]])\naxs[0].grid(True)\naxs[1].grid(True)\naxs[0].set_xlabel('DistrictId')\naxs[0].set_title('Price')\naxs[0].set_ylabel('Price')\naxs[1].set_xlabel('DistrictId')\naxs[1].set_title('Price per square')\naxs[1].set_ylabel('Price per m^2')\nplt.show()","debaf63e":"train['Id'] = train['Id'].astype(str)\ntrain['DistrictId'] = train['DistrictId'].astype(str)\n\ntrain.select_dtypes(include='object').columns.tolist()","96995ca8":"class FeatureGeneration:\n    def __init__(self, Y):\n        self.y = Y\n        self.square_av_meter_price_df = None\n        self.av_meter_price_df = None\n        self.district_av_meter_price_df = None\n        self.district_house_floor_av_meter_price_df = None\n        self.rooms_av_meter_price_df = None\n        self.district_rooms_av_meter_price_df = None\n        self.district_house_year_rooms_av_meter_price_df = None\n        self.house_year_rooms_av_meter_price_df = None\n        self.district_house_floor_rooms_av_meter_price_df = None\n        self.district_kitchen_square_rooms_av_meter_price_df = None\n        self.district_life_square_rooms_av_meter_price_df = None\n        self.flat_av_meter_price_df = None\n        self.floor_meter_price_df = None\n        self.district_location_df = None\n        self.average_house_floor_df = None\n        self.number_of_flats_df = None\n        self.mean_building_year_df = None\n        self.district_population_df = None\n        self.district_planting_of_greenery_df = None\n        self.ecology_df = None\n        self.district_house_year_kitchen_square_df = None\n        self.house_year_rooms_square_df = None\n        self.house_year_rooms_life_square_df = None\n        self.district_social_df = None\n        self.district_healthcare_df = None\n        self.district_shops_df = None\n        self.house_floor_rooms_square_df = None\n        self.house_floor_rooms_life_square_df = None\n        \n\n    def add_square_av_meter_price(self, X):\n        temp = None\n        X['1Square'] = round(X['Square'] \/ 1)\n        if self.square_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['MeterPrice'] = X['Price']\/X['Square']\n            self.square_av_meter_price_df = X.groupby(['1Square'])['MeterPrice'].mean().reset_index()\\\n            .rename(columns = {'index':'1Square', 'MeterPrice':'SquareAvMeterPrice'})\n            X = X.drop(columns=['MeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.square_av_meter_price_df, on = ['1Square'], how = 'left')\n        X = X.drop(columns=['1Square'])\n        if (X['SquareAvMeterPrice'].isnull().any()):\n            if temp is None:\n                temp = X['SquareAvMeterPrice'].median()\n            X.loc[X['SquareAvMeterPrice'].isnull(),'SquareAvMeterPrice'] = temp\n        return X\n    \n    def add_av_meter_price(self, X):\n        temp = None\n        if self.av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['MeterPrice'] = X['Price']\/X['Square']\n            self.av_meter_price_df = X.groupby(['DistrictId'])['MeterPrice'].mean().reset_index()\\\n            .rename(columns = {'index':'DistrictId', 'MeterPrice':'AvMeterPrice'})\n            X = X.drop(columns=['MeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.av_meter_price_df, on = ['DistrictId'], how = 'left')\n        if (X['AvMeterPrice'].isnull().any()):\n            if temp is None:\n                temp = X['AvMeterPrice'].median()\n            X.loc[X['AvMeterPrice'].isnull(),'AvMeterPrice'] = temp\n        return X\n    \n    def add_district_av_meter_price(self, X):\n        temp = None\n        if self.district_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            self.district_av_meter_price_df = X.groupby('DistrictId')['Price'].mean().reset_index()\\\n            .rename(columns = {'index':'DistrictId'})\n            district_av_square = X.groupby('DistrictId')['Square'].mean().reset_index()\\\n            .rename(columns = {'index':'DistrictId'})\n            self.district_av_meter_price_df = self.district_av_meter_price_df.merge(district_av_square, on = 'DistrictId', how = 'left')\n            self.district_av_meter_price_df['DistrictAvMeterPrice'] = self.district_av_meter_price_df[\"Price\"]\/self.district_av_meter_price_df[\"Square\"]\n            self.district_av_meter_price_df = self.district_av_meter_price_df.drop(['Price', 'Square'], axis = 1)\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_av_meter_price_df, on='DistrictId', how='left')\n        if (X['DistrictAvMeterPrice'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictAvMeterPrice'].median()\n            X.loc[X['DistrictAvMeterPrice'].isnull(),'DistrictAvMeterPrice'] = temp\n        return X\n    \n    def add_district_house_floor_av_meter_price(self, X):\n        temp = None\n        if self.district_house_floor_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['HouseFloorMeterPrice'] = X['Price']\/X['HouseFloor']\/X['Square']\n            self.district_house_floor_av_meter_price_df = X.groupby(['DistrictId', 'HouseFloor'])['HouseFloorMeterPrice'].median().reset_index()\\\n            .rename(columns = {'index':'DistrictId', 'HouseFloorMeterPrice':'DistrictHouseFloorAvMeterPrice'})\n            X = X.drop(columns=['Price'])\n            X = X.drop(columns=['HouseFloorMeterPrice'])\n        X = X.merge(self.district_house_floor_av_meter_price_df, on = ['DistrictId', 'HouseFloor'], how = 'left')\n        if (X['DistrictHouseFloorAvMeterPrice'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictHouseFloorAvMeterPrice'].median()\n            X.loc[X['DistrictHouseFloorAvMeterPrice'].isnull(),'DistrictHouseFloorAvMeterPrice'] = temp\n        return X\n    \n    def add_rooms_av_meter_price(self, X):\n        temp = None\n        if self.rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.rooms_av_meter_price_df = X.groupby(['Rooms'])['RoomsMeterPrice'].mean().reset_index()\\\n            .rename(columns={'index':'Rooms', 'RoomsMeterPrice':'RoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.rooms_av_meter_price_df, on=['Rooms'], how='left')\n        if (X['RoomsAvMeterPrice'].isnull().any()):\n            if temp is None:\n                temp = X['RoomsAvMeterPrice'].median()\n            X.loc[X['RoomsAvMeterPrice'].isnull(),'RoomsAvMeterPrice'] = temp\n        return X\n    \n    def add_district_rooms_av_meter_price(self, X):\n        if self.district_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.district_rooms_av_meter_price_df = X.groupby(['DistrictId','Rooms'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'Rooms', 'RoomsMeterPrice':'DistrictRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_rooms_av_meter_price_df, on=['DistrictId', 'Rooms'], how='left')\n        if (X['DistrictRoomsAvMeterPrice'].isnull().any()):\n            X.loc[X['DistrictRoomsAvMeterPrice'].isnull(),'DistrictRoomsAvMeterPrice'] = X.loc[X['DistrictRoomsAvMeterPrice'].isnull(),'RoomsAvMeterPrice']\n        return X\n    \n    def add_district_house_year_rooms_av_meter_price(self, X):\n        if self.district_house_year_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.district_house_year_rooms_av_meter_price_df = X.groupby(['DistrictId','Rooms', 'HouseYear'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'Rooms', 'RoomsMeterPrice':'DistrictHouseYearRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_house_year_rooms_av_meter_price_df, on=['DistrictId','Rooms', 'HouseYear'], how='left')\n        if (X['DistrictHouseYearRoomsAvMeterPrice'].isnull().any()):\n            X.loc[X['DistrictHouseYearRoomsAvMeterPrice'].isnull(),'DistrictHouseYearRoomsAvMeterPrice'] = X.loc[X['DistrictHouseYearRoomsAvMeterPrice'].isnull(),'DistrictHouseYearRoomsAvMeterPrice'].median()\n            X.loc[X['DistrictHouseYearRoomsAvMeterPrice'].isnull(),'DistrictHouseYearRoomsAvMeterPrice'] = X.loc[X['DistrictHouseYearRoomsAvMeterPrice'].isnull(),'DistrictRoomsAvMeterPrice']\n        return X\n    \n    def add_house_year_rooms_av_meter_price(self, X):\n        if self.house_year_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.house_year_rooms_av_meter_price_df = X.groupby(['Rooms', 'HouseYear'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'Rooms', 'RoomsMeterPrice':'HouseYearRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.house_year_rooms_av_meter_price_df, on=['Rooms', 'HouseYear'], how='left')\n        step = 6\n        for hyear in range(1900,2020):\n            if X.loc[(X['HouseYear'] == hyear), 'HouseYearRoomsAvMeterPrice'].isnull().any():\n                print('check')\n                wrongDataIndx = (X['HouseYear'] == hyear) & (X['HouseYearRoomsAvMeterPrice'].isnull())\n                corrDataIndx = (X['HouseYear'] >= hyear - step) & (X['HouseYear'] <= hyear + step)\n                X.loc[wrongDataIndx, 'HouseYearRoomsAvMeterPrice'] = X.loc[corrDataIndx, 'HouseYearRoomsAvMeterPrice'].median()\n            print(X.loc[(X['HouseYear'] >= hyear - step - 7) & (X['HouseYear'] <= hyear + step + 7), 'HouseYearRoomsAvMeterPrice'].median())\n            X.loc[(X['HouseYearRoomsAvMeterPrice'].isnull()), 'HouseYearRoomsAvMeterPrice'] = X.loc[(X['HouseYear'] >= hyear - step - 7) & (X['HouseYear'] <= hyear + step + 7), 'HouseYearRoomsAvMeterPrice'].median()\n        print(X.loc[(X['HouseYearRoomsAvMeterPrice'].isnull()),['HouseYearRoomsAvMeterPrice', 'HouseYear']])\n        return X\n    \n    \n    def add_district_house_floor_rooms_av_meter_price(self, X):\n        if self.district_house_floor_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.district_house_floor_rooms_av_meter_price_df = X.groupby(['DistrictId','Rooms', 'HouseFloor'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'Rooms', 'RoomsMeterPrice':'DistrictHouseFloorRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_house_floor_rooms_av_meter_price_df, on=['DistrictId','Rooms', 'HouseFloor'], how='left')\n        if (X['DistrictHouseFloorRoomsAvMeterPrice'].isnull().any()):\n            X.loc[X['DistrictHouseFloorRoomsAvMeterPrice'].isnull(),'DistrictHouseFloorRoomsAvMeterPrice'] = X.loc[X['DistrictHouseFloorRoomsAvMeterPrice'].isnull(),'DistrictHouseFloorRoomsAvMeterPrice'].median()\n            X.loc[X['DistrictHouseFloorRoomsAvMeterPrice'].isnull(),'DistrictHouseFloorRoomsAvMeterPrice'] = X.loc[X['DistrictHouseFloorRoomsAvMeterPrice'].isnull(),'DistrictRoomsAvMeterPrice']\n        return X\n    \n    def add_district_kitchen_square_rooms_av_meter_price(self, X):\n        if self.district_kitchen_square_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.district_kitchen_square_rooms_av_meter_price_df = X.groupby(['DistrictId','Rooms', 'KitchenSquare'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'RoomsMeterPrice':'DistrictKitchenSquareRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_kitchen_square_rooms_av_meter_price_df, on=['DistrictId','Rooms', 'KitchenSquare'], how='left')\n        if (X['DistrictKitchenSquareRoomsAvMeterPrice'].isnull().any()):\n            X.loc[X['DistrictKitchenSquareRoomsAvMeterPrice'].isnull(),'DistrictKitchenSquareRoomsAvMeterPrice'] = X['DistrictKitchenSquareRoomsAvMeterPrice'].median()\n        return X\n    \n    def add_district_life_square_rooms_av_meter_price(self, X):\n        if self.district_life_square_rooms_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['RoomsMeterPrice'] = X['Price']\/X['Square']\n            self.district_life_square_rooms_av_meter_price_df = X.groupby(['DistrictId','Rooms', 'LifeSquare'])['RoomsMeterPrice'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'RoomsMeterPrice':'DistrictLifeSquareRoomsAvMeterPrice'})\n            X = X.drop(columns=['RoomsMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.district_life_square_rooms_av_meter_price_df, on=['DistrictId','Rooms', 'LifeSquare'], how='left')\n        if (X['DistrictLifeSquareRoomsAvMeterPrice'].isnull().any()):\n            X.loc[X['DistrictLifeSquareRoomsAvMeterPrice'].isnull(),'DistrictLifeSquareRoomsAvMeterPrice'] = X['DistrictLifeSquareRoomsAvMeterPrice'].median()\n        return X\n    \n    def add_flat_av_meter_price(self, X):\n        if self.flat_av_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['MeterPrice_1'] = X['Price']\/X['Square'] # see add_av_meter_price\n            self.flat_av_meter_price_df = X.groupby(['DistrictId'])['MeterPrice_1'].mean().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'MeterPrice_1':'FlatAvMeterPrice'})\n            X = X.drop(columns=['MeterPrice_1'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.flat_av_meter_price_df, on=['DistrictId'], how='left')\n        if (X['FlatAvMeterPrice'].isnull().any()):\n            X.loc[X['FlatAvMeterPrice'].isnull(),'FlatAvMeterPrice'] = X.loc[X['FlatAvMeterPrice'].isnull(),'RoomsAvMeterPrice']\n        return X\n    \n    def add_floor_meter_price(self, X):\n        temp = None\n        if self.floor_meter_price_df is None:\n            X['Price'] = self.y.values\n            X['FloorMeterPrice'] = X['Price']\/X['Floor']\/X['Square']\n            self.floor_meter_price_df = X.groupby(['DistrictId','Floor'])['FloorMeterPrice'].mean().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'FloorMeterPrice':'FloorAvMeterPrice'})\n            X = X.drop(columns=['FloorMeterPrice'])\n            X = X.drop(columns=['Price'])\n        X = X.merge(self.floor_meter_price_df, on=['DistrictId', 'Floor'], how='left')\n        if X['FloorAvMeterPrice'].isnull().any():\n            if temp is None:\n                temp = X['FloorAvMeterPrice'].median()\n            X.loc[X['FloorAvMeterPrice'].isnull(),'FloorAvMeterPrice'] = temp\n        return X\n    \n    # ____________________________________________\n    \n    def add_district_location(self, X):\n        temp = None\n        if self.district_location_df is None:\n            self.district_location_df = X.groupby('DistrictId')['HouseYear'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'HouseYear':'DistrictLocation'})\n            self.district_location_df['DistrictLocation'] = self.district_location_df['DistrictLocation'].astype(int)\n        X = X.merge(self.district_location_df, on='DistrictId', how='left')\n        if (X['DistrictLocation'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictLocation'].median()\n            X.loc[X['DistrictLocation'].isnull(),'DistrictLocation'] = temp\n        return X\n    \n    def add_average_house_floor(self, X):\n        temp = None\n        if self.average_house_floor_df is None:\n            self.average_house_floor_df = X.groupby('DistrictId')['HouseFloor'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'HouseFloor':'AvHouseFloor'})\n            self.average_house_floor_df['AvHouseFloor'] = self.average_house_floor_df['AvHouseFloor'].astype(int)\n        X = X.merge(self.average_house_floor_df, on='DistrictId', how='left')\n        if (X['AvHouseFloor'].isnull().any()):\n            if temp is None:\n                temp = X['AvHouseFloor'].median()\n            X.loc[X['AvHouseFloor'].isnull(),'AvHouseFloor'] = temp\n        return X\n    \n    def add_number_of_flats(self, X):\n        temp = None\n        if self.number_of_flats_df is None:\n            self.number_of_flats_df = X['DistrictId'].value_counts().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'DistrictId':'NumberOfFlats'})\n        X = X.merge(self.number_of_flats_df, on='DistrictId', how='left')\n        if (X['NumberOfFlats'].isnull().any()):\n            if temp is None:\n                temp = X['NumberOfFlats'].median()\n            X.loc[X['NumberOfFlats'].isnull(),'NumberOfFlats'] = temp\n        return X\n    \n    def add_mean_building_year(self, X):\n        # District have some new houses\n        temp = None\n        if self.mean_building_year_df is None:\n            self.mean_building_year_df = X.groupby('DistrictId')['HouseYear'].mean().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'HouseYear':'MeanBuildingYear'})\n            self.mean_building_year_df['MeanBuildingYear'] = self.mean_building_year_df['MeanBuildingYear'].astype(int)\n        X = X.merge(self.mean_building_year_df, on='DistrictId', how='left')\n        if (X['MeanBuildingYear'].isnull().any()):\n            if temp is None:\n                temp = X['MeanBuildingYear'].median()\n            X.loc[X['MeanBuildingYear'].isnull(),'MeanBuildingYear'] = temp\n        return X\n    \n    def add_district_population(self, X):\n        # The more average rooms in flat the more people could leave in a house. The more sale announcements in district the more population in it.\n        temp = None\n        if self.district_population_df is None:\n            self.district_population_df = X.groupby('DistrictId')['Rooms'].mean().reset_index()\\\n            .rename(columns={'index':'DistrictId'})\n            number_of_flats = X['DistrictId'].value_counts().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'DistrictId':'NumberOfFlats'})\n            self.district_population_df = self.district_population_df.merge(number_of_flats, on='DistrictId', how='left')\n            self.district_population_df['DistrictAvPopulation'] = self.district_population_df[\"NumberOfFlats\"] \/ self.district_population_df[\"Rooms\"]\n            self.district_population_df = self.district_population_df.drop(['NumberOfFlats', 'Rooms'], axis = 1)\n        X = X.merge(self.district_population_df, on='DistrictId', how='left')\n        if (X['DistrictAvPopulation'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictAvPopulation'].median()\n            X.loc[X['DistrictAvPopulation'].isnull(),'DistrictAvPopulation'] = temp\n        return X\n    \n    def add_district_planting_of_greenery(self, X):\n        temp = None\n        if self.district_planting_of_greenery_df is None:\n            self.district_planting_of_greenery_df = X.groupby('DistrictId')['HouseFloor'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'HouseFloor':'Greenery'})\n            self.district_planting_of_greenery_df['Greenery'] = self.district_planting_of_greenery_df['Greenery'].astype(int)\n        X = X.merge(self.district_planting_of_greenery_df, on='DistrictId', how='left')\n        if (X['Greenery'].isnull().any()):\n            if temp is None:\n                temp = X['Greenery'].median()\n            X.loc[X['Greenery'].isnull(),'Greenery'] = temp\n        return X\n    \n    def add_ecology(self, X):\n        temp = None\n        X['Ecology'] = X['Ecology_1'] \/ max(X['Ecology_1']) * X['Ecology_2'] \/ max(X['Ecology_2']) * X['Ecology_3'] \/ max(X['Ecology_3'])\n        if self.ecology_df is None:\n            self.ecology_df = X.groupby('DistrictId')['Ecology'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'Ecology':'DistrictAvEcology'})\n            #X = X.drop(columns=['Ecology'])\n        X = X.merge(self.ecology_df, on = 'DistrictId', how = 'left')\n        if (X['DistrictAvEcology'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictAvEcology'].median()\n            X.loc[X['DistrictAvEcology'].isnull(),'DistrictAvEcology'] = temp\n        temp = None\n        if (X['Ecology'].isnull().any()):\n            if temp is None:\n                temp = X['Ecology'].median()\n            X.loc[X['Ecology'].isnull(),'Ecology'] = temp\n        return X\n    \n    def add_relative_house_floor(self, X):\n        temp = None\n        X['RelativeHouseFloor'] = X['Floor'] \/ X['HouseFloor']\n        X.loc[X['Floor'] == 1, 'RelativeHouseFloor'] = 0\n        return X\n    \n    def add_district_house_year_kitchen_square(self, X):\n        temp = None\n        if self.district_house_year_kitchen_square_df is None:\n            self.district_house_year_kitchen_square_df = X.groupby(['DistrictId', 'HouseYear'])['KitchenSquare'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'KitchenSquare':'DistrHouseYearKitchenSquare'})\n        X = X.merge(self.district_house_year_kitchen_square_df, on = ['DistrictId', 'HouseYear'], how = 'left')\n        if (X['DistrHouseYearKitchenSquare'].isnull().any()):\n            if temp is None:\n                temp = X.groupby('DistrictId')['DistrHouseYearKitchenSquare'].median().reset_index()\n            for item in temp['DistrictId']:\n                X.loc[(X['DistrHouseYearKitchenSquare'].isnull()) & (X['DistrictId'] == item),'DistrHouseYearKitchenSquare'] = temp.loc[temp['DistrictId'] == item, 'DistrHouseYearKitchenSquare']\n            if (X['DistrHouseYearKitchenSquare'].isnull().any()):\n                X.loc[(X['DistrHouseYearKitchenSquare'].isnull()),'DistrHouseYearKitchenSquare'] = temp['DistrHouseYearKitchenSquare'].median()\n        return X\n    \n    def add_house_year_rooms_square(self, X):\n        temp = None\n        X['RoomsSq'] = X['Square'] \/ X['Rooms']\n        if self.house_year_rooms_square_df is None:\n            self.house_year_rooms_square_df = X.groupby(['HouseYear', 'Rooms'])['RoomsSq'].median().reset_index()\\\n            .rename(columns={'index':'HouseYear', 'RoomsSq':'HouseYearAvRoomSquare'})\n        X = X.drop(columns=['RoomsSq'])\n        X = X.merge(self.house_year_rooms_square_df, on = ['HouseYear', 'Rooms'], how = 'left')\n        if (X['HouseYearAvRoomSquare'].isnull().any()):\n            if temp is None:\n                temp = X.groupby('HouseYear')['HouseYearAvRoomSquare'].median().reset_index()\n            for item in temp['HouseYear']:\n                X.loc[(X['HouseYearAvRoomSquare'].isnull()) & (X['HouseYear'] == item),'HouseYearAvRoomSquare'] = temp.loc[temp['HouseYear'] == item, 'HouseYearAvRoomSquare']\n            if (X['HouseYearAvRoomSquare'].isnull().any()):\n                X.loc[(X['HouseYearAvRoomSquare'].isnull()),'HouseYearAvRoomSquare'] = temp['HouseYearAvRoomSquare'].median()\n        return X\n    \n    def add_house_year_rooms_lifesquare(self, X):\n        temp = None\n        X['RoomsLifeSquare'] = X['LifeSquare'] \/ X['Rooms']\n        if self.house_year_rooms_life_square_df is None:\n            self.house_year_rooms_life_square_df = X.groupby(['HouseYear', 'Rooms'])['RoomsLifeSquare'].median().reset_index()\\\n            .rename(columns={'index':'HouseYear', 'RoomsLifeSquare':'HouseYearAvRoomLifeSquare'})\n        X = X.drop(columns=['RoomsLifeSquare'])\n        X = X.merge(self.house_year_rooms_life_square_df, on = ['HouseYear', 'Rooms'], how = 'left')\n        if (X['HouseYearAvRoomLifeSquare'].isnull().any()):\n            if temp is None:\n                temp = X.groupby('HouseYear')['HouseYearAvRoomLifeSquare'].median().reset_index()\n            for item in temp['HouseYear']:\n                X.loc[(X['HouseYearAvRoomLifeSquare'].isnull()) & (X['HouseYear'] == item),'HouseYearAvRoomLifeSquare'] = temp.loc[temp['HouseYear'] == item, 'HouseYearAvRoomLifeSquare']\n            if (X['HouseYearAvRoomLifeSquare'].isnull().any()):\n                X.loc[(X['HouseYearAvRoomLifeSquare'].isnull()),'HouseYearAvRoomLifeSquare'] = temp['HouseYearAvRoomLifeSquare'].median()\n        return X\n    \n    def add_district_social(self, X):\n        temp = None\n        X['Social'] = X['Social_1'] \/ max(X['Social_1']) * X['Social_2'] \/ max(X['Social_2']) * X['Social_3'] \/ max(X['Social_3'])\n        if self.district_social_df is None:\n            self.district_social_df = X.groupby('DistrictId')['Social'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'Social':'DistrictSocial'})\n        X = X.drop(columns=['Social'])\n        X = X.merge(self.district_social_df, on = 'DistrictId', how = 'left')\n        if (X['DistrictSocial'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictSocial'].median()\n                X.loc[(X['DistrictSocial'].isnull()),'DistrictSocial'] = temp\n        return X\n    \n    def add_district_healthcare(self, X):\n        temp = None\n        X['Healthcare'] = X['Healthcare_1'] \/ max(X['Healthcare_1']) * X['Helthcare_2'] \/ max(X['Helthcare_2'])\n        if self.district_healthcare_df is None:\n            self.district_healthcare_df = X.groupby('DistrictId')['Healthcare'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'Healthcare':'DistrictHealthcare'})\n        X = X.drop(columns=['Healthcare'])\n        X = X.merge(self.district_healthcare_df, on = 'DistrictId', how = 'left')\n        if (X['DistrictSocial'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictHealthcare'].median()\n                X.loc[(X['DistrictHealthcare'].isnull()),'DistrictHealthcare'] = temp\n        return X\n    \n    def add_district_shops(self, X):\n        temp = None\n        X['Shops'] = X['Shops_1'] \/ max(X['Shops_1']) * X['Shops_2'] \/ max(X['Shops_2'])\n        if self.district_shops_df is None:\n            self.district_shops_df = X.groupby('DistrictId')['Shops'].median().reset_index()\\\n            .rename(columns={'index':'DistrictId', 'Shops':'DistrictShops'})\n        X = X.drop(columns=['Shops'])\n        X = X.merge(self.district_shops_df, on = 'DistrictId', how = 'left')\n        if (X['DistrictShops'].isnull().any()):\n            if temp is None:\n                temp = X['DistrictShops'].median()\n                X.loc[(X['DistrictShops'].isnull()),'DistrictShops'] = temp\n        return X\n    \n    def add_house_floor_rooms_square(self, X):\n        temp = None\n        X['RoomsSq'] = X['Square'] \/ X['Rooms']\n        if self.house_floor_rooms_square_df is None:\n            self.house_floor_rooms_square_df = X.groupby(['HouseFloor', 'Rooms'])['RoomsSq'].median().reset_index()\\\n            .rename(columns={'index':'HouseFloor', 'RoomsSq':'HouseFloorAvRoomSquare'})\n        X = X.drop(columns=['RoomsSq'])\n        X = X.merge(self.house_floor_rooms_square_df, on = ['HouseFloor', 'Rooms'], how = 'left')\n        if (X['HouseFloorAvRoomSquare'].isnull().any()):\n            if temp is None:\n                temp = X.groupby('HouseFloor')['HouseFloorAvRoomSquare'].median().reset_index()\n            for item in temp['HouseFloor']:\n                wrongdataindx = ((X['HouseFloorAvRoomSquare'].isnull()) & (X['HouseFloor'] == item))\n                X.loc[wrongdataindx,'HouseFloorAvRoomSquare'] = temp.loc[temp['HouseFloor'] == item, 'HouseFloorAvRoomSquare']\n            if (X['HouseFloorAvRoomSquare'].isnull().any()):\n                X.loc[(X['HouseFloorAvRoomSquare'].isnull()),'HouseFloorAvRoomSquare'] = temp['HouseFloorAvRoomSquare'].median()\n        return X\n    \n    def add_house_floor_rooms_lifesquare(self, X):\n        temp = None\n        X['RoomsLifeSquare'] = X['LifeSquare'] \/ X['Rooms']\n        if self.house_floor_rooms_life_square_df is None:\n            self.house_floor_rooms_life_square_df = X.groupby(['HouseFloor', 'Rooms'])['RoomsLifeSquare'].median().reset_index()\\\n            .rename(columns={'index':'HouseFloor', 'RoomsLifeSquare':'HouseFloorAvRoomLifeSquare'})\n        X = X.drop(columns=['RoomsLifeSquare'])\n        X = X.merge(self.house_floor_rooms_life_square_df, on = ['HouseFloor', 'Rooms'], how = 'left')\n        if (X['HouseFloorAvRoomLifeSquare'].isnull().any()):\n            if temp is None:\n                temp = X.groupby('HouseFloor')['HouseFloorAvRoomLifeSquare'].median().reset_index()\n            for item in temp['HouseFloor']:\n                X.loc[(X['HouseFloorAvRoomLifeSquare'].isnull()) & (X['HouseFloor'] == item),'HouseFloorAvRoomLifeSquare'] = temp.loc[temp['HouseFloor'] == item, 'HouseFloorAvRoomLifeSquare']\n            if (X['HouseFloorAvRoomLifeSquare'].isnull().any()):\n                X.loc[(X['HouseFloorAvRoomLifeSquare'].isnull()),'HouseFloorAvRoomLifeSquare'] = temp['HouseFloorAvRoomLifeSquare'].median()\n        return X\n    \n    def add_ideal_data(self, X):\n        X['IdealData'] = X['WrongRooms'] + X['WrongSquare'] + X['WrongLifeSquare'] + X['WrongKitchenSquare'] + X['WrongHouseFloor'] + X['WrongFloor'] + X['WrongHouseYear'] + X['SingleRoom'] + X['WrongDistr']\n        return X\n    \n    def add_new_features(self, X):\n        if (self.y is not None):\n            X = self.add_square_av_meter_price(X)\n            X = self.add_av_meter_price(X)\n            X = self.add_district_av_meter_price(X)\n            X = self.add_district_house_floor_av_meter_price(X)\n            X = self.add_rooms_av_meter_price(X)\n            X = self.add_district_rooms_av_meter_price(X)\n            X = self.add_district_house_year_rooms_av_meter_price(X)\n            X = self.add_house_year_rooms_av_meter_price(X)\n            X = self.add_district_house_floor_rooms_av_meter_price(X)\n            X = self.add_district_kitchen_square_rooms_av_meter_price(X)\n            X = self.add_district_life_square_rooms_av_meter_price(X)\n            X = self.add_flat_av_meter_price(X)\n            X = self.add_floor_meter_price(X)\n        X = self.add_district_location(X)\n        X = self.add_average_house_floor(X)\n        X = self.add_number_of_flats(X)\n        X = self.add_mean_building_year(X)\n        X = self.add_district_population(X)\n        X = self.add_district_planting_of_greenery(X)\n        X = self.add_ecology(X)\n        X = self.add_relative_house_floor(X)\n        X = self.add_district_house_year_kitchen_square(X)\n        X = self.add_house_year_rooms_square(X)\n        X = self.add_house_year_rooms_lifesquare(X)\n        X = self.add_district_social(X)\n        X = self.add_district_healthcare(X)\n        X = self.add_district_shops(X)\n        X = self.add_house_floor_rooms_square(X)\n        X = self.add_house_floor_rooms_lifesquare(X)\n        X = self.add_ideal_data(X)\n        return X","b24677c0":"train.columns.tolist()","67014eeb":"feature_names = ['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['AvMeterPrice','DistrictHouseFloorAvMeterPrice', \n                     'DistrictRoomsAvMeterPrice', 'DistrictHouseYearRoomsAvMeterPrice', 'HouseYearRoomsAvMeterPrice',\n                     'DistrictHouseFloorRoomsAvMeterPrice', 'DistrictKitchenSquareRoomsAvMeterPrice',\n                     'FloorAvMeterPrice', 'DistrictLocation', 'NumberOfFlats', 'MeanBuildingYear', \n                     'DistrictAvPopulation', 'DistrictAvEcology', 'RelativeHouseFloor', \n                     'HouseYearAvRoomSquare', \n                     'DistrictSocial', 'HouseFloorAvRoomSquare', \n                     'IdealData']\n# full dataset\n\"\"\"feature_names = ['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', 'Healthcare_1',\n                 'Helthcare_2', 'Shops_1', 'Shops_2', 'WrongRooms', 'WrongSquare', 'WrongLifeSquare',\n                 'WrongKitchenSquare', 'WrongHouseFloor', 'WrongFloor', 'WrongHouseYear', 'SingleRoom', 'WrongDistr']\nnew_feature_names = ['SquareAvMeterPrice','AvMeterPrice','DistrictAvMeterPrice', 'DistrictHouseFloorAvMeterPrice', \n                    'RoomsAvMeterPrice', \n                     'DistrictRoomsAvMeterPrice', 'DistrictHouseYearRoomsAvMeterPrice', 'HouseYearRoomsAvMeterPrice',\n                     'DistrictHouseFloorRoomsAvMeterPrice', 'DistrictKitchenSquareRoomsAvMeterPrice',\n                     'DistrictLifeSquareRoomsAvMeterPrice', 'FlatAvMeterPrice', \n                     'FloorAvMeterPrice', 'DistrictLocation', 'AvHouseFloor', 'NumberOfFlats', 'MeanBuildingYear', \n                     'DistrictAvPopulation', 'Greenery', 'Ecology', 'DistrictAvEcology', 'RelativeHouseFloor', \n                     'DistrHouseYearKitchenSquare', 'HouseYearAvRoomSquare', 'HouseYearAvRoomLifeSquare', \n                     'DistrictSocial', 'DistrictHealthcare', 'DistrictShops', 'HouseFloorAvRoomSquare', \n                     'HouseFloorAvRoomLifeSquare', 'IdealData'] \"\"\"\ntarget_name = 'Price'","9409a3b4":"train = pd.read_csv(TRAIN_DATASET_PATH)\ntest = pd.read_csv(TEST_DATASET_PATH)\nX = train.drop(columns = target_name)\ny = train[target_name]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.33, shuffle = True, random_state = 21)\n#print(X_train.shape, X_valid.shape, test.shape)","b7ca3967":"preprocessor = DataPreprocessing()\nX_train = preprocessor.data_correction(X_train)\nX_valid = preprocessor.data_correction(X_valid)\ntest = preprocessor.data_correction(test)\n#print(X_train.shape, X_valid.shape, test.shape)","e6963601":"test['HouseYear'].median()","2ce804c6":"newfeatures = FeatureGeneration(y_train)\nprint(X_train.columns.tolist())","420bcd76":"X_train = newfeatures.add_new_features(X_train)\nX_valid = newfeatures.add_new_features(X_valid)\nvalid = X_valid.copy()\ntest = newfeatures.add_new_features(test)\nX_train_initial, X_valid_initial, y_train_initial, y_valid_initial = X_train, X_valid, y_train, y_valid\ntest_initial = test\nX_train.shape, X_valid.shape, test.shape","978625b3":"#X_train = X_train_initial[feature_names + new_feature_names]\n#X_valid = X_valid_initial[feature_names + new_feature_names]\n#test = test_initial[feature_names + new_feature_names]\n\nX_train = X_train_initial[feature_names]\nX_valid = X_valid_initial[feature_names]\ntest = test_initial[feature_names]\nX_train.shape, X_valid.shape, test.shape","9e95fddd":"X_train.isnull().sum().sum(), X_valid.isnull().sum().sum(), y_train.isnull().sum()","c1ffd702":"### rf_model = RandomForestRegressor(random_state = 21, criterion = 'mse')\n#n_estimators=100, *, criterion='mse', max_depth=None, min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, random_state=None, verbose=0, warm_start=False, ccp_alpha=0.0, max_samples=None\nrf_model = RandomForestRegressor(random_state = 21, n_estimators=200, criterion = 'mse', min_samples_leaf=2,\n                                 min_weight_fraction_leaf = 0.0005)\nrf_model.fit(X_train, y_train)","f61b1466":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\ny_test_preds_rf = y_test_preds.copy()\nrf_model.score(X_valid, y_valid)\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","97232a15":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring = 'r2', cv = KFold(n_splits = 3, shuffle = True, random_state = 21))\nprint(cv_score)\ncv_score.mean()","4698c2e6":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns = ['feature_name', 'importance'])\nfeature_importances.sort_values(by = 'importance', ascending = False)","4b111d1d":"\"\"\"(*, loss='ls', learning_rate=0.1, n_estimators=100, subsample=1.0, criterion='friedman_mse', \nmin_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_depth=3, min_impurity_decrease=0.0, \nmin_impurity_split=None, init=None, random_state=None, max_features=None, alpha=0.9, verbose=0, max_leaf_nodes=None, \nwarm_start=False, validation_fraction=0.1, n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)\"\"\"\ngb_model = GradientBoostingRegressor(loss='ls', learning_rate=0.04, n_estimators=300, subsample=1.0, \n                                     min_weight_fraction_leaf=0.0005, max_depth=7, max_features=17, random_state=21)\ngb_model.fit(X_train, y_train)\n\ny_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\ny_test_preds_gb = y_test_preds.copy()\n\ngb_model.score(X_valid, y_valid)","07cf5f25":"evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","02a55e83":"cv_score = cross_val_score(gb_model, X_valid, y_valid, scoring = 'r2', cv = KFold(n_splits = 3, shuffle = True, random_state = 21))\nprint(cv_score)\ncv_score.mean()","4b5c41e6":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns = ['feature_name', 'importance'])\nfeature_importances.sort_values(by = 'importance', ascending = False)","c6ca8522":"votingregr = VotingRegressor([('rf_model', rf_model), ('gb_model', gb_model)], n_jobs = -1)\nvotingregr.fit(X_train, y_train)\ny_train_preds = votingregr.predict(X_train)\ny_test_preds = votingregr.predict(X_valid)\ny_test_preds_vr = y_test_preds.copy()\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","c35779f4":"cv_score = cross_val_score(votingregr, X_train, y_train, scoring = 'r2', cv = KFold(n_splits = 3, shuffle = True, random_state = 21))\nprint(cv_score)\ncv_score.mean()","2696afb2":"#submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\n#submit.head()","e341feb5":"#predictions = votingregr.predict(test)\n#predictions","2d0aa091":"#submit['Price'] = predictions\n#submit.head()","01bc921c":"#submit.to_csv('VotingRegrsubmit.csv', index=False)","5da7039c":"# 1. Exploratory Data Analysis. Data validation","94d0fced":"Change Id and DistrictId types to string type.","3a4e5a66":"Some rounding and data correction","ec2fc4d2":"Checking of empty elements","4850f3e9":"# 7. Test dataset price prediction","45d0f62b":"# 6. Predictions","e997e9e6":"min, max, median, etc.","b089f092":"# 5. New features add to train and test","6ae5b209":" 733 75","81154571":"# Random Forest Regressor","72223358":"Check NaN values through all datasets","e77b7a85":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","fdfb13a2":"There are some plots for price per sq.m from rooms, etc.","b526023d":"# Gradient Boosting Regressor","0be22451":"# Voting Regressor","39acf31d":"# 4. Train and set subdivision","465329a0":"# 3. Features selection","83765eaa":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b8ad172a":"# 2. New numerical features"}}