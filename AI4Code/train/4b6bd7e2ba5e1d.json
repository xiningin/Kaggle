{"cell_type":{"add43409":"code","40d83fa3":"code","14306016":"code","0059c6b7":"code","8da919f8":"code","20a3843e":"code","edc07fe6":"code","f88b0c7c":"code","e9837684":"code","85d5e2e6":"code","f2dd2c34":"code","05a9a458":"code","262bdf02":"code","5d8c7e98":"code","94f48313":"code","be2748a0":"code","54576c18":"code","d2a762e7":"code","72595f0f":"code","43af9110":"markdown","102db490":"markdown","a9a9cc62":"markdown","56db5b6d":"markdown","3aadbb3d":"markdown","fc3067ca":"markdown","a98610ac":"markdown","55bbbe73":"markdown","4dd30296":"markdown","d86e92f9":"markdown","d87b8828":"markdown","7a7b6d01":"markdown","92f2fb21":"markdown","2b6adf51":"markdown"},"source":{"add43409":"import os\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\n\nkeras = tf.keras\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","40d83fa3":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntrain.head()","14306016":"print('Shape of the train data:', train.shape)\nprint('Shape of the test data:', test.shape)","0059c6b7":"train_unique = pd.DataFrame(train['label'].unique()).sort_values(by=0)\ntrain_unique","8da919f8":"plt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='label',\n                      order=train['label'].value_counts().index,\n                      edgecolor=(0, 0, 0),\n                      linewidth=2)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\nplt.ylabel('Frequency of the Labels', fontsize=14)\nplt.xlabel('Labels', fontsize=14)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Distribution of the Labels of the Train Dataset', fontsize=20)","20a3843e":"y = train['label']  # Labels\nX = train.drop(['label'], axis=1)  # Features\nX.head()","edc07fe6":"# Let's look at the some exapmles of the feature set\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    fig = X.iloc[i].values.reshape((28, 28))\n    plt.imshow(fig)\n    plt.axis('off')\nplt.show()","f88b0c7c":"# Normalizing the dataset\nX = X \/ 255.0\n\n# CNN expects 3D inputs, so I will convert my data tto 3D form\ny = y.values.reshape(-1, 1)\nX = X.values.reshape(-1, 28, 28, 1)\n\nprint('Shape of the X matrix:', X.shape)\nprint('Shape of the y matrix:', y.shape)","e9837684":"# Encoding the labels\ny = to_categorical(y, num_classes=10)","85d5e2e6":"# Train-Test split\ntrainX, valX, trainY, valY = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=13)","f2dd2c34":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(trainX.shape[1:])))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Dense(10, activation='softmax'))","05a9a458":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])  # Adam Optimizer\n\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor='loss', mode='auto', patience=2,\n                                                 restore_best_weights=True)\n\nhist = model.fit(trainX, trainY, epochs=10, batch_size=64, callbacks=[early_stopping],\n                 verbose=1, validation_data=(valX, valY))\nhist.history.keys()\nmodel.summary()","262bdf02":"# Evaluation of the model\n\nmodel.evaluate(valX, valY)","5d8c7e98":"plt.figure(figsize=(15, 8))\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Losses of the Model', fontsize=20)\nplt.legend(['Train Loss', 'Validation Loss'], loc='upper right')\nplt.xlabel('Epochs', fontsize=12)\nplt.ylabel('Losses', fontsize=12)","94f48313":"plt.figure(figsize=(15, 8))\nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Accuracy of the Model', fontsize=20)\nplt.legend(['Train Accuracy', 'Validation Accuracy'], loc='upper right')\nplt.xlabel('Epochs', fontsize=12)\nplt.ylabel('Losses', fontsize=12)","be2748a0":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest = test \/ 255.0\ntest = test.values.reshape(-1, 28, 28, 1)","54576c18":"predictions = model.predict(test)\npredictions = np.argmax(predictions, axis=1)\n\npredictions = pd.DataFrame(predictions)\npredictions","d2a762e7":"sample_sub = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsample_sub = pd.concat([sample_sub['ImageId'], predictions], axis=1)\nsample_sub.columns = ['ImageId', 'Label']\nsample_sub","72595f0f":"sample_sub.to_csv('ata_submission.csv', index=False)","43af9110":"# Aim of this Notebook\n\n**Welcome everyone!**\n\n**In this notebook, I will be dealing with the Digit Recognition by using CNN.**\n\n**For the first step of this notebook, I will do some visualizations.**\n\n**For the next step, I will train a CNN models for the accomplish my aim.**\n\n**I am open to feedback and suggestions, feel free to comment your feedback and suggestions on the comment section or contact me.**\n\n**So, let's get started!**","102db490":"# Feature and Label","a9a9cc62":"# CNN Model Part-2","56db5b6d":"**Train dataset includes all the labels from the 0 to 9.**","3aadbb3d":"# Test Data","fc3067ca":"# Importing Libraries","a98610ac":"# Performance Graphs","55bbbe73":"# Reading Datasets","4dd30296":"**At the end of this step, we have 3D inputs.**","d86e92f9":"# CNN Model Part-1","d87b8828":"# Normalizing and Reshaping","7a7b6d01":"**According to the figure above, the x-axis represents that the labels of the training dataset are ordered from the high frequent one to lesser. The y-axis represents that the frequency of the labels.**\n\n**As seen from the figure, the number 1 is the most frequent label in the training dataset.**\n\n**According to the graph above, the dataset labels are pretty equally distributed. There are not major frequency differences between the labels.**","92f2fb21":"# Simple Visualization","2b6adf51":"# Train-Test Split"}}