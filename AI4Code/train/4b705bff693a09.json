{"cell_type":{"4fb07b7a":"code","3ac76876":"code","9702e928":"code","80318230":"code","7d46382e":"code","0bf8106e":"code","3ab4248c":"code","0b8fd276":"code","fe1a3659":"code","7b94cab8":"code","004a5ebc":"code","e6dc3992":"code","54a1b807":"code","67951e9f":"code","7b4b0bdd":"code","7947a931":"code","05767656":"code","2a1dcb87":"code","c278a6cb":"code","34749234":"code","a53cc8ca":"code","73357b49":"code","b1d0dd78":"code","a308b963":"code","bab8e519":"code","20fa9ced":"code","d890c474":"code","f2a15245":"code","7fbd34bb":"code","65b59488":"code","1ee0a4d5":"code","1531fc86":"code","c78bc750":"code","12428f0a":"code","262d7436":"markdown","006fa9fa":"markdown","4e6d0728":"markdown"},"source":{"4fb07b7a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory  ","3ac76876":"URL = 'https:\/\/storage.googleapis.com\/mledu-datasets\/cats_and_dogs_filtered.zip'\npath_to_zip = tf.keras.utils.get_file('cats_and_dogs.zip', origin=URL, extract=True)\nPATH = os.path.join(os.path.dirname(path_to_zip), 'cats_and_dogs_filtered')\n\ntrain_dir = os.path.join(PATH, 'train')\nvalidation_dir = os.path.join(PATH, 'validation')\n\nBATCH_SIZE = 32\nIMG_SIZE = (160,160)\n\ntrain_dataset = image_dataset_from_directory(train_dir,\n                                             shuffle = True,\n                                             batch_size = BATCH_SIZE,\n                                             image_size= IMG_SIZE)\nvalidation_dataset = image_dataset_from_directory(validation_dir,\n                                             shuffle = True,\n                                             batch_size = BATCH_SIZE,\n                                             image_size= IMG_SIZE)","9702e928":"class_names = train_dataset.class_names\nplt.figure(figsize=(10,10))\nfor images, labels in train_dataset.take(1):\n  for i in range(9):\n    ax = plt.subplot(3,3,i+1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(class_names[labels[i]])\n    plt.axis(\"off\")","80318230":"val_batches = tf.data.experimental.cardinality(validation_dataset)\ntest_dataset = validation_dataset.take(val_batches \/\/ 5)\nvalidation_dataset = validation_dataset.skip(val_batches \/\/ 5)","7d46382e":"print(\"Number of validation batches %d\" % tf.data.experimental.cardinality(validation_dataset))\nprint(\"Number of test batches %d\" % tf.data.experimental.cardinality(test_dataset))","0bf8106e":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)\ntest_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)\nvalidation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)","3ab4248c":"data_augmentation = tf.keras.Sequential([\n                                         tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal'),\n                                         tf.keras.layers.experimental.preprocessing.RandomRotation(0.2)\n])","0b8fd276":"for images, _ in train_dataset.take(1):\n  plt.figure(figsize=(10,10))\n  first_image = images[0]\n  for i in range(9):\n    ax = plt.subplot(3,3,i+1)\n    augmentated_image = data_augmentation(tf.expand_dims(first_image, 0))\n    plt.imshow(augmentated_image[0]\/ 255)\n    plt.axis(\"off\")","fe1a3659":"preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input","7b94cab8":"rescale = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/127.5, offset=-1)","004a5ebc":"IMG_SHAPE = IMG_SIZE +(3,)\nbase_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,\n                                               include_top = False,\n                                               weights = 'imagenet')","e6dc3992":"image_batch, label_batch = next(iter(train_dataset))\nfeature_batch = base_model(image_batch)\nprint(feature_batch.shape)","54a1b807":"base_model.trainable = False","67951e9f":"base_model.summary()","7b4b0bdd":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()\nfeature_batch_average = global_average_layer(feature_batch)\nprint(feature_batch_average.shape)","7947a931":"prediction_layer = tf.keras.layers.Dense(1)\nprediction_batch = prediction_layer(feature_batch)\nprint(prediction_batch.shape)","05767656":"inputs = tf.keras.Input(shape=(160,160,3))\nx = data_augmentation(inputs)\nx = preprocess_input(x)\nx = base_model(x, training=False)\nx = global_average_layer(x)\nx = tf.keras.layers.Dropout(0.2)(x)\noutputs =  prediction_layer(x)\nmodel = tf.keras.Model(inputs, outputs)","2a1dcb87":"base_learning_rate = 0.0001\nmodel.compile(optimizer = tf.keras.optimizers.Adam(lr=base_learning_rate),\n              loss = tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])","c278a6cb":"model.summary()","34749234":"len(model.trainable_variables)","a53cc8ca":"initial_epochs = 10\nloss0, accuracy0 = model.evaluate(validation_dataset)","73357b49":"print(\"Initial Loss : {:.2f}\".format(loss0))\nprint(\"Initial Accuracy : {:.2f}\".format(accuracy0))","b1d0dd78":"history = model.fit(train_dataset,\n                   epochs = initial_epochs,\n                   validation_data = validation_dataset)","a308b963":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8,8))\nplt.subplot(2,1,1)\nplt.plot(acc, label='Taining Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel(\"Accuracy\")\nplt.ylim([min(plt.ylim()),1])\nplt.title(\"Training vs Validation Accuracy\")\n\nplt.subplot(2,1,2)\nplt.plot(loss, label='Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel(\"Cross Entropy\")\nplt.ylim([0,1.0])\nplt.title(\"Training vs Validation Loss\")\nplt.xlabel(\"Epoch\")\n\nplt.show()","bab8e519":"base_model.trainable = True","20fa9ced":"print(\"Number of layers in the base model :\", len(base_model.layers))","d890c474":"fine_tune_at = 100\nfor layer in base_model.layers[:fine_tune_at]:\n  layer.trainable = False","f2a15245":"model.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate\/10),\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])","7fbd34bb":"model.summary()","65b59488":"len(model.trainable_variables)","1ee0a4d5":"fine_tune_epochs = 10\ntotal_epochs = initial_epochs + fine_tune_epochs\n\nhistory_fine = model.fit(train_dataset,\n                         epochs = total_epochs,\n                         initial_epoch = history.epoch[-1],\n                         validation_data = validation_dataset)","1531fc86":"acc += history_fine.history['accuracy']\nval_acc += history_fine.history['val_accuracy']\n\nloss += history_fine.history['loss']\nval_loss += history_fine.history['val_loss']\n\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(acc, label='Taining Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.plot([initial_epochs-1, initial_epochs-1], plt.ylim(), label='Start Fine Tuning')\nplt.ylabel(\"Accuracy\")\nplt.ylim([0.8,1])\nplt.title(\"Training vs Validation Accuracy\")\n\nplt.subplot(2,1,2)\nplt.plot(loss, label='Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.plot([initial_epochs-1, initial_epochs-1], plt.ylim(), label='Start Fine Tuning')\nplt.ylabel(\"Cross Entropy\")\nplt.ylim([0,1.0])\nplt.title(\"Training vs Validation Loss\")\nplt.xlabel(\"Epoch\")\n\nplt.show()","c78bc750":"loss, accuracy = model.evaluate(test_dataset)\nprint('Test Accuracy :', accuracy)","12428f0a":"image_batch , label_batch = test_dataset.as_numpy_iterator().next()\npredictions = model.predict_on_batch(image_batch).flatten()\n\npredictions = tf.nn.sigmoid(predictions)\npredictions = tf.where(predictions<0.5,0,1)\n\nprint(\"Predictions : \\n\", predictions.numpy())\nprint(\"Label : \\n\", label_batch)\n\nplt.figure(figsize=(10,10))\nfor i in range(9):\n  ax = plt.subplot(3,3,i+1)\n  plt.imshow(image_batch[i].astype(\"uint8\"))\n  plt.title(class_names[predictions[i]])\n  plt.axis(\"off\")","262d7436":"**Creating Base Model from Pre-Trained**\n\n---\n\n\n\n---\n\n","006fa9fa":"**Data Preprocessing**\n\n---\n\n\n\n---\n\n","4e6d0728":"**Compile Model**\n\n---\n\n\n---\n\n\n"}}