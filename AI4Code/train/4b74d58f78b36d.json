{"cell_type":{"0ddb26b5":"code","8d92b3a3":"code","d7f0100a":"code","4bbc99e3":"code","af16a70c":"code","06df8b28":"code","c0625b24":"code","8e8a06a1":"code","f6cfe179":"code","3969e54b":"code","898a704d":"code","314bf7ab":"code","9dea4337":"code","47bd8bca":"code","53f6b66b":"code","027a2aa6":"code","b4c9514e":"code","eba1532d":"code","a7b38637":"code","1d1288e3":"code","fc04850d":"code","62c0eaac":"code","bbd7f478":"code","777b1576":"code","059f3725":"code","df215ef4":"code","e5beb0b2":"code","73c8cd86":"code","217b3024":"code","87baead9":"code","18d3c8dc":"code","be9afb23":"code","b8c77bf4":"code","4bf8846c":"code","f6fda034":"code","af6c2fe1":"code","be56fb7e":"code","3c8b56dd":"markdown","0991c168":"markdown","5e926f04":"markdown","c2b06e68":"markdown","7816849f":"markdown","571538b4":"markdown","bcbbb3ca":"markdown","381bcd95":"markdown","38e5bca5":"markdown","7ea53a6a":"markdown","07ef839d":"markdown","117bb892":"markdown","11a1ef57":"markdown","34ba3cd2":"markdown","841efc50":"markdown"},"source":{"0ddb26b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom glob import glob\nimport cv2\n\nfrom keras.models import Sequential \nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d92b3a3":"train_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\ntest_dir =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\nval_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'","d7f0100a":"\ndef picture_separation(folder):\n    y = []\n    x = []\n    image_list = []\n\n    for foldername in os.listdir(folder):\n        if not foldername.startswith('.'):\n            if foldername == \"NORMAL\":\n                label = 0\n            elif foldername == \"PNEUMONIA\":\n                label = 1\n            else:\n                label = 2\n                \n            for image_filename in os.listdir(folder + \"\/\"+ foldername):\n                img_file = cv2.imread(folder + \"\/\" + foldername + '\/' + image_filename,0)               \n                \n\n                if img_file is not None:\n                    img = cv2.resize(img_file,(64,64))\n                    img_arr = img_to_array(img) \/ 255\n                    x.append(img_arr)\n                    y.append(label)\n                    image_list.append(foldername + '\/' + image_filename)\n                                        \n    X = np.asarray(x)\n    y = np.asarray(y)\n    \n    \n\n    return X,y,image_list\n\n          \n        ","4bbc99e3":"X_train, y_train, img_train = picture_separation(train_dir)\n\ntrain_df = pd.DataFrame(img_train, columns=[\"images\"])\ntrain_df[\"target\"] = y_train\n","af16a70c":"train_df.head()","06df8b28":"train_df.info()","c0625b24":"sns.countplot(train_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(train_df[\"target\"].value_counts())","8e8a06a1":"X_val, y_val, img_val = picture_separation(val_dir)\n\nval_df = pd.DataFrame(img_val, columns=[\"images\"])\nval_df[\"target\"] = y_val","f6cfe179":"val_df.head()","3969e54b":"sns.countplot(val_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(val_df[\"target\"].value_counts())","898a704d":"X_test, y_test, img_test = picture_separation(test_dir)\n\ntest_df = pd.DataFrame(img_test, columns=[\"images\"])\ntest_df[\"target\"] = y_test","314bf7ab":"test_df.tail()","9dea4337":"sns.countplot(test_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(test_df[\"target\"].value_counts())","47bd8bca":" full_data = pd.concat([train_df, test_df, val_df], axis=0, ignore_index=True)","53f6b66b":"print(full_data.head())\nprint(full_data.tail())","027a2aa6":"plt.figure(figsize=(12,8))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.grid(color='#CCCCCC', linestyle='--')\nplt.show()","b4c9514e":"plt.figure(figsize=(10,7))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"green\", size = 14)\nplt.grid(color='#CCCCCC', linestyle='--')\nplt.show()","eba1532d":"sns.countplot(full_data[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(full_data[\"target\"].value_counts())\n","a7b38637":"plt.figure(figsize=(15,8))\n\nplt.subplot(2,3,1) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\n\nplt.subplot(2,3,2) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][1])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,3) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][10])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,4) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,5) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3876])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,6) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3877])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.suptitle(\"NORMAL or PNEUMONIA\", size = 16, color = \"darkred\")\nplt.show()","1d1288e3":"# the shape\nX_train.shape","fc04850d":"className = glob(train_dir + '\/*' )\nnumberOfClass = len(className)\nprint(\"NumberOfClass: \",numberOfClass)","62c0eaac":"batch_size = 32","bbd7f478":"train_datagen = ImageDataGenerator(rescale= 1.\/255,\n                   shear_range = 0.3,\n                   horizontal_flip=True,\n                   zoom_range = 0.3)","777b1576":"test_datagen = ImageDataGenerator(rescale= 1.\/255)","059f3725":"val_datagen = ImageDataGenerator(rescale= 1.\/255)","df215ef4":"train_generator = train_datagen.flow_from_directory(\n        train_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")\n\n","e5beb0b2":"test_generator = test_datagen.flow_from_directory(\n        test_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","73c8cd86":"val_generator = test_datagen.flow_from_directory(\n        val_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","217b3024":"X_train.shape[1:]","87baead9":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape = X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1)) # output\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.compile(loss = \"binary_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])\n","18d3c8dc":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","be9afb23":"history = model.fit_generator(\n                    train_generator,\n                    steps_per_epoch=5216\/\/32,\n                    epochs=20,\n                    validation_data=test_generator,\n                    validation_steps=624\/\/32,\n                    callbacks=[early_stopping])","b8c77bf4":"print(\"Accuracy of the model is - \" , model.evaluate_generator(test_generator)[1]*100 , \"%\")\nprint(\"Loss of the model is - \" , model.evaluate_generator(test_generator)[0])","4bf8846c":"#predictions = model.predict_generator(test_generator)","f6fda034":"history.history.keys()","af6c2fe1":"plt.figure()\nplt.plot(history.history[\"loss\"],label = \"Train Loss\")\nplt.plot(history.history[\"val_loss\"],label = \"Validation Loss\")\nplt.legend()\nplt.show()","be56fb7e":"plt.figure()\nplt.plot(history.history[\"accuracy\"],label = \"Train Accuracy\")\nplt.plot(history.history[\"val_accuracy\"],label = \"Validation Accuracy\")\nplt.legend()\nplt.show()","3c8b56dd":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >When our model reaches the desired level, we use early stopping to stop it.<\/p> <\/li>\n<\/ul>","0991c168":"<a id ='6' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Visualization<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe examine the accuracy and loss value of the model we created.<\/p> <\/li>\n<\/ul>","5e926f04":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the val path we specified to the function.<\/p> <\/li>\n<\/ul>","c2b06e68":"<a id ='3' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Pneumonia, Normal Pictures<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We examine our normal and pneumonia pictures.<\/p> <\/li>\n<\/ul>","7816849f":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe train our model that we created.<\/p> <\/li>\n<\/ul>","571538b4":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the test path we specified to the function.<\/p> <\/li>\n<\/ul>","bcbbb3ca":"<a id ='4' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Data Augmentation<\/h2>","381bcd95":"<h2 style = \"background:lightgreen;border:0\">Import Libraries<\/h2>","38e5bca5":"![normalPneumoia.PNG](attachment:3ab8e6a0-ad09-4106-8edf-cc6fc2f389f9.PNG)","7ea53a6a":"<a id ='1' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">File paths<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We determine the file paths.<\/p> <\/li>\n<\/ul>","07ef839d":"<a id ='2' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Reading pictures and Train - Test Split<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe divide the mixed pictures into NORMAL and PNEUMONIA. We add labels to these. Finally, we define a list of pictures.\n\n<\/p> <\/li>\n<\/ul>","117bb892":"<a id ='5' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Model Building (CNN)<\/h2>","11a1ef57":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the train path we specified to the function.<\/p> <\/li>\n<\/ul>","34ba3cd2":"<center><h1 style = \"background:lightgreen;border:0\">Introduction<\/h1><\/center>\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">The dataset is organized into 3 folders (train, test, val) and contains subfolders for each image category (Pneumonia\/Normal). There are 5,863 X-Ray images (JPEG) and 2 categories (Pneumonia\/Normal).<\/p>\n\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">Chest X-ray images (anterior-posterior) were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children\u2019s Medical Center, Guangzhou. All chest X-ray imaging was performed as part of patients\u2019 routine clinical care. We will try to create your CNN model using the images here. <\/p>\n    \n\n<h2 style = \"background:lightgreen;border:0\">Content :<\/h2>\n\n<ul>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#1\" style = \"color:black;font-weight:bold\"> File paths <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#2\" style = \"color:black;font-weight:bold\"> Reading pictures and Train - Test Split <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#3\" style = \"color:black;font-weight:bold\"> Pneumonia, Normal Pictures <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#4\" style = \"color:black;font-weight:bold\"> Data Augmentation <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#5\" style = \"color:black;font-weight:bold\"> Model Building (CNN) <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#6\" style = \"color:black;font-weight:bold\"> Visualization <\/a> <\/li>\n    \n  \n    \n<\/ul>\n    \n","841efc50":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We see how many targets there are.<\/p> <\/li>\n<\/ul>"}}