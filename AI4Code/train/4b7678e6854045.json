{"cell_type":{"2e631e3b":"code","bff6e729":"code","1ef6d96c":"code","dd98435d":"code","c1cf936d":"markdown"},"source":{"2e631e3b":"!pip install jupyter-dash pyngrok -q","bff6e729":"!pip install dash-cytoscape -q","1ef6d96c":"from pyngrok import ngrok\ntunnel = ngrok.connect(8050)","dd98435d":"from jupyter_dash import JupyterDash  # pip install dash\nimport dash_cytoscape as cyto  # pip install dash-cytoscape==0.2.0 or higher\nimport dash_html_components as html\nimport dash_core_components as dcc\nfrom dash.dependencies import Output, Input\nimport pandas as pd  # pip install pandas\nimport plotly.express as px\nimport math\nfrom dash import no_update\n\n\nexternal_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\napp = JupyterDash(__name__, external_stylesheets=external_stylesheets, server_url=tunnel.public_url)\n\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/Coding-with-Adam\/Dash-by-Plotly\/master\/Cytoscape\/org-data.csv\")\n\napp.layout = html.Div([\n    html.Div([\n        dcc.Dropdown(\n            id='dpdn',\n            value='breadthfirst',\n            clearable=False,\n            options=[\n                {'label': name.capitalize(), 'value': name}\n                for name in ['breadthfirst' ,'grid', 'random', 'circle', 'cose', 'concentric']\n            ]\n        ),\n        cyto.Cytoscape(\n            id='org-chart',\n            autoungrabify=True,\n            minZoom=0.2,\n            maxZoom=1,\n            layout={'name': 'breadthfirst'},\n            style={'width': '100%', 'height': '500px'},\n            elements=\n                [\n                    # Nodes elements\n                    {'data': {'id': x, 'label': x}} for x in df.name\n                ]\n                +\n                [\n                    # Edge elements\n                    {'data': {'source': 'Executive Director (Harriet)', 'target': 'Vice President (Sarah)'}},\n                    {'data': {'source': 'Executive Director (Harriet)', 'target': 'Vice President (Charlotte)'}},\n                    {'data': {'source': 'Vice President (Sarah)', 'target': 'Program Officer (Sojourner)'}},\n                    {'data': {'source': 'Vice President (Sarah)', 'target': 'Program Officer (Elizabeth)'}},\n                    {'data': {'source': 'Vice President (Charlotte)', 'target': 'Program Associate (Ellen)'}},\n                ]\n        )\n    ], className='six columns'),\n\n    html.Div([\n        html.Div(id='empty-div', children='')\n    ],className='one column'),\n\n    html.Div([\n        dcc.Graph(id='my-graph', figure=px.bar(df, x='name', y='slaves_freed'))\n    ], className='five columns'),\n\n], className='row')\n\n\n@app.callback(Output('org-chart', 'layout'),\n              Input('dpdn', 'value'))\ndef update_layout(layout_value):\n    if layout_value == 'breadthfirst':\n        return {\n        'name': layout_value,\n        'roots': '[id = \"Executive Director (Harriet)\"]',\n        'animate': True\n        }\n    else:\n        return {\n            'name': layout_value,\n            'animate': True\n        }\n\n\n@app.callback(\n    Output('my-graph','figure'),\n    Input('org-chart','tapNodeData'),\n)\ndef update_nodes(data):\n    if data is None:\n        return no_update\n    else:\n        dff = df.copy()\n        dff.loc[dff.name == data['label'], 'color'] = \"yellow\"\n        fig = px.bar(dff, x='name', y='slaves_freed')\n        fig.update_traces(marker={'color': dff['color']})\n        return fig\n\n\napp.run_server(mode='external')","c1cf936d":" ## Ngrok tunnel session rate-limit policy is 20 connections per minute. Every time a callback is activated, a session is triggered."}}