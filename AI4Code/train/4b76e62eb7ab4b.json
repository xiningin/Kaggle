{"cell_type":{"9baa0211":"code","3711c16f":"code","0a2aa2f2":"code","0a9aee75":"code","f52c2c5e":"code","2f27bc6f":"code","64012f9a":"code","ed5339dd":"code","bc6a50a1":"code","1ac394c6":"code","4bde67e1":"code","0cb25042":"code","d0c266b6":"code","f2d19192":"code","ade077be":"code","c56a0121":"code","ef776282":"code","cc988ae7":"code","c364aba1":"code","cc06fb65":"code","bc4c1e65":"code","417db074":"code","4cad482b":"code","4435fd56":"code","81a102dd":"code","d935e814":"code","938bf3b2":"code","345dce53":"markdown","fdc533a4":"markdown","f3d79482":"markdown","6f3d066e":"markdown","697cc736":"markdown","ea911b60":"markdown"},"source":{"9baa0211":"#importing libraries \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3711c16f":"#importing dataset\npd.set_option('max_columns',None)\nds = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\nds.head()","0a2aa2f2":"#3000 columns and 21 rows\nds.shape","0a9aee75":"ds.info()","f52c2c5e":"ds.isnull().any()","2f27bc6f":"ds.columns","64012f9a":"plt.figure(figsize=(12,10))\ncol = ['blue','dual_sim','four_g','three_g','touch_screen','price_range']\nc = 1\nfor i in col:\n    if c < 7:\n        plt.subplot(2,3,c)\n        sns.countplot(x = i,data =ds)\n        plt.xlabel(i)\n    c += 1\n    plt.tight_layout()","ed5339dd":"plt.figure(figsize=(12,10))\nsns.relplot(x = 'price_range',y = 'ram',data = ds,kind = 'line')","bc6a50a1":"plt.figure(figsize=(12,10))\nsns.relplot(x = 'price_range',y = 'battery_power',data = ds,kind = 'line')","1ac394c6":"plt.figure(figsize=(12,10))\nsns.relplot(x = 'price_range',y = 'int_memory',data = ds,kind = 'line')","4bde67e1":"plt.figure(figsize=(10,8))\nsns.stripplot(y = 'ram' , x = 'price_range', data = ds,jitter = True)","0cb25042":"fig = plt.figure(figsize=(15,12))\nsns.heatmap(ds.corr())","d0c266b6":"#defining dependent and independent variables\nx = ds.drop('price_range', axis=1)\ny = ds['price_range']","f2d19192":"#splitting data into training and testing set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","ade077be":"#Logistic Regression\n#training model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = lr.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nlra = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',lra)","c56a0121":"#KNN\n#training model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski',p = 2)\nknn.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = knn.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nknna = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","ef776282":"#SVM\n#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'linear',random_state = 0)\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva =accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","cc988ae7":"#Kernel SVM\n#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf', random_state = 0)\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nsva2 = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","c364aba1":"#applying hyperparameter tuning on SVM\nfrom sklearn.model_selection import GridSearchCV\nparameters = [{'C': [0.25, 0.5, 0.75, 1], 'kernel': ['linear']},\n              {'C': [0.25, 0.5, 0.75, 1], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\ngrid_search = GridSearchCV(estimator = svc,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                           n_jobs = -1)\ngrid_search.fit(x_train, y_train)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(best_accuracy*100))\nprint(\"Best Parameters:\", best_parameters)","cc06fb65":"#Naive Bayes\n#training model\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = nb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nnba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","bc4c1e65":"#Decision Tree\n#training model\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = dt.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\ndta = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","417db074":"#Random Forest\n#training model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 140, criterion = 'entropy',random_state = 0)\nrf.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = rf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nrfa = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","4cad482b":"#XGB Classifier\n#training model\nfrom xgboost import XGBClassifier\nxc = XGBClassifier(use_label_encoder=False,)\nxc.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = xc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\nxca = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","4435fd56":"#Cat Boost\n#training model\nfrom catboost import CatBoostClassifier\ncb = CatBoostClassifier()\ncb.fit(x_train,y_train)\n\n#getting confusion matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred = cb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nfrom sklearn.metrics import accuracy_score\ncba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","81a102dd":"#comparing accuracies\nplt.figure(figsize= (8,7))\nac = [lra,knna,sva,sva2,nba,dta,rfa,xca,cba,best_accuracy]\nname = ['Logistic Regression','knn','svm','Kernel Svm','Naive Bayes','Decision Tree', 'Random Forest','XG Boost','Cat Boost','SVM (Hyperparameter Tuning)']\nsns.barplot(x = ac,y = name,palette='pastel')\nplt.title(\"Plotting the Model Accuracies\", fontsize=16, fontweight=\"bold\")","d935e814":"df = pd.DataFrame({'models' : ['Logistic Regression','knn','svm','Kernel Svm','Naive Bayes','Decision Tree', 'Random Forest','XG Boost','Cat Boost','SVM (Hyperparameter Tuning)'], 'Accuracy Score':[lra,knna,sva,sva2,nba,dta,rfa,xca,cba,best_accuracy]})","938bf3b2":"df.sort_values(by = 'Accuracy Score', ascending = False)","345dce53":"**BEST ACCURACY WAS OBTAINED FROM SVM**","fdc533a4":"**MORE THE RAM MEANS MORE THE PRICE**","f3d79482":"**APPLYING MODELS**","6f3d066e":"**NO NULL VALUES**","697cc736":"**CLASSIFYING MOBILE PRICE USING VARIOUS CLASSIFICATION MODLES**\n\n**DATASET DESCRIPTION**\n* battery_power: Total energy a battery can store in one time measured in mAh\n* blue: Has bluetooth or not\n* clock_speed: speed at which microprocessor executes instructions\n* dual_sim: Has dual sim support or not\n* fc: Front Camera mega pixels\n* four_g: Has 4G or not\n* int_memory: Internal Memory in Gigabytes\n* m_dep: Mobile Depth in cm\n* mobile_wt: Weight of mobile phone\n* n_cores: Number of cores of processor\n* pc: Primary Camera mega pixels\n* px_height: Pixel Resolution Height\n* px_width: Pixel Resolution Width\n* ram: Random Access Memory in Mega Byte\n* sc_h: Screen Height of mobile in cm\n* sc_w: Screen Width of mobile in cm\n* talk_time: longest time that a single battery charge will last when you are\n* three_g: Has 3G or not\n* touch_screen: Has touch screen or not\n* wifi: Has wifi or not\n* price_range: This is the target variable with value of 0(low cost), 1(medium cost), 2(high cost) and 3(very high cost).","ea911b60":"**NO SIGNIFICANT CORRELATION**"}}