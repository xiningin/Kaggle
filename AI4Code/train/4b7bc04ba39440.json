{"cell_type":{"073798cf":"code","45bdf53b":"code","eb3bddf4":"code","2011a1c8":"code","39f02520":"code","d14ff14e":"code","38ce55cf":"code","347d7c4b":"code","7f0ae20b":"code","44a9da01":"code","0b1434b1":"markdown","5d3fc63d":"markdown","4361a57b":"markdown","332e9f26":"markdown","0faa022f":"markdown","c9d2fd40":"markdown","8dad092c":"markdown","9c827a0e":"markdown","4a496798":"markdown","365a5b01":"markdown","559ecabe":"markdown"},"source":{"073798cf":"# Import Pytorch & torch.nn Library\nimport torch\nimport torch.nn as nn","45bdf53b":"n_ip = 10 # Input Layer\nn_hd = 5  # Hidden Layer\nn_op = 1  # Output Layer\nb_sz = 10 # batch size\nepoch = 25 ","eb3bddf4":"x = torch.randn(b_sz, n_ip)\ny = torch.tensor([[1.0], [1.0], [1.0], [1.0], [0.0], [0.0], [0.0], [1.0], [1.0], [0.0]])","2011a1c8":"# building Model\nmodel = nn.Sequential(nn.Linear(n_ip,n_hd),\n                      nn.ReLU(),\n                      nn.Linear(n_hd,n_op),\n                      nn.Sigmoid())","39f02520":"#Defining Loss Function\nloss_func = nn.MSELoss()\n#Optimizer\nopt = torch.optim.SGD(model.parameters(), lr = .01) #lr --> learning rate","d14ff14e":"for i in range(epoch):\n  y_pred = model(x)\n  loss = loss_func(y_pred,y)  \n\n  print(\"epoch : \", i+1 , \" loss : \", loss.item())\n  loss.backward()\n  \n  #Update the parameters\n  opt.step() #Updates all the parameters\n  \n  #Zero Gradients\n  opt.zero_grad()\n  \n  #This will execute until total number of epochs","38ce55cf":"class custom_mod(nn.Module):\n  def __init__(self,inp,hid,out):\n    super(custom_mod,self).__init__()\n    self.model = nn.Sequential(nn.Linear(inp,hid),\n                               nn.ReLU(),\n                               nn.Linear(hid,out),\n                               nn.Sigmoid())\n  def forward(self,x):\n    return self.module(x)","347d7c4b":"cust_nn = custom_mod(n_ip,n_hd,n_op)","7f0ae20b":"#Defining Loss Function\nloss_func = nn.MSELoss()\n#Optimizer\nopt = torch.optim.SGD(model.parameters(), lr = .01) #lr --> learning rate","44a9da01":"for i in range(epoch):\n  y_pred = model(x)\n  loss = loss_func(y_pred,y)  \n\n  print(\"epoch : \", i+1 , \" loss : \", loss.item())\n  loss.backward()\n  \n  #Update the parameters\n  opt.step() #Updates all the parameters\n  \n  #Zero Gradients\n  opt.zero_grad()\n  \n  #This will execute until total number of epochs","0b1434b1":"<a href=\"https:\/\/colab.research.google.com\/github\/anandsubbu007\/Pytorch-Tutorial-Beginner\/blob\/master\/Deep_NN_pytorch_3_.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","5d3fc63d":"# PyTorch Tutorials\n\n\nPyTorch is the premier open-source deep learning framework developed and maintained by Facebook.\n\nAt its core, PyTorch is a mathematical library that allows you to perform efficient computation and automatic differentiation on graph-based models. Achieving this directly is challenging, although thankfully, the modern PyTorch API provides classes and idioms that allow you to easily develop a suite of deep learning models.\n\n1. [PyTorch Tutorial - 1 (Basic)](https:\/\/www.kaggle.com\/anandsubbu007\/pytorch-basics-tutorial-1)\n2. [PyTorch Tutorial - 2 (Autograd)](https:\/\/www.kaggle.com\/anandsubbu007\/pytorch-autograd-tutorial-2)\n3. [PyTorch Tutorial - 3 (Deep Neural Network)](https:\/\/www.kaggle.com\/anandsubbu007\/deep-nn-pytorch-tutorial-3)\n4. [PyTorch Tutorial - 3 (CNN-CIFAR10)](https:\/\/www.kaggle.com\/anandsubbu007\/cnn-cifar10-pytorch-tutorial-4)","4361a57b":"![1.png](attachment:1.png)","332e9f26":"# Custom NN Module","0faa022f":"![2.jfif](attachment:2.jfif)","c9d2fd40":"Fully Connected Neural Network\n\n    Input Layer  --->  Hidden Layer   ---> Sigmoid Neuron\n      10 Units            5 Units               1 Units\n","8dad092c":"![3.jfif](attachment:3.jfif)","9c827a0e":"With the use of torch.nn.module we can combine many simple layers to implement complex neural networks.\n\nIn other words, we can use it to represent an arbitary function f in Pytorch","4a496798":"# Neural Network using PyTorch","365a5b01":"We subclass torch.nn.module for complex networks.\n\nWe override methods under --> torch.nn.module class\n\n  1. __init__ function :\n        - invoked when we create instance of nn.Module\n         \n  2. forward function:\n        - We define how output will be computed","559ecabe":"## torch.nn in pytorch\nPyTorch provides the torch.nn module to help us in creating and training of the neural network\n\n[To know more torch.nn Class & Module ](https:\/\/www.javatpoint.com\/torch_nn-in-pytorch)"}}