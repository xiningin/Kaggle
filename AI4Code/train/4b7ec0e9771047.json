{"cell_type":{"0e8b05d7":"code","e69f836e":"code","2682882d":"code","19f623cf":"code","948ae476":"code","4d09e5df":"code","e0f9acf7":"code","ed2757e3":"code","62c676e0":"code","09e5324c":"code","c59de3f8":"code","105c1c0a":"code","5494dcf4":"code","3e60d26b":"code","995a664c":"code","4c7d771d":"code","6251985d":"code","f730520f":"code","3577fbac":"code","fa953edd":"code","50fcb084":"code","5332fbd4":"code","820c6cbe":"code","3dfba986":"code","5d9ea896":"markdown","9fcb454a":"markdown","6f6ef4f9":"markdown"},"source":{"0e8b05d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e69f836e":"# loading Dataframe ..\ndf = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","2682882d":"df.head()","19f623cf":"# Check is any features have null values..\ndf.isnull().values.any()","948ae476":"# information about the data frame \ndf.info()","4d09e5df":"# Numerical discription of the features..\ndf.describe()","e0f9acf7":"## Importing Library  for correlation. \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","ed2757e3":"## to getting correlation of every feautres in dataset\ncorrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(15,15) )\n# ploting heat map for visualisation ..\nm = sns.heatmap(df[top_corr_features].corr(),annot= True, cmap=\"RdYlGn\")","62c676e0":"corrmat\n","09e5324c":"df.head()","c59de3f8":"## checking the data for unbaised or not ..\ndiabetes_count = len(df.loc[df['Outcome'] == 1])\nnot_diabetes_count = len(df.loc[df['Outcome'] == 0])\n(diabetes_count,not_diabetes_count)","105c1c0a":"## TRAIN TEST SPLIT\n\nfrom sklearn.model_selection import train_test_split\nx = df.iloc[:,0:-1]  #independent columns\ny = df.iloc[:,-1]    #target column i.e outcome\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.30,random_state = 42)","5494dcf4":"for feature in top_corr_features:\n    print(f\"Number of entries are missing are {len(df.loc[df[feature] == 0])}\")","3e60d26b":"## Replacing zero values  to the mean of the feature\n#from sklearn.preprocessing import Imputer\n\n#fill_values = Imputer(missing_values = 0,strategy = 'mean',axis = 0)\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values= 0, strategy='mean')","995a664c":"x_test = imp.fit_transform(x_test)\nx_train = imp.fit_transform(x_train)","4c7d771d":"## applying algorithm\nfrom sklearn.ensemble import RandomForestClassifier\nr_f_model = RandomForestClassifier(random_state=42)\nr_f_model.fit(x_train,y_train.ravel())","6251985d":"## Predicting test values in the model that we have train .\npredict_train_data = r_f_model.predict(x_test)\n\n## checking the accuracy of my model\nfrom sklearn import metrics\n\nprint(f\"Accuracy = {metrics.accuracy_score(y_test, predict_train_data)},3f\")\n","f730520f":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nprint(random_grid)","3577fbac":"## training\n\n\n# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(x_train,y_train)","fa953edd":"rf_random.best_estimator_","50fcb084":"classifier = RandomForestClassifier(bootstrap=False, max_depth=90, min_samples_leaf=2,\n                       min_samples_split=5, n_estimators=150)","5332fbd4":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(classifier,x,y.ravel(),cv=10)","820c6cbe":"score","3dfba986":"score.mean()","5d9ea896":"# Now you are ready for MACHINE LEARING ALGO...","9fcb454a":"# its Time to fine tunnig our model for the better accuracy..","6f6ef4f9":"# checking how many zeros in each features "}}