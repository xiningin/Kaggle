{"cell_type":{"ff67cb13":"code","f6e6a3dc":"code","45a7a191":"code","5e0daaaf":"code","fb4cccc2":"code","3f59ddbd":"code","2c4f4f03":"code","d54d1bf0":"code","047a28dc":"code","7673c4cf":"code","ae403413":"code","8f177c0f":"code","08e59dac":"markdown","11e0906e":"markdown"},"source":{"ff67cb13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6e6a3dc":"#getting helpers\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","45a7a191":"data=pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","5e0daaaf":"data.head()","fb4cccc2":"data.describe()","3f59ddbd":"data.info()","2c4f4f03":"_=[x for x in data['Class']==0]\n__=[y for y in data['Class']==1]\nlen(_),len(__)","d54d1bf0":"y=data['Class']\nx=data.drop('Class',axis=1)","047a28dc":"xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 0.2, random_state = 0)","7673c4cf":"model.fit(xTrain,yTrain)","ae403413":"yPred=model.predict(xTest)","8f177c0f":"accuracy = metrics.accuracy_score(yTest, yPred)\naccuracy_percentage = 100 * accuracy\naccuracy_percentage","08e59dac":"target classes are well balanced in given set of data","11e0906e":"model=LogisticRegression()"}}