{"cell_type":{"42a8c3c3":"code","9f9a115c":"code","2598af00":"code","f242102a":"code","4b82840b":"code","90ea5a30":"code","4288534d":"code","6cd3440e":"code","050c9f9b":"code","fb38ba5d":"code","c06e5100":"code","852aecbf":"code","b87a2e57":"code","154e3277":"code","1b4403e2":"code","9a8241fb":"code","15b93733":"code","978e022f":"code","2ba13275":"code","ad7a970f":"code","d2b3f473":"code","5f2723d1":"code","ff9647a3":"code","a76af0b0":"code","6b5d06cb":"code","d198cf4c":"code","9a86fbdc":"code","fe9bffde":"code","ecfd0315":"code","c31d7092":"code","37c94724":"code","d99e7dd2":"code","37769849":"code","bea26eaf":"code","7dfd1028":"code","aa2d6baf":"code","e7ecaae6":"code","e9fe5556":"code","f82854db":"markdown","b2141974":"markdown","56d6d086":"markdown","8c32362d":"markdown","f3883a13":"markdown","10e9c294":"markdown","24f8b1c3":"markdown","97c6fb78":"markdown","91da6f45":"markdown","c84160ef":"markdown","a8573477":"markdown","41c27790":"markdown","1bba1bcd":"markdown","e5860d86":"markdown","ca1b370e":"markdown","c37142c2":"markdown","88f4461a":"markdown","7bc49857":"markdown"},"source":{"42a8c3c3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","9f9a115c":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df,test_df]  # conbined both train and test for data cleaning and feature extraction\ntrain_df.head()","2598af00":"train_df.info()","f242102a":"test_df.info()","4b82840b":"train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]","90ea5a30":"train_df.Embarked.fillna(value=train_df.Embarked.dropna().mode()[0],inplace = True)","4288534d":"train_df.Age.fillna(value=train_df.Age.median(),inplace = True)","6cd3440e":"train_df.info()","050c9f9b":"test_df.Fare.fillna(value = train_df.Fare.median(),inplace=True)","fb38ba5d":"test_df.Age.fillna(value = train_df.Age.median(),inplace=True)","c06e5100":"test_df.info()","852aecbf":"train_df.drop('PassengerId',axis=1,inplace = True)","b87a2e57":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","154e3277":"combine = [train_df,test_df]","1b4403e2":"train_df['Embarked'].value_counts()","9a8241fb":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","15b93733":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_df.Title.value_counts()","978e022f":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\ntrain_df.Title.value_counts()","2ba13275":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","ad7a970f":"for dataset in combine:\n    dataset.drop('Name',axis = 1,inplace = True)\n\ntrain_df.head()","d2b3f473":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)","5f2723d1":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","ff9647a3":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]","a76af0b0":"test_df = pd.get_dummies(test_df,columns=['Pclass','Embarked','Title'],prefix=['Pclass','Embarked','Title'],drop_first=True)\ntrain_df = pd.get_dummies(train_df,columns=['Pclass','Embarked','Title'],prefix=['Pclass','Embarked','Title'],drop_first=True)\ntrain_df.head()    ","6b5d06cb":"plt.hist(train_df.Age)\nplt.show()","d198cf4c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split","9a86fbdc":"X = train_df.drop(\"Survived\", axis=1)\nY = train_df[\"Survived\"]\ntest  = test_df.drop(\"PassengerId\", axis=1).copy()","fe9bffde":"x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.25,random_state=42)","ecfd0315":"logreg = LogisticRegression(max_iter=1000)\nlogreg.fit(x_train, y_train)\n# Y_pred = logreg.predict(test)\nacc_log = round(logreg.score(x_train, y_train) * 100, 2)\nacc_log","c31d7092":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","37c94724":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train, y_train)\n# Y_pred = knn.predict(test)\nacc_knn = round(knn.score(x_test, y_test) * 100, 2)\nacc_knn","d99e7dd2":"gaussian = GaussianNB()\ngaussian.fit(x_train, y_train)\n# Y_pred = gaussian.predict(test)\nacc_gaussian = round(gaussian.score(x_test, y_test) * 100, 2)\nacc_gaussian","37769849":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(x_train, y_train)\n# Y_pred = decision_tree.predict(test)\nacc_decision_tree = round(decision_tree.score(x_test, y_test) * 100, 2)\nacc_decision_tree","bea26eaf":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\n# Y_pred = random_forest.predict(test)\nacc_random_forest = round(random_forest.score(x_test, y_test) * 100, 2)\nacc_random_forest","7dfd1028":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Random Forest', 'Naive Bayes', 'Decision Tree'],\n    'Score': [acc_knn, acc_log, acc_random_forest, acc_gaussian, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","aa2d6baf":"logreg.fit(X, Y)\nY_pred = logreg.predict(test)\nround(logreg.score(x_test, y_test) * 100, 2)","e7ecaae6":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","e9fe5556":"submission.to_csv('submission.csv', index=False)","f82854db":"**creating a oneHot encoding of `Pclass`,`Embarked`,`Title`**","b2141974":"**encode `Embarked` values**","56d6d086":"**droping `Parch`, `SibSp`, `FamilySize` and keeping only `IsAlone` column**","8c32362d":"**creating a new `FamilySize` column from `SibSp` and `Parch`**","f3883a13":"**drop `Ticket` because it doesn't provide useful information, And drop `Cabin` because it contains too many null values**","10e9c294":"**drop `PassengerId` as it doesn't make a difference**","24f8b1c3":"**apply log transformation and replace inf numbers with 0s in `Fare` column**","97c6fb78":"**drop `Name` column as it is not important anymore**","91da6f45":"**encode the extracted titles**","c84160ef":"**creating `IsAlone` column where `FamilySize` = 1**","a8573477":"**fill na values in `test_df` but with `train_df` values to not leak the data**","41c27790":"**so we will train it with whole dataset and use it for submission**","1bba1bcd":"for dataset in combine:\n    dataset.Fare = dataset.Fare.apply(np.log)\n    dataset.Fare = dataset.Fare.replace(np.NINF,0)\n\ntrain_df.head()","e5860d86":"**extract each passenger title from its name as it can help that more important person have a higher chance of being saved**","ca1b370e":"**fill NA values in each dataset**","c37142c2":"**encode `Sex` values**","88f4461a":"**combining rare title in one category, and standarize the common ones**","7bc49857":"**`LogisticRegression` performed better**"}}