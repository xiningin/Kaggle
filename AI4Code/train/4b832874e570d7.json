{"cell_type":{"f50a1793":"code","65448ec7":"code","a018a06d":"code","06d1e0d5":"code","66e12420":"code","3437eb1e":"code","1dea6a11":"code","4d86161e":"code","9defbe1e":"code","95af6241":"code","f10c2ea7":"code","880b22bf":"code","ca38ed7f":"markdown","18626f90":"markdown","1f640e65":"markdown","47770eb0":"markdown"},"source":{"f50a1793":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65448ec7":"df = pd.read_csv('\/kaggle\/input\/air-passengers\/AirPassengers.csv')\ndf.head()","a018a06d":"df.shape","06d1e0d5":"df.tail()","66e12420":"df['Month'] = pd.to_datetime(df['Month'])\n","3437eb1e":"df = df.set_index('Month')","1dea6a11":"from datetime import datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10,6\nplt.plot(df)","4d86161e":"rolmean = df.rolling(window = 12).mean()\nrolstd = df.rolling(window = 12).std()\n\nprint(rolmean,rolstd)","9defbe1e":"orig = plt.plot(df,color = 'blue', label = 'original')\nmean = plt.plot(rolmean, color = 'red', label = 'rolling mean')\nstd = plt.plot(rolstd, color = 'black', label = 'rolling std')\nplt.legend(loc = 'best')\nplt.show(block = False)","95af6241":"from statsmodels.tsa.stattools import adfuller\n\nprint(\"Result of Dickey Fuller Test\")\n\ndftest = adfuller(df['#Passengers'], autolag = 'AIC') # AIC is a metric\n\ndfoutput = pd.Series(dftest[0:4], index = ['Test Statistic', 'p-value', '#lags used', 'No. of observation used'])\nfor key, value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","f10c2ea7":"logscale = np.log(df)\nplt.plot(logscale)","880b22bf":"rolmean_log = logscale.rolling(window = 12).mean()\nrolstd_log = logscale.rolling(window = 12).std()\nplt.plot(logscale)\nplt.plot(rolmean_log)","ca38ed7f":"# Performing Dickey Fuller Test","18626f90":"# **Determining Rolling Statistics**","1f640e65":"**1. This clearly states that this is not a stationary dataframe**","47770eb0":"## Observations:\n\n###   The Null-hypothesis for the test is that the time series is not stationary.\n\n- We fail to reject the null hypothesis\n- p value is almost 99%\n- Our Test Statistic is less than the critical value"}}