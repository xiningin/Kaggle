{"cell_type":{"836e3f95":"code","24436622":"code","1a2de425":"code","07dbeb57":"code","b6c2021f":"code","f5ac8a14":"code","e4dcb4ba":"code","a8768a49":"code","4dd47af1":"code","e542daf6":"code","bb9a652c":"code","2e5c16a7":"code","891f2223":"code","673e2460":"code","aa5ffbac":"code","38c688f1":"code","1c42f1f0":"code","face2e66":"code","857504e2":"code","c601d90a":"code","f85478c9":"markdown","32004247":"markdown","2c842bef":"markdown","2d8ec898":"markdown"},"source":{"836e3f95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24436622":"from datetime import datetime\nfrom datetime import timedelta\nimport matplotlib.pyplot as plt\ndata_df=pd.read_csv(\"\/kaggle\/input\/gafa-stock-prices\/YahooFinance - GAFA stock prices.csv\")\ndata_df.head()","1a2de425":"data_df['security_symbol'].unique()","07dbeb57":"data_df['security_symbol']=data_df['security_symbol'].replace(['%5EGSPC'],'YHOO')","b6c2021f":"data_df.head()","f5ac8a14":"yhoo=data_df[data_df['security_symbol']=='YHOO']\nyhoo=yhoo.set_index('date')\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\nax=yhoo['close'].plot()\nplt.xticks(rotation=90)","e4dcb4ba":"from dateutil import parser\npast = datetime.now() - timedelta(days=365)\n#new_date = parser.parse(\"2018-11-10 10:55:31+00:00\")\nnew_date = datetime.now()\n\n    \ndata_df['date'] = pd.to_datetime(data_df['date'])  \n    \n#greater than the start date and smaller than the end date\nmask = (data_df['date'] < new_date) & (data_df['date'] > past)\n\n# On Covid-19 Pandemic\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\nyhoo=data_df[data_df['security_symbol']=='YHOO']\nyhoo=yhoo.loc[mask]\nyhoo=yhoo.set_index('date')\n\nyhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\n#ax=yhoo['close'].plot('r+')\nax=yhoo['close'].plot()\nplt.xticks(rotation=90)\nyhoo.head()\n\n#plt.scatter(yhoo.index, yhoo['close'])","a8768a49":"goog=data_df[data_df['security_symbol']=='GOOG']\ngoog=goog.set_index('date')\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\nax=goog['close'].plot()\nplt.xticks(rotation=90)","4dd47af1":"data_df['date'] = pd.to_datetime(data_df['date'])  \n    \n#greater than the start date and smaller than the end date\nmask = (data_df['date'] < new_date) & (data_df['date'] > past)\n\n# On Covid-19 Pandemic\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\ngoog=data_df[data_df['security_symbol']=='GOOG']\ngoog=goog.loc[mask]\ngoog=goog.set_index('date')\n\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\n#ax=yhoo['close'].plot('r+')\nax=goog['close'].plot()\nplt.xticks(rotation=90)\ngoog.head()\n\n#plt.scatter(yhoo.index, yhoo['close'])","e542daf6":"fb=data_df[data_df['security_symbol']=='FB']\nfb=fb.set_index('date')\nax=fb['close'].plot()\nplt.xticks(rotation=90)","bb9a652c":"data_df['date'] = pd.to_datetime(data_df['date'])  \n    \n#greater than the start date and smaller than the end date\nmask = (data_df['date'] < new_date) & (data_df['date'] > past)\n\n# On Covid-19 Pandemic\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\nfb=data_df[data_df['security_symbol']=='FB']\nfb=fb.loc[mask]\nfb=fb.set_index('date')\n\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\n#ax=yhoo['close'].plot('r+')\nax=fb['close'].plot()\nplt.xticks(rotation=90)\nfb.head()\n\n#plt.scatter(yhoo.index, yhoo['close'])","2e5c16a7":"amzn=data_df[data_df['security_symbol']=='AMZN']\namzn=amzn.set_index('date')\nax=amzn['close'].plot()\nplt.xticks(rotation=90)","891f2223":"data_df['date'] = pd.to_datetime(data_df['date'])  \n    \n#greater than the start date and smaller than the end date\nmask = (data_df['date'] < new_date) & (data_df['date'] > past)\n\n# On Covid-19 Pandemic\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\namzn=data_df[data_df['security_symbol']=='AMZN']\namzn=amzn.loc[mask]\namzn=amzn.set_index('date')\n\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\n#ax=yhoo['close'].plot('r+')\nax=amzn['close'].plot()\nplt.xticks(rotation=90)\namzn.head()\n\n#plt.scatter(yhoo.index, yhoo['close'])","673e2460":"aapl=data_df[data_df['security_symbol']=='AAPL']\naapl=aapl.set_index('date')\nax=aapl['close'].plot()\nplt.xticks(rotation=90)","aa5ffbac":"data_df['date'] = pd.to_datetime(data_df['date'])  \n    \n#greater than the start date and smaller than the end date\nmask = (data_df['date'] < new_date) & (data_df['date'] > past)\n\n# On Covid-19 Pandemic\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\naapl=data_df[data_df['security_symbol']=='AAPL']\naapl=aapl.loc[mask]\naapl=aapl.set_index('date')\n\n#yhoo_close=yhoo.close.values.astype('float32')\n#yhoo_close.shape\n#ax=yhoo['close'].plot('r+')\nax=aapl['close'].plot()\nplt.xticks(rotation=90)\namzn.head()\n\n#plt.scatter(yhoo.index, yhoo['close'])","38c688f1":"ma_yhoo=[]\nwindow_size = 90\ni=0\nyhoo=data_df[data_df['security_symbol']=='YHOO']\n\nwhile i<len(yhoo['close'])-window_size+1:\n    this_window=yhoo['close'][i:i+window_size]\n    window_average=sum(this_window)\/window_size\n    ma_yhoo.append(window_average)\n    i+=1\nprint(len(yhoo.close))    \nprint(len(ma_yhoo))\n\na=np.empty(90-1).tolist()\n#print(len(a))\n#a=pd.concat(a,ma_yhoo)\n\na.extend(ma_yhoo)\n\n\nprint(len(a))\n\nplt.plot(a)\nplt.title(\"Yahoo MA 90\")","1c42f1f0":"ma_goog=[]\nwindow_size = 90\ni=0\ngoog=data_df[data_df['security_symbol']=='GOOG']\n\nwhile i<len(goog['close'])-window_size+1:\n    this_window=goog['close'][i:i+window_size]\n    window_average=sum(this_window)\/window_size\n    ma_goog.append(window_average)\n    i+=1\nprint(len(goog.close))    \nprint(len(ma_goog))\n\na=np.empty(90-1).tolist()\n#print(len(a))\n#a=pd.concat(a,ma_yhoo)\n\na.extend(ma_goog)\n\n\nprint(len(a))\n\nplt.plot(a)\nplt.title(\"Google MA 90\")","face2e66":"ma_amzn=[]\nwindow_size = 90\ni=0\namzn=data_df[data_df['security_symbol']=='AMZN']\n\nwhile i<len(amzn['close'])-window_size+1:\n    this_window=amzn['close'][i:i+window_size]\n    window_average=sum(this_window)\/window_size\n    ma_amzn.append(window_average)\n    i+=1\nprint(len(amzn.close))    \nprint(len(ma_amzn))\n\na=np.empty(90-1).tolist()\n#print(len(a))\n#a=pd.concat(a,ma_yhoo)\n\na.extend(ma_amzn)\n\n\nprint(len(a))\n\nplt.plot(a)\nplt.title(\"Amazon MA 90\")","857504e2":"ma_fb=[]\nwindow_size = 90\ni=0\nfb=data_df[data_df['security_symbol']=='FB']\n\nwhile i<len(fb['close'])-window_size+1:\n    this_window=fb['close'][i:i+window_size]\n    window_average=sum(this_window)\/window_size\n    ma_fb.append(window_average)\n    i+=1\n\n\na=np.empty(90-1).tolist()\n#print(len(a))\n#a=pd.concat(a,ma_yhoo)\n\na.extend(ma_fb)\n\n\nprint(len(a))\n\nplt.plot(a)\nplt.title(\"FB MA 90\")","c601d90a":"ma_aapl=[]\nwindow_size = 90\ni=0\naapl=data_df[data_df['security_symbol']=='AAPL']\n\nwhile i<len(aapl['close'])-window_size+1:\n    this_window=aapl['close'][i:i+window_size]\n    window_average=sum(this_window)\/window_size\n    ma_aapl.append(window_average)\n    i+=1\n\n\na=np.empty(90-1).tolist()\n#print(len(a))\n#a=pd.concat(a,ma_yhoo)\n\na.extend(ma_aapl)\n\n\nprint(len(a))\n\nplt.plot(a)\nplt.title(\"AAPL MA 90\")","f85478c9":"# 1. The stock price overtime\n\nWe will breakdown the stock-price data using pandas and let's see the change of price of stock overtime.","32004247":"# will be updated.","2c842bef":"# 2 Moving Average for Each Stocks\n\nLet's move out to a new section: moving average. Moving average is a tool (often used in stock analysis) to make the curve smooth by using method of updating average price. The interval used for moving average can be 10 minutes, 20 minutes, 10 days, 45 weeks, or anything depending to the trader decision. \n\nAccording to https:\/\/www.investopedia.com\/articles\/active-trading\/052014\/how-use-moving-average-buy-stocks.asp, there are some key points of using moving average (MA):\n\n* MA can be used for smoothing the price trends in some interval time that the trader chooses\n* MA can be used for identifying the level of support and resistance\n\n","2d8ec898":"Let's learn together and if you find this kernel useful, don't forget to **UPVOTE** for this notebook. Thank you.:D"}}