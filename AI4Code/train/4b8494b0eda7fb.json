{"cell_type":{"0624dd39":"code","9103b473":"code","f3d580dc":"code","f6d6367b":"code","67275858":"code","f793477e":"code","799334de":"code","aa574955":"code","bafaf038":"code","22ca8591":"code","48da4587":"code","9d58f5c1":"code","f8ee05a3":"code","0c6ebdb7":"code","0821e274":"code","740e9098":"code","824e4bef":"code","56e6205e":"code","ae2d76c0":"code","a81783d2":"code","62eec2de":"code","786bee84":"code","60b1a43e":"code","71a47def":"code","dd90fefc":"code","ccc7bc02":"code","d09a63d4":"code","c06f6ccf":"code","0b0627ad":"code","41aa4da7":"code","c7578c36":"code","25de4d74":"code","f253d0bf":"code","b494be9c":"code","ba6f5a11":"code","6b95989a":"markdown","c6d4fe3d":"markdown","60a9876c":"markdown","1fc8214f":"markdown","e3943e34":"markdown","227e95a6":"markdown","c80da812":"markdown","43ed91b4":"markdown","8a725ab8":"markdown","e35c752c":"markdown","e734bba7":"markdown","ae64c8dc":"markdown","38966359":"markdown","60c659de":"markdown","e8445eb1":"markdown","333b5cc8":"markdown","91e88163":"markdown","3f15c308":"markdown","37677329":"markdown","80c30bf9":"markdown","1407e326":"markdown","b53ef84f":"markdown","1aba3f06":"markdown","fb644086":"markdown","6d1d6a21":"markdown","929a76a6":"markdown","11d30767":"markdown","aa9359dd":"markdown"},"source":{"0624dd39":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\nplt.rcParams[\"figure.figsize\"] = (12,12)","9103b473":"df_18 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2018.csv')\ndf_19 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2019.csv')\ndf_20 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2020.csv')\ndf_21 = pd.read_csv('..\/input\/world-happiness-report-20152021\/2021.csv')\n\ndict_df = {\n    '2018': df_18,\n    '2019': df_19,\n    '2020': df_20,\n    '2021': df_21\n}","f3d580dc":"def print_table_info(dict_df):\n    \"\"\"\n        dict_df: dictionary of data frames\n        for each dataset store:\n            - Size of each df\n            - Number of columns that are null\n            \n        retrun df\n    \"\"\"\n    data = {}\n    index = ['No. rows', 'No. col', 'No. null col']\n    \n    for year, df in dict_df.items():\n        no_row, no_col = df.shape\n        \n        nonull = np.sum( df.isnull().sum() > 0 )\n        data[year] = [no_row, no_col, nonull]\n    \n    new_df = pd.DataFrame(data, index=index)\n    return new_df\n\ndef view_columns(dict_df):\n    \"\"\"\n        dict_df: dictionary of data frames\n        for each dataset store:\n            - The column names\n        \n        return df\n    \"\"\"\n    largest_column = 0\n    index = None\n    \n    for _, df in dict_df.items():\n        len_columns = len(df.columns)\n        \n        if len_columns >= largest_column:\n            largest_column = len_columns\n            index = df.columns\n    \n    data = {}\n    for year, df in dict_df.items():\n        value = [0 for i in range(largest_column)]\n        \n        for i, idx in enumerate(df.columns):\n            value[i] = idx \n        data[year] = value\n        \n    new_df = pd.DataFrame(data)\n    return new_df","f6d6367b":"print_table_info(dict_df)","67275858":"view_columns(dict_df)","f793477e":"# Making sure the columns we care about have unified naming\ndict_df['2018'].rename(\n    columns={\n        'Country or region': 'Country',\n        'GDP per capita': 'GDP',\n        'Healthy life expectancy' : 'Health',\n        'Freedom to make life choices': 'Freedom',\n        'Perceptions of corruption' : 'Trust' ,\n        'Social support': 'Support',\n        'Generosity': 'Donations'\n    }, inplace=True)\n\ndict_df['2019'].rename(\n    columns={\n        'Country or region': 'Country',\n        'GDP per capita': 'GDP',\n        'Healthy life expectancy' : 'Health',\n        'Freedom to make life choices': 'Freedom',\n        'Perceptions of corruption' : 'Trust',\n        'Social support': 'Support',\n        'Generosity': 'Donations'\n    }, inplace=True)\n\ndict_df['2020'].rename(\n    columns={\n        'Ladder score': 'Score',\n        'Country name': 'Country',\n        'Healthy life expectancy': 'Average Age',\n        'Explained by: Log GDP per capita': 'GDP',\n        'Explained by: Healthy life expectancy' : 'Health',\n        'Explained by: Freedom to make life choices': 'Freedom',\n        'Explained by: Perceptions of corruption' : 'Trust',\n        'Explained by: Social support': 'Support',\n        'Explained by: Generosity': 'Donations',\n        'Regional indicator': 'Region'\n    }, inplace=True)\n\ndict_df['2021'].rename(\n    columns={\n        'Ladder score': 'Score',\n        'Country name': 'Country',\n        'Healthy life expectancy': 'Average Age',\n        'Explained by: Log GDP per capita': 'GDP',\n        'Explained by: Healthy life expectancy' : 'Health',\n        'Explained by: Freedom to make life choices': 'Freedom',\n        'Explained by: Perceptions of corruption' : 'Trust',\n        'Explained by: Social support': 'Support',\n        'Explained by: Generosity': 'Donations',\n        'Regional indicator': 'Region'\n    }, inplace=True)","799334de":"def drop_except_columns(dict_df, col_except):\n    \"\"\"\n        dict_df: dictionary of data frames\n        col_drop: list of column names to drop\n        \n        for each dataset drop column in col_drop:\n    \"\"\"\n    for _, df in dict_df.items():\n        col_to_keep = []\n        for col in col_except:\n            if col in df.columns:\n                col_to_keep.append(col)\n        df.drop(columns=df.columns.difference(col_to_keep), inplace=True)   ","aa574955":"interested_column = [\n    'Score',\n    'Country',\n    'Region',\n    'Health',\n    'Trust',\n    'Support',\n    'Freedom',\n    'GDP',\n    'Donations',\n    'Average Age'\n]\ndrop_except_columns(dict_df, interested_column)","bafaf038":"def add_Region(dict_df, years, refrence_df):\n    \"\"\"\n        dict_df: dictionary of data frames\n        years: list of the target years\n        refrence_df: df used as a refrence to fill the rest\n    \"\"\"\n    def get_region(x):\n        query = refrence_df.query(f'Country == \"{x}\"')\n        \n        if len(query) != 0:\n            return query.Region.values.item()\n        else:\n            return None\n            \n    for year in years:\n        dict_df[year]['Region'] = dict_df[year]['Country'].apply(get_region)","22ca8591":"years = ['2018', '2019']\nrefrence_df = dict_df['2020'][ ['Country', 'Region'] ]\n\nadd_Region(dict_df, years, refrence_df)\nprint_table_info(dict_df)","48da4587":"view_columns(dict_df)","9d58f5c1":"def display_na_rows(dict_df):\n    \"\"\"\n        dict_df: dictionary of data frames\n    \"\"\"\n    for year, df in dict_df.items():\n        print(f'Year: {year} ')\n        temp_df = dict_df[year]\n        \n        display(temp_df[temp_df.isna().any(axis=1)])","f8ee05a3":"display_na_rows(dict_df)","0c6ebdb7":"# Finding the Mean trust of United Arab Emirates\nmean = 0\nfor year, df in dict_df.items():\n    if year != '2018':\n        mean += df.query('Country == \"United Arab Emirates\"').Trust.mean()\n        \nmean = mean\/4\ndict_df['2018'].at[19, 'Trust'] = mean","0821e274":"def fill_missing_Regions(dict_df, dict_fill):\n    \"\"\"\n        dict_df: dictionary of data frames\n        dict_fill: dictionary to fill missing Regions\n    \"\"\"\n    for year, values in dict_fill.items():\n        for value in values:\n            index = value[0]\n            region = value[1]\n            dict_df[year].at[index, 'Region'] = region","740e9098":"dict_df['2020'].Region.unique().tolist()","824e4bef":"# Filling the Regions\ndict_fill = {\n    '2018':[\n        (25, 'East Asia'), #Taiwan\n        (31, 'Middle East and North Africa'), #Qatar\n        (37, 'Latin America and Caribbean'), #Trinidad & Tobago\n        (48, 'Latin America and Caribbean'), #Belize\n        (57, 'Central and Eastern Europe'), #Northren Cyprus\n        (75, 'Southeast Asia'), #Hong Kong\n        (96, 'South Asia'), #Bhutan\n        (97, 'Sub-Saharan Africa'), #Somalia \n        (136, 'Sub-Saharan Africa'), #Sudan\n        (141, 'Sub-Saharan Africa'), #Angola\n        (149, 'Middle East and North Africa'), #Syria\n    ],\n    '2019':[\n        (24,  'East Asia'), #Taiwan\n        (28, 'Middle East and North Africa'), #Qatar\n        (38, 'Latin America and Caribbean'), #Trinidad & Tobago\n        (63, 'Central and Eastern Europe'), #Northren Cyprus\n        (75, 'Southeast Asia'), #Hong Kong\n        (83, 'Central and Eastern Europe'), #North Macedonia\n        (94, 'South Asia'), #Bhutan\n        (111, 'Sub-Saharan Africa'), #Somalia\n        (148, 'Middle East and North Africa'), #Syria\n    ]\n}\nfill_missing_Regions(dict_df, dict_fill)\nprint_table_info(dict_df)","56e6205e":"def print_stats(dict_data, years, top=5):\n    \"\"\"\n      dict_data: dictionary of data frames\n      years: list of relavent years\n      top: int \n    \"\"\"\n    for year in years:\n        print(year)\n        \n        df = dict_data[year]\n        display(df.head(top))\n        display(df.describe().T)\n    \n\ndef score_bar(dict_df, x, y, top=5, r=2, c=2):\n    \"\"\"\n        dict_df: dictionary of data frames\n        x: string column name -> x axis of the bar chart\n        y: string column name -> y axis of the bar chart\n        top: int the number of countries we care about\n        r: int number of rows to plot\n        c: int number of columns to plot\n    \"\"\"\n    fig, axes = plt.subplots(nrows=r, ncols=c, constrained_layout=True,)\n    \n    years = list(dict_df.keys())\n    idx = len(years) - 1\n    dict_data = {}\n    \n    for i in range(r):\n        for j in range(c):\n            if idx < 0:\n                break\n                \n            data = {}   \n            df = dict_df[years[idx]]\n            \n            sns.barplot(\n                data=df.nlargest(5, x),\n                x=x, y=y,\n                palette='flare',\n                ax=axes[i,j]\n            )\n            axes[i, j].set_title(years[idx])\n            \n            new_x = df.nlargest(5, x)[x].values.tolist()\n            new_y = df.nlargest(5, x)[y].values.tolist()\n            \n            data[x] = new_x\n            data[y] = new_y\n            new_df = pd.DataFrame(data)\n            dict_data[years[idx]] = new_df\n            \n            idx-=1  \n            \n    return dict_data","ae2d76c0":"top5_bar = score_bar(dict_df, y='Country', x='Score', top=5)","a81783d2":"print_stats(top5_bar, years=['2019', '2020', '2021'])","62eec2de":"def draw_map(dict_df, title='Happiness Map', column='Country', zcolumn='Score'):\n    \"\"\"\n        dict_df: dictionary of data frames\n        title: string of the Map chart title\n    \"\"\"\n    data = [] \n    layout = dict(\n        title=title ,\n        geo=dict(projection = {'type':'miller'}),\n        width=1000,\n        height=500,\n    )    \n    \n    for i, (year, df) in enumerate(dict_df.items()):\n        geo_key = 'geo'+str(i+1) if i != 0 else 'geo'\n        \n        data.append(\n            dict(\n                type='choropleth',\n                marker_line_width=1,\n                locations=df[column],\n                locationmode=\"country names\",\n                z=df[zcolumn],\n                geo = geo_key,\n                text=df[column],\n                name=year,\n                coloraxis = \"coloraxis\",\n            )\n        )\n        layout[geo_key] = dict(\n            showland = True,\n            domain = dict( x = [0, 1], y = [1, 0] ),\n        )\n        \n    z = 0\n    COLS = 2\n    ROWS = 2\n    for y in reversed(range(ROWS)):\n        for x in range(COLS):\n            geo_key = 'geo'+str(z+1) if z != 0 else 'geo'\n            layout[geo_key]['domain']['x'] = [float(x)\/float(COLS), float(x+1)\/float(COLS)]\n            layout[geo_key]['domain']['y'] = [float(y)\/float(ROWS), float(y+1)\/float(ROWS)]\n            z=z+1\n    \n    fig = go.Figure(data=data, layout=layout)\n    fig.update_layout(\n        coloraxis = {\n            'colorbar': {\n                'title': f'{title} {zcolumn}'\n            }\n        }\n    )\n    fig.update_layout(width=1000)\n    fig.show()\n    ","786bee84":"draw_map(dict_df)","60b1a43e":"def sunburst(dict_df, years, target='Score', depth=2):\n    for year in years:\n        df = dict_df[year]\n        \n        fig = px.sunburst(\n            df, \n            path=['Region', 'Country'], \n            values=target,\n            color=target, \n            hover_data=[target],\n            color_continuous_scale='magma',\n            color_continuous_midpoint= np.average(\n                df[target], \n                weights=df[target]\n            ), \n            title=f'Year {year}',\n            width= 800,\n            maxdepth=depth\n        )\n        \n        fig.update_layout(hovermode=\"x unified\")\n        fig.show()\n        \n        display(\n            df.groupby(['Region'])\\\n            .mean()\\\n            .sort_values(target, ascending=False)\n        )\n\nsunburst(dict_df, years=['2018', '2019', '2020', '2021'])","71a47def":"def region_bar(dict_df, years):\n    data = []\n    for year in years:\n        df = dict_df[year]\n        \n        data.append(\n            go.Bar( \n                x = df['Region'],\n                y = df['Score'],\n                text = df.Country,\n                textposition='inside',\n                name=year,\n            )\n        )\n\n    layout = go.Layout(\n        barmode = \"group\",\n        title = f'Sum of Happiness Score from year {years[0]} to {years[-1]}',\n        xaxis= dict(title= 'Countries & Region',ticklen= 5,zeroline= False),\n        yaxis= dict(title= 'Score Sum', ticklen= 5, zeroline= False)\n    )\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()\n    \nregion_bar(dict_df, ['2019', '2020', '2021'])","dd90fefc":"def happiness_change(dict_df, year_from='2018', year_to='2021', threshold=0.01):\n    dataframes = []\n    \n    for year, df in dict_df.items():\n        temp = df.copy()\n        temp['Year'] = year\n        dataframes.append(temp)\n    \n    df_change = pd.concat(dataframes)\n    yfrom = dict_df[year_from]\n    yto = dict_df[year_to]\n    \n    df_change['Change'] = (yto['Score'] - yfrom['Score']) \/ yfrom['Score']\n\n    temp = df_change[np.abs(df_change['Change']) > threshold]\n    temp = df_change.sort_values('Change')\n    temp['Year'] = temp['Year'].astype(str)\n    \n    fig = px.bar(temp,\n                 x = 'Change',\n                 y = 'Country',\n                 color = 'Year',\n                 orientation = 'h',\n                 height = 1000,\n                 template = 'gridon',\n                 title = f'How happiness changed from year {year_from} to {year_to}')\n    fig.show()\n    return temp\n    ","ccc7bc02":"change = happiness_change(dict_df)","d09a63d4":"for year in ['2020', '2021']:\n    print('Year: ', year)\n    display(\n        change.query(f'Year == \"{year}\"')\\\n        .nlargest(5, 'Change').loc[:, ['Country', 'Score', 'Change']]\n    )","c06f6ccf":"for year in ['2020', '2021']:\n    print('Year: ', year)\n    display(\n        change.query(f'Year == \"{year}\"')\\\n        .nsmallest(5, 'Change').loc[:, ['Country', 'Score', 'Change']]\n    )","0b0627ad":"import seaborn as sns\n\nsize=(15,5)\ncolumns= ['GDP', 'Support', 'Health', 'Freedom', 'Average Age',  'Donations']\npalettes= ['crest', 'flare', 'OrRd', 'viridis', 'YlGn', 'mako']\n\ndef summary_bar(dict_df, year, r=2 , c=3, cols=None):\n    fig, axes = plt.subplots(nrows=r, ncols=c, constrained_layout=True, figsize=size)\n    df = dict_df[year]\n\n    if cols == None:\n        cols=columns\n        \n    idx = 0\n    for i in range(r):\n        for j in range(c):\n            if cols[idx] in df.columns:\n                sns.barplot(\n                    data=df.nlargest(5, cols[idx]),\n                    x=cols[idx], y='Country',\n                    palette=palettes[idx],\n                    ax=axes[i,j]\n                )\n            idx+=1\n\ndef summary_line(dict_df, year, cols=None):\n    plt.figure(figsize=size)\n    df = dict_df[year]\n    if cols == None:\n        cols=columns\n        \n    for col in cols:\n        if col in df.columns:\n            sns.lineplot(\n                data=df.head(5),\n                x='Country', y=col,\n                marker='o', label=col\n            )\n    plt.ylabel('Values')\n    plt.legend()\n    plt.show()","41aa4da7":"for year in ['2020', '2021']:\n    print('Year: ', year)\n    df = dict_df[year]\n    \n    temp = df.nlargest(5, 'Score')\\\n        .loc[: ,['Country', 'Score', 'Average Age']]\n    \n    print('Life Expectancy Mean: ', temp['Average Age'].mean())\n    display(temp)","c7578c36":"for year in ['2020', '2021']:\n    print('Year: ', year)\n    df = dict_df[year]\n    \n    temp = df.nlargest(5, 'Average Age')\\\n        .loc[: ,['Country', 'Score', 'Average Age']]\n    \n    display(temp)","25de4d74":"summary_bar(dict_df, year='2021')","f253d0bf":"cols = ['GDP', 'Support', 'Health', 'Freedom', 'Donations']\nsummary_line(dict_df, year='2021', cols=cols)","b494be9c":"def life_quality(dict_df, year, x, y, target):\n    data = []\n    \n    df = dict_df[year]\n\n    data.append(\n        {\n            'y': df[y],\n            'x': df[x],\n            'mode': 'markers',\n            'marker':{\n                'color': df[target],\n                'size': df['Score'],\n                'showscale': True,\n                'colorbar': {'title': f'{year} {target}'}\n            },\n            'text': df.Country\n        }\n    )\n\n    layout = go.Layout(barmode='group', hovermode=\"x\",\n                       title=f'How {x} & {y} affect {target}, Bubble size=Happiness Score, Color={target}',\n                       xaxis=dict(title=x),\n                       yaxis=dict(title=y))\n    fig = go.Figure(data=data, layout=layout)\n    fig.show()","ba6f5a11":"life_quality(dict_df, year='2021', x='GDP', y='Support', target='Score')","6b95989a":"What is interesting about this summary is that people living in the least happiest countries donate more than those at the top, despite having a not so great GDP. The countries that ranked at the top 5 have high social support, and freedom to make choices. Switzerland has the highest GDP and average age. Iceland has the highest social support and freedom of choice. Out of the top 5 Finland does the least donations.","c6d4fe3d":"##### Which country is considered to be the happiest?  \n**Finland** is the happiest country in the world since 2018!\n##### Which region is considered to be the happiest?  \n**North America and Australia & New Zealand** had the highest happiness score mean among all the regions making it the happiest region in the world\n##### How did the happiness score change throughout the years?\nThe Majority of the countries are having a positive change in their happiness score\n##### Which countries had the most positive change in their happiness score?  \n**Mozambique** had the highest positive change in year 2021\n##### What can we tell about the people living in the top 5 happiest countries?\n* The mean life expectancy is 73 years old.\n* **Switzerland** has highest GDP and average age among the top 5.\n* **Iceland** has highest social support and freedom of choice among the top 5.","60a9876c":"#### The countries that always ranked top 5 from 2018 to 2021 are:\n>  Finland, Iceland and Denmark\n\n#### Happiest country in 2018, 2019, 2020 and 2021:\n> Finland\n\n#### Which country is considered to be the happiest?\n**Finland**, **Iceland** and **Denmark** have always ranked at the top 5 from 2018 to 2021, which means that their happiness score remained high as the years passed by; however, **Finland** has ranked the first in 2018 to 2021 with each year a better happiness score, and so it is considered as the happiest country in the world.\n\nWhen looking at the map chart we can see that in general happy countries have happy neighboring countries, and the Top 5 happiest countries are very close to each other.","1fc8214f":"# Purpose \nThis notebook practices the use of the CRISP-DM process on the world happiness report and aims to tell a story to better understand:\n\n* Which country is considered to be the happiest?\n* Which region is considered to be the happiest?\n* How did the happiness score change throughout the years?\n* Which countries had the most positive change in their happiness score?\n* What can we tell about the people living in the top 5 happiest countries?\n\nI will be using the dataset provided by [World Happiness report](https:\/\/worldhappiness.report\/) available at [kaggle from Mathurin Ach\u00e9](https:\/\/www.kaggle.com\/mathurinache\/world-happiness-report-20152021). The conclusion and findings are communicated via Medium [What Can Data Tell Us About Happiness Throughout The World](https:\/\/ninamaamary.medium.com\/what-can-data-tell-us-about-happiness-throughout-the-world-d03de5c8b69).\n\n### 6 Stages of CRISP-DM\n1. Business\/Problem understanding\n2. Data understanding\n3. Prepare Data\n4. Data Modeling\n5. Evaluating Results\n6. Deploy","e3943e34":"# Evaluating Results","227e95a6":"|Region| Happiest Country| Happiness Score| Least Happiest Country | Happiness Score |\n|------|-----------------|----------------|------------------------|-----------------|\n|North America and ANZ| New Zealand | 7.28| United States | 6.95 |\n|Western Europe| Finland | 7.84 | North Cyprus |5.54 |\n|Central and Eastern Europe| Czech Republic | 6.97| North Macedonia | 5.1 |\n|Latin America and Caribbean| Costa Rica | 7.01 | Haiti | 3.62 |\n|East Asia| Taiwan | 6.584 | China | 5.34 |\n|Commonwealth of Independent States| Uzbekistan| 6.18 | Ukraine | 4.88\n|Southeast Asia| Singapore | 6.38 | Myanmar | 4.43 |\n|Middle East and North Africa| Israel | 7.16| Yemen | 3.36\n|Sub-Saharan Africa| Mauritius| 6.05 | Zimbabwe | 3.15 |\n|South Asia| Nepal | 5.27 | Afghanistan | 2.5 |","c80da812":"#### Which countries had the most positive change in their happiness score?\nThe country with the highest positive change in year 2021 is Mozambique and Nigeria in 2020.","43ed91b4":"#### Unify column names","8a725ab8":"#### Average age of the top 5 countries\nEven though Finland is the happiest country in the world it has the lowest average age among the top 5 happiest countries, with Switzerland being at the lead in the Age factor. The life expectancy mean for year 2020 and 2021 is 73.","e35c752c":"# Import and Load Data","e734bba7":"##### Negative\nThe country with the highest negative change in year 2021 is Afghanistan and  Central African Republic in 2020.","ae64c8dc":"# Problem Understanding\nQuestions that we care about\n\n1. Which country is considered to be the happiest?\n2. Which region is considered to be the happiest?\n3. How did the happiness score change throughout the years?\n4. Which countries had the most positive change in their happiness score?\n5. What can we tell about the people living in the top 5 happiest countries?\n\n# Data Understanding\nColumns that we care about. for each of the questions above:\n\n1. Country, Happiness Score\n2. Region, Country, Happiness Score\n3. Country, Happiness Score\n4. Country, Happiness Score\n5. Many columns","38966359":"##### Positive","60c659de":"After Adding the Region Column we have more missing data and that is because some countries did not exist in in the `refernce_df`, so we need to manually fill these regions.","e8445eb1":"#### What can we tell about the people living in the top 5 happiest countries?","333b5cc8":"#### How Economy (GDP) and Social Support impact the happiness Score\nSocial support and GDP have a positive impact on the happiness score","91e88163":"##### Countries with the highest average age\nSingapore which is considered to be the happiest country in Southeast Asia has the highest average age in the world, while switzerland the 5th highest and is ranked as 3rd happiest country.","3f15c308":"# Prepare Data\n| Attribute | [Explanation](https:\/\/s3.amazonaws.com\/happiness-report\/2019\/WHR19_Ch2A_Appendix1.pdf) |\n|-----------|---------|\n| Happiness Score |\u201cPlease imagine a ladder, with steps numbered from 0 at the bottom to 10 at the top. The top of the ladder represents the best possible life for you and the bottom of the ladder represents the worst possible life for you. On which step of the ladder would you say you personally feel you stand at this time?\u201d|\n| Freedom | \u201cAre you satisfied or dissatisfied with your freedom to choose what you do with your life?\u201d|\n| Generosity | \u201cHave you donated money to a charity in the past month?\u201d|\n| Corruption Perception | \u201cIs corruption widespread throughout the government or not\u201d and \u201cIs corruption widespread within businesses or not?\u201d|\n| Social support | \u201cIf you were in trouble, do you have relatives or friends you can count on to help you whenever you need them, or not?\u201d|\n| Healthy Life Expectancy | Healthy life expectancies at birth are based on the data extracted from the World Health Organization |\n| GDP | financial metric that breaks down a country's economic output per person and is calculated by dividing the GDP of a nation by its population. [SOURCE](https:\/\/www.investopedia.com\/terms\/p\/per-capita-gdp.asp)|\n\n","37677329":"#### Which region is considered to be the happiest?\nFrom the below graphs we can see that the majority of happy countries are located in **Westren Europe**, **North America and ANZ**. The happiest region from 2018 to 2019 is in North America and ANZ with a mean happiness score of 7.13 in year 2021, followed by Western Europe with a mean score of 6.9.","80c30bf9":"# Table of Content\n* [Looking at the data](#Looking-at-the-data)\n    * [What can we tell](#What-can-we-tell)\n* [Problem Understanding](#Problem-Understanding)\n* [Data Understanding](#Data-Understanding)\n* [Prepare Data](#Prepare-Data)\n    * [Unify column names](#Unify-column-names)\n    * [Drop Columns](#Drop-Columns)\n    * [Add Columns](#Add-Columns)\n    * [Missing Values](#Missing-Values)\n* [Visualization](#Visualization)\n* [Evaluating Results](#Evaluating-Results)","1407e326":"#### What can we tell\n- The number of columns for each dataframe is different\n- We also have missing data in one of the columns in year 2018.\n- The column naming for each dataframe is different which requires cleaning","b53ef84f":"#### The Happiest Country By Region in 2021\nThe below table summarizes the most happy and least happy country by region","1aba3f06":"#### Add Columns\nOne of the questions that we are interested in is: \n> `Which region is considered to be the happiest?`\n\nBut the years 2018 and 2019 do not have a `Region` column and hence we need to add that into the dataset.","fb644086":"#### Drop Columns\nThe Happiness Score and Happiness Rank convey the same information. Happiness Rank will be dropped. Additionally the folowing columns will be dropped since we do not need them to answer the questions of interest:\n* Standard Error\n* Upper Confidence Interval and Lower Confidence Interval\n* Whisker.high and Whisker.low\n* Columns in 2020 and 2021 that do not Explain the happiness score.\n\nThe Columns we care About:\n* Score \n* Country\n* Region\n* GDP\n* Health \n* Freedom\n* Trust\n* Support\n* Generosity\n* Average Age for year 2020 and 2021","6d1d6a21":"# Looking at the data\n- The size of each data frame\n- Checking for null values\n- Displaying columns of each df","929a76a6":"#### How did the happiness score change throughout the years?\nSome Countries had a negative change in their happiness score, however, the majority of the countries have an increase in their happiness score as the years pass by.","11d30767":"# Visualization\nNow that we have finished cleaning up the dataset we can start visualizing and answering the questions we prepared in the problem understanding section.","aa9359dd":"We Do not need to drop the rows with Nan values in the Region, because we can add the missing values ourselves. The Missing value in year 2018 for the attribute`Trust` in `United Arab Emirates` can be replaced by the mean `Trust` of its previous and succeeding years."}}