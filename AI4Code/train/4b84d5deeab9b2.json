{"cell_type":{"0aedd7d3":"code","5ce6ba74":"code","d6d11440":"code","5cbf2b0b":"code","b6cd50ac":"code","b84ed117":"code","462e52c4":"code","7486042b":"code","5d2d675a":"code","c3b2b1a6":"code","86e6f19f":"code","d740316f":"code","94c536c5":"code","a46720e4":"code","893406cc":"code","55cb748e":"code","a4deb659":"code","d0837e3a":"code","400bd028":"code","d3a162c3":"code","94985bfd":"code","afb70f34":"code","8d1e9480":"code","611063b3":"code","a2231502":"code","3ee12043":"markdown","c6f6b51e":"markdown","ef0df3dd":"markdown","98b72c55":"markdown","84e5477d":"markdown","51404380":"markdown","9d6fdb61":"markdown","cd39a108":"markdown","f918fbca":"markdown","fe9b373a":"markdown","19c6ff51":"markdown","ce011325":"markdown"},"source":{"0aedd7d3":"import tensorflow as tf","5ce6ba74":"# To generate GIFs\n!pip install -q imageio\n!pip install -q git+https:\/\/github.com\/tensorflow\/docs","d6d11440":"import glob\nimport imageio\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nfrom tensorflow.keras import layers\nimport time\n\nfrom IPython import display","5cbf2b0b":"(train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data()","b6cd50ac":"train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')\ntrain_images = (train_images - 127.5) \/ 127.5  # Normalize the images to [-1, 1]","b84ed117":"BUFFER_SIZE = len(train_images)\nBATCH_SIZE = 256","462e52c4":"# Batch and shuffle the data\ntrain_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)","7486042b":"def make_generator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(7*7*256, use_bias=False, input_shape=(100,)))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Reshape((7, 7, 256)))\n    assert model.output_shape == (None, 7, 7, 256)  # Note: None is the batch size\n\n    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))\n    assert model.output_shape == (None, 7, 7, 128)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, 14, 14, 64)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n    assert model.output_shape == (None, 28, 28, 1)\n\n    return model","5d2d675a":"generator = make_generator_model()\n\nnoise = tf.random.normal([1, 100])\ngenerated_image = generator(noise, training=False)\n\nplt.imshow(generated_image[0, :, :, 0], cmap='gray')\nplt.show()","c3b2b1a6":"def make_discriminator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',\n                                     input_shape=[28, 28, 1]))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dense(1))\n\n    return model","86e6f19f":"discriminator = make_discriminator_model()\ndecision = discriminator(generated_image)\nprint (decision)","d740316f":"# This method returns a helper function to compute cross entropy loss\ncross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)","94c536c5":"def discriminator_loss(real_output, fake_output):\n    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n    total_loss = real_loss + fake_loss\n    return total_loss","a46720e4":"def generator_loss(fake_output):\n    return cross_entropy(tf.ones_like(fake_output), fake_output)","893406cc":"generator_optimizer = tf.keras.optimizers.Adam(1e-4)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(1e-4)","55cb748e":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\ncheckpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n                                 discriminator_optimizer=discriminator_optimizer,\n                                 generator=generator,\n                                 discriminator=discriminator)","a4deb659":"EPOCHS = 250\nnoise_dim = 100\nnum_examples_to_generate = 9\n\n# You will reuse this seed overtime (so it's easier)\n# to visualize progress in the animated GIF)\nseed = tf.random.normal([num_examples_to_generate, noise_dim])\n","d0837e3a":"# Notice the use of `tf.function`\n# This annotation causes the function to be \"compiled\".\n@tf.function\ndef train_step(images):\n    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n\n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n      generated_images = generator(noise, training=True)\n\n      real_output = discriminator(images, training=True)\n      fake_output = discriminator(generated_images, training=True)\n\n      gen_loss = generator_loss(fake_output)\n      disc_loss = discriminator_loss(real_output, fake_output)\n\n    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n\n    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))","400bd028":"def train(dataset, epochs):\n  for epoch in range(epochs):\n    start = time.time()\n\n    for image_batch in dataset:\n      train_step(image_batch)\n\n    # Produce images for the GIF as you go\n    display.clear_output(wait=True)\n    generate_and_save_images(generator,\n                             epoch + 1,\n                             seed)\n\n    # Save the model every 15 epochs\n    if (epoch + 1) % 15 == 0:\n      checkpoint.save(file_prefix = checkpoint_prefix)\n\n    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))\n\n  # Generate after the final epoch\n  display.clear_output(wait=True)\n  generate_and_save_images(generator,\n                           epochs,\n                           seed)","d3a162c3":"def generate_and_save_images(model, epoch, test_input):\n  # Notice `training` is set to False.\n  # This is so all layers run in inference mode (batchnorm).\n  predictions = model(test_input, training=False)\n\n  fig = plt.figure(figsize=(9, 9))\n\n  for i in range(predictions.shape[0]):\n      plt.subplot(3, 3, i+1)\n      plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')\n      plt.axis('off')\n\n  plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))\n  plt.show()","94985bfd":"train(train_dataset, EPOCHS)","afb70f34":"checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))","8d1e9480":"# Display a single image using the epoch number\ndef display_image(epoch_no):\n  return PIL.Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))\n\ndisplay_image(EPOCHS)","611063b3":"anim_file = 'dcgan.gif'\n\nwith imageio.get_writer(anim_file, mode='I') as writer:\n  filenames = glob.glob('image*.png')\n  filenames = sorted(filenames)\n  for filename in filenames:\n    image = imageio.imread(filename)\n    writer.append_data(image)\n  image = imageio.imread(filename)\n  writer.append_data(image)","a2231502":"import tensorflow_docs.vis.embed as embed\nembed.embed_file(anim_file)","3ee12043":"# Create the models","c6f6b51e":"# Load and prepare the dataset","ef0df3dd":"# Train the model","98b72c55":"## The Discriminator","84e5477d":"# Define the training loop","51404380":"## Generate and save images\n","9d6fdb61":"# Save checkpoints","cd39a108":"## The Generator","f918fbca":"## Generator loss","fe9b373a":"## Discriminator loss","19c6ff51":"# Create a GIF","ce011325":"# Define the loss and optimizers"}}