{"cell_type":{"49c46f34":"code","dc468bb7":"code","2fd5d275":"code","e491b497":"code","76b66471":"code","6cc6e934":"code","28089ead":"code","29c67c04":"code","4197ff95":"code","fa47b37c":"code","389ccf2d":"code","00b39e42":"code","db3bac1d":"code","4c1672e3":"code","4db4619a":"code","c998eaa9":"code","6504a1bc":"code","9c13190d":"code","45a457e4":"code","66357067":"code","90547c00":"code","c01a8d63":"code","d34a11ae":"code","e16cfecf":"code","6360564a":"code","c154049e":"code","fa37683c":"code","9fe5ce20":"code","9b1c70ca":"code","821c2172":"code","53ac690c":"code","b0c97373":"code","d9b56cda":"code","0af3bbad":"code","7836655d":"code","fe1f5f38":"code","7aa53864":"code","aa3b7ff1":"code","56b35a90":"code","04dedd7e":"code","1aa5c2d5":"code","1ed70815":"code","4509682b":"code","52f5477e":"code","ed586d27":"markdown","7426406e":"markdown","ddb23abc":"markdown","0a5a2105":"markdown","410cd704":"markdown","e10bca83":"markdown","54480107":"markdown","90891056":"markdown","907b58ed":"markdown","46c3906f":"markdown","7985f352":"markdown","32d7fb78":"markdown","bca99f78":"markdown"},"source":{"49c46f34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc468bb7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = 15,10\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')","2fd5d275":"df = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","e491b497":"df.shape","76b66471":"df.info()","6cc6e934":"sns.pairplot(df)","28089ead":"msno.matrix(df)","29c67c04":"print(\"The Total Missing values presents in \\\"last_review\\\" columns is: {}\".format(df['last_review'].isnull().sum()))\nprint(\"The Total Missing values presents in \\\"reviews_per_month\\\" columns is: {}\".format(df['reviews_per_month'].isnull().sum()))","4197ff95":"df.isnull().sum()","fa47b37c":"df = df.drop(['id','name','host_name','last_review','reviews_per_month'],axis=1)\ndf.head()","389ccf2d":"sns.set_context(\"talk\",font_scale=1.0)\nsns.scatterplot('neighbourhood','price',data = df.sort_values('price',ascending=False).head(20))\nplt.grid()\nplt.title(\"Neighbourhood Vs Price\",color='magenta')\nplt.xlabel(\"Neighbourhood\",color='r')\nplt.ylabel(\"Price($)\",color='r')\nplt.xticks(rotation=90)","00b39e42":"sns.set_context(\"talk\",font_scale=1.0)\nax=sns.barplot('neighbourhood','price',data = df.nlargest(20,'price'),ci=None)\nplt.xlabel(\"Neighbourhood\",color='r')\nplt.ylabel(\"Price($)\",color='r')\nplt.xticks(rotation=90)","db3bac1d":"host = df['host_id'].value_counts().head(15)\nhost","4c1672e3":"fig_1 = host.plot(kind='bar')\nfig_1.set_title(\"Top 15 Host with Listing in NYC\")\nfig_1.set_xlabel('Host_ID')\nfig_1.set_ylabel('Count of Listing')\nfig_1.set_xticklabels(fig_1.get_xticklabels(),rotation=45)\nplt.show()","4db4619a":"df['neighbourhood_group'].unique()","c998eaa9":"sns.set_context('talk')\nax=sns.barplot(x = df['neighbourhood_group'],y = df['price'],ci=None)\nplt.xlabel(\"Neighbourhood_Group\",color='r')\nplt.ylabel(\"Price($)\",color='g')\nplt.title(\"Prices in Major Region\",color='magenta',size=15)\n\nfor p in ax.patches:\n    ax.annotate(int(p.get_height()), (p.get_x()+0.30, p.get_height()+1), va='bottom',\n                    color= 'black')","6504a1bc":"sns.set_context('poster')\nax = sns.barplot(df['room_type'],df['price'],ci=None)\nplt.xlabel(\"Room Types\",color='r')\nplt.ylabel(\"Price($)\",color='r')\nplt.title(\"Prices for Each RoomType\",color='magenta',size=15)\n\nfor p in ax.patches:\n    ax.annotate(int(p.get_height()), (p.get_x()+0.30, p.get_height()-0.05), va='bottom',\n                    color= 'black')","9c13190d":"sns.violinplot(df['room_type'],df['availability_365'])\nplt.xlabel(\"Room Types\")\nplt.ylabel(\"Availability\")\nplt.title(\"Room Availability\",color = 'magenta')","45a457e4":"sns.set_context('talk')\nsns.violinplot(df['neighbourhood_group'],df['availability_365'])\nplt.xlabel(\"Neighbourhood Group\")\nplt.ylabel(\"Availability\")\nplt.title(\"Availability in each Region\",color = 'magenta')","66357067":"sns.scatterplot(x=df['latitude'],y=df['longitude'],hue=df['neighbourhood_group'],data=df,palette='Set2')","90547c00":"sns.set_style('white')\nsns.scatterplot(x=df['latitude'],y=df['longitude'],hue=df['room_type'],data=df,sizes='size',\n               markers=\"markers\")","c01a8d63":"sns.set_style('darkgrid')\nsns.scatterplot(x=df['latitude'],y=df['longitude'],hue=df['availability_365'],data=df,markers=\"markers\")","d34a11ae":"df.columns","e16cfecf":"df = df.drop(['host_id','neighbourhood','calculated_host_listings_count'],axis=1)\ndf.head()","6360564a":"print(df['room_type'].unique())\nprint(df['neighbourhood_group'].unique())\n\ncols = ['room_type','neighbourhood_group']","c154049e":"from sklearn.preprocessing import LabelEncoder\nend = LabelEncoder()\nfor col in cols:\n    df[col] = end.fit_transform(df[col])\n    mapping = dict(zip(end.classes_,end.transform(end.classes_)))\n    print(\"column : \", col)\n    print(\"Mapping is : \", mapping)\n    \ndf.head()","fa37683c":"df.boxplot(rot=45)","9fe5ce20":"print(\"Latitude\")\nprint(30*'-')\nprint(df['latitude'].quantile(0.25))\nprint(df['latitude'].quantile(0.75))\nprint('\\n')\n\nprint('Longitude')\nprint(30*'-')\nprint(df['longitude'].quantile(0.25))\nprint(df['longitude'].quantile(0.75))\nprint('\\n')\n\nprint('Minimum Nights')\nprint(30*'-')\nprint(df['minimum_nights'].quantile(0.25))\nprint(df['minimum_nights'].quantile(0.75))\nprint('\\n')\n\nprint(\"Number of reviews\")\nprint(30*'-')\nprint(df['number_of_reviews'].quantile(0.25))\nprint(df['number_of_reviews'].quantile(0.75))\nprint('\/n')\n\nprint('Price')\nprint(30*'-')\nprint(df['price'].quantile(0.25))\nprint(df['price'].quantile(0.75))","9b1c70ca":"df['latitude'] = np.where(df['latitude']<40.6901,40.6901,df['latitude'])\ndf['latitude'] = np.where(df['latitude']>40.763115,40.763115,df['latitude'])\n\ndf['longitude'] = np.where(df['longitude']<-73.98307,-73.98307,df['longitude'])\ndf['longitude'] = np.where(df['longitude']> -73.936275,-73.936275,df['longitude'])\n\ndf['minimum_nights'] = np.where(df['minimum_nights'] < 1.0,1.0,df['minimum_nights'])\ndf['minimum_nights'] = np.where(df['minimum_nights'] > 5.0,5.0,df['minimum_nights'])\n\n\ndf['number_of_reviews'] = np.where(df['number_of_reviews'] < 1.0 , 1.0 , df['number_of_reviews'])\ndf['number_of_reviews'] = np.where(df['number_of_reviews'] > 24.0 , 24.0 , df['number_of_reviews'])\n\ndf['price'] = np.where(df['price'] < 69.0 , 69.0 , df['price'])\ndf['price'] = np.where(df['price'] > 175.0 , 175.0 , df['price'])","821c2172":"df.boxplot(rot=45)","53ac690c":"sns.heatmap(df.corr(),annot=True)","b0c97373":"df.corr()['price'].sort_values(ascending=False)","d9b56cda":"X = df.drop('price',axis=1)\ny = df['price']","0af3bbad":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit_transform(X)","7836655d":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state = 8)","fe1f5f38":"from sklearn.ensemble import ExtraTreesClassifier\nfeature_model = ExtraTreesClassifier(n_estimators=50)\nfeature_model.fit(X_train,end.fit_transform(y_train))\n\nfeat_importances = pd.Series(feature_model.feature_importances_ , index = X.columns).plot(kind='barh')","7aa53864":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","aa3b7ff1":"lr = LinearRegression()\nlr.fit(X_train,y_train)\nprint(\"LinearRegression\")\nprint(35 * '-')\nprint(\"Train Score: \", (lr.score(X_train,y_train)*100))\npred_1 = lr.predict(X_test)\nprint(\"Test Score: \", r2_score(y_test,pred_1) * 100)\n\nprint('\\n')\nprint(50*'-')\nprint(\"mean_absolute_error: \", mean_absolute_error(y_test,pred_1))\nprint(\"mean_squared_error: \", mean_squared_error(y_test,pred_1))\nprint(\"Root_mean_squared_error: \",mean_squared_error(y_test,pred_1,squared=False))","56b35a90":"rf = RandomForestRegressor()\nrf.fit(X_train,y_train)\nprint(\"RandomForestRegressor\")\nprint(35 * '-')\nprint(\"Train Score: \", (rf.score(X_train,y_train)*100))\npred_2 = rf.predict(X_test)\nprint(\"Test Score: \", r2_score(y_test,pred_2) * 100)\n\nprint('\\n')\nprint(50*'-')\nprint(\"mean_absolute_error: \", mean_absolute_error(y_test,pred_2))\nprint(\"mean_squared_error: \", mean_squared_error(y_test,pred_2))\nprint(\"Root_mean_squared_error: \",mean_squared_error(y_test,pred_2,squared=False))","04dedd7e":"gbr = GradientBoostingRegressor()\ngbr.fit(X_train,y_train)\nprint(\"GradientBoostingRegressor\")\nprint(35 * '-')\nprint(\"Train Score: \", gbr.score(X_train,y_train)*100)\npred_3 = gbr.predict(X_test)\nprint(\"Test Score: \", r2_score(y_test,pred_3) *100)\n\nprint('\\n')\nprint(50*'-')\nprint(\"mean_absolute_error: \", mean_absolute_error(y_test,pred_3))\nprint(\"mean_squared_error: \", mean_squared_error(y_test,pred_3))\nprint(\"Root_mean_squared_error: \",mean_squared_error(y_test,pred_3,squared=False))","1aa5c2d5":"# Number of trees in random forest\nn_estimators = [600,800,900,1200]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt','log2']\n# Maximum number of levels\nmax_depth = [1,3,7]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10,14]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4,6,8]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n              'criterion':['friedman_mse', 'mse']}\nprint(random_grid)","1ed70815":"from sklearn.model_selection import RandomizedSearchCV\nrandom = RandomizedSearchCV(estimator=gbr,param_distributions=random_grid,cv=5,n_jobs=-1)\nrandom.fit(X_train,y_train)","4509682b":"random.best_params_","52f5477e":"random_gbr = random.best_estimator_\npred_4 = random_gbr.predict(X_test)\n\nprint(\"Test Score: \", r2_score(y_test,pred_4)*100)","ed586d27":"**Let's Visualise which Area has the highest price.**","7426406e":"**We can see many NaN values present in the two columns, which is last_review and reviews_per_month. So,lets see how many NaN values are there?**","ddb23abc":"**Let's Do hypertunning on this model and try to get good score with best params.**","0a5a2105":"**So, GradientBoostingRegressor will give 60.80% Accuracy on Test Data.**","410cd704":"**Outliers:-**","e10bca83":"**Now, we are dropping all unnecessary columns from the Dataset.**","54480107":"**Looks like some of the columns are not relevent for our Dataset so simply we can drop it.**","90891056":"**From the Plot, we can say that More people preferred to stay in a Private room in terms of Privacy while Shared room comes with the least preference.**","907b58ed":"**We will change neighbourhood_group and room_type columns from categories to int.**","46c3906f":"**Importing Libraries:-**","7985f352":"**Splitting Data:-**","32d7fb78":"**Model Building:-**","bca99f78":"**Let's findout Top15 Listings in the Area**"}}