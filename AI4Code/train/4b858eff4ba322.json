{"cell_type":{"89cbdfce":"code","fbb7be74":"code","a94cb23c":"code","070a76db":"code","7cf455a0":"code","e7493971":"code","1b6540f1":"code","84be63d1":"code","210c36cb":"code","b37f0593":"code","f7e60239":"code","98dff329":"code","c13dce4b":"code","96087034":"code","e418869b":"code","ff5dfd69":"code","2a48c5b9":"code","72075e23":"code","b46ff475":"code","6c9bac2b":"code","6e42cce6":"code","294e1e14":"code","aaacdf8b":"code","06893150":"code","9378c863":"markdown","f9c70562":"markdown","1580188b":"markdown","f417e41d":"markdown","ca24a15a":"markdown"},"source":{"89cbdfce":"# Importation des bibliotheques necessaires\n\nimport pandas as pd\nimport numpy as np\nfrom difflib import SequenceMatcher\nimport tqdm\nimport xgboost as xgb\nfrom datetime import timedelta\nimport folium\n!pip install vincent\nimport vincent\nfrom vincent import AxisProperties, PropertySet, ValueRef\nimport plotly.graph_objects as go\nfrom folium.plugins import MarkerCluster\n\nimport plotly.express as px\n\nimport os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fbb7be74":"# Importation du fichier CSV DZA-COVID19 qui contient les informations sur l'evolution du COVID19 en Algerie\n# et le fichier recuper\u00e9 via le liens WIKIPEDIA contiens les 48 Wilayas d'algerie avec leur population qui vas etre utile plus tard\n\ndf_COVID19 = pd.read_csv('..\/input\/DZA-COVID19.csv', delimiter = ',')\n\nurl='https:\/\/fr.wikipedia.org\/wiki\/Liste_des_wilayas_d%27Alg%C3%A9rie_par_population'\ndf_wilaya=pd.read_html(url, header=0)[0]","a94cb23c":"# Correction des donnees dans le fichier WIKI\n\ndf_wilaya = df_wilaya[df_wilaya['Classement']!= 'TOTAL']\n\ndf_wilaya['Classement'] = df_wilaya['Classement'].str.replace('\u00ba', '').str.strip()\ndf_wilaya['Classement'] = df_wilaya['Classement'].str.replace('\u00b0', '').str.strip().astype(int)\n\ndf_wilaya['Nom'] = df_wilaya['Nom'].str.replace(\"Wilaya d'\", '')\ndf_wilaya['Nom'] = df_wilaya['Nom'].str.replace(\"Wilaya de \", '')\ndf_wilaya['Nom'] = df_wilaya['Nom'].str.replace(\" \", '').astype(str)\n\ndf_wilaya['Recensement(1987)'] = df_wilaya['Recensement(1987)'].str.replace('+', '')\ndf_wilaya['Recensement(1987)'] = df_wilaya['Recensement(1987)'].str.replace(',', '')\ndf_wilaya['Recensement(1987)'] = df_wilaya['Recensement(1987)'].str.replace(\"\\xa0\", '', regex=True).astype(str).astype(int)\n\ndf_wilaya['Recensement(1998)'] = df_wilaya['Recensement(1998)'].str.replace('+', '')\ndf_wilaya['Recensement(1998)'] = df_wilaya['Recensement(1998)'].str.replace(',', '')\ndf_wilaya['Recensement(1998)'] = df_wilaya['Recensement(1998)'].str.replace(\"\\xa0\", '', regex=True).astype(str).astype(int)\n\ndf_wilaya['Recensement(2008[1])'] = df_wilaya['Recensement(2008[1])'].str.replace('+', '')\ndf_wilaya['Recensement(2008[1])'] = df_wilaya['Recensement(2008[1])'].str.replace(',', '') \ndf_wilaya['Recensement(2008[1])'] = df_wilaya['Recensement(2008[1])'].str.replace(\"\\xa0\", '', regex=True).astype(str).astype(int)","070a76db":"# Correspondance entre les Wilaya des 2 sources en se servant de la similarit\u00e9 entre les chaines de caracteres\n\ndef similar(a, b):\n    return SequenceMatcher(None, a, b).ratio()\n\nd = {}\nfor i in tqdm.tqdm(df_COVID19['Wilaya']) :\n    for j in df_wilaya['Nom'] :\n        d[j] = similar(i, j)\n    df_COVID19.loc[df_COVID19['Wilaya'].str.contains(i), 'Wilaya'] = max(d, key=d.get)\n    d = {}      ","7cf455a0":"# Correction des valeurs n\u00e9gatives\n\ndf_COVID19.loc[df_COVID19[\"Cas confirm\u00e9s (Cumul\u00e9s)\"] < 0, 'Cas confirm\u00e9s (Cumul\u00e9s)'] = df_COVID19.loc[df_COVID19[\"Cas confirm\u00e9s (Cumul\u00e9s)\"] < 0, 'Cas confirm\u00e9s (Cumul\u00e9s)'] * -1","e7493971":"# Merger les 2 sources et traitement des anomalies\n\ndf_final = df_wilaya.merge(df_COVID19, left_on='Nom', right_on='Wilaya', how = 'left')\n\ndf_final.drop(['Cas suspects '], axis=1, inplace = True)\n\ndf_final = df_final[df_final['date '] != '15\/03\/2002']\ndf_final = df_final[df_final['date '] != '05\/05\/2020']\ndf_final.loc[(df_final.Wilaya == 'Alger') & (df_final['date '] == '03\/03\/2020'), 'date '] = '03\/04\/2020'\n\ndf_final.loc[df_final['date '].isna(), 'date '] = '01\/03\/2020'\ndf_final['Date_'] = pd.to_datetime(df_final['date '], dayfirst=True)\n\ndf_final['Year'] = df_final['Date_'].dt.year\ndf_final['Month'] = df_final['Date_'].dt.month\ndf_final['Day'] = df_final['Date_'].dt.day","1b6540f1":"# Traitement des valuers manquantes en utilisant l'un des meilleur algorithme actuels pour la regression\n# je fait usage des valeurs non manquantes comme valeurs d'entrainement pour combler ceux qui sont manquantes\n# traitemenent des valeurs manquantes pour le champ : Nombre de patients r\u00e9tablis\n\nX = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\", 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\ny = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())]['Nombre de patients r\u00e9tablis '].values\n\nmodel = xgb.XGBRegressor()\n\nmodel.fit(X,y)\n\nX_pred = df_final[(df_final['Nombre de patients r\u00e9tablis '].isna()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\", 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\noutput = model.predict(data=X_pred)\n\ndf_final.loc[(df_final['Nombre de patients r\u00e9tablis '].isna()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull()), 'Nombre de patients r\u00e9tablis '] = output.round(0)","84be63d1":"# traitemenent des valeurs manquantes pour le champ : Cas confirm\u00e9s (Cumul\u00e9s)\n\nX = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Nombre de patients r\u00e9tablis ', 'Nombre de d\u00e9c\u00e9s ',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\", 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\ny = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())]['Cas confirm\u00e9s (Cumul\u00e9s)'].values\n\nmodel = xgb.XGBRegressor()\n\nmodel.fit(X,y)\n\nX_pred = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].isna()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Nombre de patients r\u00e9tablis ', 'Nombre de d\u00e9c\u00e9s ',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\", 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\noutput = model.predict(data=X_pred)\n\ndf_final.loc[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].isna()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull()), 'Cas confirm\u00e9s (Cumul\u00e9s)'] = output.round(0)","210c36cb":"# traitemenent des valeurs manquantes pour le champ : Nombre de d\u00e9c\u00e9s\n\n\nX = df_final[(df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\" , 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\ny = df_final[(df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())]['Nombre de d\u00e9c\u00e9s '].values\n\nmodel = xgb.XGBRegressor()\n\nmodel.fit(X,y)\n\nX_pred = df_final[(df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].isna()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)',\"Nouveau cas au niveau de l'Alg\u00e9rie \", \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\", 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\noutput = model.predict(data=X_pred)\n\ndf_final.loc[(df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].isna()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull()), 'Nombre de d\u00e9c\u00e9s '] = output.round(0)","b37f0593":"# traitemenent des valeurs manquantes pour le champ : Nouveau cas au niveau de l'Alg\u00e9rie\n\nX = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de patients r\u00e9tablis ','Nombre de d\u00e9c\u00e9s ' , 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\ny = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].notnull()) & (df_final[\"Wilaya\"].notnull())][\"Nouveau cas au niveau de l'Alg\u00e9rie \"].values\n\nmodel = xgb.XGBRegressor()\n\nmodel.fit(X,y)\n\nX_pred = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].isna()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de patients r\u00e9tablis ','Nombre de d\u00e9c\u00e9s ', 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\noutput = model.predict(data=X_pred)\n\ndf_final.loc[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].isna()) & (df_final[\"Wilaya\"].notnull()), \"Nouveau cas au niveau de l'Alg\u00e9rie \"] = output.round(0)","f7e60239":"# traitemenent des valeurs manquantes pour le champ : D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\n\nX = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de patients r\u00e9tablis ','Nombre de d\u00e9c\u00e9s ', 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\ny = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].notnull()) & (df_final[\"Wilaya\"].notnull())][\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].values\n\nmodel = xgb.XGBRegressor()\n\nmodel.fit(X,y)\n\nX_pred = df_final[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].isna()) & (df_final[\"Wilaya\"].notnull())][['Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de patients r\u00e9tablis ','Nombre de d\u00e9c\u00e9s ', 'Recensement(2008[1])', 'Year', 'Month', 'Day']].values\noutput = model.predict(data=X_pred)\n\ndf_final.loc[(df_final['Nombre de patients r\u00e9tablis '].notnull()) & (df_final['Cas confirm\u00e9s (Cumul\u00e9s)'].notnull()) & (df_final[ 'Nombre de d\u00e9c\u00e9s '].notnull()) & (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].isna()) & (df_final[\"Wilaya\"].notnull()), \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] = output.round(0)","98dff329":"# Ajout des Wilaya manquantes dans le fichier COVID19 et leur attribuer la valeur 0 pour toutes les informations en rapport (c'est la raison de leur absence)\n\ndf_final.Wilaya.fillna(df_final.Nom, inplace=True)\n\ndf_final['Cas confirm\u00e9s (Cumul\u00e9s)'].fillna(0, inplace=True)\ndf_final['Nombre de d\u00e9c\u00e9s '].fillna(0, inplace=True)\ndf_final['Nombre de patients r\u00e9tablis '].fillna(0, inplace=True)\ndf_final[\"Nouveau cas au niveau de l'Alg\u00e9rie \"].fillna(0, inplace=True)\ndf_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"].fillna(0, inplace=True)","c13dce4b":"# Correction des valeurs qui \u00e9taient manquants et ensuite elles ont \u00e9t\u00e9 mal predites\n\nfor i in ['Cas confirm\u00e9s (Cumul\u00e9s)','Nombre de d\u00e9c\u00e9s ', 'Nombre de patients r\u00e9tablis ',\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] :\n    df_final[i + '_Shifted'] = df_final.groupby(['Wilaya'])[i].transform(lambda x:x.shift(periods=1, fill_value=0))\n\nfor i in ['Cas confirm\u00e9s (Cumul\u00e9s)','Nombre de d\u00e9c\u00e9s ', 'Nombre de patients r\u00e9tablis ',\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] :\n    df_final[i + 'verif'] = df_final[i] - df_final[i + '_Shifted']\n    \nwhile df_final[(df_final['Cas confirm\u00e9s (Cumul\u00e9s)verif'] < 0) | (df_final['Nombre de d\u00e9c\u00e9s verif'] < 0) | (df_final['Nombre de patients r\u00e9tablis verif'] < 0) | (df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)verif\"] < 0)].shape[0] > 0 :\n    \n    for i in ['Cas confirm\u00e9s (Cumul\u00e9s)','Nombre de d\u00e9c\u00e9s ', 'Nombre de patients r\u00e9tablis ',\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] :\n        df_final[i + '_Shifted'] = df_final.groupby(['Wilaya'])[i].transform(lambda x:x.shift(periods=1, fill_value=0))\n\n\n    for i in ['Cas confirm\u00e9s (Cumul\u00e9s)','Nombre de d\u00e9c\u00e9s ', 'Nombre de patients r\u00e9tablis ',\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] :\n        df_final[i + 'verif'] = df_final[i] - df_final[i + '_Shifted']\n    \n    df_final.loc[df_final['Cas confirm\u00e9s (Cumul\u00e9s)verif'] < 0, 'Cas confirm\u00e9s (Cumul\u00e9s)'] = df_final.loc[df_final['Cas confirm\u00e9s (Cumul\u00e9s)verif'] < 0, 'Cas confirm\u00e9s (Cumul\u00e9s)_Shifted']\n    df_final.loc[df_final['Nombre de d\u00e9c\u00e9s verif'] < 0, 'Nombre de d\u00e9c\u00e9s '] = df_final.loc[df_final['Nombre de d\u00e9c\u00e9s verif'] < 0, 'Nombre de d\u00e9c\u00e9s _Shifted']\n    df_final.loc[df_final['Nombre de patients r\u00e9tablis verif'] < 0, 'Nombre de patients r\u00e9tablis '] = df_final.loc[df_final['Nombre de patients r\u00e9tablis verif'] < 0, 'Nombre de patients r\u00e9tablis _Shifted']\n    df_final.loc[df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)verif\"] < 0, \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"] = df_final.loc[df_final[\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)verif\"] < 0, \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)_Shifted\"]\n    \ndf_final. drop([ 'Cas confirm\u00e9s (Cumul\u00e9s)_Shifted', 'Nombre de d\u00e9c\u00e9s _Shifted', 'Nombre de patients r\u00e9tablis _Shifted', \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)_Shifted\", 'Cas confirm\u00e9s (Cumul\u00e9s)verif', 'Nombre de d\u00e9c\u00e9s verif', 'Nombre de patients r\u00e9tablis verif', \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)verif\"], axis = 1, inplace = True)\n","96087034":"# Elargir la plage de date pour toutes les Wilaya\n\ndf_final.rename(columns=lambda x: x.strip(), inplace=True)\n\ndf_wilaya_tmp = df_final[['Classement', 'Nom', 'Recensement(1987)', 'Recensement(1998)','Recensement(2008[1])', \"Taux d'Alphab\u00e9tisation(2008)[2]\",'Taux d\u2019accroissementannuel moyen (1998-2008)[1]']]\n\ndf_wilaya = df_final[['Date_','Wilaya']].sort_values(by = 'Date_')\n\ndf_COVID19_bfill =  df_final[['Date_','Wilaya', 'Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de d\u00e9c\u00e9s', 'Nombre de patients r\u00e9tablis', \"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"]].sort_values(by = 'Date_')\ndf_COVID19_zero =  df_final[['Date_', 'Wilaya', \"Nouveau cas au niveau de l'Alg\u00e9rie\"]].sort_values(by = 'Date_')\n\ndef reindex_by_date(df):\n    dates = pd.date_range(df_final.Date_.min(), df_final.Date_.max())\n    return df.reindex(dates).ffill()\n\ndef reindex_by_date_2(df):\n    dates = pd.date_range(df_final.Date_.min(), df_final.Date_.max())\n    return df.reindex(dates, fill_value=0)\n\ndef reindex_by_date3(df):\n    dates = pd.date_range(df_final.Date_.min(), df_final.Date_.max())\n    return df.reindex(dates).ffill()\n\nappended_data = []\n\nfor i in tqdm.tqdm(df_wilaya['Wilaya'].unique()):\n    tmp = df_wilaya[df_wilaya['Wilaya'] == i].groupby(['Date_']).max().apply(reindex_by_date).reset_index().copy()\n    appended_data.append(pd.DataFrame(tmp).fillna(method = 'ffill').fillna(method = 'bfill'))\n    \ndf_wilaya_bfill = pd.concat(appended_data)\nappended_data = []\n\nfor i in tqdm.tqdm(df_COVID19_bfill['Wilaya'].unique()):\n    tmp = df_COVID19_bfill[df_COVID19_bfill['Wilaya'] == i].groupby(['Date_']).max().apply(reindex_by_date).reset_index().copy()\n    appended_data.append(pd.DataFrame(tmp).fillna(method = 'ffill'))\n    \nData_new_bfill = pd.concat(appended_data).fillna(0)\nappended_data = []\n\nfor i in tqdm.tqdm(df_COVID19_zero['Wilaya'].unique()):\n    tmp = df_COVID19_zero[df_COVID19_zero['Wilaya'] == i].groupby(['Date_']).max().apply(reindex_by_date_2).reset_index().copy()\n    appended_data.append(pd.DataFrame(tmp).fillna(0))\n\nData_new_zero = pd.concat(appended_data).fillna(0)\n\nData_new_zero.loc[:,'Wilaya'] = df_wilaya_bfill['Wilaya']\nData_new_bfill.loc[:,'Wilaya'] = df_wilaya_bfill['Wilaya'] \n\n\ndf_final = Data_new_bfill.merge(Data_new_zero, left_on=['index', 'Wilaya'], right_on=['index', 'Wilaya'])\n\ndf_final = df_wilaya_tmp.drop_duplicates().merge(df_final, left_on=['Nom'], right_on=['Wilaya'])\n\ndf_final.rename(columns={\"index\": \"Date_\"}, inplace = True)\n\n# del Data_new_zero, Data_new_bfill, df_COVID19_bfill, df_COVID19_zero","e418869b":"# calculer des valeurs utiles pour l'analyse\n\nfor i in tqdm.tqdm(df_final.Wilaya.unique()) :\n    df_final.loc[df_final['Wilaya'] == i ,'Cas confirm\u00e9s Daily'] = np.r_[df_final.loc[df_final['Wilaya'] == i ,'Cas confirm\u00e9s (Cumul\u00e9s)'][df_final[df_final['Wilaya'] == i].first_valid_index()], np.diff(df_final.loc[df_final['Wilaya'] == i ,'Cas confirm\u00e9s (Cumul\u00e9s)'])]\n    df_final.loc[df_final['Wilaya'] == i ,'Nombre de d\u00e9c\u00e9s Daily'] = np.r_[df_final.loc[df_final['Wilaya'] == i ,'Nombre de d\u00e9c\u00e9s'][df_final[df_final['Wilaya'] == i].first_valid_index()], np.diff(df_final.loc[df_final['Wilaya'] == i ,'Nombre de d\u00e9c\u00e9s'])]\n    df_final.loc[df_final['Wilaya'] == i ,'Nombre de patients r\u00e9tablis Daily'] = np.r_[df_final.loc[df_final['Wilaya'] == i ,'Nombre de patients r\u00e9tablis'][df_final[df_final['Wilaya'] == i].first_valid_index()], np.diff(df_final.loc[df_final['Wilaya'] == i ,'Nombre de patients r\u00e9tablis'])]\n    df_final.loc[df_final['Wilaya'] == i ,\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie Daily\"] = np.r_[df_final.loc[df_final['Wilaya'] == i ,\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"][df_final[df_final['Wilaya'] == i].first_valid_index()], np.diff(df_final.loc[df_final['Wilaya'] == i ,\"D\u00e9c\u00e9s au niveau de l'Alg\u00e9rie (Cumul)\"])]\n\n#     df_final.loc[df_final['Wilaya'] == i,\"Nouveau cas au niveau de l'Alg\u00e9rie (cumul\u00e9)\"] = df_final.loc[df_final['Wilaya'] == i,\"Nouveau cas au niveau de l'Alg\u00e9rie\"].cumsum()\n\ndf_final['Cas Actifs daily'] = df_final['Nombre de patients r\u00e9tablis Daily'] - df_final['Nombre de d\u00e9c\u00e9s Daily'] - df_final['Nombre de patients r\u00e9tablis Daily'] \ndf_final['Cas Actifs cumul\u00e9'] = df_final['Cas confirm\u00e9s (Cumul\u00e9s)'] - df_final['Nombre de d\u00e9c\u00e9s'] - df_final['Nombre de patients r\u00e9tablis'] \ndf_final['Ratio confirm\u00e9s daily'] =  df_final['Cas confirm\u00e9s Daily']\/df_final['Recensement(2008[1])'] *100","ff5dfd69":"# Ajouter des valeurs utiles pour l'affichage dans une carte comme : le chiffre des Wilaya, la logitude et la latitude de chaque Wilaya\n\nWilaya_code = {\n    'Adrar': 1,\n    'Chlef': 2,\n    'Laghouat': 3,\n    'OumElBouaghi': 4,\n    'Batna': 5,\n    'B\u00e9ja\u00efa': 6,\n    'Biskra': 7,\n    'B\u00e9char': 8,\n    'Blida': 9,\n    'Bouira': 10,\n    'Tamanrasset': 11,\n    'T\u00e9bessa': 12,\n    'Tlemcen': 13,\n    'Tiaret': 14,\n    'TiziOuzou': 15,\n    'Alger': 16,\n    'Djelfa': 17,\n    'Jijel': 18,\n    'S\u00e9tif': 19,\n    'Sa\u00efda': 20,\n    'Skikda': 21,\n    'SidiBelAbb\u00e8s': 22,\n    'Annaba': 23,\n    'Guelma': 24,\n    'Constantine': 25,\n    'M\u00e9d\u00e9a': 26,\n    'Mostaganem': 27,\n    \"M'Sila\": 28,\n    'Mascara': 29,\n    'Ouargla': 30,\n    'Oran': 31,\n    'ElBayadh': 32,\n    'Illizi': 33,\n    'BordjBouArreridj': 34,\n    'Boumerd\u00e8s': 35,\n    'ElTarf': 36,\n    'Tindouf': 37,\n    'Tissemsilt': 38,\n    'ElOued': 39,\n    'Khenchela': 40,\n    'SoukAhras': 41,\n    'Tipaza': 42,\n    'Mila': 43,\n    'A\u00efnDefla': 44,\n    'Na\u00e2ma': 45,\n    'A\u00efnT\u00e9mouchent': 46,\n    'Gharda\u00efa': 47,\n    'Relizane': 48\n}\n\ndf_final.loc[:,'Nom'] = df_final['Nom'].map(Wilaya_code)\n\ndf_final.loc[df_final['Wilaya'] == 'Adrar', 'lat'] = 27.870924\ndf_final.loc[df_final['Wilaya'] == 'Chlef', 'lat'] = 36.165253\ndf_final.loc[df_final['Wilaya'] == 'Laghouat', 'lat'] = 33.8\ndf_final.loc[df_final['Wilaya'] == 'OumElBouaghi', 'lat'] = 35.875411\ndf_final.loc[df_final['Wilaya'] == 'Batna', 'lat'] = 35.555278\ndf_final.loc[df_final['Wilaya'] == 'B\u00e9ja\u00efa', 'lat'] = 36.7558700\ndf_final.loc[df_final['Wilaya'] == 'Biskra', 'lat'] = 34.850378\ndf_final.loc[df_final['Wilaya'] == 'B\u00e9char', 'lat'] = 31.616667\ndf_final.loc[df_final['Wilaya'] == 'Blida', 'lat'] = 36.470039\ndf_final.loc[df_final['Wilaya'] == 'Bouira', 'lat'] = 36.374894\ndf_final.loc[df_final['Wilaya'] == 'Tamanrasset', 'lat'] = 22.785\ndf_final.loc[df_final['Wilaya'] == 'T\u00e9bessa', 'lat'] = 35.404167 \ndf_final.loc[df_final['Wilaya'] == 'Tlemcen', 'lat'] = 34.878333\ndf_final.loc[df_final['Wilaya'] == 'Tiaret', 'lat'] = 35.37103\ndf_final.loc[df_final['Wilaya'] == 'TiziOuzou', 'lat'] = 36.711825\ndf_final.loc[df_final['Wilaya'] == 'Alger', 'lat'] = 36.763056\ndf_final.loc[df_final['Wilaya'] == 'Djelfa', 'lat'] = 34.672787\ndf_final.loc[df_final['Wilaya'] == 'Jijel', 'lat'] = 36.820344\ndf_final.loc[df_final['Wilaya'] == 'S\u00e9tif', 'lat'] = 36.191121\ndf_final.loc[df_final['Wilaya'] == 'Sa\u00efda', 'lat'] = 34.830335\ndf_final.loc[df_final['Wilaya'] == 'Skikda', 'lat'] = 36.876174\ndf_final.loc[df_final['Wilaya'] == 'SidiBelAbb\u00e8s', 'lat'] = 35.189937\ndf_final.loc[df_final['Wilaya'] == 'Annaba', 'lat'] = 36.9\ndf_final.loc[df_final['Wilaya'] == 'Guelma', 'lat'] = 36.462136\ndf_final.loc[df_final['Wilaya'] == 'Constantine', 'lat'] = 36.365\ndf_final.loc[df_final['Wilaya'] == 'M\u00e9d\u00e9a', 'lat'] = 36.264169\ndf_final.loc[df_final['Wilaya'] == 'Mostaganem', 'lat'] = 35.931151\ndf_final.loc[df_final['Wilaya'] == \"M'Sila\", 'lat'] = 35.705833\ndf_final.loc[df_final['Wilaya'] == 'Mascara', 'lat'] = 35.396644\ndf_final.loc[df_final['Wilaya'] == 'Ouargla', 'lat'] = 31.935022\ndf_final.loc[df_final['Wilaya'] == 'Oran', 'lat'] = 35.6976541\ndf_final.loc[df_final['Wilaya'] == 'ElBayadh', 'lat'] = 33.683176\ndf_final.loc[df_final['Wilaya'] == 'Illizi', 'lat'] = 26.483333\ndf_final.loc[df_final['Wilaya'] == 'BordjBouArreridj', 'lat'] = 36.073215,\ndf_final.loc[df_final['Wilaya'] == 'Boumerd\u00e8s', 'lat'] = 36.758965\ndf_final.loc[df_final['Wilaya'] == 'ElTarf', 'lat'] = 36.767199\ndf_final.loc[df_final['Wilaya'] == 'Tindouf', 'lat'] = 27.671109\ndf_final.loc[df_final['Wilaya'] == 'Tissemsilt', 'lat'] = 35.607222\ndf_final.loc[df_final['Wilaya'] == 'ElOued', 'lat'] = 33.35608\ndf_final.loc[df_final['Wilaya'] == 'Khenchela', 'lat'] = 35.435833\ndf_final.loc[df_final['Wilaya'] == 'SoukAhras', 'lat'] = 36.286389\ndf_final.loc[df_final['Wilaya'] == 'Tipaza', 'lat'] = 36.6178786\ndf_final.loc[df_final['Wilaya'] == 'Mila', 'lat'] = 36.450278\ndf_final.loc[df_final['Wilaya'] == 'A\u00efnDefla', 'lat'] = 36.0729193\ndf_final.loc[df_final['Wilaya'] == 'Na\u00e2ma', 'lat'] = 33.266667\ndf_final.loc[df_final['Wilaya'] == 'A\u00efnT\u00e9mouchent', 'lat'] = 35.297489\ndf_final.loc[df_final['Wilaya'] == 'Gharda\u00efa', 'lat'] = 32.483333\ndf_final.loc[df_final['Wilaya'] == 'Relizane', 'lat'] = 35.737344\n\ndf_final.loc[df_final['Wilaya'] == 'Adrar', 'long'] = -0.285634 \ndf_final.loc[df_final['Wilaya'] == 'Chlef', 'long'] = 1.334523\ndf_final.loc[df_final['Wilaya'] == 'Laghouat', 'long'] = 2.865143 \ndf_final.loc[df_final['Wilaya'] == 'OumElBouaghi', 'long'] = 7.113526 \ndf_final.loc[df_final['Wilaya'] == 'Batna', 'long'] = 6.178611 \ndf_final.loc[df_final['Wilaya'] == 'B\u00e9ja\u00efa', 'long'] = 5.0843300\ndf_final.loc[df_final['Wilaya'] == 'Biskra', 'long'] = 5.728046 \ndf_final.loc[df_final['Wilaya'] == 'B\u00e9char', 'long'] = -2.216667  \ndf_final.loc[df_final['Wilaya'] == 'Blida', 'long'] = 2.827699 \ndf_final.loc[df_final['Wilaya'] == 'Bouira', 'long'] = 3.901998 \ndf_final.loc[df_final['Wilaya'] == 'Tamanrasset', 'long'] = 5.522778 \ndf_final.loc[df_final['Wilaya'] == 'T\u00e9bessa', 'long'] = 8.124167 \ndf_final.loc[df_final['Wilaya'] == 'Tlemcen', 'long'] = -1.315 \ndf_final.loc[df_final['Wilaya'] == 'Tiaret', 'long'] = 1.316988 \ndf_final.loc[df_final['Wilaya'] == 'TiziOuzou', 'long'] = 4.045914 \ndf_final.loc[df_final['Wilaya'] == 'Alger', 'long'] = 3.050556 \ndf_final.loc[df_final['Wilaya'] == 'Djelfa', 'long'] = 3.262995 \ndf_final.loc[df_final['Wilaya'] == 'Jijel', 'long'] = 5.764525 \ndf_final.loc[df_final['Wilaya'] == 'S\u00e9tif', 'long'] = 5.413733 \ndf_final.loc[df_final['Wilaya'] == 'Sa\u00efda', 'long'] = 0.151713 \ndf_final.loc[df_final['Wilaya'] == 'Skikda', 'long'] = 6.909208 \ndf_final.loc[df_final['Wilaya'] == 'SidiBelAbb\u00e8s', 'long'] = -0.630846 \ndf_final.loc[df_final['Wilaya'] == 'Annaba', 'long'] = 7.766667 \ndf_final.loc[df_final['Wilaya'] == 'Guelma', 'long'] = 7.426076 \ndf_final.loc[df_final['Wilaya'] == 'Constantine', 'long'] = 6.614722 \ndf_final.loc[df_final['Wilaya'] == 'M\u00e9d\u00e9a', 'long'] = 2.753926 \ndf_final.loc[df_final['Wilaya'] == 'Mostaganem', 'long'] = 0.089176 \ndf_final.loc[df_final['Wilaya'] == \"M'Sila\", 'long'] = 4.541944 \ndf_final.loc[df_final['Wilaya'] == 'Mascara', 'long'] = 0.14027 \ndf_final.loc[df_final['Wilaya'] == 'Ouargla', 'long'] = 5.322329 \ndf_final.loc[df_final['Wilaya'] == 'Oran', 'long'] = -0.6337376\ndf_final.loc[df_final['Wilaya'] == 'ElBayadh', 'long'] = 1.019273 \ndf_final.loc[df_final['Wilaya'] == 'Illizi', 'long'] = 8.466667 \ndf_final.loc[df_final['Wilaya'] == 'BordjBouArreridj', 'long'] = 4.76108 \ndf_final.loc[df_final['Wilaya'] == 'Boumerd\u00e8s', 'long'] = 3.474819 \ndf_final.loc[df_final['Wilaya'] == 'ElTarf', 'long'] = 8.313771 \ndf_final.loc[df_final['Wilaya'] == 'Tindouf', 'long'] = -8.147435 \ndf_final.loc[df_final['Wilaya'] == 'Tissemsilt', 'long'] = 1.81081  \ndf_final.loc[df_final['Wilaya'] == 'ElOued', 'long'] = 6.863186 \ndf_final.loc[df_final['Wilaya'] == 'Khenchela', 'long'] = 7.143333 \ndf_final.loc[df_final['Wilaya'] == 'SoukAhras', 'long'] = 7.951111 \ndf_final.loc[df_final['Wilaya'] == 'Tipaza', 'long'] = 2.3912362\ndf_final.loc[df_final['Wilaya'] == 'Mila', 'long'] = 6.264444 \ndf_final.loc[df_final['Wilaya'] == 'A\u00efnDefla', 'long'] = 1.9881527\ndf_final.loc[df_final['Wilaya'] == 'Na\u00e2ma', 'long'] = -0.316667 \ndf_final.loc[df_final['Wilaya'] == 'A\u00efnT\u00e9mouchent', 'long'] = -1.140373 \ndf_final.loc[df_final['Wilaya'] == 'Gharda\u00efa', 'long'] = 3.666667 \ndf_final.loc[df_final['Wilaya'] == 'Relizane', 'long'] = 0.555987 ","2a48c5b9":"px.set_mapbox_access_token(\"pk.eyJ1IjoibWVoZGlnYXNtaSIsImEiOiJjazkwcXplbGowNDNwM25saDBldzY0NmQwIn0.gYQr41tH3KKMOHnml_REeQ\")\nfig = px.scatter_mapbox(df_final[df_final['Date_'] >= '16-03-2020'], lat=\"lat\", lon=\"long\", color=np.log10(df_final[df_final['Date_'] >= '16-03-2020'][\"Nombre de d\u00e9c\u00e9s\"]+1), size=np.log10(df_final[df_final['Date_'] >= '16-03-2020'][\"Cas confirm\u00e9s (Cumul\u00e9s)\"]+1),\n                  color_continuous_scale=\"Sunsetdark\", zoom=4, animation_frame=df_final[df_final['Date_'] >= '16-03-2020']['Date_'].dt.strftime('%m\/%d\/%Y'),\n                    title='COVID 19 Evolution (Cliquez sur Play)', hover_data = [ 'Cas confirm\u00e9s (Cumul\u00e9s)','Nombre de d\u00e9c\u00e9s', 'Nombre de patients r\u00e9tablis'], hover_name=\"Wilaya\",\n                        labels={'animation_frame':'Date',\n                          'long': 'Longitude',\n                          'lat' : 'Latitude',\n                          'countryterritoryCode': 'Country code',\n                            'color' : 'Nombre de d\u00e9c\u00e9s (Log10)' ,\n                            'size' : 'Cas confirm\u00e9s (Log10)'},width=1000, height=700,\n                       )\nfig.update_traces(hovertemplate =None)\nfig.update(layout_coloraxis_showscale=False)\nfig.update_layout(mapbox_style=\"dark\")\nfig.show()\n","72075e23":"fig = px.area(pd.melt(df_final, id_vars=['Date_'], value_vars=['Cas confirm\u00e9s (Cumul\u00e9s)', 'Nombre de d\u00e9c\u00e9s', 'Nombre de patients r\u00e9tablis']).groupby(['Date_', 'variable']).sum().reset_index(),\n              x='Date_',  y=\"value\", color = 'variable',\n             title='Augmentations Cumul\u00e9es D\u00e9c\u00e8s, Cas et R\u00e9tablissements',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                    'value': 'Valeur'})\nfig.update_layout(hovermode=\"x\")\nfig.show()\n\nfig = px.line(df_final, \n              x='Date_',  y=\"Cas confirm\u00e9s (Cumul\u00e9s)\", color = 'Wilaya',\n             title='Augmentations Cumul\u00e9es des Cas par wilaya',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                    'value': 'Valeur'})\n# fig.update_layout(hovermode=\"x\")\nfig.show()\n\nfig = px.line(df_final, \n              x='Date_',  y=\"Nombre de d\u00e9c\u00e9s\", color = 'Wilaya',\n             title='Augmentations Cumul\u00e9es des D\u00e9c\u00e8s par wilaya',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                    'value': 'Valeur'})\n# fig.update_layout(hovermode=\"x\")\nfig.show()\n\nfig = px.line(df_final, \n              x='Date_',  y=\"Nombre de patients r\u00e9tablis\", color = 'Wilaya',\n             title='Augmentations Cumul\u00e9es des R\u00e9tablissements par Wilaya',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                    'value': 'Valeur'})\n# fig.update_layout(hovermode=\"x\")\nfig.show()\n\nfig = px.line(df_final, \n              x='Date_',  y=\"Cas Actifs cumul\u00e9\", color = 'Wilaya',\n             title='Augmentations Cumul\u00e9es des Cas Actifs par Wilaya',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                     'value': 'Valeur'})\n# fig.update_layout(hovermode=\"x\")\nfig.show()","b46ff475":"fig = px.bar(pd.melt(df_final, id_vars=['Date_'], value_vars=['Cas confirm\u00e9s Daily', 'Nombre de d\u00e9c\u00e9s Daily', 'Nombre de patients r\u00e9tablis Daily']).groupby(['Date_', 'variable']).sum().reset_index(),\n              x='Date_',  y=\"value\", color = 'variable',\n             title='Augmentations journali\u00e8re des D\u00e9c\u00e8s, Cas et R\u00e9tablissements',\n             labels={'Date_' : 'Date',\n                     'Count': 'Total',\n                    'value': 'Valeur'})\nfig.update_layout(hovermode=\"x\")\nfig.show()","6c9bac2b":"# max = df_final[df_final['Date'] == df_final['Date'].max]\n\nfig = px.scatter(df_final[df_final['Date_'] == df_final['Date_'].max()].sort_values('Nombre de d\u00e9c\u00e9s', ascending=False).iloc[:20, :], \n                 x='Cas confirm\u00e9s (Cumul\u00e9s)', y='Nombre de d\u00e9c\u00e9s', color='Wilaya', size='Nombre de d\u00e9c\u00e9s', height=700,\n                 text='Wilaya', log_x=True, log_y=True, title=\"D\u00e9c\u00e8s vs confirm\u00e9s (l'\u00e9chelle est en log10)\")\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","6e42cce6":"df_final.loc[df_final['Wilaya'].isin(['Alger','Blida','Bouira','TiziOuzou','M\u00e9d\u00e9a','Boumerd\u00e8s','Tipaza','A\u00efnDefla']),'Region'] = 'Centre'\ndf_final.loc[df_final['Wilaya'].isin(['OumElBouaghi','T\u00e9bessa','Jijel','Skikda','Annaba','Guelma','Constantine','ElTarf','Khenchela','SoukAhras','Mila']),'Region'] = 'Constantine'\ndf_final.loc[df_final['Wilaya'].isin(['Adrar','Laghouat','Biskra','B\u00e9char','Tamanrasset','Djelfa','Ouargla','ElBayadh','Illizi','Tindouf','ElOued','Na\u00e2ma','Gharda\u00efa']),'Region'] = 'Grand Sud'\ndf_final.loc[df_final['Wilaya'].isin(['Chlef','Tiaret','Mostaganem','Mascara','Oran','Tissemsilt','Relizane']),'Region'] = 'Oran'\ndf_final.loc[df_final['Wilaya'].isin(['Batna','B\u00e9ja\u00efa','S\u00e9tif',\"M'Sila\",'BordjBouArreridj']),'Region'] = 'Setif'\ndf_final.loc[df_final['Wilaya'].isin(['Tlemcen','Sa\u00efda','SidiBelAbb\u00e8s','A\u00efnT\u00e9mouchent',]),'Region'] = 'Tlemcen'","294e1e14":"fig = px.treemap(df_final[df_final['Date_'] == df_final['Date_'].max()].sort_values(by='Nombre de d\u00e9c\u00e9s', ascending=False).reset_index(drop=True), \n                 path=[\"Region\", \"Wilaya\"], values=\"Cas confirm\u00e9s (Cumul\u00e9s)\", height=700,\n                 title='Proportions des Nombre de Cas Par wilaya\/ region',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(df_final[df_final['Date_'] == df_final['Date_'].max()].sort_values(by='Nombre de d\u00e9c\u00e9s', ascending=False).reset_index(drop=True),\n                 path=[\"Region\", \"Wilaya\"], values=\"Nombre de d\u00e9c\u00e9s\", height=700,\n                 title='Proportions des Nombre de D\u00e9c\u00e8s Par wilaya\/ region',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(df_final[df_final['Date_'] == df_final['Date_'].max()].sort_values(by='Nombre de d\u00e9c\u00e9s', ascending=False).reset_index(drop=True),\n                 path=[\"Region\", \"Wilaya\"], values=\"Nombre de patients r\u00e9tablis\", height=700,\n                 title='Proportions des Nombre de R\u00e9tablissements Par wilaya\/ region',\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(df_final[df_final['Date_'] == df_final['Date_'].max()].sort_values(by='Nombre de d\u00e9c\u00e9s', ascending=False).reset_index(drop=True),\n                 path=[\"Region\", \"Wilaya\"], values=\"Cas Actifs cumul\u00e9\", height=700,\n                 title=\"Proportions des Nombre d'Actifs Par wilaya\/ region\",\n                 color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","aaacdf8b":"fig = px.pie(df_final.groupby(['Wilaya']).max().reset_index(), values='Cas confirm\u00e9s (Cumul\u00e9s)', names='Wilaya', title='Cas confirm\u00e9s par Wilaya',\n             labels={'deaths_cumsum_ByCountry':'COVID 19 Total Deaths',\n                      'cases_cumsum' : 'Cases', \n                      'deaths_cumsum': 'Deaths',\n                     'variable' : 'Eolution',\n                     'dateRep_usa': 'Date',\n                     'dateRep': 'Date',\n                     'countriesAndTerritories' : 'Country',\n                     'countryterritoryCode': 'Country code',\n                     'value' : 'Count (Log10)'},)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n\nfig = px.pie(df_final.groupby(['Wilaya']).max().reset_index(), values='Nombre de d\u00e9c\u00e9s', names='Wilaya', title='Nombre de d\u00e9c\u00e9s par Wilaya',\n             labels={'deaths_cumsum_ByCountry':'COVID 19 Total Deaths',\n                      'cases_cumsum' : 'Cases', \n                      'deaths_cumsum': 'Deaths',\n                     'variable' : 'Eolution',\n                     'dateRep_usa': 'Date',\n                     'dateRep': 'Date',\n                     'countriesAndTerritories' : 'Country',\n                     'countryterritoryCode': 'Country code',\n                     'value' : 'Count (Log10)'},)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n\nfig = px.pie(df_final.groupby(['Wilaya']).max().reset_index(), values='Nombre de patients r\u00e9tablis', names='Wilaya', title='Nombre de patients r\u00e9tablis par Wilaya',\n             labels={'deaths_cumsum_ByCountry':'COVID 19 Total Deaths',\n                      'cases_cumsum' : 'Cases', \n                      'deaths_cumsum': 'Deaths',\n                     'variable' : 'Eolution',\n                     'dateRep_usa': 'Date',\n                     'dateRep': 'Date',\n                     'countriesAndTerritories' : 'Country',\n                     'countryterritoryCode': 'Country code',\n                     'value' : 'Count (Log10)'},)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n\nfig = px.pie(df_final.groupby(['Wilaya']).max().reset_index(), values='Cas Actifs cumul\u00e9', names='Wilaya', title='Nombre de Cas Actifs par Wilaya',\n             labels={'deaths_cumsum_ByCountry':'COVID 19 Total Deaths',\n                      'cases_cumsum' : 'Cases', \n                      'deaths_cumsum': 'Deaths',\n                     'variable' : 'Eolution',\n                     'dateRep_usa': 'Date',\n                     'dateRep': 'Date',\n                     'countriesAndTerritories' : 'Country',\n                     'countryterritoryCode': 'Country code',\n                     'value' : 'Count (Log10)'},)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","06893150":"ax = AxisProperties(labels = PropertySet(angle=ValueRef(value=-5)))\n\nsome_map = folium.Map(location=[df_final.groupby(['Wilaya']).max()['lat'].mean(), df_final.groupby(['Wilaya']).max()['long'].mean()], \n                      zoom_start=7)\n#creating a Marker for each point in df_sample. Each point will get a popup with their zip\nmc = MarkerCluster()\nfor index, row in df_final.groupby(['Wilaya']).max().reset_index().iterrows(): \n#     display(row._10)\n#     bar = vincent.Bar({ 'Cas confirm\u00e9s (Cumul\u00e9s)' : row[\"Cas confirm\u00e9s (Cumul\u00e9s)\"],'Nombre de d\u00e9c\u00e9s' : row[\"Nombre de d\u00e9c\u00e9s\"], 'Nombre de patients r\u00e9tablis' : row[\"Nombre de patients r\u00e9tablis\"]}, width=300, height=200)\n    bar = vincent.GroupedBar(pd.DataFrame([{ 'Cas confirm\u00e9s (Cumul\u00e9s)' : row[\"Cas confirm\u00e9s (Cumul\u00e9s)\"],'Nombre de d\u00e9c\u00e9s' :row[\"Nombre de d\u00e9c\u00e9s\"], 'Nombre de patients r\u00e9tablis' : row[\"Nombre de patients r\u00e9tablis\"]}], index = ['']), width=300, height=200)\n    bar.axes[0].properties = ax\n    bar.legend(title='legend')\n    bar.colors(brew='Set1')\n    mc.add_child(folium.Marker(location=[row[\"lat\"],row[\"long\"]], tooltip=row[\"Wilaya\"],\n                               popup=folium.Popup(max_width=450).add_child(folium.Vega(bar, width=500, height=250))))\n#                                      popup= \"Wilaya : \" + str(row.Wilaya) + \"<br \/> Cas confirm\u00e9s (Cumul\u00e9s) : \" + str(row._10) + \"<br \/> Nombre de d\u00e9c\u00e9s : \" + str(row._11)+ \"<br \/> Nombre de patients r\u00e9tablis : \" + str(row._12)+ \"<br \/> Cas Actifs cumul\u00e9 : \"+  str(row._20) ))\nsome_map.add_child(mc)\nsome_map","9378c863":"<font size=\"5\" color=\"red\">Veuillez mettre \u00e0 jour si vous aimez mon effort<\/font> <br \/><br \/>\n<font size=\"5\" color=\"red\">Vos UPVOTEs m'encouragent \u00e0 cr\u00e9er de nouvelles perspectives.<\/font>","f9c70562":" ## Preprocessus des Donn\u00e9es","1580188b":"# COVID 19 evolution in Algeria EDA","f417e41d":"Bonjour, ceci est une analyse exploratoire des donn\u00e9es sur l'\u00e9volution du COVID19 en Alg\u00e9rie.\n\nComme il est impossible d'avoir des donn\u00e9es officielles structur\u00e9es dans des fichi\u00e9s plats en temps r\u00e9el j'ai exploit\u00e9 les donn\u00e9es disponibles via le site :\n\nhttps:\/\/github.com\/SchoolofAI-Algiers\/AI2E-workshops\/tree\/master\/challenge_data_exploration?fbclid=IwAR3wtCq-aLpG_XgEeErXKEjN9UQv5M0uhhYqxnekrqcRnLd2S_HrMWnHg4E\n\nCes donn\u00e9es sont fig\u00e9es au 09 avril 2020 et contiennent des bruits, des anomalies et de la confusion que j'ai d\u00fb leur consacrer un preprocessus d\u00e9di\u00e9 pour les corriger.\n\nMon Linkedin : https:\/\/www.linkedin.com\/in\/mehdi-gasmi-439197170\/\nMon Kaggle : https:\/\/www.kaggle.com\/servietsky\n","ca24a15a":"## Analyse des Donn\u00e9es "}}