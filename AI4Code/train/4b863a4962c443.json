{"cell_type":{"43c4ac02":"code","e5fe530e":"code","8ad68100":"code","d1955f1b":"code","e908676e":"code","1c7e2f4f":"code","3894a3f8":"code","95529dc0":"code","59ceb7c8":"code","e6fdd301":"code","3b1ef5e8":"code","eea71791":"code","838d70ee":"code","349e277d":"code","e7be919b":"code","80d6269a":"code","c885ab18":"code","d6a2c6f0":"code","4c3c814b":"code","d15e67b2":"code","0e1a292d":"code","7e6f97a9":"code","c9bc21fd":"code","39f137f6":"code","a0191b1e":"code","fde4a9de":"code","56f4c7c3":"code","9f127586":"code","4c3ec60e":"code","e13c7604":"code","2f709967":"code","68b71ed2":"code","0d75f980":"code","7d967500":"code","5df8257c":"code","16d04168":"code","b635dddd":"code","af023ebc":"code","3980815a":"code","e8f5f544":"code","1de88dd1":"code","4aa532eb":"code","457a58a1":"code","8205b4a7":"code","22e4df5d":"code","5a60d5a9":"code","b5d82a1f":"code","a8f99e03":"markdown","c8a8f0c4":"markdown","87ef6b72":"markdown","3a534d80":"markdown"},"source":{"43c4ac02":"import pandas as pd\nimport numpy as np\nimport os\nfrom glob import glob\nimport random\nimport matplotlib.pylab as plt","e5fe530e":"mypaths=[]\nfor name in glob('..\/input\/breast-histopathology-images\/IDC_regular_ps50_idx5\/*',recursive=True):\n    mypaths.append(name)\nprint(mypaths[:5])","8ad68100":"len(mypaths)","d1955f1b":"mp=mypaths[60:90]\nimagePatches=[]\nfor i in mp:\n    imagePatches+=glob(i+'\/*\/*.png', recursive=True)","e908676e":"print('total no. of images selected from total images is '+str(len(imagePatches)))\nimagePatches[:5]","1c7e2f4f":"class0 = [] # 0 = no cancer\nclass1 = [] # 1 = cancer\n\nfor filename in imagePatches:\n    if filename.endswith(\"class0.png\"):\n         class0.append(filename)\n    else:\n        class1.append(filename)","3894a3f8":"print('Among them, '+str(len(class0))+' is clss0 and '+str(len(class1))+' is class1')","95529dc0":"sampled_class0 = random.sample(class0, len(class1))\nsampled_class1 = random.sample(class1, len(class1))\nlen(sampled_class0)\nclass0=None;\nclass1=None;","59ceb7c8":"import gc","e6fdd301":"from matplotlib.image import imread\nimport cv2\n\ndef get_image_arrays(data, label):\n    img_arrays = []\n    for i in data:\n      if i.endswith('.png'):\n        img = cv2.imread(i ,cv2.IMREAD_COLOR)\n        img_sized = cv2.resize(img, (227, 227), interpolation=cv2.INTER_LINEAR)\n        img_arrays.append([img_sized, label])\n    return img_arrays","3b1ef5e8":"class0_array = get_image_arrays(sampled_class0, 0)\nclass1_array = get_image_arrays(sampled_class1, 1)\nprint('done')","eea71791":"gc.collect()","838d70ee":"print(len(class0_array))\nprint(len(class1_array))","349e277d":"class0_array[0][0].shape","e7be919b":"plt.imshow(class1_array[1][0])","80d6269a":"combined_data = np.concatenate((class0_array, class1_array))\n#random.seed(41)\n#random.shuffle(combined_data)\n","c885ab18":"combined_data[0][0].shape","d6a2c6f0":"len(combined_data)","4c3c814b":"X = []\ny = []\n\nfor features,label in combined_data:\n    X.append(features)\n    y.append(label)\n","d15e67b2":"print(len(X))\nprint(len(y))","0e1a292d":"X = np.array(X).reshape(-1, 227, 227, 3)","7e6f97a9":"from sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","c9bc21fd":"class0_array=None\nclass1_array=None\ncombined_data=None\ny=None\nX=None\ngc.collect()","39f137f6":"#X_train=X_train\/255\n#X_test=X_test\/255","a0191b1e":"import tensorflow as tf\nfrom tensorflow import keras","fde4a9de":"model = keras.models.Sequential([\n    keras.layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(227,227,3)),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n    keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n    keras.layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(filters=384, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(9216,input_shape=(12544,), activation='relu'),\n    keras.layers.Dense(4096, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(4096, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(2, activation='sigmoid')\n])","56f4c7c3":"model.summary()","9f127586":"model.compile(\n    optimizer=tf.optimizers.Adam(lr=0.000001),\n    loss='binary_crossentropy',\n    metrics=['accuracy','Recall']\n)","4c3ec60e":"X_train.shape","e13c7604":"history=model.fit(X_train,y_train, validation_data=(X_test, y_test),epochs=10)","2f709967":"e=model.evaluate(X_test,y_test)","68b71ed2":"import matplotlib.pyplot as plt","0d75f980":"#plotting the Accuracy of test and training sets\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","7d967500":"#plotting the loss of test and training sets\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","5df8257c":"model.save('alexnet.h5')","16d04168":"y_pred=model.predict(X_test)","b635dddd":"y_pred[21]","af023ebc":"y_test[21]","3980815a":"Y_pred=[]\nfor i in y_pred:\n    if i[0]>i[1]:\n        Y_pred.append(0)\n    else:\n        Y_pred.append(1)","e8f5f544":"Y_test=[]\nfor i in y_test:\n    if i[0]>i[1]:\n        Y_test.append(0)\n    else:\n        Y_test.append(1)","1de88dd1":"Y_pred[0]","4aa532eb":"Y_test[0]","457a58a1":"from sklearn.metrics import classification_report, confusion_matrix\nprint('Confusion Matrix')\nprint(confusion_matrix(Y_test, Y_pred))\nprint('Classification Report')\nprint(classification_report(Y_test, Y_pred, target_names=['Class-0','Class-1']))","8205b4a7":"classes=[0,1]\ncon_mat_df = pd.DataFrame(confusion_matrix(Y_test, Y_pred),\n                     index = classes, \n                     columns = classes)","22e4df5d":"con_mat_df","5a60d5a9":"import seaborn as sns","b5d82a1f":"figure = plt.figure(figsize=(6, 6))\nsns.heatmap(con_mat_df, annot=True,cmap=plt.cm.cool,fmt='d')\nplt.tight_layout()\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nplt.show()","a8f99e03":"**Now Reading all images into arrays**","c8a8f0c4":"**Now Shuffling the images randomly**","87ef6b72":"0 means 1,0\n1 means 0,1","3a534d80":"**Now splitting the features and labels from the combined data**"}}