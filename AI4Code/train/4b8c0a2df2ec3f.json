{"cell_type":{"d3189a3e":"code","83039ca4":"code","b24653b4":"code","0dfaeb19":"code","2e74900b":"code","cf02263f":"code","0d5f1ebc":"code","cb6ec758":"code","3e16e5a0":"code","a3c0736a":"code","b890ca62":"markdown","dd7eefdf":"markdown","40c4ba65":"markdown","6775ce33":"markdown","d3093e5d":"markdown","61853e87":"markdown"},"source":{"d3189a3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83039ca4":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nimport matplotlib.pyplot as plt","b24653b4":"train_dir = '\/kaggle\/input\/fer2013\/train'\nval_dir = '\/kaggle\/input\/fer2013\/test'","0dfaeb19":"num_train = 28709\nnum_val = 7178\nbatch_size = 64\nnum_epoch = 50\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255)\nval_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        train_dir,\n        target_size=(48,48),\n        batch_size=batch_size,\n        color_mode=\"grayscale\",\n        class_mode='categorical')\n\nvalidation_generator = val_datagen.flow_from_directory(\n        val_dir,\n        target_size=(48,48),\n        batch_size=batch_size,\n        color_mode=\"grayscale\",\n        class_mode='categorical')","2e74900b":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(48,48,1)))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(7, activation='softmax'))\n\nprint(model.summary())","cf02263f":"model.compile(loss='categorical_crossentropy',optimizer=Adam(learning_rate=0.0001, decay=1e-6),metrics=['accuracy'])\nmodel_info = model.fit(\n    train_generator,\n    steps_per_epoch=num_train \/\/ batch_size,\n    epochs=num_epoch,\n    validation_data=validation_generator,\n    validation_steps=num_val \/\/ batch_size)\nmodel.save_weights('model.h5')","0d5f1ebc":"model.load_weights('model.h5')\nimg = image.load_img(\"\/kaggle\/input\/fer2013\/train\/fear\/Training_42030519.jpg\",target_size = (48,48),color_mode = \"grayscale\")\nimg = np.array(img)\nplt.imshow(img)\nprint(img.shape)","cb6ec758":"img = np.expand_dims(img,axis = 0) #makes image shape (1,48,48)\nimg = img.reshape(1,48,48,1)\nresult = model.predict(img)\nprint(result)\nresult = list(result[0])\nprint(result)","3e16e5a0":"label_dict = {0:'Angry',1:'Disgust',2:'Fear',3:'Happy',4:'Neutral',5:'Sad',6:'Surprise'}\nimg_index = result.index(max(result))\nprint(label_dict[img_index])\nplt.show()","a3c0736a":"fig, axes = plt.subplots(1,2, figsize=(18, 6))\n\naxes[0].plot(model_info.history['accuracy'])\naxes[0].plot(model_info.history['val_accuracy'])\naxes[0].set_title('Model accuracy')\naxes[0].set_ylabel('Accuracy')\naxes[0].set_xlabel('Epoch')\naxes[0].legend(['Train', 'Validation'], loc='upper left')\n\naxes[1].plot(model_info.history['loss'])\naxes[1].plot(model_info.history['val_loss'])\naxes[1].set_title('Model loss')\naxes[1].set_ylabel('Loss')\naxes[1].set_xlabel('Epoch')\naxes[1].legend(['Train', 'Validation'], loc='upper left')\nplt.show()","b890ca62":"**Fitting the model. Optimizer used is Adam and at a learning_rate of 0.0001**","dd7eefdf":"# **Import Statements**","40c4ba65":"**Prediction Result**","6775ce33":"**Plotting the accuray and loss graph for train and validation data.**","d3093e5d":"# **CNN Model using Keras Library**","61853e87":"**Reshaping and rescaling the images then converting them to greyscale**"}}