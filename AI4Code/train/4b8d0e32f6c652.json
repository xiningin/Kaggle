{"cell_type":{"eeb5dca2":"code","83d9e052":"code","671ed12e":"code","caef5e02":"code","3774e80a":"code","f0a1857a":"code","b105e4f1":"code","e75cce10":"code","a2bf6d78":"code","26c994a2":"code","c94d8b32":"code","97dfb4e5":"code","5b1edf1b":"code","a141a57c":"code","cf5791e2":"code","b99aba15":"code","996aa17b":"code","d19ab3c0":"code","604da533":"code","29f94c9a":"code","c8889463":"code","1b9dbc9c":"code","8b2f3987":"code","3ad1d916":"code","e842fbe7":"code","f7968c1f":"code","f39c9ad6":"code","5d6f2ae0":"code","22368c8e":"code","a4b2fd15":"code","dcf51d0a":"code","624dcf0e":"markdown","63824bb4":"markdown","845e53b6":"markdown","b57a1d60":"markdown","af38d165":"markdown","066bd522":"markdown","eb4f205f":"markdown","5dc1814b":"markdown","777aae8a":"markdown","34dd7b35":"markdown","630e693c":"markdown","63c33aab":"markdown","5e52b96d":"markdown","5ca81a22":"markdown","2a1fe875":"markdown","573f2ac8":"markdown","3006d81b":"markdown","5ea58f84":"markdown","9a621b32":"markdown","571fb343":"markdown","a722ad59":"markdown","b67ae9e2":"markdown","42b3fbde":"markdown","36ef1a57":"markdown","54907e4e":"markdown","603216c1":"markdown","0823492c":"markdown","55721a31":"markdown","4fedd2fc":"markdown","ec171b45":"markdown"},"source":{"eeb5dca2":"import numpy  as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 18})\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","83d9e052":"train_data = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv',index_col=0)\ntest_data  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv', index_col=0)\nsample     = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","671ed12e":"train_data","caef5e02":"train_data.nunique().to_frame()","3774e80a":"test_data.nunique().to_frame()","f0a1857a":"train_data.groupby(\"breath_id\")[\"time_step\"].count().unique().item()","b105e4f1":"test_data.groupby(\"breath_id\")[\"time_step\"].count().unique().item()   ","e75cce10":"train_data.isnull().sum(axis = 0).to_frame()","a2bf6d78":"train_data.time_step.max()","26c994a2":"train_data.query('u_out == 0').time_step.max()","c94d8b32":"breath_one = train_data.query('breath_id == 1').reset_index(drop = True)\nbreath_one","97dfb4e5":"breath_one.nunique().to_frame()","5b1edf1b":"breath_one.plot(x=\"time_step\", y=\"u_in\", kind='line',figsize=(12,3), lw=2, title=\"u_in\");\nbreath_one.plot(x=\"time_step\", y=\"u_out\", kind='line',figsize=(12,3), lw=2, title=\"u_out\");\nbreath_one.plot(x=\"time_step\", y=\"pressure\", kind='line',figsize=(12,3), lw=2, title=\"pressure\");","a141a57c":"train_data.R.value_counts().to_frame()","cf5791e2":"train_data.C.value_counts().to_frame()","b99aba15":"train_data.u_out.value_counts().to_frame()","996aa17b":"train_data.pressure.max()","d19ab3c0":"plt.figure(figsize = (12,5))\nax = sns.distplot(train_data['pressure'], \n             bins=120, \n             kde_kws={\"clip\":(0,40)}, \n             hist_kws={\"range\":(0,40)},\n             color='darkcyan', \n             kde=False);\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of pressures\", size=14)\nax.set(yticklabels=[])\nplt.show();","604da533":"train_data.pressure.median()","29f94c9a":"u_out_is_zero = train_data.query(\"u_out == 0\").reset_index(drop = True)\nplt.figure(figsize = (12,5))\nax = sns.distplot(u_out_is_zero['pressure'], \n             bins=120, \n             kde_kws={\"clip\":(0,50)}, \n             hist_kws={\"range\":(0,50)},\n             color='darkcyan', \n             kde=False);\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of pressures (u_out=0)\", size=14)\nax.set(yticklabels=[])\nplt.show();","c8889463":"u_out_is_zero.pressure.median()","1b9dbc9c":"breath_2 = train_data.query('breath_id == 2').reset_index(drop = True)\nbreath_3 = train_data.query('breath_id == 3').reset_index(drop = True)\nbreath_4 = train_data.query('breath_id == 4').reset_index(drop = True)\nbreath_5 = train_data.query('breath_id == 5').reset_index(drop = True)\nbreath_17 = train_data.query('breath_id == 17').reset_index(drop = True)\nbreath_18 = train_data.query('breath_id == 18').reset_index(drop = True)\nbreath_21 = train_data.query('breath_id == 21').reset_index(drop = True)\nbreath_39 = train_data.query('breath_id == 39').reset_index(drop = True)\n\nfig, axes = plt.subplots(3,3,figsize=(15,15))\nsns.lineplot(data=breath_39, x=\"time_step\", y=\"pressure\", lw=2, ax=axes[0,0])\naxes[0,0].set_title (\"R=5, C=10\", fontsize=18)\naxes[0,0].set(xlabel='')\n#axes[0,0].set(ylim=(0, None))\nsns.lineplot(data=breath_21, x=\"time_step\", y=\"pressure\",  lw=2, ax=axes[0,1])\naxes[0,1].set_title (\"R=20, C=10\", fontsize=18)\naxes[0,1].set(xlabel='')\naxes[0,1].set(ylabel='')\n#axes[0,1].set(ylim=(0, None))\nsns.lineplot(data=breath_18, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[0,2])\naxes[0,2].set_title (\"R=50, C=10\", fontsize=18)\naxes[0,2].set(xlabel='')\naxes[0,2].set(ylabel='')\n#axes[0,2].set(ylim=(0, None))\nsns.lineplot(data=breath_17, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[1,0])\naxes[1,0].set_title (\"R=5, C=20\", fontsize=18)\naxes[1,0].set(xlabel='')\n#axes[1,0].set(ylim=(0, None))\nsns.lineplot(data=breath_2, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[1,1])\naxes[1,1].set_title (\"R=20, C=20\", fontsize=18)\naxes[1,1].set(xlabel='')\naxes[1,1].set(ylabel='')\n#axes[1,1].set(ylim=(0, None))\nsns.lineplot(data=breath_3, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[1,2])\naxes[1,2].set_title (\"R=50, C=20\", fontsize=18)\naxes[1,2].set(xlabel='')\naxes[1,2].set(ylabel='')\n#axes[1,2].set(ylim=(0, None))\nsns.lineplot(data=breath_5, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[2,0])\naxes[2,0].set_title (\"R=5, C=50\", fontsize=18)\n#axes[2,0].set(ylim=(0, None))\nsns.lineplot(data=breath_one, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[2,1])\naxes[2,1].set_title (\"R=20, C=50\", fontsize=18)\naxes[2,1].set(ylabel='')\n#axes[2,1].set(ylim=(0, None))\nsns.lineplot(data=breath_4, x=\"time_step\", y=\"pressure\",  lw=2,ax=axes[2,2])\naxes[2,2].set_title (\"R=50, C=50\", fontsize=18)\naxes[2,2].set(ylabel='')\n#axes[2,2].set(ylim=(0, None))\n\nplt.show();","8b2f3987":"zero_time = train_data.query(\"time_step < 0.000001 & u_in < 0.000001\").reset_index(drop = True)\nzero_time_5_10  = zero_time.query(\"R ==  5 & C == 10\").reset_index(drop = True)\nzero_time_5_20  = zero_time.query(\"R ==  5 & C == 20\").reset_index(drop = True)\nzero_time_5_50  = zero_time.query(\"R ==  5 & C == 50\").reset_index(drop = True)\nzero_time_20_10 = zero_time.query(\"R == 20 & C == 10\").reset_index(drop = True)\nzero_time_20_20 = zero_time.query(\"R == 20 & C == 20\").reset_index(drop = True)\nzero_time_20_50 = zero_time.query(\"R == 20 & C == 50\").reset_index(drop = True)\nzero_time_50_10 = zero_time.query(\"R == 50 & C == 10\").reset_index(drop = True)\nzero_time_50_20 = zero_time.query(\"R == 50 & C == 20\").reset_index(drop = True)\nzero_time_50_50 = zero_time.query(\"R == 50 & C == 50\").reset_index(drop = True)\n\nfig, axes = plt.subplots(9,1,figsize=(12,15))\nsns.violinplot(x=zero_time_5_10[\"pressure\"], linewidth=2, ax=axes[0], color=\"indianred\")\naxes[0].set_title (\"R=5, C=10\", fontsize=14)\naxes[0].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_5_20[\"pressure\"], linewidth=2, ax=axes[1], color=\"firebrick\")\naxes[1].set_title (\"R=5, C=20\", fontsize=14)\naxes[1].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_5_50[\"pressure\"], linewidth=2, ax=axes[2], color=\"darkred\" )\naxes[2].set_title (\"R=5, C=50\", fontsize=14)\naxes[2].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_20_10[\"pressure\"], linewidth=2, ax=axes[3], color=\"greenyellow\")\naxes[3].set_title (\"R=20, C=10\", fontsize=14)\naxes[3].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_20_20[\"pressure\"], linewidth=2, ax=axes[4], color=\"olivedrab\")\naxes[4].set_title (\"R=20, C=20\", fontsize=14)\naxes[4].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_20_50[\"pressure\"], linewidth=2, ax=axes[5], color=\"olive\" )\naxes[5].set_title (\"R=20, C=50\", fontsize=14)\naxes[5].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_50_10[\"pressure\"], linewidth=2, ax=axes[6], color=\"steelblue\")\naxes[6].set_title (\"R=50, C=10\", fontsize=14)\naxes[6].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_50_20[\"pressure\"], linewidth=2, ax=axes[7], color=\"cornflowerblue\")\naxes[7].set_title (\"R=50, C=20\", fontsize=14)\naxes[7].set(xlim=(3, 8))\nsns.violinplot(x=zero_time_50_50[\"pressure\"], linewidth=2, ax=axes[8], color=\"midnightblue\" )\naxes[8].set_title (\"R=50, C=50\", fontsize=14)\naxes[8].set(xlim=(3, 8));","3ad1d916":"zero_time[\"pressure\"].mean()","e842fbe7":"zero_time[zero_time['pressure']==zero_time['pressure'].min()]","f7968c1f":"breath_542 = train_data.query('breath_id == 542').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(12, 4))\nax.plot(breath_542[\"time_step\"],breath_542[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_542[\"time_step\"],breath_542[\"pressure\"], lw=2, label='pressure')\n#ax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nax.set_title(\"breath_id = 542\", fontsize=14)\nplt.show();\n\nbreath_119582 = train_data.query('breath_id == 119582').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(12, 4))\nax.plot(breath_119582[\"time_step\"],breath_119582[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_119582[\"time_step\"],breath_119582[\"pressure\"], lw=2, label='pressure')\n#ax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nax.set_title(\"breath_id = 119582\", fontsize=14)\nplt.show();","f39c9ad6":"train_data['u_in_cumsum'] = (train_data['u_in']).groupby(train_data['breath_id']).cumsum()\ntest_data['u_in_cumsum']  = (test_data['u_in']).groupby(test_data['breath_id']).cumsum()","5d6f2ae0":"breath_928 = train_data.query('breath_id == 928').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nax.plot(breath_928[\"time_step\"],breath_928[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_928[\"time_step\"],breath_928[\"pressure\"], lw=2, label='pressure')\nax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nplt.show();","22368c8e":"train_data['u_in_shifted'] = train_data.groupby('breath_id')['u_in'].shift(2).fillna(method=\"backfill\")\ntest_data['u_in_shifted']  = test_data.groupby('breath_id')['u_in'].shift(2).fillna(method=\"backfill\")","a4b2fd15":"for df in (train_data, test_data):\n    df['u_in_first']  = df.groupby('breath_id')['u_in'].transform('first')\n    df['u_in_mean']   = df.groupby('breath_id')['u_in'].transform('mean')\n    df['u_in_median'] = df.groupby('breath_id')['u_in'].transform('median')\n    df['u_in_last']   = df.groupby('breath_id')['u_in'].transform('last')\n    df['u_in_min']    = df.groupby('breath_id')['u_in'].transform('min')\n    df['u_in_max']    = df.groupby('breath_id')['u_in'].transform('max')","dcf51d0a":"X_train = train_data.drop(['pressure'], axis=1)\ny_train = train_data['pressure']\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble     import HistGradientBoostingRegressor\nregressor  =  HistGradientBoostingRegressor(max_iter=2500,\n     loss=\"least_absolute_deviation\",early_stopping=False)\nregressor.fit(X_train, y_train)\nsample[\"pressure\"] = regressor.predict(test_data)\nsample.to_csv('submission.csv',index=False)","624dcf0e":"The next question is whether we have any missing data or not?","63824bb4":"What is the maximum time that the exploratory solenoid valve is set to 0?","845e53b6":"with a median value of ","b57a1d60":"Let us take a quick look at the training data","af38d165":"# All breaths\nWhat values do we have for `R`, which represents how restricted the airway is (in cmH<sub>2<\/sub>O\/L\/S).","066bd522":"now for the values of `C`, the lung attribute indicating how compliant the lung is (in mL\/cmH<sub>2<\/sub>O)","eb4f205f":"The valve seems to be activated after 1 seccond.\n# The first breath\n\nLet us select `breath_id=1` and take a look at the features","5dc1814b":"Both of these breaths have a somewhat unusual aspect","777aae8a":"and the test data","34dd7b35":"# Positive end-expiratory pressure (PEEP)\nIt is worth noting that even before the experiments start (*i.e.* the `time_step=0` and `u_in=0`) there is a positive pressure in the airway. The system is maintained above atmospheric pressure to promote gas exchange to the lungs.","630e693c":"# A simple submission","63c33aab":"Note that all of the instances of negative pressure occur only in the `R=50` (high restriction) with `C=10` (thick latex) systems.\n# Simple feature engineering\nWe shall add a new feature, which is the [cumulative sum](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.cumsum.html) of the `u_in` feature:","5e52b96d":"How many unique values do we have for each feature?","5ca81a22":"Wonderful, it seems not!\n\n# Time\nIn this data the unit of time is seconds. How long does longest breath last?","2a1fe875":"Note that not all cycles start with `u_in=0`, and a cycle can even start with the inspiratory solenoid valve set to the maximum value of 100.\n# Negative pressure\nThe minimum value for the pressure where `u_in=0` at `time_step=0` is","573f2ac8":"and the test data","3006d81b":"The longest breath is just under 3 seconds.","5ea58f84":"and for `u_out`, the control input for the exploratory solenoid valve. Either 0 or 1.","9a621b32":"It can be observed that there is a lag between `u_in` and the resulting `pressure` of around 0.1 seconds. I am sure it is with this in mind that [Chun Fu](https:\/\/www.kaggle.com\/patrick0302) wrote his excellent notebook [\"*Add lag u_in as new feat*\"](https:\/\/www.kaggle.com\/patrick0302\/add-lag-u-in-as-new-feat\/notebook), which introduces a new *shifted* `u_in` feature. Here we shall use a shift of 2 rather than his original shift of 1, which is now more in line with the delay seen:","571fb343":"The average value of PEEP at the beginning of each cycle is","a722ad59":"We can see that we have over 6 million rows of training data, corresponding to 75,450 breaths, and 50,300 breaths in the test dataset. On average we have 80 time steps of data per breath. Let us check this for the training data","b67ae9e2":"Let us see how many unique values there are in each of these columns","42b3fbde":"Note however that in this competition the expiratory phase is not scored, so for practical purposes we are only really interested in the pressure for `u_out=0`, *i.e.* the first second of the experiments:","36ef1a57":"### Descriptive statistics of `u_in`\nAgain inspired by the work of Chun Fu, this time in his notebook [\"*Add last u_in as new feat*\"](https:\/\/www.kaggle.com\/patrick0302\/add-last-u-in-as-new-feat\/) it is found, at least with gradient boosting type models, that providing the estimator with some descriptive statistics regarding `u_in` for the cycle in question seems to help in improving the model. Here are a number of examples, some of which may (or may not) be useful:","54907e4e":"with a median value of ","603216c1":"The thinking behind this feature is that it is reasonable to assume the pressure in the lungs is approximately proportional to how much air has actually been pumped into them. It goes almost without saying that this feature is not useful when breathing out, but given that the expiratory phase is not scored in this competition this should not be too much of a problem.\n\n### Shifting `u_in`\nLet us take a look at the first second of `breath_id=928`, which is an excellent example of an oscillatory experiment","0823492c":"We have nine combinations of experiments; `C` can be 10, 20 or 50, and `R` can be 5, 20 or 50. Lets take a quick look at an example of each","55721a31":"which corresponds to around 6,350 Pa.\n\nThe pressures in the training data have the following distribution","4fedd2fc":"there is only one value for `R`, one value for `C` for the `breath_id`. \n\nLet us visualize `u_in`, `u_out` and `pressure` with respect to the `time_step`:","ec171b45":"# Pressure\nAnd now we shall look at the `pressure`. The pressure is measured in cmH<sub>2<\/sub>0, where 1 cmH<sub>2<\/sub>0 is roughly equal to 98 Pascals. The maximum value of the pressure is"}}