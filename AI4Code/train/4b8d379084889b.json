{"cell_type":{"60fe856d":"code","92245429":"code","a5a9abaa":"code","131c7962":"code","4c0431b1":"code","b942c2e7":"code","2644a227":"code","5efbc17a":"code","582c0e8b":"code","a0f8b0e8":"code","f42bda4e":"code","c41b7091":"code","9e27fbab":"code","c903ff09":"code","95cd03ca":"code","4dd30554":"code","572fd3a5":"code","5fe3c08c":"code","1133ba2e":"code","b4ca45de":"code","d373cb3c":"code","baa1837b":"markdown","70ea80a4":"markdown","6eb556fd":"markdown","8eff5056":"markdown","e5eab495":"markdown","6695fdb1":"markdown","f4b86127":"markdown","f12906d8":"markdown","58b960a3":"markdown","d9b73786":"markdown"},"source":{"60fe856d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","92245429":"#data\ndf_train = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/liverpool-ion-switching\/test.csv\")","a5a9abaa":"#useful functions\ndef basic_info(data):\n    print(\"----------Top-5- Record----------\")\n    print(data.head(5))\n    print(\"----------Bottom-5- Record----------\")\n    print(data.tail(5))\n    print(\"-----------Information-----------\")\n    print(data.info())\n    print(\"-----------Data Types-----------\")\n    print(data.dtypes)\n    print(\"----------Missing value-----------\")\n    print(data.isnull().sum())\n    print(\"----------Null value-----------\")\n    print(data.isna().sum())\n    print(\"----------Shape of Data----------\")\n    print(data.shape)","131c7962":"basic_info(df_train)","4c0431b1":"basic_info(df_test)","b942c2e7":"#assign batch_no for every row\ndf_train['batch'] = [i\/\/500000 for i in df_train.index]\ndf_test['batch'] = [i\/\/500000 for i in df_test.index]","2644a227":"print(\"unique batch no in train data:\", df_train.batch.unique()) \nprint(\"unique batch no in test data:\",df_test.batch.unique())\nprint(\"unique openchannels in train data:\",df_train.open_channels.unique())","5efbc17a":"#lineplot for every train data\n\nfig = plt.figure(figsize=(21, 7))\n\nax2 = fig.add_subplot(3,1,1)\nplt.plot(df_train.open_channels)\nplt.title(\"Lineplot of open_channels\",fontsize = 10,color='red')\n\nax1 = fig.add_subplot(3,1,2)\nplt.plot(df_train.signal)\nplt.title(\"Lineplot of signal\",fontsize = 10,color='black')\n\nax3 = fig.add_subplot(3,1,3)\nplt.plot(df_test.signal)\nplt.title(\"Lineplot of signal in test data\",fontsize = 10,color='green')\n\nplt.show() ","582c0e8b":"df_train[\"time_last\"] = [round(x % 50, 4)  for x in df_train.time]\ndf_test[\"time_last\"] = [round(x % 50, 4)  for x in df_test.time]","a0f8b0e8":"#plot target distribution for every batch\n\nbatch_count = len(df_train.batch.unique())\n\nfig = plt.figure(figsize=(20, 30))\ni = 1\nfor b in df_train.batch.unique():\n    ax = fig.add_subplot(batch_count\/2,2,i)\n    sns.countplot(x='open_channels', data=df_train[df_train.batch==b], ax=ax)\n    i += 1\n    plt.title(\"batch=%s\" % b,fontsize = 10,color='black')\n    \nplt.show()  ","f42bda4e":"#the relation between signal and open channels\n\nbatch_count = len(df_train.batch.unique())\n\nfig = plt.figure(figsize=(20, 30))\ni = 1\nfor b in df_train.batch.unique():\n    ax = fig.add_subplot(batch_count\/2,2,i)\n    sns.scatterplot(y='open_channels', x='signal', data=df_train[df_train.batch==b], ax=ax)\n    i += 1\n    plt.title(\"batch=%s\" % b,fontsize = 10,color='black')\n    \nplt.show() ","c41b7091":"#scatter plot for total dataset\nfig = plt.figure(figsize=(12,6))\nax = fig.add_subplot(111)\nplt.scatter(y='open_channels', x='signal', data=df_train)\nplt.show()","9e27fbab":"#distplot of signal in each batch\nbatch_count = len(df_train.batch.unique())\n\nfig = plt.figure(figsize=(20, 50))\ni = 1\nfor b in df_train.batch.unique():\n    ax1 = fig.add_subplot(batch_count,2,i)\n    sns.distplot(df_train[df_train.batch==b].signal, ax=ax1)\n    plt.title(\"batch=%s\" % b,fontsize = 10,color='black')\n    \n    ax2 = fig.add_subplot(batch_count,2,i+1)\n    sns.distplot(df_train[df_train.batch==b].open_channels, ax=ax2, kde=False)\n    plt.title(\"batch=%s\" % b,fontsize = 10,color='red')\n    i += 2\n    \nplt.show() ","c903ff09":"#distplot of signal by open channels\n\nopenC_count = len(df_train.open_channels.unique()) + 1\n\nfig = plt.figure(figsize=(20, 30))\ni = 1\nfor o in np.sort(df_train.open_channels.unique()):\n    ax = fig.add_subplot(openC_count\/2,2,i)\n    sns.distplot(df_train[df_train.open_channels==o].signal, ax=ax)\n    i += 1\n    plt.title(\"open channels=%s\" % o,fontsize = 10,color='red')\n    \nplt.show() ","95cd03ca":"#boxplot of signal by open channels\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(1,1,1)\nsns.boxplot(y=df_train.signal, x=df_train.open_channels, ax=ax,palette=\"Blues\")\n\nplt.title(\"signal vs. open channels\",fontsize = 10,color='red')\nplt.show() ","4dd30554":"#distplot of signal in test data\nfig = plt.figure(figsize=(12, 6))\nax = fig.add_subplot(1,1,1)\nsns.distplot(df_test.signal, ax=ax,color=\"red\")\nsns.distplot(df_train.signal, ax=ax, color = \"blue\")\n\nplt.title(\"distribution of signal in test&train data\",fontsize = 10,color='red')\nplt.show() ","572fd3a5":"x_columns = [\"time_last\",\"signal\"]\nX = df_train[x_columns]\ny = df_train['open_channels']\n\nx_train, x_test, y_train, y_test = train_test_split(X, y)","5fe3c08c":"#model fitting\nmodel = DecisionTreeClassifier()\nmodel.fit(x_train, y_train)","1133ba2e":"#validation\ny_train_pred = model.predict(x_train)\ny_test_pred = model.predict(x_test)\n\nacc_train = model.score(x_train, y_train)\nacc_test = model.score(x_test, y_test)\n\nprint(\"accuracy for train data is %.2f\" % acc_train)\nprint(\"accuracy for test data is %.2f\" % acc_test)","b4ca45de":"submission_csv = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")","d373cb3c":"X_test = df_test[x_columns]\n\nsubmission_csv[\"open_channels\"] = model.predict(X_test).astype(int)\nsubmission_csv['time'] = [format(submission_csv.time.values[x], '.4f') for x in range(2000000)]\nsubmission_csv.to_csv(\"submission.csv\", index=False)","baa1837b":"# 1. Basic information of data","70ea80a4":"works for train data, but not for test","6eb556fd":"# 3. model building","8eff5056":"seems like slight positive correlation between signal and open channels","e5eab495":"# 2. Data exploring","6695fdb1":"IMPORTANT: While the time series appears continuous, the data is from discrete batches of 50 seconds long 10 kHz samples (500,000 rows per batch). In other words, the data from 0.0001 - 50.0000 is a different batch than 50.0001 - 100.0000, and thus discontinuous between 50.0000 and 50.0001.","f4b86127":"positive correlation between signal and open channels become obvious","f12906d8":"# 4. Generate submission file","58b960a3":"nothing interesting","d9b73786":"slight correlation with time"}}