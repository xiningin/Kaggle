{"cell_type":{"a624c47b":"code","f690fabe":"code","b205a961":"code","95cfade1":"code","a818c019":"code","4f143518":"code","447e3728":"code","5ffb72eb":"code","b3c12679":"code","c0a9f789":"code","31de5417":"code","6258d2e0":"code","81620ead":"code","9106ebf0":"code","de0e248f":"code","e683e318":"code","96b92b55":"code","dad39f4e":"code","5b2c00a3":"code","71670061":"code","84e7f2f8":"code","013c8eba":"code","4e8a667e":"code","fdd27d13":"code","30dd3d87":"code","c9165cc8":"code","69760b0b":"code","8a69027a":"code","a74370a8":"code","e072fff7":"code","b73fc39b":"markdown","10b39314":"markdown","08feff7e":"markdown","85f406f5":"markdown","ebb6871c":"markdown","8fabce10":"markdown","5e4d0a80":"markdown","e305ac0b":"markdown","bab896bf":"markdown","14330aab":"markdown"},"source":{"a624c47b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f690fabe":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","b205a961":"dataset_path = '\/kaggle\/input\/titanic\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\".format(df.shape))","95cfade1":"df.head(10)","a818c019":"df.info()","4f143518":"df['Age'] = df['Age'].fillna(df['Age'].median())\ndf['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])","447e3728":"df.info()","5ffb72eb":"df.drop(columns=['Cabin'], inplace=True)\ndf.shape","b3c12679":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='Pclass', hue='Survived')","c0a9f789":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='Sex', hue='Survived')","31de5417":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='Age', hue='Survived', kde=True)","6258d2e0":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='SibSp', hue='Survived', kde=True)","81620ead":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='Parch', hue='Survived', kde=True,ax =ax)","9106ebf0":"fig, ax = plt.subplots()\n# the size of A4 paper\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(data=df, x='Fare', hue='Survived', kde=True, ax=ax)","de0e248f":"sns.boxplot(data=df, y='Fare')","e683e318":"sns.pairplot(df, hue=\"Survived\")","96b92b55":"df.sort_values(by=['Fare'], ascending=False)","dad39f4e":"df.nunique()","5b2c00a3":"df.info()","71670061":"from sklearn.preprocessing import LabelEncoder\n#transforming object to category to perform label encoding\ndf[['Sex','Embarked']] = df[['Sex','Embarked']].astype('category')\n\n#label encoding using sklearn package\nlabelencoder = LabelEncoder()\ndf['Sex'] = labelencoder.fit_transform(df['Sex'])\ndf['Embarked']= labelencoder.fit_transform(df['Embarked'])\n\n#Adding 1 for Embarked feature of label encoding\ndf['Embarked'] += 1\ndf[['Sex', 'Embarked']]","84e7f2f8":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\n\nX_train = train_df.drop(columns=['PassengerId', 'Survived', 'Name', 'Ticket'])\ny_train = train_df['Survived']\n\nX_val = val_df.drop(columns=['PassengerId', 'Survived', 'Name', 'Ticket'])\ny_val = val_df['Survived']","013c8eba":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\npred_val = model.predict(X_val)\n\nprint(\"Accuracy score is: {}\".format(accuracy_score(y_val, pred_val)))","4e8a667e":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df","fdd27d13":"test_df.info()","30dd3d87":"test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())\ntest_df['Embarked'] = test_df['Embarked'].fillna(test_df['Embarked'].mode()[0])\ntest_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())\ntest_df.drop(columns=['Cabin'], inplace=True)\nprint(\"Test dataset shape: {}\".format(test_df.shape))","c9165cc8":"#transforming object to category to perform label encoding\ntest_df[['Sex','Embarked']] = test_df[['Sex','Embarked']].astype('category')\n\n#label encoding using sklearn package\nlabelencoder = LabelEncoder()\ntest_df['Sex'] = labelencoder.fit_transform(test_df['Sex'])\ntest_df['Embarked']= labelencoder.fit_transform(test_df['Embarked'])\n\n#Adding 1 for Embarked feature of label encoding\ntest_df['Embarked'] += 1\ntest_df[['Sex', 'Embarked']]","69760b0b":"test_df.head(5)","8a69027a":"test_df.isnull().sum()","a74370a8":"X_test = test_df.drop(columns=['PassengerId', 'Name', 'Ticket'])\n\ny_test_predicted = model.predict(X_test)\n\ntest_df['Survived'] = y_test_predicted\n\ntest_df","e072fff7":"test_df[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)","b73fc39b":"**Evaluating Over test data**","10b39314":"**Splitting Data into train and validation**","08feff7e":"**Predicting 'Survived' column in the test data**","85f406f5":"**Training with logisticRegression Model**","ebb6871c":"**Visualizing some features**","8fabce10":"**Read train data**","5e4d0a80":"Remove **Cabin** feature because of the nans values","e305ac0b":"Preprocessing test data","bab896bf":"**Import Packages**","14330aab":"**Using Label Encoding for Embarked feature**"}}