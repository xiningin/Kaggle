{"cell_type":{"adf6c6b9":"code","fb5274ee":"code","28fb3371":"code","f4ba1971":"code","5cd0aa9e":"code","f010cfa8":"code","59f78d12":"code","bde270c3":"code","8ed43908":"code","7a316a44":"code","dc5b8ab0":"code","9861305c":"code","725f62e7":"code","a390d723":"code","6fe8df1d":"markdown"},"source":{"adf6c6b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fb5274ee":"df=pd.read_csv('\/kaggle\/input\/california-housing-prices\/housing.csv')\ndf.head()","28fb3371":"df.corr(method='pearson')","f4ba1971":"X=df.drop(['longitude','total_bedrooms','population','median_house_value'],axis=1)","5cd0aa9e":"X.columns.tolist()","f010cfa8":"X.isnull().sum()","59f78d12":"y=df['median_house_value']","bde270c3":"X=pd.get_dummies(X)","8ed43908":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.40)","7a316a44":"from sklearn.linear_model import LinearRegression\ny=LinearRegression()\ny.fit(X_train,y_train)\ny.score(X_test,y_test)","dc5b8ab0":"from sklearn.tree import DecisionTreeRegressor\nh=DecisionTreeRegressor(max_depth=3)\nh.fit(X_train,y_train)\nh.score(X_test,y_test)","9861305c":"from sklearn.ensemble import RandomForestRegressor\nl=RandomForestRegressor()\nl.fit(X_train,y_train)\nl.score(X_test,y_test)","725f62e7":"from sklearn.linear_model import SGDRegressor\nqa=SGDRegressor()\nqa.fit(X_train,y_train)\nqa.score(X_test,y_test)\n","a390d723":"from sklearn.ensemble import ExtraTreesRegressor\nwz=ExtraTreesRegressor()\nwz.fit(X_train,y_train)\nwz.score(X_test,y_test)","6fe8df1d":"### "}}