{"cell_type":{"867f9c3f":"code","a8d5faad":"code","f0ea3347":"code","50098db3":"code","70a5e9a3":"code","0fc568b1":"code","ecfc164f":"code","0e566aa0":"code","a2ae74ed":"code","88b87e2e":"code","c6e359ec":"code","c75f562a":"code","aa0b920b":"code","455386b5":"code","3be23fa0":"code","939d5e56":"markdown","56bbf4b2":"markdown","7b22acca":"markdown","910a3719":"markdown","ef481881":"markdown","acc237ea":"markdown","a33c984c":"markdown","880a421f":"markdown","6ce14e66":"markdown","b7bff533":"markdown","af845101":"markdown","9319b176":"markdown"},"source":{"867f9c3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8d5faad":"train_df = pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/train.csv')\n\nprint(train_df.columns)\nprint(train_df.info())\ntrain_df.head()","f0ea3347":"print(train_df['POSTED_BY'].unique())\nprint(train_df['BHK_OR_RK'].unique())\n\nprint(\"--- ---\\n\\nRecords for POSTED_BY: \")\nprint(train_df['POSTED_BY'].value_counts())\n\nprint(\"--- ---\\n\\nRecords for BHK_OR_RK: \")\nprint(train_df['BHK_OR_RK'].value_counts())\n\nprint(\"--- ---\\n\\nRecords for READY_TO_MOVE: \")\nprint(train_df['READY_TO_MOVE'].value_counts())\n\n\nprint(\"--- ---\\n\\nRecords for RESALE: \")\nprint(train_df['RESALE'].value_counts())\n\nprint(\"--- ---\\n\\nRecords for UNDER_CONSTRUCTION: \")\nprint(train_df['UNDER_CONSTRUCTION'].value_counts())\n\nprint(\"--- ---\\n\\nRecords for RERA: \")\nprint(train_df['RERA'].value_counts())\n\nprint(\"--- ---\\n\\nRecords for BHK_NO.: \")\nprint(train_df['BHK_NO.'].value_counts())","50098db3":"tier_1_cities = ['Ahmedabad', 'Bangalore', 'Chennai', 'Delhi', 'Hyderabad', 'Kolkata', 'Mumbai', 'Pune']\ntier_2_cities = ['Agra', 'Ajmer', 'Aligarh', 'Amravati', 'Amritsar', 'Asansol', 'Aurangabad', 'Bareilly', 'Belgaum', 'Bhavnagar', 'Bhiwandi', \n                 'Bhopal', 'Bhubaneswar', 'Bikaner', 'Bilaspur', 'Bokaro Steel City', 'Chandigarh', 'Coimbatore', 'Cuttack', 'Dehradun', 'Dhanbad',\n                 'Bhilai', 'Durgapur', 'Dindigul', 'Erode', 'Faridabad', 'Firozabad', 'Ghaziabad', 'Gorakhpur', 'Gulbarga', 'Guntur', 'Gwalior', \n                 'Gurgaon', 'Guwahati', 'Hamirpur', 'Hubli\u2013Dharwad', 'Indore', 'Jabalpur', 'Jaipur', 'Jalandhar', 'Jammu', 'Jamnagar', 'Jamshedpur', \n                 'Jhansi', 'Jodhpur', 'Kakinada', 'Kannur', 'Kanpur', 'Karnal', 'Kochi', 'Kolhapur', 'Kollam', 'Kozhikode', 'Kurnool', 'Ludhiana', \n                 'Lucknow', 'Madurai', 'Malappuram', 'Mathura', 'Mangalore', 'Meerut', 'Moradabad', 'Mysore', 'Nagpur', 'Nanded', 'Nashik', 'Nellore',\n                 'Noida', 'Patna', 'Pondicherry', 'Purulia', 'Prayagraj', 'Raipur', 'Rajkot', 'Rajahmundry', 'Ranchi', 'Rourkela', 'Salem', 'Sangli', \n                 'Shimla', 'Siliguri', 'Solapur', 'Srinagar', 'Surat', 'Thanjavur', 'Thiruvananthapuram', 'Thrissur', 'Tiruchirappalli', 'Tirunelveli', \n                 'Ujjain', 'Bijapur', 'Vadodara', 'Varanasi', 'Vasai-Virar City', 'Vijayawada', 'Visakhapatnam', 'Vellore', 'Warangal']","70a5e9a3":"train_df['city'] = train_df['ADDRESS'].str.split(\",\").str[-1]\ntrain_df.head()","0fc568b1":"train_df.groupby(['city'])['ADDRESS'].count().reset_index(name= 'count').sort_values(['count'], ascending=False).head(10)","ecfc164f":"def check_city_tier(row, tier_val):\n    if tier_val == 1:\n        if row['city'] in tier_1_cities:\n            return 1\n    elif tier_val == 2:\n        if row['city'] in tier_2_cities:\n            return 1\n    elif tier_val == 3:\n        if row['city'] not in tier_1_cities and row['city'] not in tier_2_cities:\n            return 1\n    return 0\n\ntrain_df['tier_1_city'] = train_df.apply(check_city_tier, args=([1]), axis=1)\ntrain_df['tier_2_city'] = train_df.apply(check_city_tier, args=([2]), axis=1)\ntrain_df['tier_other_cities'] = train_df.apply(check_city_tier, args=([3]), axis=1)\n\ntrain_df","0e566aa0":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\ntransformer = ColumnTransformer(transformers=[(\"posted_by_transform\", OneHotEncoder(), ['POSTED_BY'])], remainder='passthrough')\n\ntrain_df_tranformed = pd.DataFrame(transformer.fit_transform(train_df))\n\n# Set Column names in for the transformed Dataframe\ntrain_df_tranformed.columns = ['POSTED_BY_builder', 'POSTED_BY_dealer', 'POSTED_BY_Owner','UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'SQUARE_FT', \n                               'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE', 'LATITUDE', 'TARGET(PRICE_IN_LACS)', 'city', 'tier_1_city', 'tier_2_city', \n                               'tier_other_cities']\n\ntrain_df_tranformed","a2ae74ed":"selected_features = ['POSTED_BY_builder', 'POSTED_BY_dealer', 'POSTED_BY_Owner','UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.',\n       'SQUARE_FT', 'READY_TO_MOVE', 'RESALE', 'TARGET(PRICE_IN_LACS)', 'tier_1_city',\n       'tier_2_city', 'tier_other_cities']\n\n#selected_features = ['BHK_NO.', 'RESALE', 'SQUARE_FT', 'TARGET(PRICE_IN_LACS)']\n\ndf_features_selected = train_df_tranformed[selected_features]\n\nfor feature in selected_features:\n    df_features_selected[feature] =  pd.to_numeric(df_features_selected[feature])\ndf_features_selected","88b87e2e":"from sklearn.model_selection import train_test_split\n\n#train, test = train_test_split(df_features_selected,test_size=0.20, random_state=0)\ntrain, test = train_test_split(df_features_selected,test_size=0.20, random_state=0, stratify=df_features_selected[['READY_TO_MOVE', 'RESALE', 'UNDER_CONSTRUCTION', 'RERA']])\n\nX_train = train[train.columns.difference(['TARGET(PRICE_IN_LACS)'])]\ny_train = train['TARGET(PRICE_IN_LACS)']\n\nX_test = test[test.columns.difference(['TARGET(PRICE_IN_LACS)'])]\ny_test = test['TARGET(PRICE_IN_LACS)']\n\nprint(X_train.shape)\nprint(X_test.shape)","c6e359ec":"# Linear Regression\n\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg_model = LinearRegression()\n\nlin_reg_model.fit(X_train, y_train)\n\nprint('KNN Regressor: ', lin_reg_model.score(X_test, y_test))","c75f562a":"# KNN Regressor\n\nfrom sklearn.neighbors import KNeighborsRegressor\n\nknn_reg_model = KNeighborsRegressor(n_neighbors=5)\n\nknn_reg_model.fit(X_train, y_train)\n\nprint('KNN Regressor: ', knn_reg_model.score(X_test, y_test))","aa0b920b":"# Random Forest\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n\nrf_model.fit(X_train, y_train)\n\npreds = rf_model.predict(X_test)\n\nprint('Random Forest: ', r2_score(y_test, preds))","455386b5":"# XG Boost\n\nfrom xgboost import XGBRegressor\n\nxgboost_model = XGBRegressor(n_estimators=1000, learning_rate=0.1, random_state=42)\n\nxgboost_model.fit(X_train, y_train)\n\npreds = xgboost_model.predict(X_test)\n\nprint('XG Boost: ', r2_score(y_test, preds))","3be23fa0":"test_df = pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/test.csv')\n\n# Feature Engineering\n# 1. Derive city tier feature\ntest_df['city'] = test_df['ADDRESS'].str.split(\",\").str[-1]\ntest_df['tier_1_city'] = test_df.apply(check_city_tier, args=([1]), axis=1)\ntest_df['tier_2_city'] = test_df.apply(check_city_tier, args=([2]), axis=1)\ntest_df['tier_other_cities'] = test_df.apply(check_city_tier, args=([3]), axis=1)\n\n# 2. One-hot encoding for POSTED_BY\ntest_df_tranformed = pd.DataFrame(transformer.fit_transform(test_df))\n\n# Set Column names in for the transformed Dataframe\ntest_df_tranformed.columns = ['POSTED_BY_builder', 'POSTED_BY_dealer', 'POSTED_BY_Owner','UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'BHK_OR_RK', 'SQUARE_FT', \n                               'READY_TO_MOVE', 'RESALE', 'ADDRESS', 'LONGITUDE', 'LATITUDE', 'city', 'tier_1_city', 'tier_2_city', \n                               'tier_other_cities']\n\n# Making Prediction\n# Using the trained XG Boost model\nselected_features = ['BHK_NO.', 'POSTED_BY_Owner', 'POSTED_BY_builder', 'POSTED_BY_dealer',\n       'READY_TO_MOVE', 'RERA', 'RESALE', 'SQUARE_FT', 'UNDER_CONSTRUCTION',\n       'tier_1_city', 'tier_2_city', 'tier_other_cities']\n\nX_test= test_df_tranformed[selected_features]\nfor feature in selected_features:\n    X_test[feature] =  pd.to_numeric(X_test[feature])\n\ndf_test_output = xgboost_model.predict(X_test)\n\n# Save to submission.csv file\ndf_output = pd.DataFrame({'Id': X_test.index, 'PredictedSalePrice': df_test_output})\ndf_output.to_csv('submission.csv', index=False)\ndf_output.head()","939d5e56":"### **Feature Engineering**\n\n> 1. New City feature derived from Address. City will fall in three category features\n> 2. One-hot encoding for category feature POSTED_BY \n","56bbf4b2":"---","7b22acca":"**2. Posted_by Feature**\n* One-hot encoding of posted_by category feature","910a3719":"### Prediction for Test dataset - Version 1","ef481881":"**1. City Feature**\n* From address columns extract the city name.\n* Then based on city name create three new features using one-hot-encoding whether the city falls under:\n     * tier 1 city\n     * tier 2 city\n     * all other cities\n     \n**Reference:** https:\/\/en.wikipedia.org\/wiki\/Classification_of_Indian_cities","acc237ea":"### **EDA of the fetures**\n\n> Observation: BHK_OR_RK and POSTED_BY are categorical variables\n\n> BHK_OR_RK: \n>> We dont have enough training examples of the value 'RK'. So ignoring this categorical feature. So SQUARE_FT can be used to capture the information about the size of flat. For 'RK' the SQUARE_FT is less compared to 'BHK'\n","a33c984c":"> Observation: No missing values are in the dataset","880a421f":"> The features POSTED_BY, RESALE, RERA are under represented in given dataset. So while doing train_test_split stratification used while spliting to have equal distribution.\n","6ce14e66":"### **Explore Models - VERSION 1**","b7bff533":"---","af845101":"---","9319b176":"---"}}