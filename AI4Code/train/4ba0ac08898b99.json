{"cell_type":{"37005c0b":"code","8b5d9af0":"code","5058040f":"code","6c462d97":"code","1f875283":"code","a0ab7743":"code","5e22ae0a":"code","7520631c":"code","41eb6b75":"code","2c7e9911":"code","fb553033":"markdown","78f84ecc":"markdown","9781f95b":"markdown","bc23b7fe":"markdown","334db7c8":"markdown","8caeb717":"markdown"},"source":{"37005c0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b5d9af0":"pip install sklearn-genetic","5058040f":"from genetic_selection import GeneticSelectionCV\n","6c462d97":"path='\/kaggle\/input\/tabular-playground-series-oct-2021\/'\ndf_training = pd.read_csv(path+'train.csv', nrows=10000)","1f875283":"df_training.head()","a0ab7743":"for column in df_training.columns:\n    if df_training[column].dtype == \"float64\":\n        df_training[column]=pd.to_numeric(df_training[column], downcast=\"float\")\n    if df_training[column].dtype == \"int64\":\n        df_training[column]=pd.to_numeric(df_training[column], downcast=\"integer\")","5e22ae0a":"df_training.head()","7520631c":"X = df_training.drop('target', axis=1).copy()\nX.head()","41eb6b75":"y = df_training['target'].copy()\ny.head()","2c7e9911":"#estimator = DecisionTreeClassifier()\nestimator = RandomForestClassifier(max_depth=6, random_state=0)\nmodel = GeneticSelectionCV(\n    estimator, cv=5, verbose=0,\n    scoring=\"accuracy\", max_features=10,\n    n_population=100, crossover_proba=0.5,\n    mutation_proba=0.2, n_generations=50,\n    crossover_independent_proba=0.5,\n    mutation_independent_proba=0.04,\n    tournament_size=3, n_gen_no_change=10,\n    caching=True, n_jobs=-1)\nmodel = model.fit(X, y)\nprint('Features:', X.columns[model.support_])","fb553033":"**This is basic exploration, you can work around to identify more features**","78f84ecc":"**Loading Datasets**","9781f95b":"**Dividing into Features and Class**","bc23b7fe":"**Memory Reduction**","334db7c8":"**Feature Selection and Modeling**","8caeb717":"**Installing GeneticSelection**"}}