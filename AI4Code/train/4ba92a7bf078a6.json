{"cell_type":{"c41a7d32":"code","d8e00f3b":"code","198e52e5":"code","a26acccf":"code","deddfe64":"code","58676317":"code","decc4ff4":"code","a44302ff":"code","08e368f2":"code","67af9dc1":"code","ec575ec3":"code","64c685e6":"code","88716ca5":"markdown","bd258eb0":"markdown","6938f444":"markdown","75684609":"markdown","bf26bf95":"markdown","eda8d271":"markdown","f846df7a":"markdown","b38ee7c3":"markdown","99826935":"markdown"},"source":{"c41a7d32":"from typing import List, Dict, Tuple\nimport csv\nimport os\nfrom sklearn.tree import *\nfrom sklearn.ensemble import *\nprint('Available files:')\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d8e00f3b":"def collect_data(\n        filereader: List[List[str]], \n        overview: bool = False,\n        main_ration: float = 0.8\n    ) -> dict:\n    train_data: List[List[int]] = []\n    test_data: List[List[int]] = []\n    train_data_answers: List[str] = []\n    test_data_answers: List[str] = []\n    all_data_dict: Dict[str, List[List[int]]] = {}\n    rows_len: int = len(filereader) - 1\n    print('file size: %d' % rows_len)\n    print('collect data:')\n    i = 0\n    for row in filereader:\n        i += 1\n        if i % (rows_len\/10) == 0:\n            print(str((i \/ rows_len) * 100)+'%')\n        if i == 1:\n            continue\n        tmp_row = []\n        for j in range(len(row)):\n            # without label\n            if j == 0:\n                continue\n            value: int = int(row[j])\n            tmp_row.append(value)\n\n        if not row[0] in all_data_dict.keys():\n            all_data_dict[row[0]] = []\n        all_data_dict[row[0]].append(tmp_row)\n\n    del filereader\n    l: int\n    all_data_size: int = 0\n    if overview == True:\n        for k in all_data_dict.keys():\n            l = len(all_data_dict[k])\n            print('%d items with \"%s\" label' % (l, k))\n            all_data_size += l\n        print('Data size: %d' % all_data_size)\n\n    # 80-30 %% by default\n    for k in all_data_dict.keys():\n        l = len(all_data_dict[k])\n        for i in range(l):\n            d_row: List[int] = all_data_dict[k][i]\n            if i < l * main_ration:\n                train_data.append(d_row)\n                train_data_answers.append(k)\n            else:\n                test_data.append(d_row)\n                test_data_answers.append(k)\n\n    del all_data_size\n    return {\n        'train_data': train_data,\n        'train_data_answers': train_data_answers,\n        'test_data': test_data,\n        'test_data_answers': test_data_answers\n    }","198e52e5":"csvfile = open('..\/input\/train.csv', newline='')\nfilereader = list(csv.reader(csvfile, delimiter=',', quotechar='\"'))\ncollect_dict = collect_data(filereader, overview=True)\ntrain_data = collect_dict['train_data']\ntrain_data_answers = collect_dict['train_data_answers']\ntest_data = collect_dict['test_data']\ntest_data_answers = collect_dict['test_data_answers']\n\nprint('We have %s train samples' % str(len(train_data)))\nprint('We have %s test samples' % str(len(test_data)))\n\nprint('end')","a26acccf":"# the function for experiment\ndef perform(classifier,\n            train_data,\n            train_data_answers,\n            test_data,\n            test_data_answers) -> None:\n    string = ''\n    string += classifier.__class__.__name__\n\n    # train\n    classifier.fit(train_data, train_data_answers)\n\n    # score\n    score: float = classifier.score(test_data, test_data_answers)\n    score = round(score * 100, 1)\n    string += ' has score: ' + str(score) + '%'\n    print(string)\n    return None","deddfe64":"print('Results of RandomForestClassifier():')\nperform(\n    RandomForestClassifier(),\n    train_data,\n    train_data_answers,\n    test_data,\n    test_data_answers\n)","58676317":"print('Results of BaggingClassifier():')\nperform(\n    BaggingClassifier(),\n    train_data,\n    train_data_answers,\n    test_data,\n    test_data_answers\n)","decc4ff4":"print('Results of ExtraTreesClassifier():')\nperform(\n    ExtraTreesClassifier(),\n    train_data,\n    train_data_answers,\n    test_data,\n    test_data_answers\n)","a44302ff":"import matplotlib.pyplot as plt\n\ndef row_to_pixmap(\n    row: List[Tuple[str, int]],\n)-> List[List[int]]:\n    px_arr: List[List[int]] = []\n    tmp_px_arr: List[int] = []\n    for i in range(len(row)):\n        value: int = int(row[i])\n        tmp_px_arr.append(value)\n        if (i + 1) % 28 == 0:\n            px_arr.append(tmp_px_arr)\n            tmp_px_arr = []\n    return px_arr\n\ndef pixmap_to_array(\n    pix_map: List[List[int]]\n) -> List[int]:\n    pix_arr: List[int] = []\n    for pix_row in pix_map:\n        for cell in pix_row:\n            pix_arr.append(cell)\n    return pix_arr\n\ndef show_image_from_pmap(pix_map: List[List[int]]) -> None:\n    fig = plt.figure(figsize=(2, 2))\n    plt.axis('off')\n    plt.imshow(pix_map)\n    plt.show()\n    return None","08e368f2":"k: int = 22  # Sample by index\nprint(\"Label Prediction: %s\" % filereader[k][0])\n\nshow_image_from_pmap(row_to_pixmap(filereader[k][1:]))","67af9dc1":"def increase_contrast(\n        pix_map: List[List[int]],\n        extra_value: int = 10,\n        min_value: int = 100,\n        max_value: int = 250) -> List[List[int]]:\n    new_pix_map: List[List[int]] = []\n\n    for pix_y in range(len(pix_map)):\n        tmp_arr: List[int] = []\n        pix_row = pix_map[pix_y]\n        for pix_x in range(len(pix_row)):\n            cell = pix_row[pix_x]\n\n            # logic\n            if cell > min_value:\n                cell += extra_value\n            if cell > max_value:\n                cell = max_value\n\n            tmp_arr.append(cell)\n        new_pix_map.append(tmp_arr)\n\n    return new_pix_map\n\n\ndef bold_image_logic(\n    pix_x: int,\n    pix_y: int,\n    pix_map: List[List[int]],\n    add_value: int,\n    max_coef: int\n) -> int:\n    around_pixels: List[int] = []\n    bottom_limit = len(pix_map) - 1\n    right_limit = len(pix_map[0]) - 1\n\n    # top\n    if pix_y-1 > 0:\n        pix = pix_map[pix_y-1][pix_x]\n        around_pixels.append(pix)\n\n        # top-right\n        if pix_x+1 < right_limit:\n            pix = pix_map[pix_y-1][pix_x+1]\n            around_pixels.append(pix)\n\n        # top-left\n        if pix_x-1 > 0:\n            pix = pix_map[pix_y-1][pix_x-1]\n            around_pixels.append(pix)\n\n    # bottom\n    if pix_y+1 < bottom_limit:\n        pix = pix_map[pix_y+1][pix_x]\n        around_pixels.append(pix)\n\n        # bottom-right\n        if pix_x+1 < right_limit:\n            pix = pix_map[pix_y+1][pix_x+1]\n            around_pixels.append(pix)\n\n        # bottom-left\n        if pix_x-1 > 0:\n            pix = pix_map[pix_y+1][pix_x-1]\n            around_pixels.append(pix)\n\n    # right\n    if pix_x+1 < right_limit:\n        pix = pix_map[pix_y][pix_x+1]\n        around_pixels.append(pix)\n\n    # left\n    if pix_x-1 > 0:\n        pix = pix_map[pix_y][pix_x-1]\n        around_pixels.append(pix)\n\n    cell = pix_map[pix_y][pix_x]\n    strong_pixel_size: int = list(\n        filter(lambda x: x > max_coef, around_pixels))\n    if len(strong_pixel_size) > 0:\n        cell += add_value\n    return cell\n\n\ndef bold_image(\n    pix_map: List[List[int]],\n    add_value: int = 25,\n    max_coef: int = 200\n) -> List[List[int]]:\n    new_pix_map: List[List[int]] = []\n\n    for pix_y in range(len(pix_map)):\n        tmp_arr: List[int] = []\n        pix_row = pix_map[pix_y]\n        for pix_x in range(len(pix_row)):\n            tmp_arr.append(\n                bold_image_logic(pix_x, pix_y, pix_map, add_value, max_coef)\n            )\n\n        new_pix_map.append(tmp_arr)\n    return new_pix_map\n","ec575ec3":"k: int = 22  # Sample by index\nprint(\"Label Prediction: %s\" % filereader[k][0])\n\nsample_pix_map = row_to_pixmap(filereader[k][1:])\nsample_pix_map = increase_contrast(sample_pix_map, extra_value=75)\nsample_pix_map = bold_image(sample_pix_map, add_value=150, max_coef=150)\n\nshow_image_from_pmap(sample_pix_map)","64c685e6":"def make_font_bolder(\n    array: List[List[int]]\n) -> List[List[int]]:\n    result: List[List[int]] = []\n    for sample in array:\n        pix_map: List[List[int]] = row_to_pixmap(sample)\n\n        # action\n        pix_map = increase_contrast(pix_map, extra_value=75)\n        pix_map = bold_image(pix_map, add_value=150, max_coef=150)\n        result.append(pixmap_to_array(pix_map))\n    return result\n\n\nprint('process train_data')\nbold_train_data: List[List[int]] = make_font_bolder(train_data)\nprint('process test_data')\nbold_test_data: List[List[int]] = make_font_bolder(test_data)\n\n\nperform(\n    ExtraTreesClassifier(),\n    bold_train_data,\n    train_data_answers,\n    bold_test_data,\n    test_data_answers\n)","88716ca5":"There is the train.csv file with a dataset. It contains 42000 images. I will use it for an experiment. The dataset will be divided into two subsets: train subset and test subset with ration 80%:30%. Each classifier will fit by train subset, and then test subset will be used to checking classifier's accuracy.","bd258eb0":"The ExtraTreesClassifier has the biggest score 94.4%. How can I increase it? Let's show sample image.","6938f444":"I think, increasing contrast and make digit bolder will increase score. Here some useful functions.","75684609":"Let's run ExtraTreesClassifier with tunned images and see the new score.","bf26bf95":"Image recognition is a classification task. To solve it, I chose to use scikit-learn. It has a lot of classifier classes. The most useful classes are ensembles such are:  RandomForestClassifier, BaggingClassifier and ExtraTreesClassifier. In the kernel, I will use it for digit recognition.","eda8d271":"Below is the same image after tunning.","f846df7a":"And now, result is better. 95.3% score is better than 94.4%. I think, it is a good result.","b38ee7c3":"Let's overview the test data.","99826935":"There are from 3795 to 4684 samples for each digits. Train subset has 33604 samples, test subset has 8396 samples. Let's use classifiers."}}