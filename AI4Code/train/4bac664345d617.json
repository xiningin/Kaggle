{"cell_type":{"11e1b3e9":"code","f5999362":"code","c8643b3d":"code","07f2fd75":"code","9d92b8c1":"code","5f772a4d":"code","5b5d39fb":"markdown"},"source":{"11e1b3e9":"!pip install kaggle-environments --upgrade","f5999362":"%%writefile submission.py\n\nimport numpy as np\nimport pandas as pd\nimport random, os, datetime\n\ntotal_reward = 0\nbandit_dict = {}\n\ndef set_seed(my_seed=42):\n    os.environ['PYTHONHASHSEED'] = str(my_seed)\n    random.seed(my_seed)\n    np.random.seed(my_seed)\n\ndef get_next_bandit():\n    best_bandit = 0\n    best_bandit_expected = 0\n    for bnd in bandit_dict:\n        expect = (bandit_dict[bnd]['win'] - bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp'] - (bandit_dict[bnd]['opp']>0)*1.5) \\\n                 \/ (bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp'])\n        if expect > best_bandit_expected:\n            best_bandit_expected = expect\n            best_bandit = bnd\n    return best_bandit\n\ndef multi_armed_probabilities(observation, configuration):\n    global total_reward, bandit_dict\n\n    my_pull = random.randrange(configuration['banditCount'])\n    if 0 == observation['step']:\n        set_seed()\n        total_reward = 0\n        bandit_dict = {}\n        for i in range(configuration['banditCount']):\n            bandit_dict[i] = {'win': 1, 'loss': 0, 'opp': 0}\n    else:\n        last_reward = observation['reward'] - total_reward\n        total_reward = observation['reward']\n        \n        my_idx = observation['agentIndex']\n        if 0 < last_reward:\n            bandit_dict[observation['lastActions'][my_idx]]['win'] = bandit_dict[observation['lastActions'][my_idx]]['win'] +1\n        else:\n            bandit_dict[observation['lastActions'][my_idx]]['loss'] = bandit_dict[observation['lastActions'][my_idx]]['loss'] +1\n        bandit_dict[observation['lastActions'][1-my_idx]]['opp'] = bandit_dict[observation['lastActions'][1-my_idx]]['opp'] +1\n        my_pull = get_next_bandit()\n    \n    return my_pull","c8643b3d":"%%writefile random_agent.py\n\nimport random\n\ndef random_agent(observation, configuration):\n    return random.randrange(configuration.banditCount)","07f2fd75":"from kaggle_environments import make\nenv = make(\"mab\", debug=True)","9d92b8c1":"import datetime\n\nenv.reset()\nstart_time = datetime.datetime.now()\nenv.run([\"random_agent.py\", \"submission.py\"])\nstop_time = datetime.datetime.now()\nprint('Completed sub vs random:', stop_time-start_time)\nenv.render(mode=\"ipython\", width=800, height=400)","5f772a4d":"import datetime\n\nenv.reset()\nstart_time = datetime.datetime.now()\nenv.run([\"submission.py\", \"submission.py\"])\nstop_time = datetime.datetime.now()\nprint('Completed sub vs sub:', stop_time-start_time)\nenv.render(mode=\"ipython\", width=800, height=400)","5b5d39fb":"# Keep pulling same bandit as long as reward keeps coming!"}}