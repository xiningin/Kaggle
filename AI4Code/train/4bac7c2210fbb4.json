{"cell_type":{"0c9239a5":"code","8176c25e":"code","05a2cd05":"code","5d7d8a3c":"code","a0967815":"code","63a361ed":"code","e44fde3b":"code","62ff466f":"code","cea79d49":"code","c21fadd9":"code","c45ca413":"code","4feeea75":"code","51d65a46":"code","a4c9d011":"code","9857b6e1":"code","f0c61eef":"code","3572a2ee":"code","ba9b0746":"code","35bcfb9d":"code","10969d99":"code","42fa4a80":"code","16a0c224":"markdown","568936d6":"markdown","8f24fe7e":"markdown","a3fcaf92":"markdown","bb60554a":"markdown","c7065126":"markdown","2a54701d":"markdown","acc1d2db":"markdown"},"source":{"0c9239a5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\nplt.style.use(['seaborn-bright','dark_background'])","8176c25e":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","05a2cd05":"data.isnull().sum()","5d7d8a3c":"data.describe()","a0967815":"data['class'].unique()","63a361ed":"data['class'] = np.where(data['class']=='e',1,0)","e44fde3b":"data.shape","62ff466f":"import seaborn as sns","cea79d49":"features = ['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',\n       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',\n       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',\n       'stalk-surface-below-ring', 'stalk-color-above-ring',\n       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',\n       'ring-type', 'spore-print-color', 'population', 'habitat']","c21fadd9":"for i in features:\n    plt.figure(figsize=(10,5))\n    plt.style.use(['seaborn-bright','dark_background'])\n    sns.countplot(x = data[i],data = data, hue = 'class', palette='hsv')\n    plt.title(i,fontsize=20,color='c')","c45ca413":"data = pd.get_dummies(data)","4feeea75":"data.shape","51d65a46":"x = data.drop(columns='class')\ny = data['class']","a4c9d011":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state = 101)","9857b6e1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,ExtraTreesClassifier\nfrom sklearn.naive_bayes import BernoulliNB,GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier","f0c61eef":"models = []\nmodels.append(('LogisticRegression',LogisticRegression()))\nmodels.append(('DecisionTreeClassifier',DecisionTreeClassifier()))\nmodels.append(('SupportVectorClassifier',SVC()))\nmodels.append(('RandomForestClassifier',RandomForestClassifier()))\nmodels.append(('AdaBoostClassifier',AdaBoostClassifier()))\nmodels.append(('ExtraTreesClassifier',ExtraTreesClassifier()))\nmodels.append(('BernoulliNBClassifier',BernoulliNB()))\nmodels.append(('GaussianNBClassifier',GaussianNB()))\nmodels.append(('KNeighborsClassifier',KNeighborsClassifier()))","3572a2ee":"from sklearn.metrics import confusion_matrix\nmodel_score = []\nfor name,model in models:\n    model.fit(x_train,y_train)\n    ts_score = model.score(x_test,y_test)\n    pred = model.predict(x_test)\n    print(name)\n    print(\"Train score:\",model.score(x_train,y_train),\"\\nTest score:\",ts_score)\n    cm = confusion_matrix(y_test,pred)\n    print(\"Confusion Matrix\\n\",cm)\n    model_score.append((name,ts_score))","ba9b0746":"lst = pd.DataFrame(model_score)","35bcfb9d":"st = lst.sort_values(by=1)","10969d99":"st","42fa4a80":"plt.figure(figsize=(12,7))\nplt.plot(st[1],st[0],\"r--o\")\nplt.title(\"Score Comparision of Different models\",fontsize=35,color='y')\nplt.ylabel(\"Model\",fontsize=20,color='c')\nplt.xlabel(\"Score\",fontsize=20,color='m')\n","16a0c224":"## Importing required Libraries and the dataset.","568936d6":"### Cheacking the number of unique values in class column and then converting it to numerical datatype 1 for the e and 0 for p.","8f24fe7e":"### The plot shows that all models are performing very much good.","a3fcaf92":"### Importing all the required classifier models.","bb60554a":"### Creating dummies for each feature.","c7065126":"#### Spliting dataset using sklearn into train and test data.","2a54701d":"#### From above except NBClassifiers all models gives 100% accuracy.","acc1d2db":"### Visualizing the count for each feature according to class values. "}}