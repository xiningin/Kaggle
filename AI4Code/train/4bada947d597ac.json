{"cell_type":{"425a2b7d":"code","9fb7359a":"code","3d286327":"code","bf6c5687":"code","83bcfa17":"code","e62c3f2a":"code","c5441820":"code","78f15bf0":"code","b582fa8a":"code","fba465dc":"code","3b785a69":"code","fb1e28ad":"code","2fdc7765":"code","a4f662f5":"code","e8123a73":"code","2ac79bc3":"code","979d1efd":"code","c68cb321":"code","5135bd74":"markdown","96e50d05":"markdown","855e7dd5":"markdown","70cb639c":"markdown","78372fe0":"markdown","b531420c":"markdown","1cfc0500":"markdown","3060169e":"markdown","6f665eb4":"markdown","72ed5982":"markdown","d408109b":"markdown","0e400c9b":"markdown"},"source":{"425a2b7d":"import skimage.io\nimport os\nimport csv\nimport random\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping\n\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","9fb7359a":"filenames = os.listdir(\"..\/input\/nnfl-lab-1\/training\/training\")\nuniq_cat = []\nfor name in filenames:\n    nn = name.split('_')[0]\n    if nn not in uniq_cat:\n        if(nn=='chair' or nn=='kitchen' or nn=='knife' or nn=='saucepan'):\n            uniq_cat.append(nn)\nprint(type(filenames))\nprint(uniq_cat)","3d286327":"filenames = (os.listdir(\"..\/input\/nnfl-lab-1\/training\/training\"))\ncategories = []\nfiles = []\nfor filename in filenames:\n    category = filename.split('_')[0]\n    if category == 'chair':\n        categories.append(0)\n        files.append(filename)\n    elif category == 'kitchen':\n        categories.append(1)\n        files.append(filename)\n    elif category == 'knife':\n        categories.append(2)\n        files.append(filename)\n    elif category == 'saucepan':\n        categories.append(3)\n        files.append(filename)\n\ndf_train = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})\n\ndf_train.head()","bf6c5687":"filenames = (os.listdir(\"..\/input\/nnfl-lab-1\/testing\/testing\"))\ncategories = []\nfiles = []\nfor filename in filenames:\n    categories.append(-1)\n    files.append(filename)\n\ndf_test = pd.DataFrame({\n    'filename': files,\n    'category': categories\n})\n\ndf_test.head()","83bcfa17":"df_train['category'] = df_train['category'].replace({0:'chair', 1:'kitchen', 2:'knife', 3:'saucepan'})\ndf_train['category'].value_counts().plot.bar()","e62c3f2a":"sample = random.choice(os.listdir(\"..\/input\/nnfl-lab-1\/training\/training\"))\nimage = load_img(\"..\/input\/nnfl-lab-1\/training\/training\/\"+sample)\nprint(sample)\nprint(\"Shape of image is: \", image.size)\nplt.imshow(image)","c5441820":"X_train, X_val = train_test_split(df_train, test_size=0.2, stratify=df_train['category'], random_state = 42)","78f15bf0":"print(X_train.shape)\nprint(X_val.shape)","b582fa8a":"train_datagen = ImageDataGenerator(rescale = 1.\/255.,\n                                  shear_range=0.3,\n                                  zoom_range=0.3,\n                                  horizontal_flip = True,\n                                  fill_mode='nearest',\n                                  height_shift_range=0.2,\n                                  width_shift_range=0.2)\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    X_train, \n    '..\/input\/nnfl-lab-1\/training\/training\/', \n    x_col='filename',\n    y_col='category',\n    target_size=(216, 216),\n    class_mode='sparse',\n    batch_size=32,\n    color_mode='grayscale'\n)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    X_val, \n    '..\/input\/nnfl-lab-1\/training\/training\/', \n    x_col='filename',\n    y_col='category',\n    target_size=(216, 216),\n    class_mode='sparse',\n    batch_size=8,\n    color_mode='grayscale'\n)","fba465dc":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (5,5), activation='relu', input_shape=(216,216,1)),\n    tf.keras.layers.MaxPooling2D(2,2, padding='same'),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2, padding='same'),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(64,(5,5), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2, padding='same'), \n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(128,(5,5), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2, padding='same'), \n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Conv2D(256, (3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2, padding='same'),\n    tf.keras.layers.Dropout(0.2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(4, activation='softmax')]\n    )\nmodel.summary()","3b785a69":"model.compile(loss='sparse_categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\nhistory = model.fit_generator(train_generator, epochs=40, verbose=1, validation_data = validation_generator)","fb1e28ad":"model.save_weights(\"model.h5\")","2fdc7765":"# Plot the chart for accuracy and loss on both training and validation\n%matplotlib inline\nimport matplotlib.pyplot as plt\nacc = history.history['accuracy'][:-30]\nval_acc = history.history['val_accuracy'][:-30]\nloss = history.history['loss'][:-30]\nval_loss = history.history['val_loss'][:-30]\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","a4f662f5":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_dataframe(\n    df_test, \n    \"..\/input\/nnfl-lab-1\/testing\/testing\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=(216,216),\n    batch_size=1,\n    color_mode='grayscale',\n    shuffle=False\n)","e8123a73":"y_pred = model.predict_generator(test_generator, steps = 1267, verbose=0)\nprint(len(y_pred))","2ac79bc3":"df_test['category'] = np.argmax(y_pred, axis=-1)\ndf_test.head(10)","979d1efd":"sample_test = df_test.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"..\/input\/nnfl-lab-1\/testing\/testing\/\"+filename, target_size=(256, 256))\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","c68cb321":"submission_df = df_test.copy()\nsubmission_df['id'] = submission_df['filename']\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)\nsubmission_df.head()","5135bd74":"# Visualising data Distribution","96e50d05":"# Making training dataframe","855e7dd5":"# Defining the model structure","70cb639c":"# Define Image generators to feed images into our CNN model","78372fe0":"# Visualise accuracy and loss","b531420c":"Making all entries as -1 for timebeing","1cfc0500":"# Code to generate submission file","3060169e":"# Training the model","6f665eb4":"# Checking a sample image","72ed5982":"# Split train data into train and validation sets","d408109b":"# Preparation to get our final result for test data","0e400c9b":"# Making Testing dataframe"}}