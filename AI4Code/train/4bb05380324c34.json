{"cell_type":{"e07376b6":"code","1f0c9095":"code","c1070eff":"code","07a230cb":"code","b14d46bd":"code","99315692":"code","797a99c7":"code","51b80c43":"code","48d28dfd":"code","30a9fe23":"code","b4b501c3":"code","b52a33e4":"code","0774be6e":"code","588b042e":"code","84c89e60":"code","de70b4ce":"code","9c0d5453":"code","738ce8ea":"code","d75273ba":"code","5680c750":"code","83582e9c":"code","251cc10a":"code","b05b286d":"code","f925e992":"code","fa8e94a5":"code","e0b77c94":"code","fa92a847":"code","77a8911d":"code","8efc6b5e":"code","9625dfdf":"code","c2ad37e3":"code","c872ae71":"code","4cb3063f":"code","21bc9cd5":"code","4bc5bab0":"code","33bf492a":"code","8a866a2b":"code","f5c81051":"code","dfd61d51":"code","9254f400":"code","8fdee037":"code","62129d2c":"code","3796e9d5":"code","8ace12dd":"code","4bd86f83":"code","bba737ee":"code","ea401894":"code","98cc22d2":"code","3832f02d":"code","69694025":"code","ebc61f86":"code","626261fe":"code","58cb303a":"code","266e25da":"code","7ea1a2a6":"code","61a33266":"code","12fc9723":"code","1ca97e31":"code","14bdd7a4":"code","6c5dd267":"code","a7035c33":"code","f8e1bd11":"code","29157ff5":"code","41a495ab":"code","6139fcc7":"code","329809ce":"code","b0d2217d":"markdown","eb79e860":"markdown","18a42bc3":"markdown"},"source":{"e07376b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1f0c9095":"#transform them into numerical features","c1070eff":"import pandas as pd\nadult_utc = pd.read_csv(\"..\/input\/adult_utc.csv\")\nadult_utc","07a230cb":"#save\nadult_utc.to_csv('adult1.csv',index=False)\n","b14d46bd":"adult_utc.columns = [\n    \"Age\", \"WorkClass\", \"fnlwgt\", \"Education\", \"EducationNum\",\n    \"MaritalStatus\", \"Occupation\", \"Relationship\", \"Race\", \"Gender\",\n    \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"NativeCountry\", \"Income\"\n]\n\nadult_utc","99315692":"adult_utc.to_csv('adult2.csv',index=False)\n","797a99c7":"adult_utc.Income.unique()\n","51b80c43":"adult_utc[\"Income\"] = adult_utc[\"Income\"].map({ \" <=50K\": -1, \" >50K\": 1 })\n","48d28dfd":"adult_utc","30a9fe23":"adult_utc.Gender.unique()\n","b4b501c3":"adult_utc[\"Gender\"] = adult_utc[\"Gender\"].map({ \" Male\": 1, \" Female\": 0 })\n","b52a33e4":"adult_utc","0774be6e":"\nprint (adult_utc[['NativeCountry','Income']].groupby(['NativeCountry']).mean())","588b042e":"import numpy as np # linear algebra\n\n#fill missing value  as '?'\nprint (adult_utc.shape)\nadult_utc['NativeCountry'] = adult_utc['NativeCountry'].replace(' ?',np.nan)\nadult_utc['WorkClass'] = adult_utc['WorkClass'].replace(' ?',np.nan)\nadult_utc['Occupation'] = adult_utc['Occupation'].replace(' ?',np.nan)\n\nadult_utc.iloc[:,0:13] = adult_utc.iloc[:,0:13].apply(lambda x: x.fillna(x.value_counts().index[0]))\n","84c89e60":"def h(x):\n    if (x['MaritalStatus'] == ' Divorced') :\n        return 'Single'\n    if (x['MaritalStatus'] == ' Married-spouse-absent') :\n            return 'Single'\n    if (x['MaritalStatus'] == ' Never-married'):\n            return 'Single'\n\n    if (x['MaritalStatus'] == ' Separated'):\n            return 'Single'\n    if (x['MaritalStatus'] == ' Widowed'):\n            return 'Single'\n\n    if (x['MaritalStatus'] == ' Married-AF-spouse'):\n            return 'Couple'\n    if (x['MaritalStatus'] == ' Married-civ-spouse'):\n            return 'Couple'\n\n   ","de70b4ce":"adult_utc['MaritalStatus']=adult_utc.apply(h, axis=1)\n","9c0d5453":"#adult_utc['MaritalStatus'] = adult_utc['MaritalStatus'].replace([' Divorced',' Married-spouse-absent',' Never-married',' Separated',' Widowed'],'Single')\n#adult_utc['MaritalStatus'] = adult_utc['MaritalStatus'].replace([' Married-AF-spouse',' Married-civ-spouse'],'Couple')","738ce8ea":"adult_utc","d75273ba":"adult_utc.MaritalStatus.unique()\n","5680c750":"adult_utc['MaritalStatus'] = adult_utc['MaritalStatus'].map({'Couple':1,'Single':0})\n","83582e9c":"adult_utc","251cc10a":"adult_utc.Relationship.unique()\n","b05b286d":"#convert  Relationship into integer into  0 1 2 3 4 5\n\nrel_map = {' Unmarried':0,' Wife':1,' Husband':2,' Not-in-family':3,' Own-child':4,' Other-relative':5}\n\nadult_utc['Relationship'] = adult_utc['Relationship'].map(rel_map)","f925e992":"adult_utc","fa8e94a5":"adult_utc.Race.unique()\n","e0b77c94":"race_map={' White':0,' Amer-Indian-Eskimo':1,' Asian-Pac-Islander':2,' Black':3,' Other':4}\nadult_utc['Race']= adult_utc['Race'].map(race_map)","fa92a847":"adult_utc","77a8911d":"\nadult_utc.WorkClass.unique()\n","8efc6b5e":"# function to convert to numeric\n\ndef f(x):\n    if (x['WorkClass'] == ' Federal-gov') :\n        return 'govt'\n    if (x['WorkClass'] == ' Local-gov') :\n            return 'govt'\n    if (x['WorkClass'] ==' State-gov'):\n            return 'govt'\n\n    if (x['WorkClass'] == ' Private'):\n            return 'private'\n    if (x['WorkClass'] == ' Self-emp-inc'):\n            return 'self_employed'\n\n    if (x['WorkClass'] == ' Self-emp-not-inc'):\n            return 'self_employed'\n    else:\n            return 'without_pay'\n    \n        \n    ","9625dfdf":"adult_utc","c2ad37e3":"adult_utc['WorkClass']=adult_utc.apply(f, axis=1)\n","c872ae71":"adult_utc","4cb3063f":"adult_utc.NativeCountry.unique()\n","21bc9cd5":"def g(y):\n    if y['NativeCountry'] == ' United-States' : return 'US'\n   \n    else: return 'Non-US'","4bc5bab0":"adult_utc['NativeCountry']=adult_utc.apply(g, axis=1)\n","33bf492a":"adult_utc","8a866a2b":"#Convert country in integer\nadult_utc.NativeCountry.unique()\n","f5c81051":"adult_utc['NativeCountry'] = adult_utc['NativeCountry'].map({'US':1,'Non-US':0}).astype(int)\n","dfd61d51":"adult_utc","9254f400":"y_all = adult_utc[\"Income\"].values\ny_all","8fdee037":"\nadult_utc.Occupation.unique()\n","62129d2c":"\n\nadult_utc.Education.unique()\n","3796e9d5":"adult_utc","8ace12dd":"adult_utc.fnlwgt.unique()\n","4bd86f83":"# : Normalise fnlwgt values to a new range from 1 to 100\n\na, b = 1, 100\nx, y = adult_utc.fnlwgt.min(), adult_utc.fnlwgt.max()\nadult_utc['fnlwgt'] = (adult_utc.fnlwgt - x) \/ (y - x) * (b - a) + a\n\nprint(adult_utc['fnlwgt'])","bba737ee":"#: Perform discretization on fnlwgt feature in Adult dataset.\nbins = [0, 1, 5, 10, 25, 50, 100]\nadult_utc['Binned'] = pd.cut(adult_utc['fnlwgt'].astype(float), bins)","ea401894":"adult_utc","98cc22d2":"adult_utc.Binned.unique()\n","3832f02d":"# we drop the columns  fnlwgt as it is not meaningful \n# and CapitalGain  CapitalLoss\nadult_utc.drop(labels=['fnlwgt','CapitalGain','CapitalLoss'],axis=1,inplace=True)\n","69694025":"adult_utc","ebc61f86":"adult_utc.WorkClass.unique()\n","626261fe":"#convert  WorkClass into integer into  0 1 2 3 \nWorkClass = {'govt':0,'private':1,'self_employed':2,'without_pay':3}\nadult_utc['WorkClass'] = adult_utc['WorkClass'].map(WorkClass)","58cb303a":"adult_utc","266e25da":"adult_utc.Education.unique()\n","7ea1a2a6":"#convert  Education into integer into  0 1 2 3 \nEducation = {' Preschool':0,' 1st-4th':1,' 5th-6th':2,' 7th-8th':3,' 9th':4,' 10th':5,' 11th':6,' 12th':7,' Prof-school':8,\n           ' Assoc-acdm':9,' Assoc-voc':10,' Some-college':11,' HS-grad':12,' Bachelors':13,' Masters':14, ' Doctorate':15}\nadult_utc['Education'] = adult_utc['Education'].map(Education)","61a33266":"adult_utc.Binned.unique()\n","12fc9723":"#mapping = {'(0, 1]' : 1 , '(1, 5]': 2 , '(5, 10]': 3, '(10, 25]': 4, '(25, 50]': 5, '(50, 100]': 6}\n#adult_utc['binned'] = adult_utc['binned'].map(mapping)\n#adult_utc = adult_utc.replace ({'binned': mapping  })\n\n#mapping = {'(0,1]' : 1 , '(1, 5]': 2 }\n#adult_utc = adult_utc.replace ({'binned': mapping})\n\nmp = {'(0, 1]': 1, '(1, 5]': 2, '(5, 10]': 3, '(10, 25]': 4, '(25, 50]': 5, '(50, 100]': 6}\nadult_utc = adult_utc.replace ({'Binned':mp})\n#adult_utc['Binned'] = adult_utc['Binned'].map(Binned)\n\n\n","1ca97e31":"def Bined(y):\n    if y['Binned'] == '(0, 1]' : return '1'\n    if y['Binned'] == '(1, 5]' : return '2'\n    if y['Binned'] == '(5, 10]' : return '3'\n    if y['Binned'] == '(10, 25]' : return '4'\n    if y['Binned'] == '(25, 50]' : return '5'\n    if y['Binned'] == '(50, 100]' : return '6'\n    \n#adult_utc['Binned']=adult_utc.apply(Bined, axis=1)\n","14bdd7a4":"adult_utc.Occupation.unique()\n","6c5dd267":"def O(y):\n    if y['Occupation'] == ' Exec-managerial' : return '1'\n    if y['Occupation'] == ' Handlers-cleaners' : return '2'\n    if y['Occupation'] == ' Prof-specialty' : return '3'\n    if y['Occupation'] == ' Other-service' : return '4'\n    if y['Occupation'] == ' Adm-clerical' : return '5'\n    if y['Occupation'] == ' Craft-repair' : return '6'\n    if y['Occupation'] == ' Transport-moving' : return '7' \n    if y['Occupation'] == ' Farming-fishing' : return '8'  \n    if y['Occupation'] == ' Machine-op-inspct' : return '9' \n    if y['Occupation'] == ' Tech-support' : return '10'\n    if y['Occupation'] == ' Protective-serv' : return '11'\n    if y['Occupation'] == ' Armed-Forces' : return '12'\n    if y['Occupation'] == ' Priv-house-serv' : return '13'\n\n    \nadult_utc['Occupation']=adult_utc.apply(O, axis=1)","a7035c33":"adult_utc","f8e1bd11":"mp = {'(0, 1]': 1, '(1, 5]': 2, '(5, 10]': 3, '(10, 25]': 4, '(25, 50]': 5, '(50, 100]': 6}\nadult_utc = adult_utc.replace ({'Binned':mp})","29157ff5":"#mapping = {'(0, 1]' : 1 , '(1, 5]': 2 , '(5, 10]': 3, '(10, 25]': 4, '(25, 50]': 5, '(50, 100]': 6}\n#adult_utc['Binned'] = adult_utc['Binned'].map(mapping)","41a495ab":"\"\"\"\ndef B(y):\n    if y['Binned'] == '(0, 1]' : return '1'\n    if y['Binned'] == '(1, 5]' : return '2'\n    if y['Binned'] == '(5, 10]' : return '3'\n    if y['Binned'] == '(10, 25]' : return '4'\n    if y['Binned'] == '(25, 50]' : return '5'\n    if y['Binned'] == '(50, 100]' : return '6'\n\n    \nadult_utc['Binned']=adult_utc.apply(B, axis=1)\n\"\"\"","6139fcc7":"adult_utc","329809ce":"adult_utc.to_csv('adult_numerical1.csv',index=False)\n","b0d2217d":"# \u0648\u0635\u0641 \u0627\u0644\u062f\u0627\u062a\u0627 \u0633\u062a\n\n\n","eb79e860":"* Data Set Characteristics:  Multivariate  \u0645\u062a\u0639\u062f\u062f\u0629 \u0627\u0644\u0645\u062a\u063a\u064a\u0631\u0627\u062a\n* Number of Instances:48842\n* Area:Social\n* Attribute Characteristics:Categorical, Integer\n* Number of Attributes:14\n* Date Donated :1996-05-01\n* Associated Tasks:Classification\n* Missing Values? :Yes\n* \n\n\nData Set Information:\n\nExtraction was done by Barry Becker from the 1994 Census database. A set of reasonably clean records was extracted using the following conditions: ((AAGE>16) && (AGI>100) && (AFNLWGT>1)&& (HRSWK>0))\n\n# The prediction task is to determine whether a person makes over 50K a year.\n\n\n\n\n\n\n\n\n\n\n\n\n","18a42bc3":"# Abstract: Predict whether income exceeds $50K\/yr based on census data. Also known as the \"Census Income\" dataset."}}