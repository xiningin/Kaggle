{"cell_type":{"9cac975c":"code","52df8d22":"code","05238279":"code","8b4ecacf":"code","dec5a239":"code","710aca81":"code","00fcb917":"code","b4a4923c":"code","3146efdd":"code","ea40366d":"code","20719530":"code","aca86710":"code","8166c3a6":"code","3cfb9e6b":"code","17c16254":"code","8ace6d24":"code","d58b94f1":"code","ce650ae7":"code","f54e6d9f":"code","7f8ad1f3":"code","66e89e44":"code","b946a6c1":"code","74ca069d":"code","d6e57649":"code","17e5d1a4":"code","26fda20c":"code","acd28a46":"code","39dd57cd":"code","3054a114":"code","aba2e7f2":"code","24f88644":"code","5776d4d5":"code","36409c02":"code","a32210e5":"markdown","2b50d1ac":"markdown","2fe4aa56":"markdown","05ed86a1":"markdown","991a1737":"markdown","649d2346":"markdown","dd4e87e7":"markdown","23864c2c":"markdown","efd193b6":"markdown","a63327f6":"markdown","a9ee2bbc":"markdown","7d300713":"markdown","40fb603d":"markdown","f2f20d38":"markdown","c9491d79":"markdown","a4a6bdc1":"markdown"},"source":{"9cac975c":"import os\nimport random\nimport gc\nfrom pprint import pprint\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nsns.set(style='darkgrid')\n\nfrom sklearn.model_selection import StratifiedKFold\n\n%matplotlib inline","52df8d22":"import torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom transformers import AutoModel\nfrom transformers import AutoTokenizer\nfrom transformers import AutoConfig","05238279":"DEBUG = False\n\nTRAIN = '..\/input\/commonlitreadabilityprize\/train.csv'\nTEST = '..\/input\/commonlitreadabilityprize\/test.csv'\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = False\n    torch.backends.cudnn.benchmark = True\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint('Device: ', device.type)\n\nSEED = 28\nseed_everything(SEED)\n\ncfg ={}","8b4ecacf":"# BERT\nBERT = 'bert-base-uncased'\n\n# Distilbert\nDISTILBERT = 'distilbert-base-uncased'\n\n# Roberta\nROBERTA = 'roberta-base'\n\n\n\ncfg ={}\n\nARCH_PATH = ROBERTA\n\ncfg['train'] = {'n_folds': 5}","dec5a239":"def get_bin_stratified(df, n_bins=20, n_splits=5):\n    df['bin'] = pd.cut(df.target, n_bins, labels=[i for i in range(n_bins)])\n    \n    df['fold'] = np.nan\n\n    skf = StratifiedKFold(n_splits=n_splits, random_state=SEED, shuffle=True)\n    gen_skf = skf.split(df.id, y=df.bin)\n\n    for fold, (idx_train, idx_val) in enumerate(gen_skf):\n        df.loc[idx_val, 'fold'] = fold\n\n    df['fold'] = df['fold'].astype('int8')","710aca81":"df = pd.read_csv(TRAIN)\nget_bin_stratified(df)\n\nplt.figure(figsize=(12, 6))\nfor fold in range(cfg['train']['n_folds']):\n    sns.histplot(data=df.loc[df.fold==fold], x='target', bins=20, hue='fold', label=f'fold{fold}')\n    \nplt.title('Target Distribution for Each Fold')\nplt.legend()\nplt.show()","00fcb917":"cfg['tokenizer'] ={'name': ARCH_PATH, \n                   'max_length': 210}\n\ntokenizer = AutoTokenizer.from_pretrained(cfg['tokenizer']['name'])","b4a4923c":"if DEBUG:\n    text = df.loc[SEED, 'excerpt']\n    print('Text Length ', len(text.split(' ')))\n    print()\n    \n    text_tokenized = tokenizer.encode_plus(\n                        text,\n                        add_special_tokens=True,\n                        padding='max_length',\n                        max_length=cfg['tokenizer']['max_length'], \n                        truncation=True\n                        )\n    \n    for key, value in text_tokenized.items():\n        print(key, type(value))\n        print(value)\n        print()","3146efdd":"class CommonLitDataset(Dataset):\n    \n    def __init__(self, df, tokenizer, max_len):\n        self.df = df\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        text = self.df.loc[index, 'excerpt']\n        inputs = self.tokenizer.encode_plus(\n            text,                                 \n            add_special_tokens=True,\n            padding='max_length',\n            max_length=self.max_len,\n            truncation=True\n        )\n        ids = inputs['input_ids']\n        mask = inputs['attention_mask']\n        \n        if cfg['tokenizer']['name']=='bert-base-uncased':\n            token_type_ids = inputs['token_type_ids'] \n        else:\n            token_type_ids = 1.\n        \n        target = self.df.loc[index, ['target']]\n        \n        return {\n            'ids': torch.LongTensor(ids),\n            'mask': torch.LongTensor(mask),\n             'token_type_ids': torch.tensor(token_type_ids)\n            },{\n            'target': torch.Tensor(target)\n        }","ea40366d":"if DEBUG:\n    ds = CommonLitDataset(df=df, \n                          tokenizer=tokenizer, \n                          max_len=cfg['tokenizer']['max_length'])\n    assert len(df) == len(ds)\n    \n    ds = iter(ds)\n    inputs, targets = next(ds)\n    \n    for k, v in inputs.items():\n        print(k, v.dtype)\n        print(v)\n        print()\n        \n    for k, v in targets.items():\n        print(k, v.dtype)\n        print(v)\n        print()","20719530":"cfg['dl_train'] = {\n    'batch_size': 8 if device.type=='cpu' else 32, \n    'shuffle': True, \n    'num_workers': os.cpu_count(), \n    'pin_memory': True\n}\n\ncfg['dl_val'] = {\n    'batch_size': 8 if device.type=='cpu' else 64, \n    'shuffle': False, \n    'num_workers': os.cpu_count(), \n    'pin_memory': True\n}","aca86710":"if DEBUG:\n    ds = CommonLitDataset(df=df, \n                          tokenizer=tokenizer, \n                          max_len=cfg['tokenizer']['max_length'])\n    \n    dl = DataLoader(ds, **cfg['dl_train'])\n    \n    for data in dl:\n        print(data[0]['ids'].detach().cpu().size())\n        break","8166c3a6":"cfg['model'] = {'name': ARCH_PATH}","3cfb9e6b":"class CommonLitBERT(nn.Module):\n    \n    def __init__(self, name, dropout=True):\n        super(CommonLitBERT, self).__init__()\n        self.bert = AutoModel.from_pretrained(name)\n        self.name = name\n        \n        if name == BERT:\n            self.in_features = self.bert.pooler.dense.out_features\n        elif name == DISTILBERT:\n            self.in_features = self.bert.transformer.layer[5].output_layer_norm.normalized_shape[0]\n        elif name == ROBERTA:\n            self.in_features = self.bert.pooler.dense.out_features\n        else:\n            self.in_features = 768\n        \n        self.fc = nn.Linear(self.in_features, 1)\n        self.dense = nn.Linear(self.in_features, self.in_features)\n        self.activation = nn.Tanh()\n        self.dropout = nn.Dropout(p=0.2)\n        self.layer_norm = nn.LayerNorm(self.in_features)\n        \n        torch.nn.init.kaiming_normal_(self.dense.weight)\n        torch.nn.init.kaiming_normal_(self.fc.weight)\n        \n    def forward(self, ids, mask, token_type_ids):\n        if self.name == BERT:\n            last_hidden_state, output = self.bert(ids,\n                                                  attention_mask=mask,\n                                                  token_type_ids=token_type_ids,\n                                                  return_dict=False)\n        elif self.name == DISTILBERT:\n            last_hidden_state = self.bert(ids, \n                                           attention_mask=mask, \n                                           return_dict=False)\n            first_token_tensor = last_hidden_state[0][:, 0]\n            output = self.dense(first_token_tensor)\n            output = self.activation(output)\n            \n        elif self.name == ROBERTA:\n            last_hidden_state, output = self.bert(ids,\n                                                  attention_mask=mask,\n#                                                   token_type_ids=token_type_ids,\n                                                  return_dict=False)\n        \n        output = self.layer_norm(output)\n        output = self.dropout(output)\n        output = self.fc(output)\n        return output","17c16254":"if DEBUG:\n    model = CommonLitBERT(name=cfg['model']['name'])\n    data = next(iter(dl))\n    inputs = data[0]\n    outputs = model(**inputs)\n    print(outputs)","8ace6d24":"def CommonLitMetric(y_pred, y_gt):\n    assert y_pred.size() == y_gt.size()\n    \n    metric = nn.MSELoss()\n    metric = torch.sqrt(metric(y_pred, y_gt))\n    return metric","d58b94f1":"if DEBUG:\n    def RMSE_grad(y_pred, y_gt):\n        # y_pred differential\n        delta = y_pred - y_gt\n        N = len(delta)\n\n        dL = delta \/ N\n        dy = torch.sqrt((delta**2).sum() \/ N)\n\n        return dL\/dy\n    \n    y_pred = torch.tensor([[6], [5]], dtype=torch.float32, requires_grad=True)\n    y_gt = torch.tensor([[2], [4]], dtype=torch.float32, requires_grad=True)\n    \n    metric = CommonLitMetric(y_pred, y_gt)\n    metric.backward()\n    \n    for i in range(len(y_pred)):\n        assert y_pred.grad[i] == RMSE_grad(y_pred, y_gt).data[i], f'{i}th element is not consistent.'","ce650ae7":"from torch.optim import Adam\nfrom torch.optim.lr_scheduler import StepLR\n\nfrom transformers import get_cosine_schedule_with_warmup\nfrom transformers import AdamW\n\ncfg['optim'] = {'lr': 8e-6, \n#                 'weight_decay': 0.01\n               }\ncfg['scheduler'] = {'num_warmup_steps': 3, \n                    'num_training_steps': 7, \n#                     'num_cycles': 1,\n                   }","f54e6d9f":"if DEBUG:\n    model = CommonLitBERT(name=cfg['model']['name'])\n    optim = AdamW(model.parameters(), **cfg['optim'])\n    scheduler = get_cosine_schedule_with_warmup(optim, **cfg['scheduler'])\n    \n    lrs = []\n\n    for epoch in range(50):\n        lr = optim.param_groups[0]['lr']\n        lrs.append(lr)\n\n        optim.step()\n        scheduler.step()\n        \n    plt.plot(lrs, marker='o')\n    plt.xlabel('Steps')\n    plt.ylabel('Learning Rate')\n    plt.title('LR Scheduler Plot')\n    plt.show()","7f8ad1f3":"from torch.cuda.amp import GradScaler\nfrom torch.cuda.amp import autocast","66e89e44":"cfg['train'] ={\n    'n_folds': 5,\n    'n_epochs': 100\n}","b946a6c1":"class StoreLoss:\n    \n    def __init__(self, fold):\n        self.loss_train_mean = []\n        self.loss_train_std = []\n        self.loss_val_mean = []\n        self.loss_val_std = []\n        \n        self.fold = fold\n        \n    def get_loss(self, loss_train, loss_val):\n        self.loss_train_mean.append(loss_train[0])\n        self.loss_train_std.append(loss_train[1])\n        self.loss_val_mean.append(loss_val[0])\n        self.loss_val_std.append(loss_val[1])\n        \n    def plot_loss(self):\n        \n        def get_ax(ax, loss_train, loss_val, title='mean'):\n            ax.plot(loss_train, marker='o', label='train')\n            ax.plot(loss_val, marker='x', label='val')\n            ax.set_xlabel('Epoch')\n            ax.set_ylabel(f'RMSE ({title})')\n            ax.set_title(f'RMSE({title}) vs Epoch at fold {self.fold}')\n            ax.legend()\n            return ax\n        \n        fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 4))\n        \n        ax[0] = get_ax(ax[0], self.loss_train_mean, self.loss_val_mean, title='mean')\n        ax[1] = get_ax(ax[1], self.loss_train_std, self.loss_val_std, title='std')\n        \n        \n        fig.show()","74ca069d":"if DEBUG:\n    store = StoreLoss(fold=0)\n    \n    for epoch in range(10):\n        loss_train = np.random.rand(2)\n        loss_val = np.random.rand(2)\n        \n        store.get_loss(loss_train, loss_val)\n    \n    store.plot_loss()","d6e57649":"def train_fn(model, dl, criterion, optim, scheduler):\n    scaler = GradScaler()\n    \n    loss_train = []\n    loss_total = 0\n    \n    model.train()\n    model.to(device)\n    \n    progress_bar = tqdm(dl, desc='train')\n    \n    for i, data in enumerate(progress_bar):\n        optim.zero_grad()\n        \n        inputs = {key: value.to(device) for key, value in data[0].items()}\n        targets = data[1]['target'].to(device)\n        \n        with autocast():\n            outputs = model(**inputs)\n            loss = criterion(outputs, targets)\n#         loss.backward()\n        \n        scaler.scale(loss).backward()\n        \n        loss_train.append(loss.item())\n        loss_total += loss.item()\n        \n        progress_bar.set_postfix({'RMSE(batch)': loss.item(), \n                                  'RMSE(ave)': loss_total \/ (i+1), \n                                  'lr': optim.param_groups[0]['lr']})\n        \n        scaler.step(optim)\n        scaler.update()\n#         optim.step()\n    \n    return np.mean(loss_train), np.std(loss_train)\n\ndef val_fn(model, dl):\n    scaler = GradScaler()\n    \n    loss_val = []\n    loss_total = 0\n    \n    model.eval()\n    model.to(device)\n    \n    progress_bar = tqdm(dl, desc='val')\n    \n    with torch.no_grad():\n        for i, data in enumerate(progress_bar):\n            inputs = {key: value.to(device) for key, value in data[0].items()}\n            targets = data[1]['target'].to(device)\n            \n            with autocast():\n                outputs = model(**inputs)\n                loss = CommonLitMetric(outputs, targets)\n            \n            loss_val.append(loss.item())\n            loss_total += loss.item()\n            \n            progress_bar.set_postfix({'RMSE(batch)': loss.item(), 'RMSE(ave)': loss_total \/ (i+1)})\n    \n    loss_val_2 = np.array(loss_val)**2 * cfg['dl_val']['batch_size'] \/ len(dl.dataset)\n    print('RMSE for validation set overall: ', np.sqrt(loss_val_2.sum()))\n    \n    return np.sqrt(loss_val_2.sum()), np.std(loss_val)","17e5d1a4":"def run_one_epoch(model, train_dl, val_dl, criterion, optim, scheduler):\n    inputs_train = {\n        'model': model, \n        'dl': train_dl, \n        'criterion': criterion, \n        'optim': optim, \n        'scheduler': scheduler\n    }\n\n    inputs_val = {'model': model, \n                  'dl': val_dl}\n\n    loss_train = train_fn(**inputs_train)\n    loss_val = val_fn(**inputs_val)\n    \n    return loss_train, loss_val","26fda20c":"def get_dls_for_n_fold(df, fold, tokenizer):\n    train_df = df.loc[df.fold!=fold].reset_index(drop=True)\n    val_df = df.loc[df.fold==fold].reset_index(drop=True)\n    \n    train_ds = CommonLitDataset(\n        train_df, \n        tokenizer=tokenizer, \n        max_len=cfg['tokenizer']['max_length']\n    )\n    \n    val_ds = CommonLitDataset(\n        val_df, \n        tokenizer=tokenizer, \n        max_len=cfg['tokenizer']['max_length']\n    )\n    \n    train_dl = DataLoader(train_ds, **cfg['dl_train'])\n    val_dl = DataLoader(val_ds, **cfg['dl_val'])\n    \n    return train_dl, val_dl","acd28a46":"# https:\/\/qiita.com\/ku_a_i\/items\/ba33c9ce3449da23b503\n\nclass EarlyStopping:\n    \n    def __init__(self, patience=2, seq=False):\n        self.patience = patience\n        self.counter = 0\n        self.best_score = None\n        self.stop = False\n        \n    def __call__(self, loss, model, optim, cfg, path):\n        if self.best_score is None:\n            self.best_score = loss\n            self.save_checkpoint(model, optim, cfg, path)\n        elif loss < self.best_score:\n            print(f'Loss decreased {self.best_score} -> {loss}.')\n            self.best_score = loss\n            self.counter = 0\n            self.save_checkpoint(model, optim, cfg, path)\n        else:\n            self.counter += 1\n            if self.counter > self.patience: self.stop = True\n                \n    def save_checkpoint(self, model, optim, cfg, path):\n        save_list = {'model': model.state_dict(), \n#                      'optim': optim.state_dict(), \n                     'cfg': cfg}\n        SAVE_PATH = path\n        torch.save(save_list, SAVE_PATH)","39dd57cd":"pprint(cfg)","3054a114":"def main():\n    seed_everything(SEED)\n        \n    df = pd.read_csv(TRAIN)\n    get_bin_stratified(df, n_splits=cfg['train']['n_folds'])\n\n    tokenizer = AutoTokenizer.from_pretrained(cfg['tokenizer']['name'])\n    \n    for fold in range(cfg['train']['n_folds']):\n        print('Fold:', fold)\n#         if fold in [0, 1, 2]: continue\n        store = StoreLoss(fold=fold)\n        es = EarlyStopping()\n\n        train_dl, val_dl = get_dls_for_n_fold(df, fold, tokenizer)\n\n        model = CommonLitBERT(name=cfg['model']['name'])\n        criterion = CommonLitMetric\n        optim = AdamW(model.parameters(), **cfg['optim'])\n        scheduler = get_cosine_schedule_with_warmup(optim, **cfg['scheduler'])\n        if optim.param_groups[0]['lr']==0:\n            optim.step()\n            scheduler.step()\n\n        inputs = {'model': model,\n                  'train_dl': train_dl,\n                  'val_dl': val_dl,\n                  'criterion': criterion,\n                  'optim': optim,\n                  'scheduler': scheduler}\n\n        for epoch in range(cfg['train']['n_epochs']):\n            loss_train, loss_val = run_one_epoch(**inputs)\n            \n            store.get_loss(loss_train, loss_val)\n            \n            es(loss_val[0], model, optim, cfg, path=f'CommonLitBERT_fold{fold}.tar')\n            if es.stop:\n                print('Early Stop !')\n                print()\n                break\n\n            scheduler.step()\n            \n        store.plot_loss()\n        \n        del model, optim\n        gc.collect()","aba2e7f2":"%%time\nmain()","24f88644":"MODEL_NAME = 'CommonLitBERT'\n\ndef val_fn_cv(model, dl):\n    scaler = GradScaler()\n    preds = []\n    \n    model.eval()\n    model.to(device)\n    \n    progress_bar = tqdm(dl, desc='cv')\n    \n    with torch.no_grad():\n        for i, data in enumerate(progress_bar):\n            inputs = {key: value.to(device) for key, value in data[0].items()}\n            targets = data[1]['target'].to(device)\n            \n            with autocast():\n                outputs = model(**inputs)\n            \n            preds.append(outputs.detach().cpu().numpy())\n    \n    preds = np.concatenate(preds)\n    \n    return preds\n\ndef main_cv():\n    seed_everything(SEED)\n    \n    df = pd.read_csv(TRAIN)\n    get_bin_stratified(df, n_splits=cfg['train']['n_folds'])\n    df['oof'] = np.nan\n\n    tokenizer = AutoTokenizer.from_pretrained(cfg['tokenizer']['name'])\n    \n    for fold in range(cfg['train']['n_folds']):\n        train_dl, val_dl = get_dls_for_n_fold(df, fold, tokenizer)\n\n        model = CommonLitBERT(name=cfg['model']['name'])\n        PATH = os.path.join(MODEL_NAME + f'_fold{fold}.tar')\n        saved_contents = torch.load(PATH, map_location=device)\n        \n        model.load_state_dict(saved_contents['model'])\n        if fold==0:\n            cfg_for_train = saved_contents['cfg']\n            print('Configuration for training:')\n            print()\n            pprint(cfg_for_train)\n            print()\n        \n        print('Fold:', fold)\n        \n        inputs = {'model': model,\n                  'dl': val_dl}\n        \n        preds = val_fn_cv(**inputs)\n        df.loc[df.fold==fold, 'oof'] = preds\n\n    return df","5776d4d5":"from sklearn.metrics import mean_squared_error\n\ndf = main_cv()\ndf.to_csv('oof_df.csv', index=False)\n\nmse = mean_squared_error(df['target'], df['oof'])\nrmse = np.sqrt(mse)\nprint('CV score: ', rmse)","36409c02":"temp_df = pd.DataFrame()\ntemp_df['x'] = np.linspace(-3.5, 1.5, 10)\ntemp_df['y'] = temp_df['x']\n\nplt.figure(figsize=(8, 8))\nsns.scatterplot(data=df, x='target', y='oof', label='oof vs target')\nsns.lineplot(data=temp_df, x='x', y='y', color='orange')\nplt.title('OOF Prediction vs Target')\nplt.legend()\nplt.show()","a32210e5":"## Dataloader","2b50d1ac":"## Tokenizer","2fe4aa56":"# Model","05ed86a1":"## Dataset","991a1737":"# Data","649d2346":"# Calculate CV Score","dd4e87e7":"# Inference Part is here !\nhttps:\/\/www.kaggle.com\/atsushiiwasaki\/commonlit-bert-stratified-k-fold-baseline-infer","23864c2c":"# Libraries","efd193b6":"# Configuration","a63327f6":"# OOF Prediction vs Target","a9ee2bbc":"# Pytorch BERT + Stratified K Fold [train]\n## Introduction\n\nThis notebook is the BERT baseline (using HuggingFace) with stratified K fold.  \nI stratify the dataset on the target distribution.\n\nInference part is here:  \nhttps:\/\/www.kaggle.com\/atsushiiwasaki\/commonlit-bert-stratified-k-fold-baseline-infer\n\nYou can choose BERT variants from\n* BERT\n* DISTILBERT\n* ROBERTA\n\nHyper-parameters \/ Optimizer \/ Scheduler or any settings for them are not optimized.  \nPlease try some experiments. Thanks.\n\n## Contents\n1. Libraries\n1. Configuration\n1. Data (Dataset, DataLoader)\n1. Criterion\n1. Model\n1. Optimizer\n1. Training\/Inference\n1. Run\n1. Calculate CV Score\n1. OOF prediction vs target\n\n## Update\n* v9  : fully connected layer -> kaiming_normal\n* v10 : back to Distilbert (LB: 0.497, CV: 0.533)\n* v11 : change random seed\n* v12 : change random seed\n* v14 : chage max_len in tokenizer 210 -> 250, change random seed 777 -> 28\n* v15 : add CV score calculation section\n* v16 : n_bins=10 -> 20 when stratify\n* v17 : add layer_norm \/ batch size 32 -> 16\n* v18 : Distilbert -> Roberta\n* v19 : adjust Scheduler\n* v22 : add a figure (oof prediction vs target)\n* v23 : remove \"break\" in the training loop","7d300713":"# Run","40fb603d":"# Optimizer","f2f20d38":"# Training \/ Inference","c9491d79":"# Criterion","a4a6bdc1":"## Stratify on target distribution"}}