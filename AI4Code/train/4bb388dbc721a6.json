{"cell_type":{"ee4f22fc":"code","21002e8b":"code","7c58ab2b":"code","2edff590":"code","693a0965":"code","e4f9f6b5":"code","1b7ce27b":"code","5a5b277b":"code","1ef7c4b3":"code","5d1e2191":"code","41fc7911":"code","17775f5b":"code","a20336f3":"code","ed0b3968":"code","910cb42d":"markdown","42e0591f":"markdown","62a18f8e":"markdown","39a16a15":"markdown"},"source":{"ee4f22fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pydicom\nimport glob\nimport datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21002e8b":"## First, read all of my DICOM files into a list\nmydicoms = glob.glob(\"\/kaggle\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/*.dicom\")","7c58ab2b":"dcm1 = pydicom.dcmread(mydicoms[1])","2edff590":"dcm1","693a0965":"# Patient's Sex\ndcm1[(0x0010, 0x0040)].value","e4f9f6b5":"# Patient's Age\ndcm1[(0x0010, 0x1010)].value","1b7ce27b":"# Rows\ndcm1[(0x0028, 0x0010)].value","5a5b277b":"# Cols\ndcm1.get((0x0028, 0x0011)).value","1ef7c4b3":"sex_key = (0x0010, 0x0040)\ndef get_patients_sex(dcm):\n    if sex_key in dcm:\n        return dcm[sex_key].value\n    else:\n        return None","5d1e2191":"age_key = (0x0010, 0x1010)\ndef get_patients_age(dcm):\n    if age_key in dcm:\n        return dcm[age_key].value\n    else:\n        return None","41fc7911":"weight_key = (0x0010, 0x1030)\ndef get_patients_weight(dcm):\n    if weight_key in dcm:\n        return dcm[weight_key].value\n    else:\n        return None","17775f5b":"size_key = (0x0010, 0x1020)\ndef get_patients_size(dcm):\n    if size_key in dcm:\n        return dcm[size_key].value\n    else:\n        return None","a20336f3":"all_data = pd.read_csv('..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train.csv')\nsampled_data = all_data # .sample(frac=0.25)\nn = len(sampled_data.index)\nprint('n:', n)\ntrain_dir = '..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train'\nsexes = []\nages = []\nweights = []\nsizes = []\ni = 0\nstart_time = datetime.datetime.now()\nfor index, row in sampled_data.iterrows():\n    image_id = row['image_id']\n    file_path = train_dir + \"\/\" + image_id + '.dicom'\n    dcm = pydicom.dcmread(file_path, stop_before_pixels=True)\n    sex = get_patients_sex(dcm)\n    sexes.append(sex)\n    age = get_patients_age(dcm)\n    ages.append(age)\n    weight = get_patients_weight(dcm)\n    weights.append(weight)\n    size = get_patients_size(dcm)\n    sizes.append(size)\n    i += 1\n    if i % 100 == 0:\n        print()\n        fraction_done = i \/ n\n        print('fraction_done:', fraction_done)\n        current_time = datetime.datetime.now()\n        elapsed_minutes = int((current_time - start_time).total_seconds()) \/\/ 60\n        print('elapsed_minutes:', elapsed_minutes)\n        if elapsed_minutes > 0:\n            records_per_minute = i \/ elapsed_minutes\n            remaining_minutes = (n - i) \/\/ records_per_minute\n            print('remaining_minutes:', remaining_minutes)\nsampled_data['sex'] = sexes\nsampled_data['age'] = ages\nsampled_data['weight'] = weights\nsampled_data['size'] = sizes\n\nsampled_data.to_csv(\"all_data.csv\")","ed0b3968":"sampled_data.head()","910cb42d":"# Prepare DICOM Images for ML","42e0591f":"## Now, let's create the dataframe that we want, and populate it in a loop with all of our DICOMS:","62a18f8e":"Looking at the attributes listed above, I can see that I'm looking to extract the following attributes: \n* Patient's Sex\n* Patient's Age\n* Patient's Weight\n* Patient's Size","39a16a15":"### Let's look at the contents of the first DICOM:"}}