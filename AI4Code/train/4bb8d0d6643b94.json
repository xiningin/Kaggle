{"cell_type":{"54a5d213":"code","ff9886f3":"code","d3220404":"code","7b4456e3":"code","28e05d7e":"code","a1b5c348":"code","092c7f0e":"code","3c9ed611":"code","b02ecc30":"code","8732c655":"code","bac2f087":"code","53fd232d":"code","a0d83115":"code","9e8058bf":"code","8e81abc9":"code","6f6a1496":"code","70d1d769":"code","14bbb7ee":"code","10e57ed2":"code","c435bbe8":"code","79f1c185":"code","ca0efbc9":"code","da3cf05f":"code","ca4965ba":"code","920f7cbd":"code","1bfa7f96":"code","ae891b94":"code","05baa2d3":"code","ce25139c":"code","a489b07b":"code","7001cd71":"code","a4bc684c":"code","9d498b0f":"code","12f5c43a":"code","d6c8a300":"code","279bba39":"code","eb85bd3c":"code","99fc280f":"code","bf89a6da":"markdown","26fefaad":"markdown","9c80afa6":"markdown","f2a62ab9":"markdown","959d2ca7":"markdown","32d2ba7e":"markdown","564b617a":"markdown","e2aa719c":"markdown","2f2b754a":"markdown","13b815cc":"markdown","ebc54233":"markdown","51816a50":"markdown","0abe5c4c":"markdown","9514eb90":"markdown","edb35c54":"markdown","0af29bdf":"markdown","1dd91f39":"markdown","aa2b6bb1":"markdown","9bf90484":"markdown"},"source":{"54a5d213":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport statistics as s\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ff9886f3":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","d3220404":"data.info()","7b4456e3":"data.corr()","28e05d7e":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.100, fmt= '.1f',ax=ax)\nplt.show()","a1b5c348":"data.head()","092c7f0e":"data.columns","3c9ed611":"data.tail(1) #there are 284806 rows in the dataset","b02ecc30":"data.V3.plot(kind = 'line', color = '#4253f4',label = 'V3',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.V4.plot(color = '#424244',label = 'V4',linewidth=1, alpha = 0.5,grid = True,linestyle = '-')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","8732c655":"plt.plot(data)\nplt.show()","bac2f087":"#scatter\n\ndata.plot(kind='scatter', x='V3', y='V4',alpha = 0.5,color = 'b')\nplt.xlabel('V3')            \nplt.ylabel('V4')\nplt.title('tenure MonthlyCharges Scatter Plot')  \nplt.show()","53fd232d":"#histogram\n\ndata.V3.plot(kind = 'hist',bins = 100,figsize = (12,12))\nplt.show()","a0d83115":"dictionary = {'names' : 'eray','nickname' : 'blue'}\nprint(dictionary.keys())\nprint(dictionary.values())","9e8058bf":"dictionary['names'] = \"demir\"    # update existing entry\nprint(dictionary)\ndictionary['age'] = \"25\"       # Add new entry\nprint(dictionary)\ndel dictionary['names']              # remove entry with key 'name'\nprint(dictionary)\nprint('name' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)\ndel dictionary         # delete entire dictionary   \nprint(dictionary)      #we take error and cannot see dictionary 'cause i deleted it in the previous one line","8e81abc9":"lis = [10,12,13,15,20,29,30]\n\nplt.plot(lis)\nplt.grid(color='#545387', linestyle='-',linewidth=0.2)\nplt.show()","6f6a1496":"stats.gmean(lis)      #geometric mean","70d1d769":"s.harmonic_mean(lis)   ","14bbb7ee":"np.median(lis)","10e57ed2":"series = data['V4']\nprint(type(series))\ndata_frame = data[['V4']]\nprint(type(data_frame))","c435bbe8":"x = data['V4']>15\ndata[x]","79f1c185":"data[np.logical_and(data['V4']>15, data['V3']<-20.7 )]","ca0efbc9":"dictionary = {'names' : 'eray','nickname' : 'blue'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')","da3cf05f":"for index,value in data[['V3']][0:1].iterrows():\n    print(index,\" : \",value)","ca4965ba":"i = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","920f7cbd":"def tuble_ex():\n    t = {1,2,3}\n    return(t)\na,b,c = tuble_ex()\nprint(a)\nprint(b,c)","1bfa7f96":"x = 2\ndef f(x):\n    x = 3\n    return x\nprint(x)    #global scope\nprint(f(x)) #local scope","ae891b94":"x = 2\ndef f(a): #there is no x in local scope\n    y = 2*x\n    return y\nprint(f(a)) #firstly, it looks local scope and cannot find \"x\" then looks global scope","05baa2d3":"import builtins\ndir(builtins)","ce25139c":"def square():\n    def add():\n        x = 2\n        y = 3\n        z = 2*3\n        return z\n    return add()**2\nprint(square())","a489b07b":"#default argument\n\ndef f(a, b=1, c=2):\n    x = a+b+c\n    return x\nprint(f(5))\nprint(f(5,4,3))","7001cd71":"#flexible argument\n\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nf(1,2,3,4)\n\n#**kwargs dictionary\n\ndef f(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \" : \",value)\nf(name = \"eray\",surname=\"demir\")\n    ","a4bc684c":"square = lambda x: x**2\nprint(square(5))\n\ntotal = lambda x,y,z: x+y+z\nprint(total(1,2,3))","9d498b0f":"n_list = (1,2,3)\nasd = map(lambda x:x**2,n_list)\nprint(list(asd))","12f5c43a":"name=\"eray\"\nit = iter(name)\nprint(next(it))\nprint(*it)","d6c8a300":"#zip\nprint(\"zip:\")\nlist1 = [1,2,3]\nlist2 = [4,5,6]\nz = zip(list1,list2)\nz_list = list(z)\nprint(z)\nprint(z_list)\nprint(type(z))\nprint(type(z_list))\nprint(\"\")\n#unzip\nprint(\"unzip:\")\nun_list = zip(*z_list)\nun_list1, un_list2 = list(un_list)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list1))\nprint(type(list(un_list)))","279bba39":"num1 = [1,2,3]\nnum2 = [i**2 for i in num1]\nprint(num2)","eb85bd3c":"num3 = [i**3 if i == 8 else i + 5 if i>8 else i - 1 for i in num1]\nprint(num3)","99fc280f":"average = sum(data.V1)\/len(data.V1)\nprint(average)\ndata[\"v1_average\"] = [\"upper\" if i > average else \"lower\" for i in data.V1]\ndata.loc[:10,[\"V1\",\"v1_average\"]]","bf89a6da":"<a id=\"6\"><\/a> <br>\n> **WHILE FOR LOOPS**","26fefaad":"<a id=\"7\"><\/a> <br>\n> # **DATA SCIENCE TOOL BAR**","9c80afa6":"headnote: not finished. the notebook will continue to be written.","f2a62ab9":"<a id=\"12\"><\/a> <br>\n> **ANANYMOUS FUNCTION**","959d2ca7":"zip() unzip()","32d2ba7e":"<a id=\"13\"><\/a> <br>\n> **ITERATORS**","564b617a":"<a id=\"4\"><\/a> <br>\n> **PANDAS**","e2aa719c":"<a id=\"14\"><\/a> <br>\n> **LIST COMPREHENSION**","2f2b754a":"<a id=\"9\"><\/a> <br>\n> *SCOPE*","13b815cc":"1. [Python:](#1)<br>\n    a. [Matplotlib](#2)<br>\n    b. [Median, geometric and Harmonic Mean](#5)<br>\n    c. [Dictionaries ](#3)<br>\n    d. [Pandas](#4)<br>\n    e. [While for loops](#6)<br>\n2. [Data Science Tool Box:](#7)<br>\n    a. [User Defined Function and Scope:](#8)","ebc54233":"<a id=\"11\"><\/a> <br>\n> **LAMBDA FUNCTION **","51816a50":"<a id=\"1\"><\/a> <br>\n# **PYTHON**","0abe5c4c":"<a id=\"10\"><\/a> <br>\n> **DEFAULT AND FLEXIBLE ARGUMENTS **","9514eb90":"<a id=\"8\"><\/a> <br>\n> **USER DEFINED FUNCTION AND SCOPE**","edb35c54":"<a id=\"3\"><\/a> <br>\n> **DICTIONARY**","0af29bdf":"<a id=\"9\"><\/a> <br>\n> **NESTED **","1dd91f39":"matplot has 3 easy and useful plots. these are scatter, line and histogram.\n\nin general,\n\n- line plot works better when x axis is time.\n-scatter plot works better when we wanna see diffirence between two variables.\n- histogram plot works better when we wanna see distribution of numerical data.","aa2b6bb1":"<a id=\"5\"><\/a> <br>\n> **MEDIAN, GEOMETR\u0130C AND HARMONIC MEAN**","9bf90484":"<a id=\"2\"><\/a> <br>\n**MATPLOTLIB**"}}