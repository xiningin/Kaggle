{"cell_type":{"79c34ab8":"code","aacc187e":"code","1cae5f71":"code","3f8a0497":"code","1bf02447":"code","06cb5fd7":"code","fc832bc9":"code","defc8527":"code","e4f16ee2":"code","e1739867":"code","1569e549":"code","cac6ee72":"code","5031b133":"code","ede74112":"code","41637301":"code","e0f7f003":"code","6f904cb4":"code","622320a4":"code","8e5330a0":"code","45903a90":"code","fa26155d":"code","785f8fb3":"code","8d5af182":"code","f3fd0fff":"code","a2af9871":"code","f7458b2f":"code","2c720e3b":"code","d2b49196":"code","f3453450":"code","3ad43c70":"code","74db745b":"code","88fa4a61":"code","0d6368a4":"markdown","451c6b96":"markdown","df6ece5a":"markdown","701da4ca":"markdown","2a452828":"markdown"},"source":{"79c34ab8":"import numpy as np \nimport pandas as pd\nimport math\nimport random\nimport seaborn as sns  \nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nfrom sklearn import tree\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","aacc187e":"gender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv').set_index('PassengerId')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv').set_index('PassengerId')","1cae5f71":"df = pd.concat([train, test], axis=0, sort=False) ","3f8a0497":"df.head(2)","1bf02447":"df['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()","06cb5fd7":"df['IsWomanOrBoy'] = ((df.Title == 'Master') | (df.Sex == 'female')) # !\ndf['LastName'] = df.Name.str.split(',').str[0]\nfamily = df.groupby(df.LastName).Survived\n\ndf['WomanOrBoyCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).count())\ndf['FamilySurvivedCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).sum())\ndf['FamilySurvivedCount'] = df.mask(df.IsWomanOrBoy, df.FamilySurvivedCount - df.Survived.fillna(0), axis=0)\ndf['WomanOrBoySurvived'] = df.FamilySurvivedCount \/ df.WomanOrBoyCount.replace(0, np.nan)\ndf.WomanOrBoyCount = df.WomanOrBoyCount.replace(np.nan, 0)\ndf['Alone'] = (df.WomanOrBoyCount == 0) # !\n\n# Title !\ndf['Title'] = df['Title'].replace('Ms','Miss')\ndf['Title'] = df['Title'].replace('Mlle','Miss')\ndf['Title'] = df['Title'].replace('Mme','Mrs')\n\n# Embarked, Fare !\ndf['Embarked'] = df['Embarked'].fillna('S')\nmed_fare = df.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\ndf['Fare'] = df['Fare'].fillna(med_fare)\n\n# Cabin, Deck, famous_cabin !\ndf['famous_cabin'] = df[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ndf['Deck'] = df['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\ndf.loc[(df['Deck'] == 'T'), 'Deck'] = 'A'\n\n# Family_Size !\ndf['Family_Size'] = df['SibSp'] + df['Parch'] + 1\n\n# Name_length !\ndf['Name_length'] = df['Name'].apply(len)\n\ndf.WomanOrBoySurvived = df.WomanOrBoySurvived.fillna(0)\ndf.WomanOrBoyCount = df.WomanOrBoyCount.fillna(0)\ndf.FamilySurvivedCount = df.FamilySurvivedCount.fillna(0)\ndf.Alone = df.Alone.fillna(0)","fc832bc9":"Y = df.Survived.loc[train.index].astype(int)\nX_train, X_test = df.loc[train.index], df.loc[test.index]","defc8527":"print(X_train.isnull().sum())\nprint(X_test.isnull().sum())","e4f16ee2":"cols_to_drop_train = ['Name','Ticket','Cabin']   \ncols_to_drop_test = ['Name','Ticket','Cabin', 'Survived']\nX_train = X_train.drop(cols_to_drop_train, axis=1)\nX_test = X_test.drop(cols_to_drop_test, axis=1)","e1739867":"# Determination categorical features\nnumerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ncategorical_columns = []\nfeatures = X_train.columns.values.tolist()\nfor col in features:\n    if X_train[col].dtype in numerics: continue\n    categorical_columns.append(col)\ncategorical_columns","1569e549":"# Encoding categorical features\nfor col in categorical_columns:\n    if col in X_train.columns:\n        le = LabelEncoder()\n        le.fit(list(X_train[col].astype(str).values) + list(X_test[col].astype(str).values))\n        X_train[col] = le.transform(list(X_train[col].astype(str).values))\n        X_test[col] = le.transform(list(X_test[col].astype(str).values))   ","cac6ee72":"X_train = X_train.reset_index()\nX_test = X_test.reset_index()","5031b133":"X_dropna_categor = X_train.dropna().astype(int)\nXtest_dropna_categor = X_test.dropna().astype(int)","ede74112":"# Surviving girls:\nSex_female_Survived = X_dropna_categor.loc[(X_dropna_categor.Sex == 0) & (X_dropna_categor.Survived == 1)]\n# Dead girls:\nSex_female_NoSurvived = X_dropna_categor.loc[(X_dropna_categor.Sex == 0) & (X_dropna_categor.Survived == 0)]\n# Surviving guys:\nX_Sex_male_Survived = X_dropna_categor.loc[(X_dropna_categor.Sex == 1) & (X_dropna_categor.Survived == 1)] \n# Dead guys:\nX_Sex_male_NoSurvived = X_dropna_categor.loc[(X_dropna_categor.Sex == 1) & (X_dropna_categor.Survived == 0)]\n\nX_test_male = Xtest_dropna_categor.loc[Xtest_dropna_categor.Sex == 1]\nX_test_female = Xtest_dropna_categor.loc[Xtest_dropna_categor.Sex == 0]","41637301":"# age distribution of survivors and non-survivors:\nsns.set(rc={'figure.figsize': (15, 9)})\nplt.subplot (221)\nsns.distplot(Sex_female_Survived['Age'] , kde_kws = {'color': 'g', 'lw':1, 'label': 'Sex_female_Survived' })\nplt.subplot (222)\nsns.distplot(Sex_female_NoSurvived['Age'] , kde_kws = {'color': 'r', 'lw':1, 'label': 'Sex_female_NoSurvived' })\nplt.subplot (223)\nsns.distplot(X_Sex_male_Survived['Age'] , kde_kws = {'color': 'blue', 'lw':1, 'label': 'X_Sex_male_Survived' })\nplt.subplot (224)\nsns.distplot(X_Sex_male_NoSurvived['Age'] , kde_kws = {'color': 'gray', 'lw':1, 'label': 'X_Sex_male_NoSurvived' })","e0f7f003":"female_Survived_mean, female_NoSurvived_mean = Sex_female_Survived['Age'].mean(), Sex_female_NoSurvived['Age'].mean()\nmale_Survived_mean, male_NoSurvived_mean = X_Sex_male_Survived['Age'].mean(), X_Sex_male_NoSurvived['Age'].mean()\n\nfemale_Survived_std, female_NoSurvived_std = Sex_female_Survived['Age'].std(), Sex_female_NoSurvived['Age'].std()\nmale_Survived_std, male_NoSurvived_std = X_Sex_male_Survived['Age'].std(), X_Sex_male_NoSurvived['Age'].std()\n\nfemale_std, female_mean = X_test_female['Age'].std(), X_test_female['Age'].mean()\nmale_std, male_mean = X_test_male['Age'].std(), X_test_male['Age'].mean()","6f904cb4":"# Confidence interval calculation function: \ndef derf(sample, mean, std):\n    age_shape = sample['Age'].shape[0] # sample size\n    standard_error_ofthe_mean = std \/ math.sqrt(age_shape)\n    random_mean = random.uniform(mean-(1.96*standard_error_ofthe_mean), mean+(1.96*standard_error_ofthe_mean))\n    return round(random_mean, 2)    ","622320a4":"X_train['Survived'] = X_train['Survived'].astype(int)","8e5330a0":"X_train.head(2) ","45903a90":"for i in X_train.loc[(X_train['Sex']==0) & (X_train['Survived']==1) & (X_train['Age'].isnull())].index:\n    X_train.at[i, 'Age'] = derf(Sex_female_Survived, female_Survived_mean, female_Survived_std)\n\nfor h in X_train.loc[(X_train['Sex']==0) & (X_train['Survived']==0) & (X_train['Age'].isnull())].index:\n    X_train.at[h, 'Age'] = derf(Sex_female_NoSurvived, female_NoSurvived_mean, female_NoSurvived_std)\n    \nfor l in X_train.loc[(X_train['Sex']==1) & (X_train['Survived']==1) & (X_train['Age'].isnull())].index:\n    X_train.at[l, 'Age'] = derf(X_Sex_male_Survived, male_Survived_mean, male_Survived_std)\n    \nfor b in X_train.loc[(X_train['Sex']==1) & (X_train['Survived']==0) & (X_train['Age'].isnull())].index:\n    X_train.at[b, 'Age'] = derf(X_Sex_male_NoSurvived, male_NoSurvived_mean, male_NoSurvived_std)\n    \nfor p in X_test.loc[(X_test['Sex']==1) & (X_test['Age'].isnull())].index:\n    X_test.at[p, 'Age'] = derf(X_test_male, male_mean, male_std)\n\nfor y in X_test.loc[(X_test['Sex']==0) & (X_test['Age'].isnull())].index:\n    X_test.at[y, 'Age'] = derf(X_test_female, female_mean, female_std)\n","fa26155d":"print(X_train.isnull().sum())\nprint(X_test.isnull().sum())","785f8fb3":"cor_map = plt.cm.RdBu\nplt.figure(figsize=(15,17))\nplt.title('Pearson Correlation', y=1.05, size=15)\nsns.heatmap(X_train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=cor_map, linecolor='white', annot=True)  ","8d5af182":"X_train = X_train.drop(['Survived'], axis = 1)","f3fd0fff":"rf = RandomForestClassifier()","a2af9871":"random_grid = {'criterion': ['gini', 'entropy'],\n               'bootstrap': [True, False],\n               'max_depth': [3, 5, 7, 9, 11, 13, 16, 19, 20],\n               'max_features': ['auto', 'sqrt'],\n               'min_samples_leaf': [5, 10, 15, 20, 25],\n               'min_samples_split': [40, 50, 60, 62, 64, 66, 68],\n               'n_estimators': [300, 600, 900, 1200, 1500, 1800]}","f7458b2f":"rf_search_one = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, cv=5, n_iter = 100)","2c720e3b":"print(X_train.shape)\nprint(Y.shape)\nprint(X_test.shape)","d2b49196":"rf_search_one.fit(X_train, Y)\n#rf_search_one.fit(X_train_rf_1, y_train_rf_1)\nbest_rf_s1 = rf_search_one.best_estimator_\n#best_rf_s1.fit(X_train_rf_1, y_train_rf_1)\nbest_rf_s1.fit(X_train, Y)\ny_predicted_prob_1 = best_rf_s1.predict(X_test) \nprint(best_rf_s1.classes_)\ny_predicted_prob_1 = list(y_predicted_prob_1)\nprint('finish')","f3453450":"print(rf_search_one.best_params_)","3ad43c70":"finall_F = pd.DataFrame.from_dict({'PassengerId': list(X_test.PassengerId), 'Survived': y_predicted_prob_1})","74db745b":"finall_F.head(6)","88fa4a61":"finall_F.to_csv(\"Submission_test8.csv\", index=False)","0d6368a4":"4. **Define classifiers**","451c6b96":"3. **Recover Missed Values**\n\nInitially, we divide the sample into 4 subsamples of surviving men and women and non-survivors. Next, we find the mean and standard deviations for each subsample, we need them to find the confidence interval for the location of the mean from the population. The derf function finds a confidence interval.\n","df6ece5a":"1. **Load data**","701da4ca":"2. **Feature Exploration, Engineering and Cleaning** \n\nThanks to: https:\/\/www.kaggle.com\/vbmokin\/titanic-0-83253-comparison-20-popular-models\n","2a452828":"**Thank you, look at my first work with trees and classification K means:**\n\nhttps:\/\/www.kaggle.com\/morenovanton\/titanic-random-forest-k-means-method"}}