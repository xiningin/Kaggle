{"cell_type":{"4bac829d":"code","2c360fa0":"code","c0549969":"code","af5d7c61":"code","1ff4fac5":"code","a0757b91":"code","18a58985":"markdown","2e449f9a":"markdown","7c0a02bb":"markdown","a6a47232":"markdown"},"source":{"4bac829d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c360fa0":"!pip install docarray","c0549969":"from docarray import DocumentArray, Document\n\nleft_da = DocumentArray.from_files('..\/input\/\/kaggle-pog-series-s01e01\/thumbnails\/*.jpg')","af5d7c61":"left_da.plot_image_sprites()","1ff4fac5":"def preproc(d: Document):\n    return (d.load_uri_to_image_blob()  # load\n             .set_image_blob_normalization()  # normalize color \n             .set_image_blob_channel_axis(-1, 0))  # switch color axis for the pytorch model later\n\nleft_da.apply(preproc)","a0757b91":"import torchvision\nmodel = torchvision.models.resnet50(pretrained=True)  # load ResNet50\nleft_da.embed(model, device='cuda')  # embed via GPU to speedup","18a58985":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #001f3f;\"><b style=\"color:orange;\">DocArray - The data structure for unstructured data<\/b><\/h1><\/center>\n\n\"DocArray is a library for nested, unstructured data such as text, image, audio, video, 3D mesh. It allows deep learning engineers to efficiently process, embed, search, recommend, store, transfer the data with Pythonic API.\"\n\n\"All data types: super-expressive data structure for representing complicated\/mixed\/nested text, image, video, audio, 3D mesh data.\"\n\n\"Pythonic experience: Designed to be as easy as Python list. If you know how to Python, you know how to DocArray. Intuitive idioms and type annotation simplify the code you write.\"\n\n\"Data science powerhouse: greatly accelerate data scientists work on embedding, matching, visualizing, evaluating via Torch\/Tensorflow\/ONNX\/PaddlePaddle on CPU\/GPU.\"\n\n\"Portable: ready-to-wire at anytime with efficient and compact serialization from\/to Protobuf, bytes, JSON, CSV, dataframe.\"\n\nhttps:\/\/pypi.org\/project\/docarray\/","2e449f9a":"#Acknowledgement:\n\nJina AI\n\nhttps:\/\/pypi.org\/project\/docarray\/","7c0a02bb":"#That images are so tiny that I'm in doubt if they were from Pog Series or from DocArray Totally Looks Like dataset.","a6a47232":"#Your Notebook has allocated to much memory and it\u00b4s going to be dismissed."}}