{"cell_type":{"0fd83c59":"code","aee37364":"code","81ff9782":"code","b7fe48f3":"code","3c61a70a":"code","d43575d3":"code","5a248ea4":"code","f3863bac":"code","fee8b835":"code","ef7c8082":"code","6b104309":"code","e5d92fc8":"code","efe7b312":"code","7d8335d2":"code","d0381c31":"code","160229ae":"code","7beabf0a":"code","c48e32f4":"code","5e261526":"code","968fdfa8":"code","da8c27a7":"code","4860a7b6":"code","8d8efc02":"code","cd9ef852":"code","5b5ae9f4":"code","562dc8c3":"code","af0c70e5":"code","7c21ef7b":"code","9fc814b1":"code","777b540c":"markdown","6a861887":"markdown","fae6df2c":"markdown","f8d75673":"markdown","35a92ebc":"markdown","4486cba2":"markdown","9ab69c25":"markdown","cadc0728":"markdown","7b0a0354":"markdown","454434da":"markdown"},"source":{"0fd83c59":"# \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np \nimport pandas as pd \nfrom datetime import datetime as dt\nfrom tqdm import tqdm\nimport gc\n\nfrom scipy import stats\nfrom scipy.stats import kurtosis\nfrom scipy.signal import find_peaks\n\nimport matplotlib.pyplot as plt\n\npd.set_option('display.max_columns', 900)\npd.set_option('display.max_rows', 900)\n\nimport tsfresh\nfrom tsfresh import extract_features, extract_relevant_features, select_features\nfrom tsfresh.utilities.dataframe_functions import impute\nfrom tsfresh.feature_extraction import settings\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u044f\nimport warnings\nwarnings.simplefilter('ignore')","aee37364":"# \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\ndf = pd.read_csv('..\/input\/residential-power-usage-3years-data-timeseries\/power_usage_2016_to_2020.csv')\ndf.head()","81ff9782":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0442\u0443 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430, \u0441\u0440\u0430\u0437\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 datetime\ndf = pd.read_csv('..\/input\/residential-power-usage-3years-data-timeseries\/power_usage_2016_to_2020.csv', \n                 index_col=[0], \n                 parse_dates=[0])\n\ndf.drop(['day_of_week', 'notes'], axis=1, inplace=True)\ndf.head()","b7fe48f3":"df.info()","3c61a70a":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0447\u0430\u0441\u043e\u0432\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0437\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u043c \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u044d\u043d\u0435\u0440\u0433\u0438\u0438 \u0432 \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435\ndf.resample('w').sum().head()","d43575d3":"print('\u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u044b' if df.index.is_monotonic else '\u043f\u0440\u043e\u0432\u0435\u0440\u044c \u0434\u0430\u043d\u043d\u044b\u0435')","5a248ea4":"print('\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b' if df.index.is_unique else '\u043f\u0440\u043e\u0432\u0435\u0440\u044c \u0434\u0430\u043d\u043d\u044b\u0435')","f3863bac":"df.sort_index(inplace=True)\ndf.index.is_monotonic","fee8b835":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0443\u044e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0434\u0430\u0442\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439\n\nprint('\u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439: {}'.format(df.index.min()))\nprint('\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439: {}'.format(df.index.max()))\nprint('\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a: {}'.format(df.index.max() - df.index.min()))","ef7c8082":"# \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u044d\u043d\u0435\u0440\u0433\u0438\u0438\n\ndf.columns = ['value']\ndf.head()","6b104309":"# \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\ndf['year'] = df.index.year\ndf['quarter'] = df.index.quarter\ndf['month'] = df.index.month\ndf['week'] = df.index.weekofyear\ndf['day'] = df.index.day\ndf['dayofweek'] = df.index.dayofweek\n\ndf.head()","e5d92fc8":"# \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u043e\u043a\u043d\u043e (\u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435)\n\ndf['rolling_window'] = df['value'].rolling(6).mean()\ndf.head(15)","efe7b312":"# \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u043e\u043a\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u044d\u043a\u0441\u0446\u0435\u0441\u0441\u043e\u0432\n\ndf['kurtosis'] = df['value'].rolling(6).apply(lambda x: kurtosis(x))\n","7d8335d2":"df.head(10)","d0381c31":"# \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u043e\u043a\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0438\u043a\u043e\u0432\n\ndf['peaks'] = df['value'].rolling(6).apply(lambda x: len(find_peaks(x)[0]))","160229ae":"# \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0435\u0435\u0441\u044f \u043e\u043a\u043d\u043e\n\ndf['expanding_window'] = df['value'].expanding(3).mean()\ndf.head(15)","7beabf0a":"print('\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043e\u043a\u043d\u0430 {}'.format(df.tail(1)['expanding_window'].values[0].round(5)))\nprint('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443 value {}'.format(round(df['value'].mean(), 5)))","c48e32f4":"### \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043b\u0430\u0433\u0438\ndf['lag_-1'] = df['value'].shift(-1)\ndf['lag_1'] = df['value'].shift(1)\ndf.head()","5e261526":"try:\n    df.drop('lag_-1', axis=1, inplace=True)\nexcept:\n    pass\n\n# \u041f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c\nfor i in range(1, 12):\n    df['lag_' + str(i)] = df['value'].shift(i)\n    \ndf.head(10)","968fdfa8":"# \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u043e\u043a\u043d\u043e \u043d\u0430 \u0441\u0435\u0434\u044c\u043c\u043e\u043c \u043b\u0430\u0433\u0435\n# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n\ndf['lag_7_mean'] = df['lag_7'].rolling(7).mean()","da8c27a7":"# \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 (df_temp) \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \ndf['diff'] = df['value'].diff()\n\ndf_temp = df[['value', 'year', 'quarter', 'month', 'week', 'day', 'dayofweek',\n             'rolling_window', 'expanding_window', 'diff',\n             'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5', 'lag_6', 'lag_7']]\ndf_temp.head(10)","4860a7b6":"df.dropna(inplace=True)","8d8efc02":"### \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\ndf['year'] = df['year'].apply(lambda x: 2022 - x)\n\ndf.head()","cd9ef852":" def is_dayoff(row):   \n    '''\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 1 \u0435\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0435\u043d\u044c - \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043b\u0438 \u043f\u0440\u0430\u0437\u0434\u043d\u0438\u0447\u043d\u044b\u0439, 0 - \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u043d\u0438\u0439.\n    \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u043a DataFrame.\n    \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, df['dayoff'] = df.apply(is_dayoff, axis=1)\n    \n    Parameters\n    ----------\n    row - \u0441\u0442\u0440\u043e\u043a\u0430 pandas DataFrame\n    \n    Return\n    ------\n    row - \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 pandas DataFrame\n    '''\n    \n    if row['month'] == 1 and row['day'] == 1:\n        return 1\n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0414\u0435\u043d\u044c \u041c\u0430\u0440\u0442\u0438\u043d\u0430 \u041b\u044e\u0442\u0435\u0440\u0430 \u041a\u0438\u043d\u0433\u0430\n    elif row['month'] == 1 and row['dayofweek'] == 0 and row['week'] == 8:\n        return 1\n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0434\u0435\u043d\u044c\n    elif row['month'] == 2 and row['dayofweek'] == 0 and row['week'] == 10:\n        return 1\n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0414\u0435\u043d\u044c \u043f\u0430\u043c\u044f\u0442\u0438\n    elif row['month'] == 5 and row['dayofweek'] == 0 and row['week'] == 22:\n        return 1  \n    # \u0414\u0435\u043d\u044c \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n    elif row['month'] == 7 and row['day'] == 4:\n        return 1\n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0414\u0435\u043d\u044c \u0442\u0440\u0443\u0434\u0430\n    elif row['month'] == 9 and row['dayofweek'] == 0 and row['week'] == 37:\n        return 1  \n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0414\u0435\u043d\u044c \u041a\u043e\u043b\u0443\u043c\u0431\u0430\n    elif row['month'] == 9 and row['dayofweek'] == 0 and row['week'] == 42:\n        return 1 \n    # \u0414\u0435\u043d\u044c \u0412\u0435\u0442\u0435\u0440\u0430\u043d\u043e\u0432\n    elif row['month'] == 11 and row['day'] == 11:\n        return 1\n    # \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0414\u0435\u043d\u044c \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d\u0438\u044f\n    elif row['month'] == 11 and row['dayofweek'] == 3 and row['week'] == 48:\n        return 1 \n    # \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u043e\n    elif row['month'] == 12 and row['day'] == 25:\n        return 1\n    \n    # \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435\n    elif row['dayofweek'] >= 5:\n        return 1\n    else:\n        return 0","5b5ae9f4":"df['is_dayoff'] = df.apply(is_dayoff, axis=1)\ndf.head()","562dc8c3":"import featuretools as ft\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u0438\u043d\u0434\u0435\u043a\u0441 \n\ndf_fe = pd.read_csv('..\/input\/residential-power-usage-3years-data-timeseries\/power_usage_2016_to_2020.csv', \n                 parse_dates=[0])\n\ndf_fe.drop(['day_of_week', 'notes'], axis=1, inplace=True)\ndf_fe.head()","af0c70e5":"es = ft.EntitySet(id = 'data')\nes.entity_from_dataframe(entity_id = 'timeseries', \n                         dataframe = df_fe, \n                         index='index')\n\nprimitives = ['day', 'is_weekend', 'week', 'year', 'minute', 'hour', 'weekday', 'cum_mean']    # \u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0438\u0447\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_matrix, feature_defs = ft.dfs(entityset = es,                                          # \u041a\u0430\u043a\u043e\u0439 EntiteSet \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\n                                      target_entity = 'timeseries',                            # \u041a\u0430\u043a\u043e\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\n                                      trans_primitives = primitives,                           # \u041a\u0430\u043a\u0438\u0435 \u0444\u0438\u0447\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c\n                                      verbose=1)  ","7c21ef7b":"feature_matrix.head()","9fc814b1":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439\n#ft.primitives.list_primitives()","777b540c":"### \u041a\u0443\u0440\u0441 \u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e \u0431\u043e\u0439\u0446\u0430\n\n#### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6a861887":"#### \u0420\u0435\u0441\u0435\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","fae6df2c":"## \u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c, \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0437\u044c\u044f.\n\n\u042d\u0442\u043e\u0442 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u044c\u0438 \"\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432\" \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0435 NewTechAudit.  \n\u0420\u0430\u0437\u0434\u0435\u043b\u044b \u0442\u0435\u0442\u0440\u0430\u0434\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430.  ","f8d75673":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 1796 \u0434\u043d\u0435\u0439 \u0438 23 \u0447\u0430\u0441\u0430. \u042d\u0442\u043e \u0447\u0443\u0442\u044c \u043c\u0435\u043d\u0435\u0435 5 \u043b\u0435\u0442. \u0425\u043e\u0440\u043e\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u0447\u0435\u0431\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.  \n\u041d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0441\u0443\u043c\u043c\u044b \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u044d\u043d\u0435\u0440\u0433\u0438\u0438 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0447\u0430\u0441.","35a92ebc":"### \u0411\u043e\u043d\u0443\u0441 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0434\u043e\u0447\u0438\u0442\u0430\u043b \u0434\u043e \u043a\u043e\u043d\u0446\u0430\n\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438\n\nhttps:\/\/towardsdatascience.com\/feature-engineering-on-time-series-data-transforming-signal-data-of-a-smartphone-accelerometer-for-72cbe34b8a60  \nhttps:\/\/otus.ru\/nest\/post\/1024\/  \nhttps:\/\/tsfresh.readthedocs.io\/en\/latest\/text\/forecasting.htmlhttps:\/\/tsfresh.readthedocs.io\/en\/latest\/text\/forecasting.html","4486cba2":"\u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u044b, \u043d\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043d\u043e\u0432\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","9ab69c25":"### \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f","cadc0728":"#### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043c\u043e\u043d\u043e\u0442\u043e\u043d\u043d\u043e\u0441\u0442\u044c","7b0a0354":"### \u0414\u0435\u043d\u044c, \u043e\u043a\u043d\u043e, \u043b\u0430\u0433 \u0438 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c","454434da":"## \u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435 - \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u044b\u0439 \u0434\u0435\u043d\u044c\n\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0435\u043d\u044c \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u043c. \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 0, \u0435\u0441\u043b\u0438 \u0434\u0435\u043d\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0439, \u0438 1, \u0435\u0441\u043b\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u0437\u0434\u043d\u0438\u043a\u0438."}}