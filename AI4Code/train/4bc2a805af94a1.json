{"cell_type":{"aaef1915":"code","423850f0":"code","037f92ef":"code","4b1a49cd":"code","c953e3fb":"code","80220a5b":"code","42bf57f4":"code","0486a6a5":"code","1f61638e":"code","8f5ec767":"code","15e13554":"code","13eda306":"code","9788b073":"code","8891a57a":"code","c43e8e4f":"code","c1fa2b92":"code","dad276be":"code","0058b110":"code","6761cbc7":"code","4d8e2290":"code","6c0023b7":"code","0a076c78":"code","70d54fd5":"code","f2195ed1":"code","3c1cf20c":"code","625fd860":"code","f7aade8c":"code","4fbbcd0c":"code","b44ecf94":"code","697d080e":"code","97b8854c":"code","92b756c3":"code","8b2d7b29":"code","ce904043":"code","4540023e":"code","78097a27":"code","036f3262":"code","bd4a7243":"markdown","64689de3":"markdown","c8e02d61":"markdown","a003d56d":"markdown","bcf3b5fd":"markdown","92ce21a3":"markdown"},"source":{"aaef1915":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        print(\"Import complete\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","423850f0":"# Loading the dataset\navocado_filepath = '..\/input\/avocado-prices\/avocado.csv'\ndf = pd.read_csv(avocado_filepath, parse_dates=['Date'])","037f92ef":"df.head()","4b1a49cd":"df.info()","c953e3fb":"df = df.rename(columns={'4046':'Small\/Med Hass', '4225':'Large Hass', '4770':'Extra Large Hass'})","80220a5b":"df.columns","42bf57f4":"df = df.drop('Unnamed: 0', axis=1)","0486a6a5":"df.isnull().any()","1f61638e":"print(df['type'].unique(), \"\\n\")\nprint(df['type'].value_counts())","8f5ec767":"df['region'].unique()","15e13554":"import plotly.express as px\n\nfig = px.histogram(df, x='AveragePrice', color='type', marginal='rug', hover_data=df.columns)\nfig.show()","13eda306":"fig = px.bar(df, x='AveragePrice', y='region', color='type', hover_data=df.columns, height=1000)\nfig.show()","9788b073":"df_date_sorted = df.sort_values(by='Date')\n\ndf3 = df_date_sorted.loc[df_date_sorted.type == 'conventional']\ndf4 = df_date_sorted.loc[df_date_sorted.type == 'organic']","8891a57a":"df3_alt = df3.groupby('Date').sum()\ndf4_alt = df4.groupby('Date').sum()","c43e8e4f":"fig = px.line(df3_alt, x=df3_alt.index, y='Total Bags',title=\n              'Sales of conventional avocados across the United States (2015-2018)')\nfig.show()","c1fa2b92":"fig = px.line(df4_alt, x=df4_alt.index, y='Total Bags', title=\n              'Sales of organic avocados across the United States (2015-2018)')\nfig.show()","dad276be":"df_sf = df_date_sorted.loc[df_date_sorted.region == 'SanFrancisco']\ndf_htsprng = df_date_sorted.loc[df_date_sorted.region == 'HartfordSpringfield']\ndf_ny = df_date_sorted.loc[df_date_sorted.region == 'NewYork']\n\ndf_sf = df_sf.groupby('Date').sum()\ndf_htsprng = df_htsprng.groupby('Date').sum()\ndf_ny = df_ny.groupby('Date').sum()","0058b110":"fig = px.line(df_sf, x=df_sf.index, y='Total Bags', title=\n              'Total sales of avocados in San Francisco, CA, US (2015-2018)')\nfig.show()","6761cbc7":"fig = px.line(df_htsprng, x=df_htsprng.index, y='Total Bags', title=\n              'Total sales of avocados in the Hartford-Springfield area, CT\/MA, US (2015-2018)')\nfig.show()","4d8e2290":"fig = px.line(df_ny, x=df_ny.index, y='Total Bags', title=\n              'Total sales of avocados in New York, US (2015-2018)')\nfig.show()","6c0023b7":"fig = px.imshow(df.corr())\nfig.show()","0a076c78":"df_copy = df.copy()\n\ndf1 = df_copy.drop(['Date', 'AveragePrice'], axis=1)\ndf2 = df_copy.pop('AveragePrice')\n\nfor colname in df1.select_dtypes('object'):\n    df1[colname], _ = df1[colname].factorize()\n    \ndiscrete_features = df1.dtypes == int\nprint(discrete_features)","70d54fd5":"from sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features)\n    mi_scores = pd.Series(mi_scores, name='MI Scores', index=df1.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\nmi_scores = make_mi_scores(df1, df2, discrete_features)\nmi_scores","f2195ed1":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nlabel_encoder = LabelEncoder()\ndf1['type'] = label_encoder.fit_transform(df1['type'])\n\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\ndf_ohe = pd.get_dummies(data=df1, columns=['region'])\n","3c1cf20c":"df_ohe","625fd860":"df2","f7aade8c":"feature_names = ['Total Volume',\n                'Total Bags',\n                'type',\n                'region']\n\ncolumns_to_drop = ['Small\/Med Hass',\n                  'Large Hass',\n                   'Extra Large Hass',\n                  'Small Bags',\n                  'Large Bags',\n                  'XLarge Bags']\n\nX = df_ohe.drop(columns_to_drop, axis=1)\ny = df2","4fbbcd0c":"from sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)","b44ecf94":"from sklearn.metrics import mean_absolute_error, r2_score\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: {}  \\t\\t Mean Absolute Error:  {}\".format(max_leaf_nodes, my_mae))","697d080e":"avocado_model = DecisionTreeRegressor(max_leaf_nodes=500, random_state=1)\n\navocado_model.fit(train_X, train_y)","97b8854c":"print(\"Prediction for the first five entries:\")\ndisplay(val_X[:5])\nprint(\"The predictions are:\")\nprint(avocado_model.predict(val_X))","92b756c3":"# Out of sample\npredicted_avocado_prices = avocado_model.predict(X)\nmean_absolute_error(y, predicted_avocado_prices)","8b2d7b29":"# In sample\nval_avocado_prices = avocado_model.predict(val_X)\nprint(\"DecisionTreeRegressor\")\nprint(\"Mean Absolute Error: {}\".format(mean_absolute_error(val_y, val_avocado_prices)))\nprint(\"r2_score: {}\".format(r2_score(val_y, val_avocado_prices)))","ce904043":"from sklearn.ensemble import RandomForestRegressor\n\nforest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\navocado_preds = forest_model.predict(val_X)\nprint(\"RandomForestRegressor\")\nprint(\"r2_score: {}\".format(r2_score(val_y, avocado_preds)))\nprint(\"Mean Absolute Error: {}\".format(mean_absolute_error(val_y, avocado_preds)))","4540023e":"from xgboost import XGBRegressor\n\nxgb_model = XGBRegressor()\nxgb_model.fit(train_X, train_y)\n\nxgb_preds = xgb_model.predict(val_X)\n\nprint(\"XGBoost\")\nprint(\"r2_score: {}\".format(r2_score(val_y, xgb_preds)))\nprint(\"Mean Absolute Error: {}\".format(mean_absolute_error(xgb_preds, val_y)))\n","78097a27":"scores = -1 * cross_val_score(forest_model, X, y,\n                             cv=5,\n                             scoring='neg_mean_absolute_error')\n\nprint('MAE scores:', scores)","036f3262":"print(\"Average MAE score (across experiments):\")\nprint(scores.mean())","bd4a7243":"# Loading the data","64689de3":"# Feature selection and engineering","c8e02d61":"# Avocado Prices in the United States (2015-18)\n\nAnalysing the prices by state and type, and price changes throughout the period and training a regression model, ready to predict the forecast for the future of avocado prices.\n","a003d56d":"# Training the model","bcf3b5fd":"# Preprocessing the data","92ce21a3":"# Exploratory Data Analysis (EDA)"}}