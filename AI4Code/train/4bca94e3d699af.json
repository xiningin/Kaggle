{"cell_type":{"a4cb131f":"code","f5dc357f":"code","95260b05":"code","55d75ec5":"code","bb11a822":"code","63d88299":"code","45bbbfb8":"code","3906e3d5":"code","6cccb080":"code","94c96c5b":"code","81845a41":"code","5144629c":"code","7c2a9b0f":"markdown","ff9bc56c":"markdown","dea6257f":"markdown","7c28aaee":"markdown","b6d81e8f":"markdown","e61e5361":"markdown"},"source":{"a4cb131f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport numpy as np \nimport os \nimport pandas as pd \nfrom keras.utils import to_categorical\nfrom keras import models\nfrom keras import layers\nimport math\nfrom sklearn.model_selection import train_test_split\nimport random","f5dc357f":"nRowsRead = 50000 # size of dataset\ndf1 = pd.read_csv('..\/input\/zomato.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'zomato.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')\n","95260b05":"D = np.array(df1.values)\nD = D[:,[5,6,8,9,11,12]]\nprint(D)\n\n#One-hot encoded location\nLDict = {}\ncnt = 0\nfor i in range(len(D[:,2])):\n    if(type(D[i,2])==str):\n        x = D[i,2]\n        if x not in LDict:\n            LDict.update({x : cnt})\n            cnt = cnt + 1\nprint(LDict)\nfor i in range(len(D[:,2])):\n    if (type(D[i,2]) == str):\n        D[i,2] = LDict[D[i,2]]\n    else:\n        D[i,2] = random.randint(0,len(LDict)-1)\nL_onehot  = to_categorical(D[:,2])\nprint(L_onehot)","55d75ec5":"#Restaurant type dictionary\nTDict = {}\ncnt = 0\nfor i in range(len(D[:,3])):\n    if(type(D[i,3])==str):\n        x = D[i,3].split(',')\n        #print(x)\n        x = np.asarray(x)\n        #print(x)\n        for j in range(len(x)):\n            x[j] = x[j].strip()\n            if x[j] not in TDict:\n                TDict.update({x[j] : cnt})\n                cnt = cnt+1\nprint(TDict)","bb11a822":"#Cost per person\nCost = np.zeros((len(D[:,5]),1))\nfor i in range(len(D[:,5])):\n    if(type(D[i,5]) == str):\n        #print(D[i,5])\n        D[i,5] = D[i,5].replace(',','')\n        if(D[i,5] != 'B'):\n            Cost[i] = int(D[i,5])\n        else:\n            Cost[i] = 0\nprint(Cost)","63d88299":"#ratings\nS = np.zeros((len(D[:,0]),1))\nfor i in range(len(D[:,0])):\n    if(type(D[i,0]) == str):\n        x = D[i,0].split('\/')\n        x = np.asarray(x)\n        #print(x)\n        if(x[0] != 'NEW' and x[0] != '-'):\n            S[i] = float(x[0])\n        else:\n            S[i] = 0\nprint(S)","45bbbfb8":"#Cuisine dictionary\nCDict = {}\ncnt = 0\nfor i in range(len(D[:,4])):\n    if(type(D[i,4])==str):\n        x = D[i,4].split(',')\n        #print(x)\n        x = np.asarray(x)\n        #print(x)\n        for j in range(len(x)):\n            x[j] = x[j].strip()\n            if x[j] not in CDict:\n                CDict.update({x[j] : cnt})\n                cnt = cnt+1\nprint(CDict)\n            \n    \n","3906e3d5":"#Final Data Entry\nprint(len(D))\nX = np.zeros((len(D),len(LDict) + len(TDict) + len(CDict) + 2))\nfor i in range(len(X)):\n    y = np.zeros(len(CDict))\n    t = np.zeros(len(TDict))\n    if(type(D[i,4])==str):\n        x = D[i,4].split(',')\n        #print(x)\n        x = np.asarray(x)\n        #print(x)\n        cnt = 0\n        for j in range(len(x)):\n            x[j] = x[j].strip()\n            val = CDict[x[j]]\n            y[val] = 1\n            cnt = cnt+1\n        #Checking if every restaurant has a valid cuisine\n        if(np.sum(y)==0):\n            print(\"Indefinite cuisine\")\n    if(type(D[i,3])==str):\n        x1 = D[i,3].split(',')\n        #print(x)\n        x1 = np.asarray(x1)\n        #print(x)\n        cnt = 0\n        for j in range(len(x1)):\n            x1[j] = x1[j].strip()\n            val = TDict[x1[j]]\n            t[val] = 1\n            cnt = cnt+1    \n    #print(len(L_onehot[i]))\n    X[i,:] = np.r_[L_onehot[i],t,y,D[i,1],Cost[i]]\nprint(X)\n\n#Cuisine scores\nY  = np.zeros((len(D),1))\nfor i in range(len(Y)):\n    Y[i] = S[i]\n        \nprint(Y)","6cccb080":"#Preparing training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1)\nprint(X_train.shape[1])","94c96c5b":"#Constructing NN model\nmodel = models.Sequential()\nmodel.add(layers.Dense(100, activation = \"relu\", input_shape=(X_train.shape[1], )))\n# Hidden - Layers\nmodel.add(layers.Dense(100, activation = \"relu\"))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Dense(10, activation = \"relu\"))\n# Output- Layer\nmodel.add(layers.Dense(y_train.shape[1], activation = \"linear\"))\nmodel.summary()","81845a41":"#Compiling model\nmodel.compile(\n optimizer = \"adam\",\n loss = \"mean_squared_error\",\n)","5144629c":"#Training model\nresults = model.fit(\n X_train, y_train,\n epochs= 10,\n batch_size = 100,\n validation_data = (X_test,y_test )\n)\n","7c2a9b0f":"The neural network consists of 2 hidden layers, using Relu activation. The output layer uses a linear activation. Dropout is also included to allow the model to generalize better.","ff9bc56c":"The dataset is loaded and transformed into the required format before feeding the model. Location and cuisine were one-hot encoded.","dea6257f":"The model runs using an Adam optimizer, with a mean squared loss function.","7c28aaee":"A provisional restaraunt rating system that estimates the success of an establishment based on it's location, type and cuisine among other factors. The model is a neural network that runs on a Keras framework, trained on the 'Zomato Bangalore Restaurants' dataset curated by Himanshu Poddar.\n","b6d81e8f":"The validation loss is quite satisfactory, and is an indication of the overall accuracy of the model.","e61e5361":"Data now ready for training and testing. Split into training and validation sets."}}