{"cell_type":{"2a94beb7":"code","46ad198a":"code","2f489545":"code","3daa65ab":"code","88b20c54":"code","b5ca8186":"code","d748e110":"code","40644449":"code","c5f381fa":"code","056a2578":"code","27cef023":"code","80c6bcd9":"code","43f3f65e":"code","e9d6621b":"code","7d407f24":"code","7569c8b2":"code","a9f324e7":"code","4c95e288":"code","b3a838be":"code","1f5f0988":"code","7e96996f":"code","3e7f74c2":"code","59d1af74":"code","487c261a":"code","acc21f89":"code","e6c970b7":"code","0717d579":"code","8ef82466":"code","fa4d28c5":"code","b13faedc":"code","d1802c57":"code","63c10ea7":"code","3ec3b033":"code","d33fc562":"code","95108f6e":"code","ea69f608":"code","554c3cfa":"code","1a36220e":"code","3a446b5b":"code","a6d65103":"code","4ed53d64":"code","48a42a37":"code","5b38c7dc":"code","4bd0182c":"code","e3363b5d":"code","baa60637":"code","73fcad9b":"code","22d53ae2":"code","e0e69494":"code","c0d7b126":"code","e1a23771":"code","d3b2ecf5":"code","f37e5a3e":"code","dccdd42d":"code","6ac63c74":"code","6fdd5945":"code","895641c4":"markdown","fdfdcc94":"markdown","d9f446ee":"markdown","37a79e95":"markdown","2b9aa40c":"markdown","c28e229d":"markdown","20c3e105":"markdown","41cfd2e6":"markdown","7eab7726":"markdown"},"source":{"2a94beb7":"import pandas as pd \nimport datetime\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np; np.random.seed(0)\nimport os\nimport matplotlib.pyplot as plt\n\n\n\n","46ad198a":" data_train = pd.read_csv(\"train.csv\") \ndTrain = pd.DataFrame(data_train)\ndTrain.head()","2f489545":"dTrain = dTrain.drop(columns=['Bump','Roundabout']) ","3daa65ab":"dTrain.groupby('Side').count()","88b20c54":"dTrain.head()","b5ca8186":"dTrain['Crossing'] = dTrain['Crossing'].astype('int')\ndTrain['Give_Way'] = dTrain['Give_Way'].astype('int')\ndTrain['Junction'] = dTrain['Junction'].astype('int')\ndTrain['No_Exit'] = dTrain['No_Exit'].astype('int')\ndTrain['Railway'] = dTrain['Railway'].astype('int')\ndTrain['Stop'] = dTrain['Stop'].astype('int')\ndTrain['Amenity'] = dTrain['Amenity'].astype('int')\ndTrain.head()","d748e110":"enc = LabelEncoder()\nenc.fit(dTrain['Side'])\ndTrain['Side'] = enc.transform(dTrain['Side'])","40644449":"dTrain.groupby('Side').count()","c5f381fa":"dTrain.dtypes","056a2578":"#convert timestamp to dateTime\ndTrain['timestamp']=pd.to_datetime(dTrain['timestamp'])","27cef023":"dTrain.head()","80c6bcd9":"#split date from time\ndTrain['date'] = [d.date() for d in dTrain['timestamp']]","43f3f65e":"dTrain.head()","e9d6621b":"dTrain.dtypes","7d407f24":"correlation = dTrain['Side'].corr(dTrain['Severity'])\ncorrelation","7569c8b2":"#get hours from time alone but int\ndTrain['Hour'] = dTrain['timestamp'].dt.hour\ndTrain.head()","a9f324e7":"#convert from int to str\ndTrain['Hour']=dTrain['Hour'].apply(str)\ndTrain[\"Hour\"] = dTrain['Hour'].astype(str)+':00:00'","4c95e288":"dTrain.dtypes","b3a838be":"#put hour str in time formate\ndTrain['Hour'] = pd.to_datetime(dTrain['Hour'],format= '%H:%M:%S' ).dt.time","1f5f0988":"dTrain[\"Hour\"] = dTrain['Hour'].astype(str)","7e96996f":"dTrain.head()","3e7f74c2":"#date and time str to concatenate later\ndTrain.dtypes","59d1af74":"dTrain[\"Hour\"]= dTrain[\"Hour\"].str.split(\":\", n = 1, expand = True)\ndTrain['Hour'] = dTrain['Hour'].astype(int)\ndTrain.head()","487c261a":"data_weather = pd.read_csv(\"weather-sfcsv.csv\") \ndWeather = pd.DataFrame(data_weather)\n# Preview the first 5 lines of the loaded data \ndWeather.head()","acc21f89":"dWeather['Year'] = dWeather['Year'].apply(str)\ndWeather['Month'] = dWeather['Month'].apply(str)\ndWeather['Day'] = dWeather['Day'].apply(str)","e6c970b7":"dWeather[\"date\"] = pd.to_datetime(dWeather['Year'].astype(str)+'-'+dWeather['Month']+'-'+dWeather['Day']).dt.date\ndWeather.head()","0717d579":"dWeather[\"date\"]=dWeather[\"date\"].apply(str)","8ef82466":"dWeather['Weather_Condition'] = dWeather['Weather_Condition'].apply(str)","fa4d28c5":"enc = LabelEncoder()\nenc.fit(dWeather['Weather_Condition'])\ndWeather['Weather_Condition'] = enc.transform(dWeather['Weather_Condition'])","b13faedc":"dWeather = dWeather.drop(columns=['Year', 'Month','Day'])","d1802c57":"dWeather.head()","63c10ea7":"dWeather.head()","3ec3b033":"dWeather.dtypes","d33fc562":"dWeather.to_csv('weather.csv')","95108f6e":"data_holidays = pd.read_excel(\"holidays.xlsx\") \ndholidays = pd.DataFrame(data_holidays)\ndholidays.head()","ea69f608":"dholidays['date']=pd.to_datetime(dholidays['date']).dt.date\ndholidays.head()","554c3cfa":"dholidays.dtypes","1a36220e":"dTrain_dWeather = dTrain.merge(dWeather, left_on=[\"date\",\"Hour\"], right_on=[\"date\",\"Hour\"], how = 'left')","3a446b5b":"dTrain_dWeather.head()","a6d65103":"dfinal = dTrain_dWeather.merge(dholidays, on=\"date\", how = 'left')","4ed53d64":"dfinal.head()","48a42a37":"dfinal['Wind_Chill(F)'] = dfinal['Wind_Chill(F)'].fillna((dfinal['Wind_Chill(F)'].mean()))\ndfinal['Precipitation(in)'] = dfinal['Precipitation(in)'].fillna((dfinal['Precipitation(in)'].mean()))\ndfinal.head()","5b38c7dc":"dfinal['description'] = dfinal['description'].fillna(0)\ndfinal[\"description\"]=dfinal[\"description\"].apply(lambda x: 1 if x!=0 else 0)","4bd0182c":"dfinal['Hour'] = dfinal['Hour'].astype(np.int)\ndfinal['Hour'] = dfinal['Hour'].replace([0,1,2,3,4,5,6,7],1)\ndfinal['Hour'] = dfinal['Hour'].replace([8,9,10,11,12,13,14,15],2)\ndfinal['Hour']= dfinal['Hour'].replace([16,17,18,19,20,21,22,23,24],3)\ndfinal.head()","e3363b5d":"dfinal['Weather_Condition'] = dfinal['Weather_Condition'].replace(['Partly Cloudy','Mostly Cloudy','Cloudy','Scattered Clouds'],'Cloudy')","baa60637":"#dfinal.drop_duplicates(subset='ID', keep=\"first\", inplace=True)\n#dfinal","73fcad9b":"dfinal.head()","22d53ae2":"dfinal.to_csv('finalDataset.csv')","e0e69494":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(dfinal, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['ID', 'Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']\n","c0d7b126":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\nX_train = X_train[['Lat', 'Lng', 'Distance(mi)']]\nX_val = X_val[['Lat', 'Lng', 'Distance(mi)']]","e1a23771":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","d3b2ecf5":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","f37e5a3e":"#from google.colab import files\n#files.download('kaggle_submission.csv')","dccdd42d":"test_df = pd.read_csv(os.path.join('test.csv'))\ntest_df.head()","6ac63c74":"X_test = test_df.drop(columns=['ID'])\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test[['Lat', 'Lng', 'Distance(mi)']]\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","6fdd5945":"test_df[['ID', 'Severity']].to_csv('kaggle_submission.csv', index=False)","895641c4":"Data Splitting ","fdfdcc94":"   Weather Dataset\n   \n\n","d9f446ee":"Merge Train with Weather by date","37a79e95":"Holidays Dataset","2b9aa40c":"Merge Train & Weather with Holidays by date","c28e229d":"Convert to int for replacment, (intervals)","20c3e105":"Submission File Generation","41cfd2e6":"Merging Dtatasets","7eab7726":"Model Training \n"}}