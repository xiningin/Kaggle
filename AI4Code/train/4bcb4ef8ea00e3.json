{"cell_type":{"fe3aca4d":"code","045a257b":"code","7f16deb9":"code","967fc7f2":"code","221750a5":"code","3e8f7723":"code","7d39334c":"code","bf2c2641":"code","a9e64531":"code","6e74957b":"code","c4858314":"code","59c0ca02":"code","99a05c89":"code","21a34f99":"code","21b21cad":"code","c8c6b7b1":"code","b9bb22ce":"code","b5f16594":"code","6c304857":"code","81da04dd":"code","6698305f":"code","6d3738e3":"code","1c2ae738":"code","457531e8":"code","1fb13add":"code","5c8f245d":"code","e9fd8ef7":"code","a3a76ac8":"code","a42abcf6":"code","849e2b53":"code","53d57c1c":"code","3061ec20":"code","6b0b9c64":"code","71a8f616":"markdown","af415913":"markdown","921329d8":"markdown"},"source":{"fe3aca4d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport warnings\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","045a257b":"df = pd.read_csv(\"..\/input\/UnivBank.csv\")","7f16deb9":"df.head()","967fc7f2":"df.tail()","221750a5":"len(df)","3e8f7723":"df.shape","7d39334c":"df.columns","bf2c2641":"df['Personal Loan'].value_counts()","a9e64531":"df['Income'].unique()\n# df['Income'].plot(kind='box')","6e74957b":"# df['ZIP Code'].unique()","c4858314":"df['Family'].unique()","59c0ca02":"df['CCAvg'].unique()\n# df['CCAvg'].plot(kind='box')","99a05c89":"df['Education'].value_counts()","21a34f99":"# df['Mortgage'].unique()","21b21cad":"df['Securities Account'].value_counts()","c8c6b7b1":"df['CD Account'].value_counts()","b9bb22ce":"df['Online'].value_counts()","b5f16594":"df['CreditCard'].value_counts()","6c304857":"df.dtypes","81da04dd":"df.duplicated().sum()","6698305f":"df.isna().sum()","6d3738e3":"df['Experience'].unique()","1c2ae738":"df['Experience'].replace(-1, 0, inplace=True)\ndf['Experience'].replace(-2, 0, inplace=True)\ndf['Experience'].replace(-3, 0, inplace=True)","457531e8":"df['Experience'].unique()","1fb13add":"df['Age'].unique()","5c8f245d":"x = df.drop(columns=['Personal Loan'])\nx.columns","e9fd8ef7":"y = df[['Personal Loan']]\ny.columns","a3a76ac8":"def split_fit_predict(algorithm, x, y, scaler = None, test_size = 0.25, kernel = 'rbf', C = 1.0, degree = 3):\n    train_x, test_x, train_y, test_y = train_test_split(x, y, test_size = test_size)\n    if(algorithm == 'Logistic'):\n        model = LogisticRegression()\n        model.fit(train_x, train_y)\n        predict_y = model.predict(test_x)\n        print(\"Accuracy Score: \", accuracy_score(test_y, predict_y))\n        predict_y\n    elif(algorithm == 'SVC'):\n        train_x_scaled = scaler.fit_transform(train_x)\n        test_x_scaled = scaler.transform(test_x)\n        model = SVC()\n        model.fit(train_x_scaled, train_y)\n        predict_y = model.predict(test_x_scaled)\n        print(\"Accuracy Score: \", accuracy_score(test_y, predict_y))\n        print(\"\\n\")\n        predict_y\n        ","a42abcf6":"print(\"Logistic Regression - Prediction:\")\nsplit_fit_predict('Logistic', x, y, 0.30)","849e2b53":"print(\"SVM - SVC - Prediction:\")\nfor kernel in ['linear', 'poly', 'rbf', 'sigmoid']:\n    print(\"For kernel '{0}': \".format(kernel))\n    split_fit_predict('SVC', x, y, StandardScaler(), 0.30, kernel)","53d57c1c":"for c in np.logspace(3,-1, base = 2, num = 6):\n    print(\"For penalty '{0}':\".format(c))\n    split_fit_predict('SVC', x, y, StandardScaler(), 0.30, 'sigmoid', c)","3061ec20":"for degree in range(2,6):\n    print(\"For degree '{0}':\".format(degree))\n    split_fit_predict('SVC', x, y, StandardScaler(), 0.30, 'sigmoid', 2.63, degree)","6b0b9c64":"original_score = 0.9144\nbest_score = 0.9746666666666667\nimprovement = np.abs(np.round(100*(original_score - best_score)\/original_score,2))\nprint('overall improvement is {} %'.format(improvement))","71a8f616":"<h2>Degree Tuning<\/h2>","af415913":"<h2>Kernel Tuning<\/h2>","921329d8":"<h2>Penalty Tuning<\/h2>"}}