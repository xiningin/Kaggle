{"cell_type":{"8933b55b":"code","db5413d2":"code","99cb37f1":"code","ecbcc50e":"code","b9042891":"code","778bc992":"code","56526102":"code","d674da59":"code","77740f89":"code","98d7a62c":"code","756f463f":"code","13e1b85d":"code","871f03e8":"code","9f0e24ef":"code","d3862ef0":"code","8015229f":"code","d34fa877":"code","1785f190":"code","a8b53895":"code","3645ddb6":"code","2942872c":"code","0f9c249b":"code","ad6cc969":"code","2e1b908a":"code","c0232f09":"code","09d250a0":"code","52e4ad72":"code","70cd8b11":"code","7dff89b2":"code","3b5e362a":"code","a4b04204":"code","706cbffa":"code","096a6cb5":"code","60df66d6":"code","0e394a71":"code","ab32f04a":"code","2a79cd45":"code","5df8049f":"code","d20b6fb9":"code","a9c5ea89":"code","79396c3b":"code","49cf3b64":"code","5b89fde8":"code","bb29a345":"code","235980f4":"code","3f05a1fc":"code","049ecbde":"code","b3c5d41e":"code","20000ac9":"code","7a384ce7":"code","2632f70d":"code","c466376d":"code","f21c5228":"code","7fc7bfbc":"code","6d901acc":"code","d244f03e":"code","e7d4b010":"code","289a0fd2":"code","b34dac43":"code","563e8672":"code","f0397bdf":"code","8a2d5b08":"code","2b74809f":"code","b6250027":"code","1ef70120":"code","c5468afd":"code","662dd1ed":"code","3883cd44":"code","108f2673":"code","4eb080a6":"markdown","b826e9c0":"markdown","21ea58b3":"markdown","cce584bb":"markdown","df58809b":"markdown","cc84e846":"markdown","3eec1d26":"markdown","8ee31fdf":"markdown","b4b12acc":"markdown","7d9e9298":"markdown","de4eae12":"markdown","c3961b4b":"markdown","e6c62b2e":"markdown","eaa053e8":"markdown","741eb6dd":"markdown"},"source":{"8933b55b":"import numpy as np\nimport category_encoders as ce\nimport pandas as pd\nimport matplotlib.pyplot as plt","db5413d2":"SalePriceColumn = pd.DataFrame({\"SalePrice\":[0,0,0,]})\n\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\",\n                      index_col=\"Id\", keep_default_na=False)\ndf_test = df_test.join(SalePriceColumn).fillna(0)\ndf_test","99cb37f1":"nan_cols = []\nfor column in df_test.columns:\n    if df_test[column].isna().sum() > 0:  # if there are nans\n        nan_cols.append(column)\n        \nnan_cols","ecbcc50e":"df_test.isna().sum().sum()","b9042891":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\",\n                       index_col=\"Id\", keep_default_na=False)\ndf_train","778bc992":"df_train.columns","56526102":"nan_cols = []\nfor column in df_train.columns:\n    if df_train[column].isna().sum() > 0:  # if there are nans\n        nan_cols.append(column)\n        \nnan_cols","d674da59":"df_train.isna().sum().sum()","77740f89":"df_train[\"MSSubClass\"].unique()   # already numerical values, so let\\`s keep untouched","98d7a62c":"df_test[\"CentralAir\"].unique()","756f463f":"one_hot_cols = [\"MSZoning\", \"Street\", \"Alley\", \"LandContour\", \"LotConfig\", \"Neighborhood\", \"Condition1\",\n               \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\",\n               \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \"Heating\", \"Electrical\",\n               \"GarageType\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]\n\nordinal_cols = [\"LotShape\", \"Utilities\", \"LandSlope\", \"ExterQual\", \"ExterCond\", \"BsmtQual\", \"BsmtCond\",\n               \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \"KitchenQual\", \"Functional\",\n                \"FireplaceQu\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PavedDrive\", \"PoolQC\", \"Fence\",]\n\nmapping = [\n    {\"col\":\"LotShape\", \"mapping\":{\"IR3\":-1, \"IR2\":0, \"IR1\":1, \"Reg\":2}},\n    {\"col\":\"Utilities\", \"mapping\":{\"ELO\":-1, \"NoSeWa\":0, \"NA\":0, \"NoSewr\":1, \"AllPub\":2}},\n    {\"col\":\"LandSlope\", \"mapping\":{\"Sev\":-1, \"Mod\":0, \"Gtl\":1}},\n    {\"col\":\"ExterQual\", \"mapping\":{\"Po\":-2, \"Fa\":-1, \"TA\":0, \"Gd\":1, \"Ex\":2}},\n    {\"col\":\"ExterCond\", \"mapping\":{\"Po\":-2, \"Fa\":-1, \"TA\":0, \"Gd\":1, \"Ex\":2}},\n    {\"col\":\"BsmtQual\", \"mapping\":{\"NA\":-1,\"Po\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}},\n    {\"col\":\"BsmtCond\", \"mapping\":{\"NA\":-1,\"Po\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}},\n    {\"col\":\"BsmtExposure\", \"mapping\":{\"NA\":-1, \"No\":0, \"Mn\":1, \"Av\":2, \"Gd\":3}},\n    {\"col\":\"BsmtFinType1\", \"mapping\":{\"NA\":-1, \"Unf\":0, \"LwQ\":1, \"Rec\":2, \"BLQ\":3, \"ALQ\":4, \"GLQ\":5}},\n    {\"col\":\"BsmtFinType2\", \"mapping\":{\"NA\":-1, \"Unf\":0, \"LwQ\":1, \"Rec\":2, \"BLQ\":3, \"ALQ\":4, \"GLQ\":5}},\n    {\"col\":\"HeatingQC\", \"mapping\":{\"Po\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}},\n    {\"col\":\"KitchenQual\", \"mapping\":{\"Po\":0, \"NA\":0, \"Fa\":1, \"TA\":2, \"Gd\":3, \"Ex\":4}},\n    {\"col\":\"Functional\", \"mapping\":{\"Sal\":-2, \"Sev\":-1, \"Maj2\":0, \"NA\":0, \"Maj1\":1, \"Mod\":2, \"Min2\":3,\n                                    \"Min1\":4, \"Typ\":5}},\n    {\"col\":\"FireplaceQu\", \"mapping\":{\"NA\":-2, \"Po\":-1, \"Fa\":0, \"TA\":1, \"Gd\":2, \"Ex\":3}},\n    {\"col\":\"GarageFinish\", \"mapping\":{\"NA\":-1, \"Unf\":0, \"RFn\":1, \"Fin\":2}},\n    {\"col\":\"GarageQual\", \"mapping\":{\"NA\":-2, \"Po\":-1, \"Fa\":0, \"TA\":1, \"Gd\":2, \"Ex\":3}},\n    {\"col\":\"GarageCond\", \"mapping\":{\"NA\":-2, \"Po\":-1, \"Fa\":0, \"TA\":1, \"Gd\":2, \"Ex\":3}},\n    {\"col\":\"PavedDrive\", \"mapping\":{\"N\":-1, \"P\":0, \"Y\":1}},\n    {\"col\":\"PoolQC\", \"mapping\":{\"NA\":-1, \"Fa\":0, \"TA\":1, \"Gd\":2, \"Ex\":3}},\n    {\"col\":\"Fence\", \"mapping\":{\"NA\":-1, \"MnWw\":0, \"GdWo\":1, \"MnPrv\":2, \"GdPrv\":3}},\n    {\"col\":\"CentralAir\", \"mapping\":{\"Y\":1, \"N\":0}},\n]\n\none_hot_encoder = ce.OneHotEncoder(cols=one_hot_cols, return_df=True, use_cat_names=True,\n                           handle_unknown=\"value\", handle_missing=\"value\").fit(df_train.append(other=df_test))\n\nordinal_encoder = ce.OrdinalEncoder(cols=ordinal_cols, return_df=True, mapping=mapping,\n                                   handle_unknown=\"value\", handle_missing=\"value\")\n","13e1b85d":"encoded_train_df = one_hot_encoder.transform(df_train)\nencoded_train_df = ordinal_encoder.fit_transform(encoded_train_df)\nencoded_train_df","871f03e8":"df_train[\"LotArea\"].describe()    # no str values only numbers","9f0e24ef":"encoded_train_df.replace(to_replace=\"NA\", value=0, inplace=True)\nencoded_train_df = encoded_train_df.astype(dtype=\"float64\")\n\n#df_train[\"LotFrontage\"].describe()   # replace NA by 0\nencoded_train_df[\"LotFrontage\"].describe()","d3862ef0":"df_train[\"OverallQual\"].unique()   # already numerical","8015229f":"df_train[\"OverallCond\"].unique()   # already numerical","d34fa877":"df_train[\"YearBuilt\"].unique()    # already numerical","1785f190":"df_train[\"YearRemodAdd\"].unique()    # already numerical","a8b53895":"df_train[df_train[\"MasVnrArea\"] == \"NA\"][\"MasVnrArea\"]    # replace NA by 0","3645ddb6":"df_train[\"BsmtFinSF1\"].describe()   # already numerical","2942872c":"df_train[\"BsmtFinSF2\"].describe()   # already numerical","0f9c249b":"df_train[\"BsmtUnfSF\"].describe()   # already numerical","ad6cc969":"df_train[\"TotalBsmtSF\"].describe()   # already numerical","2e1b908a":"df_train[\"1stFlrSF\"].describe()   # already numerical","c0232f09":"df_train[\"2ndFlrSF\"].describe()   # already numerical","09d250a0":"df_train[\"LowQualFinSF\"].describe()   # already numerical","52e4ad72":"df_train[\"GrLivArea\"].describe()   # already numerical","70cd8b11":"df_train[\"BsmtFullBath\"].describe()   # already numerical","7dff89b2":"df_train[\"BsmtHalfBath\"].describe()   # already numerical","3b5e362a":"df_train[\"FullBath\"].describe()   # already numerical","a4b04204":"df_train[\"HalfBath\"].describe()   # already numerical","706cbffa":"df_train[\"BedroomAbvGr\"].describe()   # already numerical","096a6cb5":"df_train[\"KitchenAbvGr\"].describe()   # already numerical","60df66d6":"df_train[\"TotRmsAbvGrd\"].unique()   # already numerical","0e394a71":"df_train[\"Fireplaces\"].unique()   # already numerical","ab32f04a":"df_train[\"GarageYrBlt\"].unique()   # replace NA by 0","2a79cd45":"df_train[\"GarageCars\"].unique()   # already numerical","5df8049f":"df_train[\"GarageArea\"].describe()   # already numerical","d20b6fb9":"df_train[\"WoodDeckSF\"].describe()   # already numerical","a9c5ea89":"df_train[\"OpenPorchSF\"].describe()   # already numerical","79396c3b":"df_train[\"EnclosedPorch\"].describe()   # already numerical","49cf3b64":"df_train[\"3SsnPorch\"].unique()   # already numerical","5b89fde8":"df_train[\"ScreenPorch\"].describe()   # already numerical","bb29a345":"df_train[\"PoolArea\"].describe()   # already numerical","235980f4":"df_train[\"MiscVal\"].unique()   # already numerical","3f05a1fc":"df_train[\"MoSold\"].describe()   # already numerical","049ecbde":"df_train[\"YrSold\"].describe()   # already numerical","b3c5d41e":"encoded_test_df = one_hot_encoder.transform(df_test)\nencoded_test_df = ordinal_encoder.fit_transform(encoded_test_df)\nencoded_test_df.replace(to_replace=\"NA\", value=0, inplace=True)\nencoded_test_df = encoded_test_df.astype(dtype=\"float64\")\nencoded_test_df","20000ac9":"encoded_test_df[\"MSZoning_RM\"].unique()","7a384ce7":"encoded_test_df.shape","2632f70d":"encoded_train_df.shape","c466376d":"encoded_train_df.to_csv(\"prepared_train.csv\")\nencoded_test_df.to_csv(\"prepared_test.csv\")","f21c5228":"train_df = pd.read_csv(\"prepared_train.csv\", index_col=\"Id\", keep_default_na=False)\ntrain_df","7fc7bfbc":"test_df = pd.read_csv(\"prepared_test.csv\", index_col=\"Id\", keep_default_na=False)\ntest_df","6d901acc":"Y = train_df[\"SalePrice\"].to_numpy()\nY","d244f03e":"def min_max_scaler(column):\n    minimum = train_df[column].describe()[\"min\"]\n    maximum = train_df[column].describe()[\"max\"]\n    train_df[column] = (train_df[column] - minimum)\/(maximum - minimum)\n    \n    minimum = test_df[column].describe()[\"min\"]\n    maximum = test_df[column].describe()[\"max\"]\n    test_df[column] = (test_df[column] - minimum)\/(maximum - minimum)\n\ntrain_df[\"YrSold\"].describe()","e7d4b010":"min_max_scaler(\"LotFrontage\")\nmin_max_scaler(\"LotArea\")\nmin_max_scaler(\"YearBuilt\")\nmin_max_scaler(\"YearRemodAdd\")\nmin_max_scaler(\"MasVnrArea\")\nmin_max_scaler(\"BsmtFinSF1\")\nmin_max_scaler(\"BsmtFinSF2\")\nmin_max_scaler(\"BsmtUnfSF\")\nmin_max_scaler(\"TotalBsmtSF\")\nmin_max_scaler(\"1stFlrSF\")\nmin_max_scaler(\"2ndFlrSF\")\nmin_max_scaler(\"LowQualFinSF\")\nmin_max_scaler(\"GrLivArea\")\nmin_max_scaler(\"GarageYrBlt\")\nmin_max_scaler(\"GarageArea\")\nmin_max_scaler(\"WoodDeckSF\")\nmin_max_scaler(\"OpenPorchSF\")\nmin_max_scaler(\"EnclosedPorch\")\nmin_max_scaler(\"3SsnPorch\")\nmin_max_scaler(\"ScreenPorch\")\nmin_max_scaler(\"PoolArea\")\nmin_max_scaler(\"MiscVal\")\nmin_max_scaler(\"YrSold\")\n\ntrain_df.columns","289a0fd2":"X = train_df.drop(columns=\"SalePrice\", inplace=False).to_numpy()\nX","b34dac43":"train_num = 1100    # quantity of train records\nx_train, y_train = X[:train_num], Y[:train_num]\nx_cv, y_cv = X[train_num:], Y[train_num:]\n\ny_train = np.reshape(y_train, [y_train.shape[0], 1])    # convert (num,) into (num,1)\ny_cv = np.reshape(y_cv, [y_cv.shape[0], 1])             # helpful when broadcasting\n\nprint(f\"x_train.shape = {x_train.shape}\")\nprint(f\"y_train.shape = {y_train.shape}\")\nprint(f\"x_cv.shape = {x_cv.shape}\")\nprint(f\"y_cv.shape = {y_cv.shape}\")","563e8672":"m, n = x_train.shape\nepochs = 15000\n\nalpha = 10**(-7)\nW = np.random.random([n, 1])  # weights\nb = 1   # bias","f0397bdf":"train_cost = []\ncv_cost = []\nfor epoch in range(epochs):\n    # cross validation\n    h_cv = x_cv.dot(W) + b\n    C_cv = np.sqrt(np.sum((np.log1p(h_cv) - np.log1p(y_cv))**2)\/y_cv.shape[0])\n    cv_cost.append(C_cv)\n    \n    # forward propagation\n    h = x_train.dot(W) + b\n    C = np.sqrt(np.sum((np.log1p(h) - np.log1p(y_train))**2)\/m)   # RMSLE\n    \n    train_cost.append(C)\n    if epoch % (epochs\/10) == 0:     # display only 10 times; adaptive to any epochs number\n        print(f\"Train cost at {epoch} = {C}\")\n        print(f\"CV cost at {epoch} = {C_cv}\\n\")\n    \n    grad = x_train.T.dot(h-y_train)\n    W = W - alpha*grad\n    b = b - alpha*np.sum(grad)\n    \nplt.title(\"Cost\")\nplt.plot(range(epochs), train_cost, \"r-\")\nplt.plot(range(epochs), cv_cost, \"g-\")\nplt.show()","8a2d5b08":"ex = 300     # index of example house\npred = np.sum(x_cv[ex].dot(W) + b)\npred","2b74809f":"y_cv[ex][0]    # true value","b6250027":"y_cv[ex][0] - pred   # difference between them","1ef70120":"x_test = test_df.drop(columns=\"SalePrice\", inplace=False).to_numpy()\nx_test.shape","c5468afd":"y_test = x_test.dot(W) + b\ny_test.shape","662dd1ed":"submission_df = pd.DataFrame(data=y_test, index=test_df.index, columns=[\"SalePrice\",])\n\nsubmission_df","3883cd44":"true_vals = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\",\n                        index_col=\"Id\", keep_default_na=False)\ntrue_vals","108f2673":"submission_df.to_csv(\"submission.csv\")","4eb080a6":"# Linear Regression","b826e9c0":"# Sets are checked no issues found","21ea58b3":"# Pre-processing of features","cce584bb":"## No NaNs in test set","df58809b":"## normalization","cc84e846":"## Loss function is RMSLE","3eec1d26":"## Creating lists of columns, for which one hot \/ ordinal encoding would be suitable","8ee31fdf":"### Initializing parameters","b4b12acc":"## No NaNs in train set","7d9e9298":"## Train data set","de4eae12":"## Dividing into train and cross validation (cv) sets","c3961b4b":"## Test data set","e6c62b2e":"# Preparing data","eaa053e8":"### Submission","741eb6dd":"## Pre-processing Test set"}}