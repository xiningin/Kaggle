{"cell_type":{"502d4f97":"code","ddb5ae74":"code","a579fde8":"code","6520c444":"code","8f9f87fc":"code","80dcae90":"code","b4f0bcdc":"code","b1972b50":"code","41611446":"code","2a41271e":"code","bae04e50":"code","acfc8d3f":"code","a804c4af":"code","9319fb49":"code","92aca897":"code","894ad72b":"code","05c3d408":"code","214cb610":"code","f38e3aef":"code","88470876":"markdown","e9399d2a":"markdown","11269d0b":"markdown","eed17876":"markdown"},"source":{"502d4f97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddb5ae74":"import datetime as dt\nimport pandas as pd","a579fde8":"df = pd.read_csv(\"\/kaggle\/input\/online-retail-ii-uci\/online_retail_II.csv\")\ndf","6520c444":"df.info()","8f9f87fc":"# Let's convert invoice date to date.\ndf['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n","80dcae90":"#Examine the descriptive statistics of the data set.\ndf.head()\ndf.shape\ndf.describe().T","b4f0bcdc":"# Are there any missing observations in the dataset? If yes, how many missing observations in which variable?\n\ndf.isnull().values.any()\ndf.isnull().sum()","b1972b50":"# Subtract Missing Observations from the Data Set.\ndf.dropna(inplace=True)","41611446":"# How many unique items?\n\"\"\"\" We expect it to be the same, but it's not the same. \nThere may be products written incorrectly in the description. It makes more sense to use StackCode \"\"\"\n\n\nprint(df[\"Description\"].nunique())\nprint(df[\"StockCode\"].nunique())","2a41271e":"# How Many of Which Product Are There?\ndf[\"Description\"].value_counts()","bae04e50":"# Rank the 5 most ordered products from most to least.\ndf.groupby(\"Description\").agg({\"Quantity\": \"sum\"}).sort_values(\"Quantity\", ascending=False).head(5)\n","acfc8d3f":"# The 'C' in the invoices shows the canceled transactions. Remove the canceled transactions from the dataset.\ndf = df[~df[\"Description\"].str.contains(\"C\", na=False)]","a804c4af":"# Create a variable named 'Total Price' that represents the total earnings per invoice.\n\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\ndf","9319fb49":"\n# Calculating RFM metrics\ndf[\"InvoiceDate\"].max()\ntoday_date = dt.datetime(2011, 12, 11)\nrfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda InvoiceDate: (today_date - InvoiceDate.max()).days,\n                                     'Invoice': lambda Invoice : Invoice.nunique(),\n                                     'TotalPrice': lambda TotalPrice : TotalPrice.sum()\n                                     })\nrfm.columns = ['recency', 'frequency', 'monetary']\nrfm = rfm[(rfm['monetary'] > 0)]\nrfm\n","92aca897":"# Generating RFM scores\nrfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\nrfm[\"frequency_score\"] = pd.qcut(rfm[\"frequency\"].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\nrfm[\"monetary_score\"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])\n\nrfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str))","894ad72b":"rfm.head(10)","05c3d408":"# Defining RFM scores as segments\nseg_map = {\n        r'[1-2][1-2]': 'hibernating',\n        r'[1-2][3-4]': 'at_risk',\n        r'[1-2]5': 'cant_loose',\n        r'3[1-2]': 'about_to_sleep',\n        r'33': 'need_attention',\n        r'[3-4][4-5]': 'loyal_customers',\n        r'41': 'promising',\n        r'51': 'new_customers',\n        r'[4-5][2-3]': 'potential_loyalists',\n        r'5[4-5]': 'champions'\n    }\n\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\n\n","214cb610":"rfm.head(10)","f38e3aef":"rfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg([\"mean\", \"count\"])\n","88470876":"![Ekran Resmi 2022-01-03 23.45.00.png](attachment:476bf230-4034-44d0-8765-eeda4e155d5d.png)","e9399d2a":"\n## Business Problem :\n\nAn e-commerce company wants to segment its customers and determine marketing strategies according to these segments.\n\n## Method :\n\n### RFM : Recency, frequency, monetary value used to identify organization's best customers by measuring and analyzing spending habits.\n\n![RFM.png](attachment:27bbc0eb-3c58-420f-9967-3f843a9e2efa.png)\n\n## Data Set :\n\nOnline Retail II data set includes the sales of a UK-based online store between 01\/12\/2009 - 09\/12\/2011.\n\n## Variable:\n\n* InvoiceNo \u2013 Invoice Number\n\n    If this code starts with C, it means that the operation has been cancelled.\n\n* StockCode \u2013 Product code Unique number for each product.\n\n* Description \u2013 Product name\n\n* Quantity \u2013 Number of products\n\n    It expresses how many of the products on the invoices have been sold.\n\n* InvoiceDate \u2013 Invoice date\n\n* UnitPrice \u2013 Invoice price (Sterling)\n\n* CustomerID \u2013 Unique customer number\n\n* Country \u2013 Country name","11269d0b":"\n#  Let's Interpret Segments\n\n\n**champions** : As expected, it is the segment with the largest frequency value and the smallest recency value.\nWe can say that these are the most important customers. They shop actively and frequently. These customers are premium customers.\nWe can think like Discount coupons can be defined for these users. \n\n**new_customers** : Since there are new customers, it is important to make these customers loyal customers.\nIn this respect, welcome campaigns can be organized by email marketing to these customers.\n\n\n**cant_loose** : These customers are customers with a high frequency of shopping. \nSo when they shop, they can earn us well. But they haven't been shopping for a long time.\nWith this in mind, an email marketing can be done here as well.\nIt's time to buy a new one considering the products you bought in your previous shopping. \nIf you buy this product again, 10% discount can be provided.\n","eed17876":"Segments that I find important :\n* champions,\n* new_customers\n* cant_loose"}}