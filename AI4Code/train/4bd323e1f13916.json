{"cell_type":{"91928a0e":"code","9cf273f5":"code","a07f04ad":"code","c2f62c2c":"code","5f13d106":"code","8c6906ec":"code","0db74974":"code","3fbbd5b2":"code","96dc7f8c":"code","085dc216":"code","a40bdac9":"code","bca61725":"code","ee06471b":"code","f4bcbcb9":"code","b469a7ba":"code","f06b3cce":"code","e87a496a":"code","3ddf9761":"code","bf4c714b":"code","2f164eed":"code","15a37700":"code","2bbe653a":"code","057ddb2a":"code","bdfed738":"code","79015430":"code","888989dc":"code","b1799a55":"code","de0ba456":"code","aeca30f7":"code","7946a7ec":"code","fc6e3520":"code","da83901e":"code","0d79204e":"code","e34c3112":"code","48d7ff2b":"code","520fa84a":"code","77a83174":"code","6d9c40e3":"code","8013a644":"code","c5cfe32c":"code","e71e14b0":"code","0ae5febc":"code","f459c368":"code","c796fdac":"code","d49f489b":"code","267651ea":"code","65b4ef56":"code","a9720c4d":"code","c98a8f80":"code","2f8b3186":"code","a9b117ad":"code","acb2c629":"code","71ddba74":"code","ef69d250":"code","eeb38a31":"code","a727a649":"code","69d88c98":"code","f5c27e28":"code","98e0fc79":"code","baeddfd3":"code","cc43d602":"code","e4a29cc1":"code","45855cc8":"code","330f1ecb":"code","3901f452":"code","8166ef0f":"code","d36d368f":"markdown"},"source":{"91928a0e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9cf273f5":"cars = pd.read_csv('..\/input\/car-price\/CarPrice_Assignment.csv')\ncars.head()","a07f04ad":"cars.shape","c2f62c2c":"cars.info()","5f13d106":"cars.describe()","8c6906ec":"#Splitting company name from CarName column\nCompanyName = cars['CarName'].apply(lambda x : x.split(' ')[0])\ncars.insert(3,\"CompanyName\",CompanyName)\ncars.drop(['CarName'],axis=1,inplace=True)\ncars.head()","0db74974":"cars.CompanyName.unique()","3fbbd5b2":"cars.CompanyName = cars.CompanyName.str.lower()\n\ndef replace_name(a,b):\n    cars.CompanyName.replace(a,b,inplace=True)\n\nreplace_name('maxda','mazda')\nreplace_name('porcshce','porsche')\nreplace_name('toyouta','toyota')\nreplace_name('vokswagen','volkswagen')\nreplace_name('vw','volkswagen')\n\ncars.CompanyName.unique()","96dc7f8c":"cars.loc[cars.duplicated()]","085dc216":"cars.columns","a40bdac9":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(cars.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=cars.price)\n\nplt.show()","bca61725":"print(cars.price.describe(percentiles = [0.25,0.50,0.75,0.85,0.90,1]))","ee06471b":"\n\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = cars.CompanyName.value_counts().plot.bar()\nplt.title('Companies Histogram')\nplt1.set(xlabel = 'Car company', ylabel='Frequency of company')\n\nplt.subplot(1,3,2)\nplt1 = cars.fueltype.value_counts().plot.bar()\nplt.title('Fuel Type Histogram')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')\n\nplt.subplot(1,3,3)\nplt1 = cars.carbody.value_counts().plot.bar()\nplt.title('Car Type Histogram')\nplt1.set(xlabel = 'Car Type', ylabel='Frequency of Car type')\n\nplt.show()","f4bcbcb9":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Symboling Histogram')\nsns.countplot(cars.symboling, palette=(\"cubehelix\"))\n\nplt.subplot(1,2,2)\nplt.title('Symboling vs Price')\nsns.boxplot(x=cars.symboling, y=cars.price, palette=(\"cubehelix\"))\n\nplt.show()","b469a7ba":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Engine Type Histogram')\nsns.countplot(cars.enginetype, palette=(\"Blues_d\"))\n\nplt.subplot(1,2,2)\nplt.title('Engine Type vs Price')\nsns.boxplot(x=cars.enginetype, y=cars.price, palette=(\"PuBuGn\"))\n\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['enginetype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(figsize=(8,6))\nplt.title('Engine Type vs Average Price')\nplt.show()\n","f06b3cce":"plt.figure(figsize=(25, 6))\n\ndf = pd.DataFrame(cars.groupby(['CompanyName'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Company Name vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['fueltype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Fuel Type vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(cars.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Car Type vs Average Price')\nplt.show()","e87a496a":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Door Number Histogram')\nsns.countplot(cars.doornumber, palette=(\"plasma\"))\n\nplt.subplot(1,2,2)\nplt.title('Door Number vs Price')\nsns.boxplot(x=cars.doornumber, y=cars.price, palette=(\"plasma\"))\n\nplt.show()\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Aspiration Histogram')\nsns.countplot(cars.aspiration, palette=(\"plasma\"))\n\nplt.subplot(1,2,2)\nplt.title('Aspiration vs Price')\nsns.boxplot(x=cars.aspiration, y=cars.price, palette=(\"plasma\"))\n\nplt.show()\n","3ddf9761":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n    plt.title(x+' Histogram')\n    sns.countplot(cars[x],palette=(\"magma\"))\n    plt.subplot(4,2,(fig+1))\n    plt.title(x+' vs Price')\n    sns.boxplot(x=cars[x], y=cars.price, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('enginelocation', 1)\nplot_count('cylindernumber', 3)\nplot_count('fuelsystem', 5)\nplot_count('drivewheel', 7)\n\nplt.tight_layout()","bf4c714b":"def scatter(x,fig):\n    plt.subplot(5,2,fig)\n    plt.scatter(cars[x],cars['price'])\n    plt.title(x+' vs Price')\n    plt.ylabel('Price')\n    plt.xlabel(x)\n\nplt.figure(figsize=(10,20))\n\nscatter('carlength', 1)\nscatter('carwidth', 2)\nscatter('carheight', 3)\nscatter('curbweight', 4)\n\nplt.tight_layout()","2f164eed":"def pp(x,y,z):\n    sns.pairplot(cars, x_vars=[x,y,z], y_vars='price',size=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('enginesize', 'boreratio', 'stroke')\npp('compressionratio', 'horsepower', 'peakrpm')\npp('wheelbase', 'citympg', 'highwaympg')","15a37700":"np.corrcoef(cars['carlength'], cars['carwidth'])[0, 1]","2bbe653a":"#Fuel economy\ncars['fueleconomy'] = (0.55 * cars['citympg']) + (0.45 * cars['highwaympg'])","057ddb2a":"#Binning the Car Companies based on avg prices of each Company.\ncars['price'] = cars['price'].astype('int')\ntemp = cars.copy()\ntable = temp.groupby(['CompanyName'])['price'].mean()\ntemp = temp.merge(table.reset_index(), how='left',on='CompanyName')\nbins = [0,10000,20000,40000]\ncars_bin=['Budget','Medium','Highend']\ncars['carsrange'] = pd.cut(temp['price_y'],bins,right=False,labels=cars_bin)\ncars.head()","bdfed738":"plt.figure(figsize=(8,6))\n\nplt.title('Fuel economy vs Price')\nsns.scatterplot(x=cars['fueleconomy'],y=cars['price'],hue=cars['drivewheel'])\nplt.xlabel('Fuel Economy')\nplt.ylabel('Price')\n\nplt.show()\nplt.tight_layout()","79015430":"plt.figure(figsize=(25, 6))\n\ndf = pd.DataFrame(cars.groupby(['fuelsystem','drivewheel','carsrange'])['price'].mean().unstack(fill_value=0))\ndf.plot.bar()\nplt.title('Car Range vs Average Price')\nplt.show()","888989dc":"cars_lr = cars[['price', 'fueltype', 'aspiration','carbody', 'drivewheel','wheelbase',\n                  'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'boreratio','horsepower', \n                    'fueleconomy', 'carlength','carwidth', 'carsrange']]\ncars_lr.head()","b1799a55":"sns.pairplot(cars_lr)\nplt.show()","de0ba456":"# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n# Applying the function to the cars_lr\n\ncars_lr = dummies('fueltype',cars_lr)\ncars_lr = dummies('aspiration',cars_lr)\ncars_lr = dummies('carbody',cars_lr)\ncars_lr = dummies('drivewheel',cars_lr)\ncars_lr = dummies('enginetype',cars_lr)\ncars_lr = dummies('cylindernumber',cars_lr)\ncars_lr = dummies('carsrange',cars_lr)","aeca30f7":"cars_lr.head()","7946a7ec":"cars_lr.shape","fc6e3520":"from sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(cars_lr, train_size = 0.7, test_size = 0.3, random_state = 100)","da83901e":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_vars = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','fueleconomy','carlength','carwidth','price']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","0d79204e":"df_train.head()","e34c3112":"df_train.describe()","48d7ff2b":"#Correlation using heatmap\nplt.figure(figsize = (30, 25))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","520fa84a":"#Dividing data into X and y variables\ny_train = df_train.pop('price')\nX_train = df_train","77a83174":"#RFE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","6d9c40e3":"lm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 10)\nrfe = rfe.fit(X_train, y_train)","8013a644":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","c5cfe32c":"X_train.columns[rfe.support_]","e71e14b0":"X_train_rfe = X_train[X_train.columns[rfe.support_]]\nX_train_rfe.head()","0ae5febc":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","f459c368":"X_train_new = build_model(X_train_rfe,y_train)","c796fdac":"X_train_new = X_train_rfe.drop([\"twelve\"], axis = 1)","d49f489b":"X_train_new = build_model(X_train_new,y_train)","267651ea":"X_train_new = X_train_new.drop([\"fueleconomy\"], axis = 1)","65b4ef56":"X_train_new = build_model(X_train_new,y_train)","a9720c4d":"checkVIF(X_train_new)","c98a8f80":"X_train_new = X_train_new.drop([\"curbweight\"], axis = 1)","2f8b3186":"X_train_new = build_model(X_train_new,y_train)","a9b117ad":"checkVIF(X_train_new)","acb2c629":"X_train_new = X_train_new.drop([\"sedan\"], axis = 1)","71ddba74":"X_train_new = build_model(X_train_new,y_train)","ef69d250":"checkVIF(X_train_new)","eeb38a31":"X_train_new = X_train_new.drop([\"wagon\"], axis = 1)","a727a649":"X_train_new = build_model(X_train_new,y_train)","69d88c98":"checkVIF(X_train_new)","f5c27e28":"#Dropping dohcv to see the changes in model statistics\nX_train_new = X_train_new.drop([\"dohcv\"], axis = 1)\nX_train_new = build_model(X_train_new,y_train)\ncheckVIF(X_train_new)","98e0fc79":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)","baeddfd3":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                   \nplt.xlabel('Errors', fontsize = 18)   ","cc43d602":"y_test = df_test.pop('price')\nX_test = df_test","e4a29cc1":"# Now let's use our model to make predictions.\nX_train_new = X_train_new.drop('const',axis=1)\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_new.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","45855cc8":"y_pred = lm.predict(X_test_new)","330f1ecb":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)","3901f452":"fig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)   ","8166ef0f":"print(lm.summary())","d36d368f":"# Car Price Prediction\n"}}