{"cell_type":{"d564509f":"code","bf2faba0":"code","044fee1a":"code","311bb250":"code","fe099e92":"code","390eddbf":"code","f3bf80a6":"code","ce34b631":"code","75733799":"code","e95eee9a":"code","af0f121a":"markdown","08ebd24f":"markdown","3e40afe4":"markdown","7836f895":"markdown"},"source":{"d564509f":"#Number manipulation\nimport numpy as np\n\n#Data Manipulation\nimport pandas as pd\n\n#Plotting Libraries\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","bf2faba0":"#Some configuration settings\n%matplotlib inline\npd.set_option(\"display.max_columns\", 100)","044fee1a":"df = pd.read_csv(\"..\/input\/diamonds.csv\", index_col=0)","311bb250":"sns.distplot(df['carat'])","fe099e92":"import scipy.stats as stats\nfrom PyAstronomy import pyaC\n\nx = np.linspace(0, 3, 1000)\n\n# compute density function\nnparam_density = stats.kde.gaussian_kde(df.carat.ravel())\nnparam_density = nparam_density(x)\n\n# compute gradient (derivative 1)\ngrad = np.gradient(nparam_density)\n\n# Get coordinates and indices of zero crossings\nxcross, grad_cross_idx = pyaC.zerocross1d(x, grad, getIndices=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# plot density histogram\nax.hist(df.carat, bins=50, normed=True, alpha=0.5)\n\n# plot density functions\nax.plot(x, nparam_density, 'r-', label='density')\nax.plot(x, grad, 'b-', label='density derivative')\n\n# Add vertical line where the zero line is crossed\npeaks = []\nfor idx, pos in enumerate(grad_cross_idx):\n    # only show peaks, ignore valleys\n    if grad[pos] > 0:\n        peaks.append(xcross[idx])\n        ax.axvline(x=xcross[idx], color='g', alpha=0.5, label='peak')\n","390eddbf":"print(np.round(peaks, 1))","f3bf80a6":"sns.distplot(df['price'])","ce34b631":"sns.scatterplot(x=\"carat\", y=\"price\", hue=\"clarity\", data=df.sample(10000))","75733799":"sns.distplot(df[df.price > 10000].price)","e95eee9a":"import scipy.stats as stats\nfrom PyAstronomy import pyaC\n\nvalues = df[df.price > 10000].price.ravel() \n\nx = np.linspace(np.min(values) - 1000, np.max(values) + 1000, 2000)\n\n# compute density function\nnparam_density = stats.kde.gaussian_kde(values)\nnparam_density = nparam_density(x)\n\n# compute gradient (derivative 1)\ngrad = np.gradient(nparam_density)\n\n# Get coordinates and indices of zero crossings\nxcross, grad_cross_idx = pyaC.zerocross1d(x, grad, getIndices=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# plot density histogram\nax.hist(values, bins=50, normed=True, alpha=0.5)\n\n# plot density functions\nax.plot(x, nparam_density, 'r-', label='density')\nax2 = ax.twinx()\nax2.plot(x, grad, 'b-', label='density derivative')\n","af0f121a":"### Now we want to detect the \"hidden data\"","08ebd24f":"### Imports","3e40afe4":"# Diamonds Dataset - Toy Kaggle: find carat peaks","7836f895":"### Getting the data"}}