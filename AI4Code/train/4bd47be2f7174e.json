{"cell_type":{"798e4868":"code","208db77d":"code","4268f02b":"code","69eebad3":"code","c2ffd8ff":"code","2eb24100":"code","9e8ad8e7":"code","8ea5d630":"code","07ce3f75":"code","394ae430":"code","2b3558ed":"code","86b79069":"code","59a1b826":"code","73400209":"code","d0df4e8d":"markdown","31f3a840":"markdown","64ed6270":"markdown","56310c70":"markdown","bec03ab5":"markdown","aa96e6de":"markdown","8359b654":"markdown","7711592f":"markdown","9dd3853c":"markdown","6cb9c650":"markdown"},"source":{"798e4868":"!pip install -q quick-ml","208db77d":"import tensorflow as tf\nimport quick_ml\n\nprint(\"quick_ml version -> \", quick_ml.__version__)","4268f02b":"from quick_ml.begin_tpu import define_tpu_strategy, get_training_dataset, get_validation_dataset, get_test_dataset","69eebad3":"strategy, tpu = define_tpu_strategy()","c2ffd8ff":"from kaggle_datasets import KaggleDatasets\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cats-dogs-tfrecords-192x192')\n\nprint(GCS_DS_PATH)\n\ntrain_tfrec_path = '\/train.tfrecords'\nval_tfrec_path = '\/val.tfrecords'\n\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nEPOCHS = 5\nSTEPS_PER_EPOCH = 14961 \/\/ BATCH_SIZE\nprint(\"STEPS PER EPOCH -> \", STEPS_PER_EPOCH)\n\ndictionary_labeled = \"{'image_raw' : tf.io.FixedLenFeature([], tf.string), 'label' : tf.io.FixedLenFeature([], tf.int64)}\"\nIMAGE_SIZE = \"192,192\"\n\nfrom quick_ml.begin_tpu import get_labeled_tfrecord_format\nget_labeled_tfrecord_format(dictionary_labeled, IMAGE_SIZE)","2eb24100":"from quick_ml.load_models_quick import create_model","9e8ad8e7":"with strategy.scope():\n    model = create_model(1, model_name = 'EfficientNetB1', classification_model = 'default', freeze = False, \n                        input_shape =[192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer= 'rmsprop',\n                        loss = 'binary_crossentropy', metrics = 'accuracy')\n    ","8ea5d630":"from quick_ml.augments import augment_and_train","07ce3f75":"from quick_ml.augments import define_augmentations","394ae430":"define_augmentations(flip_left_right = True, hue = 0.2, contrast = (0.1,0.4), brightness = 0.3)","2b3558ed":"from quick_ml.augments import define_callbacks\n\ndefine_callbacks(lr_scheduler = 'rampup')","86b79069":"augment_and_train(model, GCS_DS_PATH, train_tfrec_path, val_tfrec_path, BATCH_SIZE, EPOCHS, STEPS_PER_EPOCH, plot = False)","59a1b826":"with strategy.scope():\n    model = create_model(1, model_name = 'EfficientNetB1', classification_model = 'default', freeze = False, \n                        input_shape =[192,192,3], activation = 'sigmoid', weights = 'imagenet', optimizer= 'rmsprop',\n                        loss = 'binary_crossentropy', metrics = 'accuracy')","73400209":"augment_and_train(model, GCS_DS_PATH, train_tfrec_path, val_tfrec_path, BATCH_SIZE, EPOCHS, STEPS_PER_EPOCH, plot = True)","d0df4e8d":"### Augment & Train w\/ Plot","31f3a840":"## Official Website -> [quick_ml](http:\/\/www.antoreepjana.wixsite.com\/quick-ml)","64ed6270":"## Single Model Training","56310c70":"### Define Callbacks (for Training w\/ Augmentation)","bec03ab5":"### Define the augmentations","aa96e6de":"### Installation & Imports","8359b654":"##### Please Note :- Callbacks for Training with Augmentation need to be by defined by the following method. Callbacks without augmentation need to be called by using the quick_ml.callbacks. See Here -> [Model Training w\/ Callbacks](https:\/\/www.kaggle.com\/superficiallybot\/quick-ml-model-training-w-callbacks) ","7711592f":"### Augment & Train w\/o Plot","9dd3853c":"### Get TPU Strategy & Load the datasets","6cb9c650":"### Define the Parameters"}}