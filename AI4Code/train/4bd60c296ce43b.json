{"cell_type":{"4568ef39":"code","93ce3afd":"code","18284c6e":"code","925ce8ac":"code","48603129":"code","f123aa6e":"code","560dcf5e":"code","237c8da9":"code","a0c0cd17":"code","45bea5db":"code","b6cb472e":"code","b5791b03":"code","5abb4e5f":"code","304cca0e":"code","6930afa4":"code","5f97cbaf":"code","4eca55e4":"code","e5cc6716":"code","46cba305":"code","c2fc6f93":"code","7bbe028d":"code","0769dc83":"code","210a5aa2":"code","09fc167c":"code","0b83170e":"code","2c6a0f54":"code","05e8d617":"code","803a2ea7":"code","6d25f3e3":"code","a6d680c4":"code","870fca06":"code","d529b5cb":"code","a51aed6d":"code","668b3e75":"code","dce3c6d8":"code","ee3add5b":"code","48b20b96":"code","c9fb3fe3":"code","12139dc7":"code","688b797d":"code","2c036852":"code","78853ef9":"code","57f3d9a2":"code","b2fae270":"code","43c4ef8c":"code","4bba8554":"markdown","9037c3c9":"markdown","1f48a8ce":"markdown","042dc853":"markdown","bbac4750":"markdown","91e02aca":"markdown","0ebd7ec5":"markdown","4ee887de":"markdown","e7447a60":"markdown","8b3fbdd0":"markdown","7c36578d":"markdown","dac8e8d5":"markdown","770ecbfa":"markdown","c9610bff":"markdown","f4b6a150":"markdown"},"source":{"4568ef39":"!pip install countryinfo","93ce3afd":"from countryinfo import CountryInfo\nimport numpy as np\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nfrom subprocess import check_output\nimport seaborn as sns","18284c6e":"def clean_colnames(df):\n    '''Clean columns names when passing a pandas dataframe: params (df - dataframe)'''\n    col_clean = []\n    for col in df.columns:\n        col = col.strip().lower()\n        col = col.replace('.',' ')\n        col_clean.append(col)\n        \n    df.columns = col_clean\n    return df.columns\n\ndef change_col_pos(col,pos,df):\n    '''Change the position of a column in a dataframe: params(col - column name, \n    pos - new index position, df - dataframe)'''\n    all_cols = df.columns.tolist()\n    temp = all_cols.pop(all_cols.index(col))\n    all_cols.insert(pos,col)\n    \n    df = df[all_cols]\n    \n    return df\n\ndef country_hem(col):\n    '''Return a list if countries are part of the north (1) or south (0) hemispheres of planet earth. If country\n    is not recognized, NaN is returned'''\n    hem_lst = []\n    for row in col:\n        try:\n            country = CountryInfo(row)\n        except AttributeError:\n            row = 'x'\n   \n        try:\n            pos = country.latlng()\n        except KeyError:\n            pos = (0,0)\n    \n        if pos[0] > 0:\n            temp_row = 1\n        elif pos[0] < 0:\n            temp_row = 0\n        else:\n            temp_row = np.nan\n    \n        hem_lst.append(temp_row)\n    \n    return hem_lst     ","925ce8ac":"df_original = pd.read_csv('..\/input\/gsaf5csv\/GSAF5.csv', encoding = 'latin-1')\ndf = df_original.copy()","48603129":"df.head()","f123aa6e":"df.shape","560dcf5e":"df.columns","237c8da9":"clean_colnames(df)","a0c0cd17":"#Drop all duplicates considering all columns\ndf.drop_duplicates(subset=list(df.columns))","45bea5db":"null_cols = df.isnull().sum()\nnull_cols","b6cb472e":"df = df.drop(axis = 1, columns = ['unnamed: 22', 'unnamed: 23', 'href', 'href formula', 'pdf', 'original order',\n                                  'investigator or source', 'time', 'fatal (y\/n)', 'injury', 'case number 1', \n                                  'case number 2', 'type', 'name', 'species', 'case number', 'age', 'case number'])","b5791b03":"df.head()","5abb4e5f":"df.info()","304cca0e":"temp_lst = []\nfor row in df['date']:\n    temp_row = ''.join(re.findall('\\-[A-Za-z]{3}\\-',row)).lower()\n    temp_row = re.sub('\\-','',temp_row)\n        \n        \n    if temp_row == '':\n        temp_row = np.nan\n\n    temp_lst.append(temp_row)\n\ndf['month'] = temp_lst","6930afa4":"df = change_col_pos('month',3,df)","5f97cbaf":"df['month'].value_counts(dropna=False)","4eca55e4":"df.shape","e5cc6716":"df.dropna(subset=['month'], inplace=True)","46cba305":"for row in df['month']:\n    if len(row) > 3:\n        df['month'].replace(row,row[:3], inplace=True)\n    elif row == 'jut':\n        df['month'].replace(row,'jun', inplace=True)","c2fc6f93":"df['month'].value_counts(dropna=False)","7bbe028d":"df['country'].unique()","0769dc83":"for row in df['country']:\n    if isinstance(row, str):\n        new_row = re.sub('\\\/.+|\\(.+\\)|\\.|\\?', '', row)\n        new_row = re.sub('\\&', 'and', new_row.strip().lower())\n        \n        if new_row == 'usa':\n            new_row = new_row.replace(new_row, 'united states')\n        elif new_row == 'bahamas':\n            new_row = new_row.replace(new_row, 'the bahamas')\n        elif new_row == 'england' or new_row == 'british isles':\n            new_row = new_row.replace(new_row, 'united kingdom')\n        elif new_row == 'reunion':\n            new_row = new_row.replace(new_row, 'r\u00e9union')\n        elif new_row == 'okinawa':\n            new_row = new_row.replace(new_row, 'japan')\n        elif new_row == 'azores':\n            new_row = new_row.replace(new_row, 'portugal')\n        elif new_row == 'red sea':\n            new_row = new_row.replace(new_row, 'egypt')\n        elif new_row == 'okinawa':\n            new_row = new_row.replace(new_row, 'japan')\n        elif new_row == 'columbia':\n            new_row = new_row.replace(new_row, 'colombia')\n        elif new_row == 'new britain' or new_row == 'new guinea' or new_row == 'british new guinea' or new_row == 'admiralty islands':\n            new_row = new_row.replace(new_row, 'papua new guinea')\n        \n        df['country'].replace(row,new_row, inplace=True)\n    else:\n        df['country'].replace(row,np.nan, inplace=True)","210a5aa2":"df['country'].unique()","09fc167c":"df.dropna(how='all', subset=['country','area','location'], inplace=True)","0b83170e":"df['hemisphere'] = country_hem(df['country'])","2c6a0f54":"df = change_col_pos('hemisphere',6,df)","05e8d617":"df['hemisphere'].value_counts(dropna=False)","803a2ea7":"nh = ['north sea', 'scotland', 'north pacific ocean', 'turks and caicos', 'caribbean sea', 'persian gulf', 'micronesia', \n     'burma', 'north atlantic ocean', 'montenegro', 'the balkans', 'northern arabian sea', 'netherlands antilles', 'mediterranean sea',\n     'grand cayman', 'netherlands antilles', 'south china sea', 'st martin', 'andaman', 'palestinian territories', 'johnston island',\n     'nevis', 'bay of bengal']\nsh = ['south atlantic ocean', 'western samoa', 'southwest pacific ocean', 'tasman sea', 'st helena']","6d25f3e3":"for row in df.index:\n    if df.at[row,'country'] in nh:\n        df.at[row, 'hemisphere'] = 1\n    elif df.at[row, 'country'] in sh:\n        df.at[row, 'hemisphere'] = 0","a6d680c4":"df['hemisphere'].value_counts(dropna=False)","870fca06":"df[df['country'] == 'atlantic ocean']","d529b5cb":"df.at[1282, 'hemisphere'] = 1\ndf.at[1293, 'hemisphere'] = 1\ndf.at[3493, 'hemisphere'] = 1\ndf.at[3704, 'hemisphere'] = 1\ndf.at[4475, 'hemisphere'] = 1\ndf.at[4476, 'hemisphere'] = 0","a51aed6d":"df[df['country'] == 'pacific ocean']","668b3e75":"df.at[3376, 'hemisphere'] = 1\ndf.at[3736, 'hemisphere'] = 1\ndf.at[3924, 'hemisphere'] = 1\ndf.at[3325, 'hemisphere'] = 1\ndf.at[3961, 'hemisphere'] = 1\ndf.at[4147, 'hemisphere'] = 1\ndf.at[4438, 'hemisphere'] = 0\ndf.at[4456, 'hemisphere'] = 0","dce3c6d8":"df['hemisphere'].value_counts(dropna=False)","ee3add5b":"df.dropna(subset=['hemisphere'], inplace=True)","48b20b96":"df['hemisphere'].value_counts(dropna=False)","c9fb3fe3":"n_seasons = {'spring': ['mar', 'apr', 'may'],\n             'summer': ['jun', 'jul', 'aug'],\n             'autumm': ['sep', 'oct', 'nov'],\n             'winter': ['dec', 'jan', 'feb']}\n\ns_seasons = {'spring': ['sep', 'oct', 'nov'],\n             'summer': ['dec', 'jan', 'feb'],\n             'autumm': ['mar', 'apr', 'may'],\n             'winter': ['jun', 'jul', 'aug']}","12139dc7":"temp_seasons = []\nfor row in df.index:\n    if df.at[row, 'hemisphere'] == 1:\n        if df.at[row, 'month'] in n_seasons['spring']:\n            temp_seasons.append('spring')\n        elif df.at[row, 'month'] in n_seasons['summer']:\n            temp_seasons.append('summer')\n        elif df.at[row, 'month'] in n_seasons['autumm']:\n            temp_seasons.append('autumm')\n        elif df.at[row, 'month'] in n_seasons['winter']:\n            temp_seasons.append('winter')\n    \n    elif df.at[row, 'hemisphere'] == 0:\n        if df.at[row, 'month'] in s_seasons['spring']:\n            temp_seasons.append('spring')\n        elif df.at[row, 'month'] in s_seasons['summer']:\n            temp_seasons.append('summer')\n        elif df.at[row, 'month'] in s_seasons['autumm']:\n            temp_seasons.append('autumm')\n        elif df.at[row, 'month'] in s_seasons['winter']:\n            temp_seasons.append('winter')\ndf['seasons'] = temp_seasons","688b797d":"df = change_col_pos('seasons',5,df)","2c036852":"df.head()","78853ef9":"df['seasons'] = df['seasons'].astype('category')","57f3d9a2":"df.info()","b2fae270":"group_seasons = df['seasons'].value_counts()","43c4ef8c":"%matplotlib inline\nplt.figure(figsize=[12,12])\n#df['seasons'].value_counts().plot(kind='bar')\n#sns.countplot(x='seasons', data=df, palette='Set2', ax=ax)\ngraph1 = sns.countplot(x='seasons', data=df, palette='Set2')\nplt.xlabel('Seasons of the year')\nplt.ylabel ('Ocurrencies')\nplt.title('Shark attacks by season')","4bba8554":"**Step 4**: According to the null columns analysis below we had two no named columns with only 1 and 2 respectively values filled in a universe of 5992 entries. This is not representative for any analysis and was eliminated.","9037c3c9":"## Objective","1f48a8ce":"**Step 7:** Checking the values created to the new MONTH column. We can observe that some values seems duplicated as 'marmar' and at one case we observe a writing error. So this mistakes were corrected and the rows that contains NaN fields were dropped.","042dc853":"Analyse an external dataset (Skark Attack) and apply the tools and techniques of data wrangling, cleaning for learning purposes.\n\nAll steps and insights are described with its respective code.\n\n**P.S. USING THE DATASET AVALIABLE ON VERSION 2**","bbac4750":"**Step 2:** Importing dataset using pandas and creating a security copy.","91e02aca":"**Step 5**: In this step we check general info of specific columns","0ebd7ec5":"MAIN QUESTION: WHAT'S THE SEASON WITH MORE SHARK ATTACKS HISTORICALLY?","4ee887de":"No information about the other NaN values in HEMISPHERE, so they were dropped.","e7447a60":"**Step 6:** Creating a month column and inserting in the dataframe. If month doesn't exist, the field will be filled with NaN.","8b3fbdd0":"**Step 1:** Declaring functions that would be used to solve some issues","7c36578d":"# Shark Attack Dataset Analysis","dac8e8d5":"**Step 8:** In a previous analisys of df.info() in step 4 we wcould see that we had 43 null values for the COUNTRY column.\nTaking a look again after dropping the null values in MOUNTH columns, we saw that this number was reduced to 25.\n\nThe intention now was to get an hemisphere position (north = 1 or south = 0) from the COUNTRY columns. So, a cleaning was made \nin this column and once the null values were not so expressive right now (25), they were analysed one by one considering the info in the AREA and LOCATION columns ro retrieve an hemisphere position.\n\nTo all other countries info, we imported a library called COUNTRYINFO to get the hemisphere info.","770ecbfa":"**Step 0:** Importing libraries to be used in the analysis","c9610bff":"**Step 9:** Creating a seasons column","f4b6a150":"**Step 3:** While trying to access some columns was detected that some names contains whitespaces and special characters. So, a function was created do clean it."}}