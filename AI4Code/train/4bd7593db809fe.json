{"cell_type":{"527004eb":"code","f0d69ba8":"code","c4c5bc6b":"code","99e64f18":"code","4efe26ef":"code","397065fe":"code","a015c92a":"code","a6e2ee5b":"code","bb6b1fb1":"code","24ad122e":"code","dfc7fcbc":"code","ac19436e":"code","1822a63f":"code","3480d581":"code","242bb60f":"code","2ad32253":"code","5ff6a2c1":"code","88e94355":"code","91632d11":"code","e32438f4":"code","d4d12712":"code","54494d05":"code","fab0c3ab":"code","630261b5":"code","8f4d38fc":"code","e8e9facb":"code","3d8ad2a6":"code","595ff583":"code","bd7b142b":"markdown","3ef2e103":"markdown","1171ae7b":"markdown","831d1a16":"markdown","b562f665":"markdown","1c22724b":"markdown","1e215bb5":"markdown","c0a12eb9":"markdown","c3d4087f":"markdown","acb20b73":"markdown","e4861087":"markdown","20794904":"markdown","8c7b7158":"markdown","4b337648":"markdown"},"source":{"527004eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","f0d69ba8":"!pip install pycaret\nfrom pycaret.classification import *","c4c5bc6b":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\nsub   = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\n\nprint('Training Data = ',train.shape)\nprint('Testing Data = ',test.shape)\ntrain.head(3)","99e64f18":"train_copy = train.copy()\ntest_copy = test.copy()","4efe26ef":"train = train_copy.copy()\ntest  = test_copy.copy()\n\n# Get Title and Family Name\ntrain['title']     = train.Name.apply(lambda x: x.split(',')[1][1:].split()[0][:-1])\ntrain['last_name'] = train.Name.apply(lambda x: x.split(',')[0][:-1])\ntest['title']      =  test.Name.apply(lambda x: x.split(',')[1][1:].split()[0][:-1])\ntest['last_name']  =  test.Name.apply(lambda x: x.split(',')[0][:-1])\n\n# Impute Missing Values of Age\ntrain.Age[train.Age.isna()] = train.Age.mean()\ntest.Age[test.Age.isna()]   = test.Age.mean()\n\n# Transform Cabin\ntrain.Cabin = train.Cabin.replace(np.nan, 'N0', regex=True)\ntrain['Cabin_Cat'] = [i[0]  for i in train.Cabin]\ntest.Cabin  = test.Cabin.replace(np.nan, 'N0', regex=True)\ntest['Cabin_Cat']  = [i[0]  for i in test.Cabin]\n\n#Drop Rows with Missing Values - Embarked\ntrain = train[~train.Embarked.isna()]\ntest  = test[~test.Embarked.isna()]\n\n# Drop Column\ntrain.drop(columns = ['Ticket','Cabin','Name'],axis=0, inplace=True)\ntest.drop(columns  = ['Ticket','Cabin','Name'],axis=0, inplace=True)\n\ntrain.head(3)","397065fe":"clf1 = setup(data                 = train, \n             target               = 'Survived',                                      \n             ignore_features      = ['PassengerId'],\n             categorical_features = ['Pclass','Sex','Parch','Embarked','title','Cabin_Cat'],\n             numeric_features     = ['Age','SibSp','Fare'],                               \n             session_id           = 123)\n","a015c92a":"compare_models(sort='AUC',fold=10)","a6e2ee5b":"lr = create_model('lr',fold=10)\ntune_lr = tune_model('lr',fold=10,optimize='Accuracy')","bb6b1fb1":"plot_model(tune_lr, plot = 'auc')","24ad122e":"plot_model(tune_lr,plot='confusion_matrix')","dfc7fcbc":"plot_model(tune_lr, plot='feature')","ac19436e":"xgboost = create_model('xgboost',fold=10)\n#tune_xgb = tune_model('xgboost',optimize = 'Accuracy',fold=10)","1822a63f":"plot_model(xgboost, plot = 'auc')","3480d581":"plot_model(xgboost, plot = 'confusion_matrix')","242bb60f":"plot_model(xgboost, plot = 'feature')","2ad32253":"interpret_model(xgboost)","5ff6a2c1":"lgb = create_model('lightgbm',fold=10)\n#tune_lgb = tune_model('lightgbm',optimize = 'Accuracy',fold=10)","88e94355":"plot_model(lgb, plot='auc')","91632d11":"plot_model(lgb, plot='confusion_matrix')","e32438f4":"plot_model(lgb, plot='feature')","d4d12712":"dt = create_model('dt', fold  =10)\ndt_bagging = ensemble_model(dt, method='Bagging', fold=10)","54494d05":"plot_model(dt_bagging, plot='auc')","fab0c3ab":"plot_model(dt_bagging, plot='confusion_matrix')","630261b5":"dt = create_model('dt',fold=10)\ndt_boosting = ensemble_model(dt, method='Boosting')","8f4d38fc":"plot_model(dt_boosting,plot='auc')","e8e9facb":"plot_model(dt_boosting,plot='confusion_matrix')","3d8ad2a6":"xgb_pred = predict_model(xgboost, data=test)\nxgb_pred.head(3)","595ff583":"sub['Survived'] = round(xgb_pred['Score']).astype(int)\nsub.to_csv('submission.csv',index=False)\nsub.head(10)","bd7b142b":"# <font color='green'> PyCaret - Machine Learning Made Easy<\/font>\n\n***3 things why I like PyCaret,***\n## <font color='brown'> SuperEasy - SuperFast - SuperPowerful <\/font>\n\n### PyCaret is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within seconds in your choice of notebook environment.\n\n\n\nPyCaret runs on Jupyter Notebook, Google Colab and Kaggle. So, it is platform friendly. \n\nGet PyCaret it from: https:\/\/pycaret.org\/\nLearn PyCaret  from: https:\/\/pycaret.org\/tutorial\/\n\nIf you are a beginer, start here https:\/\/colab.research.google.com\/drive\/1GqQ3XAIzg4krBbnOpKyeRqT0qBQhdwYL\n\nOr if you are good enough, go to https:\/\/github.com\/pycaret\/pycaret\/blob\/master\/Tutorials\/Binary%20Classification%20Tutorial%20Level%20Intermediate%20-%20CLF102.ipynb\n\n**Great Learning !**","3ef2e103":"## Light GBM","1171ae7b":"## Feature Engineering","831d1a16":"## Bagging","b562f665":"#### <font color='brown'>Selecting - Gradient Boosting Classifer & Losgistic Regression based on AUC SCore <\/font>\n","1c22724b":"## <font color='green'> Find Best Model using k-fold validation w.r.to AUC Value<\/font>","1e215bb5":"## XGBoost Algorithm ","c0a12eb9":"## Install PyCaret Library","c3d4087f":"## Boosting","acb20b73":"## Get Data","e4861087":"## Data Preprocessing","20794904":"## **Logistic Regression**","8c7b7158":"## Predict Test Set","4b337648":"## Result Submission"}}