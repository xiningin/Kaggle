{"cell_type":{"082f57f5":"code","3356c338":"code","ea61ce29":"code","777dfe01":"code","6a414cfa":"code","67813019":"code","7ae27332":"code","6d8c493c":"code","ab8970a6":"code","fa0ac842":"code","815da367":"code","57219cc0":"code","39be5920":"code","ad89abc9":"code","f092769d":"code","80b7aabc":"code","37f92350":"code","868c4e64":"code","50f51aa9":"markdown","c4506309":"markdown","4794999e":"markdown","5476fdd1":"markdown","3c85f455":"markdown","dd34deb5":"markdown","8af10df6":"markdown","4865257e":"markdown","499a88f3":"markdown","7f37f579":"markdown","7c6ded58":"markdown","35ab05a2":"markdown","bd204aeb":"markdown","7f136c79":"markdown"},"source":{"082f57f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n%matplotlib inline \nimport matplotlib.pyplot as plt #for detailed visualization\nimport seaborn as sns #for fast and flexable visualization","3356c338":"df = pd.read_csv(\"\/kaggle\/input\/houses-prices\/Houses_Prices.csv\",names=[\"size\",\"price\"])\n#read the csv file and give columns names\n\ndf.head() #to show the first 5 rows","ea61ce29":"sns.set_style(\"darkgrid\") #set style to look better\n\nplt.plot(df[\"size\"], df[\"price\"],'ro') \n#graph of size column on x axis and price column on y axis\n\nplt.xlabel('Houses Size') #x axis label\nplt.ylabel('Price')       #y axis label\n\nplt.title(\"size and price scatter plot relation\"); #title of graph","777dfe01":"sns.kdeplot(df[\"size\"])\nplt.title(\"distribution of the size\");","6a414cfa":"#select the independent columns\nX = df[\"size\"].values\nX = X.reshape((X.shape[0],1))\n\n# select the dependant column\nY = df[\"price\"].values\nY = Y.reshape((Y.shape[0],1))\n\n#number of training examples\nm = X.shape[0] ","67813019":"def hypothesis(X, Theta): \n    #hypothesis function\n    X = np.append(np.ones((X.shape[0],1)), X.reshape((X.shape[0],1)), axis = 1) # (97, 2) append ones to identify x[0]\n    Theta = Theta.reshape(2,1)  # (2, 1) two thetas for x[0] and for x[1]\n    return X.dot(Theta)  # (97, 2) dot (2, 1) = (97, 1)","7ae27332":"def cost_function(X, Theta, Y):\n    return (1\/(2*m)) * np.sum( np.square(Y - hypothesis(X, Theta)) )","6d8c493c":"def gradient_descent(X, Y, Theta, alpha, iterations):\n    history=[]\n    for i in range(iterations):\n\n        Theta = Theta - ( (alpha\/m) * (X.T).dot(hypothesis(X, Theta) - Y) )\n        Cost = cost_function(X, Theta, Y)\n        history.append(Cost)\n    return Theta,history","ab8970a6":"Theta,history = gradient_descent(X, Y, Theta = np.array([900,0.4]).reshape((2,1)), alpha = 0.0001,iterations= 6)\n\nP = hypothesis(X, Theta)\n\nCost = cost_function(X, Theta, Y)","fa0ac842":"print(\"the trained weights : \\n\",Theta)","815da367":"plt.plot(X, Y, 'ko') #scatterplot of the data\nplt.plot(X, P, '-') #our model prediction\n\nplt.title(\"Data\")\nplt.xlabel('Houses Size')\nplt.ylabel('Price');","57219cc0":"sns.lineplot(x=range(0,6),y=history);\n\nplt.title(\"cost function after each iteration\")\nplt.xlabel('number of iterations')\nplt.ylabel('cost function value');","39be5920":"print(\"the value of cost function after each iteration : \\n\",history)","ad89abc9":"def hypothesis(X, Theta): \n    #hypothesis function\n    X = np.append(np.ones((X.shape[0],1)), X.reshape((X.shape[0],1)), axis = 1) # (97, 2) append ones to identify x[0]\n    Theta = Theta.reshape(2,1)  # (2, 1) two thetas for x[0] and for x[1]\n    return X.dot(Theta)  # (97, 2) dot (2, 1) = (97, 1)","f092769d":"from scipy import linalg\n\ndef normal_equation(X,Y):\n    X = np.append(np.ones((X.shape[0],1)), X.reshape((X.shape[0],1)), axis = 1)\n    return ( linalg.inv((X.T).dot(X)).dot((X.T).dot(Y)) )","80b7aabc":"def cost_function(X, Theta, Y):\n  return (1\/(2*m)) * np.sum( np.square(Y - hypothesis(X, Theta)) )","37f92350":"Theta = normal_equation(X,Y).reshape(2,1)\nP = hypothesis(X, Theta)\nCost = cost_function(X, Theta, Y)\n\nprint(Theta)\nprint(Cost)","868c4e64":"plt.plot(X, Y, 'ko') #scatterplot of the data\nplt.plot(X, P, '-') #our model prediction\n\nplt.title(\"Data\")\nplt.xlabel('Houses Size')\nplt.ylabel('Price');","50f51aa9":"#### Normal function equation\n\n$$ (X^T . X)^{-1} . (X.T.Y)$$","c4506309":"## show the Data","4794999e":"## find relations","5476fdd1":"#### Cost function (mean squared):\n\n$$J(\\theta_0,\\theta_1) = \\frac{1}{2m} \\sum \\limits _{i=1}^{m}(\\hat{Y}-Y^{i})^2 $$","3c85f455":"## Importing the tools","dd34deb5":"### normal equation\nsame functionality as gradient descent to get the right learning weights.\n\npros :\n* no hyperparameters\n* no need for loops and iterations (less time)\n* more accurate \n\ncons:\n* can't work with more than 10k training examples\n","8af10df6":"we see it is more accurate by visualization than the last one and less cost function also ","4865257e":"## Bonus","499a88f3":"### hypothesis function :\n\n$$\\hat{Y} = \\hat{\\theta}_{0} + \\sum \\limits _{i=1} ^ {m} X_{i}\\hat{\\theta}_{i}$$","7f37f579":"we see slightly a decrease in the cost function due to the effect of the tangent in the (cost\/theta) convex function on alpha the Learning rate which large at the beginning and then decreased by decreasing the slope","7c6ded58":"### Gradient descent optimizer\nminimize the cost function by changing the weights (theta) after each iteration.\n\n$$ \\theta = \\theta - \\frac{\\alpha}{m} \\sum \\limits _{i=1}^{m}(\\hat{Y}-Y^{i}).X^i $$\n\n![0cef7a_216e740d402b4a1f9c8f4ccaac893622_mv2](https:\/\/user-images.githubusercontent.com\/59618586\/114191120-5a828700-994c-11eb-90cb-f198e2b6171f.jpg)\n","35ab05a2":"### hypothesis function :\n#### function used to predict\nin linear model it is used to predict by making line pass through the points\n\n$$\\hat{Y} = \\hat{\\theta}_{0} + \\sum \\limits _{i=1} ^ {m} X_{i}\\hat{\\theta}_{i}$$","bd204aeb":"### Cost function (mean squared):\n\ncalculate the difference in value between the predicted and the true value\n\n$$J(\\theta_0,\\theta_1) = \\frac{1}{2m} \\sum \\limits _{i=1}^{m}(\\hat{Y}-Y^{i})^2 $$\n\n![1_ool361dWI61RMDyUAmalmA](https:\/\/user-images.githubusercontent.com\/59618586\/114189551-99afd880-994a-11eb-802b-f131a9b0e4fe.png)","7f136c79":"### Lets see how our model did visually on data"}}