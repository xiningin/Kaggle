{"cell_type":{"8ee807a9":"code","aa81cfac":"code","daf301ba":"code","491b1d9e":"code","adf44a6b":"code","ad68524f":"code","a594aa82":"code","10ac1272":"code","4b0da700":"code","5a953ece":"code","0b0f0da6":"code","b3229685":"code","d66abdcc":"code","a4693761":"code","02897d42":"code","ecca95ee":"code","41369293":"code","7a0f0c01":"code","0e608ddf":"code","ae4418fb":"code","a854aaa7":"code","4d110c75":"code","72d4b668":"code","97ac7398":"code","95ac770b":"code","5c2ee327":"code","d1f75214":"code","68488b47":"code","6c3eef73":"code","f2fbcac9":"code","fab0a0f5":"code","997c16f3":"code","27d7c8a9":"code","5f75c9ed":"code","a3a03eb0":"code","1247339e":"code","db5b30d3":"code","c3d046b6":"code","4f75441f":"code","3b18250e":"code","931c22e4":"code","e9b30cc7":"code","abba7d81":"code","e5067251":"code","19498ef6":"code","5e202b09":"code","059a65aa":"code","7d37d0ad":"code","38b07c95":"code","c2428a3a":"code","502cb1a4":"markdown","53ffcfa4":"markdown","45cefdde":"markdown","2a70cce6":"markdown","2118e64d":"markdown","df418ff1":"markdown","a33c7ad7":"markdown","036346e8":"markdown","bb6caaf2":"markdown","439dde4b":"markdown","1d6cbb40":"markdown","c20da0fa":"markdown","a308bbfa":"markdown","f512f3f1":"markdown","223206f2":"markdown","c9ad452e":"markdown","df3cb802":"markdown","b390c07f":"markdown","c29fd4a5":"markdown","4cb299fb":"markdown","000d2055":"markdown","bb51bd36":"markdown","bc0c558b":"markdown","2ee20b6d":"markdown","702c0e34":"markdown","ec89239a":"markdown","ec0a6354":"markdown","97fdfcc4":"markdown","a8f75ddc":"markdown","cc4eb8f3":"markdown","bd1117b7":"markdown","223690bc":"markdown","1a3126a2":"markdown","a066a66c":"markdown","db9fa7e9":"markdown","08c9ee23":"markdown","bbe9f48b":"markdown","3a6d5a6d":"markdown","303d7f13":"markdown","2ccd6a72":"markdown","61592b3e":"markdown","ca045ac9":"markdown","8e5934da":"markdown","c01f1359":"markdown","5d181307":"markdown","7581fb08":"markdown","d36e5393":"markdown","a1a32b9b":"markdown","e1fc1e62":"markdown","6323181d":"markdown","2c0ca39b":"markdown","f5df74b3":"markdown","3f37ef81":"markdown","3c703527":"markdown","fa51fa79":"markdown","c9aada6e":"markdown","e2bfe935":"markdown","327e8f00":"markdown","1fbf6cc3":"markdown","aef34b6d":"markdown","666653b2":"markdown","5b3c286d":"markdown","c0622754":"markdown","2f464d1b":"markdown","95911551":"markdown","3ab7c44f":"markdown","f5858372":"markdown","ea272328":"markdown","5591d0ca":"markdown","0d954293":"markdown","e4ca1569":"markdown","9f65937b":"markdown","8368e7d5":"markdown","598b1421":"markdown","f7354a90":"markdown","0af92968":"markdown","0ad30113":"markdown","35bc55e0":"markdown","852a4981":"markdown","ebbd3e86":"markdown","45ecdc5e":"markdown","ec7f4cde":"markdown","879d4acf":"markdown","8e59faa4":"markdown","86dc05a9":"markdown","544d3144":"markdown","a9b4a996":"markdown","3d1c9ff6":"markdown","b2f23d45":"markdown","c64a5763":"markdown","1d53d9a1":"markdown","8218de78":"markdown","8c6ef675":"markdown","ba7e2a03":"markdown","cee10a15":"markdown","4b141df6":"markdown","f516e14d":"markdown","2cc46d14":"markdown","864fced4":"markdown","876c54eb":"markdown","67f5f5f0":"markdown","d2a76f89":"markdown","00e2b72d":"markdown","bfddbff7":"markdown","20ec8750":"markdown","954f494e":"markdown","82c09ca0":"markdown","c1ce7024":"markdown","5a26f3d4":"markdown","0c3d0cd6":"markdown"},"source":{"8ee807a9":"import numpy as np\nimport pandas as pd\n\n# The following two modules matplotlib and seaborn are for plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns # Comment this if seaborn is not installed\n%matplotlib inline\n\n# The module re is for regular expressions\nimport re","aa81cfac":"path = '..\/input\/titanic\/'\ndf = pd.read_csv(path + 'train.csv')","daf301ba":"df","491b1d9e":"df.shape","adf44a6b":"df.head()","ad68524f":"df.columns","a594aa82":"df[df['Sex'] == \"female\"].head()","10ac1272":"df.loc[df['Age']>70, ['Name', 'Survived']]","4b0da700":"df.iloc[100:106]","5a953ece":"plt.axis('equal')\nplt.pie(df['Survived'].value_counts(), labels=('Died', \"Survived\"));","0b0f0da6":"sns.barplot(x = 'Sex', y = 'Survived', data = df);","b3229685":"sns.barplot(x='Pclass', y='Survived', hue='Sex', data=df);","d66abdcc":"sns.pointplot(x='Sex', y='Survived', hue='Pclass', data=df);","a4693761":"df.isnull().sum()","02897d42":"df.head()","ecca95ee":"df.loc[:20, 'Name'].values","41369293":"re.findall(\"\\w\\w[.]\", 'Braund, Mr. Owen Harris')","7a0f0c01":"re.findall(\"\\w\\w[.]\", 'Braund, Mr. Owen Harris')[0]","0e608ddf":"re.findall(\"\\w\\w[.]\", 'Heikkinen, Miss. Laina')[0]","ae4418fb":"# Fill in below:\nre.findall(\"FILL IN HERE\", 'Heikkinen, Miss. Laina')[0]","a854aaa7":"get_title('Futrelle, Mrs. Jacques Heath (Lily May Peel)')","4d110c75":"get_title('Simonius-Blumer, Col. Oberst Alfons')","72d4b668":"df.head()","97ac7398":"df.groupby('Title')","95ac770b":"df.groupby('Title').median()","5c2ee327":"df.groupby('Title').mean()","d1f75214":"df['MedianAge'] = df.groupby('Title')['Age'].transform(\"median\")\ndf.head(15)","68488b47":"df['Age'] = df['Age'].fillna(df['MedianAge'])\ndf.head()","6c3eef73":"df = df.drop('MedianAge', axis=1)\ndf.isnull().sum()","f2fbcac9":"df = df.replace({'male': 0, 'female': 1})\ndf.dtypes","fab0a0f5":"pd.get_dummies(df['Embarked']).head()","997c16f3":"port_df = pd.get_dummies(df['Embarked'], prefix='Port')\nport_df.head()","27d7c8a9":"df = pd.concat([df, port_df], axis=1)\ndf.head()","5f75c9ed":"df.corr()","a3a03eb0":"correlation_matrix = df.corr();\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(correlation_matrix);","1247339e":"df1 = pd.DataFrame({'CourseCode': ['PHYS024', 'CSCI35', 'ENGR156'], \n                   'CourseName': ['Mechanics and Wave Motion', \n                                  'Computer Science for Insight',\n                                 'Intro to Comm & Info Theory']})\n\ndf2 = pd.DataFrame({'Professor': ['Zachary Dodds', 'Vatche Sahakian', \n                                  'Timothy Tsai', 'Brian Shuve'],\n                    'CourseCode': ['CSCI35', 'PHYS024',  'ENGR156', 'PHYS024']})\n\ndf1.head()","db5b30d3":"df2.head()","c3d046b6":"pd.merge(df2, df1)","4f75441f":"path = '..\/input\/instacart-market-basket-analysis\/'\ndfa = pd.read_csv(path + 'aisles.csv')\ndfd = pd.read_csv(path + 'departments.csv')\ndfp = pd.read_csv(path + 'products.csv')\ndfo = pd.read_csv(path + 'order_products__train.csv')","3b18250e":"df","931c22e4":"dfp.head()","e9b30cc7":"df","abba7d81":"df","e5067251":"df","19498ef6":"df","5e202b09":"df.shape","059a65aa":"sns.barplot(x='Family', y='Survived', data=df);","7d37d0ad":"df['Ticket'].value_counts()[:15]","38b07c95":"df.head()","c2428a3a":"df[df['GroupSize'] != df['Family']].shape[0], df[df['GroupSize'] != df['TicketCount']].shape[0]","502cb1a4":"One can check that there are many tickets shared among passengers that may or may not be family members.","53ffcfa4":"### 5. Encoding categorical variables\n\nLet us check the datatype of each column. Hint: Use [`dtypes`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.dtypes.html).","45cefdde":"Now we fill in the missing values in the *Age* column using the values in the *MedianAge* column.","2a70cce6":"Please refer to the documents [here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.merge.html) and [here](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/merging.html) to better grasp how and when to use `merge()` function. \n\n#### Merging dataframes from [Instacart Market Basket Analysis](https:\/\/www.kaggle.com\/c\/instacart-market-basket-analysis\/data) dataset:\nWe load the four files into separate dataframes:   \n`aisles.csv`   \n`departments.csv`  \n`products.csv`  \n`order_products__train.csv`","2118e64d":"Create a new column named *GroupSize* by picking the maximum value among the columns *Family* and *TicketCount*.   \nNote: We consider groups to be either family members or those traveling on the same ticket.   \nHint: Use built-in `max()` function for pandas on the two relevant columns with the appropriate value for the `axis` parameter. ","df418ff1":"Do the same as above for qualitative (non-numerical) features. Hint: Use `include='O'` parameter in the [`describe`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html) function.","a33c7ad7":"Familiarize yourself with the dataframes. Hint: Use [`head()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.head.html).  \nNote: You might want to add code cells. Please ask for help unless you already know how to add a code cell.","036346e8":"First slice out 8 rows from the order_products dataframe that corresponds with `order_id` equal to 1 and save it in a new dataframe `df`. Hint: Use conditional on indexing as seen above.","bb6caaf2":"[Description for the columns](https:\/\/www.kaggle.com\/c\/titanic\/data) is as follows.  \n\n|Variable|\tDefinition|\tKey|   \n|:---  |:--- |:---|\n|PassengerId| Passenger ID |\n|Survived| \tSurvival|\t0 = No, 1 = Yes |\n|Pclass\t|Ticket class|\t1 = 1st, 2 = 2nd, 3 = 3rd|\n|Sex\t|Sex|\t\n|Age\t|Age in years\t|\n|SibSp\t|# of siblings \/ spouses aboard the Titanic\t|\n|Parch\t|# of parents \/ children aboard the Titanic\t|\n|Ticket\t|Ticket number\t|\n|Fare\t|Passenger fare\t|\n|Cabin\t|Cabin number\t|\n|Embarked\t|Port of Embarkation\t|C = Cherbourg, Q = Queenstown, S = Southampton|","439dde4b":"The output should be `'Miss.'`","1d6cbb40":"The output must be `(97, 191)`. Check your above code, if you get a different output.","c20da0fa":"Notes:\n- One of the columns in the one-hot encoding obtained in the above manner is always redundant. In case of features with just two classes such as gender in our dataset, one-hot encoding is not truly useful. One of its column is same as what we obtained by simply replacing classes with 0 and 1 and the other is redundant.  \n- The main disadvantage of using one-hot encoding is the increase in the number of features that can negatively affect our model which we will discuss in the later sessions.","a308bbfa":"We can also check the survival rate among both genders within the three ticket classes as follows.","f512f3f1":"Some passengers that appear to be traveling alone by account of their family size were part of a group traveling on the same ticket. To see this, get all the passengers traveling on the ticket \"1601\" (there are 7 of them).","223206f2":"### 6. Correlation between variables (Optional)\n\nWhat are the possible ways to understand the correlation of features with survival? Does correlation always implies causation?\n\nPearson correlation coefficients measures the linear correlation between the variables.\n\n$$\\rho_{X,Y} = \\frac{cov(X, Y)}{\\sigma_X, \\sigma_Y}$$\nwhere \n- $cov(X, Y)$ is the covariance.    \n- $\\sigma_X, \\sigma_Y$ are standard deviations of $X$ and $Y$ respectively.\n\nThe correlation between two variables ranges from -1 to 1. The closer in absolute value a correlation is to 1, the more dependent two features are each other.\n\nWe can get the correlation matrix for the variables (columns) in the dataset using the built-in function `corr()`.","c9ad452e":"Let us check our dataframe `df` again.","df3cb802":"## Instructions for the exercise session:\n- There are two exercise sessions (section 2 and 3) below, the estimated time for which is 25 minutes each.\n- The exercises involves new concepts not covered in the guided session. Please feel free to ask questions and take help from the instructor and\/or TAs.\n- The hints are provided for the exercises below. The inbuilt functions to be used are provided with a clickable link to the user manual. \n- The exercise session is time-bound and you are encouraged to work in groups to speed things up!","b390c07f":"The output should be `'Mrs.'`. Note: Make sure that the funtion returns a string and not a list. Please modify the above function accordingly.","c29fd4a5":"Create a new column named Title and extract titles from the Name column using the above function `get_title`. Hint: Use built-in [`map()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.map.html) function. The syntax is `df['New_column'] = df['Relevant_column'].map(function_name)`.","4cb299fb":"How do we select multiple columns? Suppose we want to select the columns *Name, Sex* and *Age* from the dataframe. Hint: Use a list of columns inside the square brackets.","000d2055":"Summary: For pattern matching the titles using regular expressions:\n- First we make sure it contains a period by using `[.]`. \n- Secondly, the period must be preceeded by word characters (one or more), so we use `\\w+[.]`.\n\nWrite a function `get_title` that takes a name, extracts the title from it and returns the title.","bb51bd36":"Find all the passenger information for the oldest person on board. Hint: Use [`loc[]`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html) method with [`idxmax()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.idxmax.html) for the Age column.","bc0c558b":"We can also select rows by putting a certain condition on a column. Say, we want only those rows for which the gender is *'female'*. ","2ee20b6d":"It worked! It returned a list instead of the string, so we use indexing to get the first element of the list.","702c0e34":"Check that the function is working properly by running the following two cells.","ec89239a":"The output should be `'Col.'`.","ec0a6354":" Use the built-in pandas function to count the number of surviving and non-surviving passengers. Hint: Use [`value_counts()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html) on the column `df['Survived']`.","97fdfcc4":"So, we want a pattern that automatically detects the length of the title and returns the entire title.\n\nFor regular expressions, \\+ is added to a character\/pattern to denote it is present one or more times. For example, `\\w+` is used to denote one or more word characters. Fill in the regular expression in the below cell that will detect a period preceeded by one or more word characters.","a8f75ddc":"Let us peek into the dataframe.","cc4eb8f3":"What is the most common port of embarkment? Hint: Check the frequency (counts) of each value in the Embarked column using the built-in function [`value_counts()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html) as seen above. ","bd1117b7":"Now we check the survival rates with respect to the family size.","223690bc":"We want the column names to be `'Port_C', 'Port_Q', 'Port_S'`, so we make use of the [`prefix` ](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html) keyword in `get_dummies` to alter the column names. We save the one-hot encoded vectors to a new dataframe named `port_df`.","1a3126a2":"Now it should have the column `aisle`. Let us now merge `dfd` with this dataframe to get the column `department`.","a066a66c":"Let us check whether the missing values for the *Embarked* column is indeed filled.","db9fa7e9":"First we load the [Titanic dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic) stored in the `csv` file as a dataframe using [`read_csv`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html) function.","08c9ee23":"Next, we concat the two dataframes using [`concat`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.concat.html).","bbe9f48b":"Since we do not want all the rows in the output, we have used `head()` function at the end.","3a6d5a6d":"## Session 1","303d7f13":"It does seem that the number of co-travelers have an impact on the survival rates.","2ccd6a72":"From the above chart, do you think that the gender affect the chance of survival for all the three ticket classes equally? Or does it seem like gender's effect is more pronounced for a certain ticket class passengers than others? We plot the  point estimates and confidence intervals for each sub-category to see it more clearly.","61592b3e":"How many children were on board? Hint: Use indexing on rows using conditional on the *Age* column and then the [`shape`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.shape.html) method to count the rows as seen above.","ca045ac9":"There are no missing values in the Age column!","8e5934da":"Let us check the dataframe `df`.","c01f1359":"Let us try it on another name:","5d181307":"So far, we have created a new column *Title* that is derived from the column *Name* using regular expressions. As we saw earlier, the column *Age* has a lot of missing values. It can be filled with the median (or mean) age of all passengers, but we can also make use of the newly derived *Title* column to fill the age based on the title of the passenger. For this, it would be helpful to group the passengers based on their title to get the median age for each group and then fill the missing age values for passengers with the median age for their title.\n\nWe can use [`groupby()`](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.21\/generated\/pandas.DataFrame.groupby.html) to group the rows of the dataframe based on a column(s), say *Title*.","7581fb08":"The resulting object is not a dataframe but there are multiple ways to derive a dataframe from the grouped object.","d36e5393":"**Goal: Get a dataframe consisting of the name of the products along with their aisle names and department names for the order with `order_id` equal to 1.**  \nThis dataframe must have ***8 rows and only three columns:\n```'product_name', 'aisle', 'department'```***","a1a32b9b":"Let us check our dataframe `df` again.","e1fc1e62":"### 4. [GroupBy object](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.22\/groupby.html)","6323181d":"Plot the survival rates based on the GroupSize using sns.barplot().","2c0ca39b":"What is the age of the oldest person on board? ","f5df74b3":"#### The `loc` and `iloc` methods\nSo far, we have seen how to retrieve either some select columns or certain rows based on conditionals. What if we want to slice off a portion of the dataframe with some specific rows and columns? We use `.loc[]` or `.iloc[]` methods for this purpose. \n* `.iloc[]` method is primarily integer position based and gets rows\/columns at particular positions in the index (so it only takes integers). \n* `loc[]` method is label based and gets rows\/columns with particular labels from the index.\n\nThe `loc[]` method allows us to put conditions on rows and retrieve select columns simultaneously.\n\nFor example, we want to get the name and the survival information for all the adults above 70 years.","3f37ef81":"### 2. Exploring the dataset (25 min)\n\nUse [`describe`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html) function for numerical features (columns) to get a brief overview of the statistics of the data.","3c703527":"Below is a bar chart for the survival rate among male and female passengers using `seaborn`. Here is [Seaborn cheatsheet](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Python_Seaborn_Cheat_Sheet.pdf).","fa51fa79":"Merge the dataframes `df` and `dfp` using [`merge()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.merge.html) and save the result back to `df`.","c9aada6e":"Let us check whether the column is indeed dropped. If not, modify the code above accordingly.","e2bfe935":"Plot the survival rate among passengers in each ticket class.","327e8f00":"List all the unique values for the titles along with their frequency to check that the titles are replaced properly.","1fbf6cc3":"Let us also check the shape of the dataframe `df`.","aef34b6d":"The median age vary greatly for each group ranging from 3.5 to 48 years.","666653b2":"#### Acknowledgment:\n* [Titanic dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic) dataset openly available in Kaggle is used in the exercises.\n\n**Note:**\nThe solutions for this exercise can be found [here]().","5b3c286d":"It seems that gender and ticket class put together give more information about the survival chance than both of them separately. Please feel free to later explore other variables and combination of variables in depth in your own time.","c0622754":"Notice the steeper slope for the second class.","2f464d1b":"Is there a noticeble difference in the median ages for the passengers with the above two titles? Should we take titles into account while filling the missing values for the *Age* column? If yes, how?","95911551":"What can go wrong with randomly assigning numbers to categories?\n\nThere are two kinds of categorical variables - ordinal and inordinal based on whether the categories possess an inherent order or not.\n\nFor example, passengers' ticket class `Pclass` is ordinal whereas gender is inordinal.\n\nNumbers have a natural order and so do ordinal categories. Number also possess certain other characteristics that ordinal categories do not. For example, the difference between the numbers 1 and 2 is the same as the difference between the numbers 2 and 3 but the same cannot be said for ordinal categories. \n$$ 2-1 == 3-2$$\nSo, converting categories to numbers means adding untrue assumptions that may or may not adversely affect our model. \n\nFor this reason, the prefered method is one-hot encoding. In this method, we build a one-hot encoded vector with dimension equal to the number of classes in the categories. This vector consists of all 0's except for a 1 corresponding to the class of the instance. For example, the *Embarked* column will have one-hot encoded vectors of [1,0,0], [0,1,0] and [0,0,1] for the three ports. This means that we will have three columns for the *Embarked* columns - one for each port and the values for these columns would simply be 1 or 0.\n\nOne-hot encoding is accomplished in pandas using [`get_dummies`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html) as given below. It simply creates a column for each class of a categorical variable.","3ab7c44f":"* What are the features?\n\nThe final goal is to design a model to predict whether a passenger survives or not, which of the above features seem like important predictors? How can you analyse the data in view of this objective?\n\n* What is feature engineering?\n    * Missing values\n    * Encoding categorial features\n    * Creating new features from the existing ones using tools such as regular expressions, split-apply-combine operations on rows, etc.","f5858372":"If not, there are two options to fix this. One is to set `inplace` parameter in the `set_index()` function as `True` and another is to use assignment operator `=` as in `df = df.function()`. \n\n***Question***: Why is the `inplace` keyword False by default? This is true not just for `set_index()` but for most built-in functions in pandas. \n\nAnswer: To facilitate method chaining or piping i.e. invoking multiple operations one after the other. For example, `df.isnull().sum()` used above. Chaining is more commonly used in pandas as compared to another programming style i.e. using nested function calls. Please read more [here](https:\/\/towardsdatascience.com\/the-unreasonable-effectiveness-of-method-chaining-in-pandas-15c2109e3c69), if interested.","ea272328":"Plot the survival rates based on the *TicketCount* using [`sns.barplot()`](https:\/\/seaborn.pydata.org\/generated\/seaborn.barplot.html) (see above).","5591d0ca":"The dataframe `df` has a column named `product_id`. So, we can merge it with the dataframe `dfp` to get `product_name`.","0d954293":"Use the functions [`isnull()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.isnull.html) and [`sum()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.sum.html) on the dataframe to find out the number of missing values in each column.","e4ca1569":"* From the above matrix, note which feature has the highest correlation with the survival. \n* Do features have high correlation among themselves? \n* Note that this matrix has excluded some categorical variables like gender, port of embarkment, etc. \n\nThe correlation matrix can also be visualized using heatmaps as shown below.","9f65937b":"This is the end of the exercise session and the following code is part of the guided session. If you finished this and the above section earlier than the alloted time, please skip the following two sections for now to go directly to the [section 7](#section7) on merging dataframes.","8368e7d5":"### 3. Feature Engineering: Creating a new column for the titles of the passengers (25 min)\n\nNow, we are going to create a new feature (column) for titles of the passengers. For that, let us first take at the passengers' names. ","598b1421":"What is the median age of passengers with the title 'Mrs.'?","f7354a90":"Write the code to retrieve every 100th row from the dataframe.","0af92968":"We convert the gender values to numerical values 0 and 1 using [`replace`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.replace.html) with a suitable dictionary. ","0ad30113":"We can also get the number of passengers using the shape method which gives us both the number of columns and the number of rows. Write the code to count the number of female passengers in the traveling in the first class. ","35bc55e0":"The most common way to derive a dataframe from a groupby object is by transformation. We create a new column *MedianAge* which consists of the groupwise median age depending on the passengers' title using [`transform()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.transform.html).","852a4981":"We notice one of the identifying characteristics of the titles above are that they end with a period. Regular expressions are very useful in the process of data extraction and we will use them using the python module `re` to extract the titles from the *Name* column. We will use regular expressions characters to construct a pattern and then use built-in function `findall` for pattern matching.\n\nSome useful regular expression characters:\n- `\\w`: pattern must contain a word character, such as letters.\n- `[ ]`: pattern must contain one of the characters inside the square brackets. If there is only one character inside the square brackets, for example `[.]`, then the pattern must contain it.\n\nLet's try this.","ebbd3e86":"What is the median age of passengers? Hint: Use the inbuilt function [`median`](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.median.html).","45ecdc5e":"Let us peek into the dataframe.","ec7f4cde":"Check the number of rows where Groupsize is not equal to Family. Similarly, check the number of rows where TicketCount is not equal to Family.","879d4acf":"In this exercise session, we will explore the [Titanic dataset from Kaggle](https:\/\/www.kaggle.com\/c\/titanic).  \nGoal of the competition: To apply the tools of machine learning to predict which passengers survived the Titanic tragedy.\n\nWhat is machine learning?\n- Learning from data without being explicity programmed. \n\nIn this workshop, we will be focusing on the two main machine learning tasks: \n- Classification \n- Regression\n\nHow to approach a problem? Broadly two parts:\n- Data exploration and feature engineering (Session 1)\n- Model building, tuning and testing (Session 2)\n    \n### Today's session\nTopics to be covered today:  \n- Pandas dataframes as the data structure for datasets\n- Converting csv files to dataframes \n- Slicing and indexing dataframes using conditionals as well as iloc and loc methods.\n- Statistical summary and exploration of dataframes\n- Detecting and filling missing values in the dataframes \n- Regular expressions for data extraction\n- Feature engineering such as creating new features \n- Basic plots\n- Basic operations such as dropping rows\/columns, setting index, replacing values of a column using a dictionary, etc.\n- Split-apply-combine operations by grouping rows of a dataframe\n- Encoding categorical variables\n- Correlation among features (optional)\n- Merging dataframes (optional)","8e59faa4":"First we import the relevant python modules:","86dc05a9":"List all the unique values for the titles along with their frequency. Hint: Use an inbuilt pandas function","544d3144":"One of the ways to derive a dataframe from a groupby object is by aggregation, that is computing a summary statistic (or statistics) about each group. For example, we can get the median values for the columns in each group of titles.","a9b4a996":"Detecting missing values is an important first step in Feature Engineering, that is preparing the features (independent variables) to use for building the machine learning models. The next step is to handle those missing values. Depending on the data, sometimes it is a good idea to drop the rows or columns that have some or a lot of missing values, but that also means discarding relevant information. Another way to handle missing values is to fill them with something appropriate. \n\n1. Discuss the pros and cons of dropping the rows and\/or columns with missing values in general. Should you drop none, all or some of the columns for this particular dataset in view of building the predictive model? Same question for dropping the rows with missing values.\n3. If you consider filling the missing values, what are the possible options? Can you make use of other values in that column to fill the missing values? Can you make use of other values in that row as well as values in that column to fill the missing values \n4. Can the title in the name column be used for guessing a passengers' age based on the age values of other passengers with the same title?","3d1c9ff6":"Finally, we only select 3 columns: `'product_name', 'aisle', 'department'`. Hint: Use indexing with the list of columns as seen above.","b2f23d45":"Now, we want to replace the various spellings of the same title to a single one. Hint: Use the below dictionary with the [`replace`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.replace.html) function\n\n`title_dictionary = {'Ms.': 'Miss.', 'Mlle.': 'Miss.', \n              'Dr.': 'Rare', 'Mme.': 'Mr.', \n              'Major.': 'Rare', 'Lady.': 'Rare', \n              'Sir.': 'Rare', 'Col.': 'Rare', \n              'Capt.': 'Rare', 'Countess.': 'Rare', \n              'Jonkheer.': 'Rare', 'Dona.': 'Rare', \n              'Don.': 'Rare', 'Rev.': 'Rare'}`","c64a5763":"Write the code to retrieve the **name, age and survival** information for all the **female passengers traveling in the first class**. ","1d53d9a1":"### 1. Selecting rows and columns from the dataframe\n\nHow do we select a column from the dataframe? Say, we want to select the *Name* column from the dataframe. \n\nRemember, we used square brackets for indexing lists, strings and numpy arrays in Python, for example `A[0]`.","8218de78":"Create a new column named *TicketCount* that counts the total number of passengers traveling in each passengers' ticket.\n\nHint: \n- First group passengers based on their tickets using `groupby()` on the *Ticket* column.\n- For the grouped object, pick any column that has no missing values.\n- Use `transform()` for this unique identifier column with the function `\"count\"` to create a new column *TicketCount*.\n\nFor example, we created *MedianAge* using the following code:   \n```df['MedianAge'] = df.groupby('Title')['Age'].transform(\"median\")```","8c6ef675":"Let us have a peek into the dataframe `df`.","ba7e2a03":"How many of the children on board survived? Hint: Add another conditional for the *Survived* column to the above code.","cee10a15":"We should remove the *Cabin* column from the DataFrame-- too many values are missing. Hint: Use [`drop()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.drop.html) with appropriate value for the `axis` keyword. ","4b141df6":"We drop off the *MedianAge* column since we no longer need it and then check for the missing values.","f516e14d":"### 7. Merging columns from different datasets (Optional) <a name=\"section7\"><\/a>:\nA simple illustration to merge two datasets using [`merge()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.merge.html).","2cc46d14":"Let us check whether the new columns are added to the dataframe `df`.","864fced4":"Below is a pie chart of the same using `matplotlib`:","876c54eb":"This is the notebook for the first session of the [A Hands-on Introduction to Machine Learning using Python on Kaggle workshop series at CMC](https:\/\/cmc-qcl.github.io\/A-hands-on-introduction-to-Machine-Learning-using-Python-on-Kaggle\/). ","67f5f5f0":"As we saw above, there are missing values in the column for *Embarked*. Fill them with the most commonly occuring value. Hint: Use [`fillna()`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.fillna.html).","d2a76f89":"The `iloc[]` method let us retrieve rows by passing sequence of indexes. For example, we can select the rows numbered 100th to 105th. The indexing works exactly like python lists and numpy arrays.","00e2b72d":"Now, we want to retrieve only the female passengers in the traveling in the first class. \nHint: Add another conditional `df['Pclass']==1` to the above code using & and make sure to wrap the two conditionals with parenthesis.","bfddbff7":"Now, we have new columns `aisle_id` and `department_id`. Let us first merge `dfa` with this dataframe to get the column `aisle`.","20ec8750":"What is the median age of passengers with the title 'Miss.'? Hint: Use [`loc[]`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html) method for slicing off the select rows and the *Age* column.","954f494e":"The output should be `(8, 3)`. Please check your code above if you get something else.","82c09ca0":"As it turns out to be rather big dataset to display, we can comment the above cell by adding # in front of df and run it again to get rid of the output.\n\nNext, let's check the numbers of rows and columns in the dataset.","c1ce7024":"Pandas: an excellent tool to work with datasets\n\nDataframes: the central data structure of pandas library\n- Evolved out of tables\n- Most suitable for data manipulation tasks  \n\nPandas is built on top of numpy. The crucial difference between numpy matrices and pandas Dataframes is that the columns in a Dataframe can be of different datatypes such as numerical, categorical, textual, etc.","5a26f3d4":"### 8. Feature engineering on the Titanic dataset to create a new column for group size (Optional home work exercise)\n\nIn this exercise, we are going to create a new column called `GroupSize` to get the size of the group for each passenger. We consider groups to be either family members or those traveling on the same ticket. This feature is derived using three columns *SibSp*, *Parch* and *Ticket*. \n\n[Notes](https:\/\/www.kaggle.com\/c\/titanic\/data) for the two features *SibSp* and *Parch* are as follows.\n\n> SibSp: The dataset defines family relations in this way...  \nSibling = brother, sister, stepbrother, stepsister  \nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n> \n> Parch: The dataset defines family relations in this way...  \nParent = mother, father  \nChild = daughter, son, stepdaughter, stepson  \nSome children travelled only with a nanny, therefore parch=0 for them.\n\nCreate a new column named *Family* by adding the columns *SibSp* and *Parch* and then add 1 to it. Hint: Use `df[\"New_column\"] = df[\"column_1\"] + df[\"column_2\"] + 1`.","0c3d0cd6":"So, the dataset consists of 891 rows and 15 columns.\n\nWe use `head()` function to peek into the first 5 rows (or any number of rows by using `head(n)`)."}}