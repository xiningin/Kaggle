{"cell_type":{"514223d5":"code","84b335c4":"code","2f36b4e8":"code","20f50463":"code","03c1b116":"code","801d2be4":"code","65a14d1c":"code","74ec0119":"code","7304a604":"code","b5723fb9":"code","84b7c3af":"code","036a9291":"code","0177f9bb":"code","134c8b70":"code","fe5f2299":"code","b5845c0c":"code","8fc45c6c":"code","cb7ae2ea":"code","d8dfdbc4":"code","ca04d9ce":"code","9ff3b687":"code","63869a8b":"code","0be4d2c3":"code","a6a177cc":"code","0699c001":"code","9a77afa7":"code","a47149db":"code","69b50eeb":"code","4742b082":"code","0d1b26e7":"code","3a559969":"code","2eb9822b":"code","2254b6c6":"code","01e6b8ef":"code","70fbe2e1":"code","6527883d":"code","7590c639":"markdown","d7a7b00c":"markdown","222020f9":"markdown","6ce8934d":"markdown","395617e7":"markdown","6fdd47c5":"markdown","aec1d305":"markdown","48100739":"markdown","faca7732":"markdown","26de9872":"markdown","e2e96ea4":"markdown","696d1a92":"markdown","668d74fe":"markdown","80a68621":"markdown","698a0d4f":"markdown","085a6d14":"markdown","0417be40":"markdown","be936c30":"markdown","fa55b0e0":"markdown","cb58eaa0":"markdown","48f63e71":"markdown"},"source":{"514223d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom datetime import date, timedelta\nimport re\nfrom statistics import mean\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder, MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","84b335c4":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","2f36b4e8":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","20f50463":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","03c1b116":"df_train.info()","801d2be4":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","65a14d1c":"#\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f NaN\n\ndf['Number of Reviews NAN'] = df['Number of Reviews'].isna()\ndf['Number of Reviews NAN'] = df['Number of Reviews NAN'].apply(lambda x: 1 if False else 0)\ndf['Number of Reviews not NAN'] = df['Number of Reviews NAN'].apply(lambda x: 0 if x == 1 else 1)\n\ndf['Cuisine Style NAN'] = df['Cuisine Style'].isna()\ndf['Cuisine Style NAN'] = df['Cuisine Style NAN'].apply(lambda x: 1 if False else 0)\ndf['Cuisine Style not NAN'] = df['Cuisine Style NAN'].apply(lambda x: 0 if x == 1 else 1)\n\ndf['Price Range NAN'] = df['Price Range'].isna()\ndf['Price Range NAN'] = df['Price Range NAN'].apply(lambda x: 1 if False else 0)\ndf['Price Range not NAN'] = df['Price Range NAN'].apply(lambda x: 0 if x == 1 else 1)","74ec0119":"#\u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445\ncity_info = {\n    'Munich':\n    {\n        'capital': 0,\n        'population': 1456000,\n        'numberofrestaraunts': 3018,\n        'country': 'Germany'\n    },\n    'Oporto':\n    {\n        'capital': 0,\n        'population': 214000,\n        'numberofrestaraunts': 1902,\n        'country': 'Portugal'\n    },\n    'Milan':\n    {\n        'capital': 0,\n        'population': 1352000,\n        'numberofrestaraunts': 7000,\n        'country': 'Italy'\n    },\n    'Barcelona':\n    {\n        'capital': 0,\n        'population': 5515000,\n        'numberofrestaraunts': 9309,\n        'country': 'Spain'\n    },\n    'Zurich':\n    {\n        'capital': 0,\n        'population': 402000,\n        'numberofrestaraunts': 1792,\n        'country': 'Switzerland'\n    },\n    'Lyon':\n    {\n        'capital': 0,\n        'population': 513000,\n        'numberofrestaraunts': 2701,\n        'country': 'France'\n    },\n    'Hamburg':\n    {\n        'capital': 0,\n        'population': 1822000,\n        'numberofrestaraunts': 3138,\n        'country': 'Germany'\n    },\n    'Geneva':\n    {\n        'capital': 0,\n        'population': 495000,\n        'numberofrestaraunts': 1665,\n        'country': 'Switzerland'\n    },\n    'Krakow':\n    {\n        'capital': 0,\n        'population': 769000,\n        'numberofrestaraunts': 1621,\n        'country': 'Poland'\n    },\n    'Paris':\n    {\n        'capital': 1,\n        'population': 2148000,\n        'numberofrestaraunts': 16684,\n        'country': 'France'\n    },\n    'Stockholm':\n    {\n        'capital': 1,\n        'population': 974000,\n        'numberofrestaraunts': 2882,\n        'country': 'Sweden'\n    },\n    'London':\n    {\n        'capital': 1,\n        'population': 8899000,\n        'numberofrestaraunts': 19374,\n        'country': 'England'\n    },\n    'Berlin':\n    {\n        'capital': 1,\n        'population': 3748000,\n        'numberofrestaraunts': 6962,\n        'country': 'Germany'\n    },\n    'Bratislava':\n    {\n        'capital': 1,\n        'population': 424000,\n        'numberofrestaraunts': 1201,\n        'country': 'Slovakia'\n    },\n    'Vienna':\n    {\n        'capital': 1,\n        'population': 1889000,\n        'numberofrestaraunts': 3951,\n        'country': 'Austria'\n    },\n    'Rome':\n    {\n        'capital': 1,\n        'population': 2873000,\n        'numberofrestaraunts': 10558,\n        'country': 'Italy'\n    },\n    'Madrid':\n    {\n        'capital': 1,\n        'population': 6549000,\n        'numberofrestaraunts': 10891,\n        'country': 'Spain'\n    },\n    'Dublin':\n    {\n        'capital': 1,\n        'population': 1361000,\n        'numberofrestaraunts': 2298,\n        'country': 'Ireland'\n    },\n    'Brussels':\n    {\n        'capital': 1,\n        'population': 1831000,\n        'numberofrestaraunts': 3525,\n        'country': 'Belgium'\n    },\n    'Warsaw':\n    {\n        'capital': 1,\n        'population': 1708000,\n        'numberofrestaraunts': 3040,\n        'country': 'Poland'\n    },\n    'Budapest':\n    {\n        'capital': 1,\n        'population': 1750000,\n        'numberofrestaraunts': 2917,\n        'country': 'Hungary'\n    },\n    'Copenhagen':\n    {\n        'capital': 1,\n        'population': 602000,\n        'numberofrestaraunts': 2329,\n        'country': 'Denmark'\n    },\n    'Amsterdam':\n    {\n        'capital': 1,\n        'population': 821000,\n        'numberofrestaraunts': 3847,\n        'country': 'The Netherlands'\n    },\n    'Lisbon':\n    {\n        'capital': 1,\n        'population': 504000,\n        'numberofrestaraunts': 4682,\n        'country': 'Portugal',\n    },\n    'Prague':\n    {\n        'capital': 1,\n        'population': 1319000,\n        'numberofrestaraunts': 5213,\n        'country': 'The Czech Republic'\n    },\n    'Oslo':\n    {\n        'capital': 1,\n        'population': 673000,\n        'numberofrestaraunts': 1303,\n        'country': 'Norway'\n    },\n    'Helsinki':\n    {\n        'capital': 1,\n        'population': 631000,\n        'numberofrestaraunts': 1478,\n        'country': 'Finland'\n    },\n    'Edinburgh':\n    {\n        'capital': 1,\n        'population': 488000,\n        'numberofrestaraunts': 1852,\n        'country': 'Scotland'\n    },\n    'Ljubljana':\n    {\n        'capital': 1,\n        'population': 284000,\n        'numberofrestaraunts': 583,\n        'country': 'Slovenia'\n    },\n    'Athens':\n    {\n        'capital': 1,\n        'population': 664000,\n        'numberofrestaraunts': 2441,\n        'country': 'Greece'\n    },\n    'Luxembourg':\n    {\n        'capital': 1,\n        'population': 115000,\n        'numberofrestaraunts': 716,\n        'country': 'Luxembourg'\n    }\n}","7304a604":"df['Capital'] = df['City'].apply(lambda x: city_info[x]['capital'])\ndf['Not_capital'] = df['Capital'].apply(lambda x: 1 if x == 0 else 0)","b5723fb9":"df['Country_name'] = df['City'].apply(lambda x: city_info[x]['country'])","84b7c3af":"df['Population'] = df['City'].apply(lambda x: city_info[x]['population'])","036a9291":"df['num_restaurants'] = df['City'].apply(lambda x: city_info[x]['numberofrestaraunts'])","0177f9bb":"df['restaraunts_per_people'] = df['City'].apply(lambda x: (city_info[x]['numberofrestaraunts'] \/ city_info[x]['population']))","134c8b70":"df['people_per_restaraunts'] = df['City'].apply(lambda x: (city_info[x]['population'] \/ city_info[x]['numberofrestaraunts']))","fe5f2299":"df['ranking_per_city'] = df['Ranking'] \/ df['num_restaurants']","b5845c0c":"price_dict = {'$': 10, '$$ - $$$': 100, '$$$$': 1000}\ndf['Price'] = df['Price Range'].map(price_dict)\n#\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf['Price'] = df['Price'].fillna(df['Price'].median())","8fc45c6c":"#\u0421\u0447\u0438\u0442\u0430\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u043e\u0431\u0449\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445\ncuisine = df['Cuisine Style'].dropna()\nall_cuisines = []\nlist_cuisines = set()\ncuisine = cuisine.str[1:-1].str.split(', ')\nfor i in cuisine:\n    for a in i:\n        all_cuisines.append(a)\n        list_cuisines.add(a)\n#\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0432 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u043a\u0443\u0445\u043d\u044f\n#C\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\nsum_na = df['Cuisine Style'].isna().sum()\navg_cuisines = (len(all_cuisines) + sum_na) \/ df.shape[0]\n\n#\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\nnumtoavg_cuis = []\nfor i in df['Cuisine Style']:\n    if type(i) == float:\n        #\u0412 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445, \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d, \u0434\u0435\u043b\u0438\u043c 1 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n        numtoavg_cuis.append(1 \/ avg_cuisines)\n    if type(i) == str:\n        row = i[1:-1].split(', ')\n        numtoavg_cuis.append(len(row) \/ avg_cuisines)\ndf['num to average cuisines'] = pd.Series(numtoavg_cuis)    ","cb7ae2ea":"#\u0423\u0437\u043d\u0430\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e(?) \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0443\u0445\u043d\u0438\ncuisine_popularity = dict(pd.Series(all_cuisines).value_counts(normalize=True))\n\n#\u0421\u043e\u0437\u0434\u0430\u044e \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043e\u043d\u044c.\n#\u0415\u0441\u043b\u0438 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043d\u0435 \u043e\u0434\u043d\u0430 \u043a\u0443\u0445\u043d\u044f - \u043d\u0430\u0445\u043e\u0436\u0443 max \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n#\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043d\u0443\u043b\u044f\u043c\u0438.\nindex_popular_cuisines = []\nfor i in df['Cuisine Style']:\n    if type(i) == float:\n        index_popular_cuisines.append(0)\n    if type(i) == str:\n        row = i[1:-1].split(', ')\n        index_popular_cuisines.append(row)\ndf['index_popular_cuisines'] = pd.Series(index_popular_cuisines)\ndf['index_popular_cuisines'] = df['index_popular_cuisines'].apply(lambda x: max([cuisine_popularity[each] for each in x]) if x != 0 else x)","d8dfdbc4":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445\ntotal_top = pd.Series(all_cuisines).value_counts()\ntotal_top[total_top == 1]\n#\u041f\u043e-\u0434\u0443\u0440\u0430\u0446\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438\nunique_cuisines = []\nfor i in df['Cuisine Style']:\n    if type(i) == float:\n        unique_cuisines.append(0)\n    else:\n        if 'Xinjiang' in i or 'Salvadoran' in i or 'Latvian' in i or 'Yunnan' in i or 'Burmese' in i:\n            unique_cuisines.append(1)\n        else:\n            unique_cuisines.append(0)\ndf['unique_cuisines'] = pd.Series(unique_cuisines)\ndf['not_unique_cuisines'] = df['unique_cuisines'].apply(lambda x: 0 if x == 1 else 1)","ca04d9ce":"#\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - [[], []]\ndf['Reviews'] = df['Reviews'].apply(lambda x: str([[], []]) if type(x) == float else x) \ndf['Reviews'] = df['Reviews'].apply(lambda x: str(x) if type(x) == list else x)\nres = []\nfor i in df['Reviews']:\n    res.append(re.findall(r'(\\d\\d\/\\d\\d\/\\d\\d\\d\\d)', i))\nreviews = pd.DataFrame(res)\nreviews[0] = pd.to_datetime(reviews[0])\nreviews[1] = pd.to_datetime(reviews[1])\n\ntoday = pd.to_datetime(date.today().strftime('%Y-%m-%d'))\n\nfromtoday = []\n#\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0437\u0430\u043f\u0435\u0447\u0435\u0442\u043b\u0435\u043d\u044b \u0438\u043b\u0438 2 \u043e\u0442\u0437\u044b\u0432\u0430 (\u043f\u0440\u0438\u0447\u0435\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u044b\u0439), \u0438\u043b\u0438 1, \u0438\u043b\u0438 0.\n#\u0415\u0441\u043b\u0438 \u043d\u0430\u0434\u043e, \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0432\u0435\u0436\u0438\u0439 \u043e\u0442\u0437\u044b\u0432.\nfor i in range(len(reviews)):\n    if reviews.loc[i, 0] > reviews.loc[i, 1]:\n        fromtoday.append(today - reviews.loc[i, 0])\n    elif reviews.loc[i, 0] < reviews.loc[i, 1]:\n        fromtoday.append(today - reviews.loc[i, 1])\n    else:\n        fromtoday.append(0)\n\n#\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0443\u043b\u0435\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e (\u0432\u0440\u043e\u0434\u0435 \u043a\u0430\u043a) \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041c\u0410\u0415 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u043e\ndf['fromtoday'] = pd.Series(fromtoday)\ndf['fromtoday'] = df['fromtoday'].apply(lambda x: x.days if (type(x) != int) else 0)\n#\u0425\u043e\u0442\u044f \u043d\u0435\u0442, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\n#fromtoday_mean = df[df['fromtoday'] != 0]['fromtoday'].mean()\n#df['fromtoday'] = df['fromtoday'].apply(lambda x: fromtoday_mean if x == 0 else x)","9ff3b687":"df['delta_days'] = reviews[0] - reviews[1]\ndf['delta_days'] = df['delta_days'].apply(lambda x: x.days if type(x) != float else 0)\ndf['delta_days'] = df['delta_days'].fillna(0)","63869a8b":"df.columns\ndf.tail()\ndf['id'] = df['Restaurant_id'].apply(lambda x: int(x[3:]))\nid_restaurants = pd.Series(df['id'].value_counts())\nchain_restaurants = id_restaurants[id_restaurants > 1]\ndf['chain_restaurants'] = df['id'].apply(lambda x: 1 if x in chain_restaurants else 0)\ndf['not_chain_restaurants'] = df['chain_restaurants'].apply(lambda x: 1 if x == 0 else 0)","0be4d2c3":"df_cities = pd.get_dummies(df['City'], drop_first='True')\ndf_countries = pd.get_dummies(df['Country_name'], drop_first='True')\ndf_price = pd.get_dummies(df['Price'], drop_first='True')\ndf_price.columns = ['$$-$$$', '$$$$']\n\ndf['len_cuisine'] = df['Cuisine Style'].apply(lambda x: list(x[1:-1].split(', ')) if type(x) != float else 0)\ndf_cuisines = pd.DataFrame()\n\ndef find_item(cell):\n    if cell == 0:\n        return 0\n    else:\n        if item in cell:\n            return 1\n        return 0\n\nfor item in list_cuisines:\n    df_cuisines[item] = df['len_cuisine'].apply(find_item)\ndf['len_cuisine'] = df['len_cuisine'].apply(lambda x: len(x) if x != 0 else 1) #\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u0443\u0445\u043d\u044f \u0435\u0441\u0442\u044c","a6a177cc":"#cities_le = LabelEncoder()\n#cities_le.fit(df['City'])\n#df['City Code'] = cities_le.transform(df['City'])\n\n#countries_le = LabelEncoder()\n#cities_le.fit(df['Country_name'])\n#df['Country Code'] = cities_le.transform(df['Country_name'])","0699c001":"#\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438\ndf['Number of Reviews'] = df['Number of Reviews'].fillna(0)","9a77afa7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(font_scale=1)\nplt.subplots(figsize=(12, 12))\nsns.heatmap(df.corr(), square=True,\n              annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\")","a47149db":"df = df.drop(['Not_capital', 'num_restaurants', 'people_per_restaraunts', 'index_popular_cuisines', 'not_unique_cuisines', 'not_chain_restaurants'], axis=1)","69b50eeb":"df_output = df.drop(['Restaurant_id', 'City', 'Cuisine Style', 'Reviews', 'Price Range', 'URL_TA', 'ID_TA', 'Country_name', 'id'], axis=1)\ndf_output = pd.concat([df_output, df_price, df_cities, df_countries, df_cuisines], axis = 1)\ndf_output.head()","4742b082":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_output.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_output.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","0d1b26e7":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","3a559969":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","2eb9822b":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","2254b6c6":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","01e6b8ef":"def round_output(result):\n    if result <= 0.25:\n        return 0\n    elif 0.25 < result <= 0.75:\n        return 0.5\n    elif 0.75 < result <= 1.25:\n        return 1\n    elif 1.25 < result <= 1.75:\n        return 1.5\n    elif 1.75 < result <= 2.25:\n        return 2\n    elif 2.25 < result <= 2.75:\n        return 2.5\n    elif 2.75 < result <= 3.25:\n        return 3\n    elif 3.25 < result <= 3.75:\n        return 3.5\n    elif 3.75 < result <= 4.25:\n        return 4\n    elif 4.25 < result <= 4.75:\n        return 4.5\n    else:\n        return 5\n    \nfor i in range(y_pred.size):\n    y_pred[i] = round_output(y_pred[i])","70fbe2e1":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","6527883d":"test_data = test_data.drop(['Rating'], axis=1)\npredict_submission = model.predict(test_data)\npredict_submission\nsample_submission['Rating'] = predict_submission\nsample_submission['Rating'] = sample_submission['Rating'].apply(round_output)\nsample_submission.to_csv('submission_new_forked.csv', index=False)\nsample_submission.head(10)","7590c639":"## Model","d7a7b00c":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 3: \u0438\u043d\u0434\u0435\u043a\u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f","222020f9":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 10: \u0441\u0435\u0442\u0435\u0432\u043e\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0438\u043b\u0438 \u043d\u0435\u0442","6ce8934d":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 7: \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","395617e7":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 3.2: \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443","6fdd47c5":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 3.1: \u0438\u043d\u0434\u0435\u043a\u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","aec1d305":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 4: \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u0438\u0434 \u0434\u043b\u044f \u0440\u0430\u043d\u0433\u0430 \u0446\u0435\u043d","48100739":"# show time begins","faca7732":"### Submission","26de9872":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 8: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430","e2e96ea4":"# Data","696d1a92":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a +: \u0442\u0435 \u0441\u0430\u043c\u044b\u0435 \u0444\u0438\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","668d74fe":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 2.2: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","80a68621":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 9: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438","698a0d4f":"#### \u0417\u0430\u0431\u044b\u0442\u044b\u0435 NaN","085a6d14":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 6: \u0438\u043d\u0434\u0435\u043a\u0441 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043e\u043d\u044c","0417be40":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 2: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b","be936c30":"\u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d \u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LabelEncoder() \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0438\u0439 \u041c\u0410\u0415","fa55b0e0":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 5: \u0438\u043d\u0434\u0435\u043a\u0441 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043a \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435","cb58eaa0":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 1: \u0441\u0442\u043e\u043b\u0438\u0446\u0430\/\u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u0430","48f63e71":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a 2.1: \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430"}}