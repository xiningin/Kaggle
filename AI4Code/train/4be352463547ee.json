{"cell_type":{"a1bb5df2":"code","92c7f14b":"code","230cb8bc":"code","af1e387f":"code","13bc866c":"code","5f512967":"code","1eccfbd1":"code","e8d63619":"code","0ccff760":"code","24c38b16":"code","265bd95c":"code","d9a7fcd7":"code","68d8c846":"code","bc7efba8":"code","73c8e602":"code","1afaac51":"code","0462d2cd":"code","a024bd2f":"code","6b3f2653":"code","050ede53":"code","bb147898":"code","7729e124":"code","d9b60aea":"code","cd600ded":"markdown","150c4403":"markdown","fde65517":"markdown","978e0841":"markdown"},"source":{"a1bb5df2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","92c7f14b":"### Reading the dataset\ndata=pd.read_csv('..\/input\/advertisingcsv\/advertising.csv')\n","230cb8bc":"data.head()","af1e387f":"data.info()","13bc866c":"#removing the unwanted coloumn\ndata.drop(\"Unnamed: 0\",axis=1,inplace=True)","5f512967":"data","1eccfbd1":"# collect the X and Y\nx=data[\"TV\"].values\nx.shape","e8d63619":"y=data[\"sales\"].values\ny.shape","0ccff760":"### Calculating the coefficient\n##Mean of x and y\nmean_x=np.mean(x)\nprint(mean_x)\nmean_y=np.mean(y)\nprint(mean_y)","24c38b16":"### Total no of values\nn=len(x)\nn","265bd95c":"##y=b0+b1x\n##b0=y-b1x\n## calculate the b1 and b0\nnumer=0\ndenom=0\nfor i in range(n):\n    numer += (x[i]-mean_x)*(y[i]-mean_y)\n    denom += (x[i]-mean_x)**2\nb1=numer\/denom\nb0=mean_y-(b1*mean_x)\nprint(b1)\nprint(b0)","d9a7fcd7":"print(\"The linear equation is: y={:.4}x+{:.5}\".format(b1,b0))","68d8c846":"# plotting the values and regression line\nmax_x=np.max(x)+100\nmin_x=np.min(x)-100\n#print(max_x,min_x)\nx1=np.linspace(min_x,max_x,1000)\ny1=b0+b1*x1\n\nplt.plot(x1,y1,color=\"red\",label=\"Regression Line\")\nplt.scatter(x,y,c=\"Blue\",label=\"Actual values\")\nplt.xlabel(\"TV\")\nplt.ylabel(\"Sales\")\nplt.legend(loc=\"best\")\nplt.show()","bc7efba8":"data","73c8e602":"y_pred=b0+b1*x[2]\ny_pred","1afaac51":"#Determination coefficient(R2)--(0 to 1)\nss_tot=0\nss_res=0\nfor i in range(n):\n    y_pred=b0+b1*x[i]\n    ss_res += (y[i]-y_pred)**2\n    ss_tot += (y[i]-mean_y)**2\nr2=1-(ss_res\/ss_tot)\nprint(r2)","0462d2cd":"### Using Sklearn\nfrom sklearn.linear_model import LinearRegression\nx=data[\"TV\"].values.reshape(-1,1)\ny=data[\"sales\"].values.reshape(-1,1)\nreg=LinearRegression()   #Aplying the data to the model\nreg.fit(x,y)     ","a024bd2f":"print(reg.coef_)","6b3f2653":"print(reg.intercept_)","050ede53":"reg.predict([[230.1]])","bb147898":"pred=reg.predict(x)\npred","7729e124":"plt.figure(figsize=(8,4))\nplt.scatter(data[\"TV\"],data[\"sales\"],c=\"red\",label=\"Actual values\")\nplt.plot(data[\"TV\"],pred,c=\"Blue\",label=\"Regression Line\")\nplt.xlabel(\"TV\")\nplt.ylabel(\"Sales\")\nplt.legend(loc=\"best\")\nplt.show()","d9b60aea":"### R2 score\nr2=reg.score(x,y)\nprint(\"R2 score:\",r2)","cd600ded":"![fom.png](attachment:fom.png)","150c4403":"### Upvote if you like it","fde65517":"![r2.png](attachment:r2.png)","978e0841":"### Simple Linear Regression\n-  y=mx+c\n-  one independent and one dependent variable"}}