{"cell_type":{"2664016e":"code","c0b596c9":"code","ea456cea":"code","364c59f0":"code","01a6a4df":"code","b635b08d":"code","cdf30ba3":"code","1567d911":"code","44eec0b2":"code","84d5b0f0":"code","f12bb1d2":"code","45baf453":"code","268761f9":"code","fbbda68a":"code","cffa8f9b":"code","5bfa7c42":"code","878ff6ba":"code","b8f39a92":"code","70e22507":"code","1e257ee6":"code","be5c41e2":"code","3817889c":"code","ed5f5662":"code","8d53b787":"code","88023bca":"code","be137194":"code","600860b2":"code","5ca13a4d":"code","3163bff6":"code","8ed1ab0a":"code","856e8e19":"code","a3a99f3d":"code","5107d9ca":"code","cc4e8b4c":"code","8cca21a1":"code","cb6e2f66":"code","fbbc844a":"code","7c5d7691":"code","6936f2d7":"code","b6b1b399":"code","cce3ec4b":"code","ae446757":"code","4bb9bf22":"code","5e8c2f2f":"code","7b32055b":"code","3caf4510":"code","c09ae4e1":"code","93d325d2":"code","013e981c":"code","aa5745c3":"code","0bf81919":"code","7867ce1d":"code","2542bedf":"code","a29fafc5":"code","dc85252f":"code","95626ccb":"code","c688ee36":"code","cce89bcb":"code","b79a319d":"code","7b507aea":"code","c915bfd1":"code","4ba85fc4":"code","b06683ba":"code","9f91034c":"code","3b72d751":"code","3cda00b2":"code","f8fb6907":"code","e0e0e2a9":"code","41053aa3":"code","727bf506":"code","09db1b20":"code","9623527b":"code","9b0d52e2":"code","b7a2a678":"code","6ece2f30":"code","5a8a86aa":"code","19fe645d":"code","d7d1cdfd":"markdown","0e893d79":"markdown","bd0e16e1":"markdown","584292af":"markdown","db9f2a7a":"markdown","401cf89f":"markdown","a6ca7695":"markdown","3c700d6c":"markdown","f7238e80":"markdown","b614f961":"markdown","e0664137":"markdown","81575cc6":"markdown","ae3f189c":"markdown","0795c796":"markdown","c319cde0":"markdown","7bc1005f":"markdown","9fa81903":"markdown","b6a715c2":"markdown","58217c4e":"markdown","eb7087b0":"markdown","26c92beb":"markdown","e29d4dcc":"markdown","f4f68132":"markdown","d753499c":"markdown","28d1e2b1":"markdown","b917e9cf":"markdown","bd65fac7":"markdown","99156662":"markdown","d0b1225a":"markdown","ad81ffe3":"markdown","f0de36fb":"markdown","bc5238d8":"markdown"},"source":{"2664016e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix\n\npd.pandas.set_option('display.max_columns', None)","c0b596c9":"dataset = pd.read_csv('..\/input\/titanic\/train.csv')","ea456cea":"dataset.head()","364c59f0":"dataset.shape","01a6a4df":"dataset.info()","b635b08d":"dataset.describe()","cdf30ba3":"dataset.describe(include=['O'])","1567d911":"for feature in dataset.columns:\n    print(feature,dataset[feature].isnull().sum(),'of',dataset.shape[0],'values are missing')","44eec0b2":"test = pd.read_csv('..\/input\/titanic\/test.csv')","84d5b0f0":"test.shape","f12bb1d2":"for feature in test.columns:\n    print(feature,test[feature].isnull().sum(),'of',test.shape[0],'values are missing')","45baf453":"test.describe(include = 'O')","268761f9":"survived = dataset[dataset['Survived']==1]\ndied = dataset[dataset['Survived']==0]\n\nprint('Survived %i (%.1f%%)'%(len(survived),len(survived)\/len(dataset)*100))\nprint('Died %i (%.1f%%)'%(len(died),len(died)\/len(dataset)*100))\nprint('Total %i '%(len(dataset)))","fbbda68a":"#Pclass dependence\ndataset.Pclass.value_counts()","cffa8f9b":"dataset.groupby('Survived')['Pclass'].value_counts()","5bfa7c42":"dataset[['Pclass', 'Survived']].groupby(['Pclass']).mean()","878ff6ba":"sns.barplot(x='Pclass', y='Survived', data=dataset)","b8f39a92":"sns.heatmap(dataset.corr())","70e22507":"dataset.Sex.value_counts()","1e257ee6":"dataset.groupby('Survived').Sex.value_counts()","be5c41e2":"dataset[['Sex','Survived']].groupby('Sex').mean()","3817889c":"sns.barplot(x = 'Sex', y = 'Survived', data = dataset)","ed5f5662":"tab = pd.crosstab(dataset['Pclass'], dataset['Sex'])\nprint (tab)","8d53b787":"tab.div(tab.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\nplt.xlabel('Pclass')\nplt.ylabel('Percentage')","88023bca":"sns.factorplot('Sex', 'Survived', hue='Pclass', size=4, aspect=2, data=dataset)","be137194":"sns.factorplot(x='Pclass', y='Survived', hue='Sex', col='Embarked', data=dataset)","600860b2":"dataset.Embarked.value_counts()","5ca13a4d":"dataset.groupby('Embarked').Survived.value_counts()","3163bff6":"sns.barplot(x = 'Embarked',y = 'Survived', data = dataset)","8ed1ab0a":"dataset[['Embarked','Survived']].groupby('Embarked').mean()","856e8e19":"dataset['Parch'].value_counts()","a3a99f3d":"dataset.groupby('Survived').Parch.value_counts()","5107d9ca":"sns.barplot(x = 'Parch',y = 'Survived', ci = None,data = dataset)","cc4e8b4c":"dataset[['Parch','Survived']].groupby('Parch').mean()","8cca21a1":"dataset.SibSp.value_counts()","cb6e2f66":"dataset.groupby('Survived').SibSp.value_counts()","fbbc844a":"dataset[['SibSp','Survived']].groupby('SibSp').mean()","7c5d7691":"sns.barplot(x = 'SibSp', y = 'Survived', ci = None, data = dataset)","6936f2d7":"fig = plt.figure(figsize=(15,5))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132)\nax3 = fig.add_subplot(133)\n\nsns.violinplot(x=\"Embarked\", y=\"Age\", hue=\"Survived\", data=dataset, split=True, ax=ax1)\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=dataset, split=True, ax=ax2)\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", data=dataset, split=True, ax=ax3)","b6b1b399":"total_survived = dataset[dataset['Survived']==1]\ntotal_not_survived = dataset[dataset['Survived']==0]\nmale_survived = dataset[(dataset['Survived']==1) & (dataset['Sex']==\"male\")]\nfemale_survived = dataset[(dataset['Survived']==1) & (dataset['Sex']==\"female\")]\nmale_not_survived = dataset[(dataset['Survived']==0) & (dataset['Sex']==\"male\")]\nfemale_not_survived = dataset[(dataset['Survived']==0) & (dataset['Sex']==\"female\")]\n\nplt.figure(figsize=[15,5])\nplt.subplot(111)\nsns.distplot(total_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='blue')\nsns.distplot(total_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='red', axlabel='Age')\nplt.figure(figsize=[15,5])\n\nplt.subplot(121)\nsns.distplot(female_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='blue')\nsns.distplot(female_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='red', axlabel='Female Age')\n\nplt.subplot(122)\nsns.distplot(male_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='blue')\nsns.distplot(male_not_survived['Age'].dropna().values, bins=range(0, 81, 1), kde=False, color='red', axlabel='Male Age')","cce3ec4b":"plt.figure(figsize=(15,6))\nsns.heatmap(dataset.drop('PassengerId',axis=1).corr(), vmax=0.6, square= True, annot=True)","ae446757":"train_test_data = [dataset, test] # combining train and test dataset\n\nfor data in train_test_data:\n    data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.')","4bb9bf22":"test['Title'].head()   ","5e8c2f2f":"pd.crosstab(dataset['Title'], dataset['Sex'])","7b32055b":"for data in train_test_data:\n    data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    data['Title'] = data['Title'].replace('Mlle', 'Miss')\n    data['Title'] = data['Title'].replace('Ms', 'Miss')\n    data['Title'] = data['Title'].replace('Mme', 'Mrs')\n    \ndataset[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","3caf4510":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor data in train_test_data:\n    data['Title'] = data['Title'].map(title_mapping)\n    data['Title'] = data['Title'].fillna(0)","c09ae4e1":"dataset.head()","93d325d2":"#Replaces sex feature data with numbers\ntitle_mapping = {'female':1,'male':0}\nfor data in train_test_data:\n    data['Sex'] = data['Sex'].map(title_mapping)","013e981c":"## Embarked \n#We replace nan value with the most popular value\nfor data in train_test_data:\n    print(data.Embarked.value_counts())\n    print(data.Embarked.isnull().sum())","aa5745c3":"for data in train_test_data:\n    data.Embarked = data.Embarked.fillna('S')","0bf81919":"for data in train_test_data:\n    data.Embarked = data.Embarked.map({'S':0,'C':1,'Q':2})","7867ce1d":"dataset.head()","2542bedf":"for data in train_test_data:\n    age_mean = data.Age.mean()\n    age_std = data.Age.std()\n    age_null_value = data.Age.isnull().sum()\n    \n    age_dataset = np.random.randint(age_mean-age_std,age_mean+age_std,size = age_null_value)\n    data['Age'][np.isnan(data.Age)] = age_dataset\n    data['Age'] = data['Age'].astype(int)","a29fafc5":"#Divide the age into 5 groups\ndataset['AgeBand'] = pd.cut(dataset['Age'], 5)  \n#dataset.AgeBand.head()\nprint (dataset[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","dc85252f":"for data in train_test_data:\n    data.loc[ data['Age'] <= 16, 'Age'] = 0\n    data.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age'] = 1\n    data.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age'] = 2\n    data.loc[(data['Age'] > 48) & (data['Age'] <= 64), 'Age'] = 3\n    data.loc[ data['Age'] > 64, 'Age'] = 4","95626ccb":"dataset.head()","c688ee36":"for data in train_test_data:\n    data.Fare[np.isnan(data.Fare)] = data.Fare.mean()","cce89bcb":"#Divide the age into 5 groups\ndataset['FareBand'] = pd.qcut(dataset['Fare'], 4)  \n#dataset.AgeBand.head()\nprint (dataset[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","b79a319d":"for data in train_test_data:\n    data.loc[ data['Fare'] <= 7.91, 'Fare'] = 0\n    data.loc[(data['Fare'] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1\n    data.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare']   = 2\n    data.loc[ data['Fare'] > 31, 'Fare'] = 3\n    data['Fare'] = data['Fare'].astype(int)","7b507aea":"dataset.head()","c915bfd1":"for data in train_test_data:\n    data['Family'] = data['SibSp'] + data['Parch'] + 1\ndataset[['Family','Survived']].groupby(['Family'],as_index = False).mean()","4ba85fc4":"for data in train_test_data:\n    data['IsAlone'] = np.where(data['Family']==1,1,0)","b06683ba":"dataset[['IsAlone','Survived']].groupby(['IsAlone'],as_index = False).mean()","9f91034c":"dataset = dataset.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin','AgeBand','FareBand','Family'],axis = 1)\ntest = test.drop(['Name','SibSp','Parch','Ticket','Cabin','Family'],axis = 1)","3b72d751":"X_train = dataset.drop('Survived',axis = 1)\ny_train = dataset['Survived']\nX_test = test.drop('PassengerId',axis = 1)","3cda00b2":"models = [LogisticRegression(),SVC(),LinearSVC(),DecisionTreeClassifier(),\\\n          RandomForestClassifier(n_estimators = 100),KNeighborsClassifier(10),\\\n         SGDClassifier(max_iter = 100, tol = None),Perceptron(max_iter = 100, tol = None),GaussianNB()]","f8fb6907":"models_list = ['Logistic Regression','Support Vector Machines','Linear Support Vector Machines',\\\n               'Decision Tree','Random Forest','k-Nearest Neighbours', 'Stochastic Gradient Descent',\\\n               'Perceptron','Naive Bayes']\naccuracy_list = []","e0e0e2a9":"for i in models:\n    i.fit(X_train,y_train)\n    y_pred_log = i.predict(X_test)\n    accuracy = round(100*i.score(X_train,y_train),2)\n    print(str(i) + ' Accuracy {}%'.format(accuracy))\n    accuracy_list.append(accuracy)","41053aa3":"models_dataframe = pd.DataFrame({'Models': models_list,'Accuracy':accuracy_list})\nmodels_dataframe.set_index('Models', inplace = True)\nmodels_dataframe.sort_values(by = ['Accuracy'], ascending=False)","727bf506":"model = RandomForestClassifier(n_estimators = 100)\nmodel.fit(X_train,y_train)\ny_pred_log = model.predict(X_train)\naccuracy = round(100*model.score(X_train,y_train),2)\nprint(str(model) + ' Accuracy {}%'.format(accuracy))","09db1b20":"conf_mat = confusion_matrix(y_train,y_pred_log)\nrows = ['Survived','Not Survived']\ncols = ['Predicted Survived','Predicted Not Survived']\nconf_mat_frame = pd.DataFrame(conf_mat,index = rows, columns = cols)\n\nnp.set_printoptions(precision = 2)\n\nprint('Confusion Matrix in numbers')\nprint(conf_mat)\nprint('')\nprint('')\n\nprint('Confusion Matrix in percents')\nconf_mat_perc = conf_mat.astype(float)\/conf_mat.sum(axis = 1)[:,np.newaxis]\nprint(conf_mat_perc)\nprint('')\nprint('')\n\nconf_mat_perc_frame = pd.DataFrame(conf_mat_perc,index = rows, columns = cols)\n\nplt.figure.figsize = (15,5)\n\nplt.subplot(121)\nsns.heatmap(conf_mat_frame, annot = True, fmt='d')\n\nplt.subplot(122)\nsns.heatmap(conf_mat_perc_frame, annot = True)","9623527b":"test.head()","9b0d52e2":"y_pred = model.predict(X_test)","b7a2a678":"answer = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':y_pred})","6ece2f30":"answer.head()","5a8a86aa":"answer.to_csv('submission.csv',index = False)","19fe645d":"c = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nc.head()","d7d1cdfd":"We are going to use classification algorithms, as we need to classify whether a passenger survived or not. \nUsed algorithms:\n<br>Logistic Regression\n<br>Support Vector Machines\n<br>Linear Support Vector Machines\n<br>Stochastic Gradient Descent\n<br>k-Nearest Neighbours\n<br>Decision Tree\n<br>Random Forest\n<br>Perceptron\n<br>Naive Bayes","0e893d79":"## Age vs Survival","bd0e16e1":"Survival seems to be correlated with the Pclass","584292af":"Females from first and second Pclass survived almost totally, and the main part of females died at the 3rd class. Males from 1st class don't have much bigger survival probability than ones from other classes\n","db9f2a7a":"## Fare Feature","401cf89f":"## Embarked vs Survival","a6ca7695":"The highest accuracies we got are done by Decision Tree and Random Forest models. We'll use Random Forest as it's better suited for managing overfitting problem. ","3c700d6c":"After that, we convert the categorical Title values into numeric form.\n","f7238e80":"## Embarked Feature","b614f961":"Almost all children from Pclass = 2 survived. Young people from Pclass = 1 survived more than from other classes. First class has very few children compared to other classes and many old people. Most childern of 3rd class survived.\n\nMost male children (between age 0 to 14) survived. Females with age between 18 to 40 have better survival chance.\n","e0664137":"By adding IsALone column, we can see, that people who were on the ship alone, had smaller probability of Survival.","81575cc6":"# Feature Selection","ae3f189c":"Combining both male and female, we can see that children with age between 0 to 5 have better chance of survival. Females with age between \"18 to 40\" and \"50 and above\" have higher chance of survival. Males with age between 0 to 14 have better chance of survival.\n","0795c796":"### Confusion matrix","c319cde0":"# Test data","7bc1005f":"#### Create submission file to Kaggle","9fa81903":"We now replace some less common titles with the name \"Other\".\n","b6a715c2":"We drop all columns from the training dataset, which we substituted with better ones. We drop auxiliary columns. We also drop the Cabin column, because of its numerous missing values.\n","58217c4e":"## Sex Feature","eb7087b0":"## SibSp and Parch","26c92beb":"As we see, we added a new column with a title of a person\n","e29d4dcc":"As we see here the most significant probability of Survival is for families with 2-4 members.\n","f4f68132":"## Relation between sex and survival","d753499c":"## Parch vs Survived","28d1e2b1":"## Name Feature\n\nLet's first extract titles from Name column.\n","b917e9cf":"Substitute NaN value of the Age column with a random number within one st.dev from the mean value.\n","bd65fac7":"## Age feature","99156662":"# Modeling","d0b1225a":"## SibSp vs Survived","ad81ffe3":"## Relationship between survival and Features","f0de36fb":"## Correlation","bc5238d8":"# Feature Extraction"}}