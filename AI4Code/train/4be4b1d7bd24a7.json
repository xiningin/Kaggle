{"cell_type":{"4d8bc9da":"code","3675dbed":"code","9290918c":"code","38556e98":"code","88635e03":"code","081962db":"code","eaa054d4":"code","bc45b5b5":"code","93d8cb53":"code","f9d011c2":"code","0e04994d":"code","16765258":"code","847d1cce":"code","026d3730":"code","82a9d205":"code","7e9bfe5b":"code","5e44df7e":"code","837a3bde":"code","788bf48e":"code","047e03f0":"code","0f5b0c86":"code","dbb3a3d9":"code","ea17a008":"code","a329a848":"code","af5002fb":"code","d09293e7":"code","49895f09":"code","3d6ca9dc":"code","31ffa343":"code","eede9ae9":"code","ba4ec5f2":"code","16c2fbc6":"code","8d80eace":"code","4b60dfb3":"code","81f576d5":"code","119e18b5":"code","30a99fef":"code","745f433c":"code","ad73b829":"code","d5c76f4c":"code","03f71ae6":"code","36cbe65f":"code","8e7ef5b8":"code","3563affe":"code","1d69dd6d":"code","dcb193b1":"code","4ed330fe":"code","de5f13b2":"code","f6b7f313":"code","c2fc3d53":"code","ac45f11f":"code","a011be44":"code","ccf29508":"code","a84893e7":"code","d7f74210":"code","e003a386":"code","cb75393f":"code","5e13a208":"code","382a60a1":"code","bfcdcb17":"code","e8d2ab0c":"code","b54073f5":"code","49e72f3f":"markdown","c6d73007":"markdown","f645e73c":"markdown","ab6d65e5":"markdown","00cc6303":"markdown","2e5a0fc8":"markdown","07ac2b0f":"markdown","ac659261":"markdown","c123af0c":"markdown","5d044c97":"markdown","7d63542e":"markdown","aca83db7":"markdown","bcad33dd":"markdown","8ece5425":"markdown","136a5ed1":"markdown","9d027709":"markdown","8146c8f1":"markdown","270e2154":"markdown","620e365b":"markdown","5e2f0da7":"markdown","d2b12783":"markdown","708ee1e4":"markdown","8180c4e7":"markdown","08a4f939":"markdown","85b2601c":"markdown","e0226fa5":"markdown","4c47861d":"markdown","2dc99ade":"markdown","016160b7":"markdown","264d0e86":"markdown","7ccee544":"markdown","2476c9ad":"markdown","98a6ba32":"markdown","d6269d72":"markdown","7496e378":"markdown","55f78eac":"markdown","872e0bd9":"markdown"},"source":{"4d8bc9da":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.neighbors import KNeighborsClassifier,RadiusNeighborsClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier,ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.externals import joblib\nfrom sklearn.metrics import accuracy_score,roc_auc_score","3675dbed":"data=pd.read_csv(\"..\/input\/bigml_59c28831336c6604c800002a.csv\")","9290918c":"print(data.shape)\nprint(data.columns)\ndata.head()","38556e98":"data.describe()","88635e03":"data.dtypes","081962db":"data.isnull().sum()","eaa054d4":"data.drop([\"phone number\"],axis=1,inplace=True)","bc45b5b5":"data[\"account length\"].value_counts().head(20)","93d8cb53":"for i in data.columns:\n    if data[i].dtype == \"object\":\n        print(data[i].value_counts())","f9d011c2":"ax=sns.countplot(x=\"churn\",data=data)\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format( (p.get_height()\/data.shape[0])*100 ), (p.get_x()+0.3, p.get_height()))","0e04994d":"# data.groupby([\"area code\",\"churn\"]).size()","16765258":"ac=data.groupby([\"area code\", \"churn\"]).size().unstack().plot(kind='bar', stacked=False,figsize=(6,5))\nfor i in ac.patches:\n    ac.text(i.get_x()+0.05, i.get_height()+20,str(i.get_height()))","847d1cce":"# data[\"state\"].value_counts()","026d3730":"st=data.groupby([\"state\", \"churn\"]).size().unstack().plot(kind='bar',stacked=True,figsize=(15,5))\n# for i in st.patches:\n#     st.text(i.get_x(), i.get_height(),str(i.get_height()))","82a9d205":"# cols=['state','area code',\n#  'international plan',\n#  'voice mail plan',\n#  'number vmail messages','customer service calls',]","7e9bfe5b":"# plt.plot([1,6])\n# for i in range(len(cols)):\n#     plt.subplot(i+1,1,1)\n#     a=data.groupby([cols[i], \"churn\"]).size().unstack().plot(kind='bar', stacked=False,figsize=(6,5))\n#     for i in a.patches:\n#         a.text(i.get_x(), i.get_height(),str(i.get_height()))\n#     plt.show()","5e44df7e":"ip=data.groupby([\"international plan\", \"churn\"]).size().unstack().plot(kind='bar', stacked=False,figsize=(6,5))\nfor i in ip.patches:\n    ip.text(i.get_x()+0.05, i.get_height()+20,str(i.get_height()))","837a3bde":"vp=data.groupby([\"voice mail plan\", \"churn\"]).size().unstack().plot(kind='bar', stacked=True,figsize=(6,5))\n# for i in vp.patches:\n#     vp.text(i.get_x()+0.05, i.get_height()+20,str(i.get_height()))","788bf48e":"cs=data.groupby([\"customer service calls\", \"churn\"]).size().unstack().plot(kind='bar', stacked=False,figsize=(12,6))\nfor i in cs.patches:\n    cs.text(i.get_x()+0.05, i.get_height()+20,int(i.get_height()))","047e03f0":"cate = [key for key in dict(data.dtypes) if dict(data.dtypes)[key] in ['bool', 'object']]","0f5b0c86":"le = preprocessing.LabelEncoder()\nfor i in cate:\n    le.fit(data[i])\n    data[i] = le.transform(data[i])","dbb3a3d9":"data.head()","ea17a008":"y=data[\"churn\"]\nx=data.drop([\"churn\"],axis=1)\nx.columns","a329a848":"clf = RandomForestClassifier()\nclf.fit(x, y)","af5002fb":"clf.score(x,y)","d09293e7":"clf.feature_importances_","49895f09":"importances = clf.feature_importances_\nindices = np.argsort(importances)\nfeatures=x.columns\nfig, ax = plt.subplots(figsize=(9,9))\nplt.title(\"Feature Impoprtance\")\nplt.ylabel(\"Features\")\nplt.barh(range(len(indices)), importances[indices] )\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.show()","3d6ca9dc":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","31ffa343":"clf.fit(X_train,y_train)\n","eede9ae9":"print(\"Train accuracy: \",clf.score(X_train,y_train))\n\nprint(\"Test accuracy: \",clf.score(X_test,y_test))","ba4ec5f2":"from sklearn import tree\n\ndt=tree.DecisionTreeClassifier()\ndt\n\ndt.fit(X_train,y_train)\nprint(\"Train data accuracy:\",dt.score(X_train,y_train))\n\nprint(\"Test data accuracy:\",dt.score(X_test,y_test))","16c2fbc6":"data=pd.read_csv(\"..\/input\/bigml_59c28831336c6604c800002a.csv\")","8d80eace":"data.head()","4b60dfb3":"data.drop([\"phone number\"],axis=1,inplace =True)","81f576d5":"data.dtypes","119e18b5":"data.dtypes.value_counts()","30a99fef":"cate","745f433c":"enc=pd.get_dummies(data[cate[:-1]])","ad73b829":"enc.columns","d5c76f4c":"data.columns","03f71ae6":"data.drop(cate[:-1],axis=1,inplace=True)","36cbe65f":"data[enc.columns]=enc","8e7ef5b8":"data.shape","3563affe":"X=data.drop([\"churn\"],axis=1)\ny=data[\"churn\"]","1d69dd6d":"X.shape","dcb193b1":"lr=LogisticRegression().fit(X, y)\nlr.score(X, y)","4ed330fe":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","de5f13b2":"lr=LogisticRegression().fit(X_train, y_train)\nprint(\"Train accuracy:\",lr.score(X_train, y_train))","f6b7f313":"print(\"Test accuracy:\",lr.score(X_test,y_test))","c2fc3d53":"X_train.columns","ac45f11f":"joblib.dump(X_train,'X_train.pkl') \njoblib.dump(y_train,'y_train.pkl') \njoblib.dump(X_test,'X_test.pkl') \njoblib.dump(y_test,'y_test.pkl')\njoblib.dump(x,'x.pkl')\njoblib.dump(y,'y.pkl')","a011be44":"X_train=joblib.load('X_train.pkl')\ny_train=joblib.load('y_train.pkl')\nX_test=joblib.load('X_test.pkl')\ny_test=joblib.load('y_test.pkl')\nx=joblib.load('x.pkl')\ny=joblib.load('y.pkl')","ccf29508":"algo = pd.DataFrame(columns=[\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo.head()","a84893e7":"clf = LogisticRegression(C=1.0)\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","d7f74210":"clf = xgb.XGBClassifier(max_depth=7, n_estimators=200, colsample_bytree=0.8, \n                        subsample=0.8, nthread=10, learning_rate=0.1)\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","e003a386":"clf = MultinomialNB()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","cb75393f":"clf = AdaBoostClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","5e13a208":"clf = KNeighborsClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","382a60a1":"clf = GradientBoostingClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","bfcdcb17":"clf = ExtraTreesClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","e8d2ab0c":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\npredictions = clf.predict(X_test)\nprint(\"accuracy_score\",accuracy_score(y_test, predictions))\nprint(\"auc\",roc_auc_score(y_test, predictions))\nlr = pd.Series([clf.__class__,accuracy_score(y_test, predictions),roc_auc_score(y_test, predictions)],\n              [\"Algorithm\",\"Accuracy\",\"auc score\"])\nalgo=algo.append([lr],ignore_index=True)","b54073f5":"algo.sort_values([\"Accuracy\"], ascending=[False])","49e72f3f":"> ### KNeighborsClassifier","c6d73007":"> <font size=4, color=blue>Feature Importance plot<\/font>","f645e73c":"## Model Building","ab6d65e5":"> <font size=4, color=blue>Accuracy<\/font>","00cc6303":"### One-Hot Encoding ","2e5a0fc8":"### Label encoding ","07ac2b0f":"> ### GradientBoostingClassifier","ac659261":"### Random forest","c123af0c":"## Index ","5d044c97":"### Customer service calls and Churn plot","7d63542e":"### Voice mail plan and Churn plot","aca83db7":"### Checking null values and value_counts","bcad33dd":"## Data Visualization","8ece5425":"### Libraries","136a5ed1":"> <font size=4, color=blue>Accuracy<\/font>","9d027709":"### Churn Plot","8146c8f1":"# Churn in Telecom's dataset ","270e2154":"### Train test split ","620e365b":"> <font size=4, color=blue>get_dummies function<\/font>","5e2f0da7":"###  State and Churn plot","d2b12783":"### Decision tree ","708ee1e4":"### All Classification Algorithm","8180c4e7":"### Area code and Churn plot","08a4f939":"> ### MultinomialNB","85b2601c":"### Feature importance using Random Forest ","e0226fa5":"* [Libraries](#Libraries) \n* [Loading Data](#Loading-Data)\n* [Data Description](#Data-Description)\n* [Checking null values and value_counts](#Checking-null-values-and-value_counts)\n* [Data Visualization](#Data-Visualization)\n\t* [Churn Plot](#Churn-Plot)\n    * [Area code and Churn plot](#Area-code-and-Churn-plot)\n    * [State and Churn plot](#State-and-Churn-plot)\n    * [International plan and Churn](#International-plan-and-Churn)\n    * [Voice mail plan and Churn plot](#Voice-mail-plan-and-Churn-plot)\n    * [Customer service calls and Churn plot](#Customer-service-calls-and-Churn-plot)\n* [Label encoding](#Label-encoding)\n* [Model Building](#Model-Building)\n* [Feature importance using Random Forest](#Feature-importance-using-Random-Forest)\n* [Train test split](#Train-test-split)\n* [Random forest](#Random-forest)\n* [Decision tree](#Decision-tree)\n* [One-Hot Encoding](#One-Hot-Encoding)\n* [Logistic Regression](#Logistic-Regression)\n* [Saving to pkl file](#Saving-to-pkl-file)\n* [Load Pkl files](#Load-Pkl-files)\n* [All Classification Algorithm](#All-Classification-Algorithm)\n    * LogisticRegression\n    * XGBClassifier\n    * MultinomialNB\n    * AdaBoostClassifier\n    * KNeighborsClassifier\n    * GradientBoostingClassifier\n    * ExtraTreesClassifier\n    * DecisionTreeClassifier ","4c47861d":"### Data Description","2dc99ade":"### Load Pkl files","016160b7":"### Loading Data","264d0e86":"> ### LogisticRegression","7ccee544":"### Logistic Regression","2476c9ad":"> ### XGBClassifier","98a6ba32":"> ### ExtraTreesClassifier","d6269d72":"> ### DecisionTreeClassifier","7496e378":"### Saving to pkl file","55f78eac":"### International plan and Churn","872e0bd9":"> ###  AdaBoostClassifier "}}