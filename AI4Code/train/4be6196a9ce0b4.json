{"cell_type":{"f7a38669":"code","50877763":"code","4c2e9722":"code","07e627d6":"code","b83d89ef":"code","0a22daa2":"code","9f7551c1":"code","eb978eb7":"code","dd22426f":"code","47bb28b1":"code","c4ff87a2":"code","ac346345":"code","0c35265e":"code","6c0a92d9":"code","a377a80a":"code","a5825bef":"code","2a701db2":"code","6af055f8":"code","77a007be":"code","f9812e68":"markdown","1735164d":"markdown"},"source":{"f7a38669":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","50877763":"%env WANDB_DISABLED=True\nimport collections\nfrom tqdm.auto import tqdm\nimport numpy as np\nimport pandas as pd\nfrom datasets import Dataset\nfrom transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer, AutoTokenizer, default_data_collator\n\nTORCH_EXTERNAL_CSV = \"..\/input\/external-data-mlqa-preprocessing\/mlqa_hindi.csv\"\n\nBASE_PATH = \"..\/input\/chaii-hindi-and-tamil-question-answering\/\"\nMODEL_NAME = '..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2'\n#MODEL_NAME = '..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-base-squad2'\n\ndf_train_base = pd.read_csv(BASE_PATH + \"train.csv\")\ndf_test = pd.read_csv(BASE_PATH + \"test.csv\")\ndf_sub = pd.read_csv(BASE_PATH + \"sample_submission.csv\")\n\nmax_length = 384 # The maximum length of a feature (question and context)\ndoc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.\nbatch_size = 4\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\npad_on_right = tokenizer.padding_side == \"right\"","4c2e9722":"df_torch = pd.read_csv(TORCH_EXTERNAL_CSV)\ndf_torch = df_torch.reset_index().rename(columns={'index': 'id'})\ndf_torch['id'] = 'id' + df_torch['id'].astype(str)\ndf_train_base = pd.concat([df_train_base, df_torch], axis=0)","07e627d6":"df_train_base","b83d89ef":"def prepare_train_features(examples):\n\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n    \n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        \n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            \n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n            \n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples\n\ndef prepare_validation_features(examples):\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n    \n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples\n\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        predictions[example[\"id\"]] = best_answer[\"text\"]\n\n    return predictions\n\n\ndef submit(trainer, df_test):\n    test_dataset = Dataset.from_pandas(df_test)\n\n    test_features = test_dataset.map(prepare_validation_features, batched=True, remove_columns=test_dataset.column_names)\n    test_feats_small = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\n\n    test_predictions = trainer.predict(test_feats_small)\n    test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))\n\n    final_test_predictions = postprocess_qa_predictions(test_dataset, test_features, test_predictions.predictions)\n\n    df_sub['PredictionString'] = df_sub['id'].apply(lambda r: final_test_predictions[r])\n    df_sub.to_csv('submission.csv', index=False)\n    display(df_sub.head())\n\ndef jaccard(row): \n    a = set(row['answer'].lower().split()) \n    b = set(row['prediction'].lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))\n\ndef convert_answers(row):\n    return {'answer_start': [row['answer_start']], 'text': [row['answer_text']]}\n","0a22daa2":"df_train_base['answers'] = df_train_base[['answer_start', 'answer_text']].apply(convert_answers, axis=1)\ndf_train_base = df_train_base.sample(frac=1, random_state=2021).copy()\n\ndf_train = df_train_base[:-64].reset_index(drop=True)\ndf_valid = df_train_base[-64:].reset_index(drop=True)\n\ntrain_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)\ntokenized_train_ds = train_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)\ntokenized_valid_ds = valid_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)","9f7551c1":"#import torch\n#from numba import cuda\n#torch.cuda.empty_cache()\n#device = cuda.get_current_device()\n#device.reset()\n#!nvidia-smi","eb978eb7":"def get_trainer():\n    model = AutoModelForQuestionAnswering.from_pretrained(MODEL_NAME)\n    args = TrainingArguments(\n    f\"chaii-qa\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=2e-5,\n    gradient_accumulation_steps=4,\n    warmup_ratio=0.1,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=1,\n    weight_decay=0.01,\n    )\n\n    trainer = Trainer(model, args,\n                      train_dataset=tokenized_train_ds,\n                      eval_dataset=tokenized_valid_ds,\n                      data_collator=default_data_collator,\n                      tokenizer=tokenizer\n    )\n    \n    return trainer\n","dd22426f":"trainer = get_trainer()","47bb28b1":"trainer.train()","c4ff87a2":"validation_features = valid_dataset.map(prepare_validation_features, batched=True,remove_columns=valid_dataset.column_names)","ac346345":"len(validation_features)","0c35265e":"validation_features","6c0a92d9":"valid_feats_small = validation_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nvalid_feats_small","a377a80a":"raw_predictions = trainer.predict(valid_feats_small)","a5825bef":"examples = valid_dataset\nfeatures = validation_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n    \nfinal_predictions = postprocess_qa_predictions(valid_dataset, validation_features, raw_predictions.predictions)\nreferences = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]","2a701db2":"res = pd.DataFrame(references)\nres['prediction'] = res['id'].apply(lambda r: final_predictions[r])\nres['jaccard'] = res[['answer', 'prediction']].apply(jaccard, axis=1)\nres","6af055f8":"res['jaccard'].mean()","77a007be":"submit(trainer, df_test)","f9812e68":"## Test predict and submit\n\nOk, so we got 0.47 average jaccard score on our validation set (the score can differ when I re-run the notebook). Next step is to run it on test and submit :) ","1735164d":"<img src=\"https:\/\/i.imgur.com\/RFR6UZX.jpg\" width=\"100%\"\/>\n\n# 5. XLM-Roberta + Torch's extra data [LB: 0.749]\n### [chaii - Hindi and Tamil Question Answering](https:\/\/www.kaggle.com\/c\/chaii-hindi-and-tamil-question-answering) - A quick overview for QA noobs\n\nHi and welcome! This is the fifth kernel of the series `chaii - Hindi and Tamil Question Answering - A quick overview for QA noobs`.\n\n**In this kernel I am  applying the model of [this kernel](https:\/\/www.kaggle.com\/thedrcat\/chaii-eda-baseline) by [thedrcat](https:\/\/www.kaggle.com\/thedrcat) witht he extra data provided by [torch](https:\/\/www.kaggle.com\/rhtsingh) in [this kernel](https:\/\/www.kaggle.com\/rhtsingh\/external-data-mlqa-preprocessing)**\n\nIt got a third position back in the days, that's why the name has a \"\ud83e\udd47\"...\n\nThis notebook doesn't fit well in the \"noob\" series idea, but it is a good example of how keeping up-to-date with a competition and being around might be a good strategy to get a low-hanging fruit.\n\n---\n\n* The original code is taken from [this awesome notebook](https:\/\/www.kaggle.com\/thedrcat\/chaii-eda-baseline) by [thedrcat](https:\/\/www.kaggle.com\/thedrcat), which is turning into the real base code of the competition for the time being. I reorganized it a little bit to satisfy my own personal style, but there are no major changes.\n\n\n* Here I added torch's hindi CSV: [External Data - mlqa Preprocessing](https:\/\/www.kaggle.com\/rhtsingh\/external-data-mlqa-preprocessing) by [torch](https:\/\/www.kaggle.com\/rhtsingh).\n\n### Please upvote their work if you are cloning this notebook.\n\n### And please upvote this notebook too ;) \n\n\n---\n\nThe full series consist of the following notebooks:\n1. [The competition](https:\/\/www.kaggle.com\/julian3833\/1-the-competition-qa-for-qa-noobs)\n2. [The dataset](https:\/\/www.kaggle.com\/julian3833\/2-the-dataset-qa-for-qa-noobs)\n3. [The metric (Jaccard)](https:\/\/www.kaggle.com\/julian3833\/3-the-metric-jaccard-qa-for-qa-noobs)\n4. [Exploring Public Models](https:\/\/www.kaggle.com\/julian3833\/4-exploring-public-models-qa-for-qa-noobs\/)\n5. [\ud83e\udd47 XLM-Roberta + Torch's extra data [LB: 0.749]](https:\/\/www.kaggle.com\/julian3833\/5-xlm-roberta-torch-s-extra-data-lb-0-749) _(This notebook)_\n6. [\ud83e\udd17 Pre & post processing](https:\/\/www.kaggle.com\/julian3833\/6-pre-post-processing-qa-for-qa-noobs\/)\n\n\n\nThis is an ongoing project, so expect more notebooks to be added to the series soon. Actually, we are currently working on the following ones:\n* Exploring Public Models Revisited\n* Reviewing `squad2`, `mlqa` and others\n* About `xlm-roberta-large-squad2`\n* Own improvements\n\n\n---\n\n"}}