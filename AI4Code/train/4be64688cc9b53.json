{"cell_type":{"93bed3f9":"code","66838584":"code","0e97db5a":"code","cd7cb72b":"code","7bdaa4ba":"code","45ddddc2":"code","9655e359":"code","f3c76a78":"code","df018276":"code","391b0979":"code","4cdcb5cd":"code","10a25951":"markdown","1bb48f31":"markdown","74fd45b8":"markdown","1d7c7e65":"markdown","c49a2c08":"markdown","a96d5b13":"markdown","a8cad726":"markdown","5a729715":"markdown","a911bdb9":"markdown","de079536":"markdown","e75e4d79":"markdown"},"source":{"93bed3f9":"\"\"\"\nCode: This cell holds all the helper functions used by my analysis.\n\"\"\"\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pylab as plt\nimport matplotlib.patches as patches\nimport matplotlib as mpl\n\nimport seaborn as sns\nfrom glob import glob\nimport plotly.express as px\n\nfrom tqdm.notebook import tqdm\n\nfrom scipy.spatial import distance_matrix\n\nimport os\nimport seaborn as sns\n\npd.set_option(\"max_columns\", 500)\n\n\nclass NFLPlay:\n    def __init__(\n        self,\n        gameId,\n        playId,\n        plays_df=None,\n        players_df=None,\n        games_df=None,\n        tracking_df=None,\n        targeted_df=None,\n        compute_play_stats=True,\n    ):\n        \"\"\"\n        A class for organizing NFL play data.\n        \"\"\"\n        self.playId = playId\n        self.gameId = gameId\n\n        self.compute_play_stats = compute_play_stats\n\n        if plays_df is not None:\n            self._get_play_details(playId, gameId, plays_df)\n        if games_df is not None:\n            self._get_game_details(gameId, games_df)\n            self.gethomeaway()\n        if tracking_df is not None:\n            self._get_tracking_data(playId, gameId, tracking_df)\n            self.add_tracking_isoffense()\n        if targeted_df is not None:\n            self.targeted_player = (\n                targeted_df.loc[\n                    (targeted_df[\"gameId\"] == gameId)\n                    & (targeted_df[\"playId\"] == playId)\n                ][\"targetNflId\"]\n                .values[0]\n                .astype(\"int\")\n            )\n            # Add isTargeted to tracking data\n            self.tracking_data[\"isTargeted\"] = (\n                self.tracking_data[\"nflId\"].fillna(0).astype(\"int\")\n                == self.targeted_player\n            )\n\n        self.events = self.tracking_data[\"event\"].unique().tolist()\n\n    def __str__(self):\n        return f\"NFLPlay - gameId: {self.gameId} - playId: {self.playId}\"\n\n    def __repr__(self):\n        return f\"NFLPlay - gameId: {self.gameId} - playId: {self.playId}\"\n\n    def _get_play_details(self, playId, gameId, plays_df):\n        play_details = plays_df.loc[\n            (plays_df[\"playId\"] == playId) & (plays_df[\"gameId\"] == gameId)\n        ]\n        # Only one play should exist\n        assert len(play_details) == 1\n        self.playDetailsDict = play_details.to_dict(orient=\"records\")[0]\n        for k, v in self.playDetailsDict.items():\n            setattr(self, k, v)\n\n    def _get_game_details(self, gameId, games_df):\n        game_details = games_df.loc[games_df[\"gameId\"] == gameId]\n        # Only one play should exist\n        assert len(game_details) == 1\n        self.gameDetailsDict = game_details.to_dict(orient=\"records\")[0]\n        for k, v in self.gameDetailsDict.items():\n            setattr(self, k, v)\n\n    def gethomeaway(self):\n        if self.homeTeamAbbr == self.possessionTeam:\n            self.possessionHomeAway = \"home\"\n        else:\n            self.possessionHomeAway = \"away\"\n\n    def _get_tracking_data(self, playId, gameId, tracking_df):\n        tracking_data = (\n            tracking_df.loc[\n                (tracking_df[\"playId\"] == playId) & (tracking_df[\"gameId\"] == gameId)\n            ]\n            .reset_index(drop=True)\n            .copy()\n        )\n\n        tracking_data = self._format_tracking(tracking_data)\n        if self.compute_play_stats:\n            self._compute_play_stats(tracking_data)\n\n        if \"Football\" in tracking_data[\"displayName\"].unique():\n            tracking_data[\"isFootball\"] = tracking_data[\"displayName\"] == \"Football\"\n\n        self.tracking_data = tracking_data\n\n    def _format_tracking(self, tracking_data):\n        tracking_data[\"time\"] = pd.to_datetime(tracking_data[\"time\"])\n        #         tracking_data['nflId'] = tracking_data['nflId'].astype('int')\n        #         tracking_data['jerseyNumber'] = tracking_data['jerseyNumber'].astype('int')\n        return tracking_data\n\n    def _compute_play_stats(self, tracking_data):\n        self.playLengthSeconds = (\n            tracking_data[\"time\"].max() - tracking_data[\"time\"].min()\n        ).seconds\n\n    def get_events(self):\n        return self.events\n\n    def get_snap_positions(self):\n        self.snap_positions = (\n            self.tracking_data.loc[self.tracking_data[\"event\"] == \"ball_snap\"]\n            .reset_index(drop=True)\n            .copy()\n        )\n\n    def get_event_positions(self, event):\n        positions = (\n            self.tracking_data.loc[self.tracking_data[\"event\"] == event]\n            .reset_index(drop=True)\n            .copy()\n        )\n        return positions\n\n    def get_wr_cusion(self):\n        \"\"\"\n        For each wide receiver at the ball snap, get the closest\n        defender distance.\n        \"\"\"\n        wr_ids = self.tracking_data[\n            (self.tracking_data[\"position\"] == \"WR\")\n            & (self.tracking_data[\"team\"] == self.possessionHomeAway)\n        ][\"nflId\"].unique()\n        if len(wr_ids) == 0:\n            return \"No wide receivers in play\"\n        for wr_id in wr_ids:\n            print(wr_id)\n        return\n\n    def add_time_relative_snap(self):\n        self.tracking_data[\"time\"] = pd.to_datetime(self.tracking_data[\"time\"])\n        self.tracking_data[\"snap_time\"] = self.tracking_data.query(\n            'event == \"ball_snap\"'\n        )[\"time\"].values[0]\n        self.tracking_data[\"snap_time\"] = self.tracking_data[\n            \"snap_time\"\n        ].dt.tz_localize(self.tracking_data[\"time\"].dt.tz)\n\n        return\n\n    def plot_snap(self):\n        self.get_snap_positions()\n        fig, ax = plt.subplots()\n        self.snap_positions.query('team == \"home\"').plot(\n            x=\"y\", y=\"x\", kind=\"scatter\", ax=ax, color=\"red\"\n        )\n        self.snap_positions.query('team == \"away\"').plot(\n            x=\"y\", y=\"x\", kind=\"scatter\", ax=ax, color=\"blue\"\n        )\n        self.snap_positions.query('team == \"football\"').plot(\n            x=\"y\", y=\"x\", kind=\"scatter\", ax=ax, color=\"green\"\n        )\n        ax.set_xlim(0, 55)\n        ax.axhline(self.absoluteYardlineNumber, color=\"blue\")\n        pass\n\n    def _animated_slice(self, df):\n        df[\"time\"] = df[\"time\"].astype(\"str\")\n        fig = px.scatter(\n            df,\n            x=\"x\",\n            y=\"y\",\n            color=\"team\",\n            text=\"position\",\n            animation_frame=\"frameId\",\n            animation_group=\"position\",\n            range_x=[0, 120],\n            range_y=[0, 53.3],\n            hover_data=[\n                \"displayName\",\n                \"jerseyNumber\",\n                \"s\",\n                \"a\",\n                \"dis\",\n                \"o\",\n                \"playDirection\",\n            ],\n            title=self.playDescription,\n        )\n        fig.update_traces(textposition=\"top center\", marker_size=10)\n        fig.update_layout(\n            paper_bgcolor=\"darkgreen\", plot_bgcolor=\"darkgreen\", font_color=\"white\"\n        )\n        return fig\n\n    def animate_play(self):\n        #         time_slice = times[0:500:5]  # Change here\n        df_slice = self.tracking_data\n        fig = self._animated_slice(df_slice)\n        fig.show()\n\n    def _get_play_offense_team(self):\n        \"\"\"\n        Return which team is offense out of \"home\" or \"away\"\n        \"\"\"\n        if (\n            self.gameDetailsDict[\"homeTeamAbbr\"]\n            == self.playDetailsDict[\"possessionTeam\"]\n        ):\n            return \"home\"\n        elif (\n            self.gameDetailsDict[\"visitorTeamAbbr\"]\n            == self.playDetailsDict[\"possessionTeam\"]\n        ):\n            return \"away\"\n\n        print(\"Error finding offensive team!!!\")\n\n    def add_tracking_isoffense(self):\n        \"\"\"\n        Add 'isOffense' column to the tracking data\n        \"\"\"\n        offense_team = self._get_play_offense_team()\n\n        self.tracking_data[\"isOffense\"] = self.tracking_data[\"team\"] == offense_team\n\n    def add_play_routes(self, ax, invert_xy=False):\n        \"\"\"\n        Add Routes to play plot\n        \"\"\"\n        route_nflids = self.tracking_data.dropna(subset=[\"route\"])[\"nflId\"].unique()\n        for i in route_nflids:\n            route_data = self.tracking_data.query(\"nflId == @i\")\n            route_name = route_data[\"route\"].values[0]\n            if invert_xy:\n                route_data.plot(\n                    x=\"y_\", y=\"x_\", ax=ax, label=route_name, lw=4, alpha=0.7\n                )\n            else:\n                route_data.plot(x=\"x\", y=\"y\", ax=ax, label=route_name, lw=4, alpha=0.7)\n        return ax\n\n    def plot_field_snap(\n        self,\n        marker_size=70,\n        off_color=\"tab:orange\",\n        off_marker=\"o\",\n        def_color=\"tab:red\",\n        def_marker=\"X\",\n        ball_color=\"tab:brown\",\n        ball_marker=\"d\",\n        ball_marker_rot=90,\n        targeted_player_color=\"tab:olive\",\n        field_color=\"forestgreen\",\n        fieldline_color=\"white\",\n        fieldline_alpha=0.8,\n        show_los=True,\n        los_color=\"c\",\n        show_firstdown_line=True,\n        first_down_color=\"yellow\",\n        figsize=(12, 6.5),\n        show_routes=False,\n    ):\n        \"\"\"\n        Plot the entire field at the moment of the snap.\n        \"\"\"\n        fig, ax = create_football_field(\n            field_color=field_color,\n            linecolor=fieldline_color,\n            linealpha=fieldline_alpha,\n            figsize=figsize,\n        )\n        self.get_snap_positions()\n        off_tracking = self.snap_positions.query(\"isOffense\")\n        def_tracking = self.snap_positions.query('not isOffense and team != \"football\"')\n        ball_tracking = self.snap_positions.query('team == \"football\"')\n\n        plt.scatter(\n            off_tracking[\"x\"],\n            off_tracking[\"y\"],\n            zorder=10,\n            s=marker_size,\n            color=off_color,\n            marker=off_marker,\n        )\n        plt.scatter(\n            def_tracking[\"x\"],\n            def_tracking[\"y\"],\n            zorder=10,\n            s=marker_size,\n            color=def_color,\n            marker=def_marker,\n        )\n        # Rotate ball diamond\n        ball_marker = mpl.markers.MarkerStyle(ball_marker)\n        ball_marker._transform.rotate_deg(ball_marker_rot)\n        plt.scatter(\n            ball_tracking[\"x\"],\n            ball_tracking[\"y\"],\n            zorder=10,\n            s=marker_size,\n            color=ball_color,\n            marker=ball_marker,\n        )\n\n        if targeted_player_color is not None:\n            targeted_player = self.snap_positions.query(\"isTargeted\")\n            plt.scatter(\n                targeted_player[\"x\"],\n                targeted_player[\"y\"],\n                zorder=11,\n                s=marker_size,\n                color=targeted_player_color,\n                marker=off_marker,\n            )\n\n        if show_los:\n            ax.axvline(\n                self.playDetailsDict[\"absoluteYardlineNumber\"],\n                color=los_color,\n                alpha=0.5,\n            )\n        if show_firstdown_line:\n            play_dir = self.tracking_data[\"playDirection\"].values[0]\n            if play_dir == \"right\":\n                first_down_abs_line = (\n                    self.playDetailsDict[\"absoluteYardlineNumber\"]\n                    + self.playDetailsDict[\"yardsToGo\"]\n                )\n            elif play_dir == \"left\":\n                first_down_abs_line = (\n                    self.playDetailsDict[\"absoluteYardlineNumber\"]\n                    - self.playDetailsDict[\"yardsToGo\"]\n                )\n            else:\n                print(\"Error finding play direction\")\n            ax.axvline(first_down_abs_line, color=first_down_color, alpha=0.5)\n\n        if show_routes:\n            ax = self.add_play_routes(ax)\n        return fig, ax\n\n    def create_normalized_xy(self):\n        if self.tracking_data[\"playDirection\"].values[0] == \"left\":\n            self.tracking_data[\"x_\"] = self.tracking_data[\"x\"] * -1\n            self.tracking_data[\"y_\"] = self.tracking_data[\"y\"]\n        else:\n            self.tracking_data[\"x_\"] = self.tracking_data[\"x\"]\n            self.tracking_data[\"y_\"] = (self.tracking_data[\"y\"] * -1) + 53.3\n\n    def plot_routes(\n        self,\n        ax=None,\n        event=\"ball_snap\",\n        marker_size=70,\n        off_color=\"tab:orange\",\n        off_marker=\"o\",\n        def_color=\"tab:red\",\n        def_marker=\"X\",\n        ball_color=\"tab:brown\",\n        qb_marker=\"p\",\n        ball_marker=\"d\",\n        ball_marker_rot=0,\n        targeted_player_color=\"yellow\",\n    ):\n        self.create_normalized_xy()\n        positions = self.get_event_positions(event)\n\n        if ax is None:\n            fig, ax = plt.subplots()\n            return_fig = True\n        else:\n            return_fig = False\n\n        if qb_marker is not None:\n            off_tracking = positions.query(\"isOffense and position != 'QB'\")\n        else:\n            off_tracking = positions.query(\"isOffense\")\n        def_tracking = positions.query('not isOffense and team != \"football\"')\n        ball_tracking = positions.query('team == \"football\"')\n\n        ax.scatter(\n            off_tracking[\"y_\"],\n            off_tracking[\"x_\"],\n            zorder=10,\n            s=marker_size,\n            color=off_color,\n            marker=off_marker,\n        )\n        ax.scatter(\n            def_tracking[\"y_\"],\n            def_tracking[\"x_\"],\n            zorder=10,\n            s=marker_size,\n            color=def_color,\n            marker=def_marker,\n        )\n        # Rotate ball diamond\n        ball_marker = mpl.markers.MarkerStyle(ball_marker)\n        ball_marker._transform.rotate_deg(ball_marker_rot)\n        ax.scatter(\n            ball_tracking[\"y_\"],\n            ball_tracking[\"x_\"],\n            zorder=10,\n            s=marker_size,\n            color=ball_color,\n            marker=ball_marker,\n        )\n\n        if targeted_player_color is not None:\n            targeted_player = positions.query(\"isTargeted\")\n            ax.scatter(\n                targeted_player[\"y_\"],\n                targeted_player[\"x_\"],\n                zorder=11,\n                s=marker_size,\n                color=targeted_player_color,\n                marker=off_marker,\n            )\n\n        if qb_marker is not None:\n            qb_data = positions.query(\"position == 'QB'\")\n            ax.scatter(\n                qb_data[\"y_\"],\n                qb_data[\"x_\"],\n                zorder=11,\n                s=marker_size,\n                color=off_color,\n                marker=qb_marker,\n            )\n\n        ax = self.add_play_routes(ax, invert_xy=True)\n        #     plt.axis('off')\n        for x in range(-200, 200, 10):\n            ax.axhline(x, color=\"black\", lw=0.5)\n        ax.axvline(0, color=\"black\", lw=0.5)\n        ax.axvline(53.3, color=\"black\", lw=0.5)\n        ax.set_facecolor(\"lightgreen\")\n        if return_fig:\n            return fig, ax\n        return ax\n\n    def get_seconds_to_sack(self):\n        snap_time = self.tracking_data.query('event == \"ball_snap\"')[\"time\"].values[0]\n        sack_time = self.tracking_data.query(\n            'event == \"qb_sack\" or event == \"qb_strip_sack\"'\n        )[\"time\"].values[0]\n        tts = sack_time - snap_time\n        return tts.astype(\"timedelta64[ms]\").astype(\"float\") \/ 1000\n\n    def get_closest_defender(self, nflId, event=\"ball_snap\"):\n        \"\"\"\n        Get the closest defender to the player at a specific event.\n        \"\"\"\n        if nflId == \"targeted\":\n            nflId = self.targeted_player\n        event_data = self.tracking_data.query(\"event == @event\")\n        targeted_dist = distance_matrix(\n            event_data.query(\"nflId == @nflId\")[[\"x\", \"y\"]].values,\n            event_data.query(\"not isOffense\")[[\"x\", \"y\"]].values,\n        )\n        return np.min(targeted_dist)\n\n    def add_event_distances(self, event):\n        \"\"\"\n        Add distances of defensive players from ball and targeted receiver\n        at the time of a given event.\n        \"\"\"\n        targeted_xy_event = self.tracking_data.query(\n            \"event == @event & isTargeted == True\"\n        )[[\"x\", \"y\"]].values\n        ball_xy_event = self.tracking_data.query(\n            'event == @event & displayName == \"Football\"'\n        )[[\"x\", \"y\"]].values\n        defenders_xy_event = self.tracking_data.query(\n            'event == @event & isOffense == False and displayName != \"Football\"'\n        )[[\"x\", \"y\"]].values\n        off_xy_event = self.tracking_data.query(\n            'event == @event & isOffense == False and displayName != \"Football\"'\n        )[[\"x\", \"y\"]].values\n\n        self.tracking_data.loc[\n            (self.tracking_data[\"event\"] == event)\n            & (~self.tracking_data[\"isOffense\"])\n            & (self.tracking_data[\"displayName\"] != \"Football\"),\n            f\"dist_targeted_{event}\",\n        ] = distance_matrix(targeted_xy_event, defenders_xy_event)[0]\n\n        self.tracking_data.loc[\n            (self.tracking_data[\"event\"] == event)\n            & (~self.tracking_data[\"isOffense\"])\n            & (self.tracking_data[\"displayName\"] != \"Football\"),\n            f\"dist_ball_{event}\",\n        ] = distance_matrix(ball_xy_event, defenders_xy_event)[0]\n\n    def add_event_distances_all(self):\n        for e in self.events:\n            self.add_event_distances(e)\n\n    def plot_targeted_coverage(\n        self,\n        ax=None,\n        alpha=1,\n        event=\"ball_snap\",\n        plot_event=None,\n        marker_size=70,\n        off_color=\"tab:orange\",\n        off_marker=\"o\",\n        def_color=\"tab:red\",\n        def_marker=\"X\",\n        ball_color=\"tab:brown\",\n        qb_marker=\"p\",\n        ball_marker=\"d\",\n        ball_marker_rot=0,\n        targeted_player_color=\"yellow\",\n        lines_color=\"white\",\n        grass_color=\"lightgreen\",\n        include_qb=True,\n        show_ticks=False,\n    ):\n\n        self.add_event_distances_all()\n\n        if \"pass_forward\" not in self.events:\n            print(f\"No pass on this play, events: {self.events}\")\n            return\n\n        closing_defender = (\n            self.tracking_data.dropna(subset=[\"dist_ball_pass_arrived\"])\n            .sort_values(\"dist_ball_pass_arrived\")\n            .head(1)[\"nflId\"]\n            .values[0]\n        )\n        self.tracking_data[\"isClosingDefender\"] = (\n            self.tracking_data[\"nflId\"] == closing_defender\n        )\n\n        positions = self.get_event_positions(event)\n        positions = positions.query(\n            \"isFootball or isClosingDefender or isTargeted\"\n        ).copy()\n        if self.tracking_data[\"playDirection\"].values[0] == \"left\":\n            self.tracking_data[\"x_\"] = self.tracking_data[\"x\"] * -1\n            self.tracking_data[\"y_\"] = self.tracking_data[\"y\"]\n            positions[\"x_\"] = positions[\"x\"] * -1\n            positions[\"y_\"] = positions[\"y\"]\n        else:\n            self.tracking_data[\"x_\"] = self.tracking_data[\"x\"]\n            self.tracking_data[\"y_\"] = (self.tracking_data[\"y\"] * -1) + 53.3\n            positions[\"x_\"] = positions[\"x\"]\n            positions[\"y_\"] = (positions[\"y\"] * -1) + 53.3\n\n        if ax is None:\n            fig, ax = plt.subplots()\n            return_fig = True\n        else:\n            return_fig = False\n\n        if qb_marker is not None:\n            off_tracking = positions.query(\"isOffense and position != 'QB'\")\n        else:\n            off_tracking = positions.query(\"isOffense\")\n        def_tracking = positions.query('not isOffense and team != \"football\"')\n        ball_tracking = positions.query('team == \"football\"')\n\n        ball_snap_frame = self.tracking_data.query('event == \"ball_snap\"')[\n            \"frameId\"\n        ].values[0]\n        pass_forward_frame = self.tracking_data.query('event == \"pass_forward\"')[\n            \"frameId\"\n        ].values[0]\n        pass_arrived_frame = self.tracking_data.query('event == \"pass_arrived\"')[\n            \"frameId\"\n        ].values[0]\n        ballinair_tracking = self.tracking_data.query(\n            \"frameId >= @pass_forward_frame and frameId <= @pass_arrived_frame\"\n        ).copy()\n        snap_arrived_tracking = self.tracking_data.query(\n            \"frameId >= @ball_snap_frame and frameId <= @pass_arrived_frame\"\n        ).copy()\n\n        if plot_event is not None:\n            snap_arrived_tracking = snap_arrived_tracking.query(\"event == @plot_event\")\n            ballinair_tracking = ballinair_tracking.query(\"event == @plot_event\")\n            snap_arrived_tracking.query(\"isClosingDefender\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"scatter\",\n                lw=5,\n                ax=ax,\n                color=\"red\",\n                label=\"Closing Defender\",\n            )\n            snap_arrived_tracking.query(\"isTargeted\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"scatter\",\n                lw=5,\n                ax=ax,\n                color=\"orange\",\n                label=\"Targeted Receiver\",\n            )\n            ballinair_tracking.query(\"isFootball\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"scatter\",\n                lw=2,\n                ax=ax,\n                color=\"grey\",\n                label=\"Football\",\n            )\n\n        else:\n            snap_arrived_tracking.query(\"isClosingDefender\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"line\",\n                lw=3,\n                alpha=alpha,\n                ax=ax,\n                color=\"red\",\n                label=\"Closing Defender\",\n            )\n            snap_arrived_tracking.query(\"isTargeted\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"line\",\n                lw=3,\n                alpha=alpha,\n                ax=ax,\n                color=\"orange\",\n                label=\"Targeted Receiver\",\n            )\n            ballinair_tracking.query(\"isFootball\").plot(\n                x=\"y_\",\n                y=\"x_\",\n                style=\"--\",\n                lw=2,\n                alpha=alpha,\n                ax=ax,\n                color=\"grey\",\n                label=\"Football\",\n            )\n        if include_qb:\n            ballinair_tracking.query(\n                'position == \"QB\" and event == \"pass_forward\"'\n            ).plot(\n                x=\"y_\",\n                y=\"x_\",\n                kind=\"scatter\",\n                alpha=alpha,\n                lw=3,\n                ax=ax,\n                color=\"blue\",\n                label=\"Quarterback\",\n            )\n\n        for x in range(\n            -200,\n            200,\n            10,\n        ):\n            ax.plot([0, 53.3],[x,x], color=lines_color, lw=0.5)\n        ax.axvline(0, color=lines_color, lw=0.5)\n        ax.axvline(53.3, color=lines_color, lw=0.5)\n        ax.set_facecolor(grass_color)\n        if return_fig:\n            return fig, ax\n        \n        if show_ticks:\n            hash_range = range(-200, 200)\n            for x in hash_range:\n                ax.plot([0.4, 0.7], [x, x], color=\"white\", alpha=0.5)\n                ax.plot([53.0, 52.5], [x, x], color=\"white\", alpha=0.5)\n                ax.plot([22.91, 23.57], [x, x], color=\"white\", alpha=0.5)\n                ax.plot([29.73, 30.39], [x, x], color=\"white\", alpha=0.5)     \n        return ax\n\n    def get_closing_track(self):\n        self.create_normalized_xy()\n        self.add_event_distances_all()\n        self.add_dist_ball_destination()\n        if \"pass_forward\" not in self.events:\n            print(f\"No pass on this play, events: {self.events}\")\n            return\n\n        closing_defender = (\n            self.tracking_data.dropna(subset=[\"dist_ball_pass_arrived\"])\n            .sort_values(\"dist_ball_pass_arrived\")\n            .head(1)[\"nflId\"]\n            .values[0]\n        )\n        self.tracking_data[\"isClosingDefender\"] = (\n            self.tracking_data[\"nflId\"] == closing_defender\n        )\n        self.tracking_data[\"isFootball\"] = (\n            self.tracking_data[\"displayName\"] == \"Football\"\n        )\n\n        ball_snap_frame = self.tracking_data.query('event == \"ball_snap\"')[\n            \"frameId\"\n        ].values[0]\n        pass_forward_frame = self.tracking_data.query('event == \"pass_forward\"')[\n            \"frameId\"\n        ].values[0]\n        pass_arrived_frame = self.tracking_data.query('event == \"pass_arrived\"')[\n            \"frameId\"\n        ].values[0]\n        ballinair_tracking = self.tracking_data.query(\n            \"frameId >= @pass_forward_frame and frameId <= @pass_arrived_frame\"\n        ).copy()\n        snap_arrived_tracking = self.tracking_data.query(\n            \"frameId >= @ball_snap_frame and frameId <= @pass_arrived_frame\"\n        ).copy()\n        df1 = snap_arrived_tracking.query(\"isClosingDefender\")\n        df2 = snap_arrived_tracking.query(\"isTargeted\")\n        df3 = ballinair_tracking.query(\"isFootball\")\n        df4 = ballinair_tracking.query('position == \"QB\"')\n        return pd.concat([df1, df2, df3, df4])\n\n    def get_ball_dist_downfield(self, return_dist=False):\n        \"\"\"\n        Calculate the distance downfield\n        \"\"\"\n        #         try:\n        self.pass_dist_downfield = np.abs(\n            self.tracking_data.query(\n                'event == \"pass_forward\" and displayName == \"Football\"'\n            )[\"x\"].values[0]\n            - self.tracking_data.query(\n                'event == \"pass_arrived\" and displayName == \"Football\"'\n            )[\"x\"].values[0]\n        )\n        #         except Exception as e:\n        #             print(e)\n        #             self.pass_dist_downfield = np.nan\n        if return_dist:\n            return self.pass_dist_downfield\n\n    def add_dist_ball_destination(self):\n        self.tracking_data[\"pass_destination_x\"] = self.tracking_data.query(\n            'isFootball and event == \"pass_arrived\"'\n        )[\"x\"].values[0]\n        self.tracking_data[\"pass_destination_y\"] = self.tracking_data.query(\n            'isFootball and event == \"pass_arrived\"'\n        )[\"y\"].values[0]\n\n        for event in self.events:\n            self.tracking_data.loc[\n                self.tracking_data[\"event\"] == event, \"dist_pass_destination\"\n            ] = distance_matrix(\n                self.tracking_data.query(\"event == @event\")[[\"x\", \"y\"]].values,\n                self.tracking_data.query('isFootball and event == \"pass_arrived\"')[\n                    [\"x\", \"y\"]\n                ].values,\n            )\n\n\ndef get_tracking_data_deep_coverage_plays(plays_df, tracking_df, targeted_df, games_df):\n    deep_plays = plays_df.query(\"isDeepPass\").reset_index(drop=True)\n    dfs = []\n    for i, play in tqdm(deep_plays.iterrows(), total=len(deep_plays)):\n        try:\n            mygameId = play[\"gameId\"]\n            myplayId = play[\"playId\"]\n\n            myplay = NFLPlay(\n                gameId=mygameId,\n                playId=myplayId,\n                plays_df=plays_df,\n                games_df=games_df,\n                tracking_df=tracking_df,\n                targeted_df=targeted_df,\n                compute_play_stats=True,\n            )\n            df = myplay.get_closing_track()\n            dfs.append(df)\n        except (IndexError, ValueError) as e:\n            # Some expected tracking data does not exist\n            pass\n    deep_coverage = pd.concat(dfs)\n    return deep_coverage\n\n\ndef normalize_xy_deepcoverage_relativeqb(deep_coverage):\n    deep_coverage[\"game_play\"] = (\n        deep_coverage[\"gameId\"].astype(\"str\")\n        + \"_\"\n        + deep_coverage[\"playId\"].astype(\"str\")\n    )\n    x_ref_dict = (\n        deep_coverage.sort_values(\"frameId\", ascending=True)\n        .query('position == \"QB\"')\n        .groupby(\"game_play\")[\"x\"]\n        .first()\n        .to_dict()\n    )\n\n    y_ref_dict = (\n        deep_coverage.sort_values(\"frameId\", ascending=True)\n        .query('position == \"QB\"')\n        .groupby(\"game_play\")[\"y\"]\n        .first()\n        .to_dict()\n    )\n\n    x__ref_dict = (\n        deep_coverage.sort_values(\"frameId\", ascending=True)\n        .query('position == \"QB\"')\n        .groupby(\"game_play\")[\"x_\"]\n        .first()\n        .to_dict()\n    )\n\n    y__ref_dict = (\n        deep_coverage.sort_values(\"frameId\", ascending=True)\n        .query('position == \"QB\"')\n        .groupby(\"game_play\")[\"y_\"]\n        .first()\n        .to_dict()\n    )\n\n    deep_coverage[\"x__anchor\"] = deep_coverage[\"game_play\"].map(x__ref_dict)\n    deep_coverage[\"y__anchor\"] = deep_coverage[\"game_play\"].map(y__ref_dict)\n\n    deep_coverage[\"x_norm\"] = deep_coverage[\"x_\"] - deep_coverage[\"x__anchor\"]\n    deep_coverage[\"y_norm\"] = deep_coverage[\"y_\"] - deep_coverage[\"y__anchor\"]\n    return deep_coverage\n\n\ndef prep_plays_df(plays_df):\n    plays_df[\"game_play\"] = (\n        plays_df[\"gameId\"].astype(\"str\") + \"_\" + plays_df[\"playId\"].astype(\"str\")\n    )\n\n    plays_df[\"isDeepPass\"] = (\n        plays_df[\"playDescription\"].str.lower().str.contains(\"deep\")\n    )\n    # Offensive Personnel Counts\n    plays_df[\"Ocount_RB\"] = (\n        plays_df[\"personnelO\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:RB))|(?:(?:RB)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n    plays_df[\"Ocount_WR\"] = (\n        plays_df[\"personnelO\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:WR))|(?:(?:WR)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n    plays_df[\"Ocount_TE\"] = (\n        plays_df[\"personnelO\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:TE))|(?:(?:TE)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n    plays_df[\"Ocount_OL\"] = (\n        plays_df[\"personnelO\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:OL))|(?:(?:OL)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n\n    # Defensive Personnel Counts\n    plays_df[\"Dcount_DL\"] = (\n        plays_df[\"personnelD\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:DL))|(?:(?:DL)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n    plays_df[\"Dcount_LB\"] = (\n        plays_df[\"personnelD\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:LB))|(?:(?:LB)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n    plays_df[\"Dcount_DB\"] = (\n        plays_df[\"personnelD\"]\n        .str.extract(\n            r\"(?:([1-9]?[0-9])[a-zA-Z ]{0,20}(?:DB))|(?:(?:DB)[a-zA-Z ]{0,20}([1-9]?[0-9]))\"\n        )[0]\n        .fillna(0)\n        .astype(\"int\")\n    )\n\n    plays_df[\"ScoreDifferential\"] = plays_df.apply(\n        lambda x: np.abs(x[\"preSnapVisitorScore\"] - x[\"preSnapHomeScore\"]), axis=1\n    )\n\n    return plays_df\n\n\n# ----- Modeling Code ------------- #\n\nimport lightgbm as lgb\nimport shap\n\n\ndef model_deep_pass_probability(plays_df):\n\n    FEATURES = [  #'quarter','down','yardsToGo','absoluteYardlineNumber',\n        \"defendersInTheBox\",\n        \"numberOfPassRushers\",\n        \"Ocount_RB\",\n        \"Ocount_WR\",\n        \"Ocount_TE\",\n        \"Ocount_OL\",\n        \"Dcount_DL\",\n        \"Dcount_LB\",\n        \"Dcount_DB\",\n        #'epa','ScoreDifferential'\n    ]\n\n    X = plays_df[FEATURES].fillna(0)\n    y = plays_df[\"isDeepPass\"].astype(\"int\")\n\n    train_ds = lgb.Dataset(data=X, label=y)\n    param = {}\n    param[\"max_bin\"] = 10\n    param[\"learning_rate\"] = 0.01\n    param[\"boosting_type\"] = \"gbdt\"\n    param[\"objective\"] = \"binary\"\n    param[\"metric\"] = \"auc\"\n    param[\"sub_feature\"] = 0.50\n    param[\"bagging_fraction\"] = 0.85\n    param[\"bagging_freq\"] = 40\n    param[\"num_leaves\"] = 512\n    param[\"min_data\"] = 50\n    param[\"min_hessian\"] = 0.05\n    param[\"verbose\"] = 0\n\n    result = lgb.cv(param, train_ds, early_stopping_rounds=50, nfold=5)\n\n    best_boosting_rounds = len(result[\"auc-mean\"])\n\n    bst = lgb.train(param, train_ds, num_boost_round=best_boosting_rounds)\n\n    feature_importance_df = pd.DataFrame(\n        index=FEATURES, data=bst.feature_importance(), columns=[\"importance\"]\n    )\n\n    explainer = shap.TreeExplainer(bst)\n    shap_values = explainer.shap_values(X)\n\n    return X, explainer, shap_values\n\n\ndef plot_play_defender(\n    ax,\n    gameId,\n    playId,\n    plays_df,\n    games_df,\n    tracking_df,\n    targeted_df,\n    show_ddrt=False,\n    show_ddra=False,\n    show_dddt=False,\n    show_ddda=False,\n    show_tddt=False,\n    show_tdda=False,\n    yaxis_pad=(-10, 45),\n    ddrt_pad=(0, 0),\n    ddra_pad=(0, 0),\n    dddt_pad=(0, 0),\n    ddda_pad=(0, 0),\n    tddt_pad=(0, 0),\n    tdda_pad=(0, 0),\n    add_description=False,\n    description_cutoff=99999,\n    markersize=50,\n    title=None,\n    title_fs=15,\n    marker_alpha=0.5,\n    show_ticks=True,\n):\n    myplay = NFLPlay(\n        gameId=gameId,\n        playId=playId,\n        plays_df=plays_df,\n        games_df=games_df,\n        tracking_df=tracking_df,\n        targeted_df=targeted_df,\n        compute_play_stats=True,\n    )\n\n    ax = myplay.plot_targeted_coverage(\n        ax=ax, plot_event=\"pass_forward\", include_qb=True\n    )\n\n    ax = myplay.plot_targeted_coverage(\n        ax=ax, plot_event=\"pass_arrived\", include_qb=False\n    )\n\n    ax = myplay.plot_targeted_coverage(ax=ax, alpha=0.3, include_qb=False)\n\n    myplay.tracking_data.query('event == \"ball_snap\" and isOffense').plot(\n        x=\"y_\",\n        y=\"x_\",\n        kind=\"scatter\",\n        ax=ax,\n        alpha=marker_alpha,\n        marker=\"o\",\n        s=markersize,\n        color=\"grey\",\n    )\n    myplay.tracking_data.query('event == \"ball_snap\" and not isOffense').plot(\n        x=\"y_\",\n        y=\"x_\",\n        kind=\"scatter\",\n        ax=ax,\n        alpha=marker_alpha,\n        marker=\"x\",\n        s=markersize,\n        color=\"grey\",\n    )\n\n    ax.set_facecolor(\"lightgreen\")\n    ax = format_ax(ax)\n    ax.set_title(title, fontsize=title_fs)\n    ax.legend([])\n    # ax.set_ylim(ax.get_ylim()[0] + 5, ax.get_ylim()[0]+70)\n\n    if np.isnan(myplay.absoluteYardlineNumber):\n        ax.set_ylim(\n            yaxis_pad[0],\n            yaxis_pad[1],\n        )\n    elif myplay.tracking_data[\"x_\"].mean() < 0:\n        ax.set_ylim(\n            -myplay.absoluteYardlineNumber + yaxis_pad[0],\n            -myplay.absoluteYardlineNumber + yaxis_pad[1],\n        )\n    else:\n        ax.set_ylim(\n            myplay.absoluteYardlineNumber + yaxis_pad[0],\n            myplay.absoluteYardlineNumber + yaxis_pad[1],\n        )\n\n    myplay.add_dist_ball_destination()\n\n    cda = (\n        myplay.get_closing_track()\n        .query('isClosingDefender and event == \"pass_arrived\"')[[\"y_\", \"x_\"]]\n        .values[0]\n    )\n    cdt = (\n        myplay.get_closing_track()\n        .query('isClosingDefender and event == \"pass_forward\"')[[\"y_\", \"x_\"]]\n        .values[0]\n    )\n    tpa = (\n        myplay.get_closing_track()\n        .query('isTargeted and event == \"pass_arrived\"')[[\"y_\", \"x_\"]]\n        .values[0]\n    )\n    tpt = (\n        myplay.get_closing_track()\n        .query('isTargeted and event == \"pass_forward\"')[[\"y_\", \"x_\"]]\n        .values[0]\n    )\n    fbdest = (\n        myplay.get_closing_track()\n        .query('isFootball and event == \"pass_arrived\"')[[\"y_\", \"x_\"]]\n        .values[0]\n    )\n\n    if show_dddt:\n        # Draw DDD_throw\n        dddt = myplay.tracking_data.query(\n            'event == \"pass_forward\" and isClosingDefender'\n        )[\"dist_pass_destination\"].values[0]\n        ax.annotate(\n            f\"DDD_t = {dddt:0.2f} yards\",\n            (fbdest[0], fbdest[1]),\n            xytext=(fbdest[0] + dddt_pad[0], fbdest[1] + dddt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"DDD_t = {dddt:0.2f} yards\",\n            (cdt[0], cdt[1]),\n            xytext=(fbdest[0] + dddt_pad[0], fbdest[1] + dddt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if show_ddda:\n        # Draw Distance to Destination when ball arrived\n        ddda = myplay.tracking_data.query(\n            'event == \"pass_arrived\" and isClosingDefender'\n        )[\"dist_pass_destination\"].values[0]\n        ax.annotate(\n            f\"DDD_a = {ddda:0.2f} yards\",\n            (fbdest[0], fbdest[1]),\n            xytext=(fbdest[0] + ddda_pad[0], fbdest[1] + ddda_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"DDD_a = {ddda:0.2f} yards\",\n            (cda[0], cda[1]),\n            xytext=(fbdest[0] + ddda_pad[0], fbdest[1] + ddda_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if show_ddra:\n        # Distance to Destination Arrived\n        ddra = myplay.tracking_data.query(\n            'event == \"pass_arrived\" and isClosingDefender'\n        )[\"dist_targeted_pass_arrived\"].values[0]\n        ax.annotate(\n            f\"DR_a = {ddra:0.2f} yards\",\n            (cda[0], cda[1]),\n            xytext=(cda[0] + ddra_pad[0], cda[1] + ddra_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"DR_a = {ddra:0.2f} yards\",\n            (tpa[0], tpa[1]),\n            xytext=(cda[0] + ddra_pad[0], cda[1] + ddra_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if show_ddrt:\n        # Distance to Receiver at time of Throw\n        ddrt = myplay.tracking_data.query(\n            'event == \"pass_forward\" and isClosingDefender'\n        )[\"dist_targeted_pass_forward\"].values[0]\n        ax.annotate(\n            f\"DR_t = {ddrt:0.2f} yards\",\n            (cdt[0], cdt[1]),\n            xytext=(cdt[0] + ddrt_pad[0], cdt[1] + ddrt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"DR_t = {ddrt:0.2f} yards\",\n            (tpt[0], tpt[1]),\n            xytext=(cdt[0] + ddrt_pad[0], cdt[1] + ddrt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if show_tddt:\n        # Targeted Distance to Destination at Thow\n        tddt = myplay.tracking_data.query('event == \"pass_forward\" and isTargeted')[\n            \"dist_pass_destination\"\n        ].values[0]\n        ax.annotate(\n            f\"TDD_t = {tddt:0.2f} yards\",\n            (fbdest[0], fbdest[1]),\n            xytext=(cdt[0] + tddt_pad[0], cdt[1] + tddt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"TDD_t = {tddt:0.2f} yards\",\n            (tpt[0], tpt[1]),\n            xytext=(cdt[0] + tddt_pad[0], cdt[1] + tddt_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if show_tdda:\n        # Targeted Distance to Destination at Arrival\n        tdda = myplay.tracking_data.query('event == \"pass_arrived\" and isTargeted')[\n            \"dist_pass_destination\"\n        ].values[0]\n        ax.annotate(\n            f\"TDD_a = {tdda:0.2f} yards\",\n            (fbdest[0], fbdest[1]),\n            xytext=(tpa[0] + tdda_pad[0], tpa[1] + tdda_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n        ax.annotate(\n            f\"TDD_a = {tdda:0.2f} yards\",\n            (tpa[0], tpa[1]),\n            xytext=(tpa[0] + tdda_pad[0], tpa[1] + tdda_pad[1]),\n            fontsize=12,\n            arrowprops=dict(arrowstyle=\"-|>\", connectionstyle=\"arc3,rad=0.2\", fc=\"b\"),\n        )\n\n    if add_description:\n        plt.figtext(\n            0.5,\n            0.07,\n            myplay.playDescription[:description_cutoff],\n            ha=\"center\",\n            fontsize=8,\n            bbox={\"facecolor\": \"grey\", \"alpha\": 0.5, \"pad\": 5},\n        )\n\n    if show_ticks:\n        hash_range = range(-200, 200)\n        for x in hash_range:\n            ax.plot([0.4, 0.7], [x, x], color='white', alpha=0.5)\n            ax.plot([53.0, 52.5], [x, x],  color='white', alpha=0.5)\n            ax.plot([22.91, 23.57], [x, x],  color='white', alpha=0.5)\n            ax.plot([29.73, 30.39], [x, x], color='white', alpha=0.5)\n\n    return ax\n\n\ndef format_ax(ax):\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    ax.tick_params(\n        axis=\"x\",  # changes apply to the x-axis\n        which=\"both\",  # both major and minor ticks are affected\n        bottom=False,  # ticks along the bottom edge are off\n        top=False,  # ticks along the top edge are off\n        labelbottom=False,\n    )  # labels along the bottom edge are off\n    ax.tick_params(\n        axis=\"y\",  # changes apply to the x-axis\n        which=\"both\",\n        left=False,  # both major and minor ticks are affected\n        bottom=False,  # ticks along the bottom edge are off\n        top=False,  # ticks along the top edge are off\n        labelleft=False,\n    )  # labels along the bottom edge are off\n    return ax\n\n\ndef calc_coverage_stats(deep_coverage, plays_df, players_df):\n    play_coverage_stats = (\n        deep_coverage[[\"gameId\", \"playId\"]].drop_duplicates().reset_index(drop=True)\n    )\n\n    # groupby\/fist is to deal with plays that have multiple pass forwards\n    df_temp = (\n        deep_coverage.query('event == \"pass_forward\"')[[\"gameId\", \"playId\", \"time\"]]\n        .drop_duplicates()\n        .sort_values(\"time\")\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(columns={\"time\": \"time_at_pass_forward\"})\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    df_temp = (\n        deep_coverage.query('event == \"pass_arrived\"')[[\"gameId\", \"playId\", \"time\"]]\n        .drop_duplicates()\n        .rename(columns={\"time\": \"time_at_pass_arrived\"})\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    play_coverage_stats[\"seconds_ball_in_air\"] = (\n        play_coverage_stats[\"time_at_pass_arrived\"]\n        - play_coverage_stats[\"time_at_pass_forward\"]\n    ).dt.total_seconds()\n\n    df_temp = (\n        deep_coverage.query('event == \"pass_forward\" and isClosingDefender')[\n            [\"gameId\", \"playId\", \"dist_pass_destination\"]\n        ]\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(\n            columns={\n                \"dist_pass_destination\": \"ClosingDefender_dist_PassDestination_at_PassForward\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    df_temp = (\n        deep_coverage.query('event == \"pass_forward\" and isTargeted')[\n            [\"gameId\", \"playId\", \"dist_pass_destination\"]\n        ]\n        .drop_duplicates()\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(\n            columns={\n                \"dist_pass_destination\": \"Targeted_dist_PassDestination_at_PassForward\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n\n    df_temp = (\n        deep_coverage.query('event == \"pass_arrived\" and isClosingDefender')[\n            [\"gameId\", \"playId\", \"dist_pass_destination\"]\n        ]\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(\n            columns={\n                \"dist_pass_destination\": \"ClosingDefender_dist_PassDestination_at_PassArrived\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    df_temp = (\n        deep_coverage.query('event == \"pass_arrived\" and isTargeted')[\n            [\"gameId\", \"playId\", \"dist_pass_destination\"]\n        ]\n        .drop_duplicates()\n        .rename(\n            columns={\n                \"dist_pass_destination\": \"Targeted_dist_PassDestination_at_PassArrived\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n\n    df_temp = (\n        deep_coverage.query('event == \"pass_forward\" and isClosingDefender')[\n            [\"gameId\", \"playId\", \"dist_targeted_pass_forward\"]\n        ]\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(\n            columns={\n                \"dist_targeted_pass_forward\": \"ClosingDefender_dist_Targeted_at_PassForward\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    df_temp = (\n        deep_coverage.query('event == \"pass_arrived\" and isClosingDefender')[\n            [\"gameId\", \"playId\", \"dist_targeted_pass_arrived\"]\n        ]\n        .groupby([\"gameId\", \"playId\"])\n        .first()\n        .reset_index()\n        .rename(\n            columns={\n                \"dist_targeted_pass_arrived\": \"ClosingDefender_dist_Targeted_at_PassArrived\"\n            }\n        )\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        plays_df[\n            [\n                \"gameId\",\n                \"playId\",\n                \"playResult\",\n                \"passResult\",\n                \"isDefensivePI\",\n                \"playDescription\",\n            ]\n        ],\n        how=\"left\",\n        on=[\"gameId\", \"playId\"],\n        validate=\"1:1\",\n    )\n    play_coverage_stats[\"seconds_ball_in_air\"] = play_coverage_stats[\n        \"seconds_ball_in_air\"\n    ].clip(0.01, np.inf)\n\n    # NFL IDs\n\n    df_temp = (\n        deep_coverage.query(\"isClosingDefender\")[[\"gameId\", \"playId\", \"nflId\"]]\n        .drop_duplicates()\n        .rename(columns={\"nflId\": \"ClosingDefender_nflId\"})\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n\n    df_temp = (\n        deep_coverage.query(\"isTargeted\")[[\"gameId\", \"playId\", \"nflId\"]]\n        .drop_duplicates()\n        .rename(columns={\"nflId\": \"Targeted_nflId\"})\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n\n    df_temp = (\n        deep_coverage.query(\"isTargeted\")[[\"gameId\", \"playId\", \"route\"]]\n        .drop_duplicates()\n        .rename(columns={\"route\": \"route\"})\n    )\n    play_coverage_stats = play_coverage_stats.merge(\n        df_temp, on=[\"gameId\", \"playId\"], how=\"left\", validate=\"1:1\"\n    )\n\n    \n    play_coverage_stats = play_coverage_stats.merge(\n        players_df[[\"nflId\", \"position\", \"displayName\"]].rename(\n            columns={\n                \"position\": \"ClosingDefender_position\",\n                \"displayName\": \"ClosingDefenderName\",\n                \"nflId\": \"ClosingDefender_nflId\",\n            }\n        ),\n        on=[\"ClosingDefender_nflId\"],\n    )\n\n    play_coverage_stats = play_coverage_stats.merge(\n        players_df[[\"nflId\", \"position\", \"displayName\"]].rename(\n            columns={\n                \"position\": \"Targeted_position\",\n                \"displayName\": \"TargetedName\",\n                \"nflId\": \"Targeted_nflId\",\n            }\n        ),\n        on=[\"Targeted_nflId\"],\n    )\n\n    # Custom Metrics\n    play_coverage_stats[\"closing_score\"] = (\n        (\n            play_coverage_stats[\"ClosingDefender_dist_PassDestination_at_PassForward\"]\n            - play_coverage_stats[\"ClosingDefender_dist_PassDestination_at_PassArrived\"]\n        )\n        \/ play_coverage_stats[\"seconds_ball_in_air\"]\n    ) * 10\n\n    play_coverage_stats.loc[\n        play_coverage_stats[\"closing_score\"] < 40, \"ClosingScoreGroup\"\n    ] = \"Poor\"\n    play_coverage_stats.loc[\n        (play_coverage_stats[\"closing_score\"] >= 40)\n        & (play_coverage_stats[\"closing_score\"] < 60),\n        \"ClosingScoreGroup\",\n    ] = \"Fair\"\n    play_coverage_stats.loc[\n        (play_coverage_stats[\"closing_score\"] >= 60)\n        & (play_coverage_stats[\"closing_score\"] < 80),\n        \"ClosingScoreGroup\",\n    ] = \"Good\"\n    play_coverage_stats.loc[\n        (play_coverage_stats[\"closing_score\"] >= 80)\n        & (play_coverage_stats[\"closing_score\"] < 120),\n        \"ClosingScoreGroup\",\n    ] = \"Excellent\"\n\n    play_coverage_stats[\"blanket_score\"] = (\n        play_coverage_stats[\"ClosingDefender_dist_PassDestination_at_PassArrived\"]\n        * play_coverage_stats[\"seconds_ball_in_air\"]\n    ) \/ play_coverage_stats[\n        [\n            \"ClosingDefender_dist_Targeted_at_PassForward\",\n            \"ClosingDefender_dist_Targeted_at_PassArrived\",\n        ]\n    ].mean(\n        axis=1\n    )  #  \/ (play_coverage_stats['ClosingDefender_dist_PassDestination_at_PassArrived'] - play_coverage_stats['Targeted_dist_PassDestination_at_PassArrived'])) #.clip(-20, 20) # - play_coverage_stats['ClosingDefender_dist_Targeted_at_PassArrived'] - play_coverage_stats['Targeted_dist_PassDestination_at_PassArrived'] + 100) * 0.8\n\n    play_coverage_stats[\"ThrowRatio\"] = (\n        play_coverage_stats[\"ClosingDefender_dist_PassDestination_at_PassForward\"]\n        \/ play_coverage_stats[\"Targeted_dist_PassDestination_at_PassForward\"]\n    )\n    play_coverage_stats[\"ArrivalRatio\"] = (\n        play_coverage_stats[\"ClosingDefender_dist_PassDestination_at_PassArrived\"]\n        \/ play_coverage_stats[\"Targeted_dist_PassDestination_at_PassArrived\"]\n    )\n    play_coverage_stats[\"ClosingRatio\"] = (\n        play_coverage_stats[\"ArrivalRatio\"] \/ play_coverage_stats[\"ThrowRatio\"]\n    )\n    play_coverage_stats[\"ClosingRatioBin\"] = pd.qcut(\n        play_coverage_stats[\"ClosingRatio\"],\n        4,\n        labels=[\"Low\", \"Mid-Low\", \"Mid-High\", \"High\"],\n    )\n    play_coverage_stats[\"logClosingRatio\"] = np.log(play_coverage_stats[\"ClosingRatio\"])\n    play_coverage_stats[\"normClosingRatio\"] = (\n        (1 \/ (play_coverage_stats[\"logClosingRatio\"] + 9)) * 700\n    ).clip(0, 100)\n\n    play_coverage_stats[\"normClosingRatioBin\"] = pd.qcut(\n        play_coverage_stats[\"normClosingRatio\"],\n        4,\n        labels=[\"Low\", \"Mid-Low\", \"Mid-High\", \"High\"],\n    )\n    \n    \n\n    return play_coverage_stats\n\ndef add_play_targeted_closing(deep_coverage):\n    targeted_ids = (\n        deep_coverage.query(\"isTargeted\")[[\"game_play\", \"nflId\"]]\n        .drop_duplicates()\n        .set_index(\"game_play\")\n        .to_dict()[\"nflId\"]\n    )\n    closing_ids = (\n        deep_coverage.query(\"isClosingDefender\")[[\"game_play\", \"nflId\"]]\n        .drop_duplicates()\n        .set_index(\"game_play\")\n        .to_dict()[\"nflId\"]\n    )\n    deep_coverage[\"targeted_nflId\"] = (\n        deep_coverage[\"game_play\"].map(targeted_ids).astype(\"int\")\n    )\n    deep_coverage[\"closing_nflId\"] = (\n        deep_coverage[\"game_play\"].map(closing_ids).astype(\"int\")\n    )\n    return deep_coverage\n\nif __name__ == \"__main__\":\n    pass\n","66838584":"\"\"\"\nData Loading and Preperation\n\"\"\"\n\nif os.path.exists(\"..\/input\/nfl-big-data-bowl-2021-pp\/games.parquet\"):\n    games_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/games.parquet\")\n    players_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/players.parquet\")\n    plays_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/plays.parquet\")\n    tracking_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/tracking.parquet\")\n    targeted_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/targeted.parquet\")\n    coverage_df = pd.read_parquet(\"..\/input\/nfl-big-data-bowl-2021-pp\/coverage.parquet\")\n\nelif os.path.exists(\"games.parquet\"):\n    games_df = pd.read_parquet(\"games.parquet\")\n    players_df = pd.read_parquet(\"players.parquet\")\n    plays_df = pd.read_parquet(\"plays.parquet\")\n    tracking_df = pd.read_parquet(\"tracking.parquet\")\n    targeted_df = pd.read_parquet(\"targeted.parquet\")\n    coverage_df = pd.read_parquet(\"coverage.parquet\")\nelse:\n    games_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/games.csv\")\n    players_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/players.csv\")\n    plays_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/plays.csv\")\n    tracking_csvs = glob(\"..\/input\/nfl-big-data-bowl-2021\/week*.csv\")\n    tracking_df = pd.concat([pd.read_csv(f) for f in tracking_csvs])\n    targeted_df = pd.read_csv(\n        \"..\/input\/nfl-big-data-bowl-2021-bonus\/targetedReceiver.csv\"\n    )\n    coverage_df = pd.read_csv(\n        \"..\/input\/nfl-big-data-bowl-2021-bonus\/coverages_week1.csv\"\n    )\n    plays_df = prep_plays_df(plays_df)\n\ngames_df.to_parquet(\"games.parquet\")\nplayers_df.to_parquet(\"players.parquet\")\nplays_df.to_parquet(\"plays.parquet\")\ntracking_df.to_parquet(\"tracking.parquet\")\ntargeted_df.to_parquet(\"targeted.parquet\")\ncoverage_df.to_parquet(\"coverage.parquet\")\n","0e97db5a":"plt.style.use(\"default\")\n\ndeep_coverage = pd.read_parquet(\n    \"..\/input\/nfl-big-data-bowl-2021-pp\/deep_coverage_tracking.parquet\"\n)\ndeep_coverage[\"game_play\"] = (\n    deep_coverage[\"gameId\"].astype(\"str\") + \"_\" + deep_coverage[\"playId\"].astype(\"str\")\n)\nroute_dict = (\n    deep_coverage.dropna(subset=[\"route\"])\n    .groupby(\"game_play\")[\"route\"]\n    .first()\n    .to_dict()\n)\ndeep_coverage[\"targeted_route\"] = deep_coverage[\"game_play\"].map(route_dict)\ndeep_coverage = normalize_xy_deepcoverage_relativeqb(deep_coverage)\nfig, axs = plt.subplots(3, 2, figsize=(15, 15))\naxs = axs.flatten()\nidx = 0\n\nfor route in deep_coverage[\"targeted_route\"].value_counts().index[:6]:\n    # for route, d in deep_coverage.groupby(\"targeted_route\"):\n    d = deep_coverage.query(\"targeted_route == @route\")\n    dc_gb = d.groupby(\"game_play\")\n    for i, d in dc_gb:\n        d.query(\"isTargeted\").plot(\n            x=\"y_norm\",\n            y=\"x_norm\",\n            style=\"-\",\n            alpha=0.1,\n            ax=axs[idx],\n            label=None,\n            color=\"white\",\n        )\n        d.query(\"isClosingDefender\").plot(\n            x=\"y_norm\",\n            y=\"x_norm\",\n            style=\"-\",\n            alpha=0.1,\n            ax=axs[idx],\n            label=None,\n            color=\"yellow\",\n        )\n        axs[idx].get_legend().remove()\n\n    axs[idx].set_title(route.title() + \" Routes\", fontsize=12)\n    axs[idx].set_facecolor(\"black\")\n    axs[idx].grid(color=\"white\", alpha=0.1)\n    axs[idx].set_ylim(-5, 60)\n    axs[idx].set_xlim(-30, 30)\n\n    axs[idx].set_xlabel(\"\")\n    axs[idx].set_ylabel(\"\")\n    axs[idx].set_yticklabels([])\n    axs[idx].set_xticklabels([])\n    axs[idx].tick_params(\n        axis=\"x\",  # changes apply to the x-axis\n        which=\"both\",  # both major and minor ticks are affected\n        bottom=False,  # ticks along the bottom edge are off\n        top=False,  # ticks along the top edge are off\n        labelbottom=False,\n    )  # labels along the bottom edge are off\n\n    leg = axs[idx].legend(\n        [\"Receiver\", \"Defender\"], facecolor=\"black\", loc=\"upper right\"\n    )\n    for lh in leg.legendHandles:\n        lh.set_alpha(1)\n    for text in leg.get_texts():\n        text.set_color(\"white\")\n    idx += 1\nfig.suptitle(\"Closing Defender Paths by Route Type\", y=0.93, fontsize=16)\n\nplt.show()","cd7cb72b":"plt.style.use(\"default\")\n\n# Example Plays\nexample_plays = {\n    0: {\"mygameId\": 2018102107, \"myplayId\": 1007},\n    1: {\"mygameId\": 2018123004, \"myplayId\": 2619},\n    2: {\"mygameId\": 2018111809, \"myplayId\": 845},\n}\nfig, axs = plt.subplots(3, 1, figsize=(8, 15))\n\nfor i, example in example_plays.items():\n    myplay = NFLPlay(\n        gameId=example[\"mygameId\"],\n        playId=example[\"myplayId\"],\n        plays_df=plays_df,\n        games_df=games_df,\n        tracking_df=tracking_df,\n        targeted_df=targeted_df,\n        compute_play_stats=True,\n    )\n\n    axs[i] = myplay.plot_targeted_coverage(ax=axs[i], show_ticks=True)\n\n    myplay.tracking_data.query('event == \"ball_snap\" and isOffense').plot(\n        x=\"y_\",\n        y=\"x_\",\n        kind=\"scatter\",\n        ax=axs[i],\n        alpha=0.5,\n        color=\"grey\",\n        s=100,\n    )\n    myplay.tracking_data.query('event == \"ball_snap\" and not isOffense').plot(\n        x=\"y_\",\n        y=\"x_\",\n        kind=\"scatter\",\n        ax=axs[i],\n        alpha=0.5,\n        marker=\"x\",\n        color=\"grey\",\n        s=100,\n    )\n\n    axs[i].set_facecolor(\"lightgreen\")\n    axs[i] = format_ax(axs[i])\n    axs[i].set_title(myplay.playDescription, fontsize=9)\n    if myplay.tracking_data[\"x_\"].mean() < 0:\n        axs[i].set_ylim(\n            -myplay.absoluteYardlineNumber - 15, -myplay.absoluteYardlineNumber + 55\n        )\n    else:\n        axs[i].set_ylim(\n            myplay.absoluteYardlineNumber - 15, myplay.absoluteYardlineNumber + 55\n        )\n\naxs[0].set_title(\"Example 1: Incomplete Pass\", fontsize=15)\naxs[1].set_title(\"Example 2: Complete Pass\", fontsize=15)\naxs[2].set_title(\"Example 3: Intercepted\", fontsize=15)\n\nfor img in range(3):\n    play_desc = plays_df.loc[\n        (plays_df[\"gameId\"] == example_plays[img][\"mygameId\"])\n        & (plays_df[\"playId\"] == example_plays[img][\"myplayId\"])\n    ][\"playDescription\"].values[0][0:90]\n    axs[img].text(axs[img].get_xlim()[0]+ 1, axs[img].get_ylim()[0] + 1.5, \"*\" + play_desc, fontsize=8)\n\n\naxs[0].legend(loc=\"upper left\")\naxs[1].legend(loc=\"upper left\")\naxs[2].legend(loc=\"upper left\")\n\nplt.tight_layout()\nplt.show()\n","7bdaa4ba":"example = example_plays[2]\nplt.style.use(\"default\")\nfig, ax = plt.subplots(figsize=(14, 8))\nax = plot_play_defender(\n    ax,\n    example[\"mygameId\"],\n    example[\"myplayId\"],\n    plays_df,\n    games_df,\n    tracking_df,\n    targeted_df,\n    show_ddrt=False,\n    show_ddra=False,\n    show_ddda=True,\n    show_dddt=True,\n    show_tddt=True,\n    show_tdda=True,\n    ddrt_pad=(-20, 10),\n    ddra_pad=(10, 10),\n    ddda_pad=(-15, 5),\n    dddt_pad=(-20, -10),\n    tddt_pad=(10, 5),\n    tdda_pad=(10, 5),\n    yaxis_pad=(-15, 60),\n    add_description=False,\n    description_cutoff=90,\n    markersize=150,\n    title=\"Distances used in Normalized Closing Ratio\",\n)\n\nplay_desc = plays_df.loc[\n    (plays_df[\"gameId\"] == example[\"mygameId\"])\n    & (plays_df[\"playId\"] == example[\"myplayId\"])\n][\"playDescription\"].values[0][:90]\nax.text(10, 23, \"*\" + play_desc)\n\nhl = ax.get_legend_handles_labels()\nplt.legend(\n    hl[0][:5] + [hl[0][6]],\n    [\n        \"Closing Defender Path\",\n        \"Targeted Receiver Path\",\n        \"Football Path\",\n        \"Defender at Throw and Arrival\",\n        \"Receiver at Throw and Arrival\",\n        \"Quarterback at Throw\",\n    ],\n    loc=\"upper left\",\n    bbox_to_anchor=(1, 0.95),\n)\nplt.tight_layout()\nplt.show()","45ddddc2":"def get_coverage_tracking_data_plays(plays_df, tracking_df, targeted_df, games_df):\n    deep_plays = plays_df.reset_index(drop=True)\n    dfs = []\n    for i, play in tqdm(deep_plays.iterrows(), total=len(deep_plays)):\n        try:\n            mygameId = play[\"gameId\"]\n            myplayId = play[\"playId\"]\n\n            myplay = NFLPlay(\n                gameId=mygameId,\n                playId=myplayId,\n                plays_df=plays_df,\n                games_df=games_df,\n                tracking_df=tracking_df,\n                targeted_df=targeted_df,\n                compute_play_stats=True,\n            )\n            df = myplay.get_closing_track()\n            dfs.append(df)\n        except (IndexError, ValueError) as e:\n            # Some expected tracking data does not exist\n            pass\n    coverage = pd.concat(dfs)\n    return coverage\n\n\nif os.path.exists(\"..\/input\/nfl-big-data-bowl-2021-pp\/coverage_tracking.parquet\"):\n    coverage = pd.read_parquet(\n        \"..\/input\/nfl-big-data-bowl-2021-pp\/coverage_tracking.parquet\"\n    )\nelse:\n    coverage = get_coverage_tracking_data_plays(\n        plays_df, tracking_df, targeted_df, games_df\n    )\n    coverage.to_parquet(\"coverage_tracking.parquet\")\n\n# Calculate play stats with NCR Metric\n\nplays_df[\"game_play\"] = (\n    plays_df[\"gameId\"].astype(\"str\") + \"_\" + plays_df[\"playId\"].astype(\"str\")\n)\ncoverage[\"game_play\"] = (\n    coverage[\"gameId\"].astype(\"str\") + \"_\" + coverage[\"playId\"].astype(\"str\")\n)\n\n\ncoverage[\"passResult\"] = coverage[\"game_play\"].map(\n    plays_df.set_index(\"game_play\")[\"passResult\"].to_dict()\n)\n\n\ncoverage = add_play_targeted_closing(coverage)\ncoverage = normalize_xy_deepcoverage_relativeqb(coverage)\n\nplay_coverage_stats = calc_coverage_stats(coverage, plays_df, players_df)\n\nrestricted_stats = play_coverage_stats.query(\n    \"ClosingDefender_dist_PassDestination_at_PassArrived < 10 and Targeted_dist_PassDestination_at_PassArrived < 10 and seconds_ball_in_air > 0.3\"\n).copy()\n","9655e359":"plt.style.use(\"fivethirtyeight\")\nsns.set_context(\"paper\", font_scale=1.2)\nfig, ax = plt.subplots(figsize=(12, 6))\nfor i, d in restricted_stats.query(\n    \"seconds_ball_in_air > 0.2 and Targeted_dist_PassDestination_at_PassArrived < 5\"\n).groupby(\"passResult\"):\n    sns.kdeplot(d[\"normClosingRatio\"], shade=True, label=i, ax=ax)\nax.set_xlim(40, 120)\nax.set_title(\"Normalized Closing Ratio is Closely Related to Pass Result\", fontsize=16)\nax.set_xlabel(\n    \"Normalized Closing Ratio \\n <------ Receiver Closes Faster \/ Defender Closes Faster ---->\"\n)\nax.set_ylabel(\"Density\")\nplt.legend([\"Complete\", \"Incomplete\", \"Interception\"])\nplt.show()","f3c76a78":"cr_playerstats = (\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[\n        [\n            \"ThrowRatio\",\n            \"ArrivalRatio\",\n            \"normClosingRatio\",\n            \"ClosingRatio\",\n            \"logClosingRatio\",\n            \"ClosingDefender_dist_PassDestination_at_PassArrived\",\n            \"ClosingDefender_dist_PassDestination_at_PassForward\",\n            \"ClosingDefender_dist_Targeted_at_PassArrived\",\n        ]\n    ]\n    .mean()\n    .reset_index()\n)\n\ncr_playerstats = cr_playerstats.merge(\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[[\"playId\"]]\n    .count()\n    .rename(columns={\"playId\": \"DefenderPlayCount\"})\n    .reset_index()\n)\n\n\ncr_playerstats = cr_playerstats.merge(\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[[\"normClosingRatio\"]]\n    .max()\n    .rename(columns={\"normClosingRatio\": \"max_normClosingRatio\"})\n    .reset_index()\n)\n\ncr_playerstats = cr_playerstats.merge(\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[[\"normClosingRatio\"]]\n    .min()\n    .rename(columns={\"normClosingRatio\": \"min_normClosingRatio\"})\n    .reset_index()\n)\n\ncr_playerstats = cr_playerstats.merge(\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[[\"normClosingRatio\"]]\n    .median()\n    .rename(columns={\"normClosingRatio\": \"median_normClosingRatio\"})\n    .reset_index()\n)\n\ncr_playerstats = cr_playerstats.merge(\n    restricted_stats.groupby(\n        [\"ClosingDefender_nflId\", \"ClosingDefender_position\", \"ClosingDefenderName\"]\n    )[[\"normClosingRatio\"]]\n    .std()\n    .rename(columns={\"normClosingRatio\": \"std_normClosingRatio\"})\n    .reset_index()\n)\n\ncr_playerstats[\"normClosingRatio_plus_std\"] = (\n    cr_playerstats[\"normClosingRatio\"] + cr_playerstats[\"std_normClosingRatio\"]\n)\ncr_playerstats[\"normClosingRatio_min_std\"] = (\n    cr_playerstats[\"normClosingRatio\"] - cr_playerstats[\"std_normClosingRatio\"]\n)\n\n\nranked_players = (\n    cr_playerstats.sort_values(\"normClosingRatio\")\n    .query(\"DefenderPlayCount > 20\")\n    .set_index(\"ClosingDefenderName\")\n)\n\nranked_players = ranked_players.reset_index()\n\nranked_players[\"position\"] = ranked_players[\"ClosingDefender_position\"].replace(\n    {\"ILB\": \"LB\", \"OLB\": \"LB\", \"MLB\": \"LB\", \"SS\": \"S\", \"FS\": \"S\", \"DB\": \"CB\"}\n)\n","df018276":"plt.style.use(\"fivethirtyeight\")\ncolor_pal = plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"]\n\nfig, ax = plt.subplots(figsize=(8, 6))\n# sns.color_palette('rocket')\nax = sns.barplot(\n    x=\"normClosingRatio\",\n    y=\"ClosingDefenderName\",\n    data=ranked_players.reset_index()\n    .sort_values(\"normClosingRatio\", ascending=False)\n    .head(20),\n    hue=\"position\",\n    palette=color_pal,\n    ax=ax,\n    dodge=False,\n)\n# sns.set_context(\"paper\", font_scale=1.2)\nax.set_ylabel(\"\")\nax.set_xlabel(\"Average Normalized Closing Ratio\", fontsize=12)\nax.set_xlim(75, 77.25)\nax.set_title(\"Top Players by Normalized Closing Ratio\", fontsize=16)\nplt.show()","391b0979":"fig, ax = plt.subplots(1, 3, figsize=(15, 10))\nranked_players.query('position == \"CB\"').set_index(\"ClosingDefenderName\").query(\n    \"DefenderPlayCount > 15\"\n).sort_values(\"normClosingRatio\", ascending=True).tail(25)[\"normClosingRatio\"].plot(\n    kind=\"barh\", ax=ax[0], color=color_pal[0]\n)\n\nranked_players.query('position == \"LB\"').set_index(\"ClosingDefenderName\").query(\n    \"DefenderPlayCount > 15\"\n).sort_values(\"normClosingRatio\", ascending=True).tail(25)[\"normClosingRatio\"].plot(\n    kind=\"barh\", ax=ax[1], color=color_pal[1]\n)\n\n\nranked_players.query('position == \"S\"').set_index(\"ClosingDefenderName\").query(\n    \"DefenderPlayCount > 15\"\n).sort_values(\"normClosingRatio\", ascending=True).tail(25)[\"normClosingRatio\"].plot(\n    kind=\"barh\", ax=ax[2], color=color_pal[2]\n)\n\n\nax[0].set_ylabel(\"\")\nax[1].set_ylabel(\"\")\nax[2].set_ylabel(\"\")\n\n\nax[0].set_xlabel(\"Normalized Closing Ratio\", fontsize=10)\nax[1].set_xlabel(\"Normalized Closing Ratio\", fontsize=10)\nax[2].set_xlabel(\"Normalized Closing Ratio\", fontsize=10)\n\nax[0].set_xlim(72, 78)\nax[1].set_xlim(72, 78)\nax[2].set_xlim(72, 78)\n\nax[0].grid(False)\nax[1].grid(False)\nax[2].grid(False)\n\nax[0].set_title(\"Top Closing Cornerbacks\", fontsize=14)\nax[1].set_title(\"Top Closing Linebackers\", fontsize=14)\nax[2].set_title(\"Top Closing Safeties\", fontsize=14)\n\nplt.suptitle(\"Top Closing Players by Position\", y=1.03, fontsize=20)\nplt.tight_layout()\nplt.show()","4cdcb5cd":"seed = 900\nplt.style.use(\"default\")\nfrequent_routes = play_coverage_stats['route'].value_counts().to_frame().query('route > 1000').index\nfor route_type in frequent_routes:\n    bad_example = play_coverage_stats.query(\n        'seconds_ball_in_air > 0.5 and normClosingRatio < 60 and route == @route_type'\n    ).sample(1, random_state=seed)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n    crat = bad_example[\"normClosingRatio\"].values[0]\n    ax1 = plot_play_defender(\n        ax1,\n        bad_example[\"gameId\"].values[0],\n        bad_example[\"playId\"].values[0],\n        plays_df,\n        games_df,\n        tracking_df,\n        targeted_df,\n        show_ddrt=False,\n        show_ddra=False,\n        show_ddda=False,\n        show_dddt=False,\n        ddrt_pad=(20, 10),\n        ddra_pad=(10, 10),\n        ddda_pad=(-10, 5),\n        dddt_pad=(-10, 0),\n        yaxis_pad=(-12, 25),\n        add_description=False,\n        description_cutoff=90,\n        markersize=80,\n        title=f\"Normalized Closing Ratio : {crat:0.2f}\",\n        title_fs=10,\n    )\n\n    good_example = play_coverage_stats.query(\n        'seconds_ball_in_air > 0.5 and normClosingRatio > 80 and route == @route_type'\n    ).sample(1, random_state=seed)\n    crat = good_example[\"normClosingRatio\"].values[0]\n    ax2 = plot_play_defender(\n        ax2,\n        good_example[\"gameId\"].values[0],\n        good_example[\"playId\"].values[0],\n        plays_df,\n        games_df,\n        tracking_df,\n        targeted_df,\n        show_ddrt=False,\n        show_ddra=False,\n        show_ddda=False,\n        show_dddt=False,\n        ddrt_pad=(20, 10),\n        ddra_pad=(10, 10),\n        ddda_pad=(-10, 5),\n        dddt_pad=(-10, 0),\n        yaxis_pad=(-12, 25),\n        add_description=False,\n        description_cutoff=90,\n        markersize=80,\n        title=f\"Normalized Closing Ratio : {crat:0.2f}\",\n        title_fs=10,\n    )\n    ax1.get_legend().remove()\n    ax2.get_legend().remove()\n    \n    \n    hl = ax2.get_legend_handles_labels()\n    ax2.legend(\n        hl[0][:5] + [hl[0][6]],\n        [\n            \"Closing Defender Path\",\n            \"Targeted Receiver Path\",\n            \"Football Path\",\n            \"Defender at Throw and Arrival\",\n            \"Receiver at Throw and Arrival\",\n            \"Quarterback at Throw\",\n        ],\n        loc=\"upper left\",\n        bbox_to_anchor=(1.1, 0.95),\n    )\n    \n    plt.suptitle(route_type.title() + ' Route', y=1.01, fontsize=12)\n    plt.show()","10a25951":"# Appendix\n\n## Examples of NCR by Route Type\n\nWhile creating the Normalized Closing Ratio metric, I visually inspected numerous plays using plots like the ones shown below. Below are two columns of plots: on the left side are \u201cbad\u201d NCR plays (where the value is below 60). On the right are plays with \u201cgood\u201d NCR plays (where the score is above 80). These plots show how the metric captures the complexities of football while staying simple enough to quickly gain insights.","1bb48f31":"# Normalized Closing Ratio and Pass Result\n\nUp until this point, I've explained the math behind my Normalized Closing Ratio. Next, I'd like to show how this metric is related to passing outcomes. The results are striking- you can clearly see a distinction in the distributions! Complete passes typically have lower NCR scores, while interceptions are, on average, much higher. Incomplete passes occur close to the middle of the distribution. This further bolsters the idea that the NCR is a good metric for determining how well a defender plays against the pass while the ball is in the air.\n","74fd45b8":"The End. Thanks for reading!","1d7c7e65":"In the plot above, I\u2019ve focused on the third example from the previous section. I\u2019ve added all the distances used to create the NCR metric. Now, I will calculate the NCR for this play. While the math is straightforward, I would like to emphasize this metric is designed to be intuitive. Essentially, we are calculating how much the defender gained for lost ground compared to the receiver on the play.\n\nWith that in mind, I\u2019ll calculate using the distance values:\n\n$ DDD_a = 0.2 \\quad  DDD_t = 25.86 \\quad   TDD_a = 1.01 \\quad  TDD_t = 28.21 $\n\nThe $ThrowRatio$ is 0.917. This value shows *at the moment that the ball is thrown* both players are roughly equadistant to the ball's final location. The $ArrivalRatio$ is 0.198 - which tells us that the defender's relative distance to the ball when it arrives is much closer than the targeted reciever.  \n\n$$ ThrowRatio = \\dfrac{DDD_t}{TDD_t} = \\dfrac{25.86}{28.21} = 0.917 $$\n\n\n$$ ArrivalRatio = \\dfrac{DDD_a}{TDD_a} = \\dfrac{0.2}{1.01} = 0.198 $$\n\nThe closing ratio is simply :\n\n$$ ClosingRatio = \\dfrac{0.198}{0.917} = 0.216 $$\n\nFinally, after normalizing, we have a metric where a value of 0 is a horrible defensive play while 100 is a perfect closing by the defensive player. In this play, Marshawn Lattimore scores 83.98, which is well above average in terms of closing:\n\n$$ \\frac{700}{(log(ClosingRatio) + 9)} = 83.98 $$\n","c49a2c08":"# Top Defenders by Closing Ratio\n\nHopefully, by now I've demonstrated that the NCR is a helpful metric for determining how well defensive players close on the ball while it is in the air. The final step of the process is to find each player's average NCR score across all the available plays. I take the average NCR score across all plays meeting the restriction requirement (>0.3 seconds of ball in the air, and both players within 10 yards of the ball when it arrives) for each player. I've also removed players that have less than 20 plays as closing defenders (I only wanted to include players with enough sample size to be meaningful).\n\nIt's interesting to note that the top players list is quite diverse- no one position dominates this list. It consists of well known and some not so well known players who are exceptional at closing in on the ball as it is in the air. Anthony Walker, who tops my NCR list, had an [article written about his impressive play in the 2018 season](https:\/\/www.sportskeeda.com\/gridiron\/anthony-walker-jr-has-quietly-become-a-really-good-young-linebacker) about his impressive play. After watching some of his highlights, I'm not suprised by his top performance.\n\n**Anthony Walker Jr.'s amazing closing speed in action**\n![](https:\/\/i.imgur.com\/yxUvFj4.gif)\n","a96d5b13":"# Closing Defender vs Targeted Receiver\n\nTo evaluate defensive players' ability to close on receivers, I first identify which defensive player is most responsible for closing in each play. Defenders have various responsibilities at the beginning of a play, but after the ball is thrown, the defensive team becomes focused on attacking the location of the ball.\n\nUsing the provided NGC player tracking data, I am able to determine the defender that is closest to the targeted receiver at the moment the ball reaches its destination. I call this defender the **Closing Defender**. All other defensive players are ignored for that play because I want to focus on the defender\/receiver relationship.\n\nBelow is a brief description of the terminology I use for this analysis:\n\nPlayers:\n\n- **Targeted Receiver**: The quarterback\u2019s intended receiver of the throw. \n- **Closing Defender**: The defensive player closest to the Targeted Receiver at the moment the ball arrives.\n\nPlay Events:\n\n- **pass_forward** : The moment within the play when the quarterback released the ball (I've also referred to this as the \u201cthrow\u201d moment).\n- **pass_arrived**: The moment when the ball arrives at its final location. In the case of a completed pass, this is the location of the receiver, in the case of an interception, this would be the location of the defensive player. For incomplete passes, this could be anywhere on the field.\n","a8cad726":"# Defensive Closing Patterns\n\nTo better understand the movements that players make when defending the pass, I've provided three examples below. In these plots, I have isolated the players paths while the ball is in the air. In the first example, the receiver is running an Out Route. The Closing Defender is quick to cover and the pass ends up incomplete. The second example shows a Go Route, where the receiver creates enough separation to catch the pass and ultimately haul in the ball for a touchdown. The third example is another Go route, but, in this case, the Closing Defender tracks the ball while it is in the air, cutting off the receiver for an interception.\n\nThe question is: \"How do we quantify if a defender is doing a good job at closing in on the ball?\" I could simply look at the player's average speed while the ball is in the air, but that doesn't account for the player's direction, and if they are actually moving in the best direction. I also considered looking at the change in distance of the Closing Defender to the targeted receiver at different moments in the play, but distance to the receiver does not indicate the player is necessarily closing on the ball. I've concluded, after many different iterations, that the metric must account for both where the ball is thrown by both the closing defender and targeted receiver. My solution incorporates not only the defenders location at the moment the ball is thrown and arrives, but also the ratio distances between players. I'll discuss this metric in more detail in the next section and go into more detail regarding why I think this is a strong metric.\n","5a729715":"## Visualizing the Closing Defender\n\nIn the previous section, I coined the term \u201cClosing Defender\u201d. Before proceeding I want to validate that these players are in fact ones that follow or close upon the targeted receivers.\n\nFor purposes of plotting the data, I created normalized X and Y position features such that all offenses are moving in the same direction and all players movements are relative to the quarterback's location at the time of the throw. This allows me to easily plot different routes on top of each other and see if patterns emerge with the movement patterns of defenders. Each plot below displays a different targeted receiver's route. Note that these plots only include deep passes (passes attempted for >15 yards). One thing that becomes apparent is that the closing defender do, in fact, generally seem to follow very similar paths to their receivers. This is good confirmation that I have determined my \"Closing Defender\" term appropriately.","a911bdb9":"# Conclusion and Further Research\n\nBeing an NFL defensive player requires both physical and mental toughness. As opposed to offensive players, who are executing a play that they know, defenders must recognize and respond in an instant! A crucial time for a defender's swift response is while the ball is in the air.\n\nIn this paper, I've presented a new metric called the **Normalized Closing Ratio** (NCR). I created the NCR to identify how well defensive player's close on the ball while it is in the air. This metric is only possible to compute because of the detailed tracking data provided by NextGen Stats. Using the NGS data, I show how I can calculate players distances to the pass' destination. I show how this simple metric is closely linked to play outcome, and display some of the top NCR players from 2018.\n\nI believe this metric, and ones like it, hold significant potential to change the ways players, coaches and fans understand defensive player's abilities. It could be used as a tool for identifying players for offensive coaches to avoid. Defensive coaches could use it as an additional metric when determining who makes the starting lineup. Coaches and fans alike could look back at high scoring NCR plays to see what schemes or techniques were used to produce positive outcomes.\n\nMore testing and evaluation are, of course, required for the NCR. I believe, though, that further serious analysis could very likely contribute to sharpening of the entire football community's understanding of how defenders make decisions while the football is in the air.\n","de079536":"# The NCR Metric\n\nThe Normalized Closing Ratio is my solution for quantifying how well a defender closed on a ball while it is in the air. It can be broken down into two parts. First, I define the targeted receiver and closing defender\u2019s individual distance to the ball's arrival location. I do this at both the moment the ball is thrown and the moment the ball reaches this location. I call these the **Throw Ratio** and **Arrival Ratio**.\n\n\n$$ ThrowRatio = \\dfrac{DDD_t}{TDD_t} $$\n\n\n$$ ArrivalRatio = \\dfrac{DDD_a}{TDD_a} $$\n\nwhere: $DDD_t$ is the defenders distance to the ball's destination at the moment of throw. $TDD_t$ is the targeted receivers distance to the ball's destination at the moment of throw. $DDD_a$ is the defender's distance to the ball destination at the moment the ball arrives, and $TDD_a$ is the targeted receiver's distance to the ball when it has arrived. \n\nNote that, when the defender is lagging the receiver with respect to the ball\u2019s destination, these values will be large. When the defender is closer to the ball\u2019s destination, these values will be large. These values do not tell us anything about how the player has closed on the ball\u2019s destination during the time it was in the air.\n\nTo account for the player's change of position while the ball is in the air, I divide the arrival ration by the throw ratio. I call this the closing ratio:\n\n$$ ClosingRatio = \\dfrac{ArrivalRatio}{ThrowRatio} $$\n\nThe only problem with my raw closing ratio, as described above, is that it is not so easy to interpret. To normalize it, I apply a log transformation and some constants. You can think of this as \u201cgrading on a curve\u201d where an A+ would be a score of 100, and and C (average) play has a score of 75. I call this the Normalized Closing Ratio (NCR). The NCR is clipped so the maximum possible value is 100.\n\n$$ normClosingRatio = \\frac{700}{(log(ClosingRatio) + 9)} $$\n\n\n**Play restrictions**: There are some unique situations that restrict which plays are appropriate for my Normalized Closing Ratio. Plays must meet the following criteria:\nThe ball must be in the air for at least 0.3 seconds. This removes quick shuffle passes where I don\u2019t think this metric should apply.\nAt the point of arrival, both the defender and receiver must be within at least 10 yards of the ball. This excludes some passes where the quarterback severely over or underthrows their receiver. It also excludes some plays where the quarterback intentionally throws the ball away. I did **not** decide to exclude plays resulting in penalties, as I believe that those plays are still legitimate with respect to closing speed- but this could be debated.\n","e75e4d79":"# Normalized Closing Ratio : A Metric for Assessing Defensive Players' Closing Effectiveness\n\nThe goal of this paper is to respond to the proposed question suggested for the 2021 Big Data Bowl:\n\n*\u201cWhich players are the best at closing on receivers when the ball is in the air?\u201d*\n\nTo answer this question, I propose a novel metric I\u2019ve dubbed the **Normalized Closing Ratio (NCR)** which describes a defender's ability to close on a ball relative to the targeted receiver. I show how this metric is closely linked to the outcome of passing plays (caught, incomplete, or interception). I then show how it can be used to evaluate defensive players\u2019 ability to close on the ball while it is in the air. Finally, I discuss how I think this metric could be improved upon in future analysis.\n"}}