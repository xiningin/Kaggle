{"cell_type":{"2886c503":"code","918d9dc5":"code","842a30c4":"code","e5b25305":"code","31e7a3b1":"code","08d1d257":"code","73045993":"code","fb28b79d":"code","13f887dc":"code","0ec4d0a4":"code","78df86fe":"code","e4d619e0":"code","a6e71097":"code","7b206f5c":"code","c0e3f05e":"code","cf79f4b4":"code","eb31985d":"code","44bec60a":"code","67dcd97f":"code","62de8234":"code","0c981fab":"code","031e2fdf":"code","257b84ac":"code","efadd49f":"code","ecc936ac":"code","9e226d53":"code","18ce24cb":"code","5db7f9b9":"code","9c765185":"code","4660168b":"markdown","5cfce99f":"markdown","11381ba0":"markdown","0a584d74":"markdown"},"source":{"2886c503":"# Import important libraries\nimport os\nimport math\nimport glob\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings #it is used to ignore the warnings\nimport plotly.express as px\n\nwarnings.filterwarnings('ignore')","918d9dc5":"!pip install openpyxl #install openpyxl library","842a30c4":"# load all the datasets that are available for analysis\ndf_genderentries = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx')\ndf_athletes = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx')\ndf_coaches = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx')\ndf_medals = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx')\ndf_teams = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Teams.xlsx')","e5b25305":"datasets = {\n    'genderentries' : df_genderentries,\n    'athletes' : df_athletes,\n    'coaches' : df_coaches,\n    'models' : df_medals,\n    'teams' : df_teams\n}\n\n# get the basic info about the datasets\nfor data,df in datasets.items():\n    print(\"+++++++++++ {} +++++++++++\\n\".format(data))\n    print(\"Shape of DataFrame : {}\".format(df.shape)) # define the shape of the dataset\n    print(\"Columns in DataFrame : {}\".format(df.columns)) # gives the numbers of features in the dataframe.\n    print(\"Null Values in Data : {}\".format(df.isnull().sum())) #gives us the number of null values in the dataframe.\n    print(\"Duplicated Values : {}\".format(df.duplicated().sum())) # tells us about the duplicated values\/ rows in the dataframe\n    print(df.describe())\n    print(\"\\n\")","31e7a3b1":"# drop the duplicates from the dataset\n# as we have seen that athletes and coaches dataset have 1 duplicate rows, so we have to remove that\ndf_athletes.drop_duplicates(inplace=True)\ndf_coaches.drop_duplicates(inplace=True)","08d1d257":"# In this cell, we have seen that coaches dataset have a feature 'Event' which have some null \n# values, so we want to check that how many null values are there, and what % of data have \n# null values in the dataset.\nprint(\"Null values in Coaches dataset : {}\".format(df_coaches.Event.isnull().sum()))\nprint(\"% of null values {}\".format( ( (df_coaches.shape[0] - df_coaches.Event.isnull().sum() ) \/ df_coaches.shape[0] )*100 ) )","73045993":"# we have seen that there are 63% null values are present in the feature\n# so I think that we can remove that column, and this column, is not \n# contributing massive weightage in the dataset as well.\ndf_coaches.drop(columns='Event', axis = 1, inplace=True)\ndf_coaches.head()","fb28b79d":"# verifying the total number of candidates in the sports, by checking via gender.\ncheck_total = df_genderentries.Female + df_genderentries.Male\nif check_total.sum() == df_genderentries.Total.sum():\n    print(\"True\") # true if total candidates == sum of male and female candidates\nelse:\n    print(\"False\")","13f887dc":"df_athletes","0ec4d0a4":"# create a bar plot of country vs number of candidates from each country\nplt.figure(figsize=(25,5))\nplt.bar(df_athletes.NOC.value_counts().index[:30], df_athletes.NOC.value_counts().values[:30], color = 'green')\nplt.xticks(rotation=90)\nplt.xlabel('Country')\nplt.ylabel('No of Athletes')\nplt.title('Distribution of Candidated from each Country')\nplt.show()","78df86fe":"# plot the bar plot on every sports vs total number of candidates in every sports\nplt.figure(figsize=(23,5))\nplt.bar(df_athletes.Discipline.value_counts().index, df_athletes.Discipline.value_counts().values, color = 'red')\nplt.xticks(rotation=90)\nplt.xlabel('Sports')\nplt.ylabel('No of Athletes')\nplt.title('Distribution of Candidates with respect to Sports')\nplt.show()","e4d619e0":"df_coaches.head()","a6e71097":"# create a temporary dataframe from coaches dataset to check the number of candidates in each sport.\ndf_sports = pd.DataFrame(data = [list(df_coaches.Discipline.value_counts().index),list(df_coaches.Discipline.value_counts())]).T\ndf_sports.columns = ['Sports', 'no_athletes']\ndf_sports","7b206f5c":"print(\"Total Sports Available in Tokyo 2020 Olyampics : {}\".format(len(df_athletes.Discipline.value_counts())))\nprint(\"Total Sports Held in Tokyo 2020 Olayampics : {}\".format(len(df_coaches.Discipline.value_counts())))","c0e3f05e":"plt.figure(figsize=(12,5))\npx.bar(data_frame=df_sports, \n       x = 'Sports', \n       y = 'no_athletes', \n       title=\"Distribution of candidates on the basis of Sports:\")","cf79f4b4":"df_genderentries.head()","eb31985d":"df_genderentries.shape # total 46 sports in olypmics","44bec60a":"# create a distribution on the basis of gender on each sports\nplt.figure(figsize= (15,8))\npx.bar(data_frame=df_genderentries, \n       x = 'Discipline', \n       y = ['Female', 'Male'], \n       color_discrete_sequence=['green','yellow'], \n       title=\"Distribution of Candidates on sports:\")","67dcd97f":"# create a plot for total candidates played in each sports\nplt.figure(figsize= (15,8))\npx.bar(data_frame=df_genderentries, \n       x = 'Discipline', \n       y = 'Total', \n       color_discrete_sequence=['maroon'], \n       title=\"Distribution of Total Candidated in Eah Sport :\")","62de8234":"df_genderentries.Total.sum()","0c981fab":"cal_percentage = lambda freq,total : freq\/total  * 100 # lambda function to calulate percentage of given data\ndf_gen_temp = df_genderentries.copy() # generate a copy of gender entries dataset\ndf_gen_temp['male_per'] = cal_percentage(df_gen_temp.Male,df_gen_temp.Total) # create a feature on male feature that calculates its percenatge\ndf_gen_temp['female_per'] = cal_percentage(df_gen_temp.Female, df_gen_temp.Total) # create a feature on female feature that calculates its percenatge\ndf_gen_temp.head()","031e2fdf":"# create a plot that shows what percentage of male and female candidates participate in each discipline\/sport\nfig = plt.figure(figsize=(20,5))\nax = fig.add_axes([0,0,1,1])\nx = np.arange(len(df_gen_temp.Discipline))\nmale_barplot = ax.bar(x + 0.0, df_gen_temp.male_per, label = \"Male\", width = 0.4)\nfemale_barplot = ax.bar(x + 0.5, df_gen_temp.female_per, label = \"Female\", width = 0.4)\nax.set_xticklabels(df_gen_temp.Discipline)\nax.set_xticks(x)\nax.set_ylabel('% of candidates')\nax.set_xlabel('Sports')\nax.legend()\nax.bar_label(male_barplot, padding= 3)\nax.bar_label(female_barplot, padding= 3)\nplt.xticks(rotation = 90)\nplt.show()\n\n# in this we can see mostly distribution is 1:1","257b84ac":"# create a pie plot to show what percentage of male and female participate in olympics\nplt.figure(figsize=(12,12))\npx.pie(data_frame=df_genderentries,\n       names=['Male', 'Female'], \n       values = [df_genderentries.Male.sum(), \n                 df_genderentries.Female.sum()], \n       color_discrete_sequence=['yellow', 'green'], \n       title=\"% of Male and Female participate in OlymPics 2020 : \")","efadd49f":"df_medals","ecc936ac":"# total tems playing are 93\n# top 10 teams\ndf_medals.sort_values(by='Rank', ascending=True).head(15)","9e226d53":"# Top 10 country by rank by total\ndf_medals.sort_values(by='Rank by Total', ascending=True).head(15)","18ce24cb":"# plot the graph of country on the basis total number of medals each country received.\nplt.figure(figsize=(12,5))\npx.bar(data_frame=df_medals.sort_values(by='Rank by Total', ascending=True).head(10), \n       x = 'Team\/NOC', \n       y = 'Total', \n       title= \"Distribution of Country on the basis of Total Medals : \")","5db7f9b9":"df_medals","9c765185":"# top 10 countries showing their medals\nplt.figure(figsize=(12,8))\npx.bar(data_frame=df_medals.sort_values(by='Rank by Total', ascending=True).head(10), \n       x = 'Team\/NOC', \n       y = ['Gold', 'Silver', 'Bronze'], \n       color_discrete_sequence=['magenta', 'maroon', 'pink'], \n       title=\"Distribution of Medals of each Country : \")","4660168b":"<h3 align=\"center\">Data Analysis <\/h3>","5cfce99f":"<h1 align=\"center\">Tokyo Olympics 2020 <\/h1>","11381ba0":"## THE END","0a584d74":"### Data Cleaning"}}