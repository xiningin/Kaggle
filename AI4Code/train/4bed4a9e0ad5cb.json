{"cell_type":{"ed2244d8":"code","3a28a286":"code","de024274":"code","3c77219b":"code","baf6d965":"code","3e5ba4c5":"code","59e33deb":"code","7b5c8ea9":"code","4b4c89cf":"code","ac7896ff":"code","0f66bcb7":"code","3427027d":"code","419b0848":"code","5be6eaf2":"code","b1865e12":"code","6866f5cc":"code","1d3216af":"code","695f6fc9":"code","5208b980":"code","d314480e":"markdown","c1660fe1":"markdown","e0b2b982":"markdown","ecd7ff51":"markdown","1c7606ec":"markdown","c245dae1":"markdown","e1a60bdc":"markdown","f0db55c9":"markdown","c6035396":"markdown","723b92bb":"markdown","90a83644":"markdown"},"source":{"ed2244d8":"import pandas as pd\nimport gc\nimport os\nimport tqdm\nimport numpy as np\n\nnp.warnings.filterwarnings('ignore')","3a28a286":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_TRAIN = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_train_transactions_contest\/train_transactions_contest'\nPATH_TO_TEST = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_test_transactions_contest\/test_transactions_contest'\n\nPATH_TO_TRAIN_TARGET = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_train_target.csv'\nPATH_TO_TEST_TARGET = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_test_target_contest.csv'\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'","de024274":"!pip freeze > requirements.txt","3c77219b":"def read_parquet_dataset_from_local(path_to_dataset: str, \n                                    start_from: int = 0,\n                                    num_parts_to_read: int = 2, \n                                    columns=None, \n                                    verbose=False,\n                                    info_num_parts=False) -> pd.DataFrame:\n    \"\"\"\n    \u0447\u0438\u0442\u0430\u0435\u0442 num_parts_to_read \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0438\u0445 \u043a pd.DataFrame \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n    :param path_to_dataset: \u043f\u0443\u0442\u044c \u0434\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044f\u043c\u0438\n    :param start_from: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0430\u0442\u044c \u0447\u0442\u0435\u043d\u0438\u0435\n    :param num_parts_to_read: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c\n    :param columns: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438\n    :return: pd.DataFrame\n    \"\"\"\n\n    res = []\n    list_paths = sorted([os.path.join(path_to_dataset, filename) for filename in os.listdir(path_to_dataset) \n                              if filename.startswith('part')])\n    if info_num_parts:\n        print(f'\u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439 \u0432 \u043f\u0430\u043f\u043a\u0435: {len(list_paths)}')\n    start_from = max(0, start_from)\n    list_path_to_partitions = list_paths[start_from: start_from + num_parts_to_read]\n    if verbose:\n        print('Reading chunks:\\n')\n        for path_to_partition in list_path_to_partitions:\n            print(path_to_pirtition)\n    for path_to_parquet in tqdm.tqdm_notebook(list_path_to_partitions, \n                                              desc=\"\u0427\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b:\"):\n        temp_parquet = pd.read_parquet(path_to_parquet,columns=columns)\n        res.append(temp_parquet)\n        del temp_parquet\n        gc.collect()\n    return pd.concat(res).reset_index(drop=True)\n\n\ndef __amnt_pivot_table_by_column_as_frame(frame, column, agg_funcs=None) -> pd.DataFrame:\n    \"\"\"\n    \u0421\u0442\u0440\u043e\u0438\u0442 pivot table \u0434\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439 `amnt`  \u0438 column \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 aggregations_on\n    :param frame: pd.DataFrame \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\n    :param column: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 `amnt`  \u0438 column \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d pivot_table\n    :param agg_funcs: \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ['mean', 'count']\n    :return: pd.DataFrame\n    \"\"\"\n    if agg_funcs is None:\n        agg_funcs = ['mean', 'count']\n    aggs = pd.pivot_table(frame, values='amnt',\n                          index=['app_id'], columns=[column],\n                          aggfunc={'amnt': agg_funcs},\n                          fill_value=0.0)\n    aggs.columns = [f'{col[0]}_{column}_{col[1]}' for col in aggs.columns.values]\n    return aggs\n\ndef extract_basic_aggregations(transactions_frame: pd.DataFrame, \n                               cat_columns=None, \n                               agg_funcs=None) -> pd.DataFrame:\n    \"\"\"\n    :param transactions_frame: pd.DataFrame \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438\n    :param cat_columns: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u043f\u043e `amnt`\n    :param agg_funcs: \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432, \n    :\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ['sum', 'mean', 'count']\n    :return: pd.DataFrame \u0441 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n    \"\"\"\n    if not cat_columns:\n        cat_columns = CAT_COLUMNS\n\n    pivot_tables = []\n    for col in cat_columns:\n        pivot_tables.append(__amnt_pivot_table_by_column_as_frame(transactions_frame, column=col,\n                                                                  agg_funcs=agg_funcs))\n    pivot_tables = pd.concat(pivot_tables, axis=1)\n\n    aggs = {\n        # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439\n        'amnt': ['mean', 'median', 'sum', 'std'],\n        # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u0432 \u0447\u0430\u0441\u0430\u0445 \u043c\u0435\u0436\u0434\u0443 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438\n        'hour_diff': ['max', 'mean', 'median', 'var', 'std'],\n        # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0430\u043c\u0443\u044e \u0440\u0430\u043d\u043d\u044e\u044e\/\u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0438 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0434\u043e \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\n        'days_before': ['min', 'max', 'median']}\n\n    numeric_stats = transactions_frame.groupby(['app_id']).agg(aggs)\n\n    # \u0434\u0430\u0434\u0438\u043c \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u043d\u043e\u0432\u044b\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c; \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 python 3.5, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0435\n    # \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\n    numeric_stats.columns = [k + '_' + agg for k in aggs.keys() for agg in aggs[k]]\n\n    return pd.concat([pivot_tables, numeric_stats], axis=1).reset_index()\n\ndef prepare_transactions_dataset(path_to_dataset: str, \n                                 num_parts_to_preprocess_at_once: int = 1, \n                                 num_parts_total: int=50, \n                                 save_to_path=None, \n                                 verbose: bool=False):\n    \"\"\"\n    :\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0439 pd.DataFrame \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n    :path_to_dataset: str - \u043f\u0443\u0442\u044c \u0434\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044f\u043c\u0438\n    :num_parts_to_preprocess_at_once: int - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0434\u0435\u0440\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f\n    :num_parts_total: int - \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c\n    :save_to_path: str - \u043f\u0443\u0442\u044c \u0434\u043e \u043f\u0430\u043f\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a \u0432 .parquet \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \u0415\u0441\u043b\u0438 None, \u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \n    :verbose: bool - \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043a\u0443\u0441\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n    \"\"\"\n    preprocessed_frames = []\n    block = 0\n    for step in tqdm.tqdm_notebook(range(0, num_parts_total, num_parts_to_preprocess_at_once), \n                                   desc=\"\u041e\u0431\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430:\"):\n        transactions_frame = read_parquet_dataset_from_local(path_to_dataset, \n                                                             step, \n                                                             num_parts_to_preprocess_at_once, \n                                                             verbose=verbose)\n        features = extract_basic_aggregations(transactions_frame, \n                                              cat_columns=['mcc_category', \n                                                           'day_of_week', \n                                                           'operation_type'])\n        if save_to_path:\n            block_as_str = str(block)\n            if len(block_as_str) == 1:\n                block_as_str = '00' + block_as_str\n            else:\n                block_as_str = '0' + block_as_str\n            features.to_parquet(os.path.join(save_to_path, f'processed_chunk_{block_as_str}.parquet'))\n            \n        preprocessed_frames.append(features)\n    return pd.concat(preprocessed_frames)\n\ndef reduce_mem_usage_df(d_df: pd.DataFrame)-> [pd.DataFrame, list]:\n    \"\"\"\n    :\u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.\n    \"\"\"\n    start_mem = d_df.memory_usage().sum() \/ 1024**2\n    print('\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 {:.2f} MB'.format(start_mem))\n    \n    d_log = []\n    for col in d_df.columns:\n        col_type = d_df[col].dtype\n\n        if col_type != object:\n            c_min = d_df[col].min()\n            c_max = d_df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    d_df[col] = d_df[col].astype(np.int8)\n                    d_log.append(f'{col} :from int64 to int8')\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    d_df[col] = d_df[col].astype(np.int16)\n                    d_log.append(f'{col} :from int64 to int16')\n\n    end_mem = d_df.memory_usage().sum() \/ 1024**2\n    print('\u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438: {:.2f} MB'.format(end_mem))\n    print('\u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u043e \u043d\u0430 {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    print('\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 \u043b\u043e\u0433\u0435')\n    \n    return d_df, d_log","baf6d965":"%%time\ntransactions_frame = read_parquet_dataset_from_local(PATH_TO_TRAIN, \n                                                     start_from=0, \n                                                     num_parts_to_read=1,\n                                                     info_num_parts=True)\n\nmemory_usage_of_frame = transactions_frame.memory_usage(index=True).sum() \/ 10**9\nexpected_memory_usage = memory_usage_of_frame * 50\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432  RAM \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438: {round(memory_usage_of_frame, 3)} Gb')\nprint(f'\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 RAM \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: {round(expected_memory_usage, 3)} Gb')","3e5ba4c5":"del transactions_frame\ngc.collect()","59e33deb":"%%time\ntrain_data = prepare_transactions_dataset(PATH_TO_TRAIN, \n                                    num_parts_to_preprocess_at_once=5, \n                                    num_parts_total=50)","7b5c8ea9":"print(f'\u041e\u0431\u044a\u0435\u043c \u0432 RAM \u0432\u0441\u0435\u0433\u043e train \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438: {round(train_data.memory_usage(index=True).sum() \/ 10**9, 3)} Gb')","4b4c89cf":"%%time\ntest_data = prepare_transactions_dataset(PATH_TO_TEST, \n                                         num_parts_to_preprocess_at_once=5, \n                                         num_parts_total=50)","ac7896ff":"print(f'\u041e\u0431\u044a\u0435\u043c \u0432 RAM \u0432\u0441\u0435\u0433\u043e test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u043c\u0438: {round(test_data.memory_usage(index=True).sum() \/ 10**9, 3)} Gb')","0f66bcb7":"train_data, log_reduce_mem_train = reduce_mem_usage_df(train_data)","3427027d":"# log_reduce_mem_train","419b0848":"test_data, log_reduce_mem_test = reduce_mem_usage_df(test_data)","5be6eaf2":"# log_reduce_mem_test","b1865e12":"train_targets = pd.read_csv(PATH_TO_TRAIN_TARGET)\ntrain_targets.head()","6866f5cc":"merged_train_data = train_data.merge(train_targets[['app_id', 'product', 'flag']], on=['app_id'])","1d3216af":"test_target =  pd.read_csv(PATH_TO_TEST_TARGET)\ntest_target.head()","695f6fc9":"merged_test_data = test_data.merge(test_target[['app_id', 'product']], on='app_id')","5208b980":"merged_train_data.to_csv('.\/merged_train_data.csv', index=None)\nmerged_test_data.to_csv('.\/merged_test_data.csv', index=None)","d314480e":"## 4. \u0421\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\n---\n\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u0435\u0440\u043d\u0435\u043b\u0430\u0445 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e 'reduce_mem_usage_df'","c1660fe1":"\u041d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u0443 \u043d\u0430\u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043e 16\u0413\u0431 (\u043d\u043e \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 python \u0447\u0435\u0440\u0435\u0437 docker \u043c\u0435\u043d\u0435\u0435 12\u0413\u0411). \u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043d\u0435 \u0443\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f - \u043d\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c RAM \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 - \u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e. \u041f\u0430\u0440\u0442\u0438\u0446\u0438\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e  \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0435\u0433\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u0434\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438 (\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u043e\u043b\u044e `app_id`). \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u043a\u0443\u0441\u043a\u0430\u043c\u0438, \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0444\u0440\u0435\u0439\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0414\u043b\u044f \u044d\u0442\u0438\u0445 \u0446\u0435\u043b\u0435\u0439 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e `utils.read_parquet_dataset_from_local`.  \n\u041f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 4,5 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0421 \u0443\u0447\u0435\u0442\u043e\u043c 50 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 5 \u043c\u0438\u043d\u0443\u0442.","e0b2b982":"## 3.2 \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0440\u0435\u0439\u043d\u0430","ecd7ff51":"### \u0414\u0438\u043f\u043b\u043e\u043c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430\n\n#### \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430\n\u041a\u0435\u0440\u043d\u0435\u043b 2 \u0438\u0437 5 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 ML (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 21.04.2021)\n---\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n## 1.1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","1c7606ec":"## 1.2. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","c245dae1":"# 2. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","e1a60bdc":"# 3. \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445\n---\n## 3.1 \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u044b\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Parquet. \u042d\u0442\u043e \u043a\u0440\u0430\u0439\u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u0436\u0430\u0442\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c. \u041e\u0434\u043d\u0430\u043a\u043e \u0434\u043b\u044f \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 pandas.DataFrame. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u0438. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u043d\u0443 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044e \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0438 \u043e\u0446\u0435\u043d\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e RAM \u043e\u043d\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442.","f0db55c9":"## 3.3 \u0418\u043c\u043f\u043e\u0440\u0442 \u0438 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u0430","c6035396":"# 5. \u041c\u0435\u0440\u0434\u0436\u0438\u043d\u0433 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c product","723b92bb":"\u041e\u043f\u044b\u0442\u043d\u044b\u043c \u043f\u0443\u0442\u0435\u043c \u0431\u044b\u043b\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0447\u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u043f\u0435\u0440\u0435\u0432\u0430\u0440\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043a\u0430 \u0437\u0430 \u043e\u0434\u043d\u0443 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e = 5 ","90a83644":"# 6. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432"}}