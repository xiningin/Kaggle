{"cell_type":{"70a842a0":"code","6df2bbe6":"code","0ce6f3dd":"code","5022ef3d":"code","7622ea87":"code","311799de":"code","ac74ada2":"code","22500456":"code","544e7e55":"code","c83f3b3d":"code","eb44156c":"code","6e224235":"markdown","d4fc3860":"markdown","14ff6a7f":"markdown","c932c0f3":"markdown"},"source":{"70a842a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport plotly.express as px\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6df2bbe6":"df = pd.read_csv(\"\/kaggle\/input\/2019-coronavirus-dataset-01212020-01262020\/2019_nC0v_20200121_20200126_cleaned.csv\")\ndf.head()","0ce6f3dd":"data=df.drop('Unnamed: 0' , axis=1)\ndata.shape","5022ef3d":"data.isna().sum() ","7622ea87":"import plotly.graph_objects as go\nrb2=data.groupby('Country')['Confirmed'].sum().reset_index()\n\nfig = go.Figure(data=go.Choropleth(\n    locations=rb2['Country'], # Spatial coordinates\n    z = rb2['Confirmed'].astype(float), \n    locationmode = 'country names',\n    colorscale = 'reds',\n))\n\nfig.update_layout(\n    title_text = 'Number of confirmed affected people per country',\n)\n\nfig.show()","311799de":"v= pd.pivot_table(data,index=[\"Province\/State\"] ,aggfunc=np.sum).reset_index()\nv['sum']=v['Confirmed'] + v['Suspected']\n\nv1=v.sort_values(by='sum', ascending=False).head(5)\nmals=v1['Province\/State']\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=mals, y=v1['Confirmed']),\n    go.Bar(name='Deaths', x=mals, y=v1['Deaths']),\n    go.Bar(name='Recovered', x=mals, y=v1['Recovered']) ,\n    go.Bar(name='Suspected', x=mals, y=v1['Suspected']) \n\n])\n\n# Change the bar mode\nfig.update_layout(barmode='stack', title ='Top 5 highest touched zones ')\nfig.show()","ac74ada2":"p=v.sort_values(by='sum', ascending=True).iloc[1:4,:] #i excluded Tipot because it got 0 everywhere .. smh\npx.scatter(p, x='Deaths', y='Confirmed' , color='Recovered',facet_col='Province\/State' , title=' 3 lowest touched zones ' )","22500456":"rb=data.groupby('Date last updated')['Confirmed'].sum().reset_index()\nrb1=data.groupby('Date last updated')['Deaths'].sum().reset_index()\nnn=pd.merge(rb1,rb, on='Date last updated', how='inner')\npx.scatter(nn , x='Date last updated', y='Confirmed', size='Confirmed' , color='Deaths' , title='Dates review'  )\n","544e7e55":"import plotly.graph_objects as go\nrb0=data.groupby('Date last updated')['Recovered'].sum().reset_index()\npx.line(rb0 , x='Date last updated', y='Recovered', title='Recovered people per period')","c83f3b3d":"r0=data.groupby('Country')['Recovered'].sum().reset_index().max()\nprint(r0[0],'is the country with most recovered cases:  ',r0[1]  ) ","eb44156c":"import plotly.graph_objects as go\na=data.loc[df.Confirmed == max(data.Confirmed)]\nmals=a['Date last updated']\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=mals, y=a['Confirmed']),\n    go.Bar(name='Deaths', x=mals, y=a['Deaths']) \n])\n# Change the bar mode\nfig.update_layout(barmode='stack', title ='highest Confirmed cases ',)\nfig.show()\n","6e224235":"52 death cases was also the highest number of death reached.","d4fc3860":"#to_be_continued\n","14ff6a7f":"****HOPE ULL ENJOY IT AND UPVOOOOOTE ****","c932c0f3":"we can see that Africa and Europe except for France haven't been affected by this virus and that Mainland China\t is the most affected country followed by the United states."}}