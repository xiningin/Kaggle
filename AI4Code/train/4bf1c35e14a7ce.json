{"cell_type":{"ac2c5280":"code","b4676a69":"code","cc3f5aa1":"code","2b2ae274":"code","46cb7b45":"code","50ca2035":"code","f7377592":"code","d0aa73c2":"code","db1a301e":"code","ac993001":"code","fd17bafc":"code","f45be06a":"code","d146bb42":"code","4e3b53a9":"code","3f88715d":"code","3f6a9ff1":"code","6b88fcc5":"code","6beebd40":"code","4239425a":"code","2d8c900f":"code","0360e57b":"code","f88a1a9c":"code","244a193e":"code","75242185":"code","5c1eeb39":"code","26f962a7":"code","e1659df9":"code","87d7fb84":"code","08fc4493":"code","ad0be27b":"code","a6d593e2":"code","09dbcea9":"code","83b7670c":"code","f1db21c9":"code","8851dc6d":"code","d1a7d172":"code","1b3cf9ed":"code","b047b1af":"code","1b4403f0":"code","cfe8316b":"code","92ad9842":"code","92cbfc0c":"code","b8365ca8":"code","f4bd86c7":"code","32854186":"code","17949273":"code","43075d8e":"code","85f31673":"code","8d71933f":"code","03fbf4b9":"code","6c1bd567":"code","2bb5681c":"code","67ef7eb0":"code","3f18894c":"code","6ab2d570":"code","980d6bcd":"code","9ca37519":"code","f5e1bc06":"code","aa0eb4ed":"code","ab29e13c":"code","61ef0ffe":"code","6dd36ec4":"code","e299c1c3":"code","5d3fe2e1":"code","f13d1109":"code","fb2679d5":"code","6193bb87":"code","7ca627c0":"code","47db3443":"code","1e58db51":"code","0228dd7d":"code","561ae3e1":"code","1f5c5770":"code","ab2471ce":"code","e1c2041f":"code","f4fb4a24":"code","8496688d":"code","fe776abf":"markdown","4b23d96d":"markdown","d03e5b69":"markdown","be098337":"markdown","e179d780":"markdown","75665dda":"markdown","67c60bf5":"markdown","97e5e7b1":"markdown","8c2f598b":"markdown","b539b42f":"markdown","1f3506c3":"markdown","f52f83a5":"markdown","5228795e":"markdown","41d13f70":"markdown","247f180e":"markdown","0232aa98":"markdown","5b30016c":"markdown","8bf6529b":"markdown","913198ba":"markdown","2e2d329b":"markdown","00a31149":"markdown","b19b276e":"markdown","9e962795":"markdown","9620ee56":"markdown","74dfdc7b":"markdown","1c4a94d0":"markdown","7bc41407":"markdown","814d9da2":"markdown","fe6b55cb":"markdown","c24d493a":"markdown","275a4736":"markdown","1151f010":"markdown","ba1dd462":"markdown","97756e07":"markdown","3eb427f1":"markdown","5189a6ed":"markdown","9e2f8aff":"markdown","b96a0de5":"markdown","f354f02e":"markdown","5aecfdfd":"markdown","f08bd40f":"markdown"},"source":{"ac2c5280":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, IsolationForest\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import ExtraTreeRegressor, DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nimport warnings\n\nwarnings.filterwarnings('ignore')","b4676a69":"def preprocess_street(x):\n    return x.strip()=='Pave'\n\ndef preprocess_centralair(x):\n    return x.strip()=='Y'\n\ndef preprocess_alley(x):\n    if pd.isna(x):\n        return 0\n    if x.strip()=='Grvl':\n        return -1\n    \n    return 1\n\nlandslope_map = {'Gtl': 0, 'Mod':1, 'Sev': 2}\n\npaveddrive_map = {'N': 0, 'P': 1, 'Y': 2}\n\nlotshape_map = {'IR3': 0, 'IR2': 1, 'IR1': 2, 'Reg': 3}\n\nlandcontour_map = {'Low': 0, 'HLS': 1, 'Bnk': 2, 'Lvl': 3}\n\ngeneral_map = {np.nan: -1, 'Po': 0, 'Fa': 1, 'TA': 2, 'Gd': 3, 'Ex': 4}\n\ngaragefinish_map = {np.nan: 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}\n\nbsmtexposure_map = {np.nan: 0, 'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4}\n\nbsmtfintype_map = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, np.nan: 0}\n\nfunctional_map = {'Typ': 8, 'Min1': 7, 'Min2': 6, 'Mod': 5, 'Maj1': 4, 'Maj2': 3, 'Sev': 2, 'Sal': 1}\n\ndef preprocess_test(test):\n    df = test.copy()\n    df['Street'] = df['Street'].apply(preprocess_street)\n    df.drop('Utilities', axis=1, inplace=True)\n    df['CentralAir'] = df['CentralAir'].apply(preprocess_centralair)\n    df['Alley'] = df['Alley'].apply(preprocess_alley)\n    df['LandSlope'] = df['LandSlope'].map(landslope_map)\n    df['PavedDrive'] = df['PavedDrive'].map(paveddrive_map)\n    df['LotShape'] = df['LotShape'].map(lotshape_map)\n    df['FireplaceQu'] = df['FireplaceQu'].map(general_map)\n    df['HeatingQC'] = df['HeatingQC'].map(general_map)\n    df['BsmtCond'] = df['BsmtCond'].map(general_map)\n    df['BsmtQual'] = df['BsmtQual'].map(general_map)\n    df['BsmtExposure'] = df['BsmtExposure'].map(bsmtexposure_map)\n    df['PoolQC'] = df['PoolQC'].map(general_map)\n    df['GarageQual'] = df['GarageQual'].map(general_map)\n    df['GarageCond'] = df['GarageCond'].map(general_map)\n    df['GarageFinish'] = df['GarageFinish'].map(garagefinish_map)\n    df['KitchenQual'] = df['KitchenQual'].map(general_map)\n    df['ExterCond'] = df['ExterCond'].map(general_map)\n    df['ExterQual'] = df['ExterQual'].map(general_map)\n    df['LandContour'] = df['LandContour'].map(landcontour_map)\n    df['BsmtFinType1'] = df['BsmtFinType1'].map(bsmtfintype_map)\n    df['BsmtFinType2'] = df['BsmtFinType2'].map(bsmtfintype_map)\n    df['Functional'] = df['Functional'].map(functional_map)\n    df = pd.concat([df.drop('SaleCondition', axis=1), pd.get_dummies(df['SaleCondition'], prefix='SaleCondition')], axis=1)\n    numerical_cols = []\n    for col in df.columns:\n        if col!='Id' and df[col].dtype!='object':\n            numerical_cols.append(col)\n            \n    return np.array(df[numerical_cols].fillna(-999))\n\n\ndef evaluate_model(model, X_train, y_train, rkf, y_scaler):\n    rmsles = []\n    models = []\n    for train_idx, val_idx in rkf.split(X_train):\n        model.fit(X_train[train_idx], y_train[train_idx])\n        y_pred = model.predict(X_train[val_idx])\n        y_pred = y_scaler.inverse_transform(y_pred.reshape(-1,1)).clip(0, np.inf)\n        y_true = y_scaler.inverse_transform(y_train[val_idx].reshape(-1,1))\n        rmsle = np.sqrt(mean_squared_log_error(y_true, y_pred))\n        rmsles.append(rmsle)\n        models.append(model)\n        \n    print(\"RMSLE: {:.5f} +- {:.5f}\".format(np.mean(rmsles), np.std(rmsles)))\n    return models","cc3f5aa1":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","2b2ae274":"train.head()","46cb7b45":"train.info()","50ca2035":"categocial_features = []\nfor col in train.columns:\n    if train[col].dtype=='object':\n        categocial_features.append((col, len(train[col].unique())))\n        \nsorted(categocial_features, key=lambda k: k[1])","f7377592":"train['Street'].value_counts()","d0aa73c2":"train['Street'].isna().sum()","db1a301e":"train['Street'] = train['Street'].apply(preprocess_street)","ac993001":"train['Utilities'].value_counts()","fd17bafc":"train['Utilities'].isna().sum()","f45be06a":"train.drop('Utilities', axis=1, inplace=True)","d146bb42":"train['CentralAir'].value_counts()","4e3b53a9":"train['CentralAir'].isna().sum()","3f88715d":"train['CentralAir'] = train['CentralAir'].apply(preprocess_centralair)","3f6a9ff1":"train['Alley'].value_counts()","6b88fcc5":"train['Alley'].isna().sum()","6beebd40":"sns.boxplot(x=train['Alley'].fillna('NaN'), y=train['SalePrice'])","4239425a":"train['Alley'] = train['Alley'].apply(preprocess_alley)","2d8c900f":"train['LandSlope'].value_counts()","0360e57b":"train['LandSlope'] = train['LandSlope'].map(landslope_map)","f88a1a9c":"train['PavedDrive'].value_counts()","244a193e":"train['PavedDrive'] = train['PavedDrive'].map(paveddrive_map)","75242185":"train['LotShape'].value_counts()","5c1eeb39":"train['LotShape'] = train['LotShape'].map(lotshape_map)","26f962a7":"train['LandContour'].value_counts()","e1659df9":"train['LandContour'] = train['LandContour'].map(landcontour_map)","87d7fb84":"train['ExterQual'].value_counts()","08fc4493":"train['ExterQual'] = train['ExterQual'].map(general_map)","ad0be27b":"train['ExterCond'].value_counts()","a6d593e2":"train['ExterCond'] = train['ExterCond'].map(general_map)","09dbcea9":"train['KitchenQual'] = train['KitchenQual'].map(general_map)","83b7670c":"train['GarageFinish'].value_counts()","f1db21c9":"train['GarageFinish'].isna().sum()","8851dc6d":"train['GarageFinish'] = train['GarageFinish'].map(garagefinish_map)","d1a7d172":"train['GarageCond'].value_counts()","1b3cf9ed":"train['GarageCond'] = train['GarageCond'].map(general_map)","b047b1af":"train['GarageQual'].value_counts()","1b4403f0":"train['GarageQual'] = train['GarageQual'].map(general_map)","cfe8316b":"train['PoolQC'].value_counts()","92ad9842":"train['PoolQC'] = train['PoolQC'].map(general_map)","92cbfc0c":"train['BsmtQual'].value_counts()","b8365ca8":"train['BsmtQual'] = train['BsmtQual'].map(general_map)","f4bd86c7":"train['BsmtCond'].value_counts()","32854186":"train['BsmtCond'] = train['BsmtCond'].map(general_map)","17949273":"train['BsmtExposure'].value_counts()","43075d8e":"train['BsmtExposure'] = train['BsmtExposure'].map(bsmtexposure_map)","85f31673":"train['HeatingQC'].value_counts()","8d71933f":"train['HeatingQC'] = train['HeatingQC'].map(general_map)","03fbf4b9":"train['FireplaceQu'].value_counts()","6c1bd567":"train['FireplaceQu'] = train['FireplaceQu'].map(general_map)","2bb5681c":"train['SaleCondition'].value_counts()","67ef7eb0":"train['SaleCondition'].isna().sum()","3f18894c":"sns.boxplot(y='SalePrice', x='SaleCondition', data=train)","6ab2d570":"train = pd.concat([train.drop('SaleCondition', axis=1), pd.get_dummies(train['SaleCondition'], prefix='SaleCondition')], axis=1)","980d6bcd":"train['BsmtFinType1'] = train['BsmtFinType1'].map(bsmtfintype_map)\ntrain['BsmtFinType2'] = train['BsmtFinType2'].map(bsmtfintype_map)","9ca37519":"train['Functional'] = train['Functional'].map(functional_map)","f5e1bc06":"import scipy.cluster.hierarchy as spc\n\ncorr = train.corr().values\n\npdist = spc.distance.pdist(corr)\nlinkage = spc.linkage(pdist, method='complete')\nidx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')\n\ncol_to_cluster = {}\n\nfor i,col in enumerate(train.corr().columns):\n    \n    col_to_cluster[col] = idx[i]","aa0eb4ed":"fig, ax = plt.subplots(figsize=[20,20])\nsns.heatmap(train[sorted(col_to_cluster, key=lambda k: col_to_cluster[k])].corr(),\n            annot=True, cbar=False, cmap='Blues', fmt='.1f')","ab29e13c":"numerical_cols = []\nfor col in train.columns:\n    if col!='Id' and train[col].dtype!='object' and col!='SalePrice':\n        numerical_cols.append(col)","61ef0ffe":"X_df = train[numerical_cols].fillna(-999)","6dd36ec4":"X_train = np.array(X_df)\nX_test = preprocess_test(test)","e299c1c3":"X_scaler = StandardScaler()\nX_train = X_scaler.fit_transform(X_train)\nX_test = X_scaler.transform(X_test)","5d3fe2e1":"y_train = np.array(train['SalePrice'], ndmin=2).reshape(-1,1)","f13d1109":"y_scaler = MinMaxScaler()\ny_train = y_scaler.fit_transform(y_train)","fb2679d5":"rkf = RepeatedKFold(n_splits=6, n_repeats=5)","6193bb87":"def get_model():\n    nn_model = tf.keras.Sequential([\n        tf.keras.layers.Dense(units=256, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.1),\n        tf.keras.layers.Dense(units=128, activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.1),\n        tf.keras.layers.Dense(units=1, activation='sigmoid')\n    ])\n\n    nn_model.compile(optimizer='adam', loss='msle')\n    return nn_model","7ca627c0":"reg_models = {\n    'RF': RandomForestRegressor(n_estimators=250),\n    'LGB': LGBMRegressor(n_estimators=200),\n    'XGB': XGBRegressor(n_estimators=200, objective='reg:squarederror'),\n    'ADA': AdaBoostRegressor(n_estimators=250),\n    'KNN': KNeighborsRegressor(n_neighbors=7)\n}","47db3443":"all_models = []\nfor model in reg_models:\n    print(model)\n    models = evaluate_model(reg_models[model], X_train, y_train, rkf, y_scaler)\n    all_models += models","1e58db51":"rmsles = []\nnn_models = []\nfor train_idx, val_idx in rkf.split(X_train):\n    nn_model = get_model()\n    nn_model.fit(X_train[train_idx], y_train[train_idx], epochs=30, verbose=0)\n    y_pred = nn_model.predict(X_train[val_idx])\n    y_pred = y_scaler.inverse_transform(y_pred.reshape(-1,1)).clip(0, np.inf)\n    y_true = y_scaler.inverse_transform(y_train[val_idx].reshape(-1,1))\n    rmsle = np.sqrt(mean_squared_log_error(y_true, y_pred))\n    rmsles.append(rmsle)\n    nn_models.append(nn_model)\n    \nprint(\"RMSLE: {:.5f} +- {:.5f}\".format(np.mean(rmsles), np.std(rmsles)))","0228dd7d":"all_models += nn_models","561ae3e1":"X_train_predictions = np.zeros(shape=(X_train.shape[0], len(all_models)))\nfor i, model in enumerate(all_models):\n    X_train_predictions[:, i] = model.predict(X_train).reshape(-1)\n    \nX_test_predictions = np.zeros(shape=(X_test.shape[0], len(all_models)))\nfor i, model in enumerate(all_models):\n    X_test_predictions[:, i] = model.predict(X_test).reshape(-1)","1f5c5770":"models = []\nfor train_idx, val_idx in rkf.split(X_train_predictions):\n    meta_regressor = LinearRegression()\n    meta_regressor.fit(X_train_predictions[train_idx], y_train[train_idx])\n    y_pred = meta_regressor.predict(X_train_predictions[val_idx])\n    y_pred = y_scaler.inverse_transform(y_pred.reshape(-1,1))\n    y_true = y_scaler.inverse_transform(y_train[val_idx].reshape(-1,1))\n    print(\"rmsle = {}\".format(np.sqrt(mean_squared_log_error(y_true, y_pred))))\n    models.append(meta_regressor)","ab2471ce":"y_pred = np.array([model.predict(X_test_predictions) for model in models]).mean(axis=0).reshape(-1,1)","e1c2041f":"y_pred = y_scaler.inverse_transform(y_pred)","f4fb4a24":"sample['SalePrice'] = y_pred","8496688d":"sample.to_csv('sample_submission.csv', index=False)","fe776abf":"### BsmtQual","4b23d96d":"Also an ordinal feature with the relation:\n\n$$\nLow<HLS<Bnk<Lvl\n$$","d03e5b69":"### Functional","be098337":"Just like LandSlope, we have a ordinal relation in this column. We know from data description that:\n\n$$\nN<P<Y\n$$\n\nusing this we can map this feature.","e179d780":"### Submitting to kaggle","75665dda":"### Utilities","67c60bf5":"## Baseline model","97e5e7b1":"### KitchenQual","8c2f598b":"### LandContour","b539b42f":"### LandSlope","1f3506c3":"### BsmtExposure","f52f83a5":"### BsmtFinType1 and BsmtFinType2","5228795e":"### SaleCondition","41d13f70":"### ExterCond","247f180e":"This feature won't help our model at all since we have practically just one value, it is better to just drop it. ","0232aa98":"### GarageQual","5b30016c":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Imports-and-useful-functions\" data-toc-modified-id=\"Imports-and-useful-functions-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Imports and useful functions<\/a><\/span><\/li><li><span><a href=\"#Categorical-columns-features-engineering\" data-toc-modified-id=\"Categorical-columns-features-engineering-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Categorical columns features engineering<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Street\" data-toc-modified-id=\"Street-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Street<\/a><\/span><\/li><li><span><a href=\"#Utilities\" data-toc-modified-id=\"Utilities-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Utilities<\/a><\/span><\/li><li><span><a href=\"#CentralAir\" data-toc-modified-id=\"CentralAir-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;<\/span>CentralAir<\/a><\/span><\/li><li><span><a href=\"#Alley\" data-toc-modified-id=\"Alley-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;<\/span>Alley<\/a><\/span><\/li><li><span><a href=\"#LandSlope\" data-toc-modified-id=\"LandSlope-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;<\/span>LandSlope<\/a><\/span><\/li><li><span><a href=\"#PavedDrive\" data-toc-modified-id=\"PavedDrive-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;<\/span>PavedDrive<\/a><\/span><\/li><li><span><a href=\"#LotShape\" data-toc-modified-id=\"LotShape-2.7\"><span class=\"toc-item-num\">2.7&nbsp;&nbsp;<\/span>LotShape<\/a><\/span><\/li><li><span><a href=\"#LandContour\" data-toc-modified-id=\"LandContour-2.8\"><span class=\"toc-item-num\">2.8&nbsp;&nbsp;<\/span>LandContour<\/a><\/span><\/li><li><span><a href=\"#ExterQual\" data-toc-modified-id=\"ExterQual-2.9\"><span class=\"toc-item-num\">2.9&nbsp;&nbsp;<\/span>ExterQual<\/a><\/span><\/li><li><span><a href=\"#ExterCond\" data-toc-modified-id=\"ExterCond-2.10\"><span class=\"toc-item-num\">2.10&nbsp;&nbsp;<\/span>ExterCond<\/a><\/span><\/li><li><span><a href=\"#KitchenQual\" data-toc-modified-id=\"KitchenQual-2.11\"><span class=\"toc-item-num\">2.11&nbsp;&nbsp;<\/span>KitchenQual<\/a><\/span><\/li><li><span><a href=\"#GarageFinish\" data-toc-modified-id=\"GarageFinish-2.12\"><span class=\"toc-item-num\">2.12&nbsp;&nbsp;<\/span>GarageFinish<\/a><\/span><\/li><li><span><a href=\"#GarageCond\" data-toc-modified-id=\"GarageCond-2.13\"><span class=\"toc-item-num\">2.13&nbsp;&nbsp;<\/span>GarageCond<\/a><\/span><\/li><li><span><a href=\"#GarageQual\" data-toc-modified-id=\"GarageQual-2.14\"><span class=\"toc-item-num\">2.14&nbsp;&nbsp;<\/span>GarageQual<\/a><\/span><\/li><li><span><a href=\"#PoolQC\" data-toc-modified-id=\"PoolQC-2.15\"><span class=\"toc-item-num\">2.15&nbsp;&nbsp;<\/span>PoolQC<\/a><\/span><\/li><li><span><a href=\"#BsmtQual\" data-toc-modified-id=\"BsmtQual-2.16\"><span class=\"toc-item-num\">2.16&nbsp;&nbsp;<\/span>BsmtQual<\/a><\/span><\/li><li><span><a href=\"#BsmtCond\" data-toc-modified-id=\"BsmtCond-2.17\"><span class=\"toc-item-num\">2.17&nbsp;&nbsp;<\/span>BsmtCond<\/a><\/span><\/li><li><span><a href=\"#BsmtExposure\" data-toc-modified-id=\"BsmtExposure-2.18\"><span class=\"toc-item-num\">2.18&nbsp;&nbsp;<\/span>BsmtExposure<\/a><\/span><\/li><li><span><a href=\"#HeatingQC\" data-toc-modified-id=\"HeatingQC-2.19\"><span class=\"toc-item-num\">2.19&nbsp;&nbsp;<\/span>HeatingQC<\/a><\/span><\/li><li><span><a href=\"#FireplaceQu\" data-toc-modified-id=\"FireplaceQu-2.20\"><span class=\"toc-item-num\">2.20&nbsp;&nbsp;<\/span>FireplaceQu<\/a><\/span><\/li><li><span><a href=\"#SaleCondition\" data-toc-modified-id=\"SaleCondition-2.21\"><span class=\"toc-item-num\">2.21&nbsp;&nbsp;<\/span>SaleCondition<\/a><\/span><\/li><li><span><a href=\"#BsmtFinType1-and-BsmtFinType2\" data-toc-modified-id=\"BsmtFinType1-and-BsmtFinType2-2.22\"><span class=\"toc-item-num\">2.22&nbsp;&nbsp;<\/span>BsmtFinType1 and BsmtFinType2<\/a><\/span><\/li><li><span><a href=\"#Functional\" data-toc-modified-id=\"Functional-2.23\"><span class=\"toc-item-num\">2.23&nbsp;&nbsp;<\/span>Functional<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Exploring-the-correlation-between-features\" data-toc-modified-id=\"Exploring-the-correlation-between-features-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Exploring the correlation between features<\/a><\/span><\/li><li><span><a href=\"#Baseline-model\" data-toc-modified-id=\"Baseline-model-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Baseline model<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Submitting-to-kaggle\" data-toc-modified-id=\"Submitting-to-kaggle-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Submitting to kaggle<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","8bf6529b":"### PavedDrive","913198ba":"### Alley","2e2d329b":"### LotShape","00a31149":"### CentralAir","b19b276e":"### GarageFinish","9e962795":"We can see that a house having an alley does not affect the price to much, but given that it has an alley if it is pave than the price is higher, if it is Gtvl than the price tends to be lower.","9620ee56":"This feature can also be easily encoded as 1 or 0.","74dfdc7b":"The street feature can be easily encoded as is pave? 1 else 0.","1c4a94d0":"### FireplaceQu","7bc41407":"### PoolQC","814d9da2":"Also an ordinal feature with the relation:\n\n$$\nIR3<IR2<IR1<Reg\n$$","fe6b55cb":"## Exploring the correlation between features","c24d493a":"## Imports and useful functions","275a4736":"Since we have a lot of features, we are going to focus primarly on the categorical ones.\n\nLet's first find those features and how many unique values they have.","1151f010":"### HeatingQC","ba1dd462":"Let's one-hot encode this feature","97756e07":"This feature can be considered ordinal since we know the relation: \n$$\nGtl<Mod<Sev\n$$\n\nLet's the preprocess this columns as Gtl=0, Mod=1, Sev=2.","3eb427f1":"From data description, we can use the same map as ExterQual.","5189a6ed":"### GarageCond","9e2f8aff":"From data description, it is also ordinal with:\n\n$$\nPo<Fa<TA<Gd<Ex\n$$","b96a0de5":"### BsmtCond","f354f02e":"### Street","5aecfdfd":"### ExterQual","f08bd40f":"## Categorical columns features engineering"}}