{"cell_type":{"5ce8c278":"code","68baf519":"code","85fc4429":"code","11a46f38":"code","8b8c2c82":"code","62a1b0c4":"code","1390a321":"code","dd13f6ae":"code","896083b3":"code","44e16a83":"code","55e9d35b":"code","60d9f039":"code","0bfce6b0":"code","601f41a4":"code","5c88147d":"code","29cb45d8":"code","f7204de3":"code","f79549d6":"code","ea13ae37":"code","6a102b54":"code","5ce6a8e3":"code","cb790a90":"code","ddeb3000":"code","860c1391":"code","96944b49":"code","d1cddb3d":"code","35c391a1":"code","46f644fc":"code","9d05f9af":"code","8a6e1deb":"code","3cc27b4b":"code","77a88a65":"code","7daec225":"code","28488887":"code","8eebd946":"code","27eaae31":"code","f319b5c7":"markdown","0b7c3d4b":"markdown","58de15b9":"markdown","09fc905a":"markdown","33fe86d3":"markdown","e0e4cd86":"markdown"},"source":{"5ce8c278":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68baf519":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","85fc4429":"Train = pd.read_csv(\"..\/input\/bike-sharing-demand\/train.csv\")\nTest = pd.read_csv(\"..\/input\/bike-sharing-demand\/test.csv\")","11a46f38":"Train.head()","8b8c2c82":"Test.head()","62a1b0c4":"Train.describe().T","1390a321":"Test.describe().T","dd13f6ae":"Train.info()","896083b3":"Test.info()","44e16a83":"# Correlation between the numerical columns\nTrain.loc[:, Train.dtypes != np.object].corr()","55e9d35b":"fig, ax = plt.subplots(2, 2, figsize=(30, 30))\n\nsns.countplot(data = Train, x = 'season', ax = ax[0,0]);\nax[0,0].set_ylabel(\"Count\", size = 30)\nax[0,0].set_xlabel(\"season\", size = 30)\n\n\n\nsns.countplot(data = Train, x = 'holiday', ax = ax[0,1]);\nax[0,1].set_ylabel(\"Count\", size = 30)\nax[0,1].set_xlabel(\"holiday\", size = 30)\n\nsns.countplot(data = Train, x = 'workingday', ax = ax[1,0]);\nax[1, 0].set_ylabel(\"Count\", size = 30)\nax[1, 0].set_xlabel(\"workingday\", size = 30)\n\n# plt.xticks(rotation = 90, size = 25);\n# plt.yticks(size = 20);\n# plt.tick_params(axis='both', which='major', fontsize=50)\n# plt.xticks(fontsize=100)\n# ax[0,0].set_xticklabels(fontsize=30)\n# plt.yticks(fontsize=50)\n# plt.xticks(fontsize=50)\n\n# ax.tick_params(direction='out', length=6, width=2, colors='r',\n#                grid_color='r', grid_alpha=0.5)\nplt.show()","60d9f039":"Columns = ['weather', 'temp','atemp', 'humidity', 'windspeed']\nsns.pairplot(Train, vars = Columns, diag_kind = 'kde')","0bfce6b0":"Train['datetime'] = pd.to_datetime(Train['datetime'])\n\nTrain[\"year\"] = Train[\"datetime\"].dt.year\nTrain[\"hour\"] = Train[\"datetime\"].dt.hour\nTrain[\"dayofweek\"] = Train[\"datetime\"].dt.dayofweek","601f41a4":"Test['datetime'] = pd.to_datetime(Test['datetime'])\n\nTest[\"year\"] = Test[\"datetime\"].dt.year\nTest[\"hour\"] = Test[\"datetime\"].dt.hour\nTest[\"dayofweek\"] = Test[\"datetime\"].dt.dayofweek\n","5c88147d":"# Train['ActiveHours']= Train['hour'].isin([8,17,18,19,20,21])\n# Train['InactiveHour']= Train['hour'].isin([0,1,2,3,4])","29cb45d8":"# Test['ActiveHours']= Test['hour'].isin([8,17,18,19,20,21])\n# Test['InactiveHour']= Test['hour'].isin([0,1,2,3,4])","f7204de3":"# Train.drop([\"datetime\", \"windspeed\", \"casual\", \"registered\"], axis = 1, inplace=True)\n# Test.drop([\"datetime\", \"windspeed\", ], axis = 1, inplace=True)","f79549d6":"Train.drop([\"datetime\", \"casual\", \"registered\"], axis = 1, inplace=True)\nTest.drop([\"datetime\"], axis = 1, inplace=True)","ea13ae37":"Train.isnull().sum()","6a102b54":"Train.duplicated().sum()","5ce6a8e3":"Train.drop_duplicates(inplace = True)","cb790a90":"Test.isnull().sum()","ddeb3000":"Test.duplicated().sum()","860c1391":"# Test.drop_duplicates(inplace = True)","96944b49":"sns.relplot(data = Train, x = 'hour', y = 'count', kind = 'line')","d1cddb3d":"sns.catplot(data = Train, x = 'hour', y = 'count', kind = 'bar')\nplt.show()","35c391a1":"sns.boxplot(data = Train, x = 'hour', y = 'count')","46f644fc":"fig, ax = plt.subplots(1, 1, figsize = (20, 15))\nsns.boxplot(data = Train, x = 'temp', y = 'count')\n\nplt.xticks(rotation = 90, size = 25);\nplt.yticks(size = 20);\nplt.ylabel(\"Count\", size = 25)\nplt.xlabel(\"temp\", size = 25)\nplt.show()","9d05f9af":"Y = Train['count']\nX = Train.copy()\nX.drop('count', axis = 1, inplace = True)","8a6e1deb":"from sklearn.model_selection import train_test_split\nX_Train, X_Valid, Y_Train, Y_Valid = train_test_split(X, Y, train_size=0.9, test_size=0.1, random_state=0)","3cc27b4b":"import lightgbm as lgb\nhyperparameters = { 'colsample_bytree': 0.725,  'learning_rate': 0.013,\n                    'num_leaves': 56, 'reg_alpha': 0.754, 'reg_lambda': 0.071, \n                    'subsample': 0.523, 'n_estimators': 1093}\n\nmodel = lgb.LGBMRegressor(**hyperparameters)\nmodel.fit(X_Train, Y_Train)\npreds1 = model.predict(X_Valid)\n\nhyperparameters = { 'colsample_bytree': 0.639,  'learning_rate': 0.011,\n                    'num_leaves': 30, 'reg_alpha': 0.351, 'reg_lambda': 0.587,\n                   'subsample': 0.916, 'n_estimators': 2166}\nmodel = lgb.LGBMRegressor(**hyperparameters, )\nmodel.fit(X_Train, Y_Train)\npreds2 = model.predict(X_Valid)\n","77a88a65":"from sklearn import metrics\n# print('Coefficients: \\n', model.coef_)\nprint(\"MAE: \", metrics.mean_absolute_error(Y_Valid, preds1))\n# print(\"MAPE: \", metrics.mean_absolute_percentage_error(Y_Valid, ExtraTreesPrediction))\n\n\n\n# print(\"MSLE: %.2f\" % metrics.mean_squared_log_error(Y_Valid, preds1))\n# print(\"RMSE:\", np.sqrt(metrics.mean_squared_error(y_valid, preds_valid)))\n\nprint('Variance score (r2): %.2f' % metrics.r2_score(Y_Valid, preds1))\n# print(\"r2 score:\", metrics.r2_score(y_valid, preds_valid))","7daec225":"final_predictions = model.predict(Test)","28488887":"Submission = pd.read_csv(\"..\/input\/bike-sharing-demand\/sampleSubmission.csv\")\nSubmission.head()","8eebd946":"Submission['count'] = np.abs(final_predictions)","27eaae31":"Submission.to_csv(\"sub5.csv\", index = False)","f319b5c7":"## Data exploration","0b7c3d4b":"### Feature engineering","58de15b9":"## Data preparation","09fc905a":"## Model","33fe86d3":"## EDA","e0e4cd86":"## Data reading"}}