{"cell_type":{"9e26b4ed":"code","eef46557":"code","17d206ad":"code","8cc0a5f9":"code","a3fa2a63":"code","a3b78846":"code","47b1fa37":"code","b5e04b8f":"code","914c15c8":"code","4cee40d9":"code","cd2a9cdc":"code","67ab2e23":"code","a45bc50d":"code","5bc09082":"code","ba680ee5":"code","8bc99696":"code","f3d8d53e":"code","02d6163e":"code","1eeb40c3":"code","adf2362d":"code","edd6a2cf":"code","70f8e864":"code","859ac087":"code","be1d0c8b":"code","c9271338":"code","808c0db3":"code","c09c5564":"code","fde57699":"code","68ffc950":"code","19228ec6":"code","081ba72a":"code","10ae109c":"markdown"},"source":{"9e26b4ed":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport statsmodels.api as sm\n","eef46557":"path = 'covid19-global-forecasting-week-5'\npath = '..\/input\/covid19-global-forecasting-week-5'\ntrain = pd.read_csv(path+'\/train.csv')\ntest = pd.read_csv(path+'\/test.csv')","17d206ad":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])\n\ndrop = ['County','Province_State']\ntrain = train.drop(drop, axis=1)\ntest = test.drop(drop, axis=1)\n\ntest = test.rename(columns= {'ForecastId':'Id'})\n\ntrain_len = train.shape[0]\ndf = pd.concat([train,test])","8cc0a5f9":"train.shape, test.shape, df.shape","a3fa2a63":"train.isnull().sum()","a3b78846":"train.head()","47b1fa37":"train.describe()","b5e04b8f":"#plt.plot_date(x=train['Date'],y=train['TargetValue'])","914c15c8":"test.isnull().sum()\/test.shape[0]","4cee40d9":"test['Date'].describe()","cd2a9cdc":"train['Date'].describe()","67ab2e23":"train.tail()","a45bc50d":"train['Target'].value_counts()","5bc09082":"test['Target'].value_counts()","ba680ee5":"def date_time_feature(df,col):\n    df[col+'_month'] = df['Date'].dt.month\n    df[col+'_day'] = df['Date'].dt.day\n    df[col+'_week'] = df['Date'].dt.week\n    df[col+'_weekofyear'] = df['Date'].dt.weekofyear\n    df['Date'] = df['Date'].dt.strftime('%Y%m%d').astype(int)\n    return df","8bc99696":"col= 'Date'\ndf = date_time_feature(df,col)","f3d8d53e":"from sklearn.preprocessing import LabelEncoder","02d6163e":"def encode(df,col):\n    \n    le = LabelEncoder()\n    for c in col:\n        df[c] = le.fit_transform(df[c])\n    return df","1eeb40c3":"col =['Country_Region','Target']\ndf = encode(df, col)\n","adf2362d":"col = ['Country_Region','Date_month','Date_day','Date_week','Date_weekofyear']\ndf = pd.get_dummies(data=df,columns=col,drop_first=True)\n","edd6a2cf":"df.head()","70f8e864":"df1 = df.drop(['Date','Id','TargetValue'],axis=1)","859ac087":"X_train = df1[:train_len]\nX_test = df1[train_len:]\ny_train = df.iloc[:train_len]['TargetValue']","be1d0c8b":"X_train = X_train.reset_index(drop = True)\nX_test = X_test.reset_index(drop = True)\ny_train = y_train.reset_index(drop = True)","c9271338":"from sklearn.model_selection import RandomizedSearchCV","808c0db3":"# param = {\n#     'learning_rate':np.linspace(0.001,0.5),\n#     'n_estimators':np.arange(10,500),\n# }","c09c5564":"# rsCV  = RandomizedSearchCV(model,param_distributions=param, n_iter=3,n_jobs= -1)\n# rsCV.fit(X_train,y_train)","fde57699":"import lightgbm as lgb","68ffc950":"def lgb_model(q):\n    model = lgb.LGBMRegressor(\n        objective = 'quantile',\n        alpha = q,\n        learning_rate = 0.05,\n        n_estimators = 1000,\n        min_data_in_leaf=5,\n        num_leaves = 100000,\n        bagging_fraction=0.95,\n        feature_fraction = 0.95,\n        max_depth = 10,\n        random_state = 12,\n        num_threads = -1\n    )\n    model.fit(X_train,y_train)\n    score = model.score(X_train,y_train)\n    print(f'quantile {q} score: {round(score,3)}')\n    y_pred = model.predict(X_test)\n    return y_pred","19228ec6":"sub = pd.DataFrame()\nsub['Id']  = test.Id\nsub['q0.05'] = lgb_model(0.05)\nsub['q0.5'] = lgb_model(0.5)\nsub['q0.95'] = lgb_model(0.95)","081ba72a":"sub=pd.melt(sub, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","10ae109c":"### Model"}}