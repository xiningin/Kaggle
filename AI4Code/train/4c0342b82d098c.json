{"cell_type":{"dec5d1e7":"code","85c6786e":"code","287af89a":"code","7c0530c2":"code","60ada7f2":"code","8e94e66d":"code","e826f4fb":"code","ea5e5175":"code","31874df7":"code","7879e6fa":"code","b5edcaab":"code","7633d26e":"code","aa08e6de":"code","08871f96":"code","4224c549":"code","d3abb418":"code","5f4a92cd":"code","2ad9ca13":"code","0f2d4391":"code","c8183eaa":"code","60e94c70":"code","f7695fa8":"code","e86288bf":"code","541dca33":"code","d2a4c754":"code","de72092c":"code","84692aec":"code","6f17f4e1":"code","14508a4a":"markdown","1de9a14e":"markdown","57db393d":"markdown","05c37872":"markdown","9e37235c":"markdown"},"source":{"dec5d1e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85c6786e":"import numpy as np\nimport keras\nfrom keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import MaxPooling2D, AveragePooling2D, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model\nfrom keras.preprocessing import image\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nimport keras.backend as K\nK.set_image_data_format(\"channels_last\")\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport math\nimport h5py\nimport tensorflow as tf\nfrom tensorflow.keras import callbacks\n\n\n%matplotlib inline","287af89a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport cv2 \n\nemotions = ['Negativity', 'Happy', 'Sad', 'Surprise', 'Neutral']\nclasses = len(emotions)\nprint(classes)","7c0530c2":"import pandas as pd\nimport numpy as np\nimport cv2\n\n#with tpu_strategy.scope():\n#     data = pd.read_csv(r'\/kaggle\/input\/data1.csv',names = ['image','image2'])\ndef1 = pd.read_csv(r'..\/input\/fe2013landmarks\/labeldata1.csv',names = ['label'])","60ada7f2":"def1[\"label\"] = def1.iloc[:,0:]\ndef1\ndef1.replace(to_replace ={'label': {1:0}}, inplace = True)\ndef1.replace(to_replace ={'label': {2:0}}, inplace = True)\ndef1.replace(to_replace ={'label': {3:1}}, inplace = True)\ndef1.replace(to_replace ={'label': {4:2}}, inplace = True)\ndef1.replace(to_replace ={'label': {5:3}}, inplace = True)\ndef1.replace(to_replace ={'label': {6:4}}, inplace = True)\n","8e94e66d":"train_set_x_orig=[]\n#with tpu_strategy.scope():\nfor id in range(24942): \n    image = cv2.imread('..\/input\/ldzipp\/landmarks2\/'+str(id)+'.png') \n    image = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n    image = cv2.resize(image,(48,48))\n    array = np.array(image)\n    print(array.shape)\n    train_set_x_orig.append(array)","e826f4fb":"train_set_x_orig = np.array(train_set_x_orig)\nprint(train_set_x_orig.shape)","ea5e5175":"train_set_x_orig = train_set_x_orig.reshape((24942,48,48,1))\nprint(train_set_x_orig.shape)","31874df7":"train_set_y_orig = np.array(def1.label).astype(int)\nprint(train_set_y_orig.shape[0])\nprint(train_set_y_orig)","7879e6fa":"from sklearn.model_selection import train_test_split\ntrain_set_x_orig, test_set_x_orig, train_set_y_orig, test_set_y_orig = train_test_split(train_set_x_orig, train_set_y_orig,shuffle = True, stratify = train_set_y_orig, random_state = 2020, test_size = 0.2 )\nprint(train_set_x_orig.shape)\nprint(test_set_x_orig.shape)\nprint(test_set_x_orig.shape)\nprint(test_set_y_orig.shape)","b5edcaab":"# Normalize image vectors\nX_train = train_set_x_orig\/255\nX_test = test_set_x_orig\/255\n\n# Reshape\nY_train = train_set_y_orig.T\nY_test = test_set_y_orig.T\n\n\nprint (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))","7633d26e":"from keras.utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = classes)\nY_test = to_categorical(Y_test, num_classes = classes)","aa08e6de":"print(Y_train.shape)\nprint(Y_test.shape)","08871f96":"from keras import regularizers\n#with tpu_strategy.scope():\ndef Moodel1(input_shape):\n   \n    \n    X_input = Input(input_shape)\n    \n    #Block 1 -- conv2d - MaxPooling\n    \n    X = ZeroPadding2D((3,3))(X_input)\n    \n    X = Conv2D(32,(3,3), strides = (1,1), name = 'conv0')(X)\n    X = BatchNormalization(axis=3, name = 'bn0')(X)\n    X = Activation('relu')(X)\n    #X = layers.Dropout(0.2)(X)\n    #MaxPool\n    \n    X = MaxPooling2D((3,3), strides = (1,1), name = 'max_pool_0')(X)\n    \n    \n    #Block2 -- conv2D -- maxpool2D\n    \n    X = Conv2D(64,(3,3), name = 'conv1')(X)\n    X = BatchNormalization(axis=3, name = 'bn1')(X)\n    X = Activation('relu')(X)\n    #X = layers.Dropout(0.2)(X)\n    #MaxPool\n    \n    X= MaxPooling2D((2,2), strides = (2,2), name = 'max_pool_1')(X)\n    \n    \n    #Block3 -- conv2D -- MaxPool2D\n    \n    X = Conv2D(80,(3,3), name =\"conv2\")(X)\n    X = BatchNormalization(axis = 3, name = 'bn2')(X)\n    X = Activation(\"relu\")(X)\n    #X = layers.Dropout(0.2)(X)\n    #MaxPool\n    \n    X = MaxPooling2D((3,3), strides = (1,1), name = 'max_pool_2')(X)\n    \n    \n    #Block4 -- conv2D -- MaxPool2D\n    \n    X = Conv2D(160,(3,3), name =\"conv3\")(X)\n    X = BatchNormalization(axis = 3, name = 'bn3')(X)\n    X = Activation(\"relu\")(X)\n    #X = layers.Dropout(0.2)(X)\n    #MaxPool\n    \n    X = MaxPooling2D((2,2), strides = (2,2), name = 'max_pool_3')(X)\n    \n    \n    #Block5 -- conv2D -- MaxPool2D\n    \n    X = Conv2D(320,(2,2), name =\"conv4\")(X)\n    X = BatchNormalization(axis = 3, name = 'bn4')(X)\n    X = Activation(\"relu\")(X)\n    #X = layers.Dropout(0.2)(X)\n    #MaxPool\n    \n    X = MaxPooling2D((2,2), strides = (2,2), name = 'max_pool_4')(X)\n    \n    #Block6 --flatten --dense\n    \n    X = Conv2D(512,(1,1), name =\"conv5\")(X)\n    X = BatchNormalization(axis = 3, name = 'bn5')(X)\n    X = Activation(\"relu\")(X)\n    \n    X = layers.Dropout(0.5)(X)\n    X = Flatten()(X)\n    X = Dense(100, activation = 'relu', name = 'fc')(X)\n    \n    X = Dense(64, activation = 'relu', name = 'fc2')(X)\n    X = Dense(5, activation = 'softmax', name = 'fc3')(X)\n    \n   \n    \n     #Block5 \n    \n    model = Model(inputs = X_input, outputs = X, name = 'Moodel')\n    \n    return model","4224c549":"# Starting with a high LR would break the pre-trained weights.\nEPOCHS = 120\n#BATCH_SIZE = 16 * tpu_strategy.num_replicas_in_sync # this is 8 on TPU v3-8, it is 1 on CPU and GPU\nBATCH_SIZE = 160\n#LR_START = 0.00001\nLR_START = 0.002\n#LR_MAX = 0.00005 * tpu_strategy.num_replicas_in_sync\n#LR_MAX = 0.00005\nLR_MAX = 0.006\nLR_MIN = 0.001\n#LR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 50\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .96\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","d3abb418":"moodel1 = Moodel1(X_train.shape[1:])","5f4a92cd":"moodel1.summary()","2ad9ca13":"from keras.callbacks import ReduceLROnPlateau, EarlyStopping, TensorBoard, ModelCheckpoint","0f2d4391":"#lr_reducer = ReduceLROnPlateau(monitor='val_loss', factor=0.9, patience=3)\nearly_stopper = EarlyStopping(monitor='val_acc', min_delta=0, patience=6, mode='auto')\ncheckpointer = ModelCheckpoint('weights.hd5', monitor='val_loss', verbose=1, save_best_only=True)","c8183eaa":"print(X_train.shape)","60e94c70":"#history = moodel.fit(X_train,Y_train, epochs = EPOCHS, batch_size=batch_size, verbose = 1, validation_split = 0.4, shuffle=True, callbacks=[lr_reducer, checkpointer, early_stopper])","f7695fa8":"moodel1.compile(optimizer = \"adam\", loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","e86288bf":"history1 = moodel1.fit(X_train,Y_train, epochs = EPOCHS, batch_size=160, verbose = 1, validation_split = 0.4, shuffle=True, callbacks=[lr_callback])","541dca33":"moodel1.evaluate(X_test,Y_test)","d2a4c754":"final_accuracy = history1.history[\"val_accuracy\"][-5:]\nprint(\"FINAL ACCURACY MEAN-5: \", np.mean(final_accuracy))","de72092c":"def display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        #plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","84692aec":"display_training_curves(history1.history['accuracy'][1:], history1.history['val_accuracy'][1:], 'accuracy', 211)\ndisplay_training_curves(history1.history['loss'][1:], history1.history['val_loss'][1:], 'loss', 212)","6f17f4e1":"moodel1.save('Moodelld1_5def.h5')","14508a4a":"import pandas\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n# load dataset\nurl = \"https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/pima-indians-diabetes.data.csv\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = pandas.read_csv(url, names=names)\narray = dataframe.values\nX = array[:,0:8]\nY = array[:,8]\n# prepare configuration for cross validation test harness\nseed = 7\n# prepare models\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10, random_state=seed)\n    cv_results = model_selection.cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","1de9a14e":"history = moodel.fit(X_train,Y_train, epochs = EPOCHS, batch_size=160, verbose = 1, validation_split = 0.2, callbacks = [lr_callback])","57db393d":"learning_rate = 0.001 \nepochs = 100\nbatch_size = 64","05c37872":"history = moodel.fit(X_train,Y_train, epochs = EPOCHS, batch_size=160, verbose = 1, validation_split = 0.2, callbacks = [lr_callback])","9e37235c":"import tensorflow as tf\n# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# instantiating the model in the strategy scope creates the model on the TPU\n"}}