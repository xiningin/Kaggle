{"cell_type":{"b6bfa0e7":"code","51840c35":"code","e0ec1083":"code","392a6eed":"code","d2ad6024":"code","b436f521":"code","14b2b984":"code","795b3cf8":"code","6732a2ce":"code","6d1f5ed9":"code","8aebe47a":"code","e7986224":"code","207d96db":"code","0f5c8833":"code","97953307":"code","85c2975f":"code","b740ac31":"code","e49fff11":"code","0b0385f7":"code","b566622e":"code","733940a9":"code","a7a5e234":"code","dbc8d57a":"code","8cc49562":"code","9e798903":"code","4cca93d8":"code","eadc10f3":"code","f5e1467d":"code","d7b64daa":"code","b6a69aae":"code","1af81c81":"code","422ce8d8":"code","0c7ab61f":"code","df8cc077":"markdown","c06ac4ae":"markdown","e1b5d462":"markdown","36bf2df8":"markdown","4a1e9183":"markdown"},"source":{"b6bfa0e7":"#Uploading all necessary liblaries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport pandas_profiling as pp\n\n#Liblaries for preprocessing\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\n\n#Liblaries for models\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor, BaggingRegressor\n\n#Liblaries for cross validation and model evaluation\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error","51840c35":"#reading the file and looking at the data\ncs = pd.read_csv('\/kaggle\/input\/craigslist-carstrucks-data\/vehicles.csv')\ncs.head(3)","e0ec1083":"#removing unimportant collumns and checking the row count\ncs = cs.drop(columns=['county','url','region','region_url','VIN','image_url','description','lat','long','id','posting_date'])\ncs.shape","392a6eed":"#removing nan rows from the dataset\ncs = cs.dropna()\ncs.shape","d2ad6024":"#creating charts for data understanding\nsns.pairplot(data = cs, diag_kind = 'kde')","b436f521":"#creating chart for overview of price values distribution\nfig=px.box(cs,y=\"price\")\nfig.show()","14b2b984":"#understanding the data structure and looking at car price distribution\nlower_limit = np.percentile(cs[['price']], 5)\nupper_limit = np.percentile(cs[['price']], 95)\nprint(lower_limit, upper_limit)","795b3cf8":"cs['year'] = (cs['year']-1900).astype(int)                              #Chaning year for a smaller number\ncs['odometer'] = cs['odometer'].astype(int)\ncs = cs[(cs['price'] >= lower_limit) & (cs['price'] <= upper_limit)]  #Removing outliers\ncs.shape","6732a2ce":"#creating chart for data understanding - title_status distibution -  mapp this\nfig = px.scatter(x = cs['title_status'], y = cs['odometer'], size = cs['price'])\nfig.show()","6d1f5ed9":"#boxplot showing price dependence on states\nfig=px.box(cs,y='price', x='state')\nfig.show()","8aebe47a":"#changing from states to regions\ncs=cs.replace(to_replace=['ca','or','wa','hi','ak','nv','id','mt','wy','ut','co','az','nm'], value='west')\ncs=cs.replace(to_replace=['nd','sd','ne','ks','mn','ia','mo','wi','il','mi','in','oh'], value='midwest')\ncs=cs.replace(to_replace=['pa','ny','vt','me','nh','ma','ct','ri','nj'], value='northeast')\ncs=cs.replace(to_replace=['tx','ok','ar','la','ky','tn','ms','al','de','md','dc','wv','va','nc','sc','ga','fl'], value='south')","e7986224":"#boxplot showing price dependence on region\nfig=px.box(cs,y='price', x='state')\nfig.show()","207d96db":"#price distribution after outlier elimination\nfig=px.box(cs,y=\"price\")\nfig.show()","0f5c8833":"#chart for visualising odometer distribution\nfig = px.scatter(x = cs['year'] + 1900, y = cs['odometer'], size = cs['price'])\nfig.show()","97953307":"#categorical data encoding - label enncoding\ncs['title_status'].unique()","85c2975f":"label_encoder = preprocessing.LabelEncoder()\ncs['title_status'] = label_encoder.fit_transform(cs['title_status'])","b740ac31":"cs.describe()","e49fff11":"#features correlation matrix\ncs.corr()","0b0385f7":"pp.ProfileReport(cs)","b566622e":"x=cs.drop(columns=['price','model','state']) #splitting to feautures and label\ny=cs[['price']] ","733940a9":"x.head(1) # checking the columns","a7a5e234":"#categorical data encoding\nx=pd.get_dummies(x)\nx.shape","dbc8d57a":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25) #splitting the data into train and test","8cc49562":"#Fitting the first model\n\nlm=LinearRegression()\nlm.fit(x_train,y_train)\nlm.score(x_train,y_train),lm.score(x_test,y_test)","9e798903":"#Trying out One of the models from class\n\ngnb = GaussianNB()\ngnb.fit(x_train, y_train.values.ravel())\ngnb.score(x_train,y_train), gnb.score(x_test,y_test)","4cca93d8":"#Trying different regression model\n\nneigh=KNeighborsRegressor()\nneigh.fit(x_train,y_train)\nneigh.score(x_train,y_train), neigh.score(x_test,y_test)","eadc10f3":"# Checking the results when including polynomials up to x ** 5\npoly = PolynomialFeatures(degree=2)\npoly.fit(x_train, x_test)\n\nX_poly = poly.transform(x_train)\nXtest_poly = poly.transform(x_test)\n\nlm.fit(X_poly, y_train)\n\n#lm.fit(x1_train,y1_train)\nprint(lm.score(X_poly,y_train))\nprint(lm.score(Xtest_poly, y_test))\n#print(lm.score(x1_test, y1_test))","f5e1467d":"#Checking another regression model\n\ndtr = DecisionTreeRegressor(random_state=0, max_depth=1000, min_samples_split = 18, min_impurity_decrease = 1.4)\ndtr.fit(x_train, y_train.values.ravel())\ndtr.score(x_train,y_train), dtr.score(x_test,y_test)","d7b64daa":"#Creating and fitting RandomForestRegressor\n\nrandom_forest = RandomForestRegressor(n_estimators = 250, max_features = 'sqrt', n_jobs = 20)\nrandom_forest.fit(x_train, y_train.values.ravel())\nprint(random_forest.score(x_train, y_train), random_forest.score(x_test, y_test))","b6a69aae":"#Checking other regression model\n\nbagging = BaggingRegressor(n_estimators = 200, oob_score = True, n_jobs = 10)\nbagging.fit(x_train, y_train.values.ravel())\nbagging.score(x_train,y_train), bagging.score(x_test,y_test)","1af81c81":"#Checking another regression model\n\netr = ExtraTreesRegressor(random_state=0, n_estimators = 250, max_features = None, min_samples_split = 6)\netr.fit(x_train, y_train.values.ravel())\netr.score(x_train,y_train), etr.score(x_test,y_test)","422ce8d8":"#Using cross valudation to verify data accuracy and prevent overfitting on 3 best models\n\netr_values = cross_val_score(etr, x, y.values.ravel(), cv=4)\nbagging_values = cross_val_score(bagging, x, y.values.ravel(), cv=4)\nrandom_forest_values = cross_val_score(random_forest, x, y.values.ravel(), cv=4)\n\nprint(f\"ExtraTreesRegressor model has {etr_values} accuracy\")\nprint(f\"BaggingRegressor model has {bagging_values} accuracy scores\")\nprint(f\"RandomForestRegressor model has {random_forest_values} accuracy scores\")\n                                       ","0c7ab61f":"#r2_score and regression score functions show the same information, mean errors show how much off the predictions were in numeric terms\n\n#Model 1 stats\nprint('ExtraTreesRegressor Accuracy Evaluation')\nprint(f'r2 score: {r2_score(y_test, etr.predict(x_test))}')\nprint(f'Mean absolute error: {mean_absolute_error(y_test, etr.predict(x_test))}')\nprint(f'Mean squared error: {mean_squared_error(y_test, etr.predict(x_test))}')\nprint('\\n')\n#Model 2 stats\nprint('BaggingRegressor Accuracy Evaluation')\nprint(f'r2 score: {r2_score(y_test, bagging.predict(x_test))}')\nprint(f'Mean absolute error: {mean_absolute_error(y_test, bagging.predict(x_test))}')\nprint(f'Mean squared error: {mean_squared_error(y_test, bagging.predict(x_test))}')\nprint('\\n')\n#Model 3 stats\nprint('RandomForestRegressor Accuracy Evaluation')\nprint(f'r2 score: {r2_score(y_test, random_forest.predict(x_test))}')\nprint(f'Mean absolute error: {mean_absolute_error(y_test, random_forest.predict(x_test))}')\nprint(f'Mean squared error: {mean_squared_error(y_test, random_forest.predict(x_test))}')","df8cc077":"# **Model Accuracy Evaluation**","c06ac4ae":"# **Model Fitting**","e1b5d462":"Please run the notebook via this link https:\/\/www.kaggle.com\/maciejautuch\/car-price-prediction","36bf2df8":"# **Data Cleaning**","4a1e9183":"# **Data Cross Validation**"}}