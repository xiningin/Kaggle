{"cell_type":{"2d23c810":"code","72b5c87a":"code","bd166897":"code","cf427721":"code","f7ac4f34":"code","7111673b":"code","f7310ef9":"code","4e05e8cd":"code","9353e703":"code","39894eca":"code","6ab70109":"code","fe1b2066":"code","2297eda6":"code","c81490b1":"code","078e48ee":"code","09227758":"code","ce76f726":"code","ff492140":"code","d92d5594":"code","4e5ec09c":"code","b9e9f2b8":"code","ba7e7067":"code","d937b858":"code","d5ef9a9c":"code","5a4d67ee":"code","6ba8397b":"code","85bc03e7":"code","378013dc":"code","324a2339":"code","2fe71042":"code","89638c3d":"code","4c562240":"markdown","4fefa7c0":"markdown","5c7a3624":"markdown","f4baaa5f":"markdown","f2520f78":"markdown","351a7584":"markdown"},"source":{"2d23c810":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport seaborn as sns\n#\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\n\nimport os\nprint(os.listdir(\"..\/input\"))","72b5c87a":"df = pd.read_excel('\/kaggle\/input\/online-retail-data-set-from-uci-ml-repo\/Online Retail.xlsx')","bd166897":"df.sample(5)","cf427721":"display(df.describe())","f7ac4f34":"plt.subplots(figsize=(10, 8))\nsns.heatmap(df.isnull(), yticklabels = False,cbar = False, cmap='cubehelix')\nplt.show()","7111673b":"df.drop_duplicates(inplace=True)\ndf = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0) & (df['CustomerID'].notnull())]","f7310ef9":"df.shape","4e05e8cd":"def get_month(x): return dt.datetime(x.year, x.month, 1)\ndf['InvoiceMonth'] = df['InvoiceDate'].apply(get_month)\ngrouping = df.groupby('CustomerID')['InvoiceMonth']\ndf['CohortMonth'] = grouping.transform('min')","9353e703":"def get_date_int(df, column):\n    year = df[column].dt.year\n    month = df[column].dt.month\n    day = df[column].dt.day\n    return year, month, day","39894eca":"invoice_year, invoice_month, invoice_day = get_date_int(df, 'InvoiceMonth')\ncohort_year, cohort_month, cohort_day = get_date_int(df, 'CohortMonth')\n\nyears_diff = invoice_year - cohort_year\nmonths_diff = invoice_month - cohort_month\n\ndf['CohortIndex'] = years_diff * 12 + months_diff + 1\n\ndf.tail()","6ab70109":"grouping = df.groupby(['CohortMonth', 'CohortIndex'])\n\ncohort_data = grouping['CustomerID'].apply(pd.Series.nunique)\n\ncohort_data = cohort_data.reset_index()\n\ncohort_counts = cohort_data.pivot(index='CohortMonth',\n                                 columns='CohortIndex',\n                                 values='CustomerID')","fe1b2066":"cohort_sizes = cohort_counts.iloc[:,0]\nretention = cohort_counts.divide(cohort_sizes, axis=0)\nretention.index=retention.index.date","2297eda6":"#sns.set()\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(12,10))\nplt.title('Retention Rates')\n\nsns.heatmap(data = retention,\n           annot = True,\n           fmt = '.0%',\n           vmin= 0.0,\n           vmax=0.5,\n           cmap='summer_r')\nplt.show()","c81490b1":"df['InvoiceDay'] = df['InvoiceDate'].apply(lambda x: dt.datetime(x.year, x.month, x.day))\n\nact_date = max(df['InvoiceDay'] + dt.timedelta(1))\ndf['TotalSum'] = df['Quantity'] * df['UnitPrice']\ndf.drop(['CohortMonth', 'InvoiceMonth', 'CohortIndex'], axis=1, inplace=True)\ndf.head()","078e48ee":"rfm = df.groupby('CustomerID').agg({\n    'InvoiceDate' : lambda x: (act_date - x.max()).days,\n    'InvoiceNo' : 'count',\n    'TotalSum' : 'sum'\n})\n\nrfm.rename(columns = {'InvoiceDate' : 'Recency', \n                      'InvoiceNo' : 'Frequency', \n                      'TotalSum' : 'MonetaryValue'}, inplace = True)\nrfm.head()","09227758":"r_labels = range(3, 0, -1)\nr_groups = pd.qcut(rfm.Recency, q = 3, labels = r_labels)\n\nf_labels = range(1, 4)\nf_groups = pd.qcut(rfm.Frequency, q = 3, labels = f_labels)\n\nm_labels = range(1, 4)\nm_groups = pd.qcut(rfm.MonetaryValue, q = 3, labels = m_labels)","ce76f726":"rfm['R'] = r_groups.values\nrfm['F'] = f_groups.values\nrfm['M'] = m_groups.values\n\nrfm = rfm.assign(R=r_groups,F=f_groups,M=m_groups)\n\nrfm['RFM_Segment'] = rfm.apply(lambda x: str(x['R']) + str(x['F']) + str(x['M']), axis = 1)\nrfm['RFM_Score'] = rfm[['R', 'F', 'M']].sum(axis = 1)\nrfm.head()","ff492140":"rfm_agg = rfm.groupby('RFM_Score').agg({\n    'Recency' : 'mean',\n    'Frequency' : 'mean',\n    'MonetaryValue' : ['mean', 'count']\n})\n\nrfm_agg.rename(columns = {'mean' : 'Mean','count' : 'Count'},\n               inplace = True)\n\nrfm_agg.round(2).head()","d92d5594":"score_labels = ['Bronze', 'Silver', 'Gold']\nscore_groups = pd.qcut(rfm.RFM_Score, q = 3, labels = score_labels)\nrfm['Robust RFM Level'] = score_groups.values\n\nrfm.head()","4e5ec09c":"rfm.describe()","b9e9f2b8":"def neg_to_zero(x):\n    if x <= 0:\n        return 1\n    else:\n        return x\nrfm['Recency'] = [neg_to_zero(x) for x in rfm.Recency]\n\nrfm_log = rfm[['Recency', 'Frequency', 'MonetaryValue']].apply(np.log, axis = 1)","ba7e7067":"scaler = StandardScaler()\nscaler.fit(rfm_log)\n\nrfm_normalized= scaler.transform(rfm_log)","d937b858":"rfm_scaled = pd.DataFrame(rfm_normalized, index = rfm.index, columns = rfm_log.columns)\nrfm.describe()","d5ef9a9c":"cont_features = ['Recency', 'Frequency', 'MonetaryValue']\n\n\nfig, ax = plt.subplots(ncols=2, nrows=3, figsize=(18,18))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cont_features):\n    sns.distplot(rfm[feature],  hist=True, color='#e74c3c', ax=ax[i][0])    \n    sns.distplot(rfm_scaled[feature], hist=True, color='#e74c3c', ax=ax[i][1])\n    \n    ax[i][0].set_title(f'Distribution of Unscaled {feature}', size=30, y=1.05)\n    ax[i][1].set_title(f'Distribution of Scaled {feature}', size=30, y=1.05)\n    \nplt.tight_layout()      \nplt.show()","5a4d67ee":"plt.figure(figsize=(10,8))\n\nkls = np.arange(1,6,1)\ninertias=[]\nfor k in kls :\n    knc = KMeans(n_clusters=k, random_state=42)\n    knc.fit(rfm_scaled)\n    inertias.append(knc.inertia_)\n\n\nfig, ax = plt.subplots(figsize=(12, 8))\nplt.plot(kls, inertias,'--o', markersize=22, color='#e74c3c')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.xticks(kls)\nplt.show()","6ba8397b":"kc = KMeans(n_clusters=3, random_state=42)\nkc.fit(rfm_normalized)\nrfm['RFM Cluster'] = kc.labels_\n\nrfm_s=rfm.groupby('RFM Cluster').agg({'Recency': 'mean','Frequency': 'mean',\n                                         'MonetaryValue': ['mean', 'count']})\n\n\nrfm_s.rename(columns = {'mean' : 'Mean','count' : 'Count'},\n               inplace = True)\n\n\n\ndisplay(rfm_s.style.background_gradient(cmap='summer_r'))","85bc03e7":"rfm['RFM Cluster']=rfm['RFM Cluster'].map({0: 'K_Bronze', 1: 'K_Gold',2:'K_Silver'})\nrfm.sample(10)","378013dc":"rfm_scaled['RFM Cluster'] = kc.labels_\nrfm_scaled['Robust RFM Level'] = rfm['Robust RFM Level']\nrfm_scaled.reset_index(inplace = True)\nrfm_scaled['RFM Cluster']=rfm_scaled['RFM Cluster'].map({0: 'K_Bronze', 1: 'K_Gold',2:'K_Silver'})\n\n\nrfm_melted = pd.melt(frame= rfm_scaled, id_vars= ['CustomerID', 'Robust RFM Level',\n                                                  'RFM Cluster'], var_name = 'Metrics', value_name = 'Value')\n\nrfm_melted.head()","324a2339":"fig, ax = plt.subplots(nrows=2, figsize=(15,8))\nplt.subplots_adjust(right=1.5, top=1.25)\n\n\nsns.lineplot(x = 'Metrics', y = 'Value', hue = 'Robust RFM Level', data = rfm_melted, ax=ax[0])\nsns.lineplot(x = 'Metrics', y = 'Value', hue = 'RFM Cluster', data = rfm_melted, ax=ax[1])\n\nax[0].set_title('Snake Plot of RFM Level', size=25)\nax[1].set_title('Snake Plot of RFM Cluster', size=25)\nax[0].legend(loc='upper right', prop={'size': 12})\nax[1].legend(loc='upper right', prop={'size': 12})\n\nplt.show()","2fe71042":"total_avg = rfm.iloc[:, 0:3].mean()\n\ncluster_avg = rfm.groupby('Robust RFM Level').mean().iloc[:, 0:3]\nprop_rfm = cluster_avg\/total_avg - 1\n\ncluster_avg_K = rfm.groupby('RFM Cluster').mean().iloc[:, 0:3]\nprop_rfm_K = cluster_avg_K\/total_avg - 1","89638c3d":"fig, ax = plt.subplots(ncols=2, figsize=(12,8))\nsns.heatmap(prop_rfm, cmap= 'summer_r', fmt= '.2f', annot = True, ax=ax[0])\nsns.heatmap(prop_rfm_K, cmap= 'summer_r', fmt= '.2f', annot = True, ax=ax[1])\n\nax[0].set_title('Heatmap of Robust RFM Level', size=15)\nax[1].set_title('Heatmap of RFM Cluster', size=15)\n\nplt.show()","4c562240":"# Data Processing","4fefa7c0":"# Customer segmentation with RFM","5c7a3624":"# Data Scaling","f4baaa5f":"# K-Means clustering","f2520f78":"# Snake Plots & Heatmaps","351a7584":"# Cohort Analysis"}}