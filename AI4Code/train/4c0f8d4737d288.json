{"cell_type":{"9ebf21b5":"code","7cb6b5e8":"code","53881fa2":"code","e259a44a":"code","ea56b7d2":"code","6a4224be":"code","115ec1f3":"markdown","55706c54":"markdown"},"source":{"9ebf21b5":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport skimage.measure","7cb6b5e8":"train_df = pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')\ntrain_df['path'] = train_df.id.apply(lambda x: f'..\/input\/seti-breakthrough-listen\/train\/{x[0]}\/{x}.npy')\ntrain_df.head()","53881fa2":"def sig(x):\n    # for easy EDA.\n    return 1\/(1+np.exp(-x*1.5))","e259a44a":"def plot(img, target, file_id):\n    _, w, h = img.shape\n    img_ = np.vstack([img[0],img[2],img[4]]).transpose()\n    w1, h1 = img_.shape\n    \n    fig = plt.figure(figsize=(14,10))\n    fig.suptitle(f\"{file_id}.npy, target: {target}\")\n    plt.subplot(2,2,1)\n    plt.title('original')\n    plt.imshow(sig(img_), aspect='auto')\n    \n    img0 = img[0].mean(axis=0)\n    img0 = cv2.resize(img0, (w,h)).transpose()\n    img2 = img[2].mean(axis=0)\n    img2 = cv2.resize(img2, (w,h)).transpose()\n    img4 = img[4].mean(axis=0)\n    img4 = cv2.resize(img4, (w,h)).transpose()\n    \n    img0 = img[0]-img0\n    img2 = img[2]-img2\n    img4 = img[4]-img4\n    img0_ = img0.mean(axis=1)\n    img0_ = cv2.resize(img0_, (h,w))\n    img2_ = img2.mean(axis=1)\n    img2_ = cv2.resize(img2_, (h,w))\n    img4_ = img4.mean(axis=1)\n    img4_ = cv2.resize(img4_, (h,w))\n    img0 = img0 - img0_\n    img2 = img2 - img2_\n    img4 = img4 - img4_\n    img = np.vstack([img0,img2,img4]).transpose()\n    plt.subplot(2,2,2)\n    plt.title('-mean')\n    plt.imshow(sig(img), aspect='auto')\n    \n    \n    img_2 = skimage.measure.block_reduce(img_, (5,5), np.mean)\n    img_2 = cv2.resize(img_2, (h1, w1))\n    plt.subplot(2,2,3)\n    plt.title('-mean_pool')\n    plt.imshow(sig(img_ - img_2), aspect='auto')\n\n    plt.subplot(2,2,4)\n    plt.title('mean_pool')\n    plt.imshow(sig(img_2), aspect='auto')\n    plt.show()","ea56b7d2":"trn_df = pd.concat([train_df[train_df.target==0].sample(10), train_df[train_df.target==1].sample(30)]).sample(40).reset_index(drop=True)","6a4224be":"for idx in range(len(trn_df)):\n    file_id, target, path = trn_df.iloc[idx]\n    img = np.load(path).astype('float')\n    \n    plot(img, target, file_id)","115ec1f3":"just - mean may effective for special case of images.\n\nBut it reduce model's performance in my case.","55706c54":"meanpool < original + meanpool < original - mean < original - meanpool"}}