{"cell_type":{"13f1dcc0":"code","5d9cc96d":"code","204d9908":"code","5948cf69":"code","573f388c":"code","3de40751":"code","a9921a31":"code","5c2b408f":"code","d4b7cde3":"code","6e87b3fd":"code","990c23c6":"code","ecc2f3e1":"code","3ad510d1":"code","06d2e01e":"code","24331893":"code","59d6b7c2":"code","11a4886d":"code","119e2fad":"code","d66a9d1f":"code","7ee7563d":"code","b6f79c04":"code","905471a8":"code","d5647f8a":"code","840cf957":"code","fea53ade":"code","267fc934":"code","278266ac":"code","0785b48c":"code","fcde7bc9":"code","2018d0a0":"code","f6faffaa":"code","5c062728":"code","e2eada39":"code","056734df":"code","a19ff571":"code","db810022":"code","1d81a135":"code","94e9972c":"code","12d8f71a":"code","2031ff15":"code","7968bc0f":"code","56a61ffe":"code","e7e612a0":"code","da11ee67":"code","553b3c7e":"code","2cc1f1a9":"code","ed99a32a":"code","9a1da423":"code","8eb9dd10":"code","a6a8039d":"code","bdebbba7":"code","53a9be79":"code","4d7c6d35":"code","77839b24":"code","a193a656":"code","93f8aa3e":"code","e4c171b1":"code","9a9a6e43":"code","4542dc15":"code","1e39051c":"code","429cc033":"code","2ece13bd":"code","bd74f455":"code","f5650c08":"code","72335f7a":"code","4a9f912c":"code","568f5eb0":"code","6e26f6a5":"code","ff38f57f":"code","ab58a51f":"code","50ae02d1":"code","930d4fae":"code","d55021ad":"code","3b8f5d15":"code","425d09c7":"code","c887ee2e":"code","aeed0325":"code","51e0e1cf":"code","de773248":"code","7ea1f273":"code","5be02a5b":"code","f2421d0b":"code","e91608ea":"code","d97b42d6":"code","8d8cbdf3":"code","d724fb00":"markdown","ecad44de":"markdown","7a8ec4c1":"markdown","92cf4481":"markdown","ad738739":"markdown","284c81f1":"markdown","31ea251e":"markdown","55f9ec62":"markdown","f9d6866a":"markdown","57380dae":"markdown","7ee049c2":"markdown"},"source":{"13f1dcc0":"#  This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5d9cc96d":"#installing pyspark version 2.3.4\n!pip install pyspark==2.3.4","204d9908":"import pyspark","5948cf69":"from pyspark import SparkContext","573f388c":"#Starting SparkContext\nsc = SparkContext(\"local\",\"jagmeet\")","3de40751":"sqlContext = pyspark.SQLContext(sc)","a9921a31":"sc.version","5c2b408f":"from pyspark.sql.types import *","d4b7cde3":"#Defining own schema\n#This is done so that there would not be any conflict between datatypes\ndata_schema = [StructField('id', IntegerType(), True), \n               StructField('name', StringType(), True),\n               StructField('host_id', IntegerType(), True),\n               StructField('host_name', StringType(), True),\n               StructField('neighbourhood_group', StringType(), True),\n               StructField('neighbourhood', StringType(), True),\n               StructField('latitude', FloatType(), True),\n               StructField('longitude', FloatType(), True),\n               StructField('room_type', StringType(), True),\n               StructField('price', IntegerType(), True),\n               StructField('minimum_nights', IntegerType(), True),\n               StructField('number_of_reviews', IntegerType(), True),\n               StructField('last_review', DateType(), True),\n               StructField('reviews_per_month', FloatType(), True),\n               StructField('calculated_host_listings_count', IntegerType(), True),\n               StructField('availability_365', IntegerType(), True),\n              ]","6e87b3fd":"final_struc = StructType(data_schema)","990c23c6":"#Reading csv file into spark dataframe using our schema \ndf = sqlContext.read.csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv', header = True,schema = final_struc,mode=\"DROPMALFORMED\")","ecc2f3e1":"df.printSchema()","3ad510d1":"import seaborn as sns\nsns.set()","06d2e01e":"import matplotlib.pyplot as plt\n%matplotlib inline","24331893":"import pandas as pd","59d6b7c2":"import pyspark.sql.functions as func","11a4886d":"#groupby, aggregating, sorting and then converting the dataframe to pandas\n#conversion to pandas is just for plotting purposes\n#Calculating mean of price for all the distinct neighbourhood_group\ndf_neigh_gr_pd = df.groupBy(\"neighbourhood_group\").agg(func.mean(\"price\").alias(\"mean_price\")).orderBy('mean_price', ascending=False).toPandas().head(10)","119e2fad":"df_neigh_gr_pd","d66a9d1f":"plt.figure(figsize=(25, 10))\nsns.barplot(x=\"neighbourhood_group\", y=\"mean_price\", data=df_neigh_gr_pd)","7ee7563d":"#This will calculate mean price of each distinct neighbourhood\ndf_neigh_pd = df.groupBy('neighbourhood').agg(func.mean(\"price\").alias(\"mean_price\")).orderBy('mean_price', ascending=True).toPandas().head(20)","b6f79c04":"df_neigh_pd","905471a8":"plt.figure(figsize=(25, 10))\nsns.barplot(x=\"neighbourhood\", y=\"mean_price\", data=df_neigh_pd)","d5647f8a":"#calculaitng sum of reviews for each host_id\ndf_host_popularity = df.groupby('host_id').agg(func.sum('number_of_reviews').alias('sum_review'))","840cf957":"#calculating total reviews for complete data\ntotal_reviews = df.select(func.sum('number_of_reviews')).head()[0]","fea53ade":"total_reviews","267fc934":"#import udf\nfrom pyspark.sql import udf","278266ac":"import pyspark.sql.functions as F","0785b48c":"#Defining function for withcolumn operation and then udf\ndef func_divide(a1,a2):\n  return a1*100.0\/float(a2)","fcde7bc9":"divide_func_sp = F.udf(func_divide,FloatType())","2018d0a0":"divide_func_sp","f6faffaa":"#withColumn adds new column and applied the funcition to make new column\ndf_host_popularity = df_host_popularity.withColumn('total_sum_reviews', F.lit(total_reviews))","5c062728":"df_host_popularity.show()","e2eada39":"#creating popularity_index column by diving each host_id reviews by total no. of reviews\ndf_host_popularity = df_host_popularity.withColumn('popularity_index',divide_func_sp('sum_review','total_sum_reviews'))","056734df":"df_host_popularity.orderBy('popularity_index', ascending=False).show(10)","a19ff571":"df_host_popularity = df_host_popularity.select('host_id','popularity_index')","db810022":"df_host_popularity.show()","1d81a135":"df_host_popularity.orderBy('popularity_index', ascending=False).show(10)","94e9972c":"#merging the popularity_index to the main dataframe\ndf = df.join(df_host_popularity, \"host_id\", \"left\")","12d8f71a":"df.show(2)","2031ff15":"#spark filter and sorting\ndf.filter(df['minimum_nights'] > 10).orderBy('popularity_index', ascending=False).select(df['neighbourhood']).show(20)","7968bc0f":"df_popular_regions = df.groupby('neighbourhood').agg(func.sum('popularity_index').alias('pop_reg'))","56a61ffe":"df_popular_regions.show()","e7e612a0":"df_popular_regions = df_popular_regions.orderBy('pop_reg', ascending=False).toPandas().head(10)","da11ee67":"df_popular_regions.head()","553b3c7e":"plt.figure(figsize=(16, 6))\nsns.barplot(x='neighbourhood', y='pop_reg', data=df_popular_regions)","2cc1f1a9":"#Summing no. of reviews for each neighbourhood\ndf_neighbourhood_sum = df.groupby('neighbourhood').agg(func.sum('number_of_reviews').alias('sum_reviews_ne'))","ed99a32a":"df_neighbourhood_sum.show(5)","9a1da423":"df_neighbourhood_sum.head()","8eb9dd10":"df_neighbourhood_host_sum = df.groupby('host_id','neighbourhood').agg(func.sum('number_of_reviews').alias('sum_reviews_id_ne'))","a6a8039d":"df_neighbourhood_host_sum.show()","bdebbba7":"#merging column\ndf_neighbourhood_host_merged = df_neighbourhood_host_sum.join(df_neighbourhood_sum,'neighbourhood','left')","53a9be79":"df_neighbourhood_host_merged.filter(df['neighbourhood'] == 'Williamsburg').orderBy('host_id', ascending=True).show(10)","4d7c6d35":"def func_divide(a1,a2):\n  if(a2!=0):\n    ans = a1*100.0\/float(a2)\n  else:\n    ans = 0\n  return ans","77839b24":"divide_func_sp = F.udf(func_divide,FloatType())","a193a656":"df_neighbourhood_host_merged = df_neighbourhood_host_merged.withColumn('host_neighbourhood_popularity',divide_func_sp('sum_reviews_id_ne','sum_reviews_ne'))","93f8aa3e":"df_neighbourhood_host_merged.show()","e4c171b1":"df_neighbourhood_host_merged.orderBy('host_neighbourhood_popularity', ascending=False).show(20)","9a9a6e43":"df_neighbourhood_host_merged = df_neighbourhood_host_merged.select('host_id','neighbourhood','host_neighbourhood_popularity')","4542dc15":"df_neighbourhood_host_merged.show(5)","1e39051c":"#To validate results, for baychester the sum of all the host_neighbourhood_popularity = 100.0\ndf_neighbourhood_host_merged.filter(df_neighbourhood_host_merged['neighbourhood']=='Baychester').show()","429cc033":"df = df.join(df_neighbourhood_host_merged,['host_id','neighbourhood'],'left')","2ece13bd":"df.filter(df['host_neighbourhood_popularity']>90).show(2)","bd74f455":"#Filtering only private room and entire room\ndf_neighbourhood_room_type = df.filter(df['room_type'] != 'Shared room')","f5650c08":"df_neighbourhood_room_type = df_neighbourhood_room_type.groupby('neighbourhood','room_type').agg(func.sum('price').alias('price_sum'))","72335f7a":"df_neighbourhood_room_type.show()","4a9f912c":"#pivot operation \ndf_neighbourhood_room_type = df_neighbourhood_room_type.groupby('neighbourhood').pivot('room_type').sum('price_sum')","568f5eb0":"df_neighbourhood_room_type.show()","6e26f6a5":"#Maximum revenue in Private Rooms\ndf_neighbourhood_room_type.orderBy('Private room', ascending=False).show(1)","ff38f57f":"df_min = df_neighbourhood_room_type.orderBy('Private room', ascending=True)","ab58a51f":"#Minimum revenue in Private Rooms after filetering out null values\ndf_min[df_min['Private room'].isNotNull()].show(1)","50ae02d1":"##minimum revenue in Entire home\/apt Rooms\ndf_neighbourhood_room_type.orderBy('Entire home\/apt', ascending=True).filter(df_neighbourhood_room_type['Entire home\/apt'].isNotNull()).show(1)","930d4fae":"###maximum revenue in Entire home\/apt Rooms\n\ndf_neighbourhood_room_type.orderBy('Entire home\/apt', ascending=False).show(1)","d55021ad":"df_neighbourhood_room_type_mean = df.filter(df['room_type'] != 'Shared room')","3b8f5d15":"df_neighbourhood_room_type_mean = df_neighbourhood_room_type_mean.groupby('neighbourhood','room_type').agg(func.mean('price').alias('average_region_price'))","425d09c7":"df_neighbourhood_room_type_mean_pivot = df_neighbourhood_room_type_mean.groupby('neighbourhood').pivot('room_type').sum('average_region_price')","c887ee2e":"df_neighbourhood_room_type_mean_pivot.show()","aeed0325":"df_neighbourhood_room_type_mean_pivot = df_neighbourhood_room_type_mean_pivot.toPandas()","51e0e1cf":"#Plotting \nplt.figure(figsize=(30, 10))\nlabels = []\nimport matplotlib.pyplot as plt\nax=df_neighbourhood_room_type_mean_pivot.sort_values('Private room', ascending=False).head().plot(kind='bar', width = 0.5)\nax.set_xlabel('neighbourhood', fontsize = 20)\nax.set_ylabel('average_price', fontsize = 20)\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 20\nfig_size[1] = 10\na = [item.get_text() for item in ax.get_xticklabels()]  #to get labels as they are coming as index\nfor i in a:\n  labels.append(df_neighbourhood_room_type_mean_pivot['neighbourhood'][int(i)])\nax.set_xticklabels(labels)  #setting xticks as neighbourhood name\nax = plt.gca()\nfor tick in ax.xaxis.get_major_ticks():\n    tick.label.set_fontsize(20) \n    tick.label.set_rotation('horizontal')\nfor tick in ax.yaxis.get_major_ticks():\n    tick.label.set_fontsize(16)     \nplt.rcParams[\"figure.figsize\"] = fig_size\nplt.legend(prop={'size':'15'})\nplt.show(ax)","de773248":"df = df.join(df_neighbourhood_room_type_mean,['neighbourhood','room_type'],'left')","7ea1f273":"df.filter(df['neighbourhood'] == 'Kensington').show()","5be02a5b":"#Filtering out null values for price\ntemp1 = df.filter(df['price'].isNotNull())","f2421d0b":"#Filtering out null values for average_region_price\ntemp1 = temp1.filter(temp1['average_region_price'].isNotNull())","e91608ea":"#Defining function and converting it to udf function for with column operation\ndef func_divide1(a1,a2):\n  if(type(a1)=='NoneType' or type(a2)=='NoneType'):\n    ans = 0\n  elif(a1!=0):\n    ans = ((a1-a2)*100.0)\/float(a1)\n  else:\n    ans = 0\n  return ans\n\ndivide_func_sp1 = F.udf(func_divide1,FloatType())","d97b42d6":"#withcolumn operation\ndf = temp1.withColumn('region_price_margin',divide_func_sp1('price','average_region_price'))","8d8cbdf3":"df.show(1)","d724fb00":"**Finding out the most popular regions based on the host_id\u2019s popularity_index**\n\n","ecad44de":"* This notebook describes about the implementation of pyspark function in data exploratory.**\n* The dataset taken is from Kaggle open datasets: Airbnb dataset\n* I tried to reproduce the results from Baval's notebook (https:\/\/www.kaggle.com\/bavalpreet26\/eda-air-bnb-26) using pyspark functions so that you can compare it with pandas function","7a8ec4c1":"**Finding out the top locations where people tend to stay for a longer duration (more than a week) and sorting those by their popularity index. **","92cf4481":"**Finding out the neighbourhood\u2019s average price so that I am able to pick an economical location to book my hotel.**","ad738739":"**Reading CSV file into spark dataframe.**","284c81f1":"* Calculating host_id\u2019s popularity in its neighbourhood \n* Creating a column host_neighbourhood_popularity by calculating relative percentage of reviews of host among total reviews in that region.\n","31ea251e":"**Creating a column depicting relative price difference of that host with respect to the neighbourhood\u2019s average pricing.**\n","55f9ec62":"**Calculating the average price income for private rooms and entire homes for each of the neighbourhoods\n**","f9d6866a":"**Creating a plot showing top 10 neighbourhoods\/neighbourhood_group with highest hotel prices.\n**","57380dae":"**Finding:**\n* Maximum revenue in Private Rooms \n* Minimum revenue in Private Rooms \n* Maximum revenue in Entire Homes \n* Minimum revenue in Entire Homes \n","7ee049c2":"* Finding out the 10 most popular hosts based on number_of_reviews\n* Creating a column named popularity_index depicting popularity of the host."}}