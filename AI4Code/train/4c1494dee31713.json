{"cell_type":{"2ec48e0b":"code","2df366c8":"code","a335c8cb":"code","aa80cb59":"code","ee886ab0":"code","24df732d":"code","8330ede9":"code","3f404366":"code","d54d415f":"code","0d6353f8":"code","40ae997e":"code","740fc1ca":"code","e0e25f61":"code","86936a07":"code","7cebef07":"code","f609aaba":"code","0ee22c22":"code","b3dbb10a":"markdown","19fa567c":"markdown","17ded5db":"markdown","96375bac":"markdown","1b0a6946":"markdown","ba4e3b83":"markdown","09afe0d8":"markdown","8fb5fb7d":"markdown","78605576":"markdown","6294db35":"markdown","8fdcb7dd":"markdown","42aeb13f":"markdown"},"source":{"2ec48e0b":"import plotly \nplotly.offline.init_notebook_mode (connected = True)","2df366c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a335c8cb":"path = '..\/input\/lish-moa'\nos.listdir(path) ","aa80cb59":"test_features = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\n","ee886ab0":"train_features.head()","24df732d":"train_targets_scored.head()","8330ede9":"train_targets_nonscored.head()","3f404366":"print('______________train_features________________')\ntrain_features.info()\nprint('______________________________')\nprint('______________test_features________________')\ntest_features.info()\nprint('______________________________')\nprint('_____________train_targets_scored_________________')\ntrain_targets_scored.info()\nprint('______________________________')\nprint('________________train_targets_nonscored______________')\ntrain_targets_nonscored.info()","d54d415f":"\nprint(\"Shape of the training set: \", train_features.shape)\nprint('unique ids: ', len(train_features.sig_id.unique()))\n\nprint(\"Shape of the training set: \", test_features.shape)\nprint('unique ids: ', len(test_features.sig_id.unique()))","0d6353f8":"import seaborn as sns \nfig,ax= plt.subplots(1,2)\nsns.countplot(train_features['cp_time'], ax = ax[0]).set_title('For Training Set')\nsns.countplot(test_features['cp_time'], ax = ax[1]).set_title('For Testing Set')\nplt.tight_layout()","40ae997e":"import seaborn as sns \nfig,ax= plt.subplots(1,2)\nsns.countplot(train_features['cp_type'], ax = ax[0]).set_title('For Training Set')\nsns.countplot(test_features['cp_type'], ax = ax[1]).set_title('For Testing Set')\nplt.tight_layout()","740fc1ca":"import seaborn as sns \nfig,ax= plt.subplots(1,2)\nsns.countplot(train_features['cp_dose'], ax = ax[0]).set_title('For Training Set')\nsns.countplot(test_features['cp_dose'], ax = ax[1]).set_title('For Testing Set')\nplt.tight_layout()","e0e25f61":"x = train_features.drop(['sig_id'], axis=1)\ncorr = x.corr()\ncorr.style.background_gradient(cmap='coolwarm')","86936a07":"# drop the first column ('sig_id'), and \ndf = train_targets_scored.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending=False).reset_index()\n","7cebef07":"df.columns = ['column', 'nonzero_records']\ndf","f609aaba":"# plot the bar \n\nfig = px.bar(\n    df.head(50), \n    x='nonzero_records', \n    y='column', \n    orientation='h', \n    title='Columns with the positive samples (Only top 50)', \n    height=1000, \n    width=800\n)\nfig.show()","0ee22c22":"# drop the first column ('sig_id') and count the 0s in \ndf1 = train_targets_scored.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending=False).reset_index()\ndf1.columns = ['column', '% nonzero_records']\ndf1['% nonzero_records'] = (df1['% nonzero_records']\/len(train_targets_scored))*100\n# plot the bar \n\nfig = px.bar(\n    df1.head(50), \n    x='% nonzero_records', \n    y='column', \n    orientation='h', \n    title='Columns with the % positive samples (Only top 50) ', \n    height=1000, \n    width=800\n)\nfig.show()\n","b3dbb10a":"### for training file:\n- There are 23814 rows and 876 colums in the csv file. \n- there are 23814 unique ids.\n\n### for testing file: \n- There are 3982 rows and 876 colums in the csv file. \n- there are 3982 unique ids.","19fa567c":"# let us explore the files ","17ded5db":"# Basic info about this Competition (Directly copied from the page)\n**What is the Mechanism of Action (MoA) of a drug? And why is it important?**\n\nIn the past, scientists derived drugs from natural products or were inspired by traditional remedies. Very common drugs, such as paracetamol, known in the US as acetaminophen, were put into clinical use decades before the biological mechanisms driving their pharmacological activities were understood. Today, with the advent of more powerful technologies, drug discovery has changed from the serendipitous approaches of the past to a more targeted model based on an understanding of the underlying biological mechanism of a disease. In this new framework, scientists seek to identify a protein target associated with a disease and develop a molecule that can modulate that protein target. As a shorthand to describe the biological activity of a given molecule, scientists assign a label referred to as mechanism-of-action or MoA for short.\n\n**How do we determine the MoAs of a new drug?**\n\nOne approach is to treat a sample of human cells with the drug and then analyze the cellular responses with algorithms that search for similarity to known patterns in large genomic databases, such as libraries of gene expression or cell viability patterns of drugs with known MoAs.\n\nIn this competition, you will have access to a unique dataset that combines gene expression and cell viability data. The data is based on a new technology that measures simultaneously (within the same samples) human cells\u2019 responses to drugs in a pool of 100 different cell types (thus solving the problem of identifying ex-ante, which cell types are better suited for a given drug). In addition, you will have access to MoA annotations for more than 5,000 drugs in this dataset.\n\nAs is customary, the dataset has been split into testing and training subsets. Hence, your task is to use the training dataset to develop an algorithm that automatically labels each case in the test set as one or more MoA classes. Note that since drugs can have multiple MoA annotations, the task is formally a multi-label classification problem.","96375bac":"# EDA of training and testing set: \n","1b0a6946":"# Let us explore the Target of training set ","ba4e3b83":"### train_targets_scored.csv - The binary MoA targets that are scored.","09afe0d8":"## Let us use Pandas profiler for more exploration ","8fb5fb7d":"### train_targets_nonscored.csv - Additional (optional) binary MoA responses for the training data. These are not predicted nor scored.","78605576":"### Features for the training set. \n- **Features g-** signify gene expression data, \n- **c-** signify cell viability data. \n- **cp_type -** indicates samples treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle); control perturbations have no MoAs; \n- **cp_time and cp_dose:** indicate treatment duration (24, 48, 72 hours) and dose (high or low).","6294db35":"# positive cases ","8fdcb7dd":"# Let us count the positive cases ","42aeb13f":"# information about the all the csv files  "}}