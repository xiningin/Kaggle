{"cell_type":{"af508be6":"code","492aa187":"code","aa531d6d":"code","b934f9e5":"code","c8c90d5a":"code","ad13a70a":"code","f110400d":"code","35326fd6":"code","458832e3":"code","f290cb5a":"code","a38b2117":"code","eceaadc7":"code","56b20d79":"code","b1f2e1ef":"code","f5809cdf":"code","db337131":"code","99ecec14":"code","50164df3":"code","069fefe7":"code","83028fd3":"markdown","7aa6060b":"markdown","643deb3f":"markdown","5e279553":"markdown","d70536ad":"markdown"},"source":{"af508be6":"import numpy as np\nimport pandas as pd\n\nimport os\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler  \nfrom tqdm import tqdm\nimport numpy as np\nimport pickle\nimport optuna\n\n# Metrics for models evaluation\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\nplt.style.use(\"seaborn-whitegrid\")\nimport h2o\nfrom h2o.automl import H2OAutoML\n","492aa187":"from pathlib import Path\n\ninput_path = Path('..\/input\/tabular-playground-series-sep-2021\/')","aa531d6d":"X_test = pd.read_csv(f\"{input_path}\/test.csv\", index_col=0)\nX_test.head()","b934f9e5":"TARGET_VAR='claim'\nFOLDS=10\nuseful_features= None","c8c90d5a":"X= pd.read_feather(\"..\/input\/10-folds-stratified-parquet-feather\/train_stratfold.ft\")","ad13a70a":"num_cols  = [c for c in X.columns if c.startswith(\"f\")] \nlen(num_cols)","f110400d":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\nX[\"nan_count\"] = X.isnull().sum(axis=1)\nX_test[\"nan_count\"] = X_test.isnull().sum(axis=1)\nuseful_features = [c for c in X.columns if c not in ['id','claim' ,'index','kfold']] \ndef impute(df):\n    for name in useful_features:\n        df[name].fillna(df[name].mean(), inplace = True)\n    return df    \n\nX=impute(X)\nX_test=impute(X_test)\n\nclaim = X[TARGET_VAR]\nkfold = X[\"kfold\"]\nids=X['id']\nX = X.drop([\"index\",\"id\",TARGET_VAR,\"kfold\"],axis=1)\nscalar = StandardScaler()\nX[:]= scalar.fit_transform(X)\nX_test[:]= scalar.transform(X_test)\nX[TARGET_VAR] = claim\nX[\"kfold\"] = kfold\nX['id'] = ids\nX['min_row'] = X[num_cols].min(axis=1)\nX['mean_row'] = X[num_cols].min(axis=1)\nX['max_row'] = X[num_cols].max(axis=1)\nX['std_row'] = X[num_cols].std(axis=1)\nX_test['min_row'] = X_test[num_cols].min(axis=1)\nX_test['max_row'] = X_test[num_cols].min(axis=1)\nX_test['std_row'] = X_test[num_cols].std(axis=1)\nX_test['mean_row'] = X_test[num_cols].mean(axis=1)\n","35326fd6":"print(f\"Any NA :{X.isna().values.any()} Any Null :{X.isnull().values.any()}\")","458832e3":"from h2o.transforms.preprocessing import H2OScaler\nfrom h2o.transforms.decomposition import H2OPCA","f290cb5a":"h2o.init() # h2o initialization \ntrain= h2o.H2OFrame(X) # convert to h2o frame\ntest = h2o.H2OFrame(X_test) # convert to h2o frame \ndel X","a38b2117":"train[TARGET_VAR] = train[TARGET_VAR].asfactor() #binary classification ","eceaadc7":"auto_ml = H2OAutoML( \n    #nfolds=5, # use 5 folds \n    seed = 1222,\n    max_models = 20,\n    include_algos = [\"XGBoost\" ,\"StackedEnsemble\",\"GBM\"],# \"DRF\" ,\"DeepLearning\"\n    max_runtime_secs=3600*4,  #time in sec \n    sort_metric='AUCPR',\n    stopping_metric='AUCPR'\n    )\n#pipe = Pipeline([(\"standardize\", H2OScaler()),\n#                 (\"pca\", H2OPCA()),\n#                 (\"rf\", auto_ml)])\n\nauto_ml.train(x=useful_features, y=TARGET_VAR, training_frame=train,  fold_column='kfold')","56b20d79":"auto_ml.leaderboard\n# 0.77357 Public score on auc 0.806177\n# 0.807013  0.77357\n# last public score 0.81113 0.809487","b1f2e1ef":"auto_ml.leaderboard\nleader = auto_ml.leaderboard","f5809cdf":"mc_plot = auto_ml.model_correlation_heatmap(train)","db337131":"model = h2o.get_model(leader[3,\"model_id\"]) # get gbm model \nlearning_curve_plot = model.learning_curve_plot()","99ecec14":"preds = auto_ml.leader.predict(test)","50164df3":"## create submission\nsubmission = pd.DataFrame({\n    'id': X_test.index,\n    'claim': preds.as_data_frame().p1\n})\nsubmission.head()","069fefe7":"submission.to_csv('h2o_submission.csv', index=False)","83028fd3":"## Declare Constants","7aa6060b":"# Check with default approach ","643deb3f":"# Houskeeping","5e279553":"# Casual hack of h2o automl\nDirectly but good use cases when doing ensembling , specially when doing stacking.","d70536ad":"# Feature Engineering"}}