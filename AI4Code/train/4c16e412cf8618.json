{"cell_type":{"4442d8af":"code","bc383274":"code","6a514e79":"code","c665dfae":"code","94e3ba71":"code","9eaf0da4":"code","9a5950a7":"code","6d8d4012":"code","04210b6b":"code","1286ff62":"code","a62ce5be":"code","1105b1aa":"code","28c48d62":"code","552ae260":"code","595202af":"code","370656b8":"code","a0215ee1":"code","3b425b89":"code","c8006b57":"code","3c3052cc":"code","81f183e2":"code","fcde99b3":"code","f45c5400":"code","9c8ebe37":"code","878bcf06":"code","8192d084":"code","0c967462":"code","4bcbd585":"code","b8f04654":"code","44e97f7e":"code","fb3a7146":"code","4d785772":"code","57d5aced":"code","ecf671ab":"code","2f17fef0":"code","83487ee0":"code","a901aa04":"code","7355c043":"code","8e118533":"code","4fe82233":"code","2a176cd1":"code","69feaafb":"code","57c3a3ec":"code","cf22fdf4":"code","e6b52b44":"code","28c374a2":"code","a92a57a7":"code","c0adbfce":"code","9e4476a7":"code","cb4615c0":"code","65c3a77f":"code","8ed238bc":"code","8238aa20":"code","cdd7e0ea":"code","48b2403f":"code","b8506239":"code","a304cfd6":"code","ba8380f9":"code","09ae326f":"code","e61dc20a":"code","aae91c42":"code","7a92c8fa":"code","836e6b6d":"code","7f7f5484":"code","f82ac1ba":"code","eb48932d":"code","e891940a":"code","456a1b11":"code","44732048":"code","954feeb1":"code","d306c3af":"code","d5fc530e":"code","63832f7c":"code","aa8b86d2":"code","ac988496":"code","dda300c1":"code","c7a08a07":"code","67f55e0b":"code","6a331656":"code","24c5c61c":"code","c6a86edd":"code","2c3d3bbc":"code","7d898512":"code","eec976ea":"code","c741adb0":"code","5c120ec7":"code","01b600d6":"code","5cd2ecef":"code","1303975b":"code","fd511f64":"code","75da3f57":"code","5b815301":"code","1c342bb9":"code","6280aee6":"code","82ead7e0":"code","94b41177":"code","f120c1f1":"code","ce5c51e6":"code","c7d3ba31":"code","aa10ffed":"code","2ef66deb":"code","ac0d5562":"code","5da03f5c":"code","bbeba599":"code","84057517":"code","2c546312":"code","5d3350d8":"code","4a96270d":"code","a26b3eaf":"code","d559520c":"code","a2105616":"code","ac9aa0cb":"code","16c6c4cd":"code","d925bd52":"code","a78b8b4e":"code","17bd488f":"code","273d9ad3":"code","2ca950a1":"code","4c0be1f9":"code","fefc1a3f":"code","378906cb":"code","c03e8241":"code","35d874cc":"code","1955065c":"code","57ef26ac":"code","2532356c":"code","2b24b36d":"code","0ae90afc":"markdown","31aed013":"markdown","cc6b10b4":"markdown","fb9e8bd7":"markdown","e7ab6ae5":"markdown","51f617c7":"markdown","961a752a":"markdown","53cb961c":"markdown","11be9035":"markdown","5e816c91":"markdown","f240b916":"markdown","91bb166e":"markdown","47df53bb":"markdown","edf2e89e":"markdown","1bf3efd9":"markdown","426032c4":"markdown","38bcfd6e":"markdown","169e7e9f":"markdown","a04b46e6":"markdown","3964c48b":"markdown","d6777a78":"markdown","72a8bdac":"markdown","bb32637f":"markdown","b15e4767":"markdown","3cac0976":"markdown","36ab407e":"markdown","6dd0c1f6":"markdown","21dbb2dc":"markdown","45e8dbaa":"markdown","3b76aa2c":"markdown","0ce6e4de":"markdown","329aea13":"markdown","a95fdb83":"markdown","6b2ea231":"markdown","3ecf91ac":"markdown","4d0b1118":"markdown","3912d123":"markdown","a68cca0f":"markdown","dd0233cd":"markdown","ca644f04":"markdown","8d17e09d":"markdown","85885050":"markdown","18e781c5":"markdown","25381cee":"markdown","c992251a":"markdown","8d6f72aa":"markdown","051116b9":"markdown","2a799fb0":"markdown","492104ae":"markdown","ce6956b7":"markdown"},"source":{"4442d8af":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\n# from plotly import plotly #deprecated, now installed chart_studio using pip install chart_studio.plotly\nimport chart_studio.plotly as plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()\nfrom collections import Counter","bc383274":"project_data = pd.read_csv('..\/input\/donor-choose-dataset\/train_data.csv')\nresource_data = pd.read_csv('..\/input\/donor-choose-dataset\/resources.csv')","6a514e79":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","c665dfae":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(2)","94e3ba71":"# PROVIDE CITATIONS TO YOUR CODE IF YOU TAKE IT FROM ANOTHER WEBSITE.\n# https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py\n\n\ny_value_counts = project_data['project_is_approved'].value_counts()\nprint(\"Number of projects thar are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of projects thar are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\nrecipe = [\"Accepted\", \"Not Accepted\"]\n\ndata = [y_value_counts[1], y_value_counts[0]]\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                 horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Nmber of projects that are Accepted and not accepted\")\n\nplt.show()","9eaf0da4":"pd.DataFrame(project_data.groupby(\"school_state\")[\"project_is_approved\"].apply(np.mean)).reset_index().head()","9a5950a7":"# Pandas dataframe groupby count, mean: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n\ntemp = pd.DataFrame(project_data.groupby(\"school_state\")[\"project_is_approved\"].apply(np.mean)).reset_index()\n# if you have data which contain only 0 and 1, then the mean = percentage (think about it)\ntemp.columns = ['state_code', 'num_proposals']\n\n# How to plot US state heatmap: https:\/\/datascience.stackexchange.com\/a\/9620 (this link is not working now)\n\n#updated link : https:\/\/datascience.stackexchange.com\/questions\/9616\/how-to-create-us-state-heatmap\n\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = temp['state_code'],\n        z = temp['num_proposals'].astype(float),\n        locationmode = 'USA-states',\n        text = temp['state_code'],\n        marker = dict(line = dict (color = 'rgb(255,255,255)',width = 2)),\n        colorbar = dict(title = \"% of pro\")\n    ) ]\n\nlayout = dict(\n        title = 'Project Proposals % of Acceptance Rate by US States',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)',\n        ),\n    )\n\nfig = go.Figure(data=data, layout=layout)\noffline.iplot(fig, filename='us-map-heat-map')\n","6d8d4012":"# https:\/\/www.csi.cuny.edu\/sites\/default\/files\/pdf\/administration\/ops\/2letterstabbrev.pdf\ntemp.sort_values(by=['num_proposals'], inplace=True)\nprint(\"States with lowest % approvals\")\nprint(temp.head(5))\nprint('='*50)\nprint(\"States with highest % approvals\")\nprint(temp.tail(5))","04210b6b":"#stacked bar plots matplotlib: https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/bar_stacked.html\ndef stack_plot(data, xtick, col2='project_is_approved', col3='total'):\n    ind = np.arange(data.shape[0])\n    \n    plt.figure(figsize=(20,5))\n    p1 = plt.bar(ind, data[col3].values)\n    p2 = plt.bar(ind, data[col2].values)\n\n    plt.ylabel('Projects')\n    plt.title('Number of projects aproved vs rejected')\n    plt.xticks(ind, list(data[xtick].values))\n    plt.legend((p1[0], p2[0]), ('total', 'accepted'))\n    plt.show()","1286ff62":"def univariate_barplots(data, col1, col2='project_is_approved', top=False):\n    # Count number of zeros in dataframe python: https:\/\/stackoverflow.com\/a\/51540521\/4084039\n    temp = pd.DataFrame(project_data.groupby(col1)[col2].agg(lambda x: x.eq(1).sum())).reset_index()\n\n    # Pandas dataframe grouby count: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n    temp['total'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'total':'count'})).reset_index()['total']\n    temp['Avg'] = pd.DataFrame(project_data.groupby(col1)[col2].agg({'Avg':'mean'})).reset_index()['Avg']\n    \n    temp.sort_values(by=['total'],inplace=True, ascending=False)\n    \n    if top:\n        temp = temp[0:top]\n    \n    stack_plot(temp, xtick=col1, col2=col2, col3='total')\n    print(temp.head(5))\n    print(\"=\"*50)\n    print(temp.tail(5))","a62ce5be":"univariate_barplots(project_data, 'school_state', 'project_is_approved', False)","1105b1aa":"univariate_barplots(project_data, 'teacher_prefix', 'project_is_approved' , top=False)","28c48d62":"univariate_barplots(project_data, 'project_grade_category', 'project_is_approved', top=False)","552ae260":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-pyth on\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())","595202af":"project_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\nproject_data.head(2)","370656b8":"univariate_barplots(project_data, 'clean_categories', 'project_is_approved', top=20)","a0215ee1":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())","3b425b89":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved category wise')\nplt.xticks(ind, list(sorted_cat_dict.keys()))\nplt.show()","c8006b57":"for i, j in sorted_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","3c3052cc":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())","81f183e2":"project_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\nproject_data.head(2)","fcde99b3":"univariate_barplots(project_data, 'clean_subcategories', 'project_is_approved', top=50)","f45c5400":"# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())","9c8ebe37":"# dict sort by value python: https:\/\/stackoverflow.com\/a\/613218\/4084039\nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(sorted_sub_cat_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(sorted_sub_cat_dict.values()))\n\nplt.ylabel('Projects')\nplt.title('% of projects aproved state wise')\nplt.xticks(ind, list(sorted_sub_cat_dict.keys()))\nplt.show()","878bcf06":"for i, j in sorted_sub_cat_dict.items():\n    print(\"{:20} :{:10}\".format(i,j))","8192d084":"#How to calculate number of words in a string in DataFrame: https:\/\/stackoverflow.com\/a\/37483537\/4084039\nword_count = project_data['project_title'].str.split().apply(len).value_counts()\nword_dict = dict(word_count)\nword_dict = dict(sorted(word_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(word_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(word_dict.values()))\n\nplt.ylabel('Numeber of projects')\nplt.xlabel('Numeber words in project title')\nplt.title('Words for each title of the project')\nplt.xticks(ind, list(word_dict.keys()))\nplt.show()","0c967462":"approved_title_word_count = project_data[project_data['project_is_approved']==1]['project_title'].str.split().apply(len)\napproved_title_word_count = approved_title_word_count.values\n\nrejected_title_word_count = project_data[project_data['project_is_approved']==0]['project_title'].str.split().apply(len)\nrejected_title_word_count = rejected_title_word_count.values","4bcbd585":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_title_word_count, rejected_title_word_count])\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project title')\nplt.grid()\nplt.show()","b8f04654":"plt.figure(figsize=(10,3))\nsns.kdeplot(approved_title_word_count,label=\"Approved Projects\", bw=0.6)\nsns.kdeplot(rejected_title_word_count,label=\"Not Approved Projects\", bw=0.6)\nplt.legend()\nplt.show()","44e97f7e":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","fb3a7146":"approved_word_count = project_data[project_data['project_is_approved']==1]['essay'].str.split().apply(len)\napproved_word_count = approved_word_count.values\n\nrejected_word_count = project_data[project_data['project_is_approved']==0]['essay'].str.split().apply(len)\nrejected_word_count = rejected_word_count.values","4d785772":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_word_count, rejected_word_count])\nplt.title('Words for each essay of the project')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Words in project essays')\nplt.grid()\nplt.show()","57d5aced":"plt.figure(figsize=(10,3))\nsns.distplot(approved_word_count, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_word_count, hist=False, label=\"Not Approved Projects\")\nplt.title('Words for each essay of the project')\nplt.xlabel('Number of words in each eassay')\nplt.legend()\nplt.show()","ecf671ab":"# we get the cost of the project using resource.csv file\nresource_data.head(2)","2f17fef0":"# https:\/\/stackoverflow.com\/questions\/22407798\/how-to-reset-a-dataframes-indexes-for-all-groups-in-one-step\nprice_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nprice_data.head(2)","83487ee0":"# join two dataframes in python: \nproject_data = pd.merge(project_data, price_data, on='id', how='left')","a901aa04":"approved_price = project_data[project_data['project_is_approved']==1]['price'].values\n\nrejected_price = project_data[project_data['project_is_approved']==0]['price'].values","7355c043":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([approved_price, rejected_price])\nplt.title('Box Plots of Cost per approved and not approved Projects')\nplt.xticks([1,2],('Approved Projects','Rejected Projects'))\nplt.ylabel('Price')\nplt.grid()\nplt.show()","8e118533":"plt.figure(figsize=(10,3))\nsns.distplot(approved_price, hist=False, label=\"Approved Projects\")\nsns.distplot(rejected_price, hist=False, label=\"Not Approved Projects\")\nplt.title('Cost per approved and not approved Projects')\nplt.xlabel('Cost of a project')\nplt.legend()\nplt.show()","4fe82233":"# http:\/\/zetcode.com\/python\/prettytable\/\nfrom prettytable import PrettyTable\n\n#If you get a ModuleNotFoundError error , install prettytable using: pip3 install prettytable\n\nx = PrettyTable()\nx.field_names = [\"Percentile\", \"Approved Projects\", \"Not Approved Projects\"]\n\nfor i in range(0,101,5):\n    x.add_row([i,np.round(np.percentile(approved_price,i), 3), np.round(np.percentile(rejected_price,i), 3)])\nprint(x)","2a176cd1":"pd.DataFrame(project_data.groupby(\"teacher_number_of_previously_posted_projects\")[\"project_is_approved\"].apply(np.mean)).reset_index().head()","69feaafb":"pd.DataFrame(project_data.groupby(\"teacher_number_of_previously_posted_projects\")[\"project_is_approved\"].apply(np.mean)).reset_index().tail()","57c3a3ec":"# univariate_barplots(project_data, 'teacher_number_of_previously_posted_projects', 'project_is_approved' , top=False)","cf22fdf4":"def hasNumbers(inputString):\n    return any(char.isdigit() for char in inputString)","e6b52b44":"project_data['digits_in_summary']= project_data['project_resource_summary'].apply(hasNumbers)","28c374a2":"temp = pd.DataFrame(project_data.groupby(\"digits_in_summary\")[\"project_is_approved\"].apply(np.mean)).reset_index()","a92a57a7":"temp","c0adbfce":"# PROVIDE CITATIONS TO YOUR CODE IF YOU TAKE IT FROM ANOTHER WEBSITE.\n# https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py\n\n\ny_value_counts = project_data[project_data['digits_in_summary']==True]['project_is_approved'].value_counts()\nprint(\"Number of projects with digits in summary that are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of projects with digits in summary that are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\nrecipe = [\"Accepted\", \"Not Accepted\"]\n\ndata = [y_value_counts[1], y_value_counts[0]]\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                 horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Nmber of projects that are Accepted and not accepted\")\n\nplt.show()","9e4476a7":"univariate_barplots(project_data, 'digits_in_summary', 'project_is_approved', False)","cb4615c0":"project_data.head(2)\n","65c3a77f":"# printing some random essays.\nprint(project_data['essay'].values[0])\nprint(\"=\"*50)\nprint(project_data['essay'].values[150])\nprint(\"=\"*50)\nprint(project_data['essay'].values[1000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[2000])\nprint(\"=\"*50)\nprint(project_data['essay'].values[4999])\nprint(\"=\"*50)\n","8ed238bc":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","8238aa20":"sent = decontracted(project_data['essay'].values[2000])\nprint(sent)\nprint(\"=\"*50)","cdd7e0ea":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","48b2403f":"#remove special character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","b8506239":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","a304cfd6":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(project_data['essay'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())","ba8380f9":"# after preprocesing\npreprocessed_essays[2000]","09ae326f":"# similarly you can preprocess the titles also","e61dc20a":"# printing some random titles.\nprint(project_data['project_title'].values[0])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[165])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[1009])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[2000])\nprint(\"=\"*50)\nprint(project_data['project_title'].values[4999])\nprint(\"=\"*50)\n","aae91c42":"sent = decontracted(project_data['project_title'].values[2000])\nprint(sent)\nprint(\"=\"*50)","7a92c8fa":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","836e6b6d":"#remove special character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","7f7f5484":"sent = ' '.join(e for e in sent.split() if e not in stopwords)\nprint(sent)","f82ac1ba":"# Combining all the above statemennts \nfrom tqdm import tqdm\npreprocessed_titles = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_titles.append(sent.lower().strip())","eb48932d":"# after preprocesing\npreprocessed_titles[2000]","e891940a":"project_data.columns","456a1b11":"# we use count vectorizer to convert the values into one hot encoded features\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(vocabulary=list(sorted_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['clean_categories'].values)\nprint(vectorizer.get_feature_names())\n\n\ncategories_one_hot = vectorizer.transform(project_data['clean_categories'].values)\nprint(\"Shape of matrix after one hot encoding \",categories_one_hot.shape)","44732048":"#verifying the vectors formed using vectorizer\ncategories_one_hot.toarray()[0:5]","954feeb1":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(sorted_sub_cat_dict.keys()), lowercase=False, binary=True)\nvectorizer.fit(project_data['clean_subcategories'].values)\nprint(vectorizer.get_feature_names())\n\n\nsub_categories_one_hot = vectorizer.transform(project_data['clean_subcategories'].values)\nprint(\"Shape of matrix after one hot encoding \",sub_categories_one_hot.shape)","d306c3af":"#verifying the vectors formed using vectorizer\nsub_categories_one_hot.toarray()[0:5]","d5fc530e":"project_data.head(2)","63832f7c":"# Please do the similar feature encoding with state, teacher_prefix and project_grade_category also","aa8b86d2":"#one hot encoding of school state","ac988496":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(set(project_data['school_state'].values)), lowercase=False, binary=True)\nvectorizer.fit(project_data['school_state'].values)\nprint(vectorizer.get_feature_names())\n\n\nschool_state_one_hot = vectorizer.transform(project_data['school_state'].values)\nprint(\"Shape of matrix after one hot encoding \",school_state_one_hot.shape)","dda300c1":"#verifying the vectors formed using vectorizer\nschool_state_one_hot.toarray()[0:5]","c7a08a07":"#one hot encoding of techer_prefix","67f55e0b":"#some values are null in teacher_prefix\n#https:\/\/machinelearningmastery.com\/handle-missing-data-python\/\nprint(project_data['teacher_prefix'].isnull().sum())","6a331656":"#https:\/\/machinelearningmastery.com\/handle-missing-data-python\/\n# fill missing values with mean column values\nproject_data['teacher_prefix'].fillna('no_prefix', inplace=True)\n","24c5c61c":"print(project_data['teacher_prefix'].isnull().sum())","c6a86edd":"#removing '.' from the teacher prefix\nteacher_prefix_cleaned = []\nfor grade in tqdm(project_data['teacher_prefix'].values):\n    grade = grade.replace('.', '')\n    teacher_prefix_cleaned.append(grade)\nproject_data['teacher_prefix']=teacher_prefix_cleaned","2c3d3bbc":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(set(project_data['teacher_prefix'].values)), lowercase=False, binary=True)\nvectorizer.fit(project_data['teacher_prefix'].values)\nprint(vectorizer.get_feature_names())\n\nteacher_prefix_one_hot = vectorizer.transform(project_data['teacher_prefix'].values)\nprint(\"Shape of matrix after one hot encoding \",teacher_prefix_one_hot.shape)","7d898512":"#one hot encoding for project_grade_category","eec976ea":"#verifying the vectors formed using vectorizer\nteacher_prefix_one_hot.toarray()[0:5]","c741adb0":"# preprocessing the project grade category before vectorization  \nfrom tqdm import tqdm\npreprocessed_project_grade_category = []\n# tqdm is for printing the status bar\nfor sentence in tqdm(project_data['project_grade_category'].values):\n    sent = decontracted(sentence)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_project_grade_category.append(sent.lower().strip())","5c120ec7":"project_data['preprocessed_project_grade_category'] = preprocessed_project_grade_category\nproject_data.drop(['project_grade_category'], axis=1, inplace=True)\nproject_data.head(2)","01b600d6":"#checking for the null values\nprint(project_data['preprocessed_project_grade_category'].isnull().sum())","5cd2ecef":"#removing the spaces from the project grade category to form vector using vectorizer\nproject_grade_category_cleaned = []\nfor grade in tqdm(project_data['preprocessed_project_grade_category'].values):\n    grade = grade.replace(' ', '_')\n    project_grade_category_cleaned.append(grade)\nproject_data['preprocessed_project_grade_category']=project_grade_category_cleaned","1303975b":"# we use count vectorizer to convert the values into one hot encoded features\nvectorizer = CountVectorizer(vocabulary=list(set(project_data['preprocessed_project_grade_category'].values)), lowercase=False, binary=True)\nvectorizer.fit(project_data['preprocessed_project_grade_category'].values)\nprint(vectorizer.get_feature_names())\n\nproject_grade_category_one_hot = vectorizer.transform(project_data['preprocessed_project_grade_category'].values)\nprint(\"Shape of matrix after one hot encoding \",project_grade_category_one_hot.shape)\n\n\n# vectorizer_teacher_prefix = CountVectorizer(lowercase=False, binary=True)\n# vectorizer_teacher_prefix.fit(project_data['teacher_prefix'].values.astype('str'))\n# print(vectorizer_teacher_prefix.get_feature_names())\n# teacher_prefix_one_hot = vectorizer_teacher_prefix.transform(project_data['teacher_prefix'].values.astype('str'))\n# print(teacher_prefix_one_hot.toarray()[0:1])\n# print(\"\\nShape of matrix after one hot encodig for teacher prefix \",teacher_prefix_one_hot.shape)","fd511f64":"#verifying the vectors formed using vectorizer\nproject_grade_category_one_hot.toarray()[0:5]","75da3f57":"# We are considering only the words which appeared in at least 10 documents(rows or projects).\nvectorizer = CountVectorizer(min_df=10)\ntext_bow_essays = vectorizer.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix after one hot encodig \",text_bow_essays.shape)","5b815301":"# you can vectorize the title also \n# before you vectorize the title make sure you preprocess it","1c342bb9":"# Similarly you can vectorize for title also  ","6280aee6":"vectorizer = CountVectorizer(min_df=10)\ntext_bow_titles = vectorizer.fit_transform(preprocessed_titles)\nprint(\"Shape of matrix after one hot encodig \",text_bow_titles.shape)","82ead7e0":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10)\ntext_tfidf_essays = vectorizer.fit_transform(preprocessed_essays)\nprint(\"Shape of matrix after one hot encodig \",text_tfidf_essays.shape)","94b41177":"# Similarly you can vectorize for title also  ","f120c1f1":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(min_df=10)\ntext_tfidf_titles = vectorizer.fit_transform(preprocessed_titles)\nprint(\"Shape of matrix after one hot encodig \",text_tfidf_titles.shape)","ce5c51e6":"'''\n# Reading glove vectors in python: https:\/\/stackoverflow.com\/a\/38230349\/4084039\ndef loadGloveModel(gloveFile):\n    print (\"Loading Glove Model\")\n    f = open(gloveFile,'r', encoding=\"utf8\")\n    model = {}\n    for line in tqdm(f):\n        splitLine = line.split()\n        word = splitLine[0]\n        embedding = np.array([float(val) for val in splitLine[1:]])\n        model[word] = embedding\n    print (\"Done.\",len(model),\" words loaded!\")\n    return model\nmodel = loadGloveModel('glove.42B.300d.txt')\n\n# ============================\nOutput:\n    \nLoading Glove Model\n1917495it [06:32, 4879.69it\/s]\nDone. 1917495  words loaded!\n\n# ============================\n\nwords = []\nfor i in preproced_texts:\n    words.extend(i.split(' '))\n\nfor i in preproced_titles:\n    words.extend(i.split(' '))\nprint(\"all the words in the coupus\", len(words))\nwords = set(words)\nprint(\"the unique words in the coupus\", len(words))\n\ninter_words = set(model.keys()).intersection(words)\nprint(\"The number of words that are present in both glove vectors and our coupus\", \\\n      len(inter_words),\"(\",np.round(len(inter_words)\/len(words)*100,3),\"%)\")\n\nwords_courpus = {}\nwords_glove = set(model.keys())\nfor i in words:\n    if i in words_glove:\n        words_courpus[i] = model[i]\nprint(\"word 2 vec length\", len(words_courpus))\n\n\n# stronging variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n\nimport pickle\nwith open('glove_vectors', 'wb') as f:\n    pickle.dump(words_courpus, f)\n\n\n'''","c7d3ba31":"# storing variables into pickle files python: http:\/\/www.jessicayung.com\/how-to-use-pickle-to-save-and-load-variables-in-python\/\n# make sure you have the glove_vectors file\nwith open('..\/input\/donor-choose-dataset\/glove_vectors', 'rb') as f:\n    model = pickle.load(f)\n    glove_words =  set(model.keys())","aa10ffed":"# average Word2Vec\n# compute average word2vec for each review.\navg_w2v_vectors_essays = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_essays): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    avg_w2v_vectors_essays.append(vector)\n\nprint(len(avg_w2v_vectors_essays))\nprint(len(avg_w2v_vectors_essays[0]))","2ef66deb":"# Similarly you can vectorize for title also ","ac0d5562":"# average Word2Vec\n# compute average word2vec for each review.\navg_w2v_vectors_titles = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_titles): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    cnt_words =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if word in glove_words:\n            vector += model[word]\n            cnt_words += 1\n    if cnt_words != 0:\n        vector \/= cnt_words\n    avg_w2v_vectors_titles.append(vector)\n\nprint(len(avg_w2v_vectors_titles))\nprint(len(avg_w2v_vectors_titles[0]))","5da03f5c":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\ntfidf_model = TfidfVectorizer()\ntfidf_model.fit(preprocessed_essays)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words = set(tfidf_model.get_feature_names())","bbeba599":"# average Word2Vec\n# compute average word2vec for each review.\ntfidf_w2v_vectors_essays = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_essays): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    tfidf_w2v_vectors_essays.append(vector)\n\nprint(len(tfidf_w2v_vectors_essays))\nprint(len(tfidf_w2v_vectors_essays[0]))","84057517":"# Similarly you can vectorize for title also","2c546312":"# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\ntfidf_model = TfidfVectorizer()\ntfidf_model.fit(preprocessed_titles)\n# we are converting a dictionary with word as a key, and the idf as a value\ndictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\ntfidf_words = set(tfidf_model.get_feature_names())","5d3350d8":"# average Word2Vec\n# compute average word2vec for each review.\ntfidf_w2v_vectors_titles = []; # the avg-w2v for each sentence\/review is stored in this list\nfor sentence in tqdm(preprocessed_titles): # for each review\/sentence\n    vector = np.zeros(300) # as word vectors are of zero length\n    tf_idf_weight =0; # num of words with a valid vector in the sentence\/review\n    for word in sentence.split(): # for each word in a review\/sentence\n        if (word in glove_words) and (word in tfidf_words):\n            vec = model[word] # getting the vector for each word\n            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)\/len(sentence.split())))\n            tf_idf = dictionary[word]*(sentence.count(word)\/len(sentence.split())) # getting the tfidf value for each word\n            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n            tf_idf_weight += tf_idf\n    if tf_idf_weight != 0:\n        vector \/= tf_idf_weight\n    tfidf_w2v_vectors_titles.append(vector)\n\nprint(len(tfidf_w2v_vectors_titles))\nprint(len(tfidf_w2v_vectors_titles[0]))","4a96270d":"# check this one: https:\/\/www.youtube.com\/watch?v=0HOqOcln3Z4&t=530s\n# standardization sklearn: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\nfrom sklearn.preprocessing import StandardScaler\n\n# price_standardized = standardScalar.fit(project_data['price'].values)\n# this will rise the error\n# ValueError: Expected 2D array, got 1D array instead: array=[725.05 213.03 329.   ... 399.   287.73   5.5 ].\n# Reshape your data either using array.reshape(-1, 1)\n\nprice_scalar = StandardScaler()\nprice_scalar.fit(project_data['price'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\n# Now standardize the data with above mean and variance.\nprice_standardized = price_scalar.transform(project_data['price'].values.reshape(-1, 1))","a26b3eaf":"price_standardized","d559520c":"#Standarize the numerical data for\n#    - teacher_number_of_previously_posted_projects : numerical\n#    - quantity : numerical\n","a2105616":"teacher_number_of_previously_posted_projects_scalar = StandardScaler()\nteacher_number_of_previously_posted_projects_scalar.fit(project_data['teacher_number_of_previously_posted_projects'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {teacher_number_of_previously_posted_projects_scalar.mean_[0]}, Standard deviation : {np.sqrt(teacher_number_of_previously_posted_projects_scalar.var_[0])}\")\n\n# Now standardize the data with above mean and variance.\nteacher_number_of_previously_posted_projects_standardized = teacher_number_of_previously_posted_projects_scalar.transform(project_data['teacher_number_of_previously_posted_projects'].values.reshape(-1, 1))","ac9aa0cb":"teacher_number_of_previously_posted_projects_standardized","16c6c4cd":"quantity_scalar = StandardScaler()\nquantity_scalar.fit(project_data['quantity'].values.reshape(-1,1)) # finding the mean and standard deviation of this data\nprint(f\"Mean : {quantity_scalar.mean_[0]}, Standard deviation : {np.sqrt(quantity_scalar.var_[0])}\")\n\n# Now standardize the data with above mean and variance.\nquantity_standardized = quantity_scalar.transform(project_data['quantity'].values.reshape(-1, 1))","d925bd52":"quantity_standardized","a78b8b4e":"print(categories_one_hot.shape)\nprint(sub_categories_one_hot.shape)\nprint(school_state_one_hot.shape)\nprint(teacher_prefix_one_hot.shape)\nprint(project_grade_category_one_hot.shape)\nprint(text_bow_essays.shape)\nprint(text_bow_titles.shape)\nprint(text_tfidf_essays.shape)\nprint(text_tfidf_titles.shape)\nprint(price_standardized.shape)\nprint(teacher_number_of_previously_posted_projects_standardized.shape)\nprint(quantity_standardized.shape)\nprint(len(avg_w2v_vectors_essays))  #this vector is a list hence shape is not an attribute for this\nprint(len(avg_w2v_vectors_titles))\nprint(len(tfidf_w2v_vectors_essays))\nprint(len(tfidf_w2v_vectors_titles))","17bd488f":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, text_bow_essays, text_bow_titles, text_tfidf_essays, text_tfidf_titles, avg_w2v_vectors_essays, avg_w2v_vectors_titles, tfidf_w2v_vectors_essays, tfidf_w2v_vectors_titles, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized  ))\nX.shape","273d9ad3":"# this is the example code for TSNE\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\niris = datasets.load_iris()\nx = iris['data']\ny = iris['target']\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\n\nfor_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue', 2:'green'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.show()","2ca950a1":"# please write all of the code with proper documentation and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    ","4c0be1f9":"# this is the code for TSNE with categorical features, numerical features and project_title text feature\nimport numpy as np\nfrom sklearn.manifold import TSNE\n\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized, text_bow_titles ))\n\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\nx = x.toarray()[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n\n# for_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\n\n# https:\/\/stackoverflow.com\/questions\/53723928\/attributeerror-series-object-has-no-attribute-reshape\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\n\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with BOW encoding of project_title feature with perplexity=30\")\nplt.show()","fefc1a3f":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    ","378906cb":"# this is the code for TSNE with categorical features, numerical features and tfidf encoded project_title text feature\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized, text_tfidf_titles ))\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\nx = x.toarray()[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n\n# for_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\n\n# https:\/\/stackoverflow.com\/questions\/53723928\/attributeerror-series-object-has-no-attribute-reshape\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\n\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with TFIDF encoding of project_title feature with perplexity=30\")\nplt.show()","c03e8241":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    ","35d874cc":"# this is the code for TSNE with categorical features, numerical features and avg w2v encoded project_title text feature\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized, avg_w2v_vectors_titles ))\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\nx = x.toarray()[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n\n# for_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\n\n# https:\/\/stackoverflow.com\/questions\/53723928\/attributeerror-series-object-has-no-attribute-reshape\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\n\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with AVG W2V encoding of project_title feature with perplexity=30\")\nplt.show()","1955065c":"# please write all the code with proper documentation, and proper titles for each subsection\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label\n    ","57ef26ac":"# this is the code for TSNE with categorical features, numerical features and tfidf weighted w2v encoded project_title text feature\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized, tfidf_w2v_vectors_titles ))\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\nx = x.toarray()[0:5000]\ny = project_data['project_is_approved'][0:5000]\n\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n\n# for_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\n\n# https:\/\/stackoverflow.com\/questions\/53723928\/attributeerror-series-object-has-no-attribute-reshape\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\n\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with TFIDF Weighted W2V encoding of project_title feature with perplexity=30\")\nplt.show()","2532356c":"# this is the code for TSNE with categorical features, numerical features and tfidf weighted w2v encoded project_title text feature\nimport numpy as np\nfrom sklearn.manifold import TSNE\nfrom sklearn import datasets\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# x = hstack((categories_one_hot, sub_categories_one_hot, school_state_one_hot, teacher_prefix_one_hot,  project_grade_category_one_hot, text_bow_essays, text_bow_titles, text_tfidf_essays, text_tfidf_titles, avg_w2v_vectors_essays, avg_w2v_vectors_titles, tfidf_w2v_vectors_essays, tfidf_w2v_vectors_titles, price_standardized, teacher_number_of_previously_posted_projects_standardized, quantity_standardized  ))\n# if x is a sparse matrix you need to pass it as X_embedding = tsne.fit_transform(x.toarray()) , .toarray() will convert the sparse matrix into dense matrix\nx = X.tocsr()[0:5000]\nx = x.toarray()\ny = project_data['project_is_approved'][0:5000]\n\n\ntsne = TSNE(n_components=2, perplexity=30, learning_rate=200)\n\nX_embedding = tsne.fit_transform(x)\n\n# for_tsne = np.hstack((X_embedding, y.reshape(-1,1)))\n\n# https:\/\/stackoverflow.com\/questions\/53723928\/attributeerror-series-object-has-no-attribute-reshape\nfor_tsne = np.hstack((X_embedding, y.values.reshape(-1,1)))\n\nfor_tsne_df = pd.DataFrame(data=for_tsne, columns=['Dimension_x','Dimension_y','Score'])\ncolors = {0:'red', 1:'blue'}\nplt.scatter(for_tsne_df['Dimension_x'], for_tsne_df['Dimension_y'], c=for_tsne_df['Score'].apply(lambda x: colors[x]))\nplt.title(\"TSNE with all the features concatenated with perplexity=30\")\nplt.show()","2b24b36d":"# Write few sentences about the results that you obtained and the observations you made.","0ae90afc":"#### 1.4.2.7 Using Pretrained Models: TFIDF weighted W2V","31aed013":"<h2> 2.1 TSNE with `BOW` encoding of `project_title` feature <\/h2>","cc6b10b4":" <font color=#F4274F>If you are using any code snippet from the internet, you have to provide the reference\/citations, as we did in the above cells. Otherwise, it will be treated as plagiarism without citations.<\/font>","fb9e8bd7":"### 1.4.1 Vectorizing Categorical data","e7ab6ae5":"<h2> 2.2 TSNE with `TFIDF` encoding of `project_title` feature <\/h2>","51f617c7":"<h3><font color='red'>1.2.9 Univariate Analysis: teacher_number_of_previously_posted_projects<\/font><\/h3>","961a752a":"<h2> 2.4 TSNE with `TFIDF Weighted W2V` encoding of `project_title` feature <\/h2>","53cb961c":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_4:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","11be9035":"### Summary","5e816c91":"#### 1.4.2.1 Bag of words","f240b916":"### 1.3.1 Essay Text","91bb166e":"#### 1.4.2.5 Using Pretrained Models: Avg W2V","47df53bb":"<h2> 2.3 TSNE with `AVG W2V` encoding of `project_title` feature <\/h2>","edf2e89e":"I have done the tsne for the default parameters and for the some different parameters values, but points seems to be scattered all over randomly for the project title feature.\n\nAll the encoding methods like avg w2v, tfidf w2v, BOW, TFIDF have almost same tsne plots.\n\nThere are some points lying seperately from the rest when we use tsne with all the features concatenated.\n","1bf3efd9":"### 1.2.5 Univariate Analysis: project_subject_subcategories","426032c4":"<h4><font color='red'> 1.4.2.9 Using Pretrained Models: TFIDF weighted W2V on `project_title`<\/font><\/h4>","38bcfd6e":"- https:\/\/www.appliedaicourse.com\/course\/applied-ai-course-online\/lessons\/handling-categorical-and-numerical-features\/","169e7e9f":"### 1.4.4 Merging all the above features","a04b46e6":"<h3><font color='red'>1.3.2 Project title Text<\/font><\/h3>","3964c48b":"Please do this on your own based on the data analysis that was done in the above cells\n\nCheck if the `presence of the numerical digits` in the `project_resource_summary` effects the acceptance of the project or not. If you observe that `presence of the numerical digits` is helpful in the classification, please include it for further process or you can ignore it.","d6777a78":"<h3><font color='red'>1.2.10 Univariate Analysis: project_resource_summary<\/font><\/h3>","72a8bdac":"### 1.2.1 Univariate Analysis: School State","bb32637f":"### Summary","b15e4767":"### 1.2.8 Univariate Analysis: Cost per project","3cac0976":"### 1.2.6 Univariate Analysis: Text features (Title)","36ab407e":"- we need to merge all the numerical vectors i.e categorical, text, numerical vectors","6dd0c1f6":"<h2> 2.5 Summary <\/h2>","21dbb2dc":"### 1.2.7 Univariate Analysis: Text features (Project Essay's)","45e8dbaa":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data\n       \n       - quantity : numerical\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","3b76aa2c":"<h4><font color='red'> 1.4.2.2 Bag of Words on `project_title`<\/font><\/h4>","0ce6e4de":"## 1.1 Reading Data","329aea13":"### 1.2.2 Univariate Analysis: teacher_prefix","a95fdb83":"<h4><font color='red'> 1.4.2.6 Using Pretrained Models: AVG W2V on `project_title`<\/font><\/h4>","6b2ea231":"#### 1.4.2.3 TFIDF vectorizer","3ecf91ac":"The more number of previously posted projects shows high rate of project approval.\nIt can be a helpful feature for modeling\n","4d0b1118":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","3912d123":"The projects having digits in summary have higher approval rate. This can be used as a feature for modeling.\n\nAlso, there are less numbers of projects with digits in summary. But the approval rate is high in projects with digits in summary","a68cca0f":"### 1.2.4 Univariate Analysis: project_subject_categories","dd0233cd":"## 1. 4 Preparing data for models","ca644f04":"<h1><font color='red'>Assignment 2: Apply TSNE<font><\/h1>","8d17e09d":"<h4><font color='red'> 1.4.2.4 TFIDF Vectorizer on `project_title`<\/font><\/h4>","85885050":"## 1.3 Text preprocessing","18e781c5":"### 1.4.2 Vectorizing Text data","25381cee":"__SUMMARY: Every state has greater than 80% success rate in approval__","c992251a":"### 1.4.3 Vectorizing Numerical features","8d6f72aa":"<h2> 2.4 TSNE with all the features Concatenated <\/h2>","051116b9":"# 1.2 Data Analysis","2a799fb0":"Please do this on your own based on the data analysis that was done in the above cells","492104ae":"### 1.2.3 Univariate Analysis: project_grade_category","ce6956b7":"<ol> \n    <li> In the above cells we have plotted and analyzed many features. Please observe the plots and write the observations in markdown cells below every plot.<\/li>\n    <li> EDA: Please complete the analysis of the feature: teacher_number_of_previously_posted_projects<\/li>\n    <li>\n        <ul>Build the data matrix using these features \n            <li>school_state : categorical data (one hot encoding)<\/li>\n            <li>clean_categories : categorical data (one hot encoding)<\/li>\n            <li>clean_subcategories : categorical data (one hot encoding)<\/li>\n            <li>teacher_prefix : categorical data (one hot encoding)<\/li>\n            <li>project_grade_category : categorical data (one hot encoding)<\/li>\n            <li>project_title : text data (BOW, TFIDF, AVG W2V, TFIDF W2V)<\/li>\n            <li>price : numerical<\/li>\n            <li>teacher_number_of_previously_posted_projects : numerical<\/li>\n         <\/ul>\n    <\/li>\n    <li> Now, plot FOUR t-SNE plots with each of these feature sets.\n        <ol>\n            <li>categorical, numerical features + project_title(BOW)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF)<\/li>\n            <li>categorical, numerical features + project_title(AVG W2V)<\/li>\n            <li>categorical, numerical features + project_title(TFIDF W2V)<\/li>\n        <\/ol>\n    <\/li>\n    <li> Concatenate all the features and Apply TNSE on the final data matrix <\/li>\n    <li> <font color='blue'>Note 1: The TSNE accepts only dense matrices<\/font><\/li>\n    <li> <font color='blue'>Note 2: Consider only 5k to 6k data points to avoid memory issues. If you run into memory error issues, reduce the number of data points but clearly state the number of datat-poins you are using<\/font><\/li>\n<\/ol>"}}