{"cell_type":{"0541bd3a":"code","544e52f6":"code","419dca75":"code","d0a9df91":"code","54c5d24b":"code","8c58fce7":"code","fb6328dd":"code","959467ce":"code","f77d9d52":"code","5f81445a":"code","79c147c7":"code","d217e405":"code","19d5b5e3":"code","4646c7d4":"code","482998e1":"markdown","42dc188f":"markdown","6e706409":"markdown","9860a673":"markdown","8602859a":"markdown","79c2aafb":"markdown","6a556f35":"markdown","0a58dba8":"markdown","bc1161be":"markdown","8eee7154":"markdown","0ec4a1f0":"markdown","b9d73925":"markdown","2d2abe13":"markdown"},"source":{"0541bd3a":"# SETUP. You don't need to worry for now about what this code does or how it works. If you're ever curious about the \n# code behind these exercises, it's available under an open source license here: https:\/\/github.com\/Kaggle\/learntools\/\nimport sys; sys.path.insert(0, '..\/input\/learntools\/pseudo_learntools')\nfrom learntools.python import binder; binder.bind(globals())\nfrom learntools.python.ex7 import *\nprint('Setup complete.')","544e52f6":"# Import the jimmy_slots submodule\nfrom learntools.python import jimmy_slots\n# Call the get_graph() function to get Jimmy's graph\ngraph = jimmy_slots.get_graph()\ngraph","419dca75":"help(graph.__format__)","d0a9df91":"def prettify_graph(graph):\n    \"\"\"Modify the given graph according to Jimmy's requests: add a title, make the y-axis\n    start at 0, label the y-axis. (And, if you're feeling ambitious, format the tick marks\n    as dollar amounts using the \"$\" symbol.)\n    \"\"\"\n    graph.set_title(\"Results of 500 slot machine pulls\")\n    graph.set_ylim(0)\n    graph.set_ylabel(\"Balance\")\n    graph.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))\n    # Complete steps 2 and 3 here\n\ngraph = jimmy_slots.get_graph()\nprettify_graph(graph)\ngraph","54c5d24b":"q1.solution()","8c58fce7":"def best_items(racers):\n    \"\"\"Given a list of racer dictionaries, return a dictionary mapping items to the number\n    of times those items were picked up by racers who finished in first place.\n    \"\"\"\n    winner_item_counts = {}\n    for i in range(len(racers)):\n        # The i'th racer dictionary\n        racer = racers[i]\n        # We're only interested in racers who finished in first\n        if racer['finish'] == 1:\n            for i in racer['items']:\n                # Add one to the count for this item (adding it to the dict if necessary)\n                if i not in winner_item_counts:\n                    winner_item_counts[i] = 0\n                winner_item_counts[i] += 1\n\n        # Data quality issues :\/ Print a warning about racers with no name set. We'll take care of it later.\n        if racer['name'] is None:\n            print(\"WARNING: Encountered racer with unknown name on iteration {}\/{} (racer = {})\".format(\n                i+1, len(racers), racer['name'])\n                 )\n    return winner_item_counts","fb6328dd":"sample = [\n    {'name': 'Peach', 'items': ['green shell', 'banana', 'green shell',], 'finish': 3},\n    {'name': 'Bowser', 'items': ['green shell',], 'finish': 1},\n    {'name': None, 'items': ['mushroom',], 'finish': 2},\n    {'name': 'Toad', 'items': ['green shell', 'mushroom'], 'finish': 1},\n]\nbest_items(sample)","959467ce":"# Import luigi's full dataset of race data\nfrom learntools.python.luigi_analysis import full_dataset\n\n# Fix me!\ndef best_items(racers):\n    winner_item_counts = {}\n    for i in range(len(racers)):\n        # The i'th racer dictionary\n        racer = racers[i]\n        # We're only interested in racers who finished in first\n        if racer['finish'] == 1:\n            for j in racer['items']:\n                # Add one to the count for this item (adding it to the dict if necessary)\n                if i not in winner_item_counts:\n                    winner_item_counts[j] = 0\n                winner_item_counts[j] += 1\n\n        # Data quality issues :\/ Print a warning about racers with no name set. We'll take care of it later.\n        if racer['name'] is None:\n            print(\"WARNING: Encountered racer with unknown name on iteration {}\/{} (racer = {})\".format(\n                i+1, len(racers), racer['name'])\n                 )\n    return winner_item_counts\n\n#print(full_dataset)\n# Try analyzing the imported full dataset\nbest_items(full_dataset)","f77d9d52":"q2.hint()","5f81445a":"q2.solution()","79c147c7":"def score_hand(hand):\n    score = 0\n    aces = 0\n    for card in hand:\n        if card == 'A':\n            aces+=1\n        elif (card == \"K\" or card == \"Q\" or card == \"J\"):\n            score+=10\n        else:\n            score+=int(card)\n    \n    #print(aces)\n    while aces > 0:\n        if aces == 1:\n            if 21-score >= 11:\n                score+= 11\n            else:\n                score+=1\n        else:\n            if 21-score >= 12:\n                score+=11\n            else:\n                score+=1\n        aces-=1\n    return score\n\ndef blackjack_hand_greater_than(hand_1, hand_2):\n    \"\"\"\n    Return True if hand_1 beats hand_2, and False otherwise.\n    \n    In order for hand_1 to beat hand_2 the following must be true:\n    - The total of hand_1 must not exceed 21\n    - The total of hand_1 must exceed the total of hand_2 OR hand_2's total must exceed 21\n    \n    Hands are represented as a list of cards. Each card is represented by a string.\n    \n    When adding up a hand's total, cards with numbers count for that many points. Face\n    cards ('J', 'Q', and 'K') are worth 10 points. 'A' can count for 1 or 11.\n    \n    When determining a hand's total, you should try to count aces in the way that \n    maximizes the hand's total without going over 21. e.g. the total of ['A', 'A', '9'] is 21,\n    the total of ['A', 'A', '9', '3'] is 14.\n    \n    Examples:\n    >>> blackjack_hand_greater_than(['K'], ['3', '4'])\n    True\n    >>> blackjack_hand_greater_than(['K'], ['10'])\n    False\n    >>> blackjack_hand_greater_than(['K', 'K', '2'], ['3'])\n    False\n    \"\"\"\n    pass\n    return(score_hand(hand_1) <= 21 and (score_hand(hand_1) > score_hand(hand_2) or score_hand(hand_2)>21))\n\n\n#print(score_hand(['A','3','Q','Q'])    )\n\nq3.check()","d217e405":"q3.hint()\nq3.solution()","19d5b5e3":"from learntools.python import roulette\nimport random\n\ndef random_and_superstitious(wheel):\n    \"\"\"Interact with the given wheel over 100 spins with the following strategy:\n    - if the wheel lands on 4, don't bet on the next spin\n    - otherwise, bet on a random number on the wheel (from 0 to 10)\n    \"\"\"\n    last_number = 0\n    while wheel.num_remaining_spins() > 0:\n        if last_number == 4:\n            # Unlucky! Don't bet anything.\n            guess = None\n        else:\n            guess = random.randint(0, 10)\n        last_number = wheel.spin(number_to_bet_on=guess)\n\nroulette.evaluate_roulette_strategy(random_and_superstitious)","4646c7d4":"from learntools.python import roulette\nimport random\n\ndef my_agent(wheel):\n    counts = {}\n    sequels = {}\n    best_sequels = {}\n    \n    guess = None\n    last_num = wheel.spin(number_to_bet_on=guess)\n    \n    while wheel.num_remaining_spins() > 0:\n        new_num = wheel.spin(number_to_bet_on=guess)\n        \n        #count how many times we saw the last number\n        if last_num not in sequels:\n            counts[last_num] = 1\n            sequels[last_num]={}\n        else:\n            counts[last_num] += 1\n\n        #count how many times we've seen teh new number after the old number\n        if new_num not in sequels[last_num]:\n            sequels[last_num][new_num] = 1\n        else:\n            sequels[last_num][new_num] +=1    \n\n        #keep a record of the new number we've seen most often after the old number\n        if last_num not in best_sequels:\n            best_sequels[last_num] = [new_num,1]\n        else:\n            if(best_sequels[last_num][1] < sequels[last_num][new_num] ):\n                best_sequels[last_num] = [new_num,sequels[last_num][new_num]]\n        \n        #if our most frequent number to show up after the new number has probability of more than 34%, bet on it\n        if (new_num in best_sequels and best_sequels[new_num][1]\/counts[new_num] > 0.34):\n            guess = best_sequels[new_num][0]\n        else:\n            guess = None\n            \n        last_num = new_num\n\nroulette.evaluate_roulette_strategy(my_agent)","482998e1":"Welcome to the exercises for day 7 (to go along with the day 7 tutorial notebook on [imports and objects](https:\/\/www.kaggle.com\/colinmorris\/learn-python-challenge-day-7))\n\nThere are only four problems today, but they're all pretty tricky, so be on guard! If you get stuck, don't hesitate to head to the [Learn Forum](https:\/\/kaggle.com\/learn-forum) to discuss.\n\nRun the setup code below before working on the questions (and run it again if you leave this notebook and come back later).","42dc188f":"## 2. <span title=\"Spicy\" style=\"color: coral\">\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f<\/span>\n\nLuigi is trying to perform an analysis to determine the best items for winning races on the Mario Kart circuit. He has some data in the form of lists of dictionaries that look like...\n\n    [\n        {'name': 'Peach', 'items': ['green shell', 'banana', 'green shell',], 'finish': 3},\n        {'name': 'Bowser', 'items': ['green shell',], 'finish': 1},\n        # Sometimes the racer's name wasn't recorded\n        {'name': None, 'items': ['mushroom',], 'finish': 2},\n        {'name': 'Toad', 'items': ['green shell', 'mushroom'], 'finish': 1},\n    ]\n\n`'items'` is a list of all the power-up items the racer picked up in that race, and `'finish'` was their placement in the race (1 for first place, 3 for third, etc.).\n\nHe wrote the function below to take a list like this and return a dictionary mapping each item to how many times it was picked up by first-place finishers.","6e706409":"## 1.\n\nAfter completing day 5 of the Learn Python Challenge, Jimmy noticed that, according to his `estimate_average_slot_payout` function, the slot machines at the Learn Python Casino are actually rigged *against* the house, and are profitable to play in the long run.\n\nStarting with $200 in his pocket, Jimmy has played the slots 500 times, recording his new balance in a list after each spin. He used Python's `matplotlib` library to make a graph of his balance over time:","9860a673":"As you can see, he's hit a bit of bad luck recently. He wants to tweet this along with some choice emojis, but, as it looks right now, his followers will probably find it confusing. He's asked if you can help him make the following changes:\n\n1. Add the title \"Results of 500 slot machine pulls\"\n2. Make the y-axis start at 0. \n3. Add the label \"Balance\" to the y-axis\n\nAfter calling `type(graph)` you see that Jimmy's graph is of type `matplotlib.axes._subplots.AxesSubplot`. Hm, that's a new one. By calling `dir(graph)`, you find three methods that seem like they'll be useful: `.set_title()`, `.set_ylim()`, and `.set_ylabel()`. \n\nUse these methods to complete the function `prettify_graph` according to Jimmy's requests. We've already checked off the first request for you (setting a title).\n\n(Remember: if you don't know what these methods do, use the `help()` function!)","8602859a":"He tried it on a small example list above and it seemed to work correctly:","79c2aafb":"How much profit are you able to reach? Post your results on the forums to see how your strategy compares to others'.","6a556f35":"## The end\n\nYou've finished the Learn Python Challenge. Congrats!\n\nThough you'd see this message just from scrolling down, even if you didn't write a line of code. So maybe you've done it, and maybe not.\n\nIf you have questions from the challenge, or just want to keep talking about it, come to the [Learn Forum](https:\/\/kaggle.com\/learn-forum).\n\nIf you want to keep building your skills with our Data Science courses, check out [Kaggle Learn](https:\/\/www.kaggle.com\/Learn).\n\nThanks for sticking with the Challenge all the way to the end. I hope you've had fun. :)","0a58dba8":"**Bonus:** Can you format the numbers on the y-axis so they look like dollar amounts? e.g. $200 instead of just 200.\n\n(We're not going to tell you what method(s) to use here. You'll need to go digging yourself with `dir(graph)` and\/or `help(graph)`.)","bc1161be":"# Exercises","8eee7154":"However, when he tried running it on his full dataset, the program crashed with a `TypeError`.\n\nCan you guess why? Try running the code cell below to see the error message Luigi is getting. Once you've identified the bug, fix it in the cell below (so that it runs without any errors).\n\nHint: Luigi's bug is similar to one we encountered in the [day 7 tutorial](https:\/\/www.kaggle.com\/colinmorris\/learn-python-challenge-day-7) when we talked about star imports.","0ec4a1f0":"## 4. <span title=\"Spicy\" style=\"color: coral\">\ud83c\udf36\ufe0f\ud83c\udf36\ufe0f<\/span>\n\nIn day 6 of the challenge, you heard a tip-off that the roulette tables at the Learn Python Casino had some quirk where the probability of landing on a particular number was partly dependent on the number the wheel most recently landed on. You wrote a function `conditional_roulette_probs` which returned a dictionary with counts of how often the wheel landed on `x` then `y` for each value of `x` and `y`.\n\nAfter analyzing the output of your function, you've come to the following conclusion: for each wheel in the casino, there is exactly one pair of numbers `a` and `b`, such that, after the wheel lands on `a`, it's significantly more likely to land on `b` than any other number. If the last spin landed on anything other than `a`, then it acts like a normal roulette wheel, with equal probability of landing on any of the 11 numbers (* the casino's wheels are unusually small - they only have the numbers from 0 to 10 inclusive).\n\nIt's time to exploit this quirk for fun and profit. You'll be writing a roulette-playing agent to beat the house. When called, your agent will have an opportunity to sit down at one of the casino's wheels for 100 spins. You don't need to bet on every spin. For example, the agent below bets on a random number unless the last spin landed on 4 (in which case it just watches).","b9d73925":"## 3. <span title=\"A bit spicy\" style=\"color: darkgreen \">\ud83c\udf36\ufe0f<\/span>\n\nSuppose we wanted to create a new type to represent hands in blackjack. One thing we might want to do with this type is overload the comparison operators like `>` and `<=` so that we could use them to check whether one hand beats another. e.g. it'd be cool if we could do this:\n\n```python\n>>> hand1 = BlackjackHand(['K', 'A'])\n>>> hand2 = BlackjackHand(['7', '10', 'A'])\n>>> hand1 > hand2\nTrue\n```\n\nWell, we're not going to do all that in this question (defining custom classes was a bit too advanced to make the cut for the Learn Python Challenge), but the code we're asking you to write in the function below is very similar to what we'd have to write if we were defining our own `BlackjackHand` class. (We'd put it in the `__gt__` magic method to define our custom behaviour for `>`.)\n\nFill in the body of the `blackjack_hand_greater_than` function according to the docstring.","2d2abe13":"As you might have guessed, our random\/superstitious agent bleeds money. Can you write an agent that beats the house? (i.e. can you make \"Average gain per simulation\" positive?)\n\nFor more information on the type of object your agent will be passed, try calling `help(roulette.RouletteSession)`. You can also call `help(roulette.evaluate_roulette_strategy)` to see some optional parameters you can change regarding the conditions under which we test your  agent.\n\nHINT: it might help to go back to your [day 6 exercise notebook](https:\/\/www.kaggle.com\/kernels\/fork\/962743) and review your code for `conditional_roulette_probs` for inspiration."}}