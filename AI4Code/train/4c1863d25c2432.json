{"cell_type":{"c083c4d4":"code","c3ae3100":"code","626c3abe":"code","4858bb31":"code","4bab2064":"code","ae0cd0aa":"code","2fa2a31d":"code","901bb5df":"code","f0fbcf9e":"code","303e4bed":"code","5f7f83f5":"code","cace62c7":"code","f5d2d73c":"code","1abe9d46":"code","71846039":"code","68cde1b1":"code","f8710398":"code","51259e7b":"code","9c2ae79c":"code","0e94e699":"code","78ee0ea2":"code","9e6f1711":"code","fec0acc2":"code","50f36096":"code","39d28e90":"code","9715602f":"code","977372d3":"code","8bb4bd11":"code","2370c7f6":"code","9da5af9d":"markdown","dc330729":"markdown","0cef3ad9":"markdown","6788eb6c":"markdown","4112bfaf":"markdown","5195b9d2":"markdown","10fef76c":"markdown","b4244488":"markdown","6ab613d1":"markdown","59c8c038":"markdown","be6a0911":"markdown","899df188":"markdown","51e84a3a":"markdown","93a70b02":"markdown","7f3373f7":"markdown","f6202f84":"markdown","371ff4ec":"markdown","fd0ad281":"markdown","c3abe759":"markdown","95e628d4":"markdown","5ae57702":"markdown","05746921":"markdown","7b64727b":"markdown"},"source":{"c083c4d4":"# First to import libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport keras","c3ae3100":"### for Kaggle, if you work in the kaggle site\ntrainpath = '..\/input\/intel-image-classification\/seg_train\/'\ntestpath = '..\/input\/intel-image-classification\/seg_test\/'\npredpath = '..\/input\/intel-image-classification\/seg_pred\/'\n\n### for Jupyter if the data in the same path of the jupyter\n#trainpath = '.\/Data\/seg_train\/'\n#testpath = '.\/Data\/seg_test\/'\n#predpath = '.\/Data\/seg_pred\/'","626c3abe":"for folder in  os.listdir(trainpath + 'seg_train') : \n    files = gb.glob(pathname= str( trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","4858bb31":"for folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str( testpath +'seg_test\/\/' + folder + '\/*.jpg'))\n    print(f'For testing data , found {len(files)} in folder {folder}')","4bab2064":"files = gb.glob(pathname= str(predpath +'seg_pred\/*.jpg'))\nprint(f'For Prediction data , found {len(files)}')","ae0cd0aa":"code = {'buildings':0 ,'forest':1,'glacier':2,'mountain':3,'sea':4,'street':5}\n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x  ","2fa2a31d":"size = []\nfor folder in  os.listdir(trainpath +'seg_train') : \n    files = gb.glob(pathname = str(trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","901bb5df":"size = []\nfor folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str( testpath +'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","f0fbcf9e":"size = []\nfiles = gb.glob(pathname= str(predpath +'seg_pred\/*.jpg'))\nfor file in files: \n    image = plt.imread(file)\n    size.append(image.shape)\npd.Series(size).value_counts()","303e4bed":"s = 100","5f7f83f5":"code = {'buildings':0 ,'forest':1,'glacier':2,'mountain':3,'sea':4,'street':5}\n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x  ","cace62c7":"X_train = []\ny_train = []\nfor folder in  os.listdir(trainpath +'seg_train') : \n    files = gb.glob(pathname= str( trainpath +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])","f5d2d73c":"print(f'we have {len(X_train)} items in X_train')","1abe9d46":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_train),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_train[i])   \n    plt.axis('off')\n    plt.title(getcode(y_train[i]))","71846039":"X_test = []\ny_test = []\nfor folder in  os.listdir(testpath +'seg_test') : \n    files = gb.glob(pathname= str(testpath + 'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])","68cde1b1":"print(f'we have {len(X_test)} items in X_test')","f8710398":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_test),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_test[i])    \n    plt.axis('off')\n    plt.title(getcode(y_test[i]))","51259e7b":"X_pred = []\nfiles = gb.glob(pathname= str(predpath + 'seg_pred\/*.jpg'))\nfor file in files: \n    image = cv2.imread(file)\n    image_array = cv2.resize(image , (s,s))\n    X_pred.append(list(image_array)) ","9c2ae79c":"print(f'we have {len(X_pred)} items in X_pred')","0e94e699":"plt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')","78ee0ea2":"X_train = np.array(X_train)\nX_test = np.array(X_test)\nX_pred_array = np.array(X_pred)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\n\nprint(f'X_train shape  is {X_train.shape}')\nprint(f'X_test shape  is {X_test.shape}')\nprint(f'X_pred shape  is {X_pred_array.shape}')\nprint(f'y_train shape  is {y_train.shape}')\nprint(f'y_test shape  is {y_test.shape}')","9e6f1711":"KerasModel = keras.models.Sequential([\n        keras.layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(s,s,3)),\n        keras.layers.Conv2D(150,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Conv2D(120,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(80,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(50,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Flatten() ,    \n        keras.layers.Dense(120,activation='relu') ,    \n        keras.layers.Dense(100,activation='relu') ,    \n        keras.layers.Dense(50,activation='relu') ,        \n        keras.layers.Dropout(rate=0.5) ,            \n        keras.layers.Dense(6,activation='softmax') ,    \n        ])","fec0acc2":"KerasModel.compile(optimizer ='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","50f36096":"print('Model Details are : ')\nprint(KerasModel.summary())","39d28e90":"epochs = 50\nThisModel = KerasModel.fit(X_train, y_train, epochs=epochs,batch_size=64,verbose=1)","9715602f":"ModelLoss, ModelAccuracy = KerasModel.evaluate(X_test, y_test)\n\nprint('Test Loss is {}'.format(ModelLoss))\nprint('Test Accuracy is {}'.format(ModelAccuracy ))","977372d3":"y_pred = KerasModel.predict(X_test)\n\nprint('Prediction Shape is {}'.format(y_pred.shape))","8bb4bd11":"y_result = KerasModel.predict(X_pred_array)\n\nprint('Prediction Shape is {}'.format(y_result.shape))","2370c7f6":"plt.figure(figsize=(20,20))\n\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : \n    plt.subplot(6,6,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')\n    plt.title(getcode(np.argmax(y_result[i])))","9da5af9d":"# Checking Images\nNow we need to check the images sizes, to know ow they looks like\nSince we have 6 categories, we first need to create a dictionary with their names & indices, also create a function to get the code back","dc330729":"Now to build the CNN model by Keras, Using Conv2D layers, MaxPooling & Denses","0cef3ad9":"Almost same ratios, now to prediction images","6788eb6c":"Great, Now how many items in X_train","4112bfaf":"How is the final loss and accuracy?","5195b9d2":"Now how about the images sizes in train folder","10fef76c":"Ok ,How about the test folder","b4244488":"Now to read all pictues in six categories in training folder, ans use OpenCV to resize it , and not to forget to assign the y value , from the predefined function","6ab613d1":"Great!\n","59c8c038":"# Building The Model\u00b6\n\nNow we need to build the model to train our data\n\nFirst to convert the data into arrays using numpy","be6a0911":"Also we have have a look to random pictures in X_train , and to adjust their title using the y value","899df188":"Now to train the model, Lets use 50 epochs now","51e84a3a":"Ok ,Almost all of them are 150,150,3 ,How about test images?!","93a70b02":"# Open Folders","7f3373f7":"Now to compile the model, Using adam optimizer, & sparse categorical crossentropy loss","f6202f84":"Great , now to repeat same steps exactly in test data","371ff4ec":"Also with Prediction data , without having title of the course","fd0ad281":"Ok, Only ~ 80% accuracy & can be increased by tuning the hyperparameters\n\nNow to predict X test","c3abe759":"And to show random redicted pictures And its predicting category","95e628d4":"Now for prediction folder","5ae57702":"Ok ,Since almost all of pictures are 150,150,3, We can feel comfort in using all pictures in our model, After resizing it in a specific amount\n\n# Reading Images\n\nNow it's time to read all images & convert it into arrays\n\nFirst we'll create a variables, which refer to size, so we can change it easily\n\nLet's use now size = 100 , so it will be suitable amount to contain accuracy without losing so much time in training","05746921":"So, How the model looks like?","7b64727b":"Now let's first check the Train folder to have a look to its content"}}