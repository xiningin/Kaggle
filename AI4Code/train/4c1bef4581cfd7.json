{"cell_type":{"f80e800d":"code","86919543":"code","f3d8a26d":"code","3c8871f7":"code","e52ceffb":"code","11262cc8":"code","9d53398d":"code","ec9ae270":"code","1f85c2ff":"code","89b463c4":"code","3d5bfce3":"code","6ce749a3":"code","23400031":"code","75e4d3aa":"code","5cf5f8f0":"code","1a4e4bc6":"code","e9df7614":"code","22690eb9":"code","1334f9d9":"code","48541b9f":"code","af98fb9c":"markdown","dd9938a5":"markdown","a83368e4":"markdown","dd98b137":"markdown","5b9385a1":"markdown","e8f1f394":"markdown","2720a684":"markdown","f83d0897":"markdown","04a9229b":"markdown","69a61f24":"markdown","f8affaf2":"markdown"},"source":{"f80e800d":"!pip install -Uqq fastbook\n!pip install -q forgebox","86919543":"# from fastbook import *\nfrom forgebox.imports import *\nfrom IPython.display import Image, display\nfrom fastai.vision.widgets import *\nfrom fastai.vision.all import *","f3d8a26d":"%%html\n<style>\n    pre {\n        white-space: pre-wrap;\n    }\n  <\/style>","3c8871f7":"#tell colab to wrap text in cells\n\n# from IPython.display import HTML, display\n\n# def set_css():\n#   display(HTML('''\n#   <style>\n#     pre {\n#         white-space: pre-wrap;\n#     }\n#   <\/style>\n#   '''))\n# get_ipython().events.register('pre_run_cell', set_css)\n","e52ceffb":"!ls \/kaggle\/input\/best-artworks-of-all-time","11262cc8":"path = Path('\/kaggle\/input\/best-artworks-of-all-time')","9d53398d":"csvDF = pd.read_csv(path\/'artists.csv')\ncsvDF[\"name\"] = csvDF[\"name\"].apply(lambda x:x.replace(\" \",\"_\"))\ncsvDF.head()","ec9ae270":"artists = (path\/\"images\"\/\"images\").ls()\nartists","1f85c2ff":"name_to_genre = dict(csvDF[[\"name\",\"genre\"]].groupby(\"name\").agg(list).reset_index().values)\nname_to_genre","89b463c4":"files = get_image_files(path\/\"images\"\/\"images\")\nfiles","3d5bfce3":"def get_x(f): return str(f)\n\ndef get_y(f): \n    artist = f.parent.name\n    genres = name_to_genre.get(artist)\n    genres = [] if genres is None else genres\n    return [artist]+genres","6ce749a3":"for i in files[1230:1250]:\n    print([get_x(i), get_y(i)])","23400031":"dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=RandomSplitter(valid_pct=0.3, seed=42),\n                    get_x = get_x, \n                    get_y = get_y,\n                    item_tfms = RandomResizedCrop(128, min_scale=0.35))","75e4d3aa":"dsets = dblock.datasets(files)\ndsets.train[1000]","5cf5f8f0":"dls = dblock.dataloaders(files)\ndls.show_batch(nrows=5, ncols=2)","1a4e4bc6":"THRESHOLD = .2\n\nlearn = cnn_learner(dls, resnet50, metrics=[\n    partial(accuracy_multi),\n    RecallMulti(),\n    PrecisionMulti()])\nlearn.fine_tune(2, base_lr=3e-3, freeze_epochs=3)","e9df7614":"final_layer = learn.model[-1][-1].weight.data.cpu().numpy()","22690eb9":"from sklearn.manifold import TSNE\n# from sklearn.decomposition import PCA\nlessdim=TSNE(n_components=2)\n# lessdim = PCA(n_components=2)\nresult = lessdim.fit_transform(final_layer)","1334f9d9":"X = result[:,0]\nY = result[:,1]\n\nplt.figure(figsize=(32,32))\nplt.scatter(X, Y)\nfor t, x, y in zip(dsets.train.vocab, X, Y):\n    genres = name_to_genre.get(t)\n    if genres is not None:\n        t=f\"{t}({genres})\"\n    plt.text(x,y,t, color=np.random.rand(3)*0.7, fontsize=15)\nplt.show()","48541b9f":"learn.export('.\/gdrive\/MyDrive\/ai\/Artists\/PaintingGenreRanResizeCrop128.pkl')\n\n","af98fb9c":"# Paintings by Artists\/Genre - Multi Category","dd9938a5":"# MULTI LABEL MODEL","a83368e4":"Prepping the dataframe from the list of files:","dd98b137":"Test images(from 1st model with Artists only as labels:","5b9385a1":"Modified from [Kelly's good work here](https:\/\/github.com\/kellyslpang\/unpackAIworkbooks\/blob\/main\/Kelly_Paintings_multicat.ipynb)\n\n[Dataset from kaggle](https:\/\/www.kaggle.com\/ikarus777\/best-artworks-of-all-time)\n\nThe dataset is organised in directories where each directory contains the paintings of 1 artist.\n\nThe aim is to train the model to identify in whose style the painting is most resembles. ","e8f1f394":"Putting together the datablock:","2720a684":"Preparing the CSV to lookup Genre based on artist:","f83d0897":"### Imports and Setup","04a9229b":"Train:","69a61f24":"Perform a grouping by","f8affaf2":"### Preparing the data"}}