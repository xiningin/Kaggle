{"cell_type":{"5e78def3":"code","c5431ca7":"code","29cba22e":"code","792ed925":"code","ea207b36":"code","6db9d2df":"code","7ec02ad6":"code","b2c5868c":"code","6334bb4a":"code","cee741a6":"code","43c3658d":"code","62abdc1f":"code","3699f036":"code","4d6e4cef":"code","e9b6eed0":"code","f8b32d47":"code","b1690d37":"code","7e034224":"code","58785d1c":"code","f34ab967":"code","845b249d":"code","deddea23":"code","c2204d77":"code","0cdefc0c":"code","dcc042e9":"code","acf31a0d":"code","0719c8a4":"code","50f7fb19":"code","74e59a53":"code","e10a08a3":"code","e99c90aa":"code","d6d0ec18":"code","34528aff":"code","d3df3d0f":"markdown","78dd56a0":"markdown","ea38c017":"markdown","631f9af4":"markdown","f583d650":"markdown","45cdd4c4":"markdown","94530143":"markdown","10e960fa":"markdown","d606a4e3":"markdown","da0f9f29":"markdown","f0117a49":"markdown","1aeb0e6c":"markdown","e7f42057":"markdown","e769e7b5":"markdown","724a38bb":"markdown","1a6024f4":"markdown"},"source":{"5e78def3":"# ALL OF OUR IMPORTS WILL GO RIGHT HERE IN THIS CELL \nimport os \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\nfrom sklearn.model_selection import StratifiedShuffleSplit, StratifiedKFold\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","c5431ca7":"# FUNCTION TO LOAD OUR DATA \n\ndef load_dataset():\n    csv_path = os.path.join(\"..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\n    return pd.read_csv(csv_path)","29cba22e":"# LOADING THE DATASET \nplacement = load_dataset()","792ed925":"# looking at the database placement \nplacement","ea207b36":"# database info\nplacement.info()","6db9d2df":"# database decription \nplacement.describe()","7ec02ad6":"# histograms of each numeric attribute \nplacement.hist(bins=50, figsize=(20,15))","b2c5868c":"\nc=placement['status'].values.copy()\nc[c==\"Not Placed\"]=0\nc[c==\"Placed\"]=1\nplacement.plot(kind='scatter',y='hsc_p',x='degree_p',s='mba_p',c=c,cmap=plt.get_cmap(\"jet\"), colorbar=True)\nplt.legend([\"Not Placed\",\"Placed\"])\nplt.show()","6334bb4a":"# # confusion matrix -- focusing on the true negatives \ndef score(y, y_pred):\n    return precision_score(y, y_pred), recall_score(y, y_pred), f1_score(y, y_pred)","cee741a6":"strat = StratifiedShuffleSplit(n_splits=1, test_size=0.15, random_state=42)","43c3658d":"for train_index, test_index in strat.split(placement, placement['status']):\n    strat_train = placement.loc[train_index]\n    strat_test = placement.loc[test_index]","62abdc1f":"x_train = strat_train.drop(\"status\", axis=1)\ny_train = strat_train[\"status\"]\nx_test = strat_test.drop(\"status\", axis=1)\ny_test = strat_test[\"status\"]","3699f036":"num_attributes = [\n    \"sl_no\",\n    \"ssc_p\",\n    \"hsc_p\",\n    \"degree_p\",\n    \"etest_p\",\n    \"mba_p\",\n    \"salary\"\n]\n\ncat_attributes = [\n    \"gender\",\n    \"ssc_b\",\n    \"hsc_b\",\n    \"hsc_s\",\n    \"degree_t\",\n    \"workex\",\n    \"specialisation\"\n]","4d6e4cef":"num_pipline = Pipeline([\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    ('std_scalar', StandardScaler())\n])\n\npipline = ColumnTransformer([\n    (\"num\", num_pipline, num_attributes),\n    (\"cat\", OneHotEncoder(), cat_attributes)\n])","e9b6eed0":"proccessed_train_x = pipline.fit_transform(x_train)\nproccessed_test_x = pipline.fit_transform(x_test)","f8b32d47":"y_text_to_num = {\n    \"status\": {\"Placed\": 0, \"Not Placed\": 1}\n}\n\ny_train = y_train.to_frame()\ny_test = y_test.to_frame()\n\n\nproccessed_train_y = y_train.replace(y_text_to_num)\nproccessed_test_y = y_test.replace(y_text_to_num)","b1690d37":"proccessed_train_y = proccessed_train_y[\"status\"].values\nproccessed_test_y = proccessed_test_y[\"status\"].values","7e034224":"FINAL_X = pipline.fit_transform(placement.drop(\"status\", axis=1))\nFINAL_Y = placement[\"status\"].values","58785d1c":"split = StratifiedKFold(n_splits=10)","f34ab967":"log_reg = LogisticRegression()\nlog_reg.fit(proccessed_train_x, proccessed_train_y)","845b249d":"lr_pred_y = log_reg.predict(proccessed_test_x)","deddea23":"tree_reg = DecisionTreeClassifier()\ntree_reg.fit(proccessed_train_x, proccessed_train_y)","c2204d77":"tr_pred_y = tree_reg.predict(proccessed_test_x)","0cdefc0c":"gau_naiv_bay = GaussianNB()\ngau_naiv_bay.fit(proccessed_train_x, proccessed_train_y)","dcc042e9":"gnb_pred_y = gau_naiv_bay.predict(proccessed_test_x)","acf31a0d":"ran_for_cla = RandomForestClassifier()\nran_for_cla.fit(proccessed_train_x, proccessed_train_y)","0719c8a4":"rfc_pred_y = ran_for_cla.predict(proccessed_test_x)","50f7fb19":"k_near_nei = KNeighborsClassifier()\nk_near_nei.fit(proccessed_train_x, proccessed_train_y)","74e59a53":"knn_pred_y = k_near_nei.predict(proccessed_test_x)","e10a08a3":"sup_vec_mac = SVC()\nsup_vec_mac.fit(proccessed_train_x, proccessed_train_y)","e99c90aa":"svm_pred_y = sup_vec_mac.predict(proccessed_test_x)","d6d0ec18":"models = [\n    (\"Logistic Regression\", lr_pred_y),\n    (\"Decision Tree Classifier\", tr_pred_y),\n    (\"Gaussian Naive Bayes\", gnb_pred_y),\n    (\"Random Forest Classifier\", rfc_pred_y),\n    (\"K Nearest Neighbors Classifier\", knn_pred_y),\n    (\"Support Vector Machine Classifier\", svm_pred_y)\n]\n\nfor info in models:\n    model = info[0]\n    y_pred = info[1]\n    print(model)\n    print(\"These are the predicted values from the model: \", y_pred)\n    print(\"These are the correct output values:           \", proccessed_test_y)\n    print(\"The score for this model (precision, recall, f1_score): \", score(proccessed_test_y, y_pred))\n    print(\"\\n\\n\")","34528aff":"models = [\n    (\"Logistic Regression\", lr_pred_y),\n    (\"Decision Tree Classifier\", tr_pred_y),\n    (\"Gaussian Naive Bayes\", gnb_pred_y),\n    (\"Random Forest Classifier\", rfc_pred_y),\n    (\"K Nearest Neighbors Classifier\", knn_pred_y),\n    (\"Support Vector Machine Classifier\", svm_pred_y)\n]\n\nfor info in models:\n    model = info[0]\n    y_pred = info[1]\n    print(model)\n    print(\"The confusion matrix is:  \\n\", confusion_matrix(proccessed_test_y, y_pred))\n    print(\"\\n\")","d3df3d0f":"Since we will be dealing with labeled training examples where every instance comes with expected output, this will be a supervised learning task. It is a classification task as well since we aiming to classify if a studnet will get placement or not. \n\nOkay, let's get the data!","78dd56a0":"If we take Random Forest Classifier for example. Its confusion matrix has the least amount of false positives and false negatives, and highest amount of true positives and true negatives. Hence when you look at the scoring, RFC has the highest score at about 0.95. ","ea38c017":"This part is just to show how a confusion_matrix works.\n\n\nNow, for our data science metrics, we will be using the confusion_matrix. It does take a bit of time to wrap your head around it. So make sure you visit this line (https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html) to get a better understanding. Or just YouTube it. YouTube + Google is everything!\n\nEssentially, the confusion_matrix tells us the true positives, false positives, true negatives, and false negatives. ","631f9af4":"Lets use the matplotlib to now get a better understanding of the data.","f583d650":"The models we will use: \n\n- Logistic Regression \n- Decision Tree \n- Gaussian Naive Bayes\n- Random Forest Classifier \n- K Nearest Neighbors Classifier\n- Support Vector Machine Classifier","45cdd4c4":"We can see that ssc_p, hsc_p, degree_p, and mba_p are fairly bell shaped. Meaning that they have a normal distribution where points are as likely to happen on one side of the average as on the other side. The salary attribute is clearly a right-skewed histogram. This is expected as most salaries tend to be close to be the same or similar and only a few will end up having a salary that is very high. ","94530143":"What does .info() and .describe() tell us? \n\nWe can see from .info() that the salary attribute has 148 instances which is less that 215. Thats not okay so we will need to take care of that later. Just something to notice. \n\n.describe(), as you can see gives us a couple things. We wont go through all of them as they are self explanatory. 25%, 50% and 75% correspond to the percentiles. For example, 25% of students have degree_p lower than 61. ","10e960fa":"We are hired by a university that wants us to build a model that will help predict if a student will get work placement or not. For the sake of simplicity, they dont give us any further information, so we are free to approach this in any way we want. ","d606a4e3":"OKAY! So, we looking at the big picture and now we have the data. \n\nNext step? Lets get a better understanding of the data. We will start of by looking at the dataset. ","da0f9f29":"Now lets split the dataset into training and testing sets. There a multiple ways to do this. \n\nWe will use the sklearn stratify method. \n\ndocumentation for StratifiedShuffleSplit -- https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.StratifiedShuffleSplit.html ","f0117a49":"Lets show the scores for each model using the score() we built earlier. ","1aeb0e6c":"The data has been downloaded from Kaggle (https:\/\/www.kaggle.com\/benroshan\/factors-affecting-campus-placement?select=Placement_Data_Full_Class.csv). I have it in my directory so we will start by using Pandas to load the data. ","e7f42057":"Hello! My name is Laith. We are going to work on a machine learning (ML) project from beginning to end :) We will be using Pandas and Sklearn for the most part, both are very useful for ML\/data analysis. Since we are using Pandas and Sklearn, yes you have guessed it, we will by coding in Python! ","e769e7b5":"What are we looking at? \n\nThis table is 215x15. Meaning that there are 215 students (instances) and 15 different columns (attributes). \n\nThe columns: \n- sl_no: serial number \n- gender: gender \n- ssc_p: secondary school percentage (grade 10)\n- ssc_b: secondary school board \n- hsc_p: higher secondary school percentage (grade 11&12)\n- hsc_b: higher secondary school board \n- hsc_s: specialization in higher secondary school \n- degree_p: degree percentage \n- degree_t: undergrad degree \n- workex: work experience \n- etest_p: employability test percentage\n- specialisation: Postgrad degree \n- mba_p: MBA percentage \n- status: if they are placed or not \n- salary: salary \n\nWe can get more info by simply calling .info() to get a better understanding of the attributes. And .describe() to see more numarical summary of the data.","724a38bb":"We are now going to use Transformation Piplines, comes from sklearn. \n\nWe need to fill in the missing salary values (we saw this earlier), and change all categorical attributes to numarical since models learn best that way. \n\nEssentially what Piplines are, is that they hand the Transformation of each attribute to the right values. \n\nDocumentation -- https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.pipeline.Pipeline.html ","1a6024f4":"Steps we will go through:\n\n- Looking at the big picture. What are we trying to accomplish? \n- Get the data \n- Play around with the data to get a better understanding of it \n- Clean the data \n- Selecting our model to train \n- evaluate our models performance \n- present our solution \n\nOkay, let's begin! "}}