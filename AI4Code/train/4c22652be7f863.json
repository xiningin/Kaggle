{"cell_type":{"bcd2116d":"code","6f7a5ac2":"code","2b56f212":"code","462414fe":"code","a0d314a6":"code","2a07e4db":"code","9ddbae91":"code","0a2cfc2d":"code","6b3c037f":"code","54e07935":"code","96a086e2":"code","831baecb":"code","c06568b4":"code","7f4430db":"code","759a8120":"code","f0a7e6d4":"code","011a34e0":"code","1d98cee5":"code","dead61b9":"code","ad34912e":"code","266f410a":"code","d01ce027":"code","4bbed784":"code","ca91511c":"markdown","8f42cdbd":"markdown","3a843eca":"markdown","ef4fb8cb":"markdown","afdaadd8":"markdown","bcbc75be":"markdown","c87856b0":"markdown","d94398d2":"markdown","c6786d92":"markdown","89853a62":"markdown","4c9ecf9a":"markdown","79dd54e4":"markdown","94ecbbdd":"markdown","7d365a0e":"markdown","37996bf7":"markdown","46218911":"markdown","d2c0fe40":"markdown","ef5512f1":"markdown","74675b61":"markdown","8101d75f":"markdown","c2de3a30":"markdown","7b9f8dcf":"markdown","8c3883ae":"markdown","a79ad916":"markdown","8aebb670":"markdown","7a5e9c34":"markdown","47e8fb5c":"markdown","3f4ff66a":"markdown","2fceebc5":"markdown","3f86d69d":"markdown","7d8e5f9e":"markdown","348d8445":"markdown","749ffb4f":"markdown","26a86a75":"markdown"},"source":{"bcd2116d":"from numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom matplotlib import pyplot\nimport pandas as pd\nimport numpy as np","6f7a5ac2":"dataset = pd.read_csv('..\/input\/credit-data\/credit_data.csv')\ndataset = dataset.dropna()\n\nX = dataset.iloc[:,1:-1].values\ny = dataset.iloc[:,-1].values","2b56f212":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","462414fe":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a0d314a6":"def get_stacking_reg():\n    #dfine base models\n    level0 = list()\n    level0.append(('knn',KNeighborsRegressor()))\n    level0.append(('cart',DecisionTreeRegressor()))\n    level0.append(('svm',SVR()))\n    level0.append(('random forest',RandomForestRegressor()))\n    #define meta leaner model\n    level1 = LinearRegression()\n    #define the stacking ensemble\n    model_reg = StackingRegressor(estimators=level0, final_estimator=level1, cv=5)\n    return model_reg","2a07e4db":"def get_models_reg():\n    models_reg = dict()\n    models_reg['knn'] = KNeighborsRegressor()\n    models_reg['cart'] = DecisionTreeRegressor()\n    models_reg['svm'] = SVR()\n    models_reg['random forest'] = RandomForestRegressor()\n    models_reg['stacking'] = get_stacking_reg()\n    return models_reg","9ddbae91":"def evaluate_model_reg(model_reg, X_train, y_train):\n\tcv_reg = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n\tscores_reg = cross_val_score(model_reg, X_train, y_train, scoring='neg_mean_absolute_error', cv=cv_reg, n_jobs=-1, error_score='raise')\n\treturn scores_reg","0a2cfc2d":"models_reg = get_models_reg()","6b3c037f":"results_reg, names = list(), list()\nfor name, model_reg in models_reg.items():\n\tscores_reg = evaluate_model_reg(model_reg, X_train, y_train)\n\tresults_reg.append(scores_reg)\n\tnames.append(name)\n\tprint('>%s %.3f (%.3f)' % (name, mean(scores_reg), std(scores_reg)))","54e07935":"pyplot.boxplot(results_reg, labels=names, showmeans=True)\npyplot.show()","96a086e2":"model_reg.fit(X_train, y_train)","831baecb":"y_pred_reg = model_reg.predict(X_test)\ny_pred_reg = (y_pred_reg > 0.5)\nprint(np.concatenate((y_pred_reg.reshape(len(y_pred_reg),1), y_test.reshape(len(y_test),1)),1))","c06568b4":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm_reg = confusion_matrix(y_test, y_pred_reg)\nprint(cm_reg)\naccuracy_score(y_test, y_pred_reg)","7f4430db":"from numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import StackingClassifier\nfrom matplotlib import pyplot\nimport numpy as np\nimport pandas as pd","759a8120":"def get_stacking_cl():\n\t# define the base models\n\tlevel0 = list()\n\tlevel0.append(('lr', LogisticRegression()))\n\tlevel0.append(('knn', KNeighborsClassifier()))\n\tlevel0.append(('cart', DecisionTreeClassifier()))\n\tlevel0.append(('svm', SVC()))\n\tlevel0.append(('bayes', GaussianNB()))\n\t# define meta learner model\n\tlevel1 = LogisticRegression()\n\t# define the stacking ensemble\n\tmodel_cl = StackingClassifier(estimators=level0, final_estimator=level1, cv=5)\n\treturn model_cl","f0a7e6d4":"def get_models_cl():\n    models_cl = dict()\n    models_cl['lr'] = LogisticRegression()\n    models_cl['knn'] = KNeighborsClassifier()\n    models_cl['cart'] = DecisionTreeClassifier()\n    models_cl['svm'] = SVC()\n    models_cl['bayes'] = GaussianNB()\n    models_cl['stacking'] = get_stacking_cl()\n    return models_cl","011a34e0":"def evaluate_model_cl(model_cl, X_train, y_train):\n\tcv_cl = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\tscores_cl = cross_val_score(model_cl, X_train, y_train, scoring='accuracy', cv=cv_cl, n_jobs=-1, error_score='raise')\n\treturn scores_cl","1d98cee5":"models_cl = get_models_cl()","dead61b9":"results_cl, names = list(), list()\nfor name, model_cl in models_cl.items():\n\tscores_cl = evaluate_model_cl(model_cl, X, y)\n\tresults_cl.append(scores_cl)\n\tnames.append(name)\n\tprint('>%s %.3f (%.3f)' % (name, mean(scores_cl), std(scores_cl)))","ad34912e":"pyplot.boxplot(results_cl, labels=names, showmeans=True)\npyplot.show()","266f410a":"model_cl.fit(X_train, y_train)","d01ce027":"y_pred_cl = model_cl.predict(X_test)\nprint(np.concatenate((y_pred_cl.reshape(len(y_pred_cl),1), y_test.reshape(len(y_test),1)),1))","4bbed784":"cm_cl = confusion_matrix(y_test, y_pred_cl)\nprint(cm_cl)\naccuracy_score(y_test, y_pred_cl)","ca91511c":"Plot performance","8f42cdbd":"# Results","3a843eca":"The Regression Stack proved to be 0.75 more effective at predicting whether someone would default than the Classification Stack - although both were highly accurate.","ef4fb8cb":"### Evaluating the regression models\n","afdaadd8":"Creating a the training\/test split","bcbc75be":"Get classification models to evaluate","c87856b0":"### Prepping the regression models","d94398d2":"Stacking ensemble of models","c6786d92":"Plot performance","89853a62":"Importing Libraries","4c9ecf9a":"Fit the model to training data","79dd54e4":"### Prepping the data","94ecbbdd":"List of classification models to evaluate","7d365a0e":"Load the dataset","37996bf7":"List of models to evaluate","46218911":"Evaluate classification models and store results","d2c0fe40":"# Regression Stack","ef5512f1":"Evaluate regression models model using cross-validation","74675b61":"Import libraries","8101d75f":"Stacking ensemble of classification methods","c2de3a30":"Get regression models to evaluate","7b9f8dcf":"Evaluate classification models using cross-validation","8c3883ae":"### Testing the regression stack","a79ad916":"Confusion Matrix and Accuracy","8aebb670":"Predicting test results","7a5e9c34":"### Classification Stack","47e8fb5c":"### Prepping the classifictaion models","3f4ff66a":"Evaluate regression models and store the results","2fceebc5":"### Evaluating the classification models","3f86d69d":"### Testing the classification stack","7d8e5f9e":"Feature Scaling","348d8445":"Predicting the results","749ffb4f":"Confusion Matrix and Accuracy","26a86a75":"Fit classification model to the training data"}}