{"cell_type":{"221bdb9a":"code","795752af":"code","b53f772c":"code","3ecfeaeb":"code","45bfd54e":"code","a183716c":"code","06522898":"code","eeddaa6f":"code","416e1909":"code","a2fb24e4":"code","f0507959":"code","c63ed358":"code","0d6a3edd":"code","01008e96":"code","3b68444d":"code","50a58dd8":"code","95f7f0e5":"code","37a65253":"code","9f4f5a7e":"code","fb625bb2":"code","8ed15408":"code","97ddf53f":"markdown","98cd544e":"markdown","c7d5bdd9":"markdown"},"source":{"221bdb9a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nimport os\nprint(os.listdir(\"..\/input\"))","795752af":"#Libraries imported\nfrom tensorflow import keras\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.models import Model\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.layers import Input, Lambda, Flatten, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n","b53f772c":"train_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/'\ntest_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/'\nval_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/val\/'","3ecfeaeb":"train_normal = train_dir + 'NORMAL\/'\ntrain_pneumonia = train_dir + 'PNEUMONIA\/'","45bfd54e":"from keras.callbacks import ReduceLROnPlateau , ModelCheckpoint , LearningRateScheduler\n#learning rate reduced when val_acc or loss is becomes constant\nlr_reduce = ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=1, verbose=1)","a183716c":"# normal pic\nrand_norm = np.random.randint(0, len(os.listdir(train_normal)))\nnormal_pic = os.listdir(train_normal)[rand_norm]\nnormal_pic_address = train_normal+normal_pic\n\n# pneumonia pic\nrand_norm = np.random.randint(0, len(os.listdir(train_pneumonia)))\npneumonia_pic = os.listdir(train_pneumonia)[rand_norm]\npneumonia_pic_address = train_pneumonia+pneumonia_pic\n\n# load the images\nnormal_load = Image.open(normal_pic_address)\npneumonia_load = Image.open(pneumonia_pic_address)\n\n# plot\nf = plt.figure(figsize= (10,6))\na1 = f.add_subplot(1,2,1)\nimg_plot = plt.imshow(normal_load, cmap='gray')\na1.set_title('Normal')\n\na2 = f.add_subplot(1, 2, 2)\nimg_plot = plt.imshow(pneumonia_load, cmap='gray')\na2.set_title('Pneumonia')","06522898":"vgg = VGG16(input_shape=[150, 150, 3], weights='imagenet', include_top=False)\n\nfor layer in vgg.layers:\n    layer.trainable = False","eeddaa6f":"#added a few layers after this \nflatten1 = Flatten()(vgg.output)\ndense1 = Dense(256, activation=\"relu\")(flatten1)\ndropout1 = Dropout(0.5)(dense1)\nprediction = Dense(2, activation=\"softmax\")(dropout1)\n\nmodel = Model(inputs=vgg.input, outputs=prediction)","416e1909":"model.summary()","a2fb24e4":"#model compilation using adam optimizer\nmodel.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","f0507959":"# loading the images\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                            rotation_range=30,\n                            zoom_range=0.15,\n                            horizontal_flip=True,\n                            fill_mode=\"nearest\")\n\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(train_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size=32,\n                                    class_mode='categorical',\n                                    shuffle=True)\n\nvalidation_set = test_datagen.flow_from_directory(val_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size=32,\n                                    class_mode='categorical',\n                                    shuffle=True)\n\ntest_set = test_datagen.flow_from_directory(test_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size = 32,\n                                    class_mode='categorical')","c63ed358":"#early stopping used if the validation loss does not change for long\nearly_stop = EarlyStopping(monitor='val_loss',patience=3)\n\n#fitting the model with training set and checking accuracy on validation set simultaneously\nhistory = model.fit_generator(training_set,\n                               steps_per_epoch=128,\n                               epochs=6,\n                               validation_data=validation_set,\n                               validation_steps=len(validation_set))","0d6a3edd":"# plot the loss\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(history.history['accuracy'], label='train acc')\nplt.plot(history.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","01008e96":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training Accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation Accuracy')\nplt.title('Training and Validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3b68444d":"model.save('pneumonia_model.h5')","50a58dd8":"img=image.load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0005-0001.jpeg',\n                   target_size=(150,150))","95f7f0e5":"x=image.img_to_array(img)\nx","37a65253":"x=x\/255","9f4f5a7e":"x=np.expand_dims(x,axis=0)\nimg_data=preprocess_input(x)\nimg_data.shape","fb625bb2":"pred = np.argmax(model.predict(img_data), axis=1)\npred","8ed15408":"if(pred==1):\n    print(\"Uninfected\")\nelse:\n    print(\"Infected\")","97ddf53f":"<h3>The achieved accuracy is above 81 percent on an average and the prediction is also correct for test dataset<\/h3>","98cd544e":"<h2>Will use vgg16 model for transfer learning<\/h2>","c7d5bdd9":"<h2>Here we did some analysis of how our pictures exactly look like<\/h2>"}}