{"cell_type":{"57e221fc":"code","6a40d107":"code","9d3ae830":"code","e085ad50":"code","a553585f":"code","ed8b6fa1":"code","5926997f":"code","58f7f281":"code","9217877f":"code","94e5376b":"code","17970b81":"code","eaa92bc5":"code","25b894e0":"code","e6de3186":"code","70e3813f":"code","a60ba44a":"code","a14bf8bb":"code","ad640dcf":"code","b179048e":"code","d5f56b0c":"code","50b65d79":"code","8cdbf934":"code","4ebcf210":"code","1be95d4f":"code","06aa3e22":"code","363f0f43":"code","0fa716ff":"code","71ef82af":"code","6180a932":"code","50e6abbc":"code","1ce78663":"markdown","d7349377":"markdown","1435f066":"markdown","ee6d67ae":"markdown","1e49a224":"markdown","644d6510":"markdown","e8199992":"markdown","4b7477b1":"markdown","b9164dfe":"markdown","4d851ca6":"markdown","2d8171ba":"markdown","ec5456ec":"markdown","46980d44":"markdown","a0704f44":"markdown","e1d4f90e":"markdown","fc3d6ae9":"markdown","07898b2e":"markdown","61ae1754":"markdown","15ede62f":"markdown","8f5a6348":"markdown","058184c7":"markdown","1388ea52":"markdown","bd0c9da7":"markdown","867979b6":"markdown","7b827d41":"markdown"},"source":{"57e221fc":"#library imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport math","6a40d107":"np.random.seed(42)","9d3ae830":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","e085ad50":"train.head()","a553585f":"test.head()","ed8b6fa1":"Y_train = train['label']\nX_train = train.drop(labels = ['label'], axis=1)","5926997f":"Y_train.value_counts()","58f7f281":"X_train.isnull().any().describe()","9217877f":"test.isnull().any().describe()","94e5376b":"X_train = X_train \/ 255.\ntest = test \/ 255.","17970b81":"X_train = X_train.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)","eaa92bc5":"Y_train = keras.utils.to_categorical(Y_train, num_classes=10)","25b894e0":"Y_train","e6de3186":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=42)","70e3813f":"plt.imshow(X_train[0], cmap='binary')\nplt.show()","a60ba44a":"keras.backend.clear_session()\ntf.random.set_seed(42)\nnp.random.seed(42)","a14bf8bb":"from functools import partial\n\nDefaultConv2D = partial(keras.layers.Conv2D, kernel_size=3, activation='relu', padding='same')\n\nmodel = keras.models.Sequential([\n    DefaultConv2D(filters=64, kernel_size=7, input_shape=[28, 28, 1]), \n    keras.layers.MaxPool2D(pool_size=2), \n    DefaultConv2D(filters=128), \n    DefaultConv2D(filters=128), \n    keras.layers.MaxPool2D(pool_size=2), \n    DefaultConv2D(filters=256), \n    DefaultConv2D(filters=256), \n    keras.layers.MaxPool2D(pool_size=2), \n    keras.layers.Flatten(), \n    keras.layers.Dense(units=128, activation='relu'), \n    keras.layers.Dropout(0.5), \n    keras.layers.Dense(units=64, activation='relu'), \n    keras.layers.Dropout(0.5), \n    keras.layers.Dense(units=10, activation='softmax')])","ad640dcf":"optimizer = keras.optimizers.RMSprop(learning_rate=1e-3, rho=0.9, epsilon=1e-8, decay=0.0)\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","b179048e":"learning_rate_reduction_cb = keras.callbacks.ReduceLROnPlateau(\n    monitor='val_accuracy', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","d5f56b0c":"model_checkpoint_cb = keras.callbacks.ModelCheckpoint('cnn_mnist_v1.h5', monitor='val_accuracy', save_best_only=True)\ncallbacks = [learning_rate_reduction_cb, model_checkpoint_cb]","50b65d79":"epochs = 30\nbatch_size = 86","8cdbf934":"data_gen = keras.preprocessing.image.ImageDataGenerator(\n    featurewise_center=False, #set input mean to 0 over dataset\n    samplewise_center=False, #set each sample mean to 0\n    featurewise_std_normalization=False, #divide inputs by std of the dataset\n    samplewise_std_normalization=False, #divide each input by its std\n    zca_whitening=False, #apply ZCA whitening\n    rotation_range=10, #randomly rotate images in the range(degrees, 0 to 180))\n    zoom_range=0.1, #randomly zoom image\n    width_shift_range=0.1, #randomly shift images horizontally (fraction of total width), \n    height_shift_range=0.1, #randomly shift images vertically (fraction of total height), \n    horizontal_flip=False, #randomly flip images\n    vertical_flip=False) #randomly flip images\n\ndata_gen.fit(X_train)","4ebcf210":"history = model.fit_generator(data_gen.flow(X_train, Y_train, batch_size=batch_size), \n                                            epochs=epochs, validation_data=(X_val, Y_val), \n                                            steps_per_epoch=X_train.shape[0]\/\/batch_size,\n                                            callbacks=[callbacks])","1be95d4f":"model = keras.models.load_model('cnn_mnist_v1.h5')\nmodel.evaluate(X_val, Y_val)","06aa3e22":"fig, ax = plt.subplots(2, 1)\nax[0].plot(history.history['loss'], color='b', label='Training loss')\nax[0].plot(history.history['val_loss'], color='r', label='Validation loss')\nax[0].legend(loc='best', shadow=True)\nax[1].plot(history.history['accuracy'], color='b', label='Training accuracy')\nax[1].plot(history.history['val_accuracy'], color='r', label='Validation accuracy')\nax[1].legend(loc='best', shadow=True)\nplt.show()","363f0f43":"def plot_confusion_matrix(cm, classes, title='Confusion Matrix', cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    threshold = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j], horizontalalignment='center', \n                 color='white' if cm[i, j] > threshold else 'black')\n    plt.tight_layout()\n    plt.ylabel('True Label')\n    plt.xlabel('Predicted Label')","0fa716ff":"Y_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred, axis=1)\nY_true = np.argmax(Y_val, axis=1)\nconfusion_matrix = confusion_matrix(Y_true, Y_pred_classes)","71ef82af":"plot_confusion_matrix(confusion_matrix, classes=range(10))","6180a932":"results = model.predict(test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name='Label')","50e6abbc":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv('.\/cnn_mnist_v1.csv',index=False)","1ce78663":"We will reshape the data to [28, 28, 1], since Keras requires an extra dimension in the end which corresponds to channels. MNIST images are gray scaled so it has only one channel:","d7349377":"# 4. Making Prediction","1435f066":"There is no missing values in the dataset.","ee6d67ae":"We will use RMSprop optimizer with its default values:","1e49a224":"## 1.2 Data normalization and reshaping","644d6510":"## 2.1 Define the model","e8199992":"# 2. Model Building","4b7477b1":"The pixel intensity is represented as a byte from 0 to 255, so we will scale this feature simply by dividing by 255, to get floats ranging from 0 to 1:","b9164dfe":"# 3. Model Evaluation","4d851ca6":"## 1.1 Data exploration","2d8171ba":"We will use ReduceLROnPlateau to reduce the learning rate by half if the accuracy is not improved after 3 epochs:","ec5456ec":"# 1. Data Preparation","46980d44":"We will further split the training set into 90% training set & 10% validation set:","a0704f44":"We will encode the labels to one hot vectors:","e1d4f90e":"## 1.4 Splitting into training and validation set","fc3d6ae9":"Here we can see that the model has trouble classifying 4 (misclassifying as 9).","07898b2e":"## 1.3 Label encoding","61ae1754":"## 2.2 Data augmentation","15ede62f":"## 3.1 Training and validation curves","8f5a6348":"To avoid overfitting, we will expand our dataset by altering the training data with small transformations to reproduce variations (e.g., rotated image, not centered image).","058184c7":"Lastly, we will also use ModelCheckpoint callback to keep the model that has achieve the best performance so far:","1388ea52":"## 3.2 Confusion matrix","bd0c9da7":"We have similar counts of target variables.","867979b6":"Note that we set flip to false since it could have lead to misclassification of symmetrical numbers (i.e., 6 and 9).","7b827d41":"We will use the Keras Sequential API to build the model by adding layers one at a time, starting from the input.\n"}}