{"cell_type":{"a8672a8e":"code","69e9bed2":"code","8cf9ec90":"code","5ce9c649":"code","6ebce310":"code","d92f2576":"code","67a76256":"code","270ae4b4":"code","3b34fb96":"code","fa225e78":"code","9dac24ae":"code","8e29d817":"code","80b91baf":"code","36487219":"code","ebec32cf":"code","6ba578d7":"code","9ff7358c":"code","8a668df5":"code","798413ef":"code","2ad354fa":"code","64e40e93":"code","a0db352b":"code","fa7104c3":"markdown","a36c1f55":"markdown","c70a445a":"markdown","30024774":"markdown","e9dbd88d":"markdown","97d1041f":"markdown","0866ec75":"markdown","43c4cc57":"markdown","410d9ae5":"markdown"},"source":{"a8672a8e":"!pip install pyspark==3.0.0\n!pip install h2o_pysparkling_3.0","69e9bed2":"import os\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SparkSession, SQLContext","8cf9ec90":"spark = SparkSession.builder.master(\"local[2]\").appName(\"Loan Loss Predition\").getOrCreate()\nsc = spark.sparkContext\nsc","5ce9c649":"from pysparkling import *\nimport h2o\nhc = H2OContext.getOrCreate()","6ebce310":"import h2o\nprint(h2o.__version__)\nfrom h2o.automl import H2OAutoML\n\nh2o.init(max_mem_size='16G')","d92f2576":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","67a76256":"%%time\ntrain = h2o.import_file(\"loan-default-prediction\/train_v2.csv.zip\")\ntest = h2o.import_file(\"\/kaggle\/input\/loan-default-prediction\/test_v2.csv.zip\")","270ae4b4":"print(f'Size of training set: {train.shape[0]} rows and {train.shape[1]} columns')","3b34fb96":"x = train.columns\ny = 'loss'\nx.remove(y)","fa225e78":"aml = H2OAutoML(max_runtime_secs = 3500, seed = 1, project_name = \"lb_frame\")\naml.train(x = x, y = y, training_frame = train)","9dac24ae":"lb = aml.leaderboard\nlb.head() ","8e29d817":"\naml.leader","80b91baf":"# Get model ids for all models in the AutoML Leaderboard\nmodel_ids = list(aml.leaderboard['model_id'].as_data_frame().iloc[:,0])\n# Get the \"All Models\" Stacked Ensemble model\nse = h2o.get_model([mid for mid in model_ids if \"StackedEnsemble_AllModels\" in mid][0])\n# Get the Stacked Ensemble metalearner model\nmetalearner = h2o.get_model(se.metalearner()['name'])","36487219":"metalearner.coef_norm()","ebec32cf":"metalearner.std_coef_plot()","6ba578d7":"pred = aml.predict(test)\npred.head()","9ff7358c":"h2o.save_model(aml.leader, path = \"\/kaggle\/output\/\")","8a668df5":"fnl = test[['id']]","798413ef":"fnl.as_data_frame()","2ad354fa":"test_fnl = pd.concat([fnl.as_data_frame(),pred.as_data_frame()],axis=1)","64e40e93":"test_fnl.to_csv(\"\/kaggle\/output\/result.csv\",index=False)","a0db352b":"## https:\/\/docs.h2o.ai\/h2o-tutorials\/latest-stable\/tutorials\/pysparkling\/Chicago_Crime_Demo.html","fa7104c3":"# Objective of Competition\n\nThis competition asks you to determine whether a loan will default, as well as the loss incurred if it does default. Unlike traditional finance-based approaches to this problem, where one distinguishes between good or bad counterparties in a binary way, we seek to anticipate and incorporate both the default and the severity of the losses that result. In doing so, we are building a bridge between traditional banking, where we are looking at reducing the consumption of economic capital, to an asset-management perspective, where we optimize on the risk to the financial investor.\n\n# About Data\n\nThis data corresponds to a set of financial transactions associated with individuals. The data has been standardized, de-trended, and anonymized. You are provided with over two hundred thousand observations and nearly 800 features.  Each observation is independent from the previous. \n\nFor each observation, it was recorded whether a default was triggered. In case of a default, the loss was measured. This quantity lies between 0 and 100. It has been normalised, considering that the notional of each transaction at inception is 100. For example, a loss of 60 means that only 40 is reimbursed. If the loan did not default, the loss was 0. You are asked to predict the losses for each observation in the test set.\n\nMissing feature values have been kept as is, so that the competing teams can really use the maximum data available, implementing a strategy to fill the gaps if desired. Note that some variables may be categorical (e.g. f776 and f777).\n\nThe competition sponsor has worked to remove time-dimensionality from the data. However, the observations are still listed in order from old to new in the training set. In the test set they are in random order.\n\n\n#### Unique Identifier :- \n\n* ID \n\n#### Features :- \n\n* F1-F778\n\n#### Target Variable :-\n\n* loss \n\n# Evaluation metric\n\nThis competition is evaluated on the mean absolute error MAE ","a36c1f55":"#     Loan Default Prediction - Imperial College London\n","c70a445a":"# Leaderboard\nNext, we will view the AutoML Leaderboard. Since we specified a leaderboard_frame in the H2OAutoML.train() method for scoring and ranking the models, the AutoML leaderboard uses the performance on this data to rank the models.\n\nA default performance metric for each machine learning task (binary classification, multiclass classification, regression) is specified internally and the leaderboard will be sorted by that metric. In the case of regression, the default ranking metric is mean residual deviance. In the future, the user will be able to specify any of the H2O metrics so that different metrics can be used to generate rankings on the leaderboard.","30024774":"# H20 AutoML Approach","e9dbd88d":"# Intialising Sparkling Water ","97d1041f":"# H2O AutoML ","0866ec75":"# Ensemble Exploration\n\nTo understand how the ensemble works, let's take a peek inside the Stacked Ensemble \"All Models\" model. The \"All Models\" ensemble is an ensemble of all of the individual models in the AutoML run. This is often the top performing model on the leaderboard.","43c4cc57":"Examine the variable importance of the metalearner (combiner) algorithm in the ensemble. This shows us how much each base learner is contributing to the ensemble.","410d9ae5":"# Data Loading"}}