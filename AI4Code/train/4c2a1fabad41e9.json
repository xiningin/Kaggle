{"cell_type":{"7aebba4b":"code","063f0ded":"code","8e0d6819":"code","0156acba":"code","6fb29599":"code","e7d5dfb2":"code","cd8f3be2":"code","7d5c448b":"code","088f3b0f":"code","63d878de":"code","bd122367":"code","7a6652c0":"code","e4cc5396":"code","4573cfb7":"code","56df9108":"code","0578072d":"code","8cf0fc83":"code","393f7d29":"code","63a48a9c":"code","decae5fe":"code","d5bc9427":"code","8eaa257c":"code","cf6dc112":"code","822fcd95":"code","90fd099b":"code","d1253c2b":"code","3b52a819":"code","a9714f07":"code","ce9c7a98":"code","46b0342f":"code","f51a14c0":"code","f482a505":"code","19d9c966":"code","177fb948":"code","baaa1e2b":"code","9f9f1b78":"markdown"},"source":{"7aebba4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","063f0ded":"data = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')","8e0d6819":"data.head()","0156acba":"data.drop(['Loan_ID'],axis=1,inplace=True)","6fb29599":"column_objects = [col for col in data.columns if data[col].dtypes == 'object']","e7d5dfb2":"column_objects","cd8f3be2":"data.isnull().sum()","7d5c448b":"total_missing_values = data.isnull().sum()","088f3b0f":"total_missing_values.sum()","63d878de":"np.product(data.shape)","bd122367":"total_percentage = total_missing_values.sum() \/ np.product(data.shape) * 100\ntotal_percentage","7a6652c0":"data.dropna(axis=0, inplace=True)","e4cc5396":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata[column_objects] = data[column_objects].apply(labelencoder.fit_transform)","4573cfb7":"data","56df9108":"X = data.drop(['Loan_Status'],axis=1)\ny = data['Loan_Status']","0578072d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)","8cf0fc83":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()","393f7d29":"dtree.fit(X_train,y_train)","63a48a9c":"predictions = dtree.predict(X_test)","decae5fe":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(predictions,y_test))","d5bc9427":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=300)","8eaa257c":"rfc.fit(X_train,y_train)","cf6dc112":"rfc_pred = rfc.predict(X_test)","822fcd95":"y_test","90fd099b":"rfc_pred","d1253c2b":"accuracy_score(y_test, rfc_pred)","3b52a819":"test_data = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')\ntest_data.head()","a9714f07":"test_data.drop(['Loan_ID'],axis=1,inplace=True)","ce9c7a98":"test_data","46b0342f":"test_data.dropna(axis=0, inplace=True)","f51a14c0":"column_objects = [col for col in test_data.columns if test_data[col].dtypes == 'object']\ncolumn_objects","f482a505":"test_data[column_objects] = test_data[column_objects].apply(labelencoder.fit_transform)","19d9c966":"test_data","177fb948":"test_predictions = rfc.predict(X_test)","baaa1e2b":"accuracy_score(y_test, test_predictions)","9f9f1b78":"Now test our testing data"}}