{"cell_type":{"517aaf8d":"code","df17d55f":"code","b76f1021":"code","bed988a7":"code","c2290a45":"code","e0b30311":"code","bf10a30d":"code","2219a1de":"code","53681064":"code","6f7f7269":"code","27b05b60":"code","ebb9d32a":"code","912bd36a":"markdown","08729579":"markdown","7cc8224b":"markdown","78ff2c43":"markdown","f141a6e2":"markdown","2127cfeb":"markdown","322f8318":"markdown"},"source":{"517aaf8d":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom skimage.morphology import erosion, diamond\n\npath_to_data = '..\/input\/digit-recognizer\/train.csv'\ndata = pd.read_csv(path_to_data)\n\ndel data['label']","df17d55f":"rows = 4\ncolumns = 3\n\nfig, ax = plt.subplots(rows, columns, figsize = (12, 14))\n\nfor i in range(rows):\n    for j in range(columns):\n        index = np.random.randint(data.shape[0])\n\n        image = np.asarray(data.iloc[index][:]).reshape((28, 28))\n        ax[i][j].imshow(image, cmap = 'gray')\n\nplt.tight_layout()\nplt.show()","b76f1021":"data.head()","bed988a7":"data.shape","c2290a45":"data.describe()","e0b30311":"def to_binary(image, treshold):\n    binary = np.zeros(image.shape)\n    for i in range(784):\n        if(image[i] > treshold):\n            binary[i] = 1\n    \n    return binary","bf10a30d":"data = np.asarray(data)\ndata_binary = data.copy()\nfor i in range(data.shape[0]):\n    data_binary[i] = to_binary(data[i], 0)","2219a1de":"pd.DataFrame(data = data_binary).describe()","53681064":"data = data.reshape(-1, 28, 28)\ndata_binary = data_binary.reshape(-1, 28, 28)","6f7f7269":"test = data_binary[0,:,:]\ntest_eroded = erosion(test, diamond(1))\nfrontier = np.copy(test)\n\nfor i in range(28):\n    for j in range(28):\n        if(test[i,j] != test_eroded[i,j]):\n            frontier[i,j] = 1\n        \n        else:\n            frontier[i,j] = 0\n            \nfig, ax = plt.subplots(1, 3, figsize = (20, 10))\nax[0].imshow(test, cmap = 'binary')\nax[0].set_title(\"Orignal\")\n\nax[1].imshow(test_eroded, cmap = 'binary')\nax[1].set_title(\"Eroded\")\n\nax[2].imshow(frontier, cmap = 'binary')\nax[2].set_title(\"Frontier (Original - Eroded)\")\n\nplt.show()\n","27b05b60":"def extract_frontier(image):\n    test = image.copy()\n    test_eroded = erosion(test, diamond(1))\n    frontier = np.copy(test)\n\n    for i in range(28):\n        for j in range(28):\n            if(test[i,j] != test_eroded[i,j]):\n                frontier[i,j] = 1\n\n            else:\n                frontier[i,j] = 0\n    \n    return frontier","ebb9d32a":"rows = 4\ncolumns = 3\n\nfig, ax = plt.subplots(rows, columns, figsize = (12, 14))\n\nfor i in range(rows):\n    for j in range(columns):\n        index = np.random.randint(data_binary.shape[0])\n\n        ax[i][j].imshow(extract_frontier(data_binary[index]), cmap = 'binary')\n\nplt.tight_layout()\nplt.show()","912bd36a":"We can see from the past outputs that the values that range from 0 to 255, as each pixel is stored in a 8 bit value. To apply mathematical morphology we need this values to be binary, 0 and 1. So the first thing we need to do is binarize the images.  \nWe'll do this by the simplest method there is, tresholding. In order to perform threshold, we are going to define a *t* value and then check each value to compare it to *t*, if the value is greater than *t* we set the binary value as 1, and 0 otherwise.","08729579":"Now we do the frontier extraction. The key to perform this is to consider the images as sets and not as arrays. The next step is to perform an erosion, a morphological operation that has the effect of *\"making smaller\"* the objects in the scene, as it can be seen in the example below.  \n\n![Erosion](https:\/\/homepages.inf.ed.ac.uk\/rbf\/HIPR2\/figs\/erodbin.gif)  \n\nThis is acheived by passing a structuring element through the scene. A structuring element is an array, usually of small dimensions (for example, 3x3), which has binary values and a defined center. When all the values in the array coincide with the values in the scene the only value you leave in the resulting scene is the center of the structuring element. To make this clear here is an example of performing erosion on a 2 with a cross structuring element.\n\n![Erosion example se](https:\/\/www.researchgate.net\/publication\/305375221\/figure\/fig1\/AS:393507714945026@1470830958326\/The-erosion-of-an-object-by-a-structuring-element.png)\n\nNow that we know what erosion is the idea comes quickly, if you perform a (set) difference between the original image and the eroded image we can easily see that the result is going to be the frontier of the original image. Let's not show examples yet, let's implement it and check wether this is true or not.  \n\nThis is easy to implement and easier now that skimage gives us all the tools we need.","7cc8224b":"We can see that the reasoning was right! The eroded image does look smaller than the original and the result by the (set) difference does show the frontier of the original image. One thing is that you should really choose your structuring element wisely, some are going to work on certain scenes and others are just not going to work as we want. Check out all the [structuring elements](https:\/\/scikit-image.org\/docs\/dev\/api\/skimage.morphology.html) that skimage has (and why not, try to create your own and test them!).  \n\nFinally, let's define a function so we can use it in a cleaner way.","78ff2c43":"Reshaping the arrays to make them easier to handle.","f141a6e2":"Let's create a new dataset of binary images.","2127cfeb":"# Frontier extraction using python\n\nFrontier extraction is a way of getting the contour of an object on a scene. It is really useful and the idea behind it is very easy, in this notebook I'll go trough a simple example using the MNIST handwritten digits.","322f8318":"Try changing the threshold value and see what happens!"}}