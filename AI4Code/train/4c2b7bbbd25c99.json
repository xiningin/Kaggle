{"cell_type":{"534eb30f":"code","27636c17":"code","eae17301":"code","2313eddf":"code","9cf87a67":"code","00dca6e1":"code","ac3ffc1a":"code","dabdc3c4":"code","24317dc6":"code","5d78674f":"code","99fd9e91":"code","f3cbe3b8":"code","02e9ed3f":"code","16e43eb9":"code","0b954175":"code","ecfd5314":"code","7dde7068":"code","ae66c3d4":"code","b116c620":"code","44b43679":"markdown","1d59dd26":"markdown"},"source":{"534eb30f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","27636c17":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadspopolazionecsv\/popolazione.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'popolazione.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","eae17301":"df.head(5)","2313eddf":"df.info","9cf87a67":"df.describe()","00dca6e1":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","ac3ffc1a":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)","dabdc3c4":"plotPerColumnDistribution(df, 10, 5)","24317dc6":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='g', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","5d78674f":"plotCorrelationMatrix(df, 8)","99fd9e91":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","f3cbe3b8":"plotScatterMatrix(df, 8, 6)","02e9ed3f":"print (\"Skew is:\", df.sexistat1.skew())\nplt.hist(df.sexistat1, color='green')\nplt.show()","16e43eb9":"target = np.log(df.sexistat1)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='red')\nplt.show()","0b954175":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px","ecfd5314":"ax = sns.swarmplot(x=\"value\", y=\"sexistat1\", hue=\"eta1\",\n...                    data=df, palette=\"Set2\", dodge=True)","7dde7068":"ax = sns.swarmplot(x=\"sexistat1\", y=\"value\", data=df)","ae66c3d4":" ax = sns.swarmplot(x=\"value\", y=\"sexistat1\", hue=\"eta1\", data=df)","b116c620":"labels1=df.territorio.value_counts().index\nsizes1=df.territorio.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes1,labels=labels1,autopct=\"%1.1f%%\")\nplt.title(\"territorio\",size=25)\nplt.show()","44b43679":"Pie chart from Melih Kanbay @melihkanbay.  Italian region. Territorio = territory.","1d59dd26":"Some swarmplots (or something else). At least I tryed."}}