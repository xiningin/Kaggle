{"cell_type":{"7c9575e7":"code","e088b7c4":"code","fb803928":"code","dbdaf72d":"code","9ec46243":"code","8083d4dd":"code","4b247ef2":"code","f67c9ee0":"code","786db007":"code","df5acc34":"code","a54a30fc":"code","6f7cad0a":"code","77f8c799":"code","918169b4":"code","1bfb457e":"code","325e2a2e":"code","fe62472f":"code","b44afb39":"code","73009495":"code","a9c23ac5":"code","d78b8b8a":"code","73c7eeba":"code","b003834f":"code","5e34164f":"code","6b1e90d6":"code","f52739df":"code","08e386e3":"code","18bc4d0b":"code","c5475db6":"code","aedbd996":"code","ab8ce605":"code","3b3f8eda":"code","a7741781":"code","0571d3c1":"code","cef36f66":"code","d8882cd6":"code","17bbb015":"code","73c514e6":"code","e3d91b06":"code","f2f1c1d8":"code","c2f814d9":"code","2b3e2393":"code","7c1dc7f7":"code","eaa7512a":"code","38e2d6bc":"code","c8d98cb2":"code","13bdce7d":"code","c0eef318":"code","2fbd5931":"code","c2db8495":"code","2e47daf9":"code","2c8e5235":"code","44945461":"code","a011af83":"code","951b188e":"code","dd268bf8":"code","bf68e7a3":"code","40ef1cf4":"code","d3cdb672":"code","5d64f78a":"code","3dbcfff1":"code","da582111":"code","a5627843":"code","f3464ecb":"code","617ef231":"code","38ee94e9":"code","d644c541":"code","fc38f481":"code","f7c4e42a":"code","46988014":"code","7268262b":"code","5c53f295":"code","b72c1884":"code","5506cce5":"code","f30ebbbb":"code","31ef73a1":"code","f8c6214d":"code","025d0ebf":"code","e752def7":"code","ec6ba436":"code","7dac5974":"code","bafc8047":"code","28e90bea":"code","ce1e42b2":"code","75844147":"code","3739132a":"code","3562bf07":"code","b560144e":"code","1d8b6008":"code","259a1ed6":"code","3b8a47ec":"code","468060aa":"code","19203b35":"code","4b63e5d9":"code","a07338b8":"code","2c35c18a":"code","d791777a":"code","2678920d":"code","1ce01169":"code","f9ea2645":"code","bb43bb46":"code","cfc11f9d":"code","a4e41e3b":"code","013b48a4":"code","e4625eb1":"code","3c9c9057":"code","213d0ed4":"code","a7557376":"code","821b2d2d":"markdown","f4275912":"markdown","b926ab11":"markdown","efdb38ce":"markdown","a32d6826":"markdown","c6512c7b":"markdown","6650f762":"markdown","fc2045bd":"markdown","b1879280":"markdown","3863cdd0":"markdown","ecfbb4af":"markdown","f3de704a":"markdown","4f7a0d22":"markdown","da4eb25e":"markdown","20e3d89a":"markdown","a3038d96":"markdown","c02ae265":"markdown","1ccc8a4d":"markdown","6eda5dbe":"markdown","eea6aa7e":"markdown","74a53aeb":"markdown","39e847d7":"markdown","3c5c022b":"markdown","b334708c":"markdown","8410ed91":"markdown","c257b951":"markdown","985f3aa4":"markdown","4213cebf":"markdown","b3b2a53c":"markdown","d8e4eb03":"markdown","8451527b":"markdown","542acafb":"markdown","7ffb242c":"markdown","91f88cb2":"markdown","115e8d41":"markdown","c4a58ff0":"markdown","30714ea7":"markdown"},"source":{"7c9575e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nimport sys\nimport gc\nimport pickle\nfrom itertools import product\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e088b7c4":"train_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv\")\nitems_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nshops_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ncate_data = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")","fb803928":"train_data.head()","dbdaf72d":"train_data.shape","9ec46243":"train_data.isnull().sum()","8083d4dd":"color = sns.color_palette(\"hls\", 8)\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15, 5))\nsns.countplot(x=train_data['shop_id'], data=train_data, palette=color)","4b247ef2":"plt.figure(figsize=(10, 5))\nsns.distplot(train_data['item_id'], color=\"red\");","f67c9ee0":"plt.figure(figsize=(10, 5))\nsns.distplot(train_data['item_price'], color=\"red\");","786db007":"plt.figure(figsize=(10, 5))\nsns.distplot(np.log(train_data['item_price']), color=\"red\");","df5acc34":"plt.figure(figsize=(10, 5))\ntrain_data['item_cnt_day'].plot(kind='hist', alpha=0.7, color='orange')","a54a30fc":"test_data.head()","6f7cad0a":"test_data.shape","77f8c799":"len(test_data['shop_id'].unique())","918169b4":"len(test_data['item_id'].unique())","1bfb457e":"# test_data.groupby(by='shop_id')['item_id'].count()","325e2a2e":"5100 * 42","fe62472f":"plt.figure(figsize=(10, 5))\nsns.countplot(x=test_data['shop_id'], data=test_data)","b44afb39":"plt.figure(figsize=(10, 5))\nsns.distplot(test_data['item_id'], color=\"green\");","73009495":"train_data['item_cnt_day'].sort_values(ascending=False).head(5)","a9c23ac5":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(-200, 3500)\nsns.boxplot(x=train_data.item_cnt_day, color=\"red\", palette=\"Set3\")","d78b8b8a":"train_data = train_data[train_data.item_cnt_day<=1000]","73c7eeba":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(-200, 3500)\nsns.boxplot(x=train_data.item_cnt_day, color=\"red\", palette=\"Set3\")","b003834f":"train_data['item_price'].sort_values(ascending=False).head()","5e34164f":"plt.figure(figsize=(10, 5))\ncolor = sns.color_palette(\"hls\", 8)\nplt.xlim(train_data.item_price.min(), train_data.item_price.max()*1.1)\nsns.boxplot(x=train_data.item_price, color=\"red\", palette=\"Set3\")","6b1e90d6":"train_data = train_data[train_data['item_price'] < 100000]","f52739df":"train_data[train_data['item_price'] < 0]","08e386e3":"predict_mean_price = train_data[(train_data['date_block_num'] == 4) & (train_data['shop_id'] == 32) & (train_data['item_id'] == 2973) & (train_data['item_price'] > 0)]['item_price'].mean()\npredict_mean_price","18bc4d0b":"train_data.loc[train_data['item_price'] < 0, 'item_price'] = predict_mean_price","c5475db6":"train_data[(train_data['date_block_num'] == 4) & (train_data['shop_id'] == 32) & (train_data['item_id'] == 2973) & (train_data['item_price'] > 0)]","aedbd996":"unq_train_shops = train_data['shop_id'].unique()\nunq_test_shops = test_data['shop_id'].unique()\nprint(len(unq_train_shops))\nprint(len(unq_test_shops))","ab8ce605":"set(unq_test_shops).issubset(set(unq_train_shops))","3b3f8eda":"shops_data.head()","a7741781":"def listToString(s):  \n    \n    # initialize an empty string \n    str1 = \" \" \n    \n    # return string\n    return (str1.join(s))","0571d3c1":"import re\nfor i, shop in enumerate(shops_data['shop_name']):\n    if i == 6:\n        pass\n    else:\n        string = shop\n        cleanString = re.sub(r'[?|$|.|!]',r'',string)\n        splitStr = cleanString.split()[:-1]\n        finalStr = listToString(splitStr)\n        result = shops_data[shops_data['shop_name'].str.contains(finalStr)]\n        if result.shape == (2, 2) or result.shape == (0, 2):\n            print(result)\n            print('-'*50)","cef36f66":"shops_data[shops_data['shop_name'].str.contains('\u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426')]","d8882cd6":"train_data.loc[train_data.shop_id == 0, 'shop_id'] = 57\ntest_data.loc[test_data.shop_id == 0, 'shop_id'] = 57\n\ntrain_data.loc[train_data.shop_id == 1, 'shop_id'] = 58\ntest_data.loc[test_data.shop_id == 1, 'shop_id'] = 58\n\ntrain_data.loc[train_data.shop_id == 10, 'shop_id'] = 11\ntest_data.loc[test_data.shop_id == 10, 'shop_id'] = 11","17bbb015":"shops_data.head()","73c514e6":"shops_data.loc[shops_data['shop_name'] == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'","e3d91b06":"shops_data['city'] = shops_data['shop_name'].str.split(' ').map(lambda x:x[0])\nshops_data.loc[shops_data['city'] == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops_data.head()","f2f1c1d8":"city_label_encoder = preprocessing.LabelEncoder()\nshops_data['city_code'] = city_label_encoder.fit_transform(shops_data['city'])","c2f814d9":"shops_data = shops_data[['shop_id','city_code']]\nshops_data.head()","2b3e2393":"items_data.head()","7c1dc7f7":"unq_train_item =  train_data['item_id'].unique()\nunq_test_item =  test_data['item_id'].unique()\nprint(len(unq_train_item))\nprint(len(unq_test_item))","eaa7512a":"set(unq_test_item).issubset(set(unq_train_item))","38e2d6bc":"len(set(unq_test_item).difference(set(unq_train_item)))","c8d98cb2":"cat_in_test_data = items_data.loc[items_data['item_id'].isin(sorted(test_data['item_id'].unique()))].item_category_id.unique()\ncat_in_test_data","13bdce7d":"cat_not_in_test = cate_data[~cate_data['item_category_id'].isin(cat_in_test_data)].item_category_id.unique()\ncat_not_in_test","c0eef318":"cate_data.head()","2fbd5931":"splt_cate = cate_data['item_category_name'].str.split('-')\ncate_data['main_cate'] = splt_cate.map(lambda x: x[0].strip())\ncate_data['main_cate_id'] = preprocessing.LabelEncoder().fit_transform(cate_data['main_cate'])\n\ncate_data['sub_cate'] = splt_cate.map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\ncate_data['sub_cate_id'] = preprocessing.LabelEncoder().fit_transform(cate_data['sub_cate'])\n\ncate_data = cate_data[['item_category_id', 'main_cate_id', 'sub_cate_id']]","c2db8495":"cate_data.head()","2e47daf9":"print('Item not in train:', len(set(unq_test_item).difference(set(unq_train_item))))\nprint('Total item in test:', len(test_data['item_id'].unique()))\nprint('Total shop in test:', len(test_data['shop_id'].unique()))","2c8e5235":"ts = time.time()\nmatrix = []\n\nmonths = train_data.date_block_num.unique()\nfor month in months:\n    sales = train_data[train_data.date_block_num == month]\n    unq_shop = sales['shop_id'].unique()\n    unq_item = sales['item_id'].unique()\n    append_arr = np.array(list(product(unq_shop, unq_item, [month])), dtype='int16')\n    matrix.append(append_arr)","44945461":"cols = ['shop_id','item_id', 'date_block_num']\nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\nmatrix.head()","a011af83":"matrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix.sort_values(['date_block_num','shop_id','item_id'],inplace=True)\nmatrix.head()","951b188e":"matrix.shape","dd268bf8":"color = sns.color_palette(\"hls\", 8)\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15, 5))\nsns.countplot(x=matrix['shop_id'], data=matrix, palette=color)","bf68e7a3":"train_data['revenue'] = train_data['item_price'] * train_data['item_cnt_day']\ntrain_data.head()","40ef1cf4":"group_data = train_data.groupby(by=['date_block_num', 'shop_id', 'item_id']).agg({'item_cnt_day': 'sum'})\ngroup_data.columns = ['item_cnt_month']\ngroup_data.reset_index(inplace = True)\ngroup_data.head()","d3cdb672":"matrix = pd.merge(matrix, group_data, on=cols, how='left')\nmatrix.head()","5d64f78a":"matrix['item_cnt_month'] = (matrix['item_cnt_month'].fillna(0).clip(0, 20).astype(np.float16))\nmatrix.head()","3dbcfff1":"matrix.shape","da582111":"test_data.head()","a5627843":"test_data['date_block_num'] = 34\ntest_data['date_block_num'] = test_data['date_block_num'].astype(np.int8)\ntest_data['shop_id'] = test_data['shop_id'].astype(np.int8)\ntest_data['item_id'] = test_data['item_id'].astype(np.int16)","f3464ecb":"matrix = pd.concat([matrix, test_data], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True)\nmatrix = matrix.drop('ID', axis=1)\nmatrix.head()","617ef231":"items_data.drop(['item_name'], axis=1, inplace=True)\nitems_data.head()","38ee94e9":"cate_data.head()","d644c541":"matrix = pd.merge(matrix, shops_data, on=['shop_id'], how='left')\nmatrix = pd.merge(matrix, items_data, on=['item_id'], how='left')\nmatrix = pd.merge(matrix, cate_data, on=['item_category_id'], how='left')","fc38f481":"matrix.head()","f7c4e42a":"matrix['city_code'] = matrix['city_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['main_cate_id'] = matrix['main_cate_id'].astype(np.int8)\nmatrix['sub_cate_id'] = matrix['sub_cate_id'].astype(np.int8)","46988014":"# train_data['date_block_num'] += 9\n# train_data.head()\nmatrix.head()","7268262b":"def generate_lag(df, months, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n#     print(tmp)\n    for month in months:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id',col+'_lag_'+str(month)]\n        shifted['date_block_num'] += month\n#         print(month)\n#         print(shifted)\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n                      \n    return df","5c53f295":"matrix = generate_lag(matrix, [1, 2, 3, 6, 12], 'item_cnt_month')\nmatrix.head()","b72c1884":"group = matrix.groupby(['date_block_num']).agg({'item_cnt_month' : ['mean']})\ngroup.columns = [ 'date_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_avg_item_cnt')\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)","5506cce5":"group = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1,2,3,6,12], 'date_item_avg_item_cnt')\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)","f30ebbbb":"group = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1,2,3,6,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)","31ef73a1":"group = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)","f8c6214d":"group = matrix.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_cat_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\nmatrix['date_shop_cat_avg_item_cnt'] = matrix['date_shop_cat_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_cat_avg_item_cnt')\nmatrix.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)","025d0ebf":"group = matrix.groupby(['date_block_num', 'shop_id', 'main_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_type_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'main_cate_id'], how='left')\nmatrix['date_shop_type_avg_item_cnt'] = matrix['date_shop_type_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_type_avg_item_cnt')\nmatrix.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)","e752def7":"group = matrix.groupby(['date_block_num', 'shop_id', 'sub_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_shop_subtype_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'shop_id', 'sub_cate_id'], how='left')\nmatrix['date_shop_subtype_avg_item_cnt'] = matrix['date_shop_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_shop_subtype_avg_item_cnt')\nmatrix.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)","ec6ba436":"group = matrix.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)","7dac5974":"group = matrix.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_city_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)","bafc8047":"group = matrix.groupby(['date_block_num', 'main_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'main_cate_id'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)","28e90bea":"group = matrix.groupby(['date_block_num', 'sub_cate_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_subtype_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'sub_cate_id'], how='left')\nmatrix['date_subtype_avg_item_cnt'] = matrix['date_subtype_avg_item_cnt'].astype(np.float16)\nmatrix = generate_lag(matrix, [1], 'date_subtype_avg_item_cnt')\nmatrix.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)","ce1e42b2":"matrix.head()","75844147":"train_data.head()","3739132a":"group = train_data.groupby(['item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['item_avg_item_price']\ngroup.reset_index(inplace=True)\nmatrix = pd.merge(matrix, group, on=['item_id'], how='left')\nmatrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\nmatrix.head()","3562bf07":"group = train_data.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['date_item_avg_item_price']\ngroup.reset_index(inplace=True)\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\nmatrix.head()","b560144e":"lags = [1,2,3,4,5,6]\nmatrix = generate_lag(matrix, lags, 'date_item_avg_item_price')\nmatrix.head()","1d8b6008":"for i in lags:\n    matrix['delta_price_lag_'+str(i)] = (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) \/ matrix['item_avg_item_price']","259a1ed6":"def select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0","3b8a47ec":"matrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\nmatrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\n\nfetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n    fetures_to_drop += ['delta_price_lag_'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)","468060aa":"group = train_data.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\ngroup.columns = ['date_shop_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n\ngroup = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ngroup.columns = ['shop_avg_revenue']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['shop_id'], how='left')\nmatrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n\nmatrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) \/ matrix['shop_avg_revenue']\nmatrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n\nmatrix = generate_lag(matrix, [1], 'delta_revenue')\n\nmatrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)","19203b35":"matrix['month'] = matrix['date_block_num'] % 12\nmatrix.head()","4b63e5d9":"days = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)\nmatrix.head()","a07338b8":"cache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\n\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num ","2c35c18a":"cache = {}\nmatrix['item_last_sale'] = -1\nmatrix['item_last_sale'] = matrix['item_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = row.item_id\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        if row.date_block_num>last_date_block_num:\n            matrix.at[idx, 'item_last_sale'] = row.date_block_num - last_date_block_num\n            cache[key] = row.date_block_num         ","d791777a":"matrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')","2678920d":"matrix = matrix[matrix.date_block_num > 11]","1ce01169":"def fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)","f9ea2645":"matrix.to_pickle('data.pkl')","bb43bb46":"gc.collect();","cfc11f9d":"data = pd.read_pickle('data.pkl')","a4e41e3b":"data = data[[\n    'date_block_num',\n    'shop_id',\n    'item_id',\n    'item_cnt_month',\n    'city_code',\n    'item_category_id',\n    'main_cate_id',\n    'sub_cate_id',\n    'item_cnt_month_lag_1',\n    'item_cnt_month_lag_2',\n    'item_cnt_month_lag_3',\n    'item_cnt_month_lag_6',\n    'item_cnt_month_lag_12',\n    'date_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_1',\n    'date_item_avg_item_cnt_lag_2',\n    'date_item_avg_item_cnt_lag_3',\n    'date_item_avg_item_cnt_lag_6',\n    'date_item_avg_item_cnt_lag_12',\n    'date_shop_avg_item_cnt_lag_1',\n    'date_shop_avg_item_cnt_lag_2',\n    'date_shop_avg_item_cnt_lag_3',\n    'date_shop_avg_item_cnt_lag_6',\n    'date_shop_avg_item_cnt_lag_12',\n    'date_cat_avg_item_cnt_lag_1',\n    'date_shop_cat_avg_item_cnt_lag_1',\n    'date_city_avg_item_cnt_lag_1',\n    'date_item_city_avg_item_cnt_lag_1',\n    'delta_price_lag',\n    'month',\n    'days',\n    'item_shop_last_sale',\n    'item_last_sale',\n    'item_shop_first_sale',\n    'item_first_sale',\n]]","013b48a4":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","e4625eb1":"model = XGBRegressor(\n    max_depth=8,\n    n_estimators=1000,\n    min_child_weight=300, \n    colsample_bytree=0.8, \n    subsample=0.8, \n    eta=0.3,    \n    seed=42)\n\nmodel.fit(\n    X_train, \n    Y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, Y_train), (X_valid, Y_valid)], \n    verbose=True, \n    early_stopping_rounds = 10)","3c9c9057":"Y_pred = model.predict(X_valid).clip(0, 20)\nY_test = model.predict(X_test).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test_data.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('boost_submission.csv', index=False)\n\n# save predictions for an ensemble\npickle.dump(Y_pred, open('xgb_train.pickle', 'wb'))\npickle.dump(Y_test, open('xgb_test.pickle', 'wb'))","213d0ed4":"def plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)","a7557376":"plot_features(model, (10,14))","821b2d2d":"## Last Preparation","f4275912":"### Items Analysis","b926ab11":"### city_code","efdb38ce":"### item and city_code","a32d6826":"### item_category_id","c6512c7b":"### Concat test into train","6650f762":"# Implement Lags","fc2045bd":"## outliers","b1879280":"### Aggregate Sale","3863cdd0":"### Merge (Shops,Items,Cats) features","ecfbb4af":"### sub_cate_id","f3de704a":"## Features Mean encoding","4f7a0d22":"### shop and item_category_id","da4eb25e":"### shop","20e3d89a":"thar means every shop has every item","a3038d96":"# features analysis","c02ae265":"### handle item price outliers","1ccc8a4d":"### main_cate_id","6eda5dbe":"### handle item_cnt_day outliers","eea6aa7e":"### extract city form shops","74a53aeb":"## Matrix shop-item","39e847d7":"### shop revenue trend","3c5c022b":"# EDA","b334708c":"### shop and main_cate_id","8410ed91":"<h2> Hope It's help you, if yes, Please <i style=\"color: red;\">UPVOTED<\/i> \ud83d\udc4d. Thank you<\/h2>","c257b951":"### Handle Duplicate Shops","985f3aa4":"Number of days in a month. There are no leap years","4213cebf":"### date_block_num","b3b2a53c":"# Feature Engineering","d8e4eb03":"### shop and sub_cate_id","8451527b":"# prediction xgboost","542acafb":"### item","7ffb242c":"## Acknowledgement\n* https:\/\/www.coursera.org\/learn\/competitive-data-science\n* https:\/\/www.kaggle.com\/plasticgrammer\/future-sales-prediction-playground\n* https:\/\/www.kaggle.com\/sarthakbatra\/predicting-sales-tutorial\n* https:\/\/www.kaggle.com\/pavansanagapati\/feature-engineering-a-comprehensive-tutorial\/comments\n* https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost","91f88cb2":"### shops analysis","115e8d41":"## Add more features","c4a58ff0":"## Trend Analysis","30714ea7":"### Categories Analysis"}}