{"cell_type":{"17b8d9b4":"code","9c5d7f41":"code","c86fbeb7":"code","8abbbf73":"code","1b3b4477":"code","f4f2bc74":"code","f531087a":"code","0a763416":"code","bde57f14":"code","89b672c6":"code","cc43bbd1":"code","940fb654":"code","f2ad3e0c":"markdown","55c5faa8":"markdown","28cbfa50":"markdown","4d988a91":"markdown","b986847f":"markdown","4e48fdfa":"markdown","663f92d0":"markdown","6192cb04":"markdown","75a3fb06":"markdown","b8e7d027":"markdown","60db0bd3":"markdown","0c10bada":"markdown","8f82da23":"markdown","cd847005":"markdown","0ff9508d":"markdown"},"source":{"17b8d9b4":"import pandas as pd\nfrom fbprophet import Prophet","9c5d7f41":"df = pd.read_csv('..\/input\/peyton-manning\/example_wp_log_peyton_manning.csv')\ndf.head()","c86fbeb7":"m = Prophet()\nm.fit(df)\n\n","8abbbf73":"future = m.make_future_dataframe(periods=1461)\nfuture.tail()","1b3b4477":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","f4f2bc74":"from fbprophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)","f531087a":"m.changepoints","0a763416":"pro_change= Prophet(changepoint_range=0.9)\nfst = pro_change.fit(df).predict(future)\nfig1= pro_change.plot(fst);\na = add_changepoints_to_plot(fig1.gca(), pro_change, fst)","bde57f14":"pro_change.changepoints","89b672c6":"m = Prophet(changepoint_prior_scale=0.5)\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)","cc43bbd1":"n = Prophet(changepoint_prior_scale=0.001)\nforecastn = n.fit(df).predict(future)\nfign = n.plot(forecastn)","940fb654":"o = Prophet(changepoints=['2014-01-01'])\nforecast2 = o.fit(df).predict(future)\nfig3 = o.plot(forecast2)","f2ad3e0c":"When visualizing the forecast, this parameter can be adjusted as needed if the trend seems to be over- or under-fit. In the fully-automated setting, see the documentation on cross validation for recommendations on how this parameter can be tuned.","55c5faa8":"If the trend changes are being overfit (too much flexibility) or underfit (not enough flexibility), you can adjust the strength of the sparse prior using the input argument changepoint_prior_scale. By default, this parameter is set to 0.05. Increasing it will make the trend more flexible:","28cbfa50":"![image.png](attachment:image.png)","4d988a91":"We may have noticed that real time series frequently have abrupt changes in their trajectories. By default, Prophet will automatically detect these changepoints and will allow the trend to adapt appropriately. However, if we wish to have finer control over this process (e.g., Prophet missed a rate change, or is overfitting rate changes in the history), then there are several input arguments you can use","b986847f":"## Automatic changepoint detection in Prophet","4e48fdfa":"The number of potential changepoints can be set using the argument n_changepoints, but this is better tuned by adjusting the regularization. The locations of the signification changepoints can be visualized with:","663f92d0":"Even though we have a lot of places where the rate can possibly change, because of the sparse prior, most of these changepoints go unused. We can see this by plotting the magnitude of the rate change at each changepoint:","6192cb04":"# Trend Changepoints","75a3fb06":"If we wish, rather than using automatic changepoint detection we can manually specify the locations of potential **changepoints** with the changepoints argument. Slope changes will then be allowed only at these points, with the same sparse regularization as before. One could, for instance, create a grid of points as is done automatically, but then augment that grid with some specific dates that are known to be likely to have changes. As another example, the changepoints could be entirely limited to a small set of dates, as is done here:","b8e7d027":"## Specifying the locations of the changepoints","60db0bd3":"## Adjusting trend flexibility","0c10bada":"By default changepoints are only inferred for the first 80% of the time series in order to have plenty of runway for projecting the trend forward and to avoid overfitting fluctuations at the end of the time series. This default works in many situations but not all, and can be changed using the changepoint_range argument. For example, m = Prophet(changepoint_range=0.9) in Python will place potential changepoints in the first 90% of the time series.","8f82da23":"Prophet detects changepoints by first specifying a large number of potential changepoints at which the rate is allowed to change. It then puts a sparse prior on the magnitudes of the rate changes (equivalent to L1 regularization) - this essentially means that Prophet has a large number of possible places where the rate can change, but will use as few of them as possible. Consider the Peyton Manning forecast from the Quickstart. By default, Prophet specifies 25 potential changepoints which are uniformly placed in the first 80% of the time series. The vertical lines in this figure indicate where the potential changepoints were placed:","cd847005":"![image.png](attachment:image.png)","0ff9508d":"Decreasing it will make the trend less flexible:"}}