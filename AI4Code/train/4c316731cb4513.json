{"cell_type":{"52c0393e":"code","ac5e2d2d":"code","4370c397":"code","3cdf0a01":"code","b93d52c0":"code","f83f89e4":"code","8b3c643b":"code","da16d559":"code","ea2d59cc":"code","82daccd2":"code","f31651de":"code","cfd4fc6c":"code","b945991b":"code","c240b38f":"markdown","5650c567":"markdown","f4f48517":"markdown","0ee1a7d3":"markdown"},"source":{"52c0393e":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# from IPython.core.display import display, HTML\nimport time\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport numpy.matlib\nimport pandas as pd\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\n# from sklearn.metrics import r2_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.model_selection import KFold, GroupKFold\n\nimport lightgbm as lgb\n\n# import matplotlib.pyplot as plt\n# import seaborn as sns\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.backend import sigmoid  # for Swish activation\nfrom tensorflow.keras.utils import get_custom_objects\nfrom tensorflow.keras.layers import Activation\n\nosj = os.path.join\n\n\n\nplatform = 'kaggle'  # 'local'  # 'kaggle'\nexperiment_name = 'blend_stock_NoStock lgb + NN'\n\ndebug = False  # True  # False\nload_train_preprocessed = True  #  False  # False\npath_train_preprocessed = '..\/input\/optiver-train-preprocessed\/train_processed.csv'\n\nn_clusters_samples = 15  # 33\nis_qtransform_separate = False\nis_qtransform_joint = True\nis_normalize_separate = False\nis_normalize_joint = True\nuse_tau_lgb = True  #  False\nis_train_lgb = True  # False  # True\n\naug_vol = None  # 0.30  # None  # 0.15   #  % increase volatility: None - if no augment \naug_time_id_add = 1_000_000\ntarget_name = 'target'\n\n# n_folds for LGBM only (for nn it is 'nfolds')\nn_folds = 5 if not debug else 2\n\nscores_folds = {}\n\nnum_iter_lgb = 2000 if not debug else 50\nn_epochs = 1200 if not debug else 4\n\n# data directory\ndata_dir_dict = {\n    'kaggle': '..\/input\/optiver-realized-volatility-prediction\/',\n    'local': '..\/..\/data\/raw\/'\n    }\n\nout_dir_dict = {\n    'kaggle': '.\/',\n    'local': '..\/..\/submissions\/'}\n\ndata_dir = data_dir_dict[platform]\nout_dir = out_dir_dict[platform]\ndel data_dir_dict, out_dir_dict\n\nt0 = time.time()\n\ndef create_out_dir(cfg, prefix=''):\n    datetime_str = time.strftime(\"%d_%m_time_%H_%M\", time.localtime())\n    out_dir = '..\/..\/submissions\/{}_{}_m_{}_ep{}_bs{}_nf{}_t_{}'.format(\n                prefix, experiment_name, datetime_str)   # bs, weight_decay, , folds_str,\n\n    if cfg.debug:\n        out_dir = osj(os.path.dirname(out_dir), 'debug_' + os.path.basename(out_dir))\n    # models_outdir = osj(out_dir, 'models')\n    os.makedirs(out_dir)\n    # os.makedirs(models_outdir)\n    return out_dir # , models_outdir\n\ndef normalize_joint(train: pd.DataFrame, test, feats: list, tfm=MinMaxScaler, feature_range=(-1,1)):\n    if tfm == MinMaxScaler:\n        scaler = tfm(feature_range=feature_range)\n    else:\n        scaler = tfm()\n    len_train = train.shape[0]\n    data = pd.concat([train[feats], test[feats]]).values\n    data = scaler.fit_transform(data)\n    train.loc[:, feats] = data[:len_train]\n    test.loc[:, feats] = data[len_train:]\n    return train, test\n\n    \n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\ndef calc_wap3(df):\n    wap = (df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\ndef calc_wap4(df):\n    wap = (df['bid_price2'] * df['bid_size2'] + df['ask_price2'] * df['ask_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n# Function to calculate the log of the return\n# Remember that logb(x \/ y) = logb(x) - logb(y)\ndef log_return(series):\n    return np.log(series).diff()\n\n# Calculate the realized volatility\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\n# Function to read our base train and test set\ndef read_train_test(read_test=True, aug_vol=None):\n    train = pd.read_csv(osj(data_dir, 'train.csv'))\n    # Create a key to merge with book and trade data\n    if aug_vol:\n        train_aug = train.copy()\n        train_aug.loc[:, 'target'] *= 1 + aug_vol\n        train_aug.loc[:, 'time_id'] += aug_time_id_add\n        train = pd.concat([train, train_aug]).reset_index(drop=True)\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n\n    if read_test:\n        test = pd.read_csv(osj(data_dir, 'test.csv'))\n        test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    else:\n        test = None\n    print(f'Original train.csv has {train.shape[0]} rows')\n    return train, test\n\ndef augment_book(df, aug_vol, book_or_trade='book'):\n    df_aug = df.copy()\n    if book_or_trade=='book':\n        price_cols = ['bid_price1', 'ask_price1', 'bid_price2', 'ask_price2']\n    else:\n        price_cols = 'price'\n    df_aug.loc[:, price_cols] += (df[price_cols] -1)*aug_vol\n    df_aug.loc[:, 'time_id'] += aug_time_id_add\n    df = pd.concat([df, df_aug]).reset_index(drop=True)\n    return df\n    \n# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path, is_train):\n    df = pd.read_parquet(file_path)\n            \n    if debug and is_train:\n        df = df.iloc[::16]  # sample(frac=0.1)\n    \n    # add augment rows\n    if is_train and aug_vol:\n        df = augment_book(df, aug_vol, book_or_trade='book')\n    \n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    df['wap3'] = calc_wap3(df)\n    df['wap4'] = calc_wap4(df)\n    # Calculate log returns\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    df['log_return3'] = df.groupby(['time_id'])['wap3'].apply(log_return)\n    df['log_return4'] = df.groupby(['time_id'])['wap4'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['price_spread2'] = (df['ask_price2'] - df['bid_price2']) \/ ((df['ask_price2'] + df['bid_price2']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df[\"bid_ask_spread\"] = abs(df['bid_spread'] - df['ask_spread'])\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.std],\n        'wap2': [np.sum, np.std],\n        'wap3': [np.sum, np.std],\n        'wap4': [np.sum, np.std],\n        'log_return1': [realized_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n        'wap_balance': [np.sum, np.max],\n        'price_spread':[np.sum, np.max],\n        'price_spread2':[np.sum, np.max],\n        'bid_spread':[np.sum, np.max],\n        'ask_spread':[np.sum, np.max],\n        'total_volume':[np.sum, np.max],\n        'volume_imbalance':[np.sum, np.max],\n        \"bid_ask_spread\":[np.sum,  np.max],\n    }\n    create_feature_dict_time = {\n        'log_return1': [realized_volatility],\n        'log_return2': [realized_volatility],\n        'log_return3': [realized_volatility],\n        'log_return4': [realized_volatility],\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id__100'], axis = 1, inplace = True)\n    \n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path, is_train):\n    df = pd.read_parquet(file_path)\n    if debug and is_train:\n        df = df.iloc[::16]  # sample(frac=0.1)\n    \n    \n    if is_train and aug_vol:\n        df = augment_book(df, aug_vol, book_or_trade='trade')\n    \n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    df['amount']=df['price']*df['size']\n    # Dict for aggregations\n    create_feature_dict = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum, np.max, np.min],\n        'order_count':[np.sum,np.max],\n        'amount':[np.sum,np.max,np.min],\n    }\n    create_feature_dict_time = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.sum],\n    }\n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n\n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n    \n    def tendency(price, vol):    \n        df_diff = np.diff(price)\n        val = (df_diff\/price[1:])*100\n        power = np.sum(val*vol[1:])\n        return(power)\n    \n    lis = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]        \n        tendencyV = tendency(df_id['price'].values, df_id['size'].values)      \n        f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max =  np.sum(np.diff(df_id['price'].values) > 0)\n        df_min =  np.sum(np.diff(df_id['price'].values) < 0)\n        # new\n        abs_diff = np.median(np.abs( df_id['price'].values - np.mean(df_id['price'].values)))        \n        energy = np.mean(df_id['price'].values**2)\n        iqr_p = np.percentile(df_id['price'].values,75) - np.percentile(df_id['price'].values,25)\n        \n        # vol vars\n        \n        abs_diff_v = np.median(np.abs( df_id['size'].values - np.mean(df_id['size'].values)))        \n        energy_v = np.sum(df_id['size'].values**2)\n        iqr_p_v = np.percentile(df_id['size'].values,75) - np.percentile(df_id['size'].values,25)\n        \n        lis.append({'time_id':n_time_id,'tendency':tendencyV,'f_max':f_max,'f_min':f_min,'df_max':df_max,'df_min':df_min,\n                   'abs_diff':abs_diff,'energy':energy,'iqr_p':iqr_p,'abs_diff_v':abs_diff_v,'energy_v':energy_v,'iqr_p_v':iqr_p_v})\n    \n    df_lr = pd.DataFrame(lis)\n        \n   \n    df_feature = df_feature.merge(df_lr, how = 'left', left_on = 'time_id_', right_on = 'time_id')\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id','time_id__100'], axis = 1, inplace = True)\n    \n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    vol_cols = ['log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_400', 'log_return2_realized_volatility_400', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_200', 'log_return2_realized_volatility_200', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_400', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_200']\n\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    t0_prep = time.time()\n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        if len(glob.glob(osj(file_path_book, '*.parquet')))>0 and len(glob.glob(osj(file_path_trade, '*.parquet')))>0:\n            df_tmp = pd.merge(book_preprocessor(file_path_book, is_train), trade_preprocessor(file_path_trade, is_train), on = 'row_id', how = 'left')\n        else:\n            df_tmp = None\n                \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    if False:  # debug:\n        df = []\n        for stock_id in list_stock_ids:\n            df0 = for_joblib(stock_id)\n            df.append(df0)\n    else: # not debug\n        df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    \n    df = [df_ for df_ in df if isinstance(df_, pd.DataFrame)]\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    print(f\"reading def preprocessor time = {(time.time() - t0_prep)\/60:.2f} min\")\n    return df\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\n\n\n# Read train and test\ntrain, test = read_train_test(read_test=True, aug_vol=aug_vol)\n\n# Get unique stock ids \ntrain_stock_ids = train['stock_id'].unique()","ac5e2d2d":"if load_train_preprocessed:\n    train = pd.read_csv(path_train_preprocessed)\nelse:\n    if debug:\n        train_stock_ids = train_stock_ids[:4]\n        train = train[train['stock_id'].isin(train_stock_ids)]\n        test = test[test['stock_id'].isin(train_stock_ids)]\n\n    # Preprocess them using Parallel and our single stock id functions\n    train_ = preprocessor(train_stock_ids, is_train = True)\n    train = train.merge(train_, on = ['row_id'], how = 'left')\n\n#     # Get unique stock ids \n#     test_stock_ids = test['stock_id'].unique()\n#     # Preprocess them using Parallel and our single stock id functions\n#     test_ = preprocessor(test_stock_ids, is_train = False)\n#     test = test.merge(test_, on = ['row_id'], how = 'left')\n\n    # Get group stats of time_id and stock_id\n    train = get_time_stock(train)\n#     test = get_time_stock(test)\n\n    # replace by order sum (tau)\n    train['size_tau'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique'] )\n#     test['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\n    #train['size_tau_450'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_450'] )\n    #test['size_tau_450'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_450'] )\n    train['size_tau_400'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_400'] )\n#     test['size_tau_400'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_400'] )\n    train['size_tau_300'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_300'] )\n#     test['size_tau_300'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_300'] )\n    #train['size_tau_150'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_150'] )\n    #test['size_tau_150'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_150'] )\n    train['size_tau_200'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_200'] )\n#     test['size_tau_200'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_200'] )\n\n    train['size_tau2'] = np.sqrt( 1\/ train['trade_order_count_sum'] )\n#     test['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )\n    #train['size_tau2_450'] = np.sqrt( 0.25\/ train['trade_order_count_sum'] )\n    #test['size_tau2_450'] = np.sqrt( 0.25\/ test['trade_order_count_sum'] )\n    train['size_tau2_400'] = np.sqrt( 0.33\/ train['trade_order_count_sum'] )\n#     test['size_tau2_400'] = np.sqrt( 0.33\/ test['trade_order_count_sum'] )\n    train['size_tau2_300'] = np.sqrt( 0.5\/ train['trade_order_count_sum'] )\n#     test['size_tau2_300'] = np.sqrt( 0.5\/ test['trade_order_count_sum'] )\n    #train['size_tau2_150'] = np.sqrt( 0.75\/ train['trade_order_count_sum'] )\n    #test['size_tau2_150'] = np.sqrt( 0.75\/ test['trade_order_count_sum'] )\n    train['size_tau2_200'] = np.sqrt( 0.66\/ train['trade_order_count_sum'] )\n#     test['size_tau2_200'] = np.sqrt( 0.66\/ test['trade_order_count_sum'] )\n\n    # delta tau\n    train['size_tau2_d'] = train['size_tau2_400'] - train['size_tau2']\n#     test['size_tau2_d'] = test['size_tau2_400'] - test['size_tau2']\n    \n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\ntest = get_time_stock(test)\ntest['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\ntest['size_tau_400'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_400'] )\ntest['size_tau_300'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_300'] )\ntest['size_tau_200'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_200'] )\ntest['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )\ntest['size_tau2_400'] = np.sqrt( 0.33\/ test['trade_order_count_sum'] )\ntest['size_tau2_300'] = np.sqrt( 0.5\/ test['trade_order_count_sum'] )\ntest['size_tau2_200'] = np.sqrt( 0.66\/ test['trade_order_count_sum'] )\ntest['size_tau2_d'] = test['size_tau2_400'] - test['size_tau2']\n\n\ntrain.replace([np.inf, -np.inf], np.nan, inplace=True)\ntest.replace([np.inf, -np.inf], np.nan,inplace=True)\n\ntrain['target'] = np.clip(train['target'], 0.00001, 0.9)\n\nprint(\"train.shape, test.shape:\", train.shape, test.shape)\n\n","4370c397":"print(\"train.shape, test.shape:\", train.shape, test.shape)","3cdf0a01":"features_norm = [feat for feat in train.columns if feat not in ['stock_id','time_id',\n                                                         'target','fold', 'row_id']]\n\nfeat_means = pd.concat([train[features_norm], test[features_norm]]).mean()\n\ntrain[features_norm] = train[features_norm].fillna(feat_means)\ntest[features_norm] = test[features_norm].fillna(feat_means)\n\nif is_normalize_joint:\n    train, test = normalize_joint(train, test, features_norm, tfm=StandardScaler)\n","b93d52c0":"%%time\nkmeans_all = KMeans(n_clusters = n_clusters_samples, random_state = 24)\n\n\n# train['kmeans_time_id'] = fit_predict(train[features_norm], sample_weight) = )\nlen_train = len(train)\ntraintest = pd.concat([train, test])\nlabels_ = kmeans_all.fit_predict(traintest[features_norm])  # , sample_weight) = )\ntrain['kmeans_all_samples'] = labels_[:len_train]\ntest['kmeans_all_samples'] = labels_[len_train:]\n\ndel traintest, labels_, kmeans_all, features_norm; _ = gc.collect()\n\ntrain['kmeans_all_samples'].value_counts()","f83f89e4":"test['kmeans_all_samples'].head()","8b3c643b":"colNames = [col for col in list(train.columns)\n            if col not in {\"stock_id\", \"time_id\", \"target\", \"row_id\"}]\n\n# making agg features\n\n# train_p = pd.read_csv(osj(data_dir, 'train.csv'))\ntrain_p, _ = read_train_test(read_test=False, aug_vol=aug_vol)\nif debug:\n    # train_stock_ids = train_stock_ids[:4]\n    train_p = train_p[train_p['stock_id'].isin(train_stock_ids)]\n    # test = test[test['stock_id'].isin(train_stock_ids)]\n\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\n# corrs of target values of 'stock_id's  (across the same 'time_id's):\ncorr = train_p.corr()\n\nids = corr.index  # stock_ids\n\nn_clusters = 7 if not debug else 2\nkmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(corr.values)\nprint(\"kmeans.labels_:\", kmeans.labels_)\n\nl = []\nfor n in range(n_clusters):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    print(f\"kmean label indices: {ind}\")\n    newDf = train.loc[train['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test.loc[test['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()\n\n\nmat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)\n\n# todo: how he chose nnn (51) features out of 389 feats of mat1\nnnn = ['time_id',\n     'log_return1_realized_volatility_0c1',\n     'log_return1_realized_volatility_1c1',     \n     'log_return1_realized_volatility_3c1',\n     'log_return1_realized_volatility_4c1',     \n     'log_return1_realized_volatility_6c1',\n     'total_volume_sum_0c1',\n     'total_volume_sum_1c1', \n     'total_volume_sum_3c1',\n     'total_volume_sum_4c1', \n     'total_volume_sum_6c1',\n     'trade_size_sum_0c1',\n     'trade_size_sum_1c1', \n     'trade_size_sum_3c1',\n     'trade_size_sum_4c1', \n     'trade_size_sum_6c1',\n     'trade_order_count_sum_0c1',\n     'trade_order_count_sum_1c1',\n     'trade_order_count_sum_3c1',\n     'trade_order_count_sum_4c1',\n     'trade_order_count_sum_6c1',      \n     'price_spread_sum_0c1',\n     'price_spread_sum_1c1',\n     'price_spread_sum_3c1',\n     'price_spread_sum_4c1',\n     'price_spread_sum_6c1',   \n     'bid_spread_sum_0c1',\n     'bid_spread_sum_1c1',\n     'bid_spread_sum_3c1',\n     'bid_spread_sum_4c1',\n     'bid_spread_sum_6c1',       \n     'ask_spread_sum_0c1',\n     'ask_spread_sum_1c1',\n     'ask_spread_sum_3c1',\n     'ask_spread_sum_4c1',\n     'ask_spread_sum_6c1',   \n     'volume_imbalance_sum_0c1',\n     'volume_imbalance_sum_1c1',\n     'volume_imbalance_sum_3c1',\n     'volume_imbalance_sum_4c1',\n     'volume_imbalance_sum_6c1',       \n     'bid_ask_spread_sum_0c1',\n     'bid_ask_spread_sum_1c1',\n     'bid_ask_spread_sum_3c1',\n     'bid_ask_spread_sum_4c1',\n     'bid_ask_spread_sum_6c1',\n     'size_tau2_0c1',\n     'size_tau2_1c1',\n     'size_tau2_3c1',\n     'size_tau2_4c1',\n     'size_tau2_6c1']\nnnn = [col for col in nnn if col in mat1.columns]\ntrain = pd.merge(train, mat1[nnn], how='left', on='time_id')\ntest = pd.merge(test, mat2[nnn], how='left', on='time_id')\n\ndel mat1,mat2\ngc.collect()\n\n\n# -----\n\nseed0=2021\nparams0 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':100,\n    'min_data_in_leaf':500,\n    'learning_rate': 0.05,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.5,\n    'lambda_l1': 0.5,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\nseed1=42\nparams1 = {\n        'learning_rate': 0.1,        \n        'lambda_l1': 2,\n        'lambda_l2': 7,\n        'num_leaves': 800,\n        'min_sum_hessian_in_leaf': 20,\n        'feature_fraction': 0.8,\n        'feature_fraction_bynode': 0.8,\n        'bagging_fraction': 0.9,\n        'bagging_freq': 42,\n        'min_data_in_leaf': 700,\n        'max_depth': 4,\n        'categorical_column':[0],\n        'seed': seed1,\n        'feature_fraction_seed': seed1,\n        'bagging_seed': seed1,\n        'drop_seed': seed1,\n        'data_random_seed': seed1,\n        'objective': 'rmse',\n        'boosting': 'gbdt',\n        'verbosity': -1,\n        'n_jobs':-1,\n    }\n# Function to early stop with root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\ndef train_and_evaluate_lgb(train, test, params, drop_stock_id=True, seed=1):\n    # Hyperparammeters (just basic)\n#     idx_orig_train = train.index\n    train = train.sample(frac=1.0, random_state = seed)\n    params['seed'] = seed\n    params['data_random_seed'] = seed\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    \n    if drop_stock_id:\n        features.remove('stock_id')\n    if not use_tau_lgb:\n        features = [col for col in features if '_tau' not in col]\n    \n    print(f\"Num of features for LGB = {len(features)}\")\n        \n    y = train['target']\n    # Create out of folds array\n    oof_predictions = np.zeros(train.shape[0])\n    # Create test array to store predictions\"\n    test_predictions = np.zeros(test.shape[0])\n    # Create a KFold object\n#     kfold = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n    group_kfold = GroupKFold(n_splits = n_folds)\n    # Iterate through each fold\n    for fold, (trn_ind, val_ind) in enumerate(group_kfold.split(train['target'], groups=train['time_id'])):\n        if aug_vol:\n            val_nonaug_idx = train.iloc[val_ind][train['time_id']<aug_time_id_add].index\n            x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind].loc[val_nonaug_idx]\n            y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind].loc[val_nonaug_idx]\n        else:\n            x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n            y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        print(f'Training fold {fold + 1}, len(x_train)={len(x_train)}, len(x_val)={len(x_val)}')    \n        # Root mean squared percentage error weights\n        train_weights = 1 \/ np.square(y_train)\n#         val_weights = 1 \/ np.square(y_val)\n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val)  # , weight = val_weights)\n        model = lgb.train(params = params,\n                          num_boost_round=num_iter_lgb,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 250,\n                          early_stopping_rounds=300,\n                          feval = feval_rmspe)\n        # Add predictions to the out of folds array\n        oof_predictions[val_ind] = model.predict(x_val[features])\n        # Predict the test set        \n        test_predictions += model.predict(test[features]) \/ n_folds\n        \n    lgb_rmspe_score = rmspe(y, oof_predictions)\n    print(f'\\nLGB OOF RMSPE score is {lgb_rmspe_score:.5f}\\n')\n    lgb.plot_importance(model,max_num_features=20)\n    # Return test predictions\n    return test_predictions, lgb_rmspe_score\n# Traing and evaluate\nif is_train_lgb:\n    predictions_lgb, lgb_rmspe_score = train_and_evaluate_lgb(train, test, params0, drop_stock_id=False, seed=11)\n    predictions_lgb2, lgb_rmspe_score2 = train_and_evaluate_lgb(train, test, params0, drop_stock_id=False, seed=22)\n    predictions_lgb3, lgb_rmspe_score3 = train_and_evaluate_lgb(train, test, params0, drop_stock_id=False, seed=33)\n\n    predictions_lgb = (predictions_lgb + predictions_lgb2 + predictions_lgb3) \/ 3\n    del predictions_lgb2, predictions_lgb3\n    \n    preds_lgb_nostock, lgb_score_nostock = train_and_evaluate_lgb(train, test, params0, drop_stock_id=True, seed=44)\n    preds_lgb_nostock2, lgb_score_nostock2 = train_and_evaluate_lgb(train, test, params0, drop_stock_id=True, seed=55)\n    preds_lgb_nostock3, lgb_score_nostock3 = train_and_evaluate_lgb(train, test, params0, drop_stock_id=True, seed=66)\n\n    preds_lgb_nostock = (preds_lgb_nostock + preds_lgb_nostock2 + preds_lgb_nostock3 ) \/ 3\n    del preds_lgb_nostock2, preds_lgb_nostock3\n    _ = gc.collect()\n    print(\"lgb_rmspe_score, lgb_rmspe_score2, lgb_score_nostock, lgb_score_nostock2:\\n\", \n          lgb_rmspe_score, lgb_rmspe_score2, lgb_rmspe_score3, lgb_score_nostock, lgb_score_nostock2, lgb_score_nostock3)\n#     test['target'] = predictions_lgb*0.7 + preds_nostock*0.3\n    # test[['row_id', 'target']].to_csv(osj(out_dir, 'submission.csv'),index = False)","da16d559":"print(train.shape, test.shape)\nnp.setxor1d(train.columns, test.columns)","ea2d59cc":"# --- FFNN ---\n\nnp.random.seed(42)\ntf.random.set_seed(42)\n\ndef root_mean_squared_per_error(y_true, y_pred):\n         return K.sqrt(K.mean(K.square( (y_true - y_pred)\/ y_true )))\n    \nes = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', patience=20, verbose=0,\n    mode='min',restore_best_weights=True)\n\nplateau = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.2, patience=7, verbose=0,\n    mode='min')\n\n# kfold based on the knn++ algorithm\n\n# out_train = pd.read_csv(osj(data_dir, 'train.csv'))\nout_train, _ = read_train_test(read_test=False, aug_vol=aug_vol)\n\nif debug:\n    # train_stock_ids = train_stock_ids[:4]\n    out_train = out_train[out_train['stock_id'].isin(train_stock_ids)]\n    # test = test[test['stock_id'].isin(train_stock_ids)]\n\nout_train = out_train.pivot(index='time_id', columns='stock_id', values='target')\n\n#out_train[out_train.isna().any(axis=1)]\nout_train = out_train.fillna(out_train.mean())\n\n# code to add the just the read data after first execution\n\n# data separation based on knn ++\nnfolds = 5  # 5 # number of folds\nindex = []\ntotDist = []\nvalues = []\n# generates a matriz with the values of \nmat = out_train.values\n\nscaler = MinMaxScaler(feature_range=(-1, 1))\nmat = scaler.fit_transform(mat)\n\nnind = int(mat.shape[0]\/nfolds) # number of individuals\n\n# adds index in the last column\nmat = np.c_[mat,np.arange(mat.shape[0])]\n\n# lineNumber = np.random.choice(np.array(mat.shape[0]), size=nfolds, replace=False)\nlineNumber = np.random.choice(mat.shape[0], size=nfolds, replace=False)\nlineNumber = np.sort(lineNumber)[::-1]\n\nfor n in range(nfolds):\n    totDist.append(np.zeros(mat.shape[0]-nfolds))\n\n# saves index\nfor n in range(nfolds):\n    values.append([lineNumber[n]])    \n\n\ns=[]\nfor n in range(nfolds):\n    s.append(mat[lineNumber[n],:])\n    \n    mat = np.delete(mat, obj=lineNumber[n], axis=0)\n\nfor n in range(nind-1):    \n\n    luck = np.random.uniform(0,1,nfolds)\n    \n    for cycle in range(nfolds):\n         # saves the values of index           \n\n        s[cycle] = np.matlib.repmat(s[cycle], mat.shape[0], 1)\n\n        sumDist = np.sum( (mat[:,:-1] - s[cycle][:,:-1])**2 , axis=1)   \n        totDist[cycle] += sumDist        \n                \n        # probabilities\n        f = totDist[cycle]\/np.sum(totDist[cycle]) # normalizing the totdist\n        j = 0\n        kn = 0\n        for val in f:\n            j += val        \n            if (j > luck[cycle]): # the column was selected\n                break\n            kn +=1\n        lineNumber[cycle] = kn\n        \n        # delete line of the value added    \n        for n_iter in range(nfolds):\n            \n            totDist[n_iter] = np.delete(totDist[n_iter],obj=lineNumber[cycle], axis=0)\n            j= 0\n        \n        s[cycle] = mat[lineNumber[cycle],:]\n        values[cycle].append(int(mat[lineNumber[cycle],-1]))\n        mat = np.delete(mat, obj=lineNumber[cycle], axis=0)\n\n\nfor n_mod in range(nfolds):\n    values[n_mod] = out_train.index[values[n_mod]]\n\n#colNames.remove('row_id')\ntrain.replace([np.inf, -np.inf], np.nan, inplace=True)\ntest.replace([np.inf, -np.inf], np.nan,inplace=True)\nqt_train = []\ntrain_nn=train[colNames].copy()\ntest_nn=test[colNames].copy()\n\nlen_train = len(train_nn)\nfor col in colNames:\n    qt = QuantileTransformer(random_state=21,n_quantiles=2000, output_distribution='normal')\n    if is_qtransform_separate:\n        train_nn[col] = qt.fit_transform(train_nn[[col]])\n        test_nn[col] = qt.transform(test_nn[[col]])\n    elif is_qtransform_joint:\n        data = pd.concat([train_nn[[col]], test_nn[[col]]]).values\n        data = qt.fit_transform(data)\n        train_nn.loc[:,col] = data[:len_train]\n        test_nn.loc[:, col] = data[len_train:]\n\ntrain_nn[['stock_id','time_id','target']]=train[['stock_id','time_id','target']]\ntest_nn[['stock_id','time_id']]=test[['stock_id','time_id']]\n\n# making agg features\n\n# train_p = pd.read_csv(osj(data_dir, 'train.csv'))\ntrain_p, _ = read_train_test(read_test=False, aug_vol=aug_vol)\n\nif debug:\n    # train_stock_ids = train_stock_ids[:4]\n    train_p = train_p[train_p['stock_id'].isin(train_stock_ids)]\n    # test = test[test['stock_id'].isin(train_stock_ids)]\n\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\n\nids = corr.index\n\nkmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(corr.values)\nprint(kmeans.labels_)\n\nl = []\nfor n in range(n_clusters):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    print(ind)\n    newDf = train_nn.loc[train_nn['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test_nn.loc[test_nn['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()\nmat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\n\nnnn = ['time_id',\n     'log_return1_realized_volatility_0c1',\n     'log_return1_realized_volatility_1c1',     \n     'log_return1_realized_volatility_3c1',\n     'log_return1_realized_volatility_4c1',     \n     'log_return1_realized_volatility_6c1',\n     'total_volume_sum_0c1',\n     'total_volume_sum_1c1', \n     'total_volume_sum_3c1',\n     'total_volume_sum_4c1', \n     'total_volume_sum_6c1',\n     'trade_size_sum_0c1',\n     'trade_size_sum_1c1', \n     'trade_size_sum_3c1',\n     'trade_size_sum_4c1', \n     'trade_size_sum_6c1',\n     'trade_order_count_sum_0c1',\n     'trade_order_count_sum_1c1',\n     'trade_order_count_sum_3c1',\n     'trade_order_count_sum_4c1',\n     'trade_order_count_sum_6c1',      \n     'price_spread_sum_0c1',\n     'price_spread_sum_1c1',\n     'price_spread_sum_3c1',\n     'price_spread_sum_4c1',\n     'price_spread_sum_6c1',   \n     'bid_spread_sum_0c1',\n     'bid_spread_sum_1c1',\n     'bid_spread_sum_3c1',\n     'bid_spread_sum_4c1',\n     'bid_spread_sum_6c1',       \n     'ask_spread_sum_0c1',\n     'ask_spread_sum_1c1',\n     'ask_spread_sum_3c1',\n     'ask_spread_sum_4c1',\n     'ask_spread_sum_6c1',   \n     'volume_imbalance_sum_0c1',\n     'volume_imbalance_sum_1c1',\n     'volume_imbalance_sum_3c1',\n     'volume_imbalance_sum_4c1',\n     'volume_imbalance_sum_6c1',       \n     'bid_ask_spread_sum_0c1',\n     'bid_ask_spread_sum_1c1',\n     'bid_ask_spread_sum_3c1',\n     'bid_ask_spread_sum_4c1',\n     'bid_ask_spread_sum_6c1',\n     'size_tau2_0c1',\n     'size_tau2_1c1',\n     'size_tau2_3c1',\n     'size_tau2_4c1',\n     'size_tau2_6c1'] \n\nnnn = [col for col in nnn if col in mat1.columns]\n\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)\n\ntrain_nn = pd.merge(train_nn,mat1[nnn],how='left',on='time_id')\ntest_nn = pd.merge(test_nn,mat2[nnn],how='left',on='time_id')\ndel mat1,mat2\nif not debug: del train,test\ngc.collect()\n\n#https:\/\/bignerdranch.com\/blog\/implementing-swish-activation-function-in-keras\/\ndef swish(x, beta = 1):\n    return (x * sigmoid(beta * x))\n\nget_custom_objects().update({'swish': Activation(swish)})\n\nhidden_units = (128,64,32)\nstock_embedding_size = 24\n\ncat_data = train_nn['stock_id']\n\ndef base_model(num_input_dim=244):\n    \n    # Each instance will consist of two inputs: a single user id, and a single movie id\n    stock_id_input = keras.Input(shape=(1,), name='stock_id')\n    # num_input = keras.Input(shape=(244,), name='num_data')\n    num_input = keras.Input(shape=(num_input_dim,), name='num_data')\n\n    #embedding, flatenning and concatenating\n    stock_embedded = keras.layers.Embedding(max(cat_data)+1, stock_embedding_size, \n                                           input_length=1, name='stock_embedding')(stock_id_input)\n    stock_flattened = keras.layers.Flatten()(stock_embedded)\n    out = keras.layers.Concatenate()([stock_flattened, num_input])\n    \n    # Add one or more hidden layers\n    for n_hidden in hidden_units:\n\n        out = keras.layers.Dense(n_hidden, activation='swish')(out)\n        \n    #out = keras.layers.Concatenate()([out, num_input])\n\n    # A single output: our predicted rating\n    out = keras.layers.Dense(1, activation='linear', name='prediction')(out)\n    \n    model = keras.Model(\n    inputs = [stock_id_input, num_input],\n    outputs = out,\n    )\n    \n    return model\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False","82daccd2":"target_name='target'\nscores_folds = {}\nmodel_name = 'NN'\npred_name = 'pred_{}'.format(model_name)\n\nkf = model_selection.KFold(n_splits=nfolds, shuffle=True, random_state=2020)\nscores_folds[model_name] = []\ncounter = 1\n\nfeatures_to_consider = list(train_nn)\n\nfeatures_to_consider.remove('time_id')\nfeatures_to_consider.remove('target')\ntry:\n    features_to_consider.remove('pred_NN')\nexcept:\n    pass\n\n\ntrain_nn[features_to_consider] = train_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\ntest_nn[features_to_consider] = test_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\n\ntrain_nn[pred_name] = 0\ntest_nn[target_name] = 0\ntest_predictions_nn = np.zeros(test_nn.shape[0])\n\nif is_normalize_joint:\n    feats_x_stock_id = [feat for feat in features_to_consider if feat!='stock_id']\n    train_nn, test_nn = normalize_joint(train_nn, test_nn, feats_x_stock_id)\n\nfor n_count in range(nfolds):\n    \n    indexes = np.arange(nfolds).astype(int)    \n    indexes = np.delete(indexes,obj=n_count, axis=0) \n    \n    indexes = np.r_[values[indexes[0]],values[indexes[1]],values[indexes[2]],values[indexes[3]]]\n    \n    X_train = train_nn.loc[train_nn.time_id.isin(indexes), features_to_consider]\n    y_train = train_nn.loc[train_nn.time_id.isin(indexes), target_name]\n    X_test = train_nn.loc[train_nn.time_id.isin(values[n_count])&(train_nn.time_id<aug_time_id_add), features_to_consider]\n    y_test = train_nn.loc[train_nn.time_id.isin(values[n_count])&(train_nn.time_id<aug_time_id_add), target_name]\n    print('Fold {}\/{}, x_train.shape = {}, X_val.shape = {}'.format(counter, nfolds, X_train.shape, X_test.shape))\n\n    #############################################################################################\n    # NN\n    #############################################################################################\n\n    try:\n        features_to_consider.remove('stock_id')\n    except:\n        pass\n\n    num_data = X_train[features_to_consider]\n\n    if not is_normalize_joint:\n        scaler = MinMaxScaler(feature_range=(-1, 1))\n        num_data = scaler.fit_transform(num_data.values)\n\n    cat_data = X_train['stock_id']\n    target = y_train\n\n    num_data_test = X_test[features_to_consider]\n    if not is_normalize_joint:\n        num_data_test = scaler.transform(num_data_test.values)\n    cat_data_test = X_test['stock_id']\n\n    num_input_dim = num_data.shape[1]  #  + cat_data.shape[0]\n    model = base_model(num_input_dim=num_input_dim)\n    \n    model.compile(\n        keras.optimizers.Adam(learning_rate=0.006),\n        loss=root_mean_squared_per_error\n    )\n\n\n    model.fit([cat_data, num_data], \n              target,               \n              batch_size=2048,\n              epochs=n_epochs,\n              validation_data=([cat_data_test, num_data_test], y_test),\n              callbacks=[es, plateau],\n              validation_batch_size=len(y_test),\n              shuffle=True,\n             verbose = 2)\n\n    preds = model.predict([cat_data_test, num_data_test]).reshape(1,-1)[0]\n    score = round(rmspe(y_true = y_test, y_pred = preds),5)\n    print('Fold {} {}: {}'.format(counter, model_name, score))\n    scores_folds[model_name].append(score)\n\n    if not is_normalize_joint:\n        tt =scaler.transform(test_nn[features_to_consider].values)\n    else:\n        tt = test_nn[features_to_consider].values\n    test_predictions_nn += model.predict([test_nn['stock_id'], tt]).reshape(1,-1)[0]\/nfolds\n       \n    counter += 1\n    features_to_consider.append('stock_id')\n\n\n    \ntest_nn[\"row_id\"] = test_nn[\"stock_id\"].astype(str) + \"-\" + test_nn[\"time_id\"].astype(str) \n\nif is_train_lgb:\n#     test_nn[target_name] = (test_predictions_nn*0.7+preds_nn_nostock*0.3\n    test_nn[target_name] = (0.3*test_predictions_nn\n                            + 0.7*(predictions_lgb*0.6+preds_lgb_nostock*0.4))\nelse:\n#     test_nn[target_name] = test_predictions_nn*0.7+preds_nn_nostock*0.3\n    test_nn[target_name] = test_predictions_nn\n\n\nscore = round(rmspe(y_true = train_nn[target_name].values, y_pred = train_nn[pred_name].values), 5)\nave_score_folds = np.mean(scores_folds[model_name])\n\nprint('RMSPE {}: {} - Ave score: {} - Folds scores: {}'\n            .format(model_name, score, ave_score_folds, scores_folds[model_name]))\nif is_train_lgb:\n    print(f'\\nLGB OOF RMSPE score is {lgb_rmspe_score:.5f},\\nLGB NoStock RMSPE score = {lgb_score_nostock:.5f}\\n')\n\n# display(test_nn[['row_id', target_name]].head(3))\ntest_nn[target_name] = np.clip(test_nn[target_name], 0.00001, 0.5)\n\ntest_nn[['row_id', target_name]].to_csv(osj(out_dir, 'submission.csv'), index = False)\n#test[['row_id', target_name]].to_csv('submission.csv',index = False)\n#kmeans N=5 [0.2101, 0.21399, 0.20923, 0.21398, 0.21175]\n\nprint(f\"Total runtime = {(time.time()-t0)\/60:.2f} min.\")","f31651de":"!ls","cfd4fc6c":"preds.min(), preds.max(), preds.mean(), preds.shape","b945991b":"[col for col in features_to_consider if 'kmeans' in col]","c240b38f":"#### ver.2 \n#### time_id kmeans\n#### test_nn[target_name] = np.clip(test_nn[target_name], 0.00001, 0.5)\n\n####  ver.1 Compare to PL=0.19945 (which was with train, test = read_train_test()  # missing (read_test=True, aug_vol=aug_vol) arguments\n#### aug_vol = None (was 0.3 but with bug, missing arguments train, test = read_train_test() instead of (read_test=True, aug_vol=aug_vol) arguments\n\n#### GroupKFold instead of KFold for LGBM  and KFold for NN\n#### Stock to NoStock ratio = 0.60 : \n(0.3*test_predictions_nn  \n'+ 0.7*(predictions_lgb*0.6+preds_lgb_nostock*0.4))\n#### load_train_preprocessed = True \n\n\n  \n  ","5650c567":"### time_id kmeans (add column with labels)","f4f48517":"  \n\n### ver.5 use taus\n\n\n### ver.3 No Taus for LGB, lgbs*0.6 + nn*0.4\n\n### ver.2: np.clip('target'), np.inf to np.nan\n\n### ver.1:\n### blend: (lgb_w_Stock*0.7 + lgb_NoStock*03)*0.5 + nn*0.5\n\n\n### =======================\n### excluded stock_id from features in lgbm\n### and set stock_embedding_size=2 (was 24) for NN\n\n### - Joint traintest quantile transform, Normalize, lgb + NN\n\n\n\n### Based on\n### LB of lgbm+nn is 0.19758\n### AlexiosLyon\nhttps:\/\/www.kaggle.com\/alexioslyon\/lgbm-baseline\n\nthe stock embeddings part is a copy of \n### Douglas Marques https:\/\/www.kaggle.com\/tatudoug\/stock-embedding-ffnn-my-features,","0ee1a7d3":"#### fillna before lgbm and normalize feats"}}