{"cell_type":{"b70d146a":"code","3bcdc040":"code","2bcae762":"code","f36cdf56":"code","72dc2632":"code","3055007a":"code","d41415e7":"code","7ded16ba":"code","46b3d22d":"code","035b3161":"code","8c203580":"code","dfbb2870":"code","5d6bb4a9":"markdown","bbe50010":"markdown","1c4f9efc":"markdown","8faf1edf":"markdown","2bb4e6f2":"markdown","e761d917":"markdown","bda6a68d":"markdown","29031b41":"markdown","3aee62c1":"markdown","da56840b":"markdown"},"source":{"b70d146a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bcdc040":"from sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.callbacks import EarlyStopping","2bcae762":"df =  pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ndf.head()","f36cdf56":"X = df.iloc[:, 1:-1]\ny = df['target']\ny = pd.get_dummies(y)","72dc2632":"X_train, X_val, y_train, y_val = train_test_split(X, y,\n                                                    test_size=0.2,\n                                                    stratify=y,\n                                                    random_state=0)\n\n# Checking split shapes\nprint(f'X_train shape: {X_train.shape}\\nX_test shape: {X_val.shape}')\nprint(f'y_train shape: {y_train.shape}\\ny_val shape: {y_val.shape}')","3055007a":" y_train.shape[1]","d41415e7":"n_features = X_train.shape[1]\nn_classes = y_train.shape[1]\n# Create Early Stopping\nearly_stop = EarlyStopping(patience=3)","7ded16ba":"model = Sequential([\n    layers.Dense(128, activation='relu', input_shape=(n_features,)),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.3),\n    layers.Dense(n_classes,activation = 'softmax')\n ])\nmodel.summary()","46b3d22d":"from keras.utils.vis_utils import plot_model\nplot_model(model, show_shapes = True, show_layer_names = True)","035b3161":"model.compile(optimizer ='adam',\n             loss = 'categorical_crossentropy',\n             metrics = ['accuracy'])","8c203580":"model.fit(X_train,y_train,validation_split=0.2,epochs=10,callbacks=[early_stop])","dfbb2870":"df_test = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\nX_test = df_test.iloc[:,1:]\n\npredictions = model.predict(X_test)\nsub = pd.DataFrame(predictions, columns=['Class_1','Class_2','Class_3','Class_4','Class_5','Class_6','Class_7','Class_8','Class_9'])\nsub = pd.concat([df_test['id'], sub], axis=1)\nsub.head()\n\n# Creating submission\nsub.to_csv('submission.csv', index=False)","5d6bb4a9":"**LOADING THE DATA TO TRAIN THE MODEL**","bbe50010":"**SPLITTING THE DATA INTO TEST TRAIN**","1c4f9efc":"**LOADING THE DATASET**","8faf1edf":"**SAVING PREDICTIONS INTO THE SUBMISSIONS FILE**","2bb4e6f2":"**TRAINING THE MODEL**","e761d917":"**IMPORTING LIBRARIES**","bda6a68d":"**DEFINING THE MODEL**\n\nYou can replace this text with your personalised model","29031b41":"**SETTING UP KAGGLE ENVIRONMENT**","3aee62c1":"**PLOTTING THE MODEL**","da56840b":"If you find our notebook useful please give it a upvote"}}