{"cell_type":{"afe4ccb4":"code","88b5255b":"code","d0cccf23":"code","1d84be45":"code","25f78128":"code","e79a1117":"code","f1f3443a":"code","805abdec":"code","6bcb5d67":"code","b0d17bdd":"code","3cef9199":"code","fbf57bea":"code","52044068":"markdown","1cc1bd9b":"markdown","1f6c3003":"markdown","0e18a8a8":"markdown","9f4b07ab":"markdown","95de16f6":"markdown","e1da56ae":"markdown"},"source":{"afe4ccb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88b5255b":"import tensorflow as tf\nimport cv2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\n\ntrain_dir = os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\")\nvalidation_dir = os.path.join(\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\")\n\ntrain_NORMAL = os.path.join(train_dir, 'NORMAL')\ntrain_PNEUMONIA = os.path.join(train_dir, \"PNEUMONIA\")\n\nvalidation_NORMAL = os.path.join(validation_dir, \"NORMAL\")\nvalidation_PNEUMONIA = os.path.join(validation_dir, \"PNEUMONIA\")\n\nprint(\"Total training images (NORMAL)   : \", len(os.listdir(train_NORMAL)))\nprint(\"Total training images (PNEUMONIA): \", len(os.listdir(train_PNEUMONIA)))\nprint(\"Total validation images (NORMAL)   : \", len(os.listdir(validation_NORMAL)))\nprint(\"Total validation images (PNEUMONIA): \", len(os.listdir(validation_PNEUMONIA)))\nplt.bar(['NORMAL','PNEUMONIA'], [len(os.listdir(train_NORMAL)),len(os.listdir(train_PNEUMONIA))])\nplt.show()","d0cccf23":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nnrows = 4\nncols = 4\n\npic_index = 0\n\nfig = plt.gcf()\nfig.set_size_inches(ncols*4, nrows*4)\n\npic_index+=8\n\nnext_NORMAL_pix = [os.path.join(train_NORMAL, fname) \n                for fname in os.listdir(train_NORMAL)[ pic_index-8:pic_index] \n               ]\n\nnext_PNEUMONIA_pix = [os.path.join(train_PNEUMONIA, fname) \n                for fname in os.listdir(train_PNEUMONIA)[ pic_index-8:pic_index]\n               ]\n\nfor i, img_path in enumerate(next_NORMAL_pix+next_PNEUMONIA_pix):\n  # Set up subplot; subplot indices start at 1\n    sp = plt.subplot(nrows, ncols, i + 1)\n    sp.axis('Off') # Don't show axes (or gridlines)\n    title = \"NORMAL\" if i<8 else \"PNEUMONIA\"\n    img = mpimg.imread(img_path)\n    plt.imshow(img)\n    plt.title(title)\n\nplt.show()","1d84be45":"from tensorflow.keras.optimizers import RMSprop\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.summary()","25f78128":"model.compile(optimizer=RMSprop(lr=0.0001),\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","e79a1117":"labels = ['PNEUMONIA', 'NORMAL']\nimg_size = 150 \ndef get_img_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                resized_arr = cv2.resize(img_arr, (img_size, img_size)) # Reshaping images to preferred size\n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","f1f3443a":"train = get_img_data(train_dir)\nvalidation = get_img_data(validation_dir)\n\nx_train = []\ny_train = []\n\nx_val = []\ny_val = []\n\nfor feature, label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature, label in validation:\n    x_val.append(feature)\n    y_val.append(label)","805abdec":"x_train1 = np.expand_dims(x_train, axis=3)\nx_val1 = np.expand_dims(x_val, axis=3)\nprint(x_train1.shape)\nprint(x_val1.shape)","6bcb5d67":"datagen = ImageDataGenerator(rescale=1.\/255,\n                                   rotation_range=40,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   vertical_flip=True\n                                   )\n# validation_dategen = ImageDataGenerator(rescale=1.\/255)\n\n# train_data_generator = train_datagen.flow_from_directory(train_dir,\n#                                                          batch_size=32,\n#                                                          class_mode='binary',\n#                                                          target_size=(256,256))\n# validation_data_generator = train_datagen.flow_from_directory(validation_dir,\n#                                                          batch_size=32,\n#                                                          class_mode='binary',\n#                                                          target_size=(256,256))\ndatagen.fit(x_train1)","b0d17bdd":"\nhistory = model.fit(datagen.flow(x_train1,y_train,batch_size=32),\n                    validation_data=datagen.flow(x_val1,y_val,batch_size=32),\n                    epochs=20,\n                    validation_steps=3,\n                    verbose=2,\n                    )","3cef9199":"import matplotlib.pyplot as plt\nplt.style.use(\"seaborn\")\ntrain_acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(train_acc))\n\nplt.plot(epochs, train_acc, 'r-o', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b-o', label=\"Validation accuracy\")\nplt.title(\"Train - Validation Accuracy\")\nplt.legend()\n\nplt.figure()\nplt.plot(epochs, train_loss, 'r-o', label='Training loss')\nplt.plot(epochs, val_loss, 'b-o', label=\"Validation loss\")\nplt.title(\"Train - Validation Loss\")\nplt.legend()\nplt.show()\n# print(epochs, train_acc)","fbf57bea":"model.save(\"pneumonia_x-ray.h5\")","52044068":"## Access to the data","1cc1bd9b":"The CNN required the input have a target_size so that all that images should have size (150,150). So we need to resize the images..\n\nUsing data_generator make it read all the image again, resize, rescale again so that it take a lot of time on CPU. And the GPU not works hard.\n\nI've tried to read all the image to array first but it run out of memory. Gotta accept that most of the work is on CPU.","1f6c3003":"### Image Preprocessing","0e18a8a8":"### Build a 3Conv layers model","9f4b07ab":"## Model","95de16f6":"### Traning","e1da56ae":"The traing data is highly imbalance. Let's see some images in the dataset"}}