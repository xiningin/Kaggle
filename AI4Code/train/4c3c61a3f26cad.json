{"cell_type":{"466eb7cf":"code","03c5cbdd":"code","5bf861c0":"code","b23d17c9":"code","a521322f":"code","c2a3cd25":"code","d46cc00b":"code","0dcd901d":"code","728bdaf8":"code","13da8b69":"code","843495be":"code","a01f014f":"markdown","b195acdf":"markdown","a7ace0db":"markdown","7edfc848":"markdown","6cc7be0c":"markdown","b86d70f4":"markdown","cc394a96":"markdown","ef89fea0":"markdown","3223b89d":"markdown","cd0aa36d":"markdown","f3c0de3f":"markdown","3d2736c7":"markdown"},"source":{"466eb7cf":"!pip install -q efficientnet","03c5cbdd":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport math\n\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import Sequence\nimport tensorflow.keras.layers as L\nimport efficientnet.tfkeras as efn","5bf861c0":"# limit the GPU memory growth\ngpu = tf.config.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(gpu))\nif len(gpu) > 0:\n    tf.config.experimental.set_memory_growth(gpu[0], True)","b23d17c9":"data_dir = Path('..\/input\/seti-breakthrough-listen\/')\ntrain_data_dir = data_dir \/ 'train'\ntest_data_dir = data_dir \/ 'test'\n\ntrain_label_file = data_dir \/ 'train_labels.csv'\nsample_file = data_dir \/ 'sample_submission.csv'","a521322f":"id_col = 'id'\ntarget_col = 'target'\n\nlabel = pd.read_csv(train_label_file, index_col=id_col)\nsub = pd.read_csv(sample_file, index_col=id_col)","c2a3cd25":"def id_to_path(s, train=True):\n    data_dir = train_data_dir if train else test_data_dir\n    return data_dir \/ s[0] \/ f'{s}.npy'","d46cc00b":"input_size = (273, 256, 3)\nbatch_size = 32\nn_epoch = 3\nseed = 42\n\n","0dcd901d":"class SETISequence(Sequence):\n    def __init__(self, x_set, y_set=None, batch_size=32):\n        self.x, self.y = x_set, y_set\n        self.batch_size = batch_size\n        self.is_train = False if y_set is None else True\n    \n    def __len__(self):\n        return math.ceil(len(self.x) \/ self.batch_size)\n    \n    def __getitem__(self, idx):\n        batch_ids = self.x[idx * self.batch_size: (idx + 1) * self.batch_size]\n        if self.y is not None:\n            batch_y = self.y[idx * self.batch_size: (idx + 1) * self.batch_size]\n        \n        # taking channels \n        list_x = [np.load(id_to_path(x, self.is_train)) for x in batch_ids]\n        batch_x = np.moveaxis(list_x,1,-1)\n        #batch_x = batch_x.astype(\"float\") \/ 255\n        \n        if self.is_train:\n            return batch_x, batch_y\n        else:\n            return batch_x\n        ","728bdaf8":"def create_model():\n    \n    model = tf.keras.Sequential([\n            L.Conv2D(3,(3,3), strides=(1,1), padding=\"same\", activation='relu', input_shape=(273,256,6)),\n            efn.EfficientNetB1(input_shape=(273, 256, 3),weights='imagenet',include_top=False),\n            L.GlobalAveragePooling2D(),\n            L.Dense(1, activation='sigmoid')\n            ])\n\n    #model.summary\n    model.compile(optimizer=keras.optimizers.Adam(learning_rate=5e-4),\n                  loss='binary_crossentropy', metrics=[keras.metrics.AUC()])\n    \n    return model","13da8b69":"sub[target_col] = 0\n\nn_splits = 5\nskf = StratifiedKFold(n_splits = n_splits)\n\nx0 = label.index.values\ny0 = label[target_col].values\n\nx1 = sub.index.values\ntest = SETISequence(x1, batch_size=batch_size)\n\n\nfor train_index,val_index in skf.split(x0,y0):\n    x_train, x_val = x0[train_index], x0[val_index]\n    y_train, y_val = y0[train_index], y0[val_index]\n\n    train = SETISequence(x_train, y_train, batch_size=batch_size)\n    val = SETISequence(x_val, y_val, batch_size=batch_size)\n    \n    model = create_model()\n\n    model.fit(train, validation_data=val, epochs=n_epoch)\n    \n    prediction = model.predict(test).flatten()\n    sub[target_col] += prediction \/ n_splits","843495be":"#prediction = model.predict(test).flatten()\n#sub[target_col] = prediction\n\nsub.to_csv('submission.csv')\nsub.head()","a01f014f":" ## Output Submission File","b195acdf":"## Model\n\n[arXiv : Efficientnet](https:\/\/arxiv.org\/abs\/1905.11946)","a7ace0db":"## Train & Inferece with StratifiedKFold","7edfc848":"## Data File Path","6cc7be0c":"## Intro\nThis is a simple baseline using Efficientnet.\n\nSee Version 1 or 2.\n","b86d70f4":"## Data File Path","cc394a96":"## Parameters","ef89fea0":"## Install Efficientnet","3223b89d":"## Import Library","cd0aa36d":"## Convert Data ID to File Path","f3c0de3f":"## Use GPU","3d2736c7":"## Sequence of Data\n\n[tf.keras.utlis.Sequnece](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/utils\/Sequence)"}}