{"cell_type":{"940a7b06":"code","092ddeac":"code","f43dff15":"code","dd543ff2":"code","8a10b30a":"code","46d5540a":"code","4f8be1b0":"code","12f5426c":"code","da5e107c":"code","ab09003a":"code","ba49f5f0":"code","2c6084cf":"code","46a8e19d":"code","cc431bde":"code","b6cca90d":"code","02d55aec":"code","361683a9":"code","446893a2":"code","c876dca3":"code","8ece0a3f":"code","cbaf3b24":"code","85c9f63c":"code","7c9804ed":"code","46b345de":"code","b6d05bba":"code","4fbbbdca":"markdown","ef717c12":"markdown","2a09cf19":"markdown","eaae266a":"markdown","7a3b71a9":"markdown","ad970f18":"markdown","3141c041":"markdown","79f1de6f":"markdown","7f8af6ca":"markdown","05356df9":"markdown","533d02fc":"markdown","d0ec23d3":"markdown","e8f1e749":"markdown","951d3b70":"markdown","8e4ee930":"markdown","36ea46de":"markdown","b86daef3":"markdown","03238e26":"markdown","8de8d944":"markdown"},"source":{"940a7b06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","092ddeac":"import matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly.express as px \nimport plotly.graph_objects as go\nimport gc \nimport math \nfrom tqdm import tqdm \nfrom wordcloud import WordCloud \nimport scipy as sp\nimport nltk \nfrom nltk.corpus import stopwords\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.manifold import TSNE \nfrom sklearn.cluster import KMeans \n\npd.set_option(\"display.max_columns\", None)","f43dff15":"%%time \n\ndf = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", header=1)\ndf.head()","dd543ff2":"language = []\nfor col in df.columns.to_list():\n    if col.find(\"What programming languages do you use on a regular basis?\") == 0:\n        language.append(col.split(\"-\")[-1].strip())\n        \nfor i, lang in tqdm(enumerate(language)):\n    col_name = f\"What programming languages do you use on a regular basis? (Select all that apply) - Selected Choice - {lang}\"\n    x = df[df[col_name].notna()]\n    x = x.rename(columns={col_name: \"language\"})\n    if i == 0:\n        df_program = x \n    else:\n        df_program = pd.concat([df_program, x])\n        \ndf_program.reset_index(drop=True, inplace=True)\n\nprint(f\"before: {df.shape[0]} | after: {df_program.shape[0]}\")\n\ndel x \ngc.collect()","8a10b30a":"fig = px.pie(df_program, df_program[\"language\"], title=\"Programming value counts by All.\")\n\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","46d5540a":"def calc_population_mean(df):\n    lang, r_list = [], []\n    for p, n, l in zip(df[\"language\"].value_counts(normalize=True).values, df[\"language\"].value_counts().values, df[\"language\"].value_counts().index):\n        r_min = round(p - 1.96 * (math.sqrt( (p*(1-p)) \/ n )), 4)\n        r_max = round(p + 1.96 * (math.sqrt( (p*(1-p)) \/ n )), 4)\n        r = f\"{str(r_min*100.0)}%~{str(r_max*100.0)}%\"\n        lang.append(l)\n        r_list.append(r)\n    return pd.DataFrame({\"population_mean\": r_list}, index=lang)\n\n\nsample_mean = df_program[\"language\"].value_counts(normalize=True).to_frame().sort_values(\"language\", ascending=False)\nsample_mean[\"language\"] = sample_mean[\"language\"] * 100.0 \nsample_mean[\"language\"] = sample_mean[\"language\"].apply(lambda x: str(round(x, 2))+\"%\")\nsample_mean = sample_mean.rename(columns={\"language\": \"sample_mean\"})\n\npopulatin_mean = calc_population_mean(df_program)\n\ndisplay(sample_mean)\ndisplay(populatin_mean)","4f8be1b0":"df_program[\"age\"] = df_program[\"What is your age (# years)?\"].apply(lambda x: int(70) if x == \"70+\" else int(x.split(\"-\")[0]) + int(x.split(\"-\")[1]) \/ 2)\n\nims = []\nfor sex in [\"Man\", \"Woman\"]:\n    age = df_program[df_program[\"What is your gender? - Selected Choice\"] == sex].groupby(\"language\").mean().loc[:, [\"age\"]]\n    ims.append(age)\n    \nfig = go.Figure(data=[\n    go.Bar(name=\"Man\", y=ims[0].values.ravel()),\n    go.Bar(name='Woman', y=ims[1].values.ravel())\n])\n\n# Change the bar mode\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= df_program[\"age\"].mean(), y1=df_program[\"age\"].mean(),\n      xref= 'x', x0= -0.5, x1= age.shape[0]-0.5\n    )],\n    barmode='group',\n    title=f'Language x Sex x Age',\n    xaxis_title='Language',\n    yaxis_title='Age',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(ims[0].shape[0])],\n        ticktext = ims[0].index\n    )\n)\n\nfig.add_annotation(x=age.shape[0]*0.95, y=df_program[\"age\"].mean(), xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\n\nfig.show()\n\ndf_program[\"is_python\"] = df_program.language.apply(lambda x: \"Python\" if x == \"Python\" else \"other\")\n\nims = []\nfor sex in [\"Man\", \"Woman\"]:\n    age = df_program[df_program[\"What is your gender? - Selected Choice\"] == sex].groupby(\"is_python\").mean().loc[:, [\"age\"]]\n    ims.append(age)\n    \nfig = go.Figure(data=[\n    go.Bar(name=\"Man\", y=ims[0].values.ravel()),\n    go.Bar(name='Woman', y=ims[1].values.ravel())\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Is Python x Sex x Age',\n    xaxis_title='Language',\n    yaxis_title='Age',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(ims[0].shape[0])],\n        ticktext = ims[0].index\n    )\n)\n\n\nfig.show()\n","12f5426c":"def show_location_use_language(df: pd.DataFrame, language: str, title: str):\n    x = country.T \n    x = x[[language]]\n    x[\"country\"] = x.index\n    x.reset_index(drop=True, inplace=True)\n    \n    fig = px.choropleth(x, \n                    locations = 'country',  \n                    color = language,\n                    locationmode = 'country names', \n                    color_continuous_scale = 'viridis',\n                    title =  language,\n                    range_color = [0, x[language].max()])\n    fig.update(layout=dict(title=dict(x=0.5)))\n    fig.show()\n\ncountry = pd.crosstab(df_program[\"language\"], df_program[\"In which country do you currently reside?\"])\ncountry = country \/ country.sum(axis=0)\n\nfor lang in language:\n    show_location_use_language(country, lang, lang)","da5e107c":"decompose = TSNE(n_components=3, random_state=42)\ntsne = decompose.fit_transform(country)\n\nkm = KMeans(n_clusters=3, random_state=42)\ny_km = km.fit_predict(tsne)\n\nfig = px.scatter(x=tsne[:, 0],\n                 y=tsne[:, 1],\n                 color=y_km, \n                title=\"decompose Language by TSNE\")\nfig.show()","ab09003a":"def show_cluster(country: pd.DataFrame, cluster=0):\n    lang = country[country[\"cluster\"] == cluster].index.to_list()\n    \n    x = df_program[df_program[\"language\"].isin(lang)]\n    \n    fig = px.pie(x, x[\"What is your age (# years)?\"], title=f'Age value counts by cluster {cluster}', hole=0.6)\n    fig.update_traces(textinfo='percent+label')\n    fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\n    fig.show()\n    \n    fig = px.pie(x, x[\"What is your gender? - Selected Choice\"], title=f\"Sex value counts by cluster {cluster}\", hole=0.6)\n    fig.update_traces(textinfo='percent+label')\n    fig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\n    fig.show()\n    \n    role = x[\"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts()\n    fig = go.Figure(data=[\n        go.Bar(name=\"Role\", y=role.ravel()),\n    ])\n\n    # Change the bar mode\n    fig.update_layout(\n        barmode='group',\n        title=f'Role value count by cluster {cluster}',\n        xaxis_title='Role',\n        yaxis_title='Count',\n        xaxis = dict(\n            tickmode = 'array',\n            tickvals = [x for x in range(len(role.index))],\n            ticktext = role.index\n        )\n    )\n\n    fig.show()\n    \n    word = WordCloud(background_color=\"white\").generate(\" \".join(x[\"language\"]))\n    plt.figure(figsize=(22, 12))\n    plt.imshow(word)\n    plt.axis(\"off\")\n    ","ba49f5f0":"country[\"cluster\"] = y_km \nshow_cluster(country)","2c6084cf":"show_cluster(country, 1)","46a8e19d":"show_cluster(country, 2)","cc431bde":"date_science = country[country[\"cluster\"] == 0].index.unique().to_list()\nweb_application = country[country[\"cluster\"] == 1].index.unique().to_list()\njava = country[country[\"cluster\"] == 2].index.unique().to_list()","b6cca90d":"'''\n\u3053\u3053\u304b\u3089\u5148\u3092python\u304b\u3069\u3046\u304b\u3067\u3076\u3093\u304b\u3064\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u4e0a\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790\u3067\u5f97\u305f\u8a00\u8a9e\u3092\u6bd4\u8f03\u3057\u3066\u3044\u304f\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3002\n\n'''","02d55aec":"role = df_program[\"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\nfig = go.Figure(data=[go.Bar(x=role.index, y=role.values)])\n\nfig.update_layout(\n    title=\"role x Language by All\",\n    xaxis_title=None,\n    yaxis_title='Age')\nfig.show()\n\n\nrole_data = df_program.loc[df_program[\"language\"].isin(date_science), \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\nrole_web = df_program.loc[df_program[\"language\"].isin(web_application), \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\nrole_java = df_program.loc[df_program[\"language\"].isin(java), \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=\"date_science_language\", y=role_data.values),\n    go.Bar(name='web_application_language', y=role_web.values),\n    go.Bar(name='java_language', y=role_java.values),\n\n])\n\nfig.update_layout(\n    barmode='group',\n    title=f\"Role by language used\", \n    xaxis_title='role',\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(role_data.shape[0])],\n        ticktext = role_data.index\n    )\n)\n\nfig.show()","361683a9":"role = pd.crosstab(df_program[\"language\"], df_program[\"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"])\nrole = role \/ role.sum(axis=0)\n\ndf_sparse = sp.sparse.csr_matrix(role.values)\ndf_sparse = cosine_similarity(df_sparse)\nrole = pd.DataFrame(df_sparse, columns=role.index, index=role.index)\nrole.head()","446893a2":"def search_for_similar_lang(lang):\n    x = role[[lang]].sort_values(lang, ascending=False)[1:5+1]\n    x.columns = [\"similar\"]\n    return x \n\nnltk.download('stopwords')\nstop_words = stopwords.words('english')\n\ndef create_word_count(doc_list):\n    word2count = {}\n    for doc in doc_list:\n        for word in doc.split():\n            if word in stop_words:\n                continue \n            if word not in word2count:\n                word2count[word] = 1 \n            else:\n                word2count[word] += 1 \n    return word2count \n\ndef show_search_for_similar_lang(lang: str):\n    print(\"=\"*100, lang, \"=\"*100)\n    similar = search_for_similar_lang(lang)\n    display(similar)\n    \n    x = df_program[df_program[\"language\"].isin(similar.index.to_list())]\n    word = WordCloud(background_color=\"white\", width=2000, height=1450, max_words=15).generate_from_frequencies(\n        create_word_count(x.loc[x[\"Select any activities that make up an important part of your role at work: (Select all that apply) - Selected Choice - Analyze and understand data to influence product or business decisions\"].notna(), \n                                \"Select any activities that make up an important part of your role at work: (Select all that apply) - Selected Choice - Analyze and understand data to influence product or business decisions\"])\n    )\n    plt.figure(figsize=(22, 12))\n    plt.imshow(word)\n    plt.title(\"Words that frequently appear from roles\")\n    plt.axis(\"off\")\n    plt.show()\n    \n    role_current = df_program.loc[df_program[\"language\"] == lang, \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\n    role_similar = x[\"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"].value_counts(normalize=True)\n    \n    fig = go.Figure(data=[\n        go.Bar(name=lang, y=role_current.values),\n        go.Bar(name='Others Similar', y=role_similar.values) \n    ])\n\n    fig.update_layout(\n        barmode='group',\n        title=f\"{lang} x similar language in role\", \n        xaxis_title='role',\n        yaxis_title='Percentage of respondents',\n        xaxis = dict(\n            tickmode = 'array',\n            tickvals = [x for x in range(role_current.shape[0])],\n            ticktext = role_current.index\n        )\n    )\n\n    fig.show()","c876dca3":"for lang in language:\n    show_search_for_similar_lang(lang)","8ece0a3f":"def calc_many_code(x):\n    if x == \"< 1 years\":\n        return 1 \n    elif x == \"20+ years\":\n        return 20 \n    elif x.find(\"years\") >= 0:\n        return ( int(x.split(\"-\")[0]) + int(x.split(\"-\")[1].split()[0]) ) \/ 2\n    else:\n        return x \n\ndf_program[\"write_code\"] = df_program[\"For how many years have you been writing code and\/or programming?\"].apply(calc_many_code)\n\n\nfig = px.pie(df, df[\"For how many years have you been writing code and\/or programming?\"], title='how many years writing code?', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nwrite_code_lang = df_program.groupby(\"language\").mean().loc[:, [\"write_code\"]]\nwrite_code_age = df_program.groupby(\"What is your age (# years)?\").mean().loc[:, [\"write_code\"]]\n\nfig = go.Figure(data=[go.Bar(x=write_code_lang.index, y=write_code_lang.write_code)])\nfig.update_layout(\n    title=\"Years of experience for each language\",\n    xaxis_title=None,\n    yaxis_title='how many year write code')\nfig.show()\n\nfig = go.Figure(data=[go.Bar(x=write_code_age.index, y=write_code_age.write_code)])\nfig.update_layout(\n    title=\"Years of experience for each age\",\n    xaxis_title=None,\n    yaxis_title='how many year write code')\nfig.show()\n\ndata_ = df_program.loc[df_program[\"language\"].isin(date_science), \"For how many years have you been writing code and\/or programming?\"].value_counts(normalize=True)\nweb_ = df_program.loc[df_program[\"language\"].isin(web_application), \"For how many years have you been writing code and\/or programming?\"].value_counts(normalize=True)\njava_ = df_program.loc[df_program[\"language\"].isin(java), \"For how many years have you been writing code and\/or programming?\"].value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=\"data_science_language\", y=data_.values),\n    go.Bar(name='web_application_language', y=web_.values) ,\n    go.Bar(name='java', y=java_.values) ,\n\n])\n\nfig.update_layout(\n    barmode='group',\n    title=f\"Experience by language used\", \n    xaxis_title='experience',\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(data_.shape[0])],\n        ticktext = data_.index\n    )\n)\n\nfig.show()","cbaf3b24":"def calc_class_categorical(col_name: str) -> pd.DataFrame:\n    ide_cols = [col for col in df.columns if col_name in col]\n    mapper = [col.split('-')[-1].lstrip() for col in ide_cols]\n    mapping_dict = dict(zip(ide_cols,mapper))\n    df_ids = df_program[ide_cols  + ['language']].rename(columns=mapping_dict)\n    df_ids.dropna(how='all', subset=mapper, inplace=True)\n    \n    return df_ids  \n\ndef show_bar(df, title, yaxis_title):\n    data_ = df[df[\"language\"].isin(date_science)].count() \/ df[df[\"language\"].isin(date_science)].count().sum()\n    web_ = df[df[\"language\"].isin(web_application)].count() \/ df[df[\"language\"].isin(web_application)].count().sum()\n    java_ = df[df[\"language\"].isin(java)].count() \/ df[df[\"language\"].isin(java)].count().sum()\n\n    \n    fig = go.Figure(data=[\n        go.Bar(name=\"data_science_language\", y=data_.values),\n        go.Bar(name='web_application_language', y=web_.values),\n        go.Bar(name='java', y=java_.values) \n\n    ])\n\n    fig.update_layout(\n        barmode='group',\n        title=f\"{title} by language used\", \n        xaxis_title='percentage',\n        yaxis_title=yaxis_title,\n        xaxis = dict(\n            tickmode = 'array',\n            tickvals = [x for x in range(data_.shape[0])],\n            ticktext = data_.index\n        )\n    )\n    fig.show()","85c9f63c":"dfs = calc_class_categorical(\"Which of the following integrated development environments (IDE's) do you use on a regular basis?\")\nshow_bar(dfs, \"IDE\", \"IDE\")","7c9804ed":"dfs = calc_class_categorical(\"What data visualization libraries or tools do you use on a regular basis?\")\nshow_bar(dfs, \"visualization libraries\", \"library\")","46b345de":"dfs = calc_class_categorical(\"Which of the following machine learning frameworks do you use on a regular basis?\")\nshow_bar(dfs, \"framework\", \"framework\")","b6d05bba":"dfs = calc_class_categorical(\"Which of the following cloud computing platforms do you use on a regular basis?\")\nshow_bar(dfs, \"platform\", \"platform\")","4fbbbdca":"## x visualization libraries ","ef717c12":"### java \njava exists as the only outlier and is lonely in the cluster.","2a09cf19":"Estimate the percentage of the population mean using a statistical test from the usage of each language.  \nThe significance level was used at 95%.","eaae266a":"## x cloud computing platforms","7a3b71a9":"### data science language ","ad970f18":"### x Country\n\nVisualize the usage rate in each country. However, please note that this is just a sample mean and does not reflect the entire population.","3141c041":"## x how many years write code. ","79f1de6f":"### x Role","7f8af6ca":"### Clustering \nClustering is performed from the language usage table between countries.  \nThis divides the use of programming languages between countries more significantly.","05356df9":"## x framework","533d02fc":"Since we want to aggregate according to each language, we will format the data frame as language-centric.  \nSpecifically, the language column removes missing values, allowing duplicates of people.","d0ec23d3":"It can be said that it is difficult to separate each language neatly due to the fact that the survey subjects are kaggle. To be clearer, we'll add app developers to the survey audience.  \nHowever, it is surprising that there are users other than python, r, and sql, which are relatively royal roads in analysis.","e8f1e749":"### Search for similar languages from users","951d3b70":"## Laguage x Age x Sex ","8e4ee930":"In Africa, the population parameter itself is small, but it shows a high proportion by specializing in one language.  \nIt seems that a small number of programmers strongly reflect it because the infrastructure is not well developed.","36ea46de":"## x development enviroments (IDE)","b86daef3":"From the history of AI's recent attention, the users of data analysis languages are concentrated in the younger generation.","03238e26":"### web application language \n","8de8d944":"I was able to successfully separate the purpose of the programming language from the separation information between countries. Perhaps the use of languages is separate by country."}}