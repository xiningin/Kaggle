{"cell_type":{"79f71292":"code","06fd1f5c":"code","34408134":"code","0274852b":"code","c7fbddc3":"code","c316df42":"code","a2b7d0cb":"code","9067f491":"code","260335da":"code","3cd21d48":"code","d2fa4b1a":"code","60491555":"markdown","b027f83e":"markdown","4de514f8":"markdown"},"source":{"79f71292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06fd1f5c":"df_bankacct=pd.read_csv(\"\/kaggle\/input\/ungrd-rd2-auo\/bank_accounts.csv\", dtype={'userid':str, 'bank_account':str})\ndf_creditcards=pd.read_csv(\"\/kaggle\/input\/ungrd-rd2-auo\/credit_cards.csv\", dtype={'userid':str, 'credit_card':str})\ndf_devices=pd.read_csv(\"\/kaggle\/input\/ungrd-rd2-auo\/devices.csv\", dtype={'userid':str, 'device':str})\ndf_orders=pd.read_csv(\"\/kaggle\/input\/ungrd-rd2-auo\/orders.csv\", dtype={'orderid':str, 'buyer_userid':str, 'seller_userid':str})\nprint(df_bankacct.head())\nprint(df_creditcards.head())\nprint(df_devices.head())\nprint(df_orders.head())","34408134":"df_bankacct2=df_bankacct\ndf_creditcards2=df_creditcards\ndf_devices2=df_devices\ndf_orders2=df_orders\n\n","0274852b":"df_linked_user_bank_acct=pd.merge(df_bankacct, df_bankacct2, on='bank_account')\nfilt=df_linked_user_bank_acct.userid_x==df_linked_user_bank_acct.userid_y\ndf_linked_user_bank_acct=df_linked_user_bank_acct[~filt].drop(columns={'bank_account'})\n\n\ndf_linked_user_creditcards=pd.merge(df_creditcards, df_creditcards2, on='credit_card')\nfilt=df_linked_user_creditcards.userid_x==df_linked_user_creditcards.userid_y\ndf_linked_user_creditcards=df_linked_user_creditcards[~filt].drop(columns={'credit_card'})\n\ndf_linked_user_devices=pd.merge(df_devices, df_devices, on='device')\nfilt=df_linked_user_devices.userid_x==df_linked_user_devices.userid_y\ndf_linked_user_devices=df_linked_user_devices[~filt].drop(columns={'device'})\n\ndf_direct=pd.concat([df_linked_user_bank_acct,df_linked_user_creditcards, df_linked_user_devices]).drop_duplicates().dropna()\n\n","c7fbddc3":"df_1=df_direct\n#df_1['Not Done']=True\ndf_2=df_direct\nlen1=0\nlen2=1\nwhile len1!=len2:\n    len1=len(df_1)\n    df_linked_user=pd.merge(df_1,df_2, how='left', left_on='userid_y', right_on='userid_y').drop_duplicates()\n    df_linked_user.columns=['userid_x','userid_y','userid_z']\n    df_linked_user=pd.melt(df_linked_user, id_vars='userid_x', value_name='userid_y').drop_duplicates()\n    print(df_linked_user.tail())\n\n    df_linked_user=df_linked_user[['userid_x','userid_y']]\n    df_linked_user=df_linked_user[df_linked_user.userid_x!=df_linked_user.userid_y]\n    df_linked_user=df_linked_user.drop_duplicates().dropna()\n    print(df_linked_user.tail())\n\n    df_1=df_linked_user\n    len2=len(df_linked_user)","c316df42":"\n# df_1=df_direct.copy()\n# df_1['Not_Done']=True\n# df_2=df_direct.copy()\n# df_linked_user= pd.DataFrame(columns=['userid_x','userid_y','Not_Done'])\n\n# while not(df_1.empty):\n#     len1=len(df_1)\n#     print(len(df_1))\n#     df_combined=pd.merge(df_1,df_2, how='left', left_on='userid_y', right_on='userid_y').drop_duplicates()\n#     df_combined.columns=['userid_x','userid_y','Not_Done','userid_z']\n#     df_combined=pd.melt(df_combined, id_vars=['userid_x','Not_Done'], value_name='userid_y').drop_duplicates()\n#     df_combined['Not_Done']=(df_combined['variable']=='userid_z')\n#     df_combined=df_combined[['userid_x','userid_y','Not_Done']]\n#     df_combined=df_combined[df_combined.userid_x!=df_combined.userid_y]\n#     df_linked_user= pd.concat([df_linked_user, df_combined])\n#     prioritize_not_done_false= df_linked_user.groupby(['userid_x','userid_y']).Not_Done.transform(min)\n#     df_linked_user = df_linked_user.loc[df_linked_user.Not_Done == prioritize_not_done_false]\n#     df_linked_user=df_linked_user.drop_duplicates().dropna()\n#     print(df_linked_user)\n#     df_1=df_linked_user[df_linked_user.Not_Done==True]\n    \n\n","a2b7d0cb":"# df_link_index= dict(list(df_direct.groupby('userid_x')))\n\n# for x in df_link_index:\n#     df_link_index[x]=list(df_link_index[x].userid_y)\n\n    \n# counter=0\n\n# for x in df_link_index:\n#     y_list=df_link_index[x].copy()\n\n#     while len(y_list)!=0:\n#         y=y_list.pop()\n#         if y in df_link_index:\n#             for z in df_link_index[y]:\n#                 if ((z not in df_link_index[x]) & (z!=x)):\n#                     df_link_index[x].append(z)\n#                     y_list.append(z)\n#     counter=counter+1\n#     if counter in [10000,20000,30000,40000, 50000]:\n#         print (counter)\n        \n        \n#     while len(id_y_list)!=0:\n#         id_y=id_y_list.pop()\n#         filt1=df_linked_user.get_group(id_y).userid_y.isin(df['userid_y'])\n#         filt2=df_linked_user.get_group(id_y).userid_y==id_x\n#         filt=filt1|filt2\n#         new_df=df_linked_user.get_group(id_y)[~filt]\n#         if len(new_df)!=0:\n#             new_df['userid_x']=id_x\n#             df=pd.concat([df, new_df])\n#             id_y_list=id_y_list+list(new_df['userid_y'])     \n#     return df\n    \n","9067f491":"df_result = pd.merge(df_orders, df_linked_user,  how='left', left_on=['buyer_userid','seller_userid'], right_on = ['userid_x','userid_y'])\n\n\n","260335da":"df_result['is_fraud']=(~df_result.userid_x.isna())\nprint(df_result.tail(10))","3cd21d48":"df_result=df_result[['orderid','is_fraud']]\ndf_result['is_fraud']=df_result['is_fraud'].astype(int)\ndf_result.to_csv('ungrad_r2.csv',index=False)","d2fa4b1a":"df_linked_user.to_csv('linked_user.csv',index=False)","60491555":"# **Method 2**","b027f83e":"# **Method 3**","4de514f8":"# **Method 1**"}}