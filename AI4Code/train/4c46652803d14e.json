{"cell_type":{"6229992c":"code","a639bb94":"code","50d5bdd9":"code","11397708":"code","414028d6":"code","b6d15166":"code","78a3f14f":"code","941c5570":"code","74c56f74":"code","1ed50199":"code","f8992321":"code","1d39a2f7":"code","34e113ea":"code","c9c503b3":"code","0edd9adb":"code","b2b5e499":"code","5b21fe6c":"code","9f74a427":"code","4fb2e68d":"code","6b635a9d":"code","c69ede1f":"code","0ce3a92c":"code","40ac5cec":"code","39eeb1c9":"code","12585c26":"code","7dc00c4b":"code","8538e89c":"code","0ff36370":"code","7e85d997":"code","46d61897":"code","2ca1df3b":"code","d73e2271":"code","aeebf517":"code","09dfef56":"code","5f444867":"code","39a57eb6":"code","91abbadc":"code","d45764a2":"code","7891c337":"code","a7f8b6e7":"code","476fa013":"code","7e3bef5a":"markdown","ddf797cb":"markdown"},"source":{"6229992c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a639bb94":"ratings = pd.read_table('\/kaggle\/input\/movielens-case-study\/ratings.dat', header = None, sep = '::', \n                        names=['UserId', 'MovieID', 'Rating', 'Timestamp'])\n\nmovies = pd.read_table('\/kaggle\/input\/movielens-case-study\/movies.dat', header = None, sep = '::', names=['MovieID', 'Title', 'Genres'])\n\nusers = pd.read_table('\/kaggle\/input\/movielens-case-study\/users.dat', header = None, sep = '::', \n                      names=['UserId', 'Gender', 'Age', 'Occupation', 'Zipcode'])","50d5bdd9":"print(ratings.shape)\nprint(movies.shape)\nprint(users.shape)","11397708":"merge_ratings_movies = pd.merge(ratings, movies, on='MovieID', how='left')\nmerge_three = pd.merge(merge_ratings_movies, users, on='UserId', how='left')","414028d6":"merge_three.shape","b6d15166":"master_data = merge_three.drop(['Timestamp', 'Zipcode'], axis = 1)","78a3f14f":"master_data.head(6)","941c5570":"master_data.describe()","74c56f74":"age_group = master_data.groupby('Age').size()\nage_group","1ed50199":"plt.figure(figsize=(8,6))\nplt.hist(bins = 50, x = master_data.Age, data = age_group, color='orange')\nplt.title('Distribution of users age')\nplt.ylabel('count of users')\nplt.xlabel('Age');","f8992321":"gender_group = master_data.groupby('Gender').size()\ngender_group","1d39a2f7":"plt.figure(figsize=(8,8))\ngender_group.plot(kind='bar')","34e113ea":"master_data.pivot_table('Rating', index = 'Genres', columns = 'Gender')","c9c503b3":"user_group = master_data.groupby(['UserId']).size()\nuser_group.head(10)","0edd9adb":"plt.figure(figsize=(25,10))\nplt.hist(x=[master_data\t.UserId], bins=1000, color='#F1948A')\nplt.show()","b2b5e499":"### User rating of the movie \u201cToy Story\u201d\n\ntoy_story_data = master_data.loc[master_data['Title'] == 'Toy Story (1995)']\ntoy_story_data.head(10)","5b21fe6c":"toy_story_data.groupby('Rating').size()","9f74a427":"plt.figure(figsize=(8,8))\nplt.hist(x=toy_story_data['Rating'], color='#2FA39C')\nplt.title('Ratings of Toy Story movie')\nplt.ylabel('count of users')\nplt.xlabel('Ratings');","4fb2e68d":"print(toy_story_data.groupby('Age').size())\n\nplt.figure(figsize=(12,8))\nplt.hist(x = master_data['Age'], data=toy_story_data, bins=15, color = '#2FA353')\nplt.xlabel(\"Age of viewers\")\nplt.ylabel(\"No of views\")\nplt.title(\"Viewership data of Toystory movie\")\nplt.show()\n","6b635a9d":"movie_rating = master_data.groupby(['MovieID'], as_index=False)\naverage_movie_ratings = movie_rating.agg({'Rating':'mean'})\ntop_25_movies = average_movie_ratings.sort_values('Rating', ascending=False).head(25)\ntop_25_movies","c69ede1f":"top_25_plot = pd.merge(top_25_movies, master_data, how='left', left_on=['MovieID'], right_on=['MovieID'])\ntop_25_plot.head(25)","0ce3a92c":"### Ratings for all the movies reviewed by for a particular user of user id = 2696\n\nuser_id_data = master_data.loc[master_data['UserId'] == 2696]\nuser_id_data.head(20)","40ac5cec":"# plotting the above data\nplt.figure(figsize=(12,7))\nplt.scatter(x=user_id_data['MovieID'], y=user_id_data['Rating'])\nplt.show()","39eeb1c9":"master_data['Genres'].unique()","12585c26":"# Here I have made a change\nmaster_data['Genres'] = master_data['Genres'].apply(lambda x : x.split('|')[0])","7dc00c4b":"master_data.head()","8538e89c":"master_data.isnull().sum()","0ff36370":"# As we have the col MovieId which represents unique movies, we can remove ``Title`` col\nmaster_data = merge_three.drop(['Title', 'Timestamp'], axis = 1)","7e85d997":"master_data.head(4)","46d61897":"# Print the unique values of the categorical columns\nprint(master_data['Genres'].unique())\n\nprint()\n\nprint(master_data['Gender'].unique())","2ca1df3b":"# From Sklearn library we will ues Label Encoder to encode cat features to numeric\nlabel_encode = LabelEncoder()\n\nmaster_data.iloc[:,3] = label_encode.fit_transform(master_data.iloc[:,3].values)\nmaster_data.iloc[:,4] = label_encode.fit_transform(master_data.iloc[:,4].values)","d73e2271":"# Print values of cat feature after conversion\n\nprint(master_data['Genres'].unique())\n\nprint()\n\nprint(master_data['Gender'].unique())","aeebf517":"x = master_data[['Genres', 'Gender', 'Age', 'Occupation']].values\ny = master_data.Rating.values","09dfef56":"x","5f444867":"ct = ColumnTransformer([('one_hot_encoder', OneHotEncoder(categories='auto'), [0])],\n                       remainder='passthrough')\nX = ct.fit_transform(x)\nX","39a57eb6":"print(X.shape)\nprint(y.shape)","91abbadc":"# Splitting the data set into 80% Training & 20% Testing\ntrain_X, test_X, train_y, test_y = train_test_split(X,y, test_size = 0.2, random_state = 42)\ntrain_X.shape, test_X.shape, train_y.shape, test_y.shape","d45764a2":"cardinality_cols = ['Gender', 'Genres']\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_X[cardinality_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(test_X[cardinality_cols]))","7891c337":"feature_scale = StandardScaler(with_mean=False)\ntrain_X = feature_scale.fit_transform(train_X)\ntest_X = feature_scale.transform(test_X)","a7f8b6e7":"rf = RandomForestClassifier(n_estimators=50, criterion=\"entropy\", max_depth=10, random_state=42)\n\nrf.fit(train_X, train_y)\n\npred_rand_for = rf.predict(test_x)\n\nrand_for_acc = accuracy_score(test_y, pred_rand_for)\nprint('Random Forest Accuracy:', rand_for_acc)","476fa013":"plt.figure(figsize=(8,5))\nsns.set(font_scale=1.3)\nsns.heatmap(confusion_matrix(pred_rand_for, test_y), annot = True, fmt = \".0f\", cmap = \"Accent\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Random Forest Confusion Matrix\\n\\n\")\nplt.show()","7e3bef5a":"### From the above plot we can see most the users are nearly 25 years old.","ddf797cb":"### The above graph shows ``Toy Story`` has the maximum rating of 4"}}