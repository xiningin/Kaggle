{"cell_type":{"9b79fcca":"code","8640a2d3":"code","0292b34b":"code","ad6b57a5":"code","d1a7b7a9":"code","ca7378c4":"code","1d8bda47":"code","e5986aa9":"code","3a0f9fc1":"code","84ae4893":"code","b5233767":"code","80aa052e":"code","3887d7a0":"code","4496cb55":"code","bc6622eb":"code","a5facc7c":"code","664efa1d":"code","166183dd":"code","45260068":"code","d0799ea7":"code","6e7adc13":"code","a7fe965b":"code","897d06c3":"code","cf9a20be":"code","8b128bc1":"code","ba692ca3":"code","39839f33":"code","203416cd":"code","7118703c":"code","d595772c":"code","a177d300":"code","c3dfe1bd":"code","d740620c":"code","f93c975a":"code","ef3ca1f1":"code","ee2c83a0":"code","f343b981":"code","7f0611b2":"code","03b10578":"code","3e5d069f":"code","6acbfd36":"code","f1626171":"code","ba906892":"code","0b2132f5":"code","070b4594":"code","a2133c5f":"code","e48a4728":"code","20f2b1fe":"code","69696358":"code","778ad928":"code","633cbc43":"code","a42c1a58":"code","b7610d7e":"code","c09190f5":"code","8fa6f723":"code","2aa88413":"code","b3e3c5f7":"code","ea9ddeba":"code","63e8c193":"code","4b1dbdc2":"code","28d5795e":"code","b10b0121":"code","9a3fd827":"code","6c225b31":"code","8aaf8bc3":"code","e55bc320":"code","c246d597":"code","c46d9e52":"code","5bab0aa0":"code","977c3c5e":"code","d55a8cbb":"code","ba13509e":"code","4b4280f2":"code","847508fd":"code","4d96f2f6":"code","bdebb7dd":"code","f39048ad":"code","1a154ca1":"code","80be56f9":"code","195d1bd0":"code","aeef26ee":"code","208644d9":"code","b242db0a":"code","7c1daa68":"code","4c6987c5":"code","e7feae4d":"code","193797d4":"code","27b6c636":"code","81c6663a":"code","d4f0e100":"code","5df88463":"code","c44ebdce":"code","a086ded0":"code","325e1430":"code","38c183db":"code","dfd16a93":"code","28da8797":"code","0952b540":"code","a10acff5":"code","b965163e":"code","7a746078":"code","ab385622":"code","fca34474":"code","793990a7":"code","fc150fa9":"code","bfef8717":"code","44939d45":"code","d2affbf9":"code","bbd31f4d":"code","3f0d73a6":"code","455ed44d":"code","3d21121c":"code","54587875":"code","f4961b37":"code","967e9d36":"code","86b4f683":"code","00a1d509":"code","34181fa0":"code","b144b459":"code","b2f09a49":"code","180de723":"code","6f01637e":"code","cdb4856c":"code","0b85a139":"code","9b7d21a0":"code","c5e64838":"code","bd5d9581":"code","0260a5bf":"code","b50b5ae6":"code","067bb4fb":"code","1d0d615d":"markdown","d669d996":"markdown","32eb9411":"markdown","76d1711e":"markdown","97f3314d":"markdown","cdf3f883":"markdown","d5d3b375":"markdown","ca9f6161":"markdown","96fc5d5a":"markdown","029e74e4":"markdown","64b7c072":"markdown","8369a80b":"markdown","5836c3d6":"markdown","f67ffe94":"markdown","34ba8adb":"markdown","eefc8bfa":"markdown","e09de546":"markdown","6e37e281":"markdown","8a636d23":"markdown","7cf9525c":"markdown","f61692e0":"markdown","ad50e939":"markdown","b9840dc6":"markdown","52bd5c33":"markdown","11006afa":"markdown","79e15a46":"markdown","6ea2aaf1":"markdown","4b024cb0":"markdown","bccece4e":"markdown","104a7c7f":"markdown","f02dcfc6":"markdown","0d133a96":"markdown","972b6a66":"markdown","c960f775":"markdown","6d95dc52":"markdown","b55d61ba":"markdown","f237771c":"markdown","787e9c50":"markdown","ab65099b":"markdown","19aba541":"markdown","27e05125":"markdown","7fc7080f":"markdown","e2d03cf0":"markdown","6cc547e7":"markdown","d1851369":"markdown","1184d09f":"markdown","33d827dd":"markdown","6daea152":"markdown","2d72d5bb":"markdown","761b7dc5":"markdown","4c91e478":"markdown","17589d34":"markdown","d02dda1e":"markdown","627eeb4a":"markdown","77599663":"markdown","383d1238":"markdown","eeebc596":"markdown","7e70e794":"markdown"},"source":{"9b79fcca":"!pip install pandas-profiling  hyperopt xgboost","8640a2d3":"# import common packages\nimport re\nimport sys\nimport itertools\nimport datetime\nfrom tqdm.notebook import tqdm\nimport pandas_profiling\n\nfrom datetime import datetime\n\n# import visualization packages\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# import packages to work with the numeric, tabular data\nimport numpy as np \nimport pandas as pd \n\n# import ML packages\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\nfrom sklearn.model_selection import train_test_split, KFold, RandomizedSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, ExtraTreesRegressor, AdaBoostRegressor, GradientBoostingRegressor, StackingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, make_scorer\n\nfrom catboost import CatBoostRegressor\nimport xgboost as xgb\n\nfrom hyperopt import tpe, hp, fmin, STATUS_OK,Trials\nfrom hyperopt.pyll.base import scope\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0292b34b":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","ad6b57a5":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\nRANDOM_SEED = 42","d1a7b7a9":"def mape(\n    y_true: np.ndarray, \n    y_pred: np.ndarray\n):\n    \n    return np.mean(np.abs((y_pred-y_true)\/y_true))\n\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 engineDisplacement \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndef transf_engineDisplacement_to_float(row: str):\n    \n    extracted_value = re.findall('\\d\\.\\d', str(row))\n    if extracted_value:\n        return float(extracted_value[0])\n    return None\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 owners \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndef transf_owners_to_float(\n    value: str\n):\n    \n    if isinstance(value, str):\n        return float(value.replace('\\xa0', ' ').split()[0])\n    return value\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 vehicleTransmission \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndef transf_vehicleTransmission_to_categ(\n    value: str\n):\n    \n    if isinstance(value, str):\n        if value in ['MECHANICAL', '\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f']:\n            return 'mechanical'\n        else:\n            return 'automatic'\n    return value\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 enginePower \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ndef transf_enginePower_to_float(\n    value: str\n):\n    \n    if isinstance(value, str):\n        if value == 'undefined N12':\n            return None\n        else:\n            return float(value.replace(' N12', ''))\n    return value\n\n\n\n\n     \n    \ndef vis_num_feature(\n    data: pd.DataFrame, \n    column: str,\n    target_column: str,\n    query_for_slicing: str\n):\n    \"\"\"\n    Show the EDA plots for numerical data.\n    \"\"\"\n    plt.style.use('seaborn-paper')\n    fig, ax = plt.subplots(2, 3, figsize=(15, 9))\n    data[column].plot.hist(ax=ax[0][0])\n    ax[0][0].set_title(column)\n    sns.boxplot(data=data, y=column, ax=ax[0][1], orient='v')\n    sns.scatterplot(data=data.query(query_for_slicing), x=column, y=target_column, ax=ax[0][2])\n    np.log2(data[column] + 1).plot.hist(ax=ax[1][0])\n    ax[1][0].set_title(f'log2 transformed {column}')\n    sns.boxplot(y=np.log2(data[column]), ax=ax[1][1], orient='v')\n    plt.show()\n    \ndef calculate_stat_outliers(\n    data_initial: pd.DataFrame,\n    column: str,\n    log: bool = False\n):\n    \n    data = data_initial.copy()\n    if log:\n        data[column] = np.log2(data[column] + 1)\n    q1 = data[column].quantile(0.25)\n    q3 = data[column].quantile(0.75)\n    IQR = q3 - q1\n    mask25 = q1 - IQR * 1.5                   \n    mask75 = q3 + IQR * 1.5\n\n    values = {}\n    values['borders'] = mask25, mask75\n    values['# outliers'] = data[(data[column] < mask25)].shape[0], data[data[column] > mask75].shape[0]\n\n    return pd.DataFrame.from_dict(data=values, orient='index', columns=['left', 'right'])\n\ndef show_boxplot(\n    data: pd.DataFrame, \n    column: str, \n    target_column: str\n):\n    \"\"\"\n    Show the boxplot for the numerical feature.\n    \"\"\"\n    fig, ax = plt.subplots(figsize = (14, 4))\n    sns.boxplot(x=column, y=target_column, \n                data=data.loc[data.loc[:, column].isin(data.loc[:, column].value_counts().index)],\n                ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","ca7378c4":"VERSION    = 4\nDIR_TRAIN  = '..\/input\/09-09-2020\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443\nDIR_TRAIN_2021  = '..\/input\/moscow-car-prices\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 auto.ru\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE= 0.20   # 20%\ncols_to_remove = []","1d8bda47":"!ls '..\/input'","e5986aa9":"train = pd.read_csv(DIR_TRAIN + '09_09_2020.csv') \ntest = pd.read_csv(DIR_TEST + 'test.csv')\nsample_submission = pd.read_csv(DIR_TEST + 'sample_submission.csv')","3a0f9fc1":"pd.options.display.max_columns = None","84ae4893":"train.sample(5)","b5233767":"test.sample(5)","80aa052e":"test['parsing_unixtime'].min()","3887d7a0":"test['super_gen'][1]","4496cb55":"train.info()","bc6622eb":"test.info()","a5facc7c":"set(test.columns).difference(train.columns)","664efa1d":"set(train.columns).difference(test.columns)","166183dd":"train.rename(columns={'model': 'model_name'}, inplace=True)","45260068":"test.drop('model_info', axis=1, inplace=True)","d0799ea7":"train.rename(columns={'\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f' : 'complectation_dict' }, inplace=True)","6e7adc13":"test.drop('priceCurrency', axis=1, inplace=True)","a7fe965b":"test.drop('parsing_unixtime', axis=1, inplace=True)","897d06c3":"test['price'] = 0\ntrain['sell_id'] = 0","cf9a20be":"test.drop(['car_url', 'equipment_dict', 'image', 'super_gen', 'vendor'], axis=1, inplace=True)\ntrain.drop(['hidden', 'start_date' ], axis=1, inplace=True)","8b128bc1":"test.info()","ba692ca3":"test.drop(['complectation_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'], axis=1, inplace=True)\ntrain.drop(['complectation_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'], axis=1, inplace=True)","39839f33":"train.brand.sort_values().unique(), test.brand.sort_values().unique()","203416cd":"train = train[train.brand.isin(test.brand.unique())]","7118703c":"test.info()","d595772c":"test.drop('\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', axis=1, inplace=True)\ntrain.drop('\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', axis=1, inplace=True)","a177d300":"train.info()","c3dfe1bd":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(2, inplace=True)","d740620c":"#description \u0443\u0434\u0430\u043b\u0438\u043c\ntest.drop('description', axis=1, inplace=True)     \ntrain.drop('description', axis=1, inplace=True)     ","f93c975a":"train.dropna(subset=['price'], inplace=True)","ef3ca1f1":"train['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)","ee2c83a0":"train.dropna(inplace=True)","f343b981":"train.info()","7f0611b2":"test.info()","03b10578":"train_2021 = pd.read_csv(DIR_TRAIN_2021 + 'train_df_full.csv') \ntrain_2021.sample(3)","3e5d069f":"train.sample(3)","6acbfd36":"set(test.columns).difference(train_2021.columns)","f1626171":"pars = train_2021.copy()\npars.drop(['car_url', 'equipment_dict', 'image', 'super_gen', 'priceCurrency', 'parsing_unixtime', 'complectation_dict', \n'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', 'description', 'views' ,'date_added',  'region'], axis=1, inplace=True)","ba906892":"pars.dropna(subset=['price'], inplace=True)","0b2132f5":"pars.dropna(subset=['fuelType'], inplace=True)","070b4594":"pars.dropna( inplace=True)","a2133c5f":"pars.info()","e48a4728":"pars.price = pars.price*0.82","20f2b1fe":"set(train_2021.columns).difference(test.columns)","69696358":"set(train.columns).difference(train_2021.columns)","778ad928":"#delete\nset(pars.columns).difference(test.columns)","633cbc43":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c train \u0438\u043b\u0438 test, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u043b\u0435\u0433\u0447\u0435 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c\ntrain['train'] = 1\n#train_2021['train'] = 1 \npars['train'] = 1 \ntest['train'] = 0\n\n# \u044d\u0442\u0443 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a train, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0430 \u0435\u0441\u0442\u044c \u0432 test, \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f submission \ntrain['sell_id'] = 0  \n#train_2021['sell_id'] = 0 \npars['sell_id'] = 0 \n\n","a42c1a58":"#combined_df = pd.concat([test, train, train_parsed.drop(labels=['views', 'date_added', 'region'], axis=1)], join='inner', ignore_index=True)\ncombined_df = pd.concat([test, train, pars], join='inner', ignore_index=True)\nprint(combined_df.shape)\ncombined_df.tail()","b7610d7e":"test.columns","c09190f5":"for col in ['brand' , 'model_name']:\n    combined_df[col] = combined_df[col].astype('category').cat.codes","8fa6f723":"naiv = combined_df.columns[combined_df.dtypes != object]","2aa88413":"naiv = combined_df[naiv]","b3e3c5f7":"naiv['age'] = 2021-naiv['productionDate']","ea9ddeba":"naiv[naiv.sell_id == 0]","63e8c193":"X = naiv[naiv.sell_id == 0].drop(['price', 'train', 'productionDate'], axis=1)\ny = naiv[naiv.sell_id == 0].price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE,  random_state=RANDOM_SEED)\n\n\nlr = LinearRegression().fit(X_train, y_train)\ny_pred = (lr.predict(X_test))\n\n\nprint(f\"The accuracy of the naive model using MAPE metrics is : {(mape(y_test, y_pred))*100:0.2f}%.\")","4b1dbdc2":"combined_df.sample(3)","28d5795e":"combined_df.bodyType.unique()","b10b0121":"combined_df.bodyType = combined_df.bodyType.apply(lambda x: x.lower().split()[0].strip() if isinstance(x, str) else x)","9a3fd827":"combined_df.bodyType.unique()","6c225b31":"combined_df.bodyType = combined_df['bodyType'].astype('category').cat.codes","8aaf8bc3":"combined_df.color.value_counts()","e55bc320":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u0446\u0432\u0435\u0442\u043e\u0432:\ncolor_dict = {'040001': '\u0447\u0451\u0440\u043d\u044b\u0439', 'FAFBFB': '\u0431\u0435\u043b\u044b\u0439', '97948F': '\u0441\u0435\u0440\u044b\u0439', 'CACECB': '\u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439', '0000CC': '\u0441\u0438\u043d\u0438\u0439', '200204': '\u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u044b\u0439',\n              'EE1D19': '\u043a\u0440\u0430\u0441\u043d\u044b\u0439',  '007F00': '\u0437\u0435\u043b\u0451\u043d\u044b\u0439', 'C49648': '\u0431\u0435\u0436\u0435\u0432\u044b\u0439', '22A0F8': '\u0433\u043e\u043b\u0443\u0431\u043e\u0439', '660099': '\u043f\u0443\u0440\u043f\u0443\u0440\u043d\u044b\u0439', 'DEA522': '\u0437\u043e\u043b\u043e\u0442\u0438\u0441\u0442\u044b\u0439', \n              '4A2197': '\u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439', 'FFD600': '\u0436\u0451\u043b\u0442\u044b\u0439', 'FF8649': '\u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439', 'FFC0CB': '\u0440\u043e\u0437\u043e\u0432\u044b\u0439'}\ncombined_df.color.replace(color_dict, inplace=True)\ncombined_df.color.value_counts(normalize=True)","c246d597":"for col in ['color' ]:\n    combined_df[col] = combined_df[col].astype('category').cat.codes","c46d9e52":"combined_df.engineDisplacement = combined_df.name.apply(transf_engineDisplacement_to_float)","5bab0aa0":"combined_df.engineDisplacement.unique()","977c3c5e":"test[test.brand == 'MERCEDES'].engineDisplacement.unique()","d55a8cbb":"train[(train.brand == 'MERCEDES') & (train.engineDisplacement== '250')]","ba13509e":"combined_df[combined_df.engineDisplacement.isna()].fuelType.unique()","4b4280f2":"combined_df.engineDisplacement.fillna(0, inplace=True)","847508fd":"combined_df.enginePower.unique()","4d96f2f6":"combined_df.fuelType.value_counts()","bdebb7dd":"combined_df.fuelType =combined_df.fuelType.apply(lambda x: 1 if x =='\u0431\u0435\u043d\u0437\u0438\u043d' else 0)","f39048ad":"combined_df.fuelType.value_counts()","1a154ca1":"#combined_df.modelDate.corr(combined_df.productionDate)","80be56f9":"#combined_df.drop(['modelDate'], axis=1, inplace=True) ","195d1bd0":"combined_df['age'] = 2021 - combined_df.productionDate","aeef26ee":"combined_df['age']","208644d9":"combined_df.enginePower = combined_df.enginePower.apply(transf_enginePower_to_float)\ncombined_df.enginePower.unique()","b242db0a":"combined_df.vehicleTransmission.value_counts()","7c1daa68":"automat = ['AUTOMATIC', '\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f',  'VARIATOR' ,   'ROBOT', '\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440','\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f' ]   \nmechanic = ['MECHANICAL', '\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f']          \n","4c6987c5":"combined_df.vehicleTransmission = combined_df.vehicleTransmission.apply(lambda x: 1 if x in automat else 0)","e7feae4d":"combined_df.vehicleTransmission.value_counts()","193797d4":"print(combined_df['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].unique())","27b6c636":"combined_df['owners'] = combined_df['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].apply(transf_owners_to_float)\ncombined_df.owners.unique()","81c6663a":"print(combined_df['\u041f\u0422\u0421'].unique())","d4f0e100":"combined_df['\u041f\u0422\u0421'].value_counts()","5df88463":"combined_df.drop(['\u041f\u0422\u0421', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] ,axis=1, inplace=True)","c44ebdce":"print(combined_df['\u041f\u0440\u0438\u0432\u043e\u0434'].unique())","a086ded0":"combined_df['\u041f\u0440\u0438\u0432\u043e\u0434'].value_counts()","325e1430":" combined_df['transmission ']  = combined_df['\u041f\u0440\u0438\u0432\u043e\u0434'].apply(lambda x: 1 if x =='\u043f\u043e\u043b\u043d\u044b\u0439' else 2 if x =='\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439' else 3)","38c183db":"combined_df.drop(['\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f' ] ,axis=1, inplace=True)","dfd16a93":"data_col = combined_df.columns[combined_df.dtypes != object]\ndata = combined_df[data_col]\ndata","28da8797":"X = data[data.sell_id == 0].drop(['price', 'train', 'productionDate', 'enginePower'], axis=1)\ny = data[data.sell_id == 0].price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE,  random_state=RANDOM_SEED)\n\n\nlr = LinearRegression().fit(X_train, y_train)\ny_pred = (lr.predict(X_test))\n\n\nprint(f\"The accuracy of the naive model using MAPE metrics is : {(mape(y_test, y_pred))*100:0.2f}%.\")","0952b540":"combined_df.model_name.nunique()","a10acff5":"combined_df.sample(3)","b965163e":"combined_df.describe()","7a746078":"sns.pairplot(data)","ab385622":"for col in data.columns:\n    display(vis_num_feature(combined_df, col, 'price', 'train == 1'))\n    display(calculate_stat_outliers(combined_df, col, log=True))\n    print('\\n' + '-' * 10 + '\\n')","fca34474":"combined_df[combined_df.enginePower>640]","793990a7":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 train\ncombined_df = combined_df[combined_df.enginePower<640]","fc150fa9":"combined_df[combined_df['train']== 1].age.sort_values()","bfef8717":"sd = combined_df[combined_df['train']== 0]\nsd[sd.age>80]","44939d45":"plt.figure(figsize=(25, 6))\nsns.scatterplot(data=combined_df[combined_df['train'] == 1], x='age', y=\"price\")","d2affbf9":"combined_df.query('train == 1').price.hist();\nplt.title('The target variable distribution', fontdict={'fontsize': 14});\nplt.xlabel('price ');","bbd31f4d":"np.log2(combined_df.query('train == 1').price).hist();\nplt.title('The log2 target variable distribution', fontdict={'fontsize': 14});","3f0d73a6":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \ncombined_df['price_log2'] = np.log2(combined_df.price + 1)","455ed44d":"combined_df['mileage_per_year'] = combined_df.mileage \/ combined_df.age\ncombined_df['rarity'] = combined_df.productionDate.apply(lambda x: 1 if x < 1960 else 0)\ncombined_df['older_3y'] = combined_df.age.apply(lambda x: 1 if x > 3 else 0)\ncombined_df['older_5y'] = combined_df.age.apply(lambda x: 1 if x >  5 else 0)","3d21121c":"combined_df.mileage_per_year = combined_df.apply(lambda x: x.mileage  if x.age ==0 else x.mileage \/ x.age, axis=1)\ncombined_df[combined_df.age == 0]","54587875":"combined_df.mileage_per_year.max()","f4961b37":"combined_df.query('train == 1').mileage_per_year.hist(bins=10);\nplt.title('mileage_per_year distribution', fontdict={'fontsize': 14});","967e9d36":"np.log2(combined_df.query('train == 1').mileage_per_year+1).hist();\nplt.title('The log2 mileage_per_year distribution', fontdict={'fontsize': 14});","86b4f683":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \ncombined_df['mileage_per_year_log2'] = np.log2(combined_df.mileage_per_year + 1)","00a1d509":"combined_df.enginePower.hist(bins=10);","34181fa0":"combined_df['enginePower_log2'] = np.log2(combined_df.enginePower + 1)","b144b459":"combined_df.columns","b2f09a49":"temp1 = combined_df.copy()\ntemp1.sample()","180de723":"X = combined_df.query('train == 1').drop(['price', 'train', 'name', 'price_log2', 'enginePower_log2' , 'mileage_per_year',\n                                          ], axis=1)\n                                          \ny = combined_df.query('train == 1').price\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","6f01637e":"lr = LinearRegression().fit(X_train, y_train)\ny_pred = (lr.predict(X_test))\n\n\nprint(f\"The accuracy of the naive model using MAPE metrics is : {(mape(y_test, y_pred))*100:0.2f}%.\")","cdb4856c":"rf = RandomForestRegressor(random_state=RANDOM_SEED, n_jobs=-1, verbose=1)\nrf.fit(X_train, y_train)\npredict_rf = rf.predict(X_test)\n\nprint(f\"The MAPE mertics of the Random Forest model using MAPE metrics: {(mape(y_test, predict_rf) * 100):0.2f}%.\")\n\n# with log-transformation of the target variable\nrf_log = RandomForestRegressor(random_state=RANDOM_SEED, n_jobs=-1, verbose=1)\nrf_log.fit(X_train, np.log(y_train))\npredict_rf_log = np.exp(rf_log.predict(X_test))\n\nprint(f\"The MAPE mertic for the Random Forest model is : {(mape(y_test, predict_rf_log) * 100):0.2f}%.\")","0b85a139":"X = combined_df.query('train == 1').drop(['price', 'train', 'name', 'price_log2', 'enginePower_log2' ,'mileage_per_year',\n                                          ], axis=1)\n                                          \ny = combined_df.query('train == 1').price\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","9b7d21a0":"X1 = np.array(X)\ny1 = np.array(y)\n\n# with log-transformation of the target variable\netr_log = ExtraTreesRegressor(random_state=RANDOM_SEED, n_jobs=-1, verbose=1)\n\nskf = KFold(n_splits=4, random_state=RANDOM_SEED)\netr_log_mape_values = []\n\nfor train_index, test_index in skf.split(X1, y1):\n    X_train, X_test = X1[train_index], X1[test_index]\n    y_train, y_test = y1[train_index], y1[test_index]\n      \n    \n    \n    etr_log.fit(X_train, np.log(y_train))\n\n    # For MAPE metric (or any other), we need the predictions of the model\n    y_pred = np.exp(etr_log.predict(X_test))\n\n#     print(mean_squared_error(y_test, y_pred))\n#     print(r2_score(y_test, y_pred))\n    etr_log_mape_value = mape(y_test, y_pred)\n    etr_log_mape_values.append(etr_log_mape_value)\n    print(etr_log_mape_value)\n\nprint(f\"The MAPE mertic for the default ExtraTreesRegressor model using 4-fold CV is: {(np.mean(etr_log_mape_values) * 100):0.2f}%.\")","c5e64838":"X1 = np.array(X)\ny1 = np.array(y)\n\nxgb_log = xgb.XGBRegressor( max_depth=10,   \n    n_estimators=1000,\n    random_state=RANDOM_SEED,\n    \n    n_jobs=-1,\n)\n\nskf = KFold(n_splits=4, random_state=RANDOM_SEED)\nxgb_log_mape_values = []\n\nfor train_index, test_index in skf.split(X1, y1):\n    X_train, X_test = X1[train_index], X1[test_index]\n    y_train, y_test = y1[train_index], y1[test_index]\n    \n    # For training, fit() is used\n    xgb_log.fit(X_train, np.log(y_train))\n\n    # For MAPE metric (or any other), we need the predictions of the model\n    y_pred = np.exp(xgb_log.predict(X_test))\n\n    print(mean_squared_error(y_test, y_pred))\n    \n    xgb_log_mape_value = mape(y_test, y_pred)\n    xgb_log_mape_values.append(xgb_log_mape_value)\n    print(xgb_log_mape_value)\n\nprint(f\"The MAPE mertic for the XGBRegressor model using 4-fold CV: {(np.mean(xgb_log_mape_values) * 100):0.2f}%.\")","bd5d9581":"estimators = [\n    ('etr', ExtraTreesRegressor(random_state=RANDOM_SEED, n_jobs=-1, verbose=1)),\n    ('xgb', xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5, learning_rate=0.05, max_depth=12, alpha=1, n_jobs=-1, n_estimators=1000, random_state=RANDOM_SEED))\n]\n\nsr_log = StackingRegressor(\n    estimators=estimators,\n    final_estimator=LinearRegression()\n)\n\nsr_log.fit(X_train, np.log(y_train))\n\n\ny_pred = np.exp(sr_log.predict(X_test))\n\nprint(f\"The MAPE mertic for the default StackingRegressor model: {(mape(y_test, y_pred) * 100):0.2f}%.\")","0260a5bf":"X_kag = combined_df.query('train == 0').drop(['price', 'train', 'name', 'price_log2', 'enginePower_log2' ,'mileage_per_year',\n                                          ], axis=1)","b50b5ae6":"VERSION=13\npredict_submission = np.exp(etr_log.predict(X_kag))\nsample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_final.csv', index=False)\nsample_submission.head(10)","067bb4fb":"predict_submission =   np.exp(sr_log.predict(X_kag))\nsample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_final.csv', index=False)\nsample_submission.head(10) ","1d0d615d":"### model_info\tmodel_name \n### 'model'\n","d669d996":"\n\n# \u041f\u0440\u043e\u0435\u043a\u0442: \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\n\n\n\n\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0434\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438 \u0435\u0451 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432 \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043f\u0440\u043e\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u043a\u0443\u043f\u0438\u0442\u044c \u043d\u0438\u0436\u0435 \u0440\u044b\u043d\u043a\u0430, \u0430 \u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0434\u043e\u0440\u043e\u0436\u0435 \u0440\u044b\u043d\u043a\u0430). \n\n\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0441\u0438\u0442 \u0432\u0430\u0448\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c.\n\n\u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e, \u0442\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u044b\u044f\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043a\u043e\u0433\u0434\u0430 \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0446\u0435\u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430 \u043d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0440\u044b\u043d\u043e\u0447\u043d\u043e\u0439 \u0446\u0435\u043d\u044b). \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432 \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u0442 \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.\n\n\u0418\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043b\u043e\u0436\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u0430 \u0434\u0430\u043d\u043d\u044b\u0435. \u0415\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043f\u0440\u043e\u0434\u0430\u0436 \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u044f\u0432\u043d\u043e \u043c\u0430\u043b\u043e. \u0415\u0433\u043e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u0430\u043c\u0438\u043c.\n\n### \u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b:\n\n- \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043b\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a ML,\u043a\u0440\u043e\u043c\u0435 Deep Learning;\n- \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e;\n- \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438: MAPE - Mean Absolute Percentage Error;\n- \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430 \u043e\u0448\u0438\u0431\u043a\u0438.","32eb9411":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446, train.model \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0443 \u0436\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0447\u0442\u043e \u0438 \u0432 test.model_name, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a.\n\u0410 \u043f\u0440\u0438\u0437\u043d\u0430\u043a model_info \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 model_name, \u0443\u0434\u0430\u043b\u0438\u043c test.model_info.","76d1711e":"## Setup","97f3314d":"\u0412\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u043b\u043d\u044b\u0435 \u043a\u0440\u043e\u043c\u0435 2 , (\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435  \u0438 complectation_dict). \u0443\u0434\u0430\u043b\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:                            ","cdf3f883":"\u0423\u0434\u0430\u043b\u0438\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043e\u043a, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d\u0438 \u043d\u0435 \u0438\u043c\u0435\u0435\u044e\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0446\u0435\u043d\u0443:","d5d3b375":"## XGBoostRegressor","ca9f6161":"### vehicleTransmission","96fc5d5a":"### test['parsing_unixtime'] \n\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0430\u0442\u044b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 19\/10\/20  \u0434\u043e 26\/10\/20. \u041d\u0430 \u043d\u0430\u0448 \u0432\u0437\u0433\u043b\u044f\u0434 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043d\u0443 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442. \u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","029e74e4":"\u0418\u0437\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  \u0438 model_name  brand  \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","64b7c072":"MAPE 16.72%.\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle 14.28970.","8369a80b":"### owners","5836c3d6":"### engineDisplacement","f67ffe94":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\n","34ba8adb":"### \u043f\u0442\u0441, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","eefc8bfa":"train.engineDisplacement nan \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043c\u0430\u0448\u0438\u043d, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c 0","e09de546":"# 3. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 EDA","6e37e281":"\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043e\u0447\u0435\u043d\u044c \u0432\u044b\u0441\u043e\u043a\u0430\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u0438\u043c modelDate","8a636d23":"## RandomForestRegressor","7cf9525c":"### age","f61692e0":"### color","ad50e939":"### test.complectation_dict   train['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f']","b9840dc6":"MAPE 21.55%. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle 13.00797.","52bd5c33":"## price","11006afa":"test['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c","79e15a46":"# 6. \u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u044f\u043c:\n\n\u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 MAPE \u0432 \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c RandomForestRegressor(14.09%) \u0438 Stacking ExtraTreeRegressor \u0441 XGBoostRegressor c \u043c\u0435\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c\u044e LinearRegression (16.72%). ExtraTreeRegressor \u0438 XGBoostRegressor \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043c\u0435\u043d\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, 21.55% \u0438 21.8% \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0443 RandomForestRegressor \u0441\u0442\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f final submission \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0441\u0442\u044d\u043a\u0438\u043d\u0433.","6ea2aaf1":"## StackingRegressor","4b024cb0":"\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 127 . \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u0430\u0431\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0441 \u043d\u0438\u043c \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. ","bccece4e":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430:","104a7c7f":"### Linear Regression","f02dcfc6":"# 4. Feature engineering","0d133a96":"\u0421\u043d\u043e\u0432\u0430 \u0442\u044f\u0436\u0435\u043b\u044b\u0439 \u0445\u0432\u043e\u0441\u0442. \u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c:","972b6a66":"### modelDate ","c960f775":"### fuelType","6d95dc52":"\u0426\u0435\u043d\u044b \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0441 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c \u0432 \u0420\u043e\u0441\u0441\u0438\u0438 \u0432\u044b\u0440\u043e\u0441\u043b\u0438 \u043d\u0430 22% \u0441 \u043d\u0430\u0447\u0430\u043b\u0430 2021 \u0433\u043e\u0434\u0430. https:\/\/avtonovostidnya.ru\/avtorynok\/256226#. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0446\u0435\u043d\u044b 2021 \u043a \u0446\u0435\u043d\u0430\u043c 2020:  ","b55d61ba":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0442\u044f\u0436\u0435\u043b\u044b\u0439 \u043b\u0435\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442,\u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.","f237771c":"### transmission","787e9c50":"test.complectation_dict  \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043a\u0430\u043a \u0432  train['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'], \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","ab65099b":"# 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 ML","19aba541":"# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","27e05125":"### enginePower \n\u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043d\u0438\u0445.","7fc7080f":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438, \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0438\u043b\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439","e2d03cf0":"### sell_id \u0438 price \n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 0 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 train  \u0438 test ","6cc547e7":"\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439. \u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","d1851369":"## ExtraTreesRegressor","1184d09f":"\u0412 \u0434\u0430\u043d\u043d\u044b\u0445 2020 \u0433 \u0435\u0441\u0442\u044c 4 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 ('hidden', 'model', 'start_date', '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f') , \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\u0418 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0435\u0441\u0442\u044c 11 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 train\n## \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u0446\u0435\u043b\u044c\u044e \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438:\n","33d827dd":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0432\u0441\u0435\u0433\u043e 12 \u0431\u0440\u0435\u043d\u0434\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0431\u0435\u0440\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u044b \u0438\u0437 train","6daea152":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0432\u0435\u043b\u0430 \u043a \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c\u0443 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (MAPE 87.31%), \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0435\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u0451\u0442 \u043e\u0441\u043e\u0431\u043e\u0439 \u043f\u043e\u043b\u044c\u0437\u044b. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438!","2d72d5bb":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n\n- mileage_per_year: \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e the productionDate \u0438 mileage columns \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e,\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043c \u043f\u0440\u043e\u0435\u0445\u0430\u043b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0437\u0430 \u0433\u043e\u0434;\n- rarity: \u0431\u044b\u043b \u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d \u0440\u0430\u043d\u0435\u0435 1960;\n- older_3y: \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0442\u0440\u0451\u0445 \u043b\u0435\u0442;\n- older_5y: \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043f\u044f\u0442\u0438 \u043b\u0435\u0442;","761b7dc5":"### 3.1. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train \u0438 test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b:","4c91e478":"### test[priceCurrency] \n\u0422\u0430\u043a \u043a\u0430\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0431\u043b\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c.","17589d34":"### productionDate\n\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442","d02dda1e":"# 2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","627eeb4a":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","77599663":"MAPE 21.08%. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle 13.91838.","383d1238":"MAPE 14.09%. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle 14.21393.","eeebc596":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438","7e70e794":"# 7. Submission"}}