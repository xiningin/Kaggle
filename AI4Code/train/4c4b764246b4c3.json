{"cell_type":{"dfe98e0a":"code","a7a1d2b0":"code","1727fe9c":"code","da60740b":"code","a8fea4f5":"code","6c59d466":"markdown"},"source":{"dfe98e0a":"from concorde.tsp import TSPSolver\nfrom matplotlib import collections  as mc\nimport numpy as np\nimport pandas as pd\nimport time\nimport pylab as pl\nimport matplotlib.pyplot as plt\n%matplotlib inline","a7a1d2b0":"cities = pd.read_csv('..\/input\/cities.csv')","1727fe9c":"# Instantiate solver\nsolver = TSPSolver.from_data(\n    cities.X,\n    cities.Y,\n    norm=\"EUC_2D\"\n)\n\nt = time.time()\ntour_data = solver.solve(time_bound = 60.0, verbose = True, random_seed = 42) # solve() doesn't seem to respect time_bound for certain values?\nprint(time.time() - t)\nprint(tour_data.found_tour)","da60740b":"pd.DataFrame({'Path': np.append(tour_data.tour,[0])}).to_csv('submission.csv', index=False)","a8fea4f5":"# Plot tour\nlines = [[(cities.X[tour_data.tour[i]],cities.Y[tour_data.tour[i]]),(cities.X[tour_data.tour[i+1]],cities.Y[tour_data.tour[i+1]])] for i in range(0,len(cities)-1)]\nlc = mc.LineCollection(lines, linewidths=2)\nfig, ax = pl.subplots(figsize=(20,20))\nax.set_aspect('equal')\nax.add_collection(lc)\nax.autoscale()","6c59d466":"* This kernel hands off the cities to the very fast Concorde TSP solver\n* Ignores the prime twist on this problem\n* You must have https:\/\/github.com\/jvkersch\/pyconcorde installed in Kernels to run this\n"}}