{"cell_type":{"aa239731":"code","53aa43f1":"code","fb59c6c7":"code","e6bc64e0":"code","fd59cfe5":"code","2670283a":"code","4b1ca7c2":"code","06716615":"code","75661039":"code","99b67882":"code","f722bc8c":"code","287d794e":"code","893f9028":"code","0787ede0":"code","386b6274":"code","56eaacc5":"markdown"},"source":{"aa239731":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout, Input,InputLayer, Activation, BatchNormalization\nfrom keras.layers import AveragePooling2D, MaxPooling2D, GlobalAveragePooling2D, ZeroPadding2D\nfrom tensorflow.keras import regularizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.optimizers import SGD\nfrom keras.optimizers import RMSprop\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport tensorflow as tf\nimport cv2\nimport os\nimport numpy as np\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.models import Model\nimport keras\nfrom keras.callbacks import EarlyStopping","53aa43f1":"labels = ['NORMAL', 'PNEUMONIA']\nimg_size = 224\ndef get_data(data_dir):\n    data = []\n    for label in labels:\n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        i=0\n        for img in os.listdir(path):\n            try:\n                # img_arr = cv2.imread(os.path.join(path, img))[...,::-1] #convert BGR to RGB format\n                img = cv2.imread(os.path.join(path, img))\n\n                resized_arr = cv2.resize(img, (img_size, img_size))\n                \n                contrast = int((177 - 0) * (127 - (-127)) \/ (254 - 0) + (-127))\n                Alpha = float(131 * (contrast + 127)) \/ (127 * (131 - contrast))\n                Gamma = 127 * (1 - Alpha)\n                cntrst = resized_arr\n                cntrst = cv2.addWeighted(cntrst, Alpha,cntrst, 0, Gamma)\n                data.append([cntrst, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)\n\ntrain=get_data(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\")\ntest=get_data(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\")\nval=get_data(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\")","fb59c6c7":"x_train = []\ny_train = []\nx_val=[]\ny_val=[]\nx_test = []\ny_test = []\n\nfor feature, label in train:\n  x_train.append(feature)\n  y_train.append(label)\n\nfor feature, label in test:\n  x_test.append(feature)\n  y_test.append(label)\n\nfor feature, label in val:\n  x_val.append(feature)\n  y_val.append(label)","e6bc64e0":"# Normalize the data\nx_train = np.array(x_train,dtype=np.float16) \/ 255\nx_test = np.array(x_test,dtype=np.float16) \/ 255\nx_val = np.array(x_val,dtype=np.float16) \/ 255","fd59cfe5":"x_train.reshape(-1, img_size, img_size, 1)\ny_train = np.array(y_train)\n\nx_test.reshape(-1, img_size, img_size, 1)\ny_test = np.array(y_test)\n\nx_val.reshape(-1, img_size, img_size, 1)\ny_val = np.array(y_val)\n","2670283a":"# training data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range = 30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image\n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip = True,  # randomly flip images\n        vertical_flip=True)  # randomly flip images\ndatagen.fit(x_train)\n","4b1ca7c2":"restnet = ResNet50(include_top=False, weights='imagenet', input_shape=(224,224,3))\noutput = restnet.layers[-1].output\noutput = keras.layers.Flatten()(output)\nrestnet = Model(restnet.input, outputs=output)\nfor layer in restnet.layers:\n    layer.trainable = True\nrestnet.summary()","06716615":"model = Sequential()\nmodel.add(restnet)\nmodel.add(Dense(2048, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2048, activation='relu',kernel_regularizer=regularizers.l1_l2(l1=1e-3, l2=1e-3),activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,activation=\"relu\",kernel_regularizer=regularizers.l1_l2(l1=1e-3, l2=1e-2),activity_regularizer=regularizers.l2(1e-5)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation=\"softmax\"))\nmodel.summary()","75661039":"opt = Adam(lr=0.0001)","99b67882":"es = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=30)","f722bc8c":"# model.compile(optimizer = opt , loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) , metrics = ['accuracy'])\n# model.compile(optimizer =sgd , loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) , metrics = ['accuracy'])\nmodel.compile(optimizer =opt , loss =tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])\n","287d794e":"history = model.fit(x_train,y_train,epochs = 45 , validation_data = (x_val, y_val),callbacks=[es])","893f9028":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(45)\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","0787ede0":"predictions = model.predict_classes(x_test)\npredictions = predictions.reshape(1,-1)[0]\nprint(classification_report(y_test, predictions, target_names = ['NORMAL (Class 0)','PNEUMONIA (Class 1)']))","386b6274":"import sklearn.metrics as metrics\ncm = metrics.confusion_matrix(y_test, predictions)\nprint(cm)","56eaacc5":"Data Preprocessing \n* contrast increase to 177\n"}}