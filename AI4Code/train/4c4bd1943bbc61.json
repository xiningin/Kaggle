{"cell_type":{"e1676ee7":"code","2ae32560":"code","36f333d3":"code","0cad2b38":"code","89b222e5":"code","01ddd540":"code","cdcaff61":"code","3e7efcc8":"code","db9eb01c":"code","50ec4e05":"code","3089cb0e":"code","0267356e":"code","78f865b4":"code","74c5ec7f":"code","99409c8f":"code","a0eb6626":"code","c0fb0def":"code","46d422ba":"code","d8f662e3":"code","3f672b83":"code","b266dca9":"code","52ca32c2":"code","4d506853":"code","b4729281":"code","8be0c50f":"code","208ad9df":"code","ac8382ae":"code","4da5738e":"code","486a1e18":"code","3eefff5f":"code","119081a0":"code","d6949907":"code","0a57a7a6":"code","6824da28":"code","d988f0d5":"code","fb5db100":"code","7ea6bf52":"code","129f71e3":"code","8b874991":"code","0cd94793":"code","eb961883":"code","a4adcfb9":"code","85b04826":"code","1976b8cc":"markdown","69f11176":"markdown","bd3c514c":"markdown","259ebc21":"markdown","0ac86e94":"markdown","25f46866":"markdown","8e8613bb":"markdown","1513c0fe":"markdown","f001eb2c":"markdown","c31bf318":"markdown","7efc3add":"markdown","d5af0e4a":"markdown","aa6a9dcc":"markdown","e1a82fed":"markdown","d8f0286d":"markdown","401249cf":"markdown","9cf78574":"markdown","c69d6ba2":"markdown","7d445179":"markdown","6dd92d27":"markdown","424cefee":"markdown","30381cab":"markdown"},"source":{"e1676ee7":"# importing libraries \nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px \nimport plotly.graph_objs as go \n%matplotlib inline","2ae32560":"# creating the dataframe\ndf = pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")\ndf.head()\n","36f333d3":"# checking the missing values in the dataframe\ndf.isna().sum()","0cad2b38":"# visualising the missin values in the dataframe\nplt.figure(figsize = (8 , 6))\nsns.heatmap(df.isnull() , yticklabels = False)","89b222e5":"# correncting the names of the columns\ndf.columns = ['country', 'year', 'status', 'life_expectancy', 'adult_mortality',\n       'infant_deaths', 'alcohol', 'percentage_expenditure', 'hepatitis_b',\n       'measles', 'bmi', 'under_five_deaths', 'polio', 'total_expenditure',\n       'diphtheria', 'hiv\/aids', 'gdp', 'population',\n       'thinness 1-19 years', 'thinness 5-9 years',\n       'income_composition_of_resources', 'schooling']","01ddd540":"description1 = df.describe()\n","cdcaff61":"# filling the life expectancy and adult mortality with the mean values as it has a very less number of missing values \ndf[\"life_expectancy\"] = df[\"life_expectancy\"].fillna(value = df[\"life_expectancy\"].mean())\ndf[\"adult_mortality\"] = df[\"adult_mortality\"].fillna(value = df[\"adult_mortality\"].mean())\ndf.isna().sum()","3e7efcc8":"# checking the correlation matrix to get the relation between the different features \ncorelation = df.corr()\ncorelation\n","db9eb01c":"plt.figure(figsize = (8 , 6))\nsns.heatmap(df.corr() , annot = True)","50ec4e05":"# filling the missing values of alcohol \n# is can be seen that the alcohol column is mostly correlated with the schooling column\n# so using the schooling column as reference to fill the missing values \n# min value of schooling is 0 and max value is 20.7\n# cutting the dataframe into 4 parts [0 , 5 , 10  , 15 , 21]\n\ndf[\"group\"] = pd.cut(df[\"schooling\"] , bins = (0 , 5 , 7.5 , 10 , 15 , 21 ) , labels = [\"g1\" , \"g2\" , \"g3\" , \"g4\" , \"g5\"])\ndf[\"group\"].value_counts()\n\ngrouped = df.groupby(df.group)[\"alcohol\"].mean()\ngrouped\n# this gives the average value for each group","3089cb0e":"# filling the missing values in the alcohol column of the dataframe\n# we will not use NaN instead we will use 0.01(min) value instead of that\ndef impute_alcohol(col):\n    a = col[0]\n    s = col[1]\n    if pd.isnull(a):\n        if (s<5):\n            return 1.56\n        elif (5<=s<7.5):\n            return 1.33\n        elif (7.5<=s<10):\n            return 2.36\n        elif(10<=s<15):\n            return 4.40\n        elif (s>=15):\n            return 9.00\n       \n    else :\n        return a\n\ndf[\"alcohol\"] = df[[\"alcohol\" , 'schooling']].apply(impute_alcohol , axis = 1)\n\n# filling the remaining alcohol rows using the mean\ndf[\"alcohol\"] = df[\"alcohol\"].fillna(value = df[\"alcohol\"].mean())\n\n# checking that either every value is filled in the alcohol column or not\nprint(df[\"alcohol\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)","0267356e":"# filling up the bmi column \n# bmi is highly corelated with life_expectancy column\n# life expectancy ranges from 36.3 to 89\n\ndf[\"group\"] = pd.cut(df[\"life_expectancy\"] , bins = (30 ,40 , 50 , 60 , 70 , 80 , 90) , labels = [\"g1\" , \"g2\" , \"g3\" , \"g4\" , \"g5\" , \"g6\"])\ndf[\"group\"].value_counts()\n\n\ngrouped = df.groupby(df.group)[\"bmi\"].mean()\ngrouped","78f865b4":"\ndef impute_bmi(col):\n    b = col[0]\n    l = col[1]\n    if pd.isnull(b):\n        if (l<40):\n            return 30.70\n        elif (40<=l<50):\n            return 19.18\n        elif (50<=l<60):\n            return 19.12\n        elif(60<=l<70):\n            return 32.97\n        elif (70<=l<80):\n            return 46.82\n        elif (l>= 80):\n            return 50.79\n\n    else :\n        return b\n\ndf[\"bmi\"] = df[[\"bmi\" , 'life_expectancy']].apply(impute_bmi , axis = 1)\n\n\n# checking that either every value is filled in the bmi column or not\nprint(df[\"bmi\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)","74c5ec7f":"def impute_schooling(col):\n    s = col[0]\n    l = col[1]\n    if pd.isnull(s):\n        if (l<40):\n            return 7.65\n        elif (40<=l<50):\n            return 8.15\n        elif (50<=l<60):\n            return 8.21\n        elif(60<=l<70):\n            return 10.54\n        elif (70<=l<80):\n            return 13.48\n        elif (l>= 80):\n            return 16.51\n\n    else :\n        return s\n\ndf[\"schooling\"] = df[[\"schooling\" , 'life_expectancy']].apply(impute_schooling , axis = 1)\n\n\n# checking that either every value is filled in the bmi column or not\nprint(df[\"schooling\"].isna().sum())\n\n\n\ndf[\"schooling\"].describe()","99409c8f":"# polio and diphtheria has very less number of missing values \n# filling it with the mean value of the column will not have much effect on the performance\ndf = df.fillna(value = {\n    \"polio\" : df[\"polio\"].mean() , \n    \"diphtheria\" : df[\"diphtheria\"].mean()\n})\n\n# checking whether the values have been filled or not\ndf[\"polio\"].isna().sum() , df[\"diphtheria\"].isna().sum()","a0eb6626":"\ndef impute_hepatitis(col):\n    h = col[0]\n    d = col[1]\n    if pd.isnull(h):\n        \n        if (d<50):\n            return 37.60\n        elif (50<=d<60):\n            return 53.00\n        elif (60<=d<70):\n            return 57.93\n        elif(70<=d<80):\n            return 66.34\n        elif (80<=d<90):\n            return 78.84\n        elif (d>= 90):\n            return 91.05\n\n    else :\n        return h\n\ndf[\"hepatitis_b\"] = df[[\"hepatitis_b\" , 'diphtheria']].apply(impute_hepatitis , axis = 1)\n\n\n# checking that either every value is filled in the bmi column or not\nprint(df[\"hepatitis_b\"].isna().sum())\n\n\ndf[\"hepatitis_b\"].describe()","c0fb0def":"# filling thinness columns with the mean values as it has a lesser number of \ndf[\"thinness 1-19 years\"]  = df[\"thinness 1-19 years\"].fillna(value = df[\"thinness 1-19 years\"].mean())\ndf[\"thinness 5-9 years\"]  = df[\"thinness 5-9 years\"].fillna(value = df[\"thinness 5-9 years\"].mean())\n\ndf[\"thinness 1-19 years\"].isna().sum() , df[\"thinness 5-9 years\"].isna().sum()","46d422ba":"# filling income_composition_of_resources column \n# this column is highly related to schooling column (0.80)\ndf[\"group\"] = pd.cut(df[\"schooling\"] , bins = (0 , 5 , 7.5 , 10 , 15 , 21 ) , labels = [\"g1\" , \"g2\" , \"g3\" , \"g4\" , \"g5\"])\ndf[\"group\"].value_counts()\n\ngrouped = df.groupby(df.group)[\"income_composition_of_resources\"].mean()\ngrouped\n","d8f662e3":"def impute_income(col):\n    i = col[0]\n    s = col[1]\n    if pd.isnull(i):\n        if (s<5):\n            return 0.26\n        elif (5<=s<7.5):\n            return 0.37\n        elif (7.5<=s<10):\n            return 0.45\n        elif(10<=s<15):\n            return 0.66\n        elif (s>=15):\n            return 0.84\n       \n    else :\n        return i\n\ndf[\"income_composition_of_resources\"] = df[[\"income_composition_of_resources\" , 'schooling']].apply(impute_income , axis = 1)\n\n# checking that either every value is filled in the alcohol column or not\nprint(df[\"income_composition_of_resources\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)","3f672b83":"# filling the missing values in total expenditure columns\n# total_expenditure is not highly corelated to any of the features but among them it is best connected with the alcohol column \n# alcohol ranges from 0.01 to 17.87\n\n\ndf[\"group\"] = pd.cut(df[\"alcohol\"] , bins = (0 , 5 , 10 , 15  , 20) , labels = [\"g1\" , \"g2\" , \"g3\" , \"g4\"])\ndf.group.value_counts()\n\n\ngrouped = df.groupby(df[\"group\"])[\"total_expenditure\"].mean()\ngrouped","b266dca9":"def impute_expenditure(col):\n    t = col[0]\n    a = col[1]\n    if pd.isnull(t):\n        if (a<5):\n            return 5.37\n        elif (5<=a<10):\n            return 6.71\n        elif (10<=a<15):\n            return 6.88\n        elif(a>15):\n            return 5.81\n        \n    else :\n        return t\n\ndf[\"total_expenditure\"] = df[[\"total_expenditure\" , 'alcohol']].apply(impute_expenditure , axis = 1)\n\n# checking that either every value is filled in the alcohol column or not\nprint(df[\"total_expenditure\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)\n\ndf[\"total_expenditure\"].describe()","52ca32c2":"bins = [0 , 1250 , 2500 , 3750 , 7500 , 8750 , 10000 , 11250 , 12500, 15000 , 17500 ,20000]\nlabels =  [\"g1\" ,\"g2\", \"g3\" ,\"g4\" ,\"g5\", \"g6\", \"g7\" ,\"g8\", \"g9\" ,\"g10\" ,\"g11\" ]\ndf[\"group\"] = pd.cut(df[\"percentage_expenditure\"] , bins = bins , labels = labels)\n\ngrouped = df.groupby(df[\"group\"])[\"gdp\"].mean()\ngrouped","4d506853":"# gdp is very highly corelated with percentage expenditure\ndef impute_GDP(c):\n    g=c[0]\n    p=c[1]\n    if pd.isnull(g):\n        if p<=1250:\n            return 2617.56\n        elif 1250<p<=2500:\n            return 18457.32\n        elif 2500<p<=3750:\n            return 28719.60\n        elif 3750<p<=7500:\n            return 39217.12\n        elif 7500<p<=8750:\n            return 48372.83\n        elif 8750<p<=10000:\n            return 54822.89\n        elif 10000<p<=11250:\n            return 58842.19\n        elif 11250<p<=12500:\n            return 67018.11\n        elif 12500<p<=15000:\n            return 76305.27\n        elif 15000<p<=17500:\n            return 105214.53\n        elif p>17500:\n            return 91186.03\n    else:\n        return g\n    \ndf['gdp']=df[['gdp','percentage_expenditure']].apply(impute_GDP,axis=1)\n\n# checking that either every value is filled in the alcohol column or not\nprint(df[\"gdp\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)\n\ndf[\"gdp\"].describe()\n","b4729281":"# polulation is corelated with infant death column\nbins = []\nj = 0\nfor i in range (0,2100 , 400):\n    bins.append(i)\n    \ndf[\"group\"] = pd.cut(df[\"infant_deaths\"] , bins = bins)\ndf.group.value_counts()\n\ngrouped = df.groupby(df.group)[\"population\"].mean()\ngrouped","8be0c50f":"def impute_pop(col):\n    p = col[0]\n    i = col[1]\n    if pd.isnull(p):\n        if i<400:\n            return 1.228551e+07\n        elif (400<=i<800):\n            return 5.975911e+07\n        elif (800<=i<1200):\n            return 2.810998e+08\n        elif(1200<=i<1600):\n            return 8.088425e+08\n        elif(i>=1600):\n            return 5.095718e+07\n    else:\n        return p\n\n\ndf['population']=df[['population','infant_deaths']].apply(impute_pop,axis=1)\n\n# checking that either every value is filled in the alcohol column or not\nprint(df[\"population\"].isna().sum())\n\n# finally dropping the additional group column that  we created \ndf = df.drop([\"group\"] , axis = 1)\n\ndf[\"population\"].describe()","208ad9df":"# data is completed\ndf.isna().sum()","ac8382ae":"df.columns","4da5738e":"# scatter plot\nstatus = df[\"status\"].unique()\nstatus = list(status)\n\n\nfig = px.scatter(data_frame = df , \n                x = \"infant_deaths\" , \n                y = \"life_expectancy\" , \n                size = \"adult_mortality\", \n                size_max = 10, \n                color = \"status\" , \n                opacity = 0.8 , \n                template = \"seaborn\" , \n                hover_name = df[\"country\"] , \n                hover_data = [df[\"schooling\"] , df[\"population\"] , df[\"total_expenditure\"]] , \n                marginal_x = \"rug\" , \n                marginal_y = \"histogram\" , \n                range_color = (0,10), \n                color_discrete_map = {\"Developed\" : \"rgb(255,76,78)\" , \n                                      \"Developing\" : \"rgb(98,78,150)\"} ,\n#                 color_continuous_scale=\"Darkmint\" , \n                category_orders = {\"status\" : [\"Developed\" , \"Developing\"]} , \n                height = 550 ,\n                  width = 800\n                \n                ) \n\n\nfig.update_layout(\n    title='Infant Deaths vs Life Expectancy',\n    xaxis=dict(\n        title='Infant Deaths',\n        gridcolor='white',\n        type='log',\n        gridwidth=2,\n    ),\n    yaxis=dict(\n        title='Life Expectancy (years)',\n        gridcolor='white',\n        type = \"log\" , \n        gridwidth=2,\n    ),\n    \n    paper_bgcolor='rgb(235, 235, 235)',\n    plot_bgcolor='rgb(243, 243, 243)', \n    \n)\nfig.show()\n","486a1e18":"# overlay histogram\nfig = px.histogram(data_frame = df ,\n                  x = \"schooling\" , \n                  color = \"status\" , \n                  barmode = \"overlay\" , \n                  marginal = \"rug\" , \n                  opacity = 0.6, \n                  hover_name = \"status\",\n                  template = \"seaborn\" , \n#                   histnorm = \"probability density\" ,    \n                   color_discrete_map = dict(Developed = \"#26828e\" , Developing = \"#cf4446\")\n                  )\n\n# fixing the layout of the plot\nfig.update_layout(\n    title='Overlay Histogram',\n    xaxis=dict(\n        title='Schooling',\n        gridcolor='white',\n        gridwidth=2,\n    ),\n    yaxis=dict(\n        title='count',\n        gridcolor='white', \n        gridwidth=2,\n    ),\n    \n    paper_bgcolor='rgb(230, 230 , 230)',\n    plot_bgcolor='rgb(243, 243, 243)', \n    \n#     for grouped histogram you can use following two additional parmeter\n#     bargap = 0.2 , \n#     bargroupgap = 0.1\n    \n)\n\nfig.show()","3eefff5f":"# grouped histogram\nbins = []\nfor i in range (35 , 90 , 5):\n    bins.append(i)\n    \n    \nfig = px.histogram(data_frame = df ,\n                  x = \"life_expectancy\" , \n                  color = \"status\" , \n                  barmode = \"group\" , \n                  marginal = \"rug\" , \n                  hover_name = \"status\",\n                  template = \"seaborn\" , \n#                   histnorm = \"probability density\" ,    \n                   color_discrete_map = dict(Developed = \"#bd3786\" , Developing = \"#cf4446\") , \n                   nbins = 11 , \n                   range_x = (35 , 90) , \n                   opacity = 0.6, \n                  )\n\nfig.update_layout(\n    title = \"Grouped Histogram\" , \n    \n    xaxis = dict (\n        title = \"Life Expectancy\" , \n        gridcolor = \"white\" , \n        gridwidth = 2\n    ) , \n    yaxis = dict (\n        title = \"Count\" , \n        gridcolor = \"white\" , \n        gridwidth = 2\n    ) , \n    paper_bgcolor = 'rgb(230, 230 , 230)' , \n    plot_bgcolor = 'rgb(243, 243 , 243)',\n    bargap = 0.1,\n    bargroupgap = 0.1,\n    \n)\n\nfig.show()","119081a0":"# pie chart \ngrouped = df.groupby(df['country'])['population'].mean()\n\ngrouped = pd.DataFrame(index = df[\"country\"].unique() , data = grouped)\ngrouped = grouped.sort_values(by = \"population\" , ascending = False)\ngrouped = grouped.head(10)\n \nfig = px.pie(data_frame = grouped , \n            names = grouped.index , \n            values = \"population\" , \n            template = \"seaborn\" , \n             opacity = 0.8 , \n            color_discrete_sequence=px.colors.sequential.Cividis , \n            hole = 0.5 , \n#             color_discrete_map = , \n             \n            )\n\nfig.update_traces (pull= 0.05 , textinfo = \"percent+label\" , rotation = 90)\n\nfig.update_layout(\n    title = \"Pie Chart\" , \n    paper_bgcolor = 'rgb(230, 230 , 230)' , \n    plot_bgcolor = 'rgb(243, 243 , 243)',\n    annotations=[dict(text='Mean Population', font_size=20, showarrow=False)]\n)\n\nfig.show()","d6949907":"# violin plot\ndf[\"life_type\"] = pd.cut(df[\"life_expectancy\"] , \n                        bins = (0, 50 , 65 , 75 , 85 , 100) , \n                        labels = (\"Bad\" , \"Average\" , \"Good\" , \"Very Good\" , \"Excellent\"))\n\nfig = px.violin(data_frame = df , \n            x = \"status\" , \n            y = \"total_expenditure\" , \n            template = \"seaborn\" , \n            color_discrete_sequence = px.colors.sequential.Plasma ,\n#             color_discrete_map = {\"Developing\" : \"#9e2f7f\" , \"Developed\" : \"#26828e\"} , \n            box = True ,\n            points = \"outliers\" , \n            hover_name = \"country\" , \n            hover_data = [\"life_type\" ,\"life_expectancy\" , \"percentage_expenditure\"] , \n#             animation_frame = \"life_type\" , \n#             animation_group = \"status\"\n            )\n\n\nfig.update_layout(title = \"Violin plot\" , \n                 xaxis = dict(title = \"Country Status\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 yaxis = dict(title = \"Total Expenditure\" ,\n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 paper_bgcolor = 'rgb(230, 230 , 230)' , \n                 plot_bgcolor = 'rgb(243, 243 , 243)' \n                 )\nfig.show()\n\ndf = df.drop(\"life_type\", axis = 1)","0a57a7a6":"# stacked histogram\n# how is life expectancy distributed\nbins = []\nfor i in range (35 , 90 , 5):\n    bins.append(i)\n    \n    \nfig = px.histogram(data_frame = df ,\n                  x = [\"thinness 1-19 years\" , \"thinness 5-9 years\"], \n                  opacity = 0.6, \n#                   barmode = \"relative\" ,  \n                  color_discrete_map = {\"thinness 1-19 years\" : \"#440f76\" , \n                                       \"thinness 5-9 years\" : \"#26828e\"} ,\n                  marginal = \"rug\" , \n                  nbins = 9 ,\n                  range_x = (0,30)                   \n                  )\n\nfig.update_layout(\n    title = \"Stacked Histogram\" , \n    \n    xaxis = dict (\n        title = \"Thinness\" , \n        gridcolor = \"white\" , \n        gridwidth = 2\n    ) , \n    yaxis = dict (\n        title = \"Count\" , \n        gridcolor = \"white\" , \n        gridwidth = 2\n    ) , \n    paper_bgcolor = 'rgb(230, 230 , 230)' , \n    plot_bgcolor = 'rgb(243, 243 , 243)',\n    bargap = 0.1,\n    bargroupgap = 0.1,\n    \n)\n\nfig.show()\n","6824da28":"# animated scatter plot\ndf[\"life_type\"] = pd.cut(df[\"life_expectancy\"] , bins = (0 , 50 , 65 , 75 , 85 , 100) , \n                        labels = [\"Bad\" , \"Average\" , \"Good\" , \"Very Good\" , \"Excellent\"])\n\nfig = px.scatter(data_frame = df , \n                x = \"hepatitis_b\" , \n                y = \"life_expectancy\", \n                color = \"life_type\" , \n#                 color_discrete_sequence = px.colors.sequential.Plasma, \n                template = \"seaborn\", \n                color_discrete_map = {\n                    \"Bad\" : \"#fc67fd\",\n                    \"Average\" : \"#35b779\", \n                    \"Good\" : px.colors.sequential.Inferno[4], \n                    \"Very Good\" : \"#f1605d\", \n                    \"Excellent\" : \"#bd3786\"\n                } , \n                log_x = True , \n                size_max = 15 , \n                size = \"alcohol\" , \n                marginal_x = \"rug\" , \n                marginal_y = \"histogram\" , \n                hover_name = \"country\"  ,\n                animation_frame = \"year\"\n                )\n\nfig.update_layout(title = \"Animated Scatterplot\" , \n                 xaxis = dict(title = \"Hepatitis B\" ,\n                             gridwidth = 2 , \n                             gridcolor = \"white\") ,\n                 yaxis = dict(title = \"Life Expectancy\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 paper_bgcolor = 'rgb(230, 230 , 230)' ,\n                 plot_bgcolor = 'rgb(243, 243 , 243)')","d988f0d5":"# .animated box plot\ndf[\"schooling_type\"] = pd.cut(df[\"schooling\"] , bins = (-1 ,5 , 10 , 15 , 22) , \n                             labels = (\"Bad\" , \"Good\" , \"Very Good\", \"Excellent\"))\n\nfig = px.box(data_frame = df , \n            x = \"schooling_type\" , \n            y = 'income_composition_of_resources' , \n#             notched = True\n            points = \"suspectedoutliers\" , \n            color = \"status\" , \n#             color_discrete_sequence = px.colors.sequential.Plasma \n            category_orders = dict(schooling_type = [\"Bad\" , \"Good\" , \"Very Good\" , \"Excellent\"]) , \n            template = \"seaborn\" , \n#             log_y = True \n             boxmode = \"group\" , \n             hover_name = \"status\" , \n             animation_frame = \"year\"\n            )\n\nfig.update_layout(title = \"Animated BoxPlot\" , \n                 xaxis = dict (title = \"Schooling Type\" , \n                              gridcolor = \"white\",\n                              gridwidth = 2) , \n                 yaxis = dict (title = \"Income Composition of resources\" ,\n                              gridcolor = \"white\" , \n                              gridwidth = 2) , \n                 paper_bgcolor = 'rgb(230, 230 , 230)',\n                 plot_bgcolor = 'rgb(243, 243 , 243)' , \n#                  margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0} \n                 )\n\nfig.show()","fb5db100":"# animated scatter plot\nfig = px.scatter_3d(data_frame = df , \n                   x = \"population\" , \n                   y = \"percentage_expenditure\" , \n                   z = \"total_expenditure\" , \n                   size = \"alcohol\" , \n                   template = \"seaborn\" ,\n                   color = \"life_type\" , \n                   animation_frame = \"year\" , \n                   size_max = 30 , \n                   opacity = 0.7 , \n                   width = 800 , \n                   height = 600 ,  \n                   hover_name = \"country\" , \n                   hover_data = [\"year\" , \"life_expectancy\" , \"income_composition_of_resources\"], \n                   labels = {\n                       \"total_expenditure\" : \"Total Expenditure\" , \n                       \"percentage_expenditure\" : \"Percentage Expenditure\" , \n                       \"population\" : \"Population\",\n                       \"life_type\" : \"Life Type\"\n                   }\n                   )\n                    \n\nfig.update_layout(title = \"Animated 3D Scatter Plot\" , \n                 paper_bgcolor = 'rgb(230, 230 , 230)',\n                 plot_bgcolor = 'rgb(243, 243 , 243)' , \n                 )","7ea6bf52":"# Sunburst Plot\ngdf = df.groupby(df[\"year\"])[\"hiv\/aids\"].max()\n\nha = pd.DataFrame(columns = df.columns)\nfor i in gdf:\n    a = df[df[\"hiv\/aids\"] == i]\n    ha = ha.append(a)\n    \nha = ha.drop_duplicates(subset = [\"hiv\/aids\"])\nha = ha.sort_values (by = \"year\" , ascending = False)\n\nfig = px.sunburst(data_frame = ha , \n                path = [\"year\" , \"country\"] , \n                  values = \"hiv\/aids\" , \n                  color = \"measles\" , \n                  template = \"seaborn\" , \n                 color_discrete_sequence = px.colors.sequential.Viridis , \n                 color_continuous_scale= px.colors.sequential.Viridis ) \n\nfig.update_layout(title = \"SuburstPlot\" ,  \n                 paper_bgcolor = 'rgb(230, 230 , 230)',\n                 plot_bgcolor = 'rgb(243, 243 , 243)' , \n                 )\nfig.update_traces(branchvalues = \"total\")\n\nfig.show()\n","129f71e3":"# removing life_type and schooling_type column\ndf = df.drop([\"life_type\" , \"schooling_type\"] , axis = 1)","8b874991":"# we have 2 categorical type features ..converting it to one hot encoding \ndf_countries = pd.get_dummies(df[\"country\"] )\ndf_status = pd.get_dummies(df[\"status\"] )\n\n# concating it to the original dataframe \ndf = df.drop([\"status\" , \"country\"] , axis = 1)\ndf = pd.concat([df , df_countries , df_status] , axis = 1)\ndf.shape","0cd94793":"from sklearn.preprocessing import MinMaxScaler\n\nx = df.drop([\"life_expectancy\"] , axis = 1)\ny = df[\"life_expectancy\"]\ny = np.array(y).reshape(-1,1)\n\n\nscaler_x = MinMaxScaler(feature_range = (0,1))\nscaled_x = scaler_x.fit_transform(x)\nscaled_x = pd.DataFrame(columns = x.columns , data = scaled_x)\n","eb961883":"# splitting the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\nx_train , x_test , y_train , y_test = train_test_split(scaled_x , y , test_size = 0.1)\n\ny_train = np.reshape(y_train , (2644 , ))\ny_test = np.reshape(y_test , (294 , ))\nx_train.shape , x_test.shape , y_train.shape , y_test.shape\n","a4adcfb9":"# making an empty list that will store the result of various ml models\nfrom sklearn.metrics import r2_score\n\ndef models(x_train , x_test , y_train , y_test) : \n    \n    scores = []\n    \n    from sklearn.linear_model import Lasso\n    lr = Lasso(alpha = 0.001 , max_iter = 5000)\n    lr.fit(x_train , y_train)\n    lr_predict = lr.predict(x_test)\n    scores.append({\n        \"Model\" : \"Lasso\" , \n        \"Score\" : r2_score( y_test ,lr_predict)\n    })\n    \n    from sklearn.linear_model import Ridge\n    rr = Ridge()\n    rr.fit(x_train , y_train)\n    rr_predict = rr.predict(x_test)\n    scores.append({\n        \"Model\" : \"Ridge\" , \n        \"Score\" : r2_score( y_test ,lr_predict)\n    })\n    \n    from sklearn.linear_model import TheilSenRegressor\n    tr = TheilSenRegressor()\n    tr.fit(x_train , y_train)\n    tr_predict = tr.predict(x_test)\n    scores.append({\n        \"Model\" : \"TheilSenRegressor\" , \n        \"Score\" : r2_score( y_test ,tr_predict)\n    })\n     \n    from sklearn.linear_model import HuberRegressor\n    hr = HuberRegressor(max_iter = 5000)\n    hr.fit(x_train , y_train)\n    hr_predict = hr.predict(x_test)\n    scores.append({\n        \"Model\" : \"HuberRegressor\" , \n        \"Score\" : r2_score( y_test ,hr_predict)\n    })\n    \n    from sklearn.svm import SVR\n    svr = SVR(kernel = \"poly\")\n    svr.fit(x_train , y_train)\n    svr_predict = svr.predict(x_test)\n    scores.append({\n        \"Model\" : \"SVR\" , \n        \"Score\" : r2_score( y_test , svr_predict)\n    })\n    \n    from sklearn.tree import DecisionTreeRegressor\n    dtr = DecisionTreeRegressor()\n    dtr.fit(x_train , y_train)\n    dtr_predict = dtr.predict(x_test)\n    scores.append({\n        \"Model\" : \"DecisionTreeRegressor\" , \n        \"Score\" : r2_score( y_test , dtr_predict)\n    })\n    \n    from sklearn.ensemble import RandomForestRegressor\n    rfr = RandomForestRegressor()\n    rfr.fit(x_train , y_train)\n    rfr_predict = rfr.predict(x_test)\n    scores.append({\n        \"Model\" : \"RandomForestRegressor\" , \n        \"Score\" : r2_score( y_test , rfr_predict)\n    })\n    \n    import xgboost as xgb\n    xboost = xgb.XGBRegressor(n_estimators = 200)\n    xboost.fit(x_train, y_train)\n    xboost_predict = xboost.predict(x_test)\n    scores.append({\n        \"Model\" : \"XGBRegressor\" , \n        \"Score\" : r2_score(y_test , xboost_predict)\n    })\n    return  scores\n\nresults = models(x_train , x_test, y_train , y_test)\nresults = pd.DataFrame(results)","85b04826":"# visualising the accuracy of the different models\nfig = px.bar(data_frame = results , \n      x = \"Model\" , \n      y = \"Score\" , \n      opacity = 0.5 , \n      color_discrete_sequence = px.colors.sequential.Cividis , \n      hover_name = \"Model\" ,)\n\nfig.update_layout(title = \"Results\" , \n                 xaxis = dict(title = \"Models\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) , \n                 yaxis = dict(title = \"r2 Score\" , \n                             gridcolor = \"white\" , \n                             gridwidth = 2) ,\n                 paper_bgcolor = \"rgb(230 , 230 , 230)\", \n                 plot_bgcolor = \"rgb(243 , 243 , 243)\", \n                                    )\n\n","1976b8cc":"## Ques - How is life expectancy related to infant deaths ?","69f11176":"## Ques - What are the top 10 countries with the highest mean population?\n","bd3c514c":"# Removing the data for any outliers using quantile method","259ebc21":"## Realtionship between the thinness columns","0ac86e94":"### Dividing the data into training and test sets \n\ntrain_test_split is an effective way to divide the data into test and training sets quickly","25f46866":"# Part 2 - Data Visualisation","8e8613bb":"# Part 3 - Machine Learning","1513c0fe":"# Aim:- To fill all the missing values and to come up with a regression model that effectively predicts the life expectancy of the people","f001eb2c":"## Creating a funtion \n\n Here , I will make a function(models) with different machine learning models and store the r2_score of each model in a list (scores). The function will return this list. ","c31bf318":"## Ques - What is the relation between hepatitis b and life expectancy over the years?","7efc3add":"## Part 1 - Tackling Missing Values \n\nThis segment covers the major portion of this notebook as many columns have missing values. \n\nFor the sake of simplicity, I have used only one procedure to tackle the missing values which gave a pretty goo result. You can try different procedures and check how it effect the  performance.\n\nFor filling the missing values, I'm taking the most correlated column to the column i want to fill values in ,and using it to fill the missing values ","d5af0e4a":"### This Notebook is divided into three parts :-\n\n* Part 1 - Tackling Missing Values \n* Part 2 - Data Visualisation \n* Part 3 - Machine Learning","aa6a9dcc":"## Categorical Columns \n\nFirst we will drop the life_type and schooling_type columns as it is created only for the purpose of visualisation.\n\nOur data has some categorical column which we need to take care about before feeding it to a machine learning algorithm. \nWe will use the concept of one hot encoding here for the categorical columns.\n\n#### Pandas get_dummies method is the easiest way to  get rid of this problem","e1a82fed":"## Ques - What is the distribution of schooling for developed and developing countries ?","d8f0286d":"### Plotting the r2_score of different models ","401249cf":"## Ques - How is the quality of schooling related to income composition of resources for developed and developing countries over the years?","9cf78574":"## Ques - Which country have higest hiv\/aids over subsequents years ?\n","c69d6ba2":"## Scaling the features \n\nFirst , we will extract the features from the dataframe then scale the features using MinMaxScaler. \n","7d445179":"## Ques - What is the realtion between population , total expenditure and percentage expenditure over the years ?","6dd92d27":"### In this segment i have used plotly.express to do data visualisation \n\nPlotly is a very powerful tool to visual data using different kind of plots. Moreover, plotly.express is just one line of code to make very effective plots.\n\n#### In this segment i have used different plotly plots which include :-\n* Scatter Plot\n* Overlay Histgram\n* Stacked Histogram\n* Grouped Histogam \n* Pie Chart \n* Violin plot\n* Animated Scatter plot \n* Animated box Plot \n* Animated 3d Scatter plot\n* Sunburst Plot\n\nplotly.update_layout is used to update the layout of the plots such as paper background color , plot backgorund color , title , \nx label ,y label etc. \n\n","424cefee":"## Ques - How is life expectancy distributed in developed and developing countries?","30381cab":"## Ques - What is the relation between total expenditure and status of the countries ?"}}