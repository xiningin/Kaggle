{"cell_type":{"649ab4df":"code","5a228e78":"code","5c6f5900":"code","6ac4c154":"code","0355c191":"code","9f555398":"code","971ddb37":"code","4ce53788":"code","deb54a4e":"code","ae626037":"code","f145b5e8":"code","40aa8b4a":"code","3534f681":"code","980fd6fc":"code","1ea57271":"code","7fbbeb2f":"code","06ae2da6":"code","7567597b":"code","7deb9c44":"code","f00d71c6":"code","88c6adfc":"code","330fb6b9":"code","962a4085":"code","d98bcb74":"code","586a08d0":"code","1b8a9802":"code","66ee0fab":"code","d131dc08":"code","36f52bdf":"code","5893d7b0":"code","5250390c":"markdown","5a3b5103":"markdown","c7bd0516":"markdown","740324f1":"markdown","9f18a8b3":"markdown","bc0dab9a":"markdown","f1798344":"markdown","befe346f":"markdown","8d12bbf4":"markdown","7d0b5614":"markdown","2de304ab":"markdown"},"source":{"649ab4df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5a228e78":"tr=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nte=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsub=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","5c6f5900":"y=tr['Survived']","6ac4c154":"tr","0355c191":"te","9f555398":"df = pd.concat([tr , te], axis=0,sort=False)","971ddb37":"df","4ce53788":"import warnings\nwarnings.filterwarnings('ignore')","deb54a4e":"df['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\ndf['LastName'] = df.Name.str.split(',').str[0]\ndf['Family_Size'] = df['SibSp'] + df['Parch'] + 1\ndf['IsWomanOrBoy'] = ((df.Title == 'Master') | (df.Sex == 'female'))","ae626037":"df['Deck'] = df['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\ndf.loc[(df['Deck'] == 'T'), 'Deck'] = 'A'","f145b5e8":"df.head()","40aa8b4a":"df['LastName'].value_counts()","3534f681":"title_last=(df['LastName'].value_counts()==1)\ndf['LastName'] = df['LastName'].apply(lambda x: 'Single' if title_last.loc[x] == True else x)\n\nprint(df['LastName'].value_counts())","980fd6fc":"age_avg = df['Age'].mean()\nage_std = df['Age'].std()\nage_null_count = df['Age'].isnull().sum()\nage_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\ndf['Age'][np.isnan(df['Age'])] = age_null_random_list\ndf['Age'] = df['Age'].astype(int)","1ea57271":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace = True)\ndf['Fare'].fillna(df['Fare'].median(), inplace = True)","7fbbeb2f":"df['FareBin'] = pd.qcut(df['Fare'], 4)\ndf['AgeBin'] = pd.cut(df['Age'].astype(int),5)","06ae2da6":"df.info()","7567597b":"df['Title'].value_counts()","7deb9c44":"#df['Title'] = df['Title'].replace(['Lady', 'the Countess','Capt', 'Col','Don', 'Dr', \n#                                             'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\ndf['Title'] = df['Title'].replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].replace('Ms', 'Miss')\ndf['Title'] = df['Title'].replace('Mme', 'Mrs')\n\ntitle_names = (df['Title'].value_counts() < 10)\ndf['Title'] = df['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x) #orcan use comment by manual picking\nprint(df['Title'].value_counts())","f00d71c6":"#print(df['Deck'].value_counts())","88c6adfc":"df.info()","330fb6b9":"drop_column = ['PassengerId','Cabin', 'Ticket', 'Name','Survived']\ndf.drop(drop_column,axis=1,inplace=True)","962a4085":"df= pd.get_dummies(df)\ndf.head()","d98bcb74":"X=df.iloc[:891,:].values\nXtest=df.iloc[891:,:].values","586a08d0":"'''from xgboost import XGBClassifier\nclassifier=XGBClassifier(n_estimators=350,reg_lambda=0.15,max_depth=3)\n\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators=35, max_depth=5, random_state=1)\n\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0,max_iter=40)'''\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0 , probability=True)","1b8a9802":"classifier.fit(X, y)\npredictions = classifier.predict(Xtest)\nprint('done')","66ee0fab":"'''from sklearn.model_selection import GridSearchCV\n#parameters = [{'n_estimators': [200,300,400] ,'max_depth':[2,3],'reg_lambda':[0.1,0.2,0.25]}]\n#parameters = [{'n_estimators': [16,18,15,14] ,'max_depth':[4,5,6]}]\n#parameters = [{'max_iter':[100,90,80,5,10]}]\nparameters = [{'degree':[1,2,3,5,4]}]\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 5,\n                           n_jobs = -1)\ngrid_search = grid_search.fit(X, y)\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint('done')'''","d131dc08":"'''from sklearn.model_selection import cross_val_score\nacc=cross_val_score(estimator=classifier, X=X , y=y , cv=5)\nacc'''\n","36f52bdf":"#acc.mean()\n#acc.std()","5893d7b0":"print('done')","5250390c":"use cross_val_score to know about the fit by comparing acc.mean() and acc.std() and tune the hyperparameters","5a3b5103":"fillng the mssing values \n\nAge is to be filled with random integers between (ave_age-std_age , ave_age+std_age)\n\nMODE FOR Embarked \n\nMEDIAN for Fare\n\nas there are more number of missing values in cabin it should be handled in another way","c7bd0516":"we can dropout  columns that dont help in aking hypothesis like **Survived , PassengerId , Name, Ticket , Cabin**","740324f1":"To apply FE&EDA on both train and test sets , its better to concat them before performing FE &EDA","9f18a8b3":"use gridsearch to get best hyperparameters ","bc0dab9a":"* **FEATURE ENGINEERING & EXPLORATORY DATA ANALYSIS**","f1798344":"creating bins with grouping age and Fare  as new features","befe346f":"**We can strip Title and LastName from Name which would be a good feature**","8d12bbf4":"**df.info()** gives the details of dataframe like dtype, #non-null for every column","7d0b5614":"Now after feature engineering i.e building possible features , we have to handle caegorical variables by LabelEncoding  or by  get_dummies.","2de304ab":"we can reduce and make better set of featues by replacing LastNames with count =1 as Single.(#LastNames reduced by 636)"}}