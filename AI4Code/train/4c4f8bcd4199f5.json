{"cell_type":{"997632c7":"code","edfcea52":"code","2e76658c":"code","1cd5c133":"code","8fc76380":"code","ff6b1851":"code","acf21c4f":"code","a1ab5631":"code","7bbbb9ad":"code","41e008d6":"code","d0aa0f79":"code","ffe472a8":"code","bb6f6f28":"code","4de667ec":"code","667c182f":"markdown","5e919b4f":"markdown","56acda64":"markdown","47d02ad1":"markdown","e2428c08":"markdown"},"source":{"997632c7":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\nimport torch\nimport random\nimport copy\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import ExtraTreesClassifier\n\n# Seeding#####################################################################\ndef random_seed(seed_value, use_cuda):\n    \"\"\"\n    Parameters\n    ----------\n    seed_value : int\n        The desired seed number\n    use_cuda : Boolean\n        True if GPU seeding is desired, False, otherwise\n    Returns\n    -------\n    None.\n    \"\"\"\n    np.random.seed(seed_value) # numpy seed\n    torch.manual_seed(seed_value) # torch cpu vars\n    random.seed(seed_value) # Python seed\n    if use_cuda:\n        torch.cuda.manual_seed(seed_value)\n        torch.cuda.manual_seed_all(seed_value) # torch gpu vars\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\nrandom_seed(14, True)\n##############################################################################","edfcea52":"def create_folds(data, target, k):\n    \"\"\"\n    Basen on a function from the book: Approaching (Almost) Any Machine Learning Problem by Abhishek Thakur\n    Parameters\n    ----------\n    data : pandas DataFrame\n        the dataframe containing the data\n    target : str\n        The column holding the ground truth\n    k : int\n        number of folds\n    Returns\n    -------\n    data : pandas DataFrame\n        a dataframe containing the data with a new column for fold number\n    \"\"\"\n    # Create a new column called kfold and fill it woth -1\n    data[\"kfold\"] = -1\n\n    # Randomize rows of the data\n    data = data.sample(frac=1).reset_index(drop=True)\n\n    # fetch targets\n    y = data[target].values\n\n    # initiate the kfold class from model_selection module\n    kf = StratifiedKFold(n_splits=k)\n\n    # fill the new kfold column\n    for f, (t_, v_) in enumerate(kf.split(X=data, y=y)):\n        data.loc[v_, \"kfold\"] = f\n\n    return data","2e76658c":"def load_data(root_dir):\n    \"\"\"\n    Parameters\n    ----------\n    root_dir : str\n        path to the directory in which Data and Codes are placed\n    Returns\n    -------\n    folded_train_spreadsheet : DataFrame\n    test_spreadsheet : DataFrame\n    test_label_spreadsheet : DataFrame\n    \"\"\"\n    train_data_path = os.path.join(root_dir, \"train.csv\")\n    test_data_path = os.path.join(root_dir, \"test.csv\")\n    test_label_path = os.path.join(root_dir, \"test_GT.csv\")\n    train_spreadsheet = pd.read_csv(train_data_path)\n    test_spreadsheet = pd.read_csv(test_data_path)\n    test_label_spreadsheet = pd.read_csv(test_label_path)\n    print(\"train size:\", train_spreadsheet.shape[0])\n    print(\"test size:\", test_spreadsheet.shape[0])\n    print(\"class_0 size(within the train set):\", sum(train_spreadsheet[\"Mutacion\"]==0))\n    print(\"class_1 size(within the train set):\", sum(train_spreadsheet[\"Mutacion\"]==1))\n    folded_train_spreadsheet = create_folds(train_spreadsheet, \"Mutacion\", 5)\n    return folded_train_spreadsheet, test_spreadsheet, test_label_spreadsheet","1cd5c133":"root_dir = \"\/kaggle\/input\/radiomics-for-lgg-dataset\/\"\nfolded_train_spreadsheet, test_spreadsheet, test_label_spreadsheet = load_data(root_dir)","8fc76380":"def X_y_of_trainset(df, target):\n    \"\"\"\n    Parameters\n    ----------\n    df : pandas DataFrame\n        the train dataframe containing radiomics+patientID+kfold+target(labels)\n    target : str\n        target(labels) column name\n    Returns\n    -------\n    x_train : Numpy Array\n        radiomics features of the train set\n    y_train : Numpy Array\n        ground truth for the train set\n    \"\"\"\n    # drop the label column from dataframe and convert it to a \n    # numpy array by using .values\n    # target is the label column in the dataframe\n    x_train = df.drop([target, \"patientID\", \"kfold\"], axis=1).values\n    y_train = df[target].values\n\n    return x_train, y_train\n\ndef X_of_test(df):\n    \"\"\"\n    Parameters\n    ----------\n    df : pandas DataFrame\n        the test dataframe containing radiomics+patientID\n    Returns\n    -------\n    x_test : Numpy Array\n        radiomics features of the test set\n    ids : Numpy Array\n        PatientIDs\n    \"\"\"\n    # drop the label column from dataframe and convert it to a \n    # numpy array by using .values\n    # target is the label column in the dataframe\n    x_test = df.drop(\"patientID\", axis=1).values\n    ids = df[\"patientID\"].values\n\n    return x_test, ids\n\n\ndef y_of_test(df):\n    \"\"\"\n    Parameters\n    ----------\n    df : pandas DataFrame\n        the test dataframe containing radiomics+patientID\n    Returns\n    -------\n    y_test : Numpy Array\n        ground truth for the test set\n    ids : Numpy Array\n        PatientIDs\n    \"\"\"\n    # drop the label column from dataframe and convert it to a \n    # numpy array by using .values\n    # target is the label column in the dataframe\n    y_test = df.drop(\"patientID\", axis=1).values\n    ids = df[\"patientID\"].values\n\n    return y_test, ids","ff6b1851":"    # creating train\/test sets\n    x_train, y_train = X_y_of_trainset(folded_train_spreadsheet, \"Mutacion\")\n    x_test, ids = X_of_test(test_spreadsheet)\n    y_test, _ = y_of_test(test_label_spreadsheet)","acf21c4f":"cv = 5 # number of folds","a1ab5631":"def ExtremelyRandomizedTrees(x_train, y_train, cv):\n    # Extremely Randomized Trees\n    et_clf = ExtraTreesClassifier()\n    et_clf_param_grid = {\n        'n_estimators':[10, 15, 20, 25, 50, 80, 90, 100, 150, 200, 250, 300],\n        'max_features':['auto', 'sqrt', 'log2']}\n    et_clfs = GridSearchCV(estimator=et_clf, param_grid=et_clf_param_grid, cv=cv)\n    et_clfs.fit(x_train, y_train)\n    et_clf = ExtraTreesClassifier(n_estimators=et_clfs.best_params_['n_estimators'],\n                                  max_features=et_clfs.best_params_['max_features'])\n    et_clf.fit(x_train, y_train)\n    return et_clf, et_clf_param_grid","7bbbb9ad":"def evaluate(clf, x_test, y_test):\n    \"\"\"\n    Parameters\n    ----------\n    clf : classifier\n    x_test : Numpy Array\n        radiomics features of the test set\n    y_test : Numpy Array\n        ground truth for the test set\n    Returns\n    -------\n    acc : float\n        Accuracy\n    \"\"\"\n    preds = clf.predict(x_test)\n    acc = accuracy_score(y_test, preds)\n    auc = roc_auc_score(y_test, preds)\n    return acc, auc","41e008d6":"# Extremely Randomized Trees\net_clf, et_clf_param_grid = ExtremelyRandomizedTrees(x_train, y_train, cv)\net_clf.fit(x_train, y_train)\nacc, auc = evaluate(et_clf, x_test, y_test)\nprint(\"Classifier: Extremely Randomized Trees \", \"Test Accuracy:\", acc, \"Test AUC:\", auc)","d0aa0f79":"def X_y_of_fold(df, target, fold):\n    \"\"\"\n    Parameters\n    ----------\n    df : Pandas DataFrame\n        The DataFrame Containing the Radiomics Features and \n    target : str\n        target(labels) column name\n    fold : ind\n        fold index\n    Returns\n    -------\n    x_train : Numpy Array\n        radiomics features for training set of the specified fold\n    y_train : Numpy Array\n        ground truth for the training set of the specified fold\n    x_valid : Numpy Array\n        radiomics features for validation set of the specified fold\n    y_valid : Numpy Array\n        ground truth for the validation set of the specified fold\n    \"\"\"\n    # training data is where kfold is not equal to provided fold\n    # also note that we reset the index\n    df_train = df[df.kfold!=fold].reset_index(drop=True)\n\n    # validation data is where kfold is equal to provided fold\n    df_valid = df[df.kfold==fold].reset_index(drop=True)\n\n    # drop the label column from dataframe and convert it to a \n    # numpy array by using .values\n    # target is the label column in the dataframe\n    x_train = df_train.drop([target, \"patientID\", \"kfold\"], axis=1).values\n    y_train = df_train[target].values\n\n    # similarly fo validation we have\n    x_valid = df_valid.drop([target, \"patientID\", \"kfold\"], axis=1).values\n    y_valid = df_valid[target].values\n\n    return x_train, y_train, x_valid, y_valid\n","ffe472a8":"def run(clf, folded_train_df, fold):\n    x_train, y_train, x_valid, y_valid = X_y_of_fold(folded_train_df, \"Mutacion\", fold)\n    clf.fit(x_train, y_train)\n    preds = clf.predict(x_valid)\n    probs = clf.predict_proba(x_valid)\n    accuracy = accuracy_score(y_valid, preds)\n    AUC = roc_auc_score(y_valid, probs[:,1])\n    print(f\"Fold={fold}, Accuracy={accuracy}, , AUC={AUC}\")\n    return clf, accuracy","bb6f6f28":"def voting(clf_list, X, weights):\n    pred = np.asarray([clf.predict(X) for clf in clf_list]).T\n    pred = np.apply_along_axis(lambda x:np.argmax(np.bincount(x, weights=weights)),\n                               axis=1,\n                               arr=pred.astype('int'))\n    return pred","4de667ec":"# Ensemble\nmodels = []\nmodel_weights = []\nclassifiers = {\"ExtremelyRandomizedTree\":et_clf}\nfor classifier in classifiers:\n    print(classifier)\n    for fold in range(cv):\n        clf, weight = run(copy.deepcopy(classifiers[classifier]), folded_train_spreadsheet, fold)\n        models.append(clf)\n        model_weights.append(weight)\n\npreds = voting(models, x_test, model_weights)\nprint(\"Classifier: Ensembled \", \"Test Accuracy:\", accuracy_score(y_test, preds))","667c182f":"################################################################################################################\nEnsembling models","5e919b4f":"################################################################################################################\nWe need 3 more functions for to preprocess the loaded data and make it ready for training and testing","56acda64":"Next we create our model. I have created a function to define the model and do gridsearch in place.","47d02ad1":"The first function we need is fold creator.","e2428c08":"################################################################################################################\nThe next step is to load the data."}}