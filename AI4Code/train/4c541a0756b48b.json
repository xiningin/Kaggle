{"cell_type":{"700683bb":"code","fe68e83b":"code","eb96da05":"code","b062f992":"code","2248aa22":"code","aa4bd4c1":"code","064b1bd1":"code","b076e521":"code","bd63dcc9":"code","1a53ce06":"code","8e9aa537":"code","5bfe67a3":"code","39705828":"code","14b78869":"code","df220a28":"code","535fe5fd":"code","f864e492":"code","8edec5c2":"code","06487f22":"code","a897ff96":"code","814ca368":"code","c83d7f9a":"code","0900f977":"code","5fad0f99":"markdown","6fcc33a5":"markdown","d8e80084":"markdown","347ff455":"markdown","b97dffd6":"markdown","9e072ce1":"markdown","fcff678c":"markdown","57913299":"markdown","0846fbaa":"markdown","1f2119ba":"markdown","f957888a":"markdown","f84ecdfe":"markdown","add5520c":"markdown","89e6c36e":"markdown","7a221925":"markdown","e3cc026e":"markdown","15e76da5":"markdown","dd3baa74":"markdown","57b45ead":"markdown","9c44a91b":"markdown","e1dafa24":"markdown","9f1d75a6":"markdown","8e9dcd25":"markdown","549d1784":"markdown","349bb50a":"markdown","5becf314":"markdown","7c365e5f":"markdown","ab978db8":"markdown","741423a4":"markdown","56389ca8":"markdown","12c812d2":"markdown","50d69e29":"markdown","44654e54":"markdown","625b4bd7":"markdown","3ff48775":"markdown","e950ab19":"markdown","6cef9030":"markdown"},"source":{"700683bb":"import numpy as np\nimport matplotlib.pyplot as plt\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\n\n%matplotlib inline","fe68e83b":"import numpy as np\nimport h5py\n    \n    \ndef load_dataset():\n    train_dataset = h5py.File('..\/input\/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n\n    test_dataset = h5py.File('..\/input\/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n\n    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n    \n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n    \n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes\n\n\n","eb96da05":"# Loading the data (cat\/non-cat)\ntrain_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()","b062f992":"# Example of a picture\nindex = 174\nplt.imshow(train_set_x_orig[index])\nprint (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")","2248aa22":"### START CODE HERE ### (\u2248 3 lines of code)\nm_train = train_set_x_orig.shape[0]\nm_test = test_set_x_orig.shape[0]\nnum_px = train_set_x_orig.shape[1]\n### END CODE HERE ###\n\nprint (\"Number of training examples: m_train = \" + str(m_train))\nprint (\"Number of testing examples: m_test = \" + str(m_test))\nprint (\"Height\/Width of each image: num_px = \" + str(num_px))\nprint (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\nprint (\"train_set_x shape: \" + str(train_set_x_orig.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x shape: \" + str(test_set_x_orig.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))","aa4bd4c1":"# Reshape the training and test examples\n\n### START CODE HERE ### (\u2248 2 lines of code)\ntrain_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\ntest_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n### END CODE HERE ###\n\nprint (\"train_set_x_flatten shape: \" + str(train_set_x_flatten.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x_flatten shape: \" + str(test_set_x_flatten.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))\nprint (\"sanity check after reshaping: \" + str(train_set_x_flatten[0:5,0]))","064b1bd1":"train_set_x = train_set_x_flatten\/255.\ntest_set_x = test_set_x_flatten\/255.","b076e521":"# GRADED FUNCTION: sigmoid\n\nimport numpy as np # this means you can access numpy functions by writing np.function() instead of numpy.function()\n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n    np.exp() --> numpy function for computing exponential of base e\n    \n    Arguments:\n    x -- A scalar or numpy array of any size\n   \n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    \n    ### START CODE HERE ### (\u2248 1 line of code)\n    s = 1 \/ (1 + np.exp(-x))\n    ### END CODE HERE ###\n    \n    return s","bd63dcc9":"x = np.array([1, 2, 3])\nsigmoid(x)","1a53ce06":"# GRADED FUNCTION: initialize_with_zeros\n\ndef initialize_with_zeros(dim):\n    \"\"\"\n    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.\n    \n    Argument:\n    dim -- size of the w vector we want (or number of parameters in this case)\n    \n    Returns:\n    w -- initialized vector of shape (dim, 1)\n    b -- initialized scalar (corresponds to the bias)\n    \"\"\"\n    \n    ### START CODE HERE ### (\u2248 1 line of code)\n    w = np.zeros([dim,1])\n    b = 0\n    ### END CODE HERE ###\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    \n    return w, b","8e9aa537":"dim = 2\nw, b = initialize_with_zeros(dim)\nprint (\"w = \" + str(w))\nprint (\"b = \" + str(b))","5bfe67a3":"# GRADED FUNCTION: propagate\nimport numpy as np\ndef propagate(w, b, X, Y):\n    \"\"\"\n    Implement the cost function and its gradient for the propagation explained above\n\n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of size (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)\n\n    Return:\n    cost -- negative log-likelihood cost for logistic regression\n    dw -- gradient of the loss with respect to w, thus same shape as w\n    db -- gradient of the loss with respect to b, thus same shape as b\n    \n    Tips:\n    - Write your code step by step for the propagation. np.log(), np.dot()\n    \"\"\"\n    \n    m = X.shape[1]\n    \n    # FORWARD PROPAGATION (FROM X TO COST)\n    ### START CODE HERE ### (\u2248 2 lines of code)\n    A = sigmoid(np.dot(w.T, X) + b)                             # compute activation\n    cost = (np.sum(Y * np.log(A) + (1 - Y) * np.log(1 - A)))\/ -m                         # compute cost\n    ### END CODE HERE ###\n    \n    # BACKWARD PROPAGATION (TO FIND GRAD)\n    ### START CODE HERE ### (\u2248 2 lines of code)\n    dw = np.dot(X, (A - Y).T) \/ m\n    db = np.sum(A - Y) \/ m\n    ### END CODE HERE ###\n\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return grads, cost","39705828":"w, b, X, Y = np.array([[1.],[2.]]), 2., np.array([[1.,2.,-1.],[3.,4.,-3.2]]), np.array([[1,0,1]])\ngrads, cost = propagate(w, b, X, Y)\nprint (\"dw = \" + str(grads[\"dw\"]))\nprint (\"db = \" + str(grads[\"db\"]))\nprint (\"cost = \" + str(cost))\n","14b78869":"# GRADED FUNCTION: optimize\n\ndef optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    \"\"\"\n    This function optimizes w and b by running a gradient descent algorithm\n    \n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of shape (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)\n    num_iterations -- number of iterations of the optimization loop\n    learning_rate -- learning rate of the gradient descent update rule\n    print_cost -- True to print the loss every 100 steps\n    \n    Returns:\n    params -- dictionary containing the weights w and bias b\n    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function\n    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.\n    \n    Tips:\n    You basically need to write down two steps and iterate through them:\n        1) Calculate the cost and the gradient for the current parameters. Use propagate().\n        2) Update the parameters using gradient descent rule for w and b.\n    \"\"\"\n    \n    costs = []\n    \n    for i in range(num_iterations):\n        \n        \n        # Cost and gradient calculation (\u2248 1-4 lines of code)\n        ### START CODE HERE ### \n        grads, cost = propagate(w, b, X, Y)\n        ### END CODE HERE ###\n        \n        # Retrieve derivatives from grads\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        \n        # update rule (\u2248 2 lines of code)\n        ### START CODE HERE ###\n        w = w - learning_rate*dw\n        b = b - learning_rate*db\n        ### END CODE HERE ###\n        \n        # Record the costs\n        if i % 100 == 0:\n            costs.append(cost)\n        \n        # Print the cost every 100 training iterations\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs","df220a28":"# GRADED FUNCTION: optimize\n\ndef optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    \"\"\"\n    This function optimizes w and b by running a gradient descent algorithm\n    \n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of shape (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)\n    num_iterations -- number of iterations of the optimization loop\n    learning_rate -- learning rate of the gradient descent update rule\n    print_cost -- True to print the loss every 100 steps\n    \n    Returns:\n    params -- dictionary containing the weights w and bias b\n    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function\n    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.\n    \n    Tips:\n    You basically need to write down two steps and iterate through them:\n        1) Calculate the cost and the gradient for the current parameters. Use propagate().\n        2) Update the parameters using gradient descent rule for w and b.\n    \"\"\"\n    \n    costs = []\n    \n    for i in range(num_iterations):\n        \n        \n        # Cost and gradient calculation (\u2248 1-4 lines of code)\n        ### START CODE HERE ### \n        grads, cost = propagate(w, b, X, Y)\n        ### END CODE HERE ###\n        \n        # Retrieve derivatives from grads\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        \n        # update rule (\u2248 2 lines of code)\n        ### START CODE HERE ###\n        w = w - learning_rate*dw\n        b = b - learning_rate*db\n        ### END CODE HERE ###\n        \n        # Record the costs\n        if i % 100 == 0:\n            costs.append(cost)\n        \n        # Print the cost every 100 training iterations\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs","535fe5fd":"params, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = False)\n\nprint (\"w = \" + str(params[\"w\"]))\nprint (\"b = \" + str(params[\"b\"]))\nprint (\"dw = \" + str(grads[\"dw\"]))\nprint (\"db = \" + str(grads[\"db\"]))","f864e492":"# GRADED FUNCTION: predict\n\ndef predict(w, b, X):\n    '''\n    Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)\n    \n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of size (num_px * num_px * 3, number of examples)\n    \n    Returns:\n    Y_prediction -- a numpy array (vector) containing all predictions (0\/1) for the examples in X\n    '''\n    \n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    \n    # Compute vector \"A\" predicting the probabilities of a cat being present in the picture\n    ### START CODE HERE ### (\u2248 1 line of code)\n    A = sigmoid(np.dot(w.T,X) + b)\n    ### END CODE HERE ###\n    \n    for i in range(A.shape[1]):\n        \n        # Convert probabilities A[0,i] to actual predictions p[0,i]\n        ### START CODE HERE ### (\u2248 4 lines of code)\n        if A[0,i] <= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n        ### END CODE HERE ###\n    \n    assert(Y_prediction.shape == (1, m))\n    \n    return Y_prediction","8edec5c2":"w = np.array([[0.1124579],[0.23106775]])\nb = -0.3\nX = np.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])\nprint (\"predictions = \" + str(predict(w, b, X)))","06487f22":"# GRADED FUNCTION: model\n\ndef model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n    \"\"\"\n    Builds the logistic regression model by calling the function you've implemented previously\n    \n    Arguments:\n    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)\n    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)\n    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)\n    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)\n    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters\n    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()\n    print_cost -- Set to true to print the cost every 100 iterations\n    \n    Returns:\n    d -- dictionary containing information about the model.\n    \"\"\"\n    \n    ### START CODE HERE ###\n    \n    # initialize parameters with zeros (\u2248 1 line of code)\n    w, b = initialize_with_zeros(12288)\n\n    # Gradient descent (\u2248 1 line of code)\n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost = False)\n    \n    # Retrieve parameters w and b from dictionary \"parameters\"\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    \n    # Predict test\/train set examples (\u2248 2 lines of code)\n    Y_prediction_test = predict(w,b,X_test)\n    Y_prediction_train = predict(w,b,X_train)\n    ### END CODE HERE ###\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n\n    \n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    \n    return d","a897ff96":"d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 2000, learning_rate = 0.005, print_cost = True)","814ca368":"# Example of a picture that was wrongly classified.\nindex = 30\nplt.imshow(test_set_x[:,index].reshape((num_px, num_px, 3)))\nprint (\"y = \" + str(test_set_y[0,index]) + \", you predicted that it is a \\\"\", d[\"Y_prediction_test\"][0,index],  \"\\\" picture.\")","c83d7f9a":"# Plot learning curve (with costs)\ncosts = np.squeeze(d['costs'])\nplt.plot(costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\nplt.show()","0900f977":"learning_rates = [0.01, 0.001, 0.0001]\nmodels = {}\nfor i in learning_rates:\n    print (\"learning rate is: \" + str(i))\n    models[str(i)] = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 1500, learning_rate = i, print_cost = False)\n    print ('\\n' + \"-------------------------------------------------------\" + '\\n')\n\nfor i in learning_rates:\n    plt.plot(np.squeeze(models[str(i)][\"costs\"]), label= str(models[str(i)][\"learning_rate\"]))\n\nplt.ylabel('cost')\nplt.xlabel('iterations (hundreds)')\n\nlegend = plt.legend(loc='upper center', shadow=True)\nframe = legend.get_frame()\nframe.set_facecolor('0.90')\nplt.show()","5fad0f99":"Let's also plot the cost function and the gradients.","6fcc33a5":"#### Choice of learning rate ####\n\n**Reminder**:\nIn order for Gradient Descent to work you must choose the learning rate wisely. The learning rate $\\alpha$  determines how rapidly we update the parameters. If the learning rate is too large we may \"overshoot\" the optimal value. Similarly, if it is too small we will need too many iterations to converge to the best values. That's why it is crucial to use a well-tuned learning rate.\n\nLet's compare the learning curve of our model with several choices of learning rates. Run the cell below. This should take about 1 minute. Feel free also to try different values than the three we have initialized the `learning_rates` variable to contain, and see what happens. ","d8e80084":"# 2. Binary Classification\n---\n\nIn a binary classification problem, the result is a discrete value output.\n\nFor example\n- account hacked (1) or compromised (0)\n- a tumor malign (1) or benign (0)\n\n### Example: Cat vs Non-Cat\nThe goal is to train a classifier that the input is an image represented by a feature vector, \ud835\udc65, and predicts whether the corresponding label \ud835\udc66 is 1 or 0. In this case, whether this is a cat image (1) or a non-cat image (0).\n\n\n","347ff455":"<font color='blue'>\n**What you need to remember:**\n\nCommon steps for pre-processing a new dataset are:\n- Figure out the dimensions and shapes of the problem (m_train, m_test, num_px, ...)\n- Reshape the datasets such that each example is now a vector of size (num_px \\* num_px \\* 3, 1)\n- \"Standardize\" the data","b97dffd6":"**Expected Output**:\n\n<table style=\"width:50%\">\n    <tr>\n        <td>  ** dw **  <\/td>\n      <td> [[ 0.99845601]\n     [ 2.39507239]]<\/td>\n    <\/tr>\n    <tr>\n        <td>  ** db **  <\/td>\n        <td> 0.00145557813678 <\/td>\n    <\/tr>\n    <tr>\n        <td>  ** cost **  <\/td>\n        <td> 5.801545319394553 <\/td>\n    <\/tr>\n\n<\/table>","9e072ce1":"**Expected Output**: \n\n<table style=\"width:40%\">\n    <tr>\n       <td> **w** <\/td>\n       <td>[[ 0.19033591]\n [ 0.12259159]] <\/td>\n    <\/tr>\n    \n    <tr>\n       <td> **b** <\/td>\n       <td> 1.92535983008 <\/td>\n    <\/tr>\n    <tr>\n       <td> **dw** <\/td>\n       <td> [[ 0.67752042]\n [ 1.41625495]] <\/td>\n    <\/tr>\n    <tr>\n       <td> **db** <\/td>\n       <td> 0.219194504541 <\/td>\n    <\/tr>\n\n<\/table>","fcff678c":"## 3.2 Cost Function in Logistic Regression\n\nTo train the parameters \ud835\udc64 and \ud835\udc4f, we need to define a cost function.\n\nRecap:\n$$ \ud835\udc66\u0302^{(\ud835\udc56)} = \ud835\udf0e(\ud835\udc64^\ud835\udc47\ud835\udc65^{(\ud835\udc56)} + \ud835\udc4f)$$ \nwhere \n$$\ud835\udf0e(\ud835\udc67^{(\ud835\udc56)})= \\frac{1}{1+ \ud835\udc52^{-z^{(\ud835\udc56)}}}$$\n\n\n$\ud835\udc65^{(\ud835\udc56)}$ is the i-th training example\n\n\ud835\udc3a\ud835\udc56\ud835\udc63\ud835\udc52\ud835\udc5b ${(\ud835\udc65^{(1)}, \ud835\udc66^{(1)}), \u22ef , (\ud835\udc65^{(\ud835\udc5a)}, \ud835\udc66^{(\ud835\udc5a)})} $\n, \ud835\udc64\ud835\udc52 \ud835\udc64\ud835\udc4e\ud835\udc5b\ud835\udc61 $\ud835\udc66\u0302^{(\ud835\udc56)} \u2248 \ud835\udc66^{(\ud835\udc56)}$\n###Loss (error) function\nThe loss function measures the discrepancy between the prediction ($\ud835\udc66\u0302^{(\ud835\udc56)}$) and the desired output ($\ud835\udc66^{(\ud835\udc56)}$). In other words, the loss function computes the error for a single training example. \n\nRecall the squared error function:\n\n$$\ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)}-y^{(\ud835\udc56)})=\\frac{1}{2}(\ud835\udc66\u0302^{(\ud835\udc56)}-y^{(\ud835\udc56)})^2$$\n\nIn logistic regression, we will actually define a different loss function that plays a similar role as squared error, that will \n\n$$\ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)}-y^{(\ud835\udc56)})=-[y^{(\ud835\udc56)}log(\ud835\udc66\u0302^{(\ud835\udc56)})+-(1-y^{(\ud835\udc56)})log(1-\ud835\udc66\u0302^{(\ud835\udc56)}))]$$\n\n- If $y^{(\ud835\udc56)}=1: \ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)},y^{(\ud835\udc56)})=-log(\ud835\udc66\u0302^{(\ud835\udc56)}) $where $log(\ud835\udc66\u0302^{(\ud835\udc56)})$ and $\ud835\udc66\u0302^{(\ud835\udc56)}$ should be close to 1.\n\n- If $y^{(\ud835\udc56)}=1: \ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)},y^{(\ud835\udc56)})=-log(1-\ud835\udc66\u0302^{(\ud835\udc56)}) $where $log(1-\ud835\udc66\u0302^{(\ud835\udc56)})$ and $\ud835\udc66\u0302^{(\ud835\udc56)}$ should be close to 0.\n\n\n### Cost function\n\n\nThe cost function is the average of the loss function of the entire training set. We are going to find the parameters \ud835\udc64 \ud835\udc4e\ud835\udc5b\ud835\udc51 \ud835\udc4f that minimize the overall cost function.\n\n\n\n\n$$\ud835\udc3d(\ud835\udc64, \ud835\udc4f) =\\frac{1}{m}\\sum^{m}_{1}\ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)},y^{(\ud835\udc56)})=-\\frac{1}{m}\\sum^{m}_{1}[y^{(\ud835\udc56)}log(\ud835\udc66\u0302^{(\ud835\udc56)})+-(1-y^{(\ud835\udc56)})log(1-\ud835\udc66\u0302^{(\ud835\udc56)}))]$$\n","57913299":"**Expected Output**: \n<table>\n    <tr> \n        <td> **sigmoid([1,2,3])**<\/td> \n        <td> array([ 0.73105858,  0.88079708,  0.95257413]) <\/td> \n    <\/tr>\n<\/table> \n","0846fbaa":"**Exercise:** The previous function will output the learned w and b. We are able to use w and b to predict the labels for a dataset X. Implement the `predict()` function. There are two steps to computing predictions:\n\n1. Calculate $\\hat{Y} = A = \\sigma(w^T X + b)$\n\n2. Convert the entries of a into 0 (if activation <= 0.5) or 1 (if activation > 0.5), stores the predictions in a vector `Y_prediction`. If you wish, you can use an `if`\/`else` statement in a `for` loop (though there is also a way to vectorize this). ","1f2119ba":"## 1 - Packages ##\n\nFirst, let's run the cell below to import all the packages that you will need during this assignment. \n- [numpy](www.numpy.org) is the fundamental package for scientific computing with Python.\n- [h5py](http:\/\/www.h5py.org) is a common package to interact with a dataset that is stored on an H5 file.\n- [matplotlib](http:\/\/matplotlib.org) is a famous library to plot graphs in Python.\n- [PIL](http:\/\/www.pythonware.com\/products\/pil\/) and [scipy](https:\/\/www.scipy.org\/) are used here to test your model with your own picture at the end.","f957888a":"To represent color images, the red, green and blue channels (RGB) must be specified for each pixel, and so the pixel value is actually a vector of three numbers ranging from 0 to 255.\n\nOne common preprocessing step in machine learning is to center and standardize your dataset, meaning that you substract the mean of the whole numpy array from each example, and then divide each example by the standard deviation of the whole numpy array. But for picture datasets, it is simpler and more convenient and works almost as well to just divide every row of the dataset by 255 (the maximum value of a pixel channel).\n\n<!-- During the training of your model, you're going to multiply weights and add biases to some initial inputs in order to observe neuron activations. Then you backpropogate with the gradients to train the model. But, it is extremely important for each feature to have a similar range such that our gradients don't explode. You will see that more in detail later in the lectures. !--> \n\nLet's standardize our dataset.","f84ecdfe":"\n\n<center>\n![wk3_GrDesc_3](https:\/\/docs.google.com\/uc?export=download&id=1ydFy7vqIO_hbPy_LQIXWLZyyOg84zgmt)\n<\/center>\n\n**Exercise:** Write down the optimize function using gradient descent. The goal is to learn $w$ and $b$ by minimizing the cost function $J$. For a parameter $\\theta$, the update rule is $ \\theta = \\theta - \\alpha \\text{ } d\\theta$, where $\\alpha$ is the learning rate.","add5520c":"# 4. Gradient Descent\n\nWe want to find \ud835\udc64, \ud835\udc4f that minimize \ud835\udc3d(\ud835\udc64,\ud835\udc4f).\n\n\n$$\ud835\udc3d(\ud835\udc64, \ud835\udc4f) =\\frac{1}{m}\\sum^{m}_{1}\ud835\udc3f(\ud835\udc66\u0302^{(\ud835\udc56)},y^{(\ud835\udc56)})=-\\frac{1}{m}\\sum^{m}_{1}[y^{(\ud835\udc56)}log(\ud835\udc66\u0302^{(\ud835\udc56)})+-(1-y^{(\ud835\udc56)})log(1-\ud835\udc66\u0302^{(\ud835\udc56)}))]$$\n\n<center>\n![wk3_BiClas_GrDesc](https:\/\/docs.google.com\/uc?export=download&id=1jBumqTcqsmH5WEqW5BQNKMimj2OK7uVX)\n<\/center>\n\n\n<center>\n![wk3_GrDesc_3](https:\/\/docs.google.com\/uc?export=download&id=1s-e5XFzklHceXGWpiTQBO93GVwDc_Kiy)\n<\/center>\n\n**Exercise:** Implement a function `propagate()` that computes the cost function and its gradient.\n\n**Hints**:\n\nForward Propagation:\n- You get X\n- You compute $A = \\sigma(w^T X + b) = (a^{(1)}, a^{(2)}, ..., a^{(m-1)}, a^{(m)})$\n- You calculate the cost function: $J = -\\frac{1}{m}\\sum_{i=1}^{m}y^{(i)}\\log(a^{(i)})+(1-y^{(i)})\\log(1-a^{(i)})$\n\nHere are the two formulas you will be using: \n\n$$ dw = \\frac{\\partial J}{\\partial w} = \\frac{1}{m}X(A-Y)^T\\tag{7}$$\n$$ db = \\frac{\\partial J}{\\partial b} = \\frac{1}{m} \\sum_{i=1}^m (a^{(i)}-y^{(i)})\\tag{8}$$\n\n","89e6c36e":"**Expected Output**: \n\n<table style=\"width:35%\">\n  <tr>\n    <td>**train_set_x_flatten shape**<\/td>\n    <td> (12288, 209)<\/td> \n  <\/tr>\n  <tr>\n    <td>**train_set_y shape**<\/td>\n    <td>(1, 209)<\/td> \n  <\/tr>\n  <tr>\n    <td>**test_set_x_flatten shape**<\/td>\n    <td>(12288, 50)<\/td> \n  <\/tr>\n  <tr>\n    <td>**test_set_y shape**<\/td>\n    <td>(1, 50)<\/td> \n  <\/tr>\n  <tr>\n  <td>**sanity check after reshaping**<\/td>\n  <td>[17 31 56 22 33]<\/td> \n  <\/tr>\n<\/table>","7a221925":"## 2 - Overview of the Problem set ##\n\n**Problem Statement**: You are given a dataset (\"data.h5\") containing:\n    - a training set of m_train images labeled as cat (y=1) or non-cat (y=0)\n    - a test set of m_test images labeled as cat or non-cat\n    - each image is of shape (num_px, num_px, 3) where 3 is for the 3 channels (RGB). Thus, each image is square (height = num_px) and (width = num_px).\n\nYou will build a simple image-recognition algorithm that can correctly classify pictures as cat or non-cat.\n\nLet's get more familiar with the dataset. Load the data by running the following code.","e3cc026e":"### 2.1 - Reshaping arrays ###\n\nTwo common numpy functions used in deep learning are [np.shape](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ndarray.shape.html) and [np.reshape()](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.reshape.html). \n- X.shape is used to get the shape (dimension) of a matrix\/vector X. \n- X.reshape(...) is used to reshape X into some other dimension. \n\nFor example, in computer science, an image is represented by a 3D array of shape $(length, height, depth = 3)$. However, when you read an image as the input of an algorithm you convert it to a vector of shape $(length*height*3, 1)$. In other words, you \"unroll\", or reshape, the 3D array into a 1D vector.\n\n<center>\n![wk3_reshape](https:\/\/docs.google.com\/uc?export=download&id=1f3Po9IBRFsVcdDtMxtG-WurZbBH8YrIO)\n<\/center>\n\nFor convenience, you should now reshape images of shape (num_px, num_px, 3) in a numpy-array of shape (num_px $*$ num_px $*$ 3, 1). After this, our training (and test) dataset is a numpy-array where each column represents a flattened image. There should be m_train (respectively m_test) columns.\n\n\n**Exercise:** Reshape the training and test data sets so that images of size (num_px, num_px, 3) are flattened into single vectors of shape (num\\_px $*$ num\\_px $*$ 3, 1).\n\nA trick when you want to flatten a matrix X of shape (a,b,c,d) to a matrix X_flatten of shape (b$*$c$*$d, a) is to use: \n```python\nX_flatten = X.reshape(X.shape[0], -1).T      # X.T is the transpose of X\n```\n```","15e76da5":"<h1><center>\nLogistic Regression with a Neural Network mindset\n  <\/center><\/h1>\nWelcome to third workshop of the GroundZero Workshop. Today you will build your first image recognition algorithm. You will build a cat classifier that recognizes cats with 70% accuracy!\n\n<center>\n![](http:\/\/docs.google.com\/uc?export=download&id=1KKNTh9A2iEqDsw5FQuYVUyjVa_MwOJo0)\n  <\/center>\n  \nAs you keep learning new techniques you will increase it to 80+ % accuracy on cat vs. non-cat datasets. By completing this workshop you will:\n\n- Work with logistic regression in a way that builds intuition relevant to neural networks.\n\n- Learn how to minimize the cost function.\n\n- Understand how derivatives of the cost are used to update parameters.\n\nCredit to Coursera Course - Neural Networks and Deep Learning by Deeplearning.ai\n\n","dd3baa74":"Bibliography:\n- http:\/\/www.wildml.com\/2015\/09\/implementing-a-neural-network-from-scratch\/\n- https:\/\/stats.stackexchange.com\/questions\/211436\/why-do-we-normalize-images-by-subtracting-the-datasets-image-mean-and-not-the-c","57b45ead":"## 5 - Merge all functions into a model ##\n\nYou will now see how the overall model is structured by putting together all the building blocks (functions implemented in the previous parts) together, in the right order.\n\n**Exercise:** Implement the model function. Use the following notation:\n    - Y_prediction_test for your predictions on the test set\n    - Y_prediction_train for your predictions on the train set\n    - w, costs, grads for the outputs of optimize()","9c44a91b":"**Expected Output for m_train, m_test and num_px**: \n<table style=\"width:15%\">\n  <tr>\n    <td>**m_train**<\/td>\n    <td> 209 <\/td> \n  <\/tr>\n  \n  <tr>\n    <td>**m_test**<\/td>\n    <td> 50 <\/td> \n  <\/tr>\n  \n  <tr>\n    <td>**num_px**<\/td>\n    <td> 64 <\/td> \n  <\/tr>\n  \n<\/table>\n\n","e1dafa24":"**Expected Output**: \n\n<table style=\"width:40%\"> \n\n    <tr>\n        <td> **Cost after iteration 0 **  <\/td> \n        <td> 0.693147 <\/td>\n    <\/tr>\n      <tr>\n        <td> <center> $\\vdots$ <\/center> <\/td> \n        <td> <center> $\\vdots$ <\/center> <\/td> \n    <\/tr>  \n    <tr>\n        <td> **Train Accuracy**  <\/td> \n        <td> 99.04306220095694 % <\/td>\n    <\/tr>\n\n    <tr>\n        <td>**Test Accuracy** <\/td> \n        <td> 70.0 % <\/td>\n    <\/tr>\n<\/table> \n\n\n\n","9f1d75a6":"**Comment**: Training accuracy is close to 100%. This is a good sanity check: your model is working and has high enough capacity to fit the training data. Test error is 68%. It is actually not bad for this simple model, given the small dataset we used and that logistic regression is a linear classifier. But no worries, you'll build an even better classifier next week!\n\nAlso, you see that the model is clearly overfitting the training data. Later in this specialization you will learn how to reduce overfitting, for example by using regularization. Using the code below (and changing the `index` variable) you can look at predictions on pictures of the test set.","8e9dcd25":"<center>\n![wk3_BiClas_Cat_1](https:\/\/docs.google.com\/uc?export=download&id=1e0hctDLQ3N7OUkv8pPqJIYThhCQOyTOR)\n<\/center>\n\n\nAn image is store in the computer in three separate matrices corresponding to the Red, Green, and Blue color channels of the image. The three matrices have the same size as the image, for example, the resolution of the cat image is 64 pixels X 64 pixels, the three matrices (RGB) are 64 X 64 each.\n\nThe value in a cell represents the pixel intensity which will be used to create a feature vector of n- dimension. In pattern recognition and machine learning, a feature vector represents an object, in this case, a cat or no cat.\n\nTo create a feature vector, \ud835\udc65, the pixel intensity values will be \u201cunroll\u201d or \u201creshape\u201d for each color. The dimension of the input feature vector \ud835\udc65 is \ud835\udc5b\ud835\udc65 = 64 \ud835\udc65 64 \ud835\udc65 3 = 12 288.\n\n\n<center>\n![wk3_BiClas_vector](https:\/\/docs.google.com\/uc?export=download&id=14ymAQ5p_109gf0e0Lea4jkZF5rAFLK6Y)\n<\/center>\n\n<center>\n![wk3_BiClas_vector](https:\/\/docs.google.com\/uc?export=download&id=11DxNCcoLoUyJTTk5GrngRYRxhEMuwSMg)\n<\/center>\n\n\n","549d1784":"Many software bugs in deep learning come from having matrix\/vector dimensions that don't fit. If you can keep your matrix\/vector dimensions straight you will go a long way toward eliminating many bugs. \n\n**Exercise:** Find the values for:\n    - m_train (number of training examples)\n    - m_test (number of test examples)\n    - num_px (= height = width of a training image)\nRemember that `train_set_x_orig` is a numpy-array of shape (m_train, num_px, num_px, 3). For instance, you can access `m_train` by writing `train_set_x_orig.shape[0]`.","349bb50a":"Run the following cell to train your model.","5becf314":"## 6 - Further analysis (optional\/ungraded exercise) ##\n\nCongratulations on building your first image classification model. Let's analyze it further, and examine possible choices for the learning rate $\\alpha$. ","7c365e5f":"<font color='blue'>\n**What to remember:**\nYou've implemented several functions that:\n- Initialize (w,b)\n- Optimize the loss iteratively to learn parameters (w,b):\n    - computing the cost and its gradient \n    - updating the parameters using gradient descent\n- Use the learned (w,b) to predict the labels for a given set of examples","ab978db8":"### 4.2 - Initializing parameters\n\n**Exercise:** Implement parameter initialization in the cell below. You have to initialize w as a vector of zeros. If you don't know what numpy function to use, look up np.zeros() in the Numpy library's documentation.","741423a4":"**Interpretation**: \n- Different learning rates give different costs and thus different predictions results.\n- If the learning rate is too large (0.01), the cost may oscillate up and down. It may even diverge (though in this example, using 0.01 still eventually ends up at a good value for the cost). \n- A lower cost doesn't mean a better model. You have to check if there is possibly overfitting. It happens when the training accuracy is a lot higher than the test accuracy.\n- In deep learning, we usually recommend that you: \n    - Choose the learning rate that better minimizes the cost function.\n    - If your model overfits, use other techniques to reduce overfitting. (We'll talk about this in later videos.) \n\n","56389ca8":"# 3. Logistic Regression\n\n## 3.1 Sigmoid Function\n\nLogistic regression is a learning algorithm used in a supervised learning problem when the output \ud835\udc66 are all either zero or one. The goal of logistic regression is to minimize the error between its predictions and training data.\n\n### Example: Cat vs No - cat\n\n\nGiven an image represented by a feature vector \ud835\udc65, the algorithm will evaluate the probability of a cat being in that image.\n\n<center>\n\ud835\udc3a\ud835\udc56\ud835\udc63\ud835\udc52\ud835\udc5b $\ud835\udc65, \ud835\udc66\u0302=\ud835\udc43 (\ud835\udc66=1|\ud835\udc65)$, where $0 \u2264\ud835\udc66\u0302\u22641$\n<\/center>\n\nThe parameters used in Logistic regression are:\n\n\u2022 The input features vector: \ud835\udc65 \u2208 R\ud835\udc5b\ud835\udc65 , where \ud835\udc5b\ud835\udc65 is the number of features\n\n\u2022 The training label: \ud835\udc66 \u2208 0,1\n\n\u2022 The weights: \ud835\udc64 \u2208 R\ud835\udc5b\ud835\udc65, where \ud835\udc5b\ud835\udc65 is the number of features\n\n\u2022 The threshold: \ud835\udc4f \u2208 R\n\n\u2022 The output: $\ud835\udc66\u0302 = \ud835\udf0e(w^T\ud835\udc65 + \ud835\udc4f)$\n\n\u2022 Sigmoid function: $s = \ud835\udf0e(\ud835\udc64^\ud835\udc47\ud835\udc65 + \ud835\udc4f) = \ud835\udf0e(\ud835\udc67)=\\frac{1}{1+e^{-z}}$\n\n\n\n<center>\n![wk3_LogReg_1](https:\/\/docs.google.com\/uc?export=download&id=1yqvJzyfwssnmd84tjO50ugZZsBlQTKkT)\n<\/center>\n\n$(\ud835\udc64^\ud835\udc47\ud835\udc65 + \ud835\udc4f)$ is a linear function (\ud835\udc4e\ud835\udc65 + \ud835\udc4f), but since we are looking for a probability constraint between [0,1], the sigmoid function is used. The function is bounded between [0,1] as shown in the graph above.\nSome observations from the graph:\n\n\u2022 If \ud835\udc67 is a large positive number, then \ud835\udf0e(\ud835\udc67) = 1\n\n\u2022 If \ud835\udc67 is small or large negative number, then \ud835\udf0e(\ud835\udc67) = 0\n\n\u2022 If \ud835\udc67=0, then \ud835\udf0e(\ud835\udc67)=0.5\n\n**Exercise**: Implement the sigmoid function using numpy. \n\n**Instructions**: x could now be either a real number, a vector, or a matrix. The data structures we use in numpy to represent these shapes (vectors, matrices...) are called numpy arrays. You don't need to know more for now.\n$$ \\text{For } x \\in \\mathbb{R}^n \\text{,     } sigmoid(x) = sigmoid\\begin{pmatrix}\n    x_1  \\\\\n    x_2  \\\\\n    ...  \\\\\n    x_n  \\\\\n\\end{pmatrix} = \\begin{pmatrix}\n    \\frac{1}{1+e^{-x_1}}  \\\\\n    \\frac{1}{1+e^{-x_2}}  \\\\\n    ...  \\\\\n    \\frac{1}{1+e^{-x_n}}  \\\\\n\\end{pmatrix}\\tag{1} $$\n\n","12c812d2":"We added \"_orig\" at the end of image datasets (train and test) because we are going to preprocess them. After preprocessing, we will end up with train_set_x and test_set_x (the labels train_set_y and test_set_y don't need any preprocessing).\n\nEach line of your train_set_x_orig and test_set_x_orig is an array representing an image. You can visualize an example by running the following code. Feel free also to change the `index` value and re-run to see other images. ","50d69e29":"<font color='blue'>\n**What to remember from this assignment:**\n1. Preprocessing the dataset is important.\n2. You implemented each function separately: initialize(), propagate(), optimize(). Then you built a model().\n3. Tuning the learning rate (which is an example of a \"hyperparameter\") can make a big difference to the algorithm. You will see more examples of this later in this course!","44654e54":"Finally, if you'd like, we invite you to try different things on this Notebook. Make sure you submit before trying anything. Once you submit, things you can play with include:\n    - Play with the learning rate and the number of iterations\n    - Try different initialization methods and compare the results\n    - Test other preprocessings (center the data, or divide each row by its standard deviation)","625b4bd7":"**Expected Output**: \n\n\n<table style=\"width:15%\">\n    <tr>\n        <td>  ** w **  <\/td>\n        <td> [[ 0.]\n [ 0.]] <\/td>\n    <\/tr>\n    <tr>\n        <td>  ** b **  <\/td>\n        <td> 0 <\/td>\n    <\/tr>\n<\/table>\n\nFor image inputs, w will be of shape (num_px $\\times$ num_px $\\times$ 3, 1).","3ff48775":"**Interpretation**:\nYou can see the cost decreasing. It shows that the parameters are being learned. However, you see that you could train the model even more on the training set. Try to increase the number of iterations in the cell above and rerun the cells. You might see that the training set accuracy goes up, but the test set accuracy goes down. This is called overfitting. ","e950ab19":"**Expected Output**: \n\n<table style=\"width:30%\">\n    <tr>\n         <td>\n             **predictions**\n         <\/td>\n          <td>\n            [[ 1.  1.  0.]]\n         <\/td>  \n   <\/tr>\n\n<\/table>\n\n","6cef9030":"# 1. What is neural network?\n---\n\nIt is a powerful learning algorithm inspired by how the brain works.\n\n### Example 1 \u2013 single neural network\n<center>\n![](https:\/\/docs.google.com\/uc?export=download&id=1SlMJSKQZw3stzstf33glw1lIX0cHQSJT)    \n  <\/center>\nGiven data about the size of houses on the real estate market and you want to fit a function that will\npredict their price. It is a linear regression problem because the price as a function of size is a continuous\noutput.\nWe know the prices can never be negative so we are creating a function called Rectified Linear Unit (ReLU)\nwhich starts at zero.\n<center>\n![alt text](https:\/\/docs.google.com\/uc?export=download&id=1k0jS6dmyuWyn6CSnTlsUsfyQDQ7GvsXU)\n<\/center>\nThe input is the size of the house (x)\n\nThe output is the price (y)\n\nThe \u201cneuron\u201d implements the function ReLU (blue line)\n\n### Example 2 \u2013 Multiple neural network \n<center>\n![alt text](https:\/\/docs.google.com\/uc?export=download&id=1utQ_nx5Rc7iviKlfTxrJkvIphtz8tXUc)\n<\/center>\nThe price of a house can be affected by other features such as size, number of bedrooms, zip code and\nwealth. The role of the neural network is to predicted the price and it will automatically generate the\nhidden units. We only need to give the inputs x and the output y. \n"}}