{"cell_type":{"f2d56696":"code","3be898fe":"code","49ad8edd":"code","9b8ea4d1":"code","74086d67":"code","2c641551":"code","b85d2d5b":"code","bf8bed87":"code","6df4cde8":"code","3371e409":"code","792ff594":"code","85dff822":"code","20c63507":"code","e3d80671":"code","f336034a":"code","22a6636b":"code","eca9e975":"code","12cef029":"code","c27adb2a":"code","8011d06e":"code","4942655b":"code","342185a8":"code","16c3505f":"code","d3d21410":"code","b39e744d":"code","c6ad74c9":"code","49467f2d":"code","eba6de27":"code","bbb1b060":"code","ad2fa915":"code","60edc29d":"code","d5ade0e3":"code","57357119":"code","07b5aaa4":"markdown","693d1da0":"markdown","460f4eec":"markdown","9ede25f4":"markdown","f8641272":"markdown","1701eeb3":"markdown","b121e5f1":"markdown","ba1eac0a":"markdown"},"source":{"f2d56696":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3be898fe":"import numpy as np\nimport pandas as pd\nimport cv2\nimport keras\nfrom PIL import Image as im\n\nfrom keras import regularizers\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Conv2D, MaxPooling2D, Dropout, Flatten","49ad8edd":"df = pd.read_csv('..\/input\/nnfl-cnn-lab2\/upload\/train_set.csv')\ndf","9b8ea4d1":"image_name = []\nfor i in range(len(df)):\n    image_name.append(df.iloc[i,0])","74086d67":"x_train = []\ndel_list = []\n\nfor i in range(0,len(image_name)):\n    img = cv2.imread('..\/input\/nnfl-resized-image\/resized_train_images\/'+str(image_name[i]),0)\n    x_train.append(img)\n\nX_train = np.array(x_train)","2c641551":"X_train.shape","b85d2d5b":"from skimage import img_as_ubyte\n\ny_train = []\nfor i in range(len(df)):\n        y_train.append(df.iloc[i,1])\n\ny_train = np.array(y_train)\ny_train = img_as_ubyte(y_train)\ny_train","bf8bed87":"y_train.shape","6df4cde8":"df1 = pd.read_csv('..\/input\/nnfl-cnn-lab2\/upload\/sample_submission.csv')\ndf1","3371e409":"image_name1 = []\nfor i in range(len(df1)):\n    image_name1.append(df1.iloc[i,0])","792ff594":"x_test = []\n\nfor i in range(0,len(image_name1)):\n    img = cv2.imread('..\/input\/nnfl-resized-image\/resized_test_images\/'+str(image_name1[i]),0)\n    x_test.append(img)\n\nX_test = np.array(x_test)","85dff822":"X_test.shape","20c63507":"X_train=X_train.reshape(14034,150,150,1).astype('float32') \nX_test=X_test.reshape(7301,150,150,1).astype('float32') ","e3d80671":"# Input shape format: (28, 28, 1)\n# If 128x128 RGB, (128,128,3)\nX_train = X_train \/ 255\nX_test = X_test \/ 255","f336034a":"print(X_train.shape)\nprint(X_test.shape)","22a6636b":"y_train_onehot = np_utils.to_categorical(y_train, num_classes=6)","eca9e975":"model = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=(5,5), padding='same', input_shape=(150,150,1), activation='relu'))","12cef029":"prediction = model.predict_classes(X_train[:1,:])","c27adb2a":"import matplotlib.pyplot as plt\ntrain_img = np.reshape(X_train[:1,:], (150, 150))\nplt.matshow(train_img, cmap = plt.get_cmap('binary'))\nplt.show()","8011d06e":"import matplotlib.pyplot as plt\ncov_img = np.reshape(prediction[:1,:], (150, 150))\nplt.matshow(cov_img, cmap = plt.get_cmap('binary'))\nplt.show()","4942655b":"model = Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=(5,5), padding='same', input_shape=(150,150,1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))","342185a8":"prediction = model.predict_classes(X_train[:1,:])\nprediction[:1,:]","16c3505f":"import matplotlib.pyplot as plt\nmax_pooling_img = np.reshape(prediction[:1, :], (75, 75))\nplt.matshow(max_pooling_img, cmap = plt.get_cmap('binary'))\nplt.show()","d3d21410":"model = Sequential()\n\n#\u6a21\u578b\u4e0d\u8981\u8a2d\u592a\u8907\u96dc\n\n# Conv + Max-pooling 1\nmodel.add(Conv2D(filters=16,kernel_size=(3,3),padding='same', input_shape=(150,150,1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\n\n\n# Conv + Max-pooling 2\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\n\n\n\n# Conv + Max-pooling 3\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(Dropout(0.25))\n\n\n# Conv + Max-pooling 4\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(Dropout(0.5))\n\n\n# Conv + Max-pooling 5\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(Dropout(0.5))\n\n# Conv + Max-pooling 5\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2),strides=2))\nmodel.add(Dropout(0.5))\n\n\n# Flatten\u5c64: \u58d3\u6210\u4e00\u7dad\n# Dense \u63a5\u5728\u5167\u5c64\u4e0d\u7528input_dim\uff0c\u5176\u4ed6\u53c3\u6578\u5148\u7528\u9810\u8a2d\u503c\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu', kernel_initializer='normal'))\nmodel.add(Dropout(0.5))\n\n\n\n\n\nmodel.add(Dense(6, kernel_initializer = 'normal',activation='softmax'))","b39e744d":"model.summary()","c6ad74c9":"from keras.callbacks import EarlyStopping\nearlyStopping=EarlyStopping(monitor='val_accuracy', patience=8) \n\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nhistory=model.fit(X_train, y_train_onehot, validation_split=0.2, epochs=50, batch_size=50, verbose=2, callbacks=[earlyStopping])","49467f2d":"import matplotlib.pyplot as plt\n%matplotlib inline\ndef plot_train_history(history, train_metrics, val_metrics):\n    plt.plot(history.history.get(train_metrics),'-o')\n    plt.plot(history.history.get(val_metrics),'-o')\n    plt.ylabel(train_metrics)\n    plt.xlabel('Epochs')\n    plt.legend(['train', 'validation'])","eba6de27":"plt.figure(figsize=(12,4))\nplt.subplot(1,2,1)\nplot_train_history(history, 'loss','val_loss')\nplt.subplot(1,2,2)\nplot_train_history(history, 'accuracy','val_accuracy')","bbb1b060":"test_label = []\n\nfor i in range(len(X_test)):\n    mmm = model.predict_classes(X_test[i:i+1,:])\n    test_label.append(mmm)\n    \ntest_label","ad2fa915":"df_test_label = pd.DataFrame(test_label)\ndf_test_label.shape","60edc29d":"df_test_label = df_test_label.rename(columns = {0:'label'})\ndf_test_label","d5ade0e3":"submission_df = pd.concat([df1, df_test_label], axis=1)\nsubmission_df","57357119":"submission_df.to_csv('submission.csv', index = False)","07b5aaa4":"import numpy as np \nimport os \nimport cv2\n\n#\u8a2d\u7f6e\u5716\u7247\u8def\u5f91 \n\nDATADIR=\"..\/input\/nnfl-cnn-lab2\/upload\/train_images\/train_images\"\n\n#\u8a2d\u7f6e\u76ee\u6a19\u50cf\u7d20\u5927\u5c0f \n\nIMG_SIZE=150 #\u9577\u5bec\u5927\u5c0f\n\n#\u4f7f\u7528os.path\u6a21\u584a\u7684join\u65b9\u6cd5\u751f\u6210\u8def\u5f91 \n\npath=os.path.join(DATADIR)\n\n#\u4f7f\u7528os.listdir(path)\u51fd\u6578\uff0c\u8fd4\u56depath\u8def\u5f91\u4e0b\u6240\u6709\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u4ee5\u53ca\u6587\u4ef6\u593e\u7684\u540d\u5b57\uff0c\n\nimg_list=os.listdir(path)\n\nind = 0\n\nfor i in img_list:\n\n    #\u8abf\u7528cv2.imread\u8b80\u5165\u5716\u7247\uff0c\u8b80\u5165\u683c\u5f0f\u7232IMREAD_COLOR\n    img_array=cv2.imread(os.path.join(path,i),cv2.IMREAD_COLOR)\n    #\u8abf\u7528cv2.resize\u51fd\u6578resize\u5716\u7247\n    new_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\n    img_name=str(img_list[ind])\n    #\u751f\u6210\u5716\u7247\u5b58\u5132\u7684\u76ee\u6a19\u8def\u5f91\n    save_path='..\\\\input\\\\nnfl-cnn-lab2\\\\upload\\\\resized_train_images\\\\'+img_name\n    ind=ind+1\n    #\u8abf\u7528cv.2\u7684imwrite\u51fd\u6578\u4fdd\u5b58\u5716\u7247\n    cv2.imwrite(save_path,new_array)","693d1da0":"# \u958b\u59cb\u5efa\u6a21","460f4eec":"# \u532f\u5165\u6e2c\u8a66\u96c6\u8cc7\u6599\uff0c\u4e26\u8f49\u6210\u77e9\u9663\u5f62\u5f0f","9ede25f4":"# **\u8cc7\u6599\u9810\u8655\u7406**","f8641272":"# Max Pooling Layer","1701eeb3":"# CNN","b121e5f1":"# \u532f\u5165\u6e2c\u8a66\u96c6\u8cc7\u6599\uff0c\u4e26\u8f49\u6210\u77e9\u9663\u5f62\u5f0f","ba1eac0a":"# Resize the image"}}