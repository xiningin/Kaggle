{"cell_type":{"0d032b69":"code","54d22f2a":"code","2c674376":"code","1e774b9b":"code","8034586f":"code","3dfe1619":"code","84aec7f3":"code","b3ffbc49":"code","c1af01bb":"markdown","2b0924cc":"markdown","0329d79a":"markdown"},"source":{"0d032b69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","54d22f2a":"confirmed = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv')","2c674376":"confirmed.head()\n","1e774b9b":"confirmed_ontario = confirmed.loc[confirmed['Province\/State']=='Ontario'].iloc[:,4:].values","8034586f":"# various usefful sklearn stuff\n# classes we could use to fit regression models\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n","3dfe1619":"# data cleanup\ncon_on = None \nfor i in confirmed_ontario:\n    con_on=[k for k in i] \n# reshape data for sklearn\nX = np.array(range(0, len(con_on))).reshape(-1, 1)\ny = con_on","84aec7f3":"svr_rbf = SVR(kernel='rbf', C=1, gamma=0.1, epsilon=.1)\nsvr_lin = SVR(kernel='linear', C=1, gamma='auto')\nsvr_poly = SVR(kernel='poly', C=1, gamma='auto', degree=3, epsilon=.1,\n               coef0=1)\nsvrs = [svr_rbf, svr_lin, svr_poly]\nkernel_label = ['RBF', 'Linear', 'Polynomial']\nmodel_color = ['m', 'c', 'g']\nlw = 2\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 10), sharey=True)\nfor ix, svr in enumerate(svrs):\n    axes[ix].plot(X, svr.fit(X, y).predict(X), color=model_color[ix],\n                  label='{} model'.format(kernel_label[ix]))\n    axes[ix].scatter(X, y, label='Confirmed Cases in Ontario')\n    axes[ix].legend(loc='upper center', bbox_to_anchor=(0.5, 1.1),\n                    ncol=1, fancybox=True, shadow=True)\n    axes[ix].set_ylim((-10, max(y)+10))   # set the xlim to left, right\nfig.text(0.5, 0.04, 'data', ha='center', va='center')\nfig.text(0.06, 0.5, 'target', ha='center', va='center', rotation='vertical')\nfig.suptitle(\"Support Vector Regression\", fontsize=14)\nplt.show()","b3ffbc49":"svr_rbf = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1)\nsvr_lin = SVR(kernel='linear', C=100, gamma='auto')\nsvr_poly = SVR(kernel='poly', C=100, gamma='auto', degree=3, epsilon=.1,\n               coef0=1)\nsvrs = [svr_rbf, svr_lin, svr_poly]\nkernel_label = ['RBF', 'Linear', 'Polynomial']\nmodel_color = ['m', 'c', 'g']\nlw = 2\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 10), sharey=True)\nfor ix, svr in enumerate(svrs):\n    axes[ix].plot(X, svr.fit(X, y).predict(X), color=model_color[ix],\n                  label='{} model'.format(kernel_label[ix]))\n    axes[ix].scatter(X, y, label='Confirmed Cases in Ontario')\n    axes[ix].legend(loc='upper center', bbox_to_anchor=(0.5, 1.1),\n                    ncol=1, fancybox=True, shadow=True)\n    axes[ix].set_ylim((-10, max(y)+10))   # set the xlim to left, right\nfig.text(0.5, 0.04, 'data', ha='center', va='center')\nfig.text(0.06, 0.5, 'target', ha='center', va='center', rotation='vertical')\nfig.suptitle(\"Support Vector Regression\", fontsize=14)\nplt.show()","c1af01bb":"**Support Vector Regression C = 100**","2b0924cc":"**Support Vector Regression C = 1**","0329d79a":"Future work can include comparison of different kernels and different algorithms. Additionally, since more and more data is being collected, the current pandemic data can be used to build regression models for future work. "}}