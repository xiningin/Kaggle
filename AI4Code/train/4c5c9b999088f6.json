{"cell_type":{"ca348bf6":"code","4010a49c":"code","dbb0d09f":"code","6323254b":"code","7ddbe38b":"code","8ee6f65f":"code","cfdd55e9":"code","59be0607":"code","cfb5e461":"code","978c9c58":"code","dbda3fb4":"code","d3722487":"markdown","8ee673c9":"markdown","5a49cb4c":"markdown","2d5e274c":"markdown","38b24bd9":"markdown","3bcb679f":"markdown","481a0952":"markdown"},"source":{"ca348bf6":"#OpenCV configuration\n!apt update\n!apt install --yes python-opencv\n!apt install --yes libopencv-dev\n!\/bin\/bash -c 'echo \"\/opt\/conda\/lib\/\" > \/etc\/ld.so.conf.d\/opencv.conf'\n!ldconfig","4010a49c":"#importing dependencies\nimport matplotlib.pyplot as plt\nimport cv2","dbb0d09f":"# verify CUDA\n!\/usr\/local\/cuda\/bin\/nvcc --version","6323254b":"# clone darknet repo\n!git clone https:\/\/github.com\/AlexeyAB\/darknet","7ddbe38b":"# Enable OpenCV, GPU, CUDNN and CUDNN_HALF:\n%cd darknet\n!sed -i 's\/OPENCV=0\/OPENCV=1\/' Makefile\n!sed -i 's\/GPU=0\/GPU=1\/' Makefile\n!sed -i 's\/CUDNN=0\/CUDNN=1\/' Makefile\n!sed -i 's\/CUDNN_HALF=0\/CUDNN_HALF=1\/' Makefile","8ee6f65f":"#This code basically resolves the error of lcuda.h by successfully creating a symlink to that file\n!ln -s \/usr\/local\/nvidia\/lib64\/libcuda.so \/usr\/local\/cuda\/lib64\/libcuda.so","cfdd55e9":"#Build the darknet now:\n!make","59be0607":"def showImage(path):\n  image = cv2.imread(path)\n  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n  plt.imshow(image)","cfb5e461":"#Download the pretrained weights\n!wget https:\/\/github.com\/AlexeyAB\/darknet\/releases\/download\/darknet_yolo_v3_optimal\/yolov4.weights","978c9c58":"# run darknet detection on sample image:\n!.\/darknet detector test cfg\/coco.data cfg\/yolov4.cfg yolov4.weights data\/person.jpg -dont_show","dbda3fb4":"# See the output:\nshowImage('predictions.jpg')","d3722487":"## Step 5: Define helper Functions:\nThis helps to show the images predicted in the notebook itself.","8ee673c9":"# Compiling and AlexeyAB YOLOv4 darknet in Kaggle\nThis  notebook will guide you through the process of compiling and running darknet on Kaggle. The compiled darknet can easily be used for training purposes too.","5a49cb4c":"## Step 4: Clone the darknet repository and build it\nThe following code will clone the darknet repo and set necessary configurations so that all the libraries could be linked and build the darknet repo.","2d5e274c":"## Step 3: Import the dependencies:\nRun the code below to import the dependencies","38b24bd9":"## Step 2: Download and Configure OpenCV:\nRun the below command to download Open CV and set the necessary configuration files","3bcb679f":"## Step 6: Download the pretrained weights and run the detector (Wohooo!!!)\nThe following code will download already trained weights and run the detection algroitm on sample image. Note that last prediction result is saved in 'predictions.jpg'.","481a0952":"## Step 1: Enable GPU and Internet inside Kaggle notebook:\nThis step gives computational speed up. Kaggle provides high quality GPU on weekly quota basis. Be sure to turn it off after you finish your work so as to not exhaust your quota.\nSteps:\n1. Click on 'Accelerator' in the settings tab!\n\n![AcceleratorInternet.jpg](attachment:1a7a5a99-43e9-4395-be79-38187c68ee7a.jpg)\n\n2. Choose accelerator to be GPU. <br>\n3. Finally, click on **Turn on GPU**\n4. Toggle Internet button to make sure the internet is enabled for your notebook."}}