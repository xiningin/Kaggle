{"cell_type":{"57d47ff6":"code","1a10a84c":"code","613efade":"code","d6c4bb68":"code","54f48cad":"code","a6ff34a0":"code","688958e7":"code","f84e2f87":"code","3fd6ee00":"code","b108912a":"code","834d09ce":"code","427a5865":"code","2e270eb1":"code","c9ec0b05":"code","c1e27d36":"code","f903aa40":"code","79f23023":"code","91863378":"code","22656141":"code","b619ce5d":"code","cbd54e44":"code","21b633b7":"code","7d2cd713":"markdown","1e81ba47":"markdown"},"source":{"57d47ff6":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    def __repr__(self):\n        return self.data\n\nclass LinkedList:\n    def __init__(self, nodes=None):\n        self.head = None\n        if nodes is not None:\n            node = Node(data=nodes.pop(0))\n            self.head = node\n            for elem in nodes:\n                node.next = Node(data=elem)\n                node = node.next\n\n    def add_first(self, node):\n        node.next = self.head\n        self.head = node\n        \n    def add_last(self, node):\n        if self.head is None:\n            self.head = node\n            return\n        for current_node in self:\n            pass\n        current_node.next = node\n\n\n    def __iter__(self):\n        node = self.head\n        while node is not None:\n            yield node\n            node = node.next\n\n\n    def __repr__(self):\n        node = self.head\n        nodes = []\n        while node is not None:\n            nodes.append(node.data)\n            node = node.next\n        nodes.append(\"None\")\n        return \" -> \".join(nodes)\n","1a10a84c":"llist = LinkedList([\"a\", \"b\", \"c\", \"d\"])","613efade":"llist","d6c4bb68":"llist.add_last(Node(\"e\"))","54f48cad":"llist","a6ff34a0":"llist.add_last(Node(\"f\"))\nllist","688958e7":"dir(llist)","f84e2f87":"class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n    def __repr__(self):\n        return self.data\n\nclass LinkedList:\n    def __init__(self, nodes=None):\n        self.head = None\n        if nodes is not None:\n            node = Node(data=nodes.pop(0))\n            self.head = node\n            for elem in nodes:\n                node.next = Node(data=elem)\n                node = node.next\n        if self.head is None:\n            self.tail = None\n        else:\n            for node in self:\n                pass\n            self.tail = node\n\n    def add_first(self, node):\n        node.next = self.head\n        self.head = node\n        \n    def add_last(self, node):\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            self.tail = node\n            \n    def add_after(self, target_node_data, new_node):\n        if self.head is None:\n            raise Exception(\"List is empty\")\n\n        for node in self:\n            if node.data == target_node_data:\n                new_node.next = node.next\n                node.next = new_node\n                return\n        raise Exception(\"Node with data '%s' not found\" % target_node_data)\n    \n    def add_before(self, target_node_data, new_node):\n        if self.head is None:\n            raise Exception(\"List is empty\")\n        if self.head.data == target_node_data:\n            return self.add_first(new_node)\n        \n        prev_node = self.head\n\n        for node in self:\n            if node.data == target_node_data:\n                prev_node.next = new_node\n                new_node.next = node\n                return\n\n            prev_node = node\n        raise Exception(\"Node with data '%s' not found\" % target_node_data)\n\n        \n    def remove_node(self, target_node_data):\n        if self.head is None:\n            raise Exception(\"List is empty\")\n        if self.head.data == target_node_data:\n            self.head = self.head.next\n            return\n\n        previous_node = self.head\n\n        for node in self:\n            if node.data == target_node_data:\n                previous_node.next = node.next\n                return\n\n            previous_node = node\n        raise Exception(\"Node with data '%s' not found\" % target_node_data)\n\n            \n    def __iter__(self):\n        node = self.head\n        while node is not None:\n            yield node\n            node = node.next\n\n\n    def __repr__(self):\n        node = self.head\n        nodes = []\n        while node is not None:\n            nodes.append(node.data)\n            node = node.next\n        nodes.append(\"None\")\n        return \" -> \".join(nodes)\n","3fd6ee00":"llist = LinkedList(list('abcde'))\nllist","b108912a":"llist.add_last(Node('f'))","834d09ce":"llist","427a5865":"llist.tail, llist, llist.head","2e270eb1":"llist.add_first(Node('0'))\nllist","c9ec0b05":"llist.remove_node('0')","c1e27d36":"llist","f903aa40":"llist.add_before('a',Node('0')),llist","79f23023":"llist.add_before('e',Node('0'))","91863378":"llist","22656141":"llist.add_after('e', Node('1'))","b619ce5d":"llist","cbd54e44":"llist.remove_node('0')","21b633b7":"llist","7d2cd713":"We will modify the tail method so that every time we want to add last element we won't have to traverse the whole list.","1e81ba47":"Thanks to https:\/\/realpython.com\/linked-lists-python\/, for a wonderful site."}}