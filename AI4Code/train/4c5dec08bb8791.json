{"cell_type":{"ba783d26":"code","6fb145d3":"code","2b345674":"code","2efcbc0d":"code","b5b22d85":"code","70b89587":"code","98695fc9":"code","970b56a7":"code","153c52c9":"code","09baa98e":"code","2ae13092":"code","efd2aa17":"code","0e1da0e2":"code","8ee4a12e":"code","de567a4a":"code","071cb7d2":"code","fe2d207e":"code","e226f9a2":"markdown","c72bc73b":"markdown","18335b61":"markdown","0e9607c1":"markdown","825bf7a5":"markdown","247a9238":"markdown","4dc720b6":"markdown","2dd3cc46":"markdown","59d8240e":"markdown","c35a3528":"markdown","8c8b8c53":"markdown","28142292":"markdown","cc18fab4":"markdown","2e2c5cac":"markdown","07752a80":"markdown","75598b6c":"markdown","4793ad08":"markdown","03a71dfa":"markdown","392bb8e8":"markdown","0d7ab8d3":"markdown","ab9c4fa9":"markdown","e15ac3a8":"markdown","1a72829c":"markdown","c0aa0096":"markdown","efd6cb0d":"markdown","7c5039af":"markdown","4326053e":"markdown","948c75cd":"markdown","2d6cbca4":"markdown"},"source":{"ba783d26":"!pip install --upgrade wandb","6fb145d3":"import os\nimport gc\nimport copy\nimport time\nimport random\nimport string\n\n# For data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Pytorch Imports\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\n\n# Utils\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\n# Sklearn Imports\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\n# For Transformer Models\nfrom transformers import AutoTokenizer, AutoModel, AdamW\n\n# For colored terminal text\nfrom colorama import Fore, Back, Style\nb_ = Fore.BLUE\ny_ = Fore.YELLOW\nsr_ = Style.RESET_ALL\n\n# Suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# For descriptive error messages\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"","2b345674":"import wandb\n\ntry:\n    from kaggle_secrets import UserSecretsClient\n    user_secrets = UserSecretsClient()\n    api_key = user_secrets.get_secret(\"wandb_api\")\n    wandb.login(key=api_key)\n    anony = None\nexcept:\n    anony = \"must\"\n    print('If you want to use your W&B account, go to Add-ons -> Secrets and provide your W&B access token. Use the Label name as wandb_api. \\nGet your W&B access token from here: https:\/\/wandb.ai\/authorize')","2efcbc0d":"def id_generator(size=12, chars=string.ascii_lowercase + string.digits):\n    return ''.join(random.SystemRandom().choice(chars) for _ in range(size))\n\nHASH_NAME = id_generator(size=12)\nprint(HASH_NAME)","b5b22d85":"CONFIG = {\"seed\": 2021,\n          \"epochs\": 3,\n          \"model_name\": \"roberta-base\",\n          \"train_batch_size\": 32,\n          \"valid_batch_size\": 64,\n          \"max_length\": 128,\n          \"learning_rate\": 1e-4,\n          \"scheduler\": 'CosineAnnealingLR',\n          \"min_lr\": 1e-6,\n          \"T_max\": 500,\n          \"weight_decay\": 1e-6,\n          \"n_fold\": 5,\n          \"n_accumulate\": 1,\n          \"num_classes\": 1,\n          \"margin\": 0.5,\n          \"device\": torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\"),\n          \"hash_name\": HASH_NAME\n          }\n\nCONFIG[\"tokenizer\"] = AutoTokenizer.from_pretrained(CONFIG['model_name'])\nCONFIG['group'] = f'{HASH_NAME}-Baseline'","70b89587":"def set_seed(seed=42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG['seed'])","98695fc9":"df = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\ndf.head()","970b56a7":"skf = StratifiedKFold(n_splits=CONFIG['n_fold'], shuffle=True, random_state=CONFIG['seed'])\n\nfor fold, ( _, val_) in enumerate(skf.split(X=df, y=df.worker)):\n    df.loc[val_ , \"kfold\"] = int(fold)\n    \ndf[\"kfold\"] = df[\"kfold\"].astype(int)\ndf.head()","153c52c9":"class JigsawDataset(Dataset):\n    def __init__(self, df, tokenizer, max_length):\n        self.df = df\n        self.max_len = max_length\n        self.tokenizer = tokenizer\n        self.more_toxic = df['more_toxic'].values\n        self.less_toxic = df['less_toxic'].values\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        more_toxic = self.more_toxic[index]\n        less_toxic = self.less_toxic[index]\n        inputs_more_toxic = self.tokenizer.encode_plus(\n                                more_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        inputs_less_toxic = self.tokenizer.encode_plus(\n                                less_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        target = 1\n        \n        more_toxic_ids = inputs_more_toxic['input_ids']\n        more_toxic_mask = inputs_more_toxic['attention_mask']\n        \n        less_toxic_ids = inputs_less_toxic['input_ids']\n        less_toxic_mask = inputs_less_toxic['attention_mask']\n        \n        \n        return {\n            'more_toxic_ids': torch.tensor(more_toxic_ids, dtype=torch.long),\n            'more_toxic_mask': torch.tensor(more_toxic_mask, dtype=torch.long),\n            'less_toxic_ids': torch.tensor(less_toxic_ids, dtype=torch.long),\n            'less_toxic_mask': torch.tensor(less_toxic_mask, dtype=torch.long),\n            'target': torch.tensor(target, dtype=torch.long)\n        }","09baa98e":"class JigsawModel(nn.Module):\n    def __init__(self, model_name):\n        super(JigsawModel, self).__init__()\n        self.model = AutoModel.from_pretrained(model_name)\n        self.drop = nn.Dropout(p=0.2)\n        self.fc = nn.Linear(768, CONFIG['num_classes'])\n        \n    def forward(self, ids, mask):        \n        out = self.model(input_ids=ids,attention_mask=mask,\n                         output_hidden_states=False)\n        out = self.drop(out[1])\n        outputs = self.fc(out)\n        return outputs","2ae13092":"def criterion(outputs1, outputs2, targets):\n    return nn.MarginRankingLoss(margin=CONFIG['margin'])(outputs1, outputs2, targets)","efd2aa17":"def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.train()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, data in bar:\n        more_toxic_ids = data['more_toxic_ids'].to(device, dtype = torch.long)\n        more_toxic_mask = data['more_toxic_mask'].to(device, dtype = torch.long)\n        less_toxic_ids = data['less_toxic_ids'].to(device, dtype = torch.long)\n        less_toxic_mask = data['less_toxic_mask'].to(device, dtype = torch.long)\n        targets = data['target'].to(device, dtype=torch.long)\n        \n        batch_size = more_toxic_ids.size(0)\n\n        more_toxic_outputs = model(more_toxic_ids, more_toxic_mask)\n        less_toxic_outputs = model(less_toxic_ids, less_toxic_mask)\n        \n        loss = criterion(more_toxic_outputs, less_toxic_outputs, targets)\n        loss = loss \/ CONFIG['n_accumulate']\n        loss.backward()\n    \n        if (step + 1) % CONFIG['n_accumulate'] == 0:\n            optimizer.step()\n\n            # zero the parameter gradients\n            optimizer.zero_grad()\n\n            if scheduler is not None:\n                scheduler.step()\n                \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss \/ dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])\n    gc.collect()\n    \n    return epoch_loss","0e1da0e2":"@torch.no_grad()\ndef valid_one_epoch(model, dataloader, device, epoch):\n    model.eval()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, data in bar:        \n        more_toxic_ids = data['more_toxic_ids'].to(device, dtype = torch.long)\n        more_toxic_mask = data['more_toxic_mask'].to(device, dtype = torch.long)\n        less_toxic_ids = data['less_toxic_ids'].to(device, dtype = torch.long)\n        less_toxic_mask = data['less_toxic_mask'].to(device, dtype = torch.long)\n        targets = data['target'].to(device, dtype=torch.long)\n        \n        batch_size = more_toxic_ids.size(0)\n\n        more_toxic_outputs = model(more_toxic_ids, more_toxic_mask)\n        less_toxic_outputs = model(less_toxic_ids, less_toxic_mask)\n        \n        loss = criterion(more_toxic_outputs, less_toxic_outputs, targets)\n        \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss \/ dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])   \n    \n    gc.collect()\n    \n    return epoch_loss","8ee4a12e":"def run_training(model, optimizer, scheduler, device, num_epochs, fold):\n    # To automatically log gradients\n    wandb.watch(model, log_freq=100)\n    \n    if torch.cuda.is_available():\n        print(\"[INFO] Using GPU: {}\\n\".format(torch.cuda.get_device_name()))\n    \n    start = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_epoch_loss = np.inf\n    history = defaultdict(list)\n    \n    for epoch in range(1, num_epochs + 1): \n        gc.collect()\n        train_epoch_loss = train_one_epoch(model, optimizer, scheduler, \n                                           dataloader=train_loader, \n                                           device=CONFIG['device'], epoch=epoch)\n        \n        val_epoch_loss = valid_one_epoch(model, valid_loader, device=CONFIG['device'], \n                                         epoch=epoch)\n    \n        history['Train Loss'].append(train_epoch_loss)\n        history['Valid Loss'].append(val_epoch_loss)\n        \n        # Log the metrics\n        wandb.log({\"Train Loss\": train_epoch_loss})\n        wandb.log({\"Valid Loss\": val_epoch_loss})\n        \n        # deep copy the model\n        if val_epoch_loss <= best_epoch_loss:\n            print(f\"{b_}Validation Loss Improved ({best_epoch_loss} ---> {val_epoch_loss})\")\n            best_epoch_loss = val_epoch_loss\n            run.summary[\"Best Loss\"] = best_epoch_loss\n            best_model_wts = copy.deepcopy(model.state_dict())\n            PATH = f\"Loss-Fold-{fold}.bin\"\n            torch.save(model.state_dict(), PATH)\n            # Save a model file from the current directory\n            print(f\"Model Saved{sr_}\")\n            \n        print()\n    \n    end = time.time()\n    time_elapsed = end - start\n    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 3600, (time_elapsed % 3600) \/\/ 60, (time_elapsed % 3600) % 60))\n    print(\"Best Loss: {:.4f}\".format(best_epoch_loss))\n    \n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    \n    return model, history","de567a4a":"def prepare_loaders(fold):\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    \n    train_dataset = JigsawDataset(df_train, tokenizer=CONFIG['tokenizer'], max_length=CONFIG['max_length'])\n    valid_dataset = JigsawDataset(df_valid, tokenizer=CONFIG['tokenizer'], max_length=CONFIG['max_length'])\n\n    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'], \n                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'], \n                              num_workers=2, shuffle=False, pin_memory=True)\n    \n    return train_loader, valid_loader","071cb7d2":"def fetch_scheduler(optimizer):\n    if CONFIG['scheduler'] == 'CosineAnnealingLR':\n        scheduler = lr_scheduler.CosineAnnealingLR(optimizer,T_max=CONFIG['T_max'], \n                                                   eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == 'CosineAnnealingWarmRestarts':\n        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer,T_0=CONFIG['T_0'], \n                                                             eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == None:\n        return None\n        \n    return scheduler","fe2d207e":"for fold in range(0, CONFIG['n_fold']):\n    print(f\"{y_}====== Fold: {fold} ======{sr_}\")\n    run = wandb.init(project='Jigsaw', \n                     config=CONFIG,\n                     job_type='Train',\n                     group=CONFIG['group'],\n                     tags=['roberta-base', f'{HASH_NAME}', 'margin-loss'],\n                     name=f'{HASH_NAME}-fold-{fold}',\n                     anonymous='must')\n    \n    # Create Dataloaders\n    train_loader, valid_loader = prepare_loaders(fold=fold)\n    \n    model = JigsawModel(CONFIG['model_name'])\n    model.to(CONFIG['device'])\n    \n    # Define Optimizer and Scheduler\n    optimizer = AdamW(model.parameters(), lr=CONFIG['learning_rate'], weight_decay=CONFIG['weight_decay'])\n    scheduler = fetch_scheduler(optimizer)\n    \n    model, history = run_training(model, optimizer, scheduler,\n                                  device=CONFIG['device'],\n                                  num_epochs=CONFIG['epochs'],\n                                  fold=fold)\n    \n    run.finish()\n    \n    del model, history, train_loader, valid_loader\n    _ = gc.collect()\n    print()","e226f9a2":"\u3053\u3053\u3067\u4e0a\u306e\u3088\u3046\u306b\u5b66\u7fd2\u3092\u9032\u3081\u3066\u3044\u308b.  \n\nreturn\u306bmodel\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u306f\u5927\u4e08\u592b\u306a\u306e\u304b...? \n","c72bc73b":"### Training Configuration ","18335b61":"# <span><h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Visualizations<\/h1><\/span>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\"><a href=\"https:\/\/wandb.ai\/dchanda\/Jigsaw\">View the Complete Dashboard Here \u2b95<\/a><\/span>","0e9607c1":"wandb\u306f\u51c4\u3044\u3093\u3060\u3088.\n\n<h2> \"Weights & Biases\" <\/h2>\n\nWeights & Biases (W&B) is a set of machine learning tools that helps you build better models faster. <strong>Kaggle competitions require fast-paced model development and evaluation<\/strong>. There are a lot of components: exploring the training data, training different models, combining trained models in different combinations (ensembling), and so on.<\/span>\n\n- \u23f3 Lots of components = Lots of places to go wrong = Lots of time spent debugging\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">W&B can be useful for Kaggle competition with it's lightweight and interoperable tools:<\/span>\n\n- Quickly track experiments\n- Version and iterate on datasets\n- Evaluate model performance\n- Reproduce models\n- Visualize results and spot regressions\n- Share findings with colleagues\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">To learn more about Weights and Biases check out this <strong><a href=\"https:\/\/www.kaggle.com\/ayuraj\/experiment-tracking-with-weights-and-biases\">kernel<\/a><\/strong>.<\/span>","825bf7a5":"# \u3053\u306enotebook\u3067\u3084\u308b\u3053\u3068\n\u3053\u308c\u306f,\u4eca\u516c\u958b\u3055\u308c\u3066\u3044\u308bcode\u306e\u3046\u3061\u6700\u3082score\u304c\u9ad8\u3044model\u306e\u6982\u8981\u3067\u3042\u308b.  \n\u3053\u3061\u3089\u306emodel\u3092\u7406\u89e3\u3059\u308b\u4e8b\u306b\u52aa\u3081\u308b.","247a9238":"![](https:\/\/i.imgur.com\/TSIUdfS.jpg)","4dc720b6":"## Set Seed for Reproducibility","2dd3cc46":"[roberta-base](https:\/\/huggingface.co\/roberta-base)\u306eURL\u306f\u3053\u3061\u3089.  \n\u5143\u8ad6\u6587\u306f[RoBERTa: A Robustly Optimized BERT Pretraining Approach](https:\/\/arxiv.org\/abs\/1907.11692)","59d8240e":"training,validation\u306e\u95a2\u6570\u3092\u5225\u3005\u306b\u7528\u610f\u3057\u3066\u5b9f\u88c5\u3059\u308b.","c35a3528":"<h1>Jigsaw Pytorch Starter<\\h1>","8c8b8c53":"## Create Model","28142292":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Start Training<\/span>","cc18fab4":"# [wandb](https:\/\/pypi.org\/project\/wandb\/)\u3063\u3066...?\n\nmodel\u751f\u6210\u306e\u904e\u7a0b\u3092\u53ef\u8996\u5316\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3067\u3042\u308b.\n\n[\u5b9f\u9a13\u7ba1\u7406\u30c4\u30fc\u30eb\u306ewandb\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\u4f7f\u3044\u3084\u3059\u3055\u306b\u611f\u52d5\uff01\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011](http:\/\/maruo51.com\/2020\/02\/17\/wandb\/)","2e2c5cac":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","07752a80":"<h1>Import Required Libraries \ud83d\udcda<\/h1>","75598b6c":"## Run Training","4793ad08":"\u3053\u3053\u3067,train_one_epoch\u306e\u5909\u66f4\u306fmodel\u306b\u9069\u5fdc\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u8b0e...","03a71dfa":"# kaggle_secrets \u3063\u3066...?\n\n[How to: Use secrets safely on Kaggle | Kaggle on YouTube](https:\/\/www.youtube.com\/watch?v=6gkLPC14_tI)\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b.\n\n\u304a\u305d\u3089\u304fnotebook\u4e0a\u306bapi\u306ecode\u3092\u66f8\u304b\u306a\u304f\u3066\u6e08\u3080\u305f\u3081,secret\u60c5\u5831\u304c\u5b88\u3089\u308c\u308b\u72b6\u6cc1\u3068\u306a\u308b.","392bb8e8":"<h2>Install Required Libraries<\/h2><\/span>","0d7ab8d3":"## Dataset Class","ab9c4fa9":"## Read the Data \ud83d\udcd6","e15ac3a8":"[roberta-base](https:\/\/huggingface.co\/roberta-base)","1a72829c":"## Training Function","c0aa0096":"[SystemRandom](https:\/\/docs.python.org\/ja\/3\/library\/random.html#random.SystemRandom)  \n(seed\u304c\u7121\u8996\u3055\u308c\u308brandom)","efd6cb0d":"## Create Folds","7c5039af":"### Validation Function","4326053e":"### Each experiments are grouped together using the hash-value","948c75cd":"# \u81ea\u5206\u304c\u3042\u307e\u308a\u898b\u306a\u304b\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7d39\u4ecb\n\n1. [lr_scheduler](https:\/\/pytorch.org\/docs\/stable\/optim.html) : \u3053\u308c\u3067\u5b66\u7fd2\u7387\u3092\u9069\u5207\u306b\u8abf\u7bc0\u3057\u3066\u304f\u308c\u308b\u305d\u3046.\u7a2e\u985e\u306f\u69d8\u3005\u3067\u3042\u308b\u304cepoch\u56de\u6570\u306b\u3088\u3063\u3066\u8abf\u7bc0\u3059\u308b\u3082\u306e\u306a\u3069\u304c\u3042\u308b.\n\n[\u30b9\u30fc\u30d1\u30fc\u521d\u5fc3\u8005\u304b\u3089\u306f\u3058\u3081\u308bDeep Learning Scheduler](https:\/\/wonderfuru.com\/scheduler\/)\n\n2. [defaultdict](https:\/\/docs.python.org\/ja\/3.6\/library\/collections.html) : \u5b58\u5728\u3057\u306a\u3044key\u306b\u5bfe\u3057\u3066\u306e\u521d\u671f\u5316\u3092\u7c21\u5358\u306b\u884c\u3048\u308bdictionary\n\n[Python defaultdict \u306e\u4f7f\u3044\u65b9](https:\/\/qiita.com\/xza\/items\/72a1b07fcf64d1f4bdb7)\n\n3. [colorama](https:\/\/pypi.org\/project\/colorama\/) : terminal\u306e\u8272\u3092\u5909\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3063\u307d\u3044\u3002\n\n[Python colorama \u8272\u30e1\u30e2\uff08Cmder\u74b0\u5883\uff09](https:\/\/qiita.com\/ymdymd\/items\/83aca4134c59b0228659)\n\n","2d6cbca4":"## Loss Function\n\n![](https:\/\/i.imgur.com\/qYwVt8V.jpg)\n\n### Check the official documentation <a href=\"https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.MarginRankingLoss.html\">here<\/a>"}}