{"cell_type":{"afd30023":"code","8a20eb50":"code","cf17ea71":"code","3e8cae4e":"code","e93fbcd6":"code","8a4f2c6d":"code","1da4f552":"code","73ee2f57":"code","f3520bcc":"code","f077397c":"code","c8a23585":"code","b4c63aee":"code","ac8a8162":"code","13fb7d3c":"code","71f9722e":"code","605ba4e0":"code","ef3e1005":"code","c3001449":"markdown","c047e7d2":"markdown","aef9b86a":"markdown","7131ab1c":"markdown","01696dc8":"markdown","659a2911":"markdown","43635533":"markdown","72a6c9cb":"markdown","4882c417":"markdown","34ad0a09":"markdown","1dbb4aa5":"markdown","6f85bc25":"markdown","4cc1a55d":"markdown","3e50be1e":"markdown","0377ca41":"markdown","ee432ab3":"markdown","384b64b8":"markdown","41b9d24a":"markdown","44d07914":"markdown","068d90b1":"markdown","774fb928":"markdown","be28f79c":"markdown"},"source":{"afd30023":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8a20eb50":"data=pd.read_csv(\"\/kaggle\/input\/insurance\/insurance.csv\")\ndata.head()","cf17ea71":"data.isnull().sum()","3e8cae4e":"for col in data.columns:\n    print(data[col].value_counts())","e93fbcd6":"smoker={\n    'yes':1,\n    'no':0\n}\n\nregion={\n    'southwest':1,\n    'southeast':2,\n    'northeast':3,\n    'northwest':4\n}\ngender={\n    'male':1,\n    'female':2\n}\n\ndata['smoker']=data['smoker'].map(smoker)\ndata['region']=data['region'].map(region)\ndata['sex']=data['sex'].map(gender)","8a4f2c6d":"colors=[\"#31DFA2\",\"#58D68D\",\"#49c99e\",\"#45B39D\",\"#138D75\",\"#167856\"]","1da4f552":"spearman_corr=data.corr(method='spearman') # spearman for finding non linear dependencies\nspearman_heatmap = sns.heatmap(spearman_corr)\nplt.sca(spearman_heatmap)\nplt.title(\"Spearman Non-Linear Correlation\")","73ee2f57":"# finding the distribution graph forage \nsns.distplot(data['age'], color = colors[0])","f3520bcc":"# finding unique values in age column \nage_slot=data['age'].unique()\n\n# using two dictionaries one for smoker and anotther for non-smoker\nsmoker={}\nnonsmoker={}\n\n# collecting data about charges for each age value for both smoker and non-smoker\nfor slot in age_slot :\n    \n    # for smoker age vs charge with min , max and mean\n    s_min_charge = data[(data['age']==slot) & (data['smoker']==1)][\"charges\"].min()\n    s_max_charge = data[(data['age']==slot) & (data['smoker']==1)][\"charges\"].max()\n    s_mean_charge = data[(data['age']==slot) & (data['smoker']==1)][\"charges\"].mean()\n\n    # for non-smoker age vs charge with min , max and mean\n    ns_min_charge = data[(data['age']==slot) & (data['smoker']==0)][\"charges\"].min()\n    ns_max_charge = data[(data['age']==slot) & (data['smoker']==0)][\"charges\"].max()\n    ns_mean_charge = data[(data['age']==slot) & (data['smoker']==0)][\"charges\"].mean()\n    \n    smoker[slot]=[s_min_charge,s_max_charge,s_mean_charge]\n    nonsmoker[slot]=[ns_min_charge,ns_max_charge,ns_mean_charge]\n    \n# plotting graphs for both , total 6 graphs are plotted\nfig, axs = plt.subplots(3, 2)\nfig.set_size_inches(20, 15)\n\naxs[0][0].bar(smoker.keys(),[ls[0] for ls in smoker.values()],color=colors[0])\naxs[0][0].set_ylabel('Charges', fontsize=14)\naxs[0][0].set_title('Smoker min Charge', fontsize=16)\n\naxs[0][1].bar(smoker.keys(),[ls[0] for ls in nonsmoker.values()],color=colors[0])\naxs[0][1].set_ylabel('Charges', fontsize=14)\naxs[0][1].set_title('Non-Smoker min Charge', fontsize=16)\n\naxs[1][0].bar(smoker.keys(),[ls[1] for ls in smoker.values()],color=colors[2])\naxs[1][0].set_ylabel('Charges', fontsize=14)\naxs[1][0].set_title('Smoker max Charge', fontsize=16)\n\naxs[1][1].bar(smoker.keys(),[ls[1] for ls in nonsmoker.values()],color=colors[2])\naxs[1][1].set_ylabel('Charges', fontsize=14)\naxs[1][1].set_title('Non-Smoker max Charge', fontsize=16)\n\naxs[2][0].bar(smoker.keys(),[ls[2] for ls in smoker.values()],color=colors[3])\naxs[2][0].set_xlabel('Age', fontsize=14)\naxs[2][0].set_ylabel('Charges', fontsize=14)\naxs[2][0].set_title('Non-Smoker mean Charge', fontsize=16)\n\naxs[2][1].bar(smoker.keys(),[ls[2] for ls in nonsmoker.values()],color=colors[3])\naxs[2][1].set_xlabel('Age', fontsize=14)\naxs[2][1].set_ylabel('Charges', fontsize=14)\naxs[2][1].set_title('Non-Smoker mean Charge', fontsize=16)\n\nfig.suptitle('Smoker vs Non-Smoker', fontsize=20)\nplt.show()\n","f077397c":"underweight = data[(data['bmi']<=18.5)][\"charges\"]\nhealthy = data[(data['bmi']>=18.5) & (data['bmi']<=24.9)][\"charges\"]\noverweight = data[(data['bmi']>=25) & (data['bmi']<=29.9)][\"charges\"]\nobese = data[(data['bmi']>=30)][\"charges\"]\n\nfig, axs = plt.subplots(2, 2)\nfig.set_size_inches(20, 15)\n\nsns.distplot(underweight , ax=axs[0][0] , color=colors[0])\naxs[0][0].set_title('Underweight', fontsize=16)\n\nsns.distplot(healthy , ax=axs[0][1] , color=colors[1])\naxs[0][1].set_title('Healthy', fontsize=16)\n\nsns.distplot(overweight , ax=axs[1][0] , color=colors[2])\naxs[1][0].set_title('Overweight', fontsize=16)\n\nsns.distplot(obese , ax=axs[1][1] , color=colors[4])\naxs[1][1].set_title('Obese', fontsize=16)\n\nfig.suptitle('BMI vs Charges', fontsize=20)\nplt.show()","c8a23585":"# children = data['children'].unique() # 6 unique values\n\nfig, axs = plt.subplots(3, 2)\nfig.set_size_inches(20, 15)\n\nnum_child=0\n\nfor i in range(3):\n    \n    for j in range(2):\n\n        sns.distplot(data[ (data['children'] == num_child) ][\"charges\"], ax = axs[i][j] , color = colors[num_child] )\n        axs[i][j].set_title('Number of children : '+ str(num_child), fontsize=16)\n        num_child+= 1\n\nfig.suptitle('Number of Children vs Charges', fontsize=20)\nplt.show()","b4c63aee":"data[ (data['children'] == 5) ]","ac8a8162":"#region = data['region'].unique() # 4 unique values\n\nregion_string = ['Southwest', 'Southeast', 'Northeast', 'Northwest']\n\nfig, axs = plt.subplots(2, 2)\nfig.set_size_inches(20, 15)\n\nregion=1\n\nfor i in range(2):\n    \n    for j in range(2):\n\n        sns.distplot(data[ (data['region'] == region) ][\"charges\"], ax = axs[i][j] , color = colors[region] )\n        axs[i][j].set_title('Region : '+ str(region_string[region-1]), fontsize=16)\n        region+= 1\n\nfig.suptitle('Region vs Charges', fontsize=20)\nplt.show()","13fb7d3c":"# importing all the necessary libraries\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_classification","71f9722e":"X = data.drop(['charges'], axis = 1) # independent attributes\nY = data.charges # target or dependent attribute\n\nx_train, x_test, y_train, y_test = train_test_split(X,Y)","605ba4e0":"# linear model\nlinear=LinearRegression()\nlinear.fit(x_train, y_train)\n\n# decision tree regressor\ndecision_tree = DecisionTreeRegressor(random_state=0)\ndecision_tree.fit(x_train, y_train)\n\n# random forest regressor\nrandom_forest = RandomForestRegressor(max_depth=2, random_state=0)\nrandom_forest.fit(x_train, y_train)\n\n# printing all the prediction results\nprint(\"Linear Regressor Score : \", linear.score(x_test,y_test))\nprint(\"Decision Tree Regressor Score : \", decision_tree.score(x_test,y_test))\nprint(\"Random Forest Regressor : \", random_forest.score(x_test,y_test))\n","ef3e1005":"# polynomial features for regression\nquad = PolynomialFeatures (degree = 2)\nx_quad = quad.fit_transform(X)\nX_train,X_test,Y_train,Y_test = train_test_split(x_quad,Y, random_state = 0)\npoly_linear = LinearRegression().fit(X_train,Y_train)\n\nprint(\"Polynomial Linear Regressor : \", poly_linear.score(X_test,Y_test))","c3001449":"Trying all the models to determine the best regression model.","c047e7d2":"Finding if there is any null values in the csv","aef9b86a":"Next we will plot correlation graph to find interdependent features. We will use Spearman's correlation method. Spearman shows non linear dependenceies which Pearson can't.","7131ab1c":"# Region vs Charges","01696dc8":"So the dataset doesn't contain any null values. Now let's check the content of each column for outliers and datatypes. ","659a2911":"I am also defining some colors which I am going to use in the graphs.","43635533":"From the above graph, we can see that age and smoker has a strong correlation with charges. Going to examine it by finding minimum, maximum and average charges for all age groups","72a6c9cb":"The disribution shows that , people with 5 children pays less than other people. Let's examine further it.","4882c417":"**Conclusion :** From the graph , its evident that obese people are paying more than other weight categories. These people have BMI more than 30.\n\n***\n","34ad0a09":"** Conclusion : ** All the regions are asking for almost same charges","1dbb4aa5":"# Factors affecting medical charges\n\nHey Everyone !! Let's explore the factors affecting medical charges and see if we find something interesting. \n","6f85bc25":"Reading the dataset first and printing the first five rows","4cc1a55d":"Seems like polynomial features with linear regression gives the best accuracy 88.49 %. Thank you !! \n\n# \ud83d\ude00\ud83d\ude01","3e50be1e":"**Conclusion :** As we can see that charges for smoker are much higher than non-smoker.\n\n***\n\nApart from age and smoker, let's examine other columns too.","0377ca41":"Adding polynomial features to increaese the accuracy for linear model","ee432ab3":"# Selecting regression model for prediction","384b64b8":"## Age & Smoker vs Charges ##  ","41b9d24a":"I am going to map columns which contains string data to int so that it will be easy to use Regression models on the dataset. ","44d07914":"Big question .. How the hell a person can have 5 children at the age of 19 and 20 .. \n\n# \ud83e\udd14\ud83e\udd28 # \n\n??? Guess it's a data entry error.","068d90b1":"## Number of children vs Charges\n","774fb928":"Distributing the dependent and interdependent attributes ","be28f79c":"## Body Mass Index (BMI) vs Charges\n\nFollowing data shows how weight categories are distributed over BMI :\n\n1. BMI Less than 18.5 -> **Underweight**\n\n2. BMI between 18.5 and 24.9 -> **Healthy weight**\n\n3. BMI between 25 and 29.9 -> **Overweight**\n\n4. BMI more than 30 -> **Obese**"}}