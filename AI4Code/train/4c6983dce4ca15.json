{"cell_type":{"bae99440":"code","8853e98b":"code","63d1c06c":"code","60353167":"code","0cc13a5d":"code","7955ea44":"code","12e5cf6d":"code","40c65392":"code","de851e75":"code","83cdb321":"code","301b0e0b":"code","f50db996":"markdown","0e1dfe24":"markdown","3ebd8bcb":"markdown"},"source":{"bae99440":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8853e98b":"import pandas as pd\nimport numpy as np\nimport pickle\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report","63d1c06c":"#train \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n\nx_y_train=pd.read_csv(\"\/kaggle\/input\/article-classification-k-yw\/new_train1.csv\")\nx_y_train.head(3)","60353167":"#\ub370\uc774\ud130 \ubd84\ub9ac\nx_data=x_y_train[\"content\"]\ny_data=x_y_train[\"category\"]","0cc13a5d":"#data \ud655\uc778\nx_data.head(3)","7955ea44":"#test \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n\ntest=pd.read_csv(\"\/kaggle\/input\/article-classification-k-yw\/x_test1.csv\")\ntest=test[\"content\"] #\ud559\uc2b5\uc744 \uc704\ud5e4 series \ud615\ud0dc\ub85c \ub9cc\ub4e4\uc5b4\uc90c\ntest.head(3)","12e5cf6d":"clf = Pipeline([\n    ('vect', TfidfVectorizer()), \n    ('clf', MultinomialNB(alpha=0.01)),\n]) #sklearn \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 pipline\uc5d0 TfidfVectorizer(\ubb38\uc11c \uc804\ucc98\ub9ac\ud558\ub294 \ud074\ub798\uc2a4)\uc640 MultinomialNB\ub294 \ub098\uc774\ube0c\ubca0\uc774\uc988 \ubaa8\ud615 \ud074\ub798\uc2a4\uc911 \ub2e4\ud56d\ubd84\ud3ec \ub098\uc774\ube0c\ubca0\uc774\uc988\ub97c \ub123\uc5b4\uc11c \uc21c\uc11c\ub300\ub85c \ucc98\ub9ac\ud558\uac8c \ud568","40c65392":"model = clf.fit(x_data.values.astype(\"str\"), y_data) #fit\uc73c\ub85c \ubaa8\ub378 \ud559\uc2b5","de851e75":"y_pred = model.predict(test) #\uc608\uce21\uac12\n\ny_pred","83cdb321":"y_pred=pd.DataFrame(y_pred)\n\ny_pred=y_pred.rename(columns={0:\"category\"})\ny_pred","301b0e0b":"id=np.array([i for i in range(len(y_pred))]).reshape(-1,1).astype(int)\n\nresult=np.hstack([id,y_pred])\n\ndf=pd.DataFrame(result,columns=('id','category'))\ndf.head(3)","f50db996":"### \ubaa8\ub378 \ud559\uc2b5","0e1dfe24":"### \ub370\uc774\ud130 \uc800\uc7a5","3ebd8bcb":"# \ub370\uc774\ud130 \ub85c\ub4dc"}}