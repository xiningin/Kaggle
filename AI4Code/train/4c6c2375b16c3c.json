{"cell_type":{"7c2030db":"code","80c1146c":"code","71f2e616":"code","ddfb49bd":"code","d50a3972":"code","8c50120e":"code","b325ec33":"code","e0a8e7a9":"code","df90d1c7":"code","9934ac5b":"code","fa1fd6c7":"code","36857293":"code","ddcff9d0":"code","de23ce8b":"markdown"},"source":{"7c2030db":"import numpy as np \nimport pandas as pd \nimport nltk as nlp\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout","80c1146c":"# load data\ndata = pd.read_csv(\"..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv\")","71f2e616":"data.head()\n","ddfb49bd":"# convert spam to 1, not spam to 0\ndata[\"Category\"] = [1 if category == \"spam\" else 0 for category in data[\"Category\"]]","d50a3972":"data.head()","8c50120e":"description_list = []\nfor description in data[\"Message\"]:\n    description = re.sub(\"[^a-zA-Z]\",\" \",description)\n    description = description.lower()   \n    description = nlp.word_tokenize(description)\n    lemma = nlp.WordNetLemmatizer()\n    description = [ lemma.lemmatize(word) for word in description]\n    description = \" \".join(description)\n    description_list.append(description) ","b325ec33":"max_features = 3000 \ncount_vectorizer = CountVectorizer(max_features = max_features, stop_words = \"english\")\nsparce_matrix = count_vectorizer.fit_transform(description_list).toarray()\nprint(\"The most used {} words: {}\".format(max_features,count_vectorizer.get_feature_names()))","e0a8e7a9":"y = data.iloc[:,0].values   # male or female classes\nx = sparce_matrix\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.1, random_state = 42)","df90d1c7":"nb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"Gaussian NB model Accuracy: {}\".format(nb.score(x_test,y_test)))","9934ac5b":"lr = LogisticRegression(max_iter = 200)\nlr.fit(x_train,y_train)\nprint(\"Logistic Regression model Accuracy: {}\".format(lr.score(x_test,y_test)))","fa1fd6c7":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train,y_train)\nprint('KNN (K=3) model accuracy is: ',knn.score(x_test,y_test))","36857293":"x_train = x_train.reshape(5014,3000,1)\nx_test = x_test.reshape(558,3000,1)","ddcff9d0":"regressor = Sequential()\n\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units = 1))\n\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error',metrics=[\"accuracy\"])\n\nregressor.fit(x_test, y_test, epochs = 3, batch_size = 32)\n","de23ce8b":"# Objective\n\n<p>\n    <span style='font-family:Arial'>\n    Classify spam text message\n    <\/span>\n<\/p> "}}