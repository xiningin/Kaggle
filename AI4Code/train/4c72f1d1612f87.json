{"cell_type":{"fdaa25b2":"code","8358af41":"code","4c155d9e":"code","33a5d7ec":"code","38f694ef":"code","f464912d":"code","b31f247b":"code","1849eacc":"code","4572c270":"code","362038c5":"code","f446ba64":"code","2b8dd6cf":"code","034aa2d0":"code","13a1dd23":"code","894ef45c":"markdown","bfb0beb1":"markdown"},"source":{"fdaa25b2":"import tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport os","8358af41":"\ntrain_data = \"..\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/train\"\nvalid_data = \"..\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/valid\"\ntest_data = \"..\/input\/neu-metal-surface-defects-data\/NEU Metal Surface Defects Data\/test\"","4c155d9e":"# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n# Flow training images in batches of 10 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        train_data,\n        target_size=(200, 200),\n        batch_size=10,\n        class_mode='categorical')\n\n# Flow validation images in batches of 10 using test_datagen generator\nvalidation_generator = test_datagen.flow_from_directory(\n        valid_data,\n        target_size=(200, 200),\n        batch_size=10,\n        class_mode='categorical')","33a5d7ec":"class custom_callback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy') > 0.978 ):\n            print(\"\\nReached 97.8% accuracy so cancelling training!\")\n            self.model.stop_training = True ","38f694ef":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (2,2), activation='relu', input_shape=(200, 200, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (2,2), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (2,2), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(6, activation='softmax')\n])\n\nmodel.summary()","f464912d":"model.compile(loss='categorical_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\nprint('Compiled!')","b31f247b":"callbacks = custom_callback()\nhistory = model.fit(train_generator,\n        batch_size = 32,\n        epochs=15,\n        validation_data=validation_generator,\n        callbacks=[callbacks],\n        verbose=1, shuffle=True)","1849eacc":"import matplotlib.pyplot as plt \nplt.figure(1)  \n# summarize history for accuracy  \nplt.subplot(211)  \nplt.plot(history.history['accuracy'])  \nplt.plot(history.history['val_accuracy'])  \nplt.title('model accuracy')  \nplt.ylabel('accuracy')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \n   \n # summarize history for loss  \n   \nplt.subplot(212)  \nplt.plot(history.history['loss'])  \nplt.plot(history.history['val_loss'])  \nplt.title('model loss')  \nplt.ylabel('loss')  \nplt.xlabel('epoch')  \nplt.legend(['train', 'test'], loc='upper left')  \nplt.show()\n","4572c270":"# First, we are going to load the file names and their respective target labels into numpy array! \nfrom sklearn.datasets import load_files\nimport numpy as np\n\ntest_dir = test_data\n\ndef load_dataset(path):\n    data = load_files(path)\n    files = np.array(data['filenames'])\n    targets = np.array(data['target'])\n    target_labels = np.array(data['target_names'])\n    return files,targets,target_labels\n    \nx_test, y_test,target_labels = load_dataset(test_dir)","362038c5":"no_of_classes = len(np.unique(y_test))\nno_of_classes","f446ba64":"from keras.utils import np_utils\ny_test = np_utils.to_categorical(y_test,no_of_classes)\n","2b8dd6cf":"# We just have the file names in the x set. Let's load the images and convert them into array.\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img\n\ndef convert_image_to_array(files):\n    images_as_array=[]\n    for file in files:\n        # Convert to Numpy Array\n        images_as_array.append(img_to_array(load_img(file)))\n    return images_as_array\n\nx_test = np.array(convert_image_to_array(x_test))\nprint('Test set shape : ',x_test.shape)","034aa2d0":"x_test = x_test.astype('float32')\/255","13a1dd23":"# Let's visualize test prediction.\n\ny_pred = model.predict(x_test)\n\n# plot a raandom sample of test images, their predicted labels, and ground truth\nfig = plt.figure(figsize=(16, 9))\nfor i, idx in enumerate(np.random.choice(x_test.shape[0], size=16, replace=False)):\n    ax = fig.add_subplot(4, 4, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(x_test[idx]))\n    pred_idx = np.argmax(y_pred[idx])\n    true_idx = np.argmax(y_test[idx])\n    ax.set_title(\"{} ({})\".format(target_labels[pred_idx], target_labels[true_idx]),\n                 color=(\"green\" if pred_idx == true_idx else \"red\"))","894ef45c":"# Load the data from dataset","bfb0beb1":"## Import the required libraries\n"}}