{"cell_type":{"3471e94c":"code","5b4524fc":"code","8af88e66":"code","691cad13":"code","9919a9dd":"code","6a2d3d17":"code","6ba3eb5b":"code","f2907784":"code","e77c8371":"code","df62a38f":"code","54ecc2bd":"code","94468f09":"code","8a35320a":"code","3d627ac9":"code","e01b68c8":"code","cbbb629b":"code","4455e77e":"markdown","26015f6b":"markdown","b39c5c5b":"markdown","c326b5a7":"markdown","cb7a4e59":"markdown","542318f0":"markdown"},"source":{"3471e94c":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","5b4524fc":"import numpy as np\nimport pandas as pd\nimport re\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n#from nltk.corpus import stopwords\n#from nltk.stem.porter import PorterStemmer\n\nimport tokenization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8af88e66":"BASE_PATH = \"\/kaggle\/input\/nlp-getting-started\/\"","691cad13":"train =pd.read_csv(BASE_PATH + \"train.csv\")\ntrain.head()","9919a9dd":"test =pd.read_csv(BASE_PATH + \"test.csv\")\ntest.head()","6a2d3d17":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","6ba3eb5b":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","f2907784":"text = \"This is a Goat, and I am riding a Boat....\"\ntokenize_ = tokenizer.tokenize(text)\nprint(\"Text after tokenization: \")\nprint(tokenize_)\nmax_len = 25\n\ntext = tokenize_[:max_len-2]\ninput_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\npad_len = max_len - len(input_sequence)\n\nprint(\"After adding [CLS] and [SEP]: \")\nprint(input_sequence)\ntokens = tokenizer.convert_tokens_to_ids(input_sequence)\nprint(\"After converting Tokens to Id: \")\nprint(tokens)\ntokens += [0] * pad_len\nprint(\"tokens: \")\nprint(tokens)\npad_masks = [1] * len(input_sequence) + [0] * pad_len\nprint(\"Pad Masking: \")\nprint(pad_masks)\nsegment_ids = [0] * max_len\nprint(\"Segment Ids: \")\nprint(segment_ids)","e77c8371":"def pre_Process_data(documents, tokenizer, max_len=512):\n    '''\n    For preprocessing we have regularized, transformed each upper case into lower case, tokenized,\n    Normalized and remove stopwords. For normalization, we have used PorterStemmer. Porter stemmer transforms \n    a sentence from this \"love loving loved\" to this \"love love love\"\n    \n    '''\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    print(\"Pre-Processing the Data.........\\n\")\n    for data in documents:\n        review = re.sub('[^a-zA-Z]', ' ', data)\n        url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n        review = url.sub(r'',review)\n        html=re.compile(r'<.*?>')\n        review = html.sub(r'',review)\n        emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n        review = emoji_pattern.sub(r'',review)\n        text = tokenizer.tokenize(review)\n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","df62a38f":"input_word_id = Input(shape=(max_len,),dtype=tf.int32, name=\"input_word_ids\")\ninput_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\nsegment_id = Input(shape=(max_len,), dtype=tf.int32, name = \"segment_id\")\n\n_, sequence_output = bert_layer([input_word_id, input_mask, segment_id])\nclf_output = sequence_output[:, 0, :]\nmodel = Model(inputs=[input_word_id, input_mask, segment_id],outputs=clf_output)\nmodel.compile(Adam(lr=2e-5), loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()\nprint(\"shape of _ layer of BERT: \"+str(_.shape))\nprint(\"shape of last layer of BERT: \"+str(sequence_output.shape))","54ecc2bd":"def build_model(bert_layer, max_len=512):\n    input_word_id = Input(shape=(max_len,),dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_id = Input(shape=(max_len,), dtype=tf.int32, name = \"segment_id\")\n    \n    _, sequence_output = bert_layer([input_word_id, input_mask, segment_id])\n    clf_output = sequence_output[:, 0, :]\n    dense_layer1 = Dense(units=256,activation='relu')(clf_output)\n    dense_layer1 = Dropout(0.4)(dense_layer1)\n    dense_layer2 = Dense(units=128, activation='relu')(dense_layer1)\n    dense_layer2 = Dropout(0.4)(dense_layer2)\n    out = Dense(1, activation='sigmoid')(dense_layer2)\n    \n    model = Model(inputs=[input_word_id, input_mask, segment_id],outputs=out)\n    model.compile(Adam(lr=2e-5), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","94468f09":"train_input = pre_Process_data(train.text.values, tokenizer, max_len=260)\ntest_input = pre_Process_data(test.text.values, tokenizer, max_len=260)\ntrain_labels = train.target.values","8a35320a":"model = build_model(bert_layer, max_len=260)\nmodel.summary()","3d627ac9":"checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only=True)\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=10,\n    callbacks=[checkpoint],\n    batch_size=32\n)","e01b68c8":"submission = pd.read_csv(BASE_PATH + \"sample_submission.csv\")\nsubmission.head()","cbbb629b":"model.load_weights('model.h5')\ntest_pred = model.predict(test_input)\n\nsubmission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)\n\n","4455e77e":"## What is bert? (According to me)\nIn 2019 a model ruled over the entire NLP dimension and that is bert. Bert is not the solution to very NLP problem, but yes it does gives you a upper hand when it comes down to accuracy.<br>\nTo understand bert you need to understand certain basic terms sunch as bidirectional encoder, transformer, look-ahead masking, transformer, and attention making(both multihead and self) in the world of NLP.\nFor better understanding I would recommend you this article at Analytics Vidya(Link - https:\/\/www.analyticsvidhya.com\/blog\/2019\/06\/understanding-transformers-nlp-state-of-the-art-models\/)","26015f6b":"## This is the very first time I would be implementing BERT.\nThe Kernels which I fould very helpful for implementing BERT are given below. These kernels really helped to understand and implement the model. You might find my kernel almost similar to them, and I openly accent this fact that what ever is there in this kernel is 99% of their contribution.\n* [Disaster NLP: Keras BERT using TFHub](https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub) by [xhlulu](https:\/\/www.kaggle.com\/xhlulu)\n* [BERT for Humans: Tutorial+Baseline](https:\/\/www.kaggle.com\/abhinand05\/bert-for-humans-tutorial-baseline) by [Abhinand](https:\/\/www.kaggle.com\/abhinand05)","b39c5c5b":"## Thank You","c326b5a7":"On the Internet and kaggle there are various pre-trained model of bert in keras and pytorch. But, I choose these kernels because I found them easy to understand and implement. For understanding purpose,I basically prefered the kernel **BERT for Humans: Tutorial+Baseline**, but for implementation purpose I found the kernel **Disaster NLP: Keras BERT using TFHub** to be very useful. I would be explaining in sort but for detailed understanding plese visit their beautiful kernels.","cb7a4e59":"## Notes\nSo bert actually takes three inputs, first is id of tokenized text, second is padding ID and third is Segmentation ID. We have added the tokens \"[CLS]\" and \"[SEP]\" at the beginning and end of a sentence maker it easier for the model to understand the beginning and end of a senntence.<br>\nIn the cell below the entire pre-processing of text before feeding to the bert is explained with code.","542318f0":"## So, is this cheating....\nAs this is a competition, and I have used idea from someones kernel who are also in the same competition. So in one way, I won't deny the fact.....<br>\nBut I have struggled to find ways to implement bert. So many pre-trained models on Github, so many models and kernels on kaggle, but no starting point. I feel that many of you kagglers and non-kagglers have passed through this phase or maybe passing through this phase, to them this kernel would be very much helpful. This kernel would act as a great starting point for them."}}