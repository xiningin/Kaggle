{"cell_type":{"79947093":"code","fcd47f7f":"code","62a1a1a6":"code","8dc93679":"code","4e263700":"code","933dd22e":"code","f7e056e7":"code","307718b1":"code","99d0971a":"code","91bfbc27":"code","276091ff":"code","bd868baa":"code","78556475":"code","a48ce49f":"code","4b477ec2":"code","06ca160d":"code","30ab834a":"code","7b30306b":"code","27945031":"code","1076e2d8":"code","1e8b21fb":"markdown"},"source":{"79947093":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fcd47f7f":"import seaborn as sns\nimport wordcloud as wc\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set(style='dark')\nimport plotly.express as px\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","62a1a1a6":"df = pd.read_csv(\"..\/input\/all-space-missions-from-1957\/Space_Corrected.csv\")\ndf.head()","8dc93679":"df.info()","4e263700":"df.describe()\n","933dd22e":"df.shape","f7e056e7":"df.isna().sum()","307718b1":"#Extraction of Year\ndf['DateTime'] = pd.to_datetime(df['Datum'])\ndf['Year'] = df['DateTime'].apply(lambda datetime: datetime.year)\n\n#Extract the country of Launch\ndf['Country'] = df['Location'].apply(lambda location: location.split(\", \")[-1])\n\n\ndf.head(10)","99d0971a":"df.drop(['Unnamed: 0', 'Unnamed: 0.1', ' Rocket'], axis=1)","91bfbc27":"df['Month'] = df['DateTime'].apply(lambda datetime: datetime.month)","276091ff":"country = df.groupby('Country').count()['Detail'].sort_values(ascending=False).reset_index()\ncountry.rename(columns={\"Detail\":\"No of Launches\"}, inplace=True)\ncountry.head(10).style.background_gradient(cmap=\"Reds\").hide_index()","bd868baa":"plt.figure(figsize=(8,8))\nax = sns.countplot(y='Country', data=df, order = df['Country'].value_counts().index)\nax.set_xscale(\"log\")\nax.axes.set_title(\"Country Vs No of Launch(Log Scale)\", fontsize = 18)\nax.set_xlabel(\"No of launches\", fontsize = 16)\nax.set_ylabel(\"Country\",fontsize=16)\nax.tick_params(labelsize = 12)\nplt.tight_layout()\nplt.show()","78556475":"comp = df['Company Name'].value_counts().reset_index()\ncomp.columns = ['company','no of starts']\ncomp = comp.sort_values(['no of starts'])\nfig = px.bar(\n    comp, \n    x='no of starts', \n    y=\"company\", \n    orientation='h', \n    title='Number of launches by every company', \n    height=1000, \n    width=800\n)\nfig.show()","a48ce49f":"company_list = list(df['Company Name'].unique())\n\nnum_launch = []\n\nfor n in company_list:\n    num_launch.append(((df[df['Company Name']== n]).shape)[0])\n\n#convert the lists into data dict.    \ndata = {'Company': company_list, 'launchs': num_launch}\n\n#create dataframe\ndf_comp = pd.DataFrame(data=data, columns= ['Company', 'launchs'])","4b477ec2":"df_comp\nfig = px.treemap(df_comp.sort_values(by = 'launchs', ascending= False).reset_index(drop = True),\n                         path = ['Company'], values= 'launchs', height = 700,\n                         title = 'Number of launchs Company wise',\n                         color_discrete_sequence = px.colors.qualitative.Light24)\nfig.data[0].textinfo = 'label + text+ value'\n\nfig.show()","06ca160d":"location_list = list(df['Location'].unique())\n\nlaunch = []\n\nfor n in location_list:\n    launch.append(((df[df['Location']== n]).shape)[0])\n\ndata_l = {'Company': location_list, 'launchs': launch}\n\n\ndf_loc = pd.DataFrame(data=data_l, columns= ['location', 'launchs'])","30ab834a":"fig = px.pie(df_loc, values=df_loc['launchs'], names=df_loc.index,\n             title='location and Their Lauches Ratio in The World',\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(\n    template='plotly_white'\n)\nfig.show()","7b30306b":"#Status va launches\nsts = df['Status Rocket'].value_counts().reset_index()\nsts.columns = ['status', 'count']\nfig = px.pie(\n    sts, \n    values='count', \n    names=\"status\", \n    title='Rocket status', \n    width=500, \n    height=500\n)\nfig.show()","27945031":"# Mission status vs Count\nplt.figure(figsize=(6,6))\nax = sns.countplot(y=\"Status Mission\", data=df, order=df[\"Status Mission\"].value_counts().index, palette=\"ocean_r\")\nax.set_xscale(\"log\")\nax.axes.set_title(\"Mission Status vs. Count\",fontsize=18)\nax.set_xlabel(\"Count\",fontsize=16)\nax.set_ylabel(\"Mission Status\",fontsize=16)\nax.tick_params(labelsize=12)\nplt.tight_layout()\nplt.show()\n","1076e2d8":"#yearwise launches\ndate= df.groupby('Year').count()['Detail'].reset_index()\nplt.figure(figsize=(20,6))\nb=sns.barplot(x='Year', y='Detail', data=date)\nplt.ylabel('no of launches')\nplt.title(' No of launches per year')\n_=b.set_xticklabels(b.get_xticklabels(), rotation=90, horizontalalignment='right')","1e8b21fb":"Rocket Lauch Data Analysis inspired by the data of 1950s!!"}}