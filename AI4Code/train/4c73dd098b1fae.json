{"cell_type":{"5ab6634e":"code","7457aa2b":"code","074a74e3":"code","8bba1080":"code","6148f2b1":"code","2e0a93ef":"code","7ee0d260":"code","0ab2fcb7":"code","eb07f3f3":"code","babc51ee":"code","cb57eac9":"code","1f7491db":"code","4c699001":"code","87428db3":"code","c104985f":"code","69700ab7":"code","01e62d2d":"code","57f8b562":"code","f781d7b3":"code","909e3584":"code","6afe562a":"code","ad8a23bd":"code","ec629bbe":"code","03a3fb67":"code","20555b4c":"code","8a11b1a4":"code","b1a01a6c":"code","4afb8c7f":"code","188153dd":"code","5a3d01d8":"code","94fa7f35":"code","8d86b5ef":"code","60b879f3":"code","06631126":"code","eff846af":"code","d6b63dbe":"code","0fae9ed0":"code","2e561849":"code","ca091852":"code","77509f4a":"code","3354a12c":"code","889edfd2":"code","4a42d93f":"code","d5ed9a05":"code","1c2c9341":"code","3739e25f":"code","8e773145":"code","986a8dbf":"code","a9b427ce":"code","c11b8af0":"code","733fb49a":"code","c157aa8c":"code","fbc3b1ed":"code","5db897f7":"code","a1439586":"code","35e65dd2":"code","986fbf58":"code","3d4072eb":"code","d4408a63":"code","249e633f":"code","4dc153ee":"code","de8ff216":"code","16109fc0":"code","8723b381":"markdown","0873e950":"markdown","d05037a1":"markdown","c3208c5a":"markdown","bd6290f8":"markdown","4782c1d8":"markdown","88faabd6":"markdown","043df373":"markdown","9f478247":"markdown","9dfd5895":"markdown","2dda2826":"markdown","78b96385":"markdown","d632d89b":"markdown","94af7952":"markdown","08180cb7":"markdown","9f752ec7":"markdown","dea2a613":"markdown","ed241e88":"markdown","47e94210":"markdown","e2e6c3a5":"markdown","8b44bcc4":"markdown","f172c9a2":"markdown","283aba13":"markdown","667ae071":"markdown","9b5e5e1e":"markdown","748999fa":"markdown"},"source":{"5ab6634e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\ntrain_data=pd.read_csv(\"..\/input\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/test.csv\")\ntrain_data.head()\n\n# Any results you write to the current directory are saved as output.","7457aa2b":"test_data.head() #for displaying first five datas","074a74e3":"train_data.info()  # gives information about all the columns, about its data types and no of observation","8bba1080":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()","6148f2b1":"train_data.describe()# Gives the descriptive statistics of all the columns","2e0a93ef":"test_data.describe()","7ee0d260":"sns.countplot(x='Survived', data=train_data);","0ab2fcb7":"train_data.Survived.sum()","eb07f3f3":"train_data.Survived.count()","babc51ee":"print(train_data.Survived.sum()\/train_data.Survived.count())","cb57eac9":"train_data.groupby(['Survived','Sex'])['Survived'].count()","1f7491db":"sns.catplot(x='Sex', col='Survived', kind='count', data=train_data);","4c699001":"print(\"percentage of women survived: \" ,train_data[train_data.Sex == 'female'].Survived.sum()\/train_data[train_data.Sex == 'female'].Survived.count())\nprint(\"percentage of men survived:   \" , train_data[train_data.Sex == 'male'].Survived.sum()\/train_data[train_data.Sex == 'male'].Survived.count())","87428db3":"pd.crosstab(train_data.Pclass, train_data.Survived, margins=True).style.background_gradient(cmap='autumn_r')","c104985f":"print(\"% of survivals in\") \nprint(\"Pclass=1 : \", train_data.Survived[train_data.Pclass == 1].sum()\/train_data[train_data.Pclass == 1].Survived.count())\nprint(\"Pclass=2 : \", train_data.Survived[train_data.Pclass == 2].sum()\/train_data[train_data.Pclass == 2].Survived.count())\nprint(\"Pclass=3 : \", train_data.Survived[train_data.Pclass == 3].sum()\/train_data[train_data.Pclass == 3].Survived.count())","69700ab7":"pd.crosstab([train_data.Sex, train_data.Survived], train_data.Pclass, margins=True).style.background_gradient(cmap='autumn_r')\n","01e62d2d":"pd.crosstab([train_data.Survived], [train_data.Sex, train_data.Pclass, train_data.Embarked], margins=True)","57f8b562":"for df in [train_data, test_data]:\n    df['Age_bin']=np.nan\n    for i in range(8,0,-1):\n        df.loc[ df['Age'] <= i*10, 'Age_bin'] = i","f781d7b3":"print(train_data[['Age' , 'Age_bin']].head(10))","909e3584":"test_data['Survived'] = 0\ntest_data.loc[ (test_data.Sex == 'female'), 'Survived'] = 1\ntest_data.loc[ (test_data.Sex == 'female') & (test_data.Pclass == 3) & (test_data.Embarked == 'S') , 'Survived'] = 0\n","6afe562a":"sns.distplot(train_data['Fare'])\nplt.show()","ad8a23bd":"for df in [train_data, test_data]:\n    df['Fare_bin']=np.nan\n    for i in range(12,0,-1):\n        df.loc[ df['Fare'] <= i*50, 'Fare_bin'] = i","ec629bbe":"sns.catplot('Fare_bin','Survived', col='Pclass' , row = 'Sex', kind='point', data=train_data)\nplt.show()","03a3fb67":"pd.crosstab([train_data.Sex, train_data.Survived], [train_data.Fare_bin, train_data.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","20555b4c":"pd.crosstab([train_data.Sex, train_data.Survived], [train_data.Age_bin, train_data.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","8a11b1a4":"pd.crosstab([train_data.Sex, train_data.Survived], [train_data.SibSp, train_data.Pclass], margins=True).style.background_gradient(cmap='autumn_r')","b1a01a6c":"test_data.loc[ (test_data.Sex == 'female') & (test_data.SibSp > 7) , 'Survived'] = 0","4afb8c7f":"sns.catplot('Parch','Survived', col='Pclass' , row = 'Sex', kind='point', data=train_data)\nplt.show()","188153dd":"\ntest_data.loc[ (test_data.Sex == 'female') & (test_data.SibSp > 7) , 'Survived'] = 0\n","5a3d01d8":"test_data.drop(['Survived'],axis=1,inplace=True)","94fa7f35":"train1 = train_data.copy()\ntest1 = test_data.copy()","8d86b5ef":"train1 = pd.get_dummies(train1, columns=['Sex', 'Embarked', 'Pclass'], drop_first=True)\n","60b879f3":"train1.head()","06631126":"train1.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age_bin', 'Fare_bin'],axis=1,inplace=True)","eff846af":"train1.head()","d6b63dbe":"train1.dropna(inplace=True)\n","0fae9ed0":"train1.info()","2e561849":"passenger_id = test1['PassengerId']\ntest1 = pd.get_dummies(test1, columns=['Sex', 'Embarked', 'Pclass'], drop_first=True)\ntest1.drop(['PassengerId','Name','Ticket', 'Cabin', 'Age_bin', 'Fare_bin'],axis=1,inplace=True)","ca091852":"test1.head()","77509f4a":"test1.info()","3354a12c":"correlation = train1.corr()\n\nf,ax = plt.subplots(figsize=(9,6))\nsns.heatmap(correlation, annot = True, linewidths=1.5 , fmt = '.2f',ax=ax)\nplt.show()","889edfd2":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(train1.drop('Survived',axis=1))\nscaled_features = scaler.transform(train1.drop('Survived',axis=1))\ntrain1.sc = pd.DataFrame(scaled_features, columns=train1.columns[:-1])","4a42d93f":"test1.info()","d5ed9a05":"test1.fillna(test1.mean(), inplace=True)\nscaled_features = scaler.transform(test1)\ntest1.sc = pd.DataFrame(scaled_features, columns=test1.columns)","1c2c9341":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train1.drop('Survived',axis=1), train1['Survived'], test_size=0.30, random_state=101)\nX_train_sc, X_test_sc, y_train_sc, y_test_sc = train_test_split(train1.sc,train1['Survived'], test_size=0.30, random_state=101)  ","3739e25f":"X_train_all = train1.drop('Survived',axis=1)\ny_train_all = train1['Survived']\nX_test_all = test1\n","8e773145":"X_test_all.fillna(X_test_all.mean(), inplace=True)\n","986a8dbf":"X_test_all.head()","a9b427ce":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\npred_logreg = logreg.predict(X_test)","c11b8af0":"pred_logreg","733fb49a":"from sklearn.metrics import accuracy_score, classification_report, confusion_matrix","c157aa8c":"print(confusion_matrix(y_test, pred_logreg))\nprint(classification_report(y_test, pred_logreg))\nprint(accuracy_score(y_test, pred_logreg))","fbc3b1ed":"logreg.fit(X_train_all, y_train_all) #Train for all data\npred_all_logreg = logreg.predict(X_test_all)","5db897f7":"sub_logreg = pd.DataFrame()\nsub_logreg['PassengerId'] = test_data['PassengerId']\nsub_logreg['Survived'] = pred_all_logreg","a1439586":"from sklearn.naive_bayes import GaussianNB\ngnb=GaussianNB()\ngnb.fit(X_train,y_train)\npred_gnb = gnb.predict(X_test)\nprint(confusion_matrix(y_test, pred_gnb))\nprint(classification_report(y_test, pred_gnb))\nprint(accuracy_score(y_test, pred_gnb))","35e65dd2":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(X_train_sc,y_train_sc)","986fbf58":"pred_knn = knn.predict(X_test)\nprint(confusion_matrix(y_test, pred_knn))\nprint(classification_report(y_test, pred_knn))\nprint(accuracy_score(y_test, pred_knn))","3d4072eb":"knn.fit(X_train_all, y_train_all)\npred_all_knn = knn.predict(X_test_all)\n","d4408a63":"sub_knn = pd.DataFrame()\nsub_knn['PassengerId'] = test_data['PassengerId']\nsub_knn['Survived'] = pred_all_knn","249e633f":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)","4dc153ee":"pred_dtree = dtree.predict(X_test)\nprint(classification_report(y_test,pred_dtree))\nprint(accuracy_score(y_test, pred_dtree))","de8ff216":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(max_depth=6, max_features=7)\nrfc.fit(X_train, y_train)","16109fc0":"pred_rfc = rfc.predict(X_test)\nprint(confusion_matrix(y_test, pred_rfc))\nprint(classification_report(y_test, pred_rfc))\nprint(accuracy_score(y_test, pred_rfc))","8723b381":"**Titanic solve problem********","0873e950":"**Now we don't need Passenger id, Name, Ticket, Cabin, Age bin, Fare bin,**","d05037a1":"1) **Logistic Regression**","c3208c5a":"**    Female passengers survived more than the male passengers**","bd6290f8":"**Now Fitting the model using scikit learn library**","4782c1d8":"**2) Gaussian Naive Bayes**","88faabd6":"**From this we can infer that women of class 1 and class 2 survived most and nearly all men of class 1 and class 2 died.**","043df373":"342 in training set","9f478247":"**Get Dummies to convert categorical data into Numerical data**","9dfd5895":"**Standard scalar for test data**","2dda2826":"38.3 percentage of people survived ","78b96385":"**From this matrix we can infer that survived vs age,survived vs survived vs sex_male and survived vs pclass_3  are negatively correlated**","d632d89b":"**survival percentage of women is more than the men.**","94af7952":"**from this we can inferred that the survival rate decreases with the class.******","08180cb7":"**train and test data split,  70% for training and 30% for testing**","9f752ec7":"**first for unscaled data**","dea2a613":"**Now Data Wrangling.** \ni am copying the train_data and test_data in train1 and test1","ed241e88":"**We have deleted all the nan values**","47e94210":"**3) KNN Classifier**","e2e6c3a5":"**Standard scalar for training data**","8b44bcc4":"**4) Decision Tree classifier**","f172c9a2":"**for scaled data**","283aba13":"**submitting the data**","667ae071":"**5) Random forest classifier**","9b5e5e1e":"Here it is shown that total 342 passenger survived out of 891","748999fa":"**Correlation matrix**"}}