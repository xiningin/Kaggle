{"cell_type":{"29e49375":"code","3950ddce":"code","5ac5431d":"code","7d65d4e1":"code","3467a676":"code","3aeb6581":"code","8c93c6b3":"code","e76e6394":"code","445da2f9":"code","0525e627":"code","e4bf11dd":"code","445f59aa":"code","d188363c":"code","643f837b":"code","590a1913":"code","f7a93fdb":"code","b14a064a":"code","6de2919d":"code","86906733":"code","0e6afe23":"code","d5bdfcdb":"code","ae6b8c47":"code","40a1134b":"code","827a90f7":"code","dd45884d":"code","6dc9ad11":"code","ffb092c3":"code","3d85c333":"code","1dcdfc39":"code","cb58b8e8":"code","a386aefc":"code","0e3c5890":"code","c86cc9ec":"code","30102aeb":"code","1864fcbd":"code","f7fb12d7":"markdown","5d811e11":"markdown"},"source":{"29e49375":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n\nimport tensorflow as tf\nimport cv2\nimport os\nimport glob\nimport keras\nfrom tensorflow.keras.preprocessing import image\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import Dense,Activation,GlobalAveragePooling2D,Dropout,Flatten,Conv2D,MaxPooling2D\nfrom keras.layers import BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport tensorflow\ntf.random.set_seed(100)","3950ddce":"train_path = \"..\/input\/covid-data\/train\/train\"\ntest_path = \"..\/input\/covid-data\/test\/test-2\"\nSIZE =224","5ac5431d":"train_images = []\ntrain_labels =[]\nfor i in glob.glob( f\"{train_path}\/*\"):\n    label = i.split(\"\\\\\")[-1]\n    for j in glob.glob(os.path.join(i,\"*.png\")):\n        img = cv2.imread(j,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(SIZE,SIZE))\n        img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n        train_images.append(img)\n        train_labels.append(label)\n        \ntrain_images = np.array(train_images)\ntrain_labels = np.array(train_labels)","7d65d4e1":"test_images = []\ntest_labels =[]\nfor i in glob.glob( f\"{test_path}\/*\"):\n    label = i.split(\"\\\\\")[-1]\n    for j  in glob.glob(os.path.join(i,\"*.png\")):\n        img = cv2.imread(j,cv2.IMREAD_COLOR)\n        img = cv2.resize(img,(SIZE,SIZE))\n        img = cv2.cvtColor(img,cv2.COLOR_RGB2BGR)\n        test_images.append(img)\n        test_labels.append(label)\ntest_images = np.array(test_images)\ntest_labels = np.array(test_labels)","3467a676":"# from tensorflow.keras.applications.resnet50 import ResNet50\n# conv_base = ResNet50(weights='imagenet',include_top =False,\n#                   input_shape=(SIZE,SIZE,3))","3aeb6581":"# for layer in conv_base.layers:\n#   layer.trainable =False\n# conv_base.summary()","8c93c6b3":"# feature_map_model = Model(inputs=conv_base.input, outputs=conv_base.get_layer('conv5_block3_out').output)","e76e6394":"train_features = np.load('..\/input\/covid-resnet50-embeds\/train_feats.npy')\ntest_features = np.load('..\/input\/covid-resnet50-embeds\/test_feats.npy')","445da2f9":"# train_features = feature_map_model.predict(train_images)\n# test_features = feature_map_model.predict(test_images)\nprint(np.max(train_features))\nprint(train_features.mean())\nprint(np.max(test_features))\nprint(test_features.mean())\nprint(train_features.std())\nprint(test_features.std())","0525e627":"train_features.shape","e4bf11dd":"# np.save('train_feats.npy',train_features)","445f59aa":"# np.save('test_feats.npy',test_features)","d188363c":"# print(train_features.resize(3201,100352))\n# print(test_features.resize(1147,100352))\n# # from sklearn.preprocessing import RobustScaler\n# # scaler = RobustScaler()\n# # # # transform data\n# # train_features_scaled = scaler.fit_transform(train_features)\n# # test_features_scaled = scaler.transform(test_features)\n\n# from sklearn.preprocessing import StandardScaler\n# scaler = StandardScaler()\n# # # # transform data\n# train_features_scaled = scaler.fit_transform(train_features)\n# test_features_scaled = scaler.transform(test_features)\n\n\n\n# print(train_features_scaled.mean())\n# print(test_features_scaled.mean())\n\n\n","643f837b":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(test_labels)\ntest_labels_encoded = le.transform(test_labels)\nle.fit(train_labels)\ntrain_labels_encoded = le.transform(train_labels)","590a1913":"from sklearn.utils.class_weight import compute_class_weight\nweights = compute_class_weight('balanced', np.unique(train_labels_encoded),train_labels_encoded)\ncw = dict(zip( np.unique(train_labels_encoded), weights))\nprint(cw)","f7a93fdb":"train_features.shape","b14a064a":"test_features2 = test_features.reshape(-1,49,2048)\ntrain_features2 = train_features.reshape(-1,49,2048)","6de2919d":"# model = Sequential()\n# model.add(Flatten(input_shape = (7,7,2048)))\n# model.add(Dropout(0.3))\n# model.add(Dense(2048, activation='relu'))\n# model.add(Dropout(0.3))\n# model.add(Dense(1024, activation='relu'))\n# model.add(Dropout(0.3))\n# model.add(Dense(512, activation='relu'))\n# model.add(Dropout(0.3))\n# model.add(Dense(256, activation='relu'))\n# model.add(Dropout(0.3))\n# model.add(Dense(128, activation='relu'))\n# model.add(Dropout(0.3))\n# model.add(Dense(64, activation='relu'))\n# model.add(Dropout(0.3))\n\n# model.add(Dense(1, activation='sigmoid'))\n# model.summary()\n\n","86906733":"from keras.layers import Dense, Flatten, Convolution1D, Dropout\n","0e6afe23":"model = Sequential()\n# model.add(Flatten(input_shape = (7,7,2048)))\nmodel.add(keras.layers.Input(shape=train_features2.shape[-2:]))\nmodel.add(keras.layers.Conv1D(filters=1024, kernel_size=4, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\nmodel.add(Flatten())\n\n\nmodel.add(Dense(2048, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\n# model.add(Dropout(0.3))\nmodel.add(Dropout(0.3))\n\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\n# model.add(Dropout(0.3))\nmodel.add(Dropout(0.3))\n\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\nmodel.add(Dropout(0.3))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\nmodel.add(Dropout(0.3))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\nmodel.add(Dropout(0.3))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\n\n\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\n","d5bdfcdb":"tf.keras.utils.plot_model(model, show_shapes=True)","ae6b8c47":"from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau\nearly = EarlyStopping(monitor=\"val_loss\", mode= \"min\", patience=7)\nlearning_rate_reduction = ReduceLROnPlateau(monitor=\"val_loss\", patience =2, verbose=1,factor=0.2, min_learning_rate=0.000001)\ncallbacks_list = [ early,learning_rate_reduction]\n# Compile model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n  \n\n# history = model.fit(train_features,train_labels_encoded, batch_size =100 , callbacks= callbacks_list , class_weight = cw , epochs=100, validation_data= (test_features,test_labels_encoded))\nhistory = model.fit(train_features2,train_labels_encoded, batch_size =100 , callbacks= callbacks_list , class_weight = cw , epochs=100, validation_data= (test_features2,test_labels_encoded))\n\n","40a1134b":"# pd.DataFrame(model.history.history).plot()","827a90f7":"np.mean(train_features)","dd45884d":"np.max(train_features)","6dc9ad11":"from sklearn.metrics import roc_curve, roc_auc_score\npreds  = model.predict(test_features2)\n# roc curve for models\n\n\n","ffb092c3":"# import decimal\n# from sklearn.metrics import roc_curve, roc_auc_score\n# from sklearn import metrics\n# def float_range(start, stop , step):\n#   while start < stop:\n#     yield float(start)\n#     start += decimal.Decimal(step)\n\n\n\n\n\n# for x in list(float_range(0, 1, '0.01')):\n\n#   predictions = preds.copy()\n#   predictions[predictions <= x] = 0\n#   predictions[predictions > x] = 1\n#   print(roc_auc_score(test_labels_encoded, predictions),x) \n\nfpr1, tpr1, thresh1 = roc_curve(test_labels_encoded,preds)","3d85c333":"predictions = preds.copy()\npredictions[predictions <= 0.13] = 0\npredictions[predictions > 0.13] = 1\n","1dcdfc39":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_true=test_labels_encoded , y_pred=predictions,target_names =['Covid','Normal']))\n\n","cb58b8e8":"random_probs = [0 for i in range(len(test_labels_encoded))]\np_fpr, p_tpr, _ = roc_curve(test_labels_encoded, random_probs, pos_label=1)","a386aefc":"from sklearn.metrics import classification_report,confusion_matrix\ncm = pd.DataFrame(data=confusion_matrix(test_labels_encoded, predictions, labels=[0, 1]),index=[\"Actual Covid\", \"Actual Normal\"],\ncolumns=[\"Predicted Covid\", \"Predicted Normal\"])\nimport seaborn as sns\nsns.heatmap(cm,annot=True,fmt=\"d\")","0e3c5890":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\nt = f.suptitle('Resnet50 transfer_learning Performance', fontsize=12)\nf.subplots_adjust(top=0.85, wspace=0.3)\n\nax1.plot( history.history['accuracy'], label='Train Accuracy')\nax1.plot( history.history['val_accuracy'], label='Validation Accuracy')\n\nax1.set_ylabel('Accuracy Value')\nax1.set_xlabel('Epoch')\nax1.set_title('Accuracy')\nl1 = ax1.legend(loc=\"best\")\n\nax2.plot( history.history['loss'], label='Train Loss')\nax2.plot( history.history['val_loss'], label='Validation Loss')\nax2.set_ylabel('Loss Value')\nax2.set_xlabel('Epoch')\nax2.set_title('Loss')\nl2 = ax2.legend(loc=\"best\")","c86cc9ec":" #plot roc curves\nplt.plot(fpr1, tpr1, marker='.',color='red',label = \"Resnet50 + ANN\")\n# plt.plot(fpr2, tpr2, marker='.',color='BLACK',label = \"Resnet50 + RANDOM_FOREST\")\n# plt.plot(fpr3, tpr3, marker='.',color='violet',label = \"Resnet50 + Logistic_regression\", linewidth =3)\n# plt.plot(fpr4, tpr4, marker='.',color='green',label = \"Resnet50 + KNN \")\nplt.plot(p_fpr, p_tpr, linestyle='--', color='blue',label = \"No_skill\")\n\n# title\nplt.title('ROC curves ')\n# x label\nplt.xlabel('False Positive Rate')\n# y label\nplt.ylabel('True Positive rate')\n\nplt.legend(loc='best')\nplt.savefig('ROC',dpi=300)\nplt.show();\n","30102aeb":"auc = roc_auc_score(test_labels_encoded, preds)\nprint('AUC of \"RESNET50 + ANN_1\": %.4f' % auc)","1864fcbd":"train_images\/255","f7fb12d7":"---------------**RANDOM** **FOREST**---------------------------","5d811e11":"--------------------------------------**CUSTOMISED** **ANN**---------------------------------------------"}}