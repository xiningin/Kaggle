{"cell_type":{"02d03698":"code","658a134c":"code","52b0b9e8":"code","a4d76663":"code","47abd427":"code","7dee4e2e":"code","5873cb00":"code","5ae03855":"code","bba8f01e":"code","0cc45fda":"code","d651b4cc":"code","506fcf39":"code","a9f56a8b":"code","5191142a":"code","eb934a67":"code","98982520":"code","8708911b":"code","11b92131":"code","cc104555":"code","edf4865a":"code","91471fd8":"code","ac695ec2":"code","c9b03b8d":"code","779a3139":"code","d6c7c44c":"code","06217bbc":"code","ebd016ce":"code","be600e70":"code","96e64885":"code","49d32e88":"code","25348643":"code","eb15a6df":"code","464a4c22":"code","a8f7f1fa":"code","11779077":"code","e78cb29a":"code","c818d487":"code","68744de9":"code","bdaa0e5a":"code","aa81042f":"code","cf5f539a":"code","e2b3cb41":"code","bb13a238":"code","4fbd15d2":"code","f1c955d8":"code","d6fd6eaa":"code","b258be7f":"code","f5a92c27":"code","4cb7b187":"code","36fcfa96":"code","e64ad5fb":"code","7f540a93":"code","d92988c8":"code","c7b3d76c":"code","0e7d68e2":"code","be16ab94":"code","4b5b89f0":"code","734ccd49":"code","bf6c2003":"code","b689b210":"markdown","0b10959f":"markdown","aa193cbf":"markdown","b26bd200":"markdown","b9e649d3":"markdown","3b5a2865":"markdown","29e66b0b":"markdown","f6804cf2":"markdown","86ac41d5":"markdown","40701454":"markdown","55627b43":"markdown","277c7c06":"markdown","22e83f89":"markdown","c8d96303":"markdown","7b133163":"markdown","4f5b9363":"markdown","fe6836a1":"markdown","547884b2":"markdown","d6008d68":"markdown","b7cecac3":"markdown","83a25053":"markdown","2c67e651":"markdown","4bbd8fd7":"markdown","ff9c1236":"markdown","0ff51cb4":"markdown","001d798d":"markdown","63f8b7e7":"markdown","d8071162":"markdown","f740e67b":"markdown","f67b8995":"markdown","2b7aa65c":"markdown","00318a2e":"markdown","e9178682":"markdown","4e753f2b":"markdown","cfd35f5f":"markdown","7a0aa4a5":"markdown","7943da4e":"markdown","4c271877":"markdown","9f9b05b6":"markdown","98b69ddd":"markdown","6095e936":"markdown","b603cbfb":"markdown","a60cb0c4":"markdown","f27856d0":"markdown","8285cd25":"markdown","12993850":"markdown","d1e7b6c9":"markdown","a7b73938":"markdown","88ca9e8a":"markdown","6f11e69b":"markdown","66e8f885":"markdown","071b3ad8":"markdown","1a7c0a2f":"markdown","d423131c":"markdown","86d51e31":"markdown","b801fd18":"markdown","d2760728":"markdown","fe0707cf":"markdown","3d73270e":"markdown","2f6ed27d":"markdown","5c76ca2a":"markdown","8bcda121":"markdown","edc0c22c":"markdown","b94ce800":"markdown","c97b164c":"markdown","67b8529e":"markdown","6b49d0d4":"markdown","a5521fa7":"markdown","441688fa":"markdown","330633f8":"markdown"},"source":{"02d03698":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","658a134c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.offline import iplot\nimport plotly.graph_objs as go\nfrom plotly import tools","52b0b9e8":"df = pd.read_csv(\"\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\")","a4d76663":"df.head(3)","47abd427":"df.shape","7dee4e2e":"df.info()","5873cb00":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","5ae03855":"df.drop(['Unnamed: 0','Type'],axis=1, inplace=True)","bba8f01e":"netflix_movies_count = len(df[df['Netflix'] == 1].index)\nhulu_movies_count = len(df[df['Hulu'] == 1].index)\nprime_movies_count =len(df[df['Prime Video'] == 1].index)\ndisney_movies_count = len(df[df['Disney+'] == 1].index)","0cc45fda":"label=['Netflix','Hulu', 'Prime Video','Disney+']\ncount=[netflix_movies_count,hulu_movies_count,prime_movies_count,disney_movies_count]\nplatform = pd.DataFrame(\n    {'Platform': label,\n     'MovieCount': count,\n    })","d651b4cc":"fig = px.pie(platform,names='Platform', values='MovieCount',height=500,width=550)\nfig.update_traces(rotation=5, pull=[0.1,0.03,0.03,0.03,0.03],textinfo=\"percent+label\", title='Movie Count per platform')\nfig.show()","506fcf39":"yearly_movie_count = df.groupby('Year')['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})","a9f56a8b":"fig = px.line(yearly_movie_count, x='Year', y='MovieCount',width=600, height=300, template=\"plotly_dark\")\nfig.show()","5191142a":"Genre_count = df.groupby('Genres')['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\na=Genre_count.sort_values(by='MovieCount', ascending=False).head(20)\nb=a.sort_values(by='Genres', ascending=False).head(20)","eb934a67":"fig = px.bar(b, x=\"Genres\", y=\"MovieCount\",color='MovieCount',\n             width=600, height=500, \n             title='Genres which have a greater number of movies.',\n             template=\"plotly_dark\")\nfig.show()","98982520":"top_5_genres = ['Drama','Documentary','Comedy', 'Comedy,Drama','Horror']\ntable = df.loc[:,['Year','Genres','IMDb']]\ntable['AvgRating'] = table.groupby([table.Genres,table.Year])['IMDb'].transform('mean')\ntable.drop('IMDb', axis=1, inplace=True)\ntable = table[(table.Year>1995) & (table.Year<2020)]\ntable = table.loc[table['Genres'].isin(top_5_genres)]\ntable = table.sort_values('Year')","8708911b":"fig=px.bar(table,x='Genres', y='AvgRating', animation_frame='Year', \n           animation_group='Genres', color='Genres',height=500,width=700, hover_name='Genres', range_y=[0,10])\nfig.update_layout(showlegend=False)\nfig.show()","11b92131":"df['Country'] = df['Country'].str.split(',')\n\ndf = (df\n .set_index(['ID','Title','Year','Age', 'IMDb', 'Rotten Tomatoes', 'Netflix', 'Hulu',\n             'Prime Video', 'Disney+','Directors' ,'Genres','Language', 'Runtime'])['Country']\n .apply(pd.Series)\n .stack()\n .reset_index()\n .drop('level_14', axis=1)\n .rename(columns={0:'Country'}))","cc104555":"import pycountry\ndef do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n        return result[0].alpha_3\n    except:\n        return np.nan\ndf[\"country_code\"] = df[\"Country\"].apply(lambda country: do_fuzzy_search(country))","edf4865a":"df.to_csv('new.csv')","91471fd8":"df1 = pd.read_csv(\"new.csv\")\n","ac695ec2":"li = df1.groupby(['country_code','Country'])['IMDb'].mean().reset_index().rename(columns = {'Title':'MovieCount'})","c9b03b8d":"fig = px.choropleth(li, locations=\"country_code\",\n                    color=\"IMDb\", \n                    hover_name=\"Country\", \n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","779a3139":"a = df1.groupby(['country_code','Country'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})","d6c7c44c":"\ncolors=[[0, 'rgb(102,194,165)'], [0.05, 'rgb(102,194,165)'],\n              [0.15, 'rgb(171,221,164)'], [0.2, 'rgb(230,245,152)'],\n              [0.25, 'rgb(255,255,191)'], [0.35, 'rgb(254,224,139)'],\n              [0.45, 'rgb(253,174,97)'], [0.55, 'rgb(213,62,79)'], [1.0, 'rgb(158,1,66)']]\n\nplotmap = [ dict(\n        type = 'choropleth',\n        locations = a['Country'],\n        locationmode = 'country names',\n        z = a['MovieCount'],\n        text = a['Country'],\n        colorscale = colors,\n       \n        reversescale = False,\n        marker = dict(\n            line = dict (\n                color = 'rgb(102,194,165)',\n                width = 0.10\n            ) ),\n        colorbar = dict(\n            title = \"NUMBER OF MOVIES RELEASED IN DIFFERENT COUNTRIES\"),\n      ) ]\n\nlayout = dict(\n    title = \"\",\n    geo = dict(\n        showframe = True,\n        \n        showcoastlines = True,\n        showocean = True,\n        \n        oceancolor = '#26466D',\n        projection = dict(type = 'orthographic')\n    ),\n    height=700,\n    width=900\n)\n\nfig = dict( data=plotmap, layout= layout )\niplot(fig)","06217bbc":"lk=df.dropna()\nimport plotly.figure_factory as ff\nx = lk[\"Runtime\"]\nhist_data = [x]\ngroup_labels = ['Runtime'] # name of the dataset\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 200, 200)']\nfig = ff.create_distplot(hist_data, group_labels,colors=colors)\nfig.show()","ebd016ce":"age = df.groupby(['Age','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nage_year=age[age['Year']>=2015]\nfig = px.sunburst(age_year, path=['Age', 'Year', 'MovieCount'],width=600,height=450)\nfig.show()","be600e70":"df['Language'] = df['Language'].str.split(',')\n\ndf2 = (df\n .set_index(['ID','Title','Year','Age', 'IMDb', 'Rotten Tomatoes', 'Netflix', 'Hulu',\n             'Prime Video', 'Disney+','Directors' ,'Genres','Country', 'Runtime'])['Language']\n .apply(pd.Series)\n .stack()\n .reset_index()\n .drop('level_14', axis=1)\n .rename(columns={0:'language'}))\n","96e64885":"lang = df2.groupby(['language'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nthe=lang.sort_values(by='MovieCount',ascending=False).head(15)\n","49d32e88":"fig = px.bar(the, x=\"MovieCount\", y=\"language\", orientation='h',height=450,width=600)\nfig.show()","25348643":"age_count = df.groupby(['Age'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nac=age_count.sort_values(by='MovieCount',ascending=False)","eb15a6df":"fig = px.funnel_area(names=ac['Age'],\n                    values=ac['MovieCount'],\n                     height=500,width=500,\n                     color_discrete_sequence=px.colors.sequential.RdBu,\n                     template=\"plotly_dark\")\nfig.update_traces(textinfo=\"percent+label\", title='Movie Count per Age')\nfig.show()","464a4c22":"n = df1.groupby(['Directors'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})","a8f7f1fa":"jn=n.sort_values(by='MovieCount',ascending=False).head(15)","11779077":"\n\ndata = dict(\n    number=jn['MovieCount'],\n    stage=jn['Directors'])\nfig = px.funnel(data, x='number', y='stage',height=450,width=600)\nfig.show()","e78cb29a":"age_directors = df.groupby(['Age','Directors'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\n","c818d487":"age_13=age_directors[age_directors[\"Age\"]=='13+'].sort_values(by='MovieCount',ascending=False).head(10)\nage_16=age_directors[age_directors[\"Age\"]=='16+'].sort_values(by='MovieCount',ascending=False).head(10)\nage_18=age_directors[age_directors[\"Age\"]=='18+'].sort_values(by='MovieCount',ascending=False).head(10)\nage_7=age_directors[age_directors[\"Age\"]=='7+'].sort_values(by='MovieCount',ascending=False).head(10)\nage_all=age_directors[age_directors[\"Age\"]=='all'].sort_values(by='MovieCount',ascending=False).head(10)\n\nframes = [age_13,age_16,age_18,age_7,age_all]\n\nresult = pd.concat(frames)","68744de9":"fig = px.treemap(result, path=['Age', 'Directors','MovieCount'], values='MovieCount')\nfig.show()","bdaa0e5a":"b = df.groupby(['Age','Year'])['IMDb'].mean().reset_index().rename(columns = {'Title':'MovieCount'})\nb1=b.sort_values(by='IMDb',ascending=True)\n","aa81042f":"fig = px.area(b1, x=\"Year\", y=\"IMDb\", color=\"Age\",\n\t      line_group=\"Age\",height=400,width=700)\nfig.show()","cf5f539a":"netflix = df.groupby(['Netflix','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nnetflix_=netflix[netflix['Netflix']==1]\n\n\nhulu = df.groupby(['Hulu','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nhulu_= hulu[hulu['Hulu']==1]\n\n\nprime = df.groupby(['Prime Video','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nprime_=prime[prime['Prime Video']==1]\nprime_\n\ndisney = df.groupby(['Disney+','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\ndisney_=disney[disney['Disney+']==1]","e2b3cb41":"import plotly.graph_objects as go\n\nfig1 = go.Figure()\nfig1.add_trace(go.Scatter(x=netflix_['Year'], y=netflix_['MovieCount'],name='Netflix'))\nfig1.add_trace(go.Scatter(x=hulu_['Year'], y=hulu_['MovieCount'],name='Hulu'))\nfig1.add_trace(go.Scatter(x=prime_['Year'], y=prime_['MovieCount'],name='Prime'))\nfig1.add_trace(go.Scatter(x=disney_['Year'], y=disney_['MovieCount'],name='Disney'))\nfig1.show()","bb13a238":"\nGA = df.groupby(['Genres','Age'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\n","4fbd15d2":"fig = go.Figure(data=[go.Mesh3d(x=GA['Genres'], y=GA['Age'], z=GA['MovieCount'], color='lightpink', opacity=0.50)])\nfig.show()","f1c955d8":"dv= df.groupby(['Genres','Netflix','Hulu','Prime Video','Disney+'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})","d6fd6eaa":"th = ['Drama','Comedy','Horror']\ntab = dv.loc[dv['Genres'].isin(th)]\npd.crosstab(tab['Genres'], [tab['Netflix'], tab['Prime Video']], rownames=['Genres'], colnames=['Netflix', 'Prime Video'])\n","b258be7f":"from statsmodels.graphics.mosaicplot import mosaic\nmosaic(tab,['Genres','Netflix','Prime Video'],gap=0.01,axes_label=True)\nplt.show()","f5a92c27":"fig = px.scatter_matrix(df, dimensions=['IMDb','Rotten Tomatoes','Runtime'],width=600,height=450)\nfig.show()","4cb7b187":"df1 = pd.read_csv(\"new.csv\")\n\ndf1['Language'] = df1['Language'].str.split(',')\n\ndf3 = (df1\n .set_index(['ID','Title','Year','Age', 'IMDb', 'Rotten Tomatoes', 'Netflix', 'Hulu',\n             'Prime Video', 'Disney+','Directors' ,'Genres','Country', 'Runtime'])['Language']\n .apply(pd.Series)\n .stack()\n .reset_index()\n .drop('level_14', axis=1)\n .rename(columns={0:'language'}))","36fcfa96":"er= df3.groupby(['language','Country'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nert=er[er['MovieCount']>=60]","e64ad5fb":"fig = px.bar(ert, x=\"Country\", y=\"MovieCount\",\n             color='language', barmode='group',\n             width=700,\n    height=400,animation_frame='Country')\nfig.show()","7f540a93":"pri = df.groupby(['Prime Video','Year','Age'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\npri_=pri[pri['Prime Video']==1]\nfig = px.scatter(pri_.query(\"Year>2014\"), x=\"Year\", y=\"Age\",\n\t         size=\"MovieCount\", color=\"MovieCount\", color_discrete_sequence=px.colors.sequential.RdBu,title='Age Wise Movie count on Prime Video',\n                 hover_name=\"MovieCount\", log_x=True, size_max=60,height=500,width=700)\n\nfig.show()","d92988c8":"year_Direc = df.groupby(['Directors','Year'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nyear_2015=year_Direc[year_Direc[\"Year\"] >=2015]","c7b3d76c":"fig = px.scatter_3d(year_2015, x='Year', y='Directors', z='MovieCount', size='MovieCount', color='MovieCount',\n                    hover_data=['MovieCount'])\nfig.update_layout(scene_zaxis_type=\"log\")\nfig.show()","0e7d68e2":"data_hulu = df[df['Hulu']==1]\ndata_netflix=df[df['Netflix']==1]\ndata_prime=df[df['Prime Video']==1]\ndata_disney=df[df['Disney+']==1]\n\ndef get_imdb_count_per_service(d):\n    # This function returns the number of movies in a service having IMDb score greater than 7.5\n    num_of_movies = 0\n    for key,value in d.items():\n        if key>=7:\n            num_of_movies+=value\n    return num_of_movies\n\nimdb_prime_count = get_imdb_count_per_service(dict(data_prime['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_hulu_count = get_imdb_count_per_service(dict(data_hulu['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_disey_count = get_imdb_count_per_service(dict(data_disney['IMDb'].value_counts().sort_values(ascending=False)))\nimdb_netflix_count = get_imdb_count_per_service(dict(data_netflix['IMDb'].value_counts().sort_values(ascending=False)))\n\nimdb_scores = pd.DataFrame({'Streaming Service': [\"Prime Video\", \"Hulu\",\"Disney+\",\"NetFlix\"],\n                                    'IMDb Score' :[imdb_prime_count, imdb_hulu_count, imdb_disey_count, imdb_netflix_count] })","be16ab94":"fig = px.pie(imdb_scores, values='IMDb Score', names='Streaming Service',height=450,width=500,\n             color_discrete_sequence=px.colors.sequential.RdBu,hole=.5, title=\" platforms with movies having IMDb rating >= 7\")\nfig.show()","4b5b89f0":"df10 = df.groupby(['Age','Year','Netflix','Hulu','Prime Video','Disney+'])['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})\nfig = px.parallel_categories(df10, color=\"MovieCount\")\nfig.show()\n","734ccd49":"top_movies=df[df['IMDb']>=9][['Title','Directors']]","bf6c2003":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \",\".join(review for review in top_movies.Title)\nwordcloud = WordCloud(max_words=50,collocations=False,background_color=\"black\").generate(text)\nplt.figure(figsize=(10,5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(20, 20))\nplt.show()","b689b210":"\n**Inference:**\n\n\u2022\tSomalia region was observed to have the highest average rating of 8.2\n\n\u2022\tKorea presented the lowest average rating of 4.7.\n\n","0b10959f":"**Type: Mosaic plot**\n\nMosaic plot is a graphical display of the cell frequencies of a contingency table in which the area of boxes of the plot are proportional to the cell frequencies of the contingency table.","aa193cbf":"**Inference:** \n    \n\u2022\tAnimation frame was used to visualize large amount of data.\n\n\u2022\tUnited states: nearly 10k movies were released in English ,305 movies in French,430 movies in Spanish, and 114 movies in Russian.\n","b26bd200":"**Type: Multiple line plot**\n\nMultiple line graph, there are two or more lines in the graph connecting two or more sets of data points. The independent variable is listed along the horizontal, or x, axis and the quantity or value of the data is listed along the vertical, or y, axis.\n","b9e649d3":"**Inference:**\n    \n\u2022\tThe distribution of runtime was found to be normal.\n\n\u2022\tMost of the movies were found to have duration of 90 minutes.\n\n\u2022\tDuration was observed to vary from a range of 11 minutes to 259 minutes.\n\n","3b5a2865":"## **2. Total Number of movies released each year.**","29e66b0b":"**22) PARALLEL CATEGORIES OF AGE VS PLATFORMS**","f6804cf2":"**Type: Scatter matrix**\n\nType of multiple scatterplots to determine the correlation (if any) between a series of variables.","86ac41d5":"**Inference:** \n\n\u2022\tUnder the age group of 18+, 233 movies were released under the genre comedy.\n\n\u2022\tUnder the age group of 18+ ,217 movies were released under the genre Drama.\n\n","40701454":"## **4. Average IMDb rating of top 5 genres**","55627b43":"**Inference:**\n    \n\u2022\tThe age group 18+ was observed to have the highest number of movies.\n\n\u2022\tThe age group 7+ follows with nearly 19.9% of the movies.\n\n\u2022\tThe age group 13+ and \u201call\u201d was found to have nearly 17.1% and 11.5% of the movies respectively.\n\n\u2022\tThe age group 16+ was observed to have the least number of movies i.e., 4.3%.\n\n","277c7c06":"**Inference:**\n\n\u2022\tHighest number of movies were found to be released in English, which is nearly 13k movies.\n\n\u2022\tSecond highest was found to be Spanish with about 872 movies.\n\n\u2022\tPortuguese had the least number of movies which is 108.\n\n","22e83f89":"### Data visualization","c8d96303":"**Importing all the necessary libraries**","7b133163":"## **6. Movie count in different countries**\n","4f5b9363":"## **15.Genres with respect to the age group**","fe6836a1":"\n**Type: Horizontal bar chart.**\n\nHorizontal bar graphs represent the data horizontally. It is a graph whose bars are drawn horizontally. The data categories are shown on the vertical axis and the data values are shown on the horizontal axis.\n","547884b2":"**Type: Donut Chart**\n\n\n\nDonut Chart is a variation on a Pie chart except it has a round hole in the centre which makes it look like a donut, hence the name.\n","d6008d68":"## **9.Number of movies released in different languages.**","b7cecac3":"**Type: Pie chart** \n\nThis type of graph represents the data in the circular graph. The slices of pie show the relative size of the data. A pie chart requires a list of categorical variables and the numerical variables.\n\n\n","83a25053":"**Type: Grouped bar chart \u2013 using animation frame**\n\nA grouped bar chart extends the bar chart, plotting numeric values for levels of two categorical variables instead of one. Bars are grouped by position for levels of one categorical variable, with colour indicating the secondary category level within each group. ","2c67e651":"**Type: 3d choropleth map**\n\nIt is of the type orthographic, which is basically 3d choropleth map.\n","4bbd8fd7":"**Type: 3D Scatter plot**\n\nLike the 2D scatter plot, the 3D scatter plot also plots individual data in three-dimensional space.","ff9c1236":"**Inference:**\n    \n\u2022\tThe age group \u201cALL\u201d had the highest average rating (i.e., 8) during the year \u2013 1983.\n\n\u2022\tThe age group \u201c7+\u201d had the highest average rating (i.e., 6.69) during the year \u2013 1984\n\n\u2022\tThe age group \u201c13+\u201d had the highest average rating (i.e., 6.15) during the year \u2013 1994\n\n\u2022\tThe age group \u201c16+\u201d had the highest average rating (i.e.,7.2 ) during the year \u2013 2003\n\n\u2022\tThe age group \u201c18+\u201d had the highest average rating (i.e., 6.004) during the year \u2013 1981\n","0ff51cb4":"**Missing Values** ","001d798d":"## **3. Genres which have a greater number of movies.** ","63f8b7e7":"**Inference:** \n\n\u2022\tThe top 5 genres were observed to be drama, comedy, comedy+drama, horror and documentary.\n\n\u2022\tAverage rating for each genre can be seen with respect to the year in the animation presented above.\n","d8071162":"## **11.Top 15 Directors who released the greatest number of movies**\n","f740e67b":"**23)Movies that has the highest rating greater than 9.3**\n","f67b8995":"**Type: Bar chart \/ Column chart \u2013 vertical** \n\nBar chart represents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. A vertical bar chart is sometimes called a column chart.\n\n\n\n","2b7aa65c":"## **7. Distribution of Runtime**\n","00318a2e":"**Type: Line chart** \n\nLine graphs are used to track changes over short and long periods of time. A line chart uses points connected by line segments from left to right to demonstrate changes in value.","e9178682":"## 20)\t Directors who released a greater number of movies in a single year:\n\n\n","4e753f2b":"## 17)\t Relationship between IMDb, Runtime and Rotten Tomatoes:\n\n\n","cfd35f5f":"**Type: Area plot**\n\nArea Graphs are Line Graphs but with the area below the line filled in with a certain colour or texture. An area plot displays quantitative data visually.\n","7a0aa4a5":"**Type: 3D mesh plot** \n\nMesh 3D plot draws a 3D set of triangles with vertices given by x, y and z.\nThe size of the triangle represents the proportion of the data.\n","7943da4e":"## **1. Number of movies present on different platform.**","4c271877":"**Type:  Choropleth map** \n\nChoropleth map is a thematic map where geographic regions are coloured, shaded, or patterned in relation to a value. This type of map is particularly useful when visualizing a variable and how it changes across defined regions.\n","9f9b05b6":"**Inference:** \n    \n\u2022\tTotal number of movies released in the different region of the world can be observed from the choropleth map above. \n\n\u2022\tUSA was observed to be the country that released the highest number of movies.\n\n\n","98b69ddd":"## **13.Which age group movie has Average highest IMDb rating in each year**\n","6095e936":"**Inference:**\n\n\u2022\tHierarchy structure: Age group -> Directors -> Movie Count \n\n\u2022\tThe size of 18+ group\u2019s rectangle is larger compared to the other group\u2019s. Therefor a greater number of movies were released under the age group 18+.\n\n\u2022\tUnder 18+ age group Cheh Chang has released a total of 18 movies which is the highest.\n\n\u2022\tDetails about the other age groups can be inferred based on the size of the rectangle in the chart above.\n.\n","b603cbfb":"**dropping irrelavent columns**","a60cb0c4":"**Inference**\n\nNetflix: in the year\t2017 ,\t569 movies were released \n    \nHulu: in the year\t2018,\t158 movies were released\n    \nPrime Video: in the year\t2013\t,811 movies were released\n    \nDisney+: in the year\t2003\t,25 movies were released\n","f27856d0":"**Inference:**\n\n\u2022\tThe genre \u201cdrama\u201d was observed to have the most number of movies which is a total of 1314.\n\n\u2022\t The genre of\u201d documentary\u201d was found to have the second most number of movies.\n\n\u2022\tFollowing Documentary, the comedy and horror genres were found to have the highest numbers.\n\n","8285cd25":"**Inference:**\n    \n\u2022\tMost number of movies were found to be released under the age group of 18+\n\n\u2022\tAbout 270 movies were released in the year 2017 under the age group of 18+.\n\n","12993850":"**Type:  Distplot**\n\nThe distplot represents the univariate distribution of data i.e., data distribution of a variable against the density distribution.\n","d1e7b6c9":"**CREATING A NEW DATA SET WITH COUNTRY CODE**","a7b73938":"## **8. Number of movies present in specific age group with respect to year**\n","88ca9e8a":"## 16)Number of movies in Netflix and prime based on comedy, drama, horror genres:\n\n\n","6f11e69b":"## 10 **Number of movies present in different age groups**","66e8f885":"**Inference:**\n\n\u2022\tIt is observed that: \n\n\u2022\tIn the year 2018 Raul Campos and Jan Suter released 13 movies.\n\n\u2022\tIn the year 2017 Jay Chapman and Marcus Raboy released 6 movies.\n\n\u2022\tIn the year 2016 Rayan Polito released 5 movies.\n","071b3ad8":"**Type: Funnel Area**\n\nEach row of the Data Frame is represented as a stage of the funnel.\nEach stage is illustrated as a percentage of the total of all values.\n","1a7c0a2f":"**Type: Funnel plot** \n\nFunnel charts are mostly used for representing a sequential process, to compare and see how the numbers change through the stages.\n","d423131c":"### Reading the data set","86d51e31":"\n**Type: Bar chart with animation frame.**\n\nTo visualize large number of data animation frame was used\n\n\n\n","b801fd18":"## 21) Streaming platforms with movies having IMDb rating >=7.5","d2760728":"\n**Inference:** \n\n\u2022\tPrime video was observed to have the highest number of high rated movies.\n\n\u2022\tDisney+ was found to have the least number of high rated movies.\n","fe0707cf":"## 18)\t Number of Movies based on different language in each country:\n\n\n","3d73270e":"## **12.Highest number of movies released by directors in different age group** \n","2f6ed27d":"**Inference:**\n    \n\u2022\tJay Chapman was found to have released the highest number of movies i.e., 36 movies.\n\n\u2022\t Samuel Rich, Gabriella Fritz and Werner Herzog have released the least  number of movies which is 18.\n\n","5c76ca2a":"**Inference:**\n\n\u2022\tMore than 70% of the content was observed to be on prime.\n\n\u2022\tNetflix was observed to have 20.5% contents, standing second.\n\n\u2022\tHulu follows with the percentage of 5.2.\n\n\u2022\tThe least amount of contents was found on Disney+ , which is less than 4%.\n","8bcda121":"**Type: Bubble Chart**\n\nBubble chart is a scatter plot in which a third dimension of the data is shown through the size of markers. The size of the markers shows the proportion of the data.","edc0c22c":"**Type: Sunburst plot** \n\nSunburst plots visualize hierarchical data spanning outwards radially from root to leaves. The root starts from the centre and children are added to the outer rings.\n","b94ce800":"## **5. Average rating in different countries**","c97b164c":"**Inference:** \n\n\u2022\tIt is observed from the size of marker that the 18+ age group has the highest number of movies.\n\n\u2022\tThe age group \u2018all\u2019 has the least number of movies.\n\n\u2022\tIn the year 2015, nearly 135 movies were released under the age group 18+.\n\n\u2022\tThe year with the least number of movies released was observed to be  2020.\n\n","67b8529e":"## **14.Content released on different platform over the years.**\n","6b49d0d4":"### Data exploration ","a5521fa7":"## 19)\t Age wise Movie count on Prime video over the years:\n\n\n","441688fa":"**Type: Tree map**\n\nThe tree map chart is used for representing hierarchical data in a tree-like structure. The size of the rectangle is s proportional to the corresponding data value.\n","330633f8":"**Inference:**\n\n\u2022\tData ranges from the year 1902 to 2020\n\n\u2022\tMore number of movies were released in the year 2017, which is a total of 1401 movies.\n\n\u2022\tFrom the year 1995, a significant raise in the number of movies released was observed.\n\n"}}