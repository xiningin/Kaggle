{"cell_type":{"1275dcde":"code","bf9175b9":"code","399f9de2":"code","13fe65e4":"code","83845811":"code","3c7e428c":"code","0cde7dc0":"code","bfcd7d5c":"code","1a98376d":"code","21b2ed69":"code","8b999f72":"code","52fbd1d9":"code","7b4c8b90":"code","6dfd92bf":"code","c94801ad":"code","94b953d2":"code","dddb61c9":"code","d461768f":"code","1baa4624":"code","98734f35":"code","a49d0379":"code","742d653a":"code","119a53db":"code","6dffaf56":"code","fe76e6a9":"code","d18cf4a1":"code","74254e2d":"code","bc9dfda1":"code","35145368":"code","bf894e34":"code","83594f10":"code","f069d8ce":"markdown","f47379f8":"markdown","375de767":"markdown","c281dce1":"markdown","439cfe6a":"markdown","9af11a80":"markdown","3ef9d757":"markdown","25990876":"markdown","7464d23a":"markdown","daa23b6d":"markdown","d41aeb62":"markdown","9d5d6c13":"markdown","01e83db2":"markdown","6c3b92ad":"markdown","854127d1":"markdown"},"source":{"1275dcde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bf9175b9":"data = pd.read_csv('..\/input\/AirQualityUCI_req.csv')\ndata.index = pd.DatetimeIndex(data.Date, dayfirst=True).strftime('%Y-%m-%d')\ndata = data.drop(['Date' ], 1)\ncols = data.columns\ndata = data[data[cols] > 0]\ndata = data.fillna(method='ffill')\ndata.head()","399f9de2":"daily_data = data.groupby(data.index).mean()\ndaily_data.head()","13fe65e4":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sb\nsb.set(style=\"darkgrid\")","83845811":"sb.clustermap(daily_data)","3c7e428c":"cols = ['NO2(GT)', 'C6H6(GT)', 'PT08.S4(NO2)', 'PT08.S3(NOx)', 'PT08.S5(O3)']\nsb.clustermap(daily_data[cols])","0cde7dc0":"g = sb.jointplot(\"C6H6(GT)\", \"NO2(GT)\", data = daily_data, kind=\"reg\")","bfcd7d5c":"g = sb.jointplot(\"PT08.S4(NO2)\", \"NO2(GT)\", data = daily_data, kind=\"reg\")","1a98376d":"g = sb.jointplot(\"PT08.S3(NOx)\", \"NO2(GT)\", data = daily_data, kind=\"reg\")","21b2ed69":"g = sb.jointplot(\"PT08.S5(O3)\", \"NO2(GT)\", data = daily_data, kind=\"reg\")","8b999f72":"cols = ['NO2(GT)', 'C6H6(GT)', 'PT08.S4(NO2)']\nsb.pairplot(daily_data[cols])","52fbd1d9":"set1 = ['NO2(GT)']\nset2 = ['C6H6(GT)' ]\nset3 = ['PT08.S4(NO2)']","7b4c8b90":"sb.lineplot(data=daily_data[set1], linewidth=2.5)","6dfd92bf":"sb.lineplot(data=daily_data[set2], linewidth=2.5)","c94801ad":"sb.lineplot(data=daily_data[set3], linewidth=2.5)","94b953d2":"import datetime\ndaily_data['Date'] = daily_data.index\ndaily_data['Day'] = daily_data['Date'].map( lambda x : datetime.datetime.strptime(x, '%Y-%m-%d').strftime('%A'))\ndaily_data['Month'] = daily_data['Date'].map( lambda x : datetime.datetime.strptime(x, '%Y-%m-%d').strftime('%m'))\ndaily_data.head()","dddb61c9":"cats = [ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nweekly_data = daily_data.groupby('Day').mean()\nweekly_data['Day'] = weekly_data.index\nweekly_data = weekly_data.reindex(cats)\nweekly_data","d461768f":"sb.barplot(x=\"Day\", y=set1[0], data=weekly_data)","1baa4624":"sb.barplot(x=\"Day\", y=set2[0], data=weekly_data)","98734f35":"sb.barplot(x=\"Day\", y=set3[0], data=weekly_data)","a49d0379":"monthly_data = daily_data.groupby('Month').mean()\nmonthly_data['Month'] = monthly_data.index\nmonthly_data","742d653a":"sb.barplot(x=\"Month\", y=set1[0], data=monthly_data)","119a53db":"sb.barplot(x=\"Month\", y=set2[0], data=monthly_data)","6dffaf56":"sb.barplot(x=\"Month\", y=set3[0], data=monthly_data)","fe76e6a9":"d = weekly_data[set1[0]].values\nplt.plot(d)\nplt.ylabel(set1[0])\nplt.xticks([i for i in range(len(d))], cats, rotation=20)","d18cf4a1":"d = weekly_data[set2[0]].values\nplt.plot(d)\nplt.ylabel(set2[0])\nplt.xticks([i for i in range(len(d))], cats, rotation=20)","74254e2d":"d = weekly_data[set3[0]].values\nplt.plot(d)\nplt.ylabel(set3[0])\nplt.xticks([i for i in range(len(d))], cats, rotation=20)","bc9dfda1":"months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']","35145368":"d = monthly_data[set1[0]].values\nplt.plot(d)\nplt.ylabel(set1[0])\nplt.xticks([i for i in range(len(d))], months, rotation=20)","bf894e34":"d = monthly_data[set2[0]].values\nplt.plot(d)\nplt.ylabel(set2[0])\nplt.xticks([i for i in range(len(d))], months, rotation=20)","83594f10":"d = monthly_data[set3[0]].values\nplt.plot(d)\nplt.ylabel(set3[0])\nplt.xticks([i for i in range(len(d))], months, rotation=20)","f069d8ce":"> Let us choose features accordingly and plot the Dendogram again.","f47379f8":"Let us start with a Dendogram. Dendogram is used to reveal hierarchies in the data and features. \n> Looking at the vertical Dendograms helps us to find the correlation between the features.\n1.  - In the dendogam obtained, the features *PT08.S5(O3), PT08.S1(CO) and PT08.S2(NMHC)* are closely related. ( Due to their close spacing in the Dendogram. \n    - Similarly, *NMHC(GT) and NOx(GT)* are related to each other. \n    - Also, *T, C6H6 and CO* are closely related to each other.","375de767":"Let us now visualise how the data varies based on the day of the week and month of the year.","c281dce1":"- From the above plots, we can infer that Sunday is the least polluted day and Friday is the most polluted day.\n- Interestingly, the effect of pollutants is spread across months. There is exists high concentration of a pollutant even in the absence of other pollutants in all the months.","439cfe6a":"The following plots describe the trends of the features across months of the year.","9af11a80":"Let us plot scatter plots of these features to see the distribution w.r.t eacch other","3ef9d757":"Let us load the data and index using date.\n> We use forward filling to fill the missing and invalid values.","25990876":"> Let us visualise how the selected features behave over time.","7464d23a":"We now group the data by date and take the mean of the values. \n\n*This gives us average values of each feature over a day.*","daa23b6d":"We use lineplots to visualize the trends of the features.","d41aeb62":"Similarly, we plot monthly trend for the features","9d5d6c13":"The following plots describe the trends based on week of the day.","01e83db2":"> Now, let us emphasize the relationships between these variables. \n- We specifically compare the features with NO2(GT).","6c3b92ad":"Aggreagating based on the day and finding the mean. We reindex to get the data in the order of occurence of days naturally.","854127d1":"> From the above plots, we can infer that there is no clear linear relationship between the features. \n\n*Futher, we can eliminate PT08.S5(O3) and PT08.S3(NOx)*"}}