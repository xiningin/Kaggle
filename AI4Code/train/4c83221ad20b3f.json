{"cell_type":{"de89e5da":"code","d82c9f96":"code","1399e6a4":"code","11582bcf":"code","c7eb095b":"code","39c6bd65":"code","b8879c3b":"code","93b3111b":"code","824f0226":"code","acc9e4b8":"code","66f1157e":"code","2e669f0f":"code","494113ce":"code","a898d1a7":"code","54faf067":"code","5c62a135":"code","05d12e2e":"code","a0115d77":"code","ea5407af":"code","c5463c4c":"code","49c5ae7c":"code","cc508f0a":"code","2e883a0f":"code","93c6a090":"code","03d44c45":"code","a0f825c7":"code","376a25cf":"code","a9541733":"code","3283d6e2":"code","ded01d12":"code","688484e0":"code","86a31392":"code","b3df4d56":"code","01f18f50":"code","57de6e9a":"code","27dacf8c":"code","a8c3fd72":"code","bacdf53b":"code","429ef9f6":"code","0f858033":"code","853d0e23":"code","a62e6aec":"code","a86038fa":"code","415c6b9b":"code","8102176a":"code","8fef05cf":"code","34b7361d":"code","3df0e664":"code","b7ac2206":"code","b12c3a31":"code","4864879c":"code","8f0142ab":"code","f22956f6":"code","ffc4d799":"code","c085d019":"code","00fed316":"code","565db424":"code","d4af14c3":"code","41620860":"code","1479645f":"code","0afc5de0":"code","3b1ab954":"code","869dadf9":"code","b263a298":"code","032e853a":"code","519202ed":"code","93d4cd98":"code","ef231354":"code","c493bbd9":"code","0291d1d9":"code","5155c186":"code","b24f4eaa":"code","e00db643":"code","2e282d2e":"code","679ecee0":"code","d9ebba9c":"code","077cd8e1":"code","55998214":"code","7b751289":"code","a1bd32aa":"code","33bdf858":"code","d32205fc":"code","722f0034":"code","42d7f9bc":"code","b1cd3539":"code","9ae44141":"code","dae26740":"code","9267a657":"code","5e9a0f00":"code","fd025334":"code","dc082a13":"code","4f32d398":"code","06e95ab7":"code","e6005bd8":"code","b2cf76f9":"code","1cab251f":"code","b02af70f":"code","3db36fdc":"code","9915b881":"code","689f721f":"code","de495573":"code","fffa5b29":"code","95831a3f":"code","a00e92dc":"code","b1176a1f":"code","6b1e2d76":"code","2e4a6e99":"code","02e06a9b":"code","1517f0f0":"code","2512e6cf":"code","7db24311":"code","75eec671":"markdown","4118c544":"markdown","6543185b":"markdown","dd41e685":"markdown","56a1378a":"markdown","563ec3df":"markdown","b330605a":"markdown","1ff995f0":"markdown","540766fd":"markdown","309e5c53":"markdown","13e621a2":"markdown","e900e7c2":"markdown","4e5930e0":"markdown","f5b38368":"markdown","9d5a1f7b":"markdown","2e0d98ec":"markdown","ac9001d3":"markdown","d4fc19d6":"markdown","b1a55f30":"markdown","7d4ba93b":"markdown","9942e5af":"markdown","a534cc7a":"markdown","d4bc5930":"markdown","b1aee80b":"markdown","d45f7547":"markdown","5d7752ec":"markdown","a4b01761":"markdown","04fd8b40":"markdown","936eaca4":"markdown","c088c35a":"markdown","02e630ba":"markdown","6e8ed700":"markdown","47425992":"markdown","3b167840":"markdown","a52bec3f":"markdown","50de49f9":"markdown","ad83afc0":"markdown","cb40ef88":"markdown","70d37502":"markdown","58c43836":"markdown","46507730":"markdown","ebc4ade4":"markdown","cf7e952f":"markdown","9b583e47":"markdown","2b3936d7":"markdown","fd52e330":"markdown","70c30408":"markdown","0ee2df52":"markdown","b5a3b482":"markdown"},"source":{"de89e5da":"# Bu python 3 ortam\u0131 bir \u00e7ok yard\u0131mc\u0131 analiz k\u00fct\u00fcphaneleri ile birlikte kurulu olarak gelmektedir.\n# Docker image'i olarak kaggle\/python'dad\u0131r.(https:\/\/github.com\/kaggle\/docker-python)\n# \u00d6rne\u011fin, y\u00fcklenecek birka\u00e7 yard\u0131mc\u0131 paket var\n\n\nimport numpy as np # cebir\nimport pandas as pd # veri i\u015fleme, CSV dosyalar\u0131 I\/O (\u00f6rn. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # g\u00f6rselle\u015ftirme arac\u0131\n\n# Giri\u015f veri dosyalar\u0131 \"..\/input\/\" dizinindedir.\n# \u00d6rne\u011fin bu h\u00fccreyi \u00e7al\u0131\u015ft\u0131rmak i\u00e7in Shift+Enter'a ayn\u0131 anda basarsan\u0131z h\u00fccre \u00e7al\u0131\u015f\u0131r ve o dizindeki dosyalar\u0131 s\u0131ralar.\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Ge\u00e7erli dizine yazd\u0131\u011f\u0131n\u0131z herhangi bir sonu\u00e7 \u00e7\u0131kt\u0131 olarak kaydedilir.","d82c9f96":"veri = pd.read_csv('..\/input\/pokemon.csv')","1399e6a4":"veri.info()","11582bcf":"veri.corr()","c7eb095b":"# korelasyon haritas\u0131 \nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(veri.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","39c6bd65":"veri.head(10)","b8879c3b":"veri.columns","93b3111b":"# \u00c7izgi Grafi\u011fi\n# color = renk, label = etiket, linewidth = \u00e7izgi geni\u015fli\u011fi, alpha = opakl\u0131k, grid = \u0131zgara, linestyle = \u00e7izgi stili\nveri.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\nveri.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = etiketi grafi\u011fe koyar\nplt.xlabel('x ekseni')              # label = etiket ad\u0131\nplt.ylabel('y ekseni')\nplt.title('Grafi\u011fin Ba\u015fl\u0131\u011f\u0131')            # title = grafi\u011fin ba\u015fl\u0131\u011f\u0131\nplt.show()","824f0226":"# Da\u011f\u0131l\u0131m Grafi\u011fi \n# x = attack, y = defense\nveri.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = etiketin ad\u0131\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = grafi\u011fin ba\u015fl\u0131\u011f\u0131","acc9e4b8":"# Histogram\n# bins = \u015fekildeki \u00e7ubuk say\u0131s\u0131\nveri.Speed.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","66f1157e":"# clf() = tekrar temizler, temiz bir ba\u015flang\u0131\u00e7 yapabilirsin.\nveri.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# clf() nedeniyle grafi\u011fi g\u00f6remiyoruz.","2e669f0f":"# s\u00f6zl\u00fc\u011f\u00fc olu\u015fturun ve onun anahtarlar\u0131na ve de\u011ferlerine bak\u0131n\ns\u00f6zl\u00fck = {'ispanya' : 'madrid','usa' : 'vegas'}\nprint(s\u00f6zl\u00fck.keys())\nprint(s\u00f6zl\u00fck.values())","494113ce":"## Anahtarlar, string, boolean, float, integer veya tubles gibi de\u011fi\u015fmez nesneler olmal\u0131!!\n# Liste sabittir.\n# Anahtarlar biricik, e\u015fsiz olmal\u0131 :)\ns\u00f6zl\u00fck['ispanya'] = \"barcelona\"    # varolan kayd\u0131 g\u00fcncelleme\nprint(s\u00f6zl\u00fck)\ns\u00f6zl\u00fck['fransa'] = \"paris\"       # yeni kay\u0131t ekleme\nprint(s\u00f6zl\u00fck)\ndel s\u00f6zl\u00fck['ispanya']              # 'ispanya' ad\u0131ndaki kayd\u0131 silme\nprint(s\u00f6zl\u00fck)\nprint('fransa' in s\u00f6zl\u00fck)        # i\u00e7erir mi kontrol etme\ns\u00f6zl\u00fck.clear()                   # s\u00f6zl\u00fckteki t\u00fcm verileri silme\nprint(s\u00f6zl\u00fck)\n","a898d1a7":"# T\u00fcm kodu \u00e7al\u0131\u015ft\u0131rmak i\u00e7in alt sat\u0131r\u0131 yorumlamam\u0131z gerekiyor.\n\n# del s\u00f6zl\u00fck         # t\u00fcm s\u00f6zl\u00fc\u011f\u00fc sil\nprint(s\u00f6zl\u00fck)       # hata verir \u00e7\u00fcnk\u00fc s\u00f6zl\u00fc\u011f\u00fc yukardaki kodla sildik.","54faf067":"veri = pd.read_csv('..\/input\/pokemon.csv')\n","5c62a135":"seriler = veri['Defense']        # veri['Defense'] = seridir.\nprint(type(seriler))\nveri_cercevesi = veri[['Defense']]  # veri[['Defense']] = veri \u00e7er\u00e7evesidir.\nprint(type(veri_cercevesi))\n","05d12e2e":"# Kar\u015f\u0131la\u015ft\u0131rma operat\u00f6rleri\nprint(3 > 2)\nprint(3!=2)\n# Mant\u0131k operat\u00f6rleri\nprint(True and False)\nprint(True or False)","a0115d77":"# 1 - Pandas'da veri \u00e7ev\u00e7evelerini filtreleme\nx = veri['Defense']>200     # 200'den daha y\u00fcksek savunma de\u011ferine sahip sadece 3 pokemon var\nveri[x]","ea5407af":"# 2 - logical_and ile filtreleme\n# 200'dan daha y\u00fcksek savunma de\u011ferine ve 100'den daha y\u00fcksek sald\u0131r\u0131 de\u011ferine sahip olan sadece 2 pokemon var.\nveri[np.logical_and(veri['Defense']>200, veri['Attack']>100 )]","c5463c4c":"# Bu, \u00f6nceki kod sat\u0131r\u0131nda da ayn\u0131d\u0131r. Bu nedenle filtreleme i\u00e7in '&' kullanabiliriz.\nveri[(veri['Defense']>200) & (veri['Attack']>100)]","49c5ae7c":"# Ko\u015ful (i e\u015fit de\u011fil 5) do\u011fruysa d\u00f6ng\u00fc devam eder.\ni = 0\nwhile i != 5 :\n    print('i : ',i)\n    i +=1 \nprint(i,' e\u015fittir 5\\'e')","cc508f0a":"# Ko\u015ful (i e\u015fit de\u011fil 5) do\u011fruysa d\u00f6ng\u00fcde kal\u0131r.\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Listeyi ve liste de\u011ferini numaraland\u0131r.\n# index : de\u011fer = 0:1, 1:2, 2:3, 3:4, 4:5 (0'dan ba\u015flar.)\nfor index, deger in enumerate(lis):\n    print(index,\" : \",deger)\nprint('')   \n\n# S\u00f6zl\u00fck i\u00e7in ise\n# Anahtar\u0131n ve s\u00f6zl\u00fc\u011f\u00fcn de\u011ferini elde etmek i\u00e7in d\u00f6ng\u00fc i\u00e7in kullanabiliriz. S\u00f6zl\u00fck k\u0131sm\u0131nda anahtar ve de\u011feri \u00f6\u011frendik.\nsozluk = {'ispanya':'madrid','fransa':'paris'}\nfor anahtar,deger in sozluk.items():\n    print(anahtar,\" : \",deger)\nprint('')\n\n# Pandas'da index ve de\u011fer elde edebiliriz\nfor index,deger in veri[['Attack']][0:1].iterrows():\n    print(index,\" : \",deger)\n\n","2e883a0f":"# example of what we learn above\ndef tuble_ex():\n    \"\"\"tan\u0131ml\u0131 t tuble d\u00f6nd\u00fcr\u00fcld\u00fc\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","93c6a090":"# tahmin edelim bakal\u0131m ne \u00e7\u0131k\u0131cak _??\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","03d44c45":"# Peki ya local scope yoksa _??\nx = 5\ndef f():\n    y = 2*x        # local bi x yok\n    return y\nprint(f())         # bu y\u00fczden global scope x kullan\u0131l\u0131r.\n# \u00d6nce local 'scope' arand\u0131, sonra 'global scope' ara\u015ft\u0131r\u0131ld\u0131, e\u011fer hala yoksa son olarak 'built in scope' aran\u0131r.","a0f825c7":"# Peki nas\u0131l built in scope'lar\u0131 \u00f6\u011frenebiliriz _?\nimport builtins\ndir(builtins)","376a25cf":"#i\u00e7 i\u00e7e ge\u00e7mi\u015f fonksiyonlar\ndef kare():\n    \"\"\" karenin de\u011ferleri d\u00f6nd\u00fcr\u00fcl\u00fcr \"\"\"\n    def ekle():\n        \"\"\" iki local de\u011fi\u015fken ekle \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return ekle()**2\nprint(kare())    ","a9541733":"# varsay\u0131lan parametreler\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# peki varsay\u0131lan arg\u00fcmanlar\u0131 de\u011fi\u015ftirmek istiyorsak\nprint(f(5,4,3))","3283d6e2":"# esnek parametreler *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# esnek parametreler **kwargs bir s\u00f6zl\u00fckt\u00fcr\ndef f(**kwargs):\n    \"\"\" s\u00f6zl\u00fc\u011f\u00fcn anahtar ve degerini yazd\u0131ral\u0131m.\"\"\"\n    for anahtar, deger in kwargs.items():               # E\u011fer bu b\u00f6l\u00fcm\u00fc anlamad\u0131ysan\u0131z d\u00f6ng\u00fcler k\u0131sm\u0131ndaki s\u00f6zl\u00fckte d\u00f6ng\u00fclere g\u00f6z atabilirsiniz.\n        print(anahtar, \" \", deger)\nf(ulke = 'ispanya', baskent = 'madrid', nufus = 123456)","ded01d12":"# lambda fonksiyonu\nkare = lambda x: x**2     # x parametredir\nprint(kare(4))\ntoplam = lambda x,y,z: x+y+z   # x,y,z fonsiyonun parametreleridir\nprint(toplam(1,2,3))","688484e0":"numara_listesi = [1,2,3]\ny = map(lambda x:x**2,numara_listesi)\nprint(list(y))","86a31392":"# yineleme \u00f6rne\u011fi\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration\n","b3df4d56":"# zip \u00f6rnekleri\nliste1 = [1,2,3,4]\nliste2 = [5,6,7,8]\nz = zip(liste1,liste2)\nprint(z)\nz_listesi = list(z)\nprint(z_listesi)","01f18f50":"un_zip = zip(*z_listesi)\nun_liste1,un_liste2 = list(un_zip) # unzip tuble d\u00f6nd\u00fcr\u00fcr\nprint(un_liste1)\nprint(un_liste2)\nprint(type(un_liste2))","57de6e9a":"# list comprehension \u00f6rne\u011fi\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","27dacf8c":"# yinelenebilir'deki \u015fartlar(if, else)\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","a8c3fd72":"# pokemon csv'ye d\u00f6nelim ve bir tane daha list comprehension \u00f6rne\u011fi yapal\u0131m\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\n# pokemonlar\u0131 y\u00fcksek veya d\u00fc\u015f\u00fck h\u0131zlara sahip olup olmad\u0131\u011f\u0131n\u0131 s\u0131n\u0131flayal\u0131m. E\u015fi\u011fimiz ortalama h\u0131zd\u0131r.\nesik = sum(veri.Speed)\/len(veri.Speed)\nveri[\"h\u0131z_seviyesi\"] = [\"high\" if i > esik else \"low\" for i in veri.Speed]\nveri.loc[:10,[\"h\u0131z_seviyesi\",\"Speed\"]] # loc'u daha sonra daha detayl\u0131 g\u00f6rece\u011fiz.","bacdf53b":"veri = pd.read_csv('..\/input\/pokemon.csv')\nveri.head()  # head ilk 5 sat\u0131r\u0131 g\u00f6sterir","429ef9f6":"# tail son 5 sat\u0131r\u0131 g\u00f6sterir\nveri.tail()","0f858033":"# columns s\u00fctun isimlerini verir\nveri.columns","853d0e23":"# shape s\u00fctun ve sat\u0131rlar\u0131n say\u0131s\u0131n\u0131 verir\nveri.shape","a62e6aec":"# info veri tipini, s\u00fctun ve sat\u0131r say\u0131s\u0131n\u0131, haf\u0131za kullan\u0131m\u0131 bilgilerini verir\nveri.info()","a86038fa":"# \u00d6rne\u011fin pokemom tiplerinin s\u0131kl\u0131\u011f\u0131na bakal\u0131m\nprint(veri['Type 1'].value_counts(dropna =False))  # e\u011fer NaN(bo\u015f) de\u011feler varsa onlarda say\u0131l\u0131r\n# A\u015fa\u011f\u0131da g\u00f6r\u00fclebilece\u011fi gibi 112 su pokemon veya 70 \u00e7im pokemon vard\u0131r","415c6b9b":"# \u00d6rne\u011fin, maksimum HP 255 ve minimum savunma 5'tir\nveri.describe() # null girdileri g\u00f6rmezden gelir","8102176a":"# \u00d6rne\u011fin: efsanevi olan ya da olmayan pokemonlar\u0131n sald\u0131r\u0131s\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131r\n# \u00dcstte siyah \u00e7izgi max\n# \u00dcstte mavi \u00e7izgi %75\n# K\u0131rm\u0131z\u0131 \u00e7izgi ortancad\u0131r (%50)\n# Altta mavi \u00e7izgi% 25\n# Altta siyah \u00e7izgi min\n# Ay\u0131r\u0131c\u0131 yok\nveri.boxplot(column='Attack',by = 'Legendary')","8fef05cf":"# \u00d6ncelikle, melt() methodunu daha kolay a\u00e7\u0131klamak i\u00e7in pokemons verilerinden yeni veriler olu\u015fturuyorum.\nyeni_veri = veri.head()    # Yeni veriler i\u00e7in adece 5 sat\u0131r\u0131n\u0131 ald\u0131m \nyeni_veri","34b7361d":"# hadi melt'leyelim\n# id_vars = melt'lemek isteMEdi\u011fimiz \u015feyler\n# value_vars = melt'lemek istedi\u011fimiz \u015feyler\nmeltlenmis = pd.melt(frame=yeni_veri,id_vars = 'Name', value_vars= ['Attack','Defense'])\nmeltlenmis","3df0e664":"# Index is name\n# Bu s\u00fctunlar\u0131n de\u011fi\u015fken olmas\u0131 istiyorum\n# Eveet geri eski haline d\u00f6nd\u00fcrd\u00fck =)\nmeltlenmis.pivot(index = 'Name', columns = 'variable',values='value')","b7ac2206":"# \u00d6ncelikle 2 ayr\u0131 veri seti olu\u015ftural\u0131m\nveri1 = veri.head()\nveri2= veri.tail()\nconc_data_row = pd.concat([veri1,veri2],axis =0,ignore_index =True) # axis = 0 : veri setlerini sat\u0131r olarak alt\u0131na ekler.\nconc_data_row","b12c3a31":"veri1 = veri['Attack'].head()\nveri2= veri['Defense'].head()\nconc_data_col = pd.concat([veri1,veri2],axis =1) # axis = 0 : veri setlerini s\u00fctun olarak ekler\nconc_data_col","4864879c":"veri.dtypes","8f0142ab":"# lets convert object(str) to categorical and int to float.\nveri['Type 1'] = veri['Type 1'].astype('category')\nveri['Speed'] = veri['Speed'].astype('float')","f22956f6":"# G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, Type 1 object'den categorical'a d\u00f6n\u00fc\u015ft\u00fcr\u00fcld\u00fc.\n# ve Speed int'den float'a d\u00f6nd\u00fc.\nveri.dtypes","ffc4d799":"# Hadi bakal\u0131m pokemon veri setimizde eksikler var m\u0131 :O\n# Eveet g\u00f6rd\u00fc\u011f\u00fcn\u00fcz burada \u00fczere 800 girdi var. Ancak Type 2'nin 414 tane bo\u015f olmayan (non-null) nesnesi var yani 386 tanesi eksik.\nveri.info()","c085d019":"# Type 2'ye bakal\u0131m\nveri[\"Type 2\"].value_counts(dropna =False)\n# G\u00f6rd\u00fc\u011f\u00fcn\u00fcz \u00fczere 386 NaN(Eksik) de\u011ferimiz var.","00fed316":"# Nan de\u011ferleri oldu\u011fu gibi b\u0131rakal\u0131m\nveri1 = veri   # ayr\u0131ca veriyi, eksik de\u011ferleri doldurmak i\u00e7in kullanaca\u011f\u0131z, bu y\u00fczden veri'yi veri1 de\u011fi\u015fkenine atad\u0131m\nveri1[\"Type 2\"].dropna(inplace = True)  # inplace = True onu yeni de\u011fi\u015fkene atamad\u0131\u011f\u0131m\u0131z anlam\u0131na gelir.De\u011fi\u015fiklikler otomatik olarak veriye atan\u0131r\n# Eee \u00e7al\u0131\u015ft\u0131 m\u0131 _?","565db424":"#  Lets check with assert statement\n# Hadi bide assert ifadesine bakal\u0131m.\n# Assert ifadesi:\nassert 1==1 # hi\u00e7bir\u015fey d\u00f6nmez \u00e7\u00fcnk\u00fc ifade True ","d4af14c3":"# In order to run all code, we need to make this line comment\n# T\u00fcm kodu \u00e7al\u0131\u015ft\u0131r\u0131rken a\u015fa\u011f\u0131daki sat\u0131r\u0131 yorum sat\u0131r\u0131 yapamam\u0131z gerekmektedir.\n# assert 1==2 # hata d\u00f6nd\u00fcr\u00fcr \u00e7\u00fcnk\u00fc ifade False","41620860":"assert  veri['Type 2'].notnull().all() # hi\u00e7bi\u015fey d\u00f6nd\u00fcrmez \u00e7\u00fcnk\u00fc NaN de\u011ferleri \u00e7\u0131kard\u0131k.","1479645f":"veri[\"Type 2\"].fillna('empty',inplace = True)","0afc5de0":"assert  veri['Type 2'].notnull().all() # yine hi\u00e7bi\u015fey d\u00f6nmez \u00e7\u00fcnk\u00fc NaN de\u011ferleri doldurduk","3b1ab954":"# With assert statement we can check a lot of thing. For example\n# Assert ifadesi ile bir \u00e7ok \u015feyi kontrol edebiliriz. Mesela:\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","869dadf9":"# s\u00f6zl\u00fcklerden veri seti\nsehir = [\"\u0130spanya\",\"Fransa\"]\nnufus = [\"11\",\"12\"]\nlist_label = [\"sehir\",\"nufus\"]\nlist_col = [sehir,nufus]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","b263a298":"# Add new columns\ndf[\"baskent\"] = [\"madrid\",\"paris\"]\ndf","032e853a":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting t\u00fcm s\u00fctun\ndf","519202ed":"# T\u00fcm veriyi \u00e7izelim\nveri1 = veri.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\nveri1.plot()\n# hmm kafa kar\u0131\u015ft\u0131r\u0131c\u0131 .s.s","93d4cd98":"# altplan\nveri1.plot(subplots = True)\nplt.show()","ef231354":"# da\u011f\u0131l\u0131m grafi\u011fi  \nveri1.plot(kind = \"scatter\",x=\"Attack\",y = \"Defense\")\nplt.show()","c493bbd9":"# histogram grafi\u011fi\nveri1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True)","0291d1d9":"# k\u00fcm\u00fclatif ve k\u00fcm\u00fclatif olmayan histogram altplan\u0131\nfig, axes = plt.subplots(nrows=2,ncols=1)\nveri1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[0])\nveri1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","5155c186":"veri.describe()","b24f4eaa":"zaman_listesi = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(zaman_listesi[1])) # Sizin de g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi tarih bir string nesnesi\n# Ancak biz date time'\u0131n nesne olmas\u0131n\u0131 istiyoruz\ndatetime_nesnesi = pd.to_datetime(zaman_listesi)\nprint(type(datetime_nesnesi))","e00db643":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Pratik yapmak i\u00e7in pokemon verilerinin ba\u015f\u0131n\u0131 al\u0131p bir zaman listesi ekleyelim\nveri2 = veri.head()\nzaman_listesi = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_nesnesi = pd.to_datetime(zaman_listesi)\nveri2[\"date\"] = datetime_nesnesi\n# indeks olarak tarih yapal\u0131m\nveri2= veri2.set_index(\"date\")\nveri2 ","2e282d2e":"# \u015eimdi tarih indeksimize g\u00f6re se\u00e7ebiliriz\nprint(veri2.loc[\"1993-03-16\"])\nprint(veri2.loc[\"1992-03-10\":\"1993-03-16\"])","679ecee0":"# Ge\u00e7en b\u00f6l\u00fcmde olu\u015fturdu\u011fumuz veri2 setini kullanal\u0131m.\nveri2.resample(\"A\").mean()","d9ebba9c":"# Hadi month ile yeniden \u00f6rneklendirelim.\nveri2.resample(\"M\").mean()\n# G\u00f6rebildi\u011finiz gibi bir \u00e7ok NaN de\u011feri var \u00e7\u00fcnk\u00fc veri2 seti t\u00fcm aylar\u0131 i\u00e7ermiyor.","077cd8e1":"# Ger\u00e7ek hayatta (veriler ger\u00e7ek. Biz veri2'yi yaratmam\u0131\u015f\u0131z sanki) bu problemi interpolate ile \u00e7\u00f6zebiliriz\n# \u0130lk de\u011ferden interpolate edelim. NaN de\u011ferleri doldural\u0131m.\n# String ve boolean de\u011ferleri doldurmuyor fakat int ve float de\u011ferleri interpolate'\u0131n i\u00e7erdi\u011fi farkl\u0131 y\u00f6ntemler ile dolduruyor. \u00d6rne\u011fin 'linear' olarak\nveri2.resample(\"M\").first().interpolate(\"linear\")","55998214":"# birde mean() methodu ile interpolate edelim.\nveri2.resample(\"M\").mean().interpolate(\"linear\")","7b751289":"# veriyi okuyal\u0131m\nveri = pd.read_csv('..\/input\/pokemon.csv')\nveri = veri.set_index(\"#\")\nveri.head()","a1bd32aa":"# k\u00f6\u015feli parantez kullanarak indeksleme\nveri[\"HP\"][1]","33bdf858":"# s\u00fctun niteli\u011fini ve sat\u0131r etiketini kullanma\nveri.HP[1]","d32205fc":"# Loc eri\u015fimcisini kullanma\nveri.loc[1,[\"HP\"]]","722f0034":"# Sadece belirli s\u00fctunlar\u0131 se\u00e7me\nveri[[\"HP\",\"Attack\"]]","42d7f9bc":"# S\u00fctun se\u00e7imi ile aras\u0131ndaki fark : seriler ve veri setleri\nprint(type(veri[\"HP\"]))     # seriler\nprint(type(veri[[\"HP\"]]))   # veri setleri","b1cd3539":"# Serileri dilimleme ve indeksleme\nveri.loc[1:10,\"HP\":\"Defense\"]   # 10 and \"Defense\" are inclusive","9ae44141":"# Tersten dilimleme\nveri.loc[10:1:-1,\"HP\":\"Defense\"] ","dae26740":"# Bir \u015feyden sonra\nveri.loc[1:10,\"Speed\":] ","9267a657":"# Boolean seriler yaratma\nboolean = veri.HP > 200\nveri[boolean]","5e9a0f00":"# Filtreleri birle\u015ftirme\nilk_filtre = veri.HP > 150\nikinci_filtre = veri.Speed > 35\nveri[ilk_filtre & ikinci_filtre]","fd025334":"# Di\u011ferlerine g\u00f6re s\u00fctun filtreleme\nveri.HP[veri.Speed<15]","dc082a13":"# Normal python fonksiyonlar\u0131\ndef div(n):\n    return n\/2\nveri.HP.apply(div)","4f32d398":"# Lambda fonksiyonu: her bir \u00f6\u011feye rastgele python i\u015flevi uygulamak\nveri.HP.apply(lambda n : n\/2)","06e95ab7":"# Di\u011fer s\u00fctunlar\u0131 kullanarak s\u00fctun tan\u0131mlama\nveri[\"total_power\"] = veri.Attack + veri.Defense\nveri.head()","e6005bd8":"# bizim index ismimiz 'name' \nprint(veri.index.name)\n# hadi de\u011fi\u015ftirelim\nveri.index.name = \"index_ismi\"\nveri.head()","b2cf76f9":"# \u0130ndeksin \u00fcst\u00fcne yazal\u0131m\n# if we want to modify index we need to change all of them.\n# e\u011fer indexi d\u00fczeltmek istiyorsak hepsini de\u011fi\u015ftirmemiz gerekicek\nveri.head()\n# verilerimizin ilk kopyasn\u0131 data3'e atal\u0131m sonra indeks ile rahat rahat oynayabiliriz\nveri3 = veri.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\n# hadi indeksi 100'den ba\u015flatal\u0131m. Ah\u0131m \u015fah\u0131m bir de\u011fi\u015fim de\u011fil, sonu\u00e7ta sadece bir \u00f6rnek.\nveri3.index = range(100,900,1)\nveri3.head()","1cab251f":"# We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n# Bir s\u00fctunu index olarak yapabiliriz. Biz asl\u0131nda veri setimize manip\u00fcleyi pandas b\u00f6l\u00fcm\u00fcn\u00fcn ba\u015f\u0131nda yapt\u0131k\n# Nas\u0131l m\u0131 \u015f\u00f6yle\n# veri= veri.set_index(\"#\")\n# ayr\u0131ca bu da olabilir\n# veri.index = veri[\"#\"]","b02af70f":"# Hadi bakal\u0131m tekrardan veri setimizi ba\u015ftan ba\u015flamak i\u00e7in bir kez daha okuyal\nveri = pd.read_csv('..\/input\/pokemon.csv')\nveri.head()\n# G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi bi indeksimiz var. Ancak, daha fazla s\u00fctunu indeks olarak ayarlamak istiyoruz","3db36fdc":"# \u0130ndeksi ayarlama: type 1 d\u0131\u015f type 2 ise i\u00e7 indeks\nveri1 = veri.set_index([\"Type 1\",\"Type 2\"]) \nveri1.head(100)\n#veri1.loc[\"Fire\",\"Flying\"] # Nas\u0131l kullan\u0131l\u0131r deneyebilirsin","9915b881":"sozluk = {\"tedavi\":[\"A\",\"A\",\"B\",\"B\"],\"cinsiyet\":[\"K\",\"E\",\"K\",\"E\"],\"tepki_suresi\":[10,45,5,9],\"yas\":[15,4,72,65]}\ndf = pd.DataFrame(sozluk)\ndf","689f721f":"# pivoting\ndf.pivot(index=\"tedavi\",columns = \"cinsiyet\",values=\"tepki_suresi\")","de495573":"df1 = df.set_index([\"tedavi\",\"cinsiyet\"])\ndf1\n# hadi istiften \u00e7\u0131karal\u0131m","fffa5b29":"# seviye indekslerini belirler\ndf1.unstack(level=0)","95831a3f":"df1.unstack(level=1)","a00e92dc":"# swaplevel : i\u00e7 ve d\u0131\u015f seviye indeks konumunu de\u011fi\u015ftme\ndf2 = df1.swaplevel(0,1)\ndf2","b1176a1f":"df","6b1e2d76":"# df.pivot(index=\"tedavi\",columns = \"cinsiyet\",values=\"tepki_suresi\")\npd.melt(df,id_vars=\"tedavi\",value_vars=[\"yas\",\"tepki_suresi\"])","2e4a6e99":"# df'yi kullan\u0131caz\ndf","02e06a9b":"# tedaviye g\u00f6re di\u011fer \u00f6zelliklerin al\u0131nmas\u0131\n\ndf.groupby(\"tedavi\").mean()   # ortalama agregasyon \/ red\u00fcksiyon metodudur\n# tabiki sum, std, max veya min gibi ba\u015fka y\u00f6ntemlerde var","1517f0f0":"# sadece \u00f6zelliklerden birini se\u00e7ebiliriz\ndf.groupby(\"tedavi\").yas.max() ","2512e6cf":"# Ya da birden \u00e7ok \u00f6zellik se\u00e7ebiliriz\ndf.groupby(\"tedavi\")[[\"yas\",\"tepki_suresi\"]].min() ","7db24311":"df.info()\n# cinsiyet g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi bir nesne\n# Ancak, groupby kullan\u0131rsak, categorical verileri d\u00f6n\u00fc\u015ft\u00fcrebiliriz.\n# \u00c7\u00fcnk\u00fc categorical veriler daha az bellek kulland\u0131\u011f\u0131ndan, groupby gibi i\u015flemleri h\u0131zland\u0131r\u0131r\n#df[\"cinsiyet\"] = df[\"cinsiyet\"].astype(\"category\")\n#df[\"tedavi\"] = df[\"tedavi\"].astype(\"category\")\n#df.info()\n","75eec671":"<a id=\"37\"><\/a> <br>\n### \u0130NDEKS NESNELER\u0130 ve ET\u0130KETL\u0130 VER\u0130LER\nindex: etiket dizisi\n","4118c544":"In this part, you learn:\nBu b\u00f6l\u00fcmde \u015funlar\u0131 \u00f6\u011frendik:\n* csv dosyas\u0131 nas\u0131l i\u00e7e aktarmay\u0131,\n* \u00e7izgi, da\u011f\u0131l\u0131m ve histogram \u00e7izmeyi,\n* temel s\u00f6zl\u00fck \u00f6zelliklerini,\n* filtreleme gibi temel pandas \u00f6zelliklerini \u00f6\u011frendik asl\u0131nda veri bilimcisinin her zaman kulland\u0131\u011f\u0131 ana \u00f6zelliklerdendir,\n* while ve for d\u00f6ng\u00fclerini \u00f6\u011frendik.","6543185b":"<a id=\"30\"><\/a> <br>\n### PANDAS'DA ZAMAN D\u0130Z\u0130S\u0130NE G\u00d6RE \u0130NDEKSLEME\n* datetime = nesne\n* parse_dates(boolean): Tarihi ISO 8601 (yyyy-aa-gg ss: dd: ss) standard\u0131na(bi\u00e7imine) uygun olarak d\u00f6n\u00fc\u015ft\u00fcrme","dd41e685":"<a id=\"28\"><\/a> <br>\n### G\u00d6RSEL KE\u015eFED\u0130C\u0130 VER\u0130 \u00c7\u00d6Z\u00dcMLEMES\u0130\n* \u00c7izim\n* Alt plan\n* Histogram:\n    * bins: bins say\u0131s\u0131\n    * range(tuble): bins'in maksimum ve minimum de\u011ferleri\n    * normed(boolean): normalize mi de\u011fil mi\n    * cumulative(boolean): k\u00fcm\u00fclativ da\u011f\u0131l\u0131m\u0131 hesapla","56a1378a":"<a id=\"12\"><\/a> <br>\n### LAMBDA FONKS\u0130YONU\nFonksiyon yazman\u0131n h\u0131zl\u0131 yolu","563ec3df":"<a id=\"3\"><\/a> <br>\n### S\u00f6zl\u00fck\nNeden s\u00f6zl\u00fc\u011fe ihtiya\u00e7 duyar\u0131z?\n* 'Anahtar' ve 'De\u011fer' kavramlar\u0131 vard\u0131r.\n* Listeden daha h\u0131zl\u0131d\u0131r.\n<br>\nAnahtar ve de\u011fer nedir? \u00d6rne\u011fin:\n* s\u00f6zl\u00fck = {'ispanya' : 'madrid'}\n* Anahtar 'ispanya'd\u0131r.\n* De\u011fer ise 'madrid'.\n<br>\n<br>**\u0130\u015fte bu kadaar kolay :)**\n<br>Hadi biraz da s\u00f6zl\u00fc\u011f\u00fcn 'keys(), values(), update, add, check, remove key, remove all' \u00f6zellikleri ile pratik yapal\u0131m.","b330605a":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FONKS\u0130YONU\nLambda fonksiyonu gibidir fakat birden fazla parametre alabilir.\n* map(func,seq) : listedeki t\u00fcm par\u00e7alara fonksiyonu uygular\n","1ff995f0":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON VER\u0130 B\u0130L\u0130M\u0130 ARA\u00c7 KUTUSU","540766fd":"<a id=\"26\"><\/a> <br>\n### PANDAS'A \u0130LK BAKI\u015e\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\nFarketmi\u015fsinizdir, t\u00fcm fikirleri ayn\u0131 anda vermiyorum. Her ne kadar pandas'\u0131n baz\u0131 temellerini \u00f6\u011frensek de, pandas'da daha derinlere inece\u011fiz.\n* single column = series\n* NaN = bir say\u0131 de\u011fil (Not a Number)\n* dataframe.values = numpy\n","309e5c53":"<a id=\"35\"><\/a> <br>\n### VER\u0130 SET\u0130N\u0130 F\u0130LTRELEME\nBoolean seriler yaratma\nFiltreleri birle\u015ftirme\nDi\u011ferlerine g\u00f6re s\u00fctun filtreleme","13e621a2":"<a id=\"6\"><\/a> <br>\n### WHILE ve FOR D\u00d6NG\u00dcLER\u0130\nEn temel ve d\u00f6ng\u00fcleri \u00f6\u011frenece\u011fiz.","e900e7c2":"<a id=\"32\"><\/a> <br>\n# PANDAS \u0130LE VER\u0130 SET\u0130 MAN\u0130P\u00dcLASYONU","4e5930e0":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**Bu kernel'daki en \u00f6nemli konudur.**\n<br> S\u0131kl\u0131kla veri analizi i\u00e7in 'list comprehension' kullan\u0131yoruz.\n<br> list comprehension: collapse for loops for building lists into a single line\n<br> list comprehension: for d\u00f6ng\u00fcs\u00fc ile yeni bir listeyi tek sat\u0131rda olu\u015fturma\n\n<br>\u00d6rn: num1 = [1,2,3]ve biz bunu \u015f\u00f6yle yamak istiyoruz => num2 = [2,3,4].Bu d\u00f6ng\u00fc ile yap\u0131labilir. Ancak gereksiz derecede uzundur. Biz bunu 'list comprehension' kullanarak tek sat\u0131rda yapabiliriz.","f5b38368":"# SON\nYorum ve oylar\u0131n\u0131z i\u00e7in te\u015fekk\u00fcr ederim\n<br> **MACHINE LEARNING ** https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\/\n<br> **DEEP LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\n<br> **STATISTICAL LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/statistical-learning-tutorial-for-beginners\n<br>** Herhangi bir sorunuz veya \u00f6neriniz varsa, bunu duymaktan mutluluk duyar\u0131m :) **","9d5a1f7b":"[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for d\u00f6ng\u00fcs\u00fc syntax\n<br> i: yineleyici\n<br> num1: yinelenen nesne","2e0d98ec":"<a id=\"8\"><\/a> <br>\n### KULLANICI TANIMLI FONKS\u0130YON\nBu fonksiyon hakk\u0131nda bilmemiz gerekenler:\n* docstrings: fonksiyonlar i\u00e7in i\u00e7in d\u00f6k\u00fcmanlar. \u00d6rne\u011fin:\n<br>for f():\n <br> \"\"\" Bu 'f' fonksiyonu i\u00e7in bir docstring'dir  \"\"\"\n* tuble: de\u011fi\u015fmez python nesnelerinin dizisi.\n<br>de\u011ferleri de\u011fi\u015ftiremez\n<br>tuble '''tuble=(1,2,3)''' gibi parantez kullan\u0131r\n<br>'''a,b,c = tuble''' gibi farkl\u0131 de\u011ferlere a\u00e7\u0131labilir\n    ","ac9001d3":"<a id=\"22\"><\/a> <br>\n### VER\u0130 SETLER\u0130N\u0130 B\u0130RLE\u015eT\u0130RMEK\n\u0130ki veri dosyas\u0131n\u0131 birle\u015ftirelim.","d4fc19d6":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS ve GROUPBY","b1a55f30":"<a id=\"18\"><\/a> <br>\n### KE\u015eFED\u0130C\u0130 VER\u0130 \u00c7\u00d6Z\u00dcMLER\u0130\nvalue_counts(): frekans say\u0131c\u0131\n<br> ayk\u0131r\u0131 de\u011ferler: verilerin geri kalan\u0131ndan \u00f6nemli \u00f6l\u00e7\u00fcde daha y\u00fcksek veya daha d\u00fc\u015f\u00fck olan de\u011fer\n* % 75 de\u011ferinde Q3 de\u011feri ve % 25 de\u011ferinin Q1 oldu\u011funu s\u00f6yleyelim. \n* Ayk\u0131r\u0131 de\u011ferler Q1 - 1.5 (Q3-Q1) 'den k\u00fc\u00e7\u00fck ve Q3 + 1,5'den (Q3-Q1) daha b\u00fcy\u00fckt\u00fcr. (Q3-Q1) = IQR\n<br>> Describe () y\u00f6ntemini kullanaca\u011f\u0131z. Decribe methodu \u015funlar\u0131 i\u00e7erir:\n* count: girdilerin say\u0131s\u0131\n* mean: girdilerin ortalamas\u0131\n* std: standart sapma\n* min: minimum giri\u015f\n* % 25: ilk \u00e7eyrek\n* % 50: medyan veya ikinci derece\n* % 75: \u00fc\u00e7\u00fcnc\u00fc \u00e7eyrek\n* max: maksimum giri\u015f\n\n<br> \u00c7eyreklik nedir ?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* Medyan bir dizinin **ortas\u0131ndaki say\u0131d\u0131r**('quantile %50' olarak da g\u00f6sterilir). Mesela yukar\u0131daki listemizde '11' medyand\u0131r.\n\n* Alt \u00e7eyrek medyan ve en k\u00fc\u00e7\u00fck de\u011ferin ortas\u0131ndaki medyand\u0131r. \u00d6rne\u011fin 1 ve 11 aras\u0131ndaki medyan 6'd\u0131r.\n* \u00dcst \u00e7eyrek, medyan ve en b\u00fcy\u00fck de\u011ferin ortas\u0131ndaki medyand\u0131r. \u00d6rne\u011fin 11 ve 17 aras\u0131ndaki medyan 14't\u00fcr. ","7d4ba93b":"<a id=\"9\"><\/a> <br>\n### SCOPE\nScope hakk\u0131nda bilmemiz gerekenler:\n* global: dosya i\u00e7erisinde t\u00fcm seviyelerde g\u00f6r\u00fcn\u00fcr.\n* local: tan\u0131mlad\u0131\u011f\u0131 fonksiyonda g\u00f6r\u00fcn\u00fcr.\n* built in scope: 'print', 'len' gibi \u00f6nceden tan\u0131mlanm\u0131\u015f yerle\u015fik scope mod\u00fcl\u00fcndeki isimler.\n<br><br>Hadi biraz egzersiz yapal\u0131m!!","9942e5af":"<a id=\"17\"><\/a> <br>\n### TEM\u0130ZL\u0130K i\u00e7in HATALI VER\u0130 TE\u015eH\u0130S\u0130\nVerimizde ke\u015ffe ba\u015flamadan \u00f6nce hatal\u0131 verileri te\u015fhis etmemiz ve temizlememiz gerekiyor.\n<br>Hatal\u0131 Veriler:\n* b\u00fcy\u00fck k\u00fc\u00e7\u00fck harf, kelimeler aras\u0131ndaki bo\u015fluk veya s\u00fctun ad\u0131 tutars\u0131zl\u0131\u011f\u0131\n* kay\u0131p veriler\n* farkl\u0131 dil\n<br> Kay\u0131p verileri te\u015fhis etmek i\u00e7inhead, tail, columns, shape ve info y\u00f6ntemleri kullanaca\u011f\u0131z\n","a534cc7a":"<a id=\"1\"><\/a> <br>\n# 1. PYTHON'A G\u0130R\u0130\u015e","d4bc5930":"<a id=\"41\"><\/a> <br>\n### MELTING VER\u0130 SET\u0130\n* Terse d\u00f6nme","b1aee80b":"\u015eimdiye kadar \u00f6\u011frendiklerimiz:\n* Kullan\u0131c\u0131 tan\u0131ml\u0131 fonsiyonlar\n* Scope\n* \u0130\u00e7 i\u00e7e fonksiyonlar \n* Varsay\u0131lan ve esnek parametreler\n* Lambda fonksiyonu\n*  Anonymous fonksiyonu\n*  Yineleyiciler\n* List comprehension\n","d45f7547":"zip(): zip listeleri\n","5d7752ec":"<a id=\"5\"><\/a> <br>\nPandalarla devam etmeden \u00f6nce, ** mant\u0131k, kontrol ak\u0131\u015f\u0131 ** ve ** filtrelemeyi \u00f6\u011frenmeliyiz. **\n<br>Kar\u015f\u0131la\u015ft\u0131rma operat\u00f6rleri:  ==, <, >, <=\n<br>Mant\u0131k operat\u00f6rleri: and, or ,not\n<br>Pandas'da Filtreleme ","a4b01761":"<a id=\"20\"><\/a> <br>\n### D\u00dcZENL\u0130 VER\u0130LER\nVerileri melt() methodunu kullanarak d\u00fczenleyece\u011fiz.\n<br>melt() methodu basit\u00e7e bulunan bir tablodan istenilen \u00f6zellikler ile yeni bir tablo olu\u015fturulmas\u0131d\u0131r. Daha iyi anlamak i\u00e7in hadi \u00f6rnek yapal\u0131m.","04fd8b40":"<a id=\"4\"><\/a> <br>\n### PANDAS\nPandalar hakk\u0131nda neler bilmemiz gerekir?\n* CSV: virg\u00fcl - ay\u0131r\u0131lm\u0131\u015f de\u011ferler\n\n","936eaca4":"<a id=\"40\"><\/a> <br>\n### \u0130ST\u0130FLENM\u0130\u015e ve \u0130ST\u0130FLENMEM\u0130\u015e VER\u0130 SET\u0130\n* \u00e7oklu etiket indeksleriyle anla\u015fma\n* level: istiflenmemi\u015f indeks pozisyonu\n* swaplevel: i\u00e7 ve d\u0131\u015f seviye indeks konumunu de\u011fi\u015ftme","c088c35a":"<a id=\"10\"><\/a> <br>\n### \u0130\u00c7 \u0130\u00c7E GE\u00c7M\u0130\u015e FONKS\u0130YONLAR (NESTED FUNCTIONS)\n* fonksiyon i\u00e7inde fonksiyon\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.\n* Sayg\u0131 ile i\u015fleyen LEGB kural\u0131 vard\u0131r. S\u0131ra ile local scope, enclosing function, global ve built in scopes aran\u0131r.","02e630ba":"# VER\u0130 B\u0130L\u0130MC\u0130S\u0130\n**Bu derste,  bir veri bilimcisi olmak i\u00e7in ihtiya\u00e7 duydu\u011funuzun ne daha fazlas\u0131n\u0131 ne de daha az\u0131n\u0131 a\u00e7\u0131klayaca\u011f\u0131m.**\n\nBir veri bilimcisi bu becerilere sahip olmal\u0131:\n\n1. Basit Ara\u00e7lar: Python, R, SQL gibi... Her\u015feyi bilmenize gerek yok. Sadece ihtiyac\u0131n olacak kadar **python**  \u00f6\u011frensen yeterlidir. \n1. Temel \u0130statistik: Ortalama, medyan veya standart sapma gibi temel istatistikleri biliyorsan\u0131z, ** python ** '\u0131 kolayca kullanabilirsiniz.\n1. Veri Munging: Da\u011f\u0131n\u0131k ve zor verilerle \u00e7al\u0131\u015fma. Tutars\u0131z bir tarih ve dize bi\u00e7imlendirmesi gibi. Tahmin etti\u011finiz gibi, ** python ** bize yard\u0131mc\u0131 oluyor\n1. Veri G\u00f6rselle\u015ftirme: Ba\u015fl\u0131k asl\u0131nda a\u00e7\u0131klay\u0131c\u0131d\u0131r. Verileri ** python ** **matploit** ve **seaborn** k\u00fct\u00fcphaneleri ile g\u00f6rselle\u015ftirece\u011fiz.\n1. Makine \u00d6\u011frenmesi: Makine \u00f6\u011frenmesinin arkas\u0131ndaki matemati\u011fi anlaman\u0131z gerekmez. Sadece ihtiyac\u0131n\u0131z olan \u015fey, makine \u00f6\u011freniminin temellerini anlamak ve ** python ** kullan\u0131rken bunu nas\u0131l uygulayaca\u011f\u0131n\u0131z\u0131 \u00f6\u011frenmek.\n\n### \u00d6zet olarak, veri bilimcisi olmak i\u00e7in python'\u0131 \u00f6\u011frenece\u011fiz !!!\n\n**\u0130\u00e7erik:**\n1. [Python'a Giri\u015f:](#1)\n    1. [Matplotlib](#2)\n    1. [K\u00fct\u00fcphaneler ](#3)\n    1. [Pandas](#4)\n    1. [Mant\u0131k, kontrol ak\u0131\u015f\u0131 ve filtreleme](#5)\n    1. [D\u00f6ng\u00fcler ve veri yap\u0131lar\u0131](#6)\n1. [Python Veri Bilimi Ara\u00e7 Kutusu:](#7)\n    1. [Kullan\u0131c\u0131 tan\u0131ml\u0131 fonksiyonlar](#8)\n    1. [Scope](#9)\n    1. [\u0130\u00e7 i\u00e7e ge\u00e7mi\u015f fonksiyonlar](#10)\n    1. [Varsay\u0131lan ve esnek parametreler](#11)\n    1. [Lambda Fonksiyonu](#12)\n    1. [Anonymous Fonksiyonu](#13)\n    1. [Yineleyiciler](#14)\n    1. [List comprehension](#15)\n1. [Veri Temizli\u011fi:](#16)\n    1. [Temizlik i\u00e7in hatal\u0131 veri te\u015fhisi](#17)\n    1. [Ke\u015ffedici veri \u00e7\u00f6z\u00fcmlemesi](#18)\n   \u00a01. [G\u00f6rsel ke\u015ffedici veri \u00e7\u00f6z\u00fcmlemesi](#19)\n\u00a0\u00a0\u00a0\u00a01. [D\u00fczenli veriler](#20)\n\u00a0\u00a0\u00a0\u00a01. [Verileri \u00e7evirmek](#21)\n\u00a0\u00a0\u00a0\u00a01. [Veri setlerini birle\u015ftirme](#22)\n\u00a0\u00a0\u00a0\u00a01. [Veri t\u00fcrleri](#23)\n\u00a0\u00a0\u00a0\u00a01. [Eksik veri ve assert ile test](#24)\n1. [Panda Temelleri](#25)\n\u00a0\u00a0\u00a0\u00a01. [Panda'ya ilk bak\u0131\u015f](#26)\n\u00a0\u00a0\u00a0\u00a01. [Veri setini s\u0131f\u0131rdan olu\u015fturma](#27)\n\u00a0\u00a0\u00a0\u00a01. [G\u00f6rsel ke\u015fifsel veri analizi](#28)\n\u00a0\u00a0\u00a0\u00a01. [\u0130statistiksel ke\u015fifsel veri analizi](#29)\n\u00a0\u00a0\u00a0\u00a01. [Pandas'ta zaman dizisine g\u00f6re indeksleme](#30)\n\u00a0\u00a0\u00a0\u00a01. [Pandas'ta zaman dizisi yeniden \u00f6rnekleme](#31)---\n1. [Pandas ile Veri Seti Manip\u00fclasyonu](#32)\n\u00a0\u00a0\u00a0\u00a01. [Veri seti indeksleme](#33)\n\u00a0\u00a0\u00a0\u00a01. [Veris setini dilimleme](#34)\n\u00a0\u00a0\u00a0\u00a01. [Veri setini filtreleme](#35)\n\u00a0\u00a0\u00a0\u00a01. [Veri d\u00f6n\u00fc\u015f\u00fcm\u00fc](#36)\n\u00a0\u00a0\u00a0\u00a01. [\u0130ndeks nesneleri ve etiketli veri](#37)\n\u00a0\u00a0\u00a0\u00a01. [Hiyerar\u015fik indeksleme](#38)\n\u00a0\u00a0\u00a0\u00a01. [Veri setini d\u00f6nd\u00fcrme](#39)\n\u00a0\u00a0\u00a0\u00a01. [\u0130stiflenmi\u015f ve istiflenmemi\u015f veri seti](#40)\n\u00a0\u00a0\u00a0\u00a01. [Melting veri seti](#41)\n\u00a0\u00a0\u00a0\u00a01. [Categorical ve groupby](#42)\n1. Veri G\u00f6rselle\u015ftirme\n    1. Seaborn: https:\/\/www.kaggle.com\/kanncaa1\/seaborn-for-beginners\n    1. Bokeh 1: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-1\n    1. Rare Visualization: https:\/\/www.kaggle.com\/kanncaa1\/rare-visualization-tools\n    1. Plotly: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n1. Makine \u00d6\u011frenmesi\n    1. https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\/\n1. Derin \u00d6\u011frenme\n    1. https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\n1. Zaman Serileri Tahmini\n    1. https:\/\/www.kaggle.com\/kanncaa1\/time-series-prediction-tutorial-with-eda\n1. \u0130statistik\n    1. https:\/\/www.kaggle.com\/kanncaa1\/basic-statistic-tutorial-for-beginners\n1. Pytorch ile Derin \u00d6\u011frenme\n    1. Yapay Sinir A\u011flar\u0131: https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers\n    1. Konvol\u00fcsyonel Sinir A\u011flar\u0131: https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers\n    1. Yinelenen Sinir A\u011flar\u0131: https:\/\/www.kaggle.com\/kanncaa1\/recurrent-neural-network-with-pytorch","6e8ed700":"<a id=\"27\"><\/a> <br>\n### EN BA\u015eTAN VER\u0130 SET\u0130 \u0130N\u015eA ETMEK\n* Daha \u00f6nce yapt\u0131\u011f\u0131m\u0131z gibi csv'den veri setini olu\u015fturabiliriz.\n* Ayr\u0131ca s\u00f6zl\u00fcklerden veri seti olu\u015fturabiliriz\n    * zip() methodu: Bu methoud, i-inci listesinin arg\u00fcman dizilerinin veya yinelemelerin her birinden i-inci \u00f6\u011fesini i\u00e7erdi\u011fi bir tuple listesi d\u00f6nd\u00fcr\u00fcr.\n* Yeni bir s\u00fctun eklemek\n* Broadcasting: Yeni s\u00fctun olu\u015ftur ve s\u00fctunun tamam\u0131na bir de\u011fer atar","47425992":"<a id=\"33\"><\/a> <br>\n### VER\u0130 SET\u0130N\u0130 \u0130NDEKLEME\n* K\u00f6\u015feli parantez kullanarak indeksleme\n* S\u00fctun niteli\u011fini ve sat\u0131r etiketini kullanma\n* Loc eri\u015fimcisini kullanma\n* Sadece belirli s\u00fctunlar\u0131 se\u00e7me","3b167840":"<a id=\"16\"><\/a> <br>\n# 3. Veri Temizleme","a52bec3f":"<a id=\"39\"><\/a> <br>\n### VER\u0130 SET\u0130N\u0130 D\u00d6ND\u00dcRME\n* pivoting: yeniden \u015fekillendirme arac\u0131","50de49f9":"<a id=\"19\"><\/a> <br>\n### G\u00d6RSEL KE\u015eFED\u0130C\u0130 VER\u0130 \u00c7\u00d6Z\u00dcMLEMES\u0130\n\n* Box plots: Kutu \u00e7izimler: ayk\u0131r\u0131 de\u011ferler, min \/ max veya nicelikler gibi temel istatistikleri g\u00f6rselle\u015ftirelim.","ad83afc0":"<a id=\"14\"><\/a> <br>\n### Y\u0130NELEY\u0130C\u0130LER (ITERATORS)\n* yineleyebilir, yineleyici d\u00f6nd\u00fcren bir nesnedir\n* yineleyebilir: iter() methodu ile ili\u015fkili bir objedir.\n<br>\u00d6rne\u011fin: liste, string ve s\u00f6zl\u00fckler\n*  yineleyici: next () y\u00f6ntemiyle bir sonraki de\u011feri \u00fcretir\n","cb40ef88":"<a id=\"11\"><\/a> <br>\n### VARSAYILAN ve ESNEK PARAMETRELER\n* Varsay\u0131lan parametre \u00f6rne\u011fi:\n<br> def f(a, b=1):\n        \"\"\" b = 1 varsay\u0131lan parametredir \"\"\"\n* Esnek parametre \u00f6rne\u011fi:\n<br> def f(*args):\n       \"\"\" *args bir veya daha fazla olabilir\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs ise s\u00f6zl\u00fckt\u00fcr\"\"\"\n       \n<br><br> hadi biraz da pratik i\u00e7in kod yazal\u0131m.","70d37502":"In this part, you learn:\nBu b\u00f6l\u00fcmde \u015funlar\u0131 \u00f6\u011frendik:\n* Diagnose data for cleaning\n* Temizleme i\u00e7in verileri te\u015fhis etme\n* Ke\u015ffedici veri \u00e7\u00f6z\u00fcmlemesi\n* G\u00f6rsel ke\u015ffedici veri \u00e7\u00f6z\u00fcmlemesi\n* D\u00fczenli veri\n* Verilerin eksenel d\u00f6nd\u00fcr\u00fclmesi\n* Veri setlerini birle\u015ftirme\n* Veri tipleri\n* Eksik veriler ve Assert ile test","58c43836":"<a id=\"38\"><\/a> <br>\n### H\u0130YERAR\u015e\u0130K \u0130NDEKSLEME\n* \u0130ndekslemeyi ayarlama","46507730":"<a id=\"23\"><\/a> <br>\n### VER\u0130 T\u0130PLER\u0130\nBurada 5 temel farkl\u0131 veri tipi vard\u0131r: nesne(string),booleab,  integer, float ve categorical.\n<br> Str'den kategorik veya int'den float'a gibi verileri t\u00fcrlerinde d\u00f6n\u00fc\u015f\u00fcm yapabiliriz\n<br> Category neden \u00f6nemli ? \n* haf\u0131zada daha k\u00fc\u00e7\u00fck veri \u00e7er\u00e7evesi yapar\n* \u00d6zellikle sklearn'de analiz i\u00e7in kullan\u0131labilir (daha sonra \u00f6\u011frenece\u011fiz)","ebc4ade4":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB\nMatplot, verileri \u00e7izmemize yard\u0131mc\u0131 olan bir python k\u00fct\u00fcphanesidir. En basit ve kolay \u00e7izimler, \u00e7izgi, da\u011f\u0131l\u0131m ve histogram grafikleridir.\n* X ekseni zaman\u0131 g\u00f6sterdi\u011finde oldu\u011funda \u00e7izgi grafi\u011fi daha iyidir.\n* \u0130ki de\u011fi\u015fken aras\u0131nda korelasyon oldu\u011funda da\u011f\u0131l\u0131m daha iyidir.\n* Say\u0131sal verilerin da\u011f\u0131l\u0131m\u0131n\u0131 g\u00f6rmemiz gerekti\u011finde histogram daha iyidir.\n* \u00d6zelle\u015ftirme: Renkler, etiketler, \u00e7izgi kal\u0131nl\u0131\u011f\u0131, ba\u015fl\u0131k, opakl\u0131k, \u0131zgara, \u015fekil, eksen ve \u00e7izgi stilleri","cf7e952f":"<a id=\"21\"><\/a> <br>\n### VER\u0130LER\u0130 \u00c7EV\u0130RMEK\nmelt'lemenin tersi.","9b583e47":"<a id=\"29\"><\/a> <br>\n### \u0130STAT\u0130ST\u0130KSEL KE\u015eFED\u0130C\u0130 VER\u0130 \u00c7\u00d6Z\u00dcMLEMES\u0130\nBunu daha \u00f6nceki b\u00f6l\u00fcmlerde a\u00e7\u0131klam\u0131\u015ft\u0131m. Ancak bir kez daha bakal\u0131m.\n\n* count: girdilerin say\u0131s\u0131\n* mean: girdilerin ortalamas\u0131\n* std: standart sapma\n* min: minimum giri\u015f\n* % 25: ilk \u00e7eyrek\n* % 50: medyan veya ikinci derece\n* % 75: \u00fc\u00e7\u00fcnc\u00fc \u00e7eyrek\n* max: maksimum giri\u015f\n\n<br>Hat\u0131rl\u0131yorsunuz umar\u0131m :)\n","2b3936d7":"<a id=\"36\"><\/a> <br>\n### VER\u0130 D\u00d6N\u00dc\u015e\u00dcM\u00dc\n* Normal python fonksiyonlar\u0131\n* Lambda fonksiyonu: her bir \u00f6\u011feye rastgele python i\u015flevi uygulamak\n* Di\u011fer s\u00fctunlar\u0131 kullanarak s\u00fctun tan\u0131mlama","fd52e330":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS TEMELLER\u0130 ","70c30408":"<a id=\"34\"><\/a> <br>\n### VER\u0130 SET\u0130N\u0130 D\u0130L\u0130MLEME\n* Serileri dilimleme ve indeksleme\n    * Seriler ve veri setleri\n* Serileri dilimleme ve indeksleme\n* Tersten dilimleme\n* Bir \u015feyden sonra","0ee2df52":"<a id=\"31\"><\/a> <br>\n### PANDAS ZAMAN D\u0130Z\u0130S\u0130N\u0130 YEN\u0130DEN \u00d6RNEKLEME\n* Resampling: Farkl\u0131 zaman aral\u0131klar\u0131nda istatistiksel y\u00f6ntem\n* S\u0131kl\u0131\u011f\u0131 belirtmek i\u00e7in   \"M\" = month or \"A\" = year gibi string nesnelere ihtiyac\u0131m\u0131z var.\n* Downsampling: date-time sat\u0131rlar\u0131n\u0131 g\u00fcnl\u00fckten haftal\u0131\u011fa do\u011fru biraz daha seyrek frekansa indirme\n* Upsampling: date-time sat\u0131rlar\u0131n\u0131n s\u0131kl\u0131\u011f\u0131 artt\u0131rma (g\u00fcnl\u00fckten saatli\u011fe do\u011fru)\n* Interpolate:  'Linear', \"time\" veya 'index' gibi farkl\u0131 y\u00f6ntemlere g\u00f6re de\u011ferleri d\u00fczenleme eksikleri doldurma\n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n","b5a3b482":"<a id=\"24\"><\/a> <br>\n### KAYIP VER\u0130LER ve ASSERT \u0130LE TEST\nEksik veriler ile kar\u015f\u0131la\u015f\u0131rsak neler yapabiliriz :\n* oldu\u011fu gibi b\u0131rakabiliriz,\n* g\u00f6rmezden gelip dropna() methodu ile veri setinden \u00e7\u0131karabiliriz,\n* fillna() methodu ile eksik verileri doldurabiliriz,\n* veya eksik de\u011ferleri, ortalama gibi test istatistikleriyle doldurabiliriz.\n<br>Assert ifadesi: Program\u0131n test edilmesini bitirdi\u011finizde a\u00e7\u0131p kapatabilece\u011finizi kontrol edin."}}