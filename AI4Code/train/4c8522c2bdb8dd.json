{"cell_type":{"3e463f94":"code","8abe1ee1":"code","6f0ff290":"code","884449bb":"code","04e33f1c":"markdown","6c250a1c":"markdown","fa36f256":"markdown","5eef1001":"markdown"},"source":{"3e463f94":"from numpy import asarray\nfrom pandas import read_csv\nfrom pandas import DataFrame\nfrom pandas import concat\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom matplotlib import pyplot\n\nimport warnings\nwarnings.filterwarnings('ignore')","8abe1ee1":"def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n\tn_vars = 1 if type(data) is list else data.shape[1]\n\tdf = DataFrame(data)\n\tcols = list()\n\tfor i in range(n_in, 0, -1):\n\t\tcols.append(df.shift(i))\n\tfor i in range(0, n_out):\n\t\tcols.append(df.shift(-i))\n\tagg = concat(cols, axis=1)\n\tif dropnan:\n\t\tagg.dropna(inplace=True)\n\treturn agg.values\n\ndef train_test_split(data, n_test):\n\treturn data[:-n_test, :], data[-n_test:, :]\n\ndef xgboost_forecast(train, testX):\n\ttrain = asarray(train)\n\ttrainX, trainy = train[:, :-1], train[:, -1]\n\tmodel = XGBRegressor(objective='reg:squarederror', n_estimators=1000)\n\tmodel.fit(trainX, trainy)\n\tyhat = model.predict(asarray([testX]))\n\treturn yhat[0]\n\ndef walk_forward_validation(data, n_test):\n\tpredictions = list()\n\ttrain, test = train_test_split(data, n_test)\n\thistory = [x for x in train]\n\tfor i in range(len(test)):\n\t\ttestX, testy = test[i, :-1], test[i, -1]\n\t\tyhat = xgboost_forecast(history, testX)\n\t\tpredictions.append(yhat)\n\t\thistory.append(test[i])\n\t\tprint('expected=%.1f, predicted=%.1f' % (testy, yhat))\n\terror = mean_absolute_error(test[:, -1], predictions)\n\treturn error, test[:, -1], predictions","6f0ff290":"path = '..\/input\/dailytotalfemalebirths\/daily-total-female-births.csv'\nseries = read_csv(path, header=0, index_col=0)\nvalues = series.values\n\ndata = series_to_supervised(values, n_in=6)\n\nmae, y, yhat = walk_forward_validation(data, 12)\nprint('MAE: %.3f' % mae)","884449bb":"pyplot.plot(y, label='Expected')\npyplot.plot(yhat, label='Predicted')\npyplot.legend()\npyplot.show()","04e33f1c":"# Implementation","6c250a1c":"# Training","fa36f256":"# California Births using XGBoost","5eef1001":"# Plot"}}