{"cell_type":{"2230a644":"code","2de359a9":"code","fc224b38":"code","11a19e9d":"code","f75b1c7d":"code","96f2795e":"code","f3cfb4be":"code","69f0e489":"code","dcf94192":"markdown","d94d6636":"markdown","c763d605":"markdown","dadbf90b":"markdown","53241217":"markdown","d6130011":"markdown"},"source":{"2230a644":"import pandas as pd\n#Random Forest Regressor - A random forest is a meta estimator that fits a number of classifying decision trees \n# on various sub-samples of the dataset and use averaging to improve the predictive accuracy and control over-fitting.\nfrom sklearn.ensemble import RandomForestRegressor\n# Mean absolute error regression loss\nfrom sklearn.metrics import mean_absolute_error\n# Split arrays or matrices into random train and test subsets\nfrom sklearn.model_selection import train_test_split\n# Imputation transformer for completing missing values.\nfrom sklearn.impute import SimpleImputer\n","2de359a9":"# path to the file to read\niowa_file_path = '..\/input\/train.csv'\n# read into a PD DataFrame\nhome_data = pd.read_csv(iowa_file_path)\n\n# y\nhome_target = home_data.SalePrice\n# X\nhome_predictors = home_data.drop(['SalePrice'], axis=1)\n# For simplicity we try only with numeric predictors\nhome_num_predictors = home_predictors.select_dtypes(exclude=['object'])","fc224b38":"# Understand data, check missing values @ count\n\nmissing_val_count_by_column = (home_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","11a19e9d":"X_train, X_test, y_train, y_test = train_test_split(home_num_predictors, home_target, train_size=0.7, test_size=0.3, random_state=0) \n\ndef score_dataset(X_train, X_test, y_train, y_test):\n    model = RandomForestRegressor()\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    return mean_absolute_error(y_test, preds)","f75b1c7d":"cols_with_missing = [ col for col in X_train.columns if X_train[col].isnull().any()]\nreduced_X_train = X_train.drop(cols_with_missing, axis=1)\nreduced_X_test = X_test.drop(cols_with_missing, axis=1)\nprint(\"Mean Absolute Error from dropping columns with Missing Values:\")\nprint(score_dataset(reduced_X_train, reduced_X_test, y_train, y_test))","96f2795e":"my_imputer = SimpleImputer()\nimputed_X_train = my_imputer.fit_transform(X_train)\nimputed_X_test = my_imputer.transform(X_test)\nprint(\"Mean Absolute Error from Imputation:\")\nprint(score_dataset(imputed_X_train, imputed_X_test, y_train, y_test))","f3cfb4be":"imputed_X_train_plus = X_train.copy()\nimputed_X_test_plus = X_test.copy()\n\ncols_with_missing = [col for col in X_train.columns if X_train[col].isnull().any()]\n\nfor col in cols_with_missing:\n    imputed_X_train_plus[col + '_was_missing'] = imputed_X_train_plus[col].isnull()\n    imputed_X_test_plus[col + '_was_missing'] = imputed_X_test_plus[col].isnull()\nX_columns = imputed_X_train_plus.columns\ny_columns =imputed_X_test_plus.columns\n\nmy_imputer = SimpleImputer()\nimputed_X_train_plus = pd.DataFrame(my_imputer.fit_transform(imputed_X_train_plus))\nimputed_X_test_plus = pd.DataFrame(my_imputer.transform(imputed_X_test_plus))\nimputed_X_train_plus.columns = X_columns\nimputed_X_test_plus.columns = y_columns\n\nprint(\"Mean Absolute Error from Imputation while Track What Was Imputed:\")\nprint(score_dataset(imputed_X_train_plus, imputed_X_test_plus, y_train, y_test))\n","69f0e489":"#path to file for prediction\ntest_data_path = '..\/input\/test.csv'\n\n#read test data using pandas\ntest_data = pd.read_csv(test_data_path)\ntest_data = test_data.select_dtypes(exclude=['object'])\n\ntest_data_plus = test_data.copy()\n\nfor col in cols_with_missing:\n    test_data_plus[col + '_was_missing'] = test_data_plus[col].isnull()\ntest_columns = test_data_plus.columns\ntest_data_plus = pd.DataFrame(my_imputer.fit_transform(test_data_plus))\ntest_data_plus.columns = test_columns\n\nmodel = RandomForestRegressor()\nmodel.fit(imputed_X_train_plus, y_train)\ntest_preds = model.predict(test_data_plus)\n\n# The lines below shows you how to save your data in the format needed to score it in the competition\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\n\noutput.to_csv('submission.csv', index=False)","dcf94192":"### Get Score from Imputation with Extra Columns Showing What Was Imputed","d94d6636":"### Submit to competition, read \"test\" and predict","c763d605":"# Compare the solutions of missing values for House Prices Competition\nMore details in the Machine Learning training material Part 2 \n\n[Welcome to Machine Learning](https:\/\/www.kaggle.com\/learn\/machine-learning)","dadbf90b":"### Get Model Score from Dropping Columns with Missing Values ","53241217":"### Create Function to Measure Quality of An Approach\nWe divide our data into **training** and **test**. \n\nWe've loaded a function `score_dataset(X_train, X_test, y_train, y_test)` to compare the quality of diffrent approaches to missing values. This function reports the out-of-sample MAE score from a RandomForest.","d6130011":"### Get model score from imputation"}}