{"cell_type":{"a48bf758":"code","8489ae03":"code","3611ddd9":"code","fd34c27d":"code","d64cb06f":"code","6ecd00ab":"code","fedd6dba":"code","e04d7491":"code","2fbf6eb5":"code","9b9663c3":"code","1705d54c":"code","ae4fbaf8":"code","b94ab147":"code","7051e1cd":"code","544df0e0":"code","6bc1e498":"code","8f30db4a":"code","00dcc7e6":"code","0d835fc5":"markdown","320a7ff8":"markdown","37014747":"markdown","87d7f57a":"markdown","5fca2a06":"markdown"},"source":{"a48bf758":"import numpy as np\nimport pandas as pd\nimport missingno as mno\nimport math","8489ae03":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test","3611ddd9":"df_train.head()","fd34c27d":"df_train.tail()","d64cb06f":"df_train.info()","6ecd00ab":"mno.matrix(df_train, figsize = (20, 6))","fedd6dba":"df_train.drop([\"Cabin\", \"Name\", \"Ticket\"], axis=1, inplace=True)","e04d7491":"# Now split complete into age_train (where Age is set), and age_null (Where we need to set age)\ndf_age_null = df_train[df_train['Age'].isna()].drop([\"Sex\", \"Embarked\"], axis=1)\n\ndf_age_complete = df_train[df_train['Age'].notna()].drop([\"Sex\", \"Embarked\"], axis=1)\n\ndf_age_complete.info()\ndf_age_null.info()\n","2fbf6eb5":"# Now model for Age\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nageImputer = IterativeImputer(random_state=42,\n min_value=(\n     df_age_complete[\"Pclass\"].nsmallest(n=1),\n     df_age_complete[\"SibSp\"].nsmallest(n=1),\n     df_age_complete[\"Parch\"].nsmallest(n=1),\n     df_age_complete[\"Fare\"].nsmallest(n=1),\n     df_age_complete[\"Age\"].nsmallest(n=1)),\n max_value=(\n     df_age_complete[\"Pclass\"].nlargest(n=1),\n     df_age_complete[\"SibSp\"].nlargest(n=1),\n     df_age_complete[\"Parch\"].nlargest(n=1),\n     df_age_complete[\"Fare\"].nlargest(n=1),\n     df_age_complete[\"Age\"].nlargest(n=1)))\n\n# preprocessing complete dataset\ntruth = df_age_complete.to_numpy()\ndimW = 5 # I have 5 features, Pclass through Fare\nX = np.ones((truth.shape[0],dimW))\nX[:,0] = truth[:,2] # Pclass\nX[:,1] = truth[:,4] # SibSp\nX[:,2] = truth[:,5] # Parch\nX[:,3] = truth[:,6] # Fare\nX[:,4] = truth[:,3] # Age\nageImputer.fit(X)\n\nresult = ageImputer.transform(df_age_null.drop([\"PassengerId\", \"Survived\"], axis=1))\nmissing_idxs = df_age_null.index.values.tolist()\nfor i in range(0,len(result)):\n  df_train.loc[missing_idxs[i],'Age'] = result[i][4]\n\n","9b9663c3":"df_train.info()\n# We understand here that someone who did not Embark the Titanic did survive, presumably because they never boarded.\ndf_train[df_train['Embarked'].isna()]\nprint(\"----\")\ndf_test.info()\ndf_test['Embarked'].unique()\n# We can see here that all test subjects embarked the Titanic... moving on","1705d54c":"# Now we need to create a classification model for people who survived the titanic sinking\n# We'll fit the model to the df_train\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nX = df_train.drop([\"PassengerId\", \"Survived\", \"Embarked\", \"Sex\"], axis=1)\n\n#X[\"Sex\"].replace('male', 0, inplace=True)\n#X[\"Sex\"].replace('female', 1, inplace=True)\n#display(X[\"Sex\"].unique())\n\ny = df_train[\"Survived\"]\nX.info()\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size = 0.2)\n\n# Finding the best K\n\nmax_k = 25\nscores = np.empty(max_k+1)\nmodels = []\n\nfor k in range(0, max_k+1):\n    models.append(None)\n\nfor k in range(1, max_k+1):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    score = knn.score(X_test, y_test)\n    print(str(k) + \" score: \" + str(score))\n    scores[k] = score\n    models[k] = knn\n","ae4fbaf8":"import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, max_k, step=1)\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, scores[xi], marker='o', linestyle='--', color='b')\n\nplt.xlabel('K Value')\nplt.xticks(np.arange(1, max_k+1, step=1)) #change from 0-based array index to 1-based human-readable label\nplt.ylabel('Accuracy Score (%)')\nplt.title('Accuracy Score by K')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, '95% cut-off threshold', color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","b94ab147":"best_knn_model = 1\nbest_score = 0\nfor k in range(1, max_k+1):\n    if scores[k] > best_score:\n        best_score = scores[k]\n        best_knn_model = k\n\nprint(\"Best K: \" + str(best_knn_model) + \" w\/ Score: \" + str(best_score))","7051e1cd":"df_test.info()","544df0e0":"mno.matrix(df_test, figsize = (20, 6))","6bc1e498":"# Use SimpleImputer to fill in the unknown Fare\nfrom sklearn.impute import SimpleImputer\n\ndf_test_complete = df_test[df_test['Fare'].notna()].drop([\"Cabin\", \"Ticket\", \"Embarked\", \"Age\", \"Sex\", \"Name\", \"PassengerId\"], axis=1)\ndf_test_nullFare = df_test[df_test['Fare'].isna()].drop([\"Cabin\", \"Ticket\", \"Embarked\", \"Age\", \"Sex\", \"Name\", \"PassengerId\"], axis=1)\nfareImputer = SimpleImputer(strategy='mean')\nfareImputer.fit(df_test_complete)\nresult = fareImputer.transform(df_test_nullFare)\n\nmissing_idxs = df_test_nullFare.index.values.tolist()\nfor i in range(0,len(result)):\n  df_test.loc[missing_idxs[i],'Fare'] = result[i][3]\n\ndf_test.info()","8f30db4a":"# Re using the previously built ageImputer\n\ndf_test_age_complete = df_test[df_test['Age'].notna()].drop([\"Cabin\", \"Ticket\", \"Embarked\", \"Sex\", \"Name\", \"PassengerId\"], axis=1)\ndf_test_age_null = df_test[df_test['Age'].isna()].drop([\"Cabin\", \"Ticket\", \"Embarked\", \"Sex\", \"Name\", \"PassengerId\"], axis=1)\n\nresult = ageImputer.transform(df_test_age_null)\nmissing_idxs = df_test_age_null.index.values.tolist()\nfor i in range(0,len(result)):\n  df_test.loc[missing_idxs[i],'Age'] = result[i][4]\n\ndf_test.info()","00dcc7e6":"knn = models[best_knn_model]\nX_predict = df_test.drop([\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\", \"Embarked\", \"Sex\"], axis=1)\n\ny_predict = knn.predict(X_predict)\ndf_output = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': 0})\n\npredicted_idxs = df_test.index.values.tolist()\nfor i in range(0,len(y_predict)):\n  df_output.loc[predicted_idxs[i],'Survived'] = y_predict[i]\n\ndf_output.to_csv('knn_submission.csv', index=False)","0d835fc5":"# Impute on the Test Dataset\n\nI need to impute Age and Fare on df_test as my model is based on these","320a7ff8":"## Imputing Age","37014747":"We can see from this nullity matrix that Age has the most sparse nullity of non-complete features.  We also see that the Cabin feature has a high measure of nullity, and Embarked is only missing a couple entries.\n\nI'll seek to impute Age using a clustering algorithm,\n\nI'll drop Cabin as it's nullity is too large to be inferred.\n\nI'll drop Name as I find it's value to be irrelevant when given to the model.\n\nI'll drop Ticket as there are too many unique values for the feature to have significance in the dataset.\n\nI'll remove entries where Embarked is NaN later in the notebook- If someone didn't board the ship, they definitely survived the ship's sinking.","87d7f57a":"# Solving against the test dataset","5fca2a06":"# EDA of Training Set"}}