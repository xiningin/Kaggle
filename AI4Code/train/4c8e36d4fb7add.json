{"cell_type":{"1384ec85":"code","41275cb8":"code","080a2589":"code","da180997":"code","0aad0e50":"code","5fb15c3b":"code","9bc8d1cf":"code","11a5a735":"code","5671b1a8":"code","32b7f555":"code","568b5bab":"code","28a080de":"code","e6c9eb06":"code","6cdbffa5":"code","b9f284b6":"code","31d000ad":"code","ab861d02":"code","51c528a4":"code","0d198236":"code","d12f1cc2":"code","6d7ead57":"code","57c67763":"code","22dbbaef":"code","29c001d5":"code","3381b6ab":"code","81c13992":"code","ec566090":"code","63ccde60":"code","1e9e4b32":"code","407f60e1":"markdown","cd3757d6":"markdown","5b04aa45":"markdown","29857709":"markdown","c38de638":"markdown","0789aa2f":"markdown","af5584ad":"markdown","3f32c984":"markdown","ff1a9818":"markdown","b266e915":"markdown","694240c4":"markdown","5a27189c":"markdown","0a8b304e":"markdown","34d1a0af":"markdown","a347dd12":"markdown","39701604":"markdown","7b949440":"markdown","1231a79f":"markdown","894c8a9c":"markdown","c8ee2307":"markdown","d55d84b4":"markdown","cc6842a7":"markdown","b06fe3a6":"markdown","a68839f8":"markdown","a276590a":"markdown","7956ced2":"markdown","bef8751c":"markdown","1336b107":"markdown","637af29b":"markdown","95fd11b7":"markdown","b0781dc9":"markdown"},"source":{"1384ec85":"def missing(df) : \n    missing_number = df.isnull().sum().sort_values(ascending = False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending = False)\n    missing_values = pd.concat([missing_number, missing_percent], axis = 1, keys = ['Missing_number', 'Missing_percent'])\n    return missing_values \n\ndef categorize(df) :\n    Quantitive_features = df.select_dtypes([np.number]).columns\n    Discrete_features = [col for col in Quantitive_features if len(df[col].unique()) < 10]\n    Continuous_features = [col for col in Quantitive_features if col not in Discrete_features]\n    Categorical_features = df.select_dtypes(exclude = [np.number]).columns\n    print(\"Quantitive feautres : {} \\nDiscrete features : {} \\nContinous features : {} \\nCategorical features : {}\\n\"\n     .format(Quantitive_features, Discrete_features, Continuous_features, Categorical_features))\n    print(\"Number of quantitive feautres : {} \\nNumber of discrete features : {} \\nNumber of continous features : {} \\nNumber of categorical features : {}\"\n     .format(len(Quantitive_features), len(Discrete_features), len(Continuous_features), len(Categorical_features)))\n    \ndef unique(df) : \n    tb1 = pd.DataFrame({'Columns' : df.nunique().index.tolist(), 'Number_of_Unique' : df.nunique().values.tolist(),\n                       'Unique_values' : np.array(df.apply(lambda x : x.unique()).values)})\n    return tb1\n    \ndef data_glimpse(df) :   \n    \n    # Dataset preview \n    print(\"1. Dataset Preview \\n\")\n    display(df.head())\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Columns imformation\n    print(\"2. Column Imformation \\n\")\n    print(\"Dataset have {} columns and {} rows\".format(df.shape[0], df.shape[1]))\n    print(\"\\n\") \n    print(\"Dataset Column name : {}\".format(df.columns.values))\n    print(\"\\n\")\n    categorize(df)\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Basic imformation table \n    print(\"3. Missing data table : \\n\")\n    display(missing(df))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"4. Number of unique value by column : \\n\")\n    display(unique(df))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"5. Describe table : \\n\")\n    display(df.describe(include = 'all'))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(df.info())\n    print(\"-------------------------------------------------------------------------------\\n\")","41275cb8":"# Data Analysis\nimport warnings \nwarnings.filterwarnings('ignore')\n    \nimport pandas as pd\nimport numpy as np\nimport os \nimport missingno as msno\n    \n# Data View\npd.options.display.max_columns = 200\n\n# Import Basic Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n    \n# Data Visualization : Plotly library \nimport cufflinks as cf\ncf.go_offline(connected = True )\n    \nimport plotly.express as px\n    \nimport plotly.graph_objects as go\nimport plotly.offline as pyo\npyo.init_notebook_mode()\n    \nfrom plotly.subplots import make_subplots \nimport plotly.figure_factory as ff ","080a2589":"df_raw = pd.read_csv(\"..\/input\/heartfailure\/heart.csv\")\ndf_raw.head()","da180997":"data_glimpse(df_raw)","0aad0e50":"Quantitive_features = df_raw.select_dtypes([np.number]).columns\nDiscrete_features = [col for col in Quantitive_features if len(df_raw[col].unique()) < 10 and col != 'HeartDisease']\nContinuous_features = [col for col in Quantitive_features if col not in Discrete_features + ['HeartDisease']]\nCategorical_features = df_raw.select_dtypes(exclude = [np.number]).columns\n\nprint(\"Quantitive_features : {}\\nDiscrete_features : {}\\nContinuous_features : {}\\nCategorical_features : {}\"\n     .format(Quantitive_features, Discrete_features, Continuous_features, Categorical_features))","5fb15c3b":"def Quantitive_Univariate_Plot(df, fea) : \n    fig = make_subplots(rows = 1, cols = 2)\n\n    fig.add_trace(go.Histogram(\n        x = df[fea],\n        name = 'Histogram'\n        ),\n        row = 1, col = 1\n    )\n\n    fig.add_trace(go.Box(\n        y = df[fea],\n        name = 'Box plot'\n        ),\n        row = 1, col = 2\n    )\n    fig.update_xaxes(title_text= \"Value\", row=1, col=1)\n    fig.update_xaxes(title_text= fea, row=1, col=2)\n    fig.update_yaxes(title_text= \"Count\", row=1, col=1)\n    fig.update_yaxes(title_text= \"Value\", row=1, col=2)\n    fig.show()\n    \ndef Categorical_Features_Univarate(df, fea) : \n    length = len(df[fea].value_counts().keys())\n    colors = px.colors.sequential.RdBu[:length]\n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x = df[fea].value_counts().keys(),\n        y = df[fea].value_counts(),\n        marker_color = colors))\n    fig.show()","9bc8d1cf":"for fea in Continuous_features : \n    Quantitive_Univariate_Plot(df_raw, fea)","11a5a735":"Categorical_Features_Univarate(df_raw, 'FastingBS')","5671b1a8":"for fea in Categorical_features : \n    Categorical_Features_Univarate(df_raw, fea)","32b7f555":"corr = df_raw.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ndf_mask = corr.mask(mask)\n\nfig = ff.create_annotated_heatmap(z=df_mask.to_numpy(), \n                                  x=df_mask.columns.tolist(),\n                                  y=df_mask.columns.tolist(),\n                                  colorscale=px.colors.diverging.RdBu,\n                                  hoverinfo=\"none\",\n                                  showscale=True, ygap=1, xgap=1\n                                 )\n\nfig.update_xaxes(side=\"bottom\")\n\nfig.update_layout(\n    title_text='Heatmap', \n    title_x=0.5, \n    width=1000, \n    height=1000,\n    xaxis_showgrid=False,\n    yaxis_showgrid=False,\n    xaxis_zeroline=False,\n    yaxis_zeroline=False,\n    yaxis_autorange='reversed',\n    template='plotly_white'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    if fig.layout.annotations[i].text == 'nan':\n        fig.layout.annotations[i].text = \"\"\n    fig.layout.annotations[i].font.size = 8\n\nfig.show()","568b5bab":"df_raw.head()","28a080de":"# Function for check heart disease rate \ndef heart_disease_rate(x) :\n    return round(x.mean()*100, 2)","e6c9eb06":"# categorize age features \nbins = [20, 30, 40, 50, 60, 70, 80]\nlabels = ['20~30', '30~40', '40~50', '50~60', '60~70', '70~80']\ndf_raw['age_cat'] = pd.cut(df_raw.Age, bins = bins, labels = labels)\ndf_raw.head()","6cdbffa5":"mul1 = df_raw.groupby(['age_cat', 'Sex'])['HeartDisease'].agg(heart_disease_rate)\nmul1","b9f284b6":"mul1 = mul1.reset_index()","31d000ad":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x = mul1.age_cat.unique(),\n    y = mul1.loc[mul1.Sex == 'F', 'HeartDisease'],\n    name = 'Female',\n    text = mul1.loc[mul1.Sex == 'F', 'HeartDisease'],\n    texttemplate = \"%{text}%\"))\nfig.add_trace(go.Bar(\n    x = mul1.age_cat.unique(),\n    y = mul1.loc[mul1.Sex == 'M', 'HeartDisease'],\n    name = 'Male',\n    text = mul1.loc[mul1.Sex == 'M', 'HeartDisease'],\n    texttemplate = \"%{text}%\"))\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Percentage or heart rate by Age decades and sex<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Age Decades\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Percentage of HeartDisease\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\nfig.show()","ab861d02":"df_raw['Cholesterol'].describe()","51c528a4":"q_0, q_4 ,q_7, q_100 = [df_raw['Cholesterol'].quantile(0), df_raw['Cholesterol'].quantile(0.4),\n                               df_raw['Cholesterol'].quantile(0.7), df_raw['Cholesterol'].quantile(1)]\n\nbins = [q_0, q_4, q_7, q_100]\nlabels = ['low', 'mid', 'high'] \ndf_raw['chol_cat'] = pd.cut(df_raw.Cholesterol, bins = bins, labels = labels)\ndf_raw.head()","0d198236":"mul2 = df_raw.groupby(['Sex', 'chol_cat'])['HeartDisease'].agg(heart_disease_rate)\nmul2","d12f1cc2":"mul2 = mul2.reset_index()","6d7ead57":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x = mul2.chol_cat.unique(),\n    y = mul2.loc[mul1.Sex == 'F', 'HeartDisease'],\n    name = 'Female',\n    text = mul2.loc[mul1.Sex == 'F', 'HeartDisease'],\n    texttemplate = \"%{text}%\"))\nfig.add_trace(go.Bar(\n    x = mul2.chol_cat.unique(),\n    y = mul2.loc[mul1.Sex == 'M', 'HeartDisease'],\n    name = 'Male',\n    text = mul2.loc[mul1.Sex == 'M', 'HeartDisease'],\n    texttemplate = \"%{text}%\"))\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Percentage or heart rate by Cholesterol and sex<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Cholesterol\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Percentage of HeartDisease\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\nfig.show()","57c67763":"mul3 = df_raw.groupby(['Sex','age_cat', 'chol_cat'])['HeartDisease'].agg(heart_disease_rate)\nmul3","22dbbaef":"Continuous_features","29c001d5":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = df_raw.loc[df_raw.HeartDisease == 0, 'MaxHR'],\n    y = df_raw.loc[df_raw.HeartDisease == 0, 'Age'],\n    mode = 'markers',\n    name = 'Non HeartDisease'))\nfig.add_trace(go.Scatter(\n    x = df_raw.loc[df_raw.HeartDisease == 1, 'MaxHR'],\n    y = df_raw.loc[df_raw.HeartDisease == 1, 'Age'],\n    mode = 'markers',\n    name = 'HeartDisease'))\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Scatter point of Heartdisease by Age and MaxHR<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"MaxHR\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Age\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\n\nfig.show()","3381b6ab":"Continuous_features","81c13992":"for fea in Continuous_features : \n    fig = go.Figure()\n    fig.add_trace(go.Box(\n        y = df_raw.loc[df_raw.HeartDisease == 0, fea],\n        name = 'Neg'))\n    fig.add_trace(go.Box(\n        y = df_raw.loc[df_raw.HeartDisease == 1, fea],\n        name = 'Pos'))\n    fig.update_layout(dict(\n        title = dict(text = \"Boxplot of {}\".format(fea),\n                     x = 0.5, y = 0.9)))\n\n    fig.show()","ec566090":"Categorical_features","63ccde60":"df_plot = df_raw.groupby(['Sex', 'HeartDisease'])['Age'].count().reset_index()\ndf_plot.rename(columns = {'Age' : 'Count'}, inplace = True)","1e9e4b32":"for fea in Categorical_features : \n    df_plot = df_raw.groupby([fea, 'HeartDisease'])['Age'].count().reset_index()\n    df_plot.rename(columns = {'Age' : 'Count'}, inplace = True)\n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x = df_plot[fea].unique(),\n        y = df_plot.loc[df_plot.HeartDisease == 0, 'Count'],\n        text = df_plot.loc[df_plot.HeartDisease == 0, 'Count'],\n        name = 'Neg'))\n    fig.add_trace(go.Bar(\n        x = df_plot[fea].unique(),\n        y = df_plot.loc[df_plot.HeartDisease == 1, 'Count'],\n        text = df_plot.loc[df_plot.HeartDisease == 1, 'Count'],\n        name = 'Pos'))\n    fig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Countplot of {} and HeartDisease<\/b>\".format(fea),   # Can add title value using .format()\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Category\",\n            \"showticklabels\":True,\n            \"tickfont\": {\n                \"size\": 10               \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Count\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n    )\n    fig.show()","407f60e1":"**Age - MaxHR - HeartDisease**","cd3757d6":"## Univariate visualization \n\n### Quantitive univariate features analysis\n\nWe will analyze continuous features 'Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak' with histogram and boxplot.","5b04aa45":"'MaxHR' and 'Oldpeak' has meaningful correlation with 'HeartDisease'","29857709":"'MaxHR' decrease by aging(Correlation between 'MaxHR' and 'Age' is about -0.38). And there are heart disease group in upper-left and non-heart disease group in lower-right.","c38de638":"**3. Age + Sex + Cholesterol**","0789aa2f":"# <center> Heart disease EDA ","af5584ad":"# Data Description\n\n## Datasource explaining \n\n1. Datasets name : \"heart.csv\" \n2. Datasets source :\n3. Datasets feature table : \n    \n    \n| Feature | Column name | Data type | \n| :---: | :---: | :---: | \n| Quantitve - Continuous | Age | int64 | \n| Categorical - Discrete | Sex | object64 | \n| Categorical - Discrete | ChestPainType | object64 | \n| Quantitve - Contiuous | RestingBP | int64 | \n| Quantitve - Contiuous | Cholesterol | int64 | \n| Quantitive - Discrete | FastingBS | boolean | \n| Categorical - Discrete | RestingECG | object64 | \n| Quantitve - Contiuous | MaxHR | int64 | \n| Categorical - Discrete| ExerciseAngina | object64 |  \n| Quantitive - Continuous  | Oldpeak | float64 | \n| Categorical - Discrete | ST_Slope | objec64 | \n| Target | Heart Disease | boolean | \n     \n     \n**My purpose : Before predicting herat disease, check which features decide heart disease.**","3f32c984":"# EDA + Visualization","ff1a9818":"### Categorical Analysis","b266e915":"### HeartDisease Rate anlaysis","694240c4":"- Age : we can see difference between Neg and Pos, heartdisease can occurs by aging.\n- RestingBP : There isn't significant difference between Neg and Pos.\n- Cholesterol : It is strange that lower cholesterol people's rate is higher.(In univariate analysis, 'cholesterol' have 0 values.) \n- MaxHR : we can see difference between Neg and Pos. The lower MaxHR the bigger HeartDisease. \n- OldPeak : we can see difference between Neg and Pos. The higher Oldpeak the bigger HeartDisease.(opposite to MaxHR)  ","5a27189c":"### Correlation","0a8b304e":"- Age : Men's heart disease rate is more higher than women.\n- Chestpain : Type 'ASY' and 'TA' occur heart disease more compare to other types.\n- RestingECG : Type 'ST' occurs heart disease two times more compare to other types.\n- ExerciseArgnina : In true value, there are 6 times of occuring\n- ST_Slope : Heart Disease is occurs in Flat and Down slope ","34d1a0af":"## Multivariate analysis","a347dd12":"## Domain Knowledge\n\n1. RestingBP  : pressure of circulating blood against the walls of blood vessels \n2. FastingBS : the result of a blood sample taken after a patient fast for at least eight hours.(Think as diabetes?)\n3. RestingECG : machine for detecting electrocardiogram\n4. MaxHR : maxiumum heart rate\n5. ExerciseAngina : triggered by physical activity","39701604":"## Library importing","7b949440":"## Function importing","1231a79f":"# Data Preprocessing","894c8a9c":"# Analysis Preparation","c8ee2307":"We will cut cholesterol by quantile.","d55d84b4":"# Data glimpse","cc6842a7":"### Quantitive Analysis","b06fe3a6":"## Function importing","a68839f8":"## Data importing ","a276590a":"In this result, there are more heart disease in high cholesterol group and there are more than 4 times rate between male and female. ","7956ced2":"**2. Sex + Cholesterol**","bef8751c":"**1. Age+Sex**","1336b107":"We will check heat disease rate by multi features to check which features effects heart diseas more. \n\n- Age + Sex\n- Sex + Cholesterol\n- Age + Sex + Cholesterol ","637af29b":"### Categorical univariate features analysis\nWe will analyze continuous features 'FastingBS', 'Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope' with countplot.","95fd11b7":"In male group, there are 100% hear diseas in 70~80 years old.   \nWe can know that Heart disease can be caused by aging and cholesterol.","b0781dc9":"In this chart, Male becomes more higher percentage of heart rate through age decades."}}