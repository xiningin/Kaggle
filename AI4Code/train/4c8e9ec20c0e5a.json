{"cell_type":{"38f8fa3a":"code","a65b59bf":"code","e57eca7e":"code","bc41446d":"code","8bd0d027":"code","0f0a34ff":"code","d20beea3":"code","1f4c0160":"code","ac7f47c1":"code","ea48a91b":"code","ec7dd744":"code","b408fbc8":"code","710730ab":"code","e549ce6e":"code","2ced6ab9":"code","e2eaf773":"code","2fd3a974":"code","1e5f42be":"code","517d67c8":"code","cfb72c39":"code","d514ad26":"code","66ff5314":"code","854590f3":"code","9e819a99":"code","0b103816":"code","452fba20":"markdown","0819ed20":"markdown","594181b3":"markdown","68b1a82a":"markdown","1d643550":"markdown","413a1641":"markdown","363619d3":"markdown","742a3f26":"markdown","99276e36":"markdown","54df2197":"markdown","5b888997":"markdown","b8b336c1":"markdown"},"source":{"38f8fa3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a65b59bf":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np","e57eca7e":"df_original = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\", parse_dates=[\"date\"])\ndf_original.head()","bc41446d":"df_original.info()","8bd0d027":"df = df_original.set_index([\"country\", \"date\"]).drop([\"source_name\",\"source_website\", \"iso_code\"], axis=1)\ndf.head()","0f0a34ff":"#total_vaccinations es el n\u00famero de vacunas administradas, \n#mientras que people_vaccinated es el n\u00famero total de personas vacunadas \n#(estos n\u00fameros pueden diferir porque hay )\ncond = df[\"total_vaccinations\"] == df[\"people_vaccinated\"]\ndisplay(df[~cond & ~df[\"total_vaccinations\"].isna()].head())\n\ncond = df[\"total_vaccinations\"] < df[\"people_vaccinated\"]\ndisplay(df[cond].head()) #cambiar por un assert #revisar","d20beea3":"countries = list(df.index.get_level_values(0).unique())\nprint(f\"Hay {len(countries)} paises distintos\")","1f4c0160":"vaccines = list(df[\"vaccines\"].unique())\nvaccines[0:5]","ac7f47c1":"vaccines[3]","ea48a91b":"vaccines1 = []\nfor lis in pd.Series(vaccines).str.split(\",\"):\n    vaccines1.extend(lis)","ec7dd744":"vaccines = pd.Series(vaccines1).str.strip().unique()\nprint(f\"Hay {len(vaccines)} vacunas diferentes:\")\nprint(vaccines)","b408fbc8":"cols_to_fill = [\"total_vaccinations\", \"people_vaccinated\", \"total_vaccinations_per_hundred\"] #falta escoger columnas #revisar \ndf.loc[:, cols_to_fill].fillna(method=\"ffill\", inplace=True)\n","710730ab":"countries_to_plot = pd.Series(countries).sample(20)\nsamples_bool = df.index.get_level_values(\"country\").isin(countries_to_plot)\ndf_to_plot = df[samples_bool]","e549ce6e":"x = sns.relplot(data=df_to_plot, x=\"date\", y=\"total_vaccinations\", hue=\"country\", style=\"country\")\nplt.title(\"20 Vacunaci\u00f3n de una muestra de 20 paises\");\n#rotar las etiquetas del eje y #revisar","2ced6ab9":"x = sns.relplot(data=df_to_plot, x=\"date\", y=\"total_vaccinations_per_hundred\", hue=\"country\", style=\"country\")\n#averiguar como poner ambas gr\u00e1ficas en una misma","e2eaf773":"first_dates_per_country = df_original.groupby(\"country\")[\"date\"].min()\nlast_dates_per_country = df_original.groupby(\"country\")[\"date\"].max()\nmex_first_date = first_dates_per_country[\"Mexico\"]\nstr_mex_first_date = mex_first_date.strftime(\"%Y-%m-%d\")\nbefore_mex = len(first_dates_per_country[first_dates_per_country < first_dates_per_country[\"Mexico\"]])\nafter_mex =len(first_dates_per_country[first_dates_per_country >= first_dates_per_country[\"Mexico\"]])\nprint(f\"M\u00e9xico empez\u00f3 a administrar vacunas en la fecha {str_mex_first_date} (yyyy-mm-dd).\")\nprint(f\"{before_mex} paises empezaron a vacunar antes de m\u00e9xico y {after_mex} paises empezaron a vacunar despu\u00e9s de m\u00e9xico.\")","2fd3a974":"time_per_country = (last_dates_per_country - first_dates_per_country)\n\ntotal_vaccines  =  df_original.groupby(\"country\")[\"total_vaccinations\"].max()\navg_total_vaccines_per_day = total_vaccines\/(time_per_country.dt.days + 1)\n\ntotal_vaccines_per_hundred = df_original.groupby(\"country\")[\"total_vaccinations_per_hundred\"].max()\navg_total_vaccines_hundred_per_day = total_vaccines_per_hundred\/(time_per_country.dt.days + 1)","1e5f42be":"avg_total_vaccines_per_day.sort_values(ascending=False).head(10).plot(kind=\"bar\")\nplt.xlabel(\"Pais\")\nplt.ylabel(\"Vacunas por d\u00eda\")\nplt.title(\"10 Paises que ha vacunado a m\u00e1s personas por d\u00eda\")\nplt.show()","517d67c8":"avg_total_vaccines_hundred_per_day.sort_values(ascending=False).head(10).plot(kind=\"bar\")\nplt.xlabel(\"Pais\")\nplt.ylabel(\"Promedio de vacunas por cada 100 personas diarias\")\nplt.title(\"10 Paises que ha vacunado a m\u00e1s personas por cada 100 por d\u00eda\")\nplt.show()","cfb72c39":"avg_total_vaccines_per_day.sort_values().head(10).plot(kind=\"bar\")\nplt.xlabel(\"Pais\")\nplt.ylabel(\"Vacunas por d\u00eda\")\nplt.title(\"10 Paises que ha vacunado a menos personas por d\u00eda\")\nplt.show()","d514ad26":"data = avg_total_vaccines_hundred_per_day.sort_values().head(10).plot(kind=\"bar\")\nplt.xlabel(\"Pais\")\nplt.ylabel(\"Promedio de vacunas por cada 100 personas diarias\")\nplt.title(\"10 Paises que ha vacunado a menos personas por cada 100 por d\u00eda\")\nplt.show()","66ff5314":"avg_total_vaccines_per_day_mex = avg_total_vaccines_per_day[\"Mexico\"]\navg_total_vaccines_hundred_per_day_mex = avg_total_vaccines_hundred_per_day[\"Mexico\"]\nprint(f\"M\u00e9xico administra {avg_total_vaccines_per_day_mex} en promedio por d\u00eda\")\nprint(f\"M\u00e9xico administra {avg_total_vaccines_hundred_per_day_mex} en promedio por d\u00eda por cada 100 personas\")\n\ncond1 = avg_total_vaccines_per_day.sort_values(ascending=False) > avg_total_vaccines_per_day_mex\nnum1 = len(avg_total_vaccines_per_day[cond1])\nprint(f\"En t\u00e9rminos absoultos, M\u00e9xico se encunetra en el lugar n\u00famero {num1}\/{len(countries)}\")\n\ncond2 = avg_total_vaccines_hundred_per_day.sort_values(ascending=False) > avg_total_vaccines_hundred_per_day_mex\nnum2 = len(avg_total_vaccines_hundred_per_day[cond2])\nprint(f\"En t\u00e9rminos relativos, M\u00e9xico se encuentra en el lugar n\u00famero {num2}\/{len(countries)}\")","854590f3":"vacc_dict = {}\nfor vacc in vaccines:\n    grouped = df[\"vaccines\"].groupby(\"country\").sum()\n    vacc_dict[vacc] = len(grouped[grouped.str.contains(vacc)])","9e819a99":"df_vacc = pd.DataFrame(list(vacc_dict.items()),columns = ['Vacuna', 'Cantidad'])\ndf_vacc","0b103816":"sns.catplot(data=df_vacc.sort_values(\"Cantidad\", ascending=False), x =\"Cantidad\", y=\"Vacuna\", kind=\"bar\")\nplt.title(\"Cantidad de paises en los que se ha administrado esa vacuna\")\nplt.xlabel(\"Cantidad de paises\")\nplt.show()","452fba20":"Ahora, realizaremos un peque\u00f1o an\u00e1lisis acerca de los promedios diarios de vacunaci\u00f3n, tanto en t\u00e9rminos absoultos como relativos (por cada 100 personas).","0819ed20":"Veremos c\u00f3mo est\u00e1 m\u00e9xico respecto a otros paises al empezar a vacunar. Comenzaremos analizando las primeras fechas de vacunaci\u00f3n. ","594181b3":"Continuaremos viendo cuantos son los pa\u00edses y cu\u00e1ntos\/cuales son los tipos de vacunas en el data frame. ","68b1a82a":"## An\u00e1lisis exploratorio de datos(EDA)\n\nPara comenzar, graficaremos el total de vacunaciones ($\\texttt{total\\-vaccinations}$) que ha habido en el tiempo por pa\u00eds. Para esto rellenaremos los valores faltantes con el valor inmediato anterior (forward fill). Tambi\u00e9n hay que considerar que si hacemos una gr\u00e1fica para cada pa\u00eds, sobrepoblar\u00edamos la gr\u00e1fica, entonces tomaremos un sample de 20 pa\u00edses. \n\n","1d643550":"Las vacunas est\u00e1n divididas por comas, as\u00ed que las contaremos de otra forma","413a1641":"Notemos que cada pa\u00eds puede tener m\u00e1s de una vacuna, por ejemplo \n$\\texttt{vacines[3]}$: \n","363619d3":"### Validaciones","742a3f26":"## Cargamos el data frame que vamos a estar trabajando","99276e36":"La vacuna Pfizer\/BioNTech es la que se ha administrado en m\u00e1s paises del mundo (74 pa\u00edses) y empatadas en \u00faltimo lugar, las vacunas que se han administrado en menos lugares del mundo han sido: Covaxin, EpiVacCorona y Johnson&Johnson. ","54df2197":"Notamos que el pa\u00eds y la fecha no tienen entradas faltantes, y son ideales para usarlos como identificador de nuestra entrada. As\u00ed que procedemos a ponerlos como \u00edndice. Adicionalmente, para el estudio que realizaremos, asumiremos que los datos son correctos (siempre que no haya evidencia de lo contrario), as\u00ed que para el an\u00e1lisis, nos desharemos de las \u00faltimas dos columnas. Por \u00faltimo, notamos que hay muchos datos faltantes en algunas columnas y muchos datos que en teor\u00eda dependen de otros datos, as\u00ed que deber\u00edamos realizar algunas validaciones. \n","5b888997":"## Importamos las librer\u00edas que necesitaremos","b8b336c1":"Por \u00faltimo, veremos qu\u00e9 vacunas han tenido m\u00e1s alcance al rededor del mundo. "}}