{"cell_type":{"a038a20b":"code","a05cc2fe":"code","d5adb352":"code","d8e309e0":"code","eb0dc0e3":"code","ed27be65":"code","63c73ae5":"code","a071972a":"code","ec1f8d32":"code","705146d2":"code","2d91ebc5":"code","f7034c12":"code","ead04620":"code","64afe0bb":"code","f9f76d21":"code","244d1973":"code","77d68dc9":"code","9f85a085":"code","06bcbc8e":"code","6b2382ef":"code","c0bd94f1":"markdown","ec282313":"markdown","778301ae":"markdown","da9faa87":"markdown","da5bb050":"markdown","e0b0cb33":"markdown","a69c2755":"markdown","d30e73b1":"markdown","5213cb6e":"markdown","6ba6db33":"markdown","3230f20a":"markdown","3de54527":"markdown","b3855cef":"markdown","2d9083eb":"markdown","6ecf8559":"markdown","7dd7e152":"markdown","d092bca4":"markdown","e51cd776":"markdown","b8b65ebc":"markdown","ecca4014":"markdown","55d49c1c":"markdown","40693ea3":"markdown"},"source":{"a038a20b":"import numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import train_test_split","a05cc2fe":"X_full = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\", index_col= 'Id')\nX_test_full = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\", index_col = 'Id')","d5adb352":"X_full.shape, X_test_full.shape","d8e309e0":"X_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)","eb0dc0e3":"X_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)","ed27be65":"X_train_full.shape, X_valid_full.shape, y_train.shape, y_valid.shape","63c73ae5":"categorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]","a071972a":"numerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]","ec1f8d32":"my_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","705146d2":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","2d91ebc5":"numerical_transformer = SimpleImputer(strategy='constant')","f7034c12":"categorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","ead04620":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","64afe0bb":"# Define model1\nmodel1 = RandomForestRegressor(n_estimators=800,random_state=20)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline1 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model1)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline1.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds1 = my_pipeline1.predict(X_valid)","f9f76d21":"# Define model2\nfrom sklearn.ensemble import GradientBoostingRegressor\nmodel2 = GradientBoostingRegressor(n_estimators=600, random_state=32)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline2 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model2)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline2.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds2 = my_pipeline2.predict(X_valid)","244d1973":"# Define model3\nimport catboost as cb\nmodel3 = cb.CatBoostRegressor(loss_function='RMSE',random_state=20,verbose=False)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline3 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model3)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline3.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds3 = my_pipeline3.predict(X_valid)","77d68dc9":"score = mean_absolute_error(y_valid, preds1)\nprint('MAE:', score)\nscore = mean_absolute_error(y_valid, preds2)\nprint('MAE:', score)\nscore = mean_absolute_error(y_valid, preds3)\nprint('MAE:', score)","9f85a085":"preds= (preds1+ preds2+ preds3)\/3\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","06bcbc8e":"# Preprocessing of test data, fit model\npreds_test1 = my_pipeline1.predict(X_test)\npreds_test2 = my_pipeline2.predict(X_test)\npreds_test3 = my_pipeline3.predict(X_test)\npreds_test = (preds_test1+preds_test2+ preds_test3 )\/3","6b2382ef":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test3})\noutput.to_csv('submission73.csv', index=False)","c0bd94f1":"<a id=\"2\"><\/a> <br>\n## 3 PREPROCESSING\n### 3.a Remove rows with missing target, separate target variable from feature variables\n.dropna() methods with axis=0 drops rows which has null value, here we have set subset=['SalePrice'] which means we drop all the rows whoose 'SalePrice' is null. This subset tells it to look at only 'SalePrice' columns.\nBasically here we are dropping all the rows in our dataset whoose target value is null as it is of no use in training our model.","ec282313":"Let's see the shape of our datasets by .shape attribute","778301ae":"<a id=\"2\"><\/a> <br>\n## 5 CREATE MODELS\nNow we create 3 different models and compare their results. \n\n(We can do hyperparameter tuning to even further fine tune our models using GridSeachCV, RandomizedSeachCV etc but for now we use the deafault models)\n### 5.a Model1:- RandomForestRegressor\nHere we create another pipeline which has two steps:- preprocessor and model1.\n\nWhen we do .fit() it fits and transform for the preprocessor and fits for model1.\n\nWhen we do .predict() it transform for the preprocessor and predicts for model1.\n\n(Note:- we can create our own custom objects for creating pipeline but that will be an advance topic)","da9faa87":"<a id=\"2\"><\/a> <br>\n### 3.b Split our data into train and validation","da5bb050":"<a id=\"2\"><\/a> <br>\n## 8 SUBMISSION","e0b0cb33":"<a id=\"1\"><\/a> <br>\n## 1 IMPORTS","a69c2755":"<a id=\"2\"><\/a> <br>\n## 4.a Preprocessing for numerical data\nLets use SimpleImputer to fill all missing values in our numerical columns","d30e73b1":"<a id=\"2\"><\/a> <br>\n## 4.b Preprocessing for categorical data\nFor categorical data we create pipeline for preprocessing\n1) We first fill all missing values with the most_frequent value in that column also called as the mode.\n\n2) We convert to one hot encoding.","5213cb6e":"## Introduction\n\nHello fellow Kagglers! In this notebook I will show you how you can achieve top 1% rank in most simple and efficient way. First of all I am really thankful to the amazing Kaggle community which helped me learn so many things. I have created this notebook for learning purposes and give back to community. So there might be areas which can be improved in future.\n\n#### My main objectives on this project are:\n+ Get to top 1% with minimum lines of code.\n+ Learn to use Pipeline.\n+ To explain each and every step and the logic behind it.\n+ Create our own prediction from scratch without using public kernels.\n+ Learn to using three models:- RandomForestRegressor, GradientBoostingRegressor, CatBoostRegressor.\n\n<a id='top'><\/a> <br>\n## NOTEBOOK CONTENT\n1. [IMPORTS](#1)\n1. [LOAD DATA](#2)\n1. [PREPROCESSING](#3)\n1. [IMPLEMENT PIPELINE](#4)\n1. [CREATE MODELS](#5)\n1. [SCORING](#6)\n1. [PREDICT TEST SET](#7)\n1. [SUBMISSION](#8)\n\n\n## If you like the notebook please <font color='red'><b>UPVOTE<\/b><\/font>, it really motivates me, thanks!.","6ba6db33":"<a id=\"2\"><\/a> <br>\n## 4.c Bundle preprocessing for numerical and categorical data\nWe use ColumnTransformer from sklearn, this lets us apply preprocessing on selected columns.\nHere we apply numerical_transformer on all the numerical columns and categorical_transformer on categorical columns.\n\n(Note:- numerical_cols is a list containing names of all numerical columns)","3230f20a":"We see their MAE are as follows:-\n\nRandomForestRegressor:-17226.008848458903\n\nGradientBoostingRegressor:-15563.235198675247\n\nCatBoostRegressor:-16001.783475611544\n<a id=\"2\"><\/a> <br>\n### 6.b Average of their predictions\nGenerally average of very different models with same score gives great boost on leaderboard.\n\nLogic:-Because if models have same score means they have same no of correct predictions and if the models are very much different means they are correct at different data points. Thus averaging their predictions increases no of correct predictions.","3de54527":"# End Note\n## Things you can try to improve performance.\n#### 1. Use hyperparameter tuning to find the best parameters\n#### 2. Use StandardScaler to scale all the features (Note: don't scale target variables)\n#### 3. Try using other model like XGBoostRegressor, Neural Network \n#####    (Remember: average of predictions of very different models like (tree base\/NN) with similar score will give great boost in performance)\n#### 4. When you get the best combination of models make a for loop and generate 50 different predictions using different random seeds and take its average. You will see there is some improvement in performance.\n## <font color='orange'><b>If you have any doubts feel free to ask below, I would be happy to help.<\/b><\/font>","b3855cef":"<a id=\"2\"><\/a> <br>\n## 3.e categorical_cols + numerical_cols\nwe create copies so that we don't tamper with the original dataset\n","2d9083eb":"<a id=\"2\"><\/a> <br>\n### 5.b Model2:- GradientBoostingRegressor","6ecf8559":"Clearly we can see that the averaging of predictions has improved our score.\n<a id=\"2\"><\/a> <br>\n## 7 PREDICT TEST SET\nThe real power of pipeline can be seen here. Now we don't need to preprocess test set separately. We will just do .predict() and it will automatically preprocess it.","7dd7e152":"<a id=\"2\"><\/a> <br>\n### 5.c Model3:- CatBoostRegressor","d092bca4":"<a id=\"2\"><\/a> <br>\n## 3.c Select categorical columns with relatively low cardinality.\nIn this problem we convert all the categorical columns into one hot encoding.\nNote:- If a categorical variable has 100 columns then its one hot encoding will create 100 new columns.So our data will become of high dimensional.\nThis makes training hard. This phenomena is called \n#### CURSE OF DIMENSIONALITY\nSo we first filter our categorical columns which has less than 10 unique values.\n\n(Note:- There are many other ways of tackling this issue, one method is we look at their frequencies, and combine values with less than .05% frequency into one category)","e51cd776":"<a id=\"2\"><\/a> <br>\n## 3.d Select numerical columns\nA numerical value can be either int type or float type","b8b65ebc":"<a id=\"2\"><\/a> <br>\n## 2 LOAD DATA","ecca4014":"We see X_full has 80 columns (all 79 features + 1 target variable) and X_test_full has 79 columns(all 79 features)","55d49c1c":"<a id=\"2\"><\/a> <br>\n## 4 IMPLEMENT PIPELINE\nPipeline is very useful it can save time.\n\nSome benefits of pipeline:-\n\n1) Cleaner code\n\n2) Fewer Bugs\n\n3) Easier to Productionize\n\n4) More options for Model Validation\n#### So lets implement pipeline\n### 4.a Imports","40693ea3":"<a id=\"2\"><\/a> <br>\n## 6 SCORING \n## 6.a Let's Look at MAE of each model"}}