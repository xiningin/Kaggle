{"cell_type":{"12054977":"code","b3255a5a":"code","eb147444":"code","0e54f9a8":"code","2f7b584a":"code","762b0ed7":"code","b7251673":"code","96a2aea1":"code","e8fe7b48":"code","9f8002d2":"code","444eac7a":"code","863afabd":"code","4d960bc5":"code","244b313f":"code","08ed41d7":"code","7c02013c":"code","796a0041":"markdown","dc574071":"markdown","50394d4c":"markdown","15072b16":"markdown","57a54267":"markdown","07958b5e":"markdown","f5e34561":"markdown","cd1ebc88":"markdown","ad1215fc":"markdown","348677ab":"markdown","21d9a711":"markdown","e80e9817":"markdown","75c98666":"markdown","c5e2a95d":"markdown"},"source":{"12054977":"%%javascript\n$.getScript('https:\/\/kmahelona.github.io\/ipython_notebook_goodies\/ipython_notebook_toc.js')","b3255a5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","eb147444":"#importing all the modules\/packages\nimport pandas as pd #Data operations\nimport numpy as np #Array and Data operations\n\nimport seaborn as sns #Visualization library\nimport matplotlib.pyplot as plt #Plot library\n\nfrom plotly import tools #Interavtive Visualization library\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\n\nimport folium #Interactive Maps Visualization library\nimport geopy\n\nimport warnings #for filtering warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","0e54f9a8":"#reading the CSV file from local\ndata = pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')\n#Getting information about the data\ndata.info()","2f7b584a":"data= data.drop(['url','address','reviews_list','listed_in(city)','menu_item'],axis=1) #drop unwanted columns\n\ndata=data.rename(columns={'approx_cost(for two people)':'approx_cost','listed_in(type)':'type'}) #rename columns for convinience\n\ndata['online_order']= data['online_order'].apply(lambda a: '1' if str(a)=='Yes' else '0') \ndata['online_order']= data['online_order'].astype('int') #Changing categorical features for statstical computation\n\ndata['book_table']=data['book_table'].apply(lambda b: '1' if str(b)=='Yes' else '0')\ndata['book_table']= data['book_table'].astype('int') #Changing categorical features for statstical computation\n\ndata['rate']=data['rate'].apply(lambda c: str(c).split('\/')[0]) #data formatting\ndata['approx_cost']=data['approx_cost'].apply(lambda d: str(d).replace(',',''))\n\ndata.dropna(subset=['rate','approx_cost','phone','dish_liked']) #dropping null values and cleaning data\ndata=data[data['rate']!='nan']\ndata=data[data['rate']!='NEW']\ndata=data[data['rate']!='-']\ndata=data[data['approx_cost']!='nan']\n\ndata['rate']=data['rate'].astype(float) #Changing datatype of features for statstical computation\ndata['votes']=data['votes'].astype(int) #Changing datatype of features for statstical computation\ndata['approx_cost']=data['approx_cost'].astype(int) #Changing datatype of features for statstical computation\n\ndata['phone']=data['phone'].apply(lambda f: '2' if len(str(f))>12 else '1') \ndata['phone']=data['phone'].astype('int')#Changing categorical features for statstical computation\n","762b0ed7":"data.info() ","b7251673":"print('Histogram from data : ')\ndata.hist(figsize=(10,8))\nplt.show()\n","96a2aea1":"#PDF Histogram Plots\n\nsns.FacetGrid(data, hue=\"book_table\").map(sns.distplot, \"rate\").add_legend()\nplt.show()\n\nsns.FacetGrid(data, hue=\"online_order\").map(sns.distplot, \"rate\").add_legend()\nplt.show()\n\nsns.FacetGrid(data, hue=\"book_table\").map(sns.distplot, \"approx_cost\").add_legend()\nplt.show()\n\nsns.FacetGrid(data, hue=\"online_order\").map(sns.distplot, \"approx_cost\").add_legend()\nplt.show()","e8fe7b48":"#Pair Plots\n\nplt.figure(figsize=(30,8))\nsns.set_style('whitegrid')\nsns.pairplot(data,hue=\"type\",vars=['rate','votes','approx_cost'])\nplt.title('Pair Plot')\nplt.show()","9f8002d2":"#SNS Histogram\n\nplt.figure(figsize=(20,8))\nsns.countplot(data['approx_cost'],hue='book_table',data=data)","444eac7a":"#SNS Histogram\n\nplt.figure(figsize=(20,8))\nsns.countplot(data['rate'],hue='online_order',data=data)","863afabd":"#Interactive donut charts\n\nlabels = data.type\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=data.rate, name=\"Type based Rating\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=data.approx_cost, name=\"Type based cost\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.3, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Pie chart evaluation : Type based\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Rating', x=0.20, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Cost', x=0.79, y=0.5, font_size=20, showarrow=False)])\nfig.show()","4d960bc5":"#Interactive donut charts\n\nlabels = data.type\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=data.book_table, name=\"Book Table\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=data.approx_cost, name=\"Online order\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.3, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Pie chart evaluation : Booking based\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='Book', x=0.21, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Online', x=0.80, y=0.5, font_size=20, showarrow=False)])\nfig.show()","244b313f":"#Interactive Histogram\n\nfig = px.histogram(data, x='location')\nfig.update_layout(\n    title_text=\"Location Histogram\")\nfig.show()","08ed41d7":"#Interactive Histogram\n\nfig = px.histogram(data, x=\"location\", color=\"type\")\nfig.update_layout(\n    title_text=\"Location Histogram with Type as Hue\")\nfig.show()","7c02013c":"#Interactive scatter plot\n\nfig = px.scatter(data, x=\"location\", y=\"rate\", color=\"type\",size='approx_cost')\nfig.update_layout(\n    title_text=\"Scatter plot based on Type\")\nfig.show()\n","796a0041":"**Data Operations: pandas, numpy**\n\n**Visualizations: seaborn, matplotlib**\n\n**Interactive Visualizations: plotly**\n\n**Interactive Map Visualizations: folium**\n","dc574071":"# About the Dataset\n\nThe basic idea of analyzing the Zomato dataset is to get a fair idea about the factors affecting the aggregate rating of each restaurant, establishment of different types of restaurant at different places, Bengaluru being one such city has more than 12,000 restaurants with restaurants serving dishes from all over the world. With each day new restaurants opening the industry has'nt been saturated yet and the demand is increasing day by day. Inspite of increasing demand it however has become difficult for new restaurants to compete with established restaurants. Most of them serving the same food. Bengaluru being an IT capital of India. Most of the people here are dependent mainly on the restaurant food as they don't have time to cook for themselves. With such an overwhelming demand of restaurants it has therefore become important to study the demography of a location. What kind of a food is more popular in a locality. Do the entire locality loves vegetarian food. If yes then is that locality populated by a particular sect of people for eg. Jain, Marwaris, Gujaratis who are mostly vegetarian. These kind of analysis can be done using the data, by studying different factors.\n\n\n***Source: https:\/\/www.kaggle.com\/himanshupoddar\/zomato-bangalore-restaurants***\n\n![image.png](attachment:image.png)\n","50394d4c":"The provided dataset is taken from famous restaurant booking and food delivery app called Zomato for Bangalore city which is a huge IT hub of India. This dataset has interesting features consolidated in one place like rating, approx cost, location, etc.\nThe aim of analyzing given dataset is to get insights in terms of popular locations, rating, cost, etc required for opening a restaurant\/service in Bangalore.","15072b16":"# Data Cleaning\n\nData Standardization, Cleaning and Deduplication\n","57a54267":"# Interactive Visualizations","07958b5e":"# Imports","f5e34561":"**Pair plots Observations:**\n* The data is highly overlapped so it is difficult to comment on the result, interactive visualizations in next slides would clarify the understandings.\n","cd1ebc88":"# Problem Statement","ad1215fc":"**Conclusions from Statistical Analysis:**\n* Delivery and Dine-out are preferred more than other types of restaurants in terms of cost for two people and rating\n* Book Table feature is used extensively for most of the restaurants\n* There are more online orders for rating between 3.6-4.1\n* Famous locations: Whitefield, Banashankari, ITPL, Basavgunadi\n","348677ab":"**Dual Histogram observations: **\n* There are more online orders for rating between 3.6-4.1\n","21d9a711":"# References\n\n\n* https:\/\/plot.ly\/graphing-libraries\/\n* https:\/\/pypi.org\/project\/folium\/\n* https:\/\/matplotlib.org\/3.1.1\/contents.html\n* https:\/\/scikit-learn.org\/stable\/documentation.html\n* https:\/\/www.youtube.com\/watch?v=vTFn9gWEtPA&list=LLXLE0rA0AG9b3jd-cLR8W1w&index=2&t=0s","e80e9817":"Table of Contents\n<div id=\"toc\"><\/div>","75c98666":"**Histogram plots Observations:**\n* Restaurants with high rating gets more table bookings\n* Rating is not dependent for online orders \n* For higher approx costs, less tables are booked\n* Online orders range upto rs.1000 for online orders","c5e2a95d":"# Statistics based Visualizations"}}