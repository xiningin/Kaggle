{"cell_type":{"15ebe12b":"code","e76fd270":"code","b7233887":"code","b249f825":"code","668a80f5":"code","10e8210e":"code","2f0248a9":"code","7d7cc51d":"code","10b2a6e6":"code","a11ff2b0":"code","98f3580a":"code","5e330719":"code","c44e78be":"code","ecf4633b":"code","1a94308e":"code","6600f93e":"code","dbf8f654":"code","6bd93e5b":"code","4503efba":"code","b45e7b1f":"code","0d477c2b":"code","de20deb8":"code","88ee6cd0":"code","c44126fc":"code","bb794c05":"code","f4afcab7":"code","a6ecc898":"code","aa2ab5c3":"code","48d5c915":"code","0e4ff180":"code","79440a3b":"code","87ad59e0":"code","ea6fb4c7":"code","ef4b7de1":"code","a833437f":"code","bd3a5c26":"code","6942dd58":"markdown","2008c445":"markdown","d81911fa":"markdown","03f6db86":"markdown","6b540ff2":"markdown","d8c860a7":"markdown","c243dcc7":"markdown","1c1e1664":"markdown","0cf03013":"markdown","46930845":"markdown","e3e5f525":"markdown","ba4fa72c":"markdown","a8195428":"markdown","2af799f7":"markdown","365e58b9":"markdown","a63ef675":"markdown","12f292af":"markdown","df808aa9":"markdown","b1cb5081":"markdown","beb7e561":"markdown","3dff794d":"markdown","1e91dd72":"markdown","ffc03fd9":"markdown","e3eed516":"markdown","d1b66ffa":"markdown","c3530a2a":"markdown","1cfbbccc":"markdown"},"source":{"15ebe12b":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npd.set_option('max_columns', 100)","e76fd270":"def import_all():\n    data = {}\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            name = filename.replace('.csv', '')\n            data[name] = pd.read_csv(os.path.join(dirname, filename))\n            \n    return data\n\n\ndef add_ids(data, key):\n    \n    df = data[key]\n    n_lines = df.shape[0]\n\n    df = pd.merge(df, data['races'][['raceId', \n                                     'year', 'round', \n                                     'circuitId', 'date', 'time']], \n                  on='raceId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging raceId went wrong')\n        \n    df = pd.merge(df, data['circuits'][['circuitId', \n                                        'circuitRef', 'location', 'country']], \n                  on='circuitId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging circuitId went wrong')\n        \n    df = pd.merge(df, data['drivers'][['driverId', \n                                       'driverRef', 'forename', 'surname', \n                                       'dob', 'nationality']].rename(columns={'nationality': 'drv_nat'}), \n                  on='driverId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging driverId went wrong')\n    \n    if (key != 'lap_times') and (key != 'pit_stops'):\n        df = pd.merge(df, data['constructors'][['constructorId', \n                                                'constructorRef', \n                                                'name', 'nationality']].rename(columns={'nationality': 'cstr_nat'}), \n                      on='constructorId', how='left')\n        if df.shape[0] != n_lines:\n            raise ValueError('Merging constructorId went wrong')\n        \n    if key == 'results':\n        df = pd.merge(df, data['status'], \n                      on='statusId', how='left')\n        if df.shape[0] != n_lines:\n            raise ValueError('Merging statusId went wrong')\n        \n    return df","b7233887":"data = import_all()\n\nres = add_ids(data, 'results')\nqual = add_ids(data, 'qualifying')\nlaps = add_ids(data, 'lap_times')\npits = add_ids(data, 'pit_stops')\n\nlaps.rename(columns={'time_x': 'lap_time', 'time_y': 'time'}, inplace=True)\nres.rename(columns={'time_x': 'race_time', 'time_y': 'time'}, inplace=True)\npits.rename(columns={'time_x': 'pit_time', 'time_y': 'time'}, inplace=True)\n\nlaps = pd.merge(laps, res[['raceId', 'driverId', \n                           'constructorRef', 'name', 'cstr_nat']], \n                on=['raceId', 'driverId'], how='left')\npits = pd.merge(pits, res[['raceId', 'driverId', \n                           'constructorRef', 'name', 'cstr_nat']], \n                on=['raceId', 'driverId'], how='left')","b249f825":"res[['lap_mins', 'lap_secs']] = res['fastestLapTime'].str.split(':', expand=True)\nres[['lap_secs', 'lap_millisecs']] = res['lap_secs'].str.split('.', expand=True)\nres['lap_mins'] = pd.to_numeric(res['lap_mins'], errors='coerce').fillna(99)\nres['lap_secs'] = pd.to_numeric(res['lap_secs'], errors='coerce').fillna(99)\nres['lap_millisecs'] = pd.to_numeric(res['lap_millisecs'], errors='coerce').fillna(99)\n\nres['fastestLapTime_ms'] = (60 * res['lap_mins'] + res['lap_secs']) * 1000 + res['lap_millisecs']\n\nres['race_fastestTime'] = res.groupby('raceId').fastestLapTime_ms.transform('min')\nres['FastLap'] = np.where(res['race_fastestTime'] == res['fastestLapTime_ms'], 1, 0)\n\nres.drop(['lap_mins', 'lap_secs', 'lap_millisecs'], axis=1, inplace=True)\n\npoints = {1: 25, 2: 18, 3: 15, 4: 12, 5: 10, 6: 8, 7: 6, 8: 4, 9: 2, 10: 1}\n\nres['points'] = res['positionOrder'].map(points).fillna(0)\n#res.loc[res.FastLap == 1, 'points'] = res['points'] + 1\n\nres['fastestLap'] = pd.to_numeric(res['fastestLap'], errors='coerce')\n\nres['DriverName'] = res['forename'].str[0] + '. ' + res['surname']\n\n\nres['net_gain'] = -(res['positionOrder'] - res['grid'])\nres['abs_gain'] = abs(res['net_gain'])\n\nres['finished'] = np.where(res.status == 'Finished', 1, 0)","668a80f5":"def plot_frame(ax):\n    ax.set_facecolor('#292525')\n    ax.spines['bottom'].set_color('w')\n    ax.tick_params(axis='x', colors='w')\n    ax.xaxis.label.set_color('w')\n    ax.spines['left'].set_color('w')\n    ax.tick_params(axis='y', colors='w')\n    ax.yaxis.label.set_color('w')\n    return ax\n\ndef get_drv_ann(data, year, ax, adjust, count=False, measure='Pts.'):\n    \n    yr_data = data[data.year==year].groupby(['driverId', 'DriverName', 'name']).points.sum().sort_values(ascending=False)\n    if count:\n        yr_data = data[data.year==year].groupby(['driverId', 'DriverName', 'name']).resultId.count().sort_values(ascending=False)\n    drv_name = yr_data.index[0][1]\n    ctr_name = yr_data.index[0][2]\n    pts = yr_data[0]\n    value = pts \/ data[data.year==year].raceId.nunique()\n    \n    text = f'{drv_name}\\n{ctr_name}, {year}\\n{int(pts)} {measure}'\n    \n    ax.annotate(text, xy=(year, value), xycoords='data', xytext=adjust, textcoords='offset points', color='w')\n    \n    return ax\n\n\ndef get_ctr_ann(data, year, ax, adjust, count=False, measure='Pts.'):\n    \n    yr_data = data[data.year==year].groupby(['name']).points.sum().sort_values(ascending=False)\n    if count:\n        yr_data = data[data.year==year].groupby(['name']).resultId.count().sort_values(ascending=False)\n    ctr_name = yr_data.index[0]\n    pts = yr_data[0]\n    value = pts \/ data[data.year==year].raceId.nunique()\n    \n    text = f'{ctr_name}, {year}\\n{int(pts)} {measure}'\n    \n    ax.annotate(text, xy=(year, value), xycoords='data', xytext=adjust, textcoords='offset points', color='w')\n    \n    return ax\n\n\ndef plot_bars(bars, ax, color):\n    \n    colors = [color if (c == 2020) else 'w' for c in bars.index]\n    bars.plot(color=colors, kind='bar', ax=ax)\n    ax.set_title('Top Years vs 2020', fontsize=14, color='w')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)\n    \n    return ax","10e8210e":"fig = plt.figure(figsize=(15, 25), facecolor='#292525')\nfig.subplots_adjust(top=0.95)\nfig.suptitle('Best Driver of the Season', fontsize=18, color='w')\n\ngs = GridSpec(5, 3, figure=fig)\nax0 = fig.add_subplot(gs[0, :2])\nax1 = fig.add_subplot(gs[0, 2])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1:])\nax4 = fig.add_subplot(gs[2, :2])\nax5 = fig.add_subplot(gs[2, 2])\nax6 = fig.add_subplot(gs[3, 0])\nax7 = fig.add_subplot(gs[3, 1:])\nax8 = fig.add_subplot(gs[4, :2])\nax9 = fig.add_subplot(gs[4, 2])\n\nrace_counts = res.groupby(['year']).raceId.nunique()\n\n(res.groupby(['year', 'driverId']).points.sum().groupby('year').max() \/ race_counts).plot(ax=ax0, color='#15E498')\nax0.set_title('Most Points', fontsize=14, color='w')\nax0.set_ylabel('Points per GP', fontsize=12)\nax0 = get_drv_ann(res, 2002, ax0, (-80, -25))\nax0 = get_drv_ann(res, 1963, ax0, (-50, -2))\nax0 = get_drv_ann(res, 1970, ax0, (-90, 2))\nax0 = get_drv_ann(res, 1982, ax0, (6, 2))\n\nyears = (res.groupby(['year', 'driverId']).points.sum().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[res.year.isin(years)].groupby(['year', 'DriverName']).points.sum().groupby(['year']).max() \/ race_counts).dropna()\nax1 = plot_bars(bars, ax1, '#15E498')\n\n(res[res.positionOrder == 1].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax3, color='#C3C92E')\nax3.set_title('Most Wins', fontsize=14, color='w')\nax2.set_ylabel('Wins per GP', fontsize=12)\nax3 = get_drv_ann(res[res.positionOrder == 1], 1952, ax3, (5, -22), count=True, measure='Wins')\nax3 = get_drv_ann(res[res.positionOrder == 1], 2004, ax3, (-80, -25), count=True, measure='Wins')\nax3 = get_drv_ann(res[res.positionOrder == 1], 1982, ax3, (10, 0), count=True, measure='Wins')\nax3 = get_drv_ann(res[res.positionOrder == 1], 2012, ax3, (-20, -40), count=True, measure='Wins')\n\nyears = (res[res.positionOrder == 1].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.positionOrder == 1) & (res.year.isin(years))].groupby(['year', 'DriverName']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax2 = plot_bars(bars, ax2, '#C3C92E')\n\n(res[res.positionOrder <= 3].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax4, color='#C93D2E')\nax4.set_title('Most Podiums', fontsize=14, color='w')\nax4.set_ylabel('Podiums per GP', fontsize=12)\nax4 = get_drv_ann(res[res.positionOrder <= 3], 2002, ax4, (-80, -25), count=True, measure='Podiums')\nax4 = get_drv_ann(res[res.positionOrder <= 3], 1963, ax4, (5, 0), count=True, measure='Podiums')\nax4 = get_drv_ann(res[res.positionOrder <= 3], 1982, ax4, (10, 0), count=True, measure='Podiums')\nax4 = get_drv_ann(res[res.positionOrder <= 3], 1970, ax4, (-100, 0), count=True, measure='Podiums')\n\nyears = (res[res.positionOrder <= 3].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.positionOrder <= 3) & (res.year.isin(years))].groupby(['year', 'DriverName']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax5 = plot_bars(bars, ax5, '#C93D2E')\n\n(res[res.grid == 1].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax7, color='#3A3FDC')\nax7.set_title('Most Pole Positions', fontsize=14, color='w')\nax6.set_ylabel('Poles per GP', fontsize=12)\nax7 = get_drv_ann(res[res.grid == 1], 2011, ax7, (10, -10), count=True, measure='Poles')\nax7 = get_drv_ann(res[res.grid == 1], 2009, ax7, (10, -10), count=True, measure='Poles')\nax7 = get_drv_ann(res[res.grid == 1], 1992, ax7, (20, -23), count=True, measure='Poles')\nax7 = get_drv_ann(res[res.grid == 1], 1980, ax7, (25, -5), count=True, measure='Poles')\n\nyears = (res[res.grid == 1].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.grid == 1) & (res.year.isin(years))].groupby(['year', 'DriverName']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax6 = plot_bars(bars, ax6, '#3A3FDC')\n\n(res[res['rank'] == '1'].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax8, color='#41DA5B')\nax8.set_title('Most Fast Laps', fontsize=14, color='w')\nax8.set_ylabel('Fast Laps per GP', fontsize=12)\nax8 = get_drv_ann(res[res['rank'] == '1'], 2009, ax8, (-80, 0), count=True, measure='FL')\nax8 = get_drv_ann(res[res['rank'] == '1'], 2008, ax8, (10, -30), count=True, measure='FL')\nax8 = get_drv_ann(res[res['rank'] == '1'], 2015, ax8, (-20, 0), count=True, measure='FL')\n\nyears = (res[res['rank'] == '1'].groupby(['year', 'driverId']).resultId.count().groupby('year').max() \/ race_counts).dropna().sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res['rank'] == '1') & (res.year.isin(years))].groupby(['year', 'DriverName']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax9 = plot_bars(bars, ax9, '#41DA5B')\n\nfor ax in [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9]:\n    ax = plot_frame(ax)\n    ax.set_xlabel('')\n\nplt.show()","2f0248a9":"fig = plt.figure(figsize=(15, 25), facecolor='#292525')\nfig.subplots_adjust(top=0.95)\nfig.suptitle('Best Constructor of the Season', fontsize=18, color='w')\n\ngs = GridSpec(5, 3, figure=fig)\nax0 = fig.add_subplot(gs[0, :2])\nax1 = fig.add_subplot(gs[0, 2])\nax2 = fig.add_subplot(gs[1, 0])\nax3 = fig.add_subplot(gs[1, 1:])\nax4 = fig.add_subplot(gs[2, :2])\nax5 = fig.add_subplot(gs[2, 2])\nax6 = fig.add_subplot(gs[3, 0])\nax7 = fig.add_subplot(gs[3, 1:])\nax8 = fig.add_subplot(gs[4, :2])\nax9 = fig.add_subplot(gs[4, 2])\n\nrace_counts = res.groupby(['year']).raceId.nunique()\n\n(res.groupby(['year', 'constructorId']).points.sum().groupby('year').max() \/ race_counts).plot(ax=ax0, color='#15E498')\nax0.set_title('Most Points', fontsize=14, color='w')\nax0.set_ylabel('Points per GP', fontsize=12)\nax0 = get_ctr_ann(res, 1952, ax0, (10, -10))\nax0 = get_ctr_ann(res, 1982, ax0, (10, -10))\nax0 = get_ctr_ann(res, 2015, ax0, (-30, 10))\nax0 = get_ctr_ann(res, 1988, ax0, (-30, 10))\nax0 = get_ctr_ann(res, 2012, ax0, (-30, -20))\n\nyears = (res.groupby(['year', 'constructorId']).points.sum().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[res.year.isin(years)].groupby(['year', 'name']).points.sum().groupby(['year']).max() \/ race_counts).dropna()\nax1 = plot_bars(bars, ax1, '#15E498')\n\n(res[res.positionOrder == 1].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax3, color='#C3C92E')\nax3.set_title('Most Wins', fontsize=14, color='w')\nax2.set_ylabel('Wins per GP', fontsize=12)\nax3 = get_ctr_ann(res[res.positionOrder == 1], 1988, ax3, (-50,-10), count=True, measure='Wins')\nax3 = get_ctr_ann(res[res.positionOrder == 1], 2016, ax3, (-60,0), count=True, measure='Wins')\nax3 = get_ctr_ann(res[res.positionOrder == 1], 1982, ax3, (15,0), count=True, measure='Wins')\nax3 = get_ctr_ann(res[res.positionOrder == 1], 2012, ax3, (-50,-30), count=True, measure='Wins')\n\nyears = (res[res.positionOrder == 1].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.positionOrder == 1) & (res.year.isin(years))].groupby(['year', 'name']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax2 = plot_bars(bars, ax2, '#C3C92E')\n\n(res[res.positionOrder <= 3].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax4, color='#C93D2E')\nax4.set_title('Most Podiums', fontsize=14, color='w')\nax4.set_ylabel('Podiums per GP', fontsize=12)\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 1952, ax4, (10,-10), count=True, measure='Podiums')\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 1961, ax4, (10,0), count=True, measure='Podiums')\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 1982, ax4, (30,0), count=True, measure='Podiums')\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 2012, ax4, (10,-15), count=True, measure='Podiums')\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 2004, ax4, (-30,5), count=True, measure='Podiums')\nax4 = get_ctr_ann(res[res.positionOrder <= 3], 2015, ax4, (-20,10), count=True, measure='Podiums')\n\nyears = (res[res.positionOrder <= 3].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.positionOrder <= 3) & (res.year.isin(years))].groupby(['year', 'name']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax5 = plot_bars(bars, ax5, '#C93D2E')\n\n(res[res.grid == 1].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax7, color='#3A3FDC')\nax7.set_title('Most Pole Positions', fontsize=14, color='w')\nax6.set_ylabel('Poles per GP', fontsize=12)\nax7 = get_ctr_ann(res[res.grid == 1], 2009, ax7, (10,0), count=True, measure='Poles')\nax7 = get_ctr_ann(res[res.grid == 1], 1972, ax7, (10,-10), count=True, measure='Poles')\nax7 = get_ctr_ann(res[res.grid == 1], 1956, ax7, (5,-30), count=True, measure='Poles')\nax7 = get_ctr_ann(res[res.grid == 1], 2016, ax7, (-80,0), count=True, measure='Poles')\n\nyears = (res[res.grid == 1].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res.grid == 1) & (res.year.isin(years))].groupby(['year', 'name']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax6 = plot_bars(bars, ax6, '#3A3FDC')\n\n(res[res['rank'] == '1'].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).plot(ax=ax8, color='#41DA5B')\nax8.set_title('Most Fast Laps', fontsize=14, color='w')\nax8.set_ylabel('Fast Laps per GP', fontsize=12)\nax8 = get_ctr_ann(res[res['rank'] == '1'], 2010, ax8, (10,-10), count=True, measure='FL')\nax8 = get_ctr_ann(res[res['rank'] == '1'], 2012, ax8, (20,0), count=True, measure='FL')\nax8 = get_ctr_ann(res[res['rank'] == '1'], 2004, ax8, (-10,5), count=True, measure='FL')\nax8 = get_ctr_ann(res[res['rank'] == '1'], 2008, ax8, (-10,5), count=True, measure='FL')\nax8 = get_ctr_ann(res[res['rank'] == '1'], 2015, ax8, (-20,5), count=True, measure='FL')\n\nyears = (res[res['rank'] == '1'].groupby(['year', 'constructorId']).resultId.count().groupby('year').max() \/ race_counts).dropna().sort_values()[-6:].index.to_list()\nif 2020 not in years:\n    years += [2020]\nbars = (res[(res['rank'] == '1') & (res.year.isin(years))].groupby(['year', 'name']).resultId.count().groupby(['year']).max() \/ race_counts).dropna()\nax9 = plot_bars(bars, ax9, '#41DA5B')\n\nfor ax in [ax0, ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9]:\n    ax = plot_frame(ax)\n    ax.set_xlabel('')\n\nplt.show()","7d7cc51d":"def annotate_season(data, ax, tp='Driver'):\n    \n    text = f'Top {tp} \\n'\n    for name, points in data.iteritems():\n        text += f'{name} {(int(points))}\\n'\n    \n    ax.text(0.05, 0.65, text, transform=ax.transAxes, color='w', fontsize=13)\n    \n    return ax\n\n\ndef plot_season(res, year, n_drivers, n_ctr, drv_colors, ctr_colors):\n    fig, ax = plt.subplots(2, 1, figsize=(15, 10), facecolor='#292525')\n    fig.subplots_adjust(top=0.92)\n    fig.suptitle(f'{year} Season', fontsize=18, color='w')\n    \n    drivers = res[res.year==year].groupby('DriverName').points.sum().sort_values()[-n_drivers:].index\n\n    tmp = res[(res.year==year)].sort_values(by=['round'])\n    \n    to_print = tmp.groupby('DriverName').points.sum().sort_values(ascending=False)[:n_drivers]\n\n    tmp['tot_points'] = tmp.groupby('driverId').points.cumsum()\n    tmp = tmp.set_index('raceId')\n    i = 0\n    for driver in tmp.DriverName.unique():\n        if driver in drivers:\n            color = drv_colors[i]\n            i += 1\n        else:\n            color = '#7C7373'\n        tmp[tmp.DriverName == driver].tot_points.plot(ax=ax[0], color=color)\n        \n    ax[0] = annotate_season(to_print, ax[0])\n           \n    constr = res[res.year==year].groupby('name').points.sum().sort_values()[-n_ctr:].index\n\n    tmp = res[(res.year==year)].groupby(['raceId', 'constructorId', 'name'], as_index=False).points.sum().sort_values(by=['raceId'])\n    \n    to_print = tmp.groupby('name').points.sum().sort_values(ascending=False)[:n_ctr]\n\n    tmp['tot_points'] = tmp.groupby('constructorId').points.cumsum()\n    tmp = tmp.set_index('raceId')\n    i = 0\n    for ctr in tmp.name.unique():\n        if ctr in constr:\n            color = ctr_colors[i]\n            i += 1\n        else:\n            color = '#7C7373'\n        tmp[tmp.name == ctr].tot_points.plot(ax=ax[1], color=color)\n        \n    ax[1] = annotate_season(to_print, ax[1], tp='Constructor')\n        \n    ax[0].set_title('Driver Title', fontsize=14, color='w')\n    ax[1].set_title('Constructor Title', fontsize=14, color='w')\n    \n    for axes in ax:\n        axes = plot_frame(axes)\n        axes.set_xlabel('')\n        axes.set_xticks([])\n        \n    plt.show()\n    \n    \nclrs = {'Ferrari': '#ff2800', \n        'Red Bull': 'b', \n        'McLaren': '#f98e1d', \n        'Williams': 'w', \n        'Mercedes': '#00D2BE', \n        'Brawn': '#B8FD6E', \n        'Lotus': '#FFB800', \n        'BRM': 'g'}","10b2a6e6":"plot_season(res, 1963, n_drivers=3, n_ctr=2, \n            drv_colors=[clrs['BRM'], clrs['BRM'], clrs['Lotus']], \n            ctr_colors=[clrs['BRM'], clrs['Lotus']])","a11ff2b0":"plot_season(res, 1982, n_drivers=3, n_ctr=3, \n            drv_colors=[clrs['Ferrari'], clrs['Williams'], clrs['McLaren']], \n            ctr_colors=[clrs['McLaren'], clrs['Ferrari'], clrs['Williams']])","98f3580a":"plot_season(res, 1988, n_drivers=2, n_ctr=1, \n            drv_colors=[clrs['McLaren'], clrs['McLaren']], \n            ctr_colors=[clrs['McLaren']])","5e330719":"plot_season(res, 2002, n_drivers=2, n_ctr=1, \n            drv_colors=[clrs['Ferrari'], clrs['Ferrari']], \n            ctr_colors=[clrs['Ferrari']])","c44e78be":"plot_season(res, 2009, n_drivers=4, n_ctr=2, \n            drv_colors=[clrs['Brawn'], clrs['Red Bull'], clrs['Red Bull'], clrs['Brawn']], \n            ctr_colors=[clrs['Red Bull'], clrs['Brawn']])","ecf4633b":"plot_season(res, 2012, n_drivers=2, n_ctr=3, \n            drv_colors=[clrs['Ferrari'], clrs['Red Bull']], \n            ctr_colors=[clrs['McLaren'], clrs['Red Bull'], clrs['Ferrari']])","1a94308e":"plot_season(res, 2013, n_drivers=2, n_ctr=3, \n            drv_colors=[clrs['Red Bull'], clrs['Ferrari']], \n            ctr_colors=[clrs['Ferrari'], clrs['Red Bull'], clrs['Mercedes']])","6600f93e":"plot_season(res, 2015, n_drivers=3, n_ctr=2, \n            drv_colors=[clrs['Mercedes'], clrs['Ferrari'], clrs['Mercedes']], \n            ctr_colors=[clrs['Ferrari'], clrs['Mercedes']])","dbf8f654":"plot_season(res, 2020, n_drivers=3, n_ctr=2, \n            drv_colors=[clrs['Mercedes'], clrs['Red Bull'], clrs['Mercedes']], \n            ctr_colors=[clrs['Red Bull'], clrs['Mercedes']])","6bd93e5b":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#292525')\nfig.suptitle(f'Position changes per Grand Prix', fontsize=18, color='w')\n\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').mean().plot(label='Mean', color='w')\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').min().plot(label='Min', color='g')\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').max().plot(label='Max', color='r')\n\nleg = ax.legend(facecolor=\"#292525\")\nfor text in leg.get_texts():\n    text.set_color(\"w\")\n\nax = plot_frame(ax)","4503efba":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#292525')\nfig.suptitle(f'Proportion of Drivers that finished the race per Grand Prix', fontsize=18, color='w')\n\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').mean().plot(color='w', label='Mean')\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').max().plot(color='r', label='Max')\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').min().plot(color='g', label='Min')\n\nleg = ax.legend(facecolor=\"#292525\")\nfor text in leg.get_texts():\n    text.set_color(\"w\")\n\nax = plot_frame(ax)","b45e7b1f":"laps = laps.sort_values(by=['raceId', 'driverId', 'lap'])\nlaps['pos_change'] = -laps.groupby(['raceId', 'driverId']).position.diff().fillna(0)\nlaps['abs_change'] = abs(laps['pos_change'])","0d477c2b":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#292525')\nfig.suptitle(f'Proportion of Laps with at least a position change', fontsize=18, color='w')\n\ntmp = laps.groupby(['year', 'raceId', 'circuitRef', 'lap'], as_index=False).abs_change.sum()\ntmp['lap_with_change'] = np.sign(tmp.abs_change)\n\ntmp.groupby(['year', 'raceId', 'circuitRef']).lap_with_change.mean().groupby('year').agg(['mean', 'max', 'min']).plot(ax=ax, color=['w', 'r', 'g'])\n\nleg = ax.legend(facecolor=\"#292525\")\nleg.get_texts()[0].set_text('Mean')\nleg.get_texts()[1].set_text('Max')\nleg.get_texts()[2].set_text('Min')\nfor text in leg.get_texts():\n    text.set_color(\"w\")\n    \ntext = f'Indianapolis \\n2005 \\n8% of laps'\nax.annotate(text, xy=(2005, 0.08), xycoords='data', xytext=(20,-20), textcoords='offset points', color='w')\ntext = f'Bahrain \\n2013 \\n91% of laps'\nax.annotate(text, xy=(2013, 0.91), xycoords='data', xytext=(10,-3), textcoords='offset points', color='w')\n\nax.set_ylim((0,1))    \nax = plot_frame(ax)","de20deb8":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#292525')\nfig.suptitle(f'Proportion of Laps with at least a position change in the top 3', fontsize=18, color='w')\n\ntmp = laps[laps.position <= 3].groupby(['year', 'raceId', 'circuitRef', 'lap'], as_index=False).abs_change.sum()\ntmp['lap_with_change'] = np.sign(tmp.abs_change)\n\ntmp.groupby(['year', 'raceId', 'circuitRef']).lap_with_change.mean().groupby('year').agg(['mean', 'max', 'min']).plot(ax=ax, color=['w', 'r', 'g'])\n\nleg = ax.legend(facecolor=\"#292525\")\nleg.get_texts()[0].set_text('Mean')\nleg.get_texts()[1].set_text('Max')\nleg.get_texts()[2].set_text('Min')\nfor text in leg.get_texts():\n    text.set_color(\"w\")\n    \ntext = f'Belgium \\n2011 \\n43% of laps'\nax.annotate(text, xy=(2011, 0.43), xycoords='data', xytext=(-30,20), textcoords='offset points', color='w')\n\n\nax.set_ylim((0,1))    \nax = plot_frame(ax)","88ee6cd0":"laps['seconds'] = laps['milliseconds'] \/ 1000\nlaps['DriverName'] = laps['forename'].str[0] + '. ' + laps['surname']\n\nclrs = {'Ferrari': '#ff2800', \n        'Red Bull': 'b', \n        'McLaren': '#f98e1d', \n        'Williams': 'w', \n        'Mercedes': '#00D2BE', \n        'Brawn': '#B8FD6E', \n        'Lotus': '#FFB800', \n        'BRM': 'g', \n        'Jordan': '#F9D71C'}\n\ndef plot_race(data, country, year, colors=None, raceid=None):\n    fig, ax = plt.subplots(1, 1, figsize=(13, 10), facecolor='#292525')\n    fig.subplots_adjust(top=0.94)\n    if raceid is None:\n        tmp = data[(data.country == country) & (data.year == year)]\n    else:\n        tmp = data[data.raceId==raceid]\n        \n    fig.suptitle(f'Grand Prix of {country}, {year}', fontsize=18, color='w')\n        \n    last_lap = tmp.groupby('DriverName', as_index=False).lap.max()\n    order = pd.merge(tmp, last_lap, on=['DriverName', 'lap']).sort_values(by='position').DriverName.values\n    \n    tmp = tmp[['DriverName', 'lap', 'seconds']].copy()\n\n    tmp = tmp.set_index(['DriverName', 'lap']).unstack().cumsum(axis=1).reset_index()\n    tmp = tmp.set_index('DriverName').reindex(order)\n    tmp.columns = tmp.columns.get_level_values(1)\n    basis = tmp.median()\n    \n    if colors is None:\n        (- (tmp - basis)).T.plot(ax=ax)\n    else:\n        cols = []\n        for driver in tmp.index:\n            if driver in colors.keys():\n                cols.append(colors[driver])\n            else:\n                cols.append('#7C7373')\n        (- (tmp - basis)).T.plot(ax=ax, color=cols)\n    \n    ax.set_xlim((tmp.columns[0], tmp.columns[-1]))\n    ax.set_xlabel('Lap', fontsize=14)\n    ax.set_ylabel('Delta time (seconds)', fontsize=14)\n    \n    leg = ax.legend(facecolor=\"#292525\", loc='center left', bbox_to_anchor=(1, 0.5))\n    for text in leg.get_texts():\n        text.set_color(\"w\")\n    ax = plot_frame(ax)\n    plt.show()","c44126fc":"plot_race(laps, 'Belgium', 2011, colors={'S. Vettel': clrs['Red Bull'], \n                                         'J. Button': clrs['McLaren'], \n                                         'M. Webber': clrs['Red Bull'], \n                                         'F. Alonso': clrs['Ferrari']})","bb794c05":"plot_race(laps, 'Belgium', 1998, colors={'M. Schumacher': clrs['Ferrari'], \n                                         'D. Coulthard': clrs['McLaren'], \n                                         'D. Hill': clrs['Jordan']})","f4afcab7":"plot_race(laps, 'Bahrain', 2013)","a6ecc898":"plot_race(laps, 'Bahrain', 2014, {'L. Hamilton': clrs['Mercedes'], \n                                  'N. Rosberg': clrs['Mercedes']})","aa2ab5c3":"plot_race(laps, 'Germany', 2019, {'M. Verstappen': clrs['Red Bull'], \n                                  'S. Vettel': clrs['Ferrari'], \n                                  'L. Hamilton': clrs['Mercedes']})","48d5c915":"plot_race(laps, 'Italy', 2020, raceid=1038, colors={'P. Gasly': clrs['Red Bull'], \n                                                  'C. Sainz': clrs['McLaren'], \n                                                  'L. Hamilton': clrs['Mercedes']})","0e4ff180":"plot_race(laps, 'USA', 2005, {'M. Schumacher': clrs['Ferrari']})","79440a3b":"plot_race(laps, 'Singapore', 2015)","87ad59e0":"plot_race(laps, 'Belgium', 2020, raceid=None)","ea6fb4c7":"teams = ['mercedes', 'red_bull', 'ferrari']\n\nlaps20 = laps[(laps.year>2016)].copy()\n\nquantiles = laps20.groupby(['raceId', \n                            'constructorRef']).seconds.quantile([.05, .80]).reset_index().set_index(['level_2', \n                                                                                                    'raceId', \n                                                                                                    'constructorRef']).unstack(0).reset_index()\nlaps20 = pd.merge(laps20, quantiles, on=['raceId', 'constructorRef'])\n\nlaps20 = laps20[(laps20.seconds >= laps20[('seconds', 0.05)]) & (laps20.seconds <= laps20[('seconds', 0.8)])].copy()\n\ndel laps20[('seconds', 0.05)]\ndel laps20[('seconds', 0.8)]\n\nlaps20['min_lap'] = laps20.groupby('raceId').seconds.transform('min')\nlaps20['max_lap'] = laps20.groupby('raceId').seconds.transform('max')\n\nlaps20['scaled_seconds'] = laps20['seconds'] - laps20['min_lap']\nlaps20['scaled_seconds'] \/= laps20['max_lap']\n\nlaps20.head()","ef4b7de1":"def plot_pace(data, year, adjust=0.97):\n    \n    tmp = data[data.year==year]\n    \n    fig, ax = plt.subplots(tmp.raceId.nunique(), 1, figsize=(13, 4*tmp.raceId.nunique()), facecolor='#292525')\n    fig.subplots_adjust(top=adjust)\n        \n    fig.suptitle(f'Pace Comparison {year}', fontsize=18, color='w')\n    \n    for n_round in np.arange(1, tmp.raceId.nunique()+1):\n        sns.distplot(a=tmp[(tmp.constructorRef=='mercedes') & (tmp['round']==n_round)].scaled_seconds, ax=ax[n_round-1], \n                     kde=True, hist=False, kde_kws={'color': clrs['Mercedes']})\n        ax[n_round-1].axvline(tmp[(tmp.constructorRef=='mercedes') & (tmp['round']==n_round)].scaled_seconds.median(), \n                              color=clrs['Mercedes'], linestyle='--')\n        sns.distplot(a=tmp[(tmp.constructorRef=='ferrari') & (tmp['round']==n_round)].scaled_seconds, ax=ax[n_round-1], \n                     kde=True, hist=False, kde_kws={'color': clrs['Ferrari']})\n        ax[n_round-1].axvline(tmp[(tmp.constructorRef=='ferrari') & (tmp['round']==n_round)].scaled_seconds.median(), \n                              color=clrs['Ferrari'], linestyle='--')\n        sns.distplot(a=tmp[(tmp.constructorRef=='red_bull') & (tmp['round']==n_round)].scaled_seconds, ax=ax[n_round-1], \n                     kde=True, hist=False, kde_kws={'color': clrs['Red Bull']})\n        ax[n_round-1].axvline(tmp[(tmp.constructorRef=='red_bull') & (tmp['round']==n_round)].scaled_seconds.median(), \n                              color=clrs['Red Bull'], linestyle='--')\n        ax[n_round-1].set_title(f\"Grand Prix of {tmp[tmp['round']==n_round].country.unique()[0]}\", color='w', fontsize=14)\n\n    for axes in ax:\n        axes = plot_frame(axes)\n        axes.set_xlabel('')\n    plt.show()","a833437f":"plot_pace(laps20, 2018)","bd3a5c26":"plot_pace(laps20, 2020)","6942dd58":"At last, a race that has been reasonably exciting is the 2015 Singapore Grand Prix. However, what makes this race remarkable is that it is the only race in our data where we had **0 position changes in the top 3 for the entire race**. An unprecedented record that got matched this year and a testament on how hard is to overtake in Singapore when you have a decent pit stop strategy.","2008c445":"In principle, nothing particularly remarkable happened: Vettel started from Pole Position with his Red Bull and won the race. In practice, however, we know that Vettel lost the lead on lap 1 in favor of Nico Rosberg who then dropped behind, victim of several DRS assisted overtakes. We see Jenson Button starting from p13, suffering front wing damage in turn 1, and then climbing back while fighting Michael Schumacher first and Mark Webber later until the final p3. We see Alonso in his Ferrari starting p8, fighting for p2 with Webber, and then finishing p4. At last, we can also see the safety car being deployed on lap 13 as a consequence of the incident between Hamilton and Kobayashi that recompacted the field.\n\nSpeaking of exciting Belgian Grand Prix, we can't ignore the 1998 edition. The massive car pile-up on turn 1 caused a restart with fewer contenders and we can then see the infamous contact between Schumacher and Coulthard later in the race. Moreover, this was also the first victory for the Jordan team.","d81911fa":"The 2020 race that matched this record was in Belgium","03f6db86":"Despite Alonso being more consistent (on the podium 65% of the times vs the 50% of Vettel), it was Vettel to get the title at the end. On the constructor side, we can also see how McLaren (with a young Lewis Hamilton) threw its hat in the ring and challenged Ferrari for the second spot in the championship.\n\nOn the other hand, only one year later showed how unbeatable Vettel and Red Bull were","6b540ff2":"* Mercedes in 2020 is showing a dominance that was **unseen since the 1960's**. This is actually a clear trend since the past few years, seasons where they were able to achieve up to 90% of the victories (2016, 19 wins). \n* The 2018 season is an exception, with Ferrari getting pretty close and making the season more thrilling.\n* Worth mentioning the dominant performances of **1988 McLaren** and **2004 Ferrari**\n* On the other hand, the constructor race was pretty close in 2012, the most competitive year in recent history\n* 1982 shows once again how competitive the season was.\n* **Mercedes is taking every pole position in 2020**, matching the performance of Ferrari in 1956, when they took pole for every one of the 8 (!!) races of the season.\n\n\n# Season by season\n\nWith these first insights, we can have a look at how the mentioned seasons unfolded for the driver and constructor championships. Please remember that **the points are calculated on the current rules, not necessarily the rules used in the given season**.","d8c860a7":"We can see how 1989 was a season with a lot of position changes and how after the mid-90s the sport pretty much settled to a relatively low value, where even the most thrilling (under this definition) Grand Prix of each year failed in reaching the levels of the 70s and 80s.\n\nOn the other hand, if we consider the proportion of drivers that finished the race with the same number of laps as the race leader, we can see both how the cars became more reliable and how the difference between the top teams and the rest got smaller, on average.","c243dcc7":"This year, the Italian Gran Prix was one of the most entertaining, where a safety car and a red flag make the huge lead of Hamilton disappear","1c1e1664":"This season started with the drivers going on a strike 3 days before the very first race. Then another protest led by Bernie Ecclestone produced a San Marino Grand Prix with very few cars racing, but also with a great battle between the 2 Ferrari of Didier Pironi and Gilles Villeneuve. Tragically, during free practice of the very next Grand Prix in Belgium, Villeneuve lost his life in a crash. That Gran Prix was the beginning of a quite consistent series of good results, getting with his McLaren on the podium 3 times in 4 races. However, after the Canadian Gran Prix he struggled in getting his car in the point zone. \n\nAfter the tragic weekend in Belgium, Ferrari driver Didier Pironi got on the podium 5 times out of 6 races but a big incident during practice at the German Grand Prix ended his F1 career.\n\nThis hectic season was eventually won by Keke Rosberg in the Williams, in one of the most uncertain and tragic seasons in F1 history.\n\nA few years later, we can again observe a dominant season. It is 1988 and Prost and Senna are driving for McLaren.","0cf03013":"In these plots, we see how the best driver in each statistic performed year by year. For example, in 1952 the driver that won the most Grand Prix was Ascari with 6 wins and his percentage of victories in one season is still unbeaten. Moreover, we observe that\n\n* The 2002 and 2004 seasons were both golden seasons for **Michael Schumacher** and its **Ferrari**, collecting an unprecedented number of points, podiums, and victories. He even beats the legendary 1963 season of **Jim Clark** in Lotus. \n* On the other hand, the 1982 season is the one won by the driver that achieved the lowest number of points, podiums, and victories per GP. We will see later how peculiar such season was.\n* In qualify, the absolute dominance of Nigel Mansel and its Williams in 1992 and of Sebastian Vettel in Red Bull in 2011 is evident, with 14 and 15 pole positions. Under this aspect, the 2020 season has not been exceptional, given the rivalry between the Mercedes drivers.\n* On the other hand, Sebastian Vettel was the driver with most poles in 2009 but also one of the drivers that achieved the least pole positions among the top drivers of each year.\n\nAnother way to read the charts above is considering that **the higher the top driver of a season ranks in those statistics, the more he dominated the competition that year**. And the lower a driver ranks, the bigger (or the closer) the competition was that year.\n\n2020 has been so far a pretty uncompetitive season, which is evident to anyone watching the Gran Prix and the dominance Lewis Hamilton is showing in terms of points, podiums, and fastest laps.\n\nIf we have a look at the constructors.","46930845":"Bahrain is often the theater of great Grand Prix. For example, one year after we saw the great battle between the two Mercedes drivers going back and forth for the entire race.","e3e5f525":"Vettel went to the podium 84% of the times and won 64% of the races, the rivalry with Alonso was unfortunately not seen again.\n\nAfter the Red Bull era, the Mercedes one began and it is still in progress. In particular, the 2015 season showed how big of a difference there was with the rest of the field, winning 84% of the races with the 2 superstars Lewis Hamilton and Nico Rosberg","ba4fa72c":"We can also easily spot the most boring race in recent history: Indianapolis 2005. Only 8% of the laps with a position change and expectedly so: due to a problem with the tyres made by Michelin, **only 6 cars were allowed to race that day**.\n\nOn the other extreme, we find Bahrain 2013, with **91% of laps with at least a position change**.\n\nClearly, if we focus only on the top 3 positions of each lap, the numbers go down quite a bit, with the 2011 Belgian Grand Prix being the most exciting race under this statistic.","a8195428":"# Introduction\n\nF1 is celebrating its 70th edition in 2020. Due to the worldwide pandemic situation, the sport was affected as many others and the season is now in progress with a very unusual calendar. It is evident from the first few races how Mercedes is dominating the competition, a result somewhat expected after winning the last 6 constructor titles.\n\nAs the season unfolds, it can be expected some other team will have their day on some tracks but the curiosity about how dominant the team is remains. \n\nIn this notebook, we will look at the historical performance of drivers and constructors to see what *dominant seasons* look like and how 2020, in all its peculiarity, compares to these seasons. This is by no means an attempt of finding who is the best driver in history or similar exercises, but rather observe how, year by year, how a driver or a constructor won the championship changed, making a season more thrilling than another.\n\nMoreover, we will be looking at thrilling races (when we have data about it) and give an idea on how data can capture this aspect of an F1 race","2af799f7":"McLaren won 93% of the races in 1988, 50% for Senna, 43% for Prost. This produced one of the most legendary rivarlies in F1 history, where the 2 drivers went head to head until the very end while the rest of the field was pretty much a spectator, unable to compete.\n\nEven more extreme was 2002 season.","365e58b9":"# The absence of competition\n\nIt is undeniable that the major factor of Mercedes' dominance in the past 7 years is due to the incredible work of team and drivers. However, the 2020 season may have suffered of the drop in perfomance of the main competitor: Ferrari.\n\nBefore Red Bull fans start contesting the statement above, let's see how can we see this in the data\n\n* For each Grand Prix, we exclude the top 5% (fast laps attempts) and the bottom 20% (incidents, pit stops, safety cars) of the laps of each team.\n* For each Grand Prix, we normalize the data to be between 0 and 1 to have a comparable scale\n* For each season, we are going to see how the pace of the top 3 teams evolved by observing both the distribution of lap times and the median values (being the distribution fairly skewed, the median should be a better descriptor)","a63ef675":"# The Best Grand Prix\n\nWe can define the net number of overtakes of a driver as the difference between starting and finishing positions. For how limited, this can give us a measure of how thrilling a race was.","12f292af":"In all of this, 2020 is not being a particularly bad year, if we do not consider the position changes in the top 3. The close competition in the mid field is making most races very enjoyable.\n\n# Race by Race\n\nFollowing what [James Trotman](https:\/\/www.kaggle.com\/jtrotman) made in their notebooks (see for example [this one](https:\/\/www.kaggle.com\/jtrotman\/f1-race-traces-2018)), we can now see some of these remarkable races.\n\nAccording to the previous plot, the most exciting race involving the 3 leaders of a Grand Prix was during the 2011 Belgian Gran Prix. Here, we see at least one position change in the top 3 in 43% of the laps.","df808aa9":"# The best drivers and the best cars\n\nTo compare cars and drivers of different eras we have to take into account a few things:\n* The point system changed\n* Some years the fastest lap was awarded one extra point, thus giving one more reason to aim for it\n* Each season has a different number of races\n\nTherefore, we assigned all the points with the current system (25 to the winner, 18 to p2, etc) and consider some statistics by weighting them on the number of Grand Prix of each season. Since the lap time was not recorded consistently across the years, we ignore the extra point for the fastest lap.\n\nThe 2020 season has been already a very peculiar one due to reasons outside of the F1 control. However, we will see how the Mercedes dominance in 2020 is somewhat unprecedented in the history of the sport.","b1cb5081":"On the other hand, the most boring race ever was the 2005 USA Grand Prix, with only 6 cars racing due to technical issues of everyone else. The 2 Ferrari dominated the race and nothing remarkable happened. ","beb7e561":"Before moving on, let's have a look at how the 2020 season is unfolding","3dff794d":"Ferrari won *only* 88% of the races, but Michael Schumacher was on the podium every race that year and on the highest step of the podium 63% of the time. Seasons like this one or the 2004 season led to a series of regulation changes and Ferrari was never able to reproduce that level of dominance. New players came into the picture.\n\nFor example, in 2009 we see the triumphant debut of Brawn GP.","1e91dd72":"First, let's have a look at 1963 season","ffc03fd9":"Another race that got our attention earlier was the 2013 Bahrain Grand Prix, easily dominated by Sebastian Vettel despite losing the lead on turn 1. However, behind him we find a position change in 91% of the laps, making the most exciting race under this aspect available in the data.","e3eed516":"In more recent years, everyone remembers the thrilling German Grand Prix of 2019, with Lewis Hamilton messing up his race with Mercedes, Verstappen holding on to a lead with the continuous weather changes, and Vettel starting last and climbing back to second.","d1b66ffa":"This was a legendary season for Jim Clark, winning in his Lotus 70% of the races, finishing on the podium 90% of the times. An absolutely dominant season. On the other hand, the 2 BRM drivers created quite a challenge for the constructor title, finishing on the podium in every race that year. If the victory of Jim Clark was evident since the early races, we had to wait until the very last race to see Lotus taking the title by only 1 point.\n\nWe move forward a couple of decades and find the above mentioned 1982 season.","c3530a2a":"A technical advantage gave the rookie team a 6-win streak and a substantial early advantage that the main rival Red Bull was unable to close.\n\nRed Bull did not have to wait long to start winning championships but the way those championships were achieved changes a lot year by year. For example, in 2012 we see a thrilling battle between the Ferrari of Fernando Alonso and the Red Bull of Sebastian Vettel","1cfbbccc":"If we look at the races more in detail, we can see the **proportion of laps in each race when a position change happened** (either via overtake, accident, mistake, or pit stop). Unfortunately, we have only have data starting in 1996, which is the beginning of the negative trend seen in the plots above.\n\nHowever, we notice that in 2011,  which is also the year of the introduction of the **Drag Reduction System (DRS)**, we have a significant increase in the proportion of laps with at least a position change, going from the 51% of 2010 to the 73% of 2011."}}