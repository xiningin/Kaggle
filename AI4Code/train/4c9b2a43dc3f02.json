{"cell_type":{"9a1039b9":"code","fc8c378a":"code","94c4b333":"code","b795c550":"code","fd064247":"code","86395645":"code","cfeff10d":"code","f25f8e89":"code","5fc86b16":"code","e4c4dc27":"code","fb54c3a9":"code","3731752c":"code","72d0933a":"code","2a705612":"code","c1649c9c":"code","086b1e9d":"code","2b78c7b1":"code","b43ae806":"markdown","f69c0e14":"markdown","33df220d":"markdown","21d79df4":"markdown","baa8c65a":"markdown","232f06f0":"markdown","6eba64d8":"markdown","6d0ecc5d":"markdown","fec56a6a":"markdown","7b439a31":"markdown","4c1f710e":"markdown","dff6e106":"markdown","fd89d7b9":"markdown","2b9cdd71":"markdown","dbbf3455":"markdown","73e0677e":"markdown"},"source":{"9a1039b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc8c378a":"import pandas as pd \nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import tree\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nprint('import successful')","94c4b333":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf","b795c550":"df['Species'].unique()","fd064247":"ax = plt.style.use('seaborn')\nax = df[df['Species']=='Iris-setosa'].plot(kind='scatter', x=['PetalLengthCm',\n                                                              'PetalWidthCm'\n                                                             ], y=['SepalLengthCm','SepalWidthCm'],\n                                              color='DarkBlue', label='Iris-setosa', figsize=(10, 8))                                                            \ndf[df['Species']=='Iris-virginica'].plot(kind='scatter', x=['PetalLengthCm',\n                                                            'PetalWidthCm'\n                                                             ], y=['SepalLengthCm','SepalWidthCm'],\n                                              color='#1695de', label='Iris-virginica', ax=ax)\ndf[df['Species']=='Iris-versicolor'].plot(kind='scatter', x=['PetalLengthCm',\n                                                             'PetalWidthCm'\n                                                             ], y=['SepalLengthCm', 'SepalWidthCm'],\n                                              color='#03fcfc', label='Iris-versicolor', ax=ax)\n\nplt.show()","86395645":"ax = df[df['Species']=='Iris-setosa'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm',\n                                              color='DarkBlue', label='Iris-setosa', figsize=(10, 8))    \ndf[df['Species']=='Iris-virginica'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm',\n                                              color='#1695de', label='Iris-virginica', ax=ax)\ndf[df['Species']=='Iris-versicolor'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm',\n                                              color='#03fcfc', label='Iris-versicolor', ax=ax)","cfeff10d":"ax = df[df['Species']=='Iris-setosa'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm',\n                                              color='DarkBlue', label='Iris-setosa', figsize=(10, 8))                                                            \ndf[df['Species']=='Iris-virginica'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm',\n                                              color='#1695de', label='Iris-virginica', ax=ax)\ndf[df['Species']=='Iris-versicolor'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm',\n                                              color='#03fcfc', label='Iris-versicolor', ax=ax)","f25f8e89":"x = df[['SepalLengthCm', 'SepalWidthCm','PetalLengthCm', 'PetalWidthCm']].values\nx[0:5]","5fc86b16":"y = df['Species'].values\ny[0:5]","e4c4dc27":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\nprint('shape of x_train is {}'.format(x_train.shape))\nprint('shape of x_test is {}'.format(x_test.shape))\nprint('shape of y_train is {}'.format(y_train.shape))\nprint('shape of y_test is {}'.format(y_test.shape))","fb54c3a9":"iris_classifier = DecisionTreeClassifier(criterion='entropy', max_depth=3)\niris_classifier","3731752c":"iris_classifier.fit(x_train, y_train)\npredict_iris = iris_classifier.predict(x_test)\nresult = pd.DataFrame(\n    {'predicted': predict_iris,\n     'actual_value': y_test\n                      })\nresult","72d0933a":"accuracy_score = metrics.accuracy_score(y_test, predict_iris)\nprint('='*100)\nprint('The Decision Tree accuracy  for the iris classification is {}'.format(accuracy_score))\nprint('='*100)","2a705612":"k = 4\nneigh = KNeighborsClassifier(n_neighbors=k).fit(x_train, y_train)\nneigh","c1649c9c":"yhat = neigh.predict(x_test)\nresult2 = pd.DataFrame({\n    'predicted': yhat,\n    'actual_value': y_test\n})\nresult2","086b1e9d":"print('='*40)\nprint('the train_set accuracy is {}'.format(metrics.accuracy_score(y_train, neigh.predict(x_train))))\nprint('\\nthe test_set accuracy is {}'.format(metrics.accuracy_score(y_test, yhat)))\nprint('='*40)","2b78c7b1":"ks = 10\nmean_acc = np.zeros((ks-1))\nstd_acc = np.zeros((ks-1))\nconfusion_mx = []\nfor n in range(1, ks):\n    neigh =  KNeighborsClassifier(n_neighbors=n).fit(x_train, y_train)\n    yhat=neigh.predict(x_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test,yhat)\n    std_acc[n-1] = np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\nmean_acc\nplt.plot(range(1, ks), mean_acc, 'g')\nplt.fill_between(range(1, ks), mean_acc-1*std_acc, mean_acc+1*std_acc,alpha=0.10)\nplt.legend(('Accuracy', '+\/- 3std'))\nplt.ylabel('Accuracy')\nplt.xlabel('no.of neighbors(k)')\nplt.show()","b43ae806":"## The visualization provided below in the form of scatter plot has a clear view of the distribution of the three different types of the species with respect to PetalLengthCm','PetalWidthCm' as x_axis and 'SepalLengthCm','SepalWidthCm' as y_axis","f69c0e14":"## Hello Kagglers ,This notebook contains the classification of iris species with reference to the provided dataset.In this notebook ,i made the classification  with only two different classifiers -> Decision Tree Classifier & k-Nearest Neighbor","33df220d":"### The iris species is of three categories as per the provided data set","21d79df4":"#### As the provided dataset is already clean .There is no need for further cleaning","baa8c65a":"## just for sake we'll try with another classifer to check how it predicts for the same train test split data. we use k nearest neighbor ","232f06f0":"## for the training and testing data created .here we use the decision tree classifer for predicting the species ","6eba64d8":"## The below provided visualiztion shows the distribution with respect to petal length and petal width ,  also shows a fine and clear distribution","6d0ecc5d":"### The accuracy of the decision tree classifer is great and it proves to be a good model","fec56a6a":"## by seeing the results above, k nearest neighbor has the best accuracy when compared to the decision tree classification .The number of neighbor was just randomly chosen as 4 but to see what provides the best model accuracy a visualization is provided to see what would be the accuracy for different number of neighbors","7b439a31":"#         IRIS SPECIES CLASSIFICATION","4c1f710e":"### We read the dataset which is in the form of csv file using pandas\n### The dataframe consist of 150 rows and 6 columns","dff6e106":"## In the below scatter plot the distribution of the species is made with respect to the sepal length and its sepal width but this visual is some what mixed between the species type of virginica and versicolor","fd89d7b9":"## creating training and testing data is reqired to provide a good machine learning model","2b9cdd71":"### importing the libraries which are necessary for classification, visulaization and other processing of the data","dbbf3455":"![image.png](attachment:image.png)","73e0677e":"### The above shown is the predicted value from the decision tree and the actual correct output of test data  as a dataframe "}}