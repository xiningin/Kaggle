{"cell_type":{"ea283588":"code","122e92ff":"code","d2e62ac7":"code","789e2f5d":"code","8ad56a35":"code","8ac589db":"code","b19e163a":"code","a4af8ff5":"code","dc75a2b8":"markdown","c623a1c8":"markdown","c83369ae":"markdown","9600f9d8":"markdown","b22c22cf":"markdown","994a21d4":"markdown","8d574b78":"markdown"},"source":{"ea283588":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","122e92ff":"# read data\ntrain = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\", index_col = 0)\ntest = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\",  index_col = 0)\n\n# preview data\ntrain.head()","d2e62ac7":"y = train[\"target\"]\nfeatures = train.drop([\"target\"], axis = 1)\nfeatures.head()\n","789e2f5d":"from sklearn.preprocessing import OrdinalEncoder\n\n# List catagorical column\ncat_cols = [col for col in features.columns if 'cat' in col]\n\n# Encode\nX = features.copy()\nX_test = test.copy()\nenc = OrdinalEncoder()\nX[cat_cols] = enc.fit_transform(features[cat_cols])\nX_test[cat_cols] = enc.transform(test[cat_cols])\nX.head()","8ad56a35":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, random_state=0)","8ac589db":"from xgboost import XGBRegressor\n\n# model\nmodel = XGBRegressor()\n\n# fit model\n\nmodel.fit(X_train, y_train)\n\npredict = model.predict(X_val)\npredict","b19e163a":"from sklearn.metrics import mean_squared_error\n\"\"\"\nsquared : bool, default=True If True returns MSE value, if False returns RMSE value.\n\"\"\"\nprint(mean_squared_error(y_val, predict, squared=False))","a4af8ff5":"# use test data to generate prediction\n\npredictions = model.predict(X_test)\n\n# save the predictions to CSV file\n\noutput = pd.DataFrame({'Id': X_test.index,\n                      'target': predictions})\noutput.to_csv('submission.csv', index=False)","dc75a2b8":"# **SUBMISSION**","c623a1c8":"# **1.IMPORT DATA**","c83369ae":"# **2.SET TARGET & FEATURE**","9600f9d8":"# **4.TRAIN A MODEL**","b22c22cf":"# **3.ENCODE THE CATEGORICAL DATA INTO NUMERICAL**","994a21d4":"# **EVALUATE**","8d574b78":"# **3.SPLIT DATASET**"}}