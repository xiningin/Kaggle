{"cell_type":{"8f87b82f":"code","c6fb4941":"code","4c7b3042":"code","9b5ca9ce":"code","a1858752":"code","0d70180f":"code","e6550320":"code","d03baeb4":"code","3b530b22":"code","4e67f760":"code","d1d36f80":"code","605e223e":"code","77343a1b":"code","ef72eb01":"code","c8aa1fc9":"code","f645b2c8":"code","10426704":"code","fb1d1fb7":"code","810dc89e":"code","acee1479":"code","3a29e133":"code","d634606a":"code","c42f6142":"code","47b51016":"code","a446a933":"code","091a98af":"code","f34cd305":"code","0a08dc3e":"code","3987894f":"code","92339f81":"code","61bd30cf":"code","7a574e2c":"code","5c78157d":"code","e11222a8":"code","1e14ea59":"markdown","46ce7d14":"markdown","235a0475":"markdown","6cc777ac":"markdown","4b511359":"markdown","228a40ed":"markdown","ca32c4eb":"markdown","569a4798":"markdown","d5b89600":"markdown","703e3f06":"markdown","f14ad6e4":"markdown","129f5b87":"markdown"},"source":{"8f87b82f":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib.pyplot as plt","c6fb4941":"adult = pd.read_csv('..\/input\/adultbasefiles\/adult.data.txt',\n        names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")","4c7b3042":"adult.shape","9b5ca9ce":"adult.head()","a1858752":"adult[\"Country\"].value_counts()","0d70180f":"adult[\"Age\"].value_counts()\n\nprint(adult[\"Age\"].min())\nprint(adult[\"Age\"].max())\n","e6550320":"#Let's \"clean\" the database by removing lines with any missing datas\nbruteCleanedAdult = adult.dropna()","d03baeb4":"bruteCleanedAdult.shape","3b530b22":"# Let's define our firsts key columns\nkeyColumns = [\"Age\",\"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]","4e67f760":"#Let's \"clean\" the database by removing lines with any missing key columns data\ncleanedAdult = adult.dropna(axis=0, how='any', subset=keyColumns, inplace=False)\nprint(cleanedAdult.shape)","d1d36f80":"testAdult = pd.read_csv(\"..\/input\/adultbasefiles\/adult.test.txt\",\n        names=[\n        \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n        \"Hours per week\", \"Country\", \"Target\"],\n        sep=r'\\s*,\\s*',\n        engine='python',\n        na_values=\"?\")\n\nprint(testAdult.shape)\ncleanedTestAdult = testAdult.dropna(axis=0, how='any', subset=keyColumns, inplace=False)\nprint(cleanedTestAdult.shape)","605e223e":"#Let's separate the lists for knn tests\n\nXadult = cleanedAdult[keyColumns]\nYadult = cleanedAdult[\"Target\"]\nprint(Xadult.shape)\nprint(Yadult.shape)\n\nXtestAdult = cleanedTestAdult[keyColumns]\nYtestAdult = cleanedTestAdult[\"Target\"]\nprint(XtestAdult.shape)\nprint(YtestAdult.shape)","77343a1b":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3)","ef72eb01":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(knn, Xadult, Yadult, cv=10)","c8aa1fc9":"scores","f645b2c8":"knn.fit(Xadult,Yadult)","10426704":"YtestPred = knn.predict(XtestAdult)\nprint(YtestPred.shape)\nprint(YtestAdult.shape)\n","fb1d1fb7":"from sklearn.metrics import accuracy_score\n\naccuracy_score(YtestAdult,YtestPred)","810dc89e":"print(YtestPred)\nprint(YtestAdult.values)","acee1479":"#I figured out there are points at the end of the target value which makes accuracy = 0\nYtestAdult = YtestAdult.values\n\nfor i in range (len(YtestAdult)):\n    YtestAdult[i] = YtestAdult[i][:-1]\n\nprint(YtestAdult)","3a29e133":"accuracy_score(YtestAdult,YtestPred)","d634606a":"import pandas as pd\nimport sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\ndef testAdultBase(keyColumns=list,nbNeighborsKNN=int,indexColumnsToConvert=[],returnPredic=False):\n    \n    adult = pd.read_csv(\"..\/input\/adultbasefiles\/adult.data.txt\",names=[\"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\"Hours per week\", \"Country\", \"Target\"],sep=r'\\s*,\\s*',engine='python',na_values=\"?\")\n    testAdult = pd.read_csv(\"..\/input\/adultbasefiles\/adult.test.txt\",names=[\"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\"Hours per week\", \"Country\", \"Target\"],sep=r'\\s*,\\s*',engine='python',na_values=\"?\")\n    \n    cleanedAdult = adult.dropna(axis=0, how='any', subset=keyColumns, inplace=False)\n    cleanedTestAdult = testAdult.dropna(axis=0, how='any', subset=keyColumns, inplace=False)\n    \n    Xadult = cleanedAdult[keyColumns].values\n    Yadult = cleanedAdult[\"Target\"].values\n    XtestAdult = cleanedTestAdult[keyColumns].values\n    YtestAdult = cleanedTestAdult[\"Target\"].values\n    \n    for i in range (len(YtestAdult)):\n        YtestAdult[i] = YtestAdult[i][:-1]\n    \n    #let's convert the NaN columns into numbers, if necessary\n    if indexColumnsToConvert != []:\n        for col in indexColumnsToConvert:\n            valueList=[]\n            for i in range(len(Xadult)):\n                value = Xadult[i][col]\n                if value not in valueList:\n                    valueList.append(value)\n                Xadult[i][col] = valueList.index(value)\n            for i in range(len(XtestAdult)):\n                value = XtestAdult[i][col]\n                if value not in valueList:\n                    valueList.append(value)\n                XtestAdult[i][col] = valueList.index(value)\n    \n    \n    knn = KNeighborsClassifier(n_neighbors=nbNeighborsKNN)\n    knn.fit(Xadult,Yadult)\n    \n    YtestPred = knn.predict(XtestAdult)\n    \n    if returnPredic==True:\n        return YtestPred    \n    return (accuracy_score(YtestAdult,YtestPred))\n    ","c42f6142":"testAdultBase([\"Age\",\"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"],3)","47b51016":"keyColumns = [\"Age\",\"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]\n\naccuracyList=[]\nlistI=[]","a446a933":"for i in range (5,31):\n    accuracyList.append(testAdultBase(keyColumns,i))\n    listI.append(i)","091a98af":"maxi = max(accuracyList)\nprint(\"For the key columns {},\".format(keyColumns))\nprint(\"The best neighbors amount is {} with an accuracy of {}%\".format(listI[accuracyList.index(maxi)],np.round(maxi,6)*100))\n\nplt.title('Accuracy of the KNN prediction depending on number of neighbors.')\nplt.plot(listI,accuracyList)","f34cd305":"keyColumns2 = [\"Age\",\"Education-Num\",\"Sex\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]\naccuracyList2=[]\nlistI2=[]","0a08dc3e":"for i in range (10,41):\n    accuracyList2.append(testAdultBase(keyColumns2,i,[2]))\n    listI2.append(i)","3987894f":"maxi2 = max(accuracyList2)\nprint(\"For the key columns {},\".format(keyColumns2))\nprint(\"The best neighbors amount is {} with an accuracy of {}%\".format(listI2[accuracyList2.index(maxi2)],np.round(maxi2,6)*100))\n\nplt.title('Accuracy of the KNN prediction depending on number of neighbors.')\nplt.plot(listI2,accuracyList2)","92339f81":"keyColumns3 = [\"Age\",\"Education-Num\",\"Sex\",\"Capital Gain\", \"Hours per week\"]\naccuracyList3=[]\nlistI3=[]","61bd30cf":"for i in range (10,41):\n    accuracyList3.append(testAdultBase(keyColumns3,i,[2]))\n    listI3.append(i)","7a574e2c":"maxi3 = max(accuracyList3)\nprint(\"For the key columns {},\".format(keyColumns3))\nprint(\"The best neighbors amount is {} with an accuracy of {}%\".format(listI3[accuracyList3.index(maxi3)],np.round(maxi3,6)*100))\n\nplt.title('Accuracy of the KNN prediction depending on number of neighbors.')\nplt.plot(listI3,accuracyList3)","5c78157d":"finalYPred = testAdultBase(keyColumns2,19,[2],True)\nId = [i for i in range(len(finalYPred))]\n\nd = {'Id' : Id, 'Income' : finalYPred}\nmyDf = pd.DataFrame(d) \nmyDf.to_csv('bestPrediction.csv',\n             index=False, sep=',', line_terminator = '\\n', header = [\"Id\", \"Income\"])\n","e11222a8":"finalYPred","1e14ea59":"# Datas Output","46ce7d14":"### Ok, so the best amount of neighbors is around 16, with an accuracy of 84,098%.","235a0475":"# Conclusion","6cc777ac":"# 3) Ok, let's find the best number of neighbors for those key columns !","4b511359":"# 4) Let's try others key columns !\n","228a40ed":"# 2) Now we understand how it works, let's make a function that automates it","ca32c4eb":"### The best resusult has been obtained with the following key columns :\n### [\"Age\",\"Education-Num\",\"Sex\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]\n### with an accuracy of 84.3499% for 28 neighbors.","569a4798":"# 1) Let's try and define our firsts key columns","d5b89600":"### Removing the Capital loss, we lose accuracy.","703e3f06":"# PMR3508-2019-70  -  Using KNN predicator on the Adult base.","f14ad6e4":"### Ok, great, it works !","129f5b87":"### Ok, it's a bit better.\n### 84.3499% with 28 neighbors."}}