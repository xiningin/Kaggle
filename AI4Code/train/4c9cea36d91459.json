{"cell_type":{"73adc19a":"code","8e57975b":"code","30c8f898":"code","9d0ce801":"code","ea79b794":"code","ba8f7ee7":"code","93b91eb4":"code","5d3cc27f":"code","5b2fa81f":"code","b9a40bd3":"code","a8264ad6":"code","cd22dd23":"code","9e967338":"code","95516505":"code","866f1772":"code","512918a8":"code","c2beca32":"code","3bfcd2fb":"code","8b147cf4":"code","9b254caa":"code","0c6506a6":"code","920430b4":"code","1f773c70":"code","abed5fcc":"code","cf361c96":"code","0c2af32d":"code","a26686c9":"code","8edbb8e9":"code","9e02e1d1":"code","1ce18828":"code","6a1b1a92":"code","7f7c7649":"code","41c21604":"code","872c9d4b":"code","d156bfa2":"code","0e56d569":"code","49051f83":"markdown","46a70e09":"markdown","3f5c0773":"markdown","532c32c7":"markdown","e2212ea3":"markdown"},"source":{"73adc19a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e57975b":"#import openpyxl\nimport warnings\nwarnings.filterwarnings('ignore')  # \u9632\u6b62\u8b66\u544a\u6587\u4ef6\u7684\u5305\n%matplotlib inline\nfrom time import time\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split  # \u5c06\u6570\u636e\u96c6\u5206\u6210\u6d4b\u8bd5\u96c6\u548c\u8bad\u7ec3\u96c6\nfrom imblearn.over_sampling import ADASYN\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB  # naive bayesian\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier  \nfrom sklearn.svm import SVC  ## \u652f\u6301\u5411\u91cf\u673a\u5206\u7c7b\u6a21\u578b","30c8f898":"#\u8bfb\u5165\u6587\u4ef6\nmatch = pd.read_csv('..\/input\/european-cup2\/International football results from 1872 to 2021.csv')\n#team = pd.read_csv('EuroCup21 Teams.csv')\n#match\nmatch.columns\nmatch.columns.values\nmatch.shape","9d0ce801":"#\u5220\u9664\u65e0\u7528\u4fe1\u606f\nmatch2 = match.drop(['date','city'],1)\nmatch2.head()","ea79b794":"#\u5206\u51fa\u6d4b\u8bd5\u96c6\ntest = match2[(match2['home_score'].isna())]\nmatch3 = match2[(match2['home_score']>=0)]\nmatch3.tail()\n#test","ba8f7ee7":"#\u7b97\u51fa\u51c0\u80dc\u7403\nmatch3['result'] = match3['home_score'] - match3['away_score'] + 0\n#match3['result'] = pd.to_numeric(match3['result'])\nmatch3['result']\n#match3['result'].unique()","93b91eb4":"#\u5c06\u51c0\u80dc\u7403\u8f6c\u5316\u4e3a\u8f93\u8d62\nfor i in range(42329):\n    if match3.loc[i,'result']>0:\n        match3.loc[i,'result2']=1.0\n    if match3.loc[i,'result']==0:\n        match3.loc[i,'result2']=0.0\n    if match3.loc[i,'result']<0:\n        match3.loc[i,'result2']=-1.0\n#match3['result2'].unique()\nmatch3['result2']","5d3cc27f":"#\u75280,1\u8868\u793a\u662f\u5426\u4e2d\u7acb\nprint(match3['neutral'].unique())\nmatch3['neutral'] = match3['neutral'].map({True:1.0,False:0.0})\nprint(match3['neutral'].unique())\nmatch3.head()","5b2fa81f":"match4 = match3","b9a40bd3":"#\u66ff\u6362tournament\ntour = match4['tournament'].unique()\nprint(tour)\ntour_num = len(tour)\nprint(tour_num)\n\ndef replace_tournament(x):\n    for i in range(tour_num):\n        x = x.replace(tour[i],i)\n    return x\n\nmatch4['tournament'] = replace_tournament(match4['tournament'])","a8264ad6":"#\u66ff\u6362 away_team\uff0chome_team\uff0ccountry\na = match4['country']\nb = match4['home_team']\nc = match4['away_team']\nteam = pd.concat([a,b,c], 0,sort=False)\nprint(team)\nteams = team.unique()\n#print(teams)\n\nteam_num = len(teams)\nprint(team_num)\n\ndef replace_country(x):\n    for i in range(team_num):\n        x = x.replace(teams[i],i)\n    return x\n\nmatch4['home_team'] = replace_country(match4['home_team'])\nmatch4['away_team'] = replace_country(match4['away_team'])\nmatch4['country'] = replace_country(match4['country'])","cd22dd23":"#\u68c0\u67e5\n#match4['tournament'].unique()\n#match4['country'].unique()\nmatch4\n#match4.shape","9e967338":"#\u5220\u53bb\u591a\u4f59\u7684\u5217\nmatch5 = match4.drop(['home_score','away_score','result'],1)\nmatch5","95516505":"#\u53d6\u51fa\u7ed3\u679c\nmatch_y = match5.pop('result2')","866f1772":"#\u5206\u51fa\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\nnp.random.seed(111)\ntrain_x, valid_x, train_y, valid_y = train_test_split(match5, match_y, test_size=0.2)\nvalid_x","512918a8":"#\u57fa\u51c6\nvalid_bench = np.ones(valid_y.shape)\nvalid_conf = confusion_matrix(valid_y,valid_bench)\nprint(valid_conf)","c2beca32":"#\u5b9a\u4e49\u5224\u65ad\u6807\u51c6\ndef acc(conf):\n    return np.sum(conf[:,0] * [1,-1,-1] + conf[:,1] * [-1,1,-1] + conf[:,2] * [-1,-1,1])\nprint(acc(valid_conf))","3bfcd2fb":"#\u91cd\u62bd\u6837\nm_resample = ADASYN()\nprint(train_y.__len__())\ntrain_x2,train_y2 = m_resample.fit_resample(train_x,train_y)\nprint(train_y2.__len__())\n#train_x\ntrain_x2","8b147cf4":"#1\nm = BernoulliNB()\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))","9b254caa":"#1\u2019\n# m = BernoulliNB()\n\n# m.fit(train_x2, train_y2)\n# valid_pred = m.predict(valid_x)\n# valid_conf = confusion_matrix(valid_y, valid_pred)\n# print(valid_conf)\n# print(acc(valid_conf))","0c6506a6":"#2\nm = GaussianNB()\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))","920430b4":"#2\u2018\n# m = GaussianNB()\n\n# m.fit(train_x2, train_y2)\n# valid_pred = m.predict(valid_x)\n# valid_conf = confusion_matrix(valid_y, valid_pred)\n# print(valid_conf)\n# print(acc(valid_conf))","1f773c70":"#3\nt0 = time()\n\nm = MLPClassifier(hidden_layer_sizes =(64,32,16))\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))\n\nt1 = time()\nprint('\u65f6\u957f',t1-t0)","abed5fcc":"#3\u2019\n# m = MLPClassifier(hidden_layer_sizes =(64,32,16))\n\n# m.fit(train_x2, train_y2)\n# valid_pred = m.predict(valid_x)\n# valid_conf = confusion_matrix(valid_y, valid_pred)\n# print(valid_conf)\n# print(acc(valid_conf))","cf361c96":"#4\nm = DecisionTreeClassifier()\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))","0c2af32d":"#5\nt0 = time()\n\nm = SVC()\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))\n\nt1 = time()\nprint('\u65f6\u957f',t1-t0)","a26686c9":"#6\nm = RandomForestClassifier(n_estimators=100)\n\nm.fit(train_x, train_y)\nvalid_pred = m.predict(valid_x)\nvalid_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_conf)\nprint(acc(valid_conf))","8edbb8e9":"# 7\nm1 = BernoulliNB()\nm2 = GaussianNB()\n\nm = VotingClassifier(estimators=[('BernoulliNB',m1),('G',m2)],voting='hard')\nm.fit(train_x,train_y)\nvalid_pred = m.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","9e02e1d1":"# 8\nm1 = MLPClassifier(hidden_layer_sizes =(32,16,8,4))\nm2 = DecisionTreeClassifier()\n\nm = VotingClassifier(estimators=[('NN',m1),('Decision',m2)],voting='hard')\nm.fit(train_x,train_y)\nvalid_pred = m.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","1ce18828":"#9\nm1 = RandomForestClassifier(n_estimators=100)\nm2 = DecisionTreeClassifier()\nm3 = MLPClassifier(hidden_layer_sizes =(32,16,8,4))\n\nm = VotingClassifier(estimators=[('B',m1),('DC',m2),('NN',m3)],voting='hard')\nm.fit(train_x,train_y)\nvalid_pred = m.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","6a1b1a92":"#10\nm1 = GaussianNB()\nm2 = SVC()\nm3 = BernoulliNB()\n\nm = VotingClassifier(estimators=[('G',m1),('SVC',m2),('NN',m3)],voting='hard')\nm.fit(train_x,train_y)\nvalid_pred = m.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","7f7c7649":"#11\nm1 = BernoulliNB()\nm2 = DecisionTreeClassifier()\nm3 = MLPClassifier(hidden_layer_sizes =(32,16,8,4))\nm4 = GaussianNB()\n\nm_f = VotingClassifier(estimators=[('B',m1),('DC',m2),('MLP',m3),('G',m4)],voting='hard')\nm_f.fit(train_x,train_y)\nvalid_pred = m_f.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","41c21604":"#12\nm1 = BernoulliNB()\nm2 = DecisionTreeClassifier()\nm3 = MLPClassifier(hidden_layer_sizes =(32,16,8,4))\nm4 = GaussianNB()\nm5 = RandomForestClassifier(n_estimators=100)\n\nm = VotingClassifier(estimators=[('B',m1),('DC',m2),('MLP',m3),('G',m4),('RFC',m5)],voting='hard')\nm.fit(train_x,train_y)\nvalid_pred = m.predict(valid_x)\nvalid_p_conf = confusion_matrix(valid_y, valid_pred)\nprint(valid_p_conf)\nprint(acc(valid_p_conf))","872c9d4b":"# \u5904\u7406\u6d4b\u8bd5\u96c6\ntest_x = test.drop(['home_score','away_score'],1)\ntest_x['home_team'] = replace_country(test_x['home_team'])\ntest_x['away_team'] = replace_country(test_x['away_team'])\ntest_x['country'] = replace_country(test_x['country'])\ntest_x['neutral'] = test_x['neutral'].map({True:1.0,False:0.0})\ntest_x['tournament'] = replace_tournament(test_x['tournament'])\n\nfor i in test_x.keys():\n    test_x[i].fillna(0.0,inplace=True)\n\ntest_x","d156bfa2":"#\u63d0\u4ea4\u7ed3\u679c\neuro_submit= test_x[['home_team']].copy()\neuro_submit['away_team'] = test_x['away_team']\neuro_submit['tournament'] = test_x['tournament']\neuro_submit['prediction'] = m_f.predict(test_x)\n#euro_submit.to_excel('..\/output\/kaggle\/working\/euro_submit.xlsx', index=False)\neuro_submit","0e56d569":"#\u5c06\u6570\u5b57\u8f6c\u6362\u56de\u6587\u5b57\ndef place_tournament(x):\n    for i in range(tour_num):\n        x = x.replace(i,tour[i])\n    return x\n\ndef place_country(x):\n    for i in range(team_num):\n        x = x.replace(i,teams[i])\n    return x\n\neuro_submit['home_team'] = place_country(euro_submit['home_team'])\neuro_submit['away_team'] = place_country(euro_submit['away_team'])\neuro_submit['tournament'] = place_tournament(euro_submit['tournament'])\neuro_submit\n\n#\u6570\u5b57\u4e3a\u9884\u6d4b\u7684\u6bcf\u573a\u6bd4\u8d5b\u7684\u80dc\u8d1f\u60c5\u51b5\n#1\u8868\u793a\u4e3b\u573a\u961f\u80dc\u5229\uff0c0\u8868\u793a\u5e73\u5c40\uff0c-1\u8868\u793a\u5ba2\u573a\u961f\u80dc\u5229","49051f83":"# \u8f93\u51fa\u7ed3\u679c","46a70e09":"# \u5f00\u59cb\u5c06\u6587\u5b57\u53d8\u4e3a\u6570\u5b57","3f5c0773":"# \u52a0\u5de5\u4fe1\u606f","532c32c7":"# \u5f00\u59cb\u8bad\u7ec3","e2212ea3":"# \u8c03\u5305"}}