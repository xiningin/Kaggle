{"cell_type":{"df5a7215":"code","fc5c815d":"code","3cc6e748":"code","923b6b59":"code","791aa629":"code","88d26e7c":"code","34221653":"code","98203e8f":"code","f8189d2a":"code","d4b11e9b":"code","da181630":"code","0704b5b3":"code","b65ed4ad":"code","c88be8b3":"code","4b8dabd0":"code","822ea035":"code","baa1d48f":"code","d7a31372":"code","21d1d325":"markdown","651fb448":"markdown","ec957392":"markdown","356b6e3c":"markdown","cc393104":"markdown","f4965c52":"markdown","2fb0c81c":"markdown","77476100":"markdown","5eb0bd1e":"markdown","4a215dce":"markdown","b21b7186":"markdown","da7a5ff5":"markdown","e3936e8d":"markdown","47af6a2e":"markdown","2e975e08":"markdown","32996d07":"markdown","a48504e8":"markdown","97b58a77":"markdown","29e936a4":"markdown"},"source":{"df5a7215":"import pandas as pd\npd.set_option('display.max_columns',100)\npd.set_option('display.max_rows',100)\nimport sqlite3\nprint('complete...')","fc5c815d":"try:\n    conn = sqlite3.connect('danny_diner.db') # # Creates connection to existing db or creates an empty db\n    print('Connected successfully...')  \nexcept Exception as e:\n    print('Error during connection:', str(e))\nelse: \n    c = conn.cursor() # # Cursor allows SQL commands to be executed.","3cc6e748":"c.execute( '''\n        CREATE TABLE sales (\n          \"customer_id\" VARCHAR(1),\n          \"order_date\" DATE,\n          \"product_id\" INTEGER\n        ); ''')\n\nc.execute('''\n        INSERT INTO sales\n          (\"customer_id\", \"order_date\", \"product_id\")\n        VALUES\n          ('A', '2021-01-01', '1'),\n          ('A', '2021-01-01', '2'),\n          ('A', '2021-01-07', '2'),\n          ('A', '2021-01-10', '3'),\n          ('A', '2021-01-11', '3'),\n          ('A', '2021-01-11', '3'),\n          ('B', '2021-01-01', '2'),\n          ('B', '2021-01-02', '2'),\n          ('B', '2021-01-04', '1'),\n          ('B', '2021-01-11', '1'),\n          ('B', '2021-01-16', '3'),\n          ('B', '2021-02-01', '3'),\n          ('C', '2021-01-01', '3'),\n          ('C', '2021-01-01', '3'),\n          ('C', '2021-01-07', '3'); ''')\n\nc.execute('''\n        CREATE TABLE menu (\n          \"product_id\" INTEGER,\n          \"product_name\" VARCHAR(5),\n          \"price\" INTEGER\n        );''')\n\nc.execute('''\n        INSERT INTO menu\n          (\"product_id\", \"product_name\", \"price\")\n        VALUES\n          ('1', 'sushi', '10'),\n          ('2', 'curry', '15'),\n          ('3', 'ramen', '12'); ''')\n\nc.execute('''     \n        CREATE TABLE members (\n          \"customer_id\" VARCHAR(1),\n          \"join_date\" DATE\n        );''')\n\nc.execute('''\n        INSERT INTO members\n          (\"customer_id\", \"join_date\")\n        VALUES\n          ('A', '2021-01-07'),\n          ('B', '2021-01-09'); ''')\nconn.commit()\nprint('complete...')","923b6b59":"sales_df = pd.read_sql('''\nSELECT * FROM sales''', conn)\nprint('Table: sales')\nsales_df","791aa629":"menu_df = pd.read_sql('''\nSELECT * FROM menu''', conn)\nprint('Table: menu')\nmenu_df","88d26e7c":"members_df = pd.read_sql('''\nSELECT * FROM members''',conn)\nprint('Table: members')\nmembers_df","34221653":"customer_total = pd.read_sql('''\nSELECT s.customer_id\n    , SUM(m.price) AS total\nFROM sales s \nJOIN menu m USING(product_id)\nGROUP BY s.customer_id;\n''', conn)\ncustomer_total","98203e8f":"customer_visits = pd.read_sql('''\nSELECT customer_id\n     ,COUNT(DISTINCT order_date) AS visits\nFROM sales\nGROUP BY customer_id;''', conn)\ncustomer_visits","f8189d2a":"first_item = pd.read_sql('''\nSELECT s.customer_id\n    , m.product_name\nFROM sales s\nJOIN menu m USING(product_id)\nWHERE s.order_date IN (\n    SELECT MIN(order_date)\n    FROM sales\n    GROUP BY customer_id\n   \n    );''', conn)\nfirst_item","d4b11e9b":"most_purchased = pd.read_sql('''\nSELECT m.product_name\n    , COUNT(s.product_id) AS purchase_frequency\nFROM menu m\nJOIN sales s USING(product_id)\nGROUP BY s.product_id\nORDER BY s.product_id DESC\nLIMIT 1;''', conn)\nmost_purchased","da181630":"popular_item = pd.read_sql('''\nWITH cust_pop\nAS (\nSELECT customer_id\n    , product_id\n    , COUNT(product_id) AS order_count\nFROM sales\nGROUP BY customer_id, product_id)\n\nSELECT customer_id\n    , product_name\nFROM\n    (SELECT c.customer_id\n        , m.product_name\n        , DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_count DESC) AS rank\n    FROM cust_pop c\n    JOIN menu m USING(product_id)) AS fav\nWHERE rank = 1;\n''',conn)\npopular_item","0704b5b3":"first_order_after_memeber = pd.read_sql('''\nWITH after_join \nAS (\nSELECT s.*\n    , mm.*\n    , m.product_name\n    , DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date) AS first\nFROM sales s\nJOIN members mm USING(customer_id)\nJOIN menu m ON s.product_id = m.product_id\nWHERE s.order_date >= mm.join_date)\n\n\nSELECT customer_id\n    , product_name\nFROM after_join\nWHERE first = 1;\n\n''',conn)\nfirst_order_after_memeber","b65ed4ad":"pre_member = pd.read_sql('''\nWITH last_order_member\nAS(\nSELECT s.*\n    , mm.*\n    , m.product_name\n    , DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date DESC)AS last\nFROM sales s\nJOIN members mm USING(customer_id)\nJOIN menu m ON s.product_id = m.product_id\nWHERE s.order_date < mm.join_date)\n\nSELECT customer_id\n    , product_name\nFROM last_order_member\nWHERE last = 1;\n\n\n''', conn)\npre_member","c88be8b3":"totals = pd.read_sql('''\n\nSELECT s.customer_id\n    , SUM(m.price) AS total_spent\n    , COUNT(s.product_id) AS total_items\nFROM sales s\nJOIN members mm USING(customer_id)\nJOIN menu m ON s.product_id = m.product_id\nWHERE s.order_date < mm.join_date\nGROUP BY s.customer_id\n\n''', conn)\ntotals","4b8dabd0":"cust_pts = pd.read_sql('''\nWITH points\nAS (\nSELECT s.customer_id\n    , s.product_id\n    , m.price\n    , CASE \n        WHEN product_id = 1 THEN price * 20\n        ELSE price *10\n        END AS points\nFROM sales s\nJOIN menu m USING(product_id))\n\nSELECT customer_id\n    , SUM(points) AS total_points\nFROM points\nGROUP BY customer_id\n\n;''', conn)\ncust_pts","822ea035":"total_points = pd.read_sql('''\n\nWITH cust_points \nAS(\n\nSELECT s.customer_id\n    , s.order_date\n    , mm.join_date\n    , DATE(mm.join_date, '+6 day') AS end_promo\n    , s.product_id\n    , m.price\n    , CASE \n        WHEN s.product_id = 1\n            THEN m.price * 20 \n        WHEN s.product_id != 1 AND \n        (s.order_date BETWEEN mm.join_date AND DATE(mm.join_date,'+6 day'))\n            THEN (m.price * 20)\n        ELSE m.price * 10\n        END AS points\nFROM sales s\nJOIN members mm USING(customer_id)\nJOIN menu m USING(product_id)\nWHERE \n    s.order_date <= '2021-01-31'\n\n)\n\nSELECT customer_id\n    , SUM(points)  AS total\nFROM cust_points\nGROUP BY customer_id;\n''',conn)\n\ntotal_points\n\n","baa1d48f":"full_tb = pd.read_sql('''\n\nSELECT s.customer_id\n    , s.order_date\n    , m.product_name\n    , m.price\n    , CASE\n        WHEN s.order_date < mm.join_date THEN 'N'\n        WHEN s.order_date >= mm.join_date THEN 'Y'\n        ELSE 'N'\n        END AS member\nFROM sales s\nJOIN menu m USING(product_id)\nLEFT JOIN members mm USING(customer_id)\n\n''', conn)\nfull_tb","d7a31372":"conn.close()\nprint('complete...')","21d1d325":"***","651fb448":"<p style='font-family:times new roman;font-size:16px'>6. Which item was purchased first by the customer after they became a member?<\/p>","ec957392":"<h2 style='font-family:times new roman;color:#902A88'> Case Study<\/h2>","356b6e3c":"<p style='font-family:times new roman;font-size:16px'>  1. What is the total amount each customer spent at the restaurant? <\/p>","cc393104":"<p style='font-family:times new roman;font-size:16px'>2. How many days has each customer visited the restaurant? <\/p>","f4965c52":"***","2fb0c81c":"<p style='font-family:times new roman;font-size:16px'>4. What is the most purchased item on the menu and how many times was it purchased by all customers? <\/p>","77476100":"<h1 style='font-family:times new roman;color:green;'> <center> <strong>Danny's Diner SQL Case Study #1 <\/strong><\/center> <\/h1>","5eb0bd1e":"<p style='font-family:times new roman;font-size:16px'>10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?<\/p>","4a215dce":"<p style='font-family:times new roman;font-size:16px'>2. What was the first item from the menu purchased by each customer?<\/p>","b21b7186":"<p style='font-family:times new roman;font-size:16px'>7. Which item was purchased just before the customer became a member?<\/p>","da7a5ff5":"1.\t[Danny's 8 Week Challenge](https:\/\/8weeksqlchallenge.com)\n2.\t[Tutorial on creating a SQLite Database in Python](https:\/\/appdividend.com\/2020\/10\/14\/how-to-create-sqlite-database-in-python\/)\n3.\t[Youtube Video Tutorial on using sqlite3 package in python](https:\/\/www.youtube.com\/watch?v=llF06RLZbBY)\n4. [Helpful Youtube Video about databases](https:\/\/www.youtube.com\/watch?v=xlbSQJuHkRE)","e3936e8d":"<p style='font-family:times new roman;font-size:16px'>8. What is the total items and amount spent for each member before they became a member?<\/p>","47af6a2e":"<h3 style='font-family:times new roman;'> The case study was created by <a href='https:\/\/www.datawithdanny.com'>Danny Ma<\/a>. If you want to participate in Danny's SQL challenge you can so at <a href='https:\/\/8weeksqlchallenge.com'>SQL 8 Week Challenge<\/a>!<\/h3>","2e975e08":"<p style='font-family:times new roman;font-size:16px'>9. If each <span>&#36;<\/span>1 spent equates to 10 points and sushi has a 2x points multiplier how many points would each customer have? <\/p>","32996d07":"<h2 style='font-family:times new roman;color:#902A88;'>Bonus: Join all tables!<\/h2>","a48504e8":"<p style='font-family:times new roman;font-size:16px'>5. Which item was the most popular for each customer?<\/p> ","97b58a77":"<h2 style='font-family:times new roman'>References<\/h2>","29e936a4":"<h2 style='font-family:times new roman;color:#902A88'>Set Up<\/h2>"}}