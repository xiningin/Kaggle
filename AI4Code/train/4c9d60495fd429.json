{"cell_type":{"80303dea":"code","8f643123":"code","42e36818":"code","bac67c96":"code","9e688334":"code","8e6eba54":"code","a792a5bf":"code","5151fe15":"code","e6cccbda":"code","f678bccb":"code","8cfb7c80":"code","f6b748e0":"code","3019261c":"code","a9330e44":"code","ceb772d4":"code","66da1e5d":"code","55541baf":"code","265b9b94":"code","a466de60":"code","4754f62e":"code","53caa9ba":"code","1ace84e3":"code","2fb2db05":"code","28a037ab":"markdown"},"source":{"80303dea":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8f643123":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv', parse_dates=['date'])\nholidays = pd.read_csv('\/kaggle\/input\/festivities-in-finland-norway-sweden-tsp-0122\/nordic_holidays.csv', parse_dates=['date'])","42e36818":"def train_test_split(df, n):\n    df = df.sort_values(['date', 'country', 'store'])\n    if isinstance(n, float):\n        n = int(df.shape[0] * n)\n    return df.iloc[0:df.shape[0] - n], df.iloc[df.shape[0] - n:]\n\ndef split_X_y(df, target='num_sold'):\n    if 'date' in df.columns:\n        df = df.drop('date', axis=1)\n    return df.drop(target, axis=1), df[target]\n\ndef add_datepart(X, feat, drop=True):     \n    X[feat] = pd.to_datetime(X[feat])\n    attrs = ['year', 'month', 'day', 'dayofweek', 'quarter', 'dayofyear']\n    for attr in attrs:\n        X[attr] = getattr(X[feat].dt, attr.lower())\n    if drop:\n        X = X.drop(feat, axis=1)\n    return X\n\ndef encode_cat(X, encodings=None):\n    if encodings is None:\n        encodings = {}\n    for col, dtype in X.dtypes.iteritems():\n        if dtype == 'object' or dtype == pd.CategoricalDtype:\n            X[col] = X[col].astype('category')\n            if col in encodings.keys():\n                X[col] = X[col].cat.set_categories(encodings[col])\n            else:\n                encodings[col] = X[col].cat.categories\n    return X, encodings\n\ndef convert_cats(X):\n    for col, dtype in X.dtypes.iteritems():\n        if dtype.name == 'category':\n            X[col] = X[col].cat.codes\n    return X\n\n\ndef print_scores(model, X_train, y_train, X_val, y_val, scorer):\n    scores = [model.score(X_train, y_train),\n              scorer(y_train, model.predict(X_train)),\n              model.score(X_val, y_val),\n              scorer(y_val, model.predict(X_val))]\n    if hasattr(model, 'oob_score_'):\n        scores.append(model.oob_score_)\n        \n    print(scores)\n    \n    \n    \ndef SMAPE_score(y_true, y_pred):\n    return (100 \/ len(y_true)) * np.sum((np.abs(y_true - y_pred) \/ ((np.abs(y_true) + np.abs(y_pred)) \/ 2)))","bac67c96":"train = add_datepart(train, 'date', False)\ntrain.head()","9e688334":"import holidays\nimport dateutil.easter as easter\n\nholiday_list = []\n\nfor date in holidays.Finland(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Finland\"])\n    \nfor date in holidays.Norway(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    holiday_list.append([date[0], date[1], \"Norway\"])\n    \nfor date in holidays.Sweden(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020], observed=True).items():\n    if date[1]!='S\u00f6ndag':\n        holiday_list.append([date[0], date[1].replace(\", S\u00f6ndag\", \"\"), \"Sweden\"])\n    \n    \n# Last week of the year\nfor year in [2014, 2015, 2016, 2017, 2018, 2019, 2020]:\n    for i, day in enumerate(range(24, 32)):\n        for country in ['Finland', 'Sweden', 'Norway']:\n             holiday_list.append([pd.to_datetime(f\"{year}-{12}-{day}\").date(), \n                                  f\"Last week of the year (day {i+1})\", \n                                  country])\n# Swedish Rock Concert\nfor start, end, year in [[4,7,2014],[3,6,2015],[8,11,2016],[7,10,2017],[6,10,2018],[5,8,2019]]:\n    for i, day in enumerate(range(start, end+1)):\n        holiday_list.append([pd.to_datetime(f\"{year}-{6}-{day}\").date(), \n                                  f\"Swedish Rock Concert (day {i+1})\", \n                                  \"Sweden\"])\n        \n# Last Wednesday of June\nfor date in ['2014-06-25', '2015-06-24', '2016-06-29', '2017-06-28', '2018-06-27', '2019-06-26', '2020-06-24']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"Last Wednesday of June\", \n                                  country])\n            \n# First Sunday of November\nfor date in ['2014-11-02', '2015-11-1', '2016-11-6', '2017-11-5', '2018-11-4', '2019-11-3', '2020-11-01']:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"First Sunday of November\", \n                                  country])\n            \n# Independence Day of Finland\nfor year in [2014, 2015, 2016, 2017, 2018, 2019, 2020]:\n    holiday_list.append([pd.to_datetime(f\"{year}-{12}-{6}\").date(), \n                                      f\"Independence Day of Finland\", \n                                      'Finland'])\n\n# Easter\neaster_date = [easter.easter(y) for y in [2014, 2015, 2016, 2017, 2018, 2019, 2020]]\nfor date in easter_date:\n    for country in ['Finland', 'Sweden', 'Norway']:\n         holiday_list.append([pd.to_datetime(date).date(), \n                                  f\"Easter\", \n                                  country])\n            \n\n\nholidays = pd.DataFrame(holiday_list, columns=['date', 'holiday', 'country'])\nholidays = holidays.drop_duplicates(['date', 'country'], keep='first')\nholidays = holidays.sort_values(['date', 'country'])\nholidays['date'] = pd.to_datetime(holidays['date'])","8e6eba54":"def add_time_since(train, holiday, holiday_column, early_year):\n    train = train.sort_values(['date', 'country']).copy()\n    latest_date = {}\n    \n    for country in train.country.unique():\n        date = holidays[(holidays[holiday_column] == holiday) &\n                        (holidays['date'].dt.year == early_year) &\n                        (holidays['country'] == country)].date\n        \n        if date.shape[0] != 0:\n            date = date.values[-1]\n        else:\n            date = None\n            \n        latest_date[country] = date\n    \n    time_since_holiday = []\n    \n    for date, country, is_holiday in zip(train['date'].values, train['country'].values, train[holiday_column] == holiday):\n        if is_holiday:\n            latest_date[country] = date\n        \n        if latest_date[country] != None:\n            diff = date - latest_date[country]\n            time_since_holiday.append(diff)\n            \n        else:\n            time_since_holiday.append(0)\n    \n    train[f'days_since_{holiday}'] = time_since_holiday\n    \n#     return train[f'days_since_{holiday}'].astype('timedelta64[D]')\n                                                 \n    train[f'days_since_{holiday}'] = train[f'days_since_{holiday}'].astype('timedelta64[D]')\n    \n    if train[f'days_since_{holiday}'].dtype.name != 'float64':\n        train[f'days_since_{holiday}'] = train[f'days_since_{holiday}'].dt.days\n\n    return train\n        \ndef add_time_until(train, holiday, holiday_column, latest_year):\n    train = train.sort_values(['date', 'country'], ascending=False).copy()\n    upcoming_date = {}\n    \n    for country in train.country.unique():\n        date = holidays[(holidays[holiday_column] == holiday) &\n                        (holidays['date'].dt.year == latest_year) &\n                        (holidays['country'] == country)].date\n        \n        if date.shape[0] != 0:\n            date = date.values[0]\n        else:\n            date = None\n            \n        upcoming_date[country] = date\n    \n    time_until_holiday = []\n    \n    for date, country, is_holiday in zip(train['date'].values, train['country'].values, train[holiday_column] == holiday):\n        if is_holiday:\n            upcoming_date[country] = date\n        \n        if upcoming_date[country] != None:\n            diff = upcoming_date[country] - date\n            time_until_holiday.append(diff)\n            \n        else:\n            time_until_holiday.append(0)\n    \n    train[f'days_until_{holiday}'] = time_until_holiday\n    train[f'days_until_{holiday}'] = train[f'days_until_{holiday}'].astype('timedelta64[D]') # * 1.15741e-14\n    \n    if train[f'days_until_{holiday}'].dtype.name != 'float64':\n        train[f'days_until_{holiday}'] = train[f'days_until_{holiday}'].dt.days\n\n    return train","a792a5bf":"train = pd.merge(train, holidays, how='left', left_on=['country', 'date'], right_on=['country', 'date'])\n\ntrain['is_holiday'] = train['holiday'].notna()\nholidays['is_holiday'] = True","5151fe15":"train = add_time_since(train, True, 'is_holiday', 2014)\ntrain = add_time_until(train, True, 'is_holiday', 2019)","e6cccbda":"train, encodings = encode_cat(train)\ntrain.head()","f678bccb":"dev, val = train_test_split(train, test.shape[0])\ndev.shape, val.shape","8cfb7c80":"X_train, y_train = split_X_y(dev)\nX_val, y_val = split_X_y(val)\n\nX_train = convert_cats(X_train)\nX_val = convert_cats(X_val)","f6b748e0":"y_train = np.log(y_train)\ny_val = np.log(y_val)","3019261c":"# Check that validation doesn't overlap with training set\n\n(X_val.row_id > X_train.row_id.max()).all()","a9330e44":"%%time\n\nmodel = RandomForestRegressor(n_estimators=1000, min_samples_leaf=50, n_jobs=-1)\nmodel.fit(X_train, y_train)\n\nprint_scores(model, X_train, y_train, X_val, y_val, SMAPE_score)","ceb772d4":"test.head()","66da1e5d":"test = add_datepart(test, 'date', False)","55541baf":"test = pd.merge(test, holidays, how='left', left_on=['country', 'date'], right_on=['country', 'date'])\ntest['is_holiday'] = test['holiday'].notna()\n\ntest = add_time_since(test, True, 'is_holiday', 2018)\ntest = add_time_until(test, True, 'is_holiday', 2020)","265b9b94":"test, _ = encode_cat(test, encodings)","a466de60":"test = convert_cats(test)\ntest.head()","4754f62e":"test = test.drop('date', axis=1)","53caa9ba":"preds = model.predict(test)","1ace84e3":"submission = pd.DataFrame({'row_id': test.row_id,\n                           'num_sold': np.exp(preds)})\n\nsubmission.head()","2fb2db05":"submission.to_csv('submission.csv', index=False)","28a037ab":"# Submission"}}