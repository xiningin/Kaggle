{"cell_type":{"f4bb7d65":"code","4945171e":"code","18fd4b6e":"code","010a8a92":"code","91ef53e7":"code","abf76ea3":"code","c2e0df72":"code","d6612ee0":"code","27d4e31e":"code","f8b64745":"code","1ec10d9e":"code","9983678b":"code","684d6d59":"code","0e924753":"code","f2ba9c0f":"code","3262c10f":"code","64023a1c":"code","6b2dd995":"code","396cd16e":"code","d3498d11":"code","fbab224e":"code","091f7e09":"code","0022ab87":"markdown","5d844e66":"markdown","19fa10ea":"markdown","f79f7796":"markdown","d8e716d9":"markdown","7c7b425f":"markdown","9f466613":"markdown","89e7e98e":"markdown","71b77309":"markdown","d0844f29":"markdown","f4ff82c3":"markdown","8fb21e8f":"markdown","99497a58":"markdown","323ae162":"markdown"},"source":{"f4bb7d65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4945171e":"dfdata = pd.read_csv('\/kaggle\/input\/durianpropertyscraped\/durianproperty.csv')\ndfdata.head()","18fd4b6e":"dfnew = dfdata.rename(columns={'house_type':'Type','house_address':'Address','house_location':'Location','house_city':'City','date':'Date','price':'Price','size_price':'psf','bedroom':'Bedroom','bathroom':'Bathroom','parking':'Parking','size':'Size','furnish':'Furnish'})\ndfnew.head()","010a8a92":"dfnew.info()","91ef53e7":"print('Type total null :', dfnew.Type.isna().sum())\nprint('Address total null :', dfnew.Address.isna().sum())\nprint('Location total null :', dfnew.Location.isna().sum())\nprint('City total null :', dfnew.City.isna().sum())\nprint('Date total null :', dfnew.Date.isna().sum())\nprint('Price total null :', dfnew.Price.isna().sum())\nprint('psf total null :', dfnew.psf.isna().sum())\nprint('Bedroom total null :', dfnew.Bedroom.isna().sum())\nprint('Bathroom total null :', dfnew.Bathroom.isna().sum())\nprint('Parking total null :', dfnew.Parking.isna().sum())\nprint('Size total null :', dfnew.Size.isna().sum())\nprint('Furnish total null :', dfnew.Furnish.isna().sum())","abf76ea3":"dfnew[dfnew.City.isna()].head()","c2e0df72":"dfnew.City.replace('',np.nan, inplace=True)\n\ndfnew.dropna(subset = ['City'], inplace=True)","d6612ee0":"print('Type total null :', dfnew.Type.isna().sum())\nprint('Address total null :', dfnew.Address.isna().sum())\nprint('Location total null :', dfnew.Location.isna().sum())\nprint('City total null :', dfnew.City.isna().sum())\nprint('Date total null :', dfnew.Date.isna().sum())\nprint('Price total null :', dfnew.Price.isna().sum())\nprint('psf total null :', dfnew.psf.isna().sum())\nprint('Bedroom total null :', dfnew.Bedroom.isna().sum())\nprint('Bathroom total null :', dfnew.Bathroom.isna().sum())\nprint('Parking total null :', dfnew.Parking.isna().sum())\nprint('Size total null :', dfnew.Size.isna().sum())\nprint('Furnish total null :', dfnew.Furnish.isna().sum())","27d4e31e":"# converting RM300,000 to be 300000 as int type, \n# and there exist a 'Call for Price' in Price columns that need to be drop\n\ndfnew.Price = dfnew.Price.str.replace('RM','').str.replace(',','').str.replace('Call for Price','')\ndfnew.Price.replace('',np.nan, inplace=True)\ndfnew.dropna(subset = ['Price'], inplace=True)\ndfnew.Price = dfnew.Price.astype('int')","f8b64745":"# converting psf to int type\n\ndfnew.psf = dfnew.psf.str.replace('RM','').str.replace('psf','').str.replace(r'(','').str.replace(r')','').str.replace(' ','').str.replace(',','')\n\n# cant convert to int since there exist dates in the psf row. \n# need to drop dates in psf rows\n\nindexToDrop = []\n\ndef RepresentsInt(i):\n    try: \n        float(dfnew.psf[i])\n    except ValueError:\n        indexToDrop.append(i)\n\nfor i in dfnew.index:\n    RepresentsInt(i)        \n\nprint('Total to drop :',len(indexToDrop))\n\nfor i in indexToDrop:\n    dfnew.psf.replace(dfnew.psf[i], np.nan, inplace=True)\n\ndfnew.dropna(subset = ['psf'], inplace=True)\ndfnew.psf = dfnew.psf.astype('float')","1ec10d9e":"dfnew.dropna(subset = ['Bedroom'], inplace=True)\nprint(dfnew.Bedroom.unique())\n\ndfnew.Bedroom = dfnew.Bedroom.str.replace('\\xa0','').str.replace(' ','')\n\nnew = dfnew.Bedroom.str.split('+', n = 1 , expand = True)\n\ndfnew['A1'] = new[0]\ndfnew['A2'] = new[1]\n\ndfnew.A1 = dfnew.A1.astype('int')\n\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('str')\ndfnew.A2 = dfnew.A2.str.replace('+','')\n\ndfnew[dfnew.A2==''] = np.nan\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('int')\n\ndfnew['A3'] = dfnew.A1 + dfnew.A2\ndfnew.Bedroom = dfnew.A3","9983678b":"dfnew.dropna(subset = ['Bathroom'], inplace=True)\nprint(dfnew.Bathroom.unique())\n\ndfnew.Bathroom = dfnew.Bathroom.str.replace(' \\xa0','')\n\nnew = dfnew.Bathroom.str.split('+', n = 1 , expand = True)\n\ndfnew['A1'] = new[0]\ndfnew['A2'] = new[1]\n\ndfnew.A1 = dfnew.A1.astype('int')\n\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('str')\ndfnew.A2 = dfnew.A2.str.replace('+','')\n\ndfnew[dfnew.A2==''] = np.nan\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('int')\n\ndfnew['A3'] = dfnew.A1 + dfnew.A2\ndfnew.Bathroom = dfnew.A3","684d6d59":"dfnew.dropna(subset = ['Parking'], inplace=True)\nprint(dfnew.Parking.unique())\n\ndfnew.Parking = dfnew.Parking.str.replace(' \\xa0','')\n\nnew = dfnew.Parking.str.split('+', n = 1 , expand = True)\n\ndfnew['A1'] = new[0]\ndfnew['A2'] = new[1]\n\ndfnew.A1 = dfnew.A1.astype('int')\n\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('str')\ndfnew.A2 = dfnew.A2.str.replace('+','')\n\ndfnew[dfnew.A2==''] = np.nan\ndfnew.A2 = dfnew.A2.fillna('0')\ndfnew.A2 = dfnew.A2.astype('int')\n\ndfnew['A3'] = dfnew.A1 + dfnew.A2\ndfnew.Parking = dfnew.A3\n","0e924753":"dfnew['size1'] = dfnew.Size.str.extract(r'([.]?[\\d.]*)')\ndfnew['size2'] = dfnew.Size.str.replace(r'\\d','')\nprint(dfnew.size2.unique())\n\nvals = {'. Square Feet':1,' Square Feet':1, '. Acre':43560, ' Acre':43560, '. Hectare':107639}\n\ndfnew['size3'] = dfnew.size2.map(vals)\n\ndfnew.size3 = dfnew.size2.map(vals)\ndfnew.size1 = dfnew.size1.astype('float')\ndfnew.size3 = dfnew.size3.astype('float')\n\ndfnew.Size = dfnew.size3*dfnew.size1\n\ndfnew","f2ba9c0f":"dfnew.dropna(subset = ['Furnish'], inplace=True)\nprint(dfnew.Furnish.unique())\n\nindexToDrop = []\n\ndef FurnishedOrNot(i):\n    if dfnew.Furnish[i] == 'Unfurnished':\n        pass\n    elif dfnew.Furnish[i] == 'Partly Furnished':\n        pass\n    elif dfnew.Furnish[i] == 'Fully Furnished':\n        pass\n    else:\n        indexToDrop.append(i)\n\nfor i in dfnew.index:\n    FurnishedOrNot(i) \n\nprint('Total to drop :',len(indexToDrop))\n\nfor i in indexToDrop:\n    dfnew.Furnish.replace(dfnew.Furnish[i], np.nan, inplace=True)\n\ndfnew.dropna(subset = ['Furnish'], inplace=True)\ndfnew.Furnish = dfnew.Furnish.astype('str')\ndfnew","3262c10f":"dfnew = dfnew.drop(columns={'A1','A2','A3','size1','size2','size3'})\n\n# resetting the index value\n\ndfnew = dfnew.reset_index(drop=True)\n\ndfnew","64023a1c":"dfnew.rename(columns={'Price':r'Price (RM)','psf':r'Price Per Square Feet (RM)','Size':'Built Up Size'}, inplace=True)\ndfnew","6b2dd995":"print('Type total null :', dfnew.Type.isna().sum())\nprint('Address total null :', dfnew.Address.isna().sum())\nprint('Location total null :', dfnew.Location.isna().sum())\nprint('City total null :', dfnew.City.isna().sum())\nprint('Date total null :', dfnew.Date.isna().sum())\nprint('Price total null :', dfnew['Price (RM)'].isna().sum())\nprint('psf total null :', dfnew['Price Per Square Feet (RM)'].isna().sum())\nprint('Bedroom total null :', dfnew.Bedroom.isna().sum())\nprint('Bathroom total null :', dfnew.Bathroom.isna().sum())\nprint('Parking total null :', dfnew.Parking.isna().sum())\nprint('Size total null :', dfnew['Built Up Size'].isna().sum())\nprint('Furnish total null :', dfnew.Furnish.isna().sum())","396cd16e":"dfnew.City.unique()","d3498d11":"# the packages\n\n'''\n!pip install geopandas\n!pip install geopy\n'''","fbab224e":"# the code, but it stops at 2007, \n\n'''\nfrom geopy.exc import GeocoderTimedOut \nfrom geopy.geocoders import Nominatim \n\nlongitude = []\nlatitude = []\n\ndef findGeocode(city):\n    try: \n        \n        geolocator = Nominatim(user_agent=\"Mozilla\/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/87.0.4280.88 Safari\/537.36\") \n          \n        return geolocator.geocode(city) \n      \n    except GeocoderTimedOut: \n          \n        return findGeocode(city) \n    \na = 1\n\nfor i in dfnew.City:\n    print(a,'',i)\n    if findGeocode(i) != None:\n        loc = findGeocode(i)\n        latitude.append(loc.latitude) \n        longitude.append(loc.longitude)\n        print(loc.latitude,loc.longitude)\n    else:                                         \n        print(a,'',i, 'is failed')\n        latitude.append(np.nan) \n        longitude.append(np.nan) \n        print('NaN')\n    a+=1\n\ndfnew[\"Longitude\"] = longitude \ndfnew[\"Latitude\"] = latitude \n'''","091f7e09":"dfnew.to_csv('partialcleandurianproperty.csv')","0022ab87":"**Price**","5d844e66":"**Drop unnecessary columns**","19fa10ea":"**Bathroom**","f79f7796":"Inserting Longitude and Latitude of the City","d8e716d9":"Rename collumns","7c7b425f":"**Parking**","9f466613":"Probably displace marker during scraping or the user input the data in wrong place. Anyway, to put it in the right place use the following code. \n\ndfcitynull = dfnew[dfnew.City.isna()]\n\nfor i in dfcitynull.index:\n    dfnew.Address[i] = dfcitynull.Type[i]\n    dfnew.City[i] = dfcitynull.Address[i].split(',')[1]\n    dfnew.Location[i] = dfcitynull.Address[i].split(',')[0]\n\ndfcitynull.Type = dfcitynull.Type.replace([dfcitynull.Type], np.nan)\n\nfor i in dfcitynull.index:\n    dfnew.Type[i] = dfcitynull.Type[i]\n    \nAnd since the type is Nan and cant possibly be filled (user input error), all rows which having this problem will be drop","89e7e98e":"data was taken from scraped data from [Learn Scrape Durianproperty function style](https:\/\/www.kaggle.com\/arifaimanisa\/learn-scrape-durianproperty-function-style)\n\nLatitude and Longitude were using geolocator API","71b77309":"**Furnish**","d0844f29":"Lets start figure out why **City** having null value, since it should not be that way if the format of the string are fixed thrughout the scrape process.","f4ff82c3":"**psf**","8fb21e8f":"**Size**","99497a58":"**Save to new csv**","323ae162":"**Bedroom**"}}