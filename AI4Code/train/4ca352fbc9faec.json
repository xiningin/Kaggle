{"cell_type":{"71691047":"code","ede72509":"code","d9f50c83":"code","318b4e4c":"code","3083e960":"code","5304fd1b":"code","bfc1d14e":"code","529a4d49":"code","2fc212cf":"code","eb98d38c":"code","4f1cb6c2":"code","0ffa7123":"code","b7722053":"code","e53c4023":"code","99c9ab05":"code","06e5bd24":"code","1bb40516":"code","05b17b09":"code","98b0e81a":"code","040bff69":"code","51d2bb2a":"code","1a383d74":"code","c02da805":"code","66fa956c":"code","32f90ac5":"code","79a73ab0":"code","bf470918":"code","56ef5394":"code","b62baac4":"code","4845107c":"code","51e2aec8":"code","ad171531":"code","bd9a21ab":"code","7370ca52":"code","ba66b731":"code","56c0226a":"code","30dce0cb":"markdown","b063087d":"markdown","cb83781e":"markdown","bcc32dc3":"markdown","fe61b261":"markdown","75ed2da6":"markdown","070822a7":"markdown","11609863":"markdown","253cf2ec":"markdown","e0d69ddc":"markdown","ccc7abe4":"markdown","07bf86d9":"markdown","79cf9dbb":"markdown","5d001ef5":"markdown","481ce84a":"markdown","5b1a42cc":"markdown","94c9b9b2":"markdown","c434853a":"markdown"},"source":{"71691047":"import pandas as pd\nimport numpy as np","ede72509":"INPUT_DIR = '..\/input\/'\ndf_test = pd.read_csv(INPUT_DIR + 'test.csv')\ndf_pokemon = pd.read_csv(INPUT_DIR + 'pokemon.csv')\ndf_battles = pd.read_csv(INPUT_DIR + 'battles.csv')","d9f50c83":"df_pokemon.head()","318b4e4c":"df_pokemon.dtypes","3083e960":"df_pokemon['Type 1'].head()","5304fd1b":"df_pokemon.describe(include='all')","bfc1d14e":"df_pokemon[df_pokemon.Name.isna()]","529a4d49":"df_pokemon.iloc[61].Name","2fc212cf":"df_pokemon.iloc[62, 1] = 'Primeape'","eb98d38c":"df_pokemon.describe(include='all')","4f1cb6c2":"df_pokemon['Type 2'] = df_pokemon['Type 2'].fillna('None')","0ffa7123":"df_pokemon.describe(include='all')","b7722053":"df_battles.describe(include='all')","e53c4023":"useful_columns = ['Type 1', 'Type 2', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation', 'Legendary']\ndf_pokemon = df_pokemon.set_index('#')\nfirst_df = df_pokemon.loc[df_battles['First_pokemon'].values, useful_columns].add_prefix('poke1_')\nsecond_df = df_pokemon.loc[df_battles['Second_pokemon'].values, useful_columns].add_prefix('poke2_')\ndf_train = first_df.reset_index().join(second_df.reset_index(), lsuffix='a' ).drop(columns=['#a', '#'])\ndf_train['target'] = df_battles['Winner']","99c9ab05":"df_train.head()","06e5bd24":"df_train.dtypes","1bb40516":"for col in df_train.select_dtypes('object').columns:\n    df_train[col] = df_train[col].astype('category')","05b17b09":"df_train.dtypes","98b0e81a":"df_train.head()","040bff69":"for col in df_train.select_dtypes('category').columns:\n    df_train[col] = df_train[col].cat.codes","51d2bb2a":"df_train.dtypes","1a383d74":"df_train.head()","c02da805":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import classification_report","66fa956c":"# aqui creamos nuestro modelo\nlr = LinearRegression(normalize=True)","32f90ac5":"# aqui dejamos listos nuestros datos de entrenamiento, sinedo X_train los datos e y_train la variable objetivo\nX_train = df_train[df_train.columns[:-1]]\ny_train = df_train.target","79a73ab0":"# y aqui entrenamos\nlr.fit(X_train, y_train )","bf470918":"# ale ya est\u00e1, ya hemos definido nuestro modelo y entrenado en dos lineas. Increible verdad? Podemos ver que predice de la siguiente manera\nlr.predict(X_train)","56ef5394":"# Ahora vamos a sacar algunas metricas (sobre los mismos datos de entrenamiento, lo que nunca debemos hacer porque no sabremos si hemos hecho overfitting)\n# Como la regresion lineal devuelve valores continuos y nosotros necesitamos valores 0 o 1. Vamos a redondear los valores usando numpy\nprint(classification_report(y_train,np.round(lr.predict(X_train))))","b62baac4":"first_df_test = df_pokemon.loc[df_test['First_pokemon'].values, useful_columns].add_prefix('poke1_')\nsecond_df_test = df_pokemon.loc[df_test['Second_pokemon'].values, useful_columns].add_prefix('poke2_')\ndf_test_ready = first_df_test.reset_index().join(second_df_test.reset_index(), lsuffix='a' ).drop(columns=['#a', '#'])","4845107c":"for col in df_test_ready.select_dtypes('object').columns:\n    df_test_ready[col] = df_test_ready[col].astype('category').cat.codes","51e2aec8":"predictions = np.round(lr.predict(df_test_ready)).clip(0,1).astype(int)","ad171531":"predictions.min(), predictions.max()","bd9a21ab":"sampleSubmission = pd.read_csv(INPUT_DIR + 'sampleSubmission.csv')","7370ca52":"sampleSubmission['Winner'] = predictions","ba66b731":"sampleSubmission.to_csv('my_sub.csv', index=False)","56c0226a":"sampleSubmission.head()","30dce0cb":"Como podemos ver, la regresion lineal no es para nada el mejor modelo que podemos usar. Aun asi, vamos a utilizarlo para predecir sobre los datos de test. Para poder subir estos resultados y que sean validos vamos a usar numpy.clip y numpy.round ","b063087d":"Como podeis ver, los string siguen estando, pero por debajo, pandas les ha asignado un valor. Podemos obtener la serie con .cat.codes y reasignarla a la columna","cb83781e":"Viendo que el pokemon de indice 62 es el que no tiene nombre, y al ver que el anterior es Mankey, toda persona que sepa un poquito de pokemons sabra que el siguiente en la lista tiene que ser su evoluci\u00f3n 'Primeape'. Vamos a asignar el valor.","bcc32dc3":"Ale, vamos al entrenamiento","fe61b261":"Como podemos ver, ya no hay valores NaN en la columna Name. Vamos ahora con el Type 2","75ed2da6":"# submision","070822a7":"Podeis ver m\u00e1s info sobre los dtypes en el siguiente link https:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/arrays.dtypes.html\n\nComo podeis ver, la documentaci\u00f3n es de otra librer\u00eda llamada scipy. Tanto numpy, pandas como scipy estan estrachamente relacionadas y normalmente todos los objetos son compatibles entre si (al usarlos como parametros en llamadas, o al tener algunos metodos en comun)","11609863":"Como podemos ver en la fila unique (que cuenta valores que no sean NaN) Hay un nombre de pokemon como NaN y tambien algunos valoes en la columna Type 2. Vamos a realizar algunos filtrados para cambiar estos valores ya que normalmente a los algortimos de ML no se les puede pasar valores NaN.","253cf2ec":"> Ahora que tenemos el dataframe, podemos mostrar las primeras filas con .head() para ver que pinta tiene.","e0d69ddc":"El elemento principal de pandas se llama dataframe. Vamos a leer los datos del fichero .csv a traves del metodo pd.read_csv que nos devolver\u00e1 ya un dataframe.","ccc7abe4":"Como podeis ver, la unica cosa que nos falta antes de poder usar estos datos es darle un valor numerico a las columnas 'Type1' y 'Type2'. Lo mas rapido (que para nada es lo mejor) es cambiarle el tipo a las columnas 'object' por 'category' y usar los codigos que pandas automaticamente utiliza.","07bf86d9":"Vamos a empezar cargando las dos librerias esenciales. Numpy, que sirve para tratar matrices y operar con ellas. Pandas, que se construye sobre numpy y nos permite tratar y transformar datos de una forma increible.","79cf9dbb":"\n# train \n\nPara el entrenamiento vamos a usar el modelo mas simple pero sobre el que se asienta modelos tan complejos como las redes de neuronas. \n\nVamos a entrenar una regresion lineal usando una libreria magnifica llamada Sklearn.\n\nEsta libreria contiene multitud de algoritmos de ML. Va a ser vuestra segunda biblia. No me parar\u00e9 a explicar casi nada en esta parte. Os dejo la documentacion\n\nhttps:\/\/scikit-learn.org\/stable\/documentation.html\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html","5d001ef5":"Volviendo al dataframe, como podemos ver, el dataframe no es mas que una tabla muy similar a lo que nos podriamos encontrar en excell por ejemplo.\n\nAhora vamos a usar .describe() para que nos muestre algunos valores estadisticos basicos sobre el dataframe. El parametro include='all' sirve para que las operaciones sean sobre las columnas de cualquier tipo ya que por defecto el metodo solo opera sobre columnas de valores numericos.","481ce84a":"Si eres nuevo, estas transformaciones que acabo de hacer te pueden resultar cuanto menos extra\u00f1as. No te preocupes, es la oportunidad perfecta para buscar por ti mismo que significan y empezar a familiarizarte con lo que sin duda empezar\u00e1 a ser la nueva biblia para ti. Efectivamente, estamos hablando de la documentaci\u00f3n de pandas https:\/\/pandas.pydata.org\/pandas-docs\/stable\/\n\nPodeis buscar directamente en google el metodo para ahorrar tiempo (https:\/\/www.google.com\/search?client=ubuntu&channel=fs&q=pandas+set+index&ie=utf-8&oe=utf-8) pero si ojeais levemente el primer link, vereis un apartado al principio que pone 'Getting started' ;)","5b1a42cc":"Hemos asignado el valor None (como si fuera una categor\u00eda mas) a los valores NaN.\n\nAhora vamos a preparar los datos para poder entrenar el modelo de ML","94c9b9b2":"En pandas los dataframes estan formados por Series. Las Series no son mas que arrays de un mismo tipo. Los dataframes pueden estar formados de Series de distintos tipos y podemos ver estos tipos con .dtypes","c434853a":"Tambien podemos acceder a una serie del dataframe."}}