{"cell_type":{"c2fdb603":"code","14d953d8":"code","42fa5163":"code","20f48ac5":"code","bbcaac35":"code","b80a90df":"code","7b86a3fb":"code","d8196234":"code","b6fe81f8":"code","29ddc4ea":"code","9e3bfcd4":"code","4cde4497":"code","9302d3a3":"code","1dd09107":"code","22080ca6":"code","b4eef67e":"code","a017fd9d":"code","cad743af":"code","04b90f47":"code","01127287":"code","c79c4278":"code","01aac08b":"code","df5c0e14":"code","b03e13f3":"code","9963898e":"code","b31570d3":"code","cba64c3a":"code","ad2bd8d2":"code","56bc9e93":"code","fff0bd30":"code","0b89148a":"code","509dd6db":"code","7e3e89ae":"code","620b3ace":"code","6356c2c5":"code","95e4810f":"code","5eadcb6d":"code","a50c7e20":"code","678debd2":"code","b1e0aee2":"code","e71031a6":"code","ef2f7ef7":"code","49393e9d":"code","650419ae":"code","6ff4677e":"code","fc5c5d00":"code","5a5dd10b":"code","f35af451":"code","24636423":"code","d8bb9af4":"code","6a2cca5e":"code","cd419167":"code","44d17971":"code","b888d42d":"code","527add7a":"code","6c471799":"code","7d01a3c7":"code","83b81279":"code","99ab1227":"code","dc4cddb1":"code","f327fec6":"markdown","442fb560":"markdown","84218233":"markdown"},"source":{"c2fdb603":"!pip install finance-datareader","14d953d8":"!pip install pmdarima","42fa5163":"import FinanceDataReader as fdr\nimport numpy as np \nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor\nfrom sklearn.model_selection import train_test_split,StratifiedKFold,KFold\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import Lasso\nfrom xgboost import XGBRegressor\nfrom tqdm import tqdm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pmdarima.arima import auto_arima\nfrom fbprophet import Prophet\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","20f48ac5":"sample_code = ['253840']\nsample_name = ['Suzentech']","bbcaac35":"start_date = '20200101'\nend_date = '20211203'\nsample = fdr.DataReader(stock_code[0],start_date,end_date)[['Close']]","b80a90df":"# suzentech = stock_name[0]\n# seezen = stock_name[1]\n# gccel = stock_name[2]\n# humasis = stock_name[3]\n# kor_pama = stock_name[4]","7b86a3fb":"def price_plot(stock_name,data):\n    plt.figure(figsize=(20,10))\n    plt.rc('font',size=20)\n    plt.title(stock_name)\n    plt.plot(data['Close'],label='Close_price')\n    plt.xlabel('Date')\n    plt.ylabel('Price')\n    plt.legend()\n    plt.grid(True)\n    return plt.show()","d8196234":"price_plot('suzentech',sample)","b6fe81f8":"arima_order = auto_arima(sample,trace=True,error_action='ignore',start_p=0,start_q=0,max_p=3,max_q=3\n                     ,stepwise=True,seasonal=True)\narima_order.fit(sample)","29ddc4ea":"arima_model = ARIMA(sample,order=arima_order.order)\narima_model = arima_model.fit(disp=1)\nprint(arima_model.summary())","9e3bfcd4":"arima_model.plot_predict()","4cde4497":"arima_pred = arima_model.forecast(steps=5)\narima_pred[0]","9302d3a3":"sample['ds'] = pd.to_datetime(sample.index)\nsample['y'] = sample['Close']\ndf = sample[['ds','y']]\ndf","1dd09107":"sample_prophet = Prophet(changepoint_prior_scale=0.15,daily_seasonality=True)\nsample_prophet.fit(df)","22080ca6":"date = 5\nsample_pred = sample_prophet.make_future_dataframe(periods=date,freq='B',include_history=False)","b4eef67e":"sample_pred = sample_prophet.predict(sample_pred)\nsample_pred[['ds','yhat','yhat_lower','yhat_upper']]","a017fd9d":"arima_prophet = (sample_pred.yhat + arima_pred[0])\/2","cad743af":"for i in range(len(stock_code)):\n    start_date = '2021-12-06'\n    end_date = '2021-12-10'\n    stock_name[i] = fdr.DataReader(stock_code[i],start=start_date,end=end_date)[['Close']]\nreal_suzentech = stock_name[0]\nreal_seezen = stock_name[1]\nreal_gccel = stock_name[2]\nreal_humasis = stock_name[3]\nreal_kor_pama = stock_name[4]","04b90f47":"real_suzentech['GRU'] = final_pred","01127287":"real_suzentech['ensemble_pred'] = np.array(arima_prophet)\nreal_suzentech['arima'] = arima_pred[0]\nreal_suzentech['prophet'] = np.array(sample_pred.yhat)\nreal_suzentech","c79c4278":"def plot_result(stock_name,data):\n    plt.figure(figsize=(15,10))\n    plt.title(stock_name)\n    plt.plot(data['Close'],label='real_price')\n    plt.plot(data['ensemble_pred'],label='arima+prophet')\n    plt.plot(data['arima'],label='arima_pred')\n    plt.plot(data['prophet'],label='prophet_pred')\n    plt.legend(loc='upper right')\n    plt.grid()\n    return plt.show()","01aac08b":"plot_result('SUZENTECH',real_suzentech)","df5c0e14":"sample.drop(['ds','y'],axis=1,inplace=True)","b03e13f3":"sample_x, sample_y = sample_train.iloc[:-5], sample_train.iloc[5:]\nprint(sample_x.shape, sample_y.shape)","9963898e":"def make_dataset(data, label, window_size=5):\n    feature_list = []\n    label_list = []\n    for i in range(len(data) - window_size):\n        feature_list.append(np.array(data.iloc[i:i+window_size]))\n        label_list.append(np.array(label.iloc[i+window_size]))\n    return np.array(feature_list), np.array(label_list)","b31570d3":"def make_testset(data , window_size=5):\n    feature_list = []\n    for i in range(len(data) - window_size):\n        feature_list.append(np.array(data.iloc[i:i+window_size]))\n    return np.array(feature_list)","cba64c3a":"x_train,y_train = make_dataset(sample_x,sample_y)\nx_test = make_testset(sample_test)","ad2bd8d2":"print(x_train.shape,y_train.shape)","56bc9e93":"import tensorflow.keras as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense,GRU,LSTM,Dropout,Flatten\nfrom tensorflow_addons.layers import GELU","fff0bd30":"model = Sequential()\nmodel.add(GRU(512,input_shape=(5,1),activation='swish',return_sequences=True))\nmodel.add(GRU(256,activation='swish',return_sequences=True))\nmodel.add(GRU(128,activation='swish',return_sequences=True))\nmodel.add(GRU(64,activation='swish'))\nmodel.add(Dense(100,activation='swish'))\nmodel.add(Dense(10,activation='swish'))\nmodel.add(Dense(1))\nmodel.summary()","0b89148a":"kf = KFold(n_splits=5,shuffle=True)\nfor fold,(train_idx,valid_idx) in enumerate(kf.split(x_train,y_train)):\n    print(f'Fold:{fold+1}')\n    train_x, val_x = x_train[train_idx], x_train[valid_idx]\n    train_y, val_y = y_train[train_idx], y_train[valid_idx]\n    model = Sequential()\n    model.add(GRU(512,input_shape=(5,1),activation='swish',return_sequences=True))\n    model.add(GRU(256,activation='swish',return_sequences=True))\n    model.add(GRU(128,activation='swish',return_sequences=True))\n    model.add(GRU(64,activation='swish'))\n    model.add(Dense(100,activation='swish'))\n    model.add(Dense(1))\n    model.compile(loss='mape',optimizer=tf.optimizers.Adamax(learning_rate=0.0003))\n    early_stop = tf.callbacks.EarlyStopping(patience=10)\n    checkpoint = tf.callbacks.ModelCheckpoint(f'.\/best_model_{fold}.h5',moniter='val_loss')\n    history = model.fit(x_train,y_train,validation_data=(val_x,val_y),\n                        callbacks=[early_stop,checkpoint],epochs=100,batch_size=64)","509dd6db":"deep_pred = []\nfor i in range(5):\n    model = tf.models.load_model(f'.\/best_model_{i}.h5')\n    pred = model.predict(x_test)\n    deep_pred.append(pred)\nfinal_pred = np.mean(deep_pred,axis=0)","7e3e89ae":"real_suzentech['GRU'] = final_pred","620b3ace":"real_suzentech['ML+DL'] = (real_suzentech['GRU']+real_suzentech['ensemble_pred'])\/2","6356c2c5":"real_suzentech","95e4810f":"plt.figure(figsize=(15,10))\nplt.plot(real_suzentech.Close,label='real_price')\nplt.plot(real_suzentech.GRU,label='GRU_pred')\nplt.plot(real_suzentech['ML+DL'],label='ML+DL')\nplt.legend()\nplt.grid()\nplt.show()","5eadcb6d":"from tqdm import tqdm","a50c7e20":"suzen_arima","678debd2":"stock_code = ['253840','096530','144510','205470','032300']\nstock_name = ['Suzentech','Seezen','gccel','humasis','Kor_pama']\nstart_date = '20200101'\nend_date = '20211203'\nsuzen_prophet = []\nseezen_prophet = []\ngccel_prophet = []\nhumasis_prophet = []\npama_prophet = []\nfor i in tqdm(range(len(stock_name))):\n    stock = fdr.DataReader(stock_code[i],start_date,end_date)[['Close']]\n    stock['ds'] = pd.to_datetime(stock.index,format='%Y-%m-%d')\n    stock['y'] = stock['Close']\n    df = stock[['ds','y']]\n    stock_prophet = Prophet(changepoint_prior_scale=0.15,daily_seasonality=True)\n    sotck_prophet = stock_prophet.fit(df)\n    date = 5\n    stock_pred = stock_prophet.make_future_dataframe(periods=date,freq='B',include_history=False)\n    stock_pred = stock_prophet.predict(df)\n    yhat = stock_pred.yhat.iloc[-5:]\n    if i == 0:\n        suzen_prophet = yhat\n    if i == 1:\n        seezen_prophet = yhat\n    if i == 2:\n        gccel_prophet = yhat\n    if i == 3:\n        humasis_prophet = yhat\n    if i == 4:\n        pama_prophet = yhat\n        ","b1e0aee2":"real_suzentech['prophet'] = np.array(suzen_prophet)\nreal_gccel['prophet'] = np.array(gccel_prophet)\nreal_seezen['prophet'] = np.array(seezen_prophet)\nreal_humasis['prophet'] = np.array(humasis_prophet)\nreal_kor_pama['prophet'] = np.array(pama_prophet)","e71031a6":"def plot_result(stock_name,data):\n    plt.plot(data.Close, color='black', label=f\"actual price\")\n    plt.plot(data.prophet, color= 'green',ls='--' ,label=f\"predicted price\")\n    plt.gcf().set_size_inches(22,15,forward=True)\n    plt.title(stock_name)\n    plt.xlabel(\"day\")\n    plt.ylabel(f\"price\")\n    plt.grid()\n    plt.legend()\n    return plt.show()","ef2f7ef7":"plot_result('suzentech',real_suzentech)","49393e9d":"plot_result('seezen',real_seezen)","650419ae":"plot_result('Gccel',real_gccel)","6ff4677e":"plot_result('humasis',real_humasis)","fc5c5d00":"plot_result('kor_pama',real_kor_pama)","5a5dd10b":"stock_code = ['253840','096530','144510','205470','032300']\nstock_name = ['Suzentech','Seezen','gccel','humasis','Kor_pama']\nstart_date = '20200101'\nend_date = '20211203'\nfor i in tqdm(range(len(stock_name))):\n    stock_name[i] = fdr.DataReader(stock_code[i],start_date,end_date)[['Close']]\nsuzen = stock_name[0]\nseezen = stock_name[1]\ngccel = stock_name[2]\nhumasis = stock_name[3]\npama = stock_name[4]\n","f35af451":"def data_preprocessing(sample):\n    sample_train,sample_test = sample.iloc[:-10], sample.iloc[-10:]\n    sample_x, sample_y = sample_train.iloc[:-5], sample_train.iloc[5:]\n    x_train,y_train = make_dataset(sample_x,sample_y)\n    x_test = make_testset(sample_test)\n    return x_train,y_train,x_test","24636423":"suzen_train,suzen_target, suzen_test = data_preprocessing(suzen)\nseezen_train,seezen_target, seezen_test = data_preprocessing(seezen)\ngccel_train,gccel_target, gccel_test = data_preprocessing(gccel)\nhumasis_train,humasis_target, humasis_test = data_preprocessing(humasis)\npama_train,pama_target, pama_test = data_preprocessing(pama)","d8bb9af4":"print(suzen_train.shape,suzen_target.shape, suzen_test.shape)","6a2cca5e":"def GRU_model():\n    model = Sequential()\n    model.add(GRU(512,input_shape=(5,1),activation='swish',return_sequences=True))\n    model.add(GRU(256,activation='swish',return_sequences=True))\n    model.add(GRU(128,activation='swish',return_sequences=True))\n    model.add(GRU(64,activation='swish'))\n    model.add(Dense(100,activation='swish'))\n    model.add(Dense(1))\n    return model","cd419167":"model = GRU_model()\nmodel.summary()","44d17971":"def run_GRU(stock_name,x_train,y_train):\n    kf = KFold(n_splits=3,shuffle=True)\n    for fold,(train_idx,valid_idx) in enumerate(kf.split(x_train,y_train)):\n        print(f'Fold:{fold}')\n        train_x, val_x = x_train[train_idx], x_train[valid_idx]\n        train_y, val_y = y_train[train_idx], y_train[valid_idx]\n        model = GRU_model()\n        model.compile(loss='mape',optimizer=tf.optimizers.Adamax(learning_rate=0.0003))\n        early_stop = tf.callbacks.EarlyStopping(patience=10)\n        checkpoint = tf.callbacks.ModelCheckpoint(f'.\/{stock_name}_best_model_{fold}.h5',moniter='val_loss')\n        history = model.fit(x_train,y_train,validation_data=(val_x,val_y),\n                        callbacks=[early_stop,checkpoint],epochs=100,batch_size=64) \n    return  history","b888d42d":"print('----------------\uc218\uc820\ud14d-----------------')\nsuzen_history = run_GRU('suzentech',suzen_train,suzen_target)\nprint('----------------\uc528\uc820-------------------')\nseezen_history = run_GRU('seezen',seezen_train,seezen_target)\nprint('----------------\uc9c0\uc528\uc140-------------------')\ngccel_history = run_GRU('gccel',gccel_train,gccel_target)\nprint('----------------\ud734\ub9c8\uc2dc\uc2a4-------------------')\nhumasis_history = run_GRU('humasis',humasis_train,humasis_target)\nprint('---------------\ucf54\ub9ac\uc544 \ud30c\ub9c8-------------------')\npama_history = run_GRU('Kor_pama',pama_train,pama_target)","527add7a":"def plot_train_result(history):\n    plt.figure(figsize=(15,10))\n    plt.plot(history.history['loss'],label='train_mape')\n    plt.plot(history.history['val_loss'],label='valid_mape')\n    plt.legend()\n    plt.grid()\n    plt.xlabel('epochs')\n    plt.ylabel('MAPE')\n    return plt.show()","6c471799":"plot_train_result(suzen_history)\nplot_train_result(seezen_history)\nplot_train_result(gccel_history)\nplot_train_result(humasis_history)\nplot_train_result(pama_history)","7d01a3c7":"def test(stock_name,test_set):\n    final_result = []\n    for i in range(5):\n        model = tf.keras.models.load_model(f'{stock_name}_best_model_{i}.h5')\n        eval_ = model.peedict(test_set)\n        final_result.append(eval_)\n    pred = np.mean(final_result,axis=0)\n    return pred","83b81279":"real_suzentech['GRU'] = suzen_gru\nreal_seezen['GRU'] = seezen_gru","99ab1227":"real_kor_pama['GRU'] = pama_gru","dc4cddb1":"plot_result('KOR_PAMA',real_kor_pama)","f327fec6":"# Prophet","442fb560":"# ARIMA","84218233":"# Deep learning"}}