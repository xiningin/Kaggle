{"cell_type":{"031b433e":"code","6669a32f":"code","1bedfd88":"code","d82fc8a4":"code","9e05c5e0":"code","fbd86a0b":"code","b79e6d12":"code","e6abd564":"code","0de35fa5":"code","d3f59392":"code","cf9c4d4d":"code","e7d0c76b":"code","09eb1f7c":"code","95d0e44f":"code","49e1cef8":"code","1525dcc4":"code","c43fddff":"code","0dc18435":"code","dbb3ea5f":"code","d986cf4a":"code","a0ccf967":"code","b4ee0d8f":"code","12201a50":"code","59c3d99e":"code","df85d7a1":"code","1e135091":"code","a58b3a65":"markdown"},"source":{"031b433e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6669a32f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sea\n%matplotlib inline\nfrom sklearn import metrics\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n","1bedfd88":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","d82fc8a4":"train_data.head(4)","9e05c5e0":"train_data.describe()\ntrain_data.isna().sum()","fbd86a0b":"train_data.isna().sum()","b79e6d12":"def dividing_map(x):\n    if(x <= 12):\n        return \"Kid\"\n    elif(x >= 13 and x <= 19):\n        return \"Teen\"\n    elif(x >= 19 and x < 60):\n        return \"Adult\"\n    else:\n        return \"Senior\"\ntrain_data['Age'] = train_data['Age'].apply(lambda x: dividing_map(x))","e6abd564":"train_data[\"Age\"]","0de35fa5":"train_data['Cabin'].fillna('U', inplace=True)\ntrain_data['Cabin'] = train_data['Cabin'].apply(lambda x: x[0])\n\ntrain_data['Embarked'].fillna('S', inplace=True)","d3f59392":"train_data.isna().sum()","cf9c4d4d":"train_data['Fare'] = pd.cut(train_data['Fare'],bins = [-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6]) ","e7d0c76b":"Survived_in_pclass = sea.countplot(x = 'Survived', hue = 'Pclass', data = train_data)\nplt.title(\"Survived: Frequency of Pclass \")\nplt.show('Survived_in_class')","09eb1f7c":"Survived_div_gender = sea.countplot(x = 'Sex', hue = 'Survived', data = train_data)\nplt.title(\"Sex : Frequency of survived\")\nplt.show('Survived_div_gender')","95d0e44f":"fig, ax = plt.subplots(1,2,figsize=(10,5))\nsea.countplot(train_data['Age'], data=train_data, ax=ax[0])\nsea.countplot(train_data['Age'], hue='Survived', data=train_data, ax=ax[1])\nax[0].title.set_text(\"Counts of each age group\")\nax[1].title.set_text(\"Survived: Age Group\")","49e1cef8":"leg = LabelEncoder()\ntrain_data['Sex'] = leg.fit_transform(train_data['Sex'])\ntrain_data['Cabin'] = leg.fit_transform(train_data['Cabin'])\ntrain_data['Embarked'] = leg.fit_transform(train_data['Embarked'])\ntrain_data['Age'] = leg.fit_transform(train_data['Age'])","1525dcc4":"train_data.head()","c43fddff":"plt.figure(figsize = (8,6))\ncor = train_data.corr()\nsea.heatmap(cor, annot = True)","0dc18435":"train_data.drop(['Name'], axis = 1, inplace = True)","dbb3ea5f":"train_data.drop(['Ticket'], axis = 1, inplace = True)","d986cf4a":"y = train_data['Survived']\nX = train_data.drop(['Survived'], axis = 1)","a0ccf967":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.65, random_state = 3)","b4ee0d8f":"logistic = LogisticRegression()\nmodel_log = logistic.fit(X_train, y_train)","12201a50":"predictions = model_log.predict(X_test)","59c3d99e":"def cleaning():\n    test_data['Age'].fillna((test_data['Age'].mean()), inplace=True)\n    test_data['Age'] = test_data['Age'].apply(lambda x: dividing_map(x))\n    test_data['Cabin'].fillna('U', inplace=True)\n    test_data['Cabin'] = test_data['Cabin'].apply(lambda x: x[0])\n    test_data['Embarked'].fillna('S', inplace=True)\n    test_data['Sex'] = leg.fit_transform(test_data['Sex'])\n    test_data['Cabin'] = leg.fit_transform(test_data['Cabin'])\n    test_data['Embarked'] = leg.fit_transform(test_data['Embarked'])\n    test_data['Age'] = leg.fit_transform(test_data['Age'])\n    test_data.drop(['Name', 'Ticket'], axis = 1, inplace = True)\n    fare_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)\n    test_data['Fare'] = fare_imputer.fit_transform(test_data[['Fare']])\n    test_data['Fare'] = pd.cut(test_data['Fare'],bins = [-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6]) \n\ncleaning()\n","df85d7a1":"preds = model_log.predict(test_data)","1e135091":"output = pd.DataFrame({'PassengerID': test_data['PassengerId'], 'Survived': preds})\noutput.to_csv(\"submission.csv\", index=False)","a58b3a65":"train_data['Age'].fillna((train_data['Age'].mean()), inplace=True)"}}