{"cell_type":{"fb657896":"code","03782965":"code","35d022c8":"code","be0abf76":"code","6261a7ec":"code","06b8e92a":"code","d0044267":"code","57e74a74":"code","8b09c1cc":"code","b26ae9ef":"code","eff50a33":"code","60f874d4":"code","72590d12":"code","4521bd28":"code","cf064421":"code","17c1aa76":"code","9dfe2878":"code","316bd772":"code","fdf6ec82":"code","c3ae4a2c":"code","1a233eb6":"code","6073d50a":"code","f5250bbf":"code","5cd480b9":"code","89502d14":"code","badb957d":"code","b555d3e1":"code","46008235":"code","8581877e":"code","3b76344f":"code","afa48a58":"code","a3b983f3":"code","fa68c63d":"code","b40612ed":"code","6c80cef7":"code","f34e9154":"code","3ebe9f59":"code","5a12314b":"code","7b7e6d35":"code","a13ddc01":"code","193bfe8b":"code","a70bc056":"code","6711e29f":"code","be185e0e":"code","a87793dd":"code","16d4cc94":"code","2aa60fa7":"code","2572d680":"code","7b644181":"code","9e40784b":"code","a4140e03":"code","60b1c132":"code","e9611f14":"code","eb5a91f7":"code","0a9ce0c2":"code","1076cdff":"code","8757f486":"code","b4520284":"code","2aefd499":"code","52676c4e":"code","6fff686d":"code","d3a52867":"markdown","de6c4599":"markdown","1fa23296":"markdown","ecf1880e":"markdown","135ff7d9":"markdown","224d201e":"markdown","e0f23e9e":"markdown","04230032":"markdown","f223b2d6":"markdown","9e50cd73":"markdown","3c4451cb":"markdown","a754414a":"markdown","6c3e9fbe":"markdown","810135e6":"markdown","5a9769c8":"markdown","e06645b4":"markdown","b05296ab":"markdown","765ebe63":"markdown","32ae8df1":"markdown","5df107ea":"markdown","a5e7e1fa":"markdown","24f047cd":"markdown","739157c0":"markdown","9954c6fb":"markdown","24dcb0b7":"markdown","623a047b":"markdown","d04468a1":"markdown","155e55ac":"markdown","af317ee5":"markdown","9b9f0035":"markdown","48eb7862":"markdown","2bbc03ee":"markdown","38e763b7":"markdown","f9f515c1":"markdown","df810cff":"markdown","a82d6642":"markdown","25ef2227":"markdown","0eb4a2f5":"markdown","d846bf60":"markdown","fd554eab":"markdown","70ec3f2d":"markdown","7af51367":"markdown","859bba0d":"markdown","988920cf":"markdown","88e0b703":"markdown","892e6ee6":"markdown","0b73e1af":"markdown","2e0e00f6":"markdown","0b670511":"markdown","5194e846":"markdown","ff1e6f78":"markdown","e78ba0e4":"markdown","42d436c8":"markdown","3c712b1a":"markdown","4b8ac7b0":"markdown","c609c656":"markdown","910851f2":"markdown","22cc4023":"markdown","b047a6b8":"markdown","302828a2":"markdown","2b603b7c":"markdown","c9cdb2d1":"markdown","5acac202":"markdown","b303f6b8":"markdown"},"source":{"fb657896":"import warnings\nwarnings.filterwarnings(\"ignore\") \nimport time\nfrom datetime import datetime\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport missingno as msno\nfrom datetime import datetime,date\nfrom scipy.interpolate import make_interp_spline, BSpline\n%matplotlib inline\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error","03782965":"data_confirmed_cases= pd.read_csv('\/kaggle\/input\/india-covid19-deaths-and-confirmed-cases\/India_covid19_deaths_data.csv')","35d022c8":"data_confirmed_cases","be0abf76":"data_confirmed_cases.columns","6261a7ec":"data_confirmed_cases.info()","06b8e92a":"data_confirmed_cases.dtypes","d0044267":"data_confirmed_cases.describe()","57e74a74":"data_deaths=pd.read_csv('\/kaggle\/input\/india-covid19-deaths-and-confirmed-cases\/India_covid19_confirmed_cases_data.csv')","8b09c1cc":"data_deaths.head()","b26ae9ef":"data_deaths.columns","eff50a33":"data_deaths.info()","60f874d4":"data_deaths.dtypes","72590d12":"data_deaths.describe()","4521bd28":"df_confirmed = data_confirmed_cases.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = data_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})","cf064421":"countries = np.asarray(df_confirmed[\"country\"])\ncountries","17c1aa76":"continents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}","9dfe2878":"def country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'","316bd772":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)","fdf6ec82":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n\n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    \n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    \n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\")\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n        \n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n      \n        \n    text = \"From \"+stats[0].columns[4]+\" to \"+stats[0].columns[-2]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[0]+\" \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 13)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/Total_confirmed)*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days","c3ae4a2c":"confirmed_cases =  df_confirmed.groupby([\"country\"]).sum().drop(['Lat','Long'],axis =1).iloc[:,-1]\ndeaths = df_deaths.groupby([\"country\"]).sum().drop(['Lat','Long'],axis =1).iloc[:,-1]\n\nconfirmed_cases.name = \"Confirmed Cases\"\ndeaths.name = \"Deaths Reported\"\ndf_countries_cases = pd.DataFrame([confirmed_cases,deaths]).transpose()","1a233eb6":"rows = 4\nf = plt.figure(figsize=(15,10*rows))\n\nstats = [df_confirmed,df_deaths]\nlabel = [\"Confirmed\",\"Deaths\"]\nthreshold = [1500,100]\nfor i, stat in enumerate(stats):\n    plt.tight_layout()\n    df_countries = stat.groupby([\"country\"]).sum()\n    df_countries = df_countries.sort_values(df_countries.columns[-1],ascending= False)\n    others = df_countries[df_countries[df_countries.columns[-1]] < threshold[i] ].sum()[-1]\n    df_countries = df_countries[df_countries[df_countries.columns[-1]] > threshold[i]]\n    df_countries = df_countries[df_countries.columns[-1]]\n    labels = [df_countries.index[i] +\" (\" + str(int(df_countries[i])) +\") \"for i in range(df_countries.shape[0])]\n\n    ax = f.add_subplot(rows,1,i+1)\n    plt.pie(df_countries, labels=labels,autopct='%1.1f%%',pctdistance=0.85, labeldistance=1.1,textprops = {'fontsize':10.5})\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.text(0.5,0.5,\"Total India \"+label[i]+ \" Cases\\n\"+str(get_total_cases(stat)), horizontalalignment='center',verticalalignment='center',transform=ax.transAxes, size=18, alpha = 0.6)\n\n\nplt.show()\n","6073d50a":"pd.DataFrame(df_countries_cases.sum()).transpose().style.background_gradient(cmap='Wistia',axis=1)","f5250bbf":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(df_confirmed)):\n    folium.Circle(\n        location=[df_confirmed.iloc[i]['Lat'], df_confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #555;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed \"+str(df_confirmed.iloc[i,-1])+\"<\/li>\"+\n\n        \"<li>Deaths   \"+str(df_deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(df_confirmed.iloc[i,-1]+1)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map","5cd480b9":"df_countries = df_confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 1500].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(20,10*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(df_confirmed, df_deaths,country = country,figure = [f,rows,cols, i+1])\nplt.show()","89502d14":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        if country != \"India\":\n            continue\n    x = 30\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 10)\n    spl = make_interp_spline(date, t, k=1)  \n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,label = country,linewidth =2)\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \n\n\nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every socend day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,26)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n\nx = np.arange(0,26)\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend of India Confirm cases\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.show()","badb957d":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\ncontinents = [\"All\"]+list(continents)\n\ncols =1\nrows = 2\naxis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"Mortality Rate (of 100)\"]\n\nf = plt.figure(figsize=(15,10*rows))\n\n\nax = f.add_subplot(211)\nmortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\nplt.plot(np.arange(1,mortality_rate.shape[0]+1),mortality_rate,label = \"Current Mortality Rate \"+str(mortality_rate[-1]))\n\nplt_title = \"Mortality Rate Curve of India\"\nplot_params(ax,axis_label,plt_title)\nl = plt.legend(loc= \"best\")\nplt.show()\n","b555d3e1":"df_confirmed_report = df_confirmed.copy()\ndf_confirmed_report = df_confirmed_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_confirmed_report.loc[\"Total\"] = df_confirmed_report.sum()\ndf_confirmed_newcases = df_confirmed_report.groupby(level =0).diff(axis =1)\ndf_confirmed_newcases=df_confirmed_newcases.drop(columns=['1\/22\/20'])\n\ndf_deaths_report = df_deaths.copy()\ndf_deaths_report = df_deaths_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_deaths_report.loc[\"Total\"] = df_deaths_report.sum()\ndf_deaths_newcases = df_deaths_report.groupby(level =0).diff(axis =1)\ndf_deaths_newcases=df_deaths_newcases.drop(columns=['1\/22\/20'])","46008235":"confirm=df_confirmed_newcases\nconfirm=confirm.T\n\nconfirm['Date']=confirm.index\n\nconfirm=confirm[['Date', 'India']]\n\nconfirm_cases=pd.DataFrame()\n\nconfirm_cases['Date']=confirm['Date']\nconfirm_cases['India cases']=confirm['India']\n\nconfirm_cases=confirm_cases.reset_index()\nconfirm_cases=confirm_cases.drop(columns=['index'])","8581877e":"confirm_cases.head(60)","3b76344f":"confirm_cases=confirm_cases[49:]\nconfirm_cases","afa48a58":"confirm_cases['India cases']=confirm_cases['India cases'].replace(0,0.1)","a3b983f3":"confirm_cases['times'] = pd.to_datetime(confirm_cases['Date'])  \nconfirm_cases.set_index('times', inplace=True)                   \nconfirm_cases.sort_index(ascending=True, inplace=True)\ntar='India Confirm Cases Predictions'\nconfirm_cases.rename(columns={'India cases':tar}, inplace=True)\nconfirm_cases=confirm_cases[[tar]]","fa68c63d":"def create_features(data, label=None):\n    data['date'] = data.index\n    data['month'] = data['date'].dt.month\n    data['year'] = data['date'].dt.year\n    data['dayofmonth'] = data['date'].dt.day\n    X = data[['month','year','dayofmonth']]\n    if label:\n        y = data[label]\n        return X, y\n    return X","b40612ed":"test=confirm_cases.copy()\nX= create_features(test)\ny=confirm_cases","6c80cef7":"from sklearn.cross_decomposition import PLSRegression\npls = PLSRegression()","f34e9154":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    pls.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","3ebe9f59":"from sklearn.svm import LinearSVR\nsvr = LinearSVR()","5a12314b":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    svr.fit(Xtrain, ytrain)\n    y_pred = svr.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","7b7e6d35":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","a13ddc01":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    rf.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","193bfe8b":"rf=RandomForestRegressor()\nx=np.array(X)\ny=np.array(y)\ny=y.ravel()\nRF=rf.fit(Xtrain, ytrain)","a70bc056":"frequency='D'\nt=datetime.now()\ndef forecast(number):\n  datelist = pd.date_range(t, periods=number,freq=frequency)\n  datelist= pd.DataFrame(datelist,columns=['TIMESTAMP'])\n  datelist.index = datelist['TIMESTAMP']\n  datelist_featured=create_features(datelist)\n  prediction=RF.predict(datelist_featured)\n  pred=pd.DataFrame(prediction,columns=confirm_cases.columns)\n  pred.index = datelist['TIMESTAMP']\n  return pred","6711e29f":"forecast=forecast(7)\nforecast","be185e0e":"forecast.plot(figsize=(20, 5), color='r')","a87793dd":"deaths=df_deaths_newcases\ndeaths=deaths.T\n\ndeaths['Date']=deaths.index\n\ndeaths=deaths[['Date', 'India']]\n\ndeaths_cases=pd.DataFrame()\n\ndeaths_cases['Date']=deaths['Date']\ndeaths_cases['India cases']=deaths['India']\n\ndeaths_cases=deaths_cases.reset_index()\ndeaths_cases=deaths_cases.drop(columns=['index'])","16d4cc94":"deaths_cases.head(60)","2aa60fa7":"deaths_cases=deaths_cases[65:]\ndeaths_cases","2572d680":"deaths_cases['India cases']=deaths_cases['India cases'].replace(0,0.1)","7b644181":"deaths_cases['times'] = pd.to_datetime(deaths_cases['Date'])  \ndeaths_cases.set_index('times', inplace=True)                   \ndeaths_cases.sort_index(ascending=True, inplace=True)\ntar='India Deaths Predictions'\ndeaths_cases.rename(columns={'India cases':tar}, inplace=True)\ndeaths_cases=deaths_cases[[tar]]","9e40784b":"def create_features(data, label=None):\n    data['date'] = data.index\n    data['month'] = data['date'].dt.month\n    data['year'] = data['date'].dt.year\n    data['dayofmonth'] = data['date'].dt.day\n    X = data[['month','year','dayofmonth']]\n    if label:\n        y = data[label]\n        return X, y\n    return X","a4140e03":"test=deaths_cases.copy()\nX= create_features(test)\ny=deaths_cases","60b1c132":"from sklearn.cross_decomposition import PLSRegression\npls = PLSRegression()","e9611f14":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    pls.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","eb5a91f7":"from sklearn.svm import LinearSVR\nsvr = LinearSVR()","0a9ce0c2":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    svr.fit(Xtrain, ytrain)\n    y_pred = svr.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","1076cdff":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","8757f486":"x=np.array(X)\ny=np.array(y)\ny=y.ravel()\nkf = KFold(n_splits=5)\noutcomes2 = []\nClassR=0\nConM=0\nfold = 0\ni=0\nconf_matrix_list_of_arrays = []\nfor train_index, test_index in kf.split(x,y):\n    i=i+1\n    print('\\n')\n    print(\"Cross validation\",i)\n    fold += 1\n    Xtrain, Xtest = x[train_index], x[test_index]\n    ytrain, y_test = y[train_index], y[test_index]\n    rf.fit(Xtrain, ytrain)\n    y_pred = pls.predict(Xtest)\n    MAE=mean_absolute_error(y_test,y_pred)\n    print('Mean Absolute error: ', MAE)\n    mse=mean_squared_error(y_test,y_pred)\n    rmse = math.sqrt(mse)\n    print('Root mean squared error: ', rmse)","b4520284":"rf=RandomForestRegressor()\nx=np.array(X)\ny=np.array(y)\ny=y.ravel()\nRF=rf.fit(Xtrain, ytrain)","2aefd499":"frequency='D'\nt=datetime.now()\ndef forecast(number):\n  datelist = pd.date_range(t, periods=number,freq=frequency)\n  datelist= pd.DataFrame(datelist,columns=['TIMESTAMP'])\n  datelist.index = datelist['TIMESTAMP']\n  datelist_featured=create_features(datelist)\n  prediction=RF.predict(datelist_featured)\n  pred=pd.DataFrame(prediction,columns=deaths_cases.columns)\n  pred.index = datelist['TIMESTAMP']\n  return pred","52676c4e":"forecast=forecast(7)\nforecast","6fff686d":"forecast.plot(figsize=(20, 5), color='r')","d3a52867":"### Total India confirm and deaths cases in graph","de6c4599":"### Random Forest  Regressor Algorithm","1fa23296":"### Cross validation","ecf1880e":"### Preparing Confirm cases data for Training and predictions","135ff7d9":"### Data types of all coloumns","224d201e":"# ----------------Machine Learning Algorithm and Evaluation-----------------","e0f23e9e":"### Cross validation","04230032":"### Importing Libraries","f223b2d6":"### Data for training input and prediction output","9e50cd73":"### Cross validation","3c4451cb":"### So going to Ignore fisrt above days data and goin to use the next ","a754414a":"### Date settings and India cases preparation accroding to dates","6c3e9fbe":"### Data types of all coloumns","810135e6":"### Forecasting function by using the trained model for predictions","5a9769c8":"### Cross validation","e06645b4":"### Data for training input and prediction output","b05296ab":"## COVID-19 Spread Analysis","765ebe63":"### Importing Deaths cases of COVID-19 directly from githubusercontent as updated dataset","32ae8df1":"### Support vector  Regressor Algorithm","5df107ea":"## General Analysis of Data","a5e7e1fa":"### Predictions death cases of next 7 days","24f047cd":"### As we can see the results of three algorithms above but random forest regression algorithm performed well and we got minimum mean absolute error and root mean squared error. So now going to train all data on random forest algorithm and then we will get predictions of DEATHS CASES","739157c0":"# <img src=\"https:\/\/media.npr.org\/assets\/img\/2021\/02\/01\/gettyimages-1230235182_custom-24d5a0fe9793115c4ae460170eb26d6f01f289c5.jpg\">","9954c6fb":"### So going to Ignore fisrt above days data and goin to use the next ","24dcb0b7":"### Getting country data as count of confirm cases and deaths ","623a047b":"### Coloumns\/features in data","d04468a1":"### Support vector  Regressor Algorithm","155e55ac":"### Data information","af317ee5":"## As we can see the results of three algorithms above but random forest regression algorithm performed well and we got minimum mean absolute error and root mean squared error. So now going to train all data on random forest algorithm and then we will get predictions of CONFIRM CASES","9b9f0035":"### Date settings and India deaths_cases preparation accroding to dates","48eb7862":"### Visualization of India on Map","2bbc03ee":"### If we look at the first 65 days so there are no deaths in India but few in some day between but from index 48 to 65 increasing slowly ","38e763b7":"### Forecasting function by using the trained model for predictions","f9f515c1":"### Data Description, here we can see the values of columns as minimum value, maximum value, counts etc","df810cff":"### Renaming the Province\/State into state and Country\/Region into country","a82d6642":"### Mortality Rate Variation Over Period of Time. It is increasing very fast. ","25ef2227":"### Coloumns\/features in data","0eb4a2f5":"### Data Description, here we can see the values of columns as minimum value, maximum value, counts etc","d846bf60":"<div class=\"alert alert-block alert-info\">  \n<h1>If you like my work, please upvote ^ \ud83d\udc4d my kernel so that i will be motivated to share more content to Kaggle community. Thanks \ud83d\ude0d<\/h1>\n        <\/p>\n<\/div>","fd554eab":"## Pre-processing of dataset","70ec3f2d":"### Getting country name","7af51367":"## India Deaths Predictions of COVID-19","859bba0d":"## -------------Machine Learning Algorithm and Evaluation---------------","988920cf":"### If we look at the first 49 days so there are no cases in India but few in some day between but from index 46 to 49 increasing slowly ","88e0b703":"### Preparing deaths cases data for Training and predictions","892e6ee6":"## Exploratory data analysis","0b73e1af":"### Defininng Function for getting continent code for country","2e0e00f6":"### Data information","0b670511":"### Repacing NaN values that we were getting in province so replacing with empty space","5194e846":"### Cross validation","ff1e6f78":"### Preparing India confirm cases and Deaths for training the machine learning models","e78ba0e4":"### PLS Algorithm","42d436c8":"### Trend of India Confirm cases. As we can see that the cases are increasing in blue line with every 4 days 10 power of 4 means around 10000 cases now. ","3c712b1a":"## Importing COVID-19 Confirmed cases of India","4b8ac7b0":"### Spread of COVID-19 in  India, we can see mortality rate of all deaths with confirm cases and  deaths. In last 24 hours, confirm cases and deaths in India. ","c609c656":"## Predictions confirm cases of next 7 days","910851f2":"### Spliting dates into  month, year and Day of month","22cc4023":"### Spliting dates into  month, year and Day of month","b047a6b8":"### Random Forest  Regressor Algorithm","302828a2":"### PLS Algorithm","2b603b7c":"### Cross validation","c9cdb2d1":"### Changing Continent code to Continent names as we will create a map and show the India ","5acac202":" ### Functions for the plots and graphs\n - plot_params()\n - visualize_covid_cases()\n - get_mortality_rate()","b303f6b8":"## India Confirm Cases Predictions of COVID-19"}}