{"cell_type":{"c1432886":"code","408765e3":"code","1bfa623c":"markdown","e5f3f81c":"markdown","4ade1a35":"markdown","d90da64c":"markdown"},"source":{"c1432886":"def encrypt(text,key):\n    b=\"\"\n    for i in text:\n        if i.isalpha()==True:\n            c=ord(i)\n            d=c+key\n            if d<=(122):\n                b=b+chr(d) \n            elif d>122:\n                a=122-c\n                x=key-a\n                b=b+chr(96+x)\n        else:\n            b=b+i\n    return b\n    \nencrypt(\"hello world!\",3)","408765e3":"def decrypt(text,key):\n    b=\"\"\n    for i in text:\n        if i.isalpha()==True:\n            c=ord(i)\n            d=c-key\n            if d<=97: \n                j=c-97\n                g=key-j\n                t=123-g\n                b=b+chr(t)\n            elif d<=(122):               \n                    b=b+chr(d)           \n        else:\n            b=b+i\n    return b\n    \ndecrypt(\"khoor zruog!\",3) ","1bfa623c":"## <center>Simple Ceaser Encrypt and Decrypt<\/center>\n","e5f3f81c":"# Decrypt","4ade1a35":"### Problem Statement:\n\nCreate and encrypter in python based on the ceaser cipher. It is a substitution cipher where each character of the original text is shifted a certain number characters in the alphabet. Write a function that would require 2 arguments \u2013 the input text to be encrypted and a key. For eg: Given the input text \u2018hello\u2019 and the key 3, the resulting encryted text would be \u2018khoor\u2019. Here you can see that every character in the string hello is shifted by 3 characters. \u2018h\u2019 has shifted to \u2018k\u2019, \u2018e\u2019 has shifted to \u2018h\u2019 and so on. If a key of 5 were used, the resulting string would be \u2018mjqqt\u2019. This function should be capable of ignoring any characters which are not alphabets. The character \u2018z\u2019 entered b\ny the user for a key of 3 would result in \u2018c\u2019.\n\nUsage:<br>\n**encrypt(\u2018hello world!\u2019, 3)**<br>\n**\u2018khoor zruog!\u2019**\n\nSimilarly create decrypter which can decode the encryted text when provided the input text and key\n\nUsage:<br>\n**decrypt(\u2018khoor zruog!\u2019, 3)**<br>\n**\u2018hello world!\u2019**\n\nFor the sake of simplicity you can assume that input solely consists of lowercase alphabets, spaces and punctuation symbols. Numbers in the input text would also be ignored similar to symbols.","d90da64c":"# Encrypt"}}