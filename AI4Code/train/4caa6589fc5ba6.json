{"cell_type":{"24fdceb6":"code","4150812b":"code","68745de8":"code","2f0dcb7d":"code","7bfc03cf":"code","7f0efb5a":"markdown"},"source":{"24fdceb6":"import numpy as np\nimport tensorflow as tf\n\ny0 = np.zeros(100) ## model0\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\ny1 = np.ones(100) ## model1\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\nX0 = np.random.randn(100, 10)\nX1 = np.random.randn(100, 10)\n\ndef get_model(X, y):\n    inp = tf.keras.Input(10)\n    x = tf.keras.layers.Dense(2048)(inp)\n    x = tf.keras.layers.Dense(2048)(x)\n    x = tf.keras.layers.Dense(2048)(x)\n    x = tf.keras.layers.Dense(2048)(x)\n    out = tf.keras.layers.Dense(1)(x)\n    model = tf.keras.Model(inputs = inp, outputs = out)\n    model.compile(loss = tf.keras.losses.mse)\n    model.fit(X, y, epochs = 1, verbose = False)\n    return model\n\n## model0\u306e\u8a13\u7df4\nmodel0 = get_model(X0, y0)\n\n## model1\u306e\u8a13\u7df4\nmodel1 = get_model(X1, y1)\n\n## \u304f\u3063\u3064\u3051\u305f\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\ninp = tf.keras.Input(11)\n# out = tf.keras.layers.Lambda(lambda inp : tf.keras.backend.switch(inp[:, -1:] == 0, model0(inp[:,:-1]), model1(inp[:,:-1])))(inp)\nout = tf.where(inp[:,-1:] == 0, model0(inp[:,:-1]), model1(inp[:,:-1]))\nmodel_concat = tf.keras.Model(inputs = inp, outputs = out)\nmodel_concat.compile()\n\n## \u8a55\u4fa1\nX_test = np.random.randn(100, 10)\npred_type = np.random.randint(0, 2, 100)\np0 = model0.predict(X_test)\np1 = model1.predict(X_test)\n\nX_concat = np.hstack([X_test, pred_type.reshape(-1, 1)])\np_concat = model_concat.predict(X_concat)\nidx0 = pred_type == 0\nprint(\"loss with model0 \", np.max(np.abs(p0[idx0] - p_concat[idx0])))\nidx1 = pred_type == 1\nprint(\"loss with model1 \", np.max(np.abs(p1[idx1] - p_concat[idx1])))\n## \u3060\u3044\u305f\u3044\u3042\u3063\u3066\u308b","4150812b":"%%time\n## concat\u3057\u305f\u30e2\u30c7\u30eb\u306f100\u56de\u63a8\u8ad6\u3057\u30664s\u3050\u3089\u3044\nfor k in range(100):\n    p_concat = model_concat.predict(X_concat)","68745de8":"%%time\n## \u5143\u3005\u306e\u30e2\u30c7\u30eb\u3092100\u56de\u305a\u3064\u63a8\u8ad6\u3057\u30668s\u3050\u3089\u3044\uff08\u547c\u3073\u51fa\u3057\u56de\u6570\u304c\uff0c\u4e0a\u306econcat\u30e2\u30c7\u30eb\u3088\u308a\u3082\u591a\u304f\u306a\u308b\u304b\u3089\u9045\u3044\u3060\u3051\uff1f\uff09\nfor k in range(100):\n    p_concat = model0.predict(X_test)\n    p_concat = model1.predict(X_test)","2f0dcb7d":"## \u304f\u3063\u3064\u3051\u305f\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\ninp = tf.keras.Input(11)\n# out = tf.keras.layers.Lambda(lambda inp : tf.keras.backend.switch(inp[:, -1:] == 0, model0(inp[:,:-1]), model1(inp[:,:-1])))(inp)\nout1 = model0(inp[:,:-1])\nout2 = model1(inp[:,:-1])\nmodel_concat = tf.keras.Model(inputs = inp, outputs = [out1, out2])\nmodel_concat.compile()","7bfc03cf":"%%time\n## concat\u3057\u305f\u30e2\u30c7\u30eb\u306f100\u56de\u63a8\u8ad6\u3057\u30664s\u3050\u3089\u3044\nfor k in range(100):\n    p_concat = model_concat.predict(X_concat)","7f0efb5a":"## tf where \u306a\u3057"}}