{"cell_type":{"fa021ff4":"code","4a11eb4d":"code","31468352":"code","2ccae2eb":"code","bf912584":"code","b32ebcf9":"code","d52c6f7a":"code","8c2779f1":"code","f9182cbc":"code","0b72be82":"code","66698578":"code","d92d87a8":"code","81c4ee7a":"code","52304906":"code","9767f8f0":"code","3c542488":"code","43a8c926":"code","ea4b964c":"code","2ccb287f":"code","5bc16c07":"code","3f5dd388":"code","e1d2b8fd":"code","12cd84d7":"code","138a520c":"code","f75413b3":"code","4e215ad9":"code","3705e72e":"code","b5a4d696":"code","cd00250b":"code","68ea2bb7":"code","da4ea10f":"code","8b4cf1a3":"code","47dba419":"code","76769288":"markdown","63f3518a":"markdown","7a20d234":"markdown","f8f2c2fd":"markdown","337d0c99":"markdown","2375f4b2":"markdown","e4885b47":"markdown","a877e015":"markdown","88ac6ee3":"markdown"},"source":{"fa021ff4":"import warnings\nwarnings.filterwarnings(\"ignore\")","4a11eb4d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing","31468352":"# loading the dataset\ntrain_dataset = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_dataset = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_dataset.head()","2ccae2eb":"test_dataset.tail()","bf912584":"train_dataset.fillna(0, inplace=True)\ntest_dataset.fillna(0, inplace=True)","b32ebcf9":"train_dataset.isnull().sum()","d52c6f7a":"sns.displot(train_dataset['SalePrice'])","8c2779f1":"copy_train_dataset = train_dataset.copy()","f9182cbc":"def non_numeric_data(df):\n    columns = df.columns.values\n    for column in columns:\n        text_digit = {}\n        def convert_to_int(key):\n            return text_digit[key]\n        if df[column].dtype != np.int64 and df[column].dtype != np.float64:\n            column_content = df[column].values.tolist()\n            unique_elements = set(column_content)\n            x = 0\n            for unique in unique_elements:\n                if unique not in text_digit:\n                    text_digit[unique]= x\n                    x = x+1\n            df[column] = list(map(convert_to_int, df[column]))\n    return df","0b72be82":"non_numeric_train = non_numeric_data(copy_train_dataset)","66698578":"new_test_dataset = non_numeric_data(test_dataset)\nnew_test_dataset.head()","d92d87a8":"non_numeric_train.head()","81c4ee7a":"plt.subplots(figsize=(19, 4))\nsns.barplot(x=non_numeric_train['YrSold'], y=non_numeric_train['SalePrice'])\nplt.xticks(rotation=90)\nplt.show()","52304906":"plt.subplots(figsize=(19, 4))\nsns.barplot(x=non_numeric_train['SaleType'], y=non_numeric_train['SalePrice'])\nplt.xticks(rotation=90)\nplt.show()","9767f8f0":"plt.subplots(figsize=(19, 4))\nsns.barplot(x=train_dataset['Neighborhood'], y=non_numeric_train['SalePrice'])\nplt.xticks(rotation=90)\nplt.show()","3c542488":"plt.subplots(figsize=(19, 4))\nsns.barplot(x=non_numeric_train['OverallQual'], y=non_numeric_train['SalePrice'])\nplt.xticks(rotation=90)\nplt.show()","43a8c926":"numeric_column_names = non_numeric_train.columns.tolist()","ea4b964c":"correlation = []\nfor item in numeric_column_names:\n    correlation.append((non_numeric_train[item].corr(non_numeric_train['SalePrice'])))","2ccb287f":"# making a df to store the correlation for visualization\ncorrelation_list_df = pd.DataFrame(\n    {'column': numeric_column_names,\n     'correlation': correlation\n    })\ncorrelation_list_df = correlation_list_df.sort_values(by='correlation', ascending=False)\nprint(correlation_list_df)","5bc16c07":"plt.subplots(figsize=(19, 4))\nsns.barplot(x=correlation_list_df['column'], y=correlation_list_df['correlation'])\nplt.xticks(rotation=90)\nplt.ylabel('Correlation', fontsize=13)\nplt.xlabel('Columns', fontsize=13)\nplt.title('Correlation of numeric columns with SalePrice')\nplt.show()","3f5dd388":"non_numeric_train.OverallQual.unique()","e1d2b8fd":"quality_pivot = non_numeric_train.pivot_table(index='OverallQual',values='SalePrice', aggfunc=np.median)","12cd84d7":"quality_pivot # as stated above, quality of house is highly manupulating the sale price","138a520c":"quality_pivot.plot(kind='bar',color='green')\nplt.xlabel('Overall Quality')\nplt.ylabel('Median')\nplt.xticks(rotation=0)\nplt.show()","f75413b3":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm, preprocessing\nfrom sklearn.metrics import mean_squared_error","4e215ad9":"X = np.array(non_numeric_train.drop(['SalePrice'], axis = 1))\ny = np.array(non_numeric_train['SalePrice'])","3705e72e":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=.2)","b5a4d696":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","cd00250b":"# train classifier\nclf = LinearRegression(fit_intercept= False, normalize= False, n_jobs=-1)\nmodel = clf.fit(X_train, y_train)","68ea2bb7":"print(model.score(X_test, y_test))","da4ea10f":"submission = pd.DataFrame({\"Id\":test_dataset[\"Id\"],\"SalePrice\":model.predict(new_test_dataset)})","8b4cf1a3":"submission.head()","47dba419":"submission.to_csv(\"house_price_prediction_submission.csv\",index=False)","76769288":"#### We can see that how sale price is affected by the total house quality","63f3518a":"**house prices of Northridge is very high comparatively**","7a20d234":"> I was inspired by the notebookes written [here](https:\/\/www.kaggle.com\/amohamedathif\/house-price-prediction-score-above-88#Building-a-regression-model) and [here](https:\/\/www.kaggle.com\/mahmoudabdelmohsen\/house-prices-by-mahmoud-abdelmohsen)~","f8f2c2fd":"## **SalePrice with different attributes**","337d0c99":"## Showing the quality effect using a chart below:","2375f4b2":"# Handling of non numeric data\n#### In this dataset, there are many string type data ---> REG, IR1, IR2, IR3 ..... **(unique elements)**","e4885b47":"# Training the Data Features","a877e015":"# Checking Correlation","88ac6ee3":"# Preparing to Submit"}}