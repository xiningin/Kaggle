{"cell_type":{"7f3a71a3":"code","b4ba1aa4":"code","b5ce0b06":"code","27925b41":"code","998d7f1b":"code","c7b278c7":"code","ebb3a1e7":"code","6fe47084":"code","03bcd8a1":"code","eac2fc48":"code","492e14dc":"code","e222daf9":"code","434290b2":"code","15eb56b5":"code","7d820f5c":"code","8076f9c7":"code","aadab068":"code","4100d4e4":"code","07a16d6d":"code","794c8ff2":"code","df4c37fe":"code","3b23b60a":"code","42f11611":"code","b868f4de":"code","c053dcf4":"code","e629bbe3":"code","efc65e61":"code","a455dac6":"code","8841c7c0":"code","6c55320c":"code","0b26f26a":"code","9e7133f3":"code","e386c88e":"code","1767f4d2":"code","a91e9689":"code","71964c5c":"code","153dabef":"code","7f9f9c9b":"code","8b0dc556":"code","21f5bcc5":"code","b6494614":"code","91595499":"code","9d9396df":"code","ffc8c524":"code","32539576":"code","3b19e06e":"code","a0937714":"code","463907d9":"code","0de0d530":"code","dd23301f":"code","1397e5bd":"code","133215e9":"code","cf8ca077":"code","0d30b2b5":"code","535218eb":"code","68b644dd":"code","c6a5cb8d":"code","6b731c52":"code","30a52879":"code","648c4af0":"markdown","a8225110":"markdown","00b2903c":"markdown","984aadf0":"markdown","7311316b":"markdown","949d8f3e":"markdown","d9b2cb99":"markdown","3da6cc0f":"markdown","527d8571":"markdown","f05ce7e6":"markdown","c0483ac0":"markdown","f819a7f1":"markdown","3a0d64c0":"markdown","67c09061":"markdown","f9eebff4":"markdown","916fdfc7":"markdown","db1b1989":"markdown","7339a5d2":"markdown","cd284fb3":"markdown","f5e461db":"markdown","5848d4a0":"markdown","ce891815":"markdown","43bfe9a4":"markdown","08a75959":"markdown","713f4abc":"markdown","daa54688":"markdown","062b9a9b":"markdown","240cddf5":"markdown","4d369590":"markdown"},"source":{"7f3a71a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4ba1aa4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import RandomOverSampler\nsns.set(style='whitegrid')\n","b5ce0b06":"train = pd.read_csv(\"\/kaggle\/input\/health-insurance-cross-sell-prediction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/health-insurance-cross-sell-prediction\/test.csv\")","27925b41":"train.head()","998d7f1b":"# WITH ONE COMMAND\n# Get column dtypes\n# Contains isnull or not\n# Total Entries\ntrain.info()","c7b278c7":"train.shape","ebb3a1e7":"train.isnull().sum()","6fe47084":"sns.countplot(train.Response)","03bcd8a1":"sns.catplot(x=\"Gender\", y=\"Annual_Premium\",hue=\"Response\", data=train)","eac2fc48":"sns.scatterplot(x=\"Vehicle_Damage\", y=\"Policy_Sales_Channel\",hue=\"Response\", data=train)","492e14dc":"sns.scatterplot(x=\"Previously_Insured\", y=\"Policy_Sales_Channel\",hue=\"Response\", data=train)","e222daf9":"sns.scatterplot(x=\"Annual_Premium\", y=\"Policy_Sales_Channel\",hue=\"Response\", data=train)","434290b2":"# sns.swarmplot(x=\"Annual_Premium\", y=\"Policy_Sales_Channel\",hue=\"Response\", data=train)","15eb56b5":"sns.distplot(train.Age)","7d820f5c":"sns.scatterplot(x=\"Age\", y=\"Annual_Premium\",hue=\"Response\", data=train)","8076f9c7":"# sns.swarmplot(x=\"Age\", y=\"Annual_Premium\",hue=\"Response\", data=train)","aadab068":"sns.scatterplot(x=\"Age\", y=\"Previously_Insured\",hue=\"Response\", data=train)","4100d4e4":"sns.scatterplot(x=\"Vehicle_Age\", y=\"Policy_Sales_Channel\",hue=\"Response\", data=train)\n","07a16d6d":"sns.countplot(x=\"Vehicle_Age\", hue=\"Response\", data=train)","794c8ff2":"sns.countplot(x=\"Age\", hue=\"Response\", data=train)","df4c37fe":"sns.countplot(x=\"Vehicle_Age\", hue=\"Response\", data=train)","3b23b60a":"sns.countplot(x=\"Previously_Insured\", hue=\"Response\", data=train)","42f11611":"sns.countplot(x=\"Driving_License\", hue=\"Response\", data=train)","b868f4de":"sns.countplot(x=\"Region_Code\", hue=\"Response\", data=train)","c053dcf4":"sns.scatterplot(x=\"Vintage\",y=\"Region_Code\" , hue=\"Response\", data=train)","e629bbe3":"sns.pairplot(data=train)","efc65e61":"\ntrain_os=RandomOverSampler(random_state=42)\nX=train.drop(['Response'],axis=1)\ny=train['Response']\n\nX_os,y_os=train_os.fit_sample(X,y)","a455dac6":"from collections import Counter\nprint('Original dataset shape {}'.format(Counter(y)))\nprint('Resampled dataset shape {}'.format(Counter(y_os))) ","8841c7c0":"X_os['Gender'] = X_os['Gender'].map( {'Female': 0, 'Male': 1} ).astype(int)","6c55320c":"# Convert categorical variable into dummy\/indicator variables\n# Learn More https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html?highlight=dummies#pandas.get_dummies\nX_os=pd.get_dummies(X_os,drop_first=True)","0b26f26a":"from sklearn.model_selection import train_test_split\nx = X_os.drop(labels= ['id','Region_Code',\"Driving_License\"], axis = 1)\n\ny=y_os\n\nx_train,x_test,y_train,y_test = train_test_split(x,y, random_state = 0)\n","9e7133f3":"x_train.shape","e386c88e":"x_train.info()","1767f4d2":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom scipy.stats import randint\nimport pickle\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\n# import packages for hyperparameters tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, StratifiedKFold, KFold, GridSearchCV\nfrom sklearn.metrics import f1_score, roc_auc_score,accuracy_score,confusion_matrix, precision_recall_curve, auc, roc_curve, recall_score, classification_report ","a91e9689":"x_train.shape","71964c5c":"x_train","153dabef":"random_search = {'criterion': ['entropy', 'gini'],\n               'max_depth': [2,3,4,5,6,7,10],\n               'min_samples_leaf': [4, 6, 8],\n               'min_samples_split': [5, 7,10],\n               'n_estimators': [300]}\n\nclf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search, n_iter = 10, \n                               cv = 4, verbose= 2, random_state= 101, n_jobs = -1)\nmodel.fit(x_train,y_train)","7f9f9c9b":"filename = 'rf_model.sav'\npickle.dump(model, open(filename, 'wb'))","8b0dc556":"filename = 'rf_model.sav'","21f5bcc5":"rf_load = pickle.load(open(filename, 'rb'))","b6494614":"y_pred=model.predict(x_test)","91595499":"print (classification_report(y_test, y_pred))\n","9d9396df":"y_score = model.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score)\n\ntitle('Random Forest ROC curve: CC Fraud')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","ffc8c524":"roc_auc_score(y_test, y_score)","32539576":"space={ 'max_depth': hp.quniform(\"max_depth\", 3,18,1),\n        'gamma': hp.uniform ('gamma', 1,11),\n        'reg_alpha' : hp.quniform('reg_alpha', 40,180,1),\n        'reg_lambda' : hp.uniform('reg_lambda', 0,1),\n        'colsample_bytree' : hp.uniform('colsample_bytree', 0.5,1),\n        'min_child_weight' : hp.quniform('min_child_weight', 0, 10, 1),\n        'n_estimators': 300,\n        'seed': 0\n    }","3b19e06e":"def objective(space):\n    clf=xgb.XGBClassifier(\n                    n_estimators =space['n_estimators'], max_depth = int(space['max_depth']),learning_rate=0.01,gamma = space['gamma'],\n                    reg_alpha = int(space['reg_alpha']),min_child_weight=int(space['min_child_weight']),\n                    colsample_bytree=int(space['colsample_bytree']))\n    \n    evaluation = [(x_train, y_train), (x_test, y_test)]\n    \n    clf.fit(x_train, y_train,\n            eval_set=evaluation, eval_metric=\"auc\",\n            early_stopping_rounds=10,verbose=False)\n    \n\n    pred = clf.predict(x_test)\n    y_score = model.predict_proba(x_test)[:,1]\n    accuracy = accuracy_score(y_test, pred>0.5)\n    Roc_Auc_Score = roc_auc_score(y_test, y_score)\n    print (\"ROC-AUC Score:\",Roc_Auc_Score)\n    print (\"SCORE:\", accuracy)\n    return {'loss': -Roc_Auc_Score, 'status': STATUS_OK }","a0937714":"x_train=x_train.rename(columns={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1_Year\", \"Vehicle_Age_> 2 Years\": \"Vehicle_Age_gt_2_Years\"})\nx_test=x_test.rename(columns={\"Vehicle_Age_< 1 Year\": \"Vehicle_Age_lt_1_Year\", \"Vehicle_Age_> 2 Years\": \"Vehicle_Age_gt_2_Years\"})","463907d9":"trials = Trials()\n\nbest_hyperparams = fmin(fn = objective,\n                        space = space,\n                        algo = tpe.suggest,\n                        max_evals = 100,\n                        trials = trials)","0de0d530":"print(\"The best hyperparameters are : \",\"\\n\")\nprint(best_hyperparams)","dd23301f":"xgb_model=xgb.XGBClassifier(n_estimators = space['n_estimators'], max_depth = 7, gamma = 4.0388607178326605, reg_lambda = 0.26955899476862166,\n                            reg_alpha = 66.0, min_child_weight=4.0,colsample_bytree = 0.8844758548525424 )\n    \n","1397e5bd":"xgb_model.fit(x_train,y_train)","133215e9":"filename = 'xgboost_model.sav'\npickle.dump(xgb_model, open(filename, 'wb'))","cf8ca077":"y_score = xgb_model.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score)\n\ntitle('XGBoost ROC curve')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))","0d30b2b5":"x_test['Vehicle_Age_lt_1_Year']=x_test['Vehicle_Age_lt_1_Year'].astype('int')\nx_test['Vehicle_Age_gt_2_Years']=x_test['Vehicle_Age_gt_2_Years'].astype('int')\nx_test['Vehicle_Damage_Yes']=x_test['Vehicle_Damage_Yes'].astype('int')\n","535218eb":"random_state=42\nn_iter=50\nnum_folds=2\nkf = KFold(n_splits=num_folds, random_state=random_state,shuffle=True)","68b644dd":"def gb_mse_cv(params, random_state=random_state, cv=kf, X=x_train, y=y_train):\n    # the function gets a set of variable parameters in \"param\"\n    params = {'n_estimators': int(params['n_estimators']), \n              'max_depth': int(params['max_depth']), \n             'learning_rate': params['learning_rate']}\n    \n    # we use this params to create a new LGBM Regressor\n    model = lgb.LGBMClassifier(random_state=42, **params)\n    \n    # and then conduct the cross validation with the same folds as before\n    score = -cross_val_score(model, X, y, cv=cv, scoring=\"roc_auc\", n_jobs=-1).mean()\n\n    return score\n","c6a5cb8d":"%%time\n\n# possible values of parameters\nspace={'n_estimators': hp.quniform('n_estimators', 100, 2000, 1),\n       'max_depth' : hp.quniform('max_depth', 2, 20, 1),\n       'learning_rate': hp.loguniform('learning_rate', -5, 0)\n      }\n\n# trials will contain logging information\ntrials = Trials()\n\nbest=fmin(fn=gb_mse_cv, # function to optimize\n          space=space, \n          algo=tpe.suggest, # optimization algorithm, hyperotp will select its parameters automatically\n          max_evals=n_iter, # maximum number of iterations\n          trials=trials, # logging\n          rstate=np.random.RandomState(random_state) # fixing random state for the reproducibility\n         )\n\n# computing the score on the test set\nmodel = lgb.LGBMClassifier(random_state=random_state, n_estimators=int(best['n_estimators']),\n                      max_depth=int(best['max_depth']),learning_rate=best['learning_rate'])\nmodel.fit(x_train,y_train)\n\npreds = [pred[1] for pred in model.predict_proba(x_test)]\nscore = roc_auc_score(y_test, preds, average = 'weighted')","6b731c52":"print(\"Best auc-roc score\",score)\n","30a52879":"y_score = model.predict_proba(x_test)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score)\n\ntitle('LGBM ROC curve: CC Fraud')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","648c4af0":"### Conclusion\nNo reponse from people who are not previously insured.\n","a8225110":"# Check data types","00b2903c":"<font size=\"+2\" color=#4169E1 ><b>Please Upvote my notebook if you like my work.<\/b><\/font>","984aadf0":"# Vehicle Damage Vs Policy Sales Channel","7311316b":"# One-Hot Encoding","949d8f3e":"## Classification Report","d9b2cb99":"# XGBoost Classifier","3da6cc0f":"# Target Variable (Response 0 or 1)","527d8571":"# Import Libraries","f05ce7e6":"![Vehicle Insurance](https:\/\/previews.123rf.com\/images\/irinastrel123\/irinastrel1231705\/irinastrel123170500010\/78490269-car-insurance-web-banner-types-of-insurance-cases-vector-illustration-.jpg)","c0483ac0":"## LGBoost Classifier","f819a7f1":"<font size=\"+3\" color='#4169E1'><b> Exploratory Data Analysis <\/b><\/font>\n\n\n<font size=\"+2\" color=#4169E1 ><b>Please Upvote my notebook if you like my work.<\/b><\/font>","3a0d64c0":"# Check for missing values","67c09061":"# Gender VS Annual_Premium","f9eebff4":"# Handling Imbalance Data - OverSampling","916fdfc7":"# Age Distrubition of customers","db1b1989":"# Random Forest Classifier","7339a5d2":"### Conclusion\nThe amount of people taking the insurance is very low compared to people who don't. And we are intrested in **Response = 1**","cd284fb3":"# Look at the data","f5e461db":"# Data Modelling and Evaluation","5848d4a0":"# Evaluate Model","ce891815":"# Previously Insured Vs Policy Sales Channel","43bfe9a4":"# Annual Premium Vs Policy Sales Channel","08a75959":"# Save model","713f4abc":"## ROC Curve & AUC of Random forest classifier","daa54688":"### Conclusion\nNo reponse from people with no vehicle damage.","062b9a9b":"### Conclusion\nNo relation between Response and Gender","240cddf5":"# Import datasets","4d369590":"# ROC Curve & AUC of XG boost classifier"}}