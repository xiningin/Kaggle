{"cell_type":{"2b6ee5b1":"code","3e65f6dd":"code","14bf917b":"code","4eb3c1cc":"code","fc15cf03":"code","e9427458":"code","d9ed50ac":"code","90606f61":"code","1cf6b976":"code","05897980":"markdown","2a3bbe3f":"markdown","327b2c12":"markdown","9494c26c":"markdown","eed9dabe":"markdown","fae2f57f":"markdown","ef8510e3":"markdown","71c6fa08":"markdown","b95c84ff":"markdown"},"source":{"2b6ee5b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e65f6dd":"Pokemon_data = pd.read_csv(\"\/kaggle\/input\/pokemon-3rd-gen-ou-1500-rank-102019-102021\/PokemonData_Stats.csv\")\nPokemon_data.columns","14bf917b":"TopRank_Pokemon = Pokemon_data.loc[Pokemon_data.Rank <= 3 ][\"Pokemon\"]\n\nprint(TopRank_Pokemon[0:15], TopRank_Pokemon[60:])","4eb3c1cc":"Grass_Type1_Pokemon = Pokemon_data.loc[Pokemon_data.Type1 == 'Grass'] \n\nGrass_Type2_Pokemon = Pokemon_data.loc[Pokemon_data.Type2 == 'Grass'] \n\nGrass_Type_Pokemon = pd.concat([Grass_Type1_Pokemon, Grass_Type2_Pokemon])\n\nlen(Grass_Type_Pokemon)\/len(Pokemon_data)","fc15cf03":"Pokemon_data1 = Pokemon_data[40:]\n\nPokemon_data2 = Pokemon_data[0:40]\n\nPokemon_data1.head()","e9427458":"from sklearn.ensemble import RandomForestClassifier\n\ny = Pokemon_data1[\"Rank\"]\n\nfeatures = [\"Total\", \"Type1\", \"Type2\", \"Usage%\", \"Raw%\", \"Real%\"]\nX = pd.get_dummies(Pokemon_data1[features])\nX_test = pd.get_dummies(Pokemon_data1[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'Pokemon': Pokemon_data2.Pokemon, 'Rank': predictions[0:40]})\noutput.to_csv('submission.csv', index=False)\nprint(output)","d9ed50ac":"print(Pokemon_data2.Pokemon)","90606f61":"from sklearn.ensemble import RandomForestClassifier\n\ny = Pokemon_data1[\"Usage%\"]\n\nfeatures = [\"Type1\", \"Type2\", \"Total\", \"Attack\", \"Defense\", \"Sp.Atk\", \"Sp.Def\" , \"Speed\"]\nX = pd.get_dummies(Pokemon_data1[features])\nX_test = pd.get_dummies(Pokemon_data1[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'Pokemon': Pokemon_data2.Pokemon, 'Usage%': predictions[0:40]})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\nprint(output)","1cf6b976":"print(Pokemon_data2.iloc[:,[2,14]])","05897980":"We can see that Top tier is the same in the last two years. That could make the game a bit boring or repetitive. A way to balance it is introducing a ban system, cause of nerfing isn't a possibility. Anyway, we just see the popularity, not the winrate. We could observe that Tyranitar and Swampert are weak to Grass type, so with that Popularity a Grass Pokemon should be very relevant in the Team. Let's see if it's true.","2a3bbe3f":"Now we have the Data, so we can start working. I will start looking at head rank, for some overused Pokemon.","327b2c12":"I will make a little analytics of data. This is my first DataSet and Notebook so please be kind. \n\nWe start the code seeing the columns of the DataSet.","9494c26c":"The notebook have two parts, first wee use Data to analyze a bit about Metagame. The second part is two random forest model to predict rank and Pokemon Usage%. If you aren't interested in the metagame, please skip to [71]","eed9dabe":"We can see that near to 10% of all Pokemon are Grass type, so for each 2 teams, there are near to 1 Pokemon. So, how is Swampert so used? First, if your opponent use a Grass type, you could always swap your Swampert, but it will give the opponent a free hit. Isn't Grass Pokemon Strong enough to make that something with impact in game?","fae2f57f":"Now, we maded a random forest model, where we can predict the usage percent. We see that in most of Pokemon, the random forest did a good aproximation","ef8510e3":"Actually, Swampert could learn Ice Beam so in any situation against a Grass-Type, we can see some situations: \n\nIf a Grass type attack is used, he could hit Swampert (killing it), or other Pokemon if it is changed.\n\nIf a Grass type attack isn't used, he could hit Swampert, and then your Pokemon die cause of Ice Beam, or hit another Pokemon if he swap.\n\nSo, there are 4 different scenarios, making a 50\/50 situation without a clear advantage.","71c6fa08":"We have made a random forest model, and introducing a list of Pokemon it will predict the rank. We can see the predict in the first 15 Pokemon are near to real Data. Then, it is hard to predict because higher Rank is more unpredictible.","b95c84ff":"Let's see a bit more about the data."}}