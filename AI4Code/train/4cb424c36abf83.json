{"cell_type":{"e7907335":"code","9c9059dc":"code","ec332303":"code","04eff882":"code","4a248b9a":"code","980e426f":"code","197e41f0":"code","fdd9bd51":"code","bc0ad743":"code","c89e7692":"code","fa66cb16":"code","ef1185b2":"code","850cefdd":"code","a9bad6f8":"code","37c9b841":"code","e6d473c0":"code","43d68f51":"code","fbdca6ea":"code","4b8e35b0":"code","0a3be5fc":"code","7887bf4a":"code","73e6924c":"code","588a91f6":"code","6895280c":"code","8e8c1b06":"code","508cafaa":"code","60a8726f":"code","4682c8c0":"code","d28fe79d":"code","68abaf7c":"code","c591de58":"code","668df5b0":"code","04c4d19a":"code","37b70a8a":"code","25a150d2":"code","d4b73b8a":"code","7e3208f7":"code","37f1f3e5":"code","2a1a3c8e":"code","2b8c0193":"code","682d3e8e":"code","ba424340":"code","18741d33":"code","53774b8c":"code","37bbe0fe":"code","6e5ca48d":"markdown","34e5aadc":"markdown","7265315b":"markdown","f99b27ae":"markdown","71606e98":"markdown","ea4444d9":"markdown","f1faf6c3":"markdown","3031072a":"markdown","009eb6a1":"markdown","4e9300da":"markdown","8146cae4":"markdown","a3c48a6a":"markdown","6837e1ab":"markdown","b8dd8728":"markdown","e91d044e":"markdown"},"source":{"e7907335":"import numpy as np\nimport pickle\nimport cv2\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\nimport os\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/\"]).decode(\"utf8\"))\n","9c9059dc":"EPOCHS = 20\n\nINIT_LR = 1e-5\nBS = 8\ndefault_image_size = tuple((256, 256))\nimage_size = 0\ndirectory_root = '..\/input\/corn-disease\/'\nwidth=256\nheight=256\ndepth=3","ec332303":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None","04eff882":"image_list, label_list = [], []\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    for directory in root_dir :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            root_dir.remove(directory)\n\n    for plant_folder in root_dir :\n        plant_disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        \n        for disease_folder in plant_disease_folder_list :\n            # remove .DS_Store from list\n            if disease_folder == \".DS_Store\" :\n                plant_disease_folder_list.remove(disease_folder)\n\n        for plant_disease_folder in plant_disease_folder_list:\n            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n            plant_disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n                \n            for single_plant_disease_image in plant_disease_image_list :\n                if single_plant_disease_image == \".DS_Store\" :\n                    plant_disease_image_list.remove(single_plant_disease_image)\n\n            for image in plant_disease_image_list:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"[INFO] Image loading completed\")  \nexcept Exception as e:\n    print(f\"Error : {e}\")","4a248b9a":"image_size = len(image_list)\nprint(image_size)","980e426f":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\nn_classes = len(label_binarizer.classes_)","197e41f0":"print(label_binarizer.classes_)","fdd9bd51":"np_image_list = np.array(image_list, dtype=np.float32) \/ 255.0","bc0ad743":"print(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(np_image_list, image_labels, test_size=0.2, random_state = 42) ","c89e7692":"x_test_final = x_test[-200:]\ny_test_final = y_test[-200:]\n\nx_test = x_test[:-200]\ny_test = y_test[:-200]","fa66cb16":"import keras\n\nmodel = keras.models.load_model('..\/input\/vgg16-corn-disease-classification\/model_keras.h5')\nmodel.load_weights('..\/input\/vgg16-corn-disease-classification\/weights_best_.hdf5')","ef1185b2":"model.summary()","850cefdd":"#opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n# distribution\n#model.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n# train the network\nprint(\"[INFO] training network...\")","a9bad6f8":"print(\"[INFO] Calculating model accuracy\")\nscores = model.evaluate(x_test_final, y_test_final)\nprint(f\"Test Accuracy: {scores[1]*100}\")","37c9b841":"y_pred_probs = model.predict(x_test_final)\ny_pred_classes = np.argmax(y_pred_probs, axis=1)\n\n# reduce to 1d array\nyhat_probs = y_pred_probs[:,0]\nyhat_classes = y_pred_classes\n\ny_test_final_ = np.argmax(y_test_final, axis=1)","e6d473c0":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test_final_, yhat_classes))","43d68f51":"def predict_emotion(image):\n    sample_test = np.expand_dims(image,axis=0)\n    y_predict = label_binarizer.inverse_transform(model.predict(sample_test))[0]\n    return y_predict","fbdca6ea":"from pylab import rcParams\nrcParams['figure.figsize'] = 5, 10\ndef plot_image(image):\n    img = image.reshape(256,256,3)\n    plt.imshow(img, interpolation='nearest')\n    plt.show()","4b8e35b0":"y_test_final[30]","0a3be5fc":"y_test_final[30]","7887bf4a":"label_binarizer.classes_","73e6924c":"def return_classname(array_):\n    idx_class = {0:'Corn_(maize)___Common_rust_',\n           1:'Corn_(maize)___Northern_Leaf_Blight', \n                 2:'Corn_(maize)___healthy'}\n\n    value_max = max(array_)\n    value_index = np.where(array_ == value_max)[0][0]\n\n    return idx_class[value_index]","588a91f6":"sample_test1 = x_test_final[30]\nplot_image(sample_test1)\n\nprint('Actual Class:',return_classname(y_test_final[30]))\nprint('Predicted Class: ',predict_emotion(sample_test1))","6895280c":"sample_test2 = x_test_final[50]\nplot_image(sample_test2)\n\nprint('Actual Class:',return_classname(y_test_final[50]))\nprint('Predicted Class: ',predict_emotion(sample_test2))","8e8c1b06":"sample_test1 = x_test_final[50]\nplot_image(sample_test1)\n\nprint('Actual Class:',return_classname(y_test_final[50]))\nprint('Predicted Class: ',predict_emotion(sample_test1))","508cafaa":"from keras.models import Model\n\ndef layer_image(input_image, col_size, row_size, act_index):\n    sample_test = np.expand_dims(input_image,axis=0)\n    y_predict = label_binarizer.inverse_transform(model.predict(sample_test))[0]\n    label = y_predict\n\n    layer_outputs = [layer.output for layer in model.layers][1:]\n    activation_model = Model(inputs=model.input, outputs=layer_outputs)\n    activations = activation_model.predict(sample_test)\n\n    activation = activations[act_index]\n    activation_index=0\n    fig, ax = plt.subplots(row_size, col_size, figsize=(row_size*5,col_size*5))\n    for row in range(0,row_size):\n        for col in range(0,col_size):\n            ax[row][col].imshow(activation[0, :, :, activation_index])\n            activation_index += 1\n    return fig","60a8726f":"model.layers","4682c8c0":"layer_image(sample_test1, 2,2,0)","d28fe79d":"layer_image(sample_test1, 2,2,1)","68abaf7c":"layer_image(sample_test1, 2,2,2)","c591de58":"layer_image(sample_test1, 2,2,3)","668df5b0":"layer_image(sample_test1, 2,2,4)","04c4d19a":"layer_image(sample_test1, 2,2,5)","37b70a8a":"layer_image(sample_test1, 2,2,6)","25a150d2":"layer_image(sample_test1, 2,2,7)","d4b73b8a":"layer_image(sample_test1, 2,2,8)","7e3208f7":"layer_image(sample_test1, 2,2,9)","37f1f3e5":"layer_image(sample_test1, 2,2,10)","2a1a3c8e":"layer_image(sample_test1, 2,2,11)","2b8c0193":"layer_image(sample_test1, 2,2,12)","682d3e8e":"layer_image(sample_test1, 2,2,13)","ba424340":"layer_image(sample_test1, 2,2,14)","18741d33":"layer_image(sample_test1, 2,2,15)","53774b8c":"layer_image(sample_test1, 2,2,16)","37bbe0fe":"layer_image(sample_test1, 2,2,17)","6e5ca48d":"# Function to predict image emotion","34e5aadc":"# Function to plot image","7265315b":"Fetch images from directory","f99b27ae":"# Test Images ","71606e98":"# Other values","ea4444d9":"Import neccessary packages","f1faf6c3":"# Loading Model","3031072a":"Function to convert images to array","009eb6a1":"Get Size of Processed Image","4e9300da":"# Taking 200 images seperate for final testing","8146cae4":"# CNN Visulization","a3c48a6a":"# Model Summary","6837e1ab":"# Model Accuracy","b8dd8728":"Print the classes","e91d044e":"Transform Image Labels uisng [Scikit Learn](http:\/\/scikit-learn.org\/)'s LabelBinarizer"}}