{"cell_type":{"46523958":"code","824c1b0e":"code","ac3e27a8":"code","2535e546":"code","d4de1f94":"code","1015f5be":"code","33cbc616":"code","00e8c326":"code","905d00b7":"code","0f0c8868":"code","7688c87b":"code","2469430d":"code","21e9c0da":"code","8da272e0":"code","8d54bfb4":"code","9b854f46":"code","a7640f5e":"code","b09a95fd":"code","2e272bfa":"code","cce8d6d1":"code","99dd95a7":"code","e39d0e07":"code","af20f44c":"code","fbe4eb47":"code","6ea30fd1":"code","f2097dad":"code","75a7bd85":"code","8e8d4171":"markdown","6284703b":"markdown","704dc814":"markdown","8f4a223d":"markdown","64591878":"markdown","88e44a18":"markdown","ed4eb1b6":"markdown","77713a99":"markdown","3a4b62a5":"markdown","fd0adcbc":"markdown","79fddd25":"markdown","844888c4":"markdown","cc9f5e07":"markdown","77919985":"markdown","4aa514f9":"markdown","1655b8eb":"markdown","e31bea62":"markdown","7052cdee":"markdown","9f090200":"markdown","dbda1403":"markdown","b6758e1f":"markdown"},"source":{"46523958":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","824c1b0e":"import warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport pandas as pd\n\nfrom plotly import __version__\nprint(__version__) # need 1.9.0 or greater\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly import graph_objs as go\nimport requests\nimport pandas as pd\n\ninit_notebook_mode(connected = True)\n\ndef plotly_df(df, title = ''):\n    data = []\n    \n    for column in df.columns:\n        trace = go.Scatter(\n            x = df.index,\n            y = df[column],\n            mode = 'lines',\n            name = column\n        )\n        data.append(trace)\n    \n    layout = dict(title = title)\n    fig = dict(data = data, layout = layout)\n    iplot(fig, show_link=False)\n    \n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport statsmodels.api as sm","ac3e27a8":"habr_df = pd.read_csv('\/kaggle\/input\/howpop\/howpop_train.csv')","2535e546":"habr_df.head()","d4de1f94":"habr_df['published'] = pd.to_datetime(habr_df.published)\nhabr_df = habr_df[['published', 'url']]\nhabr_df = habr_df.drop_duplicates()","1015f5be":"habr_df.head()","33cbc616":"aggr_habr_df = habr_df.groupby('published')[['url']].count()\naggr_habr_df.columns = ['posts']","00e8c326":"aggr_habr_df.head()","905d00b7":"aggr_habr_df.posts.value_counts()","0f0c8868":"aggr_habr_df = aggr_habr_df.resample('D').apply(sum)\nplotly_df(aggr_habr_df.resample('W').apply(sum), \n          title = '\u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u0442\u044b \u043d\u0430 \u0425\u0430\u0431\u0440\u0430\u0445\u0430\u0431\u0440\u0435')","7688c87b":"# !pip install pystan\n# !pip install fbprophet\nfrom fbprophet import Prophet","2469430d":"predictions = 30\n\ndf = aggr_habr_df.reset_index()\ndf.columns = ['ds', 'y']\ndf.tail()","21e9c0da":"train_df = df[:-predictions]","8da272e0":"m = Prophet()\nm.fit(train_df)","8d54bfb4":"future = m.make_future_dataframe(periods=30)\nfuture.tail()","9b854f46":"forecast = m.predict(future)\nforecast.tail()","a7640f5e":"print(', '.join(forecast.columns))","b09a95fd":"m.plot(forecast)","2e272bfa":"m.plot_components(forecast)","cce8d6d1":"cmp_df = forecast.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']].join(df.set_index('ds'))","99dd95a7":"cmp_df.head()","e39d0e07":"import numpy as np\ncmp_df['e'] = cmp_df['y'] - cmp_df['yhat']\ncmp_df['p'] = 100*cmp_df['e']\/cmp_df['y']\nnp.mean(abs(cmp_df[-predictions:]['p'])), np.mean(abs(cmp_df[-predictions:]['e']))","af20f44c":"def invboxcox(y, lmbda):\n    if lmbda == 0:\n        return(np.exp(y))\n    else:\n        return(np.exp(np.log(lmbda * y + 1) \/ lmbda))","fbe4eb47":"train_df2 = train_df.copy().fillna(14)\ntrain_df2 = train_df2.set_index('ds')\ntrain_df2.y = train_df2.y.apply(lambda x: 1 if x==0 else x)\ntrain_df2['y'], lmbda_prophet = stats.boxcox(train_df2['y'])","6ea30fd1":"train_df2.reset_index(inplace=True)\n\nm2 = Prophet()\nm2.fit(train_df2)\nfuture2 = m2.make_future_dataframe(periods=30)\n\nforecast2 = m2.predict(future2)\nforecast2['yhat'] = invboxcox(forecast2.yhat, lmbda_prophet)\nforecast2['yhat_lower'] = invboxcox(forecast2.yhat_lower, lmbda_prophet)\nforecast2['yhat_upper'] = invboxcox(forecast2.yhat_upper, lmbda_prophet)\n\ncmp_df2 = forecast2.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']].join(df.set_index('ds'))\n\ncmp_df2['e'] = cmp_df2['y'] - cmp_df2['yhat']\ncmp_df2['p'] = 100*cmp_df2['e']\/cmp_df2['y']\nnp.mean(abs(cmp_df2[-predictions:]['p'])), np.mean(abs(cmp_df2[-predictions:]['e']))","f2097dad":"def show_forecast(cmp_df, num_predictions, num_values):\n    upper_bound = go.Scatter(\n        name='Upper Bound',\n        x=cmp_df.tail(num_predictions).index,\n        y=cmp_df.tail(num_predictions).yhat_upper,\n        marker=dict(color=\"green\"),)\n\n\n    forecast = go.Scatter(\n        name='Prediction',\n        x=cmp_df.tail(predictions).index,\n        y=cmp_df.tail(predictions).yhat,\n        mode='lines',\n        line=dict(color='blue'),\n    )\n\n    lower_bound = go.Scatter(\n        name='Lower Bound',\n        x=cmp_df.tail(num_predictions).index,\n        y=cmp_df.tail(num_predictions).yhat_lower,\n        marker=dict(color=\"yellow\"),)\n\n    fact = go.Scatter(\n        name='Fact',\n        x=cmp_df.tail(num_values).index,\n        y=cmp_df.tail(num_values).y,\n        marker=dict(color=\"red\"),\n        mode='lines',\n    )\n\n \n    data = [lower_bound, upper_bound, forecast, fact]\n\n    layout = go.Layout(\n        yaxis=dict(title='\u041f\u043e\u0441\u0442\u044b'),\n        title='\u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u0442\u044b \u043d\u0430 \u0425\u0430\u0431\u0440\u0430\u0445\u0430\u0431\u0440\u0435',\n        showlegend = False)\n\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, show_link=False)","75a7bd85":"show_forecast(cmp_df, predictions, 200)","8e8d4171":"\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b (\u0447\u0435\u0440\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438)","6284703b":"## \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 Prophet","704dc814":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","8f4a223d":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0440\u043e\u0432\u043d\u044f\u0442\u044c \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0442\u0441\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e\n\nY(x) = (Z(x)\u03bb - 1)\/\u03bb","64591878":"\u0412\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0442\u0440\u0435\u043d\u0434\u0430\u0445 \u0438 \u0432\u0435\u0440\u0445\u043d\u0438\u0445\/\u043d\u0438\u0436\u043d\u0438\u0445 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","88e44a18":"\u041e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u0432 \u0442\u0435\u0440\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440, \u0432\u0441\u0435 \u043a\u0440\u043e\u043c\u0435 \u0434\u043d\u0435\u0439, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437","ed4eb1b6":"resample - \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u043c\u0443 \u0442\u0438\u043f \"\u0414\u0430\u0442\u0430\/\u0432\u0440\u0435\u043c\u044f\". \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e \u043a\u0430\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c: D - \u0434\u0435\u043d\u044c, W - \u043d\u0435\u0434\u0435\u043b\u044f, 3D - 3 \u0434\u043d\u044f","77713a99":"\u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u0432\u0441\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","3a4b62a5":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","fd0adcbc":"\u0415\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","79fddd25":"# Facebook prophet\n\nhttps:\/\/facebook.github.io\/prophet\/docs\/installation.html#python","844888c4":"\u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442: \u0442\u0440\u0435\u043d\u0434 \u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0437\u043e\u043d\u043d\u043e\u0441\u0442\u0438 (\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0438 \u0433\u043e\u0434\u043e\u0432\u0430\u044f)","cc9f5e07":"\u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437","77919985":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 Prophet","4aa514f9":"stats.boxcox - \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u03bb, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u0442\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438 \u03bb","1655b8eb":"## \u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441 BoxCox","e31bea62":"\u0417\u0430\u0434\u0430\u0435\u043c \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430","7052cdee":"\u0413\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0434\u0430\u0442\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438","9f090200":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b: url, published","dbda1403":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0414\u0430\u043d\u043d\u044b\u0435 [\u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f](https:\/\/inclass.kaggle.com\/c\/howpop-habrahabr-favs-lognorm) \u043f\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0443 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u0441\u0442\u0430\u0442\u044c\u0438 \u043d\u0430 \u0425\u0430\u0431\u0440\u0430\u0445\u0430\u0431\u0440\u0435.","b6758e1f":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438, \u043d\u0430\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c"}}