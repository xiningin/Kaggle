{"cell_type":{"1bf972e2":"code","218f2bda":"code","75ea0fb9":"code","5537d9d9":"code","c9eba5ff":"code","6ccd14f0":"code","f29c1d2c":"code","057aca3b":"code","4a3c83c8":"code","9921f397":"code","d2bc3751":"code","5e30038a":"code","7db77578":"code","879a0990":"code","9015bcf4":"code","2cbf6cbb":"code","a2fe1b17":"code","93383868":"code","b783f6ed":"code","e77658e4":"code","fec17aa2":"code","e9f1a222":"code","56b4a11b":"code","ac7e7809":"code","811b5a1d":"code","30c7c672":"code","4d298a47":"markdown","f4527cfe":"markdown","8601bb74":"markdown","e2adda3a":"markdown","24cd3b4d":"markdown","eecc3c79":"markdown"},"source":{"1bf972e2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nplt.style.use('ggplot')","218f2bda":"test = pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\nIds = test.Id\ntest.head()","75ea0fb9":"train = pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\ntrain.head()","5537d9d9":"test.describe()","c9eba5ff":"train.describe()","6ccd14f0":"SP = train.SalePrice\nplt.subplots(1,1,figsize = (12,9))\nsns.histplot(SP)\nplt.title(\"Sale Prices\", fontsize = 16)","f29c1d2c":"for i in train.columns:\n    if train[i].isnull().sum() > 300:\n        print(i, \"has over 300 NaN\")","057aca3b":"for i in test.columns:\n    if test[i].isnull().sum() > 300:\n        print(i, \"has over 300 NaN\")","4a3c83c8":"NaN_pool = []\nfor i in train.columns:\n    if train[i].isnull().sum() > 300:\n        NaN_pool.append(i)\n        \nfor i in test.columns:\n    if test[i].isnull().sum() > 300:\n        NaN_pool.append(i)\n        \nNaN_pool","9921f397":"train_cleaned = train.drop(list(set(NaN_pool)), axis = 1)\ntest_cleaned = test.drop(list(set(NaN_pool)), axis = 1)\n\ntrain_cleaned = train_cleaned.drop([\"Id\"], axis = 1)","d2bc3751":"for i in train_cleaned.columns:\n    if train[i].isnull().values.any():\n        print(i, \"has NaN\")","5e30038a":"def clean_NaN(df, val):\n    df[val] = df.fillna(value = {val:df[val].mode()})","7db77578":"for i in train_cleaned.columns:\n    if train[i].isnull().sum() != 0:\n        clean_NaN(train_cleaned, i)\n\nfor i in test_cleaned.columns:\n    if test[i].isnull().sum() != 0:\n        clean_NaN(test_cleaned, i)","879a0990":"for i in train_cleaned.columns:\n    if train_cleaned[i].isnull().values.any():\n        print(i, \"has NaN\")","9015bcf4":"for i in test_cleaned.columns:\n    if test_cleaned[i].isnull().values.any():\n        print(i, \"has NaN\")","2cbf6cbb":"train_cleaned.info()","a2fe1b17":"from sklearn.preprocessing import LabelEncoder \n\ndef encode(df):\n    for i in df.columns:\n        if df[i].dtype == 'object':\n            le = LabelEncoder()\n            le.fit(list(df[i].values))\n            df[i] = le.transform(list(df[i].values))\n            \nencode(train_cleaned)\nencode(test_cleaned)","93383868":"train_cleaned.info()","b783f6ed":"X = train_cleaned.drop('SalePrice', axis = 1)\nY = train_cleaned.SalePrice","e77658e4":"for i in X.columns:\n    if X[i].isnull().values.any():\n        print(i, \"NAN\")","fec17aa2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X,Y, random_state = 60)","e9f1a222":"from sklearn.ensemble import RandomForestRegressor\n\nmodel_rf = RandomForestRegressor(n_estimators=500, oob_score=True, random_state=100)\nmodel_rf.fit(x_train, y_train)\n\nprediction_train = model_rf.predict(x_train)\nprediction_test = model_rf.predict(x_test)","56b4a11b":"test_cleaned = test_cleaned.drop(['Id'], axis = 1)","ac7e7809":"predictions = model_rf.predict(test_cleaned)","811b5a1d":"submission = pd.DataFrame({'Id' : Ids, 'SalePrice' : list(predictions)})\nsubmission","30c7c672":"submission.to_csv('submission.csv', index = False)","4d298a47":"We are left with no NaN values in our dataframes\n\nNext we must change all string types to machine-readable datatypes","f4527cfe":"Filling each NaN with the mean value for the column","8601bb74":"We probably want to remove those columns with too many NaN values from our data pool","e2adda3a":"### Cleaning Data","24cd3b4d":"### Importing and Viewing training and test data","eecc3c79":"### Building our random forest model"}}