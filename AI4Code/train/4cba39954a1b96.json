{"cell_type":{"3b269fb3":"code","9563e76c":"code","8efae8df":"code","ed20887d":"code","7d2d352f":"code","1235a9ef":"code","d41212ab":"code","4db62787":"code","de29703c":"code","c5aedfc5":"code","03b6f1b7":"code","8d1c89d0":"code","45b8e8d7":"code","39bb3862":"code","db5ee128":"code","3a7876f6":"code","32de54d2":"markdown","1dcb9d89":"markdown","a7d0ba76":"markdown","84a91582":"markdown","9d6e7a6c":"markdown","a9fa881a":"markdown","65f61d89":"markdown","b6d00df4":"markdown","8abe7792":"markdown","60ad7e70":"markdown","6dfbcaf6":"markdown","d1d30bdf":"markdown","09e74eab":"markdown","a07fef18":"markdown"},"source":{"3b269fb3":"#import library\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import  LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\n","9563e76c":"\nimport time","8efae8df":"# Import data\ndata = pd.read_csv('..\/input\/for-train\/ML-Train.csv',index_col=\"Id\")","ed20887d":"x = data.drop('Cover_Type',axis=1)\ny = data['Cover_Type']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3,random_state=42)","7d2d352f":"#Standardization\nscaler = StandardScaler()\nSTDTrain = scaler.fit_transform(x_train)\nSTDTest = scaler.fit_transform(x_test)","1235a9ef":"start_time = time.time()","d41212ab":"#Training\n#Decision tree\nTre = DecisionTreeClassifier()\nTre = Tre.fit(STDTrain, y_train)","4db62787":"#Training\n#LogisticRegression\npoly = PolynomialFeatures(2)\nSTDTrain_2 = poly.fit_transform(STDTrain)\nSTDTest_2 = poly.fit_transform(STDTest)\nPoly = LogisticRegression()\nPoly = Poly.fit(STDTrain_2,y_train)","de29703c":"#Training\n#Neural network models\nNN = MLPClassifier(solver='lbfgs', alpha=5e-3,\n                   hidden_layer_sizes=(10, 10, 10), random_state=42)\nNN.fit(STDTrain,y_train)\n","c5aedfc5":"#Test\n#Decision tree\nTPre = Tre.predict(STDTest)\n#LogisticRegression\nLPre = Poly.predict(STDTest_2)\n#Neural network models\nNPre = NN.predict(STDTest)","03b6f1b7":"finish_time = time.time()\ntime = finish_time-start_time","8d1c89d0":"#Accuracy\nprint ('Modelling process')\nprint('Accuracy decision tress = ', metrics.accuracy_score(y_test,TPre))\nprint('Accuracy logisticRegression = ', metrics.accuracy_score(y_test,LPre))\nprint('Accuracy neural network models = ', metrics.accuracy_score(y_test,NPre))\nprint('Training time', time)","45b8e8d7":"Tdata = pd.read_csv('..\/input\/fortest\/ML-Test.csv',index_col=\"Id\")","39bb3862":"#Standardization\nNorm = StandardScaler()\nSTDTdata = Norm.fit_transform(Tdata)\nSTDTdata_2 = poly.fit_transform(STDTdata)\n","db5ee128":"#Prediction\nDecition_T = Tre.predict(STDTdata)\nNural = NN.predict(STDTdata)\nLogP = Poly.predict(STDTdata_2)","3a7876f6":"print('Prediction by actual data')\nprint('Predict by Decision tree =',Decition_T)\nprint('Predict by Log-regression (Poly) =',LogP)\nprint('Predict by Neural network =',Nural)","32de54d2":"Standardization data","1dcb9d89":"Prediction by model","a7d0ba76":"import library \n1.import pandas for read train and test data (CSV type)\n2.import warning for ignore system warning code\n3.import sklearn for \n 3.1 model_selection for split train data into subset (train and test)\n 3.2 tree for using decision tree algorithm\n 3.3 linear_model for using logistics algorithm\n 3.4 preprocessing for standardized data \n 3.5 neural_network for using neural networks ","84a91582":"Stop time count for train and test process","9d6e7a6c":"import time for monitoring training time","a9fa881a":"Start time count for training and testing model process","65f61d89":"Show prediction value(Cover type)","b6d00df4":"![](https:\/\/www.roomandboard.com\/m\/catalog\/dining-and-kitchen\/tables\/adams-tables)","8abe7792":"Measure accuracy of model using metrics.accuracy_score","60ad7e70":"Standardization data using sklearn preprocessing","6dfbcaf6":"Selected input (x) and target (y)\nSplit data for train and test process (70%:30%)","d1d30bdf":"The model included 3 algorithms to predict clover type\n    1. Decision tress\n    2. LogisticRegression with polynomial feature\n    3. Neural network models (backpropagation)","09e74eab":"Import data","a07fef18":"Import test dataset"}}