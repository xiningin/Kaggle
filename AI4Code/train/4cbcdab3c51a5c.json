{"cell_type":{"527bed0e":"code","9153d7a7":"code","b63243ce":"code","fb1ffa33":"code","38e4f9a2":"code","635a3cf2":"code","3b55d2a7":"code","af27b771":"code","e0063d60":"code","0355c6ab":"code","a9496ea2":"code","add8aa91":"code","70b1b033":"code","03b44f12":"code","768aee4b":"code","41c46c70":"code","5d6dc932":"code","b46696e9":"code","21a0b12c":"code","2e5efb59":"code","9203bd79":"code","14618bb7":"code","9beb4b49":"code","73042145":"code","7743217b":"code","ba1cbc8a":"code","4a24c54f":"code","f58fc389":"code","dd33a05c":"code","5577cb46":"code","0f0a60b7":"code","73740d35":"code","1f7464b9":"code","bfba3a5b":"markdown","a227b825":"markdown","f45d68dc":"markdown","0a92ef6a":"markdown","816828be":"markdown","660f1b42":"markdown","99dd2f64":"markdown","a29c50f5":"markdown","95fd6af0":"markdown","db864540":"markdown","becc906d":"markdown","a63f6121":"markdown","3855375f":"markdown","0eb6facd":"markdown","6861f51f":"markdown","1ff2026a":"markdown","ccb2b10b":"markdown","82562419":"markdown","c1cd1e38":"markdown","9565f1c5":"markdown"},"source":{"527bed0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9153d7a7":"data = pd.read_csv(\"..\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv\")\ndata.head(10)","b63243ce":"data.info()","fb1ffa33":"data.isnull().sum()","38e4f9a2":"data.drop(\"title\", axis = 1, inplace = True)\ndata.info()","635a3cf2":"x_train = data.iloc[:, :-1]\ny_train = data.iloc[:, -1]","3b55d2a7":"x_train","af27b771":"y_train","e0063d60":"data_test = pd.read_csv(\"..\/input\/video-games-rating-by-esrb\/test_esrb.csv\")\ndata_test.drop(\"title\", inplace = True, axis = 1)\nx_test = data_test.iloc[:, :-1]\ny_test = data_test.iloc[:, -1]","0355c6ab":"x_test","a9496ea2":"y_test","add8aa91":"import matplotlib.pyplot as plt\nimport seaborn as sns","70b1b033":"plt.figure(figsize = (20, 20))\nsns.heatmap(x_train.corr(), annot = True)\nplt.show()","03b44f12":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score","768aee4b":"state = 0","41c46c70":"tester = {\n    \"Logistic Regression\": {\n        \"model\": LogisticRegression(random_state = state, multi_class = \"auto\"),\n        \"params\": {\n            \"C\": [0.1, 0.01, 0.001, 0.0001, 1, 10],\n            \"solver\": [\"liblinear\", \"sag\", \"lbfgs\", \"newton-cg\", \"sag\", \"saga\"]\n        }\n    },\n    \n    \"K Nearest Neighbors\": {\n        \"model\": KNeighborsClassifier(),\n        \"params\":{\n            \"n_neighbors\": list(range(5, 15))\n        }\n    },\n    \n    \"Random Forest Classifier\": {\n        \"model\": RandomForestClassifier(random_state = state),\n        \"params\": {\n            \"n_estimators\": [1, 5, 10, 50, 100, 200, 150, 125],\n            \"criterion\": [\"gini\", \"entropy\"]\n        }\n    },\n    \n    \"SVM\": {\n        \"model\": SVC(random_state = state),\n        \"params\": {\n            \"degree\": [\"linear\", \"poly\", \"rbf\", \"sigmoid\"],\n            \"C\": [0.1, 0.01, 0.001, 0.0001, 1, 10],\n            \"degree\": list(range(3, 10))\n        }\n    },\n    \n    \"Naive Bayes\":{\n        \"model\": GaussianNB(),\n        \"params\": dict()\n    }\n}","5d6dc932":"import warnings\nwarnings.filterwarnings(\"ignore\")","b46696e9":"scores = list()\n\nfor name, model in tester.items():\n    clf = GridSearchCV(model[\"model\"], model[\"params\"], cv = 10, return_train_score = False)\n    clf.fit(x_train, y_train)\n    test = {\n        \"Model\": name,\n        \"Best Score\": clf.best_score_,\n        \"Best Prams\": clf.best_params_\n    }\n    \n    clf = clf.best_estimator_\n    \n    test[\"Test Score\"] = accuracy_score(clf.predict(x_test), y_test)\n    scores.append(test)\n    print(f\"{name} trained\")","21a0b12c":"# No scaling\nfor i in scores:\n    print(i)","2e5efb59":"from sklearn.preprocessing import StandardScaler","9203bd79":"scaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)","14618bb7":"scores = list()\n\nfor name, model in tester.items():\n    clf = GridSearchCV(model[\"model\"], model[\"params\"], cv = 10, return_train_score = False)\n    clf.fit(x_train_scaled, y_train)\n    test = {\n        \"Model\": name,\n        \"Best Score\": clf.best_score_,\n        \"Best Prams\": clf.best_params_\n    }\n    \n    clf = clf.best_estimator_\n    \n    test[\"Test Score\"] = accuracy_score(clf.predict(x_test_scaled), y_test)\n    scores.append(test)\n    print(f\"{name} trained\")","9beb4b49":"# with scaling\nfor i in scores:\n    print(i)","73042145":"from sklearn.decomposition import PCA","7743217b":"pca = PCA(n_components = 10)\nx_pca = pca.fit_transform(x_train_scaled)\npca.explained_variance_ratio_","ba1cbc8a":"clf = RandomForestClassifier()\nclf.fit(x_pca, y_train)\n\nx_pca2 = pca.transform(x_test_scaled)\ny_pred = clf.predict(x_pca2)\naccuracy_score(y_pred, y_test)","4a24c54f":"scores = list()\n\nfor i in range(1, 32):\n    pca = PCA(n_components = i)\n    x_pca = pca.fit_transform(x_train_scaled)\n    \n    clf = GridSearchCV(RandomForestClassifier(random_state = state), {\n        \"n_estimators\": [1, 5, 10, 50, 100, 200, 150, 125],\n        \"criterion\": [\"gini\", \"entropy\"]\n    }, cv = 10, return_train_score = False)\n    clf.fit(x_pca, y_train)\n    \n    test = dict()\n    test[\"model\"] = clf.best_estimator_\n    clf = clf.best_estimator_\n\n    x_pca2 = pca.transform(x_test_scaled)\n    y_pred = clf.predict(x_pca2)\n    test[\"accuracy score\"] = accuracy_score(y_pred, y_test)\n    scores.append(test)\n    \n    print(f\"Iteration {i} over\")","f58fc389":"for i in scores:\n    print(i)","dd33a05c":"accuracies = list()\n\nfor val in scores:\n    accuracies.append(val[\"accuracy score\"])\n\nplt.plot(range(len(scores)), accuracies)\nplt.show()","5577cb46":"max_accuracy = max(accuracies)","0f0a60b7":"max_accuracy","73740d35":"for i in scores:\n    if max_accuracy == i[\"accuracy score\"]:\n        best = i","1f7464b9":"best","bfba3a5b":"# Read Data\nWe will be using a database containing information on 1895 records of distinct games with the records:<br>\n1. <b><u>Title<\/u><\/b>: String telling name of the game.<br>\n2. <b><u>Console<\/u><\/b>: Int telling the console on which the game was released. (0 = PS4 and 1 = PS4 and XBox_one).<br>\n3. <b><u>Alcohol_Reference<\/u><\/b>: Int telling whether there is reference to and\/or images of alcoholic beverages. (0 = No and 1 = Yes).<br>\n4. <b><u>Animated_Blood<\/u><\/b>: Int telling whether there are discolored and\/or unrealistic depictions of blood. (0 = No and 1 = Yes).<br>\n5. <b><u>Blood<\/u><\/b>: Int telling whether there are depictions of blood. (0 = No and 1 = Yes).<br>\n6. <b><u>BloodandGore<\/u><\/b>: Int telling whether there are depictions of blood or the mutilation of body parts. (0 = No and 1 = Yes).<br>\n7. <b><u>Cartoon_Violence<\/u><\/b>: Int telling whether there are violent actions involving cartoon-like situations and characters. May include violence where a character is unharmed after the action has been inflicted. (0 = No and 1 = Yes).<br>\n8. <b><u>Crude_Humor<\/u><\/b>: Int telling whether there are depictions or dialogue involving vulgar antics, including \"bathroom\" humor. (0 = No and 1 = Yes).<br>\n9. <b><u>Drug_Reference<\/u><\/b>: Int telling whether there are reference to and\/or images of illegal drugs (0 = No and 1 = Yes).<br>\n10. <b><u>Fantasy_Violence<\/u><\/b>: Int telling whether there are violent actions of a fantasy nature, involving human or non-human characters in situations easily distinguishable from real life. (0 = No and 1 = Yes).<br>\n11. <b><u>Intense_Violence<\/u><\/b>: Int telling whether there are graphic and realistic-looking depictions of physical conflict. May involve extreme and\/or realistic blood, gore, weapons, and depictions of human injury and death. (0 = No and 1 = Yes).<br>\n12. <b><u>Language<\/u><\/b>: Int telling whether there are moderate use of profanity.\t (0 = No and 1 = Yes).<br>\n13. <b><u>Lyrics<\/u><\/b>: Int telling whether there are references to profanity, sexuality, violence, alcohol, or drug use in music. (0 = No and 1 = Yes).<br>\n14. <b><u>Drug_Reference<\/u><\/b>: Int telling whether there are reference to and\/or images of illegal drugs (0 = No and 1 = Yes).<br>\n15. <b><u>Mature_Humor<\/u><\/b>: Int telling whether there are depictions or dialogue involving \"adult\" humor, including sexual references. (0 = No and 1 = Yes).<br>\n16. <b><u>Mild_Blood<\/u><\/b>: Int telling whether there is some blood. (0 = No and 1 = Yes).<br>\n17. <b><u>MildCartoonViolence<\/u><\/b>: Int telling whether there are some violent actions involving cartoon. (0 = No and 1 = Yes).<br>\n18. <b><u>MildFantasyViolence<\/u><\/b>: Int telling whether there are some violent actions of a fantasy nature. (0 = No and 1 = Yes).<br>\n19. <b><u>Mild_Language<\/u><\/b>: Int telling whether there are mild to moderate use of profanity. (0 = No and 1 = Yes).<br>\n20. <b><u>Mild_Lyrics<\/u><\/b>: Int telling whether there are mild References to profanity, sexuality, violence, alcohol, or drug use in music. (0 = No and 1 = Yes).<br>\n21. <b><u>MildSuggestiveThemes<\/u><\/b>: Int telling whether there are some provocative references or materials. (0 = No and 1 = Yes).<br>\n22. <b><u>Mild_Violence<\/u><\/b>: Int telling whether there are some scenes involving aggressive conflict. (0 = No and 1 = Yes).<br>\n23. <b><u>Nudity<\/u><\/b>: Int telling whether there are graphic or prolonged depictions of nudity. (0 = No and 1 = Yes).<br>\n24. <b><u>Partial_Nudity<\/u><\/b>: Int telling whether there are brief and\/or mild depictions of nudity. (0 = No and 1 = Yes).<br>\n25. <b><u>Sexual_Content<\/u><\/b>: Int telling whether there are non-explicit depictions of sexual behavior, possibly including partial nudity. (0 = No and 1 = Yes).<br>\n26. <b><u>Sexual_Themes<\/u><\/b>: Int telling whether there are references to sex or sexuality. (0 = No and 1 = Yes).<br>\n27. <b><u>Simulated_Gambling<\/u><\/b>: Int telling whether player can gamble without betting or wagering real cash or currency. (0 = No and 1 = Yes).<br>\n28. <b><u>Strong_Language<\/u><\/b>: Int telling whether there are explicit and\/or frequent use of profanity. (0 = No and 1 = Yes).<br>\n29. <b><u>StrongSexualContent<\/u><\/b>: Int telling whether there are explicit and\/or frequent depictions of sexual behavior, possibly including nudity. (0 = No and 1 = Yes).<br>\n30. <b><u>Suggestive_Themes<\/u><\/b>: Int telling whether there are provocative references or materials. (0 = No and 1 = Yes).<br>\n31. <b><u>UseofAlcohol<\/u><\/b>: Int telling whether there are depictions of the consumption of alcoholic beverages. (0 = No and 1 = Yes).<br>\n32. <b><u>UseofDrugsandAlcohol<\/u><\/b>: Int telling about whether there are depictions of the consumption of alcoholic and drugs beverages. (0 = No and 1 = Yes).<br>\n33. <b><u>Violence<\/u><\/b>: Int telling whether there are scenes involving aggressive conflict. May contain bloodless dismemberment. (0 = No and 1 = Yes).<br>\n34. <b><u>ESRB_Rating<\/u><\/b>: Tells what rating was received by this game.","a227b825":"Observations:\n1. Naive Bayes performs worst at 56%.\n2. K Nearest Neighbors is next with 81.2%.\n3. Logistic Regression is next with 81.6%.\n4. Random Forest is next with 83.8%.\n5. SVM is next with 84.2%.<br>\n\nTop two models are Random Forest and SVM, we will work upon them.","f45d68dc":"# Try The Same With Scaling\nWhile currently all features are min-max scaled, we will try again using standard scaling too see if there is any change in accuracy.","0a92ef6a":"# Import Test Data","816828be":"This is the most accurate model.","660f1b42":"# Seperate The Input And Output Featues","99dd2f64":"No significant correlation can be seen.","a29c50f5":"# Visualise Correlation","95fd6af0":"We will be using a dataset containing data on 1895 video games and their contents and we will attempt to build a model that will predict the ESRB rating for a new game such as to get the desired rating for our target audience.\n\nESRB (Entertainment Software Rating Board) is a self regulatory orgainisation aimed at providing age and content rating for video games in United States and Canada.\n\n# Import Required Libraries","db864540":"No null value, so we can move on.\n\n# Remove Unnecessary Features\n\nTitle would likely have no hand in the classifiation, so that will be removed. Console might be a factor as standards of classification could be different based on platform of deployment.","becc906d":"We will predict the rating into one of these 7 categories:<br>\n1. <b>RP<\/b>:  Rating Pending\n1. <b>EC<\/b>:  Early Childhood\n1. <b>E<\/b>:  Everyone\n1. <b>E 10+<\/b>:  Everyone 10+\n1. <b>T<\/b>:  Teen\n1. <b>M<\/b>:  Mature\n1. <b>A<\/b>:  Adult","a63f6121":"We tried to optimise SVM using GridSearchCV and the lowest possible settings gave best accuracy and scaling further decrease it, we will try to see if RandomForest can be optimised using PCA.","3855375f":"# Final Model","0eb6facd":"# Remove Null Values","6861f51f":"Here accuracies become:\n1. Naive Bayes 55.4%.\n2. K Nearest Neighbors 80.4%.\n3. Logistic Regression 81.4%.\n4. SVM with 83.6%.\n5. Random Forest with 83.8%.<br> ","1ff2026a":"Logistic Regression training causes warning which they must be ignored.","ccb2b10b":"# Future Prospect\nThis model can be used by game designers to judge what elements must be incorporated in a game such as to get the desired rating to reach their target audience as well as in testing by game publishers.","82562419":"Dictionary contains models along with their accuracy_scores. Highest scoring model will be the final model.","c1cd1e38":"# Improving The Model\nWe will try using PCA to improve accuracy.","9565f1c5":"# Create Model\nWe will try multiple possible models and see which gives best possible accuracy on testing data."}}