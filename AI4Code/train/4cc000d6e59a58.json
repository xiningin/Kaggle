{"cell_type":{"0efcd08f":"code","614790c6":"code","9ec77ba4":"code","06c45748":"code","7deba52c":"code","e1a30dde":"code","18d209d7":"code","0bd88e22":"code","1c89ec5d":"code","c9035226":"code","c8faca1e":"code","b6c419a8":"code","58c2088c":"code","05c5934e":"code","a55a53ee":"code","b43ab8ed":"code","cdbdfe4c":"code","f3b22f2b":"code","72b684d9":"code","dacaae20":"code","c93bc709":"code","a210c45d":"code","6bdd7b1b":"markdown","4b97cccb":"markdown","dd7c63d4":"markdown","e4cf67e4":"markdown","5de6f812":"markdown"},"source":{"0efcd08f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport missingno as msn\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","614790c6":"# from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\n# from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n# from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\n# from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\n# from sklearn.model_selection import KFold, cross_val_score, train_test_split\n# from sklearn.metrics import make_scorer, accuracy_score\n# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.model_selection import cross_val_score\n# from sklearn.metrics import classification_report\n# from sklearn.model_selection import GridSearchCV\n# from sklearn.preprocessing import StandardScaler\n# from sklearn.metrics import mean_squared_error\n# from sklearn.preprocessing import RobustScaler\n# from sklearn.metrics import confusion_matrix\n# from sklearn.kernel_ridge import KernelRidge\n# from sklearn.pipeline import make_pipeline\n# from sklearn.metrics import accuracy_score\n# from sklearn.pipeline import Pipeline\n# import matplotlib.pyplot as plt\nfrom scipy.stats import skew\nimport scipy.stats as stats\nimport lightgbm as lgb\nimport seaborn as sns\nimport xgboost as xgb\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport json\nimport sys\nimport csv\nimport os","9ec77ba4":"print('matplotlib: {}'.format(matplotlib.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))\nprint('scipy: {}'.format(scipy.__version__))\nprint('seaborn: {}'.format(sns.__version__))\nprint('pandas: {}'.format(pd.__version__))\nprint('numpy: {}'.format(np.__version__))\nprint('Python: {}'.format(sys.version))","06c45748":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.head()\n","7deba52c":"test.head()","e1a30dde":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(25, 15))\nsns.heatmap(corrmat, vmax=.8, annot=True,annot_kws={\"size\": 8});","18d209d7":"corrmat = train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[top_corr_features].corr(),annot=True,cmap=\"coolwarm\")","0bd88e22":"sns.barplot(train.OverallQual,train.SalePrice)","1c89ec5d":"sns.barplot(train.GarageCars,train.SalePrice)","c9035226":"sns.barplot(train.FullBath,train.SalePrice)","c8faca1e":"print(train['SalePrice'].skew()) \nprint(train['SalePrice'].kurt())","b6c419a8":"null_columns=train.columns[train.isnull().any()]\nnullo = train[null_columns].isnull().sum()\nnullo","58c2088c":"train['LotFrontage'].corr(train['LotArea'])","05c5934e":"basement_cols=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2']\ntrain[basement_cols][train['BsmtQual'].isnull()==True]","a55a53ee":"for col in basement_cols:\n    if 'FinSF'not in col:\n        train[col] = train[col].fillna('None')","b43ab8ed":"garage_cols=['GarageType','GarageQual','GarageCond','GarageYrBlt','GarageFinish','GarageCars','GarageArea']\ntrain[garage_cols][train['GarageType'].isnull()==True]","cdbdfe4c":"for col in garage_cols:\n    if train[col].dtype==np.object:\n        train[col] = train[col].fillna('None')\n    else:\n        train[col] = train[col].fillna(0)","f3b22f2b":"train[\"MiscFeature\"] = train[\"MiscFeature\"].fillna('None')\ntrain[\"Fence\"] = train[\"Fence\"].fillna('None')\ntrain[\"Alley\"] = train[\"Alley\"].fillna('None')\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna('None')\ntrain[\"PoolQC\"] = train[\"PoolQC\"].fillna('None')\ntrain[\"LotFrontage\"] = train[\"LotFrontage\"].fillna('None')\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna('None')\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna('None')\ntrain[\"Electrical\"] = train[\"Electrical\"].fillna('None')\n","72b684d9":"train[null_columns].isnull().sum()","dacaae20":"plt.scatter(train[\"1stFlrSF\"],train.SalePrice, color='yellow')\nplt.title(\"Sale Price wrt 1st floor\")\nplt.ylabel('Sale Price (in dollars)')\nplt.xlabel(\"1st Floor in square feet\");","c93bc709":"train['SalePriceSF'] = train['SalePrice']\/train['GrLivArea']\nplt.hist(train['SalePriceSF'], bins=15,color=\"gold\")\nplt.title(\"Sale Price per Square Foot\")\nplt.ylabel('Number of Sales')\nplt.xlabel('Price per square feet');","a210c45d":"print(\"$\",train.SalePriceSF.mean())","6bdd7b1b":"**Latest version : **","4b97cccb":"# > Checking correlation greater than 0.5 \"SalePrice\"","dd7c63d4":"# Data Collection","e4cf67e4":"# **Importing required libraries** My Snippet ","5de6f812":"# Correlation between 'SalePrice & other all features\""}}