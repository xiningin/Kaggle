{"cell_type":{"e5946c43":"code","7267eb24":"code","4acc36f7":"code","8b60fbc2":"code","6c0609c7":"code","2d8f11ff":"code","7889ae1d":"code","6aaf96b1":"code","5f77c549":"code","116c21df":"code","2b6aeee9":"code","29d8e5df":"code","684070b8":"code","f99913b6":"code","5136dd05":"code","06fc530b":"code","9c5a4cfa":"code","995ccf63":"code","f6ef9dc6":"code","c4c3ade0":"code","617632ca":"code","93eb78ed":"code","a0f17e00":"code","64751e67":"code","cd2215ae":"code","75073656":"code","9020b472":"code","c6789bbb":"code","bf9c2a9e":"code","3fb84668":"code","23b881f9":"code","cbdca39b":"code","01fa5643":"code","051b32a1":"code","352b48f2":"code","1fc63c99":"code","2559c88a":"code","5f81427e":"code","257f7cb0":"code","16475961":"markdown","f7c53e59":"markdown","c835cddb":"markdown","69d81dad":"markdown","fac8e987":"markdown","705416a0":"markdown","b59275c3":"markdown","86c6c79a":"markdown","26cefa77":"markdown","8fd8d9b4":"markdown","30a2b19c":"markdown"},"source":{"e5946c43":"import os\nimport pandas as pd \nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport numpy as np\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 14, 8\nRANDOM_SEED = 42\nLABELS = [\"Normal\", \"Fraud\"]","7267eb24":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4acc36f7":"\ntrain = pd.read_csv('\/kaggle\/input\/credit-card-fraud-detection\/credit_train.csv', sep=',')\ntrain.dataframeName = 'train.csv'\n","8b60fbc2":"\ntest = pd.read_csv('\/kaggle\/input\/credit-card-fraud-detection\/credit_test.csv', sep=',')\ntest.dataframeName = 'test.csv'","6c0609c7":"train.shape","2d8f11ff":"test.shape","7889ae1d":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","6aaf96b1":"def plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n\n","5f77c549":"\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n\n","116c21df":"plotPerColumnDistribution(train, 10, 5)","2b6aeee9":"plotCorrelationMatrix(train, 8)","29d8e5df":"train.loc[train['Class'] == \"'0'\", 'Class'] = 0\ntrain.loc[train['Class'] == \"'1'\", 'Class'] = 1\n\ntest.loc[train['Class'] == \"'0'\", 'Class'] = 0\ntest.loc[train['Class'] == \"'1'\", 'Class'] = 1","684070b8":"train","f99913b6":"test","5136dd05":"train.info()","06fc530b":"\ncolumns = train.columns.tolist()\n \ncolumns = [c for c in columns if c not in [\"Class\"]]\n\ntarget = [\"Class\"]\n\nstate = np.random.RandomState(42)\nX = train[columns].values\nY = train[target].values\n\nprint(X.shape)\nprint(Y.shape)","9c5a4cfa":"fraud = train[train['Class']==1]\n\nnormal = train[train['Class']==0]","995ccf63":"len(X)","f6ef9dc6":"len(Y)","c4c3ade0":"from imblearn.over_sampling import RandomOverSampler\nfrom sklearn.datasets import make_classification\nX, y = make_classification(n_classes=2,n_samples=37000)","617632ca":"X.shape","93eb78ed":"ros = RandomOverSampler(random_state=18)\nX_res, y_res = ros.fit_resample(X, y)","a0f17e00":"X_res.shape,y_res.shape\n(unique, counts) = np.unique(y_res, return_counts=True)\nfrequencies = np.asarray((unique, counts)).T\nfrequencies","64751e67":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_res,y_res,train_size=0.83)","cd2215ae":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","75073656":"model.predict_proba(X_test)","9020b472":"model.score(X_test,y_test)","c6789bbb":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics \n\nclf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\n","bf9c2a9e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","3fb84668":"from sklearn.ensemble import RandomForestClassifier\n\n\nclf=RandomForestClassifier(n_estimators=100)\n\n\nclf.fit(X_train,y_train)\n","23b881f9":"y_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","cbdca39b":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X_train)","01fa5643":"print(kmeans.cluster_centers_)","051b32a1":"y_pred=kmeans.labels_","352b48f2":"print(\"Accuracy:\",metrics.accuracy_score(y_train, y_pred))","1fc63c99":"from sklearn.mixture import GaussianMixture\ngm = GaussianMixture(n_components=2, random_state=0).fit(X_train)","2559c88a":"gm.means_","5f81427e":"y_pred=gm.predict(X_train)","257f7cb0":"print(\"Accuracy:\",metrics.accuracy_score(y_train, y_pred))","16475961":"# **Load Data**","f7c53e59":"# Random Forest","c835cddb":"# Decision Tree","69d81dad":"# Gaussian Mixture","fac8e987":"# Logistic Regression","705416a0":"# K mean clustering","b59275c3":"\n**Problem Definition: Credit Card Fraud Detection**\n\nWe have a  dataset in CSV format. \nThe data set contains 2 lakhh+ record train instances and 56 thousand test instance\nThere are 31 input features, labeled V1 to V28 and Amount .\n\nThe target variable is labeled Class.\n","86c6c79a":"# **Functions for data visualization**","26cefa77":"# **Train data**","8fd8d9b4":"  # Chanpreet Singh\n  # AM.EN.U4CSE18401","30a2b19c":"# Content \nThe datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise."}}