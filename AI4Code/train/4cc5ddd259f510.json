{"cell_type":{"19c92dfd":"code","0555f2ae":"code","69da6be0":"code","c277f964":"code","3e8f571f":"code","2a70b1fd":"code","20eb3928":"code","13b640ee":"code","98bf3bbb":"code","5ee7fbfc":"code","c546dec7":"code","8cb44d4b":"code","fa10edd2":"code","66f92b91":"code","40d7ce4c":"code","cc841eed":"code","f5983f1a":"code","32615d3e":"code","f41a3072":"code","c9b1ea27":"code","3f4d3a07":"code","cae89cc4":"code","059e8454":"code","5003f70d":"code","f3dcf027":"code","9d901f8b":"code","27d4527a":"code","7249220d":"code","85e6d710":"code","f72fcabb":"code","dd82228e":"code","5dc5629c":"code","4fe22d32":"code","78c79700":"code","8e5b61e4":"code","5a1052f3":"code","d01ebbae":"code","f47c56ba":"code","fe30d2b9":"code","f6b62304":"code","add3e7bf":"code","6a8b270b":"code","fff624a2":"code","463a0e4a":"code","f7c9d7be":"code","16ff7c84":"code","dfb0e0d7":"code","51b0944d":"code","d52ed6cb":"code","ce1d2343":"code","8427b535":"code","4e10f8ed":"code","d523783f":"code","e1b29fdd":"code","6d545f2b":"code","daeceda9":"code","3ae9104f":"code","5a7f69d8":"code","93874ffd":"code","27cfd496":"code","0c48d777":"code","0f94c77a":"code","05da81d5":"code","6740eae2":"code","e445eeb7":"code","911ea6f7":"code","e35df3a5":"code","9864bc9b":"code","1e20182c":"code","38dc015f":"code","003e1664":"code","7ae6ef22":"code","69f61c27":"code","967e2443":"code","c76b8db8":"code","82222dac":"code","e5d7f5dc":"code","a51dad47":"code","696e8347":"code","a062e647":"code","8b9f470c":"code","90391025":"code","5d607db2":"code","990e5a5c":"code","d0569333":"code","4d4c51a8":"markdown","db20449e":"markdown","7cdf339a":"markdown","b7a4e50e":"markdown","f87e624b":"markdown","39366599":"markdown","ee5b828e":"markdown","02ab7461":"markdown","5822b984":"markdown","9f469425":"markdown","20954d38":"markdown","d1152b7d":"markdown","a91a4a20":"markdown","e03a3bfa":"markdown","393086de":"markdown","228d45d8":"markdown","8c5f578c":"markdown","6b4cd04f":"markdown","0652befd":"markdown","4bf129da":"markdown","1146b0a9":"markdown","d8e11d09":"markdown","5d0b4296":"markdown"},"source":{"19c92dfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0555f2ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline\nimport warnings \nwarnings.simplefilter('ignore')\nfrom scipy import stats\nfrom scipy.stats import norm ","69da6be0":"sns.set(rc = {'figure.figsize': (12,8)})","c277f964":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3e8f571f":"train.head()","2a70b1fd":"print(train.shape)\nprint(test.shape)","20eb3928":"train.info()","13b640ee":"test.info()","98bf3bbb":"fig,(ax1,ax2) = plt.subplots(2,1 , figsize=(16,9))\nsns.heatmap(train.isnull(), yticklabels = False , ax = ax1)\nsns.heatmap(test.isnull(), yticklabels = False ,  ax = ax2)\nplt.show()","5ee7fbfc":"print('Train')\nfor i in ['Age','Cabin']:\n    print(f'Missed {i} (all) ', round(train[i].isnull().sum()\/train.shape[0] *100,2) ,'%')\n    print(f'Missed Age(male) ', round(train[train['Sex']=='male'][i].isnull().sum()\/train.shape[0] *100,2) ,'%')\n    print(f'Missed Age(female) ', round(train[train['Sex']=='female'][i].isnull().sum()\/train.shape[0] *100,2) ,'%')\n    print('*'*50)","c546dec7":"print('Test')\nfor i in ['Age','Cabin','Fare']:\n    print(f'Missed  {i} ', round(test[i].isnull().sum()\/test.shape[0] *100,2) ,'%')\n    print(f'Missed Age(male) ', round(test[train['Sex']=='male'][i].isnull().sum()\/test.shape[0] *100,2) ,'%')\n    print(f'Missed Age(female) ', round(test[test['Sex']=='female'][i].isnull().sum()\/test.shape[0] *100,2) ,'%')\n    print('*'*50)","8cb44d4b":"for i in train['Sex'].unique():\n    count_male_female = (train.loc[(train['Sex'] == i) ]['Sex'].count())\n    Survived = np.round((train.loc[(train['Sex'] == i) & (train['Survived'] == 1)]['Sex'].count() \/ count_male_female) * 100, 2)\n    print(f'All {i}: {count_male_female}')\n    print(f'Survived {i}: {Survived} %')\n    print(f'Not Survived {i}: {100 - Survived:.2f} %')\n    print('*'*50)","fa10edd2":"sns.catplot(x=\"Pclass\", y=\"Age\",\n                hue=\"Survived\", col=\"Sex\",\n                data=train, kind=\"swarm\",\n                height=5);","66f92b91":"sns.catplot(x=\"Pclass\", y=\"Fare\",\n                hue=\"Survived\", col=\"Sex\",\n                data=train, kind=\"swarm\",\n                height=5);","40d7ce4c":"df = pd.concat((train,test))","cc841eed":"df[df['Fare'].isnull()]","f5983f1a":"median_fare = df.query('(Pclass == 3) & (Embarked == \"S\")')['Fare'].median()\nprint(f'median_fare: {median_fare}')","32615d3e":"df['Fare'].fillna(median_fare, inplace = True)","f41a3072":"df.describe()['Fare']","c9b1ea27":"bins = [-np.inf, 1,20,50, np.inf]\nlabel = ['Crew','Passenger_1','Passenger_2','Passenger_3']\ndf['Fare_category'] = pd.cut(df['Fare'], bins, labels = label)","3f4d3a07":"df['Fare_category'].value_counts()","cae89cc4":"fig, (ax1,ax2) = plt.subplots(1,2, figsize = (16,5))\nfig.subplots_adjust(hspace = 0.3, wspace = 0.3)\n\nbar_1 = sns.distplot(df['Fare'], ax = ax1, fit = norm)\nbar_1.legend([f\"skew {round(df['Fare'].skew(),2)}\"])\n\nstats.probplot(df['Fare'], plot= ax2)\n\nplt.show()","059e8454":"\ndf['Fare'] = np.log(df['Fare'] +1)","5003f70d":"fig, (ax1,ax2) = plt.subplots(1,2, figsize = (16,5))\nfig.subplots_adjust(hspace = 0.3, wspace = 0.3)\n\nbar_1 = sns.distplot(df['Fare'], ax = ax1, fit = norm)\nbar_1.legend([f\"skew {round(df['Fare'].skew(),2)}\"])\nstats.probplot(df['Fare'], plot= ax2)\nax1.set_title('Train Fare', fontsize = 14)\n\nplt.show()","f3dcf027":"df['Name'] = df['Name'].str.lower()","9d901f8b":"all_name = df['Name'].unique()","27d4527a":"all_name","7249220d":"all_name_title = pd.Series(data = all_name, index = all_name, name = 'All_Name')","85e6d710":"def clean_name_for_title(x):\n    x = re.split('[^a-z]',re.sub('[.,()]+', ' ', str(x)))\n    \n    if 'mr' in x:\n        x = 'mr'\n        \n    elif 'miss' in x:\n        x = 'miss'\n        \n    elif 'mrs' in x:\n        x = 'mrs'\n        \n    elif 'master' in x:\n        x = 'master'\n        \n    elif 'don' in x:\n        x = 'don'\n        \n    elif 'rev' in x:\n        x = 'rev'\n        \n    elif 'dr' in x:\n        x = 'dr'\n        \n    elif 'mme' in x:\n        x = 'mme'\n        \n    elif 'ms' in x:\n        x = 'ms'\n        \n    elif 'major' in x:\n        x = 'major'\n        \n    elif 'dona' in x:\n        x = 'dona'\n        \n    else:\n        x = 'other'\n        \n    return x","f72fcabb":"all_name_title = all_name_title.map(clean_name_for_title)","dd82228e":"all_name_title","5dc5629c":"df['Title'] = df['Name'].map(all_name_title)","4fe22d32":"df['Title'].value_counts()","78c79700":"\ndf.loc[(df['Title'] == 'other') & (df['Sex'] == 'male'),'Title'] = 'mr'\ndf.loc[(df['Title'] == 'other') & (df['Sex'] == 'female'),'Title'] = 'mrs'\ndf.loc[df['Title'] == 'ms','Title' ] = 'mrs'\ndf.loc[df['Title'] == 'mme','Title' ] = 'mrs'\ndf.loc[df['Title'] == 'dona','Title' ] = 'mrs'\ndf.loc[df['Title'] == 'don','Title' ] = 'mr'\ndf.loc[df['Title'] == 'major','Title' ] = 'mr'\ndf.loc[(df['Title'] == 'dr') & (df['Sex'] == 'male'),'Title'] = 'mr'\ndf.loc[(df['Title'] == 'dr') & (df['Sex'] == 'female'),'Title'] = 'mrs'\ndf.loc[df['Title'] == 'rev','Title' ] = 'mr'","8e5b61e4":"pd.pivot_table(data = df, columns = 'Title', index = 'Sex',aggfunc='count',values = 'PassengerId' )","5a1052f3":"df['Title'].value_counts()","d01ebbae":"df.drop('Name', axis = 1, inplace = True)","f47c56ba":"fig, (ax1,ax2) = plt.subplots(1,2, figsize = (16,5))\nfig.subplots_adjust(hspace = 0.3, wspace = 0.3)\n\nbar_1 = sns.distplot(df['Age'], ax = ax1, fit = norm)\nbar_1.legend([f\"skew {round(df['Age'].skew(),2)}\"])\nstats.probplot(df['Age'], plot= ax2)\nax1.set_title('Train Age', fontsize = 14)\n\nplt.show()","fe30d2b9":"median_age_male = df.loc[df['Sex'] == 'male']['Age'].median()\nprint(f'Median age male : {median_age_male}')\ndf.loc[(df['Sex'] == 'male') & (df['Age'].isnull()), 'Age'] = median_age_male","f6b62304":"median_age_female = df.loc[df['Sex'] == 'female']['Age'].median()\nprint(f'Median age female : {median_age_female}')\ndf.loc[(df['Sex'] == 'female') & (df['Age'].isnull()), 'Age'] = median_age_female","add3e7bf":"fig, (ax1,ax2) = plt.subplots(1,2, figsize = (16,5))\nfig.subplots_adjust(hspace = 0.3, wspace = 0.3)\n\nbar_1 = sns.distplot(df['Age'], ax = ax1, fit = norm)\nbar_1.legend([f\"skew {round(df['Age'].skew(),2)}\"])\nstats.probplot(df['Age'], plot= ax2)\nax1.set_title('Train Age', fontsize = 14)\n\nplt.show()","6a8b270b":"bins = [-np.inf,10,22,55,np.inf]\nlabel = ['Child','Teenager','Adult','Old']\ndf['Type_People'] = pd.cut(df['Age'], bins, labels = label)","fff624a2":"def make_conj(df, feature1, feature2):\n    df[feature1 + '_' + feature2] = df[feature1].astype(str).str[:1] + '_' + df[feature2].astype(str)\n    \n# male + Adult  = m_Adult\n# female + Child = f_Child\n# ....","463a0e4a":"make_conj(df, 'Sex', 'Type_People')","f7c9d7be":"df['Sex_Type_People'].value_counts()","16ff7c84":"sns.catplot(x=\"Pclass\", y=\"Fare\",\n                hue=\"Survived\", col=\"Sex_Type_People\",\n                data=df, kind=\"swarm\",\n                height=5,col_wrap=4);","dfb0e0d7":"df['Deck'] = df['Cabin'].str[:1]","51b0944d":"df['Deck'].value_counts(dropna = False)","d52ed6cb":"pd.pivot_table(data = df, columns = 'Deck', index = 'Pclass',aggfunc='count',values = 'PassengerId' )","ce1d2343":"for category in df['Sex_Type_People'].unique():\n    try:\n        mode_deck_1 = df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 1)]['Deck'].mode()[0]\n        mode_deck_2 = df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 2)]['Deck'].mode()[0]\n        mode_deck_3 = df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 3)]['Deck'].mode()[0]\n\n        df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 1) & (df['Deck'].isnull()), 'Deck'] = mode_deck_1\n        df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 2) & (df['Deck'].isnull()), 'Deck'] = mode_deck_2\n        df.loc[(df['Sex_Type_People'] == category) & (df['Pclass'] == 3) & (df['Deck'].isnull()), 'Deck'] = mode_deck_3\n    finally:\n        mode_deck_1 = df.loc[df['Pclass'] == 1]['Deck'].mode()[0]\n        mode_deck_2 = df.loc[df['Pclass'] == 2]['Deck'].mode()[0]\n        mode_deck_3 = df.loc[df['Pclass'] == 3]['Deck'].mode()[0]\n\n        df.loc[(df['Pclass'] == 1) & (df['Deck'].isnull()), 'Deck'] = mode_deck_1\n        df.loc[(df['Pclass'] == 2) & (df['Deck'].isnull()), 'Deck'] = mode_deck_2\n        df.loc[(df['Pclass'] == 3) & (df['Deck'].isnull()), 'Deck'] = mode_deck_3","8427b535":"df.loc[df['Deck'] == 'E', 'Pclass'] = 1\ndf.loc[(df['Pclass'] == 1) &(df['Deck'] == 'T'), 'Deck'] = 'C'\ndf.loc[(df['Pclass'] == 3) &(df['Deck'] == 'G'), 'Deck'] = 'F'","4e10f8ed":"df['Deck'].value_counts(dropna = False)","d523783f":"sns.catplot(x=\"Pclass\", y=\"Age\",\n                hue=\"Survived\", col=\"Deck\",\n                data=df, kind=\"swarm\",\n                height=5,col_wrap=4);","e1b29fdd":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace = True)","6d545f2b":"df['Embarked'].unique()","daeceda9":"df.info()","3ae9104f":"for i in ['Pclass', 'Sex', 'SibSp', 'Parch',\n       'Ticket', 'Cabin', 'Embarked', 'Fare_category', 'Title',\n       'Sex_Type_People', 'Deck']:\n    df[i] = df[i].astype('object')","5a7f69d8":"df.drop(['Cabin', 'Ticket'], axis = 1, inplace = True)","93874ffd":"columns = [\n            'PassengerId',\n           'Survived',\n           'Pclass',\n           #'Sex',\n           #'Age',\n           #'SibSp',\n           #'Parch',\n           'Fare',\n           #'Embarked',\n           'Fare_category',\n           #'Title',\n           #'Type_People',\n           'Sex_Type_People',\n            #'Deck'\n]","27cfd496":"df_test = df[columns].copy()","0c48d777":"df_test = pd.get_dummies(df_test)","0f94c77a":"df_test.head()","05da81d5":"df_test.shape","6740eae2":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","e445eeb7":"train = df_test[:len(train)]\ntest = df_test[len(train):]","911ea6f7":"train.head()","e35df3a5":"X_train = train.drop(['PassengerId','Survived'],axis = 1)\ny_train = train['Survived']\nX_t_target = test.drop(['PassengerId','Survived'],axis = 1)","9864bc9b":"X_train['Fare'] = (X_train['Fare'] - X_train['Fare'].mean())\/X_train['Fare'].std()","1e20182c":"X_t_target['Fare'] = (X_t_target['Fare'] - X_t_target['Fare'].mean())\/X_t_target['Fare'].std()","38dc015f":"X_train.head()","003e1664":"def score_model(model, X_train = X_train, y_train = y_train ):\n    \n    cv = KFold(n_splits = 5, shuffle = True, random_state = 42)\n    \n    model.fit(X_train,y_train)\n    \n    score_train = model.score(X_train,y_train)\n    \n    score_val = cross_val_score(model, X_train, y_train, cv = cv, n_jobs = -1).mean()\n    \n    return f'Train data: {score_train} ****** cross_val_score: {score_val}'","7ae6ef22":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n","69f61c27":"KNN = KNeighborsClassifier()","967e2443":"KNN","c76b8db8":"score_model(KNN)","82222dac":"params = {\n        'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute'],\n         'n_neighbors':np.arange(1,20),\n         'p':np.arange(1,3),\n         'weights':['uniform', 'distance']\n                    }","e5d7f5dc":"gsc = GridSearchCV(KNN, params, n_jobs = -1, cv = 5)","a51dad47":"gsc.fit(X_train, y_train) ","696e8347":"gsc.best_params_","a062e647":"KNN_gsc = gsc.best_estimator_","8b9f470c":"score_model(KNN_gsc)","90391025":"KNN_gsc.fit(X_train, y_train)","5d607db2":"y_pred = KNN_gsc.predict(X_t_target)","990e5a5c":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],\n                       'Survived':y_pred.astype(int)})","d0569333":"submission.to_csv('submission.csv', index = False)","4d4c51a8":"# KNeighborsClassifier","db20449e":"### Fare","7cdf339a":"# Final","b7a4e50e":"# Who Survived?","f87e624b":"### Missed","39366599":"# Final","ee5b828e":"#### Embarked","02ab7461":"### Normalize Fare","5822b984":"### np.log for Fare","9f469425":"## And now.. I combine two categories (Sex + Type_People) ","20954d38":"#### Deck","d1152b7d":"# Train Test","a91a4a20":"## Age","e03a3bfa":"# Feature Engineering ","393086de":"### I will be use only Pclass, Fare, Fare_category and Sex_Type_People","228d45d8":"# Tuning model ","8c5f578c":"## New categorys -> Child,Teenager, Adult, Old\n\n* Child : 0 -10\n* Teen : 10 - 22\n* Adult : 22 - 55\n* Old : 55 +","6b4cd04f":"# Cabin, Deck, Embarked","0652befd":"## Plots","4bf129da":"# EDA","1146b0a9":"## Name and Title","d8e11d09":"### Model","5d0b4296":"## I create a new categoty\n\n"}}