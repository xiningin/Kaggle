{"cell_type":{"b146114b":"code","93c4cb87":"code","e2200175":"code","f9c6d6ed":"code","1fa0a8a1":"code","de28f405":"code","3ec7b65e":"code","228cbd7b":"code","88305412":"code","a48d7a57":"code","1554df97":"markdown","932890d9":"markdown","999aa71a":"markdown","748ce88b":"markdown","51750d76":"markdown"},"source":{"b146114b":"import pandas as pd","93c4cb87":"df_train = pd.read_csv(\"..\/input\/train.csv\")","e2200175":"df_train.head()","f9c6d6ed":"# Function: print_quantile_info(qu_dataset, qu_field)\n#   Print out the following information about the data\n#   - interquartile range\n#   - upper_inner_fence\n#   - lower_inner_fence\n#   - upper_outer_fence\n#   - lower_outer_fence\n#   - percentage of records out of inner fences\n#   - percentage of records out of outer fences\n# Input: \n#   - pandas dataframe (qu_dataset)\n#   - name of the column to analyze (qu_field)\n# Output:\n#   None\n\ndef print_quantile_info(qu_dataset, qu_field):\n    a = qu_dataset[qu_field].describe()\n    \n    iqr = a[\"75%\"] - a[\"25%\"]\n    print(\"interquartile range:\", iqr)\n    \n    upper_inner_fence = a[\"75%\"] + 1.5 * iqr\n    lower_inner_fence = a[\"25%\"] - 1.5 * iqr\n    print(\"upper_inner_fence:\", upper_inner_fence)\n    print(\"lower_inner_fence:\", lower_inner_fence)\n    \n    upper_outer_fence = a[\"75%\"] + 3 * iqr\n    lower_outer_fence = a[\"25%\"] - 3 * iqr\n    print(\"upper_outer_fence:\", upper_outer_fence)\n    print(\"lower_outer_fence:\", lower_outer_fence)\n    \n    count_over_upper = len(qu_dataset[qu_dataset[qu_field]>upper_inner_fence])\n    count_under_lower = len(qu_dataset[qu_dataset[qu_field]<lower_inner_fence])\n    percentage = 100 * (count_under_lower + count_over_upper) \/ a[\"count\"]\n    print(\"percentage of records out of inner fences: %.2f\"% (percentage))\n    \n    count_over_upper = len(qu_dataset[qu_dataset[qu_field]>upper_outer_fence])\n    count_under_lower = len(qu_dataset[qu_dataset[qu_field]<lower_outer_fence])\n    percentage = 100 * (count_under_lower + count_over_upper) \/ a[\"count\"]\n    print(\"percentage of records out of outer fences: %.2f\"% (percentage))","1fa0a8a1":"print_quantile_info(df_train, \"target\")","de28f405":"# Function: remove_outliers_using_quantiles(qu_dataset, qu_field, qu_fence)\n#   1- Remove outliers according to the given fence value and return new dataframe.\n#   2- Print out the following information about the data\n#      - interquartile range\n#      - upper_inner_fence\n#      - lower_inner_fence\n#      - upper_outer_fence\n#      - lower_outer_fence\n#      - percentage of records out of inner fences\n#      - percentage of records out of outer fences\n# Input: \n#   - pandas dataframe (qu_dataset)\n#   - name of the column to analyze (qu_field)\n#   - inner (1.5*iqr) or outer (3.0*iqr) (qu_fence) values: \"inner\" or \"outer\"\n# Output:\n#   - new pandas dataframe (output_dataset)\n\ndef remove_outliers_using_quantiles(qu_dataset, qu_field, qu_fence):\n    a = qu_dataset[qu_field].describe()\n    \n    iqr = a[\"75%\"] - a[\"25%\"]\n    print(\"interquartile range:\", iqr)\n    \n    upper_inner_fence = a[\"75%\"] + 1.5 * iqr\n    lower_inner_fence = a[\"25%\"] - 1.5 * iqr\n    print(\"upper_inner_fence:\", upper_inner_fence)\n    print(\"lower_inner_fence:\", lower_inner_fence)\n    \n    upper_outer_fence = a[\"75%\"] + 3 * iqr\n    lower_outer_fence = a[\"25%\"] - 3 * iqr\n    print(\"upper_outer_fence:\", upper_outer_fence)\n    print(\"lower_outer_fence:\", lower_outer_fence)\n    \n    count_over_upper = len(qu_dataset[qu_dataset[qu_field]>upper_inner_fence])\n    count_under_lower = len(qu_dataset[qu_dataset[qu_field]<lower_inner_fence])\n    percentage = 100 * (count_under_lower + count_over_upper) \/ a[\"count\"]\n    print(\"percentage of records out of inner fences: %.2f\"% (percentage))\n    \n    count_over_upper = len(qu_dataset[qu_dataset[qu_field]>upper_outer_fence])\n    count_under_lower = len(qu_dataset[qu_dataset[qu_field]<lower_outer_fence])\n    percentage = 100 * (count_under_lower + count_over_upper) \/ a[\"count\"]\n    print(\"percentage of records out of outer fences: %.2f\"% (percentage))\n    \n    if qu_fence == \"inner\":\n        output_dataset = qu_dataset[qu_dataset[qu_field]<=upper_inner_fence]\n        output_dataset = output_dataset[output_dataset[qu_field]>=lower_inner_fence]\n    elif qu_fence == \"outer\":\n        output_dataset = qu_dataset[qu_dataset[qu_field]<=upper_outer_fence]\n        output_dataset = output_dataset[output_dataset[qu_field]>=lower_outer_fence]\n    else:\n        output_dataset = qu_dataset\n    \n    print(\"length of input dataframe:\", len(qu_dataset))\n    print(\"length of new dataframe after outlier removal:\", len(output_dataset))\n    \n    return output_dataset","3ec7b65e":"df_train.dropna(inplace=True)\nnew_dataset = remove_outliers_using_quantiles(df_train, \"target\", \"inner\")","228cbd7b":"new_dataset.head()","88305412":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nsns.distplot(df_train[\"target\"]);\nplt.title('Histogram for Customer Loyalty Before Removal')","a48d7a57":"plt.figure(figsize=(15,10))\nsns.distplot(new_dataset[\"target\"]);\nplt.title('Histogram for Customer Loyalty After Removal')","1554df97":"This notebook contains two functions. \n\n1- print_quantile_info: Print out the following information about the data.\n\n2- remove_outliers_using_quantiles: Remove outliers according to the given fence value and return new dataframe.","932890d9":"### Abstract","999aa71a":"**After outlier removal:**","748ce88b":"**Before outlier removal:**","51750d76":"## Outlier Detection and Removal"}}