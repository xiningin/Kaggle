{"cell_type":{"a65a8b90":"code","8efe2a36":"code","b6564ed2":"code","30bb959c":"code","52a47109":"markdown","7501f4bc":"markdown","df42f643":"markdown","50e4e0df":"markdown","df3aeb80":"markdown"},"source":{"a65a8b90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","8efe2a36":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata = pd.read_csv('\/kaggle\/input\/ads-ctr-optimisation\/Ads_CTR_Optimisation.csv')\ndata.head()\n## Goal: to figure out which ad that has the highest conversion rate","b6564ed2":"# goal: find the ad with the highest conversion\nimport random ## random draw of distribution\nN=500 # number of users\nd=10 # number of ads\nads_selected=[]#empty for now ads which are going to be selected during rounds\n\nnumber_of_rewards_1=[0]*d # the number of times the ad i got reward 1 up to round n\nnumber_of_rewards_0 = [0]*d # the number of times the ad i got reward 0 up to round n\ntotal_reward=0\n\n##iterate for 10000 rounds\nfor n in range(0,N):\n    ad=0 # will have an index of the selected ad\n    max_random=0 \n    \n    for i in range(0,d): # going through ads\n        # For each ad i we take a random draw from the beta distribution\n        random_beta= random.betavariate(number_of_rewards_1[i] + 1, number_of_rewards_0[i] + 1)\n        if (random_beta > max_random):\n            max_random=random_beta\n            ad=i\n    ads_selected.append(ad)\n    reward=data.values[n,ad]\n    if reward==1:\n        number_of_rewards_1[ad]= number_of_rewards_1[ad]+1\n    else:\n        number_of_rewards_0[ad]= number_of_rewards_0[ad]+1\n    total_reward=total_reward + reward","30bb959c":"plt.hist(ads_selected);\nplt.title (\"Histogram of selected ads\")\nplt.xlabel('ads')\nplt.ylabel('Number of times each ad has been selected')\n\n","52a47109":"## Importing the dataset","7501f4bc":"## Visualising the results - Histogram","df42f643":"# Thompson Sampling","50e4e0df":"## Importing the libraries","df3aeb80":"## Implementing Thompson Sampling"}}