{"cell_type":{"2ca37211":"code","ceed2ec9":"code","0643f6e8":"code","a99f7ba5":"code","daf472fc":"code","9cc6e039":"code","e9a4a075":"code","6ffedc3e":"code","e4ed0b95":"code","b68c2591":"code","29c9ccf7":"code","24db653e":"code","957564e5":"code","c5357e0a":"code","ba49ea07":"code","9a556ac1":"code","5a8ab208":"code","3ca2a644":"code","c0c46ade":"code","ed963b39":"code","718795c1":"code","23584c1e":"code","9ffd6c26":"code","c7e4d69f":"code","30f54cb6":"code","7e8f3043":"code","406078c7":"code","4743a58e":"code","d66a2946":"code","59bc0c74":"code","edccb4c7":"code","3262696f":"markdown","49ecf3f8":"markdown","8276bbc6":"markdown","d84d77b1":"markdown","ad122343":"markdown","e8d5e605":"markdown","bfd9583b":"markdown","cadd8526":"markdown","37f2bad3":"markdown"},"source":{"2ca37211":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objs as go \nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True) \nimport missingno\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing  import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","ceed2ec9":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","0643f6e8":"df.head()","a99f7ba5":"df.info()","daf472fc":"df.columns","9cc6e039":"color = ['grey','grey','grey','grey','grey','grey','grey','red','red','red','red']\nmissingno.bar(df,fontsize =16, color=color, sort = 'descending', figsize = (16,8))\nplt.title(\"VISUALIZATION OF MISSING VAUES\",fontsize=23)\nplt.show()","e9a4a075":"df['ph'] = df['ph'].fillna(df['ph'].mean())\ndf['Sulfate'] = df['Sulfate'].fillna(df['Sulfate'].mean())\ndf['Trihalomethanes'] = df['Trihalomethanes'].fillna(df['Trihalomethanes'].mean())\nprint(df.isna().sum())","6ffedc3e":"df.describe().T.style.background_gradient(subset=['std','50%','count'], cmap='PuBu')","e4ed0b95":"label= [\"Potable\",\"Non Potable\"]\nfig = px.pie(labels=label,values=df['Potability'].value_counts(), names = label,width = 900, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(colors = ['#ff6361','#1e434c','#ffa600'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Potability', \n                                      x = 0.5, y = 0.5, font_size = 48, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)","b68c2591":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\na = sns.kdeplot(df[df['Potability']==0]['ph'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['ph'],fill=True,color=['yellow'],alpha=0.7)\na.set_xlim([0,14])\nsns.despine(left=True)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.axvline(x = 6.72, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.72, lw = 3)\na.axvline(x = 7.05, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.9, lw = 3)\na.arrow(6.1, 0.2, -1.5, 0, width = 0.001, head_width = 0.007, head_length = 0.5, color = 'red')\na.arrow(8.05, 0.2, 1.5, 0, width = 0.001, head_width = 0.007, head_length = 0.5, color = 'red')\nplt.title('PH level', size = 25, y = 1.03, fontname = 'monospace', color = '#283655')\nplt.figtext(0.40, 0.51, 'acidic', fontsize = 13, fontname = 'monospace', color = '#a43820')\nplt.figtext(0.403, 0.485, 'water', fontsize = 13, fontname = 'monospace', color = '#a43820')\nplt.figtext(0.58, 0.51, 'alkaline', fontsize = 13, fontname = 'monospace', color = '#a43820')\nplt.figtext(0.582, 0.485, 'water', fontsize = 13, fontname = 'monospace', color = '#a43820')\nplt.figtext(0.90, 0.70, '''The acid-base balance of water. WHO has \nrecommended maximum permissible limit \nof pH from 6.5 to 8.5. The current \ninvestigation ranges were 6.52\u20136.83 \nwhich are in the range of WHO standards\n.At pH=7, the water is neutral, \nat pH less than 7 \u2014 acidic,\nat pH more than 7 \u2014 alkaline.''', fontsize = 13, fontname = 'monospace', color = 'purple', ha = 'right')\nplt.figtext(0.505, 0.2, 'WHO maximum permissible limit', fontsize = 13, fontname = 'monospace', color = 'red', rotation = 90)\n","29c9ccf7":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.title('Hardness Level', size = 25, y = 1.03, fontname = 'monospace', color = '#283655')\na = sns.kdeplot(df[df['Potability']==0]['Hardness'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['Hardness'],fill=True,color=['yellow'],alpha=0.6)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.axhline(y = 0.001, linestyle = '-', color = '#1995ad', xmin = 0, xmax = 350, lw = 3)\na.axvline(x = 60, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.059, lw = 3)\na.axvline(x = 120, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.059, lw = 3)\na.axvline(x = 180, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.059, lw = 3)\nplt.figtext(0.15, 0.14, 'Soft', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.28, 0.14, 'Moderate', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.42, 0.14, 'Hard', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.58, 0.14, 'Very Hard', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.85, 0.561, '''Hardness is caused by compounds of\ncalcium and magnesium, and by a \nvariety of other metals. General \nguidelines for classification of \nwaters are: 0 to 60 mg\/L as calcium \ncarbonate is classified as soft; \n61 to 120 mg\/L as moderately hard; \n121 to 180 mg\/L as hard; and more \nthan 180 mg\/L as very hard.''', fontsize = 13, fontname = 'monospace', color = 'purple', ha = 'right')\nsns.despine(left=True)","24db653e":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.title('Sulphate', size = 25, y = 1.03, fontname = 'monospace', color = '#283655')\na = sns.kdeplot(df[df['Potability']==0]['Sulfate'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['Sulfate'],fill=True,color=['yellow'],alpha=0.6)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.set_xlim([100,500])\na.axhline(y = 0.0017, linestyle = '-', color = '#1995ad', xmin = 0, xmax = 500, lw = 3)\na.axvline(x = 250, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.07, lw = 3)\nplt.figtext(0.25, 0.14, 'Safe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.55, 0.14, 'Unsafe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.89, 0.685, '''Sulphate level between 0-250 mg\/L\nis Considered Safe While Above \n250 mg\/L is Unsafe''', fontsize = 13, fontname = 'monospace', color = 'purple', ha = 'right')\nsns.despine(left=True)","957564e5":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.title('Trihalomethanes', size = 25, y = 1.03, fontname = 'monospace', color = '#283655')\na = sns.kdeplot(df[df['Potability']==0]['Trihalomethanes'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['Trihalomethanes'],fill=True,color=['yellow'],alpha=0.6)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.set_xlim([0,140])\na.axhline(y = 0.0024, linestyle = '-', color = '#1995ad', xmin = 0, xmax = 140, lw = 3)\na.axvline(x = 100, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.072, lw = 3)\nplt.figtext(0.355, 0.145, 'safe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.755, 0.145, 'unsafe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.9, 0.67, '''Trihalomethanes (THMs) are the result of a reaction\nbetween the chlorine used for disinfecting tap water\nand natural organic matter in the water. The legal\nlimit of total THMs in drinking water in Europe is\n100 ppm.''', fontsize = 12, fontname = 'monospace', color = 'purple', ha = 'right')\nsns.despine(left=True)","c5357e0a":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.title('Turbidity', size = 25, y = 1.03, fontname = 'monospace', color = '#283655')\na = sns.kdeplot(df[df['Potability']==0]['Turbidity'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['Turbidity'],fill=True,color=['yellow'],alpha=0.6)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.axhline(y = 0.04, linestyle = '-', color = '#1995ad', xmin = 0, xmax = 7, lw = 3)\na.axvline(x = 5, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.072, lw = 3)\nplt.figtext(0.355, 0.145, 'safe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.755, 0.145, 'unsafe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.9, 0.64, '''Turbidity is a measure of the degree to which the water\nloses its transparency due to the presence of suspended\nparticulates.The more total suspended solids in the \nwater,the murkier it seems and the higher the \nturbidity.The WHO, establishes that the \nturbidity of drinking water shouldn't \nbe more than 5 NTU.''', fontsize = 12, fontname = 'monospace', color = 'purple', ha = 'right')\nsns.despine(left=True)","ba49ea07":"plt.figure(figsize=(16,8))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.title('Conductivity', size = 28,x=0.45, y = 1.08, fontname = 'monospace', color = '#283655')\na = sns.kdeplot(df[df['Potability']==0]['Conductivity'],fill=True,color=['cyan'],alpha=0.7)\nsns.kdeplot(df[df['Potability']==1]['Conductivity'],fill=True,color=['yellow'],alpha=0.6)\nplt.legend(['Not potable', 'Potable'], bbox_to_anchor = (0.15, 1.07), ncol = 1, borderpad = 3, frameon = False, fontsize = 11)\na.axhline(y = 0.00038, linestyle = '-', color = '#1995ad', xmin = 0, xmax = 500, lw = 3)\na.axvline(x = 400, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.07, lw = 3)\na.axvline(x = 800, linestyle = '-', color = '#1995ad', ymin = 0, ymax = 0.07, lw = 3)\nplt.figtext(0.25, 0.14, 'WHO Recommended', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.60, 0.14, 'Safe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.86, 0.14, 'Unsafe', fontsize = 13, fontname = 'monospace', color = 'red')\nplt.figtext(0.9, 0.64, '''Electrical conductivity is a measure of the saltiness\nof the water. Good drinking water for humans (provided\nthere is no organicpollution and not too much suspended\nclay material) should not exceeded 800 \u03bcS\/cm.''', fontsize = 12, fontname = 'monospace', color = 'purple', ha = 'right')\nsns.despine(left=True)","9a556ac1":"plt.figure(figsize=(18,10))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .75)\nplt.suptitle('Potability', size = 35 , fontname = 'monospace',color = '#283655')\nplt.subplot(1,3,1)\nsns.boxplot(x='Potability',y='Hardness',data=df,color='limegreen')\nplt.title('Hardness Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\ns = sns.barplot(x='Potability',y='ph',data=df,color='cyan')\ns.set_ylim([0,8])\nplt.title('ph Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.subplot(1,3,3)\nsns.violinplot(x='Potability',y='Conductivity',data=df,color='coral')\nplt.title('Conductivity Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.tight_layout()\nplt.show()","5a8ab208":"plt.figure(figsize=(18,10))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .75)\nplt.suptitle('Potability', size = 35 , fontname = 'monospace',color = '#283655')\nplt.subplot(1,3,1)\nsns.scatterplot(y='Solids',data=df,x='ph',hue='Potability',palette=['red','purple'],alpha=0.9)\nplt.title('Solids Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\ns = sns.kdeplot(x='Organic_carbon',data=df,color='cyan',hue='Potability',fill=True,palette=[\"#ffa600\",\"limegreen\"],alpha=0.7)\nplt.title('Organic Carbon Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.subplot(1,3,3)\nsns.set_palette(\"RdBu\",)\nsns.stripplot(x='Potability',y='Trihalomethanes',data=df)\nplt.title('Trihalomethanes Vs Potability')\nplt.xticks(rotation='vertical')\nplt.grid()\n\nplt.tight_layout()\nplt.show()","3ca2a644":"plt.figure(figsize = (16, 9))\nsns.set_style(\"white\")\na = sns.scatterplot(x = \"ph\", y = \"Turbidity\", hue = \"Potability\", palette = ['#bcbabe', '#a1d6e2'], \n                    sizes = (1, 8), linewidth = 0.5, data = df, edgecolor = \"black\")\nplt.title('Turbidity Vs ph',size=24)\nsns.despine(left=True)","c0c46ade":"plt.figure(figsize = (16, 8))\nsns.set_style(\"white\")\na = sns.scatterplot(x = \"Conductivity\", y = \"Organic_carbon\", hue = \"Potability\", palette = ['#bcbabe', '#a1d6e2'], \n                    sizes = (1, 8), linewidth = 0.5, data = df, edgecolor = \"black\")\nplt.title('Conductivity Vs Organic Carbon',size=24,y=1.08)\nsns.despine(left=True)","ed963b39":"plt.figure(figsize = (16, 9))\nsns.set_style(\"white\")\na = sns.scatterplot(x = \"Solids\", y = \"Chloramines\", hue = \"Potability\", palette = ['#bcbabe', '#a1d6e2'], \n                    sizes = (1, 8), linewidth = 0.5, data = df, edgecolor = \"black\")\nplt.title('Solids Vs Chloramines',size=24)\nsns.despine(left=True)","718795c1":"plt.figure(figsize = (14, 8))\nmatrix = np.triu(df.corr())\n\nsns.heatmap(df.corr(), annot = True, cmap = 'Blues', fmt=\".2f\", mask = matrix, vmin = -1, vmax = 1, linewidths = 0.1, \n            linecolor = 'white', cbar = False, annot_kws = {'fontsize': 15})\nplt.figtext(0.88, 0.76, '''As it's visible here that\nall of features are not much\ncorrelated.''', fontsize = 14, fontname = 'monospace', color = 'purple', ha = 'right')\nplt.title('Correlations',size=24,x=0.4,y=1.09)\nplt.show()","23584c1e":"X = df.drop('Potability',axis=1)\ny = df['Potability']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=101)\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\nrfc_pred = rfc.predict(X_test)\nprint('\\n')\nprint('Random Forest Accuracy score is: ',accuracy_score(y_test,rfc_pred)*100)\nk=accuracy_score(y_test,rfc_pred)*100\nprint('\\n')\nprint(confusion_matrix(y_test,rfc_pred))\nprint('\\n')\nprint(classification_report(y_test,rfc_pred))","9ffd6c26":"scale= StandardScaler()\nscale.fit( df.drop('Potability',axis=1))\nscaled_features = scale.transform( df.drop('Potability',axis=1))\ndf_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\nX = df_feat\ny = df['Potability']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)\nknn = KNeighborsClassifier(n_neighbors=1)\npred = knn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint('\\n')\nprint('KNN Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","c7e4d69f":"#Choose KNN Value\nfig = plt.figure(figsize=(15.5,6))\nsns.set_context(\"poster\", font_scale = 0.7)\nsns.set_style(\"white\")\nerror = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))\n\nsns.set_style('whitegrid')\nplt.plot(range(1,40),error,color='red', linestyle='dashed', marker='o',\n         markerfacecolor='yellow', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","30f54cb6":"#Best KNN Accuracy Score\nknn = KNeighborsClassifier(n_neighbors=25)\npred = knn.fit(X_train,y_train)\npred = knn.predict(X_test)\n#print('LogisticRegression score is: ',np.round(model.score(y_test,pred)*100,decimals=2))\nprint('\\n')\nprint('Best KNN Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nm=accuracy_score(y_test,pred)*100\n\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","7e8f3043":"X = df.drop('Potability',axis=1)\ny = df['Potability']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30,random_state=101)\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint('\\n')\nprint('Logistics Accuracy score is: ',accuracy_score(y_test,predictions)*100)\np=accuracy_score(y_test,predictions)*100\nprint('\\n')\nprint(confusion_matrix(y_test,predictions))\nprint('\\n')\nprint(classification_report(y_test,predictions))","406078c7":"plt.figure(figsize = (8, 5))\ncm = confusion_matrix(y_test, predictions)\nsns.heatmap(cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15}, \n            yticklabels = ['Not potable', 'Potable'], xticklabels = ['Predicted not potable', 'Predicted potable'])\nplt.yticks(rotation = 0)\nplt.show()","4743a58e":"model = SVC()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\nprint('Vector Machine Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","d66a2946":"#Grid Search\n#Choosing C and Gamma values\nparam_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001], 'kernel': ['rbf']} \ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)\ngrid.fit(X_train,y_train)\nprint(grid.best_params_)\nprint(grid.best_estimator_)\nprint(grid.best_score_)","59bc0c74":"grid_pred = grid.predict(X_test)\nprint('Best Vector Machine Accuracy score is: ',accuracy_score(y_test,grid_pred)*100)\ng=accuracy_score(y_test,grid_pred)*100\nprint('\\n')\nprint(confusion_matrix(y_test,grid_pred))\nprint('\\n')\nprint(classification_report(y_test,grid_pred))","edccb4c7":"label = ['Random Forest','K Nearest Neighbours','Logistics Regression','Vector Machine']\nfig = px.pie(labels=label,values=[k,m,p,g], names = label,width = 800, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.65, \n                  marker = dict(colors = ['#8d230f','#ff6361','#ffa600','#bc5090'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Performance Comaprison', \n                                      x = 0.5, y = 0.5, font_size = 28, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)","3262696f":"![https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQehFJ44zrTaFbHED-bJWynmtC2ULo3Ukeekg&usqp=CAU](http:\/\/)","49ecf3f8":"# Model Building","8276bbc6":"# Thanks\ntook help from Dmitry Uarov","d84d77b1":"# Vector Machine","ad122343":"# LogisticRegression","e8d5e605":"# KNN Algorithm","bfd9583b":"# Conclusions","cadd8526":"> 1. There doesn't seems to be any major differences in any of the features between potable and Non Potable water.\n> 2. All the features such as Sulphates,Trihalomethanes etc have values that are above WHO recommended standards.","37f2bad3":"# Random Forest"}}