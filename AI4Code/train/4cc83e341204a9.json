{"cell_type":{"e430ee01":"code","15b2d055":"code","1cac2191":"code","45998d3d":"code","256b11e5":"code","0ca8b943":"code","84d0a771":"code","7acd406b":"code","51c39964":"code","0efb7d7b":"code","3e4b5ba2":"code","4c569795":"code","fe55627f":"code","8502fc59":"code","a0bf625e":"code","106d45d7":"code","23960c65":"code","65174c1f":"code","3e299950":"code","bae915ea":"code","115c52f9":"code","845f64be":"code","171c5991":"code","03a8aa4e":"code","7e2bd95c":"code","57fa1a24":"code","5e84ec02":"code","ddfb430e":"code","71b61d58":"code","fdf82e6c":"code","361a79ef":"code","1d55abd9":"code","0306578b":"code","8ee747c6":"code","b587b9f3":"code","8b8d35ee":"code","b328d072":"code","6caab02e":"code","d74be8ce":"code","2d002ab9":"code","77eae088":"code","5e15abb6":"code","c86ce0d4":"code","873c4175":"code","cb82f2fb":"code","288eebc9":"code","7feb43d2":"code","7dd4ab6a":"code","779db8a8":"code","9b33259f":"code","e41c5b08":"code","0f89df4d":"code","eaeb5a7d":"code","7a2b502d":"code","79420f79":"code","1a5334b0":"code","f917514a":"code","2ebd4a02":"code","74e023c2":"code","5e87ab67":"code","d43fefdc":"code","197562da":"markdown","6e878e0b":"markdown","f653e8ea":"markdown","a9425d6d":"markdown","dbfd4e6f":"markdown","b600fc23":"markdown","7e58b7db":"markdown","232a331f":"markdown","c5e22150":"markdown","520d618e":"markdown","b42bad0c":"markdown","b5d02372":"markdown","4af7836d":"markdown","2fe7f7b0":"markdown","3a64c05e":"markdown","85b0364d":"markdown","bc570ad0":"markdown","142355b8":"markdown","13427828":"markdown","40055e78":"markdown","3bc2a8c5":"markdown","f9b0847f":"markdown","120bae12":"markdown","5989aadb":"markdown","f0917d19":"markdown"},"source":{"e430ee01":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","15b2d055":"!pip install pandas_flavor","1cac2191":"from pandas_flavor import register_dataframe_method,register_series_method\nfrom IPython.core.display import display, HTML\n\n@register_dataframe_method\ndef missing(df):        \n    tmp =  sorted(\n                [(col , str(df[col].dtypes) ,df[col].isna().sum(), np.round( df[col].isna().sum() \/ len(df) * 100,2) ) for col in df.columns if df[col].isna().sum() !=0 ],\n                key = lambda x: x[2], reverse=True)\n    \n    return pd.DataFrame(tmp).rename({0:\"Feature\", 1:\"dtype\", 2:\"count\", 3:\"percent\"},axis=1)  \n\n@register_dataframe_method\ndef get_numeric_df(df):\n    return df.select_dtypes(np.number)\n\n@register_dataframe_method\ndef get_numeric_cols(df):\n    return list(df.select_dtypes(np.number).columns)\n\n@register_dataframe_method\ndef discrete_features_cols(df,thresold):\n#     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) < thresold]\n\n@register_dataframe_method\ndef discrete_features_df(df,thresold):\n#     thresold in number of unique values\n    return df[ discrete_features_cols(df=df,thresold=thresold) ]\n\n@register_dataframe_method\ndef continuous_features_cols(df,thresold):\n    #     thresold in number of unique values\n    return [feature for feature in df.columns if len(df[feature].unique()) >= thresold]\n\n@register_dataframe_method\ndef continuous_features_df(df,thresold):\n    #     thresold in number of unique values\n    return df[ continuous_features_cols(df=df,thresold=thresold) ]\n\n@register_dataframe_method\ndef dtypes_of_cols(df):\n    return pd.DataFrame(df.dtypes).reset_index().rename(columns={'index':\"Columns\",0: \"dtype\"})\n\n@register_dataframe_method\ndef describe_discrete_cols(df,thresold, ascending=True):\n    \n    values = pd.DataFrame()\n    \n    for col in df.discrete_features_cols(thresold=thresold):\n        values[col] = [df[col].unique(), df[col].nunique()]\n        \n    return values.transpose().sort_values(by = 1,ascending=ascending).rename({0:\"Values\",1:\"cardinality\"},axis=1)\n    \n    \n@register_series_method\ndef IQR_range(df):\n    if isinstance(df, pd.Series):\n        Q3 = np.quantile(df, 0.75)\n        Q1 = np.quantile(df, 0.25)\n        IQR = Q3 - Q1\n\n        lower_range = Q1 - 1.5 * IQR\n        upper_range = Q3 + 1.5 * IQR\n\n        return (lower_range,upper_range)\n    else:\n        assert False, \"df must be of type pandas.Series\"\n        \n@register_dataframe_method\ndef IQR_range(df):\n    if isinstance(df, pd.DataFrame):\n        cols = df.get_numeric_cols()\n        features = {}\n        for i in cols:\n            Q3 = np.quantile(df[i], 0.75)\n            Q1 = np.quantile(df[i], 0.25)\n            IQR = Q3 - Q1\n\n            lower_range = Q1 - 1.5 * IQR\n            upper_range = Q3 + 1.5 * IQR\n\n\n            features[i] = (lower_range,upper_range)\n            \n        return pd.DataFrame.from_dict(features,orient='index').rename({0: 'IQR_Low',1: 'IQR_High'}, axis=1)\n    else:\n        assert False, \"df must be of type pandas.DataFrame\"\n        \n@register_dataframe_method\ndef compare_cols(df,l_feat,r_feat, percent=False, percent_of_total=False):\n    \n#     [L_feat] {R_feat1: agg1, R_feat2: agg2}\n\n    \n    if percent or percent_of_total:\n        \n        comp = []\n        for key, val in zip(r_feat,r_feat.values()):\n            tmp = pd.DataFrame()\n            tmp[key + \" \" + val] =  df.groupby(l_feat,sort=True).agg({key: val})\n            \n            if percent: tmp[key +\" %\"] = tmp.groupby(level=0).apply(lambda x: np.round(100 * x \/ float(x.sum()),2))\n\n            if percent_of_total: tmp[key+\" % of total\"] = np.round(tmp[key + \" \" + val] \/ tmp[key + \" \" + val].sum() * 100 , 2)\n            \n            comp.append(tmp)\n            \n        return comp\n    \n    else:\n        comp = []\n        for key, val in zip(r_feat,r_feat.values()):\n            tmp = pd.DataFrame()\n            tmp[key + \" \" + val] =  df.groupby(l_feat,sort=True).agg({key: val})           \n            comp.append(tmp)\n            \n        return comp  \n    \n@register_series_method\ndef IQR_percent(df):\n    if isinstance(df, pd.Series):\n        \n        lower_range, upper_range = df.IQR_range()\n\n        length = len(df)\n        return np.round((length - df.between(lower_range,upper_range).sum())\/length * 100, 2)\n    else:\n        assert False, \"df must be of type pandas.Series\"\n\n@register_dataframe_method\ndef IQR_percent(df):\n    if isinstance(df, pd.DataFrame):\n        cols = df.get_numeric_cols()\n        features = {}\n        for i in cols:\n            lower_range, upper_range = df[i].IQR_range()\n\n            length = len(df[i])\n            tmp = np.round((length - df[i].between(lower_range,upper_range).sum())\/length * 100, 2)\n            if tmp != 0:\n                features[i] = tmp\n#             features[i] = IQR_percent(df[i])\n            \n        return pd.DataFrame.from_dict(features,orient='index').rename({0: 'Outlier percent'}, axis=1)\n    else:\n        assert False, \"df must be of type pandas.DataFrame\"\n        \n@register_dataframe_method\ndef drop_row_outlier(df, cols, inplace=False):\n#     init empty index\n    indices = pd.Series(np.zeros(len(df), dtype=bool), index=df.index)\n\n    for col in cols:\n        low, top = df[col].IQR_range()\n        indices |= (df[col] > top) | (df[col] < low)\n        \n    \n    return df.drop(df[ indices ].index, inplace=inplace)\n\n@register_series_method\ndef drop_row_outlier(df, inplace=False):\n#     init empty index\n\n    low, top = df.IQR_range()\n    indices = (df > top) | (df < low)\n        \n    \n    return df.drop(df[ indices ].index, inplace=inplace)\n\n@register_dataframe_method\ndef count_dtypes(df, ascending=False):\n    return pd.DataFrame(df.dtypes.value_counts(ascending=ascending)).rename({0:\"Count\"},axis=1)\n\n@register_dataframe_method\ndef about(df):\n\n    display(HTML('<h1 style=\"color:green\"> <b> Shape of data <\/b> <\/h1>'))\n    print(df.shape)    \n\n    display(HTML('<h1 style=\"color:green\"> <b> Datatypes in data <\/b> <\/h1> '))\n    print(df.dtypes.value_counts(ascending=False))\n\n    display(HTML('<h1 style=\"color:green\"> <b> dtypes of columns <\/b> <\/h1> '))\n    display(df.dtypes_of_cols())\n\n    display(HTML('<h1 style=\"color:green\"> <b> Percentage of missing values <\/b> <\/h1> '))\n    tmp = missing(df)\n    display(tmp) if len(tmp) != 0 else display(HTML(\"<h2> <b> None <b> <\/h2>\"))\n\n    display(HTML('<h1 style=\"color:green\"> <b> Data description <\/b> <\/h1> '))\n    display(df.describe().T)\n    \n    display(HTML('<h1 style=\"color:green\"> <b> Outlier Percentage(IQR) <\/b> <\/h1> '))\n    tmp = df.IQR_percent()\n    display(tmp) if len(tmp) != 0 else display(HTML(\"<h2> <b> None <b> <\/h2>\"))\n\n    display(HTML('<h1 style=\"color:green\"> <b> Example of data <\/b> <\/h1> '))\n    display(df.head())","45998d3d":"import itertools\ndef display_multiple_tables(table_list):\n    table_list = list(itertools.chain(*table_list) )\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","256b11e5":"import matplotlib as mpl\n\nsns.set(style=\"darkgrid\",font_scale=1.1)\n# plt.rcParams['figure.dpi']=200\n\nmpl.rcParams['figure.dpi'] = 200\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False\nmpl.rcParams['font.family'] = 'sans-serif'\nmpl.rcParams['font.sans-serif'] = [\"SF UI Display\",\"Inter\", \"Helvetica\"]\nmpl.rcParams['font.weight'] = 500\nmpl.rcParams['axes.titleweight'] = 800\nmpl.rcParams['axes.labelsize'] = \"large\"\nmpl.rcParams['axes.titlesize'] = \"x-large\"\nmpl.rcParams['xtick.labelsize'] = \"medium\"\nmpl.rcParams['ytick.labelsize'] = \"medium\"\n\n# mpl.rcParams['patch.antialiased'] = True \n# mpl.rcParams['patch.linewidth'] = 1.5\n# sns.set_context(rc = {'patch.linewidth': 5.0})\n\n# \u2018xx-small\u2019, \u2018x-small\u2019, \u2018small\u2019, \u2018medium\u2019, \u2018large\u2019, \u2018x-large\u2019, \u2018xx-large\u2019.\n\n\n\nfrom matplotlib.ticker import MaxNLocator\n\ndef srt_reg(y, df,x_size=20,y_size=20,*args,**kwargs):\n    \n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, figsize=(x_size,y_size))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sns.regplot(x=i,\n                    y=y,\n                    data=df,\n                    ax=j,\n                    order=3,\n                    ci=None,\n                    color='#e74c3c',\n                    line_kws={'color': 'black'},\n                    scatter_kws={'alpha':0.4},\n                   *args,**kwargs)\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n        plt.tight_layout()\n\ndef srt_box(y, df,*args,**kwargs):\n    fig, axes = plt.subplots(19, 3, figsize=(30,30))\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n\n        sortd = df.groupby([i])[y].median().sort_values(ascending=False)\n        sns.boxplot(x=i,\n                    y=y,\n                    data=df,\n                    palette='plasma',\n                    order=sortd.index,\n                    ax=j,\n                    *args,**kwargs)\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n\n\n        \ndef histplt(df,ncols = 3, x_size=30,y_size=30,*args,**kwargs):\n    \n    if len(df.shape) == 1:\n        fig, ax = plt.subplots(figsize=(x_size,y_size))\n        sns.histplot(x=df,ax=ax,*args,**kwargs)\n        [ ax.bar_label(tmp) for tmp in ax.containers]\n        \n        ax.tick_params(labelrotation=45)\n#         plt.tight_layout()\n        \n    else:\n    \n#         ncols = 3\n        nrows = int(np.ceil(df.shape[1]\/ncols))\n\n        fig, axes = plt.subplots(nrows, ncols, \n                                 figsize=(x_size,y_size)\n                                )\n        axes = axes.flatten()\n\n        for i, j in zip(df.columns, axes):\n\n            sns.histplot(data=df, x=i,ax=j,*args,**kwargs)\n            j.tick_params(labelrotation=45)\n            [ j.bar_label(tmp) for tmp in j.containers]\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \n\ndef countplt(df,ncols = 3, x_size=30,y_size=30,*args,**kwargs):\n    \n    if len(df.shape) == 1:\n        fig, ax = plt.subplots(figsize=(x_size,y_size))\n        sns.countplot(x=df,ax=ax,*args,**kwargs)\n        [ ax.bar_label(tmp) for tmp in ax.containers]\n        \n        ax.tick_params(labelrotation=45)\n#         plt.tight_layout()\n        \n    else:\n    \n#         ncols = 3\n        nrows = int(np.ceil(df.shape[1]\/ncols))\n\n        fig, axes = plt.subplots(nrows, ncols, \n                                 figsize=(x_size,y_size)\n                                )\n        axes = axes.flatten()\n\n        for i, j in zip(df.columns, axes):\n\n            sns.countplot(data=df, x=i,ax=j,*args,**kwargs)\n            j.tick_params(labelrotation=45)\n            [ j.bar_label(tmp) for tmp in j.containers]\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n\n\n    \n    \ndef barplt(df,y,x_size=30,y_size=30,*args,**kwargs):\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n\n    for i, j in zip(df.columns, axes):\n        \n        if i == y:\n            continue\n\n        sns.barplot(data=df,\n                    x=i,\n                    y=y,\n                    ax=j,*args,**kwargs)\n\n        j.tick_params(labelrotation=45)\n        [ j.bar_label(tmp) for tmp in j.containers]\n#         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n        plt.tight_layout()\n    \n    \ndef violinplt(df,y,ncols=3,x_size=30,y_size=30,x_scale = \"linear\", y_scale = \"linear\", *args,**kwargs):\n    \n    \n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n    \n    if df[y].dtype == 'O':\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.violinplot(data=df,\n                        x=y,\n                        y=i,\n                        ax=j,*args,**kwargs)\n            \n            lower_range, upper_range = df[i].IQR_range()\n            outliers = df[(df[i] > upper_range) | (df[i] < lower_range)][i]\n            sns.scatterplot(y=outliers, x=0, marker='D', color='crimson', ax=j)\n            j.tick_params(labelrotation=45)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \n        \n    else:\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            g = sns.violinplot(data=df,\n                        x=i,\n                        y=y,\n                        ax=j,*args,**kwargs)\n            g.set_xscale(x_scale)\n            g.set_yscale(y_scale)\n            j.tick_params(labelrotation=45)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \ndef boxplt(df,y,x_size=30,y_size=30,*args,**kwargs):\n\n    ncols = 3\n    nrows = int(np.ceil(df.shape[1]\/ncols))\n    \n    fig, axes = plt.subplots(nrows, ncols, \n                             figsize=(x_size,y_size)\n                            )\n    axes = axes.flatten()\n    \n    if df[y].dtype == 'O':\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.boxplot(data=df,\n                        x=y,\n                        y=i,\n                        ax=j,*args,**kwargs)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n        \n        \n    else:\n\n        for i, j in zip(df.columns, axes):\n\n            if i == y:\n                continue\n\n            sns.boxplot(data=df,\n                        x=i,\n                        y=y,\n                        ax=j,*args,**kwargs)\n\n    #         j.yaxis.set_major_locator(MaxNLocator(nbins=18))\n\n            plt.tight_layout()\n\n\nimport scipy.stats as stats\n\ndef qqplt(df,x_size=30,y_size=30,*args,**kwargs):\n    \n    if len(df.shape) == 1:\n        fig, ax = plt.subplots(figsize=(x_size,y_size))\n        stats.probplot(df,plot=ax, *args,**kwargs)\n        \n#         ax.set_title(label=df.columns)\n        ax.tick_params(labelrotation=45)\n        ax.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n#         plt.tight_layout()\n        \n    \n    else:\n        ncols = 3\n        nrows = int(np.ceil(df.shape[1]\/ncols))\n\n        fig, axes = plt.subplots(nrows, ncols, figsize=(x_size,y_size))\n        axes = axes.flatten()\n\n        for i, j in zip(df.columns, axes):\n\n            stats.probplot(df[i],plot=j, *args,**kwargs)\n            j.set_title(label=i)\n            j.tick_params(labelrotation=45)\n            j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n            plt.tight_layout()","0ca8b943":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n# lets also drop Cabin because of many missing features\ndf.drop([\"PassengerId\", \"Cabin\"], inplace=True,axis=1)\ndf.about()","84d0a771":"thresold = 10\ndf.describe_discrete_cols(thresold= thresold ) ","7acd406b":"disc_cols = df.discrete_features_cols(thresold = thresold)\ndisc_cols","51c39964":"countplt(df[disc_cols], y_size=10)","0efb7d7b":"countplt(df[disc_cols],hue=\"Survived\", y_size=10)","3e4b5ba2":"tmp = disc_cols.copy()\n# tmp.remove(\"Survived\")\n\ntables = [compare_cols(df, [col, \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True) for col in tmp]\n\ndisplay_multiple_tables(tables)","4c569795":"tmp = disc_cols.copy()\n# tmp.remove(\"Survived\")\n\ntables = [compare_cols(df[ df[\"Survived\"]==1 ], [col, \"Survived\"], {\"Survived\":\"count\"}, percent_of_total=True) for col in tmp]\n\ndisplay_multiple_tables(tables)","fe55627f":"df.continuous_features_df(thresold).head()","8502fc59":"cont_cols = df.continuous_features_cols(thresold)\ncont_cols.remove(\"Name\", )\ncont_cols","a0bf625e":"histplt(df=df[[\"Age\",\"Fare\"]], y_size=10, ncols=2)","106d45d7":"histplt(df=df[[\"Age\",\"Fare\"]], hue = df[\"Survived\"],y_size=10, ncols=2)","23960c65":"histplt(df=df[[\"Age\",\"Fare\"]], hue = df[\"Sex\"],y_size=10, ncols=2)","65174c1f":"\npd.qcut(df['Age'], q=5, retbins=True)[1]\n","3e299950":"age_bin = [ 0, 19  , 25  , 31 , 41  , 100, 500 ]","bae915ea":"df[\"Age\"].fillna(500, inplace=True)","115c52f9":"histplt(df=df[\"Age\"], hue = df[\"Sex\"],y_size=10, ncols=1)","845f64be":"df[\"Age\"] = pd.cut(df[\"Age\"], bins=age_bin)","171c5991":"countplt(df=df[\"Age\"],y_size=10, ncols=2)\ncountplt(df=df[\"Age\"],hue = df[\"Survived\"], y_size=10, ncols=2)","03a8aa4e":"df[\"Age\"].unique()","7e2bd95c":"df[ df[\"Age\"].astype('str') == \"(100, 500]\" ].head()","57fa1a24":"tmp = df[ df[\"Age\"].astype('str') == \"(100, 500]\" ].copy()\ntmp[\"Age\"] = tmp[\"Age\"].astype('str') \n\ntables = [compare_cols(tmp, [\"Age\", \"Sex\"], {\"Sex\":\"count\"},  percent_of_total=True),\n         compare_cols(tmp, [\"Age\", \"Survived\"], {\"Survived\":\"count\"}, percent_of_total=True),\n          compare_cols(tmp, [\"Age\",\"Sex\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True)\n         ]\ndisplay_multiple_tables(tables)","5e84ec02":"tables = [compare_cols(df, [\"Age\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True),\n          compare_cols(df, [\"Age\", \"Sex\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True)]\n\ndisplay_multiple_tables(tables)","ddfb430e":"tables = [compare_cols(df[ df[\"Survived\"]==1 ], [\"Age\", \"Survived\"], {\"Survived\":\"count\"}, percent=False, percent_of_total=True),\n          compare_cols(df[ df[\"Survived\"]==1 ], [\"Age\", \"Sex\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True) ]\n\ndisplay_multiple_tables(tables)","71b61d58":"df.drop( df[ (df[\"Fare\"]>80) ].index, inplace=True)","fdf82e6c":"histplt(df=df[\"Fare\"], y_size=10, ncols=1)","361a79ef":"pd.qcut(df['Fare'], q=5, retbins=True)[1]","1d55abd9":"fare_bins =[ 0. ,  7.8,  9.5, 16. , 30. , 80.]\n\ndf[\"Fare\"] = pd.cut(df['Fare'], bins=fare_bins, include_lowest=True)\n","0306578b":"countplt(df=df[\"Fare\"], y_size=10, ncols=1)\ncountplt(df=df[\"Fare\"], hue=df[\"Survived\"], y_size=10, ncols=1)","8ee747c6":"tables = [compare_cols(df, [\"Fare\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True),\n          compare_cols(df, [\"Fare\", \"Sex\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True)]\n\ndisplay_multiple_tables(tables)","b587b9f3":"tables = [compare_cols(df[ df[\"Survived\"]==1 ], [\"Fare\", \"Survived\"], {\"Survived\":\"count\"}, percent=False, percent_of_total=True),\n          compare_cols(df[ df[\"Survived\"]==1 ], [\"Fare\", \"Sex\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True) ]\n\ndisplay_multiple_tables(tables)","8b8d35ee":"df.missing()","b328d072":"df.dropna(axis=0, inplace=True)","6caab02e":"df.missing()","d74be8ce":"df['title'] = df[\"Name\"].str.extract('([\\b\\w]+)\\.', expand=False)\ndf.drop(\"Name\", axis=1, inplace=True)\n\nreplace_title = ['Master',\"Don\", \"Rev\", 'Dr', 'Mme', 'Ms','Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess','Jonkheer']\ndf[\"title\"] = df[\"title\"].replace(replace_title, \"Rare\")","2d002ab9":"countplt(df[\"title\"],x_size=30,y_size=10, hue=df[\"Survived\"])","77eae088":"tables = [\n    compare_cols(df, [\"Sex\",\"title\", \"Survived\"], {\"Survived\":\"count\"}, percent=True, percent_of_total=True),\n    \n]\n\ndisplay_multiple_tables(tables)","5e15abb6":"df.drop(\"Ticket\", axis=1, inplace=True)","c86ce0d4":"df.select_dtypes(exclude=np.number).head()","873c4175":"encoders = {\"male\":0, \"female\":1}\ndf[\"Sex\"] = df[\"Sex\"].map(encoders)","cb82f2fb":"df[\"Embarked\"].unique()","288eebc9":"encoders = {\"S\":0, \"C\":1, \"Q\":2}\ndf[\"Embarked\"] = df[\"Embarked\"].map(encoders)","7feb43d2":"encoders = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Rare\": 4}\n\ndf['title'] = df['title'].map(encoders)","7dd4ab6a":"from sklearn.preprocessing import LabelEncoder","779db8a8":"le = LabelEncoder()\n# cols = [\"Age\", \"Fare\"]\n# [ df[i] = le.fit_transform(df[cols[i]]) for i in cols]\ndf[\"Age\"] = le.fit_transform(df[\"Age\"])\ndf[\"Fare\"] = le.fit_transform(df[\"Fare\"])","9b33259f":"df[\"Age\"].unique()","e41c5b08":"df[\"Fare\"].unique()","0f89df4d":"df.select_dtypes(exclude=np.number).head()","eaeb5a7d":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score","7a2b502d":"x = df.drop(\"Survived\",axis=1)\ny = df[\"Survived\"]","79420f79":"lr = LogisticRegression(max_iter=1000)\nsvc = SVC()\nknn = KNeighborsClassifier()\nrf=RandomForestClassifier()\n\nmodels = {\n    \"Logistic\":lr,\n    \"SVC\":svc,\n    \"KNN\":knn,\n    \"RF\":rf\n}","1a5334b0":"scores={}\nfor name,model in zip(models, models.values()):\n    scores[name] = cross_val_score(model, X=x,y=y, cv=10, scoring=\"accuracy\")\n# print(scores, np.mean(scores)*100)","f917514a":"for name,score in zip(scores,scores.values()):\n    print(f\"{name :<10} {np.round( np.mean(score)*100 ,2)}  {np.round( np.std(score)*100 ,2)}\")","2ebd4a02":"from catboost import CatBoostClassifier\nfrom catboost import Pool, cv\nimport time","74e023c2":"cat_features = np.where(x.dtypes != np.float)[0]\ncat_features","5e87ab67":"catboost_model = CatBoostClassifier(iterations=1000,\n                                    custom_loss=['Accuracy'],\n                                    loss_function='Logloss')\ntrain_pool = Pool(x,\n                 y,\n                  cat_features\n                 )\nstart_time = time.time()# Set params for cross-validation as same as initial model\ncv_params = catboost_model.get_params()# Run the cross-validation for 10-folds (same as the other models)\ncv_data = cv(train_pool,\n             cv_params,\u0304\u0304\u0304\n             fold_count=10,\n             plot=True)# How long did it take?\ncatboost_time = (time.time() - start_time)# CatBoost CV results save into a dataframe (cv_data), let's withdraw the maximum accuracy score\nacc_cv_catboost = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","d43fefdc":"print(\"---CatBoost Metrics---\")\nprint(\"Accuracy cross-validation 10-Fold: {}\".format(acc_cv_catboost))","197562da":"### Lets deal with Age","6e878e0b":"**since `Age` and `Fare` have missing values, lets deal with them before we do further processing**\n\n**since `Age` has a lot of missing values, lets convert `Age` to categorical feature so that the missing values are a separate category**","f653e8ea":"**But who were in those missing values??**","a9425d6d":"# Imports","dbfd4e6f":"# Custom plotting Functions","b600fc23":"## Deal with `Name`","7e58b7db":"### Observations, In total survivors \n- ~40% ~24% ~ 35% were from **Pclass** `1`, `2`, `3` respectively\n- ~68% of survivors were **Female**\n- ~62% of survivors had `0` **siblings\/spouse**\n- ~68% of survivors had `0` **parents\/siblings**\n- ~64% of survivors Embarked from `S`\n","232a331f":"## Looking at Continuous Cols","c5e22150":"**Clearly we need to deal with outliers**","520d618e":"**Similar to Age, lets bin the Fare column too**","b42bad0c":"**Lets bin the age column, lets use pandas.qcut to get a unifrom distribution bins**","b5d02372":"### Q1. Survived % in each discrete feature category","4af7836d":"## lets deal with `Embarked` missing values","2fe7f7b0":"### Q2. Stats between total number of  survivors","3a64c05e":"**Lets modify the bins so that we could use the same bins for train data too, after which we will use pandas.cut function to bin it**\n\n**Also to deal with missing values lets just replace with 500, and use that as separate category**","85b0364d":"# Introduction\n\n### In this notebook I will dive deep into EDA and building a model\n### Feel Free to drop your suggestions\n### Upvote if you found it insightfull\n\n**NOTE: This notebook is still under development**\n\n\n| Variable |                 Definition                 |                       Key                      |\n|:--------:|:------------------------------------------:|:----------------------------------------------:|\n| survival | Survival                                   | 0 = No, 1 = Yes                                |\n| pclass   | Ticket class                               | 1 = 1st, 2 = 2nd, 3 = 3rd                      |\n| sex      | Sex                                        |                                                |\n| Age      | Age in years                               |                                                |\n| sibsp    | # of siblings \/ spouses aboard the Titanic |                                                |\n| parch    | # of parents \/ children aboard the Titanic |                                                |\n| ticket   | Ticket number                              |                                                |\n| fare     | Passenger fare                             |                                                |\n| cabin    | Cabin number                               |                                                |\n| embarked | Port of Embarkation                        | C = Cherbourg, Q = Queenstown, S = Southampton |\n\n\n### Variable Notes\n\n**pclass**: A proxy for socio-economic status (SES)\n\n1st = Upper\n\n2nd = Middle\n\n3rd = Lower\n\n\n**age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n**sibsp**: The dataset defines family relations in this way...\n\n**Sibling** = brother, sister, stepbrother, stepsister\n\n**Spouse** = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n**parch**: The dataset defines family relations in this way...\n\nParent = mother, father\n\nChild = daughter, son, stepdaughter, stepson\n\nSome children travelled only with a nanny, therefore parch=0 for them.","bc570ad0":"# Encoding","142355b8":"# Custom Methods for pandas","13427828":"## Lets drop `Ticket`","40055e78":"# Build Model","3bc2a8c5":"## Looking at discrete columns","f9b0847f":"# Importing data and initial impressions","120bae12":"# EDA and Data Cleaning","5989aadb":"### Observations\n\n**only ~38% survived**\n\n**Pclass**\n- if `1` ~63% survived\n- if `2` ~47% survived\n- if `3` ~25% survived\n\n**Sex**\n- if `female` ~75% survived\n- if `male` ~19% survived\n\n**SibSp**\n- if `0` ~35%\n- if `1` ~54%\n- if `2` ~46%\n- if `3` ~25%\n- if `4` ~16%\n- if `5` ~0%\n- if `8` ~0%\n\n**Parch**\n- if `0` ~34%\n- if `1` ~55%\n- if `2` ~50%\n- if `3` ~60%\n- if `4` ~0%\n- if `5` ~20%\n- if `6` ~0%\n\n**Embarked**\n- `C` ~55%\n- `Q` ~39%\n- `S` ~34%\n","f0917d19":"### Lets deal with Fare"}}