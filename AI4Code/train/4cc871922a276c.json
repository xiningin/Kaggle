{"cell_type":{"c5228db5":"code","d2c6e4e2":"code","9554e8c0":"code","20917f14":"code","39f5aebc":"code","298f641e":"code","0c8fd7a3":"code","4582b585":"code","39517058":"code","6df575be":"code","cb13c85d":"code","9d9834cb":"code","b40e2b42":"code","de91a785":"code","c37a2da8":"code","af4372ae":"code","97ed4475":"code","565699b1":"code","18fe652f":"code","6c17b51d":"code","fb9f6123":"code","4a5ac237":"code","7085a5b9":"code","0d161ee9":"code","fa764e04":"code","bf090fea":"code","95317468":"code","aeb9747c":"code","c4716f32":"code","65a28473":"code","25965f99":"code","5d016344":"markdown","3092537b":"markdown","ed009705":"markdown","46e49b5f":"markdown","5314ae0b":"markdown","b89896b7":"markdown","dd819c9d":"markdown","fe604f77":"markdown","2c41d443":"markdown","1394d6f1":"markdown","0b770126":"markdown","97c1cf72":"markdown","d48e2a35":"markdown","4c7b7417":"markdown","18bac44f":"markdown","5185e2f0":"markdown","d8531c94":"markdown","55dd8dc7":"markdown"},"source":{"c5228db5":"import numpy as np\nimport pandas as pd","d2c6e4e2":"from sklearn.datasets import load_breast_cancer\ndata = load_breast_cancer()","9554e8c0":"data.data","20917f14":"data.feature_names","39f5aebc":"data.target","298f641e":"data.target_names","0c8fd7a3":"df = pd.DataFrame(np.c_[data.data, data.target], columns = [list(data.feature_names)+['target']])","4582b585":"df.head()","39517058":"df.tail()","6df575be":"df.shape","cb13c85d":"X = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\nX.shape, y.shape","9d9834cb":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","b40e2b42":"from sklearn.svm import SVC","de91a785":"model_default = SVC() # Default kernel = 'rbf'\nmodel_default.fit(X_train, y_train)\nmodel_default.score(X_valid, y_valid)","c37a2da8":"pred_default = model_default.predict(X_valid)","af4372ae":"from sklearn.metrics import average_precision_score\n\naverage_precision = average_precision_score(y_valid, pred_default)\n\nprint('Average precision-recall score: {0:0.2f}'.format(average_precision))","97ed4475":"from sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_precision_recall_curve\nimport matplotlib.pyplot as plt\n\ndisp = plot_precision_recall_curve(model_default, X_valid, y_valid)\ndisp.ax_.set_title('2-class Precision-Recall curve: ''AP={0:0.2f}'.format(average_precision))","565699b1":"from sklearn.metrics import precision_score,recall_score, confusion_matrix, classification_report, accuracy_score, f1_score\n\nprint ('Accuracy:', accuracy_score(y_valid, pred_default))\nprint ('F1 score:', f1_score(y_valid, pred_default))\nprint ('Recall:', recall_score(y_valid, pred_default))\nprint ('Precision:', precision_score(y_valid, pred_default))\nprint ('\\n clasification report:\\n', classification_report(y_valid,pred_default))\nprint ('\\n confussion matrix:\\n',confusion_matrix(y_valid, pred_default))","18fe652f":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","6c17b51d":"sc.fit(X_train)\nX_train_sc = sc.transform(X_train)\nX_valid_sc =sc.transform(X_valid)","fb9f6123":"model_default_sc = SVC() # Default kernel = 'rbf'\nmodel_default_sc.fit(X_train_sc, y_train)\nprint(\"Score on Train DataSet --> \", model_default_sc.score(X_valid_sc, y_valid))\n\npred_default_sc = model_default_sc.predict(X_valid_sc)\n\naverage_precision_sc = average_precision_score(y_valid, pred_default_sc)\n\nprint('Average precision-recall score: {0:0.2f}'.format(average_precision_sc))\n\nprint ('Accuracy:', accuracy_score(y_valid, pred_default_sc))\nprint ('F1 score:', f1_score(y_valid, pred_default_sc))\nprint ('Recall:', recall_score(y_valid, pred_default_sc))\nprint ('Precision:', precision_score(y_valid, pred_default_sc))\nprint ('\\n clasification report:\\n', classification_report(y_valid,pred_default_sc))\nprint ('\\n confussion matrix:\\n',confusion_matrix(y_valid, pred_default_sc))","4a5ac237":"model_default_poly_2 = SVC(kernel = 'poly', degree = 2)  \nmodel_default_poly_2.fit(X_train_sc, y_train)\nprint(\"Score on Train DataSet --> \", model_default_poly_2.score(X_valid_sc, y_valid))\n\npred = model_default_poly_2.predict(X_valid_sc)\n\nprint('Average precision-recall score: {0:0.2f}'.format(average_precision_score(y_valid, pred)))\n\nprint ('Accuracy:', accuracy_score(y_valid, pred))\nprint ('F1 score:', f1_score(y_valid, pred))\nprint ('Recall:', recall_score(y_valid, pred))\nprint ('Precision:', precision_score(y_valid, pred))\nprint ('\\n clasification report:\\n', classification_report(y_valid,pred))\nprint ('\\n confussion matrix:\\n',confusion_matrix(y_valid, pred))","7085a5b9":"model_default_poly_3 = SVC(kernel = 'poly', degree = 3)  \nmodel_default_poly_3.fit(X_train_sc, y_train)\nprint(\"Score on Train DataSet --> \", model_default_poly_3.score(X_valid_sc, y_valid))\n\npred = model_default_poly_2.predict(X_valid_sc)\n\nprint('Average precision-recall score: {0:0.2f}'.format(average_precision_score(y_valid, pred)))\n\nprint ('Accuracy:', accuracy_score(y_valid, pred))\nprint ('F1 score:', f1_score(y_valid, pred))\nprint ('Recall:', recall_score(y_valid, pred))\nprint ('Precision:', precision_score(y_valid, pred))\nprint ('\\n clasification report:\\n', classification_report(y_valid,pred))\nprint ('\\n confussion matrix:\\n',confusion_matrix(y_valid, pred))","0d161ee9":"model_default_li = SVC(kernel = 'linear')  \nmodel_default_li.fit(X_train_sc, y_train)\nprint(\"Score on Train DataSet --> \", model_default_li.score(X_valid_sc, y_valid))\n\npred = model_default_li.predict(X_valid_sc)\n\nprint('Average precision-recall score: {0:0.2f}'.format(average_precision_score(y_valid, pred)))\n\nprint ('Accuracy:', accuracy_score(y_valid, pred))\nprint ('F1 score:', f1_score(y_valid, pred))\nprint ('Recall:', recall_score(y_valid, pred))\nprint ('Precision:', precision_score(y_valid, pred))\nprint ('\\n clasification report:\\n', classification_report(y_valid,pred))\nprint ('\\n confussion matrix:\\n',confusion_matrix(y_valid, pred))","fa764e04":"# # environment settings: \n# pd.set_option('display.max_column',None)","bf090fea":"patient = X_valid[:1]\npatient","95317468":"patient = [10.8,21.98,68.79,359.9,0.08801,0.05743,0.03614,0.01404,0.2016,0.05977,0.3077,1.621,2.24,20.2,0.006543,0.02148,0.02991,0.01045,0.01844,0.00269,12.76,32.04,83.69,489.5,0.1303,0.1696,0.1927,0.07485,0.2965,0.07662]\npatient","aeb9747c":"# Scale the data using the same transform()\npatient_sc = sc.transform(np.array([patient]))\npatient_sc","c4716f32":"model_default_li.predict(patient_sc)","65a28473":"print(data.target_names )\nprint(\"Value 1 indicates --> \", data.target_names[1])","25965f99":"pred =model_default_li.predict(patient_sc)\n\nif pred[0] == 0:\n    print('Patient diagonised as Cancer impacted (Malignant Tumor)')\nelse :\n    print('Patient diagonised as Non-Cancer (Benign)')","5d016344":"# 1. Import Libraries","3092537b":"# 4. Model Building\nTrain SVM","ed009705":"With default parameter we got an accuracy of 93%. However we are dealing with Medical related predictions, so instead of focuing on accuracy, we have to focus on precision and recall, which will give us the actual picture. \n\n        Precision-Recall is a useful measure of success of prediction when the classes are very imbalanced. In information retrieval,  **precision** is a measure of result relevancy, while **recall** is a measure of how many truly relevant results are returned.\n\nSo lets check these now.","46e49b5f":"Another way to check precision and recall  ","5314ae0b":"So after feature scaling, we could see that the score on train dataset is increased from 93% to 95%, as well the Average Precision-Recall score was increase from 92% to 97%. SO definately scaling helped here.","b89896b7":"# 3. Split DataSet","dd819c9d":"With Polynomial Degree 2, it accuracy on train dataset is went down to 81%, and average peprecision-recall score is also gone down to 80%.","fe604f77":"# 5. Feature Scaling","2c41d443":"Better than Degree 2, but still lower than default kernel.","1394d6f1":"# 6. Hypertuning","0b770126":"# 7. Predict","97c1cf72":"# 2. Load Datase","d48e2a35":"# 6.2 SVC with Kerenel Polynomial Degree 3","4c7b7417":"# 6.1 SVC with Kernel as Polynomial and degree 2","18bac44f":"# 6.3 SVC with Linear kernel","5185e2f0":"With Linear kernel, we got good accuracy, and nearly similar and on higher side when compared to default.","d8531c94":"Plot Plot the Precision-Recall curve","55dd8dc7":"Here we got the value as 1, which means its a \"benign\""}}