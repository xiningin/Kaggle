{"cell_type":{"cc4e931b":"code","67b1d1d0":"code","1e7a398b":"code","5e50b71e":"code","5e6d007c":"code","ebc995d9":"code","232359e8":"code","5c8adb60":"code","e604a2a8":"code","610ad14d":"code","c8dfb834":"code","e24461f9":"code","22f01ea8":"code","258796e9":"code","706c9172":"code","1496f5c4":"code","7d8dfd3d":"code","67222f0a":"code","34a23d04":"code","72256aaf":"code","1ef6c142":"code","27c7b502":"code","f222cae9":"code","a3b474c2":"code","d24d5e7f":"code","86980965":"code","ca69dce0":"code","977b53be":"code","15730d8a":"code","0d96e38e":"code","1e5bc905":"code","d5d54edd":"code","4ea33e83":"code","f3acde1f":"code","5bf705ac":"code","063ee941":"code","1494092a":"code","356888cb":"code","76994edc":"code","eace3ccd":"code","005bee78":"code","9fc7c4b9":"code","e4d320de":"code","368ab755":"markdown","9367a3c0":"markdown","8e32190f":"markdown","8b1b65cf":"markdown","67e689f6":"markdown","3101f32e":"markdown","b873b647":"markdown","e0f79200":"markdown","abb0e40f":"markdown","bdc14ed9":"markdown","995898e5":"markdown","6aacb268":"markdown","92361e8d":"markdown","1617e4e7":"markdown","cbee3f2c":"markdown","a63f23a3":"markdown","4fcc86d7":"markdown","2e6ad95b":"markdown","d60cc710":"markdown","76b32fab":"markdown","2736a0c1":"markdown","e8bee0e3":"markdown","00066bec":"markdown","af18369e":"markdown","0e7b8281":"markdown","a491f396":"markdown","b9170348":"markdown","e42f818d":"markdown","f948d4ba":"markdown","784a6763":"markdown","48f11284":"markdown","aa900bc6":"markdown","20cfec25":"markdown","39e98e61":"markdown","82a2ea23":"markdown","f05b1f0e":"markdown","e14458cb":"markdown","351d6587":"markdown","dca799bb":"markdown","8debfdd0":"markdown","a8087132":"markdown","5a53f2fd":"markdown","e9bdada3":"markdown","e8b72947":"markdown","33e05520":"markdown","afc8a4f6":"markdown","36bbcffe":"markdown","b7065cb2":"markdown","cb245f06":"markdown","6eb819d5":"markdown"},"source":{"cc4e931b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nroot_path = '..\/input\/'\nprint('The csv files provided are:\\n')\nprint(os.listdir(root_path))","67b1d1d0":"df_emails = pd.read_csv(root_path + 'emails.csv')\ndf_questions = pd.read_csv(root_path + 'questions.csv')\ndf_professionals = pd.read_csv(root_path + 'professionals.csv')\ndf_comments = pd.read_csv(root_path + 'comments.csv')\ndf_tag_users = pd.read_csv(root_path + 'tag_users.csv')\ndf_group_memberships = pd.read_csv(root_path + 'group_memberships.csv')\ndf_tags = pd.read_csv(root_path + 'tags.csv')\ndf_answer_scores = pd.read_csv(root_path + 'answer_scores.csv')\ndf_students = pd.read_csv(root_path + 'students.csv')\ndf_groups = pd.read_csv(root_path + 'groups.csv')\ndf_tag_questions = pd.read_csv(root_path + 'tag_questions.csv')\ndf_question_scores = pd.read_csv(root_path + 'question_scores.csv')\ndf_matches = pd.read_csv(root_path + 'matches.csv')\ndf_answers = pd.read_csv(root_path + 'answers.csv')\ndf_school_memberships = pd.read_csv(root_path + 'school_memberships.csv')","1e7a398b":"print('questions')\ndisplay(df_questions.head(2))\nprint('answers')\ndisplay(df_answers.head(2))","5e50b71e":"df_questions['questions_date_added'] = pd.to_datetime(df_questions['questions_date_added'])\ndf_answers['answers_date_added'] = pd.to_datetime(df_answers['answers_date_added'])\ndf_qa = pd.merge(df_questions, df_answers, left_on='questions_id', right_on='answers_question_id', how='left')\ndf_qa_grouped = df_qa.groupby('questions_id').agg({'questions_date_added':min, 'answers_date_added':min,\n                                                   'questions_body':min})\ndf_qa_grouped['days_taken'] = (df_qa_grouped['answers_date_added'] - df_qa_grouped['questions_date_added']).dt.days\ndf_qa_grouped['questions_body_length'] = df_qa_grouped['questions_body'].apply(len)","5e6d007c":"print('Numerical summary of days taken to answer a question')\ndisplay(df_qa_grouped['days_taken'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Distribution of days taken to answer a question')\nplt.hist(df_qa_grouped['days_taken'], color='blue', edgecolor='black', bins=100)\nplt.xlabel('min days taken to answer a question')\nplt.ylabel('count')","ebc995d9":"print('Correlation between length of the body of questions and response time')\ndisplay(df_qa_grouped[['questions_body_length', 'days_taken']].corr())\nplt.figure(figsize=(10,6))\nplt.scatter(df_qa_grouped['questions_body_length'], df_qa_grouped['days_taken'])\nplt.xlabel('questions_body_length')\nplt.ylabel('days_taken')","232359e8":"print('The number of questions that are unanswered are:', df_qa['answers_id'].isnull().sum(axis=0))","5c8adb60":"print('Numerical summary of count of questions with respect to time')\ndisplay(df_questions['questions_date_added'].dt.year.describe())\nplt.figure(figsize=(10,6))\nplt.title('Count of questions with respect to time')\nsns.countplot(df_questions['questions_date_added'].dt.year, color='violet')","e604a2a8":"print('tags')\ndisplay(df_tags.head(2))\nprint('tag_users')\ndisplay(df_tag_users.head(2))\nprint('tag_questions')\ndisplay(df_tag_questions.head(2))","610ad14d":"#To see the tags that every user follows \ndf_tag_users_merged = pd.merge(df_tag_users, df_tags, left_on='tag_users_tag_id', right_on='tags_tag_id', how='inner')\n#To see the tags that are linked with every question\ndf_tag_questions_merged = pd.merge(df_tag_questions, df_tags, left_on='tag_questions_tag_id', right_on='tags_tag_id', how='inner')","c8dfb834":"plt.figure(figsize=(10,6))\nplt.title('50 most popular tags wrt user following')\nsns.countplot(df_tag_users_merged[df_tag_users_merged['tags_tag_name'].isin(\n    df_tag_users_merged['tags_tag_name'].value_counts().index[:50])]['tags_tag_name'], color='maroon', order=df_tag_users_merged['tags_tag_name'].value_counts().index[:50])\nplt.ylabel('count')\nplt.xticks(rotation='vertical')","e24461f9":"plt.figure(figsize=(10,6))\nplt.title('50 most popular tags wrt the number of questions they are linked to')\nsns.countplot(df_tag_questions_merged[df_tag_questions_merged['tags_tag_name'].isin(\n    df_tag_questions_merged['tags_tag_name'].value_counts().index[:50])]['tags_tag_name'], color='maroon', order=df_tag_questions_merged['tags_tag_name'].value_counts().index[:50])\nplt.ylabel('count')\nplt.xticks(rotation='vertical')","22f01ea8":"relevant_tags = set(df_tag_questions_merged['tag_questions_tag_id'].unique()).union(set(df_tag_users_merged['tag_users_tag_id'].unique()))\nlen(relevant_tags)","258796e9":"print('The total number of unique tagged users is:', df_tag_users_merged['tag_users_user_id'].nunique())\nprint('The total number of unique tags is:', df_tags['tags_tag_id'].nunique())\nprint('The total number of unique tagged questions is:', df_tag_questions_merged['tag_questions_question_id'].nunique())\nprint('The proportion of total questions that are linked with tags:', \n      df_tag_questions_merged['tag_questions_question_id'].nunique()\/df_questions['questions_id'].nunique())\nprint('The proportion of tags that are linked with questions out of the total number of tags:', \n      df_tag_questions_merged['tag_questions_tag_id'].nunique()\/df_tags['tags_tag_id'].nunique())\nprint('The proportion of tags that are followed by users out of the total number of tags:', \n      df_tag_users_merged['tag_users_tag_id'].nunique()\/df_tags['tags_tag_id'].nunique())\nprint('The total number of tags that have a user following > 1% :', \n      sum(df_tag_users_merged['tags_tag_name'].value_counts()\/df_tag_users_merged['tag_users_user_id'].nunique() > 0.01)) \nprint('The total number of tags that are used in > 1% of the tagged questions:', \n      sum(df_tag_questions_merged['tags_tag_name'].value_counts()\/df_tag_questions_merged['tag_questions_question_id'].nunique() > 0.01)) ","706c9172":"user_tags = list((df_tag_users_merged['tags_tag_name'].value_counts()\/df_tag_users_merged['tag_users_user_id'].nunique() \n                     > 0.01).index[(df_tag_users_merged['tags_tag_name'].value_counts()\/df_tag_users_merged['tag_users_user_id'].nunique() > 0.01)])\nquestion_tags = list((df_tag_questions_merged['tags_tag_name'].value_counts()\/df_tag_questions_merged['tag_questions_question_id'].nunique() \n                     > 0.01).index[(df_tag_questions_merged['tags_tag_name'].value_counts()\/df_tag_questions_merged['tag_questions_question_id'].nunique() > 0.01)])\nprint('The total number of tags:', len(set(question_tags).union(user_tags)))\nprint('The number of common tags:', len(set(question_tags).intersection(user_tags)))\nprint('The tags are:\\n', set(question_tags).intersection(user_tags))","1496f5c4":"print('Coverage of tagged questions:', df_tag_questions_merged[df_tag_questions_merged['tags_tag_name'].isin(\n    set(user_tags).union(set(question_tags)))]['tag_questions_question_id'].nunique()\/df_tag_questions_merged['tag_questions_question_id'].nunique())","7d8dfd3d":"print('Coverage of tagged users:', df_tag_users_merged[df_tag_users_merged['tags_tag_name'].isin(\n    set(user_tags).union(set(question_tags)))]['tag_users_user_id'].nunique()\/df_tag_users_merged['tag_users_user_id'].nunique())","67222f0a":"def print_if_found(df, column, string):\n    print(df[df[column].str.contains(string)][column].unique())\nprint_if_found(df_tag_users_merged, 'tags_tag_name', 'computer')","34a23d04":"print_if_found(df_tag_users_merged, 'tags_tag_name', 'psychology')","72256aaf":"#Looking at tags and questions\nprint('Numerical summary of the number of tags linked with every question')\ndisplay(df_tag_questions.groupby('tag_questions_question_id').agg({'tag_questions_tag_id':'count'})['tag_questions_tag_id'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Count of the number of tags linked with every question')\nsns.countplot(df_tag_questions.groupby('tag_questions_question_id').agg({'tag_questions_tag_id':'count'})['tag_questions_tag_id'], color='orange')\nplt.xlabel('count of tags')\nplt.ylabel('count')","1ef6c142":"print('professionals')\ndisplay(df_professionals.head(2))","27c7b502":"#To see the profile of the volunteers and the questions that they have answered\ndf_answers_professionals = pd.merge(df_answers, df_professionals, left_on='answers_author_id', right_on='professionals_id', how='outer')","f222cae9":"print('Number of professionals that are there on the platform:', df_professionals['professionals_id'].nunique())\nprint('Number of professionals that haven\\'t answered questions on the platform:', df_answers_professionals['answers_id'].isnull().sum())\nprint('Number of answers that have been answered by users who have changed their registration type:', \n      len(set(df_answers['answers_author_id']) - set(df_professionals['professionals_id'])))\nprint('Proportion of professionals who haven\\'t answered a question:', \n     df_answers_professionals['answers_id'].isnull().sum()\/df_professionals['professionals_id'].nunique())","a3b474c2":"last_date = df_questions['questions_date_added'].max() #date of the last question asked on the platform\ndf_ap_grouped = df_answers_professionals.groupby('professionals_id').agg({'answers_date_added':max}).apply(lambda x:\n                                                                                          (last_date-x).dt.days)\ndf_ap_grouped.rename(columns={'answers_date_added':'days_since_answered'}, inplace=True)\nprint('Numerical summary of days_since_answered')\ndisplay(df_ap_grouped['days_since_answered'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Activity of professionals')\nplt.hist(df_ap_grouped['days_since_answered'], bins=50, color='blue', edgecolor='black')\nplt.xlabel('days_since_answered')\nplt.ylabel('count')","d24d5e7f":"plt.figure(figsize=(10,6))\nplt.title('Count of years since last answered')\nsns.countplot((df_ap_grouped[pd.notnull(df_ap_grouped['days_since_answered'])]['days_since_answered']\/365).apply(round), color='magenta')","86980965":"#Looking at professionals and tag\ndf_tag_professionals = pd.merge(df_tag_users_merged, df_professionals, left_on='tag_users_user_id', \n                                 right_on='professionals_id')\nprint('Proportion of tagged users that are professionals:', df_tag_professionals['professionals_id'].nunique()\/df_tag_users_merged['tag_users_user_id'].nunique())","ca69dce0":"print('Numerical summary of number of tags followed by tagged professionals')\ndisplay(df_tag_professionals.groupby('professionals_id').agg({'tag_users_tag_id':lambda x: len(x)})['tag_users_tag_id'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Count of number of tags followed by tagged professionals')\nsns.countplot(df_tag_professionals.groupby('professionals_id').agg({'tag_users_tag_id':len})['tag_users_tag_id'].astype(int), color='cyan')\nplt.xlim((0,30))","977b53be":"print('emails')\ndisplay(df_emails.head(2))\nprint('matches')\ndisplay(df_matches.head(2))","15730d8a":"df_emails_matches = pd.merge(df_emails, df_matches, left_on='emails_id', right_on='matches_email_id')\ndf_em_answers = pd.merge(df_emails_matches, df_answers, left_on=['emails_recipient_id','matches_question_id'], \n                              right_on=['answers_author_id', 'answers_question_id'], how='left')\ngrouped_response_rate = df_em_answers.groupby('emails_recipient_id').agg({'answers_id':lambda x: \n                                   (x.notnull().sum())\/len(x)})['answers_id']\ndf_em_answers.head(2)","0d96e38e":"print('Number of professionals that have been sent emails:', df_emails_matches['emails_recipient_id'].nunique())\nprint('Number of professionals that have not answered even one question that was emailed to them:',\n      grouped_response_rate[grouped_response_rate == 0].shape[0])","1e5bc905":"df_em_answers_right = pd.merge(df_emails_matches, df_answers, left_on=['emails_recipient_id','matches_question_id'], \n                              right_on=['answers_author_id', 'answers_question_id'], how='right')\nprint('Number of professionals who have answered questions that weren\\'t emailed to them:', \n     (df_em_answers_right.groupby('answers_author_id').agg({'emails_id': lambda x: x.isnull().sum()})['emails_id']!=0).sum())","d5d54edd":"print('Numerical summary of the response rate')\ndisplay(grouped_response_rate.describe())\nplt.figure(figsize=(10,6))\nplt.title('Response rate of matched questions')\nplt.hist(grouped_response_rate, color='blue', edgecolor='black',bins=50)\nplt.ylabel('count')\nplt.xlabel('response rate')","4ea33e83":"plt.figure(figsize=(10,6))\nplt.title('Response rate of matched questions > 0')\nplt.hist(grouped_response_rate[grouped_response_rate > 0], color='blue', edgecolor='black',bins=50)\nplt.ylabel('count')\nplt.xlabel('response rate > 0')","f3acde1f":"grouped_immediate_rate = df_emails_matches.drop_duplicates(['emails_recipient_id', 'emails_id']).groupby('emails_recipient_id').agg({'emails_frequency_level': \n                                        lambda x: (x.str.contains('email_notification_immediate').sum())\/len(x)})['emails_frequency_level']\nplt.figure(figsize=(10,6))\nplt.title('Proportion of immediate emails')\nplt.hist(grouped_immediate_rate, color='blue', edgecolor='black', bins=50)\nplt.ylabel('count')\nplt.xlabel('proportion of immmediate emails')","5bf705ac":"grouped_immediate_response = df_em_answers.groupby(['emails_recipient_id', 'emails_frequency_level']).agg({'answers_id': \n                                                    lambda x: (x.notnull().sum())\/len(x)}).reset_index()\nplt.figure(figsize=(10,6))\nplt.title('Distribution of response rate of immediate questions')\nplt.hist(grouped_immediate_response[grouped_immediate_response['emails_frequency_level']==\n                                    'email_notification_immediate']['answers_id'], color='blue', edgecolor='black', bins=50)\nplt.xlabel('response rate')\nplt.ylabel('count')","063ee941":"print('students')\ndisplay(df_students.head(2))\nprint('groups')\ndisplay(df_groups.head(2))\nprint('group_memberships')\ndisplay(df_group_memberships.head(2))\nprint('school_memberships')\ndisplay(df_school_memberships.head(2))","1494092a":"#To see the group memberships and type together\ndf_groups_merged = pd.merge(df_group_memberships, df_groups, left_on='group_memberships_group_id', right_on='groups_id', how='outer')\ndf_groups_professionals = pd.merge(df_groups_merged, df_professionals, left_on='group_memberships_user_id', right_on='professionals_id')\ndf_groups_students = pd.merge(df_groups_merged, df_students, left_on='group_memberships_user_id', right_on='students_id')\ndf_school_professionals = pd.merge(df_school_memberships, df_professionals, left_on='school_memberships_user_id', right_on='professionals_id')\ndf_school_students = pd.merge(df_school_memberships, df_students, left_on='school_memberships_user_id', right_on='students_id')","356888cb":"print('Number of groups that don\\'t have a user following:', df_groups_merged['group_memberships_group_id'].isnull().sum())\nprint('Total number of users that have a group membership:', df_groups_merged['group_memberships_user_id'].nunique())\nprint('Proportion of users in the group memberships that are professionals:', df_groups_professionals['professionals_id'].nunique()\/\n     df_groups_merged['group_memberships_user_id'].nunique())\nprint('Proportion of users in the group memberships that are students:', df_groups_students['students_id'].nunique()\/\n     df_groups_merged['group_memberships_user_id'].nunique())\nprint('Total number of users that have a school membership:', df_school_memberships['school_memberships_user_id'].nunique())\nprint('Proportion of users in the school memberships that are professionals:', df_school_professionals['professionals_id'].nunique()\/\n     df_school_memberships['school_memberships_user_id'].nunique())\nprint('Proportion of users in the school memberships that are students:', df_school_students['students_id'].nunique()\/\n     df_school_memberships['school_memberships_user_id'].nunique())","76994edc":"df_students_questions = pd.merge(df_students, df_questions, left_on='students_id', right_on='questions_author_id')\nprint('Number of students on the platform:', df_students['students_id'].nunique())\nprint('Proportion of students who have asked a question on the platform:', df_students_questions['students_id'].nunique()\/df_students['students_id'].nunique())","eace3ccd":"print('comments')\ndisplay(df_comments.head(2))\nprint('question_scores')\ndisplay(df_question_scores.head(2))\nprint('answer_scores')\ndisplay(df_answer_scores.head(2))","005bee78":"print('Number of comments:', df_comments['comments_id'].nunique())\nprint('Proportion of comments on questions:',\n      len(set(df_comments['comments_parent_content_id']).intersection(set(df_questions['questions_id'])))\/df_comments['comments_parent_content_id'].nunique())\nprint('Proportion of comments on answers:',\n      len(set(df_comments['comments_parent_content_id']).intersection(set(df_answers['answers_id'])))\/df_comments['comments_parent_content_id'].nunique())","9fc7c4b9":"print('Numerical summary of count of hearts on questions')\ndisplay(df_question_scores['score'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Count of hearts on questions ')\nsns.countplot(df_question_scores['score'], color='red')\nplt.xlim(0,30)","e4d320de":"print('Numerical summary of count of hearts on answers')\ndisplay(df_answer_scores['score'].describe())\nplt.figure(figsize=(10,6))\nplt.title('Count of hearts on answers ')\nsns.countplot(df_answer_scores['score'], color='red')","368ab755":"**How many professionals have answered questions that were not sent to them?**","9367a3c0":"1% of tagged questions is basically 232 questions in total. In other words, 232 questions or lesser are tagged with the other 7040 tags.\n\nIf we look at the tags in the last 2 groups - tags that have a user following of > 1% (user_tags) and tags that are used in >1% of the tagged questions (question_tags)","8e32190f":"**Insights**\n\n- Very few users (professionals and students) are a part of groups and school memberships\n- 40% of students have asked a question on the platform. Does that mean that the others have questions that get asked by other students and answered by the relevant professionals?","8b1b65cf":"## Students, Groups and School Memberships","67e689f6":"**Basic information about the tables and initial thoughts**\n\n\u2022\tstudents.csv: They tend to range in age from about 14 to 24. 2033 null values in student_location.\n\n\u2022\tgroups.csv: There are a total of 49 group ids, which suggests that either 3 groups are new or that no students are a part of these 3 group ids.  Every group id is mapped to a group type. There are a total of 7 group types. Has no null values\n\n\u2022\tgroup_memberships.csv: Any type of user can join any group. There are a total of 46 groups. Has no null values. This can be useful. A cross tab of topic of the question asked by the student vs the group id that he\/she belongs to will be handy in understanding the agenda of the group.  Has no null values\n\n\u2022\tschool_memberships.csv: Just like group_memberships, but for schools instead. Can be analysed in a similar fashion to group_memberships. Do people from the same schools ask similar questions?","3101f32e":"**Insights**\n\n- Most tags are in the long tail of the distribution. This is a caveat of not restricting user control\/creation. While some tags may be extremely specific such as anthropology or human-computer-interaction, some tags are just misspellings or are similar to a lot of other tags. \n- The popularity wrt user following is skewed towards tech (telecommunication, computer science, IT etc.)\n- Just 86 tags cover nearly 70% of tagged users and tagged questions\n- Majority of the questions are linked with <4 tags. The count just decreases as we increase the number of tags","b873b647":"## EDA\n\nThe basic structure of every component under EDA:\n\n- head of the relevant tables\n- basic information and initial thoughts\n- questions and exploratory data analysis\n- insights\n- strategy\n\n### Index\n\n1. [Questions and Answers](#Questions-and-Answers)\n2. [Tags](#Tags)\n3. [Professionals](#Professionals)\n4. [Emails and Matches](#Emails-and-Matches)\n5. [Students, Groups and School Memberships](#Students,-Groups-and-School-Memberships)\n6. [Comments, Question and Answer Scores](#Comments,-Question-and-Answer-Scores)","e0f79200":"A cursory glance across the names of the tags reveals that a lot of tags are similar to a lot of other tags","abb0e40f":"Now let's look at the the distribution of the activity of the professionals to know which professionals haven't answered questions in some time. We'll take the date of the last question asked as the reference date.","bdc14ed9":"**How many questions are unanswered?**","995898e5":"**How many emails have a frequency type of immediate out of the total emails that a professional receives?**","6aacb268":"This reveals that out of the 3754 professionals that have answered atleast one question, a little less than 2500 professionals have a response rate < 2%","92361e8d":"**Strategy**\n\n- Apply thresholded matching to recommend questions. Instead of a 1:1 match, look at partial matches and recommend questions to professionals if the tags on the question have a match with the tags that a professional follows above a certain threshold\n- In order to assess the performance of the recommender system, we can look at the recommended questions and see the ones that he has answered out of those. This is the metric that we'll optimize for","1617e4e7":"## Comments, Question and Answer Scores","cbee3f2c":"**Strategy**\n\n- Since 50% of professionals have answered questions in the last 1.5 years, we will recommend questions to these professionals mostly\n- Along with these active professionals, we may also want to send questions to inactive professionals in order to engage and encourage them to answer questions on the platform\n- The location attribute can be refined by using techniques as described above in the Tags section\n- For the header and industry variables, we can either use [Named Entity Recognition](https:\/\/towardsdatascience.com\/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da) or extract important words by using a [tf-idf](http:\/\/tfidf.com\/) approach","a63f23a3":"## Tags ","4fcc86d7":"**What are some of the most popular tags?**","2e6ad95b":"## Emails and Matches","d60cc710":"**Basic information about the tables and initial thoughts**\n\n\u2022\ttags.csv (Contains text): Each tag gets a name. There are 16269 distinct tags. We suspect that any user is allowed to create a hashtag and that most tags are similar to a lot of ther tags. No null values\n\n\u2022\ttag_users.csv: Users of any type can follow a hashtag. This shows you which hashtags each user follows. No null values. \n\n\u2022\ttag_questions.csv: Every question can be hashtagged. The hashtag-to-question pairings are contained in this file. No null values.","76b32fab":"**What does the distribution of the number of tags linked with every question look like?**","2736a0c1":"**What is the distribution of time with which questions get answered and is there any relation between the response time and the length of the question body?**","e8bee0e3":"**Basic information about the tables and initial thoughts**\n\n\u2022\temails.csv: Each email corresponds to one specific email to one specific recipient. The frequency_level refers to the 3 types of email templates which includes immediate emails sent right after a question is asked, daily digests, and weekly digests. Has no null values\n\n\u2022\tmatches.csv: Each row tells you which questions were included in emails. If an email contains only one question, that email's ID will show up here only once. If an email contains 10 questions, that email's ID would show up here 10 times. Has no null values\n\nThe matches table is an interesting one since it provides us with a way to assess relevance. We can look at the table and know:\n- which questions was a professional sent\n- which questions he has answered in the past","00066bec":"Thus the final solution can be a combination of multiple different recommender systems that act in tandem to make the best recommendations and also improve the relevance\/response rate.","af18369e":"**Insights**\n\n- There are a few minor problems in the date variable in both questions.csv as well as answers.csv. The minimum number of days taken to answer a question is coming out to be -1.\n- Most questions get answered typically within 2 days. Furthermore, less than 4% of the questions in the dataset are unanswered.\n- There doesn't seem to be any sort of correlation between questions_body_length and days_taken\n- The count of questions plot shows a dip in 2017. Majority of the questions were asked in the years 2016 and 2018","0e7b8281":"**Insights**\n\n- An alarming 83% of professionals haven't answered even one question mailed to them. This really tells you why this competition has been held in the first place.\n- (questions answered)\/(questions sent) which is the response rate gives us some sense of relevance of matches. The fact that 40% of professionals have answered atleast one question that wasn't emailed to them means that these professionals answer questions by directly going on the website which further suggests that most questions recommended are irrelevant\n- The response rates are hardly encouraging. A majority of those who have answered questions have response rates less than 2%. Maybe don\u2019t make the default as daily emails and instead focus on immediate and weekly email templates?  \n- As far as immediate emails are concerned, according to [this discussion](https:\/\/www.kaggle.com\/c\/data-science-for-good-careervillage\/discussion\/84845#latest-496046), a question gets recommended to a professional if any professional follows the same hashtags as to what's on the question. If so, CV notifies them immediately. Since there are too many tags a question can get linked with, there may not be a 1:1 match between the tags on the question and the tags that a user follows. What's also possible is that a user may follow only 1 hashtag which is probably quite broad (40% of professionals) and he may get questions that are linked with many hashtags which ends up becoming irrelevant to him.","a491f396":"Since we know that 18072 professionals haven't answered a single question, the plot above was expected. If we exclude the 18072 professionals and talk about the rest","b9170348":"**Basic information about the tables and initial thoughts**\n\n\u2022\tcomments.csv (Contains Text): Comments can be made on Answers or Questions. We refer to whichever the comment is posted to as the \"parent\" of that comment. Comments can be posted by any type of user. Has 4 null values in the comments_body field. This can provide additional information about the topic of the question \n\n\u2022\tquestion_scores.csv: \"Hearts\" scores for each question.\n\n\u2022\tanswer_scores.csv: \"Hearts\" scores for each answer.","e42f818d":"**How many professionals are actually active on the platfrom?**","f948d4ba":"**Basic information about the tables and initial thoughts**\n\n\u2022\tquestions.csv (Contains Text): Questions get posted by students. Sometimes they're very advanced. Sometimes they're just getting started. It's all fair game, as long as it's relevant to the student's future professional success. Has no null values. Important to understand the topic of the question so that we can club similar questions and send them to the volunteer who is the most likely to answer them.\n\n\u2022\tanswers.csv (Contains Text): Contains answers. Has 1 null value in the answers_body field. Important as we believe every author will mostly answer questions that he has expertise in. This combined with the professional's industry and headline can be a powerful way of understanding a professional's expertise. ","784a6763":"**How many students have asked a question on the platform?**","48f11284":"**Strategy**\n\n- In order to eliminate noise and refine tags, we need to couple similar tags together. Rank the tags in terms of user following. Then, as we go down the order, for a given tag, look at other tags that are similar. In order to do this, you can look at [fuzzywuzzy](https:\/\/github.com\/seatgeek\/fuzzywuzzy). This is also incorporated in the [nltk package](https:\/\/python.gotrained.com\/nltk-edit-distance-jaccard-distance\/).\n- Another way to combine them would be on the basis of semantic similarity by using [Word Mover Distance](https:\/\/markroxor.github.io\/gensim\/static\/notebooks\/WMD_tutorial.html). The coverage will definitely go up for tagged questions and tagged answers once we refine and combine the tags \n- Once we reduce the noise, a new question's degree of similiarity with another question on the basis of tags it is linked with can be calculated by using [cosine similarity](https:\/\/towardsdatascience.com\/overview-of-text-similarity-metrics-3397c4601f50). \n- What can also be done is we can look at professionals who are similar (may be on the basis of [cosine similarity](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.pairwise.cosine_similarity.html) or [jaccard similarity](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.jaccard_similarity_score.html)) wrt the tags they follow and direct the relevant questions towards them.","aa900bc6":"**Strategy**\n\n- For a given professional, combine the scores of the questions that he has answered, hearts on his answers and the number of comments on his answers\n- This will act as a proxy for user engagement with the professional and how well he is perceived on this platform","20cfec25":"**What is the breakdown of days_since_answered in terms of years?**","39e98e61":"**Insights**\n\n- Questions seem to have more 'hearts' than answers. Do students tend to upvote questions that are similar to the ones that they want to ask?\n- Is the paucity of hearts on answers suggestive of the fact that students are not getting the answer that they need for the question that they have asked?\n- If not, suggest recommending questions to students that are similar to the ones they have asked (so as to remove duplicates) and ask them to upvote the answers they find helpful. Upvotes is one way in which professionals will be encouraged to answer more questions on the platform and thus they won't churn out. The data can be then used to rank professionals under tags (for eg. Michael is a top-writer in #finance)\n- Number of views\/clicks on an answer would have been useful as the metric (likes\/clicks) could have been used to gauge relevance of an answer to a student. The paucity of likes on answers makes it hard to determine what user is more likely to give a *10-quality point answer*","82a2ea23":"## Professionals ","f05b1f0e":"**How does the distribution of the the count of questions look with respect to time?**","e14458cb":"**How many professionals have been sent emails and out of these professionals how many have not answered even one question? **","351d6587":"**What is the breakdown of the number of comments posted on question vs answers?**","dca799bb":"**What is the coverage of the union of user and question tags?**","8debfdd0":"**Strategy**\n\n- Group and School Memberships don't seem to be useful. The fill rates are very low for any sort of similarity computation\n- Location has a nice fill rate. [This kernel](https:\/\/www.kaggle.com\/wjshenggggg\/update-5-text-processing) deals with standardising locations of professionals and students. They can also be refined using the same techniques as the ones discussed under Tags\n- We can use the idea of collaborative filtering using cosine similairty to recommend questions. That is if Students A and B have similar interests, and if A has asked questions on the platform, then B's questions can be recommended to the professional that answered A's questions","a8087132":"This notebook is part of a three notebook submission ([Part II ](https:\/\/www.kaggle.com\/akshayt19nayak\/part-ii-tag-recsys-cosine-levenshtein-dist) and [Part III](https:\/\/www.kaggle.com\/akshayt19nayak\/part-iii-nlp-word-mover-distance)) for the Data Science for Good: CareerVillage.org challenge. Even though a lot of people have done an extensive EDA on the datasets provided, this notebook has been created to plan the workflow, gather additional insights (if any) and understand the scope of the problem. As I build the recommender system, I may find an insight which I will be committing here. The second notebook will focus on pre-processsing, model building and NLP which I haven't covered in much detail here. I have, however, inserted links to some of the interesting subproblems that need to be solved in order to build a reasonable model. ","5a53f2fd":"**Insights**\n\n- About 50% of the professionals have answered questions in the last 1.5 years\n- The fact that 84% of tagged users are professionals suggests that only a small population of students follow hashtags. Is it because they don't find questions that are similar to the ones that they have on their mind? Or is it because the amount of relevant questions that come under a particular hashtag is far lesser than the total number of questions asked?\n- Almost 40% of professionals follow only 1 hashtag. This one hashtag may not contain all relevant questions that a professional would want to answer. ","e9bdada3":"**Strategy**\n\n- In order to make recommendations and evaluate question similarity - either on the basis of metadata (such as tags) or wordings, we will be needing past data. A recommendation cannot be made unless we have data to begin with (cold start problem). Thus, we can use all questions asked prior to the year 2018 as the data source for computing questions similarity and we will keep updating it as we go along processing each question.\n- Evaluating similarity between 2 pieces of text is a hot research problem. To make a recommendation for a new question, you can either look at similar questions that were asked in the past and direct them to the professionals who answered them. A particularly useful resource could be [this article](https:\/\/medium.com\/@adriensieg\/text-similarities-da019229c894) that talks about estimating degree of similarity between two texts.","e8b72947":"**How does the distribution of count of scores compare for questions vs answers?**","33e05520":"## Questions and Answers","afc8a4f6":"**Basic information about the tables and initial thoughts**\n\n\u2022\tprofessionals.csv (Conatins text): They're the grown-ups who volunteer their time to answer questions on the site. Has 3098 null values in professionals_location, 2576 null values in professionals_industry, 2067 null values in professionals_headline","36bbcffe":"This is particularly insightful as nearly 40% of professionals have answered at least one question that wasn't emailed to them.","b7065cb2":"**Out of the questions that get mailed to the professionals, what is their response rate i.e how many of these questions get answered?**","cb245f06":"**How many tagged users are professionals and how does the distribution of the number of tags they follow look like?**","6eb819d5":"**How many users have a group membership\/school membership? What is the breakdown of professionals and students?**"}}