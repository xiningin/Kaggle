{"cell_type":{"b7488a4f":"code","1acba30a":"code","67f6f064":"code","aeb5247d":"code","05567029":"code","435af2c0":"code","368fd627":"code","642efdc3":"code","65204fc1":"code","9aa2ffd1":"code","8e98072f":"code","45023167":"code","1ec9d74e":"code","8fe1b2da":"code","88c617d5":"code","f880fb56":"code","e715504e":"code","30e03b9e":"code","d0d0910a":"code","cf62d775":"code","9630a0fe":"code","9d0ead8e":"markdown","609079e4":"markdown","2583eb6a":"markdown","1995ede8":"markdown","ccc9c1eb":"markdown","69c8dc9a":"markdown","41b97664":"markdown","3fcb10f8":"markdown"},"source":{"b7488a4f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1acba30a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go","67f6f064":"dataset = pd.read_csv(\"\/kaggle\/input\/bank-note-authentication-uci-data\/BankNote_Authentication.csv\")\r\ndataset.head()","aeb5247d":"dataset.isnull().sum()","05567029":"dataset.info()","435af2c0":"dataset.describe()","368fd627":"f,ax=plt.subplots(1,2,figsize=(18,8))\r\ndataset['class'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\r\nax[0].set_title('class')\r\nax[0].set_ylabel('')\r\nsns.countplot('class', data=dataset, ax=ax[1])\r\nax[1].set_title('class')\r\nplt.show()","642efdc3":"sns.heatmap(dataset.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) #data.corr()-->correlation matrix\r\nfig=plt.gcf()\r\nfig.set_size_inches(10,8)\r\nplt.show()","65204fc1":"sns.pairplot(dataset)","9aa2ffd1":"num_cols = dataset.columns[:-1]\r\n\r\nfor col in num_cols:\r\n    col_bin = pd.qcut(dataset[col], q=10)\r\n    \r\n    bin_name = col+\"_bin\"\r\n    dataset[bin_name] = col_bin\r\n    \r\ndataset.drop(columns=num_cols, axis=1, inplace=True)","8e98072f":"dataset.head()","45023167":"X = dataset.drop(columns=[\"class\"], axis=1)\r\ny = dataset[\"class\"]","1ec9d74e":"from sklearn.preprocessing import LabelEncoder\r\nle = LabelEncoder()\r\n\r\nfor col in X.columns:\r\n    X[col] = le.fit_transform(X[col])","8fe1b2da":"X.head()","88c617d5":"from sklearn.model_selection import train_test_split\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","f880fb56":"from sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\r\nfrom xgboost import XGBClassifier\r\nfrom catboost import CatBoostClassifier\r\n\r\nfrom sklearn.metrics import accuracy_score\r\nfrom sklearn.model_selection import cross_val_score","e715504e":"MLA = [\r\n    #Ensemble Methods\r\n    ensemble.AdaBoostClassifier(),\r\n    ensemble.BaggingClassifier(),\r\n    ensemble.ExtraTreesClassifier(),\r\n    ensemble.GradientBoostingClassifier(),\r\n    ensemble.RandomForestClassifier(),\r\n\r\n    #Gaussian Processes\r\n    gaussian_process.GaussianProcessClassifier(),\r\n    \r\n    #GLM\r\n    linear_model.LogisticRegressionCV(),\r\n    linear_model.PassiveAggressiveClassifier(),\r\n    linear_model.RidgeClassifierCV(),\r\n    linear_model.SGDClassifier(),\r\n    linear_model.Perceptron(),\r\n    \r\n    #Navies Bayes\r\n    naive_bayes.BernoulliNB(),\r\n    naive_bayes.GaussianNB(),\r\n    \r\n    #Nearest Neighbor\r\n    neighbors.KNeighborsClassifier(),\r\n    \r\n    #SVM\r\n    svm.SVC(probability=True),\r\n    svm.NuSVC(probability=True),\r\n    svm.LinearSVC(),\r\n    \r\n    #Trees    \r\n    tree.DecisionTreeClassifier(),\r\n    tree.ExtraTreeClassifier(),\r\n    \r\n    #Discriminant Analysis\r\n    discriminant_analysis.LinearDiscriminantAnalysis(),\r\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\r\n\r\n    XGBClassifier(),\r\n    CatBoostClassifier()  \r\n    ]","30e03b9e":"row_index = 0\r\nMLA_compare = pd.DataFrame()\r\n\r\nfor classifier in MLA:\r\n    classifier.fit(X_train, y_train)\r\n\r\n    y_pred = classifier.predict(X_test)\r\n    classifier_accuracy_score = accuracy_score(y_test, y_pred)\r\n\r\n    kfold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\r\n\r\n    MLA_name = classifier.__class__.__name__\r\n    MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\r\n    MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\r\n    MLA_compare.loc[row_index, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\r\n\r\n    row_index+=1","d0d0910a":"sorted_MLA_compare = MLA_compare.sort_values(\r\n    by=\"K-Fold Accuracy\",\r\n    ascending=False).reset_index(drop=True).head(15)\r\nsorted_MLA_compare","cf62d775":"fig = go.Figure()\r\nfig.add_trace(go.Bar(\r\n    x = sorted_MLA_compare[\"MLA Name\"],\r\n    y = sorted_MLA_compare[\"Accuracy Score\"],\r\n))\r\nfig.update_layout(\r\n  title=\"Comparing Accuracy Scores of Machine Learning Models\",\r\n  xaxis_title=\"Machine Learning Algorithm\",\r\n  yaxis_title=\"Accuracy Score\"\r\n)","9630a0fe":"fig = go.Figure()\r\nfig.add_trace(go.Bar(\r\n    x = sorted_MLA_compare[\"MLA Name\"],\r\n    y = sorted_MLA_compare[\"K-Fold Accuracy\"],\r\n))\r\nfig.update_layout(\r\n  title=\"CompK-Fold Accuracycuracy Scores of Machine Learning Models\",\r\n  xaxis_title=\"Machine Learning Algorithm\",\r\n  yaxis_title=\"K-Fold Accuracy\"\r\n)","9d0ead8e":"# Data Preprocessing","609079e4":"## Importing Libraries","2583eb6a":"## Splitting Data into Training and Testing set","1995ede8":"### Checking for Null Values","ccc9c1eb":"## EDA","69c8dc9a":"## Seperating Dependent Variable","41b97664":"# Model","3fcb10f8":"## Dealing with Numeric Variables"}}