{"cell_type":{"ecab41e6":"code","ad736284":"code","017f9ad2":"code","17fdec00":"code","b3e5d5bf":"code","c06f0cfc":"code","964b6e93":"code","6a3deda0":"code","b73ad427":"code","60d3ce4e":"code","405e6622":"code","916fdc35":"code","14803274":"code","dc081765":"code","afaad516":"code","01c62a70":"code","fef127c3":"code","73b7169d":"code","3426e5c2":"code","d3612d1f":"code","bf8283f4":"code","16582924":"code","7ab8d529":"code","eda8728f":"code","e47f3ad8":"code","dbda5b98":"code","6bb9c7f6":"code","0a8bebf7":"code","46cb7402":"code","32bfa8e2":"code","a95d32c6":"code","352da3b7":"code","bcae7851":"code","2e70c643":"markdown","14a55f2d":"markdown","975cce17":"markdown","0c00045b":"markdown","f2482aac":"markdown","554590e5":"markdown","af042ac8":"markdown","1d2fd5de":"markdown","93c6fee7":"markdown"},"source":{"ecab41e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad736284":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nfootball","017f9ad2":"edu = pd.read_csv('..\/input\/ict-assignement-2\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu\n","17fdec00":"edu.head(10)","b3e5d5bf":"edu.tail(10)","c06f0cfc":"edu.describe()","964b6e93":"edu['GEO']","6a3deda0":"edu[10:14]","b73ad427":"edu.iloc[90:94][['TIME','GEO']]","60d3ce4e":"edu['Value'] > 6.5","405e6622":"edu[edu['Value'] > 6.5].tail()","916fdc35":"edu[edu['Value'].isnull()].head()","14803274":"edu.max(axis = 0)","dc081765":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","afaad516":"print ('Divise les valeurs par 100 les valeurs de edu')\ns = edu[\"Value\"]\/100\ns.head()","01c62a70":"print ('applique la racine aux valeurs de edu')\ns = edu[\"Value\"].apply(np.sqrt)\ns.head()","fef127c3":"print ('Applique la fonction lambda qui prends le carr\u00e9 des valeurs de edu')\ns = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","73b7169d":"print ('ajoute une colonne qui contient la norme des valeurs de edu')\nedu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","3426e5c2":"print('Supprime la colonne contenant les normes')\nedu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","d3612d1f":"print('Ajoute une ligne au tableau de valeur TIME = 2000, GEO = a et Value = 5.00')\nedu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","bf8283f4":"print('Supprime la derni\u00e8re ligne du data set')\nedu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","16582924":"print('Supprime les valeurs nulles du data set')\neduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","7ab8d529":"print('Autre m\u00e9thode pour se d\u00e9barasser des valeurs NaN')\neduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","eda8728f":"print('Remplace les valeurs NaN par une autre de notre choix, ici 0')\neduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","e47f3ad8":"print('Trie le data set par valeurs ordre d\u00e9croissant')\nedu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","dbda5b98":"print('Retourne au tableau de base en triant les index par   ordre croissant')\nedu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","6bb9c7f6":"print('Regroupes les valeurs par zones g\u00e9ographiques et en prends la moyenne')\ngroup = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","0a8bebf7":"print('Retourne un tableur ayant pour index les pays et pour colonnes les ann\u00e9es et les diff\u00e9rentes valeurs pour chaque pair')\nfiltered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","46cb7402":"print('On peut maintenant utiliser le nouvel index pour faire nos recherches')\npivedu.loc[['Spain','Portugal'], [2006,2011]]","32bfa8e2":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=True, method='first').head()","a95d32c6":"print(\"Donne le classement global dans l'ordre en prenant chaque ann\u00e9e\")\ntotalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","352da3b7":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","bcae7851":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","2e70c643":"**Q4 :**\nDescribe() nous retourne des informations statistique sur le data set. \n\nOn peut imaginer que la m\u00e9thode nous retourne la moyenne, les valeurs min et max ou encore le nombre de valeurs non nulles.","14a55f2d":"Hands-On 1","975cce17":"**Q5 :**\nL'index nous retourne un sous-tableau contenant les lignes 90 \u00e0 93 et uniquement sur les donn\u00e9es 'TIME' et 'GEO'.\n* [90:94] selectionne les valeurs des lignes de la 90\u00e8me \u00e0 93\u00e8me\n* [['TIME','GEO']] s\u00e9lectionne les donn\u00e9es que l'on veut \u00e9tudier. Ici 'TIME' et 'GEO'.","0c00045b":"**Q3 :**\nla m\u00e9thode tail(x) retourne les x derni\u00e8res lignes du data set.\n\nExemple : tail(10) retourne les 10 derni\u00e8res lignes.","f2482aac":"**Q7 :**\n\nascending = False va organiser de la  meilleure valeur (qui aura la place n\u00b01) \u00e0 celui qui \u00e0 la pire valeur (dernier n\u00b0) et ce pour chaque ann\u00e9e","554590e5":"**Q1 :** \nIl y a 384 lignes et 3 colonnes","af042ac8":"Introduction","1d2fd5de":"**Q6 :**\nL'op\u00e9ration edu ['Value'] > 6.5 retourne un tableau de bool\u00e9en. TRUE si la valeur et sup\u00e9rieur \u00e0 6.5 et FALSE sinon.\n\nL'op\u00e9ration edu[edu['Value'] > 6.5] retourne un tableau contenant tout les lignes dans lesquelles la valeur de chaque ligne est surp\u00e9rieur \u00e0 6.5.\n\nLa m\u00e9thode retourne un DataFrame car le tableau contient plus d'une colonne.","93c6fee7":"**Q2 :**\nla m\u00e9thode head(x) retourne les x premi\u00e8res lignes du data set.\n\nExemple : head(10) retourne les 10 premi\u00e8res lignes"}}