{"cell_type":{"4a7db6fb":"code","ef20f417":"code","7f19f44b":"code","2d80158d":"code","849734f0":"code","473f4a64":"code","0a190bec":"code","000c2428":"code","deaeeba2":"code","327fc81b":"code","ea74d511":"code","27f1093c":"code","2eedf1d5":"code","be54b544":"code","210c93b2":"code","d4ccfc3f":"code","88f2ca0d":"code","3f8f8a6b":"code","819108ef":"code","d06560f5":"code","45084d14":"code","9f557b0f":"code","6963dcd2":"code","f6f09a51":"code","22ac8c06":"code","dc9ed016":"code","5a174ccd":"code","27654b3c":"code","316e29f4":"code","6c54e222":"code","27e1f0c0":"code","dc440fb1":"code","742dafa5":"code","b2c1f298":"markdown","bb4b06a3":"markdown","05af0a5c":"markdown","fc720932":"markdown","0b738558":"markdown","9fbaa758":"markdown","36327f0d":"markdown","42e0302e":"markdown","5861abf6":"markdown","cf08c38d":"markdown","55933c28":"markdown"},"source":{"4a7db6fb":"import pandas as pd\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport seaborn as sns","ef20f417":"# Base de treino\ntrain = pd.read_csv('..\/input\/adult-pmr3508\/train_data.csv',header=0,na_values='?')\ntrain.head()","7f19f44b":"# Base de teste (classifica\u00e7\u00e3o)\ntest = pd.read_csv('..\/input\/adult-pmr3508\/test_data.csv',header=0,na_values='?')\ntest.head()","2d80158d":"# Tipos de cada feature\ntrain.dtypes","849734f0":"# Checar se h\u00e1 valores faltantes (na)\ncheck_na = train.isna().any()\ncheck_na","473f4a64":"# Obter moda (valor de maior frequ\u00eancia) das features com dados faltantes\ncat_columns = train.select_dtypes(['object']).columns\ncat_columns = cat_columns[cat_columns != 'income']\nmode_na = train[cat_columns].mode()\nmode_na","0a190bec":"# Preenchimento de dados faltantes pela moda da feature\nfor i in train.columns[check_na]:\n    train[i] = train[i].fillna(mode_na[i][0])","000c2428":"# Checar se ainda h\u00e1 valores faltantes\ntrain.isna().any()","deaeeba2":"# Observa\u00e7\u00e3o da incid\u00eancia de education e education.num em conjunto\ntrain[['education','education.num']].value_counts()","327fc81b":"train = train.drop(columns=[\"Id\", \"education\"])\ncat_columns = cat_columns[cat_columns != 'education']\ntrain.head()","ea74d511":"# Gr\u00e1fico em barras de cada feature\nfor i in train.columns:\n    sns.displot(y=i, hue='income', data=train, multiple='stack')","27f1093c":"# Talvez seja interessante observar o fluxo de capital, n\u00e3o sua entrada ou sa\u00edda\ntrain['capital'] = train['capital.gain']-train['capital.loss']\nsns.displot(y='capital', hue='income', data=train, multiple='stack')","2eedf1d5":"# Correla\u00e7\u00e3o entre as features num\u00e9ricas\nsns.heatmap(train.corr())","be54b544":"# Rela\u00e7\u00e3o entre pares de features num\u00e9ricas\nsns.pairplot(train,hue='income')","210c93b2":"# Observa-se que 'native.country' possui quantidade muito maior de estadunidenses \n# que os outros individualmente\n# Agrupando os outros pa\u00edses em 'Others' para tentar igualar a situa\u00e7\u00e3o\nothers = np.delete(train['native.country'].unique(),[0])\ntrain['native.country'] = train['native.country'].replace(others,'Others')\nsns.displot(y='native.country', hue='income', data=train, multiple='stack')","d4ccfc3f":"# A quantidade de brancos \u00e9 bem maior que os outros individualmente, mas n\u00e3o\n# a n\u00edvel de 'native.country'\n# Agrupando em 'Others' mesmo assim\nothers = np.delete(train['race'].unique(),[0])\ntrain['race'] = train['race'].replace(others,'Others')\nsns.displot(y='race', hue='income', data=train, multiple='stack')","88f2ca0d":"# Converter dados categ\u00f3ricos em num\u00e9ricos\nenc = preprocessing.OrdinalEncoder()\ntrain[cat_columns] = enc.fit_transform(train[cat_columns])\ntrain.head()\n","3f8f8a6b":"# features da base de treino\nX_train = train.iloc[:,0:-2]\nX_train.head()","819108ef":"# Resposta de classifica\u00e7\u00e3o da base de treino\nY_train = train['income']\nY_train.head()","d06560f5":"# Melhor classificador: K=40\nknn = KNeighborsClassifier(n_neighbors=40)\nknn.fit(X_train,Y_train)\nscores = cross_val_score(knn, X_train, Y_train, cv=10)\nscores","45084d14":"# features da base de treino\nfeatures = ['education.num','hours.per.week','marital.status','relationship','occupation','workclass','age','capital']\nX_train = train[features]\nX_train.head()","9f557b0f":"# Melhor classificador: K=20\nknn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(X_train,Y_train)\nscores = cross_val_score(knn, X_train, Y_train, cv=10)\nscores","6963dcd2":"# features da base de treino\nfeatures = ['education.num','relationship','workclass','age','capital']\nX_train = train[features]\nX_train.head()","f6f09a51":"# Melhor classificador: K=24\nknn = KNeighborsClassifier(n_neighbors=24)\nknn.fit(X_train,Y_train)\nscores = cross_val_score(knn, X_train, Y_train, cv=10)\nscores","22ac8c06":"# Manter os Ids de teste\nind = test['Id'].copy()","dc9ed016":"# Refazer o que foi feito na base de treino:\n# Checar se h\u00e1 na\ncheck_na = test.isna().any()\ncheck_na","5a174ccd":"# Trocar na por moda\nfor i in test.columns[check_na]:\n    test[i] = test[i].fillna(mode_na[i][0])","27654b3c":"# Checar se tudo foi preenchido\ntest.isna().any()","316e29f4":"# Capital\ntest['capital'] = test['capital.gain']-test['capital.loss']\n\n# Drop das features desnecess\u00e1rias\ntest = test.drop(columns=[\"Id\", \"education\"])\n\n# Troca por 'Others'\nothers = np.delete(test['native.country'].unique(),np.where(test['native.country'].unique()=='United-States'))\ntest['native.country'] = test['native.country'].replace(others,'Others')\nothers = np.delete(test['race'].unique(),np.where(test['race'].unique()=='White'))\ntest['race'] = test['race'].replace(others,'Others')\n\n# Converter dados categ\u00f3ricos em num\u00e9ricos\ntest[cat_columns] = enc.fit_transform(test[cat_columns])\n\ntest.head()","6c54e222":"# Base de teste usando POOL3\nfeatures = ['education.num','relationship','workclass','age','capital']\nX_test = test[features]\nX_test.head()","27e1f0c0":"# Treinando para POOL3 com a base de treino inteira, K=24\nX_train = train[features]\nY_train = train['income']\nknn = KNeighborsClassifier(n_neighbors=24)\nknn.fit(X_train,Y_train)\nY_pred = knn.predict(X_test)\nY_pred","dc440fb1":"pred = pd.DataFrame({'Id': ind, 'income': Y_pred})\npred = pred.set_index('Id')\npred.head()","742dafa5":"pred.to_csv(\"submission.csv\",index=True,index_label='Id')","b2c1f298":"Infelizmente n\u00e3o foi poss\u00edvel separar as classes utilizando 2 features num\u00e9ricas. No entanto, a feature 'capital' parece promissora para a classifica\u00e7\u00e3o.","bb4b06a3":"Observa-se que existem algumas features em que a propor\u00e7\u00e3o de 'income' \u00e9 diferente em algumas categorias\/faixas de valores, enquanto em outras a propor\u00e7\u00e3o se mant\u00e9m parecida. Assim, \u00e9 poss\u00edvel criar diferentes pools de features:  \nPOOL1: todas as features presentes;  \nPOOL2: features com a caracter\u00edstica mencionada - ['education.num','hours.per.week','marital.status','relationship','occupation','workclass','age','capital']  \nPOOL3: retirada de features possivelmente relacionadas - ['education.num','relationship','workclass','age','capital']\n","05af0a5c":"# Tratamento e An\u00e1lise dos dados","fc720932":"## POOL1","0b738558":"# Importa\u00e7\u00e3o das bibliotecas e das bases","9fbaa758":"Nota-se que a *feature 'education.num'* \u00e9 a *feature 'education'*, mas num\u00e9rica.  \nAl\u00e9m disso, as *feature 'Id'* \u00e9 \u00fanica para cada indiv\u00edduo, logo n\u00e3o ajuda no reconhecimento de padr\u00f5es da base.  \nPortanto, retira-se ambas as *features* do modelo.","36327f0d":"PMR3508 - Aprendizado de M\u00e1quina e Reconhecimento de Padr\u00f5es \\\n2\u00ba semestre de 2021\\\nKNN na base Adult","42e0302e":"## POOL3","5861abf6":"# KNN para base de treino","cf08c38d":"## POOL2","55933c28":"# KNN para base de teste"}}