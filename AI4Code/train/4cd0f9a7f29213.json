{"cell_type":{"9970998f":"code","cfe9e44d":"code","561e871c":"code","c5e81a71":"code","47d1305d":"code","394fda7e":"code","b135e97b":"code","5b0d0b40":"code","915ce034":"code","09448655":"code","6268c18f":"code","7e6687b0":"code","67c3d943":"code","7538efa9":"code","1f1e892d":"code","c86fc92d":"code","35a1ceb6":"markdown","6677ce8b":"markdown"},"source":{"9970998f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cfe9e44d":"# Initialisation des points centraux\n# random ou manuellement\n# On consid\u00e9re que le cluster correspond \u00e0 l'indice dans le tableau centers\nK = 4\ncenters = [[20,15], [50,35], [10,9], [34,60]]\ndf = pd.DataFrame(centers, columns=[\"x\", \"y\"])\ndf.plot.scatter(x=\"x\", y=\"y\")","561e871c":"# Compute distance between 2 points\ndef euclidean_distance(p1, p2):\n    # p --> (x,y)\n    somme_square = 0\n    for i in range(len(p1)):\n        somme_square += (p1[i]-p2[i])**2\n    return np.sqrt(somme_square)","c5e81a71":"# calcul of the mean with points as inputs\ndef get_mean(points):\n    nb_points = len(points)\n    size_point = len(points[0])\n    mean_point = np.zeros(size_point)\n    for point in points:\n        for i in range(size_point):\n            mean_point[i]+=point[i]\n    return mean_point\/nb_points","47d1305d":"# Calcul of the variance\ndef get_variance(points):\n    nb_points = len(points)\n    mean_p = mean(points)\n    print(\"la moyenne est de : \", mean_p)\n    somme = 0\n    for p in points:\n        dist = euclidean_distance(p,mean_p)**2\n        print(\"la distance de \", p, \"\u00e0 \", mean_p, \" est de \", dist)\n        somme+= dist\n    return somme\/nb_points","394fda7e":"# Normalized the data\ndef get_normalized_data(data):\n    data_norm = []\n    mean = get_mean(data)\n    variance = get_variance(data)\n    for x in data:\n        data_norm.append((x-mean)\/variance)\n    return data_norm","b135e97b":"# Find the nearest central point\ndef find_nearest_center_cluster(p1, centers):\n    min_dist = euclidean_distance(p1, centers[0])\n    nearest_center_ind = 0\n    for i_c in range(len(centers)):\n        d = euclidean_distance(p1, centers[i_c])\n        #print(p1, \" --> \", centers[i_c])\n        #print(\"\\tdistance : \", d)\n        if d < min_dist:\n            nearest_center_ind = i_c\n            min_dist = d\n    return nearest_center_ind","5b0d0b40":"def apply(vect, func, res=None):\n    if len(vect)==0:\n        return res\n    else:\n        return apply(vect[:-1], func, func(res,vect[-1]))  ","915ce034":"arr = [(1,2),(1,2),(1,2)]\n\ndef plus(a,b):\n    return a+b\n\ndef mult(a,b):\n    return a*b\n\n# Trouve le centre d'un nuage de points de N dimension\ndef find_center_point(points):\n    nb_points = len(points)\n    size_point = len(points[0])\n    center_coord = []\n    for i in range(size_point):\n        res = apply([p[i] for p in points],plus,0)\n        center_coord.append(res\/nb_points)\n    return center_coord","09448655":"# Iteration :\ndef iterate_clustering(data_points, centers):\n    K = len(centers)\n    clusters = []\n    for k in range(K):\n        clusters.append([])\n        \n    for point in data_points:\n        cluster = find_nearest_center_cluster(point, centers)\n        clusters[cluster].append(point)\n        print(\"the point with point\",point, \"is among the cluster n\u00b0\",cluster)\n    return clusters","6268c18f":"# Test iterate clustering\ndata_points = [[54,23],[26,43],[18,32],[34,25],[42,31],[26,29],[54,62]]\ncenters = [[20,15], [50,35], [10,9], [34,60]]\n\nclusters = iterate_clustering(data_points, centers)","7e6687b0":"# Recalculate the centers\ndef recalculate_centers(new_clusters, old_centers):\n    new_centers = []\n    for i in range(len(new_clusters)):\n        if new_clusters[i]==[]:\n            new_centers.append(old_centers[i])\n        else:\n            new_centers.append(find_center_point(new_clusters[i]))\n    return new_centers\n\nnew_centers = recalculate_centers(clusters, centers)","67c3d943":"# Verify if center are stable or not by verify if center changed or not\ndef centers_changed(old_centers, new_centers):\n    for ocenter in old_centers:\n        if ocenter not in new_centers:\n            return 1\n        else:\n            return 0","7538efa9":"import matplotlib as plt\n# Testing the iteration function\ndata_points = np.array([[54,23],[26,43],[18,32],[34,25],[42,31],[26,29],[54,62]])\nclusters = iterate_clustering(data_points, centers)\nnew_centers = recalculate_centers(clusters, centers)\nwhile(centers_changed(centers,new_centers)):\n    clusters = iterate_clustering(data_points, new_centers)\n    n_centers = recalculate_centers(clusters, centers)\n    centers = new_centers\n    new_centers = n_centers\nprint(clusters)\nprint(new_centers)\n# For c in clusters:\n#    x,y = [data_points[p] for p in clusters]","1f1e892d":"# Compare with kmeans from scikit learn\nkmeans_model = KMeans(n_clusters=4, init=np.array(centers))\nprint(kmeans_model)","c86fc92d":"# Model fit the data\nkmeans_model.fit(data_points)\nprint(kmeans_model.cluster_centers_)","35a1ceb6":"**Impl\u00e9mentation de l'algorithme de K-Means**\n    - Algorithme non supervis\u00e9\n    - K est le nombre de cluster \u00e0 trouver\n    - A chaque cluster est calcul\u00e9 sur son point central\n    - A chaque it\u00e9ration les centres sont recalcul\u00e9s\n    - Chaque point appartient au cluster de son point central le plus proche","6677ce8b":"TODO:\n    - Normalize the data to get better performance"}}