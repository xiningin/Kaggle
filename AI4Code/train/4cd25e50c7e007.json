{"cell_type":{"77afcfb5":"code","d8dc7d16":"code","af639f27":"code","8b05bdcb":"code","ca364da7":"code","e78abdec":"code","d1702ae9":"code","f5a62059":"code","dfafb684":"code","24d4456a":"code","f3a5fc0a":"code","28707ea3":"code","8923b8ce":"code","a9552155":"code","8aae980e":"code","649624e1":"code","b4a21fb9":"code","ef3bdbae":"code","c22f9907":"code","12d89cd2":"code","666ea7a9":"code","e35c677b":"code","25d50a9e":"code","9cc5589a":"code","a143aaa2":"code","623800a4":"code","6eceef44":"code","663e341b":"code","96cfc2c5":"code","3482a08d":"code","ada82828":"code","764aac42":"code","41d7adf7":"code","919c7de7":"code","0d6b76d4":"code","033b360b":"code","40ddeaa8":"code","4dc41cfa":"code","6984a980":"code","b05c84e1":"code","324590fe":"code","6b40aac3":"code","88c75e2d":"code","5bb8b528":"code","86bbaf32":"code","31bfea3e":"code","50e8a50a":"code","7e694ada":"code","8d6be6b0":"code","794b9104":"code","7eafe2f1":"code","c2067c95":"code","423a4bd7":"code","9a438ddb":"code","10b0b7df":"code","97ce6baf":"code","b00898dd":"code","42f3f6a8":"code","5e8e7279":"code","c9015032":"code","7570a796":"code","b765e1a0":"code","a6c8e827":"code","f88689c7":"code","36dc5021":"code","8fcdec52":"markdown","7a85db6b":"markdown","6fcf91c5":"markdown","59234583":"markdown","bb44ae98":"markdown","60eab68a":"markdown","c9a01617":"markdown","6744de8f":"markdown","4adab96d":"markdown","4950e1e9":"markdown","197e829b":"markdown","40c96c60":"markdown","ca07f565":"markdown","3ef78668":"markdown","9584df14":"markdown","d6231942":"markdown","e9c84dfe":"markdown","f92e30f1":"markdown","8737f651":"markdown","eb5ad8ef":"markdown","35302b0b":"markdown","509f5e6e":"markdown","a0a2803b":"markdown","05c8d270":"markdown","266bc40e":"markdown","60bc663a":"markdown","5089f8e4":"markdown","a6666f11":"markdown","ff982d24":"markdown","fb2dd984":"markdown","ea223840":"markdown","078fd5be":"markdown","37910825":"markdown","fc58ad2c":"markdown","c6ef6721":"markdown"},"source":{"77afcfb5":"# warning\nimport warnings\nwarnings.filterwarnings('ignore')","d8dc7d16":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.set()","af639f27":"# Importing Bike dataset\nBike = pd.read_csv('..\/input\/bike-sharing-assignment\/day.csv')","8b05bdcb":"# Check the head of the dataset\nBike.head()","ca364da7":"# chech the rows and column\nBike.shape","e78abdec":"#check the information of dataset\n\nBike.info()","d1702ae9":"Bike.describe(percentiles=[0.25,0.5,0.75,0.9,0.95,0.99])","f5a62059":"# Renaming some variable\nBike.rename(columns={'yr':'year','mnth':'month','temp':'temperature','hum':'humidity','cnt':'count',},inplace=True)","dfafb684":"Bike.head()","24d4456a":"#checking if there is missing values in the dataset\n\nimport missingno as mn\nmn.matrix(Bike)","f3a5fc0a":"#Dropping the unnecessary variable \nBike.drop(['instant','dteday','casual','registered','holiday'],axis=1,inplace=True)","28707ea3":"Bike.head()","8923b8ce":"Bike['season']= Bike['season'].map({1:\"spring\",2:\"summer\",3:\"fall\",4:\"winter\"})","a9552155":"sns.barplot('season','count',data=Bike)","8aae980e":"sns.barplot(x='year',y='count',data=Bike)","649624e1":"Bike['month']= Bike['month'].map({1:\"jan\",2:\"feb\",3:\"mar\",4:\"april\",5:\"may\",6:\"june\",\n                                7:\"july\",8:\"aug\",9:\"sept\",10:\"oct\",11:\"nov\",12:\"dec\"})","b4a21fb9":"sns.barplot(x='month',y='count',data=Bike)","ef3bdbae":"Bike['weekday']= Bike['weekday'].map({0:\"Mon\",1:\"Tue\",2:\"Wed\",3:\"Thu\",4:\"Fri\",5:\"Sat\",6:\"Sun\"})","c22f9907":"sns.barplot(x='weekday',y='count',data=Bike)","12d89cd2":"sns.barplot(x='workingday',y='count',data=Bike)","666ea7a9":"Bike['weathersit']= Bike['weathersit'].map({1:\"Clear\",2:\"Mist\",3:\"Light Snow\",4:\"Heavy Rain\"})\nsns.barplot(x='weathersit',y='count',data=Bike)","e35c677b":"sns.distplot(Bike['count'])","25d50a9e":"sns.pairplot(Bike)\nplt.show()","9cc5589a":"plt.figure(figsize = (10,15))\nsns.heatmap(Bike.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","a143aaa2":"#dropping highly correlated variable\nBike.drop(['atemp'],axis=1,inplace=True)","623800a4":"Bike.head()","6eceef44":"# Let's drop the first column from 'season','month','weekday','weathersit' Bike using 'drop_first = True'\nseasons = pd.get_dummies(Bike['season'],drop_first=True)\nmonth = pd.get_dummies(Bike['month'],drop_first=True)\nweekday = pd.get_dummies(Bike['weekday'],drop_first=True)\nweathersit = pd.get_dummies(Bike['weathersit'],drop_first=True)\nworking_day = pd.get_dummies(Bike['workingday'],drop_first=True)","663e341b":"# Add the results to the original Bike dataframe\n\nBike = pd.concat([Bike, seasons,month,weekday,weathersit,working_day], axis = 1)\n\nBike.head()","96cfc2c5":"# Dropping  variables \n# As we already created dummy variable for 'season','month','weekday','weathersit' ,so drop those variable.\n\nBike.drop(['season','month','weekday','weathersit','workingday'], axis = 1, inplace = True)\n","3482a08d":"Bike.head()","ada82828":"# We specify this so that the train and test data set always have the same rows, respectively\nfrom sklearn.model_selection import train_test_split\n\nnp.random.seed(0)\nBike_train, Bike_test = train_test_split(Bike, train_size = 0.7, test_size = 0.3, random_state = 100)","764aac42":"#check the shape of train dataset \nprint(Bike_train.shape)\n\n#check the shape of train dataset\nprint(Bike_test.shape)","41d7adf7":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","919c7de7":"num_vars = ['humidity','temperature','windspeed','count']\n\nBike_train[num_vars] = scaler.fit_transform(Bike_train[num_vars])","0d6b76d4":"Bike_train.head()","033b360b":"Bike_train.describe()","40ddeaa8":"y_train = Bike_train.pop('count')\nX_train = Bike_train","4dc41cfa":"y_train.head()","6984a980":"X_train.head()","b05c84e1":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","324590fe":"# Running RFE with the output number of the variable equal to 10\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 10)             # running RFE\nrfe = rfe.fit(X_train, y_train)","6b40aac3":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","88c75e2d":"col = X_train.columns[rfe.support_]\ncol","5bb8b528":"X_train.columns[~rfe.support_]","86bbaf32":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","31bfea3e":"# Adding a constant variable \nimport statsmodels.api as sm  \nX_train_rfe = sm.add_constant(X_train_rfe)\n\nlm = sm.OLS(y_train,X_train_rfe).fit()   # Running the linear model","50e8a50a":"#Let's see the summary of our linear model\nlm.summary()","7e694ada":"X_train_drop = X_train_rfe.drop('Sun',1)\nX_train_drop","8d6be6b0":"X_train_2 = sm.add_constant(X_train_drop)\n\nlm_1=sm.OLS(y_train,X_train_2).fit()\n\nlm_1.summary()","794b9104":"X_train_drop1 = X_train_2.drop('const',1)\nX_train_drop1","7eafe2f1":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_drop1\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c2067c95":"X_train_drop2 =X_train_drop1.drop('humidity',1)\nX_train_drop2","423a4bd7":"X_train_3 = sm.add_constant(X_train_drop2)\n\nlm_3= sm.OLS(y_train,X_train_3).fit()\n\nlm_3.summary()","9a438ddb":"X_train_drop3 = X_train_3.drop('const',1)\nX_train_drop3","10b0b7df":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_drop3\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","97ce6baf":"y_train_price = lm_3.predict(X_train_3)","b00898dd":"fig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","42f3f6a8":"num_vars = ['humidity','temperature','windspeed','count']\n\n\nBike_test[num_vars] = scaler.transform(Bike_test[num_vars])","5e8e7279":"Bike_test.head()","c9015032":"Bike_test.describe()","7570a796":"y_test = Bike_test.pop('count')\nX_test = Bike_test","b765e1a0":"# Now let's use our model to make predictions.\n\n# Creating X_test_new dataframe by dropping variables from X_test\nX_test_new = X_test[X_train_drop3.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)\n\nX_test_new.head()","a6c8e827":"# Making predictions\ny_test_pred = lm_3.predict(X_test_new)","f88689c7":"from sklearn.metrics import r2_score\nr2_score(y_true= y_test , y_pred = y_test_pred )","36dc5021":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_test_pred)\nfig.suptitle('y_test vs y_test_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_test_pred', fontsize=16)                         # Y-label","8fcdec52":"### RFE (Recursive feature elimination)","7a85db6b":"**Bike rental increases in 2019 as compare to 2018 which shows the Boom Bike gained it's popularity in an year.**","6fcf91c5":"**The bike rental is more during Clear, Few clouds, Partly cloudy**","59234583":"**Please do leave your comments \/suggestions**","bb44ae98":"# Month\n\n* 1:Jan\n* 2:Feb\n* 3:Mar\n* 4:Apr\n* 5:May\n* 6:June\n* 7:July\n* 8:Aug\n* 9:Sep\n* 10:Oct\n* 11:Nov\n* 12:Dec","60eab68a":"# weekday\n* 0:Sun\n* 1:Mon\n* 2:Tue\n* 3:Wed\n* 4:Thu\n* 5:Fri\n* 6:Sat","c9a01617":"![0_Dgkc35WIkcAVHbMC.jpg](attachment:0_Dgkc35WIkcAVHbMC.jpg)","6744de8f":"## Rescaling the Features","4adab96d":"## Building our model\n##### This time, we will be using the LinearRegression function from SciKit Learn for its compatibility with RFE (which is a utility from sklearn)","4950e1e9":"# Business Goal:\n\nYou are required to model the demand for shared bikes with the available independent variables. It will be used by the management to understand how exactly the demands vary with different features. They can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations. Further, the model will be a good way for management to understand the demand dynamics of a new market.","197e829b":"# Problem Statement\n\nA bike-sharing system is a service in which bikes are made available for shared use to individuals on a short term basis for a price or free. Many bike share systems allow people to borrow a bike from a \"dock\" which is usually computer-controlled wherein the user enters the payment information, and the system unlocks it. This bike can then be returned to another dock belonging to the same system.\n\n\nA US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues due to the ongoing Corona pandemic. The company is finding it very difficult to sustain in the current market scenario. So, it has decided to come up with a mindful business plan to be able to accelerate its revenue as soon as the ongoing lockdown comes to an end, and the economy restores to a healthy state. \n\n\nIn such an attempt, BoomBikes aspires to understand the demand for shared bikes among the people after this ongoing quarantine situation ends across the nation due to Covid-19. They have planned this to prepare themselves to cater to the people's needs once the situation gets better all around and stand out from other service providers and make huge profits.\n\n\nThey have contracted a consulting company to understand the factors on which the demand for these shared bikes depends. Specifically, they want to understand the factors affecting the demand for these shared bikes in the American market. The company wants to know:\n\nWhich variables are significant in predicting the demand for shared bikes.\nHow well those variables describe the bike demands\nBased on various meteorological surveys and people's styles, the service provider firm has gathered a large dataset on daily bike demands across the American market based on some factors. ","40c96c60":"# Data Preparation & Visualising the Data","ca07f565":"**Weathersit**\n* 1: Clear, Few clouds, Partly cloudy\n* 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n* 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n* 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog","3ef78668":"**The temperature and atemp variable is highly coorelated as we can see in above heat map**","9584df14":"**We can see that there is no missing value in the dataset**","d6231942":"# Year\n\n* 2018:0\n* 2019:1","e9c84dfe":"***Season***\n* 1:spring\n* 2:summer\n* 3:fall\n* 4:winter","f92e30f1":"# EQUATION OF BEST FIT LINE\ncount = 0.3038 + 0.2327 *year + 0.3937 *temperature +(-0.1525) *windspeed +(-0.1460) *spring +(-0.0727) *july +0.0531 *sept +(-0.2748) *Light Snow + (-0.0804) *Mist\n\nOverall we have a decent model, but we also acknowledge that we could do better.","8737f651":"##### We have all the variables with p-value less than 0.05","eb5ad8ef":"##### As we see that p_value < 0.05 and vif value is < 5% ,now we can say model is good","35302b0b":"# Reading and Understanding the Data","509f5e6e":"# Residual Analysis of the train data","a0a2803b":"## R-squared:\t0.82","05c8d270":"## R-squared:\t0.80","266bc40e":"**It's observed that bike rental count is high during fall season**","60bc663a":"### Building model using statsmodel, for the detailed statistics","5089f8e4":"### Making Predictions\nApplying the scaling on the test sets","a6666f11":"**During weekends the bike rental count is high and seems people go out during weekends and use the bikes.**","ff982d24":"The variables that help us in understanding the bike rental counts are as below:\n\n1. Temperature  \n2. Light Snow \n3. Year","fb2dd984":"## Model Evaluation","ea223840":"**We already have \"year\" ,\"month\", \"holiday\",\"working day\", So \"dteday\" column is not required, we are drop column. \n\n\nAs we are not having \"casual\" and \"registered\" while prediction,its looks as target variable, but here we have to predict the overall demand,As our target  variable is count,so we can drop casual and register variable.**","078fd5be":"**Splitting the Data into Training and Testing Sets**","37910825":"# Dummy Variables\n##### Creating the dummy variables","fc58ad2c":"### Dividing into X and Y sets for the model building","c6ef6721":"**During working day there is observed increase in bike rental**"}}