{"cell_type":{"1d2d54b7":"code","5b3aadcf":"code","a98b13e6":"code","1ac4668e":"code","162c69ca":"code","13e139ec":"code","90f6abe6":"code","4a2916d9":"code","4e77dff9":"code","2c3f4456":"code","a34e9633":"code","16b3dac7":"code","49c06608":"code","09b8ebf0":"code","6147faaf":"code","166eefda":"code","a53d5f2a":"code","2ad33c72":"code","ceec3208":"code","91ecd053":"code","b9945b3f":"code","d9ca6ca6":"code","f7e7876c":"code","be481672":"code","4ff879a7":"code","70d6f41d":"code","4efffdbb":"code","6ad7acd6":"code","8afb5e2e":"code","02a8ea4e":"code","212daf8a":"code","423d6141":"code","d901897a":"code","8d12cc2a":"markdown","f17f7df5":"markdown","aa2376d7":"markdown","37e1e5ee":"markdown","64209d80":"markdown","3992e6a8":"markdown","521babc9":"markdown","451872d7":"markdown","9edf93c5":"markdown","79a9f513":"markdown"},"source":{"1d2d54b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b3aadcf":"# load the dataset\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","a98b13e6":"# First 5 row\ntrain.head()","1ac4668e":"test.head()","162c69ca":"submission.head()","13e139ec":"# Shape of train and test dataset\nprint(train.shape)\nprint(test.shape)","90f6abe6":"# important information of dataset\nprint(train.info())\n# total null value\nprint(train.isna().sum())","4a2916d9":"# function for drop column from train and test\ndef drop_col(trainORtest, *name):\n    drop_list = [*name]\n    trainORtest.drop(drop_list, axis=1, inplace=True)\n    ","4e77dff9":"# column name\ndrop_col(train, \"Name\", \"Ticket\", \"Cabin\", \"Fare\")\ndrop_col(test, \"Name\", \"Ticket\", \"Cabin\", \"Fare\")","2c3f4456":"# updated first 5 row\ntrain.head()","a34e9633":"# Unique value\ntrain[\"Sex\"].unique()","16b3dac7":"test.head()","49c06608":"# Label Encoder for encoding column\nfrom sklearn.preprocessing import LabelEncoder","09b8ebf0":"# encode\nencoder = LabelEncoder()\n\ntrain[\"Sex\"] = encoder.fit_transform(train[\"Sex\"])\ntest[\"Sex\"] = encoder.fit_transform(test[\"Sex\"])","6147faaf":"train.head()","166eefda":"train[\"Sex\"].nunique()","a53d5f2a":"# Port of Embarkation\ntrain[\"Embarked\"].unique()","2ad33c72":"# Port of Embarkation fill value\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"Q\")\n# encode Embarked column\ntrain[\"Embarked\"] = encoder.fit_transform(train[\"Embarked\"])\ntest[\"Embarked\"] = encoder.fit_transform(test[\"Embarked\"])","ceec3208":"# mean value of age column and fill\nmean = train[\"Age\"].mean()\ntrain[\"Age\"] = train[\"Age\"].fillna(mean)\n\nmean = test[\"Age\"].mean()\ntest[\"Age\"] = test[\"Age\"].fillna(mean)","91ecd053":"train.head()","b9945b3f":"# correlation\ncorrelation = train.corr()\n\n\n# heatmap\nplt.subplots(figsize=(10,6))\nsns.heatmap(correlation, annot=True)\n\n# Correlation with Sex column \ncorrelation[\"Sex\"].sort_values(ascending=False)","d9ca6ca6":"plt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"Pclass\"], hue=train[\"Survived\"], data=train)","f7e7876c":"plt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"Sex\"], hue=train[\"Survived\"], data=train)","be481672":"plt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"Pclass\"])","4ff879a7":"plt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"Pclass\"], hue=train[\"Embarked\"], data=train)","70d6f41d":"plt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"Parch\"], data=train)\n\nplt.subplots(figsize=(8,5))\nsns.countplot(x=train[\"SibSp\"], hue=train[\"Pclass\"], data=train)","4efffdbb":"X = train.drop(\"Survived\", axis=1)\ny = train[\"Survived\"].copy()","6ad7acd6":"# Split the dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","8afb5e2e":"from sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import cross_val_score","02a8ea4e":"# different types of model and accuracy\nnames = [\"K Nearest Neighbors\", \"Decision Tree\", \"Random Forest\", \"Logistic Regression\", \"SGD Classifier\",\n         \"Naive Bayes\"]\n\nclassifiers = [\n    KNeighborsClassifier(n_neighbors=3),\n    DecisionTreeClassifier(random_state=0),\n    RandomForestClassifier(n_estimators=700),\n    LogisticRegression(),\n    SGDClassifier(),\n    GaussianNB(),\n#     SVC(kernel = 'linear')\n]\n\nmodels = zip(names, classifiers)\nfor name, model in models:\n    model_name = model\n    model_name.fit(X_train, y_train)\n    predict = model_name.predict(X_test)\n    accuracy1 = accuracy_score(predict, y_test)\n    accuracy2 = confusion_matrix(predict, y_test)\n    accuracy3 = classification_report(predict, y_test)\n    scores = cross_val_score(model, X_train, y_train, cv = 10, scoring = \"accuracy\")\n\n    print(f\"{name} model Accuracy Score {accuracy1}\")\n    \n    print(\"******************************\")\n    \n    print(f\"confusion matrix {accuracy2}\")\n    \n    print(\"******************************\")\n    \n    print(f\"classification report {accuracy3}\")\n    \n    print(\"******************************\")\n    \n    print(f\"{name} and prediction {predict}\")\n    \n    print(\"******************************\")\n    \n    print(f\"cross val score {scores}\")\n    \n    print(\"*******************************\")\n","212daf8a":"# final prediction\na = list(submission[\"Survived\"])\nmodels = zip(names, classifiers)\nfor name, model in models:\n    final_predict = model.predict(test)\n    print(f\"{name}: {final_predict}\")\n    print(f\"submission : {a}\")\n","423d6141":"# predict from random forest\nmodels = zip(names, classifiers)\nmodel_select = classifiers[2]\nfinal_predict = model_select.predict(test)\n","d901897a":"# create submission dataset\n'''\nindex = test.PassengerId\nnewFrame = pd.DataFrame({\"PassengerId\":index, \"Survived\":final_predict})\nnewFrame.to_csv(\"new_titanic_submissio_rf.csv\", index=False)\n'''","8d12cc2a":"# EDA - Exploratory Data Analysis","f17f7df5":"![titanic___Super_Portrait.jpg](attachment:titanic___Super_Portrait.jpg)\n\n\n# The Titanic \u2014 billed as an unsinkable ship \u2014 hit an iceberg and sank on April 15, 1912. Over 1,500 people died in the maritime disaster, while 705 individuals survived. A number of the victims and survivors were famous people","aa2376d7":"# C = Cherbourg = 0, Q = Queenstown = 1, S = Southampton = 2","37e1e5ee":"# Most of the passenger were in 3rd class","64209d80":"# Pclass - Ticket class\nHere, 3rd class passenger mostly not survived","3992e6a8":"# Parch - No. of parents \/ children aboard the Titanic\n# SibSp - No. of siblings \/ spouses aboard the Titanic","521babc9":"# 1-Male, 0-Female\nTotally Female Survived Most","451872d7":"# Random Forest accuracy is 81% and LogisticRegression 79%","9edf93c5":"# If you like it please upvote...","79a9f513":"# If you like it please upvote..."}}