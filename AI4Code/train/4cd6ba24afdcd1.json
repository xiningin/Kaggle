{"cell_type":{"c8e5b738":"code","ea55cc0b":"code","67eb37a1":"code","19a43da8":"code","9de1a20d":"code","80d8465c":"code","fc11005d":"code","60519198":"code","0b0fcf0d":"code","b6a4cf03":"code","49852355":"code","9b6e39f2":"code","49263e36":"code","6214a5dd":"code","b2a32b32":"markdown","180e3dfd":"markdown","460727d4":"markdown","8e79549b":"markdown","88368836":"markdown","a94bd694":"markdown","bebff964":"markdown","5020ec2b":"markdown","9df85df6":"markdown","9a1e6f15":"markdown","008cd98e":"markdown","260c6d9d":"markdown","3c2d4b9a":"markdown","aa2041aa":"markdown","ad2a5836":"markdown","80afddf6":"markdown","3c4bbd9d":"markdown"},"source":{"c8e5b738":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\nfrom datetime import datetime\nfrom matplotlib.dates import date2num","ea55cc0b":"path = '\/kaggle\/input\/airport-leipzig\/'\nos.listdir(path)","67eb37a1":"data_arri = pd.read_csv(path+'data_arrival_airport_lej_2021-01-27.csv', index_col=0)\ndata_depa = pd.read_csv(path+'data_departure_airport_lej_2021-01-27.csv', index_col=0)","19a43da8":"data_depa['plan'] = pd.to_datetime(data_depa['plan'])\ndata_depa['expect'] = pd.to_datetime(data_depa['expect'])\n\ndata_arri['plan'] = pd.to_datetime(data_arri['plan'])\ndata_arri['expect'] = pd.to_datetime(data_arri['expect'])","9de1a20d":"print('Number arrival samples:', len(data_arri))\nprint('Number arrival features:', len(data_arri.columns))\nprint('Number departure samples:', len(data_depa))\nprint('Number departure features:', len(data_depa.columns))","80d8465c":"data_arri.head()","fc11005d":"data_depa.head()","60519198":"def plot_bar_compare(arri, depa, feature, number=10, rot=False):\n    \"\"\" Compare the distribution between arrival and departure data \"\"\"\n    \n    fig, axs = plt.subplots(1, 2, figsize=(20, 4), sharey=True)\n    \n    arri_label = arri[feature].value_counts()[0:number].sort_index()\n    dict_arri = dict(zip(arri_label.keys(), ((100*(arri_label)\/len(arri.index)).tolist())))\n    arri_names = list(dict_arri.keys())\n    arri_values = list(dict_arri.values())\n    \n    depa_label = depa[feature].value_counts()[0:number].sort_index()\n    dict_depa = dict(zip(depa_label.keys(), ((100*(depa_label)\/len(depa.index)).tolist())))\n    depa_names = list(dict_depa.keys())\n    depa_values = list(dict_depa.values())\n    \n    axs[0].bar(arri_names, arri_values, color='yellowgreen')\n    axs[1].bar(depa_names, depa_values, color='sandybrown')\n    axs[0].grid()\n    axs[1].grid()\n    axs[0].set_title('Arrival data')\n    axs[1].set_title('Departure data')\n    axs[0].set_ylabel('%')\n    if(rot==True):\n        axs[0].set_xticklabels(arri_names, rotation=90)\n        axs[1].set_xticklabels(depa_names, rotation=90)\n    plt.show()\n\n    \ndef plot_map(data, title=' '):\n    fig = plt.figure(figsize=(16, 16))\n    m = Basemap(projection='merc', resolution=None, \n                llcrnrlat=0, urcrnrlat=80, llcrnrlon=-150, urcrnrlon=150)\n    m.etopo(scale=0.5, alpha=0.5)\n\n    for row in range(len(data.index)):\n        x, y = m(data.loc[row, 'dest_long'], data.loc[row, 'dest_lat'])\n        plt.plot(x, y, 'ok', markersize=5)\n    plt.title(title, loc='left')\n\n    \ndef plot_timeseries(data, feature, title=''):\n    \"\"\" Plot timeseries \"\"\"\n    \n    fig = plt.figure(figsize=(16,9))\n    plt.plot(data.index, data[feature])\n    plt.title(title, loc='left')\n    plt.grid()","0b0fcf0d":"data_depa['delay_time'] = data_depa['expect']-data_depa['plan']\ndata_arri['delay_time'] = data_arri['expect']-data_arri['plan']","b6a4cf03":"temp_arri = data_arri.copy()\ntemp_arri.index=pd.to_datetime(temp_arri['date'])\ntemp_depa = data_depa.copy()\ntemp_depa.index=pd.to_datetime(temp_depa['date'])\nfig, axs = plt.subplots(2, 1, figsize=(22, 9), sharey=True, sharex=True)\nx_arri = temp_arri.resample('D').count().index\nx_depa = temp_depa.resample('D').count().index\naxs[0].plot(x_arri, temp_arri['flight'].resample('D').count())\naxs[1].plot(x_depa, temp_depa['flight'].resample('D').count())\n\nfor i in range(2):\n    axs[i].axvspan(date2num(datetime(2019,7,4)), date2num(datetime(2019,8,16)), alpha=0.5, color='green', label=\"Summer Holidays\")\n    axs[i].axvspan(date2num(datetime(2020,7,16)), date2num(datetime(2020,8,30)), alpha=0.5, color='green')\n\n    axs[i].axvspan(date2num(datetime(2019,10,4)), date2num(datetime(2019,10,25)), alpha=0.5, color='blue', label=\"Autumn Holidays\")\n    axs[i].axvspan(date2num(datetime(2020,10,19)), date2num(datetime(2020,10,31)), alpha=0.5, color='blue')\n\n    axs[i].axvspan(date2num(datetime(2019,12,21)), date2num(datetime(2020,1,4)), alpha=0.5, color='yellow', label=\"Xmas Holidays\")\n    axs[i].axvspan(date2num(datetime(2020,12,19)), date2num(datetime(2021,1,10)), alpha=0.5, color='yellow')\n\n    axs[i].axvspan(date2num(datetime(2020,2,10)), date2num(datetime(2020,2,22)), alpha=0.5, color='purple', label=\"Winter Holidays\")\n    axs[i].axvspan(date2num(datetime(2020,4,6)), date2num(datetime(2020,4,18)), alpha=0.5, color='olive', label=\"Easter Holidays\")\n    axs[i].axvspan(date2num(datetime(2020,5,18)), date2num(datetime(2020,5,30)), alpha=0.5, color='aqua', label=\"Pentecost Holidays\")\n\n    axs[i].axvspan(date2num(datetime(2020,3,14)), date2num(datetime(2020,3,24)), alpha=0.5, color='red', label=\"1st Corona ramp down\")\n    axs[i].axvspan(date2num(datetime(2020,9,28)), date2num(datetime(2020,10,2)), alpha=0.5, color='orange', label=\"2nd Corona ramp down\")\n\n    axs[i].grid()\n    axs[i].legend(loc='upper right')\n\naxs[0].set_title('Number of daily arrivals', loc='left')\naxs[1].set_title('Number of daily departures', loc='left')\nplt.show()","49852355":"plot_map(data_arri, 'Arrivals')","9b6e39f2":"plot_map(data_depa, 'Departures')","49263e36":"plot_bar_compare(data_arri, data_depa, 'airline', number=10, rot=True)","6214a5dd":"plot_bar_compare(data_arri, data_depa, 'dest', number=10, rot=True)","b2a32b32":"# To Be Continued...","180e3dfd":"Departure Data","460727d4":"# Load And Prepare Data","8e79549b":"## Distrubution Destinations\nWe compare the top 10 distributions of the destinations for arrival and departures.","88368836":"## Distrubution Airlines\nWe compare the top 10 distributions of the airlines for arrival and departures.","a94bd694":"# Functions\nWe define some helper functions for visualization.","bebff964":"# Intro\nWelcome to the airport Leipzig (LEJ) dataset. \n\n![](https:\/\/www.mz-web.de\/image\/24644928\/2x1\/940\/470\/1810cd8a444e77228154d59a2bd49eab\/sY\/b-leipzig-imago69633133h.jpg)\n([Image Source](https:\/\/www.mz-web.de\/leipzig\/flughafen-leipzig-halle-bietet-ferienspezial-rasante-busfahrten-und-schnelle-flieger-24779496))","5020ec2b":"# Feature Engineering","9df85df6":"Arrival Dataframe","9a1e6f15":"# Overview","008cd98e":"## Number Of Daily Flights\nWe plot the number of daily arrivals and departures such as school holidays and both corona ramps down. The timerange of the holidays is the union of Saxony and Saxony-Anhalt.","260c6d9d":"# Path","3c2d4b9a":"## Time Delay\nWe add the feature delay based on the expected and planed timestamp:","aa2041aa":"## Destinations\nWe plot the arrival and departure destinations in a map.","ad2a5836":"# Libraries","80afddf6":"# Exploratory Data Analysis","3c4bbd9d":"We consider the arrivals and departures of the LEJ airport between 2019-07-18 and 2021-01-27 based on this [source](https:\/\/www.mdf-ag.com\/en\/passengers-and-visitors\/leipzig-halle-airport\/flights\/arrivals-departures\/). There are two datasets:\n* data_depa for the depatures\n* data_arri for the arrivals\n\nThe features are:\n\n| Feature  |    Meaning    |\n|----------|:-------------|\n| flight | flight number  |\n| dest |    destination   |\n| plan | timestamp for planed arrival\/departure |\n| expect| timestamp for expected arrival\/departure |\n| status| status of the arrival\/departure|\n|airline| name of the airline based on the iata code of the flight number|\n|date| date of arrival\/departure|\n|dist_km| distance of the destination to LEJ in km|\n|dist_mile|distance of the destination to LEJ in mile|\n|gate|departure gate (only in the data_depa dataset)|\n|dest_lat|latitude of destination|\n|dest_long|longitude of destination|\n\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>"}}