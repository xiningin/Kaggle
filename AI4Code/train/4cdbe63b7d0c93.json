{"cell_type":{"e613c11a":"code","4141f5ac":"code","fbe7a9df":"code","aad8c630":"code","2d7a901d":"code","73a9de79":"code","0ae62650":"code","81a3cb43":"code","1aeec5c5":"code","d140649d":"code","26ecef5e":"code","dde62314":"code","2a679e62":"code","496988cb":"markdown","788a7c44":"markdown","43119f3e":"markdown","520d8cb9":"markdown","3f8694f5":"markdown","aa4a779b":"markdown"},"source":{"e613c11a":"#Setting up local directoy\nimport os\n\n#Importing dependcies\nimport datetime as dt\nimport numpy as np \nimport pandas as pd \nimport pandas_datareader.data as web\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nfrom matplotlib import style\n\n#Style used by ggplot, R library\nstyle.use('ggplot')\n\n#Setting date range\nstart = dt.datetime(2008,1,1)\nend = dt.datetime.today()\n\n#Retrieving stock dataframe\ndf = web.DataReader('GE', 'yahoo', start, end)\n","4141f5ac":"df.head()","fbe7a9df":"df.tail()","aad8c630":"#Plotting pricing data \ndf[['Open', 'Close', 'High', 'Low']].plot(figsize=(10,7))","2d7a901d":"#Plotting Trading Volume\ndf[['Volume']].plot(figsize=(10,7))","73a9de79":"#Creating a 50, 100, and 200 day moving average\ndf['100 MA'] = df['Adj Close'].rolling(window=100, min_periods=0).mean()\ndf['50 MA'] = df['Adj Close'].rolling(window=50, min_periods=0).mean()\ndf['200 MA'] = df['Adj Close'].rolling(window=200, min_periods=0).mean()\n\n\ndf[['Adj Close', '100 MA', '50 MA', '200 MA']].plot(figsize=(15,7))","0ae62650":"#Using the plotly API\nimport plotly\nplotly.tools.set_credentials_file(username='jtcpca', api_key='JrYvdfddTawiS9eexi32')\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n#Resample data for 10-day increment data\ndf_ohlc = df['Adj Close'].resample('10D').ohlc()\ndf_ohlc.reset_index(inplace=True)\ndf_volume = df['Adj Close'].resample('10D').sum()\n\n\n\ntrace = go.Ohlc(x=df_ohlc['Date'],\n                open=df_ohlc['open'],\n                high=df_ohlc['high'],\n                low=df_ohlc['low'],\n                close=df_ohlc['close'])\ndata = [trace]\npy.iplot(data, filename='simple_candlestick')","81a3cb43":"import bs4 as bs\nimport pickle\nimport requests","1aeec5c5":"#Retrive S&P 500 tickers from wikipedia\ndef sp500():\n    resp = requests.get('https:\/\/en.wikipedia.org\/wiki\/List_of_S%26P_500_companies')\n    soup = bs.BeautifulSoup(resp.text, 'lxml')\n    table = soup.find('table', {'class':'wikitable sortable'})\n    tickers = []\n    #In order to be able to commit this notebook, I've set the index for table.findAll('tr') to [1:101].\n    #If you want every company in the S&P 500, set the index to [1:] \n    for row in table.findAll('tr')[1:101]:\n        ticker = row.findAll('td')[0].text\n        tickers.append(ticker)\n        \n    with open(\"sp500tickers.pickle\",\"wb\") as f:\n        pickle.dump(tickers, f)\n        \n    print(tickers)\n    \n    return tickers\n\n\nsp500()\n    \n    \n    ","d140649d":"#Use stock tickers to create file of all stocks' price data\ndef get_data(reload_sp500 = False):\n    if reload_sp500:\n        tickers=sp500()\n    else:\n        with open(\"sp500tickers.pickle\",\"rb\") as f:\n            tickers = pickle.load(f)\n            \n    if not os.path.exists('stock_dfs'):\n        os.makedirs('stock_dfs')\n    \n    start = dt.datetime(2008,1,1)\n    end = dt.datetime(2018,12,14)\n\n    for ticker in tickers:\n        if not os.path.exists('stock_dfs\/{}.csv'.format(ticker)):\n            df = web.DataReader(ticker.replace(\".\", \"-\"), 'yahoo', start, end)\n            df.to_csv('stock_dfs\/{}.csv'.format(ticker))\n        else:\n            print('Already have {}'.format(ticker))\n\nget_data()","26ecef5e":"#Compile data from files created\ndef compile_data():\n    with open(\"sp500tickers.pickle\", \"rb\") as f:\n        tickers = pickle.load(f)\n        \n    main_df = pd.DataFrame()\n    \n    for count, ticker in enumerate(tickers):\n        df = pd.read_csv('stock_dfs\/{}.csv'.format(ticker))\n        df.set_index('Date', inplace = True)\n        df.rename(columns = {'Adj Close': ticker}, inplace = True)\n        df.drop(['Open','High','Low','Close','Volume'], 1, inplace = True)\n        \n        if main_df.empty:\n            main_df = df\n        else:\n            main_df = main_df.join(df, how = 'outer')\n            \n        if count%100 == 0:\n            print(count)\n            \n    print(main_df.head())\n    main_df.to_csv('sp500_compile.csv')\n    \ncompile_data()","dde62314":"#Function for plotting any number of tickers\ndef visualize(ticker_symbol, size):\n    df = pd.read_csv('sp500_compile.csv')\n    df[ticker_symbol].plot(figsize=size)","2a679e62":"visualize(['AAPL', 'AMZN'], (10, 7))","496988cb":"The python ecosystem allows for useful retrieval and visualizations of a variety of data. In this notebook, I'll show you how to retrieve stock data nd produce some basic visualizations!","788a7c44":"**PYTHON FOR STOCK PRICE ANALYSIS**","43119f3e":"Let's revisit raw price changes. Candlesticks are a more useful visualization, so we'll reconstruct the price plot with the plotyl API","520d8cb9":"![](https:\/\/4.bp.blogspot.com\/-oLOn05EMPmw\/V9SzHxHrnWI\/AAAAAAAAOKA\/8v-0dpR0Fec4tXkjcZLleD9YfsiHOPj2wCLcB\/s640\/frugal-finance-bootstrap-business-lean-startup-financial-responsibility-save-money-company-entrepreneur.jpg)","3f8694f5":"These graphs are nice, but aren't full of any technical indicators. One such useful indicator we can derive from the data is the moving average of the stock price.  In effect, a moving averagegives us a \"smoother\" image of price changes over time that are resistant to brief fluctuations. You can find more info on moving averages here: https:\/\/www.investopedia.com\/terms\/m\/movingaverage.asp","aa4a779b":"Alright, so we have some visualizations, but there all for one stock. Not very useful. For the next section, we'll use webscarping libraries, namely Beautiful Soup (bs4) and pickle, to scrape a wikipedia page for the tickers for all companies in the S&P 500. In the following section, we'll retrieve the tickers, get pricing data for the tickers, compile our data, and demonstrate how to plot any of the data we have."}}