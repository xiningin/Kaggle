{"cell_type":{"db3f13d2":"code","049321c7":"code","dd7411d2":"code","2fdfe059":"code","8dc05bb7":"code","caf86c24":"code","c3bb147c":"code","6efd9f04":"code","72922f2e":"code","9cb258fe":"code","cf18e92b":"code","600e1aaf":"code","1ffe166f":"code","bea6dd1f":"code","788c9531":"code","7441dd3b":"code","cf7f71fa":"code","2f692c45":"code","6e5a79bc":"code","32f4a3cd":"code","83fe6dae":"code","55058902":"markdown"},"source":{"db3f13d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","049321c7":"# Import required librarues\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import QuantileTransformer\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n\nfrom mlxtend.classifier import StackingCVClassifier\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.metrics import accuracy_score","dd7411d2":"train = pd.read_csv(\"\/kaggle\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\")","2fdfe059":"# Remove the Labels and make them y\ny = train['Cover_Type']\n\n# Remove label from Train set\nX = train.drop(['Cover_Type'],axis=1)\n\n# Rename test to text_X\ntest_X = test\n\n\n\n# split data into training and validation data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX = X.drop(['Id'], axis = 1)\ntrain_X = train_X.drop(['Id'], axis = 1)\nval_X = val_X.drop(['Id'], axis = 1)\ntest_X = test_X.drop(['Id'], axis = 1)","8dc05bb7":"train_X.describe()","caf86c24":"val_X.describe()","c3bb147c":"sns.distplot(train_X['Elevation'], label = 'train_X')\nsns.distplot(val_X['Elevation'], label = 'val_X')\nsns.distplot(test_X['Elevation'], label = 'test_X')\nplt.legend()\nplt.title('Elevation')\nplt.show()","6efd9f04":"sns.distplot(train_X['Aspect'], label = 'train_X')\nsns.distplot(val_X['Aspect'], label = 'val_X')\nsns.distplot(test_X['Aspect'], label = 'test_X')\nplt.title('Aspect')\nplt.legend()\nplt.show()","72922f2e":"sns.distplot(train_X['Horizontal_Distance_To_Hydrology'], label = 'train_X')\nsns.distplot(val_X['Horizontal_Distance_To_Hydrology'], label = 'val_X')\nsns.distplot(test_X['Horizontal_Distance_To_Hydrology'], label = 'test_X')\nplt.title('Horizontal_Distance_To_Hydrology')\nplt.legend()\nplt.show()","9cb258fe":"sns.distplot(train_X['Vertical_Distance_To_Hydrology'], label = 'train_X')\nsns.distplot(val_X['Vertical_Distance_To_Hydrology'], label = 'val_X')\nsns.distplot(test_X['Vertical_Distance_To_Hydrology'], label = 'test_X')\nplt.title('Vertical_Distance_To_Hydrology')\nplt.legend()\nplt.show()","cf18e92b":"sns.distplot(train_X['Horizontal_Distance_To_Roadways'], label = 'train_X')\nsns.distplot(val_X['Horizontal_Distance_To_Roadways'], label = 'val_X')\nsns.distplot(test_X['Horizontal_Distance_To_Roadways'], label = 'test_X')\nplt.title('Horizontal_Distance_To_Roadways')\nplt.legend()\nplt.show()","600e1aaf":"sns.distplot(train_X['Hillshade_9am'], label = 'train_X')\nsns.distplot(val_X['Hillshade_9am'], label = 'val_X')\nsns.distplot(test_X['Hillshade_9am'], label = 'test_X')\nplt.title('Hillshade_9am')\nplt.legend()\nplt.show()","1ffe166f":"### define the classifiers\n### Parameters from :https:\/\/www.kaggle.com\/joshofg\/pure-random-forest-hyperparameter-tuning\n\nclassifier_rf = RandomForestClassifier(n_estimators = 719,\n                                       max_features = 0.3,\n                                       max_depth = 464,\n                                       min_samples_split = 2,\n                                       min_samples_leaf = 1,\n                                       bootstrap = False,\n                                       random_state=42)\nclassifier_xgb = OneVsRestClassifier(XGBClassifier(n_estimators = 719,\n                                                   max_depth = 464,\n                                                   random_state=42))\nclassifier_et = ExtraTreesClassifier(random_state=42)","bea6dd1f":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nsclf = StackingCVClassifier(classifiers=[classifier_rf,\n                                         classifier_xgb,\n                                         classifier_et],\n                            use_probas=True,\n                            meta_classifier=classifier_rf)\n\n\n\nlabels = ['Random Forest', 'XGBoost', 'ExtraTrees', 'MetaClassifier']\n\n\n\n\nfor clf, label in zip([classifier_rf, classifier_xgb, classifier_et, classifier_rf], labels):\n    scores = cross_val_score(clf, train_X.values, train_y.values.ravel(),\n                             cv=5,\n                             scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))","788c9531":"sclf.fit(train_X.values, train_y.values.ravel())","7441dd3b":"\nval_pred = sclf.predict(val_X.values)","cf7f71fa":"acc = accuracy_score(val_y, val_pred)\nprint(acc)","2f692c45":"sclffin = StackingCVClassifier(classifiers=[classifier_rf,\n                                            classifier_xgb,\n                                            classifier_et],\n                               use_probas=True,\n                               meta_classifier=classifier_rf)","6e5a79bc":"sclffin.fit(X.values, y.values.ravel())","32f4a3cd":"test_ids = test[\"Id\"]\ntest_pred = sclffin.predict(test_X.values)","83fe6dae":"# Save test predictions to file\noutput = pd.DataFrame({'Id': test_ids,\n                       'Cover_Type': test_pred})\noutput.to_csv('submission.csv', index=False)","55058902":"### Import the Raw Data"}}