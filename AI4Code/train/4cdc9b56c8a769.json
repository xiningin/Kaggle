{"cell_type":{"6755fe85":"code","4689dd61":"code","6e329c9b":"code","30e24fb0":"code","03f494a8":"code","2d95a025":"code","4983afa1":"code","9ff804cd":"code","7866facd":"code","482beb7c":"code","bb2b824a":"code","6b81a150":"code","99e34b72":"code","544be91b":"markdown"},"source":{"6755fe85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4689dd61":"df=pd.read_csv('\/kaggle\/input\/diabetes-dataset\/diabetes2.csv')\ndf.head()","6e329c9b":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True,cmap=plt.cm.plasma)","30e24fb0":"df.info()","03f494a8":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(df.drop(['Outcome'],axis=1),df['Outcome'],test_size=0.2,random_state=2)","2d95a025":"from sklearn.linear_model import LogisticRegression\nLR=LogisticRegression(max_iter=150)\nLR.fit(X_train,y_train)","4983afa1":"yhat=LR.predict(X_test)","9ff804cd":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(yhat,y_test))","7866facd":"from sklearn.neighbors import KNeighborsClassifier\nKN=KNeighborsClassifier(n_neighbors=8)\nKN.fit(X_train,y_train)\nyhat=KN.predict(X_test)\nprint(accuracy_score(yhat,y_test))","482beb7c":"from sklearn import svm\nclf=svm.SVC(kernel='rbf')\nclf.fit(X_train,y_train)\nyhat=clf.predict(X_test)\naccuracy_score(yhat,y_test)","bb2b824a":"from sklearn import svm\nclf=svm.SVC(kernel='linear')\nclf.fit(X_train,y_train)\nyhat=clf.predict(X_test)\naccuracy_score(yhat,y_test)","6b81a150":"from sklearn import svm\nclf=svm.SVC(kernel='poly')\nclf.fit(X_train,y_train)\nyhat=clf.predict(X_test)\naccuracy_score(yhat,y_test)","99e34b72":"from sklearn import svm\nclf=svm.SVC(kernel='sigmoid')\nclf.fit(X_train,y_train)\nyhat=clf.predict(X_test)\naccuracy_score(yhat,y_test)","544be91b":"# Conclusion:\n\n**We see the Support Vector Machine fits best when we use 'polynomial(poly)' as kernel**"}}