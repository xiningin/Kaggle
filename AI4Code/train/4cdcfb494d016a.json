{"cell_type":{"24fc99f9":"code","650c4e3c":"code","800b7b89":"code","845113b8":"code","744f17d8":"code","a8316730":"code","76ac1d09":"code","d039681c":"code","9ea3a7ff":"code","545d1fa1":"code","dfce34a2":"code","05933176":"code","8bb99dba":"code","e9ad511b":"code","441b9510":"code","b3bdcce7":"code","cbddc839":"code","7d69a55a":"code","74f343f1":"code","53fd1dcf":"code","cdeea521":"code","8cc456ee":"code","5734f2aa":"code","9b8f4a39":"code","09849997":"code","857c1f9f":"code","0edb73bf":"code","88cbfa1f":"code","b627f9c0":"code","efb03220":"code","125b19f5":"code","a75a0de8":"markdown","a8ab294e":"markdown","e20adcfd":"markdown","e4a57c30":"markdown","c42e38a7":"markdown","a8cce33a":"markdown","4e43c6a6":"markdown","fb592c5b":"markdown","27db8d3b":"markdown","14aa5af6":"markdown","a7aa35dc":"markdown","d5210d6a":"markdown","d7d82648":"markdown","1b08f200":"markdown","1a8f8bbd":"markdown","3c8fb9e8":"markdown","a5c63f16":"markdown","2b4964e4":"markdown","b792454d":"markdown","ebe8be3f":"markdown","9b2a71f3":"markdown","bb8c1803":"markdown","18ee29a1":"markdown","28fc60a3":"markdown","71ad40ae":"markdown","955c9e34":"markdown","81d03e3e":"markdown","ae71bd7a":"markdown","95c1b6aa":"markdown","dcef0b61":"markdown","24cc0025":"markdown","431e3b69":"markdown","7319c29a":"markdown","a7425883":"markdown","4b49c983":"markdown","3bee27a6":"markdown","d1535d94":"markdown"},"source":{"24fc99f9":"############################################################################\n# import libraries\n############################################################################\nimport statistics\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set_theme(style=\"whitegrid\")\nplt.style.use('seaborn')","650c4e3c":"############################################################################\n# Variables\n############################################################################\nmanufacturers = {\n    'A' : 'American Home Food Products',\n    'G' : 'General Mills',\n    'K' : 'Kelloggs',\n    'N' : 'Nabisco',\n    'P' : 'Post',\n    'Q' : 'Quaker Oats',\n    'R' : 'Ralston Purina',\n }\nserving_types = {\n    'C': 'cold',\n    'H': 'hot',\n}\nnutrition_list = [\n    'calories',\n    'protein',\n    'fat',\n    'sodium',\n    'fiber',\n    'carbohydrates',\n    'sugars',\n    'potassium',\n    'vitamins'\n]\ncolors = []","800b7b89":"############################################################################\n# Re-usatable functions\n############################################################################\n\n\"\"\"\n#\n#\n#\n\"\"\"\ndef change_observation_values(df,list_items,column_name):\n\n    #df_copy = df_item.copy()\n\n    for index, value in list_items.items():\n        df.loc[df[column_name] == index, column_name] = value\n\n    return df\n\n\"\"\"\n#\n#\n#\n\"\"\"\ndef get_observations(df,column):\n    \n    return pd.Series(df[column]).drop_duplicates().to_list()\n\n\"\"\"\n#\n#\n#\n\"\"\"\ndef count_observations(list_series,df,column):\n    \n    return_this = []\n\n    for s in list_series:\n        return_this.append( df[column].str.count(s).sum() )\n    return return_this","845113b8":"#\n# Load the dataset into pandas dataframe\n#\ndf = pd.read_csv(\"..\/input\/80-cereals\/cereal.csv\")\ndf.head()","744f17d8":"df.columns","a8316730":"df.info()","76ac1d09":"df.describe()","d039681c":"df.isnull()","9ea3a7ff":"df = df.rename(columns={\"mfr\": \"manufacturer\", \"type\": \"serving_type\", \"potass\":\"potassium\", 'carbo': 'carbohydrates'})","545d1fa1":"df = change_observation_values(df,manufacturers,'manufacturer')","dfce34a2":"df = change_observation_values(df,serving_types,'serving_type')","05933176":"for nl in nutrition_list:\n    df.loc[df[nl] == -1, nl] = 0","8bb99dba":"df.head()","e9ad511b":"companies = get_observations(df,'manufacturer')\nproduct_count = count_observations(companies,df,'manufacturer')\n\nfig = plt.figure(figsize=(12,5), dpi=200)\nfig.suptitle('Manufacturers',fontsize=16)\nplots = sns.barplot(y = product_count,x = companies, color='darkblue')\nplt.xlabel('Companies')\nplt.ylabel('No. of Cereals')\n\nfor bar in plots.patches:\n    \n    plots.annotate(\n        format(bar.get_height(), '.2f'),\n        (bar.get_x() + bar.get_width() \/ 2,\n        bar.get_height()), \n        ha='center', \n        va='center',\n        size=15, \n        xytext=(0, 8),\n        textcoords='offset points'\n    )\n\nplt.show()","441b9510":"df_top_rating = df.sort_values('rating', ascending=False)\ndf_top_rating = df_top_rating.head(5)\n\nfig = plt.figure(figsize=(12,5), dpi=100)\nfig.suptitle('Top 5 highest rated cereals',fontsize=16)\nplots = sns.barplot(y = df_top_rating['name'],x = df_top_rating['rating'], color='darkblue')\nplt.xlabel('Ratings')\nplt.ylabel('Cereal Names')\n\nfor p in plots.patches:\n    width = p.get_width()\n    plt.text(\n        3+p.get_width(), \n        p.get_y()+0.55*p.get_height(),\n        '{:1.2f}'.format(width),\n        size=10,\n        ha='center', \n        va='center'\n    )\n\nplt.show()","b3bdcce7":"low_ratings = df.sort_values('rating', ascending=True)\nlow_rating_5 = low_ratings.head(5)\n\nfig = plt.figure(figsize=(15,5), dpi=100)\nfig.suptitle('Top 5 lowest rating cereals',fontsize=16)\nplots = sns.barplot(y = low_rating_5['name'],x = low_rating_5['rating'], color='darkblue')\nplt.xlabel('Ratings')\nplt.ylabel('Cereal Names')\n\nfor p in plots.patches:\n    width = p.get_width()\n    plt.text(\n        1+p.get_width(), \n        p.get_y()+0.55*p.get_height(),\n        '{:1.2f}'.format(width),\n        size=16,\n        ha='center', \n        va='center'\n    )\n\nplt.show()","cbddc839":"#define data\nservings = get_observations(df,'serving_type')\nservings_count = count_observations(servings,df,'serving_type')\n\n#create pie chart\nfig = plt.figure(figsize=(20,10), dpi=100)\nfig.suptitle('Serving Types per Cereal',fontsize=16)\n#plt.pie(servings_count, labels = servings, colors = colors, autopct='%.0f%%')\nplt.pie(servings_count, labels = servings, autopct='%.0f%%')\nplt.show()","7d69a55a":"#define data\n_s = df['shelf'].value_counts()\nshelves = _s.index\nshelves_count = _s\n\nfig = plt.figure(figsize=(8,5), dpi=200)\nfig.suptitle('Number of Cereals per shelf',fontsize=16)\nplots = sns.barplot(y = shelves_count,x = shelves, color='darkblue')\nplt.xlabel('Shelf Number')\nplt.ylabel('No. of Cereals')\n\nfor bar in plots.patches:\n    \n    plots.annotate(\n        format(bar.get_height(), '.2f'),\n        (bar.get_x() + bar.get_width() \/ 2,\n        bar.get_height()), \n        ha='center', \n        va='center',\n        size=10, \n        xytext=(0, 8),\n        textcoords='offset points'\n    )\n\nplt.show()","74f343f1":"fig = plt.figure(figsize=(14,5), dpi=100)\nfig.suptitle('Outliers',fontsize=16)\nsns.boxplot(data=df)\nplt.show()","53fd1dcf":"shelves_rating_count = []\nfor sc in shelves:\n    _s = df['shelf'].value_counts()\n    _sum = df['rating'][df['shelf'] == sc].sum()\n    _count = df['rating'][df['shelf'] == sc].count()\n    shelves_rating_count.append(_sum\/_count)\n\nfig = plt.figure(figsize=(8,5), dpi=200)\nfig.suptitle('Shelf with the highest average rating',fontsize=16)\nplots = sns.barplot(y = shelves_rating_count,x = shelves, color='darkblue')\nplt.xlabel('Shelf Number')\nplt.ylabel('Ratings')\n\nfor bar in plots.patches:\n    \n    plots.annotate(\n        format(bar.get_height(), '.2f'),\n        (bar.get_x() + bar.get_width() \/ 2,\n        bar.get_height()), \n        ha='center', \n        va='center',\n        size=10, \n        xytext=(0, 8),\n        textcoords='offset points'\n    )\n\nplt.show()","cdeea521":"df.hist(figsize=(15, 10), bins=10, xlabelsize=5, ylabelsize=8);","8cc456ee":"df.corr()","5734f2aa":"fig = plt.figure(figsize=(8,4), dpi=200)\nfig.suptitle('Correlation Heatmap',fontsize=16)\nsns.heatmap(df.corr())\nplt.show()","9b8f4a39":"df['health_score'] = 0\n\ndef nutrition_checker(row):\n    \n    return_score = 0\n    if row['calories'] <= 33:\n        return_score+=1\n    if row['protein'] <= 2:\n          return_score+=1\n    if row['fat'] <= 2.5:\n        return_score+=2\n    if row['sodium'] <= 140:\n        return_score+=1\n    if row['fiber'] >= 5:\n        return_score+=2\n    if row['carbohydrates'] < 20:\n        return_score+=1\n    if row['sugars'] < 6:\n        return_score+=2\n    if row['potassium'] < 100:\n        return_score+=1\n    if row['vitamins'] > 0:\n        return_score+=1\n        \n    return return_score\n\ndf['health_score'] = df.apply(nutrition_checker, axis=1)","09849997":"df_q1 = pd.DataFrame()\ndf_q1['name'] = df_top_rating['name']\n\nfor nl in nutrition_list:\n    df_q1[nl] = df_top_rating[nl]\n\ndf_q1 = df_q1.set_index('name')\n\nnutrition_minmax = []\n\nfor nl in nutrition_list:\n    nutrition_minmax.append({\n        'nutrition': nl, \n        'min': df_q1[nl].min(), \n        'max': df_q1[nl].max()\n    })\n\nnutrition_minmax = pd.DataFrame(nutrition_minmax)\nnutrition_minmax","857c1f9f":"unhealthy_cereals = df['health_score'].loc[df['health_score'] < 6]\nunhealthy_count = unhealthy_cereals.count()\n\nhealthy_cereals = df['health_score'].loc[df['health_score'] > 5]\nhealthy_count = healthy_cereals.count()\n\n#create pie chart\nfig = plt.figure(figsize=(20,10), dpi=100)\nfig.suptitle('Healthy Cereals Proportion',fontsize=16)\n#plt.pie(servings_count, labels = servings, colors = colors, autopct='%.0f%%')\nplt.pie([unhealthy_count,healthy_count], labels = ['unhealthy','healthy'], autopct='%.0f%%')\nplt.show()","0edb73bf":"df_healthy = df.sort_values('health_score', ascending=False)\ndf_healthy = df_healthy.head(5)\n\nfig = plt.figure(figsize=(12,5), dpi=200)\nfig.suptitle('Top 5 healthiest cereals',fontsize=20)\nplots = sns.barplot(y = df_healthy['name'],x = df_healthy['health_score'], color='darkblue')\nplt.xlabel('Health Score')\nplt.ylabel('Names')\n\nfor p in plots.patches:\n    width = p.get_width()\n    plt.text(\n        0.25+p.get_width(), \n        p.get_y()+0.55*p.get_height(),\n        '{:1.2f}'.format(width),\n        size=10,\n        ha='center', \n        va='center'\n    )\n\nplt.show()","88cbfa1f":"df_unhealthy = df.sort_values('health_score', ascending=True)\ndf_unhealthy = df_unhealthy.head(5)\n\nfig = plt.figure(figsize=(12,5), dpi=200)\nfig.suptitle('Top 5 unhealthiest cereals',fontsize=20)\nplots = sns.barplot(y = df_unhealthy['name'],x = df_unhealthy['health_score'], color='darkblue')\nplt.xlabel('Health Score')\nplt.ylabel('Names')\n\nfor p in plots.patches:\n    width = p.get_width()\n    plt.text(\n        0.25+p.get_width(), \n        p.get_y()+0.55*p.get_height(),\n        '{:1.2f}'.format(width),\n        size=10,\n        ha='center', \n        va='center'\n    )\n\nplt.show()","b627f9c0":"df_corr2 = pd.DataFrame()\ndf_corr2['name'] = df['name']\ndf_corr2['shelf'] = df['shelf']\ndf_corr2['rating'] = df['rating']\ndf_corr2['health_score'] = df['health_score']\ndf_corr2.corr()","efb03220":"fig = plt.figure(figsize=(10,5), dpi=200)\nfig.suptitle('Rating x Health Correlation',fontsize=20)\nplots = sns.regplot(x=\"health_score\", y=\"rating\", data=df_corr2);\nplt.xlabel('Health Score')\nplt.ylabel('Rating')\nplt.show()","125b19f5":"fig = plt.figure(figsize=(10,5), dpi=200)\nfig.suptitle('Shelf x Health Correlation',fontsize=20)\nplots = sns.regplot(x=\"health_score\", y=\"shelf\", data=df_corr2);\nplt.xlabel('Health Score')\nplt.ylabel('Shelf')\nplt.show()","a75a0de8":"# 7. Load the Dataset and check its landscape","a8ab294e":"# 9. Exploratory Data Analysis","e20adcfd":"**8.4 Change -1 values to 0 (zero)**\n\nIn real life, you cant have -1 values on the nutrition columns","e4a57c30":"# 4. Methodologies\n\n1. We will be using pandas and\/or numpy together with seaborn in creating visualizations for the data.\n2. We will be using correlation and linear regression to see if one factor correlates to another.\n3. We will be using the boxplot as a visualization method for identifying outliers.","c42e38a7":"**9.5 Shelf with the highest average rating**","a8cce33a":"# 13. Resources\n\nhttp:\/\/www.historyofcereals.com\/\n\nhttps:\/\/cspinet.org\/tip\/five-things-check-you-buy-breakfast-cereal\n\nhttps:\/\/health.clevelandclinic.org\/how-to-pick-a-healthy-cereal\/\n\nhttps:\/\/www.healthline.com\/nutrition\/are-breakfast-cereals-healthy#tips\n\nhttps:\/\/www.verywellfit.com\/how-to-choose-a-breakfast-cereal-2506602\n\nhttps:\/\/www.kidney.org\/newsletter\/choosing-right-breakfast-cereal-ckd#:~:text=Choose%20cereals%20under%20100%20mg,are%20often%20a%20better%20buy.\n\nhttps:\/\/www.todaysdietitian.com\/newarchives\/121112p30.shtml#:~:text=%E2%80%9CIt's%20important%20for%20consumers%20to,5%20g%2C%E2%80%9D%20Crandall%20says.","4e43c6a6":"<img src=\"https:\/\/mydmi.imgix.net\/v3blog\/8-Ways-to-Extract-Value-from-Customer-Data---Blog.jpg?crop=edges&fit=crop&fm=jpg&h=1260&ixlib=php-3.3.1&q=40&w=2400&s=f7b1393a54b235bec393171bdbb7032a\">","fb592c5b":"## 11.4 Does having a high rating correlate to being the healthiest Cereal in the dataset? And how does it affect shelf placement?","27db8d3b":"#### 9.3 Serving types per cereal, either cold or hot","14aa5af6":"# 5. Key Findings\n\n1. Having a high rating does not correlate to being the healthiest among the bunch.\n2. 74% of the cereals from the dataset are considered healthy for consumption.\n3. Shelf 1 has the lowest number of cereals while shelf 3 has the highest number.\n4. Shelf 1 has the highest rating on average, might be due to having low number of cereals displayed.","a7aa35dc":"**8.1 Change column names**","d5210d6a":"#### 9.4 Outliers","d7d82648":"# Table of Contents\n\n- Introduction\n- Objective\n- The Data\n- Methodology\n- Key Findings\n- Setup Python Modules, Variables and Functions\n- Load the dataset\n- Data Cleaning\n- Exploratory Data Analysis\n- The Health_score\n- Asking the right questions\n- Conclusion\n- Resources","1b08f200":"#### 9.6 Normal Distribution","1a8f8bbd":"# 3. The Data","3c8fb9e8":"## 11.3 Which cereals are the most healthiest regardless of its rating? And which is the most unhealthiest?","a5c63f16":"# 1. Introduction\n\nThe word \"cereal\" came from the roman goddess of harvest and agriculture **Ceres**. Which actually makes sense because the cereal that we know today is a type of grass that yields edible grains is cultivated and harvested.\n\nIn the early to mid 19th century the American diet for breakfast didn't really contain enough fiber, its mostly meat and protein which caused several digestive problem. 1854 came and a german immigrant by name **Ferdinand Schumacher** invented the cereals that we know today. He produced them on a hand oats grinder in the back room of his store in Akron, Ohio.And it led him founding his first company named \u201cGerman Mills American Oatmeal Company\u201d and it will later become **Quaker Oats Company**.\n\nToday, theres a lot of choice that we pick to include to our daily diet and sometimes people are having a difficult time to decide which to buy. Let's use data science to find that out.","2b4964e4":"#### 9.2 Top 5 lowest rating cereals","b792454d":"#### 8.9 Result","ebe8be3f":"**8.2 Change manufacturer observersations into readable texts**","9b2a71f3":"## 11.1 What is the range of nutrition needed to reach the top rating?","bb8c1803":"# 6. Setup Python Modules, Variables and Functions","18ee29a1":"#### 9.7 Correlation","28fc60a3":"# 11. Asking the right questions\n\nThe crux of this analysis, we need to ask a few questions that will satisfy our objective.","71ad40ae":"# 12. Conclusion","955c9e34":"The actual number of the cereals are only 77 and not 80.\n\nOn **11.1**, we found out the range of nutrition that the top rated cereals have. That could mean if a new product comes out and its nutrition content is within that range, it has a greater chance of acquiring a high rating. But having a high rating does not necessarily mean it is healthy, based on **11.4** theres only 39% correlation. Also the shelf placement doesnt mean anything to a cereal being healthy. **74%** of the cereals from the dataset are considered healthy for consumption. \n\nShelf 1 has the lowest number of cereals while shelf 3 has the highest number. Shelf 1 has the highest rating on average, might be due to having low number of cereals displayed.\n\n-\n\nI will be updating this notebook to add more insights.","81d03e3e":"**8.3 Change serving_type observersations into readable texts**","ae71bd7a":"#### 9.4 Number of Cereals per shelf","95c1b6aa":"#### 9.1 Number of Cereal Products per Manufacturer","dcef0b61":"<img src=\"https:\/\/cdn-aljaj.nitrocdn.com\/XHnEaystnzrPBayqKnFkRFpYTfNVJYcs\/assets\/static\/optimized\/rev-c2f8589\/www.listland.com\/wp-content\/uploads\/2019\/10\/052a033e85f1bd0c63d8d448456aeb5b.conclusion.jpg\">","24cc0025":"# 8. Data Cleaning","431e3b69":"# <center>Cereals - Exploratory Data Analysis<\/center>\n\n<center><img src=\"https:\/\/images-prod.healthline.com\/hlcmsresource\/images\/AN_images\/are-breakfast-cereals-healthy-1296x728-feature.jpg\"><\/center>","7319c29a":"#### 9.2 Top 5 highest rating cereals","a7425883":"# 10. The Health Score Column\n\nWe will be creating a health_score column, to rank all cereals according to how healthy they are for consumption. I've created the criteria based on a few articles I've added in the resources section.\n\n**Criteria based on multiple sources**\n\n- calorie < 30g or 55g\n- protein <= 1g or 2g || close to 10 g\n- fat <= 2.5 g\n- sodium <= 140 mg\n- fiber => 3g or 5g\n- carbohydrates\n- sugars < 7g or 6 g\n- potassium < 100 mg\n- vitamins > 0,25,100","4b49c983":"## 11.2 Which Cereals are healthy and which are not?","3bee27a6":"\n**Source**\n\nhttps:\/\/www.kaggle.com\/crawford\/80-cereals\n\n**Description**\n\nThe data consists of about 77 cereals manufactured by various companies. Within the dataset, are several information that consumers can use whenever they purchase these products, like serving type, nutrition, ratings, etc.","d1535d94":"# 2. Objective\n\nExplore the dataset, extract any useful information from it. And then answer some important questions that businesses can use in creating their new cereal product. And will this be useful for businesses\/manufacturers and consumers? I hope so."}}