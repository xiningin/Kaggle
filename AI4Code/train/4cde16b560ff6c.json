{"cell_type":{"773a145f":"code","7f3f1b21":"code","9d962057":"code","d114e795":"code","a0384ba6":"code","168c934b":"code","0cfda470":"code","3d0a5791":"code","61dda8b4":"code","9792069d":"code","5afe2825":"code","536fc795":"code","65e03604":"code","0e6758b7":"markdown"},"source":{"773a145f":"import pandas as pd \nimport numpy as np \n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nimport matplotlib.pyplot as plt","7f3f1b21":"X_train = pd.read_csv(\"..\/input\/train.csv\")\ny_train = X_train.label\nX_train = X_train.drop(\"label\", axis=1)","9d962057":"X_train","d114e795":"X_train.max().max()","a0384ba6":"X_train \/= X_train.max().max()\nX_train","168c934b":"X_train.shape","0cfda470":"X_train.values.reshape(-1,28,28,1).shape","3d0a5791":"X_train = X_train.values.reshape(-1,28,28,1)\nX_train","61dda8b4":"fig, ax = plt.subplots(8, 8, figsize=(6, 6))\nfor ax, pic in zip(ax.flat, X_train):\n    ax.imshow(pic[:, :, 0], cmap='binary')\n    ax.set(xticks=[], yticks=[])","9792069d":"y_train = pd.get_dummies(y_train)\ny_train","5afe2825":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=X_train[0].shape))\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (4, 4), activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(y_train.shape[1], activation='softmax'))\nmodel.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","536fc795":"model.fit(X_train, y_train, batch_size=320, epochs=100, verbose=1, validation_split=0.1,\n          callbacks=[EarlyStopping(monitor='val_acc', patience=3, verbose=1, mode='auto', restore_best_weights=True)])","65e03604":"from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n\nresnet = ResNet50(include_top=False, weights='imagenet', pooling='avg')","0e6758b7":"## Deep Neural Networks - Convolutional Neural Networks \n\nUn red neuronal \"profunda\" es aquella que tiene m\u00faltiples representaciones latentes que buscan extraer variables explicativas de bajo nivel y componerlas en capas superiores. Las redes convolucionales son un tipo de estas redes profundas, puntualmente utiles para la clasificacion de imagenes. \n\n###  Convolutional Neural Networks \n\n<br>\n\n![](http:\/\/www.mdpi.com\/information\/information-07-00061\/article_deploy\/html\/images\/information-07-00061-g001.png)\n\n<br>\n\n**A. Convolutional layer: ** Esta capa utiliza un filtro convolutivo para procesar partes de la imagen, el filtro consiste de coeficiente que se aplican sucesivamente a pedasos de la imagen.\n\n**B. Tranco (stride): ** El tranco es la cantidad de pixeles que se saltean cada vez qeu se mueve el filtro.\n\n![](http:\/\/deeplearning.net\/software\/theano\/_images\/numerical_padding_strides.gif) \n\n**C. Pooling Layer:**  Esta capa se utiliza para filtrar variables menos importantes y disminuir la cantidad necesaria de par\u00e1metros totales. \n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e9\/Max_pooling.png)\n\n"}}