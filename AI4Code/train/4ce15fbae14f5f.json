{"cell_type":{"7c7f7c12":"code","200ffc84":"code","dc59034c":"code","ee89707e":"code","f1600616":"code","18ec94e4":"code","6b5f2706":"code","9c99e7ca":"code","a9ebde1b":"code","084a63a3":"code","eb1b4fe6":"code","64f2b892":"code","a4de2a6e":"code","fce5e1e3":"code","df8ff401":"code","c880127c":"code","fc9d2f9c":"code","821e47c2":"code","780275de":"code","92b38144":"code","80869030":"code","d5f6fc6e":"code","368dc520":"code","7ee0ab94":"code","c606410a":"code","996176dd":"code","b4895af0":"code","48b7624e":"code","4003bd9f":"code","430ff7a5":"code","0341dad7":"code","168031ad":"code","7708d639":"code","6cec7248":"markdown","74b091af":"markdown","7dd74f16":"markdown","173e282c":"markdown","9d9c0412":"markdown","46d654cd":"markdown","304c5d4f":"markdown","f86c2659":"markdown","a0db06be":"markdown","4623831d":"markdown","f286f9e7":"markdown","d6d72e19":"markdown","854c0541":"markdown"},"source":{"7c7f7c12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","200ffc84":"df_novel_covid = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_novel_covid = df_novel_covid[df_novel_covid.ObservationDate == max(df_novel_covid['ObservationDate'])].sort_values(by=['Confirmed'], ascending=False)\ndf_novel_covid = df_novel_covid.groupby(['Country\/Region']).sum()[['Confirmed','Deaths','Recovered']].sort_values(by=['Confirmed'], ascending=False).reset_index()\ndf_novel_covid['Closed Cases'] = df_novel_covid['Deaths'] + df_novel_covid['Recovered']\ndf_novel_covid['Death Ratio in Closed Cases(%)'] = (df_novel_covid['Deaths'] * 100) \/ (df_novel_covid['Deaths'] + df_novel_covid['Recovered'])\ndf_novel_covid['Death Ratio in All Cases(%)'] = (df_novel_covid['Deaths'] * 100) \/ df_novel_covid['Confirmed']\ndf_novel_covid.index = np.arange(1, len(df_novel_covid) + 1)\n\n\ndf_novel_covid.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='YlGn',subset=[\"Death Ratio in Closed Cases(%)\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='PuBu',subset=[\"Closed Cases\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Death Ratio in All Cases(%)\"])","dc59034c":"df_novel_covid2 = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_novel_covid2['ActiveCases']= df_novel_covid2['Confirmed'] - (df_novel_covid2['Deaths'] + df_novel_covid2['Recovered'])\ndf_germany = df_novel_covid2[df_novel_covid2['Country\/Region']=='Germany'].groupby(['ObservationDate']).sum().reset_index()\ndf_italy = df_novel_covid2[df_novel_covid2['Country\/Region']=='Italy'].groupby(['ObservationDate']).sum().reset_index()\ndf_turkey = df_novel_covid2[df_novel_covid2['Country\/Region']=='Turkey'].groupby(['ObservationDate']).sum().reset_index()\ndf_spain =  df_novel_covid2[df_novel_covid2['Country\/Region']=='Spain'].groupby(['ObservationDate']).sum().reset_index()\ndf_us = df_novel_covid2[df_novel_covid2['Country\/Region']=='US'].groupby(['ObservationDate']).sum().reset_index()\ndf_france = df_novel_covid2[df_novel_covid2['Country\/Region']=='France'].groupby(['ObservationDate']).sum().reset_index()\ndf_germany['ObservationDate2'] = pd.to_datetime(df_germany['ObservationDate'])\ndf_germany = df_germany.sort_values(by=['ObservationDate2'],ascending=True)\ndf_germany['DeathRateClosed']= df_germany['Deaths'] * 100 \/ (df_germany['Deaths']+df_germany['Recovered'])\ndf_germany['RecoveryRateClosed']= df_germany['Recovered'] * 100 \/ (df_germany['Deaths']+df_germany['Recovered'])\ndf_germany.dropna(inplace=True)\ndf_italy['ObservationDate2'] = pd.to_datetime(df_italy['ObservationDate'])\ndf_italy = df_italy.sort_values(by=['ObservationDate2'],ascending=True)\ndf_italy['DeathRateClosed']= df_italy['Deaths'] * 100 \/ (df_italy['Deaths']+df_italy['Recovered'])\ndf_italy['RecoveryRateClosed']= df_italy['Recovered'] * 100 \/ (df_italy['Deaths']+df_italy['Recovered'])\ndf_italy.dropna(inplace=True)\ndf_turkey['ObservationDate2'] = pd.to_datetime(df_turkey['ObservationDate'])\ndf_turkey = df_turkey.sort_values(by=['ObservationDate2'],ascending=True)\ndf_turkey['DeathRateClosed']= df_turkey['Deaths'] * 100 \/ (df_turkey['Deaths']+df_turkey['Recovered'])\ndf_turkey['RecoveryRateClosed']= df_turkey['Recovered'] * 100 \/ (df_turkey['Deaths']+df_turkey['Recovered'])\ndf_turkey.dropna(inplace=True)\ndf_spain['ObservationDate2'] = pd.to_datetime(df_spain['ObservationDate'])\ndf_spain = df_spain.sort_values(by=['ObservationDate2'],ascending=True)\ndf_spain['DeathRateClosed']= df_spain['Deaths'] * 100 \/ (df_spain['Deaths']+df_spain['Recovered'])\ndf_spain['RecoveryRateClosed']= df_spain['Recovered'] * 100 \/ (df_spain['Deaths']+df_spain['Recovered'])\ndf_spain.dropna(inplace=True)\ndf_us['ObservationDate2'] = pd.to_datetime(df_us['ObservationDate'])\ndf_us = df_us.sort_values(by=['ObservationDate2'],ascending=True)\ndf_us['DeathRateClosed']= df_us['Deaths'] * 100 \/ (df_us['Deaths']+df_us['Recovered'])\ndf_us['RecoveryRateClosed']= df_us['Recovered'] * 100 \/ (df_us['Deaths']+df_us['Recovered'])\ndf_us.dropna(inplace=True)\ndf_france['ObservationDate2'] = pd.to_datetime(df_france['ObservationDate'])\ndf_france = df_france.sort_values(by=['ObservationDate2'],ascending=True)\ndf_france['DeathRateClosed']= df_france['Deaths'] * 100 \/ (df_france['Deaths']+df_france['Recovered'])\ndf_france['RecoveryRateClosed']= df_france['Recovered'] * 100 \/ (df_france['Deaths']+df_france['Recovered'])\ndf_france.dropna(inplace=True)\n","ee89707e":"# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_italy.ObservationDate2,\n                    y = df_italy.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_italy.ObservationDate2,\n                    y = df_italy.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'Italy COVID-19 Recovery Rate vs Death Rate in Closed Cases(%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_germany.ObservationDate2,\n                    y = df_germany.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.7)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_germany.ObservationDate2,\n                    y = df_germany.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'Germany COVID-19 Recovery Rate vs Death Rate in Closed Cases(%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n","f1600616":"# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_turkey.ObservationDate2,\n                    y = df_turkey.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_turkey.ObservationDate2,\n                    y = df_turkey.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'Turkey COVID-19 Recovery Rate vs Death Rate in Closed Cases(%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_spain.ObservationDate2,\n                    y = df_spain.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_spain.ObservationDate2,\n                    y = df_spain.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'Spain COVID-19 Recovery Rate vs Death Rate in Closed Cases(%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","18ec94e4":"# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_us.ObservationDate2,\n                    y = df_us.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_us.ObservationDate2,\n                    y = df_us.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'United States COVID-19 Recovery Rate vs Death Rate in Closed Cases(%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\ntrace1 = go.Scatter(\n                    x = df_france.ObservationDate2,\n                    y = df_france.DeathRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Death Rate',\n                    marker = dict(color = 'rgba(128, 0, 0, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_france.ObservationDate2,\n                    y = df_france.RecoveryRateClosed,\n                    mode = \"lines+markers\",\n                    name = 'Recovery Rate',\n                    marker = dict(color = 'rgba(0, 128, 0, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'France COVID-19 Recovery Rate vs Death Rate in Closed Cases (%)',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","6b5f2706":"trace1 = go.Scatter(\n    x=df_italy.ObservationDate2,\n    y=df_italy.ActiveCases,\n    name = \"Italy\"\n)\ntrace2 = go.Scatter(\n    x=df_germany.ObservationDate2,\n    y=df_germany.ActiveCases,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Germany\"\n)\ntrace3 = go.Scatter(\n    x=df_turkey.ObservationDate2,\n    y=df_turkey.ActiveCases,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Turkey\"\n)\ntrace4 = go.Scatter(\n    x=df_spain.ObservationDate2,\n    y=df_spain.ActiveCases,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Spain\"\n\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n     \n    title = 'Daily COVID-19 Active Cases in Italy, Germany, Turkey and Spain'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9c99e7ca":"df_dene = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndf_dene.head()","a9ebde1b":"#convert string to date\n#df_world['dateRep2'] = pd.to_datetime(df_world['dateRep'])\n#max(df_world.dateRep2)\ndf_world = pd.read_csv('http:\/\/opendata.ecdc.europa.eu\/covid19\/casedistribution\/csv')\n# Top 20 countries where COVID-19 has most seen\ntop_5 = df_world.groupby(\"countriesAndTerritories\").sum().sort_values(by=['cases'], ascending=False).head(5).reset_index()['countriesAndTerritories']\ntype(top_5)\n#df_world_top_5 = df_world[[each in top_5.values for each in df_world.countriesAndTerritories]]\ndf_world_top_5 = df_world[[each in top_5.values for each in df_world['countriesAndTerritories']]]\ndf_world_top_5 = df_world_top_5.reindex(index=df_world_top_5.index[::-1])\n\ndf_world3 = df_world.groupby(['countriesAndTerritories']).sum()[['cases','deaths']]\ndf_world3 = df_world3.sort_values(by=['cases'],ascending=False).reset_index()","084a63a3":"#Covid-19 Cases and Deaths wordcloud\n\n#countries = df_world3.countriesAndTerritories\ncountries=df_world3['countriesAndTerritories']\nplt.subplots(figsize=(12,12))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=512\n                         ).generate(\" \".join(countries))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","eb1b4fe6":"df_world3.countriesAndTerritories = df_world3.countriesAndTerritories.replace('United_States_of_America','USA')","64f2b892":"# I modified the map code from this link:https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-kiva \ndata = [ dict(\n        type = 'choropleth',\n        locations = df_novel_covid['Country\/Region'],\n        locationmode = 'country names',\n        z = df_novel_covid['Confirmed'],\n        text = df_novel_covid['Country\/Region'],\n        #colorscale = [[0,'rgb(255, 255, 255)'],[1,'rgb(56, 142, 60)']],\n        #colorscale = [[0,'rgb(255, 255, 255)'],[1,'rgb(220, 83, 67)']],\n        colorscale = [[0,\"rgb(5, 10, 172)\"],[0.85,\"rgb(40, 60, 190)\"],[0.9,\"rgb(70, 100, 245)\"],\\\n            [0.94,\"rgb(90, 120, 245)\"],[0.97,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(128,0,0)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Number of Cases'),\n      ) ]\n\nlayout = dict(\n    title = 'Number of cases by Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'equirectangular'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False, filename='covid19-cases-world-map')","a4de2a6e":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[0]].cases,\n                    mode = \"lines+markers\",\n                    name = top_5.values[0],\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[1]].cases,\n                    mode = \"lines+markers\",\n                    name = top_5.values[1],\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'))\n# Creating trace3\ntrace3 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[2]].cases,\n                    mode = \"lines+markers\",\n                    name = top_5.values[2],\n                    marker = dict(color = 'rgba(255, 255, 0, 0.8)'))\n# Creating trace4\ntrace4 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[3]].cases,\n                    mode = \"lines+markers\",\n                    name = top_5.values[3],\n                    marker = dict(color = 'rgba(255, 0, 0, 0.8)'))\n# Creating trace5\ntrace5 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[4]].cases,\n                    mode = \"lines+markers\",\n                    name = top_5.values[4],\n                    marker = dict(color = 'rgba(0, 255, 0, 0.8)'))\n\ndata = [trace1, trace2,trace3, trace4,trace5]\nlayout = dict(title = 'World COVID-19 Daily Cases',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","fce5e1e3":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[0]].deaths,\n                    mode = \"lines+markers\",\n                    name = top_5.values[0],\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[1]].deaths,\n                    mode = \"lines+markers\",\n                    name = top_5.values[1],\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'))\n# Creating trace3\ntrace3 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[2]].deaths,\n                    mode = \"lines+markers\",\n                    name = top_5.values[2],\n                    marker = dict(color = 'rgba(255, 255, 0, 0.8)'))\n# Creating trace4\ntrace4 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[3]].deaths,\n                    mode = \"lines+markers\",\n                    name = top_5.values[3],\n                    marker = dict(color = 'rgba(255, 0, 0, 0.8)'))\n# Creating trace5\ntrace5 = go.Scatter(\n                    x = df_world_top_5.dateRep,\n                    y = df_world_top_5[df_world_top_5.countriesAndTerritories==top_5.values[4]].deaths,\n                    mode = \"lines+markers\",\n                    name = top_5.values[4],\n                    marker = dict(color = 'rgba(0, 255, 0, 0.8)'))\n\ndata = [trace1, trace2,trace3, trace4,trace5]\nlayout = dict(title = 'World COVID-19 Daily Deaths',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","df8ff401":"\ndf = pd.read_csv(\"\/kaggle\/input\/us-counties-covid-19-dataset\/us-counties.csv\")","c880127c":"df.info()","fc9d2f9c":"df.corr().index","821e47c2":"\n#correlation map\nf,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","780275de":"df.columns","92b38144":"df.tail()","80869030":"#For time series data, it is convenient to use line diagrams\n# For this graph I've created a derived dataset from original dataset\ndf2 = df.groupby(['date']).sum()\n'''df2.columns\ndf2.cases.plot(kind = 'line', color = 'b',label = 'Cases',linewidth=2,alpha = 0.5,grid = True,linestyle = '-',figsize=(18,6))\ndf2.deaths.plot(kind = 'line', color = 'r',label = 'Deaths',linewidth=2,alpha = 0.5,grid = True,linestyle = '-',figsize=(18,6))\nplt.legend(loc='upper left')     # legend = puts label into plot\nplt.xlabel('Days')              # label = name of label\nplt.ylabel('# of Cases')\nplt.title('Corona Virus US Statistics')            # title = title of plot\nplt.show()'''","d5f6fc6e":"\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df2.index,\n                    y = df2.cases,\n                    mode = \"lines+markers\",\n                    name = \"Cases\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df2.index,\n                    y = df2.deaths,\n                    mode = \"lines+markers\",\n                    name = \"Deaths\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'US Corona Cases and Deaths',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","368dc520":"# Here is the top 10 states where covid-19 has most seen\ndf_hist = df[df.date == max(df.date)].groupby(['state']).sum().sort_values(by=['cases'],ascending=False).head(10)\nstates = df_hist.index.values\n#df_hist.cases.plot(kind = 'hist',figsize = (12,12))\n'''f, ax = plt.subplots(figsize=(18,8)) \nplt.bar(df_hist.index, df_hist.cases)\nplt.show()'''","7ee0ab94":"#Plotly bar graphic\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df_hist.index,\n                y = df_hist.cases,\n                name = \"Cases\",\n                marker = dict(color = 'rgba(0, 0, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = df_hist.index,\n                y = df_hist.deaths,\n                name = \"Deaths\",\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","c606410a":"df_for_states = df.groupby([\"date\",\"state\"]).sum()\ndf_for_states.reset_index(inplace=True)\n\n'''df_for_states.loc['2020-04-10']\ndf_for_states.index = range(1,len(df_for_states)+1,1)\ndf_for_states.head()'''\ndf_for_states = df_for_states[['date','state','cases','deaths']]\n#Last 10 days and top 10 states\ndf_us_deaths =  df_for_states.pivot(index='date',columns='state',values='deaths').tail(10)\ndf_us_cases =  df_for_states.pivot(index='date',columns='state',values='cases').tail(10)","996176dd":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df_us_deaths[states], annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()","b4895af0":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df_us_cases[states], annot=True, linewidths=1, fmt= '.1f',ax=ax)\nplt.show()","48b7624e":"df_california = df[df['state']=='California']\ndf_california.groupby([\"date\",\"county\"]).sum()\nratio =[df_california['deaths']\/df_california['cases']]\ndf_california['death_ratio'] = df_california['deaths']\/df_california['cases']\n","4003bd9f":"df_california_last_day = df_california[df_california['date'] == max(df_california['date'])].sort_values(by=['cases'],ascending=False).head(10)","430ff7a5":"fig, ax = plt.subplots(figsize=(18,6))\nx = np.arange(len(df_california_last_day['cases']))  # the label locations\nwidth = 0.35\nrects1 = ax.bar(x - width\/2, df_california_last_day['cases'], width, label='Cases')\nrects2 = ax.bar(x + width\/2, df_california_last_day['deaths'], width, label='Deaths')\nax.set_ylabel('Numbers')\nax.set_title('Cases and Deaths For Each County in California')\nax.set_xticks(x)\nax.set_xticklabels(df_california_last_day['county'])\nax.legend()\nplt.show()","0341dad7":"fig = plt.figure(figsize=(10,10))\nax = fig.add_axes([0,0,1,1])\nax.axis('equal')\ncounty = df_california_last_day.sort_values(by=['death_ratio'],ascending=False)['county']\ndeath_ratio = df_california_last_day.sort_values(by=['death_ratio'],ascending=False)['death_ratio']\nax.pie(death_ratio, labels = county,autopct='%1.2f%%')\nax.set_title('Death Ratios')\nplt.show()","168031ad":"df_turkey = df_world[df_world['countriesAndTerritories']=='Turkey']\ndf_turkey = df_turkey.reindex(index=df_turkey.index[::-1])\n'''\nplt.figure(figsize=(18,6))\nplt.plot(df_turkey.dateRep,df_turkey.cases,'bo-')\nplt.xticks(rotation=90)\nplt.title(\"Turkey Daily COVID-19 Cases\")\nplt.show()'''","7708d639":"# Creating trace1\ntrace1 = go.Scatter(\n                    x = df_turkey.dateRep,\n                    y = df_turkey.cases,\n                    mode = \"lines+markers\",\n                    name = 'Cases',\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df_turkey.dateRep,\n                    y = df_turkey.deaths,\n                    mode = \"lines+markers\",\n                    name = 'Deaths',\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'))\ndata = [trace1, trace2]\nlayout = dict(title = 'Turkey COVID-19 Daily Cases and Deaths',\n              xaxis= dict(title= 'Days',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","6cec7248":"## Active Cases Day by Day\n\nThis is an important graphic because it can represent the current burden of the health system of countries.","74b091af":"<a id = \"1\"><\/a><br>\n# COVID-19 US Data","7dd74f16":" **To get what columns dataframe have and inspect some examples of the dataset we can use \"*columns*\" and \"*head*\" methods respectively.**","173e282c":"With using info method of dataframe we can get useful information about the dataset we work on.","9d9c0412":"<a id=\"3\"><\/a> <br\/>\n## COVID-19 California Detailed Statistics","46d654cd":"<a id=\"2\"><\/a> <br\/>\n## COVID-19 Cases State by State (US)","304c5d4f":"# COVID-19 Cases and Deaths Visual Analysis\n\nThis notebook purposes to give some useful information about COVID-19 cases in United States.\n\n1. [COVID-19 World Statistics](#5)\n1. [COVID-19 Cases State by State (US)](#2)\n1. [COVID-19 California Detailed Statistics](#3)\n1. [COVID-19 Turkey Statistics](#6)","f86c2659":"<a id=\"5\"> <\/a> <br\/> \n## COVID-19 World Statistics","a0db06be":"<a id=\"7\"><\/a><br\/>\n## Wordcloud","4623831d":"<a id=\"4\"> <\/a> <br\/>\n### Heatmaps of Cases and Deaths by State (Last 10 days and top 10 states)","f286f9e7":"corr method gives correlation coefficients of numeric columns.","d6d72e19":"<a id=\"6\"> <\/a> <br\/> \n## COVID-19 Turkey Statistics","854c0541":"<a id=\"8\"> <\/a> <br\/>\n## Daily COVID-19 Cases and Deaths"}}