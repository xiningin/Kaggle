{"cell_type":{"d38ca062":"code","b959b105":"code","200e194d":"markdown"},"source":{"d38ca062":"########################################################################\n#### Python code computing adatoms on 2D superconductors\n#### 2021\/9\/13 By Yang Peng (yang.peng@csun.edu)\n########################################################################\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np\n%matplotlib widget\nfrom matplotlib import path\nimport time\n# import ipywidgets as widgets\nfrom joblib import Parallel, delayed\nfrom scipy import linalg\nimport multiprocessing\nimport matplotlib as mpl\nfrom numba import jit\n# mpl.use('Agg')\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom mpl_toolkits.mplot3d.axes3d import Axes3D\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nnum_cores = multiprocessing.cpu_count() #import matplotlib.pyplot as plt\n%config Completer.use_jedi = False\nplt.rcParams.update({'font.size':16})","b959b105":"def main(J,kh):\n    # You can change J and kh\n    Nx = 36 # K points in x\n    Ncells = Nx # number unit cell along x\n    Ny = 8\n    ns = 3\n    Delta = 1.4\n    tx = 1.3\n    ty = 1.3\n    mu = 1.5\n    ###############################################\n    ## Define matrices\n    global sigma_x,sigma_y,sigma_z,sigma_0,identity_y,identity_ns,chain_pos_y_mat,chain_pos_x_mat,hopping_x,hopping_y,hop_between_cell_x,soc_hopping\n    sigma_x = np.array([[0,1],[1,0]])\n    sigma_y = np.array([[0,-1j],[1j,0]])\n    sigma_z = np.array([[1,0],[0,-1]])\n    sigma_0 = np.eye(2)\n    identity_y = np.eye(Ny)\n    identity_ns= np.eye(ns)\n    chain_pos_y = int(Ny\/2)\n    chain_pos_y_mat = np.zeros([Ny,Ny])\n    chain_pos_y_mat[chain_pos_y,chain_pos_y] = 1\n    chain_pos_x_mat = np.zeros([ns,ns])\n    chain_pos_x_mat[0,0] = 1\n    hopping_y = (-ty)*np.diag(np.ones(Ny-1),1)\n    hopping_x = (-tx)*np.diag(np.ones(ns-1),1)\n    hop_between_cell_x = np.zeros([ns,ns])\n    hop_between_cell_x[-1,0]=-tx\n    soc_hopping = np.kron(sigma_z,np.cos(kh)*sigma_0) + np.kron(sigma_0,1j*np.sin(kh)*sigma_x)\n    ## End define matrices\n    ###############################################\n    \n    H_no_adatom, H_exchange= H0(kh,mu,Delta,J)\n    Ham_onsite = H_no_adatom + H_exchange\n    V = V_cell_hop(kh)\n    def real_space_ham(Ncells):\n        H_real_space = np.kron(np.diag(np.ones(Ncells-1),1),V)\n        H_real_space +=H_real_space.conj().T\n        H_real_space +=np.kron(np.eye(Ncells),H_no_adatom)\n        chain_length = int(Ncells\/2)\n        empty_length1 = int(chain_length\/2)\n        empty_length2 = Ncells - chain_length - empty_length1\n        adatom_locations = linalg.block_diag(np.zeros([empty_length1,empty_length1]),np.eye(chain_length),np.zeros([empty_length2,empty_length2]))\n        H_real_space += np.kron(adatom_locations,H_exchange)\n        return H_real_space\n        \n    def Ham_Bloch(k):\n        Hb = V*np.exp(1j*k)\n        Hb +=Hb.conj().T\n        Hb +=Ham_onsite\n        return Hb\n    def bands(k):\n        return linalg.eigvalsh(Ham_Bloch(k))\n#     return Ham_onsite, V\n    \n    klist = np.linspace(-np.pi,np.pi,Nx+1)\n    klist = klist[0:-1]\n    lenk = klist.shape[0]\n    EElist = np.zeros([lenk,ns*Ny*4])\n    for jj in range(lenk):\n        EElist[jj,:] = bands(klist[jj])\n    EElist = EElist\/Delta\n    \n    Ham_obc = real_space_ham(Ncells)\n    EE_obc = linalg.eigvalsh(Ham_obc)\/Delta\n    fig,ax = plot_bands(klist,EElist)\n    fig_obc,ax_obc = plot_spectrum(EE_obc)\n    return fig,ax, fig_obc,ax_obc\n\ndef plot_spectrum(EElist):\n    len_EE = EElist.shape[0]\n    fig,ax = plt.subplots()\n    ax.plot(np.ones([len_EE,1]),EElist,'b.')\n    ax.set_title('Spectrum with OBC')\n    ax.set_ylabel(r'$E\/\\Delta$')\n    ax.set_ylim([-0.2,0.2])\n    ax.tick_params(labelbottom = False, bottom = False)\n    return fig,ax\n\ndef plot_bands(klist,EElist):\n    numofk = klist.shape[0]\n    fig,ax = plt.subplots()\n    ax.plot(klist\/np.pi,EElist,'k.')\n    ax.set_title('Shiba Bands')\n    ax.set_ylabel(r'$E\/\\Delta$')\n    ax.set_xlabel(r'$k n_s a_0\/\\pi$')\n    ax.set_ylim([-1,1])\n    return fig,ax\n\ndef H0(kh,mu,Delta,J):\n    y_hop = np.kron(np.kron(np.kron(hopping_y,identity_ns),sigma_z),sigma_0)\n    y_hop += y_hop.conj().T\n    ###################################################################\n    ## The following terms should finally make tensor product with identity_y\n    x_hop = np.kron(hopping_x,soc_hopping)\n    x_hop += x_hop.conj().T\n    ### The following terms should also make tensor product with identity_ns\n    chemical_potential = np.kron(-mu*sigma_z,sigma_0)\n    pairing =np.kron(-Delta*sigma_y,sigma_y)\n    chemical_potential_pairing = np.kron(identity_ns,chemical_potential+pairing)\n    ###\n    H_no_adatom = np.kron(identity_y, x_hop+chemical_potential_pairing) + y_hop\n    ##\n    ###################################################################\n    # Exchange\n    H_exchange = np.kron(np.kron(np.kron(chain_pos_y_mat,chain_pos_x_mat),sigma_z), J*sigma_z)\n    return H_no_adatom, H_exchange\n\ndef V_cell_hop(kh):\n    return np.kron(np.kron(identity_y,hop_between_cell_x),soc_hopping)\n##########################################################################\n#### Run main function ###################################################\nif __name__ == \"__main__\":\n#     start = time.time()\n    if 'fig' in locals():\n        plt.close(fig)\n    if 'fig_obc' in locals():\n        plt.close(fig_obc)   \n    J = 3.4\n    kh = 0.2\n#     Ham_onsite, V = main(J,kh)\n    fig,ax,fig_obc,ax_obc = main(J,kh)\n#     end = time.time()\n#     print(end - start)\n\n","200e194d":"You can use the following parameters to find the MZM. \n$n_s = 3$, $N_y=8$.\nThe number of unit cells along x is $N_x=36$,\nSo that the total length along x is $N_x \\times n_s$.\nthe adatoms are only in the middel unit cells from -$Nx\/4$ to $Nx\/4$.\nThe pairing $\\Delta = 1.4$, hoppings $t_x = t_y = 1.3$, $\\mu=1.5$, $J=3.4$, $k_h = 0.2$.\n\n"}}