{"cell_type":{"fc724948":"code","239b8b6c":"code","f87191e6":"code","3b0bfd6f":"code","0616c447":"code","9fbe59c5":"code","952b9316":"code","28cb3040":"code","a0828f1e":"code","cbef52b6":"code","67256a41":"code","b5e20831":"code","982ae2ea":"code","ace2dbe6":"code","f96022fa":"code","7cc56947":"code","100735f7":"code","3d375d65":"code","c8be0159":"code","1bc17cb2":"code","36bb68f3":"code","9c841af5":"code","485234f2":"code","999beacb":"code","8babed34":"code","74ac4ef8":"markdown","174e5a66":"markdown","beb4ceae":"markdown","d2de73de":"markdown","d2541feb":"markdown","4291f1c7":"markdown","e0f98183":"markdown","9527b65d":"markdown","d27c9525":"markdown","1bd634bc":"markdown","6a8b5ef3":"markdown","822e38da":"markdown","389b31e6":"markdown"},"source":{"fc724948":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","239b8b6c":"dataset = pd.read_csv(\"\/kaggle\/input\/prediksi-kemenangan-sepakbola\/dataset.csv\")","f87191e6":"dataset.head()","3b0bfd6f":"dataset.shape","0616c447":"dataset.info()","9fbe59c5":"dataset.isnull().values.any()","952b9316":"dataset[\"Pelatih\"].value_counts()","28cb3040":"tipe_pelatih =  dataset.loc[dataset['Menang'] == \"Ya\", 'Pelatih']","a0828f1e":"tipe_pelatih.value_counts()","cbef52b6":"pengertian = dataset.loc[dataset['Pelatih'] == \"Pengetian\"]\nMenekan = dataset.loc[dataset['Pelatih'] == \"Menekan\"]","67256a41":"p_menang = len(pengertian.loc[pengertian[\"Menang\"] == \"Ya\"])\/len(pengertian[\"Menang\"])\nm_menang = len(Menekan.loc[Menekan[\"Menang\"] == \"Ya\"])\/len(Menekan[\"Menang\"])","b5e20831":"print(\"Tipe Pengertian : Match \",len(pengertian[\"Menang\"]),\"\\nMenang : \",len(pengertian.loc[pengertian[\"Menang\"] == \"Ya\"]),\"\\nKalah : \",len(pengertian.loc[pengertian[\"Menang\"] == \"Tidak\"]))\nprint(\"Tipe Menekan : Match \",len(Menekan[\"Menang\"]),\"\\nMenang : \",len(Menekan.loc[Menekan[\"Menang\"] == \"Ya\"]),\"\\nKalah : \",len(Menekan.loc[Menekan[\"Menang\"] == \"Tidak\"]))\nprint(\"Persentase Tipe Pengertian: {0:.2f} %\".format(100 * p_menang))  \nprint(\"Persentase Tipe Menekan: {0:.2f} %\".format(100 * m_menang))  ","982ae2ea":"pelatih = {\"Pengetian\" : 0, \"Menekan\" : 1}\nmain = {\"Ya\" : 0, \"Tidak\" : 1}\nlatihan = {\"Rutin\" : 0, \"Jarang\" : 1}\nstamina = {\"Kuat\" : 0, \"Lemah\" : 1}\nmental = {\"PD\" : 0, \"Gerogi\" : 1}\nmenang = {\"Ya\" : 0, \"Tidak\" : 1}\ndataset[\"Pelatih\"] = dataset[\"Pelatih\"].map(pelatih)\ndataset[\"Kandang Sendiri\"] = dataset[\"Kandang Sendiri\"].map(main)\ndataset[\"Latihan\"] = dataset[\"Latihan\"].map(latihan)\ndataset[\"Stamina\"] = dataset[\"Stamina\"].map(stamina)\ndataset[\"Mental\"] = dataset[\"Mental\"].map(mental)\ndataset[\"Menang\"] = dataset[\"Menang\"].map(menang)","ace2dbe6":"dataset.head()","f96022fa":"dataset = dataset.fillna(0)\nlatihan = dataset['Latihan'].astype(int)\ndataset['Latihan'] = latihan","7cc56947":"dataset.head()","100735f7":"dataset.info()","3d375d65":"x = dataset.iloc[:, 1:6].values #kondisi\ny = dataset.iloc[:, -1].values #label","c8be0159":"from sklearn.model_selection import train_test_split\n\nvalidation_size = 0.20\nnum_trees = 100\nseed = 7\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=validation_size, random_state=seed)","1bc17cb2":"print(\"Dataset Asli Menang       : {0} ({1:0.2f}%)\".format(len(dataset.loc[dataset['Menang'] == 0]), (len(dataset.loc[dataset['Menang'] == 0])\/len(dataset.index)) * 100.0))\nprint(\"Dataset Asli Kalah     : {0} ({1:0.2f}%)\".format(len(dataset.loc[dataset['Menang'] == 1]), (len(dataset.loc[dataset['Menang'] == 1])\/len(dataset.index)) * 100.0))\nprint(\"\")\nprint(\"Dataset Training Menang   : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])\/len(y_train) * 100.0)))\nprint(\"Dataset Training Kalah : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])\/len(y_train) * 100.0)))\nprint(\"\")\nprint(\"Dataset Test Menang      : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])\/len(y_test) * 100.0)))\nprint(\"Dataset Test Kalah     : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])\/len(y_test) * 100.0)))","36bb68f3":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\n\n\n#Check Algorithms\nmodels = []\nmodels.append(( 'LR' , LogisticRegression()))\nmodels.append(( 'LDA' , LinearDiscriminantAnalysis()))\nmodels.append(( 'KNN' , KNeighborsClassifier()))\nmodels.append(( 'CART' , DecisionTreeClassifier()))\nmodels.append(( 'NB' , GaussianNB()))\nmodels.append(('RF', RandomForestClassifier(n_estimators=num_trees, random_state=seed)))\n# evaluate each model\nresults = []\nnames = []\nfor name, model in models:\n  kfold = KFold(n_splits=2, random_state=seed)\n  cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring= 'accuracy' )\n  results.append(cv_results)\n  names.append(name)\n  msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n  print(msg)","9c841af5":"nb = GaussianNB()\nnb.fit(x_train, y_train)\npredictions = nb.predict(x_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","485234f2":"nb = GaussianNB()\nnb.fit(x_train, y_train)\npredictions = nb.predict(x_train)\nprint(accuracy_score(y_train, predictions))\nprint(confusion_matrix(y_train, predictions))\nprint(classification_report(y_train, predictions))","999beacb":"prediction_nb=nb.predict([[1,0,0,0,1]])\nif prediction_nb[0] == 0:\n    pred = \"Menang\"\nelse:\n    pred = \"Kalah\"\nprint('Prediksi :',pred)","8babed34":"prediction_nb=nb.predict([[0,1,0,0,0]])\nif prediction_nb[0] == 0:\n    pred = \"Menang\"\nelse:\n    pred = \"Kalah\"\nprint('Prediksi :',pred)","74ac4ef8":"**Algoritma GaussianNB paling bagus : 93++%**","174e5a66":"Dikarenakan laga kemaren, pak Tatang mencoba pelatih yang lebih friendly kepada pemain. dengan tipe berikut:\n\n* pelatih : Pengertian\n* Match : Away \n* Latihan : Rutin, karena segan dengan pelatih\n* Stamina : kuat karena sering latihan\n* Mental : Pede , karena mendapatkan support dari pelatih \n\nKita prediksi hasil akhirnya","beb4ceae":"walaupun pada match ke-2 bermain tandang atau away, tidak mempengaruhi mental pemain menjadi lemah,malah menjadi kiat dikarenakan mendapatkan support system dari pelatih sekarang,yang diamana berpengaruh kepada permainan dari tatang fc.\nakhirnya tatang Fc memenangkan pertandingan pertamanya dan pak tatang senang atas kerja yang kita lakukan.","d2de73de":"Ubah datanya menjadi int dulu, biar gampang","d2541feb":"# PAK TATANG FC****\n\npak tatang adalah presiden club dari tatang fc. sedang mencari pelatih dan pemain baru untuk club nya. kita di beri data seperti dibawah. kita disuruh mencari tipe pelatih dan pemain, agar pak tatang bisa menjadikan tatang fc, menjadi club terkuat di galaxy bima sakti. oke lebay maaf.","4291f1c7":"Dari data diatas, terlihat Pelatih Tipe Pengertian lebih unggul, mungkin dikarenakan faktor match yang lebih banyak dimainkan oleh pelatih pengertian dibandingkan pelatih tipe menekan.","e0f98183":"dari data test yang di uji, semua nya di prediksi benar dan accuracy nya 100% . GG, mungkin dikarenakan faktor data nya yang bisa dibilang terlalu sedikit","9527b65d":"# Kita memberikan data kita kepada pak Tatang","d27c9525":"hitung persentase kemenangan dari total laga yang menghasilkan kemenangan","1bd634bc":"Misal pak Tatang, memilih pelatih dan tipe pemain sebagai berikut:\n* pelatih : Menekan\n* Match : Kandang sendiri\n* Latihan : rutin\n* Stamina : Kuat karena terbiasa latihan berat\n* Mental : grogi , karena dapat tekanan dari pelatih\n\nKita prediksi hasil akhirnya","6a8b5ef3":"**Dari pelatih sudah, sekarang ke pemain,Kita akan prediksi kemenangan**","822e38da":"Sayang sekali, Club pak Tatang kalah. maybe next time pak Tatang.","389b31e6":"# **Kita akan lihat persentase kemenangan pelatih dari tipe melatih**\nKalo anak MOBA bilang semua hero itu hebat, tergantung pilot. begitu juga club tatang fc, memerlukan pilot atau pelatih yang handal untuk menahkodai tatang fc"}}