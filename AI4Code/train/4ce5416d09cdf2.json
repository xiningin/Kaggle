{"cell_type":{"dc36313a":"code","547f8864":"code","e0b742d8":"code","502603c3":"code","c2630a3e":"code","a5f373c2":"code","cf6231b4":"code","f04dc10c":"code","ae64bc00":"code","7c6fab33":"code","64c47e76":"code","cc2b24ef":"markdown","c2d03840":"markdown","ebfea5f7":"markdown","ae760735":"markdown","321398af":"markdown","50ac0cb5":"markdown","f0260075":"markdown","8e976741":"markdown","ced6f83e":"markdown","ec9d21f6":"markdown","400792d8":"markdown","96e2e941":"markdown","a477aeef":"markdown","b8fb56db":"markdown","f2c237c9":"markdown"},"source":{"dc36313a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","547f8864":"csv_list = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/uncover\/UNCOVER_v4'):\n    for filename in filenames:\n        input_file = os.path.join(dirname, filename)\n        ext = os.path.splitext(input_file)[-1]\n        if ext == '.csv':\n            csv_list.append(input_file)\n            print(input_file)\n            df = pd.read_csv(input_file, low_memory=False)\n            print(df.columns)","e0b742d8":"ont_df = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/ontario_government\/confirmed-positive-cases-of-covid-19-in-ontario.csv')\nprint('Number of Cases:', len(ont_df))\nprint(ont_df.head())","502603c3":"ont_df['age_group'].value_counts().plot(kind='barh', title='Age')","c2630a3e":"ont_df['client_gender'].value_counts().plot(kind='barh', title='Gender')","a5f373c2":"wor_df = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/worldometer\/worldometer-confirmed-cases-and-deaths-by-country-territory-or-conveyance.csv')\nprint('Number of Countries:', len(wor_df))\nprint(wor_df.head())","cf6231b4":"bool_country = wor_df['sl_no'] > 0\nprint(wor_df[bool_country].head())","f04dc10c":"bool_tot_cases_1m = wor_df['total_cases_per_1m_pop'] >= 0\nbool_tot_test_1m = wor_df['total_tests_per_1m_pop'] >= 0\n\n\nwor_df['percent_confirmed'] = wor_df['total_cases_per_1m_pop'].div(wor_df['total_tests_per_1m_pop'])\nbool_le = wor_df['total_cases_per_1m_pop'].le(wor_df['total_tests_per_1m_pop'])\n\nwor_df[bool_country & bool_tot_cases_1m & bool_tot_test_1m & bool_le].sort_values(by='percent_confirmed',axis=0).plot.barh(x='country', y=['total_cases_per_1m_pop', 'total_tests_per_1m_pop', 'percent_confirmed'],\n                                                                      figsize=(10,100), logx=True, title='Total Cases\/ Test Cases (1M) (log)').legend(loc='upper right')","ae64bc00":"our_df = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/our_world_in_data\/coronavirus-disease-covid-19-statistics-and-research (1).csv')\nprint(our_df.head())\ncountries = our_df['location'].unique()\nprint(countries)\nprint('Number of Countries:', len(countries))","7c6fab33":"#bool_loc = our_df['location'] == 'World'\n#print(our_df[bool_loc])\n\nbool_date = our_df['date'] == '2020-05-21'\n#print(our_df[bool_date])\n\nour_df_0521 = our_df[bool_date]\n\nbool_all_nan = our_df_0521.isna().all()\nall_nan_features = our_df.columns[bool_all_nan]\nour_df_0521 = our_df_0521.drop(labels=all_nan_features, axis=1)\n\nbool_nan = our_df_0521.isna().any()\nnan_features = our_df_0521.columns[bool_nan]\n\nfor feature in nan_features:\n    mean_val = our_df_0521[feature].mean()\n    our_df_0521[feature] = our_df_0521[feature].fillna(mean_val)\n\nprint(our_df_0521.isna().any())","64c47e76":"from sklearn.feature_selection import VarianceThreshold\nfrom scipy.stats import zscore\n\nfeatures = our_df_0521[['stringency_index', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older',\n                        'gdp_per_capita', 'extreme_poverty', 'cvd_death_rate', 'diabetes_prevalence', 'female_smokers',\n                        'male_smokers', 'handwashing_facilities', 'hospital_beds_per_100k']]\ntarget = our_df_0521['total_cases_per_million']\n\nfeatures_zscore = pd.DataFrame()\nfor column in features.columns:\n    z = (features[column]-features[column].mean())\/features[column].std(ddof=0)\n    features_zscore[column] = z\n    our_df_0521[column+'_z'] = z\n    \ntarget_zscore = (target-target.mean())\/target.std(ddof=0)\nour_df_0521['total_cases_per_million_z'] = target_zscore\n# Variance Threshold\n#sel = VarianceThreshold(threshold=(.8 * (1 - .8)))\n#sel.fit(features)\n#print(features.columns[sel.get_support(indices=True)])\n\n# Univariate\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\n\nsel = SelectKBest(f_regression, k=5)\nsel.fit(features_zscore, target_zscore)\nprint(features.columns[sel.get_support(indices=True)])\n\n# LASSO\nfrom sklearn.linear_model import LassoCV\nclf = LassoCV().fit(features_zscore, target_zscore)\nimportance = np.abs(clf.coef_)\nprint(clf.coef_)\nprint(features.columns[importance>0])\n\nour_df_0521.plot.barh(figsize=(5,100), x='location', y=['aged_65_older_z', 'gdp_per_capita_z', 'total_cases_per_million_z'])","cc2b24ef":"Let's look at at the our_world_in_data","c2d03840":"# Summary\n* From the Ontario dataset, we see that females between 40s and 50s are higher risk.\n* From the Worldometer dataset, we see that South America, Africa, and Middle East have higher confirmed percentage.\n* From the Our_world_in_data, higher GDP and not too old population seems to be highly predictive of total_cases_per_million.  ","ebfea5f7":"Let's look at different locations.\n* International: most features are NaN\n* World: features are constant over time\n\nLet's look at each location at 2020-05-21.\n* Some features are all Nan, let's drop them\n* Some features are NaN, let's replace them with column mean\n\n\n","ae760735":"# Understanding the Data","321398af":"Let's look at the ratio between confirmed cases and tested cases. We'll ignore countries with missing data.","50ac0cb5":"# Task 1: Which populations are at risk of contracting COVID-19?\n\nIn this task, we want to find out what population could catch COVID-19. We can approach this problem by first looking at the confirmed cases population.\n\nDataset with Confirmed Cases and Population Data:\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/ontario_government\/confirmed-positive-cases-of-covid-19-in-ontario.csv\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/worldometer\/worldometer-confirmed-cases-and-deaths-by-country-territory-or-conveyance.csv\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/our_world_in_data\/coronavirus-disease-covid-19-statistics-and-research.csv\n\nDataset with Confirmed Cases:\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/public_health_england\/covid-19-daily-confirmed-cases.csv\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/USAFacts\/confirmed-covid-19-cases-in-us-by-state-and-county.csv\n* \/kaggle\/input\/uncover\/UNCOVER_v4\/UNCOVER\/worldometer\/worldometer-confirmed-cases-and-deaths-by-country-territory-or-conveyance.csv\n\n\n\n\n","f0260075":"From univariate, most features are interrelated (age-related). From LASSO we can conclude that high GDP and low <65 old are the two most predictive factors of catching COVID-19. Other factors include,\n\nPositive Coefficients:\n* stringency_index\n* population_density\n* gdp_per_capita\n* female_smokers\n\nNegative Coefficients:\n* aged_65_older\n* diabetes_prevalence\n\nThis result does not take into effect the longitudinal trend of num of cases.\n","8e976741":"Let's look at the Ontario Dataset","ced6f83e":"From the plots, 40s and 50s female seems to be high risk population.","ec9d21f6":"Seems like five columns could be informative.\n1. total_cases\n2. new_cases\n3. active_cases\n4. total_cases_per_1m_pop\n5. total_tests_per_1m_pop\n\nColumn sl_no depicts whether each row is a country, so we'll filter by that first.","400792d8":"Let's look at the worldometer dataset","96e2e941":"https:\/\/www.kaggle.com\/roche-data-science-coalition\/uncover","a477aeef":"If we look at total_cases_per_million as Y, and use country-related features as X, we can build a regression model and find out which features might lead to more cases. Let's use sklearn's tutorial for finding out important fetures.\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html","b8fb56db":"From the column headers, two columns seem to be population related.\n1. age_group\n2. client_gender\n","f2c237c9":"Looks like South America, Africa, and Middle East countries have more confirmed cases."}}