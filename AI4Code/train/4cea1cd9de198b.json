{"cell_type":{"9a84c282":"code","c94bd33d":"code","f3239301":"code","3ca9239e":"code","b39aab9b":"markdown","c182f167":"markdown","3fb9528b":"markdown","6f4de3d2":"markdown"},"source":{"9a84c282":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom tqdm import tqdm","c94bd33d":"def preprocess(df):\n    df = df.copy()\n    df['cp_type_trt'] = np.where(df['cp_type'].values == 'trt_cp', 1, 0)\n    df['cp_type_ctl'] = np.where(df['cp_type'].values == 'trt_cp', 0, 1)\n    df['cp_dose_D1'] = np.where(df['cp_dose'].values == 'D1', 1, 0)\n    df['cp_dose_D2'] = np.where(df['cp_dose'].values == 'D1', 0, 1)\n    df['cp_time_24'] = np.where(df['cp_time'].values == 24, 1, 0)\n    df['cp_time_48'] = np.where(df['cp_time'].values == 48, 1, 0)\n    df['cp_time_72'] = np.where(df['cp_time'].values == 72, 1, 0)\n    return df\n\ndef make_X(dt, dense_cols, cat_feats):\n    X = {\"dense\": dt[dense_cols].to_numpy()}\n    for i, v in enumerate(cat_feats):\n        X[v] = dt[[v]].to_numpy()\n    return X\n\n\ndef get_data(ROOT = '..\/input\/lish-moa'):\n\n    cat_feat = ['cp_dose', 'cp_time']\n\n    train = pd.read_csv(f\"{ROOT}\/train_features.csv\")\n    test = pd.read_csv(f\"{ROOT}\/test_features.csv\")\n\n    GENES = [col for col in train.columns if col.startswith('g-')]\n    CELLS = [col for col in train.columns if col.startswith('c-')]\n\n    train[GENES] = (train[GENES].values + 10)\/20\n    train[CELLS] = (train[CELLS].values + 10) \/ 20\n    test[GENES] = (test[GENES].values + 10) \/ 20\n    test[CELLS] = (test[CELLS].values + 10) \/ 20\n\n    label = pd.read_csv(f\"{ROOT}\/train_targets_scored.csv\")\n    label_test = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\n\n    train = preprocess(train)\n    test = preprocess(test)\n\n    FE = list(train)\n    FE.remove('sig_id')\n    FE.remove('cp_type_ctl')\n    FE.remove('cp_type_trt')\n    FE.remove('cp_type')\n    for cat in cat_feat:\n        FE.remove(cat)\n\n    train = train.set_index('sig_id')\n    test = test.set_index('sig_id')\n    label = label.set_index('sig_id')\n    label_test = label_test.set_index('sig_id')\n\n    label = label.loc[train.index]\n    label_test = label_test.loc[test.index]\n\n    train = pd.concat([train, label], axis=1)\n    test = pd.concat([test, label_test], axis=1)\n\n    train['total'] = np.where(np.sum(train[list(label)].values, axis=1)>0, 0, 1)\n\n    return train, test, FE, cat_feat, list(label)","f3239301":"#example for 10 genes and 10 cells\n\nROOT = '..\/input\/lish-moa'\ntrain = pd.read_csv(f\"{ROOT}\/train_features.csv\")\nlabel = pd.read_csv(f\"{ROOT}\/train_targets_scored.csv\")\n\ntrain = train.reset_index(drop=True)\nlabel = label.loc[train.index]\ntrain = pd.concat([train, label], axis=1)\n\nGENES = [col for col in train.columns if col.startswith('g-')]\nCELLS = [col for col in train.columns if col.startswith('c-')]\n\nselected_genes = {}\nselected_cells = {}\n\nfor lab in tqdm(list(label)[1:5]):\n    temp_gene = []\n    for g in tqdm(GENES[:5]):\n        t_test = stats.ttest_ind(train.loc[train[lab] == 0, g].values,train.loc[train[lab] == 1, g].values)\n        if t_test[1]<=0.10:\n            temp_gene.append(g)\n    \n    print(lab, temp_gene)\n    selected_genes[lab] = temp_gene\n\n    temp_cell = []\n    for c in tqdm(CELLS[:5]):\n        t_test = stats.ttest_ind(train.loc[train[lab] == 0, c].values, train.loc[train[lab] == 1, c].values)\n        if t_test[1] <= 0.10:\n            temp_cell.append(c)\n    \n    print(lab, temp_cell)\n    selected_cells[lab] = temp_cell","3ca9239e":"from sklearn.model_selection import train_test_split,StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom sklearn.linear_model import LogisticRegression\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')\n\nwith open('..\/input\/t-test-based-selected-variables\/selected_genes.pkl', 'rb') as handle:\n    selected_genes = pickle.load(handle)\n\nwith open('..\/input\/t-test-based-selected-variables\/selected_cells.pkl', 'rb') as handle:\n    selected_cells = pickle.load(handle)\n\ntrain, test, FE, cat_feat, labels = get_data()\ntrain = train.reset_index(drop=True)\n\nexog_vars = ['cp_type_trt', 'cp_type_ctl', 'cp_dose_D1',\n              'cp_dose_D2', 'cp_time_24', 'cp_time_48', 'cp_time_72']\n\nsub = pd.DataFrame()\nsub['sig_id'] = test.index\n\nscores = []\nfor lab in labels:\n    \n    if np.sum(train[lab].values)<=1:\n        scores.append(0)\n        sub[lab] = np.zeros(len(test))\n    else:\n        \n        skf = StratifiedKFold(n_splits=5, random_state=54, shuffle=True)\n        \n        preds = []\n        y_true = []\n        pred_test = 0\n        for train_index, test_index in skf.split(train.index, train[lab].values):\n        \n            logit_model = LogisticRegression(random_state=0).fit(train.loc[train_index, selected_genes[lab]+selected_cells[lab]+exog_vars].values, train.loc[train_index, lab].values)\n    \n            pred = logit_model.predict_proba(train.loc[test_index, selected_genes[lab]+selected_cells[lab]+exog_vars].values)[:, 1]\n            preds += list(pred)\n            y_true += list(train.loc[test_index, lab].values)\n            \n            pred_test = pred_test + logit_model.predict_proba(test[selected_genes[lab]+selected_cells[lab]+exog_vars].values)[:, 1]\n            \n        score = log_loss(y_true, preds, labels=[0,1])\n        print(lab, ' loss:', score)\n        scores.append(score)\n\n        \n        sub[lab] = pred_test\/5\n\nprint('#'*150)\nprint('CV average:', np.mean(scores))\nprint('CV std:', np.std(scores))\nprint('#'*150)\n\nsub = sub.set_index('sig_id')\nsub.loc[test[test['cp_type_ctl']==1].index, labels]=0\nsub.to_csv('submission.csv')","b39aab9b":"# Data preprocess","c182f167":"# t-test based feature selection","3fb9528b":"**This notebook applies t-test to select genes and cells for each target class. After performing feature selection, logistic regression is used as prediction model.  **","6f4de3d2":"# Logistic regression model for each target class"}}