{"cell_type":{"652952ac":"code","c2222496":"code","29ef41c5":"code","abfd8227":"code","163263e8":"code","bdd38870":"code","a575916c":"code","d57cf393":"code","7a2be740":"code","d17d08fa":"code","f35ae15a":"code","9a9b261a":"code","968d38bb":"code","2da1d724":"code","24adb7ef":"code","d82d8b61":"code","81c43bae":"code","635cd66e":"code","184930df":"code","65660a7d":"code","229eace2":"code","f73800fc":"code","aeb53330":"code","9a1139ba":"code","cc435d2f":"code","adbaaeb4":"code","4e3b95d7":"code","11195b55":"code","6a3edba6":"code","6d1ff988":"code","20616043":"code","4cfd393a":"code","3b16403f":"code","64afe02c":"code","21a5d107":"code","5f7df8b4":"code","8935914a":"code","4df37a26":"code","25f09e6d":"code","ec9280ec":"code","d817a18d":"code","9a4d6d8f":"code","de47d634":"code","b0d72f48":"code","9f91b32f":"code","9f6cfe9f":"code","52effe78":"markdown","46f51bb7":"markdown","3dc3e10c":"markdown","b562dc2b":"markdown","61af89df":"markdown","fe4ecf7f":"markdown","bad9abc0":"markdown","18138546":"markdown","298c9019":"markdown","4fbea5fe":"markdown","152748da":"markdown","c4063ddc":"markdown","4075ffd6":"markdown","1a846271":"markdown","41c59a0e":"markdown","a1374cd3":"markdown","56bc6301":"markdown","513eba05":"markdown","7e588a7c":"markdown","e9601a1c":"markdown"},"source":{"652952ac":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c2222496":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\" )\ntrain.head()","29ef41c5":"train.shape","abfd8227":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","163263e8":"test.shape","bdd38870":"train.columns","a575916c":"train.info()","d57cf393":"train.dtypes","7a2be740":"train['Name'].unique()","d17d08fa":"train['Sex'].unique()","f35ae15a":"train['Ticket'].unique()","9a9b261a":"train['Cabin'].unique()","968d38bb":"train['Embarked'].unique()","2da1d724":"train.duplicated().sum()","24adb7ef":"train.describe()","d82d8b61":"train.isnull().sum()","81c43bae":"train.skew()","635cd66e":"train['Age'].fillna(train['Age'].median(),inplace=True)","184930df":"train['Embarked'].fillna(train['Embarked'].mode(),inplace=True)","65660a7d":"from statistics import mode\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(mode(train[\"Embarked\"]))","229eace2":"train.isnull().sum()","f73800fc":"test.isnull().sum()","aeb53330":"test.skew()","9a1139ba":"test['Age'].fillna(test['Age'].median(),inplace=True)","cc435d2f":"test['Fare'].fillna(test['Fare'].median(),inplace=True)","adbaaeb4":"from statistics import mode\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(mode(train[\"Embarked\"]))","4e3b95d7":"test.isnull().sum()","11195b55":"#Analytics between numeric vrs categorical:-\n#Age vrs Survival\nplt.figure(figsize=(12,5))\nsns.distplot(train.Age[train.Survived==0],color=\"darkblue\")\nsns.distplot(train.Age[train.Survived==1],color=\"cyan\")\nplt.legend(['0','1'])\nplt.show()","6a3edba6":"#Analytics between numeric vrs categorical:-\n#Fare vrs Survival\nplt.figure(figsize=(12,5))\nsns.distplot(train.Fare[train.Survived==0],color=\"darkblue\")\nsns.distplot(train.Fare[train.Survived==1],color=\"cyan\")\nplt.legend(['0','1'])\nplt.show()","6d1ff988":"#categorical vrs categorical\n#sex vrs survived\nplt.figure(figsize=(6,3))\nsns.countplot(train.Sex)\nplt.show()\nsns.countplot(train.Sex[train.Survived==1])\nplt.show()","20616043":"#categorical vrs categorical\n#sex vrs survived\nplt.figure(figsize=(6,3))\nsns.countplot(train.SibSp)\nplt.show()\nsns.countplot(train.SibSp[train.Survived==1])\nplt.show()","4cfd393a":"#categorical vrs categorical\n#sex vrs survived\nplt.figure(figsize=(6,3))\nsns.countplot(train.Parch)\nplt.show()\nsns.countplot(train.Parch[train.Survived==1])\nplt.show()","3b16403f":"cor=train.corr()\n#Heatmap for visualisation of correlation analysis\nplt.figure(figsize=(12,10))\nsns.heatmap(cor,annot=True,cmap='coolwarm')\n#when we write annot= True , it shows the values .\nplt.show()","64afe02c":"train[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\n\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1\n\ntrain[\"Embarked\"][train[\"Embarked\"] == \"S\"] = 0\ntrain[\"Embarked\"][train[\"Embarked\"] == \"C\"] = 1\ntrain[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\n\ntest[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2","21a5d107":"train.columns","5f7df8b4":"train.dtypes","8935914a":"xtr=train[['Sex','Age','SibSp','Parch','Fare','Embarked']]\nytr=train['Survived']\nxts=test[['Sex','Age','SibSp','Parch','Fare','Embarked']]","4df37a26":"from sklearn.linear_model import LogisticRegression\nlogisticRegression = LogisticRegression(max_iter = 30000)\nlogisticRegression.fit(xtr, ytr)","25f09e6d":"ypred = logisticRegression.predict(xts)","ec9280ec":"ypred","d817a18d":"output = pd.DataFrame({'PassengerId': test['PassengerId'],'Survived': ypred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9a4d6d8f":"output.head()","de47d634":"from sklearn.ensemble import RandomForestClassifier\nmodel4 = RandomForestClassifier(n_estimators=50,criterion='gini',max_depth=10,min_samples_leaf=20)\nmodel4.fit(xtr,ytr)","b0d72f48":"ypred = model4.predict(xts)","9f91b32f":"ypred","9f6cfe9f":"output2 = pd.DataFrame({'PassengerId': test['PassengerId'],'Survived': ypred})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","52effe78":"## Importing Libraries:","46f51bb7":"#### Here we knew that three columns are there having some null values those are age column and the cabin column but there exist some columns whose datatype is object so we have to check for the unique value to ensure that there does nit exist any null values in the form of any symbol","3dc3e10c":"#### We are not having any duplicate rows ","b562dc2b":"## Data Visualisation","61af89df":"#### Here we are having 418 rows and 11 columns in the test data and here we have to predict the target column i.e the survived column","fe4ecf7f":" Data Dictionary\n Variable\tDefinition\tKey\n survival\tSurvival\t0 = No, 1 = Yes\n pclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n sex\tSex\t\n Age\tAge in years\t\n sibsp\t# of siblings \/ spouses aboard the Titanic\t\n parch\t# of parents \/ children aboard the Titanic\t\n ticket\tTicket number\t\n fare\tPassenger fare\t\n cabin\tCabin number\t\n embarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n Variable Notes\n pclass: A proxy for socio-economic status (SES)\n 1st = Upper\n 2nd = Middle\n 3rd = Lower\n\n age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n sibsp: The dataset defines family relations in this way...\n Sibling = brother, sister, stepbrother, stepsister\n Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n parch: The dataset defines family relations in this way...\n Parent = mother, father\n Child = daughter, son, stepdaughter, stepson\n Some children travelled only with a nanny, therefore parch=0 for them.","bad9abc0":"#### from above analysis it is clear that we are not having null values in any other columns apart from age embarked and cabin ","18138546":"#### From the above code we can get the statistical summary of the dataset","298c9019":"#### First we have to import all the required library for the project Then we will start working with that","4fbea5fe":"## Data Wrangling","152748da":"### Feature Scaling","c4063ddc":" We are having two dataset One is train and another is test\n training set (train.csv)\n test set (test.csv)\n \n The training set should be used to build your machine learning models. For the training set, we provide the outcome (also      known as the \u201cground truth\u201d) for each passenger. Your model will be based on \u201cfeatures\u201d like passengers\u2019 gender and class. You  can also use feature engineering to create new features.\n\n The test set should be used to see how well your model performs on unseen data. For the test set, we do not provide the ground   truth for each passenger. It is your job to predict these outcomes. For each passenger in the test set, use the model you    trained to predict whether or not they survived the sinking of the Titanic.\n\n We also include gender_submission.csv, a set of predictions that assume all and only female passengers survive, as an example   of what a submission file should look like.\n","4075ffd6":" - **There are four type of variables**\n  - **Numerical Features**: Age, Fare, SibSp and Parch\n  - **Categorical Features**: Sex, Embarked, Survived and Pclass\n  - **Alphanumeric Features**: Ticket and Cabin(Contains both alphabets and the numeric value)\n  - **Text Features**: Name\n\n**We really need to tweak these features so we get the desired form of input data**","1a846271":"## Test Data","41c59a0e":"## Applying Algorithm :","a1374cd3":"# Titanic : Machine Learning From Disaster :-","56bc6301":"#### To replace these null values we have to first check the skeweness","513eba05":"## Random forest Algorithm","7e588a7c":"## Data Analysis","e9601a1c":"#### So we are having 891 columns and 12 rows in the train data"}}