{"cell_type":{"071ad043":"code","f53a61ca":"code","d25085c1":"code","d6128411":"code","4a887f40":"code","d08848a3":"code","51bad643":"code","e4aa3084":"code","abd83a6c":"code","73bfce52":"code","f1b3b2f8":"markdown","c52e14af":"markdown","860c44b0":"markdown"},"source":{"071ad043":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f53a61ca":"train=pd.read_csv(\"\/kaggle\/input\/RecommSystrain.txt\",sep=\",\",skiprows=232,chunksize=200000)","d25085c1":"#print(train.shape)\nfor df in train:\n    df2=df.copy()\n    break","d6128411":"df2.columns=['id', 'publish_date', 'headline_category', 'headline_text']\ndf2.head(5)","4a887f40":"### Following are the functions created\n\n##### def getTopArticles(article):\n##### def getSimilarityBetweenTwoArticles(article1, article2):\n##### def getCosineSimilarity(bow1, bow2):\n##### def getBow(text):\n##### def getNorm(vec):","d08848a3":"'''\nThis module provides functions to find matching articles to a given article\n'''\n\nimport csv\nfrom pprint import pprint\nimport time\nimport json\n#from textMatching import getCosineSimilarity, getBow\n#from getSimilarityBetweenTexts import TextSimilarity\n# Create the text similarity object\n#ts = TextSimilarity()\n","51bad643":"\n    \nfrom collections import defaultdict\nimport math\n\ndef getBow(text):\n    text = text.lower()\n    \n    bowDict = defaultdict(int) # word->freq mapping dict\n    wordList = text.split(' ')\n    \n    # print 'wordList', wordList\n    \n    for word in wordList:\n        bowDict[word] += 1\n        \n    result = dict(bowDict)\n    return result\n\ndef getNorm(vec):\n    sum_sq = 0\n    \n    for x in vec:\n        sum_sq += x*x\n        \n    norm = math.sqrt(sum_sq)\n    \n    return norm\n\ndef getCosineSimilarity(bow1, bow2):\n    norm1 = getNorm(bow1.values())\n    norm2 = getNorm(bow2.values())\n    \n    dot_product = 0\n    \n    for keyword1, freq1 in bow1.items():\n        if keyword1 in bow2:\n            freq2 = bow2[keyword1]\n            \n            dot_product += freq1*freq2\n            \n    cosine = float(dot_product)\/(1 + float(norm1*norm2))\n    \n    return cosine\n\ndef getTopMatchingArticles(article,simScoreThreshhold=0.25,No_ofTopScoreArticle=5 ):\n    all_similarArticles = []\n    for articleid2, article2 in articleIdToArticleMapping.items():\n        # s = getSimilarityBetweenTwoArticleIds(articleid1, articleid2, articleIdToArticleMapping)\n        \n        if articleid == articleid2:\n            continue\n\n        simScore = getSimilarityBetweenTwoArticles(article, article2)\n        \n        if simScore > simScoreThreshhold: #min cosine\n            row = [articleid, articleid2, simScore]\n        \n            # print row\n            all_similarArticles.append(row)\n        \n    \n    \n    #Get topN\n    topN = No_ofTopScoreArticle\n    sorted_all_SimilarArticles = sorted(all_similarArticles, key = lambda x: x[2], reverse = True)\n    topN_SimilarArticles = sorted_all_SimilarArticles[0:topN]\n    # print 'topNExcelSheet:', topNExcelSheet\n    \n    Ids_of_topN_Articles = []\n    for (article_orig, article_id2, similarity) in topN_SimilarArticles:\n        Ids_of_topN_Articles.append(article_id2)\n\n    # pprint(article2bsent)\n    \n    return Ids_of_topN_Articles\n\ndef getSimilarityBetweenTwoArticles(article1, article2):\n    bow1 = getBow(article1)\n    bow2 = getBow(article2)\n    #text1 = article1['headline_text']\n    #text2 = article2['headline_text']\n    \n    cosineSimilarity_Score = getCosineSimilarity(bow1,bow2)\n    return cosineSimilarity_Score\n","e4aa3084":"if __name__ == '__main__':\n    print ('Text matching module')\n    \n    text1 = 'I am data scientist'\n    text2 = 'very different sales and scientist'\n    \n    print (text1)\n    print (text2)\n    \n    '''\n    {'I':1,...}\n    '''\n    bow1 = getBow(text1)\n    print ('bow1', bow1)\n\n    bow2 = getBow(text2)\n    print ('bow2', bow2  )  \n    \n    '''\n    Vocabulary\n    \n    i | am | data| scientist| is| a |great| job\n    \n    text1 = 'I am data scientist'\n    text2 = 'Data scientist is a great job'\n    \n    text1 = [1,1,1,1,0,0,0,0]\n    text2 = [0,0,1,1,1,1,1,1] - 8D\n    \n    cos = a.b\/norm(a)*norm(b)\n    '''\n    \n    # Find the cosine similarity between bow1 and bow2\n    # s = getCosineSimilarity(bow1, bow2)\n    \n    print (getCosineSimilarity(bow1, bow2))","abd83a6c":"\nif __name__ == '__main__':\n    print ('Compute Article Similarity and Save Model')\n    \n    # Load the dataset\n        \n#     f = open('data.csv', 'rb')\n#     fieldnames = ['id', 'publish_date', 'headline_category', 'headline_text']\n#     reader = csv.DictReader(f, fieldnames=fieldnames)\n    \n    \n        \n    \n    i = 0\n    articleIdToArticleMapping = {} #id->article\n    st_time = time.time()\n    articleIdToArticleMapping = dict(df2[['id','headline_text']].head(1000).values)\n    \n    end_time = time.time()\n    print(\"time taken\",end_time-st_time, \"seconds\")\n\n    #pprint({'articlesToBeSentMapping': articlesToBeSentMapping})\n\n\n    \n    articleToArticle_matched = {} #article-> which article to send\n    for articleid, article in articleIdToArticleMapping.items(): \n        topN_Matching_article_ids = getTopMatchingArticles(article)\n        articleToArticle_matched[articleid] = topN_Matching_article_ids\n        print(\"-----\\nFor given article id =\",articleid,\"total No of matching article found:\",len(articleToArticle_matched[articleid]))\n        if len(articleToArticle_matched[articleid]) > 0:\n            print ('  Original Article:', \"(id\",articleid,\")\", articleIdToArticleMapping[articleid])\n\n        print ('\\t Matching Articles:')                  \n        for Matched_articleid in articleToArticle_matched[articleid]:\n                print ('\\t \\t', \"(Matched id\",Matched_articleid,\")\",  articleIdToArticleMapping[Matched_articleid])\n\n    \n\n    \n    # Save the model to a json\n    g = open('articlesToBeSentMapping.json', 'wb')\n    json.dump(articleToArticle_matched, g)\n    g.close()\n\n\n    # Save the article id to article mapping to a json\n    g = open('articleIdToArticleMapping.json', 'wb')\n    json.dump(articleIdToArticleMapping, g)\n    g.close()    ","73bfce52":"from numba import cuda\ncuda.select_device(0)\ncuda.close()","f1b3b2f8":"# What is Ask here ?  \nFor given article, how many and what are other similar articles present in text document provided.\n\n# Approach implementation of Ask\nEach article or text columns of a row is picked from dataframe or text document (that contains article) and compared with every other row(article) present in the dataFrame and   Cosine Similary obtained and generated the output that contain article id presents against each row which are similar to article of the row.","c52e14af":"# Testing the Function created above","860c44b0":"Bag of word:\n\n    Its is nothing but frequence of words in a text\n    Just create a dictionary with word as key and value as number of its occurance in text\n    \nVocabalary:\n\n    Its the union of all the words on all the text we have\n    \nCosine Similarity\n\n    It computes the angle between to two vectors containg the words, if the cosine val between them is .9 or 1 degree they are very similar if the angle between them is 0 then they are very difference\n    \n    cos = a.b\/norm(a) * norm(b)\n    \n    cosile score is between 0 and 1\n    \n    "}}