{"cell_type":{"74fa550a":"code","f52cb12e":"code","e3b99694":"code","b705f16a":"code","cf246831":"code","0c9c655b":"code","5dd5a2c5":"code","bfe0f0d1":"code","197325df":"code","f39bd7ce":"code","73d7dfde":"code","ecfabf03":"code","edb5c601":"code","54042923":"code","c0a1b0da":"code","01b4d2ec":"code","2ddeaa3c":"code","ba588235":"code","cc65b004":"code","0b8e0f09":"code","c4c9b2ea":"code","0361b3ed":"code","234b3e35":"code","c43de5de":"code","33484b40":"code","15631956":"code","9dd48978":"code","c0ee6aae":"code","229d2ba0":"code","f3305b06":"code","e39af150":"code","7e0cce58":"code","5e331357":"code","628c11d9":"code","d1ef7155":"code","4e9c2d62":"code","911022ed":"code","3734ed50":"code","d6f52dbe":"code","c68a6622":"code","bdacae09":"code","bfa4fcbf":"code","728c73ff":"code","4ce29c47":"code","55391ea3":"code","ce8d26c0":"code","2e2aa2c8":"code","f843257c":"code","9c19b051":"code","4486c2d4":"code","0311b333":"code","9d8df5dd":"code","5cebc1e4":"code","06006e66":"code","6b46eb42":"code","c83a34c2":"markdown","94719fca":"markdown","5862dea6":"markdown","45c89bc8":"markdown","11e46137":"markdown","8fd76672":"markdown","1cc13f03":"markdown","03c12fd2":"markdown","e845cce7":"markdown","d0a8540b":"markdown","93b6fc22":"markdown","fcb7b47f":"markdown","88cf12e5":"markdown","3cfff381":"markdown","06a13e92":"markdown"},"source":{"74fa550a":"import os\nimport numpy as np\nimport pandas as pd\nfrom itertools import product\n\n\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import SGDClassifier, LinearRegression\nfrom sklearn.metrics import confusion_matrix, f1_score, accuracy_score, roc_auc_score, silhouette_score\n\nPATH = \"..\/input\/heart-disease-uci\/\"","f52cb12e":"!ls ..\/input\/heart-disease-uci","e3b99694":"from bokeh.io import output_file, show, output_notebook, push_notebook\nfrom bokeh.plotting import figure, reset_output\nfrom bokeh.models import ColumnDataSource, HoverTool, CategoricalColorMapper, CDSView, GroupFilter, FactorRange, Slope\nfrom bokeh.layouts import row,column, gridplot\nfrom bokeh.models.widgets import Tabs, Panel\nfrom bokeh.io import curdoc\nfrom bokeh.core.properties import value\n\ncurdoc().theme = 'light_minimal'\n\noutput_notebook()","b705f16a":"df = pd.read_csv(f\"{PATH}heart.csv\")","cf246831":"df.head()","0c9c655b":"corr = df.corr()\ncorr.style.background_gradient(cmap='seismic')","5dd5a2c5":"df.info()","bfe0f0d1":"import pandas_profiling\ndf.profile_report(style={'full_width':True})","197325df":"map_gender_to_string = {1: \"Male\", 0: \"Female\"}\ncat_df = df.copy()\ncat_df[\"sex\"] = df[\"sex\"].apply(lambda x: map_gender_to_string[x])","f39bd7ce":"map_cp_to_string = {i: f\"Type{chr(i)}\" for i in range(65, 69)}\ncat_df[\"cp\"] = df[\"cp\"].apply(lambda x: map_cp_to_string[x+65])","73d7dfde":"map_fbs_to_string = {1: \"High\", 0: \"Low\"}\ncat_df[\"fbs\"] = df[\"fbs\"].apply(lambda x: map_fbs_to_string[x])","ecfabf03":"map_target_to_string = {0: \"NotHealthy\", 1: \"Healthy\"}\ncat_df[\"target\"] = df[\"target\"].apply(lambda x: map_target_to_string[x])","edb5c601":"source = ColumnDataSource(cat_df)","54042923":"def scatter_plot_with_cat(source, views, colors, legends, hover, title, x, y):\n    plot = figure(tools=[hover, \"crosshair\", \"pan\", \"wheel_zoom\", \"box_zoom\", \"reset\"], title=title)\n    \n    for v, c, l in zip(views, colors, legends):\n        plot.circle(x=x, y=y, source=source, view=v, color=c, legend=l, muted_alpha=0.1)\n    plot.legend.click_policy=\"mute\"\n    return plot","c0a1b0da":"def get_regression_line(df, x_attr, y_attr, line_color=\"red\"):\n    linear_male = LinearRegression().fit(df[x_attr].values.reshape(-1, 1), df[y_attr])\n    slope = linear_male.coef_[0]\n    intercept = linear_male.intercept_\n    regression_line = Slope(gradient=slope, y_intercept=intercept, line_color=line_color)\n    return regression_line","01b4d2ec":"def scatter(source, df, views, colors, legends, hover, title, x_axis, y_axis):\n    regression_line = get_regression_line(df, x_axis, y_axis)\n    \n    plot = scatter_plot_with_cat(source, views, colors, legends, hover, title, x=x_axis, y=y_axis)\n    plot.add_layout(regression_line)\n    \n    return plot","2ddeaa3c":"male_view = CDSView(source=source,\n                       filters=[GroupFilter(column_name='sex', group=\"Male\")])\nfemale_view = CDSView(source=source,\n                        filters=[GroupFilter(column_name='sex', group=\"Female\")])","ba588235":"hover = HoverTool(tooltips = [(\"Resting Blood Pressure\",\"@trestbps\"),(\"Serum Cholestrol\",\"@chol\")])\n\nplot1 = scatter(source, df, views=[male_view, female_view], colors=[\"red\", \"blue\"], legends=[\"Male\", \"Female\"], hover=hover, title=\"BPS vs CHOL w. Gender\", x_axis=\"trestbps\", y_axis=\"chol\")","cc65b004":"hover = HoverTool(tooltips = [(\"Resting Blood Pressure\",\"@trestbps\"),(\"Serum Cholestrol\",\"@thalach\")])\n\nplot2 = scatter(source, df, views=[male_view, female_view], colors=[\"red\", \"blue\"], legends=[\"Male\", \"Female\"], hover=hover, title=\"BPS vs THAC w. Gender\", x_axis=\"trestbps\", y_axis=\"thalach\")","0b8e0f09":"hover = HoverTool(tooltips = [(\"Age\",\"@age\"),(\"Max Heart Rate\",\"@thalach\")])\n\nplot3 = scatter(source, df, views=[male_view, female_view], colors=[\"red\", \"blue\"], legends=[\"Male\", \"Female\"], hover=hover, title=\"AGE vs THAC w. Gender\", x_axis=\"age\", y_axis=\"thalach\")","c4c9b2ea":"hover = HoverTool(tooltips = [(\"Slope\",\"@slope\"),(\"Old Peak\",\"@oldpeak\")])\n\nplot4 = scatter(source, df, views=[male_view, female_view], colors=[\"red\", \"blue\"], legends=[\"Male\", \"Female\"], hover=hover, title=\"SLOPE vs OLDPEAK w. Gender\", x_axis=\"slope\", y_axis=\"oldpeak\")","0361b3ed":"tab1 = Panel(child = plot1,title = \"bps vs chol\")\ntab2 = Panel(child = plot2,title = \"bps vs thalach\")\ntab3 = Panel(child = plot3,title = \"age vs thalach\")\ntab4 = Panel(child = plot4,title = \"slope vs oldpeak\")\ntabs = Tabs(tabs=[tab1, tab2, tab3, tab4])\nshow(tabs)","234b3e35":"cp1_view = CDSView(source=source,\n                       filters=[GroupFilter(column_name='cp', group=\"TypeA\")])\ncp2_view = CDSView(source=source,\n                        filters=[GroupFilter(column_name='cp', group=\"TypeB\")])\ncp3_view = CDSView(source=source,\n                       filters=[GroupFilter(column_name='cp', group=\"TypeC\")])\ncp4_view = CDSView(source=source,\n                        filters=[GroupFilter(column_name='cp', group=\"TypeD\")])","c43de5de":"hover = HoverTool(tooltips = [(\"BPS\",\"@trestbps\"),(\"CHOL\",\"@chol\")])\n\nplot1 = scatter(source, df, views=[cp1_view, cp2_view, cp3_view, cp4_view], colors=[\"red\", \"blue\", \"green\", \"yellow\"],\n                legends=[\"TypeA\", \"TypeB\", \"TypeC\", \"TypeD\"], hover=hover, title=\"BPS vs CHOL w. CP\", x_axis=\"trestbps\", y_axis=\"chol\")","33484b40":"hover = HoverTool(tooltips = [(\"BPS\",\"@trestbps\"),(\"THALACH\",\"@thalach\")])\n\nplot2 = scatter(source, df, views=[cp1_view, cp2_view, cp3_view, cp4_view], colors=[\"red\", \"blue\", \"green\", \"yellow\"],\n                legends=[\"TypeA\", \"TypeB\", \"TypeC\", \"TypeD\"], hover=hover, title=\"BPS vs THALACH w. CP\", x_axis=\"trestbps\", y_axis=\"thalach\")","15631956":"hover = HoverTool(tooltips = [(\"AGE\",\"@age\"),(\"THALACH\",\"@thalach\")])\n\nplot3 = scatter(source, df, views=[cp1_view, cp2_view, cp3_view, cp4_view], colors=[\"red\", \"blue\", \"green\", \"yellow\"],\n                legends=[\"TypeA\", \"TypeB\", \"TypeC\", \"TypeD\"], hover=hover, title=\"AGE vs THALACH w. CP\", x_axis=\"age\", y_axis=\"thalach\")","9dd48978":"hover = HoverTool(tooltips = [(\"Slope\",\"@slope\"),(\"Old Peak\",\"@oldpeak\")])\n\nplot4 = scatter(source, df, views=[cp1_view, cp2_view, cp3_view, cp4_view], colors=[\"red\", \"blue\", \"green\", \"yellow\"],\n                legends=[\"TypeA\", \"TypeB\", \"TypeC\", \"TypeD\"], hover=hover, title=\"SLOPE vs OLDPEAK w. CP\", x_axis=\"slope\", y_axis=\"oldpeak\")","c0ee6aae":"tab1 = Panel(child = plot1,title = \"bps vs chol\")\ntab2 = Panel(child = plot2,title = \"bps vs thalach\")\ntab3 = Panel(child = plot3,title = \"age vs thalach\")\ntab4 = Panel(child = plot4,title = \"slope vs oldpeak\")\ntabs = Tabs(tabs=[tab1, tab2, tab3, tab4])\nshow(tabs)","229d2ba0":"def partition_hist(df, start_val, end_val, step_val, categories, select_col, groupby_col):\n    separated_df = {c: [] for c in categories}\n    for val in range(start_val, end_val, step_val):\n        if step_val > 1:\n            part_df = df[(val <= df[select_col]) & (df[select_col] < (val + step_val))]\n        else:\n            part_df = df[df[select_col]==val]\n        count_df = part_df[[select_col, groupby_col]].groupby(groupby_col).count()\n        for c in categories:\n            if c in count_df.index:\n                separated_df[c].append(count_df.loc[c][0])\n            else:\n                separated_df[c].append(0)\n    return separated_df","f3305b06":"def plot_hist_cat(separated_df, start_val, end_val, step_val, categories, hover, title, colors, factors):\n    source = ColumnDataSource(data=dict(\n        x=factors,\n        **{c: separated_df[c] for c in categories}\n    ))\n    \n    p = figure(x_range=FactorRange(*factors), tools=[hover], title=title)\n\n    p.vbar_stack(categories, x='x', width=0.9, alpha=0.5, color=colors, source=source,\n                 legend=[value(x) for x in categories])\n\n    p.x_range.range_padding = 0.1\n    p.xaxis.major_label_orientation = 1\n    p.xgrid.grid_line_color = None\n    p.legend.location = \"top_left\"\n    p.legend.orientation = \"vertical\"\n    return p","e39af150":"def hist(cat_df, values, categories, hover, title, colors, x_axis, y_axis):\n    start_val, end_val, step_val = values\n    factors = [f\"{s}-{s+step_val}\" for s in range(start_val, end_val, step_val)]\n    \n    separated_df = partition_hist(cat_df, start_val, end_val, step_val, categories, x_axis, y_axis)\n    plot = plot_hist_cat(separated_df, start_val, end_val, step_val, categories, hover, title, colors, factors)\n    \n    return plot","7e0cce58":"start_val, end_val, step_val = 0, 90, 10 # age bin values\n\ncategories = [\"Male\", \"Female\"]\nhover = HoverTool(tooltips = [(\"Male\",\"@Male\"),(\"Female\",\"@Female\")])\n\nplot1 = hist(cat_df, values=(start_val, end_val, step_val), categories=categories, hover=hover,\n             title=\"Age Segregation for Gender\", colors=[\"red\", \"blue\"], x_axis=\"age\", y_axis=\"sex\")","5e331357":"start_val, end_val, step_val = 0, 90, 10 # age bin values\n\ncategories = [f\"Type{chr(i)}\" for i in range(65, 69)]\nhover = HoverTool(tooltips = [(f\"Type{chr(i)}\", f\"@Type{chr(i)}\") for i in range(65, 69)])\n                  \nplot2 = hist(cat_df, values=(start_val, end_val, step_val), categories=categories, hover=hover,\n             title=\"Age Segregation for Chest Pain Type\", colors=[\"red\", \"blue\", \"green\", \"yellow\"], x_axis=\"age\", y_axis=\"cp\")","628c11d9":"start_val, end_val, step_val = 0, 90, 10 # age bin values\n\ncategories = [\"High\", \"Low\"]\nhover = HoverTool(tooltips = [(\"High\", \"@High\"), (\"Low\", \"@Low\")])\n\nplot3 = hist(cat_df, values=(start_val, end_val, step_val), categories=categories, hover=hover,\n             title=\"Age Segregation for Blood Sugar\", colors=[\"red\", \"blue\"], x_axis=\"age\", y_axis=\"fbs\")","d1ef7155":"start_val, end_val, step_val = 0, 90, 10 # age bin values\n\ncategories = [\"NotHealthy\", \"Healthy\"]\nhover = HoverTool(tooltips = [(\"NotHealthy\", \"@NotHealthy\"), (\"Healthy\", \"@Healthy\")])\n\nplot4 = hist(cat_df, values=(start_val, end_val, step_val), categories=categories, hover=hover,\n             title=\"Age Segregation for Target\", colors=[\"red\", \"blue\"], x_axis=\"age\", y_axis=\"target\")","4e9c2d62":"plot1.x_range = plot2.x_range = plot3.x_range = plot4.x_range # equal width\nplot1.y_range = plot2.y_range = plot3.y_range = plot4.y_range # equal height","911022ed":"tab1 = Panel(child = plot1, title = \"Sex\")\ntab2 = Panel(child = plot2, title = \"Chest Pain\")\ntab3 = Panel(child = plot3, title = \"Fasting Blood Sugar\")\ntab4 = Panel(child = plot4, title = \"Target\")\n\ntabs = Tabs(tabs=[tab1, tab2, tab3, tab4])\nshow(tabs)","3734ed50":"pca = PCA(n_components=13)","d6f52dbe":"x_orig = df.drop(\"target\", axis=1).values \ny = df[\"target\"]","c68a6622":"scaler = StandardScaler()\nx_orig_norm = scaler.fit_transform(x_orig)\n\nx_pca_orig = pca.fit_transform(x_orig_norm)","bdacae09":"eigen_values = pca.explained_variance_ratio_[:5]\ncumulative_value = np.cumsum(eigen_values)\nx_label = [f\"Component{i}\" for i in range(len(eigen_values))]\n\nplot = figure(x_range=x_label)\nplot.vbar(x=x_label, top=eigen_values, width=0.9)\nplot.line(x=x_label, y=cumulative_value, \n         color='red', line_width=1,\n         legend='Cumulative')\nplot.xaxis.major_label_orientation = \"vertical\"\nplot.legend.location = \"top_left\"\nshow(plot)","bfa4fcbf":"dimension = 2\nx_pca = x_pca_orig[:, :dimension]","728c73ff":"map_target = {1: \"red\", 0: \"blue\"}","4ce29c47":"scatter_df = pd.DataFrame({\"x_comp_0\": x_pca[:, 0], \"x_comp_1\": x_pca[:, 1], \n                           \"color\": [map_target[c] for c in df[\"target\"]], \n                           \"label\": [map_target_to_string[c] for c in df[\"target\"]]})","55391ea3":"scatter_source = ColumnDataSource(data=scatter_df)","ce8d26c0":"plot = figure()\n\nplot.circle(x=\"x_comp_0\", y=\"x_comp_1\", source=scatter_source, color=\"color\", legend=\"label\")\nshow(plot)","2e2aa2c8":"def get_metrics(y_true, y_pred):\n    cm = confusion_matrix(y_true, y_pred, labels=[0, 1])\n    f1 = f1_score(y_true, y_pred)\n    accuracy = accuracy_score(y_true, y_pred)\n    roc_auc = roc_auc_score(y_true, y_pred)\n    \n    print(f'''\nConfusion Matrix: \n{cm}\nF1 Score: {f1}\nAccuracy: {accuracy}\nROC AUC: {roc_auc}\n    ''')\n    \n    return cm, f1, accuracy, roc_auc","f843257c":"x_train, x_test, y_train, y_test = train_test_split(x_pca, y, test_size=0.3, stratify=y)","9c19b051":"clf = GridSearchCV(estimator=SGDClassifier(), param_grid={\"loss\": [\"log\", \"hinge\"], \"penalty\": [\"l1\", \"l2\"], \"alpha\": [1, 1e-1, 1e-2], \"max_iter\": [10, 1000, ]}, cv=5)\nclf.fit(x_train, y_train)\ny_predict = clf.predict(x_test)\n\nprint(f\"Test Metrics using {clf.estimator.__class__}\")\ntest_cm, test_f1, test_acc, test_auc = get_metrics(y_test, y_predict)\nprint(clf.best_params_)\n\nsgd_clf = clf","4486c2d4":"clf = GridSearchCV(estimator=SVC(), param_grid={\"gamma\": [\"scale\"], \"C\": [10], \"kernel\": [\"linear\"]}, cv=5)\nclf.fit(x_train, y_train)\ny_predict = clf.predict(x_test)\n\nprint(f\"Test Metrics using {clf.estimator.__class__}\")\ntest_cm, test_f1, test_acc, test_auc = get_metrics(y_test, y_predict)\nprint(clf.best_params_)\n\nsvc_clf = clf","0311b333":"clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid={'n_estimators': [50, 75, 100, 300], \"max_depth\": [1, 10]}, cv=5).fit(x_train, y_train)#\ny_predict = clf.predict(x_test)\n\nprint(f\"Test Metrics using {clf.estimator.__class__}\")\ntest_cm, test_f1, test_acc, test_auc = get_metrics(y_test, y_predict)\nprint(clf.best_params_)\n\nrfc_clf = clf","9d8df5dd":"def plot_boundary(X, y, clfs, titles):\n    \n    color_list_light = ['#FFFFAA', '#EFEFEF', '#AAFFAA']#, '#AAAAFF']\n    color_list_bold = ['#EEEE00', '#000000', '#00CC00']#, '#0000CC']\n    custom_cmap2 = ListedColormap(color_list_light)\n    custom_cmap1 = ListedColormap(color_list_bold)\n    # Plotting decision regions\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),\n                         np.arange(y_min, y_max, 0.1))\n    \n    print(xx.shape)\n    f, axarr = plt.subplots(2, 2, sharex='col', sharey='row', figsize=(10, 8))\n\n    for idx, clf, tt in zip(product([0, 1], [0, 1]),\n                            clfs,\n                            titles):\n\n        Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n        Z = Z.reshape(xx.shape)\n\n        axarr[idx[0], idx[1]].contourf(xx, yy, Z, alpha=0.8,cmap=custom_cmap2)\n        axarr[idx[0], idx[1]].scatter(X[:, 0], X[:, 1], c=y,cmap=custom_cmap1,\n                                      s=20, edgecolor='black')\n        axarr[idx[0], idx[1]].set_title(tt)\n    plt.show()","5cebc1e4":"plot_boundary(x_pca_orig[:, :dimension], y, [sgd_clf, rfc_clf, svc_clf], [\"SGD\", \"Random Forest\", \"SVC\"])","06006e66":"def plot_cluster(x, dim_1, dim_2, n_clusters=None):\n    \n    best_silh_score, best_kmeans = -np.inf, None\n    best_n_cluster = None\n    if n_clusters is None:\n        for n_clusters in [2, 3, 4, 5]:\n            kmeans = KMeans(n_clusters=n_clusters)\n            dim_slice = [dim_1, dim_2]\n\n            kmeans.fit(x[:, dim_slice], y_train)\n            y_predict = kmeans.predict(x[:, dim_slice])\n            \n            sil_score = silhouette_score(x[:, dim_slice], y_predict)\n            \n            print(f\"Silhouette score for {n_clusters} clusters is {sil_score}\")\n            \n            if sil_score > best_silh_score:\n                best_silh_score = sil_score\n                best_kmeans = kmeans\n                best_n_cluster = n_clusters\n    \n    n_clusters = best_n_cluster\n    kmeans = best_kmeans\n    y_predict = kmeans.predict(x[:, dim_slice])\n    \n    clusters = kmeans.cluster_centers_\n    colors = [\"red\", \"blue\", \"yellow\", \"green\", \"black\", \"grey\"]\n    \n    cluster_results_df = pd.DataFrame({\"x_comp_0\": x[:, dim_1], \"x_comp_1\": x[:, dim_2], \"color\": [colors[i] for i in y_predict]})\n    cluster_results_source = ColumnDataSource(data=cluster_results_df)\n    \n    cluster_center_df = pd.DataFrame({\"x_comp_0\": clusters[:, 0], \"x_comp_1\": clusters[:, 1],\n                                  \"color\": colors[:n_clusters],\n                                  \"label\": [f\"Cluster {i}\" for i in range(len(clusters))]})\n    cluster_source = ColumnDataSource(data=cluster_center_df)\n    \n    print(f\"Plot of {list(df)[dim_1]} vs {list(df)[dim_2]}\")\n    \n    plot = figure()\n\n    plot.circle(x=\"x_comp_0\", y=\"x_comp_1\", source=cluster_results_source, color=\"color\")\n    plot.diamond(x=\"x_comp_0\", y=\"x_comp_1\", source=cluster_source, color=\"color\", legend=\"label\", size=20)\n\n    show(plot)","6b46eb42":"plot_cluster(x_orig, 0, 3)\nplot_cluster(x_orig, 0, 4)\nplot_cluster(x_orig, 0, 7)\nplot_cluster(x_orig, 0, 9)\n\nplot_cluster(x_orig, 3, 4)\nplot_cluster(x_orig, 3, 7)\nplot_cluster(x_orig, 3, 9)\n\nplot_cluster(x_orig, 4, 7)\nplot_cluster(x_orig, 4, 9)\n\n\nplot_cluster(x_orig, 7, 9)","c83a34c2":"## PCA Transformed Plot","94719fca":"# Scatter Plot segregated by Gender ","5862dea6":"click on the legend","45c89bc8":"## Scree Plot","11e46137":"# Split Dataset","8fd76672":"click on the legend","1cc13f03":"Attribute Information:\n> 1. age\n> 2. sex\n> 3. chest pain type (4 values)\n> 4. resting blood pressure\n> 5. serum cholestoral in mg\/dl\n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved\n> 9. exercise induced angina\n> 10. oldpeak = ST depression induced by exercise relative to rest\n> 11. the slope of the peak exercise ST segment\n> 12. number of major vessels (0-3) colored by flourosopy\n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","03c12fd2":"# Correlation Matrix","e845cce7":"# PCA","d0a8540b":"# Clustering","93b6fc22":"# Plot Decision Boundary","fcb7b47f":"# Pandas Profiling","88cf12e5":"# Histogram bins separated by Age","3cfff381":"# Scatter Plot segregated by Chest Pain","06a13e92":"# Classify on PCA'd data (inconsistent results)"}}