{"cell_type":{"f6be8e3e":"code","f14fba2c":"code","adde9570":"code","39d77efc":"code","fb63e241":"code","87ab3a1f":"code","67ce0d3a":"code","0d8180c0":"code","e7a3acc8":"code","8bf37cfc":"code","5bd5eef2":"code","4ad4df13":"code","339ee588":"code","a0a2f3ea":"code","26d3ee74":"code","344794d6":"code","83b99c71":"code","7ca0be69":"code","58fba318":"code","d72c53b2":"code","6ccace5e":"code","1392a784":"code","81e9b8c1":"code","19bc7ef6":"code","3148d220":"code","be144a7b":"code","253bf9d5":"code","768d1980":"code","1f893258":"code","f34c9b94":"code","c459eaf8":"code","34e5048f":"code","72b9a2b8":"code","ef76e1d5":"code","77a56ed2":"code","64b800c6":"code","05214402":"code","55f09fac":"code","31a95571":"code","b912060c":"code","c8a94fbb":"code","91634810":"code","2ee6a8a5":"code","34106272":"code","00871c59":"code","d1f609ad":"code","4befaba8":"code","5fe90b78":"code","e4e6f243":"code","eb915ec9":"code","ae1373c1":"code","5f50c27f":"code","510f4d80":"code","ee814150":"code","2d7880c5":"code","1722da30":"code","0c304143":"code","c2170707":"code","0ba17da3":"code","96569d48":"code","74663302":"code","c269977d":"code","fd6e06bc":"code","eadf2909":"code","78836144":"code","b11397f8":"code","c806441a":"code","0d97a2e2":"code","5a4cd7e1":"code","6e17f136":"code","0fb7e213":"markdown","4b605b73":"markdown","ab10618c":"markdown","77aaa29e":"markdown"},"source":{"f6be8e3e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f14fba2c":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","adde9570":"train.head(10)","39d77efc":"test.head(10)","fb63e241":"train.describe()","87ab3a1f":"train.columns","67ce0d3a":"train.dtypes","0d8180c0":"train.select_dtypes(include=['number'])","e7a3acc8":"train.select_dtypes(include=['object'])","8bf37cfc":"train.duplicated().sum()","5bd5eef2":"train.isnull().sum()","4ad4df13":"train.shape","339ee588":"test.shape","a0a2f3ea":"train.drop('LotFrontage',axis=1,inplace=True)","26d3ee74":"test.isnull().sum()","344794d6":"test.drop('LotFrontage',axis=1,inplace=True)","83b99c71":"test.drop('SaleType',axis=1,inplace=True)","7ca0be69":"plt.hist(train.SalePrice, 20,color = 'blue' ,ec = 'yellow')\nplt.xlabel('Sale Price of houses')\nplt.ylabel('frequency of distribution')\nplt.title('Distribution of Sale Price of House')","58fba318":"max_saleprice = train['SalePrice'].max()\nprint(\"The highest Sale Price {}\".format(max_saleprice),'USD')","d72c53b2":"columns = ['SalePrice', 'OverallQual', 'GrLivArea', 'HouseStyle','GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[columns], height = 3.5)","6ccace5e":"plt.figure(figsize = (30, 14))\nsns.violinplot(x = 'MSSubClass', y = 'SalePrice', data = train)","1392a784":"sx = sns.histplot( x='OverallQual', y=\"SalePrice\", data=train)","81e9b8c1":"sns.countplot( x='MoSold', data=train)","19bc7ef6":"sns.countplot( x='MSZoning', data=train)","3148d220":"plt.figure(figsize = (10, 10))\nplt.xticks(rotation = 90)\nsns.lineplot(x = 'Neighborhood', y = 'SalePrice', dashes = False, data = train)","be144a7b":"sns.catplot(x=\"HouseStyle\", y=\"SalePrice\",jitter=False, data=train)","253bf9d5":"train.corr()","768d1980":"corr = train.corr()\nf, ax = plt.subplots(figsize=(12, 10))\ncmap = sns.diverging_palette(h_neg=10, h_pos=240, as_cmap = True)\nax = sns.heatmap(corr, center=0, cmap=cmap, linewidths=1, fmt=\".2f\")","1f893258":"mask = np.triu(np.ones_like(corr, dtype=bool))\nf, ax = plt.subplots(figsize=(12, 10))\nax = sns.heatmap(corr, mask=mask, center=0, cmap=cmap, linewidths=1, fmt=\".2f\")","f34c9b94":"# basic Heatmap\nplt.figure(figsize=(30,15))\na = sns.heatmap(train.corr(), annot=True, fmt='.1f')\nsns.heatmap(train.corr())","c459eaf8":"corr_matrix = train.corr()\ncorr_matrix[\"SalePrice\"].sort_values(ascending=False)","34e5048f":"#Now Test set\ntest['SalePrice'] = 0","72b9a2b8":"data = pd.concat([train , test] , axis = 0)","ef76e1d5":"data.describe()","77a56ed2":"data.columns","64b800c6":"data.info()","05214402":"data.isnull().sum()","55f09fac":"data.duplicated().sum()","31a95571":"data['BsmtFinSF1'] = data['BsmtFinSF1'].fillna(data['BsmtFinSF1'].mean())\ndata['GarageArea'] = data['GarageArea'].fillna(data['GarageArea'].mean())\ndata['TotalBsmtSF'] = data['TotalBsmtSF'].fillna(data['TotalBsmtSF'].mean())\ndata['GarageCars'] = data['GarageCars'].fillna(data['GarageCars'].mean())\ndata['BsmtFinSF2'] = data['BsmtFinSF2'].fillna(data['BsmtFinSF2'].mean())\ndata['BsmtUnfSF'] = data['BsmtUnfSF'].fillna(data['BsmtUnfSF'].mean())","b912060c":"data.drop(['Alley' , 'PoolQC' , 'Fence' , 'MiscFeature'], axis = 1 , inplace = True)\ndata.drop(['GarageYrBlt'], axis = 1 , inplace = True)","c8a94fbb":"data['SaleType'] = data.SaleType.fillna(data['SaleType'].mode()[0])","91634810":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata['MasVnrType'] = data['MasVnrType'].fillna(data['MasVnrType'].mode()[0])\ndata['BsmtQual'] = data['BsmtQual'].fillna(data['BsmtQual'].mode()[0])\ndata['BsmtCond'] = data['BsmtCond'].fillna(data['BsmtCond'].mode()[0])\ndata['MasVnrArea'] = data['MasVnrArea'].fillna(data['MasVnrArea'].mode()[0])\ndata['BsmtFullBath'] = data['BsmtFullBath'].fillna(data['BsmtFullBath'].mode()[0])\ndata['BsmtHalfBath'] = data['BsmtHalfBath'].fillna(data['BsmtHalfBath'].mode()[0])\ndata['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna(data['BsmtFinType2'].mode()[0])\ndata['FireplaceQu'] = data['FireplaceQu'].fillna(data['FireplaceQu'].mode()[0])\ndata['BsmtExposure'] = data['BsmtExposure'].fillna(data['BsmtExposure'].mode()[0])\ndata['BsmtFinType1'] = data['BsmtFinType1'].fillna(data['BsmtFinType1'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\ndata['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['Functional'] = data['Functional'].fillna(data['Functional'].mode()[0])\n\ndata['GarageType'] = data['GarageType'].fillna(data['GarageType'].mode()[0])\ndata['GarageFinish'] = data['GarageFinish'].fillna(data['GarageFinish'].mode()[0])\ndata['GarageQual'] = data['GarageQual'].fillna(data['GarageQual'].mode()[0])\ndata['GarageCond'] = data['GarageCond'].fillna(data['GarageCond'].mode()[0])\n\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])","2ee6a8a5":"data.info()","34106272":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType','SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC','CentralAir',\n         'Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","00871c59":"print(len(columns))","d1f609ad":"def category(multcolumns):\n    data_final=data\n    i=0\n    for field in multcolumns:\n        \n        df1=pd.get_dummies(data[field],drop_first=True)\n        \n        data.drop([field],axis=1,inplace=True)\n        if i==0:\n            data_final=df1.copy()\n        else:\n            \n            data_final=pd.concat([data_final,df1],axis=1)\n        i=i+1\n       \n        \n    data_final=pd.concat([data,data_final],axis=1)\n        \n    return data_final\n","4befaba8":"data = category(columns)","5fe90b78":"data = data.loc[:,~data.columns.duplicated()]","e4e6f243":"train_data = data.iloc[:1460,:]\ntest_data = data.iloc[1460:,:]","eb915ec9":"test_data.drop(['SalePrice'] , axis = 1 , inplace = True)","ae1373c1":"y_train = train_data['SalePrice']\nx_train = train_data.drop(['SalePrice'] , axis = 1)","5f50c27f":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nx_train = scalar.fit_transform(x_train)\ntest_data = scalar.transform(test_data)","510f4d80":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x_train,y_train)","ee814150":"#y_tr = lr.predict(x_train)\nreg.coef_","2d7880c5":"reg.intercept_","1722da30":"reg.score(x_train,y_train)","0c304143":"result = reg.predict(x_train)","c2170707":"plt.figure(figsize = (6,4))\nplt.plot(y_train, '*',color = 'yellow', label = 'Actual Values')\nplt.plot(result, color = 'red', label = 'Predicted Values')\nplt.legend()","0ba17da3":"test_data = pd.DataFrame()\ntest_data['Actual Values'] = y_train\ntest_data['Predicted_values'] = result\ntest_data","96569d48":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics","74663302":"data.columns","c269977d":"X = data.drop(columns = 'Attchd', axis = 1)\ny = data.Attchd","fd6e06bc":"X.shape, y.shape","eadf2909":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","78836144":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","b11397f8":"lr = LinearRegression()\nlr.fit(X_train, y_train)","c806441a":"# Evaluate on Train Set\npred_train = lr.predict(X_train)","0d97a2e2":"# R Squared\nr2_train = metrics.r2_score(y_train, pred_train)\nprint(\"train accuracy :\",r2_train)","5a4cd7e1":"# R Squared\nr2_train = metrics.r2_score(y_train, pred_train)\nprint(r2_train)","6e17f136":"# Evaluate on Test Set\npred_test = lr.predict(X_test)\n\n# R Squared\nr2_test = metrics.r2_score(y_test, pred_test)\nprint(\"test accuracy : \",r2_test)","0fb7e213":"# TASK 7\n\nRegistration ID : SIRSS2140\n    \nRAJ SANKAR GS\n","4b605b73":"# Q2. Kaggle House Price prediction","ab10618c":"# Model Training","77aaa29e":"# Another way by using train test split"}}