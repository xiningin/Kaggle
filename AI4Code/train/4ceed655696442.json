{"cell_type":{"209c29db":"code","bfc03687":"code","75f08ac8":"code","5dc7b5a0":"code","b67f510c":"code","67d69081":"code","33e2531f":"code","87364bf7":"code","0777d94b":"code","aabd2592":"code","833950b5":"code","914554c1":"code","02aeabdd":"code","2e891c54":"code","85bbbdda":"code","8f51c1e7":"code","c1f8e287":"code","afd51114":"code","d02f7dcf":"code","4b4300fb":"code","79dca262":"code","1f62a3ec":"code","0d966055":"code","d18f2285":"code","5626db9f":"code","e800c864":"code","f9bf575d":"code","14e6c9e0":"code","ca23b5d5":"code","5f117065":"code","99896831":"code","f82890cc":"code","92fa1fdd":"code","bf0db6cd":"code","3bdb3983":"code","a2c4028c":"code","dde7fcf2":"code","55a58704":"code","6c685c1d":"code","1d11e303":"code","f1055a35":"code","d8b23614":"code","e9bdfd30":"code","104837ce":"code","e30325a6":"code","baf2b387":"code","41ee9400":"code","9a6bb097":"code","ed24239c":"code","0c11f536":"markdown","82c28a7a":"markdown","a84c1413":"markdown"},"source":{"209c29db":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\ndata=pd.read_csv('..\/input\/athlete_events.csv')\n","bfc03687":"#The fist five rows in Data\ndata.head()","75f08ac8":"#The last five rows in Data show that\ndata.tail()","5dc7b5a0":"#If you show more rows the first you should write it.\ndata.head(10)","b67f510c":"data.sample()","67d69081":"data.sample(frac=0.01)","33e2531f":"#Data show info.So I want to see data info's\ndata.info()\n#We see all of columns in Data.They have some features","87364bf7":"#Data describe\ndata.describe() #but I don't want ID,Year columns so,\ndata[['Age','Height','Weight']].describe()","0777d94b":"data.dtypes","aabd2592":"sns.boxenplot(x=\"Height\", y=\"Weight\",\n              color=\"b\",\n              scale=\"linear\", data=data)\nplt.show()","833950b5":"# Show the joint distribution using kernel density estimation\ng = sns.jointplot(data.Age, data.Height, kind=\"kde\", height=7, space=0)\nplt.show()","914554c1":"#I wanto to seee columns so,\ndata.columns","02aeabdd":"#data's shape\ndata.shape","2e891c54":"#Data's corr value but I dont want ID,Year columns because overfitting\ndata.corr()\ndata[['Age','Height','Weight']].corr()","85bbbdda":"#Data types in all because I want to see columns variable values\ndata.dtypes","8f51c1e7":"#Data sizes.its rows x columns :)\ndata.size","c1f8e287":"#data sum null values\ndata.isnull().sum()\n#You can see some columns null.Bu when we execute ml algo. it don't work because null","afd51114":"#So we execute Age,Height,Weight use Imputer\nfrom sklearn.preprocessing import Imputer\nimputer=Imputer(missing_values='NaN',strategy='mean') #use mean or median \nAges=data[['Age']].values\nAges=imputer.fit_transform(Ages[:,0:1])\ndata.Age=Ages\ndata.Age.isnull().sum()\n##########################################################################\nHeights=data[['Height']].values\nHeights=imputer.fit_transform(Heights[:,0:1])\ndata.Height=Heights\ndata.Height.isnull().sum()\n##########################################################################\nWeights=data[['Weight']].values\nWeights=imputer.fit_transform(Weights[:,0:1])\ndata.Weight=Weights\ndata.Weight.isnull().sum()","d02f7dcf":"#Re show null value\ndata.isnull().sum()\n#That's good job.But mead has some null values.It does not matter.","4b4300fb":"#First column is Sex.now I make analysis this one.\ndata.Sex.unique() #M,F, non null\ndata.Sex.value_counts() #M=196594 , F=74522 values\nsns.countplot(data.Sex)\nplt.title('Sex Values in Data',size=15,color='Blue')\nplt.show()","79dca262":"#So, I want to see sum female,male for every year and show plot\nsum_year_female=[]\nsum_year_male=[]\nall_year_unique=data.Year.unique()\ndata.groupby('Year')['Sex'].value_counts()\n\nfor year in all_year_unique:\n    sum_year_male.append(data[(data['Year']==year) & (data['Sex']=='M')].Sex.count())\n    sum_year_female.append(data[(data['Year']==year) & (data['Sex']=='F')].Sex.count())\n\nall_year_unique=pd.DataFrame(all_year_unique,columns=['Year'])   \nsum_year_male=pd.DataFrame(sum_year_male,columns=['Sex'])\nsum_year_female=pd.DataFrame(sum_year_female,columns=['Sex'])\n\nyear_female=pd.concat([all_year_unique,sum_year_female],axis=1)\nyear_male=pd.concat([all_year_unique,sum_year_male],axis=1)\n\nyear_female=year_female.sort_index() \nyear_male=year_male.sort_index()\n#we need to sort out our data so that it appears more smoothly\n#Now I have sum of year every Sex in Data so I will draw plotting\n\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x=data.Year.unique(),y=year_male.Sex,color='lime',alpha=0.8)\nsns.pointplot(x=data.Year.unique(),y=year_female.Sex,color='red',alpha=0.8)\nplt.text(10,0.5,'ALL YEAR FOR EVERY FEMALE',color='red',fontsize = 15,style = 'italic')\nplt.text(25,0.5,'ALL YEAR FOR EVERY MALE',color='lime',fontsize = 15,style = 'italic')\nplt.xlabel('YEAR',fontsize = 15,color='blue')\nplt.xticks(rotation=90)\nplt.ylabel('SUM OF GENDERS',fontsize = 15,color='blue')\nplt.title('MALE VS FEMALE',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","1f62a3ec":"ages=data['Age'].unique()\nages=pd.DataFrame(ages,columns=['Ages'])\nages=ages.sort_index()\n#We second columns is Age.I will analysis\nsum_of_ages=[]\nfor age in data.Age.unique():\n    sum_of_ages.append(sum(data[data['Age']==age].Age.value_counts()))\n\nsum_of_ages=pd.DataFrame(sum_of_ages,columns=['Ages_Count']) \n\nsum_of_ages[:10]\nages[:10]\n\ndata_age=pd.concat([ages[:10],sum_of_ages[:10]],axis=1) #We concat age,age counts in Data because while show them in barplot\n\ndata_age\n#We count the ages just unique\nplt.figure(figsize=(10,10))\nsns.barplot(x=data_age.Ages,y=data_age.Ages_Count)\nplt.xlabel('Age')\nplt.ylabel('Age Values')\nplt.title('Age Vs Values')\nplt.show()","0d966055":"#Now, I will show Team counts in every year\nplt.figure(figsize=(10,10))\nsns.countplot(x=data.Team[:300])\nplt.xlabel('Team')\nplt.ylabel('Counts')\nplt.xticks(rotation=90)\nplt.title('Sum of Team Counts')\nplt.show()","d18f2285":"#We took the first 50 teams in this section. \n#We made an inquiry between the teams. \n#This is to process according to both the team and the sex in the questionnaire.\nsum_of_female_team=[]\nsum_of_male_team=[]\nfor team in data.Team.unique()[:50]:\n    sum_of_female_team.append(data[(data['Team']==team) & (data['Sex']=='F')].Sex.count())\n    sum_of_male_team.append(data[(data['Team']==team) & (data['Sex']=='M')].Sex.count())\n\nteam_of_300=pd.DataFrame(data.Team.unique()[:300],columns=['Team'])\nsum_of_male_team=pd.DataFrame(sum_of_male_team,columns=['Male'])\nsum_of_female_team=pd.DataFrame(sum_of_female_team,columns=['Female']) ","5626db9f":"#In this section, the analysis obtained at the top is transformed into a graph.\nall_data=pd.concat([sum_of_female_team,sum_of_male_team],axis=1)\n\nf,ax=plt.subplots(figsize=(10,10))\nsns.barplot(y=data.Team.unique()[:50],x=all_data.Male,color='green',alpha=0.5,label='Male')\nsns.barplot(y=data.Team.unique()[:50],x=all_data.Female,color='red',alpha=0.7,label='Female')\nax.legend(loc='lower right',frameon=True)\nax.set(ylabel='Team',xlabel='Rate of Gender',title='Male vs Female')\nplt.show()\n    \n   ","e800c864":"data.Games.unique()\nall_of_games=data.Games.value_counts()\ncolors = ['grey','blue','red','yellow','green','brown','lime','pink','orange','purple']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nplt.figure(figsize = (7,7))\nplt.pie(all_of_games.values[:10], explode=explode, labels=all_of_games.index[:10], colors=colors, autopct='%1.1f%%')\nplt.title('Games',color = 'blue',fontsize = 15)\nplt.show()","f9bf575d":"#In this section you can see how much time has been played and what has been played on the data.\ngames_type=[]\nvalue_games=data.Games.str.split()\nfor d in value_games:\n    games_type.append(d[1])\n\ngames_type=pd.DataFrame(games_type,columns=['Games_Type'])\ndata['Game_Type']=games_type\ntypes_game=data.Game_Type.value_counts()\ncolors = ['red','yellow']\nexplode = [0,0]\nplt.figure(figsize = (7,7))\nplt.pie(types_game.values, explode=explode, labels=types_game.index, colors=colors, autopct='%1.1f%%')\nplt.title('Games Type',color = 'blue',fontsize = 15)\nplt.show()","14e6c9e0":"#This section is about how many times the cities are played.\nplt.figure(figsize=(10,10))\nax=sns.barplot(x=data.City.value_counts().index,y=data.City.value_counts().values,palette=sns.cubehelix_palette(len(data.City.value_counts().index)))\nplt.xlabel('City')\nplt.ylabel('Rates')\nplt.xticks(rotation=90)\nplt.title('Most Common City of Rates',fontsize=15,color='b')\nplt.show()\n#As you can see there is a lot of proportions in some places here. The most important thing to note here is the graphical situation.","ca23b5d5":"#In this section we will perform the weight and height operations. \n#Here we will determine the average aspect ratios of women and men and plot them.\navg_height_female=data[data['Sex']=='F'].Height.mean()\navg_height_male=data[data['Sex']=='M'].Height.mean()\navg_weight_female=data[data['Sex']=='F'].Weight.mean()\navg_weight_male=data[data['Sex']=='M'].Weight.mean()\n#new feature for height and weight but avg\ngamer_feature_height_female=['Short' if height<avg_height_female else 'Tall' for height in data[data['Sex']=='F'].Height]\ngamer_feature_height_male=['Short' if height<avg_height_male else 'Tall' for height in data[data['Sex']=='M'].Height]\ngamer_feature_weight_female=['Weak' if weight<avg_weight_female else 'Normal Fat' for weight in data[data['Sex']=='F'].Weight]\ngamer_feature_weight_male=['Weak' if weight<avg_weight_male else 'Normal Fat' for weight in data[data['Sex']=='M'].Weight]","5f117065":"data.Sport.value_counts()\n#The most popular 20 sports\nsns.barplot(y=data.Sport.value_counts().index[:20],x=data.Sport.value_counts().values[:20])\nplt.xlabel('Rates')\nplt.ylabel('Sports')\nplt.title('Sport of Rates',fontsize=15,color='b')\nplt.show()","99896831":"#20 non-popular sports\nnon_popular=data.Sport.value_counts()\nnon_popular=non_popular.sort_index()\nsort_data_index=sorted(non_popular.index)\nsort_data_values=sorted(non_popular.values)\nsns.barplot(y=sort_data_index[:20],x=sort_data_values[:20])\nplt.xlabel('Rates')\nplt.ylabel('Sports')\nplt.title('Sport of Rates',fontsize=15,color='b')\nplt.show()\n","f82890cc":"sum_of_medal=[]\nfor team in data.Team.unique():\n    sum_of_medal.append(data[data['Team']==team].Medal.count())","92fa1fdd":"#In this episode, the medals won by his country team are opened.\nall_team=pd.DataFrame(data.Team.unique(),columns=['Team'])\nsum_of_medal=pd.DataFrame(sum_of_medal,columns=['Medal'])\n\nmedal_of_team=pd.concat([all_team,sum_of_medal],axis=1)\nmedal_of_team=medal_of_team.sort_values(by='Medal', ascending=False)\nplt.figure(figsize=(7,7))\nplt.xticks(rotation=90)\nsns.barplot(x=medal_of_team.Team[:20],y=medal_of_team.Medal[:20])\nplt.show()","bf0db6cd":"#This section shows the medals that the Chinese team has won from the very beginning to this time.\nsum_of_medal_just_china=[]\nsum_of_medal_just_usa=[]\nsum_of_medal_just_turkey=[]\n\nfor year in data.Year.unique():\n    sum_of_medal_just_china.append(data[(data['Year']==year)&(data['Team']=='China')].Medal.count())\n    sum_of_medal_just_usa.append(data[(data['Year']==year)&(data['Team']=='United States')].Medal.count())\n    sum_of_medal_just_turkey.append(data[(data['Year']==year)&(data['Team']=='Turkey')].Medal.count())\n    \nsum_of_medal_just_china=pd.DataFrame(sum_of_medal_just_china,columns=['China_Medal_Count'])\nsum_of_medal_just_usa=pd.DataFrame(sum_of_medal_just_usa,columns=['USA_Medal_Count'])\nsum_of_medal_just_turkey=pd.DataFrame(sum_of_medal_just_turkey,columns=['Turkey_Medal_Count'])\n\nyear_unique=pd.DataFrame(data.Year.unique(),columns=['Year'])\n\nall_data_medal_china=pd.concat([year_unique,sum_of_medal_just_china],axis=1)\nsum_of_medal_just_usa=pd.concat([year_unique,sum_of_medal_just_usa],axis=1)\nsum_of_medal_just_turkey=pd.concat([year_unique,sum_of_medal_just_turkey],axis=1)\n\nall_data_medal_usa=sum_of_medal_just_usa.sort_values(by='USA_Medal_Count',ascending='True')\nall_data_medal_turkey=sum_of_medal_just_turkey.sort_values(by='Turkey_Medal_Count',ascending='True')\nall_data_medal_china=all_data_medal_china.sort_values(by='China_Medal_Count',ascending='True')\nall_data_medal_china\n#Drawings will be made in this section. Also they show the medals they won every year.\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x=all_data_medal_usa.Year,y=all_data_medal_usa.USA_Medal_Count,color='lime',alpha=0.8)\nsns.pointplot(x=all_data_medal_turkey.Year,y=all_data_medal_turkey.Turkey_Medal_Count,color='black',alpha=0.8)\nsns.pointplot(x=all_data_medal_china.Year,y=all_data_medal_china.China_Medal_Count,color='red',alpha=0.8)\nplt.text(5,15,'China Medal Count',color='red',fontsize = 20,style = 'italic')\nplt.text(5,35,'Turkey Medal Count',color='black',fontsize = 20,style = 'italic')\nplt.text(5,55,'USA Medal Count',color='lime',fontsize = 20,style = 'italic')\n\nplt.xlabel('Year',fontsize = 15,color='blue')\nplt.xticks(rotation=90)\nplt.ylabel('Medal Count',fontsize = 15,color='blue')\nplt.title('Medal Count per Year',fontsize = 15,color='blue')\nplt.grid()","3bdb3983":"#Turkey win medal all of time\nsum_of_medal_of_turkey=[]\nfor medal in data.Medal.unique():\n    sum_of_medal_of_turkey.append(data[(data['Team']=='Turkey')&(data['Medal']==medal)].Medal.count())\n\nmedal_unique=pd.DataFrame(data.Medal.unique(),columns=['Medal'])\nsum_of_medal_of_turkey=pd.DataFrame(sum_of_medal_of_turkey,columns=['Medal_of_Turkey'])\nall_state_rows=pd.concat([medal_unique,sum_of_medal_of_turkey],axis=1)\nall_state_rows\n#drawing graph in all every one\nplt.figure(figsize=(7,7))\nsns.barplot(x=all_state_rows.Medal_of_Turkey,y=all_state_rows.Medal)\nplt.xlabel('Medal Count')\nplt.ylabel('Medal of Turkey')\nplt.title('Medal of Turkey Counts',fontsize=15,color='blue')","a2c4028c":"#In this section, necessary actions are taken for event processing. \n#In addition, all documents are scanned.\nevent_data=data.Event.value_counts()\nplt.figure(figsize=(7,7))\nsns.barplot(x=event_data.index[:20],y=event_data.values[:20])\nplt.xlabel('Event Name')\nplt.ylabel('Count')\nplt.title('Event Name vs Count',fontsize=15,color='blue')\nplt.xticks(rotation=90)\nplt.show()","dde7fcf2":"#In this section, all the teams are played and the football event that they won is started.\nsum_of_event_all_team=[]\nfor team in data.Team.unique():\n    sum_of_event_all_team.append(data[(data['Event']=='Football Men\\'s Football')&(data['Team']==team)].Medal.count())\n\nsum_of_event_all_team=pd.DataFrame(sum_of_event_all_team,columns=['Medal_Count_Event'])\nall_team=pd.DataFrame(data.Team.unique(),columns=['Team'])\nall_data_event_team=pd.concat([all_team,sum_of_event_all_team],axis=1)\nall_data_event_team_sorted=all_data_event_team.sort_values(by='Medal_Count_Event',ascending='False')\n\n#Drawings will be made in this section. Also they show the medals they won every year.\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x=all_data_event_team_sorted.Team[1130:1184],y=all_data_event_team_sorted.Medal_Count_Event[1130:1184],color='lime',alpha=0.8)\nplt.text(5,15,'All Team event Medal Count',color='red',fontsize = 20,style = 'italic')\nplt.xlabel('Team',fontsize = 15,color='blue')\nplt.xticks(rotation=90)\nplt.ylabel('Medal Count',fontsize = 15,color='blue')\nplt.title('Medal Count vs All Team',fontsize = 15,color='blue')\nplt.grid()","55a58704":"#data.drop(['Game_Type'],axis=1,inplace=True)\n#data.head()\n#sns.distplot(data['Height'])\n#sns.distplot(data['Weight'])","6c685c1d":"#Number of Male athletes have increased from 2500 to 7500 per summer game since 1896. \n#Female athletes have steep increase in numbers from 2000 in 1980 games to 6000 athletes in 2016 games. \n#The number of women athletes at the Olympic Games is approaching 50 per cent. Since 2012, \n#women have participated in every Olympic sport at the Games. \n#All new sports to be included in the Games must contain women\u2019s events. \n#The IOC has increased the number of women\u2019s events on the Olympic programme, in collaboration with the IFs and the organising committees.\n#Number of athletes in Winter Games are small compared to summer games as expected. \n#The difference in male and female athlete numbers is less compared to Summer Games.\n\ndata.Sport.unique()\ndata.head()\nsum_of_male_athletess_summer=[]\nsum_of_female_athletess_summer=[]\nsum_of_male_athletess_winter=[]\nsum_of_female_athletess_winter=[]\nfor year in data.Year.unique():\n    sum_of_male_athletess_summer.append(data[(data['Season']=='Summer')&(data['Sex']=='M')&(data['Sport']=='Athletics')&(data['Year']==year)].ID.count())\n    sum_of_female_athletess_summer.append(data[(data['Season']=='Summer')&(data['Sex']=='F')&(data['Sport']=='Athletics')&(data['Year']==year)].ID.count())\n    \n    sum_of_male_athletess_winter.append(data[(data['Season']=='Winter')&(data['Sex']=='M')&(data['Sport']=='Athletics')&(data['Year']==year)].ID.count())\n    sum_of_female_athletess_winter.append(data[(data['Season']=='Winter')&(data['Sex']=='F')&(data['Sport']=='Athletics')&(data['Year']==year)].ID.count())\n    \nyear_unique=pd.DataFrame(data.Year.unique(),columns=['Year'])\nsum_of_male_athletess_summer=pd.DataFrame(sum_of_male_athletess_summer,columns=['AthSumSumM'])\nsum_of_female_athletess_summer=pd.DataFrame(sum_of_female_athletess_summer,columns=['AthSumSumF'])\n######################################################################################################\nsum_of_male_athletess_winter=pd.DataFrame(sum_of_male_athletess_winter,columns=['AthWinM'])\nsum_of_female_athletess_winter=pd.DataFrame(sum_of_female_athletess_winter,columns=['AthWinF'])\n\nall_data_summer=pd.concat([year_unique,sum_of_male_athletess_summer],axis=1)\nall_data_summer=pd.concat([all_data_summer,sum_of_female_athletess_summer],axis=1)\n\nall_data_winter=pd.concat([year_unique,sum_of_male_athletess_winter],axis=1)\nall_data_winter=pd.concat([all_data_winter,sum_of_female_athletess_winter],axis=1)\n\nall_data_summer_sorted=all_data_summer.sort_values(by='Year',ascending='False')\nall_data_winter_sorted=all_data_winter.sort_values(by='Year',ascending='False')\n\nyears=['1994','1998','2002','2006','2010','2014']\nall_data_summer_sorted=  all_data_summer.sort_values(by='AthSumSumM',ascending='True')\nall_data_summer_sorted=all_data_summer_sorted[6:] \nall_data_summer_sorted=all_data_summer_sorted.sort_values(by='Year',ascending='True')\nall_data_summer_sorted\n\n#Drawings will be made in this section. Also they show the medals they won every year.\nf,ax1=plt.subplots(figsize=(20,10))\nsns.pointplot(x=all_data_summer_sorted.Year,y=all_data_summer_sorted.AthSumSumM,color='lime',alpha=0.8)\nsns.pointplot(x=all_data_summer_sorted.Year,y=all_data_summer_sorted.AthSumSumF,color='red',alpha=0.8)\nplt.text(5,15,'All Team event Atheletics Count',color='red',fontsize = 20,style = 'italic')\nplt.xlabel('Team',fontsize = 15,color='blue')\nplt.xticks(rotation=90)\nplt.ylabel('Atheletics Count',fontsize = 15,color='blue')\nplt.title('Summer Atheletics Count vs Per Year',fontsize = 15,color='blue')\nplt.grid()","1d11e303":"#All of medal in data show them every country and city.\n#There are Gold,Silver,Bronze medals some countries.\nplt.subplot(3,1,1)\ngold = data[data.Medal == \"Gold\"].Team.value_counts().head(5)\ngold.plot(kind='bar',rot=0,figsize=(20, 10))\nplt.ylabel(\"Gold Medal\")\n\nplt.subplot(3,1,2)\nsilver = data[data.Medal == \"Silver\"].Team.value_counts().head(5)\nsilver.plot(kind='bar',rot=0,figsize=(20, 10))\nplt.ylabel(\"Silver Medal\")\n\nplt.subplot(3,1,3)\nbronze = data[data.Medal == \"Bronze\"].Team.value_counts().head(5)\nbronze.plot(kind='bar',rot=0,figsize=(20, 10))\nplt.ylabel(\"Bronze Medal\")\n\nplt.show()","f1055a35":"data.City.unique()","d8b23614":"#Now we're going to analyze London.\ndr=data[(data['City']=='London')]\ndr","e9bdfd30":"counter_silvermedal=[]\ncounter_goldmedal=[]\ncounter_bronzemedal=[]\nfor sport in dr.Sport.unique():\n    counter_bronzemedal.append(len(dr[(dr['Medal']=='Bronze')&(dr['Sport']==sport)]))\n    counter_silvermedal.append(len(dr[(dr['Medal']=='Silver')&(dr['Sport']==sport)]))\n    counter_goldmedal.append(len(dr[(dr['Medal']=='Gold')&(dr['Sport']==sport)]))\n    ","104837ce":"plt.subplot(3,1,1)\nsns.barplot(x=dr.Sport.unique(),y=counter_bronzemedal,color='red')\nplt.xticks(rotation=90)\n\nplt.subplot(3,1,2)\nsns.barplot(x=dr.Sport.unique(),y=counter_silvermedal,color='blue')\nplt.xticks(rotation=90)\n\nplt.subplot(3,1,3)\nsns.barplot(x=dr.Sport.unique(),y=counter_goldmedal,color='gray')\nplt.xticks(rotation=90)\n\nfig, ax = plt.gcf(), plt.gca()\nfig.set_size_inches(10, 10)\nplt.tight_layout()\n\nplt.show()","e30325a6":"age_mean=[]\nfor year in dr.Year.unique():\n    age_mean.append(sum(dr[dr['Year']==year].Age)\/len(dr[dr['Year']==year].Age))","baf2b387":"age_mean","41ee9400":"dr[dr['Age']==12]\n#oungest player","9a6bb097":"dr[dr['Age']==84]\n#oungest player","ed24239c":"dr[np.logical_and(dr['Age']<84,dr[dr['Age']==12])]\n#oungest player","0c11f536":"**Summary**\nIn this section, we are at the end of the relevant document. This kernel is just eda. This is the first document. On the next days, the kernel will be explained and written in a very detailed way.","82c28a7a":"This project is the first step for my data science studies. I will try to analyze and visualize the data named \"120 years of Olympic history: athletes and results\".\n\n1 Importing Libraries\n2 Loading Data\n3 Data Exploration\n4 Sex\n5 Age\n6 Height\n7 Weight\n8 Height and Weight\n9 Medal Table\n10 Game with Data\n\n<p>Last Updated : <b>11.04.2019<\/b><\/p>\n<p>if you like it, please UPVOTE.<\/p>\n","a84c1413":"**INTRODUCTION**\n\n**Context**\nThis is a historical dataset on the modern Olympic Games, including all the Games from Athens 1896 to Rio 2016.Note that the Winter and Summer Games were held in the same year up until 1992. After that, they staggered them such that Winter Games occur on a four year cycle starting with 1994, then Summer in 1996, then Winter in 1998, and so on. A common mistake people make when analyzing this data is to assume that the Summer and Winter Games have always been staggered.\n\nThe file athlete_events.csv contains 271116 rows and 15 columns. Each row corresponds to an individual athlete competing in an individual Olympic event (athlete-events). The columns are:\n\nID - Unique number for each athlete\nName - Athlete's name\nSex - M or F\nAge - Integer\nHeight - In centimeters\nWeight - In kilograms\nTeam - Team name\nNOC - National Olympic Committee 3-letter code\nGames - Year and season\nYear - Integer\nSeason - Summer or Winter\nCity - Host city\nSport - Sport\nEvent - Event\nMedal - Gold, Silver, Bronze, or NA\n\n**Acknowledgements**\nThe Olympic data on www.sports-reference.com is the result of an incredible amount of research by a group of Olympic history enthusiasts and self-proclaimed 'statistorians'. Check out their blog for more information. All I did was consolidated their decades of work into a convenient format for data analysis.\n\n**Inspiration**\nThis dataset provides an opportunity to ask questions about how the Olympics have evolved over time, including questions about the participation and performance of women, different nations, and different sports and events."}}