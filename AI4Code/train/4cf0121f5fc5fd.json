{"cell_type":{"d45b49a1":"code","677d4914":"code","0dab355d":"code","80070703":"code","76d44cbc":"code","7cfd69f4":"code","caf7700e":"code","34965d95":"code","d55a95aa":"code","3f158759":"code","be1b92f2":"code","59118077":"code","4a50ad71":"code","70d491bf":"code","6608b77d":"code","14273468":"code","8d5ec777":"code","f342dd6a":"code","297747d5":"code","41319347":"code","639150e8":"code","9fe55c9f":"code","087fd860":"code","2bee5cc7":"code","296de722":"code","d814049e":"code","fee61cae":"code","7f25015c":"code","759af4ab":"code","a128a00f":"code","f22520ae":"markdown","b2c5e4f3":"markdown","e75c53c0":"markdown","be828d7d":"markdown","56afa6c3":"markdown","956d291c":"markdown","b37b045c":"markdown","5a146f45":"markdown","99a2b2a4":"markdown","deffceb5":"markdown","d9cf3411":"markdown","f0bf4919":"markdown","d75f71e8":"markdown","cde75673":"markdown","af99e70a":"markdown","0c88da62":"markdown","167fd1d4":"markdown","3c55951d":"markdown","0766133b":"markdown","50a96bbb":"markdown","94306884":"markdown","b0398106":"markdown","a80d27b4":"markdown","e02b3201":"markdown","447131a2":"markdown","6ed5b259":"markdown","f6a4b148":"markdown"},"source":{"d45b49a1":"# Standard imports\nimport os\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import trange\nfrom colorama import Fore\nfrom glob import glob\nimport json\nfrom pprint import pprint\nimport time\nimport cv2\n\n# For Data preparation\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import *\n\n# For building models\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","677d4914":"cfg = {}\ncfg['train_dir'] = \"..\/input\/hackerearths-fast-furious-and-insured-challenge\/dataset\/trainImages\"\ncfg['test_dir'] = \"..\/input\/hackerearths-fast-furious-and-insured-challenge\/dataset\/testImages\"\ncfg['sample_csv'] = \"..\/input\/hackerearths-fast-furious-and-insured-challenge\/dataset\/sample_submission.csv\"\ncfg['test_csv'] = \"..\/input\/hackerearths-fast-furious-and-insured-challenge\/dataset\/test.csv\"\ncfg['train_csv'] = \"..\/input\/hackerearths-fast-furious-and-insured-challenge\/dataset\/train.csv\"\n\npprint(cfg)\n\nDEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nprint(\"\\nCurrent Device\", DEVICE)","0dab355d":"train_csv = pd.read_csv(cfg['train_csv'])\nprint(\"Length of Train Data: \", len(train_csv))\ntrain_csv.sample(10)","80070703":"test_csv = pd.read_csv(cfg['test_csv'])\nprint(\"Length of Test Data: \", len(test_csv))\ntest_csv.sample(10)","76d44cbc":"sample_sub = pd.read_csv(cfg['sample_csv'])\nprint(\"Length of sample Data: \", len(sample_sub))\nsample_sub","7cfd69f4":"train_csv['image_path'] = train_csv['Image_path'].apply(lambda x : cfg['train_dir']+\"\/\"+x)\ntest_csv['image_path'] = test_csv['Image_path'].apply(lambda x : cfg['test_dir']+\"\/\"+x)","caf7700e":"# Check: whether there are any duplicate images !\nprint(f\"Total Images : \", len(os.listdir(cfg['train_dir'])))\nprint(f\"Unique Images Count : \", len(train_csv.Image_path.unique()))","34965d95":"widths = []; heights = []\ntotal_images = list(train_csv.image_path.values) + list(test_csv.image_path.values) \nfor idx in trange(len(total_images), desc = \"Collecting widths and heights...\", bar_format=\"{l_bar}%s{bar:50}%s{r_bar}\" % (Fore.CYAN, Fore.RESET), position = 0, leave = True):\n    cur_path = total_images[idx]\n    h, w, _ = cv2.imread(cur_path).shape\n    widths.append(w)\n    heights.append(h)\n    \nfig = px.histogram(widths)\nfig.update_layout(title = 'Distribution of Image Widths', title_x = 0.5)\nfig.show();","d55a95aa":"fig = px.histogram(heights)\nfig.update_layout(title = 'Distribution of Image heights', title_x = 0.5)\nfig.show();","3f158759":"\"\"\"\nFrom the above plots, I concluded that\nImage's width = 224\nImage's height = 224\n\n\"\"\"\n\n\ncfg['image_size'] = 224\npprint(cfg)","be1b92f2":"fig = px.histogram(train_csv, x = 'Condition', color = 'Condition', barmode = 'group')\nfig.update_layout(\n    title = 'Distribution of Image labels',\n    title_x = 0.5\n)\n\nfig.show();","59118077":"fig = px.histogram(train_csv, x = 'Amount')\nfig.update_layout(\n        title_text = \"Distribution of Amount\",\n        title_x = 0.5,\n)\nfig.show()","4a50ad71":"# For Amount < 0\ntrain_csv.loc[train_csv.Amount < 0]","70d491bf":"# For 15K < Amount < 16K\ntrain_csv.loc[(train_csv.Amount > 15000) & (train_csv.Amount < 16000)]","6608b77d":"# For 20K < Amount < 24K\ntrain_csv.loc[(train_csv.Amount > 20000) & (train_csv.Amount < 24000)]","14273468":"# For 59K < Amount < 60K\ntrain_csv.loc[(train_csv.Amount > 59000) & (train_csv.Amount < 60000)]","8d5ec777":"condition_one = train_csv.loc[train_csv.Condition == 1]\ncondition_zero = train_csv.loc[train_csv.Condition == 0]\n\n\n# For Condition == 1\nplt.figure(figsize=(20,12))\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    \n    img = cv2.imread(condition_one.image_path.values[i])\n    img = cv2.resize(img, (cfg['image_size'], cfg['image_size']))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    plt.axis(\"off\")\n    plt.title('1')\n    plt.imshow(img)\n    \n    \nplt.tight_layout()\nplt.show()","f342dd6a":"# For Condition == 0\nplt.figure(figsize=(20,12))\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    \n    img = cv2.imread(condition_zero.image_path.values[i])\n    img = cv2.resize(img, (cfg['image_size'], cfg['image_size']))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    plt.axis(\"off\")\n    plt.title('0')\n    plt.imshow(img)\n    \n    \nplt.tight_layout()\nplt.show()","297747d5":"fig = px.histogram(train_csv,\n                 x=\"Insurance_company\",\n                 color=\"Condition\",\n                )\n\nfig.update_layout(\n    template = 'ggplot2',\n)\nfig.show()","41319347":"train_csv.info()","639150e8":"# We can see that some of the Columns have NAN values\n# Lets count them\n\ntrain_csv.isnull().sum()","9fe55c9f":"\"\"\"\n\nLets remove the rows having NAN values in Labels\nWe are removing these rows just for our regression task\nWe will still consider those rows for our classification task\n\n\"\"\"\n\nreg_train_csv = train_csv[~train_csv['Amount'].isnull()]\nreg_train_csv.isnull().sum()","087fd860":"# Lets see the NAN values\nreg_nan_rows = reg_train_csv.loc[reg_train_csv['Cost_of_vehicle'].isnull()]\nreg_nan_rows","2bee5cc7":"# Lets deal with rows having NAN values in cost_of_vehicle, min_coverage, max_coverage\nreg_non_nan_rows = reg_train_csv.loc[~reg_train_csv['Cost_of_vehicle'].isnull()]\nreg_non_nan_rows","296de722":"# Strategy to feel NAN values\n\nreg_non_nan_rows['max_min_by_2'] = (reg_non_nan_rows['Max_coverage'] - reg_non_nan_rows['Min_coverage'])\/2\nreg_non_nan_rows['max_plus_min'] = reg_non_nan_rows['Max_coverage'] + reg_non_nan_rows['Min_coverage']\nreg_non_nan_rows['times_max_plus_min'] = 4*reg_non_nan_rows['Max_coverage'] + reg_non_nan_rows['Min_coverage']\n\n# Lets try to find which column has values close to Cost_of_vehicle\nx_values = [d for d in range(1, 1302)]\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['Max_coverage'].values,\n                    mode='lines+markers',\n                    name='Max_coverage'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['Min_coverage'].values,\n                    mode='lines+markers',\n                    name='Min_coverage'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['max_min_by_2'].values,\n                    mode='lines+markers', name='max_min_by_2'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['max_plus_min'].values,\n                    mode='lines+markers', name='max_plus_min'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['Cost_of_vehicle'].values,\n                    mode='lines+markers', name='Cost_of_vehicle'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['times_max_plus_min'].values,\n                    mode='lines+markers', name='times_max_plus_min'))\n\nfig.update_layout(\n    title_text = \"Line plots\",\n    title_x = .5,\n    xaxis_title = \"X_values\",\n    yaxis_title = \"Values\",\n    height = 1024\n)\nfig.show()","d814049e":"max_cost = train_csv['Cost_of_vehicle'].max()\nmax_cost","fee61cae":"reg_non_nan_rows['times_max_plus_min'] = reg_non_nan_rows['times_max_plus_min'].apply(lambda x: min(max_cost, x)) \n\nx_values = [d for d in range(1, 1302)]\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['Cost_of_vehicle'].values,\n                    mode='lines+markers', name='Cost_of_vehicle'))\nfig.add_trace(go.Scatter(x=x_values, y=reg_non_nan_rows['times_max_plus_min'].values,\n                    mode='lines+markers', name='times_max_plus_min'))\n\nfig.update_layout(\n    title_text = \"Line plots\",\n    title_x = .5,\n    xaxis_title = \"X_values\",\n    yaxis_title = \"Values\",\n)\nfig.show()\n              \n    ","7f25015c":"# Lets find the max_coverage by Insurance company\nreg_non_nan_rows.groupby('Insurance_company')['Max_coverage'].max()","759af4ab":"# Lets find the min_coverage by Insurance company\nreg_non_nan_rows.groupby('Insurance_company')['Min_coverage'].max()","a128a00f":"index_vals = train_csv['Condition'].astype('category').cat.codes\n\nfig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='Insurance_company',\n                                 values=train_csv['Insurance_company']),\n                            dict(label='Min_coverage',\n                                 values=train_csv['Min_coverage']),\n                            dict(label='Cost_of_vehicle',\n                                 values=train_csv['Cost_of_vehicle']),\n                            dict(label='Max_coverage',\n                                 values=train_csv['Max_coverage']),\n                            dict(label='Amount',\n                                 values=train_csv['Amount'])],\n                text=train_csv['Condition'],\n                marker=dict(color=index_vals,\n                            showscale=False, # colors encode categorical variables\n                            line_color='red',\n                            line_width=0.5)\n                ))\n\n\nfig.update_layout(\n    title='ScatterMatrix of train_csv',\n    title_x = 0.5,\n    dragmode='select',\n    height=900,\n    hovermode='closest',\n    template = \"plotly_dark\"\n)\n\nfig.show()\n","f22520ae":"## Lets see some of the images of both the classes","b2c5e4f3":"Our output will be evaluated only for 50% of the test data while the contest is running. Once the contest is over, output for the remaining 50% of the data will be evaluated and the final rank will be awarded.","e75c53c0":"You can see both plots overlap over each other closely. So we can use the below formula NAN values in Cost_to_vehicle\n> `Cost_to_vehicle_by_insurance_company = min(4*max_coverage_insurance_company + min_coverage_insurance_company, 53500.0)`","be828d7d":"# Config","56afa6c3":"### Oberservation:\n* Binary Classification problem\n* Highly Imbalanced data\n* Less amount of data\n* Distribution - 0's = 99 & 1's = 1300","956d291c":"So, no duplicate images are present","b37b045c":"# EDA","5a146f45":"<h4>Before, we dive into it, let's understand the defination of Coverage.<\/h4>","99a2b2a4":"## Lets deal with NAN values","deffceb5":"# Importing modules","d9cf3411":"## Lets see how Insurance Company related to condition","f0bf4919":"We can see that 'times_max_plus_min' is very close to Cost_of_vehicle. We can put some cutOffs for this column so that we can control overshoot","d75f71e8":"## First, lets set a fixed size for Images","cde75673":"![insurance.jpeg](attachment:0034507c-695c-4f27-baef-560a0907989e.jpeg)","af99e70a":"### Observations:\n* Some of the images are basically noise for our training data e.g (0, 2) of 0 images, (1, 0) of 1 images etc..\n* Some of them are rotated e.g (4, 1), (1, 0) & (4, 2) of 0 images etc..\n* Some of them contains fine-grainied noise e.g (2, 2) of 0 images etc..","0c88da62":"\nThe followings are the ways to deal with NAN values\n- we can ignore these 87 rows\n- we can find the minimum and maximum coverage by an insurance company and then set up a formula to calculate the Cost_of_vehicle\n- we can simply put mean or median in the NAN values for respective column\n","167fd1d4":"We are given 2 tasks:\n* Condition: Predict if the vehicle provided in the image is damaged or not\n* Amount: Based on the condition of a vehicle, predict the insurance amount of the cars that are provided in\nthe dataset","3c55951d":"<h2><em>If you like this notebook, please give a upvote to this notebook and dataset. Please be patient I will share you <strong style=\"color:cyan;\">training<\/strong> and <strong style=\"color:green;\">inference <\/strong>notebooks shortly...<\/em><\/h2>","0766133b":"# Loading data","50a96bbb":"## Lets see the distribution of labels for our regression task","94306884":"# Points to Note:\n* The Dataset is highly imbalanced for image classification\n* Majority of the Images are of Damaged cars\n* Some of the images can be treated as noise for data\n* Since we have a class imbalance problem with less data, I should suggest to use transfer learning. First, start with VGG16..then, I will go ResNeSt models\n* In the regression task, we should not consider filling the NAN labels with mean and median because that would add error to my final results. Instead I will remove them.\n* I have shown you a formula in which you can fill the NAN values in Cost_of_vehicle wrt to the max and min coverage by the Insurance company\n\n","b0398106":"## Lets plot a scatterMatrix for our numerical columns","a80d27b4":"### Dealing with NAN values of Min-Coverage and Max_Coverage\n","e02b3201":"## Lets see the distribution of Labels for our image data","447131a2":"<p><strong style=\"color:green;\">Insurance Coverage: <\/strong> Insurance coverage is the risk coverage for an individual by way of insurance services. An insurance cover helps an individual or an entity to protect themselves from unforeseen occurrences. It acts as a safety net protecting the policyholder and the family from unexpected situations.<\/p>\n<p><strong style=\"color:tomato;\">How to take insurance : <\/strong>To be covered under insurance, an individual has to pay a small fee monthly or annually for a certain period. In return, the insurance company will pay for the financial damages in case the person or object insured is damaged. By paying a small fee, one can transfer their financial risk to the insurance company.<\/p>\n\n<p><strong style=\"color:cyan;\">Types of Insurance :<\/strong><\/p>\n<ul>\n<li>Life Insurance<\/li>\n<li>Health Insurance<\/li>\n    <li style=\"color:#0099cc;\"><em>Motor Insurance\/ Auto Insurance<\/em><\/li>\n<li>Travel Insurance<\/li>\n<li>Property Insurance<\/li>\n<li>Mobile Insurance<\/li>\n<li>Cycle Insurance<\/li>\n<li>Bite Size Insurance<\/li>\n<\/ul>\n","6ed5b259":"### Observation:\n* Most of the values are constrained between (0, 11K)\n* Some of the values, I guess is ambigous and we can remove them. Below table shows this:\n\n| Range | Count |\n| --- | --- |\n| -1000 to -501 | 1 |\n| 15K to 16K | 1 |\n| 23K to 24K | 1 |\n| 59K to 60K | 1 |\n\n* But before removing them let's see whats the car's condition is for those labels","f6a4b148":"<h4> Here we are dealing with motor life insurance, lets understand what it is<\/h4>\n<h5 style=\"color:#0099cc;\">Motor Insurance<\/h5>\n<ul>\n<li><em>Motor Insurance offers financial assistance in the event of accidents involving bike or car. Car insurance, two-wheeler insurance and commercial vehicle insurance are the different categories of motorised vehicles.<\/em><\/li> \n\n<li><p><em>Following are the benefits of motor insurance:<\/em>\n<ul>\n    <li>Avoids any traffic fines or other legalities<\/li>\n<li>Meets all third-party liabilities. For example, an individual injures a person or damage someone\u2019s property during an accident. The policy helps in addressing the monetary losses.<\/li>\n<li>Provides financial assistance to repair one\u2019s vehicle. Post an accident one doesn\u2019t have to spend large sums of repairs. The policy will help in paying for the expenses.<\/li>\n<\/ul><\/li><\/p>     \n<li><em>Types of motor insurance<\/em>:\n<ul>\n<li><b>Third Party Liability:<\/b> This is the basic type of motor insurance. It is the mandatory requirement for all motorised vehicle owners as per the Motor Vehicles Act of 1988. These policies pay only for the financial liability to the third party due to the said mishap. It also ensures no legal hassles due to the accident. However, it doesn\u2019t cover for vehicle damages of the policyholder.<\/li>\n<li><b>Comprehensive Cover:<\/b> This is a more comprehensive plan than a third-party liability. It offers protection and security to the policyholder. In addition to covering for the third-party liabilities, the plan also covers the vehicle repair expenses. Furthermore, the plan also offers to pay out in case the vehicle sustains man made, natural calamities, riots or damage due to fire.<\/li>\n<li><b>Own Damage Cover:<\/b> It is a specialised form of motor insurance. One is eligible to avail the plan only if they purchased a car or two-wheeler after September 2018. The vehicle has to be brand new and not a second hand one.<\/li><\/ul>\n<\/li>\n\n<\/ul>"}}