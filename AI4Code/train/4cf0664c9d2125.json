{"cell_type":{"9fc0c26a":"code","b39dee54":"code","7633338d":"code","8f7a90a1":"code","cca5ef02":"code","c2164f29":"code","c395e8e1":"code","a603b7a3":"markdown","5aafb782":"markdown","104bf274":"markdown","fc39fa6e":"markdown","f5c0303f":"markdown","8e493f49":"markdown","cb8130a9":"markdown"},"source":{"9fc0c26a":"import cv2\nimport dlib\nimport time\nimport threading\nimport math\nimport numpy as np\n\nfrom IPython.display import display, Image, clear_output\nfrom io import BytesIO\nimport PIL\n%matplotlib inline","b39dee54":"!wget https:\/\/raw.githubusercontent.com\/chuanqi305\/MobileNet-SSD\/master\/voc\/MobileNetSSD_deploy.prototxt","7633338d":"!wget https:\/\/github.com\/PINTO0309\/MobileNet-SSD-RealSense\/raw\/master\/caffemodel\/MobileNetSSD\/MobileNetSSD_deploy.caffemodel","8f7a90a1":"video = cv2.VideoCapture(\"https:\/\/i.rmbl.ws\/s8\/2\/F\/d\/e\/i\/Fdeib.aaa.mp4?u=0&b=0\")","cca5ef02":"ssd = cv2.dnn.readNetFromCaffe(\".\/MobileNetSSD_deploy.prototxt\",\".\/MobileNetSSD_deploy.caffemodel\")","c2164f29":"def estimateSpeed(location1, location2,ppm=8.8,fps=24):\n\td_pixels = math.sqrt(math.pow(location2[0] - location1[0], 2) + math.pow(location2[1] - location1[1], 2))\n\td_meters = d_pixels \/ ppm\n\tfps = 18\n\tspeed = d_meters * fps * 3.6\n\treturn speed","c395e8e1":"def trackMultipleObjects(WIDTH = 1280, HEIGHT = 720):\n\trectangleColor = (0, 255, 0)\n\tframeCounter = 0\n\tcurrentCarID = 0\n\tfps = 0\n\t\n\tcarTracker = {}\n\tcarNumbers = {}\n\tcarLocation1 = {}\n\tcarLocation2 = {}\n\ttracker_info = {}\n\tspeed = [None] * 1000\n    \n# \t_, frame = video.read()\n# \tframe = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n# \tvid_preview=plt.imshow(frame)\n\n\twhile True:\n\t\tstart_time = time.time()\n\t\trc, image = video.read()\n\t\tif type(image) == type(None):\n\t\t\tbreak\n\t\t\n\t\timage = cv2.resize(image, (WIDTH, HEIGHT))\n\t\tresultImage = image.copy()\n\t\t\n\t\tframeCounter = frameCounter + 1\n\t\t\n\t\tcarIDtoDelete = []\n\n\t\tfor carID in carTracker.keys():\n\t\t\ttrackingQuality = carTracker[carID].update(image)\n\t\t\t\n\t\t\tif trackingQuality < 7:\n\t\t\t\tcarIDtoDelete.append(carID)\n\t\t\t\t\n\t\tfor carID in carIDtoDelete:\n\t\t\tprint ('Removing carID ' + str(carID) + ' from list of trackers.')\n\t\t\tcarTracker.pop(carID, None)\n\t\t\tcarLocation1.pop(carID, None)\n\t\t\tcarLocation2.pop(carID, None)\n\t\t\n\t\tif not (frameCounter % 10):\n\t\t\tblob = cv2.dnn.blobFromImage(cv2.resize(image,(300,300)),0.007843,(400,400),(127.5,127.5,127.5),False)\n\t\t\tssd.setInput(blob)\n\t\t\tdetection_ssd = ssd.forward()\n\t\t\tcars=[]\n\n\t\t\tfor i in range(detection_ssd.shape[2]):\n\t\t\t\tconfidence=detection_ssd[0,0,i,2]\n\t\t\t\tif confidence > 0.2:\n\t\t\t\t\tclass_id = int(detection_ssd[0,0,i,1])\n\t\t\t\t\tif class_id in [6,7]:\n\t\t\t\t\t\txLeftBottom = int(detection_ssd[0, 0, i, 3] * 300) \n\t\t\t\t\t\tyLeftBottom = int(detection_ssd[0, 0, i, 4] * 300)\n\t\t\t\t\t\txRightTop   = int(detection_ssd[0, 0, i, 5] * 300)\n\t\t\t\t\t\tyRightTop   = int(detection_ssd[0, 0, i, 6] * 300)\n\t\t\t\t\t\t\n\t\t\t\t\t\theightFactor = image.shape[0]\/300.0  \n\t\t\t\t\t\twidthFactor = image.shape[1]\/300.0 \n\n\t\t\t\t\t\txLeftBottom = int(widthFactor * xLeftBottom) \n\t\t\t\t\t\tyLeftBottom = int(heightFactor * yLeftBottom)\n\t\t\t\t\t\txRightTop   = int(widthFactor * xRightTop)\n\t\t\t\t\t\tyRightTop   = int(heightFactor * yRightTop)\n\t\t\t\t\t\tclass_name = 'car' if class_id == 7 else 'bus'\n\n\t\t\t\t\t\tcars.append([xLeftBottom,yLeftBottom,xRightTop-xLeftBottom,yRightTop-yLeftBottom,confidence,class_name])  \n\n\t\t\tfor (_x, _y, _w, _h, _c, _n) in cars:\n\t\t\t\tx = int(_x)\n\t\t\t\ty = int(_y)\n\t\t\t\tw = int(_w)\n\t\t\t\th = int(_h)\n\t\t\t\tconf = str('%.3f' %_c)\n\t\t\t\tdet_class = str(_n)\n\t\t\t\n\t\t\t\tx_bar = x + 0.5 * w\n\t\t\t\ty_bar = y + 0.5 * h\n\t\t\t\t\n\t\t\t\tmatchCarID = None\n\t\t\t\n\t\t\t\tfor carID in carTracker.keys():\n\t\t\t\t\ttrackedPosition = carTracker[carID].get_position()\n\t\t\t\t\t\n\t\t\t\t\tt_x = int(trackedPosition.left())\n\t\t\t\t\tt_y = int(trackedPosition.top())\n\t\t\t\t\tt_w = int(trackedPosition.width())\n\t\t\t\t\tt_h = int(trackedPosition.height())\n\t\t\t\t\t\n\t\t\t\t\tt_x_bar = t_x + 0.5 * t_w\n\t\t\t\t\tt_y_bar = t_y + 0.5 * t_h\n\t\t\t\t\n\t\t\t\t\tif ((t_x <= x_bar <= (t_x + t_w)) and (t_y <= y_bar <= (t_y + t_h)) and (x <= t_x_bar <= (x + w)) and (y <= t_y_bar <= (y + h))):\n\t\t\t\t\t\tmatchCarID = carID\n\t\t\t\t\n\t\t\t\tif matchCarID is None:\n\t\t\t\t\tprint ('Creating new tracker ' + str(currentCarID))\n\t\t\t\t\t\n\t\t\t\t\ttracker = dlib.correlation_tracker()\n\t\t\t\t\ttracker.start_track(image, dlib.rectangle(x, y, x + w, y + h))\n\t\t\t\t\t\n\t\t\t\t\tcarTracker[currentCarID] = tracker\n\t\t\t\t\tcarLocation1[currentCarID] = [x, y, w, h]\n\t\t\t\t\ttracker_info[currentCarID] = [det_class,conf]\n\t\t\t\t\tcurrentCarID = currentCarID + 1\n\n\n\t\tfor carID in carTracker.keys():\n\t\t\ttrackedPosition = carTracker[carID].get_position()\n\t\t\t\t\t\n\t\t\tt_x = int(trackedPosition.left())\n\t\t\tt_y = int(trackedPosition.top())\n\t\t\tt_w = int(trackedPosition.width())\n\t\t\tt_h = int(trackedPosition.height())\n\t\t\t\n\t\t\tcv2.rectangle(resultImage, (t_x, t_y), (t_x + t_w, t_y + t_h), rectangleColor, 4)\n\t\t\t\n\t\t\tcarLocation2[carID] = [t_x, t_y, t_w, t_h]\n\t\t\n\t\tend_time = time.time()\n\t\t\n\t\tif not (end_time == start_time):\n\t\t\tfps = 1.0\/(end_time - start_time)\n\t\t\n\t\tcv2.putText(resultImage, 'FPS: ' + str(int(fps)), (620, 30),cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 255), 2)\n\n\n\t\tfor i in carLocation1.keys():\t\n\t\t\tif frameCounter % 1 == 0:\n\t\t\t\t[x1, y1, w1, h1] = carLocation1[i]\n\t\t\t\t[x2, y2, w2, h2] = carLocation2[i]\n\n\t\t\t\tcarLocation1[i] = [x2, y2, w2, h2]\n\n\t\t\t\tif [x1, y1, w1, h1] != [x2, y2, w2, h2]:\n\t\t\t\t\tif (speed[i] == None or speed[i] == 0) and y1 >= 275 and y1 <= 285:\n\t\t\t\t\t\tspeed[i] = estimateSpeed([x1, y1, w1, h1], [x2, y2, w2, h2])\n\n\t\t\t\t\tif speed[i] != None and y1 >= 180 and h1 > 100 and h2 > 100:\n\t\t\t\t\t\tcv2.putText(resultImage, tracker_info[i][0] +\"(\"+tracker_info[i][1]+\")\" + str(i) + \": \"+str(int(speed[i])) + \" km\/hr\", (int(x1 + w1\/2), int(y1-5)),cv2.FONT_HERSHEY_SIMPLEX, 0.75, (255, 255, 255), 2)\n\n\t\tframe=cv2.cvtColor(resultImage, cv2.COLOR_BGR2RGB) \n\t\tf = BytesIO()\n\t\tPIL.Image.fromarray(frame).save(f,'jpeg')\n\t\tclear_output(wait=True)\n\t\tdisplay(Image(f.getvalue()))\n\ntrackMultipleObjects()\n","a603b7a3":"## Import the library","5aafb782":"## Download SSD models","104bf274":"<div style=\"background: #e6e6d8 url('https:\/\/dl.dropboxusercontent.com\/s\/t0gu051d08sei65\/bg-retro-noise.png');\n  color: #121212; min-height:500px;\">\n    \n<section style=\"position: absolute;\n  width: 100%;\n  min-width: 500px;\n  text-align: center;\n  top: 50%;\n  margin-top: -155px;\">\n    \n  <h3 style=\"transform: matrix(1, -0.15, 0, 1, 0, 0);\n  -ms-transform: matrix(1, -0.10, 0, 1, 0, 0);\n  -webkit-transform: matrix(1, -0.15, 0, 1, 0, 0);\n  text-transform: uppercase;\n  font-weight: 400;\n  font-size: 70px;\n  text-shadow: 4px 5px #e6e6d8, 6px 7px #c6a39a;\">Traffic Video<\/h3>\n  <h3 style=\"transform: matrix(1, -0.15, 0, 1, 0, 0);\n  -ms-transform: matrix(1, -0.10, 0, 1, 0, 0);\n  -webkit-transform: matrix(1, -0.15, 0, 1, 0, 0);\n  text-transform: uppercase;\n  font-weight: 400;\n  font-size: 70px;\n  text-shadow: 4px 5px #e6e6d8, 6px 7px #c6a39a;\">Speed Detection<\/h3>\n    <p style=\"text-align:center;\">@koayhongvin<\/p>\n<\/section>\n    <\/div>","fc39fa6e":"## Video Source","f5c0303f":"## Estimating Speed","8e493f49":"## SSD Model","cb8130a9":"## Main Function"}}