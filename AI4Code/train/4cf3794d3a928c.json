{"cell_type":{"f931b68b":"code","b0ddaf0e":"code","9fe7ad0f":"code","e055d7c0":"code","38a5ac96":"code","a2b3b78a":"code","1ede0b71":"code","4a3fe9af":"code","6d9113be":"code","7d2b9d22":"code","b1bfe054":"code","95013f73":"code","a9f91a62":"code","e160fab6":"code","4f66389e":"code","5e705123":"code","b49a9cf9":"code","0f8ca70e":"code","da1f9527":"code","b3e4e91b":"code","e6e3a0e0":"code","0cab2a48":"code","e50a3078":"code","5a86ea0e":"code","f51c5d03":"code","2de56b90":"code","6cf4f78e":"code","652253fb":"code","9ba2cbf1":"code","f9479500":"code","c16a54ce":"code","ba0cd036":"code","9abe1eea":"code","815e666c":"code","5a350b90":"code","89d9de36":"code","3ccfe5e6":"code","d7515f99":"code","c0e3ff85":"markdown","1f2a6cf1":"markdown","e3039ec3":"markdown","7f7a2a03":"markdown","6f5f9056":"markdown","7394995d":"markdown","d5bd7ce1":"markdown","0ca37af3":"markdown","a392a33a":"markdown","1c4dce8a":"markdown","42a2bbc7":"markdown","bb22d28b":"markdown","bbd94f87":"markdown","d7d94b5e":"markdown","008625c6":"markdown","217aa3c3":"markdown","f62d5a2a":"markdown","51adf1de":"markdown","8b59609d":"markdown","089971be":"markdown","508e3baa":"markdown","d13970ff":"markdown","7899fcb5":"markdown","2c71a288":"markdown","79389c91":"markdown","4f9af5c3":"markdown","af6aad5e":"markdown","672a3aca":"markdown","92908fd8":"markdown","d62aee11":"markdown","e1f397a7":"markdown","2f2dd005":"markdown","912e8946":"markdown"},"source":{"f931b68b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.display import display, Markdown\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b0ddaf0e":"games = pd.read_csv(\"\/kaggle\/input\/nba-games\/games.csv\")\nteams = pd.read_csv(\"\/kaggle\/input\/nba-games\/teams.csv\")\ngames_details = pd.read_csv(\"\/kaggle\/input\/nba-games\/games_details.csv\")\nplayers = pd.read_csv(\"\/kaggle\/input\/nba-games\/players.csv\")\nranking = pd.read_csv(\"\/kaggle\/input\/nba-games\/ranking.csv\")","9fe7ad0f":"games.columns","e055d7c0":"teams.head()","38a5ac96":"games.info()","a2b3b78a":"games = games.dropna()\n\ngames.info()","1ede0b71":"games.describe()","4a3fe9af":"winning_teams = np.where(games['HOME_TEAM_WINS'] == 1, games['HOME_TEAM_ID'], games['VISITOR_TEAM_ID'])\nwinning_teams = pd.DataFrame(winning_teams, columns=['TEAM_ID'])\nwinning_teams = winning_teams.merge(teams[['TEAM_ID', 'NICKNAME']], on='TEAM_ID')['NICKNAME'].value_counts().to_frame().reset_index()\nwinning_teams.columns = ['TEAM NAME', 'Number of wins']\n\nsns.barplot(winning_teams['Number of wins'], winning_teams['TEAM NAME'])\n\n\n\n## credits to https:\/\/www.kaggle.com\/nathanlauga\/nba-games-eda-let-s-dive-into-the-data","6d9113be":"sns.set_palette(\"rocket\")\n\nplt.hist(games[\"PTS_home\"],bins = int(np.sqrt(len(games[\"PTS_home\"]))))\nplt.xlabel(\"Number of points scored by HOME TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\nmean_ptsh = np.mean(games[\"PTS_home\"])\nstd_ptsh=np.std(games[\"PTS_home\"])\n\nprint (\"mean:\",mean_ptsh,\"std:\",std_ptsh)\n\nplt.hist(games[\"PTS_away\"],bins = int(np.sqrt(len(games[\"PTS_away\"]))))\nplt.xlabel(\"Number of points scored by AWAY TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\nmean_ptsa = np.mean(games[\"PTS_away\"])\nstd_ptsa=np.std(games[\"PTS_away\"])\n\nprint (\"mean:\",mean_ptsa,\"std:\",std_ptsa)","7d2b9d22":"plt.hist(games[\"AST_home\"],bins = int(np.sqrt(len(games[\"AST_home\"]))))\nplt.xlabel(\"Number of assist scored by HOME TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\n\nmean_asth = np.mean(games[\"AST_home\"])\nstd_asth=np.std(games[\"AST_home\"])\n\nprint (\"mean:\",mean_asth,\"std:\",std_asth)\n\nplt.hist(games[\"AST_away\"],bins = int(np.sqrt(len(games[\"AST_away\"]))))\nplt.xlabel(\"Number of assist scored by AWAY TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\n\nmean_asta = np.mean(games[\"AST_away\"])\nstd_asta=np.std(games[\"AST_away\"])\n\nprint (\"mean:\",mean_asta,\"std:\",std_asta)","b1bfe054":"plt.hist(games[\"REB_home\"],bins = int(np.sqrt(len(games[\"REB_home\"]))))\nplt.xlabel(\"Number of rebounds taken by HOME TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\n\nmean_rebh = np.mean(games[\"REB_home\"])\nstd_rebh=np.std(games[\"REB_home\"])\n\nprint (\"mean:\",mean_rebh,\"std:\",std_rebh)\n\nplt.hist(games[\"REB_away\"],bins = int(np.sqrt(len(games[\"REB_away\"]))))\nplt.xlabel(\"Number of rebounds taken by AWAY TEAM\")\nplt.ylabel(\"Number of games \")\nplt.show()\n\nmean_reba = np.mean(games[\"REB_away\"])\nstd_reba=np.std(games[\"REB_away\"])\n\nprint (\"mean:\",mean_reba,\"std:\",std_reba)","95013f73":"def ecdf(data):\n    \n    n = len(data)\n\n    \n    x = np.sort(data)\n\n    \n    y = np.arange(1, 1+n) \/ n\n\n    return x, y\n## credits to datacamp","a9f91a62":"x_ptsh, y_ptsh = ecdf(games[\"PTS_home\"])\nx_ptsh1, y_ptsh1 = ecdf(np.random.normal(mean_ptsh,std_ptsh,size=100000))\nplt.plot(x_ptsh,y_ptsh,marker=\".\",linestyle=\"none\")\nplt.plot(x_ptsh1,y_ptsh1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Points scored by HOME TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n\n\nx_ptsa, y_ptsa = ecdf(games[\"PTS_away\"])\nx_ptsa1, y_ptsa1 = ecdf(np.random.normal(mean_ptsa,std_ptsa,size=100000))\nplt.plot(x_ptsa,y_ptsa,marker=\".\",linestyle=\"none\")\nplt.plot(x_ptsa1,y_ptsa1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Points scored by AWAY TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n\n\n\n","e160fab6":"x_asth, y_asth = ecdf(games[\"AST_home\"])\nx_asth1, y_asth1 = ecdf(np.random.normal(mean_asth,std_asth,size=100000))\nplt.plot(x_asth,y_asth,marker=\".\",linestyle=\"none\")\nplt.plot(x_asth1,y_asth1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Assist scored by HOME TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n\n\nx_asta, y_asta = ecdf(games[\"AST_away\"])\nx_asta1, y_asta1 = ecdf(np.random.normal(mean_asta,std_asta,size=100000))\nplt.plot(x_asta,y_asta,marker=\".\",linestyle=\"none\")\nplt.plot(x_asta1,y_asta1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Assist scored by AWAY TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n","4f66389e":"x_rebh, y_rebh = ecdf(games[\"REB_home\"])\nx_rebh1, y_rebh1 = ecdf(np.random.normal(mean_rebh,std_rebh,size=100000))\nplt.plot(x_rebh,y_rebh,marker=\".\",linestyle=\"none\")\nplt.plot(x_rebh1,y_rebh1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Rebounds taken by HOME TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n\n\nx_reba, y_reba = ecdf(games[\"REB_away\"])\nx_reba1, y_reba1 = ecdf(np.random.normal(mean_reba,std_reba,size=100000))\nplt.plot(x_reba,y_reba,marker=\".\",linestyle=\"none\")\nplt.plot(x_reba1,y_reba1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Rebounds taken by AWAY TEAM\")\nplt.ylabel(\"ECDF\")\nplt.show()\n","5e705123":"years = [2018,2019]\n\ngamestt = games[games[\"SEASON\"].isin(years)]\n\nwinner = gamestt[\"HOME_TEAM_WINS\"]\n\ngamestt = gamestt.drop(columns=[\"TEAM_ID_home\",\"TEAM_ID_away\",\"GAME_STATUS_TEXT\"])\n\n\ngamestt[\"PTS_home\"] = (gamestt[\"PTS_home\"]).astype(int)\ngamestt[\"PTS_away\"] = (gamestt[\"PTS_away\"]).astype(int)\ngamestt[\"AST_home\"] = (gamestt[\"AST_home\"]).astype(int)\ngamestt[\"AST_away\"] = (gamestt[\"AST_away\"]).astype(int)\ngamestt[\"REB_home\"] = (gamestt[\"REB_home\"]).astype(int)\ngamestt[\"REB_away\"] = (gamestt[\"REB_away\"]).astype(int)\n\ngamestt.info()\n","b49a9cf9":"forrep = teams.set_index(\"TEAM_ID\")[\"ABBREVIATION\"].to_dict()\n\nprint(forrep)\n\n\ngamestt[\"HOME_TEAM_ID\"] = gamestt[\"HOME_TEAM_ID\"].replace(forrep)\ngamestt[\"VISITOR_TEAM_ID\"] = gamestt[\"VISITOR_TEAM_ID\"].replace(forrep)\n\n\n\n(gamestt.head())","0f8ca70e":"gamestt[\"GAME_DATE_EST\"]=pd.to_datetime(gamestt[\"GAME_DATE_EST\"])\ngamestts = gamestt.set_index([\"GAME_ID\"])\ngamestts = gamestts.sort_index(axis=0)\ngamestts","da1f9527":"fig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"HOME_TEAM_ID\",y=\"PTS_home\",data=gamestts)\n\n\n\nplt.xlabel(\"HOME TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"PTS SCORED \")\n\n\nplt.show()\n\nfig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"VISITOR_TEAM_ID\",y=\"PTS_away\",data=gamestts)\n\n\n\nplt.xlabel(\"AWAY TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"PTS SCORED \")\n\n\nplt.show()","b3e4e91b":"fig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"HOME_TEAM_ID\",y=\"AST_home\",data=gamestts)\n\n\n\nplt.xlabel(\"HOME TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"AST SCORED \")\n\n\nplt.show()\n\nfig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"VISITOR_TEAM_ID\",y=\"AST_away\",data=gamestts)\n\n\n\nplt.xlabel(\"AWAY TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"AST SCORED \")\n\n\nplt.show()","e6e3a0e0":"fig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"HOME_TEAM_ID\",y=\"REB_home\",data=gamestts)\n\n\n\nplt.xlabel(\"HOME TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REB GRABBED \")\n\n\nplt.show()\n\nfig, ax = plt.subplots()\n\nfig.set_size_inches(11.7, 8.27)\n\nsns.boxplot(x=\"VISITOR_TEAM_ID\",y=\"REB_away\",data=gamestts)\n\n\n\nplt.xlabel(\"AWAY TEAM\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REB GRABBED \")\n\n\nplt.show()","0cab2a48":"def pearson_r(x, y):\n    \"\"\"Compute Pearson correlation coefficient between two arrays.\"\"\"\n    # Compute correlation matrix: corr_mat\n    corr_mat=np.corrcoef(x,y)\n\n    # Return entry [0,1]\n    return corr_mat[0,1]\n","e50a3078":"sns.scatterplot(x=\"PTS_home\",y=\"AST_home\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"POINTS SCORED (HOME TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"ASSIST SCORED (HOME TEAMS)\")\n\nplt.show()\n\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"PTS_home\"],gamestts[\"AST_home\"]))\n\n\nsns.scatterplot(x=\"PTS_away\",y=\"AST_away\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"POINTS SCORED (AWAY TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"ASSIST SCORED (AWAY TEAMS)\")\n\nplt.show()\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"PTS_away\"],gamestts[\"AST_away\"]))","5a86ea0e":"sns.scatterplot(x=\"PTS_home\",y=\"REB_home\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"POINTS SCORED (HOME TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REBOUNDS GRABBED (HOME TEAMS)\")\n\nplt.show()\n\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"PTS_home\"],gamestts[\"REB_home\"]))\n\n\nsns.scatterplot(x=\"PTS_away\",y=\"REB_away\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"POINTS SCORED (AWAY TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REBOUNDS GRABBED (AWAY TEAMS)\")\n\nplt.show()\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"PTS_away\"],gamestts[\"REB_away\"]))","f51c5d03":"sns.scatterplot(x=\"AST_home\",y=\"REB_home\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"ASSIST SCORED (HOME TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REBOUNDS GRABBED (HOME TEAMS)\")\n\nplt.show()\n\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"AST_home\"],gamestts[\"REB_home\"]))\n\n\nsns.scatterplot(x=\"AST_away\",y=\"REB_away\",data=gamestts,alpha=0.5)\n\nplt.xlabel(\"ASSIST SCORED (AWAY TEAMS)\")\nplt.xticks(rotation = 90)\nplt.ylabel(\"REBOUNDS GRABBED (AWAY TEAMS)\")\n\nplt.show()\nprint(\"Pearson correlation coefficient;\",pearson_r(gamestts[\"AST_away\"],gamestts[\"REB_away\"]))","2de56b90":"team_list = teams[\"ABBREVIATION\"]\nresults_dic = {}\nfor i in team_list:\n results_dic[str(i)] = []\n\n\n\nfor i in range(len(gamestts)) : \n  for j in team_list:\n    \n    \n    if (gamestts.iloc[i,1])==j:\n        results_dic[j].append(gamestts.iloc[i,:])\n    elif (gamestts.iloc[i,2])==j:\n        results_dic[j].append(gamestts.iloc[i,:])","6cf4f78e":"results = {}\n\nfor i in team_list : \n    results[i]=pd.DataFrame(results_dic[i])  \n  \n    \n(results[\"LAL\"])\n","652253fb":"sns.set(style=\"darkgrid\")\n\nplot_list=[\"PTS_home\",\"AST_home\",\"REB_home\",\"PTS_away\",\"AST_away\",\"REB_away\"]\n\nfig, axes =plt.subplots(2,3, figsize=(25,10), sharex=True)\n\nfor j in range(2):\n    for i,ax in enumerate(axes.flat):\n        \n        sns.boxplot(x=\"HOME_TEAM_WINS\",y=plot_list[i], data=gamestts, ax=ax)","9ba2cbf1":"for i in range(6):\n    print(\"Pcorrcoef between HOME_TEAM_WINS and\", plot_list[i],pearson_r(gamestts[\"HOME_TEAM_WINS\"],gamestts[plot_list[i]]) )\n\n    \nprint(\"percentage of times where the HOME TEAM WON between 2016 and 2018 ?: A:\/\/\", np.mean(gamestts[\"HOME_TEAM_WINS\"]))    ","f9479500":"results_home = {}\nresults_away = {}\n\nfor i in team_list:\n results_home[str(i)] =[]\n results_away[str(i)] =[]\n\nfor i in team_list : \n    for j in range(len(results[i])):\n        if results[i].iloc[j,1]== i :\n            results_home[i].append(results[i].iloc[j,:])\n        elif results[i].iloc[j,2]== i :\n            results_away[i].append(results[i].iloc[j,:])","c16a54ce":"results_homedf = {}\nresults_awaydf = {}\n\nfor i in team_list : \n    results_homedf[i]=pd.DataFrame(results_home[i])  \n    results_awaydf[i]=pd.DataFrame(results_away[i])\n  ","ba0cd036":"sns.set_palette(\"Paired\")\n\nfig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot( y=\"PTS_home\", data=results_homedf[\"LAL\"], ax=axes[0])\nsns.boxplot( y=\"PTS_away\", data=results_homedf[\"LAL\"], ax=axes[1])\n\nfig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot( y=\"AST_home\", data=results_homedf[\"LAL\"], ax=axes[0])\nsns.boxplot( y=\"AST_away\", data=results_homedf[\"LAL\"], ax=axes[1])\n\nfig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot(y=\"REB_home\", data=results_homedf[\"LAL\"], ax=axes[0])\nsns.boxplot(y=\"REB_away\", data=results_homedf[\"LAL\"], ax=axes[1])","9abe1eea":"fig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot( y=\"PTS_home\", data=results_awaydf[\"TOR\"], ax=axes[0])\nsns.boxplot( y=\"PTS_away\", data=results_awaydf[\"TOR\"], ax=axes[1])\n\nfig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot( y=\"AST_home\", data=results_awaydf[\"TOR\"], ax=axes[0])\nsns.boxplot( y=\"AST_away\", data=results_awaydf[\"TOR\"], ax=axes[1])\n\nfig, axes =plt.subplots(1,2, figsize=(10,4), sharex=True)\n\nsns.boxplot(y=\"REB_home\", data=results_awaydf[\"TOR\"], ax=axes[0])\nsns.boxplot(y=\"REB_away\", data=results_awaydf[\"TOR\"], ax=axes[1])","815e666c":"sns.set_palette(\"rocket\")\n\nsns.kdeplot(results_homedf[\"LAL\"][\"PTS_home\"])\nplt.xlabel(\"Number of points scored by LAL WHEN HOME\")\nplt.ylabel(\"Number of games \")\nplt.show()\nmean_ptsh = np.mean(results_homedf[\"LAL\"][\"PTS_home\"])\nstd_ptsh=np.std(results_homedf[\"LAL\"][\"PTS_home\"])\n\nprint (\"mean:\",mean_ptsh,\"std:\",std_ptsh)\n\nsns.kdeplot(results_awaydf[\"TOR\"][\"PTS_away\"])\nplt.xlabel(\"Number of points scored by TOR WHEN AWAY\")\nplt.ylabel(\"Number of games \")\nplt.show()\nmean_ptsa = np.mean(results_awaydf[\"TOR\"][\"PTS_away\"])\nstd_ptsa=np.std(results_awaydf[\"TOR\"][\"PTS_away\"])\n\nprint (\"mean:\",mean_ptsa,\"std:\",std_ptsa)","5a350b90":"x_ptsh, y_ptsh = ecdf(results_homedf[\"LAL\"][\"PTS_home\"])\nx_ptsh1, y_ptsh1 = ecdf(np.random.normal(mean_ptsh,std_ptsh,size=100000))\nplt.plot(x_ptsh,y_ptsh,marker=\".\",linestyle=\"none\")\nplt.plot(x_ptsh1,y_ptsh1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Points scored by LAL WHEN HOME\")\nplt.ylabel(\"ECDF\")\nplt.show()\n\n\nx_ptsa, y_ptsa = ecdf(results_awaydf[\"TOR\"][\"PTS_away\"])\nx_ptsa1, y_ptsa1 = ecdf(np.random.normal(mean_ptsa,std_ptsa,size=100000))\nplt.plot(x_ptsa,y_ptsa,marker=\".\",linestyle=\"none\")\nplt.plot(x_ptsa1,y_ptsa1,marker=\".\",linestyle=\"none\")\nplt.xlabel(\"Points scored by TOR WHEN AWAY\")\nplt.ylabel(\"ECDF\")\nplt.show()","89d9de36":"LAL_WINS = 0\n\nmean_ptsh = np.mean(results_homedf[\"LAL\"][\"PTS_home\"])\nstd_ptsh = np.std(results_homedf[\"LAL\"][\"PTS_home\"])\nmean_ptsh1 = np.mean(results_homedf[\"LAL\"][\"PTS_away\"])\nstd_ptsh1 = np.std(results_homedf[\"LAL\"][\"PTS_away\"])\nmean_ptsa = np.mean(results_awaydf[\"TOR\"][\"PTS_away\"])\nstd_ptsa=np.std(results_awaydf[\"TOR\"][\"PTS_away\"])\nmean_ptsa1 = np.mean(results_awaydf[\"TOR\"][\"PTS_home\"])\nstd_ptsa1=np.std(results_awaydf[\"TOR\"][\"PTS_home\"])\n\n\nPoints_LAL = (np.random.normal(mean_ptsh,std_ptsh,size=100000)+np.random.normal(mean_ptsh1,std_ptsh1,size=100000))\/2\nPoints_TOR = (np.random.normal(mean_ptsa,std_ptsa,size=100000)+np.random.normal(mean_ptsa1,std_ptsa1,size=100000))\/2\n\nfor i in range(100000):\n    \n    if Points_LAL[i] > Points_TOR[i]:\n        \n        LAL_WINS = LAL_WINS + 1\n    \n    \nLAL_WINPER = LAL_WINS\/100000  \n\nprint(LAL_WINPER*100)\n","3ccfe5e6":"def gamesim(HOMEID,AWAYID):\n\n H_WINS = 0\n\n mean_ptsh = np.mean(results_homedf[HOMEID][\"PTS_home\"])\n std_ptsh = np.std(results_homedf[HOMEID][\"PTS_home\"])\n mean_ptsh1 = np.mean(results_homedf[HOMEID][\"PTS_away\"])\n std_ptsh1 = np.std(results_homedf[HOMEID][\"PTS_away\"])\n mean_ptsa = np.mean(results_awaydf[AWAYID][\"PTS_away\"])\n std_ptsa=np.std(results_awaydf[AWAYID][\"PTS_away\"])\n mean_ptsa1 = np.mean(results_awaydf[AWAYID][\"PTS_home\"])\n std_ptsa1=np.std(results_awaydf[AWAYID][\"PTS_home\"])\n\n\n Points_H = (np.random.normal(mean_ptsh,std_ptsh,size=100000)+np.random.normal(mean_ptsh1,std_ptsh1,size=100000))\/2\n Points_A = (np.random.normal(mean_ptsa,std_ptsa,size=100000)+np.random.normal(mean_ptsa1,std_ptsa1,size=100000))\/2\n\n for i in range(100000):\n    \n      if Points_H[i] > Points_A[i]:\n        \n          H_WINS = H_WINS + 1\n    \n    \n H_WINPER = (H_WINS\/100000)*100  \n\n return H_WINPER","d7515f99":"gamesim(\"GSW\",\"MEM\")","c0e3ff85":"The result is the probability that the Home team wins the match","1f2a6cf1":"Here, I'll use a normal distriubution to simulate multiple games when LAL is home team and TOR is away team, I'll explore the probability that each team has to win the game.\n\nEach teams points will be conformed 50% by the points it scores and 50% by the points it receives given the home\/away condition","e3039ec3":"**********Replacing TEAM_ID with the ABBREVIATION**\n\nThis is because ABBREVIATION is much more used in the basketball enviroment","7f7a2a03":"CDFs don't overlap perfectly but we can conclude, based on both KDE plot and CDF analysis that the distributions of points when LAL is home and TOR is away are both normal","6f5f9056":"# TORONTO RAPTORS","7394995d":"# **Going to take a span of data for the 2019 season, since NBA teams tend to change significantlly each year.**\n\nAlso going to do some feature engineering","d5bd7ce1":"# **relationship between assist and rebounds**","0ca37af3":"# **Here, I'll define a function to simulate any game **","a392a33a":"> # Next 3 code lines are data exploring, to see how the data is distributed and what kind of variables we're dealing with","1c4dce8a":"Same with the Assits, they are normally distributed","42a2bbc7":"# **GAME SIMULATION**","bb22d28b":"# **Univariate analysis**","bbd94f87":"# **Im going to make dictionaries with the data that I organized in the last code, same as I did earlier**","d7d94b5e":"# Here I'm going to plot the relationship between HOME_TEAM_WINS and PTS,AST and REB scored by each team. Later we will see their correlation","008625c6":"# LOS ANGELES LAKERS\n\nHere I\u00b4ll analyze LAL's behavior in home matches. How many points, assist and rebounds they get and grant. Same will be done with the TOR but analyzing their away matches","217aa3c3":"Fist of all: Import data","f62d5a2a":"# **Boxplot of points scored by each team**","51adf1de":"# **Boxplot of number of assist scored by each team**","8b59609d":"this is data for all the time between 2003 and 2019. NBA teams change a lot through seasons, but a 2 year model should be a little more reliable than making a model based in the whole time. ","089971be":"# Here, I'll use dropna to clean the data, I will do it this way because there are not a lot of missing values.","508e3baa":"# **Here, the relationship between points and assist scored will be explored**","d13970ff":"# **Thank you very much ! If you found this valuable, please upvote it. And if you use my code, a thank you and a mention would be much appreciated !**","7899fcb5":"# **relationship between points and rebounds**","2c71a288":"Same with Rebounds, they are normally distributed","79389c91":"# **Now Im gonna divide every teams points, rebounds and assists for home and away matches **","4f9af5c3":"# **Boxplot of number of rebounds taken by each team**","af6aad5e":"# This code will return a dictionary filled with data frames with each teams games","672a3aca":"all the distributions seem normal, thus Im going to plot theorical and empirical cdfs to confirm if they are normal","92908fd8":"As we can see here, both cdfs overlap, so we can conclude the NBA points are normally distributed","d62aee11":"*Here, I'll plot the teams with the most games won in the time between 2003 and 2019","e1f397a7":"# **Here, I'll be analizyng a match up between 2 teams (Los Angeles Lakers and Toronto Raptors) I selected these two because they are my favorite teams**","2f2dd005":"# we have data from season 2003 to 2019","912e8946":"# **Here I\u00b4m going to code an ecdf function**"}}