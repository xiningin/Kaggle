{"cell_type":{"5d62a7fe":"code","31a4b6d9":"code","724af808":"code","ede2bdc6":"code","71323c51":"code","87aa98a3":"code","db28c366":"code","36ea3b2d":"code","70516ba6":"code","f661200b":"code","5209bedc":"code","61a15cf4":"code","02fed7e0":"code","95d980a8":"code","f3d484cc":"code","8e750b4e":"code","51eb178b":"code","bbc9ec34":"code","e59a6929":"code","c7d8dc98":"code","e5667012":"code","5b94362e":"markdown","5505a4a5":"markdown","57b36041":"markdown","5ff7a09a":"markdown","1aa6ce53":"markdown","f6dd34be":"markdown","b009022e":"markdown"},"source":{"5d62a7fe":"import riiideducation\nimport pandas as pd\n\nenv = riiideducation.make_env()","31a4b6d9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","724af808":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=10**5, \n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )\ntrain_df","ede2bdc6":"users = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', sep=',', usecols=['user_id', 'timestamp'], squeeze=True)\n#this takes few minutes - reading in the entire set of users","71323c51":"users_with_latest_ts = users.groupby('user_id')['timestamp'].max()\n#get the latest timestamp for all train users","87aa98a3":"#create set for comparision to the test set\nuser_set = set(users.user_id.unique())\nlen(user_set)","db28c366":"questions_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')","36ea3b2d":"questions_df.question_id.max() + 1 == questions_df.shape[0] \nquestions_df.shape[0]","70516ba6":"iter_test = env.iter_test()","f661200b":"(test_df, sample_prediction_df) = next(iter_test)\ntest_df","5209bedc":"#get users and timestamps\ntest_users_and_ts = test_df[['user_id','timestamp']]\ntest_users_and_ts.shape","61a15cf4":"#work with sets to create a set of unique users and questions returned by test API\nquestion_ids = set(test_df.content_id.unique())\nnew_ids = set(test_df.content_id.unique())\nquestion_ids = question_ids.union(new_ids)\n\nuser_ids = set(test_df.user_id.unique())\nnew_users = set(test_df.user_id.unique())\nuser_ids = user_ids.union(new_users)","02fed7e0":"env.predict(sample_prediction_df)","95d980a8":"for (test_df, sample_prediction_df) in iter_test:\n    new_ids = set(test_df.content_id.unique())\n    question_ids = question_ids.union(new_ids)\n    \n    new_users = set(test_df.user_id.unique())\n    user_ids = user_ids.union(new_users)\n    \n    print(\"Length of test set {}, unique users {}\".format(len(test_df), len(new_ids)))\n    \n    test_users_and_ts_i = test_df[['user_id','timestamp']]\n    test_users_and_ts = pd.concat([test_users_and_ts,test_users_and_ts_i])\n    #print(test_users_and_ts.shape)\n    \n    test_df['answered_correctly'] = 0.5\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","f3d484cc":"test_set_min_ts = test_users_and_ts.groupby('user_id')['timestamp'].min().reset_index()","8e750b4e":"df = pd.merge(users_with_latest_ts,test_set_min_ts, on = 'user_id')","51eb178b":"if any(df['timestamp_y'] < df['timestamp_x']): \n    print(\"USER INTERACTION IN TEST SET HAS HAPPENED _BEFORE_ THE LATEST INTERACTION IN TRAIN SET. TIME MIXUP DETECTED\")\nelse:\n    print(\"ALL CLEAR, TEST SET ACTIONS FOLLOWED TRAIN SET ACTIONS FOR ANY GIVEN USER WHO WAS PRESENT IN BOTH\")","bbc9ec34":"print(user_ids - user_set, \"these users are new\")","e59a6929":"print(question_ids - set(questions_df.question_id), \"these questions are new\")","c7d8dc98":"new_users_are_really_new = test_users_and_ts[test_users_and_ts.user_id.isin(user_ids - user_set)].groupby('user_id')['timestamp'].min().reset_index()\nif new_users_are_really_new.timestamp.max() > 0:\n    print(\"new user detected in test who is not really new! (timestamp is not 0)\")\n    print(new_users_are_really_new[new_users_are_really_new.timestamp>0])\nelse:\n    print(\"ALL CLEAR. NEW USERS IN TEST ARE INDEED NEW - test contains their first interaction and possibly more\")","e5667012":"new_users_are_really_new","5b94362e":"There are 393656 unique users in train set. We will later compare if test API returns any new users, not already present in train.","5505a4a5":"## Main Loop\nLet's loop through all the remaining batches in the test set generator and make the default prediction for each. \n\nLet's store all users, timestamps, content_id (questions) and check them for novelty.","57b36041":"There are 13523 unique questions in questions.cvs. We will later check if test API returns any new questions. ","5ff7a09a":"Let's get the data for the first test batch and check it out.","1aa6ce53":"## Investigation into some potential properties of test set.\nInspired by [this](https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/188899) discussion.\n* are there any new questions in test (NO)\n* are there any new users in test (YES - new users with timestamp 0)\n* timeframe of test set? (FOLLOWING TRAIN for any given user)","f6dd34be":"## Iterate through example test set. \n\nFollowing example notebook, getting the example test set. ","b009022e":"### Training data is in the competition dataset as usual\nIt's larger than will fit in memory with default settings, so we'll specify more efficient datatypes and only load a subset of the data for now."}}