{"cell_type":{"48e9361c":"code","6e13e421":"code","c9e6f0df":"code","ae9d0443":"code","476f365d":"code","ff7e90f5":"code","ea8b34f0":"code","a982a2e9":"code","90ced8a9":"code","8530bcb1":"code","c6b75f96":"code","226ee64b":"code","86117cdf":"code","17259fe9":"code","4cf5973f":"code","209b8ea9":"code","6056180b":"code","90367e03":"code","bc7dfc6c":"code","7d836057":"code","8e314a5d":"code","9a3af0c0":"code","19e6c85b":"code","f3c800f9":"code","917129ad":"code","3aa58033":"code","1c22c3ee":"markdown","d899f504":"markdown","bda6ae72":"markdown","922cbdea":"markdown","ead35f3f":"markdown","297c43c2":"markdown","a4aa93b8":"markdown","43911dff":"markdown","a3ab7fb4":"markdown","39008ac5":"markdown","722973f7":"markdown","f9896e86":"markdown"},"source":{"48e9361c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom skimage.io import imread as imread\nfrom skimage.transform import resize as resize\nfrom glob import glob\nfrom tqdm import tqdm\nimport cv2\nimport gc\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom torch.autograd import Variable\n\nfrom albumentations import Compose, ShiftScaleRotate, Rotate, RandomScale\n\nimport matplotlib.pyplot as plt\nimport seaborn\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6e13e421":"image_paths = glob(os.path.join('..', 'input', 'pulmonary-chest-xray-abnormalities', 'Montgomery', 'MontgomerySet', 'CXR_png', '*.png'))","c9e6f0df":"images_with_masks_paths = [(image_path,\n                      os.path.join('\/'.join(image_path.split('\/')[:-2]), 'ManualMask', 'leftMask', os.path.basename(image_path)), \n                      os.path.join('\/'.join(image_path.split('\/')[:-2]), 'ManualMask', 'rightMask', os.path.basename(image_path))) for image_path in image_paths]","ae9d0443":"images_with_masks_paths[0]","476f365d":"cv2.imread(images_with_masks_paths[40][0]).shape","ff7e90f5":"OUT_DIM = (512, 512)","ea8b34f0":"def image_from_path(path):\n    img = resize(imread(path), OUT_DIM, mode='constant')\n    return img\n\ndef mask_from_paths(path1, path2):\n    img = resize(cv2.bitwise_or(imread(path1), imread(path2)), OUT_DIM, mode='constant')\n    return img","a982a2e9":"images = []\nmasks = []\n\nfor mri, left_lung, right_lung in tqdm(images_with_masks_paths, position=0, leave=True):\n    images.append(image_from_path(mri))\n    masks.append(mask_from_paths(left_lung, right_lung))","90ced8a9":"def random_plot(images, masks, number):\n    indices = np.random.choice(len(images), number)\n    fig, axis = plt.subplots(nrows=number, ncols=3, figsize=(20, 20))\n\n    for i, index in enumerate(indices):\n        img = images[index]\n        mask = masks[index]\n\n        axis[i][0].imshow(img, cmap='gray')\n        axis[i][1].imshow(mask, cmap='gray')\n        axis[i][2].imshow(cv2.addWeighted(img, 1.0, mask, 0.7, 1), cmap='gray')\n\n    plt.tight_layout()\n    \n# random_plot(images, masks, 4)","8530bcb1":"transform = Compose([\n    ShiftScaleRotate(rotate_limit=15, always_apply=True)\n])","c6b75f96":"transformed_images = []\ntransformed_masks = []\n\nfor image, mask in zip(images, masks):\n    sample = {'image': image.copy(), 'mask': mask.copy()}\n    out = transform(**sample)\n    transformed_images.append(out['image'])\n    transformed_masks.append(out['mask'])","226ee64b":"# random_plot(transformed_images, transformed_masks, 4)","86117cdf":"from sklearn.model_selection import train_test_split\n\nimage_dataset = images.copy() + transformed_images\nmask_dataset = masks.copy() + transformed_masks\n\nX_train, X_val, y_train, y_val = train_test_split(image_dataset, mask_dataset, test_size=0.2)","17259fe9":"from sklearn.preprocessing import StandardScaler\n\nscaler_X = StandardScaler()\nscaler_y = StandardScaler()\n\nX_train = scaler_X.fit_transform(np.array(X_train).reshape(-1, 512 * 512)).reshape(-1, 512, 512)\n# y_train = scaler_y.fit_transform(np.array(y_train).reshape(-1, 512 * 512)).reshape(-1, 512, 512)\n\nX_val = scaler_X.transform(np.array(X_val).reshape(-1, 512 * 512)).reshape(-1, 512, 512)\n# y_val = scaler_y.transform(np.array(y_val).reshape(-1, 512 * 512)).reshape(-1, 512, 512)","4cf5973f":"batch_size = 4\n\ntrain_ds = TensorDataset(torch.tensor(X_train), torch.tensor(y_train))\nval_ds = TensorDataset(torch.tensor(X_val), torch.tensor(y_val))\n\ntrain_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=4)\nval_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=4)","209b8ea9":"# ref: https:\/\/github.com\/jvanvugt\/pytorch-unet\n#      https:\/\/github.com\/jaxony\/unet-pytorch\n\ndef conv1x1(in_channels, out_channels, groups=1):\n    return nn.Conv2d(in_channels,\n                     out_channels,\n                     kernel_size=1,\n                     groups=groups,\n                     stride=1)\n\ndef conv3x3(in_channels, out_channels, stride=1, padding=1, bias=True, groups=1):\n    return nn.Conv2d(in_channels,\n                     out_channels,\n                     kernel_size=3,\n                     stride=stride,\n                     padding=padding,\n                     bias=bias,\n                     groups=groups)\n\ndef upconv2x2(in_channels, out_channels, mode='transpose'):\n    if mode == 'transpose':\n        return nn.ConvTranspose2d(in_channels,\n                                  out_channels,\n                                  kernel_size=2,\n                                  stride=2)\n    else:\n        return nn.Sequential(\n            nn.Upsample(mode='bilinear', scale_factor=2),\n            conv1x1(in_channels, out_channels))","6056180b":"class DownConv(nn.Module):\n    \"\"\"\n    A helper Module that performs 2 convolutions and 1 MaxPool.\n    A ReLU activation follows each convolution.\n    \"\"\"\n    def __init__(self, in_channels, out_channels, pooling=True):\n        super(DownConv, self).__init__()\n\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.pooling = pooling\n\n        self.conv1 = conv3x3(self.in_channels, self.out_channels)\n        self.conv2 = conv3x3(self.out_channels, self.out_channels)\n\n        if self.pooling:\n            self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        before_pool = x\n        if self.pooling:\n            x = self.pool(x)\n        return x, before_pool\n\nclass UpConv(nn.Module):\n    \"\"\"\n    A helper Module that performs 2 convolutions and 1 UpConvolution.\n    A ReLU activation follows each convolution.\n    \"\"\"\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 merge_mode='concat',\n                 up_mode='transpose'):\n        super(UpConv, self).__init__()\n\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.merge_mode = merge_mode\n        self.up_mode = up_mode\n\n        self.upconv = upconv2x2(self.in_channels,\n                                self.out_channels,\n                                mode=self.up_mode)\n\n        if self.merge_mode == 'concat':\n            self.conv1 = conv3x3(2*self.out_channels,\n                                 self.out_channels)\n        else:\n            # num of input channels to conv2 is same\n            self.conv1 = conv3x3(self.out_channels, self.out_channels)\n\n        self.conv2 = conv3x3(self.out_channels, self.out_channels)\n\n    def forward(self, from_down, from_up):\n        \"\"\" Forward pass\n        Arguments:\n            from_down: tensor from the encoder pathway\n            from_up: upconv'd tensor from the decoder pathway\n        \"\"\"\n        from_up = self.upconv(from_up)\n        if self.merge_mode == 'concat':\n            x = torch.cat((from_up, from_down), 1)\n        else:\n            x = from_up + from_down\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        return x","90367e03":"class UNet(nn.Module):\n    \"\"\" `UNet` class is based on https:\/\/arxiv.org\/abs\/1505.04597\n    The U-Net is a convolutional encoder-decoder neural network.\n    Contextual spatial information (from the decoding,\n    expansive pathway) about an input tensor is merged with\n    information representing the localization of details\n    (from the encoding, compressive pathway).\n    Modifications to the original paper:\n    (1) padding is used in 3x3 convolutions to prevent loss\n        of border pixels\n    (2) merging outputs does not require cropping due to (1)\n    (3) residual connections can be used by specifying\n        UNet(merge_mode='add')\n    (4) if non-parametric upsampling is used in the decoder\n        pathway (specified by upmode='upsample'), then an\n        additional 1x1 2d convolution occurs after upsampling\n        to reduce channel dimensionality by a factor of 2.\n        This channel halving happens with the convolution in\n        the tranpose convolution (specified by upmode='transpose')\n    \"\"\"\n\n    def __init__(self, num_classes, in_channels=3, depth=5,\n                 start_filts=64, up_mode='transpose',\n                 merge_mode='concat'):\n        \"\"\"\n        Arguments:\n            in_channels: int, number of channels in the input tensor.\n                Default is 3 for RGB images.\n            depth: int, number of MaxPools in the U-Net.\n            start_filts: int, number of convolutional filters for the\n                first conv.\n            up_mode: string, type of upconvolution. Choices: 'transpose'\n                for transpose convolution or 'upsample' for nearest neighbour\n                upsampling.\n        \"\"\"\n        super(UNet, self).__init__()\n\n        if up_mode in ('transpose', 'upsample'):\n            self.up_mode = up_mode\n        else:\n            raise ValueError(\"\\\"{}\\\" is not a valid mode for \"\n                             \"upsampling. Only \\\"transpose\\\" and \"\n                             \"\\\"upsample\\\" are allowed.\".format(up_mode))\n\n        if merge_mode in ('concat', 'add'):\n            self.merge_mode = merge_mode\n        else:\n            raise ValueError(\"\\\"{}\\\" is not a valid mode for\"\n                             \"merging up and down paths. \"\n                             \"Only \\\"concat\\\" and \"\n                             \"\\\"add\\\" are allowed.\".format(up_mode))\n\n        # NOTE: up_mode 'upsample' is incompatible with merge_mode 'add'\n        if self.up_mode == 'upsample' and self.merge_mode == 'add':\n            raise ValueError(\"up_mode \\\"upsample\\\" is incompatible \"\n                             \"with merge_mode \\\"add\\\" at the moment \"\n                             \"because it doesn't make sense to use \"\n                             \"nearest neighbour to reduce \"\n                             \"depth channels (by half).\")\n\n        self.num_classes = num_classes\n        self.in_channels = in_channels\n        self.start_filts = start_filts\n        self.depth = depth\n\n        self.down_convs = []\n        self.up_convs = []\n\n        # create the encoder pathway and add to a list\n        for i in range(depth):\n            ins = self.in_channels if i == 0 else outs\n            outs = self.start_filts*(2**i)\n            pooling = True if i < depth-1 else False\n\n            down_conv = DownConv(ins, outs, pooling=pooling)\n            self.down_convs.append(down_conv)\n\n        # create the decoder pathway and add to a list\n        # - careful! decoding only requires depth-1 blocks\n        for i in range(depth-1):\n            ins = outs\n            outs = ins \/\/ 2\n            up_conv = UpConv(ins, outs, up_mode=up_mode,\n                merge_mode=merge_mode)\n            self.up_convs.append(up_conv)\n\n        self.conv_final = conv1x1(outs, self.num_classes)\n\n        # add the list of modules to current module\n        self.down_convs = nn.ModuleList(self.down_convs)\n        self.up_convs = nn.ModuleList(self.up_convs)\n\n        self.reset_params()\n\n    @staticmethod\n    def weight_init(m):\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal_(m.weight)\n            nn.init.constant_(m.bias, 0)\n\n\n    def reset_params(self):\n        for i, m in enumerate(self.modules()):\n            self.weight_init(m)\n\n    def forward(self, x):\n        encoder_outs = []\n\n        # encoder pathway, save outputs for merging\n        for i, module in enumerate(self.down_convs):\n            x, before_pool = module(x)\n            encoder_outs.append(before_pool)\n\n        for i, module in enumerate(self.up_convs):\n            before_pool = encoder_outs[-(i+2)]\n            x = module(before_pool, x)\n\n        # No softmax is used. This means you need to use\n        # nn.CrossEntropyLoss is your training script,\n        # as this module includes a softmax already.\n        x = self.conv_final(x)\n        return x","bc7dfc6c":"lr = 0.0001\n\nmodel = UNet(2, depth=5, start_filts=64, in_channels=1).cuda()\ncritertion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=lr)","7d836057":"torch.cuda.empty_cache()\ngc.collect()","8e314a5d":"loss_history = []\nepochs = 50\n\nfor epoch in range(epochs):  # loop over the dataset multiple times\n    running_loss = 0.0\n    for i, (images, labels) in enumerate(train_loader, 0):\n        inputs = Variable(images.view(batch_size, 1, 512, 512)).cuda()\n        labels = Variable(np.round(labels).view(batch_size, 512, 512)).cuda()\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = model(inputs.float())\n        loss = critertion(outputs, labels.long())\n        loss.backward()\n        optimizer.step()\n        \n        # print statistics\n        running_loss += loss.item()\n        loss_history.append(loss.item())\n        if i % 10 == 9:    # print every 10 mini-batches\n            print('[%d, %5d] loss: %.10f' %\n                  (epoch + 1, i + 1, running_loss \/ 10))\n            running_loss = 0.0\n\nprint('Finished Training')","9a3af0c0":"fig = plt.figure(figsize=(10, 6))\nplt.plot(list(range(len(loss_history))), loss_history)","19e6c85b":"torch.save(model, '.\/model_e50_lr0.0002.ser')","f3c800f9":"pred = []\nwith torch.no_grad():\n    for sample, label in zip(X_val, y_val):\n        pred += model(Variable(torch.Tensor(sample)).view(1, 1, 512, 512).cuda())","917129ad":"indices = np.random.choice(len(X_val), 5)\nfig, axis = plt.subplots(nrows=5, ncols=3, figsize=(20, 20))\n\nfor i, index in enumerate(indices):\n    img = X_val[index]\n    mask = pred[index][0, :, :]\n    true_mask = y_val[index]\n    mask = cv2.bitwise_not(cv2.cvtColor(mask.cpu().detach().numpy(), cv2.COLOR_BGR2RGB))\n    mask[mask > 0] = 255\n    \n    axis[i][0].imshow(img, cmap='gray')\n    axis[i][1].imshow(mask)\n    axis[i][2].imshow(true_mask, cmap='gray')\n\nplt.tight_layout()\n","3aa58033":"# # ref: https:\/\/github.com\/pytorch\/pytorch\/issues\/1249\n# def dice_loss(pred, target):\n#     smooth = 1.\n\n#     iflat = torch.Tensor(np.array(pred)).view(-1)\n#     tflat = target.view(-1)\n#     intersection = np.sum(iflat * tflat)\n\n#     return 1 - ((2. * intersection + smooth) \/ (np.sum(iflat) + np.sum(tflat) + smooth))\n\n\n# print(dice_loss(pred, torch.Tensor(y_val)))","1c22c3ee":"## Evaluation ","d899f504":"## Training","bda6ae72":"## Augmentation","922cbdea":"Print 4 random images.","ead35f3f":"Free unused memory.","297c43c2":"## U-Net","a4aa93b8":"## Model training","43911dff":"## Data loaders","a3ab7fb4":"## Normalization","39008ac5":"## Make predictions","722973f7":"## Loss history visualization","f9896e86":"## Prediction visualization"}}