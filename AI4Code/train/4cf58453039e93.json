{"cell_type":{"6915f0c6":"code","9cde4189":"code","4d250ea6":"code","04e535a1":"code","9b59b7be":"code","676e0742":"code","415220a2":"code","46f2458e":"code","1785a0ca":"code","fcec505f":"code","d794f100":"code","b63d5f48":"code","23ca6cee":"code","7043310d":"code","e0097722":"code","059a0f87":"code","fc528c66":"code","9b1aa006":"code","7ce919a5":"code","499cee38":"code","4634e2f2":"code","d293196b":"code","9686d6f3":"code","4f475c61":"code","833fe46a":"code","8af6361a":"code","0a10e064":"code","847ed0f9":"markdown","db7f60a3":"markdown","83eb9084":"markdown","9f1da608":"markdown","1c663e16":"markdown","43fc0aff":"markdown","75da18a3":"markdown","9120882e":"markdown","f3d71962":"markdown"},"source":{"6915f0c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport itertools \nimport warnings\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9cde4189":"Sales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nSales_train","4d250ea6":"Sales_train.item_cnt_day.plot()","04e535a1":"Sales_train.info()","9b59b7be":"pd.to_datetime(Sales_train.date,dayfirst = True)\nDate_time = pd.to_datetime(Sales_train.date,dayfirst = True)\nX1 = Sales_train.date_block_num\nX2 = Sales_train.shop_id\nX3 = Sales_train.item_id\nX4 = Sales_train.item_price\nY = Sales_train.item_cnt_day","676e0742":"Date_by_blocks = pd.DataFrame({\"Date\": Date_time,\"Date_blocks\": X1})\nDate_by_shop_id = pd.DataFrame({\"Date\": Date_time,\"Shop_id\": X2})\nDate_by_items_id = pd.DataFrame({\"Date\": Date_time,\"Items_id\": X3})\nDate_by_price = pd.DataFrame({\"Date\": Date_time,\"Price\": X4})\nDate_by_sales_count = pd.DataFrame({\"Date\": Date_time,\"Sales_count\": Y})","415220a2":"Date_by_blocks.sort_values(by=['Date'])\nys = Date_by_blocks.Date\nxs = Date_by_blocks.Date_blocks\nplt.figure(figsize=(20,5))\nplt.scatter(xs, ys)\nplt.grid(True)\nplt.show()","46f2458e":"Date_by_shop_id.sort_values(by=['Date'])\nys = Date_by_shop_id.Date\nxs = Date_by_shop_id.Shop_id\nplt.figure(figsize=(20,5))\nplt.scatter(xs, ys)\nplt.grid(True)\nplt.show()","1785a0ca":"Date_by_items_id.sort_values(by=['Date'])\nys = Date_by_items_id.Date\nxs = Date_by_items_id.Items_id\nplt.figure(figsize=(20,10))\nplt.scatter(xs, ys)\nplt.grid(True)\nplt.show()","fcec505f":"Date_by_price.sort_values(by=['Date'])\nxs = Date_by_price.Date\nys = Date_by_price.Price\nplt.figure(figsize=(20,10))\nplt.scatter(xs, ys)\nplt.grid(True)\nplt.show()","d794f100":"Date_by_sales_count.sort_values(by=['Date'])\nxs = Date_by_sales_count.Date\nys = Date_by_sales_count.Sales_count\nplt.figure(figsize=(20,10))\nplt.scatter(xs, ys)\nplt.grid(True)\nplt.show()","b63d5f48":"#a = []\n#for i in range(len(Sales_train.groupby(\"item_id\").groups)):\n#    filter = Sales_train[\"item_id\"] == i\n#    a.append(Sales_train.loc[filter])\na = []\nj = Sales_train.groupby(\"item_id\").groups\nfor i in range(len(Sales_train['item_id'].unique())):\n    if(i in j):\n        a.append(Sales_train.loc[j[i]])\na[1]","23ca6cee":"Sales_train.item_id.value_counts()","7043310d":"boof1 = Sales_train[(Sales_train.item_id == 20949) & (Sales_train.shop_id == 28)]\nboof1.date = pd.to_datetime(boof1.date,dayfirst = True)\nboof1 = boof1.sort_values(\"date\")\nxs = boof1[(boof1.date > \"2014.01.01\") & (boof1.date < \"2014.12.31\")].date\nys = boof1[(boof1.date > \"2014.01.01\")  & (boof1.date < \"2014.12.31\")].item_cnt_day\ndata = boof1[(boof1.date > \"2014.01.01\") & (boof1.date < \"2014.12.31\")]\nplt.figure(figsize=(20,7))\nplt.plot(xs, ys)\nplt.grid(True)\nplt.show()","e0097722":"df = pd.DataFrame(np.array(ys), index=xs, columns=['xs'])\ndf['mean'] = df.rolling(10).mean()\ndf.plot(figsize=(20,7))\n\nplt.legend(loc='best')\nplt.grid(True)\nplt.show()","059a0f87":"sm.graphics.tsa.plot_acf(ys)\nplt.grid(True)\nplt.show()","fc528c66":"sm.graphics.tsa.plot_pacf(ys)\nplt.grid(True)\nplt.show()","9b1aa006":"tryw = pd.DataFrame(np.array(ys), index=range(len(xs)))\nmodel = SARIMAX(tryw, order=(2, 0, 2), seasonal_order=(1, 1, 2, 48))\nmodel_fit = model.fit(disp=False)\nyhat = model_fit.predict(0, len(ys)+250)\nmodel_fit.aic,len(yhat)","7ce919a5":"plt.figure(figsize=(25, 10))\nplt.scatter(range(len(boof1[(boof1.date > \"2014.01.01\")  & (boof1.date < \"2020.12.31\")].item_cnt_day)), boof1[(boof1.date > \"2014.01.01\")  & (boof1.date < \"2020.12.31\")].item_cnt_day, c='b', label='\u0417\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')\nplt.plot(yhat, c='r', label='\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u044c\u044e')\nplt.grid(True)\nplt.legend(loc='best')\nplt.show()","499cee38":"boof = pd.DataFrame({\"time\":a[1].date,\"y\":a[1].item_cnt_day})\nboof","4634e2f2":"easy_a = []\nhard_a = []\nfor i in range(len(a)):\n    if (len(a[i]) >= 1000):\n        hard_a.append(i)\n    else: \n        easy_a.append(i)\nlen(easy_a),len(hard_a),hard_a[0]","d293196b":"a[30]","9686d6f3":"xs = a[30].date\nys = a[30].item_cnt_day\nplt.figure(figsize=(20,10))\nplt.scatter(xs[:50], ys[:50])\nplt.grid(True)\nplt.show()","4f475c61":"Sales_test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nb = []\nk = Sales_test.groupby(\"item_id\").groups\nfor i in range(len(Sales_test['item_id'].unique())):\n    if(i in k):\n        b.append(Sales_test.loc[k[i]])\nb[0]","833fe46a":"easy_b = []\nfor i in range(len(b)):\n        easy_b.append(i)\nlen(easy_b)","8af6361a":"from sklearn.linear_model import LogisticRegression\n\ndef easy_predict(df,test):\n    model = LogisticRegression()\n    boof = pd.DataFrame({\"time\":df.date,\"item_id\":df.item_id,\"y\":df.item_cnt_day})\n    boof.time = pd.to_datetime(boof.time,dayfirst = True)\n    y = boof.y\n    x = boof[[\"time\",\"item_id\"]]\n    #model.fit(x,y)\n    return df\n\ndef hard_predict(df):\n    return df","0a10e064":"result = []\nfor i in range(len(a)):\n    if (i in easy_b):\n        easy_predict(a[i], b[i])\n    else:\n        easy_predict(a[i], -1)\n#for i in range(len(a))\n#    if ((i-30) in b):\n#        easy_predict(a[i],b.item_id[i])","847ed0f9":"\u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0443 \u043a\u0430\u043a Date_time,\u0445\u0430\u0440-\u043a\u0438 \u0442\u043e\u0432\u0430\u0440\u0440\u0430 \u043a\u0430\u043a X1-x4,\u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0434\u0435\u043d\u044c \u043a\u0430\u043a Y","db7f60a3":"\u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a - \u043d\u0435 \u0440\u0443\u0447\u043a\u0430\u043c\u0438 \u0436\u0435 \u0435\u0433\u043e \u0437\u0430\u0431\u0438\u0432\u0430\u0442\u044c\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0430\u043a \u0441\u0435\u0431\u0435 \u0431\u044b\u043b,\u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u0440\u043e\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0448\u0435. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e item_id. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0442\u043e\u0432\u0430\u0440,\u043a\u0441\u0442\u0430\u0442\u0438,\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u043e\u0434\u044e\u0442 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u043c \u043c\u0433\u0430\u0437\u0438\u043d\u0435 - \u0447\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u043e,\u043d\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u043e\u0437\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c","83eb9084":"\u0417\u0430\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0446\u0438\u043a\u043b - \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u043b\u0433\u043e \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0442\u044c\u0441\u044f. \u041c\u0435\u0442\u043e\u0434\u044b \u0446\u0438\u043a\u043b\u0430 \u0434\u0430\u043d\u044b \u0432\u044b\u0448\u0435.","9f1da608":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","1c663e16":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u044f\u0434\u044b","43fc0aff":"\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 pandas-\u0444\u043e\u0440\u043c\u0430\u0442","75da18a3":"\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u044f\u0434\u043e\u0432","9120882e":"\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0442\u0435\u0441\u0442\u043e\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u043e\u0439","f3d71962":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 - \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438"}}