{"cell_type":{"a5ce1c3d":"code","21fa237e":"code","f5841f73":"code","0d4a7a4e":"code","207dc7ae":"code","9f77aa8b":"code","53f9f2b2":"code","cf3d07f0":"code","8beb0dcc":"code","27c7a37d":"code","20cbb161":"code","22efddb4":"code","b66aecd0":"code","311a3dee":"code","42fcbf1c":"code","a1b4bc31":"code","3801b6f5":"code","339f2131":"code","d458fac1":"code","2364ee2c":"code","3c257dd3":"code","d07b096b":"code","f6e14b5f":"markdown","efa9acb7":"markdown","1fc8d8d5":"markdown"},"source":{"a5ce1c3d":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt","21fa237e":"#deklarasi-data-filepath\ntrainData = pd.read_csv('..\/input\/titanic\/train.csv')\ntestData = pd.read_csv('..\/input\/titanic\/test.csv')\n\n#Memeriksa apakah ada Nan-Values\nprint(trainData.info())\nprint(\"Total Nan-Values pada trainData = \" + str(trainData.isna().sum().sum()))\nprint(\"-\"*100)\nprint(testData.info())\nprint(\"Total Nan-Values pada testData = \" + str(testData.isna().sum().sum()))\n","f5841f73":"#Perbandingan jumlah total penumpang yang selamat dan tidak selamat\nplt.title(\"Survived Count\")\nsns.countplot(x = 'Survived', data = trainData)","0d4a7a4e":"#Perbandingan jumlah total antara penumpang laki-laki dan perempuan\nsns.countplot(trainData['Sex'])\nplt.title('Jumlah Total Antara Penumpang Pria dan Wanita')","207dc7ae":"#Perbandingan jumlah total penumpang laki-laki dan perempuan yang selamat dan tidak selamat\nplt.figure(figsize=(7,8))\nsns.countplot(x ='Survived',hue = 'Sex', data = trainData)\nplt.title('Perbandingan Tingkat Keselamatan Pada Jenis Kelamin')\nplt.legend(title='Jenis Kelamin',labels = ['Pria', 'Wanita'])","9f77aa8b":"#Scatterbox keselamatan berdasarkan umur penumpang dan jenis Kelamin\nsns.scatterplot(x = 'Survived', y = 'Age',hue = 'Sex', data = trainData)","53f9f2b2":"#Interquartile range menggunakan box plot berdasarkan tingkat keselamatan dan tidak selamat pada umur penumpang\nsns.boxplot(x = 'Survived', y = 'Age', data = trainData)","cf3d07f0":"#Membersihkan NaN Values\n#trainData.dropna(inplace = True)\n#trainData = trainData.fillna(0)","8beb0dcc":"#Dapat kita simpulkan bahwa PassengerId, Name, ticket, Cabin dapat di drop\ndataTrain = trainData.drop(['PassengerId','Name','Ticket', 'Cabin'], axis = 1) #axis 1 menandakan bahwa features yang kita drop adalah sebuah column (bukan row)","27c7a37d":"#get.dummies pada Column 'Sex' untuk merubah male dan female menjadi 1 dan 0\nsex = pd.get_dummies(trainData['Sex'], drop_first = True)\n#get.dummies pada Column 'Embarked' untuk merubah value C Q S menjadi 1 dan 0\nembarked = pd.get_dummies(trainData['Embarked'])\nprint(embarked)","20cbb161":"#get.dummies pada Column 'Embarked' untuk merubah value C S Q menjadi 1 dan 0\nembarked = pd.get_dummies(trainData['Embarked'], drop_first = 1)\n#drop column 'Embarked' pada dataTrain yang masih berisikan String Male dan Female\ndataTrain = dataTrain.drop(['Embarked'], axis = 1)","22efddb4":"#get.dummies pada column 'Pclass' agar value menjadi 1 dan 0\npclass = pd.get_dummies(trainData['Pclass'], drop_first = True)\ndataTrain = dataTrain.drop(['Pclass'], axis = 1)","b66aecd0":"dataTrain['Sex'] = sex\ndataTrain = pd.concat([dataTrain, pclass, embarked], axis = 1)","311a3dee":"#Merubah NaN values dan mengisikan nya dengan mean\ndataTrain['Age'] = dataTrain[\"Age\"].fillna(value=dataTrain[\"Age\"].mean())\n","42fcbf1c":"#Merubah data types pada kolom Age dari float64 menjadi int64\nageInt = dataTrain['Age'].astype(np.int64)\ndataTrain = dataTrain.drop(['Age'], axis = 1)\ndataTrain['Age'] = ageInt","a1b4bc31":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix","3801b6f5":"#deklarasi X dan y untuk train_test_split\nX = dataTrain.drop(['Survived'], axis = 1, inplace = False)\ny = dataTrain['Survived']","339f2131":"X_train, X_test, y_train, y_test = train_test_split(X , y , test_size = 0.2, random_state=101)","d458fac1":"logReg = LogisticRegression(solver='liblinear')\nlogReg.fit(X_train,y_train)","2364ee2c":"prediksi = logReg.predict(X_test)\naccuracy = confusion_matrix(y_test, prediksi)","3c257dd3":"accuracy = accuracy_score(y_test, prediksi)\naccuracy * 100","d07b096b":"plot_confusion_matrix(logReg, X_test, y_test)","f6e14b5f":"# train_test_split\n","efa9acb7":"# **1. OBSERVASI DATA**","1fc8d8d5":"# Halo, Notebook ini dibuat dalam Bahasa Indonesia\n1. Notebook ini dibuat dalam tujuan pembelajaran.\n2. Disini saya baru belajar mengenai data science selama 2 minggu.\n3. Versi yang anda lihat saat ini belum final.\n**NB Orang Indonesia dimohon berkomentar, agar saling kenal sesama kagglers."}}