{"cell_type":{"f2ad5f02":"code","98d8356c":"code","79996272":"markdown","c602c47b":"markdown"},"source":{"f2ad5f02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport math as math\n%matplotlib inline\nimport seaborn as sns # charts\nimport matplotlib.pyplot as plt  #charts\nimport matplotlib.patches as patches\nfrom matplotlib.gridspec import GridSpec\nfrom datetime import datetime, timedelta\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import MO, TU, WE, TH, FR, SA, SU\nfrom matplotlib.dates import WeekdayLocator\nfrom matplotlib.lines import Line2D\n\npbl = pd.read_csv(\"..\/input\/swt2019pbljan4\/santa-workshop-tour-2019-publicleaderboard-jan-4.csv\", low_memory=False)\npbl = pbl.rename(columns={'SubmissionDate':'sDate'})\npbl['sDateH'] = pbl['sDate'].values.astype('<M8[h]')+pd.Timedelta(minutes=59,seconds=59)\npbl['sDateD'] = pbl['sDate'].values.astype('<M8[D]')\n# teams first submission\npbl_tfsh = pbl.groupby(['TeamId'])['sDateH'].min().reset_index(name='sDateH')\npbl_tph = pbl_tfsh.sort_values(['sDateH']).groupby(['sDateH']).size().cumsum().reset_index(name='teams_cnt')\nmax_date = pbl['sDateH'].max()\ndef reindex_by_date(df):\n    dates = pd.date_range(df.index.min(), max_date, freq='1H')\n    return df.reindex(dates).ffill()\npbl_tph = pbl_tph.set_index('sDateH').apply(reindex_by_date).reset_index().rename(columns={'index':'sDateH'})\n#pbl_tph.head()\n\n#CALCULTING number of medals for each day based on number of teams\n\n#          0-99 Teams   100-249    Teams 250-999      Teams 1000+ Teams\n#  Bronze  Top 40%      Top 40%    Top 100            Top 10%\n#  Silver  Top 20%      Top 20%    Top 50             Top 5%\n#  Gold    Top 10%      Top 10     Top 10 + 0.2%*     Top 10 + 0.2%*\n\nbuckets = [99, 249, 999, np.inf]\npbl_tph['bucket_n'] = pd.cut(pbl_tph['teams_cnt'], [0]+buckets, labels=range(4))\n\nmedals_cnt = {\n    'gold':\n        {'abs':[0, 10, 10, 10], \n         'rel':[0.1, 0, 0.002, 0.002]},\n    'silver':\n        {'abs': [0, 0, 50, 0],\n         'rel': [0.2, 0.2, 0, 0.05]},\n    'bronze':\n        {'abs':[0, 0, 100, 0],\n         'rel':[0.4, 0.4, 0, 0.1]}}\n\n\nfor k,v in medals_cnt.items():\n    key = f'{k}_medals_cnt'\n    pbl_tph[key] = pbl_tph[['bucket_n', 'teams_cnt']].apply(\n        lambda x: v['abs'][x['bucket_n']] + v['rel'][x['bucket_n']]*x['teams_cnt'], axis=1).astype('int')\n#pbl_tph.head(5)\n\nzh = pbl.loc[pbl.groupby(['TeamId','sDateH'])['Score'].idxmin()]\nzh.head()\nmax_date = zh['sDateH'].max()\n\ndef reindex_by_date(df):\n    dates = pd.date_range(df.index.min(), max_date, freq='1H')\n    return df.reindex(dates).ffill()\n\nzh = zh.set_index('sDateH').groupby('TeamId').apply(reindex_by_date).reset_index(0, drop=True)\n#zh.head()\n\nscores_eoh = zh.reset_index().rename(columns={'index':'sDateH'})\nscores_eoh['rank'] = scores_eoh.sort_values(['Score','sDate']).groupby(['sDateH']).cumcount()+1\nyy = pd.merge(scores_eoh[['Score','sDateH','rank']], pbl_tph, how='inner',on='sDateH')\npbl_cutoffs_h = yy[yy.filter(like='_medals_').eq(yy['rank'],axis=0).any(axis=1)].copy()\npbl_cutoffs_h['zone_x_ends'] = np.argmax(pbl_cutoffs_h.filter(like='medals').eq(pbl_cutoffs_h['rank'], axis=0).values, axis=1)\npbl_cutoffs_h['zone_x_ends'] = pbl_cutoffs_h['zone_x_ends'].map({0:'gold', 1:'silver', 2:'bronze'})","98d8356c":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\nplt.rc('font', size=12) #controls default text sizes\nplt.rc('axes', titlesize=14) #fontsize of the axes title\nplt.rc('axes', labelsize=12) #fontsize of the x and y labels\nplt.rc('xtick', labelsize=12) #fontsize of the tick labels\nplt.rc('ytick', labelsize=12) #fontsize of the tick labels\nplt.rc('legend', fontsize=12) #legend fontsize\nplt.rc('figure', titlesize=14) #fontsize of the figure title\nsns.set_style(\"whitegrid\")\n\n#data for plots\nd= pbl_cutoffs_h[['sDateH','zone_x_ends','Score']].pivot(index = 'sDateH',columns='zone_x_ends', values='Score')\n\n\n\npcolors = {'light': \n              { 'bronze':'#E9B87A','silver':'#E9E9E9', 'gold':'#FFD44A'},\n          'dark': \n              { 'bronze':'#8E5B3D','silver':'#838280', 'gold':'#B88121'},\n          'annot':'#C75146',\n          'higlight':'#FFBC42'}\n\n\n\ngs_kw = dict(wspace=0.25, hspace=0.25, width_ratios=[1], height_ratios=[0.75,0.55])\nfig, ax = plt.subplots(2,1,figsize=(12,16), gridspec_kw=gs_kw)\n\n\nx_starts = [pd.to_datetime('2019-12-01 23:59:59'),\n            pd.to_datetime('2019-12-26 15:59:59')]\nndays = [30,2.2]\nxintervals = [72,6]\ndfmt = [mdates.DateFormatter('%d-%b\\n%a'),mdates.DateFormatter('%d-%b\\n%I%p')]\nymaxs = [77000, 71500]\ny_starts = [68700, 68700]\nsubtitle = [(\"Great progress was made by teams during the first week of the competition.\"+\n             \"\\nThen things were calm for a while. What happened after Christmas?\"),\n            'Race of notebooks with scores in the bronze zone on the 27th of December']\nkey_events = {0:[], #72398.91,71261.10,70964.11\n            1:[70964.11,69983.82,69880.40,70405.11]}\naxvspans = {\n    'dates': [(x_starts[0],x_starts[0]+timedelta(days=7)), \n               (pd.to_datetime('2019-12-25 23:59:59'), pd.to_datetime('2019-12-28 23:59:59'))],\n    'color': ['#88C16E','#FFBC42']\n}\n\n\n\nfor i in range(len(axvspans)):\n    ax[0].axvspan(axvspans['dates'][i][0], axvspans['dates'][i][1], color=axvspans['color'][i], alpha = 0.08)\n    \n\ncustom_legend_ls = list(pcolors['dark'].keys())\ncustom_legend_hs = []\nfor x in custom_legend_ls:\n    custom_legend_hs.append(Line2D([0], [0], color=pcolors['dark'][x],marker='o', markersize=10, lw=0))\n\n\nfor i in range(0,len(x_starts)):\n    #plot    \n    sns.lineplot(data=d.loc[(d.index>x_starts[i])&(d.index<=x_starts[i]+timedelta(days=ndays[i]))][['bronze','silver','gold']], palette=pcolors['dark'] ,dashes = False, ax=ax[i])\n    #plot decoration\n    c_ax = ax[i] \n    dmin = x_starts[i]\n    loc = mdates.HourLocator(interval=xintervals[i])\n    c_ax.xaxis.set_major_locator(loc)\n    c_ax.xaxis.set_major_formatter(dfmt[i])\n    c_ax.tick_params(labelsize=10)\n    c_ax.set_xlabel(None)\n    c_ax.set_ylim(y_starts[i], ymaxs[i])\n    c_ax.set_title(subtitle[i])\n    c_ax.legend(custom_legend_hs, custom_legend_ls, ncol=1)\n\n    #plot annotation\n    pn = key_events[i]\n    if len(pn)>0:\n        annot_points = pbl.loc[pbl['Score'].isin(pn)].groupby('Score')['sDateH'].min().sort_index(ascending=False).to_dict()\n        for score, tstmp in annot_points.items():  \n            #score of the last entry in the bronze zone prior sharing\n            bronze_score_ts = d.loc[tstmp+timedelta(hours=-1),'bronze']\n            #mark sharing time\n            c_ax.vlines(tstmp+timedelta(hours=-1), y_starts[i],bronze_score_ts, colors='grey', alpha=1, linestyles='dotted',lw=2)\n            #add a score of the shared notebook\n            c_ax.scatter(tstmp+timedelta(hours=-1),score, color=pcolors['annot'], marker='^')\n            c_ax.annotate(str(int(score))+\"\\nnotebook\\npublished\",\n                        xy=(tstmp+timedelta(hours=-1),score),\n                        xytext=(0,-10), textcoords='offset points',\n                        va=\"top\", ha=\"center\",\n                        color=pcolors['annot'],\n                        bbox=dict(boxstyle='round', fc=\"w\", ec=pcolors['annot'])   \n                        )\n            #add number of uploads\n            uploads = pbl.loc[(pbl['Score']==score)&(pbl['sDateH']<=annot_points[score]+timedelta(hours=24))]['TeamId'].count()\n            c_ax.annotate(str(uploads)+\" uploads*\",\n                          xy=(tstmp+timedelta(hours=-1), score),\n                          xytext=(0,-62), textcoords='offset points',\n                          va=\"top\", ha=\"center\", color='grey', fontsize=10,\n                          bbox=dict(boxstyle='round', fc=\"w\",ec=\"w\")   \n                         )\n            #current bronze score\n            c_ax.annotate(str(int(bronze_score_ts)),\n                        xy=(tstmp+timedelta(hours=-1),bronze_score_ts),\n                        xytext=(0,0), textcoords='offset points',\n                        va=\"bottom\", ha=\"center\",\n                        color=\"w\",\n                        bbox=dict(boxstyle='round4', fc=pcolors['dark']['bronze'], ec=pcolors['dark']['bronze'])   \n                        )\n            \n#add milestones on the first plot:\nmilestones = [pd.to_datetime('2019-12-01 23:59:59'),\n              pd.to_datetime('2019-12-10 23:59:59'),\n              pd.to_datetime('2019-12-20 23:59:59'),\n              pd.to_datetime('2019-12-30 23:59:59')]\n\nfor i in milestones:\n    for j in ['gold','silver','bronze']:\n        cur_score = d.loc[i,j]\n        ax[0].annotate(str(int(cur_score)),\n                      xy=(i,cur_score),\n                      xytext=(0,0), textcoords='offset points',\n                      va=\"center\", ha=\"center\",\n                      color=\"w\",\n                      bbox=dict(boxstyle='round4', fc=pcolors['dark'][j], ec=pcolors['dark'][j]))\n\nax[1].annotate(\"*submissions with the same exact score made within the next 24 hours\",\n              xy=(0, 0),xycoords='axes fraction', \n              xytext=(0,-50), textcoords='offset points',\n              va=\"top\", ha=\"left\", color='grey',\n              bbox=dict(boxstyle='round', fc=\"w\", ec='w'))\n\nsns.despine(left=True, bottom=True)\nplt.show()","79996272":"#### Santa's Workshop Tour 2019\n## How sharing of notebooks with high-scoring submissions affects competition dynamics\n\nThis post was inspired by the discussion [Optium for Silver Medal](https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/123784). \nBelow you can see the progression of scores in each medal zone throughout December.\n\nIt looks like some kagglers rightfully claimed that the movement on the leaderboard after Christmas was largerly caused by published notebooks with scores in the bronze zone.","c602c47b":"When a notebook in the medal zone is shared, some teams upload it directly on the leaderboard, others borrow ideas to improve their submissions. This can be either demotivating or stimulating for participants, depending on their standing.\n\nFor example, for teams which were in the bronze zone prior to notebook sharing, seeing one morning dozens of new rivals on the leaderboard above them, all with the same score, was probably upsetting. At the same time, it might have motivated these teams to work harder to reclaim their spot.\n\nThis was the case for us. Although we had a score in the silver zone when this happened, it felt like soon we might be pushed out by other teams. This sparked the competitive spirit in us, and we spent more time on the problem to improve our chances of getting silver.\n\nFor me, the question is whether sharing helps community learn or whether it provides unfair advantage to those who see the notebooks earlier than others. Would it be better if such notebooks are shared when the competition ends, or would their learning value decrease after the deadline because teams aren't as motivated anymore? What's your view on this?"}}