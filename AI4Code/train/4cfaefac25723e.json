{"cell_type":{"4b7fc912":"code","84a21a81":"code","7746312e":"code","f1d1ee31":"code","c98a99a3":"code","3cda844e":"code","2689fe06":"code","46119c75":"code","47e6ee52":"code","2093d59d":"code","41d85a37":"code","620e86d5":"code","c2d90a6a":"code","a432e366":"markdown","e4b89f95":"markdown","30ae2705":"markdown","12296cc9":"markdown","d4c39b7d":"markdown","eea0545c":"markdown","70ba41c8":"markdown","83416eda":"markdown"},"source":{"4b7fc912":"!pip install keras==2.3.1","84a21a81":"import seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.models import save_model","7746312e":"#import the csv file\ndataset = pd.read_csv('..\/input\/featuresbart-homer\/features.csv')","f1d1ee31":"#Extract X and Y\nX = dataset.iloc[:,:-1].values\nY = dataset.iloc[:,-1].values","c98a99a3":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 1)","3cda844e":"network1 = tf.keras.models.Sequential()\nnetwork1.add(tf.keras.layers.Dense(input_shape = (6,), units = 4, activation='relu'))\nnetwork1.add(tf.keras.layers.Dense(units = 4, activation='relu'))\nnetwork1.add(tf.keras.layers.Dense(units = 4, activation='relu'))\nnetwork1.add(tf.keras.layers.Dense(units = 1, activation='sigmoid'))","2689fe06":"network1.summary()","46119c75":"#compile\nnetwork1.compile(optimizer='Adam', loss='binary_crossentropy', metrics =['accuracy'])\n\n#train\nhistory = network1.fit(X_train, Y_train, epochs = 50)","47e6ee52":"predictions = network1.predict(X_test)\npredictions = predictions > 0.5 #threshold\nprint('Accuracy :', accuracy_score(Y_test, predictions)*100)\ncm = confusion_matrix(Y_test, predictions)\nsns.heatmap(cm, annot=True);\nprint(classification_report(Y_test, predictions))","2093d59d":"#save json model structure\nmodel_json = network1.to_json() #convert model structure to json format\nwith open('network1.json', 'w') as json_file:\n  json_file.write(model_json) #write model structure in json format to disk\n\n#save model weights\nnetwork1_saved = tf.keras.models.save_model(network1, '.\/weights1.hdf5')","41d85a37":"#read stored json model structure\nwith open('network1.json', 'r') as json_file:\n  json_saved_model = json_file.read() #load saved model structure from json file\n\n#build model from json structure\nnetwork1_loaded = tf.keras.models.model_from_json(json_saved_model) #convert model structure to model\nnetwork1_loaded.load_weights('weights1.hdf5') #load model weights\nnetwork1_loaded.compile(optimizer='Adam', loss='binary_crossentropy', metrics =['accuracy']) #same as when trained","620e86d5":"#model summary\nnetwork1_loaded.summary()","c2d90a6a":"test_image = X_test[0]\ntest_image = test_image.reshape(1, -1)\nprint(network1_loaded.predict(test_image)[0][0]) \nif(network1_loaded.predict(test_image)[0][0] < 0.5):\n  print('Bart')\nelse:\n  print('Homer')","a432e366":"# Visualise Model","e4b89f95":"# Save Model & Weights","30ae2705":"# Train Model","12296cc9":"# Build Model","d4c39b7d":"# Import Libraries","eea0545c":"# Evaluate","70ba41c8":"# Train Test Split","83416eda":"# Single Image Prediction"}}