{"cell_type":{"6a5c82b3":"code","56eb89aa":"code","5623162f":"code","203d00be":"code","7ce4421c":"code","fd799480":"code","229aa19b":"code","4ce340ce":"code","85dc50f4":"code","3483a3f9":"code","75f42b0d":"code","b70fb4d4":"code","195141af":"code","700fc6b7":"code","fd6cf79e":"code","2b3c1ab8":"code","da363606":"code","9b702d95":"code","54b8ec8f":"code","77f9ea81":"code","cc0dd856":"code","dcd58b44":"code","6bf0cdfc":"code","eb850e96":"code","96cbebd3":"code","5844e9bb":"code","ca654769":"code","eebd53b3":"code","ad278d04":"code","80e41fdf":"code","5890d089":"code","0ab98d39":"code","70e112fd":"code","2053023a":"code","4b07f4a7":"code","db85852f":"code","0e9efbb9":"code","1313fecc":"code","92f4ce94":"code","da6f0e47":"code","33e901a2":"code","c62da6da":"code","ca78e0ff":"code","812ae72d":"code","8492301b":"markdown","3921cfac":"markdown","f4bffda8":"markdown","0a92b037":"markdown","f4cb9ac9":"markdown","bf088994":"markdown","25329118":"markdown","33c3cee0":"markdown","77e73a4f":"markdown","429dbee5":"markdown","b634a618":"markdown"},"source":{"6a5c82b3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.options.display.float_format = '{:,.2f}'.format\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler,RobustScaler,label_binarize,RobustScaler\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier,GradientBoostingClassifier, ExtraTreesClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,ConfusionMatrixDisplay,precision_score,recall_score,f1_score,classification_report,roc_curve,plot_roc_curve,auc,precision_recall_curve,plot_precision_recall_curve,average_precision_score\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import RidgeClassifier","56eb89aa":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf.head()","5623162f":"df.info()","203d00be":"df.describe()","7ce4421c":"print('DF Shape:', df.shape)","fd799480":"desc = df.describe().T\ndf1 = pd.DataFrame(index=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target'], \n                   columns= [\"count\",\"mean\",\"std\",\"min\",\n                             \"25%\",\"50%\",\"75%\",\"max\"], data= desc )\n\nf,ax = plt.subplots(figsize=(12,12))\n\nsns.heatmap(df1, annot=True,cmap = \"Reds\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"Variables\")\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","229aa19b":"df.isnull().sum()","4ce340ce":"import missingno as msno\nmsno.bar(df)\nplt.show()","85dc50f4":"corr = df.corr()\nmask = np.triu(np.ones_like(corr,dtype=bool))\nf,ax = plt.subplots(figsize=(11,9))\ncmap = sns.diverging_palette(230,20,as_cmap = True)\nsns.heatmap(corr,mask=mask,cmap=cmap,vmax=.3,square=True,linewidths=.5,cbar_kws={'shrink':.5})","3483a3f9":"#df.drop(['restecg','fbs','chol','trestbps'],axis=1,inplace=True)","75f42b0d":"# target correlations\n\ncorr.sort_values(by=['target'],ascending=False).iloc[0].sort_values(ascending=False)","b70fb4d4":"plt.figure(figsize=(20,10))\nsns.set_theme(style='darkgrid')\nplt.subplot(2,3,1)\nsns.countplot(data=df,x='fbs')\nplt.subplot(2,3,2)\nsns.countplot(data=df,x='restecg')\nplt.subplot(2,3,3)\nsns.countplot(data=df,x='slope')\nplt.subplot(2,3,4)\nsns.countplot(data=df,x='ca')\nplt.subplot(2,3,5)\nsns.countplot(data=df,x='exang')\nplt.subplot(2,3,6)\nsns.countplot(data=df,x='thal')\nplt.show()","195141af":"plt.figure(figsize=(20,10))\nsns.set_theme(style='darkgrid')\nplt.subplot(2,3,1)\nsns.countplot(data=df,x='fbs',hue='target')\nplt.subplot(2,3,2)\nsns.countplot(data=df,x='restecg',hue='target')\nplt.subplot(2,3,3)\nsns.countplot(data=df,x='slope',hue='target')\nplt.subplot(2,3,4)\nsns.countplot(data=df,x='ca',hue='target')\nplt.subplot(2,3,5)\nsns.countplot(data=df,x='exang',hue='target')\nplt.subplot(2,3,6)\nsns.countplot(data=df,x='thal',hue='target')\nplt.show()","700fc6b7":"df.hist(figsize=(20,14))\nplt.show()","fd6cf79e":"fig = plt.figure(figsize=(7,7))\nax = sns.displot(df.age,color='green',kde=True,label='Age')","2b3c1ab8":"fig = plt.figure(figsize=(7,7))\nax = sns.displot(df.trestbps, color='blue',kde=True,label='Trestbps')","da363606":"fig = plt.figure(figsize=(7,7))\nax = sns.displot(df.chol,label='Chol',kde=True,color='red')","9b702d95":"fig = plt.figure(figsize=(7,7))\nax = sns.displot(df.thalach, label='Thalach',kde=True,color='green')","54b8ec8f":"fig = plt.figure(figsize=(7,7))\nax = sns.displot(df.oldpeak,label='oldpeak',color='blue',kde=True)","77f9ea81":"plt.figure(figsize=(12,10))\nsns.distplot(df[df['target'] == 0]['trestbps'],color='green')\nsns.distplot(df[df['target'] == 1]['trestbps'],color='red')\nplt.title('Target vs Trestbps')\nplt.xlim([30,330])","cc0dd856":"sns.displot(data=df,x=df.trestbps,hue='target',col='sex',kind='kde')","dcd58b44":"sns.displot(data=df, x = 'thalach',hue='target',col='sex',kind='ecdf')","6bf0cdfc":"plt.figure(figsize=(13,13))\nsns.set_theme(style='darkgrid')\nplt.subplot(2,3,1)\nsns.violinplot(x='cp',y='target',data=df)\nplt.subplot(2,3,2)\nsns.violinplot(x='fbs',y='target',data=df)\nplt.subplot(2,3,3)\nsns.violinplot(x='restecg',y='target',data=df)\nplt.subplot(2,3,4)\nsns.violinplot(x='exang',y='target',data=df)\nplt.subplot(2,3,5)\nsns.violinplot(x='slope',y='target',data=df)\nplt.subplot(2,3,6)\nsns.violinplot(x='ca',y='target',data=df)\nplt.show()","eb850e96":"plt.figure(figsize=(18,10))\nsns.set_theme(style='darkgrid')\nplt.subplot(2,3,1)\nsns.boxplot(x='thal',data=df)\nplt.subplot(2,3,2)\nsns.boxplot(x='oldpeak',data=df)\nplt.subplot(2,3,3)\nsns.boxplot(x='thalach',data=df)\nplt.subplot(2,3,4)\nsns.boxplot(x='chol',data=df)\nplt.subplot(2,3,5)\nsns.boxplot(x='trestbps',data=df)\nplt.subplot(2,3,6)\nsns.boxplot(x='age',data=df)\nplt.show()","96cbebd3":"df.thal.mean()\ndf.loc[ df['thal'] == 0, 'thal'] = 2\nsns.displot(data=df,x='thal')","5844e9bb":"sns.displot(data=df,x='oldpeak')","ca654769":"df2 = df.copy()\ncat_cols = ['sex','cp','fbs','restecg','exang','slope','ca','thal']\ncon_cols = ['age','trestbps','chol','thalach','oldpeak']","eebd53b3":"# Thalach\ndf.loc[ df['thalach'] <= 110, 'thalach'] = 0\ndf.loc[ (df['thalach'] > 110) & (df['thalach'] <= 130),'thalach'] = 1\ndf.loc[ (df['thalach'] > 130) & (df['thalach'] <= 150),'thalach'] = 2\ndf.loc[ (df['thalach'] > 150) & (df['thalach'] <= 170),'thalach'] = 3\ndf.loc[ (df['thalach'] > 170) & (df['thalach'] <= 190),'thalach'] = 4\ndf.loc[df['thalach'] > 190,'thalach'] = 5\n\n# Thal\ndf.loc[df['thal'] == 0,'thal'] = 2\ndf.loc[df['thal'] == 1,'thal'] = 2\n\n# Slope\ndf.loc[df['slope'] == 0,'slope'] = 1\n\n# Restecg\ndf.loc[df['restecg'] == 2,'restecg'] = 1\n\ndf['age'] = df['age'].astype(float)\ndf['trestbps'] = df['trestbps'].astype(float)\ndf['chol'] = df['chol'].astype(float)\n\n# Chol\ndf.loc[ df['chol'] <= 100, 'chol'] = 0\ndf.loc[ (df['chol'] > 100) & (df['chol'] <= 150),'chol'] = 1\ndf.loc[ (df['chol'] > 150) & (df['chol'] <= 200),'chol'] = 2\ndf.loc[ (df['chol'] > 200) & (df['chol'] <= 250),'chol'] = 3\ndf.loc[ (df['chol'] > 250) & (df['chol'] <= 300),'chol'] = 4\ndf.loc[ (df['chol'] > 300) & (df['chol'] <= 350),'chol'] = 5\ndf.loc[ (df['chol'] > 350) & (df['chol'] <= 400),'chol'] = 6\ndf.loc[df['chol'] > 400,'chol'] = 0\n\n#trestbps\ndf.loc[ df['trestbps'] <= 90, 'trestbps'] = 0\ndf.loc[ (df['trestbps'] > 90) & (df['trestbps'] <= 120),'trestbps'] = 1\ndf.loc[ (df['trestbps'] > 120) & (df['trestbps'] <= 150),'trestbps'] = 2\ndf.loc[ (df['trestbps'] > 150) & (df['trestbps'] <= 190),'trestbps'] = 3\ndf.loc[df['trestbps'] > 190,'trestbps'] = 4\n","ad278d04":"df['AgeBand'] = pd.cut(df['age'], 5)\ndf[['AgeBand', 'target']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","80e41fdf":"df.loc[ df['age'] <= 39, 'age'] = 0\ndf.loc[ (df['age'] > 39) & (df['age'] <= 48),'age'] = 1\ndf.loc[ (df['age'] > 48) & (df['age'] <= 58),'age'] = 2\ndf.loc[ (df['age'] > 58) & (df['age'] <= 68),'age'] = 3\ndf.loc[df['age'] > 68,'age'] = 4","5890d089":"df.drop('AgeBand',inplace=True,axis=1)\ndf.head()","0ab98d39":"df['OldpeakBand'] = pd.cut(df['oldpeak'], 5)\ndf[['OldpeakBand', 'target']].groupby(['OldpeakBand'], as_index=False).mean().sort_values(by='OldpeakBand', ascending=True)","70e112fd":"df.loc[ df['oldpeak'] <= 1.24, 'oldpeak'] = 0\ndf.loc[ (df['oldpeak'] > 1.24) & (df['oldpeak'] <= 2.48),'oldpeak'] = 1\ndf.loc[ (df['oldpeak'] > 2.48) & (df['oldpeak'] <= 3.72),'oldpeak'] = 2\ndf.loc[ (df['oldpeak'] > 3.72) & (df['oldpeak'] <= 4.96),'oldpeak'] = 3\ndf.loc[df['oldpeak'] > 6.2,'oldpeak'] = 4","2053023a":"df.drop('OldpeakBand',inplace=True,axis=1)\ndf.head()","4b07f4a7":"X = df.drop(['target'],axis=1)\ny = df[['target']]","db85852f":"print('X Shape', X.shape)\nprint('Y Shape',y.shape)","0e9efbb9":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state=42)\n\nprint('Number transations x_train df',X_train.shape)\nprint('Number transations x_test df',X_test.shape)\nprint('Number transations y_train df',y_train.shape)\nprint('Number transations y_test df',y_test.shape)","1313fecc":"models = []\nmodels.append(['RidgeClassifier',RidgeClassifier()])\nmodels.append(['XGBClassifier',XGBClassifier(learning_rate=0.1,objective='binary:logistic',random_state=0,eval_metric='mlogloss')])\nmodels.append(['Logistic Regression',LogisticRegression(random_state=0)])\nmodels.append(['SVM',SVC(random_state=0)])\nmodels.append(['KNeigbors',KNeighborsClassifier()])\nmodels.append(['GaussianNB',GaussianNB()])\nmodels.append(['BernoulliNB',BernoulliNB()])\nmodels.append(['DecisionTree',DecisionTreeClassifier(random_state=0)])\nmodels.append(['RandomForest',RandomForestClassifier(random_state=0)])\nmodels.append(['AdaBoostClassifier',AdaBoostClassifier()])\nmodels.append(['MLPClassifier',MLPClassifier()])\nmodels.append(['ExtraTreesClassifier',ExtraTreesClassifier()])","92f4ce94":"lst_1 = []\nfor m in range(len(models)):\n    lst_2 = []\n    model = models[m][1]\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    cm = confusion_matrix(y_test,y_pred)\n    accuracies = cross_val_score(estimator= model, X = X_train,y = y_train, cv=10)\n\n# k-fOLD Validation\n    roc = roc_auc_score(y_test,y_pred)\n    precision = precision_score(y_test,y_pred)\n    recall = recall_score(y_test,y_pred)\n    f1 = f1_score(y_test,y_pred)\n    print(models[m][0],':')\n    print(cm)\n    print('Accuracy Score: ',accuracy_score(y_test,y_pred))\n    print('')\n    print('K-Fold Validation Mean Accuracy: {:.2f} %'.format(accuracies.mean()*100))\n    print('')\n    print('Standard Deviation: {:.2f} %'.format(accuracies.std()*100))\n    print('')\n    print('ROC AUC Score: {:.2f} %'.format(roc))\n    print('')\n    print('Precision: {:.2f} %'.format(precision))\n    print('')\n    print('Recall: {:.2f} %'.format(recall))\n    print('')\n    print('F1 Score: {:.2f} %'.format(f1))\n    print('-'*40)\n    print('')\n    lst_2.append(models[m][0])\n    lst_2.append(accuracy_score(y_test,y_pred)*100)\n    lst_2.append(accuracies.mean()*100)\n    lst_2.append(accuracies.std()*100)\n    lst_2.append(roc)\n    lst_2.append(precision)\n    lst_2.append(recall)\n    lst_2.append(f1)\n    lst_1.append(lst_2)","da6f0e47":"df2 = pd.DataFrame(lst_1,columns=['Model','Accuracy','K-Fold Mean Accuracy','Std.Deviation','ROC_AUC','Precision','Recall','F1 Score'])\n\ndf2.sort_values(by=['Accuracy','K-Fold Mean Accuracy'],inplace=True,ascending=False)\ndf2\n\n# COMPARE","33e901a2":"fig = plt.figure(figsize=(12,12))\nsns.barplot(x='Accuracy',y='Model',data=df2,color='b')\nplt.title('Model Compare Graphic');","c62da6da":"grid_models = [(GaussianNB(),[{'var_smoothing': np.logspace(0,-9, num=100)}]),\n               (XGBClassifier(), [{'learning_rate': [0.01, 0.05, 0.1], 'eval_metric': ['error']}]),\n               (KNeighborsClassifier(),[{'n_neighbors':[5,7,8,10], 'metric': ['euclidean', 'manhattan', 'chebyshev', 'minkowski']}]), \n               (DecisionTreeClassifier(),[{'criterion':['gini','entropy'],'random_state':[0]}]), \n               (RandomForestClassifier(),[{'n_estimators':[100,150,200],'criterion':['gini','entropy'],'random_state':[0]}])\n               ]","ca78e0ff":"for i,j in grid_models:\n    grid = GridSearchCV(estimator=i,param_grid = j, scoring = 'accuracy',cv = 10)\n    grid.fit(X_train,y_train)\n    best_accuracy = grid.best_score_\n    best_param = grid.best_params_\n    print(' {}: \\n Best Accuracy: {:.2f} %'.format(i,best_accuracy*100))\n    print('')\n    print('-'*25)\n    print('')","812ae72d":"classifier = SVC(probability=True)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ny_prob = classifier.predict_proba(X_test)[:,1]\ncm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {roc_auc_score(y_test, y_prob)}')\nprint('Accuracy Score: ',accuracy_score(y_test, y_pred))\n\n# Visualizing Confusion Matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15}, \n            yticklabels = ['No', 'yes'], xticklabels = ['Predicted no', 'Predicted yes'])\nplt.yticks(rotation = 0)\nplt.show()","8492301b":"### 2.3 Hist Plot","3921cfac":"## 1. Introduction\n### 1.1. Importing Libraries","f4bffda8":"### 1.3. Missing Values","0a92b037":"### 1.2. Importing Dataset","f4cb9ac9":"***Thanks for read. Please Vote.***","bf088994":"## 2. Data Visualization\n\n### 2.1 Corr Heat Map","25329118":"### 2.5 Violin Plot","33c3cee0":"# HEARTH DISEASE\n\n![](https:\/\/www.canwelivebetter.bayer.com\/sites\/default\/files\/2018-05\/NEW_Heartbeat_looping_GIF_NORMAL_0.gif)","77e73a4f":"### 2.4 Dist Plot","429dbee5":"### 2.2 Count Plot","b634a618":"### 2.6 Box Plot"}}