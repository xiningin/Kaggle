{"cell_type":{"cef79375":"code","74b565aa":"code","050bf991":"code","7f84291d":"code","5ee9e2c6":"code","1485bab9":"code","53d07844":"code","d8b71999":"code","f7bec07a":"code","c69450ec":"code","9bdb4b71":"code","98348e57":"code","c55fc1f2":"code","8fc14196":"code","58c2e5e4":"code","4fc6d884":"code","36bedd34":"code","8a3d1ef5":"code","f4cc3d82":"code","3dc62243":"code","beae4093":"code","e7a12cce":"code","89919c5e":"code","e4a0e2df":"code","24aff21b":"code","4703b55d":"code","68953735":"code","d1710e9a":"code","107f2c56":"code","18c77238":"code","d2bbc65d":"code","67f71baf":"code","067d6235":"code","e188680b":"code","b2a4f9ba":"code","5bf48a1c":"markdown","0c132c88":"markdown","eb87bd39":"markdown","48883b3e":"markdown","a4bd0e13":"markdown","86a66c7f":"markdown","e748db2c":"markdown","cb4d9ff3":"markdown","d0d52eb6":"markdown","2fa9ff51":"markdown","0a3c558d":"markdown","1b4ba387":"markdown","12aadd66":"markdown","92251077":"markdown","e52b5634":"markdown","78488fc9":"markdown","006086f6":"markdown","963ca755":"markdown","d66596f5":"markdown","a6b6a47c":"markdown","0eae8d4a":"markdown"},"source":{"cef79375":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","74b565aa":"data = pd.read_csv('..\/input\/500_Person_Gender_Height_Weight_Index.csv')\ndata_visual = pd.read_csv('..\/input\/500_Person_Gender_Height_Weight_Index.csv')","050bf991":"data.head()","7f84291d":"data.shape","5ee9e2c6":"data.isnull().any()","1485bab9":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nimport matplotlib\n%matplotlib inline","53d07844":"sns.__version__","d8b71999":"def convert_status_to_description(x):\n    if x['Index'] == 0:\n        return 'Extremely Weak'\n    elif x['Index'] == 1:\n        return 'Weak'\n    elif x['Index'] == 2:\n        return 'Normal'\n    elif x['Index'] == 3:\n        return 'Overweight'\n    elif x['Index']== 4:\n        return 'Obesity'\n    elif x['Index'] == 5:\n        return 'Extreme Obesity'\ndata_visual['Status'] = data_visual.apply(convert_status_to_description,axis=1)\ndata_visual.head()","f7bec07a":"def convert_gender_to_label(x):\n    if x['Gender'] == 'Male':\n        return 1\n    elif x['Gender'] == 'Female':\n        return 0\ndata_visual['gender_lbl'] = data_visual.apply(convert_gender_to_label,axis=1)\ndata_visual.head()","c69450ec":"sns.set_style('whitegrid')\n\n# colors = ['#66c2a5','#fc8d62','#8da0cb','#e78ac3','#a6d854','#ffd92f']\n## http:\/\/colorbrewer2.org\/#type=qualitative&scheme=Set2&n=6\n\n# plt.scatter(x='Height',y='Weight',data=data_visual,c=data_visual['Index'],\n#             cmap=matplotlib.colors.ListedColormap(colors))\n# plt.colorbar()\n\n## https:\/\/stackoverflow.com\/questions\/21654635\/scatter-plots-in-pandas-pyplot-how-to-plot-by-category\n\nsns.lmplot( x='Height', y='Weight', data=data_visual, \n           fit_reg=False, \n           hue='Status', \n           legend=False, \n           palette='Set1',\n           size = 8, \n           aspect = 1\n          )\nax1 = plt.gca()\nax1.set_title('Height vs Weight', size=15)\n\n## https:\/\/stackoverflow.com\/questions\/4700614\/how-to-put-the-legend-out-of-the-plot\n\n# Shrink current axis by 20%\nbox = ax1.get_position()\nax1.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\nax1.legend(loc='center left', bbox_to_anchor=(1, 0.5),prop={'size': 15})","9bdb4b71":"groups = data_visual.groupby('Status')\n\nfrom mpl_toolkits.mplot3d import Axes3D\ncolors = ['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33']\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111, projection='3d')\n\n# ax.scatter(data_visual['Height'],data_visual['Weight'] , data_visual['gender_lbl'], \n#            c=data_visual['Index'],\n#            cmap=matplotlib.colors.ListedColormap(colors))\n\n\nfor name, group in groups:\n    ax.scatter(group.Height, group.Weight, group.gender_lbl, label=name)\nax.set_xlabel('Height')\nax.set_ylabel('Weight')\nax.set_zlabel('Gender : 1(Male)  0(Female)')\nax.set_title('3d plot BMI')\n\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5), prop={'size': 15})\nplt.show()","98348e57":"people = data_visual['Gender'].value_counts() \n# Returns object containing counts of unique values.\n# The resulting object will be in descending order so that the first element is the most frequently-occurring element. \n# Excludes NA values by default.\nprint(type(people))\npeople.head()","c55fc1f2":"categories = data_visual['Status'].value_counts() \ncategories","8fc14196":"fig = plt.figure(figsize=(20,8))\nplt.title(\"Total Data\",loc='center',weight=10,size=15)\nplt.xticks([]) # to disable xticks\nplt.yticks([]) # to disable yticks\n\n# first pie-plot\nax1 = fig.add_subplot(121)\nax1.axis('equal')\nexplode = (0.01,)*(len(people))\n\nwedges, texts, autotexts =  ax1.pie(people,\n                                    radius=0.8,\n                                    explode=explode,\n                                    labels=['female','male'],\n                                    colors=['#f7879a','#49759c'],\n                                    autopct=\"%1.1f%%\",\n                                    pctdistance=0.7,\n                                    textprops=dict(color='k'),\n                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }\n                                    )\nplt.setp(autotexts,size=17)\nplt.setp(texts,size=15)\nmy_circle = plt.Circle((0,0),0.5,color='white')\np = plt.gcf() # get current figure reference\np.gca().add_artist(my_circle) # get current axes\n\n# Second pie-plot\nax2 = fig.add_subplot(122)\nax2.axis('equal')\nexplode = (0.01,)*(len(categories))\nwedges2, texts2, autotexts2 =  ax2.pie(categories,\n                                    radius=0.8,\n                                    explode=explode,\n                                    labels=['Extreme Obesity','Obesity','Normal','Overweight','Weak','Extremely Weak'],\n                                    autopct=\"%1.1f%%\",\n                                    pctdistance=0.5,\n                                    textprops=dict(color='k'),\n                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }\n                                    )\nplt.setp(autotexts2,size=17)\nplt.setp(texts2,size=15)\nmy_circle = plt.Circle((0,0),0.5,color='white')\np = plt.gcf() # get current figure reference\np.gca().add_artist(my_circle) # get current axes","58c2e5e4":"data_visual_male = data_visual[data_visual['Gender']=='Male']\ndata_visual_male.head()","4fc6d884":"data_visual_male_categories = data_visual_male['Status'].value_counts()\ndata_visual_male_categories","36bedd34":"data_visual_female = data_visual[data_visual['Gender']=='Female']\ndata_visual_female.head()","8a3d1ef5":"data_visual_female_categories = data_visual_female['Status'].value_counts()\ndata_visual_female_categories","f4cc3d82":"fig = plt.figure(figsize=(20,8))\nplt.title(\"Female vs Male comparison\",loc='center',weight=10,size=15)\nplt.xticks([]) # to disable xticks\nplt.yticks([]) # to disable yticks\n\n# first pie-plot\nax1 = fig.add_subplot(121)\nax1.axis('equal')\nexplode = (0.01,0.01,0.2,0.01,0.01,0.01)\n\nwedges, texts, autotexts =  ax1.pie(data_visual_female_categories,\n                                    radius=0.8,\n                                    explode=explode,\n                                    labels=['Extreme Obesity','Obesity','Normal','Overweight','Extremely Weak','Weak'],\n                                    autopct=\"%1.1f%%\",\n                                    pctdistance=0.45,\n                                    textprops=dict(color='k'),\n                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }\n                                    )\nplt.setp(autotexts,size=17)\nplt.setp(texts,size=15)\nmy_circle = plt.Circle((0,0),0.5,color='white')\np = plt.gcf() # get current figure reference\np.gca().add_artist(my_circle) # get current axes\nax1.text(0,0,'Female',size=20,color='#1fa774',horizontalalignment='center',weight='bold')\n\n# Second pie-plot\nax2 = fig.add_subplot(122)\nax2.axis('equal')\nexplode = (0.01,0.01,0.01,0.2,0.01,0.01)\nwedges2, texts2, autotexts2 =  ax2.pie(data_visual_male_categories,\n                                    radius=0.8,\n                                    explode=explode,\n                                    labels=['Extreme Obesity','Obesity','Overweight','Normal','Weak','Extremely Weak'],\n                                    autopct=\"%1.1f%%\",\n                                    pctdistance=0.45,\n                                    textprops=dict(color='k'),\n                                    wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'w' }\n                                    )\nplt.setp(autotexts2,size=17)\nplt.setp(texts2,size=15)\nmy_circle = plt.Circle((0,0),0.5,color='white')\np = plt.gcf() # get current figure reference\np.gca().add_artist(my_circle) # get current axes\nax2.text(0,0,'Male',size=20,color='#1fa774',horizontalalignment='center',weight='bold')","3dc62243":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlbl_enc = LabelEncoder()\ndata.iloc[:,0] = lbl_enc.fit_transform(data.iloc[:,0])\none_hot_enc_for_gender = OneHotEncoder(categorical_features = [0])\ndata = one_hot_enc_for_gender.fit_transform(data).toarray()","beae4093":"df = pd.DataFrame(data)\ndf.head()","e7a12cce":"from sklearn.preprocessing import StandardScaler\nstd_sc = StandardScaler()\ndf.iloc[:,0:-1] = std_sc.fit_transform(df.iloc[:,0:-1])","89919c5e":"df.head()","e4a0e2df":"X = df.iloc[:,:-1]\ny = df.iloc[:,-1]","24aff21b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state=0)","4703b55d":"print(type(X_train))\nX_train.head() ","68953735":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=200, criterion='entropy', random_state=0)\nrfc.fit(X_train, y_train)","d1710e9a":"y_pred_rfc = rfc.predict(X_test)","107f2c56":"from sklearn.metrics import confusion_matrix\nrfc_cm = confusion_matrix(y_test, y_pred_rfc)\nrfc_cm","18c77238":"from sklearn.metrics import accuracy_score\nrfc_acc = accuracy_score(y_test, y_pred_rfc)\nrfc_acc*100","d2bbc65d":"def trees_in_forest_vs_acc(trees, X_train=X_train, y_train=y_train, X_test=X_test, y_test=y_test):\n    rfc = RandomForestClassifier(n_estimators=trees, criterion='entropy', random_state=0)\n    rfc.fit(X_train, y_train)\n    y_pred = rfc.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    return acc","67f71baf":"trees_list_for_randomForest = [100, 200, 300, 500, 700, 1000]\nacc_scores_for_trees_RFC = []\nfor x in trees_list_for_randomForest:\n    acc_scores_for_trees_RFC.append(trees_in_forest_vs_acc(x))\nacc_scores_for_trees_RFC","067d6235":"tree_vs_acc = pd.DataFrame({'No. of trees in Forest':trees_list_for_randomForest,\n              'Accuracy scores for Random Forest Classification':acc_scores_for_trees_RFC})\n\n\nsns.pointplot(x='No. of trees in Forest',y='Accuracy scores for Random Forest Classification',data=tree_vs_acc,color='#98568d')\n\nplt.title('Trees in forest vs Accuracy',size=18)\nplt.xlabel('No. of trees in Forest',size=15)\nplt.ylabel('Accuracy scores for Random Forest Classification',size=15)\n\n\ntree_vs_acc.head()","e188680b":"def health_test(gender, height, weight):\n    '''Input gender as Male\/Female, height in cm, weight in Kg'''\n    individual_data_dict = {'Gender':gender, 'Height':height, 'Weight':weight}   \n    individual_data = pd.DataFrame(data = individual_data_dict, index=[0])\n    individual_data.iloc[:,0] = lbl_enc.transform(individual_data.iloc[:,0])\n    individual_data = one_hot_enc_for_gender.transform(individual_data).toarray()\n    df = pd.DataFrame(individual_data)\n    df.iloc[:,:] = std_sc.transform(df.iloc[:,:])\n    y_pred = rfc.predict(individual_data)\n    if y_pred == 0:\n        return 'Extremely Weak'\n    elif y_pred == 1:\n        return 'Weak'\n    elif y_pred == 2:\n        return 'Normal'\n    elif y_pred == 3:\n        return 'Overweight'\n    elif y_pred == 4:\n        return 'Obesity'\n    elif y_pred == 5:\n        return 'Extreme Obesity'\n","b2a4f9ba":"sample_person = ['Female',155,78]\nsample_result = health_test(*sample_person)\nsample_result","5bf48a1c":"### Adding additional columns to DataFrame as per need","0c132c88":"# Machine Learning","eb87bd39":"### Splitting data into training and testing sets","48883b3e":"### Calculation of optimal number of trees in Random Forest","a4bd0e13":"### Importing libraries and Encoding categorical values","86a66c7f":"### Importing data and basic libraries","e748db2c":"### Doughnut plot (pie-plot) representing Health Status for Female and Male","cb4d9ff3":"# Analysing data","d0d52eb6":"### Scatter plot showing different categories for all points in data","2fa9ff51":"**We would have applied an Imputer object for handling missing values, if there were any.**","0a3c558d":"### Importing visualization and plotting libraries","1b4ba387":"### 3-D Scatter plot to differentiate b\/w male and female","12aadd66":"### Feature Scaling","92251077":"### Doughnut plot (pie-plot) representing features (Gender, Health Status) for all people","e52b5634":"**Visualisation of No. of Trees and their corresponding Accracy scores**","78488fc9":"**Counting people based on Gender, Health status, etc.**","006086f6":"### Code snippet for testing other person's Health Status based on the above model","963ca755":"### Missing values ?","d66596f5":"### Accuracy measurements","a6b6a47c":"### Prediciting results","0eae8d4a":"### Ensemble Learning (Random Forest Classification)"}}