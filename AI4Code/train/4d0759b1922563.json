{"cell_type":{"c544aa11":"code","045c7527":"code","7cad9831":"code","0a689258":"code","0151beaf":"code","acb377c3":"code","f7378d03":"code","acd7671e":"code","8d162b80":"code","136a4fa9":"code","fb4403d6":"code","66cf280a":"code","24698d23":"code","d8e922cc":"code","93c19570":"code","ab2a8cf6":"code","62b06592":"code","b4890901":"code","06ab95a5":"code","24f76f21":"code","f9613dba":"code","ff9670f8":"code","52203b38":"code","07345e72":"code","99c80b62":"code","e0418ef2":"code","285f6a2a":"code","c64b4f4d":"code","0361e9d3":"code","e6878626":"code","e39704ad":"code","a59bf4f0":"code","7fea4ed2":"code","aeaccd92":"code","0ab6a537":"code","d18d1d1d":"code","16e32ac7":"code","1a9413de":"code","ac6fe1fd":"code","afbfc018":"code","200e5f5d":"code","522e7008":"code","2b490fb6":"code","2583fe9d":"code","b2516bd6":"code","3a333116":"code","868d62c2":"code","0c16f131":"code","3c4d8114":"code","7e771486":"code","4b1324e5":"code","79e8e5d9":"code","4f7294c6":"code","4958dbe8":"code","9d0837fb":"code","4c8a56f2":"code","6b894761":"code","6674f6b5":"markdown","b69548e3":"markdown","e42abead":"markdown","a4cadc9e":"markdown","71532a3d":"markdown","db7bb39c":"markdown","2ab0e274":"markdown","192e4cda":"markdown","d7233242":"markdown","c486595c":"markdown","70cfba12":"markdown","ce35d7bc":"markdown","ece63287":"markdown","b1fa8f22":"markdown","377fccfa":"markdown","7e0a3b6e":"markdown","823ae8ba":"markdown","1df519a5":"markdown","5943234b":"markdown","b61a9ea1":"markdown","a4155721":"markdown","8f89462e":"markdown","2cd0bc82":"markdown","3c1a05b8":"markdown","1a729590":"markdown","1c41f50c":"markdown","fea492b2":"markdown","60a57d15":"markdown","b83d2c92":"markdown","8f0fa36d":"markdown","34e7a373":"markdown","174f9a68":"markdown","caecbb7b":"markdown","3015a62f":"markdown","12b951d9":"markdown","029ece83":"markdown","52e34fc2":"markdown","0ab95176":"markdown","eb77bef5":"markdown","ab1ccd41":"markdown","b970fbd5":"markdown","337adc59":"markdown","67c04ce1":"markdown","06c8b04e":"markdown","9448529c":"markdown","0fe828d4":"markdown","439daea2":"markdown","11c4c270":"markdown","16094294":"markdown","e2fb05f1":"markdown","4ea237ce":"markdown","9fe38f0e":"markdown"},"source":{"c544aa11":"from IPython.display import Image\nImage(\"..\/input\/ipl-image\/ipl.jpg\")","045c7527":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","7cad9831":"!pip install openpyxl --quiet","0a689258":"match= pd.read_csv('..\/input\/ipl-data-set\/matches.csv', index_col='id', parse_dates=True)\nhome_and_away= pd.read_csv('..\/input\/ipl-data-set\/teamwise_home_and_away.csv')\ndelivery= pd.read_csv('..\/input\/ipl-data-set\/deliveries.csv')\nruns_avg_strikerate= pd.read_csv('..\/input\/ipl-data-set\/most_runs_average_strikerate.csv')\nteam= pd.read_csv('..\/input\/ipl-data-set\/teams.csv')\nplayer= pd.read_excel('..\/input\/ipl-data-set\/Players.xlsx')","0151beaf":"# Viewing the top 5 values of the dataset\nmatch.head()\n\n# in order to view bottom 5 entries, we can do\n#df.tail()\n\n#in order to view more than 5 entries, we can enter any integer value into '()'.\n#Ex: df.head(10) or df.tail(15), etc","acb377c3":"# Now let us check for the shape of the dataset and also that are any null values present in our dataset.\n# For that,\n\nprint('shape of the dataset=', match.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\nmatch.isnull().sum()","f7378d03":"match['team1'].value_counts()\n#match['team2'].value_counts()","acd7671e":"# Function to identify numeric features:\n\ndef numeric_features(dataset):\n    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n    return dataset[numeric_col].head()\n    \nnumeric_columns = numeric_features(match)\nprint(\"Numerical Features:\")\nprint(numeric_columns)\n\nprint(\"====\"*20)\n\n\n\n\n# Function to identify categorical features:\n\ndef categorical_features(dataset):\n    categorical_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n    return dataset[categorical_col].head()\n\ncategorical_columns = categorical_features(match)\nprint(\"Categorical Features:\")\nprint(categorical_columns)\n\nprint(\"====\"*20)\n\n\n\n# Function to check the datatypes of all the columns:\n\ndef check_datatypes(dataset):\n    return dataset.dtypes\n\nprint(\"Datatypes of all the columns:\")\ncheck_datatypes(match)","8d162b80":"home_and_away.head()","136a4fa9":"print('shape of the dataset=', home_and_away.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\nhome_and_away.isnull().sum()","fb4403d6":"# Function to identify numeric features:\n\ndef numeric_features(dataset):\n    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n    return dataset[numeric_col].head()\n    \nnumeric_columns = numeric_features(home_and_away)\nprint(\"Numerical Features:\")\nprint(numeric_columns)\n\nprint(\"====\"*20)\n\n\n\n\n# Function to identify categorical features:\n\ndef categorical_features(dataset):\n    categorical_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n    return dataset[categorical_col].head()\n\ncategorical_columns = categorical_features(home_and_away)\nprint(\"Categorical Features:\")\nprint(categorical_columns)\n\nprint(\"====\"*20)\n\n\n\n# Function to check the datatypes of all the columns:\n\ndef check_datatypes(dataset):\n    return dataset.dtypes\n\nprint(\"Datatypes of all the columns:\")\ncheck_datatypes(home_and_away)","66cf280a":"delivery.head()","24698d23":"print('shape of the dataset=', delivery.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\ndelivery.isnull().sum()","d8e922cc":"# Function to identify numeric features:\n\ndef numeric_features(dataset):\n    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n    return dataset[numeric_col].head()\n    \nnumeric_columns = numeric_features(delivery)\nprint(\"Numerical Features:\")\nprint(numeric_columns)\n\nprint(\"====\"*20)\n\n\n\n\n# Function to identify categorical features:\n\ndef categorical_features(dataset):\n    categorical_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n    return dataset[categorical_col].head()\n\ncategorical_columns = categorical_features(delivery)\nprint(\"Categorical Features:\")\nprint(categorical_columns)\n\nprint(\"====\"*20)\n\n\n\n# Function to check the datatypes of all the columns:\n\ndef check_datatypes(dataset):\n    return dataset.dtypes\n\nprint(\"Datatypes of all the columns:\")\ncheck_datatypes(delivery)","93c19570":"runs_avg_strikerate.head()","ab2a8cf6":"print('shape of the dataset=', runs_avg_strikerate.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\nruns_avg_strikerate.isnull().sum()","62b06592":"#sns.distplot(runs_avg_strikerate['average'])\n#runs_avg_strikerate.describe()\nsns.boxplot(runs_avg_strikerate['average'])","b4890901":"runs_avg_strikerate.fillna(runs_avg_strikerate['average'].median(), axis=1, inplace=True)","06ab95a5":"runs_avg_strikerate.isnull().sum()","24f76f21":"# Function to identify numeric features:\n\ndef numeric_features(dataset):\n    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n    return dataset[numeric_col].head()\n    \nnumeric_columns = numeric_features(runs_avg_strikerate)\nprint(\"Numerical Features:\")\nprint(numeric_columns)\n\nprint(\"====\"*20)\n\n\n\n\n# Function to identify categorical features:\n\ndef categorical_features(dataset):\n    categorical_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n    return dataset[categorical_col].head()\n\ncategorical_columns = categorical_features(runs_avg_strikerate)\nprint(\"Categorical Features:\")\nprint(categorical_columns)\n\nprint(\"====\"*20)\n\n\n\n# Function to check the datatypes of all the columns:\n\ndef check_datatypes(dataset):\n    return dataset.dtypes\n\nprint(\"Datatypes of all the columns:\")\ncheck_datatypes(runs_avg_strikerate)","f9613dba":"team.head()","ff9670f8":"player.head()","52203b38":"print('shape of the dataset=', player.shape)\n\nprint(' \\nThe null count of each column of the dataset are as follows:')\nplayer.isnull().sum()","07345e72":"match['winner'].value_counts()","99c80b62":"plt.figure(figsize=(15,5))\nmatch_wins=match['winner'].value_counts()\nmatch_wins.plot.bar()","e0418ef2":"match['player_of_match'].value_counts()[0:10]","285f6a2a":"match['player_of_match'].value_counts()[0:5].keys()","c64b4f4d":"plt.figure(figsize=(15,10))\nplt.bar(list(match['player_of_match'].value_counts()[0:10].keys()), list(match['player_of_match'].value_counts()[0:10]))\nplt.show()","0361e9d3":"match['city'].value_counts()","e6878626":"plt.figure(figsize=(15,10))\nmatch['city'].value_counts().plot.bar()","e39704ad":"match['result'].value_counts()","a59bf4f0":"plt.figure(figsize=(15,10))\nplt.pie(list(match['result'].value_counts()), labels= list(match['result'].value_counts().keys()),autopct='%0.1f%%')\nplt.show()","7fea4ed2":"total_match=match['team1'].value_counts()+match['team2'].value_counts()\ntotal_match.sort_values(ascending=False)","aeaccd92":"plt.figure(figsize=(15,5))\ntotal_match.sort_values(ascending=False).plot.bar()","0ab6a537":"umpires= match['umpire1'].value_counts()+match['umpire2'].value_counts()+match['umpire3'].value_counts()\numpires.sort_values(ascending= False)[0:20]","d18d1d1d":"plt.figure(figsize=(15,5))\numpires.sort_values(ascending=False).head(20).plot.bar()","16e32ac7":"big_mar= match.sort_values('win_by_runs',ascending = False).reset_index(drop = True)\nbig_mar = big_mar[:10]\nbig_mar = big_mar[['winner','win_by_runs']]\nprint(big_mar)","1a9413de":"plt.figure(figsize=(15,10))\nsns.barplot(x= big_mar['winner'], y= big_mar['win_by_runs'])","ac6fe1fd":"bf = delivery.groupby('fielder').apply(lambda x : x).reset_index()\nbf = delivery.groupby('fielder').count() \nbf = bf.dismissal_kind.reset_index(name='Dismissals')\nbf = bf.sort_values(by='Dismissals',ascending=False)\nbf = bf[0:10]\n\nplt.figure(figsize=(10,8))\nplt.title(\"Best IPL Fielders\")\nplt.bar(bf.fielder , bf.Dismissals)\nplt.xlabel(\"Best Fielders\")\nplt.ylabel(\"No of  Dismissals\")\ncount = 0\nfor i in bf.Dismissals:\n    plt.text(count-0.2,i-4,str(i))\n    count+=1\nplt.xticks(rotation = 90)\nplt.yticks()\nplt.show()","afbfc018":"home_wins=home_and_away[['team','home_win_percentage']]\nhome_wins.sort_values('home_win_percentage',ascending=False)","200e5f5d":"plt.figure(figsize=(15,10))\nhome_wins.sort_values('home_win_percentage',ascending=False).plot.bar(x='team',y='home_win_percentage')\nplt.show()","522e7008":"away_wins=home_and_away[['team','away_win_percentage']]\naway_wins.sort_values('away_win_percentage',ascending=False)","2b490fb6":"plt.figure(figsize=(15,10))\naway_wins.sort_values('away_win_percentage',ascending=False).plot.bar(x='team',y='away_win_percentage')\nplt.show()","2583fe9d":"runs_avg_strikerate.sort_values('total_runs',ascending=False).head(10)","b2516bd6":"runs_avg_strikerate.sort_values('total_runs',ascending=False).head(10).plot.bar(x='batsman',y='total_runs')","3a333116":"delivery.head()","868d62c2":"mumbai= delivery[delivery['inning']==3]\nmumbai.head(10)","0c16f131":"mumbai.info()","3c4d8114":"mumbai['batsman'].value_counts()","7e771486":"plt.figure(figsize=(15,5))\nmumbai['batsman'].value_counts().plot.bar()","4b1324e5":"mumbai['dismissal_kind'].value_counts()","79e8e5d9":"plt.figure(figsize=(15,10))\nplt.pie(list(mumbai['dismissal_kind'].value_counts()), labels= list(mumbai['dismissal_kind'].value_counts().keys()),\n        autopct='%0.1f%%')\nplt.show()","4f7294c6":"rcb= delivery[delivery['inning']==2]\nrcb.head()","4958dbe8":"rcb['batsman'].value_counts()[0:10]","9d0837fb":"plt.figure(figsize=(15,5))\nrcb['batsman'].value_counts().head(10).plot.bar()","4c8a56f2":"rcb['dismissal_kind'].value_counts()","6b894761":"plt.figure(figsize=(15,15))\nplt.pie(list(rcb['dismissal_kind'].value_counts()), labels= list(rcb['dismissal_kind'].value_counts().keys()),\n        autopct='%0.1f%%')\nplt.show()","6674f6b5":"- From the above plot, we can see that maximum number of matches are won by **Mumbai Indians** according to this dataset, that contains the information from **2008 to 2019**.","b69548e3":"- We can see that 44.4% of the times, the player was dismissed due to `catch` of the ball.\n- 33% of the reason for batsman dismissal is `run out`.\n- Reamaining 22.2% is divided equally as `LBW` and `clean bowled`, as the reason for player dismissal.","e42abead":"#### **11. Most Runs scored by batters (Top 10)**","a4cadc9e":"## ***Importing all the 6 datasets***","71532a3d":"- We can see that 60.6% of the time, player was dismissed when there was `catch` of the ball.\n- The least reason for player dismissal was `obstructing the field`.","db7bb39c":"#### **6. Total number of umpires so far (Top 20)**","2ab0e274":"The Indian Premier League (IPL) is a professional Twenty20 cricket league in India usually contested between March and May of every year by eight teams representing eight different cities or states in India.The league was founded by the Board of Control for Cricket in India (BCCI) in 2007. The IPL has an exclusive window in ICC Future Tours Programme.\n\nThe IPL is the most-attended cricket league in the world and in 2014 was ranked sixth by average attendance among all sports leagues.In 2010, the IPL became the first sporting event in the world to be broadcast live on YouTube.The brand value of the IPL in 2019 was \u20b9475 billion, according to Duff & Phelps. According to BCCI, the 2015 IPL season contributed \u20b911.5 billion to the GDP of the Indian economy.","192e4cda":"- This plot shows that **Mumbai Indians** have played most number of matches, followed by **Royal Challengers Bangalore**.\n- Also, the least matches are played by **Rising Pune Supergiants** and **Kochi Tuskers Kerala**. ","d7233242":"## ***Exploratory Data Analysis (EDA)***","c486595c":"#### **3. Top cities in which matches were played**","70cfba12":"## IPL Data Set\n\n**Task:** Perform EDA Exploratory Data Analysis on the data set\n\n- Link to data set\nhttps:\/\/www.kaggle.com\/ramjidoolla\/ipl-data-set","ce35d7bc":"- Here we can see that there are 516 rows and 6 columns present in our dataset.\n- We can also see that there are 34 null values in the `average` column of our dataset.\n- Also, the column values are somewhat right skewed. So, we can fill the null values instead of removing them completely.\n- From the bpxplot we can see that there are few outlies present in the dataset. So we can fill the null values by the median value, as it is not affected by the outlier.","ece63287":"#### **1. Total wins by every teams so far**","b1fa8f22":"#### **5. Total matches played by team so far**","377fccfa":"### **6. Players.xlsx**","7e0a3b6e":"- From the above plot we can see that **Mumbai Indians** is the team, that has won by maximum number of runs.\n- This is also evident as **MI** is our most winning team.","823ae8ba":"### **2. teamwise_home_and_away.csv**","1df519a5":"## ***Importing necessary libraries***\nThe following code is written in Python 3.x. Libraries provide pre-written functionality to perform necessary tasks.","5943234b":"#### **7. Wins by biggest margin of runs**","b61a9ea1":"#### **8. Best Fielder**","a4155721":"- We can observe that **Gautam Gambhir** gets to bat the most, when batting team was RCB.","8f89462e":"#### **10. Most successful team in away condition**","2cd0bc82":"- From the above graph, we can see that **Mumbai** is the city where most of the matches were played, followed by **Kolkata**.","3c1a05b8":"- Here we can observe that there are no null values present in our dataset.","1a729590":"- From the above graph, we can say that `Rising Pune Supergiant` is the most successful team, when playing in home condition","1c41f50c":"- We don't know yet, if we will require this dataset in our EDA further.\n- So we can keep it as it is, and can modify the dataset, if needed.","fea492b2":"### 2. Royal Challengers Bangalore","60a57d15":"- This dataset only has names of the teams in IPL. So no further information can be drawn here.","b83d2c92":"### Dataset Information\n\nThis Notebook contains 6 datasets. The information about all of them are as follows:-\n\n|**Dataset**|**Content**|\n|----|----|\n|matches.csv|This dataset contains information about details of every ipl matches e.g teams,city and stadium in which match was played,name of all the umpires, winner of toss and toss decision and also the winner.|\n|teamwise_home_and_away.csv|This dataset contains information of how many matches does a team won while playing in home stadium and away and their percentage win-loss.|\n|deliveries.csv|This dataset contains information about the details of every deliveries bowled in ipl.|\n|most_runs_average_strikerate.csv|This dataset has the details about the runs scored by every batter along with their strike rate and average.|\n|teams.csv|This dataset has the name of all the teams that have played in the history of ipl.|\n|Players.xlsx|This dataset has the details of the player including their dob,batting_hand and the country they belonged.|\n\n\nThere are few changes that we can see in the names of the teams, in these datasets. They are:\n- Deccan Chargers is renamed to Sunrisers Hyderabad \n- Delhi Daredevils is renamed to Delhi Capitals\n- Pune Warriors is renamed to Rising Pune Supergiants.","8f0fa36d":"- We can observe that **Chris Gayle** gets to bat the most, when batting team was MI","34e7a373":"#### i. Batsman who gets the chance to bat the most","174f9a68":"- Here we can see that 98.3% of the times, the result of the match was normal.\n- 1.2% of the time, the match was a tie.\n- 0.5% of the time, there was no result of the match. This may have been due to cancellation of the match, with any reason.","caecbb7b":"### **5. teams.csv**","3015a62f":"# ***Team Specific Analysis***\n\n- Here, I will be picking some teams randonly, say `Mumbai Indians` and `Royal Challengers Bangalore` and doing few analysis on them.","12b951d9":"#### i. Batsman who gets the chance to bat the most","029ece83":"### **3. deliveries.csv**","52e34fc2":"- Umpire **S Ravi** has capped most matches as umpire with 114 matches ,followed by **C Shamshuddin** with 83 matches.","0ab95176":"#### **2. Top 10 Man of the matches so far**","eb77bef5":"- Here we can observe that there are 756 rows and 17 columns present in the dataset.\n- We can also see that there are a few null values present in the dataset. Later, if need be, we can treat them, as required.","ab1ccd41":"#### ii. Types of dismissal in the batch when `MI` bats","b970fbd5":"# **Please Upvote my work. That will be the best way to appreciate my work and improve my confidence.**","337adc59":"- Here we can see that there are 179078 rows and 21 columns in our dataset.\n- The columns `player_dismissed`, `dismissal_kind` and `fielder` are almost empty. So we can straight away drop them. But we will keep them for now.","67c04ce1":"- From the above plot, we can see that **Chris Gayle**, aka CH Gayle has been declared player of the match the most of the time, from 2008 to 2019","06c8b04e":"- We find that **Virat Kohli** is the player that scores the highest number of runs, with the strikerate of 131.987351.","9448529c":"### 1. Mumbai Indians","0fe828d4":"#### **9. Most successful team in home condition**","439daea2":"- From the above plot, we can see that **MS Dhoni** is our best fielder, followed by **KD Karthik**.","11c4c270":"## ***Inspecting the datasets***\n\n### **1. matches.csv**","16094294":"#### **4. Frequency of the result column**","e2fb05f1":"#### ii. Types of dismissal in the batch when `RCB` bats","4ea237ce":"- From the above graph, we can say that `Gujarat Lions` is the most successful team, when playing in away condition","9fe38f0e":"### **4. most_runs_average_strikerate.csv**"}}