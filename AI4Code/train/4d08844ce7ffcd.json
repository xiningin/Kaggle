{"cell_type":{"b2e9d1d0":"code","b75bb06d":"code","8c0162d3":"code","435f1198":"code","f4e3824e":"code","2a3cec8f":"code","7f243d81":"code","39f1ea63":"code","2215309e":"code","69f4b01f":"code","80588fb6":"code","1aa36996":"code","f11fa9ca":"code","3caf7739":"code","b9b557ab":"code","517d35b3":"code","dfab9138":"code","caefc1ce":"code","c0bba5ba":"code","667cc3ee":"code","a3ec4572":"code","2007b23a":"code","d1ab28e9":"code","a2bcaab6":"code","a71e3790":"code","e00791c1":"code","00d47024":"code","058b34c3":"code","4565259e":"code","83b954bb":"code","2197cd29":"code","70d9a4c9":"code","1d0b0b8c":"markdown","b67b94a6":"markdown","3c2cd72c":"markdown","abbc573e":"markdown","322bc1d8":"markdown","4adcbf3d":"markdown","feab5e4d":"markdown","edaaeed1":"markdown","3202cd3a":"markdown","bd1758d3":"markdown"},"source":{"b2e9d1d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # for data visualization\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b75bb06d":"train_df= pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_df= pd.read_csv('..\/input\/digit-recognizer\/test.csv')","8c0162d3":"train_df.sample(5)","435f1198":"train_df.shape","f4e3824e":"test_df.shape","2a3cec8f":"train_df.iloc[8672,0]","7f243d81":"# converting dataframe to numpy array\ntrain_df.iloc[4,1:].to_numpy().reshape(28,28)","39f1ea63":"plt.imshow(train_df.iloc[4,1:].to_numpy().reshape(28,28)) # plot training sample data using reshape","2215309e":"# digit visualization\nplt.figure(figsize=(10,10))\nfor i in range(20):\n    plt.subplot(5,5,i+1) # creating subplot\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_df.iloc[i,1:].to_numpy().reshape(28,28))\n    plt.xlabel([train_df.iloc[i,0]])\nplt.show()","69f4b01f":"train_df.dtypes","80588fb6":"X= train_df.drop(['label'], axis='columns')\ny= train_df['label']","1aa36996":"X.shape","f11fa9ca":"from sklearn.model_selection import train_test_split\nX_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 32)\nX_train.shape","3caf7739":"X_train= X_train\/255\nx_test= x_test\/255","b9b557ab":"X_train.shape","517d35b3":"X_train = X_train.to_numpy().reshape(-1,28,28,1)\nX_train.shape","dfab9138":"x_test = x_test.to_numpy().reshape(-1,28,28,1)\nx_test.shape","caefc1ce":"# import tensorflow and keras \nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","c0bba5ba":"model = keras.Sequential([\n    #cnn\n    layers.Conv2D(56, (3,3), padding='same',activation='relu', input_shape=(28,28, 1)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(28, (3,3),padding='same', activation='relu', input_shape=(28,128, 1)),\n    layers.MaxPooling2D((2,2)),\n    layers.Conv2D(14, (3,3),padding='same', activation='relu', input_shape=(28,128, 1)),\n    layers.MaxPooling2D((2,2)),\n    \n    #dense\n    layers.Flatten(),\n    layers.Dense(256, activation='relu'),\n    layers.Dense(128, activation='relu'),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(32, activation='relu'),\n    keras.layers.Dense(10, activation='sigmoid')\n])\nmodel.summary() ","667cc3ee":"model.compile(\n     optimizer='adam',\n     loss='sparse_categorical_crossentropy',\n     metrics=[\"accuracy\"]\n)\nhistory= model.fit(X_train, y_train, epochs=50)","a3ec4572":"model.evaluate(x_test,y_test)","2007b23a":"y_pred= model.predict(x_test)","d1ab28e9":"y_pred[:10]","a2bcaab6":"y_pred= np.argmax(y_pred, axis=1)\ny_pred[:10]","a71e3790":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","e00791c1":"data= tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(data, fmt='d',annot=True)\nplt.xlabel('Predicred')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()","00d47024":"plt.figure(figsize=(8,6))\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['loss'], label='loss')\nplt.legend()\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.grid('on')      ","058b34c3":"test_df.head()","4565259e":"test_df=test_df.to_numpy().reshape(-1,28,28,1)","83b954bb":"x_testdata= test_df\ny_prediction= model.predict(x_testdata)","2197cd29":"y_prediction= np.argmax(y_prediction, axis=1)\ny_prediction[:10]","70d9a4c9":"submit_ann = pd.DataFrame({'ImageId':range(1,len(y_prediction)+1),'Label':y_prediction})\n\nsubmit_ann.to_csv('submission_ann.csv',index=False)","1d0b0b8c":"## Data Preprocessing","b67b94a6":"## Train Test Split","3c2cd72c":"## Convolutional  Neural Network Model","abbc573e":"## Test dataframe","322bc1d8":"## Import Dataset","4adcbf3d":"## Classification report & Confusion Matrix","feab5e4d":"## Prediction and Evaluation","edaaeed1":"## Data Visualization","3202cd3a":"## Submission","bd1758d3":"#### 3 layer neyral network is used."}}