{"cell_type":{"657b1827":"code","38e1eb5f":"code","e2a30b5c":"code","990b5dda":"code","e188ee4c":"code","9bec1c21":"code","05cf37dc":"code","bf7fbfa8":"code","51607a03":"code","48a2e0e2":"code","67f4893d":"code","a32e44b7":"code","13af1f1d":"code","30d9603d":"code","69e453f9":"code","22f8e4a9":"code","d7f770d8":"code","189c7b73":"code","2b052da1":"code","375509ff":"code","02f05cef":"code","697012b0":"code","c8b31795":"code","56567811":"code","5a954068":"code","a6cf61f4":"code","328b9aca":"code","6c740022":"code","1ce8e3f9":"code","b08cfc47":"code","c046b319":"code","3eb6e0dc":"code","dbdca685":"code","a9cc8b05":"markdown"},"source":{"657b1827":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38e1eb5f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom pylab import plot, show, subplot, specgram, imshow, savefig\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score,f1_score, confusion_matrix\n%matplotlib inline","e2a30b5c":"df = pd.read_csv(\"\/kaggle\/input\/loan-data-set\/loan_data_set.csv\")\ndf.sample(5)","990b5dda":"df.shape","e188ee4c":"df.dtypes","9bec1c21":"df.describe(include='all')","05cf37dc":"df.isna().sum()","bf7fbfa8":"df.LoanAmount.fillna(df.LoanAmount.mean(),inplace=True)\ndf.Loan_Amount_Term.fillna(df.Loan_Amount_Term.mean(),inplace=True)","51607a03":"df.dropna(how=\"any\",inplace=True)","48a2e0e2":"df.isna().sum()","67f4893d":"df.drop(\"Loan_ID\",axis=1,inplace=True)","a32e44b7":"le = LabelEncoder()\ndf[\"Gender\"] = le.fit_transform(df[\"Gender\"])\ndf[\"Married\"] = le.fit_transform(df[\"Married\"])\ndf[\"Dependents\"] = le.fit_transform(df[\"Dependents\"])\ndf[\"Self_Employed\"] = le.fit_transform(df[\"Self_Employed\"])\ndf[\"Education\"] = le.fit_transform(df[\"Education\"])\ndf[\"Property_Area\"] = le.fit_transform(df[\"Property_Area\"])\ndf[\"Loan_Status\"] = le.fit_transform(df[\"Loan_Status\"])","13af1f1d":"df.dtypes","30d9603d":"fig,ax=plt.subplots(figsize=(15,8))\nsns.heatmap(data=df.corr().round(2),annot=True,linewidths=0.5,cmap=\"Blues\")\nplt.show()","69e453f9":"def plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","22f8e4a9":"rf_model = RandomForestClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","d7f770d8":"plot_feature_importance(rf_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'RANDOM FOREST')","189c7b73":"gbc_model = GradientBoostingClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","2b052da1":"plot_feature_importance(gbc_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'GRADIENT BOOSTING')","375509ff":"abc_model = AdaBoostClassifier().fit(df.drop(\"Loan_Status\",axis=1),df[\"Loan_Status\"])","02f05cef":"plot_feature_importance(abc_model.feature_importances_,df.drop(\"Loan_Status\",axis=1).columns,'ADA BOOST')","697012b0":"fig,ax=plt.subplots(figsize=(4,5))\nsns.countplot(x = \"Education\", data=df, order = df[\"Education\"].value_counts().index)\nplt.show()","c8b31795":"sns.relplot(x=\"ApplicantIncome\", y=\"LoanAmount\", data=df, col=\"Gender\",color=\"Blue\",alpha=0.3)\nplt.show()","56567811":"g=sns.relplot(x=\"Loan_Amount_Term\", y=\"LoanAmount\", data=df,kind=\"line\",hue=\"Education\",ci=None)\ng.fig.set_size_inches(15,7)\nplt.show()","5a954068":"parameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\nsvc = SVC()\nclf = GridSearchCV(svc, parameters)","a6cf61f4":"X = df.drop('Loan_Status',axis=1)\ny = df['Loan_Status']","328b9aca":"Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=30)","6c740022":"clf.fit(Xtrain, ytrain)","1ce8e3f9":"clf.best_params_","b08cfc47":"pred = clf.best_estimator_.predict(Xtest)","c046b319":"confusion_matrix(ytest,pred)","3eb6e0dc":"print(\"Accuracy score: {0}%\".format((accuracy_score(ytest,pred)*100).round(2)))","dbdca685":"fig,ax=plt.subplots(figsize=(10,5))\nsns.regplot(x=ytest,y=pred,marker=\"*\")\nplt.show()","a9cc8b05":"### Top 5 features are,\n\n* Credit_History\n* ApplicantIncome\n* LoanAmount\n* CoapplicantIncome\n* Loan_Amount_Term\n\n"}}