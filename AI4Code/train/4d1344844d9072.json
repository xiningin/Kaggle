{"cell_type":{"ca6d00ad":"code","13e0d653":"code","f78d801d":"code","0c635b67":"code","f33cc986":"code","faeac66b":"code","36b9e158":"code","e4c1642e":"code","8d04cfec":"code","ec990bd1":"code","3f7b5f82":"code","55f949bc":"code","4f6b37a4":"code","29efd843":"code","9b0e0d12":"code","d23204aa":"code","e1715cea":"code","616b4060":"code","07a85b73":"code","80a3f554":"code","5b13eec5":"code","fbc8e4ec":"code","1a43690d":"code","3de7c8cb":"code","b0535663":"code","8a4dfd7a":"code","17aa0010":"code","6e60f5c4":"code","d3995bef":"code","392c9a91":"code","6f69ee59":"code","3a33aea7":"code","02398012":"code","0ebbc0fa":"code","ab43bbe7":"code","1b697b85":"code","3c5c55c9":"code","04d93181":"code","56cda74d":"code","5f59b344":"code","b7310e29":"code","5bec4dea":"code","8408357e":"code","a84d703a":"code","e4d5defe":"code","f2d31c64":"code","39cdcd3d":"code","64662966":"code","ee9151b5":"markdown","e5f3b3bf":"markdown","bb39acfd":"markdown","619a3ce6":"markdown","e56b998b":"markdown","e9abb9e7":"markdown","b623371a":"markdown","9ac8d77d":"markdown","4f160527":"markdown","7253c082":"markdown","ebd90ab4":"markdown","a158659b":"markdown","3c1571ea":"markdown","5374b08a":"markdown","2589272c":"markdown","49b1565a":"markdown","95038478":"markdown","06934916":"markdown","148992d9":"markdown","21237a6a":"markdown","e8b43539":"markdown","84ace1a3":"markdown","dc3e9ab3":"markdown","afcdc0e4":"markdown"},"source":{"ca6d00ad":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","13e0d653":"df = pd.read_csv('..\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv')","f78d801d":"df.head()","0c635b67":"df.tail()","f33cc986":"df.info()","faeac66b":"df.shape","36b9e158":"print('This is the size: ' + str(df.size))\nprint('This is the product:' +  str(df.shape[0] * df.shape[1]))","e4c1642e":"df.sample(n=10)","8d04cfec":"df.describe()","ec990bd1":"# Transpose\ndf.describe().T","3f7b5f82":"# This is useful to get all unique values of a column\ndf['location'].unique()","55f949bc":"df.nunique()","4f6b37a4":"df.isna().sum()","29efd843":"# Returns a bolean about which row is null\ndf.isnull()","9b0e0d12":"df.columns","d23204aa":"df.nsmallest(10, 'perc_sequences')","e1715cea":"df.nlargest(10, 'perc_sequences')","616b4060":"df.iloc[1:5, 1:5]","07a85b73":"df.iloc[[1,5], [1,3,2]]","80a3f554":"df.loc[1:5, ['date', 'variant']]","5b13eec5":"df[0:10]","fbc8e4ec":"# As in SQL, we can group by some values, and then get the sum, average, etc.\ndf[['perc_sequences']].groupby(df['location']).sum()","1a43690d":"# So basically, df[[What you want to get sum or mean]].groupby(df[by what you want]).sum()\ndf[['num_sequences', 'perc_sequences']].groupby(df['location']).mean()","3de7c8cb":"df[['num_sequences', 'perc_sequences']].groupby(df['variant']).mean().head()","b0535663":"df.sort_values(by = 'location', ascending = True).head()","8a4dfd7a":"df.sort_values(by = 'location', ascending = False).head().reset_index(drop=True)","17aa0010":"df.loc[::-1].head().reset_index(drop=True)","6e60f5c4":"df['date'] = pd.to_datetime(df['date'])","d3995bef":"df.info()","392c9a91":"df.query('num_sequences > 1').head()","6f69ee59":"df[df['num_sequences'] > 1].head()","3a33aea7":"df.memory_usage()","02398012":"df['location'] = df['location'].apply(lambda x: x.upper())","0ebbc0fa":"df.head()","ab43bbe7":"df1 = pd.DataFrame({'Dias': {0: 'Lunes', 1: 'Martes', 2: 'Miercoles', 3: 'Jueves', 4: 'Viernes'},\n                  'Mexico': {0: 15,1:23, 2: 28, 3: 12, 4 : 23},\n                  'Queretaro': {0: 25,1:30, 2: 18, 3: 22, 4 : 27},\n                   'Monterrey': {0: 30,1:34, 2: 38, 3: 32, 4 : 33}})","1b697b85":"df1","3c5c55c9":"df2 = pd.melt(df1, id_vars = 'Dias', var_name = 'City', value_name = 'Temperature')","04d93181":"df2","56cda74d":"df3 = df2.pivot(index = 'Dias', values = 'Temperature', columns = 'City').reset_index()","5f59b344":"df3","b7310e29":"df_un1 = df[['num_sequences', 'perc_sequences']].groupby(df['location']).mean()\ndf_un2 = df[['num_sequences_total']].groupby(df['location']).mean()\ndf_un3 = df.groupby(['location','variant'])","5bec4dea":"df_un3.first()","8408357e":"df_merge1 = df_un1.merge(df_un2, left_on = 'location', right_on = 'location', sort = True)\ndf_merge1.sample(n=10)","a84d703a":"df_merge2 = df_un1.merge(df_un2, how = 'inner', on = 'location')\ndf_merge2.sample(n=5)","e4d5defe":"test = pd.DataFrame({'Alumno': ['Alberto', 'Eduardo', 'Miguel', 'Mauricio'],\n                    'Calificaciones' : [9,8,6,9]})\ntest2 = pd.DataFrame({'Alumno': ['Luis', 'Leo', 'Daniel', 'Paola', 'Vanesa'],\n                     'Calificaciones': [7,8,9,9,8]})","f2d31c64":"new_df = pd.concat([test, test2], ignore_index = True)\nnew_df","39cdcd3d":"new_df = new_df.sort_values(by = 'Calificaciones', ascending = False)\nnew_df","64662966":"new_test = new_df.rename(columns = {'Alumno': 'Estudiante'})\nnew_test","ee9151b5":"**The size show the product of rows x columns**","e5f3b3bf":"# **10. Get the nsmallest and nlargest values from a column**","bb39acfd":"# **8. This provides us a overall view of null values**","619a3ce6":"# **3. Get complete information of data set**","e56b998b":"# **16. Query in a dataframe**","e9abb9e7":"# **2. Get the bottom and top of the data set**","b623371a":"# **6. Get standard mathematical analysis of each column of dataset**","9ac8d77d":"# **18. Melt the dataframe**","4f160527":"# **11. iloc (just number) loc (number of row and name of column)**","7253c082":"# **19. Pivoting a table**","ebd90ab4":"# **5. Choose n number of random sample from dataset**","a158659b":"**The shape show the rows and columns.**","3c1571ea":"# **14. Sorting according to one column**","5374b08a":"# **15. To datetime**","2589272c":"# **12. Slice the data**","49b1565a":"# **22. Rename a column**","95038478":"# **21. Concat dataframes**","06934916":"# **13. Group by**","148992d9":"# **7. Find number of distinct values**","21237a6a":"# **20. Merge tables**","e8b43539":"# **17. Memory Usage and Lambda function with apply**","84ace1a3":"# **1. Read a CSV**","dc3e9ab3":"# **9. Get the names of columns**","afcdc0e4":"# **4. Shape and size of data set**"}}