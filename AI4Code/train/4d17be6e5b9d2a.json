{"cell_type":{"70202a10":"code","e94c0471":"code","718a8fca":"code","e1955cb7":"code","fc0f93be":"code","e367456c":"code","8dae194d":"code","176aa3b3":"code","e824e47e":"code","ac252973":"code","b81ce558":"code","e0b5bc19":"code","adff298d":"code","3cf644e9":"code","856a856d":"code","6dc7cfeb":"code","23eaa784":"code","269cb3bd":"markdown","5387ed42":"markdown","a7c76516":"markdown","c82e181a":"markdown","95983f9f":"markdown","167df281":"markdown","04d4edf7":"markdown","cefa0e85":"markdown","9a6bee1d":"markdown","5dbea113":"markdown","6d28c114":"markdown","b8fdc448":"markdown","1c670e79":"markdown","22f1189e":"markdown"},"source":{"70202a10":"options(repr.plot.width=12, repr.plot.height=5, warn = -1)\n\ndevtools::install_github(\"andrie\/deepviz\", dependencies = F)\nlibrary(deepviz)\nlibrary(tidyverse)\nlibrary(keras)","e94c0471":"normalize <- function(x, na.rm = TRUE) {\n  return((x- min(x)) \/(max(x)-min(x)))\n}\n\nas_metrics_df = function(history) {\n  \n  # create metrics data frame\n  df <- as.data.frame(history$metrics)\n  \n  # pad to epochs if necessary\n  pad <- history$params$epochs - nrow(df)\n  pad_data <- list()\n  for (metric in history$params$metrics)\n    pad_data[[metric]] <- rep_len(NA, pad)\n  df <- rbind(df, pad_data)\n  \n  # return df\n  df\n}","718a8fca":"full <- readr::read_csv(\"..\/input\/tabular-playground-series-jun-2021\/\/train.csv\") \n\nset.seed(314)\ntest <- \n  full %>% \n  group_by(target) %>% \n  sample_frac(0.2) %>% \n  ungroup()\n\ntrain <- full %>% filter(!id %in% test$id) ","e1955cb7":"set.seed(314)\nto_pca <- \n  train %>% \n  group_by(target) %>% \n  sample_frac(.1) %>% \n  ungroup()","fc0f93be":"to_pca %>% \n  select(-id, -target) %>% \n  cor(method = 'spearman') %>% \n  heatmaply::heatmaply_cor(\n    xlab = \"Features\",\n    ylab = \"Features\",\n    k_col = 4,\n    k_row = 8\n  )\n","e367456c":"res.pca <- \n  to_pca %>% \n  select(-id, -target) %>%  \n  FactoMineR::PCA(graph = FALSE, scale.unit = T)\n\n# get_eigenvalue(res.pca)\nfactoextra::fviz_eig(res.pca, addlabels = TRUE, ncp = 50)","8dae194d":"tsne_tps <- to_pca %>% \n  select(-id, -target) %>% \n  Rtsne::Rtsne(dims=2, perplexity=30, \n               PCA=FALSE,\n               verbose=T, max_iter=500, \n               check_duplicates = FALSE)","176aa3b3":"as_tibble(tsne_tps$Y) %>% \n  bind_cols(select(to_pca, target)) %>% \n  ggplot(aes(x=V1, y=V2, col=target))+\n  geom_point()+\n  labs(title = \"t-SNE\")","e824e47e":"umap_tps <- to_pca %>% \n  select(-id, -target) %>%\n  umap::umap()","ac252973":"as_tibble(umap_tps$layout) %>% \n  bind_cols(select(to_pca, target)) %>% \n  ggplot(aes(x=V1, y=V2, col=target))+\n  geom_point()+\n  labs(title = \"UMAP\")","b81ce558":"batch_size <- 128\nepochs <- 100","e0b5bc19":"x_train <- \n  full %>% \n  select(-id, -target) %>% \n  mutate_all(scale) %>% \n  as.matrix()\n\nmodel <- keras_model_sequential()\n\nmodel %>%\n  layer_dense(units = 564, activation = \"relu\", input_shape = ncol(x_train)) %>%\n  layer_dense(units = 256, activation = \"relu\") %>%\n  layer_dense(units = 2, activation = \"tanh\", name = \"bottleneck\") %>%\n  layer_dense(units = 256, activation = \"relu\") %>%\n  layer_dense(units = 564, activation = \"relu\") %>%\n  layer_dense(units = ncol(x_train), activation = \"linear\")\n\ndeepviz::plot_model(model)\n\nmodel %>% compile(\n  metrics = c(\"accuracy\"),\n  loss = \"mean_squared_error\", \n  optimizer = optimizer_adam(\n    lr = 0.001 ))","adff298d":"tictoc::tic()\nhistory <- model %>%\n  fit(x = x_train, y = x_train, \n      epochs = epochs,\n      validation_split =.2,\n      view_metrics = TRUE, \n      callbacks=list(callback_early_stopping(\n        monitor = \"val_loss\",\n        min_delta = 0.01,\n        patience = 20,\n        restore_best_weights = TRUE\n      )),\n      verbose=2)\ntictoc::toc()","3cf644e9":"as_metrics_df(history) %>%\n  mutate(epochs = 1:nrow(.)) %>% \n  gather(key, val, -epochs) %>% \n  mutate(metric = case_when(\n    str_detect(key, \"accuracy\") ~ \"accuracy\",\n    str_detect(key, \"loss\") ~ \"log_loss\" )) %>% \n  ggplot(aes(x = epochs, y = val, col=key)) +\n  geom_point()+\n  geom_smooth(se = F)+\n  theme_bw()+\n  facet_wrap(~metric, scales = \"free_y\")","856a856d":"history","6dc7cfeb":"mse.ae2 <- evaluate(model, x_train, x_train)\nmse.ae2","23eaa784":"intermediate_layer_model <- keras_model(inputs = model$input, outputs = get_layer(model, \"bottleneck\")$output)\nintermediate_output <- predict(intermediate_layer_model, x_train)\n\nggplot(data.frame(PC1 = intermediate_output[,1],\n                  PC2 = intermediate_output[,2]),\n       aes(x = PC1, y = PC2, col = full$target)) + \n  geom_point(alpha=.5)+\n  labs(color = \"Target\")","269cb3bd":"# Dimensionality reduction with Neural Networks","5387ed42":"# AE - **A**uto**E**ncoder","a7c76516":"# PCA","c82e181a":"# Load Dependencies","95983f9f":"# t-SNE - **t**-Distributed **S**tochastic **N**eighbor **E**mbedding","167df281":"# Problem definition\n\nFrom description:\n\n\"The dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting the category on an eCommerce product given various attributes about the listing. Although the features are anonymized, they have properties relating to real-world features.\"\n\nAll notebooks will be public and suggestions and criticism are very welcome!\n\n\n<br>\n\n<p align=\"right\"><span style=\"color:firebrick\">Dont forget the upvote if you liked the notebook! <i class=\"fas fa-hand-peace\"><\/i><\/span> <\/p>","04d4edf7":"# Correlations + Dendogram","cefa0e85":"The data does not have a clear separation for the target","9a6bee1d":"It makes no sense to apply PCA to this data. Since features have no correlation, components do not retain data variability.","5dbea113":"The data does not have a clear separation for the target. (obs: There seems to be an outlier)","6d28c114":"No feature has high correlation","b8fdc448":"The data does not have a clear separation for the target","1c670e79":"# UMAP - **U**niform **M**anifold **A**pproximation and **P**rojection","22f1189e":"Load a sample dataset"}}