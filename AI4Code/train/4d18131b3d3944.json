{"cell_type":{"035c356d":"code","ede8960d":"code","615a566a":"code","717a5c36":"code","061e25dc":"code","a9c979ed":"code","b4ef5514":"code","880451d7":"code","35609d9d":"code","36332c10":"code","222db230":"code","f86e88b8":"code","f180add3":"code","4bed87f1":"code","05a61fe0":"code","f7c3a6d1":"code","faed8440":"code","a7ad4c20":"code","93cf0dc2":"code","da7c6c70":"code","c55722f1":"code","ddcc946a":"code","324e80c1":"code","3aa0dfd3":"code","182577f7":"code","0363a48d":"code","14810368":"code","735280af":"code","80f85de4":"code","975f0b57":"code","a57b7a5c":"code","8fdd3b57":"code","ed692fc2":"code","fbf958a7":"code","803dce4f":"code","0a1c58a6":"code","e797eaa2":"code","7667a2db":"code","83181603":"code","934a2567":"code","1359d287":"code","82c8a8d6":"code","33319b4f":"code","cd3767a3":"code","8fcd67d5":"code","6f39212d":"code","2dda5f3e":"code","58c8101c":"code","4feb52c9":"code","13353102":"code","d961a969":"code","14793808":"code","d7498172":"code","7bbf0b36":"code","66c9c196":"code","a7648144":"code","6c330e29":"code","0e7488ef":"code","f9120844":"code","7fcbf852":"code","7318fafe":"code","bc19b4e6":"code","e260b0a6":"code","22517edf":"code","e2813ae1":"code","11dffef8":"code","c894ce2c":"code","d3b5cd91":"code","e3807d8f":"code","b03310d7":"code","b0042cee":"code","8bcce6ae":"code","e6be1503":"code","1b15650e":"code","3f2fef11":"code","f4f1cd57":"code","66c9c5f4":"code","62d7d362":"code","37ece630":"code","24e5f204":"code","c17d7063":"code","9954fd21":"code","8ae843b2":"code","f80306ad":"code","175b7969":"code","e15f37a5":"code","5f612c91":"code","d247cbed":"code","d1efa0f9":"code","7f4b4455":"code","5ef080c8":"code","efa6a90c":"code","002fd650":"code","d391b138":"code","89824e5d":"code","ffd0fb83":"code","c73f594a":"code","9decc80d":"code","9d3e2ae5":"code","bbdb1477":"code","e7dd82ce":"code","16462bd9":"code","f50a340f":"code","ceb08764":"code","914f9e57":"code","4314ff54":"markdown","c7ab48ab":"markdown","4d520195":"markdown","5179f9bf":"markdown","5d9d2e8f":"markdown","85b53245":"markdown","d8d0517f":"markdown","4e0544bc":"markdown","e275ac4f":"markdown","cc682c15":"markdown","f1932e3b":"markdown","46fcaa46":"markdown","247e1e49":"markdown","c31433b4":"markdown","01843236":"markdown","6d4f3450":"markdown","c711f406":"markdown","3bfa0718":"markdown","c6af695f":"markdown","973ab242":"markdown","01ce0e28":"markdown","085c841e":"markdown","97effdd7":"markdown","63313db1":"markdown","39dd01ee":"markdown","faaa19ca":"markdown","3c2216de":"markdown","1d3567c6":"markdown","f1c5f1df":"markdown","1a58b459":"markdown","63638241":"markdown","47d75e27":"markdown","ec74d324":"markdown","51fdfea9":"markdown","94f70ca8":"markdown","ab03ef12":"markdown","b17867a0":"markdown","a2ae078f":"markdown","1e2ed079":"markdown","d4cdaee2":"markdown","c619649c":"markdown","e9a0aea5":"markdown","41a3da51":"markdown","3ad6e0f4":"markdown","888d9aac":"markdown","cbe98c61":"markdown","b7253494":"markdown","2e613ddb":"markdown","6333abe8":"markdown","4dea9223":"markdown","91641573":"markdown","7b642c67":"markdown","74e28618":"markdown","af431b7e":"markdown","c4aa3fb5":"markdown"},"source":{"035c356d":"#Version Test #version 10\nimport rasterio\nimport os\nimport numpy\nfrom matplotlib import pyplot","ede8960d":"data_path = \"..\/input\/hcmtiffpublic\/FinalUp1.tif\"\nds = rasterio.open(data_path)","615a566a":"\nbandData = []\nfor i in range (1,ds.count+1,1):\n    data = ds.read(i)\n    bandData.append(data)","717a5c36":"pyplot.imshow(bandData[0])\npyplot.show()","061e25dc":"print(bandData[1].shape[0])\nprint(bandData[1][500][500])","a9c979ed":"def calculateValueIndex(_bandData):\n    print(\"Max: \" + str(numpy.nanmax(_bandData)))\n    print(\"Min: \" + str(numpy.nanmin(_bandData)))\n    print(\"Mean: \" + str(numpy.nanmean(_bandData)))\n    print(\"Median: \" + str(numpy.nanmedian(_bandData)))\n    print(\"Std: \" + str(numpy.nanstd(_bandData)))","b4ef5514":"for i in range (0,len(bandData),1):\n    print(i+1)\n    calculateValueIndex(bandData[i])","880451d7":"redBand = ds.read(4)\ngreenBand = ds.read(3)\nnirBand = ds.read(5)\nswirBand = ds.read(6)","35609d9d":"ndviList = [] #(NIR - RED)\/(NIR + RED)\nndwiList = [] #NDWI = (GREEN \u2013 SWIR) \/ (GREEN + SWIR) \n              #NDWI = (Band 3 \u2013 Band 6) \/ (Band 3 + Band 6)","36332c10":"for i in range (0,redBand.shape[0],1):\n    array1 = [] #(NIR - RED)\/(NIR + RED)\n    array2 = [] #NDWI = (NIR \u2013 SWIR) \/ (NIR + SWIR) \n    for j in range(0,redBand.shape[1],1):\n        if(redBand[i][j] == None):\n            array1.append(None)\n            array2.append(None)\n            continue\n            \n        value1 = (nirBand[i][j] - redBand[i][j])\/(nirBand[i][j] + redBand[i][j])\n        value2 = (greenBand[i][j] - swirBand[i][j])\/(greenBand[i][j] + swirBand[i][j])\n        array1.append(value1)\n        array2.append(value2)\n    ndviList.append(array1)\n    ndwiList.append(array2)\n        ","222db230":"ndviValue = numpy.array(ndviList)\nndwiValue = numpy.array(ndwiList)\nprint(ndviValue.shape)\nprint(ndwiValue.shape)\nprint(ndviValue[500][500])\nprint(ndwiValue[500][500])","f86e88b8":"imageList = []\nimageList.append(ndviList)\nimageList.append(ndwiList)\nprint(len(imageList))","f180add3":"imageTiff = numpy.array(imageList)\nprint(imageTiff.shape)","4bed87f1":"driver = \"GTiff\"\ndim = imageTiff.shape\nheight = dim[1]\nwidth = dim[2]\ndtype = imageTiff.dtype\ncount = 2","05a61fe0":"print(dtype)","f7c3a6d1":"from rasterio.crs import CRS\nfrom rasterio.transform import from_origin","faed8440":"crs = CRS.from_epsg(3424)","a7ad4c20":"# Left,Right = (648129.923572,721997.12265) cellsize = (29.8092006, 29.8092006)\ntransform = from_origin(648129.923572,721997.12265,29.8092006, 29.8092006) \n                            ","93cf0dc2":"transform","da7c6c70":"'''\nos.remove(\".\/output.tif\")\nos.remove(\".\/output1.tif\")\nos.remove(\".\/output2.tif\")\n'''","c55722f1":"'''\nwith rasterio.open(\".\/output.tif\",\"w\",\n                  driver = driver,\n                  height = height,\n                  width = width,\n                  count = count,\n                  dtype = dtype,\n                  crs = crs,\n                  transform = transform) as dst:\n    dst.write(imageTiff)\n'''","ddcc946a":"imageNdviList = []\nimageNdviList.append(ndviList)\nimageNdvi = numpy.array(imageNdviList)\nprint(imageNdvi.shape)","324e80c1":"imageNdwiList = []\nimageNdwiList.append(ndwiList)\nimageNdwi = numpy.array(imageNdwiList)\nprint(imageNdwi.shape)","3aa0dfd3":"'''\nwith rasterio.open(\".\/output1.tif\",\"w\",\n                  driver = driver,\n                  height = height,\n                  width = width,\n                  count = 1,\n                  dtype = dtype,\n                  crs = crs,\n                  transform = transform) as dst:\n    dst.write(imageNdvi)\n'''","182577f7":"'''\nwith rasterio.open(\".\/output2.tif\",\"w\",\n                  driver = driver,\n                  height = height,\n                  width = width,\n                  count = 1,\n                  dtype = dtype,\n                  crs = crs,\n                  transform = transform) as dst:\n    dst.write(imageNdwi)\n'''","0363a48d":"'''data_path_test = \".\/output.tif\"\nds = rasterio.open(data_path_test)\ndata_test = ds.read(1) \npyplot.imshow(data_test)\npyplot.show()'''","14810368":"'''data_path_test = \".\/output1.tif\"\nds = rasterio.open(data_path_test)\ndata_test = ds.read(1) \npyplot.imshow(data_test)\npyplot.show()'''","735280af":"'''data_path_test = \".\/output2.tif\"\nds = rasterio.open(data_path_test)\ndata_test = ds.read(1) #B1\npyplot.imshow(data_test)\npyplot.show()'''","80f85de4":"import pandas as pd\nimport math\nfrom rasterio.windows import Window","975f0b57":"raw_data_points = pd.read_csv('..\/input\/datafinal\/DataFinal.csv')\nraw_data_points.head()","a57b7a5c":"boundImage = ds.bounds\nimageHeight = ds.height\nimageWidth = ds.width\nimageTransform = ds.transform\n\nleftImage = boundImage[0]\ntopImage = boundImage[3]\npixelSizeX = imageTransform[0]\npixelSizeY = -imageTransform[4]\n\nprint(pixelSizeX)\nprint(pixelSizeY)\nprint(boundImage)\nprint(ds.transform)","8fdd3b57":"def calculateIndex(x,y):\n    row = (topImage - y)\/pixelSizeY\n    col = (x - leftImage)\/pixelSizeX\n    return math.floor(row),math.floor(col)","ed692fc2":"print(calculateIndex(687311.4,1204476))\nbandData[0][1005][1314]","fbf958a7":"def getBandsColumn(bandMatrix):\n    res = []\n    for i in range(0,raw_data_points['ID'].count(),1):\n        x = raw_data_points['X'][i]\n        y = raw_data_points['Y'][i]\n        row, col = calculateIndex(x,y)\n        if((row <= imageHeight and row > 0) and (col <= imageWidth and col > 0)):\n            res.append(bandMatrix[row][col])\n        else:\n            res.append(None)\n    return res","803dce4f":"band1 = getBandsColumn(bandData[0])\nraw_data_points['Band_1'] = band1\nband2 = getBandsColumn(bandData[1])\nraw_data_points['Band_2'] = band2\nband3 = getBandsColumn(bandData[2])\nraw_data_points['Band_3'] = band3\nband4 = getBandsColumn(bandData[3])\nraw_data_points['Band_4'] = band4\nband5 = getBandsColumn(bandData[4])\nraw_data_points['Band_5'] = band5\nband6 = getBandsColumn(bandData[5])\nraw_data_points['Band_6'] = band6\nband7 = getBandsColumn(bandData[6])\nraw_data_points['Band_7'] = band7\nndvi = getBandsColumn(imageNdvi[0])\nraw_data_points['NDVI'] = ndvi\nndwi = getBandsColumn(imageNdwi[0])\nraw_data_points['NDWI'] = ndwi\nraw_data_points.head()","0a1c58a6":"raw_data_points.head()","e797eaa2":"def indexLabelColumn(data):\n    res = []\n    for i in range(0,data['ID'].count(),1): \n        if(data['Label'][i] == 'Aquaculture'):\n            res.append(1)\n        elif(data['Label'][i] == 'Water'):\n            res.append(2)\n        elif(data['Label'][i] == 'Forest'):\n            res.append(3)\n        elif(data['Label'][i] == 'Grass'):\n            res.append(4)\n        elif(data['Label'][i] == 'Residental'):\n            res.append(5)\n        elif(data['Label'][i] == 'RicePaddies'):\n            res.append(6)\n        elif(data['Label'][i] == 'Scrub'):\n            res.append(7)\n        elif(data['Label'][i] == 'BarrenLands'):\n            res.append(8)\n        elif(data['Label'][i] == 'CropLands'):\n            res.append(9)\n        elif(data['Label'][i] == 'Wetlands'):\n            res.append(10)\n    return res;","7667a2db":"raw_data_points['Label_data'] = indexLabelColumn(raw_data_points)","83181603":"raw_data_points = raw_data_points.dropna(how='any',axis=0)","934a2567":"df = raw_data_points\ndf.head()","1359d287":"X_labels = ['Band_1','Band_2','Band_3','Band_4','Band_5','Band_6','Band_7','NDVI','NDWI']\ny_label = 'Label'","82c8a8d6":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd","33319b4f":"X_train, X_test, y_train, y_test = train_test_split(df[X_labels], df[y_label],stratify=df['Label'], test_size=0.2, random_state=15)","cd3767a3":"X_train","8fcd67d5":"from sklearn.metrics import classification_report\ndef validModel(Model,X_test,y_test):\n    y_pred = Model.predict(X_test)\n    report = classification_report(y_test,y_pred,output_dict=True)\n    print(classification_report(y_test,y_pred))\n    return report","6f39212d":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef drawConfuseMatrix(y_true,y_pred):\n    cm=confusion_matrix(y_true,y_pred)\n    cm_df = pd.DataFrame(cm,\n                     index = ['Aquaculture','BarrenLands','CropLands','Forest','Grass','Residental','RicePaddies','Scrub','Water','Wetlands'], \n                     columns = ['Aquaculture','BarrenLands','CropLands','Forest','Grass','Residental','RicePaddies','Scrub','Water','Wetlands'])\n    f, ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(cm_df,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    return plt","2dda5f3e":"def drawBarGraphHorizontal(x,y,name):\n    # Figure Size\n    fig, ax = plt.subplots(figsize =(40, len(x)))\n    ax.tick_params(axis='both', which='major', labelsize= 30)\n    # Horizontal Bar Plot\n    ax.barh(x, y, align='center')\n\n    # Remove axes splines\n    for s in ['top', 'bottom', 'left', 'right']:\n        ax.spines[s].set_visible(False)\n\n    # Remove x, y Ticks\n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none')\n\n    # Add padding between axes and labels\n    ax.xaxis.set_tick_params(pad = 5)\n    ax.yaxis.set_tick_params(pad = 10)\n\n    # Add x, y gridlines\n    ax.grid(b = True, color ='grey',\n            linestyle ='-.', linewidth = 0.5,\n            alpha = 0.2)\n\n    # Show top values\n    ax.invert_yaxis()\n\n    # Add annotation to bars\n    for i in ax.patches:\n        plt.text(i.get_width()*1.01, i.get_y()+0.5,\n                 str(round((i.get_width()), 2)),\n                 fontsize = 30, fontweight ='bold',\n                 color ='grey')\n\n    # Add Plot Title\n    ax.set_title(name ,loc ='left',fontsize = 60)\n\n    # Add Text watermark\n    fig.text(0.9, 0.15, 'Jeeteshgavande30', fontsize = 40,\n             color ='grey', ha ='right', va ='bottom',\n             alpha = 0.7)\n\n    # Show Plot    \n    return plt","58c8101c":"def drawBarGraphVertical(x,y,xlabel,ylabel,name):\n    fig, ax = plt.subplots(figsize = (16, 9))\n    ax.tick_params(axis='both', which='major', labelsize= 10)\n    \n    ax.bar(x, y, color ='maroon',\n            width = 0.2)  \n    for s in ['top', 'bottom', 'left', 'right']:\n        ax.spines[s].set_visible(False)\n\n    # Remove x, y Ticks\n    ax.xaxis.set_ticks_position('none')\n    ax.yaxis.set_ticks_position('none')\n\n    # Add padding between axes and labels\n    ax.xaxis.set_tick_params(pad = 5)\n    ax.yaxis.set_tick_params(pad = 10)\n\n    # Add x, y gridlines\n    ax.grid(b = True, color ='grey',\n            linestyle ='-.', linewidth = 0.5,\n            alpha = 0.2)\n    \n    for i in ax.patches:\n        plt.text(i.get_x(), i.get_height()*1.01,\n                 str(round((i.get_height()), 3)),\n                 fontsize = 12, fontweight ='bold',\n                 color ='black')\n        \n    # creating the bar plot\n    \n\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.title(name,fontsize = 60)\n    return plt","4feb52c9":"def getXYInputGraph(gridCV):\n    dataFrame = pd.DataFrame(gridCV.cv_results_)\n    aParams = np.array(dataFrame.params)\n    aScore = np.array(dataFrame.mean_test_score)\n    x = []\n\n    for i in range (len(aParams)):\n        x.append(str(aParams[i]))\n    return x,aScore","13353102":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold, GridSearchCV","d961a969":"clf=RandomForestClassifier(n_estimators=100, random_state=9)\nclf.fit(X_train,y_train)\nreport = validModel(clf,X_test,y_test)","14793808":"clf=RandomForestClassifier(random_state=9)\nskf = StratifiedKFold(n_splits=2, shuffle=True, random_state=12)\nparam_grid = { \n    'n_estimators': [10, 100, 200, 300, 400],\n    'max_features': ['auto', 'sqrt','log2'],\n    'criterion' : ['gini','entropy'],\n    'class_weight':['balanced', 'balanced_subsample',None],\n}\ngridCV_clf_randomforest = GridSearchCV(estimator = clf, param_grid=param_grid,verbose=0,scoring = 'accuracy')\ngridCV_clf_randomforest.fit(X_train, y_train)\nprint(gridCV_clf_randomforest.best_params_)\nprint(gridCV_clf_randomforest.best_score_)","d7498172":"report = validModel(gridCV_clf_randomforest,X_test,y_test)","7bbf0b36":"randomForest=gridCV_clf_randomforest","66c9c196":"x,y = getXYInputGraph(randomForest)\nplt = drawBarGraphHorizontal(x,y,\"RandomForest\")\nplt.savefig('find_params_ramdomForest.png',bbox_inches = 'tight')\nplt.show()","a7648144":"report = validModel(randomForest,X_test,y_test)","6c330e29":"y_pred = randomForest.predict(X_test)\ny_true = y_test.to_numpy()\nplt = drawConfuseMatrix(y_true,y_pred)\nplt.savefig(\"confuse_maxtrix_randomforest.png\")\nplt.show()","0e7488ef":"from sklearn import svm\nclf_svm = svm.SVC()\nclf_svm.fit(X_train,y_train)\nreport = validModel(clf_svm,X_test,y_test)","f9120844":"skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=12)\nparam_grid = { \n    'C': [0.1,1,10,50,100,200,500,1000],  \n    'gamma': ['scale','auto'], \n    'kernel': ['rbf','sigmoid'],\n}\ngridCV_clf_svm = GridSearchCV(svm.SVC(), param_grid=param_grid,refit = True,cv = skf, verbose=0,scoring = 'accuracy')\ngridCV_clf_svm.fit(X_train, y_train)\nprint(gridCV_clf_svm.best_params_)\nprint(gridCV_clf_svm.best_score_)","7fcbf852":"svm_model = gridCV_clf_svm","7318fafe":"x,y = getXYInputGraph(svm_model)\nplt = drawBarGraphHorizontal(x,y,\"SVM\")\nplt.savefig('find_params_svm.png',bbox_inches = 'tight')\nplt.show()","bc19b4e6":"supVectorMachine_attribute = validModel(svm_model,X_test,y_test)","e260b0a6":"y_pred = svm_model.predict(X_test)\ny_true = y_test.to_numpy()\nplt = drawConfuseMatrix(y_true,y_pred)\nplt.savefig(\"confuse_maxtrix_svm.png\")\nplt.show()","22517edf":"from sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier(max_features=0.2,n_estimators=150)\nmodel.fit(X_train,y_train)\nreport = validModel(model,X_test,y_test)","e2813ae1":"param_grid = { \n    'max_features': [0.15,0.2,0.25,0.3,0.35],  \n    'n_estimators': [150,200,250,300], \n    'criterion' : ['friedman_mse', 'mse']\n}\ngridCV_clf_gbc = GridSearchCV(GradientBoostingClassifier(),param_grid=param_grid,cv = skf,scoring = 'accuracy')\ngridCV_clf_gbc.fit(X_train, y_train)\nprint(gridCV_clf_gbc.best_params_)\nprint(gridCV_clf_gbc.best_score_)","11dffef8":"gbc = gridCV_clf_gbc","c894ce2c":"x,y = getXYInputGraph(gbc)\nplt = drawBarGraphHorizontal(x,y,\"GradientBoostingClassifier\")\nplt.savefig('find_params_gbc',bbox_inches = 'tight')\nplt.show()","d3b5cd91":"gbc_attribute = validModel(gbc,X_test,y_test)","e3807d8f":"y_pred = gbc.predict(X_test)\ny_true = y_test.to_numpy()\nplt = drawConfuseMatrix(y_true,y_pred)\nplt.savefig(\"confuse_maxtrix_gbc.png\")\nplt.show()","b03310d7":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier","b0042cee":"param_grid = { \n    'base_estimator': [DecisionTreeClassifier(max_depth = 5),\n                       DecisionTreeClassifier(max_depth = 10),\n                       DecisionTreeClassifier(max_depth = 15)],  \n    'n_estimators': [100,500,1000,2000], \n}\ngridCV_clf_adaboost = GridSearchCV(AdaBoostClassifier(),param_grid=param_grid, verbose=0,scoring = 'accuracy')\ngridCV_clf_adaboost.fit(X_train, y_train)\nprint(gridCV_clf_adaboost.best_params_)\nprint(gridCV_clf_adaboost.best_score_)","8bcce6ae":"adaBoost_decisionTree = gridCV_clf_adaboost","e6be1503":"x,y = getXYInputGraph(adaBoost_decisionTree)\nplt = drawBarGraphHorizontal(x,y,\"AdaBoostDecisionTree\")\nplt.savefig('find_params_adaboost.png',bbox_inches = 'tight')\nplt.show()","1b15650e":"param_grid = { \n    'base_estimator': [GradientBoostingClassifier(max_features=0.05,n_estimators=10),\n                       GradientBoostingClassifier(max_features=0.1,n_estimators=10),\n                       GradientBoostingClassifier(max_features=0.2,n_estimators=10),],  \n    'n_estimators': [100,200,500], \n}\ngridCV_clf_adaboost = GridSearchCV(AdaBoostClassifier(algorithm='SAMME'),param_grid=param_grid, verbose=0,scoring = 'accuracy')\ngridCV_clf_adaboost.fit(X_train, y_train)\nprint(gridCV_clf_adaboost.best_params_)\nprint(gridCV_clf_adaboost.best_score_)","3f2fef11":"adaBoost_gbc = gridCV_clf_adaboost","f4f1cd57":"x,y = getXYInputGraph(adaBoost_gbc)\nplt = drawBarGraphHorizontal(x,y,\"AdaBoostGBC\")\nplt.savefig('find_params_adaboost1.png',bbox_inches = 'tight')\nplt.show()","66c9c5f4":"report = validModel(adaBoost_decisionTree,X_test,y_test)","62d7d362":"y_pred = adaBoost_decisionTree.predict(X_test)\ny_true = y_test.to_numpy()\nplt = drawConfuseMatrix(y_true,y_pred)\nplt.savefig(\"confuse_maxtrix_adaBoost_decisionTree.png\")\nplt.show()","37ece630":"report = validModel(adaBoost_gbc,X_test,y_test)","24e5f204":"y_pred = adaBoost_decisionTree.predict(X_test)\ny_true = y_test.to_numpy()\nplt = drawConfuseMatrix(y_true,y_pred)\nplt.savefig(\"confuse_maxtrix_adaBoost_gbc.png\")\nplt.show()","c17d7063":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold","9954fd21":"trainValidation = []\ntestValidation = []","8ae843b2":"print(randomForest.best_params_)","f80306ad":"model = RandomForestClassifier(class_weight = 'balanced',criterion = 'entropy',max_features = 'auto',n_estimators = 300)\ncv_scores_randomForest = cross_val_score(model, X_train, y_train, cv=skf, scoring='accuracy')\nprint('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores_randomForest)))","175b7969":"model = RandomForestClassifier(class_weight = 'balanced',criterion = 'entropy',max_features = 'auto',n_estimators = 300)\nmodel.fit(X_train,y_train)\nprint(\"Test_Data---------------------------------------------------\")\nreport = validModel(model,X_test,y_test)\ntestValidation.append(report['accuracy'])\nprint(\"Train_Data--------------------------------------------------\")\nreport = validModel(model,X_train,y_train)\ntrainValidation.append(report['accuracy'])","e15f37a5":"print(svm_model.best_params_)","5f612c91":"model = svm.SVC(C = 50,gamma = 'scale', kernel = 'rbf')\ncv_scores_svm = cross_val_score(model, X_train, y_train, cv=skf, scoring='accuracy')\nprint('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores_svm)))","d247cbed":"model = svm.SVC(C = 50,gamma = 'scale', kernel = 'rbf')\nmodel.fit(X_train,y_train)\nprint(\"Test_Data---------------------------------------------------\")\nreport = validModel(model,X_test,y_test)\ntestValidation.append(report['accuracy'])\nprint(\"Train_Data--------------------------------------------------\")\nreport = validModel(model,X_train,y_train)\ntrainValidation.append(report['accuracy'])","d1efa0f9":"print(gbc.best_params_)","7f4b4455":"model = GradientBoostingClassifier(criterion = 'friedman_mse', max_features = 0.2, n_estimators = 150)\ncv_scores_gbc = cross_val_score(model, X_train, y_train, cv=skf, scoring='accuracy')\nprint('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores_gbc)))","5ef080c8":"model = GradientBoostingClassifier(criterion = 'friedman_mse', max_features = 0.2, n_estimators = 150)\nmodel.fit(X_train,y_train)\nprint(\"Test_Data---------------------------------------------------\")\nreport = validModel(model,X_test,y_test)\ntestValidation.append(report['accuracy'])\nprint(\"Train_Data--------------------------------------------------\")\nreport = validModel(model,X_train,y_train)\ntrainValidation.append(report['accuracy'])","efa6a90c":"print(adaBoost_decisionTree.best_params_)","002fd650":"model = AdaBoostClassifier(base_estimator = DecisionTreeClassifier(max_depth=10),n_estimators = 1000)\ncv_scores_adaBoost_decisionTree = cross_val_score(model, X_train, y_train, cv=skf, scoring='accuracy')\nprint('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores_adaBoost_decisionTree)))","d391b138":"model = AdaBoostClassifier(base_estimator = DecisionTreeClassifier(max_depth=10),n_estimators = 1000)\nmodel.fit(X_train,y_train)\nprint(\"Test_Data---------------------------------------------------\")\nreport = validModel(model,X_test,y_test)\ntestValidation.append(report['accuracy'])\nprint(\"Train_Data--------------------------------------------------\")\nreport = validModel(model,X_train,y_train)\ntrainValidation.append(report['accuracy'])","89824e5d":"print(adaBoost_gbc.best_params_)","ffd0fb83":"model = AdaBoostClassifier(base_estimator = GradientBoostingClassifier(max_features=0.05, n_estimators=10), n_estimators = 200)\ncv_scores_adaBoost_gbc = cross_val_score(model, X_train, y_train, cv=skf, scoring='accuracy')\nprint('Accuracy score - 10foldCV - Training dataset: {}'.format(np.mean(cv_scores_adaBoost_gbc)))","c73f594a":"model = AdaBoostClassifier(base_estimator = GradientBoostingClassifier(max_features=0.05, n_estimators=10), n_estimators = 200)\nmodel.fit(X_train,y_train)\nprint(\"Test_Data---------------------------------------------------\")\nreport = validModel(model,X_test,y_test)\ntestValidation.append(report['accuracy'])\nprint(\"Train_Data--------------------------------------------------\")\nreport = validModel(model,X_train,y_train)\ntrainValidation.append(report['accuracy'])","9decc80d":"print(trainValidation)\nprint(testValidation)","9d3e2ae5":"x_label = ['RandomForest','SVM','GradientBoosting','AdaBoost_DecisionTree','AdaBoost_GBC']","bbdb1477":"pltTrain = drawBarGraphVertical(x_label,trainValidation,\"Class\",\"Value\",\"Train Accuracy\")\npltTrain.savefig('OverAll_Train_Val.png')\npltTrain.show()","e7dd82ce":"pltTest = drawBarGraphVertical(x_label,testValidation,\"Class\",\"Value\",\"Test Accuracy\")\npltTest.savefig('OverAll_Test_Val.png')\npltTest.show()","16462bd9":"# model = clf_esemble\n# finalData = []\n# band1 = ds.read(1)\n# band2 = ds.read(2)\n# band3 = ds.read(3)\n# band4 = ds.read(4)\n# band5 = ds.read(5)\n# band6 = ds.read(6)\n# band7 = ds.read(7)\n# band8 = ndviList\n# band9 = ndwiList\n\n# none = band1[0][0]\n\n# for i in range (0,band1.shape[0],1): \n#     array = []\n#     x = []\n    \n#     for j in range(0,band1.shape[1],1):        \n#         if(band1[i][j] != band1[i][j]):  \n#             array.append(None)\n#             if(len(x) > 0):\n#                 y = model.predict(x)\n#                 array = [*array,*y]\n#                 x = []\n#             continue\n\n#         x.append([band1[i][j],band2[i][j],band3[i][j],band4[i][j],band5[i][j],band6[i][j],band7[i][j],band8[i][j],band9[i][j]]) \n#     finalData.append(array)            ","f50a340f":"# finalClassifierData = np.array(finalData)\n# print(finalClassifierData.shape)\n# lastImage = np.array([finalData])\n# print(lastImage.shape)","ceb08764":"# print(band1.shape)","914f9e57":"# with rasterio.open(\".\/lastRes.tif\",\"w\",\n#                   driver = driver,\n#                   height = height,\n#                   width = width,\n#                   count = 1,\n#                   dtype = dtype,\n#                   crs = crs,\n#                   transform = transform) as dst:\n#     dst.write(lastImage)","4314ff54":"> **Get necessary parameter for data caculation**","c7ab48ab":"> **Start to calculate new value(ndvi,ndwi)**","4d520195":"> > **Initialize model**","5179f9bf":"> # **1.RandomForestClassifier**","5d9d2e8f":"> *425 b\u1ecb Null do n\u1eb1m ngo\u00e0i map*","85b53245":"# **3.Training Model**","d8d0517f":"# **1.Preprocess Image Data**","4e0544bc":"# **2.Preprocess Data Points**","e275ac4f":"> > **Find best parameter for AdaBoostClassifier**","cc682c15":"> > **Take the bands that needed**","f1932e3b":"> > **Initialize Model**","46fcaa46":"> > **Function Print Value**","247e1e49":"> **Add number label for point**","c31433b4":"> **Start making image from matrixs**","01843236":"> # **3.GradientBoostingClassifier**","6d4f3450":"> **Complete data process**","c711f406":"> # **4.AdaboostClassifier**","3bfa0718":"> **Dispose point that have null attribute**","c6af695f":"> **Initialize**","973ab242":">  **Calculate some value index**","01ce0e28":"> > **Validation Model**","085c841e":"> > **Draw Confuse Matrix Function**","97effdd7":"> **Set label of data input and data output**","63313db1":"> **Initialize**","39dd01ee":"> **Split train collection and test collection**","faaa19ca":"> **Caculate index depend on position**","3c2216de":"> **Xem qua d\u1eef li\u1ec7u**","1d3567c6":"> > **If you want to remove output file,remove the comment**","f1c5f1df":"> > > **AdaBoost has base_estimator = gbc**","1a58b459":"> > **Validate Model**","63638241":"> > **Precision, Recall and F1-Score**","47d75e27":"# **4.Export**","ec74d324":"> > **Validate Model**","51fdfea9":"> > **Choose best parameter for model**","94f70ca8":"> **Test**","ab03ef12":"> # **2.Support vector machine**","b17867a0":"> # **5.OverAll**","a2ae078f":"> > > **Best parameter with base_estimator = DecisionTreeClassifier**","1e2ed079":"> **Predict and export classification image**","d4cdaee2":"> > > **Best parameter with base_estimator = gbc**","c619649c":"> > **Choose best parameter for model**","e9a0aea5":"> > **Import data and test**","41a3da51":"> > **Initialize model**","3ad6e0f4":"> > **Choose best parameter for model**","888d9aac":"> **Test**","cbe98c61":"> > > **AdaBoost has base_estimator = decision_tree**","b7253494":"> **Export tif image**","2e613ddb":"> **Export data**","6333abe8":"> > **Draw Bar Graph**","4dea9223":"> > **Import library**","91641573":"> > **Initialize Model**","7b642c67":"> > **Calculate new value matrix**","74e28618":"> **Get one band data function**","af431b7e":"> # **Support Function**","c4aa3fb5":"> > **Validate Model**"}}