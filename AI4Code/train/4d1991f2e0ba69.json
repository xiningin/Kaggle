{"cell_type":{"1bb543b5":"code","d5c7015e":"code","0683a859":"code","91f28d91":"code","b2fa1a54":"code","d25927c7":"code","08317297":"code","0232cc86":"code","b8cb3687":"code","ed6376db":"code","3ad54532":"code","9932ebd3":"code","75f04560":"code","274d5c8c":"code","f84b97be":"code","08393411":"code","a3088097":"code","d7f71ec7":"markdown","0709a58c":"markdown","764cc6c8":"markdown","93b2e62c":"markdown","c15fa27b":"markdown","a3e97b9d":"markdown","ca7c3deb":"markdown","9aa7a577":"markdown","8b716311":"markdown"},"source":{"1bb543b5":"\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n","d5c7015e":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/Restaurant_Reviews.tsv', delimiter = '\\t', quoting = 3)\n","0683a859":"#Check the dataset!\ndataset.head()","91f28d91":"#check the null values!\ndataset.isnull().sum()","b2fa1a54":"\n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = [] #Creating an empty list\nfor i in range(0, 1000):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])#Remove all specail character like('',:,;,%,*,@,$,!,#) \n    #Convert complete sentences into lowercase. \n    review = review.lower() \n    #Spliting each sentences into different words.\n    review = review.split()\n    #Stemming example is love-loving,loved,lovely.etc.\n    ps = PorterStemmer()\n    #Removing unnecessary words like is,of,for,this...and only focusing on main meaning of the sentence. \n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)","d25927c7":"print(corpus)","08317297":"print(review)","0232cc86":"\n# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1500)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, 1].values\n","b8cb3687":"print(X) #Separting every unique value and mapping it as 1 just like encode and decode..","ed6376db":"print(y) # liked or not!","3ad54532":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n","9932ebd3":"\n# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","75f04560":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n","274d5c8c":"\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","f84b97be":"print(cm)","08393411":"Accuracy=(55+91)\/200\nAccuracy","a3088097":"Error_rate=(42+12)\/200\nError_rate","d7f71ec7":"# ----Natural Language Processing #","0709a58c":"# ---How does NLP actually work?\nNLP combines AI with computational linguistics and computer science to process human or natural languages and speech. The process can be broken down into three parts. The first task of NLP is to understand the natural language received by the computer. The computer uses a built-in statistical model to perform a speech recognition routine that converts the natural language to a programming language. It does this by breaking down a recent speech it hears into tiny units, and then compares these units to previous units from a previous speech. The output or result in text format statistically determines the words and sentences that were most likely said. This first task is called the speech-to-text process.\n\nThe next task is called the part-of-speech (POS) tagging or word-category disambiguation. This process elementarily identifies words in their grammatical forms as nouns, verbs, adjectives, past tense, etc. using a set of lexicon rules coded into the computer. After these two processes, the computer probably now understands the meaning of the speech that was made.\n\nThe third step taken by an NLP is text-to-speech conversion. At this stage, the computer programming language is converted into an audible or textual format for the user. A financial news chatbot, for example, that is asked a question like \u201cHow is Google doing today?\u201d will most likely scan online finance sites for Google stock, and may decide to select only information like price and volume as its reply.\n\nNLP attempts to make computers intelligent by making humans believe they are interacting with another human. The Turing test, proposed by Alan Turing in 1950, states that a computer can be fully intelligent if it can think and make a conversation like a human without the human knowing he or she is conversing with a machine. So far, only one computer has passed the test \u2013 a chatbot with the persona of a 13-year-old boy. This is not to say that an intelligent machine is impossible to build, but it does outline the difficulties inherent in making a computer think or converse like a human. Since words can be used in different contexts, and machines don\u2019t have the real life experience that humans have for conveying and describing entities in words, it may take a little while longer before the world can completely do away with computer programming language.","764cc6c8":"After doing above we a bag of words like this\n\n\n\n\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw8PDxAPDw8QDQ0NDw0PDxAQDQ8PDQ8NFREWFhURFRUYHSggGBolJxUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGhAQGisdHR0rLSsrKy0rLS0rKy0rKy0tLS0rKysrLS0tLS0tLSstKystLS0tLS0tNys3LTc3KysrK\/\/AABEIAMIBAwMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAAAQIDBAUGBwj\/xABCEAACAQIDAwgFCAkFAQAAAAAAAQIDEQQFEgYhMRNBUWFxgZGhByIyUrEUFSRyc7LB0SNCQ2JjgpKi4TM0g7PwU\/\/EABgBAQEBAQEAAAAAAAAAAAAAAAABAgME\/8QAIREBAQACAgICAwEAAAAAAAAAAAECEQMxEhMhMkFRYSL\/2gAMAwEAAhEDEQA\/APcQAAAAAgkgCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIJAFE6iirt2MSeYL9VXXW7HJ7S55Up4mpTi3phpSW5r2U7+ZrHtLV6jjeXVdZx7d784P3V4j5wfurxOBW0lZ86K1tBV57eBPa16ndvMH7q8R84PoXicN8\/VHzJlqecVX+tYntPW735wfQvEiWZ246F2yseeVczrPjOVui+4x3WlLi2T3L6o9LhmWpXjpa6U7ol49\/unmsasluUpJdCk0UqpP3n4se6nqj0yOY9UX2Mq+cP3V4nm9KtJfrPxZXLEzfGUv6mX3U9Uei\/OP7vmSswXR5o83VWS\/Wav1sjlpe8\/Fj3U9UelfOUP\/ADRiZntHhsNTdWtPRBNK+5tt8yRwMa0vefiafan9JTpxktf6S9pb1dJ8wnLU9Ueo5FtVhcdOUKEpOUVq9aOm6vbcby55N6PpcniqPTVU4PotpbS8Uj1k64ZeUc88dVIANsAAAAAAAAAIJAAAAAAABAHl+1q+m1+2P3ImoSNttTK+MrfXt3WSNSjxZ\/avXj1EpFcShMlmWlaK9LLbZcpy6wJUSpQKtDbLijYCy4dBXCJc0c5EtxRROa5hrKXNFMqiAuuXAoci3y8Vxkl3op+VU\/fj4oC7qZZxUd8W9+jVLvtuKZZhRXGpD+uJYxGPpSi1CalK1vVaaW9cREX8nq8nWo1OaFWnLuUlc9kR4jQfwPZcsrcpQpT9+nBvttvO\/DXHmnTKAB3cQAAAAAAAEAEgAAAIZIAgkADT5js9h683UnqUpWvpaSdla+9HE5xgKFOpKNNycYuy1STbtz7kd7nWMVGlJ3tKSaj+Z5fm9dttnDk1Hbj2wMXXlHdHT3mtrZjiVwjT\/pf5ldST7zH33OW3bSmWZ43+Ev5f8lt5hjvepr+SJfsToJs0sfOOP\/8ArFfyQ\/Ih47HP9uv6IfkX3THJsbXTGlicY+OJa7IxX4FEpYl8cVV7nYzo0Cfk42NTKjUfHEVn\/wAjKfkSfGdWXbUkbuGCfQXYYB9A2mmgWXw6JP8Ann+ZU8uh7l+1t\/E6WnljfMZVLKBumnL0cthf2I\/0o2Sp6NEEknK83utuW5fj4HSUcpiuY5uvUUq9SS9lS0R+rEK2WHaPUdjq+vB0\/wBxyh4M8kp1LHo3o4xOqjVhffCcZLskv8M6cV+XPl+rsQAel5gAAAAAAAAEEgAAAAAAgkt1pWjJ9Cb8EBx21WL11nFPdTSj\/Nxf4eByuMouRlTxDlJt73KTd+1k7mePK7r14zUaKrgmY08I0dLoTKZYZMy05nkGVqkb2eCRaeDA1KolUcOzaRwxdhhiDW0sJcy6WBNhSoGRGnYuhg08GZMMMugyCXIuhTGki5GCKNdih1iicyrqlRqT51Gy+s9yOSw+E3L\/ANvN\/mMlODi96bT8DX4d24i0XcJgo86Oz2Ia5SsluShD4s5mFrHQ7CO9at9nH7xvD7Mcn1dsAD0vKAAAAAAAAgEgCCQAAAAGNmMtNGq+inP4GQa\/P56cLXf8OXnuJelnbzFMuRmWmEeJ7GTGRdjIxIsupjYy4lWgx4TL8JlRTKmIwL1iiU0iqXsHMtyqItyqIgvuZblUMedUtOZNi\/OqWpVS1KRRJkFct6Mapul2l9PcWHLeUZVOe7rOn2Cf6at9mvvHLQ6jqNhF+nqdPJP70Tpx9scn1ruQAep5QAAAAAIJAEAEgAAAAAA1W1C+h1+qF\/M2prdo19ExH2ciZdLO3kVPPcPKu8Mqi5eLacGpJ3XxM6rVjCLlJqMYpyk27JRXFs852tXyTNsPilujU5KcnzXT0T8reJuvSRmnJYVUYv1sS7dfJLe\/wPP4da\/L0efbqqNeM4qcGpwkrxkneLXSmS8RBPS5xUt3quSUvA5f0fY\/lMClJ78PKUH1R9peTNDs5F4\/NauJlvp0W5R6PdgviyeHzf4efX9emKXWVQrdDT7Hc82znNcVmOMeCwk3SoQbjKSbWq3tTk+NlwSKsZsViqEHVw+LnOrTWrTeUXK2+0Xfj2lmE\/NPO3qPTvlLta3fcszqtnJbB7RTxlKUKrvXoabytbXB8JPr5n3HOYzH5jiMxr4bC4icLTqOEXU0wjGNrrgT123S3Oa29LcmUts83xGd5tl04fKmq9KTt62iSl0pTSun2nYZ5mrp4GeKotX5KE6d1des42uu8mXHYszlbchnnWD2nzipT5WnQp1qabV1RbvbjuUrm92Z2uji5cjVhyGI32jd6ZtcUr70+pi8diTkldOTY0e0u0lLAxWpOpVnfRBO10udvmRoIbfVouLrYKcITas1KSb7NUbMk48rFucnw7ySsi1Twzm77kiqMtUU961JOz4q6\/yZtCmrcSNMRLS3HofkdPsN\/uJ9dKb\/ALoGjxNC+9cV5o3WxD+k9tCp96Bvj+MmM\/q70AHqeUAAAAAAABAJAAAAAAANdtCvolf7KfwNiYOeK+Gr\/ZT+BL0s7fPfpNwevCwqpb6FTe7b9E9z80vA0GSuWaY\/Duqr0sLRpa096eiK4\/Wl5I9Cz3B8vha1Li505aenUldGk9HuTyw+HlUqRcK1eTumrSjCO5J+Zxxy1g7XHeTi6mMnl88wwiuuV9SDv7K1ce+Mn32Ox2Jy54fAOo1apiIyqvp0qL0L8e81W2WRSrZjh9MW44lRU2l6q0ve2+w7yEIqKil6qSil1WtYZ5fEMMfmuC9F6Tq4qb9u0e3fJtnoTfHvPMVKrk2OqTdOVTDVm963KUG7qz4KS4WNhm+30KlKVLC0qqrVIuClNRTjfdeKi3dkyxuWW4uOUxmqxvRy75jiXH\/T5Kta3CzrQ0mswmb\/ACXM6+I5N1vXrxtHrdr+R1+wWRzwlGdWqtNavZ6eeFNcE+vfc0vo+WrMMXLqqvxqm9zdrOrqRi5rmeIzqdOhQo6IU5a5Nu6i3u1SfMuJ022VFUcplSTuoRw9NPpSnHf5HP5vTllOYrEQT+TV25OK91v14dF1xXcb70hV4yy3VFqUatSi01wcXdpmb3NdLOrvtd9H0bZfS5ryqv8AvZze3tNUMww9an6s5xpzlbdecajV+9WXcdBsnmeGo5fR116cHGLck5xUk22+BzVer865pTdNPkKWhXa\/Ywk5NvtbfiJL5W\/gy+sjL9IeEqRxFDFqOulGMFK6vGMoycrS6nfyOnyfPcLj46U462lKVGok5JrfdJ+0l0o2dSrTb5KTg5Sjdwk024cOD5jzzbfKKeCqUcRhnyUpzb0J+zJb9S6F1En+p41b\/m7j02Kv4l7VbeYOBrOdGnN7pThGTXW0ZE59BydV6WJfMzebIu2Lh106i8r\/AIHOUoXZ0Gy7+mUv+T\/rkbw7Yz6egkkEnqeUAAAAAAAABAAkAAAAAMTNVehWX8OfwZlmPj1+iq\/Z1Pusl6I8pT3FLRK4IpbPHXsimSIEiLkVFWnGStKKknxTSaLNDAUabvClTg+lQimZAuPlNKjBwOU4ehOU6NKNOc1aTjxavczWyLjZpi5rldHF0+Trw1xTUlZuLT6mjEr7NYepho4RuoqMJKUUql5Jq+67T3bzbXKoMsypcY5CPo8wSd9eIa6HUhbyjc6DK8poYWOihTVNPe3xlJ9be9mwZQ0W5W90mMnTlto9kXiq3yiniZ0atopJq8UkrLS0048\/TxMPA7CPlIzxeJliFB3UPWs+pyk3u6kdmC+zKTSeE3tMVZJLckrJcyRUoiKK48SKvUYG72Tj9Kpv7T7kjT8LLvZu9koWr078bVH\/AGM6Y9sZ9O7AB6HmAAAAAAAAAAAAAAAACzjFenU64TX9rLpRXV4yXTGXwFHkjRbLlbc32v4llyPE9iWQ2UykRcguRYsW4yKrhUi5FyLgVBMouSBduRcpTAAm5SxcC4uBew8d9+gsw4F1u0bc8t3caiLtF6m30\/A6LZj\/AHUF+7P7rOfo7rG82Wn9MiufTUfdpOuLnn07oEEnd5wAAAAAAAAAAAAAAAApkuJUQB49mE7VZx54ykvMxHUPZK+Co1PbpU6n16cZfFGDW2awM+OGpL6kdH3bHC8TtOV5RrKtR6LX2HwcvZ5Sn2TuvM19fYCP7PESX1oJ\/AxeLJr2xxWonUdHX2GxUfYnSqd7h+BrcRs1jqfHDzklzwcZ+SdzNxs\/DUzjX3FxWw1Wn\/qUqlP69Ocfiiy5k01td1EqRa1DUQX1Im5Z1kqYVdbITKVIJgX6ZcTvLqju7yzTnZN9HxK6Ke5JOUpNJJJtuT6jUSsjlLM7LZTJZU38oqq1SUXGEXxjBtNt9bsRs3syqVq2ISlW3OMHvjTf4v4HUJHoxx\/bz557CQDo5gAAAAAAAIJAAAEASAABBIAAACCQAIsLEgCLGLiMsoVPbo059bpxv4mWCaGjr7J4Gf7FR+rKUTXYjYPDP2KlWn3xkvNHWglwxamVjgcRsBP9niIvqnTa80zXV9isdHhGnU+pVSf91j04GfVis5MnkNfI8ZT9vDVLLnjHXHxRhyhKPtRlHti0e1WKZ0oy9qKl2pMzeGftqct\/Tx7CYapWlGnTi5yb4L8ehHo2zuz0MMlOdp12t8uaHVH8zb0cJSg24U4wcuLjFJsvWNY4aZyz2IkA6MAAAAEASAAAAAgEgCAABKIJAAgACSGSABBIAAAAAABAAEkAASQABJAAEkAASQABJAAEkAASQABIAA\/\/2Q==)    ","93b2e62c":"# ---Exercise ","c15fa27b":"# Bag of words \nThe bag-of-words model is a simplifying representation used in natural language processing and information retrieval (IR). In this model, a text (such as a sentence or a document) is represented as the bag (multiset) of its words, disregarding grammar and even word order but keeping multiplicity. The bag-of-words model has also been used for computer vision.\n\nThe bag-of-words model is commonly used in methods of document classification where the (frequency of) occurrence of each word is used as a feature for training a classifier.\n\n\n\n\n\n\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAXEAAACJCAMAAADt7\/hWAAAA\/1BMVEX\/\/\/9p3V8AAADMzMzc3NzKysr8\/Pzh4eHm5uby8vLq6urOzs5r4WGrq6vZ2dlk3FlBQUE1NTWKioq1tbXExMRlZWUtLS3\/\/P\/u7u739\/fU1NSgoKBpaWkUFBS8vLwhISGTk5NVVVVOpUd1dXWPj4+np6eBgYFPT09ISEibm5tYuVBaWlo8PDwbGxszMzMQEBBWtE2\/7bu74rY+gjiw6avA37ur7KdCizxk01vp8OjF28MLFQmU3Izc89qO24S\/7Lt94HXg6d4kSiCn3KCe3JY2bS\/C5r8XLhSF433s+upMoEWA33fb69hizVia3ZO737UsXSjT89A8fTYmTyLU39FYIBYiAAATz0lEQVR4nO1dC7ubNrYlsnkfHMzDNQbzKDY2AdtNmrRpm0naTptpp03bO9P\/\/1vuFiBeFhzbOcmd6dXy98UGhLa0tLS1tY9jOI6BgYGBgYGBgYGBgYGBgYGB4YNBiW3tlvt8O1tefdPEjme3GLsPcmKnwoPU5KT2Ru6esjzv\/RvtTKdO9VFEyLilihQh6eqbTISsW4xR4Ygi4UbJkX0544o43HLZRjule0pDiL+heV1Yh4NaffzvZXy2WJDZqejIu5zxOIjkoWvAeNSbuw\/CuNlU8lEZ56MHmKAEK4Tc6uN1jNso\/3\/D+IPiPRjXPzrjPkL\/J17lQTFDaFt9vI5xD+nO0LUPw7iSZAh5CcCsGBc3R3Sy1bqEsEoW6JSnyvnNElwJwDe4NeOO5S3QITKbwtM4QIt4yllJ0hXTKjHE4sPSzI5ondtmP94RZskcLLsi6W6SOo6vn5CudauSNh5CkQGd0ISCcW65hTZHfs28MDXyEzqGPT\/mJ0cU4M4bcEGQ+Fg\/oIVtVbVjxmXFzdEps6phaTGuhPs13Lyi8zoMEEeFrGB8swrKw7Qq4MTV9bnfv9dflFe0WuOKVxXWSdfcU3nCTxDqMkpWzumOtCDpVu+E1fnALE94aDG1y1Neh\/JJ3QnbwYzHql4ehhXlTlpdP5kdE0Z9I5xfHetayt4A45lV1RSXNzSMbyue0OYyomuUGjcMo9L4\/oiyMI2gppIzB7q4SLQt7mlvOMF3osg1YUR2FePCHgrH5maOUD4jtKJsC2UO+jnja8y4DDdHW8sP7T7jMEYnW3Ozkg9AjOZ7pCcu1kDYLimFhcahE6XGowXahSlucqUSuBx4mhbXVVXwYRIFCdxnTCFoQ4EdmibMW6QTxvMc7VMzWRN3WzMOaljbbnEl5a5E14+jeXEAfsIrTm1geAuhWAe07whLyEHd+MMKPpSMA0e2UnKDMnyXBHO76LQKg0BnfFY3WVY71y0YvWKM3QMKxKrW0luv5tWZGl0\/jg7F7DHXKCuaDDx5hfFZjg7dFaflx0WznBFCXI2LbJO5PtWrwSOMQ+P2RQsUEOeEuw7dWKVShQNji9uoHKpGF4PQ8St+4YiqZhSML2Falg5cBrFPyyubpgyV8e3QquvVekyqQASYsMszYX\/CdWOV6rPgle1Z7tFCqTvb3VXTYhVlUToRzLhe31cIr2IcXC3ZxKjB1dFGl3G7tC8YpcC0ZhpOj92pvKnnhlx5FbNxxVoxDaFhi8qhL3cDjPt9Doi5ec3F9IQW+B0Yr5R9dlOP8Uq2YdmudukT2nVu7DMuOI4je2WMghmvNmkO+DaZqxmfnRqaM7S4MqnQZZxQ5qJALRqE\/OmsAA8xQCuQgmbNycyOy565TU1L8KvQ+X0TXnkDjEvgAwz\/XOYWdIr0BDxrZaaSqrruec8u43p147ZcjaBd26oTIkRFnRs7jCumm8Se5+VIx10DxgMSASTlaFeMg1MxSI12PcCXgr4D0lCA3RO46AXBCbU3xMsIRSQGTErG02ZF4GDtBDaPzSDFA4xzRRiRZ2mPdL\/xzFyl2hgdqypmh+586zFO8ipa4XxgvqKg6gMORzo3thk38zp0ybFPxCsnEVVYsqTVb6TGxfphGQd15XOCY1vjoF+btLWavZuWd4UluFg4Y3KCEh2WjHMTr+xp3Lnut8KKrBQ3xCqXMe51GQfTi3mDzo0txmFGBPEm1UwtQ\/OK8TqTtS1XsYrxtFPj4YE1vprWaMsQNL67T+NKXq+7wxoHTK1wjylvt9xvOMQaF7ibGQclnDSx6UXnxoZxkFBukbaeaXxThiSNxsOmxmvTQ6OMe4O7WrwqksZ7tR8n0YxYBDKtJgvZCOP4+kpvjReAX6OE+PGA+PHbGN\/2oqw2GsZndZAPkRZh\/EAmbbWGVIzzN0ThDawOTz3G\/eFMS1rfJ+Ul49aaxIvYz7jlW+UagMBRxouRb+9OJAjplnULiwBjnHFCwTnjsAjH3ABAzkpdRRXRTBs\/Tk7BBAhasco0aCbv9RAbeZwzLgXNct0D9GNfd6xg3JnXu329GoMTmpeuwh6Kx1vH3Xx5XC+dZEfSYnzdYxwoICfOGXf2w\/mnsJ6pzVbMazG+qBuXtOJxvElyKbVdCFy\/JEkyjfFim24ugTVHUqPuXxCgYZ4icPIWnSqmoXDAy5wz00lFeNHiRRH2esEA43G8wtULqwwdOmMr4R3mkhMU6F0ZY45oHLZ+cws6saQxjp0AchXcCUXNug4GJnEiwo0OnqkLX+AEKW7FKmBagi5Cx8qNBdlzzqA7Gwm3W5nGV3OP0zlHfZ5QGRdwOmkfp2F87P\/NRsKBTLLJUJARbcc427CJ4UIVOco4K3KA5sWUlfOE68MZkTgMk6DJO1WAZQHtjAQEWnnTVnTY13hR+JjPE4fGeBGB5mAl1vsuHc\/GdZ7rVlkoCZMczeM6Vtnv0DEJMfMaqbGcLT6250G79ze4dHkT4ASfR2UcmJlXMerB6+YyuFmZ9VvwdbbWCctU4ckmYYccQuWnIByMVTZrUn2PQyhR5Sb1at6PeBVOSANckUdnnLNIqH3Yd2MVTozWpzLBhaNIjL0U1hrPxKw4t07rGiv\/tIpIOlK\/4Y+HzszyTWib45tkYoumT5YGwQ+NZJOalKXCNBLDlaGwWaeDXMMw0nbSQ5j4KwE78mMvqW36BX+OlW4MI9Qo1TsaXNnUHVJNi2RffXPaLyyI0AmIdgTLJOYVs2m0leKGaZTvHCxXvu8XU3KVluZmZpEPF1STFzgrhPtIXCz5fl0Dj2sMNfG8xv8ITI+dHAHDB0OlCDnuZaYZPhCcY8qLMG1h7dld\/yUihuvhwFp11IsV8D\/V3\/3FIMQZDoTWuw1T+MeCvFJ5XqV8EYCBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYHhegjkrXy1Ds7KCa1X\/5Yan7Re7YOzn3YVegXIgdArxXGXmC3ro9VI\/U1Zehs5euGuhXMbV\/5q7bT4oUSx9SrfpF49UqeM2HzsFlOePSevp0+fv6kPXpz9ms2fz988fdoUKA7w4Xcdw5JIN3v2QxbCn1\/8jo1CFV\/8Dh\/rA9oPP8svvihfRSuf1Qdvx35zx\/mzKPOmfQM+eH7lbw7M+AkV\/YZK9GJ8j\/FfHz0mL0Bz8MuZ4TePH7eL1AdPO6VEevP4M8Y\/+e3caIH\/oXT6q5f0Vv708whTwusBC2M3UTClMznpd2mA8Unvd\/f\/9oiKx7990jf8\/DG96NcXmT3\/DcZXA\/V9R+n0VwOtfDWmceEnuoVvvxq5iYLZQJcu1Pikp\/HvBvry05nhZ\/T2P37TKSXSrVI0\/sMA41SNf0u3\/XqMPOf1gIUH0nifceUysQ1p\/NXFGn\/RKXXhQAOG+PiV0umfh1o5Ktdf6BZeXqnxVasbqjrMuNgp1xTsMf5dqyl3d01fXp8x\/vtjaslHb4fMtq2eM\/7J3x9Tq3v0N0qn2xrvtPJSjbctXMt40yWVtyy+7tSwxqGc36xngxp\/+fLduzHGG43jki8HGJdaVk1rUjdvTOOd6qiM\/9yxfSHjLY13LdyqcdVPAT7pU99RNiNjuambmvdo\/O7dvxFCT4gUKF7lRdX+uyd\/QMlPa9F0vQoxq1phYiRurYhhjb\/88RuE\/tVokOZViMbvnuBWfta0cjQ6fN228Hlt4VaNq1aqWdY2Jeod1Di\/TS3eDMnQ9LpONH735PvP\/9Vi\/Hzl\/IIw\/tn3n\/94qhnvrZzErJomvmXGWmX1fOWsNf7ujx8\/b\/FBXTmJxu8+\/f7LP75pGB\/X+LfEwr9\/\/BJ92Vi4cuUkGle1FDyllZrquMZVH8hWJ1u3KteLDonGwdPdfdpi\/Dw6JBrHJf\/Z0ng3OhSJHoBsdZUalkqdWm0\/fnf3pM04NTr8trH9+TfXaryw0DB+bXRIYhV+u4XOqC5RUX8jVYvNTKHXqhmOa7wQ0KjGW7HK3ZcN470dkESsJj62GleMj2gcz697Nd5qZZvx16M7oF\/aFt5b46pVcK1ut\/w9GtdcvlB65VKHNN5j\/IexWKXN+IDGtwZm3I\/9+zX+6AqN9xj\/bex3853XdMZv1HjlT9Sty9M1ToKGsgQwXqntMo0\/el+Nu9ifAOPmoMZfXaHx1p6zw\/j4Lv+nh9H47EKN14xrXcZ7Gv\/1Yo0\/u1LjHcYpGv\/hGo03sV3Xj38MjZNdPl8y7m4n92jcxCHaoB8fYvxc40+v0rh2nx\/HmazLNT7A+EfReL3L11J1MhKr1IyX6salr9H4aCZrROOEcQurW3WTwViFG2L8nkzW5bHKEOO3ahw2QBD1FYFIgcFMFu9u21HkYCarjA7vBjXe8SqD8Xi9YBsbXrUSlzRiLJNVMF4TMp7Jurs8Vul7ldrCrRoHtrduTeTwDgiGxt2mGtkpDezy7979o3jIwj\/uKvUMa\/xlWfL76pCeyVJ9IwkTsnjQdvmv6h1h+XgHQshYJuvu3TdF2T9IK0c1TqLDl390LLxHJss3Tb8+GM5kqRaUq7fbQ5msl5+WqPoyksmqSn5WHQ5kslRLc82a8LFM1pOiun8SxkczWcQ2aeVlmazPOhZuz2Th5FyTnRvJ1kKpwdxhEx3elSDzdcSPd0oOZbKK1jVmRzJZ3eroGqfbvjST1bXwPtnaNsaytW2MZGtboHiVdra2jcFsbQej2doOxjJZZ6285S8S76HxUcaH\/iIxvAPq9GU4k9UvSc9k9TG2y+9iPFvbtX1ZJquPGzNZ93VpaGSGd\/mdvoxksnqg7oDOMLbL7+KeXX6nlRdmsrq4epfPAyb1iy8Pef5M4+1yfHPQ1\/hjOmi7fDp6O6C2Lb45oGmcDnq2dqCV92Sy6LhS4yLGVKpeYn3Y\/76KAufh9EyZVeXwGz7oFvvqxZsXT4vXm7dvnzUH599X+RUKvH3bKl0ddL+vorQswatu6znjXz\/9+umLZ89wJV8XL1wnHNC+ryL0ypCDF6NPgDy\/4enbZ3DAnpHBwMDAwMAwgvNvmTJcA4eERsL9z7JUisfXetGHbM+NUP57nsRpkIckb4eemd7AL58hb3\/I9owi3Q1EonKgXVyJbN3+FPSbYAWdLcSOPNc9ie775r2gIUVSMOOiWjwXUFDU2YduvdN+S\/cD5uT15Yxb6L6nFBMiLps3AuVTB\/xJbNfXZ3yE9tUJzRcxF+\/xQ77xM5INpB\/ygWfbPwySaJ\/xnJLs9pkJc+y4jiLKc2WXnHMoGHec+sww5MmISgRjq0W7ENfDZ3v83HU\/XnJSnHKcSvWmS28fpUCaZljR3qNNQUVHuyzmZvZub6twHCXubodvKRifZvvddrA5GloqMhej7XK2y8APIVWW7ex6lU+yxTyExjn2KpwnQOg8d2m1LPN8629MbhVr\/gZpnGgvXG3VL6Wh9TrFXgU\/Uf6An7u9RYdgM\/jIX3kFtkRr69MiACFCtmbgp6NbKPYTMCohFdypLnEpopSXDpGZBkDGBulaerAp0wKEGWo+ZyamH+OHtGbI9rcoKRm3UOK7aDPEVOXHd\/BPuOA4FCqKsrrhSa9x6pv5HvqO9Ni0lvvIN3ELzqChVorCDbBXOReviIypGgE1ytyezeKTwqkoFdVskHEe8ZwaLGx9T6FHyE4gvEwXhAgvVzG4MagojQ4TIaI1McUPiDfRjAvxrHfX53+3gLE71WezBDMu467JwDiY8zjM65Bnaa2c7kLgUHBcHAN0Jrp7gevn4T4Z4ao2UBWwdJ7\/EeJ59YmPdH0BxsP9+bQ1dAe3TIN+w0XplHLJvmjrEOOTw4TzgG1HpvRTiDAFGhLEBQ4pzGAF\/ZV35k6TkXpe3CnkN11suU2u4NGnkWGdsOcV3Ejfn6D2CGYEN4OSwLiDvI2xiSmdL9FnfOvIgCv\/qxtA2cbRDhiRizVsnpmm6VIIEuzKc5ooNa1kgPEYd0CBlTM5AvUyiMbDDZwexhhPA5\/eSSGKC4PCrIh+\/DV2KRKSNNuiTWZwqvCvdEy5DZ5+yxHGk8A1rR00rRjTGXSdMG5sjCHGrUL9NeO5N1DuHsjZYjsxgy1XyEZY51kUZRklgDBKz+nEmHkXM66PMG50GJ+NMr700Nyjrfk140qOnau7mHIr5OryKvBs2lKTgHflVmvzXsaVOZ4zNmZcx7fA+BWMD6+aXFHMc62yi5hxHnnWxI2vfoC0j6f\/6qSVjHO7wYFboXQpS4qQIFlWEcJ3+kq\/30YuY4o0rEU8r2GCz2U8QGOMwzBu9wGF8ppxzlisnFke40FEISft8WpK64smK\/GJG2N8FqTKUtY9WXaRh\/24Ly9hpcCMwzowk2VJHfQTlg3LR4oH349xZOPpeRRevdsD3kCaiDCuFb5lQjNqonkGjlldB1EeA+PyDh3cXhkRJVNrh1fO3F6tvLUC0YXnu9E9jOPxpEwrYe8Vdh1MdIQKL5bgqmLk0yoTUrRbHOCSMYeiCn1RM9A6g27mezuHxXIf5dE8UPGyLHCygXbRYXG5Z5ZveUK6k50gzF4Qxp1kvYv0EzXIVHhz5uD0wmTpYF8nK9JZOStYzLdHIGWqLxY57vJKD2xtMbTPwbGKHZvaTqdFWUvcIwcT7UwL29ioU\/1DgwRtKwrh\/9Xe\/ztW1WG8ceRwdZivJUzYYttbkCdIljn98JvgbWo5lsQJZjlgqhtqQ2vHJajvXTYCMIOhqFU0RE6LsyxmGbkHQ6LxbnDPsi5\/5OTKXxvxbrcLrw9aGRgYGBgYGBgYGP5C+F8ovR7lndeaXgAAAABJRU5ErkJggg==)","a3e97b9d":"**Natural language processing** (NLP) is the ability of a computer program to understand human language as it is spoken. NLP is a component of artificial intelligence.\n                                 \n","ca7c3deb":"# ---About the dataset\n\n\nThe dataset contain columns like Reviews(positive and negative feedback) and like(Has a binary calssifications 0 or 1).","9aa7a577":"Above you can see that we have only main content because we removed all unnecessary data....","8b716311":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT6ucaYpLOj4hjRaXkSyG6IPzGwD9pNMAI6fiS4A_QCqrjnCk4l)"}}