{"cell_type":{"b1b612a7":"code","cce2b5ab":"code","63591d60":"code","3726b0c1":"code","89b2ecf2":"code","936b5bfe":"code","ddd92dd6":"code","a50677f0":"code","39cd0348":"code","6bcccd8d":"code","d9bf2996":"code","71b96c24":"code","94ecd1bc":"code","0b5e437d":"code","2f1f2c04":"code","892a19df":"code","45a6bcd6":"code","cdb3478f":"code","95c357d1":"code","14b35048":"code","3f5eba90":"code","e0d883ec":"code","9c96f298":"code","5f85ee89":"code","aca8c1bb":"code","ef27c7c4":"code","a0e7b654":"code","60bb8c49":"code","7d0d7f6d":"markdown","1d30d202":"markdown","8859fd7f":"markdown","8235a3be":"markdown","503e637d":"markdown","22816c7a":"markdown","8ec9769c":"markdown","ac12b998":"markdown","b8243f7b":"markdown","376eb406":"markdown","fc832301":"markdown","380f6ee2":"markdown","3145db4d":"markdown","ee4cdb3b":"markdown"},"source":{"b1b612a7":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools","cce2b5ab":"df =pd.read_csv('..\/input\/automobile-data-set-uci-mlr\/imports-85.data', header=None)\ndf.columns = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\ndf.head(5)","63591d60":"df.dtypes","3726b0c1":"df['normalized-losses'].replace('?',np.nan,inplace=True)\ndf['bore'].replace('?',np.nan,inplace=True)\ndf['stroke'].replace('?',np.nan,inplace=True)\ndf['horsepower'].replace('?',np.nan,inplace=True)\ndf['peak-rpm'].replace('?',np.nan,inplace=True)\ndf['price'].replace('?',np.nan,inplace=True)\n\ndf['normalized-losses'] = df['normalized-losses'].astype('float64')\ndf['bore'] = df['bore'].astype('float64')\ndf['stroke'] = df['stroke'].astype('float64')\ndf['horsepower'] = df['horsepower'].astype('float64')\ndf['peak-rpm'] = df['peak-rpm'].astype('float64')\ndf['price'] = df['price'].astype('float64')","89b2ecf2":"def spell_to_numerals(spell):\n    return {'zero':0,\n    'one':1,    'nine':9,\n    'two':2,    'ten':10,\n    'three':3,  'eleven':11,\n    'four':4,   'twelve':12,\n    'five':5,   'thirteen':13,\n    'six':6,    'fourteen':14,\n    'seven':7,  'forteen':14,\n    'eight':8,  'fifteen':15,\n    'sixteen':16}[spell.lower()] # We won't need numbers above this.\n\ndf['num-of-cylinders'] = df['num-of-cylinders'].apply(spell_to_numerals)\ndf['num-of-doors'] = df['num-of-doors'].replace('?','zero').apply(spell_to_numerals)\n\ndf['num-of-cylinders'] = df['num-of-cylinders'].astype('int')\ndf['num-of-doors'] = df['num-of-doors'].astype('int')","936b5bfe":"df[\"city-mpg\"]= 235\/df[\"city-mpg\"]\ndf.rename(columns = {\"city-mpg\":\"city-L\/100km\"},inplace=True)","ddd92dd6":"df[\"highway-mpg\"]= 235\/df[\"highway-mpg\"]\ndf.rename(columns = {\"highway-mpg\":\"highway-L\/100km\"},inplace=True)","a50677f0":"intervals = np.linspace(min(df['engine-size']), max(df['engine-size']),3)\ndf['block-size'] = pd.cut(df['engine-size'], intervals, labels =  ['small block', 'large block'], include_lowest = True)","39cd0348":"print(df.isnull().sum())","6bcccd8d":"df['normalized-losses'].fillna(df['normalized-losses'].mean(), inplace=True)\ndf.dropna(inplace=True)","d9bf2996":"df.to_csv(\"cleaned dataset\\\\automobile.csv\")","71b96c24":"df.describe(include='object')","94ecd1bc":"df.describe()","0b5e437d":"sns.distplot(df['price'])","2f1f2c04":"df[[\"normalized-losses\", \"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\", \"engine-size\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-L\/100km\",\"highway-L\/100km\",\"price\"]].hist(bins=15, color='teal', edgecolor='black', linewidth=1.0,\n           xlabelsize=8, ylabelsize=8, grid=False)\nplt.tight_layout(rect=(0, 0, 2, 2))","892a19df":"plt.figure(figsize=(9,7))\nsns.heatmap(df.corr(), cmap=\"YlGnBu\")","45a6bcd6":"sns.lmplot('horsepower', 'price', df, scatter_kws={'color': 'orange'})","cdb3478f":"plt.figure(figsize=(20,7))\nplt.\nsns.swarmplot(df['make'], df['price'], size=10)","95c357d1":"price_means = df[['body-style','drive-wheels','price']].groupby(['body-style', 'drive-wheels'], as_index=True).mean()\nbody_styles = list(df['body-style'].unique())\nxticks = np.arange(len(body_styles)) * 1.25\n\nfwd_means  = list(price_means.loc[(body_styles,['fwd']), 'price'])\nrwd_means  = list(price_means.loc[(body_styles,['rwd']), 'price'])\n_4wd_means = list(price_means.loc[(body_styles,['4wd']), 'price'])\n\ngroupedbar, axes1 = plt.subplots()\nrects1 = axes1.bar(xticks - 0.35, fwd_means, 0.35, label='FWD')\nrects2 = axes1.bar(xticks, rwd_means, 0.35, label='RWD')\nrects3 = axes1.bar(xticks[:3] + 0.35, _4wd_means, 0.35, label='4WD')\n\naxes1.set_ylabel('Mean Price')\naxes1.set_xlabel('Body Style')\naxes1.set_title('Mean Price by body style')\naxes1.set_xticks(xticks)\naxes1.set_xticklabels(body_styles)\ngroupedbar.set_figwidth(8)\ngroupedbar.set_figheight(5)\ngroupedbar.legend()","14b35048":"# import machine learning library\nfrom sklearn.model_selection import train_test_split\n# import stats library\nfrom scipy.stats import pearsonr","3f5eba90":"# Calculate a Pearson correlation coefficient and the p-value for testing non-correlation\npearsonr(df['horsepower'], df['price'])","e0d883ec":"# split dataset into training data and test data: 75% \/ 25%\ntrain, test = train_test_split(df, test_size=0.25)","9c96f298":"from sklearn import linear_model\nmodel = linear_model.LinearRegression()\n# reshape first array to 2D for .fit() method\ntraining_x = np.array(train['horsepower']).reshape(-1, 1)\ntraining_y = np.array(train['price'])\n\n# perform linear fit\/regression\nmodel.fit(training_x, training_y)\n# turn coefficient array which contains only one number into a number\nslope = np.asscalar(np.squeeze(model.coef_))\nintercept = model.intercept_\nprint('slope: ', slope, 'intercept: ', intercept)","5f85ee89":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n# define a function to generate a prediction and then compare the desired metrics\ndef predict_metrics(lr, x, y):\n    pred = lr.predict(x)\n    mae = mean_absolute_error(y, pred)\n    mse = mean_squared_error(y, pred)\n    r2 = r2_score(y, pred)\n    return mae, mse, r2\n\ntraining_mae, training_mse, training_r2 = predict_metrics(model, training_x, training_y)\n\n# calculate with test data for comparison\ntest_x = np.array(test['horsepower']).reshape(-1, 1)\ntest_y = np.array(test['price'])\ntest_mae, test_mse, test_r2 = predict_metrics(model, test_x, test_y)\n\nprint('training mean error: ', training_mae, 'training mse: ', training_mse, 'training r2: ', training_r2)\nprint('test mean error: ', test_mae, 'test mse: ', test_mse, 'test r2: ', test_r2)","aca8c1bb":"cols = ['horsepower', 'engine-size', 'peak-rpm', 'length', 'width', 'height']\nfor col in cols:\n    print(col, pearsonr(df[col], df['price']))","ef27c7c4":"# drop peak-rpm & height from further analysis as they are weakly correlated\n\n# split data into train & test set\nmodel_cols = ['horsepower', 'engine-size', 'length', 'width']\nmulti_x = np.column_stack(tuple(df[col] for col in model_cols))\nmulti_train_x, multi_test_x, multi_train_y, multi_test_y = train_test_split(multi_x, df['price'], test_size=0.25)","a0e7b654":"# fit the model\nmulti_model = linear_model.LinearRegression()\nmulti_model.fit(multi_train_x, multi_train_y)\nmulti_intercept = multi_model.intercept_\nmulti_coeffs = dict(zip(model_cols, multi_model.coef_))\nprint('intercept: ', multi_intercept)\nprint('coefficients: ', multi_coeffs)","60bb8c49":"multi_train_mae, multi_train_mse, multi_train_r2 = predict_metrics(multi_model, multi_train_x, multi_train_y)\nmulti_test_mae, multi_test_mse, multi_test_r2 = predict_metrics(multi_model, multi_test_x, multi_test_y)\n\nprint('training mean error: ', multi_train_mae, 'training mse: ', multi_train_mse, 'training r2: ', multi_train_r2)\nprint('test mean error: ', multi_test_mae, 'test mse: ', multi_test_mse, 'test r2: ', multi_test_r2)","7d0d7f6d":"Adding more features to model","1d30d202":"### Data Formatting","8859fd7f":"We'll also convert variables where numbers are spelled out to numeric format.","8235a3be":"Calculating error metrics.","503e637d":"##  Exploratory Data Analysis","22816c7a":"### Recognising and Analyzing Individual Feature Patterns using Visualization","8ec9769c":"## Pre-processing ","ac12b998":"* The correlation coefficient of 0.81 shows a strong positive correlation\n* The p-value (probabilty of our data being uncorrelated): 1.189e-47 shows a low probability","b8243f7b":"### Treating Missing Values","376eb406":"## Data Modelling","fc832301":"# Second-hand Automobile Price Prediction\n\nThis dataset consists of three types of entities:\n\n1. its assigned insurance risk rating (symboling),\n2. its normalized losses in use as compared to other cars and\n3. the specification of an auto in terms of various characteristics.\n\nA value in the symboling column of +3 indicates that the auto is\nrisky, -3 that it is probably pretty safe. The third factor is the relative average loss payment per insured\nvehicle year.\n\nOur objective is to provide potential second-hand car buyers with suitable resale values derived from various\ncharacteristics of the cars.\n","380f6ee2":"There are imperial units in this dataset. We'll do better with the metric system.","3145db4d":"### Summary and Description","ee4cdb3b":"The engine block size is normally categorised into classes with much variance."}}