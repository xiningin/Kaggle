{"cell_type":{"d46ba7ef":"code","017a1868":"code","1a2aea9b":"code","1b5c827c":"code","f0c4df3c":"code","a9274bd6":"code","a0bdf596":"code","575e3190":"code","910204fa":"code","61db0006":"code","a1afbc90":"code","a9df265b":"code","08c53d29":"code","0d66da4e":"code","5caf5bfa":"code","525ba549":"code","2ef7febb":"code","3fcad4cc":"code","4ebd596a":"code","31c8600b":"code","40888f7d":"code","57050717":"code","05481fca":"code","091182a4":"code","79e061b1":"code","31b736a2":"markdown","83938b51":"markdown","9476d4ad":"markdown","83a1bfc6":"markdown","897268a2":"markdown"},"source":{"d46ba7ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","017a1868":"\nimport pandas as pd\npd.set_option('display.max_columns', 20)","1a2aea9b":"movie = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')","1b5c827c":"rating = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')","f0c4df3c":"df = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","a9274bd6":"\n# toplam yorum say\u0131s\u0131: de\u011fi\u015fkenlere bak\u0131yoruz.\ndf.shape","a0bdf596":"#yorum yap\u0131lmm\u0131\u015f filmler\n# E\u015fsiz film say\u0131s\u0131\ndf[\"title\"].nunique()","575e3190":"# Hangi filme ka\u00e7 yorum yap\u0131lm\u0131\u015f:\n# herbir title ka\u00e7 defa ge\u00e7mi\u015f\ndf[\"title\"].value_counts().head()","910204fa":"df[\"title\"].value_counts().tail()","61db0006":"# 1000 \u00fczeri film yap\u0131lan filmlerin se\u00e7ilmesi:\nrating_counts = pd.DataFrame(df[\"title\"].value_counts())\n#indexleri se\u00e7 bunlar\u0131 \n# title binden az olanlar\u0131 nadir olarak ata\nrare_movies = rating_counts[rating_counts[\"title\"] <= 1000].index\n","a1afbc90":"# nadir olmayanlar\u0131n d\u0131\u015f\u0131ndakiler\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\n\n# Yorum say\u0131s\u0131:\ncommon_movies.shape","a9df265b":"# E\u015fsiz film say\u0131s\u0131\n# 27bin film var, \u015fimdi 3bine d\u00fc\u015ft\u00fc, yo\u011fun olana bakabiliriz.\ncommon_movies[\"title\"].nunique()","08c53d29":"# user movie df'inin olu\u015fturulmas\u0131.\nuser_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\nuser_movie_df.shape\n# 13bin kullan\u0131c\u0131 3bin filme puan vermi\u015f","0d66da4e":"user_movie_df.head(10)","5caf5bfa":"#film isimleri\nuser_movie_df.columns","525ba549":"# film adedi kadar\nlen(user_movie_df.columns)","2ef7febb":"# film adedi ve isimleri ayn\u0131 oldu\u011funu g\u00f6rm\u00fc\u015f oldum\ncommon_movies[\"title\"].nunique()","3fcad4cc":"movie_name = \"Matrix, The (1999)\"\nmovie_name = user_movie_df[movie_name]\n# filmle ilgili korelasyonlara getir.\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)\n","4ebd596a":"#kontente bakmadan, toplulu\u011fun \u00fczerinde fikir al\u0131\u015fveri\u015fi yaparak analiz edilmesi\nmovie_name = \"Ocean's Twelve (2004)\"\nmovie_name = user_movie_df[movie_name]\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)","31c8600b":"# rastgele film se\u00e7imi\nmovie_name = pd.Series(user_movie_df.columns).sample(1).values[0]\nmovie_name = user_movie_df[movie_name]\nuser_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)","40888f7d":"# Script yaz\u0131yoruz.veri okumalar\u0131n yer tutmas\u0131n\u0131 istemiyorum.\n# kullan at.\n\ndef create_user_movie_df():\n    import pandas as pd\n    movie = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')\n    rating = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df\n\nuser_movie_df = create_user_movie_df()\n\n#genel bir fonksiyon yaz\u0131yorsak","57050717":"# item_based_recommmender fonksiyonunu tan\u0131mlayala\u0131m:\n\ndef item_based_recommender(movie_name, user_movie_df):\n    movie_name = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)\n\n\nitem_based_recommender(\"Matrix, The (1999)\", user_movie_df)\n#kullan\u0131c\u0131 filmi nas\u0131l yaz\u0131lm\u0131\u015fa \u00f6yle tan\u0131mla","05481fca":"import pandas as pd\n# kullan\u0131c\u0131 gelip de ben \u015fu filmi izledim, bana \u015funu tavsiye et. \u0130smi de\u011fi\u015ftirebilirsiniz, id \u00f6nemli\nmovie_name = pd.Series(user_movie_df.columns).sample(1).values[0]\n\nitem_based_recommender(movie_name, user_movie_df)","091182a4":"# user_movie_df'in kaydedilmesi\nimport pickle\npickle.dump(user_movie_df, open(\"user_movie_df.pkl\", 'wb'))\n\n# user_movie_df'inin y\u00fcklenmesi\nuser_movie_df = pickle.load(open('user_movie_df.pkl', 'rb'))\n\n# # tahmin\n# movie_name = \"Ocean's Twelve (2004)\"\n# item_based_recommender(movie_name, user_movie_df)","79e061b1":"# user_movie_df'inin y\u00fcklenmesi\nuser_movie_df = pickle.load(open('user_movie_df.pkl', 'rb'))\n\n# tahmin\nmovie_name = \"Ocean's Twelve (2004)\"\nitem_based_recommender(movie_name, user_movie_df)","31b736a2":"######################################\n# 4. Ad\u0131m: \u0130\u015flemlerin Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n######################################\n\n* Not, iyi kurgulanmazsa yeni i\u00e7eriklerin geli\u015fmesi zor olur.","83938b51":"######################################\n## Ad\u0131m 3: Item-Based Film \u00d6nerilerinin Yap\u0131lmas\u0131\n######################################\n* iki de\u011fi\u015fken korelasyonuna bakar gibi, filmere yap\u0131lm\u0131\u015f yorumlara bak\u0131l\u0131p analiz edilebilir mi?","9476d4ad":"######################################\n# BONUS: USER-MOVIE DF'i Saklama ve \u00c7a\u011f\u0131rma\n######################################\n\n\n","83a1bfc6":"# Item-Based Collaborative Filtering (Item-Item Filtering)\n###########################################\n\n## Ad\u0131m 1: Veri Setinin Haz\u0131rlanmas\u0131\n## Ad\u0131m 2: User Movie Df'inin Olu\u015fturulmas\u0131\n## Ad\u0131m 3: Item-Based Film \u00d6nerilerinin Yap\u0131lmas\u0131\n## Ad\u0131m 4: \u0130\u015flemlerin Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n\n######################################\n## Ad\u0131m 1: Veri Setinin Haz\u0131rlanmas\u0131\n######################################\n\n* Puan verilme al\u0131\u015fkanl\u0131klar\u0131 birbirine benzer olan filmler \u00fczerinden tavsiye sistemi geli\u015ftirmek.\n","897268a2":"######################################\n## Ad\u0131m 2: User Movie Df'inin Olu\u015fturulmas\u0131\n######################################\n\n* Temel amac\u0131m\u0131z user_movie matrisini olu\u015fturmak.\n"}}