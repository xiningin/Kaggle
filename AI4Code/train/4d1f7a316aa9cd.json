{"cell_type":{"c546edb4":"code","7036ab3e":"code","06573036":"code","2d307658":"code","63103c2c":"code","c8a1c964":"code","99b3514f":"code","785d581b":"code","263a0918":"code","48ab3506":"code","618de728":"code","fc77d92e":"code","f0a6aa01":"code","fef73bfc":"code","6f097a67":"code","acb02cb8":"code","69a87111":"code","e7c78b99":"code","e80b785d":"code","d462d72d":"code","fb9d9e19":"code","eb04784b":"code","9c3fd3f6":"markdown","bc0aef67":"markdown"},"source":{"c546edb4":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np \nimport pandas as pd \nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\n\n#importing packages for the prediction of time-series data\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.metrics import mean_squared_error\n\n%matplotlib inline","7036ab3e":"import pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\n\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\n\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","06573036":"df = pd.read_csv('..\/input\/coco-cola-stock-data-19622021\/COCO COLA.csv', parse_dates=['Date'])\ndf.head(3)","2d307658":"print (df.describe())\nprint (\"=============================================================\")\nprint (df.dtypes)","63103c2c":"df1 = df[['Date','Close']]\ndf1.head(3)","c8a1c964":"# Setting the Date as Index\ndf_ts = df1.set_index('Date')\ndf_ts.sort_index(inplace=True)\nprint (type(df_ts))\nprint (df_ts.head(3))\nprint (\"========================\")\nprint (df_ts.tail(3))","99b3514f":"# Basic plot \ndf_ts.plot()","785d581b":"# Dickey Fuller Test Function\ndef test_stationarity(timeseries):\n    # Perform Dickey-Fuller test:\n    from statsmodels.tsa.stattools import adfuller\n    print('Results of Dickey-Fuller Test:')\n    print (\"==============================================\")\n    \n    dftest = adfuller(timeseries, autolag='AIC')\n    \n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#lags Used', 'Number of Observations Used'])\n    \n    for key, value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    \n    print(dfoutput)\n    ","263a0918":"# Stationarity Check - Lets do a quick check on Stationarity with Dickey Fuller Test \n# Convert the DF to series first\nts = df_ts['Close']","48ab3506":"# Let's plot the 12-Month Moving Rolling Mean & Variance and find Insights\n# Rolling Statistics\nrolmean = ts.rolling(window=12).mean()\nrolvar = ts.rolling(window=12).std()\n\nplt.plot(ts, label='Original')\nplt.plot(rolmean, label='Rolling Mean')\nplt.plot(rolvar, label='Rolling Standard Variance')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","618de728":"test_stationarity(ts)","fc77d92e":"# Lets Resample the data by Month and analyze again\ndf_ts_m = df_ts.resample('M').mean()\nprint (type(df_ts_m))\nprint (df_ts_m.head(3))","f0a6aa01":"tsm = df_ts_m['Close']\nprint (type(tsm))","fef73bfc":"# Stationarity Check\ntest_stationarity(tsm)","6f097a67":"# Lets do a quick vanila decomposition to see any trend seasonality etc in the ts\ndecomposition = sm.tsa.seasonal_decompose(tsm, model='multiplicative')\n\nfig = decomposition.plot()\nfig.set_figwidth(12)\nfig.set_figheight(8)\nfig.suptitle('Decomposition of multiplicative time series')\nplt.show()","acb02cb8":"# lets try to make the \"tsm\" Stationary\n\ntsmlog = np.log10(tsm)\ntsmlog.dropna(inplace=True)\n\ntsmlogdiff = tsmlog.diff(periods=1)\ntsmlogdiff.dropna(inplace=True)\n# Stationarity Check\ntest_stationarity(tsmlogdiff)","69a87111":"# Let's plot ACF & PACF graphs to visualize AR & MA components\n\nfig, axes = plt.subplots(1, 2)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(tsmlogdiff, lags=30, ax=axes[0], alpha=0.5)\nsmt.graphics.plot_pacf(tsmlogdiff, lags=30, ax=axes[1], alpha=0.5)\nplt.tight_layout()","e7c78b99":"y_2019 = df.loc[(df['Date'] >= '2019-01-01')\n                     & (df['Date'] < '2020-01-01')]\n\ny_2019.drop(y_2019[['Adj Close','Volume']],axis=1)","e80b785d":"monthvise= y_2019.groupby(y_2019['Date'].dt.strftime('%B'))[['Open','Close']].mean()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)\nmonthvise","d462d72d":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['Open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['Close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock open and close price')\nfig.show()","fb9d9e19":"y_2019.groupby(y_2019['Date'].dt.strftime('%B'))['Low'].min()\nmonthvise_high = y_2019.groupby(df['Date'].dt.strftime('%B'))['High'].max()\nmonthvise_high = monthvise_high.reindex(new_order, axis=0)\n\nmonthvise_low = y_2019.groupby(y_2019['Date'].dt.strftime('%B'))['Low'].min()\nmonthvise_low = monthvise_low.reindex(new_order, axis=0)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","eb04784b":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(y_2019, x=y_2019.Date, y=[y_2019['Open'], y_2019['Close'], \n                                          y_2019['High'], y_2019['Low']],\n             labels={'Date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","9c3fd3f6":"year 2019","bc0aef67":"# EDA"}}