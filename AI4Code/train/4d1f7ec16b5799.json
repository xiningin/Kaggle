{"cell_type":{"017b1f3a":"code","a3a96b47":"code","348f1fa5":"code","4ec0700c":"code","3ce0c679":"code","0dd7d27c":"code","1245796f":"code","dba3e410":"code","3dcb78b7":"code","c240ae5a":"code","68c4c924":"code","537b5487":"code","364ac8f9":"code","123ea073":"code","c57c973a":"code","12da74df":"code","829db5b0":"code","00e9ddca":"code","1f2ef8a3":"code","05cda7a6":"code","e063b9d2":"code","fc85cf4e":"code","b7ab674e":"code","6ababa12":"code","b6337961":"code","427fbe20":"code","4a05a9bb":"code","848065f3":"code","3228fcb2":"code","d1fb7ff7":"markdown","3c9063a8":"markdown","c593d443":"markdown","5fc78fb7":"markdown","c809f627":"markdown","70d9afe5":"markdown","139e7f4c":"markdown","abf34bbe":"markdown","39e8e7e0":"markdown","0ad12de1":"markdown","99ca9b22":"markdown","200741f4":"markdown","0f4ac2c9":"markdown","755c3fe8":"markdown","ac2ac8fe":"markdown","3f89ab92":"markdown","4fcaa596":"markdown","7935818d":"markdown","718809e9":"markdown","bdee69df":"markdown","ad8bb47d":"markdown","18fe4b8e":"markdown","267fc0f5":"markdown","1c33923d":"markdown","072a28d0":"markdown","36ad819a":"markdown","90daf0b9":"markdown","32cb91c3":"markdown","b5eeac7a":"markdown","d082c5e6":"markdown","c7186481":"markdown","998fca67":"markdown","3db44198":"markdown"},"source":{"017b1f3a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","a3a96b47":"# read in and combine data\nmarvel = pd.read_csv('..\/input\/marvel-wikia-data.csv')\ndc = pd.read_csv('..\/input\/dc-wikia-data.csv')","348f1fa5":"print(marvel.info())","4ec0700c":"dc.info()","3ce0c679":"marvel.columns = ['page_id', 'name', 'urlslug', 'ID', 'ALIGN', 'EYE', 'HAIR', 'SEX',\n                  'GSM', 'ALIVE', 'APPEARANCES', 'FIRST APPEARANCE', 'YEAR']","0dd7d27c":"marvel.head()","1245796f":"#clean string columns\nstring_cols = ['ID','ALIGN','EYE','HAIR','SEX','GSM','ALIVE']\nfor col in marvel[string_cols]:\n    marvel[string_cols]=marvel[string_cols].fillna(value='Information Unavalible')\n    \n# clean numerical columns\nmarvel['APPEARANCES']=marvel['APPEARANCES'].fillna(value=0)\nmarvel.info()","dba3e410":"# align         \nalignment=pd.DataFrame(marvel.groupby('YEAR')['ALIGN'].value_counts())\nalignment.columns = ['count']\nalignment=alignment.reset_index()\nalignment['YEAR'] = alignment['YEAR'].astype('int64')\nalignment['YEAR'] = pd.to_datetime(alignment[\"YEAR\"],format='%Y')\nalignment.head()","3dcb78b7":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different countries\ngood = alignment.loc[alignment['ALIGN']=='Good Characters']\nneutral = alignment.loc[alignment['ALIGN']=='Bad Characters']\nbad = alignment.loc[alignment['ALIGN']=='Neutral Characters']\n\n# select data\ncount_good = good['count']\nyear_good = good['YEAR']\n\ncount_neutral = neutral['count']\nyear_neutral = neutral['YEAR']\n\ncount_bad = bad['count']\nyear_bad = bad['YEAR']\n\n# create traces\ntrace_good = go.Scatter(\n    x=year_good,\n    y=count_good,\n    name = \"Heros\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_neutral = go.Scatter(\n    x=year_neutral,\n    y=count_neutral,\n    name = \"Neutral Characters\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_bad = go.Scatter(\n    x=year_bad,\n    y=count_bad,\n    name = \"Villians\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ndata = [trace_good,trace_neutral,trace_bad]\n\nlayout = dict(\n    title='Heros, Villians, and Neutral Characters: Marvel',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","c240ae5a":"# gender        \ngender=pd.DataFrame(marvel.groupby('YEAR')['SEX'].value_counts())\ngender.columns = ['count']\ngender=gender.reset_index()\ngender['YEAR'] = gender['YEAR'].astype('int64')\ngender['YEAR'] = pd.to_datetime(gender[\"YEAR\"],format='%Y')\n\n#set seaborn background\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different countries\nmale = gender.loc[gender['SEX']=='Male Characters']\nfemale = gender.loc[gender['SEX']=='Female Characters']\ngender_fluid = gender.loc[gender['SEX']=='Genderfluid Characters']\nagender = gender.loc[gender['SEX']=='Agender Characters']\nunknown =gender.loc[gender['SEX']=='Information Unavalible']\n\n# select data\ncount_male = male['count']\nyear_male = male['YEAR']\n\ncount_female = female['count']\nyear_female = female['YEAR']\n\ncount_gender_fluid = gender_fluid['count']\nyear_gender_fluid = gender_fluid['YEAR']\n\ncount_agender = agender['count']\nyear_agender = agender['YEAR']\n\ncount_unknown = unknown['count']\nyear_unknown = unknown['YEAR']\n\n# create traces\ntrace_male = go.Scatter(\n    x=year_male,\n    y=count_male,\n    name = \"male\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_female = go.Scatter(\n    x=year_female,\n    y=count_female,\n    name = \"female\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_gender_fluid = go.Scatter(\n    x=year_gender_fluid,\n    y=count_gender_fluid,\n    name = \"fluid\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ntrace_agender = go.Scatter(\n    x=year_agender,\n    y=count_agender,\n    name = \"agender\",\n    line = dict(color = 'rgb(244,110,66)'),\n    opacity = 0.8)\n\ntrace_unknown = go.Scatter(\n    x=year_unknown,\n    y=count_unknown,\n    name = \"unknown\",\n    line = dict(color = 'rgb(244,66,210)'),\n    opacity = 0.8)\n\ndata = [trace_male,\ntrace_female,\ntrace_gender_fluid,\ntrace_agender,\ntrace_unknown\n]\n\nlayout = dict(\n    title='Marvel Superhero Genders Over the Years',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","68c4c924":"import seaborn as sns\nlabels = ['Brown Hair', 'White Hair', 'Black Hair', 'Blond Hair', 'No Hair',\n       'Blue Hair', 'Red Hair', 'Bald', 'Auburn Hair', 'Grey Hair',\n       'Silver Hair', 'Purple Hair', 'Strawberry Blond Hair',\n       'Green Hair', 'Reddish Blond Hair', 'Gold Hair',\n       'Information Unavalible', 'Orange Hair', 'Pink Hair',\n       'Variable Hair', 'Yellow Hair', 'Light Brown Hair', 'Magenta Hair',\n       'Bronze Hair', 'Dyed Hair', 'Orange-brown Hair']\nsns.set(rc={'figure.figsize':(20,10)})\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"HAIR\", hue=\"ALIGN\", data=marvel, palette=\"husl\")\nax.set_title('Hair Color of Heros and Villians in the Marvel Comic Book Universe')\nax.set_xticklabels(rotation=90,labels=labels)","537b5487":"trimmed = marvel.loc[marvel[\"APPEARANCES\"] > 800]\nprint('There are',len(trimmed),'DC characters with more than 800 apperances.')\ntrimmed['APPEARANCES'].plot(kind='hist',edgecolor='black',color='red')","364ac8f9":"sns.set(rc={'figure.figsize':(20,10)})\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"HAIR\", hue=\"SEX\", data=trimmed, palette=\"husl\")\nax.set_xticklabels(rotation=90,labels=labels)","123ea073":"dc.head()","c57c973a":"#clean string columns\nstring_cols = ['ID','ALIGN','EYE','HAIR','SEX','GSM','ALIVE']\nfor col in dc[string_cols]:\n    dc[string_cols]=dc[string_cols].fillna(value='Information Unavalible')\n    \n# clean numerical columns\ndc['APPEARANCES']=dc['APPEARANCES'].fillna(value=0)","12da74df":"# align         \nalignment=pd.DataFrame(dc.groupby('YEAR')['ALIGN'].value_counts())\nalignment.columns = ['count']\nalignment=alignment.reset_index()\nalignment['YEAR'] = alignment['YEAR'].astype('int64')\nalignment['YEAR'] = pd.to_datetime(alignment[\"YEAR\"],format='%Y')\n\n# plot\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different alignments\ngood = alignment.loc[alignment['ALIGN']=='Good Characters']\nneutral = alignment.loc[alignment['ALIGN']=='Bad Characters']\nbad = alignment.loc[alignment['ALIGN']=='Neutral Characters']\n\n# select data\ncount_good = good['count']\nyear_good = good['YEAR']\n\ncount_neutral = neutral['count']\nyear_neutral = neutral['YEAR']\n\ncount_bad = bad['count']\nyear_bad = bad['YEAR']\n\n# create traces\ntrace_good = go.Scatter(\n    x=year_good,\n    y=count_good,\n    name = \"Heros\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_neutral = go.Scatter(\n    x=year_neutral,\n    y=count_neutral,\n    name = \"Neutral Characters\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_bad = go.Scatter(\n    x=year_bad,\n    y=count_bad,\n    name = \"Villians\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ndata = [trace_good,trace_neutral,trace_bad]\n\nlayout = dict(\n    title='Heros, Villians, and Neutral Characters: DC',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","829db5b0":"# gender        \ngender=pd.DataFrame(dc.groupby('YEAR')['SEX'].value_counts())\ngender.columns = ['count']\ngender=gender.reset_index()\ngender['YEAR'] = gender['YEAR'].astype('int64')\ngender['YEAR'] = pd.to_datetime(gender[\"YEAR\"],format='%Y')\n\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different genders\nmale = gender.loc[gender['SEX']=='Male Characters']\nfemale = gender.loc[gender['SEX']=='Female Characters']\ngender_fluid = gender.loc[gender['SEX']=='Genderless Characters']\nagender = gender.loc[gender['SEX']=='Transgender Characters']\nunknown =gender.loc[gender['SEX']=='Information Unavalible']\n\n# select data\ncount_male = male['count']\nyear_male = male['YEAR']\n\ncount_female = female['count']\nyear_female = female['YEAR']\n\ncount_gender_fluid = gender_fluid['count']\nyear_gender_fluid = gender_fluid['YEAR']\n\ncount_agender = agender['count']\nyear_agender = agender['YEAR']\n\ncount_unknown = unknown['count']\nyear_unknown = unknown['YEAR']\n\n# create traces\ntrace_male = go.Scatter(\n    x=year_male,\n    y=count_male,\n    name = \"male\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_female = go.Scatter(\n    x=year_female,\n    y=count_female,\n    name = \"female\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_gender_fluid = go.Scatter(\n    x=year_gender_fluid,\n    y=count_gender_fluid,\n    name = \"genderless\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ntrace_agender = go.Scatter(\n    x=year_agender,\n    y=count_agender,\n    name = \"transgender\",\n    line = dict(color = 'rgb(244,110,66)'),\n    opacity = 0.8)\n\ntrace_unknown = go.Scatter(\n    x=year_unknown,\n    y=count_unknown,\n    name = \"unknown\",\n    line = dict(color = 'rgb(244,66,210)'),\n    opacity = 0.8)\n\ndata = [trace_male,\ntrace_female,\ntrace_gender_fluid,\ntrace_agender,\ntrace_unknown\n]\n\nlayout = dict(\n    title='DC Superhero Genders Over the Years',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","00e9ddca":"import seaborn as sns\nlabels=['Black Hair', 'Brown Hair', 'White Hair', 'Blond Hair', 'Red Hair',\n       'Information Unavalible', 'Green Hair', 'Strawberry Blond Hair',\n       'Grey Hair', 'Silver Hair', 'Orange Hair', 'Purple Hair',\n       'Gold Hair', 'Blue Hair', 'Reddish Brown Hair', 'Pink Hair',\n       'Violet Hair', 'Platinum Blond Hair']\nsns.set(rc={'figure.figsize':(20,10)})\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"HAIR\", hue=\"ALIGN\", data=dc, palette=\"husl\")\nax.set_xticklabels(rotation=90,labels=labels)","1f2ef8a3":"trimmed = dc.loc[dc[\"APPEARANCES\"] > 800]\nprint('There are',len(trimmed),'DC characters with more than 800 apperances.')\ntrimmed['APPEARANCES'].plot(kind='hist',edgecolor='black')","05cda7a6":"sns.set(rc={'figure.figsize':(20,10)})\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"HAIR\", hue=\"SEX\", data=trimmed, palette=\"husl\")","e063b9d2":"trimmed.loc[trimmed['HAIR']=='Red Hair']","fc85cf4e":"df = pd.concat([marvel,dc],sort=False)\ndf.head()","b7ab674e":"# align         \nalignment=pd.DataFrame(df.groupby('YEAR')['ALIGN'].value_counts())\nalignment.columns = ['count']\nalignment=alignment.reset_index()\nalignment['YEAR'] = alignment['YEAR'].astype('int64')\nalignment['YEAR'] = pd.to_datetime(alignment[\"YEAR\"],format='%Y')\n\n#plot\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different alogns\ngood = alignment.loc[alignment['ALIGN']=='Good Characters']\nneutral = alignment.loc[alignment['ALIGN']=='Bad Characters']\nbad = alignment.loc[alignment['ALIGN']=='Neutral Characters']\n\n# select data\ncount_good = good['count']\nyear_good = good['YEAR']\n\ncount_neutral = neutral['count']\nyear_neutral = neutral['YEAR']\n\ncount_bad = bad['count']\nyear_bad = bad['YEAR']\n\n# create traces\ntrace_good = go.Scatter(\n    x=year_good,\n    y=count_good,\n    name = \"Heros\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_neutral = go.Scatter(\n    x=year_neutral,\n    y=count_neutral,\n    name = \"Neutral Characters\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_bad = go.Scatter(\n    x=year_bad,\n    y=count_bad,\n    name = \"Villians\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ndata = [trace_good,trace_neutral,trace_bad]\n\nlayout = dict(\n    title='Heros, Villians, and Neutral Characters: Marvel and DC',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","6ababa12":"# gender        \ngender=pd.DataFrame(df.groupby('YEAR')['SEX'].value_counts())\ngender.columns = ['count']\ngender=gender.reset_index()\ngender['YEAR'] = gender['YEAR'].astype('int64')\ngender['YEAR'] = pd.to_datetime(gender[\"YEAR\"],format='%Y')\n\n#plot\nsns.set()\ninit_notebook_mode(connected=True)\n\n# set up different gender\nmale = gender.loc[gender['SEX']=='Male Characters']\nfemale = gender.loc[gender['SEX']=='Female Characters']\ngenderless = gender.loc[gender['SEX']=='Genderless Characters']\ntrans = gender.loc[gender['SEX']=='Transgender Characters']\nunknown =gender.loc[gender['SEX']=='Information Unavalible']\ngender_fluid = gender.loc[gender['SEX']=='Genderfluid Characters']\nagender = gender.loc[gender['SEX']=='Agender Characters']\n\n# select data\ncount_male = male['count']\nyear_male = male['YEAR']\n\ncount_female = female['count']\nyear_female = female['YEAR']\n\ncount_genderless = genderless['count']\nyear_genderless = genderless['YEAR']\n\ncount_trans = trans['count']\nyear_trans = trans['YEAR']\n\ncount_gender_fluid = gender_fluid['count']\nyear_gender_fluid = gender_fluid['YEAR']\n\ncount_agender = agender['count']\nyear_agender = agender['YEAR']\n\ncount_unknown = unknown['count']\nyear_unknown = unknown['YEAR']\n\n# create traces\ntrace_male = go.Scatter(\n    x=year_male,\n    y=count_male,\n    name = \"male\",\n    line = dict(color = 'rgb(89,244,66)'),\n    opacity = 0.8)\n\ntrace_female = go.Scatter(\n    x=year_female,\n    y=count_female,\n    name = \"female\",\n    line = dict(color = 'rgb(244,232,66)'),\n    opacity = 0.8)\n    \ntrace_genderless = go.Scatter(\n    x=year_genderless,\n    y=count_genderless,\n    name = \"genderless\",\n    line = dict(color = 'rgb(244,66,66)'),\n    opacity = 0.8)\n\ntrace_trans = go.Scatter(\n    x=year_trans,\n    y=count_trans,\n    name = \"transgender\",\n    line = dict(color = 'rgb(244,110,66)'),\n    opacity = 0.8)\n\ntrace_gender_fluid = go.Scatter(\n    x=year_gender_fluid,\n    y=count_gender_fluid,\n    name = \"fluid\",\n    line = dict(color = 'rgb(10,10,200)'),\n    opacity = 0.8)\n\ntrace_agender = go.Scatter(\n    x=year_agender,\n    y=count_agender,\n    name = \"agender\",\n    line = dict(color = 'rgb(100,0,66)'),\n    opacity = 0.8)\n\ntrace_unknown = go.Scatter(\n    x=year_unknown,\n    y=count_unknown,\n    name = \"unknown\",\n    line = dict(color = 'rgb(244,66,210)'),\n    opacity = 0.8)\n\ndata = [trace_male,\ntrace_female,\ntrace_genderless,\ntrace_gender_fluid,\ntrace_agender,\ntrace_trans,\ntrace_unknown\n]\n\nlayout = dict(\n    title='DC & Marvel Superhero Genders Over the Years',\n    xaxis=dict(title='Year',rangeslider=dict(visible = True),type='date'),\n    yaxis=dict(title='Count of Characters'))\nfig = dict(data=data, layout=layout)\niplot(fig)","b6337961":"trimmed = df.loc[marvel[\"APPEARANCES\"] >= 800]\nprint('Combined, there are',len(trimmed),' Marvel and DC characters with more than 800 apperances.')\ntrimmed['APPEARANCES'].plot(kind='hist',edgecolor='black')","427fbe20":"trimmed.sort_values('APPEARANCES',ascending=False).head(10)","4a05a9bb":"sns.set(rc={'figure.figsize':(20,10)})\nlabels = ['Brown Hair', 'White Hair', 'Black Hair', 'Blond Hair', 'No Hair',\n       'Blue Hair', 'Red Hair', 'Bald', 'Auburn Hair', 'Grey Hair',\n       'Information Unavalible', 'Green Hair']\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"HAIR\", hue=\"SEX\", data=trimmed, palette=\"husl\")\nax.set_title('Hair Color of Different Gender Characters')\nax.set_xticklabels(rotation=90,labels=labels)","848065f3":"ids = pd.DataFrame(df.groupby('ID')['ALIGN'].value_counts())\nids.columns = ['count']\nids","3228fcb2":"sns.set(rc={'figure.figsize':(20,10)})\nsns.set_style(\"whitegrid\")\nax = sns.countplot(x=\"ID\", hue=\"ALIGN\", data=df, palette=\"husl\")\nax.set_title('Identites of Heros and Villians in the Comic Book Universe')\ntotal=4490+2465+957+770+1\nprint(round(4490\/total,2), 'percent of bad guys have a secret identity.')\ntotal=2930+2172+965+926\nprint(round(2930\/total,2), 'percent of good guys have a public identity.')","d1fb7ff7":"Now we can simply use our code above to conduct the same analysis except on both comic book universes.","3c9063a8":"Marvel has DC beat with 39 to 17 'High Apperance Characters\".","c593d443":"As we can see, the comic book universe could a little more diversity. Let's trim again to 800 apperances to conduct the same analysis as above.","5fc78fb7":"Seems the readers demand more neutral characters as of late, with an upward trend in villains as well.","c809f627":"Interesting to see female characters with red hair. Can you guess who it is?","70d9afe5":"![alt text](https:\/\/theimpactnews.com\/wp-content\/uploads\/2015\/04\/lifeinfourcolors3x26_clip_image003.jpg)","139e7f4c":"We have some missing values in both dataframes that can be easily filled to ensure higher quality later on in our analysis.\nAlso, to have our concat go smoothly later on, we need to modify the last column title in marvel to match dc. This is done easily through passing a list of col names in to the .columns class of the marvel df.","abf34bbe":"DC, compared to Marvel, has seen a massive uptick in character creation in the last decade. This interesting as the Marvel Universe unquestionably has had the upper hand in the movie market.","39e8e7e0":"Let's look at alignment and gender over the years for the DC Universe.","0ad12de1":"No hair on bad guys? No wonder they always lose.","99ca9b22":"We can finalize our analysis by taking a look at the indentities of our heros and villians seeing how they differ.","200741f4":"None other than Barba Gordon, aka, Batgirl.\n![alt text](https:\/\/vignette.wikia.nocookie.net\/batman\/images\/b\/b1\/2062307-batgirl2011_large.jpg\/revision\/latest?cb=20111103195225)","0f4ac2c9":"## Comic Book Hero Analysis","755c3fe8":"We can quickly replicate the cleaning process from above to ensure data quality.","ac2ac8fe":"By taking a quick peak at the head of our dataframe, we can get a quick snapshot of some of the field we can use to visualize.","3f89ab92":"Black Hair seems to the color of choice of characters with high apperances in the Marvel Universe. We can now move on to DC.","4fcaa596":"We can use Pandas to concat our dfs into one big dataframe.","7935818d":"Let's look at the top ten heros and villians with the most apperances.","718809e9":"Let's begin our Marvel character analysis and cleaning.","bdee69df":"We can narrow this down to the heros with the most apperances, cutting out any hero wth less than 800 apperances.","ad8bb47d":"Good guys are okay with public knowing who they whereas bad guys ..... *not so much*. Thank you tuning into this kernal and I hope to continue this analysis. Happy Kaggling.\n\nCheers!","18fe4b8e":"Let's get an inside look at our data.","267fc0f5":"In today's kernal, I am interested to see what features of super heros have evolved over time. I will do a joint analysis of both DC and Marvel along with a compartitive analysis between both Marvel and DC. Let's first begin by setting up the workspace properly.","1c33923d":"![alt text](https:\/\/static2.cbrimages.com\/wordpress\/wp-content\/uploads\/2017\/11\/marvel-logo-header.jpg?q=50&fit=crop&w=798&h=407)","072a28d0":"We can now do the same to see the evolution and incorporation of all different genders through out the years in the Marvel Universe.","36ad819a":"This looks much better. Next, we need to conduct some pandas magic to get our heros alignment grouped by year to see how character creation has changed from year to year.","90daf0b9":"Looks like there has been a recent slowdown of character creation of late. Now we can visualize individual traits of heros using an assortment of count plots.","32cb91c3":"Let's trim the data like we did above again to see which comic line has more high apperance characters.","b5eeac7a":"Let's move onto our joint analysis of DC and Marvel.","d082c5e6":"Looks great. We can now use plotly to get a nice interactive graph to display our new dataframe.","c7186481":"![alt_text](https:\/\/i0.wp.com\/www.shuspectrum.com\/wp-content\/uploads\/2018\/10\/marvel-vs-dc-twitter-trending-topic-2018-1079944.jpg?resize=702%2C336)","998fca67":"![alt text](http:\/\/pluspng.com\/img-png\/logo-dc-comics-png-pin-logo-clipart-dc-comic-2-600.png)","3db44198":"As stated above, we can quickly fill all the string columns with missing values as \"Information Unavalible\"."}}