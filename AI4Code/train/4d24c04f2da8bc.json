{"cell_type":{"f1fb586e":"code","78a193cc":"code","8432acc2":"code","68f8ec8b":"code","4cff366b":"markdown","c568110f":"markdown","2031fcd9":"markdown","25881467":"markdown","f51470f5":"markdown","efbd4458":"markdown","2a53161e":"markdown","80d97176":"markdown","9ec309e6":"markdown","55853176":"markdown","3243a49e":"markdown","dfe9ec27":"markdown","ff3326fd":"markdown"},"source":{"f1fb586e":"import pandas as pd\nclimate_change = pd.read_csv('..\/input\/climate-change-dataset-datacamp\/climate_change.csv')\nclimate_change.describe\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.plot(climate_change.index, climate_change['co2'])\nax.set_xlabel('Time')\nax.set_ylabel('CO2 (ppm)')\nplt.show()\n# Let's observe the graph. Does it make sense?","78a193cc":"# Explore a decade\nimport matplotlib.pyplot as plt\n\n# Use plt.subplots to create fig and ax\nfig, ax = plt.subplots()\n\n# Create variable seventies with data from \"1970-01-01\" to \"1979-12-31\"\nseventies = climate_change[\"1970-01-01\" :\"1979-12-31\"]\n\n# Add the time-series for \"co2\" data from seventies to the plot\nax.plot(seventies.index, seventies[\"co2\"])\n\n# Show the figure\nplt.show()\n","8432acc2":"climate_change = pd.read_csv('..\/input\/climate-change-dataset-datacamp\/climate_change.csv', parse_dates = ['date'], index_col = 'date')\n# Note the parameters 'parse_dates' & 'index_col'\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.plot(climate_change.index, climate_change['co2'], color = 'red')\nax.set_xlabel('Time')\nax.set_ylabel('Carbon di oxide')\nplt.show()","68f8ec8b":"import matplotlib.pyplot as plt\n\n# Use plt.subplots to create fig and ax\nfig, ax = plt.subplots()\n\n# Create variable seventies with data from \"1970-01-01\" to \"1979-12-31\"\nseventies = climate_change[\"1980-01-01\" :\"1989-12-31\"]\n\n# Add the time-series for \"co2\" data from seventies to the plot\nax.plot(seventies.index, seventies[\"co2\"])\n\n# Show the figure\nplt.show()","4cff366b":"parse_dates = ['date'], index_col = 'date' are the key here","c568110f":"### Using twin axis\nLets say we are drawing two different time series in the same plot as below (left one), which is of course not visually pleasant. We can leverage twin axis feature of Matplotlib to improve the visualization. \n(Plot two figure side by side)","2031fcd9":"# Section 2: Statistical Visualization","25881467":"# Data Visualization with Matplotlib","f51470f5":"## **Summary:**\nRegarding the datasets used in this Notebook, I am privately accessing the data from datacamp. If you want to play around these datasets, please follow their course: Data Visualization with Python (link below).\n\n**Problem 1:**\n(I will hide all the Python code later on)\n\n\n**Problem 2:**\n\n\n**Problem 3:**\n\n\nLearning source: https:\/\/www.datacamp.com\/courses\/introduction-to-data-visualization-with-python","efbd4458":"#### Opss, we got errors","2a53161e":"### Lets start with wrong approach","80d97176":"Observation: As you can see, Year is printing on xlabel properly.","9ec309e6":"# Section 3: Sharing Visualization","55853176":"### Lets explore the right approach","3243a49e":"# Section 1: Plotting Time Series","dfe9ec27":"Please note that this Notebook is INCOMPLETE. \n\n### Learning outcomes:\n1. Parsing the date\n2. Assigning ***date*** column as Index\n\nWe need to parse date column as a date so that Pandas can recognize our data as Time Series. We can even designate '**date**' column as index. Note: Pandas DataFrame objects can have an index that denotes time. This is useful because Matplotlib recognizes that these measurements represent time and labels the values on the axis accordingly.","ff3326fd":"![image.png](attachment:image.png)"}}