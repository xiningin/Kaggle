{"cell_type":{"80794a68":"code","e9274f5d":"code","051841c6":"code","9e28f407":"code","e5c0502b":"code","3616e732":"code","65d2b50a":"code","a81bf59b":"code","076cb00c":"code","3c69987a":"code","5dfd34e6":"code","373f3c7c":"code","dbb5de61":"code","421a8fcc":"code","78722376":"code","2727f1a3":"code","d2d7ecd1":"code","11d4b7df":"code","6e526a49":"code","f6125b9d":"code","76a9f511":"code","5575cf0b":"code","a1eca207":"code","5106e6ac":"code","4a0b39e2":"code","a5f9103a":"code","8475b86b":"code","54b15fc3":"code","5a51df50":"markdown","a00b5029":"markdown","4bdf7a10":"markdown","7d637106":"markdown","9825bc7f":"markdown","1278752b":"markdown","3f8263bd":"markdown","2a66c7a4":"markdown","3b108ed3":"markdown","8e5a9f2e":"markdown"},"source":{"80794a68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9274f5d":"import pandas as pd\nimport numpy as np\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pandas import plotting\n\n#plotly \nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n# style Notebook\nplt.style.use('fivethirtyeight')\n","051841c6":"df=pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\n","9e28f407":"df.head()","e5c0502b":"df.shape","3616e732":"df.dtypes","65d2b50a":"df.isnull().sum()","a81bf59b":"m=pd.DataFrame()\nm['Missing']=df.isnull().sum()\nm.T","076cb00c":"df.columns.values","3c69987a":"plt.figure(figsize=(10,5))\nsns.kdeplot(df['math score'], fill=True)\nplt.show()","5dfd34e6":"plt.figure(figsize=(5,15))\n\n\nplt.subplot(3,1,1)\nsns.kdeplot(df['math score'], fill=True)\nplt.show()\n\nplt.figure(figsize=(5,15))\n\nplt.subplot(3,1,2)\nsns.kdeplot(df['reading score'], fill=True)\nplt.show()\n\nplt.figure(figsize=(5,15))\n\nplt.subplot(3,1,3)\nsns.kdeplot(df['writing score'], fill=True)\nplt.show()\n","373f3c7c":"col = \"gender\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"pink\", \"black\"]))\nlayout = go.Layout(title=\" Gender\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","dbb5de61":"col = \"race\/ethnicity\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"pink\", \"black\"]))\nlayout = go.Layout(title=\" Race\/Ethnicity\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","421a8fcc":"col = \"parental level of education\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\" parental level of education\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","78722376":"col = \"lunch\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"blue\", \"#a678de\"]))\nlayout = go.Layout(title=\" lunch\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","2727f1a3":"col = \"test preparation course\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"pink\", \"#a678de\"]))\nlayout = go.Layout(title=\" test preparation course\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","d2d7ecd1":"corr=df.corr()\nplt.figure(figsize=(10, 10))\nsns.heatmap(corr, annot=True)\nplt.show()","11d4b7df":"sns.set()\nsns.pairplot(df, height = 2.5)\nplt.show();","6e526a49":"import seaborn as sns\nsns.set()\nsns.pairplot(df,height = 2.5, kind = \"reg\",corner=True)","f6125b9d":"df.columns.values","76a9f511":"col=[ 'math score', 'reading score',\n       'writing score' ]","5575cf0b":"fig = ff.create_annotated_heatmap(df[col].corr().values.tolist(),\n                                   \n                                  y=df[col].columns.tolist(),\n                                  x=df[col].columns.tolist(), \n                                  colorscale='Inferno',\n                                  showscale=True\n                                 )\nfig.show()","a1eca207":"corrmat = df.corr(method='spearman')\nf, ax = plt.subplots(figsize=(12, 10))\nsns.heatmap(corrmat, ax=ax, cmap=\"YlGnBu\", linewidths=0.1)","5106e6ac":"#correlation matrix\ncorrmat = df.corr(method='spearman')\ncg = sns.clustermap(corrmat, cmap=\"YlGnBu\", linewidths=0.1);\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)\ncg","4a0b39e2":"from scipy.stats import shapiro\n","a5f9103a":"stat, p = shapiro(df['math score'])\nprint('stat=%.3f, p=%.3f' % (stat, p))\nif p > 0.05:\n    print('Probably Gaussian')\nelse:\n    print('Probably not Gaussian')","8475b86b":"stat, p = shapiro(df['reading score'])\nprint('stat=%.3f, p=%.3f' % (stat, p))\nif p > 0.05:\n    print('Probably Gaussian')\nelse:\n    print('Probably not Gaussian')","54b15fc3":"stat, p = shapiro(df['writing score'])\nprint('stat=%.3f, p=%.3f' % (stat, p))\nif p > 0.05:\n    print('Probably Gaussian')\nelse:\n    print('Probably not Gaussian')","5a51df50":"# Subplot","a00b5029":"# Normality Test","4bdf7a10":"# Correlation Matrix","7d637106":"# Pairplot","9825bc7f":"# Obs\n* As per the test we can say that These featrure are not normal at all.","1278752b":"# Obs\n* No missing values","3f8263bd":"# Correlation","2a66c7a4":"# Visualizayion","3b108ed3":"# Shapiro-Wilk Test\n* Assumptions\n\n* Observations in each sample are independent and identically distributed (iid).\n# Interpretation\n\n* H0: the sample has a Gaussian distribution.\n* H1: the sample does not have a Gaussian distribution.","8e5a9f2e":"# Obs\n* as we can see that the they are almost gaussian.\n* Need to perform some Normality test"}}