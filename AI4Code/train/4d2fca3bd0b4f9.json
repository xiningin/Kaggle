{"cell_type":{"090856d4":"code","5b627660":"code","ab090ff9":"code","443a1857":"code","291f6a77":"code","df3f6bdc":"code","8629b431":"code","ef0e9f24":"code","7061ecc7":"code","6782844a":"code","a6d009c0":"code","2a64aef6":"code","a86f5a75":"code","55203129":"code","2f6d82ac":"code","a237f96e":"code","e09acfff":"code","ed227267":"code","869f7b98":"code","ff3b842c":"code","cb705dff":"code","fd9f1300":"code","8b92e333":"code","68605f76":"code","ac58f9ca":"code","eca9d95b":"code","484fe13b":"code","fa706761":"code","b7bfa671":"markdown","15a62305":"markdown","caaeac3e":"markdown","f132772a":"markdown","b7ac9210":"markdown","8fa3ca0f":"markdown","2231ed38":"markdown","fbf38174":"markdown"},"source":{"090856d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b627660":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.head()","ab090ff9":"train.info()","443a1857":"fig = plt.figure(figsize=(18,12))\nsns.histplot(train.SalePrice)","291f6a77":"fig = plt.figure(figsize=(18,12))\nsns.scatterplot(x=train.LotArea, y=train.SalePrice)\nplt.xlim(0,40000)\nplt.show()","df3f6bdc":"train.corr()[\"SalePrice\"].sort_values()","8629b431":"train2 = train[['MSSubClass',\n                'LotArea',\n               'MSZoning',\n               'Neighborhood',\n               'LandContour',\n               'Alley',\n               'SalePrice',\n               'Street',\n               'YearBuilt',\n               'BedroomAbvGr',\n               'OverallQual',\n               'GrLivArea',\n               'GarageCars'\n               ]]\n\ntest2 = test[['MSSubClass',\n                'LotArea',\n               'MSZoning',\n               'Neighborhood',\n               'LandContour',\n               'Alley',\n               'Street',\n               'YearBuilt',\n               'BedroomAbvGr',\n               'OverallQual',\n               'GrLivArea',\n               'GarageCars']]","ef0e9f24":"train2.info()\ntest2.info()","7061ecc7":"train2['Alley'].unique()","6782844a":"train2['Alley'].fillna('Terre', inplace=True)\ntest2['Alley'].fillna('Terre', inplace=True)","a6d009c0":"train2.info()\ntest2.info()","2a64aef6":"test2['MSZoning'].unique()","a86f5a75":"test2['MSZoning'].value_counts()","55203129":"test2['MSZoning'].fillna('RL', inplace=True)","2f6d82ac":"train2.info()\ntest2.info()","a237f96e":"test2.GarageCars.unique()\ntest2['GarageCars'].fillna(0.0, inplace=True)\ntest2.info()","e09acfff":"train2['MSZoning']","ed227267":"label = OneHotEncoder() #Initialisation des donn\u00e9es\n\ntrain2_matrice = label.fit_transform(train2[['MSZoning','Neighborhood','LandContour','Alley','Street']]).toarray()\ntest2_matrice = label.transform(test2[['MSZoning','Neighborhood','LandContour','Alley','Street']]).toarray()\n\nprint(train2_matrice.shape)","869f7b98":"train2.head()","ff3b842c":"train2.drop(columns=['MSZoning','Neighborhood','LandContour','Alley','Street'], inplace=True)\ntest2.drop(columns=['MSZoning','Neighborhood','LandContour','Alley','Street'], inplace=True)\n\ntrain2.head()","cb705dff":"train2 = pd.concat([train2, pd.DataFrame(train2_matrice)], axis=1)\ntest2 = pd.concat([test2, pd.DataFrame(test2_matrice)], axis=1)\n\ntrain2.info()","fd9f1300":"from sklearn.preprocessing import Normalizer\ntransformer = Normalizer().fit(train2[['MSSubClass','LotArea','YearBuilt','BedroomAbvGr','OverallQual','GrLivArea','GarageCars']])  # Initialisation\n\ntrain2[['MSSubClass','LotArea','YearBuilt','BedroomAbvGr','OverallQual','GrLivArea','GarageCars']] = transformer.transform(train2[['MSSubClass','LotArea','YearBuilt','BedroomAbvGr','OverallQual','GrLivArea','GarageCars']])\n\ntest2[['MSSubClass','LotArea','YearBuilt','BedroomAbvGr','OverallQual','GrLivArea','GarageCars']] = transformer.transform(test2[['MSSubClass','LotArea','YearBuilt','BedroomAbvGr','OverallQual','GrLivArea','GarageCars']])\n","8b92e333":"train2","68605f76":"from sklearn.model_selection import train_test_split\nnew_train,new_test = train_test_split(train2,test_size=0.2, random_state = 1)","ac58f9ca":"y_train = new_train['SalePrice']\nx_train = new_train.drop(['SalePrice'], axis=1)\n\ny_test = new_test['SalePrice']\nx_test = new_test.drop(['SalePrice'], axis=1)","eca9d95b":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(random_state=0)\nregr.fit(x_train, y_train)","484fe13b":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\n\ny_pred = regr.predict(x_test)\n\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))\nprint(mean_absolute_error(y_test, y_pred))","fa706761":"sub = pd.DataFrame()\nsub['Id'] = test.Id\nsub['SalePrice'] = score = np.sqrt(regr.predict(test2))\nsub.to_csv('submission.csv',index=False)","b7bfa671":"# Encodage des donn\u00e9es","15a62305":"# Nous allons supprimer les colonnes et ajouter les nouvelles colonnes encod\u00e9es","caaeac3e":"# Trouver les attributs et entra\u00eener le mod\u00e8le","f132772a":"# Evaluer les performances du mod\u00e8le","b7ac9210":"# submission","8fa3ca0f":"# Cr\u00e9er notre jeu de test","2231ed38":"# Supprimer les valeurs nulles","fbf38174":"# Nettoyage des donn\u00e9es**"}}