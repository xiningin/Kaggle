{"cell_type":{"4782604d":"code","7305adea":"code","3d6fecbc":"code","866e7e69":"code","e903cd33":"code","eab6f773":"code","8259076d":"code","fcfa38d6":"code","b88c27c6":"code","30184b25":"code","fb5d6b2a":"code","8ce41e46":"code","c43ae71e":"code","d282eee5":"code","5d70426e":"code","14697b0f":"code","c07e670a":"code","f6d88d13":"code","2e26d6ef":"code","ab09a2b6":"code","ec46d206":"code","2ed3fdba":"code","6bd1f957":"code","35e76d3b":"code","eba97686":"code","e35d83f1":"code","a799f200":"code","6eb0bd3c":"code","05493e19":"code","718e16f5":"code","5dcf7acc":"code","ba628522":"code","e84f9d7e":"markdown","a085f7aa":"markdown","b0a35998":"markdown","1f1f6ab6":"markdown","e12caf9b":"markdown","3a130231":"markdown"},"source":{"4782604d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport nltk as nk\n%matplotlib inline","7305adea":"data = pd.read_csv('..\/input\/jobs_data.csv' )","3d6fecbc":"data.tail()","866e7e69":"data['ID'] = data.iloc[:,0]","e903cd33":"data = data[['ID','title','jobFunction','industry']]","eab6f773":"data.head()","8259076d":"data.shape","fcfa38d6":"data['title']","b88c27c6":"data.info()","30184b25":"data.describe().transpose()","fb5d6b2a":"data['tit_ind'] = data['title'] + data['industry']  ","8ce41e46":"data['tit_ind'].head()","c43ae71e":"import re","d282eee5":"from nltk.corpus import stopwords\nfrom nltk.corpus import words\nfrom nltk.stem.porter import PorterStemmer\n#nltk.download('stopwords')\n#nltk.download('words')","5d70426e":"corpus = []\nfor i in range(0, len(data['tit_ind'])):\n    jobtitle = re.sub('[^a-zA-Z]', ' ', data['tit_ind'][i])\n    jobtitle = jobtitle.lower()\n    jobtitle = jobtitle.split()\n    ps = PorterStemmer()\n    jobtitle = [ps.stem(word) for word in jobtitle if not word in set(stopwords.words('english'))] # this will also remove arabic word\n    jobtitle = ' '.join(jobtitle)\n    corpus.append(jobtitle)","14697b0f":"corpus ","c07e670a":"data['function'] = data['jobFunction'] + data['industry'] ","f6d88d13":"corpus_2 = []\nfor i in range(0, len(data['function'])):\n    jobfunction = re.sub('[^a-zA-Z]', ' ', data['function'][i])\n    jobfunction = jobfunction.lower()\n    jobfunction = jobfunction.split()\n    ps = PorterStemmer()\n    jobfunction = [ps.stem(word) for word in jobfunction if not word in set(stopwords.words('english'))] # this will also remove arabic word\n    jobfunction = ' '.join(jobfunction)\n    corpus_2.append(jobfunction)","2e26d6ef":"corpus_2 ","ab09a2b6":"d = {'ID': data['ID'] ,'job': corpus}","ec46d206":"df_job = pd.DataFrame(data = d)","2ed3fdba":"df_job.head()","6bd1f957":"df_func = pd.DataFrame({'function' :corpus_2})","35e76d3b":"df_func.head()","eba97686":"from sklearn.feature_extraction.text import TfidfVectorizer\ntf = TfidfVectorizer()\ntfidf_job = tf.fit_transform(df_job.iloc[:,1])\ntfidf_func = tf.transform(df_func.iloc[:,0])","e35d83f1":"tfidf_func.shape","a799f200":"\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncos_similarity_tfidf = map(lambda x: cosine_similarity(tfidf_job,x), tfidf_func )","6eb0bd3c":"cosine_similarity(tfidf_job,tfidf_func)","05493e19":"output2 = list(cos_similarity_tfidf)","718e16f5":"output2 ","5dcf7acc":"def get_recommendation(jobtitle):\n    #recommendation = pd.DataFrame(columns = ['ID','title' , 'Recommended function', 'score'])\n    id = list(data['title']).index(jobtitle)\n    recommended = data['jobFunction'][id]\n    score = output2[id][0][0]\n    result = {'ID': id , 'title':jobtitle ,'Recommended function' : recommended , 'score':score  }\n    result = pd.DataFrame(result , index = range(1))\n    return result","ba628522":"get_recommendation('Odoo Developer')","e84f9d7e":"Disclamer:<br>Data given from the source is dummy and not accurate","a085f7aa":"<b>This Project consists of three parts \n<ol>\n    <li>NLP for feature extraction<\/li>\n    <li>Recommendation system<\/li>\n    <\/ol>\n<\/b>","b0a35998":"No Missing Values","1f1f6ab6":"## Conclusion:\n\nThe score is very low because the data given was not accurate from the source as mentioned above","e12caf9b":"==========================================================================","3a130231":"# 1.NLP for feature extraction"}}