{"cell_type":{"e0ff33c5":"code","3f96d1a7":"code","799659ee":"code","d881af9d":"code","ea418c1b":"code","296efdb0":"code","d57316f1":"code","e511a9d0":"code","fc7e4b77":"code","239946f1":"code","c03b14c3":"code","59a8f5cb":"code","9b416507":"code","cd7fc8d1":"code","5e0b08e5":"code","bf84dbaf":"code","d5b92c1c":"code","7ebed341":"code","b235c506":"code","1594dd36":"markdown","7e798bcc":"markdown","a09b6ad9":"markdown","173d0c63":"markdown","eb184bed":"markdown","0cd10e47":"markdown","767d9205":"markdown","bae181a9":"markdown"},"source":{"e0ff33c5":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","3f96d1a7":"import os\nimport gc\nimport random\nimport math\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\nfrom sklearn.metrics import log_loss\n\nimport category_encoders as ce\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.optim as optim\nimport torch.nn.functional as F\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","799659ee":"def get_logger(filename='log'):\n    from logging import getLogger, INFO, StreamHandler, FileHandler, Formatter\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=f\"{filename}.log\")\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nlogger = get_logger()\n\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(seed=42)","d881af9d":"os.listdir('..\/input\/lish-moa')","ea418c1b":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_nonscored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nsubmission = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","296efdb0":"train_features.head()","d57316f1":"train_targets_scored.head()","e511a9d0":"train_targets_nonscored.head()","fc7e4b77":"test_features.head()","239946f1":"submission.head()","c03b14c3":"folds = train_targets_scored.copy()\ntarget_cols = [c for c in train_targets_scored.columns if c not in ['sig_id']]\nFold = MultilabelStratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds[target_cols])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.shape)","59a8f5cb":"class TrainDataset(Dataset):\n    def __init__(self, df, num_features, cat_features, labels):\n        self.cont_values = df[num_features].values\n        self.cate_values = df[cat_features].values\n        self.labels = labels\n        \n    def __len__(self):\n        return len(self.cont_values)\n\n    def __getitem__(self, idx):\n        cont_x = torch.FloatTensor(self.cont_values[idx])\n        cate_x = torch.LongTensor(self.cate_values[idx])\n        label = torch.tensor(self.labels[idx]).float()\n        \n        return cont_x, cate_x, label\n    \n\nclass TestDataset(Dataset):\n    def __init__(self, df, num_features, cat_features):\n        self.cont_values = df[num_features].values\n        self.cate_values = df[cat_features].values\n        \n    def __len__(self):\n        return len(self.cont_values)\n\n    def __getitem__(self, idx):\n        cont_x = torch.FloatTensor(self.cont_values[idx])\n        cate_x = torch.LongTensor(self.cate_values[idx])\n        \n        return cont_x, cate_x","9b416507":"cat_features = ['cp_type', 'cp_time', 'cp_dose']\nnum_features = [c for c in train_features.columns if train_features.dtypes[c] != 'object']\nnum_features = [c for c in num_features if c not in cat_features]\ntarget = train_targets_scored[target_cols].values\n\ndef cate2num(df):\n    df['cp_type'] = df['cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df['cp_time'] = df['cp_time'].map({24: 2, 48: 3, 72: 4})\n    df['cp_dose'] = df['cp_dose'].map({'D1': 5, 'D2': 6})\n    return df\n\ntrain_features = cate2num(train_features)\ntest_features = cate2num(test_features)","cd7fc8d1":"class CFG:\n    max_grad_norm=1000\n    gradient_accumulation_steps=1\n    hidden_size=512\n    dropout=0.5\n    lr=1e-2\n    batch_size=128\n    epochs=20\n    total_cate_size=7\n    emb_size=4\n    num_features=num_features\n    cat_features=cat_features\n    target_cols=target_cols","5e0b08e5":"class TabularNN(nn.Module):\n    def __init__(self, cfg):\n        super().__init__()\n        self.cate_emb = nn.Embedding(cfg.total_cate_size, cfg.emb_size, padding_idx=0)\n        self.emb_drop = nn.Dropout(0.2)\n        self.cont_emb = nn.Sequential(\n                          nn.Linear(len(cfg.num_features), cfg.hidden_size),\n                          nn.BatchNorm1d(cfg.hidden_size),\n                          nn.Dropout(cfg.dropout),\n                          nn.PReLU(),\n                          nn.Linear(cfg.hidden_size, cfg.hidden_size),\n                          nn.BatchNorm1d(cfg.hidden_size),\n                          nn.Dropout(cfg.dropout),\n                          )\n        head_hidden_size = cfg.hidden_size + len(cfg.cat_features)*cfg.emb_size\n        self.head = nn.Sequential(\n                          nn.Linear(head_hidden_size, head_hidden_size),\n                          nn.BatchNorm1d(head_hidden_size),\n                          nn.Dropout(0.1),\n                          nn.Linear(head_hidden_size, len(cfg.target_cols)),\n                          )\n\n    def forward(self, cont_x, cate_x):\n        batch_size = cate_x.size(0)\n        cate_emb = self.cate_emb(cate_x).view(batch_size, -1)\n        cate_emb = self.emb_drop(cate_emb)\n        cont_emb = self.cont_emb(cont_x)\n        x = torch.cat((cont_emb, cate_emb), 1)\n        x = self.head(x)\n        return x","bf84dbaf":"def train_fn(train_loader, model, optimizer, epoch, scheduler, device):\n    \n    losses = AverageMeter()\n\n    model.train()\n\n    for step, (cont_x, cate_x, y) in enumerate(train_loader):\n        \n        cont_x, cate_x, y = cont_x.to(device), cate_x.to(device), y.to(device)\n        batch_size = cont_x.size(0)\n\n        pred = model(cont_x, cate_x)\n        \n        loss = nn.BCEWithLogitsLoss()(pred, y)\n        losses.update(loss.item(), batch_size)\n\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n\n        loss.backward()\n        \n        grad_norm = torch.nn.utils.clip_grad_norm_(model.parameters(), CFG.max_grad_norm)\n\n        if (step + 1) % CFG.gradient_accumulation_steps == 0:\n            scheduler.step()\n            optimizer.step()\n            optimizer.zero_grad()\n        \n    return losses.avg\n\n\ndef validate_fn(valid_loader, model, device):\n    \n    losses = AverageMeter()\n\n    model.eval()\n    val_preds = []\n\n    for step, (cont_x, cate_x, y) in enumerate(valid_loader):\n        \n        cont_x, cate_x, y = cont_x.to(device), cate_x.to(device), y.to(device)\n        batch_size = cont_x.size(0)\n\n        with torch.no_grad():\n            pred = model(cont_x, cate_x)\n            \n        loss = nn.BCEWithLogitsLoss()(pred, y)\n        losses.update(loss.item(), batch_size)\n\n        val_preds.append(pred.sigmoid().detach().cpu().numpy())\n\n        if CFG.gradient_accumulation_steps > 1:\n            loss = loss \/ CFG.gradient_accumulation_steps\n\n    val_preds = np.concatenate(val_preds)\n        \n    return losses.avg, val_preds\n\n\ndef inference_fn(test_loader, model, device):\n\n    model.eval()\n    preds = []\n\n    for step, (cont_x, cate_x) in enumerate(test_loader):\n\n        cont_x,  cate_x = cont_x.to(device), cate_x.to(device)\n\n        with torch.no_grad():\n            pred = model(cont_x, cate_x)\n\n        preds.append(pred.sigmoid().detach().cpu().numpy())\n\n    preds = np.concatenate(preds)\n\n    return preds\n\n\nclass AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count","d5b92c1c":"def run_single_nn(cfg, train, test, folds, num_features, cat_features, target, device, fold_num=0, seed=42):\n    \n    # Set seed\n    logger.info(f'Set seed {seed}')\n    seed_everything(seed=seed)\n\n    # loader\n    trn_idx = folds[folds['fold'] != fold_num].index\n    val_idx = folds[folds['fold'] == fold_num].index\n    train_folds = train.loc[trn_idx].reset_index(drop=True)\n    valid_folds = train.loc[val_idx].reset_index(drop=True)\n    train_target = target[trn_idx]\n    valid_target = target[val_idx]\n    train_dataset = TrainDataset(train_folds, num_features, cat_features, train_target)\n    valid_dataset = TrainDataset(valid_folds, num_features, cat_features, valid_target)\n    train_loader = DataLoader(train_dataset, batch_size=cfg.batch_size, shuffle=True, \n                              num_workers=4, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, batch_size=cfg.batch_size, shuffle=False, \n                              num_workers=4, pin_memory=True, drop_last=False)\n\n    # model\n    model = TabularNN(cfg)\n    model.to(device)\n    optimizer = optim.Adam(model.parameters(), lr=cfg.lr)\n    scheduler = optim.lr_scheduler.OneCycleLR(optimizer=optimizer, pct_start=0.1, div_factor=1e3, \n                                              max_lr=1e-2, epochs=cfg.epochs, steps_per_epoch=len(train_loader))\n\n    # log\n    log_df = pd.DataFrame(columns=(['EPOCH']+['TRAIN_LOSS']+['VALID_LOSS']) )\n\n    # train & validate\n    best_loss = np.inf\n    for epoch in range(cfg.epochs):\n        train_loss = train_fn(train_loader, model, optimizer, epoch, scheduler, device)\n        valid_loss, val_preds = validate_fn(valid_loader, model, device)\n        log_row = {'EPOCH': epoch, \n                   'TRAIN_LOSS': train_loss,\n                   'VALID_LOSS': valid_loss,\n                  }\n        log_df = log_df.append(pd.DataFrame(log_row, index=[0]), sort=False)\n        #logger.info(log_df.tail(1))\n        if valid_loss < best_loss:\n            logger.info(f'epoch{epoch} save best model... {valid_loss}')\n            best_loss = valid_loss\n            oof = np.zeros((len(train), len(cfg.target_cols)))\n            oof[val_idx] = val_preds\n            torch.save(model.state_dict(), f\"fold{fold_num}_seed{seed}.pth\")\n\n    # predictions\n    test_dataset = TestDataset(test, num_features, cat_features)\n    test_loader = DataLoader(test_dataset, batch_size=cfg.batch_size, shuffle=False, \n                             num_workers=4, pin_memory=True)\n    model = TabularNN(cfg)\n    model.load_state_dict(torch.load(f\"fold{fold_num}_seed{seed}.pth\"))\n    model.to(device)\n    predictions = inference_fn(test_loader, model, device)\n    \n    # del\n    torch.cuda.empty_cache()\n\n    return oof, predictions\n\n\ndef run_kfold_nn(cfg, train, test, folds, num_features, cat_features, target, device, n_fold=5, seed=42):\n\n    oof = np.zeros((len(train), len(cfg.target_cols)))\n    predictions = np.zeros((len(test), len(cfg.target_cols)))\n\n    for _fold in range(n_fold):\n        logger.info(\"Fold {}\".format(_fold))\n        _oof, _predictions = run_single_nn(cfg,\n                                           train,\n                                           test,\n                                           folds,\n                                           num_features, \n                                           cat_features,\n                                           target, \n                                           device,\n                                           fold_num=_fold,\n                                           seed=seed)\n        oof += _oof\n        predictions += _predictions \/ n_fold\n\n    score = 0\n    for i in range(target.shape[1]):\n        _score = log_loss(target[:,i], oof[:,i])\n        score += _score \/ target.shape[1]\n    logger.info(f\"CV score: {score}\")\n    \n    return oof, predictions","7ebed341":"# Seed Averaging for solid result\noof = np.zeros((len(train_features), len(CFG.target_cols)))\npredictions = np.zeros((len(test_features), len(CFG.target_cols)))\n\nSEED = [42, 0, 1]\nfor seed in SEED:\n    _oof, _predictions = run_kfold_nn(CFG, \n                                      train_features, test_features, folds, \n                                      num_features, cat_features, target,\n                                      device,\n                                      n_fold=5, seed=seed)\n    oof += _oof \/ len(SEED)\n    predictions += _predictions \/ len(SEED)\n\nscore = 0\nfor i in range(target.shape[1]):\n    _score = log_loss(target[:,i], oof[:,i])\n    score += _score \/ target.shape[1]\nlogger.info(f\"Seed Averaged CV score: {score}\")","b235c506":"submission[target_cols] = predictions\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","1594dd36":"# Library","7e798bcc":"# Dataset","a09b6ad9":"# CV split","173d0c63":"# Data Loading","eb184bed":"# About this notebook\n\n- PyTorch NN starter code\n- MultilabelStratifiedKFold 5 folds  \n\nIf this notebook is helpful, feel free to upvote :)","0cd10e47":"# Submit","767d9205":"# MODEL","bae181a9":"# Utils"}}