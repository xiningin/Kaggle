{"cell_type":{"08bb28b4":"code","9d187d35":"code","51f4fe61":"code","260c0f38":"code","957c34ee":"code","c90762b6":"code","859514ad":"code","6edd6a62":"code","51f0bac9":"code","d82a40d3":"code","ae3891eb":"code","2f60ed2b":"code","7d37b3e3":"code","6ab48fec":"code","2a510582":"code","a8cbdacf":"code","14061d31":"code","7ac31637":"code","1315d190":"code","6820c673":"code","ff841c19":"code","026c400f":"code","a5617612":"code","d7649fb4":"code","e882fd38":"code","c7ee0db9":"code","5199a610":"code","23a64b2e":"code","bacfa9e7":"code","d8915a3f":"code","2c804c67":"code","24b48148":"code","0e71d8c0":"code","f856c27f":"markdown","6672887d":"markdown","56ec6897":"markdown","a5d72c3f":"markdown"},"source":{"08bb28b4":"import numpy as np\nimport pandas as pd","9d187d35":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","51f4fe61":"Training = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Training.csv\")\nTraining.head()","260c0f38":"submission = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/sample_submission.csv\")\nsubmission.head()","957c34ee":"Matches_IPL_2008_2019 = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\nMatches_IPL_2008_2019.head()","c90762b6":"Matches_IPL_2020 = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")\nMatches_IPL_2020.head()","859514ad":"Training[['Match_Id','Player']] = Training.Id.str.split(\"_\",expand=True)\nTraining['Match_Id'] = Training['Match_Id'].astype('int64')\nTraining.head()","6edd6a62":"Training = Training[['Match_Id','Player','Total Points']]\nTraining.head()","51f0bac9":"submission[['Match_Id','Player']] = submission.Id.str.split(\"_\",expand=True)\nsubmission = submission[['Match_Id','Player','Total Points']]\nsubmission['Match_Id'] = submission['Match_Id'].astype('int64')\nsubmission.head()","d82a40d3":"def  initial_getter(x):\n    if x==\"Kings XI Punjab\":\n        return \"KXIP\"\n    if x==\"Sunrisers Hyderabad\":\n        return \"SRH\"\n        \n    lst = x.split()\n    initials = \"\"\n    for i in lst:  # go through each name\n        initials += i[0].upper()  # append the initial\n    return initials","ae3891eb":"Matches_IPL_2008_2019['team1'] = Matches_IPL_2008_2019['team1'].apply(lambda x: initial_getter(x))\nMatches_IPL_2008_2019['team2'] = Matches_IPL_2008_2019['team2'].apply(lambda x: initial_getter(x))\nMatches_IPL_2008_2019.head()","2f60ed2b":"Player_DB = Training[['Match_Id','Player','Total Points']].merge(Matches_IPL_2008_2019[['match_id','team1','team2']], right_on='match_id', left_on='Match_Id', how='inner')\nPlayer_DB.drop('match_id',axis=1,inplace=True)\nPlayer_DB.head()","7d37b3e3":"Submit_DB = submission[['Match_Id','Player','Total Points']].merge(Matches_IPL_2020[['match_id','team1','team2']], right_on='match_id', left_on='Match_Id', how='inner')\nSubmit_DB.drop('match_id',axis=1,inplace=True)\nSubmit_DB.head()","6ab48fec":"DB = pd.concat([Player_DB,Submit_DB]) \nDB.head()","2a510582":"avg = DB.groupby('Player')['Total Points'].mean().reset_index()\navg.rename(columns = {'Total Points':'Avg'}, inplace = True) \navg.head()","a8cbdacf":"DB1 = pd.merge(DB[['Player','Match_Id','team1','team2']], avg[['Player','Avg']], on = 'Player', how='inner')\nDB1.head()","14061d31":"Training_Set = pd.merge(DB[['Match_Id','Player']],DB1[['Player','Match_Id','team1','team2','Avg']], on = ['Match_Id','Player'], how='inner')\nTraining_Set.head()","7ac31637":"X = Training_Set[['Player','team1','team2','Avg']]\ny = Training['Total Points']","1315d190":"import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error as MSE","6820c673":"labelencoder = LabelEncoder()\nLabel_Encoded=X.select_dtypes(include='object')\nLabel_Encoded['Player']=labelencoder.fit_transform(Label_Encoded['Player'])\nLabel_Encoded['team1']=labelencoder.fit_transform(Label_Encoded['team1'])\nLabel_Encoded['team2']=labelencoder.fit_transform(Label_Encoded['team2'])\nLabel_Encoded['Avg']=X['Avg']\nLabel_Encoded.head()","ff841c19":"Training_encoding = Label_Encoded[:15916]\nSubmission_encoding = Label_Encoded[15916:]","026c400f":"X_train, X_test, y_train, y_test = train_test_split(Training_encoding, y, test_size=0.2, random_state=24)","a5617612":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","d7649fb4":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","e882fd38":"model = RandomForestRegressor(n_estimators=100,random_state=2519,n_jobs=-1,max_features=4)","c7ee0db9":"model.fit(X_train,y_train)","5199a610":"Predicted = model.predict(X_test)","23a64b2e":"Predicted = [10 if i < 0 else i for i in Predicted]","bacfa9e7":"print(\"MSE:\",MSE(y_test, Predicted))\nprint(\"RSME:\",np.sqrt(MSE(y_train, model.predict(X_train))))","d8915a3f":"submit = scaler.transform(Submission_encoding)","2c804c67":"prediction = list(model.predict(submit))\nprediction = np.round(prediction)\nprediction = [10 if i < 0 else i for i in prediction]","24b48148":"Final_Submission = pd.read_csv(\"\/kaggle\/input\/ipl-2020-player-performance\/sample_submission.csv\")\nFinal_Submission['Total Points']=prediction","0e71d8c0":"Final_Submission.to_csv(\"Final_Submission.csv\", index=False)","f856c27f":"# Submission ","6672887d":"* Adding players average scores","56ec6897":"# Importing Data\n\n\"Training.csv\" : File Containing various performance stats of a player in a match <br>\n\"Matches IPL 2020.csv\" : Schedule of matches that occrued in IPL 2020<br>\n\"IPL 2020 Squads.csv\" : Squads of each participating club\/team in IPL 2020<br>\n\"Matches IPL 2008-2019.csv\" : Schedule of matches that occrued in IPL 2020<br>","a5d72c3f":"## Model Fitting"}}