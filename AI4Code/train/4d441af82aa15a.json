{"cell_type":{"57840f55":"code","41123f48":"code","4619d038":"code","07d6d129":"code","eb1ceba9":"code","666f63a1":"code","452ca1c1":"code","0e651d48":"code","d97aee3b":"code","2f70efd2":"code","9816d67f":"code","61716f24":"code","0c731451":"code","31b29e28":"code","ea92b26d":"code","bc9724dc":"code","27d3d949":"code","c0d67295":"code","ff7da13b":"code","6558b89f":"code","5ec9ed85":"code","902fcfc2":"code","83deb7a9":"code","294a8299":"code","482732f6":"code","67c2d600":"code","e7b2295b":"code","e8d27489":"code","5417329c":"code","575446bd":"code","0b917f72":"code","b2671f45":"code","126bed51":"code","857a5c6e":"code","e2f909b7":"code","af19db34":"code","e59b7c71":"code","fef89414":"code","da452a59":"code","03969a5d":"code","cbb6a504":"code","5d8e4737":"code","18c0a267":"code","24849ec1":"code","5d9bdc6f":"code","62a774fc":"code","6a2ae84f":"code","37601391":"code","920a5ccd":"code","b9d713b2":"code","7aea0ca9":"code","d1721dfd":"code","5663f398":"code","52727e7f":"code","801830c6":"code","737f6862":"code","1c411ce1":"code","64ce326c":"code","93e55a19":"code","b9476167":"code","94734184":"markdown","ecb68554":"markdown","3f9ca034":"markdown","817d8e84":"markdown","82d797a7":"markdown","bb7cae8d":"markdown","4689706d":"markdown","b412fb1e":"markdown","a36ca94a":"markdown","42307935":"markdown","3a667e22":"markdown","00c2f40c":"markdown","24044d0e":"markdown","9b1896ae":"markdown","7f96f437":"markdown","55825a11":"markdown","b9954668":"markdown","f57d24c4":"markdown","4791f3ee":"markdown","f1fabd9f":"markdown","5f07130e":"markdown"},"source":{"57840f55":"import os\nimport cv2\nimport csv\nimport glob\nimport pandas as pd\nimport numpy as np\nimport random\nimport itertools\nfrom collections import Counter\nfrom math import ceil\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%matplotlib inline\n\nimage_folder_path = \"\/kaggle\/input\/global-wheat-detection\/train\/\"","41123f48":"train = pd.read_csv(\"\/kaggle\/input\/global-wheat-detection\/train.csv\")\ntrain","4619d038":"bboxes = np.stack(train['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\nfor i, column in enumerate(['x_min', 'y_min', 'width', 'height']):\n    train[column] = bboxes[:,i]\n    \ntrain[\"x_max\"] = train.apply(lambda col: col.x_min + col.width, axis=1)\ntrain[\"y_max\"] = train.apply(lambda col: col.y_min + col.height, axis = 1)\ntrain.drop(columns=['bbox'], inplace=True)\ntrain.head()","07d6d129":"train[\"class\"] = \"1\"\ntrain[\"image_id\"] = train[\"image_id\"].apply(lambda x: str(x) + \".jpg\").astype(\"str\")\ntrain.head()","eb1ceba9":"# all util functions\ndef draw_rect(img, bboxes, color=(255,0,0)):\n    # get an image and return it with all rectangles from bboxes (a 2d-array)\n    img = img.copy()\n    for bbox in bboxes:\n        pt1, pt2 = (bbox[0], bbox[1]), (bbox[2], bbox[3])\n        pt1 = int(pt1[0]), int(pt1[1])\n        pt2 = int(pt2[0]), int(pt2[1])\n        img = cv2.rectangle(img.copy(), pt1, pt2, color, int(max(img.shape[:2]) \/ 500))\n    return img\n\ndef plot_bboxes(img, bboxes, size=(12, 10)):\n    if isinstance(img, str):\n        image_file_path = os.path.join(image_folder_path, img)\n        img = cv2.imread(image_file_path)[:,:,::-1]\n\n    # get an image and plot it with all bounding boxes\n    img2 = draw_rect(img.copy(), bboxes)\n    plt.figure(figsize=size)\n    plt.imshow(img2)\n\n    \ndef img_check(image_name_or_index, large=False):\n    # find image by image_id or index, plot it with bboxes\n    # and returns the image, bounding boxes array and image_id\n    if isinstance(image_name_or_index, int):\n        unique_images = train.image_id.unique()\n        img_file = unique_images[image_name_or_index]\n    else:\n        img_file = image_name_or_index\n    \n    bboxes = train.loc[train.image_id == img_file, ['x_min', 'y_min', 'x_max', 'y_max']].values\n    image_file_path = os.path.join(image_folder_path, img_file)\n    img = cv2.imread(image_file_path)[:,:,::-1]\n    print(img_file)\n    size = (16, 16) if large else (12, 10)\n    plot_bboxes(img, bboxes, size)\n    return img, bboxes, img_file\n\n\ndef plot_image(image_id, size=(12, 12)):\n    # just find image by id and plot with bounding boxes\n    img_file = image_id\n    bboxes = train.loc[train.image_id == img_file, ['x_min', 'y_min', 'x_max', 'y_max']].values\n    image_file_path = os.path.join(image_folder_path, img_file)\n    img = cv2.imread(image_file_path)[:,:,::-1]\n    plot_bboxes(img, bboxes, size)\n    \n\ndef find_bbox_index(image_id, bbox):\n    # return the index of the bounding box given the image_id and bounding box coords\n    f = train[(train.image_id == image_id) & (train.x_min == bbox[0]) & (train.y_min == bbox[1]) \n              & (train.x_max == bbox[2])  & (train.y_max == bbox[3])]\n    return f.index\n\ndef plot_bbox_by_number(num):\n    plot_bboxes(ximg, xboxes[num:num+1])\n    print(\"Bounding box:\", xboxes[num])\n    print(\"Train frame index:\", find_bbox_index(ximg_id, xboxes[num]))\n    \n    \ndef add_new_bbox(df, image_id, bbox, index=0):\n    # return a frame with a new bounding box for the given image_id\n    # index=0 will add the new box to last index + 1\n    tmp = df[df.image_id == image_id]\n    serie = tmp.iloc[0].copy()\n    serie[['x_min', 'y_min', 'x_max', 'y_max']] = bbox\n    serie['height'] = serie.y_max - serie.y_min\n    serie['width'] = serie.x_max - serie.x_min\n    serie.name = index if index != 0 else df.index.max() + 1\n    return df.append(serie, verify_integrity=True)","666f63a1":"ximg, xboxes, ximg_id = img_check('41c0123cc.jpg')","452ca1c1":"plot_bbox_by_number(6)","0e651d48":"plot_bboxes(ximg, np.array([[0, 15, 140, 80], [290, 270, 370, 420]]))","d97aee3b":"# fix image bounding boxes\nprint(train.shape)\ntrain.drop(173, inplace=True)\ntrain = add_new_bbox(train, ximg_id, [0, 15, 140, 80])\ntrain = add_new_bbox(train, ximg_id, [290, 270, 370, 420])\nprint(train.shape)\n#show fixed image\nximg, xboxes, ximg_id = img_check('41c0123cc.jpg')","2f70efd2":"ximg, xboxes, ximg_id = img_check(6)","9816d67f":"plot_bboxes(ximg, np.array([[240, 0, 300, 80]]))","61716f24":"# fix image bounding boxes\nprint(train.shape)\ntrain = add_new_bbox(train, ximg_id, [240, 0, 300, 80])\nprint(train.shape)\n#show fixed image\nximg, xboxes, ximg_id = img_check('e46378032.jpg')","0c731451":"ximg, xboxes, ximg_id = img_check(33)","31b29e28":"train.drop(1021, inplace=True)\nximg, xboxes, ximg_id = img_check('a22cdd5eb.jpg')","ea92b26d":"ximg, xboxes, ximg_id = img_check(43)","bc9724dc":"# the first bounding box is totally wrong\n# its also missing two bounding boxes\nprint(xboxes[0])\nfind_bbox_index(ximg_id, [714, 559, 865, 806])\nplot_bboxes(ximg, xboxes[0:1])","27d3d949":"plot_bboxes(ximg, np.array([[730, 560, 810, 710],\n                            [810, 715, 860, 798]]))","c0d67295":"train.drop(1274, inplace=True)\ntrain = add_new_bbox(train, ximg_id, [730, 560, 810, 710])\ntrain = add_new_bbox(train, ximg_id, [810, 715, 860, 798])\nximg, xboxes, ximg_id = img_check(ximg_id, large=True)","ff7da13b":"ximg, xboxes, ximg_id = img_check('a1321ca95.jpg', large=True)","6558b89f":"plot_bboxes(ximg, xboxes[[13, 23]])\nfind_bbox_index(ximg_id, xboxes[13])\nfind_bbox_index(ximg_id, xboxes[23])","5ec9ed85":"train.drop(2169, inplace=True)\ntrain.drop(2159, inplace=True)\nximg, xboxes, ximg_id = img_check('a1321ca95.jpg', large=True)","902fcfc2":"plot_bboxes(ximg, np.array([[300, 450, 510, 620], [140, 610, 400, 820],\n                            [95, 520, 350, 615]]), size=(16, 16))","83deb7a9":"train = add_new_bbox(train, ximg_id, [300, 450, 510, 620])\ntrain = add_new_bbox(train, ximg_id, [140, 610, 400, 820])\ntrain = add_new_bbox(train, ximg_id, [95, 520, 350, 615])","294a8299":"plot_image('a1321ca95.jpg')","482732f6":"ximg, xboxes, xid = img_check('9a30dd802.jpg')","67c2d600":"plot_bboxes(ximg, xboxes[11:12])\nfind_bbox_index(xid, [3, 301, 420, 671])","e7b2295b":"# fix the bounding box and plot the image\ntrain.loc[52868, 'y_min'] = 450\ntrain.loc[52868, 'x_max'] = 200\ntrain.loc[52868, 'y_max'] = 640\nplot_image('9a30dd802.jpg')","e8d27489":"ximg, xboxes, xid = img_check('d067ac2b1.jpg')","5417329c":"plot_bboxes(ximg, xboxes[37:39])\nfind_bbox_index(xid, xboxes[37])\nfind_bbox_index(xid, xboxes[38]) # resize","575446bd":"plot_bboxes(ximg, [[620, 5, 900, 135], [580, 130, 720, 206]], size=(16, 16))","0b917f72":"train.loc[121634, 'y_min'] = 300\ntrain.loc[121634, 'x_min'] = 700\ntrain.drop(121633, inplace=True)\ntrain = add_new_bbox(train, 'd067ac2b1.jpg', [620, 5, 900, 135])\ntrain = add_new_bbox(train, 'd067ac2b1.jpg', [580, 130, 720, 206])\nplot_image('d067ac2b1.jpg', size=(14, 14))","b2671f45":"imgl = np.unique(train.image_id.values).tolist()\nprint(imgl[503]); plot_image(imgl[503], size=(12,12))\ntrain.drop(73348, inplace=True) # box at 0, 400","126bed51":"print(imgl[504]); plot_image(imgl[504], size=(12,12))\ntrain.drop(41429, inplace=True) # box at 0,0","857a5c6e":"train = add_new_bbox(train, imgl[522], [616, 42, 800, 162])\nprint(imgl[522]); plot_image(imgl[522], size=(12,12))","e2f909b7":"train = add_new_bbox(train, imgl[525], [978, 930, 1022, 1018])\nprint(imgl[525]); plot_image(imgl[525], size=(12,12))","af19db34":"train.height.hist(bins=30)","e59b7c71":"top_height = train[train.height > 300].sort_values(by='height', ascending=False)\nxids = top_height.image_id.values\nxboxes = top_height[['x_min', 'y_min', 'x_max', 'y_max']].values\ntop_height","fef89414":"i = 0; plot_bboxes(xids[i], xboxes[i:i+1], size=(10,8))","da452a59":"i = 1; plot_bboxes(xids[i], xboxes[i:i+1], size=(10,8))","03969a5d":"# remove wrong bounding boxes\nfor i in [0, 1]:\n    idx = find_bbox_index(xids[i], xboxes[i])\n    train.drop(idx, inplace=True)","cbb6a504":"top_width = train[train.width > 300].sort_values(by='width', ascending=False)\nxids = top_width.image_id.values\nxboxes = top_width[['x_min', 'y_min', 'x_max', 'y_max']].values\ntop_width","5d8e4737":"i = 0; plot_bboxes(xids[i], xboxes[i:i+1], size=(10,8))\nfind_bbox_index(xids[i], xboxes[i])","18c0a267":"train.loc[3687, 'x_max'] = 132\ntrain.loc[3687, 'y_max'] = 215\nplot_image(xids[0])","24849ec1":"i = 7; plot_bboxes(xids[i], xboxes[i:i+1], size=(14,12))\nfind_bbox_index(xids[i], xboxes[i])","5d9bdc6f":"train.loc[147552, 'x_min'] = 408\nplot_image(xids[7], size=(14, 14))","62a774fc":"i = 14; plot_bboxes(xids[i], xboxes[i:i+1], size=(14,12))\nfind_bbox_index(xids[i], xboxes[i])","6a2ae84f":"train.loc[4412, 'x_min'] = 538\nplot_image(xids[i], size=(14, 14))","37601391":"i = 32; plot_bboxes(xids[i], xboxes[i:i+1], size=(14,12))\nfind_bbox_index(xids[i], xboxes[i])","920a5ccd":"train.loc[86917, 'y_max'] = 455\ntrain.drop(86913, inplace=True)\ntrain.drop(86922, inplace=True)\ntrain = add_new_bbox(train, 'd561f23d2.jpg', [376, 422, 488, 490])\nplot_image('d561f23d2.jpg')","b9d713b2":"train.height = train.y_max - train.y_min\ntrain.width = train.x_max - train.x_min\ntrain['bbox_size'] = train.height * train.width\ntrain['median_bbox_size'] = train.groupby('image_id')['bbox_size'].transform('median')\ntrain['median_ratio_diff'] = (train.bbox_size - train.median_bbox_size) \/ train.median_bbox_size\n\nsort_train = train.sort_values(by='median_ratio_diff', ascending=False)\nxboxes = sort_train[['x_min', 'y_min', 'x_max', 'y_max']].values\nxids = sort_train['image_id'].values\nsort_train","7aea0ca9":"i=0\nplot_image(xids[i], size=(12, 12))\nfind_bbox_index(xids[i], xboxes[i])","d1721dfd":"train.loc[117344, 'x_min'] = 468\ntrain.loc[117344, 'y_max'] = 356\nplot_image(xids[i], size=(10, 10))","5663f398":"i=1\nplot_image(xids[i], size=(12, 12))\nfind_bbox_index(xids[i], xboxes[i])","52727e7f":"train.loc[147504, 'x_max'] = 420\ntrain.loc[147504, 'y_max'] = 155\nplot_image(xids[i], size=(16, 16))","801830c6":"# two bounding boxes without visible wheat heads\ni=-1\nplot_image(xids[i], size=(14, 14))\nfind_bbox_index(xids[i], [483,  31, 534,  89])\nfind_bbox_index(xids[i], [563,  41, 608,  85])","737f6862":"train.drop(126792, inplace=True)\ntrain.drop(126793, inplace=True)\nplot_image(xids[i], size=(14, 14))","1c411ce1":"train['smallest_dim'] = train.apply(lambda x: min(x['width'], x['height']), axis=1)\nsort_train = train.sort_values(by='smallest_dim', ascending=True)\nsort_train.head()\nxboxes = sort_train[['x_min', 'y_min', 'x_max', 'y_max']].values\nxids = sort_train['image_id'].values","64ce326c":"# Example of \"click-error\" box (top right corner)\ni = 80\nprint(sort_train.iloc[i])\nplot_bboxes(xids[i], [xboxes[i]], size=(14, 14))","93e55a19":"# Filter every bounding box where the height or width is less than 9px\ntrain = train[train.smallest_dim >= 9]\ntrain.shape","b9476167":"# recalculate the height and width of bounding boxes\ntrain.height = train.y_max - train.y_min\ntrain.width = train.x_max - train.x_min\n# remove dummy columns\ntrain.drop(['bbox_size', 'median_bbox_size', 'median_ratio_diff', 'smallest_dim'], axis=1, inplace=True)\n# save to new csv file (note: we keep the same original index)\ntrain.to_csv('gwd_train_fixed', index=False)\ntrain","94734184":"## 29b48c0a7.jpg","ecb68554":"## e46378032.jpg","3f9ca034":"# Reading and Loading the boxes (train csv)","817d8e84":"## d067ac2b1.jpg","82d797a7":"# Finding wrong boxes by width","bb7cae8d":"## 9a30dd802.jpg","4689706d":"## 41c0123cc.jpg","b412fb1e":"Changing bounding boxes from [x_min, y_min, width, height] to [x_min, y_min, x_max, y_max]","a36ca94a":"Add column indicating that the image has wheat heads and add .jpg extension to image_id column","42307935":"# Save new train csv file","3a667e22":"# Filter boxes by median size ratio","00c2f40c":"# Filter very small bounding boxes","24044d0e":"## 284a79f05.jpg","9b1896ae":"## a1321ca95.jpg","7f96f437":"## 2840176b4.jpg","55825a11":"## 29f09fa58.jpg","b9954668":"# Fixed wheat bounding boxes\n\nThis notebook fixes some bounding boxes in the training set for the **Global Wheat Detection** dataset. This object detection dataset has almost 3500 wheat head images and their corresponding bounding boxes (~150k bounding boxes).","f57d24c4":"## a22cdd5eb.jpg","4791f3ee":"# Plotting Images with Bounding Boxes","f1fabd9f":"## e99cca2a3.jpg","5f07130e":"# Finding wrong boxes by height"}}