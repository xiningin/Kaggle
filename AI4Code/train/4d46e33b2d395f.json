{"cell_type":{"1a30c727":"code","a2c15e5f":"code","2a60876e":"code","e302277b":"code","053098b1":"code","67584d50":"code","e62d4d28":"code","26617e73":"code","18697320":"code","348b2029":"code","297c819f":"code","97ea8f9d":"code","9c0ce397":"code","3e7d63d4":"code","ef478815":"code","22d13a1f":"code","6c63ac66":"code","ee81838e":"code","f168ea13":"code","99633509":"code","ba143def":"code","235c3eec":"code","1d737559":"code","bbade8c5":"code","60fa46f0":"markdown","9ae9648e":"markdown","852804eb":"markdown"},"source":{"1a30c727":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"..\/input\/diamonds.csv\")\ndf.drop(['Unnamed: 0'],axis=1,inplace=True)\nprint (df.head())","a2c15e5f":"df.describe()","2a60876e":"df.shape","e302277b":"df = df[(df['x']!=0) & (df['y']!=0) & (df['z']!=0)]","053098b1":"df.shape","67584d50":"df['clarity'].value_counts()","e62d4d28":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"ticks\", color_codes=True)\nsns.pairplot(df, vars=['carat','depth', 'table','price'])\nplt.show()","26617e73":"sns.distplot(df.carat)\nplt.show()","18697320":"sns.countplot(x=df.cut)\nplt.show()","348b2029":"sns.countplot(x=df.color)\nplt.show()","297c819f":"sns.countplot(x=df.clarity)\nplt.show()","97ea8f9d":"#sns.boxplot(x=df.drop(['carat'],axis=1),orient='v')\nsns.boxplot(x=df['carat'],orient='v')\nplt.show()","9c0ce397":"diamond_cut = {'Fair':0,\n               'Good':1,\n               'Very Good':2, \n               'Premium':3,\n               'Ideal':4}\n\ndiamond_color = {'J':0,\n                 'I':1, \n                 'H':2,\n                 'G':3,\n                 'F':4,\n                 'E':5,\n                 'D':6}\n\ndiamond_clarity = {'I1':0,\n                   'SI2':1,\n                   'SI1':2,\n                   'VS2':3,\n                   'VS1':4,\n                   'VVS2':5,\n                   'VVS1':6,\n                   'IF':7}","3e7d63d4":"df['cut'] = df['cut'].map(diamond_cut)\ndf['color'] = df['color'].map(diamond_color)\ndf['clarity'] = df['clarity'].map(diamond_clarity)","ef478815":"df.head(20)","22d13a1f":"df.describe()","6c63ac66":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler\nX = df.drop(['price'],axis=1)\ny = df['price']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","ee81838e":"from sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\nmodels = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('DT', DecisionTreeRegressor()))\nmodels.append(('SVM', SVR()))\nmodels.append(('RF',RandomForestRegressor()))\n# evaluate each model in turn\nMSE = []\nr2 = []\nnames = []\nscore = []\nfor name, model in models:\n    Algo = model.fit(X_train,y_train)\n    y_pred = Algo.predict(X_test)\n    MSE.append(mean_squared_error(y_test,y_pred))\n    r2.append(r2_score(y_test,y_pred))\n    names.append(name)\n\n","f168ea13":"df_TT = pd.DataFrame({'Name':names,'r2_score':r2,'MSE':MSE})\nax = sns.barplot(x=\"Name\", y=\"r2_score\", data=df_TT)\nplt.show()","99633509":"from sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodels = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('DT', DecisionTreeRegressor()))\nmodels.append(('SVM', SVR()))\nmodels.append(('RF',RandomForestRegressor()))\n# evaluate each model in turn\nMSE = []\nnames = []\nr2_score = []\nscoring = 'r2'\nfor name, model in models:\n    Algo = model.fit(X_train,y_train)\n    r2 =cross_val_score(Algo, X_train, y_train, cv=3, scoring=scoring)\n    y_pred = Algo.predict(X_test)\n    r2_score.append(np.mean(r2))\n    MSE.append(mean_squared_error(y_test,y_pred))\n    names.append(name)\n","ba143def":"df_cv = pd.DataFrame({'Name':names,'r2_score':r2_score,'MSE':MSE})\nprint (df_cv)","235c3eec":"ax = sns.barplot(x=\"Name\", y=\"r2_score\", data=df_cv)\nplt.show()","1d737559":"df_TT","bbade8c5":"df_cv","60fa46f0":"#### No null values in enitire Data Frame, but columns x,y,z are having zero(0) values as minimum, which makes no sence. So lets drop those records","9ae9648e":"#### price has linear relationship with carat(weight of the diamond)","852804eb":"Looking at above dataframes of r2_score under Train Test Spli & Cross Validation. **Random Forest under Cross validation** has better score to move forward with.\n\nThis is my first Kernel in Kaggle. So please suggest points for improvement if any so. I will be happy hear."}}