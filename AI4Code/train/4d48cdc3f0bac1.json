{"cell_type":{"910d7120":"code","e3bc5094":"code","dbb4ad65":"code","efb62b1a":"code","1dcfded1":"code","129aaaf2":"code","0502c21c":"code","871a1d35":"code","4ce5347d":"code","74b08cce":"code","b59774d4":"code","77b1d0b2":"code","af22495e":"code","b6eba0c7":"code","1ee883a1":"code","a7eae5b3":"code","0b804295":"code","d8ee779d":"markdown","ab86c57d":"markdown","d8495972":"markdown"},"source":{"910d7120":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras import models, layers\nimport tqdm\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn.model_selection import KFold\nimport os\nimport os, shutil \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\n","e3bc5094":"path = '\/kaggle\/input\/challenges-in-representation-learning-facial-expression-recognition-challenge\/'\ndata = pd.read_csv(path+'icml_face_data.csv')\nemotions = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}\nclasses = dict(zip(range(0, 7), (((data[data[' Usage']=='Training']['emotion'].value_counts()).sort_index())\/len(data[data[' Usage']=='Training']['emotion'])).tolist()))","dbb4ad65":"X = data.emotion\nkf = KFold(n_splits=6)\nfor train, test in kf.split(X):\n    print(\"%s %s\" % (train, test))","efb62b1a":"print(data)","1dcfded1":"# Function to parse data into right format\n# Output: Image in right shaped and normalized + labels\ndef parse_data(data):\n    image_array = np.zeros(shape=(len(data), 48, 48)) # 1\n    image_label = np.array(list(map(int, data['emotion'])))\n    \n    for i, row in enumerate(data.index):\n        image = np.fromstring(data.loc[row, ' pixels'], dtype=int, sep=' ')\n        image = np.reshape(image, (48, 48)) # 1\n        image_array[i] = image\n        \n    return image_array, image_label\n\n# Splitting the data into train, validation and testing set thanks to Usage column\ntrain_imgs, train_lbls = parse_data(data[data[\" Usage\"] == \"Training\"])\nval_imgs, val_lbls = parse_data(data[data[\" Usage\"] == \"PrivateTest\"])\ntest_imgs, test_lbls = parse_data(data[data[\" Usage\"] == \"PublicTest\"])","129aaaf2":"train_images = train_imgs.reshape((train_imgs.shape[0], 48, 48, 1))\ntrain_images = train_images.astype('float32')\/255\nval_images = val_imgs.reshape((val_imgs.shape[0], 48, 48, 1))\nval_images = val_images.astype('float32')\/255\ntest_images = test_imgs.reshape((test_imgs.shape[0], 48, 48, 1))\ntest_images = test_images.astype('float32')\/255\n","0502c21c":"print(\"train shape\", np.shape(train_imgs))\nprint(\"validation shape\", np.shape(val_imgs))\nprint(\"validatio shape\", np.shape(val_imgs))","871a1d35":"print(train_imgs)","4ce5347d":"# Building a MLP model based on LeNet architecture \nmodel_mlp = keras.Sequential()\nmodel_mlp.add(layers.Flatten(input_shape=(48, 48, 1)))\nmodel_mlp.add(layers.Dense(units=120, activation='relu'))\nmodel_mlp.add(layers.Dense(units=84, activation='relu'))\nmodel_mlp.add(layers.Dense(units=7, activation = 'softmax'))\nmodel_mlp.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])\nmodel_mlp.summary()","74b08cce":"# Training the model, and validating\nmodel_mlp.fit(train_imgs, train_lbls, \n          epochs=10, batch_size=32, \n          validation_data=(val_imgs, val_lbls), verbose=1)","b59774d4":"from keras.utils import to_categorical\ntrain_labels = to_categorical(train_lbls)\nval_labels = to_categorical(val_lbls)\ntest_labels = to_categorical(test_lbls)","77b1d0b2":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='sigmoid'))","af22495e":"model_cnn.compile(optimizer=keras.optimizers.Adam(lr=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])\nmodel_cnn.summary()","b6eba0c7":"history = model_cnn.fit(train_images, train_labels,\n                    validation_data=(val_images, val_labels),\n                    class_weight = classes,\n                    epochs=12,\n                    batch_size=512)","1ee883a1":"#Train accuracy and validation accuracy vs epoch graph\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","a7eae5b3":"test_prob = model_cnn.predict(test_images)\ntest_pred = np.argmax(test_prob, axis=1)\ntest_accuracy = np.mean(test_pred == test_lbls)\n\nprint(test_accuracy)","0b804295":"conf_mat = confusion_matrix(test_lbls, test_pred)\npd.DataFrame(conf_mat, columns=emotions.values(), index=emotions.values())","d8ee779d":"1. \u0423 \u0447\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0442\u0438\u043f\u0456\u0432 \u0448\u0430\u0440\u0456\u0432 \u0437\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043c\u0435\u0440\u0435\u0436?<br>\n\u0417\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0438\u0439 \u0448\u0430\u0440 \u0454 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u043c \u0431\u0443\u0434\u0456\u0432\u0435\u043b\u044c\u043d\u0438\u043c \u0431\u043b\u043e\u043a\u043e\u043c \u0421\u041d\u0421.\n\u0410\u0433\u0440\u0435\u0433\u0443\u044e\u0447\u0438\u0439 \u0448\u0430\u0440 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0443\u043f\u043e\u0432\u043e\u0433\u043e \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u043d\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0440\u043e\u0437\u043c\u0456\u0440\u0443 \u0443\u044f\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432 \u0456 \u043e\u0431\u0441\u044f\u0433\u0443 \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u044c \u0432 \u043c\u0435\u0440\u0435\u0436\u0456, \u0430 \u0442\u043e\u043c\u0443 \u0449\u0435 \u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044e \u043f\u0435\u0440\u0435\u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f.\n\u0428\u0430\u0440 \u0437\u0440\u0456\u0437\u0430\u043d\u0438\u0445 \u043b\u0456\u043d\u0456\u0439\u043d\u0438\u0445 \u0432\u0443\u0437\u043b\u0456\u0432 \u043f\u0456\u0434\u0441\u0438\u043b\u044e\u0454 \u043d\u0435\u043b\u0456\u043d\u0456\u0439\u043d\u0456 \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u043e\u0441\u0442\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0442\u044f \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u0456 \u043c\u0435\u0440\u0435\u0436\u0456 \u0432 \u0446\u0456\u043b\u043e\u043c\u0443, \u0437\u0430\u0447\u0456\u043f\u0430\u044e\u0447\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0438\u0432\u043d\u0456 \u043f\u043e\u043b\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0448\u0430\u0440\u0443.\n\u041d\u0435\u0439\u0440\u043e\u043d\u0438 \u0432  \u0448\u0430\u0440\u0456 \u043c\u0430\u044e\u0442\u044c \u0441\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044f \u0437 \u0443\u0441\u0456\u043c\u0430 \u0432\u043e\u0437\u0431\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u0448\u0430\u0440\u0443, \u044f\u043a \u0446\u0435 \u043c\u043e\u0436\u043d\u0430 \u0431\u0430\u0447\u0438\u0442\u0438 \u0432 \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u0435\u0440\u0435\u0436\u0430\u0445. \u0407\u0445 \u043f\u043e\u0440\u0443\u0448\u0435\u043d\u043d\u044f \u043f\u043e\u0442\u0456\u043c \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u043e \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u0438\u0445 \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f\u043c, \u0437\u0430 \u044f\u043a\u0438\u043c \u0441\u043b\u0456\u0434 \u0437\u043c\u0456\u0449\u0435\u043d\u043d\u044f \u0443\u043f\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u043e\u0441\u0442\u0456.\n\u0428\u0430\u0440 \u0432\u0442\u0440\u0430\u0442 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0454, \u044f\u043a \u0442\u0440\u0435\u043d\u0443\u0432\u0430\u043d\u043d\u044f \u0448\u0442\u0440\u0430\u0444\u0443\u0454 \u0432\u0456\u0434\u0445\u0438\u043b\u0435\u043d\u043d\u044f \u043c\u0456\u0436 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0443\u0432\u0430\u043d\u0438\u043c\u0438 \u0456 \u0441\u043f\u0440\u0430\u0432\u0436\u043d\u0456\u043c\u0438 \u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0456 \u0454, \u044f\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u043b\u044c\u043d\u0438\u043c \u0448\u0430\u0440\u043e\u043c. \u0414\u043b\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0437\u0430\u0432\u0434\u0430\u043d\u044c \u0432 \u043d\u044c\u043e\u043c\u0443 \u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0440\u0456\u0437\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0432\u0442\u0440\u0430\u0442 (\u043d\u0430\u0439\u0447\u0430\u0441\u0442\u0456\u0448\u0435 \u0446\u0435 softmax \u0456 sigmoid).\n2. \u042f\u043a\u0456 \u043e\u0441\u043d\u043e\u0432\u043d\u0456 \u0435\u0442\u0430\u043f\u0438 \u0442\u0438\u043f\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f?<br>\n\u0411\u0456\u0437\u043d\u0435\u0441-\u0430\u043d\u0430\u043b\u0456\u0437, \u0430\u043d\u0430\u043b\u0456\u0437 \u0456 \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u0438\u0445, \u043c\u043e\u0434\u0435\u043b\u044e\u0432\u0430\u043d\u043d\u044f, \u043e\u0446\u0456\u043d\u043a\u0430 \u0440\u0456\u0448\u0435\u043d\u043d\u044f, \u0432\u043f\u0440\u043e\u0432\u0430\u0434\u0436\u0435\u043d\u043d\u044f.","ab86c57d":"MLP model","d8495972":"CNN model"}}