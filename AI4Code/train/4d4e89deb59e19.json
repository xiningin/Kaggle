{"cell_type":{"81c4eed8":"code","3b150905":"code","816e0905":"code","ef2dcd85":"code","b76228d5":"code","17942142":"code","a047cc89":"code","1fde2b1e":"code","e1be377f":"code","af3754b1":"code","483fafc1":"code","0a2e0d87":"code","93755747":"code","b9db9e3f":"code","4d75ca28":"code","4b59b1a5":"markdown","3f7869ac":"markdown","3371421b":"markdown","5db82d25":"markdown","d1302274":"markdown","d399901f":"markdown","096eb781":"markdown"},"source":{"81c4eed8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport math\nfrom sklearn.metrics import roc_auc_score\nimport pickle\nfrom sklearn import preprocessing\nimport xgboost as xgb\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3b150905":"train_X = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/train_X.pkl\")\ntrain_y = pd.read_csv(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/train_y.csv\")","816e0905":"train_y.head()","ef2dcd85":"val_X = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/val_X.pkl\")\nval_y = pd.read_csv(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/val_y.csv\")","b76228d5":"test_df = pd.read_pickle(\"\/kaggle\/input\/ieee-pipeline-1-create-validation-set\/test_df.pkl\")\ntest_df.head()","17942142":"train_X = train_X.fillna(-999)\nval_X = val_X.fillna(-999)\ntest_df = test_df.fillna(-999)","a047cc89":"# Label Encoding\nfor f in train_X.columns:\n    if train_X[f].dtype=='object' or val_X[f].dtype=='object' or test_df[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(train_X[f].values) + list(val_X[f].values) + list(test_df[f].values))\n        train_X[f] = lbl.transform(list(train_X[f].values))\n        val_X[f] = lbl.transform(list(val_X[f].values))\n        test_df[f] = lbl.transform(list(test_df[f].values))","1fde2b1e":"def auc(x,y): \n    return roc_auc_score(x,y)\ndef print_score(m):\n    #res = [auc(m.predict_proba(train_X)[:,1], train_y), auc(m.predict_proba(val_X)[:,1], val_y)]  ## continuous not supported\n    res = [auc(m.predict(train_X), train_y), auc(m.predict(val_X), val_y)]\n    print(res)","e1be377f":"modelC = xgb.XGBClassifier(n_estimators=500,\n                        n_jobs=4,\n                        max_depth=9,\n                        learning_rate=0.05,\n                        subsample=0.9,\n                        colsample_bytree=0.9,\n                        missing=-999)","af3754b1":"modelC.fit(train_X, train_y)","483fafc1":"print_score(modelC)","0a2e0d87":"predsC = pd.Series(modelC.predict_proba(val_X)[:,1])","93755747":"test_predsC = pd.Series(modelC.predict_proba(test_df)[:,1])","b9db9e3f":"predsC.to_csv(\"predsC.csv\", index = False, header = True)\ntest_predsC.to_csv(\"test_predsC.csv\", index = False, header = True)","4d75ca28":"sample_submission = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv\")\nsample_submission['isFraud'] = modelC.predict_proba(test_df)[:,1]\nsample_submission.to_csv('simple_xgboost.csv', index=False)","4b59b1a5":"Previous kernel - https:\/\/www.kaggle.com\/priteshshrivastava\/ieee-pipeline-1-create-validation-set\n\nInput - Train & val, test CSVs\n\nOutput - Val & Test preds\n\nNext kernel - Meta model https:\/\/www.kaggle.com\/priteshshrivastava\/ieee-pipeline-3-stacking-with-meta-model","3f7869ac":"### Storing val & test pred","3371421b":"This one is based on Inversion's simple xgb kernel : https:\/\/www.kaggle.com\/inversion\/ieee-simple-xgboost\/output","5db82d25":"### Make predictions on validation AND test set","d1302274":"### Handling missing values & categorical variables","d399901f":"### Creating a submission file for the single model","096eb781":"### Defining function to calculate the evaluation metric"}}