{"cell_type":{"bfe64e20":"code","af13aab9":"code","89e870b9":"code","4f3fa71a":"code","4b5c64e8":"code","e537f14a":"code","b7566d36":"code","7bb1c324":"code","041f5851":"code","aee94477":"code","7179a26f":"code","1f79df90":"code","5c57a60a":"code","3555c38d":"code","0c505c91":"code","70a6f51b":"code","f4713140":"code","8fad2d77":"code","79674dfd":"code","c0ce71f0":"code","5f75bb2f":"code","b088c7d0":"code","397ade07":"code","3bbdb592":"code","0c13d02e":"code","76be6882":"code","84fcae22":"code","d31b4b06":"code","17b11035":"code","1623d527":"code","e82fcf42":"code","3642fce1":"code","ef21035f":"code","2e42f874":"code","bb0a33c1":"code","dd09bedc":"code","8292ef7d":"code","f37eaf6f":"code","f19f106a":"code","44e4e8ca":"code","f695c0d0":"code","3d4ffa70":"code","4cd10c04":"code","81045fab":"code","64a0f018":"code","e559fabb":"code","b1977cf6":"code","af84632a":"code","25f48bfe":"code","f75f1feb":"code","68ea3117":"code","093ec97a":"code","5364562d":"code","d9c12ab4":"code","76c95cbe":"markdown","84a48092":"markdown","16f1cd18":"markdown","1827d74e":"markdown","704c3b02":"markdown","a9dcf89d":"markdown","5b131a0f":"markdown","f2ab2703":"markdown","bf6e6a74":"markdown","d633af4d":"markdown","6afb323e":"markdown","0a2290f3":"markdown","ff6424ad":"markdown","19a8e82c":"markdown","15315b39":"markdown","5a0e02dc":"markdown","acc4edcd":"markdown","254c4606":"markdown","e8c6ef12":"markdown","744ecf71":"markdown","359eebc9":"markdown","4b70b66b":"markdown","28928ef6":"markdown","a0129a98":"markdown","2264532c":"markdown"},"source":{"bfe64e20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nplt.style.use ('fivethirtyeight')\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af13aab9":"data = pd.read_csv('..\/input\/stock-exchange-data\/indexData.csv')\ndata = data.set_index('Date')\ndata","89e870b9":"data.head()\ndata.tail(5)","4f3fa71a":"print(data.columns)\ndata.shape\nprint(data[:])\n","4b5c64e8":"data = data.dropna()\ndata.Index.unique()","e537f14a":"index = data.groupby(data.Index)\nNYA = index.get_group(\"NYA\")             #  NY stock market data\nGSPTSE = index.get_group(\"GSPTSE\")       # Toronto Stock Market data\n","b7566d36":"data_nya = NYA.filter(['Close'])\ndataset_nya = data_nya.values  # total data NYA stock market \ntraining_data_nya_len = math.ceil(len(dataset_nya) * .8) # take 80% of the total data for training so the rest 20% will be for testing\ntesting_data_nya_len = dataset_nya[training_data_nya_len:]  # takes 20% of data for testing\ntesting_data_nya_len.shape\n","7bb1c324":"data_nya.tail(5)","041f5851":"data_nya.shape","aee94477":"data_gsp = GSPTSE.filter(['Close'])\ndataset_gsp = data_gsp.values     # total data Toronto stock market\ntraining_data_gsp_len = math.ceil(len(dataset_gsp) * .8)  #take 80% of the total data for training so the rest 20% will be for testing\ntesting_data_gsp_len = dataset_gsp[training_data_gsp_len:]    # takes 20% of data for testing\n","7179a26f":"print(testing_data_nya_len)\ntesting_data_nya_len.shape","1f79df90":"print(dataset_nya)\nprint(training_data_nya_len)\nprint(dataset_nya[training_data_nya_len:])","5c57a60a":"data_nya.shape\ndata_nya","3555c38d":"from matplotlib import pyplot as plt\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = NYA.index, y = NYA.High,\n                    mode='lines',\n                    name='High',\n                    marker_color = '#2CA02C',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = NYA.index, y = NYA.Low,\n                    mode='lines',\n                    name='Low',\n                    marker_color = '#D62728',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = NYA.index, y = NYA.Open,\n                    mode='lines',\n                    name='Open',\n                    marker_color = '#FF7F0E',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = NYA.index, y = NYA.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\n\nfig.update_layout(\n    title='1. Price history of New York Stock Exchange',\n    titlefont_size = 28,\n    \n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Price in USD ($)',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","0c505c91":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = GSPTSE.index, y = GSPTSE.High,\n                    mode='lines',\n                    name='High',\n                    marker_color = '#2CA02C',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = GSPTSE.index, y = GSPTSE.Low,\n                    mode='lines',\n                    name='Low',\n                    marker_color = '#D62728',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = GSPTSE.index, y = GSPTSE.Open,\n                    mode='lines',\n                    name='Open',\n                    marker_color = '#FF7F0E',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = GSPTSE.index, y = GSPTSE.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\n\nfig.update_layout(\n    title='Price history of Toronto Stock Exchange',\n    titlefont_size = 26,\n    \n    xaxis = dict(\n        title='Year',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Price in CAD (CA$)',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","70a6f51b":"plt.figure(figsize=(16,8))\nplt.plot( GSPTSE.index, GSPTSE.High,)\nplt.title(\"Toronto Stock Exchange\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Exchange Rate\")\nplt.show()","f4713140":"scaler_nya = MinMaxScaler(feature_range=(0,1))\nscaled_data_nya = scaler_nya.fit_transform(dataset_nya)\n","8fad2d77":"scaler_gsp = MinMaxScaler(feature_range=(0,1))\nscaled_data_gsp = scaler_gsp.fit_transform(dataset_gsp)","79674dfd":"print(dataset_nya.shape,  scaled_data_nya.shape)\nscaled_data_nya[0:5, :]","c0ce71f0":"dataset_nya, scaled_data_nya","5f75bb2f":"train_data_nya = scaled_data_nya[0:training_data_nya_len, :]\n","b088c7d0":"train_data_gsp = scaled_data_gsp[0:training_data_gsp_len, :]","397ade07":"x_train_nya = []\ny_train_nya = []\n","3bbdb592":"x_train_gsp = []\ny_train_gsp = []","0c13d02e":"print(train_data_nya.shape)\nprint(train_data_nya[0:1,0])\nprint(train_data_nya[60,0])\nprint(scaled_data_nya.shape)\nprint(train_data_nya[0:60, 0])\nprint(train_data_nya[60, 0])\nprint(range(60, len(train_data_nya)))\n","76be6882":"for i in range(60, len(train_data_nya)):\n    x_train_nya.append(train_data_nya[i-60:i, 0])\n    y_train_nya.append(train_data_nya[i, 0])\n    if i <= 61:\n        print(x_train_nya)\n        print(y_train_nya)\n        print()","84fcae22":"y_train_nya[0]\n","d31b4b06":"for i in range(60, len(train_data_gsp)):\n    x_train_gsp.append(train_data_gsp[i-60:i, 0])\n    y_train_gsp.append(train_data_gsp[i, 0])\n    if i <= 61:\n        print(x_train_gsp)\n        print(y_train_gsp)\n        print()","17b11035":"x_train_nya, y_train_nya = np.array(x_train_nya), np.array(y_train_nya)\nx_train_nya = np.reshape(x_train_nya, (x_train_nya.shape[0], x_train_nya.shape[1],1))\nx_train_nya.shape","1623d527":"x_train_nya[0]","e82fcf42":"x_train_gsp, y_train_gsp = np.array(x_train_gsp), np.array(y_train_gsp)\nx_train_gsp = np.reshape(x_train_gsp, (x_train_gsp.shape[0], x_train_gsp.shape[1],1))\nx_train_gsp.shape","3642fce1":"x_train_nya[0][0]","ef21035f":"def modelo(x_train, y_train):\n    model = Sequential()\n    model.add(LSTM(50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\n    model.add(LSTM(50, return_sequences = False))\n    model.add(Dense(25))\n    model.add(Dense(1))\n    model.compile(optimizer = 'adam', loss = 'mean_squared_error')\n    model.fit(x_train, y_train, batch_size = 1, epochs = 1)\n    return model","2e42f874":"def modelo_2(x_train, y_train, activation='relu'):\n    model = Sequential()\n    model.add(LSTM(50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\n    model.add(LSTM(50, return_sequences = False))\n    model.add(Dense(25, activation=\"relu\"))\n    model.add(Dense(1))\n    model.compile(optimizer = 'adam', loss = 'mean_squared_error')\n    #model.fit(x_train, y_train, batch_size = 1, epochs = 1)\n    history = model.fit(\n    x_train,y_train,epochs=1)\n    return model","bb0a33c1":"modelo_nya = modelo(x_train_nya, y_train_nya)","dd09bedc":"modelo_gsp = modelo(x_train_gsp, y_train_gsp)","8292ef7d":"modelo_gsp.summary()\nmodelo_gsp.save('.\/toronto_stock_prediction_model.h5')","f37eaf6f":"modelo_nya.summary()\nmodelo_nya.save('\/kaggle\/working\/ny_stock_prediction_model.h5')","f19f106a":"test_data_nya = scaled_data_nya[training_data_nya_len-60:, :]\nx_test_nya = []\ny_test_nya = dataset_nya[training_data_nya_len:, :]\n\n","44e4e8ca":"test_data_gsp = scaled_data_gsp[training_data_gsp_len-60:, :]\nx_test_gsp = []\ny_test_gsp = dataset_gsp[training_data_gsp_len:, :]","f695c0d0":"y_test_nya.shape","3d4ffa70":"for i in range (60, len(test_data_nya)):\n    x_test_nya.append(test_data_nya[i - 60:i, 0])\n\n","4cd10c04":"for i in range (60, len(test_data_gsp)):\n    x_test_gsp.append(test_data_gsp[i - 60:i, 0])","81045fab":"x_test_nya = np.array(x_test_nya)\nx_test_nya = np.reshape(x_test_nya, (x_test_nya.shape[0], x_test_nya.shape[1], 1))\n","64a0f018":"x_test_gsp = np.array(x_test_gsp)\nx_test_gsp = np.reshape(x_test_gsp, (x_test_gsp.shape[0], x_test_gsp.shape[1], 1))","e559fabb":"x_test_nya.shape","b1977cf6":"predictions_nya = modelo_nya.predict(x_test_nya)\npredictions_nya = scaler_nya.inverse_transform(predictions_nya)\n","af84632a":"predictions_gsp = modelo_gsp.predict(x_test_gsp)\npredictions_gsp = scaler_gsp.inverse_transform(predictions_gsp)","25f48bfe":"print(\"Prediction \", predictions_nya)\nprint(\"Label \", y_test_nya)\nrsme_nya = np.sqrt(np.mean(predictions_nya - y_test_nya) ** 2)\nrsme_gsp = np.sqrt(np.mean(predictions_gsp - y_test_gsp) ** 2)\nprint(predictions_nya.shape)","f75f1feb":"train_nya = data_nya[:training_data_nya_len]\nvalid_nya = data_nya[training_data_nya_len:]\nvalid_nya['Predictions'] = predictions_nya\n","68ea3117":"print(\"Click and drag on the plot to zoom in, you can reset using the top right option\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = train_nya.index, y = train_nya.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\nfig.add_trace(go.Scatter(x = valid_nya.index, y = valid_nya.Close,\n                    mode='lines',\n                    name='Val',\n                    marker_color = '#FF7F0E'))\nfig.add_trace(go.Scatter(x = valid_nya.index, y = valid_nya.Predictions,\n                    mode='lines',\n                    name='Predictions',\n                    marker_color = '#2CA02C'))\n\nfig.update_layout(\n    title='5. Model of NYA Stock Exchange',\n    titlefont_size = 28,\n    hovermode = 'x',\n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Close price in USD (US$)',\n        titlefont_size=16,\n        tickfont_size=14),\n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","093ec97a":"train_gsp = data_gsp[:training_data_gsp_len]\nvalid_gsp = data_gsp[training_data_gsp_len:]\nvalid_gsp['Predictions'] = predictions_gsp","5364562d":"print(\"Click and drag on the plot to zoom in, you can reset using the top right option\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = train_gsp.index, y = train_gsp.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\nfig.add_trace(go.Scatter(x = valid_gsp.index, y = valid_gsp.Close,\n                    mode='lines',\n                    name='Val',\n                    marker_color = '#FF7F0E'))\nfig.add_trace(go.Scatter(x = valid_gsp.index, y = valid_gsp.Predictions,\n                    mode='lines',\n                    name='Predictions',\n                    marker_color = '#2CA02C'))\n\nfig.update_layout(\n    title='5. Model of Toronto Stock Exchange',\n    titlefont_size = 28,\n    hovermode = 'x',\n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Close price in CAD (CA$)',\n        titlefont_size=16,\n        tickfont_size=14),\n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","d9c12ab4":"#my_submission = pd.DataFrame({'Id': data.Index, 'Close': predictions_nya})\n# you could use any filename. We choose submission here\n#my_submission.to_csv('submission.csv', index=False)","76c95cbe":"<a name='2'><\/a>\n##  Training Model NYA : \n <a name='2-1'><\/a>","84a48092":"<a name='2'><\/a>\n##  Selecting Testing data : \nFrom training_data_nya ( 20% of total data )  I took groups of 60 values for x_training and the next value ( one value) for y_training\/\n at then end x_train_nya  shape will be (11098,60,1 ) and y_train_nya  shape (  11098, )\n <a name='2-1'><\/a>***Selecting x_test   ,y_test  Testing Data***","16f1cd18":"***Training Model Toronto***","1827d74e":"<a name='2'><\/a>\n## 2 - Masking\n\nThere are two types of masks that are useful when building your Transformer network: the *padding mask* and the *look-ahead mask*. Both help the softmax computation give the appropriate weights to the words in your input sentence. \n\n<a name='2-1'><\/a>\n### 2.1 - Padding Mask","704c3b02":"***Calculate training and testing len***","a9dcf89d":"***Defining the Model***","5b131a0f":"***Second model with some changes in Network's parameters***","f2ab2703":"***Defining global Training records***","bf6e6a74":"***Training Data Toronto Stock Market***","d633af4d":"***Graph data and configuration details***","6afb323e":"***Converting test data in to array and then reshaping the array***","0a2290f3":"***Training data NYA Stock Market,\nconverting x_training,  y_training in to np arrays***","ff6424ad":"<a name='2'><\/a>\n##  After prediction : \nThe prediction process generate an array of size = y_test_nya(2789, 1 )\n <a name='2-1'><\/a>","19a8e82c":"<a name='2'><\/a>\n##  Selecting Training data : \nFrom training_data_nya  I took groups of 60 values for x_training and the next value ( one value) for y_training\/\n at then end x_train_nya  shape will be (11098,60,1 ) and y_train_nya  shape (  11098, )\n <a name='2-1'><\/a>","15315b39":"***From training_dta_gsp  I took groups of 60 values for x_training and the next value ( one value) for y_training***","5a0e02dc":"***Declaring x_training  and  y_training  vectors that will save trainign data***","acc4edcd":"***Loading the Data,   \nDate will be the Index***","254c4606":"***Use 60 Window to generate x_test_nya***","e8c6ef12":"***Select \"Close\" data from Toronto Stock Market***","744ecf71":"***Analyzing Data***","359eebc9":"***Select \"Close\" data from NYA Stock Market,\nTraining data is 80% of total NYA data,\nTesting data is 20% of total NYA data***","4b70b66b":"***Separating Stock Market Data***","28928ef6":"***Scaler numbers will convert them to values between 0  and  1***","a0129a98":"## Predicting the model:\nPredicting the model using x,y  testing data,and then inverse scalar to change data from 0,1 format to the normal value","2264532c":"***Analyzing data structure***"}}