{"cell_type":{"4094d3b2":"code","aa6b143e":"code","38e7ca5d":"code","81bed776":"code","c05b62e0":"code","34566c74":"code","1a591658":"code","7d0c08ba":"code","b3f9b527":"code","ec5f82a5":"code","f832ddd5":"code","322cbe87":"code","f2af2309":"code","1cebe314":"code","e63680d9":"code","6f5bfabe":"code","ed638bdd":"code","8cd62a3d":"code","9d635166":"code","80959e7f":"code","46db2549":"code","39635074":"code","aa8f8fb7":"code","7d86437d":"code","32c50d79":"code","80f304a1":"code","bdb4a35b":"code","bc517ceb":"code","5a8833f1":"code","c3f5f322":"code","572aa323":"code","61588061":"code","f0bbc7ca":"code","bab3a5f0":"code","a524ff34":"code","5fd402de":"code","c70ab6bb":"code","2662c48d":"code","2a71b3ea":"code","287bcf04":"code","caf6b400":"code","406cc162":"code","ee0336d5":"markdown","5efaff10":"markdown","b67ac87c":"markdown","3e0aa752":"markdown"},"source":{"4094d3b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#sk-learn\nfrom sklearn.preprocessing import Imputer \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n#plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#WordCloud\nfrom wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aa6b143e":"data=pd.read_csv(\"..\/input\/countries of the world.csv\")","38e7ca5d":"data.head()  #dataya k\u0131saca g\u00f6z atmam\u0131z i\u00e7in bize ilk 5 sat\u0131r\u0131 g\u00f6r\u00fcnt\u00fcler.","81bed776":"data.tail(10) #datan\u0131n farkl\u0131 sat\u0131rlar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in bize son 5 sat\u0131r\u0131 g\u00f6r\u00fcnt\u00fcler.","c05b62e0":"data.info()  #data featurelar\u0131 hakk\u0131nda bize detayl\u0131 bilgi verir.\n             #featurelardaki kay\u0131t say\u0131lar\u0131n\u0131 verir.\n             #Bellek kullan\u0131m\u0131 hakk\u0131nda bilgiler verir.","34566c74":"data.columns = data.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '').str.replace('.', '').str.replace('%','').str.replace('\/','')","1a591658":"#float ve\/veya int tipine \u00e7evirebilmek i\u00e7in \",\" ler \".\" ile de\u011fi\u015ftirildi.\n\ndata[\"coastline_coastarea_ratio\"]=data[\"coastline_coastarea_ratio\"].str.replace(',','.')\ndata[\"pop_density_per_sq_mi\"]=data[\"pop_density_per_sq_mi\"].str.replace(',','.')\ndata[\"net_migration\"]=data[\"net_migration\"].str.replace(',','.')\ndata[\"infant_mortality_per_1000_births\"]=data[\"infant_mortality_per_1000_births\"].str.replace(',','.')\ndata[\"literacy_\"]=data[\"literacy_\"].str.replace(',','.')\ndata[\"phones_per_1000\"]=data[\"phones_per_1000\"].str.replace(',','.')\ndata[\"arable_\"]=data[\"arable_\"].str.replace(',','.')\ndata[\"crops_\"]=data[\"crops_\"].str.replace(',','.')\ndata[\"other_\"]=data[\"other_\"].str.replace(',','.')\ndata[\"climate\"]=data[\"climate\"].str.replace(',','.')\ndata[\"birthrate\"]=data[\"birthrate\"].str.replace(',','.')\ndata[\"deathrate\"]=data[\"deathrate\"].str.replace(',','.')\ndata[\"agriculture\"]=data[\"agriculture\"].str.replace(',','.')\ndata[\"industry\"]=data[\"industry\"].str.replace(',','.')\ndata[\"service\"]=data[\"service\"].str.replace(',','.')","7d0c08ba":"#ust sectionda temizlenen verilerde tip d\u00f6n\u00fc\u015f\u00fcm\u00fc uyguland\u0131.\n\ndata[\"coastline_coastarea_ratio\"]=data[\"coastline_coastarea_ratio\"].astype(float)\ndata[\"pop_density_per_sq_mi\"]=data[\"pop_density_per_sq_mi\"].astype(float)\ndata[\"net_migration\"]=data[\"net_migration\"].astype(float)\ndata[\"infant_mortality_per_1000_births\"]=data[\"infant_mortality_per_1000_births\"].astype(float)\ndata[\"literacy_\"]=data[\"literacy_\"].astype(float)\ndata[\"phones_per_1000\"]=data[\"phones_per_1000\"].astype(float)\ndata[\"arable_\"]=data[\"arable_\"].astype(float)\ndata[\"crops_\"]=data[\"crops_\"].astype(float)\ndata[\"other_\"]=data[\"other_\"].astype(float)\ndata[\"climate\"]=data[\"climate\"].astype(float)\ndata[\"birthrate\"]=data[\"birthrate\"].astype(float)\ndata[\"deathrate\"]=data[\"deathrate\"].astype(float)\ndata[\"agriculture\"]=data[\"agriculture\"].astype(float)\ndata[\"industry\"]=data[\"industry\"].astype(float)\ndata[\"service\"]=data[\"service\"].astype(float)","b3f9b527":"def eksik_degerler(data): \n    bos_deger_toplami = data.isnull().sum()\n    bos_deger_yuzdesi= 100 * data.isnull().sum()\/len(data)\n    bos_deger_tablosu = pd.concat([bos_deger_toplami, bos_deger_yuzdesi], axis=1)\n    bos_deger_tab_yeni_isim = bos_deger_tablosu.rename(\n    columns = {0 : 'Eksik De\u011ferler', 1 : '% De\u011feri'})\n    return bos_deger_tab_yeni_isim\neksik_degerler(data)","ec5f82a5":"#other adl\u0131 sat\u0131r\u0131n i\u015fimize yaramayaca\u011f\u0131n\u0131 d\u00fc\u015f\u00fcnd\u00fck ve u\u00e7urduk.\ndata.drop('other_',axis=1, inplace=True)","f832ddd5":"# climate isimli featuredaki bilgiler 1\/1,5\/2\/2,5\/3\/4 \u015feklinde oldu\u011fu i\u00e7in ve \n# bu de\u011ferlerin ortalamas\u0131 yakla\u015f\u0131k 2 oldu\u011fu i\u00e7in ve bu de\u011ferler s\u0131n\u0131fland\u0131r\u0131c\u0131 de\u011ferler oldu\u011fundan\n# NaN de\u011ferler 2 ile dolduruldu\ndata['climate'] = data['climate'].fillna(2)\n#data.climate.value_counts()\n#data.climate.unique()","322cbe87":"#asag\u0131daki degerlerin NaN oranlar\u0131 yuksek oldugu icin ortalama ile dolduruldu.\n#cok yuksek oranlar\u0131 yok fakat bizim verisetimiz icin en yuksek olanlar\u0131 sectik.\n\n# agriculture degeri ortalama ile dolduruldu\ndata['agriculture'] = data['agriculture'].fillna(data.agriculture.mean())\n# industry degerleri ortalama ile dolduruldu\ndata.industry=data.industry.fillna(data.industry.mean())\n# servis degerleri ortalama ile dolduruldu\ndata.service= data.service.fillna(data.service.mean())\n# net migration degerleri ortalama ile dolduruldu\ndata.literacy_=data.literacy_.fillna(data.literacy_.mean())","f2af2309":"#diger featurelar\u0131n NaN degerleri cok az oldu\u011fu i\u00e7in onlar\u0131 0 ile doldurduk\ndata.fillna(data.mean(),inplace=True)","1cebe314":"# \u00fclkelerin okur yazarl\u0131k oran\u0131na g\u00f6re o \u00fclke geli\u015fime 1=Geli\u015fime a\u00e7\u0131k\/0=Geli\u015fime a\u00e7\u0131k de\u011fil \u015feklinde yeni feature yarat\u0131ld\u0131.\nlimit=data.literacy_.mean()\ndata[\"evaluation\"]=[\"1\" if i>limit else \"0\" for i in data.literacy_]\n#limit","e63680d9":"data.describe()  #data ile ilgili istatistiksel verileri g\u00f6r\u00fcnt\u00fcler.\n                 #toplam veri say\u0131s\u0131,ortalama,standart sapma,minumum de\u011fer,maximum de\u011fer,\n                 #1.\u00c7eyrek,Medyan ve 3.\u00c7eyrek bilgilerini g\u00f6sterir.","6f5bfabe":"data.shape   #datan\u0131n ka\u00e7 sat\u0131r ve s\u00fctundan olu\u015ftu\u011funu g\u00f6sterir. ","ed638bdd":"data.columns #data s\u00fctunlar\u0131n\u0131 g\u00f6r\u00fcnt\u00fclemek i\u00e7in kullan\u0131r\u0131z.","8cd62a3d":"data.dtypes #featurelar\u0131n data tiplerini g\u00f6r\u00fcnt\u00fcler.","9d635166":"data.corr()","80959e7f":"#Yukar\u0131da datam\u0131za ait outleir de\u011ferleri g\u00f6rmek i\u00e7in bir boxplot \u00e7izdirdik.\n#Bu boxplot ta 2 numaral\u0131 s\u0131n\u0131fta \u00e7ok yo\u011fun olarak outlier oldu\u011funu g\u00f6r\u00fcyoruz.\n#Bu outlier de\u011ferler bizim datam\u0131z\u0131n do\u011frulu\u011funu bozabilir.\n#E\u011fer daha iyi bir sonu\u00e7 elde etmek istiyorsak outlier de\u011ferlerimizi daha d\u00fc\u015f\u00fck seviyeye \u00e7ekecek \u015fekilde ayarlamam\u0131z gerekir.","46db2549":"# Seaborn Correlation Heatmap\nf,ax=plt.subplots(figsize=(20,20))\nsns.heatmap(data.corr() , annot=True ,linewidths=.5,fmt=\".2f\")\nplt.title(\"Countries of the World\")\nplt.show()","39635074":"#BoxPlot\nsns.boxplot(x=data['gdp_$_per_capita'])","aa8f8fb7":"#BoxPlot\nprint(data.boxplot(column=\"gdp_$_per_capita\",by=\"climate\"))","7d86437d":"#WordCloud\n# Hangi \u00fclkelerden verilerden yo\u011fun bulundu\u011funu g\u00f6r\u00fcnt\u00fclemek isteyebiliriz.\nplt.subplots(figsize=(10,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(data[\"country\"]))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","32c50d79":"#Min-Max Normalization\n#Formule : x-min(x) \/ max(x)-min(x)\ndata[\"new_gdp_per_capita\"]=(data[\"gdp_$_per_capita\"]-min(data[\"gdp_$_per_capita\"]))\/((max(data[\"gdp_$_per_capita\"]))-(min(data[\"gdp_$_per_capita\"])))\ndata[\"new_phones_per_1000\"]=((data[\"phones_per_1000\"])-(min(data[\"phones_per_1000\"])))\/((max(data[\"phones_per_1000\"]))-(min(data[\"phones_per_1000\"])))","80f304a1":"#Line Plot\ndata[\"new_gdp_per_capita\"].plot(kind=\"line\",color=\"blue\",linestyle=\":\",label=\"GDP $ Per Capita\",grid=True,alpha=0.8,figsize=(20,8))\ndata[\"new_phones_per_1000\"].plot(kind=\"line\",color=\"red\",linestyle=\":\",label=\"Phones Per 1000\",grid=True,alpha=0.8,figsize=(20,8))\nplt.legend()\nplt.title(\"DATA OF GDP PER CAPITA AND PHONES PER 1000\",size=15,color=\"blue\")\nplt.show()","bdb4a35b":"#Scatter Plot\ndata.plot(kind=\"scatter\",x=\"new_gdp_per_capita\",y=\"new_phones_per_1000\",color=\"red\",grid=True,linestyle=\"-\",figsize=(20,8))\nplt.title(\"GDP PER CAPITA AND PHONES PER 1000\",size=15,color=\"red\")\nplt.xlabel(\"GDP PER CAPITA\",color=\"red\",size=12)\nplt.ylabel(\"PHONES PER 1000\",color=\"red\",size=12)\nplt.show()","bc517ceb":"#Histogram\ndata[\"birthrate\"].plot(kind=\"hist\",color=\"orange\",bins=30,grid=True,alpha=0.4,label=\"Birthrate\",figsize=(20,8))\nplt.legend()\nplt.xlabel(\"Birthrate\",color=\"brown\",size=12)\nplt.ylabel(\"Frequency\",color=\"brown\",size=12)\nplt.title(\"Birthrate Distribution\")\nplt.show()","5a8833f1":"data.head()","c3f5f322":"from sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn import model_selection\n\n# E\u011fitim i\u00e7in ilgili \u00f6znitlelik de\u011ferlerini se\u00e7\nX = data.iloc[:,6:11].values\n\n# S\u0131n\u0131fland\u0131rma \u00f6znitelik de\u011ferlerini se\u00e7\nY = data.evaluation.values","572aa323":"# E\u011fitim ve do\u011frulama veri k\u00fcmelerinin ayr\u0131\u015ft\u0131r\u0131lmas\u0131\nvalidation_size = 0.20\nseed = 7\nX_train,X_validation,Y_train,Y_validation=model_selection.train_test_split(X,Y,test_size=validation_size,random_state=seed)","61588061":"# Naive Bayes modelini olu\u015fturuyoruz.\nfrom sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()","f0bbc7ca":"# NB modelinin K-katlamal\u0131 \u00e7apraz do\u011frulama ile ACC de\u011ferinin hesaplanmas\u0131\nscoring = 'accuracy'\nkfold = model_selection.KFold(n_splits=10, random_state=seed)\ncv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)","bab3a5f0":"cv_results","a524ff34":"msg = \"%f (%f)\" % (cv_results.mean(), cv_results.std())\nmsg","5fd402de":"# Model ile ilgili bilgileri g\u00f6r\u00fcnt\u00fcl\u00fcyoruz.\n# Precision , Recall , F1-score , Karma\u015f\u0131kl\u0131k matrisi de\u011ferlerini g\u00f6r\u00fcyoruz.\nfrom time import time\nimport logging\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n\n# Summary of the predictions made by the classifier\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n# Accuracy score\nfrom sklearn.metrics import accuracy_score\nprint(\"ACC: \",accuracy_score(y_pred,y_test))","c70ab6bb":"# E\u011fitim i\u00e7in X ve Y de\u011ferlerini ald\u0131k.\nY = data[\"new_phones_per_1000\"].values\nY=Y.reshape(-1,1)\nX = data[\"new_gdp_per_capita\"].values\nX=X.reshape(-1,1)\n#X\n#Y","2662c48d":"# Test de\u011ferlerini,oran\u0131n\u0131 belirliyoruz yani datam\u0131z\u0131 ay\u0131r\u0131yoruz.\nfrom sklearn.model_selection import train_test_split  \nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=0)  ","2a71b3ea":"# E\u011fitim i\u015flemini ger\u00e7ekle\u015ftiriyoruz.\nfrom sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X_train, y_train)  ","287bcf04":"# Modelimiz hakk\u0131ndaki baz\u0131 bilgiler.\nprint(\"Kesim noktas\u0131:\", model.intercept_)  \nprint(\"E\u011fim:\", model.coef_)\nprint(X_test)\ny_pred = model.predict(X_test) ","caf6b400":"# Modelimize b\u00fct\u00fcn de\u011ferlerinin en yak\u0131n\u0131ndan ge\u00e7en line'\u0131 \u00e7izdiriyoruz.\nplt.scatter(X_train, y_train, color = 'red')\nmodelin_tahmin_ettigi_y = model.predict(X_train)\n#plt.scatter(X_train, modelin_tahmin_ettigi_y, color = 'blue')\nplt.plot(X_train, modelin_tahmin_ettigi_y, color = 'aqua')\nplt.title('Phones Per 1000 - Gdp Per Capita')\nplt.xlabel(\"Gdp Per Capita\")\nplt.ylabel(\"Phones Per 1000\")\nplt.show()","406cc162":"# E\u011fiti\u011fimiz modelin sonu\u00e7lar\u0131n\u0131 g\u00f6r\u00fcyoruz.\n# Bunun i\u00e7in En k\u00fc\u00e7\u00fck kareler y\u00f6ntemi ve K\u00f6k ortalama kare hatas\u0131 y\u00f6ntemlerini kullan\u0131yoruz.\n# Burada modelimiz baya iyi sonu\u00e7 vermi\u015f gibi duruyor \u00e7\u00fcnk\u00fc modelimizin MSE de\u011feri \u00e7ok d\u00fc\u015f\u00fck.\nfrom sklearn import metrics   \nprint('Mean Squared Error (MSE):', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error (RMSE):', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","ee0336d5":"> **DATA CLEANING**","5efaff10":"> **LINEAR REGRESSION**","b67ac87c":"**<h1>Model Training<h1>**","3e0aa752":"> **NAIVE BAYES**"}}