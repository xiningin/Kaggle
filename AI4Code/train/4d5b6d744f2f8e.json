{"cell_type":{"6f3abbd5":"code","13c8e78d":"code","60fe6ca2":"code","f8edb04e":"code","a7f80e20":"code","427155fc":"code","d0a57eb5":"code","133a679f":"code","96e6f968":"code","091cfb6f":"markdown"},"source":{"6f3abbd5":"import warnings\nwarnings.simplefilter('ignore')\n\nimport gc\n\nimport numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\nfrom tqdm.notebook import tqdm\n\nimport joblib\nimport lightgbm as lgb","13c8e78d":"lgb_model_0 = joblib.load('..\/input\/ubiquant-lightgbm-5folds\/lgb_0.pkl')\nlgb_model_1 = joblib.load('..\/input\/ubiquant-lightgbm-5folds\/lgb_1.pkl')\nlgb_model_2 = joblib.load('..\/input\/ubiquant-lightgbm-5folds\/lgb_2.pkl')\nlgb_model_3 = joblib.load('..\/input\/ubiquant-lightgbm-5folds\/lgb_3.pkl')\nlgb_model_4 = joblib.load('..\/input\/ubiquant-lightgbm-5folds\/lgb_4.pkl')","60fe6ca2":"lgb_0 = joblib.load('..\/input\/lightgbm-5folds-baseline\/lgb_0.pkl')\nlgb_1 = joblib.load('..\/input\/lightgbm-5folds-baseline\/lgb_1.pkl')\nlgb_2 = joblib.load('..\/input\/lightgbm-5folds-baseline\/lgb_2.pkl')\nlgb_3 = joblib.load('..\/input\/lightgbm-5folds-baseline\/lgb_3.pkl')\nlgb_4 = joblib.load('..\/input\/lightgbm-5folds-baseline\/lgb_4.pkl')","f8edb04e":"from keras.models import load_model\nnn0 = load_model('..\/input\/ubiquant-nn-training\/nn_0.h5')\nnn1 = load_model('..\/input\/ubiquant-nn-training\/nn_1.h5')\nnn2 = load_model('..\/input\/ubiquant-nn-training\/nn_2.h5')\nnn3 = load_model('..\/input\/ubiquant-nn-training\/nn_3.h5')\nnn4 = load_model('..\/input\/ubiquant-nn-training\/nn_4.h5')","a7f80e20":"nn_0 = load_model('..\/input\/ump-nn-model-zscore-logcosh\/nn_0.h5')\nnn_1 = load_model('..\/input\/ump-nn-model-zscore-logcosh\/nn_1.h5')\nnn_2 = load_model('..\/input\/ump-nn-model-zscore-logcosh\/nn_2.h5')\nnn_3 = load_model('..\/input\/ump-nn-model-zscore-logcosh\/nn_3.h5')\nnn_4 = load_model('..\/input\/ump-nn-model-zscore-logcosh\/nn_4.h5')","427155fc":"from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, scale\nimport pandas as pd\ntest = pd.read_csv('..\/input\/ubiquant-market-prediction\/example_test.csv')\nscaler = MinMaxScaler(feature_range=(-1, 1))  \n \nfeatures_to_consider = test.drop(['row_id','time_id','investment_id'],axis=1).columns\n\nscaler.fit_transform(test[features_to_consider].values)   ","d0a57eb5":"import ubiquant\nenv = ubiquant.make_env()  \niter_test = env.iter_test()","133a679f":"for (test_df, sample_prediction_df) in iter_test:\n    test_df.drop(['row_id'], axis=1, inplace=True)\n    tt = scaler.transform(test_df[features_to_consider].values)\n    ss = scale(test_df[features_to_consider].values)\n    pred_nn0 = nn0.predict([test_df['investment_id'],tt]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn1 = nn1.predict([test_df['investment_id'],tt]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn2 = nn2.predict([test_df['investment_id'],tt]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn3 = nn3.predict([test_df['investment_id'],tt]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn4 = nn4.predict([test_df['investment_id'],tt]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    \n    pred_nn_0 = nn_0.predict([test_df['investment_id'],ss]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn_1 = nn_1.predict([test_df['investment_id'],ss]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn_2 = nn_2.predict([test_df['investment_id'],ss]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn_3 = nn_3.predict([test_df['investment_id'],ss]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    pred_nn_4 = nn_4.predict([test_df['investment_id'],ss]).reshape(1,-1)[0].clip(-1.2e2,1.2e2)\/100\n    \n    pred_0 = lgb_model_0.predict(test_df)\n    pred_1 = lgb_model_1.predict(test_df)\n    pred_2 = lgb_model_2.predict(test_df)\n    pred_3 = lgb_model_3.predict(test_df)\n    pred_4 = lgb_model_4.predict(test_df)\n    \n    pred_lgb0 = lgb_0.predict(test_df)\n    pred_lgb1 = lgb_1.predict(test_df)\n    pred_lgb2 = lgb_2.predict(test_df)\n    pred_lgb3 = lgb_3.predict(test_df)\n    pred_lgb4 = lgb_4.predict(test_df)\n    \n    pred_lgb = (pred_0 + pred_1 + pred_2 + pred_3 + pred_4 + pred_lgb0 + pred_lgb1 + pred_lgb2 + pred_lgb3 + pred_lgb4) \/ 10\n    pred_nn = (pred_nn0 + pred_nn1 + pred_nn2 + pred_nn3 + pred_nn4 + pred_nn_0 + pred_nn_1 + pred_nn_2 + pred_nn_3 + pred_nn_4) \/ 10\n    sample_prediction_df['target'] = (pred_lgb+pred_nn)\/2\n    env.predict(sample_prediction_df) ","96e6f968":"sample_prediction_df","091cfb6f":"#### LGBM from https:\/\/www.kaggle.com\/hengzheng\/lightgbm-5folds-baseline\n#### NN from https:\/\/www.kaggle.com\/leolu1998\/ubiquant-nn-baseline-train-infer"}}