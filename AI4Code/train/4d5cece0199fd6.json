{"cell_type":{"da323bc1":"code","e63f0107":"code","db3e3f8e":"code","770ce0cf":"code","5e06835f":"code","47c42c33":"code","4002f92a":"code","33b2749e":"code","64c27ddb":"code","795efc7b":"code","9ecf9d12":"code","9772523c":"code","89ed8158":"code","6f47fbbb":"code","6da33532":"code","5b8d56bc":"code","aee0d57f":"code","954222ba":"code","b3c5d11a":"code","299bb521":"code","43c7b155":"code","72572f93":"code","49899492":"code","d3a96880":"code","d0f282f7":"code","aed358a8":"code","dc22c004":"code","27653808":"code","e3240a6c":"code","23ebdff2":"code","2ff1975b":"code","d32b309e":"code","6f904321":"code","4b5014dd":"code","deb39209":"code","302729a8":"code","10280a49":"code","9908befc":"code","45d41905":"code","ad98ae15":"code","ddb5f1d0":"code","632f3962":"code","121e90ce":"code","0e6600a3":"code","9bfaec69":"code","c01e5045":"code","1df0c55f":"code","7ffb076d":"code","fa1027ea":"code","c06a0ebd":"code","4549cba6":"code","563ebd3a":"code","205f6c87":"code","2820d9b4":"code","21ff55e7":"code","3b3e37fa":"code","d5f319a1":"code","5a2246b7":"code","3ed2a532":"code","2e024276":"code","b0c184e4":"code","d2354e55":"code","58a0312e":"code","ea762012":"code","6639ff4b":"code","182963ea":"code","dae655fa":"code","747cd58b":"code","4e0e3473":"code","621b04b2":"code","332b1a3c":"code","0af44820":"code","7e1b17ec":"code","f22a0566":"code","6ed236cb":"code","d59576be":"code","edd02f6e":"code","bee3fd9c":"code","90562eaa":"code","88308689":"code","d654da84":"code","8c580130":"code","d04b065f":"markdown","228fdc89":"markdown","d78f0d55":"markdown","313ef324":"markdown","aab54b8c":"markdown","a5cf8aab":"markdown","3669bdd6":"markdown","554e14b8":"markdown","f03aca73":"markdown","ae733d70":"markdown","eb26af5a":"markdown","7154db02":"markdown","ad12a264":"markdown","b2bf8bc3":"markdown","2c8e9433":"markdown","5199c197":"markdown","9846ffbb":"markdown","92a133c8":"markdown","d1359bce":"markdown","a12a1e9f":"markdown","ff8dd068":"markdown","3c587bb3":"markdown","9f5d9b14":"markdown","7a2f25d4":"markdown","b749236a":"markdown","bf6a9682":"markdown","3390d4bd":"markdown","06d9bcf2":"markdown","d7a44442":"markdown","f9e701f3":"markdown","b0ffa51a":"markdown","b5951d2e":"markdown","e550c503":"markdown","c8c4e64e":"markdown","5536ab1a":"markdown","513daddc":"markdown","5a1ea914":"markdown","9a69d29c":"markdown"},"source":{"da323bc1":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e63f0107":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","db3e3f8e":"import warnings\nwarnings.filterwarnings('ignore')","770ce0cf":"matplotlib.rcParams.update({'font.size': 14})","5e06835f":"train_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')","47c42c33":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    '''\n    \n    '''\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","4002f92a":"train_df.head()","33b2749e":"test_df.head()","64c27ddb":"train_df.shape","795efc7b":"test_df.shape","9ecf9d12":"train_df.info()","9772523c":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['Id'].dtype","89ed8158":"test_df['Id'] = test_df['Id'].astype(str)\ntest_df['Id'].dtype","6f47fbbb":"df_num_features = train_df.select_dtypes(include=['float64', 'int64'])\ndf_num_features.head()","6da33532":"df_object_features = train_df.select_dtypes(include='object')\ndf_object_features.head()","5b8d56bc":"train_df['Ecology_2'].value_counts()","aee0d57f":"train_df['Ecology_3'].value_counts()","954222ba":"train_df['Shops_2'].value_counts()","b3c5d11a":"train_df['Ecology_2_bin'] = train_df['Ecology_2'].replace({'A':0, 'B':1})\ntrain_df['Ecology_3_bin'] = train_df['Ecology_3'].replace({'A':0, 'B':1})\ntrain_df['Shops_2_bin'] = train_df['Shops_2'].replace({'A':0, 'B':1})\n\ntest_df['Ecology_2_bin'] = test_df['Ecology_2'].replace({'A':0, 'B':1})\ntest_df['Ecology_3_bin'] = test_df['Ecology_3'].replace({'A':0, 'B':1})\ntest_df['Shops_2_bin'] = test_df['Shops_2'].replace({'A':0, 'B':1})","299bb521":"train_df.isnull().sum()","43c7b155":"train_df.loc[train_df['Healthcare_1'].isnull(), :].head()","72572f93":"train_df.loc[train_df['Healthcare_1'].isnull(), 'Healthcare_1'] = train_df['Healthcare_1'].median()\ntest_df.loc[test_df['Healthcare_1'].isnull(), 'Healthcare_1'] = test_df['Healthcare_1'].median()","49899492":"train_df.loc[train_df['LifeSquare'].isnull(), :].head()","d3a96880":"train_df.loc[train_df['LifeSquare'].isnull(), 'LifeSquare'] = train_df['Square'].median()\ntest_df.loc[test_df['LifeSquare'].isnull(), 'LifeSquare'] = test_df['Square'].median()","d0f282f7":"train_df.describe()","aed358a8":"train_df[(train_df['Rooms']<1) | (train_df['Rooms']>5)]","dc22c004":"train_df['Rooms'].mode()[0]","27653808":"train_df.loc[(train_df['Rooms']<1) | (train_df['Rooms']>5), 'Rooms'] = train_df['Rooms'].mode()[0]\ntest_df.loc[(test_df['Rooms']<1) | (test_df['Rooms']>5), 'Rooms'] = test_df['Rooms'].mode()[0]","e3240a6c":"train_df.nlargest(10, 'Square')","23ebdff2":"train_df.loc[(train_df['Square']<15) | (train_df['Square']>300), 'Square'] = train_df['Square'].median()","2ff1975b":"train_df.nlargest(10, 'LifeSquare')","d32b309e":"train_df.loc[(train_df['LifeSquare']<15) | (train_df['LifeSquare']>250), 'LifeSquare'] = train_df['Square']\ntest_df.loc[(test_df['LifeSquare']<15) | (test_df['LifeSquare']>250), 'LifeSquare'] = test_df['Square']","6f904321":"train_df.nlargest(10, 'KitchenSquare')","4b5014dd":"train_df.loc[train_df['KitchenSquare']<4, 'KitchenSquare'] = 4\ntest_df.loc[test_df['KitchenSquare']<4, 'KitchenSquare'] = 4","deb39209":"train_df.loc[train_df['KitchenSquare']>train_df['LifeSquare'], 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntest_df.loc[test_df['KitchenSquare']>test_df['LifeSquare'], 'KitchenSquare'] = test_df['KitchenSquare'].median()","302729a8":"train_df.nlargest(10, 'HouseFloor')","10280a49":"train_df.loc[(train_df['HouseFloor']<2) | (train_df['HouseFloor']>50), 'HouseFloor'] = train_df['HouseFloor'].mode()[0]\ntest_df.loc[(test_df['HouseFloor']<2) | (test_df['HouseFloor']>50), 'HouseFloor'] = test_df['HouseFloor'].mode()[0]","9908befc":"train_df[train_df['Floor']>train_df['HouseFloor']]\n","45d41905":"train_df.loc[train_df['Floor']>train_df['HouseFloor'], 'Floor'] = train_df['Floor']\ntest_df.loc[test_df['Floor']>test_df['HouseFloor'], 'Floor'] = test_df['Floor']","ad98ae15":"train_df.nlargest(10, 'HouseYear')","ddb5f1d0":"train_df.loc[train_df['HouseYear']>2021, 'HouseYear'] = train_df['HouseYear'].median()\ntest_df.loc[test_df['HouseYear']>2021, 'HouseYear'] = test_df['HouseYear'].median()","632f3962":"train_df.describe()","121e90ce":"train_df.head()","0e6600a3":"feature_names = ['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2_bin', 'Ecology_3_bin', 'Social_1', 'Social_2', 'Social_3',\n                 'Healthcare_1', 'Helthcare_2', 'Shops_1', 'Shops_2_bin']\ntarget_name = 'Price'","9bfaec69":"train_df[['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1','Social_1', 'Social_2', 'Social_3',\n                 'Healthcare_1', 'Helthcare_2', 'Shops_1']].hist(figsize=(16,16), bins=25, grid=False)","c01e5045":"sns.pairplot(train_df[['DistrictId', 'Rooms', 'Square', 'Floor', 'HouseYear', 'Ecology_1', 'Social_1', 'Healthcare_1', 'Helthcare_2', 'Shops_1', 'Price']])","1df0c55f":"plt.figure(figsize=(20,15))\n\nsns.set(font_scale=1.4)\nsns.heatmap(train_df[feature_names + ['Price']].corr(), annot=True, linewidths=.5, cmap='GnBu')\n\nplt.title('Correlation matrix')\nplt.show()","7ffb076d":"feature_names = ['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2_bin', 'Ecology_3_bin', 'Social_1', 'Social_3',\n                 'Healthcare_1', 'Helthcare_2', 'Shops_1', 'Shops_2_bin']\ntarget_name = 'Price'","fa1027ea":"train_df = train_df[feature_names + [target_name]]\ntest_df = test_df[feature_names]\ntrain_df.head()","c06a0ebd":"target_mean = round(train_df[target_name].mean(), 1)\ntarget_median = round(train_df[target_name].median(), 1)\ntarget_mode = round(train_df[target_name].mode()[0], 1)\n\ntarget_mean, target_median, target_mode","4549cba6":"plt.figure(figsize = (16, 8))\n\nsns.distplot(train_df[target_name])\n\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean]*10, y, label='mean', linestyle=':', linewidth=4)\nplt.plot([target_median]*10, y, label='median', linestyle='--', linewidth=4)\nplt.plot([target_mode]*10, y, label='mode', linestyle='-', linewidth=4)\n\nplt.title('Distribution of price')\nplt.legend()\nplt.show()","563ebd3a":"grid = sns.jointplot(train_df[target_name], train_df['Square'], kind='reg')\ngrid.fig.set_figwidth(12)\ngrid.fig.set_figheight(12)\n\nplt.show()","205f6c87":"grid = sns.jointplot(train_df[target_name], train_df['DistrictId'], kind='reg')\ngrid.fig.set_figwidth(12)\ngrid.fig.set_figheight(12)\n\nplt.show()","2820d9b4":"feature_names_for_stand = ['DistrictId', 'Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Social_1', 'Social_3',\n                 'Healthcare_1', 'Helthcare_2', 'Shops_1']","21ff55e7":"scaler = StandardScaler()\nstand_features = scaler.fit_transform(train_df[feature_names_for_stand])\nstand_features_test = scaler.fit_transform(test_df[feature_names_for_stand])","3b3e37fa":"train_df[feature_names_for_stand] = pd.DataFrame(stand_features, columns=feature_names_for_stand)\ntest_df[feature_names_for_stand] = pd.DataFrame(stand_features_test, columns=feature_names_for_stand)\ntrain_df.head()","d5f319a1":"train_df.std()","5a2246b7":"X = train_df[feature_names]\ny = train_df[target_name]","3ed2a532":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","2e024276":"gb_model = GradientBoostingRegressor()\ngb_model.fit(X_train, y_train)","b0c184e4":"y_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_test)","d2354e55":"evaluate_preds(y_train, y_train_preds, y_test, y_test_preds)","58a0312e":"gb_model = GradientBoostingRegressor(random_state=42)\ngb_model","ea762012":"params = {'n_estimators': [50, 100, 200, 400],\n         'max_depth': [3, 5 , 7 ,10]}","6639ff4b":"gs = GridSearchCV(gb_model, params, scoring='r2', cv=KFold(n_splits=3, random_state=42, shuffle=True), n_jobs=-1)","182963ea":"gs.fit(X,y)","dae655fa":"gs.best_params_","747cd58b":"gs.best_score_","4e0e3473":"final_model = GradientBoostingRegressor(random_state=42, n_estimators=200, max_depth=5)\nfinal_model.fit(X_train, y_train)","621b04b2":"y_train_preds = final_model.predict(X_train)\ny_test_preds = final_model.predict(X_test)","332b1a3c":"evaluate_preds(y_train, y_train_preds, y_test, y_test_preds)","0af44820":"feature_importances = pd.DataFrame({'feature': X_train.columns, 'importance': final_model.feature_importances_})\nfeature_importances = feature_importances.sort_values(by='importance', ascending=False)\nfeature_importances.reset_index(drop=True).plot(kind='bar')\nplt.xticks(ticks=range(feature_importances.shape[0]), labels=feature_importances.feature,size=14)\nplt.show()","7e1b17ec":"feature_names = ['DistrictId', 'Rooms', 'Square', 'KitchenSquare', 'Floor', 'HouseYear',\n                 'Ecology_1', 'Social_1', 'Social_3',\n                 'Healthcare_1', 'Helthcare_2']","f22a0566":"X = train_df[feature_names]\ny = train_df[target_name]","6ed236cb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","d59576be":"final_model = GradientBoostingRegressor(random_state=42, n_estimators=200, max_depth=5)\nfinal_model.fit(X_train, y_train)","edd02f6e":"y_train_preds = final_model.predict(X_train)\ny_test_preds = final_model.predict(X_test)","bee3fd9c":"evaluate_preds(y_train, y_train_preds, y_test, y_test_preds)","90562eaa":"y_test_preds = final_model.predict(test_df[feature_names])","88308689":"test_df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')","d654da84":"result = pd.DataFrame()\nresult['Id'] = test_df['Id'].copy()\nresult['Price'] = pd.Series(y_test_preds)","8c580130":"result.to_csv('prediction.csv', index=False)\nresult.values","d04b065f":"### \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","228fdc89":"### \u041f\u0440\u0430\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d78f0d55":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","313ef324":"### \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","aab54b8c":"\u0418\u0437\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u0441\u044f \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \"Ecology_3_bin, Shops_2_bin, Ecology_2_bin\" \u0438 \u0434\u0440.","a5cf8aab":"\u0418\u0437\u0431\u0430\u0432\u0438\u0432\u0448\u0438\u0441\u044c \u043e\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434\u043d\u044f\u0442\u044c R2 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0438 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u044c.","3669bdd6":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f Id, Ecology_2, Ecology_3, Shops_2)","554e14b8":"Rooms","f03aca73":"### \u041e\u0431\u0437\u043e\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","ae733d70":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","eb26af5a":"HouseFloor","7154db02":"### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","ad12a264":"Square","b2bf8bc3":"### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","2c8e9433":"### \u041e\u0431\u0437\u043e\u0440 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","5199c197":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","9846ffbb":"Kitchen Square","92a133c8":"\u0418\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u0430\u043a\u0436\u0435 \u0443\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a Social_2, \u0442.\u043a. \u043e\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 Social_1","d1359bce":"### \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a12a1e9f":"### \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","ff8dd068":"Gradient Boosting","3c587bb3":"### \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c","9f5d9b14":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0443 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438.","7a2f25d4":"Floor","b749236a":"\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c Id \u043a \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043d\u0435 \u043f\u043e\u043f\u0430\u043b \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0443.","bf6a9682":"\u0420\u0430\u0439\u043e\u043d","3390d4bd":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 Healthcare_1 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443","06d9bcf2":"Life Square","d7a44442":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: \u0410 \u0438 \u0412, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 0 \u0438 1 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","f9e701f3":"\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043c \u0441 LifeSquare:","b0ffa51a":"House Year","b5951d2e":"### \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","e550c503":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","c8c4e64e":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","5536ab1a":"### \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","513daddc":"\u041f\u0443\u0442\u044c \u0434\u043e \u0434\u0430\u043d\u043d\u044b\u0445","5a1ea914":"\u041e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0436\u0438\u043b\u044c\u044f","9a69d29c":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"}}