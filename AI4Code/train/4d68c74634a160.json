{"cell_type":{"b37dfed1":"code","44263a62":"code","ea992328":"code","3e3df8ae":"code","69b1abdc":"code","02978f0a":"code","d6e5c721":"code","d726dd93":"code","2fa9cbb3":"code","e9a5b0d1":"markdown","db7e5716":"markdown","7cfccaf2":"markdown","4ba1ef54":"markdown","bad41b7f":"markdown","8585b8c5":"markdown","2a57df4c":"markdown","2611419b":"markdown"},"source":{"b37dfed1":"# Importing Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","44263a62":"# Creating Data for visualisation\nsales={'City':['Newyork' ,\"LA\", 'San francisco', 'California', 'Washington'],\n      'Items_Sold':[12327, 17129, 19923, 18234, 20193]}","ea992328":"# Creating a DataFrame of the the given data\n\ndf=pd.DataFrame(sales)\ndf.head()","3e3df8ae":"plt.bar(x=df.City, height=df.Items_Sold )\nplt.title('Frequency Distribution of no. of Itmes Sold')\nplt.xlabel('Cities')\nplt.ylabel('Frequency')\nplt.show()\n\n# I like barplots of seabron more impressive :)\nsns.barplot(x=df.City, y=df.Items_Sold, palette='mako')\nplt.title('Frequency Distribution of no. of Itmes Sold')\nplt.xlabel('Cities')\nplt.ylabel('Frequency')\nplt.show()","69b1abdc":"df['relative_freq']=df['Items_Sold']\/df['Items_Sold'].sum()\ndf.head()","02978f0a":"plt.pie(x=df.relative_freq, labels=df.City, autopct='%.0f%%', shadow=True, radius=1.2, )\nplt.title('Relative Frequency Distribution using Pie Chart')\nplt.show()","d6e5c721":"df['cumulative_perc']=(df['Items_Sold'].cumsum()\/df['Items_Sold'].sum())*100\ndf.head()","d726dd93":"#Pandas sort_values() function sorts a data frame in Ascending or Descending order of passed Column.\n#It\u2019s different than the sorted Python function since it cannot sort a data frame and particular column cannot be selected.\ndf=df.sort_values(by='Items_Sold', ascending=False)\ndf.head()","2fa9cbb3":"# plt.subplots creates a figure and a grid of subplots with a single call, \n#while providing reasonable control over how the individual plots are created.\nfig, ax= plt.subplots()\nax.bar(x=df.City, height=df.Items_Sold)\nplt.title('Frequency Distribution of no. of Itmes Sold')\nplt.xlabel('Cities')\nplt.ylabel('Frequency')\n\n#The twinx() function in pyplot module of matplotlib library is used to make and \n#return a second axes that shares the x-axis.\nax2=ax.twinx()\nax2.plot(df.cumulative_perc, color='orange', marker='*', ms=15)\nplt.ylabel('Cumulative Frequency')\nplt.show()","e9a5b0d1":"### Pareto Chart\n\n\nA Pareto chart is a bar graph. The lengths of the bars represent frequency or cost (time or money), and are arranged with longest bars on the left and the shortest to the right. In this way the chart visually depicts which situations are more significant.\n\n\n##### WHEN TO USE A PARETO CHART\nWhen analyzing data about the frequency of problems or causes in a process\nWhen there are many problems or causes and you want to focus on the most significant\nWhen analyzing broad causes by looking at their specific components\nWhen communicating with others about your data","db7e5716":"### Cumulative Frequency\n\nCumulative relative frequency is the accumulation of the previous relative frequencies. To find the cumulative relative frequencies, add all the previous relative frequencies to the relative frequency for the current row, as shown in the table below.\n\nCumulative relative frequency = sum of previous relative frequencies + current class frequency ","7cfccaf2":"### Relative Frequency\n\nA relative frequency is the ratio (fraction or proportion) of the number of times a value of the data occurs in the set of all outcomes to the total number of outcomes. To find the relative frequencies, divide each frequency by the total number of students in the sample\u2013in this case, 20. Relative frequencies can be written as fractions, percents, or decimals.\n\nRelative frequency = frequency of the class\/total\n","4ba1ef54":"The categorical data consists of categorical variables which **represent the characteristics** such as a person\u2019s gender, hometown etc. Categorical measurements are expressed in terms of natural language descriptions, but not in terms of numbers. **Sometimes categorical data can take numerical values, but those numbers do not have mathematical meaning.** Some of the examples of the categorical data are as follows:\n\nBirthdate\nFavourite sport\nSchool Postcode\nTravel method to school etc.\nWhen you observe the above example, birthdate and postcode contain numbers. Even though it contains numerals, it is considered as categorical data. The easy way to determine whether the given data is categorical or numerical data is to calculate the average. If you are able to calculate the average, then it is considered to be a numerical data. **If you cannot calculate the average, then it is considered to be a categorical data.** Like the example mentioned above, the average of birthdate and the postal code has no meaning, so it is taken as categorical data.(source-byjus)","bad41b7f":"### BarPlot\n\nA bar chart (aka bar graph, column chart) plots numeric values for levels of a categorical feature as bars. Levels are plotted on one chart axis, and values are plotted on the other axis. Each categorical value claims one bar, and the length of each bar corresponds to the bar\u2019s value. Bars are plotted on a common baseline to allow for easy comparison of values.","8585b8c5":"# Categorical Data \n\n\n\n\n![image.png](attachment:04db2547-f4e7-40e3-969a-ae635a2886c5.png)","2a57df4c":"# Thank you for Reading!!! :)\n\n### Suggestions are most welcome :)\n\n","2611419b":"### Pie Chart\n\nA pie chart shows how a total amount is divided between levels of a categorical variable as a circle divided into radial slices. Each categorical value corresponds with a single slice of the circle, and the size of each slice (both in area and arc length) indicates what proportion of the whole each category level takes."}}