{"cell_type":{"051acffe":"code","3e42b04f":"code","b6ba7b98":"code","ccc207a7":"code","012a1b3b":"code","d708f571":"code","1037570b":"code","b37bab17":"code","b0a108b1":"code","ab5052f0":"code","86698b41":"code","4523633d":"code","a5a5fb55":"code","5fe637e2":"code","73782429":"code","6ea2a201":"code","81910109":"code","f7ad5603":"code","9e5baaf1":"code","d2af7981":"code","4af3b881":"code","6de20b73":"code","067858fb":"code","b267e9f3":"code","489f447e":"code","9c1ae694":"code","3e915002":"code","49fe8e54":"code","aed05ab4":"code","91e3088c":"code","13716aae":"code","8738aef6":"code","9142824b":"code","d64b6539":"code","4f476a9f":"code","e03c9cf6":"code","61a0cf2b":"code","362d9c0d":"code","ad76a50d":"code","94bac063":"code","983798f3":"code","99ab4d56":"code","fb6358bc":"code","1ee03d48":"code","244e08f4":"markdown","6b354df6":"markdown","03dd0617":"markdown","596508ac":"markdown","694353fc":"markdown","c1eca9c9":"markdown","20151924":"markdown","e1ae04eb":"markdown","f5c7112a":"markdown"},"source":{"051acffe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","3e42b04f":"mnist =pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","b6ba7b98":"mnist\n#(rows,cols)","ccc207a7":"mnist.columns\n#so it represent that first column is label and rest are pixel of label\n#in this data image of 28x28 is stored in format of 784 array of pixels","012a1b3b":"mnist.head()\n#label isalways y\n#and we have 784 pixels","d708f571":"X= mnist.iloc[: ,1:].values #bcz we are accessing integer val # #we can also do like mnist[:,1:]\n# accesing number instead of categorical data\ny=mnist[\"label\"].values #we can also do like mnist[:,0]\n#here we have used .numpy to convert it into numpy array","1037570b":"X.shape","b37bab17":"y","b0a108b1":"y.shape","ab5052f0":"from sklearn.model_selection import train_test_split","86698b41":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=12)\n#this just for splitting train and test","4523633d":"\nX_train.shape","a5a5fb55":"y_train.shape","5fe637e2":"X_test.shape","73782429":"y_test.shape","6ea2a201":"#we can apply kNN on this ","81910109":"def plot_image_color(img):\n    img=img.reshape((28,28))\n    plt.imshow(img) #this function gives u acolor map \n    plt.show()","f7ad5603":"plot_image_color(X_train[60])\n","9e5baaf1":"def plot_image(img):\n    plt.imshow(img.reshape(28,28) ,cmap=\"gray\") #this function gives u acolor map \n    #imshow just plot img and in img u will get (1,784)\n    \n    #so converting 784 into 28x28  \n    plt.show()\n    #as the img is graay scale so if we dont put cmap it \n    #automatically put so some color imshow ()\n    ","d2af7981":"plot_image(X_train[60]) #you can try this out on different image \nprint(y_train[60])\n#here training timeis o(1) bcz everything is going to happen in prediction time\n# and their is no training time","4af3b881":"def distance(pA, pB):\n    return np.sum((pB - pA)**2)**0.5","6de20b73":"def kNN(X, y, x_query, k = 5):\n    \"\"\"\n    X - > (m, 784)  np array (m is just number of eg. images)\n    y - > (m,) np array\n    x_query -> (1,874) np array\n    k -> scaler  int\n    \n    do knn for classification\n    \"\"\"\n    \n    m = X.shape[0]\n    distances = []\n    for i in range(m):\n        dis = distance(x_query, X[i])\n        distances.append((dis, y[i]))\n        \n    distances = sorted(distances)\n    distances = distances[:k]\n    \n    distances = np.array(distances)\n    labels = distances[:, 1]\n    \n    \n    uniq_label, counts = np.unique(labels, return_counts=True)\n\n    pred = uniq_label[counts.argmax()]\n    \n    \n    return int(pred)","067858fb":"# prediciting label for test\nkNN(X_train , y_train, X_test[235], k=7)\n#X_test if for testing","b267e9f3":"# displaying test image\nplot_image(X_test[235])","489f447e":"# actual label\ny_test[235]\n#this for checking that is X_train ==y_train","9c1ae694":"predictions = []\nfor i in range(100):\n    p = kNN(X_train , y_train, X_test[i], k=7)\n    predictions.append(p)","3e915002":"predictions = np.array(predictions)\npredictions.dtype","49fe8e54":"p=(y_test[:100] == predictions)\ntype(p)","aed05ab4":"(y_test[:100] == predictions).sum()\/len(predictions) #or 100","91e3088c":"predictions","13716aae":"from sklearn.neighbors import KNeighborsClassifier","8738aef6":"knn=KNeighborsClassifier(n_neighbors=7)","9142824b":"knn.fit(X_train,y_train)","d64b6539":"yp=[]\nfor i in range(100):\n    p=knn.predict([X_test[i]])#here we have used it to convert it in 2D array\n    p1=np.array(p)\n    yp.append(p1)","4f476a9f":"yp=np.array(yp)","e03c9cf6":"yp=yp.reshape((100,)) #this we have done bcz we have earlier converted\n#our X_test into 2D array\n\nprint(yp.shape)","61a0cf2b":"(y_test[:100] == yp).sum()\/len(yp) #or 100","362d9c0d":"import tensorflow.keras as tf \nmnist_train =pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nmnist_test =pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","ad76a50d":"df = pd.DataFrame(mnist_train)#.head(32000)\nimg= df.drop([\"label\"], axis=1).values\ny= df[\"label\"].values\n\nimg = img.reshape(42000, 28, 28, 1)","94bac063":"img.shape","983798f3":"model = tf.models.Sequential()\nmodel.add(tf.layers.Conv2D(128, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(tf.layers.MaxPooling2D((2, 2)))\nmodel.add(tf.layers.Conv2D(256, (3, 3), activation='relu'))\nmodel.add(tf.layers.MaxPooling2D((2, 2)))\n\nmodel.add(tf.layers.Flatten())\nmodel.add(tf.layers.Dense(64, activation='relu'))\nmodel.add(tf.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n\nres = model.fit(img, y, epochs=12, validation_split=0.3)\n","99ab4d56":"df_t=pd.DataFrame(mnist_test)\nimg= df_t.values\n\nimg= img.reshape(28000, 28, 28, 1)\nprediction = np.argmax(model.predict(img), axis=1)","fb6358bc":"# dfinal=pd.DataFrame(data=prediction,columns=[\"Label\"])\n#dfinal\nsample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\ndfinal= sample_submission.drop([\"Label\"], axis=1) \ndfinal.insert(1,'Label',prediction)","1ee03d48":"dfinal.to_csv(\".\/Recog_MNIST.csv\",index=False)","244e08f4":"# accuracy of Knn over test set","6b354df6":"> # Recognising Handwritten Digits on MNIST DataSet using KNN","03dd0617":"# Accuracy on 100 Images","596508ac":"# KNN From sklearn","694353fc":"# Prediciting 100 Images","c1eca9c9":"# what we are getting image as output","20151924":"# kNN","e1ae04eb":"# What algorithm is predicting","f5c7112a":"Applying Another Approach "}}