{"cell_type":{"82fb7e8c":"code","8c2c9a12":"code","9dcc9d26":"code","d7ef6616":"code","c2294166":"code","7ff5fffa":"code","76659a5f":"code","3a9a8e3a":"code","790b1fe7":"code","35382f0e":"code","55c4a3e9":"code","7e6a788b":"code","c81b2b25":"code","20ac6318":"code","44c6fc0c":"code","71e79e47":"code","a05705e8":"code","c35e6956":"code","105df0ae":"code","d2c50a88":"markdown","2be5e6ef":"markdown","3cb04c5d":"markdown","6454514b":"markdown","8d100068":"markdown","b27c12ed":"markdown","1723a044":"markdown","1e1427f4":"markdown","fb332f1a":"markdown","153fac93":"markdown","2a3303f1":"markdown"},"source":{"82fb7e8c":"import os\nimport numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport shutil\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.callbacks import EarlyStopping","8c2c9a12":"bird_classes = pd.read_csv('..\/input\/100-bird-species\/class_dict.csv')\nbird_species = pd.read_csv('..\/input\/100-bird-species\/Bird Species.csv')\nbird_species.sample(5)\n#bird_classes","9dcc9d26":"birdTypes = os.listdir('..\/input\/100-bird-species\/train')\nlen(birdTypes)","d7ef6616":"species = np.array(bird_classes['class'])\n#species","c2294166":"def show_sample(df, num, species):\n    df = df.sample(12)\n    plt.figure(figsize=(20,20))\n    for i in range(len(df)):\n        #print(df.iloc[i]['filepaths'])\n        path = '..\/input\/100-bird-species\/' + df.iloc[i]['filepaths']\n        label = df.iloc[i]['labels']\n        Type = df.iloc[i]['data set']\n        plt.subplot(3, 4, i+1)\n        img = tf.keras.preprocessing.image.load_img(path)\n        plt.imshow(img)\n        plt.xlabel(f'{label} : {Type}')\n    plt.show()\n        ","7ff5fffa":"show_sample(bird_species, 5, bird_species)","76659a5f":"train_data = ImageDataGenerator(preprocessing_function = preprocess_input, rotation_range=20, horizontal_flip=True)\ntrain_generator = train_data.flow_from_directory('..\/input\/100-bird-species\/train',\n                                                batch_size=64,\n                                                target_size=(224,224),\n                                                class_mode='categorical')","3a9a8e3a":"valid_data = ImageDataGenerator(preprocessing_function = preprocess_input, rotation_range=20, horizontal_flip=True)\nvalidation_generator = valid_data.flow_from_directory('..\/input\/100-bird-species\/valid',\n                                                batch_size=64,\n                                                target_size=(224,224),\n                                                class_mode='categorical')","790b1fe7":"for _ in range(5):\n    img, label = train_generator.next()\n    print(img.shape) \n    plt.imshow(img[0])\n    plt.show()","35382f0e":"vgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\n#eff_model.summary()\nvgg_model.trainable = False\n\nlayer0 = tf.keras.layers.Flatten(name='flatten')(vgg_model.output)\nlayer1 = tf.keras.layers.Dense(4096, activation='relu',name='fc1')(layer0)\nlayer2 = tf.keras.layers.Dense(4096, activation='relu',name='fc2')(layer1)\nout_layer = tf.keras.layers.Dense(300, activation='softmax')(layer2)\nvgg_model = tf.keras.Model(vgg_model.input, out_layer)\nvgg_model.summary()","55c4a3e9":"opt = tf.keras.optimizers.Adam(learning_rate=0.0001)\nvgg_model.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=['accuracy'])\ncallbacks = [EarlyStopping(monitor='val_accuracy', patience=3, restore_best_weights=True)\n              #,\n              #ModelCheckpoint(filepath='Fullmodel.{epoch:02d}-{acc:.2f}.h5', monitor='val_acc', save_best_only=False, mode='max')]\n             ]","7e6a788b":"history = vgg_model.fit(\n      train_generator, \n      epochs=15,\n      verbose=1,\n      validation_data = validation_generator,\n      callbacks=callbacks)","c81b2b25":"opt = tf.keras.optimizers.Adam(learning_rate=0.00005)\nvgg_model.trainable = True\nvgg_model.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=['accuracy'])\ncallbacks = [EarlyStopping(monitor='val_accuracy', patience=3, restore_best_weights=True)\n              #,\n              #ModelCheckpoint(filepath='Fullmodel.{epoch:02d}-{acc:.2f}.h5', monitor='val_acc', save_best_only=False, mode='max')]\n             ]","20ac6318":"history = vgg_model.fit(\n      train_generator, \n      epochs=15,\n      verbose=1,\n      validation_data = validation_generator,\n      callbacks=callbacks)","44c6fc0c":"opt = tf.keras.optimizers.Adam(learning_rate=0.00001)\nvgg_model.compile(optimizer=opt, loss=\"categorical_crossentropy\", metrics=['accuracy'])\ncallbacks = [EarlyStopping(monitor='val_accuracy', patience=3, restore_best_weights=True)\n              #,\n              #ModelCheckpoint(filepath='Fullmodel.{epoch:02d}-{acc:.2f}.h5', monitor='val_acc', save_best_only=False, mode='max')]\n             ]","71e79e47":"history = vgg_model.fit(\n      train_generator, \n      epochs=15,\n      verbose=1,\n      validation_data = validation_generator,\n      callbacks=callbacks)","a05705e8":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\n\nplt.show()","c35e6956":"test = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test.flow_from_directory(\n        '..\/input\/100-bird-species\/test',\n        target_size=(224, 224),\n        batch_size=64,\n        class_mode='categorical')","105df0ae":"vgg_model.evaluate(test_generator,use_multiprocessing=True,workers=10)","d2c50a88":"# Visualize bird image from sample","2be5e6ef":"# Visulaize image after preprocessing by VGG16","3cb04c5d":"create bird species class","6454514b":"Next, I set vgg_model.trainable = True to train all model after warming up and decrease learning rate (0.0001 -> 0.00005)","8d100068":"***Please forgive any errors\/mistakes.***\n***you can suggest me in comment thanks!***","b27c12ed":"# Load train data & valid data\nwe can see train data includes 43622 images belonging to 300 species and valid data includes 1500 images belonging to 300 species\nI set preprocessing with preprocess_input of VGG16 and doing Data Augmentation without rescale 1\/255. (i tried to rescale but VGG16 model is training very slow. if anyone know why it's very slowly, please comment)","1723a044":"# load class_dict.csv & Bird Species.csv","1e1427f4":"# Show All Bird Species","fb332f1a":"Last, I tried to decrease learning rate again (0.00005 -> 0.00001)","153fac93":"Check ACC by test_generator","2a3303f1":"# Create a model\nFirst, I create VGG16 model and set vgg_model.trainable = False for warming up model"}}