{"cell_type":{"2f1ccf38":"code","1fbee30a":"code","9d5d6da6":"code","2c67ec66":"code","04ee4ea9":"code","d5e547bd":"code","3f9bf7ec":"code","23428086":"code","0684e313":"code","e3bbd874":"code","1e7f11fc":"code","9478db88":"code","71f2cfd7":"code","e172a028":"code","9581ab80":"code","a97ed9be":"code","474d794e":"code","8d61b3f4":"code","edd96387":"code","afe969d6":"markdown","e9564413":"markdown","85e8cc12":"markdown","4b088973":"markdown","6ee1f039":"markdown","e60c505c":"markdown","90308498":"markdown","77be4d03":"markdown","a934f3c0":"markdown","fd087fd3":"markdown","2e99a65a":"markdown","8c54689b":"markdown","1b1f0b39":"markdown","f750c355":"markdown","f32cb455":"markdown","223f88c6":"markdown","bb5f5110":"markdown","283dc57d":"markdown","403737a0":"markdown"},"source":{"2f1ccf38":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly.offline import init_notebook_mode, iplot\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', None)\nimport colorlover as cl\nimport re\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots","1fbee30a":"def plot_var_one(var_name: str = '', normalize_by_var: bool = False, title_name: str = ''):\n    \"\"\"\n    Create traces for plotting one variable.\n    \n    Args:\n        var_name: name of the variable to plot\n        normalize_by_var: normalize values within each category\n        title_name: title name to show\n    \n    \"\"\"\n    \n    data_loc = []\n    for i, e in enumerate(data['Python_R'].unique()):\n        grouped = data.loc[data['Python_R'] == e, var_name].value_counts().sort_index().reset_index()\n        grouped = grouped.rename(columns={'index': var_name, var_name: 'Count'})\n        # in two columns variables should be sorted, so I add a dict with mapping for sorting\n        if var_name == 'Q6':\n            map_dict = {'I have never written code': 6,\n                        '5-10 years': 3,\n                        '3-5 years': 2,\n                        '< 1 years': 0,\n                        '1-2 years': 1,\n                        '10-20 years': 4,\n                        '20+ years': 5}\n            grouped['sorting'] = grouped[var_name].apply(lambda x: map_dict[x])\n            grouped = grouped.sort_values('sorting', ascending=True)\n            \n        \n        elif var_name == 'Q15':\n            map_dict = {'1-2 years': 1,\n                         '10-20 years': 6,\n                         '2-3 years': 2,\n                         '20 or more years': 7,\n                         '3-4 years': 3,\n                         '4-5 years': 4,\n                         '5-10 years': 5,\n                         'I do not use machine learning methods': 8,\n                         'Under 1 year': 0}\n            grouped['sorting'] = grouped[var_name].apply(lambda x: map_dict[x])\n            grouped = grouped.sort_values('sorting', ascending=True)\n            \n        if normalize_by_var:\n            d = data[var_name].value_counts().to_dict()\n            grouped['Count'] = grouped.apply(lambda row: row.Count \/ d[row[var_name]], axis=1)\n            \n        trace = go.Bar(\n            x=grouped[var_name],\n            y=grouped['Count'],\n            name=e,\n            legendgroup=i\n        )\n        data_loc.append(trace)\n    return data_loc\n\n\ndef plot_var(var_name: str = '', title_name: str = ''):\n    \"\"\"\n    Make plots with a defined variable.\n    The first plot is in absolute values, the second one in relative.\n    \n    Args:\n        var_name: name of the variable to plot\n        normalize_by_var: normalize values within each category\n        title_name: title name to show\n    \n    \"\"\"\n    fig = make_subplots(rows=2, cols=1, subplot_titles=[f'Language groups by {title_name} in absolute values',\n                                                        f'Language groups by {title_name} in relative values'])\n    for tr in plot_var_one(var_name=var_name, title_name=title_name):\n        fig.add_trace(tr, row=1, col=1)\n    for tr in plot_var_one(var_name=var_name, normalize_by_var=True, title_name=title_name):\n        fig.add_trace(tr, row=2, col=1)\n        \n    fig['layout'].update(height=800, width=1000, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='orange')\n    return fig\n\n\ndef make_choice_var(var: str = '', df: pd.DataFrame = pd.DataFrame(), title_name: str = ''):\n    \"\"\"\n    Prepare traces for a variable, in which responders could select several answers.\n    Args:\n        var: name of the variable to plot\n        df: data to use for plots\n        title_name: title name to show\n    \n    \"\"\"\n    col_names = [col for col in df.columns if f'{var}_Part' in col]\n    data_loc = []\n    small_df = df[col_names]\n    text_values = [col.split('_')[2] for col in col_names]\n    counts = []\n    nms = []\n    for m, n in zip(col_names, text_values):\n        if small_df[m].nunique() == 0:\n            counts.append(0)\n        else:\n            counts.append((small_df[m].isnull() == False).sum())\n            nms.append(small_df[m].value_counts().index[0].strip())\n            \n    trace = go.Bar(\n        x=nms,\n        y=counts,\n        name='fdsfdfdf',\n        marker=dict(color='silver'),\n        showlegend=False\n    )\n    data_loc.append(trace)\n    return trace\n\n\ndef plot_choice_var(var: str, title_name: str, height: int = 800):\n    \"\"\"\n    \n    Make plots with a defined variable.\n    Separate plot for each group of users.\n    \n    Args:\n        var: name of the variable to plot\n        title_name: title name to show\n        height: height of the plot\n    \"\"\"\n    fig = make_subplots(rows=2, cols=2,subplot_titles=group_names)\n    for i, v in enumerate(group_names):\n        f = make_choice_var(var=var, df=data.loc[data['Python_R'] == v], title_name=title_name)\n        fig.add_trace(f, row=(i \/\/ 2) + 1, col=(i % 2) + 1)\n\n    fig['layout'].update(height=height, width=1000, paper_bgcolor='rgba(0,0,0,0)',\n                         plot_bgcolor='rgba(0,0,0,0)', title=f'Popular {title_name} by language groups');\n    \n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightGrey')\n    return fig","9d5d6da6":"data = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\n# remove row with technical info\ndata = data[1:]\n\n# create column with groups\ndata['Python_R'] = ''\ndata.loc[(data['Q7_Part_1'] == 'Python') & (data['Q7_Part_2'] == 'R'), 'Python_R'] = 'Python & R'\ndata.loc[(data['Q7_Part_1'] != 'Python') & (data['Q7_Part_2'] == 'R'), 'Python_R'] = 'R, Not Python'\ndata.loc[(data['Q7_Part_1'] == 'Python') & (data['Q7_Part_2'] != 'R'), 'Python_R'] = 'Python, Not R'\ndata.loc[(data['Q7_Part_1'] != 'Python') & (data['Q7_Part_2'] != 'R'), 'Python_R'] = 'Not Python, Not R'\n\n# make some texts shorter, so that plots look better\ndata['Q3'] = data['Q3'].str.replace('United States of America', 'USA').replace('United Kingdom of Great Britain and Northern Ireland', 'UK')\ndata['Q4'] = data['Q4'].str.replace('Some college\/university study without earning a bachelor\u2019s degree', 'Some study')\n\n# use regex to remove text in brackets, so that plots look better\nregex_cols = ['Q9', 'Q17', 'Q18', 'Q23', 'Q37', 'Q39']\nfor col_name in regex_cols:\n    for col in [c for c in data.columns if col_name in c]:\n        data[col] = data[col].apply(lambda x: re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", str(x)).strip() if x is not np.nan else x)","2c67ec66":"plt.figure(figsize=(8, 6))\nsns.countplot(data['Python_R'])\nplt.title('Number of users in groups');","04ee4ea9":"# TODO: add comment\nother_langs = (data.loc[data['Python_R'] == 'Not Python, Not R', [col for col in data.columns if 'Q7' in col]][1:].isnull() == False).sum()\nother_langs.index = ['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'Javascript', 'Julia', 'Swift', 'Bash', 'MATLAB', 'None', 'Other']\nother_langs = other_langs.sort_values(ascending=False)\n\ntrace = go.Bar(\n    x=other_langs.index,\n    y=other_langs.values,\n    name='Top languanges',\n)\nlayout = dict(height=400, width=1000, title=\"Top languages used by people, who don't use Python and R\");  \nfig = dict(data=[trace], layout=layout)\n\niplot(fig);","d5e547bd":"group_names = ['Python & R', 'Not Python, Not R', 'Python, Not R', 'R, Not Python']\n\nfig = make_subplots(rows=2, cols=2, subplot_titles=group_names)\nfor i, v in enumerate(group_names):\n    aggregated = data.loc[data['Python_R'] == v, 'Q3'].value_counts().head(10).sort_values().reset_index()\n    fig.add_trace(go.Bar(x=aggregated['Q3'],\n                         y=aggregated['index'], orientation='h', name=v), row=(i \/\/ 2) + 1, col=(i % 2) + 1)    \n    \nfig['layout'].update(height=800, width=1000,paper_bgcolor='rgba(0,0,0,0)',\n                     plot_bgcolor='rgba(0,0,0,0)', title='Top countries by language groups');\niplot(fig);","3f9bf7ec":"fig = plot_var(var_name='Q2', title_name='gender')\niplot(fig);","23428086":"fig = plot_var(var_name='Q4', title_name='education')\niplot(fig);","0684e313":"fig = plot_var(var_name='Q5', title_name='title')\niplot(fig);","e3bbd874":"fig = plot_var(var_name='Q6', title_name='years of programming')\niplot(fig);","1e7f11fc":"plot_choice_var('Q9', 'IDE')","9478db88":"plot_choice_var('Q10', 'hosted notebooks', height=1200)","71f2cfd7":"plot_choice_var('Q14', 'data visualization libraries')","e172a028":"fig = plot_var(var_name='Q15', title_name='years of using ML')\niplot(fig);","9581ab80":"plot_choice_var('Q16', 'ML frameworks')","a97ed9be":"plot_choice_var('Q17', 'ML algorithms')","474d794e":"plot_choice_var('Q36', 'sites to share work')","8d61b3f4":"plot_choice_var('Q37', 'platforms for courses')","edd96387":"plot_choice_var('Q39', 'media sources')","afe969d6":"That's quite interesing. While top countries are similar, because a lot of people live in them, it can be interesting to have a look at other countries.\n* As I live in Russia, I can confirm that R isn't very popular here.\n* Looks like R is also not really popular in Japan.\n* It is noticable that a lot of people in Nigeria use only Python","e9564413":"R users, of course use Shiny and ggplot2. Also it is worth noticing that those who use both Python and R heavily use both matplotlib and ggplot2.","85e8cc12":"It isn't really suprising that R users prefer Kaggle Notebooks, because they have R ready to use.","4b088973":"* Everyone uses Coursera :) Let's praise it :pray:\n* R users prefer edX and DataCamp;\n* new Python users like Kaggle Learn Courses;\n* those who don't use Python and R use Udemy a lot - it provides a lot of cheap courses;","6ee1f039":"This is an interesting plot. On the one hand we could say that the more experienced people are, the more likely are they to use both Python and R. But I think it is the other way round - experienced people may have started using R as an alternative to software like SAS and then later adopted Python as an additional tool.","e60c505c":"As a result I think that while there are some differences between Python and R users, they aren't very serious. So we can embrace one or both of the languages and do what we like :)","90308498":"## General information about groups of users","77be4d03":"## Python and R. Let's compare the users\n\nKaggle survey has a lot of interesting question, and one of them is a hot topic: what language do you use? There are a lot of arguments on internet about \"the best\" language, this is relevant not only for Data Science, but for programming in general. And I was interested about Kagglers using Python and R. I have split the users roughly in 4 groups:\n* use both Python and R\n* use only Python, not R\n* use only R, not Python\n* use neither Python nor R\n\nAnd then I compare users in these four groups - try to find how similar or different they are. It was very fun to do it, I hope you'll also enjoy reading my notebook :)\n\n![](https:\/\/miro.medium.com\/max\/640\/1*SoBbCn6tUkhiUlgDl80PzQ.jpeg)","a934f3c0":"It seems that the difference between genders is insignificant.","fd087fd3":"Here we can see one of the biggest differences - almost no R users use deep learning algorithms.","2e99a65a":"Oh! I suppose most of these people are either Data Analysts or Software Developers.","8c54689b":"One of interesting observations is that the higher the degree level is, the more likely are people to use both Python & R. And a lot of PhD use R. I suppose they need it because of statistical packages as an alternative to Matlab and statistical software?","1b1f0b39":"Looks like a lot of analysts and managers don't use Python and R. The former need more SQL I suppose, the latter don't need programming at all.\n\nAnd statisticians, of course, use R a lot :)","f750c355":"Here we can see a lot of language-specific libraries like Caret and Tidymodels on one hand and Scikit-learn on the other hand. Also it seem that some R users use `reticulate` to get access to some Python packages.","f32cb455":"As we can see, most people prefer to use Python and not R. What is more interesting - the number of people using only R is very low. I suppose they aren't that interested in Kaggle? R is often used for statistics and beautiful visualizations, but Kaggle isn't a very suitable place for improving statistical skills.\n\nAlso there is a big group of people, who don't use these two languages. Let's see what languages do they use.","223f88c6":"I find it fascinating, that R users prefer usign personal blogs for sharing their work. I suppose it is easier to share python projects on github than R.","bb5f5110":"## More information to compare","283dc57d":"## Are there differences in countries?","403737a0":"It isn't surprising that people using R prefer RStudio and those who use Python prefer Jupyter\/VSCode\/PyCharm. Notepad++ is more popular that other light-weight text\/code editors."}}