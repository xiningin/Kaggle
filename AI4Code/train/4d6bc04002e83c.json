{"cell_type":{"0ae3994d":"code","4c55c87e":"code","3bd61020":"code","524eca6a":"code","d7e0c958":"code","f2d891be":"code","2d0af537":"code","751dcec4":"code","ee3c7b9f":"code","9a87d3a2":"code","5e4eff13":"code","059d7f55":"code","23678d94":"code","ec87de15":"code","6e50e321":"code","ddb3e83d":"code","152c8846":"code","4aeab754":"code","79632087":"code","ecee8cb0":"code","ab4a36d4":"code","f1aefa26":"code","52349f08":"code","408d001f":"code","14344b98":"code","3f8f0025":"markdown","90a459b2":"markdown","4cf3e6dc":"markdown","0aa349fa":"markdown","76742d8e":"markdown","d7634db4":"markdown","2c535575":"markdown","a111e25b":"markdown","c803fe25":"markdown","67e84413":"markdown","773c243b":"markdown","0c92172e":"markdown","78ceac99":"markdown","1d377142":"markdown"},"source":{"0ae3994d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport cv2\nimport random\nfrom tensorflow.keras.preprocessing import image\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c55c87e":"os.listdir(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/\")","3bd61020":"print(\"Number of Cats images in Training Directory {}\".format(len(os.listdir(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/cats\"))))\nprint(\"Number of Dogs images in Training Directory {}\".format(len(os.listdir(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/dogs\"))))\n\nprint(\"Number of images in Training Directory {}\".format(len(os.listdir(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/cats\")) + len(os.listdir(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/dogs\"))))","524eca6a":"from tensorflow.keras.preprocessing.image import load_img\ncat_dir = \"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/cats\"\ndog_dir = \"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/dogs\"\nfig = plt.figure(figsize=(12,9))\nfig.set_size_inches(15,15)\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    cat_img = os.listdir(cat_dir)\n    sample = random.choice(cat_img)\n    img = load_img(cat_dir +\"\/\" +sample)\n    plt.imshow(img)\n    plt.xlabel(\"Cat\")\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout()\n\nfig = plt.figure(figsize=(12,8))\nfig.set_size_inches(15,15)\n\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    dog_img = os.listdir(dog_dir)\n    sample = random.choice(dog_img)\n    img = load_img(dog_dir +\"\/\" +sample)\n    plt.imshow(img)\n    plt.xlabel(\"Dog\")\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.tight_layout()\n    ","d7e0c958":"labels = [\"cats\",\"dogs\"]\nimg_size = 120\n\ndef get_data(data_dir):\n    data = []\n    for label in labels:\n        category = labels.index(label)\n        path = os.path.join(data_dir,label)\n        for img in os.listdir(path):\n            img_arr = cv2.imread(os.path.join(path,img))\n            img_arr_resize = cv2.resize(img_arr,(img_size,img_size))\n            data.append([img_arr_resize,category])\n    return np.array(data)\n\n\n","f2d891be":"train = get_data(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\/\")\ntest =   get_data(\"\/kaggle\/input\/dogs-cats-images\/dog vs cat\/dataset\/test_set\/\")","2d0af537":"x_train = []\ny_train =[]\n\nx_test = []\ny_test = []   \n\nfor feature,label in train:\n    x_train.append(feature)\n    y_train.append(label)\n\nfor feature,label in test:\n    x_test.append(feature)\n    y_test.append(label)\n","751dcec4":"plt.figure(figsize=(10,5))\nplt.style.use(\"ggplot\")\nplt.subplot(1,2,1)\nsns.countplot(y_train)\nplt.title(\"Train\")\n\nplt.subplot(1,2,2)\nsns.countplot(y_test)\nplt.title(\"Test\")\n\nplt.show()","ee3c7b9f":"x_train = np.array(x_train)\/255\nx_test = np.array(x_test)\/255\n\nx_train = x_train.reshape(-1,img_size,img_size,3)\ny_train = np.array(y_train)\n\nx_test = x_test.reshape(-1,img_size,img_size,3)\ny_test = np.array(y_test)","9a87d3a2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=45,width_shift_range = 0.2,height_shift_range=0.2,\n                            zoom_range = 0.2,shear_range = 0.2,horizontal_flip= True)\ndatagen.fit(x_train)","5e4eff13":"from tensorflow.keras.applications.vgg16 import VGG16\n\nvgg = VGG16(weights = \"imagenet\",include_top=False,input_shape = (120,120,3))","059d7f55":"for layer in vgg.layers:\n    layer.trainable = False","23678d94":"from tensorflow.keras.layers import Dense,Flatten\nfrom tensorflow.keras.models import Model\n\nx = vgg.output\nx = Flatten()(x)\nprediction = Dense(1,activation = \"sigmoid\")(x)\nmodel = Model(inputs = vgg.input,outputs = prediction)","ec87de15":"model.summary()","6e50e321":"from tensorflow.keras.optimizers import SGD\nmodel.compile(optimizer = SGD(lr =0.0001,momentum = 0.9),loss='binary_crossentropy',metrics=['accuracy'])","ddb3e83d":"from tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping\ncheckpoint = ModelCheckpoint(\"cats_dogs.h5\",monitor=\"val_accuracy\",verbose=1,save_best_only=True,\n                             save_weights_only=False,mode=\"auto\",period = 1)\nearlyStop = EarlyStopping(monitor = \"val_acc\",patience=10,verbose=1)\n","152c8846":"history = model.fit(datagen.flow(x_train,y_train,batch_size=32),epochs=40,\n                    validation_data = datagen.flow(x_test,y_test),callbacks = [checkpoint,earlyStop])","4aeab754":"print(\"Loss of the Model :{}\".format(model.evaluate(x_test,y_test)[0]))\nprint(\"Accuracy of the Model :{}%\".format(model.evaluate(x_test,y_test)[1]*100))","79632087":"plt.style.use(\"ggplot\")\nfig = plt.figure(figsize=(12,6))\nepochs = range(1,41)\nplt.subplot(1,2,1)\nplt.plot(epochs,history.history[\"accuracy\"],\"go-\")\nplt.plot(epochs,history.history[\"val_accuracy\"],\"ro-\")\nplt.title(\"Model Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend([\"Train\",\"val\"],loc = \"upper left\")\n#plt.show()\n\n#fig = plt.figure(figsize=(12,8))    \nplt.subplot(1,2,2)\nplt.plot(epochs,history.history[\"loss\"],\"go-\")\nplt.plot(epochs,history.history[\"val_loss\"],\"ro-\")\nplt.title(\"Model Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Train\",\"val\"],loc = \"upper left\")\nplt.show()\n","ecee8cb0":"prediction = []\ny_pred = model.predict(x_test)\n\nfor i in y_pred:\n    if i < 0.5:\n        prediction.append(0)\n    else:\n        prediction.append(1)","ab4a36d4":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, prediction, target_names = ['Cats (Class 0)','Dogs (Class 1)']))","f1aefa26":"from mlxtend.plotting  import plot_confusion_matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,prediction)\nplot_confusion_matrix(conf_mat = cm,figsize=(8,8),class_names = labels)","52349f08":"correct = np.nonzero(prediction == y_test)[0]\nincorrect = np.nonzero(prediction != y_test)[0]","408d001f":"plt.figure(figsize=(12,8))\ni = 0\nfor c in correct[:4]:\n    plt.subplot(1,4,i+1)\n    plt.imshow(x_test[c])\n    plt.xlabel(\"Predicted Class {} \\n Actual Class {}\".format(prediction[c], y_test[c]))\n    plt.xticks([])\n    plt.yticks([])\n    plt.tight_layout()\n    i += 1","14344b98":"plt.figure(figsize=(12,8))\ni = 0\nfor c in incorrect[:4]:\n    plt.subplot(1,4,i+1)\n    plt.imshow(x_test[c])\n    plt.xlabel(\"Predicted Class {} \\n Actual Class {}\".format(prediction[c], y_test[c]))\n    plt.xticks([])\n    plt.yticks([]) \n    plt.tight_layout()\n    i += 1","3f8f0025":"><h3>Misclassified Class<\/h3>","90a459b2":"<h1 style=\"text-align: center;font-size: 18px; color: blue\">N.B: I was getting 92% accuracy using VGG16 model by using image size 150,but don't know why each time after training, my notebook  gets crashed: showing this Message:\"Your notebook tried to allocate more memory than is available\". So i trained it using (120,120) image size and the problem gets solved but the accuracy gets decreased to 87%<\/h1>","4cf3e6dc":"> <h3>Let's see some of the images:<\/h3>","0aa349fa":"><h3>Correctly Classified Class <\/h3>","76742d8e":"><h3>Data Augmentation:<\/h3>\n\nData augmentation in data analysis are techniques used to increase the amount of data by adding slightly modified copies of already existing data or newly created synthetic data from existing data. It helps reduce overfitting when training a machine learning.Geometric transformations, flipping, color modification, cropping, rotation, noise injection and random erasing are used to augment image in deep learning","d7634db4":"><h3>Confusion Matrix<\/h3>","2c535575":"><h3>Data Visualization & Preprocessing<\/h3>","a111e25b":"---\n\n<h1 style=\"text-align: center;font-size: 20px;\">Thanks for Reading!!<\/h1>\n\n---","c803fe25":"> <h3>Creating Model<\/h3>","67e84413":">Classification Report:","773c243b":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">Cats & Dogs Image Classifier<\/h1>\n\n---","0c92172e":"- Here we can see that our dataset is normally distributed,Train and test dataset equally contains cats & dogs images","78ceac99":"><h3>Learning Curve: <\/h3>","1d377142":"> <h3> Loading Dataset <\/h3>"}}