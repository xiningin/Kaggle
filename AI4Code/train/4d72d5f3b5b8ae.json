{"cell_type":{"f85ac4a5":"code","c9062a9d":"code","b793d777":"code","c7f29c7d":"code","1866aaed":"code","d330e9bf":"code","f5fe04a1":"code","b2bb5fc9":"code","57f78e9e":"code","b5c1859a":"code","07940d88":"code","15b94391":"code","915a0856":"code","1b80dadd":"code","b0bb8f21":"markdown","ae0d096c":"markdown","1addc4f7":"markdown","55232662":"markdown","3e217542":"markdown","dc6d169e":"markdown","d3b7a130":"markdown","c96d9b23":"markdown","a2b6ebc1":"markdown","f19e50f3":"markdown","be3de4f8":"markdown","be6e9e81":"markdown","7d2b268f":"markdown","a0e62312":"markdown","43e6ee8e":"markdown","310c67da":"markdown","cab37b18":"markdown","7760b817":"markdown","24c7793b":"markdown","14a70e42":"markdown","a170b548":"markdown","0ef63ad0":"markdown","dd9795a2":"markdown","0d59a17a":"markdown"},"source":{"f85ac4a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9062a9d":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Dropout,Dense,Flatten,Conv1D, Activation\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.metrics import BinaryAccuracy\nfrom keras.utils import np_utils","b793d777":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","c7f29c7d":"print(train.shape)\nprint(\"---------\")\nprint(test.shape)\nprint(\"---------\")\nprint(submission.shape)","1866aaed":"train.isnull().sum()","d330e9bf":"test.isnull().sum()","f5fe04a1":"print(train.columns)\nprint(\"-----------\")\nprint(test.columns)\nprint(\"-----------\")\nprint(submission.columns)\nprint(\"-----------\")","b2bb5fc9":"x_train = train.iloc[:, 1:].values.astype(\"float32\")\ny_train = train.iloc[:, 0].values.astype(\"float32\")\ntest = test.values.astype(\"float32\")","57f78e9e":"print(x_train.shape)\nprint(y_train.shape)","b5c1859a":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\ntest = test.reshape(test.shape[0], 28, 28, 1)\n\nx_train \/= 255\ntest \/= 255\n\ny_train = np_utils.to_categorical(y_train, 10)","07940d88":"model = Sequential()\n\nmodel.add(Conv2D(20, kernel_size = 5, padding = \"same\", input_shape = (28, 28, 1), activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Conv2D(20, kernel_size = 5, padding = \"same\", activation = (\"relu\")))\nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(10))#\uff11\uff10\u30af\u30e9\u30b9\u5206\u985e\u306a\u306e\u3067\u3001\u6700\u5f8c\u306f\uff11\uff10\u500b\u306e\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u3002\nmodel.add(Activation(\"softmax\"))#\u591a\u30af\u30e9\u30b9\u5206\u985e\u306a\u306e\u3067\u3001softmax\u95a2\u6570\u3092\u4f7f\u3046\u3002\nmodel.summary()","15b94391":"model.compile(loss = \"categorical_crossentropy\", optimizer = Adam(), metrics = [\"accuracy\"])","915a0856":"model.fit(x_train, y_train, batch_size = 10, epochs = 3, verbose = 1, validation_split = 0.2)","1b80dadd":"submission = model.predict_classes(test, verbose = 0)\nsubmission = pd.DataFrame({\"ImageId\": list(range(1,len(submission)+1)), \"Label\" : submission})\nsubmission.to_csv(\"mnist_keras\", index = False)","b0bb8f21":"![](http:\/\/)2. \u6b20\u640d\u5024\u306e\u78ba\u8a8d","ae0d096c":"1. \u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u306e\u78ba\u8a8d","1addc4f7":"****\n\u3053\u3053\u304b\u3089\u3001EDA\uff08\u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\uff09\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002","55232662":"\u7121\u4e8b\u3001\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002","3e217542":"4.train\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\uff06\u578b\u5909\u63db","dc6d169e":"\u6700\u5f8c\u306b\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","d3b7a130":"\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092import\u3057\u307e\u3059\u3002","c96d9b23":"x_train\u3068y_train\u306e\u5f62\u72b6\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002","a2b6ebc1":"\u3053\u3053\u3067\u6ce8\u610f\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u306f\u3001train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u304cdtype=\"object\"\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u753b\u50cf\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5b66\u7fd2\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u578b\u5909\u63db\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n","f19e50f3":"\u4e0a\u306e\u30b3\u30fc\u30c9\u3067train\u30c7\u30fc\u30bf\u304ctest\u30c7\u30fc\u30bf\u3088\u308a\uff11\u5217\u591a\u3044\u306e\u306f\u3001\u76ee\u7684\u5909\u6570\u3067\u3042\u308b[\"label\"]\u306e\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n","be3de4f8":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002","be6e9e81":"\u3053\u306e\u307e\u307e\u306e\u5f62\u72b6\u3067\u306f\u5b66\u7fd2\u3067\u304d\u306a\u3044\u305f\u3081\u3001x_train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u306e\u5217\u306e\u5f62\u3092\u3001784\u304b\u308928\u00d728\u00d71\u306b\u5909\u63db\u3057\u3001\u6b63\u5247\u5316\uff08255\u3067\u5272\u308b\uff09\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001y_train\u3092\uff11\uff10\u30af\u30e9\u30b9\u5206\u985e\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002","7d2b268f":"****\n\u3044\u3088\u3044\u3088\u5b66\u7fd2\u306b\u306f\u3044\u308a\u307e\u3059\u3002","a0e62312":"2. \u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b","43e6ee8e":"3. \u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u306e\u78ba\u8a8d","310c67da":"\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u305d\u308c\u305e\u308ctrain\u3001test\u3001submission\u30c7\u30fc\u30bf\u3068\u3057\u307e\u3059\u3002","cab37b18":"****\n\u63d0\u51fa","7760b817":"x_train\u304c\u5b66\u7fd2\u30c7\u30fc\u30bf\u3067y_train\u304c\u76ee\u7684\u5909\u6570\uff08\u4eca\u56de\u306e\u5834\u5408\u306flabel\uff09\u306b\u306a\u308a\u307e\u3059\u3002","24c7793b":"1. \u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u5f62\u6210","14a70e42":"3. \u5b66\u7fd2","a170b548":"\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u63d0\u51fa\u3059\u308b\u3068\u3001\u79c1\u306e\u74b0\u5883\u30670.98375\u3068\u3044\u3046\u30b9\u30b3\u30a2\u304c\u51fa\u307e\u3057\u305f\u3002\u5c64\u3092\u5de5\u592b\u3059\u308b\u4e8b\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u30b9\u30b3\u30a2\u304c\u51fa\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\u3054\u4e00\u8aad\u9802\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002","0ef63ad0":"\u4eca\u56de\u306f\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002","dd9795a2":"5.\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u5909\u63db\uff06\u6b63\u898f\u5316","0d59a17a":"train\u3001test\u30c7\u30fc\u30bf\u5171\u306b\u6b20\u640d\u5024\u304c\u306a\u3044\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002"}}