{"cell_type":{"66ee7a5a":"code","c243c018":"code","f4aa7e94":"code","ea4b596d":"code","0a9d3c18":"code","1cd5731d":"code","fecf18a7":"code","cca42572":"code","b6bb7c22":"code","8adf0c86":"code","6e8cbf5c":"code","82a865ce":"code","e255b46e":"code","028413d8":"code","ecf98c90":"code","69c9afd8":"code","16540e71":"code","3a5d5730":"code","b02bda39":"code","f0b63562":"code","c5ae0563":"code","870897bb":"code","9de7d107":"code","3642465c":"code","2013acab":"code","7054dadc":"code","35097ee2":"code","be210eb7":"code","26577d4d":"code","438b67a7":"code","6b10361c":"code","74bf5945":"code","a9504e9a":"code","fbdffdbf":"code","5a845ed7":"markdown","6396caec":"markdown","548335b1":"markdown","97521afe":"markdown","3331fd62":"markdown","6e5affc1":"markdown","275ff632":"markdown","40615f24":"markdown","b62d26db":"markdown","63561ce3":"markdown","b37fce12":"markdown","c4521f83":"markdown","3ea10400":"markdown","e976efd0":"markdown","0d00bb18":"markdown","f149bf84":"markdown","61915fdf":"markdown","7eaf5395":"markdown","ad320d30":"markdown","af8a234b":"markdown","6651ee47":"markdown","a012d428":"markdown","21d7584e":"markdown","b555408e":"markdown","fc9eb639":"markdown","883b00b8":"markdown","3e618724":"markdown","7a69d286":"markdown","40843d39":"markdown","e4554649":"markdown","239fe0e2":"markdown","e6d091c8":"markdown","c7e63e70":"markdown","ec4d4598":"markdown","831677a9":"markdown","107d4db3":"markdown","e089bf38":"markdown","9c4e0526":"markdown","d20cdf72":"markdown","a6d11f7f":"markdown"},"source":{"66ee7a5a":"import pandas as pd  # for handling the datsets \nimport seaborn as sns  # for visualisation\nimport matplotlib.pyplot as plt  # for visualisation\nplt.style.use('ggplot') #  for ggplot like styling\n%matplotlib inline  \n# for inline rendering of images produced by matplolib","c243c018":"matches = pd.read_csv('..\/input\/dataset\/matches.csv')  # loading csv file into dataframe\ndeliveries = pd.read_csv('..\/input\/dataset\/deliveries.csv')  # loading csv file into dataframe","f4aa7e94":"matches.head()  # displaying first five rows of the dataframe","ea4b596d":"deliveries.head()  # displaying first five rows of the dataframe","0a9d3c18":"matches['team1'].unique()  # viewing all the unique values in the column team1","1cd5731d":"x = ['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions', \n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']  # list of the values to be replaced\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']  # list of the values to be replaced with\n\nmatches.replace(x, y, inplace = True)  #  replacing all values of x with y in dataframe matches\ndeliveries.replace(x, y, inplace = True) ","fecf18a7":"season_winner = matches.drop_duplicates(subset=['season'],keep='last')[['season', 'winner']].reset_index(drop=True)\n# getting the winner of each season\nseason_winner.winner.value_counts().plot(kind='bar', title='Number of IPL season each team Won', figsize=(5,3), width=0.5, color=(1, 0, 0.2, 0.6), \n                                         edgecolor='black', rot=0)   # plotting the bar graph","cca42572":"team_stats = pd.DataFrame({    # making a dataframe for stats of every team\n    'Played': matches.team1.value_counts() + matches.team2.value_counts(),   # calculating total matches played by each team\n    'Won': matches.winner.value_counts(),   # calculating total matches won by each team\n    'Lost': ((matches.team1.value_counts() + matches.team2.value_counts()) - matches.winner.value_counts()),   # calculating total matches lost by each team\n    'Toss won': matches.toss_winner.value_counts()   # calculating tosses won by each team\n})\nteam_stats['Win percentage'] = (team_stats['Won']\/team_stats['Played'])*100  # calculating win percentage of each team\nteam_stats","b6bb7c22":"team_stats['Win percentage'].plot(kind='bar', title='Win percentage', figsize=(12,5), width=0.6, color=(0.9, 0.3, 0 , 0.6), edgecolor='black', rot=0)\n# plotting the bar graph for win percentage of each team","8adf0c86":"matches_played = {}  # dictionary for storing matches played by each batsman\ndef MatchesPlayed(df):  # function for calculating matches played by each batsman\n    for m in df.batsman.unique():  # for loop for iterating through the series of batsmen\n        if m in matches_played:\n            matches_played[m] += 1  # incrementing if batsman's record is already in the dictionary\n        else:\n            matches_played[m] = 1  # initializing if batsman's record is not in the dictionary\ndeliveries.groupby('match_id').apply(MatchesPlayed)  # applying the function on the dataset","6e8cbf5c":"batsmen_summary = deliveries.groupby(\"batsman\").agg({'ball': 'count','batsman_runs': 'sum'})  # calculating balls and runs of each batsman\nbatsmen_summary.rename(columns={'ball':'Balls', 'batsman_runs': 'Runs'}, inplace=True)  #  renaming the columns\nbatsmen_summary['Strike Rate'] = (batsmen_summary['Runs']\/batsmen_summary['Balls'] * 100).round(2)  # calculating the strike rate\nbatsmen_summary['Matches Played'] = [matches_played[m] for m in batsmen_summary.index]  # adding the matches played by each batsman\nbatsmen_summary['Average']= (batsmen_summary['Runs']\/batsmen_summary['Matches Played']).round(2)  # calculating average runs\nbatsmen_summary.head()","82a865ce":"most_runs = batsmen_summary.sort_values(['Runs'], ascending=False)[:10]['Runs']  # making a dataframe for top 10 run scorer\nmost_runs.plot(kind='bar', title='Most Runs', figsize=(10,5), width=0.6, color=(0, 0.8, 1 , 0.6), edgecolor='black', rot=45)  # visualising top 10 run scorer","e255b46e":"batsmen_100 = batsmen_summary.sort_values(['Balls'], ascending=False)[:100]  # taking 100 batsmen who've played most balls for non-biased results\nbest_average = batsmen_100.sort_values(['Average'], ascending=False)[:10]['Average']  #  top 10 batsmen with highest average runs\nbest_average.plot(kind='bar', title='Best Average', figsize=(10,5), width=0.6, color=(1, 0.1, 0.1 , 0.6), edgecolor='black', rot=45) # visualising using bar chart","028413d8":"best_strike_rate = batsmen_100.sort_values(['Strike Rate'], ascending=False)[:10]['Strike Rate']  #  top 10 batsmen with highest strike rate\nbest_strike_rate.plot(kind='bar', title='Best Strike Rate', figsize=(10,5), width=0.6, color=(1, 0.9, 0.2, 0.6), edgecolor='black', rot=45)  # visualising using bar chart","ecf98c90":"sixes = deliveries[deliveries[ \"batsman_runs\"] == 6]  # making a dataframe containing all 6's \nmost_sixes = sixes.groupby(\"batsman\").agg({'batsman_runs': 'count'}).sort_values(['batsman_runs'], ascending=False)[:10] # top 10 batsmen with most 6's\nmost_sixes.rename(columns={'batsman_runs': 'Sixes'}, inplace=True)  # renaming the column\nmost_sixes.plot(kind='bar', title='Most Sixes', figsize=(10,5), width=0.6, color=(1, 0.5, 0.6, 0.8), edgecolor='black', rot=45) # visualising using bar chart","69c9afd8":"fours = deliveries[deliveries[ \"batsman_runs\"] == 4]  # making a dataframe containing all 4's \nmost_fours = fours.groupby(\"batsman\").agg({'batsman_runs': 'count'}).sort_values(['batsman_runs'], ascending=False)[:10] # top 10 batsmen with most 4's\nmost_fours.rename(columns={'batsman_runs': 'Fours'}, inplace=True)  # renaming the column\nmost_fours.plot(kind='bar', title='Most Fours', figsize=(10,5), width=0.6, color=(0.1, 0.2, 0.9, 0.6), edgecolor='black', rot=45)  # visualising using bar chart","16540e71":"pom = pd.DataFrame({  # making a dataframe for players of the match\n    'Player': (matches['player_of_match']),\n    'Count': 1\n})\npom = pom.groupby('Player').count().sort_values(['Count'], ascending=False)[:10]  # counting no. of player of the match titles won by each player\npom.plot(kind='bar', title='Most Player of the Match Winner', figsize=(10,5), width=0.6, color=(0, 0.5, 0.9, 0.6), edgecolor='black', rot=45)  # bar chart","3a5d5730":"def f():   # function to act as a filter which counts the values greater than 0, this function is passed in the aggregate function in next cell\n    def ipf(x):         # Note: copied from stackoverflow =D\n        return (x > 0).sum()  \n    return ipf ","b02bda39":"bowlers = deliveries.groupby('bowler').aggregate({'ball': 'count', 'total_runs': 'sum','wide_runs': f(), 'noball_runs': f(), 'player_dismissed' : 'count'})\n  # calculating balls, runs, wides, noballs and wickets of each bowler\nbowlers.columns = ['Balls','Runs','Wides','Noballs','Wickets']  # renaming the columns\nbowlers = bowlers.sort_values(['Balls'], ascending=False)[:150]  # taking 150 bowlers who've bowled most balls for non-biased results\nbowlers['Economy'] = bowlers['Runs']\/(bowlers['Balls']\/6)   # calculating economy of each bowler\nbowlers.head()","f0b63562":"most_wickets = bowlers.sort_values(['Wickets'], ascending=False)[:10]['Wickets']   #  top 10 bowlers with most wickets\nmost_wickets.plot(kind='bar', title='Most Wickets', figsize=(10,5), width=0.6, color=(0, 0, 0 , 0.6), edgecolor='black', rot=45)  # bar chart","c5ae0563":"best_economy = bowlers.sort_values(['Economy'], ascending=True)[:10]['Economy']  #  top 10 bowlers with best economy\nbest_economy.plot(kind='bar', title='Best Economy', figsize=(10,5), width=0.6, color=(0, 1, 0 , 0.6), edgecolor='black', rot=45, ylim=(6.5,6.9)) # bar chart","870897bb":"wides_noballs = bowlers.sort_values(['Economy'], ascending=True)[:10][['Wides','Noballs']]  # calculating wides and noballs of top wicket takers\nwides_noballs.plot.bar(title='Wides & Noballs', figsize=(12,5), width=0.8, color=[(0.4, 0, 0.6, 0.6),(0.7, 0.3, 1, 0.6)], edgecolor='black', rot=30)  # bar chart","9de7d107":"super_overs = deliveries[deliveries.is_super_over == 1]  # making a separate dataframe of deliveries delivered in super overs","3642465c":"super_overs_batsmen = super_overs.groupby(\"batsman\").agg({'ball': 'count','batsman_runs': 'sum'})  # calculating balls and runs of each batsman in super overs\nsuper_overs_batsmen.rename(columns={'ball':'Balls', 'batsman_runs': 'Runs'}, inplace=True)   #  renaming the columns\nsuper_overs_batsmen['Strike Rate'] = (super_overs_batsmen['Runs']\/super_overs_batsmen['Balls'] * 100).round(2)  # calculating the strike rate","2013acab":"runs = super_overs_batsmen.sort_values(['Runs'], ascending=False)[:5]['Runs']  #  getting top 5 scorer in super overs\nstrikerate = super_overs_batsmen.sort_values(['Strike Rate'], ascending=False)[:5]['Strike Rate']  #  getting 5 batsmen with highest strike rate in super overs\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,3))  #  setting up the figure and axes\nruns.plot(kind='bar', title='Most Runs in Super Overs', width=0.5, color=(0, 0.7, 0.1 , 0.6), edgecolor='black', rot=45, ax=axes[0])  # ploting first subplot\nstrikerate.plot(kind='bar', title='Best Strike Rate in Super Overs', width=0.5, color=(0.3, 1, 0 , 0.6), edgecolor='black', rot=45, ax=axes[1]) # ploting second subplot\nplt.show()  # showing the plot","7054dadc":"super_overs_bowlers = super_overs.groupby('bowler').aggregate({'ball': 'count', 'total_runs': 'sum', 'player_dismissed' : 'count'})\n  # calculating balls, runs and wickets of  bowlers in super overs\nsuper_overs_bowlers.columns = ['Balls','Runs','Wickets']  # renaming the columns\nsuper_overs_bowlers['Economy'] = super_overs_bowlers['Runs']\/(super_overs_bowlers['Balls']\/6)   # calculating economy of bowlers","35097ee2":"wickets = super_overs_bowlers.sort_values(['Wickets'], ascending=False)[:5]['Wickets']  #  getting top 5 wicket takers in super overs\neconomy = super_overs_bowlers.sort_values(['Economy'], ascending=True)[:5]['Economy']  #  getting 5 bowlers with best economy in super overs\n\nfig1, axes1 = plt.subplots(nrows=1, ncols=2, figsize=(12,3))  #  setting up the figure and axes\nwickets.plot(kind='bar', title='Most Wickets in Super Overs', width=0.5, color=(1, 0.2 , 1 , 0.7), edgecolor='black', rot=45, ax=axes1[0])  # ploting first subplot\neconomy.plot(kind='bar', title='Best Economy in Super Overs', width=0.5, color=(0.8, 0.2, 1 , 0.7), edgecolor='black', rot=45, ax=axes1[1]) # ploting second subplot\nplt.show()  # showing the plot","be210eb7":"plt.figure(figsize=(13,13))  # setting up the figure size\nax = sns.countplot(data=matches,y='venue')  # count plot for no. of matches at each venue\nfor patch in ax.patches:     #  for loop to iterate through each patch in the plot\n    ax.annotate(format(patch.get_width()), (patch.get_width()+0.5,patch.get_y()+0.5, ))  # annotating each patch\nplt.title('Matches played at each venue')  # giving a title to the plot\nplt.show()  # showing the plot","26577d4d":"venue = matches[matches.venue == 'Eden Gardens']  # making a data frame for matches played at eden gardens\nvenue.head()","438b67a7":"plt.figure(figsize=(10,6))  # setting up the figure size\nax1 = sns.countplot(data=venue,y='winner')   # count plot for no. of matches each team won at eden gardens\nplt.title('Wins of each team at Eden Gardens')  # giving a title to the plot\nplt.show()  # showing the plot","6b10361c":"batting_first_wins, bowling_first_wins = 0, 0    # declaring variables to keep records of the no. of times either the batting first team won or lost\nfor m,n in zip(venue.win_by_runs,venue.win_by_wickets):    # for loop to iterate through each match\n    if m>0:                           # if team has won by runs i.e, batting first\n        batting_first_wins+=1    # incrementing batting first variable value\n    if n>0:                            # if team has won by wickets i.e, bowling first\n        bowling_first_wins+=1    # incrementing bowling first variable value","74bf5945":"df = pd.DataFrame({'index':['Batting First Wins','Bowling First Wins'], 'value':[batting_first_wins, bowling_first_wins]})\n#  creating a data frame for the data calculated above\ndf.set_index(['index'], inplace=True)  # setting the column index as actual index\ndf['value'].plot(kind='pie', figsize=(10, 5), autopct='%1.1f%%', startangle=90, shadow=True, labels=None, pctdistance=1.12, \n                 colors=['lightskyblue', 'pink'], explode=[0.04, 0.04])   #  ploting a pie chart for the dataframe\nplt.title('Win Percentage', y=1.12)   # giving a title to the plot\nplt.axis('equal')  #  setting the axis equal to each other\nplt.legend(labels=df.index, loc='upper left')   # giving a legend to the plot\nplt.show()  # showing the plot","a9504e9a":"toss_winner_wins, toss_winner_loses = 0, 0  # declaring variables to keep records of the no. of times either the toss winner won or lost the match\nfor m,n in zip(venue.toss_winner,venue.winner):    # for loop to iterate through each match\n    if m==n:                        # if the toss winner won the match\n        toss_winner_wins+=1      # incrementing toss_winner_wins variable value\n    else:                             # if the toss winner lost the match\n        toss_winner_loses+=1     # incrementing toss_winner_loses variable value","fbdffdbf":"toss_winner = pd.DataFrame({'index':['Toss Winner Loses','Toss Winner Wins'], 'value':[toss_winner_loses, toss_winner_wins]})\n#  creating a data frame for the data calculated above\ntoss_winner.set_index(['index'], inplace=True)  # setting the column index as actual index\ntoss_winner['value'].plot(kind='pie', figsize=(10, 5), autopct='%1.1f%%', startangle=90, shadow=True, labels=None, pctdistance=1.12, \n                 colors=['lightcoral', 'lightgreen'], explode=[0.04, 0.04]) \nplt.title('Toss Winner', y=1.12)      # giving a title to the plot\nplt.axis('equal')  #  setting the axis equal to each other\nplt.legend(labels=toss_winner.index, loc='upper left') # giving a legend to the plot\nplt.show()  # showing the plot","5a845ed7":"As we can see here that MI have won the maximum number of IPL season. CSK is on the second spot. Winning maximum seasons also shows the teams' capabilities to win matches in playoffs, as most teams have almost same points in the league but thier ability to win matches in the playoffs leads them on to winning the season.\n\nNow let's view some other stats of each team.","6396caec":"Hmm.. interesting. The teams have ~17 percent more chances of winning if it bowls first and chases the target instead of batting first and then defending the target. Which is considerably high. The plot is looking pretty though :-P\n\nLet's see if toss has something to do with the result or not.","548335b1":"David warner comes on top in case of best average. But what about the strike rate? Since IPL is a limited over tournament and 20 overs at that, strike rate becomes one of the most important factor. Let's see the batsmen having the highest strike rates.","97521afe":"[Go to Top](#top) <a name=\"bowlers\"><\/a>\n\n---\n## Bowlers Analysis\n---\nNow, let's try to find out the best bowlers. For that purpose we'll need to calculate the stats of each bowler first.","3331fd62":"Let's calculate other stats such as balls faced, runs scored, strike rate and average runs of every batsman.","6e5affc1":"Lasith Malinga is the top wicket taker as shown in the graph, followed by Dwayne Bravo, Amit Mishra and Harbhajan Singh. But it doesn't matter that how many wickets a bowler has taken in a match, if he has given a lot of runs and the opponent manages to get a high total. Economy is what decides how efficient the bowler is and helps in keeping the opponent's total score low. So lets take a look at bowlers with best economy.","275ff632":"[Go to Top](#top) <a name=\"data\"><\/a>\n\n---\n# Data \n---\nWe'll use two datasets, one containing the record of all the matches and second containing the record of every ball delivered. The datsets are available [here](https:\/\/bit.ly\/34SRn3b). They contains the record of matches played in IPL seasons **2008-2019** only. The data is already cleaned and processed, so we don't need to bother about it and we can dive straight into analysis and visualization.","40615f24":"It should not be surprising, since home team wins most of the matches held at their homeground and Eden Gardens is the home ground of KKR. If we try to look at the other teams, we can see that MI has won considerably high number of matches which shows their dominance in the league.\n\nNow lets see whether a team has more chances of winning if it `Bats First` or if it `Bowls First` at the Eden Gardens.","b62d26db":"# Table of contents\n---\n* [Introduction](#introduction)\n* [Data](#data)\n* [Exploratory Analysis](#analysis)\n    * [Teams Analysis](#teams)\n    * [Batsmen Analysis](#batsmen)\n    * [Bowlers Analysis](#bowlers)\n    * [SuperOvers Analysis](#superovers)\n    * [Venue Analysis](#venue)\n* [Results and Discussion](#results)","63561ce3":"Reading stats like these is not easy. We need to visualize it for better understanding. But which attribute should we visualise in order to assume the best performing teams? Clearly `win percentage` would be best for it. So let's see the teams with highest win percentage.","b37fce12":"As we can see in the charts, Yusuf Pathan, CL White and AB de Villiers seems to be having an explosive strike rate as well as good runs which makes them strong candidates for playing in super overs.\n\nLet's analyse bowling performances now.","c4521f83":"<a name=\"introduction\"><\/a>\n\n---\n# Introduction\n---\nIf you are an Indian, `IPL` need no introduction but if you're not then `IPL` or `Indian Premier League` is probably the most exciting cricket tournament, in which cricket teams named over Indian cities but having players from all around the world participates. <br>\nSports data analytics are used not only in cricket but many other sports for improving the overall team performance and maximizing winning chances.\nReal-time data analytics can help in gaining insights even during the game for changing tactics by the team and by associated businesses for economic benefits and growth.<br>\nBesides historical analysis, predictive models are harnessed to determine the possible match outcomes that require significant number crunching and data science know-how, visualization tools and capability to include newer observations in the analysis.\nIn this work, we'll try to explore and analyse some data regarding `IPL`.\n\nLet's import all the dependencies first.","3ea10400":"It seems that `Eden Gardens` is the venue with most number of matches. So let's get the data of all the matches played at Eden Gardens.","e976efd0":"The story is completely different here. Players like Andre Russell, Sunil Narine, Rishabh Pant, Glenn Maxwell and Hardik Pandya are having the best strike rates. These batsmen, having high strike rates, are also called `Explosive Batsmen`. While they have a high strike rate, they don't have a high average score. Hence they are suitable for batting in middle and lower middle orders. Explosive batsmen batting in the depth overs can give a certain boost to the total score. \n\nIPL or 20 over tournaments in general, are fun to watch because of breathtaking 6's. While sixes are also important for high strike rate, they also lead to high total score. And we all know, that high total scores makes the matches more exiting. So let's take a look at players with most 6's.","0d00bb18":"Woah!! look at that. Chris Gayle has complete dominance when it comes to hitting 6's. But hitting more and more 6's are often considered risky and hitting 4's is considered comparatively safe. So lets see the players with most fours.","f149bf84":"<!--  -->","61915fdf":"Now that we have the neccessary stats, lets view the top wicket takers of the league as the wicket taking ability of a bowler is considered very important.","7eaf5395":"The story is completely different here. While Anil Kumble has the lowest economy but if we see both the charts, we notice that Ravi Ashwin and Sunil Narine are having low economy and high wickets. Just for fun, lets take a look at how many wides and noballs these bowlers have bowled.","ad320d30":"This dataset contains the record of balls delevered in each match and has attributes like\n* `match_id` - match id\n* `inning` - 1st or 2nd inning\n* `batting_team` - name of batting team\n* `bowling_team` - name of bowling team\n* `over` - over number in the innings\n* `ball` - ball number in the over\n* `batsman` - name of batsman on strike\n* `non_striker` - name of batsman at non-striker end\n* `bowler` - name of bowler\n* `is_super_over` - is it a super over? (binary value 0 or 1)\n* `wide_runs` - how many runs conceded by wide\n* `bye_runs` - number of bye runs conceded\n* `legbye_runs` - number of leg bye runs conceded\n* `noball_runs` - number of no ball runs conceded\n* `penalty_runs` - number of penalty runs conceded\n* `batsman_runs` - number of runs scored by batsman\n* `total_runs` - total runs off the ball\n* `player_dismissed` - name of the batsman dismissed\n* `dismissal_kind` - how the bastman is dismissed(LBW, hit-wicket, run-out, etc)\n* `fielder` - name of the player fielding the ball","af8a234b":"(\u2299\u02cd\u2299) looks like Ashwin is at the top in this list.","6651ee47":"This chart shows that nearly 56 times out of 100, the team which has won the toss, end up winning the match too. So toss do has an impact on the final outcome with over 11 percent more chances of the toss winner to win the match. In the same fashion, any venue can be analysed.","a012d428":"Chris Gayle and AB de Villiers have complete dominance in this category. But does it mean that they are the best batsmen? Well they should be but what about other good batsmen? If we look at every visualization above, we can see that players like David Warner, MS Dhoni, KL Rahul, Rohit Sharma and Virat Kohli have also performed good in many categories. So these are also valuable players for their respective team.","21d7584e":"Now let's see which team has won maximum number of IPL seasons.","b555408e":"[Go to Top](#top) <a name=\"results\"><\/a>\n\n---\n# Results and Discussion \n---","fc9eb639":"## Thanks for viewing!","883b00b8":"<h1 style=\"font-size: 230%;\"> Indian Premier League Data Analysis 2008-2019<\/h1> <a name=\"top\"><\/a>\n\n## ***Amrutanshu Dash***\n\n---","3e618724":"Let's take a look at the dataset containing matches.","7a69d286":"[Go to Top](#top) <a name=\"venue\"><\/a>\n\n---\n## Venue Analysis\n---\nUnlike other sports, cricket stadium\u2019s size and shape is not fixed except the dimensions of the inner circle and pitch which are 30 yards and 22 yards respectively.  Outfield variations and pitch can have a substantiate effect on bowling and batting and hence it can change the outcome of the match too. So now we'll try to visualize the affect of venue on the outcome of the match. \n\nWe'll find the most popular cricket stadium i.e, the cricket stadium where most number of matches are played.","40843d39":"Let's view the batsmen who've scored the most runs.","e4554649":"[Go to Top](#top) <a name=\"batsmen\"><\/a>\n\n---\n## Batsmen Analysis\n---\n\nNow, let's try to find out the best batsmen. For that, we'll first caculate matches played by each batsman to be used later in calculating other stats.","239fe0e2":"Now that we have the dataframe containing all the deliveries delivered in super overs, lets analyse batting performances first.","e6d091c8":"Now that we have the required dataframe let's see which team has won the maximum number of matches here.","c7e63e70":"As we can see in the bar plot, CSK and MI are having win percentage considerably higher than other teams. So, it's safe to assume them as the strongest teams but MI has won more titles so we can say that MI is the strongest team in IPL.","ec4d4598":"As we can see this dataset contains the attributes such as\n* `id` - match id\n* `season` - ipl season\n* `city` - location of match\n* `date` - date of match\n* `team1 & team2` - name of teams playing the match\n* `toss_winner` - team winning the toss\n* `toss_decision `- decision to bat\/bowl\n* `result` - match result: normal\/tie\/no result\n* `dl_applied` - application of dl method (binary value 0 or 1)\n* `win_by_runs` - runs a team won the match by\n* `win_by_wickets` - wickets a team won the match by\n* `player_of_match` - best performer of the match\n* `venue` - stadium at which match is played\n* `umpire1,2,3` - names of umpires\n\nNow let's take a look at the other dataset.","831677a9":"Virat Kohli and Suresh Raina are the top scorers in this graph. While it may seem impressive, but having `most runs` is just a `record making` thing and not a `match winning` thing. A good batsman is the one who shows consistency i.e, who scores high runs on average. Now let's see who has the best average.","107d4db3":"Shikhar Dhawan comes on top in case of most 4's. But Chris Gayle is not too behind here too. But how do we know which player performed good most of the times. A simple way for this is to compare number of `Payer of the Match` titles won by each player.","e089bf38":"[Go to Top](#top) <a name=\"analysis\"><\/a>\n\n---\n# Exploratory Analysis\n---\nLet's start the analysis of the data. The analysis is in the manner that,\n    frist, we'll analyse the overall [teams'](#teams) performances,\n    then we'll analyse the performances of [batsmen](#batsmen),\n    after that [bowling](#bowlers) performances, [superover](#superovers) analysis and then [venue](#venue) and toss analysis. \n\n <a name=\"teams\"><\/a>\n \n ---\n## Teams Analysis\n---\nWe'll try to find out the most successful team in the league. First, let's change the names of teams with their abbreviated names for simplicity.","9c4e0526":"[Go to Top](#top) <a name=\"superovers\"><\/a>\n\n---\n## SuperOvers Analysis\n---\nA Super Over is a tie-breaking method, where both teams play a single, additional over of six balls to determine the winner of the match. A match which goes to a Super Over is officially declared a \"tie\", and won by the team who score the most runs in the Super Over which makes them thrilling. It is highly important for players to play at their best in the super over because the result of match depends on it. \n\nLet's try to find the best batsmen and bowlers for super overs.","d20cdf72":"The outcome of the match depends on various factors and players sometimes changs it with their exceptional performances, so these figures should never be taken for granted. However, sports data analytics are used for improving the overall team performance and maximizing winning chances. Following are the results of our analysis. \n\n**Teams Analysis**\n\n`Mumbai Indians` have won the maximum number of IPL season and also has one of the highest win percentage which makes it the most successful team in IPL.\n`Chennai Super Kings` comes at second winning the second highest number of titles and highest winning percentage.\n\n**Batsmen Analysis**\n\n`Chris Gayle` and `AB de Villiers` dominates most of the results of the analysis conducted above and hence can be considered as best while batsmen like `David Warner`, `MS Dhoni` and `Rohit Sharma` has also proved their values among the years. Other good batsmen, according to the analysis are `KL Rahul`,  `Suresh Raina` and `Virat Kohli`. \n\n**Bowlers Analysis**\n\n`Anil Kumble` is at the top of the list in terms of having the best economy while `Lasith Malinga` has taken most number of wickets. Other good bowlers are `Dwayne Bravo`, `Harbhajan Singh`, `Bhuvneshwar Kumar`, `R Ashwin`, `Sunil Narine` and `Rashid Khan`.\n\n**SuperOver Analysis**\n\nIn Batting, `Yusuf Pathan` and `AB de Villiers` are the best candidates while other good players are `Chris Gayle` and `kieran Pollard`.\nIn bowling, `Jasprit Bumrah` is probably the best bowler to bowl in super overs.\n\n**Venue Analysis**\n\nAs we have seen in the analysis of `Eden Gardens`, there are high chances that at the `Home Ground`, the `Home Team` will win the match. Other than that, the teams have `~17 percent more` chances if it `Bowls First`and over `11 percent more` chances of winning the match if it wins the toss.","a6d11f7f":"While James Faulkner may seem like a good recommendation here, but the key to win in super overs is low economy. So Jasprit Bumrah is probably the best bowler to bowl in super overs."}}