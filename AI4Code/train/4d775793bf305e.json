{"cell_type":{"9624126b":"code","06640419":"code","ffab81b1":"code","98fe82f2":"code","a0dc2d6b":"code","79b05d49":"code","2ae0af75":"code","f6d39a76":"code","76e3fc68":"code","499962c8":"code","cb773fe5":"code","fd92db2b":"code","3513c62a":"code","5d543701":"code","68be6581":"code","c798a549":"code","56817ba6":"code","9b32f31d":"code","31aa716c":"code","89616a8c":"code","975fb891":"code","87fb641d":"code","556ed4d7":"code","5462677a":"code","c0f172be":"code","8a4ec76d":"code","8e38cdff":"code","1999ad26":"code","67bcbe5d":"code","dbcd2f88":"code","a769f8c5":"code","f656cca9":"code","b07d34e9":"code","243cf241":"code","da3a358f":"code","f2b38310":"code","16c64484":"code","5329acbb":"code","0e4ba453":"code","aa6de8b1":"code","d3fa0052":"code","9a68f696":"code","562ea01a":"code","289ad0b8":"code","e9f51c8d":"code","5825b320":"code","3b983735":"code","7309f6e1":"code","427d8047":"code","2e274a88":"code","a2a59d93":"code","a95dd16d":"code","f5ebaa72":"code","620be005":"code","cfb23984":"code","b49993e9":"code","396cf61d":"code","dc6df5d2":"code","067809b3":"code","2339ae04":"code","a438b560":"code","4ebeeeb4":"code","19067646":"code","3c185d03":"code","3aab3aa0":"code","e9735461":"code","9b4fab76":"code","59726aa1":"code","9f2a4ffa":"code","8ee09b93":"code","b2ca2bc2":"code","0e773a19":"code","4bbfbd95":"code","f2ea5072":"code","f0a41833":"code","5441ba10":"code","e32ec41e":"code","c10ea609":"code","3e9f2677":"code","247bac81":"code","3439194e":"markdown","b15788ed":"markdown","132d92da":"markdown","2d7e99c9":"markdown","7af1f8ce":"markdown","86bf0200":"markdown","07f749f8":"markdown","2186758c":"markdown","7a744a1c":"markdown","fbeb59e3":"markdown","21da663e":"markdown","79c35dba":"markdown","d0e8a5c0":"markdown","c7d9a301":"markdown","f491a833":"markdown","fdffb8af":"markdown","4112279c":"markdown","40c8fbcf":"markdown","0b89ff60":"markdown","42cdf863":"markdown","e23ee8ef":"markdown","799c6ed8":"markdown","f038c801":"markdown","3d6c053a":"markdown","51e62d95":"markdown","e955ce9a":"markdown","51fec1c4":"markdown","31db6e04":"markdown","b4fb77da":"markdown","a7ac4659":"markdown"},"source":{"9624126b":"#data analysis\nimport pandas as pd\nimport numpy as np\n\n#data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#to ingore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","06640419":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","ffab81b1":"train.head()","98fe82f2":"train.shape","a0dc2d6b":"test.head()","79b05d49":"test.head()","2ae0af75":"train.describe()","f6d39a76":"test.describe()","76e3fc68":"train['Embarked'].value_counts()","499962c8":"train['SibSp'].value_counts()","cb773fe5":"sns.barplot(x='Pclass', y='Survived',data=train)","fd92db2b":"sns.barplot(x='Sex', y='Survived', data=train)","3513c62a":"sns.distplot((train['Age'].dropna()), kde=False)","5d543701":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","68be6581":"train['Title'] = train['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\ntest['Title'] = test['Name'].str.extract('([A-Za-z]+)\\.', expand=False)","c798a549":"train.head()","56817ba6":"train['Title'] = train['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major','Rev','Jonkheer','Dona'],'Rare')\ntrain['Title'] = train['Title'].replace(['Countess','Sir','Lady'],'Royal')\ntrain['Title'] = train['Title'].replace('Mlle','Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme','Mrs')","9b32f31d":"test['Title'] = test['Title'].replace(['Capt','Col','Don','Dr','Major','Rev','Jonkheer','Dona'],'Rare')\ntest['Title'] = test['Title'].replace(['Countess','Sir','Lady'],'Royal')\ntest['Title'] = test['Title'].replace('Mlle','Miss')\ntest['Title'] = test['Title'].replace('Ms', 'Miss')\ntest['Title'] = test['Title'].replace('Mme', 'Mrs')","31aa716c":"train[['Title','Age']].groupby('Title').mean()","89616a8c":"for i in train['Title']:\n    if i=='Master':\n        train['Age'] = train['Age'].fillna(4)\n    elif i=='Miss':\n        train['Age'] = train['Age'].fillna(22)\n    elif i=='Mr':\n        train['Age'] = train['Age'].fillna(32)\n    elif i=='Mrs':\n        train['Age'] = train['Age'].fillna(36)\n    elif i=='Rare':\n        train['Age'] = train['Age'].fillna(46)\n    else:\n        train['Age'] = train['Age'].fillna(41)","975fb891":"train.isnull().sum()","87fb641d":"test[['Title','Age']].groupby('Title').mean()","556ed4d7":"train.head()","5462677a":"for i in test['Title']:\n    if i=='Master':\n        test['Age'] = test['Age'].fillna(7)\n    elif i=='Miss':\n        test['Age'] = test['Age'].fillna(21)\n    elif i=='Mr':\n        test['Age'] = test['Age'].fillna(32)\n    elif i=='Mrs':\n        test['Age'] = test['Age'].fillna(38)\n    elif i=='Rare':\n        test['Age'] = test['Age'].fillna(43)\n    else:\n        test['Age'] = test['Age'].fillna(41)\n        \n        \ntest.isnull().sum()","c0f172be":"test[['Pclass','Fare']].groupby('Pclass').mean()","8a4ec76d":"test['Fare'] = test['Fare'].fillna(12)","8e38cdff":"test.isnull().sum()","1999ad26":"train.isnull().sum()","67bcbe5d":"train['Cabin'].shape","dbcd2f88":"train['N_cabin'] = (train['Cabin'].notnull().astype('int'))\ntest['N_cabin'] = (test['Cabin'].notnull().astype('int'))","a769f8c5":"test['Cabin'].shape","f656cca9":"train['N_cabin'].shape","b07d34e9":"test['N_cabin'].shape","243cf241":"train = train.drop(['Cabin'], axis=1)\ntest = test.drop(['Cabin'], axis=1)","da3a358f":"train['Embarked'] = train['Embarked'].fillna('S')","f2b38310":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntrain['Embarked'] = le.fit_transform(train['Embarked'])\ntest['Embarked'] = le.fit_transform(test['Embarked'])","16c64484":"train.head()","5329acbb":"sex_mapping = {'male':0, 'female':1}\n\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)","0e4ba453":"train.head()","aa6de8b1":"train[['Title','Survived']].groupby(['Title'], as_index=False).mean().sort_values('Survived')","d3fa0052":"Title_mapping = {'Mr': 1,'Rare': 2,'Master': 3,'Miss': 4,'Mrs': 5,'Royal': 6}\n\ntrain['Title'] = train['Title'].map(Title_mapping)\ntest['Title'] = test['Title'].map(Title_mapping)","9a68f696":"train.loc[train['Title']]","562ea01a":"train_name = train['Name']\nfor i in train['Name']:\n    train['Name'] = train['Name'].replace(i, len(i))","289ad0b8":"train.head()","e9f51c8d":"test_name = test['Name']\nfor i in test['Name']:\n    test['Name'] = test['Name'].replace(i, len(i))","5825b320":"test['Name'].describe()","3b983735":"bins = [0,25,40, np.inf]\nname_labels = ['s_name', 'm_name', 'l_name']\ntrain['Name_len'] = pd.cut(train['Name'], bins, labels=name_labels)\ntest['Name_len'] = pd.cut(test['Name'], bins, labels=name_labels)","7309f6e1":"train['Name_len'].value_counts()","427d8047":"train[['Name_len', 'Survived']].groupby('Name_len').mean()","2e274a88":"name_mapping = {'s_name':1, 'm_name':2, 'l_name':3}\n\ntrain['Name_len'] = train['Name_len'].map(name_mapping)\ntest['Name_len'] = test['Name_len'].map(name_mapping)","a2a59d93":"train.head()","a95dd16d":"train = train.drop(['Name', 'PassengerId'], axis=1)\ntest = test.drop(['Name'], axis=1)","f5ebaa72":"train['Age'].hist(bins=30,color='darkred',alpha=0.8)","620be005":"bins = [0,5,12,18,24,35,60,np.inf]\nAge_label = ['Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n\ntrain['AgeGroup'] = pd.cut(train['Age'], bins, labels = Age_label)\ntest['AgeGroup'] = pd.cut(test['Age'], bins, labels = Age_label)","cfb23984":"train[['AgeGroup', 'Survived']].groupby('AgeGroup').mean()","b49993e9":"age_mapping = {'Baby':1, 'Child':2, 'Teenager':3, 'Student':4, \n               'Young Adult':5,'Adult':6, 'Senior':7}\n\n\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)","396cf61d":"train.head()","dc6df5d2":"train['FareBand'] = pd.qcut(train['Fare'], 8, labels = [1,2,3,4,5,6,7,8])\ntest['FareBand'] = pd.qcut(train['Fare'], 8, labels= [1,2,3,4,5,6,7,8])","067809b3":"#scaling data in fare and age columns\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nmms = MinMaxScaler()\n\ntrain['Fare'] = mms.fit_transform(train['Fare'].values.reshape(-1, 1))\ntest['Fare'] = mms.fit_transform(test['Fare'].values.reshape(-1, 1))\n\ntrain['Age'] = mms.fit_transform(train['Age'].values.reshape(-1,1))\ntest['Age'] = mms.fit_transform(test['Age'].values.reshape(-1,1))","2339ae04":"train.head()","a438b560":"train['FamilySize'] = train['SibSp']+train['Parch']+1\ntest['FamilySize'] = train['SibSp']+train['Parch']+1\n","4ebeeeb4":"sns.distplot(train['FamilySize'], kde=False)","19067646":"train = train.drop(['Ticket'], axis=1)\ntest = test.drop(['Ticket'], axis=1)","3c185d03":"combine = [train, test]\n\nfor dataset in combine:\n    dataset['Single'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'Single'] = 1\n    \ntrain[['Single', 'Survived']].groupby(['Single'], as_index=False).mean()\n","3aab3aa0":"train = train.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest = test.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)","e9735461":"test.head()","9b4fab76":"train.head()","59726aa1":"X_train = train.drop('Survived', axis=1)\nY_train = train['Survived']\nX_test = test.drop('PassengerId', axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","9f2a4ffa":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_logreg = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_logreg","8ee09b93":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbc = GradientBoostingClassifier()\ngbc.fit(X_train, Y_train)\ny_pred = gbc.predict(X_test)\nacc_gbc = round(gbc.score(X_train, Y_train) * 100, 2)\nacc_gbc","b2ca2bc2":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\ny_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","0e773a19":"from sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\ny_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train)* 100, 2)\nacc_linear_svc","4bbfbd95":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ndt.fit(X_train, Y_train)\ny_pred = dt.predict(X_test)\nacc_dt = round(dt.score(X_train, Y_train)* 100, 2)\nacc_dt","f2ea5072":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier()\nrfc.fit(X_train, Y_train)\ny_pred = rfc.predict(X_test)\nacc_rfc = round(rfc.score(X_train, Y_train)* 100, 2)\nacc_rfc","f0a41833":"from sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\ny_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train)* 100, 2)\nacc_perceptron","5441ba10":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, Y_train)\ny_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train)* 100, 2)\nacc_knn","e32ec41e":"from sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\ny_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train)* 100, 2)\nacc_sgd","c10ea609":"from sklearn.naive_bayes import GaussianNB\n\ngnb = GaussianNB()\ngnb.fit(X_train, Y_train)\ny_pred = gnb.predict(X_test)\nacc_gnb = round(gnb.score(X_train, Y_train)* 100, 2)\nacc_gnb","3e9f2677":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Gradient Boosting Classifer',\n              'Support Vector Machine','Linear SVC','Decision Tree',\n              'Random Forest','Perceptron','KNN',\n              'Stochastic Gradient Descent',\n              'Naive Bayes'],\n    'Accuracy' : [acc_logreg,acc_gbc,acc_svc,\n                  acc_linear_svc,acc_dt,acc_rfc,\n                  acc_perceptron,acc_knn,acc_sgd,\n                  acc_gnb]\n})\n\nmodels.sort_values(by='Accuracy', ascending=False)","247bac81":"\npassid = test['PassengerId']\npredictions = rfc.predict(test.drop('PassengerId', axis=1))\n\n\nsubmission = pd.DataFrame({ 'PassengerId' : passid, 'Survived': predictions })\nsubmission.to_csv('submission.csv', index=False)","3439194e":"### Gradient Boosting Classifier","b15788ed":"### Decision Tree Classifier","132d92da":"### Missing Value Treatment","2d7e99c9":"# Titanic Prediction,EDA","7af1f8ce":"### Random Forest Classifier","86bf0200":"### Age","07f749f8":"#### Will drop Parch, SibSp and FamilySize features","2186758c":"### Linear SVC","7a744a1c":"## Data Preparations","fbeb59e3":"### Embarked","21da663e":"### Importing Libraries","79c35dba":"### Gaussian Naive Bayes","d0e8a5c0":"### Stochastic Gradient Descent","c7d9a301":"### Cabin","f491a833":"# Analysis and Visualization of Numerical and Categorical Variables","fdffb8af":"# Modeling and Evaluation","4112279c":"### Logistic Regression","40c8fbcf":"### Loading Data","0b89ff60":"### Sex","42cdf863":"#### I am a new to data science and machine learning, and this is my first submission.If you have any suggestions on how to improve this notebook please let me know! Thank you! ","e23ee8ef":"### Support Vector Machines","799c6ed8":"### Name and Title","f038c801":"## Feature Engineering","3d6c053a":"### KNN","51e62d95":"### Perceptron","e955ce9a":"### AgeGroup","51fec1c4":"### Splitting the train Data","31db6e04":"### Fare","b4fb77da":"### Family Size","a7ac4659":"### Visualization"}}