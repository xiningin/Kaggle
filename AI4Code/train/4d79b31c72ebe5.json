{"cell_type":{"64769160":"code","f7f19733":"code","e37fb1ab":"code","81fb002b":"code","a679a971":"code","c0e6441a":"code","36e151b1":"code","5d88cbb8":"code","15a379d6":"code","213daf3d":"code","9cd2a6b8":"code","cb208adc":"code","74758ed9":"code","3d973905":"code","42e46efa":"code","36b117f8":"code","7edd1b7a":"code","5b9cadc6":"code","3e22347c":"code","5bb24569":"code","a767a5ab":"code","e0f51b56":"code","d8b4aca3":"markdown","93327af2":"markdown","32cb283f":"markdown","86cfbb30":"markdown","025be113":"markdown","29bd3ca5":"markdown","b343acd0":"markdown","720dc74d":"markdown","c2c499fb":"markdown","e90da374":"markdown","a9c288cd":"markdown","65c08697":"markdown","77b07715":"markdown","37e815cd":"markdown"},"source":{"64769160":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f7f19733":"data = os.listdir(\"..\/input\/train_images\")\ndata_labels = pd.read_csv('..\/input\/train.csv')","e37fb1ab":"x = data_labels['id_code']\ny = data_labels['diagnosis']","81fb002b":"X_img = []\ny_p = []\ndef create_training_set(label, path):\n    img = cv2.imread(path, cv2.IMREAD_COLOR)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img = cv2.resize(img, (32,32))\n    X_img.append(np.array(img))\n    y_p.append(str(label))","a679a971":"from tqdm import tqdm\nTRAIN_DIR = '..\/input\/train_images'\nfor id_code, diagnosis in tqdm(zip(x,y)):\n    path = os.path.join(TRAIN_DIR, '{}.png'.format(id_code))\n    create_training_set(diagnosis, path)","c0e6441a":"from keras.utils import to_categorical\n#Y = to_categorical(y_p)\nY = np.array(y_p)\nX= np.array(X_img)\nX=X\/255","36e151b1":"Y = np.array(y_p)\nY = Y.astype(int)","5d88cbb8":"from sklearn.model_selection import train_test_split\nX_train, X_valid, Y_train, Y_valid = train_test_split(X, Y, test_size=0.20, random_state=0)","15a379d6":"X_train = X_train.reshape(2929,1024)\nX_test = X_valid.reshape(733,1024)","213daf3d":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,Y_train)","9cd2a6b8":"y_pred = lr.predict(X_test)\nfrom sklearn.metrics import accuracy_score as ac\nac(Y_valid, y_pred)","cb208adc":"from sklearn.metrics import confusion_matrix\ndef quadratic_kappa(actuals, preds, N):\n    w = np.zeros((N,N))\n    O = confusion_matrix(actuals, preds)\n    for i in range(len(w)): \n        for j in range(len(w)):\n            w[i][j] = float(((i-j)**2)\/(N-1)**2)\n    \n    act_hist=np.zeros([N])\n    for item in actuals: \n        act_hist[item]+=1\n    \n    pred_hist=np.zeros([N])\n    for item in preds: \n        pred_hist[item]+=1\n                         \n    E = np.outer(act_hist, pred_hist);\n    E = E\/E.sum();\n    O = O\/O.sum();\n    \n    num=0\n    den=0\n    for i in range(len(w)):\n        for j in range(len(w)):\n            num+=w[i][j]*O[i][j]\n            den+=w[i][j]*E[i][j]\n    return (1 - (num\/den))","74758ed9":"quadratic_kappa(Y_valid, y_pred,5)","3d973905":"test_df = pd.read_csv('..\/input\/test.csv')\ntest_df.shape","42e46efa":"test_ids = test_df['id_code']","36b117f8":"test_images = []\ndef create_test_set(path):\n    img = cv2.imread(path,cv2.IMREAD_COLOR)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    img = cv2.resize(img, (32,32))\n    test_images.append(np.array(img))","7edd1b7a":"for id_code in tqdm(test_ids):\n    path = os.path.join('..\/input\/test_images','{}.png'.format(id_code))\n    create_test_set(path)","5b9cadc6":"test_x = np.array(test_images)\ntest_x.shape","3e22347c":"test_x = test_x.reshape(1928,32*32)","5bb24569":"pred = lr.predict(test_x)\npred","a767a5ab":"np.unique(pred)","e0f51b56":"p = pd.DataFrame({'id_code':test_ids,'diagnosis':pred})\np.to_csv('submission.csv',index=False)","d8b4aca3":"model = Sequential()\nmodel.add(Convolution2D(3, (3, 3), padding='same',\n                 input_shape=(32,32,1)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\n\n'''model.add(Convolution2D(32, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization()    '''\n\n'''model.add(Convolution2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization()) '''\n\nmodel.add(Convolution2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64))\nmodel.add(Activation('softmax'))\nmodel.add(Dense(5))\nmodel.add(Activation('softmax'))\n\nmodel.summary()","93327af2":"pred.astype(int)","32cb283f":"y_pred = model.predict(X_valid)\ny_pred = np.argmax(y_pred,axis = 1)\nnp.unique(y_pred)","86cfbb30":"Y_valid1 = np.argmax(Y_valid,axis =1)","025be113":"from keras.preprocessing.image import ImageDataGenerator\ntransform = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\ntransform.fit(X_train)","29bd3ca5":"from keras import optimizers \nada = optimizers.Adagrad(lr = 0.0001)\nfrom keras import losses","b343acd0":"test_X=np.array(test_images)\ntransform.fit(test_X)\npred=model.predict(test_X)","720dc74d":"pred = np.argmax(pred, axis=1)","c2c499fb":"model.fit(X_train,Y_train,epochs = 10,batch_size = 20)","e90da374":"model.compile(optimizer = ada, loss = losses.categorical_crossentropy, metrics = ['acc'])","a9c288cd":"transform.fit(X_valid)","65c08697":"model = Sequential()\nmodel.add(Convolution2D(filters=16, kernel_size=2, padding='same', activation='relu', input_shape=(150,150,3)))\nmodel.add(Activation('elu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(32, (3, 3), padding='same'))\nmodel.add(Activation('elu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\n\nmodel.add(Convolution2D(64, (3, 3), padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64))\nmodel.add(Activation('softmax'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(5))\nmodel.add(Activation('softmax'))\n\nmodel.summary()","77b07715":"   This function calculates the Quadratic Kappa Metric. It returns the Quadratic Weighted Kappa metric score between    the actual and the predicted values of adoption rating.","37e815cd":"from keras.layers import Dense,Convolution2D,Flatten,MaxPooling2D,Activation,Dropout\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization"}}