{"cell_type":{"c2cf8e55":"code","8d35e6dd":"code","4b0808ab":"code","a36d36fb":"code","45446460":"code","06f86b4b":"code","18e4b1b4":"code","38c58289":"code","131bba7e":"code","9421ddca":"code","b9507d37":"code","16edd2ce":"code","38e0bf2a":"code","a6fde430":"code","a7e10a67":"code","23d32f78":"code","3042e7ff":"code","dbdf976c":"code","c3444138":"code","9e8ecde9":"code","85a609ec":"code","3c4516fd":"code","9a9fb7e3":"code","316e6768":"code","4933c0d1":"code","8a3f823e":"code","9c5853b0":"code","be76e9dd":"code","6f75c4ad":"code","20f6ae64":"code","65d8c8fd":"code","273a58cd":"code","f96ce60b":"code","81b7eddf":"code","9e15fb93":"code","832f1371":"code","f7181bed":"code","95df15a6":"code","6bf572c3":"code","86d2a55c":"code","6528336f":"code","c0c97a85":"code","2763de64":"code","e2b42ee5":"code","57d89b5c":"code","b7e215a3":"code","ba38f490":"code","f1209455":"code","8ac6fe8a":"code","99224f6a":"code","f7ea0973":"code","fe2ef18c":"code","4bcb2103":"code","4b225941":"code","ba878e68":"code","10b307e0":"code","fc4eb471":"code","8e7596ca":"code","678e4edc":"code","d3cb4298":"code","4db2e286":"code","d80493c3":"code","ae386963":"code","7279bc89":"code","8290d963":"code","cd09232c":"code","5abc3203":"code","a7123532":"code","f74510a1":"code","41ef0b78":"code","3d0564a1":"code","2fc0dc1c":"code","103b67b7":"code","e8ad34b1":"code","79bdf5d4":"code","567f8d70":"code","3a6a22c8":"code","b20f3e5c":"code","39de0186":"code","3b5528fc":"code","ff4d7c5d":"code","343039d9":"code","cab46e2b":"code","a5c6a075":"code","69b16306":"code","04663f06":"code","70e26f2b":"code","19a18950":"code","25b7a3f3":"code","86cf54da":"code","92e42e51":"code","96b1fbfa":"code","a3542bd0":"code","a342630b":"code","80c4e72a":"code","fd016d57":"code","abde2cf2":"code","b4c8d8d6":"code","c3b55fde":"code","95ec0e5d":"code","936a8abc":"code","8dd6ca95":"code","a5641636":"code","474f4a7b":"code","3ec2a349":"code","1c47f929":"code","522e15ef":"code","cde11d05":"code","068e6f4f":"code","23cf6b39":"code","bfc72a4b":"code","d476437f":"code","67e2883c":"code","ab65be25":"code","9d0530bd":"code","182d75a2":"code","c7089083":"code","a1bb98ec":"code","5373065c":"code","8b932803":"code","e4c0900c":"code","9a1c6a38":"code","ce7f5bb9":"code","193a148d":"code","0ecbfc51":"code","60038555":"code","94cc89f8":"code","c7eb881b":"code","1686a05b":"code","dd325dd4":"code","15e68dc6":"code","e254712f":"code","3130e625":"code","c8eb9014":"code","46460004":"code","0e7a4d4f":"code","e08d7a8e":"code","9708059a":"code","79ed2a87":"code","9d902353":"code","1be240ca":"code","968d7104":"code","200079d8":"code","990b0ad9":"code","4594e616":"code","fae6ffe6":"code","76a6755d":"code","b576cfd7":"code","7e92c636":"code","e351111c":"code","3d41ef05":"code","755c3c64":"code","6692c299":"code","dfe8f7a2":"code","5e5b33b8":"code","6726f7a2":"code","4fa892c9":"code","c11a79b5":"code","c05c44a8":"code","39a0aca1":"code","edc1b300":"code","14a2d228":"code","3e326f86":"code","1c1d8e1f":"code","17b3cc40":"code","34018d0c":"code","36f1cbd4":"code","92aeb7ba":"code","4f53b938":"code","6a19b642":"code","76452f20":"code","8e8b054c":"code","95bbc0d3":"code","4d60187b":"code","8b70f90f":"code","764c3c5a":"code","f6f96e84":"markdown","e76c956b":"markdown","73460435":"markdown","403d7bd0":"markdown","de12653c":"markdown","0358adc1":"markdown","bfc8ad5a":"markdown","b3b26390":"markdown","cc255893":"markdown","499c1323":"markdown","c81cfa97":"markdown","a291e126":"markdown","521050e6":"markdown"},"source":{"c2cf8e55":"import sklearn.model_selection as model_selection\nfrom sklearn import metrics\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nimport matplotlib as mpl\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom statsmodels import api as sm\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso,ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom pandas_profiling import ProfileReport\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport itertools\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nimport lightgbm as lgbm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom datetime import datetime\nfrom mlxtend.plotting import plot_learning_curves\nfrom scipy.stats import kurtosis\nfrom scipy.stats import skew\nimport warnings\nwarnings.simplefilter('ignore')\n\nmpl.rcParams['agg.path.chunksize'] = 100000","8d35e6dd":"farm_data = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/farm_data.csv\")","4b0808ab":"train_data = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/train_data.csv\")","a36d36fb":"test_data = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/test_data.csv\")","45446460":"train_weather = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/train_weather.csv\")","06f86b4b":"test_weather = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/test_weather.csv\")","18e4b1b4":"submission_file = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/sample_submission1-1578562773139.csv\")","38c58289":"submission_file_large = pd.read_csv(\"\/content\/drive\/My Drive\/PHD\/sample_submission.csv\")","131bba7e":"ingw_demand = pd.read_excel(\"\/content\/drive\/My Drive\/PHD\/Ing_w_demand.xlsx\")","9421ddca":"ProfileReport(farm_data)","b9507d37":"farm_data = farm_data.drop_duplicates(subset=['farm_id'],keep='first')","16edd2ce":"#farm_data = farm_data.drop(columns=['operations_commencing_year','num_processing_plants'])","38e0bf2a":"farm_data.shape","a6fde430":"farm_data.isna().sum()","a7e10a67":"farm_data['deidentified_location'].unique()","23d32f78":"sns.relplot(x='deidentified_location',y='farm_area',hue='farming_company',data=farm_data)\nplt.xticks(rotation='90')","3042e7ff":"sns.boxplot(x=farm_data['farm_area'])","dbdf976c":"def remove_outlier(df_in, col_name):\n    q1 = df_in[col_name].quantile(0.25)\n    q3 = df_in[col_name].quantile(0.75)\n    iqr = q3-q1 #Interquartile range\n    low  = q1-1.5*iqr\n    high = q3+1.5*iqr\n    df_out = df_in.loc[(df_in[col_name] > low) & (df_in[col_name] < high)]\n    return df_out","c3444138":"farm_data = remove_outlier(farm_data, 'farm_area')","9e8ecde9":"farm_data.shape","85a609ec":"train_data.head()","3c4516fd":"train_data.tail()","9a9fb7e3":"train_data.shape","316e6768":"train_data.isna().sum()","4933c0d1":"train_data  = remove_outlier(train_data, 'yield')","8a3f823e":"train_data.shape","9c5853b0":"ProfileReport(train_weather)","be76e9dd":"train_weather = train_weather.rename(columns= {'timestamp' : 'date'})","6f75c4ad":"test_weather = test_weather.rename(columns= {'timestamp' : 'date'})","20f6ae64":"test_weather.columns","65d8c8fd":"train_weather.columns","273a58cd":"train_weather.shape","f96ce60b":"train_weather.isna().sum()","81b7eddf":"test_weather.isna().sum()","9e15fb93":"train_weather.describe()","832f1371":"total = train_weather.isnull().sum().sort_values(ascending=False)\npercent = (train_weather.isnull().sum()\/train_weather.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total,percent],axis=1, keys=['Total','Percent'])\nf, ax = plt.subplots(figsize=(15,6))\nplt.xticks(rotation='90')\nsns.barplot(x=missing_data.index,y=missing_data['Percent'])\nplt.xlabel('Features',fontsize=15)\nplt.ylabel(\"Percent of missing values\", fontsize=15)\nplt.title('Percentage of missing values - Featurewise', fontsize = 15)\nmissing_data.head()","f7181bed":"train_weather['cloudiness'] = train_weather['cloudiness'].fillna(train_weather['cloudiness'].mean())\ntrain_weather['temp_obs'] = train_weather['temp_obs'].fillna(train_weather['temp_obs'].mean())\ntrain_weather['wind_direction'] = train_weather['wind_direction'].fillna(train_weather['wind_direction'].mean())\ntrain_weather['dew_temp'] = train_weather['dew_temp'].fillna(train_weather['dew_temp'].mean())\ntrain_weather['pressure_sea_level'] = train_weather['pressure_sea_level'].fillna(train_weather['pressure_sea_level'].mean())\ntrain_weather['precipitation'] = train_weather['precipitation'].fillna(train_weather['precipitation'].mean())\ntrain_weather['wind_speed'] = train_weather['wind_speed'].fillna(train_weather['wind_speed'].mean())","95df15a6":"test_weather['cloudiness'] = test_weather['cloudiness'].fillna(test_weather['cloudiness'].mean())\ntest_weather['temp_obs'] = test_weather['temp_obs'].fillna(test_weather['temp_obs'].mean())\ntest_weather['wind_direction'] = test_weather['wind_direction'].fillna(test_weather['wind_direction'].mean())\ntest_weather['dew_temp'] = test_weather['dew_temp'].fillna(test_weather['dew_temp'].mean())\ntest_weather['pressure_sea_level'] = test_weather['pressure_sea_level'].fillna(test_weather['pressure_sea_level'].mean())\ntest_weather['precipitation'] = test_weather['precipitation'].fillna(test_weather['precipitation'].mean())\ntest_weather['wind_speed'] = test_weather['wind_speed'].fillna(test_weather['wind_speed'].mean())","6bf572c3":"test_weather.isna().sum()","86d2a55c":"train_weather.isna().sum()","6528336f":"train_weather.shape","c0c97a85":"train_weather = remove_outlier(train_weather, 'wind_speed')","2763de64":"train_weather = remove_outlier(train_weather,'precipitation')","e2b42ee5":"train_weather = remove_outlier(train_weather,'pressure_sea_level')","57d89b5c":"train_weather = remove_outlier(train_weather,'dew_temp')","b7e215a3":"train_weather = remove_outlier(train_weather,'wind_direction')","ba38f490":"train_weather = remove_outlier(train_weather,'cloudiness')","f1209455":"train_weather = remove_outlier(train_weather,'temp_obs')","8ac6fe8a":"New_train = pd.merge(train_data,farm_data,on = 'farm_id',how = 'inner')","99224f6a":"New_test = pd.merge(test_data,farm_data,on='farm_id',how='inner')","f7ea0973":"cmbd_train = pd.merge(New_train,train_weather,on = ['date','deidentified_location'],how ='inner')","fe2ef18c":"cmbd_train = cmbd_train.drop(['operations_commencing_year','num_processing_plants'],axis=1)","4bcb2103":"cmbd_test = pd.merge(New_test,test_weather,on=['date','deidentified_location'],how='inner')","4b225941":"cmbd_test = cmbd_test.drop(['operations_commencing_year','num_processing_plants'],axis=1)","ba878e68":"cmbd_test.shape","10b307e0":"cmbd_train.shape","fc4eb471":"cmbd_train.columns","8e7596ca":"cmbd_train.head()","678e4edc":"cmbd_train.describe(include='all')","d3cb4298":"N_ts = pd.merge(train_data,test_data,on = 'date',how = 'outer')","4db2e286":"train_data['month'] = train_data['date'].dt.month \ntrain_data['day'] = train_data['date'].dt.day","d80493c3":"train_data.head()","ae386963":"train_data.tail()","7279bc89":"train_data.set_index(['month'], inplace=True)","8290d963":"ts = train_data['yield']","cd09232c":"ts.head()","5abc3203":"ts.plot()\nplt.ylabel('Yield')\nplt.xlabel('Month')\nplt.show()","a7123532":"from statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(ts, model = 'additive', freq=1)\nresult.plot()\nplt.show()","f74510a1":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n    #Plot rolling statistics:\n    plt.plot(timeseries, color='blue',label='Original')\n    plt.plot(rolmean, color='red', label='Rolling Mean')\n    plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block=False)\n    \ntest_stationarity(ts)","41ef0b78":"# Define the d and q parameters to take any value between 0 and 1\nq = d = range(0, 2)\n# Define the p parameters to take any value between 0 and 3\np = range(0, 4)\n\n# Generate all different combinations of p, q and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","3d0564a1":"df_log = np.log(ts)\nmoving_avg = df_log.rolling(12).mean()\nstd_dev = df_log.rolling(12).std()\nplt.plot(df_log)\nplt.plot(moving_avg, color=\"red\")\nplt.plot(std_dev, color =\"black\")\nplt.show()","2fc0dc1c":"df_log_moving_avg_diff = df_log-moving_avg\ndf_log_moving_avg_diff.dropna(inplace=True)","103b67b7":"test_stationarity(df_log_moving_avg_diff)","e8ad34b1":"weighted_average = df_log.ewm(halflife=12, min_periods=0,adjust=True).mean()","79bdf5d4":"logScale_weightedMean = df_log-weighted_average\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 10,6\ntest_stationarity(logScale_weightedMean)","567f8d70":"sns.jointplot(x=\"temp_obs\", y=\"pressure_sea_level\", data=train_weather, height=5)","3a6a22c8":"plt.figure(figsize = (15,6))\nplt.xticks(rotation='90')\nsns.boxplot(x=\"deidentified_location\", y=\"wind_speed\", data=train_weather)\nplt.show()","b20f3e5c":"plt.figure(figsize = (15,6))\nsns.scatterplot(cmbd_train['temp_obs'].dropna(), cmbd_train['yield'])\nplt.show()","39de0186":"plt.figure(figsize = (15,6))\nsns.scatterplot(cmbd_train['farm_area'], cmbd_train['yield'])\nplt.show()","3b5528fc":"cmbd_train.dtypes","ff4d7c5d":"plt.figure(figsize=(12,8))\ncmbd_train.plot()\nplt.title('ingredient_type VS yield')\nplt.xlabel('Ingredient_type')\nplt.ylabel('yield')\nplt.legend(['Yield'])","343039d9":"plt.figure(figsize=(15,10))\nsns.heatmap(cmbd_train.corr(), annot=True)","cab46e2b":"cmbd_train.hist(column='yield', bins=3, grid=False);\nplt.suptitle('Yield Year wise')\nplt.xlabel('date')\nplt.ylabel('yield')","a5c6a075":"plt.figure(figsize=(15, 7))\nplt.plot(cmbd_train.temp_obs)\nplt.title('Temp Obsevations')\nplt.grid(True)\nplt.show()","69b16306":"plt.hist(cmbd_train['ingredient_type']);","04663f06":"plt.figure(figsize=(15, 7))\nplt.plot(cmbd_train.dew_temp)\nplt.title('Dew Temp Obsevations')\nplt.grid(True)\nplt.show()","70e26f2b":"sns.relplot(x='dew_temp',y='yield',data=cmbd_train)  ","19a18950":"plt.figure(figsize=(15, 7))\nsns.relplot(x='wind_speed',y='yield',hue='ingredient_type',data=cmbd_train)","25b7a3f3":"sns.relplot(x='month',y='yield',hue='ingredient_type',data=cmbd_train)","86cf54da":"all_Data = []","92e42e51":"cmbd_train = cmbd_train.drop(['farm_id','farming_company','deidentified_location','date'],axis =1)","96b1fbfa":"cmbd_train.dtypes","a3542bd0":"cmbd_train.shape","a342630b":"#num_cols = ['farm_area','temp_obs','cloudiness','wind_direction','dew_temp','pressure_sea_level','precipitation','wind_speed']","80c4e72a":"#scaler = MinMaxScaler()","fd016d57":"#scaler.fit(cmbd_train[num_cols])","abde2cf2":"#cmbd_train[num_cols] =scaler.transform(cmbd_train[num_cols])","b4c8d8d6":"train_dummies = pd.get_dummies(cmbd_train[[\"ingredient_type\"]])","c3b55fde":"all_Data = cmbd_train.drop([\"ingredient_type\",\"yield\",'farm_area'],axis=1).join(train_dummies)","95ec0e5d":"all_Data.head()","936a8abc":"cmbd_test = cmbd_test.drop(['farm_id','farming_company','deidentified_location','date'],axis=1)","8dd6ca95":"cmbd_test.columns","a5641636":"#num_cols_test = ['farm_area','temp_obs','cloudiness','wind_direction','dew_temp','pressure_sea_level','precipitation','wind_speed']","474f4a7b":"#scaler.fit(cmbd_test[num_cols_test])","3ec2a349":"#cmbd_test[num_cols_test] =scaler.transform(cmbd_test[num_cols_test])","1c47f929":"test_dummies = pd.get_dummies(cmbd_test[[\"ingredient_type\"]])","522e15ef":"all_Data_test = cmbd_test.drop([\"ingredient_type\",'farm_area','id'],axis=1).join(test_dummies)","cde11d05":"all_Data_test.columns","068e6f4f":"all_Data_test.head()","23cf6b39":"all_Data_test.shape","bfc72a4b":"X = all_Data","d476437f":"y = cmbd_train['yield']","67e2883c":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3)","ab65be25":"regressor = DecisionTreeRegressor(min_samples_split=5,random_state = 0)","9d0530bd":"regressor.fit(X, y)","182d75a2":"y_pred_train = regressor.predict(X_train)\ny_pred_test = regressor.predict(X_val)","c7089083":"rmse_train = np.sqrt(mean_squared_error(y_train, y_pred_train))\nrmse_test = np.sqrt(mean_squared_error(y_val, y_pred_test))","a1bb98ec":"print('Decision Tree:')\nprint('root mean squared error for train: ', rmse_train)\nprint('root mean squared error validation: ', rmse_test)","5373065c":"plot_learning_curves(X_train,y_train,X_val,y_val,regressor,scoring='mean_squared_error')","8b932803":"all_Data_test.columns","e4c0900c":"test_predict_dt = regressor.predict(all_Data_test)","9a1c6a38":"test_predict_dt = pd.DataFrame(test_predict_dt,index = None,columns=[\"yield\"])","ce7f5bb9":"test_submission_id = pd.DataFrame(submission_file,columns=[\"id\"])","193a148d":"test_submission_id_large = pd.DataFrame(submission_file_large,columns=[\"id\"])","0ecbfc51":"full_test_dt = pd.concat([test_submission_id,test_predict_dt],axis=1)","60038555":"full_test_dt_large = pd.concat([test_submission_id_large,test_predict_dt],axis=1)","94cc89f8":"full_test_dt_large.shape","c7eb881b":"full_test_dt.shape","1686a05b":"full_test_dt = full_test_dt.iloc[0:999999,:]","dd325dd4":"full_test_dt.shape","15e68dc6":"full_test_dt_large.to_csv(\"Predictions_whole.csv\",index=False,header=True)","e254712f":"full_test_dt.to_csv(\"test_predictions_dt_99.csv\",index=False,header=True )","3130e625":"plt.scatter(y_val, y_pred_test)\nplt.ylim()\nplt.xlim()","c8eb9014":"print(\"MAE:\", metrics.mean_absolute_error(y_val, y_pred_test))\nprint('MSE:', metrics.mean_squared_error(y_val, y_pred_test))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_val, y_pred_test)))","46460004":"from sklearn.linear_model import LinearRegression","0e7a4d4f":"lm = LinearRegression(normalize=True,fit_intercept=False,n_jobs=-1)","e08d7a8e":"lm.fit(X,y)","9708059a":"y_pred_train = regressor.predict(X_train)\ny_pred_test = regressor.predict(X_val)","79ed2a87":"plt.scatter(y_val, predictions)\nplt.ylim()\nplt.xlim()","9d902353":"print(\"MAE:\", metrics.mean_absolute_error(y_val, predictions))\nprint('MSE:', metrics.mean_squared_error(y_val, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_val, predictions)))","1be240ca":"plot_learning_curves(X_train,y_train,X_val,y_val,lm,scoring='mean_squared_error')","968d7104":"full_test_dt_large.shape","200079d8":"test_data.columns","990b0ad9":"test_data['date']= pd.to_datetime(test_data['date'])","4594e616":"test_data['Month'] = test_data['date'].dt.month","fae6ffe6":"test_data_ing = pd.DataFrame(test_data,columns=[\"ingredient_type\",\"Month\"])","76a6755d":"test_data_ing.head()","b576cfd7":"test_data_ing.shape","7e92c636":"ing_type = pd.concat([full_test_dt_large,test_data_ing],axis=1)","e351111c":"ing_type.head()","3d41ef05":"ing_type = ing_type.drop(['id'],axis=1)","755c3c64":"ing_type.head()","6692c299":"ing_type['ingredient_type'].unique()","dfe8f7a2":"ing_type['ingredient_type'].value_counts()","5e5b33b8":"ing_w = ing_type[ing_type.ingredient_type == 'ing_w']","6726f7a2":"ing_w.shape","4fa892c9":"new_ing = ing_w.iloc[0:12377880]","c11a79b5":"new_ing_w = new_ing.dropna()","c05c44a8":"new_ing_w.shape","39a0aca1":"new_ing_w.head()","edc1b300":"new_ing_w.tail()","14a2d228":"new_ing_w['Month'].value_counts()","3e326f86":"Overall_stock =new_ing_w['yield'].sum()","1c1d8e1f":"Overall_demand = ingw_demand['demand'].sum()","17b3cc40":"Overall_stock - Overall_demand","34018d0c":"Monthly = new_ing_w.groupby(['Month']).sum()","36f1cbd4":"Monthly = Monthly.reset_index()","92aeb7ba":"Monthly = Monthly.rename(columns={'Month':'month'})","4f53b938":"ingw_demand.head(12)","6a19b642":"stock_demand = pd.merge(Monthly,ingw_demand,on='month',how='inner')","76452f20":"stock_demand.head()","8e8b054c":"stock_demand['Balance'] = stock_demand['yield'][0]-stock_demand['demand'][0] ","95bbc0d3":"stock_demand = stock_demand.set_index('month')","4d60187b":"stock_demand.head()","8b70f90f":"stock_demand['Balance'][0] = stock_demand['Balance'].iloc[0]\n","764c3c5a":"import pandas as pd\nfarm_data = pd.read_csv(\"..\/input\/farm_data.csv\")\nsample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\ntest_data = pd.read_csv(\"..\/input\/test_data.csv\")\ntest_weather = pd.read_csv(\"..\/input\/test_weather.csv\")\ntrain_data = pd.read_csv(\"..\/input\/train_data.csv\")\ntrain_weather = pd.read_csv(\"..\/input\/train_weather.csv\")","f6f96e84":"####Checking for Trends & Seasonality","e76c956b":"### Merged Test Data","73460435":"###Linear Regression","403d7bd0":"### **Splitting Data**","de12653c":"#### Reading Data","0358adc1":"####Decision Tree Regressor","bfc8ad5a":"### **Preparing the Data**","b3b26390":"### Merged Train Data","cc255893":"###Merging Datasets","499c1323":"###Strategy for Ing_w Ingredient","c81cfa97":"###Train data","a291e126":"###Train&Test_Weather","521050e6":"###Farm Data \n"}}