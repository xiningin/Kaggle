{"cell_type":{"3e7f33e4":"code","66532b53":"code","a5c4d16e":"code","788cda03":"code","1265d5d8":"code","edc3e3d4":"code","643437cb":"code","94e8c03f":"code","0f343a2e":"code","e8bd25ed":"code","b8301a03":"code","e3ef68b9":"code","4f49c512":"code","9b876392":"code","33b113a5":"code","0167dd4a":"code","4e71b102":"code","be321d1d":"markdown","38b5047c":"markdown","07f64a29":"markdown","be275e7a":"markdown","59454e68":"markdown","43aa1afd":"markdown","59776c00":"markdown","80ae05d5":"markdown","ebcd0a9a":"markdown","d3afbe79":"markdown"},"source":{"3e7f33e4":"import numpy as np\n# \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432\nfrom tensorflow.keras.datasets import cifar10\nimport tensorflow as tf\n## \u0441\u043b\u043e\u0438\n# \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c (\u0441\u0442\u0435\u043a \u0441\u043b\u043e\u0435\u0432)\nfrom tensorflow.keras.models import Sequential, Model\n# \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u0438 \u0441\u043b\u043e\u0439 \u0432\u044b\u043f\u0440\u044f\u043c\u043b\u044f\u044e\u0449\u0438\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\nfrom tensorflow.keras.layers import Dense, Flatten\n# \u0441\u043b\u043e\u0439 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u0438 \u0441\u043b\u043e\u0439 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)\nfrom tensorflow.keras.layers import Dropout, BatchNormalization, SpatialDropout2D, GaussianDropout\n# \u0441\u043b\u043e\u0438 \u0441\u0432\u0435\u0440\u0442\u043a\u0438 \u0438 \u043f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043a\u0438\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, AveragePooling2D\n\n## callbacks \u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n# \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u044c\u044e \u043e\u0442 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439\u0441\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n# \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.regularizers import *\nfrom tensorflow.keras.preprocessing import image\n\n## \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u0438 \u0438\u0445 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom tensorflow.keras.applications import ResNet50, InceptionV3, DenseNet201, EfficientNetB5, InceptionResNetV2, Xception, NASNetLarge, ResNet152V2\n\nimport os\nfrom tensorflow.random import set_seed\ndef seed_everything(seed):\n    np.random.seed(seed)\n    set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n\nseed = 42\nseed_everything(seed)\n\n# \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438\nfrom tensorflow.keras.preprocessing import image\nimport matplotlib.pyplot as plt\n%matplotlib inline ","66532b53":"(X_train, y_train), (X_test, y_test) = cifar10.load_data()","a5c4d16e":"size = 75\nX_test = tf.image.resize(X_test, [size,size])\nX_train = tf.image.resize(X_train, [size,size])","788cda03":"X_train.shape","1265d5d8":"# \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0438\u043d\u0438-\u0432\u044b\u0431\u043e\u0440\u043a\u0438\nbatch_size = 128\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\nnb_classes = 10\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nnb_epoch = 25\n# \u0420\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439\nimg_rows, img_cols = X_train.shape[1], X_train.shape[2]\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438: RGB\nimg_channels = X_train.shape[3]\n# \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\nclasses=['\u0441\u0430\u043c\u043e\u043b\u0435\u0442', '\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c', '\u043f\u0442\u0438\u0446\u0430', '\u043a\u043e\u0442', '\u043e\u043b\u0435\u043d\u044c', '\u0441\u043e\u0431\u0430\u043a\u0430', '\u043b\u044f\u0433\u0443\u0448\u043a\u0430', '\u043b\u043e\u0448\u0430\u0434\u044c', '\u043a\u043e\u0440\u0430\u0431\u043b\u044c', '\u0433\u0440\u0443\u0437\u043e\u0432\u0438\u043a']","edc3e3d4":"X_train \/= 255\nX_test \/= 255","643437cb":"Y_train = utils.to_categorical(y_train, nb_classes)\nY_test = utils.to_categorical(y_test, nb_classes)","94e8c03f":"n = 101\nplt.imshow(X_train[n].numpy())\nplt.show()\nprint(\"\u041d\u043e\u043c\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430:\", y_train[n][0])\nprint(\"\u0422\u0438\u043f \u043e\u0431\u044a\u0435\u043a\u0442\u0430:\", y_train[n][0])","0f343a2e":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0448\u0430\u0433\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\nLR_START = 0.00001\nLR_MAX = 0.0001\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 2\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0448\u0430\u0433\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u043f\u043e\u0445\nrng = [i for i in range(nb_epoch)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","e8bd25ed":"%%time\ndef get_model(use_model):\n    # \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0432\u0435\u0441\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\n    base_model = use_model(weights='imagenet', \n                      include_top=False, \n                      input_shape=(img_rows, img_cols, img_channels))\n    base_model.trainable = True\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(128, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = GaussianDropout(0.8)(x)\n    predictions = Dense(nb_classes, activation='softmax')(x)\n    return Model(inputs=base_model.input, outputs=predictions)\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = get_model(ResNet50)","b8301a03":"# model.summary()","e3ef68b9":"callbacks_list = [EarlyStopping(monitor='val_loss', patience=10),\n                  ModelCheckpoint(filepath='my_model.h5',\n                                  monitor='val_loss',\n                                  save_best_only=True),\n                  lr_callback\n                  ]# ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=3) \n# optimizer = tf.keras.optimizers.Adam() # learning_rate=0.00001\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","4f49c512":"%%time\nhistory = model.fit(X_train, Y_train,\n              batch_size=batch_size,\n              epochs=nb_epoch,\n              callbacks=callbacks_list,\n              validation_split=0.1,\n              verbose=1)","9b876392":"# \u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nscores = model.evaluate(X_test, Y_test, verbose=1)\n","33b113a5":"print(\"\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445:\", round(scores[1] * 100, 4))","0167dd4a":"plt.plot(history.history['accuracy'], \n         label='\u0414\u043e\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_accuracy'], \n         label='\u0414\u043e\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","4e71b102":"plt.plot(history.history['loss'], \n         label='\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u0442\u0435\u0440\u044c \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_loss'], \n         label='\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u0442\u0435\u0440\u044c \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u041e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u0442\u0435\u0440\u044c')\nplt.legend()\nplt.show()","be321d1d":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435","38b5047c":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","07f64a29":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","be275e7a":"\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","59454e68":"# \u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR-10\n","43aa1afd":"\u041a\u0440\u0438\u0432\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","59776c00":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","80ae05d5":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435","ebcd0a9a":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d3afbe79":"# \u0421\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c"}}