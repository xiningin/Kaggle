{"cell_type":{"3f10c051":"code","082163d5":"code","1dc5c8b7":"code","5511cf86":"code","c39f0289":"code","b7d28d3a":"code","d1e5acaf":"code","0611aa73":"code","9e8bc6a5":"code","d85851f3":"code","83aede61":"code","ab0a7213":"code","3962d173":"code","915c1b22":"markdown"},"source":{"3f10c051":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.utils import np_utils\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils.np_utils import to_categorical\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom keras import optimizers\nimport pandas as pd\nimport itertools\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom keras.applications import MobileNet\nfrom keras.layers import Dense, Dropout, Activation, Flatten, GlobalAveragePooling2D","082163d5":"Train_Path = '..\/input\/10-monkey-species\/training\/training'\nTest_Path = '..\/input\/10-monkey-species\/validation\/validation'","1dc5c8b7":"X_train = []\nY_train = []\nX_test = []\nY_test = []\n\ntrain_dir = []\ntest_dir = []\n\nfor labels in os.listdir(Train_Path):\n    path_1 = os.path.join(Train_Path, labels)\n    for images in os.listdir(path_1):\n        path_2 = os.path.join(path_1, images)\n        img = cv2.imread(path_2)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (224,224), interpolation = cv2.INTER_AREA)\n        X_train.append(img)\n        Y_train.append(labels)\n        \nfor labels in os.listdir(Test_Path):\n    path_1 = os.path.join(Test_Path, labels)\n    for images in os.listdir(path_1):\n        path_2 = os.path.join(path_1, images)\n        img = cv2.imread(path_2)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (224,244), interpolation = cv2.INTER_AREA)\n        X_test.append(img)\n        Y_test.append(labels)","5511cf86":"plt.figure(figsize=(12,12))\n\nX_train = np.array(X_train)\nX_test = np.array(X_test)\nY_train = np.array(Y_train)\nY_test = np.array(Y_test)\n\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)\nprint('\\n')\nprint(len(X_train))\nprint(len(Y_train))\nprint(len(X_test))\nprint(len(Y_test))\n\nplt.subplot(1,3,1)\nplt.imshow(X_train[0])\nplt.title('Label'+ ' ' + str(Y_train[0]))\nplt.subplot(1,3,2)\nplt.imshow(X_train[6])\nplt.title('Label'+ ' ' + str(Y_train[6]))\nplt.subplot(1,3,3)\nplt.imshow(X_test[20])\nplt.title('Label'+ ' ' + str(Y_test[20]))\n\nprint('\\n')\nprint(str(np.unique(Y_train)) + ' \\n ' + 'Number of classes' + ' ' + str(len(np.unique(Y_train))))","c39f0289":"X_train = X_train \/ 255\nX_test = X_test \/ 255\n\nlaben = LabelEncoder()\nY_train = laben.fit_transform(Y_train) # Converts the categorical label to (0,1)\nY_train = to_categorical(Y_train,10) # Converts that (0,1) in array form\n\nY_test = laben.fit_transform(Y_test) \nY_test = to_categorical(Y_test,10) \n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","b7d28d3a":"mobile_1 = MobileNet(weights='imagenet', include_top=False, input_shape=(224,224,3),classes=1000)","d1e5acaf":"for layer in mobile_1.layers:\n    layer.trainable = False\n    \nmodel_1 = Sequential()\nmodel_1.add(mobile_1)\nmodel_1.add(GlobalAveragePooling2D())\nmodel_1.add(Dense(1024, activation='relu'))\nmodel_1.add(Dense(1024, activation='relu'))\nmodel_1.add(Dense(512, activation='relu'))\nmodel_1.add(Dense(10, activation='softmax'))\n\nprint(model_1.summary())","0611aa73":"model_1.compile(loss = 'categorical_crossentropy',\n             optimizer = 'adam',\n             metrics = ['accuracy'])","9e8bc6a5":"history = model_1.fit(X_train, Y_train,\n                   batch_size = 16,\n                   validation_data = (X_test,Y_test),\n                   epochs = 20,\n                   verbose = 1)","d85851f3":"Score = model_1.evaluate(X_test,Y_test)\nprint(' Test Accuracy ', Score[1])","83aede61":"y_test_ = np.argmax(Y_test, axis=1)\ny_pred_ = model_1.predict_classes(X_test)","ab0a7213":"print('Classification Report \\n')\nprint(classification_report(y_test_, y_pred_))","3962d173":"plt.figure(figsize=(8,8))\n\nclasses = 10\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n\nconfusion_mtx = confusion_matrix(y_test_, y_pred_) \nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","915c1b22":"# Monkey Breed Classification using Pre-Trained MobileNet by Transfer Learning Approach\n\n\n- By Sachin Saj"}}