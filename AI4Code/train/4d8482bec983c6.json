{"cell_type":{"50cb1791":"code","9c7821f5":"code","c81695a8":"code","d4548264":"code","a1dbb258":"code","64ea1365":"code","ddba9fe2":"code","a776537f":"code","1bd151db":"code","d94d1bff":"code","1b5b1261":"code","d3bfb1ed":"code","fbad513a":"code","ef585a24":"code","213a3b83":"code","30e9c76d":"code","94084c7e":"code","a89d4ba5":"code","7a77326b":"code","19d7bc7b":"code","6cc14da0":"code","00ff0b8f":"code","41f592a0":"code","bfb6d5f5":"code","2c93c656":"code","fbf48421":"code","9a22e2e4":"code","540d10b3":"code","b9fb3603":"code","c9e218eb":"code","3a691a9f":"code","5c3aa42c":"code","57fe2780":"code","9173f8fc":"code","cad5df42":"code","bfd50044":"code","f55bac1d":"code","57933a5c":"code","bdb8369d":"code","5fe0033a":"code","f12cce7d":"code","2b8c50c0":"code","9bec0f6c":"code","86028525":"code","17b73418":"code","d018c9bd":"code","3a093e9e":"code","e9b8415e":"code","e48a1903":"code","c2d9e1e0":"code","ef2a16c6":"code","9f0a8938":"code","1d90a59d":"markdown","7d6abce2":"markdown","7de14716":"markdown","4af3c6f9":"markdown","ed7cfa9e":"markdown","1ea703b9":"markdown","b31babad":"markdown","40a896b1":"markdown","c3466ccb":"markdown","0d6ce451":"markdown","e3a72093":"markdown","588e94ca":"markdown","97dbe6c6":"markdown","86d0f595":"markdown","0deccbb8":"markdown","36dd698d":"markdown"},"source":{"50cb1791":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c7821f5":"#Loading dataset\nwine = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","c81695a8":"#lets check the dataset\nwine.head()\n","d4548264":"print(wine.info())\n#no missing values","a1dbb258":"catgorical_feat=[features for features in wine.columns if wine[features].nunique()<10]\ncatgorical_feat\n","64ea1365":"print(wine.quality.value_counts())\nprint(wine.quality.value_counts(normalize=True))\nsns.countplot(x='quality',data=wine)","ddba9fe2":"\nwine.hist(figsize = (10,10),color=\"b\",bins=40,alpha=1)\n","a776537f":"wine.describe()","1bd151db":"wine.columns","d94d1bff":"cont_feat=['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n       'pH', 'sulphates', 'alcohol', 'quality']","1b5b1261":"\n\nwine[cont_feat].plot.box(figsize=(20,10))\n\nplt.show()\n#there are also some outliers also","d3bfb1ed":"sns.pairplot(wine,hue='quality')","fbad513a":"plt.figure(figsize = (18,12))\nsns.heatmap(wine.corr(), annot = True, cmap = \"RdYlGn\")\n\nplt.show()","ef585a24":"#Here we see that fixed acidity does not give any specification to classify the quality.\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'fixed acidity', data = wine)","213a3b83":"#Here we see that its quite a downing trend in the volatile acidity as we go higher the quality \nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'volatile acidity', data = wine)","30e9c76d":"#Composition of citric acid go higher as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'citric acid', data = wine)","94084c7e":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'residual sugar', data = wine)","a89d4ba5":"#Composition of chloride also go down as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'chlorides', data = wine)","7a77326b":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'free sulfur dioxide', data = wine)","19d7bc7b":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'total sulfur dioxide', data = wine)","6cc14da0":"#Sulphates level goes higher with the quality of wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'sulphates', data = wine)","00ff0b8f":"#Alcohol level also goes higher as te quality of wine increases\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'alcohol', data = wine)","41f592a0":"#Making binary classificaion for the response variable.\n#Dividing wine as good and bad by giving the limit for the quality\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\nwine['quality'] = pd.cut(wine['quality'], bins = bins, labels = group_names)","bfb6d5f5":"from sklearn.preprocessing import StandardScaler, LabelEncoder\n#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()","2c93c656":"#Bad becomes 0 and good becomes 1 \nwine['quality'] = label_quality.fit_transform(wine['quality'])","fbf48421":"wine['quality'].value_counts()","9a22e2e4":"sns.countplot(wine['quality'])","540d10b3":"#Now seperate the dataset as response variable and feature variabes\nX = wine.drop('quality', axis = 1)\ny = wine['quality']","b9fb3603":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n%matplotlib inline\n#Train and Test splitting of data \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","c9e218eb":"#Applying Standard scaling to get optimized result\nsc = StandardScaler()","3a691a9f":"X_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","5c3aa42c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nclf = LogisticRegression()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, n_jobs=1, scoring=scoring)\nprint(score)","57fe2780":"round(np.mean(score)*100, 2)","9173f8fc":"from sklearn.model_selection import KFold\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","cad5df42":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors = 15)\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","bfd50044":"# kNN Score\nround(np.mean(score)*100, 2)","f55bac1d":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","57933a5c":"# decision tree Score\nround(np.mean(score)*100, 2)","bdb8369d":"from sklearn.ensemble import RandomForestClassifier\nrnd = RandomForestClassifier(n_estimators=45)\nscoring = 'accuracy'\nscore = cross_val_score(rnd, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5fe0033a":"round(np.mean(score)*100, 2)","f12cce7d":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","2b8c50c0":"round(np.mean(score)*100, 2)","9bec0f6c":"from sklearn.svm import SVC\nclf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","86028525":"round(np.mean(score)*100, 2)","17b73418":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state = 42)\nfrom pprint import pprint","d018c9bd":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)\n{'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}","3a093e9e":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\n#rf = RandomForestRegressor()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\n#rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\n#rf_random.fit(X_train,y_train)","e9b8415e":"#rf_random.best_params_","e48a1903":"#clf = RandomForestClassifier(n_estimators=45)\n#scoring = 'accuracy'\n#score = cross_val_score(clf, X_train, y_train, cv=k_fold, n_jobs=1, scoring=scoring)\n#print(score)","c2d9e1e0":"rnd=RandomForestClassifier(n_estimators=50)\nrnd.fit(X_train,y_train)\n#test_data = test.drop( \"Loan_ID\", axis=1).copy()\nprediction = rnd.predict(X_test)","ef2a16c6":"print(classification_report(y_test, prediction))","9f0a8938":"rfc_eval = cross_val_score(estimator = rnd, X = X_train, y = y_train, cv = 6)\nrfc_eval.mean()","1d90a59d":"Random forest is performing well","7d6abce2":"# data preprocessing","7de14716":"1. Logistic Regression","4af3c6f9":"5. Naive Bayes","ed7cfa9e":"# # **Let's try to increase our accuracy of models\n# Grid Search CV**","1ea703b9":"6. Support Vector Classifier","b31babad":"# EDA\n\n# # # # # #univarite analysis***","40a896b1":"# Bivariate Analysis\nExploring variable with respect to target variable and categorical Independent variables","c3466ccb":"# ****testing","0d6ce451":"3. Decision Tree","e3a72093":"#  Model Selection","588e94ca":"42% of wine is of- qulity 5\n\n40% of wine is of- qulity 6\n\n12% of wine is of- qulity 7\n\n3.3% of wine is of- qulity 4\n\n1.1% of wine is of- qulity 8\n\n.6% of wine is of- qulity 3","97dbe6c6":"4. Random Forest","86d0f595":"# # **Numerical vs Target Variable**","0deccbb8":"2. K-Nearest Neighbour","36dd698d":"# # # # # # we have some skewed features\n"}}