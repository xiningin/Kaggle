{"cell_type":{"20ef5844":"code","24221f74":"code","a4b11a39":"code","268c809b":"code","02f71aed":"markdown"},"source":{"20ef5844":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nimport warnings  \nwarnings.filterwarnings('ignore')","24221f74":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","a4b11a39":"data","268c809b":"accuracy = 0\nk = 3\npower_1_num = 0\npower_2_num = 0\npower_3_num = 0\npower_4_num = 0\nconst_1_num = 0\nconst_2_num = 0\nconst_3_num = 0\nconst_4_num = 0\nfor power_1 in range(-k,k):\n    for power_2 in range(-k,k):\n        for power_3 in range(-k,k):\n            for power_4 in range(-k,k):\n                for const_1 in range(-k,k):\n                    for const_2 in range(-k,k):\n                        for const_3 in range(-k,k):\n                            for const_4 in range(-k,k):\n            \n                                data['score'] = const_1 * data['SepalLengthCm']**power_1 + const_2 * data['SepalWidthCm']**power_2 + const_3 * data['PetalLengthCm']**power_3 + const_4 * data['PetalWidthCm']**power_4\n                                X = data['score'].values\n                                y = data['Species']\n                                clf = LogisticRegression(random_state=42)\n                                clf.fit(X.reshape(-1,1),y)\n                                predictions = clf.predict(X.reshape(-1,1))\n                                if accuracy_score(predictions,y) > accuracy:\n                                    accuracy = accuracy_score(predictions,y)\n                                    power_1_num = power_1\n                                    power_2_num = power_2\n                                    power_3_num = power_3\n                                    power_4_num = power_4\n                                    const_1_num = const_1\n                                    const_2_num = const_2\n                                    const_3_num = const_3\n                                    const_4_num = const_4\n                                    print(accuracy)\n\nprint(power_1_num,power_2_num,power_3_num,power_4_num,const_1_num,const_2_num,const_3_num,const_4_num)","02f71aed":"You can reduce the features into one feature with polynomials. This is a brute force method."}}