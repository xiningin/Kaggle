{"cell_type":{"a9a62d37":"code","34b9afa9":"code","b2583981":"code","59862ab3":"code","331fdd4c":"code","be56a097":"code","847b8838":"code","14f9dc3f":"code","676966ca":"code","6747b16c":"code","e4d772d0":"code","c0683bdf":"code","a376124b":"code","cc29163b":"code","89f47de8":"code","a2260af1":"code","2f4cc0b9":"code","e2999376":"code","7561ae12":"code","ac90f613":"code","bf127816":"code","2321824f":"code","52e9f5ce":"code","4a66244d":"code","1443ee18":"markdown"},"source":{"a9a62d37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34b9afa9":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","b2583981":"train.head()","59862ab3":"from sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,BatchNormalization,Flatten, Dropout,MaxPool2D,Dense\nfrom keras.utils.np_utils import to_categorical","331fdd4c":"X = train.drop('label',axis=1)\ny = train['label']","be56a097":"y.value_counts()","847b8838":"sns.countplot(y)","14f9dc3f":"X = X.values.reshape(-1,28,28,1)\n# test = test.values.reshape(-1,28,28,1)","676966ca":"X = X\/255.0\n# test = test\/255.0\n\ny = to_categorical(y,num_classes=10)","6747b16c":"y","e4d772d0":"plt.imshow(X[7][:,:,0])","c0683bdf":"X.shape","a376124b":"model = Sequential()\n\nmodel.add(Conv2D(32,kernel_size=(3,3),input_shape=X.shape[1:],activation='relu',padding='same'))\nmodel.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='same'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))","cc29163b":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","89f47de8":"model.summary()","a2260af1":"model.fit(X,y,epochs=20,batch_size=64)","2f4cc0b9":"test = test.values.reshape(-1,28,28,1)\ntest = test\/255.0","e2999376":"y_test = model.predict(test)","7561ae12":"y_test[0]","ac90f613":"y_test=[np.argmax(y_test1) for y_test1 in y_test]","bf127816":"plt.imshow(test[4][:,:,-1]);\nplt.title(f'Predicted label {y_test[4]}')","2321824f":"submission['Label'] = y_test\nsubmission.head()","52e9f5ce":"submission['Label'].value_counts()","4a66244d":"submission.to_csv('basic_sub2.csv',index=False)","1443ee18":"Test data predictions"}}