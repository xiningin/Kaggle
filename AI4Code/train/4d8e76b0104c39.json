{"cell_type":{"552cf2b5":"code","d6fa0d79":"code","7eebacf7":"code","394859b1":"code","2c0194f0":"code","ef05883b":"code","4d14649d":"code","a94339fd":"code","8c213103":"code","a8db7624":"code","2315d228":"code","af8108d7":"code","fc9ac7b2":"code","5de9bbd7":"code","737dae7f":"code","477ccfdd":"code","c7bad258":"code","b9cdcdd1":"code","56ceb7d2":"code","c1a3637d":"code","83120acb":"code","237b71aa":"code","c79e48d9":"code","1f6e55ce":"markdown","f9a898c2":"markdown","f0c72e68":"markdown","c27d440f":"markdown","fd929a29":"markdown","cc999087":"markdown","fb04145e":"markdown","ce65fb1b":"markdown","855eb350":"markdown","fe8b599a":"markdown","5531ea20":"markdown","2a1087ac":"markdown","0ea1792a":"markdown","ddf46b16":"markdown","6af786f3":"markdown"},"source":{"552cf2b5":"# Manipula\u00e7\u00e3o de dados:\nimport pandas as pd \nimport missingno as msno \nfrom collections import Counter\nfrom warnings import filterwarnings\n\n\n# Visualiza\u00e7\u00e3o Gr\u00e1fica:\nimport seaborn as sns\nimport matplotlib as plt\nimport plotly.express as px \n\n# Modelos de Classifica\u00e7\u00e3o \nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,SGDClassifier,PassiveAggressiveClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.svm import SVC,LinearSVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier,NearestCentroid\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.ensemble import VotingClassifier\n\n\n\n# Evolu\u00e7\u00e3o :\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold","d6fa0d79":"data = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')","7eebacf7":"data.info()","394859b1":"pip install pandas-profiling ","2c0194f0":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(data, title='Pandas Profiling Report to Dataset')\nprofile","ef05883b":"data.info()","4d14649d":"fig = msno.matrix(data, color=(0,0.6,0.8))","a94339fd":"data.head()","8c213103":"# Sex\n\ndata[\"Sex\"] = data[\"Sex\"].map({\"M\":1, \"F\":2})\ndata.head()\n","a8db7624":"# ChestPain Type \n\ndata[\"ChestPainType\"] = data[\"ChestPainType\"].map({\"TA\":1, \"ATA\":2, \"NAP\":3,\"ASY\":4})\ndata.head()","2315d228":"# Resting ECG\n\ndata[\"RestingECG\"] = data['RestingECG'].map({\"Normal\":1,\"ST\":2, \"LVH\":3 })\ndata.head()","af8108d7":"# Exercise Aginine \ndata[\"ExerciseAngina\"] = data['ExerciseAngina'].map(  {\"Y\":1,\"N\":2  })\ndata.head()","fc9ac7b2":"# ST Slope\ndata[\"ST_Slope\"] = data['ST_Slope'].map({\"Up\":1, \"Flat\":2, \"Down\": 3}  )\ndata.head()","5de9bbd7":"data.info()","737dae7f":"X = data.drop(\"HeartDisease\", axis=1 )\nX.head()","477ccfdd":"y = data[\"HeartDisease\"]\ny.head()","c7bad258":"from sklearn.model_selection import train_test_split \n\nx_train, x_test, y_train, y_test = train_test_split(X,y, test_size =0.2, random_state = 15)","b9cdcdd1":"len(x_test),len(x_train)","56ceb7d2":"filterwarnings('ignore')","c1a3637d":"models = [(\"LR\", LogisticRegression(max_iter=1000)),\n          (\"SVC\", SVC()),\n          (\"KNC\", KNeighborsClassifier(n_neighbors=10)),\n          (\"DTC\", DecisionTreeClassifier()),\n          (\"GNB\", GaussianNB()),\n          (\"SGDC\", SGDClassifier()),\n          (\"Perc\", Perceptron()),\n          (\"NC\", NearestCentroid()),\n          (\"Ridge\", RidgeClassifier()),\n          (\"NuSVC\", NuSVC()),\n          (\"BNB\", BernoulliNB()),\n          (\"RF\", RandomForestClassifier()),\n          (\"ADA\", AdaBoostClassifier()),\n          (\"XGB\", GradientBoostingClassifier()),\n          (\"PAC\", PassiveAggressiveClassifier()) \n    \n]\n\nresults = []\nnames=[]\nfinalresults=[]\n\nfor name, model in models:\n    model.fit(x_train, y_train)\n    model_results = model.predict(x_test)\n    score= precision_score(y_test, model_results, average='macro')\n    results.append(score)\n    names.append(name)\n    finalresults.append((name,score))","83120acb":"finalresults.sort(key=lambda k:k[1], reverse=True)\nfinalresults","237b71aa":"# Grid search and space:\n\n\nmodels_params= {\n    \"RF\":{'model':RandomForestClassifier(),\n         'params':{\n             'max_features': list(range(1,10)),\n             'n_estimators':[10,100,1000]\n         }},\n    'Ridge':{'model':RidgeClassifier(),\n           'params':{\n               'solver':['auto','svd','cholesky','lsqr','sparse_cg','sag','saga'],\n    \n           }},\n    'XGB':{'model':GradientBoostingClassifier(),\n           'params':{\n            'learning_rate':[0.0001,0.001,0.01,0.1],\n            'n_estimators':[100,200,500,1000],\n            'max_features':['sqrt','log2'],\n            'max_depth':list(range(11))                        \n               \n           }}\n    \n}\n\n# Evaluation:\n\ncv = RepeatedStratifiedKFold(n_splits=5,n_repeats=20)\n\n# Search:\n\nscores=[]\n\nfor model_name, params in models_params.items(): \n    rs = RandomizedSearchCV(params['model'], params['params'], cv=cv , n_iter=10)\n    rs.fit(x_train,y_train)\n    scores.append([model_name,dict(rs.best_params_),rs.best_score_])\ndata=pd.DataFrame(scores,columns=['Model','Parameters','Score'])\ndata\n","c79e48d9":"XGB = GradientBoostingClassifier(n_estimator=500,max_features = sqrt)\nXGB.fit(x_train,y_train)\nHeart_failure = XGB.predict(x_test)\n\n","1f6e55ce":"<div  style=\"background-color:w; color:#636363;border:indianred; border-width:2px; border-style:solid;\">\n\n   \n<p ><font size=4><b>Note:<\/font> <\/p>\n<p><font size = 4>\nThe 3 best models are : Ridge, RF and XGB \n<\/p>\n<\/div>","f9a898c2":"\n\n<div  style=\"background-color:w; color:#636363;border:indianred; border-width:2px; border-style:solid;\">\n\n   \n<p ><font size=4><b>Project Description:<\/font> <\/p>\n    \n<p><font size = 4>\nCreate a model to assess the likelihood of a possible heart disease event \n    <\/p>\n    \n<p ><font size=4><b>Questions:<\/font> <\/p>\n<p><font size = 4>\nWhat is the relationship between parmeter and Heart Disease ? <br>\nWhat age is most affected by this disease ?    \n<\/p>\n    \n<p ><font size=4><b>Parameters:<\/font> <\/p>\n\n\n1. Age: age of the patient [years]\n2. Sex: sex of the patient [M: Male, F: Female]\n3. ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n4. RestingBP: resting blood pressure [mm Hg]\n5. Cholesterol: serum cholesterol [mm\/dl]\n6. FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n7. RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n8. MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n9. ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n10. Oldpeak: oldpeak = ST [Numeric value measured in depression]\n11. ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n12. HeartDisease: output class [1: heart disease, 0: Normal]\n    \n<\/div>","f0c72e68":"<div  style=\"background-color:w; color:#636363;border:indianred; border-width:2px; border-style:solid;\">\n\n   \n<p ><font size=4><b>Note:<\/font> <\/p>\n<p><font size = 4>\nThere are some columns where the values are object, we need transform this values in numerical. \n<\/p>\n<\/div>","c27d440f":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h4><center>Hyperparameter Tuning<\/center><\/h4>\n<\/div","fd929a29":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Final Model<\/center><\/h2>\n<\/div","cc999087":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Libraries<\/center><\/h2>\n<\/div>","fb04145e":"**Missing Values:**","ce65fb1b":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h4><center>Spot Checking<\/center><\/h4>\n<\/div>","855eb350":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Data Tratament<\/center><\/h2>\n<\/div>","fe8b599a":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Modeling<\/center><\/h2>\n<\/div>","5531ea20":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Visualizations<\/center><\/h2>\n<\/div>","2a1087ac":"<div  style=\"background-color:w; color:#636363;border:indianred; border-width:2px; border-style:solid;\">\n\n   \n<p ><font size=4><b>Note:<\/font> <\/p>\n    The model XGB presented the best score\n<\/p>\n<\/div>","0ea1792a":"# <html>\n<div  style=\"background-color:w; color:#636363;border:indianred; border-width:5px; border-style:solid;\">\n\n    \n<p><center><img src=\"https:\/\/drive.google.com\/thumbnail?id=1yPGYO8HkTanlqsIXozDIUvUVuvawAdG_\" width =\"6%\"  \/><font size=8> <b>Model: Heart Failure Prediction<\/b><\/font> <\/p>\n<p ><font size=6><center>Ives Tulio<\/font> <\/p>\n<p ><font size=4><center><b>email:<\/b> ivestulio@gmail.com <br> \n<b>Linkedin:<\/b> in\/ives-tulio\/<br>\n<b>GitHub:<\/b> ivestulio<\/p>\n\n<\/div>","ddf46b16":"  \n\n\n\n<div  style=\"background-color:w; color:#636363;border:indianred; border-width:2px; border-style:solid;\">\n\n   \n<p ><font size=4><b>Note:<\/font> <\/p>\n<p><font size = 4>\nFor Describe and Visualization the DataSet , I used Pandas-Profiling library \n<\/p>\n<\/div>","6af786f3":"<div style=\"background-color:peachpuff; color:#636363;\">\n    <h2><center>Importing Dataset<\/center><\/h2>\n<\/div>"}}