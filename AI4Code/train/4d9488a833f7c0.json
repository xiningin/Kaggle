{"cell_type":{"6e6d36e5":"code","2fae2764":"code","a39be2a8":"code","b323e5ae":"code","a73ae68e":"code","45b6d3c8":"code","ec2aed93":"code","0689cec0":"code","77ac73d6":"code","e5d78416":"code","2c1fd859":"code","fc905876":"code","73cf97dd":"code","4cf6f5b1":"code","a72604ae":"code","1352fd7a":"code","1b5e06f8":"code","59587a3f":"code","dd921d3f":"code","8b1aec91":"code","e63d771e":"code","c0616fd6":"code","8aa84f8c":"code","1c673f79":"code","0f8477e1":"code","5e05ff20":"code","8905f004":"code","ac8037a0":"code","1b0be272":"code","18050f5f":"code","019a8583":"code","d6a24d54":"code","dd5d65e0":"code","71c67f10":"code","a246f568":"code","673a9c23":"code","437359a2":"code","5590922f":"code","79fc33da":"code","cc6e650a":"code","d420b7bb":"code","5bae0282":"code","b347b701":"code","8b91c6fe":"code","eb8cfde9":"code","4b130042":"code","389c6af4":"code","1aa7030d":"markdown","8ed8ab51":"markdown","d8233959":"markdown","0ba82d47":"markdown","78ad1c90":"markdown","1ccf3b3f":"markdown","67f7ff84":"markdown","c7bba952":"markdown","655609fb":"markdown","64edc7a7":"markdown","3e2f1081":"markdown","55981b3b":"markdown","325b5e61":"markdown","b1083ec7":"markdown","56d7d67e":"markdown"},"source":{"6e6d36e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2fae2764":"import matplotlib.pyplot as plt\nimport seaborn as sns","a39be2a8":"%matplotlib inline","b323e5ae":"Titanic =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\",index_col=0)\nlen(Titanic)\nTitanic.head()","a73ae68e":"Titanic['Survived'].value_counts()","45b6d3c8":"Titanic.info()","ec2aed93":"Titanic['Cabin'].fillna(value='Unknown',inplace=True)\nTitanic['Embarked'].fillna(value='Unknown',inplace=True)","0689cec0":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=2, ncols=3,figsize=(10,6), dpi=100)\n# sns.set_context('notebook',font_scale=1)\n# sns.set_style('whitegrid')\nsns.countplot(x='Sex',data=Titanic,ax=axes[0][0])\nsns.countplot(x='Pclass',data=Titanic,ax=axes[0][1])\nsns.countplot(x='Survived',data=Titanic,ax=axes[0][2])\nsns.countplot(x='SibSp',data=Titanic,ax=axes[1][0])\nsns.countplot(x='Parch',data=Titanic,ax=axes[1][1])\nsns.countplot(x='Embarked',data=Titanic,ax=axes[1][2])","77ac73d6":"sns.set()\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12,4), dpi=100)\nsns.distplot(Titanic[Titanic['Age'].notnull()]['Age'],ax=axes[0],kde=False)\nsns.distplot(Titanic[Titanic['Fare'].notnull()]['Fare'],ax=axes[1],kde=False)","e5d78416":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=2, ncols=3,figsize=(10,6), dpi=100)\n# sns.set_context('notebook',font_scale=1)\n# sns.set_style('whitegrid')\nsns.countplot(x='Sex',data=Titanic,ax=axes[0][0],hue='Survived')\nsns.countplot(x='Pclass',data=Titanic,ax=axes[0][1],hue='Survived')\nsns.countplot(x='Survived',data=Titanic,ax=axes[0][2])\nsns.countplot(x='SibSp',data=Titanic,ax=axes[1][0],hue='Survived')\nsns.countplot(x='Parch',data=Titanic,ax=axes[1][1],hue='Survived')\nsns.countplot(x='Embarked',data=Titanic,ax=axes[1][2],hue='Survived')","2c1fd859":"fig=plt.figure(figsize =(15,15),dpi=100)\ng = sns.FacetGrid(Titanic, col=\"Pclass\",  row=\"Sex\")\ng = g.map(sns.countplot, \"Survived\")","fc905876":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Sex\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Sex\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","73cf97dd":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Embarked\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Embarked\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","4cf6f5b1":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Parch\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Parch\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","a72604ae":"Titanic.drop(['Name','Ticket','Cabin','Age','Fare'],inplace=True,axis=1)\nTitanic.info()","1352fd7a":"Test =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\",index_col=0)","1b5e06f8":"Test.drop(['Name','Ticket','Cabin','Age','Fare'],inplace=True,axis=1)\nTest.info()","59587a3f":"Titanic.dropna(subset=['Embarked'],inplace=True)","dd921d3f":"Titanic[Titanic['Sex']=='male'] = Titanic[Titanic['Sex']=='male'].fillna(Titanic[Titanic['Sex']=='male']['Age'].mean())","8b1aec91":"Titanic[Titanic['Sex']=='female'] = Titanic[Titanic['Sex']=='female'].fillna(Titanic[Titanic['Sex']=='female']['Age'].mean())","e63d771e":"Titanic.info()","c0616fd6":"Corr = Titanic.corr()\nfig=plt.figure(figsize =(10,10),dpi=65)\nsns.heatmap(Corr,cmap='summer',linewidths=1,linecolor='black',annot=True)","8aa84f8c":"fig =plt.figure(figsize=(15,15),dpi=100)\nsns.set_context('notebook',font_scale=1.3)\nsns.set_style('whitegrid')\ng=sns.pairplot(Titanic,hue='Survived')","1c673f79":"X = Titanic.iloc[:,1:].values\nY=Titanic.iloc[:,0].values","0f8477e1":"Xtest = Test.iloc[:,:].values","5e05ff20":"Xtest","8905f004":"from sklearn.preprocessing import LabelEncoder","ac8037a0":"LabelCol = [1,4]\nfor i in LabelCol:\n    LabelX = LabelEncoder()\n    X[:,i]=LabelX.fit_transform(X[:,i])\n    Xtest[:,i]=LabelX.transform(Xtest[:,i])","1b0be272":"X","18050f5f":"Xtest","019a8583":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score ,precision_score,recall_score,f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","d6a24d54":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","dd5d65e0":"# For ROC curve\ndef plot_roc_curve(fpr, tpr,col,lab):\n    plt.plot(fpr, tpr, color=col, label=lab)\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","71c67f10":"X_train,X_test,Y_Train,Y_Test = train_test_split(X,Y,test_size= 0.20)","a246f568":"classifierLogistic = LogisticRegression()\nclassifierLogistic.fit(X_train, Y_Train)\ny_pred_logit = classifierLogistic.predict(X_test)\n\ncm_logit = confusion_matrix(Y_Test, y_pred_logit)\nprint('Confusion matrix for Logistic',cm_logit)\n\naccuracy_logit = accuracy_score(Y_Test, y_pred_logit)\nprecision_logit =precision_score(Y_Test, y_pred_logit)\nrecall_logit =  recall_score(Y_Test, y_pred_logit)\nf1_logit = f1_score(Y_Test, y_pred_logit)\nprint('accuracy_logistic :',accuracy_logit)\nprint('precision_logistic :',precision_logit)\nprint('recall_logistic :',recall_logit)\nprint('f1-score_logistic :',f1_logit)\nauc_logit = roc_auc_score(Y_Test, y_pred_logit)\nprint('AUC_logistic : %.2f' % auc_logit)","673a9c23":"classifierRF = RandomForestClassifier(n_estimators=50,max_depth=10,criterion='entropy')\nclassifierRF.fit(X, Y)\ny_pred_RF = classifierRF.predict(X_test)\n\ncm_RF = confusion_matrix(Y_Test, y_pred_RF)\nprint('Confusion matrix Random Forest',cm_RF)\n\naccuracy_RF = accuracy_score(Y_Test, y_pred_RF)\nprecision_RF =precision_score(Y_Test, y_pred_RF)\nrecall_RF =  recall_score(Y_Test, y_pred_RF)\nf1_RF = f1_score(Y_Test, y_pred_RF)\nprint('accuracy random forest :',accuracy_RF)\nprint('precision random forest :',precision_RF)\nprint('recall random forest :',recall_RF)\nprint('f1-score random forest :',f1_RF)\nauc_RF = roc_auc_score(Y_Test, y_pred_RF)\nprint('AUC: %.2f' % auc_RF)","437359a2":"a=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]\nb=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]\nfig =plt.figure(figsize=(15,15),dpi=50)\nfpr, tpr, thresholds = roc_curve(Y_Test,y_pred_RF)\nplt.plot(fpr, tpr,color ='orange',label ='Logistic' )\nplt.plot(a,b,color='black',linestyle ='dashed')\nplt.legend(fontsize=15)\nplt.xlabel('False Positive Rate',fontsize=15)\nplt.ylabel('True Positive Rate',fontsize=15)","5590922f":"# Test =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\",index_col=0)","79fc33da":"# Test.head()","cc6e650a":"# Test.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)\n# Test.info()","d420b7bb":"# Test['Fare'].index[Test['Fare'].apply(np.isnan)]","5bae0282":"# Test['Fare'][1044] =Test[Test['Embarked']=='S']['Fare'].mean()","b347b701":"# Test[Test['Sex']=='male'] = Test[Test['Sex']=='male'].fillna(Test[Test['Sex']=='male']['Age'].mean())\n# Test[Test['Sex']=='female'] = Test[Test['Sex']=='female'].fillna(Test[Test['Sex']=='female']['Age'].mean())","8b91c6fe":"# Xtest = Test.iloc[:,:].values","eb8cfde9":"# abelCol = [1,6]\n# for i in LabelCol:\n#     LabelX = LabelEncoder()\n#     Xtest[:,i]=LabelX.fit_transform(Xtest[:,i])","4b130042":"y_pred_test = classifierRF.predict(Xtest)","389c6af4":"output = pd.DataFrame({'PassengerId': Test.index, 'Survived': y_pred_test})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1aa7030d":"Building the Model Applying Logistic Rgression only however I have imported other classifier as well","8ed8ab51":"Looking for existing corelation through heat map","d8233959":"Filling the Age with mean for male and Female Separately","0ba82d47":"**Applying the model to our test data**","78ad1c90":"**Preprocessing the Data for Model Building******","1ccf3b3f":"**Analytical Graphs to Check which categorical values are making a difference**","67f7ff84":"**Exploratory Data Analysis**","c7bba952":"We have only two missing values for Embarked column hence dropping that rows of missing values","655609fb":"Assuming that Age less than 1 is for child below 1 year threfore the data is real , Dropping the missing rows for Embarked and Dropping the columns Name , tiket and cabin","64edc7a7":"Count Plots of Categorical Variables","3e2f1081":"Distribution plots of continuous variables","55981b3b":"Overview of the Data","325b5e61":"Filling the Missing value of Fare with the mean of fares for those data which has Embarked as S","b1083ec7":"Filling the missing Age by mean for male and female seperately","56d7d67e":"Label encoding the non numeric columns"}}