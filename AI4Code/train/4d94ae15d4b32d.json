{"cell_type":{"eff5d536":"code","89e1f4d3":"code","e26174f2":"code","5d035dca":"code","372401c6":"code","5743ff8a":"code","8439b503":"code","dd67c733":"code","ca4cf5df":"code","5f7bff68":"code","be4fd085":"code","db65c8cd":"code","498fd6bc":"code","b2ded44f":"code","af3d40bd":"code","cda0d716":"code","4b03c428":"code","aa157a3a":"markdown"},"source":{"eff5d536":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89e1f4d3":"%%time\nbgm = pd.read_csv('\/kaggle\/input\/trans-preprocessing\/BGMOPEN.csv')","e26174f2":"%%time\ntrans = pd.read_csv('\/kaggle\/input\/trans-preprocessing\/Trans.csv')","5d035dca":"%%time\nsubmission = pd.read_csv('\/kaggle\/input\/trans-preprocessing\/CHT_JengHung_submission.csv')","372401c6":"print(bgm.shape)\nprint(trans.shape)\nprint(submission.shape)","5743ff8a":"bgm.head()","8439b503":"trans.head()","dd67c733":"submission","ca4cf5df":"bgm.columns = ['address', 'ban', 'head_ban', 'name', 'capital', 'create_date', 'alias_name', \n              'use_invoice', 'idcode', 'idcode_name', 'idcode1', 'idcode1_name',\n              'idcode2', 'idcode2_name', 'idcode3', 'idcode3_name']","5f7bff68":"bgm.head()","be4fd085":"trans.columns = [c.lower() for c in trans.columns]","db65c8cd":"trans.head()","498fd6bc":"bgm.info()","b2ded44f":"trans.info()","af3d40bd":"# \u6e1b\u5c11 DataFrame \u7684\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\nfor c in trans.columns:\n    trans[c] = trans[c].astype(np.int32) ","cda0d716":"trans.info()","4b03c428":"###################################################################","aa157a3a":"## \u8f49\u63db\u6b04\u4f4d\u6210\u82f1\u6587\u5c0f\u5beb"}}