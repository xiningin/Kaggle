{"cell_type":{"32c58656":"code","dc806572":"code","874bffd2":"code","9658f8b6":"code","eda15a47":"code","5f898fc6":"code","28d45aea":"code","87543d2b":"code","d9cf3f06":"code","9be6f7be":"code","baddf33b":"code","c8fe873a":"code","ab360a9a":"code","f1388cc2":"code","ce676417":"code","48bdd5e9":"code","534f9953":"code","e4346587":"code","88ad1769":"code","d4f16dd5":"markdown","4c80a2f5":"markdown","845a6be6":"markdown","6fd8d0a8":"markdown","1d1ea3e5":"markdown","1db6ad4c":"markdown","80dab437":"markdown","02cfc36f":"markdown","7b422748":"markdown","cb1c0ed7":"markdown","ab69c9ad":"markdown","5f5ed029":"markdown"},"source":{"32c58656":"import os\nimport zipfile\nimport random\n\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport keras\nfrom keras import layers\nimport matplotlib.pyplot as plt\nfrom PIL import Image, ImageDraw","dc806572":"dataset_dir = '..\/input\/facial-keypoints-detection'\ntraining_zip = os.path.join(dataset_dir, \"training.zip\")\ntest_zip = os.path.join(dataset_dir, \"test.zip\")","874bffd2":"if not os.path.exists('dataset'):\n        os.mkdir('dataset')\n        \n# Extract training file\nwith zipfile.ZipFile(os.path.join(dataset_dir, \"training.zip\")) as zipref:\n    zipref.extractall('dataset')\n    \n# Extract test file\nwith zipfile.ZipFile(os.path.join(dataset_dir, \"test.zip\")) as zipref:\n    zipref.extractall('dataset')","9658f8b6":"df = pd.read_csv(\"dataset\/training.csv\")","eda15a47":"# Check if there is missing values in data\nisMissing = False\nfor i in df.index:\n    if (df.iloc[i].isnull().values.any()):\n        isMissing = True\n        break\nprint(isMissing)","5f898fc6":"# Drop where row has nan value\ndropped_df = df.dropna(axis='index')\n\n# Visualize for comparision\nypos = df.index\ntitle = ['before', 'after']\n\nvalues = [df.index.size, dropped_df.index.size]\nplt.bar(title, values)","28d45aea":"def load_img(s):\n    # Convert image to PIL Image format\n    s = [int(num) for num in s.split(' ')]\n    im = np.array(s)\n    im = im.reshape((96, 96, 1))\n    im = np.concatenate([im, im, im], axis=-1)\n    return tf.keras.preprocessing.image.array_to_img(im)","87543d2b":"im_index = random.choices(df.index, k=10)\nim_list = [load_img(df.loc[index]['Image']) for index in im_index]\n\nfig, ax = plt.subplots(nrows=2, ncols=5, figsize=(20, 5))\nindex = 0\nfor r, row in enumerate(ax):\n    for c, col in enumerate(row):\n        ax[r][c].imshow(im_list[index], cmap='gray')\n        ax[r][c].set_xticks([])\n        ax[r][c].set_yticks([])\n        ax[r][c].set_title(im_index[index])\n        index += 1","d9cf3f06":"# Replace missing values with mean\ndf_mean = df.mean()\nprocessed_df = df.fillna(df_mean)","9be6f7be":"missing_index = []\nfor i in df.index:\n    if (df.iloc[i].isnull().values.any()):\n        missing_index.append(i)","baddf33b":"def draw_keypoints_on_image(df):\n    img = load_img(df[-1])\n    img = keras.preprocessing.image.array_to_img(img)\n    draw = ImageDraw.Draw(img)\n    \n    values = np.array(df[:-1], dtype=np.int32).reshape((-1, 2))\n    \n    x_values = values[:, 0]\n    y_values = values[:, 1]\n    \n    size = 1\n    for x, y in zip(x_values, y_values):\n        draw.ellipse((x-size, y-size, x+size, y+size), fill = 'red', outline ='red')\n        \n    return img","c8fe873a":"im_index = random.choices(missing_index, k=5)\nim_list = [draw_keypoints_on_image(processed_df.loc[index]) for index in im_index]\n\nfig, ax = plt.subplots(nrows=2, ncols=5, figsize=(20, 5))\n\nindex = 0\nfor c in range(5):\n    origin_im = load_img(df.loc[index]['Image'])\n    processed_im = draw_keypoints_on_image(processed_df.loc[index])\n    for r in range(2):\n        if (r == 0):\n            ax[r][c].imshow(np.asarray(origin_im))\n        else:\n            ax[r][c].imshow(np.asarray(processed_im))\n            \n        ax[r][c].set_xticks([])\n        ax[r][c].set_yticks([])\n        ax[r][c].set_title(im_index[index])\n    index += 1","ab360a9a":"train_labels = processed_df.drop(\"Image\", axis=1)\n\ntrain_images = processed_df['Image']\ntrain_images = np.array([keras.preprocessing.image.img_to_array(load_img(im)) for im in train_images])","f1388cc2":"model = keras.Sequential([\n    layers.Input(shape=(96, 96, 3)),\n    layers.LayerNormalization(),\n    layers.Conv2D(64, 3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Conv2D(64, 3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Conv2D(64, 3, activation='relu'),\n    layers.MaxPool2D(),\n    layers.Flatten(),\n    layers.Dense(30)\n])\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse', 'mae'])\nmodel.summary()","ce676417":"model.fit(train_images, train_labels, \n          epochs=10,\n          batch_size=32, \n          validation_split=0.2)","48bdd5e9":"test_df = pd.read_csv('dataset\/test.csv')\ntest_images = np.array([np.asarray(load_img(test_df.loc[i]['Image'])) for i in range(test_df.shape[0])])","534f9953":"predicts = model.predict(test_images)","e4346587":"sample_test = random.randint(0, test_images.shape[0])\nx_test = []\ny_test = []\nfor i, num in enumerate(predicts[sample_test]):\n    if(i % 2 == 0):\n        x_test.append(num)\n    else:\n        y_test.append(num)","88ad1769":"plt.imshow(test_images[sample_test])\nplt.scatter(x_test, y_test, color='r')","d4f16dd5":"# Extract zip files","4c80a2f5":"# Prepare data","845a6be6":"# Create simple baseline model","6fd8d0a8":"# Examine images","1d1ea3e5":"# Examine data values","1db6ad4c":"#### Let's see how the modle perform","80dab437":"#### From 10 random images, i find that all keypoints in the dataset should be in the same area. So we should be fine when using mean to generate missing values","02cfc36f":"##### A large part of the training dataset has missing value in it. So we can't drop all those data.","7b422748":"# Import requirements ","cb1c0ed7":"##### Simple check to see if there any missing values in training dataset","ab69c9ad":"# Prepare test data","5f5ed029":"#### See the results after replace nan with mean"}}