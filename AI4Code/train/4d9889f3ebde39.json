{"cell_type":{"49255373":"code","f060c76d":"code","dd273ac7":"code","048ada9f":"code","fc6da97c":"code","8f086d0d":"code","c7717cd5":"code","82fdf697":"code","62025a7f":"code","89632c82":"code","69b7b03c":"code","6073617f":"code","37a4146d":"code","32709e6c":"code","e72c45ff":"code","f153ab1b":"code","1825f1c9":"code","03ab68fd":"code","943785a8":"code","e76e2e58":"code","8bcc3f7d":"code","d1b09f1d":"code","c950919a":"code","9c9cd6c3":"code","bdfdde92":"code","e13426fb":"code","dc4c955f":"code","39d39a11":"code","9dc90e49":"code","5e62e78f":"code","3fe3dd22":"code","3287dc98":"code","a51110bf":"code","0bf29f1b":"code","ae7da2e9":"code","cb6c69af":"code","44b4ede2":"code","2a1046fc":"code","6d1c0b1b":"code","c067b841":"code","5a97e57b":"code","a6f29fb0":"code","7f694978":"code","5bf0edff":"code","eed8d4ff":"code","f0972dac":"code","57cbb074":"code","4e378713":"code","7f20d559":"code","326f4403":"code","8911acad":"code","a93228de":"code","b124a9f4":"code","d3000d94":"code","460f59bf":"code","38ce7c82":"code","ab626c78":"code","b9fdd08a":"code","85fd07eb":"code","5bf879bd":"code","1199a0b0":"code","558de00e":"code","7b4ca508":"code","6f20e2f3":"code","d6cb3570":"code","2cc58abc":"code","9e7ccf70":"code","627c9400":"markdown"},"source":{"49255373":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f060c76d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","dd273ac7":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","048ada9f":"test_data.info()","fc6da97c":"train_data.isnull().sum()","8f086d0d":"test_data.isnull().sum()","c7717cd5":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","82fdf697":"def bar_chart(feature):\n    survived = train_data[train_data[\"Survived\"]==1][feature].value_counts()\n    dead = train_data[train_data[\"Survived\"]==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index=['Survived','Dead']\n    df.plot(kind='bar', stacked=True, figsize=(10,5))","62025a7f":"bar_chart('Sex')","89632c82":"bar_chart('Pclass')","69b7b03c":"bar_chart('SibSp')","6073617f":"train_test_data=[train_data, test_data]\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_data['Title'].value_counts()","37a4146d":"test_data['Title'].value_counts()","32709e6c":"title_map={\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2,\n          \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Mlle\":3, \"Col\": 3, \"Major\": 3, \"Mme\": 3,\n           \"Countess\": 3, \"Sir\": 3, \"Don\": 3, \"Ms\": 3, \"Jonkheer\": 3, \"Capt\": 3, \"Lady\": 3, \"Dona\": 3}\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Title'].map(title_map)","e72c45ff":"train_data.head()\n","f153ab1b":"test_data.head()\n","1825f1c9":"bar_chart('Title')","03ab68fd":"train_data.drop(\"Name\", axis=1, inplace=True)\ntest_data.drop(\"Name\", axis=1, inplace=True)","943785a8":"train_data.head()","e76e2e58":"test_data.head()","8bcc3f7d":"sex_map={\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex']=dataset['Sex'].map(sex_map)","d1b09f1d":"bar_chart('Sex')","c950919a":"train_data[\"Age\"].fillna(train_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_data[\"Age\"].fillna(test_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_data.info()","9c9cd6c3":"#Binning of data for Age\nfor dataset in train_test_data:\n    dataset.loc[dataset['Age']<=16, 'Age']= 0\n    dataset.loc[(dataset['Age']>16) & (dataset['Age']<=26), 'Age']= 1\n    dataset.loc[(dataset['Age']>26) & (dataset['Age']<=36), 'Age']= 2\n    dataset.loc[(dataset['Age']>36) & (dataset['Age']<=62), 'Age']= 3\n    dataset.loc[dataset['Age']>62, 'Age']= 4","bdfdde92":"train_data.head()\nbar_chart('Age')","e13426fb":"Pclass1= train_data[train_data['Pclass']==1]['Embarked'].value_counts()\nPclass2= train_data[train_data['Pclass']==2]['Embarked'].value_counts()\nPclass3= train_data[train_data['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index=['1stclass', '2ndclass', '3rdclass']\ndf.plot(kind='bar', stacked=True, figsize=(10,5))","dc4c955f":"for dataset in train_test_data:\n    dataset[\"Embarked\"]=dataset[\"Embarked\"].fillna('S')","39d39a11":"embarked_map={'S': 0, 'C': 1, 'Q': 2}\nfor dataset in train_test_data:\n    dataset[\"Embarked\"]=dataset[\"Embarked\"].map(embarked_map)","9dc90e49":"train_data.head()","5e62e78f":"train_data[\"Fare\"].fillna(train_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)\ntest_data[\"Fare\"].fillna(test_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)","3fe3dd22":"train_data.info()","3287dc98":"test_data.info()","a51110bf":"for dataset in train_test_data:\n    dataset.loc[dataset['Fare']<=17, 'Fare']= 0,\n    dataset.loc[(dataset['Fare']>17) & (dataset['Fare']<=30), 'Fare']= 1,\n    dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100), 'Fare']= 2,\n    dataset.loc[dataset['Fare']>100, 'Fare']= 3,","0bf29f1b":"train_data.Cabin.value_counts()","ae7da2e9":"for dataset in train_test_data:\n    dataset['Cabin']=dataset['Cabin'].str[:1]","cb6c69af":"Pclass1= train_data[train_data['Pclass']==1]['Cabin'].value_counts()\nPclass2= train_data[train_data['Pclass']==2]['Cabin'].value_counts()\nPclass3= train_data[train_data['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index=['1stclass', '2ndclass', '3rdclass']\ndf.plot(kind='bar', stacked=True, figsize=(10,5))","44b4ede2":"cabin_map={'A':0, 'B':0.4, 'C':0.8, 'D':1.2, 'E':1.6, 'F':2.0, 'G':2.4, 'T':2.8}\nfor dataset in train_test_data:\n    dataset['Cabin']=dataset['Cabin'].map(cabin_map)","2a1046fc":"train_data.head()","6d1c0b1b":"train_data[\"Cabin\"].fillna(train_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"),inplace=True)\ntest_data[\"Cabin\"].fillna(test_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"),inplace=True)","c067b841":"train_data.head()","5a97e57b":"train_data[\"FamilySize\"]=train_data[\"SibSp\"]+train_data[\"Parch\"]+1\ntest_data[\"FamilySize\"]=test_data[\"SibSp\"]+test_data[\"Parch\"]+1","a6f29fb0":"train_data.head()","7f694978":"family_map={1:0, 2:0.4, 3:0.8, 4:1.2, 5:1.6, 6:2.0, 7:2.4, 8:2.8, 9:3.2, 10:3.6, 11:4 }\nfor dataset in train_test_data:\n    dataset[\"FamilySize\"]=dataset[\"FamilySize\"].map(family_map)","5bf0edff":"train_data.head()","eed8d4ff":"features_drop=[\"Ticket\", \"SibSp\", \"Parch\"]\ntrain_data=train_data.drop(features_drop, axis=1)\ntest_data=test_data.drop(features_drop, axis=1)\ntrain_data=train_data.drop([\"PassengerId\"], axis=1)","f0972dac":"train_data.head()","57cbb074":"train=train_data.drop(['Survived'],axis=1)\ntarget=train_data['Survived']\n\ntrain.shape, target.shape","4e378713":"train.head(10)","7f20d559":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nimport numpy as np","326f4403":"train_data.info()","8911acad":"#Cross validation\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nK_Fold=KFold(n_splits=10, shuffle=True, random_state=0)","a93228de":"clf=KNeighborsClassifier(n_neighbors=13)\nscoring='accuracy'\nscore=cross_val_score(clf, train, target, cv=K_Fold, n_jobs=1, scoring=scoring)\nprint(score)","b124a9f4":"round(np.mean(score)*100,2)","d3000d94":"#RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=13)\nscoring='accuracy'\nscore=cross_val_score(clf, train, target, cv=K_Fold, n_jobs=1, scoring=scoring)\nprint(score)","460f59bf":"round(np.mean(score)*100,2)","38ce7c82":"#DecisionTreeClassifier\nclf=DecisionTreeClassifier()\nscoring='accuracy'\nscore=cross_val_score(clf, train, target, cv=K_Fold, n_jobs=1, scoring=scoring)\nprint(score)","ab626c78":"round(np.mean(score)*100,2)","b9fdd08a":"#NaiveBayes\nclf=GaussianNB()\nscoring='accuracy'\nscore=cross_val_score(clf, train, target, cv=K_Fold, n_jobs=1, scoring=scoring)\nprint(score)","85fd07eb":"round(np.mean(score)*100,2)","5bf879bd":"#SVC\nclf=SVC()\nscoring='accuracy'\nscore=cross_val_score(clf, train, target, cv=K_Fold, n_jobs=1, scoring=scoring)\nprint(score)","1199a0b0":"round(np.mean(score)*100,2)","558de00e":"test_data.head()","7b4ca508":"test_data.info()","6f20e2f3":"train_data.info()","d6cb3570":"clf= SVC()\nclf.fit(train,target)\ntest=test_data.drop('PassengerId', axis=1).copy()\nprediction=clf.predict(test)","2cc58abc":"submission = pd.DataFrame({\"PassengerId\": test_data[\"PassengerId\"], \"Survived\": prediction})\nsubmission.to_csv(\"submission.csv\", index=False)","9e7ccf70":"submission = pd.read_csv('submission.csv')\nsubmission.head()","627c9400":"train_data.head(100)"}}