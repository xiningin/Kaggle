{"cell_type":{"74163b70":"code","4dcaa2ef":"code","091ef629":"code","c5857585":"code","3382005c":"code","88fc648b":"code","52d1c540":"code","0ccb9d75":"code","7a533337":"code","ab594a7b":"code","26041836":"code","b1d9df62":"code","4e8ab405":"code","f0476b99":"code","17ef218c":"code","b4e8899e":"code","ca36ac36":"code","d42f5a96":"code","c7855cb8":"code","c1a5732d":"code","de0848a7":"code","bc3d9089":"code","dfd9638a":"code","374299f6":"code","25d7e5ff":"code","e840e510":"code","5ad47cb2":"code","ba60bce7":"code","2187d70e":"code","3e6f26dd":"code","590d47cd":"code","1844b418":"code","6166050c":"code","8e6c1514":"code","28728ce5":"code","7f1b68c2":"code","25fb0680":"code","792aa800":"code","2f53fafa":"code","aa5fd70c":"code","6c384943":"code","b817e1c1":"code","c0315e4d":"code","113d0ecf":"code","c6237ca1":"code","b5758193":"code","9461dde3":"code","733351d4":"code","385407dd":"code","ad40c94a":"code","fb398b40":"code","206fe7ed":"code","56dae856":"code","6ccbe690":"code","4bc2c5f4":"code","14bf6b75":"code","4225d8fc":"code","290f970c":"code","81844c5a":"code","4dd6b35c":"code","e0de1be1":"code","d47f33d2":"code","d0f87293":"code","e70675c8":"code","3605d6d2":"code","d34d922f":"code","c91cc9e9":"code","3b6cc73a":"code","40718601":"code","779018a7":"code","90be5749":"code","ad0c953f":"code","3942cdc4":"code","ff44dfab":"code","ed9511ab":"code","bc742ba8":"code","5eeb7279":"code","e334a85b":"code","bcb61dee":"code","b2d6d545":"code","b38cf7e6":"code","5eebb9db":"code","c6c48afd":"code","7af5a259":"code","d53ed3cd":"code","75f50bf1":"code","9e547cfe":"code","9640d8bf":"code","fa3afafe":"code","882a4ed4":"code","93132194":"code","0be31a2a":"code","fb85b545":"code","fbcb5808":"code","c9c62633":"code","041245ec":"code","1e867f55":"code","486b1cf8":"code","3bbff253":"code","7213c2b2":"code","a710e002":"code","949190ca":"code","7ae2a05f":"code","071ba16c":"code","f1d29a79":"code","c7ce3967":"code","4eaf2dec":"code","3e1dbcbd":"code","f4acd47a":"code","1137607f":"code","54d5909e":"code","34f050fd":"code","58928936":"code","f32ac459":"code","25be825d":"code","3845269a":"code","025cc12d":"code","724f51f5":"code","0b17eac8":"code","a10cc689":"markdown","0c31fd03":"markdown","7335cded":"markdown","83b4b59d":"markdown","57ac54c0":"markdown","48b89f9b":"markdown","bdfca5d2":"markdown","05923b8e":"markdown","f106956a":"markdown","82d50ef3":"markdown","28d0e5aa":"markdown","67002e1c":"markdown","13212955":"markdown","0e7d519f":"markdown","d135eaaa":"markdown","68d34b22":"markdown","714de049":"markdown","13090e95":"markdown","f90e195b":"markdown","7f9da6e9":"markdown","ea419461":"markdown","9870ad38":"markdown","d8cf056d":"markdown","0423b892":"markdown","f2f99a86":"markdown","59b60365":"markdown","bed706f5":"markdown","2543ff0b":"markdown","cde01f13":"markdown","c4401e40":"markdown","f8daac77":"markdown","3a125e3d":"markdown","c2ebccb2":"markdown","79cfc31c":"markdown","cb3f7d23":"markdown","d08d624d":"markdown","c339599f":"markdown","3547f0f4":"markdown","4ba9648d":"markdown","2b91fa28":"markdown","64c8fde5":"markdown","ccc19ee5":"markdown","e41c2019":"markdown","6a59a414":"markdown","b6c6dc08":"markdown","1a958e14":"markdown","19497807":"markdown","6c909298":"markdown","e96f65fa":"markdown","4b4a9365":"markdown","b4c82d62":"markdown","c28d9743":"markdown","fa28fa1e":"markdown","86012840":"markdown","54730d06":"markdown","8ad74d86":"markdown","1a502694":"markdown","d54c8c7c":"markdown","d0258bd3":"markdown","c48e0fbc":"markdown","6616ce73":"markdown","1701210d":"markdown"},"source":{"74163b70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4dcaa2ef":"#Import important libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","091ef629":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","c5857585":"df.head()","3382005c":"df.shape","88fc648b":"null = []\n\nfor feature in df.columns:\n    if df[feature].isnull().sum() > 0:\n        null.append(feature)\n\nnull","52d1c540":"df[null].isnull().sum()","0ccb9d75":"df['MiscFeature'].tail()","7a533337":"df = df.drop(columns = ['PoolQC', 'Alley', 'Fence', 'MiscFeature'])","ab594a7b":"df.shape","26041836":"null2 = []\n\nfor feature in df.columns:\n    if df[feature].isnull().sum() > 0:\n        null2.append(feature)\n\ndf[null2].isnull().sum()","b1d9df62":"df['LotFrontage'].mean()","4e8ab405":"df['LotFrontage'].fillna(df['LotFrontage'].mean(), inplace = True)","f0476b99":"df['LotFrontage'].isnull().sum()","17ef218c":"df['MasVnrType'].value_counts()","b4e8899e":"df['MasVnrType'].fillna('None', inplace = True)","ca36ac36":"df['MasVnrArea'].mean()","d42f5a96":"df['MasVnrArea'].fillna(df['MasVnrArea'].mean(), inplace = True)","c7855cb8":"print(df['MasVnrType'].isnull().sum())\nprint(df['MasVnrArea'].isnull().sum())","c1a5732d":"bsmt = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2']\ndf[bsmt].head()","de0848a7":"bsmt1 = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']\ndf[bsmt1].head()","bc3d9089":"for col in df[bsmt1].columns:\n    if df[col].isnull().sum() > 0:\n        df[col].fillna('None', inplace = True)\n\ndf[bsmt1].isnull().sum()","dfd9638a":"df['BsmtFinType1'].fillna(df['BsmtFinSF1'].mean(), inplace = True)\ndf['BsmtFinSF1'].isnull().sum()","374299f6":"df[null2].isnull().sum()","25d7e5ff":"print(df['Electrical'].isnull().sum())\nprint(df['Electrical'].mode())","e840e510":"df['Electrical'].fillna('SBrkr', inplace = True)\ndf['Electrical'].isnull().sum()","5ad47cb2":"df['FireplaceQu'].fillna('None', inplace = True)\ndf['FireplaceQu'].isnull().sum()","ba60bce7":"garages = ['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond']\ndf[garages].head()","2187d70e":"garages1 = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\nfor col in df[garages1].columns:\n    if df[col].isnull().sum() > 0:\n        df[col].fillna('None', inplace = True)\n\ndf[garages1].isnull().sum()","3e6f26dd":"from scipy import stats\nfrom scipy.stats import norm, skew \nsns.distplot(df['GarageYrBlt'], fit  = norm)","590d47cd":"print('Year built mode is',str(df['GarageYrBlt'].mode()))\nprint('Year built mean is',str(df['GarageYrBlt'].mean()))","1844b418":"df['GarageYrBlt'].fillna(df['GarageYrBlt'].mean(), inplace = True)\ndf['GarageYrBlt'].isnull().sum()","6166050c":"sns.distplot(df['GarageYrBlt'], fit  = norm)","8e6c1514":"df[null2].isnull().sum()","28728ce5":"cat = []\n\nfor col in df.columns:\n  if df[col].dtype == 'object':\n    cat.append(col)\n\ndf_cat = df[cat]\ndf_cat.head()","7f1b68c2":"df_cat = df[cat]\nprint(df_cat.shape)","25fb0680":"dummies = pd.get_dummies(df_cat)\ndummies","792aa800":"num = []\n\nfor col in df.columns:\n    if df[col].dtypes != 'object':\n        num.append(col)\n        \ndf_num = df[num]\ndf_num.head()","2f53fafa":"df_num.describe()","aa5fd70c":"corrmat = df.corr()\ntop_corr_features = corrmat.index[abs(corrmat['SalePrice'])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(df[top_corr_features].corr(), annot=True, cmap='RdYlGn')","6c384943":"print('We have ',top_corr_features.shape[0], 'features that have a correlation higher than 0.5 with SalePrice')","b817e1c1":"sns.set()\nsns.pairplot(df[top_corr_features], size = 2.5)\nplt.show();","c0315e4d":"df_model = pd.concat([df_num, dummies], axis=1)\ndf_model.head()","113d0ecf":"X = df_model.drop('SalePrice', axis=1)\ny = df_model['SalePrice']","c6237ca1":"X.head()","b5758193":"y.head()","9461dde3":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","733351d4":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)","385407dd":"reg = LinearRegression()\nreg.fit(X_train, y_train)\nreg.score(X_train, y_train)","ad40c94a":"reg_test = LinearRegression()\nreg_test.fit(X_test, y_test)\nreg_test.score(X_test, y_test)","fb398b40":"pred = reg.predict(X_test)\npred_train = reg.predict(X_train)","206fe7ed":"plt.scatter(pred_train, y_train, c = 'blue', label = 'Training Data')\nplt.scatter(pred, y_test, c = 'black', label = 'Validation Data')\nplt.title('Linear Regression')\nplt.xlabel('Predicted values')\nplt.ylabel('Residuals')\nplt.legend(loc = 'upper left')\nplt.show()","56dae856":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score","6ccbe690":"print(reg.intercept_)\n#print(reg.coef_)","4bc2c5f4":"all_coef = pd.DataFrame(reg.coef_, X.columns, columns=['Coefficients'])\nall_coef.sort_values('Coefficients', ascending=False).head(10)\n","14bf6b75":"top = top_corr_features[0:-1]\ntop","4225d8fc":"coef = pd.DataFrame(reg.coef_, X.columns, columns=['Coefficients'])\ncoef1 = coef.transpose()\nimp_coef_df = coef1[top].transpose().sort_values(by = 'Coefficients',ascending=False)\nimp_coef_df","290f970c":"def evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square:', r2_square)\n    print('-----------------------------')","81844c5a":"#evaluation for train data\nevaluate(y_train, pred_train)","4dd6b35c":"#evaluation for test data\nevaluate(y_test, pred)","e0de1be1":"residuals = y_test-pred\n#plt.hist(residuals, pred)\na4_dims = (12, 8.27)\nfig, ax = plt.subplots(figsize=a4_dims)\nsns.regplot(x=pred, y=y_test, color='g')\nplt.show()\n","d47f33d2":"null = []\n\nfor feature in df_test.columns:\n    if df_test[feature].isnull().sum() > 0:\n        null.append(feature)\n\nnull","d0f87293":"df_test[null].isnull().sum()","e70675c8":"df_test = df_test.drop(columns = ['PoolQC', 'Alley', 'Fence', 'MiscFeature'])","3605d6d2":"df_test.shape","d34d922f":"null2 = []\n\nfor feature in df_test.columns:\n    if df_test[feature].isnull().sum() > 0:\n        null2.append(feature)\n\ndf_test[null2].isnull().sum()","c91cc9e9":"df_test['LotFrontage'].mean()","3b6cc73a":"df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean(), inplace = True)","40718601":"df_test['LotFrontage'].isnull().sum()","779018a7":"df_test['MasVnrType'].value_counts()","90be5749":"df_test['MasVnrType'].fillna('None', inplace = True)","ad0c953f":"df_test['MasVnrArea'].mean()","3942cdc4":"df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mean(), inplace = True)","ff44dfab":"print(df_test['MasVnrType'].isnull().sum())\nprint(df_test['MasVnrArea'].isnull().sum())","ed9511ab":"df_test[bsmt].head()","bc742ba8":"df[bsmt1].head()","5eeb7279":"for col in df_test[bsmt1].columns:\n    if df_test[col].isnull().sum() > 0:\n        df_test[col].fillna('None', inplace = True)\n\ndf_test[bsmt1].isnull().sum()","e334a85b":"df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean(), inplace = True)\ndf_test['BsmtFinSF1'].isnull().sum()","bcb61dee":"df_test[null2].isnull().sum()","b2d6d545":"print(df_test['Electrical'].isnull().sum())\nprint(df_test['Electrical'].mode())","b38cf7e6":"df_test['Electrical'].fillna('SBrkr', inplace = True)\ndf_test['Electrical'].isnull().sum()","5eebb9db":"df_test['FireplaceQu'].fillna('None', inplace = True)\ndf_test['FireplaceQu'].isnull().sum()","c6c48afd":"garages_test = ['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageCars', 'GarageArea']\ndf_test[garages_test].head()","7af5a259":"garages_test_cat = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']\ngarages_test_num = ['GarageYrBlt', 'GarageCars', 'GarageArea']\n\nfor col in df_test[garages_test_cat].columns:\n    if df_test[col].isnull().sum() > 0:\n        df_test[col].fillna('None', inplace = True)\n\ndf_test[garages_test_cat].isnull().sum()","d53ed3cd":"for i in df_test[garages_test_num]:\n    sns.distplot(df_test[i], fit  = norm)\n    plt.show()\n    print('Mean of ',str(i) , df_test[i].mean())\n    print('Mode of ',str(i) , df_test[i].mode())\n","75f50bf1":"df_test['GarageYrBlt'].fillna(df_test['GarageYrBlt'].mean(), inplace = True)\ndf_test['GarageYrBlt'].isnull().sum()","9e547cfe":"df_test['GarageCars'].fillna(2.0, inplace = True)\ndf_test['GarageCars'].isnull().sum()","9640d8bf":"df_test['GarageArea'].fillna(df_test['GarageArea'].mean(), inplace = True)\ndf_test['GarageArea'].isnull().sum()","fa3afafe":"df_test[null2].isnull().sum()","882a4ed4":"df_test['MSZoning'].mode()","93132194":"df_test['MSZoning'].fillna('RL', inplace = True)\ndf_test['MSZoning'].isnull().sum()","0be31a2a":"df_test['Utilities'].mode()","fb85b545":"df_test['Utilities'].fillna('AllPub', inplace = True)\ndf_test['Utilities'].isnull().sum()","fbcb5808":"df_test['Exterior1st'].mode()","c9c62633":"df_test['Exterior1st'].fillna('VinylSd', inplace = True)\ndf_test['Exterior1st'].isnull().sum()","041245ec":"df_test['Exterior2nd'].mode()","1e867f55":"df_test['Exterior2nd'].fillna('VinylSd', inplace = True)\ndf_test['Exterior2nd'].isnull().sum()","486b1cf8":"bsmt_test = ['BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath', 'BsmtHalfBath']","3bbff253":"df_test[bsmt_test].head()","7213c2b2":"for col in df_test[bsmt_test].columns:\n    if df_test[col].isnull().sum() > 0:\n        df_test[col].fillna(df_test[col].mean(), inplace = True)","a710e002":"df_test[null2].isnull().sum()","949190ca":"df_test['KitchenQual'].mode()\ndf_test['KitchenQual'].fillna('TA', inplace=True)\ndf_test['KitchenQual'].isnull().sum()","7ae2a05f":"df_test['Functional'].mode()\ndf_test['Functional'].fillna('Typ', inplace=True)\ndf_test['Functional'].isnull().sum()","071ba16c":"df_test['SaleType'].mode()\ndf_test['SaleType'].fillna('WD', inplace=True)\ndf_test['SaleType'].isnull().sum()","f1d29a79":"null = []\n\nfor feature in df_test.columns:\n    if df_test[feature].isnull().sum() > 0:\n        null.append(feature)\n\nnull","c7ce3967":"cat_test = []\n\nfor col in df_test.columns:\n  if df_test[col].dtype == 'object':\n    cat_test.append(col)\n\ndf_cat_test = df[cat_test]\ndf_cat_test.head()","4eaf2dec":"df_cat_test = df_test[cat]\nprint(df_cat_test.shape)\nprint(df_cat.shape)","3e1dbcbd":"dummies.shape\n249-233","f4acd47a":"test_dummies = pd.get_dummies(df_cat_test, drop_first=False)\ntest_dummies.shape","1137607f":"num_test = []\n\nfor col in df_test.columns:\n    if df_test[col].dtypes != 'object':\n        num_test.append(col)\n        \ndf_num_test = df_test[num_test]\ndf_num_test.head()","54d5909e":"df_num_test.describe()","34f050fd":"df_model_test = pd.concat([df_num_test, test_dummies], axis=1)\ndf_model_test.head()","58928936":"df_model_test.shape","f32ac459":"X_train = df_model.drop('SalePrice', axis=1)\ny_train = df_model['SalePrice']\n","25be825d":"X_test = df_model_test\nprint(X_test.shape)\nprint(X_train.shape)","3845269a":"final_reg = LinearRegression()\nfinal_reg.fit(X_train, y_train)\nfinal_reg.score(X_train, y_train)","025cc12d":"predictions = final_reg.predict(X_test)\npredictions","724f51f5":"sample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample.shape","0b17eac8":"pred1.shape","a10cc689":"We'll replace missing values with the mean","0c31fd03":"## 2.1 Categorical","7335cded":"Now I want to analyze the coefficients of the model to interpret how some variables affect the model.","83b4b59d":"### Lot Frontage","57ac54c0":"#### We should now have no null values","48b89f9b":"Now replace the year built for mode or mean. Let's explore how years are distributed.","bdfca5d2":"### KitchenQual","05923b8e":"#### What are the remaining features with null values for test?","f106956a":"### MasVnrType & MasVnrArea","82d50ef3":"---","28d0e5aa":"## 5.4 Modelling**","67002e1c":"### SaleType","13212955":"The remaining feature with the most missing valus (690)\n\nAs a missing value means there is no fireplace, we'll replace the NaN values with 'None'.","0e7d519f":"### 1.1.6 Feature: Garages (GarageType, GarageYrBlt, GarageFinish, GarageQual, GarageCond) ","d135eaaa":"### 1.1.2 Feature: MasVnrType & MasVnrArea","68d34b22":"All,  except BsmtFinSF1, are categorical values. Therefore, we are going to replace this valus for 'None', assuming there is no basement.","714de049":"# 4. Modeling","13090e95":"#### What does this mean?\n\n**Interpretation of most important coefficients (regarding correlation to SalePrice):**\n* If all other features are fixed, an increase in 1 unit in **OverallQuall** is asociated with an **increase of $6741.84** in SalePrice\n\n* If all other features are fixed, an increase in 1 unit in **YearBuilt** is asociated with an **increase of $352.91** in SalePrice\n\n* If all other features are fixed, an increase in 1 unit in **YearRemodAdd** is asociated with an **increase of $132.13** in SalePrice\n\n* And so on with all other values...","f90e195b":"## 5.3 Prepare Data for modelling","7f9da6e9":"## 4.1 Linear regression","ea419461":"We have replaced all null values with 'None'.\n\nNow we must manipualte the 'BsmtFinType1' feature for the mean","9870ad38":"### Exterior1st and Exterior 2nd","d8cf056d":"This shows us the 10 most important features regarding it's effect on the SalePrice. All of them are related to categorical features, which makes sense because their values are eithere 0 or 1.\n\nFor example: if a house has a roof material made out of metal, is's SalePrice is going to be **increased (if all other values are fixed) by $131,098**\n\nAnother example: if a house has a garage in excelent quality, is's SalePrice is going to be **increased (if all other values are fixed) by $124,192**","0423b892":"# 3. Exploration","f2f99a86":"## 5.2 Numerical and categorical\n### 5.2.1 Test: Categorical ","59b60365":"# 1. Data Manipulation\n## 1.1 Manipulating NaN values","bed706f5":"### Utilities","2543ff0b":"This are the columns which still have null values. We have to manipulate them in order to remove the null values.","cde01f13":"---","c4401e40":"## 4.1 Making a complete DataFrame for all the data","f8daac77":"#### Which features are remaining?","3a125e3d":"#### Have we remoev all missing values? Lets check","c2ebccb2":"## 2.2 Numerical","79cfc31c":"We now know that we have the df dummies and df_num which have the values we want. We must put them together.","cb3f7d23":"We have dropped the columns which had over 1000 missing values.","d08d624d":"We are going to replace the NaN values for None value, meaning they don't have masonry veneer type.","c339599f":"### MSZoning","3547f0f4":"---","4ba9648d":"# 2. Working with numerical and categorical values","2b91fa28":"## 5.1 Data Manipulation \nWe must now manipulate all the test dataframe as we have done with the train dataframe in order to be able to predict the values","64c8fde5":"## 4.2 Evaluation","ccc19ee5":"We are going to replace the 259 missing values with the mean of the LotFrontage of the whole dataframe","e41c2019":"We must do one-hot-encoding in order to create dummies for the categorical values. This is the only way we'll be able to put them inside our model.","6a59a414":"# 5. Test DataFrame","b6c6dc08":"### 5.2.2 Test: ","1a958e14":"Let's see how the distribution is now","19497807":"### Basement Features (BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinSF1, BsmtFinType2)","6c909298":"### 1.1.4 Feature: Electrical","e96f65fa":"All features, except GarageYrBlt, are categorical.","4b4a9365":"# 4. Prepare data for modeling","b4c82d62":"### Electrical","c28d9743":"### Basement features","fa28fa1e":"Now that we have all the features in one DataFrame, we must drop the target variable, and store it on another variable.","86012840":"We've added several values, therefore, we've modified the distribution. Not ideal, but simple way to handle missing values","54730d06":"### Functional","8ad74d86":"### FireplaceQu","1a502694":"---","d54c8c7c":"### 1.1.3 Feature: Basement Features (BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinSF1, BsmtFinType2)","d0258bd3":"### 1.1.1 Feature: Lot Frontage","c48e0fbc":"As we just have 1 missing value, we'll replace it with the mode","6616ce73":"We'll want to see what are the features that are more highly correlated to SalePrice","1701210d":"### 1.1.5 Feature: FireplaceQu"}}