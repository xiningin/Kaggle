{"cell_type":{"89866738":"code","88e5048d":"code","c1301f17":"code","c0ab76b4":"code","bdea0ff7":"code","8a249086":"code","947fd062":"code","a4dd8df1":"code","7f98d368":"code","5bb306b2":"code","93d21b4f":"code","38739b8d":"code","ac4e10d9":"code","151fabd9":"code","39ab96a1":"code","5ac53728":"code","db894646":"code","a02fd48e":"code","850cea92":"code","54a3354e":"code","c0e3b06a":"code","9b003552":"code","07d5809b":"code","91b6bc00":"code","04a79602":"code","0301b835":"code","83aad3fe":"code","3e192d4b":"code","38dc6a55":"code","c3942c10":"code","eaeed92f":"code","963a88ee":"code","574f4209":"code","7135e219":"code","66ea5a47":"code","597d713c":"code","f024d5ca":"code","66f6f91b":"code","076fe393":"code","d3f93121":"code","38e2f029":"code","4ac7367e":"code","2d68c391":"code","b5725d6e":"code","3f8e78c4":"code","3fbed512":"code","4ceaea5b":"markdown","a9dd5579":"markdown","309e4b10":"markdown","8e904d97":"markdown","8b6e2344":"markdown","c5fddbdc":"markdown","8d93ccda":"markdown","443dd416":"markdown","86607c7f":"markdown","fc8c5e4c":"markdown","13096197":"markdown","4c3ecf48":"markdown","4c1ec000":"markdown","437d60a2":"markdown","49c4cd26":"markdown","c9f19745":"markdown","95cec68f":"markdown","eb74dc64":"markdown","63dd726f":"markdown","1008cbd0":"markdown","6e59fb4c":"markdown","b64bf96e":"markdown","f22aec57":"markdown","e6ad5f2c":"markdown","4c8fb2af":"markdown","c0e163c4":"markdown","639ed154":"markdown","13032b49":"markdown","39dc14df":"markdown","dbc51e46":"markdown","e360abbc":"markdown"},"source":{"89866738":"#Data management\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\nfrom pandas_profiling import ProfileReport\n\n#TextBlob Features\nfrom textblob import TextBlob\n\n#Plotting\nimport matplotlib.pyplot as plt\n\n#SciKit-Learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n#nltk\nimport nltk\nfrom nltk.corpus import stopwords\n#nltk.download('stopwords')\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\n#nltk.download('wordnet')\n\n#Tensorflow \/ Keras\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\n\n#Test\nfrom collections import Counter","88e5048d":"#Training Data\npath = \"..\/input\/twitter-entity-sentiment-analysis\/twitter_training.csv\"\ntrain_df = pd.read_csv(path, names=[\"Tweet_ID\", \"Entity\", \"Sentiment\", \"Tweet_Content\"])\n\n#Test Data (Not to be used until the full model has been trained)\ntest_path = \"..\/input\/twitter-entity-sentiment-analysis\/twitter_validation.csv\"\ntest_df = pd.read_csv(test_path, names=[\"Tweet_ID\", \"Entity\", \"Sentiment\", \"Tweet_Content\"])","c1301f17":"train_df = train_df.dropna()\ntest_df = test_df.dropna()","c0ab76b4":"train_df.shape","bdea0ff7":"df = train_df.sample(frac=0.1)\ndf.reset_index(drop=True, inplace=True)","8a249086":"#See overall information about the data frame\ndf.info()","947fd062":"#Display a few entries\ndf.head()","a4dd8df1":"profile = ProfileReport(df, title=\"Pandas Profiling Report\", explorative=True)\nprofile","7f98d368":"#Checking balance of target classes\nsentiments = list(df[\"Sentiment\"].unique())\n\nsentiment_nums = [len(df[df[\"Sentiment\"] == sentiment]) \/ len(df) for sentiment in sentiments]\n\nplt.bar(sentiments, sentiment_nums)","5bb306b2":"#View all possible entities\nprint(df[\"Entity\"].unique())\nprint(len(df[\"Entity\"].unique()))","93d21b4f":"#One-hot encode using Pandas' get_dummies()\nonehot = pd.get_dummies(df[\"Entity\"], prefix=\"Entity\")\n\n#Join these new columns back into the DataFrame\ndf = df.join(onehot)\n\n#Display a sample of the data with our new columns\ndf.head()","38739b8d":"#Remove the Entity column, as we have transformed this data into a more usable format\n\ndf = df.drop(\"Entity\", axis=1)","ac4e10d9":"#Adding dimensions with textblob\ndef tb_enrich(ls):\n    #Enriches a column of text with TextBlob Sentiment Analysis outputs\n    tb_polarity = []\n    tb_subject = []\n\n    for tweet in ls:\n        tb_polarity.append(TextBlob(tweet).sentiment[0])\n        tb_subject.append(TextBlob(tweet).sentiment[1])\n    \n\n    return tb_polarity, tb_subject\n    \ndf[\"Polarity\"], df[\"Subjectivity\"] = tb_enrich(list(df[\"Tweet_Content\"]))","151fabd9":"df.head()","39ab96a1":"#Define the indexing for each possible label in a dictionary\nclass_to_index = {\"Neutral\":0, \"Irrelevant\":0, \"Negative\":2, \"Positive\": 3}\n\n#Creates a reverse dictionary\nindex_to_class = {0:\"Neutral\/Irrelevant\", 2:\"Negative\", 3:\"Positive\"}\n\n#Creates lambda functions, applying the appropriate dictionary\nnames_to_ids = lambda n: np.array([class_to_index.get(x) for x in n])\nids_to_names = lambda n: np.array([index_to_class.get(x) for x in n])","5ac53728":"#Test each function\nprint(names_to_ids([\"Positive\", \"Negative\", \"Irrelevant\", \"Neutral\"]))\nprint(ids_to_names([0,1,2,3]))","db894646":"#Convert the \"Sentiment\" column into indexes\ndf[\"Sentiment\"] = names_to_ids(df[\"Sentiment\"])","a02fd48e":"df.head()","850cea92":"def remove_stopwords(ls):\n    #Lemmatises, then removes stop words\n    ls = [lemmatiser.lemmatize(word) for word in ls if word not in (stop_english) and (word.isalpha())]\n    \n    #Joins the words back into a single string\n    ls = \" \".join(ls)\n    return ls\n\n#Splits each string into a list of words\ndf[\"Tweet_Content_Split\"] = df[\"Tweet_Content\"].apply(word_tokenize)\n\n#Applies the above function to each entry in the DataFrame\nlemmatiser = WordNetLemmatizer()\nstop_english = Counter(stopwords.words()) #Here we use a Counter dictionary on the cached\n                                          # list of stop words for a huge speed-up\ndf[\"Tweet_Content_Split\"] = df[\"Tweet_Content_Split\"].apply(remove_stopwords)","54a3354e":"df.head()","c0e3b06a":"#Define the Tokeniser\ntokeniser = Tokenizer(num_words=1000, lower=True)\n\n#Create the corpus by finding the most common \ntokeniser.fit_on_texts(df[\"Tweet_Content_Split\"])","9b003552":"#Tokenise our column of edited Tweet content\ntweet_tokens = tokeniser.texts_to_matrix(list(df[\"Tweet_Content_Split\"]))","07d5809b":"tweet_tokens.shape","91b6bc00":"print(df.shape)\nprint(tweet_tokens.shape)","04a79602":"#Combining the dataframe with the tokens using pd.concat\nfull_df = pd.concat([df, pd.DataFrame(tweet_tokens)], sort=False, axis=1)\nfull_df.shape","0301b835":"#Remove dependent variable\ny = full_df[\"Sentiment\"]\n\n#Drop all non-useful columns\nfull_df = full_df.drop([\"Sentiment\", \"Tweet_ID\", \"Tweet_Content\", \"Tweet_Content_Split\"], axis=1)","83aad3fe":"#Display final shape\nfull_df.shape","3e192d4b":"X_train, X_test, y_train, y_test = train_test_split(full_df, y, test_size=0.2, random_state=1)","38dc6a55":"#Test model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(12, input_dim=1034, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(50, activation='relu'),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Dense(12, activation='relu'),\n    tf.keras.layers.Dense(50, activation='relu'),\n    tf.keras.layers.Dense(4, activation='sigmoid')\n])\nmodel.compile(\n     loss='sparse_categorical_crossentropy',\n     optimizer='adam',\n     metrics=['accuracy']\n)","c3942c10":"h = model.fit(\n     X_train, y_train,\n     validation_data=(X_test, y_test),\n     epochs=30,\n     callbacks=[tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=5)]\n)","eaeed92f":"#Generate predictions\ny_pred = np.argmax(model.predict(X_test), axis=1)\n\n#Assign labels to predictions and test data\ny_pred_labels = ids_to_names(y_pred)\ny_test_labels = ids_to_names(y_test)","963a88ee":"y_unique = list(set(y_test_labels))\ncm = confusion_matrix(y_test_labels, y_pred_labels, labels = y_unique, normalize='true')\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=y_unique)\ndisp.plot()","574f4209":"#Use the full dataset!\ndf = train_df\n\n# the test dataframe was loaded earlier and is named test_df","7135e219":"#One-hot encode using Pandas' get_dummies()\n\n##Train\nonehot = pd.get_dummies(df[\"Entity\"], prefix=\"Entity\")\n\n#Join these new columns back into the DataFrame\ndf = df.join(onehot)\n\n\n##Test\nonehot = pd.get_dummies(test_df[\"Entity\"], prefix=\"Entity\")\n\ntest_df = test_df.join(onehot)","66ea5a47":"#Enrich using TextBlob's built in sentiment analysis\n\n##Train\ndf[\"Polarity\"], df[\"Subjectivity\"] = tb_enrich(list(df[\"Tweet_Content\"]))\n\n\n##Test\ntest_df[\"Polarity\"], test_df[\"Subjectivity\"] = tb_enrich(list(test_df[\"Tweet_Content\"]))","597d713c":"#Convert the \"Sentiment\" column into indexes\n\n##Train\ndf[\"Sentiment\"] = names_to_ids(df[\"Sentiment\"])\ny = df[\"Sentiment\"]\n\n##Test\ntest_df[\"Sentiment\"] = names_to_ids(test_df[\"Sentiment\"])\ny_test = test_df[\"Sentiment\"]","f024d5ca":"#Removing stopwords and lemmatising\n\n##Train\n#Splits each string into a list of words\ndf[\"Tweet_Content_Split\"] = df[\"Tweet_Content\"].apply(word_tokenize)\n\n#Applies the above function to each entry in the DataFrame\nlemmatiser = WordNetLemmatizer()\nstop_english = Counter(stopwords.words()) #Here we use a Counter dictionary on the cached\n                                          # list of stop words for a huge speed-up\ndf[\"Tweet_Content_Split\"] = df[\"Tweet_Content_Split\"].apply(remove_stopwords)\n\n##Test\ntest_df[\"Tweet_Content_Split\"] = test_df[\"Tweet_Content\"].apply(word_tokenize)\n\ntest_df[\"Tweet_Content_Split\"] = test_df[\"Tweet_Content_Split\"].apply(remove_stopwords)","66f6f91b":"#Tokenisation\n\n#Define the Tokeniser\ntokeniser = Tokenizer(num_words=1000, lower=True)\n\n#Create the corpus by finding the most common \ntokeniser.fit_on_texts(df[\"Tweet_Content_Split\"])\n\n##Train\n#Tokenise our column of edited Tweet content\ntweet_tokens = tokeniser.texts_to_matrix(list(df[\"Tweet_Content_Split\"]))\n\n##Test\n#Tokenise our column of edited Tweet content\ntweet_tokens_test = tokeniser.texts_to_matrix(list(test_df[\"Tweet_Content_Split\"]))","076fe393":"#Combining the dataframe with the tokens using pd.concat\n\n#Reset axes to avoid overlapping\ndf.reset_index(drop=True, inplace=True)\ntest_df.reset_index(drop=True, inplace=True)\n\n##Train\nfull_df = pd.concat([df, pd.DataFrame(tweet_tokens)], sort=False, axis=1)\n\n##Test\nfull_test_df = pd.concat([test_df, pd.DataFrame(tweet_tokens_test)], sort=False, axis=1)","d3f93121":"#Final prep\n\n##Train\n#Drop all non-useful columns\nfull_df = full_df.drop([\"Sentiment\", \"Tweet_ID\", \"Tweet_Content\", \"Tweet_Content_Split\", \"Entity\"], axis=1)\n\n\n##Test\nfull_test_df = full_test_df.drop([\"Sentiment\", \"Tweet_ID\", \"Tweet_Content\", \"Tweet_Content_Split\", \"Entity\"], axis=1)","38e2f029":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(12, input_dim=1034, activation='relu'),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(50, activation='relu'),\n    tf.keras.layers.Dropout(0.1),\n    tf.keras.layers.Dense(12, activation='relu'),\n    tf.keras.layers.Dense(50, activation='relu'),\n    tf.keras.layers.Dense(4, activation='sigmoid')\n])\nmodel.compile(\n     loss='sparse_categorical_crossentropy',\n     optimizer='adam',\n     metrics=['accuracy']\n)","4ac7367e":"h = model.fit(\n     full_df, y,\n     epochs=30,\n     callbacks=[tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=5)]\n)","2d68c391":"#Generate predictions\ny_pred = np.argmax(model.predict(full_test_df), axis=1)\n\n#Assign labels to predictions and test data\ny_pred_labels = ids_to_names(y_pred)\ny_test_labels = ids_to_names(y_test)","b5725d6e":"y_unique = list(set(y_test_labels))\ncm = confusion_matrix(y_test_labels, y_pred_labels, labels = y_unique, normalize='true')\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=y_unique)\ndisp.plot()","3f8e78c4":"#To see the final accuracy\naccuracy_score(y_test, y_pred)","3fbed512":"np.savetxt(\"prediction.csv\", y_pred, delimiter=\",\")","4ceaea5b":"## Model Evaluation\n\nNow that we've trained the model, we can view it's accuracy with a confusion matrix. This allows us to see the predictions for Tweets with various true values. From this, we might see that we are better at predicting certain classes than others, such as in this model, where we can predict Negative and Positive sentiment significantly better than Irrelevant or Neutral.","a9dd5579":"### Importing Packages","309e4b10":"### Checking Balance of the Data in Output Categories\n\nWe want to check the balance of the output column (Sentiment), such that we don't train a model that always predicts one output. This model might have a high accuracy, but we wouldn't have learned anything about trends in the data, other than the count in the most common sentiment. It might be tempting to think about balancing the test data too, but remember that data in the real world will be unlikely to come nicely balanced, and test data is analagous to real world data\n\n\nThe proportion of sentiments ranges from about 0.15 to 0.3, which is generally good balance, such that we are unlikely to see a scenario in which only one class is predicted. We will however be looking out for if our training accuracy forms a plateau at about 0.3, which could be indicative of this problem.","8e904d97":"### Labels to Indexes (and Back Again)\n\nHere, as discussed above, we create a dictionary in order to change the text in the \"Sentiment\" column into an index representing the predicted sentiment.\n\nWe then convert the \"Sentiment\" column in the training data to the labels, which is what we will learn to predict","8b6e2344":"### One-Hot Encoding\n\nHere, we create a Boolean column for each possible entity, as there are only 32 of these. 32 columns are added, each signifying if the Tweet was related to the given entity. Each Tweet will only be related to one entity in total.","c5fddbdc":"## NLP Data Enrichment\n\nIn this section, we work with the text in the \"Tweet_Content\" column, extracting all the insight from this that we can, and converting it into a useable format for the neural network that we will train later. This involves removing words that have little meaning (stop word removal), and grouping words with the same meaning regardless of details such as tense (lemmatisation). Then, we use tokenisation in order to codify the presence of words into a matrix, similar in fashion to one-hot encoding. This is known as a \"Bag of Words\" method.\n\nSections under this header include:\n\n- Stop Word Removal and Lemmatisation with NLTK\n- Tokenisation\n- Adding the Tokenised Strings to the DataFrame","8d93ccda":"### Training\n\nNext, we fit this model with our data, using backpropagation, for 30 epochs. We can view the increase in accuracy of the model through the different epochs, on both the training and test dataset.","443dd416":"## Final Model Evaluation","86607c7f":"### NLP Data Enrichment","fc8c5e4c":"### Dropping Unused Data\n\nWe drop non-useful columns from the DataFrame here. These either have no use (Tweet ID), or have already had the useful information extracted (Tweet Content). We also remove the \"y\" or dependent variable here, so we don't accidentally train on it.","13096197":"### Basic Visualisation\n\nWe can display basic statistics about the data using pandas, and also view a few entries of the dataset, to see example points with which we'll work.","4c3ecf48":"### Model Construction\n\nHere, we define the neural network that we will train to predict the output. This model is constructed with the following layers:\n1. Dense\n2. Dropout\n\nThe Dense layers are fully-connected layers. This means that inbetween each layer, we can transfer data from any neuron to any one in the next layer (or indeed all others), scaled by the weight associated with that transfer. These weights are trained.\n\nThe Dropout layers prevent our overall weights from getting too large, as can happen with larger neural networks. This helps to stop certain areas of the network from overloading the network as a whole.\n","4c1ec000":"## Basic Data Enrichment\n\nHere, we consider basic features that can enhance the dataset. This will include one-hot encoding of the categorical \"Entity\" variable. We can also use pre-trained NLP systems here to extract features from the text, such as the one from TextBlob, giving us a \"polarity\" and \"subjectivity\" value from any text that we give it. These extra features are added to the dataframe.\n\nWe can also create an indexer to convert sentiments from labels to indexes, and back again. This is useful in understanding our predictions later on.\n\nSections under this header include:\n\n- One-Hot Encoding\n- Enrichment with Pre-Trained NLP Models (TextBlob)\n- Labels to Indexes (and Back Again)","437d60a2":"### Subsetting Data\n\nAs this dataset is quite large, during the exploration process we begin by subsetting the data during the training process, to speed up any testing steps. We also reset the index of the dataframe, to make adding columns easier later on in the process.","49c4cd26":"### Enrichment with Pre-Trained Models (TextBlob)\n\nHere, we use the built-in functionality of TextBlob to add dimensionality to the data, by using it to analyse the text of the \"Tweet_Content\" column, and storing the outputs in a new column. This pre-trained model allows us to easily analyse strings of text, without any of the more involved NLP methods. Though we also plan to use more methods for NLP, this step can be a good to see if this model picks up on areas that our created one does not.","c9f19745":"### Importing Data","95cec68f":"## Preparation\n\nThis section is where we prepare for the project, through a variety of initial steps. The steps in this section are as follows:\n\n- Importing Packages\n- Importing Data\n- Dropping NA Values\n- Subsetting Data","eb74dc64":"# Foreword\n\nThe difference between this notebook and the code submission one is the format of the output. This notebook is intended for the task at https:\/\/www.kaggle.com\/jp797498e\/twitter-entity-sentiment-analysis\/tasks?taskId=5629.\n\nTo achieve this, we differently map the output, as Irrelevant and Neutral sentiment are both mapped to a single output.","63dd726f":"### Adding the Tokenised Strings to the DataFrame\n\nCurrently, the tokens are contained in a matrix titled \"tweet_tokens\". We then want to combine these back into the dataframe containing all of the current data. This is completed below, and then we test to make sure that this has occurred correctly by looking at the number of columns compared to that of the original matrices.","1008cbd0":"### Model Definition and Training\n\nThis time, we train with all of the available training data","6e59fb4c":"### Test-Train Split\n\nHere, we use SciKit-Learn's inbuilt function to split our data into a test set and a train set, with the appropriate labels. We use a constant random state to make this replicable.","b64bf96e":"## Data Exploration\n\nHere, we explore the data, testing if it is balanced, and checking for patterns in missing rows. This can generally be done in an automated fashion with pandas-profiling. The sections under this header include:\n\n- Basic visualisation\n- Automated Data Exploration with pandas-profiling\n- Checking for balance in output categories","f22aec57":"## Final Kaggle Submission\n\nTo submit, we need to use the format given:\n\n\"label_mapping = {\"Neutral\":0, \"Irrelevant\":0, \"Negative\":1, \"Positive\": 2}\"\n\nWe can therefore change our outputs to be in this format, ready for submission","e6ad5f2c":"## Model Construction and Training\n\nFinally, it is time to construct our model. In this case, we use a neural network constructed with Keras. We then train it with our data in the training dataset, and validate using the test datasets.\n\nSections under this header include:\n- Model Construction\n- Training","4c8fb2af":"### Dropping NA Values\n\nHere, we drop any rows with null values, as these miss out on key information.","c0e163c4":"### Stop Word Removal and Lemmatisation with NLTK\n\nHere, we first split each string into its individual words, before checking if these:\n1. Contain text\n2. Are in the list of stopwords\n\nIf there is no text in the word, meaning there are only numbers or punctuation (or other characters), or the word is a stop word (words such as \"with\", \"a\", \"the\"), then the word is removed from the string.\n\nWe also lemmatise in this step, in which we convert words into their root form, such that tense and other details can be ignored in our final model (a negative statement in the past tense is still negative).","639ed154":"### Basic Data Enrichment","13032b49":"### Automated Data Exploration with Pandas-Profiling\n\nPandas-profiling is a library used to automatically explore data. This gives us a good overview of the dataset, which we can use to inform our later work.","39dc14df":"### Tokenisation\n\nWe create tokens for the most common words in the dataset, so we can represent the presence of words in our created corpus (the n most common words) with a list of integers. ","dbc51e46":"## Training with Full Dataset\n\nNow that we are happy with our model, we can train using the full dataset, and predict the held-out test data. This involves performing all of our transformation steps on both this training dataset and the held-out test data. Luckily, we can reuse the code from above to achieve this, so little further explanation is required.","e360abbc":"## Final Data Preparation\n\nThe data is now almost ready for a model to be trained on it, but a few final preparations will need to occur. For example, we need to drop the columns that we don't plan to use, such as the \"Tweet_Content\" column, which has had its useful information extracted already.\n\nWe also split the data into a training and test set, such that we can evaluate our model's performance without touching the held-out data. We do this because if we continually test against this held-out data, it loses its usefulness as unseen \"real-world\" data.\n\nSections under this header include:\n- Dropping Unused Data\n- Test-Train Split"}}