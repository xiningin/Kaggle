{"cell_type":{"0ede9dbd":"code","d08449f2":"code","f9f7b8c0":"code","71ec0d27":"code","4b787681":"code","e182b071":"code","8483bdef":"code","521b4455":"code","160840eb":"code","78e54743":"markdown","bde12db6":"markdown","451c68e9":"markdown","e1f09885":"markdown","5932d490":"markdown","f3424f68":"markdown"},"source":{"0ede9dbd":"import cudf\nimport pandas as pd\nimport xgboost as xgb\nfrom cuml import train_test_split","d08449f2":"!tree ..\/input","f9f7b8c0":"%%timeit\n#timing the read block of train, test and sample submission with CUDF\ntrain = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsubmission = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","71ec0d27":"%%timeit\n#timing the read block of train, test and sample submission with Pandas\ntrain_pd = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest_pd = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsubmission_pd = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","4b787681":"y = train['target']\nX = train.drop(['target'], axis=1)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)","e182b071":"xgb_params = {'n_estimators': 10000,\n               'learning_rate': 0.03689407512484644,\n               'max_depth': 8,\n               'colsample_bytree': 0.3723914688159835,\n               'subsample': 0.780714581166012,\n               'eval_metric': 'auc',\n               'use_label_encoder': False,\n               'gamma': 0,\n               'reg_lambda': 50.0,\n               'tree_method': 'gpu_hist',\n               'gpu_id': 0,\n               'predictor': 'gpu_predictor',\n               'random_state': 42}","8483bdef":"xgb_classifier = xgb.XGBClassifier(**xgb_params)\nxgb_classifier.fit(X_train, y_train, eval_set=[(X_valid, y_valid)], early_stopping_rounds=10, verbose=True)","521b4455":"sub = cudf.DataFrame()\nsub['id'] = submission['id']\nsub['target'] = xgb_classifier.predict_proba(test)[:,-1]\nsub = sub.set_index('id')","160840eb":"sub.to_csv('submission.csv')","78e54743":"The RAPIDS suite of software libraries are built on CUDA. This means they leverage the GPU for data loading & preparition and to build classic ML model. \n\nHere, I have leveraged the **CUDF** and **CUML** part of the Nvidia Rapids, which allows me to use GPU to load and manipulate data, thereby reducing my wait time significantly\n\nThis is crucial in this month's TPS, as the data has approx 10 lakh rows and 250+ columns. Effective data loaing and processing can be key to achieving a good score in this competition\n\nBoth CUDF and CUML follows the familiar syntax of pandas and scikit respectively, thereby integrating well with your existing code and aiding understanding of the framework","bde12db6":"XGBoost Parameters from : https:\/\/www.kaggle.com\/rahulchauhan3j\/tps-oct-2021-xgboost-pipeline-with-optuna#Model-Fit-and-Submission","451c68e9":"# Kindly upvote \ud83d\udc4d\ud83c\udffb if you found this kernel helpful\n\n**Also, kindly upvote if you are forking the kernel** \ud83d\ude0a","e1f09885":"CUDF takes 3 seconds approx per loop to process the data, while Pandas takes 1 minute approx per loop to process the data. This is a huge leap in performance \u26a1\ufe0f","5932d490":"![Nvidia Rapids](https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/rapids\/rapids-logo.png)","f3424f68":"Instead of using Scikit's train_test_split(), I have used CUML's train_test_split() to split the training and validation sets \n\n(I have not the done the time comparison as above, as the gains from using RAPIDS is clear from the above example)"}}