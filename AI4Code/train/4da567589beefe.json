{"cell_type":{"201d3b61":"code","8b653e41":"code","963baccb":"code","d88c8f1a":"code","23b2a782":"code","4e229ed3":"code","a03c1d4a":"code","aa1ec0e2":"code","430a3085":"code","40c0fd7a":"code","5d5f9d73":"code","fede96d2":"code","33587f4a":"code","c010dd87":"code","4a434b41":"code","23097b38":"code","40f299db":"code","a49b4f16":"code","88e849b5":"code","0f1f7611":"code","e1e752bb":"code","ff3078f3":"code","b30f9f98":"code","ae15ff17":"code","984c0ae8":"code","e836b02c":"code","3a190352":"code","8d0e69a7":"code","d87efaee":"code","d88c5aa7":"code","2f5d9d6e":"code","dd24a847":"code","72dc1e9f":"code","914b7c8f":"code","6db41c95":"code","99565e6d":"code","2898e6a6":"code","ac17baf2":"code","b7b4edea":"code","ca66d461":"code","bab2accc":"code","5dcd3645":"code","4841ff2d":"code","e6376360":"code","b7022f01":"code","f8196ad8":"code","df294d87":"code","074b247a":"code","59f706b8":"code","7766dce9":"code","42099bf1":"code","01318824":"code","3ba68fc1":"code","cb43aff9":"code","3c663c2f":"code","3bd39c90":"code","9175ce93":"code","4c5cf77b":"code","61af0f07":"code","3b620834":"code","7b33ee0b":"code","d2f46bb7":"code","8da9cd01":"markdown","c4326ce1":"markdown","340740b5":"markdown","df18662d":"markdown","ba91d310":"markdown","0ded185b":"markdown","db8440da":"markdown","4d06d35d":"markdown","489ca001":"markdown","3f952b6b":"markdown","ee95e7c0":"markdown","599017d1":"markdown","af70214f":"markdown","7f016069":"markdown","3bb56fd1":"markdown","0e37e5e0":"markdown","103e59c1":"markdown","68ad00ae":"markdown","e3b18b69":"markdown","af9802f2":"markdown","8130ad15":"markdown","ab6f39dd":"markdown","30f873ee":"markdown","1bd5d974":"markdown","9b8d34a0":"markdown","60632d9c":"markdown","4b76e061":"markdown","ba273031":"markdown","fd753bc9":"markdown","3f1b0fe8":"markdown","92312d9a":"markdown"},"source":{"201d3b61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"fivethirtyeight\")\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b653e41":"data = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","963baccb":"data.head()","d88c8f1a":"data.shape","23b2a782":"data.info()","4e229ed3":"data.describe().T","a03c1d4a":"data.dropna(subset = [\"RainTomorrow\"], inplace = True)","aa1ec0e2":"data[\"RainTomorrow\"].replace({'No': 0, 'Yes': 1},inplace = True)","430a3085":"data[\"RainTomorrow\"] = data.RainTomorrow.astype(\"int64\")","40c0fd7a":"def categorical(columns):\n    plt.figure(figsize = (20,7))\n    plt.subplot(1, 2, 1)\n    plt.pie(x = data[columns].value_counts(), labels = data[columns].value_counts().index, autopct=\"%.1f%%\", pctdistance =0.7)\n    plt.subplot(1, 2, 2)\n    sns.countplot(x = columns, data = data, hue = \"RainTomorrow\")","5d5f9d73":"categorical(\"WindGustDir\")","fede96d2":"categorical(\"WindDir9am\")","33587f4a":"categorical(\"WindDir3pm\")","c010dd87":"categorical(\"RainToday\")","4a434b41":"corr_matrix = data.corr()\nsns.clustermap(corr_matrix, annot = True, fmt = \".2f\")\nplt.title(\"Correlation between Features\")\nplt.show()","23097b38":"def numeric(columns, discrete = False):\n    if discrete : \n        plt.figure(figsize = (15,7))\n        sns.countplot(x = columns, data = data, hue = \"RainTomorrow\")\n        plt.show()\n    else :\n        plt.figure(figsize = (15,7))\n        sns.jointplot(x = columns, y = \"RainTomorrow\", data = data, kind = \"reg\")","40f299db":"numeric(\"Cloud3pm\", True)","a49b4f16":"numeric(\"Cloud9am\", True)","88e849b5":"numeric(\"Humidity3pm\")","0f1f7611":"numeric(\"Sunshine\")","e1e752bb":"numeric(\"WindGustSpeed\")","ff3078f3":"numeric(\"Humidity9am\")","b30f9f98":"numeric(\"Pressure9am\")","ae15ff17":"numeric(\"Pressure3pm\")","984c0ae8":"numeric(\"Rainfall\")","e836b02c":"data.isnull().sum().sort_values()","3a190352":"maxtemp = list(data[data[\"MaxTemp\"].isnull()].index)","8d0e69a7":"data[\"Date\"] = data.Date.astype('datetime64[ns]')\ndata['month'] = pd.DatetimeIndex(data['Date']).month\ndata.groupby([\"month\"])[\"MaxTemp\"].mean()","d87efaee":"for i in maxtemp:\n    if data[\"month\"][i] == 1:\n        data[\"MaxTemp\"][i] = 30\n    elif data[\"month\"][i] == 2:\n        data[\"MaxTemp\"][i] = 29\n    elif data[\"month\"][i] == 3:\n        data[\"MaxTemp\"][i] = 27\n    elif data[\"month\"][i] == 4:\n        data[\"MaxTemp\"][i] = 24\n    elif data[\"month\"][i] == 5:\n        data[\"MaxTemp\"][i] = 20\n    elif data[\"month\"][i] == 6:\n        data[\"MaxTemp\"][i] = 17\n    elif data[\"month\"][i] == 7:\n        data[\"MaxTemp\"][i] = 17\n    elif data[\"month\"][i] == 8:\n        data[\"MaxTemp\"][i] = 18\n    elif data[\"month\"][i] == 9:\n        data[\"MaxTemp\"][i] = 21\n    elif data[\"month\"][i] == 10:\n        data[\"MaxTemp\"][i] = 24\n    elif data[\"month\"][i] == 11:\n        data[\"MaxTemp\"][i] = 26\n    else:\n        data[\"MaxTemp\"][i] = 28","d88c5aa7":"mintemp = list(data[data[\"MinTemp\"].isnull()].index)","2f5d9d6e":"data.groupby([\"month\"])[\"MinTemp\"].mean()","dd24a847":"for i in mintemp:\n    if data[\"month\"][i] == 1:\n        data[\"MinTemp\"][i] = 18\n    elif data[\"month\"][i] == 2:\n        data[\"MinTemp\"][i] = 18\n    elif data[\"month\"][i] == 3:\n        data[\"MinTemp\"][i] = 16\n    elif data[\"month\"][i] == 4:\n        data[\"MinTemp\"][i] = 13\n    elif data[\"month\"][i] == 5:\n        data[\"MinTemp\"][i] = 10\n    elif data[\"month\"][i] == 6:\n        data[\"MinTemp\"][i] = 8\n    elif data[\"month\"][i] == 7:\n        data[\"MinTemp\"][i] = 7\n    elif data[\"month\"][i] == 8:\n        data[\"MinTemp\"][i] = 7\n    elif data[\"month\"][i] == 9:\n        data[\"MinTemp\"][i] = 9\n    elif data[\"month\"][i] == 10:\n        data[\"MinTemp\"][i] = 12\n    elif data[\"month\"][i] == 11:\n        data[\"MinTemp\"][i] = 14\n    else:\n        data[\"MinTemp\"][i] = 16","72dc1e9f":"list_ = [\"WindGustDir\", \"RainToday\", \"WindDir3pm\", \"WindDir9am\", \"Cloud9am\", \"Cloud3pm\"]","914b7c8f":"for i in list_:\n    data[i].fillna(data[i].mode()[0], inplace = True)","6db41c95":"numeric_variable = data.select_dtypes([\"int64\", \"float64\"])\n\nfor i in numeric_variable.columns:\n    data[i].fillna(data[i].mean(), inplace = True)","99565e6d":"data.isnull().sum()","2898e6a6":"from collections import Counter\ndef outliers(data,columns):\n    aykiri_indexler=[]\n    for i in columns:\n        Q1 = data[i].quantile(0.25)\n        Q3 = data[i].quantile(0.75)\n        IQR = Q3 -Q1\n        alt_sinir = Q1 - 1.5*IQR\n        ust_sinir = Q3 + 1.5*IQR\n        filtre = ((data[i] < alt_sinir) | (data[i] > ust_sinir))\n        aykiri_gozlemler = data[i][filtre]\n        aykiri_index = aykiri_gozlemler.index\n        aykiri_indexler.extend(aykiri_index)\n        \n    aykiri_indexler = Counter(aykiri_indexler)\n    ortak_indexler = [i for i,v in aykiri_indexler.items() if v>2]\n    return ortak_indexler","ac17baf2":"data.shape","b7b4edea":"x = data.select_dtypes([\"float64\", \"int64\"])\ndelete_index = outliers(data,x.columns)\ndata = data.drop(delete_index,axis=0).reset_index(drop=True)","ca66d461":"data.shape","bab2accc":"data.drop([\"Date\", \"month\", \"Location\"], axis = 1, inplace = True)","5dcd3645":"list_ = [\"Cloud9am\", \"Cloud3pm\"]\n\nfor i in list_:\n    data[i] = data[i].astype(str)","4841ff2d":"data = pd.get_dummies(data)","e6376360":"data.drop([\"RainToday_No\"], axis = 1, inplace = True)","b7022f01":"data.columns","f8196ad8":"df = data.copy()","df294d87":"from sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\nscaler.fit(df)\ndf = pd.DataFrame(scaler.transform(df), index = df.index, columns = df.columns)\ndf","074b247a":"from sklearn.feature_selection import SelectKBest, chi2\nx = df.drop([\"RainTomorrow\"], axis = 1)\ny = df[['RainTomorrow']]\nselector = SelectKBest(chi2, k=20)\nselector.fit(x, y)\nx_new = selector.transform(x)\nprint(x.columns[selector.get_support(indices=True)])","59f706b8":"columns = x.columns[selector.get_support(indices=True)]","7766dce9":"data_new = data[columns]\ndata_new","42099bf1":"from imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report","01318824":"x = data_new.values\ny = data.RainTomorrow.values.reshape(-1,1)","3ba68fc1":"#Let's see weather our dataset is balanced or imbalanced\nsns.countplot(data.RainTomorrow)\nplt.show()","cb43aff9":"smote = SMOTE(random_state = 42)\nx_smote, y_smote = smote.fit_resample(x,y)","3c663c2f":"sns.countplot(y_smote)","3bd39c90":"x_train, x_test, y_train, y_test = train_test_split(x_smote, y_smote, test_size = 0.2 ,random_state = 42)","9175ce93":"sc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","4c5cf77b":"import lightgbm as lgb\nlgbc = lgb.LGBMClassifier(random_state = 42)\nmodel = lgbc.fit(x_train, y_train)","61af0f07":"model.score(x_train, y_train)","3b620834":"y_head = model.predict(x_test)","7b33ee0b":"print(\"Test accuracy :\", accuracy_score(y_test, y_head))","d2f46bb7":"print(classification_report(y_test, y_head))","8da9cd01":"### Humidity3pm","c4326ce1":"<a id=\"4\"><\/a>\n# Variable Analysis","340740b5":"<a id=\"3\"><\/a>\n# Exploratory Data Analysis","df18662d":"<a id=\"5\"><\/a>\n## Categorical Variable","ba91d310":"### MinTemp","0ded185b":"<a id=\"11\"><\/a>\n# Machine Learning Model","db8440da":"<a id=\"7\"><\/a>\n# Missing Value","4d06d35d":"### WindGustDir","489ca001":"We can see that our dataset is imbalanced dataset.We are going to use smote technique to deal with our imablanced dataset","3f952b6b":"<a id=\"6\"><\/a>\n## Numeric Variable","ee95e7c0":"### Cloud9am","599017d1":"<a id=\"10\"><\/a>\n# Feature Selection","af70214f":"<a id=\"1\"><\/a>\n# Import Libraries","7f016069":"### Light GBM Classification","3bb56fd1":"### Rainfall","0e37e5e0":"### Sunshine","103e59c1":"<a id=\"8\"><\/a>\n# Outlier Detection","68ad00ae":"### The other numeric variables","e3b18b69":"### WindDir3pm","af9802f2":"### Cloud3pm","8130ad15":"<a id=\"9\"><\/a>\n# Feature Engineering","ab6f39dd":"### Pressure3pm","30f873ee":"### The other categorical variables","1bd5d974":"### Humidity9am","9b8d34a0":"### WindDir9am","60632d9c":"### WindGustSpeed","4b76e061":"### MaxTemp","ba273031":"### RainToday","fd753bc9":"# Introduction\n* This dataset contains about 10 years of daily weather observations from many locations across Australia.\n* RainTomorrow is the target variable to predict. It means -- did it rain the next day, Yes or No? This column is Yes if the rain for that day was 1mm or more.\n\n<font color='blue'>\nContent:\n\n1. [Import Libraries](#1)  \n2. [Import Dataset](#2)\n3. [Exploratory data analysis](#3)\n4. [Variable Analysis](#4)\n    * [Categorical Variable](#5)\n    * [Numeric Variable](#6)\n5. [Missing Value](#7)\n6. [Outlier Detection](#8)\n7. [Feature Engineering](#9)\n8. [Feature Selection](#10)\n9. [ML Model](#11)","3f1b0fe8":"### Pressure9am","92312d9a":"<a id=\"2\"><\/a>\n# Import Dataset"}}