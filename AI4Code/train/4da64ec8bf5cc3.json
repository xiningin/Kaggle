{"cell_type":{"ff710c06":"code","19a910c1":"code","fec08ecc":"code","4f87a2f8":"code","d38aa98d":"code","a9e7c054":"code","52152ae3":"code","b2be2b26":"code","1a05ea24":"markdown","cb1633de":"markdown","a980f2cd":"markdown"},"source":{"ff710c06":"def PrepareTrainData(df,degree):\n    X = []\n    y= []\n    N_train = df.shape[0]\n    for k in range(N_train-1):\n        sample = []\n        for d in range(degree+1):\n            sample.append(k**d)\n        X.append(sample)\n        y.append(np.log(df.total.iloc[k]).tolist())\n    X = np.array(X)\n    y = np.array(y).T\n    return X, y","19a910c1":"def PrepareTestData(size,degree):\n    Xtst = []\n    N_test = size\n    for k in range(N_test):\n        sample = []\n        for d in range(degree+1):\n            sample.append(k**d)\n        Xtst.append(sample)\n    Xtst = np.array(Xtst)\n    return Xtst","fec08ecc":"from sklearn.preprocessing import MinMaxScaler\ndef Normalize(X,Xtst,y):\n    minmaxx = MinMaxScaler(feature_range=(-1,1))\n    minmaxx.fit(X)\n    X_norm    = minmaxx.transform(X)\n    Xtst_norm = minmaxx.transform(Xtst)\n    minmaxy = MinMaxScaler(feature_range=(-1,1))\n    minmaxy.fit(y[:,None])\n    y_norm = minmaxy.transform(y[:,None]).ravel()\n    return X_norm ,Xtst_norm, y_norm, minmaxy","4f87a2f8":"from sklearn import linear_model\ndef TrainTestModelRidge(X_norm,y_norm,Xtst_norm,alpha):\n    ytst_norm = []\n    clf = linear_model.Ridge(alpha = alpha)\n    clf.fit(X_norm,y_norm)\n    ytst_norm = clf.predict(Xtst_norm)\n    return ytst_norm","d38aa98d":"from sklearn import svm\ndef TrainTestModelSVM(X_norm,y_norm,Xtst_norm,ker,deg,c_value,ep):\n    ytst_norm = []\n    clf = svm.SVR(kernel = ker,degree = deg,C = c_value, epsilon=ep)\n    clf.fit(X_norm,y_norm)\n    ytst_norm = clf.predict(Xtst_norm)\n    return ytst_norm","a9e7c054":"def Regression(df,modelType='Ridge',deg=3,alpha= 0.01,ker='rbf',c_value = 1,ep=0.1):\n    train_size = df.shape[0]\n    test_size = train_size *2\n    \n    #Create new lines\n    X ,y = PrepareTrainData(df,deg)\n    Xtst = PrepareTestData(test_size,deg)\n    X_norm , Xtst_norm, y_norm, Scaler = Normalize(X, Xtst, y)\n    if modelType == 'Ridge':\n        ytst_norm = TrainTestModelRidge(X_norm,y_norm,Xtst_norm,alpha)\n    elif modelType == 'SVR':\n        ytst_norm = TrainTestModelSVM(X_norm,y_norm,Xtst_norm,ker,deg,c_value,ep)\n    \n    return y_norm, ytst_norm, Scaler","52152ae3":"import bokeh.plotting.figure as bk_figure\nfrom bokeh.io import curdoc, show\nfrom bokeh.layouts import column,row\nfrom bokeh.models import ColumnDataSource, Span, Label, Select, DataTable, TableColumn, DateFormatter\nfrom bokeh.models.widgets import Slider, TextInput\nfrom bokeh.io import output_notebook # enables plot interface in J notebook\nimport numpy as np\nimport pandas as pd\n# init bokeh\nfrom bokeh.application import Application\nfrom bokeh.application.handlers import FunctionHandler\n\noutput_notebook()\ninfected = pd.read_csv('https:\/\/raw.githubusercontent.com\/datadista\/datasets\/master\/COVID%2019\/ccaa_covid19_casos_long.csv')\naltas = pd.read_csv('https:\/\/raw.githubusercontent.com\/datadista\/datasets\/master\/COVID%2019\/ccaa_covid19_altas_long.csv')\ndeath = pd.read_csv('https:\/\/raw.githubusercontent.com\/datadista\/datasets\/master\/COVID%2019\/ccaa_covid19_fallecidos_long.csv')\nhosp = pd.read_csv('https:\/\/raw.githubusercontent.com\/datadista\/datasets\/master\/COVID%2019\/ccaa_covid19_hospitalizados_long.csv')\n","b2be2b26":"date_label_offset = 30\nlabel_text_size = '8pt'\n#Start at first infected\ntemp = infected[infected['CCAA']=='Total']\ntemp = temp[temp['total'] != 0]\nfirst_date = temp.fecha.iloc[0]\n\n\ntrain_size = temp.shape[0]\ntest_size = train_size *2\ny_norm, ytst_norm, Scaler = Regression(temp[temp['CCAA']=='Total'],'Ridge',2,0.01,'rbf',1.0,0.1)\n\n                                    # DATA FOR LOG PLOT\nt1 = pd.date_range(start=first_date,periods= train_size)\ny1 = Scaler.inverse_transform(y_norm[:,None])\nt2 = pd.date_range(start=first_date,periods= test_size)\ny2 = Scaler.inverse_transform(ytst_norm[:,None])\nsource11 = ColumnDataSource(data=dict(x=t1, y=y1))\nsource12 = ColumnDataSource(data=dict(x=t2, y=y2))\n\n\n                                        # LOG PLOT\nlog_plot = bk_figure(plot_height=200, plot_width=800, title=\"COVID-19 Analysis (Log Scale)\",\n              tools=\"crosshair,pan,reset,save,wheel_zoom\",x_axis_type = 'datetime')\nlog_plot.line('x', 'y', source=source12, line_width=3, line_alpha=0.6, legend_label= 'Predicted Infected')\nlog_plot.circle('x','y',source = source11, size = 2,color = 'red',legend_label='Real Infected')\nlog_plot.legend.click_policy=\"hide\"\n                                        #DATA FOR LINEAR PLOT\ny11 = np.exp(y1)\ny22 = np.exp(y2)\nsource21 = ColumnDataSource(data=dict(x=t1, y=y11))\nsource22 = ColumnDataSource(data=dict(x=t2, y=y22))\n\n                                        #LINEAR PLOT\nlinear_plot = bk_figure(plot_height=200, plot_width=800, title=\"COVID-19 Analysis (Linear Scale)\",\n              tools=\"crosshair,pan,reset,save,wheel_zoom\",x_axis_type = 'datetime')\n\nlinear_plot.line('x', 'y', source=source22, line_width=3, line_alpha=0.6,legend_label='Predicted Infected')\nlinear_plot.circle('x','y',source = source21, size = 2,color = 'red',legend_label='Real Infected')\n\n\nposition_of_max = np.argmax(source22.data['y'],axis = 0)\nvline = Span(location = source22.data['x'][position_of_max][0],dimension = 'height', line_color = 'black', line_width = 2)\nlabel_text =  'Predicted max: {} Fecha: {}'.format(int(np.max(source22.data['y'])),t2[position_of_max].strftime(\"%d-%m-%Y\").values)\ntext = Label(x = t2[position_of_max-date_label_offset][0], y= source22.data['y'][position_of_max-5][0][0],text = label_text,text_font_size= label_text_size)\nlinear_plot.add_layout(vline)\nlinear_plot.add_layout(text)\nlinear_plot.legend.click_policy=\"hide\"\n\n\n\n# Set up widgets\nccaa = Select(title=\"CCAA:\", value=\"Total\", options=list(infected['CCAA'].unique()))\nmodel = Select(title=\"Model:\", value=\"Ridge\", options=['Ridge','SVR'])\ndegree = Slider(title=\"degree\", value=2, start=1, end=10, step=1)\nalph = Slider(title=\"alpha (only Ridge)\", value=.01, start=.000, end=1.000, step = .01)\nkernel = Select(title=\"kernel (only SVR)\", value=\"rbf\", options=['rbf','linear'])\nCvalue = Slider(title=\"C (only SVR)\", value=1, start=1, end=10, step = 1)\nEpsilon = Slider(title=\"Epsilon (only SVR)\", value=.1, start=0, end=1.000, step = .1)\n\nsource_table = ColumnDataSource(data =  dict(\n        dates=infected[infected['CCAA']=='Total'].fecha,\n        infected=infected[infected['CCAA']=='Total'].total,\n        hospitalized=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']=='Total'].shape[0]-hosp[hosp['CCAA']=='Total'].shape[0],dtype = int)),hosp[hosp['CCAA']=='Total'].total],ignore_index = True),\n        altas=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']=='Total'].shape[0]-altas[altas['CCAA']=='Total'].shape[0],dtype = int)),altas[altas['CCAA']=='Total'].total],ignore_index = True),\n        fallecidos=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']=='Total'].shape[0]-death[death['CCAA']=='Total'].shape[0],dtype = int)),death[death['CCAA']=='Total'].total],ignore_index = True),\n    ))\n\ncolumns = [\n        TableColumn(field=\"dates\", title=\"Date\"),\n        TableColumn(field=\"infected\", title=\"Infected\"),\n        TableColumn(field=\"hospitalized\", title=\"Hospitalized\"),\n        TableColumn(field=\"altas\", title=\"Recovered\"),\n        TableColumn(field=\"fallecidos\", title=\"Death\"),\n    ]\ndata_table = DataTable(source=source_table, columns=columns, width=600, height=380)\n\ndef update_data(attrname, old, new):\n    # Get the current slider values\n    deg = degree.value\n    ca = ccaa.value\n    a = alph.value\n    ker = kernel.value\n    c = Cvalue.value\n    ep = Epsilon.value\n    modelType = model.value\n    \n    temp = infected[infected['CCAA']==ca]\n    temp = temp[temp['total'] != 0]\n    \n    first_date = temp['fecha'].iloc[0]\n    train_size = temp.shape[0]\n    test_size = train_size *2\n    \n    #Create new lines\n    y_norm, ytst_norm, Scaler = Regression(temp[temp['CCAA']==ca],modelType,deg,a,ker,c,ep)\n    \n    #Update log plot\n    t1 = pd.date_range(start=first_date,periods= y_norm.shape[0])\n    y1 = Scaler.inverse_transform(y_norm[:,None])\n    t2 = pd.date_range(start=first_date,periods= ytst_norm.shape[0])\n    y2 = Scaler.inverse_transform(ytst_norm[:,None])\n    source11.data=dict(x=t1, y=y1)\n    source12.data=dict(x=t2, y=y2)\n    \n    #update linear plot\n    y11 = np.exp(y1)\n    y22 = np.exp(y2)\n    source21.data=dict(x=t1, y=y11)\n    source22.data=dict(x=t2, y=y22)\n    \n    #update vertical line\n    position_of_max = np.argmax(source22.data['y'],axis = 0)\n    vline.location = source22.data['x'][position_of_max][0]\n    \n    #update label\n    label_text =  '    Predicted max: {} Fecha: {}'.format(int(np.max(source22.data['y'])),t2[position_of_max].strftime(\"%d-%m-%Y\").values)\n    text.text = label_text\n    text.x = t2[position_of_max-date_label_offset][0]\n    text.y = source22.data['y'][position_of_max-5][0][0]\n\n\n    source_table.data = dict(\n        dates=infected[infected['CCAA']==ca].fecha,\n        infected=infected[infected['CCAA']==ca].total,\n        hospitalized=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']==ca].shape[0]-hosp[hosp['CCAA']==ca].shape[0],dtype = int)),hosp[hosp['CCAA']==ca].total],ignore_index = True),\n        altas=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']==ca].shape[0]-altas[altas['CCAA']==ca].shape[0],dtype = int)),altas[altas['CCAA']==ca].total],ignore_index = True),\n        fallecidos=pd.concat([pd.Series(np.zeros(infected[infected['CCAA']==ca].shape[0]-death[death['CCAA']==ca].shape[0],dtype = int)),death[death['CCAA']==ca].total],ignore_index = True),\n        )\n\nfor w in [ccaa, degree, alph,kernel,Cvalue,Epsilon,model]:\n    w.on_change('value', update_data)\n\n\n# Set up layouts and add to document\nplots = column(log_plot,linear_plot)\nplots_and_table = row(plots,data_table)\ncustomizable_parameters = column(degree, alph,kernel, Cvalue,Epsilon,sizing_mode= 'stretch_both')\nlayout = column(model,ccaa,plots_and_table,\n             customizable_parameters)\n\n\ndef modify_doc(doc):\n    doc.add_root(row(layout, width=800))\n    doc.title = \"COVID-19 ANalysis Spain\"\n\n\n# handler = FunctionHandler(modify_doc)\n# app = Application(handler)\n# show(app)\ncurdoc().add_root(row(layout, width=800))\ncurdoc().title = \"COVID19-Analysis\"\nshow(layout,notebook_handle = True)","1a05ea24":"# Interactive Tool for predicting COVID-19 Infections\n\nThis tool is designed to compare between different regression models and it can be tested for each CCAA.","cb1633de":"## Model assumptions\n\nTo model the COVID-19 curve we will assume it follows a Gaussean curve:\n\\begin{align}\nI & = Ke^{\\beta(T-T_0)^2} \\\\\n\\end{align} \n\nApplying to the previous expression we get:\n\\begin{align}\nlog(I) & = log(K) +\\beta(T-T_0)^2 \\\\\n\\end{align} \n\nSo in fact we get a second degree ecuation that relates time T and the logarithm of the total infected log(I):\n\\begin{align}\nlog(I) & = aT^2 + bT +c \\\\\n\\end{align} \n\nTo estimate the number of infections we will use *Ridge Regression* and *SVR*. We will obtain a model that relates T with log(I) from the databa available T_n and I_n. The following matrixed will be created in order to work with sklearn library:\n\n\\begin{equation*}\nX =  \\begin{matrix}\nT_1^2 &  T_1 & 1 \\\\\nT_2^2 &  T_2 & 1 \\\\\n. & . &. \\\\\n. & . &. \\\\\n. & . &. \\\\\nT_n^2 & T_n & 1\n\\end{matrix}\n\\end{equation*}\n\n---\n\\begin{equation*}\ny =  \\begin{matrix}\nlog(I_1) \\\\\nlog(I_2) \\\\\n. \\\\\n. \\\\\n. \\\\\nlog(I_n) \\\\\n\\end{matrix}\n\\end{equation*}\n","a980f2cd":"## Auxiliary functions"}}