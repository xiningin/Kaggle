{"cell_type":{"083ab622":"code","30c8aca0":"code","b03bcc6e":"code","5196260d":"code","e8e2b73a":"code","ce6363de":"code","b6447d64":"code","b072dccf":"code","bf9676fd":"code","c375ef61":"code","40f1ed0d":"code","898bc898":"code","0f366b35":"code","9aa59eaf":"code","3c7fdc41":"code","fa35332c":"code","b91c9ced":"code","139fd4cb":"code","9d9b5663":"code","1b972855":"code","ec5d9150":"code","d1d011a7":"code","0e9098d3":"code","ba472db4":"code","63432d1f":"code","56ea639c":"code","572a2fc3":"code","bfcfb491":"code","faeb4380":"code","6253814c":"code","4ac6aaaa":"markdown","22741218":"markdown","150a94a2":"markdown","33932f84":"markdown","384ec5e0":"markdown","47f56bc9":"markdown","4f29e13a":"markdown","1de4c50d":"markdown","1859fd06":"markdown","b34ff0d4":"markdown","e356a9e5":"markdown","66c9d223":"markdown","a347de2b":"markdown"},"source":{"083ab622":"import warnings \nwarnings.filterwarnings(\"ignore\")","30c8aca0":"import os\nimport pandas as pd \nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.express as px\nimport seaborn as sns\nimport math\nimport datetime as dt","b03bcc6e":"import statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","5196260d":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.neighbors import KNeighborsClassifier","e8e2b73a":"from scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree","ce6363de":"from sklearn.model_selection import cross_val_score","b6447d64":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nheart = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","b072dccf":"heart.info()","bf9676fd":"heart.head()","c375ef61":"X = heart.copy()\ny = X.pop(\"output\")\n\n# Scaling the dataset\nscaler = StandardScaler()\nX[list(X.columns)]= scaler.fit_transform(X[list(X.columns)])\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=47)","40f1ed0d":"lr = LogisticRegression().fit(X_train, y_train)\n\nlr.score(X_test, y_test)","898bc898":"from sklearn.svm import SVC\n\nsvm = SVC().fit(X_train, y_train)\n\nsvm.score(X_test, y_test)","0f366b35":"knn = KNeighborsClassifier(n_neighbors = 18).fit(X_train, y_train)\nknn.score(X_test, y_test)","9aa59eaf":"!pip install pydotplus","3c7fdc41":"from IPython.display import Image  \nfrom six import StringIO  \nfrom sklearn.tree import export_graphviz\nimport pydotplus, graphviz\nfrom sklearn.tree import DecisionTreeClassifier","fa35332c":"def get_dt_graph(dt_classifier):\n    dot_data = StringIO()\n    export_graphviz(dt_classifier, out_file=dot_data, filled=True,rounded=True,\n                    feature_names=X.columns, \n                    class_names=['Less chance', \"More chance\"])\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    return graph\n\ndef evaluate_model(dt_classifier):\n    print(\"Train Accuracy :\", accuracy_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train Confusion Matrix:\")\n    print(confusion_matrix(y_train, dt_classifier.predict(X_train)))\n    print(\"-\"*50)\n    print(\"Test Accuracy :\", accuracy_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Test Confusion Matrix:\")\n    print(confusion_matrix(y_test, dt_classifier.predict(X_test)))","b91c9ced":"dt = DecisionTreeClassifier(max_depth = 3).fit(X_train, y_train)\n\ngraph = get_dt_graph(dt)\nImage(graph.create_png())","139fd4cb":"evaluate_model(dt)","9d9b5663":"from sklearn.model_selection import GridSearchCV","1b972855":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [2, 3, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'criterion': [\"gini\", \"entropy\"]\n}","ec5d9150":"dt_grid = DecisionTreeClassifier()\n\ngrid_search = GridSearchCV(estimator=dt_grid, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","d1d011a7":"grid_search.fit(X_train, y_train)","0e9098d3":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","ba472db4":"dt_best = grid_search.best_estimator_\n\ndt_best","63432d1f":"evaluate_model(dt_best)","56ea639c":"from sklearn.ensemble import RandomForestClassifier","572a2fc3":"params = {\n    'max_depth': [1, 2, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'max_features': [2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","bfcfb491":"rf = RandomForestClassifier()\n\ngrid_search = GridSearchCV(estimator=rf, param_grid=params, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","faeb4380":"grid_search.fit(X,y)\n\n# best estimator\nrf_best = grid_search.best_estimator_\n\nrf_best","6253814c":"evaluate_model(rf_best)","4ac6aaaa":"# Heart Attack Analysis and Prediction \n","22741218":"## svm - rbf kernel","150a94a2":"## Random Forest - Grid Search","33932f84":"## Decision Tree - Grid Search","384ec5e0":"## Initial Data Examination ","47f56bc9":"## Decision Tree model","4f29e13a":"##  logistic regression model","1de4c50d":"Sklearn","1859fd06":"Clustering (Unsupervised Learning) - modules","b34ff0d4":"## KNN Classifier","e356a9e5":"Statistic functions and models","66c9d223":"## Initial library imports","a347de2b":"Cross Validation Score"}}