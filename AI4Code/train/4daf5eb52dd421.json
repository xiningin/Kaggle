{"cell_type":{"1a492af1":"code","fad7b620":"code","cbbaf012":"code","8875ef95":"code","99a04a3a":"code","f3b5d49a":"code","75fc7ea6":"code","5a8f0b1a":"code","546d5d9b":"code","3b4b3f3a":"code","1fc305ca":"code","f1ce342d":"code","60514067":"code","d97dad56":"code","1f627663":"markdown","f943506a":"markdown","71ddf8bb":"markdown","8309d825":"markdown","a2f4c742":"markdown","52eb69ef":"markdown","fef9c020":"markdown","95fd62f5":"markdown","1f73fa19":"markdown","d6881024":"markdown","8efd3255":"markdown","08936a85":"markdown","b15cafdd":"markdown","6857cfc3":"markdown"},"source":{"1a492af1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fad7b620":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n","cbbaf012":"covidIndiaDF=pd.read_csv(\"\/kaggle\/input\/covid19-in-india\/covid_19_india.csv\")\ncovidIndiaDF","8875ef95":"covidIndiaDF[\"Date\"]=pd.to_datetime(covidIndiaDF[\"Date\"],format=\"%d\/%m\/%y\")\ncovidIndiaDF=covidIndiaDF.groupby([\"Date\",\"State\/UnionTerritory\"]).agg({\n    \"Cured\" : \"max\",\n    \"Deaths\" : \"max\",\n    \"Confirmed\" : \"max\"\n}).reset_index()\n\ncovidIndiaDF[covidIndiaDF[\"State\/UnionTerritory\"]==\"West Bengal\"].sort_values(\"Date\", ascending=False)\ncovidIndiaDF[\"Death_Ratio\"]=covidIndiaDF[\"Deaths\"]\/covidIndiaDF[\"Confirmed\"]*100\ncovidIndiaDF[\"Treated\"]=covidIndiaDF[\"Confirmed\"]-covidIndiaDF[\"Deaths\"]-covidIndiaDF[\"Cured\"]\ncovidIndiaDF","99a04a3a":"\nfrom datetime import timedelta\ndailyFigDF=covidIndiaDF.copy().groupby([\"State\/UnionTerritory\",\"Date\"]).agg({\"Confirmed\":\"max\", \"Deaths\":\"max\",\"Cured\":\"max\", \"Treated\":\"max\"}).reset_index()\n\n#prevDateFigDF=dailyFigDF[[\"Date\", \"Confirmed\", \"Deaths\", \"Cured\",\"Treated\"]]\ndailyFigDF[\"Prev_Date\"]=dailyFigDF[\"Date\"]-timedelta(days=1)\n\ncovidIndiaDFMerged=pd.merge(dailyFigDF.copy(), dailyFigDF[[\"State\/UnionTerritory\",\"Date\", \"Prev_Date\", \"Confirmed\", \"Deaths\", \"Cured\",\"Treated\"]].copy(), \\\n                            left_on=[\"State\/UnionTerritory\",\"Prev_Date\"], right_on=[\"State\/UnionTerritory\",\"Date\"], suffixes=[\"_today\",\"_yesterday\"], how=\"inner\")\ncovidIndiaDFMerged[\"New_Cases\"]=covidIndiaDFMerged[\"Confirmed_today\"]-covidIndiaDFMerged[\"Confirmed_yesterday\"]\ncovidIndiaDFMerged[\"New_Deaths\"]=covidIndiaDFMerged[\"Deaths_today\"]-covidIndiaDFMerged[\"Deaths_yesterday\"]\ncovidIndiaDFMerged=covidIndiaDFMerged.sort_values(by=\"Date_today\", ascending=True)[covidIndiaDFMerged[\"Date_today\"]>=\"2020-03-15\"]\n\nfig, axs=plt.subplots(1,2,figsize=(22,6))\naxs[0].set_xlabel(\"Dates\")\naxs[0].set_ylabel(\"Number\")\naxs[0].set_title(\"No. of New Cases\")\naxs[0].plot(covidIndiaDFMerged[\"Date_today\"].drop_duplicates(), covidIndiaDFMerged.groupby(\"Date_today\").agg({\"New_Cases\":\"sum\"}).reset_index()[\"New_Cases\"])    \naxs[0].legend()\naxs[1].set_xlabel(\"Dates\")\naxs[1].set_ylabel(\"Number\")\naxs[1].set_title(\"No. of New Deaths\")\naxs[1].plot(covidIndiaDFMerged[\"Date_today\"].drop_duplicates(), covidIndiaDFMerged.groupby(\"Date_today\").agg({\"New_Deaths\":\"sum\"}).reset_index()[\"New_Deaths\"])    \naxs[1].legend()\n\n# states=covidIndiaDFMerged[\"State\/UnionTerritory\"].drop_duplicates()\nstates=covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]!=\"Cases being reassigned to states\"].\\\n        groupby(\"State\/UnionTerritory\").agg({\"Confirmed_today\" : \"max\"}).reset_index().\\\n        sort_values(by=\"Confirmed_today\", ascending=False).head(10)[\"State\/UnionTerritory\"]\n\nfig, axs=plt.subplots(1,2,figsize=(22,6))\naxs[0].set_xlabel(\"Dates\")\naxs[0].set_ylabel(\"Number\")\naxs[0].set_title(\"No. of New Cases Statewise\")\nfor state in states:\n    axs[0].plot(covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==state][\"Date_today\"], \\\n           covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==state][\"New_Cases\"], label=state)    \naxs[0].legend()\n    \naxs[1].set_xlabel(\"Dates\")\naxs[1].set_ylabel(\"Number\")    \naxs[1].set_title(\"No. of Deaths Statewise\")    \nfor state in states:\n    axs[1].plot(covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==state][\"Date_today\"], \\\n           covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==state][\"New_Deaths\"], label=state)    \naxs[1].legend()","f3b5d49a":"# fig, axs=plt.subplots(1,2,figsize=(22,6))\n# axs[0].set_xlabel(\"Dates\")\n# axs[0].set_ylabel(\"Number\")\n# axs[0].set_title(\"No. of New Cases\")\n# axs[0].bar(covidIndiaDFMerged[\"Date_today\"].drop_duplicates(), covidIndiaDFMerged.groupby(\"Date_today\").agg({\"New_Cases\":\"sum\"}).reset_index()[\"New_Cases\"])    \n# axs[0].legend()\n# axs[1].set_xlabel(\"Dates\")\n# axs[1].set_ylabel(\"Number\")\n# axs[1].set_title(\"No. of New Deaths\")\n# axs[1].bar(covidIndiaDFMerged[\"Date_today\"].drop_duplicates(), covidIndiaDFMerged.groupby(\"Date_today\").agg({\"New_Deaths\":\"sum\"}).reset_index()[\"New_Deaths\"])    \n# axs[1].legend()\n\n# # states=covidIndiaDFMerged[\"State\/UnionTerritory\"].drop_duplicates()\n# states=covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]!=\"Cases being reassigned to states\"].\\\n#         groupby(\"State\/UnionTerritory\").agg({\"Confirmed_today\" : \"max\"}).reset_index().\\\n#         sort_values(by=\"Confirmed_today\", ascending=False).head(10)[\"State\/UnionTerritory\"]\n\nfig, axs=plt.subplots(1,2,figsize=(22,6))\naxs[0].set_xlabel(\"Dates\")\naxs[0].set_ylabel(\"Number\")\naxs[0].set_title(\"No. of New Cases West Bengal\")\naxs[0].plot(covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==\"West Bengal\"][\"Date_today\"], \\\n           covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==\"West Bengal\"][\"New_Cases\"])    \naxs[0].legend()\n    \naxs[1].set_xlabel(\"Dates\")\naxs[1].set_ylabel(\"Number\")    \naxs[1].set_title(\"No. of Deaths in West Bengal\")    \naxs[1].plot(covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==\"West Bengal\"][\"Date_today\"], \\\n       covidIndiaDFMerged[covidIndiaDFMerged[\"State\/UnionTerritory\"]==\"West Bengal\"][\"New_Deaths\"])    \naxs[1].legend()","75fc7ea6":"fig, axs=plt.subplots(1,2,figsize=(22,6))\n\n#Country Wise Tally\ncountryWise=covidIndiaDF.groupby(\"Date\").agg({\n    \"Cured\" : \"sum\",\n    \"Deaths\" : \"sum\",\n    \"Confirmed\" : \"sum\",\n    \"Treated\" : \"sum\"\n}).sort_values(by=\"Date\", ascending=True).reset_index()\n\naxs[0].set_title(\"Country Wise Tally\")\naxs[0].plot(countryWise[\"Date\"], countryWise[\"Confirmed\"], label=\"Confirmed Cases\", color=\"blue\")\naxs[0].plot(countryWise[\"Date\"], countryWise[\"Cured\"], label=\"Cured Cases\", color=\"green\")\naxs[0].plot(countryWise[\"Date\"], countryWise[\"Deaths\"], label=\"Deaths\", color=\"red\")\naxs[0].plot(countryWise[\"Date\"], countryWise[\"Treated\"], label=\"Active\", color=\"yellow\")\naxs[0].legend()\naxs[0].set_xlabel(\"Dates\")\naxs[0].set_ylabel(\"Counts\")\n\n# State wise tally\nstateWise=covidIndiaDF[covidIndiaDF[\"State\/UnionTerritory\"]!=\"Cases being reassigned to states\"].groupby(\"State\/UnionTerritory\").agg({\n    \"Cured\" : \"max\",\n    \"Deaths\" : \"max\",\n    \"Confirmed\" : \"max\"\n}).sort_values(by=\"Confirmed\", ascending=False).reset_index().head(10)\naxs[1].set_title(\"State Wise Tally\")\naxs[1].barh(stateWise[\"State\/UnionTerritory\"], stateWise[\"Confirmed\"], label=\"Confirmed Cases\", color=\"blue\")\naxs[1].barh(stateWise[\"State\/UnionTerritory\"], stateWise[\"Cured\"], label=\"Cured\", color=\"green\")\naxs[1].barh(stateWise[\"State\/UnionTerritory\"], stateWise[\"Deaths\"], label=\"Deaths\", color=\"red\")\n# axs[1].barh(stateWise[\"State\/UnionTerritory\"], stateWise[\"Treated\"], label=\"Treated\", color=\"yellow\")\naxs[1].legend()\naxs[1].set_xlabel(\"Counts\")\naxs[1].set_ylabel(\"State \/ UnionTerritory\")\naxs[1].invert_yaxis()","5a8f0b1a":"lastDate=covidIndiaDF.agg({\"Date\" : \"max\"})\n\nprint(\"*** Country Wise Stats ***\")\ntmpDF=covidIndiaDF[covidIndiaDF[\"Date\"]==lastDate[0]].agg({\n    \"Cured\" : \"sum\",\n    \"Deaths\" : \"sum\",\n    \"Confirmed\" : \"sum\",\n    \"Treated\" : \"sum\"\n})\ntmpDF[\"Death_Percentage\"]=tmpDF[\"Deaths\"]\/tmpDF[\"Confirmed\"]*100\nprint(tmpDF)\nprint(\"*** State Wise Stats. For highest death rates ***\")\nstateWise[\"Death_Percentage\"]=stateWise[\"Deaths\"]\/stateWise[\"Confirmed\"]*100\nprint(stateWise.sort_values(by=[\"Death_Percentage\",\"Confirmed\"], ascending=False).head(10))","546d5d9b":"covidDeathRatioDF=covidIndiaDF.groupby(\"Date\").agg({\"Confirmed\" : \"sum\", \"Deaths\" : \"sum\"}).reset_index()\ncovidDeathRatioDF[\"Death_Ratio\"]=covidDeathRatioDF[\"Deaths\"]\/covidDeathRatioDF[\"Confirmed\"]*100\ncovidDeathRatioDF=covidDeathRatioDF[covidDeathRatioDF[\"Death_Ratio\"]!=np.inf].sort_values(by=\"Date\", ascending=True)\ncovidDeathRatioDF=covidDeathRatioDF[covidDeathRatioDF[\"Date\"]>=\"2020-03-15\"]\n\n#Country Wise\nfig, axs=plt.subplots(1,2,figsize=(22,6))\naxs[0].set_title(\"Country Wise Death Percentage\")\naxs[0].bar(covidDeathRatioDF[\"Date\"], covidDeathRatioDF[\"Death_Ratio\"], label=\"Country Wise Death Ratio\")\naxs[0].set_xlabel(\"Date\")\naxs[0].set_ylabel(\"Death Percentage\")\n\n#State Wise\naxs[1].set_title(\"State Wise Death Percentage\")\n# Top 10 States\ntop10=stateWise[\"State\/UnionTerritory\"].head(8)\norder=1\nfor state in top10:\n    #print(\"Plotting : \",state)\n    axs[1].bar(covidIndiaDF[(covidIndiaDF[\"State\/UnionTerritory\"]==state) & (covidIndiaDF[\"Date\"]>=\"2020-03-15\")].sort_values(\"Date\")[\"Date\"], \\\n             covidIndiaDF[(covidIndiaDF[\"State\/UnionTerritory\"]==state) & (covidIndiaDF[\"Date\"]>=\"2020-03-15\")].sort_values(\"Date\")[\"Death_Ratio\"], \\\n             label=state)\n#     order=order+1\n#     covidIndiaDF[(covidIndiaDF[\"State\/UnionTerritory\"]==state) & (covidIndiaDF[\"Date\"]>=\"2020-03-15\")].\\\n#         plot.bar(x=covidIndiaDF.sort_values(\"Date\")[\"Date\"],\\\n#                  y=covidIndiaDF.sort_values(\"Date\")[\"Death_Ratio\"], \\\n#                  ax=axs[1], \\\n#                  stacked=True,\\\n#                  label=state)\naxs[1].legend()\naxs[1].set_xlabel(\"Dates\")\naxs[1].set_ylabel(\"Death Percentage\")\nplt.show()\n","3b4b3f3a":"worldDataMaster=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/owid-covid-data.csv\")\nworldDataMaster.head(10)","1fc305ca":"worldDF=worldDataMaster[worldDataMaster[\"location\"]!=\"World\"].copy()\nworldDF[\"Country\"]=worldDF[\"location\"]\nworldDF[\"Confirmed\"]=worldDF[\"total_cases\"]\nworldDF[\"Deaths\"]=worldDF[\"total_deaths\"]\nworldDF[\"Cured_Or_Being_Treated\"]=worldDF[\"Confirmed\"]-worldDF[\"Deaths\"]\nworldDF[\"Date\"]=pd.to_datetime(worldDF[\"date\"], format=\"%Y-%m-%d\")\n\nworldDF=worldDF.groupby([\"Date\",\"Country\"]).agg({\n#     \"Cured\" : \"max\",\n    \"Deaths\" : \"max\",\n    \"Confirmed\" : \"max\"\n}).reset_index()\n\nworldDF[\"Death_Ratio\"]=worldDF[\"Deaths\"]\/worldDF[\"Confirmed\"]*100\n# worldDF[\"Treated\"]=worldDF[\"Confirmed\"]-worldDF[\"Deaths\"]-worldDF[\"Cured\"]\nworldDF=worldDF.replace(np.NaN, 0)\nworldDF.head(10)","f1ce342d":"\n#Country Wise Tally\nworldWise=worldDF.groupby(\"Date\").agg({\n#     \"Cured\" : \"sum\",\n    \"Deaths\" : \"sum\",\n    \"Confirmed\" : \"sum\",\n#     \"Treated\" : \"sum\"\n}).sort_values(by=\"Date\", ascending=True).reset_index()\n\nplt.figure(figsize=(22,7))\nplt.title(\"World Tally\")\nplt.plot(worldWise[\"Date\"], worldWise[\"Confirmed\"], label=\"Confirmed Cases\", color=\"blue\")\n# plt.plot(worldWise[\"Date\"], worldWise[\"Cured\"], label=\"Cured Cases\", color=\"green\")\nplt.plot(worldWise[\"Date\"], worldWise[\"Deaths\"], label=\"Deaths\", color=\"red\")\n# plt.plot(worldWise[\"Date\"], worldWise[\"Treated\"], label=\"Treated\", color=\"yellow\")\nplt.legend()\nplt.xlabel(\"Dates\")\nplt.ylabel(\"Counts\")\nplt.show()\n\nplt.figure(figsize=(22,7))\n# Country wise tally top 20\ncountryWise=worldDF.groupby(\"Country\").agg({\n#     \"Cured\" : \"max\",\n    \"Deaths\" : \"max\",\n    \"Confirmed\" : \"max\"\n}).sort_values(by=\"Confirmed\", ascending=False).reset_index().head(20)\nplt.title(\"Country Wise Tally\")\nplt.barh(countryWise[\"Country\"], countryWise[\"Confirmed\"], label=\"Confirmed Cases\", color=\"blue\")\n# plt.barh(countryWise[\"Country\"], countryWise[\"Cured\"], label=\"Cured\", color=\"green\")\nplt.barh(countryWise[\"Country\"], countryWise[\"Deaths\"], label=\"Deaths\", color=\"red\")\nplt.legend()\nplt.xlabel(\"Counts\")\nplt.ylabel(\"Country \/ Region\")\nplt.gca().invert_yaxis()\n# countryWise","60514067":"lastDate=worldDF.agg({\"Date\" : \"max\"})\n\nprint(\"*** World Wide Stats ***\")\ntmpDF=worldDF[worldDF[\"Date\"]==lastDate[0]].agg({\n    \"Deaths\" : \"sum\",\n    \"Confirmed\" : \"sum\",\n})\ntmpDF[\"Death_Percentage\"]=tmpDF[\"Deaths\"]\/tmpDF[\"Confirmed\"]*100\nprint(tmpDF)\nprint(\"*** Country Wise Stats. For highest death rates ***\")\ncountryWise[\"Death_Percentage\"]=countryWise[\"Deaths\"]\/countryWise[\"Confirmed\"]*100\nprint(countryWise.sort_values(by=[\"Death_Percentage\",\"Confirmed\"], ascending=False).head(20))","d97dad56":"worldCovidDeathRatioDF=worldDF.copy().groupby(\"Date\").agg({\"Confirmed\" : \"sum\", \"Deaths\" : \"sum\"}).reset_index()\nworldCovidDeathRatioDF[\"Death_Ratio\"]=worldCovidDeathRatioDF[\"Deaths\"]\/worldCovidDeathRatioDF[\"Confirmed\"]*100\nworldCovidDeathRatioDF=worldCovidDeathRatioDF[worldCovidDeathRatioDF[\"Death_Ratio\"]!=np.inf].sort_values(by=\"Date\", ascending=True)\nworldCovidDeathRatioDF=worldCovidDeathRatioDF.replace(np.NaN, 0)\n#worldCovidDeathRatioDF=worldDF[worldDF[\"Date\"]>=\"2020-03-15\"]\n\n#World Wise\nplt.figure(figsize=(22,7))\nplt.title(\"World Wide Death Percentage\")\nplt.bar(worldCovidDeathRatioDF[\"Date\"], worldCovidDeathRatioDF[\"Death_Ratio\"], label=\"World Wide Death Ratio\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Death Percentage\")\n\n#Country Wise\nplt.figure(figsize=(22,7))\nplt.title(\"Country Wise Death Percentage\")\n# Top 20 Countries\ntop20Countries=countryWise[\"Country\"]\nfor country in top20Countries:\n    #print(\"Plotting : \",state)\n    plt.bar(worldDF[(worldDF[\"Country\"]==country) & (worldDF[\"Date\"]>=\"2020-03-15\")].sort_values(\"Date\")[\"Date\"], \\\n             worldDF[(worldDF[\"Country\"]==country) & (worldDF[\"Date\"]>=\"2020-03-15\")].sort_values(\"Date\")[\"Death_Ratio\"], label=country)\nplt.legend()\nplt.xlabel(\"Dates\")\nplt.ylabel(\"Death Percentage\")\nplt.show()","1f627663":"**Coutry and Statewise Tally**","f943506a":"**World Stats**","71ddf8bb":"**Death Ratio From 15th March**","8309d825":"**India Stats**","a2f4c742":"**Day wise figures**","52eb69ef":"#### West Bengal","fef9c020":"**Constants and Imports**\n\nWe would be using pandas, matplotlib and numpy for our dashboard","95fd62f5":"## ** World Data**\n\nGetting the world data","1f73fa19":"**Death Ratio**","d6881024":"## **India**\n\nGetting the data for India","8efd3255":"**Preprocessing**","08936a85":"### **World Wide Visualizations**","b15cafdd":"**Iniatilizing the input directories**","6857cfc3":"### Visualizations"}}