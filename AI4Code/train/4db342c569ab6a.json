{"cell_type":{"846a46fd":"code","d2bf100e":"code","9804fa66":"code","ee8ebfff":"code","55239739":"code","8110aeb0":"code","cfe9e88a":"code","26060d95":"code","df8a8d4c":"code","ade42b74":"code","9f3d490f":"code","c22372fb":"code","0adafe43":"code","beb38d4e":"code","fa205c1b":"code","d732668f":"code","e9ecac4a":"code","fe01a7da":"code","e6878791":"code","237efa47":"code","9c20ca2a":"code","f802c376":"code","8ae5179e":"code","e191be13":"code","10b91ebf":"code","8b33b9b9":"code","8ee29221":"code","b2962c11":"code","6f4b37e0":"code","434ac620":"code","83c9bdfd":"code","419c8a59":"code","5898ee5f":"code","2b554f5b":"code","a65f3182":"code","66f0d9d1":"code","d6d8fa30":"code","b372b93a":"code","52eda345":"code","5ad71e4a":"code","7bb205f6":"code","53bd8794":"code","70f5653a":"code","ca1b63ce":"code","0bc91895":"code","8441bba1":"code","7beddce0":"code","56ec9757":"code","ae563e7e":"code","440c1927":"code","91035278":"code","38788c4a":"code","8719abd1":"code","f83c6fe4":"code","2f5dc403":"code","ab6ded40":"code","78074e34":"code","a95658b5":"code","cf19cf27":"code","ba56c835":"code","6816b4d4":"code","4dd21e13":"code","0c94b625":"code","a91cc404":"code","e074be82":"code","ef785d57":"code","aa59f93a":"code","cd00b309":"code","07c3b7ff":"code","46b1b2d4":"code","b894ab12":"code","93cc7611":"code","b26b0ddf":"code","f05dbc6b":"code","be6b8f0d":"code","f0a75bcd":"code","fe54bcb9":"code","841e9c9e":"code","90b30410":"code","318fd1ee":"code","dc3ce851":"code","3ad2068f":"code","05c96293":"code","ff81c31c":"code","55377476":"code","ef8b0b18":"code","562c7998":"code","381c9dac":"code","c82af868":"code","5dfde7f8":"code","294eb037":"code","2dff848e":"code","19a6aaa2":"code","4f7ee194":"code","3eec93f1":"code","076f884d":"code","8fcd7278":"code","b2f9efa5":"code","f6077d4c":"code","f0bffa88":"code","73e06a85":"code","94a160df":"markdown","65708995":"markdown","118d1c9f":"markdown","106a0d16":"markdown","54f7c2c2":"markdown","a3e77f22":"markdown","98788e78":"markdown","77f9dd31":"markdown","6c8a6133":"markdown","9f7c749b":"markdown","0764d8c2":"markdown","a5926cff":"markdown","4ba56883":"markdown","4e2ad3d7":"markdown","8e123a0b":"markdown","876c8ad7":"markdown","784e8a0e":"markdown","01c02d6f":"markdown","8cc2eda6":"markdown","82667aaa":"markdown","32ac5680":"markdown","9326cd13":"markdown","793eb5ae":"markdown","f7296216":"markdown","9305110e":"markdown","1b1c258f":"markdown","2dcd368a":"markdown","1ea1b2ac":"markdown","52e6b736":"markdown","cbf430b7":"markdown","8d40785b":"markdown","c09eac05":"markdown","3183ea0e":"markdown","682d80af":"markdown","dbdc6819":"markdown","57ebf34b":"markdown","b499a0a7":"markdown"},"source":{"846a46fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2bf100e":"medical_charges_url = 'https:\/\/raw.githubusercontent.com\/JovianML\/opendatasets\/master\/data\/medical-charges.csv'","9804fa66":"from urllib.request import urlretrieve","ee8ebfff":"urlretrieve(medical_charges_url, \"medical_df\")","55239739":"medical_df = pd.read_csv(\"medical_df\")","8110aeb0":"medical_df","cfe9e88a":"medical_df.info()","26060d95":"medical_df.describe()","df8a8d4c":"import plotly.express as px\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ade42b74":"sns.set_style(\"darkgrid\")\nmatplotlib.rcParams[\"font.size\"] = 14\nmatplotlib.rcParams[\"figure.figsize\"] = (10,6)\nmatplotlib.rcParams[\"figure.facecolor\"] = \"#00000000\"","9f3d490f":"medical_df.age.describe()","c22372fb":"fig = px.histogram(medical_df,\n                x = \"age\",\n                  marginal = \"box\",\n                  nbins = 47,\n                  title = \"Distribution of Age\")\nfig.update_layout(bargap = 0.1)\nfig.show()","0adafe43":"!pip install plotly matplotlib seaborn --quiet","beb38d4e":"fig = px.histogram(medical_df, \n                   x='charges', \n                   marginal='box', \n                   color='smoker', \n                   color_discrete_sequence=['green', 'grey'], \n                   title='Annual Medical Charges')\nfig.update_layout(bargap=0.1)\nfig.show()","fa205c1b":"medical_df.smoker.value_counts()","d732668f":"px.histogram(medical_df, x = \"smoker\", color = \"sex\", title = \"smoker\")","e9ecac4a":"fig = px.histogram(medical_df, \n                   x='bmi', \n                   marginal='box', \n                   color_discrete_sequence=['red'], \n                   title='Distribution of BMI (Body Mass Index)')\nfig.update_layout(bargap=0.1)\nfig.show()","fe01a7da":"fig = px.scatter(medical_df,\n                x = \"age\",\n                y = \"charges\",\n                color = \"smoker\",\n                opacity = 0.8,\n                hover_data = [\"sex\"],\n                title = \"Age vs Charges\")\nfig.update_traces(marker_size = 5)\nfig.show()","e6878791":"fig = px.scatter(medical_df,\n                x = \"bmi\",\n                y = \"charges\",\n                color = \"smoker\",\n                opacity = 0.8,\n                hover_data = [\"sex\"],\n                title = \"BMI Vs charges\")\nfig.update_traces(marker_size = 5)\nfig.show()","237efa47":"# correlation of charges versus ages\nmedical_df.charges.corr(medical_df.age)","9c20ca2a":"# correlation of charges vs bmi\nmedical_df.charges.corr(medical_df.bmi)","f802c376":"smoker_values = {\"no\":0, \"yes\":1}\nsmoker_numeric = medical_df.smoker.map(smoker_values)\nmedical_df.charges.corr(smoker_numeric)","8ae5179e":"medical_df.corr()","e191be13":"sns.heatmap(medical_df.corr(), cmap = \"Reds\", annot = True)\nplt.title(\"Correlation Matrix\");","10b91ebf":"# smkoer and age columns have the strongest correlation with charges\nnon_smoker_df = medical_df[medical_df.smoker == \"no\"]\nplt.title(\"Age Vs charges\")\nsns.scatterplot(data = non_smoker_df, x =\"age\", y = \"charges\", alpha = 0.7, s = 15);","8b33b9b9":"def estimate_charges(age, w, b):\n    return w*age + b","8ee29221":"#Let's assume a sample value for w and b to predict the charges\nw = 50\nb = 100\n\nages = non_smoker_df.age\nestimated_charges = estimate_charges(ages, w, b)","b2962c11":"plt.plot(ages, estimated_charges, \"r-o\");\nplt.xlabel(\"Age\");\nplt.ylabel(\"Estimated Charges\");","6f4b37e0":"target = non_smoker_df.charges\n\nplt.plot(ages, estimated_charges, \"r\", alpha = 0.9);\nplt.scatter(ages, target, s =8, alpha = 0.8);\nplt.xlabel(\"Age\");\nplt.ylabel(\"Charges\")\nplt.legend([\"Estimated\", \"Actual\"])","434ac620":"def try_parameters(w,b):\n    ages = non_smoker_df.age\n    target = non_smoker_df.charges\n    \n    estimated_charges = estimate_charges(ages, w, b)\n    \n    plt.plot(ages, estimated_charges, \"r\", alpha = 0.9);\n    plt.scatter(ages, target, s =8, alpha = 0.8);\n    plt.xlabel(\"Age\");\n    plt.ylabel(\"Charges\")\n    plt.legend([\"Estimate\", \"Actual\"])\n    ","83c9bdfd":"try_parameters(400, -7000)","419c8a59":"def rmse(targets, predictions):\n    return np.sqrt(np.mean(np.square(targets - predictions)))","5898ee5f":"targets = non_smoker_df[\"charges\"]\npredicted = estimate_charges(non_smoker_df.age, w, b)","2b554f5b":"rmse(targets, predicted)","a65f3182":"def try_parameters(w,b):\n    ages = non_smoker_df.age\n    target = non_smoker_df.charges\n    predictions = estimate_charges(non_smoker_df.age, w, b)\n    \n    estimated_charges = estimate_charges(ages, w, b)\n    \n    plt.plot(ages, estimated_charges, \"r\", alpha = 0.9);\n    plt.scatter(ages, target, s =8, alpha = 0.8);\n    plt.xlabel(\"Age\");\n    plt.ylabel(\"Charges\")\n    plt.legend([\"Estimate\", \"Actual\"])\n    \n    loss = rmse(target, predictions)\n    print(\"RMSE Loss:\", loss)","66f0d9d1":"try_parameters(50, 100)","d6d8fa30":"try_parameters(400, -7000)","b372b93a":"try_parameters(267, -2091)","52eda345":"!pip install scikit-learn --quiet","5ad71e4a":"from sklearn.linear_model import LinearRegression","7bb205f6":"model = LinearRegression()","53bd8794":"inputs = non_smoker_df[[\"age\"]]\ntargets = non_smoker_df.charges\nprint(\"inputs.shape:\", inputs.shape)\nprint(\"targets.shape:\", targets.shape)","70f5653a":"model.fit(inputs, targets)","ca1b63ce":"model.predict(np.array([[23],\n                       [37],\n                       [61]]))","0bc91895":"predictions = model.predict(inputs)","8441bba1":"predictions","7beddce0":"rmse(targets, predictions)","56ec9757":"model.coef_","ae563e7e":"model.intercept_","440c1927":"try_parameters(model.coef_, model.intercept_)","91035278":"inputs, targets = non_smoker_df[[\"age\", \"bmi\"]], non_smoker_df[\"charges\"]\nmodel = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss\", loss)","38788c4a":"non_smoker_df.charges.corr(non_smoker_df.bmi)","8719abd1":"fig = px.scatter(non_smoker_df, x = \"bmi\", y = \"charges\", title = \"BMI vs Charges\")\nfig.update_traces(marker_size = 5)\nfig.show()","f83c6fe4":"fig = px.scatter_3d(non_smoker_df, x = \"age\", y = \"bmi\", z = \"charges\")\nfig.update_traces(marker_size = 3, marker_opacity = 0.5)\nfig.show()","2f5dc403":"model.coef_, model.intercept_","ab6ded40":"non_smoker_df.charges.corr(non_smoker_df.children)","78074e34":"fig = px.scatter(non_smoker_df, x = \"children\", y = \"charges\", title = \"Children Vs Charges\")\nfig.update_traces(marker_size = 4, marker_opacity = 0.7)\nfig.show()","a95658b5":"inputs, targets = non_smoker_df[[\"age\", \"bmi\", \"children\"]], non_smoker_df[\"charges\"]\nmodel = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss\", loss)","cf19cf27":"sns.barplot(data = medical_df, x = \"smoker\", y = \"charges\");\nplt.show();","ba56c835":"smoker_codes = {\"no\": 0, \"yes\": 1}\nmedical_df[\"smoker\"] = medical_df.smoker.map(smoker_codes)","6816b4d4":"medical_df.head()","4dd21e13":"medical_df.charges.corr(medical_df.smoker)","0c94b625":"inputs, targets = medical_df[[\"age\", \"bmi\", \"children\", \"smoker\"]], medical_df[\"charges\"]\nmodel = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss\", loss)","a91cc404":"sns.barplot(data = medical_df, x = \"sex\", y = \"charges\");\nplt.show();","e074be82":"sex_codes = {\"female\":0, \"male\":1}\nmedical_df[\"sex_code\"] = medical_df.sex.map(sex_codes)","ef785d57":"medical_df.head()","aa59f93a":"medical_df.charges.corr(medical_df.sex_code)","cd00b309":"inputs, targets = medical_df[[\"age\", \"bmi\", \"children\", \"smoker\", \"sex_code\"]], medical_df[\"charges\"]\nmodel = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss\", loss)","07c3b7ff":"sns.barplot(data = medical_df, x =\"region\", y = \"charges\");\nplt.show();","46b1b2d4":"from sklearn import preprocessing\nenc = preprocessing.OneHotEncoder()\nenc.fit(medical_df[[\"region\"]])\nenc.categories_","b894ab12":"one_hot = enc.transform(medical_df[[\"region\"]]).toarray()\none_hot","93cc7611":"medical_df[['northeast', 'northwest', 'southeast', 'southwest']] = one_hot","b26b0ddf":"medical_df","f05dbc6b":"inputs, targets = medical_df[[\"age\", \"bmi\", \"children\", \"smoker\", \"sex_code\",'northeast', 'northwest', 'southeast', 'southwest']], medical_df[\"charges\"]\nmodel = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss\", loss)","be6b8f0d":"model.coef_","f0a75bcd":"model.intercept_","fe54bcb9":"inputs = [\"age\", \"bmi\", \"children\", \"smoker\", \"sex_code\",'northeast', 'northwest', 'southeast', 'southwest']","841e9c9e":"weights_df = pd.DataFrame({\n    'feature': np.append(inputs, 1),\n    'weight': np.append(model.coef_, model.intercept_)\n})\nweights_df","90b30410":"medical_df","318fd1ee":"from sklearn.preprocessing import StandardScaler","dc3ce851":"numeric_cols = [\"age\", \"bmi\", \"children\"]\nscaler = StandardScaler()\nscaler.fit(medical_df[numeric_cols])","3ad2068f":"scaler.mean_","05c96293":"scaler.var_","ff81c31c":"scaled_inputs = scaler.transform(medical_df[numeric_cols])","55377476":"scaled_inputs","ef8b0b18":"cat_cols = [\"smoker\", \"sex_code\",'northeast', 'northwest', 'southeast', 'southwest']\ncategorical_data = medical_df[cat_cols].values","562c7998":"inputs = np.concatenate((scaled_inputs, categorical_data), axis = 1)","381c9dac":"inputs","c82af868":"targets = medical_df.charges","5dfde7f8":"type(targets)","294eb037":"type(inputs)","2dff848e":"model = LinearRegression().fit(inputs, targets)\npredictions = model.predict(inputs)\nloss = rmse(targets, predictions)\nprint(\"Loss:\", loss)","19a6aaa2":"model.coef_","4f7ee194":"model.intercept_","3eec93f1":"weights_df = pd.DataFrame({\n    \"feature\": np.append(numeric_cols + cat_cols, 1),\n    \"weight\": np.append(model.coef_, model.intercept_)\n})\nweights_df.sort_values(\"weight\", ascending = False)","076f884d":"from sklearn.model_selection import train_test_split","8fcd7278":"inputs_train, inputs_test, targets_train, targets_test = train_test_split(inputs, targets, test_size = 0.1)","b2f9efa5":"inputs_train","f6077d4c":"inputs_test","f0bffa88":"model = LinearRegression().fit(inputs_train, targets_train)\npredictions_test = model.predict(inputs_test)\nloss = rmse(targets_test, predictions_test)\nprint(\"Test loss:\", loss)","73e06a85":"predictions_train = model.predict(inputs_train)\nloss = rmse(targets_train, predictions_train)\nprint(\"Training Loss\", loss)","94a160df":"## Optimizer","65708995":"### **Seems like our prediction is off $4000 on average, which is not too bad considering the fact that there are seveal ouliers**","118d1c9f":"**Adding childrens details to the model and creating an another model**","106a0d16":"## Age Vs Charges Distribution","54f7c2c2":"Smoker column is a categorcal column. It contains only \"yes\" and \"no\" values and therefore it is a binary category column. Let's check the same by using bar plot.","a3e77f22":"**Let's create a linear model of charges vs age as below,**\n\n*charges = w x age + b*","98788e78":"## Linear Regression using a Single Feature","77f9dd31":"## Loss\/Cost Function","6c8a6133":"We can now create a pandas dataframe using the download file, to view and analyze the data","9f7c749b":"#### _To compute the correlation coefficient for categorical columns, they must first be converted into numeric columns_","0764d8c2":"Range's of above numerical dataset is reasonable. Therefore we do not need to do more data cleaning and correction. We can proceed with this dataset and there is no null values as well.","a5926cff":"### **Linear Regression using Scikit-learn**","4ba56883":"**We can overlay the estimated data with actual data**","4e2ad3d7":"## Age Distribution","8e123a0b":"Let's take another categorical column \"Region\"\n\n### One-hot Encoding\n\nThe Region column contains 4 categorical values, so we will need to use hot encoding and create a new column for each column","876c8ad7":"## **Using Categorical Features for Machine Learning**","784e8a0e":"**On average, each element in the prediction differs from the actual target by $8461**","01c02d6f":"## Age Vs BMI vs Charges distribution in 3D","8cc2eda6":"Let's take another categorical column sex","82667aaa":"The dataset contains 1338 rows and 7 columns. Each row of the dataset contains information about one customer","32ac5680":"**It seem's no smokers correlation with bmi is negilgible**","9326cd13":"## Exploratory Analysis and Visualization","793eb5ae":"## Smoker Distribution","f7296216":"## Linear Regression with Multiple Features","9305110e":"## BMI Vs Charges Distribution","1b1c258f":"## Body Mass Index distribution","2dcd368a":"Our objective is to find out the value of dependant variable which is charge column in this case by using other independant variable.","1ea1b2ac":"### Creating a Test Set","52e6b736":"**We can compare our model's predictions with the actual target's by using ROOT MEAN SQUARED ERROR(RMSE)**","cbf430b7":"- **It seems, there are wide changes in weight for each features, it's because fatures have different ranges of values**\n\n- **Therefore we need to standardize the values in numeric column by subtracting the mean and dividing by the standard deviation**","8d40785b":"### **Let's get further information of our DataSet**","c09eac05":"**Let's plot the estimated charges by using our model versus ages to understand our position of created model**","3183ea0e":"## Charges Distribution","682d80af":"**As expected, it is hard to make interpretation of variable with each other in 3D**","dbdc6819":"## _Correlation Coefficient_","57ebf34b":"### Let's Compute the RMSE loss to evaluate the model","b499a0a7":"## **Import Necessary Data's for Analysis**"}}