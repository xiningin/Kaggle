{"cell_type":{"2f5cc370":"code","ebf627ae":"code","184b5494":"code","0782fb16":"code","d638aaeb":"code","8bd73149":"code","7b5bd516":"code","e4cd1355":"code","6c9ea036":"code","d29149c6":"code","90ffc70d":"code","5bcd7e0c":"code","469c73fd":"code","94170a35":"code","6481dc3f":"code","f8285a1c":"code","713363bc":"code","7d610a09":"code","a5545022":"code","959ab566":"code","5cb7444a":"code","a50e1fa3":"code","138a4ead":"code","2e66a384":"code","8a9b2515":"code","f908d578":"code","a14a9b02":"code","7780cc60":"markdown","c128b359":"markdown","98ad3151":"markdown","80ff0b76":"markdown","1da1c579":"markdown","a151bdec":"markdown","83942c13":"markdown","18bd350e":"markdown","83f60773":"markdown","f7b1f3d2":"markdown","4e422804":"markdown","afc241c2":"markdown","a88329b8":"markdown","8fe3e007":"markdown","a1c25fab":"markdown"},"source":{"2f5cc370":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebf627ae":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","184b5494":"\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")","0782fb16":"USAhousing = pd.read_csv('\/kaggle\/input\/usa-housing\/USA_Housing.csv')\nUSAhousing.head()","d638aaeb":"USAhousing.info()","8bd73149":"USAhousing.describe()","7b5bd516":"USAhousing.columns","e4cd1355":"sns.pairplot(USAhousing)","6c9ea036":"sns.distplot(USAhousing['Price'])","d29149c6":"sns.heatmap(USAhousing.corr(), annot=True)","90ffc70d":"X = USAhousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n               'Avg. Area Number of Bedrooms', 'Area Population']]\ny = USAhousing['Price']","5bcd7e0c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)\n","469c73fd":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\n\ndef cross_val(model):\n    pred = cross_val_score(model, X, y, cv=10)\n    return pred.mean()\n\ndef print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","94170a35":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train,y_train)","6481dc3f":"# print the intercept\nprint(lin_reg.intercept_)","f8285a1c":"pred = lin_reg.predict(X_test)","713363bc":"coeff_df = pd.DataFrame(lin_reg.coef_, X.columns, columns=['Coefficient'])\ncoeff_df","7d610a09":"plt.scatter(y_test, pred)","a5545022":"sns.distplot((y_test - pred), bins=50);","959ab566":"print_evaluate(y_test, lin_reg.predict(X_test))","5cb7444a":"results_df = pd.DataFrame(data=[[\"Linear Regression\", *evaluate(y_test, pred) , cross_val(LinearRegression())]], \n                          columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df","a50e1fa3":"from sklearn.linear_model import RANSACRegressor\n\nmodel = RANSACRegressor()\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\nprint_evaluate(y_test, pred)","138a4ead":"results_df_2 = pd.DataFrame(data=[[\"Robust Regression\", *evaluate(y_test, pred) , cross_val(RANSACRegressor())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","2e66a384":"from sklearn.linear_model import Ridge\n\nmodel = Ridge()\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)\n\nprint_evaluate(y_test, pred)","8a9b2515":"results_df_2 = pd.DataFrame(data=[[\"Ridge Regression\", *evaluate(y_test, pred) , cross_val(Ridge())]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', \"Cross Validation\"])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","f908d578":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_reg = PolynomialFeatures(degree=2)\nX_poly = poly_reg.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.4, random_state=101)\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train,y_train)\npred = lin_reg.predict(X_test)\n\nprint_evaluate(y_test, pred)","a14a9b02":"results_df_2 = pd.DataFrame(data=[[\"Polynomial Regression\", *evaluate(y_test, pred), 0]], \n                            columns=['Model', 'MAE', 'MSE', 'RMSE', 'R2 Square', 'Cross Validation'])\nresults_df = results_df.append(results_df_2, ignore_index=True)\nresults_df","7780cc60":"Checking Data Columns","c128b359":"Showing all table","98ad3151":"Training Linear Regression","80ff0b76":"Polynomial Regression","1da1c579":"Ridge Regression","a151bdec":"Creating some simple plots","83942c13":"Data Reading From Dataset","18bd350e":"Pricing plot","83f60773":"Predictions from our Model","f7b1f3d2":"Show plots in a better style","4e422804":"Mean Absolute Error (MAE) is the mean of the absolute value of the errors:\n\nMean Squared Error (MSE) is the mean of the squared errors:\n\nRoot Mean Squared Error (RMSE) is the square root of the mean of the squared errors:\n","afc241c2":"Fitting operation in linear regression","a88329b8":"Show as a table our MAE,MSE,RMSE","8fe3e007":"Robust Regression","a1c25fab":"Importing Libraries"}}