{"cell_type":{"22b6afe6":"code","8211e816":"code","0292b08f":"code","9bc867c3":"code","811445a0":"code","3f1813aa":"code","8266218b":"code","432745a9":"code","8e863f11":"code","ea8b0278":"code","806bfc55":"code","83a68f44":"code","0bf4b81a":"code","5044cf85":"code","c45299ba":"code","6ca83967":"code","c7487397":"code","fec47ca4":"code","47791931":"code","d6955d35":"code","470fee5e":"code","a7f52eb9":"code","02f29008":"code","3b78973a":"code","de0c6ea4":"markdown"},"source":{"22b6afe6":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n@import url('http:\/\/fonts.googleapis.com\/css?family=Crimson+Text');\n@import url('http:\/\/fonts.googleapis.com\/css?family=Source+Code+Pro');\n\n\/* Change code font *\/\n.CodeMirror pre {\n    font-family: 'Input Mono Narrow', 'Source Code Pro', Consolas, monocco, monospace;\n}\n\ndiv.input_area {\n    border-color: rgba(0,0,0,0.10);\n}\n\ndiv.text_cell {\n    max-width: 105ex; \/* instead of 100%, *\/\n}\n\ndiv.text_cell_render {\n    font-family: \"Crimson Text\";\n    font-size: 12pt;\n    line-height: 145%; \/* added for some line spacing of text. *\/\n}\n\ndiv.text_cell_render h1,\ndiv.text_cell_render h2,\ndiv.text_cell_render h3,\ndiv.text_cell_render h4,\ndiv.text_cell_render h5,\ndiv.text_cell_render h6 {\n    font-family: 'Crimson Text';\n}\n\n.rendered_html pre,\n.rendered_html code {\n    font-size: medium;\n}\n\n.rendered_html ol {\n    list-style:decimal;\n    margin: 1em 2em;\n}\n\n.prompt.input_prompt {\n    color: rgba(0,0,0,0.5);\n}\n\n.cell.command_mode.selected {\n    border-color: rgba(0,0,0,0.1);\n}\n\n.cell.edit_mode.selected {\n    border-color: rgba(0,0,0,0.15);\n    box-shadow: 0px 0px 5px #f0f0f0;\n    -webkit-box-shadow: 0px 0px 5px #f0f0f0;\n}\n\ndiv.output_scroll {\n    -webkit-box-shadow: inset 0 2px 8px rgba(0,0,0,0.1);\n    box-shadow: inset 0 2px 8px rgba(0,0,0,0.1);\n    border-radious: 2px;\n}\n\n#menubar .navbar-inner {\n    -webkit-box-shadow: none;\n    box-shadow: none;\n    border-radius: 0;\n    border: none;\n    font-family: lato;\n    font-weight: 400;\n}\n\n.navbar-fixed-top .navbar-inner,\n.navbar-static-top .navbar-inner {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    border: none;\n}\n\ndiv#notebook_panel {\n    box-shadow: none;\n    -webkit-box-shadow: none;\n    border-top: none;\n}\n\ndiv#notebook {\n    border-top: 1px solid rgba(0,0,0,0.15);\n}\n\n\/* \n    This is a lazy fix, we *should* fix the \n    background for each Bootstrap button type\n*\/\n#site * .btn {\n    -webkit-box-shadow: none;\n    box-shadow: none;\n}\n\n\nspan.ansiblack {color: #073642;}\nspan.ansiblue {color: #2aa198;}\nspan.ansigray {color: #839496;}\nspan.ansigreen {color: #859900;}\nspan.ansipurple {color: #6c71c4;}\nspan.ansired {color: #dc322f;}\nspan.ansiyellow {color: #b58900;}\n\ndiv.output_stderr {background-color: #dc322f;}\ndiv.output_stderr pre {color: #eee8d5;}\n\n.cm-s-ipython.CodeMirror {background: #fdf6e3; color: #073642;}\n.cm-s-ipython div.CodeMirror-selected {background: #eee8d5 !important;}\n.cm-s-ipython .CodeMirror-gutters {background: #fdf6e3; border-right: 0px;}\n.cm-s-ipython .CodeMirror-linenumber {color: #839496;}\n.cm-s-ipython .CodeMirror-cursor {border-left: 1px solid #657b83 !important;}\n\n.cm-s-ipython span.cm-comment {color: #d33682;}\n.cm-s-ipython span.cm-atom {color: #6c71c4;}\n.cm-s-ipython span.cm-number {color: #6c71c4;}\n\n.cm-s-ipython span.cm-property, .cm-s-ipython span.cm-attribute {color: #859900;}\n.cm-s-ipython span.cm-keyword {color: #dc322f;}\n.cm-s-ipython span.cm-string {color: #b58900;}\n.cm-s-ipython span.cm-operator {color: #d33682;}\n.cm-s-ipython span.cm-builtin {color: #6c71c4;}\n\n.cm-s-ipython span.cm-variable {color: #859900;}\n.cm-s-ipython span.cm-variable-2 {color: #268bd2;}\n.cm-s-ipython span.cm-def {color: #cb4b16;}\n.cm-s-ipython span.cm-error {background: #dc322f; color: #657b83;}\n.cm-s-ipython span.cm-bracket {color: #586e75;}\n.cm-s-ipython span.cm-tag {color: #dc322f;}\n.cm-s-ipython span.cm-link {color: #6c71c4;}\n\n.cm-s-ipython .CodeMirror-matchingbracket { text-decoration: underline; color: #073642 !important;}\nth, td { \n      font-size: 18px;\n      border-collapse: collapse;\n      border-width:3px;\n    }\n    <\/style>\n\n\"\"\")","8211e816":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom scipy import stats\nfrom sklearn.preprocessing import RobustScaler, QuantileTransformer\n%matplotlib inline\nimport rasterio\nfrom matplotlib import colors\nfrom scipy import stats\nfrom tqdm import *\nfrom pyproj import Transformer\nimport ast\n","0292b08f":"adapt = pd.read_csv(\"..\/input\/externald\/Supplementary Data\/cities_updated_geo_us_2020.csv\")\nacct_number = adapt[\"Account Number\"]\ncounties = (adapt['counties'])\ncounties_weights = (adapt['counties_weights'])\nstates = (adapt['state'])\nflag_multi_counties = adapt['flag_multiple_counties']\nmatch_fips = adapt['FIPS']\nMSA = (adapt['MSA'])\nmatch_fips = [ast.literal_eval(match_fips[i]) if flag_multi_counties[i] else int(match_fips[i]) for i in range(len(match_fips))]\ncities = adapt[\"city_bing\"]","9bc867c3":"def standardize_rank(arr, direction=1):\n    rank = (stats.mstats.rankdata(np.ma.masked_invalid(arr)))\n    rank[rank == 0] = np.nan\n    if(direction == 1):\n        return rank\/(np.nanmax(rank)) \n    else:\n        return 1-(rank\/(np.nanmax(rank)))\n","811445a0":"def fetch_answer_individual(account, question_number, org_type=\"city\", year=2018, corp_res_type=None, column_number=None, row_number=None):\n    if(org_type==\"city\"):\n        df = cities_2020_merged_sub\n        subset = df[df['Question Number'] == question_number]\n        answer = subset[subset[\"Account Number\"] == account]\n        if((column_number is not None) and (row_number is None)):\n            answer = answer[answer[\"Column Number\"] == column_number]\n        elif((column_number is not None) and (row_number is not None)):\n            answer = answer[(answer[\"Column Number\"] == column_number) & (answer[\"Row Number\"] == row_number)]\n        elif((column_number is None) and (row_number is not None)):\n            answer = answer[answer[\"Row Number\"] == row_number]\n        else:\n            pass\n        \n    elif(org_type==\"corp\" and corp_res_type==\"cc\"):\n        df = all_corps_cc[year]\n        subset = df[df['question_number'] == question_number]\n        answer = subset[subset[\"account_number\"] == account]\n    elif(org_type==\"corp\" and corp_res_type==\"ws\"):\n        df = all_corps_cc[year]\n        subset = df[df['question_number'] == question_number]\n        answer = subset[subset[\"account_number\"] == account]\n    else:\n        print(\"Something went wrong. Try again.\")\n    \n    return answer\n\ncities_2020 = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Responses\/2020_Full_Cities_Dataset.csv\")\n\ncities_disc_2020 = pd.read_csv(\"\/kaggle\/input\/cdp-unlocking-climate-solutions\/Cities\/Cities Disclosing\/2020_Cities_Disclosing_to_CDP.csv\")\n\ncities_2020_merged = pd.merge(cities_2020, cities_disc_2020, on=\"Account Number\", how=\"outer\", copy=False)\nunique_20 = np.unique(cities_disc_2020[cities_disc_2020[\"Country\"] == \"United States of America\"][\"Account Number\"])\ncities_2020_merged_sub = cities_2020_merged[np.in1d(cities_2020_merged[\"Account Number\"], unique_20)]\n\ndef fetch_answer_individual(account, question_number, org_type=\"city\", year=2018, corp_res_type=None, column_number=None, row_number=None):\n    if(org_type==\"city\"):\n        df = cities_2020_merged_sub\n        subset = df[df['Question Number'] == question_number]\n        answer = subset[subset[\"Account Number\"] == account]\n        if((column_number is not None) and (row_number is None)):\n            answer = answer[answer[\"Column Number\"] == column_number]\n        elif((column_number is not None) and (row_number is not None)):\n            answer = answer[(answer[\"Column Number\"] == column_number) & (answer[\"Row Number\"] == row_number)]\n        elif((column_number is None) and (row_number is not None)):\n            answer = answer[answer[\"Row Number\"] == row_number]\n        else:\n            pass\n    elif(org_type==\"corp\" and corp_res_type==\"cc\"):\n        df = corporations_2020\n        subset = df[df['question_number'] == question_number]\n        answer = subset[subset[\"account_number\"] == account]\n        if((column_number is not None) and (row_number is None)):\n            answer = answer[answer[\"column_number\"] == column_number]\n        elif((column_number is not None) and (row_number is not None)):\n            answer = answer[(answer[\"column_number\"] == column_number) & (answer[\"row_number\"] == row_number)]\n        elif((column_number is None) and (row_number is not None)):\n            answer = answer[answer[\"row_number\"] == row_number]\n        else:\n            pass\n    elif(org_type==\"corp\" and corp_res_type==\"ws\"):\n        df = all_corps_cc[year]\n        subset = df[df['question_number'] == question_number]\n        answer = subset[subset[\"account_number\"] == account]\n    else:\n        print(\"Something went wrong. Try again.\")\n    \n    return answer","3f1813aa":"score_status = {\n    \"Scoping\": 0.1,\n    \"Pre-feasibility\/impact assessment study\": 0.3, \n    \"Pre-implementation\": 0.5,\n    \"Implementation\": 1.0, \n    \"Implementation complete but not in operation\": 1.2,\n    \"Operation\": 1.5,\n    \"Monitoring and reporting\": 2.0\n}\n\nscore_finance = {\n    \"Pre-feasibility\/impact assessment study status\": 0.1,\n    \"Feasibility undertaken\": 0.3,\n    \"Feasibility finalized, and finance partially secured\": 0.75,\n    \"Finance secured\": 1.5, \n    \"Seeking funding\": 0.5\n}","8266218b":"def score_adaptation_actions(acct):\n    df = fetch_answer_individual(acct, '3.0')\n    rows = np.unique(df[\"Row Number\"])\n    nactions = len(rows)\n    alls = []\n    for i in range(len(rows)):\n        sub = df[(df[\"Row Number\"] == rows[i])]\n        try:\n            scst = score_status[sub[sub[\"Column Number\"] == 4.0][\"Response Answer\"].iloc[0]]\n        except:\n            scst = 0\n        try:\n            scf = score_finance[sub[sub[\"Column Number\"] == 9.0][\"Response Answer\"].iloc[0]]\n        except:\n            scf = 0.05\n        cobenefits = len(sub[sub[\"Column Number\"] == 6.0])\n        alls.append(scst*scf*cobenefits)\n    return np.sum(alls)\n\ndef cost_adaptation(acct):\n    df = fetch_answer_individual(acct, '3.0')\n    rows = np.unique(df[\"Row Number\"])\n    nactions = len(rows)\n    alls = []\n    for i in range(len(rows)):\n        sub = df[(df[\"Row Number\"] == rows[i])]\n        try:\n            cost = float(sub[sub[\"Column Number\"] == 11.0][\"Response Answer\"].iloc[0])\n        except:\n            cost = 0\n        alls.append(cost)\n    return np.nansum(alls)","432745a9":"adaptation_scores = np.array([score_adaptation_actions(acct_number[i]) for i in range(len(acct_number))])\nadaptation_scores_ranked = standardize_rank(adaptation_scores, 1)\nadaptation_costs = np.array([cost_adaptation(acct_number[i]) for i in range(len(acct_number))])","8e863f11":"df = pd.read_csv(\"..\/input\/externald\/Supplementary Data\/CDC Social Vulnerability Index 2018\/SVI2018_US_COUNTY.csv\")\n\nper_capita_income_by_county = []\n\nfor i in range(len(counties)):\n    if(not flag_multi_counties[i]):\n        fips = int(match_fips[i])\n        cdf = df[df[\"FIPS\"] == fips]\n        per_capita_income_by_county.append(float(cdf[\"E_PCI\"]))\n    else:\n        fips = (match_fips[i])\n        temp = []\n        for j in range(len(fips)):\n            cdf = df[df[\"FIPS\"] == fips[j]]\n            temp.append(float(cdf[\"E_PCI\"]))\n        all_county_metrics = np.array(temp)\n        weighted_metrics = np.matmul(np.array(ast.literal_eval(counties_weights[i])), all_county_metrics)\n        per_capita_income_by_county.append(weighted_metrics)\n","ea8b0278":"population = np.array([float(fetch_answer_individual(acct_number[i], '0.5', column_number=1.0)[\"Response Answer\"]) for i in range(len(acct_number))])\nareas_km2 = np.array([float(fetch_answer_individual(acct_number[i], '0.6')[\"Response Answer\"]) for i in range(len(acct_number))])\n\nadaptation_contributions = np.array([cost_adaptation(acct_number[i]) for i in range(len(acct_number))])\nadaptation_contributions_per_capita = adaptation_costs\/population\nadaptation_contributions_per_capita_income = adaptation_costs\/per_capita_income_by_county\n\nadaptation_contributions_per_capita_ranked = standardize_rank(adaptation_contributions_per_capita, 1)\nadaptation_contributions_per_capita_income_ranked = standardize_rank(adaptation_contributions_per_capita_income, 1)\n","806bfc55":"percent_reductions_per_year = []\npercent_target_acheived = []\n\nfor i in range(len(acct_number)):\n    df = fetch_answer_individual(acct_number[i], '5.0')\n    if(df[\"Response Answer\"].iloc[0] == \"Base year emissions (absolute) target\"):\n        dff = fetch_answer_individual(acct_number[i], '5.0a')\n        rows = np.unique(np.array(dff[\"Row Number\"]))\n        if(len(rows) == 1):\n            base_year = float(dff[dff[\"Column Number\"] == 4.0][\"Response Answer\"])\n            base_year_emissions = float(dff[dff[\"Column Number\"] == 6.0][\"Response Answer\"])\n            percent_reduction = float(dff[dff[\"Column Number\"] == 7.0][\"Response Answer\"])\n            target_year = float(dff[dff[\"Column Number\"] == 8.0][\"Response Answer\"])\n            percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n            percent_reductions_per_year.append(percent_reduction_per_year)\n            percent_achieved = float(dff[dff[\"Column Number\"] == 10.0][\"Response Answer\"])\n            percent_target_acheived.append(percent_achieved)\n        else:\n            temp = []\n            for j in range(len(rows.astype(int))):\n                base_year = float(dff[(dff[\"Column Number\"] == 4.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                base_year_emissions = float(dff[(dff[\"Column Number\"] == 6.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction = float(dff[(dff[\"Column Number\"] == 7.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                target_year = float(dff[(dff[\"Column Number\"] == 8.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n                temp.append(percent_reduction_per_year)\n                percent_achieved = float(dff[(dff[\"Column Number\"] == 10.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n            percent_reductions_per_year.append(np.nanmean(temp))\n            percent_target_acheived.append(percent_achieved)\n    elif(df[\"Response Answer\"].iloc[0] == \"Fixed level target\"):\n        percent_reductions_per_year.append(np.nan)\n        dff = fetch_answer_individual(acct_number[i], '5.0b', column_number=8.0)\n        percent_target_acheived.append(float(dff[\"Response Answer\"].iloc[0]))\n        \n    elif(df[\"Response Answer\"].iloc[0] == \"Base year intensity target\"):\n        dff = fetch_answer_individual(acct_number[i], '5.0c')\n        rows = np.unique(np.array(dff[\"Row Number\"]))\n        if(len(rows) == 1):\n            base_year = float(dff[dff[\"Column Number\"] == 4.0][\"Response Answer\"])\n            base_year_emissions = float(dff[dff[\"Column Number\"] == 8.0][\"Response Answer\"])\n            percent_reduction = float(dff[dff[\"Column Number\"] == 9.0][\"Response Answer\"])\n            target_year = float(dff[dff[\"Column Number\"] == 10.0][\"Response Answer\"])\n            percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n            percent_reductions_per_year.append(percent_reduction_per_year)\n            percent_achieved = float(dff[dff[\"Column Number\"] == 12.0][\"Response Answer\"])\n            percent_target_acheived.append(percent_achieved)\n        else:\n            temp = []\n            for j in range(len(rows.astype(int))):\n                base_year = float(dff[(dff[\"Column Number\"] == 4.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                base_year_emissions = float(dff[(dff[\"Column Number\"] == 8.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction = float(dff[(dff[\"Column Number\"] == 9.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                target_year = float(dff[(dff[\"Column Number\"] == 10.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n                temp.append(percent_reduction_per_year)\n                percent_achieved = float(dff[(dff[\"Column Number\"] == 12.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n            percent_reductions_per_year.append(np.nanmean(temp))\n            percent_target_acheived.append(percent_achieved)\n    elif(df[\"Response Answer\"].iloc[0] == \"Baseline scenario (business as usual) target\"):\n        dff = fetch_answer_individual(acct_number[i], '5.0d')\n        rows = np.unique(np.array(dff[\"Row Number\"]))\n        if(len(rows) == 1):\n            base_year = float(dff[dff[\"Column Number\"] == 4.0][\"Response Answer\"])\n            base_year_emissions = float(dff[dff[\"Column Number\"] == 6.0][\"Response Answer\"])\n            percent_reduction = float(dff[dff[\"Column Number\"] == 7.0][\"Response Answer\"])\n            target_year = float(dff[dff[\"Column Number\"] == 8.0][\"Response Answer\"])\n            percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n            percent_reductions_per_year.append(percent_reduction_per_year)\n            percent_achieved = float(dff[dff[\"Column Number\"] == 10.0][\"Response Answer\"])\n            percent_target_acheived.append(percent_achieved)\n        else:\n            temp = []\n            for j in range(len(rows.astype(int))):\n                base_year = float(dff[(dff[\"Column Number\"] == 4.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                base_year_emissions = float(dff[(dff[\"Column Number\"] == 6.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction = float(dff[(dff[\"Column Number\"] == 7.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                target_year = float(dff[(dff[\"Column Number\"] == 8.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n                percent_reduction_per_year = percent_reduction\/(target_year - base_year)\n                temp.append(percent_reduction_per_year)\n                percent_achieved = float(dff[(dff[\"Column Number\"] == 10.0) & (dff[\"Row Number\"] == rows[j])][\"Response Answer\"])\n            percent_reductions_per_year.append(np.nanmean(temp))\n            percent_target_acheived.append(percent_achieved)\n    else:\n        percent_reductions_per_year.append(np.nan)\n        percent_target_acheived.append(np.nan)","83a68f44":"percent_reductions_per_year_ranked = standardize_rank(percent_reductions_per_year, 1)\npercent_target_acheived_ranked = standardize_rank(percent_target_acheived, 1)","0bf4b81a":"def score_water_adaptation(acct):\n    df = fetch_answer_individual(acct, '14.3')\n    rows = np.unique(df[\"Row Number\"])\n    nactions = len(rows)\n    if(nactions > 0):\n        alls = []\n        for i in range(len(rows)):\n            sub = df[(df[\"Row Number\"] == rows[i])]\n            try:\n                scst = score_status[sub[sub[\"Column Number\"] == 3.0][\"Response Answer\"].iloc[0]]\n            except:\n                scst = 0\n            alls.append(scst)\n        return np.sum(alls)\n    else:\n        return 0\n    ","5044cf85":"water_security_adaptation = [score_water_adaptation(acct_number[i]) for i in range(len(acct_number))]\nwater_security_adaptation_ranked = standardize_rank(water_security_adaptation, 1)","c45299ba":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom nltk import tokenize\n\nsid = SentimentIntensityAnalyzer()\n\ndef polarity_score_city(question, column, sent_thresh=1):\n    subset = cities_2020[cities_2020['Question Number'] == question]\n    subset_city_answers = subset[subset[\"Column Number\"] == column]\n    \n    compound_score = []\n    for i in range(len(acct_number)):\n        ss = list(subset_city_answers[subset_city_answers[\"Account Number\"] == acct_number[i]][\"Response Answer\"])\n        ss = ' '.join(map(str, ss))\n        sents = tokenize.sent_tokenize(ss)\n        if(len(sents) > sent_thresh):\n            cc = 0\n            for s in sents:\n                r = sid.polarity_scores(s)\n                cc += r['compound']\n            avg_cc = cc\/len(sents)\n            compound_score.append(avg_cc)\n        else:\n            compound_score.append(np.nan)\n    return (compound_score)","6ca83967":"opportunity_city_sentiment = polarity_score_city(\"6.0\", 2.0)\ncollab_city_sentiment = polarity_score_city(\"6.2a\", 3.0)\n\nopportunity_city_sentiment_ranked = standardize_rank(opportunity_city_sentiment, 1)\ncollab_city_sentiment_ranked = standardize_rank(collab_city_sentiment, 1)","c7487397":"bric_2010 = pd.read_excel(\"..\/input\/resiliencescoresbric\/bric\/BRIC2010_FIPS2019_nov 20.xlsx\")\nbric_2015 = pd.read_excel(\"..\/input\/resiliencescoresbric\/bric\/BRIC2015_FIPS2019_nov 20.xlsx\")\n\ndef resilience_bric(type_resilience, year):\n    if(year == 2015):\n        bric = bric_2015\n    else:\n        bric = bric_2010\n        \n    res = []\n    for i in range(len(match_fips)):\n        if(not flag_multi_counties[i]):\n            fips = int(match_fips[i])\n            cdf = bric[bric[\"GEOID\"] == fips]\n            try:\n                res.append(float(cdf[type_resilience]))\n            except:\n                res.append(np.nan)\n        else:\n            fips = match_fips[i]\n            temp = []\n            for j in range(len(fips)):\n                cdf = bric[bric[\"GEOID\"] == fips[j]]\n                temp.append(np.sum(np.array(cdf[type_resilience])))\n            ar = np.array(temp)\n            weighted_avg = np.average(ar, weights=np.array(ast.literal_eval(counties_weights[i])))\n            res.append(weighted_avg)\n    return np.array(res)","fec47ca4":"social_resilience = resilience_bric(\"SOCIAL\", 2015)\necon_resilience =  resilience_bric(\"ECONOM\", 2015)\ninfra_resilience = resilience_bric(\"HOUSING\/INFRA\", 2015)\ncomm_resilience = resilience_bric(\"COMM CAPITL\", 2015)\ninst_resilience = resilience_bric(\"INSTITUTIONAL\", 2015)\nenv_resilience = resilience_bric(\"ENVIRONMNT\", 2015)\ntot_resilience = resilience_bric(\"TOT RESIL2015\", 2015)\n\nsocial_resilience_ranked = standardize_rank(social_resilience, 1)\necon_resilience_ranked =  standardize_rank(econ_resilience, 1)\ninfra_resilience_ranked = standardize_rank(infra_resilience, 1)\ncomm_resilience_ranked = standardize_rank(comm_resilience, 1)\ninst_resilience_ranked = standardize_rank(inst_resilience, 1)\nenv_resilience_ranked = standardize_rank(env_resilience, 1)\ntot_resilience_ranked = standardize_rank(tot_resilience, 1)","47791931":"delta_social_resilience = (social_resilience - resilience_bric(\"SOCIAL\", 2010))\/resilience_bric(\"SOCIAL\", 2010)\ndelta_econ_resilience = (econ_resilience - resilience_bric(\"ECONOM\", 2010))\/resilience_bric(\"ECONOM\", 2010)\ndelta_infra_resilience = (infra_resilience - resilience_bric(\"HOUSING\/INFRA\", 2010))\/resilience_bric(\"HOUSING\/INFRA\", 2010)\ndelta_comm_resilience = (comm_resilience - resilience_bric(\"COMM CAPITL\", 2010))\/resilience_bric(\"COMM CAPITL\", 2010)\ndelta_inst_resilience = (inst_resilience - resilience_bric(\"INSTITUTIONAL\", 2010))\/resilience_bric(\"INSTITUTIONAL\", 2010)\ndelta_env_resilience = (env_resilience - resilience_bric(\"ENVIRONMNT\", 2010))\/resilience_bric(\"ENVIRONMNT\", 2010)\ndelta_tot_resilience = (tot_resilience - resilience_bric(\"TOT RESIL2010\", 2010))\/resilience_bric(\"TOT RESIL2010\", 2010)\n\ndelta_social_resilience_ranked = standardize_rank(delta_social_resilience, 1)\ndelta_econ_resilience_ranked =  standardize_rank(delta_econ_resilience, 1)\ndelta_infra_resilience_ranked = standardize_rank(delta_infra_resilience, 1)\ndelta_comm_resilience_ranked = standardize_rank(delta_comm_resilience, 1)\ndelta_inst_resilience_ranked = standardize_rank(delta_inst_resilience, 1)\ndelta_env_resilience_ranked = standardize_rank(delta_env_resilience, 1)\ndelta_tot_resilience_ranked = standardize_rank(delta_tot_resilience, 1)","d6955d35":"adapt_raw = adapt.copy()\nadapt_ranked = adapt.copy()","470fee5e":"adapt_raw[\"social_resilience\"] = social_resilience\nadapt_raw[\"econ_resilience\"] = econ_resilience\nadapt_raw[\"infra_resilience\"] = infra_resilience\nadapt_raw[\"comm_resilience\"] = comm_resilience\nadapt_raw[\"inst_resilience\"] = inst_resilience\nadapt_raw[\"env_resilience\"] = env_resilience\nadapt_raw[\"tot_resilience\"] = tot_resilience\n\nadapt_raw[\"delta_social_resilience\"] = delta_social_resilience\nadapt_raw[\"delta_econ_resilience\"] = delta_econ_resilience\nadapt_raw[\"delta_infra_resilience\"] = delta_infra_resilience\nadapt_raw[\"delta_comm_resilience\"] = delta_comm_resilience\nadapt_raw[\"delta_inst_resilience\"] = delta_inst_resilience\nadapt_raw[\"delta_env_resilience\"] = delta_env_resilience\nadapt_raw[\"delta_tot_resilience\"] = delta_tot_resilience\n\nadapt_raw[\"adaptation_score\"] = adaptation_scores\nadapt_raw[\"adaptation_contributions_dollars_per_capita\"] = adaptation_contributions_per_capita\nadapt_raw[\"adaptation_contributions_dollars_per_capita_income\"] = adaptation_contributions_per_capita_income\nadapt_raw[\"water_security_adaptation\"] = water_security_adaptation\nadapt_raw[\"percent_reductions_per_year\"] = percent_reductions_per_year\nadapt_raw[\"percent_target_acheived\"] = percent_target_acheived\n\nadapt_raw[\"opportunity_city_sentiment\"] = opportunity_city_sentiment\nadapt_raw[\"collab_city_sentiment\"] = collab_city_sentiment\n\nadapt_raw.to_csv(\"adapt_cities_us_general_kpis_raw.csv\")","a7f52eb9":"adapt_ranked[\"social_resilience_ranked\"] = social_resilience_ranked\nadapt_ranked[\"econ_resilience_ranked\"] = econ_resilience_ranked\nadapt_ranked[\"infra_resilience_ranked\"] = infra_resilience_ranked\nadapt_ranked[\"comm_resilience_ranked\"] = comm_resilience_ranked\nadapt_ranked[\"inst_resilience_ranked\"] = inst_resilience_ranked\nadapt_ranked[\"env_resilience_ranked\"] = env_resilience_ranked\nadapt_ranked[\"tot_resilience_ranked\"] = tot_resilience_ranked\n\nadapt_ranked[\"delta_social_resilience_ranked\"] = delta_social_resilience_ranked\nadapt_ranked[\"delta_econ_resilience_ranked\"] = delta_econ_resilience_ranked\nadapt_ranked[\"delta_infra_resilience_ranked\"] = delta_infra_resilience_ranked\nadapt_ranked[\"delta_comm_resilience_ranked\"] = delta_comm_resilience_ranked\nadapt_ranked[\"delta_inst_resilience_ranked\"] = delta_inst_resilience_ranked\nadapt_ranked[\"delta_env_resilience_ranked\"] = delta_env_resilience_ranked\nadapt_ranked[\"delta_tot_resilience_ranked\"] = delta_tot_resilience_ranked\n\nadapt_ranked[\"adaptation_score_ranked\"] = adaptation_scores_ranked\nadapt_ranked[\"adaptation_contributions_dollars_per_capita_ranked\"] = adaptation_contributions_per_capita_ranked\nadapt_ranked[\"adaptation_contributions_dollars_per_capita_income_ranked\"] = adaptation_contributions_per_capita_income_ranked\nadapt_ranked[\"water_security_adaptation_ranked\"] = water_security_adaptation_ranked\nadapt_ranked[\"percent_reductions_per_year_ranked\"] = percent_reductions_per_year_ranked\nadapt_ranked[\"percent_target_acheived_ranked\"] = percent_target_acheived_ranked\n\nadapt_ranked[\"opportunity_city_sentiment_ranked\"] = opportunity_city_sentiment_ranked\nadapt_ranked[\"collab_city_sentiment_ranked\"] = collab_city_sentiment_ranked\nadapt_ranked.to_csv(\"adapt_cities_us_general_kpis_ranked.csv\")","02f29008":"def aggr_and_rescale(arr):\n    avg_arr = np.nanmean(arr, axis=1)\n    rescaled_avg_arr = standardize_rank(avg_arr)\n    return rescaled_avg_arr\n\nall_resilience_kpis = np.c_[social_resilience_ranked, econ_resilience_ranked, infra_resilience_ranked, comm_resilience_ranked,\n                             inst_resilience_ranked, env_resilience_ranked, tot_resilience_ranked, delta_social_resilience_ranked, delta_econ_resilience_ranked,\n                             delta_infra_resilience_ranked, delta_comm_resilience_ranked, delta_inst_resilience_ranked,\n                             delta_env_resilience_ranked, delta_tot_resilience_ranked, adaptation_contributions_per_capita_ranked,\n                             adaptation_contributions_per_capita_income_ranked, water_security_adaptation_ranked,\n                             percent_reductions_per_year_ranked, percent_target_acheived_ranked]\n\naggr_resilience_kpis = aggr_and_rescale(all_resilience_kpis)\n\nall_sentiment_kpis = np.c_[opportunity_city_sentiment_ranked, collab_city_sentiment_ranked]\n\naggr_sentiment_kpis = aggr_and_rescale(all_sentiment_kpis)\n\naggr_adaptability_kpis = aggr_and_rescale(np.c_[aggr_resilience_kpis, aggr_sentiment_kpis])\n","3b78973a":"adapt_aggr = adapt.copy()\n\nadapt_aggr[\"aggr_adaptability_kpis\"] = aggr_adaptability_kpis\nadapt_aggr[\"aggr_sentiment_kpis\"] = aggr_sentiment_kpis\nadapt_aggr[\"aggr_resilience_kpis\"] = aggr_resilience_kpis\n\nadapt_aggr.to_csv(\"adapt_cities_us_aggr_kpis.csv\")","de0c6ea4":"| KPI Name                       | KPI Interpretation                                       | Public Data Source |\n|--------------------------------|----------------------------------------------------------|--------------------|\n| percent_reduction_per_year     | Reduction in carbon emissions                            | CDP survey         |\n| percent_target_acheived_ranked | Target in GHG emissions reduction reached                | CDP survey         |\n| water_security_adaptation      | water_security_adaptation score                          | CDP survey         |\n| opportunity_city_sentiment     | sentiment analysis on free-text related to opportunities | CDP survey         |\n| collab_city_sentiment          | sentiment analysis on free-text related to opportunities | CDP survey         |\n| social_resilience              | Social resilience score                                  | BRIC indices       |\n| econ_resilience                | econ_resilience score                                    | BRIC indices       |\n| infra_resilience               | infra_resilience score                                   | BRIC indices       |\n| comm_resilience                | comm_resilience score                                    | BRIC indices       |\n| inst_resilience                | inst_resilience score                                    | BRIC indices       |\n| env_resilience                 | env_resilience score                                     | BRIC indices       |\n| tot_resilience                 | tot_resilience score                                     | BRIC indices       |\n| delta_social_resilience        | delta_social_resilience score (change in 5 years)        | BRIC indices       |\n| delta_econ_resilience          | delta_econ_resilience score (change in 5 years)          | BRIC indices       |\n| delta_infra_resilience         | delta_infra_resilience score (change in 5 years)         | BRIC indices       |\n| delta_comm_resilience          | delta_comm_resilience score (change in 5 years)          | BRIC indices       |\n| delta_inst_resilience          | delta_inst_resilience score (change in 5 years)          | BRIC indices       |\n| delta_env_resilience           | delta_env_resilience score (change in 5 years)           | BRIC indices       |\n| delta_tot_resilience           | delta_tot_resilience score (change in 5 years)           | BRIC indices       |"}}