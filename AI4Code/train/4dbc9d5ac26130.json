{"cell_type":{"d0f4c42f":"code","ac70d62e":"code","93c77789":"code","56dda2ec":"code","73f442f9":"code","fa03094c":"code","b3df3744":"code","3e52f00f":"code","6790297e":"code","3f4dda0b":"code","3d42d20d":"code","e1543f19":"code","7c856306":"code","3695b470":"code","3aeab326":"code","5501b082":"code","0320aa6d":"code","ce0c5f65":"code","b425dd7b":"code","07da6dd6":"code","0e508103":"code","4d6277e9":"code","0967119e":"code","bc4ba4a8":"code","d72c65e7":"code","6bca6f3c":"code","85ae26ad":"code","7cd400e2":"code","14e8efd8":"code","7b63c511":"code","da02bab7":"code","852076c5":"code","e297bdbd":"code","6c18e12d":"code","8b9d3827":"code","3f95c9e6":"code","267acd48":"code","4ce20f38":"markdown","a55d8253":"markdown","adb75341":"markdown","ed90c1b6":"markdown","b32ce4cb":"markdown","187936d7":"markdown","76f8e74d":"markdown"},"source":{"d0f4c42f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ac70d62e":"pd.options.display.max_colwidth = 400\nfrom IPython.display import FileLink, FileLinks","93c77789":"train = pd.read_csv('\/kaggle\/input\/web-traffic-time-series-forecasting\/train_2.csv.zip')\nkeys = pd.read_csv('\/kaggle\/input\/web-traffic-time-series-forecasting\/key_2.csv.zip')\nsub = pd.read_csv('\/kaggle\/input\/web-traffic-time-series-forecasting\/sample_submission_2.csv.zip')","56dda2ec":"train.head()","73f442f9":"keys.head()","fa03094c":"sub.head()","b3df3744":"def split_page_col(page):\n    tokens = page.split('_')\n    article_name = ''.join(tokens[:-3])\n    org = tokens[-3]\n    access = tokens[-2]\n    crawler = tokens[-1]\n    return (article_name, org, access, crawler)\n\ndef split_page_col_wdate(page):\n    tokens = page.split('_')\n    article_name = ''.join(tokens[:-4])\n    org = tokens[-4]\n    access = tokens[-3]\n    crawler = tokens[-2]\n    date = tokens[-1]\n    return (article_name, org, access, crawler,date)","3e52f00f":"keys['date'] = keys['Page'].apply(lambda x: x.split('_')[-1])\nkeys['Page'] = keys['Page'].apply(lambda x: '_'.join(x.split('_')[:-1]))\nkeys['date'] = pd.to_datetime(keys['date'], format='%Y-%m-%d')","6790297e":"keys.tail()","3f4dda0b":"sub = sub.merge(keys, on='Id', how='left')","3d42d20d":"sub['date'] = pd.to_datetime(sub['date'], format='%Y-%m-%d')","e1543f19":"print(sub['date'].min(), sub['date'].max())\nprint(sub['date'].max() - sub['date'].min())","7c856306":"print(sub['Page'].nunique())\nprint(train['Page'].nunique())","3695b470":"train.shape","3aeab326":"train.iloc[:, 755:803]","5501b082":"print(sub.shape)\nprint(train.shape)","0320aa6d":"prev_year_data_cols = pd.date_range('2016-09-13', '2016-11-13')\ntrain_flat = pd.melt(train.loc[:, ['Page'] + list(prev_year_data_cols.date.astype(str))], id_vars='Page', var_name='date')\ntrain_flat['date'] = pd.to_datetime(train_flat['date'], format='%Y-%m-%d')","ce0c5f65":"train_flat.head()","b425dd7b":"train_flat['prediction_date'] = train_flat['date'] + pd.DateOffset(years=1)\nsub = sub[['Page', 'date', 'Id']].merge(train_flat[['Page', 'prediction_date', 'value']], left_on=('Page', 'date'), right_on=('Page', 'prediction_date'))\nsub['value'] = sub['value'].fillna(0)","07da6dd6":"sub[['Id', 'value']].rename(columns={'value': 'visits'}).to_csv('all_submission.csv', index=False)\nFileLink('all_submission.csv')","0e508103":"page_median = train.iloc[:, 1:].median(axis=1, skipna=True)","4d6277e9":"page_median = pd.DataFrame({'Page': train['Page'], 'median': page_median})","0967119e":"page_median.head()","bc4ba4a8":"sub_median = sub.merge(page_median, on='Page')[['Id', 'median']]","d72c65e7":"sub_median.isnull().mean()","6bca6f3c":"sub_median","85ae26ad":"sub_median.rename(columns={'median': 'visits'}).to_csv('submission.csv', index=False)\nFileLink('submission.csv')","7cd400e2":"prev_year_data_cols = pd.date_range('2016-09-13', '2016-11-13')\nprev_year_median = train.loc[:, list(prev_year_data_cols.date.astype(str))].median(axis=1, skipna=True)\n","14e8efd8":"prev_year_median = pd.DataFrame({'Page': train['Page'], 'visits': prev_year_median})","7b63c511":"sub_prev_year_median = sub.merge(prev_year_median, on='Page')[['Id', 'visits']]","da02bab7":"sub_prev_year_median.isnull().mean()","852076c5":"sub_prev_year_median['visits'] = sub_prev_year_median['visits'].fillna(sub_prev_year_median['visits'].median())","e297bdbd":"# sub_prev_year_median.to_csv('submission_prev_year.csv',index=False)\n# FileLink('submission_prev_year.csv')","6c18e12d":"median_60 = train.iloc[:, -60:].median(axis=1, skipna=True)\nmedian_60 = pd.DataFrame({'Page': train['Page'], 'visits': median_60})\nsub_median_60 = sub.merge(median_60, on='Page')[['Id', 'visits']]","8b9d3827":"sub_median_60.isnull().mean()","3f95c9e6":"sub_median_60['visits'] = sub_median_60['visits'].fillna(0)","267acd48":"# sub_prev_year_median.to_csv('sub_median_60.csv',index=False)\n# FileLink('sub_median_60.csv')","4ce20f38":"## Baselines Predictions","a55d8253":"### What is the date range to predict?","adb75341":"## Baseline 2 median of the Page","ed90c1b6":"#### Predict for the next 61 days for all pages","b32ce4cb":"## Baseline 3 - median of the page in the prev year ","187936d7":"- Baseline 1 - Predict the same value as the previous year (LB - 62.65)\n- Baseline 2 - Predict the median of the Page (LB - 47.11656)\n- Baseline 3 - Predict the median in this date range the previous year (LB - 53.60537)\n- Baseline 4 - Predict the median of that week from the previous year \/\/TODO\n\n- Baseline 5 - Predict the median of the past 60 days ","76f8e74d":"## Baseline 5 - Median of past 60 days"}}