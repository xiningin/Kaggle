{"cell_type":{"29d667c1":"code","5df3dc76":"code","9d718952":"code","692c787f":"code","04d6e572":"code","2b1cb5ec":"code","0fa8ccd1":"code","5910831b":"code","3b9a1bfd":"code","e562acab":"code","c05bfe7f":"code","6903a744":"code","14d525f3":"code","36cea07e":"code","5ab0b978":"code","8745e5b8":"code","4b4b9243":"code","70a6e6dd":"code","d4e0b2c3":"code","8b9f4db5":"markdown","c35c6b0a":"markdown","95a2d4bf":"markdown","d7a158a8":"markdown","9e36f274":"markdown","6a475271":"markdown","24e2eb02":"markdown","14b09920":"markdown","a0554242":"markdown","88a79154":"markdown"},"source":{"29d667c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n # linear algebra\n # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5df3dc76":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error","9d718952":"diabetes = datasets.load_diabetes() \ndiabetes.keys()  # to find the content of data","692c787f":"diabetes[\"feature_names\"]","04d6e572":"df = pd.DataFrame(diabetes['data'],columns = diabetes['feature_names']) #putting our data in a Dataframe","2b1cb5ec":"df.head()     #Shows top 5 data entry","0fa8ccd1":"df.describe()   # Decribe about the data ","5910831b":"df.isnull().sum() \n#checking for any sort of null value in our data and return the sum of no. null values \n#Remove .sum() and it will so False if null value is not present for every single record ","3b9a1bfd":"df.count()   #tells us the number of entries in each column  ","e562acab":"x = df          \ny = diabetes['target']","c05bfe7f":"from sklearn.model_selection import train_test_split #to split our data into training and testing set\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 101) #splitting our data","6903a744":"from sklearn import  linear_model","14d525f3":"model = linear_model.LinearRegression()","36cea07e":"model.fit(x_train, y_train)  # Training data is used always\n\n# Prediction of testset result of  the Prepared Model\ny_pre = model.predict(x_test)   # puts the test feature value to get the label value which are predicted by the model\n\n","5ab0b978":"from sklearn.model_selection import cross_val_score    #importing \nscores = cross_val_score(model,x,y,scoring=\"neg_mean_squared_error\" , cv=10)  \nrmse_scores=np.sqrt(-scores).mean()    #calculating  root mean sq. of the resulted scores of array \nrmse_scores","8745e5b8":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pre)","4b4b9243":"mse=mean_squared_error(y_test, y_pre)\nrmse=np.sqrt(mse)\nrmse","70a6e6dd":"print(\"Weights:\",model.coef_)\nprint(\"\\nIntercept\",model.intercept_)","d4e0b2c3":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(model,x,y,scoring=\"neg_mean_squared_error\" , cv=10)\nrmse_scores=np.sqrt(-scores).mean()\nrmse_scores","8b9f4db5":"# **Getting Weights and Intercept of Model**","c35c6b0a":"# **Calculating Root Mean Square Error**","95a2d4bf":"# **Importing all the libraries** ","d7a158a8":"# **Cross Validation Scores**","9e36f274":"Now we will be splitting our test data and training data in 30% and 70% of our whole dataset ","6a475271":"# Loading Dataset ","24e2eb02":"# Finding Name of Features ","14b09920":"# **Checking predictions acuracy by r2 Scores (value lies between 0 to 1)**","a0554242":"# Training Model and Getting Predictions ","88a79154":"# Importing Model"}}