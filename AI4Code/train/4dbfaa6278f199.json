{"cell_type":{"fa2bcf32":"code","a98f62c9":"code","762650a2":"code","f3eca194":"code","9521565d":"code","8b3a0c62":"code","c68b9d66":"code","810cf53c":"code","9291b5a9":"code","30073aba":"code","b0f7767b":"code","c514d0dd":"code","49de212c":"code","f7b5ce7c":"code","38dfe380":"code","bb7c8ec2":"code","da78fc8b":"code","84d68cd3":"markdown","fb397a39":"markdown","87b35a4c":"markdown","89e23e55":"markdown","e0129983":"markdown","8830a42c":"markdown","04593410":"markdown","dd353e05":"markdown","f4f7ac72":"markdown"},"source":{"fa2bcf32":"import pandas as pd\nimport os\nimport numpy as np \nimport plotly.express as px\nimport gc\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","a98f62c9":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","762650a2":"def read_data(directory=r'..\/input\/m5-forecasting-accuracy\/'):\n    print('reading calendar')\n    cal = pd.read_csv(directory+r'calendar.csv')    \n    cal = reduce_mem_usage(cal)\n    \n    print('reading sales_train_validation')\n    sales_train_val = pd.read_csv(directory+r'sales_train_validation.csv')\n    sales_train_val = reduce_mem_usage(sales_train_val)\n    \n    print('reading sample_submission')\n    sample_submission = pd.read_csv(directory+r'sample_submission.csv')\n    sample_submission = reduce_mem_usage(sample_submission)\n    \n    print('reading sell_prices')\n    sell_prices = pd.read_csv(directory+r'sell_prices.csv')\n    sell_prices = reduce_mem_usage(sell_prices)\n\n    return cal, sales_train_val, sample_submission, sell_prices","f3eca194":"# requires some time to load all data\ncal, sales_train_val, sample_submission, sell_prices  = read_data()","9521565d":"cal.head(3)","8b3a0c62":"sales_train_val.head(3)","c68b9d66":"sample_submission.head(3)","810cf53c":"sell_prices.head(3)","9291b5a9":"# melting the dataset\nprint('melting')\nsales_train_val_melted = pd.melt(sales_train_val, id_vars=['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], var_name='day', value_name='demand')\nsales_train_val_melted = sales_train_val_melted.drop_duplicates()\ndel sales_train_val\n","30073aba":"sales_train_val_melted.head(3)","b0f7767b":"# lets group data by store_id and calculate total demand for each day by  each store\ntest = sales_train_val_melted.groupby(['store_id', 'day']).agg({'demand':'sum'})\ntest['store_id'] = [x[0] for x in test['demand'].index.tolist()]\ntest['day'] = [x[1] for x in test['demand'].index.tolist()]\ntest.reset_index(drop=True, inplace=True)\ntest['day_number'] = test['day'].apply(lambda x: int(x.split('_')[1]))\ntest = test.sort_values(by='day_number')\n# test.head(3)\n\n# DEMAND VISUALIZATION FOR EACH STORE \nfig = px.line(test,x='day_number', y=\"demand\", color='store_id')\nfig.show()\n\ndel test\ngc.collect()","c514d0dd":"from sklearn.preprocessing import LabelEncoder\n\n# lets remove wday, month, year\ncal = cal[['date', 'wm_yr_wk', 'd', 'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2', 'snap_CA', 'snap_TX', 'snap_WI']]\n\ncal['event_name_1'] = cal['event_name_1'].fillna('No data')\ncal['event_type_1'] = cal['event_type_1'].fillna('No data')\ncal['event_name_2'] = cal['event_name_2'].fillna('No data')\ncal['event_type_2'] = cal['event_type_2'].fillna('No data')\n\n\n# LABEL ENCODING, ENCODING event_name_1, event_type_1, event_name_2, event_type_2\nlabel_encoder = LabelEncoder()\ncal['event_name_1'] = label_encoder.fit_transform(cal['event_name_1'])\ncal['event_type_1'] = label_encoder.fit_transform(cal['event_type_1'])\ncal['event_name_2'] = label_encoder.fit_transform(cal['event_name_2'])\ncal['event_type_2'] = label_encoder.fit_transform(cal['event_type_2'])\n\n# converting \ncal = reduce_mem_usage(cal)","49de212c":"cal.head(3)","f7b5ce7c":"# LABEL ENCODING, ENCODING event_name_1, event_type_1, event_name_2, event_type_2\nlabel_encoder = LabelEncoder()\nsales_train_val_melted['dept_id'] = label_encoder.fit_transform(sales_train_val_melted['dept_id'])\nsales_train_val_melted['cat_id'] = label_encoder.fit_transform(sales_train_val_melted['cat_id'])\nsales_train_val_melted['state_id'] = label_encoder.fit_transform(sales_train_val_melted['state_id'])\n\n\n# LETS ADD:\n# 1) ID_CONVERTER & 2) ITEM_ID_CONVERTER \nid_converter = LabelEncoder()\nsales_train_val_melted['id'] = id_converter.fit_transform(sales_train_val_melted['id'])\n\nitem_id_converter = LabelEncoder()\nsales_train_val_melted['item_id'] = item_id_converter.fit_transform(sales_train_val_melted['item_id'])\n\n# converting dept_id, cat_id, state_id to another type\nsales_train_val_melted = reduce_mem_usage(sales_train_val_melted)\n","38dfe380":"sales_train_val_melted.head(3)","bb7c8ec2":"# encode item_id column\nsell_prices['item_id'] = item_id_converter.transform(sell_prices['item_id'])\n\nsell_prices = reduce_mem_usage(sell_prices)\n\n# remove not_significant values after the dot \nsell_prices['sell_price'] = sell_prices['sell_price'].apply(lambda x: round(float(x),3))\n","da78fc8b":"sell_prices.head(3)","84d68cd3":"LETS EXPLORE ALL DATA:\n\n**CALENDAR DATASET:**<br>\n* Number of of columns - 14\n* List of categoric features: ['date', 'weekday', 'd', 'event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n* List of numeric features: ['wm_yr_wk', 'wday', 'month', 'year', 'snap_CA', 'snap_TX', 'snap_WI']","fb397a39":"* Demand steadily increases over the time. \n* Demand has 7-day period seasonal component\n* There are the days, when demand = 0. This is connected that the shops were closed","87b35a4c":"# 1) Optimizing calendar data","89e23e55":"# Lets optimize datasets to minimize RAM. \n","e0129983":"# Load libraries","8830a42c":"# HERE WE WILL ANALYZE WALMART DATA.\ndata contains 4 TABLES:\n1. calendar.csv\n2. sales_train_validation.csv\n3. sample_submission.csv\n4. sell_prices.csv","04593410":"## LETS USE **pd.melt** method to join d_1,d_2, etc columns into 2 columns: 'day', 'demand'","dd353e05":"# 2) Optimize sales_train_val_melted data","f4f7ac72":"# 3) Optimize sell_prices data "}}