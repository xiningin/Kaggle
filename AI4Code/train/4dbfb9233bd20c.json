{"cell_type":{"64f136c0":"code","2db93022":"code","ad662b43":"code","4c5f8234":"code","e94d7823":"code","ffdad2f4":"code","a769a448":"code","75238c58":"code","dd83f0a6":"code","770b4871":"code","11e30f03":"code","9af4afd6":"code","8e322eb9":"code","1c678ca2":"code","72cf26f1":"code","39005053":"code","e5101d3a":"code","f06375f1":"code","c0be3150":"code","aaddab0c":"code","f2da978f":"code","54c37980":"code","99b86f85":"code","5a329c9f":"code","ae3487e1":"code","f217a315":"code","4b4aaae3":"code","6ef7611b":"code","9d3ec5d4":"markdown","7973ed96":"markdown","d85daebf":"markdown","06b5490c":"markdown","5c7e1280":"markdown","03637bf9":"markdown","600e2137":"markdown","348657e0":"markdown","798a37b5":"markdown","42e83f8a":"markdown","8ff12ab5":"markdown","45c02bc9":"markdown","7f0dcce1":"markdown","6f505cb4":"markdown","d78c1b99":"markdown","a2b0b020":"markdown","190bca20":"markdown","217209cd":"markdown"},"source":{"64f136c0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","2db93022":"df = pd.read_csv('..\/input\/us-counties-covid-19-dataset\/us-counties.csv')","ad662b43":"dl=pd.read_csv('..\/input\/uncover\/UNCOVER\/New_York_Times\/covid-19-county-level-data.csv')","4c5f8234":"df.head()","e94d7823":"df.info()","ffdad2f4":"df.describe()","a769a448":"sns.heatmap(df.isnull())\nfig=plt.gcf()\nfig.set_size_inches(13,5)","75238c58":"msno.matrix(df)","dd83f0a6":"df[df['fips'].isnull()].count()","770b4871":"df['fips'].count()","11e30f03":"(3555\/346810) * 100","9af4afd6":"df['fips']","8e322eb9":"df[df['fips'].isnull()].groupby(df['county']).count()","1c678ca2":"df[df['fips'].fillna(0).isnull()].count()","72cf26f1":"df.dropna(inplace = True)","39005053":"msno.matrix(df)","e5101d3a":"df['date'] = pd.to_datetime(df['date'])","f06375f1":"state_wise = df.groupby('state').sum()['cases'].sort_values(ascending=False)[0:10]\nstate_wise = pd.DataFrame(state_wise).reset_index()\nplt.figure(figsize=(14,10))\ns = sns.barplot(x='state', y='cases', data=state_wise, palette = 'plasma_r', alpha=0.6)\ns.set_xlabel('Top States')\ns.set_ylabel('Cases (in Millions)')\ns.set_title ('Total cases in top 10 States')\nsns.despine(left=True)\n","c0be3150":"county_wise = df.groupby('county').sum()['cases'].sort_values(ascending=False)[0:10]\ncounty_wise = pd.DataFrame(county_wise).reset_index()\nplt.figure(figsize=(14,10))\nc = sns.barplot(x='county', y='cases', data=county_wise, palette = 'magma')\nc.set_xlabel('Top Counties')\nc.set_ylabel('Cases (in 10,000)')\nc.set_title ('Total cases in top 10 Counties')\nsns.despine(left=True)","aaddab0c":"state = df[['cases', 'deaths']].groupby(df['state']).sum().sort_values('cases', ascending=False)[0:10]\nstate = state.reset_index()\nplt.figure(figsize=(14,8))\nd =sns.stripplot(x='deaths', y='cases', data=state, color= 'maroon', hue='state', s=30, palette='magma')\nd.set_xlabel('Total Deaths')\nd.set_ylabel('Total Cases')\nd.set_title ('Deaths and Cases Matrix for top States')\nsns.despine(left=True)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","f2da978f":"county = df[['deaths', 'cases']].groupby(df['county']).sum().sort_values('deaths', ascending=False)\ncounty = pd.DataFrame(county)\nfig, ax =plt.subplots(nrows= 2, ncols = 2, figsize= (14,12))\nw = sns.distplot(county['cases'][0:30], ax =ax[0][0],color='red')\ng = sns.distplot(county[31:60], ax =ax[0][1])\nh = sns.distplot(county[61:90], ax =ax[1][0])\nj =sns.distplot(county[91:120], ax =ax[1][1], color='green')\nsns.despine(left=True)\nw.set_title('Cases Vs Deaths for Counties Top 30')\nw.set_ylabel('Number of deaths(in Thousands)')\nw.set_xlabel ('Cases (in 10,000)')\n\ng.set_title('Cases Vs Deaths for Counties 31-60')\ng.set_ylabel('Number of deaths(in Thousands)')\ng.set_xlabel ('Cases (in 10,000)')\n\nh.set_title('Cases Vs Deaths for Counties 61-91')\nh.set_ylabel('Number of deaths(in Thousands)')\nh.set_xlabel ('Cases (in 10,000)')\n\nj.set_title('Cases Vs Deaths for Counties 91-120')\nj.set_ylabel('Number of deaths(in Thousands)')\nj.set_xlabel ('Cases (in 10,000)')\n","54c37980":"plt.figure(figsize=(12,8))\nsns.lineplot(x='date', y='deaths', data=df, color='darkblue', label='Deaths')\nde= sns.lineplot(x='date', y='cases', data=df, color='maroon', label='Cases')\nde.set_xlabel('Date ')\nde.set_ylabel('Total Cases and Deaths (in Thousands)')\nde.set_title ('Timeline for Virus Spread')\nsns.despine(left=True)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","99b86f85":"from plotly import __version__\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\nimport plotly.graph_objs as go\n","5a329c9f":"state_wise_1 = df.groupby('state').sum()\nstate_wise_1 = pd.DataFrame(state_wise_1)\nstate_wise_1 = state_wise_1.reset_index()","ae3487e1":"state_codes = {\n    'District of Columbia' : 'dc','Mississippi': 'MS', 'Oklahoma': 'OK', \n    'Delaware': 'DE', 'Minnesota': 'MN', 'Illinois': 'IL', 'Arkansas': 'AR', \n    'New Mexico': 'NM', 'Indiana': 'IN', 'Maryland': 'MD', 'Louisiana': 'LA', \n    'Idaho': 'ID', 'Wyoming': 'WY', 'Tennessee': 'TN', 'Arizona': 'AZ', \n    'Iowa': 'IA', 'Michigan': 'MI', 'Kansas': 'KS', 'Utah': 'UT', \n    'Virginia': 'VA', 'Oregon': 'OR', 'Connecticut': 'CT', 'Montana': 'MT', \n    'California': 'CA', 'Massachusetts': 'MA', 'West Virginia': 'WV', \n    'South Carolina': 'SC', 'New Hampshire': 'NH', 'Wisconsin': 'WI',\n    'Vermont': 'VT', 'Georgia': 'GA', 'North Dakota': 'ND', \n    'Pennsylvania': 'PA', 'Florida': 'FL', 'Alaska': 'AK', 'Kentucky': 'KY', \n    'Hawaii': 'HI', 'Nebraska': 'NE', 'Missouri': 'MO', 'Ohio': 'OH', \n    'Alabama': 'AL', 'Rhode Island': 'RI', 'South Dakota': 'SD', \n    'Colorado': 'CO', 'New Jersey': 'NJ', 'Washington': 'WA', \n    'North Carolina': 'NC', 'New York': 'NY', 'Texas': 'TX', \n    'Nevada': 'NV', 'Maine': 'ME', 'Northern Mariana Islands' : 'MP', 'Puerto Rico': 'PR', 'Virgin Islands' : 'VI'}\n\nstate_wise_1['state_code'] = state_wise_1['state'].apply(lambda x : state_codes[x])","f217a315":"state_wise_1.head()","4b4aaae3":"data = dict(type='choropleth',colorscale='RdBu_r', locations = state_wise_1['state_code'], locationmode = 'USA-states', z= state_wise_1['cases'], text = state_wise_1['state'], colorbar={'title':'Scale'},  marker = dict(line=dict(width=0))) \nlayout = dict(title = 'COVID 19 Cases till Now!', geo = dict(scope='usa', showlakes=True, lakecolor = 'darkblue'))\nChoromaps2 = go.Figure(data=[data], layout=layout)\niplot(Choromaps2)\n","6ef7611b":"data = dict(type='choropleth',colorscale='magma_r', locations = state_wise_1['state_code'], locationmode = 'USA-states', z= state_wise_1['deaths'], text = state_wise_1['state'], colorbar={'title':'Scale'},  marker = dict(line=dict(width=0))) \nlayout = dict(title = 'COVID 19 Deaths till Now!', geo = dict(scope='usa', showlakes=True, lakecolor = 'grey'))\nChoromaps2 = go.Figure(data=[data], layout=layout)\niplot(Choromaps2)\n","9d3ec5d4":"**Fips data for 3 counties is unknow**","7973ed96":"**Total fips null values**","d85daebf":"# Cases and Deaths based on top states","06b5490c":"# Mapping of cases by states","5c7e1280":"* **We are now certain that fips column has some null values. **\n* We will now change that to clean the data.\n* will not be deleting data since it is only around 1% of the total data that is missing\n* Just add '0' where the value is NaN","03637bf9":"* All the NaN data is now converted to 0 in the fips column.\n* I will run dropna one last time on the entire dataset to make sure if there arent any hidden NaN values which werent detected by heatmaps","600e2137":"format is now changed to datetime","348657e0":"# **Checking the data for data type, rows and null values if any.**","798a37b5":"# > ****Please have a look and Upvote if you like it. Thank You****","42e83f8a":"**Total fips entries**","8ff12ab5":"# Cases  and Death Timeline","45c02bc9":"Grabbed the state codes from following site.\nhttps:\/\/stackoverflow.com\/questions\/48979352\/choropleth-map-in-python-using-plotly-without-state-codes","7f0dcce1":"**Percentage of missing value: missing\/total * 100**","6f505cb4":"# Comparison of 120 counties with groupsof 30","d78c1b99":"# **Hello, Welcome to my Data Visualization Notebook. I have made analysis on the ongoing COVID 19 cases. **","a2b0b020":"# Cases Based on Top Counties","190bca20":"\n# Thank you for viewing my analysis. Hit the Upvote button if you like it!","217209cd":"# 1. Cases based on top states!"}}