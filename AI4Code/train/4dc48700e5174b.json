{"cell_type":{"87773ac1":"code","8971049d":"code","75808ad8":"code","044c9641":"code","55afda5f":"code","494ca967":"code","0434334f":"code","df72f064":"code","b733d81e":"code","8d7dfc13":"code","fb940ee0":"code","0a167e5a":"code","9023de87":"code","8557bb4b":"code","4ec14a5c":"code","91917553":"code","5bd95f1a":"code","ef967d38":"code","be3f5045":"code","cb469919":"code","ff446069":"code","c0760cdd":"code","384676b3":"code","d61fc8df":"code","b93830b9":"code","8b5a4578":"code","6023ca8a":"code","9d3f5c49":"code","28f389d8":"code","e25a85a0":"code","6093d1db":"code","a8aec989":"code","515f1d9e":"code","cfe258c7":"code","fad4862d":"code","fa5114b5":"code","d50a6d5f":"code","f96efdab":"code","38a9091e":"code","0fae7780":"code","55f0599f":"code","abb657e2":"code","652317a3":"markdown","146a1cf7":"markdown","eec66a82":"markdown","5dab4ada":"markdown","550ab9c9":"markdown","cc89f812":"markdown","6a32ffdf":"markdown"},"source":{"87773ac1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8971049d":"bank = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')","75808ad8":"bank.head()","044c9641":"bank.info()","55afda5f":"sns.distplot(bank['balance'])\n","494ca967":"\nsns.FacetGrid(data=bank,hue='deposit',size=6).map(sns.distplot,'age').add_legend()","0434334f":"sns.set_style('whitegrid')\nsns.boxplot(x='age',y='education',data=bank)\n","df72f064":"num1 = bank[['age','balance','day','duration','campaign','pdays','previous']]","b733d81e":"cat = bank[['job','marital','education','housing','contact','month','poutcome','default','loan','deposit']]","8d7dfc13":"from sklearn.preprocessing import LabelEncoder\nlab = LabelEncoder()\ncat1 = cat.apply(lab.fit_transform)","fb940ee0":"cat1","0a167e5a":"data = num1.join(cat1)","9023de87":"bank.head()","8557bb4b":"data.head()","4ec14a5c":"data.corr()","91917553":"X = data.drop('deposit',axis=1)","5bd95f1a":"y = data['deposit']","ef967d38":"sns.heatmap(data.isnull())","be3f5045":"data.isnull().sum()","cb469919":"X['pdays'].describe()","ff446069":"X = X.drop('pdays',axis=1)","c0760cdd":"X","384676b3":"plt.figure(figsize=(15,15))\nsns.heatmap(data.corr())","d61fc8df":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import f_regression\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import cross_val_score\nlogit = LogisticRegression()\npred = logit.fit(X,y)","b93830b9":"pred.score(X,y)","8b5a4578":"coef = pred.coef_","6023ca8a":"coef.round(3)","9d3f5c49":"f_regression(X,y)","28f389d8":"p_values = f_regression(X,y)[1]","e25a85a0":"p_values","6093d1db":"regressor_OLS = sm.OLS(y,X)\nresult = regressor_OLS.fit()\nresult.summary()","a8aec989":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state=101)","515f1d9e":"logit.fit(X_train,y_train)","cfe258c7":"y_pred = logit.predict(X_test)","fad4862d":"print(\"Accuracy score is\",accuracy_score(y_test,y_pred))\n","fa5114b5":"print(\"Confusion matrix is\\n\",confusion_matrix(y_test,y_pred))\nprint(\"Classification report is\\n\",classification_report(y_test,y_pred))\nprint(\"F1 Score is\",f1_score(y_test,y_pred))","d50a6d5f":"print(\"cross value score is\",cross_val_score(logit,X,y,cv=5))","f96efdab":"from sklearn.model_selection import GridSearchCV\nparameters = [{'C': [1, 10, 100, 1000],'max_iter' :[100, 500 , 1000]}]\ngrid_search = GridSearchCV(estimator = logit,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 5,\n                           n_jobs = -1)\ngrid_search = grid_search.fit(X_train, y_train)","38a9091e":"grid_search.best_params_","0fae7780":"grid_search.best_score_","55f0599f":"final = pd.DataFrame({'method' : ['Logit Reg Score','GridSearchCV Score'],'Result' :[accuracy_score(y_test,y_pred), grid_search.best_score_]})","abb657e2":"final","652317a3":"Here we deal with catogorical features....","146a1cf7":"So,Here Model Prediction Using GridSearchCV have Boosted our model performance from 0.76 to 0.78 so, here we managed to work with grdisearchCV\n\nThank You","eec66a82":"Here....most of the entries in column 'pdays' is negative(i.e -1)","5dab4ada":"As we see we have no missing values now we will move towards preprocessing steps","550ab9c9":"**Comparisn Between Basic Modelling and by GridSearchCV(Hyperparameter Testing)**","cc89f812":"# ML Modelling****","6a32ffdf":"# **Using GridSearchCV for Hyperparamter Testing**"}}