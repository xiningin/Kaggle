{"cell_type":{"4bc912f7":"code","307f6445":"code","c90e35d5":"code","066d9590":"code","19a66978":"code","e18a1d33":"code","618d350e":"code","c50a02ed":"code","5d5e6852":"code","2084e725":"code","1544205b":"code","053c34d5":"code","3cc14c0f":"code","a83e7da2":"code","5caf0b2f":"code","c800e6d7":"code","930c1242":"code","69eb3d3d":"code","e9b68ddf":"code","d16ec501":"code","1c8c13d7":"code","f2cafbc8":"code","ea1bd917":"code","d2db94a7":"markdown","b1ba92be":"markdown","48d5161f":"markdown","d2307ad8":"markdown","474a3a5d":"markdown","7c380491":"markdown","4b4f7ab0":"markdown"},"source":{"4bc912f7":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #for visualization\nimport matplotlib \nimport matplotlib.pyplot as plt#visualization\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics \n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","307f6445":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","c90e35d5":"train.head()","066d9590":"test.head()","19a66978":"sample_submission.head()","e18a1d33":"train.shape\n","618d350e":"test.shape","c50a02ed":"sns.heatmap(train.isnull(),yticklabels=False,xticklabels = False)","5d5e6852":"train['label'].value_counts()","2084e725":"sns.countplot(train['label'],data = train)","1544205b":"x = train.drop('label',axis = 1).to_numpy()\ny = train['label'].to_numpy()","053c34d5":"x= x\/255","3cc14c0f":"plt.imshow(x[900].reshape(28,28),cmap = matplotlib.cm.binary)\nplt.show()","a83e7da2":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.30,random_state = 42)","5caf0b2f":"x_train.shape ,x_test.shape ","c800e6d7":"\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\naccuracy = []\n\nfor i in range(1, 10):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    \n    prediction = knn.predict(x_test)\n    accuracy.append(metrics.accuracy_score(y_test, prediction))\n\n","930c1242":"plt.plot(range(1,10),accuracy)","69eb3d3d":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train,y_train)\n\npredictions = knn.predict(x_test)\nmetrics.accuracy_score(y_test,predictions)","e9b68ddf":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","d16ec501":"test = test\/255\n\npredictions = knn.predict(test)\n\n\n","1c8c13d7":"sample_submission.head()","f2cafbc8":"predictions","ea1bd917":"Submission = pd.DataFrame()\nSubmission['ImageId']=sample_submission['ImageId']\nSubmission['label']=predictions\nSubmission.to_csv('Submission.csv',index = False)","d2db94a7":"**USING ELBOW CURVE TO FIND BEST SUITABLE VALUE FOR N NEIGHBORS**","b1ba92be":"**CHECKING WHETHER DATA IS BALANCED OR UNBALANCED**","48d5161f":"# **READING DATA**","d2307ad8":"Inputs with large integer values can disrupt or slow down the learning process. As such it is good practice to normalize the pixel values so that each pixel value has a value between 0 and 1.","474a3a5d":"# **TRAINING AND PREDICTION**","7c380491":"# **SPLITING GIVEN  DATA TO TEST AND TRAINING DATA**","4b4f7ab0":"# **CHECKING NULL VALUES**"}}