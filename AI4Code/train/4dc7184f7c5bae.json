{"cell_type":{"e9f52623":"code","3ba2cfc7":"code","732b3b0d":"code","5e3cbcd5":"code","c706fee0":"code","82b718be":"code","d0054d9d":"code","6e4e378f":"code","7cdf86a5":"markdown","12a26c96":"markdown","6c8254cf":"markdown"},"source":{"e9f52623":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt \nfrom multiprocessing import Pool","3ba2cfc7":"def get_data():\n    print('Reading data')\n    data = pd.read_csv('..\/input\/train.csv')\n    test = pd.read_csv('..\/input\/test.csv')\n    \n    print('Train shape ', data.shape, ' Test shape ', test.shape)\n    return data, test","732b3b0d":"data, test = get_data()\n\ndel data['ID']\n\n# Log space all, including target. LR won't work in the skewed raw space\ndata = np.log1p(data)\ntarget = data.target.values\ndel data['target']\n\nsub = test[['ID']].copy()\ndel test['ID']","5e3cbcd5":"# True. Target is nonzero values. Data is indices of nonzero features...\ntv = data.values\n\ndef min_it(lindex, return_data=False):\n    lr = LinearRegression(n_jobs=1)\n    \n    preds  = np.zeros(tv.shape[0])\n    errors = np.ones(tv.shape[0])\n    for i in range(tv.shape[0]):\n        nzv = tv[i]\n        indices = np.array(np.nonzero(nzv > 0) [0]).reshape(-1,1)\n        nzv     = nzv[nzv>0]\n\n        # predict next value in time series?\n        # what should be index? len(nzv)? len(dset)? something else?\n        # last_index = np.array([nzv.shape[0]]*2).reshape(-1,1)\n        # last_index = np.array([data.shape[1]\/\/2 + nzv.shape[0]*4 ]).reshape(-1,1)\n        last_index = np.array([lindex]).reshape(-1,1)\n\n        if nzv.shape[0] == 0:\n            #contigency -- use mean or something else. just put 0\n            preds[i] = np.mean(nzv)\n            print('WTX')\n            continue\n\n        lr.fit(indices,nzv)\n        pred      = lr.predict(last_index)\n        preds[i]  = pred[0]\n        errors[i] = mean_squared_error([target[i]], pred) ** .5\n\n    score = mean_squared_error(target, preds) ** .5\n    return score, preds, errors","c706fee0":"# # If you want to run the full thing... don't try in kaggle kernel:\n# pool    = Pool(processes=11) #12 core\n# results = pool.map(min_it, range(1,data.shape[1]*2))","82b718be":"score, preds, errors = min_it(data.shape[1]\/\/2, return_data=True)","d0054d9d":"'RMSLE', score","6e4e378f":"errors[:100]","7cdf86a5":"**TODO**\n\n* Brute force the opimal avg index to use for prediction\n* Investigate train[:100] independently, and find the optimal index. Is there a way to predict the optimal index to use for target prediction using the non-zero indices, row stats, or non-zero values directly?\n* Investigate if dropping std()==0 columns improves scores, as this would affect the column indices.\n* Add predicted LR score, and LR-Confidence, trained using BLL or Regression, to current best scoring model (1.37) and evaluate\n* Explore introducing, for example, [:100] non-zero indices as inputs into GBDT models...","12a26c96":"@sggpls had mentioned he was able to get 1.5x CV using [LR traned row-wise](https:\/\/www.kaggle.com\/c\/santander-value-prediction-challenge\/discussion\/61189#357214). That seemed worth investigating, perhaps we can featurize it and throw it into our model. Currently, our models only use the train values and stats. Sergey's LR used the indices of the non-zero values. Let's give it a shot.","6c8254cf":"The min result after running the optimization was **1.6595739169729133**. That can't possible be the best we can perform. For sure, the number of non-zeros must play a role. I know because I scored 1.6586905090389363 CV by using the row dependent formula `data.shape[1]\/\/2 + nzv.shape[0]*4`.\n\nBy changing the formula in the method to: `last_index = np.array([lindex + nzv.shape[0]*4 ]).reshape(-1,1)`\n\nAnd re-running the optimization again for `results = pool.map(min_it, range(2000,3000))`,\n\nThe following chart is produced:\n\n![Opt](https:\/\/image.ibb.co\/d9ojmy\/download.png)\n\n514+2000 being passed in produces the minimal value of 1.658632 RMSLE."}}