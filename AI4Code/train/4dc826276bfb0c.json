{"cell_type":{"868dfe74":"code","dce175f3":"code","9112a988":"code","73638762":"code","f9bda46f":"code","82a46eb4":"code","bcdc5f70":"code","3304aa0d":"code","7e266193":"code","f38d0121":"code","d6a488ef":"code","f4a51707":"markdown","51916e48":"markdown","64badd6e":"markdown"},"source":{"868dfe74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dce175f3":"import pydicom\n\nimport sys\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\nfrom matplotlib import patches as patches\nimport glob\nsys.path.insert(0, '..\/input')","9112a988":"from mask_functions import rle2mask","73638762":"print(os.listdir(\"..\/input\/sample images\"))","f9bda46f":"def showDicomTags(dataset):\n    return dataset.dir()\n","82a46eb4":"for file_path in glob.glob('..\/input\/sample images\/*.dcm'):\n    dataset = pydicom.dcmread(file_path)\n    tags=showDicomTags(dataset)\n    print(type(tags))\n    print(tags)\n    \n    break\n    ","bcdc5f70":"IMAGE_PATH = '..\/input\/sample images\/'\nIMAGE_MEDIA_TYPE = '.dcm'\nIMAGE_SIZE = 1024\ntrain_rle_sample = pd.read_csv(IMAGE_PATH + 'train-rle-sample.csv', header=None, index_col=0)","3304aa0d":"def show_dicom_info(dataset):\n    listTags=list(showDicomTags(dataset))\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(display_name)\n    print(dataset.AccessionNumber)\n    print(dataset.BitsAllocated)\n    print(dataset.BitsStored)\n    print(dataset.BodyPartExamined)\n    print(dataset.Columns)\n    print(dataset.ConversionType)\n    print(dataset.HighBit)\n    print(dataset.InstanceNumber)\n    print(dataset.LossyImageCompression)\n    print(dataset.LossyImageCompressionMethod)\n    print(dataset.Modality)\n    print(dataset.PatientAge)\n    print(dataset.PatientBirthDate)\n    print(dataset.PatientID)\n    print(dataset.PatientName)\n    print(dataset.PatientOrientation)\n    print(dataset.PatientSex)\n    print(dataset.PhotometricInterpretation)\n    #print(dataset.PixelData)\n    print(dataset.PixelRepresentation)\n    print(dataset.PixelSpacing)\n    print(dataset.ReferringPhysicianName)\n    print(dataset.Rows)\n    print(dataset.SOPClassUID)\n    print(dataset.SOPInstanceUID)\n    print(dataset.SamplesPerPixel)\n    print(dataset.SeriesDescription)\n    print(dataset.SeriesInstanceUID)\n    print(dataset.SeriesNumber)\n    print(dataset.SpecificCharacterSet)\n    print(dataset.StudyDate)\n    print(dataset.StudyID)\n    print(dataset.StudyInstanceUID)\n    print(dataset.StudyTime)\n    print(dataset.ViewPosition)\n\n\n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n\ndef plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()\ndef plot_with_mask_and_bbox(dataset, mask_encoded, figsize=(20,10)):\n    mask_decoded = rle2mask(mask_encoded, 1024, 1024).T\n    fig, ax = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(20,10))\n    rmin, rmax, cmin, cmax = bounding_box(mask_decoded)\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[0].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[0].imshow(mask_decoded, alpha=0.3, cmap=\"Reds\")\n    ax[0].add_patch(patch)\n    ax[0].set_title('With Mask')\n\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[1].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[1].add_patch(patch)\n    ax[1].set_title('Without Mask')\n    plt.show()\ndef show_dcm_info(dataset, image_name):\n    print(\"Image............:\", image_name)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n    print(\"View Position.......:\", dataset.ViewPosition)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)\ndef bounding_box(img):\n    rows = np.any(img, axis=1)\n    cols = np.any(img, axis=0)\n    rmin, rmax = np.where(rows)[0][[0, -1]]\n    cmin, cmax = np.where(cols)[0][[0, -1]]\n\n    return rmin, rmax, cmin, cmax\ndef show_image(image_name):\n    dataset = pydicom.dcmread(IMAGE_PATH + image_name + IMAGE_MEDIA_TYPE)\n    show_dcm_info(dataset, image_name)\n    \n    mask_encoded = train_rle_sample.loc[image_name].values[0]\n    if mask_encoded == '-1':    \n        plot_pixel_array(dataset)\n    else:\n        plot_with_mask_and_bbox(dataset, mask_encoded)\n","7e266193":"for file_path in glob.glob('..\/input\/sample images\/*.dcm'):\n    dataset = pydicom.dcmread(file_path)\n    show_dicom_info(dataset)\n    break\n    \n    ","f38d0121":"for file_path in glob.glob('..\/input\/sample images\/*.dcm')[0:3]:\n    dataset = pydicom.dcmread(file_path)\n    #show_dicom_info(dataset)\n    plot_pixel_array(dataset)\n    \n    \n","d6a488ef":"show_image('1.2.276.0.7230010.3.1.4.8323329.4982.1517875185.837576')","f4a51707":"## What is Dicom?\n\nDigital Imaging and Communications in Medicine (DICOM) is the standard for the communication and management of medical imaging information and related data. DICOM is most commonly used for storing and transmitting medical images enabling the integration of medical imaging devices such as scanners, servers, workstations, printers, network hardware, and picture archiving and communication systems (PACS) from multiple manufacturers.\nRead more on [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/DICOM)\n\n## Lets dicover Pydicom\n\nPydicom is a pure Python package for working with DICOM files such as medical images, reports, and radiotherapy objects.\n\nPydicom makes it easy to read these complex files into natural pythonic structures for easy manipulation. Modified datasets can be written again to DICOM format files.\n\n\n\nMore documentation at [Pydicom](https:\/\/pydicom.github.io\/)\n\n\n","51916e48":"Function for DICOm parameters","64badd6e":"Looking at DICOm information"}}