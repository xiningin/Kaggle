{"cell_type":{"24de85ae":"code","815c817d":"code","5dc0aff9":"code","d7efc1ee":"code","7a9f4e53":"code","3b942065":"code","514050ff":"code","99398e72":"code","30efcf57":"code","45346d2a":"code","e9393376":"code","64ef1e6b":"code","803e23e1":"code","b7c5f6ef":"code","ce9b1770":"code","9e49e762":"code","fb38d5c2":"code","590de848":"code","046691b0":"code","964709bf":"code","00943fb2":"code","3526cfbe":"code","cf42242b":"code","12b330db":"code","eddb6773":"code","977540ed":"code","b9d356d9":"code","e4694309":"code","7f0579ab":"code","0633185c":"code","9e5e42ba":"code","2766d2c1":"code","ce7525f8":"code","580bedf1":"code","17901c12":"code","d3f015cf":"code","4b63f69b":"code","d90427c6":"code","14fdc414":"code","684ff5c6":"code","c051c022":"code","939007f2":"code","bb9f63f5":"code","5dd97db2":"code","0b619633":"code","359fe869":"code","68b41b8f":"code","733b4c2b":"code","0cd161b6":"code","7de09be3":"code","eb160c2b":"code","5b437f6f":"code","9daa8845":"code","ac2c816b":"code","c9a1680e":"code","58f04eb7":"code","60058e8f":"code","26a7babc":"code","d8f26128":"code","aac38ada":"code","20d974ba":"code","e197125e":"code","94201a02":"code","32609e20":"code","8eea0b0f":"code","b9afc09b":"code","a746db89":"code","fc6e7e32":"code","8b8b7878":"code","e7d61faa":"code","2b196489":"code","466ae14a":"code","50076b1c":"code","6ec8571c":"code","929c23d6":"code","48f13b40":"code","d6d00a08":"code","4ad65634":"code","5a28675c":"code","99905548":"code","548bf620":"code","ca0ffca4":"code","0f7a8d69":"code","7cb05235":"code","58556239":"code","1bb8a8ca":"code","b04a897b":"markdown","70a3c168":"markdown","f6a12c37":"markdown","786768b5":"markdown","38bd2949":"markdown","fcdfff13":"markdown","919f43b5":"markdown","64f0827a":"markdown","7a742278":"markdown"},"source":{"24de85ae":"import cudf\n\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\ntrain","815c817d":"import seaborn as sns \nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import *","5dc0aff9":"train.tail(3)","d7efc1ee":"test.tail(3)","7a9f4e53":"sample_submission.tail(3)","3b942065":"type(train)","514050ff":"type(train.to_pandas())","99398e72":"train.to_pandas()","30efcf57":"train[['id', 'cat0', 'cat8', 'cont7']].to_pandas()","45346d2a":"type(train.to_pandas())","e9393376":"y = train.target\n\ny.to_pandas()","64ef1e6b":"type(y.to_pandas())","803e23e1":"train.describe()","b7c5f6ef":"train.shape","ce9b1770":"train.describe(exclude =\"number\")","9e49e762":"# pair plot for all the data \nsns.pairplot(data=train.sample(1000).to_pandas()).set(title=\"Distribution Of Data\");","fb38d5c2":"# Show the distibution of all data by target\nsns.displot(train.to_pandas().target).set(title='Distripution of Target');\nplt.show();","590de848":"# Show all the data by using BoxPlot \nplt.figure(figsize=(12,8))\nsns.boxplot(data=train.to_pandas()).set(title=\"Box Plot Of Data\")","046691b0":"#Distripution of Target To Check Outliers\nplt.figure(figsize=(12,8))\nsns.boxplot(train.to_pandas().target).set(title='Distripution of Target (Outliers)');","964709bf":"t1=train.loc[train['target'] > 10].to_pandas()\nt1","00943fb2":"t2=train.loc[train['target'] < 5 ].to_pandas()\nt2","3526cfbe":"train.drop(t1.index,inplace=True)","cf42242b":"train.drop(t2.index,inplace=True)","12b330db":"plt.figure(figsize=(12,8))\nsns.boxplot(train.to_pandas().cont8).set(title='Distripution of Target (Outliers)');","eddb6773":"t3=train.loc[train['cont8'] > 0.9].to_pandas()\nt3","977540ed":"train.drop(t3.index,inplace=True)","b9d356d9":"plt.figure(figsize=(12,8))\nsns.boxplot(train.to_pandas().cont8).set(title='Distripution of Target (Outliers)');","e4694309":"t4=train.loc[train['cont8'] > 0.8].to_pandas()\n","7f0579ab":"t44=train.loc[train['cont8'] < 0.0].to_pandas()\n","0633185c":"train.drop(t4.index,inplace=True)","9e5e42ba":"train.drop(t44.index,inplace=True)","2766d2c1":"plt.figure(figsize=(12,8))\nsns.boxplot(train.to_pandas().cont8).set(title='Distripution of Target (Outliers)');","ce7525f8":"train = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntrain","580bedf1":"train.columns","17901c12":"train.info()","d3f015cf":"cat_col = [col for col in train.columns if train[col].dtype=='O']\ncat_col","4b63f69b":"categorical = train[cat_col]","d90427c6":"categorical_dum = cudf.get_dummies(categorical)\ncategorical_dum","14fdc414":"df_new = cudf.concat(\n    [train,\n     categorical_dum],\n      axis=1)\ndf_new","684ff5c6":"cat_col = [col for col in df_new.columns if df_new[col].dtype=='O']\ndf_new = df_new.drop(cat_col, axis = 1)","c051c022":"df_new","939007f2":"df_new.drop(['id'],inplace=True,axis=1)","bb9f63f5":"df_new.columns","5dd97db2":"from cuml.preprocessing import train_test_split\n\nX = df_new.drop('target',axis=1)\ny = df_new.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n","0b619633":"import numpy as np\n\n\ndef baseline_model(n_preds, pred):\n    # just predict the average\n    return cudf.Series([pred for n in range(n_preds)])\n\n# make baseline preds\nbaseline_preds = baseline_model(len(y_test), np.mean(y_train))\nbaseline_preds","359fe869":"from cuml.metrics import mean_squared_error\n\nmean_squared_error(y_true=y_test,\n                   y_pred=baseline_preds,\n                   squared=False)","68b41b8f":"from cuml.metrics import mean_absolute_error\n\nmean_absolute_error(y_true=y_test,\n                   y_pred=baseline_preds)","733b4c2b":"from sklearn.ensemble import RandomForestRegressor\nregr = RandomForestRegressor(max_depth=2, random_state=0)","0cd161b6":"# fit the model\nregr.fit(X_train.to_pandas(), y_train.to_pandas())","7de09be3":"preds = regr.predict(X_test.to_pandas())","eb160c2b":"preds[:-5]","5b437f6f":"from cuml.metrics import mean_squared_error\n\nmean_squared_error(y_true=y_test,\n                   y_pred=preds,\n                   squared=False)","9daa8845":"mean_absolute_error(y_true=y_test,\n                   y_pred=preds)","ac2c816b":"from cuml.linear_model import LinearRegression\n\nlr = LinearRegression()","c9a1680e":"lr.fit(X_train, y_train)","58f04eb7":"simple_preds = lr.predict(X_test)\n\nsimple_preds.tail(5)\n","60058e8f":"mean_squared_error(y_true=y_test,\n                   y_pred=simple_preds,\n                   squared=False)","26a7babc":"mean_absolute_error(y_true=y_test,\n                   y_pred=simple_preds)","d8f26128":"from sklearn.model_selection import GridSearchCV\n\np_grid = {'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n\n}\n\ngrid = GridSearchCV(regr, p_grid, cv=7)\n\n","aac38ada":"grid.fit(X_train, y_train)\n","20d974ba":"grid.best_params_","e197125e":"regr = RandomForestRegressor(random_state=0,\n                             max_features='auto', \n                             n_estimators= 200, \n                             max_depth=8, \n )","94201a02":"regr.fit(X_train.to_pandas(), y_train.to_pandas())","32609e20":"preds = regr.predict(X_test.to_pandas())","8eea0b0f":"\nmean_squared_error(y_true=y_test,\n                   y_pred=preds,\n                   squared=False)","b9afc09b":"mean_absolute_error(y_true=y_test,\n                   y_pred=preds)","a746db89":"\nparam_grid = {'fit_intercept':[True, False],\n              'normalize':[True,False] }\n                      \n\n\ngrid = GridSearchCV(lr, param_grid, cv=7)\n\n","fc6e7e32":"grid.fit(X_train, y_train)","8b8b7878":"grid.best_params_","e7d61faa":"lr = LinearRegression(fit_intercept= True, normalize= True)","2b196489":"lr.fit(X_train, y_train)","466ae14a":"sample_preds = lr.predict(X_test)","50076b1c":"mean_squared_error(y_true=y_test,\n                   y_pred=sample_preds,\n                   squared=False)","6ec8571c":"mean_absolute_error(y_true=y_test,\n                   y_pred=sample_preds)","929c23d6":"test.isnull().sum()","48f13b40":"test.drop('id',axis=1,inplace=True)","d6d00a08":"cat_col = [col for col in test.columns if train[col].dtype=='O']\ncat_col","4ad65634":"categorical = test[cat_col]","5a28675c":"categorical_dum = cudf.get_dummies(categorical)\ncategorical_dum","99905548":"new_test= cudf.concat(\n    [test,\n     categorical_dum],\n      axis=1)\nnew_test","548bf620":"cat_col = [col for col in new_test.columns if new_test[col].dtype=='O']\ncat_col","ca0ffca4":"new_test= new_test.drop(cat_col, axis = 1)","0f7a8d69":"new_test","7cb05235":"new_test['cat6_G'] = 0","58556239":"test_preds = lr.predict(new_test)\ntest_preds","1bb8a8ca":"simple_preds = lr.predict(new_test)\n\n# save results & submit\nsample_submission['target'] = simple_preds\n\nsample_submission.to_csv('submission.csv', index=False)","b04a897b":"# TPS Feb 2021\nStarter Notebook\n\n## Deleverables\n1. EDA\n    - What's going on?\n    - Show me the data...\n2. Model\n    - Baseline...\n    - Simple...\n    - Evaluation...\n    - Improvement...\n3. RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with cuDF & sklearn with cuML\n    \n    \n#### Troubleshooting\n- [Data](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/data)\n- [Overview](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/overview)\n- [RF Starter Notebook](https:\/\/www.kaggle.com\/warobson\/tps-feb-2021-rf-starter)\n- [ML repo on GitHub](https:\/\/github.com\/gumdropsteve\/intro_to_machine_learning)\n- [Most simple RAPIDS Notebook submission](https:\/\/www.kaggle.com\/warobson\/simple-rapids-live) (Has stuff like `train_test_split()` with cuml..)\n    \n#### Load Data","70a3c168":"**Optimization**","f6a12c37":"Linear Regression","786768b5":"# Model ","38bd2949":"# EDA","fcdfff13":"**Check for Iutliers And Drop it**","919f43b5":"**We Tried To Clean The Data ,But We Didn't For The Lack of Information About The Data**","64f0827a":"### Notes\n1. To use sklearn with cudf... convert `cudf.Series` \/ `cudf.DataFrame` `.to_pandas()`..\n2. Using cudf is the same as using pandas but `cudf` instead of `pd`..","7a742278":"Random Foriest"}}