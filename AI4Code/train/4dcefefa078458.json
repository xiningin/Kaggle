{"cell_type":{"9793a95d":"code","44ab4f1e":"code","2f37e773":"code","bc64013c":"code","1e9ae53f":"code","09a6349d":"code","a2e607b4":"code","f3800e28":"code","8b53c431":"code","12596bf4":"code","393289be":"code","ecf5b694":"code","c111594a":"code","6fda0582":"code","27740ac5":"code","61553039":"code","592bc154":"code","7cb29fe5":"code","e877f167":"code","7882046d":"code","0438e326":"code","31b9ae24":"code","9e34ec8e":"code","fff22860":"markdown","c6f56705":"markdown","9779e53e":"markdown","e6b415e0":"markdown","4b2868d1":"markdown","06051c8e":"markdown","70eee75f":"markdown","b2fdcf5b":"markdown","8d776b27":"markdown","6152a825":"markdown","20dabb16":"markdown","6e5275e4":"markdown","18a10bd0":"markdown","b7beb107":"markdown","28e913cd":"markdown","c28b5a88":"markdown","c5cede31":"markdown"},"source":{"9793a95d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","44ab4f1e":"column_names = ['user_id', 'item_id', 'rating', 'timestamp']\ndf = pd.read_csv('\/kaggle\/input\/movie-lens-2\/u.data', sep='\\t', names=column_names) #we have a tab seperated data hence we use '\\t' to seperate it","2f37e773":"df.head()","bc64013c":"movie_titles = pd.read_csv('\/kaggle\/input\/movie-lens-2\/Movie_Id_Titles') #getting the movie titles","1e9ae53f":"movie_titles.head()","09a6349d":"df = pd.merge(df,movie_titles,on='item_id')\ndf.head()","a2e607b4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')","f3800e28":"df.groupby('title')['rating'].mean().sort_values(ascending=False).head()","8b53c431":"df.groupby('title')['rating'].count().sort_values(ascending=False).head()","12596bf4":"ratings = pd.DataFrame(df.groupby('title')['rating'].mean())\nratings.head()","393289be":"ratings['num of ratings'] = pd.DataFrame(df.groupby('title')['rating'].count())\nratings.head()","ecf5b694":"plt.figure(figsize=(10,4))\nratings['num of ratings'].hist(bins=70)","c111594a":"plt.figure(figsize=(10,4))\nratings['rating'].hist(bins=70)","6fda0582":"sns.jointplot(x='rating',y='num of ratings',data=ratings,alpha=0.5)","27740ac5":"moviemat = df.pivot_table(index='user_id',columns='title',values='rating')\nmoviemat.head()","61553039":"ratings.sort_values('num of ratings',ascending=False).head(10)","592bc154":"starwars_user_ratings = moviemat['Star Wars (1977)']\nliarliar_user_ratings = moviemat['Liar Liar (1997)']","7cb29fe5":"similar_to_starwars = moviemat.corrwith(starwars_user_ratings)\nsimilar_to_liarliar = moviemat.corrwith(liarliar_user_ratings)","e877f167":"corr_starwars = pd.DataFrame(similar_to_starwars,columns=['Correlation'])\ncorr_starwars.dropna(inplace=True)\ncorr_starwars.head()","7882046d":"corr_starwars.sort_values('Correlation',ascending=False).head(10)","0438e326":"corr_starwars = corr_starwars.join(ratings['num of ratings'])\ncorr_starwars.head()","31b9ae24":"corr_starwars[corr_starwars['num of ratings']>100].sort_values('Correlation',ascending=False).head()","9e34ec8e":"corr_liarliar = pd.DataFrame(similar_to_liarliar,columns=['Correlation'])\ncorr_liarliar.dropna(inplace=True)\ncorr_liarliar = corr_liarliar.join(ratings['num of ratings'])\ncorr_liarliar[corr_liarliar['num of ratings']>100].sort_values('Correlation',ascending=False).head()","fff22860":"We did this to compare something. It is possible that only a few people saw one of the top rated movies and gave it a 5-star rating but the truly highly rated movies are those that were watched by many and were givem 5-star ratings.","c6f56705":"Lets get the correlation between the two Pandas series","9779e53e":"Lets merge this with our main data frame so that we can easily map the titles and the Item IDs","e6b415e0":"Here we see some movies that have perfect correlation with Star wars. You might have never heard about these before but it still shows the result. It might be due to the fact that there could be  a person who saw Star wars and gave it a 5-star rating and also saw on of these above movies and gave it a 5-star rating","4b2868d1":"Lets also include the number of ratings for each title so that we can get better understanding of user data","06051c8e":"Our result has some Nan Values, so lets get rid of them and convert the series into a data frame","70eee75f":"Lets take a look at some of the results that are not quite satisfactory","b2fdcf5b":"We can see that most of our movies have a very few ratings, this ccan be because of the reason that people tend to watch movies that are more famous and more talked about.","8d776b27":"As you can see this helped us a lot in narrowing down our result as you can see movies that are similar to the Star Wars movie and there some pretty famous name in the above list. Lets do the same thing for Liar Liar which is a movie from the comedy genre","6152a825":"We have the ID of the user who gave the rating to the movie, the movie ID and the timestamp of the movie  where it was rated. Lets  get the Titles for the respective title IDs.","20dabb16":"We have merged both the data frames.Lets Visualize our data.","6e5275e4":"This shows us the relation between our ratings and the number of ratings according to the data","18a10bd0":"We will now take a look at the movie titles with most ratings and the titles that were rated maximum number of times by the viewers.","b7beb107":"We can see tha distribution in the ratings in our data set in the above plot","28e913cd":"Lets grab user ratings for Star wars and Liar Liar","c28b5a88":"We took a look at the number of ratings, so lets filter out our previous results and consider only those movies that have more than 100 reviews.","c5cede31":"And with this final result we have completed our Basic Recommender system that one needs to know before going in deep in the subject of Recommender Systems where we use collaborative filtering and SVD."}}