{"cell_type":{"be2808e9":"code","a47a54bf":"code","a5f1535e":"code","23596335":"code","0016ab80":"code","8ad40486":"code","43e7b761":"code","cdf5f7ba":"code","a772d902":"code","6f310031":"code","fd78f0be":"code","753dec77":"code","2638f690":"code","24eb38de":"markdown"},"source":{"be2808e9":"import pandas as pd\nimport numpy as np","a47a54bf":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')","a5f1535e":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","23596335":"train = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","0016ab80":"import gc\ngc.collect()","8ad40486":"pip install autogluon","43e7b761":"from autogluon.tabular import TabularDataset, TabularPredictor","cdf5f7ba":"train_data = TabularDataset(train).drop('Id', axis=1)\ntrain_data.head()\n","a772d902":"test_data = TabularDataset(test).drop('Id', axis=1)\ntest_data.head()\n","6f310031":"metric = 'accuracy'\ntime=1*3600\npredictor = TabularPredictor(label='Cover_Type', eval_metric=metric).fit(\n    train_data= train_data, time_limit=time, \n    ag_args_fit={'num_gpus': 1},\n    presets='best_quality', verbosity=2)\npredictor.leaderboard(train_data, silent=True)\n","fd78f0be":"results = predictor.fit_summary()","753dec77":"y_pred = predictor.predict(test_data)\ny_pred.head(5)","2638f690":"submission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nsubmission.Cover_Type = y_pred\nsubmission.to_csv('submission.csv', index=False)","24eb38de":"refer to https:\/\/www.kaggle.com\/antonellomartiello\/tps09-autogluon"}}