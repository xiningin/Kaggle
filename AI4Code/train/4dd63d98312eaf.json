{"cell_type":{"8b2846ad":"code","7bf9d71c":"code","5f352963":"code","34087dda":"code","6ad0876a":"code","0179c279":"code","344c9d47":"code","e67bae35":"code","349ca5b8":"code","0f08f426":"code","ac56d756":"code","aef56fc3":"code","d243465a":"code","b3cc857c":"code","3a8c8a23":"code","ebb84c66":"code","8f65d86a":"code","0175a637":"code","0addf8c7":"code","408c2d99":"code","c27ae9c0":"code","ce2978dc":"code","48f49d47":"code","098c9fd6":"code","56a7ca5d":"code","60cd823e":"code","4f955410":"code","511cdbf4":"code","f741fe6e":"code","bb5b3458":"code","20ab434e":"code","2efcfe51":"code","4e968cd7":"code","a97e1811":"code","496b8ccc":"code","fd2aaa6d":"code","b2631471":"code","e1ed2628":"code","4f80a40b":"code","95cd6916":"code","1250284c":"code","7f198a17":"code","79f3509c":"code","6e89427c":"code","8bf8cff9":"code","b3c34c16":"code","76031fb3":"code","a6e93e4d":"code","3b840b0a":"code","f3dab166":"code","4c1bf14a":"code","63793154":"code","685c5a2c":"code","0d901752":"code","ee744f89":"code","044a3aec":"code","51cfd447":"code","95c5c7ec":"code","872de06f":"code","9b834157":"markdown","5f7604bb":"markdown","25443dd6":"markdown","f1e008c2":"markdown","29e7ffc0":"markdown","7c99bc15":"markdown","2b77a3f3":"markdown","c1e137b3":"markdown","989467b7":"markdown","fb325789":"markdown","e2d06a2c":"markdown","616ba749":"markdown","e87e8094":"markdown","4e9b2dcb":"markdown","105780f3":"markdown","fba88490":"markdown","be71c39e":"markdown","d816dd7c":"markdown","483c6e56":"markdown","f75fc194":"markdown","303a6541":"markdown","6c693f9e":"markdown","3ed2aa73":"markdown","07604f3d":"markdown","3420398b":"markdown","c5b3a2ba":"markdown","aa38c63f":"markdown","ca3ec5c6":"markdown","4f246fdd":"markdown","9dfda442":"markdown","d502a461":"markdown"},"source":{"8b2846ad":"# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport folium","7bf9d71c":"conf_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecv_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","5f352963":"conf_df.head()","34087dda":"dates = ['1\/22\/20', '1\/23\/20', '1\/24\/20', '1\/25\/20', '1\/26\/20', '1\/27\/20', '1\/28\/20', \n         '1\/29\/20', '1\/30\/20', '1\/31\/20', '2\/1\/20', '2\/2\/20', '2\/3\/20', '2\/4\/20', \n         '2\/5\/20', '2\/6\/20', '2\/7\/20', '2\/8\/20', '2\/9\/20', '2\/10\/20', '2\/11\/20', '2\/12\/20', \n         '2\/13\/20', '2\/14\/20', '2\/15\/20', '2\/16\/20', '2\/17\/20', '2\/18\/20', '2\/19\/20',\n         '2\/20\/20','2\/21\/20','2\/22\/20','2\/23\/20','2\/24\/20','2\/25\/20','2\/26\/20',\n'2\/27\/20','2\/28\/20','2\/29\/20','3\/1\/20','3\/2\/20','3\/3\/20','3\/4\/20','3\/5\/20','3\/6\/20',\n'3\/7\/20','3\/8\/20','3\/9\/20','3\/10\/20','3\/11\/20','3\/12\/20','3\/13\/20','3\/14\/20','3\/15\/20',\n'3\/16\/20','3\/17\/20','3\/18\/20','3\/19\/20','3\/20\/20','3\/21\/20','3\/22\/20','3\/23\/20','3\/24\/20','3\/25\/20','3\/26\/20']\n\nconf_df_long = conf_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Confirmed')\n\ndeaths_df_long = deaths_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Deaths')\n\nrecv_df_long = recv_df.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], \n                            value_vars=dates, var_name='Date', value_name='Recovered')\n\nfull_table = pd.concat([conf_df_long, deaths_df_long['Deaths'], recv_df_long['Recovered']], \n                       axis=1, sort=False)\nfull_table.head()","6ad0876a":"# converting to proper data format\nfull_table['Date'] = pd.to_datetime(full_table['Date'])\nfull_table['Recovered'] = full_table['Recovered'].astype('float')\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values with 0 in columns ('Confirmed', 'Deaths', 'Recovered')\nfull_table[['Confirmed', 'Deaths', 'Recovered']] = full_table[['Confirmed', 'Deaths', 'Recovered']].fillna(0)\nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('NA')\n\n# cases in the Diamond Princess cruise ship\nship = full_table[full_table['Province\/State']=='Diamond Princess cruise ship']\n\n# full table\nfull_table = full_table[full_table['Province\/State']!='Diamond Princess cruise ship']\nfull_table.head()","0179c279":"# derived dataframes\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()","344c9d47":"temp = full_latest.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max()\ntemp.style.background_gradient(cmap='Pastel1_r')","e67bae35":"temp_f = full_latest_grouped[['Country\/Region', 'Confirmed']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.head(10).style.background_gradient(cmap='Pastel1_r')","349ca5b8":"temp_flg = full_latest_grouped[['Country\/Region', 'Deaths']]\ntemp_flg = temp_flg.sort_values(by='Deaths', ascending=False)\ntemp_flg = temp_flg.reset_index(drop=True)\ntemp_flg = temp_flg[temp_flg['Deaths']>0]\ntemp_flg.style.background_gradient(cmap='Pastel1_r')","0f08f426":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","ac56d756":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n#Step 3: Creating a consolidated table , which gives the country wise total defined cases\n\ntemp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","aef56fc3":"fig.update_traces?","d243465a":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             height=500, width=1000, text='Count', title='Hubei - China - World', \n             color_discrete_sequence= ['#EF553B', '#00CC96', '#636EFA'])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","b3cc857c":"# Reading the dataset\ndata= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata.head()","3a8c8a23":"# Let's look at the various columns\ndata.info()","ebb84c66":"data.describe()","8f65d86a":"# Convert Last Update column to datetime64 format\n\ndata['ObservationDate'] = data['ObservationDate'].apply(pd.to_datetime)\ndata.drop(['SNo'],axis=1,inplace=True)\n\n#Set Date column as the index column.\n#data.set_index('Last Update', inplace=True)\ndata.head()","0175a637":"countries = data['Country\/Region'].unique().tolist()\nprint(countries)\n\nprint(\"\\nTotal countries affected by virus: \",len(countries))","0addf8c7":"#Combining China and Mainland China cases\n\ndata['Country\/Region'].replace({'Mainland China':'China'},inplace=True)\ncountries = data['Country\/Region'].unique().tolist()\nprint(countries)\nprint(\"\\nTotal countries affected by virus: \",len(countries))","408c2d99":"# Creating a dataframe with total no of confirmed cases for every country\nNumber_of_countries = len(data['Country\/Region'].value_counts())\n\n\ncases = pd.DataFrame(data.groupby('Country\/Region')['Confirmed'].sum())\ncases['Country\/Region'] = cases.index\ncases.index=np.arange(1,Number_of_countries+1)\n\nglobal_cases = cases[['Country\/Region','Confirmed']]\n#global_cases.sort_values(by=['Confirmed'],ascending=False)\nglobal_cases","c27ae9c0":"#Mainland China\nChina = data[data['Country\/Region']=='China']\nChina","ce2978dc":"##Let's look at the Confirmed vs Recovered figures of Provinces of China other than Hubei\nf, ax = plt.subplots(figsize=(16, 12))\n\nsns.set_color_codes(\"dark\")\nsns.barplot(x=\"Confirmed\", y=\"Province\/State\", data=China[1:],\n            label=\"Confirmed\", color=\"r\")\n\nsns.set_color_codes(\"deep\")\nsns.barplot(x=\"Recovered\", y=\"Province\/State\", data=China[1:],\n            label=\"Recovered\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 400), ylabel=\"\",\n       xlabel=\"Stats\")\nsns.despine(left=True, bottom=True)","48f49d47":"#Get Correlation between different variables\ncorr = data.corr(method='kendall')\nplt.figure(figsize=(18,12))\nsns.heatmap(corr, annot=True)","098c9fd6":"'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace","56a7ca5d":"data.head()","60cd823e":"'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook","4f955410":"py.iplot([pie_plot(data['Province\/State'].value_counts(), ['cyan', 'gold'], 'State')])","511cdbf4":"py.iplot([pie_plot(data['Country\/Region'].value_counts(), ['cyan', 'gold'], 'Country')])","f741fe6e":"py.iplot([pie_plot(data['Confirmed'].value_counts(), ['cyan', 'gold'], 'Confirmed')])","bb5b3458":"py.iplot([pie_plot(data['Deaths'].value_counts(), ['cyan', 'gold'], 'Deaths')])","20ab434e":"py.iplot([pie_plot(data['Recovered'].value_counts(), ['cyan', 'gold'], 'Recovered')])","2efcfe51":"# Location\nsns.countplot(data['Country\/Region'])\nsns.countplot(data['Country\/Region']).set_xticklabels(sns.countplot(data['Country\/Region']).get_xticklabels(), rotation=90, ha=\"right\")\nfig = plt.gcf()\nfig.set_size_inches(23,8)\nplt.title('Location')","4e968cd7":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')","a97e1811":"from datetime import date\ndata['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\n#fig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.9)\ndata1 = [trace1];\nlayout = dict(title = '<b>Confirmed<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 10,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data1, layout = layout)\niplot(fig)","496b8ccc":"trace2 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.9)\ndata2 = [trace2];\nlayout = dict(title = '<b>Deaths<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data2, layout = layout)\niplot(fig)\n","fd2aaa6d":"trace3 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.9)\ndata3 = [trace3];\nlayout = dict(title = '<b>Recovered<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data3, layout = layout)\niplot(fig)","b2631471":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')","e1ed2628":"data['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\n\nchina_data = spread[spread['Country\/Region']=='China']\ndate_con_ch = china_data.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()","4f80a40b":"spread","95cd6916":"china_data","1250284c":"date_con_ch","7f198a17":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')","79f3509c":"data['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\n#fig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\ntrace4 = go.Scatter(\n                x=date_con_ch['ObservationDate'],\n                y=date_con_ch['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ndata4 = [trace4];\nlayout = dict(title = '<b>Confirmed<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 10,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data4, layout = layout)\niplot(fig)","6e89427c":"trace5 = go.Scatter(\n                x=date_con_ch['ObservationDate'],\n                y=date_con_ch['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\ndata5 = [trace5];\nlayout = dict(title = '<b>Recovered<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data5, layout = layout)\niplot(fig)\n","8bf8cff9":"trace6 = go.Scatter(\n                x=date_con_ch['ObservationDate'],\n                y=date_con_ch['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\ndata6 = [trace6];\nlayout = dict(title = '<b>Recovered<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data6, layout = layout)\niplot(fig)\n","b3c34c16":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')","76031fb3":"data['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\n\nitaly_data = spread[spread['Country\/Region']=='Italy']\ndate_con_ch1 = italy_data.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()","a6e93e4d":"italy_data","3b840b0a":"date_con_ch1","f3dab166":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')","4c1bf14a":"data['ObservationDate'] = data['ObservationDate'].dt.date\n#spread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\n#spread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\n#fig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\ntrace7 = go.Scatter(\n                x=date_con_ch1['ObservationDate'],\n                y=date_con_ch1['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ndata7 = [trace7];\nlayout = dict(title = '<b>Confirmed<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 10,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data7, layout = layout)\niplot(fig)","63793154":"trace8 = go.Scatter(\n                x=date_con_ch1['ObservationDate'],\n                y=date_con_ch1['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\ndata8 = [trace8];\nlayout = dict(title = '<b>Deaths<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data8, layout = layout)\niplot(fig)\n","685c5a2c":"trace9 = go.Scatter(\n                x=date_con_ch1['ObservationDate'],\n                y=date_con_ch1['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\ndata9 = [trace9];\nlayout = dict(title = '<b>Recovered<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data9, layout = layout)\niplot(fig)","0d901752":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')\ndata['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\n\nus_data = spread[spread['Country\/Region']=='US']\ndate_con_ch2 = us_data.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()","ee744f89":"us_data","044a3aec":"date_con_ch2","51cfd447":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate'], errors='coerce')\ndata['ObservationDate'] = data['ObservationDate'].dt.date\n#spread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\n#spread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\n#fig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\ntrace10 = go.Scatter(\n                x=date_con_ch2['ObservationDate'],\n                y=date_con_ch2['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ndata10 = [trace10];\nlayout = dict(title = '<b>Confirmed<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 10,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data10, layout = layout)\niplot(fig)","95c5c7ec":"trace11 = go.Scatter(\n                x=date_con_ch2['ObservationDate'],\n                y=date_con_ch2['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\ndata11 = [trace11];\nlayout = dict(title = '<b>Deaths<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data11, layout = layout)\niplot(fig)","872de06f":"trace12 = go.Scatter(\n                x=date_con_ch2['ObservationDate'],\n                y=date_con_ch2['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\ndata12 = [trace12];\nlayout = dict(title = '<b>Recovered<\/b>',\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False),\n              yaxis= dict(title = 'No. of Cases', ticklen=5, zeroline = False)\n             )\nfig = dict(data = data12, layout = layout)\niplot(fig)","9b834157":"## Confirmed Cases","5f7604bb":"### Please follow this repository to follow these project: https:\/\/github.com\/chiragsamal\/CoronaVirus-Outbreak-Analysis","25443dd6":"# EDA","f1e008c2":"## Recovered Cases","29e7ffc0":"## Spread of the Coronavirus Over Time In Italy","7c99bc15":"## Spread of the Coronavirus Over Time In China","2b77a3f3":"## Country","c1e137b3":"# Global Spread of the Coronavirus Over Time ","989467b7":"* Massive number of cases are reported in Mainland China Compared to reset of the world\n* The next few countries are infact are the neighbours of China","fb325789":"## Countries with deaths reported","e2d06a2c":"## A Closer look at China's condition","616ba749":"## Current status worldwide","e87e8094":"## Hubei - China - World","4e9b2dcb":"## Countries which have been affected by the Coronavirus(2019-nCoV)till now","105780f3":"# Data Cleaning and Preprocessing","fba88490":"## Most Recent Stats","be71c39e":"## Spread of the Coronavirus Over Time In USA","d816dd7c":"## Coorelation between different attributes","483c6e56":"## Top 10 Countries with most no. of reported cases","f75fc194":"* There are more recovered cases than deaths at this point of time","303a6541":"## Current Situation","6c693f9e":"## Count of Cases","3ed2aa73":"# Import Dataset","07604f3d":"<h1 align='center'> Corona Virus OutBreak Analyis<\/h1>\n\n","3420398b":"## End of the Notebook","c5b3a2ba":"# Data Wrangling","aa38c63f":"# Import Libraries","ca3ec5c6":"## Death Cases","4f246fdd":"* Outside China, there has been a lot of deaths due to COVID-19 has reported particularly in Italy and Spain","9dfda442":"## State","d502a461":"## Last Update 27th March 2020"}}