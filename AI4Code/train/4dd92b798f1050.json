{"cell_type":{"0205ec64":"code","3fb10ffd":"code","a99dd480":"code","47c35aab":"code","57576f42":"code","de3e5b69":"code","e8234f1b":"code","f301b2f5":"code","d5a8eff1":"code","402efacf":"code","fe205aac":"code","6f51e157":"code","a57a722a":"code","02d437c6":"code","6adcf010":"code","f0aae2df":"code","3652b420":"code","939b6ca4":"code","896d0fcc":"code","4cf2e1c8":"code","d8a2dd9f":"code","e2d689a2":"code","734c8bb1":"code","a038fad2":"code","95725229":"code","2eac3e07":"code","0ef40885":"code","3faa6456":"code","41934c89":"code","051f27d1":"code","31d2dbd2":"code","770a8998":"code","665946e5":"code","b11ec160":"code","64047c8d":"code","48fd6c1b":"code","1f3a22ad":"code","8ca277ce":"code","9ec18007":"code","390f4649":"code","2e6e024e":"code","956f3e4c":"code","5750c6bc":"code","46c52671":"code","b0a92931":"code","ce730d9b":"code","b7d6b267":"code","b81d91d9":"code","e6832372":"code","d476f18d":"code","2950e596":"code","52aea1bf":"code","5874f2b1":"code","16d4b24d":"code","426b7330":"code","554aa027":"code","d00e73ae":"code","36961d9b":"code","735cfbc0":"code","9ca32ff3":"code","f537609c":"code","f4429225":"code","a6d32f7a":"code","4f71fa54":"code","b3ad2f69":"code","de8d90b9":"code","9a9e4ed3":"code","17bf7f22":"code","340f1f17":"code","edc431d4":"code","0484d27e":"code","7ab54731":"code","088331b4":"code","c598f990":"code","52616db9":"code","453a3b69":"code","6c797545":"code","629081a8":"code","21157519":"code","14d49b1a":"code","2169dd8e":"code","1e712dcb":"code","8f2cc05a":"code","582d8e8e":"code","37f56092":"code","66a940f4":"code","d5b089fd":"code","89bd2a88":"code","98c7f036":"code","f33f8a2c":"code","f6392e17":"code","54e62ae2":"code","4be7d865":"code","5bd83e86":"code","d592202a":"code","ed5cd2d2":"code","f27c370e":"code","5950f58c":"code","bfe1b3ec":"code","e256fd1a":"code","0000253e":"code","89cf19fc":"code","46f7587a":"code","6b2281c1":"code","f75f4cab":"code","ce2e4e2f":"code","5cd85d1d":"code","74629ad4":"code","e1b80bf8":"code","1fb507cf":"code","72d8392c":"code","60baeab5":"code","6afd6421":"code","2e5c709a":"code","99748c7e":"code","8be02104":"code","12a8f9a1":"code","827359e9":"code","c422146b":"code","ef394832":"code","e02ddadc":"code","8ea62eff":"code","03c37b98":"code","058de6cd":"code","088a5372":"code","9559caf8":"code","5ee1cd3d":"code","3c746536":"code","4a10ec60":"code","95e05c1d":"markdown","ed8cb19e":"markdown","71c300b2":"markdown","d2a11f59":"markdown","264436c0":"markdown","88ba0d94":"markdown","ff363472":"markdown","d781c79d":"markdown","eab0c0ea":"markdown","cc7bd725":"markdown","2e1e3a4f":"markdown","93f9c788":"markdown","89dc6134":"markdown","758a343a":"markdown","27327dc2":"markdown","6e36c659":"markdown","6a371581":"markdown","d4f07239":"markdown","d4ae6a62":"markdown","ad2dd405":"markdown","676671d9":"markdown","981ba339":"markdown","39c82b37":"markdown","cc41f2b9":"markdown","f2449d4c":"markdown","e265d144":"markdown","29294130":"markdown","03dd3822":"markdown","3d6cf605":"markdown","bd40e15d":"markdown","44e08684":"markdown","c60f879f":"markdown","db43bc2d":"markdown","1bbf14f3":"markdown","a64b38f5":"markdown","ac468943":"markdown","e53882a2":"markdown","3cb96404":"markdown","0e0a92bd":"markdown","d80caf55":"markdown","cc5cf80b":"markdown","55d4a1a3":"markdown","68751591":"markdown","b8382aad":"markdown","cde10a1e":"markdown","bdb67244":"markdown","c0fb1651":"markdown","629ef20e":"markdown","351f4129":"markdown","2a5511b7":"markdown","03a56dcd":"markdown","d7a35540":"markdown","4d7d0842":"markdown","b569904d":"markdown","6ce10c9e":"markdown","ed1509b1":"markdown","81ce2dc3":"markdown","145c6fb0":"markdown","1e4f37df":"markdown","597ee9b0":"markdown","e5e4c844":"markdown","326ad832":"markdown","2cbfaedd":"markdown","940ee4e5":"markdown","02a6db5c":"markdown","7d28b7fe":"markdown","1c81b470":"markdown","57f68a27":"markdown","d2029dd5":"markdown","b537ccca":"markdown","7004b674":"markdown","cd8084a3":"markdown","4d07a34c":"markdown","a2509fc5":"markdown","5dd4f4d2":"markdown"},"source":{"0205ec64":"import sys, os\nsys.path.append('..\/input\/deeplearningfromscratch\/deeplearningfromscratch')  # \u4e3a\u4e86\u5bfc\u5165\u7236\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u800c\u8fdb\u884c\u7684\u8bbe\u5b9a\n\nimport numpy as np\nx= np.array([1.0, 2.0, 3.0])\nprint(x)","3fb10ffd":"type(x)","a99dd480":"# \u4e0b\u9762\u662fNumPy\u6570\u7ec4\u7684\u7b97\u672f\u8fd0\u7b97\u4f8b\u5b50\nx = np.array([1.0, 2.0, 3.0])\ny = np.array([2.0, 3.0, 4.0])\nprint(x + y)\nprint(x - y)\nprint(x * y) # element-wise porduct\nprint(x \/ y)","47c35aab":"x = np.array([1.0, 2.0, 3.0])\nprint(x \/ 2.0)","57576f42":"# NumPy\u7684\u591a\u7ef4\u6570\u7ec4\nA = np.array([[1, 2],[3, 4]])\nprint(A)","de3e5b69":"A.shape","e8234f1b":"A.dtype","f301b2f5":"# \u77e9\u9635\u7684\u7b97\u672f\u8fd0\u7b97\nB = np.array([[3, 0],[0,6]])\nA+B","d5a8eff1":"A*B","402efacf":"print(A)\nA*10","fe205aac":"# \u4e00\u4e2a\u5e7f\u64ad\u7684\u4f8b\u5b50\nA = np.array([[1, 2], [3, 4]])\nB = np.array([10, 20])\nA * B","6f51e157":"# \u8bbf\u95ee\u5143\u7d20\nX = np.array([[51, 55],[14,19],[0,4]])\nprint(X)","a57a722a":"for row in X:\n    print(row)","02d437c6":"# \u4f7f\u7528\u6570\u7ec4\u8bbf\u95ee\u5404\u4e2a\u5143\u7d20\nX = X.flatten() # \u5c06X\u8f6c\u6362\u4e3a\u4e00\u7ef4\u6570\u7ec4\nprint(X)","6adcf010":"X[np.array([0,2,4])] #\u83b7\u53d6\u7d22\u5f15\u4e3a0\u30012\u30014\u7684\u5143\u7d20","f0aae2df":"# \u4eceX\u4e2d\u62bd\u53d6\u5927\u4e8e15\u7684\u5143\u7d20\nX > 15","3652b420":"X[X>15]","939b6ca4":"import numpy as np\nimport matplotlib.pyplot as plt","896d0fcc":"#\u751f\u6210\u6570\u636e\nx = np.arange(0, 6, 0.1) #\u751f\u62100-6\u7684\u6570\u636e\uff0c\u6b65\u957f\u4e3a0.1\ny = np.sin(x)\n#\u7ed8\u5236\u56fe\u50cf\nplt.plot(x,y)\nplt.show()","4cf2e1c8":"# \u5c1d\u8bd5\u8ffd\u52a0cos\u51fd\u6570\u7684\u56fe\u5f62\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528pyplot\u7684\u6dfb\u52a0\u6807\u9898\u548cx\u8f74\u6807\u7b7e\u540d\u7b49\u5176\u4ed6\u529f\u80fd\ny2 = np.cos(x)\n\nplt.plot(x, y, label=\"sin\")\nplt.plot(x, y2, linestyle = \"--\", label=\"cos\")#\u7528\u865a\u7ebf\u7ed8\u5236\nplt.xlabel(\"x\")\nplt.ylabel(\"Y\")\nplt.title('sin & cos')\nplt.legend()\nplt.show()","d8a2dd9f":"from matplotlib.image import imread","e2d689a2":"img = imread('..\/input\/lixiangzhilu\/1.jpg')","734c8bb1":"plt.imshow(img)","a038fad2":"# \u4e0e\u95e8\ndef AND(x1, x2):\n    w1, w2, theta = 0.5, 0.5, 0.7\n    temp = x1*w1 + x2*w2\n    if temp <= theta:\n        return 0\n    elif temp > theta:\n        return 1","95725229":"AND(0, 0)","2eac3e07":"AND(1,0)","0ef40885":"AND(0,1)","3faa6456":"AND(1,1)","41934c89":"# NumPy\u5b9e\u73b0\u611f\u77e5\u673a\u4e0e\u6743\u91cd\u4e0e\u504f\u7f6e\nimport numpy as np\nx = np.array([0, 1])#\u8f93\u5165\nw = np.array([0.5, 0.5])#\u6743\u91cd\nb = -0.7#\u504f\u7f6e\nw*x","051f27d1":"np.sum(w*x)","31d2dbd2":"np.sum(w*x)+b#\u5927\u7ea6\u4e3a-0.2\uff0c\u7531\u4e8e\u6d6e\u70b9\u6570\u5c0f\u6570\u9020\u6210\u8fd0\u7b97\u8bef\u5dee","770a8998":"# \u4f7f\u7528\u6743\u91cd\u548c\u504f\u7f6e\u5b9e\u73b0\u4e0e\u95e8\ndef AND2(x1, x2):\n    x = np.array([x1, x2])#\u8f93\u5165\n    w = np.array([0.5, 0.5])#\u6743\u91cd\n    b = -0.7#\u504f\u7f6e\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1","665946e5":"# \u5b9e\u73b0\u4e0e\u975e\u95e8\ndef NAND2(x1, x2):\n    x = np.array([x1, x2])#\u8f93\u5165\n    w = np.array([-0.5, -0.5])#\u6743\u91cd\n    b = 0.7#\u504f\u7f6e\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1\n# \u5b9e\u73b0\u6216\u95e8\ndef OR2(x1, x2):\n    x = np.array([x1, x2])#\u8f93\u5165\n    w = np.array([0.5, 0.5])#\u6743\u91cd\n    b = -0.2#\u504f\u7f6e\n    tmp = np.sum(w*x) + b\n    if tmp <= 0:\n        return 0\n    else:\n        return 1","b11ec160":"# \u5f02\u6216\u95e8\u7684\u5b9e\u73b0\ndef XOR2(x1, x2):\n    s1 = NAND2(x1, x2)\n    s2 = OR2(x1, x2)\n    y = AND2(s1, s2)\n    return y","64047c8d":"XOR2(0, 0)","48fd6c1b":"XOR2(1, 0)","1f3a22ad":"XOR2(0, 1)","8ca277ce":"XOR2(1,1)","9ec18007":"import numpy as np\nimport matplotlib.pylab as plt\n#\u5b9e\u73b0\u7b80\u5355\u7684\u9636\u8dc3\u51fd\u6570\ndef step_function0(x):\n    if x > 0:\n        return 1\n    else:\n        return 0\n\ndef step_function1(x):\n    y = x >0\n    return y.astype(np.int)\n\ndef step_function(x):\n    return np.array(x > 0, dtype=np.int)\n\nx = np.arange(-5.0, 5.0, 0.1)\ny = step_function(x)\nplt.plot(x, y)\nplt.ylim(-0.1, 1.1) # \u6307\u5b9ay\u8f74\u7684\u8303\u56f4\nplt.show()","390f4649":"#sigmoid\u51fd\u6570\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n\nyy = sigmoid(x)\nplt.plot(x,yy)\nplt.ylim(-0.1,1.1)\nplt.show()","2e6e024e":"plt.plot(x,y,linestyle = \"--\",label=\"step\")\nplt.plot(x,yy,label=\"sigmoid\")\nplt.show()","956f3e4c":"#ReLU\u51fd\u6570\u5b9e\u73b0\ndef relu(x):\n    return np.maximum(0,x)\n\ny3 = relu(x)\nplt.plot(x,y3)\nplt.show()","5750c6bc":"# \u4e00\u7ef4\u6570\u7ec4\nimport numpy as np\nA = np.array([1, 2, 3, 4])\nprint(A)","46c52671":"np.ndim(A)#\u83b7\u53d6\u6570\u7ec4\u7ef4\u6570","b0a92931":"A.shape#\u83b7\u53d6\u6570\u7ec4\u7684\u5f62\u72b6","ce730d9b":"A.shape[0]#\u5176\u7ed3\u679c\u662f\u4e2a\u5143\u7ec4\uff08tuple\uff09","b7d6b267":"# \u4e8c\u7ef4\u6570\u7ec4,\u4e5f\u662f\u77e9\u9635\nB = np.array([[1,2], [3,4], [5,6]])\nprint(B)","b81d91d9":"np.ndim(B)","e6832372":"B.shape","d476f18d":"# \u77e9\u9635\u4e58\u6cd5\nC = np.array([[1,2],[3,4]])\nC.shape","2950e596":"D = np.array([[5,6],[7,8]])\nD.shape","52aea1bf":"np.dot(C,D)#\u4e58\u79ef\u4e3a\u70b9\u79ef","5874f2b1":"np.dot(D,C)#\u7edd\u5927\u90e8\u5206\u77e9\u9635\u4e0d\u6ee1\u8db3\u4e58\u6cd5\u4ea4\u6362\u5f8b","16d4b24d":"# \u4f7f\u7528NumPy\u77e9\u9635\u5b9e\u73b0\u795e\u7ecf\u7f51\u7edc\nX=np.array([1,2])\nX.shape","426b7330":"W=np.array([[1,3,5],[2,4,6]])\nprint(W)","554aa027":"W.shape","d00e73ae":"YY=np.dot(X,W)\nprint(YY)","36961d9b":"# \u591a\u7ef4\u6570\u7ec4\u5b9e\u73b0A(1)=XW(1)+B\n# \u8f93\u5165\u5c42\u5230\u7b2c1\u5c42\u7684\u4fe1\u53f7\u4f20\u9012\nX=np.array([1.0, 0.5])\nW1=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\nB1=np.array([0.1,0.2,0.3])\n\nprint(W1.shape)\nprint(X.shape)\nprint(B1.shape)","735cfbc0":"A1=np.dot(X,W1)+B1\n#\u89c2\u5bdf\u7b2c1\u5c42\u4e2d\u6fc0\u6d3b\u51fd\u6570\u7684\u8ba1\u7b97\u8fc7\u7a0b,\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528sigmoid\nZ1=sigmoid(A1)\nprint(A1)\nprint(Z1)","9ca32ff3":"#\u7b2c1\u5c42\u5230\u7b2c2\u5c42\u7684\u4fe1\u53f7\u4f20\u9012\nW2=np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\nB2=np.array([0.1,0.2])\n\nprint(Z1.shape)\nprint(W2.shape)\nprint(B2.shape)\nA2=np.dot(Z1,W2) + B2\nZ2=sigmoid(A2)","f537609c":"#\u7b2c2\u5c42\u5230\u8f93\u51fa\u5c42\u7684\u4fe1\u53f7\u4f20\u9012\n#\u5b9a\u4e49\u8f93\u51fa\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\u4e3a\u6052\u7b49\u51fd\u6570\ndef identity_function(x):\n    return x\n\nW3=np.array([[0.1,0.3],[0.2,0.4]])\nB3=np.array([0.1,0.2])\nA3=np.dot(Z2,W3)+B3\nY=identity_function(A3)\nprint(Y)","f4429225":"# 3\u5c42\u7f51\u7edc\u5b9e\u73b0\u6848\u4f8b\uff0c\u628a\u6743\u91cd\u8bb0\u4e3a\u5927\u5199\u5b57\u6bcdW1\uff0c\u5176\u4ed6\u7684\u504f\u7f6e\u6216\u4e2d\u95f4\u7ed3\u679c\u7b49\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\ndef init_network():\n    network = {}\n    network['W1'] = np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\n    network['b1'] = np.array([0.1,0.2,0.3])\n    network['W2'] = np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\n    network['b2'] = np.array([0.1, 0.2])\n    network['W3'] = np.array([[0.1,0.3],[0.2,0.4]])\n    network['b3'] = np.array([0.1,0.2])\n    \n    return network\n\ndef forward(network, x):\n    W1, W2, W3 = network['W1'], network['W2'], network['W3']\n    b1, b2, b3 = network['b1'], network['b2'], network['b3']\n    \n    a1 = np.dot(x, W1) + b1\n    z1 = sigmoid(a1)\n    a2 = np.dot(z1, W2) + b2\n    z2 = sigmoid(a2)\n    a3 = np.dot(z2, W3) + b3\n    y = identity_function(a3)\n    \n    return y\n\nnetwork = init_network()\nx = np.array([1.0, 0.5])\ny = forward(network, x)\nprint(y)","a6d32f7a":"#\u5b9e\u73b0softmax\u51fd\u6570\na = np.array([0.3, 2.9, 4.0])\nexp_a = np.exp(a) #\u6307\u6570\u51fd\u6570\nprint(exp_a)\nsum_exp_a = np.sum(exp_a) #\u6307\u6570\u51fd\u6570\u7684\u548c\nprint(sum_exp_a)\ny = exp_a \/ sum_exp_a\nprint(y)","4f71fa54":"# \u5b9a\u4e49softmax\u51fd\u6570\u3002\u4f9b\u4ee5\u540e\u4f7f\u7528(\u521d\u59cb\u7248)\ndef softmax1(a):\n    exp_a = np.exp(a)\n    sum_exp_a = np.sum(exp_a)\n    y = exp_a \/ sum_exp_a\n    \n    return y","b3ad2f69":"# \u6f14\u793a\u8ba1\u7b97\u6ea2\u51fa\u60c5\u51b5\u4e0e\u89e3\u51b3\na = np.array([1010, 1000, 990])\nnp.exp(a) \/ np.sum(np.exp(a)) #softmax,\u5e76\u672a\u6b63\u786e\u88ab\u8ba1\u7b97\uff0c\u62a5\u9519","de8d90b9":"c = np.max(a) #1010\na - c\nnp.exp(a - c) \/ np.sum(np.exp(a - c))","9a9e4ed3":"# \u5b9a\u4e49softmax\u51fd\u6570\u3002\u4f9b\u4ee5\u540e\u4f7f\u7528(\u6b63\u5f0f\u7528\u7248)\ndef softmax(a):\n    c = np.max(a)\n    exp_a = np.exp(a - c)#\u6ea2\u51fa\u5bf9\u7b56\n    sum_exp_a = np.sum(exp_a)\n    y = exp_a \/ sum_exp_a\n    \n    return y","17bf7f22":"# \u53ef\u89e3\u91ca\u4e3a\u201c\u6982\u7387\u201d\u7684softmax\u51fd\u6570\na = np.array([0.3, 2.9, 4.0])\ny = softmax(a)\nprint(y)\nnp.sum(y)","340f1f17":"# \u4ee3\u7801\u6682\u7565\nimport sys, os\nprint(sys.path.append(os.pardir))","edc431d4":"# \u5747\u65b9\u8bef\u5dee\u5b9a\u4e49\u51fd\u6570\ndef mean_squared_error(y, t):\n    return 0.5 * np.sum((y-t)**2)","0484d27e":"# \u8bbe\u201c2\u201d\u4e3a\u6b63\u89e3\nt = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\n#\u4f8b1\uff1a\u201c2\u201d\u7684\u6982\u7387\u6700\u9ad8\u7684\u60c5\u51b5\uff080.6\uff09\ny = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]\nmean_squared_error(np.array(y),np.array(t))","7ab54731":"# \u4f8b2\uff1a\u201c7\u201d\u7684\u6982\u7387\u6700\u9ad8\u7684\u60c5\u51b5\uff080.6\uff09\ny = [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]\nmean_squared_error(np.array(y),np.array(t))","088331b4":"# \u5b9e\u73b0\u4ea4\u53c9\u71b5\u8bef\u5dee\ndef cross_entropy_error0(y, t):\n    delta = 1e-7\n    return -np.sum(t * np.log(y + delta))","c598f990":"# \u8fdb\u884c\u7b80\u5355\u8ba1\u7b97\n# \u8bbe\u201c2\u201d\u4e3a\u6b63\u89e3\nt = [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\n#\u4f8b1\uff1a\u201c2\u201d\u7684\u6982\u7387\u6700\u9ad8\u7684\u60c5\u51b5\uff080.6\uff09\ny = [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]\ncross_entropy_error0(np.array(y),np.array(t))","52616db9":"# \u4f8b2\uff1a\u201c7\u201d\u7684\u6982\u7387\u6700\u9ad8\u7684\u60c5\u51b5\uff080.6\uff09\ny = [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]\ncross_entropy_error0(np.array(y),np.array(t))","453a3b69":"# \u8bfb\u5165MNIST \u4ee3\u7801\u6682\u7565\nimport sys, os\nsys.path.append(os.pardir)\nimport numpy as np\n# from dataset.mnist import load_mnist","6c797545":"# \u4f7f\u7528np.random.choice\u8fdb\u884c\u968f\u673a\u9009\u53d6\nnp.random.choice(60000, 10)","629081a8":"# \u53ef\u540c\u65f6\u5904\u7406\u5355\u4e2a\u548c\u6279\u91cf\u6570\u636e\ndef cross_entropy_error1(y, t):\n    if y.nidm == 1:\n        t = t.reshape(1, t.size)\n        y = y.reshape(1, y.size)\n\n    delta = 1e-7\n    batch_size = y.shape[0]\n    return -np.sum(t * np.log(y + delta)) \/ batch_size","21157519":"# \u53ef\u540c\u65f6\u5904\u7406\u5355\u4e2a\u548c\u6279\u91cf\u6570\u636e\ndef cross_entropy_error2(y, t):\n    if y.nidm == 1:\n        t = t.reshape(1, t.size)\n        y = y.reshape(1, y.size)\n\n    delta = 1e-7\n    batch_size = y.shape[0]\n    return -np.sum(np.log(y[np.arange(batch_size), t] + delta)) \/ batch_size","14d49b1a":"np.float32(1e-50)","2169dd8e":"# \u5bf9\u820d\u5165\u8bef\u5dee\u51cf\u5c0f\u4e0e\u4f7f\u7528\u4e2d\u5fc3\u5dee\u5206\u5b9e\u73b0\u51fd\u6570\u5bfc\u6570\u7a0b\u5e8f\ndef numerical_diff(f, x):\n    h = 1e-4 #0.0001\n    return (f(x+h) - f(x-h)) \/ (2*h)","1e712dcb":"# \u5b9e\u73b0\u4f8b\u5b50\ndef function_1(x):\n    return 0.01*x**2 + 0.1*x\n\nimport numpy as np\nimport matplotlib.pylab as plt\n\nx = np.arange(0.0, 20.0, 0.1) #\u4ee50.1\u4e3a\u5355\u4f4d\uff0c\u4ece0\u523020\u7684\u6570\u7ec4x\ny = function_1(x)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.plot(x, y)\nplt.show()","8f2cc05a":"#\u8ba1\u7b97\u4e0a\u9762\u5f0f\u5b50\u76845,10\u5904\u5bfc\u6570\nnumerical_diff(function_1, 5)","582d8e8e":"numerical_diff(function_1, 10)","37f56092":"def tangent_line(f, x):\n    d = numerical_diff(f, x)\n    print(d)\n    y = f(x) - d*x\n    return lambda t: d*t + y","66a940f4":"x = np.arange(0.0, 20.0, 0.1)\ny = function_1(x)\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\n\ntf = tangent_line(function_1, 5)\ntf2 = tangent_line(function_1, 10)\ny2 = tf(x)\ny22 = tf2(x)\n\nplt.plot(x, y)\nplt.plot(x, y2)\nplt.show()\nplt.plot(x, y)\nplt.plot(x, y22)\nplt.show()","d5b089fd":"# \u5b9e\u73b0\u4e0a\u5f0f\u7684\u4ee3\u7801\ndef function_2(x):\n    #\u6216\u8005return np.sum(x**2)\n    return x[0]**2 + x[1]**2","89bd2a88":"# \u6c42\u504f\u5bfc1\ndef function_tmp1(x0):\n    return x0*x0 + 4.0**2.0\n\nnumerical_diff(function_tmp1, 3.0)","98c7f036":"# \u6c42\u504f\u5bfc2\ndef function_tmp2(x1):\n    return 3.0**2.0 + x1*x1\n\nnumerical_diff(function_tmp1, 4.0)","f33f8a2c":"# \u68af\u5ea6\u7684\u4ee3\u7801\u5b9e\u73b0\ndef numerical_gradient(f, x):\n    h = 1e-4 #0.001\n    grad = np.zeros_like(x) #\u751f\u6210\u548cx\u5f62\u72b6\u76f8\u540c\u7684\u6570\u7ec4\n    \n    for idx in range(x.size):\n        tmp_val = x[idx]\n        # f(x+h)\u7684\u8ba1\u7b97\n        x[idx] = tmp_val + h\n        fxh1 = f(x)\n        \n        # f(x-h)\u7684\u8ba1\u7b97\n        x[idx] = tmp_val - h\n        fxh2 = f(x)\n        \n        grad[idx] = (fxh1 - fxh2) \/ (2*h)\n        x[idx] = tmp_val # \u8fd8\u539f\u503c\n        \n    return grad","f6392e17":"# \u6c42\u70b9(3,4) (0,2) (3,0)\u5904\u7684\u68af\u5ea6\nnumerical_gradient(function_2, np.array([3.0, 4.0]))","54e62ae2":"numerical_gradient(function_2, np.array([0.0, 2.0]))","4be7d865":"numerical_gradient(function_2, np.array([3.0, 0.0]))","5bd83e86":"import numpy as np\nimport matplotlib.pylab as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\ndef _numerical_gradient_no_batch(f, x):\n    h = 1e-4 # 0.0001\n    grad = np.zeros_like(x)\n    \n    for idx in range(x.size):\n        tmp_val = x[idx]\n        x[idx] = float(tmp_val) + h\n        fxh1 = f(x) # f(x+h)\n        \n        x[idx] = tmp_val - h \n        fxh2 = f(x) # f(x-h)\n        grad[idx] = (fxh1 - fxh2) \/ (2*h)\n        \n        x[idx] = tmp_val # \u8fd8\u539f\u503c\n        \n    return grad\n\n\ndef numerical_gradient(f, X):\n    if X.ndim == 1:\n        return _numerical_gradient_no_batch(f, X)\n    else:\n        grad = np.zeros_like(X)\n        \n        for idx, x in enumerate(X):\n            grad[idx] = _numerical_gradient_no_batch(f, x)\n        \n        return grad\n\n\ndef function_2(x):\n    if x.ndim == 1:\n        return np.sum(x**2)\n    else:\n        return np.sum(x**2, axis=1)\n\n\ndef tangent_line(f, x):\n    d = numerical_gradient(f, x)\n    print(d)\n    y = f(x) - d*x\n    return lambda t: d*t + y\n     \nif __name__ == '__main__':\n    x0 = np.arange(-2, 2.5, 0.25)\n    x1 = np.arange(-2, 2.5, 0.25)\n    X, Y = np.meshgrid(x0, x1)\n    \n    X = X.flatten()\n    Y = Y.flatten()\n    \n    grad = numerical_gradient(function_2, np.array([X, Y]) )\n    \n    plt.figure()\n    plt.quiver(X, Y, -grad[0], -grad[1],  angles=\"xy\",color=\"#666666\")#,headwidth=10,scale=40,color=\"#444444\")\n    plt.xlim([-2, 2])\n    plt.ylim([-2, 2])\n    plt.xlabel('x0')\n    plt.ylabel('x1')\n    plt.grid()\n    plt.legend()\n    plt.draw()\n    plt.show()","d592202a":"def gradient_descent(f, init_x, lr=0.01, step_num=100):\n    \"\"\"\n    \u53c2\u6570f\u662f\u8981\u8fdb\u884c\u6700\u4f18\u5316\u7684\u51fd\u6570\uff0cinit_x\u662f\u521d\u59cb\u503c\uff0clr\u662f\u5b66\u4e60\u7387learning rate\uff0cstep_num\u662f\u68af\u5ea6\u6cd5\u7684\u91cd\u590d\u6b21\u6570\u3002\n    numerical_gradient(f,x)\u4f1a\u6c42\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u7528\u8be5\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\u5f97\u5230\u7684\u503c\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\uff0c\u7531step_num\u6307\u5b9a\u91cd\u590d\u7684\u6b21\u6570\u3002\n    \"\"\"\n    x = init_x\n    x_history = []\n\n    for i in range(step_num):\n        x_history.append( x.copy() )\n\n        grad = numerical_gradient(f, x)\n        x -= lr * grad\n\n    return x, np.array(x_history)","ed5cd2d2":"# \u7528\u68af\u5ea6\u6cd5\u6c42f(x0+x1)=x0^2+x1^2\u7684\u6700\u5c0f\u503c\ndef function_2(x):\n    return x[0]**2 + x[1]**2\n\ninit_x = np.array([-3.0, 4.0])\nx, x_history = gradient_descent(function_2, init_x=init_x, lr=0.1, step_num=100)","f27c370e":"# \u7528\u56fe\u50cf\u8868\u793a\u4e0a\u9762\u7684\u51fd\u6570\u68af\u5ea6\u4e0b\u964d\u6cd5\u7684\u6b65\u9aa4\nplt.plot( [-5, 5], [0,0], '--b')\nplt.plot( [0,0], [-5, 5], '--b')\nplt.plot(x_history[:,0], x_history[:,1], 'o')\n\nplt.xlim(-3.5, 3.5)\nplt.ylim(-4.5, 4.5)\nplt.xlabel(\"X0\")\nplt.ylabel(\"X1\")\nplt.show()","5950f58c":"# \u5b66\u4e60\u7387\u8fc7\u5927\u7684\u4f8b\u5b50\uff1alr=10.0\ninit_x = np.array([-3.0, 4.0])\nx, x_history = gradient_descent(function_2, init_x=init_x, lr=10.0, step_num=100)\nx","bfe1b3ec":"# \u5b66\u4e60\u7387\u8fc7\u5c0f\u7684\u4f8b\u5b50\uff1alr=1e-10\ninit_x = np.array([-3.0, 4.0])\nx, x_history = gradient_descent(function_2, init_x=init_x, lr=1e-10, step_num=100)\nx","e256fd1a":"# \u4e00\u4e2a\u7b80\u5355\u7684\u795e\u7ecf\u7f51\u7edc\n# coding: utf-8\nimport sys, os\nsys.path.append('..\/input\/deeplearningfromscratch\/deeplearningfromscratch')  # \u4e3a\u4e86\u5bfc\u5165\u7236\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u800c\u8fdb\u884c\u7684\u8bbe\u5b9a\nimport numpy as np\nfrom common.functions import softmax, cross_entropy_error\nfrom common.gradient import numerical_gradient\n\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2,3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        loss = cross_entropy_error(y, t)\n\n        return loss","0000253e":"net = simpleNet()\nprint(net.W)\n\nx = np.array([0.6, 0.9])\np = net.predict(x)\nprint(p)\n\nprint(np.argmax(p))\n\nt = np.array([0, 0, 1]) # \u6b63\u786e\u89e3\u6807\u7b7e\n\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n\nprint(dW)","89cf19fc":"from common.functions import *\nfrom common.gradient import numerical_gradient\n\n\nclass TwoLayerNet:\n\n    def __init__(self, input_size, hidden_size, output_size, weight_init_std=0.01):\n        # \u521d\u59cb\u5316\u6743\u91cd\n        self.params = {}\n        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)\n        self.params['b1'] = np.zeros(hidden_size)\n        self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size)\n        self.params['b2'] = np.zeros(output_size)\n\n    def predict(self, x):\n        W1, W2 = self.params['W1'], self.params['W2']\n        b1, b2 = self.params['b1'], self.params['b2']\n    \n        a1 = np.dot(x, W1) + b1\n        z1 = sigmoid(a1)\n        a2 = np.dot(z1, W2) + b2\n        y = softmax(a2)\n        \n        return y\n        \n    # x:\u8f93\u5165\u6570\u636e, t:\u76d1\u7763\u6570\u636e\n    def loss(self, x, t):\n        y = self.predict(x)\n        \n        return cross_entropy_error(y, t)\n    \n    def accuracy(self, x, t):\n        y = self.predict(x)\n        y = np.argmax(y, axis=1)\n        t = np.argmax(t, axis=1)\n        \n        accuracy = np.sum(y == t) \/ float(x.shape[0])\n        return accuracy\n        \n    # x:\u8f93\u5165\u6570\u636e, t:\u76d1\u7763\u6570\u636e\n    def numerical_gradient(self, x, t):\n        loss_W = lambda W: self.loss(x, t)\n        \n        grads = {}\n        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])\n        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])\n        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])\n        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])\n        \n        return grads\n        \n    def gradient(self, x, t):\n        W1, W2 = self.params['W1'], self.params['W2']\n        b1, b2 = self.params['b1'], self.params['b2']\n        grads = {}\n        \n        batch_num = x.shape[0]\n        \n        # forward\n        a1 = np.dot(x, W1) + b1\n        z1 = sigmoid(a1)\n        a2 = np.dot(z1, W2) + b2\n        y = softmax(a2)\n        \n        # backward\n        dy = (y - t) \/ batch_num\n        grads['W2'] = np.dot(z1.T, dy)\n        grads['b2'] = np.sum(dy, axis=0)\n        \n        da1 = np.dot(dy, W2.T)\n        dz1 = sigmoid_grad(a1) * da1\n        grads['W1'] = np.dot(x.T, dz1)\n        grads['b1'] = np.sum(dz1, axis=0)\n\n        return grads","46f7587a":"# \u4e8c\u5c42\u795e\u7ecf\u7f51\u7edc\u4f8b\u5b50\nnet = TwoLayerNet(input_size = 784, hidden_size = 100, output_size = 10)\nprint(net.params['W1'].shape)\nprint(net.params['b1'].shape)\nprint(net.params['W2'].shape)\nprint(net.params['b2'].shape)","6b2281c1":"#\u63a8\u7406\u5904\u7406\u7684\u5b9e\u73b0\u5982\u4e0b\nx = np.random.rand(100, 784) # \u4f2a\u8f93\u5165\u6570\u636e100\u7b14\ny = net.predict(x)\nt = np.random.rand(100, 10) # \u4f2a\u6b63\u786e\u89e3\u6807\u7b7e10\u7b14\n\n# grads = net.numerical_gradient(x, t) # \u8ba1\u7b97\u68af\u5ea6\uff0c\u4f7f\u7528\u4f20\u7edf\u7684\u57fa\u4e8e\u6570\u503c\u5fae\u5206\u8ba1\u7b97\u53c2\u6570\u7684\u68af\u5ea6\ngrads = net.gradient(x, t) # \u8ba1\u7b97\u68af\u5ea6\uff0c\u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\n\nprint(grads['W1'].shape)\nprint(grads['b1'].shape)\nprint(grads['W2'].shape)\nprint(grads['b2'].shape)","f75f4cab":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom dataset.mnist import load_mnist\n# from two_layer_net import TwoLayerNet\n\n# \u8bfb\u5165\u6570\u636e\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n\n# \u8d85\u53c2\u6570\niters_num = 10000  # \u9002\u5f53\u8bbe\u5b9a\u5faa\u73af\u7684\u6b21\u6570\ntrain_size = x_train.shape[0]\nbatch_size = 100\nlearning_rate = 0.1\n\ntrain_loss_list = []\ntrain_acc_list = []\ntest_acc_list = []\n\n# \u5e73\u5747\u6bcf\u4e2aepoch\u7684\u91cd\u590d\u6b21\u6570\niter_per_epoch = max(train_size \/ batch_size, 1)\n\nfor i in range(iters_num):\n    # \u83b7\u53d6mini-batch\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    \n    # \u8ba1\u7b97\u68af\u5ea6\n    #grad = network.numerical_gradient(x_batch, t_batch)\n    grad = network.gradient(x_batch, t_batch)\n    \n    # \u66f4\u65b0\u53c2\u6570\n    for key in ('W1', 'b1', 'W2', 'b2'):\n        network.params[key] -= learning_rate * grad[key]\n    \n    # \u8bb0\u5f55\u5b66\u4e60\u8fc7\u7a0b\n    loss = network.loss(x_batch, t_batch)\n    train_loss_list.append(loss)\n    \n    # \u8ba1\u7b97\u6bcf\u4e2aepoch\u7684\u8bc6\u522b\u7cbe\u5ea6\n    if i % iter_per_epoch == 0:\n        train_acc = network.accuracy(x_train, t_train)\n        test_acc = network.accuracy(x_test, t_test)\n        train_acc_list.append(train_acc)\n        test_acc_list.append(test_acc)\n        print(\"train acc, test acc | \" + str(train_acc) + \", \" + str(test_acc))\n\n# \u7ed8\u5236\u56fe\u5f62\nmarkers = {'train': 'o', 'test': 's'}\nx = np.arange(len(train_acc_list))\nplt.plot(x, train_acc_list, label='train acc')\nplt.plot(x, test_acc_list, label='test acc', linestyle='--')\nplt.xlabel(\"epochs\")\nplt.ylabel(\"accuracy\")\nplt.ylim(0, 1.0)\nplt.legend(loc='lower right')\nplt.show()","ce2e4e2f":"# \u5b9e\u73b0\u4e58\u6cd5\u5c42\nclass MulLayer:\n    def __init__(self):\n        self.x = None\n        self.y = None\n\n    def forward(self, x, y):\n        self.x = x\n        self.y = y                \n        out = x * y\n\n        return out\n\n    def backward(self, dout):\n        dx = dout * self.y\n        dy = dout * self.x\n\n        return dx, dy","5cd85d1d":"apple = 100\napple_num = 2\ntax = 1.1\n\nmul_apple_layer = MulLayer()\nmul_tax_layer = MulLayer()\n\n# forward\napple_price = mul_apple_layer.forward(apple, apple_num)\nprice = mul_tax_layer.forward(apple_price, tax)\n\n# backward\ndprice = 1\ndapple_price, dtax = mul_tax_layer.backward(dprice)\ndapple, dapple_num = mul_apple_layer.backward(dapple_price)\n\nprint(\"price:\", int(price))\nprint(\"dApple:\", dapple)\nprint(\"dApple_num:\", int(dapple_num))\nprint(\"dTax:\", dtax)","74629ad4":"# \u5b9e\u73b0\u52a0\u6cd5\u5c42\nclass AddLayer:\n    def __init__(self):\n        pass #\u8868\u793a\u4ec0\u4e48\u4e5f\u4e0d\u8fd0\u884c\n\n    def forward(self, x, y):\n        out = x + y\n\n        return out\n\n    def backward(self, dout):\n        dx = dout * 1\n        dy = dout * 1\n\n        return dx, dy","e1b80bf8":"apple = 100\napple_num = 2\norange = 150\norange_num = 3\ntax = 1.1\n\n# layer\nmul_apple_layer = MulLayer()\nmul_orange_layer = MulLayer()\nadd_apple_orange_layer = AddLayer()\nmul_tax_layer = MulLayer()\n\n# forward\napple_price = mul_apple_layer.forward(apple, apple_num)  # (1)\norange_price = mul_orange_layer.forward(orange, orange_num)  # (2)\nall_price = add_apple_orange_layer.forward(apple_price, orange_price)  # (3)\nprice = mul_tax_layer.forward(all_price, tax)  # (4)\n\n# backward\ndprice = 1\ndall_price, dtax = mul_tax_layer.backward(dprice)  # (4)\ndapple_price, dorange_price = add_apple_orange_layer.backward(dall_price)  # (3)\ndorange, dorange_num = mul_orange_layer.backward(dorange_price)  # (2)\ndapple, dapple_num = mul_apple_layer.backward(dapple_price)  # (1)\n\nprint(\"price:\", int(price))\nprint(\"dApple:\", dapple)\nprint(\"dApple_num:\", int(dapple_num))\nprint(\"dOrange:\", dorange)\nprint(\"dOrange_num:\", int(dorange_num))\nprint(\"dTax:\", dtax)","1fb507cf":"# ReLU\nclass Relu:\n    def __init__(self):\n        self.mask = None\n\n    def forward(self, x):\n        self.mask = (x <= 0)\n        out = x.copy()\n        out[self.mask] = 0\n\n        return out\n\n    def backward(self, dout):\n        dout[self.mask] = 0\n        dx = dout\n\n        return dx","72d8392c":"x = np.array([[1.0, -0.5], [-2.0, 3.0]])\nprint(x)\nmask = (x <= 0)\nprint(mask)","60baeab5":"# Sigmoid\nclass Sigmoid:\n    def __init__(self):\n        self.out = None\n\n    def forward(self, x):\n        out = sigmoid(x)\n        self.out = out\n        return out\n\n    def backward(self, dout):\n        dx = dout * (1.0 - self.out) * self.out\n\n        return dx","6afd6421":"# \u56de\u987e\nX = np.random.rand(2)\nW = np.random.rand(2,3)\nB = np.random.rand(3)\n\nprint(X)\nprint(W)\nprint(B)\n\nprint(X.shape)\nprint(W.shape)\nprint(B.shape)\n\nY = np.dot(X, W) + B\nprint(Y)","2e5c709a":"X_dot_W = np.array([[0, 0, 0], [10, 10, 10]])\nB = np.array([1, 2, 3])\nprint(X_dot_W)\nprint(X_dot_W + B)","99748c7e":"dY = np.array([[1, 2, 3],[4, 5, 6]])\nprint(dY)\ndB = np.sum(dY, axis = 0)\nprint(dB)","8be02104":"# Affine\u7684\u5b9e\u73b0\uff08\u8003\u8651\u8f93\u5165\u6570\u636e\u4e3a\u5f20\u91cf\uff08\u56db\u7ef4\u6570\u636e\uff09\u7684\u60c5\u51b5\uff09\nclass Affine:\n    def __init__(self, W, b):\n        self.W =W\n        self.b = b\n        \n        self.x = None\n        self.original_x_shape = None\n        # \u6743\u91cd\u548c\u504f\u7f6e\u53c2\u6570\u7684\u5bfc\u6570\n        self.dW = None\n        self.db = None\n\n    def forward(self, x):\n        # \u5bf9\u5e94\u5f20\u91cf\n        self.original_x_shape = x.shape\n        x = x.reshape(x.shape[0], -1)\n        self.x = x\n\n        out = np.dot(self.x, self.W) + self.b\n\n        return out\n\n    def backward(self, dout):\n        dx = np.dot(dout, self.W.T)\n        self.dW = np.dot(self.x.T, dout)\n        self.db = np.sum(dout, axis=0)\n        \n        dx = dx.reshape(*self.original_x_shape)  # \u8fd8\u539f\u8f93\u5165\u6570\u636e\u7684\u5f62\u72b6\uff08\u5bf9\u5e94\u5f20\u91cf\uff09\n        return dx","12a8f9a1":"# Softmax-with-Loss\u5c42\u5b9e\u73b0\nclass SoftmaxWithLoss:\n    def __init__(self):\n        self.loss = None\n        self.y = None # softmax\u7684\u8f93\u51fa\n        self.t = None # \u76d1\u7763\u6570\u636e\n\n    def forward(self, x, t):\n        self.t = t\n        self.y = softmax(x)\n        self.loss = cross_entropy_error(self.y, self.t)\n        \n        return self.loss\n\n    def backward(self, dout=1):\n        batch_size = self.t.shape[0]\n        if self.t.size == self.y.size: # \u76d1\u7763\u6570\u636e\u662fone-hot-vector\u7684\u60c5\u51b5\n            dx = (self.y - self.t) \/ batch_size\n        else:\n            dx = self.y.copy()\n            dx[np.arange(batch_size), self.t] -= 1\n            dx = dx \/ batch_size\n        \n        return dx","827359e9":"# \u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5TwoLayerNet\u4ee3\u7801\u5b9e\u73b0\nimport numpy as np\nfrom common.layers import *\nfrom common.gradient import numerical_gradient\nfrom collections import OrderedDict\n\n\nclass TwoLayerNet:\n\n    def __init__(self, input_size, hidden_size, output_size, weight_init_std = 0.01):\n        # \u521d\u59cb\u5316\u6743\u91cd\n        self.params = {}\n        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)\n        self.params['b1'] = np.zeros(hidden_size)\n        self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size) \n        self.params['b2'] = np.zeros(output_size)\n\n        # \u751f\u6210\u5c42 \u6ce8\u610f\u8fd9\u91cc\n        self.layers = OrderedDict() # \u6ce8\u610f\u8fd9\u91cc\n        self.layers['Affine1'] = Affine(self.params['W1'], self.params['b1'])\n        self.layers['Relu1'] = Relu()\n        self.layers['Affine2'] = Affine(self.params['W2'], self.params['b2'])\n\n        self.lastLayer = SoftmaxWithLoss()\n        \n    def predict(self, x):\n        for layer in self.layers.values():\n            x = layer.forward(x)\n        \n        return x\n        \n    # x:\u8f93\u5165\u6570\u636e, t:\u76d1\u7763\u6570\u636e\n    def loss(self, x, t):\n        y = self.predict(x)\n        return self.lastLayer.forward(y, t)\n    \n    def accuracy(self, x, t):\n        y = self.predict(x)\n        y = np.argmax(y, axis=1)\n        if t.ndim != 1 : t = np.argmax(t, axis=1)\n        \n        accuracy = np.sum(y == t) \/ float(x.shape[0])\n        return accuracy\n        \n    # x:\u8f93\u5165\u6570\u636e, t:\u76d1\u7763\u6570\u636e\n    def numerical_gradient(self, x, t):\n        loss_W = lambda W: self.loss(x, t)\n        \n        grads = {}\n        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])\n        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])\n        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])\n        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])\n        \n        return grads\n        \n    def gradient(self, x, t):\n        # forward \u6ce8\u610f\u8fd9\u91cc\n        self.loss(x, t)\n\n        # backward \u6ce8\u610f\u8fd9\u91cc\n        dout = 1\n        dout = self.lastLayer.backward(dout)\n        \n        layers = list(self.layers.values())\n        layers.reverse()\n        for layer in layers:\n            dout = layer.backward(dout)\n\n        # \u8bbe\u5b9a\n        grads = {}\n        grads['W1'], grads['b1'] = self.layers['Affine1'].dW, self.layers['Affine1'].db\n        grads['W2'], grads['b2'] = self.layers['Affine2'].dW, self.layers['Affine2'].db\n\n        return grads","c422146b":"# \u8bef\u5dee\u53cd\u54cd\u4f20\u64ad\u6cd5\u7684\u68af\u5ea6\u786e\u8ba4\u5b9e\u73b0\nimport numpy as np\nfrom dataset.mnist import load_mnist\n\n# \u8bfb\u5165\u6570\u636e\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n\nx_batch = x_train[:3]\nt_batch = t_train[:3]\n\ngrad_numerical = network.numerical_gradient(x_batch, t_batch)\ngrad_backprop = network.gradient(x_batch, t_batch)\n\nfor key in grad_numerical.keys():\n    diff = np.average( np.abs(grad_backprop[key] - grad_numerical[key]) )\n    print(key + \":\" + str(diff))","ef394832":"# \u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u5b66\u4e60\u7684\u5b9e\u73b0\nimport numpy as np\nfrom dataset.mnist import load_mnist\n\n# \u8bfb\u5165\u6570\u636e\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n\niters_num = 10000\ntrain_size = x_train.shape[0]\nbatch_size = 100\nlearning_rate = 0.1\n\ntrain_loss_list = []\ntrain_acc_list = []\ntest_acc_list = []\n\niter_per_epoch = max(train_size \/ batch_size, 1)\n\nfor i in range(iters_num):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    \n    # \u68af\u5ea6\n    #grad = network.numerical_gradient(x_batch, t_batch)\n    grad = network.gradient(x_batch, t_batch)\n    \n    # \u66f4\u65b0\n    for key in ('W1', 'b1', 'W2', 'b2'):\n        network.params[key] -= learning_rate * grad[key]\n    \n    loss = network.loss(x_batch, t_batch)\n    train_loss_list.append(loss)\n    \n    if i % iter_per_epoch == 0:\n        train_acc = network.accuracy(x_train, t_train)\n        test_acc = network.accuracy(x_test, t_test)\n        train_acc_list.append(train_acc)\n        test_acc_list.append(test_acc)\n        print(train_acc, test_acc)","e02ddadc":"class SGD:\n    def __init__(self, lr=0.01):\n        self.lr = lr\n        \n    def update(self, params, grads):\n        for key in params.keys():\n            params[key] -= self.lr * grads[key]","8ea62eff":"class Momentum:\n\n    \"\"\"Momentum SGD\"\"\"\n\n    def __init__(self, lr=0.01, momentum=0.9):\n        self.lr = lr\n        self.momentum = momentum\n        self.v = None\n        \n    def update(self, params, grads):\n        if self.v is None:\n            self.v = {}\n            for key, val in params.items():                                \n                self.v[key] = np.zeros_like(val)\n                \n        for key in params.keys():\n            self.v[key] = self.momentum*self.v[key] - self.lr*grads[key] \n            params[key] += self.v[key]","03c37b98":"# AdaGrad\u5b9e\u73b0\nclass AdaGrad:\n\n    \"\"\"AdaGrad\"\"\"\n\n    def __init__(self, lr=0.01):\n        self.lr = lr\n        self.h = None\n        \n    def update(self, params, grads):\n        if self.h is None:\n            self.h = {}\n            for key, val in params.items():\n                self.h[key] = np.zeros_like(val)\n            \n        for key in params.keys():\n            self.h[key] += grads[key] * grads[key]\n            params[key] -= self.lr * grads[key] \/ (np.sqrt(self.h[key]) + 1e-7)","058de6cd":"# Adam\u5b9e\u73b0\nclass Adam:\n\n    \"\"\"Adam (http:\/\/arxiv.org\/abs\/1412.6980v8)\"\"\"\n\n    def __init__(self, lr=0.001, beta1=0.9, beta2=0.999):\n        self.lr = lr\n        self.beta1 = beta1\n        self.beta2 = beta2\n        self.iter = 0\n        self.m = None\n        self.v = None\n        \n    def update(self, params, grads):\n        if self.m is None:\n            self.m, self.v = {}, {}\n            for key, val in params.items():\n                self.m[key] = np.zeros_like(val)\n                self.v[key] = np.zeros_like(val)\n        \n        self.iter += 1\n        lr_t  = self.lr * np.sqrt(1.0 - self.beta2**self.iter) \/ (1.0 - self.beta1**self.iter)         \n        \n        for key in params.keys():\n            #self.m[key] = self.beta1*self.m[key] + (1-self.beta1)*grads[key]\n            #self.v[key] = self.beta2*self.v[key] + (1-self.beta2)*(grads[key]**2)\n            self.m[key] += (1 - self.beta1) * (grads[key] - self.m[key])\n            self.v[key] += (1 - self.beta2) * (grads[key]**2 - self.v[key])\n            \n            params[key] -= lr_t * self.m[key] \/ (np.sqrt(self.v[key]) + 1e-7)\n            \n            #unbias_m += (1 - self.beta1) * (grads[key] - self.m[key]) # correct bias\n            #unbisa_b += (1 - self.beta2) * (grads[key]*grads[key] - self.v[key]) # correct bias\n            #params[key] += self.lr * unbias_m \/ (np.sqrt(unbisa_b) + 1e-7)","088a5372":"# coding: utf-8\nimport os\nimport sys\nimport matplotlib.pyplot as plt\nfrom dataset.mnist import load_mnist\nfrom common.util import smooth_curve\nfrom common.multi_layer_net import MultiLayerNet\nfrom common.optimizer import *\n\n\n# 0:\u8bfb\u5165MNIST\u6570\u636e==========\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)\n\ntrain_size = x_train.shape[0]\nbatch_size = 128\nmax_iterations = 2000\n\n\n# 1:\u8fdb\u884c\u5b9e\u9a8c\u7684\u8bbe\u7f6e==========\noptimizers = {}\noptimizers['SGD'] = SGD()\noptimizers['Momentum'] = Momentum()\noptimizers['AdaGrad'] = AdaGrad()\noptimizers['Adam'] = Adam()\n#optimizers['RMSprop'] = RMSprop()\n\nnetworks = {}\ntrain_loss = {}\nfor key in optimizers.keys():\n    networks[key] = MultiLayerNet(\n        input_size=784, hidden_size_list=[100, 100, 100, 100],\n        output_size=10)\n    train_loss[key] = []    \n\n\n# 2:\u5f00\u59cb\u8bad\u7ec3==========\nfor i in range(max_iterations):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    \n    for key in optimizers.keys():\n        grads = networks[key].gradient(x_batch, t_batch)\n        optimizers[key].update(networks[key].params, grads)\n    \n        loss = networks[key].loss(x_batch, t_batch)\n        train_loss[key].append(loss)\n    \n    if i % 100 == 0:\n        print( \"===========\" + \"iteration:\" + str(i) + \"===========\")\n        for key in optimizers.keys():\n            loss = networks[key].loss(x_batch, t_batch)\n            print(key + \":\" + str(loss))\n\n\n# 3.\u7ed8\u5236\u56fe\u5f62==========\nmarkers = {\"SGD\": \"o\", \"Momentum\": \"x\", \"AdaGrad\": \"s\", \"Adam\": \"D\"}\nx = np.arange(max_iterations)\nfor key in optimizers.keys():\n    plt.plot(x, smooth_curve(train_loss[key]), marker=markers[key], markevery=100, label=key)\nplt.xlabel(\"iterations\")\nplt.ylabel(\"loss\")\nplt.ylim(0, 1)\nplt.legend()\nplt.show()","9559caf8":"# coding: utf-8\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n\n\ndef ReLU(x):\n    return np.maximum(0, x)\n\n\ndef tanh(x):\n    return np.tanh(x)\n    \ninput_data = np.random.randn(1000, 100)  # 1000\u4e2a\u6570\u636e\nnode_num = 100  # \u5404\u9690\u85cf\u5c42\u7684\u8282\u70b9\uff08\u795e\u7ecf\u5143\uff09\u6570\nhidden_layer_size = 5  # \u9690\u85cf\u5c42\u67095\u5c42\nactivations = {}  # \u6fc0\u6d3b\u503c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u91cc\n\nx = input_data\n\nfor i in range(hidden_layer_size):\n    if i != 0:\n        x = activations[i-1]\n\n    # \u6539\u53d8\u521d\u59cb\u503c\u8fdb\u884c\u5b9e\u9a8c\uff01\n    w = np.random.randn(node_num, node_num) * 1\n    # w = np.random.randn(node_num, node_num) * 0.01\n    # w = np.random.randn(node_num, node_num) * np.sqrt(1.0 \/ node_num)\n    # w = np.random.randn(node_num, node_num) * np.sqrt(2.0 \/ node_num)\n\n\n    a = np.dot(x, w)\n\n\n    # \u5c06\u6fc0\u6d3b\u51fd\u6570\u7684\u79cd\u7c7b\u4e5f\u6539\u53d8\uff0c\u6765\u8fdb\u884c\u5b9e\u9a8c\uff01\n    z = sigmoid(a)\n    # z = ReLU(a)\n    # z = tanh(a)\n\n    activations[i] = z\n\n# \u7ed8\u5236\u76f4\u65b9\u56fe\nfor i, a in activations.items():\n    plt.subplot(1, len(activations), i+1)\n    plt.title(str(i+1) + \"-layer\")\n    if i != 0: plt.yticks([], [])\n    # plt.xlim(0.1, 1)\n    # plt.ylim(0, 7000)\n    plt.hist(a.flatten(), 30, range=(0,1))\nplt.show()\n","5ee1cd3d":"# coding: utf-8\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n\n\ndef ReLU(x):\n    return np.maximum(0, x)\n\n\ndef tanh(x):\n    return np.tanh(x)\n    \ninput_data = np.random.randn(1000, 100)  # 1000\u4e2a\u6570\u636e\nnode_num = 100  # \u5404\u9690\u85cf\u5c42\u7684\u8282\u70b9\uff08\u795e\u7ecf\u5143\uff09\u6570\nhidden_layer_size = 5  # \u9690\u85cf\u5c42\u67095\u5c42\nactivations = {}  # \u6fc0\u6d3b\u503c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u91cc\n\nx = input_data\n\nfor i in range(hidden_layer_size):\n    if i != 0:\n        x = activations[i-1]\n\n    # \u6539\u53d8\u521d\u59cb\u503c\u8fdb\u884c\u5b9e\u9a8c\uff01\n#     w = np.random.randn(node_num, node_num) * 1\n    w = np.random.randn(node_num, node_num) * 0.01\n    # w = np.random.randn(node_num, node_num) * np.sqrt(1.0 \/ node_num)\n    # w = np.random.randn(node_num, node_num) * np.sqrt(2.0 \/ node_num)\n\n\n    a = np.dot(x, w)\n\n\n    # \u5c06\u6fc0\u6d3b\u51fd\u6570\u7684\u79cd\u7c7b\u4e5f\u6539\u53d8\uff0c\u6765\u8fdb\u884c\u5b9e\u9a8c\uff01\n    z = sigmoid(a)\n    # z = ReLU(a)\n    # z = tanh(a)\n\n    activations[i] = z\n\n# \u7ed8\u5236\u76f4\u65b9\u56fe\nfor i, a in activations.items():\n    plt.subplot(1, len(activations), i+1)\n    plt.title(str(i+1) + \"-layer\")\n    if i != 0: plt.yticks([], [])\n    # plt.xlim(0.1, 1)\n    # plt.ylim(0, 7000)\n    plt.hist(a.flatten(), 30, range=(0,1))\nplt.show()\n","3c746536":"# coding: utf-8\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n    \ninput_data = np.random.randn(1000, 100)  # 1000\u4e2a\u6570\u636e\nnode_num = 100  # \u5404\u9690\u85cf\u5c42\u7684\u8282\u70b9\uff08\u795e\u7ecf\u5143\uff09\u6570\nhidden_layer_size = 5  # \u9690\u85cf\u5c42\u67095\u5c42\nactivations = {}  # \u6fc0\u6d3b\u503c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u91cc\n\nx = input_data\n\nfor i in range(hidden_layer_size):\n    if i != 0:\n        x = activations[i-1]\n\n    # \u6539\u53d8\u521d\u59cb\u503c\u8fdb\u884c\u5b9e\u9a8c\uff01\n    w = np.random.randn(node_num, node_num) \/ np.sqrt(node_num)\n\n    a = np.dot(x, w)\n\n    # \u5c06\u6fc0\u6d3b\u51fd\u6570\u7684\u79cd\u7c7b\u4e5f\u6539\u53d8\uff0c\u6765\u8fdb\u884c\u5b9e\u9a8c\uff01\n    z = sigmoid(a)\n\n    activations[i] = z\n\n# \u7ed8\u5236\u76f4\u65b9\u56fe\nfor i, a in activations.items():\n    plt.subplot(1, len(activations), i+1)\n    plt.title(str(i+1) + \"-layer\")\n    if i != 0: plt.yticks([], [])\n    # plt.xlim(0.1, 1)\n    # plt.ylim(0, 7000)\n    plt.hist(a.flatten(), 30, range=(0,1))\nplt.show()","4a10ec60":"#\u57fa\u4e8eMNIST\u6570\u636e\u96c6\u7684\u6743\u91cd\u521d\u59cb\u503c\u7684\u6bd4\u8f83\n# coding: utf-8\nimport os\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom dataset.mnist import load_mnist\nfrom common.util import smooth_curve\nfrom common.multi_layer_net import MultiLayerNet\nfrom common.optimizer import SGD\n\n\n# 0:\u8bfb\u5165MNIST\u6570\u636e==========\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)\n\ntrain_size = x_train.shape[0]\nbatch_size = 128\nmax_iterations = 2000\n\n\n# 1:\u8fdb\u884c\u5b9e\u9a8c\u7684\u8bbe\u7f6e==========\nweight_init_types = {'std=0.01': 0.01, 'Xavier': 'sigmoid', 'He': 'relu'}\noptimizer = SGD(lr=0.01)\n\nnetworks = {}\ntrain_loss = {}\nfor key, weight_type in weight_init_types.items():\n    networks[key] = MultiLayerNet(input_size=784, hidden_size_list=[100, 100, 100, 100],\n                                  output_size=10, weight_init_std=weight_type)\n    train_loss[key] = []\n\n\n# 2:\u5f00\u59cb\u8bad\u7ec3==========\nfor i in range(max_iterations):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    \n    for key in weight_init_types.keys():\n        grads = networks[key].gradient(x_batch, t_batch)\n        optimizer.update(networks[key].params, grads)\n    \n        loss = networks[key].loss(x_batch, t_batch)\n        train_loss[key].append(loss)\n    \n    if i % 100 == 0:\n        print(\"===========\" + \"iteration:\" + str(i) + \"===========\")\n        for key in weight_init_types.keys():\n            loss = networks[key].loss(x_batch, t_batch)\n            print(key + \":\" + str(loss))\n\n\n# 3.\u7ed8\u5236\u56fe\u5f62==========\nmarkers = {'std=0.01': 'o', 'Xavier': 's', 'He': 'D'}\nx = np.arange(max_iterations)\nfor key in weight_init_types.keys():\n    plt.plot(x, smooth_curve(train_loss[key]), marker=markers[key], markevery=100, label=key)\nplt.xlabel(\"iterations\")\nplt.ylabel(\"loss\")\nplt.ylim(0, 2.5)\nplt.legend()\nplt.show()","95e05c1d":"\u795e\u7ecf\u7f51\u7edc\u9700\u5728\u5b66\u4e60\u65f6\u627e\u5230\u6700\u4f18\u53c2\u6570\uff08\u6743\u91cd\u548c\u504f\u7f6e\uff09\uff0c\u8fd9\u91cc\u6240\u8bf4\u7684\u6700\u4f18\u53c2\u6570\u662f\u6307\u635f\u5931\u51fd\u6570\u53d6\u6700\u5c0f\u503c\u65f6\u7684\u53c2\u6570\u3002\u901a\u8fc7\u5de7\u5999\u5730\u4f7f\u7528\u68af\u5ea6\u6765\u5bfb\u627e\u51fd\u6570\u6700\u5c0f\u503c\uff08\u6216\u8005\u5c3d\u53ef\u80fd\u5c0f\u7684\u503c\uff09\u7684\u65b9\u6cd5\u5c31\u662f\u68af\u5ea6\u6cd5\u3002\n\n\u68af\u5ea6\u8868\u793a\u7684\u662f\u5404\u70b9\u5904\u7684\u51fd\u6570\u503c\u51cf\u5c0f\u6700\u591a\u7684\u65b9\u5411\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u590d\u6742\u7684\u51fd\u6570\u4e2d\uff0c\u68af\u5ea6\u6307\u793a\u7684\u65b9\u5411\u57fa\u672c\u4e0a\u90fd\u4e0d\u662f\u51fd\u6570\u503c\u7684\u6700\u5c0f\u5904\u3002\n\n> \u51fd\u6570\u7684\u6781\u5c0f\u503c\u3001\u6700\u5c0f\u503c\u4ee5\u53ca\u88ab\u79f0\u4e3a**\u978d\u70b9\uff08saddle point\uff09**\u7684\u5730\u65b9\uff0c\u68af\u5ea6\u4e3a0\u3002\u6781\u5c0f\u503c\u662f\u5c40\u90e8\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f\u9650\u5b9a\u5728\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\u3002\u978d\u70b9\u662f\u4ece\u67d0\u4e2a\u65b9\u5411\u4e0a\u770b\u662f\u6781\u5927\u503c\uff0c\u4ece\u53e6\u4e00\u4e2a\u65b9\u5411\u4e0a\u770b\u5219\u662f\u6781\u5c0f\u503c\u7684\u70b9\u3002\n\n> \u5f53\u51fd\u6570\u5f88\u590d\u6742\u4e14\u5448\u6241\u5e73\u72b6\u65f6\uff0c\u5b66\u4e60\u53ef\u80fd\u4f1a\u8fdb\u5165\u4e00\u4e2a\uff08\u51e0\u4e4e\uff09\u5e73\u5766\u7684\u5730\u533a\uff0c\u9677\u5165\u88ab\u79f0\u4e3a\u201c\u5b66\u4e60\u9ad8\u539f\u201d\u7684\u65e0\u6cd5\u524d\u8fdb\u7684\u505c\u6ede\u671f\u3002\n\n\u5728\u5bfb\u627e\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff08\u6216\u8005\u5c3d\u53ef\u80fd\u5c0f\u7684\u503c\uff09\u7684\u4f4d\u7f6e\u7684\u4efb\u52a1\u4e2d\uff0c\u8981\u4ee5\u68af\u5ea6\u7684\u4fe1\u606f\u4e3a\u7ebf\u7d22\uff0c\u51b3\u5b9a\u524d\u8fdb\u7684\u65b9\u5411\u3002\n\n\u5728\u68af\u5ea6\u6cd5\u4e2d\uff0c\u51fd\u6570\u7684\u53d6\u503c\u4ece\u5f53\u524d\u4f4d\u7f6e\u6cbf\u7740\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\u4e00\u5b9a\u8ddd\u79bb\uff0c\u7136\u540e\u5728\u65b0\u7684\u5730\u65b9\u91cd\u65b0\u6c42\u68af\u5ea6\uff0c\u518d\u6cbf\u7740\u65b0\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\uff0c\u5982\u6b64\u53cd\u590d\uff0c\u4e0d\u65ad\u5730\u6cbf\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\u3002\u50cf\u8fd9\u6837\uff0c**\u901a\u8fc7\u4e0d\u65ad\u5730\u6cbf\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\uff0c\u9010\u6e10\u51cf\u5c0f\u51fd\u6570\u503c\u7684\u8fc7\u7a0b\u5c31\u662f\u68af\u5ea6\u6cd5\uff08gradient method\uff09**\u3002\n\n\u4e25\u683c\u7684\u8bb2\uff0c\u5bfb\u627e\u6700\u5c0f\u503c\u7684\u68af\u5ea6\u6cd5\u79f0\u4e3a**\u68af\u5ea6\u4e0b\u964d\u6cd5\uff08gradient descent method\uff09**\uff0c\u5bfb\u627e\u6700\u5927\u503c\u7684\u68af\u5ea6\u6cd5\u79f0\u4e3a**\u68af\u5ea6\u4e0a\u5347\u6cd5\uff08gradient ascent method\uff09**\u3002\n\n\u7528\u6570\u5b66\u5f0f\u8868\u793a\u68af\u5ea6\u6cd5\uff1a\n\n$$x_{0}=x_{0}-\\eta \\frac{\\partial f}{\\partial x_{0}}$$\n\n$$x_{1}=x_{1}-\\eta \\frac{\\partial f}{\\partial x_{1}}$$\n\n\u4e0a\u5f0f\u7684$\\eta$\u8868\u793a\u66f4\u65b0\u91cf\uff0c\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u79f0\u4e3a**\u5b66\u4e60\u7387\uff08learning rate\uff09**\u3002\u5b66\u4e60\u7387\u51b3\u5b9a\u5728\u4e00\u6b21\u5b66\u4e60\u4e2d\uff0c\u5e94\u8be5\u5b66\u4e60\u591a\u5c11\uff0c\u4ee5\u53ca\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u66f4\u65b0\u53c2\u6570\u3002\u4e0a\u5f0f\u8868\u793a\u66f4\u65b0\u4e00\u6b21\u7684\u5f0f\u5b50\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4f1a\u53cd\u590d\u6267\u884c\u3002\n\n\u50cf\u5b66\u4e60\u7387\u8fd9\u6837\u7684\u53c2\u6570\u6210\u4e3a**\u8d85\u53c2\u6570**\u3002\u5b66\u4e60\u7387\u8fd9\u6837\u7684\u8d85\u53c2\u6570\u662f\u4eba\u5de5\u8bbe\u5b9a\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8d85\u53c2\u6570\u9700\u8981\u5c1d\u8bd5\u591a\u4e2a\u503c\uff0c\u4ee5\u4fbf\u627e\u5230\u4e00\u79cd\u53ef\u4ee5\u4f7f\u5b66\u4e60\u987a\u5229\u8fdb\u884c\u7684\u8bbe\u5b9a\u3002\n\n\u800c\u5b66\u4e60\u7387\u9700\u8981\u4e8b\u5148\u786e\u5b9a\u4e3a\u67d0\u4e2a\u503c\uff0c\u6bd4\u59820.01\u6216\u80050.001.\u4e00\u822c\u800c\u8a00\uff0c\u8fd9\u4e2a\u503c\u8fc7\u5927\u6216\u8fc7\u5c0f\uff0c\u90fd\u65e0\u6cd5\u62b5\u8fbe\u4e00\u4e2a\u201c\u597d\u7684\u4f4d\u7f6e\u201d\u3002\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u4e00\u822c\u4f1a\u4e00\u8fb9\u6539\u53d8\u5b66\u4e60\u7387\u7684\u503c\uff0c\u4e00\u904d\u786e\u8ba4\u5b66\u4e60\u662f\u5426\u6b63\u786e\u8fdb\u884c\u4e86\u3002\u4e0b\u9762\u7528python\u5b9e\u73b0\u68af\u5ea6\u4e0b\u964d\u6cd5\uff1a","ed8cb19e":"# \u611f\u77e5\u673a","71c300b2":"## Matplotlib","d2a11f59":"\u4e0a\u9762\u8fd9\u4e2a\u8fd0\u7b97\u4e2d\uff0c\u4e00\u7ef4\u6570\u7ec4B\u88ab\u5de7\u5999\u5730\u53d8\u6210\u4e86\u548c\u4e8c\u7ef4\u6570\u7ec4A\u76f8\u540c\u7684\u5f62\u72b6\uff0c\u7136\u540e\u518d\u4ee5\u5bf9\u5e94\u5143\u7d20\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u7efc\u4e0a\uff0c\u56e0\u4e3aNumPy\u6709\u5e7f\u64ad\u529f\u80fd\uff0c\u6240\u4ee5\u4e0d\u540c\u5f62\u72b6\u7684\u6570\u7ec4\u4e4b\u95f4\u4e5f\u53ef\u4ee5\u987a\u5229\u5730\u8fdb\u884c\u8fd0\u7b97\u3002","264436c0":"\u4e0a\u4f8b\u4e2d\uff0c\u4ece\u6982\u7387\u7684\u7ed3\u679c\u6765\u770b\uff0c\u53ef\u4ee5\u8bf4\u201c\u56e0\u4e3a\u7b2c2\u4e2a\u5143\u7d20\u7684\u6982\u7387\u6700\u9ad8\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u7b2c2\u4e2a\u7c7b\u522b\u201d\u3002\u800c\u4e14\uff0c\u8fd8\u53ef\u4ee5\u56de\u7b54\u201c74%\u7684\u6982\u7387\u662f\u7b2c2\u4e2a\u7c7b\u522b\uff0c\u670925%\u7684\u6982\u7387\u662f\u7b2c1\u4e2a\u7c7b\u522b\uff0c\u67091%\u7684\u6982\u7387\u662f\u7b2c0\u4e2a\u7c7b\u522b\u201d\u3002\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u5373\u4f7f\u4f7f\u7528\u4e86softmax\u51fd\u6570\uff0c\u5404\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u662f\u56e0\u4e3a\u6307\u6570\u51fd\u6570\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\u3002\n\n\u4e00\u822c\u800c\u8a00\uff0c\u795e\u7ecf\u7f51\u7edc\u53ea\u628a\u8f93\u51fa\u503c\u6700\u5927\u7684\u795e\u7ecf\u5143\u6240\u5bf9\u5e94\u7684\u7c7b\u522b\u4f5c\u4e3a\u8bc6\u522b\u7ed3\u679c\u3002\u5e76\u4e14\uff0c\u5373\u4f7f\u4f7f\u7528softmax\u51fd\u6570\uff0c\u8f93\u51fa\u503c\u6700\u5927\u7684\u795e\u7ecf\u5143\u7684\u4f4d\u7f6e\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u795e\u7ecf\u7f51\u7edc\u5728\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u8f93\u51fa\u5c42\u7684softmax\u51fd\u6570\u53ef\u4ee5\u7701\u7565\u3002\u5728\u5b9e\u9645\u95ee\u9898\u4e2d\uff0c\u7531\u4e8e\u6307\u6570\u51fd\u6570\u7684\u8fd0\u7b97\u9700\u8981\u4e00\u5b9a\u7684\u8ba1\u7b97\u673a\u8fd0\u7b97\u91cf\uff0c\u56e0\u6b64\u8f93\u51fa\u5c42\u7684softmax\u51fd\u6570\u4e00\u822c\u4f1a\u76f4\u63a5\u7701\u7565\u3002\n\n\u6c42\u89e3\u673a\u5668\u5b66\u4e60\u95ee\u9898\u7684\u6b65\u9aa4\u53ef\u4ee5\u5206\u4e3a\u201c\u5b66\u4e60\u201d\u548c\u201c\u63a8\u7406\u201d\u4e24\u4e2a\u9636\u6bb5\u3002\u9996\u5148\uff0c\u5728\u5b66\u4e60\u9636\u6bb5\u8fdb\u884c\u6a21\u578b\u7684\u5b66\u4e60\uff08\u6307\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u3001\u81ea\u52a8\u8c03\u6574\u53c2\u6570\u7684\u8fc7\u7a0b\uff09\uff0c\u7136\u540e\uff0c\u5728\u63a8\u7406\u9636\u6bb5\uff0c\u7528\u5b66\u5230\u7684\u6a21\u578b\u5bf9\u672a\u77e5\u7684\u6570\u636e\u8fdb\u884c\u63a8\u7406\uff08\u5206\u7c7b\uff09\u3002\u5982\u524d\u6240\u8ff0\uff0c\u63a8\u7406\u9636\u6bb5\u4e00\u822c\u4f1a\u7701\u7565\u8f93\u51fa\u5c42\u7684softmax\u51fd\u6570\u3002\u5728\u8f93\u51fa\u5c42\u4f7f\u7528softmax\u51fd\u6570\u662f\u56e0\u4e3a\u5b83\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u6709\u5173\u7cfb\u3002\n\n### \u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u6570\u91cf\n\n\u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u6570\u91cf\u9700\u8981\u6839\u636e\u5f85\u89e3\u51b3\u7684\u95ee\u9898\u6765\u51b3\u5b9a\u3002\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff0c\u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u6570\u91cf\u4e00\u822c\u8bbe\u5b9a\u4e3a\u7c7b\u522b\u7684\u6570\u91cf\u3002\n\n## \u624b\u5199\u6570\u5b57\u8bc6\u522b\n\n\u6c42\u89e3\u673a\u5668\u5b66\u4e60\u95ee\u9898\u7684\u6b65\u9aa4\u7c89\u5c18\u641e\u5b66\u4e60\u548c\u63a8\u7406\u4e24\u4e2a\u9636\u6bb5\u8fdb\u884c\uff0c\u548c\u5176\u4e00\u6837\uff0c\u795e\u7ecf\u7f51\u7edc\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u4e5f\u9700\u8981\u9996\u5148\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\uff08\u5b66\u4e60\u6570\u636e\uff09\u8fdb\u884c\u6743\u91cd\u53c2\u6570\u7684\u5b66\u4e60\uff1b\u8fdb\u884c\u63a8\u7406\u65f6\uff0c\u4f7f\u7528\u521a\u624d\u5b66\u4e60\u5230\u7684\u53c2\u6570\uff0c\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u3002","88ba0d94":"\u53ef\u4ee5\u770b\u51fa\uff0c\u611f\u77e5\u673a\u4e2d\u795e\u7ecf\u5143\u4e4b\u95f4\u6d41\u52a8\u7684\u662f0\u62161\u7684\u4e8c\u5143\u4fe1\u53f7\uff0c\u800c\u795e\u7ecf\u7f51\u7edc\u4e2d\u6d41\u52a8\u7684\u662f\u8fde\u7eed\u7684\u5b9e\u6570\u503c\u4fe1\u53f7\u3002\n\n\u7b80\u5355\u603b\u7ed3\u5982\u4e0b\uff1a\n\n1. sigmoid\u51fd\u6570\u5177\u6709\u5e73\u6ed1\u6027\u3002\n2. \u4e24\u4e2a\u51fd\u6570\u7ed3\u6784\u5747\u662f\u201c\u8f93\u5165\u5c0f\u65f6\uff0c\u8f93\u51fa\u63a5\u8fd10\u6216\u4e3a0\uff0c\u968f\u7740\u8f93\u5165\u589e\u5927\uff0c\u8f93\u51fa\u8d8b\u5411\u4e8e1\u6216\u53d8\u4e3a1\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8f93\u5165\u4fe1\u53f7\u4e3a\u91cd\u8981\u4fe1\u606f\u65f6\uff0c\u9636\u8dc3\u51fd\u6570\u548csigmoid\u51fd\u6570\u90fd\u4f1a\u8f93\u51fa\u8f83\u5927\u7684\u503c\uff1b\u5f53\u8f93\u5165\u4fe1\u53f7\u4e3a\u4e0d\u91cd\u8981\u7684\u4fe1\u606f\u65f6\uff0c\u4e24\u8005\u90fd\u8f93\u51fa\u8f83\u5c0f\u7684\u503c\u3002\n3. \u4e0d\u7ba1\u8f93\u5165\u4fe1\u53f7\u591a\u5927\u591a\u5c0f\uff0c\u8f93\u51fa\u4fe1\u53f7\u503c\u8303\u56f4\u57280-1\u4e4b\u95f4\u3002\n4. \u4e24\u8005\u5747\u4e3a\u975e\u7ebf\u6027\u51fd\u6570\u3002\n\n**\u795e\u7ecf\u7f51\u7edc\u7684\u6fc0\u6d3b\u51fd\u6570\u5fc5\u987b\u4f7f\u7528\u975e\u7ebf\u6027\u51fd\u6570\u3002**\u82e5\u4f7f\u7528\u7ebf\u6027\u51fd\u6570\uff0c\u52a0\u795e\u7ecf\u7f51\u7edc\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u7ebf\u6027\u51fd\u6570\u7684\u95ee\u9898\u662f\u4e0d\u7ba1\u5982\u4f55\u52a0\u6df1\u5c42\u6570\uff0c\u603b\u662f\u5b58\u5728\u4e0e\u4e4b\u7b49\u6548\u7684\u201c\u65e0\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u201d\u3002\n\n\u4e3e\u4f8b\uff1a\u82e5\u5c06\u7ebf\u6027\u51fd\u6570$h(x)=cx$\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u628a$y(x)=h(h(h(x)))$\u7684\u8fd0\u7b97\u5bf9\u5e943\u5c42\u795e\u7ecf\u7f51\u7edc\uff0c\u8fd9\u4e2a\u8fd0\u7b97\u4f1a\u8fdb\u884c$y(x)=c\\times c\\times c\\times x$\u7684\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4f46\u662f\u540c\u6837\u7684\u5904\u7406\u53ef\u4ee5\u7531$y(x)=ax$\u8fd9\u4e00\u6b21\u7684\u4e58\u6cd5\u8fd0\u7b97\uff08\u5373\u6ca1\u6709\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff09\u6765\u8868\u793a\u3002\u6ce8\u610f\u8fd9\u91cc$a=c^{3}$\u3002\n\n### ReLU\u51fd\u6570\n\n\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u53d1\u5c55\u53f2\u4e0a\uff0csigmoid\u51fd\u6570\u5f88\u65e9\u5c31\u5f00\u59cb\u4f7f\u7528\u4e86\uff0c\u800c\u6700\u8fd1\u5219\u4e3b\u8981\u4f7f\u7528ReLU(Rectified Linear Unit)\u51fd\u6570\u3002\n\nReLU\u51fd\u6570\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u51fd\u6570\u3002ReLU\u51fd\u6570\u5728\u8f93\u5165\u5927\u4e8e0\u65f6\uff0c\u76f4\u63a5\u8f93\u51fa\u8be5\u503c\uff1b\u5728\u8f93\u5165\u5c0f\u4e8e0\u65f6\uff0c\u8f93\u51fa0\u3002ReLU\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u4e3a\u4e0b\u9762\u7684\u5f0f\u5b50\uff1a\n\n$$\nh(x)=\\begin{cases}\nx&(x>0) \\\\ 0&(x\\leq 0)\n\\end{cases}\n$$","ff363472":"\u8d8a\u662f\u540e\u9762\u7684\u5c42\uff0c\u56fe\u50cf\u53d8\u5f97\u8d8a\u6b6a\u659c\uff0c\u4f46\u662f\u5448\u73b0\u4e86\u6bd4\u4e4b\u524d\u66f4\u6709\u5e7f\u5ea6\u7684\u5206\u5e03\u3002\u56e0\u4e3a\u5404\u5c42\u95f4\u4f20\u9012\u7684\u6570\u636e\u6709\u9002\u5f53\u7684\u5e7f\u5ea6\uff0c\u6240\u4ee5`sigmoid`\u51fd\u6570\u7684\u8868\u73b0\u529b\u4e0d\u53d7\u9650\u5236\uff0c\u6709\u671b\u8fdb\u884c\u641e\u7b11\u7684\u5b66\u4e60\u3002\u4e0a\u9762\u7684\u56fe\u4e2d\u540e\u9762\u7684\u5c42\u7684\u5206\u5e03\u7a0d\u5fae\u6709\u4e9b\u6b6a\u659c\u3002\u5982\u679c\u7528`tanh`\u51fd\u6570\uff08\u53cc\u66f2\u7ebf\u51fd\u6570\uff09\u4ee3\u66ff`sigmoid`\u51fd\u6570\uff0c\u8fd9\u4e2a\u7a0d\u5fae\u6b6a\u659c\u7684\u95ee\u9898\u5c31\u80fd\u5f97\u5230\u6539\u5584\u3002\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528`tanh`\u51fd\u6570\u540e\uff0c\u4f1a\u5448\u6f02\u4eae\u7684\u540a\u949f\u578b\u5206\u5e03\u3002`tanh`\u51fd\u6570\u548c`sigmoid`\u51fd\u6570\u540c\u662fS\u578b\u66f2\u7ebf\u51fd\u6570\uff0c\u4f46`tanh`\u51fd\u6570\u662f\u5173\u4e8e\u539f\u70b9$(0,0)$\u5bf9\u79f0\u7684S\u578b\u66f2\u7ebf\u51fd\u6570\uff0c\u800c`sigmoid`\u51fd\u6570\u662f\u5173\u4e8e$(x,y)=(0,0.5)$\u5bf9\u79f0\u7684S\u578b\u66f2\u7ebf\u3002\u4f17\u6240\u5468\u77e5\uff0c\u7528\u4f5c\u6fc0\u6d3b\u51fd\u6570\u7684\u51fd\u6570\u6700\u597d\u5177\u6709\u5173\u4e8e\u539f\u70b9\u5bf9\u79f0\u7684\u6027\u8d28\u3002\n\n### ReLU\u7684\u6743\u91cd\u521d\u59cb\u503c\n\nXavier\u521d\u59cb\u503c\u662f\u4ee5\u6fc0\u6d3b\u51fd\u6570\u662f\u7ebf\u6027\u51fd\u6570\u4e3a\u524d\u63d0\u800c\u63a8\u5bfc\u51fa\u6765\u7684\u3002\u56e0\u4e3a`sigmoid`\u51fd\u6570\u548c`tanh`\u51fd\u6570\u5de6\u53f3\u5bf9\u79f0\uff0c\u4e14\u4e2d\u592e\u9644\u8fd1\u53ef\u4ee5\u89c6\u4f5c\u7ebf\u6027\u51fd\u6570\uff0c\u6240\u4ee5\u9002\u5408\u4f7f\u7528Xavier\u521d\u59cb\u503c\u3002\u4f46\u5f53\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528`ReLU`\u65f6\uff0c\u4e00\u822c\u63a8\u8350\u4f7f\u7528ReLU\u4e13\u7528\u7684\u521d\u59cb\u503c\uff0c\u4e5f\u5c31\u662fKaiming He\u7b49\u4eba\u63a8\u8350\u7684\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u201cHe\u521d\u59cb\u503c\u201d\u3002\n\n\u5f53\u524d\u4e00\u5c42\u7684\u8282\u70b9\u6570\u4e3a$n$\u65f6\uff0cHe\u521d\u59cb\u503c\u4f7f\u7528\u6807\u51c6\u5dee\u4e3a$\\sqrt{\\frac{2}{n}}$\u7684\u9ad8\u65af\u5206\u5e03\u3002\u5f53Xavier\u521d\u59cb\u503c\u662f$\\sqrt{\\frac{1}{n}}$\u65f6\uff0c\uff08\u76f4\u89c2\u4e0a\uff09\u53ef\u4ee5\u89e3\u91ca\u4e3a\uff0c\u56e0\u4e3aReLU\u7684\u8d1f\u503c\u8d8b\u4e8e\u7684\u503c\u4e3a0\uff0c\u672a\u6765\u4f7f\u5b83\u66f4\u6709\u5e7f\u5ea6\uff0c\u6240\u4ee5\u9700\u89812\u500d\u7684\u7cfb\u6570\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5f53\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528`ReLU`\u65f6\uff0c\u6743\u91cd\u521d\u59cb\u503c\u4f7f\u7528He\u521d\u59cb\u503c\uff0c\u5f53\u6fc0\u6d3b\u51fd\u6570\u4e3a`sigmoid`\u6216`tanh`\u7b49S\u578b\u66f2\u7ebf\u51fd\u6570\u65f6\uff0c\u521d\u59cb\u503c\u4f7f\u7528Xavier\u521d\u59cb\u503c\u3002\u8fd9\u662f\u76ee\u524d\u7684\u6700\u4f73\u5b9e\u8df5\u3002\n\n### \u57fa\u4e8eMNIST\u6570\u636e\u96c6\u7684\u6743\u91cd\u521d\u59cb\u503c\u7684\u6bd4\u8f83","d781c79d":"\u5f53x\u548cy\u7684\u5143\u7d20\u4e2a\u6570\u76f8\u540c\u65f6\uff0c\u53ef\u4ee5\u5bf9\u5404\u4e2a\u5143\u7d20\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u3002\u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e0d\u540c\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\u3002\u6240\u4ee5**\u5143\u7d20\u4e2a\u6570\u4fdd\u6301\u4e00\u81f4\u975e\u5e38\u91cd\u8981**\u3002\n\n\u53e6\u5916\uff0c\u5bf9\u5e94\u5143\u7d20\u7684\u82f1\u6587\u662felement-wise\uff0c\u6bd4\u5982\u201c\u5bf9\u5e94\u5143\u7d20\u7684\u4e58\u6cd5\u201d\u5c31\u662felement-wisse product","eab0c0ea":"# Python\u5165\u95e8\n## NumPy","cc7bd725":"\u6b63\u5411\u4f20\u64ad\u65f6\u5c06\u8f93\u51fa\u4fdd\u5b58\u5728\u4e86\u5b9e\u4f8b\u53d8\u91cfout\u4e2d\u3002\u7136\u540e\uff0c\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u4f7f\u7528\u8be5\u53d8\u91cfout\u8fdb\u884c\u8ba1\u7b97\u3002","2e1e3a4f":"## \u591a\u7ef4\u6570\u7ec4\u7684\u8fd0\u7b97","93f9c788":"\u5b9e\u9a8c\u7ed3\u679c\u89c1\u4e0a\u56fe\u3002\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\uff0c\u5b9e\u9a8c\u7ed3\u679c\u4f1a\u968f\u7740\u5b66\u4e60\u7387\u7b49\u8d85\u53c2\u6570\u3001\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\uff08\u51e0\u5c42\u6df1\u7b49\uff09\u7684\u4e0d\u540c\u800c\u53d1\u751f\u53d8\u5316\u3002\u4e0d\u8fc7\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e0eSGD\u76f8\u6bd4\uff0c\u5176\u4ed63\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b66\u4e60\u5f97\u66f4\u5feb\uff0c\u6709\u65f6\u6700\u7ec8\u7684\u8bc6\u522b\u7cbe\u5ea6\u4e5f\u66f4\u9ad8\u3002\n\n## \u6743\u91cd\u7684\u521d\u59cb\u503c\n\n### \u53ef\u4ee5\u5c06\u6743\u91cd\u7684\u521d\u59cb\u503c\u8bbe\u4e3a0\u5417\uff1f\n\n\u7b54\u6848\uff1a**\u4e0d\u884c**\uff0c\u5c06\u6743\u91cd\u521d\u59cb\u503c\u8bbe\u4e3a0\u7684\u8bdd\uff0c\u5c06\u65e0\u6cd5\u6b63\u786e\u8fdb\u884c\u5b66\u4e60\u3002\n\n**\u6743\u503c\u8870\u51cf**\uff1a\u4e00\u79cd\u4ee5\u51cf\u5c11\u6743\u91cd\u53c2\u6570\u7684\u503c\u4e3a\u76ee\u7684\u8fdb\u884c\u5b66\u4e60\u7684\u65b9\u6cd5\u3002\u901a\u8fc7\u51cf\u5c0f\u6743\u91cd\u7684\u503c\u6765\u6291\u5236\u8fc7\u62df\u5408\u7684\u53d1\u751f\u3002\n\n\u5982\u679c\u60f3\u51cf\u5c0f\u6743\u91cd\u7684\u503c\uff0c\u4e00\u5f00\u59cb\u5c31\u5c06\u521d\u59cb\u503c\u8bbe\u4e3a\u8f83\u5c0f\u7684\u503c\u624d\u662f\u6b63\u9014\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u8fd9\u4e4b\u524d\u7684\u6743\u91cd\u521d\u59cb\u503c\u90fd\u662f\u50cf`0.01 * np.random.randn(10, 100)`\u8fd9\u6837\uff0c\u4f7f\u7528\u7531\u9ad8\u65af\u5206\u5e03\u751f\u6210\u7684\u503c\u4e58\u4ee50.01\u540e\u5f97\u5230\u7684\u503c\uff08\u6807\u51c6\u5dee\u4e3a0.01\u7684\u9ad8\u65af\u5206\u5e03\uff09\u3002\n\n\u4e25\u683c\u8bf4\uff0c\u5c06\u6743\u91cd\u521d\u59cb\u503c\u8bbe\u4e3a0\u7b49\u540c\u4e8e\u5c06\u6743\u91cd\u521d\u59cb\u503c\u8bbe\u4e3a\u540c\u4e00\u4e2a\u503c\uff0c\u8fd9\u662f\u4e0d\u884c\u7684\u3002\u56e0\u4e3a\u5728\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u4e2d\uff0c\u6240\u6709\u7684\u6743\u91cd\u503c\u90fd\u4f1a\u8fdb\u884c\u76f8\u540c\u7684\u66f4\u65b0\u3002\n\n\u6bd4\u5982\uff0c\u57282\u5c42\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5047\u8bbe\u7b2c1\u5c42\u548c\u7b2c2\u5c42\u7684\u6743\u91cd\u4e3a0\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6b63\u5411\u4f20\u64ad\u65f6\uff0c\u56e0\u4e3a\u8f93\u5165\u5c42\u7684\u6743\u91cd\u4e3a0\uff0c\u6240\u4ee5\u7b2c2\u5c42\u7684\u795e\u7ecf\u5143\u5168\u4e0d\u4f1a\u88ab\u4f20\u9012\u76f8\u540c\u7684\u503c\u3002\u7b2c2\u5c42\u7684\u795e\u7ecf\u5143\u4e2d\u5168\u90e8\u8f93\u5165\u76f8\u540c\u7684\u503c\uff0c\u8fd9\u610f\u5473\u7740\u53cd\u5411\u4f20\u64ad\u65f6\u7b2c2\u5c42\u7684\u6743\u91cd\u5168\u90e8\u90fd\u4f1a\u8fdb\u884c\u76f8\u540c\u7684\u66f4\u65b0\u3002\u56e0\u6b64\uff0c\u6743\u91cd\u88ab\u66f4\u65b0\u4e3a\u76f8\u540c\u7684\u503c\uff0c\u5e76\u62e5\u6709\u4e86\u5bf9\u79f0\u7684\u503c\uff08\u91cd\u590d\u7684\u503c\uff09\u3002\u8fd9\u4f7f\u5f97\u795e\u7ecf\u7f51\u7edc\u62e5\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u6743\u91cd\u7684\u610f\u4e49\u4e27\u5931\u4e86\u3002\u4e3a\u4e86\u9632\u6b62\u201c\u6743\u91cd\u5747\u4e00\u5316\u201d\uff0c\u4e25\u683c\u5730\u8bb2\u662f\u4e3a\u4e86\u74e6\u89e3\u6743\u91cd\u7684\u5bf9\u79f0\u7ed3\u6784\uff0c\u5fc5\u987b\u968f\u673a\u751f\u6210\u521d\u59cb\u503c\u3002\n\n### \u9690\u85cf\u5c42\u7684\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\n\n\u89c2\u5bdf\u6743\u91cd\u521d\u59cb\u503c\u662f\u5982\u4f55\u5f71\u54cd\u9690\u85cf\u5c42\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\uff0c\u5411\u4e00\u4e2a5\u5c42\u795e\u7ecf\u7f51\u7edc\uff08\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528sigmoid\u51fd\u6570\uff09\u4f20\u5165\u968f\u673a\u751f\u6210\u7684\u8f93\u5165\u6570\u636e\uff0c\u7528\u76f4\u65b9\u56fe\u7ed8\u5236\u5404\u5c42\u6fc0\u6d3b\u503c\u7684\u6570\u636e\u5206\u5e03\u3002\n\n> \u8fd9\u91cc\u6211\u4eec\u5c06\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u51fa\u6570\u636e\u79f0\u4e3a\u201c\u6fc0\u6d3b\u503c\u201d\uff0c\u4f46\u662f\u6709\u7684\u6587\u732e\u4e2d\u4f1a\u5c06\u5728\u5c42\u4e4b\u95f4\u6d41\u52a8\u7684\u6570\u636e\u4e5f\u79f0\u4e3a\u201c\u6fc0\u6d3b\u503c\u201d\u3002","89dc6134":"### \u504f\u5bfc\u6570\n\n\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\u51fd\u6570$f(x_{0},x_{1}) = x^2_{0} + x^2_{1}$\uff1a","758a343a":"\u5f53\u76d1\u7763\u6570\u636e\u662f\u6807\u7b7e\u5f62\u5f0f\uff08\u975eont-hot\u8868\u793a\uff0c\u800c\u662f\u50cf\u201c2\u201d\u3001\u201c7\u201d\u8fd9\u6837\u7684\u5177\u4f53\u6807\u7b7e\uff09\u65f6\uff0c\u4ea4\u53c9\u71b5\u8bef\u5dee\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a","27327dc2":"### \u795e\u7ecf\u7f51\u7edc\u7684\u5185\u79ef\n\n\u4f7f\u7528NumPy\u77e9\u9635\u5b9e\u73b0\u795e\u7ecf\u7f51\u7edc\u3002","6e36c659":"\u4e0a\u9762\u4ee3\u7801\u4e2d\u795e\u7ecf\u7f51\u7edc\u67095\u5c42\uff0c\u6bcf\u5c42\u6709100\u4e2a\u795e\u7ecf\u5143\uff0c\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528\u7684\u662fReLU\u3002\u53ef\u4ee5\u770b\u51fa`std=0.01`\u5b8c\u5168\u65e0\u6cd5\u8fdb\u884c\u5b66\u4e60\uff0c\u4e3b\u8981\u56e0\u4e3a\u6b63\u5411\u4f20\u64ad\u4e2d\u4f20\u9012\u7684\u503c\u5f88\u5c0f\uff08\u96c6\u4e2d\u57280\u9644\u8fd1\u7684\u6570\u636e\uff09\u3002\u56e0\u6b64\uff0c\u9006\u5411\u4f20\u64ad\u65f6\u6c42\u5bfc\u7684\u68af\u5ea6\u4e5f\u5f88\u5c0f\uff0c\u6743\u91cd\u51e0\u4e4e\u4e0d\u8fdb\u884c\u66f4\u65b0\u3002\u76f8\u53cd\uff0c\u5f53\u6743\u91cd\u521d\u59cb\u503c\u4e3aXavier\u521d\u59cb\u503c\u548cHe\u521d\u59cb\u503c\u65f6\uff0c\u5b66\u4e60\u8fdb\u884c\u5f97\u5f88\u987a\u5229\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u53d1\u73b0He\u521d\u59cb\u503c\u65f6\u7684\u5b66\u4e60\u8fdb\u5ea6\u66f4\u5feb\u4e00\u4e9b\u3002\n\n\u7efc\u4e0a\uff0c\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u6743\u91cd\u521d\u59cb\u503c\u975e\u5e38\u91cd\u8981\u3002\u5f88\u591a\u65f6\u5019\u6743\u91cd\u521d\u59cb\u503c\u7684\u8bbe\u5b9a\u5173\u7cfb\u5230\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u80fd\u5426\u6210\u529f\u3002\u6743\u91cd\u521d\u59cb\u503c\u7684\u91cd\u8981\u6027\u5bb9\u6613\u88ab\u5ffd\u89c6\uff0c\u800c\u4efb\u4f55\u4e8b\u60c5\u7684\u5f00\u59cb\uff08\u521d\u59cb\u503c\uff09\u603b\u662f\u5173\u952e\u7684\uff0c\u56e0\u6b64\u5728\u7ed3\u675f\u672c\u8282\u94b1\uff0c\u518d\u6b21\u5f3a\u8c03\u4e00\u4e0b\u6743\u91cd\u521d\u59cb\u503c\u7684\u91cd\u8981\u6027\u3002\n\n## Batch Normalization\n\nBatch Norm\u7684\u601d\u8def\u662f\u8c03\u6574\u5404\u5c42\u7684\u6fc0\u6d3b\u503c\u5206\u5e03\u4f7f\u5176\u62e5\u6709\u9002\u5f53\u7684\u5e7f\u5ea6\u3002\u4e3a\u6b64\uff0c\u8981\u5411\u795e\u7ecf\u7f51\u7edc\u4e2d\u63d2\u5165\u5bf9\u6570\u636e\u5206\u5e03\u8fdb\u884c\u6b63\u89c4\u5316\u7684\u5c42\uff0c\u5373Batch Normalization\u5c42\uff08\u4e0b\u6587\u7b80\u79f0Batch Norm\u5c42\uff09\u3002Batch Norm\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u8fdb\u884c\u4f7f\u6570\u636e\u5206\u5e03\u7684\u5747\u503c\u4e3a0\u3001\u65b9\u5dee\u4e3a1\u7684\u6b63\u89c4\u5316\u3002\u7528\u6570\u5b66\u8868\u793a\u7684\u8bdd\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n$$\\mu_{\\mathit{B}} \\gets \\frac{1}{m} \\sum_{i=1}^{m} x_{i}$$\n\n$$\\sigma^{2}_{\\mathit{B}} \\gets \\frac{1}{m} \\sum_{i=1}^{m} (x_{i}-\\mu_{\\mathit{B}})^{2}$$\n\n$$\\hat{x}_{i} \\gets \\frac{x_{i}-\\mu_{\\mathit{B}}}{\\sqrt{\\sigma^{2}_{\\mathit{B}}+\\varepsilon}}$$\n\n\u8fd9\u91cc\u5bf9mini-batch\u7684$m$\u4e2a\u8f93\u5165\u6570\u636e\u7684\u96c6\u5408$\\mathit{B}=\\{x_{i},x_{2},\\cdots,x_{m}\\}$\u6c42\u5747\u503c$\\mu_{\\mathit{B}}$\u548c\u65b9\u5dee$\\sigma^{2}_{B}$\u3002\u7136\u540e\uff0c\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u5747\u503c\u4e3a0\u3001\u65b9\u5dee\u4e3a1\uff08\u5408\u9002\u7684\u5206\u5e03\uff09\u7684\u6b63\u89c4\u5316\u3002\u4e0a\u5f0f\u4e2d\u7684$\\varepsilon$\u662f\u4e00\u4e2a\u5fae\u5c0f\u503c\uff08\u6bd4\u598210e-7\u7b49\uff09\uff0c\u5b83\u662f\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u9664\u4ee50\u7684\u60c5\u51b5\u3002\u901a\u8fc7\u5c06\u8fd9\u4e2a\u5904\u7406\u63d2\u5165\u5230\u6fc0\u6d3b\u51fd\u6570\u7684\u524d\u9762\u6216\u8005\u540e\u9762\uff0c\u53ef\u4ee5\u51cf\u5c0f\u6570\u636e\u5206\u5e03\u7684\u504f\u5411\u3002\n\n\u63a5\u7740\uff0cBatch Norm\u5c42\u4f1a\u5bf9\u6b63\u89c4\u5316\u540e\u7684\u6570\u636e\u8fdb\u884c\u7f29\u653e\u548c\u5e73\u79fb\u7684\u53d8\u6362\uff0c\u7528\u6570\u5b66\u5f0f\u53ef\u4ee5\u5982\u4e0b\u8868\u793a\uff1a\n\n$$y_{i} \\gets \\gamma\\hat{x}_{i}+\\beta$$\n\n\u8fd9\u91cc\uff0c$\\gamma$\u548c$\\beta$\u662f\u53c2\u6570\u3002\u4e00\u5f00\u59cb\uff0c$\\gamma = 1$\uff0c$\\beta = 0$\uff0c\u7136\u540e\u518d\u901a\u8fc7\u5b66\u4e60\u8c03\u6574\u5230\u5408\u9002\u7684\u503c\u3002\n\n\u4e0a\u9762\u5c31\u662fBatch Norm\u7684\u7b97\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u662f\u795e\u7ecf\u7f51\u7edc\u4e0a\u7684\u6b63\u5411\u4f20\u64ad\u3002\u7ecf\u8fc7\u8bc4\u4f30\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u662f\u4f7f\u7528Batch Norm\u65f6\u5b66\u4e60\u8fdb\u884c\u5f97\u66f4\u5feb\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a\uff0c\u5728\u4e0d\u4f7f\u7528Batch Norm\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e0d\u8d4b\u4e88\u4e00\u4e2a\u5c3a\u5ea6\u597d\u7684\u521d\u59cb\u503c\uff0c\u5b66\u4e60\u5c06\u5b8c\u5168\u65e0\u6cd5\u8fdb\u884c\u3002\n\n\u7efc\u4e0a\uff0c\u901a\u8fc7\u4f7f\u7528Batch Norm\uff0c\u53ef\u4ee5\u63a8\u52a8\u5b66\u4e60\u7684\u8fdb\u884c\u3002\u5e76\u4e14\uff0c\u5bf9\u6743\u91cd\u521d\u59cb\u503c\u53d8\u5f97\u5065\u58ee\uff08\u8868\u793a\u4e0d\u90a3\u4e48\u4f9d\u8d56\u521d\u59cb\u503c\uff09\u3002\n\n## \u6b63\u5219\u5316\n\n**\u8fc7\u62df\u5408\uff1a**\u53ea\u80fd\u62df\u5408\u8bad\u7ec3\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u5f88\u597d\u5730\u62df\u5408\u4e0d\u5305\u542b\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u5176\u4ed6\u6570\u636e\u7684\u72b6\u6001\u3002\n\n\u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u662f\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b\uff0c\u5373\u4fbf\u662f\u6ca1\u6709\u5305\u542b\u5728\u8bad\u7ec3\u6570\u636e\u91cc\u7684\u672a\u89c2\u6d4b\u6570\u636e\uff0c\u4e5f\u5e0c\u671b\u6a21\u578b\u53ef\u4ee5\u8fdb\u884c\u6b63\u786e\u7684\u8bc6\u522b\u3002\n\n\u53d1\u751f\u8fc7\u62df\u5408\u7684\u539f\u56e0\uff1a\n\n1. \u6a21\u578b\u62e5\u6709\u5927\u91cf\u53c2\u6570\u3001\u8868\u73b0\u529b\u5f3a\u3002\n2. \u8bad\u7ec3\u6570\u636e\u5c11\u3002\n\n### \u6743\u503c\u8870\u51cf\n\n\u6743\u503c\u8870\u51cf\u662f\u4e00\u76f4\u4ee5\u6765\u7ecf\u5e38\u88ab\u4f7f\u7528\u7684\u4e00\u79cd\u6291\u5236\u8fc7\u62df\u5408\u7684\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u901a\u8fc7\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\u5bf9\u5927\u7684\u6743\u91cd\u8fdb\u884c\u60e9\u7f5a\uff0c\u6765\u6291\u5236\u8fc7\u62df\u5408\u3002\u5f88\u591a\u8fc7\u62df\u5408\u539f\u672c\u5c31\u662f\u56e0\u4e3a\u6743\u91cd\u53c2\u6570\u53d6\u503c\u8fc7\u5927\u624d\u53d1\u751f\u7684\u3002\n\n\u524d\u6587\u53ef\u77e5\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u76ee\u7684\u662f\u51cf\u5c0f\u635f\u5931\u51fd\u6570\u7684\u503c\u3002\u8fd9\u65f6\uff0c\u4f8b\u5982\u4e3a\u635f\u5931\u51fd\u6570\u52a0\u4e0a\u6743\u91cd\u7684\u5e73\u65b9\u8303\u6570\uff08L2\u8303\u6570\uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u6291\u5236\u6743\u91cd\u53d8\u5927\u3002\u7528\u7b26\u53f7\u8868\u793a\u7684\u8bdd\uff0c\u5982\u679c\u5c06\u6743\u91cd\u8bb0\u4e3a$W$\uff0cL2\u8303\u6570\u7684\u6743\u503c\u8870\u51cf\u5c31\u662f$\\frac{1}{2} \\lambda W^{2}$\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a$\\frac{1}{2} \\lambda W^{2}$\u52a0\u5230\u635f\u5931\u51fd\u6570\u4e0a\u3002\u8fd9\u91cc\uff0c$\\lambda$\u662f\u63a7\u5236\u6b63\u5219\u5316\u5f3a\u5ea6\u7684\u8d85\u53c2\u6570\u3002$\\lambda$\u8bbe\u7f6e\u7684\u8d8a\u5927\uff0c\u5bf9\u5927\u7684\u6743\u91cd\u65bd\u52a0\u7684\u60e9\u7f5a\u5c31\u8d8a\u91cd\u3002\u6b64\u5916\uff0c$\\frac{1}{2} \\lambda W^{2}$\u5f00\u5934\u7684$\\frac{1}{2}$\u662f\u7528\u4e8e\u5c06$\\frac{1}{2} \\lambda W^{2}$\u7684\u6c42\u5bfc\u7ed3\u679c\u53d8\u6210$\\lambda W$\u7684\u8c03\u6574\u7528\u5e38\u91cf\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u6743\u91cd\uff0c\u6743\u503c\u8870\u51cf\u65b9\u6cd5\u90fd\u4f1a\u4e3a\u635f\u5931\u51fd\u6570\u52a0\u4e0a$\\frac{1}{2} \\lambda W^{2}$\u3002\u56e0\u6b64\uff0c\u5728\u6c42\u6743\u91cd\u68af\u5ea6\u7684\u8ba1\u7b97\u4e2d\uff0c\u8981\u4e3a\u4e4b\u524d\u7684\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u7ed3\u679c\u52a0\u4e0a\u6b63\u5219\u5316\u9879\u7684\u5bfc\u6570$\\lambda W$\u3002\n\nL2\u8303\u6570\u76f8\u5f53\u4e8e\u5404\u4e2a\u5143\u7d20\u7684\u5e73\u65b9\u548c\u3002\u7528\u6570\u5b66\u5f0f\u8868\u793a\u7684\u8bdd\uff0c\u5047\u8bbe\u6709\u6743\u91cd$W=(w_{1},w_{2},\\cdots ,w_{n})$\uff0c\u5219L2\u8303\u6570\u53ef\u7528$\\sqrt{w_{1}^{2}+w_{2}^{2}+\\cdots +w_{n}^{2}}$\u8ba1\u7b97\u51fa\u6765\u3002\n\n\u9664\u4e86L2\u8303\u6570\uff0c\u8fd8\u6709L1\u8303\u6570\u3001L\u221e\u8303\u6570\u7b49\u3002L!\u8303\u6570\u662f\u5404\u4e2a\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff0c\u76f8\u5f53\u4e8e$|w_{1}^{2}|+|w_{2}^{2}|+\\cdots +|w_{n}^{2}|$\u3002L\u221e\u8303\u6570\u4e5f\u79f0\u4e3aMax\u8303\u6570\uff0c\u76f8\u5f53\u4e8e\u5404\u4e2a\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002L2\u8303\u6570\u3001L1\u8303\u6570\u3001L\u221e\u8303\u6570\u90fd\u53ef\u4ee5\u7528\u4f5c\u6b63\u5219\u5316\u9879\uff0c\u5b83\u4eec\u5404\u6709\u5404\u7684\u7279\u70b9\u3002","6a371581":"`Relu`\u7c7b\u6709\u5b9e\u4f8b\u53d8\u91cf`mask`\u3002\u8fd9\u4e2a\u53d8\u91cf`mask`\u662f\u7531`True\/False`\u6784\u6210\u7684NumPy\u6570\u7ec4\uff0c\u5b83\u4f1a\u628a\u6b63\u5411\u4f20\u64ad\u65f6\u7684\u8f93\u5165x\u7684\u5143\u7d20\u4e2d\u5c0f\u4e8e\u7b49\u4e8e0\u7684\u5730\u65b9\u4fdd\u5b58\u4e3a`True`\uff0c\u5176\u4ed6\u5927\u4e8e0\u7684\u5143\u7d20\u4fdd\u5b58\u4e3a`False`\u3002\n\n\u5982\u679c\u6b63\u5411\u4f20\u64ad\u65f6\u7684\u8f93\u5165\u503c\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u5219\u53cd\u5411\u4f20\u64ad\u7684\u503c\u4e3a0\u3002\u56e0\u6b64\uff0c\u53cd\u5411\u4f20\u64ad\u4e2d\u4f1a\u4f7f\u7528\u6b63\u5411\u4f20\u64ad\u65f6\u4fdd\u5b58\u7684`mask`\uff0c\u5c06\u4ece\u4e0a\u6e38\u4f20\u6765\u7684`dout`\u7684`mask`\u4e2d\u7684\u5143\u7d20\u4e3a`True`\u7684\u5730\u65b9\u8bbe\u4e3a0.","d4f07239":"\u518d\u4ee5$f(x,y)=\\frac{1}{20} x^2+y^2$\u4e3a\u4f8b\u3002\u548cSGD\u76f8\u6bd4\uff0c\u57fa\u4e8eAdam\u7684\u66f4\u65b0\u8fc7\u7a0b\u5c31\u50cf\u5c0f\u7403\u5728\u7897\u4e2d\u6eda\u52a8\u4e00\u6837\u3002\u867d\u7136Momentum\u4e5f\u6709\u7c7b\u4f3c\u7684\u79fb\u52a8\uff0c\u4f46\u662f\u76f8\u6bd4\u4e4b\u4e0b\uff0cAdam\u7684\u5c0f\u7403\u5de6\u53f3\u6447\u6643\u7684\u7a0b\u5ea6\u6709\u6240\u51cf\u8f7b\u3002\n\nAdam\u4f1a\u8bbe\u7f6e3\u4e2a\u8d85\u53c2\u6570\u3002\u4e00\u4e2a\u662f\u5b66\u4e60\u7387\uff08\u8bba\u6587\u4e2d\u4ee5$\\alpha$\u51fa\u73b0\uff09\uff0c\u53e6\u5916\u4e24\u4e2a\u662f\u4e00\u6b21momentum\u7cfb\u6570$\\beta_{1}$\u4e3a0.9\uff0c$\\beta_{2}$\u548c\u4e8c\u6b21momentum\u7cfb\u6570\u4e3a$\\beta_{2}$\u3002\u6839\u636e\u8bba\u6587\uff0c\u6807\u51c6\u7684\u8bbe\u5b9a\u503c\u662f$\\beta_{1}$\u4e3a0.9\uff0c$\\beta_{2}$\u4e3a0.999\u3002\u8bbe\u7f6e\u4e86\u8fd9\u4e9b\u503c\u540e\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u80fd\u987a\u5229\u8fd0\u884c\u3002\n\n### \u4f7f\u7528\u54ea\u79cd\u66f4\u65b0\u65b9\u6cd5\u5462\uff1f\n\n\u8fd94\u79cd\u65b9\u6cd5\u5404\u6709\u5404\u7684\u7279\u70b9\uff0c\u90fd\u6709\u5404\u81ea\u64c5\u957f\u548c\u4e0d\u64c5\u957f\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n### \u57fa\u4e8eMNIST\u6570\u636e\u96c6\u7684\u66f4\u65b0\u65b9\u6cd5\u7684\u6bd4\u8f83\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u9a8c\u4ee5\u4e00\u4e2a5\u5c42\u795e\u7ecf\u7f51\u7edc\u4e3a\u5bf9\u8c61\uff0c\u5176\u4e2d\u6bcf\u5c42\u6709100\u4e2a\u795e\u7ecf\u5143\u3002\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528\u7684ReLU\u3002","d4ae6a62":"\u5f02\u6216\u95e8\u662f\u4e00\u79cd\u591a\u5c42\u7ed3\u6784\u7684\u795e\u7ecf\u7f51\u7edc\u3002\u4e0e\u95e8\u3001\u6216\u95e8\u662f\u5355\u5c42\u611f\u77e5\u673a\uff0c\u800c\u5f02\u6216\u95e8\u662f2\u5c42\u611f\u77e5\u673a\u3002\u53e0\u52a0\u4e86\u591a\u5c42\u7684\u611f\u77e5\u673a\u4e5f\u79f0\u4e3a**\u591a\u5c42\u611f\u77e5\u673a**\u3002\n\n> \u5f02\u6216\u95e8\u611f\u77e5\u673a\u603b\u5171\u75313\u5c42\u6784\u6210\uff0c\u4f46\u662f\u56e0\u4e3a\u62e5\u6709\u6743\u91cd\u7684\u5c42\u5b9e\u8d28\u4e0a\u53ea\u67092\u5c42\uff08\u7b2c0\u5c42\u548c\u7b2c1\u5c42\u4e4b\u95f4\uff0c\u7b2c1\u5c42\u548c\u7b2c2\u5c42\u4e4b\u95f4\uff09\uff0c\u6240\u4ee5\u79f0\u4e3a\u201c2\u5c42\u611f\u77e5\u673a\u201d\u3002\u4e0d\u8fc7\uff0c\u6709\u7684\u6587\u732e\u8ba4\u4e3a\u5f02\u6216\u95e8\u611f\u77e5\u673a\u662f\u75313\u5c42\u6784\u6210\u7684\uff0c\u56e0\u6b64\u79f0\u5176\u4e3a\u201c3\u5c42\u611f\u77e5\u673a\u201d\u3002\n\n\u5f02\u6216\u95e82\u5c42\u611f\u77e5\u673a\u7684\u5177\u4f53\u6b65\u9aa4\uff1a\n\n1. \u7b2c0\u5c42\u7684\u4e24\u4e2a\u795e\u7ecf\u5143\u63a5\u6536\u8f93\u5165\u4fe1\u53f7\uff0c\u5e76\u5c06\u4fe1\u53f7\u53d1\u9001\u81f3\u7b2c1\u5c42\u7684\u795e\u7ecf\u5143\u3002\n2. \u7b2c1\u5c42\u7684\u795e\u7ecf\u5143\u5c06\u4fe1\u53f7\u53d1\u9001\u81f3\u7b2c2\u5c42\u7684\u795e\u7ecf\u5143\uff0c\u7b2c2\u5c42\u7684\u795e\u7ecf\u5143\u8f93\u51fa$y$\u3002\n\n\u901a\u8fc7\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u611f\u77e5\u673a\u5f97\u4ee5\u5b9e\u73b0\u5f02\u6216\u95e8\u3002\u8fd9\u4e5f\u53ef\u4ee5\u89e3\u91ca\u4e3a\u201c\u5355\u5c42\u611f\u77e5\u673a\u65e0\u6cd5\u8868\u8fbe\u7684\u4e1c\u897f\uff0c\u901a\u8fc7\u589e\u52a0\u4e00\u5c42\u5c31\u53ef\u4ee5\u89e3\u51b3\u201d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u8fc7\u53e0\u52a0\u5c42\uff08\u52a0\u6df1\u5c42\uff09\uff0c\u611f\u77e5\u673a\u80fd\u8fdb\u884c\u66f4\u52a0\u7075\u6d3b\u7684\u8868\u793a\u3002\n\n# \u795e\u7ecf\u7f51\u7edc\n\n\u611f\u77e5\u673a\u4f18\u7f3a\u70b9\uff1a\n\n1. \u5373\u4fbf\u5bf9\u4e8e\u590d\u6742\u7684\u51fd\u6570\uff0c\u611f\u77e5\u673a\u4e5f\u9690\u542b\u7740\u80fd\u591f\u8868\u793a\u5b83\u7684\u53ef\u80fd\u6027\u3002\n2. \u4f46\u8bbe\u5b9a\u6743\u91cd\u7684\u5de5\u4f5c\uff0c\u5373\u786e\u5b9a\u5408\u9002\u7684\u3001\u80fd\u7b26\u5408\u9884\u671f\u7684\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u6743\u91cd\uff0c\u73b0\u5728\u8fd8\u662f\u7531\u4eba\u5de5\u8fdb\u884c\u7684\u3002\n\n\u800c\u795e\u7ecf\u7f51\u7edc\u7684\u51fa\u73b0\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u8bbe\u5b9a\u6743\u91cd\u5de5\u4f5c\u7684\u7f3a\u70b9\u7684\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u53ef\u4ee5\u81ea\u52a8\u5730\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u5230\u5408\u9002\u7684\u6743\u91cd\u53c2\u6570\u3002\n\n## \u6fc0\u6d3b\u51fd\u6570\n\n\u5c06\u8f93\u5165\u4fe1\u53f7\u7684\u603b\u548c\u8f6c\u6362\u4e3a\u8f93\u51fa\u4fe1\u53f7\uff0c\u8fd9\u79cd\u51fd\u6570\u4e00\u822c\u79f0\u4e3a**\u6fc0\u6d3b\u51fd\u6570**\u3002\u6fc0\u6d3b\u51fd\u6570\u51b3\u5b9a\u5982\u4f55\u6765\u6fc0\u6d3b\u8f93\u5165\u4fe1\u53f7\u7684\u603b\u548c\u3002\u6fc0\u6d3b\u51fd\u6570\u662f\u8fde\u63a5\u611f\u77e5\u673a\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u6865\u6881\u3002\n\n\u611f\u77e5\u673a\u4e2d\u4f7f\u7528\u4e86\u9636\u8dc3\u51fd\u6570\uff08\u4e00\u65e6\u8f93\u5165\u8d85\u8fc7\u9608\u503c\uff0c\u5c31\u5207\u6362\u8f93\u51fa\u7684\u51fd\u6570\uff09\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\u3002\n\n### sigmoid\u51fd\u6570\n\n$$h(x)=\\frac{1}{1+exp(-x)}$$\n","ad2dd405":"Affine\u7684\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a","676671d9":"## 3\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u5b9e\u73b0\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u8fd0\u7b97\u53ef\u4ee5\u4f5c\u4e3a\u77e9\u9635\u8fd0\u7b97\u6253\u5305\u8fdb\u884c\u3002\n\n\u4efb\u4f55\u524d\u4e00\u5c42\u7684\u504f\u7f6e\u795e\u7ecf\u5143\u201c1\u201d\u90fd\u53ea\u6709\u4e00\u4e2a\u3002\u504f\u7f6e\u6743\u91cd\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u540e\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u7684\u6570\u91cf\uff08\u4e0d\u5305\u62ec\u540e\u4e00\u5c42\u7684\u504f\u7f6e\u795e\u7ecf\u5143\u201c1\u201d\uff09\u3002","981ba339":"\u8bf4\u660e\u4e00\u4e0b\uff0c\u51fd\u6570\u5185\u90e8\u5728\u8ba1\u7b97`np.log`\u65f6\uff0c\u52a0\u4e0a\u4e86\u4e00\u4e2a\u5fae\u5c0f\u503cdelta\u3002\u8fd9\u662f\u56e0\u4e3a\u5f53\u51fa\u73b0`np.log(0)`\u65f6\uff0c`np.log(0)`\u4f1a\u53d8\u4e3a\u8d1f\u65e0\u7a77\u5927\u7684-inf\uff0c\u5bfc\u81f4\u8ba1\u7b97\u65e0\u6cd5\u8fdb\u884c\uff0c\u6240\u4ee5\u4f5c\u4e3a\u4fdd\u62a4\u6027\u5bf9\u7b56\u589e\u52a0\u5fae\u5c0f\u503c\u3002","39c82b37":"### Sigmoid\u5c42\n\nsigmoid\u51fd\u6570\uff1a\n\n$$y=\\frac{1}{1+exp(-x)}$$","cc41f2b9":"\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u5355\u4e2a\u6570\u636e\u548c\u6279\u91cf\u6570\u636e\u7684\u4ea4\u53c9\u71b5\u8bef\u5dee\u51fd\u6570\uff1a","f2449d4c":"`pyplot`\u4e2d\u8fd8\u63d0\u4f9b\u4e86\u7528\u4e8e\u663e\u793a\u56fe\u50cf\u7684\u65b9\u6cd5`imshow()`\u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u4f7f\u7528`matplotlib.image`\u6a21\u5757\u7684`imread()`\u65b9\u6cd5\u8bfb\u5165\u56fe\u50cf\u3002","e265d144":"# \u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\n\n\u8fd9\u91cc\u6240\u8bf4\u7684\u201c\u5b66\u4e60\u201d\u662f\u6307\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u81ea\u52a8\u83b7\u53d6\u6700\u4f18\u6743\u91cd\u53c2\u6570\u7684\u8fc7\u7a0b\u3002\u5b66\u4e60\u7684\u76ee\u7684\u5c31\u662f\u4ee5\u635f\u5931\u51fd\u6570\u4e3a\u57fa\u51c6\uff0c\u627e\u51fa\u80fd\u4f7f\u5b83\u7684\u503c\u8fbe\u5230\u6700\u5c0f\u7684\u6743\u91cd\u53c2\u6570\u3002\n\n## \u4ece\u6570\u636e\u4e2d\u5b66\u4e60\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u7279\u5f81\u5c31\u662f\u53ef\u4ee5\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u3002**\u6240\u8c13\u201c\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u201d\uff0c\u662f\u6307\u53ef\u4ee5\u7531\u6570\u636e\u81ea\u52a8\u51b3\u5b9a\u6743\u91cd\u53c2\u6570\u7684\u503c**\u3002\n\n\u6570\u636e\u662f\u673a\u5668\u5b66\u4e60\u7684\u547d\u6839\u5b50\u3002\u6570\u636e\u662f\u673a\u5668\u5b66\u4e60\u7684\u6838\u5fc3\u3002\u8fd9\u79cd\u6570\u636e\u9a71\u52a8\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u8131\u79bb\u4e86\u8fc7\u5f80\u4ee5\u4eba\u4e3a\u4e2d\u5fc3\u7684\u65b9\u6cd5\u3002\n\n\u800c\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\u662f\u6781\u529b\u907f\u514d\u4eba\u4e3a\u4ecb\u5165\u7684\uff0c\u5c1d\u8bd5\u4ece\u6536\u96c6\u5230\u7684\u6570\u636e\u4e2d\u53d1\u73b0\u7b54\u6848\uff08\u6a21\u5f0f\uff09\u3002**\u795e\u7ecf\u7f51\u7edc\u6216\u6df1\u5ea6\u5b66\u4e60\u5219\u6bd4\u4ee5\u5f80\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u66f4\u80fd\u907f\u514d\u4eba\u4e3a\u4ecb\u5165**\u3002\n\n\u4f8b\u5982\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0c\u8003\u8651\u901a\u8fc7\u6709\u6548\u5229\u7528\u6570\u636e\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\u5148\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u7279\u5f81\u91cf\uff0c\u518d\u7528\u673a\u5668\u5b66\u4e60\u6280\u672f\u5b66\u4e60\u8fd9\u4e9b\u7279\u5f81\u91cf\u7684\u6a21\u5f0f\u3002\u201c\u7279\u5f81\u91cf\u201d\u662f\u6307\u53ef\u4ee5\u4ece\u8f93\u5165\u6570\u636e\uff08\u8f93\u5165\u56fe\u50cf\uff09\u4e2d\u51c6\u786e\u5730\u63d0\u53d6\u672c\u8d28\u6570\u636e\uff08\u91cd\u8981\u7684\u6570\u636e\uff09\u7684\u8f6c\u6362\u5668\u3002\u56fe\u50cf\u7684\u7279\u5f81\u91cf\u901a\u5e38\u8868\u793a\u4e3a\u5411\u91cf\u7684\u5f62\u5f0f\u3002\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\uff0c\u5e38\u7528\u7684\u7279\u5f81\u91cf\u5305\u62ecSIFT\u3001SURF\u548cHOG\u7b49\u3002\u4f7f\u7528\u8fd9\u4e9b\u7279\u5f81\u91cf\u5c06\u56fe\u50cf\u6570\u636e\u8f6c\u6362\u4e3a\u5411\u91cf\uff0c\u7136\u540e\u5bf9\u8f6c\u6362\u540e\u7684\u5411\u91cf\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u4e2d\u7684SVM\u3001KNN\u7b49\u5206\u7c7b\u5668\u8fdb\u884c\u5b66\u4e60\u3002\n\n\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\u4e2d\uff0c\u7531\u673a\u5668\u4ece\u6536\u96c6\u5230\u7684\u6570\u636e\u4e2d\u627e\u51fa\u89c4\u5f8b\u6027\u3002\u4f46\u662f\uff0c**\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u5411\u91cf\u65f6\u4f7f\u7528\u7684\u7279\u5f81\u91cf\u4ecd\u662f\u7531\u4eba\u6765\u8bbe\u8ba1\u7684**\u3002\u5373\u4f7f\u4f7f\u7528\u7279\u5f81\u91cf\u548c\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u4e5f\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u7684\u95ee\u9898\u4eba\u5de5\u8003\u8651\u5408\u9002\u7684\u7279\u5f81\u91cf\u3002\n\n> \u6df1\u5ea6\u5b66\u4e60\u6709\u65f6\u4e5f\u79f0\u4e3a\u7aef\u5230\u7aef\u673a\u5668\u5b66\u4e60\u3002\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u70b9\u662f\u5bf9\u6240\u6709\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u540c\u610f\u7684\u6d41\u7a0b\u6765\u89e3\u51b3\u3002\u795e\u7ecf\u7f51\u7edc\u90fd\u662f\u901a\u8fc7\u4e0d\u65ad\u5730\u5b66\u4e60\u6240\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u5c1d\u8bd5\u53d1\u73b0\u5e26\u6c42\u89e3\u95ee\u9898\u7684\u6a21\u5f0f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5f85\u5904\u7406\u7684\u95ee\u9898\u65e0\u5173\uff0c\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5 \u5c06\u6570\u636e\u76f4\u63a5\u4f5c\u4e3a\u539f\u59cb\u6570\u636e\uff0c\u8fdb\u884c\u201c\u7aef\u5bf9\u7aef\u201d\u7684\u5b66\u4e60\u3002\n\n\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u4e00\u822c\u5c06\u6570\u636e\u5206\u4e3a**\u8bad\u7ec3\u6570\u636e**\u548c**\u6d4b\u8bd5\u6570\u636e**\u4e24\u90e8\u5206\u6765\u8fdb\u884c\u5b66\u4e60\u548c\u5b9e\u9a8c\u7b49\u3002\u672a\u6765\u6b63\u786e\u8bc4\u4ef7\u6a21\u578b\u7684**\u6cdb\u5316\u80fd\u529b**\uff0c\u5c31\u5fc5\u987b\u5212\u5206\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\uff0c\u8bad\u7ec3\u6570\u636e\u4e5f\u53ef\u4ee5\u6210\u4e3a\u76d1\u7763\u6570\u636e\u3002\n\n\u6cdb\u5316\u80fd\u529b\u662f\u6307\u5904\u7406\u672a\u88ab\u89c2\u5bdf\u8fc7\u7684\u6570\u636e\uff08\u4e0d\u5305\u542b\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u6570\u636e\uff09\u7684\u80fd\u529b\u3002\u83b7\u5f97\u6cdb\u5316\u80fd\u529b\u662f\u673a\u5668\u5b66\u4e60\u7684\u6700\u7ec8\u76ee\u6807\u3002\n\n\u53ea\u5bf9\u67d0\u4e2a\u6570\u636e\u96c6\u8fc7\u5ea6\u62df\u5408\u7684\u72b6\u6001\u79f0\u4e3a**\u8fc7\u62df\u5408\uff08over fitting\uff09**\u3002\u907f\u514d\u8fc7\u62df\u5408\u4e5f\u662f\u673a\u5668\u5b66\u4e60\u7684\u4e00\u4e2a\u91cd\u8981\u8bfe\u9898\u3002\n\n## \u635f\u5931\u51fd\u6570\n\n\u795e\u7ecf\u7f51\u7edc\u4ee5\u67d0\u4e2a\u6307\u6807\u4e3a\u7ebf\u7d22\u5bfb\u627e\u6700\u4f18\u6743\u91cd\u53c2\u6570\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\u6240\u7528\u7684\u6307\u6807\u79f0\u4e3a**\u635f\u5931\u51fd\u6570**\u3002\u8fd9\u4e2a\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u51fd\u6570\uff0c\u4f46**\u4e00\u822c\u7528\u5747\u65b9\u8bef\u5dee\u548c\u4ea4\u53c9\u71b5\u8bef\u5dee**\u7b49\u3002\u635f\u5931\u51fd\u6570\u662f\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u6027\u80fd\u7684\u201c\u6076\u52a3\u7a0b\u5ea6\u201d\u6216\u8005\u201c\u6027\u80fd\u6709\u591a\u597d\u201d\u7684\u6307\u6807\uff0c\u5373\u5f53\u524d\u7684\u795e\u7ecf\u7f51\u7edc\u5bf9\u76d1\u7763\u6570\u636e\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u4e0d\u62df\u5408\uff0c\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u4e0d\u4e00\u81f4\u3002\n\n### \u5747\u65b9\u8bef\u5dee\n\n\u5747\u65b9\u8bef\u5dee\uff08mean squared error\uff09\u7531\u4e0b\u5f0f\u8868\u793a:\n\n$$E = \\frac{1}{2} \\sum_{k}^{}(y_{k}-t_{k})^2$$\n\n$y_{k}$\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\uff0c$t_{k}$\u8868\u793a\u76d1\u7763\u6570\u636e\uff0c$k$\u8868\u793a\u6570\u636e\u7684\u7ef4\u5ea6\u3002\u5176\u4e2d\uff0c$t$\u8868\u793a\u76d1\u7763\u6570\u636e\uff0c\u5c06\u6b63\u786e\u7684\u89e3\u6807\u7b7e\u8bbe\u4e3a1\uff0c\u5176\u4ed6\u5747\u8bbe\u4e3a0\uff0c**\u5176\u4ed6\u6807\u7b7e\u8868\u793a\u4e3a0\u7684\u8868\u793a\u65b9\u6cd5\u79f0\u4e3aone-hot\u8868\u793a**\u3002\n\n\u5747\u65b9\u8bef\u5dee\u4f1a\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\u548c\u6b63\u786e\u89e3\u76d1\u7763\u6570\u636e\u7684\u5404\u4e2a\u5143\u7d20\u4e4b\u5dee\u7684\u5e73\u65b9\uff0c\u518d\u6c42\u603b\u548c\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a","29294130":"\u611f\u77e5\u673a\u662f\u4f5c\u4e3a\u795e\u7ecf\u7f51\u7edc\uff08\u6df1\u5ea6\u5b66\u4e60\uff09\u7684\u8d77\u6e90\u7684\u7b97\u6cd5\u3002\n\n\u611f\u77e5\u673a\u63a5\u6536\u591a\u4e2a\u8f93\u5165\u4fe1\u53f7\uff0c\u8f93\u51fa\u4e00\u4e2a\u4fe1\u53f7\u3002\u611f\u77e5\u673a\u7684\u4fe1\u53f7\u53ea\u67090\/1\u4e24\u79cd\u53d6\u503c\u3002\u5728\u672c\u4e66\uff0c0\u4ee3\u8868\u201c\u4e0d\u4f20\u9012\u4fe1\u53f7\u201d\uff0c1\u4ee3\u8868\u201c\u4f20\u9012\u4fe1\u53f7\u201d\u3002\n\n\u611f\u77e5\u673a\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a\n\n$$\ny=\\begin{cases}\n0&(w_1x_1+w_2x_2\\leq\\theta) \\\\ 1&(w_1x_1+w_2x_2>\\theta)\n\\end{cases}\n$$\n\n\u611f\u77e5\u673a\u7684\u591a\u4e2a\u8f93\u5165\u4fe1\u53f7\u90fd\u6709\u5404\u81ea\u56fa\u6709\u7684\u6743\u91cd\uff0c\u8fd9\u4e9b\u6743\u91cd\u53d1\u6325\u7740\u63a7\u5236\u5404\u4e2a\u4fe1\u53f7\u7684\u91cd\u8981\u6027\u7684\u4f5c\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6743\u91cd\u8d8a\u5927\uff0c\u5bf9\u5e94\u8be5\u6743\u91cd\u7684\u4fe1\u53f7\u7684\u91cd\u8981\u6027\u5c31\u8d8a\u9ad8\u3002","03dd3822":"### \u4ea4\u53c9\u71b5\u8bef\u5dee\n\n\u4ea4\u53c9\u71b5\u8bef\u5dee\uff08cross entropy error\uff09\u7531\u4e0b\u5f0f\u8868\u793a\uff1a\n\n$$E=-\\sum_{k}^{} t_{k} ln y_{k}$$\n\n$y_{k}$\u662f\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\uff0c$t_{k}$\u662f\u6b63\u786e\u89e3\u6807\u7b7e\u3002\u5e76\u4e14\uff0c\u4e2d\u53ea\u6709\u6b63\u786e\u89e3\u6807\u7b7e\u7684\u7d22\u5f15\u4e3a1\uff0c\u5176\u4ed6\u5747\u4e3a0\uff08one-hot\u8868\u793a\uff09\u3002\u4ea4\u53c9\u71b5\u8bef\u5dee\u7684\u503c\u662f\u7531\u6b63\u786e\u89e3\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u8f93\u51fa\u7ed3\u679c\u51b3\u5b9a\u7684\u3002\n\n\u6b63\u786e\u89e3\u6807\u7b7e\u5bf9\u5e94\u7684\u8f93\u51fa\u8d8a\u5927\uff0c\u4e0a\u5f0f\u7684\u503c\u8d8a\u63a5\u8fd10\uff1b\u5f53\u8f93\u51fa\u4e3a1\u65f6\uff0c\u4ea4\u53c9\u71b5\u8bef\u5dee\u4e3a0\u3002\u6b64\u5916\uff0c\u5982\u679c\u6b63\u786e\u89e3\u6807\u7b7e\u5bf9\u5e94\u7684\u8f93\u51fa\u8f83\u5c0f\uff0c\u5219\u4e0a\u5f0f\u7684\u503c\u8f83\u5927\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a","3d6cf605":"\u77e9\u9635\u7684\u5f62\u72b6\u53ef\u4ee5\u901a\u8fc7`shape`\u67e5\u770b\uff0c\u77e9\u9635\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7`dtype`\u67e5\u770b","bd40e15d":"\u5bf9NumPy\u6570\u7ec4\u4f7f\u7528\u4e0d\u7b49\u53f7\u8fd0\u7b97\u7b26\u7b49\uff08\u4e0a\u4f8b\u4e2d\u662fX>15\uff09\uff0c\u7ed3\u679c\u4f1a\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u578b\u7684\u6570\u7ec4\u3002\u4e0a\u4f8b\u4e2d\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\u53d6\u51fa\u4e86\u6570\u7ec4\u7684\u5404\u4e2a\u5143\u7d20\uff08\u53d6\u51fa`True`\u5bf9\u5e94\u7684\u5143\u7d20\uff09\u3002","44e08684":"## \u6fc0\u6d3b\u51fd\u6570\u5c42\u7684\u5b9e\u73b0\n\n### ReLU\u5c42","c60f879f":"## \u8bef\u5dee\u53cd\u54cd\u4f20\u64ad\u6cd5\u7684\u5b9e\u73b0\n\n### \u795e\u7ecf\u7f51\u7edc\u7684\u5168\u8c8c\u56fe\n\n**\u524d\u63d0**\uff1a\u795e\u7ecf\u7f51\u7edc\u4e2d\u6709\u4f55\u4e8b\u7684\u6743\u91cd\u548c\u504f\u7f6e\uff0c\u8c03\u6574\u6743\u91cd\u548c\u504f\u7f6e\u4ee5\u4fbf\u62df\u5408\u8bad\u7ec3\u6570\u636e\u7684\u8fc7\u7a0b\u79f0\u4e3a\u5b66\u4e60\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u5206\u4e3a\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4\uff1a\n\n1. **mini-batch**\uff1a\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u90e8\u5206\u6570\u636e\u3002\n1. **\u8ba1\u7b97\u68af\u5ea6**\uff1a\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u5404\u4e2a\u6743\u91cd\u53c2\u6570\u7684\u68af\u5ea6\u3002\n1. **\u66f4\u65b0\u53c2\u6570**\uff1a\u5c06\u6743\u91cd\u53c2\u6570\u6cbf\u68af\u5ea6\u65b9\u5411\u8fdb\u884c\u5fae\u5c0f\u7684\u66f4\u65b0\u3002\n1. **\u91cd\u590d**\uff1a\u91cd\u590d\u6b65\u9aa41\u30012\u30013\u3002\n\n### \u5bf9\u5e94\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u53d1\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u5b9e\u73b0","db43bc2d":"### \u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u5b66\u4e60","1bbf14f3":"\u5b66\u4e60\u7387\u8fc7\u5927\u6216\u8005\u8fc7\u5c0f\u90fd\u65e0\u6cd5\u5f97\u5230\u597d\u7684\u7ed3\u679c\u3002","a64b38f5":"\u800c\u6b63\u5411\u4f20\u64ad\u65f6\uff0c\u504f\u7f6e\u4f1a\u88ab\u52a0\u5230\u6bcf\u4e00\u4e2a\u6570\u636e\uff08\u7b2c1\u4e2a\u3001\u7b2c2\u4e2a\u2026\u2026\uff09\u4e0a\u3002\u56e0\u6b64\uff0c\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u5404\u4e2a\u6570\u636e\u7684\u53cd\u5411\u4f20\u64ad\u7684\u503c\u9700\u8981\u6c47\u603b\u4e3a\u504f\u7f6e\u7684\u5143\u7d20\u3002\u4e0b\u4f8b\u4e2d\u5609\u5b9a\u6570\u636e\u67092\u4e2a\uff08$N=2$\uff09\u3002\u504f\u7f6e\u7684\u53cd\u5411\u4f20\u64ad\u4f1a\u5bf9\u8fd92\u4e2a\u6570\u636e\u7684\u5bfc\u6570\u6309\u7167\u5143\u7d20\u8fdb\u884c\u6c42\u548c\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86`np.sum()`\u5bf9\u7b2c0\u8f74\uff08\u4ee5\u6570\u636e\u4e3a\u5355\u4f4d\u7684\u8f74\uff0c`axis=0`\uff09\u65b9\u5411\u4e0a\u7684\u5143\u7d20\u8fdb\u884c\u6c42\u548c\u3002","ac468943":"\u4f7f\u7528\u8fd9\u4e2aSGD\u7c7b\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570\u7684\u66f4\u65b0\uff1a\n\n```python\nnetwork= TwoLayerNet(...)\noptimizer = SGD()\n\nfor i in range(10000):\n    ...\n    x_batch, t_batch = get_mini_batch(...) # mini-batch\n    grads = network.gradient(x_batch, t_batch)\n    params = network.params\n    optimizer.update(params, grads)\n    ...\n```\n\n`optimizer`\u8868\u793a\u201d\u8fdb\u884c\u6700\u4f18\u5316\u7684\u4eba\u201c\u7684\u610f\u601d\uff0c\u8fd9\u91cc\u7531SGD\u627f\u62c5\u8fd9\u4e2a\u89d2\u8272\u3002\u53c2\u6570\u7684\u66f4\u65b0\u7531`optimizer`\u8d1f\u8d23\u5b8c\u6210\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u9700\u8981\u505a\u7684\u53ea\u662f\u5c06\u53c2\u6570\u548c\u68af\u5ea6\u7684\u4fe1\u606f\u4f20\u9012\u7ed9`optimizer`\u3002\u540e\u671f\u5982\u679c\u9700\u8981\u6362\u6389\u8fd9\u4e2a\u201d\u89d2\u8272\u201c\u7684\u8bdd\uff0c\u76f4\u63a5\u518d\u5c06\u5b9e\u73b0\u7684\u7c7b\u8d4b\u503c\u7ed9`optimizer`\u5373\u53ef\uff0c\u4f8b\u5982`optimizer = Momentum()`\u3002\n\n### SGD\u7684\u7f3a\u70b9\n\n\u5982\u679c\u51fd\u6570\u7684\u5f62\u72b6\u975e\u5747\u5411(anisotropic)\uff0c\u6bd4\u5982\u5448\u5ef6\u4f38\u72b6\uff0c\u641c\u7d22\u7684\u8def\u5f84\u5c31\u4f1a\u975e\u5e38\u4f4e\u6548\uff0c\u4f8b\u5982$f(x,y)=\\frac{1}{20} x^2+y^2$\u3002\u5176\u4f4e\u6548\u7684\u6839\u672c\u539f\u56e0\u662f\u68af\u5ea6\u7684\u65b9\u5411\u5e76\u6ca1\u6709\u6307\u5411\u6700\u5c0f\u503c\u7684\u65b9\u5411\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6bd4\u5355\u7eaf\u671d\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\u7684SGD\u66f4\u806a\u660e\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982Momentum\u3001AdaGrad\u3001Adam\u3002\n\n### Momentum\n\nMomentum\u662f\u201d\u52a8\u91cf\u201c\u7684\u610f\u601d\uff0c\u548c\u7269\u7406\u6709\u5173\u3002\n\n$$\\boldsymbol v \\leftarrow \\alpha \\boldsymbol v - \\eta \\frac{\\partial L}{\\partial \\boldsymbol W}$$\n\n$$\\boldsymbol W \\leftarrow \\boldsymbol W + \\boldsymbol v$$\n\n\u540cSGD\uff0c$\\boldsymbol W$\u8868\u793a\u8981\u66f4\u65b0\u7684\u6743\u91cd\u53c2\u6570\uff0c$\\frac{\\partial L}{\\partial \\boldsymbol W}$\u8868\u793a\u635f\u5931\u51fd\u6570\u5173\u4e8e$\\boldsymbol W$\u7684\u68af\u5ea6\uff0c$\\eta$\u8868\u793a\u5b66\u4e60\u7387\u3002$\\boldsymbol v$\u5bf9\u5e94\u7269\u7406\u4e0a\u7684\u901f\u5ea6\u3002\u4e0a\u9762\u5f0f\u5b501\u8868\u793a\u4e86\u7269\u7406\u5728\u68af\u5ea6\u65b9\u5411\u4e0a\u53d7\u529b\uff0c\u5728\u8fd9\u4e2a\u529b\u7684\u4f5c\u7528\u4e0b\uff0c\u7269\u4f53\u7684\u901f\u5ea6\u589e\u52a0\u8fd9\u4e00\u7269\u7406\u6cd5\u5219\u3002Momentum\u65b9\u6cd5\u7ed9\u4eba\u7684\u611f\u89c9\u5c31\u50cf\u662f\u5c0f\u7403\u5728\u5730\u9762\u4e0a\u6eda\u52a8\u3002\n\n\u4e0a\u9762\u5f0f\u5b501\u4e2d\u6709$\\alpha \\boldsymbol v$\u8fd9\u4e00\u9879\u3002\u5728\u7269\u4f53\u4e0d\u53d7\u4efb\u4f55\u529b\u65f6\uff0c\u8be5\u9879\u627f\u62c5\u4f7f\u7269\u4f53\u9010\u6e10\u51cf\u901f\u7684\u4efb\u52a1($\\alpha$\u8bbe\u5b9a\u4e3a0.9\u4e4b\u7c7b\u7684\u503c)\uff0c\u5bf9\u5e94\u7269\u7406\u4e0a\u7684\u5730\u9762\u6469\u64e6\u6216\u7a7a\u6c14\u963b\u529b\u3002","e53882a2":"## \u611f\u77e5\u673a\u7684\u5b9e\u73b0","3cb96404":"\u5982\u4e0a\u4e24\u5f0f\uff0c\u504f\u5bfc\u6570\u548c\u5355\u53d8\u91cf\u5bfc\u6570\u4e00\u6837\uff0c\u90fd\u662f\u6c42\u67d0\u4e2a\u5730\u65b9\u7684\u659c\u7387\u3002\u4e0d\u8fc7\uff0c\u504f\u5bfc\u6570\u9700\u8981\u5c06\u591a\u4e2a\u53d8\u91cf\u4e2d\u7684\u67d0\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4f4d\u76ee\u6807\u53d8\u91cf\uff0c\u5e76\u5c06\u5176\u4ed6\u53d8\u91cf\u56fa\u5b9a\u4f4d\u67d0\u4e2a\u503c\u3002\n\n## \u68af\u5ea6\n\n\u50cf$(\\frac{\\partial f}{\\partial x_{0}},\\frac{\\partial f}{\\partial x_{1}})$\u8fd9\u6837\u7684\u7531\u5168\u90e8\u53d8\u91cf\u7684\u504f\u5bfc\u6570\u6c47\u603b\u800c\u6210\u7684\u5411\u91cf\u79f0\u4e3a\u68af\u5ea6\uff08gradient\uff09\u3002","0e0a92bd":"## \u591a\u5c42\u611f\u77e5\u673a\n\n\u611f\u77e5\u673a\u53ef\u4ee5\u201c\u53e0\u52a0\u5c42\u201d\u3002","d80caf55":"\u89e3\u6790`TwoLayerNet`\u7684\u5b9e\u73b0\uff1a\n\n1. `__init__(self, input_size, hidden_size, output_size)`\uff1a\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u53c2\u6570\u4f9d\u6b21\u8868\u793a\u8f93\u5165\u5c42\u7684\u795e\u7ecf\u5143\u6570\u3001\u9690\u85cf\u5c42\u7684\u795e\u7ecf\u5143\u6570\u3001\u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u6570\u3002\n\n    \u56e0\u4e3a\u8fdb\u884c\u624b\u5199\u6570\u5b57\u8bc6\u522b\u65f6\uff0c\u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u662f784(28x28)\uff0c\u8f93\u51fa\u4e3a10\u4e2a\u7c7b\u522b\uff0c\u6240\u4ee5\u6307\u5b9a\u53c2\u6570`input_size = 784, output_size = 10`\uff0c\u5c06\u9690\u85cf\u5c42\u7684\u4e2a\u6570`, hidden_size`\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5408\u9002\u7684\u503c\u5373\u53ef\uff08\u4f8b\u5982\u8fd9\u91cc\u662f100\uff09\u3002\n\n2. `predict(self, x)\u3001accuracy(self, x, t)`\u540c\u4e0a\u4e00\u7ae0\u795e\u7ecf\u7f51\u7edc\u7684\u63a8\u7406\u5904\u7406\u57fa\u672c\u4e00\u81f4\u3002\n\n3. `loss(self, x, t)`\u662f\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u503c\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u57fa\u4e8e`predict()`\u7684\u7ed3\u679c\u548c\u6b63\u786e\u89e3\u6807\u7b7e\uff0c\u8ba1\u7b97\u4ea4\u53c9\u71b5\u8bef\u5dee\u3002\n\n4. `numerical_gradient(self, x, t)`\u662f\u8ba1\u7b97\u5404\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u800c`gradient(self, x, t)`\u662f\u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u9ad8\u6548\u8ba1\u7b97\u68af\u5ea6\u7684\u65b9\u6cd5\u3002\n\n    `numerical_gradient(self, x, t)`\u662f\u57fa\u4e8e\u6570\u503c\u5fae\u5206\u8ba1\u7b97\u53c2\u6570\u7684\u68af\u5ea6\u3002\u800c`gradient(self, x, t)`\u662f\u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u9ad8\u901f\u8ba1\u7b97\u68af\u5ea6\uff0c\u5176\u6c42\u5230\u7684\u68af\u5ea6\u548c\u6570\u503c\u5fae\u5206\u7684\u7ed3\u679c\u57fa\u672c\u4e00\u81f4\uff0c\u4e14\u901f\u5ea6\u6bd4\u524d\u8005\u5feb\u3002\n\n\u5982\u4f55\u8bbe\u7f6e\u6743\u91cd\u53c2\u6570\u7684\u521d\u59cb\u503c\u662f\u5173\u7cfb\u5230\u795e\u7ecf\u7f51\u7edc\u662f\u5426\u6210\u529f\u5b66\u4e60\u7684\u91cd\u8981\u95ee\u9898\u3002\u6743\u91cd\u4f7f\u7528\u7b26\u5408\u9ad8\u65af\u5206\u5e03\u7684\u968f\u673a\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u504f\u7f6e\u4f7f\u75280\u8fdb\u884c\u521d\u59cb\u5316\u3002\n\n### mini-batch\u7684\u5b9e\u73b0\n\n\u6240\u8c13mini-batch\u7684\u5b66\u4e60\uff0c\u5c31\u662f\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u90e8\u5206\u6570\u636e\uff0c\u518d\u4ee5\u8fd9\u4e9b\u6570\u636e\u4e3a\u5bf9\u8c61(mini-batch)\uff0c\u4f7f\u7528\u68af\u5ea6\u6cd5\u66f4\u65b0\u53c2\u6570\u7684\u8fc7\u7a0b\u3002","cc5cf80b":"### \u5b9e\u73b0softmax\u51fd\u6570\u65f6\u7684\u6ce8\u610f\u4e8b\u9879\n\nsoftmax\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u6ea2\u51fa\u95ee\u9898\uff0c\u56e0\u4e3asoftmax\u51fd\u6570\u5185\u6709$exp(x)$\u7684\u6307\u6570\u8fd0\u7b97\uff0c\u4f1a\u4f7f\u6570\u503c\u53d8\u5f97\u5f88\u5927\u3002\u56e0\u6b64\uff0csoftmax\u51fd\u6570\u7684\u5b9e\u73b0\u53ef\u4ee5\u6309\u5982\u4e0b\u5f0f\u6539\u8fdb\uff1a\n\n$$\ny_{k}=\\frac{exp(a_{k})}{\\sum_{i=1}^{n}exp(a_{i})}=\\frac{C exp(a_{k})}{C \\sum_{i=1}^{n}exp(a_{i})}=\\frac{exp(a_{k}+log C)}{\\sum_{i=1}^{n}exp(a_{i}+log C)}=\\frac{exp(a_{k}+C^{'})}{\\sum_{i=1}^{n}exp(a_{i}+C^{'})}\n$$\n\n\u5728\u8fdb\u884csoftmax\u7684\u6307\u6570\u51fd\u6570\u7684\u8fd0\u7b97\u65f6\uff0c\u52a0\u4e0a\u6216\u8005\u51cf\u53bb\u67d0\u4e2a\u5e38\u6570\u5e76\u4e0d\u4f1a\u6539\u53d8\u5f00\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u7684$C^{'}$\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u503c\uff0c\u4f46\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff0c\u4e00\u822c\u4f1a\u4f7f\u7528\u8f93\u5165\u4fe1\u53f7\u4e2d\u7684\u6700\u5927\u503c\u3002\u5982\u4e0b\u4f8b\uff1a","55d4a1a3":"## \u5bfc\u5165\u6743\u91cd\u548c\u504f\u7f6e","68751591":"\u5229\u7528\u5fae\u5c0f\u7684\u5dee\u5206\u6c42\u5bfc\u6570\u7684\u8fc7\u7a0b\u79f0\u4e3a\u6570\u503c\u5fae\u5206\uff08numerical differentiation\uff09\u3002\u800c\u57fa\u4e8e\u6570\u5b66\u5f0f\u7684\u63a8\u5012\u6c42\u5bfc\u6570\u7684\u8fc7\u7a0b\uff0c\u5219\u7528\u89e3\u6790\u6027\uff08analytic\uff09\u4e00\u8bcd\uff0c\u79f0\u4e3a\u89e3\u6790\u6027\u6c42\u89e3\u6216\u8005\u89e3\u6790\u6027\u6c42\u5bfc\u3002\n\n### \u6570\u503c\u5fae\u5206\u7684\u4f8b\u5b50","b8382aad":"\u6fc0\u6d3b\u51fd\u6570ReLU(Rectified Linear Unit)\uff1a\n\n$$\ny=\\begin{cases}\nx&(x>0) \\\\ 0&(x\\leq 0)\n\\end{cases}\n$$\n\n$y$\u5173\u4e8e$x$\u7684\u5bfc\u6570\uff1a\n\n$$\n\\frac{\\partial y}{\\partial x}=\\begin{cases}\n1&(x>0) \\\\ 0&(x\\leq 0)\n\\end{cases}\n$$\n\n\u4e0a\u5f0f\u4e2d\uff0c\u5982\u679c\u6b63\u5411\u4f20\u64ad\u65f6\u7684\u8f93\u5165$x$\u5927\u4e8e0\uff0c\u5219\u53cd\u5411\u4f20\u64ad\u4f1a\u5c06\u4e0a\u6e38\u7684\u503c\u539f\u5c01\u4e0d\u52a8\u5730\u4f20\u7ed9\u4e0b\u6e38\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6b63\u5411\u4f20\u64ad\u65f6\u7684$x$\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u5219\u53cd\u5411\u4f20\u64ad\u4e2d\u4f20\u7ed9\u4e0b\u6e38\u7684\u4fe1\u53f7\u5c06\u505c\u7559\u5728\u6b64\u5904\u3002","cde10a1e":"\u6211\u4eec\u53d1\u73b0\u79bb\u6700\u4f4e\u5904\u8d8a\u8fdc\uff0c\u7bad\u5934\u8d8a\u5927\u3002\u68af\u5ea6\u4f1a\u6307\u5411\u5404\u70b9\u5904\u7684\u51fd\u6570\u503c\u964d\u4f4e\u7684\u65b9\u5411\uff0c\u66f4\u4e25\u683c\u7684\u8bb2\uff0c\u68af\u5ea6\u6307\u793a\u7684\u65b9\u5411\u662f\u5404\u70b9\u5904\u7684\u51fd\u6570\u503c\u51cf\u5c0f\u6700\u591a\u7684\u65b9\u5411\u3002\n\n### \u68af\u5ea6\u6cd5","bdb67244":"\u5b9e\u4f8b\u53d8\u91cf$v$\u4f1a\u4fdd\u5b58\u7269\u4f53\u7684\u901f\u5ea6\u3002\u521d\u59cb\u5316\u65f6$v$\u4e2d\u4e3a\u7a7a\uff0c\u4f46\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528`update()`\u7684\u65f6\u5019\uff0c$v$\u4f1a\u4ee5\u5b57\u5178\u578b\u53d8\u91cf\u7684\u5f62\u5f0f\u4fdd\u5b58\u4e8e\u53c2\u6570\u7ed3\u6784\u76f8\u540c\u7684\u6570\u636e\u3002\n\n\u518d\u4ee5$f(x,y)=\\frac{1}{20} x^2+y^2$\u4e3a\u4f8b\u3002\u548cSGD\u76f8\u6bd4\uff0c\u6211\u4eec\u53d1\u73b0Momentum\u7684\u4e4b\u5b57\u5f62\u7a0b\u5ea6\u51cf\u8f7b\u4e86\u3002\u8fd9\u662f\u56e0\u4e3a\u867d\u7136$x$\u5468\u65b9\u5411\u4e0a\u53d7\u5230\u7684\u529b\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u4e00\u76f4\u5728\u540c\u4e00\u65b9\u5411\u4e0a\u53d7\u529b\uff0c\u6240\u4ee5\u671d\u540c\u4e00\u4e2a\u65b9\u5411\u4f1a\u6709\u4e00\u5b9a\u7684\u52a0\u901f\u3002\u53cd\u8fc7\u6765\uff0c\u867d\u7136$y$\u8f74\u65b9\u5411\u4e0a\u53d7\u5230\u7684\u529b\u5f88\u5927\uff0c\u4f46\u662f\u56e0\u4e3a\u4ea4\u4e92\u5730\u53d7\u5230 \u6b63\u65b9\u5411\u548c\u53cd\u65b9\u5411\u7684\u529b\uff0c\u5b83\u4eec\u4f1a\u4e92\u76f8\u62b5\u6d88\uff0c\u6240\u4ee5$y$\u8f74\u65b9\u5411\u4e0a\u7684\u901f\u5ea6\u4e0d\u7a33\u5b9a\u3002\u56e0\u6b64\uff0c\u548cSGD\u65f6\u7684\u60c5\u5f62\u76f8\u6bd4\uff0c\u53ef\u4ee5\u66f4\u5feb\u5730\u671d$x$\u8f74\u65b9\u5411\u9760\u8fd1\uff0c\u51cf\u5f31\u4e4b\u5b57\u5f62\u7684\u53d8\u52a8\u7a0b\u5ea6\u3002\n\n### AdaGrad\n\n\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u5b66\u4e60\u7387\uff08\u6570\u5b66\u5f0f\u4e2d\u8bb0\u4e3a$\\eta$\uff09\u7684\u503c\u5f88\u91cd\u8981\u3002\u5b66\u4e60\u7387\u8fc7\u5c0f\uff0c\u4f1a\u5bfc\u81f4\u8840\u6d17\u82b1\u8d39\u8fc7\u591a\u65f6\u95f4\uff1b\u53cd\u8fc7\u6765\uff0c\u5b66\u4e60\u7387\u8fc7\u5927\uff0c\u5219\u4f1a\u5bfc\u81f4\u5b66\u4e60\u53d1\u6563\u800c\u4e0d\u80fd\u6b63\u786e\u8fdb\u884c\u3002\n\n\u968f\u7740\u5b66\u4e60\u7684\u8fdb\u884c\uff0c\u4f7f\u5b66\u4e60\u7387\u9010\u6e10\u51cf\u5c0f\uff0c\u79f0\u4e3a\u5b66\u4e60\u7387\u8870\u51cf(learning rate decay)\u3002\u9010\u6e10\u51cf\u5c0f\u5b66\u4e60\u7387\u7684\u60f3\u6cd5\uff0c\u76f8\u5f53\u4e8e\u5c06\u201c\u5168\u4f53\u201d\u53c2\u6570\u7684\u5b66\u4e60\u7387\u503c\u4e00\u8d77\u964d\u4f4e\u3002\u800cAdaGrad\u8fdb\u4e00\u6b65\u53d1\u5c55\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u9488\u5bf9\u201c\u4e00\u4e2a\u4e00\u4e2a\u201d\u7684\u53c2\u6570\uff0c\u8d4b\u4e88\u5176\u201c\u5b9a\u5236\u201d\u7684\u503c\u3002\u5176\u6570\u5b66\u5f0f\u8868\u793aAdaGrad \u7684\u66f4\u65b0\u65b9\u6cd5\uff1a\n\n$$\\boldsymbol h \\leftarrow \\boldsymbol h + \\frac{\\partial L}{\\partial \\boldsymbol W} \\odot \\frac{\\partial L}{\\partial \\boldsymbol W}$$\n\n$$\\boldsymbol W \\leftarrow \\boldsymbol W - \\eta \\frac{1}{\\sqrt{\\boldsymbol h}} \\frac{\\partial L}{\\partial \\boldsymbol W}$$\n\n\u540cSGD\uff0c$\\boldsymbol W$\u8868\u793a\u8981\u66f4\u65b0\u7684\u6743\u91cd\u53c2\u6570\uff0c$\\frac{\\partial L}{\\partial \\boldsymbol W}$\u8868\u793a\u635f\u5931\u51fd\u6570\u5173\u4e8e$\\boldsymbol W$\u7684\u68af\u5ea6\uff0c$\\eta$\u8868\u793a\u5b66\u4e60\u7387\u3002$\\boldsymbol h$\u4fdd\u5b58\u4e86\u4ee5\u524d\u7684\u6240\u6709\u68af\u5ea6\u503c\u7684\u5e73\u65b9\u548c\uff0c\u4e0a\u5f0f1\u4e2d\u7684$\\odot$\u8868\u793a\u5bf9\u5e94\u77e9\u9635\u5143\u7d20\u7684\u4e58\u6cd5\u3002\u7136\u540e\u5728\u66f4\u65b0\u53c2\u6570\u65f6\uff0c\u901a\u8fc7\u4e58\u4ee5$\\frac{1}{\\sqrt{\\boldsymbol h}}$\uff0c\u5c31\u53ef\u4ee5\u8c03\u6574\u5b66\u4e60\u7684\u5c3a\u5ea6\u3002\u8fd9\u610f\u5473\u7740\uff0c\u53c2\u6570\u7684\u5143\u7d20\u4e2d\u53d8\u52a8\u8f83\u5927\uff08\u88ab\u5927\u5e45\u66f4\u65b0\uff09\u7684\u5143\u7d20\u7684\u5b66\u4e60\u7387\u5c06\u53d8\u5c0f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u6309\u7167\u53c2\u6570\u7684\u5143\u7d20\u8fdb\u884c\u5b66\u4e60\u7387\u8870\u51cf\uff0c\u4f7f\u53d8\u52a8\u5927\u7684\u53c2\u6570\u7684\u5b66\u4e60\u7387\u9010\u6e10\u51cf\u5c0f\u3002\n\nAdaGrad\u4f1a\u51e0\u7387\u8fc7\u53bb\u6240\u6709\u68af\u5ea6\u7684\u5e73\u65b9\u548c\u3002\u56e0\u6b64\uff0c\u5b66\u4e60\u8d8a\u6df1\u5165\uff0c\u66f4\u65b0\u7684\u5e45\u5ea6\u5c31\u8d8a\u5c0f\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u65e0\u6b62\u5883\u5730\u5b66\u4e60\uff0c\u66f4\u65b0\u91cf\u5c31\u4f1a\u53d8\u4e3a0\uff0c\u5b8c\u5168\u4e0d\u518d\u66f4\u65b0\u3002\u4e3a\u4e86\u6539\u5584\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528RMSProp\u65b9\u6cd5\u3002RMSProp\u65b9\u6cd5\u5e76\u4e0d\u662f\u5c06\u8fc7\u53bb\u6240\u6709\u7684\u68af\u5ea6\u4e00\u89c6\u540c\u4ec1\u5730\u76f8\u52a0\uff0c\u800c\u662f\u9010\u6e10\u5730\u9057\u5fd8\u8fc7\u53bb\u7684\u68af\u5ea6\uff0c\u5728\u505a\u52a0\u6cd5\u8fd0\u7b97\u65f6\u5c06\u65b0\u68af\u5ea6\u7684\u4fe1\u606f\u66f4\u591a\u5730\u53cd\u6620\u51fa\u6765\u3002\u8fd9\u79cd\u64cd\u4f5c\u4ece\u4e13\u4e1a\u4e0a\u8bb2\uff0c\u79f0\u4e3a\u201c\u6307\u6570\u79fb\u52a8\u5e73\u5747\u201d\uff0c\u5448\u6307\u6570\u51fd\u6570\u5f0f\u5730\u51cf\u5c0f\u8fc7\u53bb\u7684\u68af\u5ea6\u7684\u5c3a\u5ea6\u3002","c0fb1651":"\u73b0\u5728\u6211\u4eec\u8003\u8651$N$\u4e2a\u6570\u636e\u4e00\u8d77\u8fdb\u884c\u6b63\u5411\u4f20\u64ad\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u6279\u7248\u672c\u7684Affine\u5c42\u3002\n\n\u52a0\u4e0a\u504f\u7f6e\u65f6\uff0c\u4e89\u5148\u4f20\u64ad\u504f\u7f6e\u88ab\u52a0\u5230$X\u00b7W$\u7684\u5404\u4e2a\u6570\u636e\u4e0a\u3002\u6bd4\u5982$N=2$\uff08\u6570\u636e\u4e3a2\u4e2a\uff09\u65f6\uff0c\u504f\u7f6e\u4f1a\u88ab\u5206\u522b\u52a0\u5230\u8fd9\u4e2a2\u4e2a\u6570\u636e\uff08\u5404\u81ea\u7684\u8ba1\u7b97\u7ed3\u679c\uff09\u4e0a\u3002","629ef20e":"\u5f88\u660e\u663e\uff0c\u5747\u65b9\u8bef\u5dee\u663e\u793a\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u7684\u8f93\u51fa\u7ed3\u679c\u4e0e\u76d1\u7763\u6570\u636e\u66f4\u52a0\u543b\u5408\u3002","351f4129":"\u968f\u7740\u5b66\u4e60\u7684\u8fdb\u884c\uff0c\u635f\u5931\u51fd\u6570\u7684\u503c\u5728\u4e0d\u65ad\u51cf\u5c0f\u3002\u8fd9\u662f\u5b66\u4e60\u6b63\u5e38\u8fdb\u884c\u7684\u4fe1\u53f7\uff0c\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\u53c2\u6570\u5728\u9010\u6e10\u62df\u5408\u6570\u636e\u3002\u901a\u8fc7\u53cd\u590d\u5730\u5411\u5b83\u6d47\u704c\uff08\u8f93\u5165\uff09\u6570\u636e\uff0c\u795e\u7ecf\u7f51\u7edc\u6574\u5728\u9010\u6e10\u5411\u6700\u4f18\u53c2\u6570\u9760\u8fd1\u3002\n\n\u4e0d\u8fc7\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u4e25\u683c\u7684\u8bb2\u662f\u201c\u5bf9\u8bad\u7ec3\u6570\u636e\u7684\u67d0\u4e2amini-batch\u7684\u635f\u5931\u51fd\u6570\u201d\u7684\u503c\u3002\u8bad\u7ec3\u6570\u636e\u7684\u635f\u5931\u51fd\u6570\u503c\u51cf\u5c0f\u7684\u7ed3\u679c\u662f\u4e0d\u80fd\u8bf4\u660e\u8be5\u795e\u7ecf\u7f51\u7edc\u5728\u5176\u4ed6\u6570\u636e\u96c6\u4e0a\u4e5f\u4e00\u5b9a\u80fd\u6709\u540c\u7b49\u7a0b\u5ea6\u7684\u8868\u73b0\u3002\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u5fc5\u987b\u786e\u8ba4\u662f\u5426\u80fd\u591f\u77e5\u786e\u5b9e\u522b\u6570\u636e\u610f\u5916\u7684\u5176\u4ed6\u6570\u636e\uff0c\u5373\u867d\u7136\u8bad\u7ec3\u6570\u636e\u4e2d\u7684\u5185\u5bb9\u80fd\u591f\u88ab\u6b63\u786e\u8bc6\u522b\uff0c\u4f46\u662f\u4e0d\u5728\u8bad\u7ec3\u6570\u636e\u7684\u5185\u5bb9\u5374\u65e0\u6cd5\u88ab\u8bc6\u522b\uff0c\u8fd9\u79cd\u73b0\u8c61\u4e3a**\u8fc7\u62df\u5408**\u3002\n\n**epoch**\u662f\u4e00\u4e2a\u5355\u4f4d\uff0c\u4e00\u4e2aepoch\u8868\u793a\u5b66\u4e60\u4e2d\u6240\u6709\u8bad\u7ec3\u6570\u636e\u5747\u88ab\u4f7f\u7528\u8fc7\u4e00\u6b21\u65f6\u7684\u66f4\u65b0\u6b21\u6570\u3002\n\n# \u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\n\n## \u8ba1\u7b97\u56fe\u7b80\u4ecb\u4e0e\u94fe\u5f0f\u6cd5\u5219\n\n\u7528\u8ba1\u7b97\u56fe\u89e3\u9898\u7684\u60c5\u51b5\uff0c\u6309\u5982\u4e0b\u6d41\u7a0b\u8fdb\u884c\uff1a\n\n1. \u6784\u5efa\u8ba1\u7b97\u56fe\u3002\n2. \u5728\u8ba1\u7b97\u56fe\u4e0a\uff0c\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u8fd9\u91cc\u7684\u7b2c\u4e8c\u6b65\u201c\u4ece\u5de6\u5411\u53f3\u8fdb\u884c\u8ba1\u7b97\u201d\u662f\u4e00\u79cd\u6b63\u65b9\u5411\u4e0a\u7684\u4f20\u64ad\uff0c\u7b80\u79f0 **\u6b63\u5411\u4f20\u64ad(foraward propagation)** \u3002\u5176\u53cd\u65b9\u5411\u79f0\u4e3a**\u53cd\u5411\u4f20\u64ad\uff08backward propagation\uff09**\u3002\u53cd\u5411\u4f20\u64ad\u5728\u63a5\u4e0b\u6765\u7684\u5bfc\u6570\u8ba1\u7b97\u4e2d\u53d1\u6325\u91cd\u8981\u4f5c\u7528\u3002\n\n\u8ba1\u7b97\u56fe\u7684\u7279\u5f81\u662f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u201c\u5c40\u90e8\u8ba1\u7b97\u201d\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c\u3002\u201c\u5c40\u90e8\u201d\u8fd9\u4e2a\u8bcd\u7684\u610f\u601d\u662f\u201c\u4e0e\u81ea\u5df1\u76f8\u5173\u7684\u67d0\u4e2a\u5c0f\u8303\u56f4\u201d\u3002\u5c40\u90e8\u8ba1\u7b97\u662f\u6307\uff0c\u65e0\u8bba\u5168\u5c40\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u90fd\u80fd\u53ea\u6839\u636e\u4e0e\u81ea\u5df1\u76f8\u5173\u7684\u4fe1\u606f\u8f93\u51fa\u63a5\u4e0b\u6765\u7684\u7ed3\u679c\u3002\u5404\u4e2a\u8282\u70b9\u5904\u53ea\u9700\u8fdb\u884c\u4e0e\u81ea\u5df1\u6709\u5173\u7684\u8ba1\u7b97\uff0c\u4e0d\u7528\u8003\u8651\u5168\u5c40\u3002\n\n\u53e6\u5916\uff0c\u5229\u7528\u8ba1\u7b97\u56fe\u53ef\u4ee5\u5c06\u4e2d\u95f4\u7684\u8ba1\u7b97\u7ed3\u679c\u5168\u90e8\u4fdd\u5b58\u8d77\u6765\u3002\u4f46\u662f\u4f7f\u7528\u8ba1\u7b97\u56fe\u6700\u5927\u7684\u539f\u56e0\u662f\uff0c\u5176\u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u9ad8\u6548\u8ba1\u7b97\u5bfc\u6570\u3002\n\n\u4f20\u9012\u5c40\u90e8\u5bfc\u6570\u7684\u539f\u7406\uff0c\u662f\u57fa\u4e8e\u5fae\u79ef\u5206\u7684\u94fe\u5f0f\u6cd5\u5219\u7684\u3002\u94fe\u5f0f\u6cd5\u5219\u662f\u5173\u4e8e\u590d\u5408\u51fd\u6570\u7684\u5bfc\u6570\u7684\u6027\u8d28\uff0c\u5176\u5b9a\u4e49\uff1a\n\n> \u5982\u679c\u67d0\u4e2a\u51fd\u6570\u7531\u590d\u5408\u51fd\u6570\u8868\u793a\uff0c\u5219\u8be5\u590d\u5408\u51fd\u6570\u7684\u5bfc\u6570\u53ef\u4ee5\u7528\u6784\u6210\u590d\u5408\u51fd\u6570\u7684\u5404\u4e2a\u51fd\u6570\u7684\u5bfc\u6570\u7684\u4e58\u79ef\u8868\u793a\u3002\n\n\u53cd\u5411\u4f20\u64ad\u7684\u8ba1\u7b97\u987a\u5e8f\u662f\uff0c\u5c06\u4fe1\u53f7$E$\u4e58\u4ee5\u8282\u70b9\u7684\u5c40\u90e8\u5bfc\u6570\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u53cd\u5411\u4f20\u64ad\u662f\u57fa\u4e8e\u94fe\u5f0f\u6cd5\u5219\u7684\u3002\n\n## \u53cd\u5411\u4f20\u64ad\n\n### \u52a0\u6cd5\u8282\u70b9\u7684\u53cd\u5411\u4f20\u64ad\n\n\u53cd\u5411\u4f20\u64ad\u5c06\u4ece\u4e0a\u6e38\u4f20\u8fc7\u6765\u7684\u5bfc\u6570\u4e58\u4ee51\uff0c\u7136\u540e\u4f20\u5411\u4e0b\u6e38\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56e0\u4e3a\u5047\u53d1\u8282\u70b9\u7684\u53cd\u5411\u4f20\u64ad\u53ea\u4e58\u4ee51\uff0c\u6240\u4ee5\u8f93\u5165\u7684\u503c\u4f1a\u539f\u5c01\u4e0d\u52a8\u5730\u6d41\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u52a0\u6cd5\u7684\u53cd\u5411\u4f20\u64ad\u53ea\u662f\u5c06\u4e0a\u6e38\u7684\u503c\u4f20\u7ed9\u4e0b\u6e38\uff0c\u5e76\u4e0d\u9700\u8981\u6b63\u5411\u4f20\u64ad\u7684\u8f93\u5165\u4fe1\u53f7\u3002\n\n### \u4e58\u6cd5\u8282\u70b9\u7684\u53cd\u5411\u4f20\u64ad\n\n\u4e58\u6cd5\u7684\u53cd\u5411\u4f20\u64ad\u4f1a\u5c06\u4e0a\u6e38\u7684\u503c\u4e58\u4ee5\u6b63\u5411\u4f20\u64ad\u65f6\u7684\u8f93\u5165\u4fe1\u53f7\u7684\u201c\u7ffb\u8f6c\u503c\u201d\u540e\u4f20\u9012\u7ed9\u4e0b\u6e38\u3002\u7ffb\u8f6c\u503c\u8868\u793a\u4e00\u79cd\u53cd\u8f6c\u5173\u7cfb\u3002\u4f8b\u5982\uff0c\u6b63\u5411\u4f20\u64ad\u65f6\u4fe1\u53f7\u662f$x$\u7684\u8bdd\uff0c\u53cd\u5411\u4f20\u64ad\u65f6\u5219\u662f$y$\uff1b\u6b63\u5411\u4f20\u64ad\u65f6\u4fe1\u53f7\u662f$y$\u7684\u8bdd\uff0c\u53cd\u5411\u4f20\u64ad\u65f6\u5219\u662f$x$\u3002\n\n\u4e58\u6cd5\u7684\u53cd\u5411\u4f20\u64ad\u9700\u8981\u6b63\u5411\u4f20\u64ad\u65f6\u7684\u8f93\u5165\u4fe1\u53f7\u503c\u3002\u56e0\u6b64\uff0c\u5b9e\u73b0\u4e58\u6cd5\u8282\u70b9\u7684\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u8981\u4fdd\u5b58\u6b63\u5411\u4f20\u64ad\u662f\u8f93\u5165\u4fe1\u53f7\u3002\n\n## \u7b80\u5355\u5c42\u7684\u5b9e\u73b0\n\n\u201c\u5c42\u201d\u662f\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u529f\u80fd\u7684\u5355\u4f4d\u3002\u6bd4\u5982\u8d1f\u8d23sigmoid\u51fd\u6570\u7684`Sigmoid`\u3001\u8d1f\u8d23\u77e9\u9635\u4e58\u79ef\u7684`Affine`\u7b49\u90fd\u662f\u4ee5\u5c42\u4e3a\u5355\u4f4d\u8fdb\u884c\u5b9e\u73b0\u7684\u3002\n\n\u5c42\u7684\u5b9e\u73b0\u4e2d\u6709\u4e24\u4e2a\u5171\u901a\u7684\u65b9\u6cd5(\u63a5\u53e3)\uff1a`forward()`\u548c`backward()`\u3002\u524d\u8005\u5bf9\u5e94\u6b63\u5411\u4f20\u64ad\uff0c\u540e\u8005\u5bf9\u5e94\u53cd\u5411\u4f20\u64ad\u3002\n\n\u5b9e\u73b0\u8d2d\u4e70\u82f9\u679c\u7684\u4f8b\u5b50\uff0c\u5b9e\u73b0\u4e58\u6cd5\u8282\u70b9\u79f0\u4e3a\u201c\u4e58\u6cd5\u5c42\u201d\uff08MulLayer\uff09\uff0c\u52a0\u6cd5\u8282\u70b9\u79f0\u4e3a\u201c\u52a0\u6cd5\u5c42\u201d\uff08AddLayer\uff09\uff1a","2a5511b7":"\u4e702\u4e2a\u82f9\u679c\u548c3\u4e2a\u6a58\u5b50\u7684\u5b9e\u73b0\uff1a","03a56dcd":"\u4ece\u4e0a\u56fe\u77e5\uff0c\u5404\u5c42\u7684\u6fc0\u6d3b\u503c\u5448\u504f\u54110\u548c1\u5206\u5e03\u3002\u8fd9\u91cc\u4f7f\u7528\u7684sigmoid\u51fd\u6570\u662fS\u578b\u51fd\u6570\uff0c\u968f\u7740\u8f93\u51fa\u4e0d\u65ad\u5730\u9760\u8fd10\u6216\u80051\uff0c\u5b83\u7684\u5bfc\u6570\u7684\u503c\u9010\u6e10\u63a5\u8fd10.\u56e0\u6b64\uff0c\u504f\u54110\u548c1\u7684\u6570\u636e\u5206\u5e03\u4f1a\u9020\u6210\u53cd\u5411\u4f20\u64ad\u4e2d\u68af\u5ea6\u7684\u503c\u4e0d\u65ad\u53d8\u5c0f\uff0c\u6700\u540e\u6d88\u5931\u3002\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a**\u68af\u5ea6\u6d88\u5931(gradient vanishing)** \u3002\u5c42\u6b21\u52a0\u6df1\u7684\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u53ef\u80fd\u4f1a\u66f4\u52a0\u4e25\u91cd\u3002\n\n\u6211\u4eec\u518d\u5c06\u6743\u91cd\u7684\u6807\u51c6\u5dee\u8bbe\u4e3a0.01\uff0c\u5176\u4e3a\u9ad8\u65af\u5206\u5e03\u65f6\uff0c\u5404\u5c42\u7684\u6fc0\u6d3b\u503c\u5206\u5e03\u60c5\u51b5\uff1a","d7a35540":"\u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6807\u91cf10\u88ab\u6269\u5c55\u6210\u4e862x2\u7684\u5f62\u72b6\uff0c\u7136\u540e\u518d\u4e0e\u77e9\u9635A\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u3002\u8fd9\u4e2a\u5de7\u5999\u7684\u529f\u80fd\u79f0\u4e3a**\u5e7f\u64ad**\u3002","4d7d0842":"## Affine\/Softmax\u5c42\u7684\u5b9e\u73b0\n\n### Affine\u5c42\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u6b63\u5411\u4f20\u64ad\u4e2d\u8fdb\u884c\u7684\u77e9\u9635\u4e58\u79ef\u8fd0\u7b97\u5728\u51e0\u4f55\u5b66\u9886\u57df\u88ab\u79f0\u4e3a\u201c\u4eff\u5c04\u53d8\u6362\u201d\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u5c06\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\u7684\u5904\u7406\u5b9e\u73b0\u4e3a\u201cAffine\u5c42\u201d\u3002\u51e0\u4f55\u4e2d\uff0c\u4eff\u5c04\u53d8\u6362\u5305\u62ec\u4e00\u6b21\u7ebf\u6027\u53d8\u6362\u548c\u4e00\u6b21\u5e73\u79fb\uff0c\u5206\u522b\u5bf9\u5e94\u795e\u7ecf\u7f51\u7edc\u7684\u52a0\u6743\u548c\u8fd0\u7b97\u4e0e\u52a0\u504f\u7f6e\u8fd0\u7b97\u3002","b569904d":"\u4e0a\u9762`uodate()`\u65b9\u6cd5\u6700\u540e\u4e00\u884c\u52a0\u4e0a\u4e86\u5fae\u5c0f\u503c`1e-7`\u3002\u8fd9\u662f\u672a\u6765\u9632\u6b62\u5f53`self.h[key]`\u4e2d\u67090\u65f6\uff0c\u5c060\u7528\u4f5c\u9664\u6570\u7684\u60c5\u51b5\u3002\u5728\u5f88\u591a\u6df1\u5ea6\u5b66\u4e60\u7684\u6846\u67b6\u4e2d\uff0c\u8fd9\u4e2a\u5fae\u5c0f\u503c\u4e5f\u53ef\u4ee5\u8bbe\u5b9a\u4e3a\u53c2\u6570\uff0c\u4f46\u8fd9\u91cc\u6211\u4eec\u7528\u7684\u662f`1e-7`\u8fd9\u4e2a\u56fa\u5b9a\u503c\u3002\n\n\u518d\u4ee5$f(x,y)=\\frac{1}{20} x^2+y^2$\u4e3a\u4f8b\u3002\u548cSGD\u76f8\u6bd4\uff0c\u51fd\u6570\u7684\u53d6\u503c\u9ad8\u6548\u5730\u5411\u7740\u6700\u5c0f\u503c\u79fb\u52a8\u3002\u7531\u4e8e$y$\u5468\u65b9\u5411\u4e0a\u7684\u68af\u5ea6\u8f83\u5927\uff0c\u56e0\u6b64\u521a\u5f00\u59cb\u53d8\u52a8\u8f83\u5927\uff0c\u4f46\u662f\u540e\u9762\u4f1a\u6839\u636e\u8fd9\u4e2a\u8f83\u5927\u7684\u53d8\u52a8\u6309\u6bd4\u4f8b\u8fdb\u884c\u8c03\u6574\uff0c\u51cf\u5c0f\u66f4\u65b0\u7684\u6b65\u4f10\u3002\u56e0\u6b64\uff0c$y$\u8f74\u65b9\u5411\u4e0a\u7684\u66f4\u65b0\u7a0b\u5ea6\u88ab\u51cf\u5f31\uff0c\u201c\u4e4b\u201d\u5b57\u5f62\u7684\u53d8\u52a8\u7a0b\u5ea6\u6709\u6240\u8870\u51cf\u3002\n\n### Adam\n\nAdam\u662f2015\u5e74\u63d0\u51fa\u7684\u65b0\u65b9\u6cd5\u3002\u76f4\u89c2\u7684\u8bb2\uff0c\u5c31\u662f\u878d\u5408\u4e86Momentum\u548cAdaGrad\u7684\u65b9\u6cd5\u3002\u901a\u8fc7\u7ec4\u5408\u524d\u9762\u4e24\u4e2a\u65b9\u6cd5\u7684\u4f18\u70b9\uff0c\u6709\u671b\u5b9e\u73b0\u53c2\u6570\u7a7a\u95f4\u7684\u9ad8\u6548\u641c\u7d22\u3002\u6b64\u5916\uff0c\u8fdb\u884c\u8d85\u53c2\u6570\u7684\u201c\u504f\u7f6e\u6821\u6b63\u201d\u4e5f\u662fAdam\u7684\u7279\u5f81\u3002\n\n> \u8fd9\u91cc\u5173\u4e8eAdam\u65b9\u6cd5\u7684\u8bf4\u660e\u53ea\u662f\u4e00\u4e2a\u76f4\u89c2\u7684\u8bf4\u660e\uff0c\u5e76\u4e0d\u5b8c\u5168\u6b63\u786e\uff0c\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u8003\u539f\u4f5c\u8005\u8bba\u6587\uff1ahttp:\/\/arxiv.org\/abs\/1412.6980v8","6ce10c9e":"### \u4e3a\u4ec0\u4e48\u8981\u8bbe\u5b9a\u635f\u5931\u51fd\u6570\n\nQ: \u4e3a\u4ec0\u4e48\u8981\u5bfc\u5165\u635f\u5931\u51fd\u6570\uff1f\u65e2\u7136\u6211\u4eec\u7684\u76ee\u6807\u662f\u83b7\u5f97\u8bc6\u522b\u7cbe\u5ea6\u5c3d\u53ef\u80fd\u9ad8\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u90a3\u4e0d\u662f\u5e94\u8be5\u628a\u8bc6\u522b\u7cbe\u5ea6\u4f5c\u4e3a\u6307\u6807\u5417\uff1f\n\nA: \u5728\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e2d\uff0c\u5bfb\u627e\u6700\u4f18\u53c2\u6570\uff08\u6743\u91cd\u548c\u504f\u7f6e\uff09\u65f6\uff0c\u8981\u5bfb\u627e\u4f7f\u635f\u5931\u51fd\u6570\u7684\u503c\u5c3d\u53ef\u80fd\u5c0f\u7684\u53c2\u6570\u3002\u4e3a\u4e86\u627e\u5230\u4f7f\u635f\u5931\u51fd\u6570\u7684\u503c\u5c3d\u53ef\u80fd\u5c0f\u7684\u5730\u65b9\uff0c\u9700\u8981\u8ba1\u7b97\u7684\u53c2\u6570\u7684\u5bfc\u6570\uff08\u786e\u5207\u7684\u8bb2\u662f\u68af\u5ea6\uff09\uff0c\u7136\u540e\u4ee5\u8fd9\u4e2a\u5bfc\u6570\u4e3a\u6307\u5f15\uff0c\u9010\u6b65\u66f4\u65b0\u53c2\u6570\u7684\u503c\u3002\u800c\u5bf9\u6743\u91cd\u53c2\u6570\u7684\u635f\u5931\u51fd\u6570\u6c42\u5bfc\uff0c\u8868\u793a\u7684\u662f\u201c\u5982\u679c\u7a0d\u5fae\u6539\u53d8\u8fd9\u4e2a\u6743\u91cd\u53c2\u6570\u7684\u503c\uff0c\u635f\u5931\u51fd\u6570\u7684\u503c\u4f1a\u5982\u4f55\u53d8\u5316\u201d\u3002**\u5982\u679c\u5bfc\u6570\u7684\u503c\u4e3a\u8d1f**\u5982\uff0c\u901a\u8fc7\u4f7f\u8be5\u6743\u91cd\u53c2\u6570\u5411\u6b63\u65b9\u5411\u6539\u53d8\uff0c\u53ef\u4ee5\u51cf\u5c0f\u635f\u5931\u51fd\u6570\u7684\u503c\uff1b\u53cd\u8fc7\u6765\uff0c**\u5982\u679c\u5bfc\u6570\u7684\u503c\u4e3a\u6b63**\u5982\uff0c\u5219\u901a\u8fc7\u4f7f\u8be5\u6743\u91cd\u53c2\u6570\u5411\u8d1f\u65b9\u5411\u6539\u53d8\uff0c\u53ef\u4ee5\u51cf\u5c0f\u635f\u5931\u51fd\u6570\u7684\u503c\u3002**\u5f53\u5bfc\u6570\u7684\u503c\u4e3a0\u65f6**\u5982\uff0c\u65e0\u8bba\u6743\u91cd\u53c2\u6570\u5411\u54ea\u4e2a\u65b9\u5411\u53d8\u5316\uff0c\u635f\u5931\u51fd\u6570\u7684\u503c\u90fd\u4e0d\u4f1a\u6539\u53d8\uff0c\u6b64\u65f6\u8be5\u6743\u91cd\u53c2\u6570\u7684\u66f4\u65b0\u4f1a\u505c\u5728\u6b64\u5904\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff1a**\u5728\u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u65f6\uff0c\u4e0d\u80fd\u5c06\u8bc6\u522b\u7cbe\u5ea6\u4f5c\u4e3a\u6307\u6807\u3002\u56e0\u4e3a\u5982\u679c\u4ee5\u8bc6\u522b\u7cbe\u5ea6\u4e3a\u6307\u6807\uff0c\u5219\u53c2\u6570\u7684\u5bfc\u6570\u5728\u7edd\u5927\u591a\u6570\u5730\u65b9\u90fd\u4f1a\u53d8\u62100**\u3002\n\n\u53ef\u4ee5\u8bf4\uff0c\u8bc6\u522b\u7cbe\u5ea6\u5bf9\u5fae\u5c0f\u7684\u53c2\u6570\u53d8\u5316\u57fa\u672c\u4e0a\u6ca1\u6709\u4ec0\u4e48\u53cd\u5e94\uff0c\u5373\u4fbf\u6709\u53cd\u5e94\uff0c\u5b83\u7684\u503c\u4e5f\u662f\u4e0d\u8fde\u7eed\u5730\u3001\u7a81\u7136\u5730\u53d8\u5316\u3002\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\u7684\u9636\u8dc3\u51fd\u6570\u4e5f\u6709\u540c\u6837\u7684\u60c5\u51b5\u3002\u51fa\u4e8e\u76f8\u540c\u7684\u539f\u56e0\uff0c\u5982\u679c\u4f7f\u7528\u9636\u8dc3\u51fd\u6570\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u5c06\u65e0\u6cd5\u8fdb\u884c\u3002\u4f17\u6240\u5468\u77e5\uff0c\u9636\u8dc3\u51fd\u6570\u7684\u659c\u7387\u5728\u7edd\u5927\u591a\u6570\u5730\u65b9\u90fd\u4e3a0\uff0c\u800csigmoid\u51fd\u6570\u7684\u659c\u7387\uff08\u5207\u7ebf\uff09\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4e0d\u4e3a0\u3002\n\n## \u6570\u503c\u5fae\u5206\n\n\u68af\u5ea6\u6cd5\u4f7f\u7528\u68af\u5ea6\u7684\u4fe1\u606f\u51b3\u5b9a\u524d\u8fdb\u7684\u65b9\u5411\u3002\n\n### \u5bfc\u6570\n\n\u5bfc\u6570\u662f\u67d0\u4e2a\u77ac\u95f4\u7684\u53d8\u5316\u91cf\u3002\n\nPython\u4e2d\u7684\u820d\u5165\u8bef\u5dee\uff1a","ed1509b1":"\u4e70\u82f9\u679c\u6b63\u5411\u4f20\u64ad\u7684\u5b9e\u73b0\uff1a","81ce2dc3":"### \u6279\u7248\u672c\u7684Affine\u5c42","145c6fb0":"NumPy\u6570\u7ec4\u4e5f\u53ef\u4ee5\u548c\u5355\u4e00\u7684\u6570\u503c\uff08\u6807\u91cf\uff09\u7ec4\u5408\u8d77\u6765\u8fdb\u884c\u8fd0\u7b97\u3002\u6b64\u65f6\uff0c\u9700\u8981\u5728NumPy\u6570\u7ec4\u7684\u5404\u4e2a\u5143\u7d20\u548c\u6807\u91cf\u4e4b\u95f4\u8fdb\u884c\u8fd0\u7b97\u3002\u8fd9\u4e2a\u529f\u80fd**\u4e5f\u88ab\u79f0\u4e3a\u5e7f\u64ad**\u3002","1e4f37df":"### \u795e\u7ecf\u7f51\u7edc\u7684\u68af\u5ea6\n\n","597ee9b0":"\u7531\u4e8eone-hot\u8868\u793a\u4e2d$t$\u4e3a0\u7684\u5143\u7d20\u7684\u4ea4\u53c9\u71b5\u8bef\u5dee\u4e5f\u4e3a0\uff0c\u56e0\u6b64\u9488\u5bf9\u8fd9\u4e9b\u5143\u7d20\u7684\u8ba1\u7b97\u53ef\u4ee5\u5ffd\u7565\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u53ef\u4ee5\u83b7\u5f97\u795e\u7ecf\u7f51\u7edc\u5728\u6b63\u786e\u89e3\u6807\u7b7e\u5904\u7684\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u4ea4\u53c9\u71b5\u8bef\u5dee\u3002\u56e0\u6b64\uff0c$t$\u4e3aone-hot\u8868\u793a\u65f6\u901a\u8fc7 `t * np.log(y)`\u8ba1\u7b97\u7684\u5730\u65b9\uff0c\u5728$t$\u4e3a\u6807\u7b7e\u5f62\u5f0f\u65f6\uff0c\u53ef\u7528`np.log(y[np.arange(batch_size), t])`\u5b9e\u73b0\u76f8\u540c\u7684\u5904\u7406\u3002\n\n\u4ecb\u7ecd\u4e0b`np.log(y[np.arange(batch_size), t])`\uff1a`np.arange(batch_size`\u4f1a\u751f\u4ea7\u4e00\u4e2a\u4ece0\u5230batch_size-1\u7684\u6570\u7ec4\u3002\u56e0\u4e3at\u4e2d\u6807\u7b7e\u662f\u4ee5`[2, 7, 0, 9, 4]`\u7684\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5`y[np.arange(batch_size), t`\u80fd\u62bd\u51fa\u5404\u4e2a\u6570\u636e\u7684\u6b63\u786e\u89e3\u6807\u7b7e\u5bf9\u5e94\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\u3002","e5e4c844":"### softmax\u51fd\u6570\u7684\u7279\u5f81\n\nsoftmax\u51fd\u6570\u7684\u8f93\u51fa\u662f0.0\u52301.0\u4e4b\u95f4\u7684\u5b9e\u6570\u3002\u5e76\u4e14\uff0csoftmax\u51fd\u6570\u7684\u8f93\u51fa\u503c\u7684\u603b\u548c\u662f1.\u8f93\u51fa\u603b\u548c\u4e3a1\u662fsoftmax\u51fd\u6570\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u8d28\uff0c\u8fd9\u4e2a\u7279\u8d28\u8ba9softmax\u51fd\u6570\u7684\u8f93\u51fa\u89e3\u91ca\u4e3a\u201c\u6982\u7387\u201d\u3002**\u901a\u8fc7softmax\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6982\u7387\u7684\uff08\u7edf\u8ba1\u7684\uff09\u65b9\u6cd5\u5904\u7406\u95ee\u9898\u3002**","326ad832":"ReLU\u5c42\u7684\u4f5c\u7528\u5c31\u50cf\u7535\u8def\u5f00\u5173\u4e00\u6837\uff1a\u6b63\u5411\u4f20\u64ad\u65f6\uff0c\u6709\u7535\u6d41\u901a\u8fc7\u65f6\u5c06\u5f00\u5173\u8bbe\u4e3aON\uff0c\u6ca1\u6709\u7535\u6d41\u901a\u8fc7\u65f6\u5c06\u5f00\u5173\u8bbe\u4e3aOFF\uff1b\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u5f00\u5173\u8bbe\u4e3aON\u65f6\u7535\u6d41\u76f4\u63a5\u901a\u8fc7\uff0c\u5f00\u5173\u8bbe\u4e3aOFF\u65f6\u7535\u6d41\u4e0d\u4f1a\u901a\u8fc7\u3002","2cbfaedd":"<span style=\"font-family:Microsoft YaHei; font-size:1.5em;\">\u300a\u6df1\u5ea6\u5b66\u4e60\u5165\u95e8\uff1a\u57fa\u4e8ePython\u7684\u7406\u8bba\u4e0e\u5b9e\u73b0\u300b\u5b66\u4e60\u7b14\u8bb0<\/span>\n---\n\nBy: ZNing Creating in: 2019-07-09","940ee4e5":"# \u4e0e\u5b66\u4e60\u76f8\u5173\u7684\u6280\u5de7\n\n\u672c\u7ae0\u8bbe\u8ba1\u5bfb\u627e\u6700\u4f18\u6743\u91cd\u53c2\u6570\u7684\u6700\u4f18\u5316\u65b9\u6cd5\u3001\u6743\u91cd\u53c2\u6570\u7684\u521d\u59cb\u503c\u3001\u8d85\u53c2\u6570\u7684\u8bbe\u5b9a\u65b9\u6cd5\u7b49\u3002\u53e6\u5916\u5e94\u5bf9\u8fc7\u62df\u5408\u5c06\u4ecb\u7ecd\u6743\u503c\u8870\u51cf\u3001Dropout\u7b49\u6b63\u5219\u5316\u65b9\u6cd5\u3002\u4ee5\u53ca\u4ecb\u7ecdBatch Normalization\u65b9\u6cd5\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\n\n## \u53c2\u6570\u7684\u66f4\u65b0\n\n\u5bfb\u627e\u6700\u4f18\u53c2\u6570\u7684\u95ee\u9898\u7684\u8fc7\u7a0b\u79f0\u4e3a**\u6700\u4f18\u5316**\u3002\n\n\u9057\u61be\u7684\u662f\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u6700\u4f18\u5316\u95ee\u9898\u975e\u5e38\u96be\u3002\u8fd9\u662f\u56e0\u4e3a\u53c2\u6570\u7a7a\u95f4\u975e\u5e38\u590d\u6742\uff0c\u65e0\u6cd5\u8f7b\u6613\u627e\u5230\u6700\u4f18\u89e3\u3002\u800c\u4e14\uff0c\u5728\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u53c2\u6570\u7684\u6570\u91cf\u975e\u5e38\u5e9e\u5927\uff0c\u5bfc\u81f4\u6700\u4f18\u5316\u95ee\u9898\u66f4\u52a0\u590d\u6742\u3002\n\n\u4f7f\u7528\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u6cbf\u68af\u5ea6\u65b9\u5411\u66f4\u65b0\u53c2\u6570\uff0c\u5e76\u91cd\u590d\u8fd9\u4e2a\u6b65\u9aa4\u591a\u6b21\uff0c\u4ece\u800c\u9010\u6e10\u9760\u8fd1\u6700\u4f18\u53c2\u6570\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a**\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5(stochastic gradient descent, \u7b80\u79f0SGD)**\u3002\n\n### SGD\n\n$$\\boldsymbol W \\leftarrow \\boldsymbol W - \\eta \\frac{\\partial L}{\\partial \\boldsymbol W}$$\n\n\u628a\u9700\u8981\u66f4\u65b0\u7684\u6743\u91cd\u53c2\u6570\u8bb0\u4e3a$\\boldsymbol W$\uff0c\u628a\u635f\u5931\u51fd\u6570\u5173\u4e8e$\\boldsymbol W$\u7684\u68af\u5ea6\u8bb0\u4e3a$\\frac{\\partial L}{\\partial \\boldsymbol W}$\uff0c$\\eta$\u8868\u793a\u5b66\u4e60\u7387\uff0c\u5b66\u4e60\u7387\u4e00\u822c\u4f1a\u53d60.01\u6216\u80050.001\u8fd9\u6837\u4e8b\u5148\u786e\u5b9a\u597d\u7684\u503c\u3002\u4e0a\u5f0f\u4e2d$\\leftarrow$\u8868\u793a\u7528\u53f3\u8fb9\u7684\u503c\u66f4\u65b0\u5de6\u8fb9\u7684\u503c\u3002\n\n\u6211\u4eec\u5c06SGD\u5b9e\u73b0\u4e3a\u4e00\u4e2aPython\u7c7b\uff1a","02a6db5c":"## \u611f\u77e5\u673a\u7684\u5c40\u9650\n\n\u611f\u77e5\u673a\u65e0\u6cd5\u5b9e\u73b0\u903b\u8f91\u5f02\u6216\u95e8\u3002\u611f\u77e5\u673a\u7684\u5c40\u9650\u6027\u5c31\u5728\u4e8e\u5b83\u53ea\u80fd\u8868\u793a\u7531\u4e00\u6761\u76f4\u7ebf\u5206\u5272\u7684\u7a7a\u95f4\uff0c\u5373\u53ea\u80fd\u5206\u5272\u7ebf\u6027\u7a7a\u95f4\u3002","7d28b7fe":"\u540c\u6837\uff0c\u77e9\u9635\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6807\u91cf\uff08\u5355\u4e00\u6570\u503c\uff09\u5bf9\u77e9\u9635\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\uff0c**\u8fd9\u4e5f\u662f\u57fa\u4e8e\u5e7f\u64ad\u7684\u529f\u80fd**","1c81b470":"\u4e0a\u9762\u7684\u51fd\u6570\u7684\u5b9e\u73b0\u770b\u4e0a\u53bb\u6709\u4e9b\u590d\u6742\uff0c\u4f46\u5b83\u6267\u884c\u7684\u5904\u7406\u548c\u6c42\u5355\u53d8\u91cf\u7684\u6570\u503c\u5fae\u5206\u57fa\u672c\u6ca1\u6709\u533a\u522b\u3002","57f68a27":"\u6211\u4eec\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\uff0c\u5176\u96c6\u4e2d\u57280.5\u9644\u8fd1\u7684\u5206\u5e03\u3002\u56e0\u4e3a\u4e0d\u50cf\u4e4b\u524d\u90a3\u6837\u504f\u54110\u4e0e1\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\u6709\u6240\u504f\u5411\uff0c\u6709\u591a\u4e2a\u795e\u7ecf\u5143\u90fd\u8f93\u51fa\u51e0\u4e4e\u76f8\u540c\u7684\u503c\uff0c\u8fd9\u4e9b\u503c\u662f\u6ca1\u6709\u5b58\u5728\u7684\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u8bf4\u660e\u5728\u8868\u73b0\u529b\u4e0a\u4f1a\u6709\u5f88\u5927\u95ee\u9898\uff0c\u4f1a\u51fa\u73b0\u201c\u8868\u73b0\u529b\u53d7\u9650\u201d\u7684\u95ee\u9898\u3002\n\n\u5404\u5c42\u7684\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\u90fd\u8981\u6c42\u6709\u9002\u5f53\u7684\u5e7f\u5ea6\u3002\u901a\u8fc7\u5728\u5404\u5c42\u95f4\u4f20\u9012\u591a\u6837\u6027\u7684\u6570\u636e\uff0c\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u8fdb\u884c\u9ad8\u6548\u7684\u5b66\u4e60\u3002\u53cd\u8fc7\u6765\uff0c\u5982\u679c\u4f20\u9012\u7684\u662f\u6709\u6240\u504f\u5411\u7684\u6570\u636e\uff0c\u5c31\u4f1a\u51fa\u73b0\u68af\u5ea6\u6d88\u5931\u6216\u8005\u201c\u8868\u73b0\u529b\u53d7\u9650\u201d\u7684\u95ee\u9898\uff0c\u5bfc\u81f4\u5b66\u4e60\u53ef\u80fd\u65e0\u6cd5\u8fdb\u884c\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528Xavier Glorot\u7b49\u4eba\u7684\u8bba\u6587\u4e2d\u63a8\u8350\u7684\u6743\u91cd\u521d\u59cb\u503c\uff08\u4fd7\u79f0\u201cXavier\u521d\u59cb\u503c\u201d\uff09\u3002\u73b0\u4eca\u5728\u4e00\u822c\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\uff0cXavier\u521d\u59cb\u503c\u5df2\u7ecf\u88ab\u4f5c\u4e3a\u6807\u51c6\u4f7f\u7528\u3002\u6bd4\u5982\uff0cCaffe\u6846\u67b6\u4e2d\uff0c\u901a\u8fc7\u5728\u8bbe\u5b9a\u6743\u91cd\u521d\u59cb\u503c\u65f6\u8d4b\u4e88xavier\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528Xavier\u521d\u59cb\u503c\u3002\n\nXavier\u7684\u8bba\u6587\u4e2d\uff0c\u672a\u6765\u4f7f\u5404\u5c42\u7684\u6fc0\u6d3b\u503c\u5448\u73b0\u51fa\u5177\u6709\u76f8\u540c\u5e7f\u5ea6\u7684\u5206\u5e03\uff0c\u63a8\u5bfc\u4e86\u5408\u9002\u7684\u6743\u91cd\u5c3a\u5ea6\u3002\u63a8\u5bfc\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5982\u679c\u524d\u4e00\u5c42\u8282\u70b9\u6570\u4e3a$n$\uff0c\u5219\u521d\u59cb\u503c\u4f7f\u7528\u6807\u51c6\u5dee\u4e3a$\\frac{1}{\\sqrt{n}}$\u7684\u5206\u5e03\u3002Xavier\u7684\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u8bbe\u5b9a\u503c\uff0c\u4e0d\u4ec5\u8003\u8651\u4e86\u524d\u4e00\u5c42\u7684\u8f93\u5165\u8282\u70b9\u6570\u91cf\uff0c\u8fd8\u8003\u8651\u4e86\u4e0b\u4e00\u5c42\u7684\u8f93\u51fa\u8282\u70b9\u6570\u91cf\u3002\u4f46\u662fCaffe\u7b49\u6846\u67b6\u7684\u5b9e\u73b0\u4e2d\u8fdb\u884c\u4e86\u7b80\u5316\uff0c\u53ea\u4f7f\u7528\u4e86\u8fd9\u91cc\u6240\u8bf4\u7684\u524d\u4e00\u5c42\u7684\u8f93\u5165\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u4f7f\u7528Xavier\u521d\u59cb\u503c\u540e\uff0c\u524d\u4e00\u5c42\u7684\u8282\u70b9\u6570\u8d8a\u591a\uff0c\u8981\u8bbe\u5b9a\u4e3a\u76ee\u6807\u8282\u70b9\u7684\u521d\u59cb\u503c\u7684\u6743\u91cd\u5c3a\u5ea6\u8d8a\u5c0f\u3002\u5b9e\u9a8c\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a","d2029dd5":"\u8f93\u51fa\u5c42\u6240\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u8981\u6839\u636e\u6c42\u89e3\u95ee\u9898\u7684\u6027\u8d28\u51b3\u5b9a\u3002\u4e00\u822c\u5730\uff0c\u56de\u5f52\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u6052\u7b49\u51fd\u6570\uff0c\u4e8c\u5143\u5206\u7c7b\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528sigmoid\u51fd\u6570\uff0c\u591a\u5143\u5206\u7c7b\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528softmax\u51fd\u6570\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\u5c0f\u7ed3","b537ccca":"\u8fd9\u91cc\u5b9a\u4e49\u4e86`init_network()`\u548c`forward()`\u51fd\u6570\u3002`init_network()`\u51fd\u6570\u4f1a\u8fdb\u884c\u6743\u91cd\u548c\u504f\u7f6e\u7684\u521d\u59cb\u5316\uff0c\u5e76\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5b57\u5178\u53d8\u91cf`network`\u4e2d\u3002\u8fd9\u4e2a\u5b57\u5178\u53d8\u91cf\u4e2d\u4fdd\u5b58\u4e86\u6bcf\u4e00\u5c42\u6240\u9700\u7684\u53c2\u6570(\u6743\u91cd\u548c\u504f\u7f6e)\u3002`forward()`\u51fd\u6570\u4e2d\u5219\u5c01\u88c5\u4e86\u5c06\u8f93\u5165\u4fe1\u53f7\u8f6c\u6362\u4e3a\u8f93\u51fa\u4fe1\u53f7\u7684\u5904\u7406\u8fc7\u7a0b\u3002\n\n## \u8f93\u51fa\u5c42\u7684\u8bbe\u8ba1\n\n\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u7528\u5728\u5206\u7c7b\u95ee\u9898\u548c\u56de\u5f52\u95ee\u9898\u4e0a\uff0c\u4e0d\u8fc7\u9700\u8981\u6839\u636e\u60c5\u51b5\u6539\u53d8\u8f93\u51fa\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\u3002\u4e00\u822c\u800c\u8a00\uff0c**\u56de\u5f52\u95ee\u9898\u7528\u6052\u7b49\u51fd\u6570\uff0c\u5206\u7c7b\u95ee\u9898\u7528softrmax\u51fd\u6570**\u3002\n\n### \u6052\u7b49\u51fd\u6570\u548csoftmax\u51fd\u6570\n\n\u6052\u7b49\u51fd\u6570\u4f1a\u8bb2\u8f93\u5165\u6309\u539f\u6837\u8f93\u51fa\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684\u4fe1\u606f\uff0c\u4e0d\u52a0\u4ee5\u4efb\u4f55\u6539\u52a8\u5730\u76f4\u63a5\u8f93\u51fa\u3002\n\n\u5206\u7c7b\u95ee\u9898\u4e2d\u4f7f\u7528\u7684softmax\u51fd\u6570\u53ef\u4ee5\u7528\u4e0b\u9762\u5f0f\u5b50\u8868\u793a\uff1a\n\n$$y_{k}=\\frac{exp(a_{k})}{\\sum_{i=1}^{n}exp(a_{i})}$$\n\n$exp(x)=e^x$\u3002\u4e0a\u5f0f\u8868\u793a\u5047\u8bbe\u8f93\u51fa\u5c42\u5171\u6709$m$\u4e2a\u795e\u7ecf\u5143\uff0c\u8ba1\u7b97\u7b2c$k$\u4e2a\u795e\u7ecf\u5143\u7684\u8f93\u51fa$y_{k}$\u3002softmax\u51fd\u6570\u7684\u5206\u5b50\u662f\u8f93\u5165\u4fe1\u53f7$a_{k}$\u7684\u6307\u6570\u51fd\u6570\uff0c\u5206\u6bcd\u662f\u6240\u6709\u8f93\u5165\u4fe1\u53f7\u7684\u6307\u6570\u51fd\u6570\u7684\u548c\u3002\n\n\u4ece\u5f0f\u4e2d\u53ef\u770b\u51fa\uff0c\u8f93\u51fa\u5c42\u7684\u5404\u4e2a\u795e\u7ecf\u5143\u90fd\u53d7\u5230\u6240\u6709\u8f93\u5165\u4fe1\u53f7\u7684\u5f71\u54cd\u3002\n\n\u5b9e\u73b0softmax\u51fd\u6570\uff1a","7004b674":"## \u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\n\n\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u6b65\u9aa4\uff1a\n\n**\u524d\u63d0\uff1a**\u795e\u7ecf\u7f51\u7edc\u5b58\u5728\u5408\u9002\u7684\u6743\u91cd\u548c\u504f\u7f6e\uff0c\u8c03\u6574\u6743\u91cd\u548c\u504f\u7f6e\u4ee5\u4fbf\u62df\u5408\u8bad\u7ec3\u6570\u636e\u7684\u8fc7\u7a0b\u79f0\u4e3a\u201c\u5b66\u4e60\u201d\u3002\n\n1. **mini-batch**\uff1a\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u968f\u673a\u9009\u51fa\u4e00\u90e8\u5206\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u79f0\u4e3amini-batch\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u51cf\u5c0fmini-batch\u7684\u635f\u5931\u51fd\u6570\u7684\u503c\u3002\n2. **\u8ba1\u7b97\u68af\u5ea6**\uff1a\u4e3a\u4e86\u51cf\u5c0fmini-batch\u7684\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u9700\u8981\u6c42\u51fa\u5404\u4e2a\u6743\u91cd\u53c2\u6570\u7684\u68af\u5ea6\u3002\u68af\u5ea6\u8868\u793a\u635f\u5931\u51fd\u6570\u7684\u503c\u51cf\u5c0f\u6700\u591a\u7684\u65b9\u5411\u3002\n3. **\u66f4\u65b0\u53c2\u6570**\uff1a\u5c06\u6743\u91cd\u53c2\u6570\u6cbf\u68af\u5ea6\u65b9\u5411\u8fdb\u884c\u5fae\u5c0f\u66f4\u65b0\u3002\n4. **\u91cd\u590d**\uff1a\u91cd\u590d\u7b2c1\u30012\u30013\u6b65\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u7684\u6570\u636e\u662f\u968f\u673a\u9009\u62e9\u7684mini batch\u6570\u636e\uff0c\u6240\u4ee5\u53c8\u88ab\u79f0\u4e3a**\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\uff08stochastic gradient descent\uff09**\u3002\u8fd9\u91cc\u7684\u968f\u673a\u6307\u7684\u662f\u968f\u673a\u9009\u62e9\u7684\u610f\u601d\u3002\n\n\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u662f\u201c\u5bf9\u968f\u673a\u9009\u62e9\u7684\u6570\u636e\u8fdb\u884c\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\u201d\u3002\u6df1\u5ea6\u5b66\u4e60\u7684\u5f88\u591a\u6846\u67b6\u4e2d\uff0c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e00\u822c\u7531\u4e00\u4e2a\u540d\u4e3a**SGD**\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u3002SGD\u6765\u6e90\u4e8e\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u7684\u82f1\u6587\u540d\u79f0\u7684\u9996\u5b57\u6bcd\u3002\n\n### 2\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u7c7b","cd8084a3":"\u4e0a\u4f8b\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\u4e0e\u524d\u6587\u8ba8\u8bba\u662f\u4e00\u81f4\u7684\u3002\n\n### mini-batch\u5b66\u4e60\n\n\u673a\u5668\u5b66\u4e60\u4f7f\u7528\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u5b66\u4e60\uff0c\u4e25\u683c\u6765\u8bf4\uff0c\u5c31\u662f\u9488\u5bf9\u8bad\u7ec3\u6570\u636e\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u627e\u51fa\u4f7f\u8be5\u503c\u5c3d\u53ef\u80fd\u5c0f\u7684\u53c2\u6570\u3002\u56e0\u6b64\uff0c**\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u65f6\u5fc5\u987b\u5c06\u6240\u6709\u7684\u8bad\u7ec3\u6570\u636e\u4f5c\u4e3a\u5bf9\u8c61**\u3002\n\n\u4ee5\u4ea4\u53c9\u71b5\u8bef\u5dee\u4e3a\u4f8b\uff0c\u5982\u679c\u8981\u6c42\u6240\u6709\u8bad\u7ec3\u6570\u636e\u7684\u635f\u5931\u51fd\u6570\u7684\u603b\u548c\uff0c\u53ef\u7528\u5982\u4e0b\u5f0f\u5b50\uff1a\n\n$$E=-\\frac{1}{N} \\sum_{n}^{} \\sum_{k}^{} t_{nk} ln y_{nk}$$\n\n\u4e0a\u5f0f\u5047\u8bbe\u6570\u636e\u6709$N$\u4e2a\uff0c$t_{nk}$\u8868\u793a\u7b2c$n$\u4e2a\u6570\u636e\u7684\u7b2c$k$\u4e2a\u5143\u7d20\u7684\u503c\uff08$y_{nk}$\u662f\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\uff0c$t_{nk}$\u662f\u76d1\u7763\u6570\u636e\uff09\u3002\u672c\u5f0f\u53ea\u662f\u628a\u6c42\u5355\u4e2a\u6570\u636e\u7684\u635f\u5931\u51fd\u6570\u7684\u5f0f\u5b50\u6269\u5927\u5230\u4e86$N$\u4efd\u6570\u636e\u3002\u6700\u540e\u9664\u4ee5$N$\u8fdb\u884c\u6b63\u89c4\u5316\uff08\u5f52\u4e00\u5316\uff1f\uff09\uff0c\u5e76\u6c42\u51fa\u5355\u4e2a\u6570\u636e\u7684\u201c\u5e73\u5747\u635f\u5931\u51fd\u6570\u201d\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u8bb8\u591a\u6570\u636e\u5206\u6790\u662f\u5f88\u5927\u7684\u6570\u636e\u91cf\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u53ef\u80fd\u4ee5\u5168\u90e8\u6570\u636e\u4e3a\u5bf9\u8c61\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u4ece\u5168\u90e8\u6570\u636e\u9009\u51fa\u4e00\u90e8\u5206\uff0c\u4f5c\u4e3a\u5168\u90e8\u6570\u636e\u7684\u201c\u8fd1\u4f3c\u201d\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u4e5f\u662f\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u9009\u51fa\u4e00\u6279\u6570\u636e\uff08\u79f0\u4e3amini-batch\uff0c\u5c0f\u6279\u91cf\uff09\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2amini-batch\u8fdb\u884c\u5b66\u4e60\u3002\u8fd9\u79cd\u5b66\u4e60\u65b9\u5f0f\u79f0\u4e3a**mini-batch\u5b66\u4e60**\u3002\u64b0\u5199\u8bfb\u5165MNIST\u6570\u636e\u96c6\u7684\u4ee3\u7801\uff1a","4d07a34c":"\u6ce8\u610f\u4e0a\u9762\u6807\u6ce8\u7684\u4ee3\u7801\uff0c\u5176\u4e2d`OrderedDict`\u662f\u6709\u5e8f\u5b57\u5178\uff0c\u56e0\u6b64\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u6b63\u5411\u4f20\u64ad\u53ea\u9700\u6309\u7167\u6dfb\u52a0\u5143\u7d20\u7684\u987a\u5e8f\u8c03\u7528\u5404\u5c42\u7684`forward()`\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210\u5904\u7406\uff0c\u800c\u53cd\u5411\u4f20\u64ad\u53ea\u9700\u8981\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u8c03\u7528\u5404\u5c42\u5373\u53ef\u3002\u56e0\u4e3aAffine\u5c42\u548cReLU\u5c42\u7684\u5185\u90e8\u4f1a\u6b63\u786e\u5904\u7406\u6b63\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u505a\u7684\u4e8b\u60c5\u4ec5\u4ec5\u662f\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fde\u63a5\u5404\u5c42\uff0c\u518d\u6309\u987a\u5e8f\uff08\u6216\u8005\u9006\u5e8f\uff09\u8c03\u7528\u5404\u5c42\u3002\u7528\u5c42\u8fdb\u884c\u6a21\u5757\u5316\u5b9e\u73b0\u53ef\u4ee5\u5728\u53e6\u5916\u6784\u5efa\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff08\u59825\u5c42\u300110\u5c42\u300120\u5c42\u2026\u2026\u7684\u5927\u578b\u795e\u7ecf\u7f51\u7edc\uff09\u65f6\uff0c\u53ea\u9700\u8981\u50cf\u7ec4\u88c5\u4e50\u9ad8\u79ef\u6728\u90a3\u6837\u6dfb\u52a0\u5fc5\u8981\u7684\u5c42\u5c31\u53ef\u4ee5\u4e86\u3002\u4e4b\u540e\uff0c\u901a\u8fc7\u5404\u4e2a\u5c42\u5185\u90e8\u5b9e\u73b0\u7684\u6b63\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\uff0c\u5c31\u53ef\u4ee5\u6b63\u786e\u8ba1\u7b97\u8fdb\u884c\u8bc6\u522b\u5904\u7406\u6216\u5b66\u4e60\u6240\u9700\u7684\u68af\u5ea6\u3002\n\n\u5230\u76ee\u524d\u4e3a\u6b62\u63a5\u89e6\u7684\u4e24\u79cd\u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\uff1a\n\n1. \u57fa\u4e8e\u6570\u503c\u5fae\u5206\u7684\u65b9\u6cd5\uff1b\n2. \u89e3\u6790\u6027\u7684\u6c42\u89e3\u6570\u5b66\u5f0f\u7684\u65b9\u6cd5\u3002\n\n\u540e\u4e00\u79cd\u65b9\u6cd5\u901a\u8fc7\u4f7f\u7528\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\uff0c\u5373\u4f7f\u5b58\u5728\u5927\u91cf\u7684\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u9ad8\u6548\u7684\u8ba1\u7b97\u68af\u5ea6\u3002\n\n### \u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u68af\u5ea6\u786e\u8ba4\n\n\u6570\u503c\u5fae\u5206\u7684\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u56e0\u6b64\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\u3002\u800c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u5b9e\u73b0\u5f88\u590d\u6742\uff0c\u5bb9\u6613\u51fa\u9519\u3002\u6240\u4ee5\uff0c\u7ecf\u5e38\u4f1a\u6bd4\u8f83\u6570\u503c\u5fae\u5206\u7684\u7ed3\u679c\u548c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u7ed3\u679c\uff0c\u4ee5\u786e\u8ba4\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u5b9e\u73b0\u662f\u5426\u6b63\u786e\u3002\u786e\u8ba4\u6570\u503c\u5fae\u5206\u6c42\u51fa\u7684\u68af\u5ea6\u7ed3\u679c\u548c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u6c42\u51fa\u7684\u7ed3\u679c\u662f\u5426\u4e00\u81f4\u2014\u2014\u4e25\u683c\u5730\u8bb2\uff0c\u4e8c\u8005\u662f\u975e\u5e38\u76f8\u8fd1\u7684\u2014\u2014\u7684\u64cd\u4f5c\u79f0\u4e3a**\u68af\u5ea6\u786e\u8ba4(gradient check)** \u3002\u5176\u5b9e\u73b0\u5982\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u5b9e\u73b0\u6b63\u786e\u7684\u8bdd\uff0c\u53ef\u4ee5\u671f\u5f85\u8fd9\u4e2a\u8bef\u5dee\u662f\u4e00\u4e2a\u63a5\u8fd10\u7684\u5f88\u5c0f\u7684\u503c\uff0c\u4f46\u5982\u679c\u8fd9\u4e2a\u503c\u5f88\u5927\uff0c\u5c31\u8bf4\u660e\u8bef\u5dee\u53cd\u5411\u4f20\u64ad\u6cd5\u7684\u5b9e\u73b0\u5b58\u5728\u9519\u8bef\u4e86\uff1a","a2509fc5":"\u4e0a\u9762\u5b9e\u9a8c\u53ef\u4ee5\u770b\u51fa\uff0c\u5b66\u4e60\u7387\u8fc7\u5927\u7684\u8bdd\uff0c\u4f1a\u53d1\u6563\u6210\u4e00\u4e2a\u5f88\u5927\u7684\u503c\uff1b\u53cd\u8fc7\u6765\uff0c\u5b66\u4e60\u7387\u8fc7\u5c0f\u7684\u8bdd\uff0c\u57fa\u672c\u4e0a\u6ca1\u600e\u4e48\u66f4\u65b0\u5c31\u7ed3\u675f\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bbe\u5b9a\u5408\u9002\u7684\u5b66\u4e60\u7387\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898\u3002","5dd4f4d2":"### Softmax-with-Loss\u5c42\n\n> \u795e\u7ecf\u7f51\u7edc\u4e2d\u8fdb\u884c\u7684\u5904\u7406\u6709**\u63a8\u7406(inference)** \u548c**\u5b66\u4e60**\u4e24\u4e2a\u9636\u6bb5\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u63a8\u7406\u901a\u5e38\u4e0d\u9002\u7528Softmax\u5c42\u3002\u5f53\u795e\u7ecf\u7f51\u7edc\u7684\u63a8\u7406\u53ea\u9700\u8981\u7ed9\u51fa\u4e00\u4e2a\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u6b64\u65f6\u6307\u5bf9\u5f97\u5206\u6700\u5927\u503c\u611f\u5174\u8da3\uff0c\u6240\u4ee5\u4e0d\u9700\u8981Softmax\u5c42\u3002\u4e0d\u8fc7\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u5b66\u4e60\u9636\u6bb5\u5219\u9700\u8981Softmax\u5c42\u3002\n\nsoftmax\u51fd\u6570\u4f1a\u5c06\u8f93\u5165\u503c\u6b63\u89c4\u5316\uff08\u4f8b\u5982\u5c06\u8f93\u51fa\u503c\u7684\u548c\u8c03\u6574\u4e3a1\uff09\u4e4b\u540e\u518d\u8f93\u51fa\u3002\u8003\u8651\u5230Softmax\u5c42\u4e5f\u5305\u542b\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\u7684\u4ea4\u53c9\u71b5\u8bef\u5dee(cross entropy error)\uff0c\u6240\u4ee5\u79f0\u4e3a\u201cSoftmax-with-Loss\u5c42\u201d\u3002\n\nSoftmax\u5c42\u7684\u53cd\u5411\u4f20\u64ad\u5f97\u5230\u4e86$(y_{1}-t_{1},y_{2}-t_{2},y_{3}-t_{3})$\u8fd9\u6837\u201c\u6f02\u4eae\u201d\u7684\u7ed3\u679c\u3002\u7531\u4e8e$(y_{1},y_{2},y_{3})$\u662fSoftmax\u5c42\u7684\u8f93\u51fa\uff0c$(t_{1},t_{2},t_{3})$\u662f\u76d1\u7763\u6570\u636e\uff0c\u6240\u4ee5$(y_{1}-t_{1},y_{2}-t_{2},y_{3}-t_{3})$\u662fSoftmax\u5c42\u7684\u8f93\u51fa\u548c\u76d1\u7763\u6807\u7b7e\u7684\u5dee\u5206\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u53cd\u5411\u4f20\u64ad\u4f1a\u628a\u8fd9\u4e2a\u5dee\u5206\u8868\u793a\u7684\u8bef\u5dee\u4f20\u9012\u7ed9\u524d\u9762\u7684\u5c42\uff0c\u8fd9\u662f\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u4e2d\u7684\u91cd\u8981\u6027\u8d28\u3002\n\n\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u7684\u76ee\u7684\u5c31\u662f\u901a\u8fc7\u8c03\u6574\u6743\u91cd\u53c2\u6570\uff0c\u4f7f\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\uff08Softmax\u7684\u8f93\u51fa\uff09\u63a5\u8fd1\u76d1\u7763\u6807\u7b7e\u3002\u56e0\u6b64\uff0c\u5fc5\u987b\u5c06\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\u4e0e\u76d1\u7763\u6807\u7b7e\u7684\u8bef\u5dee\u9ad8\u6548\u7684 \u4f20\u9012\u7ed9\u524d\u9762\u7684\u5c42\u3002\u521a\u521a\u7684$(y_{1}-t_{1},y_{2}-t_{2},y_{3}-t_{3})$\u6b63\u662fSoftmax\u5c42\u7684\u8f93\u51fa\u4e0e\u76d1\u7763\u6807\u7b7e\u7684\u5dee\uff0c\u76f4\u622a\u4e86\u5f53\u7684\u8868\u793a\u4e86\u5f53\u524d\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u51fa\u4e0e\u76d1\u7763\u6807\u7b7e\u7684\u8bef\u5dee\u3002\n\n\u53cd\u5411\u4f20\u64ad\u5f97\u5230$(y_{1}-t_{1},y_{2}-t_{2},y_{3}-t_{3})$\u8fd9\u6837\u6f02\u4eae\u7684\u7ed3\u679c\u5e76\u4e0d\u662f\u5076\u7136\u7684\uff0c\u800c\u662f\u7279\u610f\u8bbe\u8ba1\u4e86\u4ea4\u53c9\u71b5\u8bef\u5dee\u51fd\u6570\u3002\u56de\u5f52\u95ee\u9898\u4e2d\u8f93\u51fa\u5c42\u4f7f\u7528\u201c\u6052\u7b49\u51fd\u6570\u201d\uff0c\u635f\u5931\u51fd\u6570\u4f7f\u7528\u201c\u5e73\u65b9\u548c\u8bef\u5dee\u201d\uff0c\u4e5f\u662f\u51fa\u4e8e\u540c\u6837\u7684\u7406\u7531\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u201c\u5e73\u65b9\u548c\u8bef\u5dee\u201d\u4f5c\u4e3a\u201c\u6052\u7b49\u51fd\u6570\u201d\u7684\u635f\u5931\u51fd\u6570\uff0c\u53cd\u5411\u4f20\u64ad\u624d\u80fd\u5f97\u5230$(y_{1}-t_{1},y_{2}-t_{2},y_{3}-t_{3})$\u8fd9\u6837\u201c\u6f02\u4eae\u201d\u7684\u7ed3\u679c\u3002\n\n\u8fd9\u91cc\u8003\u8651\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u76d1\u7763\u6807\u7b7e\u662f\u662f$(0,1,0)$\uff0cSoftmax\u5c42\u7684\u8f93\u51fa\u662f$(0.3,0.2,0.5)$\u7684\u60c5\u5f62\u3002\u56e0\u4e3a\u6b63\u786e\u89e3\u6807\u7b7e\u5904\u7684\u6982\u7387\u662f0.2\uff0820%\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u795e\u7ecf\u7f51\u7edc\u672a\u80fd\u8fdb\u884c\u6b63\u786e\u7684\u8bc6\u522b\u3002\u6b64\u65f6\uff0cSoftmax\u5c42\u7684\u53cd\u5411\u4f20\u64ad\u4f20\u9012\u7684\u662f$(0.3,-0.8,0.5)$\u8fd9\u6837\u7684\u4e00\u4e2a\u5927\u7684\u8bef\u5dee\u3002\u56e0\u4e3a\u8fd9\u4e2a\u5927\u7684\u8bef\u5dee\u4f1a\u5411\u524d\u9762\u7684\u5c42\u4f20\u64ad\uff0c\u6240\u4ee5Softmax\u5c42\u524d\u9762\u7684\u5c42\u4f1a\u4ece\u8fd9\u4e2a\u5927\u7684\u8bef\u5dee\u4e2d\u5b66\u4e60\u5230\u201c\u5927\u201d\u7684\u5185\u5bb9\u3002\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u76d1\u7763\u6807\u7b7e\u662f\u662f$(0,1,0)$\uff0cSoftmax\u5c42\u7684\u8f93\u51fa\u662f$(0.01,0.99,0)$\u7684\u60c5\u5f62\uff08\u8fd9\u4e2a\u795e\u7ecf\u7f51\u8bc6\u522b\u7684\u76f8\u5f53\u51c6\u786e\uff09\u3002\u6b64\u65f6Softmax\u5c42\u7684\u53cd\u5411\u4f20\u64ad\u4f20\u9012\u7684\u662f$(0.01,-0.01,0)$\u8fd9\u6837\u4e00\u4e2a\u5c0f\u8bef\u5dee\u3002\u8fd9\u4e2a\u5c0f\u7684\u8bef\u5dee\u4e5f\u4f1a\u5411\u524d\u9762\u7684\u5c42\u4f20\u64ad\uff0c\u56e0\u4e3a\u8bef\u5dee\u5f88\u5c0f\uff0c\u6240\u4ee5Softmax\u5c42\u524d\u9762\u7684\u5c42\u5b66\u4e60\u5230\u7684\u5185\u5bb9\u4e5f\u5f88\u201c\u5c0f\u201d\u3002\n\nSoftmax-with-Loss\u5c42\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\uff0c\u6ce8\u610f\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u5c06\u8981\u4f20\u64ad\u7684\u503c\u9664\u4ee5\u6279(batch_size)\u7684\u5927\u5c0f\u540e\uff0c\u4f20\u9012\u7ed9\u524d\u9762\u7684\u5c42\u7684\u662f\u5355\u4e2a\u6570\u636e\u7684\u8bef\u5dee\u3002"}}