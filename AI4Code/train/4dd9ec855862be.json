{"cell_type":{"46dae506":"code","c292544d":"code","9a6710ee":"code","233c7c2d":"code","151f102d":"code","d24c9c73":"code","8e121c90":"code","f882f32a":"code","5f4b882a":"code","a14fb95b":"code","c44a0ac2":"code","24ddda49":"code","b935f56a":"code","98935f3c":"code","b31d344a":"code","33461bc4":"code","79869bbe":"code","65ee0ef7":"code","4aa0a2b4":"code","04f196d0":"code","d541c052":"code","5360094b":"code","9497e8bc":"code","28cdafa0":"code","81806363":"code","071fb11a":"code","c0ecd459":"code","8a197877":"code","f7216a8b":"code","5306f12d":"code","fff2bbdc":"code","92b75bb4":"code","81393659":"code","415f8586":"code","490dddb8":"code","529dec66":"code","43a0b942":"code","a783b4ef":"code","995312ff":"code","4e401a8f":"code","e833f5f3":"code","81bea281":"code","0c6d3cfa":"code","df4d2d01":"code","6ebf229e":"code","95408611":"code","213cc74e":"code","565cf5b8":"code","8dc37229":"code","c022a923":"code","05e1978a":"markdown","720d8a99":"markdown","cfcce49a":"markdown","4f507255":"markdown","c6170360":"markdown","ba180e82":"markdown","85506d37":"markdown","95386211":"markdown","0c6ef4ed":"markdown","e33d77d7":"markdown","4c69824a":"markdown","4e080ac5":"markdown","25e2ceed":"markdown","b5478edd":"markdown","7e6488c2":"markdown","b6fd9662":"markdown","2c6f4cda":"markdown","6b4fe217":"markdown","8a5e9ad7":"markdown"},"source":{"46dae506":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re # use for regex\n\n# Input data files are available in the \"..\/input\/\" directory.","c292544d":"# import dataset train and test\ninput_path = \"..\/input\/titanic\/\"\n\ndf_train = pd.read_csv(input_path + 'train.csv')\ndf_test = pd.read_csv(input_path + 'test.csv')\nsub = pd.read_csv(input_path + \"gender_submission.csv\")","9a6710ee":"# Check start line dataset\ndf_train.head()","233c7c2d":"# Check end line dataset\ndf_train.tail()","151f102d":"# Verification of data typing for df_train\ndf_train.info()","d24c9c73":"# # Verification of data typing for df_test\ndf_test.info()","8e121c90":"# Verification of data completeness\ndf_train.isna().sum()","f882f32a":"# check if there are any valuations that are not zero\ndf_test.isna().sum()","5f4b882a":"# Printing df_train basic descriptive statistics\ndf_train.describe()","a14fb95b":"# # Printing df_test basic descriptive statistics\ndf_test.describe()","c44a0ac2":"# Let's calculate the average age with df_train\naverage_age = df_train['Age'].loc[~df_train['Age'].isna()].mean()\naverage_age","24ddda49":"# Replace Age None Attribuate Values by Average age\ndf_train['Age'] = df_train['Age'].fillna(average_age)\ndf_test['Age'] = df_test['Age'].fillna(average_age)\ndf_train","b935f56a":"# count peaple boarding\ndf_train['Embarked'].value_counts()","98935f3c":"df_train['Embarked'].fillna('S', inplace = True)\ndf_test['Embarked'].fillna('S', inplace = True)","b31d344a":"# create columns who said who in (0) or not in cabin (1)\ndf_train['Cabin'] = np.where(df_train['Cabin'].isnull() , 0, 1)\ndf_test['Cabin'] = np.where(df_test['Cabin'].isnull() , 0, 1)\ndf_train","33461bc4":"# # check if there are any valuations that are not zero on test dataframe\ndf_test.isna().sum()","79869bbe":"df_test.loc[df_test['Fare'].isnull()]","65ee0ef7":"# calculate the Fare average on test dataframe\naverage_fare = df_test['Fare'].loc[~df_test['Fare'].isna()].mean()\naverage_fare","4aa0a2b4":"# give him the Fare average\ndf_test['Fare'] = df_train['Fare'].fillna(average_fare)","04f196d0":"df_train['Embarked'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndf_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ndf_train['Sex'] = df_train['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\ndf_test['Sex'] = df_test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n\ndf_train['Sex'] = df_train['Sex'].astype('category').cat.codes\ndf_train['Embarked'] = df_train['Embarked'].astype('category').cat.codes\n\ndf_train","d541c052":"sns.countplot(x=\"Sex\", data=df_train)","5360094b":"sns.catplot(x=\"Sex\", y=\"Survived\", data=df_train, kind=\"bar\")","9497e8bc":"sns.catplot(x=\"Pclass\", y=\"Survived\", data=df_train, kind=\"bar\")","28cdafa0":"sns.countplot(x=\"Pclass\", data=df_train)","81806363":"sns.catplot(x=\"SibSp\", y=\"Survived\", data=df_train, kind=\"bar\")","071fb11a":"sns.countplot(x=\"SibSp\", data=df_train)","c0ecd459":"sns.catplot(x=\"Parch\", y=\"Survived\", data=df_train, kind=\"bar\")","8a197877":"sns.countplot(x=\"Parch\", data=df_train)","f7216a8b":"sns.catplot(x=\"Embarked\", y=\"Survived\", data=df_train, kind=\"bar\")","5306f12d":"sns.countplot(x=\"Embarked\", data=df_train)","fff2bbdc":"sns.catplot(x=\"Cabin\", y=\"Survived\", data=df_train, kind=\"bar\")","92b75bb4":"sns.boxplot(x='Survived', y=\"Fare\", data=df_train.loc[df_train['Fare'] <500]);","81393659":"df_train['FamilyCount'] = df_train['SibSp'] + df_train['Parch']\ndf_test['FamilyCount'] = df_test['SibSp'] + df_test['Parch']","415f8586":"df_train","490dddb8":"def ageGroup(df):\n    if df['Age'] <= 0 :\n        group='Unknown'\n    elif df['Age'] <= 14 :\n        group='Child'\n    elif df['Age'] <=24 :\n        group='Teenager'\n    elif df['Age'] <=64 :\n        group='Adult'\n    else :\n        group='Senior'\n    return group\n\ndf_train['Age'] = df_train.apply(ageGroup, axis=1)\ndf_test['Age'] = df_test.apply(ageGroup, axis=1)\n\ndf_train['Age'] = df_train['Age'].map( {'Unknown': 0, 'Child': 1, 'Teenager': 2, 'Adult': 3,'Senior': 4 } ).astype(int)\ndf_test['Age'] = df_test['Age'].map( {'Unknown': 0, 'Child': 1, 'Teenager': 2, 'Adult': 3,'Senior': 4 } ).astype(int)\ndf_train","529dec66":"sns.catplot(x=\"Age\", y=\"Survived\", data=df_train, kind=\"bar\")","43a0b942":"def civility(df):\n    if re.search('Mme.',df['Name']) != None:\n        civility = 'Mrs'\n    elif re.search('Ms.',df['Name']) != None:\n        civility = 'Mrs'\n    elif re.search('Major.',df['Name']) != None:\n        civility = 'Major'\n    elif re.search('Capt.',df['Name']) != None:\n        civility = 'Captain'\n    elif re.search('Jonkheer.',df['Name']) != None:\n        civility = 'Jonkheer'\n    elif re.search('Mlle.',df['Name']) != None:\n        civility = 'Miss'\n    elif re.search('the Countess.',df['Name']) != None:\n        civility = 'the Countess'\n    elif re.search('Mlle.',df['Name']) != None:\n        civility = 'colonel'\n    elif re.search('Col.',df['Name']) != None:\n        civility = 'Colonel'\n    elif re.search('Don.',df['Name']) != None:\n        civility = 'Don'\n    elif re.search('Dr.',df['Name']) != None:\n        civility = 'Doctor'\n    elif re.search('Master.',df['Name']) != None:\n        civility = 'Master'\n    elif re.search('Mrs.',df['Name']) != None:\n        civility = 'Mrs'\n    elif re.search('Miss.',df['Name']) != None:\n        civility = 'Miss'\n    elif re.search('Rev.',df['Name']) != None:\n        civility = 'Reverand'\n    elif re.search('Mr.',df['Name']) != None:\n        civility = 'Mr'\n    else :\n        civility = 'Unknown'\n    return civility\n\ndf_train['Civility'] = df_train.apply(civility, axis=1)\ndf_test['Civility'] = df_test.apply(civility, axis=1)\n\ndf_train['Civility'] = df_train['Civility'].map( {'Unknown': 0, 'Mr': 1, 'Mrs': 2, 'Miss': 3,'Reverand': 4, 'Master': 5, 'Doctor': 6, 'Don': 7, 'Colonel': 8, 'the Countess': 9, 'Jonkheer': 10, 'Captain': 11, 'Major': 12 } ).astype(int)\ndf_test['Civility'] = df_test['Civility'].map( {'Unknown': 0, 'Mr': 1, 'Mrs': 2, 'Miss': 3,'Reverand': 4, 'Master': 5, 'Doctor': 6, 'Don': 7, 'Colonel': 8, 'the Countess': 9, 'Jonkheer': 10, 'Captain': 11, 'Major': 12 } ).astype(int)\n\ndf_train\n","a783b4ef":"# For find the rest of civility to map\ndf_train.query(\"Civility == '0'\")","995312ff":"sns.catplot(x=\"Civility\", y=\"Survived\", data=df_train, kind=\"bar\")","4e401a8f":"df_train","e833f5f3":"def fareSection(df):\n    df['Fare']\n    if df['Fare'] < 10:\n        fare = 'less expensive'\n    elif df['Fare'] < 30:\n        fare = 'less expensive than 30'\n    elif df['Fare'] < 70:\n        fare = 'less expensive than 70'\n    elif df['Fare'] < 100:\n        fare = 'less expensive than 100'\n    else : \n        fare = 'expensive price'\n    return fare\n\ndf_train['Fare'] = df_train.apply(fareSection, axis=1)\ndf_test['Fare'] = df_test.apply(fareSection, axis=1)\n\ndf_train['Fare'] = df_train['Fare'].map( { 'less expensive': 0, 'less expensive than 30': 1,'less expensive than 70': 2, 'less expensive than 100': 3, 'expensive price': 4  } ).astype(int)\ndf_test['Fare'] = df_test['Fare'].map( { 'less expensive': 0, 'less expensive than 30': 1,'less expensive than 70': 2, 'less expensive than 100': 3, 'expensive price': 4   } ).astype(int)\n\ndf_train","81bea281":"my_cols = ['Age', 'Sex', 'Pclass', 'FamilyCount', 'Fare', 'SibSp', 'Parch', 'Cabin', 'Civility']","0c6d3cfa":"y_train = df_train['Survived']","df4d2d01":"X_train = df_train.loc[:,my_cols]","6ebf229e":"X_test = df_test.loc[:, my_cols]","95408611":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nrf = RandomForestClassifier(n_estimators=100)","213cc74e":"def train_model(model, X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    model.fit(X_train, y_train)\n    train_acc = accuracy_score(y_train, model.predict(X_train))\n    test_acc = accuracy_score(y_test, model.predict(X_test))\n    return {\n        'train accuracy': train_acc,\n        'test accuracy': test_acc\n    }\n\nprint(train_model(rf, X_train, y_train))","565cf5b8":"rf.fit(X_train, y_train)\ntrain_acc = accuracy_score(y_train, rf.predict(X_train))\nprint(train_acc)","8dc37229":"rf.predict(X_test)","c022a923":"# cell to store the result of the model by calling its rf model and data set\n# generate a dataframe with PassengerId and survived\n\nsubmission = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'survived': rf.predict(X_test)})\nsubmission.to_csv('submission.csv', index=False)\n","05e1978a":"sub.columns","720d8a99":"**Improve the model \/ Cleaning**","cfcce49a":"People who have a cabin have better chance to have escaped the disaster","4f507255":"**Test and simulation**","c6170360":"**Dataset import**","ba180e82":"A majority of the people boarded in the s port, so we will consider that the last embarked in the s port ","85506d37":"* There are more people to lower class but people to higher class have a better chance of survival","95386211":"There are more people  who boarded at port S but people who boarded at port C are the least likely to have escaped the disaster","0c6ef4ed":"**Creation of the first model**","e33d77d7":"there more people who don't have family relations but people who have between zero and three family relations are more likely to survive","4c69824a":"Those who have survived most are the children","4e080ac5":"**Imputation of missing values**","25e2ceed":"Analyse by Graphs","b5478edd":"There are more people who have no spouse, sister or brother but people who have between one or two (sisters, brothers, spouse) are more likely to survive","7e6488c2":"The most people who survive are the Countess","b6fd9662":"Calculation of the total family composition of survivors","2c6f4cda":"More people are survived with a expensive ticket","6b4fe217":"There are more men but more women survived to the accident","8a5e9ad7":"We map the categorical variables"}}