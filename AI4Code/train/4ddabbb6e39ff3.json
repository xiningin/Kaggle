{"cell_type":{"464a7671":"code","d1a33d7e":"code","0157e0e8":"code","7f864d49":"code","aca86fdf":"code","ad3b0ae5":"code","02917068":"code","bd00f87d":"code","6ff92337":"code","7c39d19c":"code","fae4d1f0":"code","0fbb2a50":"code","fccda705":"code","f5724aaf":"code","290d026a":"code","24168baf":"code","114cff99":"code","62d56b7c":"code","341cbac0":"markdown","a9d0752e":"markdown","b21e0b94":"markdown","69c3f9b6":"markdown","0393954c":"markdown","50d39c74":"markdown","46fe482f":"markdown","f77f685c":"markdown","78086bb3":"markdown","e986673e":"markdown"},"source":{"464a7671":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n","d1a33d7e":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\nfrom IPython.core.display import HTML # permet d'afficher du code html dans jupyter","0157e0e8":"from sklearn.model_selection import learning_curve\ndef plot_learning_curve(est, X_train, y_train) :\n    train_sizes, train_scores, test_scores = learning_curve(estimator=est, X=X_train, y=y_train, train_sizes=np.linspace(0.1, 1.0, 10),\n                                                        cv=5,\n                                                        n_jobs=-1)\n    train_mean = np.mean(train_scores, axis=1)\n    train_std = np.std(train_scores, axis=1)\n    test_mean = np.mean(test_scores, axis=1)\n    test_std = np.std(test_scores, axis=1)\n    plt.figure(figsize=(8,10))\n    plt.plot(train_sizes, train_mean, color='blue', marker='o', markersize=5, label='training accuracy')\n    plt.fill_between(train_sizes, train_mean + train_std, train_mean - train_std, alpha=0.15, color='blue')\n    plt.plot(train_sizes, test_mean,color='green', linestyle='--',marker='s', markersize=5,label='validation accuracy')\n    plt.fill_between(train_sizes,test_mean + test_std,test_mean - test_std,alpha=0.15, color='green')\n    plt.grid(b='on')\n    plt.xlabel('Number of training samples')\n    plt.ylabel('Accuracy')\n    plt.legend(loc='lower right')\n    plt.ylim([0.6, 1.0])\n    plt.show()","7f864d49":"def plot_roc_curve(est,X_test,y_test) :\n    probas = est.predict_proba(X_test)\n    false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test,probas[:, 1])\n    roc_auc = auc(false_positive_rate, true_positive_rate)\n    plt.figure(figsize=(8,8))\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--')        # plus mauvaise courbe\n    plt.plot([0,0,1],[0,1,1],'g:')     # meilleure courbe\n    plt.xlim([-0.05,1.2])\n    plt.ylim([-0.05,1.2])\n    plt.ylabel('Taux de vrais positifs')\n    plt.xlabel('Taux de faux positifs')\n    plt.show\n    ","aca86fdf":"df = pd.read_csv('..\/input\/fashion-mnist\/fashion-mnist_train.csv')","ad3b0ae5":"df.head()","02917068":"labels = [\"T-shirt\/top\",\"Trouser\",\"Pullover\",\"Dress\",\"Coat\",\"Sandal\",\"Shirt\",\n          \"Sneaker\",\"Bag\",\"Ankle boot\"]","bd00f87d":"print(labels[df.label[0]])","6ff92337":"y = df['label']\nX = df.drop(['label'], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nX1 = np.array(X)\n","7c39d19c":"print(X1[0])","fae4d1f0":"image = X1[0].reshape(28,28)\nprint(image)\n","0fbb2a50":"plt.imshow(image)","fccda705":"plt.imshow(image, cmap=\"gray_r\")\nplt.axis('off')\nplt.title(y[0])","f5724aaf":"n_samples = len(df.index)\nimages = X1.reshape(n_samples,28,28)\n\n","290d026a":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(y[i])","24168baf":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","114cff99":"plot_learning_curve(rf, X, y)\n\n","62d56b7c":"print(classification_report(y_test, y_rf))","341cbac0":"<img src=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true\">","a9d0752e":"Le dataset a \u00e9t\u00e9 constitu\u00e9 par Zalando :  \nhttps:\/\/github.com\/zalandoresearch\/fashion-mnist  \n  \nOn a un ensemble d'apprentissage de 60 000 images 28x28 pixels en niveaux de gris, et 10 classes de v\u00eatements : jupes, pantalons, baskets, ...","b21e0b94":"Fonction pour tracer les courbes d'apprentissage sur l'ensemble d'apprentissage et l'ensemble de validation :","69c3f9b6":"# Exercice : Zalando Fashion MNIST","0393954c":"Fonction pour tracer la courbe ROC :","50d39c74":"**Appliquer des m\u00e9thodes de machine learning \u00e0 la reconnaissance des objets (for\u00eats al\u00e9atoires, xgboost, ...)**  ","46fe482f":"La premi\u00e8re image du dataset est un pull :","f77f685c":"**Afficher les 50 premiers \u00e9l\u00e9ments du dataset avec leur label**  \n","78086bb3":"## Librairies et fonctions utiles","e986673e":"## Zalando Fashion MNIST"}}