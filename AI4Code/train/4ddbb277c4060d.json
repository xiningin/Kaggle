{"cell_type":{"ccf888b0":"code","c078aa79":"code","71af5c5e":"code","76564b9a":"code","3a238bbe":"code","de918f90":"code","4ce523cb":"code","42bb5e0d":"code","9b4918fa":"code","78703831":"code","49c5a491":"code","9ccf9c44":"code","0d5a082f":"code","4c8f508e":"code","4df858a9":"code","ab74ee71":"code","bfdeff32":"code","e8edbf5c":"code","918ffa72":"code","80bc2008":"code","20be6664":"code","054a550e":"code","6d6793fb":"code","d7da6835":"code","89e45123":"code","f3e59759":"code","4869b814":"code","400771ce":"code","09b50e04":"code","46a19c9d":"code","b3bbac39":"code","7b713c12":"code","027960a6":"code","b166314c":"code","7a1e02a3":"code","f8b92246":"code","be856541":"code","51c0e1bb":"code","2c7f7047":"code","fde1fa8e":"code","2dc46658":"code","6895ef61":"code","dabf531f":"code","45c8a6d7":"code","47a9867f":"code","95adfad3":"code","87463982":"code","0894a237":"code","386f68eb":"code","574b10a8":"code","f659d4db":"code","ff367c76":"code","14e95f49":"code","ef6f3eea":"code","4bbbf8f8":"code","6fdf1f3b":"code","3827d1ca":"code","460c1539":"code","46621a84":"code","cb3a2058":"code","bc6abab6":"code","76886fa6":"code","1256c4b1":"code","84617daa":"code","d83d5235":"code","cb80f8c0":"code","ab9736a0":"code","f5942a0d":"code","7402cc8a":"code","c996ba37":"code","0308b829":"code","3dfa42c5":"code","dbc92698":"code","c2db512e":"code","8bfa0f36":"code","5ed29f00":"code","fdcb4afc":"code","170a7351":"code","0bc2a5e2":"code","8f1662ee":"code","6eb3f6ef":"code","eab87291":"code","af316e2b":"code","5e04b886":"code","478c5155":"code","b3218e8c":"code","a59e81f2":"code","6ba97b88":"code","fe304e35":"code","8dd358af":"code","1de190ed":"code","e780ffda":"code","716576fa":"code","82ea31db":"code","d17b51d0":"code","54ce5618":"code","8ce53eb9":"code","920861dd":"code","8af7dba1":"code","2f80d540":"code","9b149fa3":"code","7c73a1ee":"code","8b2f6660":"code","57507bee":"code","8f2b8f82":"code","37d2399b":"code","50a03ffc":"code","b887a4d8":"code","e0ab6f04":"code","bfa1c529":"code","08b87423":"code","cf900f8a":"code","1c1dc896":"code","94aa0b5f":"code","514bfeed":"code","877d5540":"code","a426f1f4":"code","2fa60a35":"code","436e9f87":"code","beb17604":"code","6cfa2637":"code","2b01639c":"code","14e1d0dc":"code","57cf7eeb":"code","01d4b621":"code","57066644":"code","376a3e09":"code","6627a630":"code","60d2e12f":"code","6a1e50ea":"code","8b708e12":"code","7a6e5e61":"code","7bb11afc":"code","cc997bce":"code","87250c0b":"code","467cc2f2":"code","012ccf39":"code","0d1fb120":"code","50f80d57":"code","cab3c6fa":"code","e0227fc8":"code","8c238fab":"code","80710838":"code","40e108c8":"code","7daf5223":"code","5dd21b2b":"code","c0cf54af":"code","adf8c306":"code","296af8a6":"code","7b95098b":"code","fe5279a4":"code","b849ec1e":"code","fee37cb6":"code","4de91948":"code","97133c4e":"code","a7685a03":"code","0ec24f23":"code","d38a357f":"code","428b453a":"code","ecf0183f":"code","3b62d9ad":"code","2919490b":"code","e852f3a7":"code","f9c4de24":"code","f2c57502":"code","f244f191":"code","651109dd":"code","48354619":"code","25780593":"code","5c37c684":"code","2e4511fd":"code","6264527f":"code","9a76f507":"code","60509f45":"code","5fb2ab6f":"code","22571e54":"code","1fde70b6":"code","c04399bc":"code","50ba6a02":"code","db57d211":"code","7efd750f":"code","d7d67033":"code","557beddf":"code","92319154":"code","bfb5ee1a":"code","9594c66e":"code","098189c8":"code","5057f6e4":"code","2b3f80b1":"code","96e317b1":"code","3adf8dbf":"code","d13d7460":"code","19675c00":"code","817b2152":"code","b57d89e5":"code","5238c86e":"code","fd4ca6ca":"code","0ad34d94":"code","6a19226f":"code","9e5e2b38":"code","c123736a":"code","7dc02818":"code","c7a8a795":"code","2a3553ff":"code","8101d427":"code","ee72e9ef":"code","84e7a92a":"code","2f9ed390":"code","9dff875b":"code","db65846f":"code","2d3f29a4":"code","5b84da12":"code","c65e768f":"code","9e9deb57":"code","1ff856da":"code","55520f30":"code","a98d09f5":"code","946ecae8":"code","6b63ebef":"code","b02e7ad6":"code","5d475a32":"code","d801b8c4":"code","314ae911":"code","ebdee8b6":"code","8773bf0f":"code","bae052cc":"code","8404464d":"code","5df46cdb":"code","22b48fc5":"code","50653e34":"code","598ec463":"code","723c5159":"code","0e7fef55":"code","9b12ad0f":"code","7de8ce12":"code","be0eab77":"code","fd0a379a":"code","b48d56ae":"code","fefd4a54":"code","73e72ac9":"code","7d6f2d82":"code","3454229d":"code","c468308e":"code","3c91b7c0":"code","e0ef3daa":"code","bbef2e01":"code","3fe1148e":"code","b8a0f04d":"code","e5a38887":"code","401a6f90":"code","fee622f2":"code","b057b438":"code","88598560":"code","cb2bd58d":"code","e453cc95":"code","23aed905":"code","586c9c75":"code","846a73e6":"code","f89889d8":"code","024afd42":"code","41b17a00":"code","8157fcaf":"code","90e206f4":"code","54da174b":"code","96bad337":"code","905919e3":"code","6dcdf7b4":"code","405c0665":"code","b9c64a24":"code","c0919e3a":"code","c8c00b9a":"code","8ac6893d":"code","29662576":"code","82caabc7":"code","6d025124":"code","bd0e225d":"code","93b8d946":"code","ecf3bdaa":"code","76f74ece":"code","68b65104":"code","feccf14b":"code","27ec2e0d":"code","682ee3b4":"code","50b2fe25":"code","f91c54f1":"code","1084a5f6":"code","f1886db2":"code","d410bf0e":"code","45277bb0":"code","994c7737":"code","2b8fba34":"code","3780c2f2":"code","32cda4c9":"code","1cd13ff7":"code","41714268":"code","e359405b":"code","e334598a":"code","d056f237":"code","aeaaef75":"code","f1a62526":"code","12d569fb":"code","7574d831":"code","4d64603a":"code","be134341":"code","3de51ed4":"code","c3ef2b67":"code","ce8704fc":"code","6b2e8cb8":"code","2de59628":"code","7615d3f7":"code","1d8d7d3c":"code","cc8c58ac":"code","f1532f8b":"code","f1d35f4f":"code","72c11993":"code","621ba142":"code","1122d7b5":"code","e82b4eb9":"code","99e3c182":"code","eb3d9a64":"code","666ea00f":"code","fd78722d":"code","2b1da874":"code","3b7037df":"code","eb709514":"code","25a8bb64":"code","7cc5e10f":"code","6a13a37a":"code","5afaba62":"code","97308b18":"code","ef8e6fba":"code","2f8c8a20":"code","d823f83f":"code","a08f45a7":"code","bbc63d42":"code","eb523a2b":"code","9eca4570":"code","13bc15da":"code","3f7ba21e":"code","2441548a":"code","18185c75":"code","f21ebf38":"code","e058f0ed":"code","d43be35b":"code","b4511e1c":"code","a9ea4cc2":"code","cb8b39fe":"code","322c660a":"code","3d4f31ab":"code","0bf9f823":"code","4e030df3":"code","0feddf05":"code","9d73717b":"code","c19ea901":"code","6b56c4bb":"code","5ebb6283":"code","ccb5ef63":"code","6db5186f":"code","9e693b8d":"code","c45e6b2f":"code","e02e87f7":"code","d08a979f":"code","311cd27e":"code","7d65470c":"code","e618051c":"code","0c2ad1a0":"code","9a49d9c4":"code","cf38f786":"code","15077a22":"code","ac63e6b2":"code","74f95b4a":"code","50cc54e1":"code","ee359e47":"code","a875a400":"code","2160fd6b":"code","91ffa052":"code","531a38d2":"code","d671bc85":"code","3fd8b973":"code","fc74ba4b":"code","de699130":"code","1f766cb1":"code","5e1b21f3":"code","8b4aabc8":"code","36449128":"code","2963fe3c":"code","3a5459fb":"code","cbcc6346":"code","5745fdca":"code","f6f81529":"code","d246964a":"code","e6f0444c":"markdown","d6536bb9":"markdown","e057ce45":"markdown","8645a56c":"markdown","fd4ae7aa":"markdown","4d582b86":"markdown","0deb0b19":"markdown","6c580659":"markdown","5bebc596":"markdown","428155e7":"markdown","3fdd0301":"markdown","76e59699":"markdown","29133607":"markdown","38039dbc":"markdown","3218fd1d":"markdown","91e0c19e":"markdown","54596b23":"markdown","6251c5f3":"markdown","af16ab61":"markdown","165bbf13":"markdown","812b91ff":"markdown","82fac9bf":"markdown","65eb90f6":"markdown","08609b10":"markdown","3a176cf2":"markdown","5d83038d":"markdown","019629fa":"markdown","ba8846b1":"markdown","f2b7645b":"markdown","daf7e5b4":"markdown","fb71ad3d":"markdown","b5a314b5":"markdown","19d13660":"markdown","430b6b3d":"markdown","74208048":"markdown","cb601c9a":"markdown","95f4c943":"markdown","64f52f9c":"markdown","01658f78":"markdown","37f375cf":"markdown","f79961d7":"markdown","29f74be7":"markdown","3c242c89":"markdown","8e1a521c":"markdown","df2a7c04":"markdown","a6f677d8":"markdown","4d1bc4b0":"markdown","0a411989":"markdown","0495a940":"markdown","28e510fb":"markdown","534e5bed":"markdown","ba85b92d":"markdown","497adeec":"markdown","aa2eb4bc":"markdown","ebd78685":"markdown","16de4efe":"markdown","184612f6":"markdown","c91a58cb":"markdown","e177dee6":"markdown","69ce5b61":"markdown","6b461ce8":"markdown","5176d230":"markdown","2df7f452":"markdown","086fde2f":"markdown","f641acf8":"markdown","376000a7":"markdown","08f2cde4":"markdown","08713670":"markdown","f5c05c74":"markdown","094c7856":"markdown","73200b58":"markdown","2f42b5d1":"markdown","422214e7":"markdown","cd3d768a":"markdown","921680ed":"markdown","ba3f063a":"markdown","709537d1":"markdown","12367476":"markdown","f5ff68c1":"markdown","df7a0f19":"markdown","6723d9d9":"markdown","34ff3540":"markdown","846eb32b":"markdown","09777f97":"markdown","a3df74a5":"markdown","ba9783b1":"markdown","af3c1041":"markdown","80094abd":"markdown","c48825a3":"markdown","be407b55":"markdown","7fb6868b":"markdown","77132bb0":"markdown","523d1975":"markdown","8566b0e6":"markdown","be85084e":"markdown","e7df5b7e":"markdown","bf18765f":"markdown","2f4a71b4":"markdown","b3fec4b9":"markdown","0fb9ea7e":"markdown","fec27a36":"markdown","e06991d8":"markdown","b5add554":"markdown","0a39fe07":"markdown","f1672b9c":"markdown","abd3ac4f":"markdown","c56d9a23":"markdown","c90b40ab":"markdown","c21b1d19":"markdown","136240fb":"markdown","b3163d37":"markdown","deb69729":"markdown","2d36f5fb":"markdown","9434a2ce":"markdown","ee1dbcb1":"markdown","473e58c4":"markdown","1cd4151f":"markdown","cec5eb13":"markdown","7c5f03cd":"markdown","e3fd413b":"markdown","0f636ff4":"markdown","6345abef":"markdown","7af4ee52":"markdown","d61dee64":"markdown","d2528f7a":"markdown","d707f52a":"markdown","4aabede8":"markdown","a64c3ee2":"markdown","b71fb6c3":"markdown","d35cf55b":"markdown","249eb38c":"markdown","62e7f27e":"markdown","e8e78911":"markdown","d8d21128":"markdown","0811ce85":"markdown","de325ce9":"markdown","cf07f4ad":"markdown","c96c59b2":"markdown","565a0e97":"markdown","a5d61113":"markdown","33c44e4c":"markdown","002d44c7":"markdown","04cfdde3":"markdown","b679cd46":"markdown","4ad48a05":"markdown","5ef69cd5":"markdown","2a8789c4":"markdown","d73f1032":"markdown","e683b16e":"markdown","20441f0c":"markdown","859acfaa":"markdown","f6e61436":"markdown","31447d60":"markdown","4c73cdc0":"markdown","7b1e8e05":"markdown","5ba92d20":"markdown","0bbe585c":"markdown","7e342598":"markdown","ee4a6036":"markdown","c4a00017":"markdown","6276c9b5":"markdown","0bbf4532":"markdown","42196a0e":"markdown","268ac47c":"markdown","883ca40f":"markdown","8624043d":"markdown","dac0432e":"markdown","11b0e771":"markdown","618d6a84":"markdown","a0d00c83":"markdown","2b9432f2":"markdown","4e0f40f9":"markdown","4751bb94":"markdown","cd90d605":"markdown","40058682":"markdown","c0ab8324":"markdown","dbff25b2":"markdown","abb8ab5f":"markdown","c43ef1be":"markdown","17e98172":"markdown","589468e6":"markdown","80007404":"markdown","06bf386a":"markdown","7e274dc7":"markdown","64a2f879":"markdown","69e1f1f7":"markdown","b10afb3d":"markdown","d1080017":"markdown","a50cdf6b":"markdown","c5c9a45b":"markdown","0422666b":"markdown","e4424e88":"markdown","803df335":"markdown","cc2a914d":"markdown","773d3a66":"markdown","1112da09":"markdown","9d230bfd":"markdown","f52712e6":"markdown","94a526a7":"markdown","8cf7d2db":"markdown","911065cc":"markdown","4acfb47a":"markdown","33565dd9":"markdown","e60ed560":"markdown","3936cca2":"markdown","08a7d0ec":"markdown","1d40b41d":"markdown","e7cb252a":"markdown","1fe3d302":"markdown","40fa72e8":"markdown","dcac62ae":"markdown","d42e62b1":"markdown","23b03b27":"markdown","4d393f4f":"markdown","c9a0a17b":"markdown","1435769f":"markdown","a91bf2fc":"markdown","8c162017":"markdown","90f8ce9b":"markdown","73987e59":"markdown","fa47c389":"markdown","28bce349":"markdown","a7cdb411":"markdown","f2b7e41d":"markdown","b0c38909":"markdown","47f2796f":"markdown","eb41b8c7":"markdown","6216b32b":"markdown","102372f4":"markdown","22ebd988":"markdown","ecf82333":"markdown","5187c06a":"markdown","f41a7985":"markdown","89e85b6f":"markdown","8b9f2020":"markdown","a95cbebe":"markdown","ef39d2cc":"markdown","4349ef9e":"markdown","e040ef2d":"markdown","cefe1002":"markdown","cbfacd80":"markdown","23130c17":"markdown","8d3807dc":"markdown","07cce645":"markdown","1b271e6f":"markdown","ce1e82d1":"markdown","eeaca034":"markdown","a249f963":"markdown","78c8bbcc":"markdown","04b0d82b":"markdown","a0ee129e":"markdown","df51ccb7":"markdown","59ac88e2":"markdown","32cd08fa":"markdown","0e80e691":"markdown","8e485fda":"markdown","05eb48e2":"markdown","16b910d0":"markdown","f52ed962":"markdown","a11c82ad":"markdown","d9729b4e":"markdown","c37b0453":"markdown","cbdb44a6":"markdown","9dbacd07":"markdown","179c3830":"markdown","7dc814ca":"markdown","afe46482":"markdown","70a31d27":"markdown","b73a217a":"markdown","2f38a2fc":"markdown","2b2b5207":"markdown","7e397067":"markdown","1bc5b34b":"markdown","ad1cca92":"markdown","c9c2a541":"markdown","638afe54":"markdown","dee789bb":"markdown","9f7f5fca":"markdown","f010af3f":"markdown","59e14f16":"markdown","ece11f88":"markdown","98c2fb52":"markdown","4723b7e5":"markdown","5327d1a8":"markdown","1196b9cd":"markdown","3662669f":"markdown","8136a62b":"markdown","16b9b70d":"markdown","12e98a93":"markdown","312aa7ac":"markdown","e09001b7":"markdown","fe20d8c7":"markdown","84bb2bb0":"markdown","55233c88":"markdown","f7168aa2":"markdown","1c8c6935":"markdown","ad7572fa":"markdown","5b2bef2f":"markdown","5f935386":"markdown","8bdc4eb0":"markdown","b7b8c9f2":"markdown","a825a5aa":"markdown","a783bb33":"markdown","e0929f40":"markdown","e7a368c4":"markdown","b21ab671":"markdown","0a3bc6ac":"markdown","39dd9fad":"markdown","b0d0990c":"markdown","278544ab":"markdown","8574218f":"markdown","c5267a5b":"markdown","20da8b09":"markdown","78a1fe2a":"markdown","3a43d34c":"markdown","7b78ec13":"markdown","52b03a56":"markdown","9d4ab9d8":"markdown","1c43e23e":"markdown","833e3ba8":"markdown","3ce2ec28":"markdown","ac40cda1":"markdown","df7e2f07":"markdown","1a9b253c":"markdown","2f9abd07":"markdown","b5378c41":"markdown","4a20551a":"markdown","dc21862d":"markdown","af81bf55":"markdown","805ac5fe":"markdown","4fca584b":"markdown","8886a8f0":"markdown","1abf23d0":"markdown","fc18f6d0":"markdown","b38ced84":"markdown","2907697f":"markdown","3f62be1e":"markdown","41341c09":"markdown","a4e591a0":"markdown","c75bee71":"markdown","57ba9161":"markdown","a504a8ec":"markdown","65da5e6b":"markdown","99a04afc":"markdown","f32f2e32":"markdown","c4fd3591":"markdown","cd16fb99":"markdown","c5f50fe0":"markdown","cf44422f":"markdown","fcd8ed75":"markdown","35bdc788":"markdown","6f001ee6":"markdown","1d34d2f4":"markdown","6a37b911":"markdown","ee0ad939":"markdown","ead27e29":"markdown","878a6e67":"markdown","697c7f00":"markdown","15fa756b":"markdown","f15c2c36":"markdown","1521a777":"markdown","7bef9e40":"markdown","bc959540":"markdown","d441aee9":"markdown","5ad8fcb3":"markdown","95e29919":"markdown","0f571ced":"markdown","77eb776a":"markdown","da74d7dc":"markdown","4bd90373":"markdown","b75ff899":"markdown","168eb04f":"markdown","8e6ab8ea":"markdown","56e125da":"markdown","7fcc86b6":"markdown","943b5061":"markdown","c66e3d52":"markdown","aa8ea40a":"markdown","eacd8f35":"markdown","6a97b557":"markdown","a9a78e69":"markdown","b2be6218":"markdown"},"source":{"ccf888b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n# \uc774 Python 3 \ud658\uacbd\uc5d0\ub294 \ub9ce\uc740 \uc720\uc6a9\ud55c \ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc124\uce58\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4\n# kaggle \/ python \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub85c \uc815\uc758\ub429\ub2c8\ub2e4 : https:\/\/github.com\/kaggle\/docker-python\n# \ub85c\ub529\ud558\uba74 \uc720\uc6a9\ud55c \ud328\ud0a4\uc9c0\uac00 \uba87 \uac00\uc9c0 \uc788\uc2b5\ub2c8\ub2e4.\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# \uc785\ub825 \ub370\uc774\ud130 \ud30c\uc77c\uc740 \"..\/input\/\"\ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\uc2b5\ub2c8\ub2e4.\n# \uc608\ub97c \ub4e4\uc5b4, \uc2e4\ud589\uc744 \ud074\ub9ad\ud558\uac70\ub098 Shift + Enter\ub97c \ub20c\ub7ec\uc774\ub97c \uc2e4\ud589\ud558\uba74 \uc785\ub825 \ub514\ub809\ud1a0\ub9ac \uc544\ub798\uc5d0\uc788\ub294 \ubaa8\ub4e0 \ud30c\uc77c\uc774 \ub098\uc5f4\ub429\ub2c8\ub2e4.\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n# \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc4f4 \uacb0\uacfc\ub294 \ucd9c\ub825\uc73c\ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4.","c078aa79":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","71af5c5e":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()","76564b9a":"women = train.loc[train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","3a238bbe":"men = train.loc[train.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","de918f90":"from sklearn.ensemble import RandomForestClassifier\n\ny = train[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train[features])\nX_test = pd.get_dummies(test[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4ce523cb":"# \ud3ec\ud568 \uc548 \ub428\/ The strings after # would not be included in the lines of codes.\nprint (\"Hello Python!\") \nprint (3)","42bb5e0d":"a = \"It is a new car!\"   \nb = 5\nc = input('Your name?')\nd = True\n\nprint (a)\nprint (b)\nprint (c)\nprint (d)","9b4918fa":"gas_tank = 10\n\nprint ( \"remaining gasoline\" )\n\ngas_used = 5\n\ngas_tank = gas_tank - gas_used\n\nprint (gas_tank)","78703831":"a = 1234\nb= 5678\nc = \"1234\"\nd = \"5678\"\nprint (a + b)\nprint (c + d)","49c5a491":"test1 = int(3.5)\ntest2 = float(3)\ntest3 = test1 + test2\ntest4 = str(3) +str(3.5)\n\nprint (test1)\nprint (test2)\nprint (test3)\nprint (test4)","9ccf9c44":"maker = \"CHEVROLET\"\nprint (len(maker))\na = 12345\nprint (len(str(a)))","0d5a082f":"maker = \"CHEVROLET\"\nprint (maker.lower())\nprint (maker.upper())","4c8f508e":"# \ub098\uc911\uc5d0 \ubc30\uc6b8 \uac83\uc774\ub098 \ubbf8\ub9ac \ubcf4\uba74\/ We will lern more later but let's take a sample\n# dataframe{'column'] \n# dataframe{'column'].isnull()\n# dataframe{'column'].isnull().any()\n# dataframe{'column'].isnull().sum()","4df858a9":"testnumber1 = 1\ntestnumber2 = 2\ntestnumber3 = 3\n\na = testnumber3 > 2\nb = testnumber1< 2 \nc = testnumber1 == 1 \nd = testnumber1 != 2\ne = testnumber2 <= 2 \nf = testnumber2 >= 2\n\nprint (a)\nprint (b)\nprint (c)\nprint (d)\nprint (e)\nprint (f)","ab74ee71":"maker = \"CHEVROLET\"\nprint (maker[3])","bfdeff32":"word = \"Korea\"\nprint (word[2:4]) # 3,4\nprint (word[:4]) # 0 ,1 , 2, 3","e8edbf5c":"print('I want {0} or {1}'.format('BMW', 'Mercedes'))\nprint('I want {1} or {0}'.format('BMW', 'Mercedes'))\n\nprint('I am ' + str(10) + ' years old.')\nprint('I am ' + '10' + ' years old.')\nprint('I am {} years old'.format(10))","918ffa72":"my_list1 = [1, 2, 3]\nmy_list2 = [\"KIA\", \"Chevrolet\", \"Ford\"]\nprint (my_list1)\nprint (my_list2)","80bc2008":"# len\/indexing\nmy_list3 = [1, 2, 3, [\"KIA\", \"Chevrolet\", \"Ford\"] ]\nprint (len(my_list3))\nprint (my_list3[0]) #getting the first item\nprint (my_list3[3]) # getting the 4th item","20be6664":"# Slicing\nmy_list = [1,2,3,4,5]\nprint (my_list[0:2]) #from the first item to the 2nd item 0,1,\/ \uccab\uc9f8\ubd80\ud130 3\uc9f8 \uc774\uc804\uae4c\uc9c0 \ucd9c\ub825\nprint (my_list[1:]) # #from the second item to the end \/ \ub458\uc9f8\ubd80\ud130 \ub05d\uae4c\uc9c0 \ucd9c\ub825","054a550e":"# Replacing\n\nmy_list = [1,2,3,4,5]\nmy_list[1] = 6\nprint (my_list)\nprint (my_list[1])","6d6793fb":"my_list4 = []\n\n# Append (at the end)\nmy_list4.append(\"Ford\")\nprint (my_list4)\n\n# Count\nprint (my_list4.count(\"Ford\"))\n\n# Index\nprint (my_list4.index(\"Ford\"))\n\n#pop\nmy_list4.append(\"BMW\")\nprint (my_list4)\n\nprint (my_list4.pop(0)) # pop method displays the item but remove it as well. pop\uc740 \uc544\uc774\ud15c\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc9c0\uc6b0\uae30 \ub54c\ubb38\uc5d0 \uc870\uc2ec\ud558\uc138\uc694.\n\n# Insert to a certain position\nmy_list4.insert(1,\"Chevrolet\")\nprint (my_list4)","d7da6835":"bizcard = {'name': 'Joshua', 'phone': '55512345678', 'company': 'ai2learn'}\n\nprint (bizcard)\nprint (bizcard[\"phone\"])","89e45123":"mydict = { 'model' : 'Camaro', 'maker': 'Chevrolet', 'year': 2020}\n\nprint (mydict.items())\nprint (mydict.keys()) \nprint (mydict.values())","f3e59759":"mydict = { 'model' : 'Camaro', 'maker': 'Chevrolet', 'year': 2020}\nnewdict = mydict.copy()  \nprint (newdict)\nprint (mydict.get('model'))\nprint (mydict.clear())","4869b814":"a = (1,2,3,4,5)\nb = (6,7,8,9)\n\nc = a+b\nprint (c)\n\nd = a*3\nprint (d)","400771ce":"a = ['Chevrolet', 'KIA', 'Mercedes']\nb = ('Chevrolet', 'KIA', 'Mercedes')  \n\na[0] = 'Ford'\nprint (a[0])\nb[0] = 'Ford'\n\n\n\n#print (a[0]) \n#pprint (a[1:2]) \n#pprint (a[:2]) \n#pprint (a.count('KIA'))\n#pprint (a.index('Mercedes'))","09b50e04":"from random import randint\n\ndice_toss = randint(1, 6)\nprint (dice_toss)","46a19c9d":"import math               \n\nprint (math.ceil(0.5))           \nprint (math.floor(0.5))  \nprint (max([1, 2, 3]))\nprint (max('Chevrolet'))\nprint (min([1, 2, 3]))\nprint (min('Chevrolet'))","b3bbac39":"my_speed = input()\nint_speed = int(my_speed)\n\nif int_speed <= 50:\n   print (\"Go faster\")\n\nelse:\n  print (\"Slow down.\")","7b713c12":"print (\"If the traffic light is red, enter 1. if the traffic light is blue or yellow, enter 2.\")\nt_code = int(input())\n\nif t_code == 1:\n  print (\"Stop the car.\")\nelse :\n    print (\"Go forward.\")","027960a6":"my_speed = input(\"How fast are you going?\")\nint_speed = int(my_speed)\n\nif int_speed <= 50:\n   print (\"Go faster\")\nelif int_speed >= 80:\n   print (\"Slow down.\")\nelse:\n  print (\"Okay.\")","b166314c":"print (\"If the traffic light is red, enter 1, if the traffic light is yellow, enter 2, and if the traffic light is green, enter 3.\")\nt_code = int(input())\n\nif t_code == 1:\n  print (\"Stop the car.\")\nelif t_code == 2:\n  print (\"Slow down.\")\nelse :\n    print (\"Go forward.\")","7a1e02a3":"## print (\"How much is the T-shirt?\")\nt_price = input()\nmy_price = int(t_price)\n\nif my_price  <= 20:\n  print (\"I can buy 2.\")\nelif my_price > 50:\n    print (\"Next time.\")\nelse:\n    print (\"Let me have one.\")","f8b92246":"for i in range(5):\n\tprint ('car')\n\nsum = 0\n  \nfor i in range(1, 11): \n\tsum = sum + 1    \nprint (sum)\n\nfor character in 'KOREA':\n\tprint (character)","be856541":"for i in range(2, 5):\n\tprint (i**2, i**3)\nprint (\"That's it\")\n\nfor n in range(10, 0, -3):\n\tprint (n)\n\nfor n in range(10, 20, 3):\n\tprint (n)","51c0e1bb":"makers = ['KIA', 'Jaguar', 'BMW']\n\nfor i in range(len(makers)):\n    print(\"I love {}\".format(makers[i]))","2c7f7047":"for n in range(20, 0, -2):\n    print(n)","fde1fa8e":"i = 15\n\nwhile i > 0:\n    print (i ** 2)\n    i -= 2\n# i -= 1 \uc740 i = i \u2013 1 \uacfc \uac19\uc740 \ub73b\uc785\ub2c8\ub2e4.\n# i -= 1 means i = i \u2013 1","2dc46658":"i = 1\n\nwhile i <= 3:\n\tprint (i)\n\ti += 1\nelse:\n    print (\"That's it.\")","6895ef61":"i = 0\n\nwhile i <= 5:\n\tprint (i)\n\tif i == 3:\n\t\tbreak\n\ti += 1","dabf531f":"i = 0\nwhile i <= 4:\n\ti += 1\n\tif i == 3:\n\t\tcontinue\n\telse:\n\t\tprint (i)","45c8a6d7":"def mycal():\n    x=3\n    print (x**3)\n\nmycal()","47a9867f":"def my_function3(wish, country):\n   \tprint (wish + country)\n\nmy_function3(\"I would like to go to\", \" Korea.\")\nmy_function3(\"I would like to visit\", \" Spain.\")\nmy_function3(\"I would like to live in\", \" Australia.\")","95adfad3":"def my_function2(first_name):\n    print(first_name + \" Choi\")\n\nmy_function2(\"Joshua\") \nmy_function2(\"Rachel\")","87463982":"def my_function4(a,b):\n     print (a**2, b**3)\n\nmy_function4(1,2)\nmy_function4(3,4)\nmy_function4(5,6)","0894a237":"def accelerator(speed):\n\tif speed > 80:\n\t\tprint (\"Slow down!\")\n\telse:\n\t\tprint (\"Go!\")\n\naccelerator(90)","386f68eb":"class Manager(object):\n    def __init__(self, model, color, year, mileage): \n       self.model = model\n       self.color = color\n       self.year = year\n       self.mileage = mileage\n\nmycar = Manager(\"Model: Camaro\", \"Color: Red\", \"Year: 2020\", \"Mileage: 12,345\")\n\nprint (mycar.model)\nprint (mycar.color)\nprint (mycar.year)\nprint (mycar.mileage)","574b10a8":"class Car(object):\n\tdef __init__(self, name):\n\t\tself.name = name\n\nmycar = Car(\"Bumblebee\")\nprint (mycar.name)","f659d4db":"class Car(object):\n\tdef _init_(self, maker, color, style):\n\t\tself.maker = maker\n\t\tself.color = color\n\t\tself.style = style\n\n\tdef brake(self):\n\t\tprint (\"This is a {} with a good brake.\".format(self.maker))\n\n\tdef mirror(self):\n\t\tprint (\"This is {} style with no blind spot.\".format(self.style))\n\n\tdef wiper(self):\n\t\tprint (\"It is {} and comes with an excellent wiper.\".format(self.color))\n\n\nmine = Car(\"Chevy\", \"dark blue\", \"cool\")\n\nmine.brake()\nmine.mirror()\nmine.wiper()","ff367c76":"class Car(object):\n\tdef __init__(self, category, maker, year, color):\n\t\tself.category = category\n\t\tself.maker = maker\n\t\tself.year = year\n\t\tself.color = color\n\n\tdef display_mycar(self):\n\t\tprint ('MyCar: {}'.format(self.category))\n\t\tprint ('Maker: {}'.format(self.maker))\n\t\tprint ('Year: {}'.format(self.year))\n\t\tprint ('Color: {}'.format(self.color))\n\nclass Truck(Car):\n\tpass\n\nTruck_mine = Truck('Truck','Chevy', '2019', 'Red')\nTruck_mine.display_mycar()","14e95f49":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nmysportscar = Car(\"an old car\",\"gasoline\")\nmysportscar.display_mycar()","ef6f3eea":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nclass Ecar(Car):\n\tpass\n\nmyecar = Ecar(\"a new car\",\"electricity\") \nmyecar.display_mycar()\nmysportscar = Car(\"an old car\", \"gasoline\")\nmysportscar.display_mycar()","4bbbf8f8":"class Car(object):\n\tdef __init__(self, category, fuel):\n\t\tself.category = category\n\t\tself.fuel = fuel\n\n\tdef display_mycar(self):\n\t\tprint (\"My car is {0} and it requires {1} for fuel.\". format(self.category,self.fuel))\n\nclass Ecar(Car):\n\tdef display_mycar(self):\n\t\tprint (\"My car does not require fuel. and it only requires {}.\". format(self.fuel))\n\nmyecar = Ecar(\"a new car\",\"electricity\") \nmyecar.display_mycar()\nmysportscar = Car(\"an old car\", \"gasoline\")\nmysportscar.display_mycar()","6fdf1f3b":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\t\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nroad = Car('Sonata')\nprint (road.calculate_mileage(10))","3827d1ca":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tpass\n\n\nroad = Truck('road')\nprint (road.calculate_mileage(10))","460c1539":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.2\n\nroad = Truck('road')\nprint (road.calculate_mileage(10))","46621a84":"class Car(object):\n\tdef __init__(self, model):\n\t\tself.model = model\n\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.1\n\nclass Truck(Car):\n\tdef calculate_mileage(self, ml):\n\t\tself.ml = ml\n\t\treturn ml * 0.2\n\n\tdef highway_mileage(self, ml):\n\t\treturn super(Truck, self).calculate_mileage(ml)\n\nhighway = Truck('highway')\nprint (highway.highway_mileage(10))","cb3a2058":"sample1 = lambda x,y,z: x+y+z\nprint (sample1(1,2,3))\n\n\ndef sample1(x,y,z):\n    n= x+y+z\n    print (n)\n    \nsample1(1,2,3)\n\nsample2 = lambda x,y,z: x*y*z\nprint (sample2(1,2,3))\n\nz = (lambda x,y: x+y) (10,20) \nprint (z)","bc6abab6":"y = lambda x: x**3\nprint (y(7))\n\nz = (lambda x,y: x**3+y**3) (3,4) \nprint (z)\n\nz = (lambda x,y: x**3+y**3) \nprint (z(3,4))","76886fa6":"for num in range(1, 3):\n\tif num % 2 == 0:\n\t\tprint (num)\n\t\tcontinue\nfor num in range(1, 3):\n\tif num % 2 == 1:\n\t\tprint (num)\n\t\tcontinue\n\n\nprint ((lambda x, y: x if x % 2 == 0 else y)(1,2))\nprint ((lambda x, y: x if x % 2 == 1 else y)(1,2))\n\nmylist = list(range(1, 3))\nprint (list(filter(lambda n:n % 2 == 0 , mylist)))\nprint (list(filter(lambda n:n % 2 == 1 , mylist)))","1256c4b1":"print (list(map(lambda x: x ** 2, [5,6,7,8,9])))","84617daa":"y = list(map(lambda x: x**3, (range(1,6))))\nprint (y)","d83d5235":"mylist =  [1, 2, 3]\nprint (map(lambda x: x**3, mylist))","cb80f8c0":"print (list(filter(lambda x: x < 3, range(2))))","ab9736a0":"mylist =  [1, 2, 3]\nprint (list(filter(lambda x: x > 2, mylist)))","f5942a0d":"mylist =  [-2, -1, 1, 2]\nprint (list(filter(lambda x: x > 0, mylist)))","7402cc8a":"a = ['BMW' ,'FORD', 'CHEVY']\nb = [2019,2020]\n\ncomb_car = [(c, y) for c in a for y in b]\n\nprint (comb_car)","c996ba37":"mylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist1 = [i for i in mylist if type(i)==int]\nprint (newlist1)\n\nmylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist2 = [i for i in mylist if type(i)==float]\nprint (newlist2)","0308b829":"mylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist3 = [i for i in mylist if type(i)==str]\nprint (newlist3)\n\nmylist = [1,2,3,\"a\",\"b\",4.0,5.0,True, False]\nnewlist4 = [i for i in mylist if type(i)==bool]\nprint (newlist4)","3dfa42c5":"cars = ['BMW', 'FORD', 'CHEVY', 'KIA']\nyears = [2019, 2020, 2018, 2019]\n\nyear_dict = {key: value for key, value in zip(cars, years)}\n\nprint (year_dict)","dbc92698":"players = ['Curry', 'Harden', 'James', 'Davis', 'Jokic']\npositions =   ['PG', 'SG', 'SF', 'PF', 'C'] \n\nmydict1 = {key: value for key, value in zip(players,positions)}\nprint (mydict1)","c2db512e":"a = {1,2,3,4,5} \nb = {5,6,7,8,9}\nc = a.intersection(b)   \nd = a.union(b)\ne = a.difference(b) \n\nprint (c)\nprint (d)\nprint (e)","8bfa0f36":"a = {1,2,3,4,5} \n\na.add(6)  # one item only\nprint (a)\n\na.update({7,8}) # multiple items\nprint (a)\n\na.remove(5)\nprint (a)","5ed29f00":"import numpy as np\nvar = np.array([1,2,3])\nprint (var)\n\nvar[1]","fdcb4afc":"var = np.array([[1,2,3], [4,5,6]])\nprint (var)","170a7351":"var = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]], [[1,2,3], [4,5,6]]])\nprint (var)","0bc2a5e2":"var = np.array([1,2,3])\nprint (var.dtype)\n\n\nvar = np.array([1.0,2.0,3.0])\nprint (var.dtype)","8f1662ee":"var = np.array([[[1,2,3]]])\nprint (var.ndim)\n\n\nvar = np.array([[[1,2,3], [4,5,6], [7,8,9]]])\nprint (var.ndim)","6eb3f6ef":"var = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]]])\nprint (var.shape)\n\n\nvar = np.array([[[1,2,3], [4,5,6], [7,8,9]]])\nprint (var.shape)\n\nvar = np.array([[1,2,3], [4,5,6]])\nprint (var.shape)","eab87291":"var = np.array([[[1,2,3], [4,5,6]], [[1,2,3],[4,5,6]]])\nprint (var.size)","af316e2b":"var = np.array([1,2,3,4,5])\nprint (var[2])","5e04b886":"var = np.array([[[1,2,3,4,5]], [[6,7,8,9,10]], [[11,12,13,14,15]]])\nprint (var[1,0,3])","478c5155":"var = np.array([[[1,2,3,4,5]], [[6,7,8,9,10]], [[11,12,13,14,15]]])\nprint (var[1,0,3])","b3218e8c":"import numpy as np\nvar = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nvar[0,1] = 100\nprint (var)","a59e81f2":"import numpy as np\nprint (np.zeros(3))\nprint (np.zeros([2,3]))\nprint (np.zeros([3,3]))\n\nprint (np.ones(3))\nprint (np.ones([2,3]))\nprint (np.ones([3,3]))\n\nprint (np.full(3, 5))\nprint (np.full([2,3], 5))\nprint (np.full([3,3], 5))","6ba97b88":"np.random.rand(3,3)   # default : between 0 and 1","fe304e35":"np.random.randint(0, 6, size =(3,3))","8dd358af":"import numpy as np\nprint (np.identity(3))","1de190ed":"np.repeat(4,3, axis =0)","e780ffda":"var = np.array([[1,2,3]])\nrep = np.repeat(var,3, axis=0)\nprint (rep)","716576fa":"import numpy as np\n\na = np.array([[1,2,3],[1,2,3]])\nb = a.copy()\nprint (b)\n\nprint(np.empty((3,3), dtype=float, order='C'))\nprint (np.eye(3))","82ea31db":"a = np.eye(3)\nprint (a)\n        \nprint (np.zeros_like(a))\nprint (np.ones_like(a))\nprint (np.arange(0,20,4))","d17b51d0":"a = np.array([1,2,3])\nprint (a + 2) \nprint (a * 2)\nprint (a - 2)\nprint (a \/ 2)\nprint (a % 2)\n\nb = np.array([4,5,6,])\nprint (a + b)\nprint (a - b)\n\nprint (np.cos(a))\nprint (np.sin(a))","54ce5618":"import numpy as np\nmyarray1 =np.ones((2,3))\nprint (myarray1)\n\nmyarray2 = np.full((3,2),3)\nprint (myarray2)\n\nprint (np.matmul(myarray1,myarray2))","8ce53eb9":"import random\nmyarray = np.random.rand(3,3)\nprint (myarray)\n\nprint (np.min(myarray, axis = 0)) \nprint (np.max(myarray, axis = 0)) \nprint (np.mean(myarray, axis = 0)) \n\nprint (np.min(myarray)) \nprint (np.max(myarray)) \nprint (np.mean(myarray)) \n\nprint (np.sum(myarray))\nprint (np.sum(myarray, axis =0))","920861dd":"a = np.array([[1,2,3],[4,5,6]]) # 2X3 array\nprint (a)\n\nb = a.reshape((3,2)) \nprint (b)","8af7dba1":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([a,b,c])","2f80d540":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([a,b,c])\n","9b149fa3":"# You can change orders\/ \uc21c\uc11c\ub97c \ubc14\uafb8\uc5b4\ub3c4 \ub429\ub2c8\ub2e4.\na = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([b,a,c])","7c73a1ee":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([c,a,b])","8b2f6660":"# You can repeat stacking \/ \ubc18\ubcf5\ud574\uc11c \uc313\uc544\ub3c4 \ub429\ub2c8\ub2e4.\n\na = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.vstack([a,a,a])","57507bee":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = np.array([7,8,9])\n\nnp.hstack([a,a,a,b,b,c])","8f2b8f82":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","37d2399b":"# Suppose our farm had the followings\ncabage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\n\ncabage","50a03ffc":"plt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.show","b887a4d8":"plt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\nplt.show","e0ab6f04":"# Plot output \/ \ud50c\ub86f \ucd9c\ub825\n\nplt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage)\nplt.plot(year,radish)\nplt.show","bfa1c529":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.scatter(year,cabbage)\nplt.scatter(year,radish)\nplt.show","08b87423":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', year, radish, 'g')\nplt.show","cf900f8a":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Qunatity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\nplt.show","1c1dc896":"import matplotlib.pyplot as plt\n\nplt.xlabel('Year')\nplt.ylabel('Quantity')\nplt.xlim(2014,2020)\nplt.ylim(0,5000)\ncabbage = [4000, 4200, 3800, 3700, 4100]\nradish = [2300, 2400, 2200, 2300, 2400]\nyear = [2015, 2016, 2017, 2018, 2019]\nplt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\nplt.show","94aa0b5f":"axes = plt.subplots(1,2, figsize=(12,6))","514bfeed":"f,ax=plt.subplots(2,2,figsize=(10,16))","877d5540":"fig1 = plt.figure(1, figsize=(12,6))\nsub1 = fig1.add_subplot(121)    \nsub2 = fig1.add_subplot(122)   \n\nsub1.plot(year, cabbage)\nsub2.plot(year,radish)","a426f1f4":"from matplotlib.ticker import MaxNLocator\n\nfig1 = plt.figure(1, figsize=(12,6))\n\n\nsub1 = fig1.add_subplot(121)    \nsub2 = fig1.add_subplot(122)   \n\nsub1.plot(year, cabbage)\nsub1.xaxis.set_major_locator(MaxNLocator(integer=True))\n\n\nsub2.plot(year,radish)\nsub2.xaxis.set_major_locator(MaxNLocator(integer=True))","2fa60a35":"f,ax=plt.subplots(1,2,figsize=(12,6))","436e9f87":"f,ax=plt.subplots(1,2,figsize=(12,6)) \nax[0].set_title('Cabbage Quantity')\nax[1].set_title('Radish Quantity')\n\nax[0].set_ylabel('Qty') \nax[0].set_xlabel('Year') \n\nax[1].set_ylabel('Qty') \nax[1].set_xlabel('Year')\n\nax[0].set_xlim(2014,2020) \nax[0].set_ylim(0,5000) \n\nax[1].set_xlim(2014,2020) \nax[1].set_ylim(0,5000) \n\nax[0].scatter(year, cabbage) \nax[1].scatter(year, radish)","beb17604":"sample = train.copy()\n\nf,ax=plt.subplots(1,2,figsize=(15,6))\nsample['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%2.4f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsample['Pclass'].value_counts().plot.pie(explode=[0,0.0,0],autopct='%1.2f%%',ax=ax[1],shadow=True)\nax[1].set_title('Pclass')\nax[1].set_ylabel('')","6cfa2637":"import missingno\nmissingno.matrix(sample, figsize = (15,8))","2b01639c":"import numpy as np\nimport pandas as pd\n\ntest1 = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain1 = pd.read_csv('..\/input\/titanic\/train.csv')","14e1d0dc":"train1.head(3)","57cf7eeb":"train1.tail()","01d4b621":"train1.describe()","57066644":"train1.info()","376a3e09":"train1.shape","6627a630":"train1.dtypes","60d2e12f":"# \uae38\uc774\ub97c \ubd05\ub2c8\ub2e4.\n\nlen(train1)","6a1e50ea":"train1.columns","8b708e12":"train1.columns[3]","7a6e5e61":"train1.columns[3:5]","7bb11afc":"ntrain1 = train1.shape[0]\nntest1 = test1.shape[0]","cc997bce":"train1['Pclass']","87250c0b":"train1.isnull().sum()","467cc2f2":"train1.isnull().any()","012ccf39":"train.isna().sum()","0d1fb120":"train1.isna().any()","50f80d57":"sample = pd.concat((train1, test1),sort=True)\nsample.head()","cab3c6fa":"train1['Age_Range']=pd.qcut(train1['Age'],6)\ntrain1.head()","e0227fc8":"train1.Parch.value_counts()","8c238fab":"top3=train.Parch.value_counts().nlargest(3).index\nprint (top3)","80710838":"train1.sort_values('Age', ascending=False)","40e108c8":"train1.sort_values('Age', ascending=True)","7daf5223":"train1.sort_values('Age', ascending=True)[3:10]","5dd21b2b":"train1[train1.Age >40]","c0cf54af":"train1[(train1.Age >= 30) & (train1.Sex == 'female')]","adf8c306":"train1[(train1.Age > 50) & (train1.Sex == 'female') & (train1.Pclass == 1)][1:10]","296af8a6":"train1['NewAge']=0\nfor i in train1:\n    train1['NewAge']=train1['Age']\n    \ntrain1.head()\n    ","7b95098b":"for i in train1:\n    train1['Initial']=train1.Name.str.extract('([A-Za-z]+)\\.')\n\ntrain1.head()","fe5279a4":"train1['LastName']=0\nfor i in train1:\n    train1['LastName']=train1.Name.str.extract('([A-Za-z]+)')\n    \ntrain1.head()","b849ec1e":"# count the frequencies\nfrequencies = train1[\"Initial\"].value_counts(normalize = True)\nfrequencies","fee37cb6":"# See Task 7 also\n\n# filter the smaller categories\nthreshold = 0.01\nsmall_categories = frequencies[frequencies < threshold].index\nsmall_categories","4de91948":"# replace the values\ntrain1[\"Initial\"] = train1[\"Initial\"].replace(small_categories, \"Other\")\ntrain1[\"Initial\"].value_counts(normalize = True)","97133c4e":"# Calculate % of missing values in each column:\ntrain1.isna().mean()","a7685a03":"# Drop columns with any missing values:\ntrain1.dropna(axis='columns')","0ec24f23":"# Drop columns with more than 10% of values are missing:\ntrain1.dropna(thresh=len(train1)*0.9, axis='columns')","d38a357f":"train1.drop(columns=['LastName'])","428b453a":"train1.loc[(train1['Initial']=='Mr')]","ecf0183f":"train1.loc[(train1['Initial']=='Mr') & (train1['Age']< 13),'Initial']= 'Boy'\ntrain1.head(n=20)","3b62d9ad":"train1['total']=train1.iloc[:,0:2].sum(axis=1)\ntrain1.head(n=10)","2919490b":"train1.reset_index()","e852f3a7":"train1.reset_index().rename(columns={\"Initial\": \"Salutation\"})","f9c4de24":"cols = list(train1.columns.values)\ntrain2 = train1[cols[5:8]]\n\ntrain2.head()","f2c57502":"train1.groupby(['Pclass','Age'])['Pclass'].count()","f244f191":"train1.groupby(['Pclass','Age'])['Pclass'].mean()","651109dd":"# groupby - cmap\n\ntrain1.groupby(['Pclass'])['Age'].mean().to_frame().style.background_gradient(cmap='summer_r')","48354619":"# groupby - Crosstab\npd.crosstab(train1.Age,train1.Pclass,margins=True).style.background_gradient(cmap='summer_r')","25780593":"train1.Age.value_counts()","5c37c684":"top5 = train1.Age.value_counts().nlargest(5).index\ntop5","2e4511fd":"train1['Top5Age'] = train1.Age.where(train1.Age.isin(top5), other=0)\ntrain1.Top5Age.value_counts()","6264527f":"train1.Age.apply(type).value_counts() ","9a76f507":"train1= train1.astype({'Age':'float16'})","60509f45":"train1.Age.apply(type).value_counts() ","5fb2ab6f":"train1['Gender']  = train1['Sex'].map({'male':1, 'female':2})\ntrain1.head()","22571e54":"for i in train1:\n    train1['NumName'] = train1['LastName'].factorize()[0]\n\ntrain1.head(30)","1fde70b6":"for i, row in train1.iterrows():\n  print (i, row)\n  if i == 3:\n    break","c04399bc":"import math, random, datetime\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","50ba6a02":"ax = sns.countplot(x=\"Pclass\", data=train1)","db57d211":"ax = sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train1)","7efd750f":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", data=train1)","d7d67033":"ax = sns.lineplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\",data=train1)","557beddf":"sns.boxplot(x=train1['SibSp'])","92319154":"sns.boxplot(x='Pclass', y='Fare', data=train1)","bfb5ee1a":"sns.barplot(\"Pclass\", \"Fare\", data=train1)","9594c66e":"ax = sns.barplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\", data=train1)","098189c8":"ax = sns.scatterplot(x=\"Pclass\", y=\"Fare\", data=train1)","5057f6e4":"ax = sns.scatterplot(x=\"Parch\", y=\"Fare\", hue=\"Survived\",\n...                      data=train1)","2b3f80b1":"sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"violin\", data=train1)","96e317b1":"sns.jointplot(x=\"Fare\", y=\"Age\", data=train1, kind='scatter')","3adf8dbf":"sns.relplot(x=\"Fare\", y=\"Age\", hue=\"Sex\", data=train1)","d13d7460":"train1.head()","19675c00":"train3 = pd.DataFrame()\n\ndef chn(a):\n    train3[a]= train1[a]\n\nchn('Survived')\nchn('Pclass')\nchn('Age')\nchn('Fare')\nchn('Gender')\nchn('NumName')","817b2152":"sns.pairplot(train3)","b57d89e5":"g = sns.PairGrid(train3)\ng.map_diag(sns.kdeplot)\ng.map_offdiag(sns.kdeplot, n_levels=6);","5238c86e":"# SNS \ucf54\ub9b4\ub808\uc774\uc158\n# Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ncorr = train3.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","fd4ca6ca":"# They are for data manipulation\/ \uae30\ubcf8 \ub370\uc774\ud130 \uc815\ub9ac \ubc0f \ucc98\ub9ac\nimport pandas as pd\nimport numpy as np\n\n# For Visualization \/ \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\n# For preprocessing and ML algorithms \/ \uc804\ucc98\ub9ac \ubc0f \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# Tunning and Evaluation \/ \ubaa8\ub378 \ud29c\ub2dd \ubc0f \ud3c9\uac00\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection\n\n# Ignore warnings \/ \uacbd\uace0 \uc81c\uac70 (Pandas often makes warnings)\nimport sys\nimport warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","0ad34d94":"# This may be harder than expected for a firsttimer, but if the data was not delivered correctly from the copy, press \"+ Add Data\", load \"Titanic Data\" from \"Competition Data\", and click each file to check the path address.\n# \uc774 \uac83\uc774 \ucc98\uc74c\ud558\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc608\uc0c1\ubcf4\ub2e4 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub294\ub370 \ubcf5\uc0ac\ud55c \uac83\uc5d0\uc11c \ub370\uc774\ud130\uac00 \uc804\ub2ec\uc774 \uc798 \uc548 \ub418\uc5c8\ub2e4\uba74 \"+Add Data\" \ub204\ub974\uc2dc\uace0 'Competition Data'\uc5d0\uc11c \"Titanic Data\" \ubd88\ub7ec\uc628 \ud6c4 \ud30c\uc77c\uc744 \ucc0d\uc5b4\uc11c \uacbd\ub85c \uc8fc\uc18c \ud655\uc778\ud574\uc57c \ud568 \ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# Now csv files, test and train, have become data frames.    ","6a19226f":"train.head()","9e5e2b38":"train.tail()","c123736a":"train.describe()","7dc02818":"train.info()","c7a8a795":"train.columns","2a3553ff":"train.columns[3]","8101d427":"train.columns[3:5]","ee72e9ef":"train[5:20]","84e7a92a":"train.shape","2f9ed390":"train.dtypes\n","9dff875b":"# \ubcd1\ud569 \uc900\ube44\nntrain = train.shape[0]\nntest = test.shape[0]\n\n# \uc544\ub798\ub294 \ub530\ub85c \uc798 \ubaa8\uc154 \ub461\ub2c8\ub2e4.\ny_train = train['Survived'].values\npassId = test['PassengerId']\n\n# \ubcd1\ud568 \ud30c\uc77c \ub9cc\ub4e4\uae30\ndata = pd.concat((train, test))\n\n# \ub370\uc774\ud130 \ud589\uacfc \uc5f4\uc758 \ud06c\uae30\ub294\nprint(\"data size is: {}\".format(data.shape))","db65846f":"train['Survived']","2d3f29a4":"train['Survived'].values\n","5b84da12":"missingno.matrix(data, figsize = (15,8))","c65e768f":"data.isnull().sum() #\ube44\uc5b4 \uc788\ub294 \uac12\ub4e4\uc744 \uccb4\ud06c\ud574 \ubcf8\ub2e4.","9e9deb57":"data.Age.isnull().any()","1ff856da":"data.dtypes\n#data.dtypes.isnull()\n#data.dtypes.isnull().any()","55520f30":"data.columns","a98d09f5":"train.head()","946ecae8":"# Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ncorr = data.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","6b63ebef":"fig = plt.figure(figsize=(10,2))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","b02e7ad6":"f,ax=plt.subplots(1,2,figsize=(15,6))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","5d475a32":"def piecount(a):\n    f,ax=plt.subplots(1,2,figsize=(15,6))\n    train[a].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n    ax[0].set_title(a)\n    ax[0].set_ylabel('')\n    sns.countplot(a,data=train,ax=ax[1])\n    ax[1].set_title(a)\n    plt.show()\n\npiecount('Survived')","d801b8c4":"def piecount3(a):\n      f,ax=plt.subplots(1,2,figsize=(15,6))\n      train[a].value_counts().plot.pie(explode=[0,0.0,0],autopct='%0.4f%%',ax=ax[1],shadow=True)\n      ax[1].set_title(a)\n      ax[1].set_ylabel('')\n      sns.countplot(a,data=train,ax=ax[0])\n      ax[0].set_title(a)\n      plt.show()\n\npiecount3(\"Pclass\")","314ae911":"train.groupby(['Pclass','Survived'])['Survived'].count()","ebdee8b6":"pd.crosstab(train.Pclass,train.Survived,margins=True).style.background_gradient(cmap='summer_r')","8773bf0f":"f,ax=plt.subplots(1,2,figsize=(12,6))\ntrain[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived per Pcalss')\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Pcalss Survived vs Not Survived')\nplt.show()","bae052cc":"piecount3(\"Pclass\")","8404464d":"train.groupby('Pclass').Survived.mean()","5df46cdb":"data.Name.value_counts()","22b48fc5":"temp = data.copy()\ntemp['Initial']=0\nfor i in temp:\n    temp['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')","50653e34":"pd.crosstab(temp.Initial,temp.Sex).T.style.background_gradient(cmap='summer_r')","598ec463":"def survpct(a):\n  return temp.groupby(a).Survived.mean()\n\nsurvpct('Initial')","723c5159":"pd.crosstab(temp.Initial,temp.Survived).T.style.background_gradient(cmap='summer_r')","0e7fef55":"temp['LastName']=0\nfor i in temp:\n    temp['LastName']=data.Name.str.extract('([A-Za-z]+)')","9b12ad0f":"pd.crosstab(temp.LastName,temp.Survived).T.style.background_gradient(cmap='summer_r')","7de8ce12":"temp.loc[(temp['Initial']=='Dona')]","be0eab77":"temp.loc[(temp['Initial']=='Dona'),'Initial']= 'Mrs'","fd0a379a":"pd.crosstab(temp.Initial,temp.Survived).T.style.background_gradient(cmap='summer_r')","b48d56ae":"temp['NumName']= 0\n\nfor i in temp:\n    temp['NumName'] = temp['LastName'].factorize()[0]","fefd4a54":"pd.crosstab(temp.NumName,temp.Survived).T.style.background_gradient(cmap='summer_r')","73e72ac9":"temp.loc[(temp['LastName']=='Ali')]","7d6f2d82":"def bag(a,b,c,d):\n  f,ax=plt.subplots(1,2,figsize=(20,8))\n  train[[a,b]].groupby([a]).mean().plot.bar(ax=ax[0])\n  ax[0].set_title(c)\n  sns.countplot(a,hue=b,data=train,ax=ax[1])\n  ax[1].set_title(d)\n  plt.show()\n\nbag('Sex','Survived','Survived per Sex','Sex Survived vs Not Survived')","3454229d":"pd.crosstab([train.Sex,train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","c468308e":"print('Oldest Passenger was ',data['Age'].max(),'Years')\nprint('Youngest Passenger was ',data['Age'].min(),'Years')\nprint('Average Age on the ship was ',int(data['Age'].mean()),'Years')","3c91b7c0":"sns.swarmplot(x=train['Survived'], y=train['Age'])\nplt.xlabel(\"Survived\")\nplt.ylabel(\"Age\")\nplt.show()","e0ef3daa":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","bbef2e01":"temp.groupby('Initial')['Age'].mean() #\uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839 \uccb4\ud06c","3fe1148e":"# Assining NaN Age items with mean value of Initials\ntemp = temp.reset_index(drop=True)\n\ntemp['Age'] = temp.groupby('Initial')['Age'].apply(lambda x: x.fillna(x.mean()))\n\ntemp[31:50]","b8a0f04d":"temp['Initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona' , 'Dr', 'Jonkheer', 'Lady', 'Major', 'Master',  'Miss'  ,'Mlle', 'Mme', 'Mr', 'Mrs', 'Ms', 'Rev', 'Sir'],['Sacrificed', 'Respected', 'Nobles', 'Mr', 'Mrs', 'Respected', 'Mr', 'Nobles', 'Respected', 'Kids', 'Miss', 'Nobles', 'Nobles', 'Mr', 'Mrs', 'Nobles', 'Sacrificed', 'Nobles'],inplace=True)\ntemp['Initial'].replace(['Kids', 'Miss', 'Mr', 'Mrs', 'Nobles', 'Respected', 'Sacrificed'],[4,4,2,5,6,3,1],inplace=True)","e5a38887":"temp['Age_Range']=pd.qcut(temp['Age'],10)","401a6f90":"survpct('Age_Range')","fee622f2":"temp['Agroup']=0\n\ntemp.loc[temp['Age']<1.0,'Agroup']= 1\ntemp.loc[(temp['Age']>=1.0)&(temp['Age']<=3.0),'Agroup']= 2\ntemp.loc[(temp['Age']>3.0)&(temp['Age']<11.0),'Agroup']= 7\ntemp.loc[(temp['Age']>=11.0)&(temp['Age']<15.0),'Agroup']= 13\ntemp.loc[(temp['Age']>=15.0)&(temp['Age']<18.0),'Agroup']= 16\ntemp.loc[(temp['Age']>=18.0)&(temp['Age']<= 20.0),'Agroup']= 18\ntemp.loc[(temp['Age']> 20.0)&(temp['Age']<=22.0),'Agroup']= 21\ntemp.loc[(temp['Age']>22.0)&(temp['Age']<=26.0),'Agroup']= 24\ntemp.loc[(temp['Age']>26.0)&(temp['Age']<=30.0),'Agroup']= 28\ntemp.loc[(temp['Age']>30.0)&(temp['Age']<=32.0),'Agroup']= 31\ntemp.loc[(temp['Age']>32.0)&(temp['Age']<=34.0),'Agroup']= 33\ntemp.loc[(temp['Age']>34.0)&(temp['Age']<=38.0),'Agroup']= 36\ntemp.loc[(temp['Age']>38.0)&(temp['Age']<=52.0),'Agroup']= 45\ntemp.loc[(temp['Age']>52.0)&(temp['Age']<=75.0),'Agroup']= 60\ntemp.loc[temp['Age']>75.0,'Agroup']= 78\n","b057b438":"temp.head()","88598560":"survpct('Age')","cb2bd58d":"temp.loc[(temp['Sex']=='male'),'Sex']= 1\ntemp.loc[(temp['Sex']=='female'),'Sex']= 2\ntemp.loc[(temp['Age']< 1),'Sex']= 3","e453cc95":"temp.head()","23aed905":"survpct('Sex')","586c9c75":"temp['Alone']=0\ntemp.loc[(temp['SibSp']==0)& (temp['Parch']==0),'Alone']= 1","846a73e6":"temp['Family']=0\n\nfor i in temp:\n  temp['Family'] = temp['Parch'] + temp['SibSp'] +1","f89889d8":"temp.head(n=10)","024afd42":"survpct('Family')","41b17a00":"bag('Parch','Survived','Survived per Parch','Parch Survived vs Not Survived')","8157fcaf":"pd.crosstab([temp.Family,temp.Survived],temp.Pclass,margins=True).style.background_gradient(cmap='summer_r')","90e206f4":"temp.Ticket.head(n=10)","54da174b":"temp.Ticket.isnull().any()","96bad337":"temp['Initick'] = 0\nfor s in data:\n    temp['Initick']=temp.Ticket.str.extract('^([A-Za-z]+)')\n\ntemp = temp.reset_index(drop=True)  # to avoid `ValueError: cannot reindex from a duplicate axis`\n\ntemp.loc[(temp.Initick.isnull()),'Initick']= temp['Ticket']\n\ntemp.head()","905919e3":"temp['NumTicket'] = 0\nfor i in temp:\n    temp['NumTicket'] = temp['Initick'].factorize()[0]","6dcdf7b4":"temp.head(n=15)","405c0665":"def groupmean(a,b):\n  return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('NumTicket', 'Survived')","b9c64a24":"print('Highest Fare was:',temp['Fare'].max())\nprint('Lowest Fare was:',temp['Fare'].min())\nprint('Average Fare was:',temp['Fare'].mean())","c0919e3a":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(train[train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train[train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train[train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","c8c00b9a":"temp['Fare_Range']=pd.qcut(train['Fare'],10)\ngroupmean('Fare_Range', 'Fare')","8ac6893d":"temp['Fgroup']=0\n\ntemp.loc[temp['Fare']<= 0,'Fgroup']=0\ntemp.loc[(temp['Fare']>0)&(temp['Fare']<=7.125),'Fgroup']= 1\ntemp.loc[(temp['Fare']>7.125)&(temp['Fare']<=7.9),'Fgroup']= 2\ntemp.loc[(temp['Fare']>7.9)&(temp['Fare']<=8.03),'Fgroup']= 3\ntemp.loc[(temp['Fare']>8.03)&(temp['Fare']<10.5),'Fgroup']= 4\ntemp.loc[(temp['Fare']>=10.5)&(temp['Fare']<23.0),'Fgroup']= 5\ntemp.loc[(temp['Fare']>=23.0)&(temp['Fare']<=27.8),'Fgroup']= 6\ntemp.loc[(temp['Fare']>27.8)&(temp['Fare']<=51.0),'Fgroup']= 7\ntemp.loc[(temp['Fare']>51.0)&(temp['Fare']<=73.5),'Fgroup']= 8\ntemp.loc[temp['Fare']>73.5,'Fgroup']= 9\n\ntemp.head()","29662576":"temp.Cabin.value_counts()","82caabc7":"temp.Cabin.isnull().sum()","6d025124":"\ntemp['Inicab'] = 0\nfor i in temp:\n    temp['Inicab']=temp.Cabin.str.extract('^([A-Za-z]+)')\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 1 )),'Inicab']='X'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 2 )),'Inicab']='Y'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 3 )),'Inicab']='Z'\n    \ntemp.head()","bd0e225d":"for i in temp:\n    temp['Inicab'] = temp['Inicab'].factorize()[0]\n    \ntemp[11:20]","93b8d946":"pd.crosstab([temp.Embarked,temp.Pclass],[temp.Sex,temp.Survived],margins=True).style.background_gradient(cmap='summer_r')","ecf3bdaa":"sns.factorplot('Embarked','Survived',data=temp)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","76f74ece":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=temp,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=temp,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=temp,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=temp,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","68b65104":"temp.loc[(temp.Embarked.isnull())]","feccf14b":"temp.loc[(temp.Ticket == '113572')]","27ec2e0d":"temp.sort_values(['Ticket'], ascending = True)[55:70]","682ee3b4":"temp.loc[(temp.Embarked.isnull()),'Embarked']='S'","50b2fe25":"temp.loc[(temp.Embarked.isnull())]","f91c54f1":"for i in temp:\n    temp['Embarked'] = temp['Embarked'].factorize()[0]\n    \ntemp[11:20]","1084a5f6":"survpct('Initial')","f1886db2":"survpct('Pclass')","d410bf0e":"survpct('Sex')","45277bb0":"survpct('Age')","994c7737":"survpct('Fgroup')","2b8fba34":"temp['Priority'] = 0\ntemp.loc[(temp['Initial'] == 6), 'Priority'] = 1\ntemp.loc[(temp['Pclass'] == 1) & (temp['Sex'] == 2), 'Priority'] = 2\ntemp.loc[(temp['Age'] < 1),'Priority'] = 3\ntemp.loc[(temp['Pclass'] == 1) & (temp['Age'] <= 17), 'Priority'] = 4\ntemp.loc[(temp['Pclass'] == 2) & (temp['Age'] <= 17), 'Priority'] = 5\ntemp.loc[(temp['Pclass'] == 2) & (temp['Sex'] == 2), 'Priority'] = 6\ntemp.loc[(temp['Fgroup'] == 9), 'Priority'] = 7","3780c2f2":"survpct('Priority')","32cda4c9":"temp.Priority.value_counts()","1cd13ff7":"temp.columns\n","41714268":"survpct('Family')","e359405b":"survpct('Fgroup')","e334598a":"temp['FH'] = 0\ntemp.loc[(temp['Sex'] == 1), 'FH'] = 0\ntemp.loc[(temp['Sex'] == 2), 'FH'] = 1\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 2), 'FH'] = 2\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 3), 'FH'] = 3\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 4), 'FH'] = 4\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 1), 'FH'] = 5\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 2), 'FH'] = 6\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] == 3), 'FH'] = 7\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] >= 5), 'FH'] = 8","d056f237":"survpct('FH')","aeaaef75":"temp.FH.value_counts()","f1a62526":"temp['MH'] = 0\ntemp.loc[(temp['Sex'] == 2), 'MH'] = 0\ntemp.loc[(temp['Sex'] == 1), 'MH'] = 1\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 2), 'MH'] = 2\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 3), 'MH'] = 3\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 4), 'MH'] = 4\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 1), 'MH'] = 5\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 2), 'MH'] = 6\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] == 3), 'MH'] = 7\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] >= 5), 'MH'] = 8","12d569fb":"survpct('MH')","7574d831":"temp.MH.value_counts()","4d64603a":"temp['FL'] = 0\ntemp.loc[(temp['Sex'] == 1), 'FL'] = 0\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] < 5), 'FL'] = 1\ntemp.loc[(temp['Sex'] == 2) & (temp['Fgroup'] != 3), 'FL'] = 2\ntemp.loc[(temp['Sex'] == 2) & (temp['FH'] == 1), 'FL'] = 3\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] < 2), 'FL'] = 4\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] > 4), 'FL'] = 5\ntemp.loc[(temp['Sex'] == 2) & (temp['Family'] == 1) & (temp['Pclass'] == 3), 'FL'] = 6\n","be134341":"survpct('FL')","3de51ed4":"temp.FL.value_counts()","c3ef2b67":"temp['ML'] = 0\ntemp.loc[(temp['Sex'] == 2), 'ML'] = 0\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] < 5), 'ML'] = 1\ntemp.loc[(temp['Sex'] == 1) & (temp['Fgroup'] != 3), 'ML'] = 2\ntemp.loc[(temp['Sex'] == 1) & (temp['MH'] <7), 'ML'] = 3\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] < 2), 'ML'] = 4\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] > 4), 'ML'] = 5\ntemp.loc[(temp['Sex'] == 1) & (temp['Family'] == 1) & (temp['Pclass'] == 3), 'ML'] = 6","ce8704fc":"survpct('ML')","6b2e8cb8":"temp.ML.value_counts()","2de59628":"temp['F1'] = temp['Priority']","7615d3f7":"temp['F2'] = temp['FH']","1d8d7d3c":"temp['F3'] = temp['MH']","cc8c58ac":"temp['F4'] = temp['FL']","f1532f8b":"temp['F5'] = temp['ML']","f1d35f4f":"temp['F6'] = temp['Initial']","72c11993":"temp['F7'] = temp['Fgroup']","621ba142":"temp['F8'] = temp['NumName']","1122d7b5":"temp['F9'] = temp['NumTicket']","e82b4eb9":"temp['F10'] = temp['Family']","99e3c182":"temp['F11'] = temp['Embarked']","eb3d9a64":"temp['F12'] = temp['Sex']","666ea00f":"temp['F13'] = temp['Pclass']","fd78722d":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder","2b1da874":"dfl= pd.DataFrame() # for label encoding","3b7037df":"def newdf(a):\n    dfl[a] = temp[a]\n\nnewdf('F1')\nnewdf('F2')\nnewdf('F3')\nnewdf('F4')\nnewdf('F5')\nnewdf('F6')\nnewdf('F7')\nnewdf('F8')\nnewdf('F9')\nnewdf('F10')\nnewdf('F11')\nnewdf('F12')\nnewdf('F13')\n\ndfl.head()","eb709514":"dfh = dfl.copy()\n\ndfh.head()","25a8bb64":"dfl_enc = dfl.apply(LabelEncoder().fit_transform)\n                          \ndfl_enc.head()","7cc5e10f":"one_hot_cols = dfh.columns.tolist()\ndfh_enc = pd.get_dummies(dfh, columns=one_hot_cols)\n\ndfh_enc.head()","6a13a37a":"# train = dfl_enc[:ntrain]\n# test = dfl_enc[ntrain:]","5afaba62":"# X_test = test\n# X_train = train","97308b18":"# scaler = StandardScaler()\n# X_train = scaler.fit_transform(X_train)\n# X_test = scaler.transform(X_test)","ef8e6fba":"# X_train","2f8c8a20":"# ran = RandomForestClassifier(random_state=1)\n# knn = KNeighborsClassifier()\n# log = LogisticRegression()\n# xgb = XGBClassifier()\n# gbc = GradientBoostingClassifier()\n# svc = SVC(probability=True)\n# ext = ExtraTreesClassifier()\n# ada = AdaBoostClassifier()\n# gnb = GaussianNB()\n# gpc = GaussianProcessClassifier()\n# bag = BaggingClassifier()\n\n# Prepare lists\n# models = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \n# scores = []\n\n# Sequentially fit and cross validate all models\n# for mod in models:\n#     mod.fit(X_train, y_train)\n#     acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n#     scores.append(acc.mean())","d823f83f":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n# results = pd.DataFrame({\n#     'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n#     'Score': scores})\n\n# result_df = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\n# result_df.head(11)","a08f45a7":"# Plot results\n# sns.barplot(x='Score', y = 'Model', data = result_df, color = 'c')\n# plt.title('Machine Learning Algorithm Accuracy Score \\n')\n# plt.xlabel('Accuracy Score (%)')\n# plt.ylabel('Algorithm')\n# plt.xlim(0.70, 0.84)","bbc63d42":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n# def importance_plotting(data, x, y, palette, title):\n#     sns.set(style=\"whitegrid\")\n#     ft = sns.PairGrid(data, y_vars=y, x_vars=x, size=5, aspect=1.5)\n#     ft.map(sns.stripplot, orient='h', palette=palette, edgecolor=\"black\", size=15)\n    \n#     for ax, title in zip(ft.axes.flat, titles):\n    # \uac01 \uadf8\ub798\ud504\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ud0c0\uc774\ud2c0\uc744 \uc90d\ub2c8\ub2e4.\n#         ax.set(title=title)\n    # \uadf8\ub798\ud504\ub97c \ubc14\ub85c \uc138\uc6cc \ubd05\ub2c8\ub2e4.\n#         ax.xaxis.grid(False)\n#         ax.yaxis.grid(True)\n#     plt.show()","eb523a2b":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\n# fi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\n# importance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","9eca4570":"# \uadf8\ub798\ud504 \uc81c\ubaa9\n# titles = ['The most important features in predicting survival on the Titanic: XGB']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\n# importance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","13bc15da":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n# \uc544\ub798\ub294 Features\ub77c\ub294 \uc5f4\uc5d0 \ud2b8\ub808\uc778\uc758 \uc5f4\ub4e4\uc758 \uc774\ub984\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uace0 Importance\uc5d0\ub294 Logistic regression\uc5d0\ub294 coefficient\ub97c \ubc14\uafb8\uc5b4 \ub123\uc5b4\ub77c\ub294 \ub118\ud30c\uc774 \uba85\ub839\uc785\ub2c8\ub2e4.(\uc989 \uac00\ub85c\ub97c \uc138\ub85c\ub85c)\n# fi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\n# importance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","3f7ba21e":"# importance.head()","2441548a":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\n# titles = ['The most important features in predicting survival on the Titanic: Logistic Regression']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\n# importance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","18185c75":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\n# gbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\n# xgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\n# ran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\n# ext_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\n# ada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\n# importances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\n# importances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\n# importances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)\n\n# \ubcf4\uae30\n# importances","f21ebf38":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\n# fi = {'Features':importances['Feature'], 'Importance':importances['Average']}\n# importance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","e058f0ed":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\n# titles = ['The most important features in predicting survival on the Titanic: 5 model average']\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\n# importance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","d43be35b":"# \uc57d\ud55c \ub188 \ud0c8\ub77d, \ubcf8\ub798 \uc880 \ud0c8\ub77d\uc2dc\ud0a4\ub294\ub370 \ud558\ub098\ub9cc \ud0c8\ub77d\uc548 \uc2dc\ud0a4\uace0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n# train = train.drop(['F2'], axis=1)\n# test = test.drop(['F2'], axis=1)\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\n# X_train = train\n# X_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\n# X_train = scaler.fit_transform(X_train)\n# X_test = scaler.transform(X_test)","b4511e1c":"# \ubaa8\ub378 \uc0ac\uc6a9\n# ran = RandomForestClassifier(random_state=1)\n# knn = KNeighborsClassifier()\n# log = LogisticRegression()\n# xgb = XGBClassifier(random_state=1)\n# gbc = GradientBoostingClassifier(random_state=1)\n# svc = SVC(probability=True)\n# ext = ExtraTreesClassifier(random_state=1)\n# ada = AdaBoostClassifier(random_state=1)\n# gnb = GaussianNB()\n# gpc = GaussianProcessClassifier()\n# bag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\n# models = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \n# scores_v2 = []\n\n# Fit & cross validate\n# for mod in models:\n#     mod.fit(X_train, y_train)\n#     acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n#     scores_v2.append(acc.mean())","a9ea4cc2":"# \ud14c\uc774\ube14 \ub9cc\ub4e4\uc5b4\uc11c \ubcf4\uae30\n# results = pd.DataFrame({\n#     'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n#     'Original Score': scores,\n#     'Score with feature selection': scores_v2})\n\n# result_df = results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)\n# result_df.head(11)","cb8b39fe":"# \uacb0\uacfc\n# sns.barplot(x='Score with feature selection', y = 'Model', data = result_df, color = 'c')\n# plt.title('Machine Learning Algorithm Accuracy Score \\n')\n# plt.xlabel('Accuracy Score (%)')\n# plt.ylabel('Algorithm')\n# plt.xlim(0.75, 0.85)","322c660a":"train = dfh_enc[:ntrain]\ntest = dfh_enc[ntrain:]","3d4f31ab":"X_test = test\nX_train = train\n","0bf9f823":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","4e030df3":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n\n# Prepare lists\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores = []\n\n# Sequentially fit and cross validate all models\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores.append(acc.mean())","0feddf05":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Score': scores})\n\nresult_df = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\nresult_df.head(11)","9d73717b":"# Plot results\nsns.barplot(x='Score', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.80, 0.90)","c19ea901":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ndef importance_plotting(data, x, y, palette, title):\n    sns.set(style=\"whitegrid\")\n    ft = sns.PairGrid(data, y_vars=y, x_vars=x, size=5, aspect=1.5)\n    ft.map(sns.stripplot, orient='h', palette=palette, edgecolor=\"black\", size=15)\n    \n    for ax, title in zip(ft.axes.flat, titles):\n    # \uac01 \uadf8\ub798\ud504\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ud0c0\uc774\ud2c0\uc744 \uc90d\ub2c8\ub2e4.\n        ax.set(title=title)\n    # \uadf8\ub798\ud504\ub97c \ubc14\ub85c \uc138\uc6cc \ubd05\ub2c8\ub2e4.\n        ax.xaxis.grid(False)\n        ax.yaxis.grid(True)\n    plt.show()","6b56c4bb":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\nfi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","5ebb6283":"# \uadf8\ub798\ud504 \uc81c\ubaa9\ntitles = ['The most important features in predicting survival on the Titanic: XGB']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","ccb5ef63":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n# \uc544\ub798\ub294 Features\ub77c\ub294 \uc5f4\uc5d0 \ud2b8\ub808\uc778\uc758 \uc5f4\ub4e4\uc758 \uc774\ub984\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub123\uace0 Importance\uc5d0\ub294 Logistic regression\uc5d0\ub294 coefficient\ub97c \ubc14\uafb8\uc5b4 \ub123\uc5b4\ub77c\ub294 \ub118\ud30c\uc774 \uba85\ub839\uc785\ub2c8\ub2e4.(\uc989 \uac00\ub85c\ub97c \uc138\ub85c\ub85c)\nfi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)\n\n\nimportance[0:10]","6db5186f":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: Logistic Regression']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","9e693b8d":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\ngbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\nxgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\nran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\next_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\nada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\nimportances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\nimportances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\nimportances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)\n\n# \ubcf4\uae30\nimportances[100:150]","c45e6b2f":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\nfi = {'Features':importances['Feature'], 'Importance':importances['Average']}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)\n\n\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: 5 model average']\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","e02e87f7":"importance1 = importance[0:381]\n\nimportance1[371:381]","d08a979f":"# \uc601\uc591\uac00 \uc788\ub294 380\uac1c\ub9cc \ub123\uae30\nmylist = list(importance1['Features'])\nmylist","311cd27e":"train1= pd.DataFrame()\ntest1 = pd.DataFrame()\n\nfor i in mylist:\n    train1[i] = train[i]\n    test1[i]= test[i]\n    \ntrain1.head()\n","7d65470c":"train = train1\ntest = test1\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\nX_train = train\nX_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","e618051c":"#  \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd\n# \ubaa8\ub378 \uc0ac\uc6a9\nran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=1)\ngbc = GradientBoostingClassifier(random_state=1)\nsvc = SVC(probability=True)\next = ExtraTreesClassifier(random_state=1)\nada = AdaBoostClassifier(random_state=1)\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v2 = []\n\n# Fit & cross validate\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v2.append(acc.mean())","0c2ad1a0":"# \ud14c\uc774\ube14 \ub9cc\ub4e4\uc5b4\uc11c \ubcf4\uae30\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2})\n\nresult_df = results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)\nresult_df.head(11)","9a49d9c4":"# \uacb0\uacfc\nsns.barplot(x='Score with feature selection', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.80, 0.90)","cf38f786":"# \ud30c\ub77c\ubbf8\ud130 \uc11c\uce58\nCs = [0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 50, 100]\ngammas = [0.001, 0.01, 0.1, 1]\n\n# \ud30c\ub77c\ubbf8\ud130 \uadf8\ub9ac\ub4dc \uc14b\ud305\nhyperparams = {'C': Cs, 'gamma' : gammas}\n\n# \uad50\ucc28\uac80\uc99d\ngd=GridSearchCV(estimator = SVC(probability=True), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# \ubaa8\ub378 fiting \ubc0f \uacb0\uacfc\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","15077a22":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [100, 250, 500, 750, 1000, 1250, 1500]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = GradientBoostingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","ac63e6b2":"penalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\n\nhyperparams = {'penalty': penalty, 'C': C}\n\ngd=GridSearchCV(estimator = LogisticRegression(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","74f95b4a":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [10, 25, 50, 75, 100, 250, 500, 750, 1000]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = XGBClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","50cc54e1":"max_depth = [3, 4, 5, 6, 7, 8, 9, 10]\nmin_child_weight = [1, 2, 3, 4, 5, 6]\n\nhyperparams = {'max_depth': max_depth, 'min_child_weight': min_child_weight}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","ee359e47":"gamma = [i*0.1 for i in range(0,5)]\n\nhyperparams = {'gamma': gamma}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a875a400":"subsample = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\ncolsample_bytree = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\n    \nhyperparams = {'subsample': subsample, 'colsample_bytree': colsample_bytree}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","2160fd6b":"\nreg_alpha = [1e-5, 1e-2, 0.1, 1, 100]\n    \nhyperparams = {'reg_alpha': reg_alpha}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0, subsample=0.6, colsample_bytree=0.9),\n                                         param_grid = hyperparams, verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","91ffa052":"n_restarts_optimizer = [0, 1, 2, 3]\nmax_iter_predict = [1, 2, 5, 10, 20, 35, 50, 100]\nwarm_start = [True, False]\n\nhyperparams = {'n_restarts_optimizer': n_restarts_optimizer, 'max_iter_predict': max_iter_predict, 'warm_start': warm_start}\n\ngd=GridSearchCV(estimator = GaussianProcessClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","531a38d2":"n_estimators = [10, 25, 50, 75, 100, 125, 150, 200]\nlearning_rate = [0.001, 0.01, 0.1, 0.5, 1, 1.5, 2]\n\nhyperparams = {'n_estimators': n_estimators, 'learning_rate': learning_rate}\n\ngd=GridSearchCV(estimator = AdaBoostClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","d671bc85":"n_neighbors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30]\n\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# Fitting model and return results\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","3fd8b973":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = RandomForestClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","fc74ba4b":"\nn_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = ExtraTreesClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","de699130":"\nn_estimators = [10, 15, 20, 25, 50, 75, 100, 150]\nmax_samples = [1, 2, 3, 5, 7, 10, 15, 20, 25, 30, 50]\nmax_features = [1, 3, 5, 7]\n\nhyperparams = {'n_estimators': n_estimators, 'max_samples': max_samples, 'max_features': max_features}\n\ngd=GridSearchCV(estimator = BaggingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","1f766cb1":"\n# \ud29c\ub2dd \ubaa8\ub378 \uc2dc\uc791\n# sample\uc744 split\ud558\ub294 \uac83\uc740 \uc804\uccb4\ub370\uc774\ud130 80%\ub97c \ud2b8\ub808\uc778\uc14b\uc5d0 20%\ub294 \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \uc90c  \nran = RandomForestClassifier(n_estimators=25,\n                             max_depth=3, \n                             max_features=3,\n                             min_samples_leaf=2, \n                             min_samples_split=8,  \n                             random_state=1)\n\nknn = KNeighborsClassifier(algorithm='auto', \n                           leaf_size=1, \n                           n_neighbors=5, \n                           weights='uniform')\n\nlog = LogisticRegression(C=2.7825594022071245,\n                         penalty='l2')\n\nxgb = XGBClassifier(learning_rate=0.0001, \n                    n_estimators=10,\n                    random_state=1)\n\ngbc = GradientBoostingClassifier(learning_rate=0.0005,\n                                 n_estimators=1250,\n                                 random_state=1)\n\nsvc = SVC(probability=True)\n\next = ExtraTreesClassifier(max_depth=None, \n                           max_features=3,\n                           min_samples_leaf=2, \n                           min_samples_split=8,\n                           n_estimators=10,\n                           random_state=1)\n\nada = AdaBoostClassifier(learning_rate=0.1, \n                         n_estimators=50,\n                         random_state=1)\n\ngpc = GaussianProcessClassifier()\n\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v3 = []\n\n# Fit & \uad50\ucc28 \uac80\uc99d\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v3.append(acc.mean())","5e1b21f3":"\n# \ub7ad\ud0b9 \ud14c\uc774\ube14 \uc0dd\uc131\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2,\n    'Score with tuned parameters': scores_v3})\n\nresult_df = results.sort_values(by='Score with tuned parameters', ascending=False).reset_index(drop=True)\nresult_df.head(11)","8b4aabc8":"\n# \uacb0\uacfc\nsns.barplot(x=None, y = None, data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 0.86)","36449128":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub4dc\ubcf4\ud305\ngrid_hard = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'hard')\n\ngrid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv = 10)\ngrid_hard.fit(X_train, y_train)\n\nprint(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean()*100))","2963fe3c":"grid_soft = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'soft')\n\ngrid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv = 10)\ngrid_soft.fit(X_train, y_train)\n\nprint(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean()*100))","3a5459fb":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130 \uc911 \uace8\ub77c\uc11c \ud558\ub4dc\ubcf4\ud305\n#grid_hard = VotingClassifier(estimators = [('Logistic Regression', log),\n#                                           ('Gaussian Process', gpc),\n#                                           ('SVC', svc)], voting = 'hard')\n#\n#grid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv = 10)\n#grid_hard.fit(X_train, y_train)\n\n#print(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean()*100))","cbcc6346":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130 \uc911 \uace8\ub77c\uc11c \uc18c\ud504\ud2b8\ubcf4\ud305\n#grid_soft = VotingClassifier(estimators = [('Logistic Regression', log),\n#                                           ('Gaussian Process', gpc),\n#                                           ('SVC', svc)], voting = 'soft')\n#\n#grid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv = 10)\n#grid_soft.fit(X_train, y_train)\n\n#print(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean()*100))","5745fdca":"# Final predictions\npredictions = grid_soft.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission106.csv', header = True, index = False)","f6f81529":"# Final predictions2\npredictions = grid_hard.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission107.csv', header = True, index = False)","d246964a":"# And we finally make a submission \uadf8\ub9ac\uace0 \uc81c\ucd9c \ud569\ub2c8\ub2e4.\n# Please make sure you \"commit\" (It take a few minutes) \/ commit\ubc84\ud134\uc744 \ub204\ub974\uc2dc\ub294 \uac83\uc744 \uc78a\uc9c0 \ub9c8\uc138\uc694 (\uba87 \ubd84 \uac78\ub9bd\ub2c8\ub2e4)\n# And then you will see the submission file on the top right hand side at Data>Output>Kaggle\/working \/ \uadf8\ub7fc \uc6b0\uce21 \uc0c1\ub2e8 \ub370\uc774\ud130 \uc544\uc6c3\ud48b\uc5d0\uc11c \uc81c\ucd9c\uc6a9 \uacb0\uacfc\ubb3c\uc774 \ub098\uc62c \uac83\uc785\ub2c8\ub2e4.","e6f0444c":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c \uac19\uc740 Last name\uc5d0 \uac19\uc740 \ubc88\ud638\uac00 \uc4f0\uc5ec\uc84c\ub2e4.\n* As you see NumnName is the same as their Last Names are the same.\n* The part at the end: [0] means you are only taking the labels, throwing away the uniques that map back to your input.\n* \ub05d\uc5d0 [0]\uc740 \ub77c\ubca8\ub9cc \ubcf4\uace0 \ubc88\ud638\ub97c \ubd99\uc774\ub294 \uac83\uc73c\ub85c \uc815\ub9d0 unique\ud55c \uac83\uc774\ub780 \uac83\uc740 \uc548 \ubcf8\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\n* We have turned 'Initial' & 'NumName' representing \"Name\" and \"Last Name\" into numbers. Let's move on.\n* \uc790 \uc774\uc81c \uc774\ub984\uc744 \uc758\ubbf8\ud558\ub294 \uc911\uc694\ud55c \uc694\uc18c \ub450 \uac1c\ub97c \uc22b\uc790\ub85c \ubc14\uafb8\uc5c8\uc73c\ub2c8 \ub2e4\uc74c\uc73c\ub85c \uac11\ub2c8\ub2e4.","d6536bb9":"### Deciding final features","e057ce45":"### Task 14 - drop, dropna","8645a56c":"* \ubc30\ucd94 \ubb34\uc6b0 \uc591\uc744 \ub123\uc5b4\uc11c \ucd9c\ub825\ud574 \ubd05\ub2c8\ub2e4.\n* Let's enter those data and diplay them","fd4ae7aa":"* \"Pclass\" \ubd84\uc11d\n\n* Pclass\ub294 \uac12\uc774 \uc22b\uc790\uc774\ub098 \uc11c\uc5f4\uc774 \uc815\ud574\uc9c4 Ordinal Feature\uc774\ub2e4.\n* Pclass is an \"Ordinal Feature\" whose values are numerical but sequenced.\n* Key:1 = 1st, 2= 2nd, 3 = 3rd\n* \n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* * Let's look at the survivors for each class.","4d582b86":"* Now we are ready to move on.\n* \uc774\uc81c \ub2e4\uc74c \ub2e8\uacc4\ub85c \uac11\ub2c8\ub2e4.","0deb0b19":"* \uc790, \uc774\uc81c \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc9c0\uc694.\n* \uc6b0\uc120 \uc778\ucf54\ub529\ud55c \ud30c\uc77c\uc744 train\uacfc test\ub85c \uc544\uae4c \uad6c\ubd84\ud574 \ub193\uc740 \ud589\uc73c\ub85c \ucabc\uac2d\ub2c8\ub2e4\n\n* Now let's create a machine learning model.\n* First, split the encoded file into the lines that were previously separated by train and test.","6c580659":"#### \uac15\uc870 3\n* \ubcc0\uc218\ub294 \ubcc0\ud558\uba70, \uc81c\uc77c \ub9c8\uc9c0\ub9c9 \uac83\uc774 \ub36e\uc5b4 \uc501\ub2c8\ub2e4.\n* \uc544\ub798\ucc98\ub7fc \ud161\ud06c\uc5d0 \ub0a8\uc740 \uac00\uc2a4\ub294 \uc0ac\uc6a9 \ud6c4 \uc904\uc5b4\ub4e0 \uc591\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4.","5bebc596":"### Task 9 - Conditional Filtering","428155e7":"### Task 23 - map","3fdd0301":"### Task 38 List Comprehension","76e59699":"* Dictionary Comprehension, or DC lets you create a new dictionary based on the input sequence.\n* Dictionary Comprehension, \ub610\ub294 DC \ub294 \uc778\ud48b \uc2dc\ud000\uc2a4\uc5d0 \ub530\ub77c \uc0c8\ub85c\uc6b4 dictionary \ub97c \ub9cc\ub4e4\uac8c \ud569\ub2c8\ub2e4.\n* Syntax\n\n        newdict  = [key: value for key, value in input sequence]\n        new_dict = {key: value for key, value in zip(dict1, dict2)}","29133607":"* \ud310\ub2e4\uc2a4\uc5d0\uc11c \ubc18\ubcf5\uc744 \ucc98\ub9ac\ud560 \ub54c \ud544\uc694\ud55c \ud568\uc218\ub4e4\uc774 \uc788\ub2e4.\n \n* \uc6b0\uc120 \uae30\ubcf8 \ub8e8\ud504 \ud615\uc2dd\uc744 \ubcf8\ub2e4.\n \n* There are some functions needed to handle iterations in Pandas.\n \n* First look at the basic loop type.","38039dbc":"### Logistic Regression\n* Penalty - L1 \uc744 \uc0ac\uc6a9\ud558\ub294 \ud68c\uadc0 \ubaa8\ub378\uc744 Lasso Regression\uc774\ub77c\uace0\ud558\uace0 L2\ub97c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub378\uc744 Ridge Regression\uc774\ub77c\uace0\ud569\ub2c8\ub2e4. \uc774 \ub458\uc758 \uc8fc\uc694 \ucc28\uc774\uc810\uc740 \ud398\ub110\ud2f0\uc785\ub2c8\ub2e4. \ub9bf\uc9c0 \ud68c\uadc0\ub294 \uc190\uc2e4 \ud568\uc218\uc5d0 \ud398\ub110\ud2f0 \ud56d\uc73c\ub85c \uacc4\uc218\uc758 \"\uc81c\uacf1 \ud06c\uae30\"\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. L2-norm\uc774 \uc624\ucc28\ub97c \uc81c\uacf1\ud558\uae30 \ub54c\ubb38\uc5d0 (\uc624\ub958> 1 \uc778 \uacbd\uc6b0 \ub85c\ud2b8\uac00 \uc99d\uac00 \ud568) \ubaa8\ub378\uc740 L1-norm\ubcf4\ub2e4 \ud6e8\uc52c \ud070 \uc624\ucc28 (e vs e ^ 2)\ub97c \ubcf4\uac8c\ub418\ubbc0\ub85c \ud6e8\uc52c \ub354 \ubbfc\uac10\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc624\ub958\ub97c \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \ubaa8\ub378\uc744 \uc870\uc815\ud574\uc90d\ub2c8\ub2e4.\n* C\ub294 estimator \uc785\ub2c8\ub2e4. logspace 1\ucc28\uc6d0 10\uac1c \ubc30\uc5f4\ub85c 0\uc5d0\uc11c 4\uae4c\uc9c0\ub97c estimator\ub85c \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.","3218fd1d":"#### \uac15\uc870 44\n*  \ud55c \ubc88\uc529 \ub9cc\ub4e4\uc5b4 \ubcf4\uae30","91e0c19e":"Before moving on, make sure that your code returns the output above.  The code above calculates the percentage of female passengers (in **train.csv**) who survived.\n\nThen, run the code below in another code cell:\n\n\uacc4\uc18d \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 \ucf54\ub4dc\uac00 \uc704\uc758 \ucd9c\ub825\uc744 \ubc18\ud658\ud558\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc704\uc758 \ucf54\ub4dc\ub294 \uc0dd\uc874 \ud55c \uc5ec\uc131 \uc2b9\uac1d (train.csv)\uc758 \ube44\uc728\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n\n\uadf8\ub7f0 \ub2e4\uc74c \ub2e4\ub978 \ucf54\ub4dc \uc140\uc5d0\uc11c \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624.","54596b23":"* string \uc5d0\ub294 \uc54c\ud30c\ubcb3, \uae30\ud638, \uacf5\ubc31 \ubc0f \uae30\ud0c0\uac00 \ud3ec\ud568\ub429\ub2c8\ub2e4.\n* string \uc740 \ud070 \ub530\uc634\ud45c (\" \") \ub610\ub294 \uc791\uc740 \ub530\uc634\ud45c (' ') \uc5d0 \ub123\uc5b4\uc11c \ud45c\ud604\uc744 \ud569\ub2c8\ub2e4.\n* \uc608\uc81c\uc640 \uac19\uc774 + \ub97c \uc0ac\uc6a9\ud558\uc5ec string\uc744 \ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ucef4\ud4e8\ud130\ub294 string\uacfc number\ub97c \ub2e4\ub974\uac8c \ucde8\uae09\ud569\ub2c8\ub2e4.\n* string contains alphabets, symbols, spaces, and others.\n* string is expressed in double quotes (\"\") or single quotes ('').\n* You can add strings using +, as in the example..\n* Computers treat strings and numbers differently.","6251c5f3":"#### \"Cabin\" \ubd84\uc11d\n* cabin \uc758 \uc704\uce58\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's see if there is anything that depends on the location of the cabin.","af16ab61":"#### \uac15\uc870 70 \n*   factorize - \uc6b0\uc6a9","165bbf13":"#### \uac15\uc870 30\n*  \ud55c \ubc88 \uc870\uac74 \ub123\uc5b4\ubcf4\uae30 \uac15\uc870","812b91ff":"* Let's learn how to find mean, minimum, maximum, etc.\n* \ud3c9\uade0, \ucd5c\uc18c, \ucd5c\ub300 \uac12 \ub4f1\uc744 \ucc3e\ub294 \uba54\uc18c\ub4dc\ub97c \ubc30\uc6cc \ubd05\ub2c8\ub2e4.\n\nSyntax\n\n    # \ucd5c\uc18c\uac12\n    np.min(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n    # \ucd5c\ub300\uac12\n    np.max(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n    # \ud3c9\uade0\uac12\n    np.mean(\uc5b4\ub808\uc774\ubcc0\uc218\uba85)\n    # \ucc38\uc870\ub85c axis = 0\ub294 x\ucd95\ub9cc \uc788\ub294 \uac83, axis=1 \uc740 x,y\ucd95 axis=2\ub294 x,y,z\ucd95 \n\n     # Minimum value\n     np.min (array variable name)\n     # Max\n     np.max (array variable name)\n     # Average\n     np.mean (array variable name)\n     # Reference axis = 0 has only for one with x axis only, axis = 1 is for ones with x, y axis, and axis = 2 is for ones with x, y, z axis","82fac9bf":"* This one is useful when you get errors due to \"duplicated columns\"","65eb90f6":"* test \uc5d0 \uc788\ub294 Dona\uc758 \ub098\uc774\ub97c \ubcf4\uace0 \uc5b4\ub514\uc5d0 \ub123\uc744\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Ms. \ub294 \ud604\ub300\ucc98\ub7fc Miss + Mrs\ub97c \ud569\uce5c \ub9d0\uc774 \uc544\ub2c8\ub77c \ub2f9\uc2dc\uc5d0\ub294 \uadc0\uc871\ubbf8\ub9dd\uc778\uc744 \uc758\ubbf8\ud558\ub294 \uac83\uc774 \uc5c8\uc2b5\ub2c8\ub2e4. Mlle\ub098 Mme\ub4f1\ub3c4 \ub9c8\ub4dc\ubaa8\uc544\uc824\uacfc \ub9c8\ub2f4\uc758 \uc904\uc778\ub9d0\uc77c \uacbd\uc6b0\uc77c \uac83\uc785\ub2c8\ub2e4. \uadc0\uc871 \uc5ec\uc131\ub4e4\ub85c \ubcf4\uc544\uc57c\uaca0\uc8e0.\n \n* Let's look at Dona's age and decide to where to classify her.\n  \n* Ms. did not mean Miss + Mrs combined like these days, at the time it meant widow. Also Mlle, & Mme may be short for Mademoiselle and Madame. I should see them as women in a higher class.","08609b10":"-----------------------------------------------------\n\n# 4. 25 Things to Learn - Pandas\n\n### Also please check 101 [Pandas Tips for Beginners \/Titanic (EN&KR)](http:\/\/www.kaggle.com\/joshuajhchoi\/101-pandas-tips-for-beginners-titanic-en-kr)","3a176cf2":"* reiplot\uc740 \ub450 \uac1c\uc758 \ubcc0\uc218 \uc0ac\uc774\uc758 \ud1b5\uacc4\uc801 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\uc900\ub2e4\n* replot\uc758 \uae30\ubcf8\uc740 scatterplot\uc774\ub2e4.","5d83038d":"\uadf8\ub798\uc11c \uc774\ubbf8 \ub2f5\uc774 \uc54c\ub824\uc838 \uc788\ub294 \ud2b8\ub808\uc778 \ud30c\uc77c\uc744 \ud574\ubcf4\ub2c8 ...\uc544 \uc774\uc815\ub3c4 \uc815\ud655\uc131\uc774 \uc788\uc5c8\uace0, \uac01 \uc218\uce58\ub4e4\uacfc \uacb0\uacfc\ub97c \ube44\uad50\ud574\ubcf4\ub2c8 \uc5b4\ub290 \ud56d\ubaa9\uc774 \uc815\ub2f5\uc5d0 \uc544\uc8fc \uc815\ud559\ud55c \uc778\ub371\uc2a4\uac00 \ub418\uace0 \uc5b4\ub290 \ud56d\ubaa9\uc740 \ubcc4\ub85c \uad00\uacc4 \uc5c6\ub354\ub77c...\uc774\ub7f0 \uac83\uc774\uc9c0\uc694","019629fa":"### \uc81c\ucd9c","ba8846b1":"#### \uac15\uc870 28\n*  \ud568\uc218 \ub9cc\ub4dc\ub294 \uc774\uc720 - \ub9e4\ud06c\ub85c\uc640 \ube44\uc2b7","f2b7645b":"# Part 3:  Explore a pattern\n\nRemember that the sample submission file in **gender_submission.csv** assumes that all female passengers survived (and all male passengers died).  \n\nIs this a reasonable first guess?  We'll check if this pattern holds true in the data (in **train.csv**).\n\nCopy the code below into a new code cell.  Then, run the cell.\n\n\n** gender_submission.csv **\uc758 \uc0d8\ud50c \uc81c\ucd9c \ud30c\uc77c\uc740 \ubaa8\ub4e0 \uc5ec\uc131 \uc2b9\uac1d\uc774 \uc0dd\uc874\ud588\uc73c\uba70 \ubaa8\ub4e0 \ub0a8\uc131 \uc2b9\uac1d\uc774 \uc0ac\ub9dd \ud55c \uac83\uc73c\ub85c \uac00\uc815\ud569\ub2c8\ub2e4.\n\n\uc774\uac83\uc774 \ud569\ub9ac\uc801\uc778 \ucd94\uce21\uc785\ub2c8\uae4c? \uc774 \ud328\ud134\uc774 ** train.csv **\uc5d0\uc11c \ub370\uc774\ud130\uc5d0 \ud574\ub2f9\ub418\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\uc544\ub798 \ucf54\ub4dc\ub97c \uc0c8 \ucf54\ub4dc \uc140\uc5d0 \ubcf5\uc0ac\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7f0 \ub2e4\uc74c \uc140\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624.","daf7e5b4":"* reset_index().rename \uba54\uc18c\ub4dc\ub294 \uceec\ub7fc\uc758 \ud5e4\ub4dc\ub97c \ubc14\uafc0 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. The reset_index (). rename method allows you to change the head of a column.","fb71ad3d":"# Titanic: Machine Learning from Disaster\n\n* Titanic Challenge is a competition to predict the survival or death of a given passenger based on variables such as age, gender or passenger class.\n* The key to success in this challenge lies at \"classify well\".\n* Although my lines are not that great, but I will try to use as many descriptions as possible for beginners to undrstand better.\n* \ud0c0\uc774\ud0c0\ub2c9 \ucc4c\ub9b0\uc9c0\ub294 \ub098\uc774, \uc131\ubcc4 \ub610\ub294 \uc2b9\uac1d \ud074\ub798\uc2a4\uc640 \uac19\uc740 \ubcc0\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \uc2b9\uac1d\uc758 \uc0dd\uc874 \ub610\ub294 \uc0ac\ub9dd\uc744 \uc608\uce21\ud558\ub294 \uacbd\uc7c1\uc785\ub2c8\ub2e4.\n* \uc774 \ucc4c\ub9b0\uc9c0\uc758 \uc911\uc694\uc131\uc740 \"\uc798 \ubd84\ub958\"\ud558\ub294\ub370 \uc788\uc2b5\ub2c8\ub2e4.\n* \ubd80\uc871\ud558\uc9c0\ub9cc \ucd08\ubcf4\uc790\ub4e4\uc744 \uc704\ud574 \uc794 \uc124\uba85\ub4e4\ub3c4 \ucd5c\ub300\ud55c \ub9ce\uc774 \ub123\uc5b4 \ubcf4\ub824\uace0 \ub178\ub825\ud569\ub2c8\ub2e4.\n\n## Contents\n\n### Prerequsite\n\n#### 1. 40 Things to Learn - Python\n#### 2. 10 Things to Learn - NumPy\n#### 3. 10 Things to Learn - Matplotlib\n#### 4. 25 Things to Learn - Pandas\n#### 5. 10 Things to Learn - Seaborn\n\n\n### Titanic\n\n#### 1. Import libraries & data \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 \uc784\ud3ec\ud2b8\n#### 2. File Separations and Merges \ud30c\uc77c \ubd84\ub9ac \ubc0f \ubcd1\ud569 \n#### 3. Check the files \ud30c\uc77c \ubcf4\uae30\n#### 4.  Features \ud56d\ubaa9\n#### 5.  Exploratory Data Analysis \ub370\uc774\ud130 \ud0d0\uad6c \n*  Surivived\n* Pclass\n* Name\n* Sex\n* Age\n* SibSp + Parch\n* Ticket\n* Fare\n* Cabin\n* Embarked\n\n#### 6. Feature Engineering\n*  Turning string to numbers (Done at EDA)\n* Adding Features\n* Removing Features\n* Final look\n\n#### 7. Pre-processing\n* Making 2 data frames\n* Encoding\n\n#### 8. Machine Learning\n* Initial models\n* Feature selection\n* Model tuning\n* Voting Classifier\n\n#### 9. Final model predictions and submission","b5a314b5":"* \ud30c\uc774\uc36c\uc758 \ub78c\ub2e4(lambda) \ud568\uc218\ub294 \ub7f0\ud0c0\uc784\uc5d0 \uc0dd\uc131\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc775\uba85 \ud568\uc218 \uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc778 \ud568\uc218\uc640 \uac19\uc774 \uc815\uc758\ud574\ub450\uace0 \uc4f0\ub294 \uac83\uc774 \uc544\ub2c8\uace0 \ud544\uc694\ud55c \uacf3\uc5d0\uc11c \uac04\ub2e8\ud55c \uae30\ub2a5\uc744 \uc989\uc2dc \uc0ac\uc6a9\ud558\uace0 \ubc84\ub9b4 \uc218 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Python's lambda function is an anonymous function that can be created and used. It is not a function that you define and use like a normal function, but a simple function that can be used and discarded.\n\n* Sample 1 - calculation\n\n        a = 2        \n        b = 2\n        print (a ** b)\n\nA function\n\n        def sample(a,b):\n                print(a ** b)\n\n        sample(2,2)\n    \n* lambda\n\n        a = lambda x, y: x ** y\n        print (a(2,2))\n        \n* \uadf8\ub7fc \ub78c\ub2e4\ub85c \ub2e4 \ud558\uc9c0 \uc65c \uadc0\ucc2e\uac8c function \uc744 \ub9cc\ub4dc\ub290\ub0d0\uace0 \ud560 \uc218\ub3c4 \uc788\uaca0\uc73c\ub098 lambda \ub294 \uc784\uc2dc\ub85c\ub9cc \uc0ac\uc6a9\ub418\ub294 \ud55c\uacc4\uac00 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Then you may say we do all with lambda functions and why we bother creating functions? Because .....lambda has its limits and is used only temporarily.","19d13660":"### Task 8 - Sorting","430b6b3d":"* \ud569\ud55c \ud50c\ub86f\uc744 \uadf8\ub9ac\uae30 \uc704\ud574\uc11c\ub294 jointplot \uba85\ub839\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\n* \uc544\ub798\uc640 \uac19\uc774 \uad00\uacc4\ub97c scatterplot\uc73c\ub85c \ud615\uc0c1\ud654 \ud55c\ub2e4.","74208048":"* \ud074\ub798\uc2dc\ud30c\uc774\uc5b4\ub294 \ud2b9\uc815 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uc5d0 (\ubc94\uc8fc) \ud074\ub798\uc2a4 \ub808\uc774\ube14\uc744 \ud560\ub2f9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \uc774\uc0b0 \uac12 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Random Forest -\uacb0\uc815 \ud2b8\ub9ac(decision tree)\ub294 \ub9d0\uadf8\ub300\ub85c \uacb0\uc815\uc744 \ub0b4\ub9ac\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud2b8\ub9ac\ub85c, \uacb0\uc815 \uacfc\uc815\uc744 \uac04\ub2e8\ud55c \ubb38\uc81c\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uacc4\uce35 \uad6c\uc870\ub85c \ub098\ub208\ub2e4. \uac04\ub2e8\ud55c \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\uac1c\ubcc0\uc218(\uc608: \ubaa8\ub4e0 \ub178\ub4dc\uc758 \ud14c\uc2a4\ud2b8 \ub9e4\uac1c\ubcc0\uc218, \uc885\ub2e8 \ub178\ub4dc\uc5d0\uc11c \ub9e4\uac1c\ubcc0\uc218 \ub4f1)\ub97c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 \uc124\uc815\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ubb38\uc81c\uc758 \uacbd\uc6b0 \ud559\uc2b5 \ub370\uc774\ud130\ub85c\ubd80\ud130 \ud2b8\ub9ac \uad6c\uc870\uc640 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubaa8\ub450 \uc790\ub3d9\uc73c\ub85c \ud559\uc2b5\ud55c\ub2e4. \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\uc758 \uac00\uc7a5 \ud070 \ud2b9\uc9d5\uc740 \ub79c\ub364\uc131(randomness)\uc5d0 \uc758\ud574 \ud2b8\ub9ac\ub4e4\uc774 \uc11c\ub85c \uc870\uae08\uc529 \ub2e4\ub978 \ud2b9\uc131\uc744 \uac16\ub294\ub2e4\ub294 \uc810\uc774\ub2e4. \uc774 \ud2b9\uc131\uc740 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \uc608\uce21(prediction)\ub4e4\uc774 \ube44\uc0c1\uad00\ud654(decorrelation) \ub418\uac8c\ud558\uba70, \uacb0\uacfc\uc801\uc73c\ub85c \uc77c\ubc18\ud654(generalization) \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4. \ub610\ud55c, \ub79c\ub364\ud654(randomization)\ub294 \ud3ec\ub808\uc2a4\ud2b8\uac00 \ub178\uc774\uc988\uac00 \ud3ec\ud568\ub41c \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \uac15\uc778\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc900\ub2e4. \ub79c\ub364\ud654\ub294 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \ud6c8\ub828 \uacfc\uc815\uc5d0\uc11c \uc9c4\ud589\ub418\uba70, \ub79c\ub364 \ud559\uc2b5 \ub370\uc774\ud130 \ucd94\ucd9c \ubc29\ubc95\uc744 \uc774\uc6a9\ud55c \uc559\uc0c1\ube14 \ud559\uc2b5\ubc95\uc778 \ubc30\uae45(bagging)\uacfc \ub79c\ub364 \ub178\ub4dc \ucd5c\uc801\ud654(randomized node optimization)\uac00 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc740 \uc11c\ub85c \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ub418\uc5b4 \ub79c\ub364\ud654 \ud2b9\uc131\uc744 \ub354\uc6b1 \uc99d\uc9c4 \uc2dc\ud0ac \uc218 \uc788\ub2e4.\n* randome_state =1\ub85c \ud558\ub294 \uac83\uc740 \uacc4\uc18d \uac19\uc740 \uacb0\uacfc\ub85c \ub098\uc624\uac8c\/ 0\uc73c\ub85c \ud558\uba74 \ub9e4\ubc88 \ub2ec\ub77c\uc9d0\n* K-neighbors\ub294 \uc27d\uac8c \ud45c\ud604\ud558\uba74 K\uac1c\uc758 \uc774\uc6c3\uc744 \ucc3e\uc2b5\ub2c8\ub2e4.\uc774\uc6c3 \uc810\uc758 \uc778\uc811 \uc9c0\ud45c\uc640 \uac70\ub9ac\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n* Logistic Regression - \uc885\uc18d \ubcc0\uc218\uc640 \ub3c5\ub9bd \ubcc0\uc218 \uc0ac\uc774\uc758 \uad00\uacc4\ub294 \ubbf8\ub798 \uc608\uce21 \ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ub420 \uad6c\uccb4\uc801\uc778 \ud568\uc218\ub85c \ud45c\ud604\ub418\uba70 \ub3c5\ub9bd\uc801\uc778 \ubcc0\uc218\uc758 \uc120\ud615 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uac74\uc758 \uac00\ub2a5\uc131\uc744 \uc608\uce21\ud558\uae30 \uc704\ud574 \ud1b5\uacc4 \uae30\ubc95\uc785\ub2c8\ub2e4. \uc989 \ub3d9\uc804\uc758 \uc55e\ub4b7\uba74, \ub418\ub0d0 \uc548 \ub418\ub294\ub0d0 \uc774\ub7f0 \uc885\ub958\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud68c\uadc0\ub780 \ub9d0\uc774 \uc0dd\uacbd\ud558\uae30 \ub54c\ubb38\uc5d0 \uac04\ub2e8\ud788 \ub9d0\uc500 \ub4dc\ub9ac\uba74 \uc608\ub97c \ub4e4\uc5b4 \ud0c0\uc774\ud0c0\ub2c9\uc5d0\uc11c 1\ub4f1\uc11d \uc5ec\uc131\ubd80\ud130 \uad6c\uba85\ubcf4\ud2b8\uc5d0 \uba3c\uc800 \ud0dc\uc6e0\ub2e4\uba74 \ub8f0\uc5d0 \ub530\ub77c 1\ub4f1\uc11d \uc5ec\uc131\uc740 \ubaa8\ub450 \uc0b4\uc544\uc57c \ud558\ub294\ub370, \ud604\uc2e4 \uc138\uacc4\uc5d0\uc11c\ub294 \uaf2d \ucf00\uc774\ud2b8\uc708\uc2ac\ub81b\ucc98\ub7fc \ub514\uce74\ud504\ub9ac\uc624 \ub55c\uc5d0 \ub3c4\ub85c \ubc30\ub85c \ub3cc\uc544\uc624\uac70\ub098 \uc544\ub2c8\uba74 \uc2a4\uc2a4\ub85c \ud76c\uc0dd\uc744 \ud0dd\ud558\ub294 \ubd84\ub4e4 \uac19\uc740 \ud3c9\uade0\uac12\uc744 \ubc97\uc5b4\ub098\ub294 \uc77c\ub4e4\uc774 \uc0dd\uae30\uae30 \ub54c\ubb38\uc5d0 \ubcf8\ub798 \ubaa8\ub378\uacfc\uc758 \ucc28\uc774\uac00 \ubc1c\uc0dd\ud558\uac8c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ucc28\ub4e4\uc774 \ud3c9\uade0\uc801\uc778 \uc218\uce58\ub85c \ub3cc\uc544\uc624\uac8c \ub9cc\ub4dc\ub294 \uac83\uc774 \ud68c\uadc0 \ubaa8\ub378\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \uc124\uba85\uc774 \ubd80\uc871\ud558\ub098 \ucd08\ubcf4\uc790\ub4e4\uc740 \uadf8 \uc815\ub3c4\ub9cc \uc774\ud574\ud558\uc2dc\uace0 \ub098\uc911\uc5d0 \uc880 \ub354 \uc774\ud574\ud558\uc2dc\ub294 \uac83\uc73c\ub85c \ud558\uace0 \ub118\uc5b4 \uac11\ub2c8\ub2e4.\n* XGB\ub294 \uc758\uc0ac\uacb0\uc815 \ud2b8\ub9ac\ub97c \ub9ce\uc774 \ub9cc\ub4e4\uc5b4 \uc774\uc758 \uc608\uce21\uac12\uc744 \ub354\ud574\uac00\uba70 \uacb0\uc815\ud558\ub294\ub370 \uc774\ub97c \uc704\ud574 \ub610 \uc794 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \uc124\uc815\ud558\uac8c \ud558\uc5ec \uc880 \ub354 \uc131\ub2a5\uc744 \ub192\uc774\ub294 \ubd80\uc2a4\ud305 \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4.\n* \ucc38\uace0\ub85c \ubd80\uc2a4\ud305\uc740 \ubd84\ub958\ubb38\uc81c\uc5d0\uc11c \uc798 \ubabb \ubd84\ub958\ub41c \uac83\uc744 \uc7ac\ubd84\ub958\ud558\ub294 \uac83\uc744 \ubc18\ubcf5\ud558\uc5ec \uc608\uce21\ubaa8\ub378\uc744 \uac15\ud654 \uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4.\n* \ub610\ud55c \ubc30\uae45\uc774\ub780 \uac83\uc740 \uc5ec\ub7ec\ubc88\uc758 \ubcf5\uc6d0 \uc0d8\ud50c\ub9c1\uc744 \ud1b5\ud574 \uc608\uce21 \ubaa8\ub378\uc758 \ubd84\uc0b0\uc744 \uc904\uc5ec \ubaa8\ub378\uc744 \uac15\ud654\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n* \ub610\ud55c \ubcf4\ud305\uc774\ub780 \ub9d0\uc744 \ub9ce\uc774 \ub4e4\uc73c\uc2e4\ud150\ub370 \ubcf4\ud305\uc740 \ud558\ub4dc\ubcf4\ud305\uacfc \uc18c\ud504\ud2b8\ubcf4\ud305\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ub4dc\ubcf4\ud305\uc740 \ub9d0 \uadf8\ub300\ub85c \ud22c\ud45c\ud55c\ub370\ub85c \uacb0\uacfc\ub97c \ub0b4\ub294 \uac83\uc774\uace0, \uc18c\ud504\ud2b8\ubcf4\ud305\uc740 \uac00\uc911\uce58\ub97c \uc870\uc808\ud558\uc5ec \uc720\uc5f0\ud558\uac8c \ud22c\ud45c\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n* GradientBoosting - \ub79c\ub364 \ud3ec\ub9ac\uc2a4\ud2b8\uac00 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\uc11c \ud574\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ud0dd\ud55c\ub2e4\uba74 GradientBoosting\uc740 \uc55e\uc5d0 \ud2b8\ub9ac\uc758 \uc624\ucc28\ub97c \uc904\uc5ec\uac00\uba70 \ubcf4\uc644\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \uac00\ub294 \ubc29\uc2dd\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* SV\u3161 - Support Vector machine\uc740 \ubd84\ub958 \ud560 \ub54c \ubb34\uc6b0 \uc790\ub974\ub4ef\uc774 \uc790\ub974\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9c8\uc9c4\uc758 \uacbd\uacc4\uc120\uc744 \uc8fc\uc5b4 \uc81c\ud55c \uc870\uac74\uc744 \ucd94\uac00\ud55c \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \ub0a8\ubd81\ud55c\uc758 \uba85\ud655\ud55c \uacbd\uacc4\uc120 \ub300\uc2e0 \ube44\ubb34\uc7a5 \uc9c0\ub300 \uc0dd\uac01\ud558\uc2dc\uba74 \uc5b4\ub5a8\uc9c0....\n* ExtraTrees - \ub79c\ub364\ud3ec\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud2b8\ub9ac\ub97c \ubb34\uc791\uc704\ub85c \ubd84\ud560\ud558\uc5ec \ub354 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e0 \ubc29\uc2dd\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* adaboost \uc54c\uace0\ub9ac\uc998\uc740 Adaptive Boost\uc758 \uc900\ub9d0\ub85c \ub370\uc774\ud130\ub97c \ub300\ucda9 \ubd84\ub958\ud574\uc11c \ub3cc\ub9b0 \ud6c4 \uc5ec\uae30\uc11c \ubd84\ub958\ud558\uc9c0 \ubabb \ud558\ub294 \uc624\ub958\ub4e4\uc5d0 \uac00\uc911\uce58\ub97c \uc8fc\uc5b4 \uc815\ud655\ub3c4\ub97c \ub192\uc774\ub294 \uac83\uc744 \uacc4\uc18d \ubc18\ubcf5\ud558\uc5ec \uc2e0\ub8b0\ub3c4\ub97c \ub192\uc778\ub2e4\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* Gaussian Naive Bayes \uc54c\uace0\ub9ac\uc998\uc740 \ud2b9\uc218\ud55c \uc720\ud615\uc758 NB \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4. \uae30\ub2a5\uc5d0 \uc5f0\uc18d \uac12\uc774\uc788\uc744 \ub54c \ud2b9\ud788 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc774 \uac00\uc6b0\uc2a4 \ubd84\ud3ec, \uc989 \uc815\uaddc \ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.Naive Bayes\ub294 \ud2b9\uc131\ub4e4 \uc0ac\uc774\uc758 \ub3c5\ub9bd\uc744 \uac00\uc815\ud558\ub294 \ubca0\uc774\uc988 \uc815\ub9ac\ub97c \uc801\uc6a9\ud55c \ud655\ub960 \ubd84\ub958 \ubc29\ubc95\uc774\ub2e4. \ubca0\uc774\uc988\uc815\ub9ac - \uc870\uac74\ubd80 \ud655\ub960\n* Gaussian process\ub294 \ud568\uc218\uc758 \ud655\ub960\uc801 \ubd84\ud3ec\ub97c modeling\ud558\ub294\ub370 \uc4f0\uc774\uba70.\uac01\uc790\uc758 joint Guassian distribution\uc744 \uac00\uc9c4 Gaussian \ub79c\ub364 \ubcc0\uc218\uc758 \uc9d1\ud569\uc774\ub2e4. \uc880 \ub354 \uc27d\uac8c \ub9d0\ud560 \uc218 \uc788\ub294 \uac83\uc744 \uc0dd\uac01\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \ud06c\ub85c\uc2a4 \ubc38\ub9ac\ub370\uc774\uc158\uc740 \uacb0\uacfc \uac12\uc744 \uc774\ub9ac \ub3cc\ub824\ubcf4\uace0 \uc800\ub9ac \ub3cc\ub824 \ubcf4\uace0\ud574\uc11c \ud55c \uba74\uc5d0\uc11c \ub098\uc628 \uacb0\uacfc \uac12\uc774 \uc544\ub2c8\ub77c \ub2e4\uc591\ud55c \uacbd\uc6b0\ub97c \uacbd\ud5d8\ud558\uac8c \ud55c \uacb0\uacfc \uac12\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uacfc\uc815\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* \uc704\uc758 for \ub8e8\ud504\ub294 11 \uac00\uc9c0 \ubaa8\ub378\uc758 \uad50\ucc28 \uac80\uc99d \ub41c \uc810\uc218\ub97c list 'score'\ub85c \ub123\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc774 \ub370\uc774\ud130\ub97c \uba3c\uc800 \ud14c\uc774\ube14\ub85c \ub9cc\ub4e4\uace0 \uc774 \uadf8\ub798\ud504\ub97c \ud1b5\ud574 \uacb0\uacfc\ub97c \uc54c\uc544 \ubd05\ub2c8\ub2e4","cb601c9a":"#### Data Input\n* Since we are not going to do a lot here so let's use a simple one.\n* \uc5ec\uae30\uc11c\ub294 \ub300\ub2e8\ud55c \uac83\uc744 \ud560 \uac83\uc774 \uc544\ub2c8\ub77c \uc6d0\ub9ac\ub9cc \ubc30\uc6b0\ub2c8\uae4c \uac04\ub2e8\ud55c \uac83\uc73c\ub85c \ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","95f4c943":"### Bagging Classifier","64f52f9c":"#### \uac15\uc870 25\n*  while-else","01658f78":"#### \uac15\uc870 65\n*  qcut\uacfc cut\ucc28\uc774","37f375cf":"* What do you need to redefine what is in the child class with a method of the parent class? What you need is a \u201csuper\u201d. The word \"super\" brings up the elements of the parent class in the child class. We look at this in four steps. super is expressed in the form of super (subclass name, self), mother class function (parameter).\n* \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 \uac83\uc744 \ub2e4\uc2dc \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub85c \uc7ac\uc815\uc758 \ud558\ub824\uba74 \ubb50\uac00 \ud544\uc694\ud560\uae4c\uc694? \uc774\ub54c \ud544\uc694\ud55c \uac83\uc774 \u201csuper\u201d \uc785\ub2c8\ub2e4. \u201csuper\u201d \ub77c\ub294 \ub2e8\uc5b4\ub294 \uc790\uc2dd \ud2c0\ub798\uc2a4 \uc548\uc5d0\uc11c \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc694\uc18c\ub4e4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ub97c 4\ub2e8\uacc4\uc5d0 \uac78\uccd0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. super\ub294 super(\uc11c\ube0c\ud074\ub798\uc2a4\uba85, self).\ub9c8\ub354\ud074\ub798\uc2a4\ud568\uc218(\ud30c\ub77c\ubbf8\ud130) \ud615\uc2dd\uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n\n* Step 1\n* Let's just start with a mother class and suppose it cost about a dollar to go 10 miles.\n* mother class \ub9cc \uc788\ub294 \uac83\uc73c\ub85c \ud558\uace0 \uc138\ub2e8\uc774 10\ub9c8\uc77c\ub2f9 1\ub2ec\ub7ec\uc758 \uae30\ub984\uc744 \uc18c\ubaa8\ud558\ub294 \uac83\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","f79961d7":"#### \uac15\uc870 72\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","29f74be7":"### Task 5- Scatterplot","3c242c89":"## 2. \ud30c\uc77c \ubd84\ub9ac \ubc0f \ubcd1\ud569 (File Separations and Merges) \n\n* Secure the shape of ntrain and ntest. (Preparation for later splitting from the merged one)\n* y_train is a known result.\n* Separate the passenger ID of the test as it will be added to the final result later.\n* Merge train and test to create a file called data. When you convert a string to a number, or group numbers by interval, it is easier for us to put them together to do it all at once.\n* ntrain\uacfc ntest\uc758 shape\uc744 \ud655\ubcf4\ud574\ub193\uc2b5\ub2c8\ub2e4. (\ubcd1\ud569 \ud55c \uac83\uc744 \ub098\uc911\uc5d0 \ub2e4\uc2dc \uac08\ub77c \ub193\uae30 \uc704\ud55c \uc900\ube44)\n* y_train\uc740 \uc54c\ub824\uc9c4 \uacb0\uacfc \uac12\uc774\ub2c8 \ub530\ub85c \ubaa8\uc154 \ub193\uace0\n* \ud14c\uc2a4\ud2b8\uc758 \uc2b9\uac1d \uc544\uc774\ub514\ub294 \ub098\uc911\uc5d0 \ucd5c\uc885 \uacb0\uacfc\uc5d0 \ub123\uc744 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub5bc\uc5b4 \ub193\uc2b5\ub2c8\ub2e4.\n* train\uacfc test\ub97c \ubcd1\ud569\ud558\uc5ec data \ub780 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ubb38\uc790\ub85c \ub41c \uac83\uc744 \uc22b\uc790\ub85c \ubc14\uafbc\ub2e4\ub4e0\uac00.\uc22b\uc790\ub97c \uc778\ud130\ubc1c \ubcc4\ub85c \uadf8\ub8f9\ud654 \ud55c\ub2e4\ub4e0\uac00 \ud560 \ub54c \ud55c\uaebc\ubc88\uc5d0 \ud558\uae30 \uc704\ud574 \ud569\ud574 \ub193\uc2b5\ub2c8\ub2e4.","8e1a521c":"### Task 10 String Slicing","df2a7c04":"The code above calculates the percentage of male passengers (in **train.csv**) who survived.\n\nFrom this you can see that almost 75% of the women on board survived, whereas only 19% of the men lived to tell about it. Since gender seems to be such a strong indicator of survival, the submission file in **gender_submission.csv** is not a bad first guess, and it makes sense that it performed reasonably well!\n\nBut at the end of the day, this gender-based submission bases its predictions on only a single column.  As you can imagine, by considering multiple columns, we can discover more complex patterns that can potentially yield better-informed predictions.  Since it is quite difficult to consider several columns at once (or, it would take a long time to consider all possible patterns in many different columns simultaneously), we'll use machine learning to automate this for us.\n\n\uc704\uc758 \ucf54\ub4dc\ub294 \uc0dd\uc874 \ud55c \ub0a8\uc131 \uc2b9\uac1d (** train.csv **)\uc758 \ube44\uc728\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n\n\uc774\uac83\uc5d0\uc11c \ub2f9\uc2e0\uc740 \uc5ec\uc131\uc758 \uac70\uc758 75 %\uac00 \uc0b4\uc544\ub0a8\uc740 \ubc18\uba74, \ub0a8\uc790\ub294 19 %\ub9cc\uc774 \uc0b4\uc544\ub0a8\uc558\uc8e0. \uc131\ubcc4\uc774 \uc0dd\uc874\uc758 \uac15\ub825\ud55c \uc9c0\ud45c \uc778 \uac83\ucc98\ub7fc \ubcf4\uc774\ubbc0\ub85c ** gender_submission.csv **\uc758 \uc81c\ucd9c \ud30c\uc77c\uc740 \ub098\uc05c \ucd94\uce21\uc774 \uc544\ub2c8\uba70 \ud569\ub9ac\uc801\uc73c\ub85c \uc798 \uc218\ud589\ub418\uc5c8\ub2e4\ub294 \uac83\uc774 \ud569\ub9ac\uc801\uc785\ub2c8\ub2e4!\n\n\uadf8\ub7ec\ub098 \uc774 \uc131\ubcc4 \uae30\ubc18 \uc81c\ucd9c\uc740 \ub2e8\uc77c \uc5f4\uc5d0 \ub300\ud55c \uc608\uce21\uc744 \uae30\ubc18\uc73c\ub85c \ud569\ub2c8\ub2e4. \uc0c1\uc0c1\ud560 \uc218 \uc788\ub4ef\uc774 \uc5ec\ub7ec \uc5f4\uc744 \uace0\ub824\ud558\uba74 \ub354 \ub098\uc740 \uc815\ubcf4\ub97c \uc608\uce21\ud560 \uc218\uc788\ub294 \ub354 \ubcf5\uc7a1\ud55c \ud328\ud134\uc744 \ubc1c\uacac \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \ubc88\uc5d0 \uc5ec\ub7ec \uc5f4\uc744 \uace0\ub824\ud558\ub294 \uac83\uc740 \ub9e4\uc6b0 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 (\ub610\ub294 \uc5ec\ub7ec \ub2e4\ub978 \uc5f4\uc5d0\uc11c \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ud328\ud134\uc744 \ub3d9\uc2dc\uc5d0 \uace0\ub824\ud558\ub294 \ub370 \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ubbc0\ub85c) \uba38\uc2e0 \ub7ec\ub2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc774\ub97c \uc790\ub3d9\ud654\ud569\ub2c8\ub2e4.\n\n\n## Your first machine learning model\n\nWe'll build what's known as a **random forest model**.  This model is constructed of several \"trees\" (there are three trees in the picture below, but we'll construct 100!) that will individually consider each passenger's data and vote on whether the individual survived.  Then, the random forest model makes a democratic decision: the outcome with the most votes wins!\n\n\n**random forest model**\uc744 \uad6c\ucd95\ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub378\uc740 \uac01 \uc2b9\uac1d\uc758 \ub370\uc774\ud130\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \uace0\ub824\ud558\uace0 \uac1c\uc778\uc758 \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub300\ud574 \ud22c\ud45c \ud560 \uba87 \uac00\uc9c0 \"\ub098\ubb34\"(\uc544\ub798 \uadf8\ub9bc\uc5d0\ub294 3 \uac1c\uc758 \ub098\ubb34\uac00 \uc788\uc9c0\ub9cc 100 \uac1c\ub97c \ub9cc\ub4e4 \uac83\uc785\ub2c8\ub2e4)\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\uc740 \ubbfc\uc8fc\uc801\uc778 \uacb0\uc815\uc744 \ub0b4\ub9bd\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc740 \ud45c\ub97c \uc5bb\uc740 \uacb0\uacfc\uac00 \uc2b9\ub9ac\ud569\ub2c8\ub2e4!\n\n![](https:\/\/i.imgur.com\/AC9Bq63.png)\n\nThe code cell below looks for patterns in four different columns (**\"Pclass\"**, **\"Sex\"**, **\"SibSp\"**, and **\"Parch\"**) of the data.  It constructs the trees in the random forest model based on patterns in the **train.csv** file, before generating predictions for the passengers in **test.csv**.  The code also saves these new predictions in a CSV file **my_submission.csv**.\n\n\uc544\ub798\uc758 \ucf54\ub4dc \uc140\uc740 \ub370\uc774\ud130\uc758 \ub124 \uac00\uc9c0 \uc5f4 (** \"Pclass\"**, ** \"Sex\"**, ** \"SibSp\"** \ubc0f ** \"Parch\"**)\uc758 \ud328\ud134\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. ** test.csv **\uc5d0\uc11c \uc2b9\uac1d\uc5d0 \ub300\ud55c \uc608\uce21\uc744 \uc0dd\uc131\ud558\uae30 \uc804\uc5d0 ** train.csv ** \ud30c\uc77c\uc758 \ud328\ud134\uc744 \uae30\ubc18\uc73c\ub85c \uc784\uc758 \ud3ec\ub9ac\uc2a4\ud2b8 \ubaa8\ub378\uc5d0\uc11c \ud2b8\ub9ac\ub97c \uad6c\uc131\ud569\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub294 \uc774\ub7ec\ud55c \uc0c8\ub85c\uc6b4 \uc608\uce21\uc744 CSV \ud30c\uc77c ** my_submission.csv **\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\nCopy this code into your notebook, and run it in a new code cell.\n\n\uc774 \ucf54\ub4dc\ub97c \ub178\ud2b8\ubd81\uc5d0 \ubcf5\uc0ac\ud558\uc5ec \uc0c8 \ucf54\ub4dc \uc140\uc5d0\uc11c \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624.","a6f677d8":"* Let's make another version with 3 features involved. 3\uac1c \ud56d\ubaa9\uc73c\ub85c ","4d1bc4b0":"#### \uac15\uc870 16\n* items, keys, values\ub294 \ub9ce\uc774 \uc4f0\uc784","0a411989":"0 and below -> 0\n\n7.125 and below-> 5.0\n\n7.9 and below-> 7.5\n\n8.03 or less-> 8.0\n\nLess than 10.5-> 9.5\n\nLess than 23-> 16.0\n\n27.8 and below-> 25.5\n\n51 and below-> 38\n\n73.5 and below-> 62\n\nOver 73.5-> 100","0495a940":"### Task 29 Making a Class","28e510fb":"#### \uac15\uc870 20\n*  max, min, mean","534e5bed":"* Variables can be changed by updating.\n* The last assignment is the final value.\n* \ubcc0\uc218\ub294 \uc5c5\ub370\uc774\ud2b8\ud558\uc5ec \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc774 \ucd5c\uc885 \uac12\uc774 \ub429\ub2c8\ub2e4.","ba85b92d":"* Let's learn the reshape() method.\n* reshape() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n  \n* Sample\n  \n         a = np.array([[1,2,3],[4,5,6]]) # 2X3 array\n         print (a)\n\n         b = a.reshape((3,2))  # Cahnge it to 3X2 \/ 3X2\ub85c \ubcc0\uacbd\n         print (b)","497adeec":"### Task 21 for loop","aa2eb4bc":"* \ud30c\uc77c \uac01 \uc5f4\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nLet's take a look at the correlation of each column in the file.\n\nCo-relation \ub9e4\ud2b8\ub9ad\uc2a4\ub294 seaborn\uc5d0\uc11c \ubcc0\uc218 \uac04 \uc0c1\uad00 \uacc4\uc218\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud45c\uc785\ub2c8\ub2e4. \ud45c\uc758 \uac01 \uc140\uc740 \ub450 \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc0c1\uad00 \ub9e4\ud2b8\ub9ad\uc2a4\ub294 \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc785\ub825 \ubc0f \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc9c4\ub2e8\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc694\uc57d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ucc38\uace0: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n\nCo-relation matrix is a table showing the correlation coefficient between variables in seaborn. Each cell in the table shows a correlation between two variables. Correlation matrices are used to summarize data as input to advanced analysis and as diagnostics for advanced analysis. Note: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n\n\uc544\ub798 \ub9c8\uc2a4\ud06c \uc14b\uc5c5\uc740 0\ub85c \ud589\ub82c\uc744 \uc0c1\uad00 \ud589\ub82c\uacfc \uac19\uc740 \ubaa8\uc591\uc73c\ub85c \ub9cc\ub4e0 \ud6c4 \uc5ec\uae30\uc5d0 \ubd88\ub9ac\uc548 \uac12\uc744 \ub123\uace0 \uc774\ub97c \ub2e4\uc2dc True\ub9cc \ub9cc\ub4ed\ub2c8\ub2e4.\n\nThe mask setup below makes a matrix that looks like a correlation matrix with zeros, then puts a Boolean value into it and makes it true.\n\ntriu \ub294 \uc6b0\uce21 \uc0c1\ub2e8 \uc0bc\uac01\ud589\ub82c\uc744 \uc758\ubbf8\n\ntriu means upper right triangle\n\nannot= True\ub294 \uac01 \uc140\uc5d0 \uc22b\uc790\ub97c \ud45c\uc2dc\ud558\ub77c\ub294 \uac83\uc774\uace0, False\ub294 \ud558\uc9c0 \ub9d0\ub77c\ub294 \uac83\uc774\uad6c\uc694\n\nannot = True means to display a number in each cell, False means oppposite. https:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\n\n\uc774\uc5b4\uc11c \uc774\ub97c heatmap\uc73c\ub85c \ub7f0\uce6d\ud569\ub2c8\ub2e4.\n\nThen launch it as a heatmap.","ebd78685":"#### \uac15\uc870 7\n* \uc870\uac74\uc5d0\uc11c \uac19\ub2e4\ub294 == \n* rkxwl dksgeksms != \uc815\ub3c4\ub9cc \uae30\uc5b5 \ud558\uc2dc\uba74 \ub098\uba38\uc9c0\ub294 \uc0b0\uc218\uc640 \uac19\uc74c","16de4efe":"#### \uac15\uc870 53\n*  \ub77c\uc778\ud50c\ub86f","184612f6":"* if statement is to specify that if the condition is True, do something according to the following indented code.\n* else statement will do something different when the if condition is False.\n* if \ubb38\uc740 \uc870\uac74\uc774 \uc633\ub2e4\uba74 \ub2e4\uc74c\uc5d0 \uc624\ub294 \ub4e4\uc5ec \uc4f0\uae30 \ud55c \ucf54\ub4dc\uc5d0 \ub530\ub77c \ubb34\uc5b8\uac00\ub97c \ud558\ub77c\uace0 \uc9c0\uc815\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* else\ubb38 if \uc870\uac74\uc774 \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \ub54c \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud558\ub77c\uace0 \ud558\ub294 \ubb38\ubc95\uc785\ub2c8\ub2e4.\n\nSytnax\n\n        if condition:\n            body\n        else:\n            body","c91a58cb":"* \ud2f0\ucf13\uc5d0\uc11c \uc601\ubb38\uc788\ub294 \uac83\uacfc \uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc744 \ub530\ubd05\ub2c8\ub2e4.\n* See the tickets with letters or numbers only ","e177dee6":"### Task 7 - Jointplot","69ce5b61":"## \ub9c8\uc9c0\ub9c9 \ubaa8\ub378 \uc608\uce21","6b461ce8":"#### \uac15\uc870 80\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","5176d230":"### Task 26 def & Making a function","2df7f452":"### Adaboost.","086fde2f":"* Sorting\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Age\ub97c \uac00\uc9c0\uace0 \uc624\ub984\ucc28\uc21c, \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \ud574\ubd05\ub2c8\ub2e4.\n* Let's sort samples.\n* Take Age to ascending or descending order.","f641acf8":"#### \uac15\uc870 42\n*  3D array \uc778\ub371\uc2f1 \ud574\ubcf4\uae30","376000a7":"* \uc774\uc81c \uadf8\ub798\ud504\uc758 \ub77c\uc778\uc758 \uc2a4\ud0c0\uc77c\uc744 \uc124\uc815\ud574 \uc90d\ub2c8\ub2e4 \/ Let's change the styles of lines\n* linestyles = ['-', '--', '-.', ':']\n \n*   plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\n* \ucd94\uac00\uc801\uc778 \uc2a4\ud0c0\uc77c \uc815\ubcf4\ub294 \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694 Please check other style information below Line Style\n  \n        plt.xlabel('Year')\n        plt.ylabel('Quantity')\n        plt.xlim(2014,2020)\n        plt.ylim(0,5000)\n        cabbage = [4000, 4200, 3800, 3700, 4100]\n        radish = [2300, 2400, 2200, 2300, 2400]\n        year = [2015, 2016, 2017, 2018, 2019]\n        plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0, linestyle = '--')\n        plt.show","08f2cde4":"### Gaussian Naive Bayes - \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc774 \uc548 \ub418\ub294 \ubaa8\ub378\uc774\ub2c8 \uae30\uc874 \uc810\uc218 \uadf8\ub300\ub85c...","08713670":"* \uc774\uc81c Initial\uc744 \uc880 \uc815\ub9ac\ud569\ub2c8\ub2e4.","f5c05c74":"* Let's make a 2D array\n* it has double square brackets\n* [ [] ] \ub450 \uacb9\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694","094c7856":"#### \uac15\uc870 12\n* \uae38\uc774 \uad6c\ud558\uae30\n* \uc778\ub371\uc2f1\ud558\uae30\/ \uc2ac\ub77c\uc2f1\uc73c\ub85c \uc778\ub371\uc2f1 \ud558\uae30","73200b58":"### Task 25 - iterrows","2f42b5d1":"#### Groupby\n* \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \uba54\uc18c\ub4dc \uc911 \ud558\ub098\ub85c \ubb36\uc5b4\uc11c \uc791\uc5c5\uc744 \ud560 \ub54c \uc4f4\ub2e4.\n* one of the most commonly used methods when grouping data to see the results","422214e7":"* Parameter(\ub9e4\uac1c\ubcc0\uc218)\ub294 \ubcc0\uc218\ub85c function\uc758 input \uc5ed\ud560\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* \uadf8\ub9ac\uace0 Argument\ub294 \ud30c\ub77c\ubbf8\ud130\uc758 \uac12\uc73c\ub85c \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc785\ub825\ub418\ub294 \uac12\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n* Syntax\n\n            def functionname (parameter): # \ud30c\ub77c\ubbf8\ud130\ub97c \uc8fc\uace0 \ud568\uc218 \uc120\uc5b8 function declaration with a parameter \n                 Function Body # \uae30\ub2a5 \uc8fc\uae30 Assign a function to your function\n\n            functionname(argument)        # \ud638\ucd9c\ud574\uc11c \uae30\ub2a5 \uc0ac\uc6a9\ud558\uae30 Call your function with an argument to perform","cd3d768a":"#### \uac15\uc870 65\n*  \uc18c\ud305 \ud55c\ubc88 \uc529 \ud574\ubcf4\uae30","921680ed":"### CSV to DF\n\nimport modules -> import data -> turning data into data frame (pandas) \n\n* \uc774\uc5b4\uc11c \uc774\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc784\ud3ec\ud2b8\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc774 \ud310\ub2e4\uc2a4 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \uc784\ud3ec\ud2b8 \ub418\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n* Import the data into the dataframe so the dataset is converted as a pandas dataframe.","ba3f063a":"### Task 27 Parameters and Arguments","709537d1":"* As you see, they are between 0 and 1, we have to expand the. \ucd95\uc774 0\ubd80\ud130 1\uae4c\uc9c0\ub124\uc694. \ud655\uc7a5\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* x: 2014- 2020 x\ucd95\uc740 2014\ubd80\ud130 2020\uae4c\uc9c0\n* y: 0 - 5,0000 y\ucd95\uc740 0\ubd80\ud130 5\ucc9c\uae4c\uc9c0\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","12367476":"### Random Forest.","f5ff68c1":"### XGB Step 4","df7a0f19":"### Task 4 -  Changing Colors \/ \uc0c9\uae54 \ubc14\uafb8\uae30","6723d9d9":"### Task 3 - Boxplot","34ff3540":"#### \uac15\uc870 56\n*  \uc11c\ube0c \ud50c\ub86f \ub9cc\ub4e4\uae30 (\uc911\uc694)","846eb32b":"* %\ub294 3\ub4f1\uce78\uc774 \ubc18\uc774 \ub118\uc73c\ub098 \uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \uc0dd\uc874\uc790\ub294 1\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\ub960\uc744 \ubcfc\uae4c\uc694?\n* Let's look at the survival rate for each class?","09777f97":"#### \uac15\uc870 19\n*  randint","a3df74a5":"### 6.2 Adding Features\n\n* Some done above\n\n* \uadf8\ub798\ub3c4 \uba87 \uac1c \ub9cc\ub4e4\uc5b4 \ubcfc\uae4c\uc694? But why don't we try making some more\n\n* Priority - (1) Nobles (2) Women in Pclass 1 (3) Babies under 1 (4) Kids under 17 in Pclass 1 & 2  (5) Women in Pclass 3\n* FH - Female Higher Survival Group\n* MH - Male Higher Survival Group\n* FL - Female Lower Surival Group\n* ML - Male Lower Survival Group\n\n* And I will keep making new ones until all the data are either over 80% or le","ba9783b1":"#### \uac15\uc870 26\n*  break \uc911\ub2e8","af3c1041":"* List comprehension or LC makes it easy to create lists.\n* Useful for creating new lists from existing list or repeatable objects.\n* List comprehension \ub610\ub294 LC\ub294 \ub9ac\uc2a4\ud2b8\ub97c \uc27d\uac8c \uc0dd\uc131\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4.\n* \uae30\uc874 list \ub610\ub294 \ubc18\ubcf5 \uac00\ub2a5\ud55c \uac1d\uccb4\uc5d0\uc11c \uc0c8 list \ub97c \ub9cc\ub4e4 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4.\n\nSyntax.\n\n        newlist = [formula for elements in Sequence]\n        even_ten = [x * 2 for x in range(6)]\n        print (even_ten)\n\n\n        odd_ten = [x*2+1 for x in range(5)]\n        print (odd_ten)","80094abd":"## 6. Feature Engineering","c48825a3":"* To break out of a for or while loop, use the break statement. If you just want to skip the condition without exiting the loop, use the continue statement.\n* for \ub098 while loop \uc5d0\uc11c \ube60\uc838\ub098\uc624\ub824\uba74 break \ubb38\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. loop \ub97c \ube60\uc838\ub098\uc624\uc9c0 \uc54a\uace0 \ud574\ub2f9 \uc870\uac74\ub9cc \uac74\ub108\ub6f0\uace0 \uc2f6\uc744 \ub54c\ub294 continue \ubb38\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n* Break\n\n       i = 1\n\n      while i <= 10:\n          print (i)\n          if i == 4:\n              break\n          i += 1\n","be407b55":"\uc704\uc640 \uac19\uc774 4\uac1c\uac00 \uc0dd\uc131\ub418\uc5b4 \uc788\uc74c\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nYou can see 4 above, for them to be indexed it will be\n\n        0,0      0,1\n\n        1,0      1,1 \n\n\uc778\ub371\uc2f1 \uc704\uce58\ub294\n\n        0,0      0,1\n\n        1,0      1,1 \n        \ub77c\ub294 \uac83\uc744 \uc544\uc2e4 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n","7fb6868b":"* print ('I am ' + 55 + ' years old.') # will make an error because you cannot mix string and number\n* print ('I am ' + str(55) + ' years old.') #okay\n\n\n* We just learned how to mix a string and a number.\n* Now we will learn how to format it by inserting it.\n\n* string\uacfc number\ub97c \uc11e\uc5b4\uc11c \ucd9c\ub825\ud560 \ub54c \uc6b0\ub9ac\ub294 \uc22b\uc790\ub97c \uc2a4\ud2b8\ub9c1\ud654 \uc2dc\ucf1c\uc11c \ubb38\uc7a5\uc744 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n* \uc774\uc81c \uc774\ub97c \uc0bd\uc785\ud558\uc5ec \uc4f8 \uc218 \uc788\ub294 format \ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.","77132bb0":"# Making ML models \/ \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30","523d1975":"### Task 5 - concat","8566b0e6":"### Task 8 -  Methods for Statistics","be85084e":"* \ub2e4\uc2dc \ub9d0\uc500 \ub4dc\ub824\uc11c \ub808\uc774\ube14 \uc778\ucf54\ub529\uc740 \uc904\uc744 \uc138\uc6cc\uc11c \ubc88\ud638\ub97c \ubd80\uc5ec\ud558\ub294 \uac83\uc774\uace0, \uc6d0\ud56b\uc778\ucf54\ub529\uc740 \uae34\uac00 \uc544\ub2cc\uac00 \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4.\n* label encoding assign ordinal numbers while one hot encoding gives 1 or 0\n\n* For example 16 year old is number 5 and 17 year old is number 6 ..that's the way it is for the label encoding\n* \uc608\ub97c\ub4e4\uc5b4 \ub098\uc774\ubcc4\ub85c \uc904\uc744 \uc138\uc6cc \ub108\ub294 5\ubc88, \ub108\ub294 6\ubc88\uc774\ub7f0\uc2dd\uc774 \ub808\uc774\ube14 \uc778\ucf54\ub529\uc774\uace0\n\n* If you are 16 yes or no , 17 yes or no...that's one hot encoding\n* 16\uc0b4\uc774\uc57c? 1, 16\uc0b4 \uc544\ub0d0 0 ..\uadf8 \ub2e4\uc74c 17\uc0b4\uc774\uc57c? 1 17\uc0b4 \uc544\ub0d0 0 ..\uc774\ub7f0 \uc2dd\uc73c\ub77c \uc5f4\uc758 \uc218\uac00 \ubb34\uc9c0\ud558\uac8c \ub298\uc5b4\ub0a9\ub2c8\ub2e4.","e7df5b7e":"### Task 17 Import","bf18765f":"* \ub3c4\ubb34\uc9c0 \uac10\uc774 \uc548 \uc7a1\ud788\ub294 \ubc30\uc5f4\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \uc5c6\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n \n* It is an array that may not make any sense.\n* Let's see if there are any blanks.","2f4a71b4":"#### \uac15\uc870 1\n* '#'\uc744 \uc368\uc11c \ucf54\uba58\ud2b8\ub97c \ub123\uc2b5\ub2c8\ub2e4.\n* \ud504\ub9b0\ud2b8 \uad04\ud638 \uc78a\uc9c0 \ub9c8\uc2dc\uad6c\uc694\n* \uc2a4\ud2b8\ub9c1\uc5d0\ub294 \ub530\uc634\ud45c \uc78a\uc9c0 \ub9c8\uc138\uc694","b3fec4b9":"* Names of columns \/ \uc5f4 \uc774\ub984\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0fb9ea7e":"* Let's create a function that contains a conditional statement. Let's put an if \u2013 elif-else statement inside a function.\n* \uc870\uac74\ubb38\uc774 \ub4e4\uc5b4\uac00\ub294 function\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. if \u2013 elif - else \ubb38\uc744 \ud568\uc218 \uc548\uc5d0 \ub123\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Syntax\n\n        def functionname(parameters):\n            if condition:\n                return\n            elif condition:\n                return\n            else:\n                return\n\n        functionname(arguments)","fec27a36":"### Task 6 Methods","e06991d8":"#### \uac15\uc870 34\n*  override \uc2a4\ud15d \ubcc4\ub85c \ud558\uae30","b5add554":"* Since most of our work for Kaggle will be done with pandas and numpy will be pretty much hidden, we are going to go over very basics of numpy only.\n* \uc6b0\ub9ac\uac00 \uce90\uae00 \uc791\uc5c5\uc744 \ud560 \ub584\ub294 \ub118\ud30c\uc774\ub294 \uc0ac\uc2e4\uc0c1 \uc548 \ubcf4\uc774\uace0 \ud310\ub2e4\uc2a4\ub85c \uc791\uc5c5\uc744 \ud569\ub2c8\ub2e4. \ube44\ub85d \ub118\ud30c\uc774\uac00 \uc544\ub798\uc5d0\uc11c \ub2e4 \uc791\ub3d9\ud558\ub294 \uac83\uc774\uc9c0\ub9cc. \uadf8\ub798\uc11c \uc5ec\uae30\uc11c\ub294 \uc544\uc8fc \ubca0\uc774\uc9c1\ud55c \ub118\ud30c\uc774\ub9cc \ubcf4\uace0 \ub118\uc5b4 \uac00\uaca0\uc2b5\ub2c8\ub2e4.\n\n* NUMPY\n* Numpy\ub294 Python\uc758 \uacfc\ud559 \ucef4\ud4e8\ud305\uc744 \uc704\ud55c \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \uace0\uc131\ub2a5 \ub2e4\ucc28\uc6d0 \ubc30\uc5f4 \uac1d\uccb4\uc640 \uc774\ub7ec\ud55c \ubc30\uc5f4 \uc791\uc5c5\uc744\uc704\ud55c \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.\n* Numpy is the core library for scientific computation in Python. It provides high performance multidimensional array objects and tools for working with those arrays.\n\n\n* Arrays (\ubc30\uc5f4)\n* You might have learned matrices in mathematics or linear algebra.\n* When we make a list, we use a fairly long binary code, but Numpy uses less and saves a lot of resources.\n* Numpy also has elements that make things faster in terms of memory arrangements, which we won't talk about here.\n* Let's take a look at an example to understand.\n\n* \uc6b0\ub9b0 \uc218\ud559\uc5d0\uc11c \ud589\ub82c\uc744 \ubc30\uc6e0\uc744 \uac83\uc785\ub2c8\ub2e4.\n* \uc6b0\ub9ac\uac00 \ub9ac\uc2a4\ud2b8\ub97c \uc4f8 \ub54c \ubc14\uc774\ub108\ub9ac \ucf54\ub4dc\ub85c \uc0c1\ub2f9\ud788 \uae34 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294\ub370 Numpy\ub294 \uc801\uac8c \uc368\uc11c \uc790\uc6d0\uc744 \uc544\uaef4 \uc900\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4.\n* \ub610\ud55c \uba54\ubaa8\ub9ac\uc758 \ubc30\uc5f4 \uc801\uc778 \uba74\uc5d0\uc11c\ub3c4 \ub354 \ube60\ub974\uac8c \ud560 \uc218 \uc788\ub294 \uc694\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\ub294\ub370 \uc774 \uac83\uc740 \uc5ec\uae30\uc11c \uc774\uc57c\uae30 \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n* \uc77c\ub2e8 \uc608\ub97c \ubcf4\uba74\uc11c \uc774\ud574\ud574 \ubd05\ub2c8\ub2e4.","0a39fe07":"### Task 2 Variables","f1672b9c":"* Method\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub0b4\uc7a5\ub41c \uae30\ub2a5(\ud568\uc218)\uc774\ub77c\uace0 \uc774\ud574\ub97c \ud558\uba74 \ub429\ub2c8\ub2e4.\n\n        len()  - length\n        lower() - lower case\n        upper() - upper case","abd3ac4f":"#### \uac15\uc870 13\n* \uad50\uccb4 \uac00\ub2a5\n* \ub123\uace0 \ubcc0\ub3d9\ud558\uace0 \uac00\ub2a5","c56d9a23":"\uc774\ub97c \uc131\ubcc4\ub85c \ubd05\ub2c8\ub2e4.\nView it by gender.","c90b40ab":"Missingno is a chart that shows missing values intuitively.\nMissingno\ub294 \uc9c1\uad00\uc801\uc73c\ub85c \ube48\uce78\ub4e4\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","c21b1d19":"* \uc0dd\uc874 \uc22b\uc790\ub85c \ubd05\ub2c8\ub2e4.\n* by number","136240fb":"Syntax\n\n          bizcard.items()         # This one converts items in the dictionary to a form of list. \uc774 \uba54\uc368\ub4dc\ub294 dictionary \uc544\uc774\ud15c\ub4e4\uc744 list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.\n          bizcard.keys()          # This one converts keys in the dictionary to a form of list \uc774 \uba54\uc368\ub4dc\ub294 dictionary\uc758 key\ub97c  list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.\n          bizcard.values()        # This one converts values in the dictionary to a form of list.\uc774 \uba54\uc368\ub4dc\ub294 dictionary\uc758 value\ub97c  list \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\ud574 \uc900\ub2e4.","b3163d37":"* Step 3\n\n* Finally we override the method.\n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc624\ubc84\ub77c\uc774\ub529 \ud574\ubd05\ub2c8\ub2e4.","deb69729":"\uc5ec\uae30\uc5d0 \ub0b4\uc6a9\uc744 \ub123\uc5b4 \ubcf8\ub2e4.\n\nLet us put some numbers in there.","2d36f5fb":"#### \uac15\uc870 78\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","9434a2ce":"Make sure that your notebook outputs the same message above (`Your submission was successfully saved!`) before moving on.\n\n\n\uacc4\uc18d \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 \ub178\ud2b8\ubd81\uc774 \uc704\uc640 \ub3d9\uc77c\ud55c \uba54\uc2dc\uc9c0 ( `Your submission was successfully saved!`)\ub97c \ucd9c\ub825\ud558\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624.\n\n> Again, don't worry if this code doesn't make sense to you!  For now, we'll focus on how to generate and submit predictions.\n> \uc774 \ucf54\ub4dc\uac00 \uc774\ud574\uac00\ub418\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624! \uc9c0\uae08\uc740 \uc608\uce21\uc744 \uc0dd\uc131\ud558\uace0 \uc81c\ucd9c\ud558\ub294 \ubc29\ubc95\uc5d0 \uc911\uc810\uc744 \ub458 \uac83\uc785\ub2c8\ub2e4.\n\nOnce you're ready, click on the blue **\"Commit\"** button in the top right corner of your notebook.\n\uc900\ube44\uac00\ub418\uba74 \ub178\ud2b8\ubd81 \uc624\ub978\ucabd \uc0c1\ub2e8\uc5d0\uc788\ub294 \ud30c\ub780\uc0c9 ** \"\ucee4\ubc0b\"** \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624.\n\n- This will generate a pop-up window.\n- \ud31d\uc5c5 \ucc3d\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4.\n- After the code finishes running, you'll notice a blue **\"Open Version\"** button in the top right of the pop-up window.  Click on this button, which will open a new window.\n-\ucf54\ub4dc \uc2e4\ud589\uc774 \uc644\ub8cc\ub418\uba74 \ud31d\uc5c5 \ucc3d\uc758 \uc624\ub978\ucabd \uc0c1\ub2e8\uc5d0 \ud30c\ub780\uc0c9 ** \"Open Version\"** \ub2e8\ucd94\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.\n- Inside this new window, click on the **Output** tab on the left of the screen.  Then, click on the **\"Submit to Competition\"** button to submit your results.\n-\uc774 \uc0c8 \ucc3d\uc5d0\uc11c \ud654\uba74 \uc67c\ucabd\uc758 **Output** \ud0ed\uc744 \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7f0 \ub2e4\uc74c **\"Submit to Competition\"** \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uc5ec \uacb0\uacfc\ub97c \uc81c\ucd9c\ud558\uc2ed\uc2dc\uc624.\n\n![](https:\/\/i.imgur.com\/1TgG2hz.png)\n\nOnce your file is successfully submitted, you should receive a message saying that you've moved up the leaderboard.  Great work!\n\ud30c\uc77c\uc774 \uc131\uacf5\uc801\uc73c\ub85c \uc81c\ucd9c\ub418\uba74 \ub9ac\ub354 \ubcf4\ub4dc\ub85c \uc774\ub3d9\ud588\ub2e4\ub294 \uba54\uc2dc\uc9c0\uac00 \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc798 \ud558\uc168\uc2b5\ub2c8\ub2e4.","ee1dbcb1":"## Working with Label Encoded One First","473e58c4":"### Task 20 If-elif-else","1cd4151f":"* \uc774\uc81c\ub294 \ud074\ub798\uc2a4 \ub0b4\uc5d0 \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e4\uace0 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc95\uc744 \ubc30\uc6cc \ubd05\ub2c8\ub2e4. \uba54\uc18c\ub4dc\ub294 \ud074\ub798\uc2a4 \ub0b4\uc5d0 \ub0b4\uc7a5\ub41c \ud568\uc218 \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \ub54c \uba54\uc18c\ub4dc\ub3c4 \uac19\uc774 \ub9cc\ub4e4\uace0 \uc774\ub97c \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Now let's learn how to create methods within classes and use them. A method is like a function built into a class. When we create a class, we will also create a method and should be able to use it.","cec5eb13":"* Learn the np.copy() method.\n* Learn the np.eye() method (the same as identity matrix)\n* Learn the np.empty() method.\n* Learn the np.like() method.\n \n* np.copy() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n \n* np.eye() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4 (identity matrix\uc640 \uac19\uc74c)\n* np.empty() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* np.like() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.","7c5f03cd":"* barplot\uc740 \uac01 \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uac00\uc9c4 \uc22b\uc790 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc911\uc2ec \uacbd\ud5a5\uc758 \ucd94\uc815\uce58\ub97c \ub098\ud0c0\ub0b4\uba70 \uc624\ucc28 \ub9c9\ub300(\uae4c\ub9cc \uc904 \uac19\uc774 \uc0dd\uae34 \uac83)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \ucd94\uc815\uce58 \uc8fc\ubcc0\uc758 \ubd88\ud655\uc2e4\uc131\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* barplot is an estimate of the central tendency for a numeric variable with the height of each rectangle, and an error bar (like a black line) is used to represent the uncertainty around that estimate.","e3fd413b":"\n        maker = \"Mercedes\"\n        year = str(2020)\n        month = \"June\"\n\n        print (len(maker))\n        print (maker.lower())\n        print (maker.upper())\n        print (month + \" \" + year)\n        \n        -------------------------\n        \n        \n        8\n        mercedes\n        MERCEDES\n        June 2020\n\n\n\n* Not like len(variable), upper or lower display variable.lower() form.\n* The len() method just ask for an information of the length while lower and upper performs a function.\n* It is called \"Dot Notation\"\n* Yoor will see more of these forms later.\n* len\uacfc \ub2ec\ub9ac upper or lower\ub294 \ub2e4\ub978 \ud615\ud0dc\ub97c \ubcf4\uc785\ub2c8\ub2e4. \uc774\ub97c dot notaion\uc774\ub77c \ud558\uad6c\uc694 \ub098\uc911\uc5d0 \ub354 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n* len () \uba54\uc18c\ub4dc\ub294 \uae38\uc774 \"\uc815\ubcf4\"\ub9cc\ub97c \uc694\uccad\ud558\ub294 \ubc18\uba74 lower \ubc0f upper\ub294 \uc5b4\ub5a0 \uae30\ub2a5\ub97c \uc218\ud589\ud55c\ub2e4\ub294 \uac1c\ub150\uc774\ub77c\ub294 \uac83\uc744 \uc77c\ub2e8 \uc0dd\uac01\ud558\uc2dc\uace0 \ub118\uc5b4 \uac00\uc9c0\uc694.\n* \uc911\uc694\ud55c \uac83\uc740 dot notation\uc740 \ubd99\uc5ec \uac08 \uc218 \uc788\ub2e4\ub294 \uc0ac\uc2e4","0f636ff4":"### Task 3 - Indexing","6345abef":"* \uc0ac\ud68c\ub294 \ubd88\uacf5\ud3c9 \ud588\uc73c\ub098 \ucd5c\uc18c\ud55c \ub0a8\uc790\ub4e4\uc758 \uc2e0\uc0ac\ub3c4\ub294 \uc788\uc5c8\ub2e4\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* The society was unfair but gentlemenship worked there.","7af4ee52":"* Just like numpy, matplolib will be hidden mostly under seaborn which we will use more for a Kaggle note, so we will go over the basic concepts of matplotlib only here.\n* matplotlib\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc6b0\ub9ac\uac00 \uce90\uae00\uc5d0\uc11c \uc4f8 \uac83\uc740 seaborn\uc774\uba70, matplotlib\ub3c4 \uc77c\ubd80 \uc4f0\uc774\ub098 \ub300\ubd80\ubd84 \uc228\uaca8\uc838 \uc788\uc5b4\uc11c \uc5ec\uae30\uc11c\ub294 \uae30\ubcf8 \uac1c\ub150\ub9cc \ub2e4\ub8f9\ub2c8\ub2e4.\n* Matplotlib\ub294 Python 2D \ud50c\ub85c\ud305 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Matplotlib\uc740 Python \uc2a4\ud06c\ub9bd\ud2b8, Python \ubc0f IPython \uc258, Jupyter \ub178\ud2b8\ubd81 \ub4f1\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n#### import\n* matplotlib.pyplotlib\uc744 plt\ub85c\uc368 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4\n* %matplotlib inline\uc740 \uadf8\ub798\ud504\ub97c \ubcf4\uae30 \uc704\ud55c \uba85\ub839\uc5b4\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n        import - import matplotlib.pyplotlib as plt\n\n        % matplotlib inline  # can be thought of as a command for viewing graphs.","d61dee64":"### 1\ub2e8\uacc4 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n* \uc790 \uc774\uc81c\ub294 11\uac1c\uc758 classifier\ub85c \ubaa8\ub378\uc744 \ub3cc\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","d2528f7a":"* Let's practice 3X3 arrays\n* 3D array\ub97c \uc5f0\uc2b5\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* Syntax\n\n      import numpy as np\n      var = np.array([[item111, item112.....], [item121, item122....]], [item211, item112.....], [item221, item122....]]])\n\n* It has a tripple square brackets [[[ ]]]","d707f52a":"* Pclass1\uc758 \uc2b9\uac1d \uc694\uae08\uc5d0\ub294 \ud070 \ubd84\ud3ec\uac00\uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uba70 \ubd88\uc5f0\uc18d \uac12\uc73c\ub85c \ubcc0\ud658 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* The passenger fare for Pclass1 seems to have a large distribution and can be converted to discrete values.\n\n* Fare\ub97c \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4.\n* qcut\uc744 \ud65c\uc6a9\ud558\uba74 \uc6d0\ud558\ub294 \uc870\uac01\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4.\n \n* I will divide the Fare into groups.\n* Use qcut to divide the data into the desired pieces.","4aabede8":"* \uc0c9\uc0c1\uacfc \ub9c8\ucee4\ub97c \ubaa8\ub450 \ubcc0\uacbd\ud558\uc5ec \uadf8\ub8f9\ud654 \ubcc0\uc218\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n* Change both color and marker to show grouping variables.","a64c3ee2":"#### \uac15\uc870 32\n*  \uba54\uc18c\ub4dc \ub9cc\ub4e4\uae30\uc640 \ud638\ucd9c\ud560 \ub54c\uc758 \ub2f7 \ub178\ud14c\uc774\uc158 \uc0ac\uc6a9 \uc124\uba85","b71fb6c3":" filter() function.\n\n    list(filter(lambda x: 3<x < 5, range(6)))","d35cf55b":"### Task 22 - apply","249eb38c":"#### \uac15\uc870 8\n* 0\uc5d0\uc11c \uc2dc\uc791\ud55c\ub2e4\ub294 \uc0ac\uc2e4 \uc78a\uc9c0 \ub9c8\uc138\uc694","62e7f27e":"#### \uac15\uc870 67\n*   replace \ud55c\ubc88 \ud574\ubcf4\uae30","e8e78911":"* \"import\" allows you to call a ready-made module and use it. We learned about functions. Let's learn to call a ready-made-module.\n\n* Sytnax\n\n        from random import randint\n","d8d21128":"### Task 25 Continue","0811ce85":"## 3. Check the files \/ \ud30c\uc77c\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","de325ce9":"### Task 18 - rename","cf07f4ad":"* Age\ub294 \uadf8\ub8f9\ud654 \uc2dc\ud0a4\uba74 \uc88b\uc73c\ub098 \ud559\uc2b5\uc744 \uc704\ud574\uc11c \uadf8\ub0e5 \ub193\uc544\ub450\uace0, \uadf8\ub8f9\ud654 \uc5f0\uc2b5\uc740 Fare\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* Age should be grouped, but we are focusing on practices not on competition itself, we will just let it be as is and group \"fare\" later on. ","c96c59b2":"#### Family or Alone?\n* \"SibSp\" + \"Parch\" \ubd84\uc11d\n \n* SibSp - \uc774 \ud56d\ubaa9\uc740 \ud0d1\uc2b9\uc790\uac00 \ud63c\uc790\uc778\uc9c0 \ub610\ub294 \uac00\uc871\uacfc \ud568\uaed8 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n* *Sibling = \ud615\uc81c, \uc790\ub9e4, \uc758\ubd93 \ud615\uc81c, \uc774\ubcf5 \ub204\uc774\n \n* Spouse = \ub0a8\ud3b8, \uc544\ub0b4\n \n* Parch\ub294 \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d4\ub294\uc9c0\ub97c \ubd05\ub2c8\ub2e4.\n \n* \uc774 \uadf8\ub8f9 \ub458\uc744 'Alone\"\uadf8\ub8f9\uacfc \"Family'\uadf8\ub8f9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.\n \n#### Family or Alone?\n* \"SibSp\" + \"Parch\" analysis\n \n* SibSp-This item indicates whether the occupant is alone or with a family.\n \n* Sibling = brother, sister, stepbrother, half sister\n \n* Spouse = husband, wife\n \n* Parch sees if she rode with her parents.\n \n* Divide these two groups into 'Alone' and 'Family' groups.","565a0e97":"### Task 10- Stacking","a5d61113":"* tupple\uc774\ub780 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc758 \uc9d1\ud569\uc73c\ub85c \ubcc0\uacbd\ub418\uc9c0 \ubabb \ud55c\ub2e4\ub294 \ud2b9\uc131 \ub54c\ubb38\uc5d0 \uba54\uc18c\ub4dc\uac00 \ubcc4\ub85c \uc5c6\uc2b5\ub2c8\ub2e4. tupple\uc740 \uc18c\uad04\ud638 ( )\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n* Tupple does not have many methods since tupple cannot be modified.\n* \n* Then why would we use a tupple?\n* \n* A tupple uses less storage.\n* A tupple is used when we do not want any data to be changed accidentally.\n* A tupple can be used as a key of a dictionary\n* ( ) is used to represent a tupple\n* If we make a variable \u201ca\u201d and say a = (5), it has an integer value, but what if I want to make tupple \u201ca\u201d with the same value? Then we use a comma to say it is a tupple. a = (5, )\n* \uadf8\ub7fc \uc65c tupple\uc744 \uc0ac\uc6a9\ud560\uae4c\uc694? \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* tupple\uc740 \uc800\uc7a5 \uacf5\uac04\uc744 \uc801\uac8c \uc4f4\ub2e4.\n* tupple\uc740 \uc6b0\ub9ac\uac00 \uc6b0\uc5f0\ud558\uac8c \ub610\ub294 \uc2e4\uc218\ub85c \ub370\uc774\ud130\ub97c \ubc14\uafb8\uc5b4\uc11c\ub294 \uc548 \ub418\ub294 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4.\n* \ub354\ud558\uc5ec \ud569\ud560 \uc218 \uc788\uace0 \uacf1\ud558\uc5ec \ubc18\ubcf5\uc774 \uac00\ub2a5\ud558\ub2e4.\n* \ud29c\ud50c\uc5d0 \uc6d0\uc18c\uac00 \ud558\ub098\uc778 \uacbd\uc6b0 integer\ub85c \uc624\uc778\ud560 \uc218 \uc788\uc5b4 (5,) \uc2dd\uc73c\ub85c \ud45c\uae30\ud568","33c44e4c":"* \uadf8\ub9ac\uace0 Initial \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ubcf4\uace0 Age\uc5d0 \uc801\uc6a9 \uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* And it is better to see the average age by Initial and apply it to Age.","002d44c7":"#### \"Ticket\"\ubd84\uc11d\n* Ticket\uc758 \ud615\ud0dc\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's look at the numbers of the ticket.","04cfdde3":"* Create an arry with a random number.\n* \ub79c\ub364 \uc22b\uc790\ub85c \ub41c array\ub97c \uc0dd\uc131\ud574 \ubcf8\ub2e4.\n\n* Syntax\n\n        np.random.rand(shape) #float np.random.randint(shape) #integer\n\nsample\n\n          # 3X3 random float\n           np.random.rand(3,3)\n          # 3X3 random integer\n           np.random.randint(min number, max number-1, size =(3,3))","b679cd46":"### Task 3 Indexing","4ad48a05":"* Let the sub class inherit the mother (or parent) class\n* \uc774\uc5b4\uc11c \uc624\ubc84\ub77c\uc774\ub529 \ud558\uc9c0 \uc54a\uace0 inheritance \ub9cc \ud558\ub294 \uacbd\uc6b0\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4","5ef69cd5":"### Task 9 String Indexing","2a8789c4":"#### \uac15\uc870 14\n* dictionary\ub294 \uc0ac\uc804\uc774\ub098 \uba85\ud568 \uac19\uc740 \uac1c\ub150\n* key \uc911\ubcf5\uc740 \uc548 \ub428","d73f1032":"### Task 1 -  Making Axis and Entering Labels ","e683b16e":"#### \uac15\uc870 58\n*  \uc81c\ubaa9 \ub123\uae30","20441f0c":"#### \uac15\uc870 79\n*   \ub2e8\uacc4\ubcc4\ub85c \ud574\ubcf4\uae30","859acfaa":"### Task 14 Dictionary","f6e61436":"#### \uac15\uc870 60\n*  \ubbf8\uc2f1\ub178 \uacbd\ud5d8\ud574\ubcf4\uae30","31447d60":"# Titanic Challenge","4c73cdc0":"### Task 16 Tuple","7b1e8e05":"#### \uad00\ucc30 :\n\n1) Pclass\uc5d0 \ub530\ub77c \uc5b4\ub9b0\uc774 \uc218\uac00 \uc99d\uac00\ud558\uace0 10 \uc138 \ubbf8\ub9cc\uc758 \uc5b4\ub9b0\uc774 (\uc989, \uc5b4\ub9b0\uc774)\uc758 \uc0dd\uc874\uc728\uc740 Pclass\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc591\ud638\ud574 \ubcf4\uc785\ub2c8\ub2e4.\n\n2) Pclass1\uc5d0\uc11c 20-50\uc138\uc758 Passeneger\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub192\uace0 \uc5ec\uc131\uc5d0\uac8c\ub294 \ub354 \uc88b\uc2b5\ub2c8\ub2e4.\n\n3) \ub0a8\uc131\uc758 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc740 \ub098\uc774\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac10\uc18c\ud569\ub2c8\ub2e4.\n\n#### observation :\n\n1) The number of children increases with Pclass, and the survival rate for children under 10 years old (i.e. children) looks good regardless of Pclass.\n\n2) Passeneger, 20-50 years old, in Pclass1 has a higher chance of survival and is better for women.\n\n3) In men, the probability of survival decreases with age.\n\n\uc6b0\uc120 age\uc758 \ube48\uce78 \ubd80\ud130 \ud574\uacb0 \ud569\ub2c8\ub2e4.\n\nFirst, resolve the issue of null values of age.\n\n\uc55e\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uac83\ucc98\ub7fc Age \ud56d\ubaa9\uc5d0\ub294 177 null \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c NaN \uac12\uc744 \ub300\uccb4\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc9d1\ud569\uc758 \ud3c9\uade0 \uc218\uba85\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uadf8\ub7ec\ub098 \ubb38\uc81c\ub294 \ud3c9\uade0 \uc5f0\ub839\uc774 29 \uc138\ub97c 4\uc138 \uc544\uc774\uc5d0\uac8c \ud560\ub2f9 \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc2b9\uac1d\uc774 \uc5b4\ub5a4 \uc5f0\ub839\ub300\uc5d0 \uc788\ub294\uc9c0 \uc54c \uc218\uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc744\uae4c\uc694? \uc774\ub984\uc5d0\uc11c \ud78c\ud2b8\ub97c \ucc3e\uc544 \ubd05\ub2c8\ub2e4.\n\nAs we saw earlier, the Age item has a 177 null values. To replace these NaN values, you can specify the average age of the dataset.\n\nBut the problem is that the average age is 29 years old can not be assigned this to a kid. Is there any other way ? Look for some hints in their names.","5ba92d20":"### \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","0bbe585c":"### Task 10 -  Missingno","7e342598":"#### \uac15\uc870 59\n*  \ud30c\uc774\ucc28\ud2b8 \ub9cc\ub4e4\uc5b4 \ubcf4\uae30","ee4a6036":"### XGB Step 5","c4a00017":"#### Matrix\n* Let's take a look at the basics of matrix.\n* \ud589\ub82c\uc758 \uae30\ucd08\uc801\uc778 \ub0b4\uc6a9\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* As you know myarray1 looks lie the below\n\n* \ud589\ub82c myarray1\uc774 \ub2e4\uc74c\uacfc \uac19\uace0\n\n      1.1.1\n\n      1.1,1\n\n* And myarray 2 is like below\n\n* myarray2\uac00 \ub2e4\uc74c\uacfc \uac19\ub2e4\uba74\n\n      3,3 3,3 3,3\n\n* if you multiply myarray1 X myarray 2, you have to multiply \u3131 shape. my array1 X my array 2 \ud589\ub82c\uc744 \uacf1\ud558\uba74 \u3131 \uc790 \ubaa8\uc591\uc73c\ub85c \ud558\uc8e0\n\n* Therefore, the number of columns in the first and the number of rows in the second must be the same. \ub530\ub77c\uc11c \uccab \ubc88\uc9f8 \uac83\uc758 \uc5f4\uc218\uc640 \ub450\ubc88\uc9f8 \uac83\uc758 \ud589\uc218\uac00 \uac19\uc544\uc57c \ud569\ub2c8\ub2e4.\n\n* Also if you directly multiply myarray1 * myarray2, it will cause an error.\n* myarray1 * myarray2 \ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4.\n\n* So we have to use the matrix multiplication method - np.matmul(myarray1,myarray2)\n\n* matrix multiplication method\ub97c \uc368\uc11c np.matmul(myarray1,myarray2)\ub85c \ud558\uba74 \uacf1\ud574 \uc9d1\ub2c8\ub2e4.","6276c9b5":"#### \uac15\uc870 24\n*  while simple \uc608\uc81c","0bbf4532":"This shows us where the competition data is stored, so that we can load the files into the notebook.  We'll do that next.\n\uc774\uac83\uc740 \ub370\uc774\ud130\uac00 \uc800\uc7a5\ub41c \uc704\uce58\ub97c \ubcf4\uc5ec \uc8fc\ubbc0\ub85c \ud30c\uc77c\uc744 \ub178\ud2b8\ubd81\uc5d0 \ub85c\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc5d0 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n## Load the data\n\nThe second code cell in your notebook now appears below the three lines of output with the file locations.\n\ub178\ud2b8\ubd81\uc758 \ub450 \ubc88\uc9f8 \ucf54\ub4dc \uc140\uc774 \uc774\uc81c \ud30c\uc77c \uc704\uce58\uc640 \ud568\uaed8 \uc138 \uc904\uc758 \ucd9c\ub825 \uc544\ub798\uc5d0 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.\n\n![](https:\/\/i.imgur.com\/OQBax9n.png)\n\nType the two lines of code below into your second code cell.  Then, once you're done, either click on the blue play button, or hit **[Shift] + [Enter]**.  \n\uc544\ub798 \ub450 \uc904\uc758 \ucf54\ub4dc\ub97c \ub450 \ubc88\uc9f8 \ucf54\ub4dc \uc140\uc5d0 \uc785\ub825\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7f0 \ub2e4\uc74c \ud30c\ub780\uc0c9 \uc7ac\uc0dd \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uac70\ub098 ** [Shift] + [Enter] **\ub97c \ub204\ub974\uc2ed\uc2dc\uc624.","42196a0e":"* Method overriding is redefining methods of a parent class in a child class. For example, there are times when a particular method has a specific function in the characteristics of a parent class, but in a child class everything else is the same, but this one needs to be different. This is when overriding is needed.\n* Method overriding \uc740 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub97c \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0\uc11c \ub2e4\uc2dc \uc815\uc758 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \ud2b9\uc9d5\uc5d0\uc11c \ud2b9\uc815 \uba54\uc18c\ub4dc\uac00 \ud2b9\uc815\ud55c \uae30\ub2a5\uc744 \ud558\ub294\ub370 \uc790\uc2dd \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 \ub2e4\ub978 \uac83\uc740 \ub2e4 \uac19\uc73c\ub098 \uc774 \uac83\ub9cc\uc740 \ub2ec\ub77c\uc57c \ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ub54c overriding \uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n* Step 1\n\n* In the example below, create a class called Car and use gasoline for fuel.\n* In sub class Ecar, it is an electric car, so let's override fuel with electricity.\n* First, Let's start with the mother class only.\n\n* \uc544\ub798\uc5d0\uc11c\ub294 Car \ub780 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0 gasoline \uc744 \ub123\ub294\ub2e4\ub294 \uac83\uc73c\ub85c mother class \uc5d0 \uc815\ud574\uc8fc\uace0\n* sub class Ecar \uc5d0\uc11c\ub294 \uc804\uae30\ucc28 \uc774\ubbc0\ub85c electricity \ub97c \ub123\ub294\ub2e4\ub294 \uac83\uc73c\ub85c \uc624\ubc84\ub77c\uc774\ub529 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc6b0\uc120 mother class \ub9cc \uc788\ub294 \uacbd\uc6b0\ub97c \ubd05\ub2c8\ub2e4.","268ac47c":" ### Task 3 - Scattered Chart \/ Scattered Chart \ub9cc\ub4e4\uae30","883ca40f":"# Now it is time to actually work on this. \uc790 \uc774\uc81c \uc9c4\uc9dc\ub85c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* I will explain basic python, numpy, pandas, matplotlib, & seaborn before doing this as if you have not learned any.\n* \uc804\ud600 \uc548 \ubc30\uc6b0\uc168\ub2e4\uace0 \uc0dd\uac01\ud558\uace0 \uae30\ubcf8 python, numpy, pandas, matplotlib, seaborn \uc5d0 \ub300\ud574 \uac04\ub2e8\ud788 \uc124\uba85\ud558\uba74\uc11c \ub118\uc5b4 \uac00\uaca0\uc2b5\ub2c8\ub2e4.\n\n![](https:\/\/1.bp.blogspot.com\/-9UO_LQxtCoo\/XiVlm79ZLdI\/AAAAAAAAKtM\/ccNY90f-ov4HFNxgwoS80JU9q5Rrv4lpgCLcBGAsYHQ\/s320\/ML.png)\n\n\n","8624043d":"### Gaussian Process","dac0432e":"Syntax\n\n    int(\uc22b\uc790)   # \uc815\uc218\ub85c \ud45c\ud604\ub41c\ub2e4\n    float(\uc22b\uc790) # \uc2e4\uc218\ub85c \ud45c\ud604\ub41c\ub2e4\n    str(\uc22b\uc790)   # \ubcf4\uc774\uae30\ub294 \uc22b\uc790\ub85c \ubcf4\uc774\uc9c0\ub9cc \ubb38\uc790\ub85c \uc778\uc2dd\ub41c\ub2e4.\n\n\n    int (number) # numbers without sub digits 1, 3, 100\n    float (number) # numsers with sub digits  1.0, 5.0  3.14\n    str (number) # Lokks like numbers but they are characters ...think of them as numbers on the athlets' uniform","11b0e771":"* x\ucd95 \uc5f0\ub3c4 \ubaa8\uc591\uc774 \ub2e4\ub974\ub2c8 \ub2e4\uc2dc \uc190\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Tick \uc744 \ucc3e\uace0 \ud3ec\ub9f7\ud558\ub294\ub370 \ud544\uc694 \ubaa8\ub4c8\uc744 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4.\n \n* The x-axis year shape is different, so let's try again.\n \n* Import the modules needed to find and format the tick.","618d6a84":"* \ubd88\ud589\ud788\ub3c4 \uc0ac\ub9dd\uc790\uac00 \ud6e8\uc52c \ub9ce\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc804\uccb4 \uc0ac\ub9dd\uc790 \ube44\uc728\uc744 \uc880 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n \n* Unfortunately, there are more deaths than \"survived\".\n \n* Let's take a look at the overall rate.\n* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n \n* Draw a pie chart and count plot in the subplot parts.\n \n* Two rows and one column. Size : 15 inches wide by 6 inches high\n* Create a pieplot by counting the value of 'Survived'.\n* Explode means \"protrusion\", so if it's 1, it's popping out. 0 and 1 means that the second one is poping out.\n* Autopercent means 1.1 shows up to one decimal place. If there is 4 after the dot, both show up to four decimal places.\n* ax [0] is the first cell.\n* The set_title method displays the title of the subplot.","a0d00c83":"### Task 19 - Slicing to make a new DF","2b9432f2":"#### \uac15\uc870 2\n* \ubcc0\uc218\ub294 \ubb38\uc790, \uc22b\uc790, \ud568\uc218, \ucc38\uac70\uc9d3 \ubaa8\ub450 \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798 \uc778\ud48b\uc740 \ucf54\ub4dc \ubc16\uc5d0\uc11c \ub2f5\uc744 \ub123\uc5b4\uc57c \ud558\ub294 \ub0b4\uc7a5 \ud568\uc218\uc774\uace0 '\uba54\uc18c\ub4dc'\ub77c \ubd80\ub985\ub2c8\ub2e4.","4e0f40f9":"#### \uac15\uc870 10\n* \uc22b\uc790 + \uc2a4\ud2b8\ub9c1 \ud504\ub9b0\ud2b8 \uc548 \ub428\n* \uc22b\uc790\uc5d0 str() \uc50c\uc6cc \uc8fc\ub358\uc9c0 \uc544\ub798\uc640 \uac19\uc774 \ud3ec\ub9e4\ud305 \ud574\uc57c\ud568","4751bb94":"* \ub300\ud45c\uc801\uc778 \uc778\ucf54\ub529\uc5d0 Label Encoding\uc774 \uc788\ub294\ub370 \uc774\ub294 \uac01 \ud56d\ubaa9\uc758 \uac12\uc744 \uc11c\uc5f4\ud654 \uc2dc\ucf1c \uc8fc~\uc6b1 \uc904\uc138\uc6b4 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* \uadf8 \uc678\uc5d0 \uc790\uc8fc\uc4f0\ub294 One Hot Encoding \uac19\uc740 \uacbd\uc6b0 \uc5f4 \ub0b4\uc5d0\uc11c\uc758 \ud56d\ubaa9\uc744 \ub098\ub204\uc5b4\uc11c (\uc5f4\uc774 \uc8fc~\uc6b1 \ub298\uc5b4\ub098\uba70) \uc774\ub97c 0\uc774\ub0d0 1\uc774\ub0d0\ub85c \uad6c\ubd84\ud574 \ub193\uc740 \uac83\uc785\ub2c8\ub2e4.\n* A typical encoding is Label Encoding, which can be considered to be a very good order of the values of each item.\n* In addition, the one-of-a-kind One Hot Encoding is divided into 0 or 1 by dividing the items in the column (they increase in number).","cd90d605":"# 5. 10 Things to Learn - Seaborn","40058682":"## \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","c0ab8324":"* Indexing items\n* It is no different from the list.\n* As you know, the positions are in order of 0,1,2,3,4, .....\n* \uc544\uc774\ud15c\uc744 \uc778\ub371\uc2f1 \ud569\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\uc640 \ubcc4 \ub2e4\ub984\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\n* \uc544\uc2dc\ub2e4\uc2dc\ud53c \uc704\uce58\ub294 0,1,2,3,4,.....\uc21c\uc11c\ub85c \uac11\ub2c8\ub2e4\n\nSyntax\n\nvariable[position]","dbff25b2":"## 1. Import libraries & data  \ub370\uc774\ud130\uc900\ube44 \ubc0f \ubaa8\ub4c8 \uc784\ud3ec\ud2b8","abb8ab5f":"#### \uac15\uc870 31\n*  \ud074\ub798\uc2a4\uc640 \uc778\uc2a4\ud134\uc2a4 \uac1c\ub150 \uc124\uba85","c43ef1be":"### Task 21 - where","17e98172":"* Learn the Identity Matrix.\n* Create a repeating Matrix.\n\n* Identity Matrix \ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n\n* \ubc18\ubcf5\ud558\ub294 Matrix\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n\n        Syntax\n\n          np.identity(3)\n          np.repeat(var, dim)","589468e6":"### Task 31 Creating and Accessing Methods\u00b6","80007404":"### Task 4 Strings and Numbers","06bf386a":"### Task 4 - Barplot","7e274dc7":"* \ub450 \uac1c\uc758 \ubcc0\uc218\uc5d0 \ub300\ud574 \uac01 \uae30 \ub2e4\ub978 \uc0c9\uae54\ub85c \uadf8\ub824 \ubd05\ub2c8\ub2e4.\n* Draw lines with two different colors for the two variables.","64a2f879":"* plot\uc778 \uc0c1\ud0dc\uc5d0\uc11c \uc0c9\uae54\uc744 \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n* Try changing the color of the plot.\n* 'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'\uc73c\ub85c \uceec\ub7ec\ub97c \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.\n* \uc774 \uc774\uc678\uc5d0\ub3c4 \uc22b\uc790\ub85c \uc9c0\uc815\ud560 \uc218\ub3c4 \uc788\uc73c\ub098 \uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud788 \uc704\uc5d0 \ubaa9\ub85d\uc5d0 \uc788\ub294 \uac83\uc73c\ub85c\ub9cc \ud574\ubd05\ub2c8\ub2e4.\n* \ud50c\ub86f\uc744 \ud558\ub098\ub85c \ubb49\uce5c \ud6c4 \uceec\ub7ec\ub97c \uc90d\ub2c8\ub2e4.\n* Try changing the color to 'b', 'g', 'r', 'c', 'm', 'y', 'k' and 'w'.\n* You can also specify it as a number, but for now, let's just do it from the list above.\n* Put the plots together and give them color.\n \n*   plt.plot(year,cabbage, 'r', year, radish, 'g')\n* \ubc30\ucd94\ub294 red, \ubb34\uc6b0\ub294 green\uc73c\ub85c plot color\uac00 \ubcc0\ud569\ub2c8\ub2e4.\n \n* \ucd94\uac00\uc801\uc778 \uceec\ub7ec \uc815\ubcf4\ub294 \uc5ec\uae30\uc11c \ud655\uc778\ud558\uc138\uc694\n* The cabbage is red, the radish is green, \/color changes.\n* See additional color information below \uceec\ub7ec\uc815\ubcf4\n\n      plt.xlabel('Year')\n      plt.ylabel('Quantity')\n      plt.xlim(2014,2020)\n      plt.ylim(0,5000)\n      cabbage = [4000, 4200, 3800, 3700, 4100]\n      radish = [2300, 2400, 2200, 2300, 2400]\n      year = [2015, 2016, 2017, 2018, 2019]\n      plt.plot(year,cabbage, 'r', year, radish, 'g')\n      plt.show","69e1f1f7":"#### \uac15\uc870 22\n*  if - elif - else \uac04\ub2e8 \uc608 ","b10afb3d":"* A class is a large object that contains functions, variables, data, and so on. Let's create a class. We also study the concepts of self and init. The first letter of classes are capitalized to distinguish them from other modules.\n* \ud568\uc218, \ubcc0\uc218, data \ub4f1\uc744 \ud3ec\ud568\ud55c \ud070 \uc624\ube0c\uc81d\ud2b8 class\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c self \ubc0f init\uc758 \uac1c\ub150\ub3c4 \uacf5\ubd80\ud569\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 \ubaa8\ub4c8\ub4e4\uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 \ub300\ubb38\uc790\ub85c \ud45c\uae30\ud569\ub2c8\ub2e4.\n\n* An empty class.\n\n       class Car():\n          pass\n\n* The above class is an empty one. Let's add some elements here.\n* First we create a class \"Car\"\n* Use init (initializer)\n* init is an initializer, that is to say, it specifies something initially.\n* We use init () to create a method, the first argument of which starts with \"self\".\n\n* \uc704\uc758 \ud074\ub798\uc2a4\ub294 \ube48 \ud074\ub798\uc2a4 \uc785\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 \uc694\uc18c\ub4e4\uc744 \ubd99\uc5ec \ubd05\ub2c8\ub2e4.\n* \uc6b0\uc120 \ud074\ub798\uc2a4 \"Car\" \ub97c \ub9cc\ub4e4\uace0 \uc774 \uc548\uc5d0 object \ub4e4\uc774 \uc788\uc74c\uc744 \uc54c\ub9bd\ub2c8\ub2e4.\n* \uadf8\ub9ac\uace0 initializer \ub77c \ubd88\ub9ac\uc6b0\ub294 init\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n* init \uc740 initializer, \uc989 \ucd08\uae30\uc5d0 \ubb54\uac00 \uc815\ud574\uc8fc\ub294 \uc131\uc9c8\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* \uc6b0\ub9ac\ub294 \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e4 \ub54c init() \uc744 \uc0ac\uc6a9\ud558\ub294\ub370, \uc774 \uac83\uc758 \uccab argument\ub294 \"self\" \ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4.\n\n      class Car(object): \n          def __init__(self):\n\n* We use \"self\" as the first argument. This has the effect of giving \"self\" to all other arguments that follow. This has the effect of declaring that the methods created here belong to this class.\n\n* \uc6b0\ub9ac\ub294 \"self\" \ub97c \ucd5c\ucd08\uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub2e4\uc74c\uc5d0 \uc624\ub294 \ub2e4\ub978 argument \ubaa8\ub450\uc5d0\uac8c \"self\" \ub97c \ubd80\uc5ec\ud558\ub294 \ud6a8\uacfc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub9c8\uce58 \uc5ec\uae30\uc11c \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \ub9e4\uc18c\ub4dc\ub294 \uc774 \ud074\ub798\uc2a4\uc5d0 \uc18d\ud55c \uac83\uc774\ub77c \uc120\uc5b8\ud558\ub294 \ud6a8\uacfc\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n        Car maintenance manager\n        (1) Make a class, Manager \/ class Manager \ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n\n            class Manager():\n\n        (2) def init(self, model, color, year, mileage)\n\n            def_init_(self, model, color, year, mileage):\n\n        (3) \uc774\uc5b4\uc11c self \ub85c \uc815\uc758\ub41c \ubcc0\uc218\ub97c \ubcc0\uc218\ub791 \uc5f0\uacb0\ud574 \uc90d\ub2c8\ub2e4. Then connect the variables defined by self with the variables to use.\n\n            self.model = model\n            self.color = color\n            self. year =  year\n            self.mileage = mileage\n\n        (4) \uc774\ub4e4\uc744 \ucd9c\ub825\ud560 \uc218 \uc788\uac8c argument \ub97c \uc90d\ub2c8\ub2e4. Give them arguments\n\n            mycar = Manager(\"Model: Camaro\", \"Color: Red\", \"Year: 2020\", \"Mileage: 12,345\")\n\n\n        (5) \ucd9c\ub825\ud569\ub2c8\ub2e4. Print them\n\n            print (mycar.model)\n            print (mycar.color)\n            print (mycar.year)\n            print (mycar.mileage)","d1080017":"#### \uac15\uc870 5\n* int()\ub3c4 \uba54\uc18c\ub4dc\ub85c \uad04\ud638\uc548\uc5d0 \uc22b\uc790\uc5d0\uc11c \uc18c\uc218\uc810 \uc544\ub798\ub97c \ubc84\ub9ac\uace0 \uc815\uc218\ub9cc \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n* float()\uc740 \uc815\uc218\ub77c\ub3c4 \uc18c\uc218\uc810\uc774 \ucc0d\ud78c \uc2e4\uc218\ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4\n* Str()\uc740 \uc22b\uc790\ub97c \ubb38\uc790\ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4.","a50cdf6b":"#### \uac15\uc870 53\n*  \uc2a4\uce90\ud130\ud50c\ub86f","c5c9a45b":"### Task 6 - Line Styles \/ \ub77c\uc778 \uc2a4\ud0c0\uc77c \ubc14\uafb8\uae30","0422666b":"#### Piechart\n* Pie charts are common ones we practiced with excel files.\n* \ud30c\uc774\ucc28\ud06c\ub294 \uc6b0\ub9ac\uac00 \uc5d1\uc140\ud558\uba74 \ub9ce\uc774 \ubcf4\ub294 \uac83\uc774\uc9c0\uc694\n* \ud0c0\uc774\ud0c0\ub2c9 \uc790\ub8cc\ub97c \uac00\uc9c0\uace0 \ud55c \ubc88 \ubd05\ub2c8\ub2e4.\n* Let's do it with Titanic data\n* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n\n* Draw a pie chart and count plot in the subplot parts.\n\n* Two rows and one column. Size : 15 inches wide by 6 inches high\n* Create a pieplot by counting the value of 'Survived'.\n* Explode means \"protrusion\", so if it's 1, it's popping out. 0 and 1 means that the second one is poping out.\n* Autopercent means 1.1 shows up to one decimal place. If there is 4 after the dot, both show up to four decimal places.\n* ax [0] is the first cell.\n* The set_title method displays the title of the subplot.","e4424e88":"* \"for loop\" is used to run a finite loop within a certain range.\n* \ud30c\uc774\uc36c\uc5d0\ub294 for loop \uacfc while loop\uc774 \uc788\uc2b5\ub2c8\ub2e4. for\ub294 \uc5b4\ub5a4 \ubc95\uc704\ub0b4\uc5d0\uc11c \ud55c\uc815\ub41c \ub8e8\ud504\ub97c \ub3cc\ub9b4 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n* Sytnax\n\n       for variable in traget:\n              job description\n\nSample\n\n          a=[1,2,3,4,5]\n\n          for var in a:\n              print (var) ","803df335":"* iterrows\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n \n* \uc774\ub294 \uac01 \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \uc6d0\ud558\ub294 \ud589\uc758 \uc815\ubcf4\ub97c \ucc3e\uc544\uc900\ub2e4.\n \n* Let's look at iterrows.\n \n* This method finds the information in the desired row of each data frame.","cc2a914d":"#### \uac15\uc870 48\n*  \ubaa8\uc591 \ubc14\uafb8\uc5b4 \ubcf4\uae30","773d3a66":"## \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\n\n### SVC\n* Scikit-Learn\uc5d0\uc11c\ub294 3\uac00\uc9c0 \ubaa8\ud615 \ucd5c\uc801\ud654 \ub3c4\uad6c\ub97c \uc9c0\uc6d0\ud558\ub294\ub370 validation_curve\/ GridSearchCV\/ ParameterGrid\uc774\ub2e4\n* fit \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 grid search\uac00 \uc790\ub3d9\uc73c\ub85c \uc5ec\ub7ec\uac1c\uc758 \ub0b4\ubd80 \ubaa8\ud615\uc744 \uc0dd\uc131\ud558\uace0 \uc774\ub97c \ubaa8\ub450 \uc2e4\ud589\uc2dc\ucf1c\uc11c \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294\ub2e4.\n\n* bestscore\ub294 \ucd5c\uace0 \uc810\uc218\uc774\uace0 best estimator\ub294 \ucd5c\uace0 \uc810\uc218\ub97c \ub0b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uac00\uc9c4 \ubaa8\ud615\n* c\uac12\uacfc gamma\uac12\uc740 10\uc758 \ubc30\uc218\ub85c \uc77c\ubc18\uc801\uc73c\ub85c \ud55c\ub2e4.\n* \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \ub2e8\uc77c \ud559\uc2b5 \uc608\uc81c\uc758 \uc601\ud5a5\uc774 \ub3c4\ub2ec\ud558\ub294 \uc815\ub3c4\ub97c \uc815\uc758\ud558\uba70 \ub0ae\uc740 \uac12\uc740 'far'\ub97c, \ub192\uc740 \uac12\uc740 'close'\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac10\ub9c8 \ub9e4\uac1c \ubcc0\uc218\ub294 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \ubaa8\ub378\uc5d0 \uc758\ud574 \uc120\ud0dd\ub41c \uc0d8\ud50c\uc758 \uc601\ud5a5 \ubc18\uacbd\uc758 \uc5ed\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* C \ub9e4\uac1c \ubcc0\uc218\ub294 \uc758\uc0ac \uacb0\uc815 \ud45c\uba74\uc758 \ub2e8\uc21c\uc131\uc5d0 \ub300\ud55c \ud6c8\ub828 \uc608\uc81c\uc758 \uc624 \ubd84\ub958\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4. C\uac00 \ub0ae\uc744\uc218\ub85d \uacb0\uc815 \ud45c\uba74\uc774 \ub9e4\ub044\ub7fd\uace0 \ub192\uc740 C\ub294 \ubaa8\ub378\uc774 \ub354 \ub9ce\uc740 \uc0d8\ud50c\uc744 \uc11c\ud3ec\ud2b8 \ubca1\ud130\ub85c \uc790\uc720\ub86d\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\ub3c4\ub85d\ud558\uc5ec \ubaa8\ub4e0 \ud559\uc2b5 \uc608\uc81c\ub97c \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c\ud569\ub2c8\ub2e4.\n* Verbose\ub294 \ubd88\ub9ac\uc548 \uac12\uc73c\ub85c True\ub85c \ub123\uc73c\uba74 \uaf2c\uce58 \uaf2c\uce58 \ub2e4 \uc54c\ub824\uc8fc\ub294\ub370, \ub300\uc2e0 \uc2dc\uac04\uc774 \uc880 \ub354 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n* cv =5\ub294 5 fold\ub85c \uad50\ucc28 \uac80\uc99d\ud55c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4.","1112da09":"### Task 16 - iloc","9d230bfd":"### Task 4 - Checking null values","f52712e6":"        clear()     # This clears all the items \/ dictionary\uc758 \ubaa8\ub4e0 \uc694\uc18c\ub4e4\uc744 \uc5c6\uc564\ub2e4.\n        copy()      # This one copies and makes a duplicate \/ dictionary\uc758 \ubcf5\uc81c\ub41c \uac12\uc744 \ubc18\ud658\ud55c\ub2e4\n        get()       # This one will get a certain value from a certain key \/ \ud2b9\uc815 key\uc758 value\uac12\uc744 \ubc18\ud658\ud55c\ub2e4","94a526a7":"* \ud55c \uc904 \ub77c\uc778\ud504\ub86f\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4. \uc5d0\ub7ec \ud3b8\ucc28\uac00 \uc74c\uc601\uc73c\ub85c \uac19\uc774 \ud45c\ud604\ub429\ub2c8\ub2e4.\n* Draw a single line plot. Error deviations are represented in shades.","8cf7d2db":"### Task 9 - paitplot","911065cc":"* \uadf8\ub798\ub3c4 \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n* The most common ways are below\n* figure\uc774\ub984 (\uc77c\ubc18\uc801\uc73c\ub85c f \uc815\ub3c4\ub9cc \uc500), axes(\uc77c\ubc18\uc801\uc73c\ub85c ax \uc815\ub3c4\ub9cc \uc500) = plt.subplots(\ud589\uc218, \uc5f4\uc218, figsize = (\uac00\ub85c\uc778\uce58, \uc138\ub85c\uc778\uce58)\n \n* figure name (typically just f), axes (typically ax only) = plt.subplots (rows, columns, figsize = (horizontal inches, vertical inches)\n \n* \uc544\ub798 \uc608\ub97c \ubcf4\uc2dc\uc9c0\uc694\n* Please see the below sample","4acfb47a":"* \"Sex\" \ubd84\uc11d\n\n* \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c train\ud30c\uc77c\uc744 \ubcf4\uc9c0\uc694\n* Let's see the graph Survived \/ Sex","33565dd9":"#### \uac15\uc870 66\n*  \uc774\ub984\uc5d0\uc11c \ud55c \ubc88 \ubf51\uc544 \ubcf4\uae30","e60ed560":"#### \"Age\" \ubd84\uc11d\n \n* Age\ub294 Continuous\ud55c \uac12\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \ub9ce\uc544\uc11c \ube48\uce78\ucc98\ub9ac\uac00 \uacb0\uc815\uc801\uc778 \uc5ed\ud560\uc744 \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n \n* Age\uc758 \ucd5c\ub300, \ucd5c\uc18c, \uc911\uac04\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n \n* Age is a continuous value.\n \n* Because there are a lot of blanks, blank processing seems to play a decisive role.\n \n* Let's take a look at the maximum, minimum, and middle of Age.","3936cca2":"### Task 18 If-else","08a7d0ec":"* \uc218\ud559\uc5d0\uc11c\ub294 Y = X + 2\uc640 \uac19\uc740 \uc2dd\uc744 \ubcfc \uc218 \uc788\uc73c\uba70 Y\uc640 X \uac12\uc740 \ubcc0\ud558\uc9c0\ub9cc 2\ub294 \ubcc0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c X,Y\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\uc758 \ubcc0\uc218\uc758 \uc4f0\uc784\uc0c8\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* In mathematics, whe we see something like Y = X + 2, where the values of Y and X change but 2 does not. So X and Y are variables and 2 is a constant. Let's look at the use sof variables in Python.\n\nSyntax\n\n    variable = \"string\"     # \ubb38\uc790\ud615 \ubcc0\uc218  string variable\n    variable = 5            # \uc22b\uc790\ud615 \ubcc0\uc218  numeric variable\n    variable = input()      # \ud568\uc218\ud615 \ubcc0\uc218  functional variable\n    variable = True         # \ubd88\ub9ac\uc548 \ubcc0\uc218  boolean variable\n","1d40b41d":"* \ubc30\uc5d0 \uc788\ub358 \ub0a8\uc790\uc758 \uc218\ub294 \uc5ec\uc790\uc758 \uc218\ubcf4\ub2e4 \ud6e8\uc52c \ub9ce\uc2b5\ub2c8\ub2e4. \uc5ec\uc804\ud788 \uc0dd\uc874 \uc5ec\uc131 \uc218\ub294 \ub0a8\uc131 \uc218\uc758 \uac70\uc758 \ub450 \ubc30\uc785\ub2c8\ub2e4. \uc120\ubc15 \uc5ec\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 75 % \uc778 \ubc18\uba74 \ub0a8\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 18-19 %\uc785\ub2c8\ub2e4.\n* The number of men on the ship is much more than the number of women. Still, the number of surviving women is almost twice that of men. The survival rate of ship women is about 75%, while the survival rate of men is about 18-19%.\n* \uc774 \uac83\uc740 \ub0a8\uc131\/\uc5ec\uc131\uc744 1,2\ub85c \ub098\ub204\uba74 \ub420 \uac83 \uac19\uc740 \ubed4\ud574 \ubcf4\uc774\ub294 \uac83\uc774\uc9c0\ub9cc \uc880 \ub354 \uc0c8\ubd84\ud654\ud558\uba74 \uc88b\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \uc544\uae30\ub4e4\uc740 \uc544\uae30\uc774\uc9c0, \ub0a8\uc790\uc778\uc9c0 \uc5ec\uc790\uc778\uc9c0 \uad6c\uba85\ubcf4\ud2b8 \ud0dc\uc6b8 \ub54c \uc548 \ubb3c\uc5b4 \ubcfc \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* \uc624\ud788\ub824 (\ubd88\ud589\ud558\uac8c\ub3c4) \uadc0\uc871 \uc544\uae30\uc778\uc9c0 \uc11c\ubbfc\uc758 \uc544\uae30\uc778\uc9c0\ub294 \ud589\uacfc\ubd88\ud589\uc744 \uac00\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 \u3160\u3160\n* \uc0dd\uc874 Pclass\ubcc4\ub85c \uc131\ubcc4\uc744 \ubd05\ub2c8\ub2e4.\n* This seems obvious to divide males \/ females by 1,2, but it looks good if you break it down a bit.\n* For example, babies are just babies and would not be matter whether it is boy or girl.\n* (Unfortunately) whether you are a baby in a higher social class or one from a humble family, it might have mattered.\n* View gender by survival Pclass.","e7cb252a":"### Task 23 While -else","1fe3d302":"# Python\uc744 1\ub3c4 \ubaa8\ub974\ub294 \uc0c1\ud0dc\uc5d0\uc11c \uce90\uae00\uc5d0 \ub6f0\uc5b4\ub4e4\uae30 \ub3c4\uc804\ud558\ub294 \ubd84\ub4e4\uc744 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4\n# This is a tutorial for absolute beginners who do not know basic Python, but want to try Kaggle competitions. \n\n### Also this one is in top5%. \uc774 \ub178\ud2b8\uc758 \uacb0\uacfc\ub294 \uc791\uc131 \ud604\uc7ac Top 5% \uacb0\uacfc\ub97c \ubcf4\uc785\ub2c8\ub2e4. \n\nKaggle\uc5d0 \ucc98\uc74c\uc73c\ub85c \ub85c\uadf8\uc778\ud558\ub294 \uac83\uc740 \uc26c\uc6b4 \uacb0\uc815\uc774 \uc544\ub2d9\ub2c8\ub2e4. \ub0b4\uac00 \ubb34\uc2a8 \uba38\uc2e0\ub7ec\ub2dd\uc744? \uc774\ub7f0 \uc0dd\uac01\uc744 \ud558\uc2e4 \uc218 \ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4. \uce90\uae00\uc740 \ub300\ud68c\ub85c\uc11c\ub3c4 \uc758\ubbf8\uac00 \uc788\uaca0\uc73c\ub098 \ubc30\uc6c0\uc758 \ud130\uc785\ub2c8\ub2e4. \uc774\ub7f0 \ub370\uc774\ud130\ub97c \ucd08\ubcf4\uc790\uac00 \uc5b4\ub514\uc11c \uad6c\ud558\uba70 \uc5b4\ub5bb\uac8c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc774 \uc77c\ud55c \uac83\uc744 \ud1b5\ud574 \uc774\ub9ac \uc27d\uac8c \ubc30\uc6b0\uaca0\uc2b5\ub2c8\uae4c? \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc774 \ub05d\ub0a0 \ub54c \uc988\uc74c\uc5d0\ub294 Kaggle\uc758 \uc628\ub77c\uc778 \ucf54\ub529 \ud658\uacbd\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \uc5bb\uac8c\ub418\uba70 \uadf8 \uc640\uc911\uc5d0 \uba38\uc2e0\ub7ec\ub2dd \ud559\uc2b5 \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uac8c\ub429\ub2c8\ub2e4.\n\nThis is a tutorial for abolute beginners who do not even know basic Python Syntaxes.\n\n**You are welcome to make a copy and edit. Please click upvote all the way down below.\n\n**\ub3c4\uc6c0\uc774 \ub41c\ub2e4\uba74 \uc6b0\uce21 \uc0c1\ub2e8\uc5d0 Copy & Edit\uc744 \ub20c\ub7ec\uc11c \ubcf5\uc0ac\ud574 \uac00\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. \ub300\uc2e0 \uc544\ub798\uc5d0 Upvote (\uce90\uae00 \ubc84\uc804\uc758 \uc88b\uc544\uc694) \ub20c\ub7ec \uc8fc\uc138\uc694^^\n\n\n## Contents\n\n### About Kaggle \n\n### Prerequsite\n\n#### 1. 40 Things to Learn - Python\n#### 2. 10 Things to Learn - NumPy\n#### 3. 10 Things to Learn - Matplotlib\n#### 4. 25 Things to Learn - Pandas\n#### 5. 10 Things to Learn - Seaborn\n\n\n### Titanic\n\n#### 1. Import libraries & data \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 \uc784\ud3ec\ud2b8\n#### 2. File Separations and Merges \ud30c\uc77c \ubd84\ub9ac \ubc0f \ubcd1\ud569 \n#### 3. Check the files \ud30c\uc77c \ubcf4\uae30\n#### 4.  Features \ud56d\ubaa9\n#### 5.  Exploratory Data Analysis \ub370\uc774\ud130 \ud0d0\uad6c \n*  Surivived\n* Pclass\n* Name\n* Sex\n* Age\n* SibSp + Parch\n* Ticket\n* Fare\n* Cabin\n* Embarked\n#### 6. Feature Engineering\n*  Turning string to numbers (Done at EDA)\n* Adding Features\n* Removing Features\n* Final look\n#### 7. Pre-processing\n* Making 2 data frames\n* Encoding\n #### 8. Machine Learning\n* Initial models\n* Feature selection\n* Model tuning\n* Voting Classifier\n#### 9. Final model predictions and submission\n\n\n\n\n\n-------------------------------------------------------------------\n\n# About Kaggle\n\n\n# Part 1: Join the competition!\n\nThe first thing to do is to join the competition!  Open a new window with **[the competition page](https:\/\/www.kaggle.com\/c\/titanic)**, and click on the **\"Join Competition\"** button, if you haven't already.  (_If you see a \"Submit Predictions\" button instead of a \"Join Competition\" button, you have already joined the competition, and don't need to do so again._)\n\n\uc544\uc9c1 \ub300\ud68c\uc5d0 \ucc38\uc11d \uc548 \ud558\uc2e0 \uac83\uc774\ub77c\uba74 \ubcf5\uc0ac\ub97c \ud574\uc11c \uc218\uc815\ud558\uc2dc\uae30 \uc804\uc5d0 \ub300\ud68c\ubd80\ud130 \ucc38\uc5ec\ud558\uc138\uc694.\n\uc6b0\uc120 \ub300\ud68c\uc5d0 \ucc38\uc11d\ud558\uc2dc\ub824\uba74 \uc704\uc5d0 \ub9c1\ud06c\ub97c \ub530\ub77c \uac00\uc154\uc57c \ud569\ub2c8\ub2e4. \uc0c8\ucc3d\uc744 \uc5ec\uc154\uc11c **[the competition page](https:\/\/www.kaggle.com\/c\/titanic)** \ub85c \uac00\uc2dc\uace0 **\"Join Competition\"** \ubc84\ud134\uc744 \ub204\ub974\uc2dc\uace0 \n\uc544\ub798 \ud398\uc774\uc9c0\uc5d0\uc11c \ub8f0\uc744 \uc218\uc6a9\ud55c\ub2e4\ub294 \uac83\uc5d0 \ub3d9\uc758\ud558\uc2dc\ub824\uba74 **\"I Understand and Accept\"** \ub97c \ub204\ub974\uc2dc\uace0 \uc774\uc81c \ucc38\uc5ec\uac00 \uac00\ub2a5\ud55c \uac83\uc785\ub2c8\ub2e4.\n\n![](https:\/\/i.imgur.com\/rRFchA8.png)\n\nThis takes you to the rules acceptance page.  You must accept the competition rules in order to participate.  These rules govern how many submissions you can make per day, the maximum team size, and other competition-specific details.   Then, click on **\"I Understand and Accept\"** to indicate that you will abide by the competition rules.\n\n## The challenge\n\nThe competition is simple: we want you to use the Titanic passenger data (name, age, price of ticket, etc) to try to predict who will survive and who will die.\n\n\uacbd\uc7c1\uc740 \uac04\ub2e8\ud569\ub2c8\ub2e4. \ud0c0\uc774\ud0c0\ub2c9 \uc2b9\uac1d \ub370\uc774\ud130 (\uc774\ub984, \ub098\uc774, \ud56d\uacf5\uad8c \uac00\uaca9 \ub4f1)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub204\uac00 \uc0dd\uc874\ud558\uace0 \ub204\uac00 \uc8fd\uc744\uc9c0\ub97c \uc608\uce21\ud558\ub824\uace0\ud569\ub2c8\ub2e4.\n\n## The data\n\nTo take a look at the competition data, click on the **<a href=\"https:\/\/www.kaggle.com\/c\/titanic\/data\" target=\"_blank\" rel=\"noopener noreferrer\"><b>Data tab<\/b><\/a>** at the top of the competition page.  Then, scroll down to find the list of files.  \n\n\ud544\uc694 \ub370\uc774\ud130\ub97c \ubcf4\ub824\uba74 ** <a href=\"https:\/\/www.kaggle.com\/c\/titanic\/data\" target=\"_blank\" rel=\"noopener noreferrer\"> <b>\ub97c \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624. \ud398\uc774\uc9c0 \uc0c1\ub2e8\uc758 \ub370\uc774\ud130 \ud0ed <\/ b> <\/a> ** \uadf8\ub7f0 \ub2e4\uc74c \uc544\ub798\ub85c \uc2a4\ud06c\ub864\ud558\uc5ec \ud30c\uc77c \ubaa9\ub85d\uc744 \ucc3e\uc73c\uc2ed\uc2dc\uc624.\n\n![](https:\/\/i.imgur.com\/LiM3JA7.png)\n\nThere are three files in the data: (1) **train.csv**, (2) **test.csv**, and (3) **gender_submission.csv**.\n\n\uc138\uac1c\uc758 \ud30c\uc77c\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n(1) **train.csv**, (2) **test.csv**, and (3) **gender_submission.csv**.\n\n### (1) train.csv\n\n**train.csv** contains the details of a subset of the passengers on board (891 passengers, to be exact -- where each passenger gets a different row in the table).  To investigate this data, click on the name of the file under the **\"Data Sources\"** column (on the left of the screen).  Once you've done this, all of the column names (along with a brief description of what they contain) are listed to the right of the screen, under the **\"Columns\"** heading.  \n\n** train.csv **\uc5d0\ub294 \uc2b9\uac1d\uc758 \ud558\uc704 \uc9d1\ud569\uc5d0 \ub300\ud55c \uc138\ubd80 \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4 (891 \uba85\uc758 \uc2b9\uac1d, \uc815\ud655\ud558\uac8c \ub9d0\ud558\uba74 \uac01 \uc2b9\uac1d\uc774 \ud14c\uc774\ube14\uc5d0\uc11c \ub2e4\ub978 \ud589\uc744 \uac00\uc838\uc635\ub2c8\ub2e4). \uc774 \ub370\uc774\ud130\ub97c \uc870\uc0ac\ud558\ub824\uba74 \ud654\uba74 \uc67c\ucabd\uc758 ** \"\ub370\uc774\ud130 \uc18c\uc2a4\"** \uc5f4 \uc544\ub798\uc5d0\uc11c \ud30c\uc77c \uc774\ub984\uc744 \ud074\ub9ad\ud558\uc2ed\uc2dc\uc624. \uc774 \uc791\uc5c5\uc744 \uc644\ub8cc\ud558\uba74 \ubaa8\ub4e0 \uc5f4 \uc774\ub984 (\ud3ec\ud568 \ub41c \ub0b4\uc6a9\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \uc124\uba85\uacfc \ud568\uaed8)\uc774 \ud654\uba74 \uc624\ub978\ucabd\uc758 ** \"\uc5f4\"** \uc81c\ubaa9 \uc544\ub798\uc5d0 \ub098\uc5f4\ub429\ub2c8\ub2e4.\n\n![](https:\/\/i.imgur.com\/w5HFxp8.png)\n\nYou can view all of the data in the same window.  \n\n\ub3d9\uc77c\ud55c \ucc3d\uc5d0\uc11c \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n![](https:\/\/i.imgur.com\/CEPZi6z.png)\n\nThe values in the second column (**\"Survived\"**) can be used to determine whether each passenger survived or not: \n- if it's a \"1\", the passenger survived.\n- if it's a \"0\", the passenger died.\n\nFor instance, the first passenger listed in **train.csv** is Mr. Owen Harris Braund.  He was 22 years old when he died on the Titanic.\n\n\ub450 \ubc88\uc9f8 \uc5f4 (** \"Survived\"**)\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac01 \uc2b9\uac1d\uc758 \uc0dd\uc874 \uc5ec\ubd80\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- \"1\"\uc774\uba74 \uc2b9\uac1d\uc774 \uc0b4\uc544 \ub0a8\uc558\uc2b5\ub2c8\ub2e4.\n- \"0\"\uc774\uba74 \uc2b9\uac1d\uc774 \uc0ac\ub9dd \ud55c \uac83\uc785\ub2c8\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4 ** train.csv **\uc5d0 \ub098\uc5f4\ub41c \uccab \ubc88\uc9f8 \uc2b9\uac1d\uc740 Owen Harris Braund\uc785\ub2c8\ub2e4. \uadf8\ub294 \ud0c0\uc774\ud0c0\ub2c9\uc5d0\uc11c \uc0ac\ub9dd\ud588\uc744 \ub54c 22 \uc0b4\uc774\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\n### (2) test.csv\n\nUsing the patterns you find in **train.csv**, you have to predict whether the other 418 passengers on board (in **test.csv**) survived.  \n\n** train.csv **\uc5d0\uc11c \ucc3e\uc740 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud0d1\uc2b9 \ud55c \ub2e4\ub978 418 \uba85\uc758 \uc2b9\uac1d (** test.csv **)\uc774 \uc0b4\uc544\ub0a8 \uc558\ub294\uc9c0 \uc608\uce21\ud574\uc57c\ud569\ub2c8\ub2e4.\n\nClick on **test.csv** (under the **\"Data Sources\"** column) to examine its contents.  Note that **test.csv** does not have a **\"Survived\"** column - this information is hidden from you, and how well you do at predicting these hidden values will determine how highly you score in the competition! \n\n** test.csv ** (** \"\ub370\uc774\ud130 \uc18c\uc2a4\"** \uc5f4 \uc544\ub798)\ub97c \ud074\ub9ad\ud558\uc5ec \ub0b4\uc6a9\uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. ** test.csv **\uc5d0\ub294 ** \"Survived\"** \uc5f4\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\uc774 \uc815\ubcf4\ub294 \uc228\uaca8\uc838 \uc788\uc73c\uba70 \uc774\ub7ec\ud55c \uc228\uaca8\uc9c4 \uac12\uc744 \uc5bc\ub9c8\ub098 \uc798 \uc608\uce21\ud558\uba74 \uacbd\uc7c1\uc5d0\uc11c \uc5bc\ub9c8\ub098 \ub192\uc740 \uc810\uc218\ub97c \uc5bb\uc744 \uc218 \uc788\ub294\uc9c0 \uacb0\uc815\ud569\ub2c8\ub2e4!\n\n\uc989, train \ud30c\uc77c\uc758 891\uba85\uc758 \uc870\uac74\uc744 \uba38\uc2e0\uc5d0\uac8c \ud6c8\ud604\uc2dc\ucf1c test \ud30c\uc77c\uc758 \uc0dd\uc874\uacfc \uc0ac\ub9dd\uc5ec\ubd80\ub97c \uc608\uce21\ud574 \ub0b4\ub294 \uac83\uc774 \uacfc\uc81c\uc785\ub2c8\ub2e4.\n\n### (3) gender_submission.csv\n\nThe **gender_submission.csv** file is provided as an example that shows how you should structure your predictions.  It predicts that all female passengers survived, and all male passengers died.  Your hypotheses regarding survival will probably be different, which will lead to a different submission file.  But, just like this file, your submission should have:\n- a **\"PassengerId\"** column containing the IDs of each passenger from **test.csv**.\n- a **\"Survived\"** column (that you will create!) with a \"1\" for the rows where you think the passenger survived, and a \"0\" where you predict that the passenger died.\n\n** gender_submission.csv ** \ud30c\uc77c\uc740 \uc608\uce21\uc744 \uad6c\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uc608\uc81c\ub85c \uc81c\uacf5\ub429\ub2c8\ub2e4. \uadf8\uac83\uc740 \ubaa8\ub4e0 \uc5ec\uc131 \uc2b9\uac1d\uc774 \uc0b4\uc544 \ub0a8\uc558\uace0 \ubaa8\ub4e0 \ub0a8\uc131 \uc2b9\uac1d\uc774 \uc0ac\ub9dd\ud588\ub2e4\uace0 \uc608\uce21\ud569\ub2c8\ub2e4. \uc0dd\uc874\uc5d0 \ub300\ud55c \uadc0\ud558\uc758 \uac00\uc124\uc740 \uc544\ub9c8\ub3c4 \ub2e4\ub97c \uc218 \uc788\uc73c\uba70, \uc774\ub294 \ub2e4\ub978 \uc81c\ucd9c \ud30c\uc77c\ub85c \uc774\uc5b4\uc9c8 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098\uc774 \ud30c\uc77c\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc81c\ucd9c \ub0b4\uc6a9\uc740 \ub2e4\uc74c\uacfc \uac19\uc544\uc57c\ud569\ub2c8\ub2e4.\n\n\uc989 gender submission \ud30c\uc77c\uacfc \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \uc81c\ucd9c\ud558\ub77c\ub294 \uc0d8\ud50c\uc785\ub2c8\ub2e4.\n\n","40fa72e8":"#### \uac15\uc870 4\n* \uc22b\uc790\uc758 \ubaa8\uc591\uc774\ub77c\ub3c4 \" \"\uc548\uc5d0 \ub4e4\uc5b4 \uac00\uba74 \ubb38\uc790\ub85c \uc778\uc2dd\ud569\ub2c8\ub2e4.\n* \ub9c8\uce58 \uc6b4\ub3d9\uc120\uc218 \uc720\ub2c8\ud3fc\uc758 \ubc88\ud638 11\ubc88\uacfc 22\ubc88\uc774 \uc606\uc5d0 \uac19\uc774 \uc788\ub2e4\uace0 \ud574\uc11c 33\ubc88\uc774 \uc548 \ub418\ub294 \uac83 \ucc98\ub7fc, \ub2f9\uc5f0\ud788 1122\ub85c \ubcf4\uc774\uaca0\uc8e0.\n* \ubc18\uba74 \uc22b\uc790\ub294 \ud569\uce58\uba74 33\uc774 \ub418\uaca0\uc9c0\uc694.","dcac62ae":"### Task 10 - Loop","d42e62b1":"* \uc704\uc758 \uac83\uc744 \uc544\ub798\uc640 \uac19\uc774 \ud568\uc218\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. (\ubb3c\ub860 \uc790\uc8fc \uc4f0\uc774\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc \uc5f0\uc2b5\uc774\ub2c8)\n* Let's make the above as a function. (it's not going to be used often, but it's a practice for making a function)","23b03b27":"* \uc774\ub984\uc740 \uc5b8\ub73b \ubcf4\uc544\uc11c \uac10\uc774 \uc548 \uc635\ub2c8\ub2e4. \uc911\uac04\uc5d0 \uc788\ub294 Mr. \uac19\uc740 \ud638\uce6d\uc744 \ubcfc\uae4c\uc694.\n* ['Initial']\uc774\ub780 \uc5f4\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc5ec\uae30\uc5d0 Name\uc5d0\uc11c \ucd94\ucd9c\ud55c Regular Expression\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798\uc5d0\uc11c str.extract('([A-Za-z]+).')\ubd80\ubd84\uc740 str\uc5d0\uc11c \ub300\ubb38\uc790 A~Z, \uc18c\ubb38\uc790 a~z \uc911\uc5d0 . \uba85\ub839\uc744 \ud1b5\ud574 .\uc73c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\uc744 \ucd94\ucd9c\ud574 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.\n* ('^([A-Za-z]+)')\uc73c\ub85c \ud558\uba74 \ucc98\uc74c\uc5d0 \ub098\uc624\ub294 \ubb38\uc790 \ub369\uc5b4\ub9ac\uac00 \ub420 \uac83\uc774\uace0 +\ub97c \ube7c\uba74 \uccab \uc2a4\ud3a0\ub9c1 \ud55c\uce90\ub9ad\ud130\ub9cc \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n \n* The name doesn't seem to have any meaning at first glance.\n \n* Create a new column called ['Initial'] and put the regular expressions extracted from Name.\n* The str.extract ('([A-Za-z] +) .') Part of the lower part of the str is the . Is to extract the part that ends with.\n* ('^ ([A-Za-z] +)') will be the first chunk of characters, and minus + will extract only the first spelled character.","4d393f4f":"### Task 1 Creating Array","c9a0a17b":"* \ube48\uce78\uc774 \ubb34\ucc99 \ub9ce\uc2b5\ub2c8\ub2e4.\n* Lots of null values\n* Cabin\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 \ub9ce\uc544 \uc774\ub97c \ub2e4\ub978 \ubd84\ub958\ub85c \uc77c\ub2e8 \uc7a1\uace0 \uae30\uc874 \uac83\uc740 \uc774\ub2c8\uc15c\ub85c \ubd84\ub958\ud569\ub2c8\ub2e4.\n* \ube48 \uac83\uc740 X\ub85c \uad6c\ubd84\ud558\ub824\ub294\ub370 \uc774 \ub610\ud55c 1,2,3 Pclass\uc640 \uc5f0\ub3d9\ub420 \uac83 \uac19\uc73c\ub2c8 \ube44\uc5b4\uc788\uace0 1\ub4f1\uae09\uc740 X, 2\ub4f1\uae09\uc740 Y, 3\ub4f1\uae09\uc740 Z\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n \n* There are so many empty bins in the cabin,\n* Existing ones are classified as initials.\n* I want to classify the nulls as X, but this is also reclassified by Pclasses, so there will be X, Y and Z","1435769f":"### Task 22 While loop","a91bf2fc":"### Task 6 - qcut","8c162017":"* \uc870\uac74 \ud544\ud130\ub9c1 - \uc870\uac74\uc744 \uc8fc\uc5b4 \ud2b9\uc815 \ub0b4\uc6a9\uc744 \ucd94\ucd9c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* Age> 40 \ub118\ub294 \uac83\uc744 \ucd94\ucd9c\ud574 \ubd05\ub2c8\ub2e4.","90f8ce9b":"* While \u201clist\u201d is a set of items under a single variable name, \u201cdictionary\u201d is more like business card.\n* \"list\"\uac00 \ud558\ub098\uc758 variable\ub85c \uad00\ub9ac\ub418\ub294 \ubaa9\ub85d\uc774\ub77c\uba74 \"dictionary\" \ub294 \uc0ac\uc804\uc774\ub098 \uba85\ud568\uc5d0 \uc880 \ub354 \uac00\uae5d\ub2e4\uace0 \ubcf4\uba74 \ub418\uaca0\uc2b5\ub2c8\ub2e4. Dictionary\ub294 \ub300\uad04\ud638{ } \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n* { } is used to represent a dictionary.\n\n* Syntax\n\n            mydict = {key: value, key: value, key; value}\n\n* Sample\n\n            Name : Joshua\n            Phone : 55512345678\n            Company: ai2learn\n\n* As you see, the \"Name\" part is called Key and the \"Joshua\" part is called value.\n* \uc5ec\uae30\uc11c \"Name\" \uc740 Key\ub77c \ubd80\ub974\uace0 \"Joshua\" \ub294 value\ub77c \ubd80\ub985\ub2c8\ub2e4.\n\n* Sample\n \n        bizcard['name'] = 'Joshua'\n        bizcard['phone'] = '55512345678'\n        bizcard['company'] = 'ai2learn'\n\n* Dictionary\ub3c4 key\ub098 value\uc758 \ubcc0\ub3d9\uc740 \ud5c8\uc6a9\ud558\ub098 key\uc758 \uacb9\uce68\uc740 \ud5c8\uc6a9 \uc548\ub428\n* Dictionary also allows key or value changes but not redundant keys","73987e59":"#### \uac15\uc870 69\n*   groupby - \uad49\uc7a5\ud788 \uc911\uc694","fa47c389":"#### \uac15\uc870 33\n*  inheritance \uac1c\ub150 \uc7a1\uae30","28bce349":"### Task 15 Dictionary Methods","a7cdb411":"### Task 7 - filtering small categories","f2b7e41d":"* concatenate: \uc5f0\uacb0\ud558\ub2e4","b0c38909":"### Task 12 List","47f2796f":"* \ud568\uc218\ub294 \ubc18\ubcf5\ud574\uc11c \uc7ac\uc0ac\uc6a9 \ud560 \uc218 \uc788\ub294 '\uc218\ud559\uc801 \uacf5\uc2dd' \uac19\uc740 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7fc \ud568\uc218\ub97c \ud55c \ubc88 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* You can think of a function as something like a mathematical formula that can be reused over and over again. So let's create a function.\n\n* Syntax\n\n            def functionname (): # \ud568\uc218 \uc120\uc5b8 function declaration Function \n                 Body # \uae30\ub2a5 \uc8fc\uae30 Assign a function to your function\n\n            functionname()        # \ud638\ucd9c\ud574\uc11c \uae30\ub2a5 \uc0ac\uc6a9\ud558\uae30 Call your function to perform","eb41b8c7":"### XGB Step 2.","6216b32b":"### TASK 1\u2013 Print Statement","102372f4":"* np.zeros_like # Create a zero matrix of the dimensions of an existing array.\n* np.ones_like # Create a matrix with 1s of the dimensions of an existing array.\n* np.arange (start point, end point, step) # For example, if tey ares 0, 5, 1, create an array by stepping up by 1 from 0 to 4\n \n* np.zeros_like # \uae30\uc874 array\uc758 \ucc28\uc6d0\uc744 \ubcf8 \ub72c 0 \ud589\ub82c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n \n* np.ones_like # \uae30\uc874 array\uc758 \ucc28\uc6d0\uc744 \ubcf8 \ub72c 1 \ud589\ub82c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* np.arange(\uc2dc\uc791\uc810, \ub05d\uc810, \ub2e8\uacc4) # \uc608\ub97c \ub4e4\uc5b4 0, 5, 1\uc774\ub77c\uba74 0\ubd80\ud130 4\uae4c\uc9c0 1\uc529 \uc62c\ub77c\uac00\uba74\uc11c array \uc0dd\uc131","22ebd988":"### XGBoost Step 1.","ecf82333":"#### \uac15\uc870 63\n*  \ud55c\ubc88 \uc529 \ud574\ubcf4\uae30","5187c06a":"#### \"Embarked\" \ubd84\uc11d","f41a7985":"#### \uac15\uc870 43\n*  \uc544\uc774\ud15c \uad50\uccb4","89e85b6f":"### Task 2 - head, tail, info, describe,shape","8b9f2020":"# Part 2: Your coding environment\n\nIn this section, you'll train your own machine learning model to improve your predictions.  _If you've never written code before or don't have any experience with machine learning, don't worry!  We don't assume any prior experience in this tutorial._\n\n\uc774 \uc139\uc158\uc5d0\uc11c\ub294 \uc608\uce21 \ud5a5\uc0c1\uc744 \uc704\ud574 \uc790\uccb4 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. _ \uc774\uc804\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud574 \ubcf8 \uc801\uc774 \uc5c6\uac70\ub098 \uba38\uc2e0 \ub7ec\ub2dd \uacbd\ud5d8\uc774\uc5c6\ub294 \uacbd\uc6b0 \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624! \uc5ec\uae30\uc11c\ub294 \uc544\uc608 \ubabb \ud558\uc2e0\ub2e4\uace0 \uc0dd\uac01\ud558\uace0 \uc9c4\ud589\ud569\ub2c8\ub2e4 ._\n\n","a95cbebe":"#### \uac15\uc870 74\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","ef39d2cc":"## Voting (Hard\/Soft)","4349ef9e":"#### \uac15\uc870 47\n*  \ucd5c\uc18c, \ucd5c\ub300, \ud3c9\uade0 \uad6c\ud574\ubcf4\uae30","e040ef2d":"* \ub450 \uc0ac\ub78c\uc758 \ud2f0\ucf13 \ubc88\ud638\uac00 \uac19\uc2b5\ub2c8\ub2e4.\n* \ud639\uc2dc \uac19\uc740 \ud2f0\ucf13 \ubc88\ud638\uac00 \uc788\ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.\n \n* Two people have the same ticket number.\n* See if anyone else has the same ticket number.","cefe1002":"#### \uac15\uc870 40\n*  DC \ud55c \ubc88 \ud574\ubcf4\uae30","cbfacd80":"# 1. 40 Things to Learn - Python","23130c17":"* Inheritance between classes means that the child class inherits the properties of the parent class. For example, if you have a class called Car, you can create a subclass like Sedan, Truck, or SUV that is a child class that inherits the properties of \"Car Class\". You can use the properties and methods of the parent class in that class.\n* \ud074\ub798\uc2a4 \uac04\uc758 \uc0c1\uc18d(Inheritance)\ub294 \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc18d\uc131\uc744 \uc790\uc2dd \ud074\ub798\uc2a4\uac00 \ubb3c\ub824 \ubc1b\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Car \ub77c\ub294 \ud074\ub798\uc2a4\uac00 \uc788\uc73c\uba74 \"Car Class\" \uc758 \uc18d\uc131\uc744 \uc0c1\uc18d\ubc1b\ub294 \uc790\uc2dd \ud074\ub798\uc2a4\uc778 Sedan, Truck \ub610\ub294 SUV \uc640 \uac19\uc740 \uc11c\ube0c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0\uc11c \ubd80\ubaa8 \ud074\ub798\uc2a4\uc758 \uc18d\uc131\uacfc \uba54\uc11c\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","8d3807dc":" map() function\n\n    list(map(lambda x: x ** 3, range(5)))","07cce645":"#### \uac15\uc870 75\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","1b271e6f":"----------------------------------------------------------\n\n\n## 10 Things to Learn - NumPy","ce1e82d1":"* Fare\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Fgroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.\n* Group Fare with the name of Fgroup","eeaca034":"* \"while loop\" \uc740 \uc870\uac74\uc774 False \uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\ud560 \ub54c \uc4f0\uc774\ub294 \ub8e8\ud504\uc785\ub2c8\ub2e4.\n* \"while loop\" is looping until the condition is False.\n\n* Syntax\n\n           while condition:\n              body\n              \n","a249f963":"* Let's change thickness of lines \uc774\uc81c \uadf8\ub798\ud504\uc758 \ub77c\uc778\uc758 \ub450\uaed8\ub97c \uc124\uc815\ud574 \uc90d\ub2c8\ub2e4\n* linewidth = 5.0 \uc774\ub7f0 \uc2dd\uc744 \uc6b0\uce21\uc5d0 \ub123\uc5b4 \ubd05\ub2c8\ub2e4.\n* linewidth = 5.0 \/ Try this on the right.\n\n      plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\n        plt.xlabel('Year')\n        plt.ylabel('Quantity')\n        plt.xlim(2014,2020)\n        plt.ylim(0,5000)\n        cabbage = [4000, 4200, 3800, 3700, 4100]\n        radish = [2300, 2400, 2200, 2300, 2400]\n        year = [2015, 2016, 2017, 2018, 2019]\n        plt.plot(year,cabbage, 'r', year, radish, 'g', linewidth = 5.0)\n        plt.show","78c8bbcc":"#### \uac15\uc870 38\n*  \ub78c\ub2e4 \ud544\ud130 \uac1c\ub150","04b0d82b":"* \uadf8\ub8f9\ud654\ud558\uace0 \ub2e4\ub978 \uc0c9\uc0c1\uc73c\ub85c \uadf8\ub8f9\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n* Group and display groups in different colors.","a0ee129e":"#### \uac15\uc870 35\n*  super \uc2a4\ud15d \ubcc4\ub85c \ud558\uae30","df51ccb7":"### Task 11 String Formatting","59ac88e2":"* instance \ub294 \ud074\ub798\uc2a4\uc5d0 \uc758\ud574 \uc0dd\uc131\ub418\ub294 \uc624\ube0c\uc81d\ud2b8\ub85c \uac01 \uc778\uc2a4\ud134\uc2a4\ub294 \uace0\uc720\uc758 \uac12\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n* An instance is an object created by the class, and each instance has its own value.\n\nIf \"Basketball Player\" is your class, \"LeBron James\" will be one of unique instances of your class.\n\n    class Car(object):\n            def __init__(self, name):\n                self.name = name\n\n        mycar = Car(\"Bumblebee\")\n        print (mycar.name)","32cd08fa":"#### \uac15\uc870 18\n*  Tuple\uc740 \ubcc0\uacbd\uc774 \ubd88\uac00\ub2a5\ud558\ub2e4 \uba85\uc2ec \/ I intentionally made an error to remind you that Tuple items cannot be replaced.","0e80e691":"#### \uac15\uc870 46\n*  \uc0b0\uc218 \ud574\ubcf4\uae30","8e485fda":"'score'\ub780 'accuracy'\ub97c \ub9d0\ud569\ub2c8\ub2e4. \uc989 \uc704\ub294 \uc6b0\ub9ac \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \uc54c\ub824\uc9c4 \ud2b8\ub808\uc778\uc758 \uc815\ud655\uc131\uc744 \ubcf8 \uac83\uc785\ub2c8\ub2e4.","05eb48e2":"* string \uc704\uce58\uc5d0 \uc811\uadfc\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6c1\ub2c8\ub2e4.\n* Indexing\uc774\ub780 \ud45c\ud604\uc744 \uc501\ub2c8\ub2e4.\n* Let us learn how to access the string position by indexing\n\n* HYUNDAI\ub780 \ub2e8\uc5b4\uc5d0\ub294 \uc54c\ud30c\ubcb3\uc774 7\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* \uccab \ubc88\uc9f8 \uc704\uce58\ub294 1\uc774 \uc544\ub2cc '0'\uc73c\ub85c \uc0c9\uc778\ub418\ubbc0\ub85c \uc544\ub798 7 \uac1c\uc758 \ubb38\uc790\ub294 0, 1, 2, 3, 4, 5, 6 \uc758 \uc704\uce58\ub97c \uac16\uc2b5\ub2c8\ub2e4\n* The word 'HYUNDAI' has seven letters.\n* The first position is indexed as '0' NOT 1, so the seven characters below have positions 0, 1, 2, 3, 4, 5, 6\n\n        H Y U N D A I\n        0 1 2 3 4 5 6","16b910d0":"#### \uac15\uc870 6\n* len()  - \uae38\uc774\n* lower() - \uc18c\ubb38\uc790\n* upper() - \ub300\ubb38\uc790\n* \ub2e8 \uac04\ub2e8\ud55c len() str() int() float()\uacfc\ub294 \ub2ec\ub9ac lower\ub098 upper \uac19\uc740 \uba54\uc18c\ub4dc\ub294 \ubcc0\uc218\uc5d0 \uc810\ucc0d\uace0 \ud568\uc218 \uc801\uc6a9\ud558\ub294 dot notation\uc73c\ub85c \ud55c\ub2e4\ub294 \uac83 \uae30\uc5b5","f52ed962":"#### \uac15\uc870 21\n*  if - else \uac04\ub2e8 \uc608 ","a11c82ad":"* Let's practice basic arithmetics.\n* You can add, subtract and multiply by element.\n* You can add and subtract two arrays.\n* You can also get the trigonometric values of each array.\n* \uae30\ubcf8\uc801\uc778 \uc218\ud559 \ud559\uc2b5\uc744 \ud574\ubd05\ub2c8\ub2e4.\n* \uc694\uc18c\ubcc4\ub85c \ub354\ud558\uae30 \ube7c\uae30 \uacf1\ud558\uae30 \ub4f1\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n* \ub450 \uac1c\uc758 array\ub97c \ub354\ud574 \uc8fc\uace0 \ube84 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 array\uc758 \uc0bc\uac01\ud568\uc218 \uac12\ub3c4 \uad6c\ud560 \uc218 \uc788\ub2e4.","d9729b4e":"* Index the item in a 3X3 Array.\n* Index the position from rows and columns. For example, if it is at the 3rd postion of the 2nd column and the first row, it can be indexed as [0,1,2].\n* 3X3 Array\uc5d0\uc11c \uc544\uc774\ud15c\uc744 \uc778\ub371\uc2f1 \ud569\ub2c8\ub2e4.\n* \ud589\uacfc \uc5f4\uc758 \uc704\uce58\ub97c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 1\ud589\uc758 2\uc5f4 3\ubc88\uc9f8\uc774\uba74 [0,1,2]\ub85c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4.\n    \n        variable[row, column, position]","c37b0453":"#### \uac15\uc870 71 \n*   \ud55c\ubc88 \ud574\ubcf4\uae30","cbdb44a6":"#### \uac15\uc870 37\n*  map()","9dbacd07":"### Task 36 Lambda - map function","179c3830":"* Set\uc740 dictionary\ucc98\ub7fc { }\uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. set \uc740 \uc544\uc774\ud15c\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uc73c\ub098 \ubc18\ubcf5\ub418\ub294 \uc544\uc774\ud15c\uc774 \uc788\uc73c\uba74 \ubc84\ub9bd\ub2c8\ub2e4.\n* Set uses { } just like dictionary does.\n* While other types can have redundant items, a set cannot have any redundant items.\n  \n* Syntax\n \n        mylist = [\u2018John\u2019, \u2018Tom, \u2018John\u2019, \u2018Josh\u2019, \u2018Peter\u2019]\n \n*  If we make the above as a set it becomes         \n \n        (\u2018John\u2019, \u2018Tom, \u2018Josh\u2019, \u2018Peter\u2019} \n        myset = set(mylist) \n        # {\u2018John\u2019, \u2018Tom,  \u2018Josh\u2019, \u2018Peter\u2019}\n \n* Just like sets in mathematics, you can get intersection, union nad difference of two sets.\n \n         c = a.intersection(b)       # c = a & b \uad50\uc9d1\ud569\n         d = a.union(b)              # d = a | b \ud569\uc9d1\ud569\n         e = a.difference(b)         # e = a - b  \uc5ec\uc9d1\ud569","7dc814ca":"### Task 9 - Reorganizing Arrays","afe46482":"#### \uac15\uc870 68\n*   loc - \uad49\uc7a5\ud788 \uc911\uc694","70a31d27":"#### \uac15\uc870 11\n* \ub9ac\uc2a4\ud2b8\ub294 \ub300\uad04\ud638 [ ] \n* \uc22b\uc790, \uc2a4\ud2b8\ub9c1, \ub2e4 \ub418\uba70 \uc911\ubcf5 \uac00\ub2a5, \ubcc0\uacbd \uac00\ub2a5","b73a217a":"#### \uac15\uc870 77\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","2f38a2fc":"### \ud56d\ubaa9 \uace0\ub974\uae30","2b2b5207":"* \ud06c\ub85c\uc2a4 \ud0ed\uc740 \ub2e4\uc2dc \uc2dd\uad6c \ub9ce\uc740 \ucabd\uc740 Pclass3\uc5d0 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n \n* \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uacb0\uacfc\ub294 \ub9e4\uc6b0 \ube44\uc2b7\ud569\ub2c8\ub2e4. \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d1\uc2b9 \ud55c \uc2b9\uac1d\uc740 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc22b\uc790\uac00 \uc62c\ub77c \uac08\uc218\ub85d \uc904\uc5b4 \ub4ed\ub2c8\ub2e4.\n \n* \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ubc30\uc5d0 1-3 \uba85\uc758 \ubd80\ubaa8\uac00\uc788\ub294 \ub204\uad70\uac00\uc5d0\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \ud63c\uc790 \ub610\ud55c \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \uac83\uc73c\ub85c \ud310\uba85\ub418\uace0 \uac00\uc871\uc774 4 \uba85\uc774\uc0c1 \uc788\uc73c\uba74 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uc904\uc5b4 \ub4ed\ub2c8\ub2e4. \uc774\ub294 \uc18c\uc218\uc758 \uac00\uc871\ub4e4\uc774 \uc788\ub294 \uadc0\uc871\uce35\uc774 \uc0dd\uc874\ud558\uace0, \ud63c\uc790\uac00 \ub9ce\uc740 \uc80a\uc740 \uc774\ub4e4\uc740 \uc591\ubcf4\ub97c \ud560 \uc218 \ubc16\uc5d0 \uc5c6\uace0, \uac00\uc871\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4(\ud2b9\ud788 \uadc0\uc871\uc774 \uc544\ub2cc 3\ub4f1\uce78 \uc0ac\ub78c\ub4e4)\uc740 \uc804\uc6d0\uc774 \ud0c0\uc9c0 \ubabb \ud558\uba74 \uc5b4\ub290 \ub204\uad6c\ub3c4 \ud0c8 \uc218\uac00 \uc5c6\ub294 \ube44\uadf9\uc801\uc778 \ub2f9\uc2dc \uc0c1\ud669\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n \n* Crosstab again shows that many family members are in Pclass3.\n \n* The results are very similar here. Passengers boarding with their parents are more likely to survive. But as the number goes up, it decreases.\n \n* Survivability is good for anyone with 1-3 parents on the ship. Alone also turns out to be less viable, and having four or more families reduces their chances of survival. This is a tragic time when aristocrats with a few families survive, many young people alone have to make concessions, and many families (especially non-noble people in third place) cannot ride anyone unless they are all burned. Show the situation.","7e397067":"### Task 7 Making Subplots \/ Subplot \ub9cc\ub4e4\uc5b4 \ubcf4\uae30","1bc5b34b":"* Matplotlib\uc5d0\uc11c\n* Think of figure as a canvas in which we can draw a plot.\n* You can think of plt.subplot as an order of dividing plots and displaying them.\n* plt.subplots (1,2, figsize = (12,6)) indicates subplots with one row, two columns and the total size is 12 inches by 6 inches.\n* If you draw 9 in 3X3, you can put 3,3 instead of 1,2 above.\n \n* Create a space for drawing with axes in the figure\n \n* You can put the y and x axes in the axix (axis).\n* Please check https:\/\/matplotlib.org\/3.1.1\/api\/axes_api.html#matplotlib-axes\n* figure\ub294 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub294 \uce94\ubc14\uc2a4\ub77c \uc0dd\uac01\ud558\uc2dc\uace0 plt.subplot\uc740 \uc774\ub97c \uad6c\ubd84\ud574\uc11c \ub098\ub204\ub294 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. plt.subplots(1,2,figsize=(12,6))\uc774\ub77c\uace0 \ub418\uc5b4 \uc788\ub2e4\uba74 \uc544\ub798 \uc11c\ube0c \ud50c\ub86f\uc744 1\ud589 2\uc5f4, \uc989 2\uac1c \uadf8\ub9ac\ub294 \uac83\uc774\uace0 \uc804\uccb4 \uc0ac\uc774\uc988\ub294 12\uc778\uce58 * 6\uc778\uce58\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. 3X3\uc73c\ub85c 9\uac1c\ub97c \uadf8\ub9b0\ub2e4\uba74 \uc704\uc758 1,2 \ub300\uc2e0 3,3,\uc744 \ub123\uc73c\uba74 \ub418\uaca0\uc9c0\uc694\n \n* figure\uc548\uc5d0 axes\ub85c \uadf8\ub9bc \uadf8\ub9ac\ub294 \uacf5\uac04\uc744 \ub9cc\ub4e4\uace0 axix (\ucd95)\uc5d0 y\uc640 x\ucd95\uc744 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4.\n* subplot sytax \/ subplot\uc758 \ubb38\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n \n         axes = plt.subplots(number of rows, number of columns, figsize=(width in inches, height in inches))","ad1cca92":"#### \uac15\uc870 73\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","c9c2a541":"### Task 7 Dot Notation","638afe54":"#### \"Fare\" \ubd84\uc11d","dee789bb":"#### \uac15\uc870 64\n*  \ud55c\ubc88 \uc529 \ud574\ubcf4\uae30","9f7f5fca":"#### \uac15\uc870 29\n*  \ud30c\ub77c\ubbf8\ud130\uc640 \uc544\uaddc\uba3c\ud2b8 \uac1c\ub150","f010af3f":"### Task 10 - Heatmap","59e14f16":"### Task 35 Lambda","ece11f88":"* Lists are represented in square brackets \u201c[]\u201d and are used to manage data with a single variable.\n* It can be changed and duplicated and so on, so it is used as a general list.\n* \ub9ac\uc2a4\ud2b8\ub294 \ub300\uad04\ud638 \u2018[ ]\u2019\ub85c \ud45c\ud604\ub418\uba70 \ub370\uc774\ud130\ub97c \ud558\ub098\uc758 \ubcc0\uc218\ub85c \uad00\ub9ac\ud560 \ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n* \ubcc0\uacbd \uac00\ub2a5\ud558\uace0, \uc911\ubcf5\ub3c4 \uac00\ub2a5\ud558\uc5ec \uc77c\ubc18\uc801\uc778 \ubaa9\ub85d\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4.\n\n* Syntax\n* \ub9ac\uc2a4\ud2b8\ub294 \uc544\ub798\uc640 \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9d1\ub2c8\ub2e4.\n\n         my_list = [1, 2, 3, \"a\", \"b\", \"c\"]","98c2fb52":"### Task 28 Conditional Statements in Functions","4723b7e5":"* \ub098\uc774\ub85c \ucd94\uce21\ud574\uc11c Mrs.\ub85c \ub123\uc2b5\ub2c8\ub2e4.\n* Let me guess she is Mrs. based on her age.","5327d1a8":"* 1\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uace0, 2\ub4f1\uae09\uc740 \uc0dd\uc874\uc790\uc5d0 \ube44\ud574 \uc0ac\ub9dd\uc790\uac00 \uc870\uae08 \ub354 \ub9ce\uc73c\ub098, 3\ub4f1\uae09\uc740 \uc0ac\ub9dd\uc790\uac00 3\ubc30 \uc774\uc0c1 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* The 1st class cabin has more survivors, the 2nd class has a few more deaths than the survivors, but the 3rd class has three times more deaths.","1196b9cd":"### Task 24 Break","3662669f":"* \uae30\ubcf8 \ud30c\uc77c\uc758 \uc77c\ubd80 \uc5f4\ub9cc \ube7c\uc11c \ub2e4\ub978 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4.\n* You can save as a different dataframe by subtracting only a few columns from the base file","8136a62b":"#### \uac15\uc870 52\n*  \ub77c\ubca8 \ubc94\uc704 \ub9cc\ub4e4\uae30","16b9b70d":"#### \uac15\uc870 23\n*  for in range or list ","12e98a93":"#### \uac15\uc870 50\n*  \ub2e4\ub978 \uc21c\uc11c\ub85c \uc313\uae30","312aa7ac":"* Let's make two new dataframes, one for label encoding, the other for one-hot-encoding\n* \ub450\uac1c\uc758 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ud558\ub098\ub294 \ub808\uc774\ube14 \uc778\ucf54\ub529 \ub2e4\ub978 \ud558\ub098\ub294 \uc6d0\ud56b \uc778\ucf54\ub529 (\ub458\uc774 \uaf2d \ud544\uc694\ud55c \uac83\uc774 \uc544\ub2c8\ub77c \uc5f0\uc2b5\uc774\ub098 \ub450 \uac00\uc9c0 \ubc29 \ubc95 \ubaa8\ub450 \uc0ac\uc6a9\ud574\ubd04)","e09001b7":"#### \uac15\uc870 9\n* [ ]  \uac00 \uc778\ub371\uc2f1\ud560 \ub54c \uc4f0\uc778\ub2e4\n* [2:4] \uc138\ubc88\uca30(\uc704\uce582)\ubd80\ud130 5\ubc88\uc9f8(\uc704\uce584) \uc774\uc804 \uc989 3,4\ubc88 \ud56d\ubaa9\uc744 \uc778\ub371\uc2f1\n* [3:] \ub124\ubc88\uc9f8 \ubd80\ud130 \ub05d\uae4c\uc9c0","fe20d8c7":"When using Google Colab - to upload and use the files\n\n        from google.colab import files\n        uploaded = files.upload()\n\nAnd then\n\n        import io\n        test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n        train = pd.read_csv(io.BytesIO(uploaded['train.csv']))","84bb2bb0":"### Task 30 Instance","55233c88":"### 40. Set","f7168aa2":"* \uc544\ub798\uc640 \uac19\uc774 \uc11c\ube0c\ud50c\ub86f\uc5d0 \ud0c0\uc774\ud2c0, x,y\ub77c\ubca8, x,y \uc218\uce58\ub97c \ub123\uace0 \ubcf8 \uc218\uce58\ub97c \ub123\ub294\ub2e4.\n* Enter the title, x, y labels, x, y values into the subplot as shown below.","1c8c6935":"#### \uac15\uc870 57\n*  \uc11c\ube0c \ud50c\ub86f \uc778\ub371\uc2f1","ad7572fa":"### Task 6 - Methods for Creating Arrays","5b2bef2f":"### Task 1 - read csv","5f935386":"#### Scattered Chart \/ Scattered Chart \ub9cc\ub4e4\uae30\n* \ub77c\uc778\ucc28\ud2b8\ub97c \ud574\ubcf4\uc558\uc73c\ub2c8 scattered chart\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's move on to the scattered chart\n\n* plot \ub300\uc2e0\uc5d0 scatter\ub97c \ub123\uc2b5\ub2c8\ub2e4.\/ Swithc plot -> scatter\n\n      plt.scatter(year,cabbage)\n      plt.scatter(year,radish)\n      plt.show","8bdc4eb0":"### Task 24 - factorize","b7b8c9f2":"#### \uac15\uc870 17\n*  clear() copy() get()   ","a825a5aa":"#### \uac15\uc870 39\n*  LC \ud55c\ubc88 \ud574\ubcf4\uae30","a783bb33":"* \uc704\uc5d0 \ub9cc\ub4e0 \ud568\uc218\ub97c \ud55c \ubc88 \uc368 \uba39\uc5b4 \ubcfc\uae4c\uc694?\n* Let's use a function we made above.","e0929f40":"### Task 6  - Violineplot","e7a368c4":"### 6.1 Turning string to numbers\n\n* Already done above","b21ab671":"## \uc5ec\uae30\uae4c\uc9c0 \ubcf4\uace0 \uc774\uc81c\ub294 One-hot-encoding\ud55c \uac83\uc73c\ub85c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0a3bc6ac":"# 3. 10 Things to Learn - Matplotlib","39dd9fad":"* \ub370\uc774\ud130\ub97c True \ubc0f False\ub85c \ud45c\ud604\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* \uc774\ub294 string, numbers\uc5d0 \uc774\uc5b4\uc11c \uc138\ubc88\uc9f8\ub85c \ubc30\uc6b8 \ub370\uc774\ud130 \ud0c0\uc785\uc785\ub2c8\ub2e4.\n* Sometimes data needs to be represented as True and False.\n* This is the third data type - booleans, strings and numbers.\n\nSytnax\n\n          a >  b     a\ub294 b\ubcf4\ub2e4 \ud07c                   \n          a <  b     a\ub294 b\ubcf4\ub2e4 \uc791\uc74c\n          a == b     a\uc640 b\uc740 \uac19\ub2e4                   \n          a != b     a\uc640 b\ub294 \uac19\uc9c0 \uc54a\uc74c\n          a <= b     a\ub294 b\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc74c      \n          a >= b     a\ub294 b\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc74c\n\n          a <  b     a is less than b           \n          a == b     a and b are equal           \n          a! = b     a and b are not equal           \n          a <= b     a is less than or equal to b           \n          a> = b     a is greater than or equal to b\n      ","b0d0990c":"## 4. Features \ud56d\ubaa9\n\n#### \ud56d\ubaa9\uc758 \uc885\ub958 There are many types of features.\n* \ubc94\uc8fc\ud615 \ud56d\ubaa9 (Categorical Features)\n\n\ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \ub458 \uc774\uc0c1\uc758 \uacb0\uacfc \uc694\uc18c\uac00 \uc788\ub294 \ubcc0\uc218\uc774\uba70 \ud574\ub2f9 \uae30\ub2a5\uc758 \uac01 \uac12\uc744 \ubc94\uc8fc\ubcc4\ub85c \ubd84\ub958 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc131\ubcc4\uc740 \ub450 \uac00\uc9c0 \ubc94\uc8fc (\ub0a8\uc131\uacfc \uc5ec\uc131)\uc758 \ubc94\uc8fc \ud615 \ubcc0\uc218\uc785\ub2c8\ub2e4. \uc774\uc0b0\ud615 \ubcc0\uc218(discrete variable) = \ubc94\uc8fc\ud615 \ubcc0\uc218 (categorical variable) \uc758 \ud558\ub098\ub85c \uba85\ubaa9 \ubcc0\uc218 norminal variable \ub77c\uace0\ub3c4\ud569\ub2c8\ub2e4.\n\nCategorical variables are variables that have more than one result element, and each value of that function can be classified by category. For example, gender is a categorical variable in two categories (male and female). Discrete variable = It is one kind of categorical variable, and is also known as nominal variable .\n\n* \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uba85\ubaa9 \ud56d\ubaa9 : Sex, Embark \uc774\uba70 \uc6b0\ub9ac\ub294 Name, Ticket \ub4f1\uc744 \uc774\ub85c \ubcc0\ud658\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. The nominal items in the data set are: Sex, Embark and we have to convert Name, Ticket, etc to numbers.\n\n* Ordinal Variable :\n\n\uc21c\uc704 \ubcc0\uc218\ub294 \ubc94\uc8fc \ud615\uc758 \ud558\ub098\uc9c0\ub9cc \uadf8 \ucc28\uc774\uc810\uc740 \uac12 \uc0ac\uc774\uc758 \uc0c1\ub300 \uc21c\uc11c(=\uc11c\uc5f4) \ub610\ub294 \uc815\ub82c\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\nOrdinal variables are one of the categorical types, but the difference is the relative order (= sequence) or sorting between the values.\n\n\ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc21c\uc704 \ud56d\ubaa9 : PClass \uc774\uba70 \uc6b0\ub9ac\ub294 Cabin\uc744 \uc774 \ubc94\uc8fc\ub85c \ubcc0\ud658\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\nOrdinal variables in the data set: PClass and we think we should convert Cabin to this category.\n\n* \uc5f0\uc18d\ud615 \ud56d\ubaa9 (Continuous Features):\n\n\uc11c\ub85c \uc5f0\uc18d\ub41c \uac12\uc744 \uac00\uc9c4 \ubcc0\uc218\ub97c \uac00\uc9c4 \ud56d\ubaa9\uc774\uba70 \uc5ec\uae30\uc5d0\uc11c \uc6b0\ub9ac\ub294 \uc5f0\ub839\uc744 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nThis is an item with variables with continuous values, age is one good sample\n\nAge, SipSp, Parch, Fare\ub294 interval variable\ub85c \ub9cc\ub4e4\uc5b4 \uc774\uc5d0 \uc801\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\nAge, SipSp, Parch, and Fare should be catgorized to the interval variable.\n\n* Feature Information\n\n          Variable        Definition                Key\n\n          survival          Survival                    0 = No, 1 = Yes\n\n          pclass          Ticket class                1 = 1st, 2 = 2nd, 3 = 3rd\n\n          sex              Sex    \n\n          Age              Age in years    \n\n          sibsp              # of siblings \/ spouses aboard the Titanic    \n\n          parch              # of parents \/ children aboard the Titanic    \n\n          ticket          Ticket number    \n\n          fare              Passenger fare    \n\n          cabin              Cabin number    \n\n          embarked          Port of Embarkation         C = Cherbourg, Q = Queenstown, S = Southampton","278544ab":"* Learning NumPy is almost the same as learning thins about Array.\n* First import and create a 1X3 array.\n* Dimension is determined by how many brackets it has\n* NumPy\ub97c \ubc30\uc6b0\ub294 \uac83\uc740 Array\ub97c \ubc30\uc6b0\ub294 \uac83\uacfc \uac70\uc758 \uac19\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4.\n* \uc6b0\uc120 import\ub97c \ud558\uace0, 1X3 array\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n* \ucc28\uc6d0\uc744 \uacb0\uc815\ud558\ub294 \uac83\uc740 [ ]\uc758 \uac2f\uc218\uc785\ub2c8\ub2e4.\n* [1,2,3] - 1D [[1,2,3]] - 2D - It looks the same but it could have other array in the same dimension [[[1,2,3]]] - 3D - It also looks the same but i could have other several arrays in the same dimension\n\n        ------------------------------------------------\n\n        [1,2,3]\n\n        ------------------------------------------------\n\n        [1,2,3] [    ]\n        [     ] [    ]\n\n        ------------------------------------------------\n\n        [1,2,3] [    ]\n        [     ] [    ]\n\n                        [     ] [    ]\n                        [     ] [    ]\n\n                                        [     ] [    ]\n                                        [     ] [    ]\n\n        -------------------------------------------------\n\nSyntax 1D\n\n      import numpy as np\n      var = np.array([item1, item2.....])","8574218f":"* Making Axis and Entering Labels \ucd95 \ub9cc\ub4e4\uace0 \ub77c\ubca8 \ub123\uae30\n* x, y \uc591 \ucd95\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc8e0\n* Let's amke x and y axis","c5267a5b":"* Step 1","20da8b09":"#### \uac15\uc870 61\n*  read csv\n\nWhen using Google Colab\n\n        from google.colab import files\n        uploaded = files.upload()\n\nAnd then\n\n        import io\n        test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n        train = pd.read_csv(io.BytesIO(uploaded['train.csv']))","78a1fe2a":"### Task 2 Checkig Datatype, Dimensions, Shape, & Size","3a43d34c":"### Task 8 Titles for Subplots \/ Subplot\uc5d0 Title \ub123\uae30","7b78ec13":"### Extra Trees","52b03a56":"* \ub450\uac1c\uc758 categorical variable\uc758 \uce74\uc6b4\ud2b8\ub97c \ubcf4\uc9c0\uc694\n* hue\uc5d0\ub294 sex\ub97c \ub123\uaca0\uc2b5\ub2c8\ub2e4.","9d4ab9d8":"* \uc0dd\uc874\ub960\ub85c \ubd05\ub2c8\ub2e4.\n* by survival percentage","1c43e23e":"### Task 3 Updating Variables","833e3ba8":"* \uac00\uc7a5 \ube44\uc2b7\ud55c \ubc88\ud638\ub97c \ucc3e\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let's find the similar numbers.","3ce2ec28":"* \uc548\uc804\uc744 \uc704\ud574 \uce74\ud53c\ub97c \ud558\ub098 \ub9cc\ub4e4\uc5b4\uc11c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n* Just in case, let's make a copy of the df and make new features on it.","ac40cda1":"#### \uac15\uc870 27\n*  continue \ub6f0\uc5b4 \ub118\uae30","df7e2f07":"### Task 17 - reset index","1a9b253c":"### Task 13 - Replacing","2f9abd07":"1) \ud3ec\ud2b8 C\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 0.55 \uc815\ub3c4\uc774\uba70 S\ub294 \uac00\uc7a5 \ub0ae\uc2b5\ub2c8\ub2e4.S\uc5d0\uc11c \ud0d1\uc2b9 \ucd5c\ub300. \ub300\ub2e4\uc218\ub294 Pclass3\n\n2) C\uc758 \uc2b9\uac1d\ub4e4\uc740 \ub9ce\uc740 \ube44\uc728\uc774 \uc0b4\uc544\ub0a8\uc558\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 Pclass1 \ubc0f Pclass2 \uc2b9\uac1d\uc774 \ub9ce\uc544\uc11c \uc77c \uac83\uc785\ub2c8\ub2e4\n\n3) Embark S\ub294 \ub300\ubd80\ubd84\uc758 \ubd80\uc790\ub4e4\uc774 \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc9c0\ub9cc \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub0ae\uc2b5\ub2c8\ub2e4. Pclass3\uc758 \uc2b9\uac1d\ub3c4 \ub9ce\uc558\uc2b5\ub2c8\ub2e4.\n\n4) \ud3ec\ud2b8 Q\ub294 \uc2b9\uac1d\uc758 \uac70\uc758 95 %\uac00 Pclass3\n\nobservation :\n\n1) Maximum boarding in S. The majority is Pclass3\n\n2) Passengers of C survived a large proportion. The reason would be due to the large number of Pclass1 and Pclass2 passengers\n\n3) Embark S is the port where most rich people board, but it is unlikely to survive. Lots of passengers in Pclass3.\n\n4) Port Q has almost 95% of passengers Pclass3\n\n* \ube48\uce78\uc774 \ub450\uac1c \uc788\ub294\ub370 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Let us see 2 null values","b5378c41":"#### \"Name\" \ubd84\uc11d\n* \uc774\ub984\uc740 \uac70\uc758 \ubaa8\ub450 \ub2e4\ub97c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4. Family Name, First Name, Middle Name and even Dr. Capt, master and so on \ubaa8\ub450 \uac10\uc548\ud558\uba74...\n* \ubd84\ub958\ub97c \ud55c \ubc88 \ud574 \ubd05\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\ub97c \ud55c \ubc88 \uc8fc \uc6b1 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* The names are most likely different...all of them . Family Name, First Name, Middle Name and even Dr. Given Capt, Master and so on ...\n* Try to classify them.\n* Let's look at the list once.","4a20551a":"### Gradient Boosting Classifier\n* learning_rate\ub294 \uac01 \ud2b8\ub9ac\uc758 \uae30\uc5ec\ub97c \uc904\uc774\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4.\n* n_estimator\ub294 \uac01 \uacbd\uc6b0\uc758 \ud2b8\ub9ac \uc22b\uc790\uc785\ub2c8\ub2e4.","dc21862d":"### Task 37 Lambda - filter function","af81bf55":"#### \uac15\uc870 36\n*  \ub78c\ub2e4\uc640 \uc77c\ubc18 \ud568\uc218\uc758 \ucc28\uc774 \uc124\uba85","805ac5fe":"### Task 33 Override","4fca584b":"### Task 15 - loc","8886a8f0":"* Create an array of all zeros, ones or a certain number.\n* \ubaa8\ub450 0\uc73c\ub85c\ub41c 1\ub85c\ub41c \ub610\ub294 \ub2e4\ub978 \uc22b\uc790\ub85c \ub41c Array\ub97c \ub9cc\ub4e4\uc5b4 \ubcf8\ub2e4.\n* Syntax\n\n        np.zeros(shape) \n        np.ones(shape) \n        np.full( (shape), number)","1abf23d0":"### KNN","fc18f6d0":"### Task 8 - replot","b38ced84":"* \uc774\uc81c \uc6b0\ub9ac\ub294 Initial\uc5d0\uc11c Mr.\ub4f1\uc758 \ud638\uce6d\uc744 \ubf51\uc544\ub0b4\uc5c8\uace0, \uc131\uc744 \ubf51\uc544\ub0b4\uc5c8\uc2b5\ub2c8\ub2e4.\n* Now we have extracted salutations in 'Initial' and last names in 'LastName'\n\n* \uba38\uc2e0\uc774 \uc54c\ud30c\ubcb3\ubcf4\ub2e4\ub294 \uc22b\uc790\ub97c \uc88b\uc544 \ud558\ubbc0\ub85c \uc22b\uc790\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* Since our machine prefers numbers over alphabets, we change them to numbers.\n\n* \uc544, \uadf8\ub7ec\uae30 \uc804\uc5d0 Dona\ub97c \ucc98\ub9ac\ud574\uc57c\uc9c0\uc694.\n* But we have to take care of Dona first.","2907697f":"### Task 5 -  Line Thickness \/ \ub77c\uc778 \ub450\uaed8 \ubc14\uafb8\uae30","3f62be1e":"* StandardScaler\uc758 \uae30\ubcf8 \uac1c\ub150\uc740 \ubd84\ud3ec\uac00 \ud3c9\uade0\uac12 0\uc774\uace0 \ud45c\uc900 \ud3b8\ucc28\uac00 1\uc774\ub418\ub3c4\ub85d \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2a4\ucf00\uc77c\ub7ec\ub97c \uc4f0\uc9c0 \uc54a\uc73c\uba74 \uc544\ub798\uc5d0\uc11c \uc54c\uace0\ub9ac\uc998\uc744 \uc4f8 \ub54c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4.\n* \ucc38\uace0 MinMaxScaler: \uac01 \ud56d\ubaa9\uc744 \uc9c0\uc815\ub41c \ubc94\uc704\ub85c \uc870\uc815\ud558\uc5ec \ubcc0\ud658\ud569\ub2c8\ub2e4.\n* maxAbsScaler: \uac01 \ud56d\ubaa9\uc744 \ucd5c\ub300\uc808\ub300\uac12\uc73c\ub85c \uc870\uc815\ud558\uc5ec \ubcc0\ud658\ud569\ub2c8\ub2e4.\n* StandardScaler \ud3c9\uade0\uc744 \uc81c\uac70\ud558\uace0 \ub2e8\uc704 \ubd84\uc0b0\uc73c\ub85c \uc2a4\ucf00\uc77c\ub9c1\ud558\uc5ec \ud56d\ubaa9\uc744 \ud45c\uc900\ud654, \uc989 \ubaa8\ub4e0 \ud56d\ubaa9\ub4e4\uc774 \uac19\uc740 \uc2a4\ucf00\uc77c\uc744 \uac00\uc9c0\ub294 \uac83\uc785\ub2c8\ub2e4.\n* fit\uacfc transform \uba54\uc11c\ub4dc\ub294 fit \uba54\uc11c\ub4dc\ub85c \ub370\uc774\ud130 \ubcc0\ud658\uc744 \ud559\uc2b5\ud558\uace0, transform \uba54\uc11c\ub4dc\ub85c \uc2e4\uc81c \ub370\uc774\ud130\uc758 \uc2a4\ucf00\uc77c\uc744 \uc870\uc815\ud569\ub2c8\ub2e4.\n* \uc774\ub54c, fit \uba54\uc11c\ub4dc\ub294 \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc5d0\ub9cc \uc801\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \ud6c4, transform \uba54\uc11c\ub4dc\ub97c \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4.","41341c09":"### Task 39 Dictionary Comprehension","a4e591a0":"\uc774\ub97c \ud2b8\ub808\uc778\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ud50c\ub808\uc784\uc758 x\ucd95\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4.","c75bee71":"### Task 20 - groupby - count & mean","57ba9161":"* Survival rates per Embarked ports\n* \uc2b9\uc120 \uc7a5\uc18c \ubcc4\ub85c \uc0dd\uc874 \ud655\ub960","a504a8ec":"* Box Plot\uc744 \uc6b0\uc120 \ubc30\uc6b0\uba70 \uac00\uc7a5 \uac04\ub2e8\ud55c \uc5f0\uc2b5\uc744 \ud55c \ud6c4 \ub2e4\uc591\ud55c \uc608\ub97c \uc811\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* Boxplot\uc740 x\ucd95 y\ucd95\uc774 \uc2e4\uc218\uc774\ub4e0 \ubc94\uc8fc\uc774\ub4e0 \uc0c1\uad00\uc5c6\uc774 \ub2e4\ucc28\uc6d0\uc801\uc778 \ub370\uc774\ud130\ub97c \ubcf4\uc5ec \uc90d\ub2c8\ub2e4. (\ub2e4\ucc28\uc6d0 \ubcf5\ud569\ub370\uc774\ud130\uc6a9)\n* Box Plot\uc740 \ubcc0\uc218 \uac04 \ub610\ub294 \ubc94\uc8fc\ud615 \ubcc0\uc218 \uac04\uc758 \ube44\uad50\ub97c \uc6a9\uc774\ud558\uac8c\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc815\ub7c9\uc801 \ub370\uc774\ud130 \ubd84\ud3ec\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n* data\uc758 size\ub97c x\ucd95\uc73c\ub85c \ud574\uc11c Boxplot\uc744 \ubd05\ub2c8\ub2e4.\n* \n* We will first learn the Box Plot, practice the simplest, and see various examples.\n* \n* Boxplot shows multidimensional data whether the x-axis or y-axis is real or categorical. (For multidimensional composite data)\n* Box Plot shows quantitative data distribution in a way that facilitates comparisons between variables or categorical variables.\n* View the Boxplot with the size of the data as the x-axis.","65da5e6b":"\uc0c8\ub85c\uc6b4 Data Frame\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","99a04afc":"### Task 5 Integers and Floats","f32f2e32":"## 5. \ub370\uc774\ud130 \ud0d0\uad6c  Exploratory Data Analysis\n\n* train\ud30c\uc77c \uc21c\uc11c\ub300\ub85c \ub370\uc774\ud130 \ud30c\uc77c\uc758 \uc5f4\ub4e4\uc744 \ubd05\ub2c8\ub2e4. \n* Let's view the columns of the data file in the order in the train file.\n\n![](https:\/\/1.bp.blogspot.com\/-rBTabaGeOTo\/XicYRmv9s7I\/AAAAAAAAKts\/WQDUpGJbv20xbAO8vfnOkqtbCHyme3zNQCLcBGAsYHQ\/s640\/grey%2Barea.png)","c4fd3591":"#### \uac15\uc870 45\n*  \uc544\uc774\ub374\ud2f0\ud2f0 \ub9e4\ud2b8\ub9ad\uc2a4 \ub9cc\ub4e4\uc5b4 \ubcf4\uae30","cd16fb99":"* Sytnax (\ubb38\ubc95)\n \n*  '#' \ub85c \uc2dc\uc791\ud558\ub294 \ub77c\uc778\uc740 \ucf54\ub529\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc8fc\uc11d\uc774\ub098 \uc124\uba85 \ub4f1\uc744 \ub123\uc744 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n*  '#' means statements following your # won't be included as codes, so that it does not make any errors.\n*  for strings you need either ' '  or \" \" but don't mix \" and ' together.  \uc791\uc740 \ub530\uc634\ud45c (' ')\ub098 \ud070 \ub530\uc634\ud45c (\" \") \ub458 \ubaa8\ub450 \uad1c\ucc2e\uc73c\ub098 \ub458\uc744 \uc11e\uc5ec\uc11c  (' \") \ub610\ub294 (\" ') \ud615\ud0dc\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud569\ub2c8\ub2e4. \n \n*    print  (\"string\")  # \uc2a4\ud2b8\ub9c1\uc774\ub780 \ubb38\uc790\ub97c \ub9d0\ud569\ub2c8\ub2e4 \/ string means alphabets and other characters.\n*    print (number) ","c5f50fe0":"### Task 5 Creating Arrays with 0s, 1s & Other numbers (or random numbers)","cf44422f":"### Task 7 Basic Arithmetics","fcd8ed75":"pairplot\uc740 \uc22b\uc790\ub9cc\uc744 \ub370\uc774\ud130\ub85c \ubc1b\uc544\ub4e4\uc774\uae30 \ub54c\ubb38\uc5d0 \ub370\uc774\ud130\ub97c \ubc14\uafb8\uc5b4\uc57c \ud55c\ub2e4.","35bdc788":"#### \uac15\uc870 49\n*  \uc313\uae30","6f001ee6":"### Task 8 Boolean","1d34d2f4":"### Task 12 - Narrowing Down","6a37b911":"* while if-else is this or the rest, if-elif-else gives you a variety of options.\n* You can use several elifs.\n* if\u2013else\uac00 \uc774 \uac83 \uc544\ub2c8\uba74 \ub098\uba38\uc9c0 \uacbd\uc6b0\ub77c\uba74 if-elif-else\ub294 \ub2e4\uc591\ud55c \uc635\uc158\uc744 \uc90d\ub2c8\ub2e4.\n* elif\uc740 \uc5ec\ub7ec \uac1c\uac00 \uac00\ub2a5\ud558\ubbc0\ub85c \ub2e4\uc591\ud55c \uc870\uac74\uc744 \ud45c\ud604\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* Syntax\n\n        if condition:\n            body\n        elif condition:\n            body\n        else\n            body","ee0ad939":"* \ub450 \ubcc0\uc218 \uc0ac\uc774\uc5d0 \uac04\ub2e8\ud55c scatter plot\uc744 \uadf8\ub9bd\ub2c8\ub2e4.\n* Draw a simple scatter plot between two variables.","ead27e29":"#### \uac15\uc870 76\n*   \ud55c\ubc88 \ud574\ubcf4\uae30","878a6e67":"### XGB Step 3.\n","697c7f00":"* Step 3\n* Now try overriding. (A truck needs $2 worth of gas per every 10 miles)\n* \uc774\uc81c \uc624\ubc84\ub77c\uc774\ub529\ud558\ub294 \uac83\uc744 \ud574\ubd05\ub2c8\ub2e4. (\ud2b8\ub7ed\uc740 10\ub9c8\uc77c\ub2f9 2\ub2ec\ub7ec \ub4e0\ub2e4)","15fa756b":"#### \uac15\uc870 54\n*  \uc0c9 \ubc14\uafb8\uae30 - plot\ubb38\ubc95 \uc775\ud788\uae30","f15c2c36":"* Step 4\n* \ub9c8\uc9c0\ub9c9\uc73c\ub85c super \ub97c \uc0ac\uc6a9\ud558\uc5ec \uace0\uc18d\ub3c4\ub85c\uc5d0\uc11c\ub294 \ud2b8\ub7ed\ub3c4 1\ub2ec\ub7ec\ub9cc \ub4dc\ub294 \uac83\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. highway.milage \ub780 \ud568\uc218\ub97c \uc815\uc758 \ud558\ub294\ub370 return \uac12\uc744 (Truck \ud074\ub798\uc2a4\uc758 self\ub85c \ub418\uc5b4 \uc788\ub294) calculate.mileaage(km) \ub97c super \ud558\uc5ec \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uacf5\uc2dd \ub300\uc2e0 \ub9c8\ub354 \ud074\ub798\uc2a4\uc758 \uacf5\uc2dd\uc73c\ub85c \ubc14\uafb8\ub294 \uae30\ub2a5\uc758 \ud568\uc218\ub97c \uc0dd\uc131\ud558\ub294 \ud615\ud0dc\ub85c \ud569\ub2c8\ub2e4.\n* Finally, we use super and make our fuel cost\/ml to a $1 for a truck on the highway. We define a function called highway.milage, which creates a function that converts the return value (which is the self of the Truck class) into calculate.mileaage (ml) and replaces the formula of the subclass with the formula of the mother class.","1521a777":"#### \uac15\uc870 41\n*  1D array \uc778\ub371\uc2f1 \ud574\ubcf4\uae30","7bef9e40":"* Step 2\n* Now let's look at the truck inheriting just $ 1 per 10 miles in the subclass \"Truck\".\n* \uc774\uc81c \uc11c\ube0c \ud074\ub798\uc2a4\uc778 \ud2b8\ub7ed \ud074\ub798\uc2a4\uc5d0\uc11c \ud2b8\ub7ed\uc774 \uadf8\ub0e5 10 \ub9c8\uc77c\ub2f9 1\ub2ec\ub7ec\ub97c inheritance \ud558\ub294 \uac83\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","bc959540":"### Task 2 - Lineplot","d441aee9":"* let's learn the np.vstack () method\n* This is a method of vertically mounting another array on top of an existing array.\n* np.vstack() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* \uc774\ub294 \uae30\uc874\uc758 \uc5b4\ub808\uc774 \uc704\uc5d0 \ub2e4\ub978 \uc5b4\ub808\uc774\ub97c vertically \uc62c\ub824\uc11c \ud569\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.\n* This is a method of horizontally mounting another array on top of an existing array.\n\n* np.hstack() \uba54\uc18c\ub4dc\ub97c \ubc30\uc6c1\ub2c8\ub2e4.\n* \uc774\ub294 \uae30\uc874\uc758 \uc5b4\ub808\uc774 \uc704\uc5d0 \ub2e4\ub978 \uc5b4\ub808\uc774\ub97c horizontally \uc62c\ub824\uc11c \ud569\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4.\n\nSyntax\n\n        np.vstack(Order)\n        np.hstack(Order)\n\nSample\n\n        a = np.array([1,2,3])\n        b = np.array([4,5,6])\n        c = np.array([7,8,9])\n\n        np.vstack([a,b,c])\n        np.hstack([a,b,c])","5ad8fcb3":"### Task 4 Replacing","95e29919":"#### \uac15\uc870 55\n*  \ub450\uaed8 \ubc14\uafb8\uae30 - plot\ubb38\ubc95 \uc775\ud788\uae30","0f571ced":"* Step 2","77eb776a":"#### \uac15\uc870 62\n*  \ud55c\ubc88 \uc529 \ud574\ubcf4\uae30\n","da74d7dc":"### Task 34 Super","4bd90373":"* \uc55e \ub4a4\ub85c \ubaa8\ub450 S\uc774\uace0 Pclass\ub3c4 \ubaa8\ub450 1\uc778 \uac83\uc73c\ub85c \ubd10\uc11c S\uc77c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4.\n* It is most likely that it is S because both front and back are S and Pclass is all 1.","b75ff899":"### Task 32 Inheritance","168eb04f":"* Last name \uc740 \uc804\ubd80 \uc22b\uc790\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n* Let's change the Last Names to numbers.","8e6ab8ea":"### Task 11 - Regex","56e125da":"### Task 13 List Methods","7fcc86b6":"* This method will replace items inside arrays\n* Array\uc5d0\uc11c \ud2b9\uc815 \uc544\uc774\ud15c\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.\n\n* Sytnax\n\n        variable[position] = item","943b5061":"* \uc704\ub97c \ubcf4\uace0 sex\ub97c \ub0a8,\ub140, 1\uc138 \uc774\ud558 Baby\ub85c \ub098\ub204\uaca0\uc2b5\ub2c8\ub2e4. 1,2,3\ubc88\uc744 \uc8fc\uc9c0\uc624\n* As we see the above, we divide \"sex' into 3 groups, men, women and kids under 13, assigning them 1,2,and 3","c66e3d52":"### Task 9 - Pie Chart","aa8ea40a":"### Task 2 - Lineplots \/ Line Plot \ub9cc\ub4e4\uae30","eacd8f35":"### Priority - (1) Nobles (2) Women in Pclass 1 (3) Babies under 1 (4) Kids under 17 in Pclass 1 & 2  (5) Women in Pclass 2 (6) Higher Fare","6a97b557":"### Task 1 - Countplot","a9a78e69":"#### \uac15\uc870 51\n*  \ucd95 \ub9cc\ub4e4\uae30","b2be6218":"* \"Surived\" \ubd84\uc11d\n\n\ud55c \uc5f4\uc529 \uac80\ud1a0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nWe will look at the columns one by one\n\nSurvived - Key: (0 - Not Survived, 1- Survived)\n\nSurvived\ub294 \uc218\uc790\ub85c \uac12\uc744 \uc8fc\uc9c0\ub9cc Categorical Variable\uc778 \uc148\uc785\ub2c8\ub2e4.\n\n\uc8fd\ub358\uc9c0 \uc0b4\ub358\uc9c0 \ub458 \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc90d\ub2c8\ub2e4.\n\ncountplot\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4.\n\n\uc0ac\uc774\uc988\ub294 \uac00\ub85c 10\uc778\uce58 \uc138\ub85c 2\uc778\uce58\n\n\uc0dd\uc874 \uc5ec\ubd80 0\uacfc 1\uc758 \uc22b\uc790\ub97c \uc138\uc5b4 \ubcf8 \ud6c4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub3c4\ub85d \uba85\ub839\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\npyplot(plt)\uc758 figure\ub77c\ub294 \uba54\uc18c\ub4dc\ub97c \uc368\uc11c \uadf8\ub9bc\ud310\uc758 \ud06c\uae30\ub97c \uc815\ud558\uace0, seaborn\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc744 \uadf8\ub9ac\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\"Survived\" gives a number, but it's a categorical variable.\n\nEither Survived or Not Survived\n\nDraw a countplot.\n\nSize is 10 inches wide by 2 inches long\n\nSurvival counts\n\nUse pyplot (plt) figure method to size the paint and draw a seaborn count plot."}}