{"cell_type":{"60d7decb":"code","b756b35f":"code","26479cd1":"code","ba9eba0f":"code","9ce05a4c":"code","67f9b843":"code","78f287f0":"code","610d28b3":"code","2924de18":"code","55c4e6f0":"code","c22b29d2":"code","883bfb03":"code","654b1134":"code","98f090a2":"code","2f89af6e":"code","8b59b217":"code","ef8d74c8":"code","ca424d34":"code","75491125":"code","f1edc730":"code","50111424":"code","e7d3677c":"code","abac310c":"code","21643542":"code","f3a82d05":"code","a909499f":"code","34cb5cec":"code","27691767":"code","f8aee64c":"code","9624a0dc":"code","6dfefb85":"code","18ec6969":"code","65222314":"code","78292bc3":"code","38fc2f14":"code","82fa9fc3":"code","b4303047":"code","a81af24b":"code","fdfb4c8c":"code","d14cb73d":"code","9eeb0999":"code","2f9daf69":"code","80af6573":"code","842ce2ec":"code","37d792ae":"code","2bfc4352":"markdown","5d4f8307":"markdown","da43627d":"markdown","52758b33":"markdown","e3e61bf2":"markdown"},"source":{"60d7decb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b756b35f":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom numpy.lib.financial import _irr_dispatcher\nfrom pandas.core.algorithms import mode, value_counts\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import metrics\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings('ignore')","26479cd1":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ba9eba0f":"train.head()","9ce05a4c":"train.columns","67f9b843":"train['Survived'].value_counts()","78f287f0":"train.drop(['Cabin'],axis=1,inplace=True)","610d28b3":"train.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)","2924de18":"train.head()","55c4e6f0":"train.shape","c22b29d2":"train.Sex=train.Sex.map({'female':0, 'male':1})\ntrain.Embarked=train.Embarked.map({'S':0, 'C':1, 'Q':2,'nan':'NaN'})","883bfb03":"train.dropna(inplace=True)","654b1134":"train.isnull().sum()","98f090a2":"sns.distplot(train['Survived'],fit=norm)","2f89af6e":"sns.countplot(x='Age', data=train)","8b59b217":"sns.countplot(train['Survived'])","ef8d74c8":"from sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","ca424d34":"\ntrain['Age'] = train['Age'].fillna(train['Age'].median())\ntrain['Fare'] = train['Fare'].fillna(train['Fare'].median())\ntrain['Embarked'] = train['Embarked'].fillna(train['Embarked'].mode())\ntrain = pd.get_dummies(train)\ntrain.info()","75491125":"x_train,x_test,y_train,y_test=train_test_split(\n    train.drop([\"Survived\"],axis=1),\n    train.Survived,\n    test_size=0.2,\n    random_state=0,\n    stratify=train.Survived\n)\n","f1edc730":"x_train.shape","50111424":"x_train.head()","e7d3677c":"lr=LogisticRegression(max_iter=2000)\nlr.fit(x_train,y_train)\nY_pred=lr.predict(x_test)\naccuracy_score(y_test,Y_pred)\n","abac310c":"svc = SVC(probability = True)\ncv = cross_val_score(svc,x_train,y_train,cv=5)\nprint(cv)\nprint(cv.mean())\nSVM = SVC(gamma = 0.25,C=3)\nSVM.fit(x_train,y_train)\npred2 = SVM.predict(x_test)\nprint(\"svm is predicting at {0:.2g}%\".format(SVM.score(x_test,y_test)*100))","21643542":"from sklearn.neighbors import KNeighborsClassifier\nclassifier= KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(x_train,y_train)\npred = classifier.predict(x_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test,pred ))\n","f3a82d05":"from sklearn.tree import DecisionTreeClassifier\nDecisionTree = DecisionTreeClassifier(random_state=0)\nDecisionTree.fit(x_train,y_train)\npred = DecisionTree.predict(x_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test,pred ))","a909499f":"test.head()","34cb5cec":"test.isnull().sum()","27691767":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)","f8aee64c":"titles={'Sir':\"officer\", 'Mme':\"normlad\", 'Mr':\"norm\", 'Master':\"normlad\", 'Don':\"officer\", 'Miss':\"normlad\", 'Lady':\"normlad\", 'Mlle':\"normlad\", 'Col':\"officer\", 'Ms':\"normlad\", 'the Countess':\"royal\", 'Mrs':\"normlad\", 'Major':\"officer\", 'Capt':\"officer\", 'Dr':\"officer\", 'Rev':\"officer\", 'Jonkheer':\"royal\"}","9624a0dc":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head()","6dfefb85":"#converting string values(Categorical Values) to integer\ntest.Sex=test.Sex.map({\"female\":0,\"male\":\"1\"})\ntest.Embarked=test.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ntest.Name=test.Name.map({\"royal\":0,\"normlad\":1,\"officer\":2,\"norm\":3})\ntest.head()","18ec6969":"test.isnull().sum()","65222314":"#Replacing all the null values\ntest.fillna(test.Age.mean(),inplace=True)","78292bc3":"test.isnull().sum()","38fc2f14":"test[\"Age\"]=round((test.Age-test.Age.mean()\/ test.Age.std()))\ntest[\"Fare\"]=round((test.Fare-test.Fare.mean())\/test.Fare.std())","82fa9fc3":"test.describe()","b4303047":"test.head()","a81af24b":"test.shape","fdfb4c8c":"df=test.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)","d14cb73d":"df.shape","9eeb0999":"df.head()","2f9daf69":"pred = lr.predict(df)","80af6573":"pred","842ce2ec":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": pred\n    })\nsubmission.to_csv('submission.csv', index=False)","37d792ae":"pred_finale = pd.read_csv('submission.csv')","2bfc4352":"# Data visualisation******","5d4f8307":"# Data loading******","da43627d":" # Titanic - Machine Learning from Disaster","52758b33":"<img src= \"https:\/\/www.historic-uk.com\/wp-content\/uploads\/2017\/04\/the-sinking-of-the-rms-titanic.jpg\" alt =\"Titanic\" style='width: 1000px;'>","e3e61bf2":"# Modeling******"}}