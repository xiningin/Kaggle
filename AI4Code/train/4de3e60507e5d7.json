{"cell_type":{"a04cd3db":"code","bde263b2":"code","2499ab96":"code","b0470875":"code","35eaecd2":"code","daa15292":"code","d37cd332":"code","b9e9b99d":"code","c1ded9b2":"code","ebacfc17":"code","5c880b0d":"code","5cd5124c":"code","5ced2e6c":"code","82bbf44d":"code","0fcf29cc":"code","f10e791b":"code","c2c3fd32":"code","e17e8885":"code","e63e367b":"code","2a324d37":"code","e0e3cde0":"code","1e80b048":"code","730de0aa":"code","b0785956":"code","79054742":"code","950fe939":"code","01bdf044":"code","19d323b5":"code","0f6879a5":"code","7d7c0734":"code","a89d5deb":"code","2f6a33bf":"code","21ddb8e0":"code","532a3ebf":"code","fb96c785":"code","788f78cf":"code","66ac0363":"markdown","552d1f74":"markdown","f71f12e4":"markdown","4fadcf4d":"markdown","9a1a95b3":"markdown","09b87d89":"markdown","20c13f61":"markdown","7eee8c84":"markdown","6be4a1fd":"markdown","a9d0126b":"markdown","da8b3d31":"markdown","eed4a1a7":"markdown","7fde970d":"markdown","701c8837":"markdown","542c940e":"markdown","cd46883e":"markdown","e0d1d180":"markdown","f470e1fa":"markdown"},"source":{"a04cd3db":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.options.display.max_columns = 100\npd.options.display.max_colwidth = 200\npd.options.display.max_rows = 500\n\nimport os\nprint(os.listdir(\"..\/input\"))","bde263b2":"import glob\nimport json\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport gc\n\n%matplotlib inline","2499ab96":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/sample_submission.csv\")\nlabels_df = pd.read_csv(\"..\/input\/labels.csv\")","b0470875":"print(\"[train]\")\nprint(len(train_df))\nprint(Counter(map(lambda x: x.split(\".\")[-1], os.listdir(\"..\/input\/train\/\"))))\n\nprint(\"[test]\")\nprint(len(test_df))\nprint(Counter(map(lambda x: x.split(\".\")[-1], os.listdir(\"..\/input\/test\/\"))))","35eaecd2":"len(labels_df)","daa15292":"labels_df[\"attribute_type\"] = labels_df.attribute_name.apply(lambda x: x.split(\"::\")[0])\nprint(labels_df[\"attribute_type\"].value_counts())\nlabels_df.attribute_type.value_counts().plot.bar()","d37cd332":"labels_df.query(\"attribute_type == 'culture'\").index ","b9e9b99d":"labels_df.query(\"attribute_type == 'tag'\").index ","c1ded9b2":"labels_df[:398].head(10)","ebacfc17":"labels_df[398:].head(10)","5c880b0d":"train_attr_ohot = np.zeros((len(train_df), len(labels_df)), dtype=int)\n\nfor idx, attr_arr in enumerate(train_df.attribute_ids.str.split(\" \").apply(lambda l: list(map(int, l))).values):\n    train_attr_ohot[idx, attr_arr] = 1","5cd5124c":"names_arr = labels_df.attribute_name.values\ntrain_df[\"attribute_names\"] = [\", \".join(names_arr[arr == 1]) for arr in train_attr_ohot]","5ced2e6c":"train_df[\"attr_num\"] = train_attr_ohot.sum(axis=1)\ntrain_df[\"culture_attr_num\"] = train_attr_ohot[:, :398].sum(axis=1)\ntrain_df[\"tag_attr_num\"] = train_attr_ohot[:, 398:].sum(axis=1)","82bbf44d":"train_df.head()","0fcf29cc":"# count how many items per attribute and tag\ncounter = dict()\n\nfor k,v in train_df.iterrows():\n    for an in v.attribute_names.split(','):\n        an = an.strip()\n        if an in counter.keys():\n            counter[an]+= 1\n        else:\n            counter[an] = 1","f10e791b":"s = pd.Series(counter, name='item_count')\ndf_attr_cnt = s.reset_index()\ndf_attr_cnt = df_attr_cnt.rename(columns={'index':'attribute'})\ndf_attr_cnt.head()","c2c3fd32":"df_attr_cnt = df_attr_cnt.sort_values('item_count', ascending=False)\ndf_attr_cnt.head()","e17e8885":"df_attr_cnt.tail()","e63e367b":"df_attr_cnt.plot(kind='bar',x='attribute', y='item_count', figsize=(200,5))","2a324d37":"train_df.attr_num.value_counts().sort_index()","e0e3cde0":"train_df.culture_attr_num.value_counts().sort_index()","1e80b048":"train_df.tag_attr_num.value_counts().sort_index()","730de0aa":"fig = plt.figure(figsize=(15, 10))\nfig.subplots_adjust(hspace=0.4)\nax1 = fig.add_subplot(3,1,1)\nsns.countplot(train_df.attr_num,)\nax1.set_title(\"number of attributes each art has\")\nax2 = fig.add_subplot(3,1,2,)\nsns.countplot(train_df.culture_attr_num, ax=ax2)\nax2.set_title(\"number of 'culture' attributes each art has\")\nax3 = fig.add_subplot(3,1,3,)\nax3.set_title(\"number of 'tag' attributes each art has\")\nsns.countplot(train_df.tag_attr_num, ax=ax3)","b0785956":"pd.pivot_table(\n    train_df, index='culture_attr_num', columns='tag_attr_num', values='attr_num',\n    aggfunc=len)","79054742":"train_df.culture_attr_num.value_counts(normalize=True).sort_index()","950fe939":"train_df.tag_attr_num.value_counts(normalize=True).sort_index()","01bdf044":"train_df.sort_values(by=\"culture_attr_num\", ascending=False).head(15)","19d323b5":"train_df.sort_values(by=\"tag_attr_num\", ascending=False).head(15)","0f6879a5":"from PIL import Image","7d7c0734":"fig = plt.figure(figsize=(5 * 5, 5 * 6))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df.sort_values(by=\"culture_attr_num\", ascending=False)[[\"id\", \"attribute_names\"]].values[:15]):\n    ax = fig.add_subplot(5, 3, i \/\/ 3 * 3 + i % 3 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","a89d5deb":"fig = plt.figure(figsize=(5 * 6, 5 * 5))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df.sort_values(by=\"tag_attr_num\", ascending=False)[[\"id\", \"attribute_names\"]].values[:15]):\n    ax = fig.add_subplot(5, 3, i \/\/ 3 * 3 + i % 3 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","2f6a33bf":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 1][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","21ddb8e0":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 2][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","532a3ebf":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 3][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","fb96c785":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 4][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","788f78cf":"fig = plt.figure(figsize=(5 * 8, 5 * 7))\nfig.subplots_adjust(wspace=0.6, hspace=0.6)\nfor i, (art_id, attr_names) in enumerate(train_df[train_df.tag_attr_num == 5][[\"id\", \"attribute_names\"]].values[:49]):\n    ax = fig.add_subplot(7, 7, i \/\/ 7 * 7 + i % 7 + 1)\n    im = Image.open(\"..\/input\/train\/{}.png\".format(art_id))\n    ax.imshow(im)\n    im.close()\n    attr_split = attr_names.split(\", \")\n    attr_culture = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:7] == \"culture\", attr_split)))\n    attr_tag = list(map(lambda x: x.split(\"::\")[-1], filter(lambda x: x[:3] == \"tag\", attr_split)))\n    ax.set_title(\"art id: {}\\nculture: {}\\ntag: {}\".format(art_id, attr_culture, attr_tag))","66ac0363":"### number of _\"culture\"_ attributes each art has","552d1f74":"### arts with 3 _tag_ attributes","f71f12e4":"### arts with 5 _tag_ attributes","4fadcf4d":"There is difference between the distribution of number of culture attributes and one of tag attributes.  \n\nThe number of _culture_ attributes 99% of arts have is 0 or 1 or 2, moreover, **80% is 1**.  \nOn the other hands, the number of _tag_ attributes shows a **gentler** slope from 1 to 5. Very few of arts have no tag attribute.\n\nI think these observations may be useful for deciding thresholds ofclassifiers. \n\n\nNext, I show the arts which have many culuture or tag attributes. ","9a1a95b3":"### plots","09b87d89":"Since I have poor knowledge of art, cannot validate _culture_ attributes.\n\nHow about _tag_ attributes? They are relatively interpretable, but may be splitable into some types:\n\n* objects painted (or carved) on arts: animals, humans, places, ...\n* type of arts: 'cups', 'coat of arms', 'textiles'. 'dishes', 'vines'...\n* special situations: 'nativity', 'last jugement', 'crucifixion',...\n* actions: 'hourse riding', 'reading', 'suffering', ...\n* ...\n\nTherefore, I think it may be useful for classification to consider type of _tag_ attribute.\n<br>\n<br>\n<br>\nWith respect to number, pictures tend to have more _tag_ attributes because of painted objects on them.  \nI have one assumption that number of tag attributes depends on type of arts. Then, check several examples.","20c13f61":"### arts with 1 _tag_ attribute","7eee8c84":"### arts with 2 _tag_ attributes","6be4a1fd":"### arts with many _tag_ attirbutes","a9d0126b":"### number of _\"tag\"_ attributes each art has","da8b3d31":"## number of images by attribute","eed4a1a7":"It seems that more _tag_ attributes arts have, more complex they are.\n\nMost of arts with one _tag_ attributes are single objects such as ornaments.  \nIn contrast, most of arts with five ones are pictures or objects with complex design.\n\nMaybe, we can predict number of _tag_ attributes by **_complexity_** of arts ?","7fde970d":"### arts with many _culture_ attributes","701c8837":"### arts with 4 _tag_ attributes","542c940e":"## check labels","cd46883e":"## check attibure_id's frequency in train","e0d1d180":"### number of attributes each art has","f470e1fa":"It is difficult for me to find somthing from these tables. Let's show images of arts in these tables."}}