{"cell_type":{"da7ae97f":"code","fb0bc877":"code","28f22ce8":"code","d8d6abc7":"code","aeb8badb":"code","7fbe1c7a":"code","febf9438":"code","507ee7aa":"code","af156163":"code","27f7f0f8":"code","bb918de2":"code","a113242e":"code","eb3aebbd":"code","3ad46e1a":"code","b011c52c":"code","b27e5044":"code","53008609":"markdown","6cfe45dc":"markdown","bf265e0a":"markdown"},"source":{"da7ae97f":"import numpy as np\nimport pandas as pd\nimport copy\nimport time\nfrom tqdm import tqdm","fb0bc877":"import json\nimport os\nfrom os.path import join as path_join\n\n\ndef load_data(path):\n    tasks = pd.Series()\n    for file_path in os.listdir(path):\n        task_file = path_join(path, file_path)\n\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n\n        tasks[file_path[:-5]] = task\n    return tasks","28f22ce8":"train_tasks = load_data('..\/input\/abstraction-and-reasoning-challenge\/training\/')\nevaluation_tasks = load_data('..\/input\/abstraction-and-reasoning-challenge\/evaluation\/')\ntest_tasks = load_data('..\/input\/abstraction-and-reasoning-challenge\/test\/')\n\ntrain_tasks.head()","d8d6abc7":"class Box():\n    \n    def __init__(self, coords = (0,0), color = 1, style = \"individual\", parent_object = None):\n        super(Box, self).__init__()      \n        self.coords = coords #tuple coordinate\n        self.color = color #one of the 10 scalar choices\n        self.style = style #boundary, edge, line, individual, crossline, pinpal, body are some styles available.. more can be added\n        self.parent_object = parent_object\n    \n    def get_cardinal_neighbors(self, image_xlen, image_ylen):\n        \n        x = self.coords[0]\n        y = self.coords[1]   \n        neibors = []\n        \n        if y <= image_ylen-2:\n            neibors.append((x, y+1))\n        else:\n            pass\n        if x <= image_xlen-2:\n            neibors.append((x+1,y))\n        else:\n            pass\n        if y != 0:\n            neibors.append((x, y-1))\n        else:\n            pass\n        if x != 0:\n            neibors.append((x-1, y))\n        else:\n            pass\n        \n        return neibors\n                   ","aeb8badb":"class ACRObject():\n    def __init__(self, boxes=[], object_no = None, comp_of = None, style = \"independent\"):\n        super(ACRObject, self).__init__()      \n        self.boxes = set(boxes) #set of boxes\n        self.object_no = object_no #scalar id number in corresponding dict\n        self.links = set([])\n        self.components = set([]) #set of components\n        self.component_of = comp_of\n        self.style = style\n        \n    def get_centroid(self):\n        center_x = 0\n        center_y = 0\n        #print(\"getting centroid..\")\n        for box in self.boxes:\n            center_x += box.coords[0]\n            center_y += box.coords[1]\n            #print(\"box x\", box.coords[0])\n            #print(\"box y\", box.coords[1])\n        return (center_x\/len(self.boxes), center_y\/len(self.boxes))\n    \n    def get_centroid_with_comps(self):\n        center_x = 0\n        center_y = 0\n        count_boxes = 0\n        for box in self.boxes:\n            center_x += box.coords[0]\n            center_y += box.coords[1]\n            count_boxes += 1\n        for comp in self.components:\n            for box in comp.boxes:\n                center_x += box.coords[0]\n                center_y += box.coords[1]\n                count_boxes += 1\n        return (center_x\/count_boxes, center_y\/count_boxes)\n    \n    def get_moment(self):\n        centroid = self.get_centroid()\n        total_distance = 0\n        for box in self.boxes:\n            distance = ((box.coords[0]-centroid[0])**2 + (box.coords[1]-centroid[1])**2)**0.5\n            total_distance += distance\n        return (total_distance)\/len(self.boxes)\n    \n    def get_moment_with_comps(self):\n        #print(\"getting moment of object\")\n        centroid = self.get_centroid_with_comps()\n        #print(\"centroid of object \", centroid)\n        total_distance = 0\n        total_boxes = 0\n        for box in self.boxes:\n            distance = ((box.coords[0]-centroid[0])**2 + (box.coords[1]-centroid[1])**2)**0.5\n            total_distance += distance\n            total_boxes += 1\n        for comp in self.components:\n            for box in comp.boxes:\n                distance = ((box.coords[0]-centroid[0])**2 + (box.coords[1]-centroid[1])**2)**0.5\n                total_distance += distance\n                total_boxes += 1\n        return (total_distance)\/total_boxes\n    \n    def extend_boxes(self,box):\n        self.boxes.add(box)\n        self.centroid = self.get_centroid() #update the centroid\n        \n    def get_minmax_x(self):\n        min_x = 10000\n        max_x = 0\n        for box in self.boxes:\n            if box.coords[0] < min_x:\n                min_x = box.coords[0]\n            if box.coords[0] > max_x:\n                max_x = box.coords[0]\n        return (min_x,max_x)\n    \n    def get_minmax_y(self):\n        min_y = 10000\n        max_y = 0\n        for box in self.boxes:\n            if box.coords[1] < min_y:\n                min_y = box.coords[1]\n            if box.coords[1] > max_y:\n                max_y = box.coords[1]\n        return (min_y,max_y)","7fbe1c7a":"class Grid():\n    def __init__(self, image):\n        super(Grid, self).__init__()      \n        self.image = np.array(image)\n        self.width = self.image.shape[0]\n        self. height = self.image.shape[1]\n        self.box_dict = {}\n        self.object_dict = {}\n    \n    def get_boxes(self):\n        for i in range(self.width):\n            for j in range(self.height):\n                if (i,j) not in self.box_dict.keys():\n                    self.box_dict[i,j] = Box((i,j),self.image[i,j])\n    \n    def conglomerate(self, box):\n        ACRO = box.parent_object\n        neib_coords = box.get_cardinal_neighbors(self.width, self.height)\n        #print(\"coagulate for box \", box.coords)\n        for neib in neib_coords:\n            #print(\"nieb box \", neib)\n            try:\n                neib_box = self.box_dict[neib]\n            except:\n                print(\"box dict \", self.box_dict.keys())\n                print(self.width, self.height, neib, box.coords)\n            if neib_box.color == box.color and\\\n                neib_box.parent_object != None: #if box already was assigned\n                ACRO = neib_box.parent_object\n                box.parent_object = ACRO\n                ACRO.extend_boxes(box)\n\n        for neib in neib_coords:\n            #print(\"nieb box \", neib)\n            try:\n                neib_box = self.box_dict[neib]\n            except:\n                print(\"box dict \", self.box_dict.keys())\n                print(self.width, self.height, neib, box.coords)        \n            if neib_box.color == box.color and\\\n                neib_box.parent_object == None: #if box is not adopted yet\n                neib_box.parent_object = ACRO\n                ACRO.extend_boxes(neib_box)\n                #ACRO = self.conglomerate(neib_box)\n            \n        return ACRO\n    \n    def get_objects(self):\n        for box_xy, box in self.box_dict.items():\n            #print(\"box \", box_xy)\n            #key n=0 ne=1 e=2 se=3 s=4 sw=5 w=6 nw=7\n            if box.parent_object == None:  #don't forget the following 4 lines whenever creating new object\n                total_objects = len(self.object_dict.keys())\n                new_object = ACRObject([box],object_no=total_objects+1)\n                self.object_dict[total_objects+1] = new_object\n                box.parent_object = new_object\n                consolidated_object = self.conglomerate(box)\n            \n    def link_objects(self, ACRO1, ACRO2): #link will be a searchable action\n        ACRO1.link_list.add(ACRO2)\n        ACRO2.link_list.add(ACRO1)\n        \n    def move_object(self, move=(0,0), ACRO=None): #move tuple will be a searchable parameter\n        \n        check = True\n        for box in ACRO.boxes:\n            xn = box.coords[0]+move[0]\n            yn = box.coords[1]+move[1]\n            if xn > self.width-1 or xn < 0:\n                check = False\n            elif yn > self.height-1 or yn < 0:\n                check = False\n            if check:\n                if self.image[xn,yn] != 0: #if the box to move is occupied\n                    check = False    \n        if check:\n            for box in ACRO.boxes:\n                xn = box.coords[0]+move[0]\n                yn = box.coords[1]+move[1]\n                old_coords = box.coords\n                box.coords = (xn,yn)\n                old_box = self.box_dict[xn,yn] #the box at destination coordinates\n                old_box.coords = old_coords #this is more like a swap than a move\n\n                self.image[xn,yn] = box.color #update the grid image new loc\n                self.box_dict[xn,yn] = box #update box dict new location\n\n                self.image[old_coords[0],old_coords[1]] = old_box.color #update image old loc\n                self.box_dict[old_coords[0], old_coords[1]] = old_box #update box dict old loc\n            return \"ok\"\n        else:\n            return False\n    \n    def copy_object(self, copy=(0,0), ACRO=None): #copy tuple will be a searchable parameter\n        \n        total_objects = len(self.object_dict.keys())\n        ACRO2 = ACRObject()\n        ACRO2 = ACRO\n        ACRO2.object_no=total_objects+1\n        self.object_dict[total_objects+1] = ACRO2\n        \n        max_x = ACRO2.get_minmax_x()[1]\n        min_x = ACRO2.get_minmax_x()[0]\n        max_y = ACRO2.get_minmax_y()[1]\n        min_y = ACRO2.get_minmax_y()[0]\n                \n        check = True\n        \n        for box in ACRO2.boxes:\n            \n            box.parent_object = ACRO2  #since it was copied from ACRO1, we need to update it\n            \n            xn = box.coords[0]+copy[0]\n            yn = box.coords[1]+copy[1]   \n            \n            if copy[0] < (max_x - min_x) and copy[1] < (max_y - min_y): # if copy distance is too short\n                check = False\n            elif xn > self.width-1 or xn < 0:\n                check = False\n            elif yn > self.height-1 or yn < 0:\n                check = False\n            if check:\n                if self.image[xn,yn] != 0: #if the box to move is occupied\n                    check = False\n        if check:\n            for box in ACRO2.boxes:\n                \n                xn = box.coords[0]+copy[0]\n                yn = box.coords[1]+copy[1] \n\n                box.coords = (xn,yn) #update box coords\n                self.image[xn,yn] = box.color #update the grid image\n                self.box_dict[xn,yn] = box #update box dict\n            return \"ok\"\n        else:\n            return \"fail\"\n                    \n    def find_object_components(self):\n        print(\"finding components\")\n        for obj_grp, obj in object_dict.items():\n            neib_objs = set()\n            print(\"obj number\", obj_grp)\n            for box_no, box in enumerate(obj.boxes):\n                neib_coords = box.get_cardinal_neighbors(self.width, self.height)\n                for neib in neib_coords:\n                    neib_box = self.box_dict[neib]\n                    if neib_box.color != 0: #we do not need to add background object\n                        neib_objs.add(neib_box.parent_object)\n            if len(neib_objs) == 1: #if there is only one neighboring object \n                if obj.component_of != neib_objs[0]: #if it is not a component of the intended component\n                    if neib_obj.component_of != None: #if the neibhoring object is not already a component\n                        obj.components.add(neib_objs[0])\n                        neib_objs.component_of = obj\n\n    def link_objects(self, Grid2):\n        print(\"linking objects\")\n        for obj_grp1, obj1 in self.object_dict.items():\n            print(\"processing obj no \", obj_grp1)\n            print(\"obj centroid \", obj1.get_centroid())\n            obj1_mwc = obj1.get_moment_with_comps()\n            print(\"object moment with comps\", obj1_mwc)\n            for obj2_grp, obj2 in Grid2.object_dict.items():\n                obj2_mwc = obj2.get_moment_with_comps()\n                if obj2 != obj1 and obj2_mwc == obj1_mwc and obj2_mwc != 0.0: #we don't want to link all single cells\n                    if obj1 not in obj2.links and obj2 not in obj1.links:\n                        obj1.links.add(obj2)\n                        obj2.links.add(obj1)            ","febf9438":"class Single_Object_Action():\n    def __init__(self, obj = None, params = (), action = \"\", grid = None):\n        self.object = obj\n        self.params = params #tuple\n        self.action = action\n        self.grid = grid\n    def apply(self):\n        result = eval(\"self.grid.\"  + self.action + \"(self.params,self.object)\")    ","507ee7aa":"class PlanningGraph(): \n    def __init__(self, input_grid, output_grid):\n        self.ingrid = input_grid\n        self.goalgrid = output_grid\n        self.list_of_grps_of_act_obj_grid = []\n   \n    def get_input_objects(self):\n        self.input_objects = self.ingrid.get_objects()\n    \n    def get_output_objects(self):\n        self.output_objects = self.goalgrid.get_objects()\n        \n    def get_following_grids(self, grid):\n        # Grid can be also thought of as a node in the planning graph.\n        single_object_actions = [\"copy_object\"] #move_object and many others to be added here\n        double_object_actions = [\"copy_with_ref_obj\", \"superimpose_obj\"] #many others to be added here\n        list_next_grids = []\n        for obj_no, obj in grid.object_dict.items():\n            for action in single_object_actions:\n                for x in range(grid.width):\n                    for y in range(grid.height):\n                        next_grid = copy.deepcopy(grid)\n                        proposed_action = Single_Object_Action(obj,(x,y),action,next_grid)\n                        if proposed_action.apply() == \"ok\":\n                            next_grid.former_actions.append(proposed_action)\n                            list_next_grids.append(next_grid)\n        return list_next_grids\n    \n    def compare_images(self,grid1,grid2):\n        total_boxes = 0\n        total_correct = 0\n        print(\"image shapes\")\n        print(\"grd1\", grid1.image.shape)\n        print(\"grd2\", grid2.image.shape)\n        print(\"grd1 wid and hei\", grid1.width, grid1.height)\n        for i in range(grid1.width):\n            for j in range(grid1.height):\n                total_boxes += 1\n                if grid1.image[i,j] == grid2.image[i,j]:\n                    total_correct += 1\n        return (total_correct\/total_boxes)\n    \n    def compare_grids(self,grid1,grid2):\n        print(\"comparing grids\")\n        objs_in_gr1_not_gr2 = []\n        objs_in_gr2_not_gr1 = []\n        \n        for obj_gr1, obj1 in grid1.object_dict.items():\n            check = False\n            for obj_gr2, obj2 in grid2.object_dict.items():\n                if obj2.get_centroid() == obj1.get_centroid() and\\\n                    obj2.get_moment() == obj1.get_moment():\n                    check = True\n            if not check:\n                objs_in_gr1_not_gr2.append(obj1.get_centroid())\n            else:\n                pass\n            \n        for obj_gr2, obj2 in grid2.object_dict.items():\n            check = False\n            for obj_gr1, obj1 in grid1.object_dict.items():\n                if obj1.get_centroid() == obj2.get_centroid() and\\\n                    obj1.get_moment() == obj2.get_moment():\n                    check = True\n            if not check:\n                objs_in_gr2_not_gr1.append(obj2.get_centroid())\n            else:\n                pass\n                \n        return  objs_in_gr1_not_gr2, objs_in_gr2_not_gr1\n            \n    def search_graph(self,grid, score_dict): #start with ingrid and score_dict={ingrid:0}\n        for next_grid in self.get_following_grids(grid):\n            print(next_grid)\n            score = self.compare_images(next_grid, self.goalgrid)\n            score_dict[score] = next_grid\n        print(\"score_dict\", score_dict)\n        best_grid = max(score_dict,key=score_dict.get)\n        max_score = score_dict[best_grid]\n        if max_score > score_dict[grid]:\n            return self.search_graph(best_grid, score_dict)\n        else:\n            return best_grid","af156163":"sample_pic = train_tasks[10]['train'][1][\"input\"]\nsample_out = train_tasks[10]['train'][1][\"output\"]\n\nsample_grid = Grid(copy.deepcopy(sample_pic))\nsample_grid.get_boxes()\nprint(\"sample grid width\", sample_grid.width)\nprint(\"sample grid height\", sample_grid.height)\n\nsample_grid.get_objects()\nsample_grid.link_objects(sample_grid) #link within itself\nobj2copy = sample_grid.object_dict[2]\nallowed = sample_grid.copy_object((2,0),obj2copy)\nprint(\"is copy allowed?\", allowed)\n\ngrid_image = np.ones((sample_grid.width,sample_grid.height))\n\nfor box_co, box in sample_grid.box_dict.items():\n    grid_image[box_co[0],box_co[1]] = box.parent_object.object_no","27f7f0f8":"import matplotlib.pyplot as plt\nfrom matplotlib import colors\n\n\ncmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25', '#530C25', '#3429C3', '#4E34CD', '#9A2B14'])\nnorm = colors.Normalize(vmin=0, vmax=10)\n    \ndef plot_pictures(pictures, labels):\n    fig, axs = plt.subplots(1, len(pictures), figsize=(2*len(pictures),32))\n    for i, (pict, label) in enumerate(zip(pictures, labels)):\n        axs[i].imshow(np.array(pict), cmap=cmap, norm=norm)\n        axs[i].set_title(label)\n    plt.show()\n    \n\ndef plot_sample(sample, predict=None):\n    if predict is None:\n        plot_pictures([sample['input'], sample['output']], ['Input', 'Output'])\n    else:\n        plot_pictures([sample['input'], sample['output'], predict], ['Input', 'Output', 'Predict'])","bb918de2":"print(\"objects and links\")\nfor obj_no in sample_grid.object_dict.keys():\n    obj = sample_grid.object_dict[obj_no]\n    print(\"object number\", obj_no)\n    print(\"object centroid\", obj.get_centroid())\n    count = 0\n    for linked_obj in obj.links:\n        count += 1\n        print(\"linked obj no \", count)\n        print(\"linked obj centroid \", linked_obj.get_centroid())    ","a113242e":"plot_pictures([sample_pic, grid_image], ['sample_input','grid_image'])","eb3aebbd":"def solve_train(train_task):\n\n    input_pic = train_task['train'][1][\"input\"]\n    output_pic = train_task['train'][1][\"output\"]\n\n    input_grid = Grid(copy.deepcopy(input_pic))\n    input_grid.get_boxes()\n    input_grid.get_objects()\n\n    output_grid = Grid(copy.deepcopy(output_pic))\n    output_grid.get_boxes()\n    output_grid.get_objects()\n\n    if input_grid.image.shape != output_grid.image.shape:\n        print(\"input output images must be same size!\")\n    else:\n        graph = PlanningGraph(input_grid, output_grid)\n        solution_grid = graph.search_graph(graph.ingrid,{graph.ingrid:0})\n        solution_image = solution_grid.image\n\n        plot_pictures([input_pic, output_pic, solution_image], ['sample_input','sample_output','solution_image'])\n        ","3ad46e1a":"def find_changes(train_task):\n    \n    input_pic = train_task['train'][1][\"input\"]\n    output_pic = train_task['train'][1][\"output\"]\n\n    input_grid = Grid(copy.deepcopy(input_pic))\n    input_grid.get_boxes()\n    input_grid.get_objects()\n        \n    output_grid = Grid(copy.deepcopy(output_pic))\n    output_grid.get_boxes()\n    output_grid.get_objects()\n  \n    graph = PlanningGraph(input_grid, output_grid)\n    \n    objs_in_gr1_not_gr2, objs_in_gr2_not_gr1 = graph.compare_grids(input_grid,output_grid)\n   \n    for obj_cntr in objs_in_gr1_not_gr2:\n        cntr1 = obj_cntr[0]\n        cntr2 = obj_cntr[1]\n        print(f'Centroid is {cntr1:.2f} {cntr2:.2f}')\n\n    plot_pictures([input_pic, output_pic], ['sample_input','sample_output'])\n","b011c52c":"for train_task in train_tasks:\n    find_changes(train_task)","b27e5044":"seconds = time.time()\nfor train_task in train_tasks:\n    solve_train(train_task)\n    break\n    if time.time() - seconds > 20000:\n        break","53008609":"# Model","6cfe45dc":"# Data Loading","bf265e0a":"The two main functions are:\n1. Identification and attribution of objects and shapes\n2. Using search to establish relations between the attributes of different objects"}}