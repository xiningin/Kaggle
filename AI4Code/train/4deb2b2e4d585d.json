{"cell_type":{"49ce2485":"code","14abd29f":"code","3036eedd":"code","b3e0ea9e":"code","b8978e2c":"code","0a8c3d11":"code","1c413c11":"code","582b9ec6":"code","6d535b90":"code","ff66c936":"code","0b2f7756":"markdown","bc1e9ec4":"markdown","3e79a87c":"markdown","63e4621c":"markdown","1d805e07":"markdown","5ddadb23":"markdown","94fc12b3":"markdown","975641e3":"markdown","766f34e5":"markdown","41bb26ae":"markdown","d5b19d26":"markdown"},"source":{"49ce2485":"import pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport warnings\n\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntrain.columns = train.columns.str.lower() # low case letters for column names just for comfortable coding \ntest.columns = test.columns.str.lower()\n\nprint ('\\033[4m\\033[1m' + 'Train table info' + '\\033[0m')\ndisplay(train.info())\nprint ('\\033[4m\\033[1m' + 'Test table info' + '\\033[0m')\ndisplay(test.info())","14abd29f":"general=pd.concat([train,test], axis=0)\n\ngeneral['fare'] = general.groupby('pclass')['fare'].transform(lambda x: x.fillna(x.median()))\ngeneral['embarked'] = general.groupby(['pclass'])['embarked'].transform(lambda x:x.fillna(x.value_counts().idxmax()))\ngeneral['title'] = general['name'].apply(lambda x: re.search(' ([A-Za-z]+)\\.', x).group(1).lower())\ngeneral['age'] = general.groupby(['sex','pclass','title'])['age'].transform(lambda x: x.fillna(x.median()))\ngeneral['age'] = general.groupby(['sex','pclass'])['age'].transform(lambda x: x.fillna(x.median())) #Drop 'title' category to fill in the rest of NA's\n\ndisplay(general.head(3))","3036eedd":"general['deck'] = general['cabin'].fillna('U').str[0] # 'U' for unknown\ngeneral['family_size'] = general['parch'] + general['sibsp']+1\ndef age_cat(age):\n    if age <= 5:\n        return 1\n    if age <= 10:\n        return 2\n    if age <= 15:\n        return 3\n    if age <= 35:\n        return 4\n    if age <= 55:\n        return 5      \n    else:\n        return 6\ngeneral['age_cat'] = general['age'].apply(age_cat)","b3e0ea9e":"train_filled = general.head(891)\ntest_filled = general.tail(418)\ntest_filled = test_filled.drop('survived', axis=1)","b8978e2c":"categories = ['survived','sex', 'pclass', 'embarked', 'age', 'family_size', 'deck', 'title']\ncolors = ['darkkhaki','rosybrown', 'seagreen', 'lightsteelblue', 'goldenrod', 'darkcyan','indianred', 'orange']\nc=0\nfor i in categories:\n    fig = px.histogram(train_filled, x=i, color_discrete_sequence=[colors[c]])\n    fig.show()\n    c+=1","0a8c3d11":"print ('\\033[4m\\033[1m' + 'Gender' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='sex', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Class' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='pclass', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Embarked' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='embarked', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Age category' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='age_cat', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Family size' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='family_size', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Deck' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='deck', values='survived'))\nprint ('\\033[4m\\033[1m' + 'Title' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index='title', values='survived'))","1c413c11":"fig, ax = plt.subplots(figsize=(15,8))\nsns.heatmap(train_filled.corr(), annot=True, cmap='Greens')\nplt.show()","582b9ec6":"print ('\\033[4m\\033[1m' + 'Gender + Class + Age Category' + '\\033[0m')\ndisplay(pd.pivot_table(train_filled, index=['sex','pclass', 'age_cat'], values='survived'))","6d535b90":"test_filled.loc[(test_filled['sex']=='female'), 'survived'] = 1\ntest_filled.loc[(test_filled['sex']=='male'), 'survived'] = 0\ntest_filled['survived'] = test_filled['survived'].astype('int')\n\ntest_filled.loc[(test_filled['sex']=='female') & (test_filled['pclass']==3) & (test_filled['age_cat'].isin([5,6])), 'survived'] = 0\ntest_filled.loc[(test_filled['sex']=='male') & (test_filled['pclass'].isin([1,2])) & (test_filled['age_cat'].isin([1,2,3])), 'survived'] = 1","ff66c936":"test_filled = test_filled[['passengerid', 'survived']]\ntest_filled = test_filled.rename(columns={'passengerid': 'PassengerId', 'survived': 'Survived'})\ntest_filled.to_csv('titanic_noml_ver0.csv', index=False)","0b2f7756":"## Conclusion\nThis solution scored **0.76794** wich is slightly better than the defoult 'gender_submission' with its 0.76555, but cannot compete with the ML solution.\n\n**Better use Machine Learning))**\n","bc1e9ec4":" Let's find out what most affected the survival rate.","3e79a87c":"Generate an output file","63e4621c":"## Data Analysis\nAs we filled NA's we can split tables back for analysis.","1d805e07":"# Titanic Solution without Machine Learning\nThe purpose of this work is to find out if it is possible to get an acceptable result in Titanic Competition without Machine Learning.","5ddadb23":"As we can see, several categories had the greatest impact on survival:\n+ Gender\n+ Class\n+ Age category\n\nLet's combine them","94fc12b3":"Let's make histograms to estimate the quantitative indicators of the categories. I will use 'Plotly' as it is interactive.","975641e3":"## Creating new categories\nAs we [know](https:\/\/www.encyclopedia-titanica.org\/deck-plan-key.html), the letter in cabin number means deck, so we create a 'deck' column. Also we add information about family size, and split the 'age' into categories.","766f34e5":"Let's mark all females as 'survaved', all males as 'not survived' and then let's fill in exceptions using the table above:\n\n**Females who didn't survived:**\n+ Class 3 and Age Category 5 or older\n\n**Males who survived:**\n+ Class 1 or 2 and Age Category 3 or younger\n","41bb26ae":"## Filling NA's\nFor more accurate filling the missing values, we **combine** the tables. We also create a **'title'** column that contains the honorific from the 'name' column to more accurately fill in the missing age values.","d5b19d26":"Let's find out how the categories correlate to each other"}}