{"cell_type":{"59bcef5f":"code","54226ac4":"code","f989c898":"code","85bcc0e2":"code","53b6de9a":"code","1edfaf0d":"code","04fee736":"code","be2d5049":"code","106075b1":"code","e3afbfb7":"code","79810330":"code","1a815420":"code","3be05108":"code","ac3ca864":"code","b5b2aca3":"code","989a8897":"code","e70e891f":"code","de06d088":"code","e40640de":"code","0bb6f3fa":"code","1698a580":"code","62f2a318":"code","fca7d5a0":"code","f27644ef":"code","7eb7e6ab":"code","5d4c579e":"code","f068e7f3":"code","8a3f1c93":"code","8044e376":"code","3bb8b47b":"code","d49b079c":"code","7a4b264a":"code","624d873c":"code","d1340d2b":"code","d1139c65":"code","e5c99ef5":"code","647bf753":"code","dd3757ae":"code","09e7bf05":"code","f154e69e":"code","7bb476e8":"code","698cee41":"code","8b41f3d1":"code","1f139385":"code","03b28fe0":"code","f58f3e2c":"code","07e665eb":"code","62d955ea":"code","2090b540":"code","a440ebd3":"code","e9c8dbc6":"code","dc32d273":"code","e5ccb4ce":"code","0cc1bfcf":"code","3ff0bf81":"code","f6989b28":"code","91712f6c":"code","1bb3d372":"code","4334654f":"code","27be8dec":"code","e5e2e28c":"code","dcfe737b":"code","0dd4ef0c":"code","48427b74":"code","741ee819":"code","de836d1d":"code","7b845561":"code","c5ccabc6":"code","e7228caa":"code","6ee0b4ea":"code","04ab3ba5":"code","898e11a2":"code","a21d1e29":"code","cc435403":"code","be354c0c":"code","48be6c4e":"code","2e13f738":"code","1d79e0af":"code","8dcff25f":"code","eaabff3c":"code","5d90ea10":"code","57a328b0":"code","0b471b34":"code","101a7717":"code","9b56a3d8":"code","8b06c3ab":"code","7f718cc5":"code","44460c88":"code","218fbb09":"code","517c377c":"code","7cbead66":"code","d0486738":"code","58c5e6ca":"code","aae733a0":"code","a3ffd580":"code","f0f6c86d":"code","eeb431ac":"code","28f698de":"code","807cbee7":"code","f2cd167d":"code","0125aee0":"markdown","4e25e549":"markdown","4579c3dc":"markdown","e91c5a7d":"markdown","aee51d59":"markdown","21673815":"markdown","1fc1fc79":"markdown","35742750":"markdown","a55cd749":"markdown","ec3f18c4":"markdown","fadfa60b":"markdown","184cb3a5":"markdown","05420fe5":"markdown","712747aa":"markdown","c5fac292":"markdown","8bf74fc1":"markdown","13ab91fe":"markdown","5811f4f1":"markdown","38691d3d":"markdown","58f3a72b":"markdown","a1d785f3":"markdown","520476be":"markdown"},"source":{"59bcef5f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pathlib import Path, PurePath\n\nplt.style.use('seaborn-notebook')\npath = Path(r\"..\/input\/house-prices-advanced-regression-techniques\") #Path().resolve()\/\"data\"\ndf = pd.read_csv(path\/\"train.csv\", index_col=\"Id\")\ndf","54226ac4":"df.info()","f989c898":"df.describe()","85bcc0e2":"print(f\"Skewness: {df['SalePrice'].skew()}\")\nprint(f\"Kurtosis: {df['SalePrice'].kurt()}\")","53b6de9a":"# Big thank you to Vahe Hakobyan for teaching this\n\ntrain_data = df.copy()\ntrain_data[\"dist\"] = \"train\"\ntest_data = pd.read_csv(path\/'test.csv')\ntest_data[\"dist\"] =  \"test\"\n\ndist_df = train_data.append([test_data])\n\ntarget_columns = \"SalePrice\"\ncorr_matrix = df.corr()\n\nnumeric_columns = list(corr_matrix.columns[1:-1].values)\ncategorical_columns = [col for col in dist_df.columns if col not in list(corr_matrix.columns.values)][:-1]\n\nnum_rows, num_cols = 9, 4\nfig, ax = plt.subplots(num_rows, num_cols, figsize = (18, 32))\n\nfor row in range(num_rows):\n    for col in range(num_cols):\n        index = row * num_cols + col\n        if index < len(numeric_columns):\n            sns.histplot(\n                x = numeric_columns[index], \n                data = dist_df, \n                ax = ax[row][col], \n                hue = \"dist\", \n                stat = \"probability\", \n                kde = True, \n                fill = False).set_title(numeric_columns[index])\n\nplt.tight_layout()","1edfaf0d":"fig, ax = plt.subplots(num_rows,num_cols, figsize = (18, 32))\nfor row in range(num_rows):\n    for col in range(num_cols):\n        index = row * num_cols + col\n        if index < len(categorical_columns):\n            sns.countplot(\n                y = categorical_columns[index], \n                data = dist_df, \n                ax = ax[row][col], \n                hue = \"dist\").set_title(categorical_columns[index])\n\nplt.tight_layout();","04fee736":"mask = np.triu(np.ones_like(corr_matrix, dtype = bool))\nfig, ax = plt.subplots(figsize = (13, 10))\ncmap = sns.diverging_palette(275, 150, s = 120, l = 55, as_cmap = True)\n\nsns.heatmap(corr_matrix, mask = mask, cmap = cmap, vmax = 0.9, vmin = -0.9, center = 0, linewidths = 0.3, cbar_kws = {\"shrink\": 0.75});","be2d5049":"garage_year_df = pd.DataFrame()\n\ngarage_year_df[\"YearBuilt\"] = df[\"GarageYrBlt\"][df[\"GarageYrBlt\"] != 0]\ngarage_year_df[\"Finish\"] = df[\"GarageFinish\"][df[\"GarageYrBlt\"] != 0]\ngarage_year_df[\"SalePrice\"] = df[\"SalePrice\"][df[\"GarageYrBlt\"] != 0]\nsns.jointplot(data = garage_year_df, x = \"YearBuilt\", y = \"SalePrice\", hue = \"Finish\", height = 8).plot_joint(sns.kdeplot);","106075b1":"g1 = sns.catplot(x=df[\"MSSubClass\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng1.set_xticklabels([\"2-STORY 1946 & NEWER\",\"1-STORY 1946 & NEWER ALL STYLES\",\"2-STORY 1945 & OLDER\",\"1-1\/2 STORY FINISHED ALL AGES\",\"2 FAMILY CONVERSION - ALL STYLES AND AGES\",\"1-1\/2 STORY - UNFINISHED ALL AGES\",\"DUPLEX - ALL STYLES AND AGES\",\"1-STORY PUD (Planned Unit Development) - 1946 & NEWER\",\"1-STORY 1945 & OLDER\",\"SPLIT FOYER\",\"SPLIT OR MULTI-LEVEL\",\"2-STORY PUD - 1946 & NEWER\",\"2-1\/2 STORY ALL AGES\",\"PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\",\"1-STORY W\/FINISHED ATTIC ALL AGES\"])\ng1.fig.suptitle(\"Type of the dwelling\", x = 0.6, y = 1.04)\ng1.set(xlabel=\"Type\", ylabel=\"Price\")\nplt.xticks(rotation=90);","e3afbfb7":"g2 = sns.catplot(x=df[\"MSZoning\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng2.fig.suptitle(\"General Zoning Classification\", x = 0.6, y = 1.04)\ng2.set_xticklabels(['Residential Low Density','Residential Medium Density','Commercial','Floating Village Residential',\"Residential High Density\"])\ng2.set(xlabel=\"Zone Class\", ylabel=\"Price\")\nplt.xticks(rotation = 90);","79810330":"df[\"LotFrontage\"].fillna(0, inplace = True)\ng3 = sns.relplot(x=df[\"LotFrontage\"], y =df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng3.fig.suptitle(\"Linear Feet of Street Connected to Property\", x = 0.6, y = 1.04)\ng3.set(xlabel=\"Feet\", ylabel=\"Price\");","1a815420":"g4 = sns.relplot(x=df[\"LotArea\"], y =df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng4.fig.suptitle(\"Lot size\", x = 0.6, y = 1.04)\ng4.set(xlabel=\"Size (in square feet)\", ylabel=\"Price\");","3be05108":"g5 = sns.catplot(x=df[\"Street\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng5.fig.suptitle(\"Type of Road Access to Property\", x = 0.6, y = 1.04)\ng5.set_xticklabels([\"Paved\",\"Gravel\"])\ng5.set(xlabel=\"Type\", ylabel=\"Price\");","ac3ca864":"df[\"Alley\"].fillna(\"No Access\", inplace = True)\ng6 = sns.catplot(x=df[\"Alley\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng6.fig.suptitle(\"Type of Alley Access to Property\", x = 0.6, y = 1.04)\ng6.set_xticklabels([\"No Access\",\"Gravel\",\"Paved\"])\ng6.set(xlabel=\"Type\", ylabel=\"Price\");","b5b2aca3":"g7 = sns.catplot(x=df[\"LotShape\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng7.fig.suptitle(\"General Shape of Property\", x = 0.6, y = 1.04)\ng7.set_xticklabels([\"Regular\",\"Slightly Irregular\",\"Moderately Irregular\",\"Irregular\"])\ng7.set(xlabel=\"Shape\", ylabel=\"Price\")\nplt.xticks(rotation=90);","989a8897":"g8 = sns.catplot(x=df[\"LandContour\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng8.fig.suptitle(\"Flatness of The Property\", x = 0.6, y = 1.04)\ng8.set(xlabel=\"Flatness\", ylabel=\"Price\")\ng8.set_xticklabels([\"Near Flat\/Level\",\"Banked - Quick and significant rise from street grade to building\",\"Depression\",\"Hillside - Significant slope from side to side\"])\nplt.xticks(rotation=90);","e70e891f":"g9 = sns.catplot(x=df[\"Utilities\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng9.fig.suptitle(\"Type of Utilities Available\", x = 0.6, y = 1.04)\ng9.set_xticklabels([\"All public Utilities\",\"Electricity and Gas Only\"])\ng9.set(xlabel=\"Utilities\", ylabel=\"Price\");","de06d088":"g10 = sns.catplot(x=df[\"LotConfig\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng10.fig.suptitle(\"Lot Configuration\", x = 0.6, y = 1.04)\ng10.set(xlabel=\"Configuration\", ylabel=\"Price\")\ng10.set_xticklabels([\"Inside\",\"Frontage on 2 sides of property\",\"Corner lot\",\"Cul-de-sac\",\"Frontage on 3 sides of property\"])\nplt.xticks(rotation=90);","e40640de":"g12 = sns.catplot(x=df[\"Neighborhood\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng12.fig.suptitle(\"Physical Neighbourhood\", x = 0.6, y = 1.04)\ng12.set(xlabel=\"Neighbourhood\", ylabel=\"Price\")\ng12.set_xticklabels([\"College Creek\",\"Veenker\",\"Crawford\",\"Northridge\",\"Mitchell\",\"Somerset\",\"Northwest Ames\",\"Old Town\",\"Brookside\",\"Sawyer\",\"Northridge Heights\",\"North Ames\",\"Sawyer West\",\"Iowa DOT and Rail Road\",\"Meadow Village\",\"Edwards\",\"Timberland\",\"Gilbert\",\"Stone Brook\",\"Clear Creek\",\"Northpark Villa\",\"Bloomington Heights\",\"Briardale\",\"South & West of Iowa State University\",\"Bluestem\"])\nplt.xticks(rotation=90);","0bb6f3fa":"g13 = sns.catplot(x=df[\"Condition1\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng13.fig.suptitle(\"Proximity To Various Conditions\", x = 0.6, y = 1.04)\ng13.set(xlabel=\"Conditions\", ylabel=\"Price\")\ng13.set_xticklabels([\"Normal\",\"Adjacent to feeder street\",\"Near positive off-site feature\",\"Adjacent to arterial street\",\"Adjacent to East-West Railroad\",\"Within 200' of North-South Railroad\",\"Adjacent to North-South Railroad\",\"Adjacent to postive off-site feature\",\"Within 200' of East-West Railroad\"])\nplt.xticks(rotation=90);","1698a580":"g14 = sns.catplot(x=df[\"Condition2\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng14.fig.suptitle(\"Proximity To Various Conditions (if more than one is present)\", x = 0.6, y = 1.04)\ng14.set(xlabel=\"Conditions\", ylabel=\"Price\")\ng14.set_xticklabels([\"Normal\",\"Adjacent to arterial street\",\"Within 200' of North-South Railroad\",\"Adjacent to feeder street\",\"Near positive off-site feature\",\"Adjacent to postive off-site feature\",\"Adjacent to North-South Railroad\",\"Adjacent to East-West Railroad\"])\nplt.xticks(rotation=90);","62f2a318":"g15 = sns.catplot(x=df[\"BldgType\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng15.fig.suptitle(\"Type of Dwelling\", x = 0.6, y = 1.04)\ng15.set(xlabel=\"Type\", ylabel=\"Price\")\ng15.set_xticklabels([\"Single-family Detached\",\"Two-family Conversion; originally built as one-family dwelling\",\"Duplex\",\"Townhouse End Unit\",\"Townhouse Inside Unit\"])\nplt.xticks(rotation=90);","fca7d5a0":"g16 = sns.catplot(x=df[\"HouseStyle\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng16.fig.suptitle(\"Style of Dwelling\", x = 0.6, y = 1.04)\ng16.set(xlabel=\"Style\", ylabel=\"Price\")\ng16.set_xticklabels([\"Two story\",\"One story\",\"One and one-half story: 2nd level finished\",\"One and one-half story: 2nd level unfinished\",\"Split Foyer\",\"Split Level\",\"Two and one-half story: 2nd level unfinished\",\"Two and one-half story: 2nd level finished\"])\nplt.xticks(rotation=90);","f27644ef":"g17 = sns.catplot(x=df[\"OverallQual\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng17.fig.suptitle(\"Rates of The Overall Material of The House\", x = 0.6, y = 1.04)\ng17.set(xlabel=\"Rate\", ylabel=\"Price\");","7eb7e6ab":"g18 = sns.catplot(x=df[\"OverallCond\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng18.fig.suptitle(\"Rates of The Overall Condition of The House\", x = 0.6, y = 1.04)\ng18.set(xlabel=\"Rate\", ylabel=\"Price\");","5d4c579e":"g19 = sns.relplot(x = df[\"YearBuilt\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng19.fig.suptitle(\"Original Construction Date\", x = 0.6, y = 1.04)\ng19.set(xlabel=\"Year\", ylabel=\"Price\");","f068e7f3":"g20 = sns.relplot(x = df[\"YearRemodAdd\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng20.fig.suptitle(\"Remodel Date\", x = 0.6, y = 1.04)\ng20.set(xlabel=\"Year\", ylabel=\"Price\");","8a3f1c93":"g21 = sns.catplot(x=df[\"RoofStyle\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng21.fig.suptitle(\"Type of Roof\", x = 0.6, y = 1.04)\ng21.set(xlabel=\"Type\", ylabel=\"Price\");","8044e376":"g22 = sns.catplot(x=df[\"RoofMatl\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng22.fig.suptitle(\"Roof Material\", x = 0.6, y = 1.04)\ng22.set(xlabel=\"Material\", ylabel=\"Price\")\ng22.set_xticklabels([\"Composite Shingle\",\"Wood Shingles\",\"Metal\",\"Wood Shakes\",\"Membrane\",\"Gravel & Tar\",\"Roll\",\"Clay or Tile\"])\nplt.xticks(rotation=90);","3bb8b47b":"g23 = sns.catplot(x=df[\"Exterior1st\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng23.fig.suptitle(\"Exterior Covering On House\", x = 0.6, y = 1.04)\ng23.set(xlabel=\"Material\", ylabel=\"Price\")\ng23.set_xticklabels([\"Vinyl Siding\",\"Metal Siding\",\"Wood Siding\",\"Hard Board\",\"Brick Face\",\"Wood Shingles\",\"Cement Board\",\"Plywood\",\"Asbestos Shingles\",\"Stucco\",\"Brick Common\",\"Asphalt Shingles\",\"Stone\",\"Imitation Stucco\",\"Cinder Block\"])\nplt.xticks(rotation=90);","d49b079c":"g24 = sns.catplot(x=df[\"Exterior2nd\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng24.fig.suptitle(\"Exterior Covering On House (if more than one material)\", x = 0.6, y = 1.04)\ng24.set(xlabel=\"Material\", ylabel=\"Price\")\ng24.set_xticklabels([\"Vinyl Siding\",\"Metal Siding\",\"Wood Siding\",\"Hard Board\",\"Plywood\",\"Wood Siding\",\"Cement Board\",\"Brick Face\",\"Stucco\",\"Asbestos Shingles\",\"Brick Common\",\"Imitation Stucco\",\"Asphalt Shingles\",\"Stone\",\"Other\",\"Cinder Block\"])\nplt.xticks(rotation=90);","7a4b264a":"g25 = sns.catplot(x=df[\"MasVnrType\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng25.fig.suptitle(\"Masonry Veneer Type\", x = 0.6, y = 1.04)\ng25.set(xlabel=\"Type\", ylabel=\"Price\")\ng25.set_xticklabels([\"Brick Face\",\"None\",\"Stone\",\"Brick Common\"])\nplt.xticks(rotation=90);","624d873c":"g26 = sns.relplot(x = df[\"MasVnrArea\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng26.fig.suptitle(\"Masonry Veneer Area\", x = 0.6, y = 1.04)\ng26.set(xlabel=\"Area (in square feet)\", ylabel=\"Price\");","d1340d2b":"g27 = sns.catplot(x=df[\"ExterQual\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng27.fig.suptitle(\"The Quality of The Material On The Exterior\", x = 0.6, y = 1.04)\ng27.set(xlabel=\"Quality\", ylabel=\"Price\")\ng27.set_xticklabels([\"Good\",\"Average\",\"Excellent\",\"Fair\"]);","d1139c65":"g28 = sns.catplot(x=df[\"ExterCond\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng28.fig.suptitle(\"The Condition of The Material On The Exterior\", x = 0.6, y = 1.04)\ng28.set(xlabel=\"Condition\", ylabel=\"Price\")\ng28.set_xticklabels([\"Average\",\"Good\",\"Fair\",\"Poor\",\"Excellent\"]);","e5c99ef5":"g29 = sns.catplot(x=df[\"Foundation\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng29.fig.suptitle(\"Type of Foundation\", x = 0.6, y = 1.04)\ng29.set(xlabel=\"Type\", ylabel=\"Price\")\ng29.set_xticklabels([\"Poured Contrete\",\"Cinder Block\",\"Brick & Tile\",\"Wood\",\"Slab\",\"Stone\"])\nplt.xticks(rotation=90);","647bf753":"df[\"BsmtQual\"].fillna(\"No Basement\", inplace = True)\ng30 = sns.catplot(x=df[\"BsmtQual\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng30.fig.suptitle(\"The Height of The Basement\", x = 0.6, y = 1.04)\ng30.set(xlabel=\"Height Satisfactory\", ylabel=\"Price\")\ng30.set_xticklabels([\"Good\",\"Average\",\"Excellent\",\"No Basement\",\"Fair\"])\nplt.xticks(rotation=90);","dd3757ae":"df[\"BsmtCond\"].fillna(\"No Basement\", inplace = True)\ng31 = sns.catplot(x=df[\"BsmtCond\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng31.fig.suptitle(\"The Condition of The Basement\", x = 0.6, y = 1.04)\ng31.set(xlabel=\"Condition\", ylabel=\"Price\")\ng31.set_xticklabels([\"Average\",\"Good\",\"No Basement\",\"Fair\",\"Poor\"])\nplt.xticks(rotation=90);","09e7bf05":"df[\"BsmtExposure\"].fillna(\"No Basement\", inplace = True)\ng32 = sns.catplot(x=df[\"BsmtExposure\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng32.fig.suptitle(\"Walkout or Garden Level Walls\", x = 0.6, y = 1.04)\ng32.set(xlabel=\"State\", ylabel=\"Price\")\ng32.set_xticklabels([\"No Exposure\",\"Good Exposure\",\"Minimum Exposure\",\"Average Exposure\",\"No Basement\"])\nplt.xticks(rotation=90);","f154e69e":"df[\"BsmtFinType1\"].fillna(\"No Basement\", inplace = True)\ng33 = sns.catplot(x=df[\"BsmtFinType1\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng33.fig.suptitle(\"Rating of Basement Finished Area (First)\", x = 0.6, y = 1.04)\ng33.set(xlabel=\"Rating\", ylabel=\"Price\")\ng33.set_xticklabels([\"Good Living Quarters\",\"Average Living Quarters\",\"Unfinished\",\"Average Rec Room\",\"Below Average Living Quarters\",\"No Basement\",\"Low Quality\"])\nplt.xticks(rotation=90);","7bb476e8":"g34 = sns.relplot(x = df[\"BsmtFinSF1\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng34.fig.suptitle(\"First Basement Finished Area\", x = 0.6, y = 1.04)\ng34.set(xlabel=\"Area (in square feet)\", ylabel=\"Price\");","698cee41":"df[\"BsmtFinType2\"].fillna(\"No Basement\", inplace = True)\ng35 = sns.catplot(x=df[\"BsmtFinType2\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng35.fig.suptitle(\"Rating of Basement Finished Area (If Multiple Types)\", x = 0.6, y = 1.04)\ng35.set(xlabel=\"Rating\", ylabel=\"Price\")\ng35.set_xticklabels([\"Unfinished\",\"Below Average Living Quarters\",\"No Basement\",\"Average Living Quarters\",\"Average Rec Room\",\"Low Quality\",\"Good Living Quarters\"])\nplt.xticks(rotation=90);","8b41f3d1":"g36 = sns.relplot(x = df[\"BsmtFinSF2\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng36.fig.suptitle(\"Multiple Basement Finished Area\", x = 0.6, y = 1.04)\ng36.set(xlabel=\"Area (in square feet)\", ylabel=\"Price\");","1f139385":"g37 = sns.relplot(x = df[\"BsmtUnfSF\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng37.fig.suptitle(\"Unfinished Square Feet of Basement Area\", x = 0.6, y = 1.04)\ng37.set(xlabel=\"Area\", ylabel=\"Price\");","03b28fe0":"g38 = sns.relplot(x = df[\"TotalBsmtSF\"], y = df[\"SalePrice\"], data = df, kind = \"scatter\", alpha = 0.2)\ng38.fig.suptitle(\"Total Square Feet of Basement Area\", x = 0.6, y = 1.04)\ng38.set(xlabel=\"Area\", ylabel=\"Price\");","f58f3e2c":"g33 = sns.catplot(x=df[\"Heating\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng33.fig.suptitle(\"Type of heating\", x = 0.6, y = 1.04)\ng33.set(xlabel=\"Type\", ylabel=\"Price\")\ng33.set_xticklabels([\"Gas forced warm air furnace\",\"Gas hot water or steam heat\",\"Gravity furnace\", \"Wall furnace\",\"Hot water or steam heat other than gas\",\"Floor Furnace\"])\nplt.xticks(rotation=90);","07e665eb":"g33 = sns.catplot(x=df[\"HeatingQC\"], y =df[\"SalePrice\"], data = df, kind = \"box\")\ng33.fig.suptitle(\"Type of heating\", x = 0.6, y = 1.04)\ng33.set(xlabel=\"Quality\", ylabel=\"Price\")\ng33.set_xticklabels([\"Excellent\", \"Good\", \"Average\", \"Fair\", \"Poor\"])\nplt.xticks(rotation=90);","62d955ea":"sns.set_palette(\"crest\", 12)\na41 = sns.catplot(x = \"CentralAir\",y = \"SalePrice\", hue = \"CentralAir\", data = df, kind = \"box\")\na41.fig.suptitle(\"Central Air Conditioning\", x = 0.5, y = 1.03)\na41.set(xlabel = \"Central Air Conditioning Availability\", ylabel = \"Sale Price\");","2090b540":"a42 = sns.catplot(x = df[\"Electrical\"], y = df[\"SalePrice\"], data = df, kind = \"box\")\na42.set_xticklabels(['Standard Circuit Breakers & Romex','60 AMP Fuse Box and mostly Romex wiring (Fair)','Fuse Box over 60 AMP and all Romex wiring (Average)','60 AMP Fuse Box and mostly knob & tube wiring (poor)', \"Mixed\"])\na42.fig.suptitle(\"Electrical System Type\", x = 0.5, y = 1.03)\na42.set(xlabel = \"Electrical system\", ylabel = \"Sale Price\")\nplt.xticks(rotation = 90);","a440ebd3":"#1stFlrSF (first floor square feet) vs SalePrice\na43 = sns.relplot(x = \"1stFlrSF\", y = \"SalePrice\", data = df, kind = \"scatter\", alpha = 0.6)\na43.set(xlabel = \"First floor sq.feet\", ylabel = \"Sale Price\")\na43.fig.suptitle(\"First Floor square feet\", x = 0.5, y = 1.03)\na43;","e9c8dbc6":"#2ndFlrSF (second floor square feet) vs SalePrice\na44 = sns.relplot(x = \"2ndFlrSF\", y = \"SalePrice\", data = df, kind = \"scatter\", alpha = 0.6)\na44.set(xlabel = \"Second floor sq.feet\", ylabel = \"Sale Price\")\na44.fig.suptitle(\"Second Floor square feet\", x = 0.5, y = 1.03)\na44;","dc32d273":"#LowQualFinSF (Low quality finished square feet) vs SalePrice\na45 = sns.relplot(x = \"LowQualFinSF\", y = \"SalePrice\", data = df, kind = \"scatter\", alpha = 0.6)\na45.set(xlabel = \"Low quality finished sq.feet\", ylabel = \"Sale Price\")\na45.fig.suptitle(\"Low Quality Finished square feet\", x = 0.5, y = 1.03)\na45;","e5ccb4ce":"#GrLivArea (above ground living area) vs SalePrice\na46 = sns.relplot(x = \"GrLivArea\", y = \"SalePrice\", data = df, kind = \"scatter\", alpha = 0.6)\na46.set(xlabel = \"Above ground living area sq.feet\", ylabel = \"Sale Price\")\na46.fig.suptitle(\"Above Ground Living Area square feet\", x = 0.5, y = 1.03)\na46;","0cc1bfcf":"#BsmtFullBath (Basement full bathrooms) vs SalePrice\na47 = sns.catplot(x = \"BsmtFullBath\", y = \"SalePrice\", data = df, kind = \"box\")\na47.set(xlabel = \"Basement full bathrooms\", ylabel = \"Sale Price\")\na47.fig.suptitle(\"Basement Full Bathrooms\", x = 0.5, y = 1.03)\na47;","3ff0bf81":"#BsmtHalfBath (Basement half bathrooms) vs SalePrice\na48 = sns.catplot(x = \"BsmtHalfBath\", y = \"SalePrice\", data = df, kind = \"box\")\na48.set(xlabel = \"Basement half bathrooms\", ylabel = \"Sale Price\")\na48.fig.suptitle(\"Basement Half Bathrooms\", x = 0.5, y = 1.03)\na48;","f6989b28":"#FullBath (Full bathrooms above grade) vs SalePrice\na49 = sns.catplot(x = \"FullBath\", y = \"SalePrice\", data = df, kind = \"box\")\na49.set(xlabel = \"Full bathrooms above grade\", ylabel = \"Sale Price\")\na49.fig.suptitle(\"Full Bathrooms Above Grade\", x = 0.5, y = 1.03)\na49;","91712f6c":"#HalfBath (Half baths above grade) vs SalePrice\na50 = sns.catplot(x = \"HalfBath\", y = \"SalePrice\", data = df, kind = \"box\")\na50.set(xlabel = \"Half baths above grade\", ylabel = \"Sale Price\")\na50.fig.suptitle(\"Half Bathrooms Above Grade\", x = 0.5, y = 1.03)\na50;","1bb3d372":"#BedroomAbvGr (Bedrooms above grade (does NOT include basement bedrooms)) vs SalePrice\na51 = sns.catplot(x = \"BedroomAbvGr\", y = \"SalePrice\", data = df, kind = \"box\")\na51.set(xlabel = \"Bedrooms above grade\", ylabel = \"Sale Price\")\na51.fig.suptitle(\"Bedrooms Above Grade\", x = 0.5, y = 1.03)\na51;","4334654f":"#KitchenAbvGr (Kitchens above grade) vs SalePrice\na52 = sns.catplot(x = \"KitchenAbvGr\", y = \"SalePrice\", data = df, kind = \"box\")\na52.set(xlabel = \"Kitchens above grade\", ylabel = \"Sale Price\")\na52.fig.suptitle(\"Kitchens Above Grade\", x = 0.5, y = 1.03)\na52;","27be8dec":"#KitchenQual (Kitchen Quality) vs SalePrice\na53 = sns.catplot(x = \"KitchenQual\", y = \"SalePrice\", data = df, kind = \"box\")\na53.set(xlabel = \"Kitchen quality\", ylabel = \"Sale Price\")\na53.set_xticklabels(['Good','Typical\/Average','Excellent','Fair'])\na53.fig.suptitle(\"Kitchen Quality\", x = 0.5, y = 1.03)\nplt.xticks(rotation = 70)\na53;","e5e2e28c":"#TotRmsAbvGrd (Total Rooms above grade) vs SalePrice\na54 = sns.catplot(x = \"TotRmsAbvGrd\", y = \"SalePrice\", data = df, kind = \"box\")\na54.set(xlabel = \"Kitchens above grade\", ylabel = \"Sale Price\")\na54.fig.suptitle(\"Kitchens Above Grade\", x = 0.5, y = 1.03)\na54;","dcfe737b":"#Functional vs SalesPrice\na55 = sns.catplot(x = \"Functional\", y = \"SalePrice\", data = df, kind = \"box\")\na55.set(xlabel = \"Home functionality\", ylabel = \"Sale Price\")\na55.fig.suptitle(\"Home Functionality\", x = 0.5, y = 1.03)\na55.set_xticklabels(['Typical Functionality','Minor Deductions 1','Major Deductions 1','Minor Deductions 2', 'Moderate Deductions', 'Major Deductions 2', 'Severely Damaged'])\nplt.xticks(rotation = 80)\na55;","0dd4ef0c":"#Fireplaces vs SalePrice\na56 = sns.catplot(x = \"Fireplaces\", y = \"SalePrice\", data = df, kind = \"box\")\na56.set(xlabel = \"Number of fireplaces\", ylabel = \"Sale Price\")\na56.fig.suptitle(\"Number of Fireplaces\", x = 0.5, y = 1.03)\na56;","48427b74":"#FireplaceQu vs SalePrice\ndf_nonnulled = df.fillna(\"None\")\na57 = sns.catplot(x = \"FireplaceQu\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na57.set(xlabel = \"Fireplace quality\", ylabel = \"Sale Price\")\na57.fig.suptitle(\"Fireplace Quality\", x = 0.5, y = 1.03)\na57.set_xticklabels(['No fireplace', 'Average', 'Good', 'Fair', 'Excellent', 'Poor'])\nplt.xticks(rotation=60)\na57;","741ee819":"#GarageType vs SalePrice\na58 = sns.catplot(x = \"GarageType\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na58.set(xlabel = \"Garage location\", ylabel = \"Sale Price\")\na58.fig.suptitle(\"Garage Location\", x = 0.5, y = 1.03)\na58.set_xticklabels(['Attached to home', 'Detached from home', 'Built-In', 'CarPort', 'No Garage', 'Basement Garage', 'More than one type of garage'])\nplt.xticks(rotation=90)\na58;","de836d1d":"#GarageYrBlt vs SalePrice\ndf_nonnulled['GarageYrBlt'] = pd.to_numeric(df_nonnulled['GarageYrBlt'], errors = 'coerce')\na59 = sns.relplot(x = \"GarageYrBlt\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.6)\na59.set(xlabel = \"Year garage was built\", ylabel = \"Sale Price\")\na59.fig.suptitle(\"Year Garage Was Built\", x = 0.5, y = 1.03)\na59;\nprint(\"Number of missing values: \" + str(df_nonnulled[\"GarageYrBlt\"].isnull().sum()))","7b845561":"#GarageFinish vs SalePrice\na60 = sns.catplot(x = \"GarageFinish\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na60.set(xlabel = \"Interior finish of the garage\", ylabel = \"Sale Price\")\na60.fig.suptitle(\"Interior Finish of The Garage\", x = 0.5, y = 1.03)\na60.set_xticklabels(['Rough Finished', 'Unfinished', 'Finished', 'No Garage'])\nplt.xticks(rotation=60)\na60;","c5ccabc6":"#GarageCars vs SalePrice\na61 = sns.catplot(x = \"GarageCars\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na61.set(xlabel = \"Size of garage in car capacity\", ylabel = \"Sale Price\")\na61.fig.suptitle(\"Size of Garage in Car Capacity\", x = 0.5, y = 1.03)\na61;","e7228caa":"#GarageArea vs SalePrice\na62 = sns.relplot(x = \"GarageArea\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na62.set(xlabel = \"Size of garage in square feet\", ylabel = \"Sale Price\")\na62.fig.suptitle(\"Size of Garage in Square Feet\", x = 0.5, y = 1.03)\na62;","6ee0b4ea":"#GarageQual vs SalePrice\na63 = sns.catplot(x = \"GarageQual\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na63.set(xlabel = \"Garage quality\", ylabel = \"Sale Price\")\na63.fig.suptitle(\"Garage Quality\", x = 0.5, y = 1.03)\na63.set_xticklabels(['Typical\/Average', 'Fair', 'Good', 'No Garage', 'Excellent', 'Poor'])\nplt.xticks(rotation=70)\na63;","04ab3ba5":"#GarageCond vs SalePrice\na64 = sns.catplot(x = \"GarageCond\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na64.set(xlabel = \"Garage condition\", ylabel = \"Sale Price\")\na64.fig.suptitle(\"Garage Condition\", x = 0.5, y = 1.03)\na64.set_xticklabels(['Typical\/Average', 'Fair', 'No Garage', 'Good', 'Poor', 'Excellent'])\nplt.xticks(rotation=70)\na64;","898e11a2":"#PavedDrive vs SalePrice\na65 = sns.catplot(x = \"PavedDrive\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na65.set(xlabel = \"Paved driveway\", ylabel = \"Sale Price\")\na65.fig.suptitle(\"Paved Driveway\", x = 0.5, y = 1.03)\na65.set_xticklabels(['Paved', 'Dirt\/Gravel', 'Partial Pavement'])\nplt.xticks(rotation=40)\na65;","a21d1e29":"#WoodDeckSF vs SalePrice\na66 = sns.relplot(x = \"WoodDeckSF\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na66.set(xlabel = \"Wood deck area in sq.feet\", ylabel = \"Sale Price\")\na66.fig.suptitle(\"Wood Deck Area in Square Feet\", x = 0.5, y = 1.03)\na66;","cc435403":"#OpenPorchSF vs SalePrice\na67 = sns.relplot(x = \"OpenPorchSF\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na67.set(xlabel = \"Open porch area in sq.feet\", ylabel = \"Sale Price\")\na67.fig.suptitle(\"Open Porch Area in Square Feet\", x = 0.5, y = 1.03)\na67;","be354c0c":"#EnclosedPorch vs SalePrice\na68 = sns.relplot(x = \"EnclosedPorch\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na68.set(xlabel = \"Enclosed porch area in sq.feet\", ylabel = \"Sale Price\")\na68.fig.suptitle(\"Enclosed Porch Area in Square feet\", x = 0.5, y = 1.03)\na68;","48be6c4e":"#3SsnPorch vs SalePrice\na69 = sns.relplot(x = \"3SsnPorch\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na69.set(xlabel = \"Three season porch area in sq.feet\", ylabel = \"Sale Price\")\na69.fig.suptitle(\"Three Season Porch Area in Square Feet\", x = 0.5, y = 1.03)\na69;","2e13f738":"#ScreenPorch vs SalePrice\na70 = sns.relplot(x = \"ScreenPorch\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na70.set(xlabel = \"Screen porch area in sq.feet\", ylabel = \"Sale Price\")\na70.fig.suptitle(\"Screen Porch Area in square feet\", x = 0.5, y = 1.03)\na70;","1d79e0af":"#PoolArea vs SalePrice\na71 = sns.relplot(x = \"PoolArea\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na71.set(xlabel = \"Pool area in sq.feet\", ylabel = \"Sale Price\")\na71.fig.suptitle(\"Pool Area in Square Feet\", x = 0.5, y = 1.03)\na71;","8dcff25f":"#PoolQC vs SalePrice\na72 = sns.catplot(x = \"PoolQC\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na72.set(xlabel = \"Pool quality\", ylabel = \"Sale Price\")\na72.fig.suptitle(\"Pool Quality\", x = 0.5, y = 1.03)\na72.set_xticklabels(['No Pool', 'Excellent', 'Fair', 'Good'])\na72;","eaabff3c":"#Fence vs SalePrice\na73 = sns.catplot(x = \"Fence\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na73.set(xlabel = \"Fence quality\", ylabel = \"Sale Price\")\na73.fig.suptitle(\"Fence Quality\", x = 0.5, y = 1.03)\n\n# Very grotesque, why consider wood quality and privacy as a single feature??\na73.set_xticklabels(['No Fence', 'Minimum Privacy', 'Good Wood', 'Good Privacy', 'Minimum Wood\/Wire'])\nplt.xticks(rotation = 70)\na73;","5d90ea10":"#MiscFeature vs SalePrice\na74 = sns.catplot(x = \"MiscFeature\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na74.set(xlabel = \"Miscellaneous feature not covered in other categories\", ylabel = \"Sale Price\")\na74.fig.suptitle(\"Miscellaneous Feature Not Covered in Other Categories\", x = 0.7, y = 1.03)\na74.set_xticklabels(['None', 'Shed (over 100 SF)', '2nd Garage', 'Other', 'Tennis Court'])\nplt.xticks(rotation = 70)\na74;","57a328b0":"#MiscVal vs SalePrice\na75 = sns.relplot(x = \"MiscVal\", y = \"SalePrice\", data = df_nonnulled, kind = \"scatter\", alpha = 0.7)\na75.set(xlabel = \"$ Value of miscellaneous feature\", ylabel = \"Sale Price\")\na75.fig.suptitle(\"$ Value of Miscellaneous Feature\", x = 0.6, y = 1.03)\na75;","0b471b34":"#MoSold vs SalePrice\na76 = sns.catplot(x = \"MoSold\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na76.set(xlabel = \"Month Sold (MM)\", ylabel = \"Sale Price\")\na76.fig.suptitle(\"Month Sold\", x = 0.5, y = 1.03)\na76;","101a7717":"#YrSold vs SalePrice\na77 = sns.catplot(x = \"YrSold\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na77.set(xlabel = \"Year Sold (YYYY)\", ylabel = \"Sale Price\")\na77.fig.suptitle(\"Year Sold\", x = 0.5, y = 1.03)\na77;","9b56a3d8":"#SaleType vs SalePrice\na78 = sns.catplot(x = \"SaleType\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na78.set(xlabel = \"Type of sale\", ylabel = \"Sale Price\")\na78.fig.suptitle(\"Type of Sale\", x = 0.5, y = 1.03)\na78.set_xticklabels(['Warranty Deed - Conventional', 'Home just constructed and sold', 'Court Officer Deed\/Estate', 'Contract Low Down', 'Contract Low Interest', 'Warranty Deed - Cash', 'Contract Low Down payment and low interest', 'Contract 15% Down payment regular terms', 'Other'])\nplt.xticks(rotation = 90)\na78;","8b06c3ab":"#SaleCondition vs SalePrice\na79 = sns.catplot(x = \"SaleCondition\", y = \"SalePrice\", data = df_nonnulled, kind = \"box\")\na79.set(xlabel = \"Condition of sale\", ylabel = \"Sale Price\")\na79.fig.suptitle(\"Condition of Sale\", x = 0.5, y = 1.03)\na79.set_xticklabels(['Normal Sale', 'Abnormal Sale', 'Home was not completed when last assessed', 'Adjoining Land Purchase', 'Allocation', 'Sale between family members'])\nplt.xticks(rotation = 90)\na79;","7f718cc5":"from sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder, FunctionTransformer\nfrom sklearn.compose import ColumnTransformer, make_column_selector\nfrom sklearn.pipeline import make_pipeline, Pipeline\nfrom xgboost import XGBRegressor\n\ndf = pd.read_csv(path\/'train.csv', index_col=\"Id\")\ntest_df = pd.read_csv(path\/'test.csv', index_col=\"Id\")\ntrainx = df.iloc[:,:-1]\ntrainy = df.iloc[:,-1]","44460c88":"def column_remover(X, columns) -> pd.DataFrame:\n    \"\"\"Remove specified columns.  \n    determine = False by default, if True will check which columns to remove, and remove them\"\"\" # Used in a pipeline to allow for Grid-Searching et cetera\n    if len(columns) == 0:\n        return X\n    else:\n        return X.drop(columns, axis=1)\n    \n# Passes the data through ColRemover\ncol_remover = FunctionTransformer(column_remover)","218fbb09":"def remodeled_subgenerator(X) -> pd.DataFrame:\n    \"\"\"Adds feature 'Remodeled' to the dataframe, used within a pipeline\"\"\"\n    out = X.copy()\n    out[\"Remodeled\"] = (out[\"YearBuilt\"] < out[\"YearRemodAdd\"]).astype(\"int\")\n    return out\n\ndef dateSold_subgenerator(X) -> pd.DataFrame:\n    \"\"\"Adds feature 'DateSold' to the dataframe, used within a pipeline\"\"\"\n    out = X.copy()\n    out[\"DateSold\"] = (out[\"MoSold\"] + (12 * out[\"YrSold\"])).astype(\"int\")\n    return out\n\ndef secondaryArea_subgenerator(X) -> pd.DataFrame:\n    \"\"\"Adds feature 'SecondaryArea' to the dataframe, used within a pipeline\"\"\"\n    \n    out = X.copy()\n    col_list = [\"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\"]\n    out[\"SecondaryArea\"] = 0\n    \n    # Add the areas together if not missing\n    for col in col_list:\n        try:\n            out[\"SecondaryArea\"] += out[col]\n        except:\n            continue\n            \n    # Check if all the columns were removed, if so, return unmodified input\n    if out[\"SecondaryArea\"].sum() == 0:\n        return X\n    \n    # Check if only one column was used to calculate area, if so return unmodified input\n    for col in col_list:\n        try:\n            if out[\"SecondaryArea\"].sum() == out[col].sum():\n                return X\n        except:\n            continue\n    \n    # Return the dataframe with the composite feature if there were at least 2 unremoved columns from col_list\n    return out\n\ndef area_subgenerator(X) -> pd.DataFrame:\n    \"\"\"Adds feature 'Area' to the dataframe, used within a pipeline\"\"\"\n    \n    out = X.copy()\n    col_list = [\"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \"GarageArea\"]\n    out[\"Area\"] = 0\n    \n    # Add the areas together if not missing\n    for col in col_list:\n        try:\n            out[\"Area\"] += out[col]\n        except:\n            continue\n            \n    # Check if all the columns were removed, if so, return unmodified input\n    if out[\"Area\"].sum() == 0:\n        return X\n    \n    # Check if only one column was used to calculate area, if so return unmodified input\n    for col in col_list:\n        try:\n            if out[\"Area\"].sum() == out[col].sum():\n                return X\n        except:\n            continue\n    \n    # Return the dataframe with the composite feature if there were at least 2 unremoved columns from col_list\n    return out\n\n\n\ndef feature_generator(X, subgenerators) -> pd.DataFrame:\n    \"\"\"Generates composite features from existing columns\"\"\"\n    out = X\n    for subgenerator in subgenerators:\n        try:\n            out = subgenerator(out)\n        except:\n            continue\n    return out\n\n\n# Generate composite features out of existing features\nfeature_gen = FunctionTransformer(feature_generator)  ","517c377c":"remodeled_df = pd.DataFrame()\nsns.set_palette(\"colorblind\")\nremodeled_df[\"YearBuilt\"] = df[\"YearBuilt\"]\nremodeled_df[\"YearRemodAdd\"] = df[\"YearRemodAdd\"]\nremodeled_df[\"Remodeled\"] = remodeled_df[\"YearBuilt\"] < remodeled_df[\"YearRemodAdd\"]\nremodeled_df[\"SalePrice\"] = df[\"SalePrice\"]\nsns.jointplot(data = remodeled_df, x = \"YearBuilt\", y = \"SalePrice\", hue = \"Remodeled\", height = 8).plot_joint(sns.kdeplot);","7cbead66":"# Dummy encodes the categorical features\ncol_trans = ColumnTransformer(\n    [('cat', OneHotEncoder(handle_unknown='ignore'), make_column_selector(dtype_include=object))], \n    remainder='passthrough'\n)\n\n# Estimator\nxgbreg = XGBRegressor(\n    random_state=47, \n    tree_method=\"gpu_hist\", \n    gpu_id=0\n) # remove last two args if you encounter problems\n\n# Full pipeline, takes a normal dataframe, ignores unused columns,\n# generates composite features, encodes, and feeds into XGBoost\npipeline = Pipeline([\n    (\"col_remover\", col_remover), \n    (\"feature_gen\", feature_gen), \n    (\"col_trans\", col_trans), \n    (\"xgbreg\", xgbreg)\n])","d0486738":"pipeline[\"col_remover\"].kw_args = {\"columns\":[]}\npipeline[\"feature_gen\"].kw_args = {\"subgenerators\":[remodeled_subgenerator, dateSold_subgenerator, secondaryArea_subgenerator, area_subgenerator]}\npipeline[\"xgbreg\"].n_estimators=200\nprint(f\"Score before tuning, default parameters {cross_val_score(pipeline, trainx, trainy, cv=7).mean()}\")","58c5e6ca":"def useful_columns(x, y, pipeline, cv=10) -> list:\n    \"\"\"Takes data and a pipeline that implements a column_remover, \n    determines which columns are not useful to the estimator\"\"\"\n    \n    from tqdm import tqdm\n    \n    # Get all columns\n    cols = x.columns.to_list()\n    \n    # Set up a place to store the results\n    useful_df = pd.DataFrame({\"Column\": cols, \"Useful\": np.full(len(cols), False)}).set_index(\"Column\")\n    \n    # Evaluate pipeline with all the columns\n    pipeline[\"col_remover\"].kw_args = {\"columns\":[]}\n    normal_score = cross_val_score(pipeline, x, y, cv=cv).mean()\n\n    # Evaluate pipeline with one missing column, determining wether or not it becomes worse\n    for col_id in tqdm(range(len(cols))):\n        pipeline[\"col_remover\"].kw_args = {\"columns\":[cols[col_id]]}\n        if cross_val_score(pipeline, x, y, cv=cv).mean() < normal_score:\n            useful_df.iat[col_id, 0] = True\n            \n    # Reset pipeline to default settings (no columns to remove)\n    pipeline[\"col_remover\"].kw_args = {\"columns\":[]}\n    return useful_df.Useful.to_list()","aae733a0":"# Calculating which columns are useful (might take a while)\nuseful = useful_columns(trainx, trainy, pipeline)\n# Inverting the results, \nnot_useful = trainx.columns[~np.array(useful)].to_list()\nprint(f\"Number of useful columns: {sum(useful)}\")\npipeline[\"col_remover\"].kw_args = {\"columns\":not_useful}\nprint(f\"Score after selecting useful columns {cross_val_score(pipeline, trainx, trainy, cv=10).mean()}\")","a3ffd580":"params = {\n    \"col_remover__kw_args\": np.array([{\"columns\":not_useful}]),\n    \"xgbreg__gamma\": np.array([0, 8]),\n    \"xgbreg__learning_rate\": np.arange(0.05, 0.08, 0.01),\n    \"xgbreg__n_estimators\": np.array([400]), # lowered to lower load\n    \"xgbreg__reg_lambda\": np.arange(0.02, 0.08, 0.02),\n    \"xgbreg__gpu_id\": np.array([0]),\n    \"xgbreg__tree_method\": np.array([\"gpu_hist\"])\n}\n\ngridsearch = GridSearchCV(pipeline, params, verbose=1, pre_dispatch=4, cv=7)\ngridsearch.fit(trainx, trainy)\ngridsearch.best_score_","f0f6c86d":"gridsearch.best_params_","eeb431ac":"params = {\n    \"col_remover__kw_args\": np.array([{\"columns\":not_useful}]),\n    \"xgbreg__gamma\": np.array([5, 8]),\n    \"xgbreg__learning_rate\": np.arange(0.068, 0.072, 0.001),\n    \"xgbreg__n_estimators\": np.array([500]),\n    \"xgbreg__reg_lambda\": np.arange(0.017, 0.023, 0.001)\n}\n\ngridsearch = GridSearchCV(pipeline, params, verbose=1, pre_dispatch=4, cv=7)\ngridsearch.fit(trainx, trainy)\ngridsearch.best_score_","28f698de":"gridsearch.best_params_","807cbee7":"pipeline[\"col_remover\"].kw_args = {\"columns\":not_useful}\npipeline[\"xgbreg\"].gamma = 5\npipeline[\"xgbreg\"].reg_lambda = 0.17\npipeline[\"xgbreg\"].learning_rate = 0.071\npipeline[\"xgbreg\"].n_estimators = 500\npipeline[\"xgbreg\"].tree_method = \"gpu_hist\"\npipeline[\"xgbreg\"].gpu_id = 0\n\nprint(cross_val_score(pipeline, trainx, trainy, cv=10).mean())\n\ntestx = pd.read_csv(path\/\"test.csv\", index_col=\"Id\")\npipeline.fit(trainx, trainy)\npreds = pipeline.predict(testx)\npreds","f2cd167d":"testx[\"SalePrice\"] = preds\ntestx.SalePrice.to_csv(\"predictions.csv\", index=True, header=True)","0125aee0":"## Part II: Building and Tuning the Pipeline","4e25e549":"### Let's figure out which columns influence accuracy positively\nSince we can now easily remove columns within the pipeline, let us see which columns we should actually remove. We have the ability to use grid search but our goal is not to find the worst column, but to find the list of columns that make the model worse.  \n  \nThe useful_columns function will give us the list of useful columns, in other words, the list of columns that when removed from the pipeline, will result in a lower score. Note, the composite columns are not formed if the ingredient column is removed.","4579c3dc":"We are provided with 4 files:  \ndata_description.txt  \nsample_submission.csv\ntest.csv  \ntrain.csv  ","e91c5a7d":"### Data overview","aee51d59":"## Overview\n\nThis notebook explores the data provided by the [House Prices - Advanced Regression Techniques](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview) competition.  \nUsing XGBoost, we, a team of three students, are aiming to predict house prices.","21673815":"Positive skew, leptokurtic","1fc1fc79":"### Fitting the pipeline and predicting away the competition!","35742750":"# House Prices - Regression with XGBoost","a55cd749":"MSSubClass: Identifies the type of dwelling involved in the sale.\t  \n  \n        20\t1-STORY 1946 & NEWER ALL STYLES  \n        30\t1-STORY 1945 & OLDER  \n        40\t1-STORY W\/FINISHED ATTIC ALL AGES  \n        45\t1-1\/2 STORY - UNFINISHED ALL AGES  \n        50\t1-1\/2 STORY FINISHED ALL AGES  \n        60\t2-STORY 1946 & NEWER  \n        70\t2-STORY 1945 & OLDER  \n        75\t2-1\/2 STORY ALL AGES  \n        80\tSPLIT OR MULTI-LEVEL  \n        85\tSPLIT FOYER  \n        90\tDUPLEX - ALL STYLES AND AGES  \n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER  \n       150\t1-1\/2 STORY PUD - ALL AGES  \n       160\t2-STORY PUD - 1946 & NEWER  \n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER  \n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES   \n  \nMSZoning: Identifies the general zoning classification of the sale.  \n\t\t  \n       A\tAgriculture  \n       C\tCommercial  \n       FV\tFloating Village Residential  \n       I\tIndustrial  \n       RH\tResidential High Density  \n       RL\tResidential Low Density  \n       RP\tResidential Low Density Park   \n       RM\tResidential Medium Density  \n\t  \nLotFrontage: Linear feet of street connected to property  \n  \nLotArea: Lot size in square feet  \n  \nStreet: Type of road access to property  \n  \n       Grvl\tGravel\t  \n       Pave\tPaved  \n       \t  \nAlley: Type of alley access to property  \n  \n       Grvl\tGravel  \n       Pave\tPaved  \n       NA \tNo alley access  \n\t\t  \nLotShape: General shape of property  \n  \n       Reg\tRegular\t  \n       IR1\tSlightly irregular  \n       IR2\tModerately Irregular  \n       IR3\tIrregular  \n         \nLandContour: Flatness of the property  \n  \n       Lvl\tNear Flat\/Level\t  \n       Bnk\tBanked - Quick and significant rise from street grade to building  \n       HLS\tHillside - Significant slope from side to side  \n       Low\tDepression  \n\t\t  \nUtilities: Type of utilities available  \n\t\t  \n       AllPub\tAll public Utilities (E,G,W,& S)\t  \n       NoSewr\tElectricity, Gas, and Water (Septic Tank)  \n       NoSeWa\tElectricity and Gas Only  \n       ELO\tElectricity only\t  \n\t  \nLotConfig: Lot configuration  \n  \n       Inside\tInside lot  \n       Corner\tCorner lot  \n       CulDSac\tCul-de-sac  \n       FR2\tFrontage on 2 sides of property  \n       FR3\tFrontage on 3 sides of property  \n\t  \nLandSlope: Slope of property  \n\t\t  \n       Gtl\tGentle slope  \n       Mod\tModerate Slope\t  \n       Sev\tSevere Slope  \n\t  \nNeighborhood: Physical locations within Ames city limits  \n  \n       Blmngtn\tBloomington Heights  \n       Blueste\tBluestem  \n       BrDale\tBriardale  \n       BrkSide\tBrookside  \n       ClearCr\tClear Creek  \n       CollgCr\tCollege Creek  \n       Crawfor\tCrawford  \n       Edwards\tEdwards  \n       Gilbert\tGilbert  \n       IDOTRR\tIowa DOT and Rail Road  \n       MeadowV\tMeadow Village  \n       Mitchel\tMitchell  \n       Names\tNorth Ames  \n       NoRidge\tNorthridge  \n       NPkVill\tNorthpark Villa  \n       NridgHt\tNorthridge Heights  \n       NWAmes\tNorthwest Ames  \n       OldTown\tOld Town  \n       SWISU\tSouth & West of Iowa State University  \n       Sawyer\tSawyer  \n       SawyerW\tSawyer West  \n       Somerst\tSomerset  \n       StoneBr\tStone Brook  \n       Timber\tTimberland  \n       Veenker\tVeenker  \n\t\t\t  \nCondition1: Proximity to various conditions  \n\t  \n       Artery\tAdjacent to arterial street  \n       Feedr\tAdjacent to feeder street\t  \n       Norm\tNormal\t  \n       RRNn\tWithin 200' of North-South Railroad  \n       RRAn\tAdjacent to North-South Railroad  \n       PosN\tNear positive off-site feature--park, greenbelt, etc.  \n       PosA\tAdjacent to postive off-site feature  \n       RRNe\tWithin 200' of East-West Railroad  \n       RRAe\tAdjacent to East-West Railroad  \n\t  \nCondition2: Proximity to various conditions (if more than one is present)  \n\t\t  \n       Artery\tAdjacent to arterial street  \n       Feedr\tAdjacent to feeder street\t  \n       Norm\tNormal\t  \n       RRNn\tWithin 200' of North-South Railroad  \n       RRAn\tAdjacent to North-South Railroad  \n       PosN\tNear positive off-site feature--park, greenbelt, etc.  \n       PosA\tAdjacent to postive off-site feature  \n       RRNe\tWithin 200' of East-West Railroad  \n       RRAe\tAdjacent to East-West Railroad  \n\t  \nBldgType: Type of dwelling  \n\t\t  \n       1Fam\tSingle-family Detached\t  \n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling  \n       Duplx\tDuplex  \n       TwnhsE\tTownhouse End Unit  \n       TwnhsI\tTownhouse Inside Unit  \n\t   \nHouseStyle: Style of dwelling  \n\t  \n       1Story\tOne story  \n       1.5Fin\tOne and one-half story: 2nd level finished  \n       1.5Unf\tOne and one-half story: 2nd level unfinished  \n       2Story\tTwo story  \n       2.5Fin\tTwo and one-half story: 2nd level finished  \n       2.5Unf\tTwo and one-half story: 2nd level unfinished  \n       SFoyer\tSplit Foyer  \n       SLvl\tSplit Level  \n\t  \nOverallQual: Rates the overall material and finish of the house  \n  \n       10\tVery Excellent  \n       9\tExcellent  \n       8\tVery Good  \n       7\tGood  \n       6\tAbove Average  \n       5\tAverage  \n       4\tBelow Average  \n       3\tFair  \n       2\tPoor  \n       1\tVery Poor  \n\t  \nOverallCond: Rates the overall condition of the house  \n  \n       10\tVery Excellent  \n       9\tExcellent  \n       8\tVery Good  \n       7\tGood  \n       6\tAbove Average\t  \n       5\tAverage  \n       4\tBelow Average\t  \n       3\tFair  \n       2\tPoor  \n       1\tVery Poor  \n\t\t    \nYearBuilt: Original construction date  \n  \nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)  \n  \nRoofStyle: Type of roof  \n  \n       Flat\tFlat  \n       Gable\tGable  \n       Gambrel\tGabrel (Barn)  \n       Hip\tHip  \n       Mansard\tMansard  \n       Shed\tShed  \n\t\t  \nRoofMatl: Roof material  \n   \n       ClyTile\tClay or Tile  \n       CompShg\tStandard (Composite) Shingle  \n       Membran\tMembrane  \n       Metal\tMetal  \n       Roll\tRoll  \n       Tar&Grv\tGravel & Tar  \n       WdShake\tWood Shakes  \n       WdShngl\tWood Shingles  \n\t\t  \nExterior1st: Exterior covering on house  \n  \n       AsbShng\tAsbestos Shingles  \n       AsphShn\tAsphalt Shingles  \n       BrkComm\tBrick Common  \n       BrkFace\tBrick Face  \n       CBlock\tCinder Block  \n       CemntBd\tCement Board  \n       HdBoard\tHard Board  \n       ImStucc\tImitation Stucco  \n       MetalSd\tMetal Siding  \n       Other\tOther  \n       Plywood\tPlywood  \n       PreCast\tPreCast\t  \n       Stone\tStone  \n       Stucco\tStucco  \n       VinylSd\tVinyl Siding  \n       Wd Sdng\tWood Siding  \n       WdShing\tWood Shingles  \n\t  \nExterior2nd: Exterior covering on house (if more than one material)  \n  \n       AsbShng\tAsbestos Shingles  \n       AsphShn\tAsphalt Shingles  \n       BrkComm\tBrick Common  \n       BrkFace\tBrick Face  \n       CBlock\tCinder Block  \n       CemntBd\tCement Board  \n       HdBoard\tHard Board  \n       ImStucc\tImitation Stucco  \n       MetalSd\tMetal Siding  \n       Other\tOther  \n       Plywood\tPlywood  \n       PreCast\tPreCast  \n       Stone\tStone  \n       Stucco\tStucco  \n       VinylSd\tVinyl Siding  \n       Wd Sdng\tWood Siding  \n       WdShing\tWood Shingles  \n\t  \nMasVnrType: Masonry veneer type  \n  \n       BrkCmn\tBrick Common   \n       BrkFace\tBrick Face  \n       CBlock\tCinder Block  \n       None\tNone  \n       Stone\tStone  \n\t  \nMasVnrArea: Masonry veneer area in square feet  \n  \nExterQual: Evaluates the quality of the material on the exterior   \n\t\t  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tAverage\/Typical  \n       Fa\tFair  \n       Po\tPoor  \n\t\t  \nExterCond: Evaluates the present condition of the material on the exterior  \n\t\t  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tAverage\/Typical  \n       Fa\tFair  \n       Po\tPoor  \n\t\t  \nFoundation: Type of foundation  \n\t\t  \n       BrkTil\tBrick & Tile  \n       CBlock\tCinder Block  \n       PConc\tPoured Contrete\t  \n       Slab\tSlab  \n       Stone\tStone  \n       Wood\tWood  \n\t\t  \nBsmtQual: Evaluates the height of the basement  \n  \n       Ex\tExcellent (100+ inches)\t  \n       Gd\tGood (90-99 inches)  \n       TA\tTypical (80-89 inches)  \n       Fa\tFair (70-79 inches)  \n       Po\tPoor (<70 inches)  \n       NA\tNo Basement  \n\t\t    \nBsmtCond: Evaluates the general condition of the basement  \n  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tTypical - slight dampness allowed  \n       Fa\tFair - dampness or some cracking or settling  \n       Po\tPoor - Severe cracking, settling, or wetness  \n       NA\tNo Basement  \n\t  \nBsmtExposure: Refers to walkout or garden level walls  \n  \n       Gd\tGood Exposure  \n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t  \n       Mn\tMimimum Exposure  \n       No\tNo Exposure  \n       NA\tNo Basement  \n\t  \nBsmtFinType1: Rating of basement finished area  \n  \n       GLQ\tGood Living Quarters  \n       ALQ\tAverage Living Quarters  \n       BLQ\tBelow Average Living Quarters\t  \n       Rec\tAverage Rec Room   \n       LwQ\tLow Quality  \n       Unf\tUnfinshed  \n       NA\tNo Basement  \n\t\t   \nBsmtFinSF1: Type 1 finished square feet  \n  \nBsmtFinType2: Rating of basement finished area (if multiple types)  \n  \n       GLQ\tGood Living Quarters  \n       ALQ\tAverage Living Quarters  \n       BLQ\tBelow Average Living Quarters\t  \n       Rec\tAverage Rec Room  \n       LwQ\tLow Quality  \n       Unf\tUnfinshed   \n       NA\tNo Basement  \n  \nBsmtFinSF2: Type 2 finished square feet  \n  \nBsmtUnfSF: Unfinished square feet of basement area    \n  \nTotalBsmtSF: Total square feet of basement area  \n  \nHeating: Type of heating  \n\t\t  \n       Floor\tFloor Furnace  \n       GasA\tGas forced warm air furnace  \n       GasW\tGas hot water or steam heat  \n       Grav\tGravity furnace\t    \n       OthW\tHot water or steam heat other than gas  \n       Wall\tWall furnace  \n\t\t  \nHeatingQC: Heating quality and condition  \n  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tAverage\/Typical  \n       Fa\tFair  \n       Po\tPoor  \n\t\t  \nCentralAir: Central air conditioning  \n  \n       N\tNo  \n       Y\tYes  \n\t\t  \nElectrical: Electrical system  \n   \n       SBrkr\tStandard Circuit Breakers & Romex  \n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t   \n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)  \n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)  \n       Mix\tMixed  \n\t\t  \n1stFlrSF: First Floor square feet  \n   \n2ndFlrSF: Second floor square feet  \n  \nLowQualFinSF: Low quality finished square feet (all floors)  \n  \nGrLivArea: Above grade (ground) living area square feet  \n  \nBsmtFullBath: Basement full bathrooms  \n  \nBsmtHalfBath: Basement half bathrooms  \n  \nFullBath: Full bathrooms above grade  \n  \nHalfBath: Half baths above grade  \n  \nBedroom: Bedrooms above grade (does NOT include basement bedrooms)  \n  \nKitchen: Kitchens above grade  \n  \nKitchenQual: Kitchen quality  \n  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tTypical\/Average  \n       Fa\tFair  \n       Po\tPoor  \n       \t  \nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)  \n  \nFunctional: Home functionality (Assume typical unless deductions are warranted)  \n  \n       Typ\tTypical Functionality  \n       Min1\tMinor Deductions 1  \n       Min2\tMinor Deductions 2  \n       Mod\tModerate Deductions  \n       Maj1\tMajor Deductions 1  \n       Maj2\tMajor Deductions 2  \n       Sev\tSeverely Damaged  \n       Sal\tSalvage only  \n\t\t  \nFireplaces: Number of fireplaces  \n  \nFireplaceQu: Fireplace quality  \n  \n       Ex\tExcellent - Exceptional Masonry Fireplace  \n       Gd\tGood - Masonry Fireplace in main level  \n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement  \n       Fa\tFair - Prefabricated Fireplace in basement  \n       Po\tPoor - Ben Franklin Stove  \n       NA\tNo Fireplace  \n\t\t  \nGarageType: Garage location  \n\t\t  \n       2Types\tMore than one type of garage  \n       Attchd\tAttached to home  \n       Basment\tBasement Garage  \n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)  \n       CarPort\tCar Port  \n       Detchd\tDetached from home  \n       NA\tNo Garage  \n\t\t  \nGarageYrBlt: Year garage was built  \n\t\t  \nGarageFinish: Interior finish of the garage  \n  \n       Fin\tFinished  \n       RFn\tRough Finished\t  \n       Unf\tUnfinished  \n       NA\tNo Garage  \n\t\t  \nGarageCars: Size of garage in car capacity  \n  \nGarageArea: Size of garage in square feet  \n  \nGarageQual: Garage quality  \n  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tTypical\/Average  \n       Fa\tFair  \n       Po\tPoor  \n       NA\tNo Garage  \n\t\t  \nGarageCond: Garage condition  \n  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tTypical\/Average  \n       Fa\tFair  \n       Po\tPoor  \n       NA\tNo Garage  \n\t\t  \nPavedDrive: Paved driveway  \n  \n       Y\tPaved   \n       P\tPartial Pavement  \n       N\tDirt\/Gravel  \n\t\t  \nWoodDeckSF: Wood deck area in square feet  \n  \nOpenPorchSF: Open porch area in square feet  \n  \nEnclosedPorch: Enclosed porch area in square feet  \n  \n3SsnPorch: Three season porch area in square feet  \n  \nScreenPorch: Screen porch area in square feet  \n  \nPoolArea: Pool area in square feet  \n  \nPoolQC: Pool quality  \n\t\t  \n       Ex\tExcellent  \n       Gd\tGood  \n       TA\tAverage\/Typical  \n       Fa\tFair  \n       NA\tNo Pool  \n\t\t  \nFence: Fence quality  \n\t\t  \n       GdPrv\tGood Privacy  \n       MnPrv\tMinimum Privacy  \n       GdWo\tGood Wood  \n       MnWw\tMinimum Wood\/Wire  \n       NA\tNo Fence  \n\t  \nMiscFeature: Miscellaneous feature not covered in other categories  \n\t\t  \n       Elev\tElevator  \n       Gar2\t2nd Garage (if not described in garage section)  \n       Othr\tOther  \n       Shed\tShed (over 100 SF)  \n       TenC\tTennis Court  \n       NA\tNone  \n\t\t  \nMiscVal: $Value of miscellaneous feature  \n  \nMoSold: Month Sold (MM)  \n  \nYrSold: Year Sold (YYYY)  \n  \nSaleType: Type of sale  \n\t\t  \n       WD \tWarranty Deed - Conventional  \n       CWD\tWarranty Deed - Cash  \n       VWD\tWarranty Deed - VA Loan  \n       New\tHome just constructed and sold  \n       COD\tCourt Officer Deed\/Estate  \n       Con\tContract 15% Down payment regular terms  \n       ConLw\tContract Low Down payment and low interest  \n       ConLI\tContract Low Interest  \n       ConLD\tContract Low Down  \n       Oth\tOther  \n\t\t  \nSaleCondition: Condition of sale  \n  \n       Normal\tNormal Sale  \n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale  \n       AdjLand\tAdjoining Land Purchase  \n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t  \n       Family\tSale between family members  \n       Partial\tHome was not completed when last assessed (associated with New Homes)  \n  ","ec3f18c4":"### Pipeline:  \nWe are now going to build a pipeline which will:  \n- remove useless columns from the data,  \n- add composite features to the dataframe, for example, whether the house was underwent renovations\/remodeling,  \n- OneHotEncode categorical features,  \n- pass the piped data to the final estimator, XGBRegressor.","fadfa60b":"The contents of sample_submission.csv:  ","184cb3a5":"### The rest of the pipeline\nOne hot encoding the columns whose data type is 'object',  \nXGBoost regressor that uses gpu acceleration","05420fe5":"### Adding the ability to remove columns within the pipeline","712747aa":"The contents of data_description.txt:  ","c5fac292":"### Feature vs Target Correlations","8bf74fc1":"We notice here that we have columns full of missing values","13ab91fe":"## Part I: Exploratory Data Analysis","5811f4f1":"### Training versus testing set: are the distributions similar?","38691d3d":"```\nId,SalePrice  \n1461,169000.1  \n1462,187724.1233  \n1463,175221  \netc.  \n```","58f3a72b":"As we can see, our training data does not deviate from the testing data too much","a1d785f3":"### Adding composite features to the dataframe","520476be":"### Now, let us tune the hyperparameters"}}