{"cell_type":{"232b1db5":"code","8de13bae":"code","7d08cfc8":"code","41a47e6d":"code","7119c10a":"code","36a9194b":"code","a6d6aad1":"code","fc32b58c":"code","ce5db334":"code","51e59807":"code","7fa14f73":"code","79e883ed":"code","22d874a4":"code","8d3ef342":"code","ca67952a":"code","5160f7c5":"code","d578ec46":"code","2338e5a3":"code","91ad504f":"code","b44fc652":"code","de6b6c47":"code","dcb4d981":"markdown","9c7c6c2e":"markdown","04d47c92":"markdown","21e16647":"markdown","a1d4eb4c":"markdown","e64ddc4e":"markdown"},"source":{"232b1db5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport os\nimport time\nimport string\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchtext.vocab import Vectors\nfrom torchtext import data\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8de13bae":"def load_file(file_path, device):\n\n    TEXT = data.Field(sequential=True, lower=True, include_lengths=True)\n    LABEL = data.Field(sequential=False, use_vocab=False)\n    \n    datafields = [('clean_text', TEXT), ('label', LABEL)]\n    # Step two construction our dataset.\n    train, valid, test = data.TabularDataset.splits(path=file_path,\n                                                    train=\"Train_clean.csv\", validation=\"Valid_clean.csv\",\n                                                    test=\"Test_clean.csv\", format=\"csv\",\n                                                    skip_header=True, fields=datafields)\n    # because of input dir is read-only we must change the cache path.\n    cache = ('\/kaggle\/working\/.vector_cache')\n    if not os.path.exists(cache):\n        os.mkdir(cache)\n    # using the pretrained word embedding.\n    vector = Vectors(name='\/kaggle\/input\/imdb-word2vec\/word2vec.txt', cache=cache)\n    TEXT.build_vocab(train, vectors=vector, max_size=25000, unk_init=torch.Tensor.normal_)\n    train_iter, valid_iter, test_iter = data.BucketIterator.splits((train, valid, test), device=device, batch_size=64, \n                                                             sort_key=lambda x:len(x.clean_text), sort_within_batch=True)\n    \n    return TEXT, LABEL, train_iter, valid_iter, test_iter\n\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nTEXT, LABEL, train_iter, valid_iter, test_iter = load_file('\/kaggle\/input\/cleaned-imdb-data', \n                                                          device)","7d08cfc8":"TEXT.vocab","41a47e6d":"class SentimentModelRNN(nn.Module):\n    def __init__(self, input_dim, embedding_dim, hidden_dim, output_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(input_dim, embedding_dim)\n        self.rnn = nn.RNN(embedding_dim, hidden_dim)\n        self.fc = nn.Linear(hidden_dim, output_dim)\n        \n    def forward(self, text, text_lengths):\n        # text [sentence length, batch_size]\n\n        embedded = self.embedding(text)\n        \n        # embedded = [sentence length, batch_size, emb dim]\n        output, hidden = self.rnn(embedded)\n        \n        # output = [sent len, batch_size, hid dim]\n        # hidden = [1, batch_size, hid dim]\n        assert torch.equal(output[-1,:,:], hidden.squeeze(0))\n        \n        return self.fc(hidden.squeeze(0))\n","7119c10a":"class SentimentModelLSTM(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim, n_layers, bidirectional, dropout, pad_idx):\n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx=pad_idx)\n        \n        self.rnn = nn.LSTM(embedding_dim, hidden_dim, num_layers=n_layers, bidirectional=bidirectional, dropout=dropout)\n        \n        if bidirectional:\n            self.fc = nn.Linear(hidden_dim * 2, output_dim)\n        else:\n            self.fc = nn.Linear(hidden_dim, output_dim)\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, text, text_lengths):\n        \n        # text : [sen_len, batch_size]\n        embedded = self.dropout(self.embedding(text))\n        \n        # embedded : [sen_len, batch_size, emb_dim]\n        packed_embedded = nn.utils.rnn.pack_padded_sequence(embedded, text_lengths)\n        \n        # packed_output : [num_word, emb_dim]     hidden : [num_layers * num_direction, batch_size, hid_dim]    \n        # cell : [num_layers * num_direction, batch_size, hid_dim]\n        packed_output, (hidden, cell) = self.rnn(packed_embedded)\n        \n        #unpacked sequence\n        # output : [sen_len, batch_size, hid_dim * num_directions]\n        output, output_lengths = nn.utils.rnn.pad_packed_sequence(packed_output)\n        \n        hidden = self.dropout(torch.cat([hidden[-2,:,:], hidden[-1,:,:]], dim=1)).squeeze()    \n        # hidden : [batch_size, hid_dim * num_dir]\n        return self.fc(hidden)","36a9194b":"INPUT_DIM = len(TEXT.vocab)\nEMBEDDING_DIM = 100\nHIDDEN_DIM = 256\nOUTPUT_DIM = 1\nN_LAYERS = 2\nBIDIRECTIONAL = True\nDROPOUT = 0.5\nPAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]\n\nmodel_rnn = SentimentModelRNN(INPUT_DIM, EMBEDDING_DIM, HIDDEN_DIM, OUTPUT_DIM)\nmodel_lstm = SentimentModelLSTM(INPUT_DIM, EMBEDDING_DIM, HIDDEN_DIM, OUTPUT_DIM, N_LAYERS, BIDIRECTIONAL, DROPOUT, PAD_IDX)","a6d6aad1":"def count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)","fc32b58c":"count_parameters(model_rnn)","ce5db334":"count_parameters(model_lstm)","51e59807":"pretrained_embeddings = TEXT.vocab.vectors\n\nprint(pretrained_embeddings.shape)\n\nmodel_rnn.embedding.weight.data.copy_(pretrained_embeddings)\nmodel_lstm.embedding.weight.data.copy_(pretrained_embeddings)","7fa14f73":"optimizer_rnn = optim.Adam(model_rnn.parameters())\noptimizer_lstm = optim.Adam(model_lstm.parameters())\n\ncriterion_rnn = nn.BCEWithLogitsLoss()\ncriterion_lstm = nn.BCEWithLogitsLoss()\n\nmodel_rnn = model_rnn.to(device)\nmodel_lstm = model_lstm.to(device)\n\ncriterion_rnn = criterion_rnn.to(device)\ncriterion_lstm = criterion_lstm.to(device)","79e883ed":"def binary_accuracy(preds, y):\n    '''\n    Return accuracy per batch ..\n    '''\n    \n    # round predictions to the closest integer\n    rounded_preds = torch.round(torch.sigmoid(preds))\n    correct = (rounded_preds == y).float()\n    acc = correct.sum() \/ len(correct)\n    \n    return acc\n\ndef epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time  \/ 60)\n    elapsed_secs = int(elapsed_time -  (elapsed_mins * 60))\n    return  elapsed_mins, elapsed_secs","22d874a4":"def train(model, iterator, optimizer, criterion):\n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.train()\n    \n    for i, batch in enumerate(iterator):\n        \n        text, text_lengths = batch.clean_text\n        \n        predictions = model(text, text_lengths).squeeze(1)\n        \n        loss = criterion(predictions, batch.label.float())\n        \n        acc = binary_accuracy(predictions, batch.label)\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        epoch_acc += acc.item()\n        \n        if i % 100 == 99:\n            print(f\"[{i}\/{len(iterator)}] : epoch_acc: {epoch_acc \/ len(iterator):.2f}\")\n    return epoch_loss \/ len(iterator), epoch_acc \/ len(iterator)","8d3ef342":"def evaluate(model, iterator, criterion):\n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.eval()\n    with torch.no_grad():\n        for i, batch in enumerate(iterator):\n            \n            text, text_lengths = batch.clean_text\n            \n            predictions = model(text, text_lengths).squeeze(1)\n            \n            loss = criterion(predictions, batch.label.float())\n        \n            acc = binary_accuracy(predictions, batch.label)\n            \n            epoch_loss += loss.item()\n            epoch_acc += acc.item()\n            \n    return epoch_loss \/ len(iterator),  epoch_acc \/ len(iterator)","ca67952a":"def run(model, optimizer, criterion, model_name):\n    N_epoches = 5\n\n    best_valid_loss = float('inf')\n\n    for epoch in range(N_epoches):\n\n        start_time = time.time()\n\n        train_loss, train_acc = train(model, train_iter, optimizer, criterion)\n        valid_loss, valid_acc = evaluate(model, valid_iter, criterion)\n\n        end_time = time.time()\n\n        epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n\n        if valid_loss < best_valid_loss:\n            best_valid_loss = valid_loss\n            torch.save(model.state_dict(), model_name)\n\n        print(f'Epoch:  {epoch+1:02} | Epoch Time: {epoch_mins}m {epoch_secs}s')\n        print(f'\\tTrain  Loss: {train_loss: .3f} | Train Acc: {train_acc*100:.2f}%')\n        print(f'\\tValid  Loss: {valid_loss: .3f} | Valid Acc: {valid_acc*100:.2f}%')","5160f7c5":"run(model_rnn, optimizer_rnn, criterion_rnn, 'rnn_model')","d578ec46":"run(model_lstm, optimizer_lstm, criterion_lstm, 'lstm_model')","2338e5a3":"model_lstm.load_state_dict(torch.load('lstm_model'))\n\ntest_loss, test_acc = evaluate(model_lstm, test_iter, criterion)\n\nprint(f\"Test Loss: {test_loss:.3f} | Test Acc : {test_acc*100:.3f}%\")","91ad504f":"def predict_sentiment(model, sentence):\n    model.eval()\n    tokenizer = lambda x: str(x).translate(str.maketrans('', '', string.punctuation)).strip().split()\n    tokenized = [tok for tok in tokenizer(sentence)]\n    print(tokenized)\n    indexed = [TEXT.vocab.stoi[t] for t in tokenized]\n    length = [len(indexed)]\n    tensor = torch.LongTensor(indexed).to(device)\n    tensor = tensor.unsqueeze(1)\n    length_tensor = torch.LongTensor(length).to(device)\n    prediction = torch.sigmoid(model(tensor, length_tensor))\n    return prediction.item()","b44fc652":"predict_sentiment(model_lstm, \"i love it\")","de6b6c47":"predict_sentiment(model_lstm, \"nothing funny\")","dcb4d981":"## Train the model\n\nThe only change here is changing the optimizer from SGD to Adam. \n\nSGD updates all parameters with the same learning rate and choosing this learning rate can be tricky. \n\nAdam adapts the learning rate for each parameter, giving parameters that are update more frequently lower learning rate and parameters that are update infrequently higher learning rates. \n","9c7c6c2e":"**Thanks to pytorch-sentiment-analysis tutorial on Github.**\n\nhttps:\/\/github.com\/bentrevett\/pytorch-sentiment-analysis\/\n\nAnd Because of the constraint of the kaggle kernels, some modification was made.","04d47c92":"## Next Steps\n\nWe finally built a decent sentiment analysis model for movie reviews! In the next we will implement a model that gets comparable accuracy with far fewer parameters and trains much faster.","21e16647":"## Build the Model\n\nUsing LSTM instead of RNN. (RNN suffers from vanishing gradient problem.) ","a1d4eb4c":"## Preparing Data\n\npacked padded sequences, which will make our RNN only process the non-padded elements of our sequence\n\nTo use the packed padded sequences, we have to tell the RNN how long the actual sequences are.\n\nsetting **include_lengths=True** for our TEXT field. \n\nThis will cause batch.text to now be a tuple with the first element being our sentence (a numericalized tensor that has been padded) and the second element being the actual lengths of our sentences.","e64ddc4e":"## User Input \n\nWe can now use our model to predict the sentiment of any sentence we give it. As it has been trained on movie reviews, the sentences provide should also be movie reviews.\n\nWhen using a model for interface it should always be in evaluation mode. We explicitly set it to avoid tasks.\n\nOur predict_sentiment function does a few things:\n\n- sets the model to eval\n- tokenizes the sentences i.e. splits it from a raw string into a list of tokens.\n- indexes the token by converting them into their integer representation from our vocabulary\n- get length of our sequence.\n- converts the indexes, list->tensor\n- add a batch dimension by unsqueezeing\n- converts the length into a tensor\n- squashes the output prediction from a real number to 0 ~ 1 with the sigmoid function \n- convert the tensor holding a single value into an integer with the item() method "}}