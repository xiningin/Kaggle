{"cell_type":{"268ac070":"code","9df82ac2":"code","00150e90":"code","e008f20e":"code","5b44d916":"code","6c1796d0":"code","c1198958":"code","60757e0b":"code","1ef19d25":"code","e649c1db":"code","3612280d":"code","13d26b69":"code","f61a938e":"code","a88a95f9":"code","b3180991":"code","c0396211":"code","252205fd":"code","23dfe89d":"code","9d83496b":"code","8bdeb12a":"markdown","639f84f1":"markdown","a32d7848":"markdown","b633724d":"markdown","59832eca":"markdown","59ea0b15":"markdown","a459317a":"markdown","2aad44a6":"markdown","2a173414":"markdown","b84aac9e":"markdown","26555da4":"markdown","4fac01cb":"markdown","13336f9c":"markdown","694d5c59":"markdown"},"source":{"268ac070":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # charts","9df82ac2":"filename = r'\/kaggle\/input\/emgstaticdynamic\/badanie statyczne z obciazeniem.txt'\nwith open(filename, \"r\") as fin:\n    rows = fin.readlines()[7:]\nwith open('static.txt', 'w') as fout:\n    fout.writelines(rows)\n    \nstatic = pd.read_csv(r'\/kaggle\/working\/static.txt', sep ='\\t', header=None).drop(2,1)\nstatic.columns = ['t[min]', 'U[mV]']\n\nstatic['t[s]'] = static['t[min]']*60 #add column based on t[min] in seconds\nstatic = static.drop('t[min]',1) #remove temporary column with time in [min] unit\nstatic = static[['t[s]','U[mV]']] #reorder columns\nstatic.head()","00150e90":"# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nstatic.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.05,ax=ax)\nplt.show()","e008f20e":"#1661,   6190\nfirst = static[2200:6690]\n\n# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nfirst.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.5,ax=ax)\nplt.show()","5b44d916":"def window_rms(a, window_size):\n  a2 = np.power(a,2)\n  window = np.ones(window_size)\/float(window_size)\n  return np.sqrt(np.convolve(a2, window, 'valid'))\n\nwindowSize = 1000;\nstaticLonger = static['U[mV]'].copy()\nstaticLonger = staticLonger.append(staticLonger[0:windowSize-1]) #expand series to add points for windowSize\n\n\nstaticRMSsignal = window_rms(staticLonger, windowSize)\nstaticRMS = static.copy()\nstaticRMS['U[mV]'] = staticRMSsignal","6c1796d0":"# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nstaticRMS.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.5,ax=ax)\nplt.show()","c1198958":"def split_above_threshold(signal, threshold):\n    mask = np.concatenate(([False], signal > threshold, [False] ))\n    idx = np.flatnonzero(mask[1:] != mask[:-1])\n    return idx\n\n\nidx = split_above_threshold(staticRMSsignal, 0.008)\nidx","60757e0b":"windowSize = 30;\nstaticLonger = static['U[mV]'].copy()\nstaticLonger = staticLonger.append(staticLonger[0:windowSize-1]) #expand series to add points for windowSize\n\n\nstaticRMSsignal = window_rms(staticLonger, windowSize)\nstaticRMS = static.copy()\nstaticRMS['U[mV]'] = staticRMSsignal","1ef19d25":"# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nstaticRMS.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.2,ax=ax)\nplt.show()","e649c1db":"signalOutT = [staticRMS['t[s]'][(idx[i]+800):(idx[i+1]+150)] for i in range(0,len(idx),2)]\nsignalOutU = [staticRMS['U[mV]'][(idx[i]+800):(idx[i+1]+150)] for i in range(0,len(idx),2)]","3612280d":"for i in range(len(signalOutT)):\n  plt.plot(signalOutT[i],signalOutU[i])","13d26b69":"for i in range(len(signalOutT)):\n    plt.figure(figsize=(10,3))\n    plt.plot(signalOutT[i],signalOutU[i],color=\"red\")\n    # Show\/save figure as desired.\n    plt.show()\n    ","f61a938e":"for i in range(len(signalOutU)):\n    print(np.mean(signalOutU[i],axis=0))","a88a95f9":"from scipy.signal import find_peaks\npeaks, _ = find_peaks(staticRMSsignal, distance=15000)\n\n# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nplt.plot(peaks, staticRMSsignal[peaks], \"xr\"); plt.plot(staticRMSsignal); plt.legend(['distance'])\nplt.show()","b3180991":"print(staticRMSsignal[peaks])","c0396211":"filename = r'\/kaggle\/input\/emgstaticdynamic\/badanie dynamiczne z obciazeniem.txt'\nwith open(filename, \"r\") as fin:\n    rows = fin.readlines()[7:]\nwith open('dynamic.txt', 'w') as fout:\n    fout.writelines(rows)\n    \ndynamic = pd.read_csv(r'\/kaggle\/working\/dynamic.txt', sep ='\\t', header=None).drop(2,1)\ndynamic.columns = ['t[min]', 'U[mV]'] #rename columns\n\ndynamic['t[s]'] = dynamic['t[min]']*60 #add column based on t[min] in seconds\ndynamic = dynamic.drop('t[min]',1) #remove temporary column with time in [min] unit\ndynamic = dynamic[['t[s]','U[mV]']] #reorder columns\ndynamic.head()","252205fd":"# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\ndynamic.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.25,ax=ax)\nplt.show()","23dfe89d":"windowSize = 1000;\ndynamicLonger = dynamic['U[mV]'].copy()\ndynamicLonger = dynamicLonger.append(dynamicLonger[0:windowSize-1]) #expand series to add points for windowSize\n\n\ndynamicRMSsignal = window_rms(dynamicLonger, windowSize)\ndynamicRMS = dynamic.copy()\ndynamicRMS['U[mV]'] = dynamicRMSsignal\n\n\n# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\ndynamicRMS.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.2,ax=ax)\nplt.show()\n\nidx = split_above_threshold(dynamicRMSsignal, 0.008)\n\nwindowSize = 30;\ndynamicLonger = dynamic['U[mV]'].copy()\ndynamicLonger = dynamicLonger.append(dynamicLonger[0:windowSize-1]) #expand series to add points for windowSize\n\n\ndynamicRMSsignal = window_rms(dynamicLonger, windowSize)\ndynamicRMS = dynamic.copy()\ndynamicRMS['U[mV]'] = dynamicRMSsignal\n\n# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\ndynamicRMS.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.2,ax=ax)\nplt.show()\n\nsignalOutT = [dynamicRMS['t[s]'][(idx[i]+800):(idx[i+1]+150)] for i in range(0,len(idx),2)]\nsignalOutU = [dynamicRMS['U[mV]'][(idx[i]+800):(idx[i+1]+150)] for i in range(0,len(idx),2)]\n\n\nfor i in range(len(signalOutT)):\n  plt.plot(signalOutT[i],signalOutU[i])\n\nfor i in range(len(signalOutT)):\n    plt.figure(figsize=(10,3))\n    plt.plot(signalOutT[i],signalOutU[i],color=\"red\")\n    # Show\/save figure as desired.\n    plt.show()\n    \n\n","9d83496b":"from scipy.signal import find_peaks\npeaks, _ = find_peaks(dynamicRMS['U[mV]'], distance=15000)\n\n# a scatter plot\nf, ax = plt.subplots(1, 1, figsize = (35, 10))\nplt.plot((peaks\/1000), dynamicRMS['U[mV]'][peaks], \"xb\"); dynamicRMS.plot(kind='line',x='t[s]',y='U[mV]',color='red',linewidth=.2,ax=ax); plt.legend(['Peak-to-peak'])\nplt.show()\n\nprint(dynamicRMSsignal[peaks])","8bdeb12a":"First RMS is taken with large 1000 width window to find sharp borders of signal.","639f84f1":"Find ranges where signal goes high to use as filter for finding mean amplitude. Output shows points where signal goes sharply up or down. It lets us filter ranges with signal after correcting for large window width.","a32d7848":"Something wrong here!","b633724d":"Real analysis of EMG signal starts here. Take analysis with window width between 30 and 100.","59832eca":"Load libraries used in this notebook","59ea0b15":"# EMG signal analysis\n1. Moving Root Mean Squared of signal with window of particular size\n\nIt is possible to use convolution to perform the operation. Breaking it down, the np.power(a, 2) part makes a new array with the same dimension as a, but where each value is squared. np.ones(window_size)\/float(window_size) produces an array or length window_size where each element is 1\/window_size. So the convolution effectively produces a new array where each element i is equal to [(a[i]^2 + a[i+1]^2 + \u2026 + a[i+window_size]^2)\/window_size] which is the RMS value of the array elements within the moving window. It should perform really well this way.\n","a459317a":"Plot filtered signals.","2aad44a6":"from scipy.fft import fft, fftfreq, fftshift, next_fast_len\nfrom scipy.signal import hamming\nfrom scipy.signal.windows import hamming\n\nT = 1.0 \/ 1000.0 #sample spacing\n\nN = 3879 # Number of sample points\nw = hamming(N, sym=False) #Hamming window\n\n\nx = signalOutT[0].copy().tolist()\ny = signalOutU[0].copy().tolist()\n\nl = next_fast_len(N)\nyf = fft(y*w,l)\nxf = fftfreq(l, T)\nxf = fftshift(xf)\nyplot = fftshift(yf)\n\n\nplt.semilogy(xf, 1.0\/N * np.abs(yplot))\nplt.grid()\nplt.show()","2a173414":"Pierwszy pr\u00f3bny sygna\u0142.","b84aac9e":"Import data from .txt files. Files contain more than one hundred of thousand data points. ","26555da4":"Plot filtered signals each on its own chart.","4fac01cb":"Plot sample data","13336f9c":"Show signal after RMS analysis.","694d5c59":"Calculate Fast Fourier Transfrom of first signal because it differs from the rest."}}