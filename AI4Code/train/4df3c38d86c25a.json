{"cell_type":{"58067f9b":"code","0a388db0":"code","8e19857a":"code","fb103ccd":"code","fe71a6f3":"code","7c33ba2e":"code","b73acad4":"code","bbde1b08":"code","3709d0bf":"code","26ed044e":"code","7f7cd9f4":"code","52398841":"code","45164dd9":"code","f85f66f2":"code","57e030a8":"code","2507442f":"code","214ffa14":"markdown","2259da3b":"markdown","5b7692a5":"markdown","ab77a655":"markdown","0877f213":"markdown"},"source":{"58067f9b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0a388db0":"csv_path = \"\/kaggle\/input\/temperature-data-set-20052015-michigan-usa\/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv\"\nbin_sized400_path = \"\/kaggle\/input\/temperature-data-set-20052015-michigan-usa\/BinSize_d400.csv\"","8e19857a":"# importing Python modules\nimport matplotlib.pyplot as plt\nimport mplleaflet\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\ndef leaflet_plot_stations(binsize, hashid):\n\n    df = pd.read_csv('\/kaggle\/input\/temperature-data-set-20052015-michigan-usa\/\/BinSize_d{}.csv'.format(binsize))\n\n    station_locations_by_hash = df[df['hash'] == hashid]\n\n    lons = station_locations_by_hash['LONGITUDE'].tolist()\n    lats = station_locations_by_hash['LATITUDE'].tolist()\n\n    plt.figure(figsize=(8,8))\n\n    plt.scatter(lons, lats, c='r', alpha=0.7, s=200)\n\n    return mplleaflet.display()\n\nleaflet_plot_stations(400, csv_path)","fb103ccd":"# Loading the data\ntemperature_data = pd.read_csv(csv_path)","fe71a6f3":"# Getting data during the period of 2005-2014\ndata = temperature_data[(temperature_data[\"Date\"] >= \"2005-01-01\") & (temperature_data[\"Date\"] <= \"2014-12-31\")]\n# Getting data during the year 2015\ndata_2015 = temperature_data[(temperature_data[\"Date\"] >= \"2015-01-01\") & (temperature_data[\"Date\"] <= \"2015-12-31\")]","7c33ba2e":"# Removing Leap days\ndata = data[~data.Date.str.endswith('02-29')].copy()","b73acad4":"# Sorting the data by Date\ndata = data.sort_values(\"Date\")","bbde1b08":"data.head()","3709d0bf":"data_2015.head()","26ed044e":"# Converting the \"Date\" column to datetime\ndata[\"Date\"] = list(map(pd.to_datetime, data[\"Date\"]))","7f7cd9f4":"# Diving the data into two dataframes for high and low\nhigh = data[data[\"Element\"] == \"TMAX\"]\nlow = data[data[\"Element\"] == \"TMIN\"]","52398841":"# Getting record high and low temperature values for each day of the year during the period of 2004-2015\nrecord_high = high.copy()\nrecord_high['dayofyear'] = record_high['Date'].map(lambda x: x.replace(year=2015).dayofyear)\nrecord_high = record_high.groupby(\"dayofyear\").max()\n\nrecord_low = low.copy()\nrecord_low['dayofyear'] = record_low['Date'].map(lambda x: x.replace(year=2015).dayofyear)\nrecord_low = record_low.groupby(\"dayofyear\").min()","45164dd9":"# Sorting values by Date\ndata_2015 = data_2015.sort_values(\"Date\")\n# Converting dates to datetime type\ndata_2015[\"Date\"] = list(map(pd.to_datetime, data_2015[\"Date\"]))\n# Diving the data into two dataframes for high and low\nhigh_2015 = data_2015[data_2015[\"Element\"] == \"TMAX\"]\nlow_2015 = data_2015[data_2015[\"Element\"] == \"TMIN\"]\n\n# Getting record high and low temperature values for each day of the year 2015\nrecord_high_2015 = high_2015.copy()\nrecord_high_2015[\"dayofyear\"] = record_high_2015[\"Date\"].dt.dayofyear\nrecord_high_2015 = record_high_2015.groupby(\"dayofyear\").max()\n\nrecord_low_2015 = low_2015.copy()\nrecord_low_2015[\"dayofyear\"] = record_low_2015[\"Date\"].dt.dayofyear\nrecord_low_2015 = record_low_2015.groupby(\"dayofyear\").min()","f85f66f2":"# Reseting dataframes indexes\nrecord_low = record_low.reset_index()\nrecord_high = record_high.reset_index()\nrecord_low_2015 = record_low_2015.reset_index()\nrecord_high_2015 = record_high_2015.reset_index()","57e030a8":"# Getting indexes of highs and lows that were broken\nbroken_lows = (record_low_2015[record_low_2015[\"Data_Value\"] < record_low['Data_Value']]).index.tolist()\nbroken_highs = (record_high_2015[record_high_2015['Data_Value'] > record_high['Data_Value']]).index.tolist()","2507442f":"plt.figure(figsize=(20,7))\nplt.plot(record_high[\"Data_Value\"], c=\"r\", alpha=0.8, label = 'Record High 2005-2014')\nplt.plot(record_low[\"Data_Value\"], c=\"b\", alpha=0.8, label = 'Record Low 2005-2014')\nplt.scatter(broken_lows, record_low_2015['Data_Value'].iloc[broken_lows], s=20, c = 'black', label = 'Record Low broken in 2015')\nplt.scatter(broken_highs, record_high_2015['Data_Value'].iloc[broken_highs], s=20, c = 'b', alpha=0.8, label = 'Record High broken in 2015')\nplt.legend()\nplt.title(\"2015's temperature breaking points against 2005-2014 in Ann Arbor, Michigan, US\")\nplt.fill_between(range(len(record_low)),\n                       record_low[\"Data_Value\"], record_high[\"Data_Value\"], \n                       facecolor='pink', \n                       alpha=0.11);\n# Aligning plot\nplt.gca().axis([-1, 365, -400, 450])\n\n# Hiding plot spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\n\n# Changing Vertical and Horizontal Ticks labels\nmonth_ticks = [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330]\ndivs = [i+15 for i in month_ticks]\nmonth_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nplt.xticks(divs, month_names)\ntemp = [str(tick\/10)+str(' \u00b0C') for tick in plt.gca().get_yticks()]\nplt.gca().set_yticklabels(temp);\nplt.savefig('Temp_Plot.png');","214ffa14":"# 2015 Temperature Data Visualization And Comparaison\n\nIn this notebook we will be looking at the tempature variation between the years 2005 and 2014, then we will doing a comparison with the year 2015's temperatures and see where the it surpasses that period's record **low** or **high** temperatures.\n\nAn NOAA dataset has been stored in the file `Data\/BinnedCsvs_d400\/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv`. The data comes from a subset of The National Centers for Environmental Information (NCEI) [Daily Global Historical Climatology Network](https:\/\/www1.ncdc.noaa.gov\/pub\/data\/ghcn\/daily\/readme.txt) (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.\n\nEach row in the datafile corresponds to a single observation.\n\nIt contains the following variables :\n\n* **id** : station identification code\n* **date** : date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012)\n* **element** : indicator of element type\n    * TMAX : Maximum temperature (tenths of degrees C)\n    * TMIN : Minimum temperature (tenths of degrees C)\n* **value** : data value for element (tenths of degrees C)\n\nWe will :\n\n1. Write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day will be shaded.\n2. Overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.\n3. Watch out for leap days (i.e. February 29th), it is reasonable to remove these points from the dataset for the purpose of this visualization.\n4. Make sure that the visual effectively leverages the guidelines given for effective visual design (e.g., beauty, truthfulness, functionality, and insightfulness).\n\nThe data contains temperature information for **Ann Arbor, Michigan, United States**, and the stations the data comes from are shown on the map below.","2259da3b":"And now for 2015's data :","5b7692a5":"We will remove the leap days for the first data frame, but not for 2015 since it's **not** a leap year.","ab77a655":"We will first start with the first data frame that contains the 2005-2014 data, then we will repeat the same steps for 2015's data.","0877f213":"### Visualizing the data :"}}