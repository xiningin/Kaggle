{"cell_type":{"34154975":"code","3571312a":"code","adf24a68":"code","c4a5ad34":"code","bf2b93d0":"code","cd6867e6":"code","c759b051":"code","89168aa0":"code","4faea932":"code","89c210c4":"code","b205c83c":"code","3f6d6eb1":"code","f903e56d":"code","bad65173":"code","46555a9c":"code","ee8f97f4":"code","e8146727":"code","89e8fde7":"code","c378e065":"code","3219aca6":"code","79310e45":"code","9759526c":"code","3360d9b3":"code","871e5966":"code","eb9b8193":"code","e9a938b8":"code","2b55483f":"code","3b039efc":"code","c080671b":"code","9f2c85ee":"code","9590696b":"code","c5bfb330":"code","99e35d6b":"code","b63c344e":"code","53399b79":"code","4c5632d0":"markdown","d43f2f1c":"markdown","e6fd7b1f":"markdown","90e8b03b":"markdown","70e9a4d6":"markdown","3acd3c88":"markdown","9590ed64":"markdown","65b2db17":"markdown","3226deab":"markdown","53683a64":"markdown","fd83d6f8":"markdown","5ea37c82":"markdown","9fc072c0":"markdown","b0a9a8cf":"markdown","e131ed41":"markdown"},"source":{"34154975":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3571312a":"import multiprocessing\nimport seaborn as sns\nimport email\nimport matplotlib.pyplot as plt","adf24a68":"df = pd.read_csv(\"\/kaggle\/input\/enron-email-dataset\/emails.csv\")","c4a5ad34":"# view first 5 rows of the dataset\ndf.head()","bf2b93d0":"# get shape of the data\ndf.shape","cd6867e6":"# a sample email\nprint(df.loc[1]['message'])","c759b051":"# transform the email into correct format\nmessage = df.loc[1]['message']\ne = email.message_from_string(message)\n\ne.items()","89168aa0":"# get date\ne.get('Date')","4faea932":"# show message body\ne.get_payload()","89c210c4":"# now we add those fields into our 'df' dataframe\ndef get_field(field, messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get(field))\n    return column","b205c83c":"df['date'] = get_field(\"Date\", df['message'])\ndf['subject'] = get_field(\"Subject\", df['message'])\ndf['X-Folder'] = get_field(\"X-Folder\", df['message'])\ndf['X-From'] = get_field(\"X-From\", df['message'])\ndf['X-To'] = get_field(\"X-To\", df['message'])\ndf.head(3)","3f6d6eb1":"def body(messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get_payload())\n    return column\n\ndf['body'] = body(df['message'])\ndf.head(3)","f903e56d":"df['file'][:10]","bad65173":"def employee(file):\n    column = []\n    for string in file:\n        column.append(string.split(\"\/\")[0])\n    return column\n\ndf['employee'] = employee(df['file'])\ndf.head(3)","46555a9c":"print(\"number of folders: \", df.shape[0])\nprint(\"number of unique folders: \", df['X-Folder'].unique().shape[0])","ee8f97f4":"unique_emails = pd.DataFrame(df['X-Folder'].value_counts())\nunique_emails.reset_index(inplace=True)\n\n\nunique_emails.columns = ['folder_name', 'count']\n# top 20 folders\nunique_emails.iloc[:20,:]","e8146727":"plt.figure(figsize=(10,6))\nsns.barplot(x='count', y='folder_name', data=unique_emails.iloc[:20, :], palette=\"Blues_d\")\nplt.title(\"Top 20 folders\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Folder_Name\")\nplt.show()","89e8fde7":"top_20 = pd.DataFrame(df['employee'].value_counts()[:20])\ntop_20.reset_index(inplace=True)\ntop_20.columns = [\"Employee_name\", \"Counts\"]\ntop_20","c378e065":"plt.figure(figsize=(10,8))\n\nsns.barplot(y=\"Employee_name\", x=\"Counts\", data=top_20, palette=\"Blues_d\")\nplt.title(\"Top 20 highest email sender employee\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Employee_name\")\nplt.show()","3219aca6":"import datetime\nfrom dateutil import parser\n\n# this is sample example\nx = parser.parse(\"Fri, 4 May 2001 13:51:00 -0700 (PDT)\")\nprint(x.strftime(\"%d-%m-%Y %H:%M:%S\"))","79310e45":"def change_type(dates):\n    column = []\n    \n    for date in dates:\n        column.append(parser.parse(date).strftime(\"%d-%m-%Y %H:%M:%S\"))\n    return column\n\ndf['date'] = change_type(df['date'])\ndf.head(2)","9759526c":"print(df['X-Folder'][0])\n\n# we only want last folder name\ndf['X-Folder'][0].split(\"\\\\\")[-1]","3360d9b3":"def preprocess_folder(folders):\n    column = []\n    for folder in folders:\n        if (folder is None or folder == \"\"):\n            column.append(np.nan)\n        else:\n            column.append(folder.split(\"\\\\\")[-1].lower())\n    return column\n\ndf['X-Folder'] = preprocess_folder(df['X-Folder'])\ndf.head(2)","871e5966":"# count unique folders\nprint(\"Unique Foldes: \", len(df['X-Folder'].unique()))\n\n# view some of them\ndf['X-Folder'].unique()[0:20]","eb9b8193":"def replace_empty_with_nan(subject):\n    column = []\n    for val in subject:\n        if (val == \"\"):\n            column.append(np.nan) \n        else:\n            column.append(val)\n    return column","e9a938b8":"df['subject'] = replace_empty_with_nan(df['subject'])\ndf['X-To'] = replace_empty_with_nan(df['X-To'])","2b55483f":"df.isnull().sum()","3b039efc":"# calculate percentage of missing values\nmiss = df.isnull().sum()\nmiss = miss[miss>0]\nmiss = miss \/ df.shape[0]\nmiss","c080671b":"# drop missing value rows\ndf.dropna(axis=0, inplace=True)","9f2c85ee":"df.isnull().sum(), df.shape","9590696b":"df.head(3)","c5bfb330":"cols_to_drop = ['file','message','date','X-From','X-To','employee']","99e35d6b":"df.drop(cols_to_drop, axis=1, inplace=True)","b63c344e":"df.head()","53399b79":"# save the data\n%memit df.to_csv(\"cleaned_data.csv\", index=False)","4c5632d0":"**date : column**","d43f2f1c":"### Data Exploration","e6fd7b1f":"### Import necessary libraries","90e8b03b":"### Look into X-Folder","70e9a4d6":"### Employee Names","3acd3c88":"### Load Data","9590ed64":"### Extract Message Body","65b2db17":"**Visualize top 20 highest email sender employees**","3226deab":"## Data Cleaning and Transformation","53683a64":"**Let's see top 20 highest email sender employee**","fd83d6f8":"**Column : X-Folder**","5ea37c82":"Drop the following columns:\n- file\n- message\n- date\n- X-From\n- X-To\n- employee","9fc072c0":"### Visualize top 20 folders","b0a9a8cf":"**Replace empty missing values in subject with np.nan**","e131ed41":"### Extract headers"}}