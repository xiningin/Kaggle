{"cell_type":{"d6ab6529":"code","5aaffa67":"code","c720d5a1":"code","e58ad7ef":"code","b4dc2e3e":"code","2fdc0e24":"code","31faacef":"code","4d18560f":"code","54d78237":"code","b3472a1c":"code","ab2e0832":"code","263201c3":"code","17df8dea":"code","42f0e408":"code","04fc3a3d":"code","3a7ae1d5":"markdown","b83be0db":"markdown","111ae025":"markdown","11537d5e":"markdown","f80b65b4":"markdown","d2492916":"markdown","6e257829":"markdown","321c253b":"markdown","35badfe6":"markdown"},"source":{"d6ab6529":"import numpy as np\nimport pandas as pd","5aaffa67":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","c720d5a1":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","e58ad7ef":"train.head()","b4dc2e3e":"train.columns","2fdc0e24":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","31faacef":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","4d18560f":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","54d78237":"str_list","b3472a1c":"num_list","ab2e0832":"from sklearn import ensemble\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\n\nrf_est = ensemble.RandomForestClassifier(\n    n_estimators = 750, \n    criterion = 'gini', \n    max_features = 'sqrt', \n    max_depth = 3, \n    min_samples_split = 4, \n    min_samples_leaf = 2, \n    n_jobs = 50, \n    random_state = 42, \n    verbose = 1)\n\ngbm_est = ensemble.GradientBoostingClassifier(\n    n_estimators = 900, \n    learning_rate = 0.0008, \n    loss = 'exponential', \n    min_samples_split = 3, \n    min_samples_leaf = 2, \n    max_features ='sqrt', \n    max_depth = 3,  \n    random_state = 42, \n    verbose = 1)\n\net_est = ensemble.ExtraTreesClassifier(\n    n_estimators = 750, \n    max_features = 'sqrt', \n    max_depth = 35,  \n    n_jobs = 50, \n    criterion = 'entropy', \n    random_state = 42, \n    verbose = 1)\n\nvoting_est = ensemble.VotingClassifier(\n    estimators = [('rf', rf_est),('gbm', gbm_est),('et', et_est)],\n    voting = 'soft', \n    weights = [1,15,1],\n    n_jobs = -1)","263201c3":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"voting\", voting_est)])\nclf.fit(X, y)","17df8dea":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import cross_val_score\n\nrestul_val = cross_val_score(clf, X, y, cv=5)\nrestul_val","42f0e408":"clf.fit(X, y)\npredictions = clf.predict(X_test)","04fc3a3d":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index=False)","3a7ae1d5":"# Devide Column ","b83be0db":"# Load Data","111ae025":"# Submission","11537d5e":"# Set Train data and target \/ Set Test data","f80b65b4":"# Voting Model ","d2492916":"# fit total train data and predict test data","6e257829":"# evaluate train data ","321c253b":"# Delete Columns","35badfe6":"# Auto Pipeline"}}