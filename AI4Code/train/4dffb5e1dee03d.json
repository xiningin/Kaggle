{"cell_type":{"28061350":"code","bd7d8fd5":"code","1ad88d70":"code","77cdf20b":"code","7ca7af7b":"code","81b796d4":"code","3f7a8e7d":"code","56733b34":"code","3f57687a":"code","6a45e299":"code","50b03334":"code","df930759":"code","0fdfcfd0":"code","24ae5d82":"code","0fbfe4e1":"markdown","f7b745b9":"markdown","66c2ecf9":"markdown","d605c984":"markdown"},"source":{"28061350":"#Import library yang akan gigunakan\nimport pandas as pd #Library panda untuk membaca file csv\nfrom sklearn.model_selection import train_test_split #Train\/test split adalah salah satu metode yang dapat digunakan untuk mengevaluasi performa model machine learning. Metode evaluasi model ini membagi dataset menjadi dua bagian yakni bagian yang digunakan untuk training data dan untuk testing data dengan proporsi tertentu.\nfrom sklearn.preprocessing import StandardScaler #Library untuk melakukan tugas Standardisasi . Biasanya dataset berisi variabel yang berbeda dalam skala misal umur ada yang 48-60\nscaler=StandardScaler() #Inisiasi fungsi scaler","bd7d8fd5":"#import dataset yang sudah di download dari web https:\/\/archive.ics.uci.edu\/ml\/datasets.php\n#dataset berisi tentang gejala gejala diabetes beserta umur serta gender pasien\n#Dengan menggunakan algoritma knn diharapkan bisa memprediksi apakah positif diabetes atau tidak berdasarkan gejala yang ditunjukan\ndata = pd.read_csv(\"..\/input\/diabetes\/diabetes_data_upload.csv\")\ndata.head(5)","1ad88d70":"data.describe(include='all') #Menunjukkan rangkuman statistik seperti rata-rata, median, dll pada kolom.","77cdf20b":"#mendefinisikan fungsi untuk preprosessing data\ndef preprocessing(data):\n    df= data.copy() #menyalin dataFrame yang disimpan di parameter data\n    \n    # Mengubah isi kolom gender yang semula female dan male menjadi 0 dan 1\n    df['Gender'] = df ['Gender'].replace({'Female':0,'Male':1 })\n    \n    #Mengubah isi kolom selain Age, Gender, Class yang berisi 'No' dan 'Yes' menjadi 0 dan 1\n    for column in df.columns.drop(['Age','Gender','class']):\n        df[column]= df[column].replace({'No':0 , 'Yes': 1})\n    \n    #Melakukan Traning\n    y=df[\"class\"] #menyimpan kolom class ke variabel y\n    X=df.drop(\"class\", axis=1) #drop kolom class \n    \n    #test_train_split membagi data menjadi dua bagian yaitu traning dan test\n    X_train, X_test,y_train,y_test = train_test_split(X,y,train_size=0.7,shuffle=True,random_state=1)\n    \n    #StandardScaler\n    scaler.fit(X_train) #Hitung mean dan std yang akan digunakan untuk penskalaan nanti.\n    X_train=pd.DataFrame(scaler.transform(X_train),index=X_train.index , columns=X_train.columns) #membuat dataframe menggunakan X_train\n    X_test=pd.DataFrame(scaler.transform(X_test),index=X_test.index, columns=X_test.columns) #membuat dataframe menggunakan X_test\n    \n    return X_train,X_test,y_train,y_test #mereturn X_train,X_test, y_train, y_test ketika fungsi preprocessing di panggil","7ca7af7b":"#memanggil fungsi preprocessing yang sudah di buat tadi dengan argumen data (variabel yang menyimpan dataset .csv)\nX_train,X_test,y_train,y_test= preprocessing(data)","81b796d4":"#menampilkan dataframe X_train\nX_train","3f7a8e7d":"#import library KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2) #settingan default knn\nknn.fit(X_train, y_train) #setelah membuat data train dan test, maka masukkan data training pada fungsi klasifikasi KNN","56733b34":"y_pred = knn.predict(X_test) #melakukan prediksi ke data test \ny_pred","3f57687a":"#menghitung matrix confusion dari test dengan prediksi klasifikasi knn\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","6a45e299":"#menghitung akurasi dari model yang dibuat\nfrom sklearn.metrics import accuracy_score\nround(accuracy_score(y_pred,y_test)*100,2)","50b03334":"#melakukan prediksi menggunakan data baru (No = 0 Yes = 1) dan gender (Male = 1 Female= 0)\n#Age,Gender,Polyuria,Polydipsia,sudden weight loss,weakness,Polyphagia,Genital thrush,visual blurring,Itching,Irritability,delayed healing,partial paresis,muscle stiffness,Alopecia,Obesity\nprint(knn.predict(scaler.transform([[42,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1]])))","df930759":"#import library SVM\nfrom sklearn import svm\n\nsv = svm.SVC(kernel='linear')\n\nsv.fit(X_train, y_train) #masukkan data training pada fungsi klasifikasi SVM\n\nY_pred_svm = sv.predict(X_test) #melakukan prediksi pada data test\n\nY_pred_svm","0fdfcfd0":"#menghitung matrix confusion dari test dengan prediksi klasifikasi svm\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred_svm)\ncm","24ae5d82":"score_svm = round(accuracy_score(Y_pred_svm,y_test)*100,2) #menghitung akurasi klasifikasi SVM\n\nscore_svm","0fbfe4e1":"Dari model svm yang kita buat berdasarkan matrik confusion kita mendapat\nTrue Positif = 53, False Positif = 5,\nTrue Negatif = 90, False Negatif = 8,","f7b745b9":"Akurasi model knn yang dibuat sebesar 90.38 persen","66c2ecf9":"Dari model knn yang kita buat berdasarkan matrik confusion kita mendapat\nTrue Positif = 54, False Positif = 4,\nTrue Negatif = 87, False Negatif = 11,","d605c984":"Skor akurasi klasifikasi SVM mencapai 91.67 persen "}}