{"cell_type":{"9ce30ada":"code","1ced1cd2":"code","92938e86":"code","de141364":"code","6bf0e405":"code","c4a985e3":"code","35972c9e":"code","c4659ac1":"code","8669ee19":"code","579420d9":"code","d98a6981":"code","5e7daadb":"code","c71c70fd":"code","fc271f09":"code","a20d0a36":"code","12bc2485":"code","3dd9d59c":"code","c91131db":"code","b95a5070":"code","4852045c":"code","10f2e985":"code","9c5929e6":"code","a6cb3493":"code","701dcfe9":"code","dd257162":"code","6c4628ff":"code","46c7083d":"code","259b8dc8":"code","49e71eed":"code","dec38d2a":"code","33f8d00b":"code","bc208d20":"code","b04dd23e":"code","8ea94d58":"code","86a3204e":"code","d50a5cf6":"code","499175c7":"code","91b26b93":"code","bfd8e94d":"code","b2f67d62":"code","c7759f6b":"code","f2c058d0":"code","32590059":"code","1c5e6e08":"code","37861212":"code","5282bc11":"code","a9129171":"code","0146c0d9":"code","79b4aa30":"code","99967948":"code","10be202b":"code","c2d36ae9":"code","0c6ddbce":"code","c1623410":"code","ed4971f4":"code","d39e260b":"code","9d393c6a":"code","559e69cf":"code","39fbe333":"code","a9a031c4":"code","7c6e4af3":"code","b80e7d46":"code","586afb9d":"code","f28594ae":"code","18073803":"code","c1dca788":"code","a58527d0":"code","c860910e":"code","57a109c6":"code","92ca8a84":"code","3052e619":"code","c47615a3":"code","bf80628c":"code","2cc72d06":"code","b461e089":"code","629c173b":"code","e329c353":"code","b4406be7":"code","790ff383":"code","b10c27c7":"code","5fe5e1e1":"code","26216e36":"code","8aa2756f":"code","5bd59977":"code","fce66bab":"code","d5e2e6a5":"code","5651d16a":"code","5a337168":"code","3b12cd4a":"code","f7a91a72":"code","3a54a072":"code","f480a531":"code","f1f2545c":"code","3a6845ce":"code","021c4f90":"code","1af295a1":"code","badf360f":"markdown","75f3402d":"markdown","ec8f12d0":"markdown","ff7db5c6":"markdown","7b3532ad":"markdown","b3a22163":"markdown","3c5b7b41":"markdown","42a76170":"markdown","4f4c0f48":"markdown","09f61d1a":"markdown","10f8d334":"markdown","e2024da3":"markdown","ead288da":"markdown","a9288bf3":"markdown","43b5a075":"markdown","4d52b4fa":"markdown","18252cbf":"markdown","7c8d128b":"markdown","71e25870":"markdown","0e95edcc":"markdown","326a2830":"markdown","9058fed1":"markdown","7113fb7c":"markdown","95bef0e1":"markdown","cc96a834":"markdown","b51628a3":"markdown","2394d554":"markdown","6cba2ea4":"markdown","5c5455b9":"markdown","20a35a27":"markdown","4eb3ed19":"markdown","d06435b1":"markdown","767e3026":"markdown","db13e982":"markdown","5539d7e5":"markdown","bcb9d369":"markdown","bbe52d56":"markdown","3df35db2":"markdown","86ed8c6c":"markdown","c576cae3":"markdown","022f2f3a":"markdown","77e0f9bd":"markdown","df3dc22e":"markdown","cd6c5426":"markdown","14d5a760":"markdown","032e02f3":"markdown","11cfbe96":"markdown","3f05415e":"markdown","269cdfc8":"markdown","ccb92cf3":"markdown","e100ac37":"markdown","53744081":"markdown","ed0a9123":"markdown","930c1fd2":"markdown","cde940f9":"markdown","4ec67068":"markdown","aec60cb5":"markdown"},"source":{"9ce30ada":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","1ced1cd2":"import warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 150)\npd.set_option('max_rows', 150)","92938e86":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import pyplot\n\nimport plotly.graph_objs as go\nimport plotly as py\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","de141364":"# Read data\npath = '..\/input\/walmart-recruiting-store-sales-forecasting\/'\n\nfeatures = pd.read_csv(f'{path}features.csv.zip')\ntrain = pd.read_csv(f'{path}train.csv.zip')\ntest = pd.read_csv(f'{path}test.csv.zip')\nstores = pd.read_csv(f'{path}stores.csv')\nsample_submission = pd.read_csv(f'{path}sampleSubmission.csv.zip')","6bf0e405":"pd.DataFrame(features.dtypes, columns=['Type']).T","c4a985e3":"pd.DataFrame(train.dtypes, columns=['Type']).T","35972c9e":"pd.DataFrame(stores.dtypes, columns=['Type']).T","c4659ac1":"features.head()","8669ee19":"%%time\nfeatures.describe()","579420d9":"train.head()","d98a6981":"%%time\ntrain.describe()","5e7daadb":"stores.head()","c71c70fd":"%%time\nstores.describe()","fc271f09":"dataset = train.merge(stores, how='left').merge(features, how='left')\ndataset.shape","a20d0a36":"dataset.head() ","12bc2485":"dataset_test = test.merge(stores, how='left').merge(features, how='left')\ndataset_test.shape","3dd9d59c":"\ndataset['Date'] = pd.to_datetime(dataset['Date'])\ndataset['Year'] = pd.to_datetime(dataset['Date']).dt.year\ndataset['Month'] = pd.to_datetime(dataset['Date']).dt.month\ndataset['Week'] = pd.to_datetime(dataset['Date']).dt.week\ndataset['DayOfTheWeek'] = dataset['Date'].dt.dayofweek\ndataset['Day'] = pd.to_datetime(dataset['Date']).dt.day\ndataset.replace({'A': 1, 'B': 2,'C':3},inplace=True)\n\ndataset_test['Date'] = pd.to_datetime(dataset_test['Date'])\ndataset_test['Year'] = pd.to_datetime(dataset_test['Date']).dt.year\ndataset_test['Month'] = pd.to_datetime(dataset_test['Date']).dt.month\ndataset_test['Week'] = pd.to_datetime(dataset_test['Date']).dt.week\ndataset_test['DayOfTheWeek'] = dataset_test['Date'].dt.dayofweek\n\ndataset_test['Day'] = pd.to_datetime(dataset_test['Date']).dt.day\ndataset_test.replace({'A': 1, 'B': 2,'C':3},inplace=True)","c91131db":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","b95a5070":"%%time\nmissing_data(dataset)","4852045c":"import missingno as msno\nmsno.matrix(dataset)","10f2e985":"%%time\na = msno.heatmap(dataset, sort='ascending')\na","9c5929e6":"# Number of each type of column\ndataset.dtypes.value_counts()","a6cb3493":"# Number of unique classes in each object column\ndataset.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","701dcfe9":"%%time\ncorrs = dataset.corr()\nplt.figure(figsize = (20, 8))\n# Heatmap of correlations\nsns.heatmap(corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.8)\nplt.title('Clustermap');","dd257162":"%%time\nfeatures = dataset.columns.values\ncorrs_ = dataset[features].corr().abs().unstack().sort_values(kind=\"quicksort\").reset_index()\ncorrs_ = corrs_[corrs_['level_0'] != corrs_['level_1']]\ncorrs_.head(15).T","6c4628ff":"corrs_.tail(15).T","46c7083d":"# Threshold for removing correlated variables\nthreshold = 0.92\n\n# Absolute value correlation matrix\ncorr_matrix = dataset.corr().abs()\ncorr_matrix.head()","259b8dc8":"# Upper triangle of correlations\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nupper.head()","49e71eed":"# Select columns with correlations above threshold\nto_drop = [column for column in upper.columns if any(upper[column] > threshold)]\n\nprint('There are %d columns to remove.' % (len(to_drop)))\ndataset = dataset.drop(columns = to_drop)\nprint('Data shape: ', dataset.shape)\nprint('Size of the data', dataset.shape)","dec38d2a":"to_drop","33f8d00b":"## Dataset missing values (in percent)\ndataset_missing = (dataset.isnull().sum() \/ len(dataset)).sort_values(ascending = False)\ndataset_missing.head()","bc208d20":"# Identify missing values above threshold\ndataset_missing_ = dataset_missing.index[dataset_missing > 0.90]\n\nall_missing = list(set(dataset_missing_))\nprint('There are %d columns with more than 90%% missing values' % len(all_missing))\ndataset = dataset.drop(columns = all_missing)\nprint('Data shape: ', dataset.shape)","b04dd23e":"import xgboost as xgb\n\ntrain_y = dataset['Weekly_Sales']\ntrain_X = dataset.drop([\"Weekly_Sales\", \"Date\"], axis=1)\n\nxgb_params = {\n    'eta': 0.05,\n    'max_depth': 10,\n    'subsample': 1.0,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}","8ea94d58":"dtrain = xgb.DMatrix(train_X, train_y, feature_names=train_X.columns.values)\nmodel = xgb.train(dict(xgb_params, silent=0), dtrain, num_boost_round=100)\nremain_num = 99\n\nfig, ax = plt.subplots(figsize=(10,8))\nxgb.plot_importance(model, max_num_features=remain_num, height=0.8, ax=ax)\nplt.show()","86a3204e":"def box_plot_dist_var(var):\n#     var = 'DayOfTheWeek'\n    data_ = pd.concat([dataset['Weekly_Sales'], dataset[var]], axis=1)\n    f, ax = plt.subplots(figsize=(16, 8))\n    fig = sns.boxplot(x=var, y=\"Weekly_Sales\", data=data_)\n    plt.xticks(rotation=90);\n\nbox_plot_dist_var(\"DayOfTheWeek\")        \nbox_plot_dist_var(\"Day\")    ","d50a5cf6":"def scatter_plot_var(var):\n    data = pd.concat([dataset['Weekly_Sales'],dataset[var] ], axis=1)\n    data.plot.scatter(x=var, y='Weekly_Sales')\nscatter_plot_var(\"Unemployment\")\nscatter_plot_var(\"CPI\")\nscatter_plot_var(\"Temperature\")\nscatter_plot_var(\"Dept\")\nscatter_plot_var(\"Type\")\n    \n","499175c7":"\n\nd_low = dataset[dataset['Weekly_Sales'] < 300000]\nd_high = dataset[dataset['Weekly_Sales'] >= 300000]\ndataset ['Weekly_Sales_low_high'] = np.where(  dataset['Weekly_Sales']<300000, 0, 1)","91b26b93":"def cat_feat_ploting(df, col):\n    tmp = pd.crosstab(df[col], df['Weekly_Sales_low_high'], normalize='index') * 100\n    tmp = tmp.reset_index()\n    tmp.rename(columns={0:'inline', 1:'Weekly_Sales Low High'}, inplace=True)\n\n    plt.figure(figsize=(14,10))\n    plt.suptitle(f'{col} Distributions', fontsize=22)\n\n    plt.subplot(221)\n    g = sns.countplot(x=col, data=df, order=tmp[col].values)\n\n    g.set_title(f\"{col} Distribution\", fontsize=19)\n    g.set_xlabel(f\"{col} Name\", fontsize=17)\n    g.set_ylabel(\"Count\", fontsize=17)\n    # g.set_ylim(0,500000)\n    total = df.shape[0] # arbitrary\n    for p in g.patches:\n        height = p.get_height()\n        g.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(height\/total*100),\n                ha=\"center\", fontsize=14) \n    plt.subplot(222)\n    g1 = sns.countplot(x=col, hue='Weekly_Sales_low_high', data=df, order=tmp[col].values)\n    plt.legend(title='Weekly_Sales Low High', loc='best', labels=['no', 'yes'])\n    gt = g1.twinx()\n    gt = sns.pointplot(x=col, y='Weekly_Sales Low High', data=tmp, color='black', order=tmp[col].values, legend=False)\n    gt.set_ylabel(\"% of Weekly_Sales_low_high\", fontsize=16)\n\n    g1.set_title(f\"{col} by Target(Weekly_Sales_low_high)\", fontsize=19)\n    g1.set_xlabel(f\"{col} Name\", fontsize=17)\n    g1.set_ylabel(\"Count\", fontsize=17)\n\n    plt.subplots_adjust(hspace = 0.4, top = 0.85)\n\n    plt.show()","bfd8e94d":"for col in ['Type']:\n    dataset[col] = dataset[col].fillna('NaN')\n    cat_feat_ploting(dataset, col)","b2f67d62":"def plot_target_dist(df):\n    total = len(df)\n    g = sns.countplot(x='Weekly_Sales_low_high', data=df, )\n    g.set_title(\"Weekly Sales  Distribution \\n# 0: Low | 1: High #\", fontsize=22)\n    g.set_ylabel('Count', fontsize=18)\n    for p in g.patches:\n        height = p.get_height()\n        g.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(height\/total*100),\n                ha=\"center\", fontsize=15) \n\ndef ts_target_lowhigh(df, roh):\n    plt.figure(figsize=(16,6))\n    df_features = df.sort_index()\n    df_low = df_features[df_features['Weekly_Sales'] < roh]['Weekly_Sales']\n    df_high = df_features[df_features['Weekly_Sales'] >= roh]['Weekly_Sales']\n    plt.plot(df_features['Weekly_Sales'].index, df_features['Weekly_Sales'].fillna(1), c='gray', alpha=0.4)\n    plt.scatter(df_low.index, df_low.values, label='LOW', s=10)\n    plt.scatter(df_high.index, df_high.values, label='HIGH', c='red', s=10)\n    plt.margins(x=0.01,y=0.2)\n    plt.title('Weekly_Sales')\n    plt.xlabel('Date')\n    plt.legend()\n    plt.show()\n","c7759f6b":"plot_target_dist(dataset)     \nts_target_lowhigh(dataset, 300000)  ","f2c058d0":"!pip install change_finder","32590059":"# coding: utf-8\nimport change_finder \n\ndef changeFinder(data, r, smooth):\n    #CHANGEFINDER PACKAGE\n    f, (ax1, ax2) = plt.subplots(2, 1, figsize=(13,8))\n    f.subplots_adjust(hspace=0.4)\n    ax1.plot(data)\n    ax1.set_title(\"data count\")\n    #Initiate changefinder function\n    cf = change_finder.ChangeFinder(r=r, k=2, T=smooth, R=2)\n    scores = [cf.update(p) for p in data]\n    ax2.plot(scores)\n    ax2.set_title(\"Anomaly Score for week\")\n    plt.show()\n    return scores","1c5e6e08":"datacf = dataset.Weekly_Sales.values\ndataplot1 = changeFinder(datacf, r=0.02, smooth=30)    ","37861212":"dataSF = np.array(dataplot1)\nfrom scipy import stats\ndescribedataSF = stats.describe(dataSF)\ndescribedataSF","5282bc11":"qt25 = np.percentile(dataSF, 25)  # Q1\nqt50 = np.percentile(dataSF, 50)  # Q2\nqt60 = np.percentile(dataSF, 60)  # Q31\nqt75 = np.percentile(dataSF, 75)  # Q3\nqt95 = np.percentile(dataSF, 95)\n\nqt75_ws = np.percentile(datacf, 75)\nqt95_ws = np.percentile(datacf, 95)","a9129171":"dfSF = pd.DataFrame(dataSF, columns=['Score_CF'])\ndfSF.head()","0146c0d9":"plt.figure(figsize=(16,6))\ndf_high_data_ = dfSF[dfSF <= qt75]\ndf_high_score_ = dfSF[dfSF > qt75]\nplt.plot(dfSF.index, dfSF.Score_CF.fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_high_data_.index, df_high_data_.values, label='LOW', s=10)\nplt.scatter(df_high_score_.index, df_high_score_.values, label='HIGH', c='red', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Anomaly Score ')\nplt.ylabel('Score')\nplt.xlabel('Data Count')\nplt.legend()\nplt.show()","79b4aa30":"plt.figure(figsize=(16,6))\ndf_features = dataset.sort_index()\ndf_high_data = df_features[df_features['Weekly_Sales'] < qt75_ws]['Weekly_Sales']\ndf_high_score = df_features[df_features['Weekly_Sales'] >= qt75_ws]['Weekly_Sales']\nplt.plot(df_features['Weekly_Sales'].index, df_features['Weekly_Sales'].fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_high_data.index, df_high_data.values, label='LOW', s=10)\nplt.scatter(df_high_score.index, df_high_score.values, label='HIGH', c='red', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Weekly Sales Time Series ')\nplt.xlabel('Date')\nplt.legend()\nplt.show()","99967948":"def plot_dist_col(column):\n    '''plot dist curves for train and test weather data for the given column name'''\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.distplot(dataset[column].dropna(), color='green', ax=ax).set_title(column, fontsize=16)\n    sns.distplot(dataset_test[column].dropna(), color='purple', ax=ax).set_title(column, fontsize=16)\n    plt.xlabel(column, fontsize=15)\n    plt.legend(['train', 'test'])\n    plt.show()","10be202b":"plot_dist_col('Temperature')","c2d36ae9":"plot_dist_col('CPI')","0c6ddbce":"plot_dist_col('Size')","c1623410":"plot_dist_col('Fuel_Price')","ed4971f4":"plot_dist_col('MarkDown1')","d39e260b":"plot_dist_col('MarkDown2')","9d393c6a":"plot_dist_col('MarkDown3')","559e69cf":"plot_dist_col('MarkDown4')","39fbe333":"plot_dist_col('MarkDown5')","a9a031c4":"for i in range(len(dataset[\"Dept\"].value_counts())):    \n    plt.figure(figsize=(20,5))\n    sns.lineplot(x=\"Month\", y=\"Weekly_Sales_low_high\", data=dataset[dataset[\"Dept\"]==dataset[\"Dept\"].value_counts().index[i]],hue=\"Year\").set_title(dataset[\"Dept\"].value_counts().index[i], fontsize=16)\n","7c6e4af3":"#fill in mean for floats\nfor c in dataset.columns:\n    if dataset[c].dtype=='float16' or  dataset[c].dtype=='float32' or  dataset[c].dtype=='float64':\n        dataset[c].fillna(dataset[c].mean())\n\n#fill in -999 for categoricals\ndataset = dataset.fillna(-999)\n# Label Encoding\nfor f in dataset.columns:\n    if dataset[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(dataset[f].values))\n        dataset[f] = lbl.transform(list(dataset[f].values))\n        \nprint('Labelling done.') ","b80e7d46":"#fill in mean for floats\nfor c in dataset_test.columns:\n    if dataset_test[c].dtype=='float16' or  dataset_test[c].dtype=='float32' or  dataset_test[c].dtype=='float64':\n        dataset_test[c].fillna(dataset_test[c].mean())\n\n#fill in -999 for categoricals\ndataset_test = dataset_test.fillna(-999)\n# Label Encoding\nfor f in dataset_test.columns:\n    if dataset_test[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(dataset_test[f].values))\n        dataset_test[f] = lbl.transform(list(dataset_test[f].values))\n        \nprint('Labelling done.') ","586afb9d":"dataset_ts = dataset.groupby(['Date','Store','Dept','CPI'])['Weekly_Sales'].sum().reset_index()\ndataset_ts.shape","f28594ae":"from statsmodels.tsa.seasonal import seasonal_decompose\nts=dataset_ts.groupby([\"Date\"])[\"Weekly_Sales\"].sum()\nts.astype('float')\nplt.figure(figsize=(16,8))\nplt.title('Weekly_Sales')\nplt.xlabel('Date')\nplt.ylabel('Weekly_Sales')\nplt.plot(ts);","18073803":"plt.figure(figsize=(16,6))\nplt.plot(ts.rolling(window=12,center=False).mean(),label='Rolling Mean');\nplt.plot(ts.rolling(window=12,center=False).std(),label='Rolling sd');\nplt.legend();","c1dca788":"import statsmodels.api as sm\nplt.rcParams[\"figure.figsize\"] = (15,9)\n# multiplicative\nres = sm.tsa.seasonal_decompose(ts.values,freq=12,model=\"multiplicative\")\nfig = res.plot()","a58527d0":"#Monthly growth\ngouped_monthly = dataset.groupby('Month')['Weekly_Sales'].mean().T\n# gouped_monthly\ngouped_monthly.plot(kind='bar',title='Total Average Sales by Month',figsize=(10,5))\nplt.legend(loc='best')\nplt.show()","c860910e":"dataset_store = dataset.groupby(['Date','Store','Dept','CPI'])['Weekly_Sales'].sum().reset_index()\nStore1 = dataset_store[dataset_store.Store.isin([1])]","57a109c6":"# TIME SERIES\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas.plotting import autocorrelation_plot\nimport scipy.stats as scs\n\nX = Store1\nsize = int(len(X) * 0.90)\n# limitCount = 100\ntrain, test = X[0:size], X[size:len(X)]\nhistory = [x for x in train.Weekly_Sales]","92ca8a84":"# !pip install pyramid-arima\n!pip install pmdarima","3052e619":"def stationary_test(df):\n    # https:\/\/towardsdatascience.com\/time-series-in-python-exponential-smoothing-and-arima-processes-2c67f2a52788\n    from statsmodels.tsa.stattools import adfuller\n    print(\" > Is the data stationary ?\")\n    dftest = adfuller(df, autolag='AIC')\n    print(\"Test statistic = {:.3f}\".format(dftest[0]))\n    print(\"P-value = {:.3f}\".format(dftest[1]))\n    print(\"Critical values :\")\n    for k, v in dftest[4].items():\n        print(\"\\t{}: {} - The data is {} stationary with {}% confidence\".format(k, v, \"not\" if v<dftest[0] else \"\", 100-int(k[:-1])))\n    print(\"\\n > Is the de-trended data stationary ?\")\n    dftest = adfuller(df.dropna(), autolag='AIC')\n    print(\"Test statistic = {:.3f}\".format(dftest[0]))\n    print(\"P-value = {:.3f}\".format(dftest[1]))\n    print(\"Critical values :\")\n    for k, v in dftest[4].items():\n        print(\"\\t{}: {} - The data is {} stationary with {}% confidence\".format(k, v, \"not\" if v<dftest[0] else \"\", 100-int(k[:-1])))\nstationary_test(Store1.Weekly_Sales)","c47615a3":"### Auto Arima 30 days OOS\n# building the model\nimport pmdarima as pm\nfrom pmdarima import auto_arima\nmodel_ar = auto_arima(train.Weekly_Sales, trace=True, error_action='ignore', suppress_warnings=True)\nmodel_ar.fit(train.Weekly_Sales)","bf80628c":"forecast = model_ar.predict(n_periods=test.shape[0])","2cc72d06":"fig= go.Figure(data=\n               [go.Scatter(x= test[\"Date\"],\n                           y= test[\"Weekly_Sales\"],\n                           name= \"original\", \n                           showlegend=True,\n                           marker=dict(color=\"blue\"))])\nfig.add_trace(\n    go.Scatter(x= test[\"Date\"],\n               y=forecast,\n               name= \"fitted values\",\n               showlegend= True, \n               marker=dict(color=\"red\")))\nfig.update_layout(\n    title=\"Fitted values\",\n    xaxis_title=\"Dates\",\n    yaxis_title=\"Sales\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=14,\n        color=\"#7f7f7f\"\n    ) )\nfig.show()","b461e089":"def wmae(dataset, real, predicted):\n    weights = dataset.IsHoliday.apply(lambda x: 5 if x else 1)\n    return np.round(np.sum(weights*abs(real-predicted))\/(np.sum(weights)), 2)","629c173b":"%%time\n# Validation\n\n# all about rmsle https:\/\/www.kaggle.com\/c\/ashrae-energy-prediction\/discussion\/113064\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\npred = []\nfor t in range(len(test)):\n    model_ar_t = ARIMA(history, order=(5,0,1))\n    model_fit = model_ar_t.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    pred.append(yhat)\n    obs = test['Weekly_Sales'].iloc[t]\n    history.append(obs)\n    print('pred=%f, exp=%f' % (yhat, obs))\n\nerror_msetrain = mean_squared_error(test.Weekly_Sales, pred)\nerror_rmsle_train = rmsle(pred,error_msetrain)\n\nprint('Mean Squared Error: %.3f' % error_msetrain)\nprint('RMSLE: %.3f' % error_rmsle_train)\n\nerror_msetest = mean_squared_error(test.Weekly_Sales.values, pred)\nerror_rmsle_test = rmsle(pred,error_msetest)\n\nprint('Test MSE: %.3f' % error_msetest)\nprint('RMSLE: %.3f' % error_rmsle_test)\n\ndef mean_absolute_percentage_error(y_true, y_pred):\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nerror_mape = mean_absolute_percentage_error(test.Weekly_Sales.values, np.array(pred))\nprint('Test MAPE: %.3f' % error_mape)","e329c353":"fig= go.Figure(data=\n               [go.Scatter(x= test[\"Date\"],\n                           y= test[\"Weekly_Sales\"],\n                           name= \"original\", \n                           showlegend=True,\n                           marker=dict(color=\"blue\"))])\nfig.add_trace(\n    go.Scatter(x= test[\"Date\"],\n               y=pred,\n               name= \"fitted values\",\n               showlegend= True, \n               marker=dict(color=\"red\")))\nfig.update_layout(\n    title=\"Fitted values\",\n    xaxis_title=\"Dates\",\n    yaxis_title=\"Sales\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=14,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","b4406be7":"forecastLimit=30 # 30 days oos\nmodel_arima_oos = ARIMA(history, order=(5,0,3))\nmodel_fit_oos = model_arima_oos.fit(disp=0)\noutput_oos = model_fit_oos.forecast(steps= forecastLimit)\npredictions_oos = list(output_oos[0])","790ff383":"fig= go.Figure(data=\n               [go.Scatter(x= test[\"Date\"],\n                           y= test[\"Weekly_Sales\"],\n                           name= \"original\", \n                           showlegend=True,\n                           marker=dict(color=\"blue\"))])\nfig.add_trace(\n    go.Scatter(x= test[\"Date\"],\n               y=predictions_oos,\n               name= \"fitted values\",\n               showlegend= True, \n               marker=dict(color=\"red\")))\nfig.update_layout(\n    title=\"Fitted values\",\n    xaxis_title=\"Dates\",\n    yaxis_title=\"Sales\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=14,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","b10c27c7":"split_date = '2012-06-01'\ndata_train = dataset.loc[dataset.Date <= split_date].copy()\ndata_test = dataset.loc[dataset.Date > split_date].copy()","5fe5e1e1":"X_train, y_train = data_train[['Store', 'Size', 'Dept', 'Month', 'Year', 'IsHoliday', 'Temperature', 'Fuel_Price', \n          'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5', 'CPI', 'Unemployment']], data_train['Weekly_Sales']\n\nX_test, y_test = data_test[['Store', 'Size', 'Dept', 'Month', 'Year', 'IsHoliday', 'Temperature', 'Fuel_Price', \n          'MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5', 'CPI', 'Unemployment']], data_test['Weekly_Sales']\n\nX_train.shape, y_train.shape, X_test.shape, y_test.shape\n","26216e36":"reg = xgb.XGBRegressor(n_estimators=500)\nreg.fit(X_train, y_train,\n        eval_set=[(X_train, y_train), (X_test, y_test)],\n        early_stopping_rounds=50,\n       verbose=False) # Change verbose to True if you want to see it train","8aa2756f":"from xgboost import plot_importance, plot_tree\n_ = plot_importance(reg, height=0.9)","5bd59977":"data_test['Weekly_Sales_pred'] = reg.predict(X_test)\ndataset_all = pd.concat([data_test, data_train], sort=True)","fce66bab":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n\nmean_squared_error(y_true=data_test['Weekly_Sales'],\n                   y_pred=data_test['Weekly_Sales_pred'])","d5e2e6a5":"mean_absolute_error(y_true=data_test['Weekly_Sales'],\n                   y_pred=data_test['Weekly_Sales_pred'])","5651d16a":"from statsmodels.tools.eval_measures import rmse\nimport datetime \nerror=rmse(data_test['Weekly_Sales'],\n                   data_test['Weekly_Sales_pred'])\nerror","5a337168":"holiday_week_teste = data_train.IsHoliday.apply(lambda x: True if x else False)\nwmae_xgb = wmae(data_test,data_test.Weekly_Sales, data_test.Weekly_Sales_pred)\nwmae_xgb","3b12cd4a":"plt.scatter(data_test['Weekly_Sales_pred'], data_test['Weekly_Sales'], alpha = 0.05)\nplt.xlabel(\"y predicted by XGB\")\nplt.ylabel(\"y true\")\nplt.title(\"y pred vs y true (XGB)\")\nplt.show()","f7a91a72":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(n_estimators=80, max_depth=35)\nrf_reg.fit(X_train, y_train)","3a54a072":"data_test['Weekly_Sales_pred_rf_ref'] = rf_reg.predict(X_test)\ndataset_all = pd.concat([data_test, data_train], sort=True)\n\nmean_absolute_error(y_true=data_test['Weekly_Sales'],\n                   y_pred=data_test['Weekly_Sales_pred_rf_ref'])","f480a531":"error_=rmse(data_test['Weekly_Sales'],\n                   data_test['Weekly_Sales_pred_rf_ref'])\nerror_","f1f2545c":"wmae_rfreg = wmae(data_test,data_test.Weekly_Sales, data_test.Weekly_Sales_pred_rf_ref)\nwmae_rfreg","3a6845ce":"plt.scatter(data_test['Weekly_Sales_pred_rf_ref'], data_test['Weekly_Sales'], alpha = 0.05)\nplt.xlabel(\"y predicted by Random Forest\")\nplt.ylabel(\"y true\")\nplt.title(\"y pred vs y true (Random Forest)\")\nplt.show()","021c4f90":"predicted_test = rf_reg.predict(dataset_test[['Store','Size','Dept','Month','Year','IsHoliday','Temperature','Fuel_Price','MarkDown1','MarkDown2','MarkDown3','MarkDown4','MarkDown5','CPI','Unemployment']])\n\ndataset_test['weeklySales'] = predicted_test\ndataset_test['id'] = dataset_test['Store'].astype(str) + '_' +  dataset_test['Dept'].astype(str) + '_' +  dataset_test['Date'].astype(str)\ndataset_test = dataset_test[['id', 'weeklySales']]\ndataset_test = dataset_test.rename(columns={'id': 'Id', 'weeklySales': 'Weekly_Sales'})\ndataset_test.head()","1af295a1":"dataset_test.to_csv('submission_baseline.csv', index=False)","badf360f":"### plot distribution curves for train and test data","75f3402d":"In this implementation, if any columns have greater than 85% missing values, they will be removed.\n\nguidelines:[LightGBM Advanced Topics](https:\/\/github.com\/Microsoft\/LightGBM\/blob\/master\/docs\/Advanced-Topics.rst)","ec8f12d0":"The Fuel Price for train, test have diferrent distribuctions.","ff7db5c6":"# Baseline Model","7b3532ad":"Select columns with correlations above threshold","b3a22163":"# Label Encoding","3c5b7b41":"Simple decomposition of time series.","42a76170":"Final general, some final days a month have hig week sales value","4f4c0f48":"The type 2 have more extreme values,as well as Dept 70, Temperature 50-60.","09f61d1a":"Just Dept. 7 and  72 have extreme Week Sales for November, December, in the years 2009, 2010,2011, 2012.","10f8d334":"Collinear variables are those which are highly correlated with one another. These can decrease the model's availablility to learn, decrease model interpretability, and decrease generalization performance on the test set.\n\nguidelines:[Drop Highly Correlated Features](https:\/\/chrisalbon.com\/machine_learning\/feature_selection\/drop_highly_correlated_features\/)","e2024da3":"# Visualizations","ead288da":"### Ploting columns with few unique values","a9288bf3":"### Remove Collinear Variables","43b5a075":"### Identifying Week Sales Peaks with Change Finger","4d52b4fa":"Number of unique classes in each object column","18252cbf":"Find the optimal feature subset using an evaluation measure. The choice of evaluation metric distinguish the three main strategies of feature selection algorithms: the wrapper strategy, the filter strategy, and the embedded strategy\n\nFilter methods:\n\n- information gain\n- chi-square test\n- correlation coefficient\n- variance threshold\n\nWrapper methods:\n\n- recursive feature elimination\n- sequential feature selection algorithms\n\nEmbedded methods:\n\n- L1 (LASSO) regularization\n- decision tree\n\nIn our case, we remove some useless, redundant variables. We will use three methods for feature selection: Remove collinear features, remove features with greater than a threshold percentage of missing values, keep only the most relevant features using feature importances from a model","7c8d128b":"Sales by months - all Store","71e25870":"dataset columns values","0e95edcc":"Heatmap. The missingno correlation heatmap measures nullity correlation: how strongly the presence or absence of one variable affects the presence of another:","326a2830":"The day of the week with Monday=0, Sunday=6.","9058fed1":"# Simple Single Series Analysis by Store","7113fb7c":"So, we'll define the extreme values for week sales>=4000000 and see some distributions, peaks in time series.\n","95bef0e1":"We'll merge data: features and stores have a commom key 'Stores' we can create a new data using the keys 'Store', 'Dept' and 'IsHoliday'. The data will be loaded into 'dataset, dataset_test'.","cc96a834":"# Feature Selection through Feature Importances\n\n> We want to see mos important features","b51628a3":"Work in progress","2394d554":"### Stationary TS","6cba2ea4":"### Forecast on Test Set Random Forest Regressor","5c5455b9":"# Correlations","20a35a27":"# Modeling","4eb3ed19":"# Imports","d06435b1":"Handling missing values\n> Package called missingno (https:\/\/github.com\/ResidentMario\/missingno) !pip install quilt","767e3026":"### Plot peaks sales for each Dept.\n> Remember Weekly_Sales_low_high have sales values > 30000.","db13e982":"Let's look to the top 15 most correlated features, besides the same feature pairs.","5539d7e5":"# Outlier Analysis","bcb9d369":"# End notebook","bbe52d56":"### Forecast Arima","3df35db2":"# Glimpse of Data","86ed8c6c":"Applying this on the entire dataset results in 64 collinear features removed.","c576cae3":"Time series forecast for store, STORE 1 example","022f2f3a":"# Auto Arima for Time Series Forecast\n","77e0f9bd":"We see some a","df3dc22e":"### Remove Missing Values","cd6c5426":"Nullity Matrix. The msno.matrix nullity matrix is a data-dense display which lets you quickly visually analyse data completion.\n","14d5a760":"# Exploratory Data Analysis\n\nExploratory Data Analysis (EDA) is an open-ended process where we calculate statistics and make figures to find trends, anomalies, patterns, or relationships within the data.","032e02f3":"### Column Types\n\nLet's look at the number of columns of each data type. int64 and float64 are numeric variables (which can be either [discrete or continuous](https:\/\/stats.stackexchange.com\/questions\/206\/what-is-the-difference-between-discrete-data-and-continuous-data)). object columns contain strings and are [categorical features](https:\/\/stats.stackexchange.com\/questions\/206\/what-is-the-difference-between-discrete-data-and-continuous-data).","11cfbe96":"Now that we have dealt with the categorical variables and the outliers, let's continue with the EDA. One way to try and understand the data is by looking for correlations between the features and the target. We can calculate the Pearson correlation coefficient between every variable and the target using the .corr dataframe method.\n\nThe correlation coefficient is not the greatest method to represent \"relevance\" of a feature, but it does give us an idea of possible relationships within the data. Some [general interpretations of the absolute value of the correlation coefficent are](http:\/\/www.statstutor.ac.uk\/resources\/uploaded\/pearsons.pdf):\n\n- .00-.19 \u201cvery weak\u201d\n- .20-.39 \u201cweak\u201d\n- .40-.59 \u201cmoderate\u201d\n- .60-.79 \u201cstrong\u201d\n- .80-1.0 \u201cvery strong\u201d","3f05415e":"# Feature Selection","269cdfc8":"### XGBoost Model","ccb92cf3":"Pre-Processing","e100ac37":"We calculate now the correlations between the features in dataset. The following table shows the first 15 the least correlated features.","53744081":"### Examine Missing Values\nNext we can look at the number and percentage of missing values in each column","ed0a9123":"The evaluation is based on Weighted Mean Absolute Error (WMAE), with a weight of 5 for Holiday Weeks and 1 otherwise\n\n\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAiwAAACkCAYAAAC0C3V1AAAAAXNSR0IArs4c6QAAAHhlWElmTU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAAABAAIAAIdpAAQAAAABAAAATgAAAAAAAACQAAAAAQAAAJAAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAAiygAwAEAAAAAQAAAKQAAAAAqqHP0gAAAAlwSFlzAAAWJQAAFiUBSVIk8AAALBNJREFUeAHtnQm4VVUVxzcqCmZoiIpoaEZkhhOlppglKJZD2KggKWKRE1IKiH4U5IgEhTOkqRWDJlEqmSIO5JSlIIIolkIDQ4AaVpQaEb+T+7bvefvcd8+959y3733\/9X3v3TPus8\/v3LvP2muvtXabTZvFSERABERABERABEQgYAJbBFw3VU0EREAEREAEREAEIgJSWPRFEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ6AFJbgH5EqKAIiIAIiIAIiIIVF3wEREAEREAEREIHgCUhhCf4RqYIiIAIiIAIiIAJSWPQdEAEREAEREAERCJ7AVsHXUBUUAREQgQwILF261LzyyiuFv2HDhpmuXbuaOXPmmAcffNC8+eabZsiQIWafffbJ4GoqQgREIGsCUliyJqryREAEgiOwadOmSDF5+umnzWuvvWY6dOhgunTpYiZOnGiWLFliXn\/9dfP222+bWbNmSWEJ7umpQiLwPwIaEtI3QQREoOEJtGnTxgwdOtT06tUruteDDjrI3HbbbZFV5cYbbzR9+\/aNtrdv377hWegGRaBeCUhhqdcnp3qLgAikJrBo0aLoHKwpL774ohkxYoTZeuutzerVq6Pte+21V+oydYIIiEBtCEhhqQ1nXUUEWpTAxo0bzdy5c80ll1zSovVoyYszFLR8+fKoCiguI0eONG3btjWweeGFF6LtBx54YEtWUdcWAREoQUA+LCXgaJcI1DuB\/\/znP2bevHlmxowZZtWqVWarrVrvT37BggWFxzlw4ECz8847R+svvfSS2bBhg+nYsaPZc889C8doQQREICwCrbf1Cus5qDYikCkBnEwfffRRM336dLNixYpMy67XwqzCglJy9NFHF27Dbj\/ggAMK27QgAiIQHgEpLOE9E9VIBKoisG7dOjNmzBizdu3aKBKmqsIa5GQUuGeffTa6mxNOOMHghGvFKiw9e\/Y0WKT4a82WKMtFnyIQGgH5sIT2RFQfEaiSwPbbb29OPfVUM3XqVDNp0iTDi7i1y7Jly8z69esjReSwww4r4PjXv\/5lfve730UKDBaWKVOmmIceeqiwXwsiIALhEJDCEs6zUE1EIBMCOJIecsghUfQLBb73ve\/NpNx6LmT+\/PlR9Xv06GG22267wq3ghIvT7TbbbGPuuOMOs3LlyqLhosKBWhABEWhxAlJYWvwRqAIikC+BLbfcMt8L1EHpixcvjmp58MEHF9W2c+fOUaQQlhaUl4suuqhouKjoYK2IgAi0KAH5sLQofl1cBESgFgTGjh3rvcwOO+xgbrrppihKSJYoLyJtFIFgCEhhCeZRqCIiIAItQWDHHXc0\/ElEQATCJqAhobCfj2onAiIgAiIgAiKwmYAUFn0NREAEREAEREAEgicghSX4R6QKioAIiIAIiIAIyIdF3wEREIG6I\/Dcc8+ZNWvWBFHvdu3amcMPPzyIuqgSItDIBKSwNPLT1b2JQIMSeOONN8zVV18dxN3ttNNOUliCeBKqRKMT0JBQoz9h3Z8INCABLBrHHHNMA96ZbkkERCCJgBSWJDLaLgIiEDSBr371q8riG\/QTUuVEIFsCGhLKlqdKEwERqBEB0umPHDnSXHDBBeatt95KvOpHPvIR069fv8T9vh12EkQy4DL8xHxDTz\/9dDQfke94bRMBEcifgBSW\/BnrCiIgAjkR2HPPPc3gwYPN5MmTE6+wcOHCaDLIvfbaK\/GYcnb8+9\/\/Nrfccou55557yjlcx4iACGRMQENCGQNVcSIgArUlcNxxx0WTPSZdFUVj\/PjxBmtJNbLVVluZIUOGmNNPP72aYnSuCIhAhQSksFQITqeJgAiEQ2DYsGGmU6dOiRVasWJFSStM4omeHZ\/97GfNhz\/8Yc8ebRIBEciTgBSWPOmqbBEQgZoQePe73x35smyxRXKT9uCDD5p58+ZVXZ82bdqYM888s+pyVIAIiEA6Asm\/7nTl6GgREIFACVQ7FBLobTWpVo8ePcyXvvSlJtvdDTfccINZvXq1u6miZXxnNLtzReh0kghUTEAKS8XodKII1AcBIlys4M+xfv16u9pwn\/379zf77LNP4n1t2LDBfOc73zFwqFaU3bZagjofAkSkXX\/99eaKK66I\/pYvXy4wCQSksCSA0WYRqGcCb7\/9tqHhu+aaa6KQXPde2Ma+LF7abrkhLDMkNHz4cLPddtslVuell14yU6dOTdxf7o6DDjqo3EPr5rg\/\/elPhmkPXnzxxbqpc71XdNq0aea+++4zTz75ZPQ3bty4RAfx1v586iqsedOmTeb5558v+f1s27at+eAHPxgdw4+uuUZ52223Nb5wx2XLlpl\/\/OMf3mt17Ngxyvvw97\/\/3bufaIK9997bu6+cjX\/961\/Nn\/\/858RDMUeXapB9J954442mW7du5uijj\/btTtz2yiuvGHqlWQh1pu6S\/AkQyZJkSfnNb35j+EMuvPDChksrT6r8oUOHmiuvvDIR9KxZs8wBBxwQ\/SUe1MyOrl27GvxZGknuvPNO8\/DDD0e39P3vf9\/suuuujXR7wd3Ls88+a2DuCg7iWFzILxSX1v586kph2bhxo7n00ksTX6A0Hu95z3vMVVddZTp37mx4Sf\/xj38sqbS8613vMj\/60Y\/M1ltvXfTd+MlPfmJ+\/etfe88lEdX2229vHnnkkcicV3TiOyvMc+JThHzHxreR68E2GvF9vPRHjx6dKkph6dKl5t577zU77LCD+eQnP2lQ6soVeqIkzEJZrFb2228\/c\/nll1dbjM4vg0AWFoQyLhPsIYcddpj59Kc\/bX75y19668j3+bvf\/a659tpro9+y96BmNpK4jukBGk1psbdNeyvJj8Drr79uJk6cGLWtdHJPOumkyCmczirvFtrLUh3M1vh86kph4aHecccdkdmMxibuTIip2+3BozT87W9\/ixomXrquEJZ4\/vnnG3pjvgaHnuebb74ZjXc\/9dRT0amUfd5555kPfOAD0TrLaMiTJk0yWEVcoQeHaTqtvPbaa+bRRx9tchrKz6hRoyrq8fziF7+IyqOOv\/rVr0yfPn2alJ+04Vvf+pZheGH27NlR0iz3OBQgXgzt27d3N0dKHlYZeviYl+1zohyJCNSKwFe+8hWzZMkS84c\/\/MF7SV4Y3\/ve98yYMWO8bYD3pNjGc845J7ZFqyLQPAEUZpQV2mQi3C6++GKD0\/gJJ5xgGBLivUIyRN417jut+ZIb+4i69GE59NBDzYABA5o8GV6gceHLgGLC0I8rH\/3oR83OO+9csqGiB3XIIYdEp6HUkAbcKits3HLLLQ3WFr5kcXnsscfMmjVr4pubXUe58A1jEf1QiXkWpcFVgO6+++5m6xA\/AIsMuSfiPxy0\/7POOssMGjSo6I8XBcrcN7\/5zchXAKsOIoUlwqB\/NSKA1ZTfbNx66l7+mWeeMT\/\/+c\/dTVoWgdwJYMEnA3OXLl2iTjHKCoLFf+zYsZF1kOkmGC2wHb7cK1UHF6hLhQWuKAkMy7gyf\/58d7WwjNIStyo88cQThf2lFl5++eVo9\/77758YxsiXLi6Y69I2hHxBcb7yCUNclcj9999fpADhk7J48eJKijK77LJL0Xlx\/kU731lB6cOfoEOHDlJYfIC0LVcC+JkwSWIpYUjYjaQqdaz2iUC1BP75z3+aRYsWmY9\/\/ONmwoQJZrfddisqko7w2WefHWVVxsWBYyX\/I1C3CgvDQ7179y56jnPnzi1ad1cYz3aFBirJVOwe98ILL0SrRx11lLu5aDk+JGJ3PvDAA9GQlF1v7hO\/FSZaQ8uOD1MlXaNUmShNvjH8u+66q9RpifvatWuXuK\/UDnq4jMf6LEelztM+EciCwKc+9alo6DKpLL6XhDrzIpGIQN4EaMsvu+yyyPpHZzpJ6JQT6tyI0WhJ99zc9rpVWLixuEMSloOkpFAkeerevXsRD6wPpWTlypUGiwRfMIahmhM0ZTfTJqY8nF3LEcY0rSKBI18lCkr8OvjerFu3LnK2xdJhhe1JnOwxWX+ecsop0Q8063JVngiUQwArH\/5qSbJq1arIST9pv7aLgAi0PIG6VlhQQt7\/\/vcXKPLSL2VlwQTnCp7YpaalJ5U3QoKoUuPgtkyGbXBCdYWZXUtdwx6LkxUx9pgDfT4x9rg0nzjKIvi\/HHnkkYVT4WT3FTbmtEBoOM6Nu+++e8VRUzlVTcW2IgJE1+EE73Yo4rePhTMpOi9+rNZFQARqT6CuFRZwuS9i1lEyeCH7BGuDK0QQkazHJ5RhG6\/40JPveLvtc5\/7nF2MPnF6tYpP0Y7YirWu9OrVq+QkbrHTElcZ7mLsk2Ec6s+Mtq4wXFULEzgh2pg1JSLQ0gTIgEsm3FJC6n6sLbUUhqRIPYBFt5QQtZiUn4mOAZ2epNw7pcqtZB91poOF32BSeC2RgtSJdraRRSxq93TrKqzZh+UTn\/hEFG5LemMEpWTBggWmZ8+eRYfzo8KiEheGhSgjLrzs165dG0USpZmZlSgi\/DUI57Xys5\/9zDCOHvdLsfvtD591onGyEBvKTIQOPjH84YluHW5pTLBGZWXN8dUZpY9Ef6XGaX3naZsI5EWAXBdEZ9jfQfw6DOOOHz8+8mnBTy4vwemfPE8kqEQJ4aVH20G6hiQhYgSlJZ7LiI4HjsUoBvzWcOT0BQIklVvu9scff9xQb+qMcmUVFSIFjz322KJisCoPGTIkUqCwbvmcS4tOqLMVsWiZB5bfL7JG90Mo84EHHmgIT7SC9SCusNAT8PU+aLjoUcVDhq1VBOtEkqJhrxf\/xMriKiyUjyUnPlxkzyPUmJc7CgXZaKsVelvWOuRaVo4\/\/viihprhKralvb9y6ocCSS4asjZWk\/U3fi3KQ8HLWsh6WqlTcdZ1UXn5EeC7TgZRwu6Tev6\/\/\/3vzQ9\/+ENzxhln5FaRHXfcMYq6W778\/1MkoAigBDAsHBdSE\/z2t781RD3FBSXG3gufKBVf+MIX4odVvY4CR73pFNoOIoUS2RhXWDjGtrdkBCfNA8pio4hYtMyTrHuFBWwMC7kKC06ltrdhsT700EPRIhYHHE7tXBkoCnPmzDGnnXaaPTSKe7dhz\/Ehp8JBJRbIzULOEhojKz\/96U+9Cgv1tHU78cQT7eFVfaJs0VPEMkQ9rHzsYx+LGpxXX3012oQiRYp2m2vGHlfuJ9exHO05NGQ0UPTA4kNw9phqPunZ\/PjHP66mCO+5SkPuxdKQGzt16mSGDRsWRWok3SBDtCix\/JbzEKYP4Y\/AAasYYWXhdxOfBZoOCN9PBH+wuNBpw1JKBwTxKTzxcypZp52wbQVWY4Z7ERQt2jq3rcHCQ2fPtm15dIoquYeszhGLrEimK6fufVi4XV7EblQNCcrc4R9+8HbuFBSQvn37FlHixWvNm+zgpcgLnwalUtNq3JeFCdd8ZmjCjjGfYuE5+OCDi+pVyQoKmB0Ocq0rlEVDFg\/vriSRnK0XDRU9J\/cPRQ\/rUh7Kir2uPkWgWgK8cLAuJgm\/o6ScSEnnVLKd5JVufiOf9fDWW28tZNKmM+C2VfaaDAnZqUDSDGHb89N+oiCh+Flxk1Pabd\/4xjcKlpc99tjDbm64T7Go3SNtCAsLIbsMt9hhHPC5\/hm8UFEKmLSQXhPL9FhQShB6LSg0NnTZlmMztEYHpfxHRBIJqdwXN0MkNqMhxdGjsspFv379MhmaYeiLXhoJh+z9uFUnZPr2228v5ERBuYj3jtzjSy3DJ24KpqFHQcR6QyQSn1lKXjkJ5GeT5VOqj7KYIJJOBN\/\/uOB30VzCufg5la6jaPzlL3+JTreftix8wLAAW+H3xVALbZkr1oKBAuRGTrrHZLnMkAi+f1iOEdrPL3\/5y00uwRASmbJroUQ1uXiNNohFjUBvvkxDKCzgwnJiFQ3WyZ\/CH42BNUseccQRUVgjvgooFPi6WKFR4AVPOn0aMawR8TBoe2w5n3yJUUJ+8IMfFA5nPiMmY7Tj0ChSzB1E4xjPxFs4KeWCVYBQTKhDXDAfE6btWqCwsjCmn1bwt\/nQhz6UeBoWo6znWnnf+95n+JOIQLUESFXAcAxTSLjCy5\/pPHj510Jc\/zlXYaFDc91110U+YAy1EkmEMP9MXGFhaJb27utf\/3puQ0JxFkQ0WoUFpY8ghXiuGxQZOhm0cXnIzTffnBg5Vcn1sNYTIJFWQmCRts71eHzTN1o93sXmOhOZgzZv\/TO4DRQSlAYmQENcfxTGjl2FBR8YrCEoN\/RiSMVfTur5qOCEf9aagcUBoVysLDQqiA1l5geShcMnvjl2kkeb1yW6UOwfToWuzJs3L\/LhqfZ+3TJZJi8NPatahE\/Hr90S6zTYTKYnKY8Aw7hxZaG8M7M5iqGVGTNmNCkMh9W8LHlNLrZ5gzsk5LZfd955Z+S0TuQQk75aifux0K4wbESuI7eNs8fzOXbs2KizRFm+OdfcY8tdpsOCJdfWh+hMd7gdBQoliwlUfYI1mPowNHfyySf7Dml2G5O52us3e3AZB8TT5JdxSnRItSzKvU5rP65hFBZ6RZgoUQis8CK2igAOYXaMl\/1YBviB27wG\/OhRYGx0TTXWFXt9GmR8RmbOnGk3RdOHYzqlJ4XigBUkq9BisupyH0jcGbZQAc8CQ2T40lTaaHiKLGzCmoNVqTUI0Rqa96P8J51Xr7vcGjBkazsz9hw6PgMHDrSrNfl0FQj78qVdQmFBAbAvQ1uZ+MzwWEiZQoR0777EeBxvgxIISKAjlYXQ5hKhaS3YsHQVFpQs2l0mmvUJYd0Mb+XV9viu2dw2hq8qkWpZVHLN1nhOwygsPDx8KlyFhQgcqyz4eh5YWeiZWJk+fXq0iBLh8\/+wx6X5RBlhEkTMuwifWFas6RfFKG7eTVO+PZaXpbUYkYbcDjvZ\/fFPeiY2qoB9NBr0LH3DSPFz06y7DVia85KOJX8Mf1kKjVQW1iXM4UqSV\/6TySuapZwaMFRBpIsr\/A5HjBjhfem7x2W9zMSgVlBY6HRcf\/31UXZt6xeCJcOKVWpYZyiGEGysFChbPkEhImIHC3LWUU+uwoK\/jRXmasMB\/8ILL0z0zaO9xgJTzXA4nGwnzV67mk83eCNtOdWwyMLalLa+9Xh8Qyks+Dbwoo736K31Jf6A+MHwY3dzCnAMXzwSrWUhNIIoS1aZoEy3ocwqlBlrEhEERDWhiHHPpYRxc6IgiKhC8KXB09+n2JUqJ+0+lCSeEUNulQiOvFmHNdMrJUSTIcVqBOfvfffdt5oidG4NCOCnxtCd+6JDeRo5cmRmwyVpbsNVlulk0VbgR4fTr93nKizWwmKT3OFrM2jQoJKXJGInD3GVJIakbTqJ2267LQrPxrcjScg8fPXVVyftLmt7SM7y1bAI0dpU1gOo8UFb1Ph6uV8OJSQuvBx9LyOUCZSTuKQdDrJhhtaKEi+P7LU+BYIvuDtMFT8vzbq1lpTKqOuWR0MYz\/BbTYizW3bSMhFJRGfRmwhJUFgZFpM0PgF+o2SMRbl35dRTT22xSBbXwoK\/F46kdDzcCDxXYbEWlmuuuSaKwsNBuJy5ztz7zWqZNtR1GsZvxaY2IArL1+5lde3QyqmGBe8t3gWf\/\/znQ7utoOrTUBYWyPISpgfu9p5KWQ0wR9rxXc5nSMQmR2K9HLFOpUlDFSSCImKG8WNXSllX4sqPez9uGSzb0GSGNtKYVxmucieLxKcGs25SCGKpOsTrFF\/nXHpdiE9JjHaU8Y+QzayG69zLWV8nd5uWG48AljRyIrlCZEg8b5K7P+\/luC8P7QkWEXd41vVzwcLCsDIW0TPPPLPJLPS2vgwXMTRDbheWSanARKhZC+Xa9AX40mAhIn2Ez3EZiy7DcVhjmO+MvyuvvNJsu+22WVerRcpLw8KtYBbWJre8Rl1uOIUF8ygP346n8iJKSonPQ0U5YfjHRvLwMk3747EpqK2p1vdloUF0FRa80ZOc0VBW4j3+eI\/QvYb1vWE6Are35h7jW0ajxymOxswKYYpJCotVzOyxdjjJrid9cj8TJ06MGk96gjyfSoUx+KzH4Suti86rLwIkhLSWSFtzrAM2as9uq\/Unw1H8Luxvnt9fXCl3LSx0UGjf6IjFk0O6dX\/jjTciHxHmS0Oy9iez12LqDTvkPW3atMgHKCkyCGsmQ3IMR6O00JlL297a64b4mYZFiPUPvU4NNyQEcHdYiB9+qd4zDQWRLFZKjbnaY+KfjD8ihLViEvUJL2l3Tp1SieKssuWWE49msPtohO3xhBGnlbjywHwlhCfGhYbGVWzYj2XKNrLx41m34\/GjRo2KsuGyjca4pczXXF\/SOglgAWAIxRW+h3w3s\/JXc8tOu+w6ew4ePLjJ6a6FhZ1kjj333HObHOduYMjZWlwZmqnUb8wt07fMpI2ufOYzn4nq526zy\/h5MURu26r4nG\/2uHr9TMOCDh\/tN51EwruZLiLJSl+vPLKud8NZWACE0jFlypQoIqfUcJCFyY+aXkia4SB6CTj3MqTihrJeeumlhvFwLBf8uWO4WFmIIsFRzDYktg5YITCPovBYi4ndxyf5IviC0wjhXIxVhwkVcRq28sjm2ahRirp3795s0iuUK+4BBSUu48aNi0I7MZUjhFjSI+IcV3AM7N+\/fxQeTkNET5E6Yg3iD4XF59DsltHIy\/C96KKLmjDI457ppWLFKqWc53HdeigTpZrvdPxl8LWvfS0zH7JqOfD7QWi7+P3GBeXKWoIZQuJ7VY7ijzUG4UWal4MqyhNtJ20Yvjc2sil+D3adNoKhI6Sa4WFbXkifaVg0urUpj+fSkAoLP0yGDRi\/LadXQU4WTMP8xceTk6Bfe+21huRscSF0EG0ZIQW+23tDAWAoiEYp3tigDJQyTTMcY6NjUIpQTtzMvlwPJQaHQu7DTpbGdp8Q+myHweL7adg5H6sOiofvPu05vAySrEr2GPez0Roo997iywxP4lNFPo1aCKHtUliakua7HP+O0mHIa4ikaQ2a30I7gdLis67Ys3Hq5BmjrFgLhd2X9Gl\/u3laMoiy43tHe4KVIN62xeuGssJ94HPnTlUSP64e19OwsNYmghAYHsvzGdUjS1+dG1Jh4UZJ\/sQYri+Rkg8EP7Q0jT1KQ1rB2jJ58mTvaSgZ8fF174HvbMSprZSCU+pc9qFMSfInMGDAgEjhQ3n2SdzU7zuGbTgt+yxWScdr+\/8IkAjS+nBYJlg+zz77bLua2SeKPukBiMBLa80gmRt5fEpNB8AxWDDc8NlSlSfs2SaQzLOjQC4VOjY48ceHmH31s0POHGstS77j6nFbWhaNbG3K4\/k1rMJCo5RGkhxN05ShY0UgTgBTOcnImKvJTrbpHkOUR7l+U4TPk7qdyS2x2lhzv1uelv9PgOiYG2644f8bNi8xdFbucErRiWWsMGxLksghQ4akzl5dynnWXhq\/tzTCUDXDNNwzM8\/nIVhK8A1iKOS0004r6xLW6pOnElVWRTI+qBIWjWxtyhhvVFxDOt3mAUplikClBLCeoZj4hKFFm\/XYt9\/dho8QPXCsa5dffnnmE0u616r3ZZRDwmXjSiKWVKwUeQg+ZQgv7xBk4cKFUTVIZsh3p5q0BEn3Q6ZZ8sKMHj26LGsJw0Yvv\/xyVBwKSx51Sqpr3tvTsqA+jWxtyoO3FJY8qKpMEYgRwGfCl5CQBnz8+PFRTzh2SrOrJAlUiLcfE5YVLCyuYKEoleLAPTbtMj4yVvFMa91Ne61yj7eRhfhGYNXAKTtLIbqFKT6ItCrXpwaLAkoKw2ZkvCb8Of6csqxjrcqqhAV1a1RrU17cpbDkRVblikCMwDnnnBP5KcQ2R4nM3Giv+P5S66WcNEud18j75syZU5jE1N4njvWDmklfb4+t5JMkbgj5UtLkQqrkWuWew9Ahwicp8E855ZRyT21yHEkfmWuMuYGIDmRiQ76zRFqV61Nj68InCsuECRMiaxe5WOpJsmLRyNamvJ6nFJa8yKpcEYgRIBLkggsu8DqCk7nUF2IeK6LJKr1U37QTTQ5sJRuWLVsWpTRwb5eXIy9aN3Osu7\/aZdIR8PyQUKwr1MUOfTFUReZchiYrEYbVmP8MHw2sNvgA4bTPlADMRp9GbB1WrFgRBTkwX1I9SZYsGtXalOfzbFin2zyhqWwRqJQAzt2kR49HaWEmZ0I+HBg7deqUqniiLWwPP9WJDXYwof\/kW3GTGRKZN3z48NyUOpxaSWNAtAcSksJCzieGW7p161aUD6rUY0cBZvoLxIYnEz2JooGSgeBHRVoEfKnSCun68fVAieSv3iRLFtYClsba5Hs+9cawmvq22dxQbqqmAJ0rAiKQjgDRPoz725BT92wUGl405Ybjcy7j4MzPQsIuN2OqW25rWCYH0WOPPVZ0qwyDnHzyyUXbslohhJk0BdbZlnKxZPTu3TurSwRTDiH1OIiSpwpnWTchZjCVrFFFsmKBRfWSSy6JHKLJzk7m4rysgDVCk\/tlpLDkjlgXEIGmBEgUlZSKGwtMc9lCm5bYurfMnj27yVAQDsljxozJ9OWKRQXnWhREwpjj82vhK5LVDOyt+4m2jrsnW3q9Wpta4glJYWkJ6rqmCGwmQFIzmxXZBULvlZ5XJSZ3t5zmlnn5EmJKkjPr7+A7B98FMjHvvvvuTXbjOEhSPKaLaCkTP9cfOXJkk0grskpn6QDL5KYoK\/HpJiwUrGIzZ86MMrjabfoUARHIjoAUluxYqiQRSE2AUFOmWYgLGXDJ0VJuJtz4+UnrTzzxhGGyTpxTmSMKpYV5ZnyKky0D5QmlhdwvrmBdOOOMM6IMvCg9NurDPSbvZTKsYqli3qaWFqJd4onqWrpOur4INBIBRQk10tPUvdQdgbPOOsvssssuTepNbx5lJmsXMyKKuB5WHJQVBOUFvxqf4MzLWDv1iQtKDOP5CJ8oQ7UU2EyaNCkIZYX7DsnhtpbPQdcSgVoRkMJSK9K6jgh4CJA2PSnUGWfarCdOJEU7jqhkJrWC4mIjFuw2PhnusZNoks00Llh\/mD\/GCtlUaymkwX\/qqadqecmS15LCUhKPdopA1QSksFSNUAWIQHUESGrWv39\/byHTpk0zzz\/\/vHdfNRsJTXUtO75so7feemvBssLQi88KQx4N62Ray\/m4yGFRabK9ariVOlcKSyk62icC1ROQwlI9Q5UgAlUTIDLIN9MtDp74hmQ9NESFraLBsk0rzzKCkkTGWCtcf\/369Xa18GnDW1GAbP6Ows6cFpiFnekMfApUTpcsq1gpLGVh0kEiUDEBKSwVo9OJIpAdASJMGBoiG25c8sp7YbOOcj1XYWGI6LrrrjN777130Sy\/Pj8Wcskwj86AAQOifBLxuuexjoPwunXr8ii64jIZ2ttpp50qPl8nioAINE9AmW6bZ6QjRKAmBLBSDBw4sCifCFaQpJmeq62UOyT06quvForDb4aspigGzBljJe7HgtWFYSPCnY888kh7WJPPsWPHGvJNUF4WUU8nnXRSlC24yYVacMM222yTab6XFrwVXVoEgiUghSXYR6OKtTYCKACuEynWFuZtsSnSs+bhKg9WGSHUGYWlb9++UUp3JvOzErew3H333QZfkssuuywxMy\/nPPPMM1ER3Nsxxxxji6v4E58fiQiIQOsjIIWl9T1z3XGgBKZPn16Ybh7fEIaIOnfunFtt3aRqKCwoTMzzgoJkM+26CotVaqjQ8uXLI6fX448\/vuRsvShFpKpnCIfMsxIREAERqJSAFJZKyek8EciQAFYId\/jli1\/8omGiuDzFzUxLHpUHHnjALF682BD5Y\/e5Cou1sDBjLU6vDGENGjSo2Soyv45EBERABKolIKfbagnqfBGokgBZWt0kcfvvv3\/ky1Jlsc2e7lpYyFp78803Ryn6jz322MK5rsJiLSzMKL1q1Spz\/vnn5zZcVaiAFkRABETgHQKysOirIAItSICInHHjxhUyxnbq1MmMGDGiJg6czLzrCkoL1hB3xljXzwULy1133WXIfosjcPfu3d3Ti5YZMmKOH\/K7sNyjR4\/gHGWLKqwVERCB4AlIYQn+EamCjUzgpptuil7s3COKwqhRowrDMXnfN5lp8Vd56623okuR+O3QQw8tuqxrYXnuueei\/CxEBB133HFFx8VXyJWydOlSc\/\/990e7cOKViIAIiEA1BDQkVA09nSsCVRBg0sN77723UAITCZI6v5bSvn37wuUGDx5cWLYLroWFbXvssYc599xz7e7Ez\/3228\/06dMn2o8DMcNc9Sw4JD\/++ONRuHc934fqLgL1TEAKSz0\/PdW9bgkwVEJEjpUjjjjCEHFTqUydOtWMHDky9enkD0F69erlHeLBAmOT2TGElCbMGosMwmzQzOacp5DrBYXLOgZndS0UFSZ1PO+886KhO98UBlldS+WIgAiUJqAhodJ8tFcEMidAlM0VV1xh+ES6du1qhg4dWtV1sNaQLTetoIygtPisK7asjh07GmZmRllJE2bN5I1Iz549bVG5fOaR64WK4oMzefLkKAuwb1qCXG5GhYqACCQSkMKSiEY7RCAfAkTZkKANYUjm4osvNu3atav4YqTGJ7V+3P+knAJJ5EZKeUKUk4RjunTpUjLfSvxclDHS9iNMLZCn5JXrBQfob3\/725Fiefrpp+d5CypbBESgDAJSWMqApENEICsC99xzTxRlY8sbNmyY2W233exqRZ921uJKJt9rznmWCvXr1y91vRYtWmSIgGKOnVr45eSR68U6HFejTKYGpxNEQAQSCaS3IScWpR0iIAKlCBA1c8sttxQOOfHEEyPfkcKGChbuu+8+M3\/+\/OjMShSWCi5Z1ikLFy6Mjtt3332jSRHxBZGIgAiIQDUEZGGphp7OFYEyCRDmS74VrA4IIcTlZIn1FU8ZK1euNDNnzjQPP\/xw4RAieEKRJUuWRFXBfwVflrlz55rhw4dnWj3yuyjXS6ZIVZgIBE1ACkvQj0eVawQCWBcmTJgQzadj74fZkMkUm1bImbJ69eqC4mPPJ5oHP5NQBIUK4ZPJFHEyzlqScr3gO\/Pkk0+mvhzOxwMGDEh9nk4QARGoDQEpLLXhrKu0YgIzZswwCxYsKCJAZEuWIbhYV8h3EoqgPGH9QHHAv2TXXXfNvGrkemnbtm2UnM7N9cJw1KxZs1Jfj9BrKSypsekEEagZASksNUOtC7VGAviX3H777bnfekjDQdwsFhVylnTr1i1XRcqX6+Xwww+PQsXTQrc5adKep+NFQARqQ0AKS2046yqtkMDatWujoaBaOJyG5HDLoyayhoRxeYsv1wtRV9VGXuVdb5UvAiKQnoCihNIz0xki0CyBjRs3mquuuqowqWGzJ1R5QGgKS5W3U9bptcz1UlaFdJAIiECuBGRhyRWvCm+tBJhYEH8Im802bw61yHWS9z2kLT8p1wuRU0QlpRWS+I0ePTrtaTpeBESgRgSksNQItC7T+gjknZK+9REtvmNfrhecb9esWWOsb0vxGaXXOnToUPoA7RUBEWhRAlJYWhS\/Li4CIlApgaRcL0wi2bt379TFYhXzyYYNGwqba+GPVLiYFkRABIoISGEpwqEVERCBeiGQlOuFCR3tDNNZ3Iub02Xx4sUVzdmURT1Uhgi0dgJSWFr7N0D3LwJ1SiDvXC\/Lli0zU6ZMMdaSA6bZs2cbJps86qijTJ8+feqUnKotAvVJoM1mE6cm+ajPZ6dai0CrJoBDcy1yvbRqyLp5EQiIgBSWgB6GqiICIiACIiACIuAnoDwsfi7aKgIiIAIiIAIiEBABKSwBPQxVRQREQAREQAREwE9ACoufi7aKgAiIgAiIgAgEREAKS0APQ1URAREQAREQARHwE5DC4ueirSIgAiIgAiIgAgERkMIS0MNQVURABERABERABPwEpLD4uWirCIiACIiACIhAQASksAT0MFQVERABERABERABPwEpLH4u2ioCIiACIiACIhAQASksAT0MVUUEREAEREAERMBPQAqLn4u2ioAIiIAIiIAIBERACktAD0NVEQEREAEREAER8BOQwuLnoq0iIAIiIAIiIAIBEZDCEtDDUFVEQAREQAREQAT8BKSw+LloqwiIgAiIgAiIQEAEpLAE9DBUFREQAREQAREQAT8BKSx+LtoqAiIgAiIgAiIQEAEpLAE9DFVFBERABERABETAT0AKi5+LtoqACIiACIiACAREQApLQA9DVREBERABERABEfATkMLi56KtIiACIiACIiACARGQwhLQw1BVREAEREAEREAE\/ASksPi5aKsIiIAIiIAIiEBABKSwBPQwVBUREAEREAEREAE\/ASksfi7aKgIiIAIiIAIiEBABKSwBPQxVRQREQAREQAREwE9ACoufi7aKgAiIgAiIgAgEREAKS0APQ1URAREQAREQARHwE5DC4ueirSIgAiIgAiIgAgERkMIS0MNQVURABERABERABPwEpLD4uWirCIiACIiACIhAQASksAT0MFQVERABERABERABPwEpLH4u2ioCIiACIiACIhAQASksAT0MVUUEREAEREAERMBP4L\/ILYyuX6SU+wAAAABJRU5ErkJggg==)\n","930c1fd2":"### Out of Sample Arima","cde940f9":"### Forecast on Test Set XGB Regressor","4ec67068":"### dataset head","aec60cb5":"### Baseline submission"}}