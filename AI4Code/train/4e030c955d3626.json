{"cell_type":{"2c929129":"code","f309fdf7":"code","ca6196d4":"code","2435671d":"code","aa892064":"code","bf6ed899":"code","afa5eca3":"code","90285e94":"code","ba1fad4b":"code","a5144bc4":"code","7e015b6e":"code","f0a7b708":"code","c00a458c":"code","f9ee1ed9":"code","ef51bf0b":"code","f632cf67":"code","a6de39bb":"code","617bb6f4":"code","66853d41":"markdown","e0b397d4":"markdown","8f75c8cf":"markdown","4e743dc8":"markdown","f01158a6":"markdown","c31f359e":"markdown","031c2f35":"markdown","4e57b1fa":"markdown","1e755701":"markdown","b6dc2ee0":"markdown","30f26088":"markdown"},"source":{"2c929129":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f309fdf7":"data = pd.read_csv('\/kaggle\/input\/high-value-customers-identification\/Ecommerce.csv', encoding= 'unicode_escape')\nprint('Rows:', data.shape[0])\ndata.head()","ca6196d4":"data.info()","2435671d":"customer_data = pd.DataFrame(data['CustomerID'].unique())\ncustomer_data = customer_data.rename(columns={0: 'CustomerID'})\ncustomer_data.dropna(inplace=True)","aa892064":"no_of_transactions = data[['InvoiceNo', 'CustomerID']]\nno_of_transactions = no_of_transactions.drop_duplicates()\nno_of_transactions = no_of_transactions.groupby(by='CustomerID', as_index=False).count()\nno_of_transactions = no_of_transactions.rename(columns={'InvoiceNo': 'No. of invoices'})\nno_of_transactions.head()","bf6ed899":"customer_data = customer_data.merge(no_of_transactions, how='left', on='CustomerID')","afa5eca3":"value_of_transactions = data[['Quantity', 'UnitPrice', 'CustomerID']]\nvalue_of_transactions['LineTotal'] = value_of_transactions['Quantity']*value_of_transactions['UnitPrice']\nvalue_of_transactions = value_of_transactions[['LineTotal','CustomerID']]\nvalue_of_transactions = value_of_transactions.groupby(by='CustomerID', as_index=False).sum()\nvalue_of_transactions","90285e94":"customer_data = customer_data.merge(value_of_transactions, how='left', on='CustomerID')","ba1fad4b":"customer_data['Avg. value per transaction'] = customer_data['LineTotal']\/customer_data['No. of invoices']\ncustomer_data","a5144bc4":"no_of_unique_items = data[['StockCode', 'CustomerID']]\nno_of_unique_items = no_of_unique_items.drop_duplicates()\nno_of_unique_items = no_of_unique_items.groupby(by='CustomerID', as_index=False).count()\nno_of_unique_items = no_of_unique_items.rename(columns={'StockCode': 'Count of unique items'})\nno_of_unique_items.head()","7e015b6e":"customer_data = customer_data.merge(no_of_unique_items, how='left', on='CustomerID')\ncustomer_data","f0a7b708":"customer_data.head()","c00a458c":"from sklearn.cluster import KMeans","f9ee1ed9":"X = customer_data[['No. of invoices', 'LineTotal', 'Avg. value per transaction','Count of unique items']]","ef51bf0b":"sse = []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=42, init='random', n_init=10, max_iter=10)\n    kmeans.fit(X)\n    sse.append(kmeans.inertia_)\n\nf, axes = plt.subplots(1,1,figsize=(8,8))\nplt.plot(range(1, 11), sse)\nplt.xticks(range(1, 11))\nplt.xlabel(\"Number of Clusters\")\nplt.ylabel(\"SSE\")\nplt.show()","f632cf67":"kmeans = KMeans(n_clusters=4, random_state=42, init='random', n_init=10, max_iter=10)\nkmeans.fit(X)\ncustomer_data['Cluster']=kmeans.predict(X)","a6de39bb":"customer_data","617bb6f4":"f, axes = plt.subplots(2,3,figsize=(15,15))\nsns.scatterplot(x='LineTotal', y='Avg. value per transaction', hue='Cluster', data=customer_data, ax=axes[0,0])\nsns.scatterplot(x='Avg. value per transaction', y='No. of invoices', hue='Cluster', data=customer_data, ax=axes[0,1])\nsns.scatterplot(x='LineTotal', y='No. of invoices', hue='Cluster', data=customer_data, ax=axes[0,2])\nsns.scatterplot(x='Count of unique items', y='Avg. value per transaction', hue='Cluster', data=customer_data, ax=axes[1,0])\nsns.scatterplot(x='Count of unique items', y='No. of invoices', hue='Cluster', data=customer_data, ax=axes[1,1])\nsns.scatterplot(x='Count of unique items', y='LineTotal', hue='Cluster', data=customer_data, ax=axes[1,2])\nplt.show()","66853d41":"# First look at the data","e0b397d4":"We have 541,909 rows of data, which should be enough data.\n\nAs for labels, We have invoice no, stock code and description, quantity sold and it's unit price, and the customer ID and their country.","8f75c8cf":"# Status: Work in progress","4e743dc8":"## 2. Number of transactions","f01158a6":"## Missing values\n\nWe have a lot of missing values in customerID. How is this possible? Cash customers? Even then, they should have an unique ID at least. \n\nWe also have some missing item description also. Does this mean that description is not the same for each item code? ","c31f359e":"# Creating the customer data and performing EDA\n\nNow to create the above labels.\n\n## 1. Customer ID\n\nThis will disregard all data with missing customer ID. We have 4372 unique customer ID's","031c2f35":"# Objectives\n\nMy objective for this notebook is to understand the data by performing EDA with some fun visualisations and also creating some kind of a 'customer master' information from the transactional information given. This customer data will then help me to do the final customer clustering.\n\nI will keep the following features in the customer data:\n1. Customer ID\n2. No. of transactions.\n3. Total value of transactions.\n4. Average value per transaction.\n5. Count of unique items bought.\n6. Count of unique items in invoice added together.\n7. Average no. of items bought per transaction.\n8. No. of unique period (months) the customers has transacted in.\n\nI hope to get some interesting insights from the data.\n\nLet the fun begin!","4e57b1fa":"## 5. Count of unique items bought.","1e755701":"## 4. Average value per transaction.","b6dc2ee0":"# Creating the clusters","30f26088":"## 3. Total value of transactions."}}