{"cell_type":{"75177607":"code","ef806016":"code","3b52b0a9":"code","9242238d":"code","93eaed2e":"code","bb505daf":"code","2d01757a":"code","2334b010":"code","0e71d741":"code","621f6d73":"code","24620f96":"code","41f1aab2":"code","6974d3ca":"code","c594dd75":"code","69d50569":"code","90785017":"code","3b959962":"code","23322067":"code","e573e550":"code","1815b276":"code","933bc70d":"code","ab07a92a":"code","3a01c30e":"code","0cfd1479":"code","9e8d72f0":"markdown","9449dd9d":"markdown"},"source":{"75177607":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef806016":"import tensorflow as tf\nimport matplotlib.pyplot as plt","3b52b0a9":"import os.path\nfrom pathlib import Path","9242238d":"image_dir =Path('..\/input\/datasetcatdog\/datasetCatDog')\nimage_dir","93eaed2e":"filenames = list(image_dir.glob('**\/*.jpg'))","bb505daf":"# preparing label\nos.path.split(os.path.split('..\/input\/datasetcatdog\/datasetCatDog\/test_set\/dogs\/dog.4001.jpg')[0])[1]\nlabel = list(map( lambda x : os.path.split(os.path.split(x)[0])[1], filenames))","2d01757a":"Filenames = pd.Series(filenames,name='Filepaths').astype(str)\nLabels = pd.Series(label,name='Labels')\nimage_df = pd.concat([Filenames, Labels],axis=1)","2334b010":"from sklearn.model_selection import train_test_split\nimage_train, image_test = train_test_split(image_df,test_size=0.25,shuffle=True,random_state=1)\nimage_train.shape, image_test.shape","0e71d741":"from keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array","621f6d73":"img = load_img('..\/input\/datasetcatdog\/datasetCatDog\/test_set\/dogs\/dog.4001.jpg')\nimg_array = img_to_array(img)\nimg_array.shape\nnp.max(img_array)","24620f96":"train_gen = ImageDataGenerator(rotation_range=20,\n                             rescale=1\/255,width_shift_range=0.2,\n                             height_shift_range=0.2,\n                            shear_range=0.2, zoom_range=0.2,\n                         horizontal_flip=True,\n                             validation_split=0.2\n                             )\ntest_gen = ImageDataGenerator(rescale=1\/255)","41f1aab2":"train_generator = train_gen.flow_from_dataframe(image_train, x_col='Filepaths',\n                                               y_col='Labels', target_size=(200,200),\n                                               color_mode='rgb', class_mode='binary',\n                                               shuffle=True, batch_size=32,\n                                               seed=1, subset='training')\nval_generator = train_gen.flow_from_dataframe(image_train, x_col='Filepaths',\n                                               y_col='Labels', target_size=(200,200),\n                                               color_mode='rgb', class_mode='binary',\n                                               shuffle=True, batch_size=32,\n                                               seed=1, subset='validation')\ntest_generator = test_gen.flow_from_dataframe(image_test, x_col='Filepaths',\n                                               y_col='Labels', target_size=(200,200),\n                                               color_mode='rgb', class_mode='binary',\n                                               shuffle=False, batch_size=32\n                                            )","6974d3ca":"from keras.layers import Conv2D, MaxPool2D, Dense, Flatten\nfrom keras.metrics import Accuracy\n!pip install livelossplot\nfrom livelossplot import PlotLossesKeras\nfrom keras.models import Sequential","c594dd75":"from keras.layers import  BatchNormalization","69d50569":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3,3),activation='relu',input_shape=(200,200,3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3),activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(units=1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","90785017":"model.summary()","3b959962":"from keras import callbacks","23322067":"result = model.fit(train_generator,validation_data=val_generator, epochs=50, steps_per_epoch=80,\n                   callbacks=[callbacks.EarlyStopping(monitor='val_loss',\n                                                   patience = 6,\n                                                     restore_best_weights=True ),\n                  callbacks.ReduceLROnPlateau(\n                  monitor='val_loss',\n                  patience = 5,\n                  restore_best_weights=True)]\n                  )","e573e550":"model.evaluate(test_generator)\nprint('Accuracy is: %.5f' %model.evaluate(test_generator)[1])\nprint('Loss is: %.2f' %model.evaluate(test_generator)[0])","1815b276":"predict_test = model.predict(test_generator)","933bc70d":"predict_test = [1 if x >= 0.5 else 0 for x in predict_test]\npredict_test","ab07a92a":"actual_label = image_test['Labels'].map({'cats':0, 'dogs':1})\nactual_label[0:20]","3a01c30e":"from sklearn.metrics import classification_report, confusion_matrix","0cfd1479":"print(classification_report(actual_label, predict_test))\nprint(confusion_matrix(actual_label, predict_test))","9e8d72f0":"## Image Generator","9449dd9d":"## build the model and train"}}