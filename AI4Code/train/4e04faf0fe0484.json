{"cell_type":{"00821095":"code","52a58d7a":"code","0e684ff2":"code","f1dd18cb":"code","41311ec6":"code","a7639bd6":"code","0dd3bd0e":"code","24038cc9":"code","925bb941":"code","190c2c58":"code","41980aae":"code","b812026c":"code","d3abe8c5":"code","fa11ca39":"code","428309fd":"code","a71c3732":"code","7a84f0f3":"code","424087b9":"code","a36a5b18":"code","54f2496b":"code","90a2c838":"code","f5ef3912":"code","86f6ee52":"code","e321e0fe":"code","ffdcc7fc":"code","2a207c1c":"markdown","924da7f1":"markdown","6cac784d":"markdown","502cc18a":"markdown","096ef512":"markdown","ccff09a5":"markdown","46ce3268":"markdown","d2f666bc":"markdown","e8376203":"markdown","9c116ee9":"markdown","b62950a8":"markdown","8bc8d7af":"markdown"},"source":{"00821095":"#Import Packages\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity='all' # shows outputs of all commands executed in 1 cell","52a58d7a":"# Input data files are available in the \"..\/input\/\" directory.\n\n# List all files under the input directory\n\ninput_path = '\/kaggle\/input\/widsdatathon2020'\n\nfor dirpath, dirname, filenames in os.walk(input_path):\n    for name in filenames:\n        print (os.path.join(dirpath , name))\n        \n# Any results you write to the current directory are saved as output.","0e684ff2":"# read file\nfname = 'training_v2.csv'\ntrain_df = pd.read_csv(os.path.join(input_path , fname))\n\nfname = 'unlabeled.csv'\ntest_df = pd.read_csv(os.path.join(input_path , fname))\n\nfname = 'solution_template.csv'\nsolution_df = pd.read_csv(os.path.join(input_path , fname))\n\n","f1dd18cb":"print('solution_df')\nsolution_df.head() \nsolution_df.info()\nsolution_df.shape","41311ec6":"solution_df['encounter_id'].describe()","a7639bd6":"print('test_df')\ntest_df.head()\ntest_df.info()\ntest_df.shape\ntest_df['encounter_id'].describe()","0dd3bd0e":"print('train_df')\ntrain_df.head() \ntrain_df.info()\ntrain_df.shape","24038cc9":"train_df['hospital_death'].dtype\ntest_df['hospital_death'].dtype\n","925bb941":"def display_columns_properties(df):\n    for i, col in enumerate(df.columns.tolist()):\n         print('\\n ({} {})  Missing: {}  UniqValsSz: {}'.format(i,col, df[col].isnull().sum() ,df[col].unique().size))\n    print('\\n')","190c2c58":"display_columns_properties(train_df)","41980aae":"display_columns_properties(test_df)","b812026c":"cat_train_df = train_df.select_dtypes(include='object')\ncat_train_df.head()\ncat_train_df.info()","d3abe8c5":"cat_test_df = test_df.select_dtypes(include='object')\ncat_test_df.head()\ncat_test_df.info()","fa11ca39":"def display_columns_uniqvals(df):\n    for i, col in enumerate(df.columns.tolist()):\n         print('\\n ({} {}) Uniq: {}'.format(i,col, df[col].unique() ))\n    print('\\n')","428309fd":"display_columns_uniqvals(cat_test_df)","a71c3732":"from sklearn.model_selection import train_test_split\n\n# copy the data\ntrain = train_df.copy()\n\n# Select target\ny = train['hospital_death']\n\n\n# To keep things simple, we'll use only numerical predictors\npredictors = train.drop(['hospital_death'], axis=1)\nX = predictors.select_dtypes(exclude=['object'])\n\n\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)\n\nX_train.shape\nX_valid.shape\n","7a84f0f3":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(X_valid))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n","424087b9":"\ndisplay_columns_properties(imputed_X_train)","a36a5b18":"\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n\n# Define model. Specify a number for random_state to ensure same results each run.\ndt_model = DecisionTreeRegressor(random_state=1)\n\n# Fit model using Traing data\ndt_model.fit(imputed_X_train, y_train)\n\n# get predicted prices on validation data\npredicted_values = dt_model.predict(imputed_X_valid)\n\n# Find difference\nscore = mean_absolute_error(y_valid, predicted_values)\nprint('MAE:', score)","54f2496b":"\ntest = test_df.copy()\n\n#Separate target\ny_test = test['hospital_death']\n\n# To keep things simple, we'll use only numerical predictors\npredictors_test = test.drop(['hospital_death'], axis=1)\nX_test = predictors_test.select_dtypes(exclude=['object'])\n\n\n\nX_test.shape\nX_test.head()","90a2c838":"# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_test = pd.DataFrame(my_imputer.fit_transform(X_test))\n\n\n# Imputation removed column names; put them back\nimputed_X_test.columns = X_test.columns","f5ef3912":"imputed_X_test.head()","86f6ee52":"\n# get predictions on test data\npreds = dt_model.predict(imputed_X_test)\n\n# Save predictions in format used for competition scoring\noutput = pd.DataFrame({'encounter_id': imputed_X_test.encounter_id,\n                       'hospital_death': preds},dtype=np.int32)\n \noutput.to_csv('submission.csv', index=False)\n","e321e0fe":"output.columns.dtype","ffdcc7fc":"### Conclusion\n# Used Decision tree model, simple imputation and only numerical columns.\n# Random forest Training is taking too long and not getting complete.","2a207c1c":"### Machine Learning ","924da7f1":"## Data Split\nWe need to split data into Training set(80%) and Validation set(20%).\nWe will use Validation set for prediction and deciding from it score which of numerous models\/approaches work better.","6cac784d":"We want to make prediction using an ML Algorithm.\nFit o traing data, Predict on validation data and validation.\nWe also want to measure how algorithm performs using Mean Absolute Error.","502cc18a":"### Decision Tree","096ef512":"For supervised learning **classification** problem target variable is hospital_death. \n\n1. Solution_df has encounter_id and target variable( NaN). \nIt has same no of observations as test_df.\n\n2. test_df shows NaN for hospital_death for top 5 rows. \nThere are 39308 ** observations and **186** features. Out of 186 features, 170 are float and 8 are int. Rest 8 are object type.\n\n3. train_df shows 0 for hospital_death for first 5 rows.\nIt has 91713 observations and 186 features. Out of 186 features, 171 are float and 7 are int. Rest 8 are object type.\n\n4. From 2 and 3 above, it looks like 1 int of train has been changed to 1 float of test because of values of hospital_death target variable. Let us confirm the same.","ccff09a5":"## Introduction\n\nThe challenge is to create a model that uses data from the first 24 hours of intensive care to predict patient survival. \nSo let us take first glimpse of data. \nLabeled training data are provided for model development. \nWe have to upload our predictions for unlabeled data to Kaggle.This notebook proposes Decision tree model as Solution. ","46ce3268":"Hope it is useful to you.     Please do UPVOTE if you like it.\n\n","d2f666bc":"## Categorical columns","e8376203":"## Tables ","9c116ee9":"## Imputation\nIF we use Machine Learning on data having missing values, we will get Errors.\nTo handle that we have 2 approaches: \n\n1. Drop all columns with missing values. But it leads to data loss especially if there are a lot of missing values.\n\n2. Imputation - Fill some values. \n- For categorical, we can fill with lost frequent value for that column.\n- For numerical, we can fill with mean or median value for that column.\nNew values filled may be far away from what actual values should be.\n\nIt is of two types. \nSimple Imputation - fills some value and does not remember which all positions had been missing.\n\nImputation with extension - fills some value and remembers which all values aere missing. New columns are created to store which positions had missing values.\n\n","b62950a8":"## Columns","8bc8d7af":"## Getting to know the data"}}