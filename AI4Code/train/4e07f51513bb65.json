{"cell_type":{"0f322a4d":"code","2f6c7fba":"code","18b77772":"code","0a9d18ea":"code","18d49baf":"code","61528048":"code","b122b5e7":"code","52e57c47":"code","417b143f":"code","6cdcf609":"code","4b42907c":"code","39837580":"code","df73e312":"code","d4ef7429":"code","6fd495a5":"code","adf147eb":"code","b4aa7e00":"code","626bcc6d":"code","605849fd":"code","78cfa5ae":"code","81d1341c":"code","ca1968ef":"code","c040b131":"code","6b1e264f":"code","3663be6b":"code","fd5fa310":"code","6e09e169":"code","bc22d54e":"code","3b1f944a":"code","b22eaa61":"code","4067413a":"code","407c5a58":"code","26572716":"code","027cfaca":"code","ff2b6f02":"code","109cec52":"code","b86269d3":"code","7859dd7a":"code","cc5c710e":"code","9151f171":"code","f3b1a69a":"code","2fe424a8":"code","f0d396f4":"code","9824089e":"code","0c8f3893":"code","0b1b2815":"code","72358616":"code","5657f2cc":"code","675fed04":"code","dda24391":"code","94fd5490":"code","dafa8931":"code","b60fed7f":"code","637a5e8a":"code","a8f68d23":"code","914f0966":"code","30c95892":"code","01e14ee3":"code","481468c5":"code","0a49ba3d":"code","01241063":"code","8a554899":"code","a01bde1b":"code","0f4cde83":"code","4b9f7f98":"code","af04c546":"code","7aca5d98":"code","14e24691":"code","3dd79c4f":"code","64439d1e":"code","f8e3effd":"code","e6f312f1":"code","1041daf6":"code","0482c80f":"markdown","e7f9f9ed":"markdown","8339372a":"markdown","96e236cb":"markdown","f7e91228":"markdown","20b32e5b":"markdown","5b90e58a":"markdown","c5a78732":"markdown","a6a8b29c":"markdown","23a36619":"markdown","22160640":"markdown","e8555c50":"markdown","bb942faf":"markdown","1f6fb36e":"markdown","ef8daa0f":"markdown","755b3761":"markdown","888334ad":"markdown","99250021":"markdown","b68819c5":"markdown","b0092caa":"markdown","b849c290":"markdown","5812ffb8":"markdown","62bb94cb":"markdown","26921db9":"markdown","e43891e4":"markdown","65de7331":"markdown","3cbe1ec3":"markdown","f83f5b5c":"markdown","1d32d351":"markdown","069cfb1e":"markdown","d2e92065":"markdown","688253b2":"markdown","d8039903":"markdown","75082c3f":"markdown","f35a9836":"markdown","71de2760":"markdown","a6a448b3":"markdown"},"source":{"0f322a4d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2f6c7fba":"houses = pd.read_csv('..\/input\/kc-house-data\/kc_house_data.csv')","18b77772":"houses.head()","0a9d18ea":"houses.info()","18d49baf":"houses.isnull().sum()","61528048":"houses[houses['sqft_above'].isnull()]","b122b5e7":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='grade', y='sqft_above', data=houses)","52e57c47":"houses['sqft_above'] = houses[['sqft_above', 'grade']].apply(\n    lambda sqft_grade:\n    houses.groupby('grade').mean()['sqft_above'].loc[sqft_grade[1]] if pd.isnull(sqft_grade[0]) else sqft_grade[0],\n    axis=1\n)","417b143f":"plt.figure(figsize=(20, 10))\nsns.heatmap(houses.drop('id', axis=1).corr(), annot=True, cmap='viridis_r')","6cdcf609":"plt.figure(figsize=(10, 7))\nhouses.corr().sort_values('price').drop('price')['price'].plot(kind='bar', title='Correlation with house prices in King County')","4b42907c":"plt.figure(figsize=(10, 7))\nsns.countplot(x='bedrooms', data=houses).set(ylabel='Count', title='Number of different houses depending on bedrooms', xlabel='Number of bedrooms')","39837580":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='bedrooms', y='price', data=houses).set(xlabel='Number of Bedrooms', ylabel='Price', title='Comparison of House price and number of bedrooms')","df73e312":"print('Correlation value between Number of Bedrooms and Price: ', houses.corr().loc['price', 'bedrooms'])","d4ef7429":"plt.figure(figsize=(10, 7))\nsns.scatterplot(x='sqft_living', y='price', data=houses).set(xlabel='Sqft Living Space', ylabel='Price of the house')","6fd495a5":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='waterfront', y='price', data=houses).set(xlabel='', ylabel='Price', title='Comparison of prices for houses having a waterfront or not',\n                                                        xticklabels=['Do not have waterfront', 'Have waterfront'])","adf147eb":"plt.figure(figsize=(10, 7))\nsns.countplot(x='waterfront', data=houses).set(xlabel='', ylabel='Price', title='Number of waterfront and non waterfront houses',\n                                             xticklabels=['Do not have waterfront', 'Have waterfront'])","b4aa7e00":"plt.figure(figsize=(10, 7))\nsns.lineplot(x='yr_built', y='price', data=houses)","626bcc6d":"houses['century_old'] = houses['yr_built'].apply(lambda year: 1 if year <= 1915 else 0)","605849fd":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='century_old', y='price', data=houses).set(xlabel='', ylabel='Price', title='Comparison of prices depending on the year the house was built',\n                                                        xticklabels=['Less than 100 years old', 'Over a 100 years Old'])","78cfa5ae":"plt.figure(figsize=(10, 7))\nsns.countplot(x='century_old', data=houses).set(xlabel='', ylabel='Price', title='Number of Houses according to thier age',\n                                                xticklabels=['Less than 100 years old', 'Over a 100 years Old'])","81d1341c":"houses.drop('yr_built', axis=1, inplace=True)","ca1968ef":"houses['yr_renovated'].value_counts()","c040b131":"plt.figure(figsize=(10, 7))\nsns.lineplot(x='yr_renovated', y='price', data=houses[houses['yr_renovated'] != 0]).set(xlabel='Year of Renotation', ylabel='Price',\n                                                                                        title='Relation between house price and year of renovation')","6b1e264f":"plt.figure(figsize=(10, 8))\nsns.scatterplot(x='long', y='lat', data=houses, hue='price', palette='magma_r', alpha=0.15)","3663be6b":"print('Percentage of houses priced below 3 million USD: ', len(houses[houses['price'] < 3000000]) \/ len(houses) * 100)\nprint('Percentage of houses priced below 2.5 million USD: ', len(houses[houses['price'] < 2500000]) \/ len(houses) * 100)\nprint('Percentage of houses priced below 2 million USD: ', len(houses[houses['price'] < 2000000]) \/ len(houses) * 100)\nprint('Percentage of houses priced below 1.5 million USD: ', len(houses[houses['price'] < 1500000]) \/ len(houses) * 100)","fd5fa310":"plt.figure(figsize=(10, 8))\nsns.scatterplot(x='long', y='lat', data=houses[houses['price'] < 2000000], hue='price', palette='magma_r', alpha=0.15)","6e09e169":"houses.drop('zipcode', axis=1, inplace=True)","bc22d54e":"lat_mid = houses['lat'].min() + ((houses['lat'].max() - houses['lat'].min()) \/ 2)\nlong_mid = houses['long'].min() + ((houses['long'].max() - houses['long'].min()) \/ 2)","3b1f944a":"houses['zone'] = houses[['lat', 'long']].apply(\n    lambda lat_long:\n    1 if ((lat_long[0] < lat_mid) and (lat_long[1] < long_mid)) else (\n        2 if ((lat_long[0] >= lat_mid) and (lat_long[1] < long_mid)) else (\n            3 if ((lat_long[0] < lat_mid) and (lat_long[1] >= long_mid)) else 4\n        )\n    ),\n    axis=1\n)","b22eaa61":"houses = pd.concat([houses.drop(['lat', 'long', 'zone'], axis=1), pd.get_dummies(houses['zone'], drop_first=True)], axis =1)","4067413a":"houses.head()","407c5a58":"houses['date'] = pd.to_datetime(houses['date'])","26572716":"houses['year_sold'] = houses['date'].apply(lambda date: date.year)\nhouses['month_sold'] = houses['date'].apply(lambda date: date.month)","027cfaca":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='year_sold', y='price', data=houses)","ff2b6f02":"plt.figure(figsize=(10, 7))\nsns.boxplot(x='month_sold', y='price', data=houses)","109cec52":"print('min: ', houses['date'].min(), '\\nmax: ',houses['date'].max())","b86269d3":"houses.drop(['date', 'year_sold', 'month_sold'], axis=1, inplace=True)","7859dd7a":"houses.drop('id', axis=1, inplace=True)","cc5c710e":"houses.info()","9151f171":"X = houses.drop('price', axis=1)\ny = houses['price']","f3b1a69a":"from sklearn.model_selection import train_test_split","2fe424a8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=11)","f0d396f4":"from sklearn.preprocessing import StandardScaler","9824089e":"scaler = StandardScaler()","0c8f3893":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","0b1b2815":"from sklearn.linear_model import LinearRegression","72358616":"lr_model = LinearRegression()","5657f2cc":"lr_model.fit(X_train, y_train)","675fed04":"lr_predictions = lr_model.predict(X_test)","dda24391":"from sklearn.ensemble import RandomForestRegressor","94fd5490":"from sklearn.model_selection import RandomizedSearchCV","dafa8931":"random_grid = {\n    'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)],\n    'max_features': ['auto', 'sqrt'],\n    'max_depth': [int(x) for x in np.linspace(10, 100, num = 10)],\n    'min_samples_split': [2, 5, 10, 15, 100],\n    'min_samples_leaf': [1, 2, 5, 10]\n}","b60fed7f":"rf = RandomForestRegressor()","637a5e8a":"rf_random_search = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, scoring='neg_mean_squared_error', n_iter=10, cv=5, verbose=1, random_state=11)","a8f68d23":"rf_random_search.fit(X_train, y_train)","914f0966":"rf_random_search.best_params_","30c95892":"rf_predictions = rf_random_search.predict(X_test)","01e14ee3":"from tensorflow.keras.models import Sequential","481468c5":"from tensorflow.keras.layers import Dense","0a49ba3d":"from tensorflow.keras.callbacks import EarlyStopping","01241063":"ann = Sequential()","8a554899":"ann.add(Dense(18, activation='relu'))\nann.add(Dense(18, activation='relu'))\nann.add(Dense(18, activation='relu'))\nann.add(Dense(18, activation='relu'))\nann.add(Dense(1))","a01bde1b":"ann.compile(optimizer='adam', loss='mse')","0f4cde83":"early_stop = EarlyStopping(monitor='val_loss', mode='min', patience=25, verbose=1)","4b9f7f98":"ann.fit(x=X_train, y=y_train.values, verbose=1, batch_size=32, epochs=10000, validation_data=(X_test, y_test.values), callbacks=[early_stop])","af04c546":"ann_predictions = ann.predict(X_test)","7aca5d98":"predictions_df = pd.DataFrame(y_test)\npredictions_df['Linear Regression'] = lr_predictions\npredictions_df['Random Forrest Regressor'] = rf_predictions\npredictions_df['Artifical Neural Network'] = ann_predictions","14e24691":"predictions_df.head()","3dd79c4f":"sns.pairplot(predictions_df, x_vars=['Linear Regression', 'Random Forrest Regressor', 'Artifical Neural Network'], y_vars=['price'], height=7)","64439d1e":"from sklearn.metrics import mean_squared_error, explained_variance_score, mean_absolute_error, r2_score","f8e3effd":"print('Linear Regression:')\nprint('Mean Absolute Error:', mean_absolute_error(predictions_df['price'], predictions_df['Linear Regression']))\nprint('Mean Squared Error:', mean_squared_error(predictions_df['price'], predictions_df['Linear Regression']))\nprint('Explained Variance Score:', explained_variance_score(predictions_df['price'], predictions_df['Linear Regression']))\nprint('R2 Score:', r2_score(predictions_df['price'], predictions_df['Linear Regression']))","e6f312f1":"print('Random Forrest Regressor:')\nprint('Mean Absolute Error:', mean_absolute_error(predictions_df['price'], predictions_df['Random Forrest Regressor']))\nprint('Mean Squared Error:', mean_squared_error(predictions_df['price'], predictions_df['Random Forrest Regressor']))\nprint('Explained Variance Score:', explained_variance_score(predictions_df['price'], predictions_df['Random Forrest Regressor']))\nprint('R2 Score:', r2_score(predictions_df['price'], predictions_df['Random Forrest Regressor']))","1041daf6":"print('Artifical Neural Network:')\nprint('Mean Absolute Error:', mean_absolute_error(predictions_df['price'], predictions_df['Artifical Neural Network']))\nprint('Mean Squared Error:', mean_squared_error(predictions_df['price'], predictions_df['Artifical Neural Network']))\nprint('Explained Variance Score:', explained_variance_score(predictions_df['price'], predictions_df['Artifical Neural Network']))\nprint('R2 Score:', r2_score(predictions_df['price'], predictions_df['Artifical Neural Network']))","0482c80f":"I am creating a categoreical column zone by splitting the map in 4 parts depending on latitude and longitude columns","e7f9f9ed":"### Missing Values","8339372a":"Id column is just a unique identifier and not a feature so I will drop it.","96e236cb":"A lot af values are 0, which suggest no renovation work done on the houses. Let's see how the renovation affect the prices for the houses:","f7e91228":"### ANN","20b32e5b":"Year Renovated:","5b90e58a":"### Random Forrest","c5a78732":"Houses that are over a 100 years old tend to have a higher price point.","a6a8b29c":"Since the date and it's extracted features do not have much effect on house price. I will drop them.","23a36619":"Let's use the newly ctreated feature century_old instead of yr_built for training the model.","22160640":"### Comparision","e8555c50":"Correalation of house price with others","bb942faf":"If we refer to attached map, the high price areas correspond to urban areas in Seattle, Mercer Island and Bellevue.","1f6fb36e":"<img src=\"https:\/\/www.kingcounty.gov\/about\/region\/~\/media\/about\/maps\/KC_simplemap_Oct2013.ashx\" \/>","ef8daa0f":"# King County Housing Data Analysis and Price Predictions","755b3761":"### Latitude and Logitude","888334ad":"Lets see the map of King County, for reference:","99250021":"It seems that sqft living space has a high correation with house price. However, there are some very big outliers here.\nThese outlier can have an adverse effect on the accuracy of our model.","b68819c5":"### Linear Regression","b0092caa":"Recently renovated houses seem to have higher price.","b849c290":"### Waterfront","5812ffb8":"### Correaltion Matrix","62bb94cb":"It seems if we put a cap on price at 2 million we will be losing just 1% of data. Lets see how adding this cap affects our latitude and longitude analysis","26921db9":"Year Built:","e43891e4":"### ID","65de7331":"Full Correlation Heatmap:","3cbe1ec3":"### Date","f83f5b5c":"### Sqft Living Space","1d32d351":"Houses that are waterfront properties do tend to have higher prices. But the number of waterfront properties in the sample with regards to non waterfront properties are very low.","069cfb1e":"Number of bedrooms do not seem to have very high correalation to house price in King County. Most houses are priced below 1 million USD as mean values for all the boxes fall below this price.","d2e92065":"As we can get the area related information from the combination of latitude and longitude, I believe zipcode can be dropped.","688253b2":"### Train Test Split and Data Standardization","d8039903":"It looks like, the prices are very evenly spread among the County. But there is an issue, if we look at the legend the price is 3 million USD. We saw earlier that most of the houses are priced below 1 million. So let's see waht percentage of houses are in the below 3, 2.5, 2 and 1.5 million price limit","75082c3f":"I will fill up these null values with the mean of sqft_above value for that grade","f35a9836":"Both year and month of sale seem to have no effect on the price of the house. It dose make sense to me as the data spans for just 13 months which is not a big enough window for fluctuations in house prices.","71de2760":"### Year Built and Year Renovated","a6a448b3":"### Number of Bedrooms"}}