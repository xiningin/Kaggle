{"cell_type":{"e726d7b6":"code","36c503f5":"code","bc8cfa98":"code","3251be68":"code","42db983e":"code","18e37b49":"code","eb051b83":"code","2a38acfa":"code","5ca7a577":"code","f53ac912":"code","bc558d2d":"code","1a3ab075":"code","18f6d2db":"code","68a97950":"code","1e54d8f1":"code","44056cbd":"code","9dcea0d3":"code","ba70a61e":"code","52c4fb17":"markdown","bcd22d62":"markdown","ba7548c5":"markdown","cdafa147":"markdown","2a1f0668":"markdown"},"source":{"e726d7b6":"import gc\nimport os\nfrom time import time\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport sys\nfrom tqdm import tqdm_notebook\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\n##############################################\n%matplotlib inline","36c503f5":"DATA_PATH = \"\/kaggle\/input\/innovationcup\/\"","bc8cfa98":"for dirname, _, filenames in os.walk(DATA_PATH):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3251be68":"ID_Data_train = pd.read_csv(DATA_PATH+\"ID_Data_train.csv\")\nID_Data_test = pd.read_csv(DATA_PATH+\"ID_Data_test.csv\")\nID_Time_train = pd.read_csv(DATA_PATH+\"ID_Time_train.csv\")\nsample_submission_kaggle = pd.read_csv(DATA_PATH+\"sample_sub_kaggle.csv\")\nsample_submission_coachs = pd.read_csv(DATA_PATH+\"sample_sub_coachs.csv\")","42db983e":"print(ID_Data_train.shape)\nprint(ID_Data_train.columns)\nprint(ID_Data_train['id'].nunique())\nID_Data_train.sample(3)","18e37b49":"print(ID_Time_train.shape)\nprint(ID_Time_train.columns)\nprint(ID_Time_train['id'].nunique())\nID_Time_train.sample(3)","eb051b83":"def calc_diff_angle(data):\n    data.loc[:,'Diff_angle'] = data.loc[:,'direction_vent'] - data.loc[:,'cap']\n    return data","2a38acfa":"# ID_Time_trainV1.head()","5ca7a577":"def creer_features(input_data, time_id):\n    \"\"\"\n    input_data : DF comprenant les courses des bateaux (s\u00e9ries temporelles des variables consid\u00e9r\u00e9es)\n    time_id : DF li\u00e9 \u00e0 input_data qui comprend l'ID, le temps, la course, et le rang \n    \"\"\"\n    X_model = pd.DataFrame()\n    IDs = time_id['id'].values\n    data = input_data.copy()\n    for i in tqdm_notebook(IDs): \n        data_id = data[data['id']==i]\n        data_id = calc_diff_angle(data_id)\n        X_model.loc[i, 'lat_mean'] = data_id['latitude'].mean()\n        X_model.loc[i, 'long_std'] = data_id['longitude'].std()\n        \n       \n    X_model = X_model.fillna(0)\n    return X_model","f53ac912":"X_train = creer_features(ID_Data_train, ID_Time_train)","bc558d2d":"y_train = X_train.merge(ID_Time_train, left_index=True, right_on='id', how='left')['temps']\nprint(len(y_train), X_train.shape)\n","1a3ab075":"X_test = creer_features(ID_Data_test, sample_submission_kaggle)\nprint(X_test.shape)","18f6d2db":"def ecart_classement(y_true, y_pred):\n    return np.mean(abs(y_true - y_pred))\n\ndef rmse(y, y_pred):\n    return np.sqrt(np.mean(np.square(y - y_pred)))\n\ndef calc_rank_from_time(data_pred, id_time_train): \n    \"\"\" \n    Calcul le rang \u00e0 partir d'un fichier de pr\u00e9diction de temps \n    Il faut que la pr\u00e9diction soit un dataframe avec en indice les id bateau hash, en colonne le temps pr\u00e9dit\n    et une autre colonne avec la course.\n    Cela permet de reconstruire le classement \u00e0 partir des donn\u00e9es pr\u00e9dites et des donn\u00e9es pr\u00e9sentes \n    dans le jeu d'entrainement\n    \"\"\"\n    IDs = data_pred['id'].tolist()\n    id_time_all = pd.concat([data_pred, id_time_train], axis=0)\n    id_time_all['rang'] = id_time_all.groupby('id_race')['temps'].rank(ascending=True)\n    data_pred_rank = id_time_all[id_time_all['id'].isin(IDs)]\n    return data_pred_rank \n\ndef score_innovation_cup(sub_true, sub_pred):\n    \"\"\"\n    Il faut fournir une soumission sous format dataframe avec en index les id_bateau_hash, \n    une premi\u00e8re colonne Time, et une seconde colonne rang, calcul\u00e9e par l'\u00e9tudiant\n    Il est conseill\u00e9 d'inclure la course en colonne \u00e9galement mais ce n'est pas obligatoire\n    \"\"\"\n    true_time, true_rank = sub_true['temps'], sub_true['rang']\n    pred_time, pred_rank = sub_pred['temps'], sub_pred['rang']\n    \n    score = ecart_classement(true_rank, pred_rank) + (rmse(true_time, pred_time) \/ np.sqrt(np.mean(true_time)))\n    return score\n\n","68a97950":"LR = LinearRegression()\nLR.fit(X_train, y_train)\ny_pred = LR.predict(X_test)","1e54d8f1":"submission_final_coachs = sample_submission_coachs.copy()\nsubmission_final_kaggle= sample_submission_kaggle.copy()\nsubmission_final_kaggle['temps'] = y_pred\nsubmission_final_coachs['temps'] = y_pred\nsubmission_final_coachs = calc_rank_from_time(submission_final_coachs, ID_Time_train)","44056cbd":"submission_final_coachs.head(7)","9dcea0d3":"submission_final_coachs.to_csv(\"soumission_finale_TEAMNAME#3.csv\", index=False)","ba70a61e":"submission_final_kaggle.to_csv(\"soumission_finale_TEAMNAME.csv\", index=False)","52c4fb17":"## Features","bcd22d62":"# Mod\u00e8les de Regression ","ba7548c5":"## M\u00e9trique d'\u00e9valuation ","cdafa147":"## Regression Lin\u00e9aire simple","2a1f0668":"## Cr\u00e9ation des features"}}