{"cell_type":{"1ce9f2d0":"code","f11d3658":"code","2e936b4d":"code","a0303444":"code","613712de":"code","3b90e1d3":"code","0440204f":"code","22e8a683":"code","5a01a2e7":"code","8792021c":"code","6a7d3c29":"code","ac69152f":"code","1a5bb5a4":"code","977b49c5":"code","015111c1":"code","dc897e6d":"code","f1e52012":"code","646a81cd":"code","173316c0":"code","680503f6":"code","6d8f4afa":"code","dd0b4e84":"code","178e02bc":"code","91bc1be7":"code","f4b84538":"code","a774bd0f":"code","deb57af8":"code","9e80fcee":"code","85f5e9ff":"code","25f829dd":"code","f8a674e3":"code","c49842da":"code","a4658883":"code","5de3f32b":"code","31a95820":"code","c773c9de":"code","e959ca89":"code","1955b1a2":"code","e0d40f64":"code","5b335c02":"code","fc3187fa":"code","e2a0cc32":"code","09e3cc07":"code","c74fd406":"code","4794e259":"markdown","1eb3970b":"markdown","9159adca":"markdown","8e5607f1":"markdown","a035a805":"markdown","c7d408ef":"markdown","e21df760":"markdown","dd44fe80":"markdown","f3986f9b":"markdown","0af318b5":"markdown","8d830b09":"markdown","b4410ae6":"markdown","4d4e17f9":"markdown","47598c41":"markdown","ca42d435":"markdown"},"source":{"1ce9f2d0":"import pandas as pd\nimport numpy as np\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nmpl.rcParams['figure.figsize'] = (8, 6)\nmpl.rcParams['axes.grid'] = True\n\n# Set precision to two decimals\npd.set_option(\"display.precision\", 2)","f11d3658":"df = pd.read_csv('..\/input\/covid19-cases-in-spain-by-ccaa-26042020\/serie_historica_acumulados_dv_26042020.csv', sep=',', encoding = 'unicode_escape')","2e936b4d":"# Convert FECHA column to datetime format\ndf['FECHA'] = pd.to_datetime(df['FECHA'], format='%d\/%m\/%Y')","a0303444":"# Add mortality column\n# Mortality = Nro Fallecidos \/ Nro Casos (por fecha)\ndf['MORTALITY'] = df['FALLECIDOS']\/df['CASOS']\ndf.head()","613712de":"# Replace NaN with 0\ndf.fillna(value=0, inplace=True)","3b90e1d3":"# Get list of CCAA\ncodes_CCAA = df['CCAA'].unique()\nprint(len(codes_CCAA), codes_CCAA)","0440204f":"# Full CA name and CA coede pairs\ndict_CCAA = {'AN': 'Andalucia', 'AR': 'Aragon', 'AS': 'Asturias', \n             'IB': 'Islas Baleares', 'CN': 'Islas Canarias', \n             'CB': 'Cantabria', 'CM': 'Castilla La Mancha', \n             'CL': 'Castilla y Leon', 'CT': 'Catalunya', 'CE': 'Ceuta', \n             'VC': 'Comunidad Valenciana', 'EX': 'Extremadura',\n             'GA': 'Galicia', 'MD': 'Comunidad de Madrid', 'ME': 'Melilla',\n             'MC': 'Murcia', 'NC': 'Comunidad Navarra' , 'PV': 'Pais Vasco',\n             'RI': 'La Rioja'}","22e8a683":"# Create a dictionary of dataframes (one for each CCAA)\narray_df_CCAA = {}\nfor x in codes_CCAA:\n  array_df_CCAA[x] = pd.DataFrame(df[df['CCAA']==x])","5a01a2e7":"###########################################\n# Choose one CA\n###########################################\nchosen_CA = 'VC'\ndfp = array_df_CCAA[chosen_CA]\ndfp.set_index('FECHA', inplace=True)\nprint(\"Your choice of CCAA: \" + dict_CCAA[chosen_CA])","8792021c":"# Create new columns with daily difference (casos(t)-casos(t-1))\ndfp['CASOS_DIFF'] = dfp['CASOS'].diff()\ndfp['HOSPITAL_DIFF'] = dfp['HOSPITAL'].diff()\ndfp['UCI_DIFF'] = dfp['UCI'].diff()\ndfp['FALLECIDOS_DIFF'] = dfp['FALLECIDOS'].diff()\ndfp['RECUPERADOS_DIFF'] = dfp['RECUPERADOS'].diff()","6a7d3c29":"# Fill first element of the diff series with 0\ndfp.fillna(value=0, inplace=True )","ac69152f":"# Make list of cases and daily change rates\ncasos = ('CASOS', 'HOSPITAL', 'UCI', 'FALLECIDOS', 'RECUPERADOS') \ncasos_daily_diff = ('CASOS_DIFF', 'HOSPITAL_DIFF', 'UCI_DIFF', 'FALLECIDOS_DIFF', 'RECUPERADOS_DIFF')","1a5bb5a4":"# Plot cases\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('NUMERO DE CASOS')\nplt.title('Evolucion temporal de los casos de Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\n\nplt.plot(dfp.index, dfp.CASOS, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.HOSPITAL, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.UCI, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.FALLECIDOS, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.RECUPERADOS, linewidth=1, marker='')\n\nplt.legend(casos, loc='upper left', fontsize='large')\nplt.show()","977b49c5":"# Plot daily change (value(t)-value(t-1))\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('VARIACION DIARIA')\nplt.title('Variacion diaria de los casos de Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\n\nplt.plot(dfp.index, dfp.CASOS_DIFF, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.HOSPITAL_DIFF, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.UCI_DIFF, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.FALLECIDOS_DIFF, linewidth=1, marker='')\nplt.plot(dfp.index, dfp.RECUPERADOS_DIFF, linewidth=1, marker='')\n\nplt.legend(casos_daily_diff, loc='upper left', fontsize='large')\nplt.show()","015111c1":"# Split data into train and test subsets \nnbr_predictions = 5\ndfp_train = dfp[:len(dfp)-nbr_predictions]\ndfp_test = dfp[len(dfp)-nbr_predictions:]","dc897e6d":"dfp_test","f1e52012":"plt.figure(figsize=(9,4))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos confirmados de Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp.index, dfp.CASOS, linewidth=1)","646a81cd":"# Check for seasonality and trend information\nfrom statsmodels.tsa.seasonal import seasonal_decompose\ns = seasonal_decompose(dfp_train.CASOS, model = \"add\")\ns.plot();","173316c0":"# Execute auto_arima to find optimal parameters\n!pip install pmdarima\nfrom pmdarima import auto_arima      \nauto_arima(dfp_train.CASOS, seasonal=True, m=7,max_p=7, max_d=5,max_q=7, max_P=4, max_D=4,max_Q=4, suppress_warnings=True).summary()","680503f6":"# Configure model and fit it with train data\nimport statsmodels.api as sm\nARIMA_model = sm.tsa.statespace.SARIMAX(dfp_train.CASOS, order=(0,2,1), seasonal_order=(0,0,0,0), suppress_warnings=True).fit(maxiter=500)","6d8f4afa":"# Create y_predicted as a copy of dfp_test so we keep all data in one dataframe\ny_predicted = dfp_test.copy()\ny_predicted['SARIMA_CASOS'] = ARIMA_model.forecast(len(dfp_test.CASOS))\ny_predicted","dd0b4e84":"# Plot of case predictions: CONFIRMED CASES\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('CASOS confirmados de Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp_train.index, dfp_train.CASOS, linewidth=1, marker='x', label='Training')\nplt.plot(dfp_test.index, dfp_test.CASOS, linewidth=1,  marker='x', label='Test')\nplt.plot(dfp_test.index, y_predicted['SARIMA_CASOS'], linewidth=1, marker='o', markersize=4, label='SARIMAX predicted')\nplt.legend(loc='upper left', fontsize='large')\nplt.show()","178e02bc":"# Check accuracy of model with Root Mean Square Error\nimport statsmodels.api as sm\nrms = sqrt(mean_squared_error(dfp_test.CASOS, y_predicted.SARIMA_CASOS))\nprint('RMSE ARIMA = ' + str(rms))","91bc1be7":"plt.figure(figsize=(9,4))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos en HOSPITAL de Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp.index, dfp.HOSPITAL, linewidth=1)","f4b84538":"# Check for seasonality and trend information\ns = seasonal_decompose(dfp_train.HOSPITAL, model = \"add\")\ns.plot();","a774bd0f":"# Execute auto_arima to find optimal parameters\nauto_arima(dfp_train.HOSPITAL, seasonal=True, m=7,max_p=7, max_d=5,max_q=7, max_P=4, max_D=4,max_Q=4, suppress_warnings=True).summary()","deb57af8":"# Configure model and fit it with train data\nARIMA_model = sm.tsa.statespace.SARIMAX(dfp_train.HOSPITAL, order=(0,2,0), seasonal_order=(0,0,0,0), suppress_warnings=True).fit(maxiter=500)","9e80fcee":"# Add a new column to y_predicted with the HOSPITAL cases prediction\ny_predicted['SARIMA_HOSPITAL'] = ARIMA_model.forecast(len(dfp_test.HOSPITAL)) \ny_predicted","85f5e9ff":"# Plot of case predictions: HOSPITAL CASES\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos en HOSPITAL con Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp_train.index, dfp_train.HOSPITAL, linewidth=1, marker='x', label='Training')\nplt.plot(dfp_test.index, dfp_test.HOSPITAL, linewidth=1,  marker='x', label='Test')\nplt.plot(dfp_test.index, y_predicted['SARIMA_HOSPITAL'], linewidth=1, marker='o', markersize=4, label='SARIMAX predicted')\nplt.legend(loc='upper left', fontsize='large')\nplt.show()","25f829dd":"# Check accuracy of model with Root Mean Square Error\nrms = sqrt(mean_squared_error(dfp_test.HOSPITAL, y_predicted.SARIMA_HOSPITAL))\nprint('RMSE ARIMA = ' + str(rms))","f8a674e3":"plt.figure(figsize=(9,4))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos en la UCI con Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp.index, dfp.UCI, linewidth=1)","c49842da":"# Check for seasonality and trend information\ns = seasonal_decompose(dfp_train.UCI, model = \"add\")\ns.plot();","a4658883":"# Execute auto_arima to find optimal parameters\nauto_arima(dfp_train.UCI, seasonal=True, m=7,max_p=7, max_d=5,max_q=7, max_P=4, max_D=4,max_Q=4, suppress_warnings=True).summary()","5de3f32b":"# Configure model and fit it with train data\nARIMA_model = sm.tsa.statespace.SARIMAX(dfp_train.UCI, order=(1,2,2), seasonal_order=(1,0,0,7), suppress_warnings=True).fit(maxiter=500)","31a95820":"# Add a new column to y_predicted with the UCI cases prediction\ny_predicted['SARIMA_UCI'] = ARIMA_model.forecast(len(dfp_test.UCI)) \ny_predicted","c773c9de":"# Plot of case predictions: UCI CASES\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos en la UCI con Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\n\nplt.plot(dfp_train.index, dfp_train.UCI, linewidth=1, marker='x', label='Training')\nplt.plot(dfp_test.index, dfp_test.UCI, linewidth=1,  marker='x', label='Test')\nplt.plot(dfp_test.index, y_predicted['SARIMA_UCI'], linewidth=1, marker='o', markersize=4, label='SARIMAX predicted')\n\nplt.legend(loc='upper left', fontsize='large')\nplt.show()","e959ca89":"# Check accuracy of model with Root Mean Square Error\nrms = sqrt(mean_squared_error(dfp_test.UCI, y_predicted.SARIMA_UCI))\nprint('RMSE ARIMA = ' + str(rms))","1955b1a2":"plt.figure(figsize=(9,4))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos FALLECIDOS con Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\nplt.plot(dfp.index, dfp.FALLECIDOS, linewidth=1)","e0d40f64":"# Check for seasonality and trend information\ns = seasonal_decompose(dfp_train.FALLECIDOS, model = \"add\")\ns.plot();","5b335c02":"# Execute auto_arima to find optimal parameters\nauto_arima(dfp_train.FALLECIDOS, seasonal=True, m=7,max_p=7, max_d=5,max_q=7, max_P=4, max_D=4,max_Q=4, suppress_warnings=True).summary()","fc3187fa":"# Configure model and fit it with train data\nARIMA_model = sm.tsa.statespace.SARIMAX(dfp_train.FALLECIDOS, order=(0,2,1), seasonal_order=(0,0,0,0)).fit(maxiter=500)","e2a0cc32":"# Add a new column to y_predicted with the FALLECIDOS cases prediction (deaths)\ny_predicted['SARIMA_FALLECIDOS'] = ARIMA_model.forecast(len(dfp_test.FALLECIDOS)) \ny_predicted","09e3cc07":"# Plot of case predictions: FALLECIDOS CASES\nplt.figure(figsize=(12,6))\nplt.xlabel ('FECHA')\nplt.ylabel('CASOS')\nplt.title('Casos FALLECIDOS con Covid-19:  ' + dict_CCAA[chosen_CA], fontsize='x-large')\n\nplt.plot(dfp_train.index, dfp_train.FALLECIDOS, linewidth=1, marker='x', label='Training')\nplt.plot(dfp_test.index, dfp_test.FALLECIDOS, linewidth=1,  marker='x', label='Test')\nplt.plot(dfp_test.index, y_predicted['SARIMA_FALLECIDOS'], linewidth=1, marker='o', markersize=4, label='SARIMAX predicted')\n\nplt.legend(loc='upper left', fontsize='large')\nplt.show()","c74fd406":"# Check accuracy of model with Root Mean Square Error\nrms = sqrt(mean_squared_error(dfp_test.FALLECIDOS, y_predicted.SARIMA_FALLECIDOS))\nprint('RMSE ARIMA = ' + str(rms))","4794e259":"### Split the chosen CA dataframe into training and test subsets","1eb3970b":"### Prediction of cases in hospital (HOSPITAL)","9159adca":"We can see a seasonal component of frequency 7 (weekly). Let's now run auto_arima to identify the optimal parameters for the above data series, so we do not need to make the effort to understand ARIMA :-o ","8e5607f1":"According to the above run the best model is **SARIMAX(0,2,1)**","a035a805":"This is the end of this notebook. I hope you found it interesting. If you did, please upvote me. \n\nThanks in advance for your time!!","c7d408ef":"## Analysis of one individual CA","e21df760":"## Predictions with SARIMAX model\n\nAutoregressive Integrated Moving Average, or ARIMA, is a forecasting method for univariate time series data. As its name suggests, it supports both autoregressive and moving average elements. The integrated element refers to differencing allowing the method to support time series data with a trend.\n\nA problem with ARIMA is that it does not support seasonal data. That is a time series with a repeating cycle. ARIMA expects data that is either not seasonal or has the seasonal component removed, e.g. seasonally adjusted via methods such as seasonal differencing.\n\nTo overcome the seasonal limitations of ARIMA, the SARIMA (Seasonal ARIMA) model implements an extension that explicitly supports univariate time series data with a seasonal component.\n\nSARIMA adds three new hyperparameters to specify the autoregression (AR), differencing (I) and moving average (MA) for the seasonal component of the series, as well as an additional parameter for the period of the seasonality.\n\n\nConfiguring a SARIMA requires selecting hyperparameters for both the trend and seasonal elements of the series.\nTrend Elements\n\nThere are three trend elements that require configuration.\n\nThey are the same as the ARIMA model; specifically:\n\n    p: Trend autoregression order.\n    d: Trend difference order.\n    q: Trend moving average order.\n\nSeasonal Elements\n\nThere are four seasonal elements that are not part of ARIMA that must be configured; they are:\n\n    P: Seasonal autoregressive order.\n    D: Seasonal difference order.\n    Q: Seasonal moving average order.\n    m: The number of time steps for a single seasonal period.\n\nThe X at the end is yet another extension to allow for exogenous variables. These are parallel time series variates that are not modeled directly via AR, I, or MA processes, but are made available as a weighted input to the model.\n","dd44fe80":"This notebook implements a SARIMA predictive model that makes a 5-day prediction of COVID-19 cases in a Spanish region (configurable).\n\nSpanish regions are called \"Comunidades Autonomas\" (CCAA). In its current visualization, Comunidad Valenciana is shown.\n\nLast updated: 26th of April 2020","f3986f9b":"### Prediction of confirmed cases (CASOS)","0af318b5":"For the UCI predictions, the tool recommends a model **SSARIMAX(1, 2,2)x(1, 0, 0, 7)** with no seasonal parameters. ","8d830b09":"Before we can put the data through the ARIMA algorithm, we need to try and understand the data a bit better, by decomposing it into its different frequency components. ","b4410ae6":"### Prediction of cases in intensive care (UCI)","4d4e17f9":"### Prediction of deaths (FALLECIDOS)","47598c41":"The recommended model parameters for HOSPITAL cases is **SARIMAX(0,2,0)** \t","ca42d435":"## Split data by Comunidad Autonoma"}}