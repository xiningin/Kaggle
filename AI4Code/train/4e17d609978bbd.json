{"cell_type":{"2cf888ff":"code","dbb23375":"code","f32bb916":"code","97d059e2":"code","101825ca":"code","164d7d6d":"code","e2ee7db9":"code","4dc86bc5":"code","55ef8241":"code","e912b7fe":"code","b92a70ee":"code","ebcdcdec":"code","fb391060":"code","acdfc238":"code","c32c69a0":"code","23ed7001":"code","036a5d04":"code","b4676722":"code","67751b2f":"code","4e683780":"code","1d47b629":"code","8ad342f3":"code","e6375ee3":"code","5549b1ba":"code","0991dd26":"code","7b34c8be":"code","2ade7438":"code","01d85c6c":"code","10abcbf2":"code","935ccfa5":"code","6229b612":"code","c5e9fb4c":"code","f7da5f32":"code","64b8c7a3":"code","8f6b1385":"code","351c39c8":"code","af8ef925":"code","ca1a010f":"code","65aa01ad":"code","31677930":"code","4e298442":"code","88aea9d8":"code","4290c82c":"code","a30a1462":"code","75793b30":"code","30bf492c":"code","bc72fcfd":"code","9287a94b":"code","3b2e0140":"code","3461dce2":"code","070e7761":"code","b2bd39d4":"code","0cc1600d":"code","40886870":"code","18ddd216":"code","c567be9d":"code","bf4c3cad":"code","c069c246":"code","78d2415f":"code","8c7ea8fc":"code","ee5eeb79":"markdown","66aff714":"markdown","9c6940f8":"markdown","3cbf1c99":"markdown","3c5b4591":"markdown","297b0480":"markdown","3e3a58b2":"markdown","cdeaa8b1":"markdown","bd04c821":"markdown","14852859":"markdown","3b1954ab":"markdown","5ab89e9c":"markdown"},"source":{"2cf888ff":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","dbb23375":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","f32bb916":"word=open(r\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\")\nprint(word.read())","97d059e2":"hp_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nhp_train.head()","101825ca":"hp_train.columns","164d7d6d":"hp_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nhp_test.head()","e2ee7db9":"hp_train.shape","4dc86bc5":"hp_test.shape","55ef8241":"hp_train.info()","e912b7fe":"hp_train.describe()","b92a70ee":"hp_test.describe()","ebcdcdec":"round(100*hp_train.isnull().sum()\/hp_train.shape[0])","fb391060":"categorical_features = hp_train.select_dtypes(include=['object']).columns\ncategorical_features","acdfc238":"print(hp_train[\"MasVnrType\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"Alley\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"BsmtQual\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"BsmtCond\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"BsmtExposure\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"BsmtFinType1\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"BsmtFinType1\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"Electrical\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"FireplaceQu\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"GarageType\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"GarageFinish\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"GarageQual\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"GarageCond\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"PoolQC\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"Fence\"].value_counts())\nprint('*'*30)\nprint(hp_train[\"MiscFeature\"].value_counts())","c32c69a0":"hp_train.loc[hp_train['Alley'].isnull(), 'Alley'] = \"No Alley Access\"\nhp_train.loc[hp_train['MasVnrType'].isnull(), 'MasVnrType'] = \"No MasVnr Type\"\nhp_train.loc[hp_train['BsmtQual'].isnull(), 'BsmtQual'] = \"No Basement available\"\nhp_train.loc[hp_train['BsmtCond'].isnull(), 'BsmtCond'] = \"No Basement available\"\nhp_train.loc[hp_train['BsmtExposure'].isnull(), 'BsmtExposure'] = \"No Basement available\"\nhp_train.loc[hp_train['BsmtFinType1'].isnull(), 'BsmtFinType1'] = \"No Basement available\"\nhp_train.loc[hp_train['BsmtFinType2'].isnull(), 'BsmtFinType2'] = \"No Basement available\"\nhp_train.loc[hp_train['FireplaceQu'].isnull(), 'FireplaceQu'] = \"No fireplace available\"\nhp_train.loc[hp_train['GarageType'].isnull(), 'GarageType'] = \"No Garagr available\"\nhp_train.loc[hp_train['GarageFinish'].isnull(), 'GarageFinish'] = \"No Garagr available\"\nhp_train.loc[hp_train['GarageQual'].isnull(), 'GarageQual'] = \"No Garagr available\"\nhp_train.loc[hp_train['GarageCond'].isnull(), 'GarageCond'] = \"No Garagr available\"\nhp_train.loc[hp_train['PoolQC'].isnull(), 'PoolQC'] = \"No ppol available\"\nhp_train.loc[hp_train['Fence'].isnull(), 'Fence'] = \"No fence available\"\nhp_train.loc[hp_train['MiscFeature'].isnull(), 'MiscFeature'] = \"No MiscFeature\"","23ed7001":"# null_percentage=round(100*hp_train.isnull().sum()\/hp_train.shape[0])\n# null_value = pd.DataFrame(hp_train.isnull().sum())\n# null=pd.merge(\"null_percentage\",\"null_value\",on='Column Name')\n# #Column wise null values in train data set \nnull_perc = pd.DataFrame(round((hp_train.isnull().sum())*100\/hp_train.shape[0],2)).reset_index()\nnull_perc.columns = ['Column Name', 'Null Values Percentage']\nnull_value = pd.DataFrame(hp_train.isnull().sum()).reset_index()\nnull_value.columns = ['Column Name', 'Null Values']\nnull_lead = pd.merge(null_value, null_perc, on='Column Name')\nnull_lead.sort_values(\"Null Values\", ascending = False)\n","036a5d04":"numerical_variabels = hp_train.select_dtypes(include=['int',\"float\"]).columns\nnumerical_variabels","b4676722":"hp_train.loc[hp_train['LotFrontage'].isnull(), 'LotFrontage'] = 0\nhp_train.loc[hp_train['MasVnrType'].isnull(), 'MasVnrType'] = 0\nhp_train.loc[hp_train['GarageYrBlt'].isnull(), 'GarageYrBlt'] = 0\n","67751b2f":"round(100*hp_train.isnull().sum()\/hp_train.shape[0])","4e683780":"# Check for skewness for categorical features\nfor i in categorical_features:\n    hp=hp_train[i].value_counts()\n    print(hp)","1d47b629":"# Check for skewness for numericalvariabels\nfor i in numerical_variabels:\n    hp_n=hp_train[i].value_counts()\n    print(hp_n)","8ad342f3":"hp_train.head()","e6375ee3":"hp_train['Age_House']= (hp_train['YrSold']-hp_train['YearBuilt'])# age of the house\n\nhp = hp_train[hp_train['Age_House'] < 0]\nhp\n","5549b1ba":"# Creating 'BldgAge_year' column\nhp_train['BldgAge_year'] = 2019 - hp_train['YearBuilt']\n\n# Creating 'RemodAge_year' column\nhp_train['RemodAge_year'] = 2019 - hp_train['YearRemodAdd']\n\n# Creating 'GarageAge_year' column\nhp_train['GarageAge_year'] = 2019 - hp_train['GarageYrBlt']\n\n# Creating 'DaysSinceSold' column by subtracting date sold from today's date.\nhp_train['DaysSinceSold'] = (pd.to_datetime('today') - pd.to_datetime('01.'+hp_train['MoSold'].astype(str)+'.'+hp_train['YrSold'].astype(str))).dt.days\n\n#Dropping all the columns above which are feature engineered.\nhp_train.drop(columns=['YearBuilt','YearRemodAdd','GarageYrBlt','MoSold','YrSold'],inplace=True)\n","0991dd26":"hp_train['TotalBsmtBath'] = hp_train['BsmtFullBath'] + hp_train['BsmtFullBath']*0.5\nhp_train['TotalBath'] = hp_train['FullBath'] + hp_train['HalfBath']*0.5 \nhp_train['TotalSA']=hp_train['TotalBsmtSF'] + hp_train['1stFlrSF'] + hp_train['2ndFlrSF']","7b34c8be":"hp_train.head()","2ade7438":"categorical_features","01d85c6c":"\nnumerical_variabels = hp_train.select_dtypes(exclude=['object']).columns\nnumerical_variabels\nlen(numerical_variabels)","10abcbf2":"#Plotting box plot for all the numerical columns to check four outliers.\nfor i in numerical_variabels:\n    sns.boxplot(y=hp_train[i])\n    plt.show()","935ccfa5":"#Removing outliers in LotFrontage column\nQ3 = hp_train['LotFrontage'].quantile(0.75)\nQ1 = hp_train['LotFrontage'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[hp_train['LotFrontage']<Q3+1.25*IQR]\n\n","6229b612":"#Removing outliers in LotArea column\nQ3 = hp_train['LotArea'].quantile(0.75)\nQ1 = hp_train['LotArea'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[( hp_train['LotArea']>Q1-1.25*IQR) & ( hp_train['LotArea']<Q3+1.25*IQR)]\n\n","c5e9fb4c":"#Removing outliers in MasVnrArea column\nQ3 = hp_train['MasVnrArea'].quantile(0.75)\nQ1 = hp_train['MasVnrArea'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[hp_train['MasVnrArea']<Q3+1.25*IQR]\n\n","f7da5f32":"#Removing outliers in BsmtUnfSFe column\nQ3 = hp_train['BsmtUnfSF'].quantile(0.75)\nQ1 = hp_train['BsmtUnfSF'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[hp_train['BsmtUnfSF']<Q3+1.25*IQR]\n\n","64b8c7a3":"#Removing outliers in TotalBsmtSF column\nQ3 = hp_train['TotalBsmtSF'].quantile(0.75)\nQ1 = hp_train['TotalBsmtSF'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[(hp_train['TotalBsmtSF']>Q1-1.25*IQR) & (hp_train['TotalBsmtSF']<Q3+1.25*IQR)]\n\n","8f6b1385":"#Removing outliers in GrLivAreae column\nQ3 = hp_train['GrLivArea'].quantile(0.75)\nQ1 = hp_train['GrLivArea'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[hp_train['GrLivArea']<Q3+1.25*IQR]\n\n","351c39c8":"#Removing outliers in GarageAge_yearcolumn\nQ3 = hp_train['GarageAge_year'].quantile(0.75)\nQ1 = hp_train['GarageAge_year'].quantile(0.25)\nIQR = Q3-Q1\nhp_train = hp_train[hp_train['GarageAge_year']<Q3+1.25*IQR]\n\n","af8ef925":"#Removing outliers in WoodDeckSF column\nQ3 = hp_train['WoodDeckSF'].quantile(0.75)\nQ1 = hp_train['WoodDeckSF'].quantile(0.25)\nIQR = Q3-Q1\nhp_train= hp_train[hp_train['WoodDeckSF']<Q3+1.25*IQR]\n\n","ca1a010f":"#Removing outliers in GarageAge_year column\nQ3 = hp_train['GarageAge_year'].quantile(0.75)\nQ1 = hp_train['GarageAge_year'].quantile(0.25)\nIQR = Q3-Q1\nhp_train= hp_train[hp_train['GarageAge_year']<Q3+1.25*IQR]\n\n","65aa01ad":"hp_train.shape","31677930":"hp_train.head()","4e298442":"numerical_variabels","88aea9d8":"\n\n# cor = hp_train[numerical_variabels].corr()\n# cor\n# ","4290c82c":"# # heatmap\n# plt.figure(figsize=(30,40))\n# sns.heatmap(cor, cmap=\"YlGnBu\", annot=True)\n# plt.show()","a30a1462":"#Removing highly correlated variables from our dataset\nrem = ['BldgAge_year','RemodAge_year','GrLivArea','FullBath','GarageAge_year','GarageCars','BsmtUnfSF',\n       'TotalBsmtSF','BsmtFullBath','2ndFlrSF','BedroomAbvGr']\nhp_train.drop(columns = rem, inplace=True)","75793b30":"numerical_variabels = [i for i in numerical_variabels if i not in rem]\ncor = hp_train[numerical_variabels].corr()\n# print(cor)\n# heatmap\nplt.figure(figsize=(30,40))\nsns.heatmap(cor, cmap=\"YlGnBu\", annot=True,fmt=\".2f\")\nplt.show()\n","30bf492c":"#Plotting a histogram to check the distribution of SalePrice variable\nsns.distplot(hp_train['SalePrice'])","bc72fcfd":"for i in categorical_features:\n    plt.figure(figsize=(15,3))\n    sns.countplot(hp_train[i])\n    plt.show()","9287a94b":"hp_trained=pd.get_dummies(hp_train,drop_first=True)\nhp_trained.head()","3b2e0140":"hp_trained.shape","3461dce2":"\nX = hp_trained.drop(columns='SalePrice')\nnumerical_variabels.remove('SalePrice')\ny = hp_trained['SalePrice']","070e7761":"from sklearn.preprocessing import scale\n\n# storing column names in cols, since column names are (annoyingly) lost after \n# scaling (the df is converted to a numpy array)\nfor i in numerical_variabels:\n    X[i]= scale(X[i])","b2bd39d4":"X.head()","0cc1600d":"# #Importing VIF library\n# from statsmodels.stats.outliers_influence import variance_inflation_factor\n# while True:\n#     vif = pd.DataFrame()\n#     vif['Features'] = X.columns\n#     vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n#     vif['VIF'] = round(vif['VIF'], 2)\n#     vif = vif.sort_values(by = \"VIF\", ascending = False)\n#     if vif.iloc[0,1]>3:\n#         X.drop(columns=[vif.iloc[0,0]],inplace=True)\n#         continue\n#     else:\n#         break\n# vif","40886870":"\n# #Selecting the features which are remaining after removing all the variables which contributed to high multicollinearity.\n# X = X[vif['Features']]","18ddd216":"#Importing the train_test_split module\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7,test_size = 0.3, random_state=100)\n","c567be9d":"import xgboost","bf4c3cad":"# Xtrain = final_set[:1460]\n# yTrain = train_set[\"SalePrice\"]\nclassifier = xgboost.XGBRFRegressor()\nclassifier.fit(X_train,y_train)","c069c246":"y_pred = classifier.predict(X_train).tolist()","78d2415f":"y_pred[-1]","8c7ea8fc":"predictions = pd.DataFrame(y_pred)\ndatasets = pd.concat([hp_test[\"Id\"],predictions],axis=1)\ndatasets.columns = [\"Id\",\"SalePrice\"]\ndatasets.to_csv(\"submission.csv\",index=False)","ee5eeb79":"Defining the X and y variabels","66aff714":"numerical_columns_df.loc[numerical_columns_df['YrSold'] < numerical_columns_df['YearBuilt'],'YrSold' ] = 2009\nnumerical_columns_df['Age_House']= (numerical_columns_df['YrSold']-numerical_columns_df['YearBuilt'])","9c6940f8":"# Output","3cbf1c99":"Visualizing all the categorical variables","3c5b4591":"Outlier","297b0480":"TotalBsmtBath : Sum of : BsmtFullBath and 1\/2 BsmtHalfBath\n\nTotalBath : Sum of : FullBath and 1\/2 HalfBath\n\nTotalSA : Sum of : 1stFlrSF and 2ndFlrSF and basement area <\/font>","3e3a58b2":" Encoding","cdeaa8b1":"Creating dummy variables","bd04c821":"Like we see here tha the minimun is -1 ???\nIt is strange to find that the house was sold in 2007 before the YearRemodAdd 2009.\n\nSo we decide to change the year of sold to 2009","14852859":"MSZoning,LandContour,Condition1, RoofStyle,BsmtFinType2,HeatingQC,PavedDrive,Fence,YearRemodAdd","3b1954ab":"\nChecking to see if the dependent variable is normally distributed or not","5ab89e9c":"We shall now remove multicollinearity from our dataset. We would use Variable Inflation Factor and will remove all the variables whose VIF values are greater than 3"}}