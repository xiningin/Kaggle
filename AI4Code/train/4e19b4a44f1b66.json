{"cell_type":{"a6f6b667":"code","abbe40b4":"code","37158917":"code","28980a50":"code","f8c59772":"code","61ac969e":"code","848f56b5":"code","6bdfac50":"code","684a74d0":"code","83852eb6":"code","9020ec93":"code","fef1f276":"code","6a4f29c2":"code","87668677":"code","31da9000":"code","e0af576a":"code","c11b5b05":"code","b41833f1":"code","d8befd9a":"code","9e3a6805":"code","9529748f":"code","3b4a0f95":"code","1205e390":"code","efa03cb2":"code","459d1d0d":"code","bf9bf7be":"code","ea6695c8":"code","45ac83c6":"code","89f2e0bb":"code","237162b4":"code","6bd85b1a":"code","dd0bebc1":"code","5a799534":"code","66186c87":"code","f6d4d5e1":"code","4cf1a494":"code","546f01f6":"code","2cb027c9":"code","185dc53f":"code","9e95553e":"code","308cd074":"code","31b2a999":"code","2089b18e":"code","5cd9c860":"code","dda315f9":"code","7bb6f06c":"code","0ab5b3a0":"code","e29f18cb":"code","6df3c5e3":"code","3e16ca20":"code","4768844b":"code","4ab25d10":"code","f3d8243a":"code","62e8aa56":"code","d89b0256":"code","452cb7bb":"markdown","2236f895":"markdown","7b3ce895":"markdown"},"source":{"a6f6b667":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.impute import SimpleImputer","abbe40b4":"data = pd.read_csv('..\/input\/heart.csv')","37158917":"data.isnull().any().any()\n","28980a50":"len(data.columns)","f8c59772":"for i in data.columns:\n    data[i]=data[i].replace(\"?\",np.nan)\n    data[i]=data[i].astype(float)","61ac969e":"data.columns","848f56b5":"#It's a clean, easy to understand set of data. However, the meaning of some of the column headers are not obvious. Here's what they mean,\n\n#age: The person's age in years\n#sex: The person's sex (1 = male, 0 = female)\n#cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n#trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n#chol: The person's cholesterol measurement in mg\/dl\n#fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n#restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n#thalach: The person's maximum heart rate achieved\n#exang: Exercise induced angina (1 = yes; 0 = no)\n#oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n#slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n#ca: The number of major vessels (0-3)\n#thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n#target: Heart disease (0 = no, 1 = yes)","6bdfac50":"data = data.rename(columns={'cp':'Chest Pain' , 'trestbps':'BP','chol':'cholestoral','fbs':'fasting blood sugar','restecg':'Resting ECG','thalach':'Max Hear Rate','exang':'exercise induced angina','thal':'Thalassemia','num       ':'object'})\ndata","684a74d0":"data.count()","83852eb6":"for i in data.columns:\n    if data[i].count() <  200:\n        del data[i]\n        ","9020ec93":"data.count()","fef1f276":"data.dtypes","6a4f29c2":"data","87668677":"imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')","31da9000":"imp_mean.fit(data)","e0af576a":"data = pd.DataFrame(imp_mean.transform(data), columns=data.columns)","c11b5b05":"data = data.astype(int)","b41833f1":"data","d8befd9a":"plt.figure(figsize=(20,10))\nfor i in data.columns:\n    plt.hist(data[i] , label=i )\n    plt.legend(loc='upper right') ","9e3a6805":"plt.figure(figsize=(20,10))\nplt.hist(data[\"Chest Pain\"], label=[\"1.TypicalAngina \\n2.AtypicalAngina  \\n3.Non-AnginalPain  \\n4.asymptomatic\"])\nplt.legend(loc='upper left')","9529748f":"CPmale = data[[\"Chest Pain\"]].where(data[\"sex\"]==1).dropna()\nCPfemale = data[[\"Chest Pain\"]].where(data[\"sex\"]==0).dropna()\nplt.hist([CPmale[\"Chest Pain\"],CPfemale[\"Chest Pain\"]])\n","3b4a0f95":"plt.hist(data[\"exercise induced angina\"])","1205e390":"MaleHeartRate = data[[\"Max Hear Rate\"]].where(data[\"sex\"]==1)\nFemaleHeartRate = data[[\"Max Hear Rate\"]].where(data[\"sex\"]==0)\nplt.hist([MaleHeartRate[\"Max Hear Rate\"],FemaleHeartRate[\"Max Hear Rate\"]])","efa03cb2":"MaleFrame =( data.where(data.sex==1).dropna())","459d1d0d":"MaleFrame","bf9bf7be":"MaleAgeAngina = MaleFrame[[\"age\"]].where(data[\"exercise induced angina\"]==1)\nplt.hist(MaleAgeAngina[\"age\"])","ea6695c8":"plt.hist(data.where(data.BP > 120)[\"sex\"])","45ac83c6":"patient = (data.where(data[\"target\"] == 1)).dropna()\nMalePatient = (patient.where(patient[\"sex\"]==1)).dropna()\nFemalePatient = (patient.where(patient[\"sex\"]==0)).dropna()","89f2e0bb":"plt.hist(data.where((data[\"fasting blood sugar\"] == 1) & (data[\"target\"] == 1) )[\"sex\"])","237162b4":"MaleBP_Patient = MalePatient.where(MalePatient.BP >120).dropna()\nMaleBP_Patient.BP.count()\nprint(\"All men patient having low BP :\", (MalePatient.BP.count() - MaleBP_Patient.BP.count()), \" and all men patient having high BP :\",MaleBP_Patient.BP.count())","6bd85b1a":"MaleCholestoral_Patient = MalePatient.where(MalePatient.cholestoral >200).dropna()\nMaleBP_Patient.cholestoral.count()\nprint(\"All men patient having low Cholestoral :\", (MalePatient.cholestoral.count() - MaleCholestoral_Patient.cholestoral.count()), \" and all men patient having high Cholestoral :\",MaleCholestoral_Patient.cholestoral.count())","dd0bebc1":"plt.hist(MalePatient['Chest Pain'] , label =\" 1.Typical angina \\n 2.Atypical angina \\n 3.Non-anginal pain \\n 4.Asymptomatic \")\nplt.legend()","5a799534":"MaleTAngina_Patient = MalePatient.where(MalePatient[\"Chest Pain\"] == 1).dropna()\nprint(\"All men patient having no Typical Angina :\", (MalePatient.BP.count() - MaleTAngina_Patient[\"Chest Pain\"].count()), \" and all men patient having Typical Angina :\",MaleTAngina_Patient[\"Chest Pain\"].count())","66186c87":"MaleATAngina_Patient = MalePatient.where(MalePatient[\"Chest Pain\"] == 2).dropna()\nprint(\"All men patient having no ATypical Angina :\", (MalePatient.BP.count() - MaleATAngina_Patient[\"Chest Pain\"].count()), \" and all men patient having ATypical Angina :\",MaleATAngina_Patient[\"Chest Pain\"].count())","f6d4d5e1":"MaleNAngina_Patient = MalePatient.where(MalePatient[\"Chest Pain\"] == 3).dropna()\nprint(\"All men patient having no Non-Angina Pain :\", (MalePatient.BP.count() - MaleNAngina_Patient[\"Chest Pain\"].count()), \" and all men patient having Non-Angina Pain :\",MaleNAngina_Patient[\"Chest Pain\"].count())","4cf1a494":"MaleAsymptomaticPatient = MalePatient.where(MalePatient[\"Chest Pain\"] == 4).dropna()\nprint(\"All men patient having no Asymptomatic Pain :\", (MalePatient.BP.count() - MaleAsymptomaticPatient[\"Chest Pain\"].count()), \" and all men patient having Asymptomatic Pain :\",MaleAsymptomaticPatient[\"Chest Pain\"].count())","546f01f6":"MaleFastingBloodSugar = MalePatient.where(MalePatient[\"fasting blood sugar\"] == 1).dropna()\nprint(\"All men patient having no fasting blood sugar :\", (MalePatient[\"fasting blood sugar\"].count() - MaleFastingBloodSugar[\"fasting blood sugar\"].count()), \" and all men patient having fasting blood sugar:\",MaleFastingBloodSugar[\"fasting blood sugar\"].count())","2cb027c9":"FemaleBP_Patient = FemalePatient.where(FemalePatient.BP >120).dropna()\nprint(\"All Women patient having low BP :\",( (FemalePatient.BP.count() - FemaleBP_Patient.BP.count())), \" and all women patient having high BP :\",FemaleBP_Patient.BP.count())","185dc53f":"FemaleBP_Patient = FemalePatient.where(FemalePatient.cholestoral >200).dropna()\nprint(\"All Women patient having low Cholestoral :\",( (FemalePatient.cholestoral.count() - FemaleBP_Patient.cholestoral.count())), \" and all women patient having high Cholestoral :\",FemaleBP_Patient.cholestoral.count())","9e95553e":"FemaleTAngina_Patient = FemalePatient.where(FemalePatient[\"Chest Pain\"] == 1).dropna()\nprint(\"All Women patient having no Typical Angina :\", (FemalePatient[\"Chest Pain\"].count() - FemaleTAngina_Patient[\"Chest Pain\"].count()), \" and all Women patient having Typical Angina :\",FemaleTAngina_Patient[\"Chest Pain\"].count())","308cd074":"FemaleATAngina_Patient = FemalePatient.where(FemalePatient[\"Chest Pain\"] == 2).dropna()\nprint(\"All Women patient having no ATypical Angina :\", (FemalePatient[\"Chest Pain\"].count() - FemaleATAngina_Patient[\"Chest Pain\"].count()), \" and all Women patient having ATypical Angina :\",FemaleATAngina_Patient[\"Chest Pain\"].count())","31b2a999":"FemaleATAngina_Patient = FemalePatient.where(FemalePatient[\"Chest Pain\"] == 3).dropna()\nprint(\"All Women patient having Non-Angina Pain :\", (FemalePatient[\"Chest Pain\"].count() - FemaleATAngina_Patient[\"Chest Pain\"].count()), \" and all Women patient having ATypical Angina :\",FemaleATAngina_Patient[\"Chest Pain\"].count())","2089b18e":"FemaleAsymptomaticPatient = FemalePatient.where(MalePatient[\"Chest Pain\"] == 4).dropna()\nprint(\"All men patient having no Asymptomatic Pain :\", (MalePatient.BP.count() - MaleAsymptomaticPatient[\"Chest Pain\"].count()), \" and all men patient having Asymptomatic Pain :\",MaleAsymptomaticPatient[\"Chest Pain\"].count())","5cd9c860":"plt.hist(FemalePatient['Chest Pain'] , label =\" 1.Typical angina \\n 2.Atypical angina \\n 3.Non-anginal pain \\n 4.Asymptomatic \")\nplt.legend()","dda315f9":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import svm, datasets\nfrom sklearn.model_selection import KFold","7bb6f06c":"X = data.drop('target', axis=1)\nX.head()\nX.index","0ab5b3a0":"y = data.target\ny.head()","e29f18cb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\nlen(X_train),len(y_train)","6df3c5e3":"clf = GaussianNB().fit(X_train,y_train)","3e16ca20":"predicted = clf.predict(X_test)","4768844b":"acc=sum(predicted==y_test)\/len(y_test)*100\nprint(acc)","4ab25d10":"neigh = KNeighborsClassifier(n_neighbors=13 )\nneigh.fit(X_train, y_train)\nKNNpredicted = neigh.predict(X_test)\nacc=sum(KNNpredicted==y_test)\/len(y_test)*100\nprint(acc)","f3d8243a":"svc = svm.SVC(kernel='linear').fit(X_train, y_train)\npred_target=svc.predict(X_test)\nacc=sum(pred_target==y_test)\/len(y_test)*100\nprint(acc)\n","62e8aa56":"predicted = {}\nkey =0\npredicted[1]=[]\npredicted[2]=[]\npredicted[3]=[]\nkfold = KFold(3,True,1)\nfor train, test in kfold.split(X):\n    X_train, X_test = X.iloc[train], X.iloc[test]\n    y_train, y_test = y[train], y[test]\n    for k in range(1,20,2):    \n        neigh = KNeighborsClassifier(n_neighbors=k )\n        neigh.fit(X_train, y_train)\n        KNNpredicted = neigh.predict(X_test)\n        acc=sum(KNNpredicted==y_test)\/len(y_test)*100\n        key = key+1 if k==1 else key\n        predicted[key].append(  acc )","d89b0256":"X = list(range(1,20,2))\nplt.figure(figsize=(20,5))\nplt.plot(X,predicted[1],label =\"Fold 1\")\nplt.plot(X,predicted[2],label =\"Fold 2\")\nplt.plot(X,predicted[3],label =\"Fold 3\")\nplt.legend(loc=\"upper left\")","452cb7bb":"# Applying Models","2236f895":"# MALE PATIENT","7b3ce895":"# working for Female"}}