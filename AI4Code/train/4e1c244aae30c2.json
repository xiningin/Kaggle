{"cell_type":{"f9d55b23":"code","81292d72":"code","4b43ad34":"code","8652e23b":"code","dfbf7972":"code","1ec610a1":"code","0e8a2065":"code","c8ba649f":"code","1adf809b":"code","a47ade9e":"code","892a8d32":"code","fb0b0872":"code","0a8f7fe3":"code","2c03a27b":"code","b7835233":"code","f3ff8e39":"code","ad234007":"code","639c7979":"code","f6123ee2":"code","31fb8a9f":"code","d8c7578c":"code","f5689307":"code","dc7d4eaf":"code","b289175b":"code","83882076":"code","258ae1d7":"code","4519cc60":"code","42e7d531":"code","750d3e0a":"code","62f202f1":"code","fcfaa51b":"code","06e07022":"code","b169ef05":"code","0868efdb":"code","a0623a9f":"code","4669e36b":"code","35cef06d":"code","e12d8dc4":"code","f6d9e2a6":"code","7fe32896":"code","3e2e02d3":"code","bbd7faa5":"code","57e15039":"code","a730fefc":"code","b11b30df":"code","686534cb":"code","1ee5c938":"code","fd30fce9":"markdown","21f03e12":"markdown","1b96fc8e":"markdown","94f2b0be":"markdown"},"source":{"f9d55b23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81292d72":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport sklearn\nimport seaborn as sns","4b43ad34":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ngen= pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest1_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df=test1_df.copy()","8652e23b":"df.head()","dfbf7972":"df.shape","1ec610a1":"test_df.head()","0e8a2065":"sns.heatmap(test_df.isnull(), cbar=False)\ndf.isnull().sum()","c8ba649f":"gen.head()","1adf809b":"sns.heatmap(df.isnull(), cbar=False)\ndf.isnull().sum()","a47ade9e":"df.info()","892a8d32":"df[\"Cabin\"]","fb0b0872":"df.drop('PassengerId',axis=1,inplace=True)\ndf.drop('Name',axis=1,inplace=True)\ndf.drop('Cabin',axis=1,inplace=True)\ndf.drop('Age', axis=1,inplace=True )\ndf.drop('Ticket', axis=1,inplace=True )\ndf.dropna(subset=['Embarked'],inplace=True )\ndf.head()","0a8f7fe3":"sns.heatmap(df.isnull(), cbar=False)\ndf.isnull().sum()","2c03a27b":"df.nunique()","b7835233":"df_num=df.select_dtypes(exclude=[\"object_\"])\ndf_num.head()","f3ff8e39":"df_cat=df.select_dtypes(include=[\"object_\"])\ndf_cat.head()","ad234007":"corr_df=df.corr()\ncorr_df","639c7979":"df_num.hist()","f6123ee2":"for a in df_num.columns:\n    sns.countplot(x='Survived', hue=a, data=df_num)\n    plt.show(block='False')  \n        ","31fb8a9f":"f=pd.melt(df,value_vars=sorted(df_cat))\ng=sns.FacetGrid(f,col='variable', col_wrap=4, sharex=False, sharey=False)\nplt.xticks(rotation=\"vertical\")\ng=g.map(sns.countplot,'value')\n[plt.setp(ax.get_xticklabels(), rotation=60) for ax in g.axes.flat]\ng.fig.tight_layout()\nplt.show()","d8c7578c":"sns.countplot(x='Survived', hue=\"Sex\", data=df)\nplt.show(block='False')  ","f5689307":"sns.countplot(x='Survived', hue=\"Embarked\", data=df)\nplt.show(block='False')  ","dc7d4eaf":"y=df[\"Survived\"]\ny.shape","b289175b":"df.head()","83882076":"from sklearn import preprocessing\nlabel_encoder=preprocessing.LabelEncoder()\n\ndf['Sex']=label_encoder.fit_transform(df['Sex'])\ndf['Embarked']=label_encoder.fit_transform(df['Embarked'])\ndf.head()","258ae1d7":"x=df.loc[:, df.columns!='Survived']\nx.head()","4519cc60":"#Standardising the data\n\nscaler=preprocessing.StandardScaler()\nx=scaler.fit_transform(x)\nx","42e7d531":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.base import clone\n\nskfolds=StratifiedKFold(n_splits=10, random_state=42)\n\n#Gradient Boost Classifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\ngb_clf=GradientBoostingClassifier(random_state=41)\n\nclone_clf=clone(gb_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for GBC\", n_correct\/len(y_pred))","750d3e0a":"from sklearn.svm import SVC\nsvc_clf=SVC(random_state=42)\n\nclone_clf=clone(svc_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for SVM\", n_correct\/len(y_pred))","62f202f1":"from sklearn.ensemble import RandomForestClassifier\nrfc_clf=RandomForestClassifier(random_state=42)\n\nclone_clf=clone(rfc_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for RandomForestClassifier\", n_correct\/len(y_pred))","fcfaa51b":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf=KNeighborsClassifier()\n\nclone_clf=clone(knn_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for KNeighborsClassifierr\", n_correct\/len(y_pred))","06e07022":"from sklearn.tree import DecisionTreeClassifier\n\ndtc_clf=DecisionTreeClassifier(random_state=42)\n\nclone_clf=clone(dtc_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for DecisionTreeClassifier\", n_correct\/len(y_pred))","b169ef05":"from sklearn.linear_model import LogisticRegression\n\nlr_clf=LogisticRegression(random_state=42)\n\nclone_clf=clone(lr_clf)\n\nclone_clf.fit(x,y)\ny_pred=clone_clf.predict(x)\nn_correct=sum(y_pred==y)\nprint(\"Result for LogisticRegression\", n_correct\/len(y_pred))","0868efdb":"from sklearn.model_selection import cross_val_predict\ny_pred=cross_val_predict(rfc_clf,x,y,cv=10)\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y,y_pred)\n\n","a0623a9f":"from sklearn.metrics import precision_score, recall_score\n\nprint(\"Precision\",precision_score(y,y_pred))\nprint(\"recall\",recall_score(y,y_pred))","4669e36b":"y_scores=cross_val_predict(gb_clf,x,y,cv=10, method=\"decision_function\")\n\nfrom sklearn.metrics import precision_recall_curve\nprecisions, recalls, thresholds=precision_recall_curve(y,y_scores)","35cef06d":"#Precision recall curve\n\ndef plot_curve(precisions, recalls, thresholds):\n    plt.plot(thresholds,precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds,recalls[:-1], \"b--\", label=\"Recall\")\n    plt.xlabel(\"Threshold\")\n    plt.legend(loc=\"upper left\")\n    plot.ylim([0,1])\n\nplot_curve(precisions, recalls, thresholds)\nplt.show()\n\n","e12d8dc4":"plt.plot(precisions, recalls)\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")","f6d9e2a6":"y_new_scores=(y_scores>-0.5)\nprint(\"New Precision:\", precision_score(y,y_new_scores))\nprint(\"New Recall:\", recall_score(y,y_new_scores))","7fe32896":"from sklearn.metrics import roc_curve\nfpr,tpr, thresholds=roc_curve(y,y_scores)\n\ndef plot_roc(fpr,tpr, label=None):\n    plt.plot(fpr,tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1],\"k--\")\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive rate\")\n    plt.ylabel(\"true Positive rate\")\n\nplot_roc(fpr,tpr, label=None)\nplt.show()","3e2e02d3":"test_df.head()","bbd7faa5":"test_df.drop('PassengerId',axis=1,inplace=True)\ntest_df.drop('Name',axis=1,inplace=True)\ntest_df.drop('Cabin',axis=1,inplace=True)\ntest_df.drop('Age', axis=1,inplace=True )\ntest_df.drop('Ticket', axis=1,inplace=True )\ntest_df.dropna(subset=['Embarked'],inplace=True )\ntest_df.head()","57e15039":"from sklearn import preprocessing\nlabel_encoder=preprocessing.LabelEncoder()\n\ntest_df['Sex']=label_encoder.fit_transform(test_df['Sex'])\ntest_df['Embarked']=label_encoder.fit_transform(test_df['Embarked'])\ntest_df.head()\n\n","a730fefc":"sns.heatmap(df.isnull(), cbar=False)\ntest_df.isnull().sum()","b11b30df":"test_df.dropna(subset=[\"Fare\"], inplace=True)","686534cb":"test1_df.dropna(subset=[\"Fare\"], inplace=True)","1ee5c938":"\n\nfrom sklearn.ensemble import RandomForestClassifier\nrfc_clf=RandomForestClassifier(random_state=42)\n\nclone_clf=clone(rfc_clf)\n\nclone_clf.fit(x,y)\npredictions = clone_clf.predict(test_df)\n\noutput = pd.DataFrame({'PassengerId': test1_df.PassengerId, 'Survived': predictions})\noutput.to_csv('RANDOM_final.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fd30fce9":"sns.countplot(x='Survived', hue=\"Ticket\", data=df)\nplt.show(block='False')  ","21f03e12":"sns.countplot(x='Survived', hue=\"Cabin\", data=df)\nplt.show(block='False')  ","1b96fc8e":"Drop the name and passenger id, Cabin","94f2b0be":"DATA CLEANING"}}