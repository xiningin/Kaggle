{"cell_type":{"f6c0b874":"code","c9d89c24":"code","ae299b9d":"code","bccb1358":"code","899c782b":"code","ec0b6480":"code","25869b1b":"code","75d832b0":"code","f8c792a9":"code","d9179e53":"code","a55518a0":"code","1caeb84b":"code","6edbac7d":"code","1e3e7f57":"code","ac9385de":"code","af9fe410":"code","4a85640b":"code","ab479f2e":"code","016f22b1":"code","048aa795":"code","a98058e0":"code","1e08506f":"code","9fc03ca4":"code","2cdacb62":"code","e299d432":"code","8b1a4924":"code","7c54857c":"code","8ebb4ace":"code","708e4ef4":"code","38f46312":"code","079a9f7d":"code","a2df3824":"code","aafef995":"code","6b837a44":"code","c4919ce7":"code","2f694a9e":"code","ab68a553":"code","c752bbc6":"code","5972a3be":"code","e6ecf610":"code","e6328968":"code","7a6c3463":"code","b0aece04":"code","bdce6b42":"code","2868d6fc":"code","350dba19":"code","504b69ce":"code","84366cca":"code","7579606f":"code","64f83f69":"code","07bed336":"code","9d51db97":"code","fcd54162":"code","e8a37e99":"code","80976234":"code","22ba46a7":"markdown","009061aa":"markdown","ef8ef86b":"markdown","be830aa1":"markdown","8819ac92":"markdown","d7382315":"markdown","c456756e":"markdown","08710fce":"markdown"},"source":{"f6c0b874":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9d89c24":"import warnings\nimport itertools\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nfrom pylab import rcParams\nrcParams['figure.figsize']=16,8","ae299b9d":"time_series1=pd.read_csv('..\/input\/tmtotalsales\/Time_series1.csv')","bccb1358":"time_series=pd.read_csv('..\/input\/timeseries\/timeseries.csv')","899c782b":"time_series1.head()","ec0b6480":"time_series.head(3)","25869b1b":"# Changing date column to datetime\ntime_series['date']=pd.to_datetime(time_series['date'])","75d832b0":"# set date as an index\ntime_series=time_series.set_index('date')","f8c792a9":"# Making monthly revenue series\nmonthly_series= time_series.total_revenue.resample('M').sum()\nmonthly_series","d9179e53":"monthly_series.plot(figsize=(8,4))","a55518a0":"components = sm.tsa.seasonal_decompose(monthly_series)","1caeb84b":"components.plot()","6edbac7d":"trend=components.trend\ntrend","1e3e7f57":"sesonality=components.seasonal\nsesonality","ac9385de":"remainder= components.resid\nremainder","af9fe410":"## We can check the stability by checking the rolling mean, if the rolling mean is stable the data is stable\nmonthly_series.plot()\nmonthly_series.rolling(window=12).mean().plot()\nmonthly_series.rolling(window=12).std().plot()","4a85640b":"ad_fuller_test=sm.tsa.stattools.adfuller(monthly_series,autolag='AIC')\nad_fuller_test","ab479f2e":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","016f22b1":"plot_acf(monthly_series)","048aa795":"#plot_pacf(monthly_series,lags='12')","a98058e0":"model_ma= sm.tsa.statespace.SARIMAX(monthly_series, order=(0,0,1))\nresults_ma= model_ma.fit()\nresults_ma.aic","1e08506f":"model_AR= sm.tsa.statespace.SARIMAX(monthly_series, order=(1,0,0))\nresults_AR= model_AR.fit()\nresults_AR.aic","9fc03ca4":"model_ARma= sm.tsa.statespace.SARIMAX(monthly_series, order=(1,0,1))\nresults_ARma= model_ARma.fit()\nresults_ARma.aic","2cdacb62":"model_ARIma= sm.tsa.statespace.SARIMAX(monthly_series, order=(1,1,1))\nresults_ARIma= model_ARIma.fit()\nresults_ARIma.aic","e299d432":"results_ARIma.plot_diagnostics(figsize=(15,12))","8b1a4924":"P=D=Q=p=d=q= range(0,3)\nS = 12\ncombinations = list(itertools.product(p,d,q,P,D,Q))","7c54857c":"arima_orders = [(x[0],x[1],x[2]) for x in combinations]\narima_orders","8ebb4ace":"seasonal_orders = [(x[3],x[4],x[5],S) for x in combinations]\nseasonal_orders","708e4ef4":"# creating an empty df to store results\nresults_data= pd.DataFrame(columns=['p','d','q','P','D','Q','AIC'])","38f46312":"# Length of combiantions\nlen(combinations)","079a9f7d":"for i in range(len(combinations)):\n    try:\n        model = sm.tsa.statespace.SARIMAX(monthly_series, order=arima_orders[i],\n                                      seasonal_order=seasonal_orders[i])\n        result = model.fit()\n        results_data.loc[i,'p']=arima_orders[i][0]\n        results_data.loc[i,'d']=arima_orders[i][1]\n        results_data.loc[i,'q']=arima_orders[i][2]\n        results_data.loc[i,'P']=seasonal_orders[i][0]\n        results_data.loc[i,'D']=seasonal_orders[i][1]\n        results_data.loc[i,'Q']=seasonal_orders[i][2]\n        results_data.loc[i,'AIC']=result.aic\n    except:\n        continue","a2df3824":"results_data[results_data.AIC== min(results_data.AIC)]","aafef995":"best_model = sm.tsa.statespace.SARIMAX(monthly_series, order=(0,1,0),\n                                       seasonal_order=(0,2,0,12))","6b837a44":"results=best_model.fit()\nfitting=results.get_prediction(start='2009-12-31')\nfitting_mean=fitting.predicted_mean","c4919ce7":"fitting_mean.plot()\nmonthly_series.plot()","2f694a9e":"forecast=results.get_forecast(steps=12)\nforecast_mean=forecast.predicted_mean","ab68a553":"fitting_mean.plot(label='Fitting')\nmonthly_series.plot(label='Actual')\nforecast_mean.plot(label='Forecast')\nplt.legend(loc='upper left')","c752bbc6":"# Measuring the accuracy\nmean_abs_error= abs(monthly_series-fitting_mean).mean()\nmean_abs_error","5972a3be":"model_ARIma= sm.tsa.statespace.SARIMAX(monthly_series, order=(1,1,1))\nresults_ARIma= model_ARIma.fit()\nresults_ARIma.aic","e6ecf610":"fitting = results_ARIma.get_prediction(start='2009-12-31')\nfitting_mean= fitting.predicted_mean","e6328968":"mean_abs_error_arima = abs(monthly_series-fitting_mean).mean()\nmean_abs_error_arima","7a6c3463":"import statsmodels as stm\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing","b0aece04":"model_expo1= stm.tsa.holtwinters.ExponentialSmoothing(monthly_series,trend='add',\n                                                     seasonal='add',seasonal_periods=12)\n\nmodel_expo2= stm.tsa.holtwinters.ExponentialSmoothing(monthly_series,trend='mul',\n                                                     seasonal='add',seasonal_periods=12)\n\nmodel_expo3= stm.tsa.holtwinters.ExponentialSmoothing(monthly_series,trend='add',\n                                                     seasonal='mul',seasonal_periods=12)\n\nmodel_expo4= stm.tsa.holtwinters.ExponentialSmoothing(monthly_series,trend='mul',\n                                                     seasonal='mul',seasonal_periods=12)","bdce6b42":"# Get the results\n\nresults_1= model_expo1.fit()\nresults_2= model_expo2.fit()\nresults_3= model_expo3.fit()\nresults_4= model_expo4.fit()","2868d6fc":"# Cheking the summary of all results and comparing them\nresults_1.summary()","350dba19":"results_2.summary()","504b69ce":"results_3.summary()","84366cca":"results_4.summary()","7579606f":"# Fitting the model to check which gives us the least mean abs error\n\nfit_1 = model_expo1.fit().predict(0,len(monthly_series))\nfit_2 = model_expo2.fit().predict(0,len(monthly_series))\nfit_3 = model_expo3.fit().predict(0,len(monthly_series))\nfit_4 = model_expo4.fit().predict(0,len(monthly_series))","64f83f69":"## Calculate the mean abs error (MAE)\n\nMAE_1 = abs(monthly_series-fit_1).mean()\nMAE_1","07bed336":"MAE_2 = abs(monthly_series-fit_2).mean()\nMAE_2","9d51db97":"MAE_3 = abs(monthly_series-fit_3).mean()\nMAE_3","fcd54162":"MAE_4 = abs(monthly_series-fit_4).mean()\nMAE_4","e8a37e99":"forecast = model_expo2.fit().predict(0,len(monthly_series)+12)","80976234":"# Plotting the forecast\n\nmonthly_series.plot(label='Actual')\nforecast.plot(label='Forecast')\nplt.legend(loc='upper left')","22ba46a7":"## Conclusion: Based on above results Exponential Smoothing is best suited for the UK retail store forecast than ARIMA model.","009061aa":"### Based on the above plot, we can say that the time-series data is stationary; however we can consolidate this inference by using Augmented Dickey-Fuller test.","ef8ef86b":"## Model 2 gives us the least MAE @ 32689, therefore we'll use this model to forecast","be830aa1":"## Exponential Smoothing","8819ac92":"## Getting the Trend,Seasonality & Residulas component","d7382315":"## Augmented Dickey-Fuller test","c456756e":"#### Conclusion- Based on the critical p-value of 0.011 which is less than 0.05, we can conclude that the time-series doen not have a unit root i.e it's stationary, and does not have a time-dependent structure.","08710fce":"## All four result summary show almost the same AIC, BIC and AICC with sight variation"}}