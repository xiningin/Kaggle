{"cell_type":{"25e921c9":"code","4e009884":"code","bf65320a":"code","0894cd22":"code","3f2336b6":"code","1b7fa8f4":"code","e246e467":"code","609dabdb":"code","9db2a48e":"code","8e53d686":"code","be76bc7d":"code","cd8fa270":"code","67a4868c":"code","2163dd44":"code","9a02adec":"code","3d657726":"code","e88189ec":"code","46fb31f2":"code","94d5849e":"code","f7deefee":"code","4cd17cba":"code","e3200fc3":"code","49973202":"code","ceeda790":"code","749fdbc6":"code","4f7f8a95":"code","4f4ea977":"markdown","34cac107":"markdown","61571334":"markdown","656568d2":"markdown","236d4497":"markdown","f1f4335f":"markdown","c1c6e106":"markdown"},"source":{"25e921c9":"import numpy as np \nimport pandas as pd \nimport os\nimport xgboost\nimport seaborn as sns\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","4e009884":"DF = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nTest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","bf65320a":"DF.head(5)","0894cd22":"#Plotting the distribution of sales Price\nplt.figure(figsize=(20,5))\nsns.distplot(DF.SalePrice, color=\"tomato\")\nplt.title(\"Target distribution in train\")\nplt.ylabel(\"Density\");","3f2336b6":"# Visualize the correlation between the number of missing values in different columns of dataset as a heatmap \nmsno.heatmap(DF)","1b7fa8f4":"# correlation heatmap\nplt.figure(figsize=(10,8))\ncor = DF.corr()\nsns.heatmap(cor, annot=False, cmap=plt.cm.Reds)\nplt.show()","e246e467":"#Plotting the correlation values with the sales price \nDF.corrwith(DF.SalePrice).plot.bar(\n                                    figsize = (20, 10), title = \"Correlation with class\", fontsize = 15,\n                                     rot = 90, grid = True)","609dabdb":"plt.figure(figsize=[20,10])\nplt.subplot(331)\nsns.distplot(DF['LotFrontage'].dropna().values)\nplt.subplot(332)\nsns.distplot(DF['GarageYrBlt'].dropna().values)\nplt.subplot(333)\nsns.distplot(DF['MasVnrArea'].dropna().values)\nplt.suptitle(\"Distribution of data before Filling NA'S\")","9db2a48e":"DF['LotFrontage']=DF.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\nDF['GarageYrBlt']=DF.groupby('Neighborhood')['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))\nDF['MasVnrArea']=DF.groupby('Neighborhood')['MasVnrArea'].transform(lambda x: x.fillna(x.median()))","8e53d686":"Test['LotFrontage']=Test.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\nTest['GarageYrBlt']=Test.groupby('Neighborhood')['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))\nTest['MasVnrArea']=Test.groupby('Neighborhood')['MasVnrArea'].transform(lambda x: x.fillna(x.median()))","be76bc7d":"DF['cond*qual'] = (DF['OverallCond'] * DF['OverallQual']) \/ 100.0\nDF['home_age_when_sold'] = DF['YrSold'] - DF['YearBuilt']\nDF['garage_age_when_sold'] = DF['YrSold'] - DF['GarageYrBlt']\nDF['TotalSF'] = DF['TotalBsmtSF'] + DF['1stFlrSF'] + DF['2ndFlrSF'] \nDF['total_porch_area'] = DF['WoodDeckSF'] + DF['OpenPorchSF'] + DF['EnclosedPorch'] + DF['3SsnPorch'] + DF['ScreenPorch'] \nDF['Totalsqrfootage'] = (DF['BsmtFinSF1'] + DF['BsmtFinSF2'] + DF['1stFlrSF'] + DF['2ndFlrSF'])\nDF['Total_Bathrooms'] = (DF['FullBath'] + (0.5 * DF['HalfBath']) + DF['BsmtFullBath'] + (0.5 * DF['BsmtHalfBath']))","cd8fa270":"Test['cond*qual'] = (Test['OverallCond'] * Test['OverallQual']) \/ 100.0\nTest['home_age_when_sold'] = Test['YrSold'] - Test['YearBuilt']\nTest['garage_age_when_sold'] = Test['YrSold'] - Test['GarageYrBlt']\nTest['TotalSF'] = Test['TotalBsmtSF'] + Test['1stFlrSF'] + Test['2ndFlrSF'] \nTest['total_porch_area'] = Test['WoodDeckSF'] + Test['OpenPorchSF'] + Test['EnclosedPorch'] + Test['3SsnPorch'] + Test['ScreenPorch'] \nTest['Totalsqrfootage'] = (Test['BsmtFinSF1'] + Test['BsmtFinSF2'] + Test['1stFlrSF'] + Test['2ndFlrSF'])\nTest['Total_Bathrooms'] = (Test['FullBath'] + (0.5 * Test['HalfBath']) + Test['BsmtFullBath'] + (0.5 * Test['BsmtHalfBath']))","67a4868c":"Old_Cols=['OverallCond','OverallQual','YrSold','YearBuilt','YrSold','GarageYrBlt','TotalBsmtSF','1stFlrSF','2ndFlrSF','WoodDeckSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','BsmtFinSF1','BsmtFinSF2','1stFlrSF','2ndFlrSF','FullBath','HalfBath','BsmtFullBath','BsmtHalfBath']","2163dd44":"Final_cols=[]\nfor i in DF.columns:\n    if i not in Old_Cols and i!='SalePrice':\n        Final_cols.append(i)\nPF=DF[Final_cols]","9a02adec":"Final_cols=[]\nfor i in Test.columns:\n    if i not in Old_Cols and i!='SalePrice':\n        Final_cols.append(i)\nTF=Test[Final_cols]","3d657726":"PF.columns","e88189ec":"#price range correlation\ncorr=DF.corr()\ncorr=corr.sort_values(by=[\"SalePrice\"],ascending=False).iloc[0].sort_values(ascending=False)\nplt.figure(figsize=(15,20))\nsns.barplot(x=corr.values, y =corr.index.values);\nplt.title(\"Correlation Plot\")","46fb31f2":"y = DF.SalePrice","94d5849e":"X_train, X_test, y_train, y_test = train_test_split(PF, y, test_size=0.3)","f7deefee":"def Change(x):\n    for col in x.select_dtypes(include=['object']).columns:\n               x[col] = x[col].astype('category')\n    for col in x.select_dtypes(include=['category']).columns: \n               x[col] = x[col].cat.codes\n    return x  ","4cd17cba":"X_train = Change(X_train)\nX_test = Change(X_test)","e3200fc3":"model = XGBRegressor(colsample_bytree=1,\n                 gamma=0.5,                 \n                 learning_rate=0.005,\n                 max_depth=9,\n                 min_child_weight=1.5,\n                 n_estimators=5000,                                                                    \n                 reg_alpha=0.4,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42) ","49973202":"model.fit(X_train, y_train)\nmodel.score(X_test,y_test)*100","ceeda790":"feature_importance = model.feature_importances_\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nsorted_idx = np.argsort(feature_importance)\nsorted_idx = sorted_idx[len(feature_importance) - 50:]\npos = np.arange(sorted_idx.shape[0]) + .5\n\nplt.figure(figsize=(10,12))\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nplt.yticks(pos, X_train.columns[sorted_idx])\nplt.xlabel('Relative Importance')\nplt.title('Variable Importance')\nplt.show()","749fdbc6":"SalePrice = pd.DataFrame(model.predict(Change(TF)))\nId = pd.DataFrame(TF.Id)\nresult = pd.concat([Id, SalePrice], axis=1)\nresult.columns = ['Id', 'SalePrice']","4f7f8a95":"result.to_csv('submission.csv',index=False)","4f4ea977":"** Let's Build Our XGBoost Model **","34cac107":"Let's delete the features used in making the new features. They're not useful anymore.","61571334":"If you think, you can modify this kernel to achieve a better score than you're welcome to do so. But please comment the approch in the commenting session.","656568d2":"Now apply the same in Test dataset","236d4497":"Now we'll made some new features that sounds obvious but not so certain at first. When we actually look for a house, we keep all these features mentioned below in our mind. Some wise person went through all these details in the discussion. Let's apply them here.","f1f4335f":"** Again let's check the correlation in our new features. **","c1c6e106":"**Impute Missing Values**\n\nAs we can see in LotFrontage plot the distribution is approimately Noraml. So we can use either mean or mode to replace the missing values.\nIn GarageYrBlt plot the distribution is skewed and median is favourable to impute the missing values in this case.\nAnd in final MasVnrArea distribution which is also skewed, we'll use median to impute missing values. "}}