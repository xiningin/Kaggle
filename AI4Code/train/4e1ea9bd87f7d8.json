{"cell_type":{"48c9e256":"code","c022c4bc":"code","10ff74ea":"code","60735ba5":"code","aed952f1":"code","b3b95e9b":"code","3f1aaa28":"code","2d9ae12f":"code","f7358355":"code","1788c943":"code","eada8c81":"code","296b073b":"code","28c8e841":"code","40917ca9":"code","381722bc":"code","acaabf29":"code","ff08c993":"code","9de02187":"code","1c1a4396":"code","fe68d45b":"code","ed6a66f5":"code","066c3ee9":"code","f9580280":"code","0829b175":"code","9ba3c24d":"code","9f1df9c4":"code","02ae03d3":"code","bdacdd5a":"code","fdd9ff3d":"code","99917811":"code","baf65778":"code","551757c8":"code","0e5d25f9":"code","cc5a7c4e":"code","58139e45":"code","fd4312c8":"code","858d316a":"code","8dd93f3f":"code","f1e12874":"code","258d322c":"code","19a9a240":"code","59c206c0":"code","52b29829":"code","1c4445e9":"code","b0a8f215":"code","c5f74397":"code","5497754f":"code","5c20bbf4":"code","3457572a":"code","31726574":"code","312041c6":"code","a3656a83":"code","d56858b5":"code","5640c5f3":"code","2a63c430":"code","31313301":"code","fbf1604e":"code","afcde4a5":"code","73a157cc":"code","a7c6544f":"code","f3324ba3":"code","5719676b":"code","bacb5528":"code","1d5d4da2":"code","47233f86":"code","86b96996":"code","bfb3e1e3":"code","dff89017":"code","df7cf8f9":"code","71e2d3bc":"code","488de76e":"code","bad9e712":"code","920bb585":"code","8a437e33":"code","e20fdbca":"markdown","df7eacff":"markdown","abb79e0d":"markdown","97be316e":"markdown","5fc936b4":"markdown","67ce8be0":"markdown","f1a15f60":"markdown","21f993d8":"markdown","acbbdc06":"markdown","2a8153d8":"markdown","1b2afe17":"markdown","1c828f34":"markdown","266a5c64":"markdown","4f4593f8":"markdown","f6f7c1da":"markdown","c4eae3f3":"markdown","b180af35":"markdown","3925fcfe":"markdown"},"source":{"48c9e256":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import KFold\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);  # to display all columns and rows\npd.set_option('display.float_format', lambda x: '%.2f' % x) # The number of numbers that will be shown after the comma.\n","c022c4bc":"#Reading the dataset\ndf = pd.read_csv(\"..\/input\/diabetes-data-set\/diabetes.csv\")","10ff74ea":"df.shape","60735ba5":"df.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","aed952f1":"df[\"Outcome\"].value_counts()*100\/len(df)","b3b95e9b":"df.Outcome.value_counts()","3f1aaa28":"df[\"Age\"].hist(edgecolor = \"black\");","2d9ae12f":"df.isnull().sum()","f7358355":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0, np.NaN)","1788c943":"df.isnull().sum()","eada8c81":"import missingno as msno\nmsno.bar(df);","296b073b":"def carp(x,y):\n    \n    z = x*y\n    \n    return z\n","28c8e841":"carp(4,5)","40917ca9":"# The missing values will be filled with the median values of each variable.\n\ndef median_target(var):   \n    \n    temp = df[df[var].notnull()]\n    \n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index()\n    \n    return temp","381722bc":"columns = df.columns\n\ncolumns = columns.drop(\"Outcome\")","acaabf29":"columns","ff08c993":"median_target('Glucose')","9de02187":"# The values to be given for incomplete observations are given the median value of people who are not sick and the median values of people who are sick.\n\ncolumns = df.columns\n\ncolumns = columns.drop(\"Outcome\")\n\nfor col in columns:\n    \n    df.loc[(df['Outcome'] == 0 ) & (df[col].isnull()), col] = median_target(col)[col][0]\n    df.loc[(df['Outcome'] == 1 ) & (df[col].isnull()), col] = median_target(col)[col][1]","1c1a4396":"df.loc[(df['Outcome'] == 0 ) & (df[\"Pregnancies\"].isnull()), \"Pregnancies\"]","fe68d45b":"df[(df['Outcome'] == 0 ) & (df[\"BloodPressure\"].isnull())]","ed6a66f5":"Q1 = df[\"BloodPressure\"].quantile(0.25)\nQ3 = df[\"BloodPressure\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR","066c3ee9":"lower","f9580280":"upper","0829b175":"df[(df[\"BloodPressure\"] > upper)].any(axis=None)","9ba3c24d":"for feature in df:\n    print(feature)","9f1df9c4":"for feature in df:\n    \n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3 - Q1\n    lower = Q1 - 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","02ae03d3":"df.head()","bdacdd5a":"df.shape","fdd9ff3d":"# According to BMI, some ranges were determined and categorical variables were assigned.\nNewBMI = pd.Series([\"Underweight\", \"Normal\", \"Overweight\", \"Obesity 1\", \"Obesity 2\", \"Obesity 3\"], dtype = \"category\")\n\ndf[\"NewBMI\"] = NewBMI\n\ndf.loc[df[\"BMI\"] < 18.5, \"NewBMI\"] = NewBMI[0]\n\ndf.loc[(df[\"BMI\"] > 18.5) & (df[\"BMI\"] <= 24.9), \"NewBMI\"] = NewBMI[1]\ndf.loc[(df[\"BMI\"] > 24.9) & (df[\"BMI\"] <= 29.9), \"NewBMI\"] = NewBMI[2]\ndf.loc[(df[\"BMI\"] > 29.9) & (df[\"BMI\"] <= 34.9), \"NewBMI\"] = NewBMI[3]\ndf.loc[(df[\"BMI\"] > 34.9) & (df[\"BMI\"] <= 39.9), \"NewBMI\"] = NewBMI[4]\ndf.loc[df[\"BMI\"] > 39.9 ,\"NewBMI\"] = NewBMI[5]","99917811":"df.head()","baf65778":"def set_insulin(row):\n    if row[\"Insulin\"] >= 16 and row[\"Insulin\"] <= 166:\n        return \"Normal\"\n    else:\n        return \"Abnormal\"     ","551757c8":"df.head()","0e5d25f9":"df[\"NewInsulinScore\"] = df.apply(set_insulin, axis=1)","cc5a7c4e":"df.head()","58139e45":"#df.drop(\"NewInsulinScore\", inplace = True, axis = 1)\n#df.head()","fd4312c8":"# Some intervals were determined according to the glucose variable and these were assigned categorical variables.\nNewGlucose = pd.Series([\"Low\", \"Normal\", \"Overweight\", \"Secret\", \"High\"], dtype = \"category\")\n\ndf[\"NewGlucose\"] = NewGlucose\n\ndf.loc[df[\"Glucose\"] <= 70, \"NewGlucose\"] = NewGlucose[0]\n\ndf.loc[(df[\"Glucose\"] > 70) & (df[\"Glucose\"] <= 99), \"NewGlucose\"] = NewGlucose[1]\n\ndf.loc[(df[\"Glucose\"] > 99) & (df[\"Glucose\"] <= 126), \"NewGlucose\"] = NewGlucose[2]\n\ndf.loc[df[\"Glucose\"] > 126 ,\"NewGlucose\"] = NewGlucose[3]","858d316a":"df.head()","8dd93f3f":"df = pd.get_dummies(df, columns =[\"NewBMI\",\"NewInsulinScore\", \"NewGlucose\"], drop_first = True)","f1e12874":"df.head()","258d322c":"categorical_df = df[['NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret']]","19a9a240":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\",'NewBMI_Obesity 1','NewBMI_Obesity 2', 'NewBMI_Obesity 3', 'NewBMI_Overweight','NewBMI_Underweight',\n                     'NewInsulinScore_Normal','NewGlucose_Low','NewGlucose_Normal', 'NewGlucose_Overweight', 'NewGlucose_Secret'], axis = 1)\ncols = X.columns\nindex = X.index","59c206c0":"y.head()","52b29829":"X.head()","1c4445e9":"cols","b0a8f215":"index","c5f74397":"from sklearn.preprocessing import RobustScaler\ntransformer = RobustScaler().fit(X)\nX = transformer.transform(X)\nX = pd.DataFrame(X, columns = cols, index = index)","5497754f":"X.head()","5c20bbf4":"X = pd.concat([X, categorical_df], axis = 1)","3457572a":"X.head()","31726574":"models = []\nmodels.append(('LR', LogisticRegression(random_state = 12345)))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier(random_state = 12345)))\nmodels.append(('RF', RandomForestClassifier(random_state = 12345)))\nmodels.append(('SVM', SVC(gamma='auto', random_state = 12345)))\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345)))\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models:\n    \n        kfold = KFold(n_splits = 10, random_state = 12345)\n        \n        cv_results = cross_val_score(model, X, y, cv = 10, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n        \n# boxplot algorithm comparison\nfig = plt.figure(figsize=(15,10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()\n\n","312041c6":"rf_params = {\"n_estimators\" :[100,200,500,1000], \n             \"max_features\": [3,5,7], \n             \"min_samples_split\": [2,5,10,30],\n            \"max_depth\": [3,5,8,None]}\n\n","a3656a83":"rf_model = RandomForestClassifier(random_state = 12345)","d56858b5":"gs_cv = GridSearchCV(rf_model, \n                    rf_params,\n                    cv = 10,\n                    n_jobs = -1,\n                    verbose = 2).fit(X, y)\n","5640c5f3":"gs_cv.best_params_","2a63c430":"rf_tuned = RandomForestClassifier(**gs_cv.best_params_)","31313301":"rf_tuned = rf_tuned.fit(X,y)","fbf1604e":"cross_val_score(rf_tuned, X, y, cv = 10).mean()","afcde4a5":"feature_imp = pd.Series(rf_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","73a157cc":"lgbm = LGBMClassifier(random_state = 12345)","a7c6544f":"lgbm_params = {\"learning_rate\": [0.01, 0.03, 0.05, 0.1, 0.5],\n              \"n_estimators\": [500, 1000, 1500],\n              \"max_depth\":[3,5,8]}\n","f3324ba3":"gs_cv = GridSearchCV(lgbm, \n                     lgbm_params, \n                     cv = 10, \n                     n_jobs = -1, \n                     verbose = 2).fit(X, y)","5719676b":"gs_cv.best_params_","bacb5528":"lgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X,y)","1d5d4da2":"cross_val_score(lgbm_tuned, X, y, cv = 10).mean()","47233f86":"feature_imp = pd.Series(lgbm_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","86b96996":"xgb = GradientBoostingClassifier(random_state = 12345)","bfb3e1e3":"xgb_params = {\n    \"learning_rate\": [0.01, 0.1, 0.2, 1],\n    \"min_samples_split\": np.linspace(0.1, 0.5, 10),\n    \"max_depth\":[3,5,8],\n    \"subsample\":[0.5, 0.9, 1.0],\n    \"n_estimators\": [100,1000]}","dff89017":"xgb_cv_model  = GridSearchCV(xgb,xgb_params, cv = 10, n_jobs = -1, verbose = 2).fit(X, y)","df7cf8f9":"xgb_cv_model.best_params_","71e2d3bc":"xgb_tuned = GradientBoostingClassifier(**xgb_cv_model.best_params_).fit(X,y)","488de76e":"cross_val_score(xgb_tuned, X, y, cv = 10).mean()","bad9e712":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('Significance Score Of Variables')\nplt.ylabel('Variables')\nplt.title(\"Variable Severity Levels\")\nplt.show()","920bb585":"models = []\n\nmodels.append(('RF', RandomForestClassifier(random_state = 12345, max_depth = 8, max_features = 7, min_samples_split = 2, n_estimators = 500)))\nmodels.append(('XGB', GradientBoostingClassifier(random_state = 12345, learning_rate = 0.1, max_depth = 5, min_samples_split = 0.1, n_estimators = 100, subsample = 1.0)))\nmodels.append((\"LightGBM\", LGBMClassifier(random_state = 12345, learning_rate = 0.01,  max_depth = 3, n_estimators = 1000)))\n\n# evaluate each model in turn\nresults = []\nnames = []","8a437e33":"for name, model in models:\n    \n        kfold = KFold(n_splits = 10, random_state = 12345)\n        cv_results = cross_val_score(model, X, y, cv = 10, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n        \n# boxplot algorithm comparison\nfig = plt.figure(figsize=(15,10))\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","e20fdbca":"### 9.3. XGBoost Model Tuning","df7eacff":"### 9.1.1. RF Final Model","abb79e0d":"## 3. Missing Value Analysis","97be316e":"## 7. Feature Standartization","5fc936b4":"## 8. Model","67ce8be0":"### 9.1. Random Forests Tuning","f1a15f60":"## 6. One-hot Encoding","21f993d8":"### 9.2.1 LightGBM Final Model","acbbdc06":"## 9. Model Optimizasyonu (Model Tunning)","2a8153d8":"## 4. Outliers Analysis","1b2afe17":"### 9.2. LightGBM Model Tuning","1c828f34":"## 5. Feature Engineering","266a5c64":"## 10. Comparison of Final Models","4f4593f8":"## 2. EDA (Exploratory of Data Analysis)\n### 2.1. Data Preperation","f6f7c1da":"### 9.3.1. XGBoost Final Model","c4eae3f3":"## 1. Installing","b180af35":"## Diabets \n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective is to predict based on diagnostic measurements whether a patient has diabetes.\n\n\n### Content\n\nSeveral constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n- Pregnancies: Number of times pregnant \n- Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test \n- BloodPressure: Diastolic blood pressure (mm Hg) \n- SkinThickness: Triceps skin fold thickness (mm) \n- Insulin: 2-Hour serum insulin (mu U\/ml) \n- BMI: Body mass index (weight in kg\/(height in m)^2) \n- DiabetesPedigreeFunction: Diabetes pedigree function \n- Age: Age (years) \n- Outcome: Class variable (0 or 1)\n\n\n#### Relevant Information:\n      Several constraints were placed on the selection of these instances from\n      a larger database.  In particular, all patients here are females at\n      least 21 years old of Pima Indian heritage.  ADAP is an adaptive learning\n      routine that generates and executes digital analogs of perceptron-like\n      devices.  It is a unique algorithm; see the paper for details.\n\n#### Number of Instances: 768\n\n#### Number of Attributes: 8 plus class \n\n#### For Each Attribute: (all numeric-valued)\n   1. Number of times pregnant\n   2. Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n   3. Diastolic blood pressure (mm Hg)\n   4. Triceps skin fold thickness (mm)\n   5. 2-Hour serum insulin (mu U\/ml)\n   6. Body mass index (weight in kg\/(height in m)^2)\n   7. Diabetes pedigree function\n   8. Age (years)\n   9. Class variable (0 or 1)\n\n#### Missing Attribute Values: Yes\n\n#### Class Distribution: (class value 1 is interpreted as \"tested positive for\n   diabetes\")\n","3925fcfe":"## 11. Conclusion\n\nThe aim of this study was to create classification models for the diabetes data set and to predict whether a person is sick by establishing models and to obtain maximum validation scores in the established models. The work done is as follows:\n\n1) Diabetes Data Set read.\n\n2) With Exploratory Data Analysis; The data set's structural data were checked.\nThe types of variables in the dataset were examined. Size information of the dataset was accessed. The 0 values in the data set are missing values. Primarily these 0 values were replaced with NaN values. Descriptive statistics of the data set were examined.\n\n3) Data Preprocessing section;\ndf for: The NaN values missing observations were filled with the median values of whether each variable was sick or not. The outliers were determined by LOF and dropped. The X variables were standardized with the rubost method..\n\n4) During Model Building;\nLogistic Regression, KNN, SVM, CART, Random Forests, XGBoost, LightGBM like using machine learning models Cross Validation Score were calculated. Later Random Forests, XGBoost, LightGBM hyperparameter optimizations optimized to increase Cross Validation value.\n\n5) Result;\nThe model created as a result of LightBM hyperparameter optimization became the model with the highest Cross Validation Score value. (0.89)\n\n\n\nNote:\n\n* After this notebook, my aim is to prepare 'kernel' which is 'not clear' data set.\n\n* If you have any suggestions, please could you write for me? I wil be happy for comment and critics!\n\n* Thank you for your suggestion and votes ;)"}}