{"cell_type":{"7b99a5b3":"code","6deab8f3":"code","ac3ca78d":"code","524b115b":"code","1db4441c":"code","0eaf1848":"code","9fded8b6":"code","b6571980":"code","ddac8084":"code","d58a0aaf":"code","7e7376c2":"code","85cc686c":"code","8a1e0d4c":"code","5f1955d0":"code","d1b3f9af":"code","9356ae76":"code","0aeef7a0":"code","c7119f81":"code","e7480915":"code","5060f461":"code","9f20ec99":"code","8c75ad20":"code","8a765a51":"code","c8a8ed85":"code","d69be8fd":"code","32bc7425":"code","a029b551":"code","455d3969":"code","8ee00555":"code","7e61158c":"code","c197a904":"code","d57c0cc4":"code","190e1f2a":"code","fbc91575":"code","940598ee":"code","b2aa17ee":"code","e380bb92":"code","a3529087":"markdown","1ffdbfda":"markdown","c4016c67":"markdown","0a06101c":"markdown","f4af8e60":"markdown","87f2d93a":"markdown","51a92342":"markdown","54f2bbcf":"markdown","fecaffca":"markdown","f0cb2684":"markdown","2c18e81d":"markdown","0bf7a153":"markdown","fa82f14d":"markdown","b01a7e20":"markdown","4975a901":"markdown","2b03473c":"markdown","40035d5e":"markdown","21c5c09e":"markdown","658f580d":"markdown","3ce0d770":"markdown","ec367757":"markdown","9ab2c5f0":"markdown"},"source":{"7b99a5b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pandas_profiling\n\n#Plotly Libraris\n\n# Run the below code if PLOTLY is not installed\n#!pip install plotly\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\n#Run the below code in anaconda promt for pandas-profiling to work\n#conda install -c conda-forge pandas-profiling\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6deab8f3":"data = pd.read_csv(\"\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\ndata.drop(\"sl_no\", axis=1, inplace=True)\nprint(data.shape)\ndata.head()","ac3ca78d":"data.info()","524b115b":"data.describe()","1db4441c":"data.describe(include=\"O\") #O -> include categorical columns","0eaf1848":"data.nunique()","9fded8b6":"data.isna().sum()","b6571980":"# Salary has missing values. Lets replace that with '0' as the status of all Salary='Null' is 'Not Placed'\n# We cannot drop the values as the dataset is small and also it might give valueable information as to why the student did not get place\n\nprint(round(data['salary'].isnull().sum()\/len(data['salary'])*100,2),\"% of data in Salary column is NULL!\")","ddac8084":"data['salary'] = data['salary'].fillna(value=0)","d58a0aaf":"from pandas_profiling import ProfileReport\n\nProfileReport(data)","7e7376c2":"print(\"Salary Distribution as per gender\")\n\nplt.figure(figsize=(15,5))\nsns.kdeplot(data.salary[ data.gender == \"M\"])\nsns.kdeplot(data.salary[ data.gender == \"F\"])\nplt.legend([\"Male\", \"Female\"])\nplt.xlabel(\"Salary(100)\")\nplt.show()","85cc686c":"print(\"Placement vs Marks at differnt education level\")\n\nf, axes = plt.subplots(2, 2, figsize=(15, 10), sharex=False, squeeze = True)\n#sns.despine(left=True)\n\nsns.kdeplot(data.ssc_p[ data.status== \"Placed\"], ax=axes[0, 0])\nsns.kdeplot(data.ssc_p[ data.status== \"Not Placed\"], ax=axes[0, 0])\nplt.xlabel(\"10th Marks\")\n\n\nsns.kdeplot(data.hsc_p[ data.status== \"Placed\"], ax=axes[0, 1])\nsns.kdeplot(data.hsc_p[ data.status== \"Not Placed\"], ax=axes[0, 1])\nplt.xlabel(\"12th Marks\")\n\nsns.kdeplot(data.degree_p[ data.status== \"Placed\"], ax=axes[1, 0])\nsns.kdeplot(data.degree_p[ data.status== \"Not Placed\"], ax=axes[1, 0])\nplt.xlabel(\"Degree_Marks\")\n\nsns.kdeplot(data.mba_p[ data.status== \"Placed\"], ax=axes[1, 1])\nsns.kdeplot(data.mba_p[ data.status== \"Not Placed\"], ax=axes[1, 1])\nplt.legend([\"Placed\", \"Not Placed\"])\nplt.xlabel(\"MBA_Marks\")\n\nplt.setp(axes, yticks=[])\nplt.tight_layout()","8a1e0d4c":"fig = px.bar(data, x=\"gender\", y=\"salary\",color=\"gender\",facet_row=\"workex\", facet_col=\"specialisation\")\nfig.update_layout(title_text='Facet view of Student Salary wrt Gender, Specialization in Higher education and previous work experience')\nfig.show()","5f1955d0":"fig = px.scatter(data,x=\"mba_p\",y=\"salary\",color=\"specialisation\", facet_row='gender', facet_col=\"workex\")\nfig.update_layout(title_text='Facet view of Student Salary wrt Gender, MBA%, HighEd Specialization and previous work experience')\nfig.show()","d1b3f9af":"status = data['status'].value_counts().to_frame().reset_index().rename(columns={'index':'Status','status':'Count'})\nstatus","9356ae76":"fig = go.Figure([go.Pie(labels = status['Status'], values = status['Count'], hole=0.6)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=15,insidetextorientation='radial')\nfig.update_layout(title=\"Placement staus\",title_x=0.5)\nfig.show()","0aeef7a0":"sunburst = data[['gender','status','specialisation','salary','degree_t']].groupby(['gender','status','specialisation','salary','degree_t']).agg('max').reset_index()\n","c7119f81":"fig = px.sunburst(sunburst, path=['gender','status','specialisation','degree_t'], values='salary')\nfig.update_layout(title=\"Salary Distribution by Gender, Placement Status, HigherEd Specialization, Degree Subject\",title_x=0.5)\nfig.show()","e7480915":"print(\"Tabuler Format - Job offers as per SSC & HSC\")\nTable_10_12 = pd.DataFrame(data.groupby([\"ssc_b\", \"hsc_b\", \"hsc_s\"])[\"status\"].count()).style.background_gradient(cmap=\"bone_r\")\nTable_10_12","5060f461":"print(\"Tabuler Format - Job offers as per Degree, Work Experience & MBA Specialsation\")\nTable_deg_workex_mba = pd.DataFrame(data.groupby([\"degree_t\", \"workex\", \"specialisation\"])[\"status\"].count()).style.background_gradient(cmap=\"bone_r\")\nTable_deg_workex_mba","9f20ec99":"### Placed --> 1, Not Placed --> 0\n## Splitting dataset into X dataset (Predictor variables) & Y dataset (Target variable):\ndata['status'] = np.where(data['status'] == \"Placed\", 1,0)\nX = data.drop('status', axis=1)\nY = data['status']","8c75ad20":"# X dataset - creating dummies\nX = pd.get_dummies(X)\nprint(\"The Dimension of X (Predictor Dataset):\",X.shape)\nprint(\"The Dimension of Y (Target Dataset):\",Y.shape)\nX.head()","8a765a51":"from sklearn.preprocessing import MinMaxScaler\nscale = MinMaxScaler()\nscaled = scale.fit_transform(X)\nX = pd.DataFrame(scaled,columns = X.columns)\nX.head()","c8a8ed85":"# Split x and y into training and testing set (70%-30% ratio and a random state of 200)\n\nimport sklearn.model_selection as ms\nx_train, x_test, y_train, y_test= ms.train_test_split(X,Y, test_size=0.3, random_state=200)","d69be8fd":"print(\"X-Train :\", x_train.shape)\nprint(\"Y-Train :\", y_train.shape)  # Labels of training dataset\nprint(\"X-Test  :\", x_test.shape)\nprint(\"Y-Test  :\", y_test.shape)   # Labels of testing dataset","32bc7425":"from sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.metrics import f1_score ,confusion_matrix\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport sklearn.metrics as metrics","a029b551":"#Using Random Forest Algorithm\nRF = RandomForestClassifier(n_estimators=100)\nRF.fit(x_train, y_train)\ny_pred = RF.predict(x_test)","455d3969":"print(\"Random Forest Model Results:\\n\")\nprint(\"Accuracy Score:\", round(accuracy_score(y_test, y_pred),2)*100,\"%\")\nprint(\"***************************************************\\n\")\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))\nprint(\"***************************************************\\n\")\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"***************************************************\")","8ee00555":"CM = pd.DataFrame(confusion_matrix(y_test, y_pred))\n\nsns.heatmap(CM, annot=True, annot_kws={\"size\": 15}, cmap=\"cividis_r\", linewidths=0.9)\nplt.title('Confusion matrix for RF', y=1.1, fontdict = {'fontsize': 20})\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","7e61158c":"## ROC curve for RF:\nfpr, tpr, _ = metrics.roc_curve(y_test, y_pred)\nauc = metrics.roc_auc_score(y_test, y_pred)\n\nplt.figure(figsize=(10,5))\nplt.style.use('seaborn')\nplt.plot(fpr,tpr,label=\"AUC =\"+str(auc))\nplt.plot([0,1],[0,1],\"r--\")\nplt.title(\"ROC for RF model\", fontdict = {'fontsize': 20})\nplt.xlabel(\"True positive_rate\")\nplt.ylabel(\"False positive_rate\")\nplt.legend(loc= 4, fontsize = \"x-large\")","c197a904":"# Feature Selection\nprint(\"**Dataframe showing Feature Importance in descending order**\")\nbest_features = pd.DataFrame({'Features': x_train.columns, 'Importance':RF.feature_importances_})\nbest_features.sort_values('Importance', ascending=False)","d57c0cc4":"from sklearn.neighbors import KNeighborsClassifier","190e1f2a":"## Getting values of k\nerror_rate=[]\nfor i in range(1,20):\n    knn= KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train, y_train)\n    y_pred_kn= knn.predict(x_test)\n    error_rate.append(np.mean(y_pred_kn != y_test))  \n    \n## Plotting values of k\n\nplt.figure(figsize=(15,5))\nplt.style.use('seaborn')\nplt.plot(range(1,20), error_rate, marker ='o', label= \"k-value\", linestyle=\"dashed\" )\nplt.title(label= \"Error rate of all the values of K\", fontdict = {'fontsize': 20})\nplt.legend(fontsize = \"xx-large\")\nplt.show()","fbc91575":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train,y_train)\ny_pred_kn = knn.predict(x_test)","940598ee":"print(\"KNN Model Results:\\n\")\nprint(\"Accuracy Score:\", round(accuracy_score(y_test, y_pred_kn),4)*100,\"%\")\nprint(\"***************************************************\\n\")\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred_kn))\nprint(\"***************************************************\\n\")\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_kn))\nprint(\"***************************************************\")","b2aa17ee":"CM_knn = pd.DataFrame(confusion_matrix(y_test, y_pred_kn))\n\nsns.heatmap(CM_knn, annot=True, annot_kws={\"size\": 15}, cmap=\"cividis_r\", linewidths=0.9)\nplt.title('Confusion matrix for KNN', y=1.1, fontdict = {'fontsize': 20})\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","e380bb92":"## ROC curve for KNN:\nfpr1, tpr1, _ = metrics.roc_curve(y_test, y_pred_kn)\nauc1 = metrics.roc_auc_score(y_test, y_pred_kn)\n\nplt.figure(figsize=(10,5))\nplt.style.use('seaborn')\nplt.plot(fpr1, tpr1, label=\"AUC =\"+str(auc1))\nplt.plot([0,1],[0,1],\"r--\")\nplt.title(\"ROC for KNN model\", fontdict = {'fontsize': 20})\nplt.xlabel(\"True positive_rate\")\nplt.ylabel(\"False positive_rate\")\nplt.legend(loc= 4, fontsize = \"x-large\")","a3529087":"### Missing Value Treatment","1ffdbfda":"### Observation\n- Maximum salary offered in 3lakh package\n- More job offers are in Marketting in Finance.\n- Students with work experience get good offers.\n* Male\n    - Specialzation in Marketting & Finance, irrespctive of work experience they got more job offers with greater CTC.\n    - Specialzation in Marketting & HR, they got CTC as per previous work experience.\n* Female\n    - Specialzation in Marketting & Finance, they got lesser CTC wrt to male students.\n    - Specialzation in Marketting & HR, very less students have work experience.","c4016c67":"### Observation:\n- Errors are least at k=5 as after 5, the errors are increasing","0a06101c":"___","f4af8e60":"___","87f2d93a":"### Splitting dataset into train & test:","51a92342":"### Observation for KNN Prediction Model:\n* KNN is an average model as the accuracy is 76.92% and AUC is 68.2%","54f2bbcf":"### Observation:\n- Male students got offered more salary than Female students\n- More of male students were placed while more female students were not placed.","fecaffca":"### * For the below graphs Python Plotly is used","f0cb2684":"# **Loading data**","2c18e81d":"### Observation:\n* SSC\n    - Students with good average marks were offered more jobs than top rankers\n    - Students scoring less than 50% are not getting job oppurtunities\n* HSC\n    - Students getting less than 50% are not selected\n    - Students with average score have more chances of getting job offers\n* Degree\n    - Average students have more chances of getting job offers\n    - No student with less than 50% got job offers\n* MBA\n    - Students with 70% score have got more job offers.","0bf7a153":"---","fa82f14d":"# Exploratory Data Analysis\n### Interactive report","b01a7e20":"### Prediction Model - K- Nearest Neighbour(KNN)","4975a901":"### Multivariate Analysis\n- Seaborn Library","2b03473c":"## Feature Selection\n\n* Random Forest is a good algorithm for feature selection","40035d5e":"___","21c5c09e":"___","658f580d":"# Summary:\n* Educational percentage are statistically significant for a candidate to get campus placement.\n* Students with good average marks throughout their educational period had more chances to get job offers.\n* Past workexperince helps in getting better jobs after Masters final placement.\n* No gender discrimination while hiring.\n* Getter packages where provided to Male Candidates.\n* There is significant spike in Male students as we go towards higher education.\n* Students with Marketting and Finance Specialsation with previous work exp got the highest CTC.","3ce0d770":"### Splitting dataset into Predictor and Target Dataset:","ec367757":"### Observation for RandomForest Prediction Model: \n- Since accuracy and AUD of Random Forest Model is 100%, there is a chance of overfitting. Hence it might not be a good prediction model \n- Also as per feature importance, almost all the variables are good fit for prediction model.","9ab2c5f0":"### Scaling X dataset"}}