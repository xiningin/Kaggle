{"cell_type":{"0caeec1f":"code","8146a822":"code","5483df0d":"code","46ee4a48":"code","3cf10142":"code","f203ab96":"code","c34cde93":"code","b81bab25":"code","38130d7e":"code","a2ebde9d":"code","f8e86c96":"code","4240eafe":"code","d81e710b":"code","b870d2dd":"code","95e16002":"markdown","5a7f9ba7":"markdown","f7695b67":"markdown","7d764bdc":"markdown","5afa802d":"markdown","7b4a54a3":"markdown","4610848f":"markdown","8c1a49ba":"markdown","45c39338":"markdown","2b93262f":"markdown","09f9cf2a":"markdown","399c4613":"markdown","ffb4ad17":"markdown","23c78f6c":"markdown","875fabfb":"markdown","6f635816":"markdown"},"source":{"0caeec1f":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np","8146a822":"#Creating a Series\ns = pd.Series([12,-4,7,9])\nprint(s)\n# By default pandas will create a level from 0\n# This can be changed\ns = pd.Series([12,-4,7,9], index=['a','b','c','d'])\n# Accessing the index and value of a series\ns.values\ns.index","5483df0d":"# Selecting element of a series\ns[2] #can be done by positional index\n# Can be done by label as well\ns['b']\n# Multiple Elements can also be selected from continious position\ns[0:2]\n# Multiple Elements can also be selected from discontinious position\nz=np.array([1,3])\ns[z]\ns[['a','c']]","46ee4a48":"s[1] = 5\nprint(s)\ns[s > 8]\ns==5\ns[s==5]","3cf10142":"s \/ 2\nnp.log(s)","f203ab96":"# Taking look at values\nserd = pd.Series([1,0,2,1,2,3], index=['white','white','blue','green','green','yellow'])\nserd.unique()\nserd.value_counts()\n# isin( ) is a function that evaluates the membership, that is, given a list of values, this function\n#lets you know if these values are contained within the data structure.\nserd.isin([0,3])","c34cde93":"# Some members can be Null or Not a number\ns2 = pd.Series([5,-3,np.NaN,14])\ns2.isnull()\ns2.notnull()\ns2[s2.notnull()]","b81bab25":"# Series as Dictionaries\nmydict = {'red': 2000, 'blue': 1000, 'yellow': 500, 'orange': 1000}\nmyseries = pd.Series(mydict)","38130d7e":"# The DataFrame is a tabular data structure very similar to the Spreadsheet\ndata = {'color' : ['blue','green','yellow','red','white'],\n'object' : ['ball','pen','pencil','paper','mug'],\n'price' : [1.2,1.0,0.6,0.9,1.7]}\ndf = pd.DataFrame(data)\ndf","a2ebde9d":"# Selecting Rows and Columns\ndf[1:2]\ndf['price']\n# Selecting third and fifth row\ndf.iloc[[2,4]]\n# Selecting third and fifth row, second and third column\ndf.iloc[[2,4],[1,2]]\n","f8e86c96":"df['new']=[12,13,14,14,16]\ndf\n# Deleting column\ndf.drop(['object'],axis=1)","4240eafe":"# reading from file\ndf = pd.read_csv('..\/input\/btissue\/btissue.csv')\n# read_csv('ch05_02.csv',skiprows=[2],nrows=3,header=None)\n# Similarly read_excel, read_json, read_html etc. is available\n# Read_table can be used with text files and separators can be user defined\n# Examine first few rows\ndf.head(3)\n# Check the name of the columns\nprint(df.columns)\nprint(df.shape)\nprint(df.dtypes)\nprint(df.info)\n","d81e710b":"# Getting the values of IO when class = car\ndf['I0'][df['class']=='car']\n\ndf.iloc[:,[1,2]][df['class']=='car']\n# Getting the vale of IO when class = car\ndf['I0'][df['class']=='car'].mean()\n\n","b870d2dd":"\nframe1 = pd.DataFrame( {'id':['ball','pencil','pen','mug','ashtray'],'price': [12.33,11.44,33.21,13.23,33.62]})\nframe2 = pd.DataFrame( {'id':['pencil','pencil','ball','pen'],'color': ['white','red','red','black']})\npd.merge(frame1,frame2)\n# As the name of the column on the basis of which the merging will happen has same names, it doe snot\n# need to be specified, otherwise it can be added with the ON parameter\npd.merge(frame1,frame2,on='id')\n# by default merge is inner join, if we need to add other joins we can specify the 'how' parameter\n\n# Assignment create two dataframe one has studendid and marks and another has student id and phone number\n# The first dataframe will have values like s1,s2,s3 and 75,78,82 the second dataframe\n# will have values like s1,s2,s3 and phone number like 9998764523 etc, Merge them","95e16002":"* The Series is the object of the pandas library designed to represent one-dimensional data structures\n* There is a value and an index\n* By default integer index is assumed, index value can be supplied too","5a7f9ba7":"**Creating a data frame**","f7695b67":"**Accessing single or multiple element from **","7d764bdc":"**Operations and Mathematical functions**","5afa802d":"* Pandas is an open source Python library for highly specialized data analysis\n* This library has been designed and developed primarily by Wes McKinney starting in 2008; later, in2012, Sien Chang, one of his colleagues, was added to the development\n* main purpose processing of data, data extraction, and data manipulation\n* The heart of pandas is just the two primary data structures Series and Data Frame","7b4a54a3":"**Adding and Removing columns**\n* Axis = 0 is rows and Axis = 1 for columns","4610848f":"**Members with Null Value**","8c1a49ba":"** Reading a dataframe from a file **","45c39338":"* Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n* Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.","2b93262f":"**Assigning and Filtering Values**","09f9cf2a":"![image.png](attachment:image.png)","399c4613":"**Filtering a data frame and summary functions**","ffb4ad17":"**Accessing a data frame**\n* There are many methods to access the same\n* The ones usedful are loc and iloc. loc uses labels, iloc uses index","23c78f6c":"**Unique values in a series and isin function**","875fabfb":"![image.png](attachment:image.png)","6f635816":"# Merging dataframes"}}