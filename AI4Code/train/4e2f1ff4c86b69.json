{"cell_type":{"a52aa88a":"code","ccf2816e":"code","a7f48179":"code","97a215e4":"code","257edb96":"code","456da52d":"code","120e702a":"code","e71c41c3":"code","145c249e":"code","057be241":"code","ae18c2a4":"code","464c376b":"code","a46b7f29":"code","13bdb949":"code","6d708bb8":"code","62ea0ed6":"code","888cc036":"code","674ecc59":"code","ae7f9039":"code","6345aabb":"code","baa3b141":"code","a8d5baf4":"code","2e5967c8":"code","80220364":"code","40163210":"code","8dfb43b1":"code","be59bb4c":"code","0b6780d7":"markdown","1ca6332d":"markdown","c133daf6":"markdown","83f0d5ec":"markdown","30e69668":"markdown","01344ed8":"markdown","8cbe685a":"markdown","700aaefc":"markdown","58ae06e2":"markdown","b546e320":"markdown","e3ab99e6":"markdown","30e05aac":"markdown","e273c826":"markdown"},"source":{"a52aa88a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ccf2816e":"tran_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\npassenger_id = test_df[\"PassengerId\"]\ntran_df.head()","a7f48179":"tran_df.columns","97a215e4":"tran_df.describe()","257edb96":"tran_df.describe().T","456da52d":"tran_df.info()","120e702a":"def bar_plot(variable):\n    \"\"\"\n        input : variable ex: 'sex'\n        output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = tran_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(\"{} : \\n {}\".format(variable, varValue))","e71c41c3":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","145c249e":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(tran_df[c].value_counts()))","057be241":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(tran_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","ae18c2a4":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","464c376b":"#Pclass - Survived\ntran_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False ).mean().sort_values(by=\"Survived\",ascending = False)","a46b7f29":"#Sex - Survived\ntran_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False ).mean().sort_values(by=\"Survived\",ascending = False)","13bdb949":"#SibSp - Survived\ntran_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False ).mean().sort_values(by=\"Survived\",ascending = False)","6d708bb8":"#Parch - Survived\ntran_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False ).mean().sort_values(by=\"Survived\",ascending = False)","62ea0ed6":"def detect_outlies(df,features):\n    outliar_indices = []\n    \n    for c in features:\n        #1st quartire\n        Q1 = np.percentile(df[c],25)\n        #3th quartire\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3-Q1\n        #Ourliar Step\n        outliar_step = IQR * 1.5\n        #Detect outliar their indices\n        outliar_list_col = df[(df[c] < Q1-outliar_step) | (df[c] > Q3 + outliar_step)].index\n        #Store Indices\n        outliar_indices.extend(outliar_list_col)\n        \n    outliar_indices  = Counter(outliar_indices)\n    multiple_outliar = list(i for i, v in outliar_indices.items() if v>2)\n    return multiple_outliar","888cc036":"tran_df.loc[detect_outlies(tran_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","674ecc59":"#drop Outliar\ntran_df = tran_df.drop(detect_outlies(tran_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)","ae7f9039":"tran_df_len = len(tran_df)\ntran_df = pd.concat([tran_df,test_df], axis = 0).reset_index(drop=True)","6345aabb":"tran_df.head()","baa3b141":"tran_df.columns[tran_df.isnull().any()]","a8d5baf4":"tran_df.isnull().sum()","2e5967c8":"tran_df[tran_df[\"Embarked\"].isnull()]","80220364":"tran_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","40163210":"tran_df[\"Embarked\"] = tran_df[\"Embarked\"].fillna(\"C\")\ntran_df[tran_df[\"Embarked\"].isnull()]","8dfb43b1":"tran_df[tran_df[\"Fare\"].isnull()]","be59bb4c":"tran_df[\"Fare\"] = tran_df[\"Fare\"].fillna(np.mean(tran_df[tran_df[\"Pclass\"] == 3][\"Fare\"]))\ntran_df[tran_df[\"Fare\"].isnull()]","0b6780d7":"<a id =\"3\"><\/a>\n# Univeriate Variable Analysis\n* Categorical Variable Analysis : Survived, Pclass, SibSp, Parch,Name, Sex, Ticket, Cabin, Embarked\n* Numerical Variable Analysis : Fare, Age, PassengerId","1ca6332d":"<a id = \"5\"><\/a>\n### Numerical Variable Analysis","c133daf6":"<a id = \"4\"><\/a>\n### Categorical Variable Analysis","83f0d5ec":"<a id = '7'><\/a>\n# 4.Outliar Detection","30e69668":"* Find Missing Value\n* Fill Missing Value","01344ed8":"* float64(2) : Fare and Age\n* int64(5) : PAssengerID, Survived, Pclass, SibSp, Parch\n* object(5) : Name, Sex, Ticket, Cabin, Embarked ","8cbe685a":"# Introduction\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n<font color ='blue'>\nContent :\n\n1. [Load and Check DATA](#1)\n1. [Variable Description](#2)\n    * [Univeriate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outliar Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","700aaefc":"<a id = '8'><\/a>\n# 5.Missing Value","58ae06e2":"<a id='1'><\/a>\n# 1.Load and Check Data","b546e320":"<a id = '6'><\/a>\n# 3.Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","e3ab99e6":"<a id = '10'><\/a>\n## Fill Missing Value\n* Embarked has 2 missing Value\n* Fare has only 1","30e05aac":"<a id = \"2\"><\/a>\n# 2.Variable Description\n\n1. PassengerId : unique ide number for passenger\n2. Survived : passenger survive(1) or died(0)\n3. Pclass : passenger class\n4. Name : name\n5. Sex : Gender of passenger\n6. Age : age of passenger\n7. SibSp : number of siblings \/ spouses\n8. Parch : number of parent ?  children\n9. Ticket : Ticket number\n10. Fare : amount of money spent on ticket\n11. Cabin : cabin category\n12. Embarked : port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","e273c826":"<a id = '9'><\/a>\n## Find Missing Value"}}