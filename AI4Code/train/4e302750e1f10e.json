{"cell_type":{"d489a7e6":"code","5e178cbe":"code","7b259881":"code","7a5c064a":"code","0d3ea917":"code","0214c6e4":"code","29adbaac":"code","d47a9914":"code","c61737a1":"code","7047e0fd":"code","e46a35a4":"code","0bd62a23":"code","40084eb3":"code","02b1f68e":"code","5b516aaa":"code","3299363b":"code","b14a2362":"code","77866268":"code","b15fb8ec":"code","b9b786c2":"code","f110968f":"code","a13468bf":"code","793af70d":"code","08e7b464":"code","1c5bf7b9":"code","13fe359f":"markdown","d6037652":"markdown","a99c1465":"markdown","33067e7b":"markdown","285a9431":"markdown","664af33e":"markdown","606e95a2":"markdown","ecff60f7":"markdown","2a657b18":"markdown","6c7ee208":"markdown","bb7b7cc2":"markdown","b7c96a06":"markdown","16420809":"markdown","79d89963":"markdown","2d17c078":"markdown","63dfec1f":"markdown"},"source":{"d489a7e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","5e178cbe":"import warnings\nwarnings.filterwarnings(\"ignore\")","7b259881":"df = pd.read_csv('\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')\ndf.head()","7a5c064a":"df = df.drop(['Unnamed: 0', 'ID', 'Type'], axis='columns')","0d3ea917":"df.info()","0214c6e4":"null_values = pd.DataFrame(df.isnull().sum() \/ df.shape[0] * 100).reset_index()\nnull_values = null_values.rename(columns={'index':'Column Name', 0:'Percentage Missing'})\nnull_values = null_values[null_values['Percentage Missing'] > 0].sort_values(by='Percentage Missing', ascending=False)","29adbaac":"plt.figure(figsize=(12, 10))\nsns.set_style(\"white\")\n\nplt.title(\"Percentage of Missing Values in the dataset\", fontsize=25)\n\nlabels = null_values['Column Name'].tolist()\nsizes = [percent for percent in null_values['Percentage Missing'].tolist()]\ncolors = ['#845EC2', '#00C9A7','#C4FCEF','#4D8076',\"#B39CD0\",\"#FBEAFF\",\"#F3C5FF\",\"#FEFEDF\"]\n\nplt.pie(sizes,labels=labels, startangle=180, autopct='%1.1f%%',\n        colors=colors,\n        wedgeprops = { 'linewidth' : 3, 'edgecolor' : 'white' },\n        labeldistance=1.15)\n\nplt.show()","d47a9914":"#IMDb\ndf['IMDb'] = df['IMDb'].str.replace(\"\/10\", \"\")\ndf['IMDb'] = pd.to_numeric(df[\"IMDb\"])\n\n#Rotten Tomatoes\ndf['Rotten Tomatoes'] = df['Rotten Tomatoes'].str.replace(\"\/100\", \"\")\ndf['Rotten Tomatoes'] = pd.to_numeric(df[\"Rotten Tomatoes\"])","c61737a1":"# Let's have a look at the dataset again\ndf.head()","7047e0fd":"fig,ax = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))\n\na = sns.histplot(df['IMDb'], ax=ax[0])\nb = sns.histplot(df['Rotten Tomatoes'], color='red', ax=ax[1])\na.text(x=1, y=650,s='median = ' + str(df['IMDb'].median()), fontname = 'monospace', fontsize = 16, color = '#32384D')\nb.text(x=10, y=550,s='median = ' + str(df['Rotten Tomatoes'].median()), fontname = 'monospace', fontsize = 16, color = '#32384D')\n\nfor graph in [a, b]:\n    graph.grid(color='black', linestyle = ':', axis='y', alpha=1, zorder=0,\n            dashes= (1, 7))\n\nfor graph in [a, b]:\n    for w in ['right', 'top','left','bottom']:\n        graph.spines[w].set_linewidth(1.2)\n\n\nplt.figtext(0.14,0.98, 'Distribution of Ratings on IMDb and Rotten Tomatoes', fontsize=28,\n           fontname='monospace')\nfig.tight_layout(pad=4)\nplt.show()","e46a35a4":"age_groups = pd.DataFrame(df['Age'].value_counts()).reset_index()\nage_groups = age_groups.rename(columns={'index':'Age Group', 'Age':'Count'})\nage_groups","0bd62a23":"plt.figure(figsize = (12, 8))\n\na = sns.barplot(x='Age Group', y='Count', data = age_groups, palette='copper',linewidth=1.5)\n\nplt.figtext(x=0.14, y=0.95,\n            s='Distribution of Movies based on Age Groups', \n            fontsize=25, fontname='monospace')\n\nplt.xticks(fontsize=15, fontname='monospace')\nplt.yticks(fontsize=15, fontname='monospace')\nplt.xlabel('Age Group', fontsize=14)\nplt.ylabel('Count', fontsize=14)\n\nplt.grid(axis='y', color='black', linestyle = ':', alpha=0.5)\n\nfor q in [a]:\n    for w in ['bottom', 'left']:\n        q.spines[w].set_linewidth(1.5)\n    for w in ['right', 'top']:\n        q.spines[w].set_visible(False)\n        \nplt.show()","40084eb3":"def get_unique_values(genre_list):\n    '''\n    The function takes the genre list returns a list of all the unique genres, number of movies\n    that have more than one genre and number of movies having only one genre\n    '''\n    more_than_one = 0\n    only_one = 0\n    unique_genre = []\n    for genres in genre_list:\n        try:\n            values = genres.split(\",\")\n            if len(values) > 1:\n                more_than_one += 1\n            elif len(values) == 1:\n                only_one += 1\n        except:\n            pass\n        for genre in values:\n            if genre not in unique_genre:\n                unique_genre.append(genre)\n    \n    return unique_genre, more_than_one, only_one","02b1f68e":"unique_genres, more_than_one_genre, only_one_genre = get_unique_values(df['Genres'].unique())\n\nprint('Total Number of Unique Genres are: ', len(unique_genres))\nprint('Movies having more than one genre: ', more_than_one_genre)\nprint('Movies having only one genre: ', only_one_genre)","5b516aaa":"genre_dict = {}\n\nfor val in unique_genres:\n    genre_dict[val] = 0","3299363b":"# Removing all the null values from genres\nnew_df = df[df['Genres'].notna()]","b14a2362":"for genres in unique_genres:\n    count = new_df[new_df['Genres'].str.contains(genres)].shape[0]\n    genre_dict[genres] = count","77866268":"genre_count = pd.DataFrame(columns=['Genre', 'Count'], \n                           data = {'Genre':[val for val in genre_dict.keys()],\n                                    'Count': [val for val in genre_dict.values()]}).sort_values(by='Count', ascending=False).reset_index(drop=True)","b15fb8ec":"plt.figure(figsize=(12,10))\nplt.grid(axis='x',color='black', linestyle = ':', alpha=0.5)\nplt.title('Top 10 Movie Genres', fontname='monospace', fontsize=25, y=1.05)\na = sns.barplot(x='Count', y='Genre', data=genre_count[:10], palette='rocket')\n\ngenres = genre_count['Genre'][:10].tolist()\nfor i, val in enumerate(genres):\n    x_val = genre_count[genre_count['Genre'] == val]['Count'].values[0]\n    a.text(y=i, x= x_val -300, \n           s=str(x_val),\n          fontsize=14, fontname='monospace', color='white')\n    \nfor q in [a]:\n    for w in ['bottom', 'left']:\n        q.spines[w].set_linewidth(1.5)\n    for w in ['right', 'top']:\n        q.spines[w].set_visible(False)\n\nplt.xlabel('Count', fontsize=15)\nplt.ylabel('Genre', fontsize=15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show()","b9b786c2":"unique_languages, more_than_one_language, only_one_language = get_unique_values(df['Language'].unique())\nprint('Total Number of Unique Languages are: ', len(unique_languages))\nprint('Movies available in more than one languages: ', more_than_one_language)\nprint('Movies available in only one language: ', only_one_language)","f110968f":"language_dict = {}\n\nfor val in unique_languages:\n    language_dict[val] = 0","a13468bf":"# Removing all the null values from languages\nlang_df = df[df['Language'].notna()]","793af70d":"for language in unique_languages:\n    count = lang_df[lang_df['Language'].str.contains(language)].shape[0]\n    language_dict[language] = count","08e7b464":"language_count = pd.DataFrame(columns=['Language', 'Count'], \n                           data = {'Language':[val for val in language_dict.keys()],\n                                    'Count': [val for val in language_dict.values()]}).sort_values(by='Count', ascending=False).reset_index(drop=True)","1c5bf7b9":"plt.figure(figsize=(12,10))\nplt.grid(axis='x',color='black', linestyle = ':', alpha=0.5)\nplt.title('Top 10 Movie Languages', fontname='monospace', fontsize=25, y=1.05)\na = sns.barplot(x='Count', y='Language', data=language_count[:10], palette='viridis')\n\nlanguages = language_count['Language'][:10].tolist()\nfor i, val in enumerate(languages):\n    x_val = language_count[language_count['Language'] == val]['Count'].values[0]\n    a.text(y=i, x= x_val +270, \n           s=str(x_val),\n          fontsize=14, fontname='monospace', color='black')\n    \nfor q in [a]:\n    for w in ['bottom', 'left']:\n        q.spines[w].set_linewidth(1.5)\n    for w in ['right', 'top']:\n        q.spines[w].set_visible(False)\n\nplt.xlabel('Count', fontsize=15)\nplt.ylabel('Language', fontsize=15)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show()","13fe359f":"### **Let's find the top languages in which the movies are available**","d6037652":"### **Features of columns in the dataset**","a99c1465":"### **Load the dataset**","33067e7b":"### **Distribution of Ratings on IMDb and Rotten Tomatoes**","285a9431":"This notebook contains Exploratory data analysis done on the movies present on the four major OTT Platfroms Netflix, Prime Video, Disney+ and Hulu.\n\nI hope you find this kernel helpful and some **<span style=\"color:red\">UPVOTES<\/span>** would be very much appreciated.","664af33e":"#### What's next?\n\n\nAnalysis and insights based on each individual streaming platfrom.\n\nKindly **<span style=\"color:red\">UPVOTE<\/span>** if you found the notebook helpful.\n\n","606e95a2":"### **Let's find the number of movies in each genre**","ecff60f7":"It looks like the dataset has Null values present in it. Let's check the dataset for null values","2a657b18":"The IMDb and Rotten Tomatoes scores are strings, let's convert them to numeric values and also rename the columns","6c7ee208":"### **Importing the required libraries**","bb7b7cc2":"### **Distribution of Age Groups**","b7c96a06":"### **Finding all the unique genres present in the dataset**","16420809":"**Suggestions are welcome**","79d89963":"### **Checking for Null values in the dataset**","2d17c078":"The dataset contains three unwanted columns **1. Unnamed: 0** and **2. ID**, **3. Type**. \n\n\nRemoving the unnecessary columns from the dataset","63dfec1f":"Now the dataset contains the following columns\n\n\n\n1. **Title:** The Title of the Movie\n2. **Year:** The Year in which the Movie was released\n3. **Age:** Age Required for watching the movie\n4. **IMDb:** The IMDb Score of the Movie (out of 10)\n5. **Rotten Tomatoes:** The Rotten Tomatoes Score of the Movie (out of 100)\n6. **Netflix:** Whether the movie is present on Netflix or not (1 for True, 0 for False)\n7. **Hulu:** Whether the movie is present on Hulu or not (1 for True, 0 for False)\n8. **Prime Video:** Whether the movie is present on Prime Video or not (1 for True, 0 for False)\n9. **Disney+:** Whether the movie is present on Disney+ or not (1 for True, 0 for False)\n10. **Directors:** Director(s) of the Movie\n11. **Genres:** Genres of the Movies\n12. **Country:** Countries in which the movie was directed\n13. **Language:** Language(s) in which the movie is available"}}