{"cell_type":{"1ecb1d77":"code","9d450a67":"code","40fcb4cf":"code","b61dc422":"code","3cdfce29":"code","c52c0ed6":"code","e5b6f35c":"code","b0f1be23":"code","d49af9c9":"code","3fcfc34d":"code","e610da7c":"code","91a9aade":"code","bda68905":"code","e61f056a":"code","9e4e16c1":"code","6cc97faa":"code","db6735b8":"code","ff76a284":"code","91168ee2":"code","dbf74040":"code","7ae05209":"code","e02d99ff":"code","70d4b145":"code","1e7c37de":"code","8365004c":"code","da8a1c53":"code","f900d709":"code","640c5024":"code","58af4d06":"code","ac00a214":"code","af9ceba1":"code","b197862a":"code","7f7477b9":"code","555a0b7d":"code","d55175e7":"code","d36bb2df":"code","db4261d9":"code","5ea15653":"code","657980f6":"code","bf5ce5a8":"code","b63172d9":"code","411bda50":"code","3927a75a":"code","5c8cd09b":"code","f45673eb":"code","6312d3eb":"code","d895cad9":"code","977a904f":"code","ff56d80a":"code","f52bf0fe":"code","b2a794f1":"code","c3d3cb46":"markdown","76120beb":"markdown"},"source":{"1ecb1d77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d450a67":"train =pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")","40fcb4cf":"train.head()","b61dc422":"train.info()","3cdfce29":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio ","c52c0ed6":"pio.renderers.default = \"notebook\"","e5b6f35c":"def outliers(df, dt):\n    sorted(df[dt])\n    Q1 = df[dt].quantile(0.25)\n    Q3 = df[dt].quantile(0.75)\n    IQR = Q3 - Q1\n    print(\"Column:\", dt)\n    upper_val = (Q3 + (1.5 * IQR))\n    lower_val = Q1 - (1.5 * IQR)\n    count = len(df[(df[dt] > upper_val) | (df[dt] < lower_val)])\n    df.replace(df[(df[dt] > upper_val) | (df[dt] < lower_val)].index, df[dt].mean(), inplace=True)\n    print(\"Count of Item Replace:\", count)\n    print(\"Outliers ratio:\", count \/ len(df[dt]))","b0f1be23":"def null_values(df):\n    null_value = df.isnull().sum().sort_values(ascending=False)\n    percent_1 = df.isnull().sum() \/ df.isnull().count() * 100\n    percent_2 = (round(percent_1, 1)).sort_values(ascending=False)\n    missing_data = pd.concat([null_value, percent_2], axis=1, keys=['Total', '%'])\n    print(missing_data)","d49af9c9":"null_values(train)","3fcfc34d":"train = train.ffill()\ntrain = train.bfill()","e610da7c":"train = train.drop(columns=[\"Id\", \"PoolQC\", \"Fence\",\"Alley\",\"MiscFeature\"], axis=1)","91a9aade":"from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder","bda68905":"def cat_to_num(df,dt):\n    enc = OrdinalEncoder()\n    df[[dt]] = enc.fit_transform(df[[dt]])\n    df[dt]=df[dt].astype(\"int64\")\n    outliers(df,dt)","e61f056a":"for item in (train.loc[:, train.dtypes == np.object].columns):\n    cat_to_num(train,item)","9e4e16c1":"train = train.astype(\"int64\")","6cc97faa":"corr = train.corr()","db6735b8":"corr[\"SalePrice\"]","ff76a284":"columns_toremove = list(corr.index[ corr[\"SalePrice\"]<0])","91168ee2":"train = train.drop(columns= columns_toremove, axis=1)","dbf74040":"trace = go.Heatmap(z=corr.values,\n                  x=corr.index.values,\n                  y=corr.columns.values)\ntraces=[trace]\nlayout = go.Layout(title=\" Correlation\" ,width = 1050, height = 900,\n    autosize = False)\nfig_go = go.Figure(data=traces, layout=layout)\nfig_go.show()","7ae05209":"train.shape","e02d99ff":"train.shape","70d4b145":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer","1e7c37de":"numeric_coloumns = list(train.columns)\npipeline = ColumnTransformer([\n    (\"Standred\", StandardScaler(), numeric_coloumns,)\n])\nscaled_data = pd.DataFrame(pipeline.fit_transform(train), columns=list(train.columns))","8365004c":"label = train[\"SalePrice\"]\nscaled_data = scaled_data.drop(\"SalePrice\", axis=1)","da8a1c53":"from sklearn.model_selection import cross_val_score, cross_val_predict, train_test_split","f900d709":"train_x, test_x, train_y, test_y = train_test_split(scaled_data, label, test_size=0.2, random_state=42)","640c5024":"from sklearn.ensemble import RandomForestRegressor","58af4d06":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 42)\nregressor.fit(train_x, train_y)","ac00a214":"y_pred = regressor.predict(test_x)","af9ceba1":"y_pred","b197862a":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_y, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(test_y, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, y_pred)))","7f7477b9":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n\nestimator = RandomForestRegressor(max_features='auto', oob_score=True, random_state=42)\nparam_grid = { \n        \"n_estimators\"      : [200, 400, 700],\n        \"min_samples_split\" : [2,4,8,10],\n            }\n\ngrid = GridSearchCV(estimator, param_grid, cv=10, n_jobs=6)\n\ngrid.fit(train_x, train_y)","555a0b7d":"print(\" Results from Grid Search \")\nprint(\"\\n The best estimator across ALL searched params:\\n\", grid.best_estimator_)\nprint(\"\\n The best score across ALL searched params:\\n\", grid.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\", grid.best_params_)","d55175e7":"model = RandomForestRegressor(n_estimators=1000, oob_score=True, random_state=42)\nmodel.fit(train_x, train_y)","d36bb2df":"model_pred = model.predict(test_x)","db4261d9":"print('Mean Absolute Error:', metrics.mean_absolute_error(test_y, model_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(test_y, model_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, model_pred)))","5ea15653":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","657980f6":"test.info()","bf5ce5a8":"test = test.drop(columns=[\"PoolQC\", \"Fence\",\"Alley\",\"MiscFeature\"], axis=1)","b63172d9":"test = test.drop(columns=columns_toremove, axis=1)","411bda50":"test=test.ffill()\ntest=test.bfill()","3927a75a":"for item in (test.loc[:, test.dtypes == np.object].columns):\n    cat_to_num(test,item)","5c8cd09b":"test = test.astype(\"int64\")","f45673eb":"test_id = test[\"Id\"].astype(\"int32\")\ntest = test.drop(\"Id\",axis=1)","6312d3eb":"pred = model.predict(test)","d895cad9":"pred","977a904f":"sub=pd.DataFrame({\"Id\":test_id, \"SalePrice\":pred})\nsub[\"Id\"] = sub[\"Id\"].astype(\"int32\")","ff56d80a":"sub.to_csv(\"submissions_predict.csv\", index=False)","f52bf0fe":"s = pd.read_csv(\"\/kaggle\/working\/submissions_predict.csv\")\ns.head()","b2a794f1":"sub.info()","c3d3cb46":"## Corrilation","76120beb":"## Test"}}