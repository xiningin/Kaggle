{"cell_type":{"7c6fa38a":"code","2df8ab14":"code","841f1b4b":"code","3c16ae42":"code","98ec9b4d":"code","8b191856":"code","227f9688":"code","3c4c0139":"code","96baddf4":"code","a0199310":"code","22de508c":"code","f0c3c871":"code","10bd98f0":"code","10dc72af":"code","2afe7811":"code","98e0f960":"code","fe28457c":"markdown","63ddf622":"markdown","5e7ccf14":"markdown","14d56d1c":"markdown","17fe694f":"markdown","d19deacd":"markdown","0d8b7e88":"markdown","702ea031":"markdown","ed26251b":"markdown"},"source":{"7c6fa38a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2df8ab14":"img = cv2.imread(\"\/kaggle\/input\/opencv-samples-images\/data\/aero3.jpg\",0)\nplt.figure()\nplt.imshow(img,cmap=\"gray\")\nplt.axis(\"off\")","841f1b4b":"med_val = np.median(img)\nprint(med_val)\n\nlow = int(max(0,(1 - 0.33)*med_val))\nhigh = int(min(255,(1 + 0.33)*med_val))\n\nprint(\"Low:\",low)\nprint(\"High\",high)","3c16ae42":"edges = cv2.Canny(image = img ,threshold1 =0,threshold2=255)\nplt.figure()\nplt.imshow(edges, cmap = \"gray\")\nplt.axis(\"off\")","98ec9b4d":"blur_img = cv2.blur(img,ksize=(5,5))\n\nmed_val = np.median(blur_img)\nprint(med_val)\n\nlow = int(max(0,(1 - 0.33)*med_val))\nhigh = int(min(255,(1 + 0.33)*med_val))\n\nprint(\"Low:\",low)\nprint(\"High\",high)","8b191856":"edges = cv2.Canny(image = blur_img,threshold1 = low,threshold2 = high)\nplt.figure()\nplt.imshow(edges, cmap = \"gray\")\nplt.axis(\"off\")","227f9688":"img = cv2.imread(\"\/kaggle\/input\/opencv-samples-images\/data\/chessboard.png\",0)\n\nimg = np.float32(img)\nprint(\"Shape : \",img.shape)\n\nplt.figure()\nplt.imshow(img, cmap = \"gray\")\nplt.axis(\"off\")\nplt.show()","3c4c0139":"dst = cv2.cornerHarris(img,blockSize=2,ksize=3,k=  0.04)\nplt.figure(), plt.imshow(dst, cmap = \"gray\"), plt.axis(\"off\")","96baddf4":"dst = cv2.dilate(dst,None)\nimg[dst>0.2*dst.max()] = 1\nplt.figure(), plt.imshow(dst, cmap = \"gray\"), plt.axis(\"off\")","a0199310":"corners = cv2.goodFeaturesToTrack(img,25,0.01,10)\ncorners = np.int0(corners)\n\nfor i in corners:\n    x,y = i.ravel()\n    cv2.circle(img,(x,y),3,255,-1)\n\nplt.imshow(img),plt.show()","22de508c":"img = cv2.imread(\"\/kaggle\/input\/opencv-samples-images\/data\/LinuxLogo.jpg\",0)\nplt.figure(), plt.imshow(img, cmap = \"gray\"), plt.axis(\"off\")","f0c3c871":"contours, hierarch = cv2.findContours(img, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)","10bd98f0":"external_contours = np.zeros(img.shape)\ninternal_contours = np.zeros(img.shape)","10dc72af":"for i in range(len(contours)):\n    # external\n    if hierarch[0][i][3] == -1:\n        cv2.drawContours(external_contours,contours, i, 255, -1)\n    else: # internal\n        cv2.drawContours(internal_contours,contours, i, 255, -1)\n","2afe7811":"plt.figure(), plt.imshow(external_contours, cmap = \"gray\"),plt.axis(\"off\")","98e0f960":"plt.figure(), plt.imshow(internal_contours, cmap = \"gray\"),plt.axis(\"off\")","fe28457c":"# Contour Detection","63ddf622":"* As a result,The more we blur the more edge sensitivity will decrease","5e7ccf14":"* Sai Tomsai Detection","14d56d1c":"* Without threshold ","17fe694f":"* We have two types contour.That are internal and external","d19deacd":"* We have to blur a little bit to see the edges clearly","0d8b7e88":"* Harris Corner Detection","702ea031":"# Edge Detection","ed26251b":"# Corner Detection"}}