{"cell_type":{"8033f65f":"code","6066ca98":"code","0b4eae4c":"code","6ac634ae":"code","4a0613f2":"code","c910fc9d":"code","6a5368ee":"code","5e4027ab":"code","e0d1f62f":"code","1e1fb0a9":"code","02a0ae12":"code","9510b711":"code","a55038e7":"code","3f9c709c":"code","3431d294":"code","ff4fbb1e":"code","b8a4b0de":"code","091a8502":"code","fca47268":"code","19ea09aa":"code","2d76e69e":"code","4e469960":"code","34d26171":"code","58528c3a":"code","550d9c77":"code","fce89493":"code","aa2c7c64":"code","92267539":"code","8dbc2f32":"code","c434b9fc":"code","0d5e0ed2":"code","f267aea9":"code","3aec8837":"code","20036396":"code","eaddb25e":"code","dcea4ded":"code","c8230985":"markdown","ec512120":"markdown"},"source":{"8033f65f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6066ca98":"import cv2\nimport os\ntrain = []\ny = []\nfor i,j,k in os.walk('..\/input\/ph_soil\/'):\n    for filename in k:\n        train.append(cv2.resize(cv2.cvtColor(cv2.imread('..\/input\/ph_soil\/'+filename),cv2.COLOR_BGR2RGB),(320,320)))\n        y.append(float(filename[:-4]))\n        print('..\/input\/ph_soil\/'+filename)\n        ","0b4eae4c":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n    horizontal_flip=True)","6ac634ae":"train  = np.asarray(train,dtype='float32')","4a0613f2":"train \/=255 ","c910fc9d":"y[9]","6a5368ee":"from sklearn.preprocessing import MinMaxScaler","5e4027ab":"y  = np.asarray(y)\ny.shape","e0d1f62f":"y = np.reshape(y,(40,1))","1e1fb0a9":"mm = MinMaxScaler()\nmodifiedy = mm.fit_transform(y)","02a0ae12":"from sklearn.externals import joblib\njoblib.dump(mm,'minmaxscaler.pkl')","9510b711":"modifiedy = np.reshape(modifiedy,(40))","a55038e7":"import numpy as np\ndatagen.fit(train)","3f9c709c":"from keras.layers import SeparableConv2D,MaxPooling2D,Dropout,Activation,Dense,Flatten,LeakyReLU,BatchNormalization,Conv2D\nfrom keras.models import Sequential","3431d294":"from keras import backend as K","ff4fbb1e":"def custom_activation( x, target_min=5, target_max=10 ) :\n    x02 = K.tanh(x) + 1 # x in range(0,2)\n    scale = ( target_max-target_min )\/2.\n    return  x02 * scale + target_min","b8a4b0de":"from keras.optimizers import Adam\nfrom keras import optimizers","091a8502":"def customactivationmodel(optimizer = optimizers.SGD(lr=0.01, nesterov=True)):\n    \n    model = Sequential()\n    model.add(BatchNormalization(input_shape=(320,320,3)))\n    model.add(SeparableConv2D(64,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(LeakyReLU(alpha=0.3))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n    model.add(SeparableConv2D(32,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(LeakyReLU(alpha=0.3))\n    model.add(Dropout(0.2))\n    model.add(SeparableConv2D(32,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(LeakyReLU(alpha=0.3))\n    #model.add(Dropout())\n    model.add(SeparableConv2D(16,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(LeakyReLU(alpha=0.3))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n    model.add(SeparableConv2D(8,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(LeakyReLU(alpha=0.3))\n    #model.add(Dropout())\n    model.add(Flatten())\n    model.add(Dense(128,activation='relu'))\n    model.add(Dense(1,activation='sigmoid'))\n    model.compile(optimizer='adam',loss='mean_squared_error')\n    return model","fca47268":"def linearactivationmodel():\n    \n    model = Sequential()\n    model.add(BatchNormalization(input_shape=(320,320,3)))\n    model.add(Conv2D(64,(4,4),strides=(1,1)))\n    \n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(Activation('relu'))\n    #model.add(LeakyReLU(alpha=0.3))\n    #model.add(Dropout(0.2))\n    #model.add(BatchNormalization())\n    model.add(Conv2D(32,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(Activation('relu'))\n    #model.add(LeakyReLU(alpha=0.3))\n    model.add(BatchNormalization())\n    #model.add(Dropout(0.2))\n    model.add(Conv2D(32,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(Activation('relu'))\n    #model.add(Dropout())\n    model.add(Conv2D(16,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.2))\n    #model.add(BatchNormalization())\n    model.add(BatchNormalization())\n    model.add(Conv2D(8,(4,4),strides=(1,1)))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=None, padding='valid', data_format=None))\n    #model.add(LeakyReLU(alpha=0.3))\n    model.add(Activation('relu'))\n    #model.add(Dropout())\n    model.add(Flatten())\n    model.add(Dense(128,activation='relu'))\n    model.add(Dense(1,activation='sigmoid'))\n    model.compile(optimizer=Adam(lr=0.0001),loss='binary_crossentropy')\n    return model","19ea09aa":"model = linearactivationmodel()","2d76e69e":"model.summary()","4e469960":"model.fit_generator(datagen.flow(train,modifiedy,batch_size=1), samples_per_epoch=len(train), epochs=20)\n","34d26171":"from matplotlib import pyplot as plt\nplt.plot()","58528c3a":"from sklearn.externals import joblib\njoblib.dump(model,'phmodel.sav')","550d9c77":"predicted = mm.inverse_transform(model.predict(np.reshape(train,(40,320,320,3))))","fce89493":"y","aa2c7c64":"predicted","92267539":"import requests \nimage_url = \"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSZNkSpHEq-M2B6DcPF2BKvxPgItHyMrKXiRjD8ujAFJNqCMCitpQ\"\n# URL of the image to be downloaded is defined as image_url \n#r = requests.get('https:\/\/mail-attachment.googleusercontent.com\/attachment\/u\/0\/?ui=2&ik=aa9cfa7b74&jsver=pd5oUcMKyDc.en.&cbl=gmail_fe_190325.10_p4&view=att&th=%23msg-f:1629585621080920467&disp=zip&permmsgid=msg-f:1629585621080920467&saddbat=ANGjdJ8IEQLz9Aj9fFKEBu-EOJKPRwRmI5JF4Pkj2vw2NCsXPw_WhTwXmP4A42iT4wbDmjfWL5OS7ZU5403GIHTUm8xcf5pV4oYXRY6xoOepmdZNY-6KgSji21sd8A3t3C7Ym9Wy7y8MbsstcS9josCbzTLyhue6f1-l_ec7yfhSl3thyz1f8kXjNU51dyV_OE8JddzqA7Aemaz-CaLuPw2rPMiUVTMNoqLbTI-TvMhtqTzvQMOP0sYTcyWt3LWcUUzh4GQCe9jr8Y_XOjhJuS0a9M9giCKcZX7a_1sZmLv4MxJJ4mjx1phZq7JIHKpGhF4wqFWqmHDc1zUceXK6NDamVONoOuLwa6yNjy96RdPx9wMBRjXnEday18nuBl6RFJrq0D_57KUM4ykg7DkHy2N_6noPMW5djoYMadKwDBpJDEtPUlVt7ZDAbGDAWRzznKUEQQcdEKPb34YgG9Xdothm_WDHVkcWL-OnHa6pwjLQ-TBOqwy7dTWlA0lgv7BEFVUw21CFyvW2_bdb5SqrMv2M_Vice59jcDWkKPihQq_8JDor0KmEimrkIhFEmSHOjKtWbngKYwem6XoUkCCzeZ_ihW39ZGR9o6amN8-cSCrqm5nnOC4KnGjTToga5d4iBPXUFicxmPqoid0KnQ-PXo3aN5sw3vOYHBClk28KIg') # create HTTP response object \nr = requests.get(image_url)\n# send a HTTP request to the server and save \n# the HTTP response in a response object called r \nwith open(\"testimage.jpg\",'wb') as f: \n  \n    # Saving received content as a png file in \n    # binary format \n  \n    # write the contents of the response (r.content) \n    # to a new file in binary mode. \n    f.write(r.content)","8dbc2f32":"for i,j,k in os.walk('.'):\n    for file in k:\n        print(file)","c434b9fc":"def predict(imgpath):\n    test = cv2.resize(cv2.cvtColor(cv2.imread(imgpath),cv2.COLOR_BGR2RGB),(320,320))\n    test = test \/ 255\n    return mm.inverse_transform(model.predict(np.reshape(test,(1,320,320,3))))\n    ","0d5e0ed2":"model.predict(np.reshape(train[19],(1,320,320,3)))","f267aea9":"mm.inverse_transform(np.reshape(modifiedy[1],(-1,1)))","3aec8837":"mm.inverse_transform(model.predict(np.reshape(train[9],(1,320,320,3))))","20036396":"PATHTOIMAGE = '.\/testimage.jpg'","eaddb25e":"import matplotlib.pyplot as plt\n","dcea4ded":"print('The soil image is :')\nplt.imshow(cv2.imread(PATHTOIMAGE)[:,:,[2,1,0]])\nprint('The PH for the input soil is approx {0:.3f} pH'.format(predict(PATHTOIMAGE)[0][0]))","c8230985":"**SPECIFY THE PATH TO IMAGE **","ec512120":"**THE PH OF THIS SPECIFIED SOIL IS APPROXIMATELY**"}}