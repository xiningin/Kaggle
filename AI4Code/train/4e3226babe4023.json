{"cell_type":{"9a2e5438":"code","14efa434":"code","8af4bc47":"code","8d14b4dd":"code","549de664":"code","2f771b37":"code","848ea8fb":"code","27474ff2":"code","ba3a8cee":"code","0d2b72ad":"code","64ae1667":"code","53aaee9f":"code","78d38a1d":"code","91ba767a":"markdown","ac9c2f53":"markdown","27c22d46":"markdown","d82b03df":"markdown","0d80a261":"markdown","7ac50f4a":"markdown","3f167864":"markdown","54033b77":"markdown","b25b4ed1":"markdown","2a877152":"markdown","9c1b8b52":"markdown","860d14ba":"markdown"},"source":{"9a2e5438":"import torch \nfrom torch import nn \nimport torch.nn.functional as F\nimport numpy as np \nimport pandas as pd \nfrom torch.utils.data import Dataset, DataLoader\nimport pytorch_lightning as pl \nfrom pytorch_lightning.callbacks.early_stopping import EarlyStopping\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\nimport transformers\nfrom transformers import get_linear_schedule_with_warmup, AdamW","14efa434":"!pip3 install deberta\nfrom DeBERTa import deberta\n\nvocab_path, vocab_type = deberta.load_vocab(pretrained_id='base')\ntokenizer = deberta.tokenizers[vocab_type](vocab_path)","8af4bc47":"#taking only the id,excerpt,target\ndf = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\",usecols=[\"id\",\"excerpt\",\"target\"])\ntest_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\",usecols=[\"id\",\"excerpt\"])\nprint(\"train shape\",df.shape)\ndf.head()","8d14b4dd":"test_df.head()","549de664":"#remove \\n and replace \\'s with 'sfrom the text\ndef prep_text(text_df):\n    text_df = text_df.str.replace(\"\\n\",\"\",regex=False) \n    return text_df.str.replace(\"\\'s\",r\"s\",regex=True).values\ndf[\"excerpt\"] = prep_text(df[\"excerpt\"])\ntest_df[\"excerpt\"] = prep_text(test_df[\"excerpt\"])","2f771b37":"max_words = df[\"excerpt\"].apply(lambda x: len(x.split())).max()\nprint(\"maximum words in instance:\",max_words)","848ea8fb":"def create_folds(data, num_splits):\n    # we create a new column called kfold and fill it with -1\n    data[\"kfold\"] = -1\n    \n    # the next step is to randomize the rows of the data\n    data = data.sample(frac=1).reset_index(drop=True)\n\n    # calculate number of bins by Sturge's rule\n    # I take the floor of the value, you can also\n    # just round it\n    num_bins = int(np.floor(1 + np.log2(len(data))))\n    \n    # bin targets\n    data.loc[:, \"bins\"] = pd.cut(\n        data[\"target\"], bins=num_bins, labels=False\n    )\n    \n    # initiate the kfold class from model_selection module\n    kf = model_selection.StratifiedKFold(n_splits=num_splits)\n    \n    # fill the new kfold column\n    # note that, instead of targets, we use bins!\n    for f, (t_, v_) in enumerate(kf.split(X=data, y=data.bins.values)):\n        data.loc[v_, 'kfold'] = f\n    \n    # drop the bins column\n    data = data.drop(\"bins\", axis=1)\n\n    # return dataframe with folds\n    return data\n\n# read training data\ndf = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")\n\n# create folds\ndf = create_folds(df, num_splits=5)","27474ff2":"BATCH_SIZE = 16\nEPOCHS = 15\nLEARNING_RATE = 2e-5\nNUM_TRAIN_STEPS = int((df.shape[0]\/BATCH_SIZE)*EPOCHS)\nNUM_WARMUP_STEPS = 0\nFOLDS = df.kfold.unique()\nNUM_FOLDS = df.kfold.nunique() ","ba3a8cee":"class RMSELoss(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.eps = 1e-8\n        \n    def forward(self,output,target):\n        return torch.sqrt(F.mse_loss(output,target)+self.eps)","0d2b72ad":"class deBertaModel(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.model = transformers.AutoModel.from_pretrained(\"..\/input\/deberta\/base\")\n        self.drop = nn.Dropout(0.5)\n        self.fc = nn.Linear(768,1)\n    \n    def forward(self,inputs):\n        out = self.model(**inputs)\n        last_hiddens = out[0]\n        out = self.drop(last_hiddens[:,0,:].squeeze(1))\n        return self.fc(out)\n    \n    def configure_optimizers(self):\n        no_decay = ['bias', 'LayerNorm.weight']\n        optimizer_grouped_parameters = [\n            {'params': [p for n, p in self.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},\n            {'params': [p for n, p in self.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n        ]\n        optimizer = AdamW(optimizer_grouped_parameters, lr=5e-5)\n        scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=NUM_WARMUP_STEPS, num_training_steps=NUM_TRAIN_STEPS)\n        return [optimizer],[scheduler] \n    \n    def loss_fn(self,output,target):\n        return RMSELoss()(output.view(-1),target.view(-1))\n    \n    def training_step(self,batch,batch_idx):\n        inputs = batch[\"inputs\"]\n        labels = batch[\"label\"]\n        output = self(inputs)\n        loss = self.loss_fn(output,labels)\n        return loss\n    \n    def validation_step(self,batch,batch_idx):\n        inputs = batch[\"inputs\"]\n        labels = batch[\"label\"]\n        output = self(inputs)\n        loss = self.loss_fn(output,labels)\n        self.log(\"val_loss\",loss,prog_bar=True)\n","64ae1667":"class deBertaDataset(Dataset):\n    def __init__(self,texts,labels,max_len):\n        super().__init__()\n        self.texts = texts\n        self.max_len = max_len\n        self.labels = labels\n        self.tokenizer = transformers.AutoTokenizer.from_pretrained(\"..\/input\/deberta\/base\")\n    \n    def __len__(self):\n        return self.labels.shape[0]\n    \n    def __getitem__(self,idx):\n        text = \" \".join(self.texts[idx].split())\n        label = self.labels[idx]\n        inputs = self.tokenizer(text,return_tensors=\"pt\",max_length = self.max_len, padding=\"max_length\",truncation=True)\n        return {\n            \"inputs\":{\"input_ids\":inputs[\"input_ids\"][0],\n                      \"token_type_ids\":inputs[\"token_type_ids\"][0],\n                      \"attention_mask\":inputs[\"attention_mask\"][0],},\n            \"label\":torch.tensor(label,dtype=torch.float)\n        }\n    \n","53aaee9f":"prediction = np.zeros(test_df.shape[0]) \ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nfor fold in FOLDS:\n    print(\"Fold:\",fold)\n    loaded_model = deBertaModel.load_from_checkpoint(f\"..\/input\/oopshiooops\/checkpoint_{fold}fold.ckpt\",map_location=device)\n    loaded_model.to(device)\n    loaded_model.eval() \n    #using the same deBertaDataset module of train, here dummy labels are provided\n    test_dataset = deBertaDataset(test_df.excerpt.values,labels = np.ones(test_df.shape[0]),max_len=max_words)\n    test_dataloader = DataLoader(test_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4)\n    output = []\n    for batch in test_dataloader:\n        x  = batch[\"inputs\"]\n        for key in x.keys():\n            x[key] = x[key].to(device)\n        assert x[\"input_ids\"].is_cuda, f\"data is not in model device({loaded_model.device.type})\"\n        out = loaded_model(x)\n        output.extend(out.cpu().detach().numpy())\n    prediction += np.hstack(output)\ntest_df[\"target\"] = prediction\/NUM_FOLDS\nsub = test_df.drop(\"excerpt\",axis=1) \nsub.to_csv(\"submission.csv\",index=False)","78d38a1d":"sub.head()","91ba767a":"# Data and Preprocess","ac9c2f53":"# Trainer","27c22d46":"Constants","d82b03df":"This is the inference of my DeBERTa training notebook. \n[You can run your own and then add data from your notebook instead of my checkpoints](https:\/\/www.kaggle.com\/crained\/deberta-pytorch-commonlit-readability-train). ","0d80a261":"# Create Folds ","7ac50f4a":"RMSE as Criterion","3f167864":"# Tokenize Dataset and Dataloader","54033b77":"Directly Copied from [Abhishek Notebook](https:\/\/www.kaggle.com\/abhishek\/step-1-create-folds)","b25b4ed1":"# Bert Model and Training Module","2a877152":"# Load Weights and Inference ","9c1b8b52":"If you want to run your checkpoints just change the input location below from my \"oopshiooops\" to yours. ","860d14ba":"# Imports"}}