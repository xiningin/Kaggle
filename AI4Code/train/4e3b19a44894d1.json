{"cell_type":{"58b782e5":"code","04dba53c":"code","ed7a246b":"code","a2f66605":"code","0ddcf186":"code","ac0b7ff6":"code","3c1b5333":"code","ac40ba79":"code","4a4929a5":"code","832d23df":"code","d41fbe45":"code","0115a530":"code","bbe2d358":"code","e33a8320":"code","19b79713":"code","94849248":"code","899a895a":"code","df85f5db":"code","b767a189":"code","618ea751":"code","ccd9e7c9":"code","8f0a37bc":"code","0496d5f8":"code","4a9f7197":"code","6caa2e07":"code","34d6fca5":"code","0c728b1a":"code","d70bfc3c":"code","91d6a430":"code","5a0cd1be":"code","cc351f10":"code","960c1857":"code","46b01c81":"code","42fec189":"code","ea989398":"code","2d6db627":"code","d6cd0338":"code","7055dbd7":"code","702135d7":"code","ba3b2ed9":"code","4771c422":"code","d3b2b977":"code","977e2d11":"code","db8f7940":"code","0f68fcb0":"code","ba1784fa":"code","f2a5d5ce":"code","6d5fe3de":"code","8e01958e":"code","ba0a75fb":"code","a1c906de":"code","99daf117":"code","380b0f71":"code","8819c5a5":"code","a9458d7c":"code","8d58e712":"code","24d17d71":"code","881f1bf4":"code","44b6ce7e":"code","3b8c2966":"code","0aae8b5a":"code","b27ba23d":"code","9775ac2b":"code","47c7b82d":"code","42de7daf":"code","33f5ed80":"code","260a68ee":"code","e1f3abd5":"code","f9e0589f":"code","c8e397e3":"code","dd06e9ea":"code","1024f7cc":"code","f7e36236":"code","d717c5bf":"code","6dbef590":"code","6ea8063e":"code","09642939":"code","9cb2b45e":"code","aa687053":"code","114100c7":"code","679eb81f":"code","42558938":"code","f5d438df":"code","57e2bbd9":"code","e35f856f":"code","450fe095":"code","586ac4b5":"code","4ca8b34f":"code","5133bb99":"code","fc374407":"code","add316ea":"markdown","b8bf355f":"markdown","66abd439":"markdown","88328e0f":"markdown","2533cfa3":"markdown","13a37d53":"markdown","cd10633b":"markdown","b3386eb4":"markdown","d1522be4":"markdown","d918cfb6":"markdown","001fcc65":"markdown","af2461f9":"markdown","e46ef11f":"markdown","e4dcdd82":"markdown","da2a5887":"markdown","fb3f0b6a":"markdown","6e812ea8":"markdown","ea95d331":"markdown","cb89a29c":"markdown","a3b1775f":"markdown","8010f975":"markdown","a1d740bc":"markdown","2a700c88":"markdown","3478edd0":"markdown","11913f7b":"markdown","d4c00f36":"markdown","b67a542d":"markdown","18c0745f":"markdown","a785a8fe":"markdown","35abf185":"markdown","8f589451":"markdown"},"source":{"58b782e5":"#Imports\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline \nimport matplotlib.pyplot as plt\nimport sklearn","04dba53c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ed7a246b":"# Read the Data\nraw_train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nraw_train_data.head(10)","a2f66605":"raw_train_data.info()","0ddcf186":"raw_train_data['Pclass'].value_counts()\n# Insights: There were 3 passenger classes","ac0b7ff6":"# Lets see if survival has any relation with passenger class\nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Pclass'])\n# Insights: Pclass 3 has least survival\n# This Feature will be important for classification ","3c1b5333":"sns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Sex'])\n# Males have very less survival rate compared to females.\n# This feature is also important for classification","ac40ba79":"raw_train_data['cabin_init'] = raw_train_data['Cabin'].map(lambda x: x if pd.isna(x) else x[0])\n\nsns.countplot(data=raw_train_data, x='Survived', hue='cabin_init',hue_order=['A','B','C','D','E','F','G','T'])","4a4929a5":"sns.displot(raw_train_data, x=\"Age\", hue=\"Survived\", kind=\"kde\")\n\n# kernal density estimation plot (analogous to a histogram) shows a continious prob. density","832d23df":"# Cabin\n\n# 1 indicates value is missing\/nan\nraw_train_data['Cabin_nan_status'] = raw_train_data['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)\ntest_data['Cabin_nan_status'] = test_data['Cabin'].map(lambda x: 1 if pd.isnull(x) else 0)\n\n# plot shows missing values are more in case of the passenger who didnt survived, hence we can use this as a feature\nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Cabin_nan_status'])","d41fbe45":"#Age\n\n# 1 indicates value is missing\/nan\nraw_train_data['Age_nan_status'] = raw_train_data['Age'].map(lambda x: 1 if pd.isnull(x) else 0)\ntest_data['Age_nan_status'] = test_data['Age'].map(lambda x: 1 if pd.isnull(x) else 0)\n\n# plot shows missing values are more in case of the passenger who didnt survived, hence we can use this as a feature \nsns.countplot(x=raw_train_data['Survived'],hue=raw_train_data['Age_nan_status'])","0115a530":"fn_title_extract = (lambda name: name.split(',')[1].split('.')[0])\nraw_train_data['Title'] = raw_train_data['Name'].map(fn_title_extract)\nraw_train_data['Title'].value_counts()\n\n# Observation: we can simplify the data here by realising that some titles (Dr, Rev, etc) are subsets of Mr, Mrs, Master and Miss.\n# Hence we can these can all be mapped to Mr, Mrs, Master and Miss","bbe2d358":"# Mapping all titles to Mr, Mrs, Master, Miss\nMr_synonyms = ['mr','dr','rev','major','col','capt','sir','jonkheer','don']\nMrs_synonyms = ['mrs','the countess','countess','mme','lady']\nMiss_synonyms = ['miss','ms','mlle']\nMaster_synonyms = ['master']\n\ntitle_replace = (lambda title: 'mr' if title in Mr_synonyms else ('mrs' if title in Mrs_synonyms else ('miss' if title in Miss_synonyms else ('master' if title in Master_synonyms else 'mr'))))\n\nraw_train_data['Title']= raw_train_data['Title'].map(lambda i: title_replace(i.lower().strip()))\nraw_train_data.loc[(raw_train_data['Title']=='mr') & (raw_train_data['Sex']=='female') ,'Title'] = 'mrs'\nraw_train_data['Title'].value_counts()\n# So now we have removed all other titles \n# also if there is an unknown title which doesnt lie in any list it will be mapped to 'mr' as the most common title","e33a8320":"# Lets see Age distribution with Title\nsns.boxplot(data=raw_train_data, x='Title', y='Age')","19b79713":"sns.barplot(data=raw_train_data, x='Title', y='Age',hue='Embarked')","94849248":"sns.barplot(data=raw_train_data, x='Title', y='Age',hue='Pclass')","899a895a":"# mr: calculating mean ages as per title and pclass\ncondition_mr_pclass_1 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_mr_pclass_2 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_mr_pclass_3 = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_mr_pclass_1 = raw_train_data[condition_mr_pclass_1]['Age'].mean()\nmean_mr_pclass_2 = raw_train_data[condition_mr_pclass_2]['Age'].mean()\nmean_mr_pclass_3 = raw_train_data[condition_mr_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Mr in pclass 1,2,3:',mean_mr_pclass_1,mean_mr_pclass_2,mean_mr_pclass_3)","df85f5db":"# mrs: calculating mean ages as per title and pclass\ncondition_mrs_pclass_1 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_mrs_pclass_2 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_mrs_pclass_3 = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_mrs_pclass_1 = raw_train_data[condition_mrs_pclass_1]['Age'].mean()\nmean_mrs_pclass_2 = raw_train_data[condition_mrs_pclass_2]['Age'].mean()\nmean_mrs_pclass_3 = raw_train_data[condition_mrs_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Mrs in pclass 1,2,3:',mean_mrs_pclass_1,mean_mrs_pclass_2,mean_mrs_pclass_3)","b767a189":"# miss: calculating mean ages as per title and pclass\ncondition_miss_pclass_1 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_miss_pclass_2 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_miss_pclass_3 = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_miss_pclass_1 = raw_train_data[condition_miss_pclass_1]['Age'].mean()\nmean_miss_pclass_2 = raw_train_data[condition_miss_pclass_2]['Age'].mean()\nmean_miss_pclass_3 = raw_train_data[condition_miss_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Miss in pclass 1,2,3:',mean_miss_pclass_1,mean_miss_pclass_2,mean_miss_pclass_3)","618ea751":"# master: calculating mean ages as per title and pclass\ncondition_master_pclass_1 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==0)\ncondition_master_pclass_2 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==0)\ncondition_master_pclass_3 = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==0)\nmean_master_pclass_1 = raw_train_data[condition_master_pclass_1]['Age'].mean()\nmean_master_pclass_2 = raw_train_data[condition_master_pclass_2]['Age'].mean()\nmean_master_pclass_3 = raw_train_data[condition_master_pclass_3]['Age'].mean()\nprint('Average ages of passengers with Title Master in pclass 1,2,3:',mean_master_pclass_1,mean_master_pclass_2,mean_master_pclass_3)","ccd9e7c9":"# Filling mean values for mr title\ncondition_mr_pclass_1_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_mr_pclass_2_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_mr_pclass_3_nan = (raw_train_data['Title']=='mr') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_mr_pclass_1_nan,'Age'] = mean_mr_pclass_1\nraw_train_data.loc[condition_mr_pclass_2_nan,'Age'] = mean_mr_pclass_2\nraw_train_data.loc[condition_mr_pclass_3_nan,'Age'] = mean_mr_pclass_3","8f0a37bc":"# Filling mean values for mrs title\ncondition_mrs_pclass_1_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_mrs_pclass_2_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_mrs_pclass_3_nan = (raw_train_data['Title']=='mrs') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_mrs_pclass_1_nan,'Age'] = mean_mrs_pclass_1\nraw_train_data.loc[condition_mrs_pclass_2_nan,'Age'] = mean_mrs_pclass_2\nraw_train_data.loc[condition_mrs_pclass_3_nan,'Age'] = mean_mrs_pclass_3","0496d5f8":"# Filling mean values for miss title\ncondition_miss_pclass_1_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_miss_pclass_2_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_miss_pclass_3_nan = (raw_train_data['Title']=='miss') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_miss_pclass_1_nan,'Age'] = mean_miss_pclass_1\nraw_train_data.loc[condition_miss_pclass_2_nan,'Age'] = mean_miss_pclass_2\nraw_train_data.loc[condition_miss_pclass_3_nan,'Age'] = mean_miss_pclass_3","4a9f7197":"# Filling mean values for master title\ncondition_master_pclass_1_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==1) & (raw_train_data['Age_nan_status']==1)\ncondition_master_pclass_2_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==2) & (raw_train_data['Age_nan_status']==1)\ncondition_master_pclass_3_nan = (raw_train_data['Title']=='master') & (raw_train_data['Pclass']==3) & (raw_train_data['Age_nan_status']==1)\nraw_train_data.loc[condition_master_pclass_1_nan,'Age'] = mean_master_pclass_1\nraw_train_data.loc[condition_master_pclass_2_nan,'Age'] = mean_master_pclass_2\nraw_train_data.loc[condition_master_pclass_3_nan,'Age'] = mean_master_pclass_3","6caa2e07":"raw_train_data[raw_train_data['Age_nan_status']==1]['Age'] \n# confirming if all nan values are replaced","34d6fca5":"# Just to debug if nan values were replaced correctly. new distribution remains same as earlier\nsns.barplot(data=raw_train_data, x='Title', y='Age',hue='Pclass')","0c728b1a":"raw_train_data['Age_bins'] = pd.cut(raw_train_data.Age,bins=[0,10,20,30,40,50,60,70,80,120],labels=[0,10,20,30,40,50,60,70,80])","d70bfc3c":"sns.countplot(data=raw_train_data, x='Title', hue='Survived')","91d6a430":"fn_surname_extract = (lambda name: name.split(',')[0])\nraw_train_data['Surname'] = raw_train_data['Name'].map(fn_surname_extract)\nsurname_groupby = raw_train_data.groupby(['Surname','Ticket'])","5a0cd1be":"# 0 => travelling alone\n# 1 => travelling in small group of 2 or 3 members\n# 2 => travelling in large groups >3 members\n\ngroup_size_fn = (lambda x: 0 if len(x)==1 else(1 if (len(x)>1) & (len(x)<4) else 2 ) )\nraw_train_data['group'] = surname_groupby.Age.transform(group_size_fn )\nsns.countplot(data=raw_train_data,x='group',hue='Survived')","cc351f10":"sns.countplot(data=raw_train_data,x='group',hue='Sex')","960c1857":"min_age = 15\nprint_fn = (lambda x: print(x))\nmin_age_fn = (lambda x: 1 if min(x)<min_age else 0)\nraw_train_data['group_wth_child'] = surname_groupby.Age.transform(min_age_fn)\nsns.countplot(data=raw_train_data,x='group_wth_child',hue='Survived')","46b01c81":"elder_age = 50\nprint_fn = (lambda x: print(x))\nelder_age_fn = (lambda x: 1 if max(x)>elder_age else 0)\nraw_train_data['group_wth_elder'] = surname_groupby.Age.transform(elder_age_fn)\nsns.countplot(data=raw_train_data,x='group_wth_elder',hue='Survived')","42fec189":"def count_fn(x):\n    female_count = 0\n    total_count = 0\n    for i in x:\n        total_count = total_count + 1\n        if i=='female':\n            female_count = female_count + 1\n    return 1 if female_count\/total_count > 0.5 else 0 \n        \nraw_train_data['group_female_dominant'] = surname_groupby.Sex.transform(count_fn)\nsns.countplot(data=raw_train_data,x='group_female_dominant',hue='Survived')","ea989398":"raw_train_data['SibSp'].value_counts()","2d6db627":"raw_train_data['Parch'].value_counts()","d6cd0338":"sns.catplot(data = raw_train_data,x='Survived',y='SibSp',kind='bar',hue='Sex')","7055dbd7":"sns.countplot(x=raw_train_data['Parch'],hue=raw_train_data['Survived'])","702135d7":"sns.countplot(x=raw_train_data['SibSp'],hue=raw_train_data['Survived'])","ba3b2ed9":"raw_train_data['SibSp_depend'] = raw_train_data['SibSp'].map(lambda x: 1 if x>0 else 0 )","4771c422":" raw_train_data['Parch_depend'] = raw_train_data['Parch'].map(lambda x: 1 if x>0 else 0 )","d3b2b977":"raw_train_data['Ticket'].unique()","977e2d11":"raw_train_data['Ticket_length'] = raw_train_data['Ticket'].map(lambda x: len(x))\nsns.countplot(data = raw_train_data,x='Ticket_length',hue='Survived')","db8f7940":"sns.countplot(data = raw_train_data,x='Ticket_length',hue='Pclass')","0f68fcb0":"raw_train_data['Ticket_length_bins'] = pd.cut(raw_train_data['Ticket_length'],bins=[0,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,20],labels=[3,4,5,6,7,8,9,10,11])\nsns.countplot(data=raw_train_data,x='Ticket_length_bins',hue='Survived')","ba1784fa":"sns.displot(raw_train_data, x=\"Fare\", hue=\"Survived\", kind=\"kde\")","f2a5d5ce":"raw_train_data['Fare_bins'] = pd.cut(raw_train_data.Fare,bins=[-5,50,100,150,200,250,300,1000],labels=[1,2,3,4,5,6,7])","6d5fe3de":"sns.countplot(data=raw_train_data,x='Fare_bins',hue='Survived')","8e01958e":"sns.countplot(data = raw_train_data,x='Embarked',hue='Survived')","ba0a75fb":"from sklearn.preprocessing import OneHotEncoder","a1c906de":"raw_train_data['Embarked'] = raw_train_data['Embarked'].map(lambda x: 'Embarked_nan' if pd.isna(x) else x)\nraw_train_data['cabin_init'] = raw_train_data['cabin_init'].map(lambda x: 'Cabin_nan' if pd.isna(x) else x)","99daf117":"one_hot_obj = OneHotEncoder() # Creating Object OneHot encoding Object\none_hot_array = one_hot_obj.fit_transform(raw_train_data[['Pclass','Title','Embarked','cabin_init','Ticket_length_bins']]) # Outputs sparse matrix for space saving\ntype(one_hot_array)","380b0f71":"one_hot_obj.categories_","8819c5a5":"X = pd.DataFrame()  # X is training Data\nX[['Pclass_1','Pclass_2','Pclass_3','master', 'miss', 'mr', 'mrs','C', 'Q', 'S', 'Embarked_nan','cabin_A', 'cabin_B', 'cabin_C', 'cabin_D', 'cabin_E', 'cabin_F', 'cabin_G', 'cabin_T', 'Cabin_nan','Tick_len_3',  'Tick_len_4',  'Tick_len_5',  'Tick_len_6',  'Tick_len_7',  'Tick_len_8',  'Tick_len_9', 'Tick_len_10', 'Tick_len_11']] = one_hot_array.toarray()\nX = X.drop(['Embarked_nan','Cabin_nan'],axis=1)\nX","a9458d7c":"raw_train_data.head() # For verification, if encoding is correct","8d58e712":"from sklearn.preprocessing import OrdinalEncoder ","24d17d71":"Sex_ordinal_encod_obj = OrdinalEncoder()\nX['Sex'] = Sex_ordinal_encod_obj.fit_transform(raw_train_data[['Sex']])\nX","881f1bf4":"Sex_ordinal_encod_obj.categories_","44b6ce7e":"y = raw_train_data['Survived']","3b8c2966":"X[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']] = raw_train_data[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']]\nX.info()","0aae8b5a":"from sklearn.linear_model import SGDClassifier","b27ba23d":"sgd_clf = SGDClassifier(random_state=42)","9775ac2b":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_clf, X, y, cv=3, scoring=\"accuracy\")\n\n# cross_val_score prevents overfitting by splitting the data set into k subsets. The model is then trained\n# excluding the kth subset and trained on the kth subset (for all values of k). ","47c7b82d":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=4)\ncross_val_score(forest_clf, X, y, cv=3)","42de7daf":"from sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=43)\ncross_val_score(forest_clf, X, y, cv=10)","33f5ed80":"X_new = X.drop(['group','group_wth_child','group_wth_elder','group_female_dominant'],axis=1)\nfrom sklearn.ensemble import RandomForestClassifier\nforest_clf = RandomForestClassifier(random_state=4)\ncross_val_score(forest_clf, X_new, y, cv=10)","260a68ee":"fn_title_extract = (lambda name: name.split(',')[1].split('.')[0])\ntest_data['Title'] = test_data['Name'].map(fn_title_extract)\ntest_data['Title'].value_counts()","e1f3abd5":"# Mapping all titles to Mr, Mrs, Master, Miss\nMr_synonyms = ['mr','dr','rev','major','col','capt','sir','jonkheer','don']\nMrs_synonyms = ['mrs','the countess','countess','mme','lady']\nMiss_synonyms = ['miss','ms','mlle']\nMaster_synonyms = ['master']\n\ntitle_replace = (lambda title: 'mr' if title in Mr_synonyms else ('mrs' if title in Mrs_synonyms else ('miss' if title in Miss_synonyms else ('master' if title in Master_synonyms else 'mr'))))\n\ntest_data['Title']= test_data['Title'].map(lambda i: title_replace(i.lower().strip()))\ntest_data.loc[(test_data['Title']=='mr') & (test_data['Sex']=='female') ,'Title'] = 'mrs'\ntest_data['Title'].value_counts()","f9e0589f":"# Filling mean values for mr title\ncondition_mr_pclass_1_nan = (test_data['Title']=='mr') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_mr_pclass_2_nan = (test_data['Title']=='mr') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_mr_pclass_3_nan = (test_data['Title']=='mr') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_mr_pclass_1_nan,'Age'] = mean_mr_pclass_1\ntest_data.loc[condition_mr_pclass_2_nan,'Age'] = mean_mr_pclass_2\ntest_data.loc[condition_mr_pclass_3_nan,'Age'] = mean_mr_pclass_3","c8e397e3":"condition_mrs_pclass_1_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_mrs_pclass_2_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_mrs_pclass_3_nan = (test_data['Title']=='mrs') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_mrs_pclass_1_nan,'Age'] = mean_mrs_pclass_1\ntest_data.loc[condition_mrs_pclass_2_nan,'Age'] = mean_mrs_pclass_2\ntest_data.loc[condition_mrs_pclass_3_nan,'Age'] = mean_mrs_pclass_3","dd06e9ea":"condition_miss_pclass_1_nan = (test_data['Title']=='miss') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_miss_pclass_2_nan = (test_data['Title']=='miss') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_miss_pclass_3_nan = (test_data['Title']=='miss') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_miss_pclass_1_nan,'Age'] = mean_miss_pclass_1\ntest_data.loc[condition_miss_pclass_2_nan,'Age'] = mean_miss_pclass_2\ntest_data.loc[condition_miss_pclass_3_nan,'Age'] = mean_miss_pclass_3","1024f7cc":"condition_master_pclass_1_nan = (test_data['Title']=='master') & (test_data['Pclass']==1) & (test_data['Age_nan_status']==1)\ncondition_master_pclass_2_nan = (test_data['Title']=='master') & (test_data['Pclass']==2) & (test_data['Age_nan_status']==1)\ncondition_master_pclass_3_nan = (test_data['Title']=='master') & (test_data['Pclass']==3) & (test_data['Age_nan_status']==1)\ntest_data.loc[condition_master_pclass_1_nan,'Age'] = mean_master_pclass_1\ntest_data.loc[condition_master_pclass_2_nan,'Age'] = mean_master_pclass_2\ntest_data.loc[condition_master_pclass_3_nan,'Age'] = mean_master_pclass_3","f7e36236":"test_data.info()","d717c5bf":"test_data['cabin_init'] = test_data['Cabin'].map(lambda x: x if pd.isna(x) else x[0])","6dbef590":"test_data['Ticket_length'] = test_data['Ticket'].map(lambda x: len(x))\ntest_data['Ticket_length_bins'] = pd.cut(test_data['Ticket_length'],bins=[0,3.5,4.5,5.5,6.5,7.5,8.5,9.5,10.5,20],labels=[3,4,5,6,7,8,9,10,11])","6ea8063e":"test_data['Surname'] = test_data['Name'].map(fn_surname_extract)\ntest_data_surname_groupby = test_data.groupby(['Surname','Ticket'])\n\n\n# 0 ==> travelling alone\n# 1 ===> travelling in small group of 2 or 3 members\n# 2 ====> travelling in large groups >3 members\n\n\ntest_data['group'] = test_data_surname_groupby.Age.transform(group_size_fn )\n\n\ntest_data['group_wth_child'] = test_data_surname_groupby.Age.transform(min_age_fn)\n\n\ntest_data['group_wth_elder'] = test_data_surname_groupby.Age.transform(elder_age_fn)\n\n\ntest_data['group_female_dominant'] = test_data_surname_groupby.Sex.transform(count_fn)","09642939":"test_data['Embarked'] = test_data['Embarked'].map(lambda x: 'Embarked_nan' if pd.isna(x) else x)\ntest_data['cabin_init'] = test_data['cabin_init'].map(lambda x: 'Cabin_nan' if pd.isna(x) else x)","9cb2b45e":"# Encoding\n#one_hot_obj = OneHotEncoder() # Creating Object OneHot encoding Object\none_hot_array = one_hot_obj.transform(test_data[['Pclass','Title','Embarked','cabin_init','Ticket_length_bins']]) # Outputs sparse matrix for space saving\ntype(one_hot_array)","aa687053":"X_test = pd.DataFrame()  # X is training Data\nX_test[['Pclass_1','Pclass_2','Pclass_3','master', 'miss', 'mr', 'mrs','C', 'Q', 'S','Embarked_nan','cabin_A', 'cabin_B', 'cabin_C', 'cabin_D', 'cabin_E', 'cabin_F', 'cabin_G', 'cabin_T', 'Cabin_nan','Tick_len_3',  'Tick_len_4',  'Tick_len_5',  'Tick_len_6',  'Tick_len_7',  'Tick_len_8',  'Tick_len_9', 'Tick_len_10', 'Tick_len_11']] = one_hot_array.toarray()\nX_test = X_test.drop(['Embarked_nan','Cabin_nan'],axis=1)\nX_test","114100c7":"one_hot_obj.categories_","679eb81f":"test_data.head()","42558938":"#Sex_ordinal_encod_obj = OrdinalEncoder()\nX_test['Sex'] = Sex_ordinal_encod_obj.transform(test_data[['Sex']])\nX_test","f5d438df":"test_data['Age_bins'] = pd.cut(test_data.Age,bins=[0,10,20,30,40,50,60,70,80,120],labels=[1,2,3,4,5,6,7,8,9])","57e2bbd9":"test_data['Fare_bins'] = pd.cut(test_data.Fare,bins=[-5,50,100,150,200,250,300,1000],labels=[1,2,3,4,5,6,7])","e35f856f":"X_test[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']] = test_data[['Age_bins','Fare_bins','Cabin_nan_status','Age_nan_status','SibSp','Parch','group','group_wth_child','group_wth_elder','group_female_dominant']]\nmean_fare = raw_train_data['Fare'].mean()\nX_test.loc[pd.isnull(X_test['Fare_bins']),['Fare_bins']] = 1","450fe095":"X","586ac4b5":"X_test","4ca8b34f":"sgd_clf_2 = SGDClassifier(random_state=42)\nsgd_clf_2.fit(X, y)\ny_test = sgd_clf_2.predict(X_test)\ny_test\noutput = pd.DataFrame()\noutput['PassengerId'] = test_data['PassengerId']\noutput['Survived'] = y_test","5133bb99":"output.to_csv('output.csv',index=False)","fc374407":"best_rf = RandomForestClassifier(random_state=121, criterion='entropy', max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=50)\nX_new = X.drop(['group_female_dominant','group'],axis=1)\nX_test_new = X_test.drop(['group_female_dominant','group'],axis=1)\nbest_rf.fit(X, y)\ny_test = best_rf.predict(X_test)\noutput = pd.DataFrame()\noutput['PassengerId'] = test_data['PassengerId']\noutput['Survived'] = y_test\noutput.to_csv('submission.csv',index=False)","add316ea":"# **Feature: SibSp and Parch**","b8bf355f":"Embarked feature doesnt give much information on ages.","66abd439":"**Assumption 1**: Missing values are more likely in the case passengers who didn't survive. Lets create new features showing whether age\/cabin is missing\/nan or not for particular passenger id's. Then, lets try to validate our assumption by plots.","88328e0f":"# **Feature: PClass**","2533cfa3":"# **Final Predictions**","13a37d53":"# **Classification**","cd10633b":"sns.countplot(data = raw_train_data ,x='Age_bins',hue='Survived')","b3386eb4":"# **Feature: Title** (Derived Feature)","d1522be4":"Lets see if other features such as Pclass and Embarked can add more information on missing ages","d918cfb6":"# **Feature: Sex ==> Encoding**","001fcc65":"**Conclusion**: Plot shows nan values are less likely in the case where passengers survived. Hence, Age_nan_status can be use as features.","af2461f9":"**Conclusion**: Title gives a good estimate of ages, hence Assumption 2 stands correct","e46ef11f":"# **Encoding**","e4dcdd82":"# **Features: group, group_wth_child, group_wth_elder, group_female_dominant** (Derived Features)","da2a5887":"**Conclusion**: Plot shows nan values are less likely in the case where passengers survived. Hence, Cabin_nan_status can be use as features.","fb3f0b6a":"We can classify our variables into two types, numerical and catagorical:\n\n- Numerical:\n    - Age\n    - Fare\n    - SibSp\n    - Parch\n- Catagorical:\n    - Sex\n    - Cabin\n    - Embarked\n    - PClass\n    - Title","6e812ea8":"**Random Forest**","ea95d331":"# **Feature: Embarked**","cb89a29c":"# **Feature: Ticket Length** (Derived Feature)","a3b1775f":"**Assumption 2**: The names feature can be helpful in identifying missing age values, i.e. titles in name can be helpful in predicting ages and also in predicting survival.","8010f975":"However, from the plot above you can see that older families are generally travelling in Pclass 1 & 2. Conversely, younger families are traveling in Pclass 3.\n\nHence, we use new feature 'Title' and the existing feature 'Pclass' to fill missing nan values in the 'Age' column using averages.","a1d740bc":"An encoder is used to represent catagorical values as numerical values. This encoding is needed for feeding categorical data to many scikit-learn estimators. \n\nOrdinal encoding assigns each type within a column an integer value, maintaining natural relationship to each other, such as a natural ordering. \n\nOneHot encoding is for categorical variables where no ordinal relationship exists. Forcing an ordinal relationship via an ordinal encoding and allowing the model to assume a natural ordering between categories may result in poor performance or unexpected results. OneHot coding creates a new binary variable for each possible type within a column.\n\n- Encoding required\n    - Sex (Ordinal)\n    - Title (OneHot)\n    - Embarked (OneHot)\n    - Ticket Length\n    - PClass (either) \n- Encoding not required\n    - Age (divided into bins)\n    - Fare (divided into bins)\n    - Cabin_nan_status\n    - Age_nan_status\n    - Group","2a700c88":"# **Feature: Sex**","3478edd0":"# **Feature: Age** (contains null values)","11913f7b":"3 columns contain null values:\n- Age (numerical) has 177 null values\n- Embarked (catagrical) has 2 null values\n- Cabin (catagorical) has 687 null values. This is greater than 50% so replacing\/predicting null values here may be a bad idea","d4c00f36":"Using the same logic as above,\n\n**Assumption 1**: Missing values are more likely in the case passengers who didn't survive. Lets create new features showing whether age\/cabin is missing\/nan or not for particular passenger id's. Then, lets try to validate our assumption by plots.","b67a542d":"# **Feature: Cabin** (contains null values)","18c0745f":"# **Feature: Fare**","a785a8fe":"# **Test data**","35abf185":"# **Feature: Ticket**","8f589451":"# **Classification Algorithm**\n\n**Stochastic Gradient Classifier**"}}