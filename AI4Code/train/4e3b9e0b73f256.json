{"cell_type":{"df4dac2e":"code","e73e752d":"code","23b938ec":"code","03a17257":"code","dd8ed9f3":"code","224d9612":"code","cf68b291":"code","e72a1eae":"code","e1e6aa09":"code","ecdf0691":"code","b8dbc167":"code","9fe31e91":"code","dbd45a2a":"markdown","1b826dbe":"markdown","57ec6cf1":"markdown","ac9706cd":"markdown","363c0aaf":"markdown","9850511f":"markdown","09c92db4":"markdown","c368c29c":"markdown","e9399c3e":"markdown","511246b9":"markdown","70b06d5f":"markdown","6bfcdb1a":"markdown","186b086a":"markdown","eccdeb20":"markdown","8c66480c":"markdown"},"source":{"df4dac2e":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nfrom bokeh.io import output_notebook\nfrom bokeh.plotting import figure, output_file, show\n\n\nfrom bokeh.layouts import column, row, grid\nfrom bokeh.models import ColumnDataSource, FactorRange, HoverTool\nfrom bokeh.palettes import colorblind, Spectral, BuPu, Viridis3\nfrom bokeh.transform import cumsum\n\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import ensemble\nfrom sklearn.model_selection import GridSearchCV\n\n\noutput_notebook()","e73e752d":"input_file = \"\/kaggle\/input\/titanic\/train.csv\"\n\nout_file = \"\/kaggle\/input\/titanic\/test.csv\"\n\ntrain_df = pd.read_csv(input_file)\n\ntrain_df['Embarked'].dropna(inplace=True)\n\n#train_df = pd.get_dummies(train_df,columns = ['Sex','Embarked']).drop(columns = ['Sex_female'])","23b938ec":"def plot_age_prop(dataframe,column='Age'):\n    \n    \n    def get_age_prop(dataframe, a_range):\n\n        \"\"\"return number of people between an age interval\"\"\"\n\n        if isinstance(a_range,tuple):\n\n            number_instance = dataframe.loc[(dataframe[column] >= a_range[0] )& (dataframe[column] < a_range[1])][column].count()\n\n        else :\n            \n            number_instance = dataframe[column].isna().sum()\n            \n        return (number_instance \/ dataframe[column].count())\n\n        \n    \n    data = {\n        'children' : get_age_prop(dataframe, a_range = (0.,18.)),\n        'adult' : get_age_prop(dataframe, a_range = (18., 60.)),\n        'eldery ' : get_age_prop(dataframe, a_range = (60. ,100.)),\n        'missing_values' : get_age_prop(dataframe, None)\n    }\n    \n    data_s = pd.Series(data).reset_index(name='rate').rename(columns = {'index' : 'age_category'})\n    \n    data_s['angle'] = data_s['rate'] \/(data_s['rate'].sum()) * 2*np.pi\n    \n    data_s['color'] = BuPu[4]\n    \n    \n    p = figure(height = 400, title = 'Population distribution across for common classes', toolbar_location = 'left', tools = 'hover', tooltips = \"@age_category : @rate{0.00%}\")\n    \n    p.wedge(x = 0, y =1, radius =0.6, \n            start_angle = cumsum('angle',include_zero = True), \n            end_angle =cumsum('angle'),\n            fill_color = 'color',\n            line_color = 'white',\n            legend_field = 'age_category',\n            source = data_s\n           )\n    \n    \n    p.axis.axis_label = None\n    p.axis.visible = False\n    p.grid.grid_line_color = None\n    \n    \n    show(p)\n    \n    \nplot_age_prop(train_df,'Age')","03a17257":"Pclass_dict = {1 : '1st class', 2 : '2nd class', 3 : '3rd class'}\n\n\nclasses = list(Pclass_dict.values())\n\ngroup = train_df.replace({'Pclass': Pclass_dict}).groupby('Pclass')['Fare']\nfirst_quantile = group.quantile(0.25)\nlast_quantile = group.quantile(0.75)\nmean = group.mean()\n\ninterquantile = last_quantile - first_quantile\n\nupper = last_quantile + interquantile*1.5\n\nlower =  first_quantile - interquantile*1.5\n\n\n\np = figure(title = 'Box Plot disparity of fare depending on classes ',x_range = classes, toolbar_location='right')\n\n## drawing the vertical line, reprenseting the disparity of values for each classes\np.segment(classes, upper,classes, last_quantile, color = 'black')\np.segment(classes, lower,classes, first_quantile, color = 'black')\n\n\n#plotting prices range between the mean and the quantiles\np.vbar(classes, 0.7, mean, last_quantile, fill_color = '#404387' , line_color = 'black')\np.vbar(classes, 0.7, first_quantile, mean, fill_color = '#22A784', line_color = 'black')\n\n\np.rect(classes, lower,0.2, 0.01, color = 'black')\np.rect(classes, upper, 0.2,0.01, color='black')\n\n\np.scatter(classes, mean.to_list(), color = 'white', marker = 'dot', size = 20)\n\n\np.grid.grid_line_color = None\n\n\n\n\nshow(p)","dd8ed9f3":"hist_surv_m, edges_1 = np.histogram(train_df.loc[(train_df['Survived']==1) & (train_df['Sex']=='male')]['Pclass'],bins=3)\n\nhist_dead_m, edges_2 = np.histogram(train_df.loc[(train_df['Survived']==0) & (train_df['Sex']=='male')]['Pclass'],bins=3)\n\nhist_surv_w, edges_3 = np.histogram(train_df.loc[(train_df['Survived']==1) & (train_df['Sex']=='female')]['Pclass'],bins=3)\n\nhist_dead_w, edges_4 = np.histogram(train_df.loc[(train_df['Survived']==0) & (train_df['Sex']==\"female\")]['Pclass'],bins=3)\n\n\n\nfactors = [\n    ('Class1','Women'), ('Class2','Women'),\n    ('Class3','Women'), ('Class1','Men'),\n    ('Class2','Men'), ('Class3','Men')\n]\n\nstate = ['alive','dead']\n\n\nis_alive = list(np.concatenate((hist_surv_w,hist_surv_m), axis = 0))\n\nis_dead = list(np.concatenate((hist_dead_w,hist_dead_m), axis = 0))\n\n\n\nrate = [x\/(x+y) for x,y in zip(is_alive,is_dead)]\n\nsource = ColumnDataSource(data = dict(x = factors,\n                                      alive = is_alive,\n                                      dead = is_dead, \n                                      rate = rate))\n\n\nTOOLTIPS = [\n    (\"people alive\", \"@rate{0.00%} \"),]\n\n\np = figure(x_range=FactorRange(*factors), tooltips = TOOLTIPS, title = \"How Ticket classes and gender affected survivability\")\ncolors = [\"#718dbf\", \"#e84d60\"]\np.vbar_stack(state ,x = 'x' ,width=0.9, color=colors, source = source, legend_label=state)\n\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\np.legend.location = \"top_center\"\np.legend.orientation = \"horizontal\"\nshow(p)\n","224d9612":"\nhist_age, edges_age = np.histogram(train_df['Age'].dropna(), bins = 30)\n\ngroups = train_df.groupby(['Survived', pd.cut(train_df['Age'], edges_age)])\n\np = figure(width = 600, height = 600,title=\"Impact of Age on the Survivability\")\n\np.quad(top =hist_age, bottom = 0, left = edges_age[:-1], right=edges_age[1:], fill_color = \"navy\", alpha =0.5, line_color = 'white')\n\np.line(edges_age[:-1],groups.size().unstack().iloc[1].values,line_width=4, color =colors[1] , alpha=0.7, legend_label=\"alive_people\")\n\np.y_range.start = 0\np.legend.location = \"center_right\"\np.legend.background_fill_color = \"#fefefe\"\np.xaxis.axis_label = 'age'\np.yaxis.axis_label = 'count'\np.grid.grid_line_color=\"white\"\n\nshow(p)","cf68b291":"classes = ['1st Class' , '2nd Class' , '3rd Class']\n\n\n\nhist, binning = pd.cut(train_df['Age'], bins = 20, retbins = True)\n\nfigures = []\n\nfor index, cl in enumerate(classes):\n    \n    \n\n    val = train_df.groupby(['Pclass',hist]).size().unstack().iloc[index].values\n\n\n    p = figure(width = 600, height = 600,title=\"Age distribution for the \"+classes[index])\n\n    p.quad(top =val, bottom = 0, left = binning[:-1], right=binning[1:], fill_color = Viridis3[index], alpha =0.5, line_color = 'white')\n\n\n    p.y_range.start = 0\n    p.xaxis.axis_label = 'age'\n    p.yaxis.axis_label = 'count'\n    p.grid.grid_line_color=\"white\"\n    \n    figures.append(p)\n\nshow(row(figures))","e72a1eae":"def build_grp(dataframe,target_columns,classes):\n\n    grouped = dataframe.groupby(target_columns)['PassengerId'].count()\n\n    dead = list(grouped.unstack().iloc[0].values)\n    alive = list(grouped.unstack().iloc[1].values)\n\n    data = {'x' : classes,\n           'alive' : alive,\n           'dead' : dead}\n    \n    return data\n\n\ndef bokeh_grp_plot(data, classes, colors, state = ['alive','dead'] ):\n    p1 = figure(x_range = classes, title='Histogram of Embarkaction type influence on survival')\n\n    p1.vbar_stack(state ,x = 'x' ,width=0.9, color=colors, source = data, legend_label=state)\n\n    p1.y_range.start = 0\n    p1.xgrid.grid_line_color = None\n    p1.axis.minor_tick_line_color = None\n    p1.legend.location = \"top_left\"\n    p1.legend.orientation = \"horizontal\"\n    \n    return p1\nclasses = ['Embarked_C','Embarked_Q','Embarked_S']\n\ndata = build_grp(train_df,['Survived','Embarked'],classes)\n\np1 = bokeh_grp_plot(data,classes,colors)\nshow(p1)\n    ","e1e6aa09":"train_df.loc[train_df['Parch']>0,'Parch']=1\ntrain_df.loc[train_df['SibSp']>0,'SibSp']=1\n\nclasses2 = ['alone', 'with_parents']\ndata2 = build_grp(train_df , ['Survived','Parch'], classes2)\np2 = bokeh_grp_plot(data2,classes2,colors)\n\n\nclasses3 = ['alone',' with_sibling']\ndata3 = build_grp(train_df , ['Survived','SibSp'], classes3)\np3 = bokeh_grp_plot(data3,classes3,colors)\n\n\nshow(row([p2,p3]))\n","ecdf0691":"## Since Sex column is has only 2 categories, dummy encoding works perfectly\ndef prep_data(target_file):\n    dataframe = pd.read_csv(target_file)\n\n    dataframe['Embarked'].fillna('S', inplace=True)\n\n    dataframe = pd.get_dummies(dataframe,columns = ['Sex','Embarked']).drop(columns = ['Sex_female'])\n\n    return dataframe\n\n\n\n## Concerning the age, I decided to fill missing values by computing the mean for Each PClass\n## For Fare Column we just picked the overall mean\ndef fill_field(dataframe,target_column):\n    \n    compute_mean = dataframe[target_column].mean()\n    \n    dataframe[target_column].fillna(compute_mean, inplace=True)\n    \n    return\n\n\ndef fill_age(dataframe):    \n    \n    missing_mask = dataframe['Age'].isna()\n\n    mapping_dict = dict(zip([1,2,3],train_df.groupby('Pclass').mean()['Age'].values))\n\n    dataframe.loc[missing_mask, 'Age'] = dataframe.loc[missing_mask, 'Pclass'].map(mapping_dict)\n\n    return dataframe\n\n\ntrain_df = prep_data(input_file)\n\ntest_df = prep_data(out_file)\n\nfill_field(test_df,'Fare')\ntrain_df = fill_age(train_df)\ntest_df = fill_age(test_df)","b8dbc167":"## selecting predicators\nx_train_all = train_df[['Pclass','SibSp','Parch','Fare','Sex_male','Embarked_C','Embarked_Q','Embarked_S']].values\ny_train_all = train_df['Survived'].values","9fe31e91":"sc=StandardScaler()\nx_train_all=sc.fit_transform(x_train_all)\n\nX_test = test_df[['Pclass','SibSp','Parch','Fare','Sex_male','Embarked_C','Embarked_Q','Embarked_S']].values\n\nX_test=sc.fit_transform(X_test)\n\nx_train, x_test, y_train, y_test = train_test_split(\n    x_train_all,\n    y_train_all,\n    test_size = 0.15,\n    random_state = 100)\n\n\n\n\n## Decided to apply GridSearch to find best parameters, even though randomForest has a lot of parameters, most of them are too specific and does not require fine-tunning\n## Their impact is low.\nparameters = {'n_estimators' : [k*25 for k in range(1,10)], \n              'max_features' : ['auto'],\n              'bootstrap' : [True],\n              'oob_score' : [True],\n             'max_samples' : [ k*0.1 for k in range(1,10)],\n             'max_depth' : [10]}\n\ngs_rforest = ensemble.RandomForestClassifier()\n\ngs2 = GridSearchCV(gs_rforest,parameters, scoring = 'accuracy', refit=True, verbose = 0)\n\ngs2.fit(x_train_all, y_train_all)\n\n\n\nprint(f\"Optimal parameter for RandomForestClassifier is : {gs2.best_params_}\")\n\npredictions = gs2.predict(X_test)\n\n\nids = test_df['PassengerId']\n\nsubmission_df = pd.DataFrame(data ={'PassengerId': ids, 'Survived' : predictions} ).set_index('PassengerId')\n\n\nsubmission_df.to_csv('submission.csv')\n\n","dbd45a2a":"<a id=\"section-one\"><\/a>\n## Introduction\n\n----\n\n\nOne of the biggest pillar of every Data Science project is Visualisation. It will always helps you to gather insights of the data, and more simply maybe juste understand it. Thus learning how to use visualisations tools is good idea! *If you need graphs, make them beautiful* !\n\n\nThrough this notebook we are going to explore [Titanic dataset](https:\/\/www.kaggle.com\/c\/titanic\/data) and try to deeply understand what raised your chances of survival !\n\n**This notebook focuses on Bokeh visualisations, a powerful and esthetic library**\n","1b826dbe":"<a id=\"section-two\"><\/a>\n## Librairies\n","57ec6cf1":"<a id=\"section-three\"><\/a>\n## Loading data \n\n","ac9706cd":"<a id=\"sub3\"><\/a>\n#### Does your gender helps you to get higher chances of survival?","363c0aaf":"<a id=\"#section-five\"><\/a>\n# Conclusion\n\n---\n\nI hope this notebook gave you a glimpse of what's possible with bokeh,\n\nFeel free to give some advices or idea to improve it !","9850511f":"# Table of Content\n\n* [Introduction](#section-one)\n* [Librairies](#section-two)\n* [Loading Data](#section-three)\n* [Data Visualisation](#section-four)\n  - [Who was on the boat?](#sub1)\n  - [What's the usual fare for each classes?](#sub2)\n  - [Does your gender helps you to get higher chances of survival?](#sub3)\n  - [How age impacted your survival?](#sub4)\n  - [Which embarcation was the best one](#sub5)\n  - [Does travelling with your family helps you in crisis?](#sub6)\n* [Conclusion](#section-five)\n","09c92db4":" ___\n **Box plots helps drawing spread and skewness groups of numerical data through their quartiles.**\n \n **For each Classes the vertical line extending from the box indicates variability outside the upper and lower quartiles.**\n \n - The white dot is the mean\n - Both Boxes  presents how data is spread between quartiles\n - Vertical Line variability of data\n ___","c368c29c":"<a id=\"sub4\"><\/a>\n#### How age impacted your survival?","e9399c3e":"___\nIt clearly appears that around 25% data about ***Age*** is missing, we will need to fix to proprely use this feature.\n\nConsidering other age categories, **we can also keep in mind that children might have a higher chance to survive and elders a lower one.**\n___","511246b9":"---\n\n**So travelling with family seems to gives more chances of survives than travelling alone**\n\n\n---","70b06d5f":"<a id=\"sub2\"><\/a>\n#### What's the usual fare for each classes?","6bfcdb1a":"<a id=\"section-four\"><\/a>\n## Data Visualisations\n___\n\n<a id=\"sub1\"><\/a>\n#### Who was one the boat? \n\n","186b086a":"---\n**Across all classes women tends to survive more. It also clearly appears that 1st classes were the first rescued**\n___","eccdeb20":"<a id=\"sub6\"><\/a>\n#### Does family helps you during crisis?","8c66480c":"<a id=\"sub5\"><\/a>\n#### Which embarcation was the best one?"}}