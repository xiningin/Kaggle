{"cell_type":{"1a6c7ef3":"code","3c1bcd31":"code","d9de16b0":"code","fa87b3f6":"code","8d076bee":"code","f8d1b1de":"code","affdd1fa":"code","7b79c3a6":"code","f1302454":"code","a3c35927":"code","97184d13":"code","410a2d02":"code","0612e400":"code","5374408d":"code","6706f858":"code","223c4135":"code","d8520332":"code","9ec85e3b":"code","d0b48a6a":"code","1570e9f1":"code","ecd7c2cb":"code","cf23f4bf":"code","70972cc8":"code","00791adf":"code","00d102b9":"code","32d22167":"code","dd506aa3":"code","d50d7def":"markdown","4529a358":"markdown","28e0b772":"markdown","9f3ad5bb":"markdown","03e84104":"markdown","47bc6199":"markdown","70f42539":"markdown","4fa662b0":"markdown","f2e37d82":"markdown","638633bb":"markdown","ab95fd4d":"markdown","dc367e97":"markdown","9f07ac03":"markdown","bf70ec28":"markdown","6173a3ff":"markdown","c7a64c58":"markdown","4020f4e6":"markdown","e54ce4a8":"markdown","2981dffe":"markdown","ab585978":"markdown","bd3199a5":"markdown","f8c5d04d":"markdown","07be8fb4":"markdown","448ce086":"markdown","5d5e2cf7":"markdown","986a608a":"markdown"},"source":{"1a6c7ef3":"#import tensorflow\nimport tensorflow as tf\n\n#Becuse tensorflow 2.1.0 enable eager_execution by defulte\n#We must disable it to can use session\n#We will know about eager_execution later\n\ntf.compat.v1.disable_eager_execution()\n\n#print tensorflow version\nprint(\"tensorflow version : \",tf.__version__)","3c1bcd31":"#Define session \nsession =  tf.compat.v1.Session()\n\n#Define pi constant = 3.14\npi = tf.constant(3.14)\n\n#Print value of it using session\nprint(\"pi = \",session.run(pi))\n\n#Close session\nsession.close()","d9de16b0":"print(pi)","fa87b3f6":"#Define multiple constants\nc1 = tf.constant(2.7)\nc2 = tf.constant(3,tf.float32)\nc3 = tf.constant([1,2,3,4,5])\nc4 = tf.constant([[1,2,3],\n                 [4,5,6],\n                 [7,8,9]])\nc5 = tf.constant(\"I love Allah\")\n\n#Another way to use session\n#By using this way we don't need to close a session because it defined only into [with] block \nwith tf.compat.v1.Session() as session:\n    print(session.run(c1))\n    print(session.run(c2))\n    print(session.run(c3))\n    print(session.run(c4))\n    print(session.run(c5)) ","8d076bee":"v1 = tf.Variable(2.7)\nv2 = tf.Variable(3,tf.float32)\nv3 = tf.Variable([1,2,3,4,5])\nv4 = tf.Variable([[1,2,3],\n                [4,5,6],\n                 [7,8,9]])\nv5 = tf.Variable(\"I love Allah\")\n\nwith tf.compat.v1.Session() as session:\n    session.run(tf.compat.v1.global_variables_initializer())\n    print(session.run(v1))\n    print(session.run(v2))\n    print(session.run(v3))\n    print(session.run(v4))\n    print(session.run(v5))","f8d1b1de":"session = tf.compat.v1.Session()\n\npizza = tf.Variable(45.5)\njuice = tf.Variable(7.25)\ntomatos = tf.Variable(5)\n\nsession.run(tf.compat.v1.global_variables_initializer())\n\nprint('pizza price   = ',session.run(pizza))\nprint('juice price   = ',session.run(juice))\nprint('tomatos price = ',session.run(tomatos))\n\nsession.close()","affdd1fa":"session = tf.compat.v1.Session()\n\n#Change variable value using = operator \nx = tf.Variable(5)\nsession.run(tf.compat.v1.global_variables_initializer())\nprint(\"x before change = \",session.run(x))\n\nx = tf.Variable(10)\nsession.run(tf.compat.v1.global_variables_initializer())\nprint(\"x after change = \",session.run(x))\n\n#Change variable value using assign keyord\n#variableName = tf.compat.v1.assign(variableName,newValue)\n\nx = tf.compat.v1.assign(x,20)\nprint(\"x after change using assign = \",session.run(x))","7b79c3a6":"for i in range(5):\n    x = tf.compat.v1.assign(x,x+10)\n    print(\"x = \",session.run(x))\n    \nsession.close()    ","f1302454":"session = tf.compat.v1.Session()\n\n#intialize constant = 2\ntwo = tf.constant(2.0)\n\n#intialize constant = 3.14\npi = tf.constant(3.14)\n\n#intialize placeholder r\nr  = tf.compat.v1.placeholder(tf.float32)\n\n#intialize two_pi variable = 2.0*3.14\ntwo_pi = two*pi\n\n#equation = 2\u03c0r\nc = two_pi*r\n\n#Note : we use feed_dict argument to set palceholders variables \nresult = session.run(c, feed_dict = {r:[1,2,3,4,5]})\nprint(result)\n\nsession.close()","a3c35927":"session = tf.compat.v1.Session()\n\nx = tf.compat.v1.placeholder(tf.float32)\ny = tf.compat.v1.placeholder(tf.float32)\n\neq = x**2 + y**0.5 \n\n#Note : we can set palceholders variables in dictionry without use feed_dict keyword \nresult = session.run(eq , {x:[5,2],y:[25,4]})\nprint(result)\n\nsession.close()","97184d13":"import matplotlib.pyplot as plt\nsession = tf.compat.v1.Session()\n\nw = tf.constant(5.0)\nX = tf.compat.v1.placeholder(tf.float32)\nb = tf.constant(2.0)\n\ny = w*X + b\nXval = list(range(0,10))\n\nprint(\"X values : \",Xval)\n\nresult = session.run(y, feed_dict = {X:Xval})\nprint(\"y values : \",result)\n\nplt.style.use('fivethirtyeight')\nplt.plot(Xval,result,marker='o', markersize = 7,linewidth=3)\nplt.show()\n\nsession.close()","410a2d02":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5.0)\nnum2 = tf.constant(10.5)\nresult = tf.add(num1,num2)\n\nprint(session.run(num1),' + ',session.run(num2),' = ',session.run(result))\n\nsession.close()","0612e400":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant([1,2,3,4,5])\nresult = tf.add(num1,num2)\n\nprint(session.run(num1),' + ',session.run(num2),' = ',session.run(result))\n\nsession.close()","5374408d":"session = tf.compat.v1.Session()\n\nstr1 = tf.constant('Hellow')\nstr2 = tf.constant(' World')\nresult = tf.add(str1,str2)\n\nprint(session.run(str1),' + ',session.run(str2),' = ',session.run(result))\n\nsession.close()","6706f858":"session = tf.compat.v1.Session()\n\nstr1 = tf.constant('Hellow')\nstr2 = tf.constant([' World',' Python',' Machine Learning'])\nresult = tf.add(str1,str2)\n\nprint(session.run(str1),' + ',session.run(str2),' = ',session.run(result))\n\nsession.close()","223c4135":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant(10)\nresult = tf.multiply(num1,num2)\n\nprint(session.run(num1),' x ',session.run(num2),' = ',session.run(result))\n\nsession.close()","d8520332":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-5.25)\nnum2 = tf.constant(10.15)\nresult = tf.multiply(num1,num2)\n\nprint(session.run(num1),' x ',session.run(num2),' = ',session.run(result))\n\nsession.close()","9ec85e3b":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant(10)\nresult = tf.subtract(num1,num2)\n\nprint(session.run(num1),' - ',session.run(num2),' = ',session.run(result))\n\nsession.close()","d0b48a6a":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(25.15)\nnum2 = tf.constant(10.50)\nresult = tf.subtract(num1,num2)\n\nprint(session.run(num1),' - ',session.run(num2),' = ',session.run(result))\n\nsession.close()","1570e9f1":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(25)\nnum2 = tf.constant(10)\nresult = tf.divide(num1,num2)\n\nprint(session.run(num1),' \/ ',session.run(num2),' = ',session.run(result))\n\nsession.close()","ecd7c2cb":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-25.25)\nnum2 = tf.constant(10.0)\nresult = tf.divide(num1,num2)\n\nprint(session.run(num1),' \/ ',session.run(num2),' = ',session.run(result))\n\nsession.close()","cf23f4bf":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(2)\nnum2 = tf.constant(10)\nresult = tf.pow(num1,num2)\n\nprint(session.run(num1),'^',session.run(num2),' = ',session.run(result))\n\nsession.close()","70972cc8":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-5.0)\nnum2 = tf.constant(3.0)\nresult = tf.pow(num1,num2)\n\nprint(session.run(num1),'^',session.run(num2),' = ',session.run(result))\n\nsession.close()","00791adf":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix1 = tf.constant([[1.0,2.0,3.0],\n                       [4.0,5.0,6.0],\n                       [7.0,8.0,9.0]])\n# matrix size = 3x2\nmatrix2 = tf.constant([[1.0,2.0],\n                       [3.0,4.0],\n                       [5.0,6.0]])\n\n# result will be matrix has size = 3x2\nresult = tf.matmul(matrix1,matrix2)\n\nprint(session.run(matrix1))\nprint('x')\nprint(session.run(matrix2))\nprint('=')\nprint(session.run(result))\n\nsession.close()","00d102b9":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix1 = tf.constant([[1.04,2.20,3.40],\n                       [4.10,5.01,6.20],\n                       [7.051,8.0,9.10]])\n# matrix size = 3x2\nmatrix2 = tf.constant([[1,2],\n                       [3,4.0],\n                       [5,6]])\n\n# result will be matrix has size = 3x2\nresult = tf.matmul(matrix1,matrix2)\n\nprint(session.run(matrix1))\nprint('x')\nprint(session.run(matrix2))\nprint('=')\nprint(session.run(result))\n\nsession.close()","32d22167":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix = tf.constant([[1.0,2.0,3.0],\n                       [4.0,5.0,6.0],\n                       [7.0,8.0,9.0]])\n# matrix size = 3x3\nmatrixTransport = tf.compat.v1.matrix_transpose(matrix)\n\n# result will be matrix has size = 3x3\nresult = tf.matmul(matrix,matrixTransport)\n\nprint('original matrix')\nprint(session.run(matrix))\nprint('-------------------------------')\n\nprint('transport matrix')\nprint(session.run(matrixTransport))\nprint('-------------------------------')\n\nprint('original matrix x transport matrix : ')\nprint(session.run(result))\n\nsession.close()","dd506aa3":"graph = tf.compat.v1.get_default_graph()\nfor operation in graph.get_operations():\n    print(operation.name)","d50d7def":"<hr>\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first                 <b>alert<\/b> \u261d has same importance when we use <b>matmul<\/b> function.\n    But \u270b you must know following two case <br> \n    <ol>\n        <li>one matrix has compination datatype as float and int<\/li>\n        <li>one matrix has same datatype as float or int<\/li>\n    <\/ol>\n    At first case if this matrix multiplay by other matrix has same           datatype as float or int you will not have error.<br><br>\n    This we see it in <b>Exampel 2<\/b> when first matrix has same float       datatype and second has compination float at 4.0 and int at other numbers.\n    <br><br>\n    At second case if this matrix multiplay by other matrix has same           datatype and this datatype different from datatype of it you will get     error.\n    <br><br>\n    You can try this case at <b>Exampel 2<\/b> by change 4.0 at second         matrix which stored in <b>matrix2<\/b> constant to 4.  \n    \n<\/div>\n\n\n\n<p>\n    Let's talk about <b>matrix_transpose<\/b> function  We can use it to     get a value of <b>Matrix transport.<\/b>\n<\/p>\n<h2>Matrix transport [......] <sup>T<\/sup><\/h2>\n<hr>\n\n### Exampel \ud83d\udc47","4529a358":"<hr>\n\n# 7. Graph\n\n<p>\n    We can consider <b>graph<\/b> as a history that contain all operations\n    we do it through our code.\n<\/p>","28e0b772":"<hr>\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance when we use <b>pow<\/b> function.\n<\/div>\n\n\n<p>\n    Let's talk about <b>matmul<\/b> function  We can use it to   get a value of <b>Matrix multiplication.<\/b>\n<\/p>\n\n## Matrix multiplication [......] x [......]\n<hr>\n\n### Exampel 1 \ud83d\udc47","9f3ad5bb":"<hr>\n### Exampel 2 \ud83d\udc47","03e84104":"<hr>\n\n### Exampel 2 \ud83d\udc47","47bc6199":"# TensorFlow Tools\n<div>\n    <img src='https:\/\/camo.githubusercontent.com\/0905c7d634421f8aa4ab3ddf19a582572df568e1\/68747470733a2f2f7777772e74656e736f72666c6f772e6f72672f696d616765732f74665f6c6f676f5f736f6369616c2e706e67'>\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n<hr>\n**Welcome all \ud83d\ude0a**\n\nIn This Nootebook we will learn together about tensorflow tools.<br>\nWe will use last version of tensorflow 2.1.0<br><br>\n**Hint: In this Kernel we use some concepts of tensorflow 1.x to clearly understand tensorflow base. But we will go into tensorflow 2.x and know the difference between the two version at following kernels.**\n<br>\n\nWe will go through this Nootebook via following items \ud83d\udc47<br>\n\n1. **TensorFlow Overview**\n2. **Session**\n3. **Constants**\n4. **Variables**\n5. **Placeholders**\n6. **Operations**\n7. **Graph**\n\nNow let's take fast overview about tensorflow.\n\n# 1. tensorflow Overview\n<br>\n\ntensorflow is consist of two words \u27a1 tensor \u2795 flow.<br><br>\n**Tensor :** refer to a matrix of numbers consist of (nxn) dimensions.<br>\n**Flow :** refer to graph that contain computational operations on tensors.<br>\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/1594\/1*EHugUlJHdFnUecICP8DM9Q.png' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n<br><br>\nAs we said that **graph** contain all computational operations on tensors for this graph consist of two elements.<br><br>\n\n**Edges :** refere to data flow or tensors. <br>\n**Nodes :** refere to computational operations.<br><br>\n\n<div>\n    <img src='https:\/\/static.packt-cdn.com\/products\/9781786468574\/graphics\/image_01_006.jpg' width= 400 style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n<br>\n\nThere is important term called **Rank** that refere to dimensions of data into tensors. let's see \ud83d\udc47<br>\n\n* Rank 0 : refer to tensor that contain singel value.\n* Rank 1 : refer to tensor that contain a vector (1x1) dimension\n* Rank 2 : refer to tensor that contain a 2D matrix\n* Rank 3 : refer to tensor that contain a 3D matrix\n* Rank n : refer to tensor that contain a nD matrix\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/1000\/0*jGB1CGQ9HdeUwlgB' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n<hr>\n\n\n# 2.  Session\n\n<p>A session allows to execute graphs or part of graphs.<br>\nIt allocates resources for that and holds the actual values of intermediate results and variables.<\/p>\n\n<div>\n    <img src='https:\/\/www.easy-tensorflow.com\/files\/1_1.gif' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n**So taht we can say that Session is a framework that combine edges and nodes.**\n<br>\n\nThere is other image that show session content.\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/2994\/1*vPb9E0Yd1QUAD0oFmAgaOw.png' width= 500 style=\"float:left\">\n<\/div>\n\n<div style=\"clear:both\"><\/div><hr>\n\nAs most programming language like **C++, C#, Java, etc** we must define variable type. So let's know variable types in tensorflow.<br>\n\nLet's start with Constant type.\n\n# 3. Constants\n\nWe can defiend our constants using **constant** keyword.","70f42539":"<hr>\n### Exampel 2 \ud83d\udc47","4fa662b0":"<hr>\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at previous             <b>alert<\/b> \u261d has same importance in <b>multiplication<\/b>.\n<\/div>\n\n\n<p>\n    Let's talk about <b>subtract<\/b> function We can use it to <b>Number subtraction.<\/b>\n<\/p>\n\n## Number subtraction<hr>\n\n### Exampel 1 \ud83d\udc47","f2e37d82":"<hr>\n# 5. Placeholders\n\n<p>\nA <b>placeholder<\/b> is simply a variable that we will assign data to \nat a later date.<br>It allows us to create our operations and build our computation graph, without needing the data.\n<br>\n    \nIn <b>TensorFlow<\/b> terminology,we then feed data into the graph through these <b>placeholders.<\/b> \n<\/p>\n\n## Exampel 1 \ud83d\udc47\n\n<p>\n    Assume we want to know a values of <b>C<\/b> for this equation \n    <code>C = 2\u03c0r<\/code> for this follwing values <br>For \n    <code>r = 1,2,3,4,5<\/code> to compute a circle perimeter for each         value of <b>r<\/b>.\n<\/p>\n\n<p>\nYou can try it using <a href='https:\/\/www.google.com\/search?q=circle+perimeter+equation&oq=circle+perimeter+equation&aqs=chrome..69i57j0l6.1413j0j9&sourceid=chrome&ie=UTF-8'>google<\/a> \n<\/p>","638633bb":"<hr>\n# 6. Operations\n\n<p>\n    In this section we will talk about <b>Tensorflow Operations<\/b> \ud83d\udc47<br>\n    <ul>\n        <li>add<\/li>\n        <li>multiply<\/li>\n        <li>subtract<\/li>\n        <li>divide<\/li>\n        <li>pow<\/li>\n        <li>matmul<\/li>\n        <li>matrix_transpose<\/li>\n    <\/ul>\n<\/p>\n\n<p>\n    Let's talk about <b>add<\/b> function We can use it to \ud83d\udc47 <br>\n    <ul>\n        <li>Number summition<\/li>\n        <li>String concatination<\/li>\n     <\/ul>\n     \n<\/p>\n\n## Number summition<hr>\n### Exampel 1 \ud83d\udc47\n    \n","ab95fd4d":"<hr>\n## Exampel 3 \ud83d\udc47\n\nIn this exampel we will build **linear regression** equation using tensorflow. <code>equation = w.X + b<\/code>","dc367e97":"<hr>\n\n### Exampel 2 \ud83d\udc47","9f07ac03":"<hr>\n\n### Exampel 2 \ud83d\udc47","bf70ec28":"<hr>\n### Exampel 2 \ud83d\udc47","6173a3ff":"<hr>\n\n<div>\n    \ud83c\udf81 <b>Congratulations<\/b> \ud83d\ude0a<br><br>\n    Now we finish <b>Tensorflow basics<\/b> and we will know more about <b>Tensorflow Framework<\/b> in other kernels.<br>\n    Good luck \ud83d\udc4d\n<\/div>\n\n<br>\n\n<h1>Please If you find this kernel useful, upvote it to help others see it \ud83d\ude0a<\/h1>","c7a64c58":"<hr>\n### Exampel 2 \ud83d\udc47","4020f4e6":"<hr>\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance in <b>dividation<\/b>.\n<\/div>\n\n\n<p>\n    Let's talk about <b>pow<\/b> function We can use it to  get a value of <b>x<sup>y<\/sup>.<\/b>\n<\/p>\n\n<h3>x<sup>y<\/sup><\/h3><hr>\n\n### Exampel 1 \ud83d\udc47","e54ce4a8":"<hr>\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance in <b>subtraction<\/b>.\n<\/div>\n\n<p>\n    Let's talk about <b>divide<\/b> function We can use it to  <b>Number dividation.<\/b>\n<\/p>\n\n## Number dividation<hr>\n\n### Exampel 1 \ud83d\udc47","2981dffe":"**We can change variable value by equal operator (=) or assign keyword**\n<br>\n\n## Exampel 1 \ud83d\udc47","ab585978":"<hr>\n\n## Exampel 2 \ud83d\udc47","bd3199a5":"\n<p>\n    Let's talk about <b>multiply<\/b> function We can use it to  <b>Number multiplication.<\/b>\n<\/p>\n\n## Number multiplication<hr>\n\n### Exampel 1 \ud83d\udc47","f8c5d04d":"**In above code pi is a tensor of rank 0**\n<br>\n\nLet's print pi without use session for clearly understand.","07be8fb4":"<hr>\n## Exampel 2 \ud83d\udc47","448ce086":"<hr>\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    You must make sure that two numbers you will add have the same             <b>datatype<\/b><br>\n    If you add <code>5 + 10.5<\/code> you will get error because 5 is <b>int<\/b> but 10.5 is <b>float<\/b>,<br> To avoid this problem you must add <code>5.0 + 10.5<\/code> to get 15.5 \n<\/div>\n<br>\n\n## String concatination<hr>\n\n### Exampel 1 \ud83d\udc47","5d5e2cf7":"<hr>\n\n## Exampel 2 \ud83d\udc47","986a608a":"<hr>\n\nLet's know variable type.\n# 4. Variables\n\nWe can defiend our constants using **Variables** keyword.<br>\n\nWe must run the below \ud83d\udc47 code into session before using our variable by consider that session variable name is **session**.\n<br>\n\n<code>session.run(tf.compat.v1.global_variables_initializer())<\/code>\n\n## Exampel 1 \ud83d\udc47"}}