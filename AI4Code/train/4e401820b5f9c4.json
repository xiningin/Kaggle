{"cell_type":{"95a6782c":"code","b8efa7aa":"code","b8377814":"code","e7576576":"code","c2797507":"code","e5318063":"code","2879aa31":"code","7bcb21ac":"code","d091ff82":"code","aa928d2b":"code","87d7cdbb":"code","e515152c":"code","67740f06":"code","598aba48":"code","ba66bddc":"markdown","7f30e6bd":"markdown","7ea98258":"markdown","f7f15035":"markdown","494eabf5":"markdown","91f4ddab":"markdown","097c4d29":"markdown"},"source":{"95a6782c":"import pandas as pd\nfull_data = pd.read_csv('..\/input\/housing-prices-in-london\/London.csv')\nfull_data","b8efa7aa":"from geopy import geocoders\n\n# Instantiate a geocoder\n# Note: Nominatim requires user_agent field to be filled with\n# a general idea of what you are using Nominatim for.\ngeocoder = geocoders.Nominatim(user_agent = 'kaggle data science london housing price')","b8377814":"# Use the geocoder to send a sample request,\n# plus additional address details.\nresult = geocoder.geocode('London', addressdetails = True)\nresult","e7576576":"result.point","c2797507":"(result.latitude, result.longitude, result.altitude)","e5318063":"result.raw\n\n# The 'address' field is our juicy information.","2879aa31":"# Search for Hornsey Town Hall within Great Britain only.\nresult = geocoder.geocode('Hornsey Town Hall', addressdetails = True, country_codes = 'gb')\nresult","7bcb21ac":"# This is a helper function to screen in only these fields\ncols = ['suburb', 'town', 'city', 'state_district', 'state', 'country']\ndef geocode(query):\n    # Make a geocoding request with query,\n    # restrict the results to Great Britain,\n    # and give detailed address structure.\n    result = geocoder.geocode(query, country_codes = 'gb', addressdetails = True)\n    \n    # If there is no result with that query, return None\n    if result is None:\n        return None\n    \n    # If there is a result, return only the desired fields\n    address = result.raw['address']\n    address = {key: value for key, value in address.items() if key in cols}\n    return address\n\n# Rate limit the requests to only 20 requests per second max.\nfrom geopy.extra.rate_limiter import RateLimiter\ngeocode = RateLimiter(geocode, min_delay_seconds = 1\/20)","d091ff82":"# Call our function above with a postcode\naddr = geocode('SW19 8NY')\naddr","aa928d2b":"# Call our function above with a street name plus city\naddr = geocode('Seward Street, London')\naddr","87d7cdbb":"# Call our function with a place that definitely does not exist\n# in Great Britain\naddr = geocode('Uttar Pradesh')\naddr is None","e515152c":"# Call our function with a typo\naddr = geocode('Birminghm')\naddr is None","67740f06":"pd.json_normalize(full_data[\"Postal Code\"].sample(10).apply(geocode))","598aba48":"%%time\n\n# Get a fully structured dataframe of address by searching for UK postcodes\n# in Nominatim's OpeenStreetMap database.\nnominatim_address = full_data['Postal Code'].apply(geocode)\n\n# Convert the Series of dict into proper dataframe\nnominatim_address = pd.json_normalize(nominatim_address)\n\n# Append the original Postal Code to the left\nnominatim_address = pd.concat([full_data['Postal Code'], nominatim_address], axis = 1)\n\n# Display\nnominatim_address","ba66bddc":"Some caveat:\n\n- Nominatim is an open-source, free APIs, provided by community contributions and donations. Being free, it rate-limits your use -- the above cell takes about ~30 minutes for ~3500 entries or about 2 entries per second. You are also not allowed to do bulk-geocoding and scraping, it violates the terms of service.\n\n- Nominatim's database (OpenStreetMap) is also powered by community contributions. In my experience, when I try to use Nominatim on rural or remote places, the results get less detailed -- maybe because there's less contributors for that area. However, it's still a very capable free alternative for research and experiment purposes.\n\n- Nominatim does not handle typos! You get what you type in! This is good, actually; so you won't get coordinates of a wrong place halfway across the world due to mistyping on you or your data's end.","7f30e6bd":"# Closing\n\nThat's it! I hope this notebook helps you in dealing with addresses and other location-related data by using free, open-source, geocoding APIs. Being a citizen of the internet that loves freedom in research, you know I love free things ;)\n\nFeel free to upvote and fork if you like to try this yourself. Keep learning and happy data-sciencing!","7ea98258":"# The response object\n\nThe following cells demonstrate what can be accessed from the `geopy`'s resulting Location object.","f7f15035":"# What is a geocoding API?\n\nThink Google Maps: you can send them a query string and they will search for that string and if they find a matching place\/location, they'll send back a coordinate. They can also give you the more structured address of that location:\n\n- street\n- district\n- state\n- country\n- even maybe postal codes, if available!\n\n`geopy` provides simple, Pythonic interface for the APIs so you won't craft the requests and parse the responses by hand. One of the free and open-source geocoding APIs is Nominatim, provided by OpenStreetMap contributors.","494eabf5":"# Introduction\n\nEver dealt with geographical data (including physical addresses)?\n\nEver wanted to get accurate coordinates of a given city, place, or even a building's address?\n\nEver wanted to engineer a location-related feature?\n\nI found myself in the same situation and I end up using `geopy`, a Python interface for geocoding APIs. This notebook demonstrates my use of `geopy` to extract information from postcodes and other location-related fields.\n\nEnjoy!","91f4ddab":"`result.raw['address']` above will return a dictionary that enlists a very neatly structured address hierarchy. If we use it with specific enough place, we can even get the name of the building, street, and the surrounding suburbs!","097c4d29":"# Processing and rate-limiting\n\nWe can make the geocoding calls more convenient by making a helper function that\n\n- process our inputs by adding arguments that we'll always use, and\n- process the outputs by giving only fields that we want.\n\nFurthermore, we can rate-limit our requests so we don't overwhelm the server."}}