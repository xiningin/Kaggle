{"cell_type":{"0bf88589":"code","57e9055b":"code","ebc2ed7b":"code","bb245f38":"code","bda594db":"code","3fa6ed21":"code","c2f85156":"code","34b0bd8f":"code","8c23eb2e":"code","aeb64b6e":"code","53490474":"code","a1e2babe":"code","fd2e438c":"code","02a67de6":"markdown","52dbd09b":"markdown","0daf9e0e":"markdown","f81a0f86":"markdown","62bd1dfe":"markdown","81f6205f":"markdown"},"source":{"0bf88589":"import re\nimport numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","57e9055b":"train_path = '\/kaggle\/input\/tweet-sentiment-extraction\/train.csv'\ntest_path = '\/kaggle\/input\/tweet-sentiment-extraction\/test.csv'\nsubmit_path = '\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv'","ebc2ed7b":"df = pd.read_csv(train_path)\ndf.columns","bb245f38":"df.dropna(axis = 0, how ='any',inplace=True)\n\ndf.text = df.text.str.strip()\ndf.selected_text = df.selected_text.str.strip()","bda594db":"import nltk\nfrom nltk.tokenize import TreebankWordTokenizer\n# from nltk.tokenize import sent_tokenize, word_tokenize\ntwt = TreebankWordTokenizer()","3fa6ed21":"df['span_list'] = df.text.apply(twt.span_tokenize)\ndf[['text', 'span_list']].head()","c2f85156":"def get_iob(text, selected_text, twt=twt, sentiment=None):\n    \"\"\"\n    :param text: text\n    :param selected_text: selected_text\n    :param twt: Tokenizer that has `span_tokenize()` function\n    :param sentiment: add sentiment info to IB tag e.g. `B-positive`, `I-neutral`\n    :returns: iob string\n    \"\"\"\n    sentiment_dict = {'positive':'POS', 'negative':'NEG', 'neutral': 'NEU'}\n\n    start, end = re.search(re.escape(selected_text), text).span()\n    # list of (start_idx, stop_idx)\n    span_list = twt.span_tokenize(text)\n    \n    iob_list = []\n    for start_sp, end_sp in span_list:\n        iob_tag = 'O'\n        if start_sp == start:\n            iob_tag = 'B'\n        elif start < start_sp and end_sp <= end:\n            iob_tag = 'I'\n            \n        if sentiment is not None and iob_tag!='O':\n            iob_tag += '-{}'.format(sentiment_dict[sentiment])\n        iob_list.append(iob_tag)\n    return ' '.join(iob_list)\n    \n\ndef get_iob_format_from_row(row, twt=twt, add_sentiment=False):\n    if add_sentiment:\n        return get_iob(row.text, row.selected_text, twt=twt, sentiment=row.sentiment)\n    return get_iob(row.text, row.selected_text, twt=twt)","34b0bd8f":"df.head().apply(get_iob_format_from_row,axis=1)","8c23eb2e":"# iob with sentiment info\ndf.head().apply(lambda x:get_iob_format_from_row(x, add_sentiment=True), axis=1)","aeb64b6e":"df_pn = df.query('sentiment!=\"neutral\"').copy()\ndf_pn['iob'] = df_pn.apply(lambda x:get_iob_format_from_row(x, add_sentiment=True), axis=1)\ndf_pn[['text','iob']].head()","53490474":"word_data = df_pn['text'].str.split()\niob_data = df_pn['iob'].str.split()","a1e2babe":"df_test = pd.read_csv(test_path)\ndf_test.columns","fd2e438c":"df_test.text = df_test.text.str.strip()\n# df_test_pn = df_test.query('sentiment!=\"neutral\"').copy()\n\n# twt = TreebankWordTokenizer()\ndf_test['text_list'] = df_test.text.apply(lambda x: [x[start_i:end_i] for start_i, end_i in twt.span_tokenize(x)])\n\n# df_test_pn['pos_list'] = df_test_pn.text.apply(lambda x: nltk.pos_tag([x[start_i:end_i] for start_i, end_i in twt.span_tokenize(x)]))\ndf_test.head()","02a67de6":"# test data\n\ndata without `selected_text`","52dbd09b":"# apply DataFrame","0daf9e0e":"# IOB format\n\nconvert training data into IOB format to apply NER approach.\n\n> https:\/\/en.wikipedia.org\/wiki\/Inside%E2%80%93outside%E2%80%93beginning_(tagging)","f81a0f86":"# add IOB tag with NLTK\n\nTo keep information of char position, use [TreebankWordTokenizer.span_tokenize](https:\/\/www.nltk.org\/api\/nltk.tokenize.html#nltk.tokenize.treebank.TreebankWordTokenizer.span_tokenize).\n\nanother `span_tokenize` is OK. \n([nltk.tokenize package](https:\/\/docs.huihoo.com\/nltk\/3.0\/api\/nltk.tokenize.html) for your reference)\n\n","62bd1dfe":"### sample output","81f6205f":"## preprocess\n\n- drop na\n- strip text\n    - strip URL and other words (if needed)"}}