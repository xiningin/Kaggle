{"cell_type":{"9cbde8c8":"code","26ff5382":"code","db0b6f85":"code","803df0ca":"code","b69f78be":"code","4907bf22":"code","64b515df":"code","695972ff":"code","3dd1b458":"code","217a4cd8":"code","0d814476":"code","c6268a1a":"code","588bedf8":"code","5fdfff52":"code","3ab371ca":"code","d7e3beeb":"code","ff2f1a10":"code","4fa652bc":"code","8d850380":"code","e04dd5cf":"markdown","9772e492":"markdown"},"source":{"9cbde8c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport statsmodels.formula.api as smf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26ff5382":"sales = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","db0b6f85":"sales.head()","803df0ca":"sales.info()","b69f78be":"sales.describe()","4907bf22":"sales['price_th'] = sales['price'] \/ 1000\nsales[['price', 'price_th']].head()","64b515df":"sales.corr()","695972ff":"sales.isna().sum()","3dd1b458":"sns.regplot(x = sales['sqft_living'], y = sales['price_th'])","217a4cd8":"model = smf.ols('price_th ~ sqft_living', data=sales)\nres = model.fit()\nres.summary()","0d814476":"sales.columns","c6268a1a":"\nx = sales.loc[:, ['bedrooms','bathrooms','floors', 'sqft_living', 'grade', 'yr_built', 'view', 'sqft_lot', 'waterfront', \n                 'condition', 'sqft_above']]\ny = sales.loc[:, 'price_th']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)","588bedf8":"model = LinearRegression().fit(x_train, y_train)\nmodel.score(x_train, y_train)","5fdfff52":"model.coef_","3ab371ca":"model.intercept_","d7e3beeb":"y_pred = model.predict(x_test)","ff2f1a10":"y_test = np.exp(y_test)","4fa652bc":"# y_test = np.exp(y_test)\ny_pred = np.exp(y_pred)","8d850380":"mse = mean_squared_error(y_test, y_pred)\nmae = mean_absolute_error(y_test, y_pred)\nprint('mse: %.3f, mae: %.3f' % (mse, mae)","e04dd5cf":"Price has the highest correlation coefficients with the next features:\n- sqft_living = 0.70\n- grade = 0.67\n- sqft_above = 0.61\n- sqft_living15 = 0.59\n- bathrooms = 0.53","9772e492":"The coefficient of determination (0.65) is higher than in model with one feature (above with sqft_living = 0.49)"}}