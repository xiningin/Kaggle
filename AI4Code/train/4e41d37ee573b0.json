{"cell_type":{"fcb4dffb":"code","1f9958d4":"code","c0bf59de":"code","285d8f06":"code","4d6f9be8":"code","80599cfd":"code","5d833cf0":"code","ad057424":"code","ce46f36b":"code","772c8504":"code","e02c38a0":"code","928af307":"code","daed4ca5":"markdown","85ae0883":"markdown","0fd5f7a2":"markdown","21795ea7":"markdown","58834d40":"markdown","1e559f5f":"markdown","395855c9":"markdown"},"source":{"fcb4dffb":"!pip install -q efficientnet","1f9958d4":"# Asthetics\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)\n\n# General\nfrom kaggle_datasets import KaggleDatasets\nfrom glob import glob\nimport pandas as pd\nimport numpy as np\nimport os\nimport time\nimport cv2\nimport random\nimport shutil\nimport math\nimport re\npd.set_option('display.max_columns', None)\n\n# Visualizations\nfrom PIL import Image\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\n%matplotlib inline\nsns.set(style=\"whitegrid\")\n\n# Machine Learning\n# Pre Procesing\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n# Models\nfrom sklearn.model_selection import train_test_split, KFold\n# Deep Learning\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import EfficientNetB4\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, BatchNormalization, GlobalAveragePooling2D\nfrom tensorflow.keras.callbacks import TensorBoard, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import CategoricalCrossentropy\nimport tensorflow_addons as tfa\nfrom tensorflow_addons.metrics import F1Score, FBetaScore\nfrom tensorflow_addons.callbacks import TQDMProgressBar\nfrom tensorflow.keras.utils import plot_model\n\n#Metrics\nfrom sklearn.metrics import confusion_matrix, classification_report, roc_auc_score\n\nprint('TF',tf.__version__)\n\n# Random Seed Fixing\nRANDOM_SEED = 42\n\ndef seed_everything(seed=RANDOM_SEED):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)\n\nseed_everything()","c0bf59de":"# From https:\/\/www.kaggle.com\/xhlulu\/ranzcr-efficientnet-tpu-training\ndef auto_select_accelerator():\n    TPU_DETECTED = False\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n        TPU_DETECTED =True\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy, TPU_DETECTED","285d8f06":"# Model Params\nKFOLDS = 4\nIMG_SIZES = [256]*KFOLDS\nBATCH_SIZES = [64]*KFOLDS\nEPOCHS = [15]*KFOLDS\nEFF_NETS = [1]*KFOLDS # WHICH EFFICIENTNET B? TO USE\n\n# Model Eval Params\nDISPLAY_PLOT = True\n\n# Inference Params\nWGTS = [1\/KFOLDS]*KFOLDS","4d6f9be8":"strategy, TPU_DETECTED = auto_select_accelerator()\nAUTO = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync","80599cfd":"from tqdm.notebook import tqdm\n\nfiles_test_g = []\nfor i,k in tqdm([(0, 1), (2, 3), (4, 5), (6, 7)]):\n    GCS_PATH = KaggleDatasets().get_gcs_path(f'cqt-g2net-test-{i}-{k}')\n    files_test_g.extend(np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/test*.tfrec'))).tolist())\nnum_train_files = len(files_test_g)\nprint('test_files:',num_train_files)","5d833cf0":"def read_labeled_tfrecord(example):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_id'                     : tf.io.FixedLenFeature([], tf.string),\n        'target'                       : tf.io.FixedLenFeature([], tf.int64)\n    }           \n    example = tf.io.parse_single_example(example, tfrec_format)\n    return prepare_image(example['image']), tf.reshape(tf.cast(example['target'], tf.float32), [1])\n\n\ndef read_unlabeled_tfrecord(example, return_image_id):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_id'                     : tf.io.FixedLenFeature([], tf.string),\n    }\n    example = tf.io.parse_single_example(example, tfrec_format)\n    return prepare_image(example['image']), example['image_id'] if return_image_id else 0\n\n \ndef prepare_image(img, dim=IMG_SIZES[0]):    \n    img = tf.image.resize(tf.image.decode_png(img, channels=3), size=(dim, dim))\n    img = tf.cast(img, tf.float32) \/ 255.0\n    img = tf.reshape(img, [dim,dim, 3])\n            \n    return img\n\ndef count_data_items(fileids):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(fileid).group(1)) \n         for fileid in fileids]\n    return np.sum(n)","ad057424":"def get_dataset(files, shuffle = False, repeat = False, \n                labeled=True, return_image_ids=True, batch_size=16, dim=IMG_SIZES[0]):\n    \n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    ds = ds.cache()\n    \n    if repeat:\n        ds = ds.repeat()\n    \n    if shuffle: \n        ds = ds.shuffle(1024*2)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n        \n    if labeled: \n        ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    else:\n        ds = ds.map(lambda example: read_unlabeled_tfrecord(example, return_image_ids), \n                    num_parallel_calls=AUTO)      \n    \n    ds = ds.batch(batch_size * REPLICAS)\n    ds = ds.prefetch(AUTO)\n    return ds","ce46f36b":"EFNS = [efn.EfficientNetB0, efn.EfficientNetB1, efn.EfficientNetB2, efn.EfficientNetB3, \n        efn.EfficientNetB4, efn.EfficientNetB5, efn.EfficientNetB6, efn.EfficientNetB7]\n\ndef build_model(size, ef=0):\n    inp = tf.keras.layers.Input(shape=(size, size,3))\n    base = EFNS[ef](input_shape=(size,size,3),weights='imagenet',include_top=False)\n    \n    x = base(inp)\n    \n    x = tf.keras.layers.GlobalAvgPool2D()(x)\n    \n    x = tf.keras.layers.Dropout(0.)(x)\n    \n    x = tf.keras.layers.Dense(1,activation='sigmoid')(x)\n    model = tf.keras.Model(inputs=inp, outputs=x)\n    lr_decayed_fn = tf.keras.experimental.CosineDecay(\n                              6e-4,\n                              820*1,\n    )\n\n    opt = tfa.optimizers.AdamW(lr_decayed_fn, learning_rate=7e-4)\n    loss = tf.keras.losses.BinaryCrossentropy() \n    model.compile(optimizer=opt,loss=loss,metrics=['AUC'])\n    return model","772c8504":"skf = KFold(n_splits=KFOLDS,shuffle=True,random_state=RANDOM_SEED)\noof_pred = []; oof_tar = []; oof_val = []; oof_f1 = []; oof_ids = []; oof_folds = [] \n\nfiles_test_g = np.array(files_test_g)\n\nfor fold in range(0, KFOLDS):\n    \n    print('#'*25); print('#### FOLD',fold+1)\n    # BUILD MODEL\n    K.clear_session()\n    \n    with strategy.scope():\n        model = build_model(IMG_SIZES[fold], ef=EFF_NETS[fold])\n    print('\\tLoading model...')\n    \n    model.load_weights(f'..\/input\/cqt-g2net-efficientnetb1-tpu-training\/fold-{fold}.h5')  \n    \n    print('\\tPredict...')\n    ds_test = get_dataset(files_test_g,labeled=False,return_image_ids=True,\n            repeat=False,shuffle=False,dim=IMG_SIZES[fold],batch_size=BATCH_SIZES[fold]*2)\n    \n    _oof_pred = []\n    _oof_tar = []\n    for img, target in tqdm(iter(ds_test)):\n        p = model.predict(img).flatten()\n        t = target.numpy().flatten()\n        _oof_pred.extend(p.tolist())\n        _oof_tar.extend(t.tolist())\n    oof_pred.append(np.array(_oof_pred).flatten())\n    oof_ids.append(np.array(_oof_tar).flatten())\n    sns.distplot(oof_pred[-1])\n    plt.show()               \n    print('\\tFinished...')","e02c38a0":"sub = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')\nsub['id'] = [t.decode(\"utf-8\") for t in oof_ids[-1]]\nsub['target'] = np.mean(oof_pred, axis=0)\nsub = sub.sort_values('id') \nsub.head()","928af307":"sub.to_csv('submission.csv', index=False)","daed4ca5":"# Reading Tfrecords","85ae0883":"# CFG","0fd5f7a2":"# Evaluate","21795ea7":"# Build Model","58834d40":"# Dataset Creation","1e559f5f":"# Train Noteboook\n* [CQT G2Net EfficientNetB1[TPU Training]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-efficientnetb1-tpu-training)\n\n# Train Datasets\n* [Q-Transform TFRecords](https:\/\/www.kaggle.com\/miklgr500\/q-transform-tfrecords)\n    * [CQT G2Net V2 [0 - 1]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-0-1)\n    * [CQT G2Net V2 [2 - 3]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-2-3)\n    * [CQT G2Net V2 [4 - 5]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-4-5)\n    * [CQT G2Net V2 [6 - 7]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-6-7)\n    * [CQT G2Net V2 [8 - 9]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-8-9)\n    * [CQT G2Net V2 [10 - 11]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-10-11)\n    * [CQT G2Net V2 [12 - 13]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-12-13)\n    * [CQT G2Net V2 [14 - 15]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-v2-14-15)\n    \n# Test Datasets\n* [CQT G2Net Test [0 - 1]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-test-0-1)\n* [CQT G2Net Test [2 - 3]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-test-2-3)\n* [CQT G2Net Test [4 - 5]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-test-4-5)\n* [CQT G2Net Test [6 - 7]](https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-test-6-7)","395855c9":"# Next steps\n* Add augmentation\n* Add TTA Inference"}}