{"cell_type":{"27ceaa2d":"code","0038b671":"code","f2ea81ad":"code","96b3ebcc":"code","171f4756":"code","28ace909":"code","182d9df3":"code","e770db88":"code","d67cf112":"code","9d4d1b4d":"code","8338dd05":"code","0693777d":"code","be429be8":"code","17aa3aaa":"code","a6926d05":"code","6e36acb7":"code","4e784776":"code","9157cbb7":"code","137edac6":"code","2540b08f":"code","4cbc7216":"code","ad3559de":"code","25153e63":"code","4a8f8cbb":"code","a19658de":"code","d15f4b40":"code","af3d9f1a":"code","725d7c14":"code","ac94a1d1":"code","2c22f073":"code","f44f0bfe":"code","ee7b70ac":"markdown"},"source":{"27ceaa2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0038b671":"g_data1 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\nw_data1 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')","f2ea81ad":"print(g_data1.info(),g_data1.head(),w_data1.info(),w_data1.head())","96b3ebcc":"# Convert the DATE_TIME column to a datetime data type.\ng_data1['DATE_TIME'] = pd.to_datetime(g_data1['DATE_TIME'], dayfirst = True)\nw_data1['DATE_TIME'] = pd.to_datetime(w_data1['DATE_TIME'], yearfirst = True)\n\nprint(g_data1.info(),g_data1.head(),w_data1.info(),w_data1.head())","171f4756":"g_data = g_data1.groupby('DATE_TIME')[['DC_POWER','AC_POWER', 'DAILY_YIELD','TOTAL_YIELD']].agg('sum').reset_index()\ng_data2 = g_data1.groupby('DATE_TIME')[['DC_POWER','AC_POWER', 'DAILY_YIELD','TOTAL_YIELD']].agg('sum').reset_index()\ng_data,g_data.info()","28ace909":"g_data['time'] = g_data['DATE_TIME'].dt.time\ng_data['date'] = pd.to_datetime(g_data['DATE_TIME'].dt.date)\ng_data","182d9df3":"import matplotlib.pyplot as plt\n\ng_data.plot(x= 'date', y='DC_POWER', style='.', figsize = (15, 8))\ng_data.groupby('date')['DC_POWER'].agg('mean').plot(legend=True, colormap='Reds_r')\nplt.ylabel('Power')\nplt.title('DC POWER PLOT')\nplt.show()","e770db88":"g_data.plot(x= 'time', y=['DC_POWER','AC_POWER'], style='.', figsize = (15, 8))\ng_data.groupby('time')['AC_POWER'].agg('mean').plot(legend=True, colormap='Reds_r')\nplt.ylabel('Power')\nplt.title('DC - AC POWER PLOT')\nplt.show()","d67cf112":"g_data.plot(x='time', y='DAILY_YIELD', style='b.', figsize=(15,5))\ng_data.groupby('time')['DAILY_YIELD'].agg('mean').plot(legend=True, colormap='Reds_r')\nplt.title('DAILY YIELD')\nplt.ylabel('Yield')\nplt.show()","9d4d1b4d":"g_data.plot(x='date', y='DAILY_YIELD', style='b.', figsize=(15,5))\ng_data.groupby('date')['DAILY_YIELD'].agg('mean').plot(legend=True, colormap='Reds_r')\nplt.title('DAILY YIELD')\nplt.ylabel('Yield')\nplt.show()","8338dd05":"w_data = w_data1[['DATE_TIME', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']]\nw_data","0693777d":"g_data1.info(),g_data.info()","be429be8":"df = pd.merge(g_data,w_data,how='inner',on='DATE_TIME')\ndf","17aa3aaa":"df.plot(\"DATE_TIME\", \"AC_POWER\", style=\".\")\ndf.plot(\"DATE_TIME\", \"DC_POWER\", style=\".\")\ndf.plot(\"DATE_TIME\", \"TOTAL_YIELD\", style=\".\")","a6926d05":"import datetime\ndef ExtractFeatures(Plan_df, window_day = 3):\n    merge_Plan = Plan_df.copy()\n    for i in range(1, window_day+1):\n        merge_Plan[f'DATE_TIME_P{i}D'] = merge_Plan['DATE_TIME'] + datetime.timedelta(days=-i)\n        \n    merge_Plan['DATE_TIME_N3D'] = merge_Plan['DATE_TIME'] + datetime.timedelta(days=3)\n    merge_Plan['DATE_TIME_N7D'] = merge_Plan['DATE_TIME'] + datetime.timedelta(days=7)\n\n    \n    for i in range(1, window_day+1):\n        merge_Plan = merge_Plan.join(Plan_df.set_index('DATE_TIME'), how='inner', on=f'DATE_TIME_P{i}D', rsuffix=f'_P{i}D')\n        \n    merge_Plan = merge_Plan.join(Plan_df.set_index('DATE_TIME')[['TOTAL_YIELD']], how='inner', on='DATE_TIME_N3D', rsuffix='_N3D')\n    merge_Plan = merge_Plan.join(Plan_df.set_index('DATE_TIME')[['TOTAL_YIELD']], how='inner', on='DATE_TIME_N7D', rsuffix='_N7D')\n    \n    Col_feature = []\n    Col_Label = ['TOTAL_YIELD_N3D', 'DATE_TIME_N7D']\n    for c in merge_Plan.columns:\n        if c.startswith('DATE_TIME'):\n            continue\n        if c in Col_Label:\n            continue\n        Col_feature.append(c)\n        \n    F    = merge_Plan[Col_feature].values\n    DAY3 = merge_Plan['TOTAL_YIELD_N3D'].values\n    DAY7 = merge_Plan['TOTAL_YIELD_N7D'].values\n    return F, DAY3, DAY7","6e36acb7":"df = pd.merge(g_data2,w_data,how='inner',left_on='DATE_TIME',right_on='DATE_TIME')\n#F, DAY3, DAY7 = ExtractFeatures(merge_Plan)\nF, DAY3, DAY7 = ExtractFeatures(df)","4e784776":"g_data.info()","9157cbb7":"df","137edac6":"F","2540b08f":"DAY3","4cbc7216":"DAY7","ad3559de":"def K_fold_score(fore, F, DAY, cv=10):\n    kf = KFold(n_splits=cv)\n    kf.get_n_splits(F)\n    \n    accuracy = []\n    \n    for train_data, test_data in kf.split(F):\n        F_train = F[train_data]\n        F_test = F[test_data]\n        F_train = F[train_data]\n        F_test = F[test_data]\n        \n        fore.fit(F_train, F_train)\n        F_pred = np.round(fore.predict(F_test))\n        \n        accur = np.sqrt(mean_squared_error(F_test, F_pred))\n        accuracy.append(accur)\n        \n    return np.mean(accuracy)","25153e63":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\n","4a8f8cbb":"Ran_For = RandomForestRegressor(random_state=1)\nDec_Tree = DecisionTreeRegressor(random_state=1)\nRan_For7 = RandomForestRegressor(random_state=1)\nDec_Tree7 = DecisionTreeRegressor(random_state=1)","a19658de":"Random_Forest_Score3DAY = K_fold_score(Ran_For, F, DAY3, cv=10)\nDecision_Tree_Score3DAY = K_fold_score(Dec_Tree, F, DAY3, cv=10)\n\nprint(f'Random Forest Score 3 DAY is: {Random_Forest_Score3DAY}\\nDecision Tree Score 3 DAY is: {Decision_Tree_Score3DAY}')","d15f4b40":"Random_Forest_Score7DAY = K_fold_score(Ran_For7, F, DAY7, cv=10)\nDecision_Tree_Score7DAY = K_fold_score(Dec_Tree7, F, DAY7, cv=10)\n\nprint(f'Random Forest Score 7 DAY is: {Random_Forest_Score7DAY}\\nDecision Tree Score 7 DAY is: {Decision_Tree_Score7DAY}')","af3d9f1a":"df = pd.merge(g_data1, w_data1, on=[\"DATE_TIME\"], how=\"inner\")\ndf = df.drop(columns=[\"PLANT_ID_x\", \"PLANT_ID_y\", \"SOURCE_KEY_y\"])\n\ndf,df.info()","725d7c14":"from sklearn.linear_model import LinearRegression, Ridge, LassoLars\n\nfrom sklearn.metrics import mean_squared_error as MSE","ac94a1d1":"# group range of day that we interested in (day = 3, 7)\ndef group_date(day):\n    cdf = df.copy()\n    date = df[\"DATE_TIME\"]\n\n    for i in range(day):\n        col = list(df.columns)\n        date = date + np.timedelta64(1, \"D\")\n\n        new_col = dict()\n        for j in col[2:]:\n            new_col[j] = j + f\"_{i}\"\n\n        next_day = df.copy()\n        next_day[\"DATE_TIME\"] = date\n        next_day = next_day.rename(columns=new_col)\n\n        cdf = pd.merge(cdf, next_day, on=[\"DATE_TIME\", \"SOURCE_KEY_x\"], how=\"inner\")\n\n    # get rid all nth feature except total_yield\n    col = list(cdf.columns)\n    col = [i for i in col if (i[-1] != str(day-1)) and (i not in [\"DATE_TIME\", \"SOURCE_KEY_x\"])] \n    col.sort()\n\n    col.append(f\"TOTAL_YIELD_{day-1}\")\n\n    ll = [\"DATE_TIME\", \"SOURCE_KEY_x\"]\n    for i in col:\n        ll.append(i)\n\n    cdf = cdf[ll]\n\n    return cdf\n\n# train model and return record of rmse for all model\ndef fit_and_evaluate(cdf, day):\n    np.random.seed(281)\n    cdf = cdf.to_numpy()\n    \n    np.random.shuffle(cdf)\n    \n    LM = LinearRegression()\n    R = Ridge(alpha=0.5)\n    LL = LassoLars(alpha=0.5)\n\n    num = len(cdf)\/\/10\n\n    x = []\n    y = []\n\n    for i in range(len(cdf)):\n        x.append(cdf[i][2:2+day*6])\n        y.append(cdf[i][-1])\n\n    x = np.array(x)\n    y = np.array(y)\n\n    record = pd.DataFrame(dtype=np.float64, columns=[\"LinearRegression\", \"Ridge\", \"LARS Lasso\"])\n\n    for i in range(10):\n        x_test = x[num*i:num*(i+1)]\n        y_test = y[num*i:num*(i+1)]\n\n        x_train = np.concatenate((x[:num*(i-1)], x[num*(i+1):]), axis=0)\n        y_train = np.concatenate((y[:num*(i-1)], y[num*(i+1):]), axis=0)\n\n        record.loc[i] = rmse_model(LM, x_train, y_train, x_test, y_test), \\\n                        rmse_model(R, x_train, y_train, x_test, y_test), \\\n                        rmse_model(LL, x_train, y_train, x_test, y_test)\n    return record\n\n# rmse \ndef rmse_model(model, x_train, y_train, x_test, y_test):\n    model.fit(x_train, y_train)\n    y_hat = model.predict(x_test)\n    return MSE(y_test, y_hat) ** 0.5","2c22f073":"cdf3 = group_date(3)\nrec3 = fit_and_evaluate(cdf3, 3)\n\nprint(\"RMSE FROM PAST 3 DAY\")\nrec3","f44f0bfe":"cdf7 = group_date(7)\nrec7 = fit_and_evaluate(cdf7, 7)\n\nprint(\"RMSE FROM PAST 7 DAY\")\nrec7","ee7b70ac":"\u0e41\u0e1a\u0e1a\u0e44\u0e21\u0e48\u0e15\u0e31\u0e14\u0e04\u0e48\u0e32 SOURCE_KEY"}}