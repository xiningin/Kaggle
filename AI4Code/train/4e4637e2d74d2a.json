{"cell_type":{"53acf774":"code","3b2d4821":"code","e410ea57":"code","8ce55d3a":"code","49598cbd":"code","831b1a7c":"code","847895b6":"code","cd303d3e":"code","1ac63f65":"code","e2a4c592":"code","04d18fd9":"code","439d1e9a":"code","21df14be":"code","7b86905f":"code","b6067bd0":"code","2eaf4993":"code","9b37b3d1":"code","312cf154":"code","22dad233":"code","4d04b700":"code","972f9e6c":"code","b9de3c1e":"code","39d82d38":"code","5cc1315b":"code","ffe9275d":"code","60b0b9be":"code","01a28cb6":"code","51a5a979":"code","bc3352f1":"code","5790ef65":"code","6c4dc5e5":"code","2322cd5c":"code","0b7708bb":"code","23ab5423":"code","357bcaf6":"code","8ba5a11b":"code","26bd2e35":"code","d713a89c":"code","f54fd46d":"code","d3a207e3":"code","6d4c1801":"code","282e1562":"code","0f5ed8d1":"code","52340e97":"code","8320554b":"code","869f564e":"code","6cf12658":"code","1395630b":"code","4d8f4c8f":"code","6e56a5b0":"code","a1668aba":"code","df380920":"code","3285997f":"code","a092f21f":"code","0f6926de":"code","48d77417":"code","27c958da":"code","750eb58b":"code","45d3c48a":"code","e372f37c":"code","3ed561df":"code","8d71d01b":"code","56fdec59":"code","d1a126ef":"code","9aecbf77":"code","822409bc":"code","dbd23dd5":"code","bb7a088a":"code","0973ed70":"code","af5df1ed":"code","88192435":"code","b324357d":"code","615d5c31":"code","c10a5fd7":"code","504907f3":"code","a5118d26":"code","e315f970":"code","bfe9f8ec":"code","4b98b6c9":"code","870c9392":"code","1d777b5b":"code","dcd3cce4":"code","c92984c2":"code","989da1ea":"markdown","2088a9a6":"markdown","913f43ad":"markdown","950c1fab":"markdown","04c57e48":"markdown","8747651c":"markdown","c5112088":"markdown","9a344ad3":"markdown","af6fd016":"markdown","71404e2e":"markdown","53a71f1a":"markdown","373f3b82":"markdown","e7674fba":"markdown","e584c458":"markdown","813c9ab4":"markdown","880ae12f":"markdown","91c60e05":"markdown","481e8fe4":"markdown","d8c5ab69":"markdown"},"source":{"53acf774":"import numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3b2d4821":"training = pd.read_csv(\"..\/input\/train.csv\")\ntesting = pd.read_csv(\"..\/input\/test.csv\")","e410ea57":"training.head(6)","8ce55d3a":"testing.head(6)","49598cbd":"training.shape","831b1a7c":"testing.shape","847895b6":"training.info()","cd303d3e":"testing.info()","1ac63f65":"training.isnull().sum()","e2a4c592":"testing.isnull().sum()","04d18fd9":"\ndef  bar_chart(feature):\n    survived = training[training['Survived']==1][feature].value_counts()\n    dead = training[training['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","439d1e9a":"bar_chart('Sex')","21df14be":"bar_chart('Pclass')","7b86905f":"bar_chart('SibSp')","b6067bd0":"bar_chart('Parch')","2eaf4993":"bar_chart('Embarked')","9b37b3d1":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/t\/5090b249e4b047ba54dfd258\/1351660113175\/TItanic-Survival-Infographic.jpg?format=1500w\")","312cf154":"train_test_data = [training, testing] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","22dad233":"training['Title'].value_counts()","4d04b700":"\ntesting['Title'].value_counts()","972f9e6c":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","b9de3c1e":"training.head()","39d82d38":"testing.head()","5cc1315b":"bar_chart('Title')","ffe9275d":"# delete unnecessary feature from dataset\ntraining.drop('Name', axis=1, inplace=True)\ntesting.drop('Name', axis=1, inplace=True)","60b0b9be":"\ntraining.head()","01a28cb6":"testing.head()","51a5a979":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","bc3352f1":"bar_chart('Sex')","5790ef65":"\n# fill missing age with median age for each title (Mr, Mrs, Miss, Others)# fill m \ntraining[\"Age\"].fillna(training.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntesting[\"Age\"].fillna(testing.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","6c4dc5e5":"training.head(30)\ntraining.groupby(\"Title\")[\"Age\"].transform(\"median\")","2322cd5c":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\n \nplt.show()","0b7708bb":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","23ab5423":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","357bcaf6":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","8ba5a11b":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","26bd2e35":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, training['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","d713a89c":"training.info()","f54fd46d":"testing.info()","d3a207e3":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","6d4c1801":"training.head()","282e1562":"bar_chart('Age')","0f5ed8d1":"Pclass1 = training[training['Pclass']==1]['Embarked'].value_counts()\nPclass2 = training[training['Pclass']==2]['Embarked'].value_counts()\nPclass3 = training[training['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","52340e97":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","8320554b":"\ntraining.head()","869f564e":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","6cf12658":"\n# fill missing Fare with median fare for each Pclass# fill m \ntraining[\"Fare\"].fillna(training.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntesting[\"Fare\"].fillna(testing.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntraining.head(50)","1395630b":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, training['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","4d8f4c8f":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, training['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","6e56a5b0":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, training['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","a1668aba":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, training['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","df380920":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","3285997f":"training.head()","a092f21f":"training.Cabin.value_counts()","0f6926de":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","48d77417":"Pclass1 = training[training['Pclass']==1]['Cabin'].value_counts()\nPclass2 = training[training['Pclass']==2]['Cabin'].value_counts()\nPclass3 = training[training['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","27c958da":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","750eb58b":"# fill missing Fare with median fare for each Pclass# fill m \ntraining[\"Cabin\"].fillna(training.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntesting[\"Cabin\"].fillna(testing.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","45d3c48a":"training[\"FamilySize\"] = training[\"SibSp\"] + training[\"Parch\"] + 1\ntesting[\"FamilySize\"] = testing[\"SibSp\"] + testing[\"Parch\"] + 1","e372f37c":"facet = sns.FacetGrid(training, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, training['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","3ed561df":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","8d71d01b":"training.head()","56fdec59":"testing.head()","d1a126ef":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntraining = training.drop(features_drop, axis=1)\ntesting = testing.drop(features_drop, axis=1)\ntraining = training.drop(['PassengerId'], axis=1)","9aecbf77":"train_data = training.drop('Survived', axis=1)\ntarget = training['Survived']\n\ntrain_data.shape, target.shape","822409bc":"train_data.head(10)","dbd23dd5":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","bb7a088a":"training.info()","0973ed70":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","af5df1ed":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","88192435":"# kNN Score\nround(np.mean(score)*100, 2)","b324357d":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","615d5c31":"# decision tree Score\nround(np.mean(score)*100, 2)","c10a5fd7":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","504907f3":"# Random Forest Score\nround(np.mean(score)*100, 2)","a5118d26":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e315f970":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","bfe9f8ec":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","4b98b6c9":"round(np.mean(score)*100,2)","870c9392":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = testing.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","1d777b5b":"submission = pd.DataFrame({\n        \"PassengerId\": testing[\"PassengerId\"],\n        \"Survived\": prediction\n    })\nos.chdir(\"\/kaggle\/working\/\")\n\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","dcd3cce4":"submission = pd.read_csv('\/kaggle\/working\/submission.csv')\nsubmission.info()\nsubmission.head(418)","c92984c2":"print(os.listdir(\"..\/working\/\"))","989da1ea":"Inporting Data series","2088a9a6":"#  Naive Bayes","913f43ad":"# FamilySize\n","950c1fab":"# Embarked\n filling missing values","04c57e48":"# Modelling","8747651c":"Lets see first 6 rows","c5112088":"# Decision Tree","9a344ad3":"resources\n\nhttps:\/\/www.kaggle.com\/enespolat\/kernels\/notebooks\/new?forkParentScriptVersionId=5148993\nhttps:\/\/chrisalbon.com\/python\/data_wrangling\/pandas_dataframe_count_values\/","af6fd016":"# Fare\n","71404e2e":"# Age\nLet's use Title's median age for missing Age","53a71f1a":"# Ramdom Forest","373f3b82":"# Testing","e7674fba":"# kNN","e584c458":"VISUALIZATION","813c9ab4":"# Cross Validation (K-fold)","880ae12f":"# Binning\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4","91c60e05":"# SVM","481e8fe4":"# Cabin","d8c5ab69":"\nmore than 50% of 1st class are from S embark\n\nmore than 50% of 2nd class are from S embark\n\nmore than 50% of 3rd class are from S embark\n\n\nfill out missing embark with S embark"}}