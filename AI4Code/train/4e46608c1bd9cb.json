{"cell_type":{"f7ced47a":"code","6cad7b3c":"code","1b4b4d62":"code","04d44302":"code","11f4869a":"code","48911311":"code","1d3d1704":"code","e513c357":"code","bf230e9d":"code","86f793a8":"code","12e1394e":"code","fc91dab6":"code","60a3ea03":"code","67dd309a":"code","fd55679b":"code","40eec584":"code","ba1b6212":"code","2f7e55f8":"code","bf4e1967":"code","da1da528":"code","c72de5ab":"code","1663bd75":"code","6d92011e":"code","3e05fe05":"code","745ff5c1":"code","aa276e73":"code","6ea9a0b0":"code","c4d8caf8":"markdown","13bc61f7":"markdown","3addba8f":"markdown","446a3f9b":"markdown","515139cb":"markdown","c9c7c463":"markdown","fa213f04":"markdown","c1ac1062":"markdown","d8c1ef93":"markdown","df9b19c5":"markdown","f5d67f5f":"markdown","bbfb9fee":"markdown","c5892e1c":"markdown","bbbe0f5f":"markdown","6cc88b3f":"markdown","978c8f21":"markdown","6e8ccaad":"markdown","10715f8c":"markdown","5bfd24b4":"markdown","8be0022d":"markdown","cf3a3ed3":"markdown","d70aa89c":"markdown","d88970b3":"markdown","02422741":"markdown"},"source":{"f7ced47a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as srn\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cad7b3c":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")","1b4b4d62":"data.head() #First 5 rows","04d44302":"data.tail() #Last 5 rows","11f4869a":"data.info","48911311":"data.columns","1d3d1704":"data.corr() #This shows us the table of correlation","e513c357":"fig,ax = plt.subplots(figsize=(30,30))\nsrn.heatmap(data.corr(),annot=True,linewidth=5,fmt = \"0.1f\",ax=ax)\nplt.show()","bf230e9d":"#Dropping some columns\ndata2 = data.loc[:,[\"Name\",\"Age\",\"Overall\",\"Potential\",\"Position\",\"Skill Moves\",\"Weak Foot\"]]\n\n#Creating variables that contains mean values\nby_skillmove = data2.groupby(\"Skill Moves\").mean()\nby_age = data2.groupby(\"Age\").mean()\nby_position = data2.groupby(\"Position\").mean()\n\nby_age","86f793a8":"by_position","12e1394e":"by_skillmove","fc91dab6":"def barplot(var,f1,f2,ax1,ax2):\n    figure = plt.figure(figsize=(f1,f2))\n    columns = [i for i in var.columns]\n    for clmn in columns:\n        ax = figure.add_subplot(ax1,ax2,columns.index(clmn)+1)\n        plt.bar(var.index,var[clmn],label = clmn)\n        plt.legend(loc=\"upper right\")\n        plt.xticks(rotation=45)\n    plt.show()\n    plt.tight_layout()\n    \nbarplot(by_age,12,6,2,2)","60a3ea03":"barplot(by_position,25,14,3,2)","67dd309a":"barplot(by_skillmove,12,8,2,2)","fd55679b":"data.describe()","40eec584":"#And now,I am going to start with mean visualization with using boxplot\n\ndscrb = data.corr()\n\nftr_list = [i for i in dscrb.columns]\nftr_list.remove(\"Unnamed: 0\")\nftr_list.remove(\"ID\")\n\ndef boxplot_creator(ftr_li):\n    figure = plt.figure(figsize=(20,20))\n    for i in range(0,len(ftr_li)):\n        ax = figure.add_subplot(6,7,i+1)\n        data.boxplot(column=ftr_li[i],grid=True)\n    plt.show()\n    plt.tight_layout()\n\nboxplot_creator(ftr_list)\n","ba1b6212":"numerical_features = [i for i in data.describe().columns ]\nnumerical_features.remove(\"Unnamed: 0\")\nnumerical_features.remove(\"ID\")\ncolors = [\"Red\",\"Blue\",\"Green\",\"Brown\",\"Cyan\",\"Pink\",\"Purple\"]\n\ndef histogram_creator(ftr_list,color_li):\n    \n    figure = plt.figure(figsize=(25,25))   \n    clr_nmb = 0\n    for i in range(0,len(ftr_list)):       \n        if clr_nmb == 6:\n            clr_nmb = 0 \n        ax = figure.add_subplot(6,7,i+1)            \n        data[ftr_list[i]].plot(kind=\"hist\",bins=30,label=ftr_list[i],color=color_li[clr_nmb])\n        plt.legend(loc = \"upper right\")\n        clr_nmb+=1\n    plt.show()\n    plt.tight_layout()\n\nhistogram_creator(numerical_features,colors)","2f7e55f8":"#Overall Comparing by Countries\ncountry_list = []\nfor i in data[\"Nationality\"]:\n    if i not in country_list:\n        country_list.append(i)\n        \n        \n#print(len(country_list)) Wow, there are 164 countries in the list \n\"\"\" There are too many countries in the list so I decided to divide the list into a few pieces \"\"\"\n\npart1 = country_list[:20]\npart2 = country_list[20:40]\npart3 = country_list[40:60]\npart4 = country_list[60:80]\npart5 = country_list[80:100]\npart6 = country_list[100:120]\npart7 = country_list[120:140]\npart8 = country_list[140:]\n\n\npart1_meanlist = []\npart2_meanlist = []\npart3_meanlist = []\npart4_meanlist = []\npart5_meanlist = []\npart6_meanlist = []\npart7_meanlist = []\npart8_meanlist = []\n\n\n\"\"\" Mean Calculating \"\"\"\nfor ctr in part1:\n    datafilter = data[\"Nationality\"] == ctr\n    part1_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n\nfor ctr in part2:\n    datafilter = data[\"Nationality\"] == ctr\n    part2_meanlist.append(np.mean(data[datafilter][\"Overall\"]))\n\nfor ctr in part3:\n    datafilter = data[\"Nationality\"] == ctr\n    part3_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n\nfor ctr in part4:\n    datafilter = data[\"Nationality\"] == ctr\n    part4_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n    \nfor ctr in part5:\n    datafilter = data[\"Nationality\"] == ctr\n    part5_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n    \nfor ctr in part6:\n    datafilter = data[\"Nationality\"] == ctr\n    part6_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n\nfor ctr in part7:\n    datafilter = data[\"Nationality\"] == ctr\n    part7_meanlist.append(np.mean(data[datafilter][\"Overall\"]))\n\nfor ctr in part8:\n    datafilter = data[\"Nationality\"] == ctr\n    part8_meanlist.append(np.mean(data[datafilter][\"Overall\"])) \n\n\"\"\" Plotting  \"\"\"\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part1,part1_meanlist,color=\"Green\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part2,part2_meanlist,color=\"Blue\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part3,part3_meanlist,color=\"Red\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part4,part4_meanlist,color=\"Cyan\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part5,part5_meanlist,color=\"Pink\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part6,part6_meanlist,color=\"Purple\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part7,part7_meanlist,color=\"Brown\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()\n\n_,ax = plt.subplots(figsize=(10,10))\nplt.plot(part8,part8_meanlist,color=\"Black\",linewidth=5)\nplt.xticks(rotation=90)\nplt.show()","bf4e1967":"#As we can saw the data is listed starting from high by overall.\nplayers = data.head(10)\nplayer_names = [i for i in players[\"Name\"]]\nplayer_ages = [i for i in players[\"Age\"]]\nplayer_overalls = [i for i in players[\"Overall\"]]\nplayer_potentials = [i for i in players[\"Potential\"]]\nplayer_positions = [i for i in players[\"Position\"]]\nftr_names = [\"Player Ages\",\"Player Overalls\",\"Player Potentials\",\"Player Positions\"]\ncolors = [\"Blue\",\"Pink\",\"Green\",\"Cyan\"]\n\nsum_list = [player_ages,player_overalls,player_potentials,player_positions]\n\ndef create_barplots(sum_li,ftr_li,color_li):\n    for i in range(0,len(sum_li)):\n        _,ax = plt.subplots(figsize=(10,10))\n        ax.bar(player_names,sum_li[i],label=ftr_li[i],color=color_li[i])\n        plt.legend(loc=\"upper right\")\n        plt.show()\ncreate_barplots(sum_list,ftr_names,colors)","da1da528":"def sort(sort_li):\n    first_five= list(np.zeros(5))\n    while 0 in first_five:\n        for i in sort_li:\n            \n            if i>first_five[0]:\n                first_five[0] = i\n                \n            elif i>first_five[1] and i not in first_five[:1]:\n                first_five[1] = i\n                \n            elif i>first_five[2] and i not in first_five[:2]:\n                first_five[2] = i\n                \n            elif i>first_five[3] and i not in first_five[:3]:\n                first_five[3]=i\n                \n            elif i>first_five[4] and i not in first_five[:4]:\n                first_five[4]=i\n    \n    return first_five\n\n\nheight_data = data.Height #We can take the data but these data's height types are inches.\nheight_data.dropna(inplace=True)\n\ndef convert_to_cm(dt):\n    converted_height_list = []\n    for height in dt:\n        height_spl = height.split(\"'\")\n        #A feet is equals 30.48 cm and an inch is equals 2.54 cm\n        value1 = float(height_spl[0])*30\n        value2 = float(height_spl[1])*2\n        converted_height_list.append(value1+value2) \n    return converted_height_list\n\nnm = convert_to_cm(height_data)\nnm =sort(nm)\n\nprint(nm)","c72de5ab":"wh_list = (data.Weight) #We take weight data but we have to clear NaN values\nwh_list.dropna(inplace=True)\nwh_list = list(wh_list)\n\n\ndef delete_lbs(wh_li):\n    wh_int = []\n    for w in wh_li:\n        w = w.replace(\"lbs\",\"\")\n        wh_int.append(int(w))\n    return wh_int\n\nwh_list = delete_lbs(wh_list)\nfirst_five = sort(wh_list)\nprint(first_five) #Let's identify the players","1663bd75":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")","6d92011e":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n\ndata_filter_w = (data[\"Weight\"] == str(first_five[0])+\"lbs\") | (data[\"Weight\"]==str(first_five[1])+\"lbs\") | (data[\"Weight\"]==str(first_five[2])+\"lbs\") | (data[\"Weight\"]==str(first_five[3])+\"lbs\") | (data[\"Weight\"]==str(first_five[4])+\"lbs\")\nplayers = data[data_filter_w]\n\n\n\nplayers = players.loc[:,[\"Name\",\"Age\",\"Overall\",\"Potential\",\"Value\",\"Release Clause\",\"Weight\"]]\nplayers = players.dropna()\n\n\ndata_clause = [i for i in players[\"Release Clause\"]]\ndata_value = [i for i in players[\"Value\"]]\n\n\ndef currency_cleaner(data_li):\n    clean_data_li = []\n    for dt in data_li:\n        dt = dt.replace(\"\u20ac\",\"\")\n        if \"K\" in dt:\n            dt_clean=dt.replace(\"K\",\"000\")\n        \n        elif \"M\" in dt:\n            dt_clean = dt.replace(\"M\",\"000000\")\n        \n        if \".\" in dt_clean:\n            dt_clean = dt_clean.replace(\".\",\"\")\n            dt_clean = int(dt_clean)\n            dt_clean = dt_clean\/10\n        \n        else:\n            dt_clean = int(dt_clean)\n        clean_data_li.append(dt_clean)\n    return clean_data_li\n\ndata_clause = currency_cleaner(data_clause) #Release clause data is ready!\n\ndata_value = currency_cleaner(data_value) #Value data is ready!\n\nplayers[\"Release Clause\"] = data_clause\nplayers[\"Value\"] = data_value\n\n#I had to group data by weight because in grp_data there are players more than five \ngrp_data = players.groupby(\"Weight\").mean()\ngrp_data\n","3e05fe05":"#And now, we are ready to visualization!\nfeature_names = [i for i in grp_data]\nweights = [\"214lbs\",\"225lbs\",\"234lbs\",\"236lbs\",\"243lbs\"]\nweight_count = [i for i in players[\"Weight\"].value_counts()]\ncolors = [\"Green\",\"Red\",\"Blue\",\"Pink\",\"Purple\"]\nfeature_list = list(zip(feature_names,colors))\n\ndef line_plot_creator(ftr_names):\n    figure = plt.figure(figsize = (13,13))\n    for ftr,color in ftr_names:\n        ax = figure.add_subplot(3,2,ftr_names.index((ftr,color))+1)\n        plt.plot(grp_data.index,grp_data[ftr],color=color,label=ftr,linewidth=3)\n        plt.legend(loc=\"upper right\")\n    ax = figure.add_subplot(3,2,6)\n    plt.plot(weights,weight_count,color=\"Cyan\",label=\"Weight Counts\",linewidth=3)\n    plt.legend(loc=\"upper right\")\n    plt.show()\n    plt.tight_layout()\n        \nline_plot_creator(feature_list)","745ff5c1":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\n\ndf = data.loc[:,[\"Name\",\"Age\",\"Overall\",\"Potential\",\"Value\",\"Release Clause\",\"Preferred Foot\"]]\n\ndf = df.dropna()\n\nvalue_list = [i for i in df[\"Value\"]]\nrelease_list = [i for i in df[\"Release Clause\"]]\nvalue_list = currency_cleaner(value_list)\nrelease_list = currency_cleaner(release_list)\n\ndf[\"Value\"] = value_list\ndf[\"Release Clause\"] = release_list\n\ngrp = df.groupby(\"Preferred Foot\").mean()\ngrp","aa276e73":"ftr_names = [i for i in grp.columns]\ncolors = [\"Blue\",\"Red\",\"Pink\",\"Brown\",\"Green\"]\nftr_list = list(zip(ftr_names,colors))\nfoot_counting = [i for i in df[\"Preferred Foot\"].value_counts()]\n\nfigure = plt.figure(figsize=(10,10))\nplt.pie(foot_counting,labels=[\"Right\",\"Left\"],autopct=\"%1.1f%%\")\nplt.title(\"Players' Foot Preferring\")\nplt.show()","6ea9a0b0":"plt.style.use(\"seaborn-whitegrid\")\ndef create_line_plots(ftr_li):\n    figure = plt.figure(figsize=(20,20))\n    for ftr,clr in ftr_li:\n        ax = figure.add_subplot(3,2,ftr_li.index((ftr,clr))+1)\n        plt.title(ftr)\n        plt.bar(grp.index,grp[ftr],color=clr,label=ftr,width=0.2)\n        plt.legend(loc=\"upper right\")\n    plt.show()\n    plt.tight_layout()\n\ncreate_line_plots(ftr_list)","c4d8caf8":"EN: We have created variables that have mean values.Now time to visualize them\n\nTUR: Mean de\u011ferlerine sahip de\u011fi\u015fkenleri olu\u015fturduk. \u015eimdi onlar\u0131 g\u00f6rselle\u015ftirme zaman\u0131","13bc61f7":"# Importing The Data and Libraries - Veriyi ve K\u00fct\u00fcphaneleri Eklemek\n\n**EN**: In this section, I'll import the data and libraries\n\n**TUR:** Bu k\u0131s\u0131mda veriyi ve k\u00fct\u00fcphaneleri ekleyece\u011fim","3addba8f":"**EN**: In this dataset, There are too many columns. I would like to examine every feature but at least for this kernel I can not.\n\n**TUR**: Bu veri setinde \u00e7ok fazla kolon var. T\u00fcm \u00f6zellikleri incelemek isterdim. Ama en az\u0131ndan bu kernel i\u00e7in m\u00fcmk\u00fcn de\u011fil","446a3f9b":"**EN**: Now let's visualize correlation with using seaborn's heatmap\n\n**TUR**: \u015eimdi haydi korelasyonu seabornun heatmap'ini kullanarak g\u00f6rselle\u015ftirelim","515139cb":"# The End - Son\nEN: Thanks for your attention. This kernel is not completed yet and I'll continue to update .Please tell your opinion and if there are mistakes please contact me about the mistakes. \n\nTUR: \u0130lginiz i\u00e7in te\u015fekk\u00fcr ederim. Bu kernel hen\u00fcz tamamlanmad\u0131 ve g\u00fcncellenmeye devam edilecek. L\u00fctfen g\u00f6r\u00fc\u015flerinizi belirtin ve hatalar hakk\u0131nda benim ile ileti\u015fime ge\u00e7in. ","c9c7c463":"# Correlations - Ba\u011f\u0131nt\u0131lar","fa213f04":"# Some Numeric Values of the Dataset - Verinin Baz\u0131 Say\u0131sal De\u011ferleri\n","c1ac1062":"**EN**: First of all, I am going to take a look at the data\n\n**TUR**: \u00d6ncelikle, Veriye bir g\u00f6z ataca\u011f\u0131m","d8c1ef93":"# Identifying and Comparing the 5 Heaviest Players\n\n**EN**:In this section I am going to idenitfy and compare the 5 heaviest players. I'll use my sort function to identifyining. \n\n**TUR**:Bu k\u0131s\u0131mda, En a\u011f\u0131r be\u015f oyuncuyu belirleyece\u011fim ve kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131m. Belirleme i\u00e7in sort fonksiyonumu kullanaca\u011f\u0131m.","df9b19c5":"## Examining Correlations Between Some Features - Baz\u0131 \u00d6zelliklerin Aras\u0131ndaki Korelasyonun \u0130ncelenmesi","f5d67f5f":"# Frequency Visualizations - S\u0131kl\u0131k G\u00f6rselle\u015ftirmeleri\n\n**EN**:In this section, I'll visualize the frequency of the features with using histogram plot.\n\n**TUR**:Bu k\u0131s\u0131mda, \u00d6zelliklerin s\u0131kl\u0131klar\u0131n\u0131 histogram plot kullanarak g\u00f6rselle\u015ftirece\u011fim","bbfb9fee":"**EN**: Yes I know, It is confusing :)\n\n**TUR**: Biliyorum, kafa kar\u0131\u015ft\u0131r\u0131c\u0131 :)","c5892e1c":"**EN**:In this section, I'll examine correlations between features and after that I'll visualize them.\n\n**TUR**:Bu k\u0131s\u0131mda, \u00d6zellikler aras\u0131ndaki ba\u011f\u0131nt\u0131lar\u0131 inceleyece\u011fim ve ondan sonra onlar\u0131 g\u00f6rselle\u015ftirece\u011fim","bbbe0f5f":"**EN**: In this section, I'll examine some values like median,mean and visualize them\n\n**TUR**:Bu k\u0131s\u0131mda,medyan,ortalama gibi de\u011ferleri inceleyece\u011fim ve onlar\u0131 g\u00f6rselle\u015ftirece\u011fim\n\n","6cc88b3f":"# Visualization of Players' Preffered Foots\n\nEN:In this section,I am going to visualize data about the prefered foots of players\n\nTUR:Bu k\u0131s\u0131mda oyuncular\u0131n tercih etti\u011fi ayaklar\u0131 ile ilgili veriyi g\u00f6rselle\u015ftirece\u011fim.","978c8f21":"**EN**: As we can see tallest 5 players heights are 198,196,194,192,190 cm.\n\n**TUR**:G\u00f6rebilece\u011fimiz gibi en uzun oyuncular\u0131n boylar\u0131 198,196,194,192,190 cm.","6e8ccaad":"**EN**: And now, I'll determine best ten player by overall\n\n\n**TUR**:Ve \u015fimdi,Overall'a  g\u00f6re en iyi on oyuncuyu belirleyece\u011fim","10715f8c":"**EN:** I want to do histograms colorful. Because while the world is getting colorless with each passing day, I am still loving colors :)\n\n**TUR**: Histogramlar\u0131 renkli yapmak istedim.\u00c7\u00fcnk\u00fc d\u00fcnya her ge\u00e7en g\u00fcn renksizle\u015firken ben renkleri hala seviyorum :)","5bfd24b4":"### Visualizing","8be0022d":"# Introduction - Giri\u015f\n\n****EN****: Welcome to my kernel. In this kernel I'll do some data analytics and visualizations with using FIFA19 soccer player datas. Fifa19 is 2019 version of famous soccer game series FIFA. It is developing by EA Sports and it is the best selling soccer game in 2019 as well.\n\n****TUR****: *Kernel*'ime ho\u015fgeldiniz. Bu kernelde FIFA19 futbolcu verilerini kullanarak veri analizleri ve g\u00f6rselle\u015ftirmeler yapaca\u011f\u0131m. Fifa19, \u00fcnl\u00fc futbol oyunu serisi olan Fifa'n\u0131n 2019 y\u0131l\u0131 i\u00e7in \u00e7\u0131kan s\u00fcr\u00fcm\u00fc.EA Sports taraf\u0131ndan geli\u015ftirilen oyun ayn\u0131 zamanda 2019 y\u0131l\u0131nda en \u00e7ok sat\u0131lan futbol oyunu.\n\n![5e5e79d1-1ea9-4280-8ead-86dc202122f3.jpg](attachment:5e5e79d1-1ea9-4280-8ead-86dc202122f3.jpg)\n*This is the poster of the game*\n","cf3a3ed3":"# Determining the Tallest 5 Players Height - En Uzun 5 Oyuncunun Boyunun Belirlenmesi\n\n**EN**: In this section I am going to determine the tallest 5 players height.I'll use a function that I wrote myself  to do this\n\n**TUR**:Bu k\u0131s\u0131mda, En uzun be\u015f oyuncunun boyunu tespit edece\u011fim, bunun i\u00e7in kendim yazd\u0131\u011f\u0131m bir fonksiyon kullanaca\u011f\u0131m\n\n","d70aa89c":"# Determining and Comparing Top 10 Players by Overall - Overall'a G\u00f6re En \u0130yi 10 Oyuncunun Tespiti ve Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","d88970b3":"# Comparing Countries - \u00dclkeleri Kar\u015f\u0131la\u015ft\u0131rmak\n\n**EN**: In this section I'll compare the countries by overall.\n\n**TUR**:Bu k\u0131s\u0131mda \u00fclkeleri overall'a g\u00f6re kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131m\n","02422741":"EN: In this sub-section, I am going to examine correlations between some features. First of all I am going to drop some columns because I will not use them. I am going to use .loc for this\n\nTUR:Bu alt k\u0131s\u0131mda, baz\u0131 \u00f6zellikler aras\u0131ndaki korelasyonlar\u0131 inceleyece\u011fim. \u00d6ncelikle baz\u0131 kolonlar\u0131 \u00e7\u0131karaca\u011f\u0131m \u00e7\u00fcnk\u00fc onlar\u0131 kullanmayaca\u011f\u0131m. Bunun i\u00e7in .loc kullanaca\u011f\u0131m"}}