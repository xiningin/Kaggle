{"cell_type":{"6aed9cea":"code","60a656c7":"code","e8e7ceb4":"code","13f53707":"code","71f85cec":"code","d07d431a":"code","5b40d1e3":"code","d6b506a0":"code","e79ad8fc":"code","d01ed4d2":"code","e77843a4":"code","654137e5":"code","38a30b1b":"code","83eef82a":"code","1467f017":"code","e11f0ac0":"code","485fc5df":"code","96617cce":"code","4c1f7104":"code","4bbde8b6":"code","67a111c7":"code","7717b3d8":"code","44c2b4ce":"code","0b698456":"code","011d766f":"code","9c6edb4b":"code","3eedc234":"code","0811a372":"code","fef152f7":"code","6f9c4c5c":"code","b1892a2b":"code","92f88f97":"code","363876b4":"code","7f1f0ef4":"code","9acaffc1":"code","b54b2364":"code","873a9fce":"code","85147f25":"code","a8105c4c":"code","8d3cb300":"code","0962f67c":"code","bd8019a0":"markdown","f151745c":"markdown","4ba8f838":"markdown","c5e4476a":"markdown","a8f6be72":"markdown","3b635de8":"markdown","36f4998c":"markdown"},"source":{"6aed9cea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV\nfrom imblearn.over_sampling import RandomOverSampler\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, classification_report, plot_confusion_matrix\nimport scikitplot as skplt\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","60a656c7":"# Carregando os dados\ndf = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/test.csv')\ndic = pd.read_csv('\/kaggle\/input\/costa-rican-household-poverty-prediction\/codebook.csv')\n\ndf.shape, test.shape, dic.shape","e8e7ceb4":"#Carregando dicionario para analisar os dados\ndic = dic.rename(columns={'Variable name': 'name', 'Variable description': 'description'})\ndic.head()","13f53707":"#Investigando os dados\ndf_dtypes = pd.DataFrame(df.dtypes,columns=['dtypes'])\ndf_dtypes = df_dtypes.reset_index()\ndf_dtypes['name'] = df_dtypes['index']\ndf_dtypes = df_dtypes[['name','dtypes']]\ndf_dtypes['first value'] = df.loc[0].values\ndf_dtypes['last value'] = df.loc[len(df)-1].values\npreview = df_dtypes.merge(dic, on='name',how='left')\n#Visualizando as primeiras tri\npreview[:30]","71f85cec":"#Visualizando as primeiras trinta vari\u00e1ve\npreview[30:60]","d07d431a":"#Visualizando as as variaveis de 60 a 90\npreview[60:90]","5b40d1e3":"#Visualizando as as variaveis de 90 a 120 \npreview[90:120]","d6b506a0":"#Visualizando as as variaveis de 90 a 120 \npreview[120:]","e79ad8fc":"df.info()","d01ed4d2":"# Vamos aumentar o n\u00famero de colunas ara o info mostrar\ndf.info(max_cols=145)","e77843a4":"# Quais colunas do dataframe s\u00e3o do tipo object\ndf.select_dtypes('object').head()","654137e5":"# Imputando valores \ndf['meaneduc'] = df['meaneduc'].fillna(df['meaneduc'].median())\ndf['SQBmeaned'] = df['SQBmeaned'].fillna(df['SQBmeaned'].median())\ndf['v2a1'] = df['v2a1'].fillna(df['v2a1'].median())\ndf['v18q1'] = df['v18q1'].fillna(-1)\ndf['rez_esc'] = df['rez_esc'].fillna(-1)","38a30b1b":"fig, axs = plt.subplots(1,2,figsize=(14,7))\nsns.countplot(x='Target',data=df,ax=axs[0])\naxs[0].set_title(\"Frequ\u00eancia\")\ndf.Target.value_counts().plot(x=None,y=None, kind='pie', ax=axs[1],autopct='%1.2f%%')\naxs[1].set_title(\"Porcentagem\")\nplt.show()","83eef82a":"feats = [c for c in df.columns if c not in ['Id','idhogar'\t,'dependency','edjefe','edjefa', 'Target']]","1467f017":"#Separar features para treinar o modelos\nX = df.drop(['Id','idhogar'\t,'dependency','edjefe','edjefa', 'Target'], axis=1) \ny = df['Target']\n#Separa em treino e teste\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","e11f0ac0":"# Executando OverSampling para resolver problema de desbalanceamento de classes\nros = RandomOverSampler(random_state=42)\nX_ros,y_ros= ros.fit_resample(X_train,y_train)\n# Verificando o resultado\ny_ros.value_counts()","485fc5df":"rfd = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42)\nrfd.fit(X_train, y_train)","96617cce":"predict_rfd = rfd.predict(X_test)\naccuracy_rfd = accuracy_score(y_test, predict_rfd)\naccuracy_rfd","4c1f7104":"fig=plt.figure(figsize=(15, 20))\npd.Series(rfd.feature_importances_, index=feats).sort_values().plot.barh()","4bbde8b6":"skplt.metrics.plot_confusion_matrix(y_test, predict_rfd)","67a111c7":"rfb = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42)\nrfb.fit(X_ros, y_ros)","7717b3d8":"predict_rfb = rfb.predict(X_test)\naccuracy_rfb = accuracy_score(y_test, predict_rfb)\naccuracy_rfb","44c2b4ce":"fig=plt.figure(figsize=(15, 20))\npd.Series(rfb.feature_importances_, index=feats).sort_values().plot.barh()","0b698456":"# Matriz de Confus\u00e3o - Dados de teste\nskplt.metrics.plot_confusion_matrix(y_test, predict_rfd)","011d766f":"xgbc = XGBClassifier(n_estimators=100, learning_rate=1, random_state=42, max_depth=1)\nxgbc.fit(X_ros, y_ros);","9c6edb4b":"predict_xgbc = xgbc.predict(X_test)\naccuracy_xgbc = accuracy_score(y_test, predict_xgbc)\naccuracy_xgbc","3eedc234":"fig=plt.figure(figsize=(15, 20))\n# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(xgbc.feature_importances_, index=feats).sort_values().plot.barh()","0811a372":"skplt.metrics.plot_confusion_matrix(y_test, predict_xgbc)","fef152f7":"cbc = CatBoostClassifier(random_state=42)\ncbc.fit(X_ros, y_ros)","6f9c4c5c":"predict_cbc = cbc.predict(X_test)\naccuracy_cbc = accuracy_score(y_test, predict_cbc)\naccuracy_cbc","b1892a2b":"fig=plt.figure(figsize=(15, 20))\n# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(cbc.feature_importances_, index=feats).sort_values().plot.barh()","92f88f97":"skplt.metrics.plot_confusion_matrix(y_test, predict_cbc)","363876b4":"gbm = GradientBoostingClassifier(n_estimators=200, learning_rate=1.0, max_depth=1, random_state=42)\ngbm.fit(X_ros, y_ros)","7f1f0ef4":"predict_gbm =  gbm.predict(X_test)\naccuracy_gbm = accuracy_score(y_test, predict_gbm)\naccuracy_gbm","9acaffc1":"fig=plt.figure(figsize=(15, 20))\n# Avaliando a importancia de cada coluna (cada vari\u00e1vel de entrada)\npd.Series(gbm.feature_importances_, index=feats).sort_values().plot.barh()","b54b2364":"skplt.metrics.plot_confusion_matrix(y_test, predict_gbm)","873a9fce":"print('RandomForestClassifier \t\t=', accuracy_rfb)\nprint('XGBClassifier \t\t\t\t=', accuracy_xgbc)\nprint('CatBoostClassifier\t\t\t=', accuracy_cbc)\nprint('GradientBoostingClassifier\t=', accuracy_gbm)","85147f25":"# Imputando valores para o dataSet de Teste\ntest['meaneduc'] = test['meaneduc'].fillna(df['meaneduc'].median())\ntest['SQBmeaned'] = test['SQBmeaned'].fillna(df['SQBmeaned'].median())\ntest['v2a1'] = test['v2a1'].fillna(df['v2a1'].median())\ntest['v18q1'] = test['v18q1'].fillna(-1)\ntest['rez_esc'] = test['rez_esc'].fillna(-1)\n\nfeatsT = test.drop(['Id','idhogar'\t,'dependency','edjefe','edjefa'], axis=1)\nfeatsT.head()","a8105c4c":"test['Target'] = xgbc.predict(featsT).astype(int)\ntest","8d3cb300":"test[['Id', 'Target']]","0962f67c":"test[['Id', 'Target']].to_csv('submission.csv', index=False)","bd8019a0":"## Executando Random Forest com classes desbalanceadas","f151745c":"# IESB - Miner II - Random Forest","4ba8f838":"## Executando Random Forest com classes Balanceadas","c5e4476a":"1. ## Executando XGBoost Classifier","a8f6be72":"## Executando GradientBoostingClassifier","3b635de8":"## Executando Cat Boost Classifier","36f4998c":"## Encontrado problema de classes desbalanceada"}}