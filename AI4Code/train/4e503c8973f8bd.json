{"cell_type":{"9d13c44b":"code","7748c3b6":"code","573024b8":"code","ca229633":"code","a23692ad":"code","ebdbcd94":"code","19b7df5a":"code","67835651":"code","5e8578e8":"code","db95af7e":"code","2d951442":"code","e003fa97":"code","7ce55a1c":"code","2b2eea07":"code","d9d0fb68":"code","55383eb1":"code","003ca4ec":"code","eb67ad47":"code","0ee3468d":"code","7805e386":"code","c98f2618":"code","1eb77145":"code","8c704048":"code","43a6e0cf":"code","bd944e88":"code","ea0e7034":"code","2c4b8c2b":"code","8ccc4f6e":"code","58fba4a0":"code","c7d038f2":"code","a2e0b768":"code","596887d7":"code","37f4a138":"code","8da08411":"code","3f039d25":"code","781db86d":"code","655b754f":"code","392c21c8":"code","72a234d9":"code","bc204b3c":"markdown","58b9c65d":"markdown","158fc92a":"markdown","e327d46b":"markdown","6a24d454":"markdown","1d4be8d6":"markdown","fd9a4cd8":"markdown","d9c5014f":"markdown","f378f54f":"markdown","16e4d472":"markdown","c8b491cc":"markdown","b73cd3cf":"markdown","5f9289be":"markdown","f2245401":"markdown","878ee9c1":"markdown","d0cc5dd1":"markdown","dec3c022":"markdown","88793cda":"markdown","c8680968":"markdown","e791e703":"markdown","dd0fa359":"markdown","d4942077":"markdown"},"source":{"9d13c44b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import  SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge","7748c3b6":"headers = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]","573024b8":"df=pd.read_csv('..\/input\/dataset-to-estimate-used-car-price\/car_pricing.csv',names=headers)","ca229633":"print('The 15 rows of data')\ndf.head(15)","a23692ad":"print('The  last 15 rows of data')\ndf.tail(15)","ebdbcd94":"# Replace '?' To 'NaN'\ndf.replace('?',np.nan,inplace=True)\ndf.head(10)\n","19b7df5a":"df.info()","67835651":"#for column in missing_data.columns.values.tolist():\n   # print(column)\n   # print(missing_data[column].value_counts())\n   # print(' ')\n    \ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","5e8578e8":"df.dtypes","db95af7e":"avg_norm_loss=df[['normalized-losses']].astype(float)\navg_bore=df[['bore']].astype(float)\nmissing_stroke_values=df[['stroke']].astype(float)\navg_horsepower = df[['horsepower']].astype(float)\navg_peakrpm=df[['peak-rpm']].astype(float)\navg_price=df[['price']].astype(float)","2d951442":"# Creatiing method from SimpleImputer class\nimpute=SimpleImputer(missing_values=np.nan,strategy='mean')","e003fa97":"df[['normalized-losses']]=impute.fit_transform(df[['normalized-losses']])\ndf[['bore']]=impute.fit_transform(df[['bore']])\ndf[['stroke']]=impute.fit_transform(df[['stroke']])\ndf[['horsepower']]=impute.fit_transform(df[['horsepower']])\ndf[['peak-rpm']]=impute.fit_transform(df[['peak-rpm']])\ndf[[\"price\"]]=impute.fit_transform(df[[\"price\"]])","7ce55a1c":"impute_2=SimpleImputer(missing_values=np.nan,strategy='most_frequent')\nprint(df['num-of-doors'].value_counts())\nprint(df['num-of-doors'].value_counts().idxmax())\n","2b2eea07":"df[['num-of-doors']]=impute_2.fit_transform(df[['num-of-doors']])\nprint('Nums of doors after handeling missing data:', df['num-of-doors'].value_counts())","d9d0fb68":"df.head(15)","55383eb1":"df.dtypes","003ca4ec":"print('The New Data After handeling with missing data',df.info())","eb67ad47":"# Histogram\n#first lets analysis price\nsns.distplot(df['price'])","0ee3468d":"#skewness \nprint(\"Skewness: %f\" % df['price'].skew())\n","7805e386":"# scatter plot\n","c98f2618":"# regplot\nsns.regplot(df['normalized-losses'],df['price'])\nplt.ylim(0,)","1eb77145":"sns.regplot('engine-size', 'price',data=df)\nplt.ylim(0,)","8c704048":"sns.regplot('highway-mpg', 'price',data=df)\nplt.ylim(0,)\n","43a6e0cf":"sns.regplot(x='stroke',y='price',data=df)","bd944e88":"sns.regplot(x=\"peak-rpm\", y=\"price\", data=df)\nplt.ylim(0,)","ea0e7034":"# boxplot\ngraph = pd.concat([df['price'], df['make']], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='make', y=\"price\", data=graph)\n","2c4b8c2b":"#box plot overallqual\/saleprice\n\ngraph = pd.concat([df['price'], df['fuel-type']], axis=1)\nf = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x='fuel-type', y=\"price\", data=graph)","8ccc4f6e":"# The corr heatmap\ncorr = df.corr()\nf = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, vmax=.8, square=True)","58fba4a0":"\nk = 10 #number of variables for heatmap\ncorr = df.corr()\ncols = corr.nlargest(k, 'price')['price'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","c7d038f2":"#scatterplot\nsns.set()\ncols = ['price','engine-size','curb-weight','horsepower','width','length','wheel-base','bore']\nsns.pairplot(df[cols], size = 2.5)\nplt.show()","a2e0b768":"df['fuel-type']=pd.get_dummies(df['fuel-type'])\ndf['aspiration']=pd.get_dummies(df['aspiration'])\ndf['make']=pd.get_dummies(df['make'])\ndf['num-of-doors']=pd.get_dummies(df['num-of-doors'])\ndf['body-style']=pd.get_dummies(df['body-style'])\ndf['drive-wheels']=pd.get_dummies(df['drive-wheels'])\ndf['engine-location']=pd.get_dummies(df['engine-location'])\ndf['engine-type']=pd.get_dummies(df['engine-type'])\ndf[ \"num-of-cylinders\"]=pd.get_dummies(df[ \"num-of-cylinders\"])\ndf[\"fuel-system\"]=pd.get_dummies(df[ \"fuel-system\"])","596887d7":"X=df.iloc[:,:-1]\ny=df.iloc[:,-1]","37f4a138":"scale=StandardScaler()\nX=scale.fit_transform(X)\nX=pd.DataFrame(X)\nX.head(10)","8da08411":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","3f039d25":"Regressor = LinearRegression()\nRegressor.fit(X_train, y_train)\ny_pred = Regressor.predict(X_test)\nlinear_accurcy = round(Regressor.score(X_train, y_train) * 100, 2)\nlinear_accurcy","781db86d":"Randomforest = RandomForestRegressor()\nRandomforest.fit(X_train, y_train)\ny_pred = Randomforest.predict(X_test)\nforest_accurcy = round(Randomforest.score(X_train, y_train) * 100, 2)\nforest_accurcy","655b754f":"Tree =DecisionTreeRegressor ()\nTree.fit(X_train, y_train)\ny_pred = Tree.predict(X_test)\ntree_accurcy = round(Tree.score(X_train, y_train) * 100, 2)\ntree_accurcy","392c21c8":"ridge = Ridge(alpha=100)\nridge.fit(X_train,y_train)\ny_pred=ridge.predict(X_test)\nridge_accurcy=round(ridge.score(X_train, y_train) * 100, 2)\nridge_accurcy","72a234d9":"models = pd.DataFrame({\n    'Model': [ 'Linear Regression Model','Random forest Model',\n              'Descision Tree Model','Ridge model'],\n    'Score': [ linear_accurcy,forest_accurcy,\n               tree_accurcy ,ridge_accurcy]})\n\nmodels.sort_values(by='Score', ascending=False)","bc204b3c":"#  Importing Libraries","58b9c65d":"# 1..Replace by mean:\n\n1. \"normalized-losses\": 41 missing data, replace them with mean\n2. \"stroke\": 4 missing data, replace them with mean\n3. \"bore\": 4 missing data, replace them with mean\n4. \"horsepower\": 2 missing data, replace them with mean\n5. \"peak-rpm\": 2 missing data, replace them with mean\n6. \" Price\" : 4 missing data\n\n# 2..Replace by frequency:\n\"num-of-doors\": 2 missing data, replace them with \"four\".\n> Reason: 84% sedans is four doors. Since four doors is most frequent,\n> it is most likely to occur\n\n","158fc92a":"# Relationship with categorical features","e327d46b":"# After Handeling missing data, lets do Explority Data Analysis (EDA)","6a24d454":"# so, we will change these columns by using astype() built-in function","1d4be8d6":"# Descision Tree Model","fd9a4cd8":"# The correlation between features and price","d9c5014f":"# Data scaling","f378f54f":"# Handeling Missing Data By Converting it to to most-freq","16e4d472":"# Random forest Model","c8b491cc":"# How to work with missing data?\n\nSteps for working with missing data:\n\n1. dentify missing data\n2. deal with missing data\n3. correct data format","b73cd3cf":"# Based on the summary above, each column has 205 rows of data, seven columns containing missing data:\n\n1. \"normalized-losses\": 41 missing data\n2. \"num-of-doors\": 2 missing data\n3. \"bore\": 4 missing data\n4. \"stroke\" : 4 missing data\n5. \"horsepower\": 2 missing data\n6. \"peak-rpm\": 2 missing data\n7. price\": 4 missing data","5f9289be":"As we saw that  There are missing values in the form \"?\" so we should change it to \"Nan\" to deal with each column separately ","f2245401":"# lets convert dummy variable into nurmecial variables","878ee9c1":"# dentify_missing_values\n\nEvaluating for Missing Data\nThe missing values are converted to Python's default.\nWe use Python's built-in functions to identify these missing values.\nThere are two methods to detect missing data:\n\n# 1. isnull()\n# 2. notnull()\n\n","d0cc5dd1":"# How to deal with missing data?\n1. replace data\n  1. replace it by mean\n  2. replace it by frequency\n  3. replace it based on other function","dec3c022":"# Names Of Columns\n# To make access of columns more accessible","88793cda":"# Linear Regression Model","c8680968":"# But first there are som columns are \"Numercial\" but the datatype of it is \"catgorial\"\n","e791e703":"# Ridge Model","dd0fa359":"# lets see the relationship between numerical variables and price","d4942077":"# Splitting data"}}