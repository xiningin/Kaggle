{"cell_type":{"4b64fb4a":"code","95a686c3":"code","a0cf12be":"code","cd8616f5":"code","29f764ee":"code","5db12300":"code","9dd6f3f4":"code","542896a8":"code","d7eb6372":"code","5b51ef57":"code","3f1d22cf":"code","7c58ab99":"code","8e71c7c6":"code","285beead":"code","ab2b767a":"code","476d83e6":"code","60e5e5ee":"code","7cc0d979":"code","6d45af56":"code","b81b9215":"code","bd16d845":"code","24238aff":"code","b40b5c90":"code","5c10aa86":"code","bff62489":"code","d56f070f":"code","2ec6570a":"code","b29f7b18":"code","c4ad7fd6":"code","172a310a":"code","a83b4a8f":"markdown","df59801d":"markdown","2585b9e7":"markdown","7d34c13e":"markdown","a7121a4a":"markdown","ecf4dc2d":"markdown","1318b312":"markdown","9f4f17c6":"markdown","c206a7e5":"markdown"},"source":{"4b64fb4a":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport imblearn\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neighbors import  KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nimport xgboost\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix, confusion_matrix\nimport pickle\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","95a686c3":"DATA_PATH = \"..\/input\/fertilizer-prediction\/Fertilizer Prediction.csv\"","a0cf12be":"data = pd.read_csv(DATA_PATH)\ndata.head()","cd8616f5":"data[\"Fertilizer Name\"].unique()","29f764ee":"data.shape","5db12300":"data[\"Soil Type\"].unique()","9dd6f3f4":"data[\"Crop Type\"].unique()","542896a8":"data.columns","d7eb6372":"labels = data[\"Fertilizer Name\"].unique()\ncounts = list(data[\"Fertilizer Name\"].value_counts())\n\nplt.figure(figsize = (9,5))\nplt.barh(labels, counts)\n  \nfor index, value in enumerate(counts):\n    plt.text(value, index,\n             str(value))\nplt.show()","5b51ef57":"continuous_data_cols = [\"Temparature\", \"Humidity \", \"Moisture\", \"Nitrogen\", \"Phosphorous\"]\ncategorical_data_cols = [\"Soil Type\", \"Crop Type\"]","3f1d22cf":"plt.figure(figsize=(15,13))\ni = 1\nfor column in continuous_data_cols[:-1]:\n    plt.subplot(2,2,i)\n    sns.histplot(data[column])\n    i+=1\nplt.show()\n\nsns.histplot(data[continuous_data_cols[-1]])\nplt.show()","7c58ab99":"plt.figure(figsize=(17,5))\ni = 1\nfor column in categorical_data_cols:\n    plt.subplot(1,2,i)\n    sns.countplot(data[column])\n    plt.xticks(rotation = 90)\n    i+=1\nplt.show()","8e71c7c6":"plt.figure(figsize=(21,17))\nsns.pairplot(data[continuous_data_cols + [\"Fertilizer Name\"]], hue = \"Fertilizer Name\")\nplt.show()","285beead":"plt.figure(figsize = (13,11))\nsns.heatmap(data[continuous_data_cols].corr(), center = 0, annot = True)\nplt.show()","ab2b767a":"soil_type_label_encoder = LabelEncoder()\ndata[\"Soil Type\"] = soil_type_label_encoder.fit_transform(data[\"Soil Type\"])","476d83e6":"crop_type_label_encoder = LabelEncoder()\ndata[\"Crop Type\"] = crop_type_label_encoder.fit_transform(data[\"Crop Type\"])","60e5e5ee":"croptype_dict = {}\nfor i in range(len(data[\"Crop Type\"].unique())):\n    croptype_dict[i] = crop_type_label_encoder.inverse_transform([i])[0]\nprint(croptype_dict)\n\nsoiltype_dict = {}\nfor i in range(len(data[\"Soil Type\"].unique())):\n    soiltype_dict[i] = soil_type_label_encoder.inverse_transform([i])[0]\nprint(soiltype_dict)","7cc0d979":"fertname_label_encoder = LabelEncoder()\ndata[\"Fertilizer Name\"] = fertname_label_encoder.fit_transform(data[\"Fertilizer Name\"])","6d45af56":"fertname_dict = {}\nfor i in range(len(data[\"Fertilizer Name\"].unique())):\n    fertname_dict[i] = fertname_label_encoder.inverse_transform([i])[0]\nprint(fertname_dict)","b81b9215":"data.head()","bd16d845":"X = data[data.columns[:-1]]\ny = data[data.columns[-1]]","24238aff":"counter = Counter(y)\ncounter","b40b5c90":"upsample = SMOTE()\nX, y = upsample.fit_resample(X, y)\ncounter = Counter(y)\nprint(counter)","5c10aa86":"print(f\"Total Data after Upsampling: {len(X)}\")","bff62489":"X_train, X_test, y_train, y_test = train_test_split(X.values, y, test_size = 0.2, random_state = 0)\nprint(f\"Train Data: {X_train.shape}, {y_train.shape}\")\nprint(f\"Train Data: {X_test.shape}, {y_test.shape}\")","d56f070f":"error_rate = []\nfor i in range(1, 50):\n    pipeline = make_pipeline(StandardScaler(), KNeighborsClassifier(n_neighbors = i))\n    pipeline.fit(X_train, y_train)\n    predictions = pipeline.predict(X_test)\n    accuracy = accuracy_score(y_test, predictions)\n    print(f\"Accuracy at k = {i} is {accuracy}\")\n    error_rate.append(np.mean(predictions != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,50),error_rate,color='blue', linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nprint(\"Minimum error:-\",min(error_rate),\"at K =\",error_rate.index(min(error_rate))+1)","2ec6570a":"svm_pipeline = make_pipeline(StandardScaler(), SVC(probability=True))\nsvm_pipeline.fit(X_train, y_train)\n\n# Accuray On Test Data\npredictions = svm_pipeline.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Accuracy on Test Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y_test, predictions), annot = True)\nplt.title(\"Confusion Matrix for Test Data\")\nplt.show()\n\nprint()\n\n# Accuray On Whole Data\npredictions = svm_pipeline.predict(X.values)\naccuracy = accuracy_score(y, predictions)\nprint(f\"Accuracy on Whole Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y, predictions), annot = True)\nplt.title(\"Confusion Matrix for Whole Data\")\nplt.show()","b29f7b18":"rf_pipeline = make_pipeline(StandardScaler(), RandomForestClassifier(random_state = 18))\nrf_pipeline.fit(X_train, y_train)\n\n# Accuray On Test Data\npredictions = rf_pipeline.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Accuracy on Test Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y_test, predictions), annot = True)\nplt.title(\"Confusion Matrix for Test Data\")\nplt.show()\n\nprint()\n\n# Accuray On Whole Data\npredictions = rf_pipeline.predict(X.values)\naccuracy = accuracy_score(y, predictions)\nprint(f\"Accuracy on Whole Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y, predictions), annot = True)\nplt.title(\"Confusion Matrix for Whole Data\")\nplt.show()","c4ad7fd6":"xgb_pipeline = make_pipeline(StandardScaler(), XGBClassifier(random_state = 18))\nxgb_pipeline.fit(X_train, y_train)\n\n# Accuray On Test Data\npredictions = xgb_pipeline.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Accuracy on Test Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y_test, predictions), annot = True)\nplt.title(\"Confusion Matrix for Test Data\")\nplt.show()\n\nprint()\n\n# Accuray On Whole Data\npredictions = xgb_pipeline.predict(X.values)\naccuracy = accuracy_score(y, predictions)\nprint(f\"Accuracy on Whole Data: {accuracy*100}%\")\nplt.figure(figsize = (15,9))\nsns.heatmap(confusion_matrix(y, predictions), annot = True)\nplt.title(\"Confusion Matrix for Whole Data\")\nplt.show()","172a310a":"pickle.dump(svm_pipeline, open(\"svm_pipeline.pkl\", \"wb\"))\npickle.dump(rf_pipeline, open(\"rf_pipeline.pkl\", \"wb\"))\npickle.dump(xgb_pipeline, open(\"xgb_pipeline.pkl\", \"wb\"))\npickle.dump(fertname_dict, open(\"fertname_dict.pkl\", \"wb\"))\npickle.dump(croptype_dict, open(\"croptype_dict.pkl\", \"wb\"))\npickle.dump(soiltype_dict, open(\"soiltype_dict.pkl\", \"wb\"))\nprint(\"Saved All Models\")","a83b4a8f":"## Random Forest Classifier","df59801d":"## SVM Classifier","2585b9e7":"## Bivariate Analysis","7d34c13e":"## Upsampling the Data","a7121a4a":"## Univariate Analysis","ecf4dc2d":"## XGBoost Classifier","1318b312":"<b>Observation: <\/b>We can notice that the above data is not balanced. We will be balancing the data using Upsampling.","9f4f17c6":"## KNN Classifier","c206a7e5":"## Exploring the Data"}}