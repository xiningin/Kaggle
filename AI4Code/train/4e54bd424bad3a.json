{"cell_type":{"ddb813e4":"code","7aff2fb6":"code","cf6d73d4":"code","38b26458":"code","13a3283b":"code","bfdb7c49":"code","fbd86c29":"code","f211eeea":"code","d3bdcc85":"code","6d724cda":"code","cdc3af4b":"code","d3a3a4a2":"code","de2f9cea":"code","69351f99":"code","6959d879":"markdown"},"source":{"ddb813e4":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nfrom catboost import CatBoostRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.linear_model import BayesianRidge, LinearRegression\nfrom sklearn.linear_model import RidgeCV,LassoCV,LassoLarsCV\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nimport matplotlib.pyplot as plt\n\nfrom xgboost import XGBRegressor\nfrom vecstack import stacking\nimport lightgbm as lgb\n\nimport pandas as pd\nimport numpy as np\nimport os","7aff2fb6":"# give the path to where the training and test set are present\ntrain = pd.read_csv('..\/input\/santander-value-prediction-challenge\/train.csv')\n\ntest = pd.read_csv('..\/input\/santander-value-prediction-challenge\/test.csv')\n\ntarget_val = train['target']\ntrain['log_target'] = np.log1p(target_val)\n\ntest_ID = test['ID'].values\n","cf6d73d4":"X_train, X_test = train_test_split(train, test_size=0.2, random_state=5)","38b26458":"y_train = X_train['log_target']\ny_test = X_test['log_target']\n\ntrain.drop(\"ID\", axis = 1, inplace = True)\ntest.drop(\"ID\", axis = 1, inplace = True)\ntrain.drop(\"target\", axis = 1, inplace = True)\ntrain.drop(\"log_target\", axis = 1, inplace = True)\n\nfoo = train.columns\nfoo = list(foo)\ncolNames = foo\n","13a3283b":"# Caution! All models and parameter values are just \n# demonstrational and shouldn't be considered as recommended.\n# Initialize 1-st level models.\nmodels = [    \n    CatBoostRegressor(iterations=200,\n                            learning_rate=0.03,\n                            depth=4,\n                            loss_function='RMSE',\n                            eval_metric='RMSE',\n                            random_seed=99,\n                            od_type='Iter',\n                            od_wait=50,\n                     logging_level='Silent'),\n    \n    CatBoostRegressor(iterations=500,\n                            learning_rate=0.06,\n                            depth=3,\n                            loss_function='RMSE',\n                            eval_metric='RMSE',\n                            random_seed=99,\n                            od_type='Iter',\n                            od_wait=50,\n                     logging_level='Silent'),\n    \n    ExtraTreesRegressor(random_state = 0, n_jobs = -1, \n        n_estimators = 100, max_depth = 3),\n        \n    RandomForestRegressor(random_state = 0, n_jobs = -1, \n        n_estimators = 300, max_depth = 3),\n    \n    XGBRegressor(eta=0.02,reg_lambda=5,reg_alpha=1),\n    \n    XGBRegressor(eta=0.1,reg_lambda=1,reg_alpha=10),\n    \n    XGBRegressor(eta=0.02,reg_lambda=1,reg_alpha=10,n_estimators=300),\n    \n    XGBRegressor(eta=0.012,max_depth=3,n_estimators=200),\n    \n    GradientBoostingRegressor(),\n    \n    BaggingRegressor(),\n]","bfdb7c49":"print(X_train[colNames].shape)\nprint(X_test[colNames].shape)","fbd86c29":"default_parameters = [0.0229, 408, 3]","f211eeea":"S_train, S_test = stacking(models, X_train[colNames], y_train, test[colNames], \n    regression = True, metric = mean_absolute_error, n_folds = 4 , \n    shuffle = True, random_state = 0, verbose = 2)","d3bdcc85":"print(test.shape)\nprint(X_train[colNames].shape)\nprint(S_test.shape)\nprint(S_train.shape)","6d724cda":"# Initialize 2-nd level model\n\nmodel = XGBRegressor(n_estimators=default_parameters[1],\n                          learning_rate=default_parameters[0],\n                          max_depth=default_parameters[2],\n                          random_state=0)\n    \n# Fit 2-nd level model\nmodel = model.fit(S_train, y_train)","cdc3af4b":"# Predict\ny_pred = model.predict(S_test)\nprint(y_pred.shape)","d3a3a4a2":"result = pd.DataFrame({'ID':test_ID\n                       ,'target':np.expm1(y_pred)})\n\nresult.head()\nresult.to_csv('stacked_ensemble_regr_origFeat.csv', index=False)","de2f9cea":"result.head()","69351f99":"result.tail()","6959d879":"        This program uses vecstack ensemble for stacking different models.  https:\/\/github.com\/vecxoz\/vecstack\n"}}