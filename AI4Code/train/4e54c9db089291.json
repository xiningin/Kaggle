{"cell_type":{"89235f6c":"code","242912ee":"code","0c11bb72":"code","5df415c6":"code","3198f5ea":"code","80c7c73a":"code","1e5ebb55":"code","09449bba":"code","73824de5":"code","c81b236e":"code","ece371a6":"code","d992df63":"code","d54e6142":"code","d80362ce":"code","ce6bc136":"code","11138296":"code","3ad63153":"markdown","aea85e02":"markdown","cc5c4626":"markdown","cf74602c":"markdown","e74c54d6":"markdown","e18aeb08":"markdown","d8a50ff8":"markdown"},"source":{"89235f6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport cufflinks as cf\nimport sklearn\nfrom sklearn import svm, preprocessing \n\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","242912ee":"df = pd.read_csv('..\/input\/diamonds.csv')\ndf.info()","0c11bb72":"df.head()\ndf = df.drop('Unnamed: 0', axis = 1)\n","5df415c6":"df.head()","3198f5ea":"df['clarity'].unique()","80c7c73a":"df.groupby('cut').count()['carat'].plot.bar()","1e5ebb55":"cut_dict = {'Fair' : 1, 'Good' : 2, 'Very Good' : 3, 'Premium' : 4, 'Ideal' : 5}\nclarity_dict ={ 'I1' : 1, 'SI2' : 2, 'SI1' : 3, 'VS2' : 4, 'VS1' : 5, 'VVS2' : 6, 'VVS1' : 7 , 'IF' : 8}\ncolor_dict = {'D':7, 'E':6, 'F':5, 'G':4, 'H':3, 'I':2, 'J':1}","09449bba":"df['cut'] = df['cut'].map(cut_dict)\ndf['clarity'] = df['clarity'].map(clarity_dict)\ndf['color'] = df['color'].map(color_dict)","73824de5":"df.head()","c81b236e":"df.isnull().any()","ece371a6":"df = sklearn.utils.shuffle(df)\nX = df.drop(['price'], axis = 1).values\nX = preprocessing.scale(X)\ny = df['price'].values\ny = preprocessing.scale(y)","d992df63":"test_size = 200\nX_train = X[: -test_size]\ny_train = y[: -test_size]\nX_test = X[-test_size :]\ny_test =  y[-test_size :]","d54e6142":"clf = svm.SVR(kernel = 'linear')\nclf.fit(X_train, y_train)","d80362ce":"clf.score(X_test, y_test)","ce6bc136":"y_pred = clf.predict(X_test)","11138296":"\ntrace0 = go.Scatter(\n    y = y_test,\n    x = np.arange(200), \n    mode = 'lines', \n    name = 'Actual Price',\n    marker = dict(\n    color = 'rgb(10, 150, 50)')\n)\n\ntrace1 = go.Scatter(\n    y = y_pred,\n    x = np.arange(200), \n    mode = 'lines', \n    name = 'Predicted Price',\n    line = dict(\n        color = 'rgb(110, 50, 140)',\n        dash = 'dot'\n    )\n)\n\n\nlayout = go.Layout(\n    xaxis = dict(title = 'Index'), \n    yaxis = dict(title = 'Normalized Price')\n)\n\nfigure = go.Figure(data = [trace0, trace1], layout = layout)\niplot(figure)","3ad63153":"### **[2.2] Converting Strings into Numbers:** For training models, we should convert the text based values into appropriate number representation. ","aea85e02":"## **[1] Loading Data **","cc5c4626":"We are getting the Accuray of  88% using the Linear SVM model. ","cf74602c":"## **[2] Data Preprocessing **","e74c54d6":"### **[2.1] Removing additional Index :** since we have the in built index from pandas, we dont need the \"Unnamed: 0\" attribute. ","e18aeb08":"## **[3] Splitting the Dataset:**","d8a50ff8":"## **[4] SVM Model:**"}}