{"cell_type":{"a37891b8":"code","de1604db":"code","ea8ed07a":"code","c7479696":"code","65d9199e":"code","a621844c":"code","649a95bb":"code","6ed8c44b":"code","a8eebaeb":"code","e3170cef":"code","cdb04242":"code","43d162c0":"code","ec0d14b6":"code","0abfe39e":"code","accbafbf":"code","7743aefa":"code","f4a38d67":"code","77ef286a":"code","0bbb8085":"code","fd93877f":"code","327c4e24":"code","2514be90":"code","895203e4":"code","d6e0ecae":"code","aa737ddd":"code","9bab5d32":"code","d15adf42":"code","2647cea2":"code","c5751701":"code","63b89b94":"code","599d72fa":"code","f8ad6eb1":"code","6d38887c":"code","3f445f21":"code","0a5cccf7":"code","29b4586b":"code","20add54b":"code","2d8893b4":"code","f7ee7e6e":"code","1627c55b":"code","cb51afdd":"code","e1496dc4":"code","ebd42165":"code","28b92181":"code","8f110c61":"code","db7a9428":"code","6529bb7b":"code","b0f7e7af":"code","e96e466c":"code","b6c2fa40":"code","854a5e40":"code","abcf7c41":"code","5ab3d743":"code","a1b0e721":"code","8893d328":"code","cd17f67c":"code","1f0a0928":"code","3da44ded":"code","90944d9c":"code","4f2d295b":"code","81110d2f":"markdown","2c9e51ad":"markdown","6bf19d08":"markdown","0329b9b5":"markdown","931d330b":"markdown","b3ae6cb8":"markdown","1cdf388d":"markdown","50521300":"markdown","cd792ff0":"markdown","924c2c81":"markdown","9791ee9f":"markdown","31aa1fcf":"markdown","fd55383d":"markdown","c0782713":"markdown"},"source":{"a37891b8":"# basic operations\nimport numpy as np\nimport pandas as pd \n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# file path\nimport os\nprint(os.listdir(\"..\/input\"))","de1604db":"# reading the data and also checking the computation time\n\n%time data = pd.read_csv('..\/input\/data.csv')\n\nprint(data.shape)","ea8ed07a":"# checking the first 5 rows and columns\n\ndata.head()","c7479696":"# checking if the data contains any NULL value\n\ndata.isnull().sum()","65d9199e":"# decsribing the data\n\ndata.describe()","a621844c":"# taking out the information from the given data\n\ndata.info()","649a95bb":"# filling the missing value for the continous variables for proper data visualization\n\ndata['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndata['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndata['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndata['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndata['FKAccuracy'].fillna(data['FKAccuracy'], inplace = True)\ndata['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndata['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndata['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\ndata['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndata['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndata['Weight'].fillna('200lbs', inplace = True)\ndata['Contract Valid Until'].fillna(2019, inplace = True)\ndata['Height'].fillna(\"5'11\", inplace = True)\ndata['Loaned From'].fillna('None', inplace = True)\ndata['Joined'].fillna('Jul 1, 2018', inplace = True)\ndata['Jersey Number'].fillna(8, inplace = True)\ndata['Body Type'].fillna('Normal', inplace = True)\ndata['Position'].fillna('ST', inplace = True)\ndata['Club'].fillna('No Club', inplace = True)\ndata['Work Rate'].fillna('Medium\/ Medium', inplace = True)\ndata['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\ndata['Weak Foot'].fillna(3, inplace = True)\ndata['Preferred Foot'].fillna('Right', inplace = True)\ndata['International Reputation'].fillna(1, inplace = True)\ndata['Wage'].fillna('\u20ac200K', inplace = True)\n","6ed8c44b":"data.fillna(0, inplace = True)","a8eebaeb":"def defending(data):\n    return int(round((data[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))","e3170cef":"# renaming a column\ndata.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)\n\n# adding these categories to the data\n\ndata['Defending'] = data.apply(defending, axis = 1)\ndata['General'] = data.apply(general, axis = 1)\ndata['Mental'] = data.apply(mental, axis = 1)\ndata['Passing'] = data.apply(passing, axis = 1)\ndata['Mobility'] = data.apply(mobility, axis = 1)\ndata['Power'] = data.apply(power, axis = 1)\ndata['Rating'] = data.apply(rating, axis = 1)\ndata['Shooting'] = data.apply(shooting, axis = 1)","cdb04242":"players = data[['Name','Defending','General','Mental','Passing',\n                'Mobility','Power','Rating','Shooting','Flag','Age',\n                'Nationality', 'Photo', 'Club_Logo', 'Club']]\n\nplayers.head()","43d162c0":"# comparison of preferred foot over the different players\n\ndata['Preferred Foot'].value_counts().head(50).plot.bar(color = 'purple')\nplt.title('Most Preferred Foot of the Players', fontsize = 20)","ec0d14b6":"#  comparison of international reputation among the players\n\ndata['International Reputation'].value_counts()","0abfe39e":"# plotting a pie chart to represent share of international repuatation\n\nlabels = ['1', '2', '3', '4', '5']\nsizes = [16532, 1261, 309, 51, 6]\ncolors = ['red', 'yellow', 'green', 'pink', 'blue']\nexplode = [0.1, 0.1, 0.2, 0.5, 0.9]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(sizes, labels = labels, colors = colors, explode = explode, shadow = True)\nplt.title('A Pie Chart for International Repuatation for the Football Players', fontsize = 25)\nplt.legend()\nplt.show()\n","accbafbf":"# A player's foot (left or right) that is weaker than their preferred foot. A player's attribute rated between 1 to 5 \n# which specifies the shot power and ball control for the other foot of that player than his preferred foot's.The higher\n# rate defines the higher shot power and ball control.\n\ndata['Weak Foot'].value_counts()","7743aefa":"# plotting a pie chart to represent the share of week foot players\n\nlabels = ['5', '4', '3', '2', '1'] \nsize = [229, 2662, 11349, 3761, 158]\ncolors = ['red', 'yellow', 'green', 'pink', 'blue']\nexplode = [0.1, 0.1, 0.1, 0.1, 0.1]\n\nplt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True)\nplt.title('Pie Chart for Representing Week Foot of the Players', fontsize = 25)\nplt.legend()\nplt.show()","f4a38d67":"# different positions acquired by the players \n\nplt.figure(figsize = (12, 8))\nsns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nax = sns.countplot('Position', data = data, color = 'orange')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","77ef286a":"# defining a function for cleaning the Weight data\n\ndef extract_value_from(value):\n  out = value.replace('lbs', '')\n  return float(out)\n\n# applying the function to weight column\n#data['value'] = data['value'].apply(lambda x: extract_value_from(x))\ndata['Weight'] = data['Weight'].apply(lambda x : extract_value_from(x))\n\ndata['Weight'].head()","0bbb8085":"# defining a function for cleaning the wage column\n\ndef extract_value_from(Value):\n    out = Value.replace('\u20ac', '')\n    if 'M' in out:\n        out = float(out.replace('M', ''))*1000000\n    elif 'K' in Value:\n        out = float(out.replace('K', ''))*1000\n    return float(out)","fd93877f":"# applying the function to the wage column\n\ndata['Value'] = data['Value'].apply(lambda x: extract_value_from(x))\ndata['Wage'] = data['Wage'].apply(lambda x: extract_value_from(x))\n\ndata['Wage'].head()","327c4e24":"# Comparing the players' Wages\n\nsns.set(style = 'dark', palette = 'bright', color_codes = True)\nx = data.Wage\nplt.rcParams['figure.figsize'] = (18, 7)\nsns.countplot(x, data = data, color = 'y')\nplt.xlabel('Wage Range for Players', fontsize = 16)\nplt.ylabel('Count of the Players', fontsize = 16)\nplt.title('Comparing the wages of players', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","2514be90":"# Skill Moves of Players\n\nplt.figure(figsize = (7, 8))\nax = sns.countplot(x = 'Skill Moves', data = data, palette = 'pastel')\nax.set_title(label = 'Count of players on Basis of their skill moves', fontsize = 20)\nax.set_xlabel(xlabel = 'Number of Skill Moves', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","895203e4":"# Height of Players\n\nplt.figure(figsize = (13, 8))\nax = sns.countplot(x = 'Height', data = data, palette = 'dark')\nax.set_title(label = 'Count of players on Basis of Height', fontsize = 20)\nax.set_xlabel(xlabel = 'Height in Foot per inch', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","d6e0ecae":"# To show Different body weight of the players participating in the FIFA 2019\n\nplt.figure(figsize = (30, 8))\nsns.countplot(x = 'Weight', data = data, palette = 'rainbow')\nplt.title('Different Weights of the Players Participating in FIFA 2019', fontsize = 20)\nplt.xlabel('Heights associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","aa737ddd":"# To show Different Work rate of the players participating in the FIFA 2019\n\nplt.figure(figsize = (15, 8))\nsns.countplot(x = 'Work Rate', data = data, palette = 'hls')\nplt.title('Different work rates of the Players Participating in the FIFA 2019', fontsize = 20)\nplt.xlabel('Work rates associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","9bab5d32":"# To show Different Speciality Score of the players participating in the FIFA 2019\n\nx = data.Special\nplt.figure(figsize = (12, 8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'm')\nax.set_xlabel(xlabel = 'Special score range', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of the Players',fontsize = 16)\nax.set_title(label = 'Histogram for the Speciality Scores of the Players', fontsize = 20)\nplt.show()","d15adf42":"# To show Different potential scores of the players participating in the FIFA 2019\n\nx = data.Potential\nplt.figure(figsize=(12,8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'y')\nax.set_xlabel(xlabel = \"Player\\'s Potential Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Potential Scores', fontsize = 20)\nplt.show()","2647cea2":"# To show Different overall scores of the players participating in the FIFA 2019\n\nsns.set(style = \"dark\", palette = \"deep\", color_codes = True)\nx = data.Overall\nplt.figure(figsize = (12,8))\nax = sns.distplot(x, bins = 52, kde = False, color = 'r')\nax.set_xlabel(xlabel = \"Player\\'s Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Overall Scores', fontsize = 20)\nplt.show()","c5751701":"# To show Different nations participating in the FIFA 2019\n\ndata['Nationality'].value_counts().head(80).plot.bar(color = 'orange', figsize = (20, 7))\nplt.title('Different Nations Participating in FIFA 2019')\nplt.xlabel('Name of The Country')\nplt.ylabel('count')\nplt.show()","63b89b94":"# To show that there are people having same age\n# Histogram: number of players's age\n\nsns.set(style = \"dark\", palette = \"colorblind\", color_codes = True)\nx = data.Age\nplt.figure(figsize = (12,8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'g')\nax.set_xlabel(xlabel = \"Player\\'s age\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players age', fontsize = 20)\nplt.show()","599d72fa":"#comparing the different body types of the players participating in FIFA 2019\n\ndata['Body Type'].value_counts().plot.bar(color = 'green', figsize = (7, 5))\nplt.title('Different Body Types')\nplt.xlabel('Body Types')\nplt.ylabel('count')\nplt.show()","f8ad6eb1":"# selecting some of the interesting and important columns from the set of columns in the given dataset\n\nselected_columns = ['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value',\n                    'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot',\n                    'Skill Moves', 'Work Rate', 'Body Type', 'Position', 'Height', 'Weight',\n                    'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                    'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                    'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                    'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                    'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                    'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                    'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']\n","6d38887c":"# violin plot \n\nplt.rcParams['figure.figsize'] = (18, 7)\nsns.violinplot(data['Overall'], data['Age'], hue = data['Preferred Foot'], palette = 'Set1')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)","3f445f21":"# bubble plot\n\nplt.scatter(data['Overall'], data['International Reputation'], s = data['Age']*1000, c = 'pink')\nplt.xlabel('Overall Ratings', fontsize = 20)\nplt.ylabel('International Reputation', fontsize = 20)\nplt.legend('Age')\nplt.show()","0a5cccf7":"# having a look at the sample of selected data\n\ndata_selected.sample(5)\n","29b4586b":"# plotting a correlation heatmap\n\nplt.rcParams['figure.figsize'] = (30, 20)\nsns.heatmap(data_selected[['Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value',\n                    'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot',\n                    'Skill Moves', 'Work Rate', 'Body Type', 'Position', 'Height', 'Weight',\n                    'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                    'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                    'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                    'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                    'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                    'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                    'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']].corr(), annot = True)\n\nplt.title('Histogram of the Dataset', fontsize = 30)\nplt.show()","20add54b":"# best players per each position with their age, club, and nationality based on their overall scores\n\ndata.iloc[data.groupby(data['Position'])['Overall'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","2d8893b4":"# best players from each positions with their age, nationality, club based on their potential scores\n\ndata.iloc[data.groupby(data['Position'])['Potential'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","f7ee7e6e":"# picking up the countries with highest number of players to compare their overall scores\n\ndata['Nationality'].value_counts().head(8)","1627c55b":"# Every Nations' Player and their Weights\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.violinplot(x = data_countries['Nationality'], y = data_countries['Weight'], palette = 'colorblind')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight of players from different countries', fontsize = 20)\nplt.show()","cb51afdd":"# Every Nations' Player and their overall scores\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Overall']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Overall'], palette = 'spring')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Scores', fontsize = 9)\nax.set_title(label = 'Distribution of overall scores of players from different countries', fontsize = 20)\nplt.show()","e1496dc4":"# Every Nations' Player and their wages\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Wage'], palette = 'Purples')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Wage', fontsize = 9)\nax.set_title(label = 'Distribution of Wages of players from different countries', fontsize = 15)\nplt.show()","ebd42165":"# Every Nations' Player and their International Reputation\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['International Reputation']]\n\nplt.rcParams['figure.figsize'] = (12, 7)\nax = sns.violinplot(x = data_countries['Nationality'], y = data_countries['International Reputation'], palette = 'autumn')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Distribution of reputation', fontsize = 9)\nax.set_title(label = 'Distribution of International Repuatation of players from different countries', fontsize = 15)\nplt.show()","28b92181":"# finding the the popular clubs around the globe\n\ndata['Club'].value_counts().head(10)","8f110c61":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Overall']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.barplot(x = data_clubs['Club'], y = data_clubs['Overall'], palette = 'inferno')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)\nax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)\nplt.show()","db7a9428":"# Distribution of Ages in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.violinplot(x = 'Club', y = 'Age', data = data_club, palette = 'magma')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution', fontsize = 10)\nax.set_title(label = 'Disstribution of Ages in some Popular Clubs', fontsize = 20)","6529bb7b":"# Distribution of Wages in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.violinplot(x = 'Club', y = 'Wage', data = data_club, palette = 'Reds')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution', fontsize = 10)\nax.set_title(label = 'Disstribution of Wages in some Popular Clubs', fontsize = 20)\nplt.show()","b0f7e7af":"# Distribution of Wages in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['International Reputation']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.violinplot(x = 'Club', y = 'International Reputation', data = data_club, palette = 'bright')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution of Reputation', fontsize = 10)\nax.set_title(label = 'Disstribution of International Reputation in some Popular Clubs', fontsize = 20)\nplt.show()","e96e466c":"some_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (14, 8)\nax = sns.violinplot(x = 'Club', y = 'Weight', data = data_clubs, palette = 'Oranges')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight in Different popular Clubs', fontsize = 20)\nplt.show()","b6c2fa40":"# finding 15 youngest Players from the dataset\n\nyoungest = data.sort_values('Age', ascending = True)[['Name', 'Age', 'Club', 'Nationality']].head(15)\nprint(youngest)","854a5e40":"# finding 15 eldest players from the dataset\n\neldest = data.sort_values('Age', ascending = False)[['Name', 'Age', 'Club', 'Nationality']].head(15)\nprint(eldest)","abcf7c41":"# checking the head of the joined column\n\ndata['Joined'].head()","5ab3d743":"# The longest membership in the club\n\nimport datetime\n\nnow = datetime.datetime.now()\ndata['Join_year'] = data.Joined.dropna().map(lambda x: x.split(',')[1].split(' ')[1])\ndata['Years_of_member'] = (data.Join_year.dropna().map(lambda x: now.year - int(x))).astype('int')\nmembership = data[['Name', 'Club', 'Years_of_member']].sort_values(by = 'Years_of_member', ascending = False).head(10)\nmembership.set_index('Name', inplace=True)\nmembership","a1b0e721":"# defining the features of players\n\nplayer_features = ('Acceleration', 'Aggression', 'Agility', \n                   'Balance', 'BallControl', 'Composure', \n                   'Crossing', 'Dribbling', 'FKAccuracy', \n                   'Finishing', 'GKDiving', 'GKHandling', \n                   'GKKicking', 'GKPositioning', 'GKReflexes', \n                   'HeadingAccuracy', 'Interceptions', 'Jumping', \n                   'LongPassing', 'LongShots', 'Marking', 'Penalties')\n\n# Top four features for every position in football\n\nfor i, val in data.groupby(data['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {}'.format(i, *tuple(val.nlargest(4).index)))","8893d328":"from math import pi\n\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in data.groupby(data['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","cd17f67c":"# Top 10 left footed footballers\n\ndata[data['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club', 'Nationality']].head(10)","1f0a0928":"# Top 10 Right footed footballers\n\ndata[data['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club', 'Nationality']].head(10)","3da44ded":"# comparing the performance of left-footed and right-footed footballers\n# ballcontrol vs dribbing\n\nsns.lmplot(x = 'BallControl', y = 'Dribbling', data = data, col = 'Preferred Foot')","90944d9c":"# visualizing clubs with highest number of different countries\n\ndata.groupby(data['Club'])['Nationality'].nunique().sort_values(ascending = False).head(10)","4f2d295b":"# visualizing clubs with highest number of different countries\n\ndata.groupby(data['Club'])['Nationality'].nunique().sort_values(ascending = True).head(10)","81110d2f":"Analyzing the Data","2c9e51ad":"15 Eldest Players from FIFA 2019","6bf19d08":"Defining the features of players","0329b9b5":"Reading the Data","931d330b":"Clubs with highest number of different countries","b3ae6cb8":"Importing the Basic Libraries","1cdf388d":"**Best Players from each positions with their age, nationality, club based on their Potential Scores**","50521300":"The longest membership in the club","cd792ff0":"**Top 10 Right footed footballers**","924c2c81":"**Top 10 left footed footballers**","9791ee9f":"**Best Players per each position with their age, club, and nationality based on their Overall Scores**","31aa1fcf":"**Analyzing the FIFA 2019 Data**","fd55383d":"Clubs with highest number of different countries","c0782713":"15 youngest Players from the FIFA 2019"}}