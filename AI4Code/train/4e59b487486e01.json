{"cell_type":{"4f741819":"code","a6efb01c":"code","d791c911":"code","512eb54a":"code","f4032936":"code","0cc5e91f":"code","dad29d5b":"code","f859a5bf":"code","4f070e3e":"code","24a38cf3":"code","478ea6a4":"code","dd2c0c88":"code","6103a7ab":"code","ade1cef5":"code","f2ebd007":"code","51a40d01":"code","aace73b7":"code","14dc93af":"code","1718a828":"markdown","3782bdc0":"markdown","9ba53e33":"markdown","6957e3c3":"markdown"},"source":{"4f741819":"# default libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\n# ml modeling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score \n\n# dl modeling\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, BatchNormalization\nimport keras\nfrom keras.layers import Input, Dense\nfrom keras.optimizers import SGD\ndf = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndf.head()","a6efb01c":"# explore column names\ndf.columns","d791c911":"# find na values\ndf.isna().sum()","512eb54a":"# drop unnamed and iq because they arent relevant to prediction\ndf.drop([\"id\",\"Unnamed: 32\"],axis = 1,inplace = True)\n\n#coding M and B to be 1 and 0 for classification\ndf[\"diagnosis\"].replace(\"M\",0,inplace = True)\ndf[\"diagnosis\"].replace(\"B\",1,inplace = True)","f4032936":"plt.figure(figsize=(25, 12))\nsns.heatmap(df.corr(), annot=True,cmap='Reds')\nplt.show()","0cc5e91f":"M = data[(df['diagnosis'] != 0)]\nB = data[(df['diagnosis'] == 0)]\n\ntrace = go.Pie(labels = ['benign','malignant'], values = data['diagnosis'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['blue', 'red'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Diagnosis')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","dad29d5b":"# train test split\nX = df.iloc[:, 1:].values\ny = df.iloc[:, 0].values\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.25)\n","f859a5bf":"Log = LogisticRegression()\nLog.fit(x_train,y_train)\nprint(\"Accuracy:{}\".format(Log.score(x_test,y_test)))","4f070e3e":"# Confusion Matrix\ny_true = y_test \ny_pred = Log.predict(x_test) #Predict data for eveluating \ncm = confusion_matrix(y_true,y_pred)\n\n# heat map plot\nf,ax = plt.subplots(figsize = (5,5))\nsns.heatmap(cm,annot = True,linewidth = 1,fmt =\".0f\",ax = ax,cmap='Reds')","24a38cf3":"X = df.iloc[:, 1:].values\ny = df.iloc[:, 0].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25,random_state=0)","478ea6a4":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","dd2c0c88":"svclassifier = SVC(kernel = 'linear', random_state = 0)\nsvclassifier.fit(X_train, y_train)","6103a7ab":"accuracy = svclassifier.score(X_test, y_test)\nprint(\"Accuracy:{}\".format(accuracy))","ade1cef5":"# Confusion Matrix\ny_true = y_test \ny_pred = svclassifier.predict(X_test) #Predict data for eveluating \ncm = confusion_matrix(y_true,y_pred)\n\n# heat map plot\nf,ax = plt.subplots(figsize = (5,5))\nsns.heatmap(cm,annot = True,linewidth = 1,fmt =\".0f\",ax = ax,cmap='Reds')","f2ebd007":"X = df.iloc[:, 1:].values\ny = df.iloc[:, 0].values\n\n# Encoding categorical data\nlabelencoder_X_1 = LabelEncoder()\ny = labelencoder_X_1.fit_transform(y)\n\n# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n#Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","51a40d01":"model = Sequential()\nmodel.add(Dense(256, input_dim=30))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128))\nmodel.add(Activation('softmax'))\nmodel.add(Dense(output_dim=1, init='uniform', activation='sigmoid'))\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n#model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train,y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))","aace73b7":"model.compile(loss='mean_squared_error', optimizer='adam',\n              metrics = [\"accuracy\"])","14dc93af":"# Predicting the Test set results\ny_pred = model.predict(\n    X_test)\ny_pred = (y_pred > 0.5)\n\n# Making the Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\n\nsns.heatmap(cm,annot=True,cmap='Reds')\nplt.savefig('h.png')","1718a828":"# Logistic Regression","3782bdc0":"# Artificial Neural Networks","9ba53e33":"Overall they all preformed similarly at about around 97% accuracy. Perhaps with more tuning we can predict cancer with accuracy high enough that it could be used ethically in production.","6957e3c3":"# Support Vector Machines"}}