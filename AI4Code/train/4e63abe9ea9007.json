{"cell_type":{"7c8beb80":"code","d7851a18":"code","0f5197ce":"code","1ca16037":"code","d320103d":"code","5dd742ff":"code","e6b43a88":"code","ac6911fb":"code","57b5db28":"code","117b4b62":"code","53c01385":"code","fedeb909":"code","ae3edc37":"code","68a79a4f":"code","1a582cd9":"code","ab0f07d2":"code","998dd4ab":"code","e241853f":"code","d3f9de0d":"code","7742e29e":"code","c8236461":"code","348ad093":"markdown"},"source":{"7c8beb80":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d7851a18":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt \nimport numpy as np \nimport os \nimport pandas as pd \nfrom datetime import datetime","0f5197ce":"df = pd.read_csv('\/kaggle\/input\/build-a-tool-to-deduce-skill-set\/developer_india_5471_20200214_1581673429402490_1.csv')\ndata = df.head()","1ca16037":"df.shape","d320103d":"df.info()","5dd742ff":"df['crawl_timestamp'] = pd.to_datetime(df['crawl_timestamp'])","e6b43a88":"df['crawl_timestamp'].head(5)","ac6911fb":"df[\"job_title\"].value_counts()\n","57b5db28":"df[\"job_title\"].value_counts().head().plot.bar(figsize=(20,6))","117b4b62":"df[\"category\"].value_counts().head(10)","53c01385":"df['company_name'].value_counts().head().plot(kind = 'bar')","fedeb909":"df['category'].value_counts().head(10).plot(kind = 'bar')","ae3edc37":"df[\"html_job_description\"].isnull().sum()","68a79a4f":"df['job_title'].value_counts().head(30).plot(kind = 'bar')\n","1a582cd9":"requirements = {\"support, maintenance\":0,\"web application\":0,\"mysql\":0,\"SAS Developer\":0,\".Dotnet Developer Fresher\":0,\"MS Word\":0,\"PHP Developer\":0, \" r \":0, \"C\":0, \"Data Structure\":0, \"python\":0, \"PL SQL\":0, \"machine learning\":0,'linux':0, 'c#':0, \\\n\" ml \":0, \"Asp.Net MVC\":0, \"spark\":0, \"hadoop\":0, \"java\":0, \"scala\":0, \"HTML\":0, \"CSS\":0, \"JavaScript\":0, \"React \":0, 'jQuery':0, 'Node.js':0, \"c++\":0}\nfor i in range(len(df)):\n    html_job_description = str(df.html_job_description[i]).lower().replace(\"\\n\", \" \")\n    for k in requirements:\n        if k in html_job_description:\n            requirements[k] += 1\nprint(requirements['machine learning'])\nprint(requirements[' ml '])\nrequirements['machine learning'] += requirements[' ml ']","ab0f07d2":"from collections import OrderedDict\nsorted_req = OrderedDict(sorted(requirements.items(), key=lambda x:x[1]))\nplt.figure(figsize=(10, 10))\nplt.bar(range(len(sorted_req)), list(sorted_req.values()), align='center')\nplt.xticks(range(len(sorted_req)), list(sorted_req.keys()), rotation='vertical')\nplt.xlabel(\"job requirement\")\nplt.ylabel(\"Number of posts\")\nplt.show()","998dd4ab":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nstop_words = set(stopwords.words('english'))\ndescription_example = df.html_job_description[2].lower()\nword_tokens = word_tokenize(description_example)\nfiltered_description = [w for w in word_tokens if not w in stop_words]\nfiltered_description = \" \".join(filtered_description)","e241853f":"from os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d3f9de0d":"aggregate_descriptions = \" \".join(str(job_description)\n                      for job_description in df.html_job_description)\nstopwords = set(STOPWORDS)\n\nwordcloud = WordCloud(stopwords=stopwords, background_color='white',\n                     width=1000, height=700).generate(aggregate_descriptions)\nplt.figure(figsize=(15, 10))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","7742e29e":"import re\nfrom word2number import w2n\nimport statistics\ndef search_text_left_of_word(text, word, n):\n    \n    words = re.findall(r'\\w+', text)\n    try:\n        index = words.index(word)\n    except ValueError:\n        return \" \"\n    return words[index - n:index]\ndef search_year_word(text):\n    return text.find('year')\ndef search_number_around_word(word_surroundings):          #this function adds all the numbers found to a list. It also converts the words to numbers, if it is the case\n    word_surroundings = \" \".join(word_surroundings)\n    word_surroundings = word_tokenize(word_surroundings)\n    pos_tags = nltk.pos_tag(word_surroundings)\n    numbers_list = []\n    for a in pos_tags:\n        if a[1] in 'CD':\n            if a[0].isalpha():       #sometimes the numbers are written as words, e.g. 'Three' instead of 3\n                try:\n                    numbers_list.append(w2n.word_to_num(a[0]))\n                except ValueError:\n                    return \"\"\n            else:\n                numbers_list.append(a[0])\n    return numbers_list\nyears_experience_req = []","c8236461":"def convert_to_int(list_elem):\n    try:\n        converted_int = int(list_elem)\n        if converted_int <= 10:\n            return int(list_elem)\n    except ValueError:\n        return\nfor post_index in range (len(df)):\n    current_job = str(df.html_job_description[post_index])\n    word_surroundings = search_text_left_of_word(current_job, 'years', 2)\n    if current_job.find(' year ') > -1:\n        years_experience_req.append(['1'])\n    years_experience_req.append(search_number_around_word(word_surroundings))\n    #print(post_index, search_number_around_word(word_surroundings))\nyears_experience_req = [convert_to_int(item) for sublist in years_experience_req for item in sublist]\nyears_experience_req = [i for i in years_experience_req if i != None]\n#print(years_experience_req)\nprint(\"An average of \", statistics.mean(years_experience_req), \"  years is required in most job offerings. \")\ndf.html_job_description[10]","348ad093":"**Work is still pending Stay tuned!**"}}