{"cell_type":{"1a403f0b":"code","b893224b":"code","80b08cf5":"code","4e55552e":"code","d78576d9":"code","e36d76aa":"code","81b9d741":"code","dd4b9213":"code","3402ca8f":"code","f6fc5905":"code","cc6ca71c":"code","f620c9b9":"code","451029cb":"code","9c994f3e":"code","6047deee":"code","5acdc32b":"code","b06adafc":"code","e7bb003a":"code","35dedb08":"markdown","9e2e1b3f":"markdown","b464b9bb":"markdown","4c1a5e21":"markdown","bbd5e14e":"markdown","5ea42877":"markdown","d9d32b03":"markdown","9eda28a5":"markdown","7fcba8bc":"markdown","81b702e3":"markdown","c096a206":"markdown","2c4de507":"markdown","b83c8fb2":"markdown","05635491":"markdown","4d2234d0":"markdown","acad0435":"markdown","fd646519":"markdown"},"source":{"1a403f0b":"from PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline \n\ninput_folder = '..\/input\/'\n\nfilename = input_folder+'digits.png'\nimage = Image.open(filename)\n\ndef show(img, figsize=(8, 4), title=None):\n    plt.figure(figsize=figsize)\n    plt.imshow(img)\n    if title:\n        plt.title(title)\n    plt.show()\n\nshow(image)","b893224b":"print(f'Image details')\nprint(f'Format {image.format}')\nprint(f'Size {image.size}')\nprint(f'Mode {image.mode}')","80b08cf5":"from PIL import ImageEnhance\n\nbw_image = image.convert(mode='L') #L is 8-bit black-and-white image mode\nshow(bw_image, figsize=(12, 12))\nbw_image = ImageEnhance.Contrast(bw_image).enhance(1.5)\nshow(bw_image, figsize=(12, 12))","4e55552e":"SIZE = 30\nsamples = [] #array to store cut images\nfor digit, y in enumerate(range(0, bw_image.height, SIZE)):\n    #print('Cutting digit:', digit)\n    cuts=[]\n    for x in range(0, bw_image.width, SIZE):\n        cut = bw_image.crop(box=(x, y, x+SIZE, y+SIZE))\n        cuts.append(cut)\n    samples.append(cuts)\nprint(f'Cut {len(samples)*len(samples[0])} images total.')","d78576d9":"f = plt.figure(figsize=(18,2))\nax = f.subplots(1, 6)\nfor i, n in enumerate(np.random.randint(0, len(samples), size=6)):\n    m = (np.random.randint(0, len(samples[n])))\n    ax[i].imshow(samples[n][m])\n    ax[i].set_title(f'Digit: [{n}]')\nplt.show()","e36d76aa":"sample = samples[7][14]\nshow(sample, figsize=(2, 2))","81b9d741":"from PIL import ImageOps\nimport matplotlib.patches as patches\n\n# Inver sample, get bbox and display all that stuff.\ninv_sample = ImageOps.invert(sample)\nbbox = inv_sample.getbbox()\n\nfig = plt.figure(figsize=(2, 2))\nax = fig.add_axes([0,0,1,1])\n\nax.imshow(inv_sample)\nrect = patches.Rectangle(\n    (bbox[0], bbox[3]), bbox[2]-bbox[0], -bbox[3]+bbox[1]-1,\n    fill=False, alpha=1, edgecolor='w')\nax.add_patch(rect)\nplt.show()\n","dd4b9213":"crop = inv_sample.crop(bbox)\nshow(crop, title='Image cropped to bounding box')\n\n#resize back\nnew_size = 28\ndelta_w = new_size - crop.size[0]\ndelta_h = new_size - crop.size[1]\npadding = (delta_w\/\/2, delta_h\/\/2, delta_w-(delta_w\/\/2), delta_h-(delta_h\/\/2))\nnew_im = ImageOps.expand(crop, padding)\nshow(new_im, title='Resized and centered to 28x28')","3402ca8f":"def resize_and_center(sample, new_size=28):\n    inv_sample = ImageOps.invert(sample)\n    bbox = inv_sample.getbbox()\n    crop = inv_sample.crop(bbox)\n    delta_w = new_size - crop.size[0]\n    delta_h = new_size - crop.size[1]\n    padding = (delta_w\/\/2, delta_h\/\/2, delta_w-(delta_w\/\/2), delta_h-(delta_h\/\/2))\n    return ImageOps.expand(crop, padding)\n\nresized_samples = []\nfor row in samples:\n    resized_samples.append([resize_and_center(sample) for sample in row])\n        ","f6fc5905":"f = plt.figure(figsize=(18,2))\nax = f.subplots(1, 6)\nfor i, n in enumerate(np.random.randint(0, len(resized_samples), size=6)):\n    m = (np.random.randint(0, len(resized_samples[n])))\n    ax[i].imshow(resized_samples[n][m])\n    ax[i].set_title(f'Digit: [{n}]')\nplt.show()","cc6ca71c":"preview = Image.new('L', (len(samples[0])*new_size, len(samples)*new_size))\n\n\nx = 0\ny = 0\nfor row in resized_samples:\n    for sample in row:\n        preview.paste(sample, (x, y))\n        x += new_size\n    y+=new_size\n    x = 0\n\nshow(preview, figsize=(18,18), title='Processed images')\npreview.save('preview.png')","f620c9b9":"binary_samples = np.array([[sample.getdata() for sample in row] for row in resized_samples])\nbinary_samples = binary_samples.reshape(len(resized_samples)*len(resized_samples[0]), 28, 28)","451029cb":"show(binary_samples[128], figsize=(1,1))","9c994f3e":"classes = np.array([[i]*21 for i in range(10)]).reshape(-1)","6047deee":"print(f'X shape: {binary_samples.shape}')\nprint(f'y shape: {classes.shape}')","5acdc32b":"xfile = 'digits_x_test.npy'\nyfile = 'digits_y_test.npy'\nnp.save(xfile, binary_samples)\nnp.save(yfile, classes)","b06adafc":"x_test = np.load(xfile)\ny_test = np.load(yfile)\nx_test.shape, y_test.shape","e7bb003a":"\nfor i in np.random.randint(x_test.shape[0], size=6):\n    show(x_test[i], title=f'Digit [{y_test[i]}]', figsize=(1,1))","35dedb08":"And here is how to center image and resize it to desired size again:","9e2e1b3f":"So, the image itself is 630x300 pixels, and contains 21x10 digits, each drawn in a square 30x30 pixels.\nColor mode is RGBA, which is 4x8-bit pixels, true color with transparency mask.\n\n\nOur plan so far:\n\n1. Change color mode to black-and-white, 256 shades.\n2. Cut square images 30x30 pixels each.\n3. Center images and crop to 28x28 pixes\n4. Save output to numpy binary format","b464b9bb":"As we had 21 columns and 10 rows in the original picture, now we generate a target array with corresponging digit","4c1a5e21":"Now `samples` contain 10 arrays, each for its digit.\n\nLet's have a look at several random images:","bbd5e14e":"Have a look on what's there:","5ea42877":"### Save the result in numpy binary format","d9d32b03":"Let's have a look:","9eda28a5":"Obviously, images are not centered, and that what I'm going to fix in the next step.\n\n### Center images\n\nHere is an example of displaced digit:","7fcba8bc":"`Image.getdata()` method returns image bytes, which we put into numpy array.","81b702e3":"Save files to numpy binary format...","c096a206":"And now I'm ready to put all those findings into a single function and resize all images:","2c4de507":"In order to find and fix its location, I have to invert pixels, so that background area becomes black, and filled with zero pixels. Then `getbbox` method gives us the digit location, which has to be centered.","b83c8fb2":"# Do It Yourself MNIST Dataset\n\nIn this kernel I try to make my own database of hand-written digits.\n\nI've started with a simple black-and-white file in GIMP and drawn lines of digits.","05635491":"Well, I think the digits are cleaned up and nicely centered. Some of them look a little bit overrown, but that's ok with me.\nLet's glue all of the small images together and get a big picture.","4d2234d0":"### Change color mode to black-and-white, 256 shades.\n\nI also want to increate contrast a little.","acad0435":"Not much change to see here) Let's move on to the next step.\n\n### Cut square images 30x30 pixels each.","fd646519":"...and test it"}}