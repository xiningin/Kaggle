{"cell_type":{"63230172":"code","18f1090f":"code","60253352":"code","ebf46b68":"code","4720ea98":"code","2b7111cb":"code","1fce358d":"code","12618849":"code","41e11c49":"code","5de2f7af":"code","05425c5f":"code","1b2921c9":"code","e5252b3c":"code","d7d5017b":"code","28cb6b6f":"code","c419d314":"code","b8e0b696":"code","d4a3df5c":"code","f0af58c4":"code","9904f08e":"code","b551c381":"code","01c73acf":"code","d5fa2512":"code","56ad448f":"code","4f14893d":"code","0cddc214":"code","873c9d61":"code","4626f0bb":"code","fd111dad":"code","a4706238":"code","22071f13":"code","d82b7864":"code","b28aa0fb":"code","bde29bc1":"code","77de6486":"code","1b3b6aa0":"code","b5f8620f":"code","068874f1":"code","cf13af95":"code","0ae00e99":"code","d0c5fe42":"code","c19d3b54":"code","757954f9":"code","220d6add":"code","6c56e208":"code","f2e41d56":"code","db00efdd":"code","dff6417d":"code","d5e70cec":"code","d56ce160":"code","023aec51":"code","2b04b3f5":"code","1bc5dc01":"code","7b24c747":"code","9e24cbf8":"code","6aa346f3":"code","49f2aea6":"code","f7276863":"code","f7009545":"code","9c24fc4c":"code","5e8db5ae":"code","e105db80":"code","162b6401":"code","f6b9373e":"code","bac9b28f":"code","73c6a8b2":"code","70893380":"code","45ff6f3a":"code","27408a13":"code","19f5c614":"code","5ba44a42":"code","ebe0dc53":"code","5841e1fd":"code","50f5435b":"code","fb65b824":"code","3e7a8440":"code","afe6fd52":"code","cfc9d463":"code","2e043372":"code","a95a91d4":"code","e3ecc518":"code","fc38a8ee":"code","ec0281d4":"code","d91646dc":"code","7b9e3ea7":"code","e6a41af4":"code","e013d588":"code","617ae6a6":"code","e8dcdb8b":"code","c37e5f3f":"markdown","b95313bc":"markdown","592ad557":"markdown","089dddc8":"markdown","2946d7cb":"markdown","c3e9a0fc":"markdown","c998774d":"markdown","50d05649":"markdown","014bd8a9":"markdown","e44a9da9":"markdown","f0ce6823":"markdown","bf0e6a2c":"markdown","d0ad2f9b":"markdown","3c75f07f":"markdown","9bb47884":"markdown","210ec2b5":"markdown","8907f37d":"markdown","f5518eb0":"markdown","b45d1bc3":"markdown","d2ca85b2":"markdown","b93b08eb":"markdown","09d99714":"markdown","3254558d":"markdown","f71d0ddf":"markdown","e4e6c8f0":"markdown","c9c83f79":"markdown","ab9a32fb":"markdown","d96f1c98":"markdown","80b7815e":"markdown","81cd375b":"markdown","a1d31a2a":"markdown","8bbdb7b6":"markdown","6fecfdce":"markdown","5f3d0837":"markdown","6bf88b9d":"markdown","00b98734":"markdown","ba4f7018":"markdown","793feb55":"markdown","fcd7a906":"markdown","e918af88":"markdown","660d3e03":"markdown","2843468a":"markdown","32d91ce2":"markdown","3b570328":"markdown","df12b358":"markdown","beb169d4":"markdown","1f569b60":"markdown","4fd1a270":"markdown","65b19517":"markdown","4fc2164a":"markdown","a40ef416":"markdown","3b27d73a":"markdown","24abcebd":"markdown","05d27a2a":"markdown","58107d53":"markdown","68f9e7e0":"markdown","0f5eb78a":"markdown"},"source":{"63230172":"import pandas as pd\nimport numpy as np\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Removes the limit from the number of displayed rows.\npd.set_option(\"display.max_columns\", None)\n# Changes the limit of number of displayed columns tov200\npd.set_option(\"display.max_rows\", 200)\n\n# To build linear model for prediction\nfrom sklearn.linear_model import LinearRegression\n\n# To check model performance\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n# Forward Feature Selection\nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs","18f1090f":"df = pd.read_csv(\"..\/input\/airbnb\/AirBNB (1).csv\")\nprint(f\"There are {df.shape[0]} rows and {df.shape[1]} columns.\")  # f-string\n\nnp.random.seed(1)  # To get the same random results every time\ndf.sample(n=10)","60253352":"df.info()","ebf46b68":"df.isnull().sum()","4720ea98":"df[df.duplicated()].count()","2b7111cb":"df.nunique()","1fce358d":"df.describe().T","12618849":"num_to_display = 10  \nfor colname in df.dtypes[df.dtypes == 'object'].index:\n    val_counts = df[colname].value_counts(dropna=False)  # i want to see NA counts\n    print(val_counts[:num_to_display])\n    if len(val_counts) > num_to_display:\n        print(f'Only displaying first {num_to_display} of {len(val_counts)} values.')\n    print('\\n\\n') # just for more space between ","41e11c49":"cols = df.select_dtypes(['object'])\ncols.columns","5de2f7af":"for i in cols.columns:\n    df[i] = df[i].astype('category')","05425c5f":"df.info()","1b2921c9":"df = df.replace('?', np.nan)","e5252b3c":"df.sample(n=10)","d7d5017b":"df['review_scores_rating'] = df['review_scores_rating'].fillna(df['review_scores_rating'].min())","28cb6b6f":"series = pd.isnull(df[\"review_scores_rating\"]) ","c419d314":"df['review_scores_rating'] = df['review_scores_rating'].fillna(df['review_scores_rating'].min())","b8e0b696":"df[series] ","d4a3df5c":"df['bathrooms'] = df['bathrooms'].fillna(df['bathrooms'].median())","f0af58c4":"df['bedrooms'] = df['bedrooms'].fillna(df['bedrooms'].median())","9904f08e":"df['beds'] = df['beds'].fillna(df['beds'].median())","b551c381":"df['accommodates'] = df['accommodates'].fillna(df['accommodates'].median())","01c73acf":"df['accommodates'] = df['accommodates'].fillna(df['accommodates'].median())","d5fa2512":"df.sample(n=10)","56ad448f":"bool_series = pd.isnull(df[\"room_type\"]) ","4f14893d":"df[bool_series] ","0cddc214":"df[\"room_type\"].fillna(\"Entire home\/apt\", inplace = True)","873c9d61":"df[bool_series] ","4626f0bb":"bool_series = pd.isnull(df[\"cancellation_policy\"]) ","fd111dad":"df[bool_series] ","a4706238":"df[\"cancellation_policy\"].fillna(\"strict\", inplace = True)","22071f13":"df[bool_series] ","d82b7864":"df['cleaning_fee'].value_counts()","b28aa0fb":"df.cleaning_fee = df.cleaning_fee.fillna(True)","bde29bc1":"df['instant_bookable'] = df['instant_bookable'].map(\n                   {'t':True ,'f':False})","77de6486":"df.isnull().sum()","1b3b6aa0":"def histogram_boxplot(feature, figsize=(15,10), bins = None):\n    \"\"\" Boxplot and histogram combined\n    feature: 1-d feature array\n    figsize: size of fig (default (9,8))\n    bins: number of bins (default None \/ auto)\n    \"\"\"\n    f2, (ax_box2, ax_hist2) = plt.subplots(nrows = 2, # Number of rows of the subplot grid= 2\n                                           sharex = True, # x-axis will be shared among all subplots\n                                           gridspec_kw = {\"height_ratios\": (.25, .75)}, \n                                           figsize = figsize \n                                           ) # creating the 2 subplots\n    sns.boxplot(feature, ax=ax_box2, showmeans=True, color='violet') # boxplot will be created and a star will indicate the mean value of the column\n    sns.distplot(feature, kde=F, ax=ax_hist2, bins=bins,palette=\"winter\") if bins else sns.distplot(feature, kde=False, ax=ax_hist2) # For histogram\n    ax_hist2.axvline(np.mean(feature), color='green', linestyle='--') # Add mean to the histogram\n    ax_hist2.axvline(np.median(feature), color='black', linestyle='-') # Add median to the histogram","b5f8620f":"\ndef perc_on_bar(plot, feature):\n    '''\n    plot\n    feature: categorical feature\n    the function won't work if a column is passed in hue parameter\n    '''\n\n    total = len(feature) # length of the column\n    for p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total) # percentage of each class of the category\n        x = p.get_x() + p.get_width() \/ 2 - 0.05 # width of the plot\n        y = p.get_y() + p.get_height()           # hieght of the plot\n        ax.annotate(percentage, (x, y), size = 12) # annotate the percantage \n        \n    plt.show() # show the plot","068874f1":"plt.figure(figsize=(15,5))\nax = sns.countplot(df[\"room_type\"],palette='winter')\nperc_on_bar(ax,df[\"room_type\"])","cf13af95":"histogram_boxplot(df['accommodates'])","0ae00e99":"histogram_boxplot(df['bathrooms'])","d0c5fe42":"plt.figure(figsize=(15,5))\nax = sns.countplot(df[\"cancellation_policy\"],palette='winter')\nperc_on_bar(ax,df[\"cancellation_policy\"])","c19d3b54":"plt.figure(figsize=(15,5))\nax = sns.countplot(df[\"instant_bookable\"],palette='winter')\nperc_on_bar(ax,df[\"instant_bookable\"])","757954f9":"histogram_boxplot(df['review_scores_rating'])","220d6add":"histogram_boxplot(df['bedrooms'])","6c56e208":"histogram_boxplot(df['beds'])","f2e41d56":"histogram_boxplot(df['log_price'])","db00efdd":"# lets plot histogram of all plots\nfrom scipy.stats import norm\nall_col = df.select_dtypes(include=np.number).columns.tolist()\nplt.figure(figsize=(17,75))\n\nfor i in range(len(all_col)):\n    plt.subplot(18,3,i+1)\n    plt.hist(df[all_col[i]])\n    #sns.displot(df[all_col[i]], kde=True)\n    plt.tight_layout()\n    plt.title(all_col[i],fontsize=25)\n    \n\nplt.show()","dff6417d":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True,vmin=-1,vmax=1,fmt='.2f')\nplt.show()","d5e70cec":"df.corr(method ='pearson') ","d56ce160":"cols = df[['bathrooms','bedrooms','beds']].columns.tolist()\nplt.figure(figsize=(15,20))\n\nfor i, variable in enumerate(cols):\n                     plt.subplot(3,2,i+1)\n                     sns.boxplot(df[\"accommodates\"],df[variable],palette=\"PuBu\")\n                     plt.tight_layout()\n                     plt.title(variable)\nplt.show()","023aec51":"### Function to plot stacked bar charts for categorical columns\ndef stacked_plot(x):\n    sns.set(palette='nipy_spectral')\n    tab1 = pd.crosstab(x,df['accommodates'],margins=True)\n    print(tab1)\n    print('-'*120)\n    tab = pd.crosstab(x,df['accommodates'],normalize='index')\n    tab.plot(kind='bar',stacked=True,figsize=(10,5))\n    plt.legend(loc='lower left', frameon=False)\n    plt.legend(loc=\"upper left\", bbox_to_anchor=(1,1))\n    plt.show()","2b04b3f5":"stacked_plot(df['room_type'])","1bc5dc01":"stacked_plot(df['cancellation_policy'])","7b24c747":"np.random.seed(1)\nx1 = np.random.normal(size=1000)\nx2 = np.random.lognormal(size=1000)\n\ndef frac_outside_1pt5_IQR(x):\n    length = 1.5 * np.diff(np.quantile(x, [.25, .75]))\n    return np.mean(np.abs(x - np.median(x)) > length)\n\nprint(frac_outside_1pt5_IQR(x1))\nprint(frac_outside_1pt5_IQR(x2))","9e24cbf8":"plt.hist(df['log_price'], 20)\nplt.title('Histogram of log_price')\nplt.show()\n\nsns.boxplot(df['log_price'])\nplt.title('Boxplot of log_price')\nplt.show()","6aa346f3":"quartiles = np.quantile(df['log_price'][df['log_price'].notnull()], [.25, .75])\nlog_price_4iqr = 4 * (quartiles[1] - quartiles[0])\nprint(f'Q1 = {quartiles[0]}, Q3 = {quartiles[1]}, 4*IQR = {log_price_4iqr}')\noutlier_log_price = df.loc[np.abs(df['log_price'] - df['log_price'].median()) > log_price_4iqr, 'log_price']\noutlier_log_price","49f2aea6":"df.drop(outlier_log_price.index, axis=0, inplace=True)","f7276863":"def frac_outside_1pt5_IQR(x):\n    length = 1.5 * np.diff(np.quantile(x, [.25, .75]))\n    return np.mean(np.abs(x - np.median(x)) > length)\n\nprint(frac_outside_1pt5_IQR(x1))\nprint(frac_outside_1pt5_IQR(x2))","f7009545":"plt.hist(df['review_scores_rating'], 20)\nplt.title('Histogram of review_scores_rating')\nplt.show()\n\nsns.boxplot(df['review_scores_rating'])\nplt.title('Boxplot of review_scores_rating')\nplt.show()","9c24fc4c":"quartiles = np.quantile(df['review_scores_rating'][df['review_scores_rating'].notnull()], [.25, .75])\nreview_scores_rating_4iqr = 4 * (quartiles[1] - quartiles[0])\nprint(f'Q1 = {quartiles[0]}, Q3 = {quartiles[1]}, 4*IQR = {review_scores_rating_4iqr}')\noutlier_review_scores_rating = df.loc[np.abs(df['review_scores_rating'] - df['review_scores_rating'].median()) > review_scores_rating_4iqr, 'review_scores_rating']\noutlier_review_scores_rating","5e8db5ae":"df.drop(outlier_review_scores_rating.index, axis=0, inplace=True)","e105db80":"def frac_outside_1pt5_IQR(x):\n    length = 1.5 * np.diff(np.quantile(x, [.25, .75]))\n    return np.mean(np.abs(x - np.median(x)) > length)\n\nprint(frac_outside_1pt5_IQR(x1))\nprint(frac_outside_1pt5_IQR(x2))","162b6401":"plt.hist(df['accommodates'], 20)\nplt.title('Histogram of accommodates')\nplt.show()\n\nsns.boxplot(df['accommodates'])\nplt.title('Boxplot of accommodates')\nplt.show()","f6b9373e":"quartiles = np.quantile(df['accommodates'][df['accommodates'].notnull()], [.25, .75])\naccommodates_4iqr = 4 * (quartiles[1] - quartiles[0])\nprint(f'Q1 = {quartiles[0]}, Q3 = {quartiles[1]}, 4*IQR = {accommodates_4iqr}')\noutlier_accommodates = df.loc[np.abs(df['accommodates'] - df['accommodates'].median()) > accommodates_4iqr, 'accommodates']\noutlier_accommodates","bac9b28f":"df.drop(outlier_accommodates.index, axis=0, inplace=True)","73c6a8b2":"def frac_outside_1pt5_IQR(x):\n    length = 1.5 * np.diff(np.quantile(x, [.25, .75]))\n    return np.mean(np.abs(x - np.median(x)) > length)\n\nprint(frac_outside_1pt5_IQR(x1))\nprint(frac_outside_1pt5_IQR(x2))","70893380":"plt.hist(df['beds'], 20)\nplt.title('Histogram of beds')\nplt.show()\n\nsns.boxplot(df['beds'])\nplt.title('Boxplot of beds')\nplt.show()","45ff6f3a":"quartiles = np.quantile(df['beds'][df['beds'].notnull()], [.25, .75])\nbeds_4iqr = 4 * (quartiles[1] - quartiles[0])\nprint(f'Q1 = {quartiles[0]}, Q3 = {quartiles[1]}, 4*IQR = {beds_4iqr}')\noutlier_beds = df.loc[np.abs(df['beds'] - df['beds'].median()) > beds_4iqr, 'beds']\noutlier_beds","27408a13":"df.drop(outlier_beds.index, axis=0, inplace=True)","19f5c614":"sns.histplot(df[\"log_price\"], kde=True)","5ba44a42":"plt.figure(figsize=(12, 7))\nsns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\")","ebe0dc53":"ind_vars = df.drop([\"accommodates\", \"log_price\"], axis=1)\ndep_var = df[[\"log_price\"]] \n\nprint(ind_vars.head())\nprint(dep_var.head())","5841e1fd":"def encode_cat_vars(x):\n    x = pd.get_dummies(\n        x,\n        columns=x.select_dtypes(include=[\"object\", \"category\"]).columns.tolist(),\n        drop_first=True,\n    )\n    return x\n\n\nind_vars_num = encode_cat_vars(ind_vars)\nind_vars_num.head()","50f5435b":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(\n    ind_vars_num, dep_var, test_size=0.3, random_state=1\n)\n","fb65b824":"print(\"Number of rows in train data =\", x_train.shape[0])\nprint(\"Number of rows in train data =\", x_test.shape[0])","3e7a8440":"lin_reg_model = LinearRegression()\nlin_reg_model.fit(x_train,y_train)","afe6fd52":"coef_df = pd.DataFrame(np.append(lin_reg_model.coef_.flatten(), lin_reg_model.intercept_), \\\n                       index=x_train.columns.tolist()+['Intercept'], columns=['Coefficients'])\ncoef_df","cfc9d463":"# MAPE\ndef mape(targets, predictions):\n    return np.mean(np.abs((targets - predictions)) \/ targets) * 100\n\n# Adjusted R^2\ndef adj_r2(ind_vars, targets, predictions):\n    r2 = r2_score(targets, predictions)\n    n = ind_vars.shape[0]\n    k = ind_vars.shape[1]\n    return 1-((1-r2)*(n-1)\/(n-k-1))\n\n# Model performance check\ndef model_perf(model, inp, out):\n\n    y_pred = np.exp(model.predict(inp))\n    y_act = np.exp(out.values)\n\n    return pd.DataFrame({\n                \"RMSE\": np.sqrt(mean_squared_error(y_act, y_pred)),\n                \"MAE\": mean_absolute_error(y_act, y_pred),\n                \"MAPE\": mape(y_act, y_pred),\n                \"R^2\": r2_score(y_act, y_pred),\n                \"Adjusted R^2\": adj_r2(inp, y_act, y_pred)\n           }, index=[0])","2e043372":"# Checking model performance on train set\nprint('Training Performance\\n')\nprint(model_perf(lin_reg_model, x_train, y_train))","a95a91d4":"# Checking model performance on test set\nprint('Test Performance\\n')\nprint(model_perf(lin_reg_model, x_test, y_test))","e3ecc518":"from mlxtend.feature_selection import SequentialFeatureSelector as sfs\n\nreg = LinearRegression()\n\n# Build step forward feature selection\nsfs1 = sfs(reg,k_features = x_train.shape[1], forward=True,   # k_features denotes \"Number of features to select\"\n           floating=False, scoring= 'r2',\n           verbose=2, cv=5)\n\n# Perform SFFS\nsfs1 = sfs1.fit(x_train, y_train)","fc38a8ee":"reg = LinearRegression()\n\n# # Build step forward feature selection\nsfs1 = sfs(reg, k_features = 11, forward=True,\n           floating=False, scoring='r2',\n           verbose=2, cv=5)\n\n# Perform SFFS\nsfs1 = sfs1.fit(x_train, y_train)","ec0281d4":"feat_cols = list(sfs1.k_feature_idx_)\nprint(feat_cols)","d91646dc":"x_train.columns[feat_cols]","7b9e3ea7":"x_train2 = x_train[x_train.columns[feat_cols]]","e6a41af4":"x_test.columns","e013d588":"#Creating new x_test with the same 11 variables that we selected for x_train\nx_test2 = x_test[x_train2.columns]","617ae6a6":"#Fitting linear model\nlin_reg_model2 = LinearRegression()\nlin_reg_model2.fit(x_train2,y_train)\n\n# let us check the coefficients and intercept of the model\n\ncoef_df = pd.DataFrame(np.append(lin_reg_model2.coef_.flatten(), lin_reg_model2.intercept_.flatten()), \\\n                       index=x_train2.columns.tolist()+['Intercept'], columns=['Coefficients'])\nprint(coef_df)\n\n# model performance on train set\nprint('\\n\\nTraining Performance\\n')\nprint(model_perf(lin_reg_model2, x_train2, y_train))\n\n# model performance on test set\nprint('\\n\\nTest Performance\\n')\nprint(model_perf(lin_reg_model2, x_test2, y_test))","e8dcdb8b":"# Extracting the rows from original data frame df where indexes are same as the training data\noriginal_df = df[df.index.isin(x_train2.index.values)].copy()\n\n# Extracting predicted values and residuals from the final model\nfitted_values = lin_reg_model2.predict(x_train2)\nresiduals = fitted_values - y_train\n\n# Add new columns for predicted values\noriginal_df[\"Predicted log_price\"] = fitted_values\noriginal_df[\"Predicted accommodates\"] = np.exp(fitted_values)\noriginal_df[\"residuals\"] = residuals\noriginal_df[\"Abs_residuals\"] = np.exp(residuals)\noriginal_df[\"Difference log_price\"] = np.abs(\n    original_df[\"accommodates\"] - original_df[\"Predicted accommodates\"]\n)\n\n# Let us look at the top 50 predictions where our model made highest extimation errors (on train data)\noriginal_df.sort_values(by=[\"Difference log_price\"], ascending=False).head(50)","c37e5f3f":"* The averge beds in a rental is 1.5\n* Alot of outliers","b95313bc":"#### Replacing categorical variables missing values ","592ad557":"* Most of the home for rent are Entire home\/apt at 41308 \n* About 32500 have a very strict cancellation policy\n* About 54399 have a cleaning fee\n* about 19451 have a instant bookalb option","089dddc8":"* Replaced all NaN values with the median for columes accommodates,bathrooms,\tbedrooms,beds.","2946d7cb":"##### Treatment for beds","c3e9a0fc":"#### looking at value counts for non-numeric features","c998774d":"### Outlier detection using IQR","50d05649":"* The max accommodations is 16 with an averge of 3","014bd8a9":"* five point summery\n* accommodates min is 1.0 to 16 max\n* bathrooms min is 0 to 8 max\n* review_scores_rating min is 20 to 100 max\n","e44a9da9":"#### coefficients and intercept of the model","f0ce6823":"##### Checking DataTypes","bf0e6a2c":"# Linear Model Building","d0ad2f9b":"* As we can see there big Correlation between beds and accommodates, which makes sense because they need a bed to sleep.\n* Thier is also a Correlation between bedroom and beds.","3c75f07f":"* The max bathrooms is 5 with an averge of 1.2","9bb47884":"* As we can see thier are a lot of null or missing values\n* Review_scores_rating has the highest with 16722 and will be the hardest to fix because we do not know if the sroce started with 0 or 100 from the get go.\n* The rest look simlpe to fix","210ec2b5":"* bathrooms come out to be very signifcant, as expected. There are two variable -review_scores_rating and room_type_Private room. As these two increase, the total value of the rental decreases, as visible in the negative coefficient sign.","8907f37d":"### Creating dummy variables","f5518eb0":"# Observations and Conclusions\n\n\n1. With our linear regression model we have been able to capture ~32% variation in our data.\n\n2. The model indicates that the most significant predictors of price of airbnb are - \n* bathrooms\t                    1.572243e-01\n* review_scores_rating\t       -2.284615e-03\n* bedrooms\t                    1.840101e-01\n* beds\t                        5.669303e-02\n* room_type_Private room\t   -6.917522e-01\n* room_type_Shared room\t       -1.167033e+00\n* cancellation_policy_moderate -1.467851e-02\n* cancellation_policy_strict    2.585779e-02\n* cleaning_fee_True\t           -3.240242e-02\n* instant_bookable_True\t       -5.234383e-02\n* Intercept\t                    4.791142e+00\n\n\n* The more  bedrooms and beds the rental has the higher the price.\n* If it is instant bookable the higher the price\n* If the rental has bad reviews then lower the rental price.","b45d1bc3":"* Replaced the 5 NaN values with Entire home\/apt because they have the highest count in room_type","d2ca85b2":"* There are lower outliers in log_price, review_scores_rating,\n* There are higher outliers in beds,bedrooms,bathrooms, accommodates","b93b08eb":"# Processing Columns","09d99714":"## Data Dictionary \n\n1. id\tProperty ID\n2. room_type\tType of Room in the property\n3. accommodates\tHow many adults can this property accomodate\n4. bathrooms\tNumber of bathrooms in the property\n5. cancellation_policy\tCancellation policy of the property\n6. cleaning_fee\tThis denotes whether the property's cleaning fee is included in the rent or not\n7. instant_bookable\tIt indicates whether an instant booking facility is available or not\n8. review_scores_rating\tThe review rating score of the property\n9. bedrooms\tNumber of bedrooms in the property\n10. beds\tTotal number of beds in the property\n11. log_price\tLog of the rental price of the property for a fixed period ","3254558d":"## Univariate analysis","f71d0ddf":"* Replaced all t with True and f with False","e4e6c8f0":"* Replaced the 8 missing values with strict since they have the highest count in cancellation_policy","c9c83f79":"### EDA","ab9a32fb":"* As our MEA has a high score  means we have bad proformance on our model\n* Since we have less samples it is harder to reconstruct the error distribution using RMSE which is the reason it is so high in our case.\n* Our R^2 is low and that is because our dataset or the data points are distributed with low variance and should be closer to 1 \n* Adjusted R-squared is low becuse we dont have many features and by that i mean the effective features to train our model.\n* I do think we need more features and better treatment of the ouliers to improve our score. ","d96f1c98":"* Replaced all missing values with NaN","80b7815e":"## Distributions","81cd375b":"* Replaced all NaN values with the min for review_scores_rating\n* My thought process is that if they are missing or have no reviews then the min will not skew the data to 0 since thier are 16722 missing values","a1d31a2a":"* All the missing values we set to 20 the averge is 78%","8bbdb7b6":"## Objective\n\n* Explore and visualize the dataset.\n* Build a linear regression model to predict the log of rental price\n* Generate a set of insights and recommendations that will help the business.","6fecfdce":"* As we can see there big Correlation between beds and accommodates, which makes sense because they need a bed to sleep.\n* Thier is also a Correlation between bedroom and beds.","5f3d0837":"* No duplicate data\n*  log_price has the second hidgest unique value count\n* The most important ones are going to be the 'category' Dtypes after we change them from objects","6bf88b9d":"##### Treatment for accommodates","00b98734":"# Background & Context\n\n* Airbnb is an online platform that allows people to rent short term accommodation. This ranges from regular people with a spare bedroom to property management firms who lease multiple rentals. On the one side, Airbnb enables owners to list their space and earn rental money. On the other side, it provides travelers easy access to renting private homes.\n\n* Airbnb receives commissions from two sources upon every booking, namely from the hosts and guests. For every booking, Airbnb charges the guest 6-12% of the booking fee. Moreover, Airbnb charges the host 3% for every successful transaction.\n\n* As a senior data scientist at Airbnb, you have to come up with a pricing model that can effectively predict the Rent for an accommodation and can help hosts, travelers, and also the business in devising profitable strategies.","ba4f7018":"* About 30.4 % of the cancellation policy is flexible and 44% is strict","793feb55":"* The averge bathrooms in a rental is 1.6\n* Alot of outliers","fcd7a906":"* Replaced 4 missing values in bool values with True ","e918af88":"* Converted all object datatypes to Category","660d3e03":"### Fitting a linear model","2843468a":"`id` is just an index for the data entry. In all likelihood, this column will not be a significant factor in  predicting the log of rental price. \n\n\n`room_type` contains a lot of type of home information. Let us check how many individual names we have. If they are too many, we can process this column to extract important information.\n\n`review_scores_rating` has NaN values\n","32d91ce2":"#### Missing Values","3b570328":"* 55.7% are entire home\/apt and 2.9% are shared room","df12b358":"##### Treatment for log_price","beb169d4":"** The model performance on training data. **","1f569b60":"* About 78.3 percent of the rentals are not instant bookable","4fd1a270":"## Bivariate analysis","65b19517":"### Correlation between numeric Variables","4fc2164a":"* There are lower outliers in log_price, review_scores_rating,\n* There are higher outliers in beds,bedrooms,bathrooms, accommodates\n* Using the IQR we treated the outliers","a40ef416":"##### Observations","3b27d73a":"### Define dependent variable","24abcebd":"##### Treatment for review_scores_rating","05d27a2a":"### Forward Feature Selection","58107d53":"### Analysing predictions where we were way off the mark","68f9e7e0":"* There are 74111 entries\n* There are 13 columns total with either a int64,object,or float64 data type.\n* We are going to have to change all the 'object' Dtypes to 'category'","0f5eb78a":"### Split the data into train and test"}}