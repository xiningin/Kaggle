{"cell_type":{"3b930eba":"code","de3c222d":"code","6b477a3e":"code","b3c7d80c":"code","8e8427f6":"code","3ac5cbcc":"code","e0f29b3b":"code","fa8bbf2a":"code","96f99912":"code","be4b6055":"code","ae5108ca":"code","1fdd50fb":"code","386e6107":"code","42bbc92f":"code","23231687":"code","630ec3e8":"code","dbfe4a4e":"code","01443e9a":"code","118e8a78":"code","8d54a5af":"code","3e7ad074":"code","3bbd8479":"code","e200420f":"code","a6596469":"code","bba885e6":"code","ab328aa7":"code","8f540e2a":"code","d3b822c0":"code","2f69b785":"code","a5c0cb13":"code","ff0693e5":"code","205216a6":"code","b60e0e88":"code","a150901d":"code","2a558d99":"code","b66485cc":"code","0b02a7d2":"code","2446f846":"code","f1fb733c":"code","1ee949bb":"code","56f1a423":"code","4544216f":"code","f26a3c93":"code","b39590e4":"code","c697c339":"code","5e546f44":"code","d85dcaa0":"code","f6461cf9":"code","51faeb77":"code","61293116":"code","d2c511e2":"code","3ebb48ce":"code","7403e962":"code","59e541f8":"code","e00633d1":"markdown","1ab20ce8":"markdown","6cfe374a":"markdown","1dd28e31":"markdown","dcebb7b4":"markdown","fef0a9d5":"markdown","be0c1da1":"markdown","1e990ed2":"markdown","54751f4e":"markdown","152742bb":"markdown","43483d03":"markdown","e8995572":"markdown","831a7dac":"markdown","befc8b0a":"markdown","7a052c51":"markdown","1e0943b9":"markdown","4774490c":"markdown","1e486e85":"markdown","60734967":"markdown","d076311f":"markdown","a9e4071f":"markdown","7a584b73":"markdown","6bbea752":"markdown"},"source":{"3b930eba":"import numpy as np\nimport pandas as pd\nfrom sklearn import model_selection, preprocessing, metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.width', 1000) \n\npd.set_option('display.max_rows', 200) \n\npd.set_option('display.max_columns', 200) \n\ndf_train =  pd.read_csv('..\/input\/train.csv')\n\ndf_test = pd.read_csv('..\/input\/test.csv')\n","de3c222d":"df_train.info()","6b477a3e":"df_train['Id'].nunique()","b3c7d80c":"df_train['groupId'].nunique()","8e8427f6":"df_train['matchId'].nunique()","3ac5cbcc":"#================== EDA =======================================================\n\n# ---------- single distributions ---------\n\nplt.hist(df_train['winPlacePerc'])\nplt.xlabel(\"winPlacePerc\") \nplt.ylabel(\"count\") \nplt.title('Distribution of winPlacePerc')","e0f29b3b":"plt.figure(figsize=[10,6])\ndf_train['assists'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of assists\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['assists'].value_counts())","fa8bbf2a":"plt.figure(figsize=[10,6])\ndf_train['boosts'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of boosts\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['boosts'].value_counts())","96f99912":"plt.figure(figsize=[10,6])\n(df_train.loc[df_train['damageDealt']>500, 'damageDealt'].astype(float)).value_counts().plot(kind='bar')\nplt.title(\"Distribution of damageDealt\") \nplt.ylabel(\"count\") \nplt.show()\n","be4b6055":"plt.figure(figsize=[10,6])\ndf_train['DBNOs'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of DBNOs\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['DBNOs'].value_counts())","ae5108ca":"plt.figure(figsize=[10,6])\ndf_train['headshotKills'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of headshotKills\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['headshotKills'].value_counts())","1fdd50fb":"plt.figure(figsize=[10,6])\ndf_train['heals'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of heals\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['heals'].value_counts())","386e6107":"plt.figure(figsize=[18,4])\ndf_train['killPlace'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of killPlace\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['killPlace'].value_counts())","42bbc92f":"df_train['matchId'].nunique()","23231687":"plt.figure(figsize=[18,4])\ndf_train['kills'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of kills\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['kills'].value_counts())\n","630ec3e8":"plt.figure(figsize=[18,4])\ndf_train['killStreaks'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of killStreaks\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['killStreaks'].value_counts())","dbfe4a4e":"plt.figure(figsize=[18,4])\ndf_train['maxPlace'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of maxPlace\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['maxPlace'].value_counts())","01443e9a":"plt.figure(figsize=[18,4])\ndf_train['numGroups'].value_counts().plot(kind='bar')\nplt.title(\"Distribution of numGroups\") \nplt.ylabel(\"count\") \nplt.show()\nprint(df_train['numGroups'].value_counts())","118e8a78":"print(df_train['revives'].value_counts())","8d54a5af":"plt.figure(figsize=[10,6])\n(df_train.loc[df_train['longestKill']>0, 'longestKill'].astype(float)).value_counts().plot(kind='bar')\nplt.title(\"Distribution of longestKill\") \nplt.ylabel(\"count\") \nplt.show()","3e7ad074":"print(df_train['teamKills'].value_counts())\n# teamKills\n# is\n# not \n# a \n# valuable\n# variable","3bbd8479":"print(df_train['vehicleDestroys'].value_counts())","e200420f":"print(df_train['weaponsAcquired'].value_counts())","a6596469":"# ---------------- correlation --------------\n\n# variable correlation \ncorrelation = df_train.corr()\ncorrelation = correlation['winPlacePerc'].sort_values(ascending=False)\nprint(correlation.head(20))","bba885e6":"sns.heatmap(df_train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) \nfig=plt.gcf()\nfig.set_size_inches(20,16)\nplt.show()","ab328aa7":"train_ = df_train\n\ndef show_count_sum(df, col,n=10):\n    return df.groupby(col).agg({'winPlacePerc': ['count', 'mean']}).sort_values(('winPlacePerc', 'count'), ascending=False).head(n)","8f540e2a":"show_count_sum(train_, 'assists')","d3b822c0":"show_count_sum(train_, 'boosts')","2f69b785":"show_count_sum(train_, 'DBNOs')","a5c0cb13":"show_count_sum(train_, 'headshotKills')","ff0693e5":"show_count_sum(train_, 'heals')","205216a6":"show_count_sum(train_, 'killPlace')","b60e0e88":"show_count_sum(train_, 'killPoints')","a150901d":"show_count_sum(train_, 'kills')","2a558d99":"show_count_sum(train_, 'killStreaks')","b66485cc":"show_count_sum(train_, 'maxPlace')","0b02a7d2":"show_count_sum(train_, 'numGroups')","2446f846":"show_count_sum(train_, 'revives')","f1fb733c":"show_count_sum(train_, 'vehicleDestroys')","1ee949bb":"show_count_sum(train_, 'weaponsAcquired')","56f1a423":"show_count_sum(train_, 'winPoints')","4544216f":"data = pd.concat([train_['damageDealt'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='damageDealt', y='winPlacePerc')","f26a3c93":"data = pd.concat([train_['killPoints'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='killPoints', y='winPlacePerc')\n","b39590e4":"data = pd.concat([train_['longestKill'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='longestKill', y='winPlacePerc')\n","c697c339":"data = pd.concat([train_['rideDistance'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='rideDistance', y='winPlacePerc')","5e546f44":"data = pd.concat([train_['walkDistance'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='walkDistance', y='winPlacePerc')","d85dcaa0":"data = pd.concat([train_['winPoints'], train_['winPlacePerc']], axis=1)\ndata.plot.scatter(x='winPoints', y='winPlacePerc')","f6461cf9":"#====================== Predicting ============================================\n\nY = (df_train['winPlacePerc'].astype(float)).values\n\nsum_id = df_test[\"Id\"].values\n\ndf_train = df_train.drop(['Id','groupId','matchId','winPlacePerc'], axis = 1)\n                          \ndf_test= df_test.drop(['Id','groupId','matchId'], axis = 1)","51faeb77":"'''\nlgb_pred[lgb_pred > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = lgb_pred\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"LGB.csv\", index=False)\n'''","61293116":"#=========================== lgb =================================== \n\nimport lightgbm as lgb\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n\nmodel_lgb.fit(df_train, Y)\nlgb_pred = model_lgb.predict(df_test)\n\nlgb_pred[lgb_pred > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = lgb_pred\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"LGB.csv\", index=False)","d2c511e2":"#=========================== xgboost ===================================\n\n#----------------- 1 ------------------ \n\nimport xgboost as xgb \n\ndtrain = xgb.DMatrix(df_train, label=Y)\ndtest = xgb.DMatrix(df_test)\n\nparams = {'max_depth':7,\n          'eta':1,\n          'silent':1,\n          'objective':'reg:linear',\n          'eval_metric':'rmse',\n          'learning_rate':0.05\n         }\nnum_rounds = 50\n\nxb = xgb.train(params, dtrain, num_rounds)\n\ny_pred_xgb = xb.predict(dtest)\n\ny_pred_xgb[y_pred_xgb > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = y_pred_xgb\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"XGB1.csv\", index=False)","3ebb48ce":"#----------------- 2 ------------------ Score: \n\nimport xgboost as xgb\n\ndtrain = xgb.DMatrix(df_train, label = Y)\ndtest = xgb.DMatrix(df_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)\n\nmodel_xgb = xgb.XGBRegressor(n_estimators=360, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\nmodel_xgb.fit(df_train, Y)\n\nxgb_preds = model_xgb.predict(df_test)\n\nxgb_preds[xgb_preds > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = xgb_preds\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"XGB2.csv\", index=False)","7403e962":"sub = xgb_preds * 0.1 + y_pred_xgb * 0.65 + lgb_pred * 0.25 # Score:\n\nsub[sub > 1] = 1\n    \ntest  = pd.read_csv('..\/input\/test.csv')\ntest['winPlacePercPred'] = sub\naux = test.groupby(['matchId','groupId'])['winPlacePercPred'].agg('mean').groupby('matchId').rank(pct=True).reset_index()\naux.columns = ['matchId','groupId','winPlacePerc']\ntest = test.merge(aux, how='left', on=['matchId','groupId'])\n    \nsubm = test[['Id','winPlacePerc']]\n    \nsubm.to_csv(\"Stacked_1.csv\", index=False)","59e541f8":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nLR = LinearRegression()\n\nLR.fit(df_train, Y)\nX_train, X_val, y_train,y_val = train_test_split(df_train,Y,test_size=0.3, random_state=42) \n\nprint('Accuracy on training\uff1a\\n',LR.score(X_train, y_train)) \nprint('Accuracy on validation\uff1a\\n',LR.score(X_val, y_val))\nprint('LinearRegression Accuracy\uff1a\\n',LR.score(df_train, Y))\n\npred = LR.predict(df_test)\n  \npred = pd.DataFrame({'Id':sum_id, 'winPlacePerc':pred}) \n\npred.to_csv('pred_Linear.csv',index=None) ","e00633d1":"PS:heals means **'number of healing teammates'**.We may  naively refer that the more you heal your teammate,the more likely you are going to get a higher rank.\n![](https:\/\/media0dk-a.akamaihd.net\/80\/59\/2df2682d732d90d2ec1231282817cf45.jpg)","1ab20ce8":"**winPlacePerc** is the target we are going to predict on testing set.\n\n![](https:\/\/i.ytimg.com\/vi\/EY_9IVJE8MU\/maxresdefault.jpg)Its distribution on training set is not kind of a 'normal distribution'  but the opposite -- values close to 0 and 1 are apparently more than the middle values.\n","6cfe374a":"### Check the trainning set","1dd28e31":"**Reference:** This code below is by Joao in https:\/\/www.kaggle.com\/joaopmpeinado\/winner-winner-chicken-dinner\n\nThe main reason is players are rank as a group together in one match,so we have to consider this.","dcebb7b4":"Here we choose those whose damageDealt is more than 500 to show.\nWe can see above the counts of higher damageDealt smoothly decrease.","fef0a9d5":"## Lib and Load data","be0c1da1":"#  BUPG EDA & Baseline Model","1e990ed2":"## LGB","54751f4e":"## Linear Regression","152742bb":"## Explore distribution of single variable","43483d03":"### This is a comprehensive kernel including exploratory data analysis and prediction using LGB\/XGB and LR\n#### Here is the EDA part.","e8995572":" PS: DBNO means** 'down but not out'** in BUPG, it's known in experienced BUPG players that many times you may not be able to kill a encounterd enemy but only beat down them,they can still be saved by their teammates.\n \n![](http:\/\/gameplay.tips\/uploads\/posts\/2017-09\/1505063822_8.jpg) ","831a7dac":"## Model Stacking","befc8b0a":"There are 4357336 players participated,they comprised 1888732 groups,and played 47734 matches.\nThese numbers are consistent with our commensense of BUPG -- a group consists of 3 or 4 player,about 100 players can play in a single match.\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTzlJgrVHqRHJKeZukHtyx6h9-uQbZ7ZcGerKFnknk6KcmaMTbCSQ)","7a052c51":"## Data Preparation","1e0943b9":"## Thanks if you read all the way through. \n## If you think this kernel is helpful,please vote it,appreciated.\n\n\n# PS: Good Luck and have a Dinner!\n![](https:\/\/www.hindustantimes.com\/rf\/image_size_960x540\/HT\/p2\/2018\/06\/30\/Pictures\/_802421c8-7c33-11e8-8d5f-3f0c905295d2.jpg)\n\n","4774490c":"## See the variables' correlation with target","1e486e85":"![](https:\/\/cnet3.cbsistatic.com\/img\/eByo0DXxBrKt_cftmlqVzapL6qA=\/970x0\/2017\/12\/16\/765799c3-237e-4c8a-8d7e-3a5a14dedc0a\/pubg.jpg)","60734967":"### See the non-sparse variables in format way","d076311f":"I reaffirm the numbers of matches above to show that the most of killPlace is equal to the number of matches.\nAnd the value of killPlace distribute platly from 1 to 95 and slowly decrease when to 100,which indicates killPlace is the place of gameboard in one match which vary from 1 to 100.\nThe decrease of 90-100 is caused by the players in one match is not always 100, 90s is enough to begin a game.","a9e4071f":"# Predicting","7a584b73":"## XGB","6bbea752":"### See the sparse variables in plot-scatter way"}}