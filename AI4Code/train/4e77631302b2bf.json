{"cell_type":{"667424f5":"code","522a0c75":"code","6d894b16":"code","809733b8":"code","06f5deac":"code","6e414179":"code","ececb202":"code","feb57da6":"code","46d196c4":"code","0769ae20":"code","2b197ba8":"code","c2c2481c":"code","704f15f3":"code","1178d1d8":"code","5740e9eb":"code","c7b7c5dc":"code","5610ff02":"code","d26b1aff":"code","be0df014":"code","a022a333":"code","4300a916":"code","a826d0b8":"code","39061ab1":"code","8a3e0f08":"code","dc1ee0c8":"code","9ae8ca37":"code","1a6acb86":"code","3e5d0327":"code","3f4545e6":"code","6a7d56e6":"code","08fea4de":"code","59584c4c":"code","6b7d3fd9":"code","f35abb09":"code","90f7fdb1":"code","5bb313a5":"code","1d883ab5":"code","f63aff2d":"code","c4460c2e":"code","ce7c3a84":"code","f7d95448":"code","deb7cd75":"code","6ad2dbc4":"code","c5d31ef3":"code","ef260215":"code","fc6c9965":"code","01d77e58":"code","788d3e30":"code","b6aff466":"code","cd91f604":"code","519c31d6":"code","f42bf68b":"code","9eb373cb":"code","f7a1af8b":"code","2c2b62ad":"code","3e8965f9":"markdown","df5112c4":"markdown","d442676f":"markdown","14f28eee":"markdown","acdf9a50":"markdown","3eb05db6":"markdown","7761ae59":"markdown","65f43b31":"markdown","08d8a4ee":"markdown","77d77bd5":"markdown","b24038d6":"markdown","d3e8acb5":"markdown","67299b2c":"markdown","a38e795d":"markdown","b516f2d4":"markdown"},"source":{"667424f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\n#%matplotlib inline\nimport seaborn as sns\nfrom datetime import datetime\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport folium\nimport json","522a0c75":"df_cases = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases.csv\")\ndf_cases_country = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_cases_state = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_state.csv\")\ndf_cases_time = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\", parse_dates = ['Last_Update','Report_Date_String'])","6d894b16":"print (df_cases.shape)\nprint ('Last Update: ' + str(df_cases.Last_Update.max()))\ndf_cases.head(1)","809733b8":"print (df_cases_country.shape)\nprint ('Last Update: ' + str(df_cases_country.Last_Update.max()))\ndf_cases_country.head(1)","06f5deac":"print (df_cases_state.shape)\ndf_cases_state.head(1)","6e414179":"print (df_cases_time.shape)\ndf_cases_time.head(1)","ececb202":"df_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates = ['ObservationDate','Last Update'])\nprint (df_data.shape)\nprint ('Last update: ' + str(df_data.ObservationDate.max()))\ndf_data.head(2)","feb57da6":"# Clean data\ndf_data = df_data.drop(['SNo', 'Last Update'], axis=1)\ndf_data = df_data.rename(columns={\n    'ObservationDate': 'Date', \n    'Country\/Region': 'Country_Region', \n    'Province\/State': 'Province_State'\n})\ndf_data.head(2)","46d196c4":"# Sort data\ndf_data = df_data.sort_values(['Date','Country_Region','Province_State'])\n# Get first reported case date\ndf_data['first_date'] = df_data.groupby('Country_Region')['Date'].transform('min')\n# Get days since first reported case date\ndf_data['days'] = (df_data['Date'] - df_data['first_date']).dt.days\nprint(df_data.shape)\ndf_data.head(2)","0769ae20":"data_path = \"\/kaggle\/input\/covid19-in-usa\/\"\ndf_us_test = pd.read_csv(data_path + \"us_covid19_daily.csv\")\ndf_us_states_test = pd.read_csv(data_path + \"us_states_covid19_daily.csv\")\ndf_us_test[\"date\"] = pd.to_datetime(df_us_test[\"date\"], format=\"%Y%m%d\")\ndf_us_states_test = df_us_states_test.reindex(index=df_us_states_test.index[::-1])\ndf_us_states_test[\"date\"] = pd.to_datetime(df_us_states_test[\"date\"], format=\"%Y%m%d\").dt.date.astype(str)\n\nprint (df_us_states_test.shape)\n#df_us_states_test.query('state == \"NY\"').sort_values('date', ascending=False).head()\n#print (df_us_states_test.columns)\ndf_us_states_test.groupby('state').max().fillna(0).sort_values('positive', ascending=False).head().style\\\n.background_gradient(cmap='Reds',subset=[\"positive\"])\\\n.background_gradient(cmap='Blues',subset=[\"negative\"])\\\n.background_gradient(cmap='Purples',subset=[\"pending\"])\\\n.background_gradient(cmap='OrRd',subset=[\"hospitalizedCurrently\"])\\\n.background_gradient(cmap='OrRd',subset=[\"hospitalizedCumulative\"])\\","2b197ba8":"df_us_county_covid = pd.read_csv('\/kaggle\/input\/covid19-us-county-jhu-data-demographics\/' + \"covid_us_county.csv\")\ndf_us_county = pd.read_csv('\/kaggle\/input\/covid19-us-county-jhu-data-demographics\/' + \"us_county.csv\")","c2c2481c":"df_us_county.sort_values('population', ascending=False).head()","704f15f3":"df_us_county_covid.sort_values('cases', ascending=False).head(2)","1178d1d8":"df_us_county_covid = df_us_county_covid.merge(\\\n                        df_us_county[['fips', 'population', 'male', 'female', 'female_percentage', 'median_age']],\\\n                                              on = ['fips'], how = \"left\"\\\n                    )\ndf_us_county_covid.sort_values('cases', ascending=False).head(2)","5740e9eb":"df_us_county_covid_latest = df_us_county_covid.sort_values(by = ['county', 'state', 'date'], ascending = [True, True, False])\ndf_us_county_covid_latest = df_us_county_covid_latest.drop_duplicates(subset = ['county', 'state'], keep = \"first\")\ndf_us_county_covid_latest.head(2)","c7b7c5dc":"df_us_state_covid = df_us_county_covid_latest.groupby(['state', 'date'], as_index=False)['cases', 'deaths', 'population'].sum()\ndf_us_state_covid['population'] = df_us_state_covid['population'].astype(int)\ndf_us_state_covid = df_us_state_covid.rename(columns={\"state\": \"Province_State\", \"population\": \"Population\"})\ndf_us_state_covid.sort_values('cases', ascending=False).head().style.hide_index()","5610ff02":"# remove states with missing population\ndf_us_county_covid_latest = df_us_county_covid_latest[(df_us_county_covid_latest['population'] != 0)]\n# population\/cases\/deaths in million\ndf_us_county_covid_latest['population (million)'] = round((df_us_county_covid_latest['population']\/1000000), 2)\ndf_us_county_covid_latest['cases per million'] = round((df_us_county_covid_latest['cases']\/df_us_county_covid_latest['population (million)']), 2)\ndf_us_county_covid_latest['deaths per million'] = round((df_us_county_covid_latest['deaths']\/df_us_county_covid_latest['population (million)']), 2)\n#df_us_county_covid_latest.fillna(0, inplace=True)\ndf_us_county_covid_latest.head(2)","d26b1aff":"def get_total_cases(df_cases):\n    total_confirmed = np.sum(df_cases['Confirmed'])\n    total_deaths = np.sum(df_cases['Deaths'])\n    total_recovered = np.sum(df_cases['Recovered'])\n    total_active = np.sum(df_cases['Active'])\n    total_mortality_rate = np.round((np.sum(df_cases['Deaths']) \/ np.sum(df_cases['Confirmed']) * 100), 2)\n    total_recover_rate = np.round((np.sum(df_cases['Recovered']) \/ np.sum(df_cases['Confirmed']) * 100), 2)\n\n    data = {\n        'Confirmed': [total_confirmed],\n        'Deaths': [total_deaths],\n        'Recovered': [total_recovered],\n        'Active': [total_active],\n        'Mortality Rate %': [total_mortality_rate],\n        'Recover Rate %': [total_recover_rate]\n    }\n    df_total = pd.DataFrame(data)\n    return df_total","be0df014":"# colormaps: https:\/\/matplotlib.org\/3.1.0\/tutorials\/colors\/colormaps.html\ndf_total = get_total_cases(df_cases_country).style.hide_index().background_gradient(cmap='Wistia', axis=1)\ndf_total","a022a333":"# colormaps: https:\/\/matplotlib.org\/3.1.0\/tutorials\/colors\/colormaps.html\ndf_total = get_total_cases(df_cases_country[df_cases_country.Country_Region == 'US']) \\\n            .style.hide_index().background_gradient(cmap='Wistia', axis=1)\ndf_total","4300a916":"# US state code to name mapping\n# https:\/\/www.kaggle.com\/sudalairajkumar\/covid-19-analysis-of-usa\nstate_map_dict = {\n 'AL': 'Alabama',\n 'AK': 'Alaska',\n 'AS': 'American Samoa',\n 'AZ': 'Arizona',\n 'AR': 'Arkansas',\n 'CA': 'California',\n 'CO': 'Colorado',\n 'CT': 'Connecticut',\n 'DE': 'Delaware',\n 'DC': 'District of Columbia',\n 'D.C.': 'District of Columbia',\n 'FM': 'Federated States of Micronesia',\n 'FL': 'Florida',\n 'GA': 'Georgia',\n 'GU': 'Guam',\n 'HI': 'Hawaii',\n 'ID': 'Idaho',\n 'IL': 'Illinois',\n 'IN': 'Indiana',\n 'IA': 'Iowa',\n 'KS': 'Kansas',\n 'KY': 'Kentucky',\n 'LA': 'Louisiana',\n 'ME': 'Maine',\n 'MH': 'Marshall Islands',\n 'MD': 'Maryland',\n 'MA': 'Massachusetts',\n 'MI': 'Michigan',\n 'MN': 'Minnesota',\n 'MS': 'Mississippi',\n 'MO': 'Missouri',\n 'MT': 'Montana',\n 'NE': 'Nebraska',\n 'NV': 'Nevada',\n 'NH': 'New Hampshire',\n 'NJ': 'New Jersey',\n 'NM': 'New Mexico',\n 'NY': 'New York',\n 'NC': 'North Carolina',\n 'ND': 'North Dakota',\n 'MP': 'Northern Mariana Islands',\n 'OH': 'Ohio',\n 'OK': 'Oklahoma',\n 'OR': 'Oregon',\n 'PW': 'Palau',\n 'PA': 'Pennsylvania',\n 'PR': 'Puerto Rico',\n 'RI': 'Rhode Island',\n 'SC': 'South Carolina',\n 'SD': 'South Dakota',\n 'TN': 'Tennessee',\n 'TX': 'Texas',\n 'UT': 'Utah',\n 'VT': 'Vermont',\n 'VI': 'Virgin Islands',\n 'VA': 'Virginia',\n 'WA': 'Washington',\n 'WV': 'West Virginia',\n 'WI': 'Wisconsin',\n 'WY': 'Wyoming'\n}\n\nstate_code_dict = {v:k for k, v in state_map_dict.items()}\nstate_code_dict[\"Chicago\"] = 'Illinois'\n\ndef correct_state_names(x):\n    try:\n        return state_map_dict[x.split(\",\")[-1].strip()]\n    except:\n        return x.strip()\n    \ndef get_state_codes(x):\n    try:\n        return state_code_dict[x]\n    except:\n        return \"Others\"\n    \ndef get_state_name(x):\n    try:\n        for name, code in state_code_dict.items():\n            if code == x:\n                return name\n        return 'Others'\n    except:\n        return \"Others\"","a826d0b8":"df_data_us = df_data[df_data['Country_Region'] == 'US'].copy()\ndf_data_us[\"Province_State\"] = df_data_us[\"Province_State\"].apply(correct_state_names)\ndf_data_us[\"State_Code\"] = df_data_us[\"Province_State\"].apply(lambda x: get_state_codes(x))","39061ab1":"df_data_us.groupby('Province_State').max().sort_values('Confirmed', ascending=False).head()","8a3e0f08":"df_us_states = df_cases_state[df_cases_state['Country_Region'] == 'US'].copy()\ndf_us_states[\"State_Code\"] = df_us_states[\"Province_State\"].apply(lambda x: get_state_codes(x))\ndf_us_states = df_us_states.merge(df_us_state_covid[['Province_State', 'Population']], on = ['Province_State'], how = \"left\")\n# population\/cases\/deaths in million\ndf_us_states['Population (million)'] = round((df_us_states['Population']\/1000000), 2)\ndf_us_states['Cases per million'] = round((df_us_states['Confirmed']\/df_us_states['Population (million)']), 2)\ndf_us_states['Deaths per million'] = round((df_us_states['Deaths']\/df_us_states['Population (million)']), 2)\ndf_us_states = df_us_states.replace([np.inf, -np.inf, np.nan], 0)\n#df_us_states","dc1ee0c8":"df_us_states = df_cases_state[df_cases_state['Country_Region'] == 'US'].copy()\ndf_us_states[\"State_Code\"] = df_us_states[\"Province_State\"].apply(lambda x: get_state_codes(x))\ndf_us_states['Recovery_Rate'] = df_cases_state['Recovered'] \/ df_cases_state['Confirmed'] * 100\n\n# merge US state population data\ndf_us_states = df_us_states.merge(df_us_state_covid[['Province_State', 'Population']], on = ['Province_State'], how = \"left\")\n# population\/cases\/deaths in million\ndf_us_states['Population (million)'] = round((df_us_states['Population']\/1000000), 2)\ndf_us_states['Cases per million'] = round((df_us_states['Confirmed']\/df_us_states['Population (million)']), 2)\ndf_us_states['Deaths per million'] = round((df_us_states['Deaths']\/df_us_states['Population (million)']), 2)\ndf_us_states = df_us_states.replace([np.inf, -np.inf, np.nan], 0)\n\ndf_us_states = df_us_states[[\n                    'Province_State', 'Confirmed', 'Deaths', 'Recovered', 'Active', \\\n                    'Mortality_Rate', 'Recovery_Rate', 'Incident_Rate', \\\n                    'People_Tested', 'People_Hospitalized',  \\\n                    'Testing_Rate', 'Hospitalization_Rate',\\\n                    'Population (million)', 'Cases per million', 'Deaths per million',\\\n                    'Population', 'State_Code'\n                ]]\n\n# replace nan values with zero\ndf_us_states.fillna(0, inplace=True)\n\n# replace underscore with space in columns name\n#df_us_states.rename(columns=lambda x: x.replace('_', ' '), inplace=True)\n#df_us_states.columns\n\ndf_us_states.sort_values('Confirmed', ascending=False)\\\n.rename(columns=lambda x: x.replace('_', ' '))\\\n.style.hide_index()\\\n.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n.background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n.background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n.background_gradient(cmap='Purples',subset=[\"Active\"])\\\n.background_gradient(cmap='GnBu',subset=[\"Incident Rate\"])\\\n.background_gradient(cmap='OrRd',subset=[\"Mortality Rate\"])\\\n.background_gradient(cmap='PuBu',subset=[\"Recovery Rate\"])\\\n.background_gradient(cmap='Greens',subset=[\"People Tested\"])\\\n.background_gradient(cmap='OrRd',subset=[\"People Hospitalized\"])\\\n.background_gradient(cmap='Greens',subset=[\"Testing Rate\"])\\\n.background_gradient(cmap='OrRd',subset=[\"Hospitalization Rate\"])\\\n.background_gradient(cmap='Purples',subset=[\"Population (million)\"])\\\n.background_gradient(cmap='Blues',subset=[\"Cases per million\"])\\\n.background_gradient(cmap='Reds',subset=[\"Deaths per million\"])\\","9ae8ca37":"df_us_county_covid_latest[['county', 'state', 'state_code', 'cases', 'deaths',\\\n                           'population (million)', 'median_age', 'cases per million', 'deaths per million']]\\\n.sort_values('cases', ascending=False)\\\n.head(50)\\\n.rename(columns=lambda x: x.replace('_', ' '))\\\n.style.hide_index()\\\n.background_gradient(cmap='Blues',subset=[\"cases\"])\\\n.background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n.background_gradient(cmap='Greens',subset=[\"population (million)\"])\\\n.background_gradient(cmap='Purples',subset=[\"median age\"])\\\n.background_gradient(cmap='Blues',subset=[\"cases per million\"])\\\n.background_gradient(cmap='Reds',subset=[\"deaths per million\"])\\","1a6acb86":"fig = go.Figure(data=[\n    go.Pie(labels=df_us_states['Province_State'], \n           values=df_us_states['Confirmed'], \n           hole=.35,\n           textinfo='label+percent'\n          )\n])\n\nfig.update_layout(\n    title_text=\"US Confirmed Cases by States\",\n    # Add annotations in the center of the donut pies.\n    annotations=[\n        dict(text='Confirmed<br>Cases', showarrow=False),\n    ]\n)\nfig.update_traces(textposition='inside')\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","3e5d0327":"fig = go.Figure(data=[\n    go.Pie(labels=df_us_states['Province_State'], \n           values=df_us_states['Deaths'], \n           hole=.35,\n           textinfo='label+percent'\n          )\n])\n\nfig.update_layout(\n    title_text=\"US Deaths Cases by States\",\n    # Add annotations in the center of the donut pies.\n    annotations=[\n        dict(text='Deaths<br>Cases', showarrow=False),\n    ]\n)\nfig.update_traces(textposition='inside')\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","3f4545e6":"fig = go.Figure(data=[\n    go.Pie(labels=df_us_states['Province_State'], \n           values=df_us_states['People_Tested'], \n           hole=.35,\n           textinfo='label+percent'\n          )\n])\n\nfig.update_layout(\n    title_text=\"US Tests Percentage by States\",\n    # Add annotations in the center of the donut pies.\n    annotations=[\n        dict(text='People<br>Tested', showarrow=False),\n    ]\n)\nfig.update_traces(textposition='inside')\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","6a7d56e6":"df_confirmed_top = df_us_states.sort_values('Confirmed', ascending=False).head(10)\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Confirmed'],\n           text=df_confirmed_top['Confirmed'], texttemplate='%{text:.2s}', textposition='outside'),\n    go.Bar(name='Deaths', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Deaths'],\n           text=df_confirmed_top['Deaths'], texttemplate='%{text:.2s}', textposition='outside'),\n    go.Bar(name='Recovered', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Recovered'],\n           text=df_confirmed_top['Recovered'], texttemplate='%{text:.2s}', textposition='outside'),\n    #go.Bar(name='People Tested', x=df_confirmed_top['Province_State'], y=df_confirmed_top['People_Tested'],\n    #       text=df_confirmed_top['People_Tested'], texttemplate='%{text:.2s}', textposition='outside'),\n])\n# Change the bar mode\nfig.update_layout(\n    title_text=\"Top 10 US States with Confirmed Cases\",\n    barmode='group', \n    #legend_orientation=\"h\",\n    yaxis_type='log',\n    yaxis_title='Cases Count in Log Scale'\n)\nfig.update_layout(legend_orientation=\"h\", legend=dict(x=0, y=1.1))\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","08fea4de":"#df_confirmed_top = df_us_states.sort_values('Cases per million', ascending=False).head(10)\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Confirmed'],\n           text=df_confirmed_top['Confirmed'], texttemplate='%{text:.2s}', textposition='outside', marker_color='indianred'),\n    go.Bar(name='Confirmed per million', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Cases per million'],\n           text=df_confirmed_top['Cases per million'], texttemplate='%{text:.2s}', textposition='outside', marker_color='lightsalmon'),\n    go.Bar(name='Deaths per million', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Deaths per million'],\n           text=df_confirmed_top['Deaths per million'], texttemplate='%{text:.2s}', textposition='outside', marker_color='crimson'),\n])\n# Change the bar mode\nfig.update_layout(\n    title_text=\"Top 10 US States with Confirmed Cases\",\n    barmode='group', \n    #legend_orientation=\"h\",\n    yaxis_type='log',\n    yaxis_title='Cases Count in Log Scale'\n)\nfig.update_layout(legend_orientation=\"h\", legend=dict(x=0, y=1.1))\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","59584c4c":"df_confirmed_top = df_us_states.sort_values('Cases per million', ascending=False).head(10)\nfig = go.Figure(data=[\n    go.Bar(name='Population', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Population'],\n           text=df_confirmed_top['Population'], texttemplate='%{text:.2s}', textposition='outside'),\n    go.Bar(name='Confirmed per million', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Cases per million'],\n           text=df_confirmed_top['Cases per million'], texttemplate='%{text:.2s}', textposition='outside', marker_color='lightsalmon'),\n    go.Bar(name='Deaths per million', x=df_confirmed_top['Province_State'], y=df_confirmed_top['Deaths per million'],\n           text=df_confirmed_top['Deaths per million'], texttemplate='%{text:.2s}', textposition='outside', marker_color='crimson'),\n])\n# Change the bar mode\nfig.update_layout(\n    title_text=\"Top 10 US States with highest Cases per million population\",\n    barmode='group',\n    yaxis_type='log',\n    yaxis_title='Cases Count in Log Scale'\n)\nfig.update_layout(legend_orientation=\"h\", legend=dict(x=0, y=1.1))\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","6b7d3fd9":"df_us_states_test.columns","f35abb09":"#df_us_states_test.\ndf_us_states_test[\"state_name\"] = df_us_states_test[\"state\"].apply(lambda x: get_state_name(x))\ndf_us_states_test.head(2)","90f7fdb1":"df_t = df_us_states_test.groupby('date').sum().reset_index()\ndf_t.head(2)","5bb313a5":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['positive'], \n                         mode='lines', name='Confirmed'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['death'], \n                         mode='lines', name='Deaths'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['recovered'], \n                         mode='lines', name='Recovered'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['hospitalized'], \n                         mode='lines', name='Hospitalized'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['total'], \n                         mode='lines', name='Total Tested'))\n\nfig.update_layout(\n        xaxis_title=\"\",\n        yaxis_title=\"Cases Count in Log Scale\",\n        title = 'Time Series - Confirmed, Deaths & Recovered Cases in USA',\n        yaxis_type='log'\n    )\nfig.update_layout(\n    legend=dict(\n        x=0,\n        y=1,\n        traceorder=\"normal\",\n        #bgcolor=\"LightSteelBlue\",\n        bordercolor=\"silver\",\n        borderwidth=1\n    )\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","1d883ab5":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['positiveIncrease'], \n                         mode='lines', name='Confirmed'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['deathIncrease'], \n                         mode='lines', name='Deaths'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['hospitalizedIncrease'], \n                         mode='lines', name='Hospitalized'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['totalTestResultsIncrease'], \n                         mode='lines', name='Total Tests'))\nfig.update_layout(\n        xaxis_title=\"\",\n        yaxis_title=\"Cases Count in Log Scale\",\n        title = 'Time Series - Confirmed, Deaths & Recovered Cases [Daily Increase] in USA',\n        yaxis_type='log'\n    )\n\nfig.update_layout(\n    legend=dict(\n        x=0,\n        y=1,\n        traceorder=\"normal\",\n        #bgcolor=\"LightSteelBlue\",\n        bordercolor=\"silver\",\n        borderwidth=1\n    )\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","f63aff2d":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['recovered']\/df_t['positive']*100, \n                         mode='lines', name='Recovery Rate'))\nfig.add_trace(go.Scatter(x=df_t['date'], y=df_t['death']\/df_t['positive']*100, \n                         mode='lines', name='Death Rate'))\n\nfig.update_layout(\n        xaxis_title=\"\",\n        yaxis_title=\"Recovery\/Death Rate Percentage (%)\",\n        title = 'Time Series - Recovery and Death Rate in USA',\n        yaxis_type='log'\n    )\n\nfig.update_layout(\n    legend=dict(\n        x=0,\n        y=1,\n        traceorder=\"normal\",\n        #font=dict(\n        #    family=\"sans-serif\",\n        #    size=12,\n        #    color=\"black\"\n        #),\n        #bgcolor=\"LightSteelBlue\",\n        bordercolor=\"silver\",\n        borderwidth=1\n    )\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","c4460c2e":"df_t = df_us_states_test.groupby(['state_name', 'date']).sum().reset_index()\n\ntop_count = 10\ntop_confirmed = df_us_states.sort_values('Confirmed', ascending=False).head(top_count)['Province_State'].to_list()\ntop_deaths = df_us_states.sort_values('Deaths', ascending=False).head(top_count)['Province_State'].to_list()\ntop_recovered = df_us_states.sort_values('Recovered', ascending=False).head(top_count)['Province_State'].to_list()\n#print (top_confirmed)\n#print (top_deaths)\n#print (top_recovered)\n\ndf_top_confirmed = df_t[df_t.state_name.isin(top_confirmed)]\ndf_top_deaths = df_t[df_t.state_name.isin(top_deaths)]\ndf_top_recovered = df_t[df_t.state_name.isin(top_recovered)]\n\ndef get_top(state_list):    \n    df_top = df_t[df_t['state_name'].isin(state_list)]\n    df_top = df_top.groupby(['state_name', 'date']).sum()\n    return df_top.reset_index()\n    '''df_top10 = pd.DataFrame()\n    for state, df_new in df_top.groupby(level=0):\n        # 1. The cases count is cummulative in the dataset.\n        #    Hence, we calculate the difference between current row and next row value\n        # 2. Some rows after diff() were showing negative values.\n        #    This is because in some cases, the next day entry had lesser value than current day entry.\n        #    Therefore, used abs() to make them positive.\n        #    Hoping that the dataset is corrected later on.\n        df_new = df_new.diff().fillna(df_new).abs()\n        df_top10 = df_top10.append(df_new, ignore_index=False)\n    return df_top10.reset_index()'''\n\n#df_top10_confirmed_daily = get_top10(top10_confirmed_country_list)\n#df_top10_deaths_daily = get_top10(top10_deaths_country_list)\n#df_top10_recovered_daily = get_top10(top10_recovered_country_list)\n#df_top10_confirmed_daily.head(2)\n\ndf_top_confirmed.head(2)","ce7c3a84":"fig = px.line(df_top_confirmed, x=\"date\", y=\"positive\", color=\"state_name\")\nfig.update_layout(\n    title='Time Series - Confirmed Cases: Top '+str(top_count)+' States',\n    xaxis_title='',\n    yaxis_title='Confirmed Cases in Log Scale',\n    yaxis_type='log'\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","f7d95448":"fig = px.line(df_top_confirmed, x=\"date\", y=\"positiveIncrease\", color=\"state_name\")\nfig.update_layout(\n    title='Time Series - Confirmed Cases [Daily Increase]: Top '+str(top_count)+' States',\n    xaxis_title='',\n    yaxis_title='Confirmed Cases in Log Scale',\n    yaxis_type='log'\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","deb7cd75":"fig = px.line(df_top_confirmed, x=\"date\", y=\"death\", color=\"state_name\")\nfig.update_layout(\n    title='Time Series - Death Cases: Top '+str(top_count)+' States',\n    xaxis_title='',\n    yaxis_title='Death Cases in Log Scale',\n    yaxis_type='log'\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","6ad2dbc4":"fig = px.line(df_top_confirmed, x=\"date\", y=\"total\", color=\"state_name\")\nfig.update_layout(\n    title='Time Series - People Tested: Top '+str(top_count)+' States',\n    xaxis_title='',\n    yaxis_title='Number of People Tested in Log Scale',\n    yaxis_type='log'\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","c5d31ef3":"fig = px.line(df_top_confirmed, x=\"date\", y=\"totalTestResultsIncrease\", color=\"state_name\")\nfig.update_layout(\n    title='Time Series - People Tested [Daily Increase]: Top '+str(top_count)+' States',\n    xaxis_title='',\n    yaxis_title='Number of People Tested in Log Scale',\n    yaxis_type='log'\n)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","ef260215":"# https:\/\/plotly.com\/python\/choropleth-maps\/\ndata = df_us_states.copy()\ndata['Confirmed_Log'] = np.log2(df_us_states['Confirmed']+1)\ndata['Mortality_Rate'] = np.round(data['Mortality_Rate'], 2)\nfig = px.choropleth(data, \n                    locations='State_Code',\n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    color='Confirmed', # a column in the dataset\n                    hover_name='Province_State', # column to add to hover information\n                    hover_data=['Confirmed', 'Deaths', 'Recovered', 'Mortality_Rate'],\n                    color_continuous_scale=px.colors.sequential.Sunsetdark)\nfig.update_layout(title_text=\"Heat Map - Confirmed Cases in US States\"),\nfig.update_coloraxes(colorbar_title=\"<b>Color<\/b><br>Confirmed Cases\")\n#fig.update(layout_coloraxis_showscale=False)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","fc6c9965":"# https:\/\/plotly.com\/python\/choropleth-maps\/\ndata = df_us_states.copy()\ndata['Cases_Log'] = np.log2(df_us_states['Cases per million']+1)\ndata['Mortality_Rate'] = np.round(data['Mortality_Rate'], 2)\nfig = px.choropleth(data, \n                    locations='State_Code',\n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    color='Cases per million', # a column in the dataset\n                    hover_name='Province_State', # column to add to hover information\n                    hover_data=['Confirmed', 'Deaths', 'Recovered', 'Mortality_Rate',\\\n                                'Population (million)', 'Cases per million', 'Deaths per million'],\n                    color_continuous_scale=px.colors.sequential.Sunsetdark,\n                   )\nfig.update_layout(title_text=\"Heat Map - Confirmed Cases (per million) in US States\"),\nfig.update_coloraxes(colorbar_title=\"<b>Color<\/b><br>Cases per million\")\n#fig.update(layout_coloraxis_showscale=False)\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.show()","01d77e58":"df_us_county_covid_latest.head(2)","788d3e30":"usa_counties_geo_json = '\/kaggle\/input\/country-state-geo-location\/us-counties.json'\nwith open(usa_counties_geo_json) as response:    \n    usa_counties_geo = json.load(response)\n\ndf_us_county_covid_latest['cases_log'] = np.log(df_us_county_covid_latest['cases']+1)\nfig = px.choropleth(df_us_county_covid_latest, \n                    geojson=usa_counties_geo, \n                    locations='fips', \n                    color='cases_log',\n                    color_continuous_scale=px.colors.sequential.Sunsetdark,\n                    #range_color=(0, 22),\n                    scope=\"usa\",\n                    hover_name='county', # column to add to hover information\n                    hover_data=['state', 'cases', 'deaths', 'population',\\\n                        'population (million)', 'cases per million', 'deaths per million'],\n                          )\nfig.update_layout(margin={\"r\":0,\"l\":0,\"b\":0})\nfig.update_layout(title_text=\"Heat Map - Confirmed Cases in US Counties\"),\nfig.update_coloraxes(colorbar_title=\"<b>Color<\/b><br>Cases<br>Log Scale\")\nfig.show()","b6aff466":"usa_geo_json = '\/kaggle\/input\/country-state-geo-location\/us-states.json'\nwith open(usa_geo_json) as f:\n  usa_geo = json.load(f)\n\ndata = df_us_states.copy()\nfor index, item in enumerate(usa_geo['features']):\n    row = data[data['State_Code'] == item['id']]\n    if row.empty: continue # skip for states that are not present in the cases dataset\n    usa_geo['features'][index]['properties']['Confirmed'] = str(row.iloc[0]['Confirmed'])\n    usa_geo['features'][index]['properties']['Deaths'] = str(row.iloc[0]['Deaths'])\n    usa_geo['features'][index]['properties']['Recovered'] = str(row.iloc[0]['Recovered'])\n    usa_geo['features'][index]['properties']['Mortality Rate'] = str(np.round(row.iloc[0]['Mortality_Rate'],2)) + '%'\n    usa_geo['features'][index]['properties']['Recovery Rate'] = str(np.round(row.iloc[0]['Recovered'] \/ row.iloc[0]['Confirmed'] * 100, 2)) + '%'\n\nprint (usa_geo['features'][0]['properties'])","cd91f604":"# logarithmic value is taken to avoid skewness\n# as NY cases count is very much higher than the rest of the states\ndata['Confirmed_Log'] = np.log(data['Confirmed']+1)\n\n# create a plain usa map\nusa_map = folium.Map(location=[37, -102], tiles=\"cartodbpositron\", zoom_start=4, max_zoom=6, min_zoom=3)\n\n# add tile layers to the map\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(usa_map)\n\nchoropleth = folium.Choropleth(\n    geo_data=usa_geo,\n    name='choropleth',\n    data=data,\n    columns=['State_Code', 'Confirmed_Log'],\n    key_on='feature.id',\n    fill_color='YlOrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    nan_fill_color='#fef0d9',\n    nan_fill_opacity=0.2,\n    legend_name='Confirmed Cases (Log Scale)',\n    highlight=True,\n    line_color='black'\n).add_to(usa_map)\n\nstyle_function = \"font-size: 15px; font-weight: bold\"\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(\n        fields=['name', 'Confirmed', 'Deaths', 'Recovered', 'Mortality Rate', 'Recovery Rate'],\n        aliases=['State','Confirmed', 'Deaths', 'Recovered', 'Mortality Rate', 'Recovery Rate'], \n        labels=True\n    )\n)\n\nfolium.LayerControl(collapsed=True).add_to(usa_map)\nusa_map","519c31d6":"df_us_county_covid_latest['fips_int'] = df_us_county_covid_latest['fips'].fillna(0)\ndf_us_county_covid_latest['fips_int'] = df_us_county_covid_latest['fips_int'].astype(int)\n#print (df_us_county_covid_latest['fips_int'].head())\n\nfor index, item in enumerate(usa_counties_geo['features']):\n    row = df_us_county_covid_latest[df_us_county_covid_latest['fips_int'] == int(item['id'])]\n    if row.empty: continue # skip for states that are not present in the cases dataset\n    usa_counties_geo['features'][index]['properties']['fips'] = str(row.iloc[0]['fips'])\n    usa_counties_geo['features'][index]['properties']['state'] = str(row.iloc[0]['state'])\n    usa_counties_geo['features'][index]['properties']['cases'] = str(row.iloc[0]['cases'])\n    usa_counties_geo['features'][index]['properties']['deaths'] = str(row.iloc[0]['deaths'])\n    usa_counties_geo['features'][index]['properties']['population'] = str(row.iloc[0]['population'])\n    usa_counties_geo['features'][index]['properties']['population (million)'] = str(row.iloc[0]['population (million)'])\n    usa_counties_geo['features'][index]['properties']['cases per million'] = str(row.iloc[0]['cases per million'])\n    usa_counties_geo['features'][index]['properties']['deaths per million'] = str(row.iloc[0]['deaths per million'])\n\nprint (usa_counties_geo['features'][0]['properties'])","f42bf68b":"# logarithmic value is taken to avoid skewness\n# as NY cases count is very much higher than the rest of the states\n#data['Confirmed_Log'] = np.log(data['Confirmed']+1)\n\n# create a plain usa map\nusa_map = folium.Map(location=[37, -102], tiles=\"cartodbpositron\", zoom_start=4, max_zoom=6, min_zoom=3)\n\n# add tile layers to the map\ntiles = ['stamenwatercolor', 'cartodbpositron', 'openstreetmap', 'stamenterrain']\nfor tile in tiles:\n    folium.TileLayer(tile).add_to(usa_map)\n\n#df_us_county_covid_latest['fips'] = df_us_county_covid_latest['fips'].fillna(0, inplace=True)\n#df_us_county_covid_latest['fips'] = df_us_county_covid_latest['fips'].astype(int)\ndf_us_county_covid_latest['cases_log'] = np.log2(df_us_county_covid_latest['cases']+1)\n\nchoropleth = folium.Choropleth(\n    geo_data=usa_counties_geo,\n    name='choropleth',\n    data=df_us_county_covid_latest,\n    columns=['county', 'cases_log'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    nan_fill_color='#fef0d9',\n    nan_fill_opacity=0.2,\n    legend_name='Confirmed Cases (Log Scale)',\n    highlight=True,\n    line_color='black'\n).add_to(usa_map)\n\nstyle_function = \"font-size: 15px; font-weight: bold\"\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(\n        fields=['name', 'state', 'cases', 'deaths', 'population', 'population (million)', 'cases per million', 'deaths per million'],\n        aliases=['County', 'State', 'Cases', 'Deaths', 'Population', 'Population (million)', 'Cases per million', 'Deaths per million'],\n        labels=True\n    )\n)\n\nfolium.LayerControl(collapsed=True).add_to(usa_map)\nusa_map","9eb373cb":"'''df_temp = df_cases_time.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index()\ndf_temp[\"Last_Update\"] = pd.to_datetime(df_temp[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\ndf_temp['Confirmed'].fillna(0, inplace=True)\ndf_temp.sort_values('Confirmed', ascending=False).head()'''\n\n\ndf_t[\"date_reported\"] = pd.to_datetime(df_t[\"date\"]).dt.strftime('%m\/%d\/%Y')\ndf_t['state'] = df_t['state_name'].apply(lambda x: get_state_codes(x))\n# while calculating mortality rate, adding 1 to confirmed to avoid divide by zero\ndf_t['mortality_rate'] = df_t['death'] \/ (df_t['positive']+1) * 100\n\ndf_t2 = df_t.groupby(['date', 'state_name']).max().reset_index()\ndf_t2.sort_values('date', ascending=False).head()","f7a1af8b":"fig = px.scatter_geo(df_t2, locations=\"state\",\n                     locationmode=\"USA-states\",\n                     scope=\"usa\",\n                     hover_name=\"state_name\", hover_data=[\"positive\", \"death\", \"recovered\"], animation_frame=\"date\",\n                     color=np.power(df_t2[\"positive\"]+1, 0.3)-1, size=np.power(df_t2[\"positive\"]+1, 0.3),\n                     range_color= [0, max(np.power(df_t2[\"positive\"]+1, 0.3)+1)],\n                     title=\"US COVID-19 Progression Animation Over Time\",\n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     #projection=\"natural earth\"\n                    )\n#fig.update_coloraxes(colorscale=\"hot\")\n#fig.update(layout_coloraxis_showscale=False)\nfig.update_coloraxes(colorbar_title=\"Color<br>Confirmed Cases<br>in reduced Scale\")\nfig.show()","2c2b62ad":"fig = px.choropleth(df_t2, locations=\"state\", locationmode='USA-states', scope=\"usa\",\n                     hover_name=\"state_name\", hover_data=[\"positive\", \"death\", \"recovered\"], animation_frame=\"date\",\n                     color=np.log(df_t2[\"positive\"]+1), \n                     title=\"US COVID-19 Progression Animation Over Time\",\n                     color_continuous_scale=px.colors.sequential.Plasma,\n                   )\n#fig.update_coloraxes(colorscale=\"hot\")\n#fig.update(layout_coloraxis_showscale=False)\nfig.update_coloraxes(colorbar_title=\"Color<br>Confirmed Cases<br>in Log Scale\")\nfig.show()","3e8965f9":"## Maps using Plotly Library","df5112c4":"## USA Total Cases","d442676f":"## Worldwide Total Cases","14f28eee":"## US State Counties with High number of Cases (Top 50)","acdf9a50":"# Progression over Time","3eb05db6":"# COVID-19 in the USA\n\n## Data Analysis, Data Visualization & Comparison\n\nThis notebook contains data analysis and visualization of COVID-19 (Corona Virus) cases in the **United States**.\n\n## About COVID-19\n![CoronaVirus](https:\/\/cdn.pixabay.com\/photo\/2020\/04\/23\/09\/59\/coronavirus-5081887_1280.jpg)\n*Image by <a href=\"https:\/\/pixabay.com\/users\/iXimus-2352783\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5081887\">iXimus<\/a> from <a href=\"https:\/\/pixabay.com\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5081887\">Pixabay<\/a>*\n\n[Coronavirus disease 2019 (COVID-19)](https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).\n\n* **First Identified:** December 2019 in Wuhan, the capital of Hubei province, China\n* **Common Symptoms:** Fever, Cough, Fatigue, Shortness of Breath and Loss of Smell\n* **Concering Symptoms:** Difficulty breathing, Persistent Chest Pain, Confusion, Difficulty Waking, and Bluish Skin\n* **Complications:**\tPneumonia, Viral Sepsis, Acute Respiratory Distress Syndrome, Kidney Failure\n* **Usual Onset:**\t2\u201314 days (typically 5) from infection (time from exposure to onset of symptoms)\n* **Risk factors:**\tTravel, Viral Exposure\n* **Prevention:** \tHand Washing, Face Coverings, Quarantine, Social Distancing\n\n### Useful Information on Covid-19\n* [WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019) - World Health Organization \n* [CDC](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov) - Centers for Disease Control and Prevention","7761ae59":"# Import Packages","65f43b31":"# Heat Map of US States","08d8a4ee":"## Maps using Folium & Leaflet.js Library","77d77bd5":"# Total Cases","b24038d6":"# Time Series of Cases in US","d3e8acb5":"## Confirmed Cases - Animation over Time","67299b2c":"# Cases in US States","a38e795d":"# Get Data from Dataset","b516f2d4":"# Dataset\n\n1. Git repository of the **Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE)**.\n\n    * Master branch: https:\/\/github.com\/CSSEGISandData\/COVID-19\n    * Web-data branch: https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/web-data\n\n\n2. Kaggle dataset: \n\n    - https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset\n    - https:\/\/www.kaggle.com\/sudalairajkumar\/covid19-in-usa"}}