{"cell_type":{"ee47d8c5":"code","3c4c73ad":"code","bbeeb963":"code","31682a6d":"code","e533c752":"code","522855d5":"code","2b98a1c1":"code","84973375":"code","d25d71ea":"code","499857b2":"code","baf53ac1":"code","adebd4a9":"code","beb4fe1a":"code","0cc7cc60":"code","a70fbf81":"code","49dae99e":"code","02ea688f":"code","c14237a6":"code","82452edc":"code","fc6a4cc2":"code","9281f5d6":"code","4971b9da":"code","323cdf94":"code","09ceaa74":"code","3effcb4a":"code","b935dbe9":"code","fddd5a23":"code","e1ea3088":"code","a766d7e4":"code","d347a3c0":"code","83c677b5":"code","2225ac87":"code","9b487435":"markdown","2df8f290":"markdown","05bda5dd":"markdown","c94c8a40":"markdown","14527608":"markdown"},"source":{"ee47d8c5":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid', color_codes=True)\n\nfrom sklearn.metrics import confusion_matrix\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm, tqdm_notebook\nimport os, random\nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\nfrom sklearn.utils import shuffle\n\n!ls ..\/input\/*","3c4c73ad":"import fastai\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.callbacks import *\nfrom fastai.basic_train import *\nfrom fastai.vision.learner import *\n\nfastai.__version__","bbeeb963":"# check if the kernel is running in interactive\/edit\/debug mode: https:\/\/www.kaggle.com\/masterscrat\/detect-if-notebook-is-running-interactively\ndef is_interactive():\n   return 'runtime' in get_ipython().config.IPKernelApp.connection_file\n\nprint('Interactive?', is_interactive())","31682a6d":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    \nseed_everything(42)","e533c752":"# copy pretrained weights to the folder fastai will search by default\nPath('\/tmp\/.cache\/torch\/checkpoints\/').mkdir(exist_ok=True, parents=True)\nmodel_path = '\/tmp\/.cache\/torch\/checkpoints\/efficientNet.pth'\n!cp ..\/input\/efficientnet*\/efficientNet_*.pth {model_path}","522855d5":"PATH = Path('..\/input\/aptos2019-blindness-detection')\n\ndf_train = pd.read_csv(PATH\/'train.csv')\ndf_test = pd.read_csv(PATH\/'test.csv')\n\n# if is_interactive():\n#     df_train = df_train.sample(800)\n\n_ = df_train.hist()","2b98a1c1":"# create image data bunch\naptos19_stats = ([0.42, 0.22, 0.075], [0.27, 0.15, 0.081])\ndata = ImageDataBunch.from_df(df=df_train,\n                              path=PATH, folder='train_images', suffix='.png',\n                              valid_pct=0.1,\n                              ds_tfms=get_transforms(flip_vert=True, max_warp=0.1, max_zoom=1.15, max_rotate=45.),\n                              size=224,\n                              bs=32, \n                              num_workers=os.cpu_count()\n                             ).normalize(aptos19_stats)","84973375":"# check classes\nprint(f'Classes: {data.classes}')","d25d71ea":"# show some sample images\ndata.show_batch(rows=3, figsize=(7,6))","499857b2":"package_path = '..\/input\/efficientnet-pytorch\/efficientnet-pytorch\/EfficientNet-PyTorch-master'\nsys.path.append(package_path)\n\nfrom efficientnet_pytorch import EfficientNet","baf53ac1":"# FastAI adapators to retrain our model without lossing its old head ;)\ndef EfficientNetB4(pretrained=True):\n    \"\"\"Constructs a EfficientNet model for FastAI.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"\n    model = EfficientNet.from_name('efficientnet-b4', override_params={'num_classes':5})\n\n    if pretrained:\n        model_state = torch.load(model_path)\n        # load original weights apart from its head\n        if '_fc.weight' in model_state.keys():\n            model_state.pop('_fc.weight')\n            model_state.pop('_fc.bias')\n            res = model.load_state_dict(model_state, strict=False)\n            assert str(res.missing_keys) == str(['_fc.weight', '_fc.bias']), 'issue loading pretrained weights'\n        else:\n            # A basic remapping is required\n            from collections import OrderedDict\n            mapping = { i:o for i,o in zip(model_state.keys(), model.state_dict().keys()) }\n            mapped_model_state = OrderedDict([\n                (mapping[k], v) for k,v in model_state.items() if not mapping[k].startswith('_fc')\n            ])\n            res = model.load_state_dict(mapped_model_state, strict=False)\n            print(res)\n    return model","adebd4a9":"# create model\nmodel = EfficientNetB4(pretrained=True)\n# print model structure (hidden)\nmodel","beb4fe1a":"class FocalLoss(nn.Module):\n    def __init__(self, gamma=3., reduction='mean'):\n        super().__init__()\n        self.gamma = gamma\n        self.reduction = reduction\n\n    def forward(self, inputs, targets):\n        CE_loss = nn.CrossEntropyLoss(reduction='none')(inputs, targets)\n        pt = torch.exp(-CE_loss)\n        F_loss = ((1 - pt)**self.gamma) * CE_loss\n        if self.reduction == 'sum':\n            return F_loss.sum()\n        elif self.reduction == 'mean':\n            return F_loss.mean()","0cc7cc60":"# from FastAI master\nfrom torch.utils.data.sampler import WeightedRandomSampler\n\nclass OverSamplingCallback(LearnerCallback):\n    def __init__(self,learn:Learner, weights:torch.Tensor=None):\n        super().__init__(learn)\n        self.labels = self.learn.data.train_dl.dataset.y.items\n        _, counts = np.unique(self.labels, return_counts=True)\n        self.weights = (weights if weights is not None else\n                        torch.DoubleTensor((1\/counts)[self.labels]))\n\n    def on_train_begin(self, **kwargs):\n        self.learn.data.train_dl.dl.batch_sampler = BatchSampler(\n            WeightedRandomSampler(self.weights, len(self.learn.data.train_dl.dataset)),\n            self.learn.data.train_dl.batch_size,False)","a70fbf81":"# build model (using EfficientNet)\nlearn = Learner(data, model,\n                loss_func=FocalLoss(),\n                metrics=[accuracy, KappaScore(weights=\"quadratic\")],\n                callback_fns=[BnFreeze,\n#                               OverSamplingCallback,\n#                               partial(GradientClipping, clip=0.2),\n                              partial(SaveModelCallback, monitor='kappa_score', name='best_kappa')]\n               )\nlearn.split( lambda m: (model._conv_head,) )\nlearn.freeze()\nlearn.model_dir = '\/tmp\/'","49dae99e":"# train head first\nlearn.freeze()\nlearn.lr_find(start_lr=1e-5, end_lr=1e1, wd=5e-3)\nlearn.recorder.plot(suggestion=True)","02ea688f":"learn.fit_one_cycle(1, max_lr=3e-3, pct_start=0.1, div_factor=10, final_div=30, wd=5e-3, moms=(0.9, 0.8))\nlearn.save('stage-1')\nlearn.recorder.plot_losses()","c14237a6":"# unfreeze and search appropriate learning rate for full training\nlearn.unfreeze()\nlearn.lr_find(start_lr=slice(1e-6, 1e-5), end_lr=slice(1e-2, 1e-1), wd=1e-3)\nlearn.recorder.plot(suggestion=True)","82452edc":"# train all layers\nlearn.fit_one_cycle(3, max_lr=slice(1e-4, 1e-3), div_factor=50, final_div=100, wd=1e-3, moms=(0.9, 0.8))\nlearn.save('stage-2')\nlearn.recorder.plot_losses()\n# schedule of the lr (left) and momentum (right) that the 1cycle policy uses\nlearn.recorder.plot_lr(show_moms=True)","fc6a4cc2":"# _ = learn.load('best_kappa')\n\n# learn.lr_find(start_lr=slice(1e-7, 1e-6), end_lr=slice(1e-2, 1e-1), wd=1e-3)\n# learn.recorder.plot(suggestion=True)","9281f5d6":"# train all layers\nlearn.fit_one_cycle(cyc_len=25, max_lr=slice(1e-4, 1e-3), pct_start=0, final_div=1000, wd=1e-3, moms=(0.9, 0.8)) # warm restart: pct_start=0\nlearn.save('stage-3')\nlearn.recorder.plot_losses()\n# # schedule of the lr (left) and momentum (right) that the 1cycle policy uses\nlearn.recorder.plot_lr(show_moms=True)","4971b9da":"# learn.load('best_kappa')\n\n# # retrain only head\n# learn.freeze()\n# learn.lr_find(start_lr=1e-7, end_lr=1e-1, wd=1e-2)\n# learn.recorder.plot(suggestion=True)","323cdf94":"# learn.fit_one_cycle(6, max_lr=1e-3, div_factor=100, wd=1e-2)\n# learn.save('stage-4')","09ceaa74":"learn.load('best_kappa')\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(8,8), dpi=60)","3effcb4a":"# interp.plot_top_losses(5, figsize=(15,11))  ## TODO: fix loss function reduction topk","b935dbe9":"# remove zoom from FastAI TTA\ntta_params = {'beta':0.12, 'scale':1.0}","fddd5a23":"sample_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\nsample_df.head()","e1ea3088":"learn.data.add_test(ImageList.from_df(\n    sample_df, PATH,\n    folder='test_images',\n    suffix='.png'\n))","a766d7e4":"preds,y = learn.TTA(ds_type=DatasetType.Test, **tta_params)","d347a3c0":"sample_df.diagnosis = preds.argmax(1)\nsample_df.head()","83c677b5":"sample_df.to_csv('submission.csv',index=False)\n_ = sample_df.hist()","2225ac87":"#move models back to root folder\n!mv {learn.model_dir}\/*.pth .\nos.listdir()","9b487435":"## Define model","2df8f290":"## Loss and Learner","05bda5dd":"## TTA and submission","c94c8a40":"## EfficientNet architecture \n\nPre-trained weights from: https:\/\/www.kaggle.com\/hmendonca\/efficientnet-pytorch-ignite and [Ignite examples](https:\/\/github.com\/pytorch\/ignite\/tree\/master\/examples):\n> Recently new ConvNets architectures have been proposed in \"[EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](https:\/\/arxiv.org\/pdf\/1905.11946.pdf)\" paper. According to the paper, model's compound scaling starting from a 'good' baseline provides an network that achieves state-of-the-art on ImageNet, while being 8.4x smaller and 6.1x faster on inference than the best existing ConvNet.\n![efficientnets](https:\/\/raw.githubusercontent.com\/pytorch\/ignite\/c22609796031f5831f054036895696c7e4df07ce\/examples\/notebooks\/assets\/efficientnets.png)\n\nThis kernel borrowed some of its code from: https:\/\/www.kaggle.com\/kageyama\/fork-of-fastai-blindness-detection-resnet34 and https:\/\/www.kaggle.com\/demonplus\/fast-ai-starter-with-resnet-50 Many thanks to the authors!\n\nIf you liked it, please upvote and leave questions or any feedback below (for me and other kagglers learning).\n\nCheers!","14527608":"## Training"}}