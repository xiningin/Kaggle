{"cell_type":{"4fabdaca":"code","62ba3276":"code","fe70a869":"code","2650ccde":"code","21797f38":"code","db6faedf":"code","b2c41a18":"code","35618010":"code","9094e713":"code","f3f14efa":"code","56e2f353":"code","531d873e":"code","b7471c90":"code","32ffe37b":"code","e8cbb096":"code","964bd2b0":"code","e60daf8f":"code","2570726d":"code","364f95f4":"code","fd49448b":"code","7fa5b021":"code","b8c70bde":"code","d9029a7f":"code","83445981":"code","ca92ef32":"markdown","7538789a":"markdown","721390c8":"markdown","3b24ff9e":"markdown","aec9b556":"markdown","868bdefe":"markdown"},"source":{"4fabdaca":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","62ba3276":"train_df = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","fe70a869":"train_df.head()","2650ccde":"train_df.describe()","21797f38":"train_df.info()","db6faedf":"fig, axes = plt.subplots(3, 3, figsize=(18, 14))\n\nfig.suptitle('Risk Analysis')\n\nsns.boxplot(ax=axes[0, 0], data=train_df, x='Potability', y='ph',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[0, 1], data=train_df, x='Potability', y='Hardness',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[0, 2], data=train_df, x='Potability', y='Solids',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[1, 0], data=train_df, x='Potability', y='Chloramines',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[1, 1], data=train_df, x='Potability', y='Sulfate',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[1, 2], data=train_df, x='Potability', y='Conductivity',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[2, 0], data=train_df, x='Potability', y='Organic_carbon',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[2, 1], data=train_df, x='Potability', y='Trihalomethanes',palette=(\"ch:start=.2,rot=-.3\"))\nsns.boxplot(ax=axes[2, 2], data=train_df, x='Potability', y='Turbidity',palette=(\"ch:start=.2,rot=-.3\"))","b2c41a18":"corr_df=train_df\ncorrMatrix = corr_df.corr()\nsns.heatmap(corrMatrix, annot=True ,cmap=\"Blues\")\nsns.set(rc={'figure.figsize':(10,10)})","35618010":"def detect_miss(df,features):\n    miss_indices = []\n    \n    for c in features:\n        \n        miss_list_col = df[df[c].isna()].index\n        miss_indices.extend(miss_list_col)\n    \n    miss_indices = Counter(miss_indices)\n    multiple_miss = list(i for i, v in miss_indices.items() if v > 2)\n    \n    return multiple_miss","9094e713":"train_df.loc[detect_miss(train_df,['ph','Hardness','Solids','Sulfate','Conductivity','Organic_carbon','Trihalomethanes' ,'Turbidity'])]","f3f14efa":"train_df = train_df.drop(detect_miss(train_df,['ph','Hardness','Solids','Sulfate','Conductivity','Organic_carbon','Trihalomethanes' ,'Turbidity']),axis = 0).reset_index(drop = True)","56e2f353":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)\n        Q3 = np.percentile(df[c],75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","531d873e":"train_df.loc[detect_outliers(train_df,['ph','Hardness','Solids','Sulfate','Conductivity','Organic_carbon','Trihalomethanes' ,'Turbidity'])]","b7471c90":"train_df.isnull().sum()","32ffe37b":"train_df[\"ph\"] = train_df[\"ph\"].fillna(np.mean(train_df[\"ph\"]))\ntrain_df[\"Sulfate\"] = train_df[\"Sulfate\"].fillna(np.mean(train_df[\"Sulfate\"]))\ntrain_df[\"Trihalomethanes\"] = train_df[\"Trihalomethanes\"].fillna(np.mean(train_df[\"Trihalomethanes\"]))","e8cbb096":"Y = train_df[['Potability']]\nX = train_df.drop(['Potability'],axis=1)","964bd2b0":"scaler = preprocessing.StandardScaler().fit(X)\nX = scaler.transform(X)\n\nX = pd.DataFrame(X)","e60daf8f":"Y[\"Potability\"] = train_df[\"Potability\"].astype(\"category\")","2570726d":"X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.25, random_state = 42)","364f95f4":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","fd49448b":"random_state = 42\nclassifier = [GradientBoostingClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ngb_param_grid = {\"n_estimators\":[5,50,250,500],\n                 \"max_depth\":[1,3,5,7,9],\n                 \"learning_rate\":[0.01,0.1,1,2]}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [gb_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","7fa5b021":"GradientBoostingClassifier().get_params().keys()","b8c70bde":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","d9029a7f":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"GradientBoostingClassifier\",\"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","83445981":"votingC = VotingClassifier(estimators = [('svc',best_estimators[1]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"knn\",best_estimators[4])],\n                                        voting = \"hard\", n_jobs = -1, weights=[2, 1, 1])\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","ca92ef32":"<a id=\"3\"> <\/a>\n# Quick Look With Visualization","7538789a":"<a id=\"2\"> <\/a>\n# Load and Examine Data","721390c8":"<a id=\"4\"> <\/a>\n# Processing Data","3b24ff9e":"<a id=\"1\"> <\/a>\n# Add Libaries","aec9b556":"<a id=\"5\"> <\/a>\n# Model Training","868bdefe":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">CONTENT <\/h1>\n<br>\n\n* [Add Libaries](#1)\n* [Load and Examine Data](#2)\n* [Quick Look With Visualization](#3)\n* [Processing Data](#4)\n* [Model Training](#5)"}}