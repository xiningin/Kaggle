{"cell_type":{"ae48f5da":"code","d08e2254":"code","8560218d":"code","d14c9185":"code","e87e29ef":"code","979910ab":"code","f2507405":"code","b7f393ed":"code","4986808a":"code","4b4e346f":"code","22d19b39":"code","ccba199b":"code","dd44fde4":"code","f118124a":"code","01c5f6c4":"code","c56f2eb3":"code","b27a2f89":"code","0512379c":"code","9b3b0195":"code","f1a80d1b":"code","f27096c1":"code","68f106cd":"code","046897cf":"code","fe7ff3f1":"code","606c4f2a":"code","cf0adbb1":"code","bbacb8e7":"code","847c2505":"code","bdf536af":"code","928bc90f":"code","27b89886":"code","585941ad":"code","a396a513":"code","5e24e6c8":"code","554414a8":"code","481786ac":"code","f45b6657":"code","789055a6":"code","24dedf67":"code","d80a4554":"code","acbf4453":"code","00122425":"code","b0c80442":"code","bfcd8a4f":"code","4ff2d0cd":"code","74e198e2":"code","a55da7de":"code","d0ba2f65":"code","a3665fc6":"code","e4ecf106":"code","11d41d2e":"code","80ddb503":"code","8c46ada0":"code","81d77e90":"code","9447326e":"code","9a7a7bb9":"code","91356241":"code","12241528":"code","7de81b43":"markdown","1c820fa9":"markdown","9d13dbaf":"markdown","0039e26d":"markdown","38da35cf":"markdown","97e223fd":"markdown"},"source":{"ae48f5da":"import warnings \nwarnings.filterwarnings('ignore')","d08e2254":"#Reading the data\nimport pandas as pd\ndf = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n","8560218d":"df.head()","d14c9185":"df.columns","e87e29ef":"#returns the number summation of all missing values in the data set.\ndf.isnull().sum()","979910ab":"#print the no. of records and features\ndf.shape","f2507405":"#1 if the patient had a stroke or 0 if not\n#count of 0's and 1's\ndf['stroke'].value_counts()","b7f393ed":"df.drop(['id'], axis='columns', inplace=True)","4986808a":"df.columns\n","4b4e346f":"#Printing some statistical information of all the numerical features.\ndf.describe()","22d19b39":"df['age']=df['age'].apply(lambda x: round(x))","ccba199b":"df['age'][:5]","dd44fde4":"df['bmi'].isnull().sum()","f118124a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n","01c5f6c4":"#A boxplot is a standardized way of displaying the distribution of data\n#It can tell  about the outliers and what their values in the data sets.\nsns.boxplot(df['bmi'])\nplt.show()","c56f2eb3":"#filling the NaN values in df['bmi'] column with the mean value of df['bmi']\ndf['bmi']=df['bmi'].fillna(df['bmi'].mean())","b27a2f89":"df['bmi'].isnull().sum()","0512379c":"sns.boxplot(df['avg_glucose_level'])\nplt.show()\n","9b3b0195":"# info() function is used to print a concise summary of a DataFrame\ndf.info()","f1a80d1b":"#The unique element present in all the categorical features\ncol=df[['gender','ever_married','work_type','Residence_type','smoking_status']]\nfor i in col:\n    print(f'{i}: unique elements | {col[i].unique()}')","f27096c1":"plt.figure(figsize=(10,5))\nplt.scatter(x='bmi',y='age', data=df[df['stroke']==0])\nplt.scatter(x='bmi',y='age', data=df[df['stroke']==1], marker='*')\n\nplt.xlabel('BMI')\nplt.ylabel('Age')\nplt.title('Age Vs BMI')\nplt.legend()\nplt.show()","68f106cd":"plt.figure(figsize=(10,5))\nplt.scatter(x='bmi',y='avg_glucose_level', data=df[df['stroke']==0])\nplt.scatter(x='bmi',y='avg_glucose_level', data=df[df['stroke']==1], marker='+')\n\nplt.xlabel('BMI')\nplt.ylabel('Average glucose level')\nplt.title('Average glucose level Vs BMI')\nplt.legend()\nplt.show()","046897cf":"plt.figure(figsize=(10,5))\nplt.scatter(x='age',y='avg_glucose_level', data=df[df['stroke']==0])\nplt.scatter(x='age',y='avg_glucose_level', data=df[df['stroke']==1], marker='d')\n\nplt.xlabel('Age')\nplt.ylabel('Average glucose level')\nplt.title('Average glucose level Vs Age')\nplt.legend()\nplt.show()","fe7ff3f1":"plt.figure(figsize=(10,5))\nsns.set_style(style='darkgrid')\nsns.countplot(df['gender'], hue=df['stroke'],palette=\"Accent\")\nplt.show()","606c4f2a":"plt.figure(figsize=(10,5))\nsns.set_style(style='darkgrid')\nsns.countplot(df['ever_married'], hue=df['stroke'],palette=\"magma\")\nplt.show()\n\nplt.figure(figsize=(10,5))\nsns.set_style(style='darkgrid')\nsns.countplot(df['work_type'], hue=df['stroke'],palette=\"viridis\")\nplt.show()\n\nplt.figure(figsize=(10,5))\nsns.set_style(style='darkgrid')\nsns.countplot(df['Residence_type'], hue=df['stroke'],palette=\"rocket_r\")\nplt.show()\n\nplt.figure(figsize=(10,5))\nsns.set_style(style='darkgrid')\nsns.countplot(df['smoking_status'], hue=df['stroke'],palette=\"cubehelix\")\nplt.show()","cf0adbb1":"Q1 = df['bmi'].quantile(0.25)\nQ3 = df['bmi'].quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)\nprint(Q3)\nprint(Q1)","bbacb8e7":"#removing all the outlier from the dataframe\ndf_numeric_remove_outlier = df['bmi'][~((df['bmi'] < (Q1 - 1.5 * IQR)) |(df['bmi'] > (Q3 + 1.5 * IQR)))]\ndf_numeric_remove_outlier.shape","847c2505":"df_numeric_remove_outlier[:5]","bdf536af":"df_new=pd.DataFrame(data=df_numeric_remove_outlier)","928bc90f":"df_new.head()","27b89886":"sns.boxplot(df_new['bmi'])","585941ad":"col=df[['gender','ever_married','work_type','Residence_type','smoking_status']]\n\ndf = df[~df['gender'].isin(['Other'])]","a396a513":"df['gender'].unique()","5e24e6c8":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\ndf['gender']=encoder.fit_transform(df['gender'])\ndf['ever_married']=encoder.fit_transform(df['ever_married'])\ndf['work_type']=encoder.fit_transform(df['work_type'])\ndf['Residence_type']=encoder.fit_transform(df['Residence_type'])\ndf['smoking_status']=encoder.fit_transform(df['smoking_status'])","554414a8":"col=df[['gender','ever_married','work_type','Residence_type','smoking_status']]\nfor i in col:\n    print(f'{i}: unique elements | {col[i].unique()}')","481786ac":"col.columns","f45b6657":"df.columns","789055a6":"df1=pd.concat([col,df_new,df['stroke'],df['age'],df['hypertension'],df['heart_disease'],\n              df['avg_glucose_level']],axis=1, join='inner')","24dedf67":"df1.head()","d80a4554":"df1.isnull().sum()","acbf4453":"df.shape","00122425":"df1.shape","b0c80442":"df.info()","bfcd8a4f":"x=df1.drop(['stroke'], axis='columns')\ny=df1['stroke']","4ff2d0cd":"x.head()","74e198e2":"y[:5]","a55da7de":"from sklearn.preprocessing import Normalizer\nscaler=Normalizer()\nx_scaled=scaler.fit_transform(x)","d0ba2f65":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_scaled,y,test_size=0.25)","a3665fc6":"from imblearn.over_sampling import SMOTE\ncounter=len(y_train)\nprint('Before Over Sampling', counter)\nsns.countplot(y_train)\nplt.title('Plotting of number count before sampling')\nplt.show()\n#oversampling the train datsets using SMOTE\nsm=SMOTE()\nX_train_sm, y_train_sm=sm.fit_resample(X_train,y_train)\ncounter=len(y_train_sm)\nprint('After Over Sampling', counter)\nplt.title('Plotting of number count after sampling')\nsns.countplot(y_train_sm)\nplt.show()","e4ecf106":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, plot_confusion_matrix\nmodel_RF=RandomForestClassifier(n_estimators=40)\nmodel_RF.fit(X_train_sm,y_train_sm)","11d41d2e":"model_RF.score(X_test,y_test)*100","80ddb503":"pred_RF=model_RF.predict(X_test)\npred_RF[:5]","8c46ada0":"print(f\"Accuracy Score : {round(accuracy_score(y_test, pred_RF) * 100, 2)}%\")","81d77e90":"print(classification_report(y_test, pred_RF))","9447326e":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,pred_RF)\ncm","9a7a7bb9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import  DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import cross_val_score, GridSearchCV","91356241":"model_params = {\n    'svm': {\n        'model': SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20,25,30,40],\n            'kernel': ['rbf','linear']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10,15,20,25,30]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear'),\n        'params': {\n            'C': [1,5,10,15,20,25]\n        }\n    },\n    'decision_tree': {\n        'model': DecisionTreeClassifier(),\n        'params':{\n            'criterion':['gini','entropy']\n        }\n    }\n}","12241528":"scores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(X_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_score = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_score","7de81b43":"# Making The model by using RandomForestClassifier","1c820fa9":"# Observation\nFrom the above plot, I can conclude that the person having the maximum possibility of getting stroke whose BMI within 20 to 50.","9d13dbaf":"# Observation\nFrom the above plot, I can conclude that the patient whose age is more than 40 has the maximum possibility of getting stroke and BMI within 20 to 50.","0039e26d":"# Observation\nFrom the above plot, I can conclude that the person having the maximum possibility of getting a stroke whose Age within 40 to 80.","38da35cf":"**Hence, we can conclude that this dataset is working best in Logistic Regression and  SVM  with Accuracy score 0.95 and 0.95 respectively.**","97e223fd":" # Dataset Information.\n##### 1) id: unique identifier\n##### 2) gender: \"Male\", \"Female\" or \"Other\"\n##### 3) age: age of the patient\n##### 4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n##### 5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n##### 6) ever_married: \"No\" or \"Yes\"\n##### 7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n##### 8) Residence_type: \"Rural\" or \"Urban\"\n##### 9) avg_glucose_level: average glucose level in blood\n##### 10) bmi: body mass index\n##### 11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n##### 12) stroke: 1 if the patient had a stroke or 0 if not"}}