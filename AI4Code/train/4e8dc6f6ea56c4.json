{"cell_type":{"92a3835d":"code","145fce00":"code","0678fc6b":"code","52ca0de5":"code","05a088a0":"code","03b258cf":"code","69eab4d2":"markdown","34426b83":"markdown","39364718":"markdown","f376e45e":"markdown","6fbb93d5":"markdown","c721fcd2":"markdown","2bd55023":"markdown","2930cf54":"markdown","aa2cea1c":"markdown"},"source":{"92a3835d":"import torch\nfrom torch import nn\nfrom tqdm.auto import tqdm\nfrom torchvision import transforms\nfrom torchvision.datasets import MNIST\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import DataLoader\nimport matplotlib.pyplot as plt\ntorch.manual_seed(0) # Set for testing purposes, please do not change!\n\n\ndef show_tensor_images(image_tensor, num_images=25, size=(1, 28, 28)):\n    '''\n    Function for visualizing images: Given a tensor of images, number of images, and\n    size per image, plots and prints the images in an uniform grid.\n    '''\n    image_tensor = (image_tensor + 1) \/ 2\n    image_unflat = image_tensor.detach().cpu()\n    image_grid = make_grid(image_unflat[:num_images], nrow=5)\n    plt.imshow(image_grid.permute(1, 2, 0).squeeze())\n    plt.show()","145fce00":"class Generator(nn.Module):\n    '''\n    Generator Class\n    Values:\n        z_dim: the dimension of the noise vector, a scalar\n        im_chan: the number of channels in the images, fitted for the dataset used, a scalar\n              (MNIST is black-and-white, so 1 channel is your default)\n        hidden_dim: the inner dimension, a scalar\n    '''\n    def __init__(self, z_dim=10, im_chan=1, hidden_dim=64):\n        super(Generator, self).__init__()\n        self.z_dim = z_dim\n        # Build the neural network\n        self.gen = nn.Sequential(\n            self.make_gen_block(z_dim, hidden_dim * 4),\n            self.make_gen_block(hidden_dim * 4, hidden_dim * 2, kernel_size=4, stride=1),\n            self.make_gen_block(hidden_dim * 2, hidden_dim),\n            self.make_gen_block(hidden_dim, im_chan, kernel_size=4, final_layer=True),\n        )\n\n    def make_gen_block(self, input_channels, output_channels, kernel_size=3, stride=2, final_layer=False):\n        '''\n        Function to return a sequence of operations corresponding to a generator block of DCGAN, \n        corresponding to a transposed convolution, a batchnorm (except for in the last layer), and an activation.\n        Parameters:\n            input_channels: how many channels the input feature representation has\n            output_channels: how many channels the output feature representation should have\n            kernel_size: the size of each convolutional filter, equivalent to (kernel_size, kernel_size)\n            stride: the stride of the convolution\n            final_layer: a boolean, true if it is the final layer and false otherwise \n                      (affects activation and batchnorm)\n        '''\n\n        #   According to the paper, the Generator Block must have the following:\n        #       1) Transposed convolution using the given parameters.\n        #       2) Batchnorm, except for the last layer.\n        #       3) Each batchnorm with be followed by a ReLU activation.\n        #       4) If its the final layer, we will use Tanh activation after the Trasposed Convolution.\n\n        # Neural block\n        if not final_layer:\n            return nn.Sequential(\n                nn.ConvTranspose2d(input_channels, output_channels, kernel_size=kernel_size, stride=stride),\n                nn.BatchNorm2d(output_channels),\n                nn.ReLU(inplace=True)\n            )\n        \n        # Final Layer\n        else: \n            return nn.Sequential(\n                nn.ConvTranspose2d(input_channels, output_channels, kernel_size=kernel_size, stride=stride),\n                nn.Tanh()\n            )\n\n    def unsqueeze_noise(self, noise):\n        '''\n        Function for completing a forward pass of the generator: Given a noise tensor, \n        returns a copy of that noise with width and height = 1 and channels = z_dim.\n        Parameters:\n            noise: a noise tensor with dimensions (n_samples, z_dim)\n        '''\n        return noise.view(len(noise), self.z_dim, 1, 1)\n\n    def forward(self, noise):\n        '''\n        Function for completing a forward pass of the generator: Given a noise tensor, \n        returns generated images.\n        Parameters:\n            noise: a noise tensor with dimensions (n_samples, z_dim)\n        '''\n        x = self.unsqueeze_noise(noise)\n        return self.gen(x)\n\ndef get_noise(n_samples, z_dim, device='cpu'):\n    '''\n    Function for creating noise vectors: Given the dimensions (n_samples, z_dim)\n    creates a tensor of that shape filled with random numbers from the normal distribution.\n    Parameters:\n        n_samples: the number of samples to generate, a scalar\n        z_dim: the dimension of the noise vector, a scalar\n        device: the device type\n    '''\n    return torch.randn(n_samples, z_dim, device=device)","0678fc6b":"class Discriminator(nn.Module):\n    '''\n    Discriminator Class\n    Values:\n        im_chan: the number of channels in the images, fitted for the dataset used, a scalar\n              (MNIST is black-and-white, so 1 channel is your default)\n    hidden_dim: the inner dimension, a scalar\n    '''\n    def __init__(self, im_chan=1, hidden_dim=16):\n        super(Discriminator, self).__init__()\n        self.disc = nn.Sequential(\n            self.make_disc_block(im_chan, hidden_dim),\n            self.make_disc_block(hidden_dim, hidden_dim * 2),\n            self.make_disc_block(hidden_dim * 2, 1, final_layer=True),\n        )\n\n    def make_disc_block(self, input_channels, output_channels, kernel_size=4, stride=2, final_layer=False):\n        '''\n        Function to return a sequence of operations corresponding to a discriminator block of DCGAN, \n        corresponding to a convolution, a batchnorm (except for in the last layer), and an activation.\n        Parameters:\n            input_channels: how many channels the input feature representation has\n            output_channels: how many channels the output feature representation should have\n            kernel_size: the size of each convolutional filter, equivalent to (kernel_size, kernel_size)\n            stride: the stride of the convolution\n            final_layer: a boolean, true if it is the final layer and false otherwise \n                      (affects activation and batchnorm)\n        '''\n        #   According to the paper, the discriminator Block must have the following:\n        #       1) Convolutional layer using the given parameters.\n        #       2) Batchnorm, except for the last layer.\n        #       3) Follow each batchnorm with a LeakyReLU activation with slope 0.2. (stated in the paper)\n        #       4) Not to use an activation on the final layer\n        \n        # Build the neural block\n        if not final_layer:\n            return nn.Sequential(\n                nn.Conv2d(input_channels, output_channels, kernel_size=kernel_size, stride=stride),\n                nn.BatchNorm2d(output_channels),\n                nn.LeakyReLU(0.2, inplace=True)\n\n                      )\n        # Final Layer\n        else: \n            return nn.Sequential(\n                nn.Conv2d(input_channels, output_channels, kernel_size=kernel_size, stride=stride)\n\n            )\n\n    def forward(self, image):\n        '''\n        Function for completing a forward pass of the discriminator: Given an image tensor, \n        returns a 1-dimension tensor representing fake\/real.\n        Parameters:\n            image: a flattened image tensor with dimension (im_dim)\n        '''\n        disc_pred = self.disc(image)\n        return disc_pred.view(len(disc_pred), -1)","52ca0de5":"criterion = nn.BCEWithLogitsLoss()\nz_dim = 64\ndisplay_step = 500\nbatch_size = 128\n# A learning rate of 0.0002 works well on DCGAN\nlr = 0.0002\n\n# These parameters control the optimizer's momentum, which you can read more about here:\n# https:\/\/distill.pub\/2017\/momentum\/ \nbeta_1 = 0.5 \nbeta_2 = 0.999\ndevice = 'cuda'\n\n# You can tranform the image values to be between -1 and 1 (the range of the tanh activation)\ntransform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5,), (0.5,)),\n])\n\ndataloader = DataLoader(\n    MNIST('.', download=True, transform=transform),\n    batch_size=batch_size,\n    shuffle=True)","05a088a0":"gen = Generator(z_dim).to(device)\ngen_opt = torch.optim.Adam(gen.parameters(), lr=lr, betas=(beta_1, beta_2))\ndisc = Discriminator().to(device) \ndisc_opt = torch.optim.Adam(disc.parameters(), lr=lr, betas=(beta_1, beta_2))\n\n# You initialize the weights to the normal distribution\n# with mean 0 and standard deviation 0.02\ndef weights_init(m):\n    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n    if isinstance(m, nn.BatchNorm2d):\n        torch.nn.init.normal_(m.weight, 0.0, 0.02)\n        torch.nn.init.constant_(m.bias, 0)\ngen = gen.apply(weights_init)\ndisc = disc.apply(weights_init)","03b258cf":"n_epochs = 100\ncur_step = 0\nmean_generator_loss = 0\nmean_discriminator_loss = 0\nfor epoch in range(n_epochs):\n    # Dataloader returns the batches\n    for real, _ in tqdm(dataloader):\n        cur_batch_size = len(real)\n        real = real.to(device)\n\n        ## Update discriminator ##\n        disc_opt.zero_grad()\n        fake_noise = get_noise(cur_batch_size, z_dim, device=device)\n        fake = gen(fake_noise)\n        disc_fake_pred = disc(fake.detach())\n        disc_fake_loss = criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))\n        disc_real_pred = disc(real)\n        disc_real_loss = criterion(disc_real_pred, torch.ones_like(disc_real_pred))\n        disc_loss = (disc_fake_loss + disc_real_loss) \/ 2\n\n        # Keep track of the average discriminator loss\n        mean_discriminator_loss += disc_loss.item() \/ display_step\n        # Update gradients\n        disc_loss.backward(retain_graph=True)\n        # Update optimizer\n        disc_opt.step()\n\n        ## Update generator ##\n        gen_opt.zero_grad()\n        fake_noise_2 = get_noise(cur_batch_size, z_dim, device=device)\n        fake_2 = gen(fake_noise_2)\n        disc_fake_pred = disc(fake_2)\n        gen_loss = criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))\n        gen_loss.backward()\n        gen_opt.step()\n\n        # Keep track of the average generator loss\n        mean_generator_loss += gen_loss.item() \/ display_step\n\n        ## Visualization code ##\n        if cur_step % display_step == 0 and cur_step > 0:\n            print(f\"Epoch {epoch}, step {cur_step}: Generator loss: {mean_generator_loss}, discriminator loss: {mean_discriminator_loss}\")\n            show_tensor_images(fake)\n            show_tensor_images(real)\n            mean_generator_loss = 0\n            mean_discriminator_loss = 0\n        cur_step += 1\n","69eab4d2":"# Generator\n\nThe first component we will make is the generator. You may notice that instead of passing in the image dimension, you will pass the number of image channels to the generator. This is because with DCGAN, you use convolutions which don\u2019t depend on the number of pixels on an image. However, the number of channels is important to determine the size of the filters.\n\nWe will build a generator using 4 layers (3 hidden layers + 1 output layer). As before, we will need to write a function to create a single block for the generator's neural network.\n\nSince in DCGAN the activation function will be different for the output layer, you will need to check what layer is being created.\n\nAlso, we will create a function the can create the noise vector. \n\n\n\n![generator archticture.png](attachment:8716d618-8f78-4070-9692-63818553de33.png)\n\nFigure: Architectural drawing of a generator from DCGAN from [Radford et al (2016)](https:\/\/arxiv.org\/pdf\/1511.06434v1.pdf).","34426b83":"# Discriminator\n\nThe second component you need to create is the discriminator.\n\nWe will use 3 layers in your discriminator's neural network. Like with the generator, We will need create the function to create a single neural network block for the discriminator.\n\nYou'll find [nn.Conv2d](https:\/\/pytorch.org\/docs\/master\/generated\/torch.nn.Conv2d.html), [nn.BatchNorm2d](https:\/\/pytorch.org\/docs\/master\/generated\/torch.nn.BatchNorm2d.html), and [nn.LeakyReLU](https:\/\/pytorch.org\/docs\/master\/generated\/torch.nn.LeakyReLU.html) useful!","39364718":"# Intorduction\n\nIn the previous [tutorial](http:\/\/https:\/\/www.kaggle.com\/ahmedabdulhamid\/gan-generating-hand-written-digits-pytorch-1), we traid to demonstrate the basic concepts of a **GAN** Network and how the **Discriminator** and **Generator** interacts with each other and have demonstrated this on [MNIST](http:\/\/http:\/\/yann.lecun.com\/exdb\/mnist\/) dataset using PyTorch. \n\n\nNow, as we all already know, the **CNNs** are better handling the image data. so, is it possible to empower the classical idea of **GAN** using **CNNs**?\n\nThe answer was presented in the ***UNSUPERVISED REPRESENTATION LEARNING WITH DEEP CONVOLUTIONAL GENERATIVE ADVERSARIAL NETWORKS*** [paper](http:\/\/https:\/\/arxiv.org\/pdf\/1511.06434v1.pdf) or abbriviated as **DCGAN** \n","f376e45e":"Finally, you can train your GAN!\nFor each epoch, you will process the entire dataset in batches. For every batch, you will update the discriminator and generator. Then, you can see DCGAN's results!","6fbb93d5":"Then, we can initialize generator, discriminator, and optimizers.","c721fcd2":"# Deep Convolutional GAN (DCGAN)","2bd55023":"# DCGAN\n\nBased on the paper, a successful implementation of the *DCGAN* requires some guidlines to be taken.\n\n<!-- ```\nArchitecture guidelines for stable Deep Convolutional GANs\n\u2022 Replace any pooling layers with strided convolutions (discriminator) and fractional-strided\nconvolutions (generator).\n\u2022 Use BatchNorm in both the generator and the discriminator.\n\u2022 Remove fully connected hidden layers for deeper architectures.\n\u2022 Use ReLU activation in generator for all layers except for the output, which uses Tanh.\n\u2022 Use LeakyReLU activation in the discriminator for all layers.\n``` -->\n\n\n*   Use convolutions without any pooling layers\n*   Use batchnorm in both the generator and the discriminator\n*   Don't use fully connected hidden layers\n*   Use ReLU activation in the generator for all layers except for the output, which uses a Tanh activation (bounded activation helps in model learning).\n*   Use LeakyReLU activation in the discriminator for all layers except for the output, which does not use an activation\n\nYou will begin by importing some useful packages and data that will help you create your GAN. You are also provided a visualizer function to help see the images your GAN will create.","2930cf54":"# Training\nNow you can put it all together!\nRemember that these are your parameters:\n  *   criterion: the loss function\n  *   n_epochs: the number of times you iterate through the entire dataset when training\n  *   z_dim: the dimension of the noise vector\n  *   display_step: how often to display\/visualize the images\n  *   batch_size: the number of images per forward\/backward pass\n  *   lr: the learning rate\n  *   beta_1, beta_2: the momentum term\n  *   device: the device type\n\n<!-- In addition, be warned that **this runs very slowly on the default CPU**. One way to run this more quickly is to download the .ipynb and upload it to Google Drive, then open it with Google Colab, click on `Runtime -> Change runtime type` and set hardware accelerator to GPU and replace\n`device = \"cpu\"`\nwith\n`device = \"cuda\"`. The code should then run without any more changes, over 1,000 times faster.  -->\n","aa2cea1c":"Here's roughly the progression you should be expecting. On GPU this takes about 30 seconds per thousand steps. On CPU, this can take about 8 hours per thousand steps. You might notice that in the image of Step 5000, the generator is disproprotionately producing things that look like ones. If the discriminator didn't learn to detect this imbalance quickly enough, then the generator could just produce more ones. As a result, it may have ended up tricking the discriminator so well that there would be no more improvement, known as mode collapse: \n\n\n![Mode Collapse](attachment:44b4754d-f737-4393-b2ef-8c9667e7891e.png)\n\n\nFigure: Mode Collapse phenomenon from [A Probe Towards Understanding GAN and VAE Models](https:\/\/arxiv.org\/pdf\/1812.05676.pdf)"}}