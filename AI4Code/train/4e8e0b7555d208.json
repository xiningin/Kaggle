{"cell_type":{"7d0e86d2":"code","976cb608":"code","d151e25b":"code","f0e285c4":"code","03520523":"code","e30a8013":"code","dbf29956":"code","9395d4cc":"code","89445cb5":"markdown"},"source":{"7d0e86d2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nheart = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")","976cb608":"heart.head()","d151e25b":"heart.info(verbose=True, show_counts=True)","f0e285c4":"# splitting the dataset into train and test set\n\nheart_train = heart[:750]\nheart_test = heart[750:]","03520523":"# distribution of the binary target\n\nlabels = [\"O: Normal\", \"1: Heart Disease\"]\nvalues = [len(heart_train)-heart_train.HeartDisease.sum(), heart_train.HeartDisease.sum()]\n\nfig = plt.figure(figsize=(8,5))\nplt.bar(labels, values, color=\"red\", width=0.5)\nplt.xlabel(\"Target\", fontsize=14)\nplt.ylabel(\"Number of occurrences\", fontsize=14)\nplt.title(\"Distribution of the binary target variable in the train set\", fontsize=18)\nplt.show()","e30a8013":"# inspecting differences between categorical feature classes\n\ncat_cols = []\n\nfor col in heart_train.columns:\n    \n    try:\n        if heart_train[col].dtype.char == 'O':\n            \n            cat_cols.append(col)\n            targets = list(heart_train[col].dropna(axis=0).unique())\n            values = []\n            for tar in targets:\n                cat_ = heart_train[heart_train[col] == tar]\n                try:\n                    values.append(100*(sum(cat_.HeartDisease)\/len(cat_)))\n                except:\n                    values.append(0)\n            \n            fig = plt.figure(figsize=(8,5))\n            plt.bar(targets, values, color=\"red\", width=0.5)\n            plt.xlabel(f\"{col}\", fontsize=14)\n            plt.xlabel(\"%\", fontsize=14)\n            plt.title(f\"% of patients with heart disease based on {col}\", fontsize=18)\n            plt.show()\n    except:\n        continue","dbf29956":"heart_train_minus_target = heart_train.drop([\"HeartDisease\"], axis=1)\nnum_cols = []\n\nfor col in heart_train_minus_target.columns:\n    \n    if str(heart_train[col].dtype) != 'object':\n        \n        num_cols.append(str(col))\n        \n        feat_null = np.array(heart_train[heart_train.HeartDisease == 0][col])\n        feat_one = np.array(heart_train[heart_train.HeartDisease == 1][col])\n        p_val = stats.ttest_ind(feat_null, feat_one, equal_var=False).pvalue\n        \n        print(f\"{col}:\\n\")\n        print(f\"Normal: Mean={round(feat_null.mean(),2)}, Variance={round(feat_null.var(),2)}\")\n        print(f\"With Heart Disease: Mean={round(feat_one.mean(),2)}, Variance={round(feat_one.var(),2)}\")\n        print(f\"p-value Welch's t-test: {round(p_val, 5)}\\n\")","9395d4cc":"# check on multicolliniearity between the numerical features\n\nnum_df = heart_train[num_cols]\ncorr_matrix = num_df.corr()\nsns.clustermap(corr_matrix, annot = True, fmt = \".2f\", cmap = \"icefire\", figsize=(11,11))\nplt.title(\"Correlation between numerical features\", fontsize=14)\nplt.show()","89445cb5":"# 1. Explorative Data Analysis (EDA)"}}