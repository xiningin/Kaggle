{"cell_type":{"3f4b02ad":"code","c58fe11d":"code","a2d3a32b":"code","2d63a777":"code","c6e2425a":"code","0f608874":"code","0673f041":"code","0e11f6f6":"code","712a9abf":"code","0339a0db":"markdown"},"source":{"3f4b02ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c58fe11d":"import xgboost as xgb","a2d3a32b":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv',nrows=200000)\n\ntrain = train.astype({c: np.float16 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain['feature_64'] = train['feature_64'].interpolate()\ntrain.fillna(train.mean(),inplace=True)","2d63a777":"train['datetime'] = pd.to_datetime(train['date'], unit='d') + pd.to_timedelta(9.5+0.5*(train['feature_64']-train['feature_64'].min()), unit='h')\ntrain.set_index('datetime',inplace=True)","c6e2425a":"features = [col for col in train.columns if 'feature' in col]","0f608874":"#Dropping feature_0\nfor f in features[1:]:\n    for ws in ['20s','5min']:\n        train[f+f'_rolling_{ws}'] = train[f].rolling(ws).mean()\nfeatures = [col for col in train.columns if 'feature' in col]\n\nX = train[features].values\ny = (train['resp'] > 0).astype('int')","0673f041":"\nclf = xgb.XGBClassifier(\n    n_estimators=400,\n    max_depth=7,\n    eta=0.5, \n    missing=None,\n    random_state=42,\n    tree_method='gpu_hist',\n    subsample=0.8,\n    colsample_bytree=1,\n    verbosity=2   \n)","0e11f6f6":"%time clf.fit(X, y)","712a9abf":"sorted(list(zip(features,clf.feature_importances_.ravel())),key=lambda x: x[1],reverse=True)","0339a0db":"Assuming `feature_64` is time in half hours starting from 9.30. "}}