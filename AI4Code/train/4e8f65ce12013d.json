{"cell_type":{"1e858abe":"code","6d5006bd":"code","4e6813c2":"code","416686a1":"code","d41cecfa":"code","d98e05a9":"code","c4ded9f1":"code","ba9807a5":"code","eb544c43":"code","99fedf10":"code","748a3e88":"code","4db56f13":"code","fa0d264d":"code","ecbc7566":"code","20dd2361":"code","cd953b49":"code","ce8377f7":"code","83d4a596":"code","6b8dfb73":"code","29146f8f":"code","e05a40ad":"code","15f67145":"code","c70b3c9c":"code","c651c572":"code","b3eec8aa":"code","ed1ee0df":"code","6e0c8aaa":"code","7d4652f2":"code","322c67f7":"code","bbabeca0":"code","e91995c5":"code","59bd0d60":"code","ea6447a4":"code","b439a296":"markdown","1dadc973":"markdown","8b712a4b":"markdown","72a741ce":"markdown","b5080786":"markdown","e59807be":"markdown","26fda61d":"markdown","d11e7f3f":"markdown","c6026e39":"markdown","4d3df1d0":"markdown","e2206913":"markdown","5c2027ec":"markdown"},"source":{"1e858abe":"import cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Conv2D, MaxPool2D, Flatten\nfrom keras import optimizers\nfrom keras import losses\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nimport tensorflow as tf\nimport random # for visualization\nfrom sklearn.preprocessing import LabelEncoder\nprint('Libraries Imported')","6d5006bd":"path = '..\/input\/mias-mammography\/all-mias\/'","4e6813c2":"print(\"reading dataframe\")\ninfo=pd.read_csv(\"..\/input\/mias-mammography\/Info.txt\",sep=\" \")\ninfo=info.drop('Unnamed: 7',axis=1)","416686a1":"info","d41cecfa":"info.dropna(subset = [\"SEVERITY\"], inplace=True)\n\ninfo.reset_index(inplace = True)\ninfo","d98e05a9":"info = info.drop([3], axis=0)\ninfo.reset_index(inplace = True)\ninfo = info.drop('level_0', axis =1)\ninfo = info.drop('index', axis =1)\ninfo","c4ded9f1":"# B = 0\n# M = 1\nlb = LabelEncoder()\ninfo['SEVERITY'] = lb.fit_transform(info['SEVERITY'])\ninfo","ba9807a5":"\nlabel = info.SEVERITY\nlabel = np.array(label)\nlabel","eb544c43":"# define the every images filepaths in to list\nimg_name = []\n\nfor i in range(len(label)):\n        img_name.append(path + info.REFNUM[i]+ '.pgm')","99fedf10":"img_name = np.array(img_name)","748a3e88":"#print(img_name)\nprint(f'image addres amount {img_name.shape}')","4db56f13":"plt.imshow(cv2.imread(img_name[0]))\nplt.title(label[0])","fa0d264d":"# view image random images\ndef view_25_random_image():\n    fig = plt.figure(figsize = (15, 10))\n    for i in range(25):\n        rand = random.randint(0,len(label))\n        ax = plt.subplot(5, 5, i+1)\n    \n        img = cv2.imread(img_name[rand], 0)\n        img = cv2.resize(img, (256,256))\n        if label[rand] == 1:\n            plt.title('B')\n        else:\n            plt.title('M')\n        plt.tight_layout()\n        plt.axis('off')\n        plt.imshow(img)\n    fig.savefig('random_25_image_fig.png')\n\nview_25_random_image()","ecbc7566":"img_path = []\nlast_label = []\nfor i in range(len(img_name)):\n    \n    img = cv2.imread(img_name[i], 0)\n    img = cv2.resize(img, (224,224))\n    rows, cols= img.shape\n    for angle in range(0, 360):\n            M = cv2.getRotationMatrix2D((cols \/ 2, rows \/ 2), angle, 1)    #Rotate 0 degree\n            img_rotated = cv2.warpAffine(img, M, (224, 224))\n            img_path.append(img_rotated)\n            last_label.append(label[i])\n            \n            #if label[i] == 1:\n            #    last_label.append(1)\n            #else:\n            #    last_label.append(0)\n","20dd2361":"last_label = np.array(last_label)\nlast_label","cd953b49":"# split train and test set\nx_train, x_test, y_train, y_test = train_test_split(img_path, last_label, test_size = 0.25, random_state = 42)","ce8377f7":"len(x_train),len(x_test),len(y_train),len(y_test)","83d4a596":"x_train = np.array(x_train)\nx_test = np.array(x_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)\n","6b8dfb73":"x_train.shape","29146f8f":"x_test.shape","e05a40ad":"x_train = np.reshape(x_train, (32940,224, 224, 1)) # 1 for gray scale\nx_test = np.reshape(x_test, (10980,224, 224,1))","15f67145":"\ndef create_model():\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(224, 224, 1)))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(32, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(32, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(32, kernel_size=(3,3),activation='relu'))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Flatten())\n    #model.add(Dense(128, activation = 'relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    return model","c70b3c9c":"model = create_model()\nmodel.summary()","c651c572":"\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', patience=0,restore_best_weights=True, verbose=1)\n\ncheck_point_filepath = '.\/'\n\nmodel_check_point = ModelCheckpoint(filepath =check_point_filepath, monitor='val_loss', verbose=1, save_best_only=True,\n                                    save_weights_only=False, mode='auto', save_freq='epoch')","b3eec8aa":"model.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nhist = model.fit(x_train,\n                 y_train,\n                 validation_split=0.2,\n                 epochs=100,\n                 batch_size=64,\n                 callbacks=[early_stop])\n\n","ed1ee0df":"y_test = np.array(y_test)\nloss_value , accuracy = model.evaluate(x_test, y_test)\n\nprint('Test_loss_value = ' +str(loss_value))\nprint('test_accuracy = ' + str(accuracy))\n\nprint(model.predict(x_test))","6e0c8aaa":"\ndef Visualize_Result(acc,val_acc,loss, val_loss):\n    fig, (ax1, ax2) = plt.subplots(nrows = 1,\n                                   ncols = 2,\n                                   figsize = (15,6),\n                                   sharex =True)\n\n    plot1 = ax1.plot(range(0, len(acc)),\n                     acc,\n                     label = 'accuracy')\n\n    plot2 = ax1.plot(range(0, len(val_acc)),\n                     val_acc,\n                     label = 'val_accuracy')\n\n    ax1.set(title = 'Accuracy And Val Accuracy progress',\n            xlabel = 'epoch',\n            ylabel = 'accuracy\/ validation accuracy')\n\n    ax1.legend()\n\n    plot3 = ax2.plot(range(0, len(loss)),\n                     loss,\n                     label = 'loss')\n    \n    plot4 = ax2.plot(range(0, len(val_loss)),\n                     val_loss,\n                     label = 'val_loss')\n    \n    ax2.set(title = 'Loss And Val loss progress',\n            xlabel = 'epoch',\n            ylabel = 'loss\/ validation loss')\n\n    ax2.legend()\n\n    fig.suptitle('Result Of Model', fontsize = 20, fontweight = 'bold')\n    fig.savefig('Accuracy_Loss_figure.png')\n    plt.tight_layout()\n    plt.show()\n\nvisualize_result = Visualize_Result(hist.history['accuracy'],hist.history['val_accuracy'], hist.history['loss'], hist.history['val_loss'])","7d4652f2":"y_pred=model.predict(x_test)","322c67f7":"y_pred.shape","bbabeca0":"len(last_label)","e91995c5":"y_test","59bd0d60":"y_pred","ea6447a4":"from sklearn.metrics import roc_curve, auc\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\nfor i in range(2):\n    fpr[i], tpr[i], _ = roc_curve(y_test, y_pred)\n    roc_auc[i] = auc(fpr[i], tpr[i])\n    \nfpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_pred.ravel())\nroc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n\n#roc plot for specific class\nplt.figure()\nlw = 2\nplt.plot(fpr[0], tpr[0], color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[0])\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ANNROC')\nplt.legend(loc=\"lower right\")\nplt.show()","b439a296":"## Read Data","1dadc973":"## split train and test set","8b712a4b":"## read Images and labels. and augmentation of images","72a741ce":"## view image random images","b5080786":"# Find the direction of dataset\nimport numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e59807be":"## Let's Visualize our result","26fda61d":"an example of image path\n\n..\/input\/mias-mammography\/all-mias\/mdb001.pgm","d11e7f3f":"## Define Callbacks","c6026e39":"# Turning our outputs B-M to 1-0\nlabel = []\nfor i in range(len(info)):\n    if info.SEVERITY[i] == 'B':\n        label.append(1)\n    else:\n        label.append(0)","4d3df1d0":"## Build a Model","e2206913":"## Turning our outputs B-M to 1-0","5c2027ec":"## My Goal\n\n* Import Data\n* Take The Label from the data\n* Take the image name from the data\n* visualize random images\n* turn to images to numpy array and enlarge the data\n* build the model\n* visualize the result of model"}}