{"cell_type":{"afb8c5c6":"code","81a995b8":"code","c51904bb":"code","fe88f8c7":"code","229fc771":"code","5d03439a":"code","72a08fd3":"code","c8d4787a":"code","cc71d874":"code","e76d55c3":"code","4067973e":"code","453880ea":"code","3ff87086":"code","54c597d5":"code","97f63787":"code","815003c1":"code","544fda75":"code","9be90b5a":"code","ae3aa043":"code","ffc9e44a":"code","d9d8bc98":"code","c1102b7d":"code","08118100":"code","1c98f72b":"code","461b0f62":"markdown","ea89513a":"markdown","9ead040b":"markdown","c82fc612":"markdown","6ef5f63c":"markdown","1014531f":"markdown","cf7bc59f":"markdown","72c42d65":"markdown","bc744d2e":"markdown"},"source":{"afb8c5c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom collections import Counter\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\npath = \"\/kaggle\/input\/shapes\/shapes\"\nprint(os.listdir())\nprint(os.getcwd())\n\n# Any results you write to the current directory are saved as output.","81a995b8":"\nt_path = path +\"\/squares\/drawing(1).png\"  #saving the path for the example 1 in the triangles folder\nprint(os.path.exists(t_path))   #checking whether the path exists or not ","c51904bb":"#Trying to load the image and display it \nimport matplotlib.image as mpimg\nt_path = path +\"\/squares\/drawing(1).png\"\nimg = mpimg.imread(t_path)\ndef rgb2gray(img):\n    return np.dot(img[...,:3], [0.299, 0.587, 0.114])\n\ngray = rgb2gray(img)\n#print(type(gray))\n#print(gray.shape)\nimgplot = plt.imshow(gray,cmap = 'gray')\nplt.show()     \nimg = np.ravel(gray)\n#print(type(img))   #image type is numpy.ndarray\nprint(img.shape)  \n","fe88f8c7":"df = pd.DataFrame([img])\ndf.head()   #this is the exmaple of 1 training example ","229fc771":"shapes = ['triangles','circles','squares']    #saving the list of the folders in shapes folder\npath = \"\/kaggle\/input\/shapes\/shapes\/\"         #path for the images folder\n\nfiles = [] #for storing all the images path \nresult = []\nfor shape in shapes:                                       #|\n     new_path = path + shape                               #|\n     for file in os.listdir(new_path):                     #|How can I make this code shorter?\n        files.append(os.path.join(new_path,file))          #|\n        result.append(shape)\n#You can run this to check the values\n#print(len(files))\n#print(files[1])\n#print(len(result))","5d03439a":"images = [] #list for images  \nfor file in files:\n    \n    img = mpimg.imread(file)\n    img = rgb2gray(img)\n    img = np.ravel(img)\n    images.append(img)\n    \n#print(len(images))\n#print(len(images[0]))\ndf = pd.DataFrame(images)   #converting our images list into Pandas DataFrame\n#a = np.array(images)\n#df.head()\n#df.shape\n#df.describe()","72a08fd3":"#We have to add one column of labels of the images i.e. result column\ndf.loc[:, 'result'] = result\n\ndf.tail()","c8d4787a":"temp_df = df\ntemp_df.head()\n\n#changing the result column data into numerical categories\ntemp_df.loc[:,'result'] = pd.factorize(temp_df.result)[0]\ntemp_df.head()","cc71d874":"z_train = Counter(temp_df['result'])\nz_train\n\nsns.countplot(temp_df['result'])","e76d55c3":"from sklearn.utils import shuffle\n\n#Now shuffling the rows in the dataframe\ndf = shuffle(temp_df)\ndf.head()\ndf.tail()","4067973e":"y = df.result\nX = df.drop(['result'],axis = 1)\nX = X.values.reshape(-1,28,28,1)","453880ea":"#applying one_hot encoding in the y\nfrom keras.utils.np_utils import to_categorical #convert to one_hot encoding\ny = to_categorical(y,num_classes = 3)\ny.astype('int32')","3ff87086":"from sklearn.model_selection import train_test_split  #for splitting our dataframe into training and test example\n#Now splitting our dataset in train and test \nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 0)\n\ny_test.astype('int32')","54c597d5":"from keras.models import Sequential\nfrom keras.layers import Dense, Flatten","97f63787":"model = Sequential()\nmodel.add()\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(3, activation='sigmoid'))\n\nmodel.summary()","815003c1":"#compile model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","544fda75":"#Train Model \nmodel.fit(X_train,y_train,batch_size=5,epochs=10)","9be90b5a":"z_train = Counter(y_train)\nz_train\nsns.countplot(y_train)","ae3aa043":"from sklearn import svm\nclf = svm.SVC(gamma = 'auto')\nclf.fit(X_train,y_train)","ffc9e44a":"prediction = clf.predict(X_test)","d9d8bc98":"from sklearn.metrics import accuracy_score\n\nscore = accuracy_score(y_test,prediction)\nprint(score)","c1102b7d":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\n\nclf.fit(X_train,y_train)","08118100":"prediction = clf.predict(X_test)\nscore = accuracy_score(y_test,prediction)\nprint(score)\n","1c98f72b":"from sklearn.neighbors.nearest_centroid import NearestCentroid\nclf = NearestCentroid()\n\nclf.fit(X_train,y_train)\n\nprediction = clf.predict(X_test)\n\nscore = accuracy_score(y_test,prediction)\nprint(score*100)","461b0f62":"**Now we need to shuffle our DataFrame so that we can split our dataset into two dataset One for training our model and other for testing our model**","ea89513a":"We see that our accuracy is 0.3 i.e. 30% which is very less. Now we have to improve our accuracy score","9ead040b":"**Image Processing Section**\n# Now we have three folders inside our shapes folder ['triangles','squares','circles']  \nwe will first try loading image from the triangles folder and try to convert it into a matrix of 28x28 matrix of pixels \nand then we will convert it into a vector\n\nIn the second step we will do this for all the folders and all the images","c82fc612":"**Using Nearest Neighbors algorithm**","6ef5f63c":"Now we will prepare our dataset for training \n\nWe see that we have only 3 results i.e. ['triangles','circles','squares'] \nwe can convert it into numerical categories [0,1,2]\n\n0 --> triangles\n1 ---> circles\n2 ---> squares","1014531f":"Now we have all the images in a list \nIn the below section we will process each image and try to save it our DataFrame\nWe will try to do the same for each image as we did it in the image processing section","cf7bc59f":"**Now we have prepared our dataset**\nNow we should start our main part i.e. Training our model \n**First we will use SVM from sklearn to train our model **","72c42d65":"In the below section we will store the path for all the images in a list so that we can iterate through it can process our images  and store the result in the pandas DataFrame data structure to get our training and test dataset","bc744d2e":"Now we use decision tree algorithm"}}