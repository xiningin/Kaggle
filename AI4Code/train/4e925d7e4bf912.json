{"cell_type":{"14771a7b":"code","63135013":"code","9c8bc265":"code","4b21567f":"code","c355f15e":"code","0b17fbcb":"code","e0867d46":"code","e3a6deb6":"code","37be3216":"code","c60242df":"code","e74cc749":"code","2b147497":"code","771cf22b":"code","15762f4c":"code","3d33a42f":"code","a782db4d":"code","c96872e3":"code","1fb8ef29":"code","0be6a592":"code","a124f7e2":"code","0fac1a39":"code","a7e65ad1":"code","86db0f5a":"code","01befdde":"code","0b6e1fc5":"code","9e90a4b2":"code","41fa8c72":"code","248b185d":"code","005edd5b":"code","cb579357":"code","15c16b50":"code","9202564a":"code","5b00e8bf":"code","a21940a4":"code","51aba3eb":"code","e3c4a2af":"code","433e41c2":"code","082e1370":"code","1d066868":"code","81f1b532":"code","3cb1b01e":"code","14bd39b9":"code","1d2b7bc2":"code","c62db10a":"code","26a19018":"code","cbdf570c":"code","05e76de3":"code","54e35786":"code","8972de9b":"code","6e9a63ba":"code","dd961c23":"code","2d02efdc":"code","8720fdd8":"code","4519b47f":"code","a4082e48":"code","01579876":"code","68a93717":"code","b0dbb461":"code","9efd8821":"code","ec10e23a":"code","bb4b9bdf":"code","e3e09c5d":"code","43a94a0c":"code","799e2c6a":"code","0d3ea9a1":"code","e42e50d2":"code","47ed7b2c":"code","9551e693":"code","773c26bf":"code","a7d047a0":"code","a2762876":"code","7074c87b":"code","45588e6b":"code","469073fd":"code","11b02a54":"code","a3a3f13c":"code","25fcd8bb":"code","36e49934":"code","1777702f":"code","64023364":"code","7204210b":"code","a011dec3":"code","d9646ab6":"markdown","64652a12":"markdown","ef518d24":"markdown","fe85fcfc":"markdown","d8ed6a49":"markdown","4691df53":"markdown","88425acd":"markdown","8c2523c6":"markdown","c59c1213":"markdown","e90d5b0c":"markdown","1995d69a":"markdown","c43a0282":"markdown","c7aa7ed9":"markdown","003524d3":"markdown","5f493e16":"markdown","05fcc2e6":"markdown","23b1bf55":"markdown","51ee8db3":"markdown","7439a384":"markdown","3a9d47bc":"markdown","1c5e1b33":"markdown","2bf6b928":"markdown","a193dced":"markdown","b4598490":"markdown","88f8d2b7":"markdown","15dcaae4":"markdown","866c67ce":"markdown","48cce79d":"markdown","b90ef97a":"markdown","1f6bf28e":"markdown"},"source":{"14771a7b":"from IPython.display import Image\nImage('..\/input\/TItanic_pic.jpg')","63135013":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt","9c8bc265":"train=pd.read_csv('..\/input\/train_1.csv')","4b21567f":"test=pd.read_csv('..\/input\/test _1.csv')","c355f15e":"test.head()","0b17fbcb":"train.head()","e0867d46":"print(test.shape)\nprint(train.shape)","e3a6deb6":"train.info()","37be3216":"test.info()","c60242df":"import matplotlib.pyplot as plt\nimport seaborn as sns ","e74cc749":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","2b147497":"bar_chart('Sex')","771cf22b":"bar_chart('Pclass')","15762f4c":"bar_chart('SibSp')","3d33a42f":"bar_chart('Parch')","a782db4d":"bar_chart('Embarked')","c96872e3":"#Finding the NaN char in the DataFrame\ntrain.isnull().sum()","1fb8ef29":"test.isnull().sum()","0be6a592":"#combining of two dataset i.e train and test ","a124f7e2":"train_test_data=[train,test]","0fac1a39":"#Cabin feature contain most NaN \n#so we drop the Cabin feature column \ntrain.drop('Cabin',axis=1,inplace=True)","a7e65ad1":"test.drop('Cabin',axis=1,inplace=True)","86db0f5a":"#extrating the Name string that ends with . into a column \"Title\"\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.',expand=False)","01befdde":"train.Title.value_counts()","0b6e1fc5":"#creating dictornary\ntitle_mapping={'Mr':0,'Miss':1,'Mrs':2,'Master':3,'Dr':3,'Rev':3,'Mlle':3,'Major':3,'Col':3,\"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3}\n\nfor dataset in train_test_data:\n    dataset['Title']=dataset['Title'].map(title_mapping)","9e90a4b2":"#missing value in Title feature\ntrain.Title.fillna(0,inplace=True)","41fa8c72":"test.Title.fillna(0,inplace=True)","248b185d":"# Lets Analysis the new feature i.e 'Title'\n\nbar_chart('Title')","005edd5b":"train.drop('Name',axis=1,inplace=True)\ntest.drop('Name',axis=1,inplace=True)","cb579357":"sex_mapping={'male': 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","15c16b50":"age_mean1=train.Age.mean()\nage_mean1","9202564a":"train.Age.fillna(age_mean1,inplace=True)","5b00e8bf":"age_mean2=test.Age.mean()","a21940a4":"test.Age.fillna(age_mean2,inplace=True)","51aba3eb":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 18, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 49), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 49, 'Age'] = 4","e3c4a2af":"train.Embarked.value_counts()","433e41c2":"# maximum value goes with \"S\"\n#so fill NaN value with \"S\" embark\ntrain.fillna('S',inplace=True)","082e1370":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","1d066868":"train['Fare'].groupby(train['Pclass']).mean()","81f1b532":"test['Fare'].groupby(test['Pclass']).mean()","3cb1b01e":"test.Fare.isnull().value_counts()","14bd39b9":"test[test.Fare.isnull()]","1d2b7bc2":"test.Fare.fillna(12,inplace=True)","c62db10a":"for dataset in train_test_data:\n    dataset.loc[dataset['Fare'] <=17,'Fare']=0\n    dataset.loc[(dataset['Fare'] >17) & (dataset['Fare'] <=30),'Fare']=1\n    dataset.loc[(dataset['Fare'] >30) & (dataset['Fare'] <=100),'Fare']=2\n    dataset.loc[dataset['Fare'] >100,'Fare' ]=3","26a19018":"test.isnull().sum()","cbdf570c":"train.isnull().sum()","05e76de3":"train.head()","54e35786":"test.head()","8972de9b":"train.SibSp.value_counts()","6e9a63ba":"train.Parch.value_counts()","dd961c23":"train.drop('Ticket',axis=1,inplace=True)","2d02efdc":"test.drop('Ticket',axis=1,inplace=True)","8720fdd8":"train.drop('PassengerId',axis=1,inplace=True)","4519b47f":"test.drop('PassengerId',axis=1,inplace=True)","a4082e48":"train_data=train.drop('Survived',axis=1,inplace=False)","01579876":"train_target=train.Survived","68a93717":"train.head()","b0dbb461":"train_data.head()","9efd8821":"test_1=pd.read_csv('..\/input\/test_s.csv')","ec10e23a":"test_1.drop('PassengerId',axis=1,inplace=True)","bb4b9bdf":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression ","e3e09c5d":"model1=KNeighborsClassifier(n_neighbors=7)","43a94a0c":"model1.fit(train_data,train_target)","799e2c6a":"predicted1=model1.predict(test)","0d3ea9a1":"score1=model1.score(test,test_1)","e42e50d2":"print (f'Accuracy Score :{score1}') ","47ed7b2c":"model2=DecisionTreeClassifier()","9551e693":"model2.fit(train_data,train_target)","773c26bf":"predicted2=model2.predict(test)","a7d047a0":"score2=model2.score(test,test_1)","a2762876":"print(f'Accuracy Score:{score2}')","7074c87b":"model3=RandomForestClassifier(n_estimators=100,max_depth=2,random_state=0)","45588e6b":"model3.fit(train_data,train_target)","469073fd":"predicted3=model3.predict(test)","11b02a54":"score3=model3.score(test,test_1)","a3a3f13c":"print(f'Accuracy Score:{score3}')","25fcd8bb":"model4=LogisticRegression()","36e49934":"model4.fit(train_data,train_target)","1777702f":"predicted=model4.predict(test)","64023364":"score4=model4.score(test,test_1)","7204210b":"print(f'Accuracy score:{score4}')","a011dec3":"print(f'KNeighborsClassifier :{score1*100} \\nDecisionTreeClassifier:{score2*100} \\nRandomForestClassifier:{score3*100}\\nLogisticRegression:{score4*100}') ","d9646ab6":"  Data Dictionary\n \n- Survived: 0 = No, 1 = Yes\n- pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n- sibsp: # of siblings \/ spouses aboard the Titanic\n- parch: # of parents \/ children aboard the Titanic\n- ticket: Ticket number\n- cabin: Cabin number\n- embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","64652a12":"## FINAL ACCURACY SCORE OF ALL MODEL:","ef518d24":".","fe85fcfc":"-On Working of Tatanic Dataset for prediction of survival we first have to build up the dataset using the Data Science Tools and then importing the Machine Learning Model for implimenting the dataset into it and predicting out the survival. ","d8ed6a49":"First feature we will work on is 'Name'","4691df53":"- Cabin Feature","88425acd":"- The Chart confirms a person aboarded without siblings or spouse more likely dead","8c2523c6":"- Classifying the Age feature \n  - child(0-18):    0\n  - young(18-26):   1\n  - adult(26-36):   2\n  - mid-age(36-49): 3\n  - senior(49-*):   4  ","c59c1213":"# TITANIC DATA SET \u2693","e90d5b0c":"- Delete unnecessary feature from dataset","1995d69a":"- KNeighborsClassifier","c43a0282":"- Sorting of Name Feature Complexity","c7aa7ed9":"* Importing the Data \n* Analysis of Data \n* Feature Engineering \n* Modeling\n* Testing \n","003524d3":"- Embarked \n  - Embarked missing values in train dataset","5f493e16":"- Most of the number of dead was from 3rd Class of deck.\n- Most number of survived was from 1st Class of deck.","05fcc2e6":" Prediction model of survival on the Titanic","23b1bf55":"- DecisionTreeClassifier","51ee8db3":"# 3.MODELLING\n \n - KNeighborsClassifier\n - Logistic Regression\n - Decision Tree\n - Random Forest","7439a384":"IMPORT DATA SET","3a9d47bc":"If we analysis the above info we see Null value is present in some columns ","1c5e1b33":"- If we see the title column we came up with lot many vairable, so on futher reduction of complexity we can map Tile element:\n - Mr:     0\n - Miss:   1\n - Mrs:    2\n - Others: 3   ","2bf6b928":"# 1.Importing of DataSet","a193dced":"# 2.Data Analysis ","b4598490":"- RandomForestClassifier","88f8d2b7":"- 'Age' Feature\n  - Age contain missing value which we can fill with its mean value","15dcaae4":"- 'Sex' Feature ","866c67ce":"- More Number of Male was dead.\n- More Number of Female has survived.","48cce79d":"- RandomForestClassifier","b90ef97a":"DATA IS CLEAN NOW ","1f6bf28e":"# 3. Feature Engineering "}}