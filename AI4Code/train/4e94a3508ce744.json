{"cell_type":{"b984dbaa":"code","24441ce8":"code","00693b27":"code","43153779":"code","f33d34b2":"code","c3e86e37":"code","c1267c0c":"code","f5d5bc70":"code","f966e846":"code","629f5c52":"code","c13057ad":"code","8a1ae80c":"code","208610b3":"code","8f4f5584":"code","8298b36f":"code","e31a2ade":"code","d9c859ef":"code","c3ee4a1e":"code","a8d25273":"code","43dc175b":"code","8010fbd1":"code","b186b3c9":"code","e6bf57cd":"code","9f469f0a":"code","6e6e9f99":"code","1d8f944c":"code","6d4dfac7":"code","b0d118fe":"code","9f607ab1":"code","4ef0b693":"code","3c0610fa":"code","32a7ee53":"code","afa22af8":"code","2c0d6db9":"code","149b3d56":"code","ce1e4887":"code","cb0c7739":"code","54d0585b":"code","47a22f07":"markdown","095bc224":"markdown","cc8f6f52":"markdown","9d2de284":"markdown","6077edf1":"markdown","6cfd98bc":"markdown","a02c02de":"markdown","64af05db":"markdown","35d73d31":"markdown","c132443b":"markdown","bf72e615":"markdown","e1f77fa3":"markdown","e87dd8df":"markdown","a9cf8426":"markdown","455f7c7f":"markdown","6f93c439":"markdown","afa8f894":"markdown","b715bbff":"markdown","8f24bd4d":"markdown","aed84635":"markdown","f6e1b42d":"markdown","17daa6d1":"markdown","8149f2bd":"markdown","2f806591":"markdown","33a3847c":"markdown","9c45dda1":"markdown","df116f3a":"markdown"},"source":{"b984dbaa":"!pip install cufflinks","24441ce8":"!pip install chart_studio","00693b27":"!pip install plotly","43153779":"import numpy as np\nimport pandas as pd\nfrom pandas_profiling import ProfileReport\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"darkgrid\")\n\nfrom collections import Counter\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import label_binarize\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.multiclass import OneVsRestClassifier\n\nfrom lightgbm import LGBMClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport chart_studio.plotly as py\nimport cufflinks as cf\n\nimport plotly.express as px\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline();\n\nimport plotly.graph_objs as go\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f33d34b2":"df = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndf.head(10)","c3e86e37":"df.info()","c1267c0c":" df.profile_report()","f5d5bc70":"desc = df.describe().T\ndf1 = pd.DataFrame(index=['battery_power', 'blue', 'clock_speed', 'dual_sim',\n                          'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', \n                          'n_cores', 'pc', 'px_height', 'px_width', 'ram', \n                          'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen',\n                          'wifi', 'price_range'], \n                   columns= [\"count\",\"mean\",\"std\",\"min\",\n                             \"25%\",\"50%\",\"75%\",\"max\"], data= desc )\n\nf,ax = plt.subplots(figsize=(12,12))\n\nsns.heatmap(df1, annot=True,cmap = \"Blues\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 16})\n\nplt.xticks(size = 18)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"Variables\")\nplt.title(\"Descriptive Statistics\", size = 16)\nplt.show()","f966e846":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace1 =go.Scatter(\n                    y = df_pr_0.battery_power,\n                    x = df_pr_0.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: 0\",\n                    marker = dict(color = 'rgba(240, 136, 200, 0.8)'),\n                    text= df_pr_0.price_range)\n\ntrace2 =go.Scatter(\n                    y = df_pr_1.battery_power,\n                    x = df_pr_1.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: 1\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df_pr_1.price_range)\n\ntrace3 =go.Scatter(\n                    y = df_pr_2.battery_power,\n                    x = df_pr_2.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: 2\",\n                    marker = dict(color = 'rgba(0, 240, 170, 0.8)'),\n                    text= df_pr_2.price_range)\n\ntrace4 =go.Scatter(\n                    y = df_pr_3.battery_power,\n                    x = df_pr_3.ram,\n                    mode = \"markers\",\n                    name = \"Price Range: 3\",\n                    marker = dict(color = 'rgba(50, 70, 190, 0.8)'),\n                    text= df_pr_3.price_range) \n\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = dict(title = 'Ram - Battery Power - Price Range',\n              xaxis= dict(title= 'Ram',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Battery Power',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450,)\nfig = dict(data = data, layout = layout)\n    \niplot(fig)","629f5c52":"values_3g = df[\"three_g\"].value_counts()\nvalues_4g = df[\"four_g\"].value_counts()\n\nlabels4g = [\"4G-supported\",'Not supported']\nlabels3g = [\"3G-supported\",'Not supported']\n\ncolors = [\"violet\", \"cornflowerblue\"]\n\nfig = plt.figure(figsize=(10,10))\nax1 = plt.subplot2grid((2,2),(0,0))\nplt.pie(x= values_3g, autopct=\"%.2f%%\",\n        labels=labels3g, pctdistance=0.6,\n        colors = colors)\nplt.title('3G', size = 14)\n\nax1 = plt.subplot2grid((2,2), (0, 1))\nplt.pie(x =values_4g,autopct=\"%.2f%%\", \n        labels=labels4g, pctdistance=0.6, \n        colors = colors)\nplt.title('4G', size = 14)\nplt.show()","c13057ad":"price_range = df[\"price_range\"].value_counts()\n\nfig = px.bar(price_range, y = 'price_range', text = 'price_range',\n             \n                    color = [\"Price Range: 0\",\"Price Range: 1\",\n                            \"Price Range: 2\",\"Price Range: 3\"])\n                    \n\nfig.update_layout(title = \"Price Range\", showlegend = False,\n                 xaxis = dict(zeroline = False, tickmode = 'linear', tick0 = 0, dtick = 1 ),\n                 autosize=False,\n                 width=700,\n                 height=450,\n                 xaxis_title_text = 'Price Range',\n                 yaxis_title_text = 'Frequency')\n                          \nfig.show()","8a1ae80c":"n_cores = df[\"n_cores\"].value_counts()\n\nfig = px.bar(n_cores, y = 'n_cores', text = 'n_cores',\n             \n                    color = [\"4\",\"7\",\"8\",\"2\",\"3\",\"5\",\"1\",\"6\"])\n                    \nfig.update_layout(title = \"N Cores\", showlegend = False,\n                 xaxis = dict(zeroline = False, tickmode = 'linear', tick0 = 0, dtick = 1 ),\n                 autosize=False,\n                 width=700,\n                 height=450,\n                 xaxis_title_text = 'N Cores',\n                 yaxis_title_text = 'Frequency')\n\nfig.show()","208610b3":"fig = px.pie(df['blue'].value_counts().reset_index(), values = 'blue',\n             names = ['No', 'Yes'])\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.6, \n                  marker = dict(colors = ['#C2A7B5','#DE1A82'],\n                                line = dict(color = 'white', width = 3)))\n\nfig.update_layout(annotations = [dict(text = 'Bluetooth', \n                                      x = 0.5, y = 0.5,\n                                      font_size = 24, showarrow = False, \n                                      font_family = 'Verdana',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","8f4f5584":"fig = px.pie(df['dual_sim'].value_counts().reset_index(), values = 'dual_sim',\n             names = ['Yes', 'No'])\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.6, \n                  marker = dict(colors = ['#229CE2','#7CAFCC'],\n                                line = dict(color = 'white', width = 3)))\n\nfig.update_layout(annotations = [dict(text = 'Dual Sim', \n                                      x = 0.5, y = 0.5,\n                                      font_size = 24, showarrow = False, \n                                      font_family = 'Verdana',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","8298b36f":"fig = px.pie(df['wifi'].value_counts().reset_index(), values = 'wifi',\n             names = ['Yes', 'No'])\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.6, \n                  marker = dict(colors = ['#41EF13','#57A742'],\n                                line = dict(color = 'white', width = 3)))\n\nfig.update_layout(annotations = [dict(text = 'Wifi', \n                                      x = 0.5, y = 0.5,\n                                      font_size = 24, showarrow = False, \n                                      font_family = 'Verdana',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","e31a2ade":"fig = px.histogram(df,x = 'ram',\n                  title = 'Ram',\n                   marginal = 'violin',\n                  color_discrete_sequence = ['royalblue'])\nfig.update_layout(\nxaxis_title_text = 'Ram',\nyaxis_title_text = 'Frequency',\nbargap = 0.2, showlegend = False,\n             autosize=False,\n             width=700,\n             height=450)\n\niplot(fig)","d9c859ef":"fig = px.histogram(df,x = 'battery_power',\n                  title = 'Battery Power',\n                   marginal = 'violin',\n                  color_discrete_sequence = ['firebrick'])\nfig.update_layout(\nxaxis_title_text = 'Battery Power',\nyaxis_title_text = 'Frequency',\nbargap = 0.2, showlegend = False,\n             autosize=False,\n             width=700,\n             height=450)\n\niplot(fig)","c3ee4a1e":"fig = px.histogram(df,x = 'int_memory',\n                  title = 'Int Memory',\n                   marginal = 'violin',\n                  color_discrete_sequence = ['green'])\nfig.update_layout(\nxaxis_title_text = 'Int Memory',\nyaxis_title_text = 'Frequency',\nbargap = 0.2, showlegend = False,\n             autosize=False,\n             width=700,\n             height=450)\n\niplot(fig)","a8d25273":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace0 = go.Box(\n    y=df_pr_0.ram,\n    name = 'Price Range: 0',\n    marker = dict(\n        color = 'rgb(223, 240, 0)',\n    )\n)\ntrace1 = go.Box(\n    y=df_pr_1.ram,\n    name = 'Price Range: 1',\n    marker = dict(\n        color = 'rgb(10, 110, 220)',\n    )\n)\ntrace2 = go.Box(\n    y=df_pr_2.ram,\n    name = 'Price Range: 2',\n    marker = dict(\n        color = 'rgb(242, 54, 14)',\n    )\n)\ntrace3 = go.Box(\n    y=df_pr_3.ram,\n    name = 'Price Range: 3',\n    marker = dict(\n        color = 'rgb(60, 200, 135)',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nlayout = dict(title = 'Ram - Price Range',\n              xaxis= dict(title= 'Price Range',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Ram',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450)\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","43dc175b":"df_pr_0 = df[df.price_range == 0]\ndf_pr_1 = df[df.price_range == 1]\ndf_pr_2 = df[df.price_range == 2]\ndf_pr_3 = df[df.price_range == 3]\n\ntrace0 = go.Box(\n    y=df_pr_0.battery_power,\n    name = 'Price Range: 0',\n    marker = dict(\n        color = 'rgb(223, 240, 0)',\n    )\n)\ntrace1 = go.Box(\n    y=df_pr_1.battery_power,\n    name = 'Price Range: 1',\n    marker = dict(\n        color = 'rgb(10, 110, 220)',\n    )\n)\ntrace2 = go.Box(\n    y=df_pr_2.battery_power,\n    name = 'Price Range: 2',\n    marker = dict(\n        color = 'rgb(242, 54, 14)',\n    )\n)\ntrace3 = go.Box(\n    y=df_pr_3.battery_power,\n    name = 'Price Range: 3',\n    marker = dict(\n        color = 'rgb(60, 200, 135)',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3]\n\nlayout = dict(title = 'Battery Power - Price Range',\n              xaxis= dict(title= 'Price Range',\n                          ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Battery Power',\n                          ticklen= 5,zeroline= False),\n             autosize=False,\n             width=700,\n             height=450)\n\nfig = dict(data = data, layout = layout)\n\niplot(fig)","8010fbd1":"fig = px.histogram(df, x = 'px_height',\n                   color = 'price_range',\n                   title = \"Phone Height - Price Range\")\nfig.update_layout(\nxaxis_title_text = 'px_height',\nyaxis_title_text = 'Frequency',autosize=False,\n    width=700,\n    height=450)\nfig","b186b3c9":"fig = px.histogram(df, x = 'px_width', \n                   color = 'price_range', \n                   title = \"Phone Width - Price Range\")\nfig.update_layout(\nxaxis_title_text = 'px_width',\nyaxis_title_text = 'Frequency',autosize=False,\n    width=700,\n    height=450)\nfig","e6bf57cd":"matrix = np.triu(df.corr())\nsns.set_style(\"white\")\nf,ax=plt.subplots(figsize = (16,16))\nsns.heatmap(df.corr(),annot= True,fmt = \".2f\",ax=ax,\n            vmin = -1,\n            vmax = 1, mask = matrix,cmap = \"coolwarm\",\n            linewidth = 0.2,linecolor = \"white\")\nplt.xticks(rotation=70)\nplt.yticks(rotation=0)\nplt.title('Correlation Map', size = 14)\nplt.show()","9f469f0a":"corr_matrix = df.corr()\n\nthreshold = 0.20\nfilter = np.abs(corr_matrix[\"price_range\"])>threshold\ncorr_features = corr_matrix.columns[filter].tolist()\n\nf,ax=plt.subplots(figsize = (6,6))\nsns.heatmap(df[corr_features].corr(),annot= True,fmt = \".2f\",\n            vmin = -1,vmax = 1,ax=ax,annot_kws={\"size\": 16},cmap = \"coolwarm\")\nplt.xticks(rotation=45, size = 14)\nplt.yticks(rotation=0, size = 14)\nplt.title('Correlation btw Features', size = 14)\nplt.show()","6e6e9f99":"random_state = 42\n\nX = df.iloc[:,0:20].values\ny = df.iloc[:, 20].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = random_state)","1d8f944c":"sc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","6d4dfac7":"classifier = LogisticRegression(random_state = random_state)\n\nclassifier.fit(X_train,y_train)\n\ny_pred = classifier.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","b0d118fe":"cm = confusion_matrix(y_test, y_pred)\n\ndf1 = pd.DataFrame(columns=[\"0\",\"1\",\"2\",\"3\"], index= [\"0\",\"1\",\"2\",\"3\"], data= cm )\n\nf,ax = plt.subplots(figsize=(6,6))\n\nsns.heatmap(df1, annot=True,cmap=\"Greens\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,annot_kws={\"size\": 16})\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 12)\nplt.show()","9f607ab1":"sns.set_style(\"darkgrid\")\naccuracy = []\nfor i in range(1,4):\n    lda = LDA(n_components = i)\n\n    X_train_lda = lda.fit_transform(X_train,y_train)\n    X_test_lda = lda.transform(X_test)\n\n    classifier_lda = LogisticRegression()\n    classifier_lda.fit(X_train_lda, y_train)\n\n    y_pred_lda = classifier_lda.predict(X_test_lda)\n\n    accuracy.append(accuracy_score(y_test, y_pred_lda))\n\nplt.figure(figsize = (6,4))\nplt.plot([1,2,3], accuracy)\nplt.xticks([1,2,3])\nplt.yticks([0.90,0.91,0.92,0.93,0.94,0.95,\n            0.96,0.97,0.98,0.99,1])\nplt.xlabel(\"Components\", size = 12)\nplt.ylabel(\"Accuracy\", size = 12)\nplt.show()","4ef0b693":"lda = LDA(n_components = 3)\n\nX_train_lda = lda.fit_transform(X_train,y_train)\nX_test_lda = lda.transform(X_test)\n\nclassifier_lda = LogisticRegression(random_state = random_state)\nclassifier_lda.fit(X_train_lda, y_train)\n\ny_pred_lda = classifier_lda.predict(X_test_lda)\n\nprint(classification_report(y_test, y_pred_lda))","3c0610fa":"cm = confusion_matrix(y_test, y_pred_lda)\n\ndf1 = pd.DataFrame(columns=[\"0\",\"1\",\"2\",\"3\"], index= [\"0\",\"1\",\"2\",\"3\"], data= cm )\n\nf,ax = plt.subplots(figsize=(6,6))\n\nsns.heatmap(df1, annot=True,cmap=\"Greens\", fmt= '.0f',ax=ax,\n            linewidths = 5, cbar = False,annot_kws={\"size\": 16})\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 12)\nplt.show()","32a7ee53":"classifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state, probability = True),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier(),\n             SGDClassifier(random_state = random_state),\n             GradientBoostingClassifier(random_state = random_state),\n             LGBMClassifier(random_state = random_state)]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [0.1, 1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-4, 4, 20),\n                    \"penalty\": [\"l1\",\"l2\",\"none\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(2,20,12, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\",\"minkowski\"],\n                 \"leaf_size\": [1,3,5,12,30]}\n\nsgdc_param_grid = {\n    \"loss\" : [\"hinge\", \"log\", \"squared_hinge\", \"modified_huber\"],\n    \"alpha\" : [0.0001, 0.001, 0.01, 0.1],\n    \"penalty\" : [\"l2\", \"l1\", \"none\"]}\n\ngbc_param_grid = {\n    \"learning_rate\": [0.05, 0.1, 0.2],\n    \"min_samples_split\": [2,3,10],\n    \"min_samples_leaf\": [1,3,10]\n    }\n\n\nlgbmc_param_grid = {\n    'num_leaves': [31, 127],\n    'reg_alpha': [0.1, 0.5],\n    'min_data_in_leaf': [30, 50, 100, 300],\n    'lambda_l1': [0, 1, 1.5],\n    'lambda_l2': [0, 1]}\n\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid,\n                   sgdc_param_grid,\n                   gbc_param_grid,\n                   lgbmc_param_grid]\n\ncv_result = []\nbest_estimators = []\nmean_squared_errors = []\nroc_auc_scores = []\nrecall_scores = []\nprecision_scores = []\nf1_scores = []\n\n\nfor i in range(len(classifier)):\n    print(\"---------------------------------------------------------------------------\")\n    clf = GridSearchCV(classifier[i],\n                       param_grid=classifier_param[i],\n                       cv = StratifiedKFold(n_splits = 10),\n                       scoring = \"accuracy\",\n                       n_jobs = -1,verbose = 2)\n    \n    clf.fit(X_train,y_train)\n    \n    cv_result.append(clf.best_score_)\n    \n    mean_squared_errors.append(mean_squared_error(y_test,clf.predict(X_test)))\n    \n    roc_auc_scores.append(roc_auc_score(y_test, clf.predict_proba(X_test), multi_class='ovr'))\n    \n    recall_scores.append(recall_score(y_test, clf.predict(X_test), average='weighted'))\n    \n    precision_scores.append(precision_score(y_test, clf.predict(X_test), average='weighted'))\n    \n    f1_scores.append(f1_score(y_test, clf.predict(X_test), average='weighted'))\n    \n    best_estimators.append(clf.best_estimator_)\n    \n    print(\"Model: {}\".format(classifier[i]))\n    print(\"Accuracy: %{}\".format(round(cv_result[i]*100,2)))\n    print(\"MSE: {}\".format(mean_squared_errors[i]))\n    print(\"ROC AUC: {}\".format(roc_auc_scores[i]))\n    print(\"Recall: {}\".format(recall_scores[i]))\n    print(\"Precision: {}\".format(precision_scores[i]))\n    print(\"F1-Score: {}\".format(f1_scores[i]))\n    print(\"Best Estimator: {}\".format(clf.best_estimator_))\n    \nprint(\"---------------------------------------------------------------------------\")\n\nsns.set_style(\"darkgrid\")\ncv_results = pd.DataFrame({\"Accuracy\":cv_result,\n                           \"MSE\":mean_squared_errors,\n                           \"ROC AUC\":roc_auc_scores,\n                           \"Recall\": recall_scores,\n                           \"Precision\": precision_scores,\n                           \"F1-Score\":f1_scores,\n                           \"Models\":[\"DecisionTreeClassifier\", \n                                     \"SVC\",\n                                     \"RandomForestClassifier\",\n                                     \"LogisticRegression\",\n                                     \"KNeighborsClassifier\",\n                                     \"SGDClassifier\",\n                                     \"GBClassifier\",\n                                     \"LGBMClassifier\"]})\n\ncv_results.index = cv_results[\"Models\"]\n\ncv_results  = cv_results.drop([\"Models\"], axis = 1)\n\nf,ax = plt.subplots(figsize=(14,10))\n\nsns.heatmap(cv_results, annot=True,cmap = \"Blues\",fmt= '.3f',\n            ax=ax,linewidths = 5, cbar = False,\n            annot_kws={\"size\": 18})\n\nplt.xticks(size = 18)\nplt.yticks(size = 18, rotation = 0)\nplt.ylabel(\"Models\")\nplt.title(\"Grid Search Results\", size = 16)\nplt.show()","afa22af8":"sns.set_style(\"darkgrid\")\ncv_results = pd.DataFrame({\"Cross Validation Means\":cv_result,\n                           \"Models\":[\"DecisionTreeClassifier\", \"SVC\",\n                                     \"RandomForestClassifier\",\n                                     \"LogisticRegression\",\n                                     \"KNeighborsClassifier\",\n                                     \"SGDClassifier\",\n                                     \"GBClassifier\",\n                                     \"LGBMClassifier\"]})\n\nplt.figure(figsize = (10,6))\nsns.barplot(\"Cross Validation Means\", \"Models\",\n            data = cv_results, palette = \"Set1\")\nplt.xlabel(\"Mean Accuracy\",\n           size = 12)\nplt.yticks(size = 14)\nplt.title(\"Cross Validation Scores\",\n          size = 12)\nplt.show()","2c0d6db9":"votingC = VotingClassifier(estimators = [(\"svc\",best_estimators[1]),\n                                        (\"lr\",best_estimators[3]),\n                                        (\"lgbm\",best_estimators[7])])\n\nvotingC = votingC.fit(X_train, y_train)\n\nvoting_pred = votingC.predict(X_test)\n\nprint(classification_report(y_test, voting_pred))","149b3d56":"cm = confusion_matrix(y_test, voting_pred)\n\ndf1 = pd.DataFrame(columns=[\"0\",\"1\",\"2\",\"3\"], index= [\"0\",\"1\",\"2\",\"3\"], data= cm )\n\nf,ax = plt.subplots(figsize=(6,6))\n\nsns.heatmap(df1, annot=True,cmap=\"Greens\", fmt= '.0f',\n            ax=ax,linewidths = 5, cbar = False,annot_kws={\"size\": 16})\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 12)\nplt.show()","ce1e4887":"classifier = LogisticRegression(C=545.5594781168514, random_state=42)\n\nclassifier.fit(X_train,y_train)\n\ny_pred = classifier.predict(X_test)\n\nprint(classification_report(y_test, y_pred))","cb0c7739":"cm = confusion_matrix(y_test, y_pred)\n\ndf1 = pd.DataFrame(columns=[\"0\",\"1\",\"2\",\"3\"], index= [\"0\",\"1\",\"2\",\"3\"], data= cm )\n\nf,ax = plt.subplots(figsize=(6,6))\n\nsns.heatmap(df1, annot=True,cmap=\"Greens\", fmt= '.0f',ax=ax,\n            linewidths = 5, cbar = False,annot_kws={\"size\": 16})\nplt.xlabel(\"Predicted Label\")\nplt.xticks(size = 12)\nplt.yticks(size = 12, rotation = 0)\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\", size = 12)\nplt.show()","54d0585b":"X = df.iloc[:,0:20].values\ny = df.iloc[:, 20].values\n\ny = label_binarize(y, classes=[0,1,2,3])\nn_classes = 4\n\nX_train, X_test, y_train, y_test =\\\n    train_test_split(X, y, test_size=0.2, random_state=42)\n\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\nclf = OneVsRestClassifier(best_estimators[3])\ny_score = clf.fit(X_train, y_train).decision_function(X_test)\n\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(n_classes):\n    fpr[i], tpr[i], _ = roc_curve(y_test[:, i],\n                                  y_score[:, i])\n    roc_auc[i] = auc(fpr[i],\n                     tpr[i])\n\nfor i in range(n_classes):\n    plt.figure(figsize = (6,6))\n    plt.plot(fpr[i], tpr[i], label='ROC curve (area = %0.2f)' % roc_auc[i])\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title(i)\n    plt.legend(loc=\"lower right\")\n    plt.show()","47a22f07":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nRam","095bc224":"<a id = \"12\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nThresholded Correlation Map","cc8f6f52":"<a id = \"18\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nLinear Discriminant Analysis","9d2de284":"\n\n<div style=\"color:white;\n           display:fill;\n           border-radius:18px;\n           background-color:#337AB7;\n           font-size:140%;\n           font-family:Verdana;\n           letter-spacing:0.2px\">\n\n<p style=\"padding: 8px;\n              color:White;\n          text-align: center;\n          font-size:140%;\">\n\ud83d\udcf1\ud83c\udff7\ufe0f Mobile Price Prediction \ud83c\udff7\ufe0f\ud83d\udcf1\n\n<\/p>\n<\/div>  \n<img src= \"https:\/\/media.giphy.com\/media\/l2Je009VFaSbLJQiI\/giphy.gif\">\n\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p><\/p><div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Notebook Content<\/h3>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" target=\"_self\">Libraries and Utilities<span class=\"badge badge-primary badge-pill\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"messages\" target=\"_self\">Load and Check Data<span class=\"badge badge-primary badge-pill\">2<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" target=\"_self\">Descriptive Statistics<span class=\"badge badge-primary badge-pill\">3<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#4\" role=\"tab\" aria-controls=\"settings\" target=\"_self\">Data Analysis<span class=\"badge badge-primary badge-pill\">4<\/span><\/a> \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#13\" role=\"tab\" aria-controls=\"settings\" target=\"_self\">Preprocessing<span class=\"badge badge-primary badge-pill\">5<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#16\" role=\"tab\" aria-controls=\"settings\" target=\"_self\">Models<span class=\"badge badge-primary badge-pill\">6<\/span><\/a>\n\n\n<\/div>\n<\/div>\n<\/div>","6077edf1":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nDual Sim","6cfd98bc":"<a id = \"19\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nHyperparameter Tuning - Grid Search - Cross Validation\n    \nWe will compare 8 classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n- Decision Tree Classifier\n- SVC\n- Random Forest Classifier\n- Logistic Regression\n- KNN Classifier\n- Stochastic Gradient Descent Classifier\n- Gradient Boosting Classifier\n- LightGBM Classifier","a02c02de":"<a id = \"13\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nPreprocessing\n    \n<a id = \"14\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nTrain Test Split","64af05db":"<a id = \"11\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nCorrelation Map","35d73d31":"<a id = \"6\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nPhone Height - Price Range","c132443b":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nInt Memory","bf72e615":"<a id = \"20\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nEnsemble Learning","e1f77fa3":"<a id = \"15\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nStandardization","e87dd8df":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nBattery Power","a9cf8426":"<a id = \"7\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nPhone Width - Price Range","455f7c7f":"<a id = \"21\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nBest Estimator","6f93c439":"<a id = \"1\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nLibraries and Utilities","afa8f894":"<a id = \"4\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nData Analysis\n    \n<a id = \"5\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nRam - Battery Power - Price Range","b715bbff":"<a id = \"22\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nN Cores","8f24bd4d":"<a id = \"3\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nDescriptive Statistics","aed84635":"<a id = \"10\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\n3G - 4G","f6e1b42d":"<a id = \"2\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nLoad and Check Data","17daa6d1":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nPrice Range","8149f2bd":"<a id = \"8\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nBattery Power - Price Range","2f806591":"<a id = \"9\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nRam - Price Range","33a3847c":"<span style=\"color:#337AB7;\n             font-size:180%;\">\nWifi","9c45dda1":"<a id = \"23\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nBluetooth","df116f3a":"<a id = \"16\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:200%;\">\nModels\n    \n<a id = \"17\"><\/a>\n<span style=\"color:#337AB7;\n             font-size:180%;\">\nLogistic Regression"}}