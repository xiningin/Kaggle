{"cell_type":{"4543526f":"code","15adb213":"code","160cfd86":"code","042b8a6a":"code","8a55637f":"code","140e37ca":"code","fbfb2699":"code","d475ac13":"code","c788b4dd":"code","c866ba2a":"code","98e09d27":"code","7ae50540":"code","842c99e9":"code","73bfd6cb":"code","f1bd4b5b":"code","594e8d5b":"code","5b8628aa":"code","1bc65fa7":"code","128a4385":"markdown","3d168844":"markdown"},"source":{"4543526f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nfrom typing import Tuple","15adb213":"# main flow\nstart_time = dt.datetime.now()\nprint(\"Started at \", start_time)","160cfd86":"%%time\ntrainfile = '\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv'\ntestfile = '\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv'\nsubfile = '\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv'\n\ntrain = pd.read_csv(trainfile)\ntest = pd.read_csv(testfile)\nsub = pd.read_csv(subfile)\nprint(train.shape, test.shape)\ntrain.head()","042b8a6a":"%%time\ntarget = 'Cover_Type'\nprint('rows dropped = ', train[((train[target] == 4) | (train[target] == 5))].shape)\ntrain = train[~((train[target] == 4) | (train[target] == 5))]\nprint(train.shape)","8a55637f":"%%time\n# additional Feature Engineering (FE)\n\n# remove useless features\nzero_variance_features = [ 'Soil_Type7', 'Soil_Type15', 'Id']\n\ntrain = train.drop(zero_variance_features, axis=1)\ntest = test.drop(zero_variance_features, axis=1)\n\n# extra feature engineering\ndef r(x):\n    if x+180>360:\n        return x-180\n    else:\n        return x+180\n\ndef fe(df):\n    \n    features_Hillshade = ['Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm']\n    \n    df['EHiElv'] = df['Horizontal_Distance_To_Roadways'] * df['Elevation']\n    df['EViElv'] = df['Vertical_Distance_To_Hydrology'] * df['Elevation']\n    df['Aspect2'] = df.Aspect.map(r)\n    ### source: https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/293373\n    df[\"Aspect\"][df[\"Aspect\"] < 0] += 360\n    df[\"Aspect\"][df[\"Aspect\"] > 359] -= 360\n    df.loc[df[\"Hillshade_9am\"] < 0, \"Hillshade_9am\"] = 0\n    df.loc[df[\"Hillshade_Noon\"] < 0, \"Hillshade_Noon\"] = 0\n    df.loc[df[\"Hillshade_3pm\"] < 0, \"Hillshade_3pm\"] = 0\n    df.loc[df[\"Hillshade_9am\"] > 255, \"Hillshade_9am\"] = 255\n    df.loc[df[\"Hillshade_Noon\"] > 255, \"Hillshade_Noon\"] = 255\n    df.loc[df[\"Hillshade_3pm\"] > 255, \"Hillshade_3pm\"] = 255\n    ########\n    df['Highwater'] = (df.Vertical_Distance_To_Hydrology < 0).astype(int)\n    df['EVDtH'] = df.Elevation - df.Vertical_Distance_To_Hydrology\n    df['EHDtH'] = (df.Elevation - df.Horizontal_Distance_To_Hydrology * 0.2).astype(int)\n    df['Euclidean_Distance_to_Hydrolody'] = ((df['Horizontal_Distance_To_Hydrology']**2 + df['Vertical_Distance_To_Hydrology']**2)**0.5).astype(int)\n    df['Manhattan_Distance_to_Hydrolody'] = df['Horizontal_Distance_To_Hydrology'] + df['Vertical_Distance_To_Hydrology']\n    df['Hydro_Fire_1'] = df['Horizontal_Distance_To_Hydrology'] + df['Horizontal_Distance_To_Fire_Points']\n    df['Hydro_Fire_2'] = abs(df['Horizontal_Distance_To_Hydrology'] - df['Horizontal_Distance_To_Fire_Points'])\n    df['Hydro_Road_1'] = abs(df['Horizontal_Distance_To_Hydrology'] + df['Horizontal_Distance_To_Roadways'])\n    df['Hydro_Road_2'] = abs(df['Horizontal_Distance_To_Hydrology'] - df['Horizontal_Distance_To_Roadways'])\n    df['Fire_Road_1'] = abs(df['Horizontal_Distance_To_Fire_Points'] + df['Horizontal_Distance_To_Roadways'])\n    df['Fire_Road_2'] = abs(df['Horizontal_Distance_To_Fire_Points'] - df['Horizontal_Distance_To_Roadways'])\n    df['Hillshade_3pm_is_zero'] = (df.Hillshade_3pm == 0).astype(int)\n    \n    df[\"Hillshade_mean\"] = df[features_Hillshade].mean(axis=1).astype(int)\n    df['amp_Hillshade'] = df[features_Hillshade].max(axis=1) - df[features_Hillshade].min(axis=1).astype(int)\n    return df\n\ntrain = fe(train)\ntest = fe(test)\n\n# Summed features pointed out by @craigmthomas (https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/292823)\nsoil_features = [x for x in train.columns if x.startswith(\"Soil_Type\")]\nwilderness_features = [x for x in train.columns if x.startswith(\"Wilderness_Area\")]\n\ntrain[\"soil_type_count\"] = train[soil_features].sum(axis=1)\ntest[\"soil_type_count\"] = test[soil_features].sum(axis=1)\n\ntrain[\"wilderness_area_count\"] = train[wilderness_features].sum(axis=1)\ntest[\"wilderness_area_count\"] = test[wilderness_features].sum(axis=1)","140e37ca":"%%time\n# subset of useful features, as per https:\/\/www.kaggle.com\/gvyshnya\/eli5-perm-fi-with-additional-fe-dec-21-tpc\npi_features = ['Elevation',\n 'EVDtH',\n 'EHDtH',\n 'soil_type_count',\n 'Wilderness_Area3',\n 'Wilderness_Area1',\n 'Soil_Type39',\n 'EHiElv',\n 'Soil_Type38',\n 'Horizontal_Distance_To_Roadways',\n 'Wilderness_Area4',\n 'Soil_Type40',\n 'Fire_Road_1',\n 'Hydro_Fire_2',\n 'Horizontal_Distance_To_Fire_Points',\n 'Fire_Road_2',\n 'Soil_Type2',\n 'Hydro_Fire_1',\n 'Soil_Type4',\n 'Soil_Type22',\n 'Soil_Type10',\n 'Hydro_Road_1',\n 'Hydro_Road_2',\n 'Soil_Type35',\n 'Soil_Type37',\n 'Soil_Type3',\n 'Soil_Type23',\n 'Manhattan_Distance_to_Hydrolody',\n 'Soil_Type36',\n 'Soil_Type33',\n 'wilderness_area_count',\n 'Euclidean_Distance_to_Hydrolody',\n 'Soil_Type1',\n 'Vertical_Distance_To_Hydrology',\n 'Soil_Type5',\n 'EViElv',\n 'Horizontal_Distance_To_Hydrology',\n 'Soil_Type32',\n 'Soil_Type31',\n 'Soil_Type13',\n 'Hillshade_Noon',\n 'Soil_Type11',\n 'Aspect']\n\npi_features_and_target = [fi for fi in pi_features]\npi_features_and_target.append(target)","fbfb2699":"%%time\n# subset the training and validation sets with the important features only\ntrain = train.loc[:, pi_features_and_target]\ntest   = test.loc[:, pi_features]","d475ac13":"%%time\n# Starting H2O\nimport h2o\nprint(h2o.__version__)\nfrom h2o.automl import H2OAutoML\n\nh2o.init(max_mem_size='16G')","c788b4dd":"%%time\ntrain_h2o = h2o.H2OFrame(train)\ntest_h2o = h2o.H2OFrame(test)","c866ba2a":"%%time\nx = test_h2o.columns\ny = target","98e09d27":"# Run AutoML for 200 base models, up max_runtime_secs in terms of duration (limited to 1 hour max runtime by default)\n# max_runtime_secs = 14400 # 4 h in terms of duration (limited to 1 hour max runtime by default)\nmax_runtime_secs = 16200 # 4.5 h in terms of training duration\n# max_runtime_secs = 1800 # 30 min in terms of training duration\naml = H2OAutoML(max_models=200, seed=47, max_runtime_secs=max_runtime_secs)\naml.train(x=x, y=y, training_frame=train_h2o)","7ae50540":"# View the AutoML Leaderboard\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)  # Print all rows instead of default (10 rows)","842c99e9":"%%time\n# The leader model is stored here\naml.leader","73bfd6cb":"%%time\n# If you need to generate predictions on a test set, you can make\n# predictions directly on the `\"H2OAutoML\"` object, or on the leader\n# model object directly\n\npreds = aml.predict(test_h2o)","f1bd4b5b":"%%time\npreds.as_data_frame().values.flatten()","594e8d5b":"# since H2O predicts it as a float, we round it to the nearest int value\ntarget_class = [round(a) for a in preds.as_data_frame().values.flatten()]","5b8628aa":"%%time\nsub[target] = target_class\nsub.to_csv('h2o_automl_submission.csv', index=False)","1bc65fa7":"print('We are done. That is all, folks!')\nfinish_time = dt.datetime.now()\nprint(\"Finished at \", finish_time)\nelapsed = finish_time - start_time\nprint(\"Elapsed time: \", elapsed)","128a4385":"# Log of Model Performance\n\n- **0.89266** - the baseline prediction (useful raw features only, 30 min training cap, up to 200 models to train)\n- **0.91640** - the baseline prediction (useful raw features only, 4.5 h training cap, up to 200 models to train)\n- **0.91702** - the prediction with additional feature engineering (important features as detected by https:\/\/www.kaggle.com\/gvyshnya\/eli5-perm-fi-with-additional-fe-dec-21-tpc, 30  min training cap, up to 200 models to train)","3d168844":"# Introduction\n\nThis notebook is aimed at experimenting with the capabilities and performance of H2O.ai's AutoML technology on the multi-class prediction problem for this competition.\n\nIt will contain the log different model training scenarios (different number of models, different training time, different feature engineering composition etc.)"}}