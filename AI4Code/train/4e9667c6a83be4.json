{"cell_type":{"0922148e":"code","d4644182":"code","ecd54121":"code","9114a893":"code","0a70d6d5":"code","a3c1fb5e":"code","a3595396":"code","4b7365e8":"code","90b02833":"code","b1e88764":"code","09a12e7f":"code","5047f98d":"code","7239e99d":"code","6a726917":"code","30af4298":"code","dfb4d14e":"code","4a25de79":"code","2e59cfdc":"code","b2a701fd":"markdown","fab04005":"markdown","4bde8956":"markdown","94c2d2b1":"markdown","b24467b1":"markdown","9b7f7b71":"markdown","ab94d47d":"markdown","469c9647":"markdown","33833f32":"markdown","8d03a277":"markdown","796a3dd6":"markdown","85b19e3a":"markdown","79477da3":"markdown","42be64f4":"markdown","5ca75a5e":"markdown","c53a9126":"markdown","3fb61257":"markdown","2102594c":"markdown","7dd25dca":"markdown","83bc50a1":"markdown","6fbbe3d3":"markdown","5f45fd42":"markdown","22553dad":"markdown"},"source":{"0922148e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4644182":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom keras.layers import *\nfrom keras.models import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.preprocessing import StandardScaler , OneHotEncoder , LabelEncoder","ecd54121":"print(tf.__version__)","9114a893":"dataset = pd.read_csv('\/kaggle\/input\/Social_Network_Ads.csv')","0a70d6d5":"dataset.head() ","a3c1fb5e":"dataset.isnull().sum()","a3595396":"dataset.drop(columns=['User ID'],inplace = True)","4b7365e8":"x = dataset.iloc[:,:3]\ny = dataset.iloc[:,3]","90b02833":"le = LabelEncoder()\nx['Gender'] = le.fit_transform(x['Gender'])\nx","b1e88764":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 5)","09a12e7f":"sc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","5047f98d":"model = Sequential()\n\nmodel.add(Dense(16))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(16))\nmodel.add(Activation('relu'))\n\nmodel.add(Flatten())\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","7239e99d":"model.compile(loss = 'binary_crossentropy',optimizer = 'adam',metrics = ['accuracy'])","6a726917":"model.fit(x_train,y_train ,batch_size = 16 ,epochs = 100)","30af4298":"y_pred = model.predict(x_test)\ny_pred = (y_pred > 0.5)","dfb4d14e":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(accuracy_score(y_test, y_pred))","4a25de79":"print('percentage Accuracy : ',100*accuracy_score(y_test,y_pred))","2e59cfdc":"pred = model.predict(sc.transform([[1, 36, 33000]])) > 0.5\nif pred == True:\n    print('1 : True')\nelse:\n    print('0 : False')","b2a701fd":"**Artificial neural networks (ANN) or connectionist systems are computing systems vaguely inspired by the biological neural networks that constitute animal brains.** ","fab04005":"this is how a basic model looks like","4bde8956":"where the customer is ***MALE***, with age ***36*** and salary ***33000***","94c2d2b1":"importing the dataset (CSV) file.","b24467b1":"***HOLA AMIGOS!!!***\n\nDo upvote if you find the the NoteBook helpful.","9b7f7b71":"*  checking if there are any null values in DataSet.","ab94d47d":"# 4. Building the ANN Model layers","469c9647":"**Import all the necessary libraries.**","33833f32":"# 2. Loading the Dataset","8d03a277":"# 5. Training the model","796a3dd6":"# 3. Processing the Data","85b19e3a":"# Activation function decides whether a neuron should be activated or not by calculating the weighted sum and further adding bias to it. The motive is to introduce non-linearity into the output of a neuron.","79477da3":"* we have used the *ADAM* Gradient Descent here, with the loss as *Binary Crossentropy*","42be64f4":"# 6. Predictions and Evaluating of our the model","5ca75a5e":"Here, we have tried to make the architecture of the model by calling the Sequential library from Keras","c53a9126":"# 1. Importing libraries","3fb61257":"![1_Gh5PS4R_A5drl5ebd_gNrg@2x.png](attachment:1_Gh5PS4R_A5drl5ebd_gNrg@2x.png)","2102594c":"* slicing the data in the train and test set respectively.","7dd25dca":"* Applying LabelEncoder to the column *Gender* so that the categorical values can be taken as numbers when trained","83bc50a1":"### Predicting the result of a single observation","6fbbe3d3":"# Starting with ANN","5f45fd42":"Today, we will try to predict the probablity of the customer to buy a certain product on the basis of the given paprameters that are  ***'GENDER'***, ***'AGE'***, ***'ESTIMATED SALARY'***.\n","22553dad":"1. Dense\n2. Flatten \n3. Activation\n"}}