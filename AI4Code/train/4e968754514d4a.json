{"cell_type":{"8e260257":"code","13891d0a":"code","70a55785":"code","87493f98":"code","446fcbfc":"code","f0fe03b5":"code","8de2e431":"code","f43eb47f":"code","d4d0320a":"code","cb840d3b":"code","d2deff70":"code","d7e575c0":"code","93f381f8":"code","13abd6c6":"code","8bc84a30":"code","abc2b5d9":"code","bc2743b5":"code","32e56ff1":"code","bbbce024":"code","7ee5ccc8":"code","2ae3240b":"code","ec76f713":"code","43adfe67":"code","fe386dda":"code","76102412":"code","ba03021d":"code","b239481b":"code","c4d3c5ec":"code","a25bb38f":"code","5f7dab44":"code","b208a78e":"code","42fee7fa":"code","d5f54876":"code","9ce7aa3f":"code","757ba8d2":"code","726704f3":"code","0da24341":"code","fc069224":"markdown","d6d9b520":"markdown","9209736f":"markdown","04d40952":"markdown","14c6da9f":"markdown","4c1d3d80":"markdown","e416a1ca":"markdown","c9ed840f":"markdown","9b96e456":"markdown","c533f513":"markdown","34e456d5":"markdown","399f2b5e":"markdown"},"source":{"8e260257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","13891d0a":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","70a55785":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_list = [df_train, df_test]","87493f98":"print('TRAIN DATASET')\ndf_train.info()\nprint('-'*60 + '\\n' + '-'*60)\nprint('TEST DATASET')\ndf_test.info()","446fcbfc":"# Datasets Dimensions\ndf_train.shape, df_test.shape","f0fe03b5":"# Comparing columns of train and test datasets\ndf_train.columns [ ~df_train.columns.isin(df_test.columns) ]","8de2e431":"# Creating dataframe with train and test datasets together for analysis\ndf = pd.concat([df_train, df_test])","f43eb47f":"# Features information\ndf.info()","d4d0320a":"# Some descriptive statistics metrics of numeric features\ndf.describe()","cb840d3b":"# Total number of passgengers (training set)\nqtd_survived = len(df_train[df_train['Survived'] == 1])\nqtd_notsurvived = len(df_train[df_train['Survived'] == 0])\ntotal_passengers = len(df_train)\n\nprint('Total number of passengers: {}\\n - Survived: {} ({:.0%})\\n - Not survived: {} ({:.0%})'\n      .format(total_passengers, qtd_survived, qtd_survived\/total_passengers, qtd_notsurvived, qtd_notsurvived\/total_passengers))\n\ndf_train['Survived'].value_counts().plot(kind='bar')","d2deff70":"# Check if feature Sex has any indication of survival rates among passengers.\nsns.countplot(x='Survived', data=df_train, hue='Sex', saturation = .4)","d7e575c0":"# Check if feature Pclass has any indication of survival rates among passengers.\nsns.countplot(x='Survived', data=df_train, hue='Pclass', saturation=.4)","93f381f8":"# Check if feature Pclass of Sex has any indication of survival rates among passengers.\nprint(df_train.groupby(['Sex', 'Pclass']).size())\nsns.catplot(x='Survived', data=df_train, hue='Pclass', col='Sex', kind='count', saturation=0.5)","13abd6c6":"# Check if features Age and Sex has any indication of survival rates among passengers.\ndf_train[(df_train['Age'].notnull()) & (df_train['Sex'] == 'male')]['Age'].plot(kind='hist', alpha=.5, label='male', legend=True)\ndf_train[(df_train['Age'].notnull()) & (df_train['Sex'] == 'female')]['Age'].plot(kind='hist', alpha=.5, label='female', legend=True)","8bc84a30":"# Check if features Age and Sex has any indication of survival rates among passengers.\nsns.catplot(x='Sex', y='Age', data=df_train, hue='Survived', kind='violin', split=True, saturation=0.5, inner='quartile', scale='count')","abc2b5d9":"sns.catplot(x='Sex', y='Age', data=df_train, hue='Survived', kind='violin', col='Pclass', split=True, saturation=0.5, inner='quartile', scale='count')","bc2743b5":"print('TRAINING DATASET')\nprint( df_train.isnull().sum() )\nprint('-'*60 + '\\n' + '-'*60)\nprint('TEST DATASET')\nprint( df_test.isnull().sum() )","32e56ff1":"# Fill NaN values with median of feature age\nage_median = df.Age.median()\nfor dataset in df_list:\n    dataset['Age'].fillna(age_median, inplace = True)\n\n# Fill NaN values with mode of feature embarked\nembarked_mode = df.Embarked.mode()[0]\nfor dataset in df_list:\n    dataset['Embarked'].fillna(embarked_mode, inplace = True)\n\n# Fill NaN values with median of feature fare\nfare_median = df.Fare.median()\ndf_test['Fare'].fillna(fare_median, inplace = True)\n\n# Fill NaN values with 'Unknown' value\nfor dataset in df_list:    \n    dataset['Cabin'].fillna('Unknown', inplace = True)","bbbce024":"print('TRAINING DATASET')\nprint( df_train.isnull().sum() )\nprint('-'*60 + '\\n' + '-'*60)\nprint('TEST DATASET')\nprint( df_test.isnull().sum() )","7ee5ccc8":"# Transforming cabin feature in a single character value taking off numeric values\n# Transform categorical value to numerical value\nmap_cabin = {'U':0, 'C':1, 'E':2, 'G':3, 'D':4, 'A':5, 'B':6, 'F':7, 'T':8}\nfor dataset in df_list:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]\n    print(dataset['Cabin'].unique())\n    dataset['Cabin'] = dataset['Cabin'].map(map_cabin)","2ae3240b":"# Transform sex feature in numerical value\nmap_sex = {'male':0, 'female':1}\n\nfor dataset in df_list:\n    dataset['Sex'] = dataset['Sex'].map(map_sex)","ec76f713":"# Transform embarked feature in numerical value\nmap_embarked = {'S':0, 'C':1, 'Q':2}\n\nfor dataset in df_list:\n    dataset['Embarked'] = dataset['Embarked'].map(map_embarked)","43adfe67":"# Creating family_size feature (SibSp + Parch + 1)\nfor dataset in df_list:\n    dataset['family_size'] = dataset.apply(lambda x: x['SibSp'] + x['Parch'] + 1, axis=1)","fe386dda":"# Creating title feature with name feature\n\nprint(df.Name.str.split(', ').str[1].str.split('.').str[0].value_counts())\n\nmap_title = {'Mr':0, 'Master':1, 'Mrs':2, 'Miss':3, 'Other':4}\n\nfor dataset in df_list:\n    dataset['Title'] = dataset['Name'].str.split(', ').str[1].str.split('.').str[0]\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    dataset['Title'] = dataset['Title'].replace(['Rev', 'Dr', 'Col', 'Major', 'the Countess', 'Lady', 'Don', 'Capt', 'Sir', 'Dona', 'Jonkheer'], 'Other')\n    dataset['Title'] = dataset['Title'].map(map_title)\n\nprint(df_train['Title'].value_counts(), df_test['Title'].value_counts())","76102412":"for dataset in df_list:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","ba03021d":"# Format age feature to int type\nfor dataset in df_list:\n    dataset['Age'] = dataset['Age'].astype(int)","b239481b":"feature_list = [\"Pclass\", \"Age\", \"Sex\", \"Fare\", \"SibSp\", \"Parch\", \"Embarked\", 'family_size', 'Title', 'Cabin']\n\ndata, target = df_train[feature_list], df_train['Survived']\ndata_test = df_test[feature_list]","c4d3c5ec":"knn = KNeighborsClassifier()\nknn.fit(data, target)\n\nscores = cross_val_score(knn, data, target, cv=5)\nscores","a25bb38f":"forest = RandomForestClassifier(n_estimators = 1000, random_state=1)\nforest.fit(data, target)","5f7dab44":"forest.score(data, target)","b208a78e":"feature_importances = pd.Series(forest.feature_importances_, index=data.columns).sort_values(ascending=False)\nprint(feature_importances)\n\nscores = cross_val_score(forest, data, target, cv=5, scoring='accuracy')\nprint(scores, scores.mean())","42fee7fa":"param_grid = {\n    'max_depth': [5, 10, 20, 30],\n    'max_features': [2, 3, 5, 10],\n    #'min_samples_leaf': [3, 4, 5],\n    #'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300]\n}","d5f54876":"grid = GridSearchCV(forest, param_grid, scoring='accuracy')","9ce7aa3f":"grid.fit(data, target)","757ba8d2":"grid.best_params_","726704f3":"grid.best_estimator_.predict(data_test)","0da24341":"#pred = forest.predict(data_test)\npred = grid.best_estimator_.predict(data_test)\noutput = pd.DataFrame({'PassengerId':df_test['PassengerId'],'Survived':pred})\noutput.to_csv('submission.csv', index=False)","fc069224":"### 2. Load datasets","d6d9b520":"1. Libraries\n2. Load datasets   \n3. Exploratory Data Analysis (EDA)\n4. Handling data  \n    3.1 - Missing Values  \n    3.2 - Outliers  \n    3.3 - Feature selection  \n    3.4 - Validating data\n4. Model Development  \n    4.1 - Choose ML algoritm  \n    4.2 - Create ML model  \n    4.3 - Testing and evaluating model  \n5. Submission","9209736f":"### 1. Import Libraries","04d40952":"#### 4.3 - Create train, target and test datasets","14c6da9f":"# Titanic: Machine Learning from Disaster","4c1d3d80":"#### 5.2 Random Forest","e416a1ca":"### 3. Exploratory Data Analysis (EDA)","c9ed840f":"### 4. Handling Data","9b96e456":"### 5. Model Development","c533f513":"#### 5.1 KNN","34e456d5":"#### 4.2 Feature Engineering","399f2b5e":"#### 4.1 Missing Values"}}