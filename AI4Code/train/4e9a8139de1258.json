{"cell_type":{"c326bcbb":"code","3cc7aed7":"code","31bb4475":"code","f819eb0c":"code","3ab7c6d7":"code","d976317e":"code","b707c546":"code","7a7032f0":"code","373e4efe":"code","ff56aaac":"code","ccf92aa7":"code","c0982602":"code","23e22876":"code","439336ae":"code","e9481b2a":"code","92d2d8e1":"code","958d29f8":"code","ac249c6a":"code","7b94af7f":"code","f6e78285":"code","95182bce":"code","2bd73282":"code","b2183b1a":"code","e6a2f4bf":"code","d3fd89e5":"code","4efa8ca1":"markdown","9f9d6930":"markdown","b128121d":"markdown","b31db51f":"markdown","6d969880":"markdown","9f42bf89":"markdown","5a01e670":"markdown","b41a103e":"markdown","63681bc8":"markdown","0a007078":"markdown","d29dc9e3":"markdown","17a05e6a":"markdown"},"source":{"c326bcbb":"# Importing Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3cc7aed7":"ds = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\nds","31bb4475":"ds.info()","f819eb0c":"ds.isnull().sum()","3ab7c6d7":"mean_salary = ds['salary'].mean()\nds.fillna({'salary' : mean_salary}, inplace=True)\nds.isnull().sum()","d976317e":"from sklearn.preprocessing import LabelEncoder\n\ngender_n = LabelEncoder()\nssc_b_n = LabelEncoder()\nhsc_b_n = LabelEncoder()\nhsc_s_n = LabelEncoder()\ndegree_t_n = LabelEncoder()\nworkex_n = LabelEncoder()\nspecialisation_n = LabelEncoder()\nstatus_n = LabelEncoder()\n\nds['gender_n'] = gender_n.fit_transform(ds['gender'])\nds['ssc_b_n'] = ssc_b_n.fit_transform(ds['ssc_b'])\n\nds['hsc_b_n'] = hsc_b_n.fit_transform(ds['hsc_b'])\nds['hsc_s_n'] = hsc_s_n.fit_transform(ds['hsc_s'])\n\nds['degree_t_n'] = degree_t_n.fit_transform(ds['degree_t'])\nds['workex_n'] = workex_n.fit_transform(ds['workex'])\n\nds['specialisation_n'] = specialisation_n.fit_transform(ds['specialisation'])\nds['status_n'] = status_n.fit_transform(ds['status'])","b707c546":"ds.drop(['gender', 'ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation', 'status','sl_no'], axis=1, inplace=True)\nds","7a7032f0":"ds['status_n'].value_counts()","373e4efe":"ds_0 = ds[ds['status_n'] == 0]\nds_1 = ds[ds['status_n'] == 1]\n\nds_1 = ds_1.sample(ds_0.shape[0])\n\nds = ds_0.append(ds_1, ignore_index = True)\nds['status_n'].value_counts()","ff56aaac":"x = ds.drop(['status_n'], axis=1)\ny = ds['status_n']","ccf92aa7":"from sklearn.feature_selection import SelectKBest, chi2\nbest_feature = SelectKBest(score_func= chi2, k = 'all')\n\nfit = best_feature.fit(x,y)\n\nofscore = pd.DataFrame(fit.scores_)\nofcolumn = pd.DataFrame(x.columns)","c0982602":"feature_score = pd.concat([ofcolumn, ofscore], axis=1)\nfeature_score.columns = ['spec', 'score']\nfeature_score","23e22876":"x.drop(['mba_p','gender_n','ssc_b_n','hsc_b_n','hsc_s_n','degree_t_n'], axis=1, inplace=True)\nx","439336ae":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.18)","e9481b2a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","92d2d8e1":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier","958d29f8":"rf = RandomForestClassifier()\nrf.fit(x_train,y_train)\nrf.score(x_test,y_test)","ac249c6a":"dt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","7b94af7f":"kn = KNeighborsClassifier()\nkn.fit(x_train,y_train)\nkn.score(x_test,y_test)","f6e78285":"svm = SVC()\nsvm.fit(x_train,y_train)\nsvm.score(x_test,y_test)","95182bce":"xg = XGBClassifier()\nxg.fit(x_train,y_train)\nxg.score(x_test,y_test)","2bd73282":"nb = GaussianNB()\nnb.fit(x_train,y_train)\nnb.score(x_test,y_test)","b2183b1a":"from sklearn.metrics import confusion_matrix, classification_report\n\ny_pred = xg.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('Confusion Matrix\\n',cm)","e6a2f4bf":"plt.figure(figsize=(7,5))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","d3fd89e5":"print(classification_report(y_test,y_pred, target_names=['Class 0','Class 1']))","4efa8ca1":"# **Classifiers**","9f9d6930":"Dropping unnecessary columns","b128121d":"# Balancing dataset","b31db51f":"Filling the null values","6d969880":"# Feature Selection","9f42bf89":"I select only that features that have feature_score atleast 1.0","5a01e670":"# Splitting data into train and test","b41a103e":"dropping unnecessary columns","63681bc8":"**Classification Report**","0a007078":"# Confusion Matrix","d29dc9e3":"# Standardizing data","17a05e6a":"## **Converting string values into integar**"}}