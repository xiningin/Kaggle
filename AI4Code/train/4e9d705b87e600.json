{"cell_type":{"7438366e":"code","bb654f2a":"code","f971b777":"code","7cf93e08":"code","c95ebb0c":"code","33bca3c8":"code","02d40d9b":"code","dd8be36e":"code","50f04b74":"code","16936235":"code","8309a8e9":"code","ad6b623f":"code","1bbb21fd":"code","02904fea":"code","021cc65f":"code","c0335344":"code","96a9edba":"code","e3631d09":"code","a55eb5d4":"code","0bf82f50":"code","ca7ae2fc":"code","92386bb3":"code","43862cb9":"code","34ba61cb":"code","bd45be56":"code","85a54e52":"code","6096bc38":"code","8e20471e":"code","ca254e67":"code","866e8a20":"code","5ec9b4e7":"code","348b305a":"code","02d4b45c":"code","c083d7dd":"code","75990ecb":"code","b9f03bc4":"code","cedeb0bd":"code","11e1aaa5":"code","499d5779":"code","24f7ce48":"code","c6eafde9":"code","78adade5":"code","9fcc2e62":"code","a805cdcf":"code","cf9a8254":"code","6c071ace":"code","9d60f617":"markdown","bfa66ae1":"markdown","df36a40b":"markdown","639bf901":"markdown","9427dc0a":"markdown","434b3b0a":"markdown","3e7c9f83":"markdown","c0e012f1":"markdown","d3643a6d":"markdown","5919f4d1":"markdown","7e709591":"markdown","96ad246d":"markdown","33ee38cc":"markdown","08028433":"markdown","ef758bf6":"markdown","c18b606d":"markdown","f8b73dda":"markdown","33173055":"markdown","3578c284":"markdown","f00ca3eb":"markdown","9483e030":"markdown","e27cff05":"markdown","1252d246":"markdown","e281a665":"markdown","748a820d":"markdown","4b2779b1":"markdown","81d27594":"markdown"},"source":{"7438366e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re as re\nfrom pandas import Series, DataFrame\nimport scipy\nfrom scipy.stats import chi2\nfrom sklearn.ensemble import RandomForestRegressor\nimport seaborn as sns\nfrom scipy import stats\nimport copy\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#\u56fe\u53ef\u4ee5\u663e\u793a\u4e2d\u6587\nplt.rcParams['font.sans-serif']='SimHei'\nplt.rcParams['axes.unicode_minus']=False\n\n#\u663e\u793a\u6587\u4ef6\u8def\u5f84\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bb654f2a":"#\u5bfc\u5165\u6570\u636e\ntrain_data = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv')","f971b777":"#\u67e5\u770b\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784\n# train_data.info()\nprint(train_data.info())\ntrain_data.head(5)","7cf93e08":"# test_data.info()\nprint(test_data.info())\ntest_data.head(5)","c95ebb0c":"#\u67e5\u770b\u53d8\u91cf\u7684\u5206\u4f4d\u6570\u7b49\u4fe1\u606f\ntrain_data.describe([0.01, 0.10, 0.25, 0.50, 0.75, 0.90, 0.99]).T","33bca3c8":"train_data.rename(columns={'Unnamed: 0':'ID'}, inplace=True)\ntest_data.rename(columns={'Unnamed: 0':'ID'}, inplace=True)","02d40d9b":"train_data.head(5)","dd8be36e":"test_data.head(5)","50f04b74":"train_data.drop_duplicates(inplace=True)\ntest_data.drop_duplicates(inplace=True)","16936235":"#\u67e5\u770b\u7f3a\u5931\u503c\ntrain_data.isnull().mean()","8309a8e9":"#\u6309\u7167\u9000\u4f11\u5e74\u9f84\u5212\u5206\u6570\u636e\u96c6\nworking = train_data.loc[(train_data['age'] >= 18) & (train_data['age'] <= 60)]\nsenior = train_data.loc[(train_data['age'] > 60)]\nworking_income_mean = working['MonthlyIncome'].mean()\nsenior_income_mean = senior['MonthlyIncome'].mean()\nprint(working_income_mean)\nprint(senior_income_mean)","ad6b623f":"train_data['MonthlyIncome'] = train_data['MonthlyIncome'].replace(np.nan,train_data['MonthlyIncome'].mean())","1bbb21fd":"# train_data=train_data.dropna()\n# \u73b0\u5728\u5bf9NumberOfDependents\u975e\u7a7a\u503c\u7edf\u8ba1\ntrain_data['NumberOfDependents'].value_counts()","02904fea":"# \u5bf9\u7a7a\u503c\u7528\u4e2d\u4f4d\u6570\u586b\u5145\ntrain_data['NumberOfDependents'].fillna(train_data['NumberOfDependents'].median(), inplace=True)","021cc65f":"# \u68c0\u67e5\ntrain_data.info()","c0335344":"test_data.loc[test_data['age'] == 0, 'age'] = test_data['age'].median()\ntest_data['MonthlyIncome'] = test_data['MonthlyIncome'].replace(np.nan,test_data['MonthlyIncome'].mean())\ntest_data['NumberOfDependents'].fillna(test_data['NumberOfDependents'].median(), inplace=True)","96a9edba":"# \u770b\u662f\u5426\u6709\u5f02\u5e38\u503c\ntrain_data.describe()","e3631d09":"test_data.describe()","a55eb5d4":"# \u68c0\u67e5\u6570\u636e\u7684\u76f8\u5173\u6027\ncorr = train_data.corr()\nplt.figure(figsize=(19, 15))\nsns.heatmap(corr, annot=True, fmt='.2g')","0bf82f50":"plt.figure(figsize=(19, 12)) \ntrain_data[['NumberOfTime30-59DaysPastDueNotWorse', \n          'NumberOfTime60-89DaysPastDueNotWorse',\n          'NumberOfTimes90DaysLate']].boxplot()\nplt.show()","ca7ae2fc":"# \u53bb\u638998\u548c96\u4e24\u4e2a\u70b9\uff0c\u518d\u67e5\u770b\u76f8\u5173\u6027\u5982\u4f55\ndef replace98and96(column):\n    new = []\n    newval = column.median()\n    for i in column:\n        if (i == 96 or i == 98):\n            new.append(newval)\n        else:\n            new.append(i)\n    return new\n\ntrain_data['NumberOfTime30-59DaysPastDueNotWorse'] = replace98and96(train_data['NumberOfTime30-59DaysPastDueNotWorse'])\ntrain_data['NumberOfTimes90DaysLate'] = replace98and96(train_data['NumberOfTimes90DaysLate'])\ntrain_data['NumberOfTime60-89DaysPastDueNotWorse'] = replace98and96(train_data['NumberOfTime60-89DaysPastDueNotWorse'])\n\ntest_data['NumberOfTime30-59DaysPastDueNotWorse'] = replace98and96(test_data['NumberOfTime30-59DaysPastDueNotWorse'])\ntest_data['NumberOfTimes90DaysLate'] = replace98and96(test_data['NumberOfTimes90DaysLate'])\ntest_data['NumberOfTime60-89DaysPastDueNotWorse'] = replace98and96(test_data['NumberOfTime60-89DaysPastDueNotWorse'])","92386bb3":"# \u68c0\u67e5\u6570\u636e\u7684\u76f8\u5173\u6027\ncorr = train_data.corr()\nplt.figure(figsize=(19, 15))\nsns.heatmap(corr, annot=True, fmt='.2g')","43862cb9":"# \u5bf9\u5206\u7c7b\u7ed3\u679cSeriousDlqin2yrs\u67e5\u770b\nsns.countplot(x=\"SeriousDlqin2yrs\",data=train_data)","34ba61cb":"# \u53ef\u4ee5\u770b\u51fa\u5206\u7c7b\u7ed3\u679c\u662f\u53ca\u5176\u4e0d\u5e73\u8861\u7684\uff0c\u4e8b\u4ef6\u53d1\u751f\u7387\u5982\u4e0b\nP = train_data.groupby('SeriousDlqin2yrs')['ID'].count().reset_index()\nP['Percentage'] = 100 * P['ID'] \/ P['ID'].sum()\nprint(P)","bd45be56":"#\u5254\u9664\u5f02\u5e38\u503c\uff0c\u752899%\u7684\u5206\u4f4d\u6570\u8fdb\u884c\u76d6\u5e3d\u5904\u7406\ntrain_data = train_data[train_data['NumberOfTime30-59DaysPastDueNotWorse'] <4.00]\ntrain_data = train_data[train_data['NumberOfTime60-89DaysPastDueNotWorse'] <2.00]\ntrain_data = train_data[train_data['NumberOfTimes90DaysLate'] <3.00]\ntrain_data = train_data[train_data['RevolvingUtilizationOfUnsecuredLines'] < 1.09]\ntrain_data = train_data[train_data['DebtRatio'] < 4979.04]\ntrain_data = train_data[train_data['MonthlyIncome'] <25000.00]\ntrain_data = train_data[train_data['NumberRealEstateLoansOrLines'] <4.00]\ntrain_data = train_data[train_data['NumberOfDependents'] <4.00]\ntrain_data = train_data[train_data['NumberOfOpenCreditLinesAndLoans'] <24.00]\ntrain_data = train_data[train_data['age'] <87.00]\n# \u5e74\u9f84\u7b49\u4e8e0\u7684\u5f02\u5e38\u503c\u8fdb\u884c\u5254\u9664\ntrain_data = train_data[train_data['age'] > 0]","85a54e52":"# \u4e3a\u4e86\u907f\u514d\u548c\u4ea4\u53c9\u9a8c\u8bc1\u6df7\u6dc6\uff0c\u5c06train\u548ctest\u8bbe\u5b9a\u4e3a\u5176\u4ed6\u540d\u79f0\nX = train_data.drop(['SeriousDlqin2yrs', 'ID'],axis=1)\ny = train_data['SeriousDlqin2yrs']\nW = test_data.drop(['SeriousDlqin2yrs', 'ID'],axis=1)\nz = test_data['SeriousDlqin2yrs']","6096bc38":"# \u7528\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_predict\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\n\n# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=111)\n\n# \u8c03\u7528\u7ebf\u6027\u56de\u5f52\u51fd\u6570\uff0cC\u4e3a\u6b63\u5219\u5316\u7cfb\u6570\uff0cl1\u8868\u793aL1\u6b63\u5219\u5316\nlogit = LogisticRegression(random_state=111, solver='saga', penalty='l1', class_weight='balanced', C=1.0, max_iter=500)\n\n# \u6807\u51c6\u5316\u62df\u5408\nscaler = StandardScaler().fit(X_train)\n\n# \u6807\u51c6\u5316X_train \u548cX_test\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# \u7ebf\u6027\u56de\u5f52\u62df\u5408\nlogit.fit(X_train_scaled, y_train)\n\n# \u8f93\u5165\u8bad\u7ec3\u96c6\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u5230\u6bcf\u79cd\u5206\u7c7b\u7ed3\u679c\u7684\u6982\u7387\nlogit_scores_proba = logit.predict_proba(X_train_scaled)\n\n# \u8fd4\u56de\u5206\u7c7b1\u7684\u6982\u7387\nlogit_scores = logit_scores_proba[:,1]","8e20471e":"# \u753b\u56fe\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(12,10))\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1], \"k--\") # \u753b\u76f4\u7ebf\u505a\u53c2\u8003\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive rate\")","ca254e67":"# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit, tpr_logit, thresh_logit = roc_curve(y_train, logit_scores)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit,tpr_logit)\nprint('AUC Score : ', (roc_auc_score(y_train,logit_scores)))","866e8a20":"# \u9a8c\u8bc1\u6d4b\u8bd5\u96c6\uff0c\u6d4b\u8bd5\u5206\u7c7b\u7ed3\u679c\u6982\u7387\u5206\u5e03\nlogit_scores_proba_val = logit.predict_proba(X_test_scaled)\n\n# \u5206\u7c7b\u7ed3\u679c\u4e3a1\u7684\u6982\u7387\nlogit_scores_val = logit_scores_proba_val[:,1]\n\n# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit_val, tpr_logit_val, thresh_logit_val = roc_curve(y_test, logit_scores_val)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit_val,tpr_logit_val)\nprint('AUC Score :', (roc_auc_score(y_test,logit_scores_val)))","5ec9b4e7":"# \u91c7\u7528LogisticRegressionCV\u6765\u4ea4\u53c9\u9a8c\u8bc1\u9009\u62e9\u6b63\u5219\u5316\u7cfb\u6570C\nfrom sklearn.linear_model import LogisticRegressionCV\nlogit = LogisticRegressionCV(Cs=[0.001, 0.01, 0.1, 1, 10, 100], penalty='l1', solver='saga', max_iter=500, class_weight='balanced', random_state=111)\n\n# \u7ebf\u6027\u56de\u5f52\u62df\u5408\nlogit.fit(X_train_scaled, y_train)\n\nprint(logit.C_)","348b305a":"# \u8f93\u5165\u8bad\u7ec3\u96c6\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u5230\u6bcf\u79cd\u5206\u7c7b\u7ed3\u679c\u7684\u6982\u7387\nlogit_scores_proba = logit.predict_proba(X_train_scaled)\n\n# \u8fd4\u56de\u5206\u7c7b1\u7684\u6982\u7387\nlogit_scores = logit_scores_proba[:,1]\n\n# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit, tpr_logit, thresh_logit = roc_curve(y_train, logit_scores)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit,tpr_logit)\nprint('AUC Score : ', (roc_auc_score(y_train,logit_scores)))","02d4b45c":"# \u5f15\u5165\u964d\u91c7\u6837\u6a21\u5757\nfrom imblearn.under_sampling import RandomUnderSampler\n\n# Counter\u7c7b\u7684\u76ee\u7684\u662f\u7528\u6765\u8ddf\u8e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\nfrom collections import Counter\nprint('Original dataset shape :', Counter(y))","c083d7dd":"# \u8c03\u7528\u6a21\u5757\nrus = RandomUnderSampler(random_state=111)\n\n# \u76f4\u63a5\u964d\u91c7\u6837\u540e\u8fd4\u56de\u91c7\u6837\u540e\u7684\u6570\u503c\nX_resampled, y_resampled = rus.fit_resample(X, y)\nprint('Resampled dataset shape:', Counter(y_resampled))","75990ecb":"# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nX_train_rus, X_test_rus, y_train_rus, y_test_rus = train_test_split(X_resampled, y_resampled, random_state=111)\nX_train_rus.shape, y_train_rus.shape","b9f03bc4":"# \u5bf9\u91cd\u91c7\u6837\u4ee5\u540e\u7684\u6570\u636e\u8fdb\u884c\u5206\u7c7b\nlogit_resampled = LogisticRegression(random_state=111, solver='saga', penalty='l1', class_weight='balanced', C=1.0, max_iter=500)\n\nlogit_resampled.fit(X_resampled, y_resampled)\nlogit_resampled_proba_res = logit_resampled.predict_proba(X_resampled)\nlogit_resampled_scores = logit_resampled_proba_res[:, 1]\nfpr_logit_resampled, tpr_logit_resampled, thresh_logit_resampled = roc_curve(y_resampled, logit_resampled_scores)\nplot_roc_curve(fpr_logit_resampled, tpr_logit_resampled)\nprint('AUC score: ', roc_auc_score(y_resampled, logit_resampled_scores))","cedeb0bd":"# \u91c7\u7528\u968f\u673a\u68ee\u6797\u6cd5\u5206\u7c7b\u548c\u68af\u5ea6\u4e0a\u5347\u6cd5\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nforest = RandomForestClassifier(n_estimators=300, random_state=111, max_depth=5, class_weight='balanced')\nforest.fit(X_train_rus, y_train_rus)\ny_scores_prob = forest.predict_proba(X_train_rus)\ny_scores = y_scores_prob[:, 1]\nfpr, tpr, thresh = roc_curve(y_train_rus, y_scores)\nplot_roc_curve(fpr, tpr)\nprint('AUC score:', roc_auc_score(y_train_rus, y_scores))","11e1aaa5":"# \u4ea4\u53c9\u9a8c\u8bc1\ny_test_proba = forest.predict_proba(X_test_rus)\ny_scores_test = y_test_proba[:, 1]\nfpr_test, tpr_test, thresh_test = roc_curve(y_test_rus, y_scores_test)\nplot_roc_curve(fpr_test, tpr_test)\nprint('AUC Score:', roc_auc_score(y_test_rus, y_scores_test))","499d5779":"# \u770b\u770b\u968f\u673a\u68ee\u6797\u6cd5\u5bf9\u5404\u4e2a\u7279\u5f81\u7684\u91cd\u89c6\u7a0b\u5ea6\ndef plot_feature_importances(model):\n    plt.figure(figsize=(10,8))\n    n_features = X.shape[1]\n    plt.barh(range(n_features), model.feature_importances_, align='center')\n    plt.yticks(np.arange(n_features), X.columns)\n    plt.xlabel('Feature importance')\n    plt.ylabel('Feature')\n    plt.ylim(-1, n_features)\n\nplot_feature_importances(forest)","24f7ce48":"gbc_clf = GradientBoostingClassifier(n_estimators=300, learning_rate=0.05, max_depth=8, random_state=112)\ngbc_clf.fit(X_train, y_train)\ngbc_clf_proba = gbc_clf.predict_proba(X_train)\ngbc_clf_scores = gbc_clf_proba[:, 1]\nfpr_gbc, tpr_gbc, thresh_gbc = roc_curve(y_train, gbc_clf_scores)\nplot_roc_curve(fpr_gbc, tpr_gbc)\nprint('AUC Score:', roc_auc_score(y_train, gbc_clf_scores))","c6eafde9":"# \u6765\u770b\u4e00\u4e0b\u4ea4\u53c9\u9a8c\u8bc1\u7684\u7ed3\u679c\ngbc_val_proba = gbc_clf.predict_proba(X_test)\ngbc_val_scores = gbc_val_proba[:, 1]\nprint('AUC score:', roc_auc_score(y_test, gbc_val_scores))","78adade5":"gbc_clf_submission = GradientBoostingClassifier(n_estimators=200, learning_rate=0.05 ,max_depth=4,  random_state=42)\ngbc_clf_submission.fit(X_train,y_train)\ngbc_clf_proba = gbc_clf_submission.predict_proba(X_train)\ngbc_clf_scores = gbc_clf_proba[:,1]\ngbc_val_proba = gbc_clf_submission.predict_proba(X_test)\ngbc_val_scores = gbc_val_proba[:,1]\nfpr_gbc, tpr_gbc, thresh_gbc = roc_curve(y_train, gbc_clf_scores)\nprint('AUC Score :', roc_auc_score(y_train, gbc_clf_scores))\nprint('AUC Score :', roc_auc_score(y_test, gbc_val_scores))","9fcc2e62":"plot_feature_importances(gbc_clf)","a805cdcf":"submission_proba = gbc_clf_submission.predict_proba(W)\nsubmission_scores = submission_proba[:, 1]\nsubmission_scores.shape","cf9a8254":"W.shape","6c071ace":"ids = np.arange(1, 101504)\nsubmission = pd.DataFrame( {'Id': ids, 'Probability': submission_scores})\nsubmission.to_csv('submission.csv', index=False)","9d60f617":"**4.3.2 \u968f\u673a\u68ee\u6797\u6cd5**","bfa66ae1":"**4.3.1 \u7ebf\u6027\u56de\u5f52\u5206\u7c7b**","df36a40b":"## 4.2 \u6570\u636e\u6e05\u6d17","639bf901":"\u4ecedescribe()\u7684\u7ed3\u679c\u770b\uff0c\u5e74\u9f84\u51fa\u73b0\u4e860(min)\uff0c\u4e0d\u5408\u7406\uff0c\u7528\u4e2d\u4f4d\u6570\u66ff\u6362\u3002NumberOfTime30-59DaysPastDueNotWorse\uff0cNumberOfTimes90DaysLate\uff0cNumberOfTime60-89DaysPastDueNotWorse\u4e09\u79cd\u7684\u6700\u5927\u503c\u90fd\u662f98\uff0c\u5bfc\u81f4\u5e73\u5747\u503c\u5f88\u63a5\u8fd1\uff0c\u5e94\u8be5\u6392\u67e5\u4e00\u4e0b\uff1b\u540c\u7406\uff0cNumberOfOpenCreditLinesAndLoans\uff0cNumberRealEstateLoansOrLines\u3002\u9700\u8981\u68c0\u67e5\u4e00\u4e0b\u8fd9\u51e0\u4e2a\u53c2\u6570\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002","9427dc0a":"# 3.\u8bc4\u4ef7\nAUC\u3001KS","434b3b0a":"\u548c\u968f\u673a\u68ee\u6797\u6cd5\u76f8\u6bd4\uff0cGBC\u65b9\u6cd5\u7ed9\u4e88DebtRatio\u66f4\u591a\u7740\u91cd\u3002","3e7c9f83":"**4.2.3 \u7f3a\u5931\u503c\u5904\u7406**","c0e012f1":"# 1. \u76ee\u7684\n\u901a\u8fc7\u9884\u6d4b\u5728\u672a\u6765\u4e24\u5e74\u5185\u67d0\u4eba\u5c06\u7ecf\u5386\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\uff0c\u6539\u5584\u4fe1\u7528\u8bc4\u5206\u7684\u72b6\u6001\u3002\u6839\u636e\u5ba2\u6237\u4fe1\u606f\uff0c\u5efa\u7acb\u8fdd\u7ea6\u6a21\u578b\uff0c\u5236\u4f5c\u8bc4\u5206\u5361\uff0c\u5229\u7528AUC\u548cKS\u503c\u4f5c\u4e3a\u8bc4\u4ef7\u6307\u6807\uff0c\u6700\u7ec8\u9009\u51fa\u8bc4\u4ef7\u6548\u679c\u6700\u597d\u7684\u9884\u6d4b\u6a21\u578b\u3002","d3643a6d":"\u53ef\u4ee5\u770b\u5230\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\u4e86\u3002","5919f4d1":"**4.3.3 \u68af\u5ea6\u63d0\u5347\u6cd5\u5206\u7c7b**","7e709591":"## 4.4 \u6570\u636e\u8f93\u51fa","96ad246d":"**4.2.1\u5217\u91cd\u547d\u540d**","33ee38cc":"\u4ece\u7ed3\u679c\u770b\uff0cLR\u65b9\u6cd5\u8c03\u53c2\u6570\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u63d0\u9ad8AUC\uff0c\u867d\u7136\u91c7\u7528\u4e86balanced\u6743\u91cd\uff0c\u4f46\u662f\u6548\u679c\u8fd8\u662f\u4e0d\u7406\u60f3\uff1b\u63a5\u4e0b\u6765\u5c1d\u8bd5\u5148\u5c06\u6570\u636e\u964d\u91c7\u6837\uff0c\u518d\u91c7\u7528\u968f\u673a\u68ee\u6797\u6cd5\u3002","08028433":"**4.2.4 \u5f02\u5e38\u503c\u5904\u7406**","ef758bf6":"## 4.1 \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790","c18b606d":"**4.1.2 \u67e5\u770b\u6570\u636e\u96c6\u4fe1\u606f\u548c\u63cf\u8ff0\u7edf\u8ba1\u4fe1\u606f**","f8b73dda":"\u6570\u636e\u4e0d\u5e73\u8861\u4f1a\u8ba9\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u8fc7\u591a\u5173\u6ce8\u591a\u6570\u7c7b\uff0c\u4f7f\u5206\u7c7b\u6027\u80fd\u4e0b\u964d\uff1b\u56e0\u4e3a\u6570\u636e\u8db3\u591f\u591a\uff0c\u91c7\u7528\u6b20\u91c7\u6837\uff1b\u91c7\u7528\u6b63\u5219\u56de\u5f52\u6a21\u578b\u548c\u96c6\u6210\u6a21\u578b\u3002","33173055":"\u770b\u6765\u662f\u8fc7\u62df\u5408\u4e86\uff0c\u8c03\u4e00\u4e0b\u53c2\u6570\u3002","3578c284":"\u53ef\u4ee5\u770b\u5230\u6d4b\u8bd5\u6570\u636e\u96c6\u4e5f\u53d1\u751f\u4e86\u8fd9\u6837\u7684\u60c5\u51b5\u3002","f00ca3eb":"## 4.3\u6570\u636e\u5206\u6790","9483e030":"# 4. \u9879\u76ee\u6d41\u7a0b\n1. \u63a2\u7d22\u6027\u5206\u6790\uff1a\u6570\u636e\u7ed3\u6784\u3001\u53d8\u91cf\u542b\u4e49\u3001\u53d8\u91cf\u7684\u5206\u4f4d\u6570\u7b49\uff1b\n2. \u6570\u636e\u6e05\u6d17\uff1a\u5904\u7406\u91cd\u590d\u503c\u3001\u7f3a\u5931\u503c\u3001\u5f02\u5e38\u503c\uff1b\n3. \u6570\u636e\u5206\u6790\uff1a\u5229\u7528Sklearn\u5efa\u7acbLogistic\uff0cRandomForest\u6a21\u578b\uff1b\n4. \u6570\u636e\u8f93\u51fa\uff1a\u8f93\u51fa\u6587\u4ef6\u3002","e27cff05":"**4.1.1 \u52a0\u8f7d\u5fc5\u8981\u7684Python\u5e93\uff0c\u5bfc\u5165\u6570\u636e**","1252d246":"\u53ef\u4ee5\u770b\u5230\u9000\u4f11\u4e0e\u5426\u5dee\u8ddd\u4e0d\u5927\uff0c\u5bf9\u6536\u5165\u7684\u7a7a\u6570\u636e\u586b\u5145\u5e73\u5747\u503c","e281a665":"**4.2.2 \u53bb\u9664\u91cd\u590d\u503c**","748a820d":"\u7531\u4e0a\u56fe\u53ef\u89c1\uff0cNumberOfTime30-59DaysPastDueNotWorse, NumberOfTimes90DaysLate, NumberOfTime60-89DaysPastDueNotWorse\u4e09\u8005\u76f8\u5173\u6027\u5f88\u5927\uff0c\u63a5\u4e0b\u6765\u67e5\u770b\u4e00\u4e0b\u4e09\u8005\u7684\u7bb1\u578b\u56fe\u3002","4b2779b1":"\u7531\u4ee5\u4e0a\u8fd0\u884c\u7ed3\u679c\u53ef\u77e5\uff0cMonthlyIncome\u548cNumberOfDependents \u4e24\u4e2a\u5b57\u6bb5\u6709\u7f3a\u5931\u503c\uff0c\u9700\u8981\u5904\u7406\u3002MonthlyIncome\u7684\u7f3a\u5931\u503c\u8f83\u591a\uff0c\u76f4\u63a5\u5220\u9664\u53ef\u80fd\u4f1a\u5f71\u54cd\u7ed3\u679c\uff0c\u53ef\u4ee5\u91c7\u7528\u4e2d\u4f4d\u6570\/\u5747\u503c\/\u4f17\u6570\u7b49\u65b9\u5f0f\u586b\u5145\u7f3a\u5931\u6570\u636e\uff0c\u800c\u5bf9\u4e8e\u7f3a\u5931\u8f83\u5c11\u7684NumberOfDependts,\u53ef\u4ee5\u76f4\u63a5\u7528\u4e2d\u4f4d\u6570\u586b\u5145\u3002","81d27594":"# 2. \u80cc\u666f\n\u94f6\u884c\u5728\u5e02\u573a\u7ecf\u6d4e\u4e2d\u626e\u6f14\u7740\u81f3\u5173\u91cd\u8981\u7684\u89d2\u8272\u3002\u4ed6\u4eec\u51b3\u5b9a\u8c01\u53ef\u4ee5\u83b7\u5f97\u878d\u8d44\uff0c\u4ee5\u53ca\u4ec0\u4e48\u6761\u4ef6\uff0c\u53ef\u4ee5\u505a\u51fa\u6216\u7834\u574f\u6295\u8d44\u51b3\u7b56\u3002\u4e3a\u4e86\u8ba9\u5e02\u573a\u548c\u793e\u4f1a\u53d1\u6325\u4f5c\u7528\uff0c\u4e2a\u4eba\u548c\u4f01\u4e1a\u9700\u8981\u83b7\u5f97\u4fe1\u8d37\u3002\u4fe1\u7528\u8bc4\u5206\u7b97\u6cd5\uff0c\u5bf9\u8fdd\u7ea6\u6982\u7387\u8fdb\u884c\u731c\u6d4b\uff0c\u662f\u94f6\u884c\u7528\u6765\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u53d1\u653e\u8d37\u6b3e\u7684\u65b9\u6cd5\u3002\u8fd9\u4e00\u7ade\u8d5b\u8981\u6c42\u53c2\u4e0e\u8005\u901a\u8fc7\u9884\u6d4b\u672a\u6765\u4e24\u5e74\u67d0\u4eba\u5c06\u7ecf\u5386\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\uff0c\u6765\u6539\u5584\u4fe1\u7528\u8bc4\u5206\u7684\u72b6\u6001\u3002\u8fd9\u79cd\u7ade\u4e89\u7684\u76ee\u6807\u662f\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\uff0c\u8ba9\u501f\u6b3e\u4eba\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u505a\u51fa\u6700\u597d\u7684\u8d22\u52a1\u51b3\u7b56\u3002\n\n\u5ba2\u6237\u7533\u8bf7\u8bc4\u5206\u5361\u7531\u4e00\u7cfb\u5217\u7279\u5f81\u9879\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7279\u5f81\u9879\u76f8\u5f53\u4e8e\u7533\u8bf7\u8868\u4e0a\u7684\u4e00\u4e2a\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u5e74\u9f84\u3001\u94f6\u884c\u6d41\u6c34\u3001\u6536\u5165\u7b49\uff09\u3002\u6bcf\u4e00\u4e2a\u7279\u5f81\u9879\u90fd\u6709\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u5c5e\u6027\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e00\u4e2a\u95ee\u9898\u7684\u4e00\u7cfb\u5217\u53ef\u80fd\u7b54\u6848\uff08\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5e74\u9f84\u8fd9\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u53ef\u80fd\u5c31\u670930\u5c81\u4ee5\u4e0b\u300130\u523045\u7b49\uff09\u3002\u5728\u5f00\u53d1\u8bc4\u5206\u5361\u7cfb\u7edf\u6a21\u578b\u4e2d\uff0c\u5148\u786e\u5b9a\u5c5e\u6027\u4e0e\u7533\u8bf7\u4eba\u672a\u6765\u4fe1\u7528\u8868\u73b0\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u7136\u540e\u7ed9\u5c5e\u6027\u5206\u914d\u9002\u5f53\u7684\u5206\u6570\u6743\u91cd\uff0c\u5206\u914d\u7684\u5206\u6570\u6743\u91cd\u8981\u53cd\u6620\u8fd9\u79cd\u76f8\u4e92\u5173\u7cfb\u3002\u5206\u6570\u6743\u91cd\u8d8a\u5927\uff0c\u8bf4\u660e\u8be5\u5c5e\u6027\u8868\u793a\u7684\u4fe1\u7528\u8868\u73b0\u8d8a\u597d\u3002\u4e00\u4e2a\u7533\u8bf7\u7684\u5f97\u5206\u662f\u5176\u5c5e\u6027\u5206\u503c\u7684\u7b80\u5355\u6c42\u548c\u3002\u5982\u679c\u7533\u8bf7\u4eba\u7684\u4fe1\u7528\u8bc4\u5206\u5927\u4e8e\u7b49\u4e8e\u91d1\u878d\u653e\u6b3e\u673a\u6784\u6240\u8bbe\u5b9a\u7684\u754c\u9650\u5206\u6570\uff0c\u6b64\u7533\u8bf7\u5904\u4e8e\u53ef\u63a5\u53d7\u7684\u98ce\u9669\u6c34\u5e73\u5e76\u5c06\u88ab\u6279\u51c6\uff1b\u4f4e\u4e8e\u754c\u9650\u5206\u6570\u7684\u7533\u8bf7\u4eba\u5c06\u88ab\u62d2\u7edd\u6216\u7ed9\u4e88\u6807\u793a\u4ee5\u4fbf\u8fdb\u4e00\u6b65\u5ba1\u67e5\u3002"}}