{"cell_type":{"644aaf0e":"code","3daacd92":"code","07ebd977":"code","4445a20b":"code","97028706":"code","7549ba79":"code","04db2e1f":"code","566e9448":"code","7043560b":"code","5734165d":"code","38ad2b41":"code","e6304ab3":"code","a07ab299":"code","855c2531":"markdown","9f4f28cd":"markdown","83b127b2":"markdown","f435c702":"markdown","b2b1d759":"markdown","c67f0d73":"markdown","0a3de669":"markdown","4b3c5d16":"markdown","0d6eeb29":"markdown","9b09519c":"markdown","3dfa2a46":"markdown","02a88d05":"markdown"},"source":{"644aaf0e":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt","3daacd92":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","07ebd977":"train.head()","4445a20b":"test.head()","97028706":"train = train.drop(columns = ['Name'])\ntest = test.drop(columns = ['Name'])\ntrain.head()","7549ba79":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\n# Train set\ntrain['Cabin'] = le.fit_transform(train['Cabin'].astype('str'))\ntrain['Embarked'] = le.fit_transform(train['Embarked'].astype('str'))\ntrain['Ticket'] = le.fit_transform(train['Ticket'].astype('category'))\ntrain['Sex'] = le.fit_transform(train['Sex'].astype('category'))\n\n# Test set\ntest['Cabin'] = le.fit_transform(test['Cabin'].astype('str'))\ntest['Embarked'] = le.fit_transform(test['Embarked'].astype('str'))\ntest['Ticket'] = le.fit_transform(test['Ticket'].astype('category'))\ntest['Sex'] = le.fit_transform(test['Sex'].astype('category'))\n\ntrain.head()","04db2e1f":"from sklearn.impute import SimpleImputer \n\ntrain_imputed = pd.DataFrame(SimpleImputer().fit_transform(train))\ntrain_imputed.columns = train.columns\n\ntest_imputed = pd.DataFrame(SimpleImputer().fit_transform(test))\ntest_imputed.columns = test.columns\n\ntrain = train_imputed\ntest = test_imputed","566e9448":"X_train = train.copy().drop(columns = ['Survived'])\ny_train = train.copy()['Survived']\n\nX_train.head()","7043560b":"from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\nfrom sklearn.metrics import make_scorer, roc_auc_score\n\nsearch_space = [\n  {\n    'max_depth': [60, None],\n     'max_features': ['auto', 'sqrt'],\n     'min_samples_leaf': [1, 2, 4],\n     'min_samples_split': [2, 5, 10],\n     'n_estimators': [200, 400, 600, 800, 1000]\n  }\n]\n\ncv_method = StratifiedKFold(n_splits=5, shuffle = True, random_state=0)\nscoring = {'AUC':make_scorer(roc_auc_score)}","5734165d":"from sklearn.ensemble import RandomForestClassifier\n\noptimizer = RandomizedSearchCV(\n  estimator = RandomForestClassifier(),\n  param_distributions=search_space,\n  cv=cv_method,\n  scoring=scoring,\n  refit='AUC',\n  return_train_score = True,\n  verbose=1,\n  n_iter = 100,\n  n_jobs = 10, \n)\n\nrf_classifier = optimizer.fit(X_train, y_train)","38ad2b41":"features = X_train.columns\nimp_dict = {features[i]:optimizer.best_estimator_.feature_importances_[i] for i in range(len(features))}\nimp_dict = sorted(imp_dict.items(), key=lambda x: x[1])\nprint(imp_dict)\n\nplt.bar(*zip(*imp_dict))\nplt.xticks(rotation=\"vertical\")\nplt.show()","e6304ab3":"y_pred = rf_classifier.predict(test)\npd.DataFrame(y_pred).head()","a07ab299":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test.PassengerId.values.astype('int32')\nsubmission['Survived'] = y_pred.astype('int32')\n\nsubmission.to_csv('submission.csv',index = False)\nsubmission.head()","855c2531":"# Imputing missing values","9f4f28cd":"## Feature importance","83b127b2":"## Fitting to train set","f435c702":"# Random Forest Classifier","b2b1d759":"# Dropping name column","c67f0d73":"# Codifying categorical variables","0a3de669":"# Submission","4b3c5d16":"# Train and test sets","0d6eeb29":"## X and y split","9b09519c":"## Hyperparameter tuning","3dfa2a46":"## Testing","02a88d05":"# Load packages"}}