{"cell_type":{"e1b82a63":"code","d6827b6e":"code","e7cddf99":"code","8efa2c8a":"code","a9dc09c9":"code","bb2656a5":"code","c829c074":"code","8c042369":"code","6837c96b":"code","e428f655":"code","011a2fed":"code","93dbf66b":"code","eea0b40b":"markdown"},"source":{"e1b82a63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6827b6e":"\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","e7cddf99":"#Amac\u0131m\u0131z bu yolculu\u011fa ba\u015flad\u0131\u011f\u0131m\u0131z noktaya tekrar geri gelmek.\n#Ve her bir noktaya sadece 1 kere u\u011framak. \n#Ayn\u0131 zamanda da hi\u00e7bir noktay\u0131 atlamamak\nnp.random.seed(1)\nx, y = -3, 8     # start\n\neksenler=np.random.randint(-15,20,(20,2)) #random kordinat de\u011ferlerimiz -15'le 20 aras\u0131nda.\n#Toplamda 20 adet olu\u015fturuyoruz, ve hepsi 2X2 boyutlu \neksenler=np.insert(eksenler,0,(x,y),axis=0)\neksenler=np.insert(eksenler,len(eksenler),(x,y),axis=0)\n# Burada da \u00f6nceden olu\u015fturdu\u011fumuz random koordinat de\u011ferlerimizin \n# ba\u015f\u0131na ve sonuna ba\u015flang\u0131\u00e7 noktam\u0131z\u0131 ekledik. Ba\u015flang\u0131\u00e7 noktam\u0131z (-3,8)\ncoord=eksenler.copy()\nplt.figure(figsize=(8,8))\nfor i in range(1,len(eksenler)-1):\n    plt.plot(eksenler[i][0],eksenler[i][1],\"go\",markersize=10)\nprint(\"1 Numaral\u0131 \u00e7izim a\u015fa\u011f\u0131dad\u0131r!! \")\n#Burada ise rastgele perm\u00fctasyon sonucu olu\u015fturdu\u011fumuz \n#noktalar\u0131m\u0131z\u0131 (limanlar\u0131m\u0131z\u0131) ekledik.\nplt.show()\n\n\nmy_list=list()\nfor i in range(2,(len(eksenler))):\n    t=\"hx\"+\"i\"\n    t2=\"hy\"+\"i\"\n    exec(\"%s = %d\" % (t, eksenler[i-1][0])) \n    exec(\"%s = %d\" % (t2, eksenler[i-1][1]))\n    my_list.append([hxi,hyi])\n\nyolx = [x]\nyoly = [y]\ndef ciz():\n    global x,y\n    plt.figure(figsize=(9,9))\n    plt.xticks(np.arange(-25,27))\n    plt.yticks(np.arange(-25,27))\n    for i in my_list:\n        plt.plot(i[0],i[1],\"go\",markersize=10)\n    \n#    plt.plot(rx,ry,\"s\",color=\"red\",markersize=40)\n    \n    plt.plot(x, y, 'r^',color=\"magenta\",markersize=10)\n    plt.plot(yolx, yoly)\n    plt.axis((eksenler.min(axis=0)[0]-3,eksenler.max(axis=0)[0]+3,\n              eksenler.min(axis=0)[1]-3,eksenler.max(axis=0)[1]+3))\n    plt.grid()\n    plt.show()\nprint(\"2 numaral\u0131 \u00e7izim a\u015fa\u011f\u0131dad\u0131r!!\")\nciz()\n# Buradaysa pembeli \u00fc\u00e7gen bizim ba\u015flang\u0131\u00e7 ve dolay\u0131s\u0131yla da biti\u015f noktam\u0131z.\n#Ye\u015fil noktalar ise benim u\u011frayaca\u011f\u0131m limanlar.\n\n","8efa2c8a":"def calculate_distance(coord,X1):\n    X2=X1.copy()\n#    X2=np.append(X2,16)\n#    X2=np.insert(X2,0,16)\n    a1=coord[X2[:-1],:]\n    a2=coord[X2[1:],:]\n    return np.sum(np.sqrt(np.sum((a1-a2)**2,axis=1)))\n#Yukar\u0131da 2 nokta aras\u0131ndaki mesafeyi hesaplad\u0131k.a1 ve a2 \n#olarak da yapt\u0131\u011f\u0131m\u0131z \u015fey ise limanlar\u0131n\u0131 kooridnatlar\u0131n\u0131 \n#1'er birim kayd\u0131rarak,aradaki mesafenin bulunmas\u0131n\u0131 daha \n#kolay bir \u015fekilde halledebilmek.\n\ndef generate_sol(X_old):\n    X=X_old.copy()\n    while True:\n        r1,r2,r3,r4=np.random.choice(range(1,len(eksenler)-1),4)\n        my_set=set()\n        my_set.add(r1)\n        my_set.add(r2)\n        my_set.add(r3)\n        my_set.add(r4)    \n        if len(my_set)==4:\n            X[r1],X[r2]=X[r2],X[r1]\n            X[r3],X[r4]=X[r4],X[r3]\n            break   \n    return X\n# Buradaysa ba\u015flang\u0131\u00e7ta rastge\u015fle \u00e7izdi\u011fimiz yolu s\u00fcrekli de\u011fi\u015ftiriyoruz.\n\ndef plot(coord,X_old):\n    X=X_old.copy()\n#    X=np.append(X,X)\n    plt.figure(figsize=(11,11))\n    plt.axis((-21,21,-21,21))\n    plt.xticks(np.arange(-21,21))\n    plt.yticks(np.arange(-21,21))\n    plt.grid()\n    plt.plot(x, y, 'r^',color=\"magenta\",markersize=10)\n    plt.plot(coord[X,0],coord[X,1],\"-*\")        \n# Bu k\u0131s\u0131m sadece \u00e7izdirme yap\u0131lmaktad\u0131r.","a9dc09c9":"def sunum():\n    np.random.seed(42)\n    my_list=list()\n    X_old=np.random.permutation(range(1,len(eksenler)-1))\n    X_old=np.append(X_old,len(eksenler)-1)\n    X_old=np.insert(X_old,0,len(eksenler)-1)\n    f_old=calculate_distance(coord,X_old)\n    my_list.append(X_old)\n    my_list.append(f_old)\n    return my_list\n\ndef olcum(n):\n    X_old=sunum()[0]\n    f_old=sunum()[1]\n    distances=[]\n    my_list1=[]\n    \n    for i in range(n):\n        X_new=generate_sol(X_old)\n        f_new=calculate_distance(coord,X_new)\n        if f_new < f_old:\n            f_old=f_new\n            X_old=X_new\n        distances.append(f_old)\n    my_list1.append(X_old)\n    my_list1.append(f_old)\n    my_list1.append(distances)\n    return my_list1\n\ndef yazim(f):\n    cevap=olcum(f)\n    print(\"f_old: \",cevap[0])\n    print(\"X_old: \",cevap[1])\n    plot(coord,cevap[0])\n    plt.show()\n    plt.plot(cevap[2])\n    ","bb2656a5":"\nyazim(1)","c829c074":"yazim(1500)\n","8c042369":"yazim(5000)","6837c96b":"def olcum2(n,T1,T2,T3):\n    X_old=sunum()[0]\n    f_old=sunum()[1]\n    distances=[]\n    my_list1=[]\n    T=100\n    cooling_rate=T1  \n    cooling_rate1=T2\n    for i in range(n):\n        X_new=generate_sol(X_old)\n        f_new=calculate_distance(coord,X_new)\n        if f_new < f_old:\n            f_old=f_new\n            X_old=X_new\n        else:\n            if np.random.rand()<np.exp(-(f_new-f_old)\/T):\n                f_old=f_new\n                X_old=X_new\n        if T>=T3:\n            T = T * cooling_rate\n        else:\n            T = T * cooling_rate1            \n        distances.append(f_old)\n    my_list1.append(X_old)\n    my_list1.append(f_old)\n    my_list1.append(distances)\n    return my_list1\ndef yazim2(n,T1,T2,T3):\n    cevap=olcum2(n,T1,T2,T3)\n    print(\"f_old: \",cevap[0],\"\")\n    print(\"X_old: \",cevap[1],)\n    plot(coord,cevap[0])\n    plt.show()\n    plt.plot(cevap[2])\n    ","e428f655":"yazim2(100,0.99,0.15,50)","011a2fed":"yazim2(5000,0.99,0.15,50)","93dbf66b":"yazim2(1500,0.99,0.75,70)","eea0b40b":"## YUKARIYA KADAR OLAN KISIMDA LOCAL OPT\u0130MUMDA KALMA OLASILI\u011eIMIZ Y\u00dcKSEK"}}