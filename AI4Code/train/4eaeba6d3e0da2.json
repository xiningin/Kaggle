{"cell_type":{"274adead":"code","4c4776be":"code","c24ce88a":"code","cb2c5cb8":"code","17071008":"markdown","809e0e25":"markdown","31cd5b94":"markdown","9a79f019":"markdown","59032378":"markdown","331b6121":"markdown","8072639f":"markdown","9db0b0f9":"markdown","9ebbd03a":"markdown","6b09e923":"markdown","eb576065":"markdown"},"source":{"274adead":"import random","4c4776be":"points_n = 100000000\nlength = 10000","c24ce88a":"class Monte_carlo_for_pi():\n    n_points = None\n    length = None\n    \n    def __init__(self, n_points=100000, length=1000):\n        ''' Input: \n            n_points - number of points for experiment, \n            length - side length of a square'''\n        self.n_points = n_points\n        self.length = n_points\n        self.center_x = self.length \/ 2\n        self.center_y = self.length \/ 2\n        self.radius = self.length \/ 2\n    \n    def in_circle(self, x, y):\n        return (x - self.center_x)**2 + (y - self.center_y)**2 < self.radius**2\n    \n    def compute_pi(self):\n        is_inside = 0\n        for i in range(self.n_points): \n            if self.in_circle(random.randint(1, self.length), random.randint(1, self.length)):\n                is_inside += 1\n        return (is_inside \/ self.n_points) * 4","cb2c5cb8":"%%time\nmc = Monte_carlo_for_pi(n_points=points_n, length=length)\nmc.compute_pi()","17071008":"$$ lim_{(Npoints\u2192\u221e)}\u2061(P2-P1) = 0 $$","809e0e25":"When modeling, we use pseudo-random numbers, which are not a random process.\nTherefore, the last expression, unfortunately, is not strictly executed.","31cd5b94":"$$ \u03c0 = {4 * N_{in-circle} \\over N_{all-points}} $$","9a79f019":"![CirclePic.jpg](attachment:CirclePic.jpg)","59032378":"$$ {\u03c0 \\over 4} = {N_{in-circle} \\over N_{all-points}} $$","331b6121":"Therefore:","8072639f":"$$ P1 = {S_{circle} \\over S_{square}} = {\u03c0R^2 \\over a^2} = {\u03c0R^2 \\over (2 R )^2} = {\u03c0 \\over 4} $$","9db0b0f9":"The probability of a point falling into a circle can also be calculated after a numerical experiment is even simpler: calculate the number of points in the circle and divide them by the total number of points set:","9ebbd03a":"# Monte Carlo Calculation of \u03c0\n\nThe essence of the calculation is that we take a square with side a = 2 R, enter a circle of radius R into it, and start randomly putting points inside the square. Geometrically, the probability P1 that the point falls into the circle is equal to the ratio of the areas of the circle and the square:","6b09e923":"$$ P2 = {N_{in-circle} \\over N_{all-points}} $$","eb576065":"So, with a large number of points in a numerical experiment, the probabilities should behave as follows:"}}