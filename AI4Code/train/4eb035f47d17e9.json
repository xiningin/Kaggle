{"cell_type":{"e115b899":"code","d9db95ef":"code","e9f13956":"code","4438ff39":"code","73d2941f":"code","7edfd3f7":"code","020a9309":"code","86a5d178":"code","66fdc8cb":"code","80fd93e3":"code","98bdc975":"code","d5825329":"code","e02c2e47":"code","7042a922":"code","1a3d69bc":"code","9f64bf99":"code","bac37c0e":"code","e43ce0d4":"code","190fe35e":"code","9cd1b847":"code","a714c288":"code","f7105660":"code","a5af194d":"code","357b1061":"code","7f60a8df":"code","6fa30db5":"code","da18296a":"code","25e23072":"code","33c39d78":"code","4e06451c":"code","3f7f3560":"code","c7f601ec":"code","c24ed891":"code","28f6bb28":"code","20fb6f06":"code","67898af0":"code","2ea01ffa":"code","59e5d8af":"code","68684092":"code","45d1d229":"code","1fa71726":"code","090847ae":"code","cc319b3c":"code","e21d0730":"code","107c2cbb":"code","2739ca5f":"code","f04965f4":"code","59c25594":"code","5b1d518c":"code","db9462ab":"code","e6a94439":"code","4ff6ea86":"code","747165d5":"code","92ca6c77":"code","e1b14430":"code","e0d9f4b2":"code","619fbf4c":"code","e062db6c":"code","2c42632d":"code","deda3777":"code","ae7ba611":"code","cf4a1651":"code","609ce67d":"code","ecbc2ffc":"code","42d9a974":"code","d4fb5dcc":"code","18e85f53":"code","0697ccca":"code","df4c4797":"code","3e298892":"code","008ce843":"code","1d08c1d7":"code","77abb265":"code","755a67d4":"code","8a9aa0a8":"code","3d30c53f":"code","69b700bd":"code","b09d84d3":"code","41b58242":"code","2d83b4c6":"code","61a9c759":"code","1c291804":"code","ab18239b":"code","aa71f873":"code","b2eb036a":"code","d62fd91c":"code","8c2b2f70":"code","e6a6d853":"code","9c5ab975":"code","2398f694":"code","f796991a":"code","21f3ec29":"code","aa8ec1af":"code","bd26a25d":"code","379298a6":"code","773e5b12":"code","da146b67":"markdown","906c6237":"markdown","f0d9779c":"markdown","84a72306":"markdown","3ad96ef6":"markdown","ef8fb4e4":"markdown","9ce957e6":"markdown","8237e735":"markdown","d77e5cdc":"markdown","7d2b2334":"markdown","23f72190":"markdown","7ccd7eea":"markdown","a7812b55":"markdown","3cea0b89":"markdown"},"source":{"e115b899":"import os\nimport numpy as np \nimport pandas as pd \nimport scipy.sparse as sp\nfrom itertools import islice, cycle\nfrom more_itertools import pairwise\nfrom tqdm.auto import tqdm\n\n\nos.environ['OPENBLAS_NUM_THREADS'] = '1'\nos.environ['MKL_NUM_THREADS'] = '1'\n\nprint('Dataset:')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d9db95ef":"df = pd.read_pickle('..\/input\/metrics-validation-strategies-and-baselines\/interactions_preprocessed.pickle')\ndf_users = pd.read_pickle('..\/input\/metrics-validation-strategies-and-baselines\/users_preprocessed.pickle')\ndf_items = pd.read_pickle('..\/input\/metrics-validation-strategies-and-baselines\/items_preprocessed.pickle')\n\ndf.shape, df_users.shape, df_items.shape","e9f13956":"df.head()","4438ff39":"users_inv_mapping = dict(enumerate(df['user_id'].unique()))\nusers_mapping = {v: k for k, v in users_inv_mapping.items()}\nlen(users_mapping)","73d2941f":"items_inv_mapping = dict(enumerate(df['item_id'].unique()))\nitems_mapping = {v: k for k, v in items_inv_mapping.items()}\nlen(items_mapping)","7edfd3f7":"df_items['title'] = df_items['title'].str.lower()","020a9309":"item_titles = pd.Series(df_items['title'].values, index=df_items['id']).to_dict()\nlen(item_titles), item_titles[128115]","86a5d178":"title_items = df_items.groupby('title')['id'].agg(list)\ntitle_items","66fdc8cb":"title_count = title_items.map(len)\ntitle_count.value_counts()","80fd93e3":"title_items[title_count > 1].tail()","98bdc975":"df_items[df_items['title'] == '\u044f\u0449\u0438\u043a \u043f\u0430\u043d\u0434\u043e\u0440\u044b']","d5825329":"title_items[title_count > 1].head()","e02c2e47":"df_items[df_items['title'] == '451 \u0433\u0440\u0430\u0434\u0443\u0441 \u043f\u043e \u0444\u0430\u0440\u0435\u043d\u0433\u0435\u0439\u0442\u0443']","7042a922":"df['rating'] = np.array(df['rating'].values, dtype=np.float32)\n\ndf.loc[df['item_id'].isin([44681, 162716])].groupby('item_id').agg({\n    'progress': np.size,\n    'rating': ['mean'],\n    'start_date': ['min', 'max'],\n})","1a3d69bc":"class TimeRangeSplit():\n    \"\"\"\n        https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.date_range.html\n    \"\"\"\n    def __init__(self, \n                 start_date, \n                 end_date=None, \n                 freq='D', \n                 periods=None, \n                 tz=None, \n                 normalize=False, \n                 closed=None, \n                 train_min_date=None,\n                 filter_cold_users=True, \n                 filter_cold_items=True, \n                 filter_already_seen=True):\n        \n        self.start_date = start_date\n        if end_date is None and periods is None:\n            raise ValueError(\"Either 'end_date' or 'periods' must be non-zero, not both at the same time.\")\n\n        self.end_date = end_date\n        self.freq = freq\n        self.periods = periods\n        self.tz = tz\n        self.normalize = normalize\n        self.closed = closed\n        self.train_min_date = pd.to_datetime(train_min_date, errors='raise')\n        self.filter_cold_users = filter_cold_users\n        self.filter_cold_items = filter_cold_items\n        self.filter_already_seen = filter_already_seen\n\n        self.date_range = pd.date_range(\n            start=start_date, \n            end=end_date, \n            freq=freq, \n            periods=periods, \n            tz=tz, \n            normalize=normalize, \n            closed=closed)\n\n        self.max_n_splits = max(0, len(self.date_range) - 1)\n        if self.max_n_splits == 0:\n            raise ValueError(\"Provided parametrs set an empty date range.\") \n\n    def split(self, \n              df, \n              user_column='user_id',\n              item_column='item_id',\n              datetime_column='date',\n              fold_stats=False):\n        df_datetime = df[datetime_column]\n        if self.train_min_date is not None:\n            train_min_mask = df_datetime >= self.train_min_date\n        else:\n            train_min_mask = df_datetime.notnull()\n\n        date_range = self.date_range[(self.date_range >= df_datetime.min()) & \n                                     (self.date_range <= df_datetime.max())]\n\n        for start, end in pairwise(date_range):\n            fold_info = {\n                'Start date': start,\n                'End date': end\n            }\n            train_mask = train_min_mask & (df_datetime < start)\n            train_idx = df.index[train_mask]\n            if fold_stats:\n                fold_info['Train'] = len(train_idx)\n\n            test_mask = (df_datetime >= start) & (df_datetime < end)\n            test_idx = df.index[test_mask]\n            \n            if self.filter_cold_users:\n                new = np.setdiff1d(\n                    df.loc[test_idx, user_column].unique(), \n                    df.loc[train_idx, user_column].unique())\n                new_idx = df.index[test_mask & df[user_column].isin(new)]\n                test_idx = np.setdiff1d(test_idx, new_idx)\n                test_mask = df.index.isin(test_idx)\n                if fold_stats:\n                    fold_info['New users'] = len(new)\n                    fold_info['New users interactions'] = len(new_idx)\n\n            if self.filter_cold_items:\n                new = np.setdiff1d(\n                    df.loc[test_idx, item_column].unique(), \n                    df.loc[train_idx, item_column].unique())\n                new_idx = df.index[test_mask & df[item_column].isin(new)]\n                test_idx = np.setdiff1d(test_idx, new_idx)\n                test_mask = df.index.isin(test_idx)\n                if fold_stats:\n                    fold_info['New items'] = len(new)\n                    fold_info['New items interactions'] = len(new_idx)\n\n            if self.filter_already_seen:\n                user_item = [user_column, item_column]\n                train_pairs = df.loc[train_idx, user_item].set_index(user_item).index\n                test_pairs = df.loc[test_idx, user_item].set_index(user_item).index\n                intersection = train_pairs.intersection(test_pairs)\n                test_idx = test_idx[~test_pairs.isin(intersection)]\n                # test_mask = rd.df.index.isin(test_idx)\n                if fold_stats:\n                    fold_info['Known interactions'] = len(intersection)\n\n            if fold_stats:\n                fold_info['Test'] = len(test_idx)\n\n            yield (train_idx, test_idx, fold_info)\n\n    def get_n_splits(self, df, datetime_column='date'):\n        df_datetime = df[datetime_column]\n        if self.train_min_date is not None:\n            df_datetime = df_datetime[df_datetime >= self.train_min_date]\n\n        date_range = self.date_range[(self.date_range >= df_datetime.min()) & \n                                     (self.date_range <= df_datetime.max())]\n\n        return max(0, len(date_range) - 1)","9f64bf99":"last_date = df['start_date'].max().normalize()\nfolds = 7\nstart_date = last_date - pd.Timedelta(days=folds)\nstart_date, last_date","bac37c0e":"cv = TimeRangeSplit(start_date=start_date, periods=folds+1)\n\ncv.max_n_splits, cv.get_n_splits(df, datetime_column='start_date')","e43ce0d4":"cv.date_range","190fe35e":"folds_with_stats = list(cv.split(\n    df, \n    user_column='user_id',\n    item_column='item_id',\n    datetime_column='start_date',\n    fold_stats=True\n))\n\nfolds_info_with_stats = pd.DataFrame([info for _, _, info in folds_with_stats])","9cd1b847":"folds_info_with_stats","a714c288":"fold_dates = [(info['Start date'], info['End date']) for _, _, info in folds_with_stats]\nfold_dates","f7105660":"def compute_metrics(df_true, df_pred, top_N):\n    result = {}\n    test_recs = df_true.set_index(['user_id', 'item_id']).join(df_pred.set_index(['user_id', 'item_id']))\n    test_recs = test_recs.sort_values(by=['user_id', 'rank'])\n\n    test_recs['users_item_count'] = test_recs.groupby(level='user_id')['rank'].transform(np.size)\n    test_recs['reciprocal_rank'] = (1 \/ test_recs['rank']).fillna(0)\n    test_recs['cumulative_rank'] = test_recs.groupby(level='user_id').cumcount() + 1\n    test_recs['cumulative_rank'] = test_recs['cumulative_rank'] \/ test_recs['rank']\n    \n    users_count = test_recs.index.get_level_values('user_id').nunique()\n    for k in range(1, top_N + 1):\n        hit_k = f'hit@{k}'\n        test_recs[hit_k] = test_recs['rank'] <= k\n        result[f'Precision@{k}'] = (test_recs[hit_k] \/ k).sum() \/ users_count\n        result[f'Recall@{k}'] = (test_recs[hit_k] \/ test_recs['users_item_count']).sum() \/ users_count\n\n    result[f'MAP@{top_N}'] = (test_recs[\"cumulative_rank\"] \/ test_recs[\"users_item_count\"]).sum() \/ users_count\n    result[f'MRR'] = test_recs.groupby(level='user_id')['reciprocal_rank'].max().mean()\n    return pd.Series(result)","a5af194d":"train_idx, test_idx, info = folds_with_stats[0]\n\ntrain = df.loc[train_idx]\ntest = df.loc[test_idx]\ntrain.shape, test.shape","357b1061":"info['Train'], info['Test']","7f60a8df":"def get_coo_matrix(df, \n                   user_col='user_id', \n                   item_col='item_id', \n                   weight_col=None, \n                   users_mapping=users_mapping, \n                   items_mapping=items_mapping):\n    if weight_col is None:\n        weights = np.ones(len(df), dtype=np.float32)\n    else:\n        weights = df[weight_col].astype(np.float32)\n\n    interaction_matrix = sp.coo_matrix((\n        weights, \n        (\n            df[user_col].map(users_mapping.get), \n            df[item_col].map(items_mapping.get)\n        )\n    ))\n    return interaction_matrix","6fa30db5":"train_mat = get_coo_matrix(train).tocsr()\ntrain_mat","da18296a":"from implicit.nearest_neighbours import CosineRecommender, BM25Recommender, TFIDFRecommender","25e23072":"cosine_model = CosineRecommender(K=10)\ncosine_model.fit(train_mat.T) # ","33c39d78":"top_N = 10\nuser_id = test['user_id'].iloc[0]\nrow_id = users_mapping[user_id]\nprint(f'\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id}, \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 - {row_id}')","4e06451c":"recs = cosine_model.recommend(row_id, train_mat, N=top_N, filter_already_liked_items=True)\nrecs = pd.DataFrame(recs, columns=['col_id', 'similarity'])\nrecs","3f7f3560":"recs['item_id'] = recs['col_id'].map(items_inv_mapping.get)\nrecs['title'] = recs['item_id'].map(item_titles.get)\nrecs","c7f601ec":"def generate_implicit_recs_mapper(model, train_matrix, N, user_mapping, item_inv_mapping):\n    def _recs_mapper(user):\n        user_id = user_mapping[user]\n        recs = model.recommend(user_id, \n                               train_matrix, \n                               N=N, \n                               filter_already_liked_items=True)\n        return [item_inv_mapping[item] for item, _ in recs]\n    return _recs_mapper","c24ed891":"mapper = generate_implicit_recs_mapper(cosine_model, train_mat, top_N, users_mapping, items_inv_mapping)\nmapper","28f6bb28":"%time\nrecs = pd.DataFrame({\n    'user_id': test['user_id'].unique()\n})\nrecs['item_id'] = recs['user_id'].map(mapper)\nrecs.head()","20fb6f06":"recs = recs.explode('item_id')\nrecs['rank'] = recs.groupby('user_id').cumcount() + 1\nrecs.head(top_N + 2)","67898af0":"metrics = compute_metrics(test, recs, top_N)\nmetrics","2ea01ffa":"%%time\nvalidation_results = pd.DataFrame()\n\nfor train_idx, test_idx, info in folds_with_stats:\n    print(f\"test range - from {info['Start date']} to {info['End date']}\")\n    train = df.loc[train_idx]\n    test = df.loc[test_idx]\n    print(f'train shape - {train.shape}, test shape - {test.shape}')\n    \n    train_mat = get_coo_matrix(train).tocsr()\n    \n    cosine_model = CosineRecommender(K=10)\n    cosine_model.fit(train_mat.T) # \n    \n    mapper = generate_implicit_recs_mapper(cosine_model, train_mat, top_N, users_mapping, items_inv_mapping)\n    \n    recs = pd.DataFrame({\n        'user_id': test['user_id'].unique()\n    })\n    recs['item_id'] = recs['user_id'].map(mapper)\n    recs = recs.explode('item_id')\n    recs['rank'] = recs.groupby('user_id').cumcount() + 1\n    fold_result = compute_metrics(test, recs, top_N)\n    fold_result.at['Date'] = info['Start date']\n    fold_result.at['argv'] = 'K=10'\n    fold_result.at['Model'] = 'cosine model'\n    \n    validation_results = validation_results.append(fold_result, ignore_index=True)","59e5d8af":"validation_results","68684092":"validation_results.agg({\n    'MRR': ['mean', 'std', 'min', 'max'],\n    'MAP@10': ['mean', 'std', 'min', 'max'],\n    'Recall@10': ['mean', 'std', 'min', 'max'],\n})","45d1d229":"for model_class in [BM25Recommender, TFIDFRecommender]:\n    for train_idx, test_idx, info in folds_with_stats:\n        print(f\"test range - from {info['Start date']} to {info['End date']}\")\n        train = df.loc[train_idx]\n        test = df.loc[test_idx]\n        print(f'train shape - {train.shape}, test shape - {test.shape}')\n        \n        train_mat = get_coo_matrix(train).tocsr()\n        \n        model = model_class(K=10)\n        model.fit(train_mat.T, show_progress=False) \n\n        mapper = generate_implicit_recs_mapper(model, train_mat, top_N, users_mapping, items_inv_mapping)\n\n        recs = pd.DataFrame({\n            'user_id': test['user_id'].unique()\n        })\n        recs['item_id'] = recs['user_id'].map(mapper)\n        recs = recs.explode('item_id')\n        recs['rank'] = recs.groupby('user_id').cumcount() + 1\n        fold_result = compute_metrics(test, recs, top_N)\n        fold_result.at['Date'] = info['Start date']\n        fold_result.at['argv'] = 'K=10'\n        fold_result.at['Model'] = model.__class__.__name__\n\n        validation_results = validation_results.append(fold_result, ignore_index=True)","1fa71726":"validation_results","090847ae":"validation_results.groupby(['Model', 'argv']).agg({\n    'MRR': ['mean', 'std', 'min', 'max'],\n    'MAP@10': ['mean', 'std', 'min', 'max'],\n    'Recall@10': ['mean', 'std', 'min', 'max'],\n})","cc319b3c":"model","e21d0730":"model.similarity","107c2cbb":"model.similar_items(7789, N=10)","2739ca5f":"def get_similar_books(title, model, N=10, idx=0, \n                      title_items=title_items, item_titles=item_titles, items_mapping=items_mapping, items_inv_mapping=items_inv_mapping):\n    item_ids = title_items.at[title]\n    if len(item_ids) == 1:\n        item_id = item_ids[0]\n    else:\n        item_id = item_ids[idx]\n    \n    col_id = items_mapping[item_id]\n    similar = model.similar_items(col_id, N=N)\n    similar = pd.DataFrame(similar, columns=['col_id', 'similarity'])\n    similar['item_id'] = similar['col_id'].map(items_inv_mapping.get)\n    similar['title'] = similar['item_id'].map(item_titles.get)\n    return similar","f04965f4":"get_similar_books('\u043c\u0430\u0441\u0442\u0435\u0440 \u0438 \u043c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430', model)","59c25594":"get_similar_books('\u043f\u0438\u043a\u043d\u0438\u043a \u043d\u0430 \u043e\u0431\u043e\u0447\u0438\u043d\u0435', model)","5b1d518c":"from implicit.als import AlternatingLeastSquares","db9462ab":"for train_idx, test_idx, info in folds_with_stats:\n    print(f\"test range - from {info['Start date']} to {info['End date']}\")\n    train = df.loc[train_idx]\n    test = df.loc[test_idx]\n    print(f'train shape - {train.shape}, test shape - {test.shape}')\n    \n    train_mat = get_coo_matrix(train).tocsr()\n    \n    als_model = AlternatingLeastSquares(factors=32, iterations=30, num_threads=4)\n    als_model.fit(train_mat.T) \n    \n    mapper = generate_implicit_recs_mapper(als_model, train_mat, top_N, users_mapping, items_inv_mapping)\n    \n    recs = pd.DataFrame({\n        'user_id': test['user_id'].unique()\n    })\n    recs['item_id'] = recs['user_id'].map(mapper)\n    recs = recs.explode('item_id')\n    recs['rank'] = recs.groupby('user_id').cumcount() + 1\n    metrics = compute_metrics(test, recs, top_N)\n    \n    fold_result = pd.Series(metrics)\n    fold_result.at['Date'] = info['Start date']\n    fold_result.at['argv'] = 'factors=32 iterations=30'\n    fold_result.at['Model'] = als_model.__class__.__name__\n    \n    validation_results = validation_results.append(fold_result, ignore_index=True)","e6a94439":"validation_results.groupby(['Model', 'argv']).agg({\n    'MRR': ['mean', 'std', 'min', 'max'],\n    'MAP@10': ['mean', 'std', 'min', 'max'],\n    'Recall@10': ['mean', 'std', 'min', 'max'],\n})","4ff6ea86":"als_model.user_factors.shape, als_model.item_factors.shape","747165d5":"get_similar_books('\u043c\u0430\u0441\u0442\u0435\u0440 \u0438 \u043c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430', als_model)","92ca6c77":"get_similar_books('\u043f\u0438\u043a\u043d\u0438\u043a \u043d\u0430 \u043e\u0431\u043e\u0447\u0438\u043d\u0435', als_model)","e1b14430":"similar_users = als_model.similar_users(0, N=5)\nsimilar_users","e0d9f4b2":"similar_users = als_model.similar_users(144, N=5)\nfor (uid, sim) in similar_users:\n    user_id = users_inv_mapping[uid]\n    print(f'User ID - {user_id} ({sim:.4f})')\n    user_mask = train['user_id'] == user_id\n    user_items = train.loc[user_mask, 'item_id'].map(item_titles.get)\n    print(user_items.to_string(index=False))","619fbf4c":"from lightfm.data import Dataset\nfrom lightfm import LightFM","e062db6c":"dataset = Dataset()","2c42632d":"dataset.fit(df['user_id'].unique(), df['item_id'].unique())","deda3777":"df_users['age'] = df_users['age'].cat.add_categories('age_unknown')\ndf_users['age'] = df_users['age'].fillna('age_unknown')\nage_features = df_users['age'].unique()\nage_features","ae7ba611":"df_users['sex'] = np.array(df_users['sex'].astype(str))\ndf_users['sex'] = df_users['sex'].fillna('age_unknown')\nsex_features = df_users['sex'].unique()\nsex_features","cf4a1651":"users_features = np.append(age_features, sex_features)\nusers_features","609ce67d":"dataset.fit_partial(user_features=users_features)","ecbc2ffc":"df_items['genres'] = df_items['genres'].cat.add_categories('genre_unknown')\ndf_items['genres'] = df_items['genres'].fillna('genre_unknown')\ngenres = list(df_items['genres'].str.split(',').explode().unique())\nlen(genres)","42d9a974":"dataset.fit_partial(item_features=genres)","d4fb5dcc":"num_users, num_items = dataset.interactions_shape()\nnum_users, num_items","18e85f53":"lightfm_mapping = dataset.mapping()\nlightfm_mapping = {\n    'users_mapping': lightfm_mapping[0],\n    'user_features_mapping': lightfm_mapping[1],\n    'items_mapping': lightfm_mapping[2],\n    'item_features_mapping': lightfm_mapping[3],\n}\nprint('users_mapping len - ', len(lightfm_mapping['users_mapping']))\nprint('user_features_mapping len - ', len(lightfm_mapping['user_features_mapping']))\nprint('items_mapping len - ', len(lightfm_mapping['items_mapping']))\nprint('Users item_features_mapping len - ', len(lightfm_mapping['item_features_mapping']))","0697ccca":"lightfm_mapping['users_inv_mapping'] = {v: k for k, v in lightfm_mapping['users_mapping'].items()}\nlightfm_mapping['items_inv_mapping'] = {v: k for k, v in lightfm_mapping['items_mapping'].items()}","df4c4797":"num_user_features = dataset.user_features_shape()\nnum_show_features = dataset.item_features_shape()\nprint('Num user features: {} -> {}\\nnum item features: {} -> {}.'.format(\n    num_user_features[1] - num_users, num_user_features[1], \n    num_show_features[1] - num_items, num_show_features[1]))","3e298892":"def df_to_tuple_iterator(df):\n    return zip(*df.values.T)\n\ndef concat_last_to_list(t):\n    return (t[0], list(t[1:])[0])\n\ndef df_to_tuple_list_iterator(df):\n    return map(concat_last_to_list, zip(*df.values.T))","008ce843":"train_idx, test_idx, info = folds_with_stats[0]\n\ntrain = df.loc[train_idx]\ntest = df.loc[test_idx]","1d08c1d7":"train_mat, train_mat_weights = dataset.build_interactions(df_to_tuple_iterator(train[['user_id', 'item_id']]))\ntrain_mat","77abb265":"train_mat_weights","755a67d4":"df_users['features'] = df_users[['age', 'sex']].astype(str).apply(lambda x: list(x), axis=1)\ndf_users.head()","8a9aa0a8":"known_users_filter = df_users['user_id'].isin(df['user_id'].unique())\ntrain_user_features = dataset.build_user_features(\n    df_to_tuple_list_iterator(\n        df_users.loc[known_users_filter, ['user_id', 'features']]\n    )\n)\ntrain_user_features","3d30c53f":"df_items['features'] = df_items['genres'].str.split(',')\ndf_items.head()","69b700bd":"df_items['features'].map(len).value_counts(dropna=False)","b09d84d3":"known_items_filter = df_items['id'].isin(df['item_id'].unique())\ntrain_items_features = dataset.build_item_features(\n    df_to_tuple_list_iterator(\n        df_items.loc[known_items_filter, ['id', 'features']]\n    )\n)\ntrain_items_features","41b58242":"lfm_model = LightFM(no_components=64, learning_rate=0.05, loss='warp', max_sampled=5, random_state=23)","2d83b4c6":"num_epochs = 15\nfor _ in tqdm(range(num_epochs), total=num_epochs):\n    lfm_model.fit_partial(\n        train_mat, \n        user_features=train_user_features,\n        item_features=train_items_features,\n        num_threads=4\n    )","61a9c759":"top_N = 10\nuser_id = test['user_id'].iloc[0]\nrow_id = lightfm_mapping['users_mapping'][user_id]\nprint(f'\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {user_id}, \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 - {row_id}')","1c291804":"all_cols = list(lightfm_mapping['items_mapping'].values())\nlen(all_cols)","ab18239b":"pred = lfm_model.predict(row_id, all_cols, user_features=train_user_features, item_features=train_items_features, num_threads=4)\npred, pred.shape","aa71f873":"top_cols = np.argpartition(pred, -np.arange(top_N))[-top_N:][::-1]\ntop_cols","b2eb036a":"pred[top_cols]","d62fd91c":"np.max(pred)","8c2b2f70":"recs = pd.DataFrame({'col_id': top_cols})\nrecs['item_id'] = recs['col_id'].map(lightfm_mapping['items_inv_mapping'].get)\nrecs['title'] = recs['item_id'].map(item_titles.get)\nrecs","e6a6d853":"recs = pd.DataFrame({\n    'user_id': test['user_id'].unique()\n})","9c5ab975":"def generate_lightfm_recs_mapper(model, item_ids, known_items, user_features, item_features, N, user_mapping, item_inv_mapping, num_threads=4):\n    def _recs_mapper(user):\n        user_id = user_mapping[user]\n        recs = model.predict(user_id, item_ids, user_features=user_features, item_features=item_features, num_threads=num_threads)\n        \n        additional_N = len(known_items[user_id]) if user_id in known_items else 0\n        total_N = N + additional_N\n        top_cols = np.argpartition(recs, -np.arange(total_N))[-total_N:][::-1]\n        \n        final_recs = [item_inv_mapping[item] for item in top_cols]\n        if additional_N > 0:\n            filter_items = known_items[user_id]\n            final_recs = [item for item in final_recs if item not in filter_items]\n        return final_recs[:N]\n    return _recs_mapper","2398f694":"known_items = train.groupby('user_id')['item_id'].apply(list).to_dict()\nlen(known_items)","f796991a":"known_items[100]","21f3ec29":"mapper = generate_lightfm_recs_mapper(\n    lfm_model, \n    item_ids=all_cols, \n    known_items=known_items,\n    N=top_N,\n    user_features=train_user_features, \n    item_features=train_items_features, \n    user_mapping=lightfm_mapping['users_mapping'],\n    item_inv_mapping=lightfm_mapping['items_inv_mapping'],\n    num_threads=4\n)","aa8ec1af":"%%time\nrecs['item_id'] = recs['user_id'].map(mapper)","bd26a25d":"recs.head()","379298a6":"recs = recs.explode('item_id')\nrecs['rank'] = recs.groupby('user_id').cumcount() + 1","773e5b12":"metrics = compute_metrics(test, recs, top_N)\nmetrics","da146b67":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `K` \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0434\u0430\u0447\u0443 \u0442\u043e\u043f\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 `N` \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 `K`","906c6237":"# Implicit & LightFM\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c jupyter notebook \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c implicit \u0438 LightFM \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439\n\n* [Load data](#load-data)\n* [Validation](#validation)\n* [Implicit](#implicit)\n* [LightFM](#lightfm)\n* [Links](#links)","f0d9779c":"<a id=\"lightfm\"><\/a>\n# LightFM\n\n\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0444\u0438\u0447\u0435\u0439\n* \u0420\u0435\u043f\u043e - https:\/\/github.com\/lyst\/lightfm\n* \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f - https:\/\/making.lyst.com\/lightfm\/docs\/home.html\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b (\u043b\u0438\u0431\u043e csr_matrix, \u043b\u0438\u0431\u043e coo_matrix)\n\u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0434\u043d\u0430, \u0432\u0430\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e loss functions. \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 lightfm.data.Dataset \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0442\u0430\u043a \u0438 \u043c\u0430\u0442\u0440\u0438\u0446 \u0444\u0438\u0447\u0435\u0439","84a72306":"\u041a\u0430\u043a \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0448\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u044b. \n* \u0414\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0446\u0438\u0439 \u043d\u0443\u0436\u0435\u043d \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043d\u0430 \n    * `[(user_id1, item_id1), (user_id2, item_id2), ...]`  \n    * `[(user_id1, item_id1, weight), (user_id2, item_id2, weight), ...]`\n* \u0414\u043b\u044f \u0444\u0438\u0447\u0435\u0439 \u043d\u0443\u0436\u0435\u043d \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043d\u0430 \n    * `[(id, [feature1, feature2, ...]), (id, [feature1, feature2, ...]), ...]`  \n    * `[(id, {feature1: weight}), (id, {feature1: weight}), ...]`","3ad96ef6":"**\u041e\u0441\u043d\u043e\u0432\u0430\u044f \u0438\u0434\u0435\u044f** - \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u0438\u0447\u0438 \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0443. \u0415\u0441\u043b\u0438 \u0444\u0438\u0447\u0435\u0439 \u043d\u0435\u0442, \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 (\u0435\u0434\u0438\u043d\u0438\u0447\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e)\n![image.png](attachment:image.png)\n[image source](https:\/\/sites.northwestern.edu\/msia\/2019\/04\/24\/personalized-restaurant-recommender-system-using-hybrid-approach\/#:~:text=LightFM%20incorporates%20matrix%20factorization%20model,retain%20the%20original%20interaction%20matrix.&text=The%20latent%20embeddings%20could%20capture,items%2C%20which%20represent%20their%20tastes.)","ef8fb4e4":"## Item-to-item \u043c\u043e\u0434\u0435\u043b\u0438\n\n**\u0412\u0435\u043a\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430** - \u0432\u0435\u0441\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 (user_item) \u043c\u0430\u0442\u0440\u0438\u0446\u0430\n\n**\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439** - \u043f\u043e\u0438\u0441\u043a \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 (\u043f\u043e \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0439 \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u0438) \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0436\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0438 \u0432\u044b\u0434\u0430\u0447\u0430 \u0442\u043e\u043f\u0430 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n\n**\u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0442\u044e\u043d\u0438\u043d\u0433\u0430** - \u0432\u0437\u0432\u0435\u0448\u043d\u0438\u0435 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0432\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044b (\u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439), \u043a\u043e\u043b-\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 `K`","9ce957e6":"<a id=\"implicit\"><\/a>\n# Implicit\n\n\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0441 \u043d\u0435\u044f\u0432\u043d\u044b\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c.\n* \u0420\u0435\u043f\u043e - https:\/\/github.com\/benfred\/implicit\n* \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f - https:\/\/implicit.readthedocs.io\/en\/latest\/\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b (\u043b\u0438\u0431\u043e csr_matrix, \u043b\u0438\u0431\u043e coo_matrix) \u0441 \u0442\u0438\u043f\u043e\u043c float32\/float64","8237e735":"<a id=\"validation\"><\/a>\n# Validation\n\n\u0414\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0431\u0440\u0435\u043c 7 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u043d\u0435\u0439 \u0438 \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e (1 test fold - 1 \u0434\u0435\u043d\u044c).\n\n\u041d\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0445\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430. \u042d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434 \u043d\u0430\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u043d\u0430 train\/test","d77e5cdc":"## AlternatingLeastSquares\n\n**\u0412\u0435\u043a\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435** - \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u0437\u0430\u043c\u0438\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 (\u0441 \u0432\u0435\u0441\u0430\u043c\u0438) \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0430\u0442\u0440\u0438\u0446. \n\u041e\u0434\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 `[users x factors]` \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439,\n\u0434\u0440\u0443\u0433\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 `[items x factors]` \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\n\n**\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439** - \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0449\u0443\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0447\u0442\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e.\n\n**\u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0442\u044e\u043d\u0438\u043d\u0433\u0430** \n* \u0432\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n* `factors` - \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 (\u043e\u0431\u044b\u0447\u043d\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0438 2-\u043a\u0438, \u043e\u0442 16 \u0434\u043e 256)\n* `iterations` - \u043a\u043e\u043b-\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 (\u043e\u0442 10 \u0434\u043e 100)\n* `regularization` - \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 (\u0441\u0442\u0435\u043f\u0435\u043d\u0438 10-\u043a\u0438, \u043e\u0442 0.0001 \u0434\u043e 1)\n\n\u0415\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c GPU \u0447\u0435\u0440\u0435\u0437 `use_gpu=True` \u0438 ApproximateNearestNeighbors (\u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043c\u043e\u0434\u0435\u043b\u0438)","7d2b2334":"**\u0412\u0435\u043a\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435** - \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0438\u0445 \u0444\u0438\u0447\u0435\u0439.\n\n**\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439** - \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0449\u0443\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0447\u0442\u043e \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e.\n\n**\u041f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0442\u044e\u043d\u0438\u043d\u0433\u0430** \n* \u0432\u0437\u0432\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n* `loss` - \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n    * `logistic`\n    * `bpr`\n    * `warp`\n    * `warp-kos`\n* `no_components` - \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 (\u043e\u0431\u044b\u0447\u043d\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0438 2-\u043a\u0438, \u043e\u0442 16 \u0434\u043e 256)\n* `learning_rate` - \"\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\" \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n* `item_alpha`\/`user_alpha` - \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f (\u0441\u0442\u0435\u043f\u0435\u043d\u0438 10-\u043a\u0438, \u043e\u0442 0.0001 \u0434\u043e 1)","23f72190":"<a id=\"load-data\"><\/a>\n# Load data\n\n\u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0443\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 [metrics-validation-strategies-and-baselines](https:\/\/www.kaggle.com\/sharthz23\/metrics-validation-strategies-and-baselines\/output)","7ccd7eea":"<a id=\"links\"><\/a>\n# Links\n* https:\/\/www.benfrederickson.com\/distance-metrics\/ - \u0448\u0438\u043a\u0430\u0440\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u0440\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 kNN \u0434\u043b\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c (Item2Item, User2User)\n* https:\/\/habr.com\/ru\/post\/486802\/ - \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u0440\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b (\u0442\u0435\u043e\u0440\u0438\u044f)\n* https:\/\/github.com\/dmitryhd\/lightfm - \u0444\u043e\u0440\u043a lightfm \u043e\u0442 \u0440\u0435\u0431\u044f\u0442 \u0441 \u0410\u0432\u0438\u0442\u043e\n* https:\/\/habr.com\/ru\/company\/avito\/blog\/439206\/ - \u043e\u0431\u0437\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043a\u0430 \u043d\u0430 recsys challenge 2018","a7812b55":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0435, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u043c\u0438, CosineRecommender \u0441 K=10 \u0443\u0436\u0435 \u0434\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0447\u0435\u0442 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e","3cea0b89":"\u042d\u0442\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f Item-to-item \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u043e\u0436\u0438\u0434\u0430\u044e\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u043e\u0440\u0438\u0435\u043d\u0442\u0430\u0446\u0438\u0438 item_user, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 `fit` \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c `train_mat.T`"}}