{"cell_type":{"31b3db7d":"code","626f5e66":"code","e6ffa432":"code","31752ac7":"code","ea66d941":"code","bfa1c196":"code","4db88e25":"code","c9b14f37":"code","965c6ff9":"code","c9d87716":"code","99b2293f":"code","a7398da9":"code","78af8bd8":"code","4e5e6bc7":"code","61b4ac36":"code","7e22a5be":"code","8642e79d":"code","a38eef67":"code","9c3b394a":"code","d612c869":"code","2d3779e7":"code","118bff21":"code","ae30afb7":"code","cf29116a":"code","703afbbc":"code","a218e55a":"code","763e8663":"code","0bdee4f8":"code","c346f95b":"code","b9f6479b":"code","f3f45ff4":"code","319a17aa":"code","08c2061f":"code","d061ae0e":"code","05387c6b":"code","329c62c6":"code","71041878":"code","e1b538c2":"code","beda473f":"code","2b5c11bd":"code","045c7c6e":"code","8dfca25d":"code","55e65087":"code","bf076873":"code","18f473c7":"code","9a97d915":"code","0a375567":"code","fe1156f5":"code","c661df43":"code","87d0abae":"code","9139968e":"code","652420fb":"code","1ade8a25":"code","f38c8415":"code","f587574c":"code","09a4c21d":"code","bb2658bb":"code","c1807928":"code","976359d9":"code","d067db8d":"code","ea18ddd7":"code","6038f805":"code","a3e90d57":"code","72dbc642":"code","c7b0231b":"code","367eeabc":"code","87e8ed94":"code","6f321917":"code","723ff9ca":"code","9db48a9f":"code","f39935bb":"code","a8e77712":"code","b1feed49":"code","bc3ab537":"code","e0b3ecd9":"code","cedd8a27":"code","a87ec673":"code","bf747de7":"code","988106f1":"code","a01b4996":"code","2c2a8e7a":"code","ce17be9a":"code","72286dfb":"code","7ddf1130":"code","b8bc6ff4":"code","09a20560":"code","88e6f5d0":"code","830defb7":"code","a3e4e0a1":"code","849d8e85":"code","361306f8":"code","764f3477":"code","9d23d4b5":"code","5ea5f847":"code","a5790fef":"code","cf004c36":"code","059d770f":"code","495d9e5a":"code","9a5f357c":"code","6441ca9c":"code","cc8284ff":"code","82beb978":"code","1d2ab337":"code","3d073be2":"code","2dd2deca":"code","ad27a1ad":"code","0881d8fb":"code","6bdbea76":"code","b59cd43f":"code","5df254fd":"code","01d8f836":"code","f851f23a":"code","babc342f":"code","94c32a22":"code","7610d351":"code","bbb6b7de":"markdown","fec471aa":"markdown","205cb9fa":"markdown","fceaca4a":"markdown","33f8b51a":"markdown","4c79c6a1":"markdown","9530ea2a":"markdown","f2d2180c":"markdown","54281ca1":"markdown","7f36298a":"markdown","1e62ab3b":"markdown","a53248f3":"markdown","9adb06b4":"markdown","18eb46e6":"markdown","07b1497b":"markdown","c21725b7":"markdown","89acf51f":"markdown","df568c1b":"markdown","2b17dfef":"markdown","11166102":"markdown","df0df240":"markdown","40374a13":"markdown","5849c4e2":"markdown","34a5eedf":"markdown","6daa4d4d":"markdown","8638eb36":"markdown","fe94d261":"markdown","eaf28ed1":"markdown","a41621ef":"markdown","c02d3e2b":"markdown","36b586a8":"markdown","61409c65":"markdown","d13ec005":"markdown","b19e8d36":"markdown","4db5faf6":"markdown","f9e5b3d9":"markdown","8798de8a":"markdown","8a1b86a6":"markdown","26439d67":"markdown","7c15023c":"markdown","2a32c489":"markdown","b5dc39ed":"markdown","005f4300":"markdown","1f4976d4":"markdown","4d685cb6":"markdown","81296da2":"markdown","5789ee63":"markdown","e7e595f1":"markdown","3929c037":"markdown","0ac091b4":"markdown","07ef6d03":"markdown","b657a6cf":"markdown","576ca0f4":"markdown","ca20c6ca":"markdown","523880d0":"markdown","413e4eab":"markdown","1402cb64":"markdown","e06c1334":"markdown","a5f31fcb":"markdown","9ca15bae":"markdown","419c3f40":"markdown","20e64765":"markdown","982d1cbe":"markdown","d49bfbfa":"markdown","2fdbb44b":"markdown","cdba7175":"markdown","69df7dc3":"markdown","cbde2c20":"markdown","ecbafd89":"markdown","567fcf4d":"markdown","e472ae25":"markdown","2c9987aa":"markdown","36aa9764":"markdown","a6d01fba":"markdown","41386f7d":"markdown","683c30b1":"markdown","3902a93b":"markdown","de0d7ade":"markdown","cde5ff2e":"markdown","9c0fc45c":"markdown","99f3e24b":"markdown","c002572c":"markdown","c8d8a963":"markdown","5a9e1f50":"markdown","5058cff8":"markdown","f6ad6d2c":"markdown","5be91bcf":"markdown","fa7f220a":"markdown","d76c1f2a":"markdown","ec674f0e":"markdown","34ffb43e":"markdown","2304d3b3":"markdown","541b9177":"markdown","d6f7eca8":"markdown","36d1cf59":"markdown","8122bc85":"markdown","d851c216":"markdown","c03e2e1b":"markdown","ec288f3c":"markdown","daf48c72":"markdown","4e662085":"markdown","fe79f4fd":"markdown","16e5c13f":"markdown","2689379a":"markdown","b998b757":"markdown","f17b8bf2":"markdown","0605fa56":"markdown","dc54f510":"markdown","a29ed56e":"markdown","73d7d118":"markdown","ed31ad1a":"markdown","00dafa09":"markdown","571e10e7":"markdown","09218435":"markdown","bb2f29a4":"markdown","90b93b97":"markdown","09c8ec6b":"markdown","d2d98dd9":"markdown","f4c9556f":"markdown","7e1c6c94":"markdown","7fd0ac9a":"markdown","4dd54e4e":"markdown","6b8d72bb":"markdown","5388f32a":"markdown","829088f6":"markdown","6d06418f":"markdown","c30ab183":"markdown","3ad10fa8":"markdown","fc1ae067":"markdown","1c7f9310":"markdown","925fc067":"markdown","aa0b5ae7":"markdown","f0c48d1a":"markdown","64523f86":"markdown","13e9da47":"markdown","af44fbe3":"markdown"},"source":{"31b3db7d":"import pandas as pd\nimport numpy as np\nimport math\nfrom IPython.display import HTML\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.neural_network import MLPRegressor\nfrom fbprophet import Prophet\nimport scipy.optimize as optim\n\nfrom sklearn.metrics import accuracy_score, mean_squared_error, r2_score\nfrom sklearn.preprocessing import MinMaxScaler, PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nfrom prettytable import PrettyTable\nimport seaborn as sns\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats('pdf', 'png')\n\n#!conda install -c plotly plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *\n\nfrom datetime import datetime\n\n#Supress warnings and default INFO logging\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.CRITICAL)\n\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()\npyo.init_notebook_mode()","626f5e66":"df_brazil = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv')","e6ffa432":"cases = df_brazil['cases'].groupby(df_brazil['date']).sum().sort_values(ascending=True)\ndeaths = df_brazil['deaths'].groupby(df_brazil['date']).sum().sort_values(ascending=True)\ndays_since_first_case = np.array([i for i in range(len(cases.index))]).reshape(-1, 1)\ndays_since_first_death = np.array([i for i in range(len(deaths.index))]).reshape(-1, 1)\n\nfig, ax = plt.subplots(1,2, figsize=(25,10))\nax[0].plot(days_since_first_case, cases, color='blue', label='Number of cases')\nax[0].legend(loc='best')\nax[0].set_xlabel('Number of days since the first case', size=20)\nax[0].set_ylabel('Count of cases in Brazil', size=20)\nax[0].set_title('Covid cases trend in Brazil', size=25)\nax[0].legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nax[0].tick_params(axis=\"x\", labelsize=20)\nax[0].tick_params(axis=\"y\", labelsize=20)\n\nax[1].plot(days_since_first_death, deaths, color='red', label='Number of deaths')\nax[1].legend(loc='best')\nax[1].set_xlabel('Number of days since the first death', size=15)\nax[1].set_ylabel('Count of deaths in Brazil', size=15)\nax[1].set_title('Covid deaths trend in Brazil', size=25)\nax[1].legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nax[1].tick_params(axis=\"x\", labelsize=20)\nax[1].tick_params(axis=\"y\", labelsize=20)\n\nplt.show()","31752ac7":"plt.figure(figsize=(15,10))\nplt.plot(cases, deaths)\nplt.xlabel('Cases count', size=20)\nplt.ylabel('Deaths count', size=20)\nplt.title('Cases v\/s Deaths in Brazil', size=25)\nplt.xticks(size=15)\nplt.yticks(size=15)\n\nplt.show()","ea66d941":"mortality_over_time = round((deaths\/cases)*100,2)\n\nindex = mortality_over_time.index\ndata = mortality_over_time\n\nfig = go.Figure(data=[\n    \n    go.Line(name='Mortality in %'\n            , x = index\n            , y=data\n            , mode=\"lines+markers\")\n    \n])\n\nfig['layout'].update(\n    title=\"Mortality rate over the time\"\n    , title_x=0.5\n    , xaxis_title='Months'\n    , yaxis_title='Mortality rate (deaths\/cases) in Percentage'\n    )\n\n\nfig.show()","bfa1c196":"cases_today = df_brazil[['cases']].groupby(df_brazil['date']).sum().sort_values(by = 'cases', ascending=True).shift(-1)\ncases_yesterday = df_brazil[['cases']].groupby(df_brazil['date']).sum().sort_values(by = 'cases', ascending=True)\n\ndeaths_today = df_brazil[['deaths']].groupby(df_brazil['date']).sum().sort_values(by = 'deaths', ascending=True).shift(-1)\ndeaths_yesterday = df_brazil[['deaths']].groupby(df_brazil['date']).sum().sort_values(by = 'deaths', ascending=True)\n\ncases_growth_rate = cases_today-cases_yesterday\ncases_growth_rate = cases_growth_rate.dropna()\n\ndeaths_growth_rate = deaths_today-deaths_yesterday\ndeaths_growth_rate = deaths_growth_rate.dropna()\n\nlayout = Layout(height=1200, xaxis_title='Month', legend = dict(font = dict(family = \"Courier\", size = 20)),\n                  legend_title = dict(font = dict(family = \"Courier\", size = 10)))\n\n\nfig = make_subplots(rows=2, cols=1, vertical_spacing=0.15\n                    , subplot_titles=('New cases per day over the time'\n                                      , 'New deaths per day over the time'))\n\nfig.append_trace(go.Line(name='New cases per day'\n                        , x = cases_growth_rate.index\n                        , y = cases_growth_rate['cases']\n                        , mode=\"lines+markers\")\n                        , row=1, col=1\n                        )\n\nfig.append_trace(go.Line(name='New deaths per day'\n                        , x = deaths_growth_rate.index\n                        , y = deaths_growth_rate['deaths']\n                        , mode=\"lines+markers\")\n                        , row=2, col=1)\n\nfig.update_xaxes(title_text=\"Months\",row=1, col=1)\nfig.update_yaxes(title_text=\"Cases per day\", row=1, col=1)\n\nfig.update_xaxes(title_text=\"Months\",row=2, col=1)\nfig.update_yaxes(title_text=\"Deaths per day\", row=2, col=1)\n\nfig['layout'].update(layout)\n\nfig.show()","4db88e25":"confirmed_cases = df_brazil.groupby(['region','date']).agg({'cases':'sum'}).reset_index()\n\nfig = px.line(confirmed_cases[['date','cases', 'region']], x='date', y='cases', color='region')\nfig.update_layout(title='COVID-19 in Brazil: total number of cases over time',  title_x=0.5,\n                  xaxis_title='Date', yaxis_title='Number of cases', legend_title='<b>Regions in Brazil<\/b>',\n                  legend=dict(x=0.02,y=0.98))\nfig.show()","c9b14f37":"region_wise_cases = df_brazil.groupby('region')['cases','deaths'].max().reset_index()\nregion_wise_cases['Active'] = region_wise_cases['cases'] - region_wise_cases['deaths']\nregion_wise_cases[\"Death Rate (per 100)\"] = np.round(100*region_wise_cases[\"deaths\"]\/region_wise_cases[\"cases\"],2)\nregion_wise_cases.sort_values('cases', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"cases\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Death Rate (per 100)\"])\n","965c6ff9":"df_brazil = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv')\ndf_brazil.head()","c9d87716":"cases = df_brazil['cases'].groupby(df_brazil['date']).sum().sort_values(ascending=True)\ndeaths = df_brazil['deaths'].groupby(df_brazil['date']).sum().sort_values(ascending=True)","99b2293f":"cases = cases[cases>0].reset_index().drop('date',axis=1)\ndeaths = deaths[deaths>0].reset_index().drop('date',axis=1)","a7398da9":"days_since_first_case = np.array([i for i in range(len(cases.index))]).reshape(-1, 1)\ncase_count = np.array(cases).reshape(-1, 1)\n\ndays_since_first_death = np.array([i for i in range(len(deaths.index))]).reshape(-1, 1)\ndeath_count = np.array(deaths).reshape(-1, 1)","78af8bd8":"X_cases = days_since_first_case\ny_cases = case_count\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X_cases\n                                                    , y_cases\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)\ndays_in_future = 20\ntotal_days_since_first_case = 232\nx_test_case_future = np.linspace(total_days_since_first_case+1, total_days_since_first_case+days_in_future,20).reshape(-1, 1)","4e5e6bc7":"# Case prediction for entire Brazil using linear regression\nlr = LinearRegression()\nlr.fit(X_train_cases, y_train_cases)\ny_pred_case = lr.predict(X_test_cases)\ny_pred_case_forecast = lr.predict(x_test_case_future)\n\nrmse_test_case = math.sqrt(mean_squared_error(y_test_cases, y_pred_case))\nr_score_case = r2_score(y_test_cases, y_pred_case)\nprint('RMSE for test cases = {:.2f}'.format(rmse_test_case))\nprint('R-squared for test cases = {:.2f}'.format(r_score_case))","61b4ac36":"X_death = days_since_first_death\ny_death = death_count\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(X_death\n                                                    , y_death\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)\ndays_in_future = 20\ntotal_days_since_first_death = 212\nx_test_death_future = np.linspace(total_days_since_first_death+1, total_days_since_first_death+days_in_future,20).reshape(-1, 1)","7e22a5be":"# Death prediction for entire Brazil using linear regression\nlr = LinearRegression()\nlr.fit(X_train_deaths, y_train_deaths)\ny_pred_deaths= lr.predict(X_test_deaths)\ny_pred_death_forecast = lr.predict(x_test_death_future)\n\nrmse_test_deaths = math.sqrt(mean_squared_error(y_test_deaths, y_pred_deaths))\nr_score_deaths = r2_score(y_test_deaths, y_pred_deaths)\nprint('RMSE for test deaths = {:.2f}'.format(rmse_test_deaths))\nprint('R-squared for test deaths = {:.2f}'.format(r_score_deaths))","8642e79d":"# TODO: Name what dotted line mean\ndef plot_model(X_test, y_test, y_pred, x_test_future, y_pred_forecast, total_days, start_date, title, axis):\n    x_axis_data = X_test\n    y_axis_data_true = y_test\n\n    l = sorted(zip(*[x_axis_data,y_axis_data_true]))\n    sorted_x_test, y_sorted_test = list(zip(*l))\n    axis.scatter(sorted_x_test, y_sorted_test, label=f\"True {title}\")\n\n    l_pred = sorted(zip(*[x_axis_data,y_pred]))\n    sorted_x_test_pred, y_sorted_test_pred = list(zip(*l_pred))\n    axis.plot(sorted_x_test_pred, y_sorted_test_pred, label=f\"Predicted {title}\", color=\"red\")\n    axis.plot(x_test_future, y_pred_forecast, '.', label=f\"Forcasted {title}\", color=\"green\")\n\n    axis.axvline(total_days, linestyle='--')\n\n    axis.set_title(f'Day wise {title} prediction for Brazil (forcasted for next 20 days)', size=18)\n    axis.set_ylabel(f\"Total number of {title}\", size=15)\n    axis.set_xlabel(f\"Days since the first {title} {start_date}\", size=15)\n    axis.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\n    \nfig, ax = plt.subplots(2,1, figsize=(15,18))\nplot_model(X_test_cases,y_test_cases, y_pred_case, x_test_case_future, y_pred_case_forecast, total_days_since_first_case,'(26-02-2020)', 'cases', ax[0])\nplot_model(X_test_deaths,y_test_deaths, y_pred_deaths, x_test_death_future, y_pred_death_forecast, total_days_since_first_death, '(17-03-2020)', 'deaths', ax[1])\nplt.show()","a38eef67":"df_brazil = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv')\ndf_brazil_population = pd.read_csv('..\/input\/brazil-population-2019-changed\/brazil_population_2019_changed.csv', encoding='latin1')\ndf_brazil_population.head()","9c3b394a":"df_population_region = df_brazil_population.groupby('region').sum()['population'].reset_index()\ndf_brazil_infected_population = pd.DataFrame(pd.merge(df_brazil, df_population_region, on='region'))","d612c869":"confirmed_pop = df_brazil_infected_population[df_brazil_infected_population['cases']>0].groupby(['region','date']).agg({'cases':'sum','population':'mean'})\ndeaths_pop = df_brazil_infected_population[df_brazil_infected_population['deaths']>0].groupby(['region','date']).agg({'deaths':'sum','population':'mean'})","2d3779e7":"# days since first case for each region\ndef get_days_since_first_case(df):\n    df['days_since_first_case'] = np.arange(len(df))+1\n    return df\n\ndf_confirmed_population = confirmed_pop.groupby(level=0).apply(get_days_since_first_case)\ndf_confirmed_population.reset_index(inplace=True)\ndf_confirmed_population.head()","118bff21":"# One hot encode the regions\ndef get_one_hot(df):\n    df_onehot_region = pd.get_dummies(df)\n    df_onehot_region.drop('Sul',axis=1,inplace=True)\n    return df_onehot_region\n\ndf_onehot_region = get_one_hot(df_confirmed_population['region'])","ae30afb7":"df_confirmed_cases = df_confirmed_population.drop('region',axis=1)\ndf_confirmed_cases = pd.concat([df_confirmed_cases,df_onehot_region],axis=1)\ndf_confirmed_cases.head()","cf29116a":"# days since first death for each region\ndef get_days_since_first_death(df):\n    df['days_since_first_death'] = np.arange(len(df))+1\n    return df\n\ndf_death_population = deaths_pop.groupby(level=0).apply(get_days_since_first_death)\ndf_death_population.reset_index(inplace=True)\ndf_death_population.head()","703afbbc":"df_confirmed_deaths = df_death_population.drop('region',axis=1)\ndf_onehot_region = get_one_hot(df_death_population['region'])\n\ndf_confirmed_deaths = pd.concat([df_confirmed_deaths,df_onehot_region],axis=1)\ndf_confirmed_deaths.head()","a218e55a":"# Splitting the case data into training and testing \nX_cases = df_confirmed_cases.drop(['date','cases'], axis = 1)\ny_cases = df_confirmed_cases['cases']\n\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X_cases\n                                                    , y_cases\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)","763e8663":"# Multilinear regression with cross-validation for cases \nlinear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train_cases, y_train_cases)\ny_pred_cases = linear_model.predict(X_test_cases)\n\nmse_score = cross_validate(linear_model,X_train_cases,y_train_cases,scoring='neg_mean_squared_error',cv=10)['test_score'].mean()\nrmse = math.sqrt(-mse_score)\nr_score = r2_score(y_test_cases, y_pred_cases)\n\nprint('The best RMSE for predicted number of cases is: {:.2f}'.format(rmse))\nprint('The best R2 score for predicted number of cases is: {:.2f}'.format(r_score))","0bdee4f8":"# Plot region wise case predictions \n\ndef region_wise_plot(X_test, y_test, title, region,axis):  \n    if(region=='Sul'):\n        condition = (X_test['Centro-Oeste']==0) & (X_test['Nordeste']==0) & (X_test['Norte']==0) & (X_test['Sudeste']==0)\n    else:\n        condition = X_test[region]==1\n\n    y_test_pred = linear_model.predict(X_test[condition])\n    \n    x_axis_data = X_test[[f'days_since_first_{title}']][condition].values\n    y_axis_data_true = y_test[condition].values\n\n    l = sorted(zip(*[x_axis_data,y_axis_data_true]))\n    sorted_x_test, y_sorted_test = list(zip(*l))\n    axis.scatter(sorted_x_test, y_sorted_test, label=\"True data\")\n\n    l_pred = sorted(zip(*[x_axis_data,y_test_pred]))\n    sorted_x_test_pred, y_sorted_test_pred = list(zip(*l_pred))\n    axis.plot(sorted_x_test_pred, y_sorted_test_pred, label=\"Predicted data\", color=\"red\")\n\n    axis.set_title(f'Day wise {title} prediction for {region}', size=18)\n    axis.set_ylabel(\"Total number of cases\", size=15)\n    axis.set_xlabel(\"Days since the first case\", size=15)\n    axis.legend(loc=\"best\")\n\nfig, ax = plt.subplots(3,2,figsize=(15,20)) \nregion_wise_plot(X_test_cases,y_test_cases,title='case',region='Centro-Oeste',axis=ax[0,0])\nregion_wise_plot(X_test_cases,y_test_cases,title='case',region='Nordeste',axis=ax[0,1])\nregion_wise_plot(X_test_cases,y_test_cases,title='case',region='Norte',axis=ax[1,0])\nregion_wise_plot(X_test_cases,y_test_cases,title='case',region='Sudeste',axis=ax[1,1])\nregion_wise_plot(X_test_cases,y_test_cases,title='case',region='Sul',axis=ax[2,0])\n\nplt.show()","c346f95b":"X_death = df_confirmed_deaths.drop(['date','deaths'], axis = 1)\ny_death = df_confirmed_deaths['deaths']\n\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(X_death\n                                                    , y_death\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)","b9f6479b":"# Multilinear regression with cross-validation for deaths\n\nlinear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train_deaths, y_train_deaths)\ny_pred_deaths = linear_model.predict(X_test_deaths)\n\nmse_score = cross_validate(linear_model,X_train_deaths,y_train_deaths,scoring='neg_mean_squared_error',cv=10)['test_score'].mean()\nrmse = math.sqrt(-mse_score)\n#rmse = math.sqrt(mean_squared_error(y_test_cases, y_pred_cases))\nr_score = r2_score(y_test_deaths, y_pred_deaths)\n\nprint('The best RMSE for predicted number of deaths is: {:.2f}'.format(rmse))\nprint('The best R2 score for predicted number of deaths is: {:.2f}'.format(r_score))","f3f45ff4":"# Plot region wise deaths \nfig, ax = plt.subplots(3,2,figsize=(15,20)) \nregion_wise_plot(X_test_deaths,y_test_deaths,title='death',region='Centro-Oeste',axis=ax[0,0])\nregion_wise_plot(X_test_deaths,y_test_deaths,title='death',region='Nordeste',axis=ax[0,1])\nregion_wise_plot(X_test_deaths,y_test_deaths,title='death',region='Norte',axis=ax[1,0])\nregion_wise_plot(X_test_deaths,y_test_deaths,title='death',region='Sudeste',axis=ax[1,1])\nregion_wise_plot(X_test_deaths,y_test_deaths,title='death',region='Sul',axis=ax[2,0])\n\nplt.show()","319a17aa":"# Splitting the case data into training and testing \nX_cases = df_confirmed_cases.drop(['date','cases'], axis = 1)\ny_cases = df_confirmed_cases['cases']\n\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X_cases\n                                                    , y_cases\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)","08c2061f":"# Creating polynomial features for days_since_first_case and concatinating it with other features\npoly_feature_train = PolynomialFeatures(3).fit_transform(X_train_cases[['days_since_first_case']])\n# Delete the first row, since the LinearRegression model shall be fitting the intercept by default\npoly_feature_train = pd.DataFrame(np.delete(poly_feature_train, [0], 1))\n\npoly_feature_test = PolynomialFeatures(3).fit_transform(X_test_cases[['days_since_first_case']])\npoly_feature_test = pd.DataFrame(np.delete(poly_feature_test, [0], 1))\n\nX_train = X_train_cases.reset_index().drop(['index','days_since_first_case'],axis=1)\nX_train = pd.concat([poly_feature_train,X_train], axis=1)\ny_train = y_train_cases.reset_index().drop(['index'],axis=1)\n\nX_test = X_test_cases.reset_index().drop(['index','days_since_first_case'],axis=1)\nX_test = pd.concat([poly_feature_test,X_test], axis=1)\ny_test = y_test_cases.reset_index().drop(['index'],axis=1)","d061ae0e":"X_train.head()","05387c6b":"linear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train, y_train)\ny_pred_cases = linear_model.predict(X_test)\n\n# mse_score = cross_validate(linear_model,poly_X_train_cases,y_train_cases,scoring='neg_mean_squared_error',cv=10)['test_score'].mean()\nrmse = math.sqrt(mean_squared_error(y_test, y_pred_cases))\nr_score = r2_score(y_test, y_pred_cases)\n\nprint('The best RMSE is: {:.2f}'.format(rmse))\nprint('The best R2 score is: {:.2f}'.format(r_score))","329c62c6":"def region_wise_poly_plot(X_test,y_test,region, x, axis):  \n    if(region=='Sul'):\n        condition = (X_test['Centro-Oeste']==0) & (X_test['Nordeste']==0) & (X_test['Norte']==0) & (X_test['Sudeste']==0)\n    else:\n        condition = X_test[region]==1\n\n    y_test_pred = linear_model.predict(X_test[condition])\n    \n    # X_test[[0]] gives days since the first case\/death\n    x_axis_data = X_test[[0]][condition].values\n    y_axis_data_true = y_test[condition].values\n\n    l = sorted(zip(*[x_axis_data,y_axis_data_true]))\n    sorted_x_test, y_sorted_test = list(zip(*l))\n    axis.scatter(sorted_x_test, y_sorted_test, label=\"True data\")\n\n    l_pred = sorted(zip(*[x_axis_data,y_test_pred]))\n    sorted_x_test_pred, y_sorted_test_pred = list(zip(*l_pred))\n    axis.plot(sorted_x_test_pred, y_sorted_test_pred, label=\"Predicted data\", color=\"red\")\n\n    axis.set_title(f'Day wise {x} prediction for {region}', size=18)\n    axis.set_ylabel(f'Total number of {x}', size=15)\n    axis.set_xlabel(f'Days since the first {x}', size=15)\n    axis.legend(loc=\"best\")\n\nfig, ax = plt.subplots(3,2,figsize=(15,20)) \nregion_wise_poly_plot(X_test,y_test,region='Centro-Oeste',x='case',axis=ax[0,0])\nregion_wise_poly_plot(X_test,y_test,region='Nordeste',x='case',axis=ax[0,1])\nregion_wise_poly_plot(X_test,y_test,region='Norte',x='case',axis=ax[1,0])\nregion_wise_poly_plot(X_test,y_test,region='Sudeste',x='case',axis=ax[1,1])\nregion_wise_poly_plot(X_test,y_test,region='Sul',x='case',axis=ax[2,0])\n\nplt.show()","71041878":"X_death = df_confirmed_deaths.drop(['date','deaths'], axis = 1)\ny_death = df_confirmed_deaths['deaths']\n\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(X_death\n                                                    , y_death\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)","e1b538c2":"# Creating polynomial features for days_since_first_death and concatinating it with other features\n\npoly_feature_train = PolynomialFeatures(5).fit_transform(X_train_deaths[['days_since_first_death']])\npoly_feature_train = pd.DataFrame(np.delete(poly_feature_train, [0], 1))\n\npoly_feature_test = PolynomialFeatures(5).fit_transform(X_test_deaths[['days_since_first_death']])\npoly_feature_test = pd.DataFrame(np.delete(poly_feature_test, [0], 1))\n\nX_train = X_train_deaths.reset_index().drop(['index','days_since_first_death'],axis=1)\nX_train = pd.concat([poly_feature_train,X_train], axis=1)\ny_train = y_train_deaths.reset_index().drop(['index'],axis=1)\n\nX_test = X_test_deaths.reset_index().drop(['index','days_since_first_death'],axis=1)\nX_test = pd.concat([poly_feature_test,X_test], axis=1)\ny_test = y_test_deaths.reset_index().drop(['index'],axis=1)","beda473f":"linear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train, y_train)\ny_pred_cases = linear_model.predict(X_test)\n\nrmse = math.sqrt(mean_squared_error(y_test, y_pred_cases))\nr_score = r2_score(y_test, y_pred_cases)\n\nprint('The best RMSE is: {:.2f}'.format(rmse))\nprint('The best R2 score is: {:.2f}'.format(r_score))","2b5c11bd":"fig, ax = plt.subplots(3,2,figsize=(15,20)) \nregion_wise_poly_plot(X_test,y_test,region='Centro-Oeste',x='death',axis=ax[0,0])\nregion_wise_poly_plot(X_test,y_test,region='Nordeste',x='death',axis=ax[0,1])\nregion_wise_poly_plot(X_test,y_test,region='Norte',x='death',axis=ax[1,0])\nregion_wise_poly_plot(X_test,y_test,region='Sudeste',x='death',axis=ax[1,1])\nregion_wise_poly_plot(X_test,y_test,region='Sul',x='death',axis=ax[2,0])\n\nplt.show()","045c7c6e":"X_cases = days_since_first_case\ny_cases = case_count\nX_train_cases, X_test_cases, y_train_cases, y_test_cases = train_test_split(X_cases\n                                                    , y_cases\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)\ndays_in_future = 20\ntotal_days_since_first_case = 232\nx_test_case_future = np.linspace(total_days_since_first_case+1, total_days_since_first_case+days_in_future,20).reshape(-1, 1)","8dfca25d":"mlp = MLPRegressor(hidden_layer_sizes=(200,200),activation='relu',solver='lbfgs',max_iter=1000, shuffle=True)\nmlp.fit(X=X_train_cases.reshape(-1,1),y=y_train_cases.ravel())\ny_predict_cases = mlp.predict(X_test_cases)\ny_pred_case_forecast = mlp.predict(x_test_case_future)","55e65087":"rmse = math.sqrt(mean_squared_error(y_test_cases, y_predict_cases))\nr_score = r2_score(y_test_cases, y_predict_cases)\n\nprint('The best RMSE for predicted number of cases is: {:.2f}'.format(rmse))\nprint('The best R2 score for predicted number of cases is: {:.2f}'.format(r_score))","bf076873":"X_death = days_since_first_death\ny_death = death_count\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(X_death\n                                                    , y_death\n                                                    , test_size= 0.2\n                                                    , shuffle=True\n                                                    , random_state = 42)\ndays_in_future = 20\ntotal_days_since_first_death = 212\nx_test_death_future = np.linspace(total_days_since_first_death+1, total_days_since_first_death+days_in_future,20).reshape(-1, 1)","18f473c7":"mlp = MLPRegressor(hidden_layer_sizes=(200,200),activation='relu',solver='lbfgs',max_iter=1000, shuffle=True)\nmlp.fit(X=X_train_deaths,y=y_train_deaths.ravel())\ny_predict_deaths = mlp.predict(X_test_deaths)\ny_pred_death_forecast = mlp.predict(x_test_death_future)","9a97d915":"rmse = math.sqrt(mean_squared_error(y_test_deaths, y_predict_deaths))\nr_score = r2_score(y_test_deaths, y_predict_deaths)\n\nprint('The best RMSE for predicted number of deaths is: {:.2f}'.format(rmse))\nprint('The best R2 score for predicted number of deaths is: {:.2f}'.format(r_score))","0a375567":"fig, ax = plt.subplots(2,1, figsize=(15,18))\nplot_model(X_test_cases,y_test_cases, y_predict_cases, x_test_case_future, y_pred_case_forecast, total_days_since_first_case,'(26-02-2020)', 'cases', ax[0])\nplot_model(X_test_deaths,y_test_deaths, y_predict_deaths, x_test_death_future, y_pred_death_forecast, total_days_since_first_death, '(17-03-2020)', 'deaths', ax[1])\nplt.show()","fe1156f5":"df_brazil = pd.read_csv('..\/input\/corona-virus-brazil\/brazil_covid19.csv')\ndf_population = pd.read_csv('..\/input\/brazil-population-2019-changed\/brazil_population_2019_changed.csv',encoding='latin1')\n\ndf_brazil['population'] = df_population['population'].sum()\nconfirmed_pop = df_brazil.groupby(['date']).agg({'cases':'sum','population':'mean'}).reset_index()\ndeaths_pop = df_brazil.groupby(['date']).agg({'deaths':'sum','population':'mean'}).reset_index()","c661df43":"data_cases = confirmed_pop[confirmed_pop['cases']>0]\ndata_cases = data_cases.reset_index().drop('index',axis=1)\ndata_cases['Timestep'] = data_cases.index\npopulation_brazil = data_cases['population'].unique()[0]","87d0abae":"data_deaths = deaths_pop[deaths_pop['deaths']>0]\ndata_deaths = data_deaths.reset_index().drop('index',axis=1)\ndata_deaths['Timestep'] = data_deaths.index\npopulation_brazil = data_deaths['population'].unique()[0]","9139968e":"def func_logistic(t, a, b, c):\n    return c \/ (1 + a * np.exp(-b*t))","652420fb":"cases_df = data_cases\ncases_df = cases_df.drop(['population','date'],axis=1)\ncolumn = 'cases'\n# Randomly initialize the coefficients\np0 = np.random.exponential(size=3)\n# Set min bound 0 on all coefficients, and set different max bounds # for each coefficient\nbounds = (0, [100000., 14., population_brazil])\n# Convert pd.Series to np.Array and use Scipy's curve fit to find   # the best Nonlinear Least Squares coefficients\nx_cases = np.array(cases_df['Timestep']) + 1\ny_cases = np.array(cases_df[column])\n(a_cases,b_cases,c_cases),cov_cases = optim.curve_fit(func_logistic, x_cases, y_cases, bounds=bounds, p0=p0, maxfev=1000000)","1ade8a25":"# The time step at which the growth is fastest\nt_fastest_cases = np.log(a_cases) \/ b_cases\ni_fastest_cases = func_logistic(t_fastest_cases, a_cases, b_cases, c_cases)\nres_df_cases = data_cases[['Timestep','date', column]].copy()\nres_df_cases['fastest_grow_day'] = t_fastest_cases\nres_df_cases['fastest_grow_value'] = i_fastest_cases\nres_df_cases['growth_stabilized'] = res_df_cases['Timestep']>=t_fastest_cases\nres_df_cases['res_func_logistic'] = func_logistic(x_cases, a_cases, b_cases, c_cases)\nres_df_cases['cap'] = res_df_cases.apply(lambda row:func_logistic(t_fastest_cases+10,a_cases,b_cases,c_cases) if(row['Timestep']<t_fastest_cases) else func_logistic(row['Timestep']+10,a_cases,b_cases,c_cases),axis=1)","f38c8415":"# plot the logistic function\nplt.figure(figsize=(10,6))\nplt.plot(res_df_cases['Timestep'], res_df_cases['cap'])\nplt.title('Maximum capacity values for each day for cases', size=20)\nplt.xlabel('Days since the first case was observed in Brazil', size=15)\nplt.ylabel('Maximum capacity', size=15)\nplt.show()","f587574c":"deaths_df = data_deaths\ndeaths_df = deaths_df.drop(['population','date'],axis=1)\ncolumn = 'deaths'\n# Randomly initialize the coefficients\np0 = np.random.exponential(size=3)\n# Set min bound 0 on all coefficients, and set different max bounds # for each coefficient\nbounds = (0, [100000., 14., population_brazil])\n# Convert pd.Series to np.Array and use Scipy's curve fit to find   # the best Nonlinear Least Squares coefficients\nx_deaths = np.array(deaths_df['Timestep']) + 1\ny_deaths = np.array(deaths_df[column])\n(a_deaths, b_deaths, c_deaths),cov_deaths = optim.curve_fit(func_logistic, x_deaths, y_deaths, bounds=bounds, p0=p0, maxfev=1000000)","09a4c21d":"# The time step at which the growth is fastest\nt_fastest_deaths = np.log(a_deaths) \/ b_deaths\ni_fastest_deaths = func_logistic(t_fastest_deaths, a_deaths, b_deaths, c_deaths)\nres_df_deaths = data_deaths[['Timestep','date', column]].copy()\nres_df_deaths['fastest_grow_day'] = t_fastest_deaths\nres_df_deaths['fastest_grow_value'] = i_fastest_deaths\nres_df_deaths['growth_stabilized'] = res_df_deaths['Timestep']>=t_fastest_deaths\nres_df_deaths['res_func_logistic'] = func_logistic(x_deaths, a_deaths, b_deaths, c_deaths)\nres_df_deaths['cap'] = res_df_deaths.apply(lambda row:func_logistic(t_fastest_deaths+10,a_deaths, b_deaths, c_deaths) if(row['Timestep']<t_fastest_deaths) else func_logistic(row['Timestep']+10,a_deaths, b_deaths, c_deaths),axis=1)","bb2658bb":"# plot the logistic function\nplt.figure(figsize=(10,6))\nplt.plot(res_df_deaths['Timestep'], res_df_deaths['cap'])\nplt.title('Maximum capacity values for each day for deaths', size=20)\nplt.xlabel('Days since the first death was observed in Brazil', size=15)\nplt.ylabel('Maximum capacity', size=15)\nplt.show()","c1807928":"cases_to_fit = res_df_cases.drop(['Timestep','fastest_grow_day','fastest_grow_value','growth_stabilized','res_func_logistic'],axis=1).rename(columns={'date':'ds','cases':'y'})\ncases_to_fit['floor'] = 0\n\ncases_train, cases_test = train_test_split(cases_to_fit, test_size=0.2, shuffle=False, random_state=42)\nmodel_cases = Prophet(interval_width=0.95,growth='logistic')\nmodel_cases.fit(cases_train)\n","976359d9":"\nfuture_data_cases = pd.DataFrame()\nfuture_data_cases['ds'] = pd.date_range(start=\"2020-10-15\",end=\"2020-11-05\")\nfuture_data_cases['floor'] = 0\nfuture_data_cases['Timestep'] = future_data_cases.index+231 #We have used 231 data points for training\nfuture_data_cases['cap'] =  future_data_cases.apply(lambda row:func_logistic(row['Timestep']+10,a_cases,b_cases,c_cases),axis=1)\nfuture_data_cases = future_data_cases.drop('Timestep',axis=1)","d067db8d":"\nforecast_cases_test = model_cases.predict(cases_test)\n#forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(5)\nrmse = np.sqrt(mean_squared_error(cases_test['y'],forecast_cases_test['yhat']))\nr2 = r2_score(cases_test['y'],forecast_cases_test['yhat'])\nprint('Root Mean Squared error for cases predicted is {:.2f}'.format(rmse))\nprint('R2 score for cases predicted is {:.2f}'.format(r2))","ea18ddd7":"forecast_cases_future = model_cases.predict(future_data_cases)\nall_forecasts_cases = forecast_cases_test.append(forecast_cases_future)","6038f805":"\ndeaths_to_fit = res_df_deaths.drop(['Timestep','fastest_grow_day','fastest_grow_value','growth_stabilized','res_func_logistic'],axis=1).rename(columns={'date':'ds','deaths':'y'})\ndeaths_to_fit['floor'] = 0\ndeaths_train, deaths_test = train_test_split(deaths_to_fit, test_size=0.2, shuffle=False, random_state=42)\nmodel_deaths = Prophet(interval_width=0.95,growth='logistic')\nmodel_deaths.fit(deaths_train)","a3e90d57":"future_data_deaths = pd.DataFrame()\nfuture_data_deaths['ds'] = pd.date_range(start=\"2020-10-15\",end=\"2020-11-05\")\nfuture_data_deaths['floor'] = 0\nfuture_data_deaths['Timestep'] = future_data_deaths.index+231 #We have used 231 data points for training\nfuture_data_deaths['cap'] =  future_data_deaths.apply(lambda row:func_logistic(row['Timestep']+10,a_deaths, b_deaths, c_deaths),axis=1)\nfuture_data_deaths = future_data_deaths.drop('Timestep',axis=1)","72dbc642":"forecast_deaths_test = model_deaths.predict(deaths_test)\nrmse = np.sqrt(mean_squared_error(deaths_test['y'],forecast_deaths_test['yhat']))\nr2 = r2_score(deaths_test['y'],forecast_deaths_test['yhat'])\nprint('Root Mean Squared error for deaths predicted is {:.2f}'.format(rmse))\nprint('R2 score for deaths predicted is {:.2f}'.format(r2))","c7b0231b":"forecast_deaths_future = model_deaths.predict(future_data_deaths)\nall_forecasts_deaths = forecast_deaths_test.append(forecast_deaths_future)\n","367eeabc":"model_cases.plot(all_forecasts_cases,xlabel='Date',ylabel='Cases',figsize=(12,6));\nplt.axvline(x=pd.to_datetime(cases_train['ds'].iloc[-1]),linestyle='-.',label='2020-08-28: Last observation date in training data')\nplt.axvline(x=pd.to_datetime(cases_test['ds'].iloc[-1]),linestyle='--',label='2020-10-14: Last observation date in test data')\nplt.title('Prophet model for Cases',size=20)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","87e8ed94":"model_deaths.plot(all_forecasts_deaths,xlabel='Date',ylabel='Deaths',figsize=(12,6));\nplt.axvline(x=pd.to_datetime(deaths_train['ds'].iloc[-1]),linestyle='-.',label='2020-08-28: Last observation date in training data')\nplt.axvline(x=pd.to_datetime(deaths_test['ds'].iloc[-1]),linestyle='--',label='2020-10-14: Last observation date in test data')\nplt.title('Prophet model for Deaths',size=20)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","6f321917":"cases = PrettyTable()\ncases.field_names = [\"Model\",\"RMSE\", \"R2 Score\"]\ncases.add_row([\"Linear Regression\", 524980.36,0.92])\ncases.add_row([\"Multi Linear Regression\", 197317.77,0.81])\ncases.add_row([\"Polynomial Regression\", 159563.04,0.87])\ncases.add_row([\"MLP\", 19625.79,1.00])\ncases.add_row([\"Logistic Growth & Prophet\", 23966.72,0.91])","723ff9ca":"deaths = PrettyTable()\ndeaths.field_names = [\"Model\",\"RMSE\", \"R2 Score\"]\ndeaths.add_row([\"Linear Regression\", 6696.82,0.98])\ndeaths.add_row([\"Multi Linear Regression\", 7789.30,0.79])\ndeaths.add_row([\"Polynomial Regression\", 7416.37,0.80])\ndeaths.add_row([\"MLP\", 2723.93,1.00])\ndeaths.add_row([\"Logistic Growth & Prophet\", 3592.70,0.83])","9db48a9f":"print(\"CASES\")\nprint(cases)\nprint()\nprint(\"DEATHS\")\nprint(deaths)","f39935bb":"india_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nindia_covid_19['Date'] = india_covid_19['Date'].apply(lambda d:datetime.strptime(d, '%d\/%m\/%y'))\nindia_covid_19 = india_covid_19[india_covid_19['Date']<='2020-09-30']","a8e77712":"india_covid_19.head()","b1feed49":"cumulative_forAllStates = india_covid_19.groupby(india_covid_19['Date'].dt.strftime('%m')).agg(Total_Cured=('Cured', 'sum'), \n                                         Total_deaths=('Deaths', 'sum'),\n                                         Total_confirmed=('Confirmed','sum')\n                                         ).reset_index()","bc3ab537":"plt.figure(figsize=(15,6))\nplt.bar(cumulative_forAllStates['Date'], cumulative_forAllStates['Total_Cured'],color='green',label='Actual Values',alpha=0.5)\nplt.plot(cumulative_forAllStates['Date'],cumulative_forAllStates['Total_Cured'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total cured in 1e7s', size=20)\nplt.axvline(x=2.5,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=4.2,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6,7,8], ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep'], rotation='horizontal', size=15)\nplt.yticks(size=15)\nplt.title('Trend of total cured over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","e0b3ecd9":"plt.figure(figsize=(15,6))\nplt.bar(cumulative_forAllStates['Date'], cumulative_forAllStates['Total_deaths'],color='maroon',label='Actual Values',alpha=0.5)\nplt.plot(cumulative_forAllStates['Date'],cumulative_forAllStates['Total_deaths'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total deaths', size=20)\nplt.axvline(x=2.5,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=4.2,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6,7,8], ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep'], rotation='horizontal', size=15)\nplt.yticks(size=15)\nplt.title('Trend of total death over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","cedd8a27":"plt.figure(figsize=(15,6))\nplt.bar(cumulative_forAllStates['Date'], cumulative_forAllStates['Total_confirmed'],color='orange',label='Actual Values',alpha=0.5)\nplt.plot(cumulative_forAllStates['Date'],cumulative_forAllStates['Total_confirmed'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total cases in 1e8s', size=20)\nplt.axvline(x=2.5,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=4.2,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6,7,8], ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep'], rotation='horizontal', size=15)\nplt.title('Trend of total cases over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","a87ec673":"india_date_grouped = india_covid_19.groupby(india_covid_19['Date']).agg(Total_Cured=('Cured', 'sum'), \n                                         Total_deaths=('Deaths', 'sum'),\n                                         Total_confirmed=('Confirmed','sum')\n                                         ).reset_index()","bf747de7":"#Growth factor before lockdown\ndata_before_lockdown = india_date_grouped[india_date_grouped['Date']<='2020-03-25']\ndata_during_lockdown =  india_date_grouped[(india_date_grouped['Date']>'2020-03-25') & (india_date_grouped['Date']<='2020-05-31')]\ndata_after_lockdown = india_date_grouped[india_date_grouped['Date']>'2020-05-31']","988106f1":"def growth_factor(df,column):\n    growth_diff = []\n    for i in range(1,len(df)):\n        growth_diff.append(df.iloc[i][column] \/ df.iloc[i-1][column])\n    growth_factor = sum(growth_diff)\/len(growth_diff)\n    return growth_factor","a01b4996":"cases_growth_factor = {}\ncases_growth_factor['before'] = growth_factor(data_before_lockdown,'Total_confirmed')\ncases_growth_factor['during'] = growth_factor(data_during_lockdown,'Total_confirmed')\ncases_growth_factor['after'] = growth_factor(data_after_lockdown,'Total_confirmed')\nprint('Average growth rate for cases before lockdown {:.2f}'.format(cases_growth_factor['before']))\nprint('Average growth rate for cases during lockdown {:.2f}'.format(cases_growth_factor['during']))\nprint('Average growth rate for cases after lockdown {:.2f}'.format(cases_growth_factor['after']))\n","2c2a8e7a":"x = [1,2,3]\ny = np.array([20,21,22,23])\nmy_xticks = ['Before','During','After']\nplt.figure(figsize=(15,6))\nplt.xticks(x, my_xticks, size=15)\nplt.plot(x,list(cases_growth_factor.values()),label='Growth Factor Values')\nplt.xlabel('Phases of Lockdown', size=20)\nplt.ylabel('Growth Factor', size=20)\nplt.title('Growth Factor for Number of Cases', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","ce17be9a":"deaths_growth_factor = {}\ndeaths_growth_factor['before'] = growth_factor(data_before_lockdown,'Total_deaths')\ndeaths_growth_factor['during'] = growth_factor(data_during_lockdown,'Total_deaths')\ndeaths_growth_factor['after'] = growth_factor(data_after_lockdown,'Total_deaths')\nprint('Average growth rate for deaths before lockdown {:.2f}'.format(deaths_growth_factor['before']))\nprint('Average growth rate for deaths during lockdown {:.2f}'.format(deaths_growth_factor['during']))\nprint('Average growth rate for deaths after lockdown {:.2f}'.format(deaths_growth_factor['after']))","72286dfb":"#Plotting data before lockdown\ntemp = data_before_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='Before Lockdown - Cases over time', color_discrete_sequence = ['green', 'maroon', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","7ddf1130":"#During lockdown\ntemp = data_during_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='During Lockdown - Cases over time', color_discrete_sequence = ['green', 'brown', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","b8bc6ff4":"#After lockdown\ntemp = data_after_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='Post Lockdown - Cases over time', color_discrete_sequence = ['green', 'maroon', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","09a20560":"#Overall infection rate \nindia_date_grouped[\"Infection Rate\"] = india_date_grouped[\"Total_confirmed\"].diff()\nindia_date_grouped = india_date_grouped[india_date_grouped[\"Infection Rate\"]>0]","88e6f5d0":"lockdown_start_date=\"2020-03-25\"\nlockdown_end_date=\"2020-05-31\"\nfig=px.line(india_date_grouped,x=\"Date\",y=\"Infection Rate\", title=\"Overall infection rate in India\")\nfig.add_shape(dict(type=\"line\",x0=lockdown_start_date,y0=0,\n                  x1=lockdown_start_date,y1=india_date_grouped[\"Infection Rate\"].max(),\n                  line=dict(color=\"red\",width=2)))\nfig.add_annotation(dict(x=lockdown_start_date,y=india_date_grouped[\"Infection Rate\"].max(),text='starting date of the lockdown'))\n\n\n\nfig.add_shape(dict(type='line',x0=lockdown_end_date,y0=0,\n                  x1=lockdown_end_date,y1=india_date_grouped[\"Infection Rate\"].max(),\n                  line=dict(color=\"red\",width=2)))\nfig.add_annotation(dict(x=lockdown_end_date,y=india_date_grouped[\"Infection Rate\"].max(),text=\"lockdown end date\"))\n\nfig.update_layout(title_x = 0.5)\nfig.show()","830defb7":"df_italy = pd.read_csv('..\/input\/covid19-in-italy\/covid19_italy_region.csv')","a3e4e0a1":"df_italy.head()","849d8e85":"def convertDate(date):\n    d = datetime.fromisoformat(date)\n    return d\n    ","361306f8":"df_italy['Date'] = df_italy['Date'].apply(lambda d:convertDate(d))\ndf_italy = df_italy[df_italy['Date']<='2020-08-31 00:00:00']","764f3477":"data_by_month = df_italy.groupby(df_italy['Date'].dt.strftime('%m')).agg(Total_Cured=('Recovered', 'sum'), \n                                         Total_deaths=('Deaths', 'sum'),\n                                         Total_confirmed=('TotalPositiveCases','sum')\n                                         ).reset_index()","9d23d4b5":"plt.figure(figsize=(15,8))\nplt.bar(data_by_month['Date'], data_by_month['Total_Cured'],color='green',label='Actual Values',alpha=0.5)\nplt.plot(data_by_month['Date'],data_by_month['Total_Cured'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total cured', size=20)\nplt.axvline(x=0.8,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=2.8,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6], ['Feb','Mar','Apr','May','June','July','Aug'], rotation='horizontal', size=15)\nplt.title('Trend of total cured over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","5ea5f847":"plt.figure(figsize=(15,8))\nplt.bar(data_by_month['Date'], data_by_month['Total_deaths'],color='maroon',label='Actual Values',alpha=0.5)\nplt.plot(data_by_month['Date'],data_by_month['Total_deaths'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total deaths', size=20)\nplt.axvline(x=0.8,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=2.8,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6], ['Feb','Mar','Apr','May','June','July','Aug'], rotation='horizontal', size=15)\nplt.title('Trend of total death over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","a5790fef":"plt.figure(figsize=(15,8))\nplt.bar(data_by_month['Date'], data_by_month['Total_confirmed'],color='orange',label='Actual Values',alpha=0.5)\nplt.plot(data_by_month['Date'],data_by_month['Total_confirmed'],color='black',label='Trend')\nplt.xlabel('Month', size=20)\nplt.ylabel('Total cases', size=20)\nplt.axvline(x=0.8,linestyle ='-.',label='Start of Lockdown')\nplt.axvline(x=2.8,label='End of Lockdown')\nplt.xticks([0,1,2,3,4,5,6], ['Feb','Mar','Apr','May','June','July','Aug'], rotation='horizontal', size=15)\nplt.title('Trend of total cases over time', size=25)\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\nplt.show()","cf004c36":"df_italy = df_italy.groupby(df_italy['Date'].dt.strftime('%Y-%m-%d')).agg(Total_Cured=('Recovered', 'sum'), \n                                         Total_deaths=('Deaths', 'sum'),\n                                         Total_confirmed=('TotalPositiveCases','sum')\n                                         ).reset_index()","059d770f":"#Growth factor before lockdown\ndata_before_lockdown = df_italy[df_italy['Date']<='2020-03-09']\ndata_during_lockdown =  df_italy[(df_italy['Date']>'2020-03-09') & (df_italy['Date']<='2020-05-04')]\ndata_after_lockdown = df_italy[df_italy['Date']>'2020-05-04']","495d9e5a":"def growth_factor(df,column):\n    growth_diff = []\n    for i in range(1,len(df)):\n        growth_diff.append(df.iloc[i][column] \/ df.iloc[i-1][column])\n    growth_factor = sum(growth_diff)\/len(growth_diff)\n    return growth_factor","9a5f357c":"cases_growth_factor = {}\ncases_growth_factor['before'] = growth_factor(data_before_lockdown,'Total_confirmed')\ncases_growth_factor['during'] = growth_factor(data_during_lockdown,'Total_confirmed')\ncases_growth_factor['after'] = growth_factor(data_after_lockdown,'Total_confirmed')\nprint('Average growth rate for cases before lockdown {:.2f}'.format(cases_growth_factor['before']))\nprint('Average growth rate for cases during lockdown {:.2f}'.format(cases_growth_factor['during']))\nprint('Average growth rate for cases after lockdown {:.2f}'.format(cases_growth_factor['after']))\n","6441ca9c":"deaths_growth_factor = {}\ndeaths_growth_factor['before'] = growth_factor(data_before_lockdown,'Total_deaths')\ndeaths_growth_factor['during'] = growth_factor(data_during_lockdown,'Total_deaths')\ndeaths_growth_factor['after'] = growth_factor(data_after_lockdown,'Total_deaths')\nprint('Average growth rate for deaths before lockdown {:.2f}'.format(deaths_growth_factor['before']))\nprint('Average growth rate for deaths during lockdown {:.2f}'.format(deaths_growth_factor['during']))\nprint('Average growth rate for deaths after lockdown {:.2f}'.format(deaths_growth_factor['after']))","cc8284ff":"#Plotting data before lockdown\ntemp = data_before_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='Cases over time', color_discrete_sequence = ['green', 'maroon', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","82beb978":"#During lockdown\ntemp = data_during_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='Cases over time', color_discrete_sequence = ['green', 'maroon', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","1d2ab337":"#After lockdown\ntemp = data_after_lockdown[['Date', 'Total_confirmed', 'Total_deaths', 'Total_Cured']]\ntemp.columns = ['Date', 'Active', 'Deaths', 'Cured']\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Cured', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\nfig_2 = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', height=500, \n               title='Cases over time', color_discrete_sequence = ['green', 'maroon', 'orange'])\nfig_2.update_layout(title_x = 0.5)\nfig_2.show()","3d073be2":"#Overall infection rate \ndf_italy[\"Infection Rate\"] = df_italy[\"Total_confirmed\"].diff()\ndf_italy = df_italy[df_italy[\"Infection Rate\"]>0]","2dd2deca":"lockdown_start_date=\"2020-03-09\"\nlockdown_end_date=\"2020-05-04\"\nfig=px.line(df_italy,x=\"Date\",y=\"Infection Rate\", title=\"Overall infection rate over time\")\nfig.add_shape(dict(type=\"line\",x0=lockdown_start_date,y0=0,\n                  x1=lockdown_start_date,y1=df_italy[\"Infection Rate\"].max(),\n                  line=dict(color=\"red\",width=2)))\nfig.add_annotation(dict(x=lockdown_start_date,y=df_italy[\"Infection Rate\"].max(),text='starting date of the lockdown'))\n\n\n\nfig.add_shape(dict(type='line',x0=lockdown_end_date,y0=0,\n                  x1=lockdown_end_date,y1=df_italy[\"Infection Rate\"].max(),\n                  line=dict(color=\"red\",width=2)))\nfig.add_annotation(dict(x=lockdown_end_date,y=df_italy[\"Infection Rate\"].max(),text=\"lockdown end date\"))\nfig.update_layout(title_x = 0.5)\nfig.show()","ad27a1ad":"df_policy = pd.read_csv('..\/input\/coronavirusdataset\/Policy.csv')\ndf_time = pd.read_csv('..\/input\/coronavirusdataset\/Time.csv')","0881d8fb":"df_policy.dropna(inplace=True)","6bdbea76":"df_policy.head()","b59cd43f":"df_time['date'] = df_time.date.apply(lambda d: (datetime.strptime(d, \"%Y-%m-%d\")))","5df254fd":"df_time.head()","01d8f836":"plt.figure(figsize=(15,6))\n\nplt.axvline(x=datetime.strptime('2020-01-03', \"%Y-%m-%d\"), label='Level 1 Alert Start time', color='blue')\nplt.axvline(x=datetime.strptime('2020-01-19', \"%Y-%m-%d\"), label='Level 1 Alert End time', color='blue')\n\nplt.axvline(x=datetime.strptime('2020-01-20', \"%Y-%m-%d\"), label='Level 2 Alert Start time', color='yellow')\nplt.axvline(x=datetime.strptime('2020-01-27', \"%Y-%m-%d\"), label='Level 2 Alert End time', color='yellow')\n\nplt.axvline(x=datetime.strptime('2020-01-28', \"%Y-%m-%d\"), label='Level 3 Alert Start time', color='brown')\nplt.axvline(x=datetime.strptime('2020-02-22', \"%Y-%m-%d\"), label='Level 3 Alert End time', color='brown')\n\nplt.axvline(x=datetime.strptime('2020-02-29', \"%Y-%m-%d\"), label='Social Distancing Campaign 1 Start time', color='red')\nplt.axvline(x=datetime.strptime('2020-03-21', \"%Y-%m-%d\"), label='Social Distancing Campaign 1 End time', color='red')\n\nplt.axvline(x=datetime.strptime('2020-03-22', \"%Y-%m-%d\"), label='Social Distancing Campaign 2 Start time', color='grey')\nplt.axvline(x=datetime.strptime('2020-04-19', \"%Y-%m-%d\"), label='Social Distancing Campaign 2 End time', color='grey')\n\nplt.xlabel('Date', size=20)\nplt.ylabel('Number of cases', size=20)\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.title(\"Covid cases trend with policy timelines\", size=25)\n\nplt.legend(loc = \"best\"\n           , frameon = True\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 12})\n\nplt.plot(df_time.date, df_time.confirmed, color='black')\nplt.show()","f851f23a":"df_patient_info = pd.read_csv('..\/input\/coronavirusdataset\/PatientInfo.csv')","babc342f":"df_patient_info = df_patient_info[df_patient_info['infected_by'].notna()]\ndf_patient_by_infected = pd.DataFrame(df_patient_info[['contact_number', 'infected_by', 'patient_id']]).groupby(df_patient_info['infected_by']).agg('count')","94c32a22":"df_patient_by_infected.head()","7610d351":"mean_infected_number = df_patient_by_infected['infected_by'].mean()\n\nprint('Average transmission rate is {:.2f}'.format(mean_infected_number))","bbb6b7de":"<a link='section4'><\/a>\n# 4. Conclusion","fec471aa":"**Aggregating the total number of infected patients due to close contact.**","205cb9fa":"We notice that **R-squared** value obtained from **multi-linear regression and polynomial regression are almost the same** (0.79 in case of multi-linear and 0.80 in case of polymoial regression), indicating that there is more **linear relationship between our predictors and total number of deaths** when compared to total cases ","fceaca4a":"**From the above plot, we can see that the rate of growth of cases reduced After *Social Distancing Campaign* was implemented in South Korea.**","33f8b51a":"### Recovered Cases Trend","4c79c6a1":"### Step 5: Plotting - Multi-linear regression model for region wise death prediction","9530ea2a":"<a id='section2.1'><\/a>\n## 2.1 Linear regression \nWe've done the predictions using a simple Linear regression model. ","f2d2180c":"**The above plots indicate growth rate in deaths and cases over time. It can be observed that the rates have remained uniform throughout the time**","54281ca1":"### Before Lockdown","7f36298a":"<a id='section1.7'> <\/a>\n## 1.7 Conclusion\n**Brazil needs to take measures to reduce the number of cases and deaths as they are increasing exponentially.**","1e62ab3b":"**The growth factor for deaths clearly indicate that lockdown imposition was on time in India bringing deaths under control in time.**","a53248f3":"### Step 3: Build MLP model for death prediction","9adb06b4":"## 2.3 Multi Layer Perceptron \nIn this section we have built an MLP model, since it helps in approximating any kind functions. Here we can see significant inprovement in model performance both for case and death predictions ","18eb46e6":"Get the records where total number of cases and deaths are **greater than zero** ","07b1497b":"\n* **Cases** : We can see that the average growth rate for India before lockdown is 1.17 whereas we can observe a higher infection rate in Italy(1.31) prior to lockdown\n\n\n* **Deaths**: For deaths, we can observe that in India the growth rate is \"nan\" meaning that the lockdown was imposed even before the firt death occured whereas in case of Italy, the death rate is also quite high(1.35) prior to lockdown.\n\n\n* In both the countries, we can see **decreased cases\/death rate during lockdown** (as is evident from the  growth rate values). ","c21725b7":"### Step 4: Creating polynomial features for \"days_since_first_death\"\nPopulation and one hot encoded features are further appended to this polynomial feature","89acf51f":"### Step 1: Preparing data for modeling\n- Read the data from brazil_population_2019_changed.csv (This is a clean version of brazil_population_2019.csv)\n- Left join this data with the brazil_covid19.csv based on the region\n- Calculate days since the first case and first death for each region \n- One hot encode the region \n- Split the data into training and testing","df568c1b":"**Computing average growth rate for pre-lockdown, lockdown and post-lockdown**","2b17dfef":"### Post Lockdown","11166102":"**From the above metrics, we see that the prophet model is performing well in forecasting the number of cases**","df0df240":"**The R-squared value of 0.92 for case prediction and 0.98 for death prediction is clearly indicating that that there is a linear relationship between the number of days since the first occurance of case\/death to the total number of case\/death respectively**","40374a13":"<a id='section3.1'><\/a>\n## 3.1 India","5849c4e2":"In this notebook we have carried out extensive analysis and have come up with models that can accurately predict and forcast the daily cases and deaths in Brazil.\n\nWe have also performed EDA on 3 other countries - India, Italy, and South Korea inorder to understand the general trend of the COVID-19 better and model accordingly.","34a5eedf":"<a id='section2.6'><\/a>\n## 2.6 Model Comparison:","6daa4d4d":"We calculate the values of rate of growth for active cases and deaths in pre lockdown, post lockdown and lockdown periods to examine how lockdown has benefitted.","8638eb36":"<a id='section2.5'><\/a>\n## 2.5 Logistic growth and Prophet Model for Forecasting","fe94d261":"### Plotting - Maximum Capacity For Cases","eaf28ed1":"**From the above metrics, we see that the prophet model is performing well in forecasting the number of deaths**","a41621ef":"**Computing average growth rate for pre-lockdown, lockdown and post-lockdown**","c02d3e2b":"### Lockdown period","36b586a8":"<a id='section1.1'> <\/a> \n## 1.1 Current situation in Brazil - Cases and Deaths trend","61409c65":"<a id='section1.2'> <\/a>\n## 1.2 Cases v\/s Deaths","d13ec005":"<p><a href=\"https:\/\/commons.wikimedia.org\/wiki\/File:COVID-19_Outbreak_Cases_in_Brazil.svg#\/media\/File:COVID-19_Outbreak_Cases_in_Brazil.svg\"><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/58\/COVID-19_Outbreak_Cases_in_Brazil.svg\/1200px-COVID-19_Outbreak_Cases_in_Brazil.svg.png\" alt=\"COVID-19 Outbreak Cases in Brazil.svg\" width=\"500\" height=\"500\"><\/a><br><a href=\"https:\/\/commons.wikimedia.org\/w\/index.php?curid=86423122\">Image Source<\/a><\/p>","b19e8d36":"### Fitting Logistic Growth Function For Cases and Deaths\n\n- In order to get the coefficients for the Logistic function, **Nonlinear Least Squares estimation** is used.\n\n- We determine the fastest growth day, i.e, the day at which the growth was maximum, and the number of cases\/deaths on that day by using the Logistic funtion with the estimated coefficients.\n\nNow to compute maximum capacity: \n\n- If the cases\/deaths are increasing exponentially, then we are taking the maximum capacity as the number of cases\/deaths that is observed **10 days from the fastest growth day.**\n- If the number of cases\/deaths has stabilized, then we are taking the maximum capacity as the number of cases\/deaths that is observed **10 days from the current date.**","4db5faf6":"### Active Cases Trend ","f9e5b3d9":"### Step 1: Creating polynomial features for \"days_since_first_case\"\nPopulation and one hot encoded features are further appended to this polynomial feature","8798de8a":"**y(t) = c\/(1 + a * np.exp(-b * t))**\n\nHere,  \n- **y(t)** is the number of cases\/deaths at any given time t\n- **c** is the maximum capacity of growth,\n- **b** is a value greater than 0","8a1b86a6":"<a id='section2.3'><\/a>\n## 2.3 Polynomial regression","26439d67":"### Trends of Cases, Deaths and Recovery by month","7c15023c":"### Step 4: Plotting Prophet Predictions and Forecasts for next 20 Days","2a32c489":"### Deaths","b5dc39ed":"**Since lockdown was imposed at a later stage in Italy, death numbers had already started spiking.**","005f4300":"**Creating future data for future forecast of deaths**","1f4976d4":"### Active Cases Trend","4d685cb6":"### Step 1: Preparing data for modeling\n- To model confirmed cases and deaths we have taken cases and deaths since first case and first death occurance respectively\n- Converted our data into 1D arrays \n- Split the data for training and testing \n- Created the data for future prediction of cases and deaths (for next 20 days)","81296da2":"<a id='section1.4'><\/a>\n## 1.4 Cases And Deaths Growth Over Time","5789ee63":"From the above plot it is evident that the infection rate was the already a peak before the lockdown was imposed. However the lockdown measure have clearly brought down the rate significantly.","e7e595f1":"Here we can see that both case and death prediction using MLP has a **perfect R-squared** value of **1.00**","3929c037":"# COVID-19 Case Study For Brazil","0ac091b4":"### Step 2: Modeling","07ef6d03":"### Post lockdown","b657a6cf":"### Step 5: Plotting - Polynomial regression model for region wise death prediction","576ca0f4":"<a id='section1'> <\/a>    \n# 1. Exploratory Data Analysis - Brazil","ca20c6ca":"### Plotting actual values of deaths, active cases and cured over the above three periods","523880d0":"### Step 3: Linear regression model for predicting deaths \nWe have made the **death predictions** using Linear regression on test data as well as **forcasted the predictions for next 20 days** ","413e4eab":"**As can be observed since measures were not observed on time, the rates were already increasing exponentially before lockdown.** ","1402cb64":"<a id='section2.2'><\/a>\n## 2.2 Multi-linear regression\n\nIn this section we've tried to **predict region wise cases\/deaths** by incorporating population of each region. For this we have performed multi-linear regression.","e06c1334":"Prediction is performed by fitting a **prophet model** to the data. Prophet requires us to provide a **maximum capacity** reachable by the forecast. One way of defining this would be to assign population as the maximum capacity, but a more optimal way to determine maximum capacity would be to compute it based on the growth of infection on any given day. This can be easily computed by fitting our data on a given day to a logistic growth function.\n","a5f31fcb":"### Overall Infection Rate ","9ca15bae":"### Plotting - Maximum Capacity For Deaths","419c3f40":"<a id='section1.5'> <\/a>\n## 1.5 Region Wise Case Trend","20e64765":"### Overall Infection Rate Till Date for India","982d1cbe":"### Step 1: Preparing data for modeling\n- To model confirmed cases and deaths we have taken cases and deaths since first case and first death occurance respectively\n- Split the data for training and testing \n- Created the data for future prediction of cases and deaths (for next 20 days)","d49bfbfa":"### Preprocessing of confirmed cases ","2fdbb44b":"<font size=\"3\">Brazil is one of the most populous country in South America with over **200 million people** and is also one of the worst hit countries in the world by Coronavirus cases. The aim of this project is analyze the current situation in Brazil, build a model that can predict daily cases and deaths, and design policies that can be implemented to reduce the growth of cases and deaths.<\/font>","cdba7175":"### During Lockdown","69df7dc3":"<a id='section3.2'><\/a>\n## 3.2 Italy","cbde2c20":"### Trends for Deaths, Recovery and Cases across months","ecbafd89":"#### One hot encoding the region","567fcf4d":"<a id='section2'><\/a>\n# 2. Modeling and predictions\nIn this section we shall be training different models and predicting total number of cases and deaths. We shall also be concluding which models work the best for given data.\n\n## Models \n- Linear regression\n- Multi linear regression\n- Polynomial regression\n- Multi layer perceptron\n- Logistic growth curve along with Facebook Prophet model","e472ae25":"**We can observe here that the mortality rate had spiked during April to June and stabilized post that.**","2c9987aa":"### Deaths","36aa9764":"<a id='section3.3'><\/a>\n## 3.3 South Korea","a6d01fba":"### Step 3: Plotting - Polynomial regression model for region wise case prediction","41386f7d":"## Raw data","683c30b1":"**From the above plot we can observe that cases and deaths are increasing exponentially over time**","3902a93b":"In the above plot, \n\n- **Blue line** represents forecast done by the model\n- **Black Dotted lines** represent the minimum and maximum capacity.\n- **Cases have been forecasted for 20 days starting from 2020-10-14. This can be seen in the last vertical segment of the above graph**.<br>\n\n\nFrom the above plot, we can clearly see a **logistic growth in number of cases over the months.**","de0d7ade":"**From the above plot we can clearly see that there is a non-linear relationship between our predictors and the total number of cases, therefore in the next section we've created polynomial features for _days_since_first case_ and thus we can see the improvement in predictions**","cde5ff2e":"### Step 2: Linear regression model for predicting cases \nWe have made the **case predictions** using Linear regression on test data as well as **forcasted the predictions for next 20 days** ","9c0fc45c":"**We can observe that the trend is exponential in nature.**","99f3e24b":"**Cases growth has also followed an exponential curve. But lockdown again has helped prevent sudden spikes.**","c002572c":"### Infection spread due to close contact","c8d8a963":"### Growth Factor","5a9e1f50":"**From the above plot, we can see that there is a Linear relationship between number of cases and number of deaths.**","5058cff8":"### Death Trend","f6ad6d2c":"In the above plot, \n\n- **Blue line** represents forecast done by the model\n- **Black Dotted lines** represent the minimum and maximum capacity.\n- **Deaths have been forecasted for 20 days starting from 2020-10-14. This can be seen in the last vertical segment of the above graph**.<br>\n\n\nFrom the above plot, we can clearly see a **logistic growth in number of deaths over the months.**","5be91bcf":"<a id='section1.6'> <\/a>\n## 1.6 Heat map of total cases, deaths and death rate in Brazil ","fa7f220a":"**As, observed from the above lineplot we can clearly see that during the lockdown the Infection Rate had at worst a linear increase. Without lockdown it would have been an exponential increase.**","d76c1f2a":"### Recovery trend","ec674f0e":" **Creating dataframe for future forecast**","34ffb43e":"Summary of RMSE scores and R2 scores for different models","2304d3b3":"We can notice that, on an average, one person is spreading the infection to 3 more people. This rate of spread is very low when compared to other countries. \nRefer to the link mentioned below, to see the rate of spread in other countries.\n\nhttps:\/\/www.who.int\/docs\/default-source\/coronaviruse\/situation-reports\/20200805-covid-19-sitrep-198.pdf?sfvrsn=f99d1754_2","541b9177":"### Pre lockdown","d6f7eca8":"### Preprocessing of deaths","36d1cf59":"#### Calculating days since the first case occured for each region","8122bc85":"### Step 2: Multi-linear model for case prediction\nWe have made the **case predictions** using multi=linear regression model and calculated RMSE and R-squared by performing **cross-validation** on the training data","d851c216":"<font size=\"3\">[Click here to scroll to the top](#content)<\/font> ","c03e2e1b":"### Logistic Growth Function","ec288f3c":"**Similar to case predictions, from the above plot we can clearly see that there is a non-linear relationship between our predictors and the total number of deaths, therefore in the next section we've created polynomial features for _days_since_first death_**","daf48c72":"Getting the **total population of each region and left joining it with the df_brazil** that has day-wise cases and deaths\n","4e662085":"### Step 2: Build MLP model for case prediction\n- The model has 2 hidden layers with 200 nodes each \n- We are using relu activation function and lbfgs solver for finding the global minimum","fe79f4fd":"### Step 1: Preparing data for modeling\n\n* Reading the raw data : <br>\n    - Brazil cases and deaths data(brazil_covid19.csv) <br>\n    - Brazil population data (brazil_population_2019_changed.csv)<br>\n* Adding total population column to cases and deaths dataframe from population dataframe.\n* Aggregating cases and deaths by date.","16e5c13f":"### Cases\n","2689379a":"**We can observe that growth factor has decreased during lockdown. This means that without imposition of lockdown the spread of virus would have been really fast and uncontrollable.**","b998b757":"### Growth Factor","f17b8bf2":"### Step 3: Fitting Prophet and Prediction\n\nWe use the data prepared along with the respective maximum capacities for cases and deaths to fit separate prophet models to cases and deaths and are used to make future forecasts. Since the cases\/deaths count can't go below zero, we provide a floor value of zero to Prophet.","0605fa56":"## Team:  \n$\\;\\;\\;\\;\\;\\;$<font size=\"3\"><b>Anjana K<\/b><\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\"><b>Manisha R<\/b><\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\"><b>Padmaja Bhagwat<\/b><\/font>","dc54f510":"### Step 2: Modeling polynomial regression for predictig cases ","a29ed56e":"#### One hot encoding the region","73d7d118":"### Plotting actual values of deaths, active cases and cured over the above three periods","ed31ad1a":"#### Calculating days since the first case occured for each region","00dafa09":"From the previous analysis, coronavirus outbreak seems to be an exponential growth, but there **cannot be an exponential forever** as the outbreak would stabilize slowly when most of the people are infected by it. \nThis kind of growth is similar to a **logistic growth**. \n\nTherefore, we shall be modifying the Logistic regression generally used for classification task to perform the regression task by modifying the formula as follows:\n\nLogistic regression formula (for classification): **y(t) = 1 \/ (1 + np.exp(-b * t)**\n\nModified Logistic growth formula (for regression): **y(t) = c \/ (1 + a * np.exp(-b * t))**\n\nThe **Logistic growth formula** is used to calculate the **day of fastest growth** and the cases\/deaths on the fastest growing day.\nIn the following sections, we will be explaining how each one of these will play a role in building a better forecasting model.","571e10e7":"Logistic function gives us the number of cases\/deaths at any given time T.","09218435":"Currently, Brazil is witnessing an exponential growth of COVID-19 infection, therefore Linear models (Linear , Multi-linear, and polynomial regression) seem to perform well, but based on the observations made from other countries, this growth gets saturated after a point. \n\nWe notice that MLP is giving extremely accurate predictions for the given dataset, but it fails to capture the generic trend associated with this kind of infection growth.\n\nThis kind of growth can be well modeled using Logistic growth functions. Therefore, logistic growth modeling with Prophet provides a more realistic predictions, that would help in understanding the future trend and in designing the policies inoder to curb spread of infection in Brazil.","bb2f29a4":"We can notice that the following policies have had a **huge positive impact** in containing the spread of COVID-19 in South Korea:\n\n1. Level 1 Alert - Blue zone\n2. Level 2 Alert - Yellow zone\n3. Level 3 Alert - Orange zone\n4. Social Distancing campaign 1\n5. Social Distancing campaign 2\n\n","90b93b97":"### Death Trend","09c8ec6b":"**The curves for Italy are in general steeper than those for India.**","d2d98dd9":"### Step 4: Multi-linear model for death prediction\nWe have made the **death predictions** using multi-linear regression model and calculated RMSE and R-squared by performing **cross-validation** on the training data","f4c9556f":"**Here we can see that the R-squaed value has improved from 0.81 in case of linear model to 0.87 after calcualting the polynomial features for days_since_first_case. The plot below also demonstrates a better fit**","7e1c6c94":"### Cases","7fd0ac9a":"### Step 3: Plotting - Multi-linear regression model for region wise case prediction","4dd54e4e":"#### Brazil day wise case and death data from brazil_covid19.csv","6b8d72bb":"**Number of cases in regions : Centro-Oeste, and Nordeste have higher number of cases as compared to the other regions in Brazil**","5388f32a":"#### Brazil population data from brazil_covid19.csv","829088f6":"### Plot - Cases trend and timeline of policy implementation","6d06418f":"<a id='content'><\/a>\n# Table of Contents\n\n<font size=\"4\">1. [Exploratory Data Analysis - Brazil](#section1)<\/font> \n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.1 [Current situation in Brazil - Cases and Deaths trend](#section1.1)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.2 [Cases v\/s Deaths](#section1.2)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.3 [Mortality rate over time](#section1.3)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.4 [Cases and deaths growth over time](#section1.4)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.5 [Region wise case trend](#section1.5)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">1.6 [Heat map of total cases, deaths and death rate in Brazil](#section1.6)<\/font>\n\n\n<font size=\"4\">2. [Modeling and predictions](#section2)<\/font> \n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.1 [Linear regression model](#section2.1)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.2 [Multi linear regression](#section2.2)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.3 [Polynomial regression](#section2.3)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.4 [Multi layer perceptron](#section2.4)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.5 [Logistic growth and Prophet Model for Forecasting](#section2.5)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">2.6 [Model Comparison](#section2.6)<\/font>\n\n<font size=\"4\">3. [Exploratory Data Analysis - India, Italy and South Korea](#section3)<\/font> \n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">3.1 [India](#section3.1)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">3.2 [Italy](#section3.2)<\/font>\n\n$\\;\\;\\;\\;\\;\\;$<font size=\"3\">3.3 [South Korea](#section3.3)<\/font>\n\n<font size=\"4\">4. [Conclusion](#section4)<\/font> ","c30ab183":"**From the above heat map we can observe that Sudeste region has the highest number of cases, deaths and death rate when compared to other regions.**\n\n**Brazil has a low mortality rate.**","3ad10fa8":"### Step 4: Plotting - MLP model for cases and deaths \nPlotted the case and death predictions on **test data** as well as **forcasted data for the next 20 days** ","fc1ae067":"### Raw Data ","1c7f9310":"### Raw data ","925fc067":"**Trend here is exponential as well. However the values in y-axis are absolut values. Lockdown being imposed well in advance has seemed to contain the number of deaths**","aa0b5ae7":" We have referred to the following link to get the lockdown dates:<br>\n https:\/\/en.wikipedia.org\/wiki\/COVID-19_pandemic_lockdown_in_India <br>","f0c48d1a":"We compute growth factor to help understand if lockdown has helped.","64523f86":"### Step 4: Plotting - Linear regression model for cases and deaths \nPlotted the case and death predictions on **test data** as well as **forcasted data for the next 20 days** ","13e9da47":"<a id='section3'><\/a>\n# 3. Exploratory Data Analysis - India, Italy and South Korea\n\n**In this section we shall be exploring the trends in the following 3 contries in order to come up with policies to contain spread of COVID-19 in Brazil**","af44fbe3":"<a id='section1.3'> <\/a>\n## 1.3 Mortality rate over time"}}