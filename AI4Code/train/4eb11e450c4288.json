{"cell_type":{"76c91dff":"code","1abc8e99":"code","2839f533":"code","31f2290d":"code","e365c471":"code","b28a139f":"code","70eb3eeb":"code","34b96267":"code","e0853ada":"code","4f9ce582":"code","0bdca676":"code","5bc4393f":"code","db718552":"code","5bf90e15":"code","0034f65d":"code","fce965d0":"markdown","3c4bc5b5":"markdown"},"source":{"76c91dff":"import pandas as pd\n\n# testing Kaggle output folder (since sometimes it bugged and need to be restarted)\n\nx = pd.DataFrame({'x','y'})\nx.to_csv('tes.csv')","1abc8e99":"!pip install --upgrade efficientnet tensorflow_addons tensorflow","2839f533":"!pip install -q efficientnet\nimport efficientnet.tfkeras as efn\nimport re\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split    \n\nprint(tf.__version__)","31f2290d":"os.listdir('\/kaggle\/input\/shopee-product-detection-student\/')","e365c471":"train_path = \"\/kaggle\/input\/shopee-product-detection-student\/train\/train\/train\/\"\ntest_path= \"\/kaggle\/input\/shopee-product-detection-student\/test\/test\/test\/\"\nbroken_fnames = []\nfor label in os.listdir(train_path):\n    label_path = train_path + label + '\/'\n    for filename in os.listdir(label_path):\n        if len(filename) > 36:\n            print(label_path + filename)\n            broken_fnames.append(label_path + filename)\n            #finding broken file name\nprint()\nfor filename in os.listdir(test_path):\n    if len(filename) > 36:\n        print(test_path + filename)\n        broken_fnames.append(test_path + filename)\n        \nf = open('broken-file-names.txt', 'w')\n#creates broken file texts.\nf.write('\\n'.join(broken_fnames))\nf.close()","b28a139f":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nIMAGE_SIZE = (400, 400)\nBATCH_SIZE = 128\nSEED = 48\n\ndef get_set():\n    train_path = \"\/kaggle\/input\/shopee-product-detection-student\/train\/train\/train\/\"\n    test_path= \"\/kaggle\/input\/shopee-product-detection-student\/test\/test\/\"\n\n    train_gen = ImageDataGenerator(rescale=1.\/255., \n                                    validation_split=0.25,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.1)\n    train_set = train_gen.flow_from_directory(train_path, target_size=IMAGE_SIZE, \\\n                                              batch_size=BATCH_SIZE, seed=SEED, \\\n                                              subset='training')\n    val_set = train_gen.flow_from_directory(train_path, target_size=IMAGE_SIZE, \\\n                                            batch_size=BATCH_SIZE, seed=SEED, \\\n                                            subset='validation')\n\n    test_gen = ImageDataGenerator(rescale=1.\/255)\n    test_set = train_gen.flow_from_directory(test_path, target_size=IMAGE_SIZE, \\\n                                             batch_size=BATCH_SIZE, seed=SEED, \\\n                                             shuffle=False, class_mode=None)\n    \n    return train_set, val_set, test_set\n\ntrain_set, val_set, test_set = get_set()","70eb3eeb":"from tensorflow.keras.applications.inception_v3 import InceptionV3\n\nbase = InceptionV3(input_shape = (400, 400, 3), \n                    include_top = False, \n                    weights ='imagenet')\nbase.trainable = False\nmodel = tf.keras.Sequential([\n        base,\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(1024, activation='relu'),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(42, activation='softmax')\n    ])\nmodel.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'categorical_crossentropy',\n    metrics=['acc']\n    )\nmodel.summary()","34b96267":"# Alternate model (using InceptionV3 until layer mixed10)\nlast_layer = pre_trained_model.get_layer('mixed10')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output\n\n# Adding dense layer\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 1,024 hidden units and ReLU activation\nx = layers.Dense(1024, activation='relu')(x)\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)                  \n# Add a final sigmoid layer for classification\nx = layers.Dense  (42, activation='softmax')(x)           \n\nmodel1 = Model( pre_trained_model.input, x) \n\nmodel1.compile(optimizer ='adam', \n              loss = 'categorical_crossentropy', \n              metrics = ['acc'])\nmodel1.summary()","e0853ada":"EPOCHS = 1\n\nhist = model.fit(train_set, epochs=EPOCHS, \n                 validation_data=val_set, shuffle=True)\n\n# Running model only for demonstration since the model are pretty large\n# And it could crash the kaggle output if saved \n\n#model.save('model-InceptionV3-SHOPEE-1.hdf5')","4f9ce582":"def generate_prediction(model, save_name):\n    subm = pd.read_csv('\/kaggle\/input\/shopee-product-detection-student\/test.csv')\n    subm = subm.sort_values(by='filename')\n    \n    fnames = sorted(os.listdir('\/kaggle\/input\/shopee-product-detection-student\/test\/test\/test\/'))\n    unbroken_index = np.where(np.vectorize(len)(np.array(fnames)) == 36)[0]\n    \n    y_pred = model.predict(test_set)\n    pred = y_pred.argmax(axis=1)\n    pred = pred[unbroken_index]\n    subm['category'] = pred\n    \n    #adding zero padding (from 1 to 01)\n    subm['category'] = subm['category'].apply(lambda x: '{0:0>2}'.format(x)) \n    \n    #saving the prediction into csv file\n    subm.to_csv(save_name, index=False)\n    return subm","0bdca676":"subm = generate_prediction(model, 'kaggle_submission.csv')\nsubm","5bc4393f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications import xception","db718552":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nIMAGE_SIZE = (299, 299)\nBATCH_SIZE = 128\nSEED = 48\n\ndef get_set():\n    train_path = \"\/kaggle\/input\/shopee-product-detection-student\/train\/train\/train\/\"\n    test_path= \"\/kaggle\/input\/shopee-product-detection-student\/test\/test\/\"\n\n    train_gen = ImageDataGenerator(rescale=1.\/255., \n                                    validation_split=0.25,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.1)\n    train_set = train_gen.flow_from_directory(train_path, target_size=IMAGE_SIZE, \\\n                                              batch_size=BATCH_SIZE, seed=SEED, \\\n                                              subset='training')\n    val_set = train_gen.flow_from_directory(train_path, target_size=IMAGE_SIZE, \\\n                                            batch_size=BATCH_SIZE, seed=SEED, \\\n                                            subset='validation')\n\n    test_gen = ImageDataGenerator(rescale=1.\/255)\n    test_set = train_gen.flow_from_directory(test_path, target_size=IMAGE_SIZE, \\\n                                             batch_size=BATCH_SIZE, seed=SEED, \\\n                                             shuffle=False, class_mode=None)\n    \n    return train_set, val_set, test_set\n\ntrain_set, val_set, test_set = get_set()","5bf90e15":"base_model = tf.keras.applications.Xception(input_shape=(299,299,3),weights=\"imagenet\", include_top=False)\nbase_model.trainable = False\nmodel = tf.keras.Sequential([\n        base_model,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(1042, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(42, activation='softmax')\n        ])\nmodel.compile(\n    optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4, beta_1=0.9, beta_2=0.999, amsgrad=False),\n    loss = 'categorical_crossentropy',\n    metrics=['acc']\n    )\nmodel.summary()\n\n","0034f65d":"EPOCHS = 3\n\nhist = model.fit(train_set, epochs=EPOCHS, \n                 validation_data=val_set, shuffle=True)","fce965d0":"# I only use epoch = 1 only for demonstration, the epoch I used for my late submission are 3","3c4bc5b5":"# Xception model"}}