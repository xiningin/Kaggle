{"cell_type":{"22d46460":"code","e59a8ccd":"code","3f934126":"code","0f808c80":"code","1328a4c1":"code","403eb9a8":"code","4ed3bfd1":"code","e0a3f3d2":"code","f39219e2":"code","0fc23fae":"code","4d247a16":"code","89b4bfa0":"code","2fe70bda":"code","45d6efd6":"code","859a2ce3":"code","882bfc4f":"code","c864ff4f":"code","fcf230ac":"code","c44fb0de":"code","b809eced":"code","fc6cf82d":"code","6eaf4b41":"code","c1b99e7f":"code","b194c4a3":"code","7c3448ff":"code","416189f6":"markdown","a50a793c":"markdown","729774fe":"markdown","df23a6c2":"markdown","039a90f5":"markdown","360b13b7":"markdown","aa104db1":"markdown","ef26b8d8":"markdown","d6cd2e44":"markdown","8ae8da66":"markdown","4fbcc504":"markdown","a3800c53":"markdown","7932991a":"markdown","b1ceac7b":"markdown"},"source":{"22d46460":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","e59a8ccd":"df = pd.read_csv('\/kaggle\/input\/dataset-of-laptop-users\/Laptop-Users.csv')","3f934126":"df.head()","0f808c80":"df.info()","1328a4c1":"df.columns","403eb9a8":"df['Has Laptop'].value_counts()","4ed3bfd1":"label = ['YES','NO']\nfig = px.pie(labels=label,values=df['Has Laptop'].value_counts(), names = label,width = 900, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.8, \n                  marker = dict(colors = ['#ff6361','#1e434c','#ffa600'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Laptop', \n                                      x = 0.5, y = 0.5, font_size = 38, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)","e0a3f3d2":"plt.figure(figsize=(17,9))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .75)\nplt.subplot(1,3,1)\nsns.countplot(x='Gender',data=df,color='coral')\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Vs Count')\nplt.xticks(rotation='vertical')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\nsns.boxplot(x='Gender',data=df,y='Age',color='limegreen')\nplt.xlabel('Gender')\nplt.ylabel('Age')\nplt.title('Gender Vs Age')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.subplot(1,3,3)\nsns.barplot(x='Gender',data=df,y='Income',color='cyan')\nplt.xlabel('Gender')\nplt.ylabel('Income')\nplt.title('Gender Vs Income')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.suptitle('Gender')\nplt.tight_layout()\nplt.show()","f39219e2":"plt.figure(figsize=(16,9))\nsns.set_context(\"poster\", font_scale = .75)\nsns.set_style('darkgrid')\nplt.subplot(121)\nsns.kdeplot(x='Income',data=df,hue='Gender',fill=True,palette=[\"#ff6361\",\"#ffa600\"], alpha=.8, linewidth=0)\nplt.title('Gender Vs Income')\nplt.subplot(122)\nsns.set_palette('colorblind')\nsns.kdeplot(x='Age',data=df,hue='Gender',fill=True,palette=[\"#ff6361\",\"#ffa600\"], alpha=.8, linewidth=0)\nplt.title('Gender Vs Age')\nplt.suptitle('Income  And  Age Distribution Vs Gender')\nplt.tight_layout()\n","0fc23fae":"plt.figure(figsize=(17,9))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.subplot(1,3,1)\nsns.barplot(x='Occupation',y='Age',hue='Region',data=df,palette=['#ff6361','cyan'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Vs Count')\nplt.xticks(rotation='vertical')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\nsns.pointplot(x='Occupation',data=df,y='Age',color='limegreen',hue='Gender')\nplt.xlabel('Occupation')\nplt.ylabel('Age')\nplt.title('Occupation Vs Age')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.subplot(1,3,3)\nsns.violinplot(x='Occupation',data=df,y='Income',color='coral')\nplt.xlabel('Occupation')\nplt.ylabel('Income')\nplt.title('Occupation Vs Income')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.suptitle('Occupation')\nplt.tight_layout()\nplt.show()","4d247a16":"plt.figure(figsize=(18,9.5))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.subplot(1,3,1)\nsns.boxplot(x='Region',y='Age',data=df,palette=['#ff6361','cyan'])\nplt.xlabel('Occupation')\nplt.ylabel('Age')\nplt.title('Occupation Vs Count')\nplt.xticks(rotation='vertical')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\nsns.kdeplot(x='Income',data=df,color='limegreen',hue='Region',fill=True,palette=[\"#ff6361\",\"#ffa600\"],alpha=0.8)\nplt.xlabel('Occupation')\nplt.ylabel('Age')\nplt.title('Occupation Vs Age')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.subplot(1,3,3)\nsns.countplot(x='Region',data=df,hue='Gender',palette=['#58508d','limegreen'])\nplt.xlabel('Occupation')\nplt.ylabel('Income')\nplt.title('Occupation Vs Income')\nplt.xticks(rotation='vertical')\nplt.grid()\nplt.suptitle('Occupation')\nplt.tight_layout()\nplt.show()","89b4bfa0":"plt.figure(figsize=(18,9))\nsns.set_style('white')\nsns.set_context(\"poster\", font_scale = .85)\nplt.subplot(1,3,1)\nsns.kdeplot(x='Income',data=df,hue='Has Laptop',alpha =0.8,fill=True,palette=['#1e434c','#ff6361'])\nplt.title('Income Vs Has Laptop')\nplt.grid()\nhspace=0.9\nplt.subplot(1,3,2)\nc=[i for i in range(0,20)]\nsns.barplot(x='Occupation',y=c,data=df,hue='Has Laptop',palette=['#ff6361','limegreen','#ffa600'])\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('Occupation Vs Has Laptop')\nplt.grid()\nplt.subplot(1,3,3)\nsns.set_palette(\"RdBu\",)\nsns.countplot(x='Region',data=df,hue='Has Laptop',palette=['cyan','#58508d'])\nplt.xlabel('Region')\nplt.title('Region Vs Has Laptop')\nplt.grid()\nplt.suptitle('Availibility Of Laptop')\nplt.tight_layout()\nplt.show()","2fe70bda":"df['Has Laptop'] = df['Has Laptop'].apply(lambda x: 1 if x=='yes' else 0) #1 - yes ,0 - no\ndf['Gender']=df['Gender'].apply(lambda x: 1 if x=='male' else 0)#1 - male ,0 - female\ndf['Region'] = df['Region'].apply(lambda x: 1 if x=='city' else 0)#1 - city ,0 - countryside\nOccupy = {'student': 0, 'teacher': 1 , 'banker': 2, 'officer':3}#0 - student,1 - teacher, 2 - banker, 3 - officer \ndf['Occupation']=df['Occupation'].map(Occupy)","45d6efd6":"df.head()","859a2ce3":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing  import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","882bfc4f":"X = df.drop('Has Laptop',axis=1)\ny = df['Has Laptop']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=101)\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\nrfc_pred = rfc.predict(X_test)\nprint('Random Forest Accuracy score is: ',accuracy_score(y_test,rfc_pred)*100)\nk=accuracy_score(y_test,rfc_pred)*100\nprint('\\n')\nprint(confusion_matrix(y_test,rfc_pred))\nprint('\\n')\nprint(classification_report(y_test,rfc_pred))","c864ff4f":"scale= StandardScaler()\nscale.fit(df.drop('Has Laptop',axis=1))\nscaled_features = scale.transform(df.drop('Has Laptop',axis=1))\ndf_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\nX = df_feat\ny = df['Has Laptop']\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.50,random_state=101)\nknn = KNeighborsClassifier(n_neighbors=1)\npred = knn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint('KNN Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","fcf230ac":"plt.figure(figsize=(18,6))\nerror = []\nfor i in range(1,10):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))\n\nsns.set_style('whitegrid')\nplt.plot(range(1,10),error,color='green', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","c44fb0de":"knn = KNeighborsClassifier(n_neighbors=6)\npred = knn.fit(X_train,y_train)\npred = knn.predict(X_test)\n#print('LogisticRegression score is: ',np.round(model.score(y_test,pred)*100,decimals=2))\nprint('\\n')\nprint('Best KNN Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nm=accuracy_score(y_test,pred)*100\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","b809eced":"\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint('\\n')\nprint('Logistics Accuracy score is: ',accuracy_score(y_test,predictions)*100)\np=accuracy_score(y_test,predictions)*100\n\nprint('\\n')\nprint(confusion_matrix(y_test,predictions))\nprint('\\n')\nprint(classification_report(y_test,predictions))","fc6cf82d":"cm = confusion_matrix(y_test, predictions)\nfig, ax = plt.subplots(figsize=(8, 5))\nax.imshow(cm)\nax.grid(False)\nax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))\nax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))\nax.set_ylim(1.5, -0.5)\nfor i in range(2):\n    for j in range(2):\n        ax.text(j, i, cm[i, j], ha='center', va='center', color='white')\nplt.show()","6eaf4b41":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=101)\nmodel = SVC()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)\nprint('Vector Machine Accuracy score is: ',accuracy_score(y_test,pred)*100)\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","c1b99e7f":"\nparam_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} \ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)\ngrid.fit(X_train,y_train)\nprint(grid.best_params_)\nprint(grid.best_estimator_)\nprint(grid.best_score_)","b194c4a3":"grid_pred = grid.predict(X_test)\nprint('Best Vector Machine Accuracy score is: ',accuracy_score(y_test,grid_pred)*100)\ng=accuracy_score(y_test,grid_pred)*100\nprint('\\n')\nprint(confusion_matrix(y_test,grid_pred))\nprint('\\n')\nprint(classification_report(y_test,grid_pred))","7c3448ff":"label = ['Random Forest','K Nearest Neighbours','Logistics Regression','Vector Machine']\nfig = px.pie(labels=label,values=[k,m,p,g], width = 900,names=label, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.8, \n                  marker = dict(colors = ['#8d230f','#ff6361','#ffa600','#bc5090'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Performance Comparison', \n                                      x = 0.5, y = 0.5, font_size = 28, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  ","416189f6":"# Occupation","a50a793c":"# Gender","729774fe":"# 4. Vector Machine","df23a6c2":"# import Libraries","039a90f5":"# Income","360b13b7":"# Thanks","aa104db1":"# ","ef26b8d8":"# Model Building","d6cd2e44":"# 2. KNN  ","8ae8da66":"# Region","4fbcc504":"# Feature Engineering","a3800c53":"> Grid Search\nChoosing C and Gamma values","7932991a":"1. # Random Forest ","b1ceac7b":"# 3. Logistics Score"}}