{"cell_type":{"53acdf7b":"code","2834bd8c":"code","391ae09e":"code","d7e0847b":"code","df3f7e98":"code","74c1af86":"code","b02c2c3d":"code","d7c00f81":"code","2e799744":"code","d6441bc0":"code","95cbb9d4":"code","54944ced":"code","4cc87920":"code","bf50eae4":"code","666ae43d":"code","13a31125":"code","6a170f3d":"code","802d2deb":"code","ffdc5d72":"code","5e6a4713":"code","326ce6ca":"markdown","19f3dbfe":"markdown","efc0d210":"markdown","401946c3":"markdown","a9508942":"markdown","88f7ba31":"markdown","19791ef7":"markdown","aed4ccf2":"markdown","e30b7871":"markdown","62bb7054":"markdown","0f59cd6d":"markdown","fefe9aa4":"markdown","1e5ff4dd":"markdown","c0ee7588":"markdown","68a328cc":"markdown","56b7406a":"markdown","419e8a67":"markdown","4e912e96":"markdown","5de95382":"markdown"},"source":{"53acdf7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2834bd8c":"# Data visualisation & images\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","391ae09e":"#Load the train and test data from the dataset\ndf_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","d7e0847b":"# Join all data into one file\nntrain = df_train.shape[0]\nntest = df_test.shape[0]\n\n# Creating y_train variable; we'll need this when modelling, but not before\ny_train = df_train['Survived'].values\n\n# Saving the passenger ID's ready for our submission file at the very end\npassId = df_test['PassengerId']\n\n# Create a new all-encompassing dataset\ndata = pd.concat((df_train, df_test))\n\n# Printing overall data shape\nprint(\"data size is: {}\".format(data.shape))","df3f7e98":"df_train.info()","74c1af86":"df_test.info()","b02c2c3d":"df_train.head()","d7c00f81":"df_test.head()","2e799744":"# Returning descriptive statistics of the train dataset\ndf_train.describe(include = 'all')","d6441bc0":"# Initiate correlation matrix\ncorr = df_train.corr()  # Pandas dataframe.corr() is used to find the pairwise correlation of all columns in the dataframe. \n# Set-up mask\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# Set-up figure\nplt.figure(figsize=(14, 8))\n# Title\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n# Correlation matrix\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","95cbb9d4":"# Plot for survived\nfig = plt.figure(figsize = (10,5))\nsns.countplot(x='Survived', data = df_train)\nprint(df_train['Survived'].value_counts())","54944ced":"# Bar chart of each Pclass type\nfig = plt.figure(figsize = (10,10))\nax1 = plt.subplot(2,1,1)\nax1 = sns.countplot(x = 'Pclass', hue = 'Survived', data = df_train)\nax1.set_title('Ticket Class Survival Rate')\nax1.set_xticklabels(['1 Upper','2 Middle','3 Lower'])\nax1.set_ylim(0,400)\nax1.set_xlabel('Ticket Class')\nax1.set_ylabel('Count')\nax1.legend(['No','Yes'])\n\n# Pointplot Pclass type\nax2 = plt.subplot(2,1,2)\nsns.pointplot(x='Pclass', y='Survived', data=df_train)\nax2.set_xlabel('Ticket Class')\nax2.set_ylabel('Percent Survived')\nax2.set_title('Percentage Survived by Ticket Class')","4cc87920":"\n# Bar chart of age mapped against sex. For now, missing values have been dropped and will be dealt with later\nsurvived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\nwomen = df_train[df_train['Sex']=='female']\nmen = df_train[df_train['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=20, label = survived, ax = axes[0], kde =False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=20, label = not_survived, ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=20, label = survived, ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=20, label = not_survived, ax = axes[1], kde = False)\nax.legend()\n_ = ax.set_title('Male')","bf50eae4":"\n# Plotting survival rate vs Siblings or Spouse on board\nfig = plt.figure(figsize = (10,12))\nax1 = plt.subplot(2,1,1)\nax1 = sns.countplot(x = 'SibSp', hue = 'Survived', data = df_train)\nax1.set_title('Survival Rate with Total of Siblings and Spouse on Board')\nax1.set_ylim(0,500)\nax1.set_xlabel('# of Sibling and Spouse')\nax1.set_ylabel('Count')\nax1.legend(['No','Yes'],loc = 1)\n\n# Plotting survival rate vs Parents or Children on board\nax2 = plt.subplot(2,1,2)\nax2 = sns.countplot(x = 'Parch', hue = 'Survived', data = df_train)\nax2.set_title('Survival Rate with Total Parents and Children on Board')\nax2.set_ylim(0,500)\nax2.set_xlabel('# of Parents and Children')\nax2.set_ylabel('Count')\nax2.legend(['No','Yes'],loc = 1)","666ae43d":"\n# Bar chart of each Fare type\nfig = plt.figure(figsize = (10,10))\nax1 = sns.countplot(x = 'Pclass', hue = 'Survived', data = df_train)\nax1.set_title('Ticket Class Survival Rate with respect to fare')\nax1.set_xticklabels(['1 Upper','2 Middle','3 Lower'])\nax1.set_xlabel('Ticket Class')\nax1.set_ylabel('Fare')\nax1.legend(['No','Yes'])","13a31125":"# Graph to display fare paid per the three ticket types\nfig = plt.figure(figsize = (10,5))\nsns.swarmplot(x=\"Pclass\", y=\"Fare\", data=df_train, hue='Survived')","6a170f3d":"print(\"TRAIN DATA:\")\ndf_train.isnull().sum()","802d2deb":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n","ffdc5d72":"print(\"TEST DATA:\")\ndf_test.isnull().sum()","5e6a4713":"sns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n","326ce6ca":"### **Import Necessary Library**","19f3dbfe":"### **Loading Train and Test Dataset**","efc0d210":"### **info()**\nThis method prints information about a DataFrame including the index dtype and columns, non-null values and memory usage.  [Reference](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.info.html)","401946c3":"### **describe()**\nDescriptive statistics include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nAnalyzes both numeric and object series, as well as DataFrame column sets of mixed data types.  [Reference](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.describe.html)","a9508942":"### **Thank you...! :)**\n\n### **Please upvote if you like the notebook. This will keep me motivated... :)**","88f7ba31":"### **Feature: Survived**","19791ef7":"\n# **Checking Missing\/Null Data**","aed4ccf2":"# **Observations:**\n### **In case of Train Data:**\n* 177 values are missing from Age feature.\n* 687 values are missing from Cabin feature.\n* 2 values are missing from Embarked feature.\n\n### **In case of test Data:**\n* 86 values are missing from Age feature.\n* 327 values are missing from Cabin feature.\n* 1 value is missing from fare feature.","e30b7871":"# **Observation:**\nThese graphs reveal that overall women were much more likely to survive than men, and this is largely regardless of age. For both sexes, it appears that chances of survival are more likely at a younger age, which is what might have been expected. From the age of 20, it was consistently more likely that men would not have survived, up until their age approached 80. For women, apart from a potentially anomalous finding around the 8-9 bracket, they were always more likely to survive.\n\n### **Feature: SibSp & ParCh**","62bb7054":"# **Visualising The Train Data**\nThe simple explorations discussed above are useful in terms of getting a holistic view of the overall dataset. To understand more about specific features, it is considered best practice to visualise it first. Now. let's walk through some simple visualisations, beginning with a correlation matrix.\n\n### **corr()**\nCompute pairwise correlation of columns, excluding NA\/null values. [Reference](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.corr.html)","0f59cd6d":"### **head()** \nThis function returns the first n rows for the object based on position. It is useful for quickly testing if your object has the right type of data in it. [Reference](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.head.html)","fefe9aa4":"Perhaps not the most insightful view at this stage given that some features are pending engineering, however a visible correlation does exist between Survived and Pclass and Fare. Age, SibSp & Parch would also seem like logical predictors and it would be expected that after these variables have been preprocessed their correlation to Survived will increase.\n\nLet's get an initial sense of these features then, beginning with the target: Survived.","1e5ff4dd":"# **Titanic: Machine Learning from Disaster**\n\n\n### **Contents of the Notebook:**\n* Loading test and train dataset\n* Exploratory Data Analysis\n* Checking missing\/null value\n\n### **Dataset Description:**\n\n* The training set should be used to build the machine learning models. For the training set, they provided the outcome (also known as the \u201cground truth\u201d) for each passenger. \n* The data has been split into two groups:\n  * training set (train.csv)\n  * test set (test.csv)\n* Kaggle Titanic: Machine Learning from Disaster dataset Link : https:\/\/www.kaggle.com\/c\/titanic\/data\n\n\n# **Exploratory Data Analysis**\n\nBefore we can know how much (or little) feature engineering is needed, we need to have a good sense of what we're working with. That's the point where we need exploratory data analysis. \n\nA simple ML implementation with ensebling technique of titanic dataset is described in this [NOTEBOOK](https:\/\/www.kaggle.com\/urmisen1202\/titanic-simple-ml-ensembling-top-6). Please put an upvote there if you like that notebook. This will keep me motivated.\n\nHere we are going to do exploratory data analysis for titanic dataset...\n### Let's jump in :)","c0ee7588":"# **Observation:**\nFare has been displayed per ticket type, revealing that those within Pclass 3 paid a similar fare to those in Pclass 2, but their chance of survival appears to be a lot lower. Pclass contains the highest fares, along with the highest rate of survivial, where orange points denotes the higher ratio .","68a328cc":"### **Feature Description:**\n* The **Survived** variable is our outcome or dependent variable. It is a binary nominal datatype of 1 for survived and 0 for did not survive. \n\n* The **PassengerID** and **Ticket** variables are assumed to be random unique identifiers, that have no impact on the outcome variable. Thus, they will be excluded from analysis.\n* The **Pclass** variable is an ordinal datatype for the ticket class where, 1 = upper class, 2 = middle class, and 3 = lower class.\n* The **Name** variable is a nominal datatype. It could be used in feature engineering to derive the gender from title, family size from surname, and  socio-economic status(SES) from titles like doctor or master. Since these variables already exist, we'll make use of it to see if title, like master, makes a difference.\n* The **Sex** and **Embarked** variables are a nominal datatype. They will be converted to dummy variables for mathematical calculations.\n* The **Age** and **Fare** variable are continuous quantitative datatypes.\n* The **SibSp** represents number of related siblings\/spouse aboard and **Parch** represents number of related parents\/children aboard. Both are discrete quantitative datatypes. This can be used for feature engineering to create a family size and is alone variable.\n* The **Cabin** variable is a nominal datatype that can be used in feature engineering for approximate position on ship when the incident occurred and SES from deck levels.","56b7406a":"# **Observaion:**\nfrom the above figure we came to know that,the higher class ticket, the more likely one is to have survived. \n### **Feature: Age**","419e8a67":"### **isnull()**\nDetect missing values for an array-like object.\nThis function takes a scalar or array-like object and indicates whether values are missing (NaN in numeric arrays, None or NaN in object arrays, NaT in datetimelike). [Reference](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.isnull.html)\n### **isnull(). sum()** \nThis will give the column-wise sum of missing values. This returns the counts of non-NA, NA and total number of entries per group. \n","4e912e96":"### **Feature: Pclass**","5de95382":"# **Observation:**\nNot surprisingly, the structure of these two graphs appear similar, with a similar density of passengers featured within each count, with also a similar ratio of survived vs not survived. This adds further rationale for these two features to be combined, which can be performed at the Data Preprocessing stage.\n### **Feature: Fare**"}}