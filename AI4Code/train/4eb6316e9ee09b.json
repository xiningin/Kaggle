{"cell_type":{"528d473f":"code","916bb37c":"code","3230b5e0":"code","fce74e00":"code","e2e79d02":"code","a9bfaf77":"code","cd9cbe34":"code","98c45ed2":"code","3d5bdc3b":"code","5a5206d3":"code","32f6ab45":"code","449a28bf":"code","dfa2615e":"code","cdfd6ac3":"code","bdb366d2":"code","45e1f2a1":"code","c2066643":"code","a974ec0f":"code","29a3b053":"code","befbc0ea":"code","5f888446":"code","5ee643d0":"code","4adc2511":"code","ff518a99":"code","245a0411":"code","d2d3b904":"code","ceadf047":"code","80250fac":"code","a51640c5":"code","d458b0c4":"code","bcb3f7bc":"code","39c793eb":"code","625e7308":"markdown","b9efc843":"markdown","bccf0799":"markdown","47f6f2fb":"markdown","68dfa66d":"markdown","4a85f1f8":"markdown","6d6c8835":"markdown","c1cd0e6a":"markdown","ff6dd6ee":"markdown","ef214cfc":"markdown","4d26b1b5":"markdown","2aa02745":"markdown","50219e74":"markdown","dae5aa40":"markdown","89001a7b":"markdown","219d8b41":"markdown","4461a7cc":"markdown","3c9f46d2":"markdown"},"source":{"528d473f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\ncustom_style = {'axes.edgecolor': 'white',\n 'axes.facecolor': '#EAEAF2',\n 'axes.labelcolor': '.15',\n 'grid.color': 'white',\n 'text.color': '.15',\n 'xtick.color': '.15',\n 'ytick.color': '.15'}\nsns.set_style(\"darkgrid\", rc=custom_style) \n# This dict is to make the seaborn visuals readable in the Jupyter Notebook Dark Theme\n# credits to mwaskom and Kyle Kelley on Stack Overflow\n\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\nwarnings.filterwarnings(\"ignore\")\n","916bb37c":"tracks = pd.read_csv('..\/input\/ultimate-spotify-tracks-db\/SpotifyFeatures.csv',index_col=0)\ntracks.head()","3230b5e0":"tracks.isnull().sum()","fce74e00":"genres = tracks.loc[~tracks.index.duplicated()]\nlist(genres.index)","e2e79d02":"data = tracks.drop(labels = ['Movie',\n 'R&B',\n 'A Capella',\n 'Alternative',\n 'Country',\n 'Dance',\n 'Electronic',\n 'Anime',\n 'Folk',\n 'Blues',\n 'Opera',\n \"Children's Music\",\n 'Children\u2019s Music',\n 'Indie',\n 'Classical',\n 'Pop',\n 'Reggae',\n 'Reggaeton',\n 'Jazz',\n 'Rock',\n 'Ska',\n 'Comedy',\n 'Soul',\n 'Soundtrack',\n 'World'])\n","a9bfaf77":"data","cd9cbe34":"data.loc[data['track_name'] == 'MIDDLE CHILD']","98c45ed2":"joint = data.loc[data.duplicated(subset='track_name', keep=False)==True]\njoint","3d5bdc3b":"joint.describe()","5a5206d3":"sns.distplot(joint['popularity']).set_title('Popularity Distribution of Hip-Hop\/Rap Songs')","32f6ab45":"popular = joint.loc[joint.popularity >= 65]\npopular","449a28bf":"popular.corr()","dfa2615e":"sns.pairplot(popular, y_vars=['popularity'], x_vars=['acousticness','danceability','duration_ms',\n                                                       'energy','instrumentalness','liveness','loudness',\n                                                       'speechiness','tempo','valence'])","cdfd6ac3":"sns.scatterplot(data=popular,x='danceability',y='popularity',hue='mode').set_title('Popularity vs. Danceability of Popular Hip-Hop\/Rap Songs')","bdb366d2":"sns.scatterplot(data=popular,y='popularity',x='loudness',hue='mode').set_title('Popularity vs. Loudness of Popular Hip-Hop\/Rap Songs')","45e1f2a1":"sns.scatterplot(data=popular,y='popularity',x='tempo',hue='mode').set_title('Popularity vs. Tempo of Popular Hip-Hop\/Rap Songs')","c2066643":"sns.barplot(data=popular,x='popularity',y='key',\n           order=['A','A#','B','C','C#','D','D#','E','F','F#','G','G#']).set_title('Popularity For The Different Keys')","a974ec0f":"from sklearn.ensemble import RandomForestRegressor,RandomForestClassifier,ExtraTreesRegressor,ExtraTreesClassifier\nfrom xgboost import XGBRegressor, XGBClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder","29a3b053":"features = ['acousticness','danceability','duration_ms','energy','instrumentalness','key',\n           'liveness','loudness','mode','speechiness','tempo','time_signature','valence']","befbc0ea":"X = popular[features]\ny = popular['popularity']","5f888446":"train_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state = 1)","5ee643d0":"columns = X.dtypes == 'object'\ncategorical = columns[columns].index\nlabel_train_X = train_X.copy()\nlabel_valid_X = valid_X.copy()\n\nlabel_encoder = LabelEncoder()\nfor col in categorical:\n    label_train_X[col] = label_encoder.fit_transform(train_X[col])\n    label_valid_X[col] = label_encoder.transform(valid_X[col])","4adc2511":"def model_accuracy(model, X_t=label_train_X, X_v=label_valid_X, y_t=train_y, y_v=valid_y):\n    model.fit(X_t,y_t)\n    predictions = model.predict(X_v)\n    return accuracy_score(y_v, predictions)","ff518a99":"def model_score(model, X_t=label_train_X, X_v=label_valid_X, y_t=train_y, y_v=valid_y):\n    model.fit(X_t,y_t)\n    predictions = model.predict(X_v)\n    return mean_absolute_error(y_v, predictions)","245a0411":"RFR1 = RandomForestRegressor(n_estimators = 100, random_state = 1)\nRFR2 = RandomForestRegressor(n_estimators = 250, random_state = 1)\nRFR3 = RandomForestRegressor(n_estimators = 500, random_state = 1)\n\nRFR_Model_1 = RFR1.fit(label_train_X,train_y)\nRFR_Model_2 = RFR2.fit(label_train_X,train_y)\nRFR_Model_3 = RFR3.fit(label_train_X,train_y)\n\nmodels = [RFR_Model_1, RFR_Model_2, RFR_Model_3]\n\nfor i in range(0,len(models)):\n    RFRscore = model_score(models[i])\n    print(\"Random Forest Regression %d Mean Absolute Error: %f\" % (i+1,RFRscore))","d2d3b904":"ETR1 = ExtraTreesRegressor(n_estimators = 100, random_state = 1)\nETR2 = ExtraTreesRegressor(n_estimators = 250, random_state = 1)\nETR3 = ExtraTreesRegressor(n_estimators = 500, random_state = 1)\n\nETR_Model_1 = ETR1.fit(label_train_X,train_y)\nETR_Model_2 = ETR2.fit(label_train_X,train_y)\nETR_Model_3 = ETR3.fit(label_train_X,train_y)\n\nmodels = [ETR_Model_1, ETR_Model_2, ETR_Model_3]\n\nfor i in range(0,len(models)):\n    ETRscore = model_score(models[i])\n    print(\"Extra Trees Regression %d Mean Absolute Error: %f\" % (i+1,ETRscore))","ceadf047":"XGBR1 = XGBRegressor(n_estimators = 100, random_state = 1,verbosity=0)\nXGBR2 = XGBRegressor(n_estimators = 250, random_state = 1,verbosity=0)\nXGBR3 = XGBRegressor(n_estimators = 500, random_state = 1,verbosity=0)\n\nXGBR_Model_1 = XGBR1.fit(label_train_X,train_y)\nXGBR_Model_2 = XGBR2.fit(label_train_X,train_y)\nXGBR_Model_3 = XGBR3.fit(label_train_X,train_y)\n\nmodels = [XGBR_Model_1, XGBR_Model_2, XGBR_Model_3]\n\nfor i in range(0,len(models)):\n    XGBRscore = model_score(models[i])\n    print(\"Extreme Gradient Boost Regression %d Mean Absolute Error: %f\" % (i+1,XGBRscore))","80250fac":"RFC1 = RandomForestClassifier(n_estimators = 100, random_state = 1)\nRFC2 = RandomForestClassifier(n_estimators = 250, random_state = 1)\nRFC3 = RandomForestClassifier(n_estimators = 500, random_state = 1)\n\nRFC_Model_1 = RFC1.fit(label_train_X,train_y)\nRFC_Model_2 = RFC2.fit(label_train_X,train_y)\nRFC_Model_3 = RFC3.fit(label_train_X,train_y)\n\nmodels = [RFC_Model_1, RFC_Model_2, RFC_Model_3]\n\nfor i in range(0,len(models)):\n    RFCaccuracy = model_accuracy(models[i])\n    print(\"Random Forest Classifier %d Accuracy: %f\" % (i+1,RFCaccuracy))","a51640c5":"ETC1 = ExtraTreesClassifier(n_estimators = 100, random_state = 1)\nETC2 = ExtraTreesClassifier(n_estimators = 250, random_state = 1)\nETC3 = ExtraTreesClassifier(n_estimators = 500, random_state = 1)\n\nETC_Model_1 = ETC1.fit(label_train_X,train_y)\nETC_Model_2 = ETC2.fit(label_train_X,train_y)\nETC_Model_3 = ETC3.fit(label_train_X,train_y)\n\nmodels = [ETC_Model_1, ETC_Model_2, ETC_Model_3]\n\nfor i in range(0,len(models)):\n    ETCaccuracy = model_accuracy(models[i])\n    print(\"Extra Trees Classifier %d Accuracy: %f\" % (i+1,ETCaccuracy))","d458b0c4":"XGBC1 = XGBClassifier(n_estimators = 100, random_state = 1)\nXGBC2 = XGBClassifier(n_estimators = 250, random_state = 1)\nXGBC3 = XGBClassifier(n_estimators = 500, random_state = 1)\n\nXGBC_Model_1 = XGBC1.fit(label_train_X,train_y)\nXGBC_Model_2 = XGBC2.fit(label_train_X,train_y)\nXGBC_Model_3 = XGBC3.fit(label_train_X,train_y)\n\nmodels = [XGBC_Model_1, XGBC_Model_2, XGBC_Model_3]\n\nfor i in range(0,len(models)):\n    XGBCaccuracy = model_accuracy(models[i])\n    print(\"Extreme Gradient Boost Classifier %d Accuracy: %f\" % (i+1,XGBCaccuracy))","bcb3f7bc":"sns.distplot(joint['popularity']).set_title('Popularity Distribution of Hip-Hop\/Rap Songs')","39c793eb":"from scipy.stats import beta \nsns.distplot(joint['popularity'], fit=beta)","625e7308":"# Predicting A Popular Hip-Hop\/Rap Song\nAs a first data science project, I wanted to analyze musical data and decided to focus on a specific genre which I thoroughly enjoy.","b9efc843":"### Analysis\nI begin the analysis by observing the description of the data and the probability distribution.","bccf0799":"## Additional Notes\n","47f6f2fb":"To only observe the Hip-Hop and Rap genres I will drop the other genres from the dataset.","68dfa66d":"I will define two separate functions for quantifying the quality of each model. Model Accuracy will be used for classification and Model Score will be used to find the mean absolute error for regression.","4a85f1f8":"To avoid working with duplicated tracks, I will drop one of the entries. Since the Hip-Hop genre is before the Rap genre in the dataset, the Rap duplicates will likely be dropped and separate genres will not be a feature for the model.","6d6c8835":"## Results\nThe regression models Random Forest, Extra Trees, and Extreme Gradient Boost presents the mean average errors of 2.375, 1.247, and 3.125, respectively. The classification models, in the same order, give accuracies of 74.56%, 75.26%, and 73.5%.\n\nThe Extra Trees Regression model appears to present fairly accurate predictions for a popular Hip-Hop\/Rap track with a reasonable error for the range at which a track can be considered popular. However, the classification models all range around mid-low 70 percent in accuracy which is much less than desirable.\n\nAccuracy can likely be improved in the Random Forest and Extreme Gradient Boost with an increase in estimators although this becomes much more expensive. It is also probable that accuracy can be improved by accounting for artist name and including a larger dataset.\n","c1cd0e6a":"## Modeling\n","ff6dd6ee":"\nAn important note about the data is the distribution for popularity among Hip-Hop\/Rap tracks is skewed","ef214cfc":"For modeling and predicting popularity score of these Hip-Hop\/Rap tracks, I will use both classification and regression from the ensemble methods: Random Forest, Extra Trees, and Extreme Gradient Boosting.","4d26b1b5":"From statistics, the way to normalize this data is through the utilization of a beta distribution","2aa02745":"Each characteristic attributed to each song will be used for training except the artist.","50219e74":"### Setup\nFirst, I will read in the data and check for any missing values. Fortunately there are none.","dae5aa40":"Before beginning the actual model training,I will need to do some preprocessing on the categorical data. I will use the built in Label Encoder from Scikitlearn to encode Key, Mode, and Time Signature. ","89001a7b":"The dataframe description and distribution plot reveal the most popular tracks to be rated at least 65 in popularity, so that's the range I will work with.","219d8b41":"Although the distribution is now normalized the issue arises with the parameters that make up a beta distribution, alpha and beta. Alpha and beta compose the distribution but what defines these parameters is not entirely clear. Further research into what alpha and beta are a function of could likely assist in the normalization of future datasets and improve modeling.","4461a7cc":"### Duplicated Tracks\nUpon inspection, it is seen that there are quite a few tracks which are categorized as both Hip-Hop and Rap. Example:","3c9f46d2":"Upon observing the correlation table and various plots, it is seen that for the Hip-Hop\/Rap tracks whose popularity is greater than 65, there is no strong correlation among any particular characteristic. In fact, the only characteristics which display a positive correlation are danceability and tempo.\n\nFrom the scatter plots which display both modes major and minor, there is also no clear distinction between the highly popular tracks and their respective mode.\n\nThe bar plot for the various keys also reveals no one key is a determining factor for higher popularity."}}