{"cell_type":{"8488561f":"code","087bf143":"code","6f9c0826":"code","4e689c80":"code","365412cb":"code","9aeb4d53":"markdown","ff4a7d7d":"markdown","0db72186":"markdown","546adede":"markdown"},"source":{"8488561f":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\n# to_categorical function that converts a vector of integers into a matrix of binary vectors\nfrom keras.utils.np_utils import to_categorical\nfrom keras.datasets import mnist \n\n(X_train, y_train), (X_test, y_test) = mnist.load_data();","087bf143":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1). \n# Keras requires an extra dimension in the end which correspond to channels. \nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32');\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32');\n\n# Normalize the data to reduce the effect of illumination's differences.\nX_train = X_train \/ 255.0;\nX_test = X_test \/ 255.0;\n\n# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ny_train = to_categorical(y_train,10);\ny_test = to_categorical(y_test,10);","6f9c0826":"import matplotlib.pyplot as plt\nimport matplotlib\n# Display first 100 images \nfor i in range(1,100,1):\n    plt.subplot(10,10,i);\n    g =plt.imshow(X_train[i-1][:,:,0], cmap=matplotlib.cm.binary,interpolation='nearest')\n    plt.axis('off');\n","4e689c80":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n#create a simple model and complie the model\nmodel = Sequential();\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)));\nmodel.add(Conv2D(64, (3, 3), activation='selu',kernel_initializer='he_uniform'));\nmodel.add(MaxPooling2D((2, 2)));\nmodel.add(Dropout(0.25));\nmodel.add(Flatten());\nmodel.add(Dense(356, activation='relu',kernel_initializer='he_uniform'));\nmodel.add(Dropout(0.5));\nmodel.add(Dense(10, activation='softmax',kernel_initializer='he_uniform'));\n\n# configuration of the learning process\n# optimizer='adam' - used to improve parameters minimizing losses\n# loss function - measures how poor the model's performance is on known images, ie the error rate between labels and predictions \n# 'categorical_crossentropy\u2019 - the form used for categorical classification\n# metrics - used to evaluate the performance of the model\nmodel.compile(optimizer='adam' , \n              loss = \"categorical_crossentropy\", \n              metrics=[\"accuracy\"])\n\n# model training and iteration through training data in 25 epochs\nhistory = model.fit(\n    X_train,\n    y_train,\n    batch_size=128,\n    epochs=5,\n    validation_data=(X_test,y_test)\n)\n\n# model evaluation - test data were not used in the model drive process so they are new, which means that an accuracy approaching 99% should be obtained\nscore=model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","365412cb":"history_df=pd.DataFrame(history.history)\nhistory_df.loc[:,['loss','val_loss']].plot()\nhistory_df.loc[:,['accuracy','val_accuracy']].plot()","9aeb4d53":"# **Define and train the model**","ff4a7d7d":" # **Read and split the data**","0db72186":"# **Displays the first 100 images of the training set**","546adede":"# **Data preparation: normalization and reshape**"}}