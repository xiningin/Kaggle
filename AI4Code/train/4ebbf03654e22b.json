{"cell_type":{"6e53e5f8":"code","9eafbbf7":"code","469e56d7":"code","fdde536b":"code","08549204":"code","bfca4d9f":"code","7e3c2b69":"code","6a30c3ce":"code","0bb25d89":"code","6fcde805":"code","0b134785":"code","aac2098b":"code","6b0b706b":"code","29f80d95":"code","ad85ec90":"code","3308ddee":"code","4ee43189":"code","c3d036f5":"code","0d28a751":"code","47c50b2b":"code","4e28dbc5":"code","b37751ff":"code","8be3b110":"code","e3d11ced":"code","825500e8":"code","9f34a116":"code","5b738013":"code","1362a016":"code","9da7d885":"code","d842012f":"code","df389182":"code","278f4f74":"code","939cc51c":"code","4ff82077":"code","1be8d89c":"code","8850a3ff":"code","1e1321e3":"code","cc63840c":"code","a3536160":"code","e2f5c7b8":"code","3b8a2eb3":"code","5e9336c1":"code","a9255e2a":"code","adfb94c3":"code","a56e9ef2":"code","20e6004c":"code","003a28ef":"code","2e4a02b4":"code","af7ac879":"code","00690bae":"code","9b842da9":"code","ef0a3c55":"code","424078a3":"markdown","d3df1525":"markdown","7b287211":"markdown","3c43fae2":"markdown","1f2cc302":"markdown","10d01313":"markdown","31c8b8fe":"markdown"},"source":{"6e53e5f8":"%matplotlib inline","9eafbbf7":"from fastai.structured import *\nfrom fastai.column_data import *\n# np.set_printoptions(threshold=50, edgeitems=20)\nPATH = '..\/input'","469e56d7":"os.listdir(PATH)","fdde536b":"# To reproduce the value in the next time\nmanual_seed = 555\nrandom.seed(manual_seed)\nnp.random.seed(manual_seed)\ntorch.manual_seed(manual_seed)\ntorch.cuda.manual_seed_all(manual_seed)\ntorch.backends.cudnn.deterministic = True","08549204":"train_df_raw = pd.read_csv(f'{PATH}\/train.csv', nrows=5000000)","bfca4d9f":"test_df_raw = pd.read_csv(f'{PATH}\/test.csv')","7e3c2b69":"def add_travel_vector_features(df):\n    df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n    df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()","6a30c3ce":"# this function will also be used with the test set below\ndef select_within_boundingbox(df, BB):\n    return (df.pickup_longitude >= BB[0]) & (df.pickup_longitude <= BB[1]) & \\\n           (df.pickup_latitude >= BB[2]) & (df.pickup_latitude <= BB[3]) & \\\n           (df.dropoff_longitude >= BB[0]) & (df.dropoff_longitude <= BB[1]) & \\\n           (df.dropoff_latitude >= BB[2]) & (df.dropoff_latitude <= BB[3])\n\nBB = (-74.5, -72.8, 40.5, 41.8)","0bb25d89":"def sphere_dist(pickup_lat, pickup_lon, dropoff_lat, dropoff_lon):\n    \"\"\"\n    Return distance along great radius between pickup and dropoff coordinates.\n    \"\"\"\n    #Define earth radius (km)\n    R_earth = 6371\n    #Convert degrees to radians\n    pickup_lat, pickup_lon, dropoff_lat, dropoff_lon = map(np.radians,\n                                                             [pickup_lat, pickup_lon, \n                                                              dropoff_lat, dropoff_lon])\n    #Compute distances along lat, lon dimensions\n    dlat = dropoff_lat - pickup_lat\n    dlon = dropoff_lon - pickup_lon\n    \n    #Compute haversine distance\n    a = np.sin(dlat\/2.0)**2 + np.cos(pickup_lat) * np.cos(dropoff_lat) * np.sin(dlon\/2.0)**2\n    \n    return 2 * R_earth * np.arcsin(np.sqrt(a))\n\ndef add_airport_dist(dataset):\n    \"\"\"\n    Return minumum distance from pickup or dropoff coordinates to each airport.\n    JFK: John F. Kennedy International Airport\n    EWR: Newark Liberty International Airport\n    LGA: LaGuardia Airport\n    \"\"\"\n    jfk_coord = (40.639722, -73.778889)\n    ewr_coord = (40.6925, -74.168611)\n    lga_coord = (40.77725, -73.872611)\n    \n    pickup_lat = dataset['pickup_latitude']\n    dropoff_lat = dataset['dropoff_latitude']\n    pickup_lon = dataset['pickup_longitude']\n    dropoff_lon = dataset['dropoff_longitude']\n    \n    pickup_jfk = sphere_dist(pickup_lat, pickup_lon, jfk_coord[0], jfk_coord[1]) \n    dropoff_jfk = sphere_dist(jfk_coord[0], jfk_coord[1], dropoff_lat, dropoff_lon) \n    pickup_ewr = sphere_dist(pickup_lat, pickup_lon, ewr_coord[0], ewr_coord[1])\n    dropoff_ewr = sphere_dist(ewr_coord[0], ewr_coord[1], dropoff_lat, dropoff_lon) \n    pickup_lga = sphere_dist(pickup_lat, pickup_lon, lga_coord[0], lga_coord[1]) \n    dropoff_lga = sphere_dist(lga_coord[0], lga_coord[1], dropoff_lat, dropoff_lon) \n    \n    dataset['jfk_dist'] = pd.concat([pickup_jfk, dropoff_jfk], axis=1).min(axis=1)\n    dataset['ewr_dist'] = pd.concat([pickup_ewr, dropoff_ewr], axis=1).min(axis=1)\n    dataset['lga_dist'] = pd.concat([pickup_lga, dropoff_lga], axis=1).min(axis=1)\n    \n    return dataset","6fcde805":"def data_preprocessing(df, testset=0):\n    add_travel_vector_features(df)\n    if testset==0:\n        df = df.dropna(how='any',axis='rows')\n        df = df[(df.abs_diff_longitude<5) & (df.abs_diff_latitude<5)]\n        df = df[df.fare_amount>0]\n        df = df[(df.passenger_count >= 0) & (df.passenger_count <= 6)]\n        df = df[select_within_boundingbox(df, BB)]\n        \n    df[['date','time','timezone']] = df['pickup_datetime'].str.split(expand=True)\n    add_datepart(df, \"date\", drop=False)\n\n    df[['hour','minute','second']] = df['time'].str.split(':',expand=True).astype('int64')\n    df[['trash', 'order_no']] = df['key'].str.split('.',expand=True)\n    df['order_no'] = df['order_no'].astype('int64')\n    df = df.drop(['timezone','time', 'pickup_datetime','trash','date'], axis = 1)\n    \n    df = add_airport_dist(df)\n    df['distance'] = sphere_dist(df['pickup_latitude'], df['pickup_longitude'], \n                                   df['dropoff_latitude'] , df['dropoff_longitude'])\n    return df","0b134785":"train_df = data_preprocessing(train_df_raw)","aac2098b":"test_df = data_preprocessing(test_df_raw, testset=1)","6b0b706b":"train_df = train_df.reset_index()\ntest_df = test_df.reset_index()","29f80d95":"train_df.columns\n","ad85ec90":"cat_vars = ['passenger_count', 'Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',\n    'Is_month_end','Is_month_start','Is_quarter_end','Is_quarter_start','Is_year_end','Is_year_start','hour','minute','second','order_no']\n\ncontin_vars = ['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude'\n               ,'jfk_dist','ewr_dist','lga_dist','distance']\n\ndep = 'fare_amount'\nn = len(train_df); n","3308ddee":"train_df = train_df[cat_vars+contin_vars+ [dep,'key']].copy()\ntest_df[dep] = 0\ntest_df = test_df[cat_vars+contin_vars+ [dep,'key']].copy()","4ee43189":"for v in cat_vars: train_df[v] = train_df[v].astype('category').cat.as_ordered()","c3d036f5":"apply_cats(test_df, train_df)","0d28a751":"for v in contin_vars:\n    train_df[v] = train_df[v].fillna(0).astype('float32')\n    test_df[v] = test_df[v].fillna(0).astype('float32')","47c50b2b":"train_df = train_df.set_index(\"key\")","4e28dbc5":"df, y, nas, mapper = proc_df(train_df, 'fare_amount', do_scale=True)","b37751ff":"test_df = test_df.set_index(\"key\")","8be3b110":"df_test, _, nas, mapper = proc_df(test_df, 'fare_amount', do_scale=True,\n                                  mapper=mapper, na_dict=nas)","e3d11ced":"# train_ratio = 0.75\ntrain_ratio = 0.8\ntrain_size = int(n * train_ratio); train_size\nval_idx = list(range(train_size, len(df)))","825500e8":"y","9f34a116":"def rmse(y_pred, targ):\n    pct_var = (targ - y_pred)\n    return math.sqrt((pct_var**2).mean())\n# ,test_df=df_test","5b738013":"df_test","1362a016":"md = ColumnarModelData.from_data_frame(PATH, val_idx, df, y.astype(np.float32), cat_flds=cat_vars, bs=256,test_df=df_test)","9da7d885":"cat_vars","d842012f":"cat_sz = [(c, len(train_df[c].cat.categories)+1) for c in cat_vars]","df389182":"y","278f4f74":"emb_szs = [(c, min(50, (c+1)\/\/2)) for _,c in cat_sz];emb_szs","939cc51c":"max_y = np.max(y)\ny_range = (0, max_y*1.2)","4ff82077":"TMP_PATH = \"\/tmp\/tmp\"\nMODEL_PATH = \"\/tmp\/model\/\"","1be8d89c":"!ls ..\/input","8850a3ff":"m = md.get_learner(emb_szs, len(df.columns)-len(cat_vars),\n                   0.04, 1, [256, 128, 64, 32, 8], [0.008,0.008, 0.008, 0.01, 0.01], y_range=y_range,tmp_name=TMP_PATH,models_name=MODEL_PATH)","1e1321e3":"m.lr_find()","cc63840c":"m.sched.plot()","a3536160":"m.sched.plot_lr()","e2f5c7b8":"lr = 2e-5\n","3b8a2eb3":"m.fit(lr, 3, metrics=[rmse])","5e9336c1":"m.fit(lr, 6, cycle_len=1, metrics=[rmse])","a9255e2a":"m.fit(lr, 4, cycle_len=1, cycle_mult=2, metrics=[rmse])","adfb94c3":"m.fit(lr, 4, cycle_len=1, cycle_mult=2, metrics=[rmse])","a56e9ef2":"pred_test=m.predict()","20e6004c":"len(pred_test)","003a28ef":"len(y[val_idx])","2e4a02b4":"y[:20]","af7ac879":"y_test = m.predict(True)","00690bae":"y_test = y_test.reshape(-1)\n","9b842da9":"submission = pd.DataFrame(\n    {'key': test_df.index, 'fare_amount': y_test},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission.csv', index = False)","ef0a3c55":"test_df.index","424078a3":"Convert the categorical variables from string to category. Same mapping for test_df and train_df","d3df1525":"The fastai library in this moment (13\/08\/18) is not updated yet so some core functions must to be modified. (ColumnarModelData,TMP_PATH,MODEL_PATH)","7b287211":"batch size (bs) can be increase to training faster ( 512)","3c43fae2":"proc_df used to prepare the data ready for training (Normalization input, Process the Not Available data, ...) ","1f2cc302":"### Entity Embeddings\nTree-based techniques are usually used to handle structured data. However, Entity embeddings shown that neural network can also lead to the very promissing result. It is used by the winner of predicting the distance of taxi rides (de Br\u00e9bisson et al., 2015) or third place of Rossmann store sale prediction (Guo & Berkahn, 2016)\n\nIn short, this technique represent each category by a vector, then training to obtain the characteristics of the category. For example, when dealing with date of week, we are likely to have the distance of Saturday and Sunday smaller than Saturday and Wednesday. People works with NLP may find this very familiar . For deeper understanding of entity embeddings you can find in this [blog](https:\/\/towardsdatascience.com\/deep-learning-structured-data-8d6a278f3088)\n\nThis kernel based mostly on the fast.ai Rossman notebook and use [fastai](http:\/\/www.fast.ai\/) library.\n\nThe features are pickup and dropoff location, distance, date-parsing.\n\nUpdate: Based on [NYC Taxi Fare - Data Exploration\n](https:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration) and [XGBoost'ing Taxi Fares\n](https:\/\/www.kaggle.com\/gunbl4d3\/xgboost-ing-taxi-fares), the spherical distance and distance to airport are being added to input features\n\nNumber of rows : 5M. While practicing, smaller number (500_000) is recommended to accelerate the training time  ","10d01313":"Assign the categorical variables and continuous variable","31c8b8fe":"Finding the good learning rate"}}