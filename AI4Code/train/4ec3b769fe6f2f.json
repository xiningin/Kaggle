{"cell_type":{"03db808b":"code","ff4ba11c":"code","08a76339":"code","80a77ce4":"code","f5b376fc":"code","a46518d3":"code","ee36a868":"code","82d88c6f":"code","f8e6d611":"code","de89d7ed":"code","2165b9a5":"code","b58377be":"code","34085257":"code","169a38db":"code","ff77b434":"code","eb90138e":"code","40d95f0e":"code","a33e285e":"code","075253ba":"code","665d85da":"code","d5439d29":"code","04f5d297":"code","ba1eb564":"code","9a61db15":"code","b3a5dad5":"code","7e178870":"code","cf93849c":"code","b672a777":"code","fa01d54b":"code","ab5b54e7":"markdown","e47dfbb1":"markdown"},"source":{"03db808b":"import numpy as np \nimport pandas as pd\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nplt.style.use('seaborn-bright')\n\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV, RepeatedStratifiedKFold\nfrom sklearn.metrics import f1_score, classification_report, confusion_matrix, roc_curve, auc\nfrom sklearn.preprocessing import StandardScaler\nimport xgboost as xgb\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nimport statsmodels.formula.api as sm\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ff4ba11c":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nPassengerId = test['PassengerId']","08a76339":"train.info()\ntrain.head()","80a77ce4":"plt.figure(figsize=(6, 4))\nsns.countplot(x=train.Survived)\nplt.xlabel('Survived')\nplt.ylabel('Count')","f5b376fc":"plt.figure(figsize=(6, 4))\nsns.countplot(x='Survived', hue='Sex', data=train)","a46518d3":"print('Train data shape: {}'.format(train.shape))\nprint('Test data shape: {}'.format(test.shape))","ee36a868":"for col in train.columns:\n    if (train[col].dtype == 'int64' or train[col].dtype == 'float64'):\n        print(col)\n        print(train[col].unique(), '\\n')","82d88c6f":"pd.DataFrame({'train_null': train.drop(columns='Survived').isnull().sum(),\n              'test_null': test.isnull().sum()})","f8e6d611":"train['Ticket_type'] = train['Ticket'].apply(lambda x: x[0:3])\ntrain['Ticket_type'] = train['Ticket_type'].astype('category')\ntrain['Ticket_type'] = train['Ticket_type'].cat.codes\n\ntest['Ticket_type'] = test['Ticket'].apply(lambda x: x[0:3])\ntest['Ticket_type'] = test['Ticket_type'].astype('category')\ntest['Ticket_type'] = test['Ticket_type'].cat.codes","de89d7ed":"full_data = [train, test]\n\ntrain['Name_Words'] = train['Name'].apply(lambda x: len(x.split()))\ntest['Name_Words'] = test['Name'].apply(lambda x: len(x.split()))\n\ntrain['hasCabin'] = train['Cabin'].apply(lambda x: 0 if type(x)==float else 1)\ntest['hasCabin'] = test['Cabin'].apply(lambda x: 0 if type(x)==float else 1)","2165b9a5":"for dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare'] = pd.qcut(train['Fare'], 4)\n\nfor dataset in full_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)","b58377be":"def get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"","34085257":"for dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n    \nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Dr', 'Rev', 'Col',\n                                                 'Major', 'Don', 'Sir', \n                                                 'Countess', 'Capt',\n                                                 'Jonkheer', 'Lady'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')","169a38db":"for dataset in full_data:\n    dataset['Sex'] = dataset['Sex'].map({'female': 0, 'male': 1}).astype(int)\n    \n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","ff77b434":"train['Embarked'].value_counts()","eb90138e":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\n    \n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","40d95f0e":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)\ntest  = test.drop(drop_elements, axis = 1)","a33e285e":"pd.DataFrame({'train_null': train.drop(columns='Survived').isnull().sum(),\n              'test_null': test.isnull().sum()})","075253ba":"train.head()","665d85da":"plt.figure(figsize=(12, 10))\nsns.heatmap(train.corr(), cmap='RdYlGn', annot=True, fmt='.2f')","d5439d29":"y_train = train['Survived'].ravel()\ntrain = train.drop(['Survived'], axis=1)\nX_train = train.values \nX_test = test.values","04f5d297":"RFC = RandomForestClassifier()\nparams = {\n    'n_estimators': range(100, 500, 100), \n    'max_depth': range(0, 5), \n    'n_jobs': [-1],\n    'max_features': ['sqrt', 'auto']\n}","ba1eb564":"grid_clf = GridSearchCV(RFC, param_grid=params, cv=5)\ngrid_clf.fit(X_train, y_train)","9a61db15":"clf = grid_clf.best_estimator_\ny_pred = clf.predict(X_test)\ny_pred_prob = clf.predict_proba(X_test)","b3a5dad5":"submission_data = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","7e178870":"print(classification_report(y_pred, submission_data.Survived))","cf93849c":"fpr, tpr, thresholds = roc_curve(submission_data.Survived, y_pred_prob[:,1])\nroc_auc= auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(loc=\"lower right\")\nplt.show()","b672a777":"submission = pd.DataFrame({ 'PassengerId': PassengerId,\n                            'Survived': y_pred })\nsubmission","fa01d54b":"submission.to_csv('submission.csv', index=False)\nprint('Submission saved')","ab5b54e7":"## Modeling","e47dfbb1":"## Data Preprocessing"}}