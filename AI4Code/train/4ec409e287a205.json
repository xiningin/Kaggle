{"cell_type":{"a7c08ef0":"code","eb0eb2eb":"code","2eb58449":"code","4df7257c":"code","6d960b02":"code","0a232625":"code","5d854c0e":"code","354bcb92":"code","13ea85b4":"code","90a3b22d":"code","d14182a6":"code","20d14092":"code","b944e87c":"code","ea19f2d6":"code","4d5c6ad7":"code","99ad3e40":"code","0f98ad6e":"code","b14c25ad":"code","d0dde2ea":"code","61c82474":"code","986d2908":"code","c3f51851":"code","a008626f":"code","fe84993e":"code","52866508":"code","6fd57b40":"code","b55c1635":"code","6d18a554":"markdown","2336828d":"markdown","a70e0d33":"markdown","b01e377e":"markdown","82b6673b":"markdown","e9290dea":"markdown","66c9312b":"markdown"},"source":{"a7c08ef0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nfrom tqdm import tqdm\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\ndata_dir=\"\/kaggle\/input\/animals-detection-images-dataset\"\ntrain_dir = os.path.join(data_dir, \"train\")\ntest_dir = os.path.join(data_dir, \"test\")\n\nall_train_subdir=glob.glob(train_dir+\"\/*\")\nall_test_subdir=glob.glob(test_dir+\"\/*\")","eb0eb2eb":"train_classes=[os.path.basename(pp) for pp in all_train_subdir]\ntest_classes=[os.path.basename(pp) for pp in all_test_subdir]\n\nprint(\"There is %d classes in train dataset, and %d classes in test dataset\"%(len(train_classes), len(test_classes)))\n","2eb58449":"train_classes==test_classes","4df7257c":"\ntrain_image_counts={os.path.basename(pp):[len(glob.glob(os.path.join(pp, \"*.jpg\")))] for pp in all_train_subdir}\ntest_image_counts={os.path.basename(pp):[len(glob.glob(os.path.join(pp, \"*.jpg\")))] for pp in all_test_subdir}\n# all_image_counts=train_image_counts.copy()\n# all_image_counts={k:all_image_counts[k]+test_image_counts[k] for k in all_image_counts.keys()}\ntrain_data_df = pd.DataFrame(train_image_counts, index=[\"train\"]).transpose()\ntest_data_df = pd.DataFrame(test_image_counts, index=[\"test\"]).transpose()\nall_data_df=train_data_df.copy()\nall_data_df[\"test\"]=test_data_df\nall_data_df.head()","6d960b02":"\nall_data_df=all_data_df.sort_values(by=[\"train\",\"test\"], ascending=False)\nall_data_df.plot(kind=\"bar\", legend=True, figsize=(20,5), title=\"Image Counts in Each Class\");","0a232625":"!apt-get install -y file","5d854c0e":"os.makedirs(\"output\", exist_ok=True)\n!file \/kaggle\/input\/animals-detection-images-dataset\/train\/Spider\/*.jpg|awk '{print $18}'|sort|uniq |wc -l","354bcb92":"!file \/kaggle\/input\/animals-detection-images-dataset\/test\/Spider\/*.jpg|awk '{print $18}'|sort|uniq |wc -l","13ea85b4":"def draw_image(image_file, label_file, class_names):\n    class_name = os.path.basename(os.path.dirname(image_file))    \n    image = cv2.imread(image_file)\n        \n    with open(label_file) as fobj:\n        while True:            \n            item = fobj.readline()\n            if item is None or len(item)<=0:\n                break\n                \n            item = item[len(class_name):]\n            item = item.split()\n            xmin = float(item[0])\n            ymin = float(item[1])\n            xmax = float(item[2])\n            ymax = float(item[3])\n        \n            image = cv2.rectangle(image, (int(xmin), int(ymin)), (int(xmax), int(ymax)), (0,0,255), 3)\n            image = cv2.putText(image, class_name, (int(xmin), int(ymin-5)), cv2.FONT_HERSHEY_SIMPLEX, 1.1, (0, 0, 255), 3)\n        \n    return image\n\nsubdir = all_train_subdir[0]\nimage_files = glob.glob(os.path.join(subdir, \"*.jpg\"))\n\nimage_file = image_files[0]\nlabel_file = os.path.join(subdir, \"Label\", os.path.basename(image_file).replace(\".jpg\", \".txt\"))\n\nimage = draw_image(image_file, label_file, train_classes)\nimage = image[:,:,2::-1]\nplt.imshow(image);","90a3b22d":"image_file = image_files[45]\nlabel_file = os.path.join(subdir, \"Label\", os.path.basename(image_file).replace(\".jpg\", \".txt\"))\nimage = draw_image(image_file, label_file, train_classes)\nimage = image[:,:,2::-1]\nplt.imshow(image);","d14182a6":"yolo_train_dir = \"yolo\/train\"\nyolo_test_dir = \"yolo\/test\"\n\nfor dd in [yolo_train_dir, yolo_test_dir]:\n    for ss in [\"images\", \"labels\"]:\n        print(os.path.join(dd, ss))\n        os.makedirs(os.path.join(dd, ss), exist_ok=True)","20d14092":"yolo_train_dir = \"yolo2\/train\"\nyolo_test_dir = \"yolo2\/test\"\n\nfor dd in [yolo_train_dir, yolo_test_dir]:\n    for ss in [\"images\", \"labels\"]:\n        print(os.path.join(dd, ss))\n        os.makedirs(os.path.join(dd, ss), exist_ok=True)","b944e87c":"for subdir_id in tqdm(range(len(all_train_subdir))):\n    subdir = all_train_subdir[subdir_id]","ea19f2d6":"\"%s_%s\"%(\"hawk\",\"xueqin\")\n\n","4d5c6ad7":"def process_dataset(subdirs, dst_dir, class_names, size=(640,640), link=False):\n    for subdir_id in tqdm(range(len(subdirs))):\n        subdir = subdirs[subdir_id]\n        prefix=os.path.basename(subdir)\n        for image_file in glob.glob(os.path.join(subdir, \"*.jpg\")):\n            image_file_basename=os.path.basename(image_file)\n            label_file = os.path.join(subdir, \"Label\", image_file_basename).replace(\".jpg\", \".txt\")\n            dst_image_file = os.path.join(dst_dir, \"images\/%s_%s\"%(prefix,image_file_basename))\n            dst_label_file = os.path.join(dst_dir, \"labels\/%s_%s\"%(prefix,image_file_basename.replace(\".jpg\", \".txt\")))\n            if os.path.exists(dst_label_file):\n                continue\n                        \n            image = cv2.imread(image_file)                \n            height, width = image.shape[0:2]\n            with open(label_file) as fobj:\n                with open(dst_label_file, \"w\") as wobj:\n                    while True:\n                        item = fobj.readline()\n                        if item is None or len(item)==0:\n                            break\n                        class_name = prefix\n                        item=item[len(class_name):]\n                        item = item.split()\n                        xmin = float(item[0])\n                        ymin = float(item[1])\n                        xmax = float(item[2])\n                        ymax = float(item[3])\n\n                        cx   = (xmin + xmax)\/2.0\/width\n                        cy   = (ymin + ymax)\/2.0\/height\n                        bw   = (xmax - xmin)\/width\n                        bh   = (ymax - ymin)\/height\n                        class_id = class_names.index(class_name)\n                        output_line = \"%d %f %f %f %f\\n\"%(class_id, cx, cy, bw, bh)\n                        wobj.write(output_line)\n\n            if link==True:\n                os.symlink(image_file, dst_image_file)\n            else:\n                image = cv2.resize(image, size)\n                cv2.imwrite(dst_image_file, image)\n\n# process_dataset(all_train_subdir, yolo_train_dir, train_classes, size=(640,640), link=False)        \nxueqin_train_subdir=all_train_subdir[0:1]\nxueqin_classes=[os.path.basename(pp) for pp in xueqin_train_subdir]\n\nprocess_dataset(xueqin_train_subdir, yolo_train_dir, xueqin_classes, size=(640,640), link=False)        ","99ad3e40":"xueqin_test_subdir=all_test_subdir[0:1]\nprocess_dataset(xueqin_test_subdir, yolo_test_dir, xueqin_classes, size=(640,640), link=False)        ","0f98ad6e":"!git clone https:\/\/github.com\/ultralytics\/yolov5\n%cd yolov5\n%pip install -r requirements.txt\n%cd -","b14c25ad":"!cat yolov5\/data\/coco128.yaml","d0dde2ea":"yaml_file=\"yolov5\/data\/animal.yaml\"\ntrain_images_dir = os.path.join(\"..\", yolo_train_dir, \"images\")\nval_images_dir = os.path.join(\"..\", yolo_test_dir, \"images\")\n\n\nnames_str=\"\"\nfor item in xueqin_classes:\n    names_str=names_str + \", \\'%s\\'\"%item\nnames_str= \"names: [\"+names_str[1:]+\"]\"\n\nwith open(yaml_file, \"w\") as wobj:\n    wobj.write(\"train: %s\\n\"%train_images_dir)\n    wobj.write(\"val: %s\\n\"%val_images_dir)\n    wobj.write(\"nc: %d\\n\"%len(xueqin_classes))\n    wobj.write(names_str+\"\\n\")\n    ","61c82474":"import wandb\nwandb.login()","986d2908":"%cd yolov5\n!bash weights\/download_weights.sh","c3f51851":"!mv *.pt weights\n!ls weights","a008626f":"!python train.py --data data\/animal.yaml --batch-size 32 --epochs 10 --img-size 640 --project runs\/train --name animals --weights weights\/yolov5s.pt --device 0","fe84993e":"!python detect.py --weights runs\/train\/animals2\/weights\/best.pt --source \/kaggle\/input\/animals-detection-images-dataset\/test\/Spider\/5b9b0b60d04aae25.jpg --name animals --project runs\/detect","52866508":"!mkdir -p tmp\n!cp runs\/train\/animals2\/test_batch0_labels.jpg tmp\/0.jpg\n!cp runs\/train\/animals2\/test_batch0_pred.jpg tmp\/1.jpg\n!ffmpeg -r 1 -i tmp\/%d.jpg -r 1 -y tmp\/out.gif","6fd57b40":"!ls -l runs\/detect\/animals","b55c1635":"img = cv2.imread(\"runs\/detect\/animals\/5b9b0b60d04aae25.jpg\")\nplt.imshow(img[:,:,2::-1]);","6d18a554":"# 2. Create yolo dataset","2336828d":"![](runs\/detect\/animals\/5b9b0b60d04aae25.jpg)","a70e0d33":"Ensure train dataset and val dataset have same classes","b01e377e":"# 1. Exploratory Data Analysis\n\nHow many classes in the datasets? How many images in each class? Let's have a look","82b6673b":"So we know there are 317 different image sizes in train dataset, and 98 in test dataset.\n\nLet's watch some images","e9290dea":"Now create pandas DataFrames, so we can clear watch the detail","66c9312b":"This is a typical long-tail dataset. What about the image size? Let's have a look"}}