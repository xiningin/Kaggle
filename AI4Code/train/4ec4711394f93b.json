{"cell_type":{"d3ae3645":"code","0b376a87":"code","cd0d38e7":"code","34bb4a8a":"code","5ab5eca6":"code","276206e6":"code","48552ca8":"code","923ee956":"code","5a0f4275":"code","0cceb7c2":"code","563740cd":"code","ff8dada8":"code","818fcdae":"code","77c97e87":"code","e3884c00":"code","1e8f99ec":"code","2d03974d":"code","17b934d3":"code","d6666e72":"code","31483986":"code","b19565c7":"code","9feaeff9":"code","e60dbd63":"code","7dde0e2d":"code","69dce3e8":"code","e41fd668":"code","2b6cf5c9":"code","2095d205":"code","ae2cd58f":"code","3763835d":"code","77d68f7d":"code","807cec41":"code","884f81fa":"code","9d214123":"code","cf6634a9":"code","e4d1be25":"code","fe2e5c1d":"code","a75b6ee4":"code","19578d7c":"code","006293b2":"code","1c6b9476":"code","e35a351c":"code","f9040b3a":"code","cfadc31d":"code","91f3b502":"code","ec60130d":"code","92080906":"code","ec7750bb":"code","b46e817a":"code","5d513cb5":"code","0bd99d12":"code","2dad4076":"code","39a58991":"code","26edde0e":"code","d77a0729":"code","9021f6f2":"code","4316a3e2":"code","e9889206":"code","04b7c494":"code","1708eeb8":"code","12fb2438":"markdown","385f4ae5":"markdown","1f4e8278":"markdown"},"source":{"d3ae3645":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b376a87":"import warnings\nwarnings.filterwarnings('ignore')","cd0d38e7":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","34bb4a8a":"filepath = '..\/input\/weather-dataset\/weatherHistory.csv'\ndata = pd.read_csv(filepath)\ndata.head()","5ab5eca6":"data.shape","276206e6":"data.info","48552ca8":"data['Loud Cover'].unique()","923ee956":"data.drop(['Loud Cover'], axis = 1, inplace = True)\ndata.head()","5a0f4275":"# now check for missing columns \ndata.isna().sum()","0cceb7c2":"#calculate missing percentage\nmiss_percent = (data.isna().sum().sum()\/np.product(data.shape))*100\nmiss_percent","563740cd":"data['Precip Type'].unique()","ff8dada8":"# replacing nan values with the below fill method\ndata['Precip Type'].fillna(axis = 0, method = 'bfill', inplace= True)\ndata.head()","818fcdae":"data.isna().sum()","77c97e87":"data['Formatted Date'].head()","e3884c00":"#converting time to utc format\ndata['Formatted Date'] = pd.to_datetime(data['Formatted Date'], utc= True)\ndata['Formatted Date'].head()","1e8f99ec":"#changing index to date\ndata.set_index(['Formatted Date'], inplace = True)\ndata.head()","2d03974d":"data.nunique()","17b934d3":"# Setting plot style\nsns.set_style(style = 'whitegrid')","d6666e72":"data.describe()","31483986":"# Plotting Weather Data\ncolor={2:'blue',\n       3:'green',\n       4:'black',\n       5:'red',\n       6:'violet',\n       7:'brown',\n       8:'orange'}\nfor index in range(2,9):\n    plt.figure(figsize=(12,5))\n    plt.xlabel('Year', fontsize=12)\n    plt.title('{}'.format(data.columns[index].upper()), fontsize=15)\n    sns.lineplot(data=data.iloc[:,index], \n                 color=color[index], marker='o')\n    plt.show()","b19565c7":"data.corr()","9feaeff9":"plt.figure(figsize=(10,8))\nsns.heatmap(data = data.corr(), annot = True, cmap = 'Blues')\nplt.show()","e60dbd63":"indices = ['Temperature (C)', 'Humidity', 'Precip Type', 'Summary']\nex_data = data.loc[:,indices]\nex_data","7dde0e2d":"#scatter plot for temperature and humidity by summary\nplt.figure(figsize = (12,12))\nplt.title('temperature vs humidity')\nsns.scatterplot(x=ex_data.iloc[:,0], y=ex_data.iloc[:,1], hue= ex_data.iloc[:,3], s=75, alpha = 0.4)\nplt.show()","69dce3e8":"#scatter plot for temperature and humidity by percip type\n\nplt.figure(figsize = (12,6))\nprint(ex_data.describe())\nplt.title('temperature vs humidity')\nsns.scatterplot(x=ex_data.iloc[:,0], y=ex_data.iloc[:,1], hue= ex_data.iloc[:,2], s=50, alpha = 0.4)\nplt.show()","e41fd668":"#Function for plotting year-wise data\ndef year_plot(year):\n    temp = ex_data[ex_data.index.year==year]\n    plt.figure(figsize=(8,4))\n    plt.title('Temperature vs Humidity for {}'.format(year))\n    sns.scatterplot(x=temp.iloc[:,0], \n                    y=temp.iloc[:,1],\n                    hue=temp.iloc[:,2],\n                    s=50,\n                    alpha = 0.3)\n    plt.show()\n    print(temp.describe())\n    print('-'*70)","2b6cf5c9":"for year in range(2006,2017):\n    year_plot(year)","2095d205":"#Resampling the data year-wise by mean\n\nindices = [2,4,6,7,8]\nyear_data = data.iloc[:,indices].resample('Y').mean()\nyear_data.head()","ae2cd58f":"year_data.describe()","3763835d":"for ind in range(len(year_data.columns)):\n    sns.distplot(year_data.iloc[:,ind])\n    plt.show()","77d68f7d":"year_data.corr()","807cec41":"plt.title('Heatmap', fontsize=15)\nsns.heatmap(data=year_data.corr(), \n            annot=True, cmap='Reds')\nplt.show()","884f81fa":"# Pair plot for correlation\nsns.pairplot(year_data, kind='reg')\nplt.show()","9d214123":"#normalizing year data\n\nnormal_data = (year_data - year_data.min())\/ (year_data.max() - year_data.min())\nnormal_data.head()","cf6634a9":"#Line graph representation\nplt.figure(figsize=(12,6))\nplt.xlabel('YEAR')\nplt.ylabel('LINE PLOT', fontsize=30)\nsns.lineplot(data = normal_data, marker = 's')\nplt.show()","e4d1be25":"#Box Plot\nplt.figure(figsize = (10,4))\nplt.title('BOX PLOT', fontsize=30)\nsns.boxplot(data = normal_data)\nplt.show()","fe2e5c1d":"#Violin Plot\nplt.figure(figsize = (10,4))\nplt.title('VIOLIN PLOT', fontsize=30)\nsns.violinplot(data=normal_data)\nplt.show()","a75b6ee4":"#Strip Plot\nplt.figure(figsize = (10,4))\nplt.title('STRIP PLOT', fontsize=30)\nsns.stripplot(data=normal_data, jitter= True, s =18, alpha = 0.3)\nplt.show()","19578d7c":"# Heatmap\nplt.figure(figsize=(6,8))\nplt.title('HEATMAP', fontsize=25)\nsns.heatmap(normal_data, annot=True, cmap='Blues',\n            yticklabels=normal_data.index.year)\nplt.show()","006293b2":"data.head(1)","1c6b9476":"# Plot for Apparent TEmperature and Humidity by Precip Type\nplt.figure(figsize=(12,12))\nplt.title('Temperature vs Humidity')\nsns.scatterplot(x=data.iloc[:,3],\n                y=data.iloc[:,4],\n               hue=data.iloc[:,1], s=75, alpha = 0.3)\nplt.show()","e35a351c":"#Resampling data month-wise by mean\nmonthly_data = data.iloc[:,3:5].resample('M').mean()\nmonthly_data.head()","f9040b3a":"monthly_data.describe()","cfadc31d":"#Graphical representation\nplt.figure(figsize=(14,5))\nplt.title('Apparent Temperature vs Humidity')\nsns.lineplot(x=monthly_data.iloc[:,0],\n             y=monthly_data.iloc[:,1],\n             color='green')\nplt.show()","91f3b502":"# Regression plot for Apparent Temperature & Humidity\nplt.figure(figsize=(10,5))\nplt.title('Apparent Temperature vs Humidity')\nsns.regplot(x=monthly_data.iloc[:,0],\n            y=monthly_data.iloc[:,1])\nplt.show()","ec60130d":"# Distplot for Apparent Temperature & Humidity\nsns.distplot(monthly_data['Apparent Temperature (C)'])\nplt.show()\nsns.distplot(monthly_data['Humidity'])\nplt.show()","92080906":"plt.figure(figsize=(10,5))\nplt.xlabel('YEAR')\nplt.title('Variation of Apparent Temperature and Humidity')\nsns.lineplot(data=monthly_data)\nplt.show()","ec7750bb":"print(monthly_data.corr())\nsns.pairplot(monthly_data, kind = 'scatter')\nplt.show()","b46e817a":"# Function for plotting Humidity & Apparent Temperature for all month\nTEMP_DATA = monthly_data.iloc[:,0]\nHUM_DATA = monthly_data.iloc[:,1]\ndef label_color(month):\n    if month == 1:\n        return 'January','blue'\n    elif month == 2:\n        return 'February','green'\n    elif month == 3:\n        return 'March','orange'\n    elif month == 4:\n        return 'April','yellow'\n    elif month == 5:\n        return 'May','red'\n    elif month == 6:\n        return 'June','violet'\n    elif month == 7:\n        return 'July','purple'\n    elif month == 8:\n        return 'August','black'\n    elif month == 9:\n        return 'September','brown'\n    elif month == 10:\n        return 'October','darkblue'\n    elif month == 11:\n        return 'November','grey'\n    else:\n        return 'December','pink'\n\ndef plot_month(month, data):\n    label, color = label_color(month)\n    mdata = data[data.index.month == month]\n    sns.lineplot(data=mdata,\n                 label=label,\n                 color=color,\n                 marker='o')\n    \ndef sns_plot(title, data):\n    plt.figure(figsize=(14,8))\n    plt.title(title)\n    plt.xlabel('YEAR')\n    for i in range(1,13):\n        plot_month(i,data)\n    plt.show()","5d513cb5":"# Month-wise Plot for Apparent Temperature of 10 years \ntitle = 'Plot of Apparent Temperature - Month-wise' \nsns_plot(title, TEMP_DATA)","0bd99d12":"# Month-wise Plot for Humidity of 10 years \ntitle = 'Plot of Humidity - Month-wise' \nsns_plot(title, HUM_DATA)","2dad4076":"# Function for plotting Apparent Temperature & Humidity for each month\ndef sns_month_plot(month):\n    plt.figure(figsize=(10,5))\n    label = label_color(month)[0]\n    plt.title('Apparent Temperature & Humidity - {}'.format(label))\n    plt.xlabel('YEAR')\n    data = monthly_data[monthly_data.index.month == month]\n    sns.lineplot(data=data, marker='o')\n    plt.show()\n    print(data.describe())\n    sns.pairplot(data, kind='reg')\n    plt.show()\n    print('-'*80)","39a58991":"# plot for the month of JANUARY - DECEMBER\nfor month in range(1,13):\n    sns_month_plot(month)","26edde0e":"# Normalizing data\ntemp = monthly_data\nnormed_data = (temp - temp.min()) \/ (temp.max() - temp.min())\nnormed_data.head()","d77a0729":"# Line graph representation of normalized data\nplt.figure(figsize=(12,6))\nplt.title('Apparent Temperature & Humidity - Normalized')\nplt.xlabel('YEAR', fontsize=12)\nsns.lineplot(data=normed_data)\nplt.show()","9021f6f2":"# Correlation of variables\nsns.pairplot(normed_data, kind='reg')\nplt.show()","4316a3e2":"# Violin Plot for above graph\nplt.figure(figsize=(14,5))\nsns.violinplot(data=normed_data)\nplt.show()","e9889206":"sns.boxplot(data=normed_data)\nplt.show()","04b7c494":"def sns_month_plot(month):\n    plt.figure(figsize=(10,5))\n    label = label_color(month)[0]\n    plt.title('Apparent Temperature & Humidity - {}'.format(label))\n    plt.xlabel('YEAR')\n    data = normed_data[normed_data.index.month == month]\n    sns.lineplot(data=data, marker='o')\n    plt.show()\n    sns.pairplot(data, kind='reg')\n    plt.show()\n    plt.title('Boxplot - {}'.format(label))\n    sns.boxplot(data=data)\n    plt.show()\n    print('-'*80)","1708eeb8":"# plot for the month of JANUARY - DECEMBER\nfor month in range(1,13):\n    sns_month_plot(month)","12fb2438":"**Temperature vs Humidity**","385f4ae5":"ANALYSIS ON NORMALIZED DATA","1f4e8278":"**YEAR-WISE ANALYSIS**"}}