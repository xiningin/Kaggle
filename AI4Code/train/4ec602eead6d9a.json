{"cell_type":{"1806c709":"code","6b43e54e":"code","6f53dc3b":"code","110f6569":"code","96dd73bb":"code","d6753bcf":"code","4172cb83":"code","477f191b":"code","e03c139d":"code","b08c9d65":"code","54ca34e2":"code","9101c507":"code","878163a8":"code","b831e0dd":"code","cf227d6d":"code","7fbb9e26":"code","d856c918":"code","02cf61a8":"code","8366f619":"code","48fac8f9":"code","1e24a96f":"code","8aae4085":"code","4b336650":"code","60ee3247":"code","ffbad4cb":"code","4338a1eb":"code","8bc763a4":"code","bcc52fdf":"code","f5513e6a":"markdown","63d161d7":"markdown","f767e413":"markdown","a0528e6c":"markdown","5f3310a3":"markdown","d1d99a73":"markdown","e26e877d":"markdown","451e68f4":"markdown","c5efae62":"markdown","2ef464c6":"markdown","bdca9272":"markdown","69151d2c":"markdown","6c012e63":"markdown","fbb0695f":"markdown","eaec3cae":"markdown","620b6743":"markdown","6c7c396b":"markdown","70fe0564":"markdown","35dca20d":"markdown","90c9f2dd":"markdown","1f68eee1":"markdown","f74a8de2":"markdown","e8eee52f":"markdown","302fcba8":"markdown","339399e8":"markdown","070e9988":"markdown","49443dfc":"markdown","f938134c":"markdown"},"source":{"1806c709":"!pip install split-folders","6b43e54e":"import os\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\nimport numpy as np\n\nimport cv2\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\n\nimport torchvision\nfrom torchvision.transforms import transforms\n\nimport sklearn\n\nimport time\nimport copy\nimport splitfolders\n\nfrom PIL import Image","6f53dc3b":"BASE_DIR = '..\/input\/monkeys-classification\/'\nTRAIN_IMAGES_DIR = os.path.join(BASE_DIR, 'train')\nTEST_IMAGES_DIR = os.path.join(BASE_DIR, 'test')","110f6569":"cols = ['Label','Latin Name', 'Common Name','Train Images', 'Validation Images']\nlabels = pd.read_csv('..\/input\/monkeys-classification\/monkey_labels.txt',names=cols, skiprows=1)\nlabels.head()","96dd73bb":"labels[['Label','Common Name']].drop_duplicates()","d6753bcf":"print(f\"\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 {sum(labels['Train Images'])}\")","4172cb83":"print(f\"\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 {sum(labels['Validation Images'])}\")","477f191b":"labels.groupby(['Label', 'Common Name'])['Train Images'].sum()","e03c139d":"labels.groupby(['Label', 'Common Name'])['Validation Images'].sum()","b08c9d65":"lbls = labels['Label'].unique().tolist()\ndef display_image_grid():\n    rows = 10\n    cols = 3\n    figure, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(10, 24))\n    for i, name in enumerate(lbls):\n        image_dir = os.path.join(TRAIN_IMAGES_DIR, name.strip())\n        for j, image_filename in enumerate(os.listdir(image_dir)):\n            image = cv2.imread(os.path.join(image_dir, image_filename))\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n            ax[i, j].imshow(image)\n\n            ax[i, j].set_title(name)\n\n            ax[i, j].set_axis_off()\n            if j ==2: break\n                \n        if i == 9: break\n            \n\n        \n    plt.tight_layout()\n    plt.show()","54ca34e2":"display_image_grid()","9101c507":"splitfolders.ratio(TRAIN_IMAGES_DIR, output=\"output\", seed=1337, ratio=(.8, 0.2))","878163a8":"data_transforms = {\n    'train': transforms.Compose([\n        transforms.Resize(size=(224, 224), interpolation=3),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n    'val': transforms.Compose([\n        transforms.Resize(size=(224, 224), interpolation=3),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n}","b831e0dd":"image_datasets = {x: torchvision.datasets.ImageFolder(os.path.join('..\/working\/output\/', x), data_transforms[x]) for x in ['train', 'val']}","cf227d6d":"dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=128, shuffle=True, num_workers=4) for x in ['train', 'val']}","7fbb9e26":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","d856c918":"model_ft = torchvision.models.resnet18(pretrained=True, progress=True)\nnum_ftrs = model_ft.fc.in_features\n# num_ftrs = 512\nprint(f'num_ftrs = {num_ftrs}')\ncount = 0\nfor name, child in model_ft.named_children():\n    count += 1\n    if name in ['layer3', 'layer4']: # , 'avgpool', 'fc'\n        print(f'Layer_{count} with name {name} is UNfrozen!')\n        for param in child.parameters():\n            param.requires_grad = True\n    else:\n        print(f'Layer_{count} with name {name} is frozen')\n        for param in child.parameters():\n            param.requires_grad = False\n            \n            \n            \n            \nmodel_ft.fc = nn.Linear(num_ftrs, 10)\n\n\nmodel = model_ft.to(device)","02cf61a8":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9, nesterov=False)\nexp_lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.2, last_epoch=-1)","8366f619":"dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}","48fac8f9":"def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n    list_of_losses = {'train': [], 'val': []}\n    list_of_accuracies = {'train': [], 'val': []}\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n            running_loss = 0.0\n            running_corrects = 0\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                # zero the parameter gradients\n                optimizer.zero_grad()\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n            if phase == 'train':\n                scheduler.step()\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n            list_of_losses[phase].append(epoch_loss)\n            list_of_accuracies[phase].append(float(epoch_acc))\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n        print()\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model, list_of_losses, list_of_accuracies","1e24a96f":"model_ft, losses, accuracies = train_model(model,\n                                            criterion,\n                                            optimizer,\n                                            exp_lr_scheduler,\n                                            num_epochs=25)  # ignore_index=-1","8aae4085":"submission = pd.read_csv('..\/input\/monkeys-classification\/sample_submission.csv')\nsubmission.head()","4b336650":"res = dict((v,k) for k,v in image_datasets['train'].class_to_idx.items())\nres","60ee3247":"images_path ='..\/input\/monkeys-classification\/test\/'","ffbad4cb":"def predict_images(model, images_path: str):\n    model.eval()\n    image_names = []\n    predictions = []\n    with torch.no_grad():\n        for i, image_name in enumerate(os.listdir(images_path)):\n            image_names.append(image_name)\n            image_name = os.path.join(images_path, image_name)\n            inputs = Image.open(image_name)\n            inputs = data_transforms['val'](inputs).unsqueeze_(0)\n            inputs = inputs.to(device)\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n            predictions.append(f'n{int(preds.cpu().detach().numpy()[0])}')\n\n    return image_names, predictions","4338a1eb":"image_names, predictions = predict_images(model_ft, images_path)","8bc763a4":"df = pd.DataFrame(data={'Id': image_names, 'Expected': predictions})\n\ndf.head()","bcc52fdf":"df.to_csv('submission.csv', index=False)","f5513e6a":"\u0414\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 resnet18 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 torchvision. \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u0422\u0430\u043a \u0436\u0435 \u0437\u0430\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0442\u0435\u0440\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440. \u0422\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u0437\u0430\u0434\u0430\u0447\u0430 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c CrossEntropyLoss \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c \u0438 SGD \u043a\u0430\u043a \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440","63d161d7":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","f767e413":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0430\u0443\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430. \u0417\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u0445 \u0432 Tensor","a0528e6c":"\u0412\u0441\u0435\u0433\u043e \u0443 \u043d\u0430\u0441 10 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0437\u043d\u0430\u0447\u0438\u0442, \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u0448\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","5f3310a3":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0444\u0430\u0439\u043b \u0441\u0430\u0431\u043c\u0438\u0442\u0430","d1d99a73":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0430\u043c","e26e877d":"\u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043c\u043e\u0436\u0435\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0435\u0437\u044c\u044f\u043d \u043f\u043e 10 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u0430\u043c:\n\n\n    0 : 'mantled_howler',\n    1 : 'patas_monkey',\n    2 : 'bald_uakari',\n    3 : 'japanese_macaque',\n    4 : 'pygmy_marmoset',\n    5 : 'white_headed_capuchin',\n    6 : 'silvery_marmoset',\n    7 : 'common_squirrel_monkey',\n    8 : 'black_headed_night_monkey',\n    9 : 'nilgiri_langur'","451e68f4":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","c5efae62":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441. \u041d\u0430 \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u0440\u043e\u043c\u0435 n3 \u0438 n7, \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c 130 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439. \u041d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043d\u0435\u0442 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u0441\u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u041d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f 25 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.","2ef464c6":"\u041e\u0431\u0443\u0447\u0430\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0435","bdca9272":"\u0417\u0430\u043f\u0438\u0448\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044f \u0441\u0430\u0431\u043c\u0438\u0442","69151d2c":"\u0413\u043e\u0442\u043e\u0432\u043e, \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u0431\u043c\u0438\u0442!","6c012e63":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0438 \u0434\u0430\u0442\u0430\u043b\u043e\u0430\u0434\u0435\u0440\u044b. \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 ImageFolder, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u0443 \u043d\u0430\u0441 \u0443\u0436\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043f\u0430\u043f\u043a\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","fbb0695f":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","eaec3cae":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","620b6743":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","6c7c396b":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c","70fe0564":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435","35dca20d":"\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043c\u0435\u0442\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 (Label), \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0435 \u0438 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043d\u0430 \u043a\u043b\u0430\u0441\u0441","90c9f2dd":" \u0422\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u043e\u0431\u0443\u0447\u0430\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 ImageFolder, \u043c\u0435\u0442\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u0430 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442. \u041d\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0438\u0437 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c","1f68eee1":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","f74a8de2":"# Monkey Classification","e8eee52f":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","302fcba8":"\u0414\u0430\u043d\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","339399e8":"\u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0441 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u043c\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 splitfolders.","070e9988":"\u041f\u0440\u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","49443dfc":"\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b \u0441\u0430\u0431\u043c\u0438\u0442\u0430","f938134c":"\u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0430\u0441\u0442\u044c \u0444\u0430\u0439\u043b\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430."}}