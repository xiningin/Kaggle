{"cell_type":{"e23e1799":"code","28e148ee":"code","84ee6d36":"code","0eca662b":"code","80597289":"code","17450f7c":"code","b4f08df4":"code","b18930ae":"code","ada104cb":"code","4074cbc5":"code","85165b15":"code","84ac8ddc":"code","5245e83a":"code","4dff122b":"code","bc1b9a08":"code","220fcfee":"code","21effa66":"code","b0379139":"code","b91da15a":"code","b0bf158c":"code","5d5d59c8":"code","04a1871d":"code","7d8bbbd3":"code","6be9dba0":"code","7c335236":"code","dce3db46":"code","945fbcf7":"code","4e71975b":"code","88c42eae":"code","1605ecc4":"code","295cf814":"code","319f75b7":"code","b666befd":"code","1cf3c85d":"code","51a4d25a":"code","947faa2b":"code","2d13ee97":"code","b17c8a97":"code","c2868822":"code","9e1c61c0":"code","d061d52e":"code","ad9a62a8":"code","0d053345":"code","1883a25f":"code","dfded3ec":"code","1a9de2cc":"code","44eb2b78":"code","46ae7e6f":"code","8513bda8":"code","52458819":"code","0badb2fc":"code","c355664f":"code","32d5cc59":"code","9b164f08":"code","79ee396e":"code","013b0ec9":"code","d41082b5":"code","53c12ad1":"code","418474fd":"code","baf8c7aa":"code","6ce20ef4":"code","172df230":"code","50453bb7":"code","694c23c8":"code","4d33ea80":"code","ac806a5f":"code","9b1b6ffc":"code","dfc7d1ff":"code","857a05a8":"code","4c42fc34":"code","9b3e1502":"code","81113aad":"code","0fdc7289":"code","97a38a31":"code","d663d0f8":"code","915635e5":"code","f6b25a6e":"code","3a1ce803":"code","0eaca9a2":"code","5fe840dd":"code","e33162cf":"code","0488e81c":"code","c47c3a53":"code","f2eaf3d1":"code","64802fc8":"code","fa5c755e":"code","c038d465":"markdown","25dc0284":"markdown"},"source":{"e23e1799":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/5095eabce4b06cb305058603\/5095eabce4b02d37bef4c24c\/1352002236895\/100_anniversary_titanic_sinking_by_esai8mellows-d4xbme8.jpg\")","28e148ee":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/titanicprediction\/kaggle-titanic-master\/input\/train.csv')\ntest = pd.read_csv('..\/input\/titanicprediction\/kaggle-titanic-master\/input\/test.csv')","84ee6d36":"train.head(80)","0eca662b":"test.head()","80597289":"train.shape","17450f7c":"test.shape","b4f08df4":"train.info()","b18930ae":"test.info()","ada104cb":"train.isnull().sum()","4074cbc5":"test.isnull().sum()","85165b15":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","84ac8ddc":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","5245e83a":"bar_chart('Sex')","4dff122b":"bar_chart('Pclass')","bc1b9a08":"bar_chart('SibSp')","220fcfee":"bar_chart('Embarked')","21effa66":"train.head()","b0379139":"Image(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/t\/5090b249e4b047ba54dfd258\/1351660113175\/TItanic-Survival-Infographic.jpg?format=1500w\")","b91da15a":"train.head(10)","b0bf158c":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","5d5d59c8":"train['Title'].value_counts()","04a1871d":"test['Title'].value_counts()","7d8bbbd3":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","6be9dba0":"train.head()","7c335236":"test.head()","dce3db46":"bar_chart('Title')","945fbcf7":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","4e71975b":"train.head()","88c42eae":"test.head()","1605ecc4":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","295cf814":"bar_chart('Sex')","319f75b7":"train.head(100)","b666befd":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","1cf3c85d":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","51a4d25a":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show() ","947faa2b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","2d13ee97":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","b17c8a97":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","c2868822":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","9e1c61c0":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","d061d52e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","ad9a62a8":"train.info()","0d053345":"test.info()","1883a25f":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","dfded3ec":"train.head()","1a9de2cc":"bar_chart('Age')","44eb2b78":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","46ae7e6f":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","8513bda8":"train.head()","52458819":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","0badb2fc":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","c355664f":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()  ","32d5cc59":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","9b164f08":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","79ee396e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","013b0ec9":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","d41082b5":"train.head()","53c12ad1":"train.Cabin.value_counts()","418474fd":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","baf8c7aa":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","6ce20ef4":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","172df230":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","50453bb7":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","694c23c8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","4d33ea80":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","ac806a5f":"train.head()","9b1b6ffc":"train.head()","dfc7d1ff":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","857a05a8":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","4c42fc34":"train_data.head(10)","9b3e1502":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","81113aad":"train.info()","0fdc7289":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","97a38a31":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","d663d0f8":"# kNN Score\nround(np.mean(score)*100, 2)","915635e5":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","f6b25a6e":"# decision tree Score\nround(np.mean(score)*100, 2)","3a1ce803":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","0eaca9a2":"# Random Forest Score\nround(np.mean(score)*100, 2)","5fe840dd":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e33162cf":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","0488e81c":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","c47c3a53":"round(np.mean(score)*100,2)","f2eaf3d1":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","64802fc8":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","fa5c755e":"submission = pd.read_csv('submission.csv')\nsubmission.head()","c038d465":"# Titanic: Machine Learning from Disaster\n### Predict survival on the Titanic\n- Defining the problem statement\n- Collecting the data\n- Exploratory data analysis\n- Feature engineering\n- Modelling\n- Testing","25dc0284":"### 6.2.1 kNN"}}