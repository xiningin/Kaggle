{"cell_type":{"dbe5d4d1":"code","d3a459f5":"code","97a8621b":"code","8c94f769":"code","8f8a2632":"code","0bfe7ced":"code","a5c57fa7":"code","cb658834":"code","819daa74":"code","afb3bdb0":"code","fe442dcc":"code","e0225e78":"code","796c0a81":"code","c626fbb2":"code","32b364d2":"code","eb7589bb":"code","ea3dbbe5":"code","8ab0acf5":"code","1d3ef3fb":"code","825c47d4":"code","269e6d43":"code","5b0d93fe":"code","490c0a67":"code","c4bc8a19":"code","5691eec0":"code","4db6402a":"code","9db54847":"code","68f56a20":"code","5b2edf56":"code","fc3923a0":"code","e0fc898a":"code","a86ace63":"code","38aabefe":"code","ec93ca42":"code","53cca3c4":"code","372ffcdc":"code","f99365e9":"code","bc872896":"code","3c24fe46":"code","201f629f":"code","5bb92eff":"code","38139237":"code","dabaa3f0":"code","b600582c":"code","16ac05ee":"code","c6f2eed4":"code","af872fba":"code","3cd9e822":"code","74b362ef":"code","59a2a4ca":"markdown","b7f2ced0":"markdown","221dfc45":"markdown","2a7abb5d":"markdown","6e5152bd":"markdown","f7e3ed37":"markdown","823c494b":"markdown","28178006":"markdown","561cd327":"markdown","bf37f860":"markdown","c9881e42":"markdown","62cbbbd2":"markdown","4edde5cd":"markdown","3ef5bc43":"markdown","54d6cf88":"markdown","67ceb503":"markdown","31cd022c":"markdown","8306bc34":"markdown","2215c7d0":"markdown","698ea32c":"markdown","66b9cd1d":"markdown","73693963":"markdown","0264d55d":"markdown","0430cba9":"markdown","dcc3c3db":"markdown","3e29f50a":"markdown","68e001df":"markdown","02072eb7":"markdown","9b82381b":"markdown","3bd51557":"markdown","ec50081f":"markdown","7f01e876":"markdown","3e7e12b9":"markdown","9f70ce81":"markdown","7f9fd7b0":"markdown","1479be7c":"markdown","0109494b":"markdown","9b6d791c":"markdown","606050b9":"markdown","2ed737c2":"markdown","827bdf0c":"markdown","6f29e02b":"markdown","4094a897":"markdown","f5c3c5a7":"markdown","bd780ef5":"markdown","9b8de80d":"markdown","73d34be4":"markdown","7c35af19":"markdown","384bb541":"markdown","48e7d5e1":"markdown","3a4d6e74":"markdown","362aba36":"markdown","b332e124":"markdown","25d1d48f":"markdown","c1afc518":"markdown","f45c2023":"markdown","58bad76c":"markdown","66984281":"markdown","bbf09aaa":"markdown"},"source":{"dbe5d4d1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport warnings\nfrom IPython.display import display\nimport os","d3a459f5":"warnings.filterwarnings('ignore') # ignore warnings.\n%config IPCompleter.greedy = True # autocomplete feature.\npd.options.display.max_rows = None # set maximum rows that can be displayed in notebook.\npd.options.display.max_columns = None # set maximum columns that can be displayed in notebook.\npd.options.display.precision = 2 # set the precision of floating point numbers.\n# pd.set_option('display.max_colwidth', -1) # will help to show all the text strings in the column.","97a8621b":"df = pd.read_csv('..\/input\/7210_1.csv', encoding='utf-8')\ndf.drop_duplicates(inplace=True) # drop duplicates if any.\ndf.shape # num rows x num columns.","8c94f769":"miss_val = (df.isnull().sum()\/len(df)*100).sort_values(ascending=False)\nmiss_val[miss_val>0]","8f8a2632":"(miss_val[miss_val==0].index)","0bfe7ced":"cols_to_del = ['prices.count', 'prices.warranty', 'Unnamed: 49', 'Unnamed: 48', 'count', 'websiteIDs', 'vin', 'flavors',\n               'isbn', 'Unnamed: 50', 'prices.flavor', 'prices.source', 'Unnamed: 51', 'prices.availability', 'dimension',\n               'weight', 'prices.returnPolicy', 'asins', 'prices.shipping', 'reviews', 'prices.offer', 'sizes',\n               'manufacturer', 'ean', 'upc', 'prices.condition', 'merchants', 'prices.size', 'prices.color', 'quantities',\n               'skus', 'manufacturerNumber', 'dateAdded', 'dateUpdated', 'sourceURLs', 'keys', 'descriptions',\n               'prices.sourceURLs', 'prices.dateAdded', 'prices.dateSeen', 'id', 'prices.merchant']\ndf.drop(labels=cols_to_del, axis=1, inplace=True)","a5c57fa7":"df.head()","cb658834":"df['features'][0]","819daa74":"df['features'][1000]","afb3bdb0":"df['features'][10000]","fe442dcc":"df['Gender'] = df['features'].str.split('\"key\":\"Gender\",\"value\":\\[\"',\n                                         expand=True)[1].str.split('\"\\]}',\n                                                                   expand=True, n=1)[0]\ndf['Gender'].unique()","e0225e78":"df = df[(df['Gender']!='Men')]\ndf = df[(df['Gender']!='Boys')]\ndf.drop('Gender', axis=1, inplace=True)","796c0a81":"idx_notshoe = df['features'].str.contains(\"socks|speaker|bluetooth|microphone|phone|india|patiala|cotton|wool|kid|junior|\\\n                            sweater|shirt|blouse|pedicure|kurta|kurti|tunic|handbag|bag|tote bag|purse|dress|legging|\\\n                            chain|hair accessories|hair clip|hair|claw|hair clamp|watch|bracelet|skirt|denim|sweatshirt|\\\n                            hoodie|top|sundress|robe|halloween|costume|pant|suit\",\n                                           flags=re.IGNORECASE)\nidx_notshoe.fillna(False, inplace=True)\ndf = df.loc[~idx_notshoe,:]","c626fbb2":"idx_notshoe = df['categories'].str.contains(\"socks|speaker|bluetooth|microphone|phone|india|patiala|cotton|wool|kid|\\\n                            junior|sweater|shirt|blouse|pedicure|kurta|kurti|tunic|handbag|bag|tote bag|purse|dress|\\\n                            legging|chain|hair accessories|hair clip|hair|claw|hair clamp|watch|bracelet|skirt|denim|\\\n                            sweatshirt|hoodie|top|sundress|robe|halloween|costume|pant|suit\",\n                                             flags=re.IGNORECASE)\nidx_notshoe.fillna(False, inplace=True)\ndf = df.loc[~idx_notshoe,:]","32b364d2":"df['colors2'] = df['features'].str.split('\"key\":\"Color\",\"value\":\\[\"',\n                                         expand=True)[1].str.split('\"\\]}',\n                                                                   expand=True, n=1)[0]\ndf['colors'] = df['colors'].fillna(df['colors2'])\ndf.drop('colors2', axis=1, inplace=True)\ndf['colors'] = df['colors'].str.lower()\ndf['colors'].isnull().sum()\/33798*100","eb7589bb":"df['brand'].fillna('Unbranded', inplace=True)\ndf['brand'] = df['brand'].str.lower()","ea3dbbe5":"# brand names to change.\n\nbrand_map = {'a2 by aerosoles':'aerosoles', \"what's what by aerosoles\":'aerosoles',\n'adidas outdoor':'adidas',\n'adriana new york':'adriana',\n'alexander mcqueen by puma':'puma', 'alexander mcqueen':'puma',\n'alpine':'alpine swiss',\n'anne klein ak':'anne klein', 'anne klein sport':'anne klein',\n'annie shoes':'annie',\n'athena':'athena alexander',\n'babe.':'babe',\n'baretraps':'bare traps',\n'bcbg max azria':'bcbg', 'bcbg paris':'bcbg', 'bcbgeneration':'bcbg',\n'beacon shoes':'beacon',\n'bebe sport':'bebe', 'bebe stu':'bebe',\n'belle by sigerson morrison':'belle', 'belle sigerson morrison':'belle',\n'bernie mev':'bernie', 'bernie mev.':'bernie',\n'bettye by bettye muller':'bettye muller', 'bettye by bettye muller ':'bettye muller',\n\"breckelle's\":'breckelles',\n'callaway footwear':'callaway',\n'calvin klein ck':'calvin klein', 'calvin klein jeans':'calvin klein',\n'carlos by carlos santana':'carlos santana',\n'charles by charles david':'charels david',\n'see by chloe':'chloe',\n'clarks artisan':'clarks', 'clarks artisan collection':'clarks', 'clarks collection':'clarks',\n'cobb hill by new balance':'new balance', 'cobb hill':'new balance',\n'maria sharapova by cole haan': 'cole hann',\n\"corky's\":'corkys', \"corky's footwear\":'corkys', \"corkys footwear, inc.\":'corkys',\n'dearforms':'dearfoams', 'df by dearfoams':'dearfoams',\n'derek lam 10 crosby':'derek lam',\n'diba.true':'dibatrue',\n'dolce&gabbana':'dolce and gabbana', 'dolce & gabbana':'dolce and gabbana', 'dolce by mojo moxy':'dolce and gabbana',\n  'dolce vita':'dolce and gabbana', 'dv8 by dolce vita':'dolce and gabbana', 'dv by dolce vita':'dolce and gabbana',\n\"dr. scholl's\":'dr scholls',\n\"dr. martens air wair\":'drmartens',\n'drew shoe':'drew',\n'easy spirit e360':'easy spirit', 'easy spirit.':'easy spirit',\n'ellie shoes':'ellie',\n'emu australia':'emu',\n'fergie footwear':'fergie',\n'forever collectible':'forever', 'forever link':'forever', 'fourever funky':'forever',\n'sarto by franco sarto':'franco sarto',\n'ferriniusa':'ferrini',\n'fitflop':'fit flop',\n'funtasma by pleaser':'funtasma',\n'g by guess':'guess',\n'gc shoes':'gc',\n'genuine grip footwear':'genuine grip',\n\"hogan by tod's\":'hogan',\n'soft style by hush puppies':'hush puppies',\n'ilse jacobsen hornbaek':'ilse jacobson',\n'isaacmizrahi':'isaac mizrahi',\n'italian shoe makers':'italian comfort',\n'j.renee':'j. renee',\n'jbu by jambu':'jambu',\n'josefseibel':'josef siebel',\n'justin blair':'justin', 'justin boots':'justin', 'justin gypsy':'justin',\n'kate spade new york':'kate spade',\n'kenneth cole reaction':'kenneth cole', 'kenneth cole ny':'kenneth cole', 'kenneth cole new york':'kenneth cole',\n 'unlisted kenneth cole':'kenneth cole',\n'lamo sheepskin inc':'lamo',\n'lifestride':'lifes tride',\n'luoluo':'luo luo',\n'marc fisher ltd':'marc fisher',\n'mia heritage':'mia',\n'micahel kors':'michael kors', 'michael michael kors':'michael kors',\n'mobils by mephisto':'mephisto',\n'top moda':'moda', 'moda essentials':'moda', 'everybody by bz moda':'moda',\n'muk luks a la mode':'muk luks',\n'munro american':'munro',\n'naot footwear':'naot',\n'new@titude':'new attitude', 'new@ttitude':'new attitude',\n'nina originals':'nina',\n'nine west vintage america collection':'nine west',\n'nufoot\ufffd\ufffd\ufffd':'nufoot',\n'pleaser shoes':'pleaser', 'pleaser usa, inc.':'pleaser', 'pleaserusa':'pleaser',\n'rachel':'rachel roy', 'rachel rachel roy ':'rachel roy',\n'lauren by ralph lauren':'ralph lauren', 'lauren ralph lauren':'ralph lauren', 'lauren lorraine':'ralph lauren',\n 'polo ralph lauren':'ralph lauren','ralph lauren denim supply':'ralph lauren',\n'rieker-antistress':'rieker',\n'rocket dog brands llc':'rocket dog',\n'sanita clogs':'sanita',\n'ferragamo':'salvatore ferragamo',\n'skechers usa':'skechers',\n'sperry top sider':'sperry', 'sperry top-sider':'sperry',\n\"l'artiste by spring step\":'spring step', \"flexus by spring step\":'spring step', \"patrizia by spring step \":'spring step',\n \"patrizia pepe\":'spring step', \"patrizia\":'spring step',\n'steven steve madden':'steve madden',\n'style & co.':'style and co',\n'timberland earthkeepers':'timberland', 'timberland pro':'timberland',\n'toms shoes':'toms',\n'tony lama boot co.':'tony lama',\n'totes isotoner':'totes',\n'trotter':'trotters',\n'ugg australia':'ugg',\n'famous name brand':'unbranded', 'generic':'unbranded', 'generic surplus':'unbranded', 'non-branded':'unbranded',\n 'not applicable':'unbranded', 'not rated':'unbranded', 'lucky  brand':'unbranded', 'lucky brand':'unbranded',\n 'very fine dance shoes':'unbranded',\n'valentino noir':'valentino',\n'victoria k.':'victoria',\n'vince camuto':'vince',\n'vionic by orthaheel':'vionic', 'vionic with orthaheel technology':'vionic',\n'elites by walking cradles':'walking cradles', 'elites':'walking cradles','mark lemp by walking cradles':'walking cradles',\n 'rose petals by walking cradles':'walking cradles', 'the walking cradle company':'walking cradles'\n}","8ab0acf5":"# create a new column with corrected brand names.\n\ndf['brand_clean'] = df['brand'].replace(brand_map)\ndf['brand_clean'].head()","1d3ef3fb":"del_brand = ['1 world sarongs', 'mirage pet products', 'timeless toys'] # to delete\ndf = df[~df['brand'].isin(del_brand)]","825c47d4":"df.groupby('brand')['prices.amountMax'].mean().sort_values(ascending=False).head(10)","269e6d43":"df = df[~(df['brand']=='jewelsobsession')]","5b0d93fe":"df[df['brand']=='unbranded'].sort_values(by='prices.amountMax', ascending=False)[['name','prices.amountMax']].head()","490c0a67":"rem_idx = df[df['brand']=='unbranded'].sort_values(by='prices.amountMax', ascending=False).head(3).index\ndf.drop(rem_idx, axis=0, inplace=True)","c4bc8a19":"df[df['brand']=='teva']","5691eec0":"rem_idx = df[df['brand']=='teva'].sort_values(by='prices.amountMax', ascending=False).head(2).index\ndf.drop(rem_idx, axis=0, inplace=True)","4db6402a":"df['isBoots'] = df['categories'].str.contains(\"Boot|calf\",\n                                              flags=re.IGNORECASE\n                                             ).map(lambda x:1 if(x==True) else 0)\ndf['isBoots'].value_counts(normalize=True)","9db54847":"df['isBooties'] = df['categories'].str.contains(\"booties|bootie|heel|wedge|pump|Stiletto\",\n                                                flags=re.IGNORECASE\n                                               ).map(lambda x:1 if(x==True) else 0)\ndf['isBooties'].value_counts(normalize=True)","68f56a20":"df['isSandal'] = df['categories'].str.contains(\"sandal|gladiator|flip|flop|slipper|slide\",\n                                                flags=re.IGNORECASE\n                                                ).map(lambda x:1 if(x==True) else 0)\ndf['isSandal'].value_counts(normalize=True)","5b2edf56":"df['isAthletic'] = df['categories'].str.contains(\"athletic|basketball|golf|sport|run|running|trainin|gym|fitness|climb|\\\n                                    soccer|outdoor|hiking|hike|skecher|balance|fila|asics|Easy Spirit|trainer|adidas|puma|\\\n                                    reebok|nike\",\n                                                 flags=re.IGNORECASE\n                                                 ).map(lambda x:1 if(x==True) else 0)\ndf['isAthletic'].value_counts(normalize=True)","fc3923a0":"df['isCasual'] = df['categories'].str.contains(\"casual|contemporary|sneaker|slip-on|clog|round|toe|converse|canvas|mule|\\\n                                    moccasin|flat|Bahama|espadrille|loafer\",\n                                                 flags=re.IGNORECASE\n                                                 ).map(lambda x:1 if(x==True) else 0)\ndf['isCasual'].value_counts(normalize=True)","e0fc898a":"df['isDesigner'] = df['categories'].str.contains(\"design\",\n                                                 flags=re.IGNORECASE\n                                                 ).map(lambda x:1 if(x==True) else 0)\ndf['isDesigner'].value_counts(normalize=True)","a86ace63":"df['isLeather'] = df['categories'].str.contains(\"leather|pu|patent\",\n                                                 flags=re.IGNORECASE\n                                                 ).map(lambda x:1 if(x==True) else 0)\ndf['isLeather'].value_counts(normalize=True)","38aabefe":"# Seven categories.\ntypeofshoe = ['isBoots', 'isBooties', 'isSandal', 'isAthletic', 'isCasual', 'isDesigner', 'isLeather']","ec93ca42":"# 'Other' is when it falls in none of the above category.\ndf['isOther'] = (df[typeofshoe].sum(axis=1)).map(lambda x:1 if(x==0) else 0)\ndf['isOther'].value_counts(normalize=True)","53cca3c4":"df.loc[df['prices.currency']=='CAD', 'prices.amountMin'] = df['prices.amountMin']\/1.35\ndf.loc[df['prices.currency']=='CAD', 'prices.amountMax'] = df['prices.amountMax']\/1.35\n\ndf.loc[df['prices.currency']=='EUR', 'prices.amountMin'] = df['prices.amountMin']\/0.90\ndf.loc[df['prices.currency']=='EUR', 'prices.amountMax'] = df['prices.amountMax']\/0.90\n\ndf.loc[df['prices.currency']=='AUD', 'prices.amountMin'] = df['prices.amountMin']\/1.46\ndf.loc[df['prices.currency']=='AUD', 'prices.amountMax'] = df['prices.amountMax']\/1.46\n\ndf.loc[df['prices.currency']=='GBP', 'prices.amountMin'] = df['prices.amountMin']\/0.79\ndf.loc[df['prices.currency']=='GBP', 'prices.amountMax'] = df['prices.amountMax']\/0.79","372ffcdc":" # name of top50 brands.\ntop50 = list(df.groupby('brand_clean')['prices.amountMax'].mean().sort_values(ascending=False).head(50).index)\n# subset dataframe with only those top50 brands.\ndf50 = df.loc[df['brand_clean'].isin(top50)]\n# box-plot to understand their price distribution.\nplt.figure(figsize=(12,20))\nsns.barplot(y='brand_clean', x='prices.amountMax', data=df50, order=top50)","f99365e9":"# subset df, where brands are removed if they have less than 5 records.\ndfmin5rec = df[df['brand_clean'].isin(list((df['brand_clean'].value_counts()>=5).index))]\n# name of top50 brands.\ntop50 = list(dfmin5rec.groupby('brand_clean')['prices.amountMax'].mean().sort_values(ascending=False).head(50).index)\n# subset dataframe with only those top50 brands.\ndf50 = dfmin5rec.loc[dfmin5rec['brand_clean'].isin(top50)]\n# box-plot to understand their price distribution.\nplt.figure(figsize=(12,20))\nsns.barplot(y='brand_clean', x='prices.amountMax', data=dfmin5rec, order=top50)","bc872896":"df[df['brand_clean']=='unbranded']['prices.amountMax'].mean()","3c24fe46":"plt.figure(figsize=(10,5))\nplt.title('Price distribution of all the shoes.')\nsns.distplot(df['prices.amountMax'], rug=True, color='green')","201f629f":"plt.figure(figsize=(10,5))\nplt.title('Price distribution of all the shoes with value less than $250.')\nsns.distplot(df[df['prices.amountMax']<=250]['prices.amountMax'], rug=True)","5bb92eff":"plt.figure(figsize=(10,5))\nplt.title('Price distribution of all the shoes with value more than $250.')\nsns.distplot(df[df['prices.amountMax']>250]['prices.amountMax'], rug=True, color='red')","38139237":"priceRange = df.groupby('brand_clean')['prices.amountMax'].agg({'min', 'max'})\npriceRange['range'] = priceRange['max'] - priceRange['min']\ntop25priceRange = priceRange.sort_values(by='range', ascending=False)[0:25]\nplt.figure(figsize=(10,12))\nsns.barplot(y=top25priceRange.index, x=top25priceRange.range)","dabaa3f0":"sns.distplot(df[df['brand_clean']=='gucci']['prices.amountMax'], rug=True)","b600582c":"sns.distplot(df[df['brand_clean']=='valentino']['prices.amountMax'], rug=True)","16ac05ee":"sns.distplot(df[df['brand_clean']=='ralph lauren']['prices.amountMax'], rug=True)","c6f2eed4":"sns.distplot(df[df['brand_clean']=='prada']['prices.amountMax'], rug=True)","af872fba":"sns.distplot(df[df['brand_clean']=='burberry']['prices.amountMax'], rug=True)","3cd9e822":"sns.distplot(df[df['brand_clean']=='dolce and gabbana']['prices.amountMax'], rug=True)","74b362ef":"sns.distplot(df[df['brand_clean']=='chloe']['prices.amountMax'], rug=True)","59a2a4ca":"We can see that most of the shoes in this dataset are ranged between 0 to 250 dollars. We can thus view the histograms separately.","b7f2ced0":"* Remove unnecesssary columns.","221dfc45":"Remove `Men` and `Boys`.","2a7abb5d":"<hr>","6e5152bd":"`jewelobsession` is not shoe related.","f7e3ed37":"<hr>","823c494b":"## Preliminary Steps.","28178006":"<hr>","561cd327":"<hr>","bf37f860":"It seems like some brands have normal distributions, and some have two peaks. This might be because they have two different range of prices, to cater to a wider audience.","c9881e42":"## EDA.","62cbbbd2":"The above plot seems like a normal distribution with right skew. Peak is around 50 dollars.","4edde5cd":"First three rows must be deleted. Check `prices.amountMax`.","3ef5bc43":"**Read Data.**","54d6cf88":"Columns with missing values.","67ceb503":"* Check for missing values.","31cd022c":"<hr>","8306bc34":"<hr>","2215c7d0":"**Note:** *`ast` library would have been a better choice to extract info from stringified lists.*","698ea32c":"First two rows must be deleted. Check `prices.amountMax`.","66b9cd1d":"<hr>","73693963":"Let's check brands which have widest distribution of prices.","0264d55d":"* Let's derive a `Gender` column from `features`.","0430cba9":"Null values have reduced from 41 to 28 percent.","dcc3c3db":"* Let's derive type of shoe.","3e29f50a":"<hr>","68e001df":"**Import Libraries.**","02072eb7":"<hr>\n<hr>","9b82381b":"Let's check the most expensive brands, as well as their \"brand value\".","3bd51557":"High missing values in many columns.","ec50081f":"* Let's deal with the `brand` column now.","7f01e876":"<hr>\n<hr>","3e7e12b9":"* Let's extract colours from `features` column.","9f70ce81":"<hr>","7f9fd7b0":"`{\"key\":\"Sleeve-length\",\"value\":[\"Long Sleeve\"]}` Sweaters have also crept somehow.","1479be7c":"Many of these brands have only one record. Let's see top50 brands, where we have atleast 5 records of them in this dataset.","0109494b":"* Let's  look at some of the most expensive brands.","9b6d791c":"<hr>","606050b9":"* Let's look at `features` column.","2ed737c2":"<hr>","827bdf0c":"The above plot has a wide peak from 400-450 to 850-900 dollars.","6f29e02b":"* Let's look at unexpensive brands.","4094a897":"<hr>","f5c3c5a7":"`{\"key\":\"Gender\",\"value\":[\"Boys\"]}` Men's shoes have also crept in somehow.","bd780ef5":"We can use the same string matching `categories` column, used just above, to filter out non-shoe related rows.","9b8de80d":"<hr>","73d34be4":"Let's check the distribution of prices.","7c35af19":"* `teva` brand has some erroneous values.","384bb541":"Let's see distribution of some of these top brands.","48e7d5e1":"We can derive some information from `features` column.","3a4d6e74":"I have tried to categorize the type of shoe from the `categories` column.<br>\n1. isBoots: Boots, calf\n2. isBooties: booties, heel, wedge, pumps\n3. isSlipper: sandal, gladiator, flip-flop, slipper, slide\n4. isAthletic: athletic, basketball, golf, sport, running, training, gym, fitness, climb, soccer, hiking, outdoor\n5. isCasual: casual, contemporary, sneakers, slip-on, mules, moccasion, flats, espadrille, loafers\n6. isDesigner: designer\n7. isLeather: A leather shoe\n8. isOther: None of the Above","362aba36":"Columns with no missing values.","b332e124":"The average price of `unbranded` shoes can be used to assess the brand value of any shoe. For example, brand value of `simone rocha` might be, (average price of branded shoe - average price of unbranded shoe), 1120 - 70 = $1050.","25d1d48f":"<hr>","c1afc518":"**Some Notebook Settings.**","f45c2023":"* Certain values are in `features` column which are not shoe related.","58bad76c":"## Data Cleaning.","66984281":"<hr>","bbf09aaa":"* Let's convert all prices to USD."}}