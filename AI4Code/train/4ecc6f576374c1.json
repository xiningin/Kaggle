{"cell_type":{"2617153c":"code","78bf1eda":"code","64533811":"code","f918e6ca":"code","e92a37d9":"code","d662cbe3":"code","39b1dec5":"code","2f779e61":"code","94149ffd":"code","f2f67d0d":"code","36faed48":"code","4471ba34":"code","f8420a27":"code","a89e9aec":"code","0a0a81b2":"code","3fe913b3":"code","3ac66e96":"markdown","f815a35e":"markdown","30381e3c":"markdown","aa856735":"markdown","f11076a8":"markdown","34ca34e4":"markdown","44cd62e0":"markdown","f2f58780":"markdown","d43a38ce":"markdown","dfb6ca49":"markdown","95a142b9":"markdown","615480b0":"markdown","953e5870":"markdown","f7388214":"markdown"},"source":{"2617153c":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport torch\nimport importlib\nimport cv2 \nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport pandas as pd\nfrom PIL import Image\nfrom IPython.display import display","78bf1eda":"%cp -r \/kaggle\/input\/yolox-cots-models \/kaggle\/working\/\n%cd \/kaggle\/working\/yolox-cots-models\/yolox-dep\n\n#%cp -r \/kaggle\/input\/barrier-reef-yolox\/best_ckpt.pth \/kaggle\/working\/yolox-cots-models","64533811":"!pip install pip-21.3.1-py3-none-any.whl -f .\/ --no-index\n!pip install loguru-0.5.3-py3-none-any.whl -f .\/ --no-index\n!pip install ninja-1.10.2.3-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl -f .\/ --no-index\n!pip install onnx-1.8.1-cp37-cp37m-manylinux2010_x86_64.whl -f .\/ --no-index\n!pip install onnxruntime-1.8.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl -f .\/ --no-index\n!pip install onnxoptimizer-0.2.6-cp37-cp37m-manylinux2014_x86_64.whl -f .\/ --no-index\n!pip install thop-0.0.31.post2005241907-py3-none-any.whl -f .\/ --no-index\n!pip install tabulate-0.8.9-py3-none-any.whl -f .\/ --no-index","f918e6ca":"%cd \/kaggle\/working\/yolox-cots-models\/YOLOX\n!pip install -r requirements.txt\n!pip install -v -e . ","e92a37d9":"%cd \/kaggle\/working\/yolox-cots-models\/yolox-dep\/cocoapi\/PythonAPI\n\n!make\n!make install\n!python setup.py install\n\nimport pycocotools","d662cbe3":"def yolox_inference(img, model, test_size): \n    bboxes = []\n    bbclasses = []\n    scores = []\n    \n    preproc = ValTransform(legacy = False)\n\n    tensor_img, _ = preproc(img, None, test_size)\n    tensor_img = torch.from_numpy(tensor_img).unsqueeze(0)\n    tensor_img = tensor_img.float()\n    tensor_img = tensor_img.cuda()\n\n    with torch.no_grad():\n        outputs = model(tensor_img)\n        outputs = postprocess(\n                    outputs, num_classes, confthre,\n                    nmsthre, class_agnostic=True\n                )\n\n    if outputs[0] is None:\n        return [], [], []\n    \n    outputs = outputs[0].cpu()\n    bboxes = outputs[:, 0:4]\n\n    bboxes \/= min(test_size[0] \/ img.shape[0], test_size[1] \/ img.shape[1])\n    bbclasses = outputs[:, 6]\n    scores = outputs[:, 4] * outputs[:, 5]\n    \n    return bboxes, bbclasses, scores","39b1dec5":"def draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, classes_dict):\n    for i in range(len(bboxes)):\n            box = bboxes[i]\n            cls_id = int(bbclasses[i])\n            score = scores[i]\n            if score < confthre:\n                continue\n            x0 = int(box[0])\n            y0 = int(box[1])\n            x1 = int(box[2])\n            y1 = int(box[3])\n            \n            cv2.rectangle(img, (x0, y0), (x1, y1), (255, 0, 255), 1)\n            cv2.putText(img, '{}:{:.1f}%'.format(classes_dict[cls_id], score * 100), (x0, y0 - 1), cv2.FONT_HERSHEY_SIMPLEX, 0.6,(255,0,255), thickness = 2)\n    return img","2f779e61":"def format_prediction(bboxes, confs,confthre):\n    annot = ''\n    if len(bboxes)>0:\n        for idx in range(len(bboxes)):\n            box = bboxes[idx]\n            x_min = int(box[0])\n            y_min = int(box[1])\n            x_max = int(box[2])\n            y_max = int(box[3])\n\n            w=x_max-x_min\n            h=y_max-y_min\n            \n            conf = confs[idx]\n            if conf < confthre:\n                continue\n            annot += '{:.3f} {} {} {} {}'.format(conf, x_min, y_min, w, h)\n            annot +=' '\n        annot = annot.strip(' ')\n    return annot","94149ffd":"%cd \/kaggle\/working\/yolox-cots-models\/YOLOX\nCHECKPOINT_FILE = '\/kaggle\/working\/yolox-cots-models\/yx_l_003.pth'","f2f67d0d":"config_file_template = '''\n\n#!\/usr\/bin\/env python3\n# -*- coding:utf-8 -*-\n# Copyright (c) Megvii, Inc. and its affiliates.\n\nimport os\n\nfrom yolox.exp import Exp as MyExp\n\n\nclass Exp(MyExp):\n    def __init__(self):\n        super(Exp, self).__init__()\n        self.depth = 1\n        self.width = 1\n        self.exp_name = os.path.split(os.path.realpath(__file__))[1].split(\".\")[0]\n        self.num_classes = 1\n\n'''\n\nwith open('cots_config.py', 'w') as f:\n    f.write(config_file_template)","36faed48":"from yolox.utils import postprocess\nfrom yolox.data.data_augment import ValTransform\n\nCOCO_CLASSES = (\n  \"starfish\",\n)\n\n# get YOLOX experiment\ncurrent_exp = importlib.import_module('cots_config')\nexp = current_exp.Exp()\n\n# set inference parameters\ntest_size = (800, 1280)\nnum_classes = 1\nconfthre = 0.09\nnmsthre = 0.41\n\n\n# get YOLOX model\nmodel = exp.get_model()\nmodel.cuda()\nmodel.eval()\n\n# get custom trained checkpoint\nckpt_file = CHECKPOINT_FILE\nckpt = torch.load(ckpt_file, map_location=\"cpu\")\nmodel.load_state_dict(ckpt[\"model\"])","4471ba34":"TEST_IMAGE_PATH = \"\/kaggle\/input\/tensorflow-great-barrier-reef\/train_images\/video_2\/5745.jpg\"\nimg = cv2.imread(TEST_IMAGE_PATH)\n\n# Get predictions\nbboxes, bbclasses, scores = yolox_inference(img, model, test_size)\n\n# Draw predictions\nout_image = draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, COCO_CLASSES)\n\n# Since we load image using OpenCV we have to convert it \nout_image = cv2.cvtColor(out_image, cv2.COLOR_BGR2RGB)\ndisplay(Image.fromarray(out_image))","f8420a27":"%cd \/kaggle\/working\/","a89e9aec":"import greatbarrierreef\nenv = greatbarrierreef.make_env()# initialize the environment\niter_test = env.iter_test()      # an iterator which loops over the test set and sample submission","0a0a81b2":"for idx, (img, pred_df) in enumerate(tqdm(iter_test)):\n    bboxes, bbclasses, scores = yolox_inference(img[:,:,::-1], model, test_size)\n    annot = format_prediction(bboxes, scores,confthre)\n    pred_df['annotations'] = annot\n    env.predict(pred_df)\n    if idx<3:\n        out_image = draw_yolox_predictions(img, bboxes, scores, bbclasses, confthre, COCO_CLASSES)\n        display(Image.fromarray(out_image))    ","3fe913b3":"sub_df = pd.read_csv('submission.csv')\nsub_df.head()","3ac66e96":"### Hi kagglers, This is `Inference` notebook using `YOLOX`.\n\n\n### Other notebooks in the competition\n- [Barrier Reef YOLOX [Training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/barrier-reef-yolox-training)\n\n\n\n### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","f815a35e":"# \u2600\ufe0f Importing Libraries","30381e3c":"# References","aa856735":"# \ud83d\udd28 Functions","f11076a8":"### Install YOLOX required modules","34ca34e4":"#  Inference","44cd62e0":"### Install CocoAPI tool","f2f58780":"# Preparing  The Model","d43a38ce":"![download.jpg](attachment:07de9c65-7c16-40e7-a821-d5354296394c.jpg)","dfb6ca49":"### Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","95a142b9":"# \ud83d\ude80 Barrier Reef YOLOX [Inference]","615480b0":"1. https:\/\/www.kaggle.com\/remekkinas\/yolox-inference-on-kaggle-for-cots-lb-0-507\n1. https:\/\/www.kaggle.com\/awsaf49\/great-barrier-reef-yolov5-infer\n","953e5870":"# \u2b07\ufe0f Install YOLOX\n","f7388214":"# Inference on a image from the Validation set"}}