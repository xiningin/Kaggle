{"cell_type":{"bd95de62":"code","794ea08b":"code","e9a1f685":"code","bd852a96":"code","932c8c2d":"code","2079fa02":"code","06f649d1":"code","034c2f4c":"code","6b017924":"code","5fd087bd":"code","b5221c4b":"code","5d0c31ff":"markdown","25ac8891":"markdown","6c5db8b5":"markdown","fb1db967":"markdown","b6731261":"markdown"},"source":{"bd95de62":"!pip install rapidfuzz -qq","794ea08b":"from rapidfuzz import process, fuzz\nchoices = [\"Atlanta Falcons\", \"New York Jets\", \"New York Giants\", \"Dallas Cowboys\"]","e9a1f685":"process.extract(\"new york jets\", choices, scorer=fuzz.WRatio, limit=2)","bd852a96":"process.extractOne(\"cowboys\", choices, scorer=fuzz.WRatio)","932c8c2d":"import pandas as pd\ncaptions = pd.read_csv('..\/input\/wikipedia-image-caption\/test_caption_list.csv')\nprint(len(captions))\ncaptions.head()","2079fa02":"CAPTIONS = captions.caption_title_and_reference_description.values.tolist()\nprint(len(CAPTIONS))\nCAPTIONS[:10]","06f649d1":"from rapidfuzz import process, fuzz","034c2f4c":"s = \"Albert Pike Albert Pike\"","6b017924":"result = process.extract(s, CAPTIONS, scorer=fuzz.ratio, processor=None, limit=1)","5fd087bd":"result","b5221c4b":"result[0][0]","5d0c31ff":"The process module makes it compare strings to lists of strings. This is generally more performant than using the scorers directly from Python. Here are some examples on the usage of processors in RapidFuzz:","25ac8891":"# Example2","6c5db8b5":"# Install rapidfuzz","fb1db967":"# Example1","b6731261":"# rapidfuzz process module"}}