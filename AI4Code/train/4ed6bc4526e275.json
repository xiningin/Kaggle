{"cell_type":{"d2bd9906":"code","c4c7b2cd":"code","b70bee1c":"code","0cf04a01":"code","3c051668":"code","a2bfc9bd":"code","07c9c55d":"code","4a7cabb1":"code","87072299":"code","90750bbb":"code","8e689498":"code","3c0a0bf4":"code","4f75440a":"code","47000ef3":"code","fdcea9eb":"code","0b6e971c":"code","62fc2af2":"code","b6fadcb0":"code","29801c24":"code","bb23455b":"code","5a73a335":"code","c6b087ae":"code","de98789d":"code","57e35295":"code","8337a620":"code","4da6ada9":"code","7d49695d":"code","09d9de92":"code","b29069df":"code","229df230":"code","2c8f08d2":"code","49bfc0af":"code","a802ba59":"code","6ec26210":"code","6c7787ea":"code","09dced9a":"code","2333b613":"code","a85e4e3f":"code","ee428525":"code","2fe2e78a":"code","004eeac5":"code","881019a0":"code","61cccbca":"code","fd568044":"code","a41f5d53":"code","93958c26":"code","919ab624":"code","67d99d8a":"code","96f2eb90":"code","3593ae68":"code","ae3ac9e8":"code","266a53fb":"markdown","2c26e82a":"markdown","a4220414":"markdown","47962efe":"markdown","26623b0d":"markdown","12ee15fb":"markdown","b7563df3":"markdown","d4616ee6":"markdown","3d13a0bd":"markdown","f625acb0":"markdown","690c3a15":"markdown","9098e8b2":"markdown","620493b2":"markdown","2c339dfc":"markdown","e42d3e07":"markdown","63250d9a":"markdown","9027c59a":"markdown","5c7bd0c7":"markdown","2c748f20":"markdown","027e2028":"markdown"},"source":{"d2bd9906":"import numpy as np # linear algebra\nimport pandas as pd # data processing","c4c7b2cd":"# load data\ndf = pd.read_csv('\/kaggle\/input\/individual-company-sales-data\/sales_data.csv')\ndf.head()","b70bee1c":"# shape of dataframe\ndf.shape","0cf04a01":"# dataframe dtypes for each feature\ndf.dtypes","3c051668":"for cat in df.columns:\n    print(cat, df[cat].unique())","a2bfc9bd":"df['gender'] = df.gender.replace('U', np.NaN)\ndf['age'] = df.age.replace('1_Unk', np.NaN)\ndf['child'] = df.child.replace('U', np.NaN)\ndf['child'] = df.child.replace('0', np.NaN)","07c9c55d":"df.isnull().sum()","4a7cabb1":"# relative\ndf.isnull().sum() \/ df.shape[0] * 100","87072299":"def category_stackedbar(df, category):\n    '''Returns stacked bar plot'''\n    return pd.DataFrame(\n        df.groupby(category).count()['flag'] \/ df.groupby(category).count()['flag'].sum() * 100).rename(columns={\"flag\": \"%\"}).T.plot(\n            kind='bar', \n            stacked=True\n    );","90750bbb":"category_stackedbar(df, 'house_owner');","8e689498":"df['house_owner'] = df['house_owner'].fillna(df.mode()['house_owner'][0])","3c0a0bf4":"category_stackedbar(df, 'age');","4f75440a":"df = df.dropna(subset=['age'])","47000ef3":"category_stackedbar(df, 'child');","fdcea9eb":"# percentage of null values in *child*\n(df.isnull().sum() \/ df.shape[0] * 100)['child']","0b6e971c":"df = df.drop('child', axis=1)","62fc2af2":"category_stackedbar(df, 'marriage');","b6fadcb0":"df['marriage'] = df['marriage'].fillna(df.mode()['marriage'][0])","29801c24":"df = df.dropna(subset=['gender', 'education'])","bb23455b":"# checking data cleaning\ndf.isnull().sum()","5a73a335":"df.dtypes","c6b087ae":"df['flag'] = df['flag'].apply(lambda value: 1 if value == 'Y' else 0)\ndf['online'] = df['online'].apply(lambda value: 1 if value == 'Y' else 0)","de98789d":"df.dtypes","57e35295":"# explore categories of features with hierarchy\nfor cat in ['education', 'age', 'mortgage', 'fam_income']:\n    print(cat, df[cat].unique())","8337a620":"# education to integer\ndf['education'] = df['education'].apply(lambda value: int(value[0]) + 1)","4da6ada9":"# age to integer\ndf['age'] = df['age'].apply(lambda value: int(value[0]) - 1)","7d49695d":"# mortgage to integer\ndf['mortgage'] = df['mortgage'].apply(lambda value: int(value[0]))","09d9de92":"#fam_income label dictionary\ndict_fam_income_label = {}\nfor i, char in enumerate(sorted(df['fam_income'].unique().tolist())):\n    dict_fam_income_label[char] = i + 1","b29069df":"df['fam_income'] = df['fam_income'].apply(lambda value: dict_fam_income_label[value])","229df230":"dummy_features = ['gender', 'customer_psy', 'occupation', 'house_owner', 'region', 'marriage']","2c8f08d2":"# explore categories of dummy features\nfor cat in dummy_features:\n    print(cat, df[cat].unique())","49bfc0af":"def apply_dummy(df, cat, drop_first=True):\n    return pd.concat([df, pd.get_dummies(df[cat], prefix=cat, drop_first=drop_first)], axis=1).drop(cat, axis=1)","a802ba59":"for cat in dummy_features:\n    df = apply_dummy(df, cat)","6ec26210":"# dataframe with just numbers\ndf.head()","6c7787ea":"from xgboost import XGBClassifier","09dced9a":"X = df.drop('flag', axis=1)\ny = df['flag']","2333b613":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_score, recall_score, f1_score","a85e4e3f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","ee428525":"# scale to handle imbalanced dataset\nscale = y_train[y_train == 0].count() \/ y_train[y_train == 1].count()","2fe2e78a":"xgbmodel = XGBClassifier(max_depth=3, learning_rate=0.01, n_estimators=1000, scale_pos_weight=scale)","004eeac5":"xgbmodel.fit(X_train, y_train)","881019a0":"y_pred_test = xgbmodel.predict(X_test)\ny_pred_train = xgbmodel.predict(X_train)","61cccbca":"print('Train')\nprint('Precision: {:.2f}% \\tRecall: {:.2f}% \\t\\tF1 Score: {:.2f}%'.format(precision_score(y_train, y_pred_train)*100, recall_score(y_train, y_pred_train)*100, f1_score(y_train, y_pred_train)*100))","fd568044":"print('Test')\nprint('Precision: {:.2f}% \\tRecall: {:.2f}% \\t\\tF1 Score: {:.2f}%'.format(precision_score(y_test, y_pred_test)*100, recall_score(y_test, y_pred_test)*100, f1_score(y_test, y_pred_test)*100))","a41f5d53":"import shap","93958c26":"# load JS visualization code to notebook\nshap.initjs()","919ab624":"# explain the model's predictions using SHAP values\n# (same syntax works for LightGBM, CatBoost, and scikit-learn models)\nexplainer = shap.TreeExplainer(xgbmodel)\nshap_values = explainer.shap_values(X_train)","67d99d8a":"# summarize the effects of all the features\nshap.summary_plot(shap_values, X_train)","96f2eb90":"shap.summary_plot(shap_values, X, plot_type=\"bar\")","3593ae68":"shap.dependence_plot(\"age\", shap_values, X_train)","ae3ac9e8":"shap.dependence_plot(\"education\", shap_values, X_train)","266a53fb":"Same case as *age* feature, but in this case I am going to drop the column to avoid removing too many observations","2c26e82a":"Seems like *gender*, *age* and *child* features have this kind of category","a4220414":"*null* values from *education* and *gender* represent less than 2% of the total rows, so we can just drop them","47962efe":"Since most of house owners are owners, I can fill *null* values with *Owner* category","26623b0d":"> *house_owner*","12ee15fb":"#### Missing values analysis","b7563df3":"More than 80% are Married so I decided to fill *null* values with the mode","d4616ee6":"> marriage","3d13a0bd":"### Feature Engineering","f625acb0":"#### Handling missing values","690c3a15":"## Xgboost Model","9098e8b2":"There is no dominant category so I prefer to delete rows with *null* values in *age*","620493b2":"> education and gender","2c339dfc":"1. Replace *'Unknown'* categories with *null* values","e42d3e07":"From the categorical features I'm going to transform the columns *education*, *age*, *mortgage* and *fam_income* using label encoding because they have a hierarchy. For the other categories I'll treat them as dummy variables.","63250d9a":"> *age*","9027c59a":"Transforming *flag* and *online* features to binary integer","5c7bd0c7":"### Explaining the output of Xgboost","2c748f20":"### Target Audience (most likely to buy the product)\n* Male\n* Age between 35 and 55\n* Experience shopping online\n* High house evaluation\n* High education (Bach - Grad)\n* Professional occupation\n* High Mortgage","027e2028":"> child"}}