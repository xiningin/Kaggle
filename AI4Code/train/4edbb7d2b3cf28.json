{"cell_type":{"be644d5c":"code","08d832ea":"code","cfe901a8":"code","8b73b16e":"code","ccc1acd0":"code","82135a1d":"code","589e8305":"code","c70334f0":"code","4939778f":"code","4589aecd":"code","7f6ac907":"code","a80d5a96":"code","51e3b7fe":"code","5edcc41c":"code","8f56e1cc":"code","634d2487":"code","b35f39bf":"code","ee1de071":"code","cdfc44c8":"code","bea3a4fc":"code","7f94b56c":"code","da3cf830":"code","be492314":"code","1f1b743c":"code","91bcff5c":"code","6f374f24":"code","ae107df7":"code","fe453891":"code","c9741a5e":"code","82faae23":"code","88135dfa":"code","d8db7d99":"code","dedb5d10":"code","238c086f":"code","0541eff0":"code","e1f74d9a":"markdown","a40c1ab1":"markdown","d0dd2c83":"markdown","c0e53b51":"markdown","cf9d5835":"markdown","fa25b8a7":"markdown","e148e3b2":"markdown","a6c92a55":"markdown","8ebb8512":"markdown","f855f4be":"markdown","0fdc5d8c":"markdown","816acd0e":"markdown","1b0de949":"markdown","8add4c7e":"markdown","a376e368":"markdown"},"source":{"be644d5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08d832ea":"import pandas as pd\ndf=pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\nprint(df)","cfe901a8":"df.drop(columns=[\"customerID\"],axis=1)","8b73b16e":"print(df.isnull().sum())","ccc1acd0":"df.info()","82135a1d":"df[\"TotalCharges\"]=df[\"TotalCharges\"].replace(r' ',0,regex=True)\ndf[\"TotalCharges\"]=df[\"TotalCharges\"].astype(float)","589e8305":"df[\"TotalCharges\"].value_counts()","c70334f0":"df[\"TotalCharges\"]=df[\"TotalCharges\"].replace(0.00,df[\"TotalCharges\"].mean(),regex=True)\nprint(df[\"TotalCharges\"])","4939778f":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px","4589aecd":"fig=px.histogram(df.groupby([\"tenure\",\"Churn\"]).size().reset_index(name=\"count\"),\n                x=\"tenure\",y=\"count\",color=\"Churn\",marginal=\"rug\",color_discrete_map={\"Yes\":\"#E45756\",\"No\":\"#1CBE4F\"},\n                title=\"tech support\")\nfig.show()","7f6ac907":"fig=px.sunburst(df.groupby([\"Churn\",\"PhoneService\",\"InternetService\"]).size().reset_index(name=\"count\"),\n               path=[\"Churn\",\"PhoneService\",\"InternetService\"],values=\"count\",title=\"are we having issue with phone\")\n\nfig.show()","a80d5a96":"\nfig,ax=plt.subplots(figsize=(12,8))\nax=sns.countplot(x=\"PaperlessBilling\",hue=\"Churn\",data=df)","51e3b7fe":"fig,ax=plt.subplots(figsize=(12,8))\nax=sns.countplot(x=\"InternetService\",hue=\"Churn\",data=df)","5edcc41c":"import seaborn as sns\nplt.style.use(\"seaborn\")\ncolor=plt.cm.ocean(np.linspace(0,2,20))\ndf[\"PaymentMethod\"].value_counts().plot.bar(color=color,figsize=(12,8))\nplt.title(\"Payments preferred\",fontsize=20)\nplt.xticks(rotation=0)\nplt.show()","8f56e1cc":"import seaborn as sns\nplt.style.use(\"seaborn\")\ncolor=plt.cm.ocean(np.linspace(0,2,20))\ndf[\"Contract\"].value_counts().plot.bar(color=color,figsize=(12,8))\nplt.title(\"Type of contract most of the customer's preffered\",fontsize=20)\nplt.xticks(rotation=0)\nplt.show()","634d2487":"X=df[[\"tenure\",\"Contract\",\"OnlineSecurity\",\"TechSupport\",\"OnlineBackup\",\"DeviceProtection\",\"SeniorCitizen\",\"Dependents\",\"PaperlessBilling\",\"Partner\",\"TotalCharges\",\"PaymentMethod\",\"MonthlyCharges\"]]\nX","b35f39bf":"Y=df[\"Churn\"]\nY","ee1de071":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","cdfc44c8":"X[[\"Contract\",\"OnlineSecurity\",\"TechSupport\",\"OnlineBackup\",\"DeviceProtection\",\"Dependents\",\"PaperlessBilling\",\"Partner\",\"PaymentMethod\"]]=X[[\"Contract\",\"OnlineSecurity\",\"TechSupport\",\"OnlineBackup\",\"DeviceProtection\",\"Dependents\",\"PaperlessBilling\",\"Partner\",\"PaymentMethod\"]].apply(le.fit_transform)\n","bea3a4fc":"X","7f94b56c":"from sklearn.preprocessing import StandardScaler\nSC=StandardScaler()","da3cf830":"X[[\"tenure\",\"TotalCharges\",\"MonthlyCharges\"]]=SC.fit_transform(X[[\"tenure\",\"TotalCharges\",\"MonthlyCharges\"]])","be492314":"df[[\"Churn\"]]=df[[\"Churn\"]].apply(le.fit_transform)\nY=df[\"Churn\"]\nY","1f1b743c":"X=X.iloc[:,:].values\nY=df.iloc[:,-1].values","91bcff5c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=100)","6f374f24":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nada=AdaBoostClassifier(n_estimators=50)\nada.fit(X_train,y_train)\npred=ada.predict(X_test)\ncon_mat=confusion_matrix(y_test,pred)\nprint(\"confusion-matrix \\n\",con_mat)\nacc_score=accuracy_score(y_test,pred)\n#print(acc_score)","ae107df7":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(ada,X,Y,cv=10)\n#print(score)\nmean=np.array(score).mean()\nprint(\"cross-validation score:\",mean)\n","fe453891":"from sklearn.linear_model import LogisticRegression\nlog=LogisticRegression()\nlog.fit(X_train,y_train)\npred=log.predict(X_test)\ncon_mat=confusion_matrix(y_test,pred)\nprint(\"confusion-matrix \\n\",con_mat)\nacc_score=accuracy_score(y_test,pred)\n#print(acc_score)\n","c9741a5e":"score=cross_val_score(log,X,Y,cv=10)\n#print(score)\nmean=np.array(score).mean()\nprint(\"cross-validation score:\",mean)","82faae23":"from sklearn.ensemble import RandomForestClassifier\nRFC=RandomForestClassifier()\nRFC.fit(X_train,y_train)\npred=RFC.predict(X_test)\ncon_mat=confusion_matrix(y_test,pred)\nprint(\"confusion-matrix \\n\",con_mat)\nacc_score=accuracy_score(y_test,pred)\n#print(acc_score)\n","88135dfa":"score=cross_val_score(RFC,X,Y,cv=10)\n#print(score)\nmean=np.array(score).mean()\nprint(\"cross-validation score:\",mean)","d8db7d99":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\ngb.fit(X_train,y_train)\npred=gb.predict(X_test)\ncon_mat=confusion_matrix(y_test,pred)\nprint(\"confusion-matrix \\n\",con_mat)\nacc_score=accuracy_score(y_test,pred)\n#print(acc_score)","dedb5d10":"score=cross_val_score(gb,X,Y,cv=10)\n#print(score)\nmean=np.array(score).mean()\nprint(\"cross-validation score:\",mean)","238c086f":"from sklearn.ensemble import VotingClassifier\nclf1 = GradientBoostingClassifier()\nclf2 = LogisticRegression()\nclf3 = AdaBoostClassifier()\neclf1 = VotingClassifier(estimators=[('Gradient', clf1), ('Logistic', clf2), ('AdaBoost', clf3)], voting='soft')\neclf1.fit(X_train, y_train)\npred = eclf1.predict(X_test)\ncon_mat=confusion_matrix(y_test,pred)\nprint(\"confusion-matrix \\n\",con_mat)\nacc_score=accuracy_score(y_test,pred)\n#print(acc_score)","0541eff0":"score=cross_val_score(eclf1,X,Y,cv=10)\n#print(score)\nmean=np.array(score).mean()\nprint(\"cross-validation score:\",mean)","e1f74d9a":"**Now our X and Y are ready but we to do feature Scaling to understand for our algorithm.**","a40c1ab1":"**Models             Accuracy**\n\n**AdaBoostClassifier:  80.13%**\n\n**logisticregression:  80.02%**\n\n**RandomForest      :  79.48%**\n\n**GradientBoosting  :  80.37%**\n\n**VotingClassifier  :  80.70%**","d0dd2c83":"**After performing chi2 test we only include the columns we want.**","c0e53b51":"**You can clearly see the missing values in TotalCharges are converted into 0.\nAfter that we need to replace with mean of the column to get consistent**","cf9d5835":"**As there are no missing values,\n Let's quickly jump into visualization.**","fa25b8a7":"**Checking for missing values**","e148e3b2":"*How many customers prefer paperless billing*","a6c92a55":"**Now let's apply cross-validation to get average accuracy for 10 models**","8ebb8512":"**Now we had done with our all preprocessing steps. Let's get into training and testing**","f855f4be":"**Who are likely to cancel our subscription either male or female**","0fdc5d8c":"**We can clearly see that TotalCharges are in object type we need to convert it into float**","816acd0e":"**The feature scaling of categorical values has done.Now ,Let's do on continuous values**","1b0de949":"****removing unwanted columns for our prediction****","8add4c7e":"**Now our traning and testing is ready. Let's get into our model buliding**","a376e368":"**So, In our independent features there are mixture of continuous and categorical values,\n First we need to scale for Catagorical and then continuous values**"}}