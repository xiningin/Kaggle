{"cell_type":{"598cdb7b":"code","62661bbe":"code","b18258fc":"code","64938ef3":"code","3ab44e08":"code","7d65fb75":"code","a36cfc21":"code","ee46a253":"code","fd11bd42":"code","a5ccd3d4":"code","125b2f4f":"code","6ffc5a40":"code","9fa8a177":"code","9f727dba":"code","4b0099b2":"code","134cefa4":"code","d4845b47":"code","1cd09ba7":"code","25bb35b5":"code","55a56b6b":"code","8f3d9a18":"code","cbf62c2d":"code","dc0a9506":"code","9981a5c1":"code","f9388869":"code","7e29fd70":"code","c7107fea":"code","12762c48":"code","031f9534":"code","f2f5c420":"code","a1ebabde":"code","af20bca6":"code","3fd2e163":"code","359fba13":"code","0a4da3c8":"code","04b16c32":"code","f81bd29b":"code","9a15c409":"code","3abe83aa":"code","64785dad":"code","27dd840a":"code","fe500459":"markdown","0f891ba1":"markdown","4a8d6cb4":"markdown"},"source":{"598cdb7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62661bbe":"import sklearn\nfrom sklearn.datasets import load_boston\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b18258fc":"df = pd.read_csv(\"\/kaggle\/input\/tesla-latest-stock-data-2010-2020\/TSLA.csv\")","64938ef3":"df.head()","3ab44e08":"df.shape","7d65fb75":"df.isna().sum()","a36cfc21":"df.keys()","ee46a253":"df.describe()","fd11bd42":"print(df[\"Adj Close\"])","a5ccd3d4":"df.hist(figsize=(8,10))","125b2f4f":"df.plot()","6ffc5a40":"sns.set()\ndf.Volume.hist()","9fa8a177":"df.keys","9f727dba":"sns.set()\ndf[\"Adj Close\"].hist()","4b0099b2":"sns.distplot(df[\"Adj Close\"])","134cefa4":"sns.kdeplot(df[\"Adj Close\"])","d4845b47":"df.hist(figsize=(12,12))\nplt.plot()","1cd09ba7":"alist = [12, 33,34,23,45,21,22,36,33,32,13,43,34,24,25,26,36,35,50]\naaray = np.array(alist)\naaray\n","25bb35b5":"bray = aaray\/aaray.max() # it is called min-max scaler technique.\nbray","55a56b6b":"from sklearn.preprocessing import MinMaxScaler","8f3d9a18":"scaler = MinMaxScaler()","cbf62c2d":"df['Date'] = pd.to_datetime(df['Date']).astype('int64')\nmax_a = df.Date.max()\nmin_a = df.Date.min()\nmin_norm = -1\nmax_norm =1\ndf['NORMAL'] = (df.Date- min_a) \/ (max_a-min_a)","dc0a9506":"df.describe()\nY= df[\"Adj Close\"] \nX =df.drop(columns=[\"Adj Close\", \"Date\"])\nX","9981a5c1":"X_scaled = scaler.fit_transform(X)\nX_scaled","f9388869":"# Train test split\nfrom sklearn.model_selection import train_test_split","7e29fd70":"X_train,X_Test,Y_train,Y_Test = train_test_split(X_scaled,Y,test_size=0.1)","c7107fea":"X_train.shape,X_Test.shape,Y_train.shape,Y_Test.shape","12762c48":"# machine learning\nfrom sklearn.linear_model import LinearRegression\n","031f9534":"lr = LinearRegression()\nlr.fit(X_train,Y_train)\n\n","f2f5c420":"lr.coef_ # will give the slope","a1ebabde":"lr.intercept_ # will give the constant","af20bca6":"# Testing phase\n#lr.predict(X_Test)\nY_pred = lr.predict(X_Test)\nY_pred","3fd2e163":"Y_Test.reset_index(drop=True)","359fba13":"error = pd.DataFrame(Y_pred, columns=[\"Predicted\"])\nerror[\"Actual\"] = Y_Test.reset_index(drop=True)\nerror","0a4da3c8":"plt.figure(figsize=(12, 6))\nplt.plot(error.Predicted, label=\"Predicted\")\nplt.plot(error.Actual, label=\"Actual\")\nplt.legend()","04b16c32":"df.describe()\n","f81bd29b":"error[\"error\"] = error.Predicted - error.Actual","9a15c409":"error.head()","3abe83aa":"error[\"Penalty\"] = error.error**2\nerror.head()","64785dad":"error.Penalty.mean()","27dd840a":"abs(error.error).mean()","fe500459":"#load data set","0f891ba1":"Check for missing values","4a8d6cb4":"Normalization"}}