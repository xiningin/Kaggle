{"cell_type":{"6f3ceb09":"code","0c398b0a":"code","05b96f4e":"code","0d42d41a":"code","d136b27e":"code","7f35097a":"code","27d50241":"code","7235610d":"code","d31ef793":"code","76c9d0a3":"code","facdcd17":"code","8655c572":"code","8296e118":"code","b162118d":"code","d71ed5be":"code","bba84144":"markdown","35c1d20b":"markdown","d739eb70":"markdown","54c4a053":"markdown","db2d579a":"markdown"},"source":{"6f3ceb09":"!pip install scikit-learn-intelex --progress-bar off >> \/tmp\/pip_sklearnex.log","0c398b0a":"from sklearnex import patch_sklearn\npatch_sklearn()","05b96f4e":"import os\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\n","0d42d41a":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv', index_col='PassengerId')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv', index_col='PassengerId')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv', index_col='PassengerId')\n\ntarget = train.pop('Survived')","d136b27e":"train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","7f35097a":"test_prepared = test.copy()\ntrain_prepared = train.copy()\n\ntest_prepared['Age'].fillna((train['Age'].median()), inplace=True)\ntrain_prepared['Age'].fillna((train['Age'].median()), inplace=True)\n\ntest_prepared['Fare'].fillna((train['Fare'].median()), inplace=True)\ntrain_prepared['Fare'].fillna((train['Fare'].median()), inplace=True)\n\ntest_prepared['Embarked'].fillna('S', inplace=True)\ntrain_prepared['Embarked'].fillna('S', inplace=True)","27d50241":"for col in ['Pclass', 'Sex', 'Embarked']:\n    le = LabelEncoder()\n    le.fit(train_prepared[col])\n    train_prepared[col] = le.transform(train_prepared[col])\n    test_prepared[col] = le.transform(test_prepared[col])","7235610d":"train_prepared.head()","d31ef793":"train_prepared_scaled = train_prepared.copy()\ntest_prepared_scaled = test_prepared.copy()\n\nscaler = StandardScaler()\nscaler.fit(train_prepared)\ntrain_prepared_scaled = scaler.transform(train_prepared_scaled)\ntest_prepared_scaled = scaler.transform(test_prepared_scaled)\n\ntrain_prepared_scaled = pd.DataFrame(train_prepared_scaled, columns=train_prepared.columns)\ntest_prepared_scaled = pd.DataFrame(test_prepared_scaled, columns=train_prepared.columns)","76c9d0a3":"X_train, X_valid, y_train, y_valid = train_test_split(train_prepared_scaled, target, test_size=0.1, random_state=0)","facdcd17":"%%time\nsvc_kernel_rbf = SVC(kernel='rbf', random_state=0, C=0.01)\nsvc_kernel_rbf.fit(X_train, y_train)\ny_pred = svc_kernel_rbf.predict(X_valid)\naccuracy_score(y_pred, y_valid)","8655c572":"%%time\nfinal_pred = svc_kernel_rbf.predict(test_prepared_scaled)","8296e118":"submission['Survived'] = np.round(final_pred).astype(int)\nsubmission.to_csv('svc_kernel_rbf.csv')","b162118d":"%%time\nn_folds = 10\nkf = KFold(n_splits=n_folds, shuffle=True, random_state=0)\ny_pred = np.zeros(test.shape[0])\n\nfor fold, (train_index, valid_index) in enumerate(kf.split(train_prepared_scaled, target)):\n    print(\"Running Fold {}\".format(fold + 1))\n    X_train, X_valid = pd.DataFrame(train_prepared_scaled.iloc[train_index]), pd.DataFrame(train_prepared_scaled.iloc[valid_index])\n    y_train, y_valid = target.iloc[train_index], target.iloc[valid_index]\n    svc_kernel_rbf = SVC(kernel='rbf', random_state=0, C=0.01)\n    svc_kernel_rbf.fit(X_train, y_train)\n    print(\"  Accuracy: {}\".format(accuracy_score(y_valid, svc_kernel_rbf.predict(X_valid))))\n    y_pred += svc_kernel_rbf.predict(test_prepared_scaled)\n\ny_pred \/= n_folds\n\nprint(\"\")\nprint(\"Done!\")","d71ed5be":"submission['Survived'] = np.round(y_pred).astype(int)\nsubmission.to_csv('svc_kernel_rbf_10_folds.csv')","bba84144":"# Enable Intel(R) Extension for Scikit-learn\nDo magic here - patching scikit-learn ","35c1d20b":"# Comparing to original RBF case\n\nAchived same accuracy in local scoring - 0.7614\n\nAchived same accuracy in public leaderboard **0.79062**\n\nOriginal training time: 10min 2s\n\nOriginal predict time: 4min 51s\n\n","d739eb70":"# Installing scikit-learn-intelex\n\nPackage also avaialble in conda  - please refer to details https:\/\/github.com\/intel\/scikit-learn-intelex","54c4a053":"# \ud83d\ude80 Optimizing Kaggle kernels using Intel(R) Extension for Scikit-learn\n\nFor classical machine learning algorithms, we often use the most popular Python library, scikit-learn. We use it to fit models and search for optimal parameters, but\u202fscikit-learn\u202fsometimes works for hours, if not days. Speeding up this process is something anyone who uses scikit-learn would be interested in.\n\nI want to show you how to get results faster without changing the code. To do this, we will use another Python library,\u202f[scikit-learn-intelex](https:\/\/github.com\/intel\/scikit-learn-intelex). It accelerates scikit-learn and does not require you changing the code written for scikit-learn.\n\nI will show you how to speed up your kernel **from 2h 26min to 6 minutes** without changes of your code! This is **25x** speedup\n\nThis kernel is based on [[TPS 2021-04] Support Vector Machines](https:\/\/www.kaggle.com\/ekozyreff\/tps-2021-04-support-vector-machines) and use same code with addition of scikit-learn-intelex\n\nSpeedup details:\n\n|Case                     | Original time  | Patched time   | Speedup       |Original accuracy | Patched accuracy |\n| :-----------------------| :------------: | :-------------:| :------------:|:----------------:| :---------------:|\n|SVM RBF Train            | 10min 2s       | 38.5 s         | x15.6         | 0.7614 - local   | 0.7614 - local   |\n|SVM RBF Predict          | 4min 51s       | 9.56 s         | x30.4         | 0.79062 - PL     | 0.79062 - PL     |\n|SVM RBF 10 folds         | 2h 26min 43s   | 5min 49s       | x25.2           | 0.79078 - PL     | 0.79066 - PL     |\n\nNote: actual run time depends on particular VM hardware provisioned for kernel - there are might be notisable fluctuation in time\n\nNote2: we observe slightly lower accuracy for folded case - will be investigating this\n","db2d579a":"# Original code below\nOnly keep code relevant for final kfolds block"}}