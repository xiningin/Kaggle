{"cell_type":{"e1014aa2":"code","1e2efa3e":"code","2f81614a":"code","1e9cb909":"code","2e7cc174":"code","90e55317":"code","39b493f4":"code","0a5406c3":"code","d328e056":"code","e20fee70":"code","ee6b1e60":"code","0ac27036":"code","67e3b28e":"code","6598463b":"code","e0b1ce99":"code","6a720e5e":"code","4a845232":"code","94dba20c":"code","44a8ddab":"code","f82e1671":"code","6c34e89c":"code","ca4a5cac":"code","668fd23b":"code","fbe7c8d4":"code","ebded058":"code","7fac105e":"code","0384ed99":"code","a1248663":"code","ce7f2a50":"code","a6d6531e":"code","dfbd088b":"code","ab95ee43":"code","e6e38afa":"code","fac024a6":"code","9e675ffc":"code","ba6a0a5c":"code","a63e0b79":"code","f81f9902":"code","39cb452f":"code","6a4a3dca":"code","70235770":"markdown","be41e4b1":"markdown","25c0042f":"markdown","53fe6dfd":"markdown","1872b67b":"markdown","caa8ed58":"markdown","4d066ad5":"markdown","2421d755":"markdown","16edc9e4":"markdown","85ec9a17":"markdown","b261d27f":"markdown"},"source":{"e1014aa2":"import numpy as np \nimport pandas as pd ","1e2efa3e":"all_path = []\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        all_path.append(os.path.join(dirname, filename))\n","2f81614a":"all_path[:10]","1e9cb909":"sample_path = '\/kaggle\/input\/landmark-recognition-2020\/sample_submission.csv'\ntraincsv_path = '\/kaggle\/input\/landmark-recognition-2020\/train.csv'","2e7cc174":"# sample submission\u306e\u4e2d\u8eab\u3092\u898b\u308b # View contents of sample submission \nsample = pd.read_csv(sample_path)\nsample","90e55317":"# traincsv\u306e\u4e2d\u8eab\u3092\u898b\u308b # View contents of train.csv\ntraincsv = pd.read_csv(traincsv_path)\ntraincsv","39b493f4":"# traincsv\u306e\u4e2d\u8eab\u306fid\u3068landmark_id\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308b\u3002 # I could understand that the contents of traincsv are composed of id and landmark_id.\n# \u307e\u305a\u306f\u3001id\u3054\u3068\u306bpath\u3092\u304f\u3063\u3064\u3051\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002 # Firstly, I considered attaching the path for each id.\n# all_path\u304b\u3089train\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3068\u3001jpg\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u629c\u304f # I tried to extract the one that contained the \"train\" and \".jpg\" from the all_path.","0a5406c3":"all_path[:10]","d328e056":"# train\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306e.jpg\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u629c\u304d\u305f\u3044 # I wanted to extract only \".jpg\" file in train directory.","e20fee70":"# train\u304c\u3064\u304f\u3084\u3064\u3060\u3051\u629c\u304f # Firstly, I extracted only \"train\" in all path.\ntrain_impath = [s for s in all_path if \"train\" in s]","ee6b1e60":"# <\u308f\u304b\u3089\u306a\u3044\u4eba\u306f\u30fb\u30fb\u30fb>\u2191\u306f\u4ee5\u4e0b\u3068\u540c\u3058\u3002 # If you cannot understand, the above code is the same as below.\n\ntrain_impath2 = []\n\nfor s in all_path:\n    if \"train\" in s:\n        train_impath2.append(s)","0ac27036":"# \u540c\u69d8\u306b\u3055\u3089\u306bjpg\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u629c\u304f # After that, I extracted \".jpg\" in train_impath.\ntrain_impath = [s for s in train_impath if \".jpg\" in s]\ntrain_impath[:10]","67e3b28e":"# \u3053\u3053\u304b\u3089.jpg\u306e\u524d\u306eid\u306e\u307f\u3092\u629c\u304d\u305f\u3044  # From these pathes, I extracted id from path in each, in order to merge with train.csv.\ntrain_id = [s.split(\"\/\")[-1] for s in train_impath]\ntrain_id = [s.split(\".\")[0] for s in train_id]\ntrain_id[:10]","6598463b":"# dataframe\u5316 # Making dataframe.\ndf = pd.DataFrame()\ndf[\"path\"] = train_impath\ndf[\"id\"] = train_id","e0b1ce99":"df.head(3)","6a720e5e":"traincsv.head(3)","4a845232":"# merge\u3057\u3066id\u304c\u540c\u3058\u3068\u3053\u308d\u3092\u304f\u3063\u3064\u3051\u308b # Merge with the same id.\ntraindf = pd.merge(traincsv,df,on=\"id\",how=\"left\")\ntraindf.head(3)","94dba20c":"import cv2\nimport matplotlib.pyplot as plt\n\nexample = traindf[traindf[\"landmark_id\"]==1]\nfor a in example[\"path\"]:\n    plt.figure()\n    img = cv2.imread(a)\n    plt.imshow(img)\n    plt.axis(\"off\")","44a8ddab":"traindf.head(3)","f82e1671":"traindf.to_csv(\"traindf.csv\",index=False)","6c34e89c":"import collections\nl = np.array(traindf[\"landmark_id\"])\nc = collections.Counter(l) # get unique counts","ca4a5cac":"#print(c) # \u8f9e\u66f8\u578b\u3067\u3001\u305d\u308c\u305e\u308c\u306eid\u306b\u5bfe\u3059\u308b\u500b\u6570\u304c\u51fa\u3066\u3044\u308b # c is the type of dictionaly and composed of the id and the number of each id.","668fd23b":"# dataframe\u5316\u3057\u305f\u3044\u306e\u3067\u3001\u30ea\u30b9\u30c8\u5316\u3059\u308b # List the c in order to make the dataframe.\nkey = list(c.keys())\ncnt = list(c.values())","fbe7c8d4":"dfcnt = pd.DataFrame()\ndfcnt[\"id\"] = key\ndfcnt[\"count\"] = cnt\ndfcnt.head(3)","ebded058":"# \u4e26\u3073\u66ff\u3048 # sort_values\ndfcnt = dfcnt.sort_values(\"count\")\ndfcnt = dfcnt.reset_index(drop=True)","7fac105e":"dfcnt.tail(3)","0384ed99":"dfcnt.to_csv(\"dfcnt.csv\",index=False)","a1248663":"plt.scatter(dfcnt[\"id\"],dfcnt[\"count\"])\nplt.xlabel(\"id\",fontsize = 15)\nplt.ylabel(\"count\",fontsize = 15)","ce7f2a50":"import cv2\nimport matplotlib.pyplot as plt\n\nexample = traindf[traindf[\"landmark_id\"]==dfcnt[\"id\"].iloc[-1]]\n\n\nfor a in range(10):\n    plt.figure()\n    img = cv2.imread(example[\"path\"].iloc[a])\n    plt.imshow(img)\n    plt.axis(\"off\")","a6d6531e":"# \u9ed2\u3044\u67a0\u3076\u3061\u304c\u6700\u3082\u591a\u3044\u753b\u50cf # I can understand the images have black borders.","dfbd088b":"# all_path\u304b\u3089\u629c\u304f # extract the .jpg file path from all_path\ntest_impath = [s for s in all_path if \"test\" in s]\ntest_impath = [s for s in test_impath if \".jpg\" in s]\ntest_impath[:10]","ab95ee43":"for a in range(10):\n    plt.figure()\n    img = cv2.imread(test_impath[a])\n    plt.imshow(img)\n    plt.axis(\"off\")","e6e38afa":"# \u3053\u306e\u30c6\u30b9\u30c8\u753b\u50cf\u306b\u8a13\u7df4\u753b\u50cf\u306eid\u3092\u95a2\u9023\u4ed8\u3051\u3066confidence\u3092\u51fa\u3059\u306e\u304c\u8ab2\u984c\u3002 # The challenge is to associate the id of the training image with this test image to give confidence.","fac024a6":"sample","9e675ffc":"dfcnt.tail(3)","ba6a0a5c":"dfcnt[\"id\"].iloc[-1]","a63e0b79":"test_landmarks = str(dfcnt[\"id\"].iloc[-1]) + \" \" + str(1.0)\ntest_landmarks","f81f9902":"sample.head(3)","39cb452f":"sample[\"landmarks\"] = test_landmarks\nsample.head(3)","6a4a3dca":"\nsample.to_csv(\"submission.csv\",index=False)","70235770":"## landmark id = 1\u306e\u753b\u50cf\u3092\u78ba\u8a8d # Confirmation of images with landmark id = 1.","be41e4b1":"# 1. \u3059\u3079\u3066\u306epath\u3092\u51fa\u3059 # Get all path","25c0042f":"## test\u30c7\u30fc\u30bf\u306eid, landmark id, confidence\uff08\u81ea\u4fe1)\u306e\u9806\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n## # The order of submission file is the test data id, landmark id, and confidence.","53fe6dfd":"# 3. \u6700\u5f8c\u306bsubmission file\u306e\u78ba\u8a8d # Confirmaetion of submission file","1872b67b":"# 2. train\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\u3068\u89e3\u6790 # Confirmation the train data and analyzing.","caa8ed58":"## \u4f8b\u3048\u3070\u3001landmarks\u3092\u4e00\u756a\u591a\u3044id\u306b\u5168\u90e8\u5909\u3048\u3066\u63d0\u51fa\u3057\u3066\u307f\u308b (\u7d50\u679c\u306fscore 0\u3060\u3051\u3069\u3001\u63d0\u51fa\u53ef\u80fd\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304b\u306e\u78ba\u8a8d\u3002)\u3000\n## # For example, I tried changing all the landmarks to the most ids and submit it \n## (the result is score 0, but check if it is in a submittable format).","4d066ad5":"## \u63d0\u51fa\u540d\u306fsubmission.csv\u3000\u53f3\u5074\u306esetting\u3067internet off\u306b\u3057\u3066\u3001commit\u3057\u306a\u3044\u3068\u63d0\u51fa\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u6ce8\u610f\u3002\n## #The file name must be \"submission.csv\". And it notes that the internet must be off by changing the setting on right part of this screen. ","2421d755":"## id = 138982\u304c6272\u500b\u3067\u4e00\u756a\u591a\u3044\u306e\u3067\u3001\u3069\u3046\u3044\u3046\u753b\u50cf\u304b\u898b\u3066\u307f\u308b \n## # Since id = 138982 is the most with 6272, let's see what kind of image.","16edc9e4":"## Thank you for upvoding and comment.\n## I got a comment that the flow is easy to understand, so I updated not only the Japanese ver but also the English ver.","85ec9a17":"## traindf\u3092\u3082\u3046\u5c11\u3057\u89e3\u6790 # Analyzing the traindf","b261d27f":"# 2. test\u30c7\u30fc\u30bf\u3082\u307f\u3066\u307f\u308b # Confirmation of test data"}}