{"cell_type":{"6adc9b10":"code","adcd84e0":"code","2efba38d":"code","ba24dc18":"code","7685bc5b":"code","a429b79e":"code","d16301ed":"code","cb8e8ef9":"code","390a419f":"code","58534693":"code","cd863f3f":"code","24e3cf7d":"code","5e7e477a":"code","36379f1d":"code","2c617a13":"code","5635ae96":"code","0507e7c0":"code","45e79a85":"code","fed0e7f4":"code","9a69a36b":"code","5921fd66":"code","4bf02847":"code","7de217ea":"code","856b2806":"code","f0831109":"code","446b30b4":"code","914a7c03":"code","bb1e418e":"code","0669a366":"code","5b4593ae":"code","67a58903":"code","fcbe7057":"code","be74c13c":"code","73794c71":"code","27fd56c8":"code","135ffaf5":"code","b242b578":"code","a2c4578e":"markdown","c6f8b7fe":"markdown","45a6cedf":"markdown","1213d2fe":"markdown","ac5bc515":"markdown","db45faf9":"markdown","0f29436f":"markdown","8339418e":"markdown","033d1fd0":"markdown"},"source":{"6adc9b10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","adcd84e0":"from kaggle.competitions import nflrush\nenv = nflrush.make_env()","2efba38d":"raw = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv\")","ba24dc18":"raw.columns","7685bc5b":"raw['is_run'] = raw.NflId == raw.NflIdRusher\nraw_single = raw[raw.is_run==True]\nraw_single.fillna(-999,inplace=True)","a429b79e":"yards = raw_single.Yards\nX = raw_single.drop([\"Yards\", \"is_run\"], axis=1)","d16301ed":"yards.describe()","cb8e8ef9":"import seaborn as sns\nsns.distplot(yards)","390a419f":"y = yards","58534693":"categorical_features = [\"Team\", \"Quarter\", \"Down\", \"PossessionTeam\",\n                       \"FieldPosition\", \"OffenseFormation\", \"PlayDirection\",\n                       \"PlayerCollegeName\", \"HomeTeamAbbr\", \"VisitorTeamAbbr\",\n                       \"Stadium\", \"Location\", \"StadiumType\", \"Turf\",\n                       \"GameWeather\", \"WindDirection\"]\nfor c in categorical_features:\n    print(f'{c}: {len(X[c].unique())}')","cd863f3f":"X['Stadium'].apply(lambda x: x.lower()).value_counts()","24e3cf7d":"stadium_mapping = {\n    \"oakland alameda-county coliseum\": \"oakland-alameda county coliseum\",\n    \"mercedes-benz dome\": \"mercedes-benz superdome\",\n    \"twickenham\": \"twickenham stadium\",\n    \"los angeles memorial coliesum\": \"los angeles memorial coliseum\",\n    \"m & t bank stadium\": \"m&t bank stadium\",\n    \"centurylink\": \"centurylink field\",\n    \"paul brown stdium\": \"paul brown stadium\",\n    \"firstenergystadium\": \"firstenergy stadium\",\n    \"centuryfield\": \"centurylink field\",\n    \"first energy stadium\": \"firstenergy stadium\",\n    \"firstenergy\": \"firstenergy stadium\",\n    \"m&t stadium\": \"m&t bank stadium\",\n    \"broncos stadium at mile high\": \"sports authority field at mile high\",\n    \"nrg\": \"nrg stadium\",\n    \"metlife\": \"metlife stadium\",\n    \"mercedes-benz stadium\": \"mercedes-benz superdome\"\n}","5e7e477a":"X['Location'].apply(lambda x: x.lower().replace(\".\", \"\")).value_counts()","36379f1d":"location_mapping = {\n    \"chicago. il\": \"chicago, il\",\n    \"jacksonville, florida\": \"jacksonville, fl\",\n    \"london\": \"london, england\",\n    \"los angeles, calif\": \"los angeles, ca\",\n    \"jacksonville florida\": \"jacksonville, fl\",\n    \"cleveland\": \"cleveland, oh\",\n    \"miami gardens, fla\": \"miami gardens, fl\",\n    \"baltimore, maryland\": \"baltimore, md\",\n    \"kansas city,  mo\": \"kansas city, mo\",\n    \"new orleans\": \"new orleans, la\",\n    \"cleveland ohio\": \"cleveland, oh\",\n    \"e rutherford, nj\": \"east rutherford, nj\",\n    \"seattle\": \"seattle, wa\",\n    \"cleveland,ohio\": \"cleveland, oh\",\n    \"houston, texas\": \"houston, tx\",\n    \"cleveland, ohio\": \"cleveland, oh\",\n    \"charlotte, north carolina\": \"charlotte, nc\",\n    \"detroit\": \"detroit, mi\",\n    \"pittsburgh\": \"pittsburgh, pa\",\n    \"cincinnati, ohio\": \"cincinnati, oh\",\n    \"miami gardens, fla\": \"miami gardens, fl\",\n    \"arlington, texas\": \"arlington, tx\",\n    \"orchard park ny\": \"orchard park, ny\",\n    \"indianapolis, ind\": \"indianapolis, in\",\n    \"chicago il\": \"chicago, il\",\n    \"mexico city\": \"mexico city, mexico\"\n}","2c617a13":"X['StadiumType'].apply(lambda x: str(x).lower().replace(\".\", \"\")).value_counts()","5635ae96":"stadium_type_mapping = {\n    \"outside\": \"outdoor\",\n    \"outdor\": \"outdoor\",\n    \"ourdoor\": \"outdoor\",\n    \"outddors\": \"outdoor\",\n    \"oudoor\": \"outdoor\",\n    \"outdoors\": \"outdoor\",\n    \"indoors\": \"indoor\",\n    \"retractable roof\": \"dome\",\n    \"retr. roof-closed\": \"dome, closed\",\n    \"retr. roof - closed\": \"dome, closed\",\n    \"domed, closed\": \"dome, closed\",\n    \"closed dome\": \"dome, closed\",\n    \"domed\": \"dome, closed\",\n    \"indoor, roof closed\": \"dome, closed\",\n    \"retr. roof closed\": \"dome, closed\",\n    \"retr. roof-open\": \"dome, open\",\n    \"bowl\": \"nan\",\n    \"heinz field\": \"nan\",\n    \"open\": \"dome, open\",\n    \"dome\": \"dome, closed\",\n    \"outdoor retr roof-open\": \"dome, open\",\n    \"retr. roof - open\": \"dome, open\",\n    \"indoor, open roof\": \"dome, open\",\n    \"cloudy\": \"nan\"\n}","0507e7c0":"X['Turf'].apply(lambda x: str(x).lower()).value_counts()","45e79a85":"turf_mapping = {\n    \"naturall grass\": \"natural grass\",\n    \"natural\": \"natural grass\",\n    \"artifical\": \"artificial\",\n    \"fieldturf 360\": \"field turf\",\n    \"fieldturf360\": \"field turf\",\n    \"fieldturf\": \"field turf\"\n}","fed0e7f4":"X['GameWeather'].apply(lambda x: str(x).lower()).value_counts()","9a69a36b":"game_weather_mapping = {\n    \"sunny, windy\": \"sunny\",\n    'cloudy, light snow accumulating 1-3\"': \"cloudy\",\n    \"rain chance 40%\": \"cloudy\",\n    \"showers\": \"rainy\",\n    \"cloudy, chance of rain\": \"cloudy\",\n    \"t: 51; h: 55; w: nw 10 mph\": \"nan\",\n    \"cloudy with periods of rain, thunder possible. winds shifting to wnw, 10-20 mph.\": \"cloudy\",\n    \"sunny and clear\": \"sunny\",\n    \"sun & clouds\": \"sunny\",\n    \"coudy\": \"cloudy\",\n    \"sunny and cold\": \"sunny\",\n    \"sunny skies\": \"sunny\",\n    \"cloudy, 50% change of rain\": \"cloudy\",\n    \"clear and cool\": \"clear\",\n    \"partly clear\": \"clear\",\n    \"partly cloudy\": \"cloudy\",\n    \"rain likely, temps in low 40s.\": \"rainy\",\n    \"cloudy and cold\": \"cloudy\",\n    \"partly clouidy\": \"cloudy\",\n    \"cloudy, fog started developing in 2nd quarter\": \"foggy\",\n    \"sunny, highs to upper 80s\": \"sunny\",\n    \"mostly sunny skies\": \"sunny\",\n    \"scattered showers\": \"rainy\",\n    \"cloudy, rain\": \"rainy\",\n    \"clear and warm\": \"clear\",\n    \"cold\": \"nan\",\n    \"30% chance of rain\": \"rainy\",\n    \"mostly coudy\": \"cloudy\",\n    \"sunny and warm\": \"sunny\",\n    \"rain shower\": \"rainy\",\n    \"cloudy and cool\": \"cloudy\",\n    \"clear and cold\": \"clear\",\n    \"heavy lake effect snow\": \"snowy\",\n    \"snow\": \"snowy\",\n    \"clear and sunny\": \"sunny\",\n    \"light rain\": \"rainy\",\n    \"clear skies\": \"clear\",\n    \"n\/a indoor\": \"indoor\",\n    \"indoors\": \"indoor\",\n    \"partly sunny\": \"sunny\",\n    \"mostly sunny\": \"sunny\",\n    \"n\/a (indoors)\": \"indoor\",\n    \"controlled climate\": \"nan\",\n    \"rain\": \"rainy\",\n    \"mostly cloudy\": \"cloudy\",\n    \"partly cloudy\": \"cloudy\",\n    \"party cloudy\": \"cloudy\"\n}","5921fd66":"X['WindDirection'].apply(lambda x: str(x).lower().replace(\"-\", \"\")).value_counts()","4bf02847":"wind_direction_mapping = {\n    \"from ese\": \"wnw\",\n    \"east north east\": \"ene\",\n    \"13\": \"nan\",\n    \"south southwest\": \"ssw\",\n    \"from sse\": \"nnw\",\n    \"south southeast\": \"sse\",\n    \"from wsw\": \"ene\",\n    \"north\/northwest\": \"nnw\",\n    \"from nne\": \"ssw\",\n    \"from ssw\": \"nne\",\n    \"west northwest\": \"wnw\",\n    \"east southeast\": \"ese\",\n    \"north east\": \"ne\",\n    \"1\": \"nan\",\n    \"8\": \"nan\",\n    \"westsouthwest\": \"wsw\",\n    \"from w\": \"e\",\n    \"southeast\": \"se\",\n    \"from s\": \"n\",\n    \"from sw\": \"ne\",\n    \"southwest\": \"sw\",\n    \"northwest\": \"nw\",\n    \"northeast\": \"ne\",\n    \"east\": \"e\",\n    \"from nnw\": \"sse\",\n    \"south\": \"s\",\n    \"north\": \"n\",\n    \"west\": \"w\"\n}","7de217ea":"X[\"WindSpeed\"].value_counts()","856b2806":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import FeatureUnion, Pipeline\nimport re\n                                              \nclass CleaningTransformer( BaseEstimator, TransformerMixin ):\n    def _cast_to_int(self, x):\n        try:\n            if \"-\" in x:\n                x = np.mean(x.split(\"-\"))\n            return int(x)\n        except:\n            return 0\n        \n    def fit( self, X, y = None ):\n        return self \n    \n    def transform( self, X, y = None ):\n        for c in X.columns.values:\n            if c == \"Stadium\":\n                X.loc[:, c] = X[c].apply(lambda x: x.lower()).apply(lambda x: stadium_mapping.get(x, x))\n            if c == \"Location\":\n                X.loc[:, c] = X[c].apply(lambda x: x.lower().replace(\".\", \"\")).apply(lambda x: location_mapping.get(x, x))\n            if c == \"StadiumType\":\n                X.loc[:, c] = X[c].apply(lambda x: str(x).lower()).apply(lambda x: stadium_type_mapping.get(x, x))\n            if c == \"Turf\":\n                X.loc[:, c] = X[c].apply(lambda x: str(x).lower()).apply(lambda x: turf_mapping.get(x, x))\n            if c == \"GameWeather\":\n                X.loc[:, c] = X[c].apply(lambda x: str(x).lower()).apply(lambda x: game_weather_mapping.get(x, x))\n            if c == \"WindDirection\":\n                X.loc[:, c] = X[c].apply(lambda x: str(x).lower().replace(\"-\", \"\")).apply(lambda x: wind_direction_mapping.get(x, x))\n            if c == \"WindSpeed\":\n                X.loc[:, c] = X[c].apply(lambda x: self._cast_to_int(str(x).lower().replace(\"mpg\", \"\"))).fillna(0)\n        return X\n\nclass DateTransformer( BaseEstimator, TransformerMixin ):\n    def fit( self, X, y = None ):\n        return self \n    \n    def transform( self, X, y = None ):\n        for c in X.columns.values:\n            X.loc[:, c] = pd.to_datetime(X[c])\n            if c == \"PlayerBirthDate\":\n                X[f'{c}_year'] =X[c].dt.year\n            else:\n                X[f'{c}_hour'] = X[c].dt.hour\n                X[f'{c}_minute'] = X[c].dt.minute\n                X[f'{c}_second'] = X[c].dt.second\n            X = X.drop([c], axis=1)\n        return X\n    \nclass HeightTransformer( BaseEstimator, TransformerMixin ):\n    def fit( self, X, y = None ):\n        return self \n    \n    def transform( self, X, y = None ):\n        X.loc[:, \"height\"] = X.iloc[:,0].apply(lambda x: float(x.replace(\"-\", \".\")))\n        return X.drop([\"PlayerHeight\"], axis=1)\n\nclass PersonnelTransformer( BaseEstimator, TransformerMixin ): \n    def __init__(self, personnels):\n        self.personnels = personnels\n        \n    def fit( self, X, y = None ):\n        return self\n    \n    def _find_match(self, pattern, string):\n        m = re.match(f\"\\d {pattern}\", string)\n        if m is not None:\n            return m.group()[0]\n        return 0\n    \n    def transform( self, X, y = None ):\n        for c in [\"OffensePersonnel\", \"DefensePersonnel\"]:\n            for p in self.personnels:\n                X[f\"{c}_{p}\"] = X[c].apply(lambda x: self._find_match(p, x))\n            X = X.drop([c], axis=1)\n        return X","f0831109":"class CastTransformer( BaseEstimator, TransformerMixin ):\n    def __init__(self, target):\n        self.target = target\n        \n    def fit( self, X, y = None ):\n        return self\n    \n    def transform( self, X, y = None ):\n        if self.target == \"str\":\n            X = pd.DataFrame(X).astype(str)\n        if self.target == \"int\":\n            X = pd.DataFrame(X).astype(int)\n        return X","446b30b4":"def yards_to_cdf(yards):\n    return np.array([1 if i > yards + 99 else 0 for i in range(200)])","914a7c03":"ignored_features = [\"GameId\", \"PlayId\", \"NflId\", \"NflIdRusher\", \"DisplayName\"]\ncleaning_features = [\"Stadium\", \"Location\", \"StadiumType\", \"Turf\", \"WindDirection\", \"GameWeather\", \"WindSpeed\"]\ncategorical_features = [\"Team\", \"Quarter\", \"Down\", \"PossessionTeam\",\n                       \"FieldPosition\", \"OffenseFormation\", \"PlayDirection\",\n                       \"PlayerCollegeName\", \"HomeTeamAbbr\", \"VisitorTeamAbbr\",\n                       \"Stadium\", \"Location\", \"StadiumType\", \"Turf\",\n                       \"GameWeather\", \"WindDirection\"]\nnumeric_features = [\"X\", \"Y\", \"S\", \"A\", \"Dis\", \"Orientation\", \"Dir\", \"JerseyNumber\", \"Season\",\n                    \"YardLine\", \"Distance\", \"HomeScoreBeforePlay\", \"VisitorScoreBeforePlay\",\n                   \"DefendersInTheBox\", \"PlayerWeight\", \"Week\", \"Temperature\",\n                   \"Humidity\", \"WindSpeed\"]\ndate_features = [\"GameClock\", \"TimeHandoff\", \"TimeSnap\", \"PlayerBirthDate\"]\npersonnel_features = [\"OffensePersonnel\", \"DefensePersonnel\"]\nheight_feature = [\"PlayerHeight\"]","bb1e418e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X.drop(ignored_features, axis=1), y, test_size=0.3)","0669a366":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\npersonnels = [\"RB\", \"TE\", \"WR\", \"OL\", \"DL\", \"LB\", \"DB\", \"QB\"]\nnumeric_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median'))])\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('str_cast', CastTransformer(\"str\")),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\ndate_transformer = Pipeline(steps=[('date', DateTransformer())])\nheight_transformer = Pipeline(steps=[('height', HeightTransformer())])\npersonnel_transformer = Pipeline(steps=[('personnel', PersonnelTransformer(personnels))])","5b4593ae":"from sklearn.compose import ColumnTransformer\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('dat', date_transformer, date_features),\n        ('per', personnel_transformer, personnel_features),\n        ('hei', height_transformer, height_feature),\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])","67a58903":"from sklearn.linear_model import ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import VarianceThreshold\nmodels = [\n    RandomForestRegressor(random_state=42,n_jobs=-1, criterion='mae'),\n    ElasticNet(),\n    LGBMRegressor(random_state=42,n_jobs=-1, learning_rate=0.005, importance_type = 'gain', metric='mae')\n]\nmodel_scores = []\nfor model in models:\n    pipe = Pipeline(steps=[\n                      ('cleaner', CleaningTransformer()),\n                      ('preprocessor', preprocessor),\n                      ('selector', VarianceThreshold()),\n                      ('regressor', model)], verbose=True)\n    scores = cross_val_score(pipe, X_train, y_train, cv=5, scoring=\"neg_mean_absolute_error\")\n    model_scores.append(np.mean(scores))\n    print(f\"{model} mean: {np.mean(scores)} std: {np.std(scores)}\")","fcbe7057":"grid_params = [\n    {'bootstrap': [True, False],\n     'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n     'max_features': ['auto', 'sqrt'],\n     'min_samples_leaf': [1, 2, 4],\n     'min_samples_split': [2, 5, 10],\n     'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n    ,{\"max_iter\": [1, 5, 10],\n      \"alpha\": [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],\n      \"l1_ratio\": np.arange(0.0, 1.0, 0.1)}\n    ,{'learning_rate': [0.005],\n    'n_estimators': [40],\n    'num_leaves': [6,8,12,16],\n    'boosting_type' : ['gbdt'],\n    'objective' : ['binary'],\n    'random_state' : [501], \n    'colsample_bytree' : [0.65, 0.66],\n    'subsample' : [0.7,0.75],\n    'reg_alpha' : [1,1.2],\n    'reg_lambda' : [1,1.2,1.4]}\n]","be74c13c":"from sklearn.model_selection import RandomizedSearchCV\nbest_score_index = np.argmax(model_scores)\nbest_model = models[best_score_index]\nparam_distributions = {f'search__regressor__{k}': v for k,v in grid_params[best_score_index].items()}\nfinal_pipe = Pipeline(steps=[\n                      ('cleaner', CleaningTransformer()),\n                      ('preprocessor', preprocessor),\n                      ('selector', VarianceThreshold()),\n                      ('regressor', best_model)], verbose=True)\n# search = RandomizedSearchCV(final_pipe, param_distributions=grid_params[best_score_index])\nfinal_pipe.fit(X_train, y_train)\ny_pred = pd.Series(final_pipe.predict(X_train))","73794c71":"import warnings\nwarnings.filterwarnings(\"ignore\")","27fd56c8":"def generate_prediction(model, df, test_df):\n    cols = df.columns\n    # Pipelines require columns to be in the same order\n    yards_predicted = pd.Series(model.predict(test_df[cols]))\n    return np.vstack(yards_predicted.apply(lambda x: yards_to_cdf(x)))","135ffaf5":"for (test_df, sample_prediction_df) in env.iter_test():\n    predictions = generate_prediction(final_pipe, X_train, test_df)\n    env.predict(pd.DataFrame(data=predictions[:,1:], columns=sample_prediction_df.columns))","b242b578":"env.write_submission_file()","a2c4578e":"After these observations, we can define the following transformers for our pipeline","c6f8b7fe":"## Clean data","45a6cedf":"## Predictions","1213d2fe":"## EDA","ac5bc515":"Let's clean some columns","db45faf9":"When the number of column is human size, I prefer listing the categorical features myself after inspecting each column","0f29436f":"## Modelling","8339418e":"By inspecting value_counts, we can see that Stadium, Location, StadiumType, Turf, GameWeather, WindDirection require some cleaning","033d1fd0":"## Categorical features"}}