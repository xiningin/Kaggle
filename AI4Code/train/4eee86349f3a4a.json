{"cell_type":{"9fa95b48":"code","e7aed649":"code","dfc04ab2":"code","3a609891":"code","89d688f7":"code","a969ebba":"code","5e75b373":"code","18ce9dbd":"code","88f48ce1":"markdown","6ba09098":"markdown","86149f77":"markdown"},"source":{"9fa95b48":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e7aed649":"import copy\nimport time\nimport random\n\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nfrom sklearn.model_selection import KFold, StratifiedKFold, cross_val_score, cross_validate\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import roc_auc_score, roc_curve, plot_roc_curve\n\nfrom sklearn.preprocessing import RobustScaler\n\nfrom lightgbm import LGBMClassifier\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True)\nplt.rc(\"axes\", labelweight=\"bold\", labelsize=\"large\", titleweight=\"bold\", titlesize=14, titlepad=10,)\n\ndef ht(df, n=2):\n    display(df.head(n))\n    display(df.tail(n))\n    display(df.shape)\n    \ntarget = 'claim'","dfc04ab2":"SEED = 2021\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(SEED)","3a609891":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ny = train[target].copy()\nfeatures = train.columns.tolist()\nfeatures.remove('id')\nfeatures.remove(target)","89d688f7":"train['n_missing'] = train[features].isna().sum(axis=1)\ntest['n_missing'] = test[features].isna().sum(axis=1)\n\ntrain['std'] = train[features].std(axis=1)\ntest['std'] = test[features].std(axis=1)\n\nn_missing = train['n_missing'].copy()\n\ntrain[features] = train[features].fillna(train[features].mean())\ntest[features] = test[features].fillna(test[features].mean())\n\nfeatures += ['n_missing', 'std']\n\nscaler = RobustScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])\n\ntrain.shape, test.shape","a969ebba":"EARLY_STOPPING_ROUNDS = 200\nVERBOSE = 1000\n\nlgbm_params = {\n    'objective': 'binary',\n    'n_estimators': 20000,\n    'random_state': SEED,\n    'learning_rate': 5e-3,\n    'subsample': 0.6,\n    'subsample_freq': 1,\n    'colsample_bytree': 0.4,\n    'reg_alpha': 10.0,\n    'reg_lambda': 1e-1,\n    'min_child_weight': 256,\n    'min_child_samples': 20,\n    'importance_type': 'gain',\n#     'device_type': 'gpu',\n} ","5e75b373":"model_oof = np.zeros(train.shape[0])\nmodel_pred = np.zeros(test.shape[0])\n\nN_SPLITS = 7\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=n_missing)):\n    print(f\"===== fold {fold} =====\")\n    X_train = train[features].iloc[trn_idx]\n    y_train = y.iloc[trn_idx]\n    X_valid = train[features].iloc[val_idx]\n    y_valid = y.iloc[val_idx]\n    X_test = test[features]\n\n    start = time.time()\n    model = LGBMClassifier(**lgbm_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        eval_metric='auc',\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n\n    print('predicting val')\n    model_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    print('predicting ...')\n    model_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, model_oof[val_idx])\n    print(f\"fold {fold} - model auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof roc = {roc_auc_score(y, model_oof)}\")   ","18ce9dbd":"sample_solution = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\nsample_solution[target] = model_pred\nht(sample_solution)\nsample_solution.to_csv('SUBMISSION.csv', index=False)\nprint()\nprint('==================== R E A D Y ====================')","88f48ce1":"# LGBM","6ba09098":"## Preprocessing","86149f77":"Thanks [BIZEN](https:\/\/www.kaggle.com\/hiro5299834) for **lgbm_params** from this [notebook](https:\/\/www.kaggle.com\/hiro5299834\/tps-sep-2021-single-lgbm)"}}