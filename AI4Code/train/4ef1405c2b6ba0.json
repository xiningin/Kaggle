{"cell_type":{"284237cf":"code","113f4906":"code","c8940035":"code","cc50e9d7":"code","71f30723":"code","c1313e6c":"code","25ede186":"code","c2c62da6":"code","5c890e2b":"code","cd96e3e2":"code","743cc28e":"code","ebc8ded5":"code","63497054":"code","1d895278":"code","a4f4ea81":"code","3ab429f4":"code","a652e384":"code","75b0cab5":"code","21ec289e":"code","239d841e":"code","9ea86e12":"code","e80feb1f":"code","3a8806ef":"code","a7484d5e":"code","6f837f59":"code","7b8af1fd":"code","f4baa1a2":"code","b57b3082":"code","ae01315d":"code","0db38de1":"code","dd6aecf0":"code","8b32ea7f":"code","03a643a3":"code","0ae3b2a1":"code","c3f0b652":"code","f88ab544":"code","e234e420":"code","59be23a8":"code","b6885d28":"code","7ed5f697":"code","b41ca64e":"code","71790fa5":"code","e376962c":"code","210b87a2":"code","a80fedea":"code","af3d155d":"code","7fef6419":"code","52b571a7":"code","a98cb600":"code","4683d2de":"code","496a8212":"code","755b9156":"code","a7c7e74d":"code","4099b329":"code","cb47b2bd":"code","3dc6f2a6":"code","7829963a":"code","b5c9ea13":"code","443db03d":"code","cac8a35a":"code","03cb6324":"code","df758026":"code","0a31bf98":"code","7c18f628":"code","e87b0faf":"code","f938ef67":"code","7b41e394":"code","aed62d7b":"code","bb7f6589":"code","101a85af":"code","4900419a":"code","ed238f6a":"code","1c7baa2a":"code","63721a56":"code","00ccc76b":"code","7b4b634f":"code","1a07cc30":"code","e8fbd209":"code","08bd5468":"code","78603158":"code","c54f755d":"code","725d4691":"code","dd83f5fc":"code","3d960531":"code","0796a429":"code","d18ab124":"code","b7f4f703":"code","a2daed7a":"code","e35e4d9e":"code","ba2827b4":"code","0aa505d1":"code","c3d10c50":"code","17b76872":"code","86a6f8f6":"code","6f9a3398":"code","22e21d07":"code","34709033":"code","182095f7":"code","7799bacb":"code","13ae5e08":"code","bec38e55":"markdown","9c38aa83":"markdown","b8816ffb":"markdown","26082cfe":"markdown","b9451102":"markdown","3b81abac":"markdown","e0415255":"markdown","09162d57":"markdown","1db50e73":"markdown","4b51d5c3":"markdown","3424f4ec":"markdown","f463fb27":"markdown","b08bdba1":"markdown","e0fc75c0":"markdown","5b0775dd":"markdown","8dc62377":"markdown","52469896":"markdown","bd405cd9":"markdown","fbadcb06":"markdown","24c761f9":"markdown","7939f723":"markdown","e7530dd3":"markdown","e664f6b0":"markdown","15e9bbd9":"markdown","ba4cd9ce":"markdown"},"source":{"284237cf":"#Importing Data manipulation and plotting modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os","113f4906":"#Importing libraries for modeling\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier \nfrom sklearn.neighbors import KNeighborsClassifier","c8940035":"#Importing libraries for Data pre-processing\nfrom sklearn.preprocessing import StandardScaler","cc50e9d7":"#Importing model for Dimentionality Reduction\nfrom sklearn.decomposition import PCA","71f30723":"#Importing libraries for performance measures\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc, roc_curve","c1313e6c":"#Importing libraries For data splitting\nfrom sklearn.model_selection import train_test_split","25ede186":"os.chdir(\"..\/input\")","c2c62da6":"data = pd.read_csv(\"data.csv\")","5c890e2b":"pd.options.display.max_columns = 200","cd96e3e2":"data.head()","743cc28e":"data.tail()","ebc8ded5":"data.shape","63497054":"data.dtypes","1d895278":"data.describe()","a4f4ea81":"sns.jointplot(x='radius_mean',y='perimeter_mean',data=data)","3ab429f4":"data.isnull().any()","a652e384":"data = data.drop(['id','Unnamed: 32'],axis=1)","75b0cab5":"data.shape","21ec289e":"sns.countplot(x='diagnosis',data=data)","239d841e":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(1,4,1)\nax1.set_xticklabels(labels = 'Radius mean', rotation=90)\n#plt.hist(x=data.radius_mean,bins=10)\nsns.boxenplot(x='diagnosis',y='radius_mean',data=data)\nax1 = fig.add_subplot(1,4,2)\nsns.boxenplot(x='diagnosis',y='texture_mean',data=data)\nax1 = fig.add_subplot(1,4,3)\nsns.boxenplot(x='diagnosis',y='perimeter_mean',data=data)\nax1 = fig.add_subplot(1,4,4)\nsns.boxenplot(x='diagnosis',y='area_mean',data=data)\n\n\nfig2 = plt.figure(figsize=(12,12))\nax2 = fig2.add_subplot(1,4,1)\nsns.boxenplot(x='diagnosis',y='smoothness_mean',data=data)\nax2 = fig2.add_subplot(1,4,2)\nsns.boxenplot(x='diagnosis',y='compactness_mean',data=data)\nax2 = fig2.add_subplot(1,4,3)\nsns.boxenplot(x='diagnosis',y='concavity_mean',data=data)\nax2 = fig2.add_subplot(1,4,4)\nsns.boxenplot(x='diagnosis',y='concave points_mean',data=data)\n\nfig3 = plt.figure(figsize=(12,12))\nax3 = fig3.add_subplot(1,4,1)\nsns.boxenplot(x='diagnosis',y='symmetry_mean',data=data)\nax3 = fig3.add_subplot(1,4,2)\nsns.boxenplot(x='diagnosis',y='fractal_dimension_mean',data=data)","9ea86e12":"X=data.iloc[:,1:32]","e80feb1f":"X.head()","3a8806ef":"X.shape","a7484d5e":"y=data.iloc[:,0]","6f837f59":"y.head()","7b8af1fd":"data.diagnosis.unique()","f4baa1a2":"y = y.map({'M':1, 'B' : 0})","b57b3082":"y.dtype","ae01315d":"scaler = StandardScaler()","0db38de1":"X = scaler.fit_transform(X)","dd6aecf0":"pca = PCA()","8b32ea7f":"principleComponents = pca.fit_transform(X)","03a643a3":"principleComponents.shape","0ae3b2a1":"pca.explained_variance_ratio_","c3f0b652":"X = pca.explained_variance_ratio_.cumsum()","f88ab544":"X","e234e420":"sns.distplot(X,bins=5)","59be23a8":"X = principleComponents[:,0:11]","b6885d28":"X_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20,\n                                                    shuffle = True\n                                                    )","7ed5f697":"X_train.shape","b41ca64e":"X_test.shape","71790fa5":"dt = DecisionTreeClassifier()\nrf = RandomForestClassifier(n_estimators=100)\nxg = XGBClassifier(learning_rate=0.5,\n                   reg_alpha= 5,\n                   reg_lambda= 0.1\n                   )\ngbm = GradientBoostingClassifier()\netc = ExtraTreesClassifier(n_estimators=100)\nknn = KNeighborsClassifier(n_neighbors=10)","e376962c":"dt1 = dt.fit(X_train,y_train)\nrf1 = rf.fit(X_train,y_train)\nxg1 = xg.fit(X_train,y_train)\ngbm1 = gbm.fit(X_train,y_train)\netc1 = etc.fit(X_train,y_train)\nknn1 = knn.fit(X_train,y_train)","210b87a2":"y_pred_dt = dt1.predict(X_test)\ny_pred_rf = rf1.predict(X_test)\ny_pred_xg= xg1.predict(X_test)\ny_pred_gbm= gbm1.predict(X_test)\ny_pred_etc= etc1.predict(X_test)\ny_pred_knn = knn1.predict(X_test)","a80fedea":"y_pred_dt_prob = dt1.predict_proba(X_test)\ny_pred_rf_prob = rf1.predict_proba(X_test)\ny_pred_xg_prob = xg1.predict_proba(X_test)\ny_pred_gbm_prob= gbm1.predict_proba(X_test)\ny_pred_etc_prob= etc1.predict_proba(X_test)\ny_pred_knn_prob= knn1.predict_proba(X_test)","af3d155d":"accuracy_score(y_test,y_pred_dt)","7fef6419":"accuracy_score(y_test,y_pred_rf)","52b571a7":"accuracy_score(y_test,y_pred_xg)","a98cb600":"accuracy_score(y_test,y_pred_gbm)","4683d2de":"accuracy_score(y_test,y_pred_etc)","496a8212":"accuracy_score(y_test,y_pred_knn)","755b9156":"confusion_matrix(y_test,y_pred_dt)","a7c7e74d":"sns.heatmap(confusion_matrix(y_test,y_pred_dt),annot=True)","4099b329":"confusion_matrix(y_test,y_pred_rf)","cb47b2bd":"sns.heatmap(confusion_matrix(y_test,y_pred_rf),annot=True)","3dc6f2a6":"confusion_matrix(y_test,y_pred_xg)","7829963a":"sns.heatmap(confusion_matrix(y_test,y_pred_xg),annot=True)","b5c9ea13":"confusion_matrix(y_test,y_pred_gbm)","443db03d":"sns.heatmap(confusion_matrix(y_test,y_pred_gbm),annot=True)","cac8a35a":"confusion_matrix(y_test,y_pred_etc)","03cb6324":"sns.heatmap(confusion_matrix(y_test,y_pred_etc),annot=True)","df758026":"confusion_matrix(y_test,y_pred_knn)","0a31bf98":"sns.heatmap(confusion_matrix(y_test,y_pred_knn),annot=True)","7c18f628":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_dt).flatten()","e87b0faf":"tn,fp,fn,tp","f938ef67":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_xg).flatten()","7b41e394":"tn,fp,fn,tp","aed62d7b":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_rf).flatten()","bb7f6589":"tn,fp,fn,tp","101a85af":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_gbm).flatten()","4900419a":"tn,fp,fn,tp","ed238f6a":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_etc).flatten()","1c7baa2a":"tn,fp,fn,tp","63721a56":"tn,fp,fn,tp= confusion_matrix(y_test,y_pred_knn).flatten()","00ccc76b":"tn,fp,fn,tp","7b4b634f":"fpr_dt, tpr_dt, thresholds = roc_curve(y_test,\n                                 y_pred_dt_prob[: , 1],\n                                 pos_label= 1\n                                 )\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for Decision Tree')\nax.plot(fpr_dt, tpr_dt, label = \"dt\")","1a07cc30":"fpr_xg, tpr_xg, thresholds = roc_curve(y_test,\n                                 y_pred_xg_prob[: , 1],\n                                 pos_label= 1\n                                 )\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for XGBoost')\nax.plot(fpr_xg, tpr_xg, label = \"xg\")","e8fbd209":"fpr_rf, tpr_rf, thresholds = roc_curve(y_test,\n                                 y_pred_rf_prob[: , 1],\n                                 pos_label= 1\n                                 )\n\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for Random Forest')\nax.plot(fpr_rf, tpr_rf, label = \"rf\")","08bd5468":"fpr_gbm, tpr_gbm,thresholds = roc_curve(y_test,\n                                 y_pred_gbm_prob[: , 1],\n                                 pos_label= 1\n                                 )\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for Gradient Boosting')\nax.plot(fpr_gbm, tpr_gbm, label = \"gbm\")","78603158":"fpr_etc, tpr_etc,thresholds = roc_curve(y_test,\n                                 y_pred_etc_prob[: , 1],\n                                 pos_label= 1\n                                 )\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for Extra Trees Classifier')\nax.plot(fpr_etc, tpr_etc, label = \"etc\")","c54f755d":"fpr_knn, tpr_knn,thresholds = roc_curve(y_test,\n                                 y_pred_knn_prob[: , 1],\n                                 pos_label= 1\n                                 )\nfig = plt.figure(figsize=(12,10))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\nax.set_xlabel('False Positive Rate')  # Final plot decorations\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for K Neighbors Classifier')\nax.plot(fpr_knn, tpr_knn, label = \"knn\")","725d4691":"#AUC of decision tree\nauc(fpr_dt,tpr_dt)","dd83f5fc":"#AUC of Random forest\nauc(fpr_rf,tpr_rf)","3d960531":"#AUC of Gradient boosting\nauc(fpr_gbm,tpr_gbm)","0796a429":"#AUC of XG Boost\nauc(fpr_xg,tpr_xg)","d18ab124":"#AUC of Extra Tree Classifier\nauc(fpr_etc, tpr_etc)","b7f4f703":"#AUC of KNeighbor Classifier\nauc(fpr_knn, tpr_knn)","a2daed7a":"p_dt,r_dt,f_dt,_ = precision_recall_fscore_support(y_test,y_pred_dt)","e35e4d9e":"p_dt,r_dt,f_dt,_","ba2827b4":"p_rf,r_rf,f_rf,_ = precision_recall_fscore_support(y_test,y_pred_rf)","0aa505d1":"p_rf,r_rf,f_rf,_","c3d10c50":"p_gbm,r_gbm,f_gbm,_ = precision_recall_fscore_support(y_test,y_pred_gbm)","17b76872":"p_gbm,r_gbm,f_gbm,_","86a6f8f6":"p_xg,r_xg,f_xg,_ = precision_recall_fscore_support(y_test,y_pred_xg)","6f9a3398":"p_xg,r_xg,f_xg,_","22e21d07":"p_etc,r_etc,f_etc,_ = precision_recall_fscore_support(y_test,y_pred_etc)","34709033":"p_etc,r_etc,f_etc,_","182095f7":"p_knn,r_knn,f_knn,_ = precision_recall_fscore_support(y_test,y_pred_knn)","7799bacb":"p_knn,r_knn,f_knn,_","13ae5e08":"models = [(dt, \"decisiontree\"), (rf, \"randomForest\"), (gbm, \"gradientboost\"),(xg,\"xgboost\"),(etc,\"extratreesclassifier\"),(knn,\"kneighborclassifier\")]\n#Plot the ROC curve\nfig = plt.figure(figsize=(24,20))          # Create window frame\nax = fig.add_subplot(111)   # Create axes\n# Also connect diagonals\nax.plot([0, 1], [0, 1], ls=\"--\")   # Dashed diagonal line\nax.set_xlabel('False Positive Rate')\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for models')\nax.set_xlim([0.0, 1.0])\nax.set_ylim([0.0, 1.0])\nAUC = []\nfor clf,name in models:\n    clf.fit(X_train,y_train)\n    y_pred_prob = clf.predict_proba(X_test)\n    fpr, tpr, thresholds = roc_curve(y_test,\n                                     y_pred_prob[: , 1],\n                                     pos_label= 1\n                                     )\n    AUC.append((auc(fpr,tpr)))\n    ax.plot(fpr, tpr, label = name)\n\n\n\nax.legend(loc=\"lower right\")\nplt.show()\nAUC","bec38e55":"#**Scaling all numerical features in X  using sklearn's StandardScaler class**","9c38aa83":"#**Get to know data**","b8816ffb":"#**Loading dataset**","26082cfe":"#**Obtaining true negative, false positive, false negative & true positive for all models**","b9451102":"###**Shows number of Malignant and Benign cases**","3b81abac":"#**Graph combining all models plotted above**","e0415255":"#**Confusion matrixx and plotting the same**","09162d57":"#**95% of variance explained by first 10 columns**","1db50e73":"#**Checking if any column has null values**","4b51d5c3":"#**Perform PCA**","3424f4ec":"#**Calculating accuracy**","f463fb27":"#**Calculating area under curve (AUC) for each model**","b08bdba1":"#**Split and shuffle data**","e0fc75c0":"#**Extracting first column and Maping values in 'y' (target) from 'M' and 'B' to 1 and 0 respectively**","5b0775dd":"#**Train data**","8dc62377":"###**Radius mean and perimeter mean have a linear relation**","52469896":"#**Import necessacy libraries**","bd405cd9":"#**Extracting 1 to 31 columns i.e total 30 columns**","fbadcb06":"#**assigning X with scaled data upto 10th feature**","24c761f9":"#**Getting probability values**","7939f723":"#**Drop columns having null values & unwanted columns**","e7530dd3":"#**Creating default classifiers**","e664f6b0":"#**Making predictions**","15e9bbd9":"#**Plotting ROC curve for each model**","ba4cd9ce":"###**The graph shows median values for Benign and Malignant cases. We can observe that median value of malignant cases is much higher compared to Benign cases**"}}