{"cell_type":{"a0d4b959":"code","b315c874":"code","9cbcda34":"code","b78fbe08":"code","7b4f9f3c":"code","10c6353e":"code","1f2f5bd4":"code","2fa05a78":"code","5812e276":"code","9e40a7d5":"code","064299d0":"code","9fbd9115":"code","79187bf1":"code","17a5d630":"code","84740a22":"code","f6c528d9":"code","f9ea9a60":"code","e1972ac4":"code","3c9a320a":"code","f6ccf233":"code","717124a4":"code","f4fd6b03":"code","ce073011":"code","b3140d1a":"code","cd74d785":"code","1825361f":"code","35c81501":"code","b20f8dbd":"code","304110c3":"code","51b2440b":"markdown","8959342b":"markdown","464871a7":"markdown","501f103c":"markdown","12b8b7d2":"markdown","976570be":"markdown","244f60bc":"markdown","2c08b6a2":"markdown","03d1cefd":"markdown","2b3a537e":"markdown","7fc465de":"markdown","49f40662":"markdown","2137b558":"markdown"},"source":{"a0d4b959":"# The librairie py2neo is used as driver to connect python to a Neo4j database\n!pip install py2neo","b315c874":"# import librairies\nimport numpy as np \nimport pandas as pd\nfrom py2neo import Graph\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport time","9cbcda34":"# load the data\ndf = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year'] = df['date_added'].dt.year\ndf['month'] = df['date_added'].dt.month\ndf['day'] = df['date_added'].dt.day\n\ndf.head()","b78fbe08":"#Connect to neo4j sandbox\nip=\"54.165.174.76\"\nport=\"34742\"\npwd=\"preparation-editor-explanation\"\ngraph = Graph(\"bolt:\/\/\"+ip+\":\"+port, auth=(\"neo4j\", pwd))","7b4f9f3c":"LOAD_DATA = False\n\ndef run_request(request,LOAD_DATA=False):\n    if (LOAD_DATA):\n        start_time = time.time()\n        print(graph.run(request)) \n        exec_time = time.time() - start_time\n        print(f'-- {exec_time} seconds --')","10c6353e":"# DELETE ALL NODES AND RELATIONSHIPS\nrequest_delete =\"\"\"\nMATCH (n) DETACH DELETE n;\n\"\"\"\nrun_request(request_delete,LOAD_DATA)","1f2f5bd4":"# CREATE MOVIES\n\nrequest =\"\"\"\nCREATE (m:Movie {id: {show_id},title:{title}})\nSET \nm.director = {director},\nm.country = {country},\nm.date_str = {date_added}, \nm.release_year = {release_year},\nm.rating = {rating},\nm.duration = {duration} ,\nm.listed_in = {listed_in} ,\nm.description = {description},\nm.cast={cast},\nm.year = {year},\nm.month = {month},\nm.day = {day},\nm.type = {type_movie}\n\"\"\"\nstart_time = time.time()\ncount=df.shape[0]\nif (LOAD_DATA):\n    for index, row in df.iterrows():\n        graph.run(request,\n                  show_id=row['show_id'],\n                  title=row['title'],\n                  director=None if pd.isnull(row['director']) else row['director'],\n                  country=None if pd.isnull(row['country']) else row['country'],\n                  date_added= None if pd.isnull(row['date_added']) else row['date_added'].strftime('%Y-%m-%d'),\n                  release_year=None if pd.isnull(row['release_year']) else row['release_year'],\n                  rating=None if pd.isnull(row['rating']) else row['rating'],          \n                  duration=None if pd.isnull(row['duration']) else row['duration'],\n                  listed_in=None if pd.isnull(row['listed_in']) else row['listed_in'],\n                  description=None if pd.isnull(row['description']) else row['description'],\n                  cast= None if pd.isnull(row['cast']) else row['cast'],\n                  year=None if pd.isnull(row['year']) else row['year'],\n                  month=None if pd.isnull(row['month']) else row['month'],\n                  day=None if pd.isnull(row['day']) else row['day'],\n                  type_movie=None if pd.isnull(row['type']) else row['type']\n                  )\n        if (index%500==0):\n            exec_time = time.time() - start_time\n            print(f'{index}\/{df.shape[0]} done ... -- {exec_time} seconds --')\n        \n    exec_time = time.time() - start_time\n    print(f' ... End ... -- {exec_time} seconds --')        ","2fa05a78":"# CREATE  PERSONS\nrequest =\"\"\"\nMATCH (m:Movie)\nWHERE m.cast IS NOT NULL\nWITH m\nUNWIND split(m.cast, ',') AS actor\nMERGE (p:Person {name: trim(actor)})\nMERGE (p)-[r:ACTED_IN]->(m);\n\"\"\"    \nrun_request(request,LOAD_DATA)   ","5812e276":"# CREATE CATEGORIES    \nrequest =\"\"\"    \nMATCH (m:Movie)\nWHERE m.listed_in IS NOT NULL\nWITH m\nUNWIND split(m.listed_in, ',') AS category\nMERGE (c:Category {name: trim(category)})\nMERGE (m)-[r:IN_CATEGORY]->(c);\n\"\"\"    \nrun_request(request,LOAD_DATA)","9e40a7d5":"# CREATE TYPE\nrequest =\"\"\" \nMATCH (m:Movie)\nWHERE m.type IS NOT NULL\nWITH m\nMERGE (t:Type {type: m.type})\nMERGE (m)-[r:TYPED_AS]->(t);\n\"\"\"\nrun_request(request,LOAD_DATA) ","064299d0":"# CREATE DIRECTOR\nrequest =\"\"\" \nMATCH (m:Movie)\nWHERE m.director IS NOT NULL\nWITH m\nMERGE (d:Person {name: m.director})\nMERGE (d)-[r:DIRECTED]->(m);\n\"\"\"\nrun_request(request,LOAD_DATA) ","9fbd9115":"# CREATE COUNTRIES\nrequest =\"\"\" \nMATCH (m:Movie)\nWHERE m.country IS NOT NULL\nMERGE (c:Country {name: trim(m.country)})\nMERGE (m)-[:WHERE]->(c);\n\"\"\"\nrun_request(request,LOAD_DATA) ","79187bf1":"# DELETE UNUSED PROPERTY\nrequest=\"\"\"\nMATCH(m:Movie)\nSET m.country = null, m.category = null,m.type = null , m.director = null , m.cast =null\n\"\"\"\nrun_request(request,LOAD_DATA) ","17a5d630":"# BUILD THE WORK_WITH RELATIONSHIP\n#request = \"\"\"\n#MATCH (p:Person)-[rel:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p2:Person)\n#MERGE (p)-[r:WORK_WITH]-(p2);\n#\"\"\"\n#run_request(request,LOAD_DATA) ","84740a22":"# Create Time Tree Index\nrequest=\"\"\"\nCREATE INDEX ON :Year(value);\n\"\"\"\nrun_request(request,LOAD_DATA)","f6c528d9":"# Create Years\nrequest=\"\"\"\nWITH range(2012, 2019) AS years, range(1,12) AS months\nFOREACH(year IN years |\n  CREATE (y:Year {value: year}));\n\"\"\"\nrun_request(request,LOAD_DATA)","f9ea9a60":"# Connect Years Sequentially\nrequest=\"\"\"\nMATCH (year:Year)\nWITH year\nORDER BY year.value\nWITH collect(year) AS years\nFOREACH(i in RANGE(0, size(years)-2) |\n    FOREACH(year1 in [years[i]] |\n        FOREACH(year2 in [years[i+1]] |\n            MERGE (year1)-[:NEXT]->(year2))));\n\"\"\"\nrun_request(request,LOAD_DATA)","e1972ac4":"request=\"\"\"\nMATCH (m:Movie)\nWITH m, m.year AS y\nMATCH (year:Year {value: y})\nMERGE (m)-[:CREATED_ON]->(year)\nRETURN m,year;\n\"\"\"\nrun_request(request,LOAD_DATA)","3c9a320a":"# Nodes Cardinalities\nresult = {\"label\": [], \"count\": []}\nfor label in graph.run(\"CALL db.labels()\").to_series():\n    query = f\"MATCH (:`{label}`) RETURN count(*) as count\"\n    count = graph.run(query).to_data_frame().iloc[0]['count']\n    result[\"label\"].append(label)\n    result[\"count\"].append(count)\nnodes_df = pd.DataFrame(data=result)\nnodes_df.sort_values(\"count\")\n\nnodes_df.plot(kind='bar', x='label', y='count', legend=None, title=\"Node Cardinalities\",figsize=(10,8))\nplt.yscale(\"log\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.plot(kind='bar', x=nodes_df['label'], y=nodes_df['count'], legend=None, title=\"Node Cardinalities\")\nplt.show()","f6ccf233":"# Relations Ship Cardinalities\nresult = {\"relType\": [], \"count\": []}\nfor relationship_type in graph.run(\"CALL db.relationshipTypes()\").to_series():\n    query = f\"MATCH ()-[:`{relationship_type}`]->() RETURN count(*) as count\"\n    count = graph.run(query).to_data_frame().iloc[0]['count']\n    result[\"relType\"].append(relationship_type)\n    result[\"count\"].append(count)\nrels_df = pd.DataFrame(data=result)\nrels_df.sort_values(\"count\")\n\nrels_df.plot(kind='bar', x='relType', y='count', legend=None, title=\"Relationship Cardinalities\",figsize=(10,8))\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()","717124a4":"\nrequest_top_5_actor=\"\"\"\nMATCH (p:Person)-[rel:ACTED_IN]->(m:Movie)\nWITH p,collect(m.title) as movies,count(*) as total\nRETURN  p.name, movies,total\nORDER BY total DESC\nLIMIT 5\n\"\"\"\ngraph.run(request_top_5_actor).to_data_frame().head()","f4fd6b03":"request=\"\"\"\nMATCH (c:Category)<-[rel:IN_CATEGORY]-(m:Movie)\nWITH c.name as category,count(*) as total\nRETURN  category,total\nORDER BY total DESC\n\"\"\"\nresult = graph.run(request).to_data_frame()\nresult.plot.barh(x='category', y='total',figsize=(10,8))\nplt.show()","ce073011":"\ndef who_be_present(I_AM,I_WANT_TO_MEET):\n    print(f\"I'm {I_AM}\")\n    print(f\"I want to meet {I_WANT_TO_MEET}\")\n    request=\"\"\"\n    MATCH (cs:Person { name: {pfrom} }),(ms:Person { name: {pto} }), p = shortestPath((cs)-[:ACTED_IN|:DIRECTED*]-(ms))\n    WHERE length(p)> 1 \n    RETURN p\n    \"\"\"\n    cursor = graph.run(request,pfrom=I_AM,pto=I_WANT_TO_MEET)\n    while cursor.forward():\n        print(cursor['p'])\n    print('\\n')\n        \n        \nI_AM='Brad Anderson'\nI_WANT_TO_MEET='Brad Pitt'\nwho_be_present(I_AM,I_WANT_TO_MEET)\n\nI_AM='Kanwaljeet Singh'\nI_WANT_TO_MEET='Nick Nolte'\nwho_be_present(I_AM,I_WANT_TO_MEET)\n","b3140d1a":"# SIMILARITY BETWEEN CATEGORY\nquery = \"\"\"\nMATCH (m:Movie)-[:IN_CATEGORY]->(cat:Category)\nWITH {item:id(cat), categories: collect(id(m))} as userData\nWITH collect(userData) as data\nCALL algo.similarity.overlap.stream(data)\nYIELD item1, item2, count1, count2, intersection, similarity\nRETURN algo.asNode(item1).name AS from, algo.asNode(item2).name AS to,\n       count1, count2, intersection, similarity\nORDER BY from,to DESC\n\"\"\"\nstart_time = time.time()\ncat_result = graph.run(query).to_data_frame()\nexec_time = time.time() - start_time\nprint(f'-- {exec_time} seconds --')\ncat_result.head()","cd74d785":"# Create the set of categories\nset1 = set(cat_result['to'].unique())\nset2 = set(cat_result['from'].unique())\ncategories = np.asarray(list(set1 | set2))\ncategories.sort()\nnbr_cat = categories.shape[0]\n\n# Create a dictionary key=categorie , value = index \ncat_index = np.arange(nbr_cat)\ndictionary = dict(zip(categories, cat_index))\n\n# Create a matrix of distance ( distance = 1 - similarity )\nmatrix = 1 - np.eye(nbr_cat)\nfor index, row in cat_result.iterrows():\n    matrix[dictionary[row['from']],dictionary[row['to']]]=1-row['similarity']\n    matrix[dictionary[row['to']],dictionary[row['from']]]=1-row['similarity']\n\n# Convert the matrix to a 1d condensed matrix\ncmatrix = []\nfor i in range(0,nbr_cat-1):\n    for j in range(i+1,nbr_cat):\n        cmatrix.append(matrix[i,j])","1825361f":"# Hierarchical clustering\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nlinkage = linkage(np.asarray(cmatrix))\n\nfig, axes = plt.subplots(1, 1, figsize=(12, 12))\ndendro  = dendrogram(linkage,labels=categories,orientation='right',ax=axes,color_threshold=0.5)\nplt.show()","35c81501":"# LINK PREDICTION BETWEEN MOVIES\nrequest_link_prediction_movie=\"\"\"\nMATCH (a:Movie {title:{ptitle}} )-[*2]-(b:Movie)\nWHERE a <> b AND a.title < b.title\nWITH DISTINCT a,b\nRETURN a.title as title, b.title as recommendation, algo.linkprediction.adamicAdar(a, b) AS score\nORDER BY score DESC\nLIMIT 10\n\"\"\"\nprint(graph.run(request_link_prediction_movie,ptitle='Stranger Things').to_data_frame())\nprint(graph.run(request_link_prediction_movie,ptitle=\"Ocean's Thirteen\").to_data_frame())\n","b20f8dbd":"request=\"\"\"\nMATCH (y:Year {value: 2012})-[:NEXT*0..10]->(y2:Year)<-[:CREATED_ON]-(f:Movie)-[r:WHERE]->(c:Country)\nRETURN y2.value as year,c.name as country,count(r) as count\nORDER BY year DESC, count DESC\n\"\"\"\nresult = graph.run(request).to_data_frame()\nfilter=result['country'][:10]","304110c3":"temp= result.loc[result['country'].isin(filter)]\ntemp=temp.set_index(['year', 'country'])\ntemp=temp.unstack(level=-1)\ntemp.fillna(0,inplace=True)\ntemp.plot(figsize=(12, 12)).legend(bbox_to_anchor=(1, 1))\nplt.show()","51b2440b":"# Explore Netflix Data with a Neo4j graph\n\n\nThe object of this notebook is \n* to test the interaction with Neo4j \n* and use the graph algorithms to find **similarities and recommendations**\n\nHere is the model of graph I have defined :\n![DBSchema.png](attachment:DBSchema.png)\n","8959342b":"# TOP 5 ACTOR - Greatest Number of films played ","464871a7":"### Connexion to the neo4j online sandbox ","501f103c":"![shortestPath.png](attachment:shortestPath.png)","12b8b7d2":"### Load the netflix data","976570be":"# Recommendation\n\n> These algorithms help determine the closeness of a pair of nodes. \n\n> Adamic Adar is a measure used to compute the closeness of nodes based on their shared neighbors.\n\nhttps:\/\/neo4j.com\/docs\/graph-algorithms\/current\/labs-algorithms\/adamic-adar\/\n\nx and y are nodes (Movies)\n* if N(x) is the set of nodes adjacent to x\n* if N(y) is the set of nodes adjacent to y\n\n$$ adamicAdar(x,y)=  \\sum_{ u \\in N(x) \\cap N(y)} \\frac{1}{log(N(u))}  $$\n","244f60bc":"# Shortest between 2 persons\n> If I want to meet someone, who should I ask to be present?\n","2c08b6a2":"# Load the data from the dataframe to neo4j graph DB\n\n> Remark : execution time can be long, about 6 minutes for requests as \"create movies\" or \"create persons\"\n\n> So execute it, only once  **put LOAD_DATA = false, to not load data again**\n\n\nI have tried the idea to not send a lot of queries through the net :\n* the first request load all the data as properties of the nodes Movies.\n* the other requests build the other nodes with these properties\n* at the end, the final request delete the unused properties\n\n","03d1cefd":"# Count by Category\n> The grand total does not equal the number of movies, because a movie can be in several categories","2b3a537e":"# Similarity between categories\n\nThe similarity between two categories is evaluated with the overlap of the movies sets that each category contains :\n> Overlap similarity measures overlap between two sets. It is defined as the size of the intersection of two sets, divided by the size of the smaller of the two sets.\nhttps:\/\/neo4j.com\/docs\/graph-algorithms\/current\/labs-algorithms\/overlap\/\n\n\n$$ O(A,B) = \\frac{|A \\cap B|}{min(|A|,|B|)}$$\n\n\nBased on this similarity, we can plot a dendogram","7fc465de":"# Graph cardinalities","49f40662":"# Configuration\nTo interact with Neo4J, you need a Sandbox Neo4j.\nA online sandbox can be launched for 3 days here https:\/\/neo4j.com\/sandbox-v3 , you just have to sign in.\n\nOnce your sandbox is launched, information for the connexion are available :\n\n![Neo4j%20Sandbox.png](attachment:Neo4j%20Sandbox.png)","2137b558":"# Evolution over year - Number of movies by countries"}}