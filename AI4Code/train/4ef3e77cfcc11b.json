{"cell_type":{"7eb6c5e1":"code","e03bffbf":"code","b27139ce":"code","db214c6a":"code","b7bdbb8e":"code","0c019c3d":"code","619e48bf":"code","3fd1ebef":"code","738327d6":"code","9785de9a":"code","a4475f7b":"code","40d168f6":"code","db50f390":"code","ab6dee48":"code","60d4ff52":"code","f4a6e2a9":"code","f922984d":"code","224ebf2e":"code","608a8481":"code","b87a2af9":"code","4268021d":"code","1ee090a9":"code","a18d6021":"code","beafaa75":"code","f36915d4":"code","93c4276e":"code","75a1013c":"code","e1286573":"code","863ac30e":"code","040e91c3":"code","ea78f86b":"code","1a8ff959":"code","80ddda68":"code","0ebf89d7":"code","9015c286":"code","fe6ac2d1":"code","e2ea1193":"code","481ecb0e":"markdown","01b05c08":"markdown","b5f0d80b":"markdown","7c530f5d":"markdown","821587cd":"markdown","187821d9":"markdown","3c067ecf":"markdown","e72cdae8":"markdown","5592ea82":"markdown","b489e1e7":"markdown","bece9c94":"markdown","c106f9c4":"markdown","503ec4d3":"markdown","93e589b4":"markdown","2b8b75df":"markdown","972a0945":"markdown","97f4beee":"markdown","3ee0bd07":"markdown","be45a0e0":"markdown","81d8ac18":"markdown","15375f43":"markdown","b75c2509":"markdown","658f5dcf":"markdown","c5e9d636":"markdown","8e4b7d78":"markdown","9e06849a":"markdown","1aa46657":"markdown","d60611a1":"markdown","0ad1438e":"markdown","6bb020c3":"markdown"},"source":{"7eb6c5e1":"# Importing Libraries\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport datetime","e03bffbf":"import folium\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DistrictWiseCaseMap.csv')\nm = folium.Map(\n    tiles='OpenStreetMap',\n    location=[24.25135,89.91671],\n    zoom_start=7,\n    zoom_control=True,\n    scrollWheelZoom=False\n)\nfor index,rows in df.iterrows():\n    if rows['lat'] and rows['lon']:\n        folium.Marker([rows['lat'], rows['lon']], tooltip=rows['District']+\" - \"+str(rows['Cases'])).add_to(m)\nfolium.LayerControl().add_to(m)\nm","b27139ce":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"])\ntotalCaseNumber = dataFromCsv['Case'].sum()\ntotalDeathNumber = dataFromCsv['Death'].sum()\ntotalRecoveredNumber = dataFromCsv['Recovered'].sum()\ntotalPatientNumber = totalCaseNumber - (totalDeathNumber+totalRecoveredNumber)\n\nslices = [totalPatientNumber,totalDeathNumber,totalRecoveredNumber]\nactivities = ['Patient','Death','Recovered']\n\ndataFrame = {\n    \"slices\" : slices,\n    \"activities\" : activities\n}\ndataset = pd.DataFrame(dataFrame)\nfig = px.pie(dataset,\n             values=\"slices\",\n             names=\"activities\",\n             template=\"presentation\",\n             labels = {'slices' : 'No Cases', 'activities' : 'Status'},\n             color_discrete_sequence=['#4169E1', '#DC143C', '#006400'],\n             width=800,\n             height=450,\n             hole=0.6)\nfig.update_traces(rotation=180, pull=0.05, textinfo=\"percent+label\")\npy.offline.iplot(fig)","db214c6a":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"])\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['<b>New Cases<\/b>','<b>Death<\/b>','<b>Recovered<\/b>','<b>Tested<\/b>'],\n                fill_color='blue',\n                align='center',\n                line_color='darkslategray',\n                font = dict(color = 'White', size = 18)),\n    cells=dict(values=[dataFromCsv['Case'].iloc[-1],dataFromCsv['Death'].iloc[-1], dataFromCsv['Recovered'].iloc[-1], dataFromCsv['Tested'].iloc[-1]],\n               fill_color='White',\n               line_color='darkslategray',\n               align='center',\n               height=40,\n               font = dict(color = 'Black', size = 24)))\n])\n\ndatetimeobject = datetime.datetime.strptime(str(dataFromCsv['Date'].iloc[-1]),'%Y-%m-%d %H:%M:%S')\nendDate = datetimeobject.strftime('%d-%b-%Y')\ntitle = \"Update On \" + str(endDate)\nfig.update_layout(\n    title={\n        'text': title,\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","b7bdbb8e":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"])\nfig = go.Figure(data=[\n    go.Bar(name='Positove', x=dataFromCsv['Date'], y=dataFromCsv['Case'], marker_color = '#4169E1'),\n    go.Bar(name='Death', x=dataFromCsv['Date'], y=dataFromCsv['Death'], marker_color = '#DC143C'),\n    go.Bar(name='Recovered', x=dataFromCsv['Date'], y=dataFromCsv['Recovered'], marker_color = '#006400')\n])\n# Change the bar mode\nfig.update_layout(barmode='stack',template=\"presentation\",title_text='Per Day Case Summary')\nfig.show()","0c019c3d":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\ndataFromCsv = dataFromCsv.cumsum()\ndataFromCsv = dataFromCsv.reset_index()\ndatetimeobject = datetime.datetime.strptime(str(dataFromCsv['Date'].iloc[1]),'%Y-%m-%d %H:%M:%S')\nstartDate = datetimeobject.strftime('%d-%b-%Y')\ndatetimeobject = datetime.datetime.strptime(str(dataFromCsv['Date'].iloc[-1]),'%Y-%m-%d %H:%M:%S')\nendDate = datetimeobject.strftime('%d-%b-%Y')\nxlabel = str(str(startDate) + ' UPTO ' + str(endDate))\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dataFromCsv.Date, y=dataFromCsv.Case,\n                    mode='lines',\n                    name='Case'))\nfig.add_trace(go.Scatter(x=dataFromCsv.Date, y=dataFromCsv.Death,\n                    mode='lines',\n                    name='Death'))\nfig.add_trace(go.Scatter(x=dataFromCsv.Date, y=dataFromCsv.Recovered,\n                    mode='lines', \n                    name='Recovered'))\nannotations = []\nannotations.append(dict(x=dataFromCsv['Date'].iloc[-1], y=dataFromCsv['Case'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsv['Case'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#4169E1'),\n                      showarrow=True,\n                      borderwidth = 1))\nannotations.append(dict(x=dataFromCsv['Date'].iloc[-1], y=dataFromCsv['Death'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsv['Death'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#DC143C'),\n                      showarrow=True,\n                      borderwidth = 1))\nannotations.append(dict(x=dataFromCsv['Date'].iloc[-1], y=dataFromCsv['Recovered'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsv['Recovered'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#FF7F50'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nfig.update_layout(title='Bangladesh Cases Summary Trend',\n                   xaxis_title=xlabel,\n                   yaxis_title='Number of Cases',\n                   template=\"presentation\",\n                   annotations=annotations)\n\nfig.show()","619e48bf":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\ndataset = dataFromCsv.cumsum()\n\npostitiveCases = int(dataset['Case'].iloc[-1])\nnegativeCases = int(dataset['Tested'].iloc[-1]) - postitiveCases\nslices = [postitiveCases,negativeCases]\nactivities = ['Covid-19 Positive','Covid-19 Negative']\ncols = ['#DC143C','#4169E1']\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"Test Results\", \"Test Results 24 Hour\"),\n    specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]]\n)\nfig.add_trace(\n    go.Pie(labels = activities,\n           values=slices,\n           marker_colors=cols,pull=0.05,textinfo=\"percent+label\"),\n           row=1, col=1)\n\ndataset = dataFromCsv.reset_index()\npostitiveCases = int(dataset['Case'].iloc[-1])\nnegativeCases = int(dataset['Tested'].iloc[-1]) - postitiveCases\nslices = [postitiveCases,negativeCases]\nactivities = ['Covid-19 Positive','Covid-19 Negative']\ncols = ['#DC143C','#4169E1']\n\nfig.add_trace(\n    go.Pie(labels = activities,\n           values=slices,\n           marker_colors=cols,pull=0.05,textinfo=\"percent+label\"),\n           row=1, col=2)\nfig.update_traces(rotation = 180,hole=0, hoverinfo=\"label+percent+value\",textfont_size=14)\nfig.update_layout(height=500, showlegend=True, template=\"presentation\")\n\nfig.show()","3fd1ebef":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv')\ndataFromCsv = dataFromCsv[1:]\npositiveRatio = round((dataFromCsv['Case'] \/ dataFromCsv['Tested'])*100,2)\n\npositiveRatioDF = pd.Series(positiveRatio,name=\"Ratio\")\ndatavsratio = pd.concat([dataFromCsv['Date'],positiveRatioDF], axis=1)\n\nfig = px.bar(datavsratio, x='Date', y='Ratio',\n             hover_data=['Date', 'Ratio'],\n             color='Ratio',\n             color_continuous_scale= \"Reds\",\n             labels={'Ratio' : 'Positive Case Ratio(%)'},\n             template=\"ggplot2\",\n             height = 600,\n             title='Tests Vs Positove Cases Ratio Per Day')\nfig.show()","738327d6":"CoronaTestCaseNo = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-TestResultsBD.csv')\niedrcCases = int(CoronaTestCaseNo['Lab'].iloc[1])\notherCases = int(CoronaTestCaseNo['OLab'].iloc[1])\nslices = [iedrcCases,otherCases]\nactivities = ['In IEDCR','In Other Labs']\ncols = ['#FF6347','#000080']\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"Tests Conducted Total\", \"Tests Conducted 24 Hour\"),\n    specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]]\n)\nfig.add_trace(\n    go.Pie(labels = activities,\n           values=slices,\n           marker_colors=['#FF6347','#000080'],pull=0.05, textinfo=\"percent+label\"),\n           row=1, col=1)\n\niedrcCases = int(CoronaTestCaseNo['Lab'].iloc[0])\notherCases = int(CoronaTestCaseNo['OLab'].iloc[0])\nslices = [iedrcCases,otherCases]\nactivities = ['In IEDCR','In Other Labs']\ncols = ['#FF6347','#000080']\n\nfig.add_trace(\n    go.Pie(labels = activities,\n           values=slices,\n           marker_colors=['#FF6347','#000080'],pull=0.05, textinfo=\"percent+label\"),\n           row=1, col=2)\nfig.update_traces(rotation = 180,hole=.4, hoverinfo=\"label+percent\",textfont_size=15)\nfig.update_layout(height=500, showlegend=True, template=\"presentation\")\n\nfig.show()","9785de9a":"caseBangladesh = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv')\nresult = caseBangladesh.sort_values(['Tested'], ascending= True)\nfig = px.area(dataFromCsv, x=\"Tested\", y=\"Case\", \n              template=\"presentation\", \n              labels = {'Tested': 'Total Test', 'Case': 'Positive Cases'},\n              title='Tested Vs Positive Cases Trend',\n              color_discrete_sequence=['#4169E1'])\n\nfig.update_traces(textposition='top left',mode='lines+markers')\nfig.show()","a4475f7b":"df = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DistrictWiseCaseMap.csv')\ncaseBangladesh = df.groupby(['Division']).agg('sum')\ncaseBangladesh = caseBangladesh.reset_index()\ncaseBangladesh = caseBangladesh.sort_values(by=['Cases'], ascending=False)\nfig = make_subplots(\n    rows=1, cols=2,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"domain\"}]]\n)\nfig.add_trace(\n    go.Table(\n        header=dict(\n            values=[str(caseBangladesh.columns[0]),str(caseBangladesh.columns[1])],\n            font=dict(size=15),\n            align=\"center\"\n        ),\n        cells=dict(\n            values=[caseBangladesh[k].tolist() for k in caseBangladesh.columns[0:2]],\n            align = \"center\")\n    ),\n    row=1, col=1\n)\n\nslices=caseBangladesh['Cases'].tolist()\nactivities=caseBangladesh['Division'].tolist()\nfig.add_trace(\n    go.Pie(labels = activities,\n           values=slices,pull=0.05,hole=.5,textinfo=\"percent\", rotation=210),\n           row=1, col=2)\n# fig.update_traces(rotation = 180,hole=0.5, hoverinfo=\"label+percent+value\",textfont_size=13)\nfig.update_layout(height=500, \n                  showlegend=True, \n                  template=\"presentation\",\n                  title_text=\"Division Wise Covid-19 Cases\")\nfig.show()\n\n","40d168f6":"caseBangladesh = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DhakaCityArea.csv')\ncaseBangladesh\nresult = caseBangladesh.sort_values(['Number'], ascending= True)\n# print(result)\nnumberOfCases = result[-20:]\nfig = px.bar(numberOfCases, x='Area', y='Number',\n             hover_data=['Area', 'Number'],\n             labels={'Area' : 'Affected Area', 'Number' : 'Number of Cases' },\n             template=\"xgridoff\",\n             text='Number',\n             title=\"Dhaka City Area Wise Covid-19 Cases(Top 20)\",\n             height = 600)\nfig.show()","db50f390":"caseBangladesh = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DhakaCityArea.csv')\ncaseBangladesh\nresult = caseBangladesh.sort_values(['Number'], ascending= True)\nnumberOfCases = result[0:20]\nfig = px.bar(numberOfCases, x='Area', y='Number',\n             hover_data=['Area', 'Number'],\n             labels={'Area' : 'Affected Area', 'Number' : 'Number of Cases' },\n             template=\"xgridoff\",\n             text='Number',\n             title=\"Dhaka City Area Wise Covid-19 Cases(Bottom 20)\",\n             range_y=[0,10],\n             height = 600)\nfig.show()","ab6dee48":"caseBangladesh = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DistrictWiseCaseMap.csv')\ndhaka=caseBangladesh[caseBangladesh['Division']=='Dhaka']\nfig = px.treemap(dhaka, path=['District', 'Cases'], values='Cases',\n                  color='Cases', hover_data=['District'],\n                  color_continuous_scale='Reds',\n                  color_continuous_midpoint=np.average(dhaka['Cases'], weights=dhaka['Cases']))\nfig.update_layout(height=500, \n                  showlegend=True, \n                  template=\"presentation\",\n                  title_text=\"Dhaka Division Covid-19 Cases\")\nfig.show()\n","60d4ff52":"caseBangladesh = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-DistrictWiseCaseMap.csv')\nChattogram=caseBangladesh[caseBangladesh['Division']=='Chattogram']\nfig = px.treemap(Chattogram, path=['District', 'Cases'], values='Cases',\n                  color='Cases', hover_data=['District'],\n                  color_continuous_scale='Reds',\n                  color_continuous_midpoint=np.average(Chattogram['Cases'], weights=Chattogram['Cases']))\nfig.update_layout(height=500, \n                  showlegend=True, \n                  template=\"presentation\",\n                  title_text=\"Chattogram Division Covid-19 Cases\")\nfig.show()","f4a6e2a9":"gender = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-GenderWiseCase.csv')\nfig = px.pie(gender, values='percentage', \n             names='gender',\n             hole=.5,\n             color_discrete_sequence=px.colors.sequential.RdBu, \n             template=\"presentation\")\nfig.update_layout(title=\"Gender Wise Covid-19 Cases\")\nfig.show()\n\n","f922984d":"gender = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-AgeWiseCase.csv')\nfig = px.pie(gender, values='percentage', \n             names='age_range',\n             hole=.5,\n             color_discrete_sequence=px.colors.sequential.RdBu,\n             template=\"presentation\")\nfig.update_layout(title=\"Age Wise Covid-19 Cases\")\nfig.show()","224ebf2e":"# Read Data from dataset\ndataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\naccumulated_count_bd = dataset.cumsum()\naccumulated_count_bd = accumulated_count_bd.reset_index()\n\n\ndataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-WorldData.csv', parse_dates=[\"date\"])\ncontinents = ['United States','Italy','India', 'Russia', 'Brazil']\ndataFromCsv = dataFromCsv[dataFromCsv.location.isin(continents)]\ndataFromCsv = dataFromCsv.sort_values(['date'], ascending=True)\ndataFromCsv = dataFromCsv[25:]\n\ndataFromCsvUS = dataFromCsv[dataFromCsv['location'] == 'United States']\ndataFromCsvUS = dataFromCsvUS[21:]\n\ndataFromCsvItaly = dataFromCsv[dataFromCsv['location'] == 'Italy']\ndataFromCsvItaly = dataFromCsvItaly[31:]\n\ndataFromCsvIndia = dataFromCsv[dataFromCsv['location'] == 'India']\ndataFromCsvIndia = dataFromCsvIndia[30:]\n\ndataFromCsvRussia = dataFromCsv[dataFromCsv['location'] == 'Russia']\ndataFromCsvRussia = dataFromCsvRussia[30:]\n\ndataFromCsvBrazil = dataFromCsv[dataFromCsv['location'] == 'Brazil']\ndataFromCsvBrazil = dataFromCsvBrazil[30:]","608a8481":"annotations = []\nfig = go.Figure()\n\nnumOfDays = [i for i in range(1, len(dataFromCsvUS.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvUS.total_cases,\n                    mode='lines',\n                    name='US'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvUS['total_cases'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvUS['total_cases'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#4169E1'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvItaly.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvItaly.total_cases,\n                    mode='lines',\n                    name='Italy'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvItaly['total_cases'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvItaly['total_cases'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#FFA500'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(accumulated_count_bd)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=accumulated_count_bd.Case,\n                    mode='lines', \n                    name='Bangladesh'))\nannotations.append(dict(x=numOfDays[-1], y=accumulated_count_bd['Case'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(accumulated_count_bd['Case'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#228B22'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvIndia.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvIndia.total_cases,\n                    mode='lines',\n                    name='India'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvIndia['total_cases'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvIndia['total_cases'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvRussia.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvRussia.total_cases,\n                    mode='lines',\n                    name='Russia'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvRussia['total_cases'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvRussia['total_cases'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvBrazil.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvBrazil.total_cases,\n                    mode='lines',\n                    name='Brazil'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvBrazil['total_cases'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvBrazil['total_cases'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nfig.update_layout(title=\"Positive Cases Trend\",\n                  xaxis_title='No of Days',\n                  yaxis_title='Number of Cases',\n                  template=\"presentation\",\n                  annotations=annotations)\n\nfig.show()","b87a2af9":"annotations = []\nnumOfDays = [i for i in range(1, len(dataFromCsvUS.total_cases)+1)]\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvUS.total_deaths,\n                    mode='lines',\n                    name='US'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvUS['total_deaths'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvUS['total_deaths'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#4169E1'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvItaly.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvItaly.total_deaths,\n                    mode='lines',\n                    name='Italy'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvItaly['total_deaths'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvItaly['total_deaths'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#FFA500'),\n                      showarrow=True,\n                      borderwidth = 1))\nnumOfDays = [i for i in range(1, len(accumulated_count_bd)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=accumulated_count_bd.Death,\n                    mode='lines', \n                    name='Bangladesh'))\nannotations.append(dict(x=numOfDays[-1], y=accumulated_count_bd['Death'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(accumulated_count_bd['Death'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#228B22'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvIndia.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvIndia.total_deaths,\n                    mode='lines',\n                    name='India'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvIndia['total_deaths'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvIndia['total_deaths'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvRussia.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvRussia.total_deaths,\n                    mode='lines',\n                    name='Russia'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvRussia['total_deaths'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvRussia['total_deaths'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nnumOfDays = [i for i in range(1, len(dataFromCsvBrazil.total_cases)+1)]\nfig.add_trace(go.Scatter(x=numOfDays, y=dataFromCsvBrazil.total_deaths,\n                    mode='lines',\n                    name='Brazil'))\nannotations.append(dict(x=numOfDays[-1], y=dataFromCsvBrazil['total_deaths'].iloc[-1],\n                      xanchor='left', yanchor='top',\n                      text=' {}'.format(dataFromCsvBrazil['total_deaths'].iloc[-1]),\n                      font=dict(family='Arial',\n                                size=18,\n                                color='#8B0000'),\n                      showarrow=True,\n                      borderwidth = 1))\n\nfig.update_layout(title=\"Death Cases Trend\",\n                  xaxis_title='No of Days',\n                  yaxis_title='Death Cases',\n                  template=\"presentation\",\n                  annotations=annotations)\n\nfig.show()","4268021d":"dataFromCsv = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-WorldData.csv', parse_dates=[\"date\"])\n# print(dataFromCsv)\ndataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\naccumulated_count_bd = dataset.cumsum()\naccumulated_count_bd = accumulated_count_bd.reset_index()\n\ndataFromCsvUS = dataFromCsv[dataFromCsv['location'] == 'United States']\ndataFromCsvItaly = dataFromCsv[dataFromCsv['location'] == 'Italy']\ndataFromCsvIndia = dataFromCsv[dataFromCsv['location'] == 'India']\ndataFromCsvPakistan = dataFromCsv[dataFromCsv['location'] == 'Pakistan']\ndataFromCsvRussia = dataFromCsv[dataFromCsv['location'] == 'Russia']\n# print(dataFromCsvIndia)\n\ndataFromCsvItaly[['total_tests']] = dataFromCsvItaly[['total_tests']].fillna(method='bfill')\ndataFromCsvUS[['total_tests']] = dataFromCsvUS[['total_tests']].fillna(method='bfill')\ndataFromCsvIndia[['total_tests']] = dataFromCsvIndia[['total_tests']].fillna(method='bfill')\ndataFromCsvPakistan[['total_tests']] = dataFromCsvPakistan[['total_tests']].fillna(method='bfill')\ndataFromCsvRussia[['total_tests']] = dataFromCsvRussia[['total_tests']].fillna(method='bfill')\n\ndataFromCsvItaly[['total_tests']]= dataFromCsvItaly[['total_tests']].fillna(method='ffill')\ndataFromCsvUS[['total_tests']] = dataFromCsvUS[['total_tests']].fillna(method='ffill')\ndataFromCsvIndia[['total_tests']] = dataFromCsvIndia[['total_tests']].fillna(method='ffill')\ndataFromCsvPakistan[['total_tests']] = dataFromCsvPakistan[['total_tests']].fillna(method='ffill')\ndataFromCsvRussia[['total_tests']] = dataFromCsvRussia[['total_tests']].fillna(method='ffill')\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dataFromCsvUS.date, y=dataFromCsvUS.total_tests,\n                    mode='lines',\n                    name='US'))\nfig.add_trace(go.Scatter(x=dataFromCsvItaly.date, y=dataFromCsvItaly.total_tests,\n                    mode='lines',\n                    name='Italy'))\nfig.add_trace(go.Scatter(x=accumulated_count_bd.Date, y=accumulated_count_bd.Tested,\n                    mode='lines', \n                    name='Bangladesh'))\nfig.add_trace(go.Scatter(x=dataFromCsvIndia.date, y=dataFromCsvIndia.total_tests,\n                    mode='lines',\n                    name='India'))\nfig.add_trace(go.Scatter(x=dataFromCsvPakistan.date, y=dataFromCsvPakistan.total_tests,\n                    mode='lines', \n                    name='Pakistan'))\nfig.add_trace(go.Scatter(x=dataFromCsvRussia.date, y=dataFromCsvRussia.total_tests,\n                    mode='lines', \n                    name='Russia'))\nfig.update_layout(title='Number of Tests',\n                   xaxis_title='Date',\n                   yaxis_title='Test Number',\n                   template=\"presentation\")\n\nfig.show()\n","1ee090a9":"symptoms={'symptom':['Fever',\n        'Dry cough',\n        'Fatigue',\n        'Sputum production',\n        'Shortness of breath',\n        'Muscle pain',\n        'Sore throat',\n        'Headache',\n        'Chills',\n        'Nausea or vomiting',\n        'Nasal congestion',\n        'Diarrhoea',\n        'Haemoptysis',\n        'Conjunctival congestion'],'percentage':[87.9,67.7,38.1,33.4,18.6,14.8,13.9,13.6,11.4,5.0,4.8,3.7,0.9,0.8]}\n\nsymptoms=pd.DataFrame(data=symptoms,index=range(14))\n# symptoms","a18d6021":"fig = px.bar(symptoms[['symptom', 'percentage']].sort_values('percentage', ascending=False), \n             y=\"percentage\", x=\"symptom\", color='symptom', \n             log_y=True, template='ggplot2', title='Symptom of  Coronavirus')\nfig.show()","beafaa75":"fig = px.pie(symptoms,\n             values=\"percentage\",\n             names=\"symptom\",\n             template=\"ggplot2\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\",)\nfig.update_layout(\n    title={\n        'text': \"Symptom of  Coronavirus\",\n        'y':.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","f36915d4":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\ndataset\ndataset = dataset.resample('D').first().fillna(0).cumsum()\ndataset = dataset[22:]\naccumulated_count = dataset.cumsum()\nx = np.arange(len(dataset)).reshape(-1, 1)\ny = dataset.values\nregressor = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nregressor.fit(x, y)\ntest = np.arange(len(dataset)+7).reshape(-1, 1)\npred = regressor.predict(test)\nprediction = pred.round().astype(int)\n# print(prediction)\nimport datetime as datetime\nimport dateutil.parser\nweek = [dataset.index[0] + timedelta(days=i) for i in range(len(prediction))]\ndt_idx = pd.DatetimeIndex(week)\npredicted_count = pd.Series(dt_idx,name=\"Date\")\n# print(predicted_count)\ndataFrmae = pd.DataFrame(prediction, columns = ['Case','Day','Death','Recovered','Tested'])\nprediction_value = pd.concat([dataFrmae,predicted_count], axis=1)\nprediction_value = prediction_value.drop(['Day'], axis=1)\nprediction_value.set_index('Date',inplace = True)\naccumulated_count = accumulated_count.drop(['Day'], axis=1)\nprediction_value.index = pd.to_datetime(prediction_value.index)\nupdateDateTime = datetime.datetime.now().strftime('%Y-%m-%d')\nprediction_value = prediction_value[prediction_value.index >= dateutil.parser.parse(updateDateTime)]\nprediction_value = prediction_value.reset_index()\nformatted_df = prediction_value[\"Date\"].dt.strftime(\"%d-%b-%Y\")\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['<b>Date<\/b>','<b>Case<\/b>','<b>Death<\/b>','<b>Recovered<\/b>', '<b>Tests Conducted<\/b>'],\n                fill_color='blue',\n                align='center',\n                line_color='darkslategray',\n                font = dict(color = 'White', size = 18)),\n    cells=dict(values=[formatted_df.values,prediction_value.Case,prediction_value.Death, prediction_value.Recovered, prediction_value.Tested],\n               fill_color='White',\n               line_color='darkslategray',\n               align='center',\n               height=40,\n               font = dict(color = 'Black', size = 18)))\n])\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","93c4276e":"fig = go.Figure(go.Bar(x=prediction_value.Date, \n                       y=prediction_value.Tested, \n                       name='Test Cases',\n                       text=prediction_value.Tested,\n                       textposition='auto'))\nfig.add_trace(go.Bar(x=prediction_value.Date, \n                     y=prediction_value.Case, \n                     name='Positive Cases',\n                     text=prediction_value.Case,\n                     textposition='auto',\n                     marker_color='indianred'))\n\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions Total- (Test Cases vs Positive Cases)\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()\n","75a1013c":"fig = go.Figure(go.Bar(x=prediction_value.Date, \n                       y=prediction_value.Recovered, \n                       name='Recovery Cases',\n                       text=prediction_value.Recovered,\n                       textposition='auto',\n                       marker_color='#FF7F50'))\nfig.add_trace(go.Bar(x=prediction_value.Date, \n                     y=prediction_value.Death, \n                     name='Death Cases',\n                     text=prediction_value.Death,\n                     textposition='auto',\n                     marker_color='#DC143C'))\n\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions Total-(Recovery Cases vs Death Cases)\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","e1286573":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\ndataset\n# print(dataset)\ndataset = dataset.resample('D').first().fillna(0).cumsum()\n# print(dataset)\ndataset = dataset[22:]\naccumulated_count = dataset.cumsum()\nmodel_case = ARIMA(dataset['Case'].values, order=(2, 2, 1))\nfit_model_case = model_case.fit(trend='c', full_output=True, disp=True)\nfit_model_case.summary()\nforcast_case = fit_model_case.forecast(steps=7)\npred_case = forcast_case[0].tolist()\npred_case = [round(num) for num in pred_case]","863ac30e":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\ndataset\ndataset = dataset.resample('D').first().fillna(0).cumsum()\ndataset = dataset[22:]\n# print(dataset['Death'].values)\nmodel_case = ARIMA(dataset['Death'].values, order=(2, 2, 1))\nfit_model_case = model_case.fit(trend='c', full_output=True, disp=True)\nfit_model_case.summary()\nforcast_case = fit_model_case.forecast(steps=7)\npred_death = forcast_case[0].tolist()\npred_death = [round(num) for num in pred_death]","040e91c3":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\n# print(dataset.columns)\ndataset = dataset.resample('D').first().fillna(0).cumsum()\ndataset = dataset[22:]\n# print(dataset['Recovered'].values)\nmodel_case = ARIMA(dataset['Recovered'].values, order=(2, 2, 1))\nfit_model_case = model_case.fit(trend='c', full_output=True, disp=True)\nfit_model_case.summary()\nforcast_case = fit_model_case.forecast(steps=7)\npred_Recovered = forcast_case[0].tolist()\npred_Recovered = [round(num) for num in pred_Recovered]","ea78f86b":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv',parse_dates=[\"Date\"], index_col='Date')\n# print(dataset.columns)\ndataset = dataset.resample('D').first().fillna(0).cumsum()\ndataset = dataset[22:]\n# dataset = dataset.reset_index()\nmodel_case = ARIMA(dataset['Tested'].values, order=(3, 2, 1))\nfit_model_case = model_case.fit(trend='c', full_output=True, disp=True)\nfit_model_case.summary()\nforcast_case = fit_model_case.forecast(steps=7)\npred_test = forcast_case[0].tolist()\npred_test = [round(num) for num in pred_test]\n# pd.DataFrame(pred_test)","1a8ff959":"data = {\n    \"Case\" : pred_case,\n    \"Death\" : pred_death,\n    \"Recovered\": pred_Recovered,\n    \"Tested\" : pred_test\n}\ndataFrame = pd.DataFrame(data)\n# print(dataFrame)\nweek = [dataset.index[dataset.shape[0]-1] + timedelta(days=i) for i in range(1,8)]\ndt_idx = pd.DatetimeIndex(week)\npredicted_count = pd.Series(dt_idx,name=\"Date\")\nprediction_value = pd.concat([dataFrame,predicted_count], axis=1)\nprediction_value.set_index('Date',inplace = True)\n#print(prediction_value)\nprediction_value = prediction_value.reset_index()\nformatted_df = prediction_value[\"Date\"].dt.strftime(\"%d-%b-%Y\")\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=['<b>Date<\/b>','<b>Case<\/b>','<b>Death<\/b>','<b>Recovered<\/b>', '<b>Tests Conducted<\/b>'],\n                fill_color='blue',\n                align='center',\n                line_color='darkslategray',\n                font = dict(color = 'White', size = 18)),\n    cells=dict(values=[formatted_df.values,prediction_value.Case,prediction_value.Death, prediction_value.Recovered, prediction_value.Tested],\n               fill_color='White',\n               line_color='darkslategray',\n               align='center',\n               height=40,\n               font = dict(color = 'Black', size = 18)))\n])\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()","80ddda68":"\nfig = go.Figure(go.Bar(x=prediction_value.Date, \n                       y=prediction_value.Tested, \n                       name='Test Cases',\n                       text=prediction_value.Tested,\n                       textposition='auto'))\nfig.add_trace(go.Bar(x=prediction_value.Date,\n                     y=prediction_value.Case,\n                     name='Positive Cases',\n                     text=prediction_value.Case,\n                     textposition='auto',\n                     marker_color='indianred'))\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions Total- (Test Cases vs Positive Cases)\",\n#         'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","0ebf89d7":"fig = go.Figure(go.Bar(x=prediction_value.Date, \n                       y=prediction_value.Recovered, \n                       name='Recovery Cases',\n                       text=prediction_value.Recovered,\n                       textposition='auto',\n                       marker_color='#FF7F50'))\nfig.add_trace(go.Bar(x=prediction_value.Date, \n                     y=prediction_value.Death, \n                     name='Death Cases',\n                     text=prediction_value.Death,\n                     textposition='auto',\n                     marker_color='#DC143C'))\n\n#DC143C\n#FF7F50\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\nfig.update_layout(\n    title={\n        'text': \"Next 7 days Predictions Total-(Recovery Cases vs Death Cases)\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","9015c286":"df_tc=pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv') \nbd_cases = []\nbd_tested=[]\nbd_dayno=[]\n\nfor rate in df_tc.Case:\n    bd_cases.append(rate) #extracting confirm cases as an array\n\nfor rate in df_tc.Tested:\n    bd_tested.append(rate) #extracting conducted  as an array\n\nfor rate in df_tc.Day:\n    bd_dayno.append(rate) #extracting conducted  as an array\n    \n    \nbd_cases=bd_cases[20:]\nbd_tested=bd_tested[20:]\nbd_dayno=bd_dayno[20:]\n\nbd_tested_np=np.array(bd_tested).reshape(-1,1) #converting array as numpy array \n\nX_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(bd_tested_np, bd_cases, test_size=0.20, shuffle=False)\ncases_in_future = 5\n#future_forcast = np.array([bd_tested.append(bd_tested[-1]+100) for i in range(days_in_future)]).reshape(-1, 1)\nfuture_forcast=bd_tested\n# future_forcast.append(3600)\nfor i in range(cases_in_future):\n    future_forcast.append(int(future_forcast[-1])+100)\n    \nfuture_forcast=np.array(future_forcast).reshape(-1,1)\n\nbayesian_poly = PolynomialFeatures(degree=1)\nbayesian_poly_X_train_confirmed = bayesian_poly.fit_transform(X_train_confirmed)\nbayesian_poly_X_test_confirmed = bayesian_poly.fit_transform(X_test_confirmed)\nbayesian_poly_future_forcast = bayesian_poly.fit_transform(future_forcast)\ntype(bayesian_poly_X_test_confirmed)\n\n# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian = BayesianRidge(fit_intercept=False)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=2)\nbayesian_search.fit(bayesian_poly_X_train_confirmed, y_train_confirmed)\n\nbayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(bayesian_poly_future_forcast)\n\nfuture_case=[float(v) for v in bayesian_pred]\n\nfuture_forcast=future_forcast.tolist()\ndata = {\n    \"Test_Cases\" : future_forcast[-5:],\n    \"Positive_Cases\" : future_case[-5:],\n    \n}\ndataFrame = pd.DataFrame(data)\ndataFrame.Positive_Cases=dataFrame.Positive_Cases.astype(int)\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=[\"<b>If tomorrow's conducted test<\/b>\",'<b>Positive Case will be<\/b>'],\n                fill_color='blue',\n                align='center',\n                line_color='darkslategray',\n                font = dict(color = 'White', size = 18)),\n    cells=dict(values=[dataFrame.Test_Cases,dataFrame.Positive_Cases],\n               fill_color='White',\n               line_color='darkslategray',\n               align='center',\n               height=40,\n               font = dict(color = 'Black', size = 18)))\n])\nfig.update_layout(\n    title={\n        'text': \"Tomorrow's Positive Case Predictions Against Test Cases\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()\n","fe6ac2d1":"poly = PolynomialFeatures(degree=1)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)\nbd_cases=np.array(bd_cases).reshape(-1, 1)\npoly_bd_confirmed = poly.fit_transform(bd_cases)\n\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\n\nfuture_case=[float(v) for v in linear_pred]\n\n# future_forcast=future_forcast.tolist()\ndata = {\n    \"Test_Cases\" : future_forcast[-5:],\n    \"Positive_Cases\" : future_case[-5:],\n    \n}\ndataFrame = pd.DataFrame(data)\ndataFrame.Positive_Cases=dataFrame.Positive_Cases.astype(int)\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=[\"<b>If tomorrow's conducted test<\/b>\",'<b>Positive Case will be<\/b>'],\n                fill_color='blue',\n                align='center',\n                line_color='darkslategray',\n                font = dict(color = 'White', size = 18)),\n    cells=dict(values=[dataFrame.Test_Cases,dataFrame.Positive_Cases],\n               fill_color='White',\n               line_color='darkslategray',\n               align='center',\n               height=40,\n               font = dict(color = 'Black', size = 20)))\n])\n\nfig.update_layout(\n    title={\n        'text': \"Tomorrow's Positive Case Predictions Against Test Cases\",\n        'y':.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()\n","e2ea1193":"dataset = pd.read_csv('..\/input\/bangladesh-covid19-data-may-21-2020\/covid-19-PerDayCaseSummaryBD.csv', parse_dates = ['Date'])\ndataset\ntestVSCase = dataset[['Tested','Case']].sort_values('Tested')\ntest = testVSCase.iloc[:,:-1].values\ncase = testVSCase.iloc[:,1].values\nfrom sklearn.model_selection import train_test_split\n\ntest_train,test_test, case_train, case_test = train_test_split(test,case, test_size = 0.2, random_state = 1)\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(test_train,case_train)\ncase_pred = regressor.predict(test_test)\n# print(case_pred)\n# try:\n#     test = int(input(\"Enter Number of Tests Made: \"))\n#     case_pred = int(regressor.predict([[test]])[0])\n#     if case_pred < 0:\n#         case_pred = 0        \n#     print(\"Possible Positive Cases   : {}\".format(case_pred))\n# except ValueError:\n#     print(\"Invalid Test Number\")","481ecb0e":"***We can see that among 111454 tests, 13134 cases were found Covid-19 positive and 98320 were found negative. Our average positive rate has increased to 13.3% within last 1 week.<br>Today the positive cases ratio higher than the average.***","01b05c08":"### Corona Symptoms:\n***","b5f0d80b":"***This is the major problem of our country. We are not testing enough people here. To get the exact scenario of our country we need to increase our testing facilities as soon as possible. If we do not do enough testing it would be difficult to make any prediction models to predict the exact scenario of the future.***","7c530f5d":"### Bangladesh Covid-19 Cases Summary:\n***","821587cd":"***At the beginning, all the Covid-19 tests was done by IEDCR. But this testing facilities are now expanded to other Labs. Currently only 7% of the total tests are conducted by IEDCR***","187821d9":"***This graph shows the percentage of the positive Covid-19 cases against the total tests made each day. At 20th April 2020 the ratio was the highest. That day 2779 tests were made and among them 17.7% (492) were found Covid-19 positive.Today 21th May 2020 we recorded second highest positive rate 17.3%***","3c067ecf":"# ![](https:\/\/media.giphy.com\/media\/MCAFTO4btHOaiNRO1k\/giphy.gif)","e72cdae8":"### Scenario Of Chattogram Division:\n***","5592ea82":"#### **Coronaviruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19.COVID-19 is the infectious disease caused by the most recently discovered coronavirus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019.**\n* [Source](https:\/\/www.who.int\/news-room\/q-a-detail\/q-a-coronaviruses)","b489e1e7":"**ARIMA Algorithm**","bece9c94":"***Here we can see the comperative analysis of Bangladesh with USA, Italy and neighbour country India based on the number of days after the first Covid-19 positive case found. Bangladesh is already fighting with Covid-19 for more than 2 months. At this moment the number of cases of USA and Italy was growing exponentially. But our scenario is worse than India. At this moment India had close to six thousands patients where we already have more than thirteen thousands patients. Suddenly the situation of Brazil and Russia is getting worse day by day***","c106f9c4":"**Bayesian Ridge Polynomial Regression**","503ec4d3":"***In Bangladesh people aging between 21-30 years are mostly found covid-19 positive. People aging between 21-40 are mostly prone to go outside. So they are at high risk of getting affected with corona virus.***","93e589b4":"***If we look into the case summary, this is a matter of concern as well. The number of Covid-19 patients still taking treatment is very high. Recovery rate is increasing but along side this death rate is also increasing in our country..***","2b8b75df":"***As we can see males are getting affected with corona virus mostly. Among 13138 patients approxiamtely 8934 are male patients and rest are female patients.***","972a0945":"**Positive Case Calculator**","97f4beee":"***As we can see from the graph that highest number of postiive cases found is 1773 on 21th May 2020 Today.<br>\nThe highest number of patients recovered was on 3rd May 2020 which was 886.***","3ee0bd07":"**MLPRegression Model (Time Series Vs All)**","be45a0e0":"### Comparative Analysis:\n***","81d8ac18":"***Here we can also see that our scenario is worse than India. At this moment India had 166 official death cases where we already have 206 official confirmed death cases. Even at this stage at day 75 Russia had less death cases then Bangladesh***","15375f43":"***As we can see from the table Dhaka is mostly affected than any other divisions. The main international airport is located in this capital city. Which results in the most amount of people coming from abroad here who brought he virus here. As a result the Covid-19 cases is the highest in Dhaka City. Which is 77%. The port city Chattogram comes second in the list.***","b75c2509":"### Last 24 Hour Scenario Bangladesh:\n***","658f5dcf":"## Coronavirus in Bangladesh\n***","c5e9d636":"***We already know Covid-19 has become an international pandemic. The situation of Bangladesh is not an exceptopn. As we can see among 64 districts, almost all are affected with Corona virus and the situation might  get out of hand if immidiate action is not taken.***","8e4b7d78":"***Situations are pretty much under control among these areas. Here the people are strictly following the rules of quarantine and they kept the number of positive cases to 1***","9e06849a":"### Prediction Models:\n***","1aa46657":"### Scenario Of Dhaka Division:\n***","d60611a1":"**LinearRegression-Polynomial**","0ad1438e":"***First Covid-19 case was found in Bangladesh on 8 March 2020. Form then until 5th April 2020 our trend graph was pretty parallel. But after 5th April 2020 from then the curve shows an upward trend starts to get up exponentially until now. <br>Today we have encountered 1773 positive cases. Which makes the total Covid-19 positive cases to 28511. Today we lost max 22 souls which makes the total death to 408. Most importantly 395 patients have recovered from the virus which makes 5602 fully cured patients.***","6bb020c3":"***In the graph we can see the 20 mostly affected areas of Dhaka city. Here the situations of Rajarbagh, Kakrail, Jatrabari, Mukda, Mohakhali are pretty bad compared with the other areas. More than 140 people are afftected into these areas. Each day the number is increasing and new areas are getting affected.***"}}