{"cell_type":{"c3269391":"code","8abe19aa":"code","4c6be1c7":"code","d3c6e3fb":"code","a7002e3c":"code","268ad7a4":"code","fe811dff":"code","8178f471":"code","366bffdf":"code","0e3f84b3":"code","a9c2b783":"code","b79114b6":"code","e0086f54":"code","52d696aa":"code","2e952ebf":"code","58d9d25b":"code","101d4fa5":"code","4ce7b514":"code","e99b5f17":"code","d1a81c20":"code","908126ec":"code","100f8699":"code","6e5c0474":"code","8b545e7f":"code","a8af4ad6":"code","b612208a":"code","a5f44282":"code","6140e100":"code","c55fd9ef":"code","d82d15cc":"code","61643613":"code","f9504cf4":"code","2712cc09":"code","79bb1130":"code","7afb972b":"code","df74076e":"code","446fb088":"code","11845086":"code","8999e722":"code","552d39a1":"code","bfb7a3e8":"code","344b7960":"code","968055e8":"code","8957ae45":"code","adff32dc":"code","58ce3124":"code","d11dd121":"code","46961db3":"code","237f6b78":"code","e16aafc8":"code","cb82687d":"code","f0039d3c":"code","6cc6e488":"code","25ec0d8a":"code","3f4ecd2b":"code","389ba1a2":"code","6905cfc2":"code","9a31a673":"code","77e39a09":"code","8c947c57":"code","ae837377":"code","1b4991be":"code","f1590f33":"code","ade2fcfe":"code","0a24d7eb":"code","577b9427":"code","ffb8b0ad":"code","4366df86":"code","99c7edcd":"code","01a5be6d":"code","198a29ee":"code","64d1dbc1":"code","628161d5":"code","e30a6466":"code","7686cc13":"code","de8b74e8":"code","de80379b":"code","e55a03d1":"code","41c4df43":"code","3544f4d2":"code","d6f0d86c":"code","311e4a13":"code","78cd382b":"code","1ea73072":"code","76fe040a":"code","5eca8f2a":"code","f69d10ab":"code","79517e70":"code","0e82b9fa":"markdown","c25ccaea":"markdown","fb1ddcf1":"markdown","1fd0f836":"markdown","94f519cd":"markdown","b397051d":"markdown","de7410ec":"markdown","1aeecaa7":"markdown","07ce98fd":"markdown","ae4fe061":"markdown","c75fab29":"markdown","b439c9f1":"markdown","29d90e13":"markdown","de4b5437":"markdown","c084f190":"markdown","f684de86":"markdown","1143ff41":"markdown","56bb73c9":"markdown","d4ae0bc7":"markdown"},"source":{"c3269391":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8abe19aa":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import gaussian_kde","4c6be1c7":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 03312020'\ndf_rc=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 03312020.txt',delimiter=\"\\t\")","d3c6e3fb":"def missing_value_display(df):   \n    df=df.dropna(how='all',axis=1)\n    df.missing=df.isna().sum()\n    df.missing=pd.DataFrame(df.missing)\n    df.missing.columns=['missing values']\n    df.missing['Variable Name']=df.loc[0]\n    df_return=df.missing.sort_values(by='missing values',ascending=False)\n    return df_return.drop('IDRSSD')","a7002e3c":"missing_value_display(df_rc).tail(10)['missing values']","268ad7a4":"def denplot(samples,color):\n    # plot density curve \n    kde = gaussian_kde(samples.dropna())\n    x = np.linspace(np.min(samples),np.max(samples),100)\n    plt.plot(x,kde(x),color=color ,linewidth=1.5)\n    plt.fill_between(x,0,kde(x),color=color,alpha=0.1)\n    plt.plot(samples, np.zeros(samples.shape), color=color ,alpha=0.5,marker='|',markersize=20)\n    \ndef histogram_plot(df):\n    colors = ['red','blue','green','orange','purple','pink','brown','cyan','olive','gray']\n    k = 0\n    fig,axes = plt.subplots(2,2,figsize=(15,12))\n    for i in range(2):\n        for j in range(2):\n            plt.subplot(axes[i,j])\n            #\u63a5\u4e0b\u6765\u8fd9\u4e24\u884c\u662f\u7528\u5728edited version\u91cc\u9762\u7684\uff1a\u4e3a\u4e86\u5c06figure\u4e2dx\u5750\u6807\u8f74\u7ed9scale\n            #\u7528\u6240\u6709\u7684\u503c\u9664\u4ee5\u6700\u5927\u503c\u6765scale\u6210(0,1)\u4e4b\u95f4\u7684x\u8f74\u5750\u6807\n            df_plot=df.copy()\n            df_plot.iloc[:,k]=df.iloc[:,k]\/(max(df.iloc[:,k]))\n            df_plot.iloc[:,k].hist(color=colors[k],alpha=0.5,rwidth=0.95,grid=False,density=True,ax=axes[i,j])\n            denplot(df_plot.iloc[:,k],colors[k])\n            plt.title(df.columns[k])\n            k += 1\n    plt.legend()\n    plt.show()","fe811dff":"def choose_variables(df,n):\n    row,col=np.shape(df)\n    df_rc=df;\n    df_plot=df_rc[missing_value_display(df_rc).tail(n).index].drop(index=0).astype(float)\n    df_plot.columns=missing_value_display(df_rc).tail(n)['Variable Name']\n    df_plot_log=df_plot[df_plot>n].apply(np.log)\n    \n    df_plot_log=df_plot_log.dropna(how='any')\n    df_plot=df_plot.dropna(how='any')\n    miss_values=(missing_value_display(df_rc).tail(n)['missing values']\/row)*100\n    miss_values=pd.DataFrame(miss_values)\n    miss_values['Variable Name']=missing_value_display(df_rc).tail(n)['Variable Name']\n    return df_plot,df_plot_log,miss_values","8178f471":"def histogram_n_shares(df,n):\n    colors = ['red','blue','green','orange','purple','pink','brown','cyan','olive','gray']\n    k = 0\n    fig,axes = plt.subplots(2,2,figsize=(15,12))\n    for i in range(2):\n        for j in range(2):\n            plt.subplot(axes[i,j])\n            df_plot=pd.DataFrame(sorted(df.iloc[:,k],reverse=True))\n            df_plot=df_plot.dropna()\n            df_plot=pd.DataFrame(sorted(df_plot[0],reverse=True))\n            df_top_n=np.cumsum(df_plot)\/df_plot.sum()\n            df_top_n.head(n).plot(kind='bar',color=colors[k],alpha=0.5,grid=False,ax=axes[i,j])\n            plt.title(df.columns[k])\n            k += 1\n    plt.legend()\n    plt.show()","366bffdf":"choose_variables(df_rc,4)[0].head()","0e3f84b3":"choose_variables(df_rc,10)[0].head()","a9c2b783":"histogram_plot(choose_variables(df_rc,4)[0])","b79114b6":"histogram_plot(choose_variables(df_rc,4)[1])","e0086f54":"fig = plt.figure(figsize=(16,6))\nsns.set(rc={\"figure.figsize\": (20, 6)}); \nsns.set(style=\"darkgrid\",palette='deep',color_codes=False)\nsns.pairplot(choose_variables(df_rc,4)[1], size=4, diag_kind=\"auto\")","52d696aa":"#px.scatter(choose_variables(df_rc,4)[0],x='NON-INTEREST BEARING DEPOSITS',y='TOTAL DEPOSITS',\n          #size='TOT INT BEAR DEPS IN DOM&FGN OFF',width=800,trendline=\"ols\")","2e952ebf":"df_ci_loans=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 03312020.txt',delimiter=\"\\t\")","58d9d25b":"missing_value_display(df_ci_loans).tail(10)","101d4fa5":"choose_variables(df_ci_loans,4)[0].head()","4ce7b514":" histogram_n_shares(choose_variables(df_ci_loans,4)[0],10)","e99b5f17":"histogram_plot(choose_variables(df_ci_loans,4)[0])","d1a81c20":"histogram_plot(choose_variables(df_ci_loans,4)[1])","908126ec":"sns.pairplot(choose_variables(df_ci_loans,4)[1], size=4, diag_kind=\"auto\")","100f8699":"choose_variables(df_ci_loans,4)[0]","6e5c0474":"#px.scatter(choose_variables(df_ci_loans,4)[0],x='LN SECURED BY OWNER OCCPD NONFARM NO',y='LN SECURED BY OTHR NONFARM NONRES PR',\n          #size='ALL OTH LNS SECD BY 1-4FMLY-JR LIENS',width=800,trendline=\"ols\")","8b545e7f":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 03312020'\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 03312020.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 03312020.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 03312020.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 03312020.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 03312020.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 03312020.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 03312020.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCRI 03312020.txt',delimiter=\"\\t\")","a8af4ad6":"def missing_rank(lists):\n    results=[]\n    k=0\n    for i in lists:\n        temp=choose_variables(i,10)[0].head()\n        k+=1\n        results.append(temp)\n\n    index_name=[]\n    for i in range(7):\n        temp=results[i].columns\n        index_name.append(temp)\n    \n    lists_name=['income_statement','balance_sheet','loans_and_lease','tradingassets_and_liability',\n       'deposit_liabilities','other_asset','other_liabilities']#,'regulatory_capital']\n    df_index_name=pd.DataFrame(index_name).T\n    df_index_name.columns=lists_name\n    df_index_name\n    \n    return(df_index_name)","b612208a":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities,df_regulatory_capital]\nmissing_rank(lists)","a5f44282":"#lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n #      df_deposit_liabilities,df_other_asset,df_other_liabilities,df_regulatory_capital]\n#results=[]\n#for i in lists:\n #   temp=choose_variables(i,10)[0].head()\n  #  results.append(temp)\n\n#index_name=[]\n#for i in range(8):\n    #temp=results[i].columns\n    #index_name.append(temp)","6140e100":"#lists_name=['income_statement','balance_sheet','loans_and_lease','tradingassets_and_liability',\n       #'deposit_liabilities','other_asset','other_liabilities','regulatory_capital']\n#df_index_name=pd.DataFrame(index_name).T\n#df_index_name.columns=lists_name\n#df_index_name","c55fd9ef":"def percentage_display(lists):\n    results=[]\n    for i in lists[0:7]:\n        temp=choose_variables(i,10)[2]['missing values'].values\n        results.append(temp)\n\n    miss_percentage=pd.DataFrame(results).T\n    lists_name=['income_statement','balance_sheet','loans_and_lease','tradingassets_and_liability',\n       'deposit_liabilities','other_asset','other_liabilities']\n    miss_percentage.columns=lists_name\n    miss_percentage\n    \n    return miss_percentage","d82d15cc":"percentage_display(lists)","61643613":"for i in lists:\n    i.columns=i.iloc[0,:]\n    i.drop([0],axis=0,inplace=True)","f9504cf4":"net_income=df_income_statement['NET INCOME'].astype(float)\ntotal_deposits=df_balance_sheet['TOTAL DEPOSITS'].iloc[:,1].astype(float)\ntotal_trading_assets=df_tradingassets_and_liability['TOTAL TRADING ASSETS'].iloc[:,1].astype(float)\n\ntotal_trading_liabilities=df_tradingassets_and_liability['TRADING LIABILITES'].iloc[:,1].astype(float)\nother_expenses=df_other_liabilities['OTHER EXPENSES ACCRUED & UNPAID'].iloc[:,1].astype(float)\nequity_tier1_capital=df_regulatory_capital['COMMON EQUITY TIER 1 CAPITAL'].iloc[:,1].astype(float)\n","2712cc09":"df_new=[net_income,total_deposits,total_trading_assets,total_trading_liabilities,other_expenses,equity_tier1_capital]\ndf_new_plot=pd.DataFrame(df_new).T\nnp.shape(df_new_plot)","79bb1130":"np.shape(df_new_plot.dropna(how='any'))","7afb972b":"df_new_plot.describe()","df74076e":"def histogram_plot(df):\n    colors = ['red','blue','green','orange','purple','pink','brown','cyan','olive','gray']\n    k = 0\n    fig,axes = plt.subplots(2,3,figsize=(20,12))\n    lists=[]\n    for i in range(2):\n        for j in range(3):\n            plt.subplot(axes[i,j])\n            df.iloc[:,k]=np.where(df.iloc[:,k]<-1e9,np.nan,df.iloc[:,k])\n            df.iloc[:,k]=np.where(df.iloc[:,k]>1e9,np.nan,df.iloc[:,k])\n            lists.append(df.iloc[:,k].dropna())\n            #\u63a5\u4e0b\u6765\u8fd9\u4e24\u884c\u662f\u7528\u5728edited version\u91cc\u9762\u7684\uff1a\u4e3a\u4e86\u5c06figure\u4e2dx\u5750\u6807\u8f74\u7ed9scale\n            #\u7528\u6240\u6709\u7684\u503c\u9664\u4ee5\u6700\u5927\u503c\u6765scale\u6210(0,1)\u4e4b\u95f4\u7684x\u8f74\u5750\u6807\n            lists[k]=lists[k]\/(max(lists[k]))\n            lists[k].hist(color=colors[k],alpha=0.5,rwidth=0.95,grid=False,density=True,ax=axes[i,j])\n            denplot(lists[k],colors[k])\n            plt.title(df.columns[k])\n            k += 1\n    plt.legend()\n    plt.show()","446fb088":"df_new_plot_log=np.where(df_new_plot.apply(np.log)<-1e9,np.nan,df_new_plot.apply(np.log))\ndf_new_plot_log=pd.DataFrame(df_new_plot_log)\ndf_new_plot_log.columns=df_new_plot.columns\nhistogram_plot(df_new_plot_log)","11845086":"def histogram_n_shares(df,n):\n    colors = ['red','blue','green','orange','purple','pink','brown','cyan','olive','gray']\n    k = 0\n    fig,axes = plt.subplots(2,3,figsize=(20,12))\n    for i in range(2):\n        for j in range(3):\n            plt.subplot(axes[i,j])\n            df_plot=pd.DataFrame(sorted(df.iloc[:,k],reverse=True))\n            df_plot=df_plot.dropna()\n            df_plot=pd.DataFrame(sorted(df_plot[0],reverse=True))\n            df_top_n=np.cumsum(df_plot)\/df_plot.sum()\n            df_top_n.head(n).plot(kind='bar',color=colors[k],alpha=0.5,grid=False,ax=axes[i,j])\n            plt.title(df.columns[k])\n            k += 1\n    plt.legend()\n    plt.show()","8999e722":"histogram_n_shares(df_new_plot,10)","552d39a1":"def top_n_bank_names(df,n):\n    row,col=np.shape(df)\n    names=[]\n    for i in range(1,col):\n        names.append(df.sort_values(by=df.columns[i],ascending=False)['bank id'].head(n).values)\n    names_df=pd.DataFrame(names).T\n    names_df.columns=df.columns[1:7]\n    names_df=names_df.astype(int)\n    return names_df\n    \n    ","bfb7a3e8":"df_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCRI 03312020.txt',delimiter=\"\\t\")\nbank_id=df_regulatory_capital['IDRSSD'].dropna().astype(float)\n\ndf_with_id=df_new_plot.copy()\ndf_with_id.insert(0,\"bank id\",bank_id)\n\ntop_n_bank_names(df_with_id,10)","344b7960":"histogram_plot(df_new_plot.dropna(how='any'))","968055e8":"df_new_plot.head()","8957ae45":"fig = plt.figure(figsize=(16,6))\nsns.set(rc={\"figure.figsize\": (20, 6)}); \nsns.set(style=\"darkgrid\",palette='deep',color_codes=False)\nsns.pairplot(df_new_plot[['NET INCOME','TOTAL DEPOSITS','TOTAL TRADING ASSETS',\n            'TRADING LIABILITES','COMMON EQUITY TIER 1 CAPITAL']], size=4, diag_kind=\"auto\")","adff32dc":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 03312019'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 03312019.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 03312019.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 03312019.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 03312019.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 03312019.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 03312019.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 03312019.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCRI 03312019.txt',delimiter=\"\\t\")","58ce3124":"#df_regulatory_capital.drop(['RCFA7204','RCFA7205','RCFA7206','ADVANCED APPROACHES ONLY: SUPPLEMENT',\n #                           'CAPTIAL CONSERVATION BUFFER','CAP RATIO COM EQTY TIER1 CAP RATIO','TIER 1 LEVERAGE CAPITAL RATIO',\n  #                         'TOTAL RISK-BASED CAPITAL RATIO','TIER 1 RISK-BASED CAPITAL RATIO','CAPTIAL CONSERVATION BUFFER',\n   #                        'CAP RATIO COM EQTY TIER1 CAP RATIO'],axis=1,inplace=True)","d11dd121":"def missing_rank(lists):\n    results=[]\n    k=0\n    for i in lists:\n        temp=choose_variables(i,10)[0].head()\n        k+=1\n        results.append(temp)\n\n    index_name=[]\n    for i in range(7):\n        temp=results[i].columns\n        index_name.append(temp)\n    \n    lists_name=['income_statement','balance_sheet','loans_and_lease','tradingassets_and_liability',\n       'deposit_liabilities','other_asset','other_liabilities']#,'regulatory_capital']\n    df_index_name=pd.DataFrame(index_name).T\n    df_index_name.columns=lists_name\n    df_index_name\n    \n    return(df_index_name)","46961db3":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","237f6b78":"percentage_display(lists)","e16aafc8":"pd.set_option('display.max_columns', 30)\npd.set_option('display.max_rows', 30)","cb82687d":"df_balance_sheet['RCFD2170'].dropna()","f0039d3c":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 06302018'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 06302018.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 06302018.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 06302018.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 06302018.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 06302018.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 06302018.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 06302018.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCRI 06302018.txt',delimiter=\"\\t\")","6cc6e488":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","25ec0d8a":"percentage_display(lists)","3f4ecd2b":"df_balance_sheet['RCFD2170'].dropna()","389ba1a2":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312017'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312017.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312017.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312017.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312017.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312017.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312017.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312017.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCRI 12312017.txt',delimiter=\"\\t\")","6905cfc2":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","9a31a673":"percentage_display(lists)","77e39a09":"df_balance_sheet['RCFD2170'].dropna()","8c947c57":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312013'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312013.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312013.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312013.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312013.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312013.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312013.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312013.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312013(1 of 2).txt',delimiter=\"\\t\")","ae837377":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","1b4991be":"percentage_display(lists)","f1590f33":"df_balance_sheet['RCFD2170'].dropna()","ade2fcfe":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312008'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312008.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312008.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312008.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312008.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312008.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312008.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312008.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312008(1 of 2).txt',delimiter=\"\\t\")","0a24d7eb":"#path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312010'\n\n#df_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312010.txt',delimiter=\"\\t\")\n#df_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312010.txt',delimiter=\"\\t\")\n#df_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312010.txt',delimiter=\"\\t\")\n#df_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312010.txt',delimiter=\"\\t\")\n\n#df_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312010.txt',delimiter=\"\\t\")\n#df_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312010.txt',delimiter=\"\\t\")\n#df_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312010.txt',delimiter=\"\\t\")\n#df_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312010(1 of 2).txt',delimiter=\"\\t\")","577b9427":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","ffb8b0ad":"percentage_display(lists)","4366df86":"df_balance_sheet['RCFD2170'].dropna()","99c7edcd":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312007'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312007.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312007.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312007.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312007.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312007.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312007.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312007.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312007(1 of 2).txt',delimiter=\"\\t\")","01a5be6d":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","198a29ee":"percentage_display(lists)","64d1dbc1":"df_balance_sheet['RCFD2170'].dropna()","628161d5":"for i in lists:\n    i.columns=i.iloc[0,:]\n    i.drop([0],axis=0,inplace=True)\n\ndf_regulatory_capital.columns=df_regulatory_capital.iloc[0,:]\ndf_regulatory_capital.drop([0],axis=0,inplace=True)","e30a6466":"\nleverage_equity_asset=df_regulatory_capital['TOTAL EQUITY CAPITAL'].iloc[:,1].astype(float)\/df_balance_sheet['TOTAL ASSETS'].iloc[:,1].astype(float)\nleverage_equity_asset=leverage_equity_asset.astype(float)\nleverage_equity_asset=pd.DataFrame(leverage_equity_asset)\nleverage_equity_asset.columns=['Leverage Equity Asset']\n\nleverage_liability_asset=df_tradingassets_and_liability['TRADING LIABILITES'].iloc[:,1].astype(float)\/df_balance_sheet['TOTAL ASSETS'].iloc[:,1].astype(float)\nleverage_liability_asset=leverage_liability_asset.astype(float)\nleverage_liability_asset=pd.DataFrame(leverage_liability_asset)\nleverage_liability_asset.columns=['Leverage Equity Asset']\n","7686cc13":"colors = ['olive','gray']\nfig,axes=plt.subplots(1,2,figsize=(15,6))\n\n#plt.subplot(axes[0])\nleverage_equity_asset.iloc[:,0].hist(color=colors[0],alpha=0.5,rwidth=0.95,grid=False,density=True,ax=axes[0])\nleverage_liability_asset.iloc[:,0].hist(color=colors[1],alpha=0.5,rwidth=0.95,grid=False,density=True,ax=axes[1])","de8b74e8":"net_income=df_income_statement['NET INCOME'].astype(float)\ntotal_deposits=df_balance_sheet['TOTAL DEPOSITS'].iloc[:,1].astype(float)\ntotal_trading_assets=df_tradingassets_and_liability['TOTAL TRADING ASSETS'].iloc[:,1].astype(float)\n\ntotal_trading_liabilities=df_tradingassets_and_liability['TRADING LIABILITES'].iloc[:,1].astype(float)\ntotal_assets=df_balance_sheet['TOTAL ASSETS'].iloc[:,1].astype(float)\ntotal_equity_capital=df_regulatory_capital['TOTAL EQUITY CAPITAL'].iloc[:,1].astype(float)\n\ndf_new=[net_income,total_deposits,total_trading_assets,total_trading_liabilities,total_assets,total_equity_capital]\ndf_new_plot=pd.DataFrame(df_new).T\n\ndf_new_plot_log=np.where(df_new_plot.apply(np.log)<-1e9,np.nan,df_new_plot.apply(np.log))\ndf_new_plot_log=pd.DataFrame(df_new_plot_log)\ndf_new_plot_log.columns=df_new_plot.columns","de80379b":"histogram_n_shares(df_new_plot,10)","e55a03d1":"histogram_plot(df_new_plot)","41c4df43":"histogram_plot(df_new_plot_log)","3544f4d2":"fig = plt.figure(figsize=(16,6))\nsns.set(rc={\"figure.figsize\": (20, 6)}); \nsns.set(style=\"white\",palette='deep',color_codes=False)\nsns.pairplot(df_new_plot, size=4,kind='reg', diag_kind=\"auto\")","d6f0d86c":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312005'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312005.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312005.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312005.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312005.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312005.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312005.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312005.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312005(1 of 2).txt',delimiter=\"\\t\")","311e4a13":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","78cd382b":"percentage_display(lists)","1ea73072":"df_balance_sheet['RCFD2170'].dropna()","76fe040a":"path = '..\/input\/summer-research\/FFIEC CDR Call Bulk All Schedules 12312003'\n\ndf_income_statement=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RI 12312003.txt',delimiter=\"\\t\")\ndf_balance_sheet=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RC 12312003.txt',delimiter=\"\\t\")\ndf_loans_and_lease=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCCI 12312003.txt',delimiter=\"\\t\")\ndf_tradingassets_and_liability=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCD 12312003.txt',delimiter=\"\\t\")\n\ndf_deposit_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCE 12312003.txt',delimiter=\"\\t\")\ndf_other_asset=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCF 12312003.txt',delimiter=\"\\t\")\ndf_other_liabilities=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCG 12312003.txt',delimiter=\"\\t\")\ndf_regulatory_capital=pd.read_csv(f'{path}\/FFIEC CDR Call Schedule RCR 12312003(1 of 2).txt',delimiter=\"\\t\")","5eca8f2a":"lists=[df_income_statement,df_balance_sheet,df_loans_and_lease,df_tradingassets_and_liability,\n       df_deposit_liabilities,df_other_asset,df_other_liabilities]\nmissing_rank(lists)","f69d10ab":"percentage_display(lists)","79517e70":"df_balance_sheet['RCFD2170'].dropna()","0e82b9fa":"# For the dataset in 2018.06","c25ccaea":"### As for total asset:","fb1ddcf1":"# For the dataset in 2013.12","1fd0f836":"# For the dataset in 2003.12","94f519cd":"### Missing Rank:","b397051d":"# For the dataset in 2005.12","de7410ec":"## Apply these functions to another dataset :","1aeecaa7":"### Missing Percentage:","07ce98fd":"# For the dataset in 2008.12","ae4fe061":"Then given the table above, I choose some important variables, they are:\n\n1. `NET INCOME` from Schedule Income Statement\n1. `TOTAL DEPOSITS` from Schedule Balance Sheet\n1. `TOTAL TRADING ASSETS` and `TRADING LIABILITES` from Schedule Trading Asset and Liability\n1. `OTHER EXPENSES ACCRUED & UNPAID` from Schedule Other Liabilities\n1. `COMMON EQUITY TIER 1 CAPITAL` from Schedule Regulatory Asset","c75fab29":"## Empirical Results :","b439c9f1":"#### Data Loading :","29d90e13":"## Introduction :\n* Since there are 50 datasets(in`.txt`format), I hope to create a common way to find the variables which include the number of banks as much as possible and plot these selected variables,using `kernal distribution, histogram, px_scatter as well as seaborn`. These functions can be applied to each schedule of the bank call report dataset.\n\nI have writed these functions and let me introduce each of them :\n*  First, `missing_value_display` function is used to calculate the missing values of each column in the dataset, and then sort these variables according to their number of missing values. For example, `In[5]`,the variable `RCON2200 (Total Deposits)` does not have the missing values and is displayed in the last row of this table. The higher you go, the larger the number of missing values\u3002\n*  Second,`denplot` function is used to plot the kernal density of the dataset.\n*  Third, `histogram_plot` function is used to plot the histogram. Here may be a drawback of this function. For example, when I consider two variables (`RCONB989` and `RCON2200`)in the dataset, `In [5]` tells us that there is 20 missing values in the variable `RCONB989`, so when I plot these two variables at the same time, it means that I have to delete the 20 banks in variable `RCON2200`. I think it may be an underlying drawback, so by default I reccommend to plot four variables at the same time. \n*  Fourth, `choose_variables` function is used to select the variable that we hope to plot. For example `In[8],choose_variables(df_rc,4)[0].head()` is used choosse the top 4 variables which include the dataset as much as possible. It is also possible if you want to plot top 5-8 variables, but here in this function I do not take that into consideration.\n*  Fifth, `histogram_n_shares`, I use it to `bar_plot` the top n shares banks in the selected variables. It can also select whether you want to plot(after log transformation or the original data)","de4b5437":"For each Schedule, I find the variables with least missing values.","c084f190":"# For the dataset in 2007.12","f684de86":"# For the dataset in 2017.12","1143ff41":"## Reminder:\nVersion 11 is the one with original version","56bb73c9":"If you want to plot the middle line, such as line 4-8, then use the function `loc()` rather than `tail()` and it can work.","d4ae0bc7":"# For the dataset in 2019.03"}}