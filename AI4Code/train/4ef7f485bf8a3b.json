{"cell_type":{"9241541b":"code","cdf4f1df":"code","063a2642":"code","af6b8f4f":"code","049099a7":"code","738bdbe8":"code","a962881c":"code","b40d1328":"code","307214d0":"code","c6e718e9":"code","13e3b743":"code","4663f521":"code","3ec82e0d":"code","becdb1b5":"code","eed0e0e7":"code","bfa9a62a":"code","bd5bbd4e":"code","954c526a":"code","e1a22dd8":"code","47fcb479":"code","48b5c739":"code","1f281dde":"code","c9f1cf9f":"code","d54df90a":"code","2c7cf9b1":"code","1a986654":"code","3add12cd":"code","0a18b346":"code","cb047fdc":"code","a50a461a":"code","3202f398":"code","f46b0cb2":"code","f8f60072":"code","094285e6":"code","96b31d1e":"code","b834964c":"code","78168f55":"code","5e508c4d":"code","eefddcb4":"markdown","f711c959":"markdown","41092d1f":"markdown","c96d8da6":"markdown"},"source":{"9241541b":"from google.colab import drive","cdf4f1df":"drive.mount('\/content\/drive')","063a2642":"!ls","af6b8f4f":"!git clone https:\/\/github.com\/AlexeyAB\/darknet\/","049099a7":"cp drive\/'My Drive'\/helmet\/data_for_colab.zip \/content\/darknet\/","738bdbe8":"cd darknet","a962881c":"ls","b40d1328":"!unzip data_for_colab.zip","307214d0":"#upload train test.txt files\nfrom google.colab import files\nuploaded = files.upload()","c6e718e9":" \nfor name, data in uploaded.items():\n  with open(name, 'wb') as f:\n    f.write(data)\n    print ('saved file', name)","13e3b743":"!apt-get update\n!apt-get upgrade","4663f521":"!apt-get install build-essential\n!apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev","3ec82e0d":"!apt-get install libavcodec-dev libavformat-dev libswscale-d","becdb1b5":"!apt-get -y install cmake\n!which cmake\n\n!cmake --version","eed0e0e7":"!apt-get install libopencv-dev","bfa9a62a":"!apt-get install vim","bd5bbd4e":"ls","954c526a":"#Now let's get some YOLOv3 weights from the official site\n!ls\n!wget https:\/\/pjreddie.com\/media\/files\/yolov3.weights","e1a22dd8":"#Now here we're modifying the makefile to set OPENCV and GPU to 1\n!ls\n!sed -i 's\/OPENCV=0\/OPENCV=1\/g' Makefile\n!sed -i 's\/GPU=0\/GPU=1\/g' Makefile","47fcb479":"!ls\n%cd ..\/\n!ls","48b5c739":"!apt install g++-5\n!apt install gcc-5\n\n!update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-5 10\n!update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-5 20\n!update-alternatives --install \/usr\/bin\/g++ g++ \/usr\/bin\/g++-5 10\n!update-alternatives --install \/usr\/bin\/g++ g++ \/usr\/bin\/g++-5 20\n!update-alternatives --install \/usr\/bin\/cc cc \/usr\/bin\/gcc 30\n!update-alternatives --set cc \/usr\/bin\/gcc\n!update-alternatives --install \/usr\/bin\/c++ c++ \/usr\/bin\/g++ 30\n!update-alternatives --set c++ \/usr\/bin\/g++","1f281dde":"#Now, here's a bunch of code that takes the longest to execute here but\n#It's about installing CUDA and using the beautiful Tesla K80 GPU, so that\n#Will worth it\n\n!apt update -qq;\n!wget https:\/\/developer.nvidia.com\/compute\/cuda\/8.0\/Prod2\/local_installers\/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb\n!dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb\n!apt-get update -qq\n\n#Here were are installing compilers and creating some links\n!apt-get install cuda -y -qq #gcc-5 g++-5 \n#!ln -s \/usr\/bin\/gcc-5 \/usr\/local\/cuda\/bin\/gcc\n#!ln -s \/usr\/bin\/g++-5 \/usr\/local\/cuda\/bin\/g++\n!apt update\n!apt upgrade\n!apt install cuda-8.0 -y","c9f1cf9f":"%cd darknet\n!make","d54df90a":"!ls\n#Now, let's see if everything works by running it on a test image\n!.\/darknet detect cfg\/yolov3.cfg yolov3.weights data\/person.jpg","2c7cf9b1":"#Let's define some functions that will let us show images, and upload and \n#download files\ndef imShow(path):\n  import cv2\n  import matplotlib.pyplot as plt\n  %matplotlib inline\n\n  image = cv2.imread(path)\n  height, width = image.shape[:2]\n  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n\n  fig = plt.gcf()\n  fig.set_size_inches(18, 10)\n  plt.axis(\"off\")\n  #plt.rcParams['figure.figsize'] = [10, 5]\n  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n  plt.show()\n  \n  \ndef upload():\n  from google.colab import files\n  uploaded = files.upload() \n  for name, data in uploaded.items():\n    with open(name, 'wb') as f:\n      f.write(data)\n      print ('saved file', name)\ndef download(path):\n  from google.colab import files\n  files.download(path)","1a986654":"imShow('predictions.jpg')","3add12cd":"ls","0a18b346":"!.\/darknet detector train data_for_colab\/obj.data data_for_colab\/yolov3-tiny-obj.cfg data_for_colab\/yolov3-tiny.conv.15 -dont_show","cb047fdc":"from google.colab import files\nuploaded = files.upload() ","a50a461a":"for name, data in uploaded.items():\n  with open(name, 'wb') as f:\n    f.write(data)\n    print ('saved file', name)","3202f398":"!.\/darknet detector test data_for_colab\/obj.data data_for_colab\/yolov3-tiny-obj.cfg backup\/yolov3-tiny-obj_1000.weights test.jpg -i 0 -thresh 0.5","f46b0cb2":"imShow('predictions.jpg')","f8f60072":"cd ..","094285e6":"cp drive\/'My Drive'\/helmet\/helmet_video.mkv \/content\/darknet","96b31d1e":"cd darknet","b834964c":"ls","78168f55":"!.\/darknet detector demo data_for_colab\/obj.data data_for_colab\/yolov3-tiny-obj.cfg backup\/yolov3-tiny-obj_1000.weights  -dont_show helmet_video.mkv -i 0 -out_filename veout.avi","5e508c4d":"download('veout.avi') ","eefddcb4":"Custom tiny-yolo-v3 training using your own dataset and testing the results using the google colaboratory. Object detection using yolo algorithms and training your own model and obtaining the weights file using google colab platform. The steps includes:\n\nData Acquisition.\nData Preparation according to the yolo.\nLoad Dataset.\nTrain the dataset.\nObtain the model weights.\nTest the model\ndownload Prepared data set from the following link:\nhttps:\/\/drive.google.com\/open?id=1g3u7CIwF1SPflTN8GmLwJIdLjfdhav-x\n\nFor More Information, you can follow this tutorial https:\/\/medium.com\/@today.rafi\/train-your-own-tiny-yolo-v3-on-google-colaboratory-with-the-custom-dataset-2e35db02bf8f","f711c959":"## Hi there, I will highly recommend to follow my following github repo for this tutorial :)\nhttps:\/\/github.com\/KhizarSultan\/Helmet_Detection_using_Deep_Learning\n","41092d1f":"![helmet.PNG](attachment:helmet.PNG)","c96d8da6":"![](http:\/\/)"}}