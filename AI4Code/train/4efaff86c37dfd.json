{"cell_type":{"418edc2b":"code","3735a19b":"code","464b57f6":"code","0f788bf2":"code","40df34c5":"code","9ff7da08":"code","eb453257":"code","dc7a7c5b":"code","03d97c91":"code","0abb7452":"code","87a49632":"code","50542c1f":"code","3eb793fc":"code","a6be18c1":"code","d9a6726a":"code","d439635b":"markdown","75766ddf":"markdown","8aa8b14d":"markdown","f9693858":"markdown","dca308e7":"markdown","27c230db":"markdown"},"source":{"418edc2b":"input_dir = '..\/input\/'\nworking_dir = '..\/working\/'","3735a19b":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","464b57f6":"train = pd.read_csv(os.path.join(input_dir, 'train.csv'))\ntest = pd.read_csv(os.path.join(input_dir, 'test.csv'))\n\n# Set index\ntrain.index = train['Id'].values\ntest.index = test['Id'].values\n\nprint(train.shape)\nprint(test.shape)","0f788bf2":"# copy from https:\/\/www.kaggle.com\/katacs\/data-cleaning-and-random-forest\ndef data_cleaning(data):\n    data['dependency']=np.sqrt(data['SQBdependency'])\n    data['rez_esc']=data['rez_esc'].fillna(0)\n    data['v18q1']=data['v18q1'].fillna(0)\n    data['v2a1']=data['v2a1'].fillna(0)\n    \n    conditions = [\n    (data['edjefe']=='no') & (data['edjefa']=='no'), #both no\n    (data['edjefe']=='yes') & (data['edjefa']=='no'), # yes and no\n    (data['edjefe']=='no') & (data['edjefa']=='yes'), #no and yes \n    (data['edjefe']!='no') & (data['edjefe']!='yes') & (data['edjefa']=='no'), # number and no\n    (data['edjefe']=='no') & (data['edjefa']!='no') # no and number\n    ]\n    choices = [0, 1, 1, data['edjefe'], data['edjefa']]\n    data['edjefx']=np.select(conditions, choices)\n    data['edjefx']=data['edjefx'].astype(int)\n    data.drop(['edjefe', 'edjefa'], axis=1, inplace=True)\n    \n    meaneduc_nan=data[data['meaneduc'].isnull()][['Id','idhogar','escolari']]\n    me=meaneduc_nan.groupby('idhogar')['escolari'].mean().reset_index()\n    for row in meaneduc_nan.iterrows():\n        idx=row[0]\n        idhogar=row[1]['idhogar']\n        m=me[me['idhogar']==idhogar]['escolari'].tolist()[0]\n        data.at[idx, 'meaneduc']=m\n        data.at[idx, 'SQBmeaned']=m*m\n        \n    return data","40df34c5":"train = data_cleaning(train)\ntest = data_cleaning(test)","9ff7da08":"train = train.query('parentesco1==1')\ntrain = train.drop('parentesco1', axis=1)\ntest = test.drop('parentesco1', axis=1)\nprint(train.shape)","eb453257":"def get_numeric(data, status_name):\n    # make a list of column names containing 'sataus_name'\n    status_cols = [s for s in data.columns.tolist() if status_name in s]\n    print('status column names')\n    print(status_cols)\n    # make a DataFrame with only status_cols\n    status_df = data[status_cols]\n    # change its column name like ['epared1', 'epared2', 'epared3'] -> [0, 1, 2]\n    status_df.columns = list(range(status_df.shape[1]))\n    # get the column name which has the biggest value in every row\n    # see https:\/\/stackoverflow.com\/questions\/26762100\/reconstruct-a-categorical-variable-from-dummies-in-pandas\n    # this is pandas.Series\n    status_numeric = status_df.idxmax(1)\n    # set Series name\n    status_numeric.name = status_name\n    # add status_numeric as a new column\n    data = pd.concat([data, status_numeric], axis=1)\n    return data","dc7a7c5b":"status_name_list = ['epared', 'etecho', 'eviv', 'instlevel']\nfor status_name in status_name_list:\n    train = get_numeric(train, status_name)\n    test = get_numeric(test, status_name)","03d97c91":"needless_cols = ['r4t3', 'tamhog', 'tamviv', 'hhsize', 'v18q', 'v14a', 'agesq',\n                 'mobilephone', 'paredother', 'pisoother', 'abastaguano',\n                 'energcocinar1', 'techootro', 'sanitario6', 'elimbasu6',\n                 'estadocivil7', 'parentesco12', 'tipovivi5',\n                 'lugar1', 'area1', 'female', 'epared1', 'epared2',\n                 'epared3', 'etecho1', 'etecho2', 'etecho3',\n                 'eviv1', 'eviv2', 'eviv3', 'instlevel1', 'instlevel2',\n                 'instlevel3', 'instlevel4', 'instlevel5', 'instlevel6',\n                 'instlevel7', 'instlevel8', 'instlevel9']\nSQB_cols = [s for s in train.columns.tolist() if 'SQB' in s]\nparentesco_cols = [s for s in train.columns.tolist() if 'parentesco' in s]\n\nneedless_cols.extend(SQB_cols)\nneedless_cols.extend(parentesco_cols)\n\ntrain = train.drop(needless_cols, axis=1)\ntest = test.drop(needless_cols, axis=1)","0abb7452":"ori_train = pd.read_csv(os.path.join(input_dir, 'train.csv'))\nori_train_X = ori_train.drop(['Id', 'Target', 'idhogar'], axis=1)\n\ntrain_X = train.drop(['Id', 'Target', 'idhogar'], axis=1)\n\nprint('feature columns \\n {} -> {}'.format(ori_train_X.shape[1], train_X.shape[1]))","87a49632":"# Split data\ntrain_Id = train['Id'] # individual ID\ntrain_idhogar = train['idhogar'] # household ID\ntrain_y = train['Target'] # Target value\ntrain_X = train.drop(['Id', 'Target', 'idhogar'], axis=1) # features\n\ntest_Id = test['Id'] # individual ID\ntest_idhogar = test['idhogar'] # household ID\ntest_X = test.drop(['Id', 'idhogar'], axis=1) # features\n\n# Union train and test\nall_Id = pd.concat([train_Id, test_Id], axis=0, sort=False)\nall_idhogar = pd.concat([train_idhogar, test_idhogar], axis=0, sort=False)\nall_X = pd.concat([train_X, test_X], axis=0, sort=False)","50542c1f":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, f1_score, make_scorer\nimport lightgbm as lgb\n\nX_train, X_test, y_train, y_test = train_test_split(train_X, train_y, test_size=0.1, random_state=0)\n\nF1_scorer = make_scorer(f1_score, greater_is_better=True, average='macro')\n\n# gbm_param = {\n#     'num_leaves':[210]\n#     ,'min_data_in_leaf':[9]\n#     ,'max_depth':[14]\n# }\n# gbm = GridSearchCV(\n#     lgb.LGBMClassifier(objective='multiclassova', class_weight='balanced', seed=0)\n#     , gbm_param\n#     , scoring=F1_scorer\n# )\n\n\n# params = {'num_leaves': 13, 'min_data_in_leaf': 23, 'max_depth': 11, 'learning_rate': 0.09, 'feature_fraction': 0.74}\ngbm = lgb.LGBMClassifier(boosting_type='dart', objective='multiclassova', class_weight='balanced', random_state=0)\n# gbm.set_params(**params)\n\ngbm.fit(X_train, y_train)\n# gbm.best_params_","3eb793fc":"import pickle\nwith open(os.path.join(working_dir, '20180801_lgbm.pickle'), mode='wb') as f:\n    pickle.dump(gbm, f)","a6be18c1":"y_test_pred = gbm.predict(X_test)\ncm = confusion_matrix(y_test, y_test_pred)\nf1 = f1_score(y_test, y_test_pred, average='macro')\nprint(\"confusion matrix: \\n\", cm)\nprint(\"macro F1 score: \\n\", f1)","d9a6726a":"pred = gbm.predict(test_X)\npred = pd.Series(data=pred, index=test_Id.values, name='Target')\npred = pd.concat([test_Id, pred], axis=1, join_axes=[test_Id.index])\npred.to_csv('20180801_lgbm.csv', index=False)","d439635b":"# Reduce features without degrading F1 score\nI found many needless columns in dataset. I removed them and ran prediction. Finally, the F1 score was almost the same as full features prediction with LightGBM.\n\n**Leaderboard score**\n* 0.428 : reduced(85 features)\n* 0.425 : full(140 features)\n\nThis data processing gives us efficient predictions and saving time in future analyses.\n\n\n","75766ddf":"### Clean Data\nI picked the following function from [\"Data cleaning and random forest\n\"](https:\/\/www.kaggle.com\/katacs\/data-cleaning-and-random-forest)\n\n* dependency 'no' -> 0\n* edjefa, edjefe 'no' -> 0,  'yes' -> 1\n* meaneduc NaN -> mean escolari of household\n* v2a1 NaN -> 0\n* v18q1 NaN -> 0\n* rez_esc NaN -> 0","8aa8b14d":"### Extract heads of household","f9693858":"## Delete needless columns\n### redundant columns\n* r4t3, tamviv, tamhog, hhsize ... almost the same as hogar_total\n* v14a ... almost the same as saniatrio1\n* v18q, mobilephone ... can be generated by v18q1, qmobilephone\n* SQBxxx, agesq ... squared values\n* parentescoxxx ... only heads of household are in dataset now\n\n### extra columns\n(One-hot variables should be linearly independent. For example, female (or male) column is needless, because whether the sample is female or not can be explained only with male (or female) column.)\n* paredother, pisoother, abastaguano, energcocinar1, techootro, sanitario6, elimbasu6, estadocivil7, parentesco12, tipovivi5, lugar1, area1, female\n\n### obsolete columns\n* epared1~3, etecho1~3, eviv1~3, instlevel1~9 ... we don't use these columns anymore.\n","dca308e7":"## Simple LightGBM","27c230db":"## Convert one-hot variables into numeric\n* 'epared', 'etecho', 'eviv' and 'instlevel' can be converted into numeric\n*  like (bad, regular, good) -> (0 ,1, 2)"}}