{"cell_type":{"e8230db6":"code","20f37191":"code","2e342b81":"code","1ec74b1b":"code","9a2024ae":"code","6ce9f7ab":"code","65b5b219":"code","7b52cc73":"code","8bb6db3c":"code","fb954640":"code","51a5f60f":"code","a664ed3f":"code","b6bf8631":"code","a25c84ef":"code","e21479dc":"code","1fc43e1f":"code","5f77e7c8":"code","14259b4a":"code","6ac5419f":"code","53cf050c":"code","e6c81e86":"code","7b544fd7":"code","081a7c1c":"code","5eafe9dd":"code","d4ba88c3":"code","fadee62b":"code","dcdf7756":"code","716b0825":"code","b0e8bd27":"code","e36e861b":"code","94bc81bd":"code","7c0dfcd6":"markdown","3ac18d64":"markdown","e89b4543":"markdown"},"source":{"e8230db6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n!pip install pyzipcode\nimport numpy as np # linear algebra\nimport pandas as pd # data processiInng, CSV file I\/O (e.g. pd.read_csv)\nfrom pyzipcode import ZipCodeDatabase\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20f37191":"df = pd.read_csv(\"\/kaggle\/input\/us-population-by-zip-code\/population_by_zip_2010.csv\", dtype={'zipcode':'category'})\ndf = df.dropna()\ndf.head(5)","2e342b81":"zip_df = pd.read_csv(\"\/kaggle\/input\/zipcodes-county-fips-crosswalk\/ZIP-COUNTY-FIPS_2017-06.csv\", dtype={\"ZIP\":'category'})\nzip_df.head(5)","1ec74b1b":"pop_df = pd.read_csv(\"\/kaggle\/input\/us-census-demographic-data\/acs2015_county_data.csv\")\npop_df.head(5)","9a2024ae":"income_df = pd.read_csv('\/kaggle\/input\/kaggle-income\/kaggle_income.csv',encoding='latin-1')\nincome_df = income_df.rename(columns={'State_ab':'State'})\nincome_df.head(5)","6ce9f7ab":"def zip_finder(CountNum):\n    try:\n        return (((zip_df[zip_df['STCOUNTYFP']==int(CountNum)])['ZIP']).values)[0]\n    except:\n        print(CountNum)\n        return('None')","65b5b219":"def Zip_2_City(zipval):\n    zcdb = ZipCodeDatabase()\n    if zipval != 'None':\n        zipcode = zcdb[zipval]\n        if zipcode.city != None:\n            return zipcode.city, zipcode.state\n        else: return \"None\",'None'\n    else:\n        return \"None\"","7b52cc73":"def City_State_list_maker(zip_list):   \n    City_list = list()\n    State_list = list()\n    for zips in zip_list:\n        if zips == 'None':\n            City_list.append('None')\n            State_list.append('None')\n        else:\n            try: \n                city, state = Zip_2_City(zips)\n                City_list.append(city)\n                State_list.append(state)\n            except:\n                City_list.append('None')\n                State_list.append('None')\n    return City_list, State_list","8bb6db3c":"Mean_Income_df = income_df[['Mean','Median','Stdev','City','State']].groupby(['City','State'], as_index=False).mean()\nMean_Income_df.to_csv('Mean_Income_df.csv',index=False)\nMean_Income_df.head()","fb954640":"zip_array = list(df['zipcode'].values)\nprint(type(zip_array))\nprint(zip_array[:5])","51a5f60f":"City_list = list()\nState_list = list()\nCity_list, State_list = City_State_list_maker(zip_array)","a664ed3f":"City_State_df = pd.DataFrame(data={'zipcode':zip_array,\n                                  'City':City_list, 'State':State_list})","b6bf8631":"City_State_df.head()","a25c84ef":"new_df = df.merge(City_State_df, on='zipcode')","e21479dc":"new_df = new_df[['population', 'minimum_age','maximum_age','City','State']]\npop_count = new_df[['population','City','State' ]].groupby(['City','State'], as_index=False).sum()\npop_min = new_df[['minimum_age','City','State' ]].groupby(['City','State'], as_index=False).min()\npop_max = new_df[['minimum_age','City','State' ]].groupby(['City','State'], as_index=False).max()","1fc43e1f":"Population_df = pop_count.merge(pop_min, on=['State','City'])\nPopulation_df = Population_df.merge(pop_max, on=['State','City'])\nPopulation_df = Population_df.reset_index()\nPopulation_df.to_csv('Population_df.csv',index=False)\nPopulation_df.head()","5f77e7c8":"County_names = pop_df['CensusId'].values\nzip_list = list()\nfor i, county_name in enumerate(County_names):\n    zip_list.append(zip_finder(county_name))","14259b4a":"print(np.where(County_names==2158))\nprint(np.where(County_names==46102))\nzip_list[81] == 'None'\nzip_list[2412] == 'None'","6ac5419f":"City_list = list()\nState_list = list()\nCity_list, State_list = City_State_list_maker(zip_list)\nsum(x is 'None' for x in State_list) == sum(x is 'None' for x in City_list)","53cf050c":"Zip_and_city_county = pd.DataFrame(data={'City':City_list,'State':State_list, 'Zipcode':zip_list, 'CensusId': County_names})\nZip_and_city_county = Zip_and_city_county.replace(to_replace='None', value=np.nan)","e6c81e86":"pop_complete_df =  pop_df[pop_df.columns[pop_df.columns != 'State']].merge(Zip_and_city_county, on='CensusId')\nprint(pop_complete_df.shape)\nprint(pop_complete_df['Zipcode'].iloc[81])","7b544fd7":"noneless_df = pop_complete_df.dropna()\nprint(noneless_df.shape)\nprint(noneless_df['Zipcode'].iloc[81])","081a7c1c":"noneless_df.columns","5eafe9dd":"Diversity_df = noneless_df[['Hispanic','White', 'Black', 'Native', 'Asian', 'Pacific','City','State']].groupby(['City','State'],as_index=False).mean()\nDiversity_df.to_csv(\"Diversity_df.csv\",index=False)\nDiversity_df.head()","d4ba88c3":"Income_per_capita_df = noneless_df[['Income','IncomeErr', 'IncomePerCap', 'IncomePerCapErr','City','State']].groupby(['City','State'],as_index=False).mean()\nIncome_per_capita_df.to_csv(\"Income_per_capita_df.csv\",index=False)\nIncome_per_capita_df.head()","fadee62b":"Poverty_df = noneless_df[['Poverty','ChildPoverty','City','State']].groupby(['City','State'],as_index=False).sum()\nPoverty_df.to_csv(\"Poverty_df.csv\",index=False)\nPoverty_df.head()","dcdf7756":"Industry_df = noneless_df[['Professional', 'Service', 'Office', 'Construction','Production','City','State']].groupby(['City','State'],as_index=False).sum()\nIndustry_df.to_csv(\"Industry_df.csv\",index=False)\nIndustry_df.head()","716b0825":"Trasportation_df = noneless_df[['Drive', 'Carpool', 'Transit', 'Walk', 'OtherTransp','WorkAtHome', 'MeanCommute','City','State']].groupby(['City','State'],as_index=False).mean()\nTrasportation_df.to_csv(\"Trasportation_df.csv\",index=False)\nTrasportation_df.head()","b0e8bd27":"Employment_df = noneless_df[['Employed','Unemployment','City','State']].groupby(['City','State'],as_index=False).sum()\nEmployment_df.to_csv('Employment_df.csv',index=False)\nEmployment_df.head()","e36e861b":"Employment_ratio_df = noneless_df[['PrivateWork', 'PublicWork','SelfEmployed', 'FamilyWork','City','State']].groupby(['City','State'],as_index=False).mean()\nEmployment_ratio_df.to_csv('Employment_ratio_df.csv',index=False)\nEmployment_ratio_df.head()","94bc81bd":"total_df = Population_df.merge(Diversity_df, on=['State','City'])\ntotal_df = total_df.merge(Poverty_df, on=['State','City'])\ntotal_df = total_df.merge(Industry_df, on=['State','City'])\ntotal_df = total_df.merge(Employment_df, on=['State','City'])\ntotal_df = total_df.merge(Trasportation_df, on=['State','City'])\ntotal_df = total_df.merge(Employment_ratio_df, on=['State','City'])\ntotal_df = total_df.merge(Income_per_capita_df, on=['State','City'])\ntotal_df = total_df.merge(Mean_Income_df, on=['State','City'])\ntotal_df.to_csv('Total_Search_df.csv',index=False)\ntotal_df.head(5)","7c0dfcd6":"### Population City and State Colunms addtion","3ac18d64":"### Income Prepreation","e89b4543":"### US demographic data adding City and State "}}