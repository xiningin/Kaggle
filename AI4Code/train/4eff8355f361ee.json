{"cell_type":{"8db9a091":"code","d8abfbe9":"code","5380af42":"code","13c80436":"code","2c637b96":"code","d0233d5c":"code","bb5cf41c":"code","3f2e24a7":"code","553fa161":"code","687490c9":"code","9686188c":"code","efeee495":"code","7152f68a":"code","b13c1ae4":"code","9a27f80e":"code","042f7df9":"code","12ae43ed":"code","882d6981":"code","a59f32b4":"code","e031c284":"code","26b5760a":"code","e52dba56":"markdown","35fcd67c":"markdown","8bcc8eaa":"markdown","84ecfc0a":"markdown","51f69dd3":"markdown","7af74f1d":"markdown","4c84b240":"markdown","d4c42c37":"markdown"},"source":{"8db9a091":"import torch\nimport fastai\nfrom fastai.tabular.all import *\nfrom fastai.text.all import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom fastai import *\n\nimport time\nfrom datetime import datetime\n\nprint(f'Notebook last run on {datetime.fromtimestamp(time.time()).strftime(\"%Y-%m-%d, %H:%M:%S UTC\")}')\nprint('Using fastai version ',fastai.__version__)\nprint('And torch version ',torch.__version__)","d8abfbe9":"def plot_fastai_results(learn):\n    '''\n    Plots sensitivity, speficificty, prevalence, accuracy, and confusion matrix for a fastai model named \"learn\".\n    Some portions are adapted from https:\/\/github.com\/fastai\/fastai\/blob\/master\/nbs\/61_tutorial.medical_imaging.ipynb\n    '''\n    interp = Interpretation.from_learner(learn)\n    interp = ClassificationInterpretation.from_learner(learn)\n    interp.plot_confusion_matrix(figsize=(7,7))\n    losses,idxs = interp.top_losses()\n    len(dls.valid_ds)==len(losses)==len(idxs)\n    upp, low = interp.confusion_matrix()\n    tn, fp = upp[0], upp[1]\n    fn, tp = low[0], low[1]\n    sensitivity = tp\/(tp + fn)\n    print('Sensitivity: ',sensitivity)\n    specificity = tn\/(fp + tn)\n    print('Specificity: ',specificity)\n    #val = dls.valid_ds.cat\n    prevalance = 15\/50\n    print('Prevalance: ',prevalance)\n    accuracy = (sensitivity * prevalance) + (specificity * (1 - prevalance))\n    print('Accuracy: ',accuracy)","5380af42":"pneumothorax_source = untar_data(URLs.SIIM_SMALL)\nitems = get_dicom_files(pneumothorax_source\/f\"train\/\")\ntrn,val = RandomSplitter()(items)\ndf = pd.read_csv(pneumothorax_source\/f\"labels.csv\")\npneumothorax = DataBlock(blocks=(ImageBlock(cls=PILDicom), CategoryBlock),\n                   get_x=lambda x:pneumothorax_source\/f\"{x[0]}\",\n                   get_y=lambda x:x[1],\n                   batch_tfms=aug_transforms(size=224))\ndls = pneumothorax.dataloaders(df.values)\ndls.show_batch(max_n=16)","13c80436":"learn = cnn_learner(dls, resnet34, metrics=accuracy, model_dir='\/kaggle\/tmp\/model\/')\nlearn.lr_find()\nlearn.fine_tune(5)\nlearn.show_results()","2c637b96":"plot_fastai_results(learn=learn)","d0233d5c":"path = Path('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/')\ndls = ImageDataLoaders.from_folder(path, train='train',\n                                   item_tfms=Resize(224),valid_pct=0.2,\n                                   bs=64,seed=0)\ndls.show_batch()","bb5cf41c":"learn = cnn_learner(dls, resnet34, metrics=accuracy, model_dir='\/kaggle\/tmp\/model\/')\nlearn.lr_find()\nlearn.fine_tune(5)\nlearn.show_results()","3f2e24a7":"plot_fastai_results(learn=learn)","553fa161":"path = untar_data(URLs.ADULT_SAMPLE)\ndf = pd.read_csv(path\/'adult.csv')\ndls = TabularDataLoaders.from_csv(path\/'adult.csv', path=path, y_names=\"salary\",\n    cat_names = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race'],\n    cont_names = ['age', 'fnlwgt', 'education-num'],\n    procs = [Categorify, FillMissing, Normalize])\nsplits = RandomSplitter(valid_pct=0.2)(range_of(df))\nto = TabularPandas(df, procs=[Categorify, FillMissing,Normalize],\n                   cat_names = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race'],\n                   cont_names = ['age', 'fnlwgt', 'education-num'],\n                   y_names='salary',\n                   splits=splits)\ndls = to.dataloaders(bs=64)\ndls.show_batch()","687490c9":"learn = tabular_learner(dls, metrics=accuracy)\nlearn.lr_find()\nlearn.fine_tune(5)\nlearn.show_results()","9686188c":"plot_fastai_results(learn=learn)","efeee495":"df = pd.read_csv('\/kaggle\/input\/adult-census-income\/adult.csv', skipinitialspace=True)\ndls = TabularDataLoaders.from_df(df=df, path=path, y_names=\"income\",\n    cat_names = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race'],\n    cont_names = ['age', 'fnlwgt', 'education.num'],\n    procs = [Categorify, FillMissing, Normalize])\nsplits = RandomSplitter(valid_pct=0.2)(range_of(df))\nto = TabularPandas(df, procs=[Categorify, FillMissing,Normalize],\n                   cat_names = ['workclass', 'education', 'marital.status', 'occupation', 'relationship', 'race'],\n                   cont_names = ['age', 'fnlwgt', 'education.num'],\n                   y_names='income',\n                   splits=splits)\ndls = to.dataloaders(bs=64)\ndls.show_batch()","7152f68a":"learn = tabular_learner(dls, metrics=accuracy)\nlearn.lr_find()\nlearn.fine_tune(5)\nlearn.show_results()","b13c1ae4":"plot_fastai_results(learn=learn)","9a27f80e":"path = untar_data(URLs.IMDB)\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test')\ndls.show_batch(max_n=3) # investigate https:\/\/forums.fast.ai\/t\/most-of-the-items-in-show-batch-is-xxpad-strings\/78989","042f7df9":"learn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)\nlearn.lr_find()\nlearn.fine_tune(7)\nlearn.show_results(max_n=3)","12ae43ed":"plot_fastai_results(learn=learn)","882d6981":"df = pd.read_csv('\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv')\ndls = TextDataLoaders.from_df(df=df,model_dir='\/kaggle\/tmp\/model\/')\n#dls.show_batch() # investigate https:\/\/forums.fast.ai\/t\/most-of-the-items-in-show-batch-is-xxpad-strings\/78989\/5\ndf.head(15)","a59f32b4":"learn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)\nlearn.lr_find()\nlearn.fine_tune(5)\nlearn.show_results(max_n=3) # investigate https:\/\/forums.fast.ai\/t\/most-of-the-items-in-show-batch-is-xxpad-strings\/78989\/2","e031c284":"plot_fastai_results(learn=learn)","26b5760a":"!mkdir \/kaggle\/working\/docker\/\n!pip freeze > '..\/working\/docker\/requirements.txt'","e52dba56":"# References\n\n**Tutorials and code snippets:**\n\n - https:\/\/docs.fast.ai\/tutorial\n \n  - http:\/\/docs.fast.ai\/tutorial.tabular\n  - http:\/\/docs.fast.ai\/tutorial.text\n  - http:\/\/docs.fast.ai\/tutorial.vision\n  \n    - https:\/\/github.com\/fastai\/fastai\/blob\/master\/nbs\/61_tutorial.medical_imaging.ipynb\n\n**Datasets:**\n\n - From fastai:\n\n  - Filice R et al. \"Crowdsourcing pneumothorax annotations using machine learning annotations on the NIH chest X-ray dataset\". J Digit Imaging (2019). https:\/\/doi.org\/10.1007\/s10278-019-00299-9\n  - Ron Kohavi, \"Scaling Up the Accuracy of Naive-Bayes Classifiers: a Decision-Tree Hybrid\". Proceedings of the Second International Conference on Knowledge Discovery and Data Mining (1996).  https:\/\/doi.org\/10.4304\/jcp.6.7.1325-1331\n  - Maas, Andrew L., Daly, Raymond E., Pham, Peter T., Huang, Dan, Ng, Andrew Y, Potts, Christopher.  \"Learning Word Vectors for Sentiment Analysis\". Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies.  (2011).   https:\/\/www.aclweb.org\/anthology\/P11-1015\n  \n \n - From kaggle:\n \n  - https:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia\n  - https:\/\/www.kaggle.com\/uciml\/adult-census-income\n  - https:\/\/www.kaggle.com\/lakshmi25npathi\/imdb-dataset-of-50k-movie-reviews","35fcd67c":"# Image data from fastai\n* This is a small dataset of chest x-ray images","8bcc8eaa":"# Image data from Kaggle\n* This dataset has a lot more images than the previous dataset.  This should improve the accuracy of our model.","84ecfc0a":"# Tabular Data from Kaggle","51f69dd3":"# Text data from fastai\n* IMDB Film Reviews, pos or neg","7af74f1d":"# Fastai v2 with image, text, and tabular data\n\n* [Fastai v2](https:\/\/www.fast.ai\/2020\/08\/21\/fastai2-launch\/) was launched on August 21st, 2020 along with a companion textbook and a companion course.  Much of this work is adapted from the official fast.ai courses and tutorials.  For more detail about fastai, see https:\/\/www.mdpi.com\/2078-2489\/11\/2\/108\/htm.  I highly recommend these free learning materials:  \n\n - https:\/\/www.fast.ai\/2020\/08\/21\/fastai2-launch\/ \n - https:\/\/docs.fast.ai\/tutorial\n\n\n* The purpose of this notebook is to demonstrate how to use a GPU-enabled Kaggle Notebook to train a ML model using the recently released fastai-v2.  \n* Note that this method uses the default Kaggle docker image and does not require any pip install statements.\n","4c84b240":"# Text data from Kaggle\n* IMDB Film Reviews, positive or negative","d4c42c37":"# Tabular data from fastai"}}