{"cell_type":{"bb00e6ce":"code","f3b223b2":"code","fdc57a82":"code","2de3e3e8":"code","a111589d":"code","c5675569":"code","dc0515fc":"code","ae54ede4":"code","8f051ab1":"code","e46b0048":"code","91d5dea7":"code","2b416c64":"code","f2e52b44":"code","d71220dc":"code","17e046bb":"code","be4719df":"code","bffd0114":"code","17c818cd":"code","fb3e381e":"code","78448d3b":"code","77d797d8":"code","cbeb35de":"code","0de4dd07":"code","060c37cb":"code","4171eebe":"code","dc0cb7ad":"code","08fc0dd2":"code","a157c225":"code","9f5fadf2":"code","ec3ff1cc":"code","63a73791":"code","2d70fa5a":"code","d9ec9a62":"markdown","126f323f":"markdown","4ae67241":"markdown","9367bfd6":"markdown","ddaac318":"markdown","1cffd458":"markdown","6fd1f8ae":"markdown","34c5dc47":"markdown","ad79317c":"markdown","4bb8c17c":"markdown","04acea7b":"markdown","06e7525f":"markdown","5f31f33e":"markdown","efdcc8ad":"markdown","62429398":"markdown","61e0b264":"markdown","6cd2076d":"markdown","20d62d3c":"markdown"},"source":{"bb00e6ce":"import numpy as np \nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')","f3b223b2":"from skimage import io\nfrom sklearn.cluster import KMeans\n\ncolors = []\n\nimg = io.imread('https:\/\/i.imgur.com\/bGpKLYh.png')[:,:,:3]\nimg = img.reshape((img.shape[0] * img.shape[1], 3))\n\nk = 10\nclt = KMeans(n_clusters = k)\nclt.fit(img)\n\nfor center in clt.cluster_centers_:\n    color = [int(i) for i in list(center)]\n    colors.append('#%02x%02x%02x' % (color[0], color[1], color[2]))\n\nsns.palplot(colors)\nplt.axis('off')\nprint(colors)","fdc57a82":"def custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors), size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length=0)\n\nmain_colors = ['#f03aa5', '#40c2f3', '#c489ce', '#bb3ca9']\ncustom_palette(main_colors)","2de3e3e8":"train = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","a111589d":"print('Shape of train dataset : ', train.shape)\nprint('Shape of test dataset : ', test.shape)","c5675569":"train.head()","dc0515fc":"test.tail()","ae54ede4":"labels = list(train['target'].unique())\ndata = list(train['target'].value_counts())\n\nplt.figure(figsize=(8,8))\nplt.pie(data, autopct='%1.1f%%', labels=labels, textprops={'fontsize':15, 'color':'#505050'})\n\nmy_circle = plt.Circle((0,0), 0.8, color='white')\np = plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.legend(labels, loc='upper right', prop={'size':12})\nplt.show()","8f051ab1":"train.drop('id', axis=1, inplace=True)\ntest.drop('id', axis=1, inplace=True)","e46b0048":"from matplotlib import cm\nfrom matplotlib.colors import ListedColormap, LinearSegmentedColormap\n\ncmap = mpl.colors.LinearSegmentedColormap.from_list(\"\", [main_colors[0], main_colors[1]])\ncmap","91d5dea7":"train.describe().T.style.bar(subset=['mean'], color=main_colors[0])\\\n                            .background_gradient(subset=['std'], cmap=cmap)\\\n                            .background_gradient(subset=['50%'], cmap=cmap)","2b416c64":"test.describe().T.style.bar(subset=['mean'], color=main_colors[1])\\\n                            .background_gradient(subset=['std'], cmap=cmap)\\\n                            .background_gradient(subset=['50%'], cmap=cmap)","f2e52b44":"def diff_color(x):\n    color = main_colors[2] if x < 0 else (main_colors[3] if x > 0 else 'black')\n    return f'color: {color}'\n\n(train.describe() - test.describe())[test.columns].T.iloc[:-1, 1:].style.bar\\\n(subset=['mean', 'std'], align='mid', color=[main_colors[0], main_colors[1]])\\\n.applymap(diff_color, subset=['min', 'max'])","d71220dc":"plt.style.use('seaborn-notebook')\n\nf, ax = plt.subplots(2, 2, figsize=(18, 9))\nsns.kdeplot(x='feature_1', hue='target', data=train, alpha=0.2, linewidth=0.6, fill=True,\n           legend=True, ax=ax[0][0])\nsns.histplot(x='feature_1', hue='target', data=train, palette=main_colors, multiple='stack',\n             ax=ax[0][1])\nsns.histplot(x='feature_1', hue='target', data=train, kde=True, palette=main_colors, ax=ax[1][0])\nsns.countplot(x='feature_1', hue='target', data=train, palette=main_colors, ax=ax[1][1])\nax[1][1].legend(title='target', loc='upper right')","17e046bb":"fig, axes = plt.subplots(17, 3, figsize=(18, 54))\n\ntarget_order = sorted(train['target'].unique())\nfor idx, ax in zip(range(50), axes.flatten()):\n    cnt = train['feature_{}'.format(idx)].value_counts().sort_index()\n    sns.kdeplot(x='feature_{}'.format(idx), hue='target', hue_order=labels, palette=main_colors,\n               data=train, alpha=0.5, linewidth=0.6, fill=True, legend=False, ax=ax,)\n    \n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.set_title('Feature_{}, Unique Values: {}'.format(idx, len(train['feature_{}'.format(idx)].unique())),\n                 loc='right', weight='bold', fontsize=12)\n    ax.axis('off')\n    \naxes.flatten()[-1].axis('off')\naxes.flatten()[-2].axis('off')\n\nfig.tight_layout()\nplt.show()","be4719df":"unique_train = pd.DataFrame(train.nunique()).reset_index()\nunique_train.columns = ['features', 'count']\nunique_train.drop(50, axis=0, inplace=True)\ncols = train.columns[:-1]\ntrain_counts = unique_train['count'].values\n\nf, ax = plt.subplots(1, 1, figsize=(18,9))\nsns.barplot(data=unique_train, x=cols, y='count', ax=ax, color=main_colors[0])\nplt.xticks(rotation=90)\nplt.title('Train Dataset Features Unique Values', fontsize=20)\n\nfor i, c in enumerate(train_counts):\n    plt.text(x=i-0.3, y=c+1, s=c)\nplt.show()","bffd0114":"unique_test = pd.DataFrame(test.nunique()).reset_index()\nunique_total = pd.concat([unique_train, unique_test])\nunique_test.columns = ['features', 'count']\ncols = test.columns\ntest_counts = unique_test['count'].values\ncompare_counts = train_counts - test_counts\n\nf, ax = plt.subplots(1, 1, figsize=(18,9))\nsns.barplot(data=unique_train, x=cols, y='count', color=main_colors[0], label='Train', alpha=1)\nsns.barplot(data=unique_test, x=cols, y='count', color=main_colors[1], label='Test', alpha=0.9)\n\nplt.xticks(rotation=90)\nplt.title('Test Dataset Features Unique Values compared to Train Dataset', fontsize=20)\n\nfor i, c in enumerate(test_counts):\n    plt.text(x=i-0.3, y=c+1, s=c)\nplt.show()","17c818cd":"train['target'] = train['target'].map({'Class_1':0, 'Class_2':1, 'Class_3':2, 'Class_4':3})","fb3e381e":"mean_train = pd.DataFrame(index=cols)\n\nfor i in range(4):\n    mean_train['Class_{}'.format(i)] = np.array(train.loc[train['target']==i, :].mean()[:-1])\n\nmean_train.T","78448d3b":"f, ax = plt.subplots(1, 1, figsize=(18,9))\nsns.lineplot(data=mean_train, palette=main_colors)\nplt.title('Train Features Mean', fontsize=20)\nplt.xticks(rotation=90)\nplt.show()","77d797d8":"plt.figure(figsize=(18,18))\ncorr = train.corr()\nmask = np.zeros_like(corr, dtype=bool)\nmask[np.triu_indices_from(mask)] = True\n\nsns.heatmap(corr, mask=mask, cmap=cmap, square=True, linewidths=0.5, robust=True, center=0)\nplt.show()","cbeb35de":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport umap","0de4dd07":"reducer = umap.UMAP()\ntrain_u = train.drop('target', axis=1).values\ntarget_u = train['target']\nscaled_train_u = StandardScaler().fit_transform(train_u)\nembedding = reducer.fit_transform(scaled_train_u, target_u)\n\nf, ax = plt.subplots(1, 1, figsize=(18,18))\nsns.scatterplot(embedding[:, 0], embedding[:, 1], s=5.0,\n                hue='target', data=train, palette=main_colors, ax=ax)\nax.legend(['Class_1', 'Class_2', 'Class_3', 'Class_4'], fontsize=15)\nplt.title('Umap_fit_transfrom with target data', fontsize=20)\nplt.show()","060c37cb":"f, ax = plt.subplots(2, 2, figsize=(18, 18))\nsns.scatterplot(embedding[:, 0][target_u==0], embedding[:, 1][target_u==0], s=5.0,\n                data=train.loc[train['target']==0, :], color=main_colors[0], ax=ax[0][0])\nsns.scatterplot(embedding[:, 0][target_u==1], embedding[:, 1][target_u==1], s=5.0,\n                data=train.loc[train['target']==1, :], color=main_colors[1], ax=ax[0][1])\nsns.scatterplot(embedding[:, 0][target_u==2], embedding[:, 1][target_u==2], s=5.0,\n                data=train.loc[train['target']==2, :], color=main_colors[2], ax=ax[1][0])\nsns.scatterplot(embedding[:, 0][target_u==3], embedding[:, 1][target_u==3], s=5.0,\n                data=train.loc[train['target']==3, :], color=main_colors[3], ax=ax[1][1])\nax[0][0].set_title('Class_1', fontsize=15)\nax[0][1].set_title('Class_2', fontsize=15)\nax[1][0].set_title('Class_3', fontsize=15)\nax[1][1].set_title('Class_4', fontsize=15)\nplt.show()","4171eebe":"scaled_train_u2 = StandardScaler().fit_transform(train_u)\nembedding2 = reducer.fit_transform(scaled_train_u2)\n\nf, ax = plt.subplots(1, 1, figsize=(18,18))\nsns.scatterplot(embedding2[:, 0], embedding2[:, 1], s=5.0,\n                hue='target', data=train, palette=main_colors, ax=ax)\nax.legend(['Class_1', 'Class_2', 'Class_3', 'Class_4'], fontsize=15)\nplt.title('Umap_fit_transfrom without target data')\nplt.show()","dc0cb7ad":"from xgboost import XGBClassifier, plot_importance\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import train_test_split, KFold, GroupKFold, StratifiedKFold\n\nimport optuna\nfrom optuna import Trial, visualization\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","08fc0dd2":"X = train.drop('target', axis=1)\ny = train['target']","a157c225":"model = XGBClassifier(tree_method='gpu_hist', use_label_encoder=False)\nmodel.fit(X, y)","9f5fadf2":"f, ax = plt.subplots(1, 1, figsize=(18, 18))\nplot_importance(model, color=main_colors[0], ax=ax)\nplt.title('Feature Importance', fontsize=20)\nplt.show()","ec3ff1cc":"model.predict_proba(test)","63a73791":"submission_xgb = pd.DataFrame(model.predict_proba(test), columns=['Class_1','Class_2','Class_3','Class_4'])\nsubmission_xgb['id'] = submission['id']\nsubmission_xgb","2d70fa5a":"submission_xgb.to_csv('.\/submission_xgb.csv', index=False)","d9ec9a62":"## Read Dataset ##","126f323f":"#### Train Dataset Describe","4ae67241":"#### Comparison of Statistics of Train dataset and Test Dataset","9367bfd6":"#### Making CMAP from main_colors","ddaac318":"#### Submission","1cffd458":"#### Distribution Check","6fd1f8ae":"## XGBOOST","34c5dc47":"#### Umap","ad79317c":"#### Target Value Distribution","4bb8c17c":"#### Correlation","04acea7b":"#### Check missing data\n\nNone","06e7525f":"#### Feature Importance","5f31f33e":"#### Training","efdcc8ad":"## [TPS May 2021] EDA + XGBOOST ##\n\n\n* #### **Import Library** ####\n* #### **Extract main colors** ####\n* #### **Read Dataset** ####\n* #### **EDA** ####\n    - Target value distribution\n    - Train and Test Dataset\n    - Comparison Train and Test\n    - Check null data\n    - Distribution\n    - Correlation\n    - Umap\n* #### **XGBOOST** ####\n    - Trainig\n    - Feature Importance\n    - Submission","62429398":"#### Test Dataset Describe","61e0b264":"![](https:\/\/i.imgur.com\/bGpKLYh.png)","6cd2076d":"## Extract main 4 colors from TPS May Poster\n\nIn this competition, There are 4 classes using a total of 50 integer features. For color consistency on my notebook, extract main 4 colors from TPS May 2021 poster","20d62d3c":"## EDA(Exploratory Data Analysis) ##"}}