{"cell_type":{"03c87f93":"code","76300957":"code","757d7be6":"code","e7554a64":"code","16426082":"code","0040f746":"code","4ffa83b1":"code","5098b4c7":"code","1ace7668":"code","330ff58c":"code","7b443fe7":"code","facdd9af":"code","afe5de44":"code","a1c2bb3c":"code","0d5af53b":"code","9b781e86":"code","cc2cbcb6":"code","29fbff68":"code","033c2b6c":"code","2b2993c0":"code","d93c5b91":"code","77173a5b":"code","d3066b20":"code","f8c28572":"code","8d0adc29":"code","24e4bc8c":"code","e9001cb1":"code","c71cf6cc":"markdown","1f7be5e5":"markdown","8cf41353":"markdown","77f9c1b7":"markdown","5e24999c":"markdown","b14316a2":"markdown","10e40926":"markdown","1a781597":"markdown","dc88c91e":"markdown"},"source":{"03c87f93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","76300957":"data = pd.read_csv(\"..\/input\/anime.csv\")\ndata.head() # head show first 5 row","757d7be6":"data.tail() # tail show last 5 row","e7554a64":"# columns gives column names of features\ndata.columns","16426082":"# shape gives number of rows and columns in a tuble\ndata.shape","0040f746":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","4ffa83b1":"# For example lets look frequency of anime genre\ndata.genre.value_counts(dropna=False) # if there are nan values that also be counted","5098b4c7":"data.describe() #ignore null entries","1ace7668":"# This codes skipping\nfilter1 = data.type == \"Movie\"\nfilter2 = data.type == \"TV\"\ndata1 = data[filter1]\ndata2 = data [filter2]\nver_concatdata =pd.concat([data1,data2],axis=0,ignore_index=True) # axis = 0 vertial concatenating\nver_concatdata","330ff58c":"hor_concatdata = pd.concat([data1,data2],axis = 1) # axis = 1 horizontal concatenating\nhor_concatdata","7b443fe7":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ncdata.boxplot(column='members',by =\"type\",figsize = (24,12))","facdd9af":"# Firstly I create new data from anime data to explain melt nore easily.\ndata_new = data.head(10)   # I only take 10 rows into new data\ndata_new","afe5de44":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'name', value_vars= ['type','episodes'])\nmelted","a1c2bb3c":"melted.pivot(index = \"name\",columns=\"variable\",values=\"value\")","0d5af53b":"data.dtypes","9b781e86":"\n\n# lets convert object(str) to categorical and int to float.\ndata.type = data.type.astype('category')\ndata.members = data.members.astype(\"float\")\n","cc2cbcb6":"# As you can see Type 1 is converted from object to categorical\n# And Speed ,s converted from int to float\ndata.dtypes","29fbff68":"\n\n# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata.info()","033c2b6c":"\n\n# Lets chech Type 2\ndata.genre.value_counts(dropna =False)\n# As you can see, there are 62 NAN value\n\n","2b2993c0":"# Lets drop nan values\ndatax=data   # also we will use data to fill missing value so I assign it to data1 variable\ndatax.genre.dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?","d93c5b91":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","77173a5b":"assert  datax.genre.notnull().all() # returns nothing because we drop nan values","d3066b20":"\n\ndatax.genre.fillna('empty',inplace = True)\n\n","f8c28572":"data.type.value_counts(dropna=False)","8d0adc29":"#data.type.fillna(\"empty\",inplace = True)# give error. Because category feature is not working this metod\ndata.type = data.type.astype(\"object\")# well we convert category to object\ndata.type.fillna('empty',inplace = True)# ","24e4bc8c":"data.type.value_counts(dropna=False)","e9001cb1":"assert  data.type.notnull().all()# returns nothing because we do not have nan values","c71cf6cc":"\nIn this part, you learn:\n\n*     Diagnose data for cleaning\n*     Exploratory data analysis\n*     Visual exploratory data analysis\n*     Tidy data\n*     Pivoting data\n*     Concatenating data\n*     Data types\n*     Missing data and testing with assert","1f7be5e5":"VISUAL EXPLORATORY DATA ANALYSIS\n\n    Box plots: visualize basic statistics like outliers, min\/max or quantiles","8cf41353":"\n**TIDY DATA**\n\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.\n","77f9c1b7":"EXPLORATORY DATA ANALYSIS\n\nvalue_counts(): Frequency counts\noutliers: the value that is considerably higher or lower from rest of the data\n\n   - Lets say value at 75% is Q3 and value at 25% is Q1.\n    -Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\n    -We will use describe() method. Describe method includes:\n    -count: number of entries\n    -mean: average of entries\n    -std: standart deviation\n    -min: minimum entry\n    -25%: first quantile\n    -50%: median or second quantile\n    -75%: third quantile\n    -max: maximum entry\n\n\nWhat is quantile?\n\n*     1,4,5,6,8,9,11,12,13,14,15,16,17\n* \n*     The median is the number that is in middle of the sequence. In this case it would be 11.\n* \n*     The lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n*     The upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.\n","5e24999c":"**CONCATENATING DATA**\n\nWe can concatenate two dataframe","b14316a2":"PIVOTING DATA\n\nReverse of melting.","10e40926":"MISSING DATA and TESTING WITH ASSERT\n\nIf we encounter with missing data, what we can do:\n* \n*     leave as is\n*     drop them with dropna()\n*     fill missing value with fillna()\n*     fill missing values with test statistics like mean\n*     Assert statement: check that you can turn on or turn off when you are done with your testing of the program\n","1a781597":"3.CLEANING DATA\n\n\nDIAGNOSE DATA for CLEANING\n\nWe need to diagnose and clean data before exploring.\nUnclean data:\n\n   - Column name inconsistency like upper-lower case letter or space between words\n    -missing data\n    -different language\n\n\nWe will use head, tail, columns, shape and info methods to diagnose data\n","dc88c91e":"DATA TYPES\n\nThere are 5 basic data types: object(string),booleab, integer, float and categorical.\nWe can make conversion data types like from str to categorical or from int to float\nWhy is category important:\n\n*     make dataframe smaller in memory\n*     can be utilized for anlaysis especially for sklear(we will learn later)\n"}}