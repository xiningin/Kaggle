{"cell_type":{"cf9d5459":"code","5a62b976":"code","b08434db":"code","c4b3f8af":"code","bb7ba5f6":"code","2c356289":"markdown","425c0165":"markdown","3d40ac74":"markdown","d98103f9":"markdown"},"source":{"cf9d5459":"# import libs\nimport pandas as pd\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# go to dir\nos.chdir('..\/input')\nprint(os.listdir('.'))\n\n# open files\nf2017 = 'python developers survey 2017_ raw data sharing\/Python Developers Survey 2017_ Raw Data Sharing\/pythondevsurvey2017_raw_data.csv'\nsurvey2017 = pd.read_csv(f2017)\nsurvey2017.head()\n\n#f2018 = 'python developer survey 2018 external sharing\/Python Developer Survey 2018 external sharing\/python_psf_external_18.csv'\n#survey2018 = pd.read_csv(f2018,index_col=0)\n#survey2018.head()\n","5a62b976":"# remove some unnecessary strings `\\n` = new line and `\\xa0 = non-breaking space`\nsurvey2017.columns = survey2017.columns.str.replace('\\n', ' ').str.replace('\\xa0', '')\n#survey2018.columns = survey2018.columns.str.replace('\\n', ' ').str.replace('\\xa0', '')\n\n# some columns have colons which indicates the answers are attached as prefix \n# to the column name, e.g.\n# Educational purposes:What do you use Python for?\n# Other - Write In::What do you use Python for?\ndef unique_columns(colList):\n   ucols = []\n   [ucols.append(i) for i in colList if not ucols.count(i)]\n   return ucols\n\n# create a list of column names as first columns\nsurvey2017_cols = [col.split(':')[-1] for col in survey2017.columns]\n\n# create a list of unique column names\nsurvey2017_ucols = unique_columns(survey2017_cols)\n\n# create a list of sub-column names as second columns\nsurvey2017_subcols = []\nfor col in survey2017_ucols:\n    survey2017_subcols.append([subcol.split(':')[0] for subcol in survey2017.columns if col in subcol])\n\n# create a tuple from unique and sub columns\ntuples = list(zip(survey2017_ucols,survey2017_subcols))","b08434db":"for uq in survey2017_ucols:\n    print(survey2017_ucols.index(uq), '\\t',uq)","c4b3f8af":"# import libs\n%matplotlib notebook\nimport matplotlib.pyplot as plt\nfrom textwrap import wrap\nimport numpy as np\n\nplt.rcParams['figure.figsize'] = (10,5)\n\n# plotting single horizantal bar columns for questions except [11,17,21,22,26]\ndef plotBarChart(title,labels,counts):\n    f = plt.figure()\n    ax = f.add_subplot(111)\n    ax.yaxis.tick_right()\n    ax.yaxis.set_label_position(\"right\")\n    ax.set_title(\"\\n\".join(wrap(title, 80)), fontsize=12)\n    y_pos = np.arange(len(labels))\n    plt.barh(y_pos, counts, align='center', alpha=0.5)\n    plt.yticks(y_pos, labels)\n    #plt.tick_params(axis='y', which='both', labelleft='off', labelright='on')\n    plt.xlabel('percentage (%)')\n    plt.tight_layout()\n    plt.show()\n\n# plotting horizantal stack bar columns for questions 11 and 17\ndef plotStackChart(title,labels,datas):\n    f = plt.figure()\n    ax = f.add_subplot(111)\n    ax.yaxis.tick_right()\n    ax.yaxis.set_label_position(\"right\")\n    ax.set_title(\"\\n\".join(wrap(title, 80)), fontsize=12)\n    y_pos = np.arange(len(labels))\n    left = np.zeros(shape=len(datas[0]))\n    colors = ['#b5ffb9', '#f9bc86', '#a3acff']\n    for data, color in zip(datas, colors):\n        legend = valueLegends[datas.index(data)]\n        ax.barh(y_pos, data, color=color, left=left, edgecolor='w', label=legend)\n        left += np.array(data)\n    plt.yticks(y_pos, valueLabels)\n    plt.xlabel('percentage (%)')\n    plt.legend(loc='upper left', fancybox=True, framealpha=0.3)\n    plt.tight_layout()\n    plt.show()\n\n# plotting pie chart for questions except [11,17,21,22,26]\ndef plotPieChart(title,labels,counts):\n    explode=[] ; r=0.\n    for v in counts: \n        if v > 0.25: explode.append(0.)\n        else: r+=0.15 ; explode.append(round(r,2))    \n    f=plt.figure()\n    ax=f.add_subplot(111)\n    ax.set_title(\"\\n\".join(wrap(title, 80)), fontsize=12)\n    ax.pie(counts, labels=labels, explode=explode, autopct='%1.1f%%')\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n    plt.tight_layout()\n    plt.show()\n    \n# import required libs for plotly\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n# function help to plot world map related to Q26\ndef plotWorldMap(title, labels, counts, iso):\n    scl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n    data = [ dict( type='choropleth', colorscale = scl, autocolorscale = False,\n                   locations = iso, z = counts, text = labels,\n                   marker = dict( line = dict ( color = 'rgb(255,255,255)', width = 2) ),\n                   colorbar = dict( title = 'percentage (%)') ) ]\n    layout = dict( title = title, \n                   autosize=False, width=900, height=600,\n                   margin = dict (l=0, r=0, t=30, b=0),\n                   geo = dict( scope='world', projection=dict( type='mercator' ),\n                               showlakes = True, lakecolor = 'rgb(255, 255, 255)') )\n    fig = dict( data=data, layout=layout )\n    iplot(fig)\n\n# import required libs for pycountry\nimport pycountry\n# function help to find alpha-3 (iso3) chars for the given country name\ndef get_country_code(name):\n    for country in list(pycountry.countries):\n        if name in country.name:\n            return country.alpha_3\n    return None","bb7ba5f6":"# loop over tuples containing first and second columns\nfor t in tuples:\n    #print('Question\\t', tuples.index(t), '\\n')\n    #-------------------------------------------------------------------------\n    # Question 11 contains multiple selections\n    #-------------------------------------------------------------------------\n    if tuples.index(t)==11:\n        title = tuples[11][0]\n        colNames = survey2017.filter(like=title).columns.tolist()\n        valueLegends = survey2017[colNames[0]].value_counts(sort=False).keys().tolist()\n        valueLabels = []; data1 = []; data2 = []; data3 = []\n        for col in colNames:\n            valueLabels.append(col.split(':')[0])\n            valueCounts = survey2017[col].value_counts(normalize=True,sort=False).tolist()\n            valueCounts = [100*v for v in valueCounts]\n            data1.append(valueCounts[0])\n            data2.append(valueCounts[1])\n            data3.append(valueCounts[2])\n        datas = [data1, data2, data3]\n        plotStackChart(title,valueLabels,datas) \n    #-------------------------------------------------------------------------\n    # Question 17 contains two sub-questions\n    #-------------------------------------------------------------------------\n    elif tuples.index(t)==17:\n        title = tuples[17][0]\n        colNames = survey2017.filter(like=title).columns.tolist()\n        valueLegends = []; datas=[]\n        for col in colNames:\n            valueLegends.append(col.split(':')[0])\n            valueCounts = survey2017[col].value_counts(normalize=True,sort=False).tolist()\n            valueCounts = [100*v for v in valueCounts]\n            valueLabels = survey2017[col].value_counts(sort=False).keys().tolist()\n            datas.append(valueCounts)\n        plotStackChart(title,valueLabels,datas) \n    #-------------------------------------------------------------------------\n    # Question 21 contains multiple selection from the given list\n    #-------------------------------------------------------------------------\n    elif tuples.index(t)==21:\n        title = tuples[21][0]\n        colName = survey2017.filter(like=title).columns\n        valueCounts = survey2017[colName[0]].value_counts(normalize=True,sort=False).tolist()\n        valueCounts = [100*v for v in valueCounts]\n        valueLabels = survey2017[colName[0]].value_counts(sort=False).keys().tolist()\n        plotBarChart(t[0],valueLabels,valueCounts)\n    #-------------------------------------------------------------------------\n    # Question 22 contains multiple selection from the given list\n    #-------------------------------------------------------------------------\n    elif tuples.index(t)==22:\n        title = tuples[22][0]\n        colName = survey2017.filter(like=title).columns\n        valueCounts = survey2017[colName[0]].value_counts(normalize=True,sort=False).tolist()\n        valueCounts = [100*v for v in valueCounts]\n        valueLabels = survey2017[colName[0]].value_counts(sort=False).keys().tolist()\n        plotBarChart(t[0],valueLabels,valueCounts)\n    elif tuples.index(t)==26:\n    #-------------------------------------------------------------------------\n    # Question 26 contains list of countries, value_counts to Series & DataFrame afterwards\n    #-------------------------------------------------------------------------        \n        title = tuples[26][0]\n        vals = survey2017[title].value_counts(normalize=True,sort=False)\n        df = pd.DataFrame(vals)\n        df = df.reset_index()\n        df.columns = ['Country', 'Counts']\n        df['ISO3'] = [get_country_code(country) for country in df.Country]\n        plotWorldMap(title, df.Country, df.Counts, df.ISO3)\n    else:\n    #-------------------------------------------------------------------------\n    # All othe questions except [11,17,21,22,26] has\/has not colon \":\" in its name\n    #-------------------------------------------------------------------------        \n        if t[0] == t[1][0]:\n            valueLabels = survey2017[t[1][0]].value_counts().keys().tolist()\n            valueCounts = survey2017[t[1][0]].value_counts(normalize=True).tolist()\n            valueCounts = [100*v for v in valueCounts]\n            # valueLabels are small amount then plot PieChart, else BarChart\n            if len(valueLabels)<=5: plotPieChart(t[0],valueLabels,valueCounts)\n            else: plotBarChart(t[0],valueLabels,valueCounts)\n        else:\n            valueLabels = [col.split(':')[0] for col in survey2017.columns if t[0] in col]\n            valueCounts = [survey2017[col].count() for col in survey2017.columns if t[0] in col]\n            sum_valueCounts = sum(valueCounts)\n            valueCounts = [100*vc\/sum_valueCounts for vc in valueCounts]\n            # valueLabels are small amount (7) then plot PieChart, else BarChart\n            if len(valueLabels)<=7: plotPieChart(t[0],valueLabels,valueCounts)\n            else: plotBarChart(t[0],valueLabels,valueCounts)","2c356289":"### Helper functions","425c0165":"### List of all unique questions","3d40ac74":"### Loop over all unique and sub columns","d98103f9":"### Starting with column handling"}}