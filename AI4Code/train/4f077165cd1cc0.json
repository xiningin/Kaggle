{"cell_type":{"30c4172c":"code","ab9a8d08":"code","958c1740":"code","5689f64c":"code","2275238c":"code","21e07032":"code","1d5d5faa":"code","12fc05bb":"code","f3991603":"code","7d0ff8f0":"code","1f1d9506":"code","12e14a16":"code","969abf0f":"code","723d4efd":"code","36925ebf":"code","18e3d9b9":"code","3599124b":"code","c407b0cf":"code","148298dc":"code","9498a798":"code","ebd5d825":"markdown","c1483eae":"markdown","fc826569":"markdown","9f2a18cd":"markdown","20bfb470":"markdown","8e14131c":"markdown","f2aed485":"markdown","d95f0683":"markdown","66e3209f":"markdown","3cb2be07":"markdown","b4697534":"markdown","02051d03":"markdown","87a18f84":"markdown","9d3f254e":"markdown","3846eea6":"markdown","c906d406":"markdown","40408c68":"markdown","8d2677d0":"markdown","fe7b1580":"markdown","78b3c5c1":"markdown","86ba0f73":"markdown"},"source":{"30c4172c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","ab9a8d08":"# load hourly data\nhourly_data = pd.read_csv('..\/input\/bike-sharing-dataset\/hour.csv')","958c1740":"# print some generic statistics about the data\nprint(f\"Shape of data: {hourly_data.shape}\")\nprint(f\"Number of missing values in the data:\\\n{hourly_data.isnull().sum().sum()}\")","5689f64c":"# get statistics on the numerical columns\nhourly_data.describe().T","2275238c":"preprocessed_data = hourly_data.copy()","21e07032":"seasons_mapping = {1: 'winter', 2: 'spring', 3: 'summer', 4: 'fall'}\npreprocessed_data['season'] = preprocessed_data['season'].apply(lambda x: seasons_mapping[x])","1d5d5faa":"yr_mapping = {0: 2011, 1: 2012}\npreprocessed_data['yr'] = preprocessed_data['yr'].apply(lambda x: yr_mapping[x])","12fc05bb":"weekday_mapping = {0: 'Sunday', 1: 'Monday', 2: 'Tuesday', \\\n3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'}\npreprocessed_data['weekday'] = preprocessed_data['weekday'].apply(lambda x: weekday_mapping[x])","f3991603":"weather_mapping = {1: 'clear', 2: 'cloudy', 3: 'light_rain_snow', 4: 'heavy_rain_snow'}\npreprocessed_data['weathersit'] = preprocessed_data['weathersit'].apply(lambda x: weather_mapping[x])","7d0ff8f0":"preprocessed_data['hum'] = preprocessed_data['hum'] * 100\npreprocessed_data['windspeed'] = preprocessed_data['windspeed'] * 67","1f1d9506":"cols = ['season', 'yr', 'weekday', 'weathersit', 'hum', 'windspeed']\npreprocessed_data[cols].sample(10, random_state=1)","12e14a16":"assert (preprocessed_data.casual + preprocessed_data.registered == preprocessed_data.cnt).all(), \\\n'Sum of casual and registered rides not equal to total number of rides'","969abf0f":"sns.distplot(preprocessed_data['registered'], label='registered')\nsns.distplot(preprocessed_data['casual'], label='casual')\nplt.legend()\nplt.xlabel('rides')\nplt.title(\"Rides distributions\")","723d4efd":"plot_data = preprocessed_data[['registered', 'casual', 'dteday']]\nax = plot_data.groupby('dteday').sum().plot(figsize=(10,6))\nax.set_xlabel(\"time\")\nax.set_ylabel(\"number of rides per day\")","36925ebf":"\"\"\"\nCreate new dataframe with necessary for plotting columns, and obtain\nnumber of rides per day, by grouping over each day\n\"\"\"\nplot_data = preprocessed_data[['registered', 'casual', 'dteday']]\nplot_data = plot_data.groupby('dteday').sum()\n\"\"\"\ndefine window for computing the rolling mean and standard deviation\n\"\"\"\nwindow = 7\nrolling_means = plot_data.rolling(window).mean()\nrolling_deviations = plot_data.rolling(window).std()\n\"\"\"\nCreate a plot of the series, where we first plot the series of rolling\nmeans, then we color the zone between the series of rolling means +- 2\nrolling standard deviations\n\"\"\"\nax = rolling_means.plot(figsize=(10,6))\n#ax.fill_between(rolling_means.index, rolling_means['registered'] + 2*rolling_deviations['registered'], \\\n#rolling_means['registered'] - 2*rolling_deviations['registered'], alpha = 0.2)\n#ax.fill_between(rolling_means.index, rolling_means['casual'] + 2*rolling_deviations['casual'], \\\n#rolling_means['casual'] - 2*rolling_deviations['casual'], alpha = 0.2)\nax.set_xlabel(\"time\")\nax.set_ylabel(\"number of rides per day\")","18e3d9b9":"# select relevant columns\nplot_data = preprocessed_data[['hr', 'weekday', 'registered', 'casual']]\n\"\"\"\ntransform the data into a format, in number of entries are computed as count,\nfor each distinct hr, weekday and type (registered or casual)\n\"\"\"\nplot_data = plot_data.melt(id_vars=['hr', 'weekday'], var_name='type', value_name='count')\n\"\"\"\ncreate FacetGrid object, in which a grid plot is produced.\nAs columns, we have the various days of the week,\nas rows, the different types (registered and casual)\n\"\"\"\ngrid = sns.FacetGrid(plot_data, row='weekday', col='type', height=2.5, aspect=2.5, \\\nrow_order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n# populate the FacetGrid with the specific plots\ngrid.map(sns.barplot, 'hr', 'count', alpha=0.5)","3599124b":"plot_data = preprocessed_data[['hr', 'season', 'registered', 'casual']]","c407b0cf":"plot_data = plot_data.melt(id_vars=['hr', 'season'], var_name='type', value_name='count')","148298dc":"grid = sns.FacetGrid(plot_data, row='season', col='type', height=2.5, aspect=2.5, \\\nrow_order=['spring', 'summer', 'fall', 'winter'])\ngrid.map(sns.barplot, 'hr', 'count', alpha=0.5)","9498a798":"plot_data = preprocessed_data[['weekday', 'season', 'registered', 'casual']]\nplot_data = plot_data.melt(id_vars=['weekday', 'season'], var_name='type', value_name='count')\ngrid = sns.FacetGrid(plot_data, row='season', col='type', height=2.5, aspect=2.5, \\\nrow_order=['spring', 'summer', 'fall', 'winter'])\ngrid.map(sns.barplot, 'weekday', 'count', alpha=0.5)","ebd5d825":"# Preprocessing Temporal and Weather Features\nThe seasons column contains values from 1 to 4, which encode, respectively, the Winter, Spring, Summer, and Fall seasons.  \nThe yr column contains the values 0 and 1 representing 2011 and 2012,  \nwhile the weekday column contains values from 0 to 6, with each one representing a day of the week (0: Sunday, 1: Monday, through to 6: Saturday).  \nFurthermore, we scale the hum column to values between 0 and 100 (as it represents the humidity percentage),  \nand the windspeed column to values between 0 and 67 (as those are the registered minimum and maximum wind speed):","c1483eae":"We can easily verify the relationship between *cnt and registered + casual* for each entry in the dataset by using the assert statement:","fc826569":"# Registered versus Casual Use Analysis  \nWe begin our analysis of the number of rides performed by registered users versus non-registered (or casual) ones. These numbers are represented in the ***registered and casual*** columns, respectively, with the ***cnt*** column representing the sum. ","9f2a18cd":"Create a Python dictionary for the yr column as well:","20bfb470":"Plot the number of rides distributed over ***hours by seasons***:","8e14131c":"Start by combining the hours and seasons. Create a subset of the initial data by selecting the hr, season, registered, and casual columns:","f2aed485":"# Analyzing Seasonal Impact on Rides","d95f0683":"Encode the weathersit values:","66e3209f":"We can visualize the results from our transformation by calling the sample() **method on the newly created dataset:","3cb2be07":"In the next step, map the season variable from a numerical to a nicely encoded categorical one. In order to do that, we create a Python dictionary, which contains the encoding, and then exploit the apply and lambda functions:","b4697534":"Plot the number of rides distributed over ***weekdays by seasons***:","02051d03":"Create a Python dictionary for the weekday column:","87a18f84":"As a first step, create a copy of the original dataset. This is done as we do not want a specific transformation to affect our initial data:","9d3f254e":"[credit: The Data Analysis Workshop](https:\/\/smile.amazon.com\/Data-Analysis-Workshop-state-art\/dp\/1839211385\/ref=sr_1_1?dchild=1&keywords=The+Data+Analysis+Workshop+Solve+business+problems+with+state-of-the-art+data+analysis+models&qid=1612045402&sr=8-1)","3846eea6":"unpivot the data from wide to long format:","c906d406":"Define the seaborn FacetGrid object, in which rows represent the different seasons and apply the seaborn.barplot() function to each of the FacetGrid elements:","40408c68":"Let's now focus on the distributions of the requests over separate hours and days of the week.","8d2677d0":"Finally, rescale the hum and windspeed columns:","fe7b1580":"Let's now focus on the evolution of rides over time. We can analyze the number of rides each day:","78b3c5c1":"We can take the rolling mean and standard deviation to smooth out the curves","86ba0f73":"We first take a look at their distributions:"}}