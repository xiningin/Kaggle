{"cell_type":{"2f4dc3fb":"code","c5a0679f":"code","5662ac9a":"code","75fcb1b0":"code","2906350f":"code","b713173a":"code","cbeafeae":"code","47a997ae":"code","53696fab":"code","cd448f50":"code","9da203a6":"code","1502be71":"markdown","20a64a69":"markdown","4e155464":"markdown","2c05d608":"markdown","347cec96":"markdown"},"source":{"2f4dc3fb":"import numpy as np\nimport pandas as pd\nfrom skimage.data import imread\nimport matplotlib.pyplot as plt","c5a0679f":"def rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)","5662ac9a":"pixels = np.array((0, 1, 1, 1, 1, 0, 0, 0, 1))\n\n# Concatenating a zero at the start and end of the array is to\n# make sure that the first changing is always from 0 to 1\npixels = np.concatenate([[0], pixels, [0]])\nprint('pixels:', pixels)\n\n# the array except the first element\nprint('pixels[1:]:', pixels[1:])\n# the array except the last element\nprint('pixels[:-1]:', pixels[:-1])\n\n# runs include indices to wherever 0s change to 1s or 1s change to 0s\nprint('where condition:', pixels[1:] != pixels[:-1])\nruns = np.where(pixels[1:] != pixels[:-1])\nprint('runs:', runs)\n\n# the purpose of adding 1 here is to make sure that the indices point to\n# the very first 1s or 0s of the 1s or 0s, this is needed because\n# np.where gets the indices of elements before changing\nruns = runs[0] + 1\nprint('runs = runs[0] + 1:', runs)\n\n# runs[1::2] --> runs[start:stop:step], thus 2 here is the step\n# thus runs[1::2] includes the indices of the changing from 1 to 0\nprint('runs[1::2]:', runs[1::2])\n\n# runs[::2] includes the indices for the changing from 0 to 1\nprint('runs[::2]:', runs[::2])\n\n# the length of 1s\nprint('runs[1::2]-runs[::2]:', runs[1::2] - runs[::2])\n\n# replace runs[1::2] with the lengths of consecutive 1s\nruns[1::2] -= runs[::2]\n\nprint('return:', ' '.join(str(x) for x in runs))","75fcb1b0":"def rle_decode(mask_rle, shape):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0] * shape[1], dtype=np.uint8)\n\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape)","2906350f":"mask_rle = ' '.join(str(x) for x in runs)\ns = mask_rle.split()\nprint('s:', s)\n\nprint('s[0:][::2]:', s[0:][::2])\nassert(s[0:][::2] == s[::2])\n\nprint('s[1:][::2]:', s[1:][::2])\nassert(s[1:][::2] == s[1::2])\n\nstarts = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\nprint('starts:', starts)\n\nrle_decode(mask_rle, (1, 9))","b713173a":"def rle_test():\n    for i in range(100):\n        data = np.random.randint(0, 2, (100,100))\n        data_rle_enc = rle_encode(data)\n        data_rle_dec = rle_decode(data_rle_enc, data.shape)\n        np.testing.assert_allclose(data, data_rle_dec)","cbeafeae":"rle_test()","47a997ae":"masks = pd.read_csv('..\/input\/train_ship_segmentations.csv')\nnum_masks = masks.shape[0]\nprint('number of training images', num_masks)\nmasks.head()","53696fab":"def display_img_and_masks(ImageId, ImgShape=(768, 768)):\n    img = imread('..\/input\/train\/' + ImageId)\n    img_masks = masks.loc[masks['ImageId'] == ImageId, 'EncodedPixels'].tolist()\n\n    # Take the individual ship masks and create a single mask array for all ships\n    all_masks = np.zeros(ImgShape)\n\n    for mask in img_masks:\n        # Note that NaN should compare as not equal to itself\n        if mask == mask:\n            all_masks += rle_decode(mask, ImgShape).T\n\n    fig, axarr = plt.subplots(1, 3, figsize=(15, 40))\n    axarr[0].axis('off')\n    axarr[1].axis('off')\n    axarr[2].axis('off')\n    axarr[0].imshow(img)\n    axarr[1].imshow(all_masks)\n    axarr[2].imshow(img)\n    axarr[2].imshow(all_masks, alpha=0.4)\n    plt.tight_layout(h_pad=0.1, w_pad=0.1)\n    plt.show()","cd448f50":"# image that has ships\nImageId = '000155de5.jpg'\ndisplay_img_and_masks(ImageId)","9da203a6":"# image that has no ship\nImageId = '00003e153.jpg'\ndisplay_img_and_masks(ImageId)","1502be71":"## Deciphering `rle_decode`","20a64a69":"## Testing `rle_encode` and `rle_decode`","4e155464":"## Deciphering `rle_encode`","2c05d608":"[Ref](https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode)","347cec96":"## Test above code with airbus ship challenge data\n\n[Ref](https:\/\/www.kaggle.com\/inversion\/run-length-decoding-quick-start)"}}