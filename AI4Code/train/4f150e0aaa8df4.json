{"cell_type":{"005ee7ba":"code","947fafe9":"code","63490a58":"code","7ce3d395":"code","aac54943":"code","adc3cd7e":"code","cf178b86":"code","74d535f0":"code","64d957c0":"code","f33048c1":"code","42f72298":"code","b3515dcc":"code","dbfee89c":"code","90689292":"code","713fdb88":"code","3f777973":"code","1e3f09b4":"code","741519a2":"code","1a09bf10":"code","3058de34":"code","74aac356":"code","9ac65c0f":"code","a0d61d7d":"code","6496cd30":"code","128c1d5e":"code","184dac2f":"code","e4145ef2":"code","38e2f964":"code","fa873bf7":"code","b475254d":"code","7d7eec9d":"code","dce2c000":"code","a013aa89":"code","24a2e350":"code","7c734203":"code","75d110fe":"code","9097fca7":"markdown","2b2cb7ea":"markdown","9302524a":"markdown","1217a55b":"markdown","ce9d25c6":"markdown","b757fd16":"markdown","20eddc0e":"markdown","45b2b573":"markdown","119b0517":"markdown","b8804aa0":"markdown","c6d4df68":"markdown","42b3eede":"markdown","827edb24":"markdown","fbec1d4a":"markdown","24fde05e":"markdown","0d1e5163":"markdown","7bb6585b":"markdown","d4254e3d":"markdown","807ca35d":"markdown","8546eb18":"markdown","f0dd04a0":"markdown","0bb49a16":"markdown","ce01178e":"markdown","e464cdc4":"markdown"},"source":{"005ee7ba":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n","947fafe9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","63490a58":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","7ce3d395":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","aac54943":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","adc3cd7e":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('\/kaggle\/input\/data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","cf178b86":"df1.head(5)","74d535f0":"plotPerColumnDistribution(df1, 10, 5)","64d957c0":"plotCorrelationMatrix(df1, 8)","f33048c1":"plotScatterMatrix(df1, 20, 10)","42f72298":"sns.pairplot(df1, hue='diagnosis',vars = ['radius_mean','concave points_mean','area_mean','smoothness_mean'])","b3515dcc":"# The first order of business now is to create new variables which you will then feed into the model functions\n# We will create training and test sets to both train our data on and then test our model as well.\n\nX = df1.drop(['diagnosis'],axis=1)#drop the target class from train set\nY = df1['diagnosis']#seperating out the target class\nprint(X.columns)","dbfee89c":"## Extra step to deal with null data\nX = X.dropna(axis=1) # axis-1 is running horizontal across columns. axis=0 is downwards across rows\nprint(X.columns)\n#NOTE : I was getting a 'null' error while making my model. I tried removing 'Unnamed: 32' just as I had \n# removed the 'diagnosis' column, however the error still crept up, so I used the old tried and trusted\n# .dropna() function.","90689292":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)\n#notice how the train_test_split function takes the test size and not the \n#size of the train size.Also 42 is the answer to everything.","713fdb88":"#Now that our sets to train are ready, we may just choose to look at their\n#new dimensions as well\nprint(X_train.shape)","3f777973":"print(Y_train.shape)","1e3f09b4":"# I love using the sns heatmap to visualize the null values\nsns.heatmap(X_train.isnull())","741519a2":"#Now to actually building the model\nfrom sklearn.svm import SVC #from support vector machine get support vector classifier\nfrom sklearn.metrics import classification_report, confusion_matrix #these will make sense later\n\nsvc_model = SVC() #initialize the code module\nsvc_model.fit(X_train,Y_train) #fit your data variables to the model","1a09bf10":"y_predict = svc_model.predict(X_test) # get 'y' by predict FOR the TEST values.\ncm = confusion_matrix(Y_test,y_predict) # we use the confusion matrix to check\n                                        #how our predicted y compares to the\n                                        # real one.\nsns.heatmap(cm,annot=True)","3058de34":"print(classification_report(Y_test,y_predict))","74aac356":"min_train = X_train.min()\nmin_train","9ac65c0f":"range_train = (X_train-min_train).max()\nrange_train","a0d61d7d":"X_train_scaled = (X_train-min_train)\/range_train\nX_train_scaled","6496cd30":"#without scaling\nsns.scatterplot(x=X_train['area_mean'],y=X_train['smoothness_mean'],hue=Y_train)","128c1d5e":"#with scaling\nsns.scatterplot(x=X_train_scaled['area_mean'],y=X_train_scaled['smoothness_mean'],hue=Y_train)","184dac2f":"#Now we need to do the same normalization for our TEST set\nmin_test = X_test.min()\nrange_test = (X_test-min_test).max()\nX_test_scaled = (X_test-min_test)\/range_test","e4145ef2":"#setting up our new SVC model\nsvc_model = SVC()\nsvc_model.fit(X_train_scaled,Y_train)","38e2f964":"y_predict = svc_model.predict(X_test_scaled)\ncm = confusion_matrix(Y_test,y_predict)\nsns.heatmap(cm,annot=True,fmt='d')","fa873bf7":"print(classification_report(Y_test,y_predict))\n# we get a 99% precision already.","b475254d":"param_grid = {'C':[0.1,1,10,100],'gamma':[0.1,1,0.01,0.001],'kernel':['rbf']}\nfrom sklearn.model_selection import GridSearchCV #read GridSearchCrossValidation\ngrid = GridSearchCV(SVC(),param_grid,)","7d7eec9d":"grid.fit(X_train_scaled,Y_train)","dce2c000":"grid.best_params_","a013aa89":"grid.best_estimator_","24a2e350":"grid_predictions = grid.predict(X_test_scaled)","7c734203":"cm = confusion_matrix(Y_test,grid_predictions)\nsns.heatmap(cm,annot=True)","75d110fe":"print(classification_report(Y_test,grid_predictions))","9097fca7":"Let's now visualize some of our new columns and compare with our previous X_train(without scaling)","2b2cb7ea":"Here the cases are seperated into malignant and benign cases. categorized according to the color, we can already see how some of the columns like 'area_mean' and 'concave points_mean' are good classifiers for our use case because we can 'see' a clear seperation in the two variables. It can be important here, to note why and how 'smoothness_mean' is not as good of a classifier when compared to the others. Learning to read whatever plot you create is a key Data Analysis skill.\n\nNext in line is to figure out a base model with any which variables that we prefer. The motive to build this model is not to predict anything but just to have something to compare against the final model that we will keep. However, we are better off taking some 'educated' guesses here.","9302524a":"****Evaluating our first test model****","1217a55b":"Kernel Selection is a rather important skill which comes in handy for many different kinds of classification models, especially Support Vector Machines.\nhttps:\/\/www.kdnuggets.com\/2016\/06\/select-support-vector-machine-kernels.html  \nThis is a great article, a quick 5 minute read to clarify how and why different kernels exist and how to pick one for yourself. We could add all kernels to the GridSearch function but that would be excessive and unnecessary computing power and time.  \n\nReading through documentation to learn what different parameters represent is both very energy draining and also a very crucial part of the job. Here we use refit and verbose parameters with GridSearchCV. Here are two links for the same:  \nhttps:\/\/stackoverflow.com\/questions\/26962050\/confused-with-repect-to-working-of-gridsearchcv  \nhttps:\/\/stackoverflow.com\/questions\/24121018\/sklearn-gridsearch-how-to-print-out-progress-during-the-execution   \nLesson learned : Documentation is not always super lear, get used to experimenting with such things to get a better feel of what they are about. Doing data science is the best way to learn data science.","ce9d25c6":"## The naked truth","b757fd16":"## Conclusion\nI started writing this kernel with the goal of creating something, I never had. Someone to tell me, how it all ties together.  \n\n'DOING' data science is very different from simply learning it, rather I might say that if you haven't DONE data science, you never really learned it.\nI hope I was able to clear somethings for the new people, I hope the old people read this and help me iron out my own mistakes.\n\nWe are all in this together!! I'll be more than happy to start a long conversation in the comments :D","20eddc0e":"Scatter and density plots:","45b2b573":"## Introduction\nThis is a humble attempt to try and make any reader, especially one new to the fields of data science, a little more aware of how things work together. How you go from a simple data table to actually predicting something.\n\nI simply started with a Kaggle Starter notebook for the Breast Cancer dataset and all the EDA you see in the beginning of this article was done by the Kaggle Bot. I start my own work, a little later.  \n\nIn this article, we will take the Breast Cancer dataset and learn about Support vector Machines and how to use them as we build our own prediction\/classification model.\n\nIf you really want to support research towards Breast Cancer please visit https:\/\/www.breastcancer.org\/ to learn more about the disease.","119b0517":"**Improving our model**\n\nThe 'spread' of our data is across ranges of many magnitudes. While on the one hand, we have a column with values betwwen 0.0 and 0.26, on the other hand there are columns with values ranging from 200 to 2500. Having such contrasting ranges can throw off our model's predictions.\n\nWe will use 'unity-based normalization' to solve this problem. We will essentially turn all the columns to a 0-1 range. This will allow a proper foundation for our prediction model.\n\nhttps:\/\/en.m.wikipedia.org\/wiki\/Feature_scaling","b8804aa0":"Here it is interesting to see that our first model has actually classified all points as 'benign'. From this point on, it will be beneficial to try and understand how we build our next models and how they contrast to this one.","c6d4df68":"**Improving our model, this time with hyperparameters.**","42b3eede":"As it is very nicely visible, we lost prediction power in our model.  \nLesson learned - 'Life is not all sunshine and rainbows'\n\nThe takeaway at this point is that our model can do the required task of properly classifying breast cancer cases. However if we do want to create a very fine tuned model to do our job, just to be sure, we need a lot more data. Not only that, we need a lot more experimentation time as well. We can see that our previous model where gamma was 'auto_deprecated' performed better than having a set gamma value. Even if we do decide to stick with our simpler model, we can be never sure of how it holds against a bigger dataset.\n\nMaking predictions and taking decisions upon them, has been,is and shall always be a dirty task. LOL\n\nHappy Data Hacking!!","827edb24":"Now you're ready to read in the data and use the plotting functions to visualize the data.","fbec1d4a":"## Exploratory Analysis ( Thank you KaggleBot for this )\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","24fde05e":"## Personal Work\n( From this point on, we are on our own - no more KaggleBot. )\n\nThe first thing we will do is to create a pairplot - The bot has already done that for us above but it used a complex function to do so and not only that, you can't tell the malignant from benign cases in the previous visualization.\nHere we will use Seaborn to create out plot and we will color it accordingly for the different cases. The agenda here is to get a 'bird-eye' view to maybe build intuition about what variables can really help us.","0d1e5163":"Distribution graphs (histogram\/bar graph) of sampled columns:","7bb6585b":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","d4254e3d":"Let's take a quick look at what the data looks like:","807ca35d":"Just with the simple improvement of our scaled features, our model has gotten better my many magnitudes. While before we had completely mis-classified all the malignant cases. Now, our model has only mis-classified a total of two cases. Let's also print the classification report for this new model ( we will get a number for this model's precision ).","8546eb18":"All machine learning modules packaged as Python libraries, have their unique set of hyperparameters. These 'parameters' are the gateway to fine tuning our models. The two such variables which concern us here are 'c' and 'gamma'.  \n\nEven though our model might already seem very strong, it is a good exercise to work with these fine tuning variables as well.\n\n**Refresher**  \n'c' - this is a measure of how much you want the model to penalize a wrong classification. A higher value of 'c' can lead to over training.  \n'gamma' - Sometimes it is fruitful to add weight to our data points. A higher gamma value will give a heavier 'weight' to points bunched closely together and also reduce the weightage to outlier points.\n\nNeedless to say, it can be a tedious task trying to manually figure out a perfect combination of these variables. At this point, you can rest assure there is a python library\/function to do everything and here we will use GridSearchCV to figure out the best set of hyperparameters for us.","f0dd04a0":"Correlation matrix:","0bb49a16":"The classification report only pushes further the fact that our model can NOT classify and identify malignant cases.","ce01178e":"### Let's check 1st file: \/kaggle\/input\/data.csv","e464cdc4":"There is 1 csv file in the current version of the dataset:\n"}}