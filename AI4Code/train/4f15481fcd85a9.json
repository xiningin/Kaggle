{"cell_type":{"faed3283":"code","f18755ea":"code","c30fab8b":"code","79b919a7":"code","86364468":"code","e26904b6":"code","5d68e2da":"code","cc825552":"code","21cdab3b":"code","36967242":"code","2ef9be89":"code","edff7524":"code","e6179b37":"code","c0c49adc":"code","fcec64eb":"code","99f0a273":"code","810165b8":"code","b886bde5":"markdown","68498eb0":"markdown","74db889e":"markdown","8b60850c":"markdown","e6feb232":"markdown","ec7678ff":"markdown","e6e480f4":"markdown","9dd33719":"markdown","42f59546":"markdown"},"source":{"faed3283":"import torch\nimport torch.nn.functional as F\nfrom torchvision import datasets,transforms\nfrom torch import nn\nimport matplotlib.pyplot as plt\nimport numpy as np","f18755ea":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","c30fab8b":"transform_train = transforms.Compose([transforms.Resize((32,32)),  #resises the image so it can be perfect for our model.\n                                      transforms.RandomHorizontalFlip(), # FLips the image w.r.t horizontal axis\n                                      transforms.RandomRotation(10),     #Rotates the image to a specified angel\n                                      transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)), #Performs actions like zooms, change shear angles.\n                                      transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2), # Set the color params\n                                      transforms.ToTensor(), # comvert the image to tensor so that it can work with torch\n                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) #Normalize all the images\n                               ])\n \n \ntransform = transforms.Compose([transforms.Resize((32,32)),\n                               transforms.ToTensor(),\n                               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n                               ])\ntraining_dataset = datasets.CIFAR10(root='.\/data', train=True, download=True, transform=transform_train) # Data augmentation is only done on training images\nvalidation_dataset = datasets.CIFAR10(root='.\/data', train=False, download=True, transform=transform)\n \ntraining_loader = torch.utils.data.DataLoader(training_dataset, batch_size=100, shuffle=True) # Batch size of 100 i.e to work with 100 images at a time\nvalidation_loader = torch.utils.data.DataLoader(validation_dataset, batch_size = 100, shuffle=False)","79b919a7":"# We need to convert the images to numpy arrays as tensors are not compatible with matplotlib.\ndef im_convert(tensor):  \n  image = tensor.cpu().clone().detach().numpy() # This process will happen in normal cpu.\n  image = image.transpose(1, 2, 0)\n  image = image * np.array((0.5, 0.5, 0.5)) + np.array((0.5, 0.5, 0.5))\n  image = image.clip(0, 1)\n  return image","86364468":"# Different classes in CIPHAR 10 dataset. \nclasses = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')","e26904b6":"# We iter the batch of images to display\ndataiter = iter(training_loader) # converting our train_dataloader to iterable so that we can iter through it. \nimages, labels = dataiter.next() #going from 1st batch of 100 images to the next batch\nfig = plt.figure(figsize=(25, 4)) \n\n# We plot 20 images from our train_dataset\nfor idx in np.arange(20):\n  ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[]) \n  plt.imshow(im_convert(images[idx])) #converting to numpy array as plt needs it.\n  ax.set_title(classes[labels[idx].item()])","5d68e2da":"class LeNet(nn.Module):\n    def __init__(self):\n      super().__init__()\n      self.conv1 = nn.Conv2d(3, 16, 3, 1, padding=1) # input is color image, hence 3 i\/p channels. 16 filters, kernal size is tuned to 3 to avoid overfitting, stride is 1 , padding is 1 extract all edge features.\n      self.conv2 = nn.Conv2d(16, 32, 3, 1, padding=1) # We double the feature maps for every conv layer as in pratice it is really good.\n      self.conv3 = nn.Conv2d(32, 64, 3, 1, padding=1)\n      self.fc1 = nn.Linear(4*4*64, 500) # I\/p image size is 32*32, after 3 MaxPooling layers it reduces to 4*4 and 64 because our last conv layer has 64 outputs. Output nodes is 500\n      self.dropout1 = nn.Dropout(0.5)\n      self.fc2 = nn.Linear(500, 10) # output nodes are 10 because our dataset have 10 different categories\n    def forward(self, x):\n      x = F.relu(self.conv1(x)) #Apply relu to each output of conv layer.\n      x = F.max_pool2d(x, 2, 2) # Max pooling layer with kernal of 2 and stride of 2\n      x = F.relu(self.conv2(x))\n      x = F.max_pool2d(x, 2, 2)\n      x = F.relu(self.conv3(x))\n      x = F.max_pool2d(x, 2, 2)\n      x = x.view(-1, 4*4*64) # flatten our images to 1D to input it to the fully connected layers\n      x = F.relu(self.fc1(x))\n      x = self.dropout1(x) # Applying dropout b\/t layers which exchange highest parameters. This is a good practice\n      x = self.fc2(x)\n      return x","cc825552":"model = LeNet().to(device) # run our model on cuda GPU for faster results\nmodel","21cdab3b":"criterion = nn.CrossEntropyLoss() # same as categorical_crossentropy loss used in Keras models which runs on Tensorflow\noptimizer = torch.optim.Adam(model.parameters(), lr = 0.001) # fine tuned the lr","36967242":"epochs = 15\nrunning_loss_history = []\nrunning_corrects_history = []\nval_running_loss_history = []\nval_running_corrects_history = []\n\nfor e in range(epochs): # training our model, put input according to every batch.\n  \n  running_loss = 0.0\n  running_corrects = 0.0\n  val_running_loss = 0.0\n  val_running_corrects = 0.0\n  \n  for inputs, labels in training_loader:\n    inputs = inputs.to(device) # input to device as our model is running in mentioned device.\n    labels = labels.to(device)\n    outputs = model(inputs) # every batch of 100 images are put as an input.\n    loss = criterion(outputs, labels) # Calc loss after each batch i\/p by comparing it to actual labels. \n    \n    optimizer.zero_grad() #setting the initial gradient to 0\n    loss.backward() # backpropagating the loss\n    optimizer.step() # updating the weights and bias values for every single step.\n    \n    _, preds = torch.max(outputs, 1) # taking the highest value of prediction.\n    running_loss += loss.item()\n    running_corrects += torch.sum(preds == labels.data) # calculating te accuracy by taking the sum of all the correct predictions in a batch.\n\n  else:\n    with torch.no_grad(): # we do not need gradient for validation.\n      for val_inputs, val_labels in validation_loader:\n        val_inputs = val_inputs.to(device)\n        val_labels = val_labels.to(device)\n        val_outputs = model(val_inputs)\n        val_loss = criterion(val_outputs, val_labels)\n        \n        _, val_preds = torch.max(val_outputs, 1)\n        val_running_loss += val_loss.item()\n        val_running_corrects += torch.sum(val_preds == val_labels.data)\n      \n    epoch_loss = running_loss\/len(training_loader) # loss per epoch\n    epoch_acc = running_corrects.float()\/ len(training_loader) # accuracy per epoch\n    running_loss_history.append(epoch_loss) # appending for displaying \n    running_corrects_history.append(epoch_acc)\n    \n    val_epoch_loss = val_running_loss\/len(validation_loader)\n    val_epoch_acc = val_running_corrects.float()\/ len(validation_loader)\n    val_running_loss_history.append(val_epoch_loss)\n    val_running_corrects_history.append(val_epoch_acc)\n    print('epoch :', (e+1))\n    print('training loss: {:.4f}, acc {:.4f} '.format(epoch_loss, epoch_acc.item()))\n    print('validation loss: {:.4f}, validation acc {:.4f} '.format(val_epoch_loss, val_epoch_acc.item()))\n\n","2ef9be89":"plt.style.use('ggplot')\nplt.plot(running_loss_history, label='training loss')\nplt.plot(val_running_loss_history, label='validation loss')\nplt.legend()","edff7524":"plt.style.use('ggplot')\nplt.plot(running_corrects_history, label='training accuracy')\nplt.plot(val_running_corrects_history, label='validation accuracy')\nplt.legend()","e6179b37":"import PIL.ImageOps","c0c49adc":"import requests\nfrom PIL import Image\n\nurl = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT76mSMtKQWGstcqGi-0kPWJyVBqz8RCp8SuplMipkidRY0z9Mc&usqp=CAU'\nresponse = requests.get(url, stream = True)\nimg = Image.open(response.raw)\nplt.imshow(img)","fcec64eb":"img = transform(img)  # applying the transformations on new image as our model has been trained on these transformations\nplt.imshow(im_convert(img)) # convert to numpy array for plt","99f0a273":"image = img.to(device).unsqueeze(0) # put inputs in device as our model is running there\noutput = model(image)\n_, pred = torch.max(output, 1)\nprint(classes[pred.item()])","810165b8":"\ndataiter = iter(validation_loader)\nimages, labels = dataiter.next()\nimages = images.to(device)\nlabels = labels.to(device)\noutput = model(images)\n_, preds = torch.max(output, 1)\n\nfig = plt.figure(figsize=(25, 4))\n\nfor idx in np.arange(20):\n  ax = fig.add_subplot(2, 10, idx+1, xticks=[], yticks=[])\n  plt.imshow(im_convert(images[idx]))\n  ax.set_title(\"{} ({})\".format(str(classes[preds[idx].item()]), str(classes[labels[idx].item()])), color=(\"green\" if preds[idx]==labels[idx] else \"red\"))","b886bde5":"Initializing GPU Usage","68498eb0":"**As seen the predictions on new images are really good. Maybe by running more epochs I can get better accuracy or some more hyper parameter tuning will help. Additionally I am sure that Transfer learning will yield much better accuracy, if I use Vgg16 for suppose. But for this case I wanted to code my own model. Even though LeNet is a old it is still a very good model to start with.**\n> I have build this on PyTorch but personally I like Tensorflow Keras more. Thats my opinion.\nLet me know the suggestions for hyper parameter tunning for the same model.","74db889e":"Input new image from web to check our model's accuracy","8b60850c":"Fitting our model with the inputs to generate output. \nDisplaying the progress. ","e6feb232":"Defining our Model","ec7678ff":"Transformations and Data Augmentation","e6e480f4":"Use the images from our validation dataset to check the precdictions","9dd33719":"In this notebook I am using the Cifar10 dataset to classify various images. \nI have coded the traditional LeNet model with some hyper parameter tuning for this purpose.\nAs seen I got 71% accuracy for this model and te model performed well on images it had never seen before. It correctly classified a random image from the internet.\nPlease find the code below","42f59546":"Converting the Input images to plot using plt"}}