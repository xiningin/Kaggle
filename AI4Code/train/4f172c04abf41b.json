{"cell_type":{"652c76f8":"code","69fbe3a0":"code","ed6ab5aa":"code","37c302fe":"code","ad54768c":"code","3c9a5782":"code","f29cc68c":"code","129ef05a":"code","658867ce":"code","c6152211":"code","c1344117":"code","bc344f25":"code","5b02e2ff":"code","8f448808":"code","f18bb252":"code","fda7e642":"code","5ff75cbd":"code","7101b36e":"code","80c7df9d":"markdown","08ec2014":"markdown","6f2b6bc8":"markdown","f31a09ef":"markdown","699917a4":"markdown"},"source":{"652c76f8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras import models, layers\nimport tqdm\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn.model_selection import KFold\nimport os\nimport os, shutil \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix","69fbe3a0":"path = '\/kaggle\/input\/challenges-in-representation-learning-facial-expression-recognition-challenge\/'\ndata = pd.read_csv(path+'icml_face_data.csv')\nemotions = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}\nclasses = dict(zip(range(0, 7), (((data[data[' Usage']=='Training']['emotion'].value_counts()).sort_index())\/len(data[data[' Usage']=='Training']['emotion'])).tolist()))","ed6ab5aa":"X = data.emotion\nkf = KFold(n_splits=6)\nfor train, test in kf.split(X):\n    print(\"%s %s\" % (train, test))","37c302fe":"print(data)","ad54768c":"# Function to parse data into right format\n# Output: Image in right shaped and normalized + labels\ndef parse_data(data):\n    image_array = np.zeros(shape=(len(data), 48, 48)) # 1\n    image_label = np.array(list(map(int, data['emotion'])))\n    \n    for i, row in enumerate(data.index):\n        image = np.fromstring(data.loc[row, ' pixels'], dtype=int, sep=' ')\n        image = np.reshape(image, (48, 48)) # 1\n        image_array[i] = image\n        \n    return image_array, image_label\n\n# Splitting the data into train, validation and testing set thanks to Usage column\ntrain_imgs, train_lbls = parse_data(data[data[\" Usage\"] == \"Training\"])\nval_imgs, val_lbls = parse_data(data[data[\" Usage\"] == \"PrivateTest\"])\ntest_imgs, test_lbls = parse_data(data[data[\" Usage\"] == \"PublicTest\"])","3c9a5782":"train_images = train_imgs.reshape((train_imgs.shape[0], 48, 48, 1))\ntrain_images = train_images.astype('float32')\/255\nval_images = val_imgs.reshape((val_imgs.shape[0], 48, 48, 1))\nval_images = val_images.astype('float32')\/255\ntest_images = test_imgs.reshape((test_imgs.shape[0], 48, 48, 1))\ntest_images = test_images.astype('float32')\/255","f29cc68c":"print(\"train shape\", np.shape(train_imgs))\nprint(\"validation shape\", np.shape(val_imgs))\nprint(\"validatio shape\", np.shape(val_imgs))","129ef05a":"print(train_imgs)","658867ce":"# os.mkdir(\"\/kaggle\/working\/imgs\")\n# data = np.array(train_imgs[:5])\n# i = 0\n# for px_map in data:\n#     i = i + 1\n#     px_map = np.reshape(px_map, (48, 48))\n#     image = Image.fromarray(px_map)\n#     image = image.convert('RGB')\n#     image.save('\/kaggle\/working\/imgs\/'+str(i)+'.bmp')","c6152211":"# Building a MLP model based on LeNet architecture \nmodel_mlp = keras.Sequential()\nmodel_mlp.add(layers.Flatten(input_shape=(48, 48, 1)))\nmodel_mlp.add(layers.Dense(units=120, activation='relu'))\nmodel_mlp.add(layers.Dense(units=84, activation='relu'))\nmodel_mlp.add(layers.Dense(units=7, activation = 'softmax'))\nmodel_mlp.compile(loss=keras.losses.SparseCategoricalCrossentropy(), optimizer=keras.optimizers.Adam(lr=1e-3), metrics=['accuracy'])\nmodel_mlp.summary()","c1344117":"# Training the model, and validating\nmodel_mlp.fit(train_imgs, train_lbls, \n          epochs=10, batch_size=32, \n          validation_data=(val_imgs, val_lbls), verbose=1)","bc344f25":"from keras.utils import to_categorical\ntrain_labels = to_categorical(train_lbls)\nval_labels = to_categorical(val_lbls)\ntest_labels = to_categorical(test_lbls)","5b02e2ff":"model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='relu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax'))","8f448808":"model_cnn.compile(optimizer=keras.optimizers.Adam(lr=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])\nmodel_cnn.summary()","f18bb252":"history = model_cnn.fit(train_images, train_labels,\n                    validation_data=(val_images, val_labels),\n                    class_weight = classes,\n                    epochs=100,\n                    batch_size=32)","fda7e642":"#Train accuracy and validation accuracy vs epoch graph\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","5ff75cbd":"test_prob = model_cnn.predict(test_images)\ntest_pred = np.argmax(test_prob, axis=1)\ntest_accuracy = np.mean(test_pred == test_lbls)\n\nprint(test_accuracy)","7101b36e":"conf_mat = confusion_matrix(test_lbls, test_pred)\npd.DataFrame(conf_mat, columns=emotions.values(), index=emotions.values())","80c7df9d":"MLP model","08ec2014":"1. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=50, batch_size=32<br>\n![image.png](attachment:678eed7c-f920-4f62-bc13-d1c206b9f77c.png) <br>\n2. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=50, batch_size=512<br>\n![image.png](attachment:6c9be1e0-835d-48e1-a91d-848b5118d962.png) <br>\n3. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=50, batch_size=32<br>\n![image.png](attachment:bf328f07-f836-43c5-980a-120fd0e7f081.png) <br>\n4. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-6), epochs=12, batch_size=512<br>\n![image.png](attachment:5be9ed4b-1cfc-4975-9fda-d9be8354965e.png) <br>\n5. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-6), epochs=12, batch_size=512<br>\n![image.png](attachment:f4a4a74f-60ab-4407-a207-07f743acf4fc.png) <br>\n6. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=12, batch_size=512<br>\n![image.png](attachment:2665dbac-03f2-42e2-91c6-19439d07c395.png) <br>\n7. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='selu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=12, batch_size=512<br>![image.png](attachment:f9ed17b8-b863-4b97-a9d8-5fc0277afd40.png)<br>\n8. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='elu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=100, batch_size=32<br>\n![image.png](attachment:5d3414db-5b6c-46f0-84b3-a25946b8c27a.png)<br>\n9. model_cnn = models.Sequential()\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu', input_shape=(48, 48, 1)))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.MaxPool2D((2, 2)))\nmodel_cnn.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel_cnn.add(layers.Flatten())\nmodel_cnn.add(layers.Dense(64, activation='selu'))\nmodel_cnn.add(layers.Dense(7, activation='softmax')), optimizers.Adam(lr=1e-3), epochs=100, batch_size=32<br>\n![image.png](attachment:22e0dc14-2d00-4260-aef7-210dafc0db88.png)\n\n\u041a\u0440\u043e\u0441-\u0432\u0430\u043b\u0456\u0434\u0430\u0446\u0456\u044f: \u043f\u0440\u0438 \u0437\u043c\u0456\u043d\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 n_splits \u0437\u043c\u0456\u043d\u044e\u0454\u0442\u044c\u0441\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0456. \u0412 \u043d\u0430\u0448\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0432\u0456\u043d \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u0454 6, \u0442\u043e\u0431\u0442\u043e \u0432 \u043d\u0430\u0441 \u0454 6 \u0432\u0438\u0431\u0456\u0440\u043e\u043a \u043d\u0430 \u044f\u043a\u0456 \u0440\u043e\u0437\u043f\u043e\u0434\u0456\u043b\u0435\u043d\u0438\u0439 \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \u041c\u0438 \u0440\u043e\u0437\u0433\u043b\u044f\u0434\u0430\u0454\u043c\u043e 6 \u0435\u043c\u043e\u0446\u0456\u0439 \u0442\u043e\u043c\u0443 \u0449\u043e \u0442\u0430\u043a \u0432\u0438\u0431\u0456\u0440\u043a\u0430 \u043e\u0446\u0456\u043d\u043a\u0438 \u044f\u043a\u043e\u0441\u0442\u0456 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0443\u0434\u0435 \u0435\u043a\u0432\u0430\u0432\u0456\u043b\u0435\u043d\u0442\u043d\u0430.<br>\n\u0417\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0430 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430 \u043c\u0435\u0440\u0435\u0436\u0430: \u043f\u0440\u0438 \u0437\u043c\u0456\u043d\u0430 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u0448\u0430\u0440\u0456\u0432 \u043c\u0430\u0439\u0436\u0435 \u043d\u0435 \u0432\u043f\u043b\u0438\u0432\u0430\u0454 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0430\u043b\u0435 \u043f\u0440\u0438 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u0456 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043d\u0435\u0439\u0440\u043e\u043d\u0456\u0432 \u0432 \u0448\u0430\u0440\u0430\u0445 \u0434\u043e 128 \u0432 \u0434\u0435\u044f\u043a\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0456\u044f\u0445 \u0417\u041d\u041c \u043d\u0435 \u043f\u0440\u0430\u0446\u044e\u0454, \u0437\u043c\u0456\u043d\u0430 \u0432\u0438\u0434\u0456\u0432 \u0444\u0443\u043d\u043a\u0446\u0456\u0439 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0456\u0457: \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u044e\u0447\u0438 sigmoid \u0434\u0430\u043d\u0456 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0431\u0438\u0432\u0430\u044e\u0442\u044c\u0441\u044f \u0456 \u043e\u0441\u0442\u0430\u0442\u043e\u0447\u0456 \u0432\u0442\u0440\u0430\u0442\u0438 \u0434\u0443\u0436\u0435 \u0432\u0435\u043b\u0438\u043a\u0456, \u0449\u043e \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e overfitting, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432 \u043d\u0430\u0441 \u043d\u0435 \u0431\u0456\u043d\u0430\u0440\u043d\u0430 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0434\u0430\u043d\u0438\u0445.<br>\n\n1. \u0412 \u0447\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0442\u0438\u043f\u0456\u0432 \u0448\u0430\u0440\u0456\u0432 \u0437\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043c\u0435\u0440\u0435\u0436?<br>\n\u0417\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u0438\u0439 \u0448\u0430\u0440 \u0454 \u043e\u0441\u043d\u043e\u0432\u043d\u0438\u043c \u0431\u0443\u0434\u0456\u0432\u0435\u043b\u044c\u043d\u0438\u043c \u0431\u043b\u043e\u043a\u043e\u043c \u0417\u041d\u041c.<br>\u0410\u0433\u0440\u0435\u0433\u0443\u0432\u0430\u043b\u044c\u043d\u0438\u0439 \u0448\u0430\u0440 \u0441\u043b\u0443\u0433\u0443\u0454 \u043f\u043e\u0441\u0442\u0443\u043f\u043e\u0432\u043e\u043c\u0443 \u0441\u043a\u043e\u0440\u043e\u0447\u0435\u043d\u043d\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0440\u043e\u0437\u043c\u0456\u0440\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044f \u0434\u043b\u044f \u0437\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432 \u0442\u0430 \u043e\u0431'\u0454\u043c\u0443 \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u044c \u0443 \u043c\u0435\u0440\u0435\u0436\u0456, \u0456 \u0432\u0456\u0434\u0442\u0430\u043a \u0442\u0430\u043a\u043e\u0436 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044e \u043f\u0435\u0440\u0435\u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f.<br>\u0428\u0430\u0440 \u0437\u0440\u0456\u0437\u0430\u043d\u0438\u0445 \u043b\u0456\u043d\u0456\u0439\u043d\u0438\u0445 \u0432\u0443\u0437\u043b\u0456\u0432 \u043f\u043e\u0441\u0438\u043b\u044e\u0454 \u043d\u0435\u043b\u0456\u043d\u0456\u0439\u043d\u0456 \u0432\u043b\u0430\u0441\u0442\u0438\u0432\u043e\u0441\u0442\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0443\u0445\u0432\u0430\u043b\u0435\u043d\u043d\u044f \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u0456 \u043c\u0435\u0440\u0435\u0436\u0456 \u0432 \u0446\u0456\u043b\u043e\u043c\u0443, \u043d\u0435 \u0437\u0430\u0447\u0456\u043f\u0430\u044e\u0447\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0438\u0432\u043d\u0438\u0445 \u043f\u043e\u043b\u0456\u0432 \u0437\u0433\u043e\u0440\u0442\u043a\u043e\u0432\u043e\u0433\u043e \u0448\u0430\u0440\u0443.<br>\u041d\u0435\u0439\u0440\u043e\u043d\u0438 \u0443 \u043f\u043e\u0432\u043d\u043e\u0437'\u0454\u0434\u043d\u0430\u043d\u043e\u043c\u0443 \u0448\u0430\u0440\u0456 \u043c\u0430\u044e\u0442\u044c \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u0443\u0441\u0456\u043c\u0430 \u0437\u0431\u0443\u0434\u0436\u0435\u043d\u043d\u044f\u043c\u0438 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u0448\u0430\u0440\u0443, \u044f\u043a \u0446\u0435 \u043c\u043e\u0436\u043d\u0430 \u0431\u0430\u0447\u0438\u0442\u0438 \u0443 \u0437\u0432\u0438\u0447\u0430\u0439\u043d\u0438\u0445 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u0435\u0440\u0435\u0436\u0430\u0445. \u0407\u0445\u043d\u0456 \u0437\u0431\u0443\u0434\u0436\u0435\u043d\u043d\u044f \u0432\u0456\u0434\u0442\u0430\u043a \u043c\u043e\u0436\u0435 \u0431\u0443\u0442\u0438 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0432\u0430\u043d\u043e \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u0438\u043c \u043c\u043d\u043e\u0436\u0435\u043d\u043d\u044f\u043c, \u0437\u0430 \u044f\u043a\u0438\u043c \u0441\u043b\u0456\u0434\u0443\u0454 \u0437\u0441\u0443\u0432 \u0443\u043f\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u043e\u0441\u0442\u0456.<br>\u0428\u0430\u0440 \u0432\u0442\u0440\u0430\u0442 \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0454, \u044f\u043a \u0442\u0440\u0435\u043d\u0443\u0432\u0430\u043d\u043d\u044f \u0448\u0442\u0440\u0430\u0444\u0443\u0454 \u0432\u0456\u0434\u0445\u0438\u043b\u0435\u043d\u043d\u044f \u043c\u0456\u0436 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u0438\u043c\u0438 \u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u0436\u043d\u0456\u043c\u0438 \u043c\u0456\u0442\u043a\u0430\u043c\u0438, \u0456 \u0454, \u044f\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u043b\u044c\u043d\u0438\u043c \u0448\u0430\u0440\u043e\u043c. \u0414\u043b\u044f \u0440\u0456\u0437\u043d\u0438\u0445 \u0437\u0430\u0432\u0434\u0430\u043d\u044c \u0443 \u043d\u044c\u043e\u043c\u0443 \u043c\u043e\u0436\u0443\u0442\u044c \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0440\u0456\u0437\u043d\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0432\u0442\u0440\u0430\u0442 (\u043d\u0430\u0447\u0430\u0441\u0442\u0456\u0448\u0435: softmax \u0442\u0430 sigmoid).<br>\n2. \u042f\u043a\u0456 \u043e\u0441\u043d\u043e\u0432\u043d\u0456 \u0435\u0442\u0430\u043f\u0438 \u0442\u0438\u043f\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0454\u043a\u0442\u0443 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f?<br>\n\u0411\u0456\u0437\u043d\u0435\u0441-\u0430\u043d\u0430\u043b\u0456\u0437, \u0430\u043d\u0430\u043b\u0456\u0437 \u0442\u0430 \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u0438\u0445, \u043c\u043e\u0434\u0435\u043b\u044e\u0432\u0430\u043d\u043d\u044f, \u043e\u0446\u0456\u043d\u043a\u0430 \u0440\u0456\u0448\u0435\u043d\u043d\u044f, \u0432\u043f\u0440\u043e\u0432\u0430\u0434\u0436\u0435\u043d\u043d\u044f.","6f2b6bc8":"CNN model","f31a09ef":"Image files generation","699917a4":"https:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html"}}