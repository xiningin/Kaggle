{"cell_type":{"60a1b950":"code","a5b90162":"code","486d445a":"code","c2001f12":"code","3b9b5b69":"code","3496192b":"code","47713769":"code","1d32ec64":"code","28a9258a":"code","d637e944":"code","e8f775ff":"code","e0621ef8":"code","998f09c2":"code","5de160a6":"code","a654ad36":"code","6e71d9ad":"code","db1c53b7":"code","fb252728":"code","d1efbd9f":"code","c8973039":"code","63b92d45":"code","1a5c73e3":"code","a6095172":"code","f3d9414c":"code","55a8f065":"code","02118053":"code","680e2110":"code","cf3e22db":"code","e5376c75":"code","636d8103":"code","ee8d6525":"code","4398eb52":"code","0d10cfd3":"code","bc9d64ce":"code","cabeb9ef":"code","1fb96913":"code","4d1ff801":"code","1d1a018a":"code","b8715b8a":"code","14eeae39":"code","e2ca1e06":"code","01a784c0":"code","d5f4067b":"code","f58d9276":"code","96f65536":"code","0ac899ef":"code","74b231ea":"code","2d37bc8a":"code","77c94a66":"code","ce58298c":"code","2d4b0af6":"code","97ec649b":"code","c6da24bd":"code","4a6e3d5c":"code","a4d5c359":"code","a06a91b8":"code","0684eba9":"code","85aabfbb":"code","3608d477":"code","f4899209":"code","ee8c86ef":"markdown","cb65eb2b":"markdown","a5c87f71":"markdown","926d54c0":"markdown","783c75fe":"markdown","f36e78ea":"markdown","bb55aa2b":"markdown","625b1cb4":"markdown","db453512":"markdown","fc26d5f1":"markdown","03cf9f1d":"markdown","2d375432":"markdown","9d06d7a2":"markdown","af0235d1":"markdown","ba5c4d6c":"markdown","a899201f":"markdown","b89cd53d":"markdown","a030beab":"markdown","da7b8a4b":"markdown"},"source":{"60a1b950":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline                                 \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5b90162":"df = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf.head()","486d445a":"df.sample(7)","c2001f12":"# look for missing values\ndf.isnull().sum()","3b9b5b69":"df.info()","3496192b":"df.describe()","47713769":"# Rename column labels\ndf.columns = ['gender','race','parent_education','lunch_type','test_completed','math_score','reading_score','writing_score']","1d32ec64":"df.shape","28a9258a":"df.columns","d637e944":"df['race'].unique()","e8f775ff":"df.hist()","e0621ef8":"df.groupby(['gender']).size()","998f09c2":"teju = df.corr()\nteju","5de160a6":"sns.heatmap(teju,annot=True)","a654ad36":"# Create a new column average_score\ndf['average_score'] = (df['reading_score'] + df['math_score'] + df['writing_score'])\/3\n\n# convert average_score to categorical variable # Poor:0~40 Average:40~60 Good:60~80 Excellent:80~100\ndf['grade'] = 'na'\ndf.loc[(df.average_score >= 80) & (df.average_score <= 100), 'grade'] = 'excellent' \ndf.loc[(df.average_score >= 60) & (df.average_score < 80), 'grade'] = 'good' \ndf.loc[(df.average_score >= 40) & (df.average_score < 60), 'grade'] = 'average'\ndf.loc[(df.average_score >= 0) & (df.average_score < 40), 'grade'] = 'poor'\ndf.head()","6e71d9ad":"# Number of Students in each Grade category\nplt.figure(figsize=(8,6))\nsns.countplot(df.grade, order=[\"poor\",\"average\",\"good\",\"excellent\"], palette='Set1')\nplt.title('Grade - Number of Students',fontsize=20)\nplt.xlabel('Grade', fontsize=16)\nplt.ylabel('Number of Student', fontsize=16)","db1c53b7":"# Gender Countplot\nplt.figure(figsize=(12,12))\nsns.countplot(df.gender, palette='Set1')\nplt.title('Gender Countplot ',fontsize=14)\nplt.xlabel('Gender of student', fontsize=10)\nplt.ylabel('Number of Student', fontsize=10)\n","fb252728":"# Race\/Ethnicity Countplot\nplt.figure(figsize=(10,10))\nsns.countplot(df.race, order = [\"group A\",\"group B\",\"group C\",\"group D\",\"group E\"], palette='Set1')\nplt.title('Race of student - Number of Student',fontsize=14)\nplt.xlabel('Race of student', fontsize=10)\nplt.ylabel('Number of Student', fontsize=10)","d1efbd9f":"plt.figure(figsize=(30,20))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\n\nplt.subplot(142)\nplt.title('Ethinicity',fontsize = 20)\ndf['race'].value_counts().plot.pie(autopct=\"%1.1f%%\")","c8973039":"plt.figure(figsize=(10,6))\nplt.title('Correlation')\nsns.heatmap(teju,annot=True,cmap='viridis',linecolor='red')\nplt.xticks(rotation=90)\nplt.yticks(rotation=90)\nplt.show()","63b92d45":"plt.figure(figsize=(10,6))\nsns.violinplot(x=df['gender'],y=df['math_score'],split=True)\nsns.despine(left=True)\nplt.show()","1a5c73e3":"sns.swarmplot(x=df['gender'],y=df['math_score'])\nplt.show()","a6095172":"plt.figure(figsize=(10, 8))\nplt.scatter(df['writing_score'], df['math_score'])\nplt.xlabel(\"Writing_Score\", fontsize=16)\nplt.ylabel(\"Math_Score\", fontsize=16)\nplt.show()","f3d9414c":"plt.figure(figsize=(10, 8))\nplt.scatter(df['reading_score'], df['writing_score'])\nplt.xlabel(\"Reading Score\", fontsize=16)\nplt.ylabel(\"Writing Score\", fontsize=16)\nplt.show()","55a8f065":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x='math_score',y='reading_score', hue='gender',data=df, palette='viridis')","02118053":"plt.figure(figsize=(10,6))\nsns.violinplot(x=df['gender'],y=df['reading_score'],split=True)\nsns.despine(left=True)\nplt.show()\n\nsns.swarmplot(x=df['gender'],y=df['reading_score'])\nplt.show()","680e2110":"\n#Now exploring the Writing Score:\np= sns.countplot(x = \"writing_score\" , data = df , palette = \"muted\")\n_ = plt.setp(p.get_xticklabels(),rotation = 90)","cf3e22db":"#Providing a passingmark criteria which will be used to categorize the students\npassmarks = 35","e5376c75":"# Now students passing the Writing Exam:\ndf['WritingPassedStatus'] = np.where(df['writing_score']<passmarks , 'Failed!','Passed!')\ndf.WritingPassedStatus.value_counts()","636d8103":"fig, axs = plt.subplots(1, 3, figsize=(16, 5), sharey=True)\naxs[0].hist(df[\"math_score\"], bins=20)\naxs[0].set_title(\"Math score\")\naxs[1].hist(df[\"reading_score\"], bins=20)\naxs[1].set_title(\"Reading score\")\naxs[2].hist(df[\"writing_score\"], bins=20)\naxs[2].set_title(\"Writing score\")\nfig.suptitle(\"Distributed exam scores\")","ee8d6525":"sns.relplot(x='reading_score', y = 'writing_score', data = df)","4398eb52":"sns.relplot(x='writing_score', y = 'reading_score', data = df)","0d10cfd3":"df[\"Total marks\"] = df[\"math_score\"] + df[\"reading_score\"] + df[\"writing_score\"]\ndf[\"Percentage\"] = df[\"Total marks\"] \/ 3\ndf.head()","bc9d64ce":"sns.boxenplot(x=\"lunch_type\", y=\"Percentage\", data=df)","cabeb9ef":"sns.boxenplot(x='test_completed', y='Percentage',data = df, palette = \"hls\")","1fb96913":"sns.pairplot(df)","4d1ff801":"fig, axs = plt.subplots(1, 3, figsize=(15, 6), sharey=True)\nsns.barplot(x='gender',y='math_score',data=df, ax=axs[0])\nsns.barplot(x='gender',y='reading_score',data=df, ax=axs[1])\nsns.barplot(x='gender',y='writing_score',data=df, ax=axs[2])","1d1a018a":"# Race vs Math_score, Reading_score, Writing_score, Average_score\nsns.pairplot(df,hue = 'parent_education', diag_kind = 'kde', plot_kws = {'alpha': 0.6, 's': 80, 'edgecolor': 'k'},height = 4);","b8715b8a":"# Preparation Test status  vs Math_score\nsns.FacetGrid(df, hue=\"test_completed\",size=3).map(sns.distplot,\"math_score\").add_legend()\nplt.show()\n# Preparation Test status  vs Reading_score\nsns.FacetGrid(df, hue=\"test_completed\",size=3).map(sns.distplot,\"reading_score\").add_legend()\nplt.show()\n# Preparation Test status  vs Writing_score\nsns.FacetGrid(df, hue=\"test_completed\",size=3).map(sns.distplot,\"writing_score\").add_legend()\nplt.show()\n# Preparation Test status  vs Average_score\nsns.FacetGrid(df, hue=\"test_completed\",size=3).map(sns.distplot,\"average_score\").add_legend()\nplt.show()","14eeae39":"fig,ax = plt.subplots(figsize=(5,5))\nax.pie(df[\"WritingPassedStatus\"].value_counts(),labels=['P','F'],explode=(0.05,0.05),autopct='%1.1f%%',shadow=True,startangle=90)\nax.axis('equal')  \nplt.tight_layout()\nplt.legend()\nplt.show()","e2ca1e06":"plt.figure(figsize=(16,14))\nsns.kdeplot(df.reading_score, df.writing_score)","01a784c0":"plt.figure(figsize=(16,12))\nsns.jointplot(x='reading_score',y='writing_score',data=df)","d5f4067b":"df.head(1)","f58d9276":"X = df[['gender','race','parent_education','lunch_type','test_completed','math_score','reading_score']]","96f65536":"y = df['writing_score']","0ac899ef":"df.head(4)","74b231ea":"df['gender'].replace({'male':'0','female':'1'},inplace=True)","2d37bc8a":"df['race'].replace({'group A':'1','group B':'2', 'group C':'3',\n                               'group D':'4','group E':'5'},inplace=True)","77c94a66":"df['lunch_type'].replace({'free\/reduced':'0','standard':'1'},inplace=True)","ce58298c":"df['test_completed'].replace({'none':'0','completed':'1'},inplace=True)","2d4b0af6":"df['parent_education'].replace({'some high school':'1','high school':'1',\"associate's degree\":'2',\n                                        'some college':'3',\"bachelor's degree\":'4',\"master's degree\":'5'},inplace=True)","97ec649b":"\n# Split the data to train and test\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","c6da24bd":"# implementation of Linear Regression model using scikit-learn and K-fold for stable model\nfrom sklearn.linear_model import LinearRegression\nkfold = model_selection.KFold(n_splits=10)\nlr = LinearRegression()\nscoring = 'r2'\nresults = model_selection.cross_val_score(lr, X, y, cv=kfold, scoring=scoring)\nlr.fit(X_train,y_train)\nlr_predictions = lr.predict(X_test)\nprint('Coefficients: \\n', lr.coef_)","4a6e3d5c":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, lr_predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, lr_predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lr_predictions)))","a4d5c359":"from sklearn.metrics import r2_score\nprint(\"R_square score: \", r2_score(y_test,lr_predictions))","a06a91b8":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor(random_state = 42)\ndtr.fit(X_train,y_train)\ndtr_predictions = dtr.predict(X_test) \n\n# R^2 Score\nprint(\"R_square score: \", r2_score(y_test,dtr_predictions))","0684eba9":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100)\nrfr.fit(X_train,y_train)\nrfr_predicitions = rfr.predict(X_test) \n\n# R^2 Score\nprint(\"R_square score: \", r2_score(y_test,rfr_predicitions))","85aabfbb":"from sklearn import ensemble\nclf = ensemble.GradientBoostingRegressor(n_estimators = 400, max_depth = 5, min_samples_split = 2,\n          learning_rate = 0.1, loss = 'ls')\nclf.fit(X_train, y_train)\nclf_predicitions = clf.predict(X_test) \nprint(\"R_square score: \", r2_score(y_test,clf_predicitions))","3608d477":"y = np.array([r2_score(y_test,lr_predictions),r2_score(y_test,dtr_predictions),r2_score(y_test,rfr_predicitions),\n           r2_score(y_test,clf_predicitions)])\nx = [\"LinearRegression\",\"RandomForest\",\"DecisionTree\",\"Gradient Boost\"]\nplt.bar(x,y)\nplt.scatter(x,y)\nplt.title(\"Comparison of Regression Algorithms\")\nplt.ylabel(\"r2_score\")\nplt.show()","f4899209":"print(r2_score(y_test,lr_predictions))\nprint(r2_score(y_test,dtr_predictions))\nprint(r2_score(y_test,rfr_predicitions))\nprint(r2_score(y_test,clf_predicitions))\n\n\n#Best model here is linear regression > random forest > Gradient Boosting > Decision Tree","ee8c86ef":"# Train model(Linear regression)","cb65eb2b":"# Decision Trees","a5c87f71":"# Density Plot","926d54c0":"# Gardient Boosting","783c75fe":"# Violin and Swarmplot","f36e78ea":"# BOXENPLOT","bb55aa2b":"# HISTOGRAM","625b1cb4":"# FACEGRID","db453512":"# RELPLOT","fc26d5f1":"# HEATMAP","03cf9f1d":"# VIOLIN AND SWARMPLOT","2d375432":"# SCATTER PLOT","9d06d7a2":"# Countplot","af0235d1":"# Thank You!","ba5c4d6c":"# Compare between all the models that we discuss above","a899201f":"# PIECHART","b89cd53d":"# JOINTPLOT","a030beab":"# BARPLOT","da7b8a4b":"# Random Forest"}}