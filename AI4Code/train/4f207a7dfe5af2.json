{"cell_type":{"b214a8d8":"code","ee7abc87":"code","529c3df3":"code","48d53ec2":"code","73a9ea6f":"code","797d8d0f":"code","495472c1":"code","7c3cb523":"code","28160345":"code","46627005":"code","2eff27ca":"code","026be2a5":"code","21aae3c6":"code","14ce303e":"code","d22cb8e7":"code","d29b38fc":"code","369990e3":"code","2beaee5d":"code","7256678a":"code","7e37a8c9":"code","bbd959d0":"code","85120333":"code","15e5e187":"code","918375b1":"code","3be64274":"code","fee0a51b":"code","5dfcdff4":"markdown","45445915":"markdown","d0388308":"markdown","7f59ddd9":"markdown","27b47b40":"markdown","0b7ce38a":"markdown","9f3f293f":"markdown","34dec0aa":"markdown","71e02ad3":"markdown","7345512e":"markdown","0141f6c2":"markdown","763a8491":"markdown","22cfd5ba":"markdown"},"source":{"b214a8d8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport glob\nimport os\n%matplotlib inline","ee7abc87":"path = '\/kaggle\/input'\nall_files = glob.glob(os.path.join(path, \"*.csv\")) \ndf = pd.concat([pd.read_csv(f) for f in all_files], axis=1) #concatenates Verticaly by columns","529c3df3":"df.shape","48d53ec2":"# There will be repeated columns as each csv file had a date and unixtimestamp column\ndf.head()","73a9ea6f":"#delete the duplicated columns (in this case it was Date(UTC) and UnixTimeStamp)\ndf = df.loc[:,~df.columns.duplicated()]\ndf","797d8d0f":"df.shape","495472c1":"def data_inv(df):\n    print('dataframe: ',df.shape[0])\n    print('dataset variables: ',df.shape[1])\n    print('-'*10)\n    print('dateset columns: \\n')\n    print(df.columns)\n    print('-'*10)\n    print('data-type of each column: \\n')\n    print(df.dtypes)\n    print('-'*10)\n    print('missing rows in each column: \\n')\n    c=df.isnull().sum()\n    print(c[c>0])\ndata_inv(df)","7c3cb523":"# Price and transac_value are objects, probably because python cannot read '1,006.41' as a string or float because there is both\n# a ',' and a '.'   so we need to replace the ','\ndf['Price'] = df['Price'].str.replace(',','')\n# after that it removes the ',' but remains an object, so we change it to float\ndf['Price'] = df['Price'].astype(float)","28160345":"df['transac_fee'] = df['transac_fee'].astype(float)\ndisplay(df['transac_fee'])","46627005":"#Create a datatime type of column from the unixtimestamp\ndf['date'] = pd.to_datetime(df['UnixTimeStamp'], unit='s')\ndf","2eff27ca":"# Price is the same as price_history_usd so we are gonna drop the later and we are also going to drop Date(UTC) since we \n# now have a proper datetime column called 'date'. We are, however, keep unixtimestamp to use in correlation, because it wont read 'date'\ndf = df.drop(['price_history_usd', 'Date(UTC)', 'supply_growth', 'gas_limit', 'data_size' ], axis=1)\ndf.describe()","026be2a5":"f, ax = plt.subplots(figsize=(20, 6))\nax = sns.lineplot(x=\"date\", y=\"Price\", data=df)\n#ax.set(yscale=\"log\")\nax2 = ax.twinx()\nax2 = sns.lineplot(x=\"date\", y=\"unique_adresses\", data=df, color='r')\nax2.grid(b=False)\nplt.show()","21aae3c6":"f, ax = plt.subplots(figsize=(20, 6))\nax = sns.lineplot(x=\"date\", y=\"Price\", data=df)\nax.set(yscale=\"log\")\nax2 = ax.twinx()\nax2 = sns.lineplot(x=\"date\", y=\"transac_value\", data=df, color='r')\nax2.set(yscale=\"log\")\nax2.grid(b=False)\nplt.show()","14ce303e":"#finding correlation between variables\ncorr_inputs= df.loc[:, df.columns != 'Price']\ncorr = corr_inputs.corr()","d22cb8e7":"plt.figure(figsize=(16,12))\nsns.heatmap(corr, annot =  True, cmap=\"BrBG\", fmt=\".2f\")\n","d29b38fc":"from sklearn.linear_model import LinearRegression","369990e3":"df.columns","2beaee5d":"inputs = df[['UnixTimeStamp','hx_rate','transac_value','unique_adresses']]\ntarget= df['Price']","7256678a":"reg = LinearRegression()\nreg.fit(inputs, target)","7e37a8c9":"reg.score(inputs,target)","bbd959d0":"def adj_r2(x,y):\n    r2 = reg.score(x,y)\n    n = x.shape[0]\n    p = x.shape[1]\n    adjusted_r2 = 1-(1-r2)*(n-1)\/(n-p-1)\n    return adjusted_r2","85120333":"adj_r2(inputs,target)","15e5e187":"from sklearn.feature_selection import f_regression","918375b1":"f_regression(inputs,target)","3be64274":"p_values = f_regression(inputs,target)[1]\np_values.round(3)","fee0a51b":"reg_summary = pd.DataFrame(data = inputs.columns.values, columns=['Features'])\nreg_summary ['Coefficients'] = reg.coef_\nreg_summary ['p-values'] = p_values\nreg_summary","5dfcdff4":"## Transactions and price","45445915":"# Importing Libraries","d0388308":"### Summary Table","7f59ddd9":"# Regression","27b47b40":"# Reading and uploading multiple '.csv' files into one main Data Frame","0b7ce38a":"# EDA & Graphs","9f3f293f":"(Logarithmic Scale)","34dec0aa":"## Unique addresses and Price","71e02ad3":"### R-Square","7345512e":"# Preprocessing","0141f6c2":"## Correlation between inputs","763a8491":"### Adjusted R-square","22cfd5ba":"# Introduction:\n\nAnalizing data from the Ethereum Blockchain"}}