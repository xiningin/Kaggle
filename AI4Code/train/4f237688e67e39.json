{"cell_type":{"2811e788":"code","b5766e4f":"code","5933a282":"code","d4e1a5fc":"code","af6b8b2e":"code","9a39c9cc":"code","4150ec28":"code","882d278d":"markdown","3099cf23":"markdown","667ea90f":"markdown","6dc0d2d4":"markdown","686726e3":"markdown","2c1a4747":"markdown","90bb30cd":"markdown"},"source":{"2811e788":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n","b5766e4f":"import csv\nreader = csv.reader(open('..\/input\/pokemon.csv'))\ncounter = 0\npokemonDict = {}\nfor row in reader:\n    counter += 1\n    key = row[0]\n    if key in pokemonDict:\n        # implement your duplicate row handling here\n        pass\n    pokemonDict[key] = row[1:]\nprint(pokemonDict)\nprint(counter - 1)","5933a282":"##**Create a Dictionary of Each Type and Counts of Everytime They Are Present**\ntotalCounter = 0\nnoTypesCounter = 0\noneTypeCounter = 0\ntwoTypesCounter = 0\ntotalTypeCounter = 0\ntypeDict = {}\nfor key in pokemonDict.keys():\n    if key == \"Name\":\n        continue\n    elif len(pokemonDict[key]) == 1:\n        oneTypeCounter += 1\n    elif len(pokemonDict[key]) == 2:\n        twoTypesCounter += 1\n    totalCounter += 1\n    totalTypeCounter += len(pokemonDict[key])\n    for pokemonType in pokemonDict[key]:\n        if pokemonType in typeDict:\n            typeDict[pokemonType] += 1\n        else:\n            typeDict[pokemonType] = 1\nprint(typeDict)","d4e1a5fc":"label = list(typeDict.keys())\nplt.bar(['One-Type', 'Two-Types'], [oneTypeCounter, twoTypesCounter])\nplt.xlabel('No. of Types', fontsize=20)\nplt.ylabel('No. of Instances', fontsize=10)\nplt.xticks(['One-Type', 'Two-Types'], ['One-Type', 'Two-Types'], fontsize=10, rotation=90)\nplt.title('No. Of Type Instances Representative in All Pokemon')\nplt.show()","af6b8b2e":"totalTypes = 0\nfor eachType in typeDict.keys():\n    totalTypes += typeDict[eachType]\n\nlabel = list(typeDict.keys())\nindex = np.arange(len(label))\nplt.bar(list(typeDict.keys()), list(typeDict.values()))\nplt.xlabel('Types', fontsize=20)\nplt.ylabel('No. of Instances', fontsize=10)\nplt.xticks(index, label, fontsize=10, rotation=90)\nplt.title('No. Of Type Instances Representative in All Pokemon')\nplt.show()","9a39c9cc":"dualTypeDict = {}\nfor key in pokemonDict.keys():\n    if key == \"Name\":\n        continue\n    elif len(pokemonDict[key]) == 1:\n        if pokemonDict[key][0] in dualTypeDict:\n            dualTypeDict[pokemonDict[key][0]] += 1\n        else:\n            dualTypeDict[pokemonDict[key][0]] = 1\n    elif len(pokemonDict[key]) == 2:\n        typeList = list()\n        typeList.append(pokemonDict[key][0])\n        typeList.append(pokemonDict[key][1])\n        typeList.sort()\n        if typeList[0] + \"-\" + typeList[1] in dualTypeDict:\n            dualTypeDict[typeList[0] + \"-\" + typeList[1]] += 1\n        else:\n            dualTypeDict[typeList[0] + \"-\" + typeList[1]] = 1\nprint(dualTypeDict)","4150ec28":"for eachType in typeDict.keys():\n    tmpTypes = list()\n    tmpTypeCount = list()\n    for eachDualType in dualTypeDict.keys():\n        if eachType in eachDualType:\n            tmpTypes.append(eachDualType)\n            tmpTypeCount.append(dualTypeDict[eachDualType])    \n    label = tmpTypes\n    index = np.arange(len(label))\n    plt.bar(tmpTypes, tmpTypeCount)\n    plt.xlabel(eachType, fontsize=20)\n    plt.ylabel('No. of Instances', fontsize=10)\n    plt.xticks(index, label, fontsize=10, rotation=90)\n    plt.title('No. Of Dual-Type Instances Representative in All Pokemon')\n    plt.show()\n    ","882d278d":"**Representation of each full typing grouped on each type**","3099cf23":"**Number of instances of each type across all pokemon**","667ea90f":"This is an overall overview of stat in this data set. I am using this to find meaningful stats toward a personal machine learning project I am working on. I don't know a lot about Pandas dataframe so I am drawing up graphs and metrics in basic Python ways.","6dc0d2d4":"**Create a Dictionary of Each Type and Counts for each type**","686726e3":"**Simple set up to get later code working**","2c1a4747":"**Finding out the number of Pokemon with one type vs two types**","90bb30cd":"**Create A Dictionary Containing Each Pokemon and Their Respective Types**"}}