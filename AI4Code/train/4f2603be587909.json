{"cell_type":{"92c3b3d3":"code","3eba2378":"code","6d62e84c":"code","16be7193":"code","c1924957":"code","a1858607":"code","12f4f4cb":"code","46ae1f4b":"code","d718e246":"code","bc28a97e":"code","7a8f5138":"code","4953f9e6":"code","2ca21c2a":"code","1a161b8b":"code","e3da1dd4":"code","fdc1605f":"markdown","d969637d":"markdown","59516fdd":"markdown","90064f55":"markdown","49a44fdc":"markdown","c0db0057":"markdown"},"source":{"92c3b3d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sb\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3eba2378":"from sklearn.datasets import fetch_20newsgroups","6d62e84c":"train=fetch_20newsgroups(data_home='.',subset='train')\ntest=fetch_20newsgroups(data_home='.',subset='test')","16be7193":"train.keys(),test.keys()","c1924957":"len(train['data']),len(test['data'])","a1858607":"for i ,label in enumerate (train['target_names']):\n    print(f'class{i:2d}={label}')","12f4f4cb":"item_num=25\nclass_num=train['target'][item_num]\nprint(f'Class number={class_num}')\nprint(f'Class name={train[\"target_names\"][class_num]}')\nprint(train['data'][item_num])","46ae1f4b":"item_num=25\nclass_num=test['target'][item_num]\nprint(f'Class number={class_num}')\nprint(f'Class name={test[\"target_names\"][class_num]}')\nprint(test['data'][item_num])","d718e246":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#Create the DTM first\ncv=CountVectorizer(stop_words='english')\ntrain_dtm=cv.fit_transform(train['data'])\ntest_dtm=cv.transform(test['data'])\n\n#Fit the model\nnb=MultinomialNB()\nnb=nb.fit(train_dtm,train['target'])\n","bc28a97e":"#predict\npredicted=nb.predict(test_dtm)\nscore=nb.score(test_dtm,test['target'])\nprint('Accuracy of Naive Bayes :')\nprint(score*100.0)","7a8f5138":"#Classification Report\nfrom sklearn import metrics\nprint(metrics.classification_report(test['target'],predicted,target_names=test['target_names']))","4953f9e6":"#Confusion Matrix\nfrom helper_code import mlplots as ml\nfig,ax=plt.subplots(figsize=(13,10))\nml.confusion(test['target'],predicted,test['target_names'],'Naive Bayes Model')","2ca21c2a":"#or\nfrom mlplot.evaluation import ClassificationEvaluation\neval = ClassificationEvaluation(test['target'], predicted,test['target_names'],'Naive Bayes')\neval.confusion_matrix(threshold=0.5)\n\n#confusion matrix","1a161b8b":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntf_cv=TfidfVectorizer(stop_words='english')\ntrain_dtm_tf=tf_cv.fit_transform(train['data'])\ntest_dtm_tf=tf_cv.transform(test['data'])\n\nnb.fit(train_dtm_tf,train['target'])\n","e3da1dd4":"prdicted=nb.predict(test_dtm_tf)\nprint(\"Accuracy of Naive Bayes Algo:\")\nscore=100.0* nb.score(test_dtm_tf,test['target'])\nprint(score)","fdc1605f":"## 1)Using Countvectorizer for making DTM","d969637d":"# INTRODUCTION TO TEXT CLASSIFICATION AND NAIVE BAYES CLASSIFIER","59516fdd":"# Working on the 20NewsGroup dataset","90064f55":"## 2)Using TF-IDF for making DTM","49a44fdc":"# To print a Random Message","c0db0057":"# Naive Bayes Classifier"}}