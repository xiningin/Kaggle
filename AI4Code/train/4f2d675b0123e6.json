{"cell_type":{"10b17078":"code","a8547c60":"code","40c1441d":"code","cce32c9f":"code","d4fba6ea":"code","235762f1":"code","8f1ea896":"code","6aba3dd5":"code","dc296032":"code","f5813ba0":"code","776a7aea":"code","efab6f70":"code","88f788bd":"code","db4a9547":"code","cdc2ba42":"code","e95f920d":"code","e7f3970f":"code","63e3dc3f":"code","662899bf":"code","312169a7":"code","8582ae66":"code","0e44a32e":"code","a99abbc4":"code","f21148f2":"code","a95772b0":"code","5406e5c2":"markdown","65f7b1c9":"markdown","c1f5feea":"markdown","a9ab3675":"markdown","a1d3ca27":"markdown","43dd4980":"markdown","30043591":"markdown","472ee562":"markdown","06702564":"markdown","b803cc04":"markdown"},"source":{"10b17078":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8547c60":"import plotly.express as px\nimport glob\nimport matplotlib.pyplot as plt\nimport pydicom\nfrom pydicom.data import get_testdata_files\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.patches as patches\nimport ast","40c1441d":"train_data = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv\")\ntrain_image = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_image_level.csv\")\nprint(f\"Total ID  from the Training set : {train_data.shape[0]}\")\nprint(f\"Total Images from the Training set : {train_image.shape[0]}\")","cce32c9f":"train_data = pd.read_csv(\"\/kaggle\/input\/siim-covid19-detection\/train_study_level.csv\")\ntrain_data.head()","d4fba6ea":"whole_spread = train_data[[\"Negative for Pneumonia\",'Typical Appearance','Indeterminate Appearance','Atypical Appearance']].sum()\ncols = [\"Negative for Pneumonia\",'Typical Appearance','Indeterminate Appearance','Atypical Appearance']\nvalues = []\nfor col in cols:\n    values.append(whole_spread[col])\nsp = pd.DataFrame()\nsp['labels'] = cols\nsp['counts'] = values\nfig = px.pie(sp, names = 'labels', values = 'counts', title = 'Disease Distribution')\nfig.show()","235762f1":"np_count = train_data.groupby(['Negative for Pneumonia'])['Negative for Pneumonia'].count().reset_index(name = 'Counts')\nnp_count['Negative for Pneumonia'] = np_count['Negative for Pneumonia'].map({0:'No',1:'Yes'})\nfig = px.pie(np_count, values = 'Counts', names = 'Negative for Pneumonia', title = 'Negative for Pneumonia Spread')\nfig.show()","8f1ea896":"np_count = train_data.groupby(['Typical Appearance'])['Typical Appearance'].count().reset_index(name = 'Counts')\nnp_count['Typical Appearance'] = np_count['Typical Appearance'].map({0:'No',1:'Yes'})\nfig = px.pie(np_count, values = 'Counts', names = 'Typical Appearance', title = 'Typical Appearance Spread')\nfig.show()","6aba3dd5":"np_count = train_data.groupby(['Indeterminate Appearance'])['Indeterminate Appearance'].count().reset_index(name = 'Counts')\nnp_count['Indeterminate Appearance'] = np_count['Indeterminate Appearance'].map({0:'No',1:'Yes'})\nfig = px.pie(np_count, values = 'Counts', names = 'Indeterminate Appearance', title = 'Indeterminate Appearance Spread')\nfig.show()","dc296032":"np_count = train_data.groupby(['Atypical Appearance'])['Atypical Appearance'].count().reset_index(name = 'Counts')\nnp_count['Atypical Appearance'] = np_count['Atypical Appearance'].map({0:'No',1:'Yes'})\nfig = px.pie(np_count, values = 'Counts', names = 'Atypical Appearance', title = 'Atypical Appearance Spread')\nfig.show()","f5813ba0":"train_image.head()","776a7aea":"np_5 = train_data[train_data['Negative for Pneumonia'] ==1].head(10)\nnp_name = np_5.id.str.replace('_study','')","efab6f70":"for f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+np_name[2]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+np_name[3]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+np_name[5]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+np_name[11]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+np_name[12]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()","88f788bd":"ta_5 = train_data[train_data['Typical Appearance'] ==1].head(10)\nta_name = ta_5.id.str.replace('_study','')","db4a9547":"for f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ta_name[0]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ta_name[9]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ta_name[10]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ta_name[20]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ta_name[22]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()","cdc2ba42":"ia_5 = train_data[train_data['Indeterminate Appearance'] ==1].head(10)\nia_name = ia_5.id.str.replace('_study','')\nia_name","e95f920d":"for f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ia_name[8]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ia_name[13]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ia_name[24]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ia_name[25]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+ia_name[26]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()","e7f3970f":"aa_5 = train_data[train_data['Atypical Appearance'] ==1].head(10)\naa_name = aa_5.id.str.replace('_study','')\naa_name","63e3dc3f":"for f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[1]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[4]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[16]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[40]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[45]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(f_name)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()","662899bf":"train_data['StudyInstanceUID'] = train_data.id.str.replace(\"_study\",'')\ncombine = pd.merge(train_data, train_image, on = 'StudyInstanceUID')\ncombine.head(10)","312169a7":"combine['label_name'] = combine['label'].apply(lambda x: x.split()[0])\nlabel_counts = combine.groupby('label_name')['label_name'].count().reset_index(name = 'counts')\nfig = px.pie(label_counts, values = 'counts', names ='label_name' , title = \"Label Distribution\")\nfig.show()","8582ae66":"uid_list = combine.loc[combine.boxes.notna(), 'StudyInstanceUID']\n\ndef get_coordinates(uid):\n    print(uid)\n    cor = combine[combine['StudyInstanceUID'] == uid]['boxes'].values\n    if(type(cor[0]) is not float):\n        dict_s = ast.literal_eval(cor[0])\n        for di in dict_s:\n            print(di)\n\nfor nn in uid_list[:10]:\n    get_coordinates(nn)","0e44a32e":"from pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom PIL import Image\nvoi_lut = True\nfix_monochrome = True\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/00086460a852\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.read_file(f_name,1)\n    print(f_name)\n    #img = ds.pixel_array # get image array\n    if voi_lut:\n        data = apply_voi_lut(ds.pixel_array, ds)\n    else:\n        data = ds.pixel_array\n    if fix_monochrome and ds.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    im = Image.fromarray(data)\n    im.save('\/kaggle\/working\/65761e66de9f.jpg')\n    plt.show()","a99abbc4":"from IPython.display import Image\n#Image(filename='\/kaggle\/working\/65761e66de9f.jpg') ","f21148f2":"img = matplotlib.image.imread(\"\/kaggle\/working\/65761e66de9f.jpg\")\nfigure, ax = plt.subplots(1)\nrect = patches.Rectangle((720,636),332,648, edgecolor='r', facecolor=\"none\")\nrect1 = patches.Rectangle((2044,847),329,576, edgecolor='r', facecolor=\"none\")\nax.imshow(img)\nax.add_patch(rect)\nax.add_patch(rect1)","a95772b0":"for f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[1]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(ds.pixel_array.shape)\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[4]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(ds.pixel_array.shape)\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[16]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(ds.pixel_array.shape)\n\nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[40]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(ds.pixel_array.shape)\n    \nfor f_name in glob.iglob('\/kaggle\/input\/siim-covid19-detection\/train\/'+aa_name[45]+'\/*\/*.dcm'): #, recursive=True\n    ds = pydicom.dcmread(f_name)\n    print(ds.pixel_array.shape)","5406e5c2":"## Sample Image - Atypical Appearance","65f7b1c9":"## Image Tagging","c1f5feea":"## Problem Statement\n\nwe are identifying and localizing COVID-19 abnormalities on chest radiographs. This is an object detection and classification problem.","a9ab3675":"## Sample Image - Indeterminate Appearance","a1d3ca27":"There are multiple bounding boxes to an image.","43dd4980":"## Sample Image - Negative for Pneumonia","30043591":"## Libraries","472ee562":"## Sample Box Coordinates","06702564":"## Sample Image - Typical Appearance","b803cc04":"![image.png](attachment:b70a96ea-efd2-4993-936e-2a3f68ce6a99.png)"}}