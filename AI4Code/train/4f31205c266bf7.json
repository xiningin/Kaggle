{"cell_type":{"df6b36ad":"code","37b21066":"code","b12a79ec":"code","11fd7b4e":"code","4c608332":"code","6c2ad6e1":"code","61d4fac2":"code","c1a21cc6":"code","2e6640b3":"code","15de1ee4":"code","8338816a":"code","69e8db47":"code","7a66c0d8":"code","9b9a1ace":"code","7afd6043":"code","30a280f5":"code","6e1eabd3":"code","49a41f26":"code","33d6037a":"code","ca8ff662":"code","088f1ba9":"code","ba120f31":"code","248ca775":"code","75012397":"code","66932878":"code","f71b4940":"code","f4f7990c":"code","c2b84ba6":"code","c8bec197":"code","1ac4fa7b":"code","529a8cc5":"code","588288c5":"code","c97d6cef":"code","234bf271":"code","86329635":"code","c989514a":"code","e04c123c":"code","3e9171e7":"code","751a2a66":"code","6d530fb7":"code","071872bd":"code","8a5864da":"code","ea23c533":"markdown","d82b4b84":"markdown","04f4659c":"markdown","5e135fe4":"markdown"},"source":{"df6b36ad":"import math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","37b21066":"from catboost import CatBoostRegressor","b12a79ec":"import datetime\nimport pandas_datareader\nsdate = datetime.datetime(2012,10,31)\nedate = datetime.datetime.today()\ncode = 'GAZP'\ndata = pandas_datareader.DataReader(code, 'moex', start=sdate, end=edate)\nprint(data[['OPEN', 'HIGH', 'LOW', 'CLOSE']].tail(10))","11fd7b4e":"data.to_csv('GAZP.csv')","4c608332":"data = pd.read_csv('GAZP.csv')","6c2ad6e1":"#\u0413\u0440\u0430\u0444\u0438\u043a \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430 \u0430\u043a\u0446\u0438\u0438\nplt.figure(figsize=(16,8))\ndata['CLOSE'].plot()","61d4fac2":"# \u0414\u0435\u043b\u0438\u043c \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u043a\u0430\u043a 0.8\n#Create new dataframe with only 'Close column'\ndata_g = data.filter(['CLOSE'])\ndataset = data_g.values\n#Get the number of rows to train the model on\ntraining_data_len  = math.ceil( len(dataset)*.8)\ntraining_data_len","c1a21cc6":"#Create the training dataset\ntrain_data = dataset[0:training_data_len,:]\n#Spilt the data into x_train and y_train data sets\nx_train =[]\ny_train = []\n\nfor i in range(60, len(train_data)):\n  x_train.append(train_data[i-60:i,0])\n  y_train.append(train_data[i,0])\n  if i<=60:\n    print(x_train)\n    print(y_train)\n    print()\n","2e6640b3":"#Convert the x_train and y_train to numpy arrays\nx_train, y_train = np.array(x_train), np.array(y_train)","15de1ee4":"#Create the testing data set\n#Create a new array containing values from index 1543 to 2003\ntest_data = dataset[training_data_len - 60: , :]\n# Create the data sets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n  x_test.append(test_data[i-60:i,0])","8338816a":"#Convert the data to a numpy array\nx_test = np.array(x_test)","69e8db47":"#Reshape the data\nx_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1]))","7a66c0d8":"model = CatBoostRegressor(iterations = 5000,\n                          #depth=10,\n                          learning_rate = 0.05,\n                          random_seed = 42,\n                          eval_metric='MAPE',\n                          custom_metric=['RMSE', 'MAE'],\n                          od_wait=500,\n                          #task_type='GPU',\n                         )\nmodel.fit(x_train, y_train,\n         eval_set=(x_test, y_test),\n         verbose_eval=100,\n         use_best_model=True,\n         #plot=True\n         )","9b9a1ace":"#Get the models predicted price values\npredictions = model.predict(x_test)","7afd6043":"x_test","30a280f5":"# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(predictions-y_test)**2)\nrmse","6e1eabd3":"# Plot\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n#Visualise the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Prise USD ($)', fontsize=18)\nplt.plot(train['CLOSE'])\nplt.plot(valid[['CLOSE','Predictions']])\nplt.legend(['Train','Val','Predictions'], loc='lower right')\nplt.show()","49a41f26":"new_df = data.filter(['CLOSE'])\nlast_60_days = new_df[-60:].values\nX_test = []\n\nX_test.append(last_60_days)\nX_test = np.array(X_test)","33d6037a":"last_60_days","ca8ff662":"X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1]))","088f1ba9":"X_test","ba120f31":"pred_price = model.predict(X_test)\nprint(pred_price)","248ca775":"X_test.shape","75012397":"import math\nimport pandas_datareader as web\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","66932878":"data.head()","f71b4940":"print(data['CLOSE'].tail(10))\nplt.figure(figsize=(16,8))\ndata['CLOSE'].plot()","f4f7990c":"#Create new dataframe with only 'Close column'\ndata_g = data.filter(['CLOSE'])\ndataset = data_g.values\n#Get the number of rows to train the model on\ntraining_data_len  = math.ceil( len(dataset)*.8)\ntraining_data_len","c2b84ba6":"#Scale the data\nscaler = MinMaxScaler(feature_range = (0,1))\nscaled_data = scaler.fit_transform(dataset)","c8bec197":"#Create the training dataset\ntrain_data = scaled_data[0:training_data_len,:]\n#Spilt the data into x_train and y_train data sets\nx_train =[]\ny_train = []\n\nfor i in range(60, len(train_data)):\n  x_train.append(train_data[i-60:i,0])\n  y_train.append(train_data[i,0])\n  if i<=60:\n    print(x_train)\n    print(y_train)\n    print()\n","1ac4fa7b":"#Convert the x_train and y_train to numpy arrays\nx_train, y_train = np.array(x_train), np.array(y_train)","529a8cc5":"# Reshape the data (for LSTM)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))\nx_train.shape","588288c5":"#Biuild the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1)) ","c97d6cef":"#Compile the model\nmodel.compile(optimizer='adam',loss='mean_squared_error')","234bf271":"#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","86329635":"#Create the testing data set\n#Create a new array containing scaled values from index 1543 to 2003\ntest_data = scaled_data[training_data_len - 60: , :]\n# Create the data sets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n  x_test.append(test_data[i-60:i,0])","c989514a":"#Convert the data to a numpy array\nx_test = np.array(x_test)","e04c123c":"#Reshape the data\nx_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1], 1))","3e9171e7":"#Get the models predicted price values\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)","751a2a66":"# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(predictions-y_test)**2)\nrmse","6d530fb7":"# Plot\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n#Visualise the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Close Prise USD ($)', fontsize=18)\nplt.plot(train['CLOSE'])\nplt.plot(valid[['CLOSE','Predictions']])\nplt.legend(['Train','Val','Predictions'], loc='lower right')\nplt.show()","071872bd":"new_df = data.filter(['CLOSE'])\n# Get the last 60 day closing values and convert the data frame to an array\nlast_60_days = new_df[-60:].values\n#Scale the data to be values between 0 and 1 \nlast_60_days_scaled = scaler.transform(last_60_days)\n#Create an empty list\nX_test = []\n#Append teh past 60 days\nX_test.append(last_60_days_scaled)\n#Convert the X_test data set to a numpy array\nX_test = np.array(X_test)\n#Reshape the data\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))\n#Get the predicted scaled price\npred_price = model.predict(X_test)\n#undo the scaling\npred_price = scaler.inverse_transform(pred_price)\nprint(pred_price)\n","8a5864da":"#Get the quote\nsdate = datetime.datetime(2021,10,28)\nedate = datetime.datetime(2021,10,28)\ncode = 'GAZP'\ngazp_quote2 = pandas_datareader.DataReader(code, 'moex', start=sdate, end=edate)\nprint(gazp_quote2['CLOSE'])","ea23c533":"\u041f\u0440\u0435\u0434\u0441\u043a\u0436\u0435\u043c \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043d\u044f, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 60 \u0434\u043d\u0435\u0439, \u0438 \u043f\u043e\u043f\u043e\u0440\u0431\u0443\u0435\u043c \u043f\u043e \u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 61 \u0434\u0435\u043d\u044c:","d82b4b84":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0441\u0432\u0435\u0436\u0435\u0439 \u0434\u0430\u0442\u0435:","04f4659c":"# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c LSTM  \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442:","5e135fe4":"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Catboost  \u043a\u0443\u0440\u0441\u0430 \u0430\u043a\u0446\u0438\u0439 \u0413\u0430\u0437\u043f\u0440\u043e\u043c. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u0443\u0440\u0441\u0430 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 60 \u0434\u043d\u0435\u0439. \u0411\u0435\u0440\u0435\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0442\u0440\u0435\u0439\u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 60 \u0434\u043d\u0435\u0439, 61-\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u043d\u0430 1, \u0431\u0435\u0440\u0435\u043c 60 \u0434\u043d\u0435\u0439, 61-\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442."}}