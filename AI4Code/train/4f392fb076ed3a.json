{"cell_type":{"fb29bbaf":"code","47dead12":"code","244e0ce2":"code","8b23dbc0":"code","270a0480":"code","0ab740b8":"code","ac381e13":"code","3b7f10a7":"code","3cc8aaf0":"code","dbd8d01f":"code","35019455":"code","11c36519":"code","fe014743":"code","253a56fa":"code","d44ef692":"code","d68f7e11":"code","b9102e20":"code","4b272b8e":"code","942ef639":"code","b45641ca":"code","19fb1fab":"code","8bc840a6":"code","60cd6332":"code","90303fe7":"code","1378d981":"code","a4063fd7":"code","241e4b71":"code","2bd2b8be":"code","bd8e3a66":"code","835585e7":"code","e99e82cc":"code","12589a6f":"code","95f86594":"code","75c7a392":"code","ce4f7fb7":"code","ba9062ac":"code","32375170":"code","34c1306b":"code","6b9387cd":"code","8c0c212b":"code","dcc150eb":"code","be39d1e7":"code","71a57be7":"code","074fccce":"code","5388ab61":"code","fdb84909":"code","3c5a9e5c":"code","d3a881ab":"code","69b64ec8":"code","98e84058":"markdown","966ae2e8":"markdown","d7422d85":"markdown","df344220":"markdown","4dcd86a0":"markdown","983a0e25":"markdown","f8639f01":"markdown","01684f4a":"markdown","d2f5f7f1":"markdown","4cd3d1f1":"markdown","d91a9c40":"markdown","0a0dab1e":"markdown","4f207e92":"markdown","1ca0551d":"markdown","b83ea6a6":"markdown"},"source":{"fb29bbaf":"import pandas as pd\nimport numpy as np\nimport ast\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.ticker as ticker\nimport squarify as sq\n\nfrom IPython.display import display, HTML\n\ndisplay(HTML(data=\"\"\"\n<style>\n    div#notebook-container    { width: 95%; }\n    div#menubar-container     { width: 65%; }\n    div#maintoolbar-container { width: 99%; }\n<\/style>\n\"\"\"))","47dead12":"data = pd.read_csv('..\/input\/tmdbset\/main.csv')","244e0ce2":"data.head(3)","8b23dbc0":"data.tail(3)","270a0480":"data.info()","0ab740b8":"data_processed = data.copy()","ac381e13":"data_processed.drop(columns=['adult','backdrop_path','homepage','poster_path','popularity','video',\n                'status', 'imdb_id'], inplace=True)","3b7f10a7":"data_processed.info()","3cc8aaf0":"data_processed.belongs_to_collection = data_processed.belongs_to_collection.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else pd.NA)","dbd8d01f":"data_processed.spoken_languages\t= data_processed.spoken_languages.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else pd.NA)\n#data_processed.loc[data_processed.spoken_languages.apply(lambda x: len(x)) == 0, 'spoken_languages'] = pd.NA","35019455":"data_processed.genres = data_processed.genres.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else pd.NA)\n#data_processed.loc[data_processed.genres.apply(lambda x: len(x)) == 0, 'genres'] = pd.NA","11c36519":"data_processed.production_companies = data_processed.production_companies.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else pd.NA)\n#data_processed.loc[data_processed.production_companies.apply(lambda x: len(x)) == 0, 'production_companies'] = pd.NA","fe014743":"data_processed.production_countries= data_processed.production_countries.apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else pd.NA)\n#data_processed.loc[data_processed.production_countries.apply(lambda x: len(x)) == 0, 'production_countries'] = pd.NA","253a56fa":"data_processed.loc[data_processed.revenue == 0, 'revenue'] = pd.NA\ndata_processed.loc[data_processed.budget == 0, 'budget'] = pd.NA","d44ef692":"data_processed.info()","d68f7e11":"data_processed.budget = data_processed.budget\/1000000\ndata_processed.revenue = data_processed.revenue\/1000000","b9102e20":"data_processed.info()","4b272b8e":"data_processed.original_language = data_processed.original_language.astype('category')\ndata_processed.release_date = data_processed.release_date.astype('datetime64')\ndata_processed.id = data_processed.id.astype('Int32')\ndata_processed.runtime = data_processed.runtime.astype('Int16')\ndata_processed.budget = pd.to_numeric(data_processed.budget, errors='coerce')\ndata_processed.revenue = pd.to_numeric(data_processed.revenue, errors='coerce')","942ef639":"data_processed.info()","b45641ca":"data_processed.drop(data_processed.loc[(data_processed.release_date.dt.year < 1960) | (data_processed.release_date.dt.year > 2019)].index,inplace=True)","19fb1fab":"data_processed.drop(data_processed.loc[data_processed.release_date.isna()].index, inplace=True)","8bc840a6":"inflation = pd.read_csv('..\/input\/top-movies-19602020\/CPI.csv', index_col='observation_date', parse_dates=True)\n\ninflation = inflation.resample('A',kind='period').mean()\n\ncpi_dict = {}\nfor x,y in zip(inflation.index.year, inflation.CPIAUCSL):\n    cpi_dict[x] = round(y,2)\n    \ndata_processed.budget = data_processed.apply(lambda x: x.budget * (cpi_dict[2020] \/ cpi_dict[x.release_date.year]), axis=1)\ndata_processed.revenue = data_processed.apply(lambda x: x.revenue * (cpi_dict[2020] \/ cpi_dict[x.release_date.year]),axis=1)\ndata_processed.budget = data_processed.budget.apply(lambda x: round(x,2) if isinstance(x, float) else pd.NA)\ndata_processed.revenue = data_processed.revenue.apply(lambda x: round(x,2) if isinstance(x, float) else pd.NA)","60cd6332":"data_processed['roi'] = data_processed.apply(lambda x: x.revenue - x.budget, axis=1)\ndata_processed.roi = pd.to_numeric(data_processed.roi, errors='coerce')\n\ndata_processed['decade'] = (data_processed.release_date.dt.year \/\/ 10) * 10\ndata_processed['month'] = data_processed.release_date.dt.month","90303fe7":"def get_assoc_roi_per_genre(df, groupby):\n    df = df.explode('genres')\n    df.genres = df.genres.apply(lambda x: [x[key] for key in x.keys()][1] if isinstance(x, dict) else pd.NA)\n    df.loc[df.genres=='Science Fiction','genres'] = 'Sci Fi'\n\n    df = pd.DataFrame(df.groupby(groupby).roi.sum())\n    return df","1378d981":"df_roi = data_processed[['roi','genres']].copy()\n\ndf_roi = get_assoc_roi_per_genre(df_roi, 'genres')\n\ndf_roi = df_roi.sort_values('roi',ascending=False)","a4063fd7":"df_roi","241e4b71":"fig, ax = plt.subplots()\nfig.set_size_inches(20,10)\n\nmini= min(df_roi.roi)\nmaxi= max(df_roi.roi)\nnorm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\ncolors = [matplotlib.cm.cool(norm(value)) for value in df_roi.roi]\n\nsq.plot(sizes=df_roi.roi, label=df_roi.index, ax=ax,ec='black', lw=2,color=colors, text_kwargs={'size':15})\n\nax.axis('off')\nfig.suptitle('Genres associated with the Most ROI - 1960-2019',y=.96, size=35)\nplt.show()","2bd2b8be":"df_roi_dec = data_processed[['roi','genres','decade']].copy()\n\ndf_roi_dec = get_assoc_roi_per_genre(df_roi_dec, ['decade', 'genres'])\n\ndf_roi_dec.drop(df_roi_dec.loc[df_roi_dec.roi < 1, 'roi'].index, inplace=True)\n\ndf_roi_dec = df_roi_dec.sort_values('roi',ascending=True)","bd8e3a66":"fig, axes = plt.subplots(3,2)\nfig.set_size_inches(30,25)\naxes=axes.flatten()\n\nfor ax,decade in zip(axes, range(1960, 2011, 10)):\n    mini= min(df_roi_dec.loc[decade, 'roi'])\n    maxi= max(df_roi_dec.loc[decade, 'roi'])\n    norm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\n    colors = [matplotlib.cm.cool(norm(value)) for value in df_roi_dec.loc[decade, 'roi']]\n\n    sq.plot(sizes=df_roi_dec.loc[decade, 'roi'], label=df_roi_dec.loc[decade, 'roi'].index.get_level_values(0),\n            ax=ax,ec='black', lw=2,color=colors, text_kwargs={'size':15})\n    ax.axis('off')\n    ax.set_title(str(decade)+'s',size=30)\n    \nfig.suptitle('Genres associated with the Most ROI per decade',x =.5,y=.94, size=40)\nplt.show()","835585e7":"def create_ranking_chart(df, onlyshow=''):\n    fig,ax = plt.subplots()\n    fig.set_size_inches(31,16)\n\n    for x in df.genres.unique():  \n        sns.lineplot(data=df[df.genres == x], x='decade', y='ranks', ax=ax,\n                     markers=['h'],markeredgecolor='black',markeredgewidth=3,style='genres',lw=8,label=x,legend=False,markersize=35)\n\n    for x in range(1960, 2011, 10):\n        for y in range(1,20):\n            ax.annotate(y, (x,y),xytext=(0, -1), textcoords='offset points', ha='center', va='center',size = 15, weight='bold',\n                        label = df.loc[(df.decade == x) & (df.ranks == y), 'genres'].iat[0],color='white')\n\n    for line, name in zip(ax.lines, df.loc[df.decade == 1960, 'genres']):\n        y = line.get_ydata()[0]\n        x = line.get_xdata()[0]\n        ax.annotate(name,(x,y),xytext=(-25, 0), textcoords='offset points', ha='right',va='center', size=15,label=name)\n        y = line.get_ydata()[-1]\n        x = line.get_xdata()[-1]\n        ax.annotate(name,(x,y),xytext=(25, 0), textcoords='offset points', ha='left',va='center', size=15,label=name)\n        \n    if not isinstance(onlyshow, str):    \n        for elem in ax.lines + ax.texts:\n            if elem.get_label() not in onlyshow:\n                elem.set_visible(False)\n\n\n    formatter = ticker.FormatStrFormatter('%ds')\n    y = range(1960,2011,10)\n    labels = [formatter(x) for x in y]\n    ax.set_xticks(range(1960,2011,10))\n    ax.set_xticklabels(labels)\n\n    ax.set_yticks([])\n    ax.set_ylabel(ylabel='Rank', size=30, labelpad=10)\n    ax.set_xlabel(xlabel='Decades', size=30,labelpad=20)\n    ax.set_axisbelow(True)\n    ax.tick_params(axis='both',labelsize=20)\n    ax.grid('x')\n    ax.margins(x=.10)","e99e82cc":"def create_ranking(df):\n    df = df.unstack(level=0)\n    df.columns = df.columns.droplevel(0)\n    df = df.rank(na_option='top').sort_values(1960).reset_index().melt(id_vars='genres', value_name='ranks')\n    return df","12589a6f":"df_roi_dec = data_processed[['roi','genres','decade']].copy()\n\ndf_roi_dec = get_assoc_roi_per_genre(df_roi_dec, ['decade', 'genres'])\n\ndf_roi_rank = create_ranking(df_roi_dec)","95f86594":"create_ranking_chart(df_roi_rank)","75c7a392":"df_roi_dec = data_processed[['roi','genres','decade']].copy()\n\ndf_roi_dec = get_assoc_roi_per_genre(df_roi_dec, ['decade', 'genres'])\n\ndf_roi_rank = create_ranking(df_roi_dec)","ce4f7fb7":"df_roi_rank.groupby('genres').ranks.describe().sort_values('std')","ba9062ac":"show = df_roi_rank.groupby('genres').ranks.describe().sort_values('std').head(5).index\ncreate_ranking_chart(df_roi_rank, show)","32375170":"df_roi_dec = data_processed[['roi','genres','decade']].copy()\n\ndf_roi_dec = get_assoc_roi_per_genre(df_roi_dec, ['decade', 'genres'])\n\ndf_roi_rank = create_ranking(df_roi_dec) ","34c1306b":"show = df_roi_rank.groupby('genres').ranks.describe().sort_values('std').tail(5).index\ncreate_ranking_chart(df_roi_rank, show)","6b9387cd":"data_processed.sort_values('roi')","8c0c212b":"df_month = data_processed[['id', 'month', 'roi']].copy()","dcc150eb":"df_month.groupby('month').roi.describe().sort_values('mean')","be39d1e7":"df_month_low = data_processed.loc[data_processed.budget <= 5,['id', 'month', 'roi']].copy()","71a57be7":"df_month_low['std'] = df_month_low.groupby('month').roi.transform('std')#.describe().sort_values(['count', 'mean'], ascending=[True, False])","074fccce":"df_month_low['mean'] = df_month_low.groupby('month').roi.transform('mean')","5388ab61":"df_month_low.apply(lambda x: x if (True) else False, axis=1)","fdb84909":"df_month_low.info()","3c5a9e5c":"df_month_low = df_month_low.loc[(df_month_low.roi > (df_month_low['mean'] - (df_month_low['std'] * 2))) & (df_month_low.roi < (df_month_low['mean'] + (df_month_low['std']*2)))].sort_values('roi')","d3a881ab":"df_month_low.groupby('month').roi.describe()","69b64ec8":"df_month_low","98e84058":"## Dropping unnecessary columns","966ae2e8":"# **How have genres associations with ROI changed throughout the decades? (1960s-2010s)**","d7422d85":"## Adding ROI,Decade, and Month column","df344220":"# **Which Genres are associated with the most ROI? (1960-2019)**","4dcd86a0":"## **What is the best\/worst month to release a low-budget movie?**","983a0e25":"## Handling empty data","f8639f01":"## **Top 5 Genres with the most Stable Association with ROI throughout the decades**","01684f4a":"## **What is the best\/worst month to release a movie?**","d2f5f7f1":"## **Ranking of genres associated with ROI across the decades**","4cd3d1f1":"# **Data Inspection**","d91a9c40":"## Changing the scale of budgets\/revenue to number of millions","0a0dab1e":"## Converting columns to appropriate types","4f207e92":"## **Top 5 Genres with the Most Variable association with ROI throughout the decades**","1ca0551d":"## Adjusting budgets\/revenue to account for inflation","b83ea6a6":"# **Data Tidying**"}}