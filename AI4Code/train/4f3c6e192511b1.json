{"cell_type":{"3135668c":"code","7ee92a5b":"code","9523f1c1":"code","36af4e18":"code","18630ef2":"code","3f8c85ee":"code","36446e5a":"code","2b5662ca":"code","814c2570":"code","4817e1c4":"code","272b2a48":"code","05f1389e":"code","a6c62371":"code","c64a0fcf":"code","8a08431d":"code","a8b15349":"code","ca7ca9a8":"code","3336b033":"code","80046cf0":"code","786e9620":"code","6f8ef435":"code","42315803":"code","bd3bad62":"code","6dc385a8":"code","7308f9d1":"code","0e82dfd4":"code","b69f0a40":"code","757d1b6d":"code","275da7bd":"code","6c314e6f":"code","96743dc1":"code","bbbbb906":"code","563a8c09":"code","0571d4c3":"code","d8d77cb5":"markdown","a6d14b1a":"markdown","e00bd163":"markdown","8f45c1e9":"markdown","cc6499ca":"markdown","1ebcbdb3":"markdown","66e0d55f":"markdown","53609bad":"markdown","e7dfef21":"markdown"},"source":{"3135668c":"#not required\n#!pip install kaggle\n!mkdir ~\/.kaggle\n!cp '\/content\/drive\/My Drive\/AI\/kaggle.json' ~\/.kaggle\n!chmod 600 ~\/.kaggle\/kaggle.json","7ee92a5b":"!kaggle competitions download 'titanic'","9523f1c1":"import pandas as pd\nimport numpy as np\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n# from pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics\n\n# Install fastai - Already done\n# !pip3 install fastai\n!pip install pandas-summary","36af4e18":"types = {'PassengerId': 'int32',\n        'Survived': 'bool',\n        'Pclass': 'int8',\n        'Name': 'str',\n        'Sex': 'str',\n        'Age': 'float32',\n        'Sibsp': 'int8',\n        'Parch': 'int8',\n        'Ticket': 'str',\n        'Fare': 'float32',\n        'Cabin': 'str',\n        'Cabin': 'str'\n        }","18630ef2":"%%time\n\ntrain = pd.read_csv('train.csv', index_col='PassengerId', low_memory=False, dtype=types )\ntest  = pd.read_csv('test.csv', index_col='PassengerId', low_memory=False, dtype=types )\n","3f8c85ee":"train.shape","36446e5a":"train.head()","2b5662ca":"test.head()","814c2570":"train.info()","4817e1c4":"train.describe( include='all' )","272b2a48":"# Check correlation \n\nplt.figure(figsize=(12,8))\nsns.heatmap(data=train.corr(), annot=True)","05f1389e":"# Sex\nplt.figure(figsize=(12,8))\nsns.barplot(x=train['Sex'], y=train['Survived'])","a6c62371":"# Age\nplt.figure(figsize=(16,8))\nsns.barplot(x=train['Age'].fillna(0).apply(int), y=train['Survived'])","c64a0fcf":"# Pclass\nplt.figure(figsize=(16,8))\nsns.barplot(x=train['Pclass'].fillna(0).apply(int), y=train['Survived'])","8a08431d":"# Fare\nplt.figure(figsize=(16,8))\nsns.barplot(x=train['Fare'].fillna(0).apply(int), y=train['Survived'])","a8b15349":"train.columns[train.isnull().any()]","ca7ca9a8":"test.columns[test.isnull().any()]","3336b033":"age_na_replacement = train['Age'].median()\n\ntrain['Age'].fillna( age_na_replacement, inplace=True ) \ntest['Age'].fillna( age_na_replacement, inplace=True ) ","80046cf0":"fare_na_replacement = train['Fare'].median()\n\ntrain['Fare'].fillna( fare_na_replacement, inplace=True ) \ntest['Fare'].fillna( fare_na_replacement, inplace=True ) ","786e9620":"cabin_na_replacement = \"\"\n\ntrain['Cabin'].fillna( cabin_na_replacement, inplace=True ) \ntest['Cabin'].fillna( cabin_na_replacement, inplace=True ) ","6f8ef435":"# Tried but without improvment\n\n# def extract_name ( row ):\n#    row.Name = row.Name.split ( ',' )[0]\n#    return row\n\n# train = train.apply ( extract_name, axis='columns' )\n# test = test.apply ( extract_name, axis='columns' )","42315803":"# Extract Tittle (Mapping found on the web)\n'''\ntitles_encoding = {\n    \"Capt\":        1, # Officer\n    \"Col\":         1,\n    \"Major\":       1,\n    \"Jonkheer\":    2, # Rich\n    \"Don\":         2,\n    \"Sir\" :        2,\n    \"Dr\":          1,\n    \"Rev\":         1,\n    \"the Countess\":2,\n    \"Dona\":        2,\n    \"Mme\":         3, # Mrs\n    \"Mlle\":        4, # Miss\n    \"Ms\":          3,\n    \"Mr\" :         5, # Mr\n    \"Mrs\" :        3,\n    \"Miss\" :       4,\n    \"Master\" :     6, # Master, and commander ?\n    \"Lady\" :       2  # Gaga\n}\n'''\n# Extract Tittle (Mapping found on the web)\n\ntitles_encoding = {\n    \"Capt\":        1, # Officer\n    \"Col\":         2,\n    \"Major\":       3,\n    \"Jonkheer\":    4, # Rich\n    \"Don\":         5,\n    \"Sir\" :        6,\n    \"Dr\":          7,\n    \"Rev\":         8,\n    \"the Countess\":9,\n    \"Dona\":        10,\n    \"Mme\":         11, # Mrs\n    \"Mlle\":        12, # Miss\n    \"Ms\":          13,\n    \"Mr\" :         14, # Mr\n    \"Mrs\" :        15,\n    \"Miss\" :       16,\n    \"Master\" :     17, # Master, and commander ?\n    \"Lady\" :       18  # Gaga\n}\n\n# Initialize with something for performances and avoid missing values\n\ntrain['Title'] = np.zeros ( train.shape[0] )\ntest['Title']  = np.zeros ( test.shape[0] )\n\ndef extract_tittle ( row ):\n  for title in titles_encoding:\n    if title in row.Name: # Not perfect\n      row.Title = titles_encoding [title]\n      continue\n  return row\n\ntrain = train.apply ( extract_tittle, axis='columns' )\ntest = test.apply ( extract_tittle, axis='columns' )\n\nprint(train.Title.value_counts())\nprint(test.Title.value_counts())","bd3bad62":"# Title\nplt.figure(figsize=(12,8))\nsns.barplot(x=train['Title'], y=train['Survived'])","6dc385a8":"# Extract Deck\n\ndeck_encoding = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\n\n# Initialize with something for performances and avoid missing values\n\ntrain['Deck'] = np.zeros ( train.shape[0] )\ntest['Deck']  = np.zeros ( test.shape[0] )\n\ndef extract_deck ( row ):\n  for deck in deck_encoding:\n    if deck in row.Cabin: # Not perfect\n      row.Deck = deck_encoding [deck]\n      continue\n  return row\n\ntrain = train.apply ( extract_deck, axis='columns' )\ntest = test.apply ( extract_deck, axis='columns' )\n\nprint(train.Deck.value_counts())\nprint(test.Deck.value_counts())","7308f9d1":"# Deck\nplt.figure(figsize=(12,8))\nsns.barplot(x=train['Deck'], y=train['Survived'])","0e82dfd4":"# Extract if the cabin is known (filled after the iceberg ?)\n\ntrain['CabinKown'] = np.zeros ( train.shape[0] )\ntest['CabinKown']  = np.zeros ( test.shape[0] )\n\ndef extract_cabin ( row ):\n  if row.Cabin == \"\":\n    row.CabinKown = False\n  else:\n    row.CabinKown = True\n  return row\n\ntrain = train.apply ( extract_cabin, axis='columns' )\ntest = test.apply ( extract_cabin, axis='columns' )\n\n# In the same idea. Extracting Familly Name doesn't improve the results","b69f0a40":"# Cabin\nplt.figure(figsize=(12,8))\nsns.barplot(x=train['CabinKown'], y=train['Survived'])","757d1b6d":"# Drop useless column\n\ntrain = train.drop ( [ 'Ticket', 'Name', 'Cabin' ] ,axis=1 )\ntest  = test.drop ( [ 'Ticket', 'Name', 'Cabin' ] ,axis=1 )","275da7bd":"train=pd.get_dummies(train,columns=[ 'Sex', 'Embarked' ])\ntest= pd.get_dummies(test,columns=[ 'Sex', 'Embarked' ])","6c314e6f":"train.shape","96743dc1":"# Check correlation with new columns \n\nplt.figure(figsize=(12,8))\nsns.heatmap(data=train.corr(), annot=True)","bbbbb906":"# Save prepared data into drive\n\ntrain.to_csv ( '\/content\/drive\/My Drive\/AI\/titanic_train_full.csv' )\ntest.to_csv ( '\/content\/drive\/My Drive\/AI\/titanic_test.csv' )","563a8c09":"# Split Train set into train and validation\nfrom sklearn.model_selection import train_test_split\n\ntrain, valid = train_test_split ( train, test_size=0.2, random_state=42 )","0571d4c3":"# Save prepared data into drive\n\ntrain.to_csv ( '\/content\/drive\/My Drive\/AI\/titanic_train.csv' )\nvalid.to_csv ( '\/content\/drive\/My Drive\/AI\/titanic_valid.csv' )","d8d77cb5":"Import Lib","a6d14b1a":"## Features engineering","e00bd163":"## Check Missing Value","8f45c1e9":"DownLoad Data","cc6499ca":"## Loading Data","1ebcbdb3":"## Data Visualization","66e0d55f":"## Titanic competition first part\n\nThis notebook is the firs part of 3 notebooks\n1.   Data Exploration\n2.   Feature Analysis\n3.   Models\n\nThe purpose to this part is to explore the data and do few cleanings\n*   Download data\n*   Plots\n*   Create Features\n*   Few cleanings\n\n","53609bad":"Setup Kaggle","e7dfef21":"## Drop and Dummies"}}