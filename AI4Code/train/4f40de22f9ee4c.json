{"cell_type":{"e4ab1bbf":"code","d56092de":"code","ff8407a2":"code","83ab6030":"code","2d12ffcf":"code","b1581614":"code","df6488d6":"code","6ddbe804":"code","049ec408":"code","964f63b0":"code","8e0a20d0":"code","252d7cb9":"code","6bbc5170":"code","2a8b6e2d":"code","8f500502":"code","0cb8420f":"code","b3e6be59":"code","0a09fb2f":"code","7218d019":"code","f3507c06":"code","440476fc":"code","52751a0a":"code","9b6cc893":"code","cc89fe69":"code","b229612f":"code","67f82bc2":"code","ccc0f72c":"code","07c22a16":"code","735b5aa2":"code","d01f28d0":"code","83410390":"code","8af7143c":"code","96d5b682":"code","af1eb798":"code","c199cd1f":"code","f7963f4f":"code","e697a4ec":"code","9151a880":"code","9c36449a":"code","00521d40":"code","5244f589":"code","9b9942cf":"code","fb4cd4ff":"code","89e7fa18":"code","8d674073":"code","1a3f7103":"code","93d8410c":"code","bab53fdd":"code","5a0f5f26":"markdown","703952f9":"markdown","a8cd773e":"markdown","b2b43a90":"markdown","35fc4504":"markdown","db9105be":"markdown","22413afd":"markdown","6addf61e":"markdown","3b0749c4":"markdown","70194acf":"markdown","1811c48e":"markdown","77387050":"markdown","1d5ad2b9":"markdown","f78340d9":"markdown","d5fe241a":"markdown","fbf7a615":"markdown","91b9a449":"markdown","92446779":"markdown","403559d7":"markdown","0cdbbcb2":"markdown","f983fb74":"markdown","9a63da99":"markdown","2e86a48a":"markdown","3704e6cb":"markdown"},"source":{"e4ab1bbf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","d56092de":"import plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots","ff8407a2":"from geopy.geocoders import Nominatim\nimport folium\nimport folium.plugins as plugins","83ab6030":"df = pd.read_csv('..\/input\/sales-analysis\/data.csv')\ndf.head()","2d12ffcf":"def missing_zero_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = round(df.isnull().mean().mul(100),2)\n    mz_table = pd.concat([mis_val,mis_val_percent],axis=1)\n    mz_table = mz_table.rename(columns = {df.index.name:'col_name',0:'Missing Values',1:'% of Total Values'})\n    mz_table['Data_type']=df.dtypes\n    mz_table=mz_table.sort_values('% of Total Values',ascending=False)\n    print(\"Your selected dataframe has ** \"+str(df.shape[1])+\" ** columns and ** \"+str(df.shape[0])+\" ** Rows.\\n\"\n                 \"There are ** \"+str(mz_table[mz_table.iloc[:,1] != 0].shape[0])+\n                  \" ** columns that have missing values. \\n\")\n    return mz_table.reset_index()","b1581614":"missing_zero_values_table(df)","df6488d6":"lisCol = ['Quantity Ordered','Price Each','Order Date']\nfor col in lisCol:\n    print(col,': ',df[col].unique(),'\\n')","6ddbe804":"df2 = df.copy()","049ec408":"df2.dropna(how='all',inplace=True)","964f63b0":"filterQuantity = df2['Quantity Ordered'] == 'Quantity Ordered'\nfilterPrice = df2['Price Each'] == 'Price Each'\n\ndf2 = df2[~filterQuantity]\ndf2 = df2[~filterPrice]","8e0a20d0":"missing_zero_values_table(df2)","252d7cb9":"df2=df2.astype({'Quantity Ordered':np.int64,'Price Each':np.float64})\ndf2['Order Date'] = pd.to_datetime(df2['Order Date'])","6bbc5170":"df2.dtypes","2a8b6e2d":"df2['salces'] = df2['Quantity Ordered'] * df2['Price Each']\ndf2.head()","8f500502":"def city(x):\n    return x.split(',')[1]","0cb8420f":"df2['city']=df2['Purchase Address'].apply(city)","b3e6be59":"locations = pd.DataFrame({'city':df2.city.unique()}) ","0a09fb2f":"geolocation = Nominatim(user_agent='app')","7218d019":"lat_lon = []\nfor location in locations.city:\n    location = geolocation.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:\n        geo = (location.latitude,location.longitude)\n        lat_lon.append(geo)","f3507c06":"del location","440476fc":"locations['geo_loc'] = lat_lon\nlocations","52751a0a":"np.array(locations.geo_loc)","9b6cc893":"lat,lon = zip(*np.array(locations.geo_loc))","cc89fe69":"locations['lat'] = lat\nlocations['lon'] = lon","b229612f":"locations.drop('geo_loc',axis=1,inplace=True)\nlocations","67f82bc2":"df2 = df2.merge(locations,on='city',how='left').dropna()","ccc0f72c":"df2.head()","07c22a16":"px.bar(x=df2.resample('M', on='Order Date').salces.sum().index,\n       y=df2.resample('M', on='Order Date').salces.sum(),\n      title=\"Sales Analysis by month\",\n        labels={'y':'Total Sales','x':'Month'})","735b5aa2":"px.line(x=df2.resample('D', on='Order Date').salces.sum().index,\n        y=df2.resample('D', on='Order Date').salces.sum(),\n        title=\"Analysis sales by days\",\n        labels={'y':'Total Sales','x':'Day'})","d01f28d0":"df2['hour'] = df2['Order Date'].dt.strftime(\"%H\")","83410390":"fig=px.bar(x=df2.groupby('hour')['salces'].count().index,\n       y=df2.groupby('hour')['salces'].count(),\n      title=\"Sales Analysis by hours\",\n        labels={'y':'Total Sales','x':'Hours'},        \n       text=df2.groupby('hour')['salces'].count())\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","8af7143c":"df2.head()","96d5b682":"df2['day']=pd.DatetimeIndex(df2['Order Date']).day_name()","af1eb798":"hoursWeek = df2.groupby(['hour','day'])['salces'].sum().unstack().reset_index()","c199cd1f":"anchos = [0.2] * 6\nfig = go.Figure()\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Friday'],\n                     width = anchos, name = 'Friday',\n                     text = hoursWeek['Friday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Sunday'],\n                     width = anchos, name = 'Sunday',\n                     text = hoursWeek['Sunday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Tuesday'],\n                     width = anchos, name = 'Tuesday',\n                     text = hoursWeek['Tuesday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Monday'],\n                     width = anchos, name = 'Monday',\n                     text = hoursWeek['Monday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Wednesday'],\n                     width = anchos, name = 'Wednesday',\n                     text = hoursWeek['Wednesday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Thursday'],\n                     width = anchos, name = 'Thursday',\n                     text = hoursWeek['Thursday'],orientation='h'))\n\nfig.add_trace(go.Bar(y = hoursWeek['hour'], \n                     x = hoursWeek['Saturday'],\n                     width = anchos, name = 'Saturday',\n                     text = hoursWeek['Saturday'],orientation='h'))\n\nfig.update_layout(title =  \"Analysis sale by hours in per days\",\n                  barmode = 'group',title_font_size = 40,\n                  width = 1600, height = 1400)\n\nfig.update_layout(legend=go.layout.Legend(\n            x=1,y=1,\n            traceorder= \"normal\",\n            font=dict(family=\"Verdana\",size= 22, color = \"black\")))\nfig.update_traces(texttemplate='%{text:.2f}',textposition='outside',\n            textfont=dict(size=60, family='Verdana', color='black'))\nfig.update_xaxes(title_text = 'Year',\n           title_font=dict(size=30,family='Verdana',color='black'), \n           tickfont=dict(family='Calibri', color='darkred',size=25))\nfig.update_yaxes(title_text = \"Sales\", \n           title_font=dict(size=30,family='Verdana',color='black'), \n           tickfont=dict(family='Calibri', color='darkred',size=25))\n\nfig.show()","f7963f4f":"px.bar(hoursWeek,y='hour', \n             x=hoursWeek.columns,\n             orientation='h')","e697a4ec":"def generatebasemap(default_location=[df2['lat'].mean(),df2['lon'].mean()],default_zoom=5,control_scale=True):\n    basemap=folium.Map(location=default_location,zoom_start=default_zoom)\n    return basemap","9151a880":"lat_lon = df2.groupby(['lat','lon']).size().index.tolist()\nbasemap = generatebasemap()\nfor i in range(len(df2.groupby(['lat','lon']).size().index.tolist())):\n    folium.Circle([lat_lon[i][0],lat_lon[i][1]],150000,fill=True).add_child(folium.Popup(f'Total {df2[(df2.lat == lat_lon[i][0]) & (df2.lon == lat_lon[i][1]) ].shape[0]}')).add_to(basemap)\n","9c36449a":"basemap","00521d40":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(\n    go.Bar( \n    x = df2.groupby('city')['city'].count().index,\n    y = df2.groupby('city')['city'].count(),\n    name = 'Count'\n    ),secondary_y=False,\n)\nfig.add_trace(\n    \n    go.Scatter(\n    x = df2.groupby('city')['salces'].sum().index,\n    y = df2.groupby('city')['salces'].sum(),\n    name = 'Total sales'\n    ),secondary_y=True,\n)\nfig.update_layout(\n    title_text=\"Analysis sales by locations\"\n)\n\nfig.update_xaxes(title_text=\"City Names\")\n\nfig.update_yaxes(title_text=\"<b>Count<\/b> yaxis title\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Total sales<\/b> yaxis title\", secondary_y=True)\n\nfig.show()","5244f589":"fig=px.bar(x=df2.groupby('Product')['Quantity Ordered'].sum().index,\n       y=df2.groupby('Product')['Quantity Ordered'].sum(),\n      title=\"Sale analysis by Product\",\n        labels={'y':'Total Sales','x':'Product'},        \n       text=df2.groupby('Product')['Quantity Ordered'].sum())\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","9b9942cf":"product = df2.groupby('Product')['Quantity Ordered'].sum().index\nquantity= df2.groupby('Product')['Quantity Ordered'].sum()\nprice = df2.groupby('Product')['Price Each'].mean()","fb4cd4ff":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Bar( \n        x=product,\n        y=quantity),secondary_y=False,\n)\n\nfig.add_trace(\n    \n    go.Scatter(\n        x=product,\n        y=price\n    ),secondary_y=True,\n)\n\nfig.update_layout(\n    title_text=\"Analysis price product\"\n)\n\nfig.update_xaxes(title_text=\"Product\")\n\nfig.update_yaxes(title_text=\"<b>Count<\/b> yaxis title\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b>Price<\/b> yaxis title\", secondary_y=True)\n\nfig.show()","89e7fa18":"df3=df2[df2['Order ID'].duplicated(keep=False)]\ndf3.head()","8d674073":"df3['Grouped']=df3.groupby('Order ID')['Product'].transform(lambda x:','.join(x))","1a3f7103":"df3.head()","93d8410c":"df3 = df3.drop_duplicates(subset=['Order ID'])\ndf3.head()","bab53fdd":"px.pie(df, values=df3.Grouped.value_counts()[0:5], names=df3.Grouped.value_counts()[0:5].index)","5a0f5f26":"**Quantity Ordered** word in Quantity Ordered  \n**Price Each** word in Price Each","703952f9":"December in 2019 is the highest sales  \n2020 don't have great start","a8cd773e":"Analysis sales by locations","b2b43a90":"Total price for each product   \nfor example one person buy 2 butter and butter cost 2 dollar  \nwe must calculate and add in data frame total sales $4  ","35fc4504":"As expected, it had the most sales at the end of the year    \nand in 2020 because we have low sales you must zoom it to understand ","db9105be":"Remove missing values","22413afd":"As I guessed because the price is low has the highest sale","6addf61e":"# Take a Quick Look at the Data Structure","3b0749c4":"Sales Analysis per month","70194acf":"Analysis sale by hours in per days","1811c48e":"Extract hour from Order Date column","77387050":"Analysis most popular product","1d5ad2b9":"Ok, we have missing value","f78340d9":"Work in Progress","d5fe241a":"Battery has high sale  \nlet's find out why","fbf7a615":"It shows how many counts of city is go up sale is become high","91b9a449":"Merge to df2 , locations","92446779":"Example : \" 917 1st St, Dallas, TX 75001 \"   \nI want to extract city name   \nand extract latitude and longitude","403559d7":"Change types  \nQuantity Ordered, Price Each , Order Date","0cdbbcb2":"Analysis sales in per days","f983fb74":"Sale analysis by Product","9a63da99":"# Exploratory data analysis and data cleaning","2e86a48a":"Ok, these are the most popular product in this dataset","3704e6cb":"Remove string values in numerical columns"}}