{"cell_type":{"d45a990c":"code","6d4faed5":"code","569a2d14":"code","57fdfc3d":"code","436a3eb5":"code","0449ef9e":"code","3a140f7f":"code","cb8633d6":"code","c3423606":"code","6613d497":"code","9ed9ff53":"code","ea4435c0":"code","1147df25":"code","71face22":"code","59c29458":"code","d5729fde":"code","f46462ec":"code","4d57b86f":"code","80a28f8d":"code","93862521":"code","15def73f":"code","58786bee":"code","10aea1ac":"code","6512ad70":"code","c733f02c":"code","6105bab2":"code","60dc8aa4":"code","cf48764a":"code","1157791b":"code","5a3aff03":"code","0e4fbf93":"code","710582b3":"code","beee190d":"code","667536c6":"code","f66b2368":"code","54bb2355":"code","4530206c":"code","b5063086":"code","4d18ba8c":"code","d2a69560":"markdown","de596fb9":"markdown","eb33378d":"markdown","7705e173":"markdown","1c41d5f0":"markdown","01c3f7cd":"markdown","d96c0a67":"markdown"},"source":{"d45a990c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6d4faed5":"# Loading data\ntrain_df = pd.read_csv('\/kaggle\/input\/ltfs-2\/train_fwYjLYX.csv', parse_dates=['application_date'])\ntest_df = pd.read_csv('\/kaggle\/input\/ltfs-2\/test_1eLl9Yf.csv', parse_dates=['application_date'])","569a2d14":"print(f'Shape of training data is {train_df.shape}')","57fdfc3d":"print(f'Shape of testing data is {test_df.shape}')","436a3eb5":"train_df.head()","0449ef9e":"train_df.info()","3a140f7f":"train_df.describe()","cb8633d6":"# Oldest application date in training data\ntrain_df.application_date.min()","c3423606":"# Newest application date in training data\ntrain_df.application_date.max()","6613d497":"# No. of applications per segment\ncase_count_by_segment = pd.DataFrame(train_df.groupby(['segment'])['case_count'].agg(sum))\ncase_count_by_segment['%_Of_Total'] = case_count_by_segment['case_count'].apply \\\n(lambda x: x\/case_count_by_segment['case_count'].sum()*100)","9ed9ff53":"case_count_by_segment","ea4435c0":"# No. of zones\nlist(train_df.zone.unique())","1147df25":"# List of states\nprint(f'Total no. of states in the data are {train_df.state.unique().size}')\nlist(train_df.state.unique())","71face22":"# Case count by date and segment\ncase_count_by_date_segment = pd.DataFrame(train_df.groupby(['application_date','segment'])['case_count'].agg(sum))\ncase_count_by_date_segment.reset_index(drop=False,inplace=True)","59c29458":"plt.figure(figsize = (16,5))\nsns.lineplot(x=\"application_date\",\n             y=\"case_count\",\n             hue=\"segment\",\n             data=case_count_by_date_segment,\n             palette=sns.color_palette('hls', n_colors=2))","d5729fde":"# Extracting features from application_date\ntrain_df['month'] = train_df['application_date'].dt.month\ntrain_df['day_of_month'] = train_df['application_date'].dt.day\ntrain_df['day_of_week'] = train_df['application_date'].dt.dayofweek\ntrain_df['year'] = train_df['application_date'].dt.year\ntrain_df['year_month'] = train_df.apply(lambda x: str(x['year']) + '_' + str(x['month']), axis=1)","f46462ec":"train_df.head()","4d57b86f":"# Case count by date and segment\ncase_count_by_year_month = pd.DataFrame(train_df.groupby(['year_month','segment'])['case_count'].agg(sum))\ncase_count_by_year_month.reset_index(drop=False,inplace=True)\nplt.figure(figsize = (25,6))\nsns.lineplot(x=\"year_month\",\n             y=\"case_count\",\n             hue=\"segment\",\n             data=case_count_by_year_month,\n             palette=sns.color_palette('hls', n_colors=2))","80a28f8d":"# Case count by date and segment\ncase_count_by_month = pd.DataFrame(train_df.groupby(['month','segment'])['case_count'].agg(sum))\ncase_count_by_month.reset_index(drop=False,inplace=True)\nplt.figure(figsize = (16,5))\nsns.lineplot(x=\"month\",\n             y=\"case_count\",\n             hue=\"segment\",\n             data=case_count_by_month,\n             palette=sns.color_palette('hls', n_colors=2))","93862521":"# Case count by date and segment\ncase_count_by_day_of_month = pd.DataFrame(train_df.groupby(['day_of_month','segment'])['case_count'].agg(sum))\ncase_count_by_day_of_month.reset_index(drop=False,inplace=True)\nplt.figure(figsize = (16,5))\nsns.lineplot(x=\"day_of_month\",\n             y=\"case_count\",\n             hue=\"segment\",\n             data=case_count_by_day_of_month,\n             palette=sns.color_palette('hls', n_colors=2))","15def73f":"# Case count by date and segment\ncase_count_by_day_of_week = pd.DataFrame(train_df.groupby(['day_of_week','segment'])['case_count'].agg(sum))\ncase_count_by_day_of_week.reset_index(drop=False,inplace=True)\nplt.figure(figsize = (16,5))\nsns.lineplot(x=\"day_of_week\",\n             y=\"case_count\",\n             hue=\"segment\",\n             data=case_count_by_day_of_week,\n             palette=sns.color_palette('hls', n_colors=2))","58786bee":"train_df.head()","10aea1ac":"train_new_df = pd.DataFrame(train_df.groupby(['segment','month','day_of_month','day_of_week','year'])\\\n                            ['case_count'].agg(sum).reset_index(drop=False))","6512ad70":"train_new_df.head()","c733f02c":"# Separate the dataframes segment wise\n#train_seg_1_df = train_df[train_df['segment']==1].reset_index(drop=True)\n#train_seg_2_df = train_df[train_df['segment']==2].reset_index(drop=True)","6105bab2":"#train_seg_1_df.head()","60dc8aa4":"#from sklearn.preprocessing import LabelEncoder\n#le = LabelEncoder()\n#train_seg_1_df['state'] = le.fit_transform(train_seg_1_df['state'])\n#train_seg_1_df['zone'] = le.fit_transform(train_seg_1_df['zone'])","cf48764a":"#train_seg_1_df.head()","1157791b":"categoricals = ['segment','month','day_of_month','day_of_week']\ntarget = train_new_df.pop('case_count')\nfeat_cols = list(train_new_df.columns)\n#remove_cols = ['application_date','segment']\n#feat_cols = [cols for cols in feat_cols if cols not in remove_cols]\nfeat_cols.remove('year')\nfeat_cols","5a3aff03":"import lightgbm as lgb\nfrom sklearn.model_selection import KFold, StratifiedKFold\n\nparams = {\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': {'mape'},\n            'subsample': 0.25,\n            'subsample_freq': 1,\n            'learning_rate': 0.3,\n            'num_leaves': 20,\n            'feature_fraction': 0.9,\n            'lambda_l1': 1,  \n            'lambda_l2': 1\n            }\n\nfolds = 4\nseed = 555\n\nkf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=seed)\n\nmodels = []\n\nfor train_index, val_index in kf.split(train_new_df, train_new_df['month']):\n    train_X = train_new_df[feat_cols].iloc[train_index]\n    val_X = train_new_df[feat_cols].iloc[val_index]\n    train_y = target.iloc[train_index]\n    val_y = target.iloc[val_index]\n    lgb_train = lgb.Dataset(train_X, train_y, categorical_feature=categoricals)\n    lgb_eval = lgb.Dataset(val_X, val_y, categorical_feature=categoricals)\n    gbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=500,\n                valid_sets=(lgb_train, lgb_eval),\n                early_stopping_rounds=100,\n                verbose_eval = 100)\n    models.append(gbm)","0e4fbf93":"for model in models:\n    lgb.plot_importance(model)\n    plt.show()","710582b3":"test_df.head()","beee190d":"test_df['month'] = test_df['application_date'].dt.month\ntest_df['day_of_month'] = test_df['application_date'].dt.day\ntest_df['day_of_week'] = test_df['application_date'].dt.dayofweek","667536c6":"test_df.shape","f66b2368":"temp_df = test_df[['id','application_date']]\ntest_df = test_df[feat_cols]","54bb2355":"predictions = []\npredictions = (sum([model.predict(test_df) for model in models])\/folds)","4530206c":"len(predictions)","b5063086":"test_df = pd.read_csv('\/kaggle\/input\/ltfs-2\/test_1eLl9Yf.csv', parse_dates=['application_date'])\ntest_df['case_count'] = pd.Series(predictions)","4d18ba8c":"test_df.to_csv('submission_1.csv', index=False)","d2a69560":"Null values are present in dataframe. For 2nd business segment, the branch_id and zone are null, as they are aggregated over state level.","de596fb9":"There are few spikes for # of cases for business segment 1. Lets' find out why!","eb33378d":"The drop could be due to the fact that 6th day is saturday, and is usually off across most industries. ","7705e173":"Since salary gets credited till 10th of every month or in the last days of a month, the sharp increase from 10th day of the month and then the sharp decrease from 26th or 27th of the month could you attributed to the fact that retail people opt for loans maybe personal, home or vehical loan.\nSharp increase in first business segment from 30th of every month. Why???","1c41d5f0":"Total % of cases with segment 1 are low as compared to cases with segment 2. But somehow, they are presented branch wise. Don't understand why!","01c3f7cd":"Since we have to calculate no. of cases at country level, case_count = 0, in some cases should not be a problem while caluating MAPE numbers.","d96c0a67":"Sharp increase from Feb to March and then sharp decrease from March to April ???\nAgain increase in applications from Apr to June and then continous decrese till Aug.\nConstant from Aug till Nov and then increase in applications till Dec\nSeg - 1\nSame observations but in small scale.\nDecrease in applications in month of December."}}