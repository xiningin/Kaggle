{"cell_type":{"bc46e0a2":"code","292d66f8":"code","aee840c0":"code","bd3a57f5":"code","9e1fc1f3":"code","d2983315":"code","c6b66741":"code","176e90ec":"code","9fe83904":"markdown"},"source":{"bc46e0a2":"!cp -r ..\/input\/h2oai-wave\/wave-0.13.0-linux-amd64\/ .\n!chmod +x .\/wave-0.13.0-linux-amd64\/waved\n!pip install -r wave-0.13.0-linux-amd64\/examples\/requirements.txt -q\n!pip install pyngrok -q","292d66f8":"from pyngrok import ngrok\nfrom subprocess import Popen, run\nimport sys\nimport os\nimport time\nfrom IPython.core.display import display, HTML\n\nos.chdir('wave-0.13.0-linux-amd64')","aee840c0":"waved_process = Popen(\".\/waved\", shell=True)","bd3a57f5":"%%writefile app.py\n\n\n# To-do List App\n# A simple multi-user To-do list application.\n# ---\nfrom h2o_wave import main, app, Q, ui, listen\nfrom typing import List\n\n_id = 0\n\n\n# A simple class that represents a to-do item.\nclass TodoItem:\n    def __init__(self, text):\n        global _id\n        _id += 1\n        self.id = f'todo_{_id}'\n        self.done = False\n        self.text = text\n\n\nasync def serve(q: Q):\n    if q.args.new_todo:  # Display an input form.\n        await new_todo(q)\n    elif q.args.add_todo:  # Add an item.\n        await add_todo(q)\n    else:  # Show all items.\n        await show_todos(q)\n\n\nasync def show_todos(q: Q):\n    # Get items for this user.\n    todos: List[TodoItem] = q.user.todos\n\n    # Create a sample list if we don't have any.\n    if todos is None:\n        q.user.todos = todos = [TodoItem('Do this'), TodoItem('Do that'), TodoItem('Do something else')]\n\n    # If the user checked\/unchecked an item, update our list.\n    for todo in todos:\n        if todo.id in q.args:\n            todo.done = q.args[todo.id]\n\n    # Create done\/not-done checkboxes.\n    done = [ui.checkbox(name=todo.id, label=todo.text, value=True, trigger=True) for todo in todos if todo.done]\n    not_done = [ui.checkbox(name=todo.id, label=todo.text, trigger=True) for todo in todos if not todo.done]\n\n    # Display list\n    q.page['form'] = ui.form_card(box='1 1 4 10', items=[\n        ui.text_l('To Do'),\n        ui.button(name='new_todo', label='Add To Do...', primary=True),\n        *not_done,\n        *([ui.separator('Done')] if len(done) else []),\n        *done,\n    ])\n    await q.page.save()\n\n\nasync def add_todo(q: Q):\n    # Insert a new item\n    q.user.todos.insert(0, TodoItem(q.args.text or 'Untitled'))\n\n    # Go back to our list.\n    await show_todos(q)\n\n\nasync def new_todo(q: Q):\n    # Display an input form\n    q.page['form'] = ui.form_card(box='1 1 4 10', items=[\n        ui.text_l('Add To Do'),\n        ui.textbox(name='text', label='What needs to be done?', multiline=True),\n        ui.buttons([\n            ui.button(name='add_todo', label='Add', primary=True),\n            ui.button(name='show_todos', label='Back'),\n        ]),\n    ])\n    await q.page.save()\n    \nif __name__ == '__main__':\n    listen('\/todo', serve)","9e1fc1f3":"try:\n    app_process.kill()\nexcept:\n    pass\napp_process = Popen([\"python\", \"app.py\"])","d2983315":"url = ngrok.connect(addr=10101)\nurl = url.public_url + '\/todo'\nprint(f\"Successfully established ngrok tunnel, visit the app at {url}.\")","c6b66741":"display(HTML(f\"\"\"<font size=\"5px\"><a href={url}>Click here to visit the Todo App (only works in interactive kernel mode)!<\/a><\/font>\"\"\"))\n","176e90ec":"#time.sleep(60*60)","9fe83904":"## H2O.ai Wave\n\n![](https:\/\/www.h2o.ai\/wp-content\/uploads\/2020\/12\/wave-type-yellow-1100x400.png)\n\nThis kernel shows how you can use H2O Wave in an interactive Kaggle kernel.\n\nPlease find more information about Wave online at https:\/\/h2oai.github.io\/wave\/.\n\n**Important note: You can only visit the app when running this kernel interactively!**"}}