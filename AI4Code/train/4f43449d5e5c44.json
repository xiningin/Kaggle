{"cell_type":{"fb06c75f":"code","f63991d3":"code","2e17e873":"code","0dc07c49":"code","4bdda06b":"code","96cb04e7":"code","356c8ac2":"code","9b564b33":"code","ae81046f":"code","1329df06":"code","be5c9140":"code","a35497f8":"code","5fd642b5":"code","b9f47529":"code","c4d33a1a":"code","fc58d17f":"code","e2acebcf":"code","ac05f604":"code","2825daa7":"code","adb2c88b":"code","4f36999c":"code","6540e05d":"code","2e21ee1a":"code","1c3695c4":"code","73eedc87":"code","1043e2be":"code","0c7422ab":"code","afa95c0b":"code","2c43eb52":"code","106148d4":"code","0b7704cd":"code","ff638fcd":"code","c97373d5":"code","b29c9824":"code","be045c92":"code","2b35b286":"code","cfdce630":"code","044bfee7":"code","6601ab99":"code","c081dc8b":"code","bc567140":"code","7bc70276":"code","f5c6c8c6":"code","bd75069c":"code","90b3fda7":"code","c77af5e6":"code","6f96d8d7":"code","cbc9db11":"code","1518dc5c":"code","a29f0a5a":"code","b554a454":"code","9fe9d65d":"code","5a24c8e3":"code","d577ee41":"code","2d4dd385":"code","665eb559":"code","8f906a7c":"code","e8190492":"code","9303525e":"code","2b1aad66":"code","e5acd545":"code","90c037bc":"code","056e2054":"code","e6f39771":"code","4e74c583":"code","33563ca7":"code","a4c03b45":"code","e038d7b9":"code","ed78636f":"code","f632bc1e":"code","4d30116c":"code","71efa08a":"markdown","ee51c003":"markdown","b8910fb9":"markdown","2f17fa26":"markdown","d25dc557":"markdown","3ab43e39":"markdown","be3e451e":"markdown","fc2e21aa":"markdown"},"source":{"fb06c75f":"# Importando\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime","f63991d3":"train = pd.read_csv(\"..\/input\/housing-prices-competition-for-kaggle-learn-users\/train.csv\")\ntest = pd.read_csv(\"..\/input\/housing-prices-competition-for-kaggle-learn-users\/test.csv\")","2e17e873":"import json\nresult = test.loc[0,:].to_json(orient=\"index\")","0dc07c49":"json.loads(result)","4bdda06b":"train.shape","96cb04e7":"train.head()","356c8ac2":"print(len(train))\nprint(len(test))","9b564b33":"# How many null values\ntrain.isnull().sum()","ae81046f":"null_col = train.columns[train.isnull().any()]\ntrain[null_col].isnull().sum()","1329df06":"datafields_arq = open('..\/input\/datafields-housingprices\/datafields.txt', 'r')\ndatafields = datafields_arq.readlines()\ndatafields_arq.close()\ndatafields.sort()","be5c9140":"datafields","a35497f8":"train.corr()['SalePrice'].sort_values(ascending=False)","5fd642b5":"train.drop(['Alley','PoolQC','Fence','MiscFeature'],axis=1,inplace=True)","b9f47529":"sns.scatterplot(train['OverallQual'], train['SalePrice']);","c4d33a1a":"OverallQual_Q1 = train.OverallQual.quantile(0.25)\nOverallQual_Q3 = train.OverallQual.quantile(0.75)\nOverallQual_IQR = OverallQual_Q3-OverallQual_Q1\nOverallQual_outlier_conditional =  ((train.OverallQual > OverallQual_Q1 - 1.5*OverallQual_IQR) & (train.OverallQual < OverallQual_Q3 + 1.5*OverallQual_IQR))\n#train = train[OverallQual_outlier_conditional]","fc58d17f":"sns.scatterplot(train['OverallQual'],train['SalePrice']);","e2acebcf":"sns.scatterplot(train['OverallQual'], train['SalePrice']);","ac05f604":"sns.scatterplot(train['GarageCars'], train['SalePrice']);","2825daa7":"GarageCars_Q1 = train.GarageCars.quantile(0.25)\nGarageCars_Q3 = train.GarageCars.quantile(0.75)\nGarageCars_IQR = GarageCars_Q3-GarageCars_Q1\nGarageCars_outlier_conditional =  ((train.GarageCars > GarageCars_Q1 - 1.5*GarageCars_IQR) & (train.GarageCars < GarageCars_Q3 + 1.5*GarageCars_IQR))\n#train = train[GarageCars_outlier_conditional]","adb2c88b":"sns.scatterplot(train['GarageCars'], train['SalePrice']);","4f36999c":"sns.scatterplot(train['GrLivArea'], train['SalePrice']);","6540e05d":"# Removing outliers in GrLivArea\ntrain.drop(index = train[(train['GrLivArea'] > 4000) & (train['SalePrice']<300000)].index, inplace= True)","2e21ee1a":"sns.scatterplot(train['GrLivArea'], train['SalePrice']);","1c3695c4":"train.hist(grid=False, figsize=(20, 20), bins=40)","73eedc87":"train.info()","1043e2be":"# Transform CentralAir in zero or one column\ntrain.loc[train.CentralAir=='Y','CentralAir'] = 1\ntrain.loc[train.CentralAir=='N','CentralAir'] = 0\ntrain['CentralAir'] = train['CentralAir'].astype(int)","0c7422ab":"train['CentralAir']","afa95c0b":"print(train.Street.value_counts())\ntrain['Street_Pave'] = train.Street.apply(lambda x: 1 if x == 'Pave' else 0)\ntrain.Street_Pave.value_counts()","2c43eb52":"train.LandContour.value_counts()\ntrain['LandContour_Flat'] = train.LandContour.apply(lambda x: 1 if x == 'Lvl' else 0)\ntrain.LandContour_Flat.value_counts()","106148d4":"train['MSSubClass']","0b7704cd":"# MSSubClass is a categorical variable\n#train['MSSubClass'] = train['MSSubClass'].astype(str) ","ff638fcd":"print(train.YearBuilt.value_counts())\n\ndate = datetime.date.today()\nyear = int(date.strftime(\"%Y\"))\n\ntrain['Year_Old'] = train.YearBuilt.apply(lambda x: year - x)\ntrain.Year_Old.value_counts()\ntrain.Year_Old.hist()","c97373d5":"print(train.YearRemodAdd.value_counts())\ntrain['Remod_Age'] = train.YearRemodAdd.apply(lambda x: year - x)\nprint(train.Remod_Age.value_counts())\ntrain.Remod_Age.hist()","b29c9824":"print(train.MasVnrType.value_counts())\nprint(train.MasVnrType.isnull().sum().sum())\ntrain.MasVnrType.fillna('None', inplace=True)\nprint(train.MasVnrType.value_counts())","be045c92":"train.MasVnrArea.value_counts()\nprint(train.MasVnrArea.isnull().sum().sum())\ntrain.MasVnrArea.fillna(0, inplace=True)\nprint(train.MasVnrArea.isnull().sum().sum())","2b35b286":"print(train.FireplaceQu.value_counts())\ntrain.FireplaceQu.fillna('NA', inplace=True)\nprint(train.FireplaceQu.value_counts())","cfdce630":"train.GarageFinish.value_counts()\ntrain.GarageFinish.fillna('None', inplace=True)\ntrain.GarageFinish.value_counts()","044bfee7":"train.describe()","6601ab99":"train.describe(include='all')","c081dc8b":"# Remove ID and SalePrice column \ntrain_ = train.drop(columns = ['Id', 'SalePrice'])\n","bc567140":"# get_dummies transform categorical columns in binary columns\n#train_ = pd.get_dummies(train_)\n#train_ = train_.fillna(0)\n#train_","7bc70276":"#X = train_.copy()\n#y = train['SalePrice']\n#y\nX = train.copy()","f5c6c8c6":"X","bd75069c":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, MinMaxScaler, StandardScaler\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score, RandomizedSearchCV, KFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","90b3fda7":"null_col = X.columns[X.isnull().any()]\nX[null_col].isnull().sum()","c77af5e6":"X[null_col].dtypes","6f96d8d7":"X.LotFrontage.fillna(0.0, inplace=True)\nX.GarageYrBlt.fillna(0.0, inplace=True)","cbc9db11":"null_col = X.columns[X.isnull().any()]\nX[null_col].dtypes","1518dc5c":"X.fillna('0', inplace=True)\nnull_col = X.columns[X.isnull().any()]\nX[null_col].isnull().sum()","a29f0a5a":"X.select_dtypes(\"object\").columns","b554a454":"ohe = OneHotEncoder()\noheResult = ohe.fit_transform(X[X.select_dtypes(\"object\").columns]).toarray()","9fe9d65d":"oheResult","5a24c8e3":"feature_labels = ohe.categories_\nnewArray = []\nfor x in feature_labels:\n    for y in x:\n        newArray.append(y)\nfeature_labels = newArray","d577ee41":"encoded = pd.DataFrame(oheResult, columns=feature_labels)","2d4dd385":"encoded","665eb559":"newX = X.drop(columns = X.select_dtypes(\"object\").columns)","8f906a7c":"newX.select_dtypes(\"object\").columns","e8190492":"encoded.select_dtypes(\"object\").columns","9303525e":"X_final = pd.concat([newX, encoded], axis=1)","2b1aad66":"X_final.select_dtypes(\"object\").columns","e5acd545":"X_final","90c037bc":"X_final['SalePrice']","056e2054":"# Remove ID and SalePrice column \nX = X_final.drop(columns = ['Id', 'SalePrice'])\ny = X_final['SalePrice']\ny","e6f39771":"X.head()","4e74c583":"X_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.2, random_state=1)","33563ca7":"np.all(np.isnan(y_test))","a4c03b45":"regressionRF = RandomForestRegressor(n_estimators=950, \n                                     min_samples_split=2,\n                                     min_samples_leaf=1,\n                                     max_features='auto',\n                                     max_depth=None,\n                                     bootstrap=True)","e038d7b9":"def evaluate(model, test_features, test_labels):\n    predictions = model.predict(test_features)\n    errors = abs(predictions - test_labels)\n    mape = 100 * np.mean(errors \/ test_labels)\n    accuracy = 100 - mape\n    print('Score = {:0.2f}%.'.format(model.score(test_features, test_labels)*100))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    print('Average Error: {:0.4f} degrees.\\n'.format(np.mean(errors)))","ed78636f":"#regressionTree = DecisionTreeRegressor(random_state = 0, max_depth=7, min_samples_leaf=32, min_samples_split=32)\n#regressionLinear = LinearRegression()\n#base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)","f632bc1e":"#regressionTree.fit(X_train, y_train)\n#regressionLinear.fit(X_train, y_train)\n#base_model.fit(X_train, y_train)\nregressionRF.fit(X_train, y_train)","4d30116c":"print(\"\\nDecision Tree Regression\")\nevaluate(regressionTree, X_test, y_test)\n\nprint(\"\\nLinear Regression\")\nevaluate(regressionLinear, X_test, y_test)\n\nprint(\"\\nBase Model - Random Forest Regression\")\nevaluate(base_model, X_test, y_test)\n\nprint(\"\\nBest Model - Random Forest Regression\")\nevaluate(regressionRF, X_test, y_test)","71efa08a":"# Meaning of each column","ee51c003":"# Modeling","b8910fb9":"# Data preparation","2f17fa26":"# Dataset View","d25dc557":"## Training others models","3ab43e39":"# Metrics","be3e451e":"# Split and Hyperparameter optimization","fc2e21aa":"# Dataset reading"}}