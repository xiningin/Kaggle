{"cell_type":{"7cdcbab7":"code","678a35e4":"code","4eaa4fc3":"code","af484041":"code","981e763c":"code","ea1aeee0":"code","54bed783":"code","1d7a8baa":"code","bb37e403":"code","7af02fce":"code","d93a6100":"code","d1508b12":"code","59578c6d":"code","a593348a":"code","0c7d6d86":"code","48c9d98c":"code","84adccfc":"code","1bcb1362":"code","ed47fde7":"code","c34fd498":"markdown"},"source":{"7cdcbab7":"from shutil import copyfile\ncopyfile(src = \"..\/input\/fairness.py\", dst = \"..\/working\/fairness.py\")\nimport fairness\nimport pandas as pd","678a35e4":"data = pd.read_csv(\"..\/input\/resumes_development.csv\", index_col=0)\ndata.head()","4eaa4fc3":"skill = \"Digital Media\"\naccepted = data.query(\"Interview == 1\")[skill]\nrejected = data.query(\"Interview == 0\")[skill]\nprint(\"Accepted candidates with skill = {0:.1f}%\".format(accepted.mean() * 100))\nprint(\"Rejected candidates with skill = {0:.1f}%\".format(rejected.mean() * 100))","af484041":"data[[\"Digital Media\", \"Team Management\", \"Java\", \"Analytical Skills\", \"Troubleshooting\"]].corr().round(2)","981e763c":"from sklearn.model_selection import train_test_split\n\ndata_train, data_test = train_test_split(data, test_size=0.25, stratify=data[\"Interview\"])\ny_train = data_train[\"Interview\"]\ny_test = data_test[\"Interview\"]\nprint(\"Train: N = {} records, P(Interview) = {}\".format(len(data_train), y_train.mean()))\nprint(\"Test:  N = {} records, P(Interview) = {}\".format(len(data_test), y_test.mean()))","ea1aeee0":"demographics = [\"Veteran\", \"Female\", \"URM\", \"Disability\"]\npredictors = list(set(data.columns) - set([\"Interview\"] + demographics))","54bed783":"X_train = data_train[predictors]\nX_test = data_test[predictors]","1d7a8baa":"from sklearn.tree import DecisionTreeClassifier\nfrom fairness import evaluate_model, visualize_tree","bb37e403":"tree = DecisionTreeClassifier(max_depth=7)\ntree.fit(X_train, y_train)\ny_pred = tree.predict(X_test)","7af02fce":"evaluate_model(y_test, y_pred)","d93a6100":"visualize_tree(tree, predictors, [\"Rejected\", \"Interview\"], [\"red\", \"purple\"])","d1508b12":"from sklearn.linear_model import LogisticRegression","59578c6d":"logres = LogisticRegression(solver=\"liblinear\")\nlogres.fit(X_train, y_train)\ny_pred = logres.predict_proba(X_test)[:,1]","a593348a":"evaluate_model(y_test, logres.predict(X_test))","0c7d6d86":"y_modified = (logres.predict_proba(X_test)[:,1] >= 0.4).astype(int)\nevaluate_model(y_test, y_modified)","48c9d98c":"from sklearn.metrics import precision_recall_curve, average_precision_score\n\ndef show_prc(clf, X_test, y_test):\n    y_score = clf.predict_proba(X_test)[:, 1]\n    precs, recs, prc_t = precision_recall_curve(y_test, y_score)\n    print(\"AUPRC = {0:.3f}\".format(average_precision_score(y_test, y_score)))\n    best_f1 = -1\n    best_t = 2\n    for p, r, t in zip(precs, recs, prc_t):\n        f1 = (2 * p * r) \/ (p + r + 1e-10)\n        print(\"F1 = {0:.3f} at threshold = {1:.3f}\".format(f1, t))\n        if f1 > best_f1:\n            best_f1 = f1\n            best_t = t\n    print(\"Best F1 = {0:.3f} at threshold = {1:.3f}\".format(best_f1, best_t))\n    sns.lineplot(x=recs, y=precs)\n    plt.xlabel(\"Recall\")\n    plt.ylabel(\"Precision\")\n    plt.show()","84adccfc":"from fairness import show_roc, show_prc\nshow_prc(logres, X_test, y_test)","1bcb1362":"coefs = pd.DataFrame(logres.coef_[0], index=predictors)\ncoefs.head(3)","ed47fde7":"import numpy as np\nnp.exp(1.176442)","c34fd498":"# Strategeion Resumes Starter"}}