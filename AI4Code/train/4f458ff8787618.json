{"cell_type":{"631b28c0":"code","cf659fc3":"code","16cfe2b1":"code","a3f56669":"code","88899520":"code","dd5eae97":"code","e90da312":"code","b98f5f90":"code","6af924ac":"code","86b216ae":"code","f626d07b":"code","ff9f67d5":"code","e268bd4a":"code","1efd0b0c":"code","f722291c":"code","103f1ff0":"code","6809d5f0":"code","4a355f34":"code","00510f65":"code","1833b1df":"code","73152f68":"code","7030deb2":"code","ea27bc2d":"code","85bbec7c":"code","32d9d9e5":"code","6d222a6d":"code","b4d34815":"code","07bb06d0":"code","295d0547":"code","ed9a8296":"code","309104dd":"code","35607388":"markdown","e1d31097":"markdown","ac624828":"markdown","a4906a62":"markdown","ae86492d":"markdown","32f510a5":"markdown","3859dc78":"markdown","4dcac515":"markdown","d17b51c3":"markdown","ceb8025d":"markdown","1ade246e":"markdown","2b8afa6f":"markdown","b7a00391":"markdown","fd389f49":"markdown","d43be21c":"markdown","cc4be915":"markdown","99b64b85":"markdown","f121918d":"markdown","a7705355":"markdown","22d1b546":"markdown","dc81fb55":"markdown","abb5a349":"markdown","0b4c38b3":"markdown","0bc1a869":"markdown","0eb081df":"markdown","73882c4b":"markdown","47dd285d":"markdown","9d3c552b":"markdown","49079f23":"markdown","132834b9":"markdown","b07ca3ec":"markdown","2201e257":"markdown","d65e4020":"markdown"},"source":{"631b28c0":"### \u203bIn this notebook , main language is English, sublanguage is Japanese.","cf659fc3":"import numpy as np\nimport pandas as pd\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn import metrics ","16cfe2b1":"path = \"..\/input\/ventilator-pressure-prediction\/\"\nos.listdir(path)","a3f56669":"train = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsubmission = pd.read_csv(path + 'sample_submission.csv')","88899520":"train","dd5eae97":"test","e90da312":"# histgoram of pressure\nplt.figure(figsize= (10,5))\ntrain['pressure'].hist(bins=50)\nprint(\"mean: {}, std: {}\".format(train['pressure'].mean(), train['pressure'].std()))\nplt.show()","b98f5f90":"plt.figure(figsize = (10,5))\nsns.histplot(data=train,x='time_step', bins=20)\nprint(\"max time_step is {} \\n\".format(train.time_step.max()))\nplt.show()","6af924ac":"fig, ax = plt.subplots(figsize = (20, 12))\nplt.subplot(2, 2, 1)\nsns.histplot(data=train,x='u_in', bins=100)\nprint(\"u_in train mean is {} , mode is {} \".format(train['u_in'].mean(),train['u_in'].mode()))\nplt.title('count of u_in train')\n\nplt.subplot(2, 2, 2)\nsns.histplot(data=test,x='u_in', bins=100)\nprint(\"u_in test mean is {} , mode is {} \".format(test['u_in'].mean(),test['u_in'].mode()))\nplt.title('count of u_in test')\nplt.show()","86b216ae":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='u_out', data=train)\nplt.title('Count of u_out in train')\nplt.subplot(2, 2, 2)\nsns.countplot(x='u_out', data=test)\nplt.title('Count of u_out in test')\nplt.show()","f626d07b":"u_out_is_zero = train.query(\"u_out == 0\").reset_index(drop=True)\nplt.figure(figsize = (12,5))\nax = sns.distplot(u_out_is_zero['pressure'], \n             bins=120, \n             kde_kws={\"clip\":(0,50)}, \n             hist_kws={\"range\":(0,50)},\n             color='skyblue', \n             kde=False);\n\nplt.xlabel(\"Histogram of pressures (u_out=0)\", size=14)\nprint(\"median is {}\".format(u_out_is_zero.pressure.median()))\nplt.show()","ff9f67d5":"u_out_is_zero = train.query(\"u_out == 1\").reset_index(drop=True)\nplt.figure(figsize = (12,5))\nax = sns.distplot(u_out_is_zero['pressure'], \n             bins=120, \n             kde_kws={\"clip\":(0,50)}, \n             hist_kws={\"range\":(0,50)},\n             color='skyblue', \n             kde=False);\n\nplt.xlabel(\"Histogram of pressures (u_out=1)\", size=14)\nprint(\"median is {}\".format(u_out_is_zero.pressure.median()))\nplt.show()","e268bd4a":"fig, ax = plt.subplots(figsize = (12, 8))\nplt.subplot(2, 2, 1)\nsns.countplot(x='R', data=train)\nplt.title('Count of R in train')\nplt.subplot(2, 2, 2)\nsns.countplot(x='R', data=test)\nplt.title('Count of R in test')\nplt.subplot(2, 2, 3)\nsns.countplot(x='C', data=train)\nplt.title('Count of C in train')\nplt.subplot(2, 2, 4)\nsns.countplot(x='C', data=test)\nplt.title('Count of C in test')","1efd0b0c":"fig, ax = plt.subplots(figsize=(10, 10))\n\ndf_corr = train.corr()\nsns.heatmap(df_corr,annot=True, fmt=\".2f\",cmap='Blues')\nplt.show()","f722291c":"ventilation_cycle = train[train['breath_id']==2]\nprint(f\"Unique value counts in each time stamp\\n{ventilation_cycle.nunique()}\\n\")","103f1ff0":"breath_542 = train.query('breath_id == 202').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(12, 4))\nax.plot(breath_542[\"time_step\"],breath_542[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_542[\"time_step\"],breath_542[\"pressure\"], lw=2, label='pressure')\n#ax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nax.set_title(\"breath_id = 542\", fontsize=14)\nplt.show();\n\nbreath_119582 = train.query('breath_id == 119582').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(12, 4))\nax.plot(breath_119582[\"time_step\"],breath_119582[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_119582[\"time_step\"],breath_119582[\"pressure\"], lw=2, label='pressure')\n#ax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nax.set_title(\"breath_id = 119582\", fontsize=14)\nplt.show();","6809d5f0":"fig, ax1 = plt.subplots(1,1,figsize = (12, 8))\n\nbreath_1 = train.loc[train['breath_id'] == 9]\nax2 = ax1.twinx()\n\nax1.plot(breath_1['time_step'], breath_1['pressure'], 'r-', label='pressure')\nax1.plot(breath_1['time_step'], breath_1['u_in'], 'g-', label='u_in')\nax2.plot(breath_1['time_step'], breath_1['u_out'], 'b-', label='u_out')\n\nax1.set_xlabel('Timestep')\n\nax1.legend(loc=(1.1, 0.8))\nax2.legend(loc=(1.1, 0.7))\nplt.show();","4a355f34":"for i in range(25,30,1):\n    one_breath = train[train[\"breath_id\"]==i]\n\n    plt.figure(figsize=(8,6));\n    sns.lineplot(x = 'id',y='pressure',data=one_breath[one_breath['u_out']==0],color='green',label='pressure inhale');\n    sns.lineplot(x = 'id',y='pressure',data=one_breath[one_breath['u_out']==1],color='orange',label='pressure exhale');\n    sns.lineplot(x = 'id',y='u_in',data=one_breath,color='blue',label='input valve')\n    plt.title(f\"Variation of Pressure and Input valve position during breath {i}\");\n    plt.legend();","00510f65":"# for try to train from small data\ndf = train[train['breath_id'] < 5].reset_index(drop=True)","1833b1df":"df2 = df.groupby('breath_id').agg(list).reset_index()\ndf2","73152f68":"import torch\nfrom torch.utils.data import Dataset\n\nclass VenilatorDataset(Dataset):\n    def __init__(self, df):\n        if \"pressure\" not in df.columns:\n            df[\"pressure\"] = 0\n        \n        self.df = df.groupby('breath_id').agg(list).reset_index()\n        \n        self.prepare_data()\n        \n    def __len__(self):\n        return self.df.shape[0]\n            \n    def prepare_data(self):\n        # ~ later ~ (for preprocessing)\n        self.pressures = np.array(self.df['pressure'].tolist())\n        \n        rs = np.array(self.df['R'].tolist())\n        cs = np.array(self.df['R'].tolist())\n        u_ins = np.array(self.df['u_in'].tolist())\n        \n        self.u_outs = np.array(self.df['u_out'].tolist())\n        \n        self.inputs = np.concatenate([\n            # specify 1 column\n            rs[:, None],\n            cs[:, None],\n            u_ins[:, None],\n            np.cumsum(u_ins, 1)[:, None],\n            self.u_outs[:, None]\n        ], 1).transpose(0, 2, 1)\n              \n        \n    def __getitem__(self, idx):\n        data = {\n            \"input\": torch.tensor(self.inputs[idx], dtype=torch.float),\n            \"u_out\": torch.tensor(self.u_outs[idx], dtype=torch.float),\n            \"pressure\": torch.tensor(self.pressures[idx], dtype=torch.float)\n        }\n        \n        return data","7030deb2":"dataset = VenilatorDataset(df)\ndataset[0]","ea27bc2d":"import torch\nimport torch.nn as nn\nimport random\nimport gc\nimport time\nfrom torch.utils.data import DataLoader\nfrom transformers import get_linear_schedule_with_warmup\nfrom sklearn.model_selection import GroupKFold","85bbec7c":"class RNNModel(nn.Module):\n    def __init__(\n        self,\n        input_dim = 4,\n        lstm_dim = 256,\n        dense_dim = 256,\n        logit_dim = 256,\n        num_classes = 1\n    ):\n        \n        super().__init__()\n        \n        self.mlp = nn.Sequential(\n            nn.Linear(input_dim, dense_dim \/\/ 2),\n            nn.Relu(),\n            nn.Linear(dense_dim \/\/ 2, dense_dim),\n            nn.Relu()\n        )\n        \n        '''\n        nn.LSTM(input_size, hidden_size,num_layers, batch_first) , 2 output: (hn, cn)  \n        batch_first=True: (seq_len, batch, input_size)\u2192(batch, seq_len, input_size)\n        '''\n        self.lstm = nn.LSTM(dense_dim, lstm_dim, batch_fisrt=True, bidirectional=True)\n        \n        self.logits = nn.Sequential(\n            nn.Linear(lstm_dim * 2, logit_dim), # *2 for (concatenate forward & backward output)\n            nn.ReLU(),\n            nn.Linear(logit_dim, num_classes)\n        )\n        \n    def forward(self, x):\n        features = self.mlp(x)\n        features, _ = self.lstm(features)\n        pred = self.logits(features)\n        return pred","32d9d9e5":"class VentilatorLoss(nn.Module):\n    \"\"\"\n    Directly optimizes the competition metric\n    \"\"\"\n    def __call__(self, preds, y):\n        w = 1 - u_out\n        mae = w * (y - preds).abs()\n        mae = mae.sum(-1) \/ w.sum(-1)\n        \n        return mae","6d222a6d":"def fit(model,\n        train_dataset,\n        val_dataset,\n        optimize=\"Adam\",\n        epochs=3,\n        batch_size=32,\n        val_bs=32,\n        ):\n    avg_val_loss = 0\n    \n    # Optimizer\n    optimizer = getattr(torch.optim, optimizer)(model.parameters(), lr=lr)\n    \n    # Data loaders\n    train_loader = DataLoader(\n        train_dataset,\n        batch_size=batch_size,\n        shuffle=True,\n        drop_last=True,\n        num_workers=NUM_WORKERS,\n        pin_memory=True, # for fast train\n        worker_init_fn = worker_init_fn\n        )\n    \n    val_loader = DataLoader(\n        val_dataset,\n        batch_size=batch_size,\n        shuffle=True,\n        num_workers=NUM_WORKERS,\n        pin_memory=True, # for fast train\n        )   \n    \n    # Loss\n    loss = VentilatorLoss()\n    \n    # Sheduler\n    #for epoch in range(epoch):\n    \n    return pred","b4d34815":"def predict(model, ):\n    model.eval()\n    \n    loader = DataLoader()\n    \n    return pred\n","07bb06d0":"def train():\n    \n    seed_configure(config.seed)\n    model = RNNModel()\n    model.zero_grad()\n    \n    train_dataset = \n    val_dataset = \n    test_dataset = \n    \n    pred_val = fit()\n    \n    pred_test = predict()\n    \n    # save weights\n    ","295d0547":"def k_fold():\n    # add later\n","ed9a8296":"class Config:\n    \"\"\"\n    Parameters used for training\n    \"\"\"\n    # General\n    seed = 42\n    verbose = 1\n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    save_weithts = True\n    \n    # k-fold\n    k = 5\n    selction_fold = [0, 1, 2, 3, 4]\n    \n    # Model\n    selected_model = 'rnn'\n    input_dim = 5\n    \n    dense_dim = ?\n    lstm_dim = ?\n    logit_dim = ?\n    \n    # Training\n    loss = \n    optimizer = \"Adam\"\n    bathc_size = 128\n    epochs = 100\n    \n    lr = 1e-3\n    #later\n    \n    \n    ","309104dd":"k_fold(Config, df_train, df_test)","35607388":"### Thanks reference","e1d31097":"### Config","ac624828":"The competition will be scored as the mean absolute error between the predicted and actual pressures during the inspiratory phase of each breath. The expiratory phase is not scored.","a4906a62":"### Model","ae86492d":"### Utils ","32f510a5":"#### \u203bIn this notebook , main language is English, sublanguage is Japanese.","3859dc78":"#### pressure(objective variable)","4dcac515":"### Train","d17b51c3":"C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow. \/ \u80ba\u306e\u9069\u5408\u6027\u3092\u793a\u3059\u80ba\u5c5e\u6027\uff08\u5358\u4f4d\uff1amL\/cmH2O\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u5727\u529b\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u4f53\u7a4d\u306e\u5909\u5316\u3092\u8868\u3057\u307e\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u540c\u3058\u98a8\u8239\u306e\u4f8b\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u98a8\u8239\u306e\u30e9\u30c6\u30c3\u30af\u30b9\u306e\u539a\u3055\u3092\u5909\u3048\u308b\u3053\u3068\u3067C\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002C\u304c\u5927\u304d\u3044\u307b\u3069\u30e9\u30c6\u30c3\u30af\u30b9\u304c\u8584\u304f\u3001\u5439\u304d\u3084\u3059\u304f\u306a\u308a\u307e\u3059","ceb8025d":"## EDA","1ade246e":"### R \/ C value  \n* R : with higher R being harder to blow  pressure \n* C : with higher C having thinner latex and easier to blow pressure\n* R \u21c4 C affect pressure?","2b8afa6f":"#### check the correlatoin ","b7a00391":"### Time series data(pressure\/ u_in)","fd389f49":"# Overview","d43be21c":"Each time series represents an approximately 3-second breath","cc4be915":"### Library","99b64b85":"#### Visualize TimeStamp","f121918d":"#### Fit","a7705355":"### Inderence","22d1b546":"#### Look pressure u_out ==1","dc81fb55":"#### Predict","abb5a349":"R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow. \/ \u6c17\u9053\u304c\u3069\u306e\u7a0b\u5ea6\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u80ba\u5c5e\u6027\uff08\u5358\u4f4d\uff1acmH2O\/L\/S\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u6d41\u91cf\uff08\u6642\u9593\u5f53\u305f\u308a\u306e\u7a7a\u6c17\u91cf\uff09\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u5727\u529b\u306e\u5909\u5316\u3067\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u30b9\u30c8\u30ed\u30fc\u3067\u98a8\u8239\u3092\u81a8\u3089\u307e\u305b\u308b\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u30b9\u30c8\u30ed\u30fc\u306e\u76f4\u5f84\u3092\u5909\u3048\u308b\u3053\u3068\u3067R\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001R\u304c\u5927\u304d\u3044\u307b\u3069\u5439\u304d\u306b\u304f\u304f\u306a\u308a\u307e\u3059\u3002","0b4c38b3":"u_out  \n(The control input for the binary variable representing whether the exploratory valve is open (1) or closed (0) to let air out.  \n- in this competition the expiratory phase is not scored, ","0bc1a869":"#### k-fold","0eb081df":"### Metrics","73882c4b":"#### Check 1 ventilation cycle","47dd285d":"### Predict","9d3c552b":"#### Time series data(pressure\/ u_in) \n#### in u_out=0 \"pressure inhale\"\/ u_out=1 \"pressure exhale\"","49079f23":"### Time series data(pressure\/ u_in \/ u_out)","132834b9":"#### Look pressure u_out ==0","b07ca3ec":"### Dataset","2201e257":"* [Ventilator Pressure: EDA and simple submission](https:\/\/www.kaggle.com\/carlmcbrideellis\/ventilator-pressure-eda-and-simple-submission)\n* [[V11]Ventilator: EDA + Understanding + Model + W&B](https:\/\/www.kaggle.com\/ishandutta\/v11-ventilator-eda-understanding-model-w-b)\n* [Deep Learning Starter : Simple LSTM](https:\/\/www.kaggle.com\/theoviel\/deep-learning-starter-simple-lstm)\n\n\n","d65e4020":"#### u_in  \nThe control input for the inspiratory solenoid valve. Ranges from 0 to 100 (i.e., 0 is completely closed and no air is let in and 100 is completely open)  \n\u7a7a\u6c17\u3092\u80ba\u306b\u5165\u308c\u308b\u305f\u3081\u306b\u5438\u6c17\u96fb\u78c1\u5f01\u3092\u958b\u304f\u5272\u5408\u3092\u8868\u3059\u30020\u306f\u5b8c\u5168\u306b\u9589\u3058\u3066\u7a7a\u6c17\u3092\u5165\u308c\u305a\u3001100\u306f\u5b8c\u5168\u306b\u958b\u304f    \nWhen Look under graph\n* most value exist between 0~5\n* train&test is completely same distribution"}}