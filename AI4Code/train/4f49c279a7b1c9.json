{"cell_type":{"205d5737":"code","954eaa2e":"code","91333b52":"code","24aba9e4":"code","77f94350":"code","97c7927b":"code","32faf213":"code","80b0907e":"code","24da0131":"code","dbacc197":"code","881644ef":"markdown"},"source":{"205d5737":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","954eaa2e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n \nfrom statsmodels.tools.eval_measures import rmse\nimport seaborn as sns\nimport statsmodels.api as sm\nimport itertools\nfrom statsmodels.tsa.arima_model import ARIMA, ARMA\nimport warnings\nwarnings.filterwarnings(\"ignore\")","91333b52":"data = pd.read_csv('\/kaggle\/input\/amazon-stock-price-20142019\/AMZNtrain.csv')","24aba9e4":"print(data.head())","77f94350":"#We are only interested in the close price\ndf = data[['Date','Close']]\ndf.Date = pd.to_datetime(df.Date)\ndf = df.set_index(\"Date\")","97c7927b":"df.plot(style=\"-\")","32faf213":"# Define the p, d and q parameters to take any value between 0 and 3\np = d = q = range(0, 3)\n# Generate all different combinations of p, q and q\npdq = list(itertools.product(p, d, q))","80b0907e":"warnings.filterwarnings(\"ignore\")\naic= []\nparameters = []\n\nfor param in pdq:\n    try:\n        mod = sm.tsa.statespace.SARIMAX(df, order=param,\n        enforce_stationarity=True, enforce_invertibility=True)\n        results = mod.fit()\n        # save results in lists\n        aic.append(results.aic)\n        parameters.append(param)\n        #seasonal_param.append(param_seasonal)\n        print('ARIMA{} - AIC:{}'.format(param, results.aic))\n    except:\n        continue\n# find lowest aic          \nindex_min = min(range(len(aic)), key=aic.__getitem__)           \n \nprint('The optimal model is: ARIMA{} -AIC{}'.format(parameters[index_min], aic[index_min]))","24da0131":"model = ARIMA(df, order=parameters[index_min])\nmodel_fit = model.fit(disp=0) \nprint(model_fit.summary())","dbacc197":"model_fit.plot_predict(start=2, end=len(df)+12)\nplt.show()","881644ef":" We will extract the \u2018Date\u2019 and the \u2018Close\u2019 price parameters from our dataset and we will set the \u2018Date\u2019 parameter as the index in our newly created dataset file."}}