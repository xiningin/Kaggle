{"cell_type":{"c40f27b6":"code","a2241489":"code","5c28d0f6":"code","3eef1e62":"code","7378f14d":"code","56cbf0b1":"code","accb6b5a":"code","ba731473":"code","3812beb4":"code","1cdab746":"code","34d0979e":"code","3a81eb80":"code","ce1c9a3a":"code","c3c60323":"code","8377b650":"code","35c8158c":"code","60fba74a":"code","cc5a6d8b":"code","33b39dd7":"code","cafd8fcf":"code","0a32e72f":"code","e24ff4f1":"code","3a10492a":"code","fe30f8a2":"code","2a447c12":"code","f23fd8f8":"code","35267e9e":"code","2588608e":"code","8f2bf1ae":"code","195b0265":"code","076ef49b":"code","78020cdb":"code","eae4c249":"code","a0b9a124":"code","90c0f13e":"code","55a464e8":"code","ecb9ea28":"code","1c832d94":"code","5419fbc1":"code","beeea132":"code","798b36f0":"code","fdedb3fe":"markdown","7c9963d7":"markdown","5370a168":"markdown","4af93f84":"markdown","6b9698d8":"markdown","3f72466c":"markdown","65a272f5":"markdown","9bf14dfc":"markdown","84da2f4f":"markdown","b870fb4a":"markdown","5f02cace":"markdown","6dbbd68f":"markdown","d44e3586":"markdown","c39b712e":"markdown","f3476a62":"markdown","096eefcf":"markdown","ed29f5d4":"markdown","eee1c7a3":"markdown","bc00b42f":"markdown","abefd87c":"markdown","4622a0aa":"markdown","a2626d74":"markdown","291ff4e6":"markdown","2afa005b":"markdown","351856c5":"markdown","b1b56768":"markdown","3cefb402":"markdown","44e23a54":"markdown","d7d4cd9e":"markdown","be719c32":"markdown","2688d0cc":"markdown","9d184d54":"markdown"},"source":{"c40f27b6":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","a2241489":"from keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","5c28d0f6":"import cv2\nimport os\nimport glob\nimport gc\n\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1)\n            img = cv2.resize(img, (xdim,ydim))\n            X.append(np.array(img))\n            y.append(label)\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","3eef1e62":"X,y,nlabels,names = lire_images(\"..\/input\/cat-and-dog\/training_set\/training_set\", 224, 224, 2000)","7378f14d":"names","56cbf0b1":"import random\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(names[y[j]])","accb6b5a":"y = to_categorical(y)","ba731473":"X.shape","3812beb4":"# Normalisation entre 0 et 1\nX = X \/ 255\nprint(X[0][0])","1cdab746":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","34d0979e":"del X,y","3a81eb80":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","ce1c9a3a":"model.summary()","c3c60323":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","8377b650":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","35c8158c":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","60fba74a":"plot_scores(train)","cc5a6d8b":"# Prediction\ny_cnn = model.predict_classes(X_test)","33b39dd7":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (names[y_cnn[j]], names[y_test[j].argmax(axis=-1)]))\n        i+=1","cafd8fcf":"# Mod\u00e8le CNN plus profond\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","0a32e72f":"model.summary()","e24ff4f1":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","3a10492a":"plot_scores(train)","fe30f8a2":"model.save('mnist_cnn2.h5')","2a447c12":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","f23fd8f8":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","35267e9e":"from keras.applications import VGG16","2588608e":"vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\nvgg16.trainable = False","8f2bf1ae":"vgg16.summary()","195b0265":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(49, activation='relu'))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","076ef49b":"model.summary()","78020cdb":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","eae4c249":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","a0b9a124":"for i in range (len(vgg16.layers)):\n    print (i,vgg16.layers[i])","90c0f13e":"for layer in vgg16.layers[15:]:\n    layer.trainable=True\nfor layer in vgg16.layers[0:15]:\n    layer.trainable=False","55a464e8":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(49, activation='relu'))\nmodel.add(Dense(20, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","ecb9ea28":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","1c832d94":"plot_scores(train)","5419fbc1":"y_cnn = model.predict_classes(X_test)","beeea132":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (names[y_cnn[j]], names[y_test[j].argmax(axis=-1)]))\n        i+=1","798b36f0":"from keras.applications import InceptionV3, ResNet50V2","fdedb3fe":"On \"binarise\" la cible :","7c9963d7":"Pour installer la version GPU sous windows, cf https:\/\/medium.com\/@raza.shahzad\/setting-up-tensorflow-gpu-keras-in-conda-on-windows-10-75d4fd498198  \nSous Linux : http:\/\/deeplearning.lipingyang.org\/2017\/08\/01\/install-keras-with-tensorflow-backend\/  \nSous MacOS (avec GPU Nvidia) : https:\/\/blog.wenhaolee.com\/run-keras-on-mac-os-with-gpu\/","5370a168":"On affiche des images al\u00e9atoirement :","4af93f84":"On peut ensuite utiliser le mod\u00e8le sans recommencer l'entra\u00eenement :","6b9698d8":"## Initialisations","3f72466c":"Il existe plusieurs autres mod\u00e8les plus complexes :\nhttps:\/\/keras.io\/applications\/","65a272f5":"On d\u00e9compose en ensemble d'apprentissage et de validation :","9bf14dfc":"L'apprentissage peut \u00eatre un peu long sans GPU ...","84da2f4f":"D\u00e9tection de pneumonie sur des radios :  \nhttps:\/\/www.kaggle.com\/paultimothymooney\/chest-xray-pneumonia  \n  \nD\u00e9tection de cellules infect\u00e9es par la malaria :  \nhttps:\/\/www.kaggle.com\/iarunava\/cell-images-for-detecting-malaria\n\nLes Simpsons  \nhttps:\/\/www.kaggle.com\/alexattia\/the-simpsons-characters-dataset","b870fb4a":"Pour installer Keras et Tensorflow sans GPU :","5f02cace":"On utilise le dataset *Cat and Dog* : https:\/\/www.kaggle.com\/tongpython\/cat-and-dog","6dbbd68f":"On teste un mod\u00e8le avec deux couches convolutionnelles :","d44e3586":"On affiche 50 images o\u00f9 l'algorithme s'est tromp\u00e9 :","c39b712e":"On peut \"d\u00e9geler\" les derni\u00e8res couches :","f3476a62":"Pour une installation locale :\npip install opencv-python\n","096eefcf":"On va lire toutes les images dans les sous r\u00e9pertoires du *training_set* :","ed29f5d4":"On utilise les poids pr\u00e9-entra\u00een\u00e9s sur ImageNet (un million d'images)\nOn \"fige\" le r\u00e9seau VGG16, de mani\u00e8re \u00e0 ne pas refaire l'entra\u00eenement sur le dataset particulier","eee1c7a3":"On d\u00e9finit une fonction pour afficher un graphique des scores :","bc00b42f":"Le mod\u00e8le entrain\u00e9 peut \u00eatre sauvegard\u00e9 :","abefd87c":"## Exercices","4622a0aa":"Fonction permettant de lire des images dans des sous-r\u00e9pertoires :","a2626d74":"conda install -c conda-forge keras\nconda install -c conda-forge tensorflow ","291ff4e6":"## Lecture des images","2afa005b":"## Mod\u00e8le CNN plus profond","351856c5":"## Transfer learning","b1b56768":"# R\u00e9seaux convolutionnels : CNN","3cefb402":"On ajoute des couches pour entra\u00eener le mod\u00e8le \u00e0 partir du dataset, sans modifier les poids existants du VGG16 :","44e23a54":"On peut afficher la structure du mod\u00e8le :","d7d4cd9e":"On va utiliser un mod\u00e8le pr\u00e9d\u00e9fini dans Keras (VGG16) :","be719c32":"## Keras et Tensorflow","2688d0cc":"## Une couche convolutionnelle","9d184d54":"On va utiliser utiliser une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification :"}}