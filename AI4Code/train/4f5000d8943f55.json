{"cell_type":{"903d8195":"code","b7e5339d":"code","b81c391d":"code","0c97cb45":"code","5a1f801a":"code","c0188cee":"code","cafc0e9b":"code","e7dec8ff":"code","810022ce":"code","ed56d808":"code","23f45016":"code","9867a755":"code","faf115e7":"code","d58f1a00":"code","31b94738":"code","9f0e2a9c":"code","b6a91c2c":"code","dfd40429":"code","e2198a0a":"code","0381a29f":"code","7406f9ac":"code","7dd0924b":"code","58794900":"code","91b8fa3d":"code","d2797325":"code","6d75837d":"code","5074abb4":"code","e90366b7":"code","34f8b485":"code","5a64151c":"code","d3183c9f":"code","ff2083e1":"code","57cb95b3":"markdown","183ca8af":"markdown","a648f3fa":"markdown","753c0ea2":"markdown","f19ee0e6":"markdown","c7e31692":"markdown","cefb50bc":"markdown","127189a3":"markdown","edfb600c":"markdown","ca99e92a":"markdown","e5121d51":"markdown","4f46d6ce":"markdown","c637ca3c":"markdown","e8ffcf5f":"markdown","b841b547":"markdown","c496c488":"markdown","3acdcb4f":"markdown","052d1415":"markdown","0963b539":"markdown","888fc82c":"markdown","3e8591fe":"markdown","fe1fbc25":"markdown","bf9ef3f1":"markdown","c4d21e40":"markdown","7b330bb7":"markdown","5119871d":"markdown","8a2d8647":"markdown"},"source":{"903d8195":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visulization\nimport seaborn as sns # data visulization\nfrom copy import deepcopy # data copy\nfrom sklearn.model_selection import train_test_split # data split\nfrom sklearn.preprocessing import StandardScaler # data preprocessing\nfrom sklearn.ensemble import RandomForestClassifier # machine learning algorithm\nfrom sklearn.svm import SVC # machine learning algorithm\nfrom sklearn.neighbors import KNeighborsClassifier # machine learning algorithm\nfrom sklearn.linear_model import LogisticRegression # machine learning algorithm\nfrom sklearn.metrics import confusion_matrix,roc_curve,roc_auc_score # measure error algorithm\nfrom keras.models import Sequential # start ANN model Deep Learning tool\nfrom keras.layers import Dense,Dropout # Deep Learning tool for prepare ANN model \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b7e5339d":"dataset=pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","b81c391d":"dataset.info()","0c97cb45":"dataset.head()","5a1f801a":"plt.figure(figsize=(10,10))\nsns.countplot(dataset.age[dataset.target == 1 ])\nplt.title(\"Age Distribution of People That Being Heart Diases\")\nplt.ylabel(\"Number of People\")\nplt.xlabel(\"Age of People\")\nplt.show()","c0188cee":"plt.figure(figsize=(10,10))\nsns.countplot(dataset.age[dataset.target == 0 ])\nplt.title(\"Age Distribution of People That Not Being Heart Diases\")\nplt.ylabel(\"Number of People\")\nplt.xlabel(\"Age of People\")\nplt.show()","cafc0e9b":"x=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1:].values\nprint(\"x shape :\",x.shape)\nprint(\"y shape :\",y.shape)","e7dec8ff":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)\nprint(\"x_train shape :\",x_train.shape)\nprint(\"x_test shape :\",x_test.shape)\nprint(\"y_train shape :\",y_train.shape)\nprint(\"y_test shape :\",y_test.shape)","810022ce":"sc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.transform(x_test)","ed56d808":"model = Sequential()\n\nmodel.add(Dense(206,activation=\"relu\",input_dim=13))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(103,activation=\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1,activation=\"sigmoid\"))","23f45016":"model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","9867a755":"hist=model.fit(x_train,y_train,batch_size=250,epochs=100,validation_data=(x_test,y_test))","faf115e7":"prediction=model.predict(x_test)\npredict=deepcopy(prediction)\nfor i in range(0,len(prediction)):\n    if prediction[i] <0.5:\n        prediction[i] = 0\n    else:\n        prediction[i] = 1","d58f1a00":"cfm=confusion_matrix(y_test,prediction)\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linewidths=1,linecolor=\"black\",fmt=\".1f\",ax=ax)\nplt.title(\"Error Number With Heat Map\")\nplt.xlabel(\"Real\")\nplt.ylabel(\"Prediction\")\nplt.show()","31b94738":"fpr,tpr,threshold=roc_curve(y_test,predict)\nprint(\"fpr shape :\",fpr.shape)\nprint(\"tpr shape :\",tpr.shape)\nprint(\"threshold shape :\",threshold.shape)","9f0e2a9c":"plt.figure(figsize=(15,8))\nplt.plot(tpr,color=\"green\",label=\"TPR\")\nplt.plot(fpr,color=\"red\",label=\"FPR\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.grid()\nplt.title(\"Roc Curve Validation\")\nplt.show()","b6a91c2c":"score=roc_auc_score(y_test,predict)\nprint(\"Roc Auc Score :\",score)","dfd40429":"train_score=[]\ntest_score=[]\nfor i in range(1,11):\n rfc=RandomForestClassifier(n_estimators=i,random_state=0)\n rfc.fit(x_train,y_train)\n train_score.append(rfc.score(x_train,y_train))\n test_score.append(rfc.score(x_test,y_test))","e2198a0a":"plt.plot(train_score,color=\"green\",label=\"Train Score\")\nplt.plot(test_score,color=\"red\",label=\"Test Score\")\nplt.legend()\nplt.xlabel(\"Number of Tree\")\nplt.ylabel(\"Score Validations\")\nplt.title(\"Choose Tree Number\")\nplt.show()","0381a29f":"rfc1=RandomForestClassifier(n_estimators=3,random_state=0)\nrfc1.fit(x_train,y_train)\nprediction=rfc1.predict(x_test)\nprint(\"Train Accuracy :\",rfc1.score(x_train,y_train))\nprint(\"Test Accuracy :\",rfc1.score(x_test,y_test))","7406f9ac":"f,ax=plt.subplots(figsize=(10,10))\ncfm=confusion_matrix(y_test,prediction)\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linewidths=1,linecolor=\"black\",fmt=\".1f\",ax=ax)\nplt.title(\"Error Number With Heat Map\")\nplt.xlabel(\"Real\")\nplt.ylabel(\"Prediction\")\nplt.show()","7dd0924b":"svc=SVC(random_state=42)\nsvc.fit(x_train,y_train)\nprint(\"Train Accuracy :\",svc.score(x_train,y_train))\nprint(\"Test Accuracy :\",svc.score(x_test,y_test))","58794900":"prediction=svc.predict(x_test)","91b8fa3d":"f,ax=plt.subplots(figsize=(10,10))\ncfm=confusion_matrix(y_test,prediction)\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linewidths=1,linecolor=\"black\",fmt=\".1f\",ax=ax)\nplt.title(\"Error Number With Heat Map\")\nplt.xlabel(\"Real\")\nplt.ylabel(\"Prediction\")\nplt.show()","d2797325":"train_score=[]\ntest_score=[]\nfor i in range(1,11):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    train_score.append(knn.score(x_train,y_train))\n    test_score.append(knn.score(x_test,y_test))","6d75837d":"plt.plot(train_score,color=\"green\",label=\"Train Score\")\nplt.plot(test_score,color=\"red\",label=\"Test Score\")\nplt.legend()\nplt.xlabel(\"Number of Neighbours\")\nplt.ylabel(\"Score Validations\")\nplt.title(\"Choose Tree Number\")\nplt.show()","5074abb4":"knn1=KNeighborsClassifier(n_neighbors=6)\nknn1.fit(x_train,y_train)\nprint(\"Train Accuracy :\",knn1.score(x_train,y_train))\nprint(\"Test Accuracy :\",knn1.score(x_test,y_test))","e90366b7":"prediction=knn1.predict(x_test)","34f8b485":"f,ax=plt.subplots(figsize=(10,10))\ncfm=confusion_matrix(y_test,prediction)\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linewidths=1,linecolor=\"black\",fmt=\".1f\",ax=ax)\nplt.title(\"Error Number With Heat Map\")\nplt.xlabel(\"Real\")\nplt.ylabel(\"Prediction\")\nplt.show()","5a64151c":"lr=LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"Train Accuracy :\",lr.score(x_train,y_train))\nprint(\"Test Accuracy :\",lr.score(x_test,y_test))","d3183c9f":"prediction=lr.predict(x_test)","ff2083e1":"f,ax=plt.subplots(figsize=(10,10))\ncfm=confusion_matrix(y_test,prediction)\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linewidths=1,linecolor=\"black\",fmt=\".1f\",ax=ax)\nplt.title(\"Error Number With Heat Map\")\nplt.xlabel(\"Real\")\nplt.ylabel(\"Prediction\")\nplt.show()","57cb95b3":"# LOGISTIC REGRESSION","183ca8af":"#### I changed the number several numbers of estimators by for loop for which number to decide better","a648f3fa":"# ROC AUC SCORE","753c0ea2":"# HEAT MAP","f19ee0e6":"### I compressed the values -1 between 1","c7e31692":"#### I equalized the values I obtained 0 and 1 for using heatmap visulization and I used deepcopy predicted values for use roc_curve and roc_auc_score algorithms ","cefb50bc":"#                         HEAT MAP","127189a3":"# HEAT MAP ","edfb600c":"# K-NEAREST NE\u0130GHBOURS","ca99e92a":"### I got some information about the data","e5121d51":"# HEAT MAP","4f46d6ce":"#### I imported necessary libraries**","c637ca3c":"# ARTIFICIAL NEURAL NETWORK","e8ffcf5f":"#### I observed people that have heart dieases according to age","b841b547":"#### I creat my ANN model","c496c488":"#### I started to work my model","3acdcb4f":"# RANDOM FOREST CLASSIFIER","052d1415":"#### I loaded the dataset","0963b539":"#### I compiled my model because I want to see validation and loss of train and test dataset","888fc82c":"#### I divided the dataset as train and test dataset","3e8591fe":"# SUPPORT VECTOR CLASSIFIER","fe1fbc25":"#### I observed and decided which number better","bf9ef3f1":"#### I divided it into labels and theirs features","c4d21e40":"# ROC CURVE","7b330bb7":"# HEAT MAP","5119871d":"#### I observed people that have not heart dieases according to age","8a2d8647":"### I observed the data"}}