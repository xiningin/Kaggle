{"cell_type":{"e7f0cc5a":"code","ccbcac92":"code","7590816e":"code","3444f4ec":"code","151f24b6":"code","e2e6fc17":"code","dfca1d97":"code","ed171392":"code","1db022e8":"code","f59f6d8b":"code","998623c5":"code","bcdab061":"code","c40ea031":"code","be508d15":"markdown","ccd0d913":"markdown","21c1d29c":"markdown","dd27488c":"markdown","f60254f7":"markdown","5d7dfc3b":"markdown","686f5a7c":"markdown","aaee5b54":"markdown","7cfa6c87":"markdown","afe24449":"markdown","71d468a2":"markdown","e13a4c9b":"markdown"},"source":{"e7f0cc5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split #train_split to split train and test\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ccbcac92":"file_path='..\/input\/home-data-for-ml-course\/train.csv'\ndata_set=pd.read_csv(file_path,index_col='Id')\ndata_set.head()","7590816e":"X_full=data_set.copy()\nX_full.dropna(axis=0,subset=['SalePrice'],inplace=True)\ny=X_full.SalePrice\nX_full.drop(['SalePrice'],axis=1,inplace=True)\nX=X_full.select_dtypes(exclude=['object'])\nX.head()\n","3444f4ec":"X.columns","151f24b6":"X_train,X_valid,y_train,y_valid=train_test_split(X,y,random_state=0)","e2e6fc17":"para=[{'n_est':list(range(100,1001,50)),\n      'learn_rate':[x\/100 for x in range(5,51,4)],\n      'max_dep':list(range(6,73,6))\n      }]\npara","dfca1d97":"gsearch=GridSearchCV(\nestimator=XGBRegressor(),\nparam_grid=para,\nscoring='neg_mean_absolute_error',\nn_jobs=4,\ncv=5,\nverbose=20)","ed171392":"gsearch.fit(X,y)","1db022e8":"best_n_est=gsearch.best_params_.get('n_est')\nbest_lean_rate=gsearch.best_params_.get('learn_rate')\nbest_max_dep=gsearch.best_params_.get('max_dep')\n\nbest_n_est,best_lean_rate,best_max_dep","f59f6d8b":"best_model=XGBRegressor(n_estimators=best_n_est,\n                       learning_rate=best_lean_rate,\n                       max_depth=best_max_dep)\nbest_model.fit(X,y)","998623c5":"test_file_path='..\/input\/home-data-for-ml-course\/test.csv'\ntest_data_set=pd.read_csv(test_file_path,index_col='Id')\nX_test=test_data_set.select_dtypes(exclude=['object'])\nX_test.head()","bcdab061":"my_preds_test=best_model.predict(X_test)\nmy_preds_test","c40ea031":"my_output=pd.DataFrame(\n{'Id':X_test.index,\n'SalePrice':my_preds_test})\nmy_output.to_csv('submission.csv',index=False)","be508d15":"## **get best para from model fit**","ccd0d913":"## Prediction of test Data","21c1d29c":"**My OutPut**","dd27488c":"# Finally find Best(final) model \n### and fit it","f60254f7":"# **Import(read) DataSet**","5d7dfc3b":"### Define gSearch with my hypter_para ","686f5a7c":"**show colums**","aaee5b54":"**Define my parameters to determaine best choices for best model**","7cfa6c87":"## Training my data","afe24449":"# Define X and y","71d468a2":"### **Define test dataSet for my production **","e13a4c9b":"**fit my model (gsearch)**"}}