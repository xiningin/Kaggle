{"cell_type":{"daaf6f9b":"code","cbc929dd":"code","405f1f07":"code","0ab4450c":"code","d87145bf":"code","e6e3e5a3":"code","ec9b25d1":"code","d8f31117":"code","c43978e0":"code","9d3952ac":"code","cd44db72":"code","4e02fb9d":"code","e3f1dccc":"code","2a006516":"code","638d2b8c":"code","7d3a2088":"code","80d59999":"code","d26c441a":"code","11893893":"code","5abb2cbf":"code","4dae5878":"code","479f628c":"code","d5df26d5":"code","85eaf228":"code","45b1fe94":"code","65e99633":"code","38e94bfe":"code","131c6581":"code","ef90f13b":"code","3f738343":"code","4b513341":"code","bf43306a":"code","ffba715a":"code","93f89722":"code","d5f636a6":"code","858e5f1a":"code","fa7d5e32":"markdown"},"source":{"daaf6f9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cbc929dd":"from __future__ import division\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost\nimport math\nfrom scipy.stats import pearsonr","405f1f07":"df = pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')","0ab4450c":"df.head()","d87145bf":"df.shape","e6e3e5a3":"df.dtypes.unique()","ec9b25d1":"df.info()","d8f31117":"df.describe()","c43978e0":"# checking the categorical features\ndf.select_dtypes(include = ['object']).columns.tolist()","9d3952ac":"# check any null value\nprint(df.isnull().any().sum())\nprint(df.isnull().any(axis = 1).sum())","cd44db72":"df.columns","4e02fb9d":"features = df.iloc[:, 3:].columns.tolist()\nfeatures","e3f1dccc":"target = df.iloc[:,2].name\ntarget","2a006516":"# correlation\ncorrelations = {}\nfor f in features:\n    data_temp = df[[f,target]]\n    x1 = data_temp[f].values\n    x2 = data_temp[target].values\n    key = f + ' vs ' + target\n    correlations[key] = pearsonr(x1,x2)[0]","638d2b8c":"df_correlations = pd.DataFrame(correlations, index = ['Value']).T\ndf_correlations.loc[df_correlations['Value'].abs().sort_values(ascending = False).index]","7d3a2088":"# top 5 features are the most correlated features\ny = df.loc[:, ['sqft_living', 'grade', target]].sort_values(target, ascending = True).values\nx = np.arange(y.shape[0])","80d59999":"%matplotlib inline\nplt.subplot(3, 1, 1)\nplt.plot(x, y[:, 0])\nplt.title('sqft and Grade vs Price')\nplt.ylabel('Sqft')\n\nplt.subplot(3,1, 2)\nplt.plot(x, y[:, 1])\nplt.ylabel('Grade')\n\nplt.subplot(3, 1, 3)\nplt.plot(x, y[:, 2])\nplt.ylabel('Price')\n\nplt.show()","d26c441a":"df.columns","11893893":"sns.pairplot(df[['sqft_living', 'grade','sqft_above','sqft_living15','bathrooms', 'price' ]])","5abb2cbf":"from sklearn.model_selection import train_test_split","4dae5878":"df.columns","479f628c":"X = df[['bedrooms', 'bathrooms', 'sqft_living',\n       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n       'sqft_above', 'sqft_basement', 'lat', 'long', 'sqft_living15', 'sqft_lot15']].values\ny = df.price.values","d5df26d5":"df.view.unique()","85eaf228":"from sklearn.linear_model import LinearRegression\nfrom sklearn import model_selection, tree, linear_model","45b1fe94":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","65e99633":"Linearmodel = LinearRegression()\nLinearmodel.fit(X_train, y_train)\nlinear_pred = Linearmodel.predict(X_test)\n","38e94bfe":"Linearmodel.score(X_test, y_test)","131c6581":"# calculate the root mean squared error\nprint('RMSE: %.2f' % math.sqrt(np.mean((linear_pred - y_test)**2)))","ef90f13b":"# the error is too much so lets try xgboost\nxgb = xgboost.XGBRegressor(n_estimators = 100, learning_rate = 0.08, gamma = 0, subsample = 0.75,\n                          colsample_bytree = 1, max_depth = 7)","3f738343":"xgb.fit(X_train, y_train)","4b513341":"xgb_pred = xgb.predict(X_test)","bf43306a":"print('xgb RMSE: %.2f' % math.sqrt(np.mean((xgb_pred-y_test)**2)))\nprint('linear RMSE: %.2f' % math.sqrt(np.mean((linear_pred - y_test)**2)))","ffba715a":"from sklearn.metrics import explained_variance_score","93f89722":"print('xgb: ',explained_variance_score(xgb_pred, y_test))\nprint('linear: ', explained_variance_score(linear_pred, y_test))","d5f636a6":"df.head()","858e5f1a":"xgb_ypred = pd.DataFrame(xgb_pred, columns = ['price'])\nxgb_ypred.head()\nxgb_ypred.to_csv('submission.csv', index = False)","fa7d5e32":"## Predicting house sales Prices"}}