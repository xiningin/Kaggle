{"cell_type":{"1b8ebaa5":"code","7a2bb672":"code","9dbfa486":"code","75001a63":"code","2d113156":"code","de470193":"code","500bb813":"code","361845ee":"code","8580e8b6":"code","150bde3c":"code","c8763093":"code","239eb264":"code","7c7569c2":"code","db8792e7":"code","5d3fac3d":"code","4f2de014":"code","00b490ad":"code","3c4a4169":"code","1e7c5dd9":"code","05813363":"code","4a211602":"code","0b3f8575":"code","e6053f14":"code","e1f0b73a":"code","50b06394":"code","5ac15221":"markdown","577925ee":"markdown","45560d34":"markdown","8a02d92d":"markdown","292abd0f":"markdown","f3bc7b2d":"markdown","a297065c":"markdown"},"source":{"1b8ebaa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a2bb672":"sub_df = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')\nprint(sub_df.shape)\nsub_df.head()","9dbfa486":"train_df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\nprint(train_df.shape)\ntrain_df.head()","75001a63":"train_target_df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nprint(train_target_df.shape)\ntrain_target_df.head()","2d113156":"test_df = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\nprint(test_df.shape)\ntest_df.head()","de470193":"arr = train_target_df.sum(axis=0).values[1:]\narr","500bb813":"fig ,ax = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\nax[0].plot(arr)\nax[0].set_xlabel('Prediction Targets')\nsns.distplot(arr, ax=ax[1])\nplt.tight_layout()","361845ee":"count_nonzero_labels = train_target_df.sum(axis=1)\nprint(count_nonzero_labels.unique())\ncount_nonzero_labels.value_counts().plot(kind='bar')","8580e8b6":"train_df","150bde3c":"train_df[['cp_type','cp_time','cp_dose'][0]].value_counts()","c8763093":"train_df[['cp_type','cp_time','cp_dose'][1]].value_counts()","239eb264":"train_df[['cp_type','cp_time','cp_dose'][2]].value_counts()","7c7569c2":"train_df['g-4'].plot(kind='hist')","db8792e7":"sns.distplot(train_df.iloc[:,4:])","5d3fac3d":"\ndef plot_count_nonzero(data,feature,value, ax):\n    data = data.loc[train_df[feature] == value]\n    count_nonzero_labels = data.sum(axis=1)\n    print(count_nonzero_labels.unique())\n    count_nonzero_labels.value_counts().plot(kind='bar', ax=ax)\n\nfig ,ax = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\nplot_count_nonzero(train_target_df,'cp_type','trt_cp' ,ax[0])\nax[0].set_xlabel('Feature Distribution (trt_cp)')\nplot_count_nonzero(train_target_df,'cp_type','ctl_vehicle' ,ax[1])\nax[1].set_xlabel('Feature Distribution (ctl_vehicle)')\nplt.tight_layout()","4f2de014":"features_df = train_df.loc[train_df['cp_type'] == 'trt_cp']\nfeatures_df = features_df.drop('cp_type', axis=1)\ntargets_df = train_target_df.loc[features_df.index]\nfeatures_df.shape, targets_df.shape","00b490ad":"def plot_count_nonzero(data, bool_list,ax): \n    data = data.loc[bool_list]\n    count_nonzero_labels = data.sum(axis=1)\n    print(count_nonzero_labels.unique())\n    count_nonzero_labels.value_counts().plot(kind='bar', ax=ax)\n\nfig ,ax = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\n\nbool_list = (features_df['cp_dose'] == 'D1')\nplot_count_nonzero(targets_df,bool_list ,ax[0])\nax[0].set_xlabel('Feature Distribution (D1)')\n\nbool_list = (features_df['cp_dose'] == 'D2')\nplot_count_nonzero(targets_df,bool_list ,ax[1])\nax[1].set_xlabel('Feature Distribution (D2)')\n\nplt.tight_layout()","3c4a4169":"fig ,ax = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\n\nbool_list = (features_df['cp_time'] == 24)\nplot_count_nonzero(targets_df,bool_list ,ax[0])\nax[0].set_xlabel('Feature Distribution (24)')\n\nbool_list = (features_df['cp_time'] == 48)\nplot_count_nonzero(targets_df,bool_list ,ax[1])\nax[1].set_xlabel('Feature Distribution (48)')\n\nbool_list = (features_df['cp_time'] == 72)\nplot_count_nonzero(targets_df,bool_list ,ax[2])\nax[2].set_xlabel('Feature Distribution (72)')\n\nplt.tight_layout()","1e7c5dd9":"features_df.iloc[1,4:].plot()","05813363":"features_df.iloc[1,4:].sort_values().plot()","4a211602":"features_df.iloc[1,4:-100].sort_values().plot()","0b3f8575":"features_df.iloc[1,-100:].sort_values().plot()","e6053f14":"sub_df.iloc[:,1:] = arr\/23814\nbool_list = (test_df.cp_type == 'ctl_vehicle')\nsub_df.iloc[bool_list,1:] = 0","e1f0b73a":"sub_df","50b06394":"sub_df.to_csv('submission.csv', index=False)\npd.read_csv('submission.csv')","5ac15221":"Wow. So `cp_type == ctl_vehicle` has all labels set 0. Maybe we should drop `cp_type` feature for training and for inference we can use an if statement to set these values to zero. ","577925ee":"These look balanced, probably each drug was tested at each of these 3 times.","45560d34":"Baseline constant prediction , mean value of each columns(label) and post processing rows with `cp_type == ctl_vehicle` to `zero` ","8a02d92d":"Competition organizers have clipped and normalized the data.","292abd0f":"The target label matrices are very sparse, more than 9000 rows have none of the labels predicted positive. ","f3bc7b2d":"`cp_time` and `cp_dose` have similar distributions.","a297065c":"These look balanced too, similiar hypothesis as cp_time, dont know what this column is though."}}