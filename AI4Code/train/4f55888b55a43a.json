{"cell_type":{"a553d7f1":"code","a0b4b31f":"code","4945b3da":"code","b419c7f5":"code","b0eea07c":"code","e5ceff2c":"code","98d02b3a":"code","a33ccfac":"code","e42d4c56":"code","f45ac0b6":"markdown","2d371d0d":"markdown","09f1cbeb":"markdown","43916b17":"markdown","7f9c2f70":"markdown","f36226eb":"markdown"},"source":{"a553d7f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LassoLars\nfrom sklearn.svm import SVR\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a0b4b31f":"df1=pd.DataFrame(np.random.uniform(low=0.1, high=499.9, size=(1000, )), columns=['velocity'])\ndf3=pd.DataFrame(np.random.uniform(low=0.1, high=89.9, size=(1000, )), columns=['angle'])\ndf=pd.concat([df1, df3], axis=1)\nprint( df.head(), df.info())\n","4945b3da":"#this is where we calculate the height and drange of projectile motion\nfor i in df['velocity'].values:#if you want to make some math on each item of a column use df.column.values\n    R=[]\n    H=[]\n    for j in df['angle'].values:\n        g=9.81\n        tmax=(2*i)*np.sin(np.deg2rad(j))\/g #i used the formula with time because it give me more desirable results\n        r=np.cos(np.deg2rad(j))*i*tmax\n        y\u00fckseklik=abs(((np.sin(i))*i)-0.5*(tmax**2)*g)\n        #y\u00fckseklik=(i**2)*((np.sin(np.deg2rad(j))**2)\/(g)) # you can use this part if you want\n        #r=abs((i**2)*(np.sin(np.deg2rad(2*j))\/(2*g)))\n        H.append(y\u00fckseklik)\n        R.append(r)\nnp.asarray(R)\nnp.asarray(H)","b419c7f5":"df2=pd.DataFrame(R, columns=['Distance'])\ndf4=pd.DataFrame(H, columns=['Height'])\ndf5=pd.concat([df, df2 ,df4], axis=1)#concat the calculated parts and our random generator's velocity and angle\nprint(df5.head())\nprint(df5.info())","b0eea07c":"df5.describe()#to see mean std... of data","e5ceff2c":"def draw():\n    G=9.81\n    v=df5['velocity'].values\n    theta=df['angle'].values\n    plt.figure(figsize=[15, 8])\n    tmax=((2*v)*np.sin(theta))\/G\n    time=tmax*np.linspace(0, 1, 1000)[:,None]#we generate time here\n    x=((v*time)*np.cos(theta))\n    y=((v*time)*np.sin(theta))-(0.5*G*(time**2))\n    plt.plot(x, y)\n    plt.show()\ndraw()    ","98d02b3a":"df5.fillna('0')\nX=df5['velocity']\nY=df5['Height']\nX=np.array(X).reshape(len(X), 1)#reshape the data \nY=np.array(X).reshape(len(X), 1)\nsc=StandardScaler()#scale the data\nsc.fit(X, Y)\nx_train, x_test, y_train, y_test=train_test_split(X, Y, test_size=0.33)#split the data to train and test\nknn=KNeighborsRegressor()#our first machine learning algoritm is KNR\nknn.fit(x_train, y_train)\nX2=knn.predict(x_test)\nplt.figure()\nplt.plot(X2, x_test)\nplt.show()\nprint(knn.score(x_train, y_train))\n\n\n","a33ccfac":"ll=LassoLars()\nll.fit(x_train, y_train)\nX3=ll.predict(x_test)\nplt.figure()\nplt.plot(X3, x_test)\nplt.show() \nprint(\"accuracy\", ll.score(x_train, y_train))\n","e42d4c56":"svm=SVR(kernel='linear')\nsvm.fit(x_train, y_train)\nX4=svm.predict(x_test)\nprint(\"accuracy: \", svm.score(x_train, y_train))","f45ac0b6":"Support Vector Regressor is give us the best result ever as expected","2d371d0d":"I make  simulation of all projectile motion here. ","09f1cbeb":"It was cool to see some nice accuracy after long time. I want to thanks to Dr. Ahmet Bing\u00fcl for inspire me.","43916b17":"\nIn this kernel i will try to use machine learning's basic on a projectile motion data which i generate by myself. The data may look small but it was hard to make some math on huge data so i keep it small. ","7f9c2f70":"Firstly lets generate velocity and angle \nthe angle must be between 0 and 90 degrees and the velocity is optinal i choose  between 0 to 500 m\/s","f36226eb":"We try LassoLars algoritm and the accuracy is bad i think"}}