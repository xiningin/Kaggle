{"cell_type":{"3119cc9b":"code","d0eab968":"code","1f384f36":"code","968a0533":"code","9ea15b2e":"code","ad0b4d19":"code","6cfcbe48":"code","2b7ca1df":"code","feae72c6":"code","38a4ad3c":"code","c6c5851b":"code","bcd1b7cf":"code","5f2fdf44":"code","ea3da463":"code","eed2d95e":"code","d9db0a1c":"code","0c88a16a":"code","36fbede9":"code","4a25685d":"code","bd1234c9":"code","99220727":"code","49881e7c":"code","30e049e7":"code","93adadb2":"code","9174ed38":"code","46b4d7f5":"code","2eb4cb03":"code","e2f64513":"code","983a2330":"code","943100dd":"code","58a1cb59":"code","57eb0cb9":"code","e96afeb1":"markdown","e7c6be6f":"markdown","8a6138ca":"markdown","956e0572":"markdown","c313285a":"markdown","24845492":"markdown","9b316f68":"markdown","4349870c":"markdown","9653cace":"markdown","5f16dad2":"markdown"},"source":{"3119cc9b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d0eab968":"# import the dataset\ndataset_train = pd.read_csv(\"\/kaggle\/input\/tesla-stock-price\/Tesla.csv - Tesla.csv.csv\")\n# show the dataset\ndataset_train.head()","1f384f36":"# show the row and column of the dataset\ndataset_train.shape","968a0533":"# show the content of dataset in detail\ndataset_train.describe()","9ea15b2e":"# plot the graph of open price\nimport matplotlib.pyplot as plt\nplt.plot(dataset_train[['Open']], 'blue')\nplt.title('Tesla stock open price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.show()","ad0b4d19":"# plot the graph of high price\nplt.plot(dataset_train[['High']], 'black')\nplt.title('Tesla stock high price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.show()","6cfcbe48":"# plot the graph of low price\nplt.plot(dataset_train[['Low']], 'green')\nplt.title('Tesla stock low price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.show()","2b7ca1df":"# plot the graph of close price\nplt.plot(dataset_train[['Close']], 'red')\nplt.title('Tesla stock close price')\nplt.xlabel('time [days]')\nplt.ylabel('price')\nplt.show()","feae72c6":"# plot the graph of the volume\nplt.plot(dataset_train[['Volume']].values, 'blue')\nplt.title('Tesla stock price volumn')\nplt.xlabel('time [days]')\nplt.ylabel('volumn')\nplt.show()","38a4ad3c":"# scaling the data of the stock price\nfrom sklearn.preprocessing import MinMaxScaler\n# scale the open price\nsc = MinMaxScaler(feature_range=(0,1))\nsc_open = sc.fit_transform(dataset_train[['Open']].values.reshape(-1,1))\nprint (sc_open)\nprint (sc_open.shape)","c6c5851b":"# scale the close price\nsc_close = sc.fit_transform(dataset_train[['Close']].values.reshape(-1,1))\nprint (sc_close)\nprint (sc_close.shape)","bcd1b7cf":"# scale the high price\nsc_high = sc.fit_transform(dataset_train[['High']].values.reshape(-1,1))\nprint (sc_high)\nprint (sc_high.shape)","5f2fdf44":"# scale the low price\nsc_low = sc.fit_transform(dataset_train[['Low']].values.reshape(-1,1))\nprint (sc_low)\nprint (sc_low.shape)","ea3da463":"# define the function split the dataset \ndef split_dataset(sc_data):\n    # set 70% data as the train data\n    train_size = int(len(sc_data)*0.7)\n    # the remining data should be the test data\n    test_size = len(sc_data)-train_size\n    train_data = sc_data[0:train_size,:]\n    test_data = sc_data[train_size:len(sc_data),:1]\n    return train_size, test_size, train_data, test_data","eed2d95e":"# split the dataset of the open price\ntrain_size1, test_size1, train_data1, test_data1 = split_dataset(sc_open)\n# split the dataset of the close price\ntrain_size2, test_size2, train_data2, test_data2 = split_dataset(sc_close)\n# split the dataset of the high price\ntrain_size3, test_size3, train_data3, test_data3 = split_dataset(sc_high)\n# split the dataset of the low price\ntrain_size4, test_size4, train_data4, test_data4 = split_dataset(sc_low)","d9db0a1c":"# check the shape\ntrain_data1.shape","0c88a16a":"# check the shape\ntest_data1.shape","36fbede9":"# check the size\nprint (train_size1)\nprint (test_size1)","4a25685d":"# define the function to create train and test dataset\ndef creat_dataset(data, timestamp=1):\n    x_dataset = []\n    y_dataset = []\n    for i in range(len(data)-timestamp-1):\n        x_dataset.append(data[i:(i+timestamp), 0])\n        y_dataset.append(data[timestamp+i,0])\n    return np.array(x_dataset), np.array(y_dataset)# change the list to np array format","bd1234c9":"# set timestamp to be 100 for training\ntimestamp = 100\n# create the train and test dataset of open price\nx_train1, y_train1 = creat_dataset(train_data1, timestamp)\nx_test1, y_test1 = creat_dataset(test_data1, timestamp)\n# create the train and test dataset of close price\nx_train2, y_train2 = creat_dataset(train_data2, timestamp)\nx_test2, y_test2 = creat_dataset(test_data2, timestamp)\n# create the train and test dataset of high price\nx_train3, y_train3 = creat_dataset(train_data3, timestamp)\nx_test3, y_test3 = creat_dataset(test_data3, timestamp)\n# create the train and test dataset of low price\nx_train4, y_train4 = creat_dataset(train_data4, timestamp)\nx_test4, y_test4 = creat_dataset(test_data4, timestamp)","99220727":"x_train1.shape, y_train1.shape","49881e7c":"x_test1.shape, y_test1.shape","30e049e7":"# define a function to reshape the dataset for using LSTM\ndef reshape_data(x_train, x_test):\n    # (samples, timestamps, feature)\n    # since timestamp is 100, column will be 100 (x_train.shape[1])\n    x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)\n    x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)\n    return x_train, x_test","93adadb2":"# reshape the dataset of the open price\nx_train1, x_test1 = reshape_data(x_train1, x_test1)\n# reshape the dataset of the close price\nx_train2, x_test2 = reshape_data(x_train2, x_test2)\n# reshape the dataset of the high price\nx_train2, x_test2 = reshape_data(x_train2, x_test2)\n# reshape the dataset of the low price\nx_train2, x_test2 = reshape_data(x_train2, x_test2)","9174ed38":"print (x_train1.shape)","46b4d7f5":"print (x_test1.shape)","2eb4cb03":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.layers import LSTM\n# define a LSTM model\ndef lstm_model():\n    # heap up the layers\n    model = Sequential()\n    # layer 1 \n    model.add(LSTM(units = 50, return_sequences = True, input_shape = (100,1))) # 100 equals x_train1[1]\n    # regularization\n    model.add(Dropout(0.2))\n    # layer 2\n    model.add(LSTM(units = 50, return_sequences = True))\n    # regularization\n    model.add(Dropout(0.2))\n    # layer 3\n    model.add(LSTM(units = 50))\n    model.add(Dropout(0.2))\n    # connect the dense layer to LSTM for output\n    model.add(Dense(1))\n    return model              ","e2f64513":"model = lstm_model()\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()","983a2330":"# train the dataset of open price\nmodel.fit(x_train1, y_train1, epochs = 100, batch_size = 64)","943100dd":"import tensorflow as tf\n# *notice*: this is only the prediction of the open price\n# predict the training group\ntrain_predict = model.predict(x_train1)\n# predict the test group\ntest_predict = model.predict(x_test1)\n# transform the normalized data back to original format\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)","58a1cb59":"# this part of code is combining graphs, which is referenced from the Krish Naik\ntrainPredictPlot = np.empty_like(dataset_train[['Open']])\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[100:len(train_predict)+100, :] = train_predict\ntestPredictPlot = np.empty_like(dataset_train[['Open']])\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(100*2)+1:len(dataset_train[['Open']])-1, :] = test_predict","57eb0cb9":"# plot the real price and predicted price to compare\nplt.plot(dataset_train[['Open']])\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.title(\"Tesla stock price prediction\")\nplt.xlabel(\"time\")\nplt.ylabel(\"stock price\")\nplt.show()","e96afeb1":"# Create train and test dataset","e7c6be6f":"# Reshape the dataset for LSTM","8a6138ca":"# Build Model","956e0572":"# Graph the price","c313285a":"# Prediction","24845492":"# Normalization to the data","9b316f68":"# Import the dataset","4349870c":"# Train","9653cace":"# Data exhibition","5f16dad2":"# Splitting the dataset"}}