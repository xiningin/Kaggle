{"cell_type":{"ba93f87d":"code","03c69532":"code","9a15813e":"code","469438ab":"code","46e3f812":"code","df208684":"code","1d09cd64":"code","b3e5427f":"code","60554118":"code","9bddf6ed":"code","9818bf6d":"code","3fabaf11":"code","e1646b3a":"code","26c31065":"code","45bf8872":"code","be5796ea":"code","ca9258a6":"code","4ec78f94":"code","eaf05ca8":"code","73d9159f":"markdown","bc559805":"markdown","bf096402":"markdown","9af4825c":"markdown","503561b6":"markdown","c720489f":"markdown","ca5c20db":"markdown","231d9d91":"markdown","488b1ec9":"markdown","a122aba0":"markdown","739d4f67":"markdown","a48382bc":"markdown","f60ba6e0":"markdown","909e2c14":"markdown","15de3ecc":"markdown"},"source":{"ba93f87d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03c69532":"df = pd.read_csv(path,index_col=False)","9a15813e":"df","469438ab":"df.info()","46e3f812":"df.isnull().sum()","df208684":"X = df.drop(['class'],axis=1)\ny = df['class']","1d09cd64":"X","b3e5427f":"y","60554118":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=33)","9bddf6ed":"from sklearn import tree\ndt = tree.DecisionTreeClassifier()\nmodel = dt.fit(X_train,y_train)","9818bf6d":"predicted= model.predict(X_test)","3fabaf11":"from sklearn.metrics import accuracy_score","e1646b3a":"score = accuracy_score(y_test,predicted)","26c31065":"print(score)","45bf8872":"names = X.columns\nclasses =  ['class 0','class 1']","be5796ea":"import graphviz\n# DOT data\ndot_data = tree.export_graphviz(model,feature_names=names,class_names=classes)\ngraph = graphviz.Source(dot_data,format=\"png\") \ngraph\n","ca9258a6":"from sklearn.metrics import confusion_matrix","4ec78f94":"matrix = confusion_matrix(y_test,predicted)","eaf05ca8":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(model, X_test, y_test) ","73d9159f":"Checking the data frames feature value types and the coloums in it","bc559805":"# Importing the dataset\n\nimporting the dataset using the pandas libray","bf096402":"Checking is there is any null values in the dataframe","9af4825c":"Predicting the test data","503561b6":"Splitting into training and test data for both features and class","c720489f":"Printing the raw dataframe","ca5c20db":"Visualising the decission tree tha we have created","231d9d91":"Fitting the Decision Tree Classifier","488b1ec9":"Getting the features name and the class name","a122aba0":"Visualising the confusion matrix to analyse how many False negative and False positive produced ","739d4f67":"> checking the X wheather all the features are extracted","a48382bc":"Extracting the X(features) and the Y(Class) from the raw dataframe","f60ba6e0":" checking the y wheather all the class are extracted","909e2c14":"# Data processing","15de3ecc":"Getting the accuracy score from the metrics"}}