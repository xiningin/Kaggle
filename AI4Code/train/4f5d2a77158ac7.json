{"cell_type":{"8f2db16e":"code","ad621de9":"code","e447c635":"code","5992e3de":"code","63563218":"code","9c764e06":"code","4c73630c":"code","596032e2":"code","bcb3dfd1":"code","8f4138e2":"code","9cdb219d":"code","51ac0297":"code","29e7f3c8":"code","370665b6":"code","4da0bdf2":"code","7d293901":"code","840b1592":"code","361f2d55":"code","110bb7c7":"code","66df44e9":"code","3198af60":"code","62d642a4":"code","f467f226":"code","bf7a150f":"markdown","e2520dd1":"markdown","58c33328":"markdown","3edc49c2":"markdown","f08d9fa1":"markdown","e09ca44c":"markdown","39fef885":"markdown","6363ca87":"markdown","53d60bb3":"markdown","d10e2d4a":"markdown","68d15329":"markdown","3b4f1bdc":"markdown","660c97bc":"markdown","1c383876":"markdown","949ad6f4":"markdown","304078c8":"markdown","0a03b8f5":"markdown"},"source":{"8f2db16e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ad621de9":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e447c635":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntrain","5992e3de":"test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/test.csv\")\ntest","63563218":"submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")\nsubmission","9c764e06":"sns.displot(train['loss']);","4c73630c":"train['loss'].describe()","596032e2":"target = train.loss\ntrain.drop(['loss'], axis=1, inplace=True)\ntrain","bcb3dfd1":"combi = train.append(test)\ncombi","8f4138e2":"combi.drop(['id'], axis=1, inplace=True)\ncombi","9cdb219d":"combi.isnull().sum().sum()","51ac0297":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi.shape","29e7f3c8":"length = len(train)\n\ny = target.ravel()\nX = combi[: length]\nX_test = combi[length :]\ny.shape, X.shape, X_test.shape","370665b6":"from sklearn.feature_selection import GenericUnivariateSelect, f_regression\n\ntransformer = GenericUnivariateSelect(f_regression, mode='k_best', param=10)\nX = transformer.fit_transform(X, y)\nX_test = transformer.transform(X_test)\nX.shape, y.shape, X_test.shape","4da0bdf2":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","7d293901":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression().fit(X_train, y_train)\nprint(\"Score: \",model.score(X_train, y_train))\nprint(\"\")\nprint(\"Coefgficient: \", model.coef_)\nprint(\"\")\nprint(\"Intercept: \", model.intercept_)","840b1592":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))\nprint(\"\")\nprint(\"Coefgficient: \", model.coef_)\nprint(\"\")\nprint(\"Intercept: \", model.intercept_)","361f2d55":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_val, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_val, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_val, y_pred)))","110bb7c7":"compare = pd.DataFrame({'actual': y_val, 'predicted': y_pred})\nprint(compare)","66df44e9":"plt.figure(figsize=(10,10))\nplt.scatter(y_val, y_pred, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(y_pred), max(y_val))\np2 = min(min(y_pred), min(y_val))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()\n","3198af60":"prediction = model.predict(X_test)\nprediction[prediction < 0] = 0\nprediction.shape","62d642a4":"submission.loss = prediction\nsubmission","f467f226":"submission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission\n","bf7a150f":"Read","e2520dd1":"Import","58c33328":"Generic Univariate Select","3edc49c2":"Graph","f08d9fa1":"Predict on test set","e09ca44c":"Split","39fef885":"Combine","6363ca87":"Problem Statement\n\nThe dataset is used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with calculating the loss associated with a loan defaults. Although the features are anonymized, they have properties relating to real-world features.","53d60bb3":"Prepare submission","d10e2d4a":"Compare","68d15329":"Select Model","3b4f1bdc":"Normalise","660c97bc":"Evaluate","1c383876":"Check for null values","949ad6f4":"Predict on validation set","304078c8":"Define X and y","0a03b8f5":"Analyse target"}}