{"cell_type":{"da190ce9":"code","74481e3c":"code","947ca0ad":"code","050845e5":"code","1b796960":"code","d1e15b00":"code","9bd355cb":"code","6b10b6d6":"code","5fa2e22a":"code","7a2449b9":"code","4219cdc2":"code","60023c54":"code","cc5dd765":"code","2bf0b8ef":"markdown","0024991c":"markdown","b2514c38":"markdown","d115ec7f":"markdown","6dc8013a":"markdown","df12a1d0":"markdown","63a9b25d":"markdown"},"source":{"da190ce9":"!conda install -y -c bioconda viennarna","74481e3c":"data = \"\"\"#!\/usr\/bin\/perl -w\n# -*-Perl-*-\n# Last changed Time-stamp: <2005-03-09 19:38:25 ivo> \n# produce Pauline's mountain representation from bracket notation\n# use e.g. as  RNAfold < foo.seq | b2mt | xmgr -pipe\n# definition: h=number of base pairs enclosing base\nuse strict;\nwhile (<>) {\n    print if (s\/>\/#\/);\n\n    next unless (\/\\.\\.\\.\/);\n    next if (\/\\[\/);   # don't process output from partition function\n    chop;\n    my @F=split(\/\/,$_);\n    my $p=0; my $h=0;\n    foreach my $i (@F) {\n    $h-- if ($i eq ')');\n    $p++;\n    printf(\"%4d %4d\\n\",$p,$h);\n    $h++ if ($i eq '(');# increase $h *after* printing\n    }\n    print \"&\\n\";\n}\n\n=head1 NAME\n\nb2mt - produce coordinates for a mountain plot from bracket notation\n\n=head1 SYNOPSIS\n\n  b2mt.pl < seq.fold > mountain.dat\n\n=head1 DESCRIPTION\n\nread a secondary structures in bracket notation as output by RNAfold,\nand compute coordinates for a mountain plot as introduced by Pauline Hogeweg.\nThe output is suitable for graphing  with xmgrace, e.g.:\nC< RNAfold < foo.seq | b2mt.pl | xmgrace -pipe>\n\n=head1 AUTHOR\n\nIvo L. Hofacker <ivo@tbi.univie.ac.at>\"\"\"\n\nwith open('b2mt.pl', 'w') as f:\n      f.write(data)","947ca0ad":"data = \"\"\"#!\/usr\/bin\/perl -w\n# -*-Perl-*-\n# Last changed Time-stamp: <2008-08-26 16:04:00 ivo>\n# produce Pauline Hogeweg's mountain representation *_dp.ps files\n# writes 3 sets of x y data separated by a \"&\"\n# the first two sets are mountain representations from base pair probabilities\n# and mfe structure, respectively.\n# definition: mm[i],mp[i] = (mean) number of base pairs enclosing base i\n# third set a measure of well-definedness: the entropy of the pair probs of\n# base i, sp[i] = -Sum p_i * ln(p_i). Well-defined regions have low entropy.\n#\n# use e.g. as  mountain.pl dot.ps | xmgrace -pipe\n\nuse strict;\nour (@mm, @mp, @pp, @sp, @p0, $i, $max, $length, $do_png);  # perl5 only\n\nmy $sep = \"&\";   # xmgr uses & to separate data sets\n\nif (@ARGV && ($ARGV[0] eq '-png')) {\n    eval \"use Chart::Lines\";\n    die($@,\n    \"\\nCould not load the Chart::Lines module required with -png option\\n\")\n    if $@;\n    $do_png=1;\n    shift;\n}\n\n\nwhile (<>) {\n    chomp;\n    if (\/\\\/sequence \\{ \\((\\S*)[\\\\\\)]\/) {\n    my $seq = $1;           # empty for new version\n    while (!\/\\) \\} def\/) {  # read until end of definition\n        $_ = <>;\n        \/(\\S*)[\\\\\\)]\/;      # ends either with `)' or `\\'\n       $seq .= $1;\n    }\n    $length = length($seq);\n    next;\n    }\n\n    next unless \/(\\d+) (\\d+) (\\d+\\.\\d+) (.box)$\/;\n    my ($i, $j, $p, $id) = ($1,$2,$3,$4);\n    if ($id eq \"ubox\") {\n    $p *= $p;           # square it to probability\n    $mp[$i+1] += $p;\n    $mp[$j]   -= $p;\n    my $ss = $p>0 ? $p*log($p) : 0;\n    $sp[$i] += $ss;\n    $sp[$j] += $ss;\n    $pp[$i] += $p;\n    $pp[$j] += $p;\n    }\n    if ($id eq \"lbox\") {\n    $mm[$i+1]++;\n    $mm[$j]--;\n    }\n}\n$mp[0] = $mm[0] = $max = 0;\nfor ($i=1; $i<=$length; $i++) {\n    no warnings;\n    $mp[$i]+=$mp[$i-1];\n    $max = $mp[$i] if ($mp[$i]>$max);\n    $mm[$i]+=$mm[$i-1];\n    $max = $mp[$i] if ($mp[$i]>$max);\n    $sp[$i] += (1-$pp[$i])*log(1-$pp[$i]);\n}\n\nif ($do_png) {\n    my $width =  800;\n    my $height = 600;\n\n    # FIXME: legend_lables when doing mfe only\n    my $skip = 10**(int (log($length)\/log(10.) - 0.5));\n    my $obj = Chart::Lines->new( $width, $height );\n    $obj->set ('title' => $ARGV,\n           'x_label' => 'Position',\n           'y_label' => 'Height',\n           'min_val' => 0,\n           'precision' => 0,\n           'legend_labels' => ['mfe', 'pf'],\n           'skip_x_ticks' => $skip);\n\n    $obj->add_dataset ((0..$length));\n\n    $obj->add_dataset (@mp);\n    $obj->add_dataset (@mm);\n    $obj->png(\"mountain.png\");\n\n} else {\n    # print the results for plotting\n    for ($i=1; $i<=$length; $i++) {\n    printf(\"%4d  %7.5g\\n\", $i, $mp[$i]);\n    }\n    print \"$sep\\n\";\n\n    for ($i=1; $i<=$length; $i++) {\n    printf(\"%4d  %4d\\n\", $i, $mm[$i]);\n    }\n    print \"&\\n\";\n    my $log2 = log(2);\n    for ($i=1; $i<=$length; $i++) {\n    printf(\"%4d  %7.5g\\n\", $i, -$sp[$i]\/$log2);\n    }\n}\n\n=head1 NAME\n\n    mountain - produce coordinates for a mountain plot from a dot plot\n\n=head1 SYNOPSIS\n\n    mountain.pl myseq_dp.ps > mountain.dat\n\n=head1 DESCRIPTION\n\n    reads pair proabilities and MFE structure from a probability dot\n    plot as produced by C<RNAfold -p>, and produces x-y data suitable\n    for producing a mountain plot using standard xy-plotting programs.\n\n    Output consists of 3 data sets separated by a line containing only\n    the C<&> character. The first two sets are mountain representations\n    computed from base pair probabilities and mfe structure, respectively.\n    For the mfe case the moutain plot graphs the number base pairs\n    enclosing a position k, in case of pair probabilities we use the average\n    number of base pairs computed as m_k = \\Sum_i<k<j p_ij.\n    The third set contains the positional entropy, which provides a measure\n    of local structural welldefinedness, s_i = -\\Sum_j p_ij * ln(p_ij).\n\n    The output is suitable for graphing with xmgrace, e.g.:\n    C< RNAfold -p < foo.seq; mountain.pl foo_dp.ps | xmgrace -pipe>\n\n=head1 AUTHOR\n\nIvo L. Hofacker <ivo@tbi.univie.ac.at>\"\"\"\n\nwith open('mountain.pl', 'w') as f:\n      f.write(data)","050845e5":"!chmod 755 .\/b2mt.pl\n!chmod 755 .\/mountain.pl","1b796960":"import pandas as pd\nimport numpy as np\n\nimport tempfile\nimport os \nimport re\nimport subprocess\nimport tempfile\n\nimport matplotlib.pyplot as plt","d1e15b00":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\nsequence = train.iloc[0]['sequence']","9bd355cb":"sequence","6b10b6d6":"def RNAstructures(sequence, length):\n    tf = tempfile.NamedTemporaryFile(delete=False)\n\n    tf.name += '.seq'\n    with open(tf.name, 'w') as f:\n        f.write(sequence)\n\n    cmd = 'RNAfold -p -d2 --noLP < ' + tf.name\n    cmd_result = subprocess.check_output(cmd, shell=True).decode().split('\\n')\n\n    # Remove intermediate files\n    subprocess.check_output('rm -r .\/rna.ps', shell=True)\n    subprocess.check_output('rm -r .\/dot.ps', shell=True)\n    \n    # Return only the MFE and Centroid structures\n    return [x[:length] for x in cmd_result if '(' in x[:length] and ')' in x[:length] and '{' not in x[:length] and ',' not in x[:length]]\n\n# some times structures might be same best to remove any duplicates\nstructures = RNAstructures(sequence, 107)\nstructures","5fa2e22a":"def RNAeval(sequence, structure):\n    tf = tempfile.NamedTemporaryFile(delete=False)\n    ss = structure\n\n    tf.name += '.fa'\n    with open(tf.name, 'w') as f:\n        f.write('>' + 'rna_seq' + '\\n')\n        f.write(sequence + '\\n')\n        f.write(ss + '\\n')\n\n    dopt = ' -v -d2 '\n    if False:\n        dopt = ' -d0 '\n\n    cmd = 'RNAeval ' + dopt + ' < ' + tf.name\n    \n    # Returns free energy values for each loop\n    return subprocess.check_output(cmd, shell=True).decode().split('\\n')\n\nRNAeval(sequence, structures[1])","7a2449b9":"def result_decoder(res):\n    final_ = {}\n\n    positives_ = []\n    negatives_ = []\n\n    for result in res[1:-3]:\n        energy = int(result[-5:].strip())\n        r = r\"\\((.*?)\\)\"\n\n        if energy > 0:\n            matches = re.findall(r, result)\n            if len(matches) > 0:\n                start, end = matches[0].split(\",\")\n                positives_.append([int(start)-1, int(end)-1, energy])\n            else:\n                print(error_bby)\n        else:\n            matches = re.findall(r, result)\n            if len(matches) > 0:\n                start, end = matches[0].split(\",\")\n                negatives_.append([int(start)-1, int(end)-1, energy])\n            else:\n                final_[\"external\"] = energy\n\n    final_[\"closed\"] = positives_\n    final_[\"outer\"] = negatives_\n    \n    # Returns start, end and energy for all enclosed nucleotides in between start and end\n    return final_\n\nresult_decoder(RNAeval(sequence, structures[1]))","4219cdc2":"def get_entropy(pls, entropy_arr):\n    for points in pls[\"closed\"]:\n        val_ = points[-1] \/ (points[1]-points[0]-1)\n        if val_ == -170:\n            print(points)\n        entropy_arr[points[0]+1:points[1]] += val_\n\n    for points in pls[\"outer\"]:\n        val_ = points[-1] \/ 2\n        entropy_arr[points[0]+1] += val_\n        entropy_arr[points[1]-1] += val_\n\n    remaining_ = np.where(entropy_arr == 0)[0]\n    val_ = pls[\"external\"] \/ len(remaining_)\n    entropy_arr[np.where(entropy_arr == 0)[0]] = val_\n    \n    # Returns a vector of length of sequence with energy values are assigned to each nucleotide\n    # such that the sum of entire vector is equal to Free Energy of the structure \n    return entropy_arr\n\nfig, axs = plt.subplots(2, 1)\n\nfree_energy_0 = get_entropy(result_decoder(RNAeval(sequence, structures[0])), np.zeros(len(structures[0])))\nfree_energy_1 = get_entropy(result_decoder(RNAeval(sequence, structures[1])), np.zeros(len(structures[1])))\n\naxs[0].plot(free_energy_0)\naxs[0].set_title('Free Energy of Structure 1\\n'+str(structures[0])+'\\nTotal of Structure = '+str(free_energy_0.sum()))\n\naxs[1].plot(free_energy_1)\naxs[1].set_title('Free Energy of Structure 2\\n'+str(structures[1])+'\\nTotal of Structure = '+str(free_energy_1.sum()))\n\nfig.tight_layout()\nplt.show()","60023c54":"def RNAmountain(sequence, structure):\n    tf_m = tempfile.NamedTemporaryFile(delete=False)\n  \n    tf_m.name += '.fa'\n    with open(tf_m.name, 'w') as f:\n        f.write(structure)\n        \n    cmd_m = '.\/b2mt.pl ' + tf_m.name\n    \n    result = subprocess.check_output(cmd_m, shell=True).decode().split('\\n')\n    \n    graph = []\n    for val in result:\n        num_ = val.strip().split(' ')[-1]\n        if num_ == '&':\n            graph.append(0)\n        elif num_ != '':\n            graph.append(float(num_))\n\n    return np.array(graph)\n\nfig, axs = plt.subplots(2, 1)\n\nmountain_plot_0 = RNAmountain(sequence, structures[0])\n\naxs[0].plot(mountain_plot_0)\naxs[0].set_title('Mountain Plot of Structure 1\\n'+str(structures[0]))\n\nmountain_plot_1 = RNAmountain(sequence, structures[1])\n\naxs[1].plot(mountain_plot_1)\naxs[1].set_title('Mountain Plot of Structure 2\\n'+str(structures[1]))\n\nfig.tight_layout()\nplt.show()","cc5dd765":"def RNAenergies(sequence, structure):\n    tf_te = tempfile.NamedTemporaryFile(delete=False)\n\n    tf_te.name += '.seq'\n    with open(tf_te.name, 'w') as f:\n        f.write(sequence + '\\n')\n\n    cmd_te = 'RNAfold -p < ' + tf_te.name\n\n    subprocess.check_output(cmd_te, shell=True).decode() #dot.ps\n\n    result = subprocess.check_output('.\/mountain.pl dot.ps', shell=True).decode().split('\\n')\n    \n    subprocess.check_output('rm -r .\/dot.ps', shell=True)\n    subprocess.check_output('rm -r .\/rna.ps', shell=True)\n\n    all_graphs = []\n    graph = []\n\n    for val in result:\n        num_ = val.strip().split(' ')[-1]\n        if num_ == '&':\n            all_graphs.append(np.array(graph))\n            graph = []\n        elif num_ != '':\n            graph.append(float(num_))\n\n    all_graphs.append(np.array(graph))\n    graph = []\n\n    # Remove extra mountain plot\n    return np.delete(np.array(all_graphs), (1), axis=0)\n\n# Same for both\nenergies = RNAenergies(sequence, structures[0])\n\nfig, axs = plt.subplots(2, 1)\n\naxs[0].plot(energies[0])\naxs[0].set_title('Thermodynamic Ensemble of Sequence\\n'+str(structures[0]))\n\naxs[1].plot(energies[1])\naxs[1].set_title('Positional Entropy\\n'+str(structures[1]))\n\nfig.tight_layout()\nplt.show()","2bf0b8ef":"# Install ViennaRNA","0024991c":"### The following notebook highlights how we used ViennaRNA [1] and its supporting PERL scripts to extract additional features to help in training.\n\n[1] Lorenz, Ronny and Bernhart, Stephan H. and H\u00f6ner zu Siederdissen, Christian and Tafer, Hakim and Flamm, Christoph and Stadler, Peter F. and Hofacker, Ivo L.\nViennaRNA Package 2.0\nAlgorithms for Molecular Biology, 6:1 26, 2011, doi:10.1186\/1748-7188-6-26","b2514c38":"## Getting Mountain Plot","d115ec7f":"# Feature Engineering","6dc8013a":"# Define the PERL scripts","df12a1d0":"## Get MFE and CENTROID structures","63a9b25d":"## Getting Free Energy as Vector"}}