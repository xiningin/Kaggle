{"cell_type":{"cefc0ab6":"code","a5f97101":"code","6a778d18":"code","d12ead3c":"code","ff97622f":"code","532e6fce":"code","451558bf":"code","cdbc97a0":"code","3e275d4e":"code","cf052119":"code","ab06e0fc":"code","c821ef8b":"code","10a9cf2a":"code","86320a3d":"code","60ba73ed":"code","696d5963":"code","482923de":"code","d1aae98e":"code","00850e34":"code","13ffb83c":"code","5d1481cd":"code","87353d0f":"code","03514fe5":"code","07d2faab":"code","239a57e5":"code","7193e692":"code","82d91613":"code","47561af7":"code","a1648548":"code","8f868cab":"code","d49c7c8f":"markdown","dad68add":"markdown","ec8f00f4":"markdown","2a2d2d78":"markdown","9674c8d9":"markdown","4691490e":"markdown","fe87abc1":"markdown","0ae5ef35":"markdown","18db5430":"markdown","fa794912":"markdown","737223f0":"markdown","5f757ffd":"markdown","595cf675":"markdown","977a58f4":"markdown","fa0a70e1":"markdown","ec85dce7":"markdown","2812fd93":"markdown","da8b66da":"markdown","5d402378":"markdown","5f9df4e6":"markdown","9232cccc":"markdown","848e29f9":"markdown","76393824":"markdown","5bf0c9e0":"markdown","707e9a74":"markdown","8d0859ba":"markdown"},"source":{"cefc0ab6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.ticker as mtick\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.express as ex\nimport plotly.figure_factory as ff\nimport plotly.offline as offline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom imblearn.over_sampling import SMOTE \nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier","a5f97101":"bank_data = pd.read_csv(\"..\/input\/credit-card-customers\/BankChurners.csv\")\n\n# Deleting columns that we do not need (according to \"detail\" of the data in kaggle.com)\nbank_data = bank_data.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',\"CLIENTNUM\"], axis = 1)\n\nbank_data.head()","6a778d18":"bank_data.columns.values","d12ead3c":"bank_data.isnull().sum()","ff97622f":"# Make a copy of the original data to use the original one later\nnum_data = bank_data.copy()\n\nnum_data['Attrition_Flag'] = num_data['Attrition_Flag'].map({'Existing Customer':0, 'Attrited Customer':1})\nnum_data['Income_Category'] = num_data['Income_Category'].map({'Unknown':0, 'Less than $40K':0, '$40K - $60K':1, '$60K - $80K':2, '$80K - $120K':3, '$120K +':4})\nnum_data['Marital_Status'] = num_data['Marital_Status'].map({'Divorced':0, 'Unknown':0, 'Single':0, 'Married':1})\nnum_data['Education_Level'] = num_data['Education_Level'].map({'Unknown':0, 'Uneducated':0, 'High School':1, 'College':2,'Graduate':3,'Post-Graduate':4,'Doctorate':5})\nnum_data['Card_Category'] = num_data['Card_Category'].map({'Blue':0, 'Silver':1, 'Gold':2, 'Platinum':3})\n\n#Just playing with different ways to do the same thing\nnum_data = pd.get_dummies(num_data) #Gender\nnum_data.head()","532e6fce":"plt.figure(figsize=(15,8))\nnum_data.corr()[\"Attrition_Flag\"].sort_values(ascending=False).plot(kind=\"bar\")","451558bf":"ax = sns.catplot(y=\"Attrition_Flag\", kind=\"count\", data=bank_data, height=2.6, aspect=2.5, orient='h')","cdbc97a0":"def barplot_percentages(feature, orient='v', axis_name=\"Percentage of customers\"):\n    ratios = pd.DataFrame()\n    g = bank_data.groupby(feature)[\"Attrition_Flag\"].value_counts().to_frame()\n    g = g.rename({\"Attrition_Flag\": axis_name}, axis=1).reset_index()\n    g[axis_name] = g[axis_name]\/len(bank_data)\n    if orient == 'v':\n        ax = sns.barplot(x=feature, y= axis_name, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_yticklabels(['{:,.0%}'.format(y) for y in ax.get_yticks()])\n    else:\n        ax = sns.barplot(x= axis_name, y=feature, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_xticklabels(['{:,.0%}'.format(x) for x in ax.get_xticks()])\n    ax.plot()\nbarplot_percentages(\"Marital_Status\")","3e275d4e":"def barplot_percentages(feature, orient='v', axis_name=\"Percentage of customers\"):\n    ratios = pd.DataFrame()\n    g = bank_data.groupby(feature)[\"Attrition_Flag\"].value_counts().to_frame()\n    g = g.rename({\"Attrition_Flag\": axis_name}, axis=1).reset_index()\n    g[axis_name] = g[axis_name]\/len(bank_data)\n    if orient == 'v':\n        ax = sns.barplot(x=feature, y= axis_name, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_yticklabels(['{:,.0%}'.format(y) for y in ax.get_yticks()])\n    else:\n        ax = sns.barplot(x= axis_name, y=feature, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_xticklabels(['{:,.0%}'.format(x) for x in ax.get_xticks()])\n    ax.plot()\nbarplot_percentages(\"Dependent_count\")","cf052119":"def barplot_percentages(feature, orient='v', axis_name=\"Percentage of customers\"):\n    ratios = pd.DataFrame()\n    g = bank_data.groupby(feature)[\"Attrition_Flag\"].value_counts().to_frame()\n    g = g.rename({\"Attrition_Flag\": axis_name}, axis=1).reset_index()\n    g[axis_name] = g[axis_name]\/len(bank_data)\n    if orient == 'v':\n        ax = sns.barplot(x=feature, y= axis_name, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_yticklabels(['{:,.0%}'.format(y) for y in ax.get_yticks()])\n    else:\n        ax = sns.barplot(x= axis_name, y=feature, hue='Attrition_Flag', data=g, orient=orient)\n        ax.set_xticklabels(['{:,.0%}'.format(x) for x in ax.get_xticks()])\n    ax.plot()\nbarplot_percentages(\"Education_Level\")","ab06e0fc":"corrs = num_data.corr()\nfigure = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\noffline.iplot(figure,filename='corrheatmap')","c821ef8b":"# # Drop redundant columns and set target variable\n# drop = ['Attrition_Flag', 'Gender_F']\n# x, y = num_data.drop(drop,axis=1), num_data['Attrition_Flag']\n\n# # Fit RandomForest Classifier\n# clf = RandomForestClassifier(n_estimators=350, criterion='entropy', max_features='auto', random_state=1)\n# clf = clf.fit(x, y)\n\n# # Plot features importances\n# imp = pd.Series(data=clf.feature_importances_, index=x.columns).sort_values(ascending=False)\n# plt.figure(figsize=(10,12))\n# plt.title(\"Feature importance\")\n# ax = sns.barplot(y=imp.index, x=imp.values, palette=\"Blues_d\")","10a9cf2a":"X = num_data.drop(['Attrition_Flag'], axis = 1) # Features\nY = num_data['Attrition_Flag'] # Labels\nprint(type(X))\nprint(type(Y))\nprint(X.shape)\nprint(Y.shape)","86320a3d":"feature_scaler = StandardScaler()\nX_scaled = feature_scaler.fit_transform(X)","60ba73ed":"X_train, X_test, Y_train, Y_test = train_test_split( X_scaled, Y, test_size = 0.3, random_state = 100)\n\nprint(X_train.shape)\nprint(X_test.shape)","696d5963":"print(\"Number of observations in each class before oversampling (training data): \\n\", pd.Series(Y_train).value_counts())\n\nsmote = SMOTE(random_state = 101)\nX_train,Y_train = smote.fit_sample(X_train,Y_train)\n\nprint(\"Number of observations in each class after oversampling (training data): \\n\", pd.Series(Y_train).value_counts())","482923de":"rfc = RandomForestClassifier(criterion='entropy', max_features='auto', random_state=1)\ngrid_param = {'n_estimators': [200, 250, 300, 350, 400, 450]}\n\ngd_sr = GridSearchCV(estimator=rfc, param_grid=grid_param, scoring='recall', cv=5)\n\ngd_sr.fit(X_train, Y_train)\n\nbest_parameters = gd_sr.best_params_\nprint(best_parameters)\n\nbest_result = gd_sr.best_score_ # Mean cross-validated score of the best_estimator\nprint(best_result)\n","d1aae98e":"rfc = RandomForestClassifier(n_estimators=350, criterion='entropy', max_features='auto', random_state=1)\nrfc.fit(X_train,Y_train)\n\nY_pred = rfc.predict(X_test)\n\nconf_mat = metrics.confusion_matrix(Y_test, Y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(conf_mat,annot=True)\nplt.title(\"Confusion_matrix\")\nplt.xlabel(\"Predicted Class\")\nplt.ylabel(\"Actual class\")\nplt.show()\nprint('Confusion matrix: \\n', conf_mat)\nprint('TP: ', conf_mat[1,1])\nprint('TN: ', conf_mat[0,0])\nprint('FP: ', conf_mat[0,1])\nprint('FN: ', conf_mat[1,0])","00850e34":"print(metrics.classification_report(Y_test,rfc.predict(X_test)))\nprint('Accuracy_Score:',accuracy_score(Y_test,Y_pred)*100,'%')\nprint('Recall:',metrics.recall_score(Y_test,Y_pred)*100,'%')","13ffb83c":"featimp = pd.Series(rfc.feature_importances_, index=list(X)).sort_values(ascending=False)\nprint(featimp)","5d1481cd":"X1 = num_data[['Total_Trans_Ct', 'Total_Trans_Amt', 'Total_Revolving_Bal', 'Total_Ct_Chng_Q4_Q1', 'Total_Relationship_Count',\n                 'Months_Inactive_12_mon','Total_Amt_Chng_Q4_Q1']]\n\nfeature_scaler = StandardScaler()\nX1_scaled = feature_scaler.fit_transform(X1)\n\nX1_train, X1_test, Y1_train, Y1_test = train_test_split( X1_scaled, Y, test_size = 0.3, random_state = 100)\n\nsmote = SMOTE(random_state = 101)\nX1_train,Y1_train = smote.fit_sample(X1_train,Y1_train)\n\nrfc = RandomForestClassifier(n_estimators=350, criterion='entropy', max_features='auto', random_state=1)\nrfc.fit(X1_train,Y1_train)\n\nY_pred = rfc.predict(X1_test)\n\nconf_mat = metrics.confusion_matrix(Y1_test, Y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(conf_mat,annot=True)\nplt.title(\"Confusion_matrix\")\nplt.xlabel(\"Predicted Class\")\nplt.ylabel(\"Actual class\")\nplt.show()\nprint('Confusion matrix: \\n', conf_mat)\nprint('TP: ', conf_mat[1,1])\nprint('TN: ', conf_mat[0,0])\nprint('FP: ', conf_mat[0,1])\nprint('FN: ', conf_mat[1,0])\n\n","87353d0f":"print(metrics.classification_report(Y1_test,Y_pred))\nprint('Accuracy_Score:',accuracy_score(Y1_test,Y_pred)*100,'%')\nprint('Recall:',metrics.recall_score(Y1_test,Y_pred)*100,'%')","03514fe5":"abc = AdaBoostClassifier(random_state=1)\ngrid_param = {'n_estimators': [5,10,20,30,40,50]}\n\ngd_sr = GridSearchCV(estimator=abc, param_grid=grid_param, scoring='recall', cv=5)\n\ngd_sr.fit(X_train, Y_train)\n\nbest_parameters = gd_sr.best_params_\nprint(best_parameters)\n\nbest_result = gd_sr.best_score_ # Mean cross-validated score of the best_estimator\nprint(best_result)\n","07d2faab":"abc = AdaBoostClassifier(n_estimators=50, random_state=1)\nabc.fit(X_train,Y_train)\n\nY_pred = abc.predict(X_test)\n\nconf_mat = metrics.confusion_matrix(Y_test, Y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(conf_mat,annot=True)\nplt.title(\"Confusion_matrix\")\nplt.xlabel(\"Predicted Class\")\nplt.ylabel(\"Actual class\")\nplt.show()\nprint('Confusion matrix: \\n', conf_mat)\nprint('TP: ', conf_mat[1,1])\nprint('TN: ', conf_mat[0,0])\nprint('FP: ', conf_mat[0,1])\nprint('FN: ', conf_mat[1,0])","239a57e5":"print('Classification report: \\n', metrics.classification_report(Y_test, Y_pred))\nprint('Accuracy_Score:',accuracy_score(Y_test, Y_pred)*100,'%')\nprint('Recall:',metrics.recall_score(Y_test, Y_pred)*100,'%')\n","7193e692":"featimp = pd.Series(abc.feature_importances_, index=list(X)).sort_values(ascending=False)\nprint(featimp)","82d91613":"gbc = GradientBoostingClassifier(random_state=1)\ngrid_param = {'n_estimators': [10,20,30,40,50], 'max_depth': [5,6,7,8,9,10,11,12], 'max_leaf_nodes': [8,12,16,20,24,28,32]}\n\ngd_sr = GridSearchCV(estimator=gbc, param_grid=grid_param, scoring='recall', cv=5)\n\ngd_sr.fit(X_train, Y_train)\n\nbest_parameters = gd_sr.best_params_\nprint(best_parameters)\n\nbest_result = gd_sr.best_score_ # Mean cross-validated score of the best_estimator\nprint(best_result)\n","47561af7":"# Building Gradient Boost using the tuned parameter\ngbc = GradientBoostingClassifier(n_estimators=40, max_depth=9, max_leaf_nodes=32, random_state=1)\ngbc.fit(X_train,Y_train)\n\nY_pred = gbc.predict(X_test)\n# print('Classification report: \\n', metrics.classification_report(Y_test, Y_pred))\n\nconf_mat = metrics.confusion_matrix(Y_test, Y_pred)\nplt.figure(figsize=(8,6))\nsns.heatmap(conf_mat,annot=True)\nplt.title(\"Confusion_matrix\")\nplt.xlabel(\"Predicted Class\")\nplt.ylabel(\"Actual class\")\nplt.show()\nprint('Confusion matrix: \\n', conf_mat)\nprint('TP: ', conf_mat[1,1])\nprint('TN: ', conf_mat[0,0])\nprint('FP: ', conf_mat[0,1])\nprint('FN: ', conf_mat[1,0])\n","a1648548":"print('Classification report: \\n', metrics.classification_report(Y_test, Y_pred))\nprint('Accuracy_Score:',accuracy_score(Y_test, Y_pred)*100,'%')\nprint('Recall:',metrics.recall_score(Y_test, Y_pred)*100,'%')","8f868cab":"featimp = pd.Series(gbc.feature_importances_, index=list(X)).sort_values(ascending=False)\nprint(featimp)","d49c7c8f":"### Finding Feature Importances\n\nNow we look for the features with higher importance, to run a new Random Forest using only some of the most important ones.","dad68add":"## Implementing Oversampling \nTo balance the dataset we use SMOTE which stands for Synthetic Minority Oversampling Technique.","ec8f00f4":"## Features Importances\n\nNext, I will plot the importance of every feature.\n\nFor this, I will first remove redundant columns; which means remove columns with 2 unique values.\nThen will set Attrition_Flag as my Target Variable (y), to after that use Ranfom Forest to find this features importances.","2a2d2d78":"# AdaBoost Classifier\n\n\n### Tuning AdaBoost\n\nSame as with Random Forest, we will try to find the best parameters to run now AdaBoost, implementing cross-validation using Grid Search.","9674c8d9":"# Gradient Boosting Classifier\n\n### Tuning Gradient Boosting\n\nLast, we do the same thing to find the best parameters to run now Gradient Boosting, implementing cross-validation using Grid Search.","4691490e":"### Normalizing\nNext, we normalize numerical so that each feature has mean 0 and variance 1 using Standar Scaler.","fe87abc1":"There are no null values, which is good!","0ae5ef35":"# Conclusion\n\nI decided to work keeping the classifier with the highest possible recall score, this in order to get a minimum number of False Negatives, the reason of this is because those False Negatives are basically customers that our model is predicting that are still \"Existing Customers\" but the reality is that they are \"Attrited Customers\". \nIn other words, this are customers that we think they still are with us, but the actually have already churned. In this kind of situations it is better to try to reduce this Falses Predictions, because the other ones, the False Positives, are customers we are not expecting to be with us and however they are, which means we have more customers than expected.\n__________\n\nWe could see that AdaBoost Classifier was the one which has performed better; even though the accuracy score was a little lower than the other models it got a recall score of 90.82 (higher than all the other models) which helps in having only 48 False Negatives.\n\n","18db5430":"### Building Gradient Boosting\n\nNow we run Gradient Boosting Classifier using the tuned parameters which are n_estimators=40, max_depth=9 and max_leaf_nodes=32 and we plot a Confusion Matrix.\n\n","fa794912":"### Feature Importances","737223f0":"### Selecting features with higher significance\n\nNow we will create a new subset (X1), using only some features, and run a new Random Forest to compare them.","5f757ffd":"### Building Random Forest\n\nWe build now our Random Forest using the tuned parameter (350 number of trees in the forest).\nAlso, we plot a Confusion Matrix to appreciate better the results.\n\n","595cf675":"## Correlation Heatmap\n\nGetting the correlation of target variable with all the other features.","977a58f4":"### Feature Importances","fa0a70e1":"### Dividing Dataset \nNow we divide into training and test sets","ec85dce7":"### By Education Level","2812fd93":"## Ploting Attrition_Flag\n\nWe ca clearly see in this plot the difference between Current Customers and Attritied Customers.","da8b66da":"### By Dependant Count","5d402378":"## Correlation Heatmap ","5f9df4e6":"## Converting Categorical Features\n\nNext step we convert categorical features to numerical; I decided to use .map() instead of pd.get_dummies().\nAlso, I decided to group some features as equals, for example, in Marital_Status was either is Married (1) or not (0). Same with Education_Level.\n","9232cccc":"### Building AdaBoost\n\nAfter running GridSearch we found that the ideal maximum number of estimators at which boosting is terminatedo is 50 so we now build our AdaBoost Classifier using the this parameter and then we plot a Confusion Matrix to appreciate better the results.\n\n","848e29f9":"# Introduction\n\n### Problem context\n*A manager at the bank is disturbed with more and more customers leaving their credit card services. They would really appreciate if one could predict for them who is gonna get churned so they can proactively go to the customer to provide them better services and turn customers' decisions in the opposite direction.*\n\n### Goal\nThis notebook aims to try to predict customers who are likely to get churned through Machine Learning algorithms such as Random Forest, AdaBoost and Gradient Boosting.\n\n### Dataset\nThis dataset consists of 10,000 customers mentioning their age, salary, marital_status, credit card limit, credit card category, etc. There are nearly 18 features. It is an unbalanced dataset where only abouy 16% of customers who have churned.\n\n\n\n## Importing Libraries","76393824":"## Attrited Customers vs Existing Customers\n\n### By Marital Status","5bf0c9e0":"## Data Loading\n\nWe load the dataset and have a first look at it.","707e9a74":"# Random Forest Classifier\n\n### Tuning Random Forest\n\nNow, we will find the best parameters to run Random Forest and implementing cross-validation using Grid Search.\n\nIn the GridSearch parameters we use \"recall\" as in this case I will be trying to reduce False Negatives.\n","8d0859ba":"## Data Preprocessing\n\n### Dividing Dataset\nWe divide into label and feature sets"}}