{"cell_type":{"adc8737c":"code","a2fb0a3b":"code","c8af6968":"code","74f4f1f4":"code","cc8af832":"code","09dcdd62":"code","b7df23e9":"code","2e24e637":"code","34e217b1":"code","3ca198b1":"code","1fdddc64":"code","be98fc75":"code","c61a66c3":"code","895a948b":"code","ac7684f2":"code","961b60ad":"code","81a27cd8":"code","e14fc3ab":"code","16e93052":"code","73c4f5d7":"code","b437217d":"code","041ca4e1":"markdown"},"source":{"adc8737c":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing","a2fb0a3b":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]","c8af6968":"train_df.head()","74f4f1f4":"train_df.info()\nprint('_'*40)\ntest_df.info()","cc8af832":"train_df.describe() # show numerical features","09dcdd62":"train_df.describe(include=['O']) #show categorical features","b7df23e9":"#replace Sex with numeric value 0 - male, 1 - female\nmappingSex = {'male': 0, 'female': 1}\nmappingEmbarked = {'Q': 0, 'S': 1, 'C': 2}\ntrain_df = train_df.replace({'Sex': mappingSex, 'Embarked': mappingEmbarked})\ntest_df = test_df.replace({'Sex': mappingSex, 'Embarked': mappingEmbarked})\n","2e24e637":"#Add a column to indicate Age NaN\ntrain_df['MissingAge'] = 0\ntest_df['MissingAge'] = 0\n\ntrain_df['Age'].fillna(0, inplace=True)\ntrain_df.loc[train_df.Age == 0, 'MissingAge'] = 1\n\ntest_df['Age'].fillna(0, inplace=True)\ntest_df.loc[test_df.Age == 0, 'MissingAge'] = 1\n\ntrain_df['Embarked'].fillna(0, inplace=True)\ntest_df['Embarked'].fillna(0, inplace=True)\n\ntrain_df.info()","34e217b1":"plt.hist(train_df[\"Age\"], bins=20)","3ca198b1":"#Add a column to indicate Fare NaN\ntrain_df['MissingFare'] = 0\ntest_df['MissingFare'] = 0\n\ntrain_df['Fare'].fillna(0, inplace=True)\ntrain_df.loc[train_df.Fare == 0, 'MissingFare'] = 1\n\ntest_df['Fare'].fillna(0, inplace=True)\ntest_df.loc[test_df.Fare == 0, 'MissingFare'] = 1\n\ntrain_df.info()","1fdddc64":"corr = train_df.corr()\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nplt.figure(figsize = (16,5))\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0, annot=True, \n            square=False, linewidths=.5)","be98fc75":"#Missing_df = train_df[train_df['MissingAge'] == 1]\n#print(Missing_df['Embarked'].value_counts())\n#print('_'*40)\n#train_df['Embarked'].value_counts()","c61a66c3":"train_df.describe(include=['O'])","895a948b":"train_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis = 1)\ntest_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis = 1)","ac7684f2":"X_train = train_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Survived'], axis = 1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(['Name', 'Ticket', 'Cabin', 'PassengerId'], axis = 1)\nX_train.shape, Y_train.shape, X_test.shape","961b60ad":"X_train.describe()","81a27cd8":"# Initialise the Scaler \nscaler = StandardScaler() \n# To scale data \nprint(scaler.fit(X_train))\nprint(scaler.mean_)\n#std_scale = preprocessing.StandardScaler().fit(X_train)\n#X_train.replace(std_scale.transform(X_train))\n#scaler.transform(X_train) \n#X_train","e14fc3ab":"X_train['Age'] = X_train['Age'].astype(int)\nX_train['Fare'] = X_train['Fare'].astype(int)\nX_train['Embarked'] = X_train['Embarked'].astype(int)\n\nX_test['Age'] = X_test['Age'].astype(int)\nX_test['Fare'] = X_test['Fare'].astype(int)\nX_test['Embarked'] = X_test['Embarked'].astype(int)\n\nX_train","16e93052":"scaler = preprocessing.StandardScaler().fit(X_train)\nX_scaled = scaler.transform(X_train)\nX_scaled_test = scaler.transform(X_test)\n","73c4f5d7":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_scaled, Y_train)\nY_pred = random_forest.predict(X_scaled_test)\nrandom_forest.score(X_scaled, Y_train)\nacc_random_forest = round(random_forest.score(X_scaled, Y_train) * 100, 2)\nacc_random_forest","b437217d":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","041ca4e1":"ToDo feature normalization"}}