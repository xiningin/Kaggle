{"cell_type":{"ba6751f2":"code","91c1e1ca":"code","23b53c43":"code","3935ee5c":"code","7d43fb87":"code","1e46020a":"code","1962552e":"code","69037f96":"code","c193919e":"code","890f914d":"code","39646c87":"code","941a2e47":"code","31908f70":"code","b648e63e":"code","27310145":"code","694c777a":"code","7ef27c77":"code","2bab5cc4":"code","53509c7f":"code","47027c93":"code","98631c2d":"code","1ed2c31e":"code","a4d4a0e0":"code","f5d3ba05":"code","b9fc771c":"code","07c53d73":"code","093a00d7":"code","bb9c18d1":"code","7cd5c48b":"code","b310484a":"code","746cf590":"code","627df503":"code","a6d31945":"code","e46b7ee0":"code","8676cdf8":"code","7a3f473f":"code","515c93eb":"code","79f6e8a6":"code","4eef24ca":"code","c3122eb7":"code","330a6a36":"code","7df26e73":"code","8588858c":"code","33904f4e":"code","983c1ff6":"code","8d4b70c4":"code","1759e0c7":"code","547d76e7":"code","bf227c6e":"code","6798408f":"code","3e365cad":"code","5be44576":"code","badf8ef2":"code","19846028":"code","6b1e21df":"code","97c55b4d":"code","e2ca6368":"code","d8aa1ca4":"code","c6b73a44":"code","349420e3":"code","9bf9125b":"code","515bb30e":"code","7dcb755d":"code","11640f35":"code","5b02fb65":"markdown","51274e74":"markdown","b12d935e":"markdown","5c4d9ab3":"markdown","c805dc73":"markdown","4cc6307e":"markdown","26986c50":"markdown","55fa46dc":"markdown","9363b166":"markdown","423062c5":"markdown","7f793d56":"markdown","7a2ff169":"markdown","760260a2":"markdown","771485ee":"markdown","3713df93":"markdown","daa055fc":"markdown","164239a8":"markdown","8ec5439f":"markdown","3d3c5ed9":"markdown","34e681ec":"markdown","5c56b3e0":"markdown","85bf361a":"markdown","19d49555":"markdown","b14a7fe0":"markdown","c2e4471f":"markdown","a4788281":"markdown"},"source":{"ba6751f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91c1e1ca":"!pip install scikit-learn ","23b53c43":"path_name = '\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv'","3935ee5c":"import pandas as pd\nweather_df = pd.read_csv(path_name)","7d43fb87":"weather_df","1e46020a":"weather_df.info()","1962552e":"weather_df.dropna(subset = ['RainToday' ,'RainTomorrow'] ,inplace = True)","69037f96":"!pip install plotly matplotlib seaborn","c193919e":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 12\nmatplotlib.rcParams['figure.figsize'] = (10 , 6)","890f914d":"px.histogram(weather_df , x = 'Location' , title ='Location vs. Rainy Days' ,color ='RainToday')","39646c87":"weather_df['Humidity3pm'].isna().sum()","941a2e47":"px.histogram(weather_df , x = 'Humidity3pm' , title ='Humidity at 3pm vs. Rain Tomorrow' ,color ='RainTomorrow')","31908f70":"px.histogram(weather_df , x = 'RainTomorrow' , \n             title = 'Rain Tomorrow vs Rain Today',\n            color = 'RainToday')","b648e63e":"px.scatter(weather_df.sample(3000), \n           title='Temp (3 pm) vs. Humidity (3 pm)',\n           x='Temp3pm',\n           y='Humidity3pm',\n           color='RainTomorrow')","27310145":"px.scatter(weather_df.sample(3000), \n           title='Min Temp. vs Max Temp.',\n           x='MinTemp', \n           y='MaxTemp', \n           color='RainTomorrow')","694c777a":"weather_df","7ef27c77":"Year = pd.to_datetime(weather_df.Date).dt.year","2bab5cc4":"plt.title('No of rows per year')\nsns.countplot(x= Year);","53509c7f":"train_df = weather_df[Year < 2015]\nval_df = weather_df[Year == 2015]\ntest_df = weather_df[Year > 2015]\n\nprint('train_df.shape :', train_df.shape)\nprint('val_df.shape :', val_df.shape)\nprint('test_df.shape :', test_df.shape)","47027c93":"train_df","98631c2d":"val_df","1ed2c31e":"test_df","a4d4a0e0":"input_col = list(weather_df.columns)[1:-1]\ntar_col = 'RainTomorrow'","f5d3ba05":"print(input_col)","b9fc771c":"print(tar_col)","07c53d73":"train_input = train_df[input_col].copy()\ntrain_tar = train_df[tar_col].copy()","093a00d7":"train_input","bb9c18d1":"train_tar","7cd5c48b":"val_input = val_df[input_col].copy()\nval_tar = val_df[tar_col].copy()","b310484a":"test_input = test_df[input_col].copy()\ntest_tar = test_df[tar_col].copy()","746cf590":"!pip install numpy","627df503":"import numpy as np","a6d31945":"numeric_cols = train_input.select_dtypes(include = np.number).columns.tolist()[:-1]\ncategorical_cols = train_input.select_dtypes('object').columns.tolist()","e46b7ee0":"train_input[categorical_cols].nunique()","8676cdf8":"list(train_input[numeric_cols])","7a3f473f":"from sklearn.impute import SimpleImputer","515c93eb":"imputer = SimpleImputer(strategy = 'mean')","79f6e8a6":"imputer.fit(weather_df[numeric_cols])","4eef24ca":"list(imputer.statistics_)","c3122eb7":"train_input[numeric_cols] = imputer.transform(train_input[numeric_cols])\nval_input[numeric_cols] = imputer.transform(val_input[numeric_cols])\ntest_input[numeric_cols] = imputer.transform(test_input[numeric_cols])","330a6a36":"train_input[numeric_cols].describe()","7df26e73":"weather_df[categorical_cols].nunique()","8588858c":"from sklearn.preprocessing import OneHotEncoder","33904f4e":"?OneHotEncoder","983c1ff6":"encoder = OneHotEncoder(sparse=False, handle_unknown ='ignore')","8d4b70c4":"weather_df2 = weather_df[categorical_cols].fillna('Unknown')","1759e0c7":"encoder.fit(weather_df2)","547d76e7":"encoder.categories_","bf227c6e":"encoded_cols = list(encoder.get_feature_names(categorical_cols))\nprint(encoded_cols)","6798408f":"train_input[encoded_cols] = encoder.transform((train_input[categorical_cols]).fillna('Unknown'))\nval_input[encoded_cols] = encoder.transform((val_input[categorical_cols]).fillna('Unknown'))\ntest_input[encoded_cols] = encoder.transform((test_input[categorical_cols]).fillna('Unknown'))","3e365cad":"test_input","5be44576":"from sklearn.linear_model import LogisticRegression","badf8ef2":"model = LogisticRegression(solver = 'liblinear')","19846028":"model.fit(train_input[numeric_cols + encoded_cols] , train_tar)","6b1e21df":"print(model.coef_.tolist())","97c55b4d":"print(model.intercept_)","e2ca6368":"X_train = train_input[numeric_cols + encoded_cols]\nX_val = val_input[numeric_cols + encoded_cols]\nX_test = test_input[numeric_cols + encoded_cols]","d8aa1ca4":"train_preds = model.predict(X_train)","c6b73a44":"train_preds","349420e3":"train_tar","9bf9125b":"train_probs = model.predict_proba(X_train)\ntrain_probs","515bb30e":"model.classes_","7dcb755d":"from sklearn.metrics import accuracy_score","11640f35":"accuracy_score(train_tar, train_preds)","5b02fb65":"Before train our machine learning model we will be doing some analysis of the columns and visualize them and see how they are related to our target.","51274e74":"The dataset contain numeric , categorical and object columns. Our objective is to create a model to predict the data in RainTomorrow column.","b12d935e":"We can output a probabilistic prediction using `predict_proba`.","5c4d9ab3":"# Traning of a Logistic Regression model with scikit-learn to predict weather\n\n### steps \n* Exploratory data analysis and visualization\n* Spiling the dataset into traning,validation and test sets\n* Impution of mission values \n* Encoding categorical data as one-hot vectors\n* Traning a logistic regression model \n* Evaluting a model using a validation set and test set","c805dc73":"### Input and Target column.","4cc6307e":"It might be helpful to remove the raws with missing values in RainToday and RainTomorrow columns to make our analysis and modeling simplier as one of them will be our target and other is likely to be closely related to the target variable.","26986c50":"We can test the accuracy of the model's predictions by computing the percentage of matching values in `train_preds` and `train_targets`.\n\nThis can be done using the `accuracy_score` function from `sklearn.metrics`.","55fa46dc":"We'll pick last two years for test set and an year before it for validation set.","9363b166":"### Encoding Categorical Data","423062c5":"Humidity at 3 pm doesn't have any clear relation with Rain Tomorrow. ","7f793d56":"### Objective\n\nThe used dataset contains about ten years of daily weather observation from different  Australian Weather Station. \n\nWe train a model to create a system that can use today's weather data for a given location predict whether it will rain at that location tomorrow or not. ","7a2ff169":"### Traing , Validation and Test set","760260a2":"The encoder has created a list of categories for each of the categorical columns in the dataset. \n\nWe can generate column names for each individual category using `get_feature_names`.","771485ee":"## Training the logistic Regression Model","3713df93":"#### Let's install scikit-learn library","daa055fc":"## Making Predictions and evaluating the model","164239a8":"### Imputing  Missing numeric data\n","8ec5439f":"## Exploratory Data analysis and visualization ","3d3c5ed9":"### Let's look into the missing values","34e681ec":"The model accuracy is shown about 84%.","5c56b3e0":"There are various techniques in machine learning for imputation of missing value . Here we will use one. We will replace the missing data with the average value of the column using SimpleImputer class.","85bf361a":"#### Let's install the  packages \/ libraries","19d49555":"To train a logistic regression model, we can use the LogisticRegression class from Scikit-learn.","b14a7fe0":"Machine learning models can only be trained with numeric data, so we need to convert categorical data into numeric . Here we will use OneHotEncoding method.One hot encoding involves adding a new binary (0\/1) column for each unique category of a categorical column.","c2e4471f":"The numbers above indicate the probabilities for the target classes \"No\" and \"Yes\".","a4788281":"As Date column is given ,so we will be separating traning , validation and test sets with time. So that the model is trained on data from the past and evaluated on data from the future. \n\nFor the current dataset ,we can use Date column to create a Year column in the dataset."}}