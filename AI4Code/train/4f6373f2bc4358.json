{"cell_type":{"a6acee40":"code","bd9545a2":"code","62cf0e42":"code","14665831":"code","b9bbdf97":"code","62032789":"code","4a82e6f6":"code","2a072e09":"code","c2b5f8e1":"code","7fdf2721":"code","c5a4fb8b":"code","f4d3a4b2":"code","3cb18df2":"code","23a467d6":"code","74c322e9":"code","22a34a31":"code","60135e8a":"code","1f604bbd":"code","881c55e3":"code","00c95d2d":"code","64d100f7":"code","ed8f9b13":"code","3b3172f6":"code","c6efd9b2":"code","7a5bab77":"code","b861e3d1":"code","4e355f79":"code","9ce3ad24":"code","43605261":"code","53d92c01":"code","4624ce89":"code","6e8c1f8f":"code","c1acdb9b":"code","9d69ab01":"code","bc4b8761":"code","0ac62537":"code","353e2f6e":"code","8b52b6ac":"code","60408cc2":"code","93f602f3":"code","6f363311":"code","e1034194":"code","312c9882":"code","4a33c78c":"code","0cbf543f":"code","e917b6d9":"code","6b6ed9f0":"code","46ce98e4":"code","0f0263d1":"code","0ed2c965":"markdown","f52865c2":"markdown","e03f2f82":"markdown","afb54d8d":"markdown","0b458180":"markdown","062e902e":"markdown","3001cc2b":"markdown","642662bf":"markdown","dbea55c9":"markdown","3facbb51":"markdown","ecd4a65c":"markdown","c86acc9a":"markdown","b1ab1405":"markdown","808aacb8":"markdown","0bf368c5":"markdown","beb74fcf":"markdown","c74a6fb6":"markdown","30752457":"markdown","8f3c4543":"markdown","61f7f805":"markdown","a3d276da":"markdown","8c186a15":"markdown","324441f4":"markdown","9c659df1":"markdown","e8dca249":"markdown","20dc26f2":"markdown","6e7415ff":"markdown","69557c12":"markdown","56cb257f":"markdown","38498886":"markdown","ce4026aa":"markdown","833c0b32":"markdown","d175520d":"markdown","30b86f5d":"markdown","810ad930":"markdown","b56f0a8c":"markdown","edf90cde":"markdown","904c735b":"markdown","a969438a":"markdown","eb42b137":"markdown","e85d7b20":"markdown","06538210":"markdown","663515aa":"markdown","178098a6":"markdown","cc579ba3":"markdown","1ad47dfa":"markdown"},"source":{"a6acee40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport string # special operations on strings\nimport spacy # language models\n\nfrom matplotlib.pyplot import imread\nfrom matplotlib import pyplot as plt\nfrom wordcloud import WordCloud\n%matplotlib inline","bd9545a2":"!python -m spacy download en_core_web_md","62cf0e42":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","14665831":"filename = '\/kaggle\/input\/cthulhu\/The-Call-of-Cthulhu.txt'\nwith open(filename) as f:\n    book = f.readlines()\n# you may also want to remove whitespace characters like `\\n` at the end of each line\nbook[0:10]","b9bbdf97":"len(book)","62032789":"book = [x.strip() for x in book] # removes line breaks\nbook = [x for x in book if x] # removes empty strings, because they are considered in Python as False\nbook[0:10]","4a82e6f6":"# we see that we don't need first four lines\ncore_book = book[4:]\ncore_book[0:10]","2a072e09":"# Joining the list into one string\/text\ntext = ' '.join(core_book)\nlen(text)","c2b5f8e1":"text","7fdf2721":"no_punc_text = text.translate(str.maketrans('', '', string.punctuation))\nno_punc_text[0:550]","c5a4fb8b":"len(text) - len(no_punc_text)","f4d3a4b2":"from nltk.corpus import stopwords\nprint(stopwords.words('english')[0:25])","3cb18df2":"from nltk.tokenize import word_tokenize\ntext_tokens = word_tokenize(no_punc_text)\nprint(text_tokens[0:50])","23a467d6":"len(text_tokens)","74c322e9":"my_stop_words = stopwords.words('english')\nmy_stop_words.append('the')\nno_stop_tokens = [word for word in text_tokens if not word in my_stop_words]\nprint(no_stop_tokens[0:40])","22a34a31":"len(no_stop_tokens)","60135e8a":"lower_words = [x.lower() for x in no_stop_tokens]\nprint(lower_words[0:25])","1f604bbd":"from nltk.stem import PorterStemmer\nps = PorterStemmer()\nstemmed_tokens = [ps.stem(word) for word in lower_words]\nprint(stemmed_tokens[0:40])","881c55e3":"# NLP english language model of spacy library\nnlp = spacy.load('en')","00c95d2d":"# convert text into words with language properties, lemmas being one of them, but mostly POS, which will follow later\ndoc = nlp(' '.join(no_stop_tokens))\nprint(doc[0:40])","64d100f7":"lemmas = [token.lemma_ for token in doc]\nprint(lemmas[0:25])","ed8f9b13":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(lemmas)\nX","3b3172f6":"len(vectorizer.get_feature_names())","c6efd9b2":"print(vectorizer.get_feature_names()[40:90])","7a5bab77":"print(X.toarray())","b861e3d1":"sum_words = X.sum(axis=0)\nwords_freq = [(word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\nwords_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\nwords_freq[0:25]","4e355f79":"# Look this up yourself and fill in the code :) This was not part of theory, but it's a bonus task for special reasearch","9ce3ad24":"from sklearn.feature_extraction.text import","43605261":"one_block = book[94]\ndoc_block = nlp(one_block)\nspacy.displacy.render(doc_block, style='ent', jupyter=True)","53d92c01":"for token in doc_block[0:20]:\n    print(token, token.pos_)","4624ce89":"nouns_verbs = [token.text for token in doc if token.pos_ in ('NOUN', 'VERB')]\nprint(nouns_verbs[5:25])","6e8c1f8f":"cv = CountVectorizer()\n\nX = vectorizer.fit_transform(nouns_verbs)\nsum_words = X.sum(axis=0)\nwords_freq = [(word, sum_words[0, idx]) for word, idx in vectorizer.vocabulary_.items()]\nwords_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\nwf_df = pd.DataFrame(words_freq)\nwf_df.columns = ['word', 'count']\nwf_df[0:10]","c1acdb9b":"afinn = pd.read_csv('\/kaggle\/input\/bing-nrc-afinn-lexicons\/Afinn.csv', sep=',', encoding='latin-1')\nafinn.shape","9d69ab01":"afinn.head(10)","bc4b8761":"from itertools import islice\n\ndef take(n, iterable):\n    \"Return first n items of the iterable as a list\"\n    return list(islice(iterable, n))","0ac62537":"affinity_scores = afinn.set_index('word')['value'].to_dict()\ntake(20, affinity_scores.items())","353e2f6e":"from nltk import tokenize\nsentences = tokenize.sent_tokenize(\" \".join(core_book))\nsentences[5:15]","8b52b6ac":"sent_df = pd.DataFrame(sentences, columns=['sentence'])\nsent_df","60408cc2":"nlp = spacy.load('en')\nsentiment_lexicon = affinity_scores\n\ndef calculate_sentiment(text: str = None) -> float:\n    sent_score = 0\n    if text:\n        sentence = nlp(text)\n        for word in sentence:\n            sent_score += sentiment_lexicon.get(word.lemma_, 0)\n    return sent_score","93f602f3":"# test that it works\ncalculate_sentiment(text = 'Amazing boys, very good!')","6f363311":"sent_df['sentiment_value'] = sent_df['sentence'].apply(calculate_sentiment)","e1034194":"# how many words are in the sentence?\nsent_df['word_count'] = sent_df['sentence'].str.split().apply(len)\nsent_df['word_count'].head(10)","312c9882":"sent_df.sort_values(by='sentiment_value').head(10)","4a33c78c":"sent_df['sentence'].loc[224]","0cbf543f":"# Sentiment score of the whole book\nsent_df['sentiment_value'].sum()","e917b6d9":"wf_df[0:10].plot.bar(x='word', figsize=(12,8), title='Top verbs and nouns')","6b6ed9f0":"wordcloud = WordCloud(background_color ='black', \n                       min_font_size = 10).generate(text)\nplt.figure(figsize = (12, 10), facecolor = None) \nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","46ce98e4":"sent_df.plot.scatter(x='word_count', y='sentiment_value', figsize=(12,8), title='Sentence sentiment value to sentence word count')","0f0263d1":"from scipy.stats import pearsonr\ncorr, _ = pearsonr(sent_df['word_count'], sent_df['sentiment_value'])\ncorr","0ed2c965":"## Counting tokens again","f52865c2":"## Removing redundant parts of the text from the book","e03f2f82":"## Part Of Speech Tagging","afb54d8d":"## Barchart for top 10 nouns + verbs","0b458180":"# 4. Sentiment analysis","062e902e":"## Counting words\nConvert a collection of text documents to a matrix of token counts. Lemmas being more precise, let's use those as a token for counting.","3001cc2b":"# 6. Summary","642662bf":"In this session, we will continue our AI Trainee Journey with NLP in practice.\n\nMore specifically, we will be working with a (freely available digital) book or novel, written by J.P.Lovecraft, called Call of Cthulhu. The book can be downloaded from [manybooks.net](https:\/\/manybooks.net\/). \n\nFor your own quest\/practice, you should download your own book, create a copy of this notebook and compare your results with results from this analysis.","dbea55c9":"Your task in this quest is to use the book you downloaded from manybooks.net and \n\n**1. Do a sentiment analysis on the book to find 10 most positive sentences (with score) and 10 most negative sentences (with score). Calculate the final sentiment score for the whole book and print it somewhere.**\n\nand\/or\n\n**2. Visualize the most frequent nons + verbs (or all words from original text) in a wordloud and plot a bar chart with number of top 10 words. Stemmed or lemmatized or without any modification. Change the background color to match your style**\n\nBONUS\n\n**3. Do a TF-IDF research and calculate these frequencies**","3facbb51":"- Good reading for Sentiment analysis about fine grained 5 points model can be found here: https:\/\/towardsdatascience.com\/fine-grained-sentiment-analysis-in-python-part-1-2697bb111ed4\n\n- A simple binary classification of sentiment has a good example with explanations here: https:\/\/realpython.com\/sentiment-analysis-python\/\n","ecd4a65c":"## Term Frequency - Inverse Document Frequency\n\nterm frequency\u2013inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. The tf\u2013idf value increases proportionally to the number of times a word appears in the document and is offset by the number of documents in the corpus that contain the word, which helps to adjust for the fact that some words appear more frequently in general. tf\u2013idf is one of the most popular term-weighting schemes today. A survey conducted in 2015 showed that 83% of text-based recommender systems in digital libraries use tf\u2013idf.[2] (Wikipedia)","c86acc9a":"# 1. Reading in the input file and inspecting it","b1ab1405":"In corpus linguistics, part-of-speech tagging (POS tagging or PoS tagging or POST), also called grammatical tagging is the process of marking up a word in a text (corpus) as corresponding to a particular part of speech,[1] based on both its definition and its context. A simplified form of this is commonly taught to school-age children, in the identification of words as nouns, verbs, adjectives, adverbs, etc. (Wikipedia)","808aacb8":"Additional module is needed that is not part of default Kaggle environment. Therefore we need to download it and install it first. It's a spacy library english language model.","0bf368c5":"Luckily, a book is usually already a clean document that went over spellchecking, editing, grammar overview, etc. So the words and sentences we get are usually without errors and readable. Unlike answers in some questionnaire, where people can write anything and make many mistakes even if they don't want to. But there are still some redundant parts of the text that we don't need in our analysis, so let's get to it.","beb74fcf":"Because python without libraries is like a snake without legs.","c74a6fb6":"# 3. Feature engineering","30752457":"## Stemming\n\nIn linguistic morphology and information retrieval, stemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form\u2014generally a written word form.","8f3c4543":"This concludes our NLP practical session with the most frequent tasks to be done in text analytics. Very often we want to know what is going on in a text without reading it all, especially when we have a lot of text with some similar features. \n\nThere are always some cleaning, preprocessing, feature engineering and visualisation steps in NLP analysis, no matter what the input dataset is.\n\nSentiment analysis, wordclouds, scatter plots are then just one way of how to look into the dataset. Other very popular technique we didn't look at here, is topic modeling or topic classification in texts. https:\/\/www.kaggle.com\/arthurtok\/spooky-nlp-and-topic-modelling-tutorial","61f7f805":"## Wordcloud\n\nWord Clouds are visual representations of words that give greater prominence to words that appear more frequently.","a3d276da":"# 5. Visualizing results","8c186a15":"There are many kinds of POS words. Exact list can be found at [spacy documentation](https:\/\/spacy.io\/api\/annotation#pos-universal). Those that we will look at are quite standard and basic.","324441f4":"Before fitting a machine learning or statistical model, we always have to clean the data. No models create meaningful results with messy data. is the process of detecting and correcting (or removing) corrupt or inaccurate records from a record set, table, or database and refers to identifying incomplete, incorrect, inaccurate or irrelevant parts of the data and then replacing, modifying, or deleting the dirty or coarse data.","9c659df1":"## Custom function\nSometimes there is no predefined function that does everything that we want it to. Therefore, we define our own function that is specific for our use case. In this case, we want to score each word in a sentence in lemmatised form, but calculate the score for the whole original sentence.","e8dca249":"## Punctuation\nIt really doesn't help us to have punctuation in inspecting words and their meaning, so let's get rid of it too.","20dc26f2":"## Empty lines\n\nWe don't need empty lines or empty string in our text as they don't contain any information. So it's easiest to remove them in the beginning.","6e7415ff":"# 8. Reading materials","69557c12":"## Lemmatisation\nIn computational linguistics, lemmatisation is the algorithmic process of determining the lemma of a word based on its intended meaning. Unlike stemming, lemmatisation depends on correctly identifying the intended part of speech and meaning of a word in a sentence, as well as within the larger context surrounding that sentence, such as neighboring sentences or even an entire document. As a result, developing efficient lemmatisation algorithms is an open area of research. [2][3][4] (Wikipedia)","56cb257f":"Sentiment analysis refers to the use of natural language processing, text analysis, computational linguistics, and biometrics to systematically identify, extract, quantify, and study affective states and subjective information. In it's simplest form, it tries to identify, whether a sentence is positive or negative.","38498886":"In the emotions lexicon, we have lemmatized for, but we want to show original sentence and original form of words in the results? How to do this?\n\nIn following steps:\n1. put a unique id on each sentence (row)\n2. make a column for sentence\n3. calculate score for each sentence (row) by converting a word to lemmatized form only for the comparison and save it to new column \n4. order sentences by score to show top 10 and bottom 10","ce4026aa":"# 2. Cleaning the data","833c0b32":"**Feature engineering** is a process of creating new variables for given dataset with an idea of improving model's prediction accuraccy or better description of dataset.\n\nFeatures can be:\n- numerical (number of words in a sentence)\n- categorical (what kind of sentence is it?)\n- boolean (Is the sentence longer than 50 signs? True\/False)\n- ordinal (is the sentence short, medium or long?)","d175520d":"## Tokenisation\nTokenization is essentially splitting a phrase, sentence, paragraph, or an entire text document into smaller units, such as individual words or terms. Each of these smaller units are called tokens.","30b86f5d":"## Correlation\nIs there a correlation between word count in sentence and sentiment?","810ad930":"# AI Trainee Journey - Practical part in NLP","b56f0a8c":"# Filtering for nouns and verbs only","edf90cde":"# 7. Quest","904c735b":"Q: How many punctuation signs were  removed from your text?","a969438a":"## Stopwords\nStopwords are special case of words that work as a filler and usually don't hold any special meaning. We will be removing them later as we are comparing their occurence in the text with meaningful words. But let's take a look at what stopwords are. ","eb42b137":"## Scatterplot\nA scatter plot is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data. If the points are coded (color\/shape\/size), one additional variable can be displayed. The data are displayed as a collection of points, each having the value of one variable determining the position on the horizontal axis and the value of the other variable determining the position on the vertical axis.","e85d7b20":"## Lowercase\nSomething as simple as lowercasing all letters in all words helps a lot, because first letter in new sentence is uppercase by default and there are a few names of people and things also with uppercase. Lowercasing is standardizing.","06538210":"## Lexicon (rule) based approach","663515aa":"# 0. Reading in the libraries","178098a6":"Because what we need to analyse is text of the book and not the author, name of the book or year of publication. Therefore we will remove the redundant parts from the text for analysis. ","cc579ba3":"A: No, there isn't","1ad47dfa":"After we tokenised the text, we can remove stopwords from it."}}