{"cell_type":{"9b55f39f":"code","72a5343b":"code","0bd51e0f":"code","742a8698":"code","51fc3e9a":"code","f9532885":"code","b07e153c":"code","f319f260":"code","4f96fe2c":"code","9d32077b":"code","36585f6c":"code","1a3e00f7":"code","6115bbd5":"code","8bd47f74":"code","f75be1d2":"code","36c040a3":"code","3a9793f7":"code","f0beca45":"code","c4698a51":"code","00929015":"code","91286276":"code","2135e5fe":"code","98624ffe":"code","ec418b91":"code","03376520":"code","ae850773":"code","3c4c4bf6":"code","7af4fbfe":"code","e0a0b3d9":"code","63059bea":"code","0c396cba":"code","dc47b551":"markdown","d878ab05":"markdown","faf8c2ce":"markdown","c0c3f46a":"markdown","879ed65a":"markdown","e0497395":"markdown","5ea77c77":"markdown","c70cb7c9":"markdown","cacbca0f":"markdown","fceeb20a":"markdown","a23e9134":"markdown"},"source":{"9b55f39f":"import numpy as np\nimport pandas as pd\nimport random\nfrom sklearn.preprocessing import LabelEncoder\nfrom lightgbm import LGBMClassifier\nimport lightgbm\nimport matplotlib.pyplot as plt \nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nimport warnings\nwarnings.filterwarnings('ignore')","72a5343b":"woman538 = pd.read_csv('..\/input\/ncaa-women-538-team-ratings\/538ratingsWomen.csv').drop(['TeamName'],axis = 1)\nwoman538.head(3)","0bd51e0f":"WNCAATourneyDetailedResults = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneyDetailedResults.csv')\n#WNCAATourneyCompactResults = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneyCompactResults.csv')\n#TourneyResults = WNCAATourneyDetailedResults.merge(WNCAATourneyCompactResults, on= WNCAATourneyCompactResults.columns.to_list(), how='right')\nTourneyResults = WNCAATourneyDetailedResults\nTourneyResults['TypeCompetition'] = 'Tourney'\n\nWRegularSeasonDetailedResults = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WRegularSeasonDetailedResults.csv')\n#WRegularSeasonCompactResults = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WRegularSeasonCompactResults.csv')\n#SeasonResults = WRegularSeasonDetailedResults.merge(WRegularSeasonCompactResults, on= WRegularSeasonCompactResults.columns.to_list(), how='right')\nSeasonResults = WRegularSeasonDetailedResults\nSeasonResults['TypeCompetition'] = 'Season'\n\nX = TourneyResults.merge(SeasonResults, on= SeasonResults.columns.to_list(), how='outer')\nX.head()","742a8698":"A = X[X['WLoc']=='A'].rename(columns={\n    'WTeamID': 'BTeamID',\n    'WScore': 'BScore',\n    'LTeamID': 'ATeamID',\n    'LScore': 'AScore',\n}).drop('WLoc', axis=1)\n\nH = X[X['WLoc']=='H'].rename(columns={\n    'WTeamID': 'ATeamID',\n    'WScore': 'AScore',\n    'LTeamID': 'BTeamID',\n    'LScore': 'BScore',\n}).drop('WLoc', axis=1)\n\nN = X[X['WLoc']=='N'].rename(columns={\n    'WTeamID': 'ATeamID',\n    'WScore': 'AScore',\n    'LTeamID': 'BTeamID',\n    'LScore': 'BScore',\n})\n\nimport random\nfor index in N.index:\n    if random.randint(0, 1) == 1:\n        N.at[index, 'WLoc'] = N.at[index, 'ATeamID']\n        N.at[index, 'ATeamID'] = N.at[index, 'BTeamID']\n        N.at[index, 'BTeamID'] = N.at[index, 'WLoc']\n        \n        N.at[index, 'WLoc'] = N.at[index, 'AScore']\n        N.at[index, 'AScore'] = N.at[index, 'BScore']\n        N.at[index, 'BScore'] = N.at[index, 'WLoc']\n\nN = N.drop('WLoc', axis=1)  \n\nX = H.append(A, ignore_index=False,sort=False)\nX = X.append(N, ignore_index=False,sort=False)\nX.head()","51fc3e9a":"X['FGM'] = X['WFGM'] - X['LFGM']\nX['FGA'] = X['WFGA'] - X['LFGA']\nX['FGM3'] = X['WFGM3'] - X['LFGM3']\nX['FGA3'] = X['WFGA3'] - X['LFGA3']\nX['FTM'] = X['WFTM'] - X['LFTM']\nX['FTA'] = X['WFTA'] - X['LFTA']\nX['OR'] = X['WOR'] - X['LOR']\nX['DR'] = X['WDR'] - X['LDR']\nX['Ast'] = X['WAst'] - X['LAst']\nX['TO'] = X['WTO'] - X['LTO']\nX['Stl'] = X['WStl'] - X['LStl']\nX['Blk'] = X['WBlk'] - X['LBlk']\nX['PF'] = X['WPF'] - X['LPF']\n\nX = X.drop(['WFGM','WFGA','WFGM3','WFGA3','WFTM','WFTA','WOR','WDR','WAst','WTO','WStl','WBlk','WPF',\n 'LFGM','LFGA','LFGM3','LFGA3','LFTM','LFTA','LOR','LDR','LAst','LTO','LStl','LBlk','LPF'],axis = 1)\nX.head()","f9532885":"MeanStatA = X.groupby(['Season', 'ATeamID']).mean().reset_index().drop(['DayNum','BTeamID'],axis = 1).rename(columns={\n    'AScore': 'MeanAScore_Home',\n    'BScore': 'MeanBScore_Home',\n    'NumOT':'NumOT_Home',\n    'FGM':'FGM_Home',\n    'FGA':'FGA_Home',\n    'FGM3':'FGM3_Home',\n    'FGA3':'FGA3_Home',\n    'FTM':'FTM_Home',\n    'FTA':'FTA_Home',\n    'OR':'OR_Home',\n    'DR':'DR_Home',\n    'Ast':'Ast_Home',\n    'TO':'TO_Home',\n    'Stl':'Stl_Home',\n    'Blk':'Blk_Home',\n    'PF':'PF_Home'})\nMeanStatA.head()","b07e153c":"MeanStatB = X.groupby(['Season', 'BTeamID']).mean().reset_index().drop(['DayNum','ATeamID'],axis = 1).rename(columns={\n    'AScore': 'MeanAScore_Away',\n    'BScore': 'MeanBScore_Away',\n    'NumOT':'NumOT_Away',\n    'FGM':'FGM_Away',\n    'FGA':'FGA_Away',\n    'FGM3':'FGM3_Away',\n    'FGA3':'FGA3_Away',\n    'FTM':'FTM_Away',\n    'FTA':'FTA_Away',\n    'OR':'OR_Away',\n    'DR':'DR_Away',\n    'Ast':'Ast_Away',\n    'TO':'TO_Away',\n    'Stl':'Stl_Away',\n    'Blk':'Blk_Away',\n    'PF':'PF_Away'})\nMeanStatB.head()","f319f260":"X = X.drop(['NumOT','FGM','FGA','FGM3','FGA3','FTM','FTA','OR','DR','Ast','TO','Stl','Blk','PF'],axis = 1)\nX.head()","4f96fe2c":"X = X.merge(MeanStatA, how='left', left_on=['Season','ATeamID'], right_on=['Season','ATeamID'])\nX = X.merge(MeanStatB, how='left', left_on=['Season','BTeamID'], right_on=['Season','BTeamID'])\nX.head()","9d32077b":"X = X.drop(['DayNum'],axis = 1)\nX.head()","36585f6c":"X = X.merge(woman538, how='left', left_on=['Season','ATeamID'], right_on=['Season','TeamID']).drop(['TeamID'], axis=1)\nX = X.merge(woman538, how='left', left_on=['Season','BTeamID'], right_on=['Season','TeamID']).drop(['TeamID'], axis=1)\nX.head()","1a3e00f7":"X['538rating'] = X['538rating_x'] - X['538rating_y']\nX = X.drop(['538rating_x', '538rating_y'],axis = 1)\nX.head()","6115bbd5":"#ADD SEED\nSeeds = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneySeeds.csv')\nX = X.merge(Seeds, how='left', left_on=['Season', 'ATeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'ASeed'})\nX = X.merge(Seeds, how='left', left_on=['Season', 'BTeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'BSeed'})\n#SEED TO FLOAT\nX['ASeed'] = X['ASeed'].str.replace(r'[^0-9]', '').astype('float')\nX['BSeed'] = X['BSeed'].str.replace(r'[^0-9]', '').astype('float')\n\nX['Seed'] = X['ASeed'] - X['BSeed']\nX = X.drop(['ASeed', 'BSeed'],axis = 1)\nX.head()\n","8bd47f74":"X = X.dropna(subset=['Seed'])\n#X = X.dropna(subset=['538rating'])","f75be1d2":"X['HomeWin'] = (X['AScore']-X['BScore'] > 0).astype(int)\nX.head()","36c040a3":"test = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WSampleSubmissionStage2.csv')\nsubmission = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WSampleSubmissionStage2.csv')\n\ntest['Season'] = test['ID'].apply(lambda x: int(x.split('_')[0]))\ntest['ATeamID'] = test['ID'].apply(lambda x: int(x.split('_')[1]))\ntest['BTeamID'] = test['ID'].apply(lambda x: int(x.split('_')[2]))\ntest = test.drop(['Pred','ID'], axis=1)\ntest['TypeCompetition'] = 'Tourney'\n\ntest.head()","3a9793f7":"test = test.merge(MeanStatA, how='left', left_on=['Season','ATeamID'], right_on=['Season','ATeamID'])\ntest = test.merge(MeanStatB, how='left', left_on=['Season','BTeamID'], right_on=['Season','BTeamID'])\ntest.head()","f0beca45":"test = test.merge(woman538, how='left', left_on=['Season','ATeamID'], right_on=['Season','TeamID']).drop(['TeamID'], axis=1)\ntest = test.merge(woman538, how='left', left_on=['Season','BTeamID'], right_on=['Season','TeamID']).drop(['TeamID'], axis=1)\n\ntest['538rating'] = test['538rating_x'] - test['538rating_y']\ntest = test.drop(['538rating_x', '538rating_y'],axis = 1)\ntest.head()","c4698a51":"#ADD SEED\ntest = test.merge(Seeds, how='left', left_on=['Season', 'ATeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'ASeed'})\ntest = test.merge(Seeds, how='left', left_on=['Season', 'BTeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'BSeed'})\n#SEED TO FLOAT\ntest['ASeed'] = test['ASeed'].str.replace(r'[^0-9]', '').astype('float')\ntest['BSeed'] = test['BSeed'].str.replace(r'[^0-9]', '').astype('float')\ntest['Seed'] = test['ASeed'] - test['BSeed']\ntest = test.drop(['ASeed', 'BSeed'],axis = 1)\ntest.head()","00929015":"temp = X.append(test, ignore_index=False,sort=False)\ntemp = pd.get_dummies(temp,dtype=bool)\nX = temp[:len(X)]\ntest = temp[len(X):]\ntemp = pd.DataFrame\ntest = test.drop(['AScore','BScore','HomeWin'],axis = 1)\ntest.head()","91286276":"lgbm_parameters= {\n    'cat_feature': [0,1,2],\n    'n_estimators': 20000,\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n}","2135e5fe":"test_pred = np.zeros(len(test))\ntest_pred = []\n\nkf = KFold(n_splits=10, shuffle=True)\n\nfor year in test['Season'].unique():\n    \n    #X_year = X[(X['Season'] >= year-3)&(X['Season'] <= year+3)]\n    X_year = X[((X['TypeCompetition_Season'] == True)&(X['Season'] == year))|(X['Season'] != year)]\n    \n    y_year = X_year['HomeWin']\n    X_year = X_year.drop(['AScore','BScore','HomeWin'], axis=1)\n    test_year = test[test['Season'] == year]\n \n    lgbm_val_pred = np.zeros(len(y_year))\n    lgbm_test_pred = np.zeros(len(test_year))\n    logloss = []\n    \n    for trn_idx, val_idx in kf.split(X_year,y_year):\n        x_train_idx = X_year.iloc[trn_idx]\n        y_train_idx = y_year.iloc[trn_idx]\n        x_valid_idx = X_year.iloc[val_idx]\n        y_valid_idx = y_year.iloc[val_idx]\n\n        lgbm_model = LGBMClassifier(**lgbm_parameters)\n        lgbm_model.fit(x_train_idx, y_train_idx, eval_set = ((x_valid_idx,y_valid_idx)),verbose = False, early_stopping_rounds = 100,categorical_feature=[0,1,2])\n        lgbm_test_pred += lgbm_model.predict_proba(test_year)[:,1]\/10\n        logloss.append(log_loss(y_valid_idx, lgbm_model.predict_proba(x_valid_idx)[:,1])) \n        \n    test_pred += lgbm_test_pred.tolist()\n    \n    print('Year_Predict:',year,'Log_Loss:',np.mean(logloss))","98624ffe":"submission.Pred = test_pred   \nsubmission.to_csv('submission.csv', index=False)","ec418b91":"plt.rcParams[\"figure.figsize\"] = (4, 8)\nlightgbm.plot_importance(lgbm_model,height=.9)","03376520":"Teams = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WTeams.csv')\nSeeds = Seeds.merge(Teams,how = 'left',left_on = ['TeamID'],right_on = ['TeamID'])\nSlots = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneySlots.csv')\nTeams = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WTeams.csv')\ntest['Pred'] = test_pred \ntest = test[['ATeamID','BTeamID','Pred']]\ntest = test.merge(Seeds[Seeds['Season']==2021],how= 'left',left_on = 'ATeamID',right_on = 'TeamID').drop(['TeamID','Season'], axis=1)\ntest = test.merge(Seeds[Seeds['Season']==2021],how= 'left',left_on = 'BTeamID',right_on = 'TeamID').drop(['TeamID'], axis=1).rename(columns={'Seed_x': 'ASeed','Seed_y': 'BSeed','TeamName_x':'ATeamName','TeamName_y':'BTeamName'})\ntest = test.drop(['Season','ATeamID','BTeamID'],axis = 1)\n\nFirstRound = Slots[0:32]\nSecondRound = Slots[32:48]\nSweet16 = Slots[48:56]\nEliteEight = Slots[56:60]\nFinalFour = Slots[60:62]\nFinal = Slots[62:]\nFirstRound['ASeed'] = FirstRound['StrongSeed']\nFirstRound['BSeed'] = FirstRound['WeakSeed']\n\ndef merger(Round,test=test):  \n    Round = Round.merge(test,how = 'left',left_on = ['ASeed','BSeed'],right_on = ['ASeed','BSeed'])\n    for index in Round[Round['Pred'].isna() == True].index:\n            Round.at[index, 'Temp'] = Round.at[index, 'ASeed']\n            Round.at[index, 'ASeed'] = Round.at[index, 'BSeed']\n            Round.at[index, 'BSeed'] = Round.at[index, 'Temp']\n            Round = Round.drop(['Temp'],axis = 1)\n            \n    Round = Round.merge(test,how = 'left',left_on = ['ASeed','BSeed'],right_on = ['ASeed','BSeed'])\n    Round = Round.drop(['Pred_x','ATeamName_x','BTeamName_x'],axis = 1).rename(columns={'Pred_y': 'Pred','ATeamName_y':'ATeamName','BTeamName_y':'BTeamName'})\n    Round['Win'] = Round['Pred'] > 0.5\n    Round[['Win_Seed']] = Round[Round['Win'] == True][['ASeed']]\n    Round[['Win_Name']] = Round[Round['Win'] == True][['ATeamName']]\n    Round['Win_Seed'].fillna(value=Round[Round['Win'] == False]['BSeed'], inplace=True)\n    Round['Win_Name'].fillna(value=Round[Round['Win'] == False]['BTeamName'], inplace=True)\n    return Round ","ae850773":"FirstRound = merger(FirstRound)\nFirstRound_Win = FirstRound[['Slot','Win_Seed']]\nfor game in FirstRound.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","3c4c4bf6":"SecondRound = SecondRound.merge(FirstRound_Win,how= 'left', left_on = 'StrongSeed',right_on = 'Slot')\nSecondRound = SecondRound.merge(FirstRound_Win,how= 'left', left_on = 'WeakSeed',right_on = 'Slot').drop(['Slot','Slot_y'],axis=1).rename(columns={'Win_Seed_x': 'ASeed','Win_Seed_y': 'BSeed','Slot_x':'Slot'})\nSecondRound = merger(SecondRound)\nSecondRound_Win = SecondRound[['Slot','Win_Seed']]\nfor game in SecondRound.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","7af4fbfe":"Sweet16 = Sweet16.merge(SecondRound_Win,how= 'left', left_on = 'StrongSeed',right_on = 'Slot')\nSweet16 = Sweet16.merge(SecondRound_Win,how= 'left', left_on = 'WeakSeed',right_on = 'Slot').drop(['Slot','Slot_y'],axis=1).rename(columns={'Win_Seed_x': 'ASeed','Win_Seed_y': 'BSeed','Slot_x':'Slot'})\nSweet16 = merger(Sweet16)\nSweet16_Win = Sweet16[['Slot','Win_Seed']]\nfor game in Sweet16.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","e0a0b3d9":"EliteEight = EliteEight.merge(Sweet16_Win,how= 'left', left_on = 'StrongSeed',right_on = 'Slot')\nEliteEight = EliteEight.merge(Sweet16_Win,how= 'left', left_on = 'WeakSeed',right_on = 'Slot').drop(['Slot','Slot_y'],axis=1).rename(columns={'Win_Seed_x': 'ASeed','Win_Seed_y': 'BSeed','Slot_x':'Slot'})\nEliteEight = merger(EliteEight)\nEliteEight_Win = EliteEight[['Slot','Win_Seed']]\nfor game in EliteEight.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","63059bea":"FinalFour = FinalFour.merge(EliteEight_Win,how= 'left', left_on = 'StrongSeed',right_on = 'Slot')\nFinalFour = FinalFour.merge(EliteEight_Win,how= 'left', left_on = 'WeakSeed',right_on = 'Slot').drop(['Slot','Slot_y'],axis=1).rename(columns={'Win_Seed_x': 'ASeed','Win_Seed_y': 'BSeed','Slot_x':'Slot'})\nFinalFour = merger(FinalFour)\nFinalFour_Win = FinalFour[['Slot','Win_Seed']]\nfor game in FinalFour.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","0c396cba":"Final = Final.merge(FinalFour_Win,how= 'left', left_on = 'StrongSeed',right_on = 'Slot')\nFinal = Final.merge(FinalFour_Win,how= 'left', left_on = 'WeakSeed',right_on = 'Slot').drop(['Slot','Slot_y'],axis=1).rename(columns={'Win_Seed_x': 'ASeed','Win_Seed_y': 'BSeed','Slot_x':'Slot'})\nFinal = merger(Final)\nFinal_Win = Final[['Slot','Win_Seed']]\nfor game in Final.values:\n    print('{:4}({:6.2%}){:^16}{:2}{:^16}({:6.2%}){:>4}'.format(game[3],game[5], game[6],'vs', game[7],1-game[5],game[4]))\n    print('{:>25} {:<} {:<}'.format('WINNER:',game[10],game[9]))\n    print('-'*58)","dc47b551":"# Final Four Predict","d878ab05":"# Second Round Predict","faf8c2ce":"# Final Predict","c0c3f46a":"# Show Result","879ed65a":"# Train","e0497395":"# **test prepare**","5ea77c77":"V.2\n\n-deleted prediction year from train\n\nV.3 \n\n-add visualization\n\n-add 538 rating\n\n-add new FE","c70cb7c9":"# Elite Eight Predict","cacbca0f":"# **X prepare**","fceeb20a":"# Sweet 16 Predict","a23e9134":"# First Round Predict"}}