{"cell_type":{"e64d52e4":"code","c93bd974":"code","ef91f0bc":"code","91ade0a8":"code","47af97aa":"code","71fc39be":"code","06b180b1":"code","a946cb12":"code","17fb4ce2":"code","1ad5b2cb":"code","753b9a71":"code","2b6dbe27":"code","7c1b3edf":"code","b5fca64f":"code","c1349ea3":"code","97a2fca0":"code","44b7e851":"code","6ad0adb7":"code","03af4d94":"code","8a49a322":"code","1ead38a6":"code","6cf414f7":"code","8172e4bf":"code","d86af8ae":"code","7d9bd01e":"code","a2f62fd1":"code","aef44466":"code","cbbc0e50":"code","48cd5a9b":"code","a084a8d8":"code","4a44d122":"code","8e76c002":"code","55b4d302":"code","88be2d7f":"code","18e1041e":"code","b07fe146":"code","8d1e8c74":"code","2b9e60ea":"code","d0410193":"code","310fe3f9":"code","e70ae645":"code","a08d711b":"code","0d9e5e6f":"code","950d7dd7":"code","78330f31":"code","7ef1a00a":"code","44e0eb29":"code","ea5acd12":"code","4a4f40c2":"code","add4c5b6":"code","02d4668b":"code","684bf2a3":"code","238124b4":"code","f2371237":"code","79d318b0":"code","a5736452":"code","8d60a962":"code","f4b267ec":"code","da9d7798":"code","03fed058":"code","1241cd7d":"markdown","34db2e80":"markdown","e5fa72d6":"markdown","b761274b":"markdown","5ea1de38":"markdown","a1f937bc":"markdown","5fd41178":"markdown","3dddd240":"markdown","c672bc2f":"markdown","e9dc83ae":"markdown","deb86373":"markdown","bbfe87a6":"markdown","0f626698":"markdown","0d2f9c39":"markdown","fa0c2e79":"markdown","7f4684d6":"markdown","c0e4948f":"markdown","fa81019e":"markdown"},"source":{"e64d52e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c93bd974":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","ef91f0bc":"sns.get_dataset_names()","91ade0a8":"exercise_data = sns.load_dataset('exercise')","47af97aa":"exercise_data.head()","71fc39be":"#copy the dataset into another variable","06b180b1":"df = exercise_data.copy()","a946cb12":"df.head()","17fb4ce2":"#take a randomly example from dataset\ndf.sample(4)","1ad5b2cb":"df.tail()","753b9a71":"#information about given dataset like null values, data types, no. of example.\ndf.info()","2b6dbe27":"df.describe()","7c1b3edf":"#transpose the row into column\ndf.describe().T","b5fca64f":"df.describe(include=['category'])  ","c1349ea3":"#checking the data types of each column\ndf.dtypes","97a2fca0":"df.columns","44b7e851":"print(df.diet.unique())","6ad0adb7":"print(df.time.unique())","03af4d94":"print(df.kind.unique())","8a49a322":"df.shape","1ead38a6":"df.isnull().sum()","6cf414f7":"df.isna().sum()","8172e4bf":"#checking index value of the datafram using iloc","d86af8ae":"df.iloc[2]","7d9bd01e":"df.iloc[[2,4,6,8]]","a2f62fd1":"#indexing the dataframe using .loc function","aef44466":"df.loc[1:5, ['diet','time']]","cbbc0e50":"set(df['diet'])","48cd5a9b":"df.diet.value_counts()","a084a8d8":"fig = plt.figure(figsize = (10, 5)) \n\ndf.time.value_counts().plot(kind='bar')\n\n#plt.title('Count the values of Month')\n#plt.xlabel('Month')\n#plt.ylabel('Counts')\n\nplt.show()","4a44d122":"df.kind.value_counts().plot(kind='bar', color='green')\n\nplt.text(x = -0.05, y = df.kind.value_counts()[1]+1, s = df.kind.value_counts()[1])\nplt.text(x = 2.01, y = df.kind.value_counts()[2]+3, s = df.kind.value_counts() [2])\nplt.text(x = 0.95, y = df.kind.value_counts()[0]+2, s = df.kind.value_counts() [0])\n\n#plt.title('Count the value of smokers', fontsize=18)\nplt.xlabel('Exercise Type', fontsize=15, fontweight='bold', fontstyle='italic')\nplt.ylabel('Counts', fontsize=15, fontweight='bold', fontstyle='italic')\n\nplt.show()","8e76c002":"sns.barplot(x='id', y='pulse', hue = 'diet', data=df)","55b4d302":"# set width of bar \nbarWidth = 0.20\nbarHeight = 0.20\nfig = plt.subplots(figsize =(10, 5)) \n\nsns.barplot(x='id', y='pulse', hue = 'diet', data=df)\n\nplt.title('Bar Plot', fontsize=18)","88be2d7f":"sns.barplot(x='id', y='pulse', hue='kind', data=df)","18e1041e":"plt.figure(figsize=(10,5))\nplt.pie(df.kind.value_counts(), autopct=\"%.1f%%\", radius=1)\n\n\nplt.show() #print before show","b07fe146":"#now label each color\n\nplt.figure(figsize=(10,5))\nplt.pie(df.kind.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['rest', 'walking', 'running'])\n\n\nplt.show() #print before show","8d1e8c74":"plt.figure(figsize=(10,5))\nplt.pie(df.kind.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['rest', 'walking', 'running'], explode=[0.2,0,0], shadow=True)\n\n\nplt.show() #print before show","2b9e60ea":"#show the labels i.e. presentation of each color\n\nplt.figure(figsize=(10,5))\nplt.pie(df.kind.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['rest', 'walking', 'running'], explode=[0.2,0,0], shadow=True)\n\nplt.legend()\nplt.show() #print before show","d0410193":"#define the radiun with center color.\n\nplt.figure(figsize=(10,5))\nplt.pie(df.kind.value_counts(), autopct=\"%.1f%%\", radius=1, labels=['rest', 'walking', 'running'])\n\ncircle = plt.Circle((0,0), 0.4, color='White')\nplot = plt.gcf()\n\nplot.gca().add_artist(circle)\n\nplt.show() #print before show","310fe3f9":"#specify the bins(bar) for histogram\nplt.hist(df['pulse'], bins=5)\n\n\n#define labels and title\nplt.title('Histogram of Pulse Data', fontsize=18)\nplt.xlabel('Pulse', fontsize=13)\nplt.ylabel('Frequency', fontsize=13)\n\nplt.show()","e70ae645":"#specify the bins(bar) for histogram\nplt.hist(df['time'], bins=5)\n\n\n#define labels and title\nplt.title('Histogram of Time Data', fontsize=18)\nplt.xlabel('Time', fontsize=13)\nplt.ylabel('Frequency', fontsize=13)\n\nplt.show()","a08d711b":"sns.set_style('whitegrid') \nsns.distplot(df['pulse'], kde = False, color ='red', bins = 30) ","0d9e5e6f":"sns.set_style('whitegrid') \nsns.distplot(df['pulse'], kde = True, color ='red', bins = 30) ","950d7dd7":"plt.boxplot(df['pulse'])\n\n#add title and label\nplt.title('Box Plot of pulse rate', fontsize=15)\nplt.ylabel('Freq', fontsize=12)\n\n#add labesl of five summary \nplt.text(x = 1.1, y=df['pulse'].min(), s='min')\nplt.text(x = 1.1, y=df['pulse'].max(), s='max')\n\nplt.text(x = 1.1, y=df['pulse'].quantile(0.25), s='Q1')\nplt.text(x = 1.1, y=df['pulse'].median(), s='median(Q2)')\nplt.text(x = 1.1, y=df['pulse'].quantile(0.75), s='Q3')\n\n\n#check outliers\n#add an arrow(annotate) to show the outliers\nplt.annotate('Outliers', xy=(0.97, 45), xytext=(0.7, 44), arrowprops=dict(facecolor=\"black\", arrowstyle=\"simple\"))\n\n\nplt.show()","78330f31":"sns.violinplot(x='diet', y='pulse', hue='time', data=df)\n\nplt.show()","7ef1a00a":"sns.violinplot(x='diet', y='pulse', hue='time', bw=0.15, data=df)\n\nplt.legend()\nplt.show()","44e0eb29":"sns.violinplot(x=\"diet\", y=\"pulse\", hue=\"kind\", bw=.25, palette= \"pastel\", inner= \"stick\", data=df);","ea5acd12":"X = df['kind']\nY = df['pulse']\n\n#scatter plot\nplt.scatter(X,Y)\n\n#define labels for axis\nplt.xlabel('Kind', fontsize=15)\nplt.ylabel('Pulse', fontsize = 15)\n\n#show plot\nplt.show()","4a4f40c2":"X = df['time']\nY = df['pulse']\n\n#scatter plot\nplt.scatter(X,Y)\n\n#define labels for axis\nplt.xlabel('Time', fontsize=15)\nplt.ylabel('Pulse', fontsize = 15)\n\n#show plot\nplt.show()","add4c5b6":"X = df['id']\nY = df['pulse']\n\n#scatter plot\nplt.scatter(X,Y)\n\n#define labels for axis\nplt.xlabel('ID', fontsize=15)\nplt.ylabel('Pulse', fontsize = 15)\n\n#show plot\nplt.show()","02d4668b":"rng = np.random.RandomState(0)\ncolors = rng.rand(len(df))\nsizes = 1000 * rng.rand(len(df))\n\nplt.figure(figsize = (10, 5))\nx = df['id']\ny = df['time']\nplt.scatter(x, y, c=colors[:], s=sizes, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar();","684bf2a3":"sns.scatterplot(x = 'time', y = 'id', hue='kind', data=df)","238124b4":"plt.scatter(x = 'time', y = 'id', linewidths=2, marker = \"^\", edgecolor = 'red', s = 40, data=df )\n\nplt.show()","f2371237":"#compute correlations\ncorr_matrix = df.corr()\ncorr_matrix\n","79d318b0":"\nsns.heatmap(corr_matrix, annot=True, linewidths=3, linecolor='blue', cbar=True, vmin=0, vmax=1)\nplt.show()","a5736452":"\nsns.heatmap(corr_matrix, annot=True, cbar=True, vmin=0, vmax=1)\nplt.show()","8d60a962":"\nsns.heatmap(corr_matrix, annot=True, linewidths=3, linecolor='blue', cbar=True, vmin=0, vmax=1, xticklabels=1, yticklabels=False)\nplt.show()","f4b267ec":"cmap = sns.mpl_palette(\"Set1\", 20)\nsns.heatmap(corr_matrix, annot=True, cbar=False, cmap=cmap, fmt=\".3f\")\nplt.show()","da9d7798":"\nsns.heatmap(corr_matrix, annot=True, cbar_kws=({'orientation':'horizontal'}))\nplt.show()","03fed058":"sns.swarmplot(x = 'kind', y = 'time', data=df)","1241cd7d":"****DataFrame visualization****","34db2e80":"**Swarm Plot**","e5fa72d6":"**Bar plot using Seaborn**","b761274b":"1. Set3: Name of the color palette\n1. 20: Number of discrete colors to be presented in a palette.","5ea1de38":"**Violin Plot**","a1f937bc":"**Scatter Plot****","5fd41178":" The cells with higher values than other cells are given a hot color, while cells with lower values are assigned a cold color.","3dddd240":"**Box Plot:-**","c672bc2f":"**Loading the Dataset**","e9dc83ae":"**Pie Chart**","deb86373":"**Unique Values**","bbfe87a6":"**Heatmap**","0f626698":"**DataFrame visualization**","0d2f9c39":"**Null Values**","fa0c2e79":"The correlation matrix shows how the variables are correlated to each other on a scale of -1 to 1. 1 being positively correlated and -1 being inversely correlated. ","7f4684d6":"**Histogram**","c0e4948f":"**Shape of given DataSet**","fa81019e":"**Distplot**"}}