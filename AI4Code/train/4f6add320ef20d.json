{"cell_type":{"b68c1496":"code","98a095a4":"code","9268aa88":"code","3aeff626":"code","9775fad5":"code","fd0c5ae0":"code","b7d6e94a":"code","6d47ae28":"code","61b8e49a":"code","ade922ae":"code","fcadc4c0":"code","c64e5d69":"code","b5a5928b":"code","dbac26e7":"code","db3e6852":"code","89adf98a":"code","92befec3":"code","35e5ac61":"code","35ed9a5a":"code","7d02a12e":"code","334f20fb":"code","b2392c88":"code","7bbcd77e":"code","a5e2af04":"code","cba2621a":"markdown","26f7b4b8":"markdown","f3d15d12":"markdown","94b406dd":"markdown","0861d16a":"markdown","f0b76df1":"markdown","5f342fc3":"markdown","af59e1f4":"markdown","e252acd9":"markdown","afe8d5ac":"markdown","5d7be0f2":"markdown"},"source":{"b68c1496":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.base import clone\n\n# trying out xgboost's regression \nfrom xgboost import XGBRegressor\n\n# String variable that can be used to timestamp exported objects\nfrom datetime import datetime\ncurrent_tmstmp = datetime.today().strftime('%Y%m%d')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv')\n\ntrain.head()","98a095a4":"def listCols(string_identifier, dataframe):\n    ft_cols = []\n    for field in dataframe.columns:\n        if string_identifier in field:\n            ft_cols.append(field)\n    return ft_cols\n\ndef checkForMissingCats(train, test, categorical_feat_list):\n    # take a list of categorical features from a dataset\n    # compare the distinct list of values between train and test\n    for feature in categorical_feat_list:\n        # print('Comparing categorical feature: ' + str(feature))\n        train_list = []\n        test_list = []\n        missing_train_count = 0\n        missing_test_count = 0\n        for category in train[feature].unique():\n            train_list.append(category)\n        for category in test[feature].unique():\n            test_list.append(category)\n        for val in train_list:\n            if val not in test_list:\n                # print('train', val)\n                missing_train_count += 1 \n        for val in test_list:\n            if val not in train_list:\n                # print('test', val)\n                missing_test_count += 1\n        if missing_train_count != 0 or missing_test_count != 0:\n            print(feature)\n\ndef encodeBinaryLabel(val, one_val):\n    if pd.isna(val):\n        raise ValueError('Null value found!')\n    else:\n        if val == one_val:\n            return 1\n        else:\n            return 0\n\ndef create_folds(dataframe):\n    dataframe['kfold'] = -1\n    data = dataframe.sample(frac = 1).reset_index(drop = True)\n    bin_num = int(np.floor(1 + np.log2(len(data))))\n    data.loc[:, 'bins'] = pd.cut(\n        data['target'], bins = bin_num, labels = False\n    )\n    kfold = StratifiedKFold(n_splits = 5)\n    for f, (t_, v_) in enumerate(kfold.split(X = data, y = data['bins'].values)):\n        data.loc[v_, 'kfold'] = f\n    data = data.drop(labels = ['bins'], axis = 1)\n    return data\n\ndef run_folds(dataframe, fold, drop_cols, model):\n    drop_cols.append('target')\n    df_train = dataframe[dataframe.kfold != fold].reset_index(drop = True)\n    df_val = dataframe[dataframe.kfold == fold].reset_index(drop = True)\n    x_train = df_train.drop(labels = drop_cols, axis = 1).values\n    y_train = df_train['target'].values\n    x_val = df_val.drop(labels = drop_cols, axis = 1).values\n    y_val = df_val['target'].values\n    # switch to just fit if i quit using xgboost regression\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_val)\n    mse = mean_squared_error(y_true = y_val, y_pred = y_pred)\n    sq_mse = np.sqrt(mse)\n    print('Processing fold: ' + str(fold))\n    print('Square Root of MSE: ' + str(sq_mse))\n    return model","9268aa88":"cat_feats = listCols('cat', train)\ncont_feats = listCols('cont', train)","3aeff626":"fig, axes = plt.subplots(2, 2, figsize = (12,6))\n\nsns.countplot(x = 'cat0', data = train, ax = axes[0, 0])\nsns.countplot(x = 'cat2', data = train, ax = axes[0, 1])\nsns.countplot(x = 'cat4', data = train, ax = axes[1, 0])\nsns.countplot(x = 'cat6', data = train, ax = axes[1, 1])","9775fad5":"sns.countplot(x = 'cat7', data = train)","fd0c5ae0":"corr = train[cont_feats].corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)","b7d6e94a":"train['target'].plot(kind = 'hist', bins = 1000)","6d47ae28":"counter = 0\n\nfor col in train.columns:\n    if train[col].isnull().sum() > 0:\n        print(col, train[col].isnull().sum())\n        counter += 1\n\nif counter == 0:\n    print('There are no null values in train set.')\n\ncounter = 0\n\nfor col in test.columns:\n    if test[col].isnull().sum() > 0:\n        print(col, test[col].isnull().sum())\n        counter += 1\n\nif counter == 0:\n    print('There are no null values in the test set.')","61b8e49a":"# check for any categories that may not exist in both the train and test csv's\n\ncheckForMissingCats(train = train, test = test, categorical_feat_list = cat_feats)","ade922ae":"train['train_test_id'] = 'train'\ntest['train_test_id'] = 'test'\ntest['target'] = ''\n\ntrain_and_test = [train, test]\n\ndf = pd.concat(train_and_test)\n\ndf.head()","fcadc4c0":"binary_cols = []\n\nfor col in df.columns:\n    if 'cat' in col:\n        print(col, df[col].nunique())\n        if df[col].nunique() == 2:\n            binary_cols.append(col)\n\nfor i in binary_cols:\n    print(i, df[i].unique())\n    df[i] = df[i].apply(lambda x: encodeBinaryLabel(x, 'A'))","c64e5d69":"one_hot_cols = []\n\nfor ft in df.columns:\n    if 'cat' in ft and ft not in binary_cols:\n        one_hot_cols.append(ft)\n        \n\ndf = pd.get_dummies(df, columns = one_hot_cols, dummy_na=False)\n\ndf.head()","b5a5928b":"train = df.loc[df['train_test_id'] == 'train'].drop(labels = ['train_test_id'], axis = 1)\ntest = df.loc[df['train_test_id'] == 'test'].drop(labels = ['train_test_id', 'target'], axis = 1)\n\ntrain.head()","dbac26e7":"num_features = []\n\nfor i in train.columns:\n    if 'cont' in i:\n        num_features.append(i)\n\nfor col in num_features:\n    prep = StandardScaler()\n    train[col] = prep.fit_transform(train[[col]])\n    test[col] = prep.transform(test[[col]])\n\ntrain.head()","db3e6852":"x = train.drop(labels = ['id', 'target'], axis = 1).values\ny = train['target'].values\n\nseed = 7\nnp.random.seed(seed)\n\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.25, random_state = seed)","89adf98a":"model = XGBRegressor()\n\nmodel.fit(x_train, y_train, eval_set = [(x_val, y_val)], early_stopping_rounds = 50, verbose = False)","92befec3":"y_pred = model.predict(x_val)\nmse = mean_squared_error(y_true = y_val, y_pred = y_pred)\nnp.sqrt(mse)","35e5ac61":"tuned_model = XGBRegressor(max_depth = 4, min_child_weight = 5, gamma = 0.5, alpha = 1)\n\ntuned_model.fit(x_train, y_train, eval_set = [(x_val, y_val)], early_stopping_rounds = 50, verbose = False)\n\ntuned_y_pred = tuned_model.predict(x_val)\nmse = mean_squared_error(y_true = y_val, y_pred = tuned_y_pred)\nnp.sqrt(mse)","35ed9a5a":"prepped_test = test.drop(labels = ['id'], axis = 1).values\npredictions = tuned_model.predict(prepped_test)\n\nsub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\nsub['target'] = predictions\n\nsub.to_csv('tuned_xgb_reg_predictions_{ts}.csv'.format(ts = current_tmstmp), index = False)","7d02a12e":"# lin_reg = LinearRegression()\n\n# lin_reg.fit(x_train, y_train)\n\n# y_pred = lin_reg.predict(x_val)\n# mse = mean_squared_error(y_true = y_val, y_pred = y_pred)\n# np.sqrt(mse)\n\n# prepped_test = test.drop(labels = ['id'], axis = 1)\n# predictions = lin_reg.predict(prepped_test)\n\n# sub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n# sub['target'] = predictions\n\n# sub.to_csv('lin_reg_predictions.csv', index = False)","334f20fb":"# rf_reg = RandomForestRegressor()\n\n# rf_reg.fit(x_train, y_train)\n\n# y_pred = rf_reg.predict(x_val)\n# mse = mean_squared_error(y_true = y_val, y_pred = y_pred)\n# np.sqrt(mse)\n\n# prepped_test = test.drop(labels = ['id'], axis = 1)\n# predictions = rf_reg.predict(prepped_test)\n\n# sub = pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n# sub['target'] = predictions\n\n# sub.to_csv('rf_reg_predictions.csv', index = False)","b2392c88":"df = create_folds(train)\n\ndf.kfold.value_counts()","7bbcd77e":"drops = ['id', 'kfold']\n\nmodel_dict = {}\n\nfor f in range(len(df['kfold'].unique())):\n    model_var = 'model_' + str(f)\n    mdl = run_folds(\n        dataframe = df, \n        fold = f, \n        drop_cols = drops, \n        model = XGBRegressor(max_depth = 4, min_child_weight = 5, gamma = 0.5, alpha = 1)\n    )\n    model_dict[model_var] = mdl","a5e2af04":"import joblib\n\njoblib.dump(model, 'xgb_regr_tab_feb_2021.bin')","cba2621a":"### Model Builds\n\nAs of mid-Feb, my best score has been with a XGBoost Regression model using default params. Going forward, I'm going to try to gain more experience with XGBoost and try out differing param settings. ","26f7b4b8":"I'll encode the binary, categorical features into 0, 1 values and use the get_dummies method to handle the others. ","f3d15d12":"### Imports and Initial Setup\n\nImporting modules\/libraries and defining useful functions. ","94b406dd":"A Linear Regression model scored 0.86. As of 02\/06, the best score is 0.84191. ","0861d16a":"### End\n\nAfter the competition ended, my best submission for the XGBoost Regression model scored 0.84719 on the private leaderboard. I'll wrap up this notebook by exporting the model using joblib in case I would like to work with it again in the future. ","f0b76df1":"### Data Prep","5f342fc3":"Since cat6 has different categories between the two datasets, I'm going to combine both dataframes into one and create a new column, train_test_id, that I'll use later to separate the train and test sets. ","af59e1f4":"Splitting train into training and validation sets. ","e252acd9":"It seems like some of the categorical features are not evenly distributed. I'm wondering if it might make sense to remove some of these. ","afe8d5ac":"Imbalanced Categorical Features:\n\n- cat0\n- cat2\n- cat4\n- cat6\n- cat7","5d7be0f2":"### Categorical and Continuous Features\n\nIt seems that this month's Tabular Playground competition has continuous and categorical features. Some of the categorical columns may be binary so I'll check for those and handle those differently. "}}