{"cell_type":{"ddbdb373":"code","07acec03":"code","7a347230":"code","05e6ed13":"code","8a769596":"code","858487c6":"code","a418c2c5":"code","1819693b":"code","9178a473":"code","f4603147":"code","c7f2713b":"code","49f2bf89":"code","337ce929":"code","1dbec84b":"code","bdaa64cd":"code","41003f7a":"code","9867cb5a":"code","de612d6e":"code","edbb229d":"code","a53c190f":"code","b39297c3":"code","2e6ea057":"code","13e13ddd":"code","aa396569":"code","8c42cad6":"code","a3261cf1":"code","ced65f2b":"code","983a47f4":"code","2014c425":"markdown","555b1e5e":"markdown","16b4e952":"markdown","a92ef955":"markdown","0e139afa":"markdown","cd76f24b":"markdown","d4b11a3f":"markdown","72871db3":"markdown","b2566a4c":"markdown","6d58cb8a":"markdown","69029897":"markdown"},"source":{"ddbdb373":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07acec03":"import matplotlib.pyplot as plt\nimport datetime\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","7a347230":"missing_values = [\"na\",\"n\/a\",\"-\",\"NaN\"]  #dataset may contains null values in these forms\ndogecoin_dataset = pd.read_csv(\"\/kaggle\/input\/dogecoin-inr-dataset-20172020\/DOGE-INR.csv\",na_values=missing_values)","05e6ed13":"dogecoin_dataset.head()","8a769596":"dogecoin_dataset.describe()","858487c6":"dogecoin_open_data = dogecoin_dataset['Open']\ndogecoin_high_data = dogecoin_dataset['High']\ndogecoin_low_data = dogecoin_dataset['Low']\ndogecoin_close_data = dogecoin_dataset['Close']\ndogecoin_date = dogecoin_dataset['Date']\ndogecoin_dataset['Volume'] \/= pow(10,10)\ndogecoin_volume_data = dogecoin_dataset['Volume']  #scale volume\n\n","a418c2c5":"#first date of dataset\nstart_date = datetime.datetime.strptime(dogecoin_date[0],\"%Y-%m-%d\") \n#last date of dataset\nend_date = datetime.datetime.strptime(dogecoin_date[len(dogecoin_date)-1],\"%Y-%m-%d\")\ndate_range = pd.date_range(start_date,end_date)\n","1819693b":"fig, ax = plt.subplots()\nax.plot(date_range,dogecoin_open_data)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"Open Price by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.show()","9178a473":"fig, ax = plt.subplots()\nax.plot(date_range,dogecoin_high_data)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"High Price by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.show()","f4603147":"fig, ax = plt.subplots()\nax.plot(date_range,dogecoin_low_data)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"Low Price by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.show()","c7f2713b":"fig, ax = plt.subplots()\nax.plot(date_range,dogecoin_volume_data)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"Volume by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Volume\")\nplt.show()","49f2bf89":"difference_in_high_and_low = dogecoin_high_data - dogecoin_low_data\ndifference_in_high_and_low.head()","337ce929":"fig, ax = plt.subplots()\nax.plot(date_range,difference_in_high_and_low)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"Difference by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Difference\")\nplt.show()","1dbec84b":"difference_in_close_and_open = dogecoin_close_data - dogecoin_open_data\ndifference_in_close_and_open","bdaa64cd":"fig, ax = plt.subplots()\nax.plot(date_range,difference_in_close_and_open)\nax.xaxis_date() \nfig.autofmt_xdate()\nplt.title(\"Difference by Date\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Volume\")\nplt.legend()\nplt.show()","41003f7a":"dogecoin_dataset.isnull().sum()","9867cb5a":"dogecoin_dataset['Open'] = dogecoin_dataset['Open'].fillna(dogecoin_open_data.mean())\ndogecoin_dataset['High'] = dogecoin_dataset['High'].fillna(dogecoin_high_data.mean())\ndogecoin_dataset['Low'] = dogecoin_dataset['Low'].fillna(dogecoin_low_data.mean())\ndogecoin_dataset['Close'] = dogecoin_dataset['Close'].fillna(dogecoin_close_data.mean())\ndogecoin_dataset['Adj Close'] = dogecoin_dataset['Adj Close'].fillna(dogecoin_dataset['Adj Close'].mean())\ndogecoin_dataset['Volume'] = dogecoin_dataset['Volume'].fillna(dogecoin_volume_data.mean())\ndogecoin_dataset.isnull().sum()","de612d6e":"dogecoin_dataset.corr()\n","edbb229d":"dogecoin_dataset = dogecoin_dataset.drop(columns=['Date','Adj Close','Volume'])\n\nX_train, X_test, y_train, y_test = train_test_split(dogecoin_dataset,dogecoin_volume_data)","a53c190f":"plt.scatter(dogecoin_open_data,dogecoin_volume_data)\nplt.xlabel('Open Price')\nplt.ylabel('Volume')\nplt.show()","b39297c3":"plt.scatter(dogecoin_close_data,dogecoin_volume_data)\nplt.xlabel('Close Price')\nplt.ylabel('Volume')\nplt.show()","2e6ea057":"plt.scatter(dogecoin_high_data,dogecoin_volume_data)\nplt.xlabel('HIgh Price')\nplt.ylabel('Volume')\nplt.show()","13e13ddd":"# train the model using the training sets\nreg = LinearRegression()\nreg.fit(X_train,y_train)","aa396569":"#regression coefficients\nprint('Coefficients: ', reg.coef_)\n \n# variance score: 1 means perfect prediction\nprint('Variance score: {}'.format(reg.score(X_test, y_test)))","8c42cad6":"# plot for residual error\n \n## setting plot style\nplt.style.use('fivethirtyeight')\n \n## plotting residual errors in training data\nplt.scatter(reg.predict(X_train), reg.predict(X_train) - y_train,\n            color = \"green\", s = 10, label = 'Train data')\n## plotting residual errors in test data\nplt.scatter(reg.predict(X_test), reg.predict(X_test) - y_test,\n            color = \"blue\", s = 10, label = 'Test data')\n \n## plotting line for zero residual error\nplt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2)\n \n## plotting legend\nplt.legend(loc = 'upper right')\n \n## plot title\nplt.title(\"Residual errors\")\n \n## method call for showing the plot\nplt.show()","a3261cf1":"\nlin = LinearRegression()\n \nlin.fit(X_train, y_train)\n# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree = 2)\nX_poly = poly.fit_transform(X_train)\npoly.fit(X_poly, y_train)\nlin2 = LinearRegression()\nlin2.fit(X_poly, y_train)\n","ced65f2b":"# Visualising the Linear Regression results\nplt.scatter(X_train['Open'], y_train, color = 'blue',label='Actual')\n \nplt.scatter(X_test['Open'], lin.predict(X_test), color = 'red',label='Predicted')\nplt.title('Linear Regression')\nplt.xlabel('Price')\nplt.ylabel('Volume')\nplt.legend()\nplt.show()","983a47f4":"plt.scatter(X_train['Open'],y_train,color='blue',label='Actual')\nplt.scatter(X_test['Open'],lin2.predict(poly.fit_transform(X_test)),color='red',label='Predcited')\nplt.title('Polynomial Regression')\nplt.xlabel('Price')\nplt.ylabel('Volume')\nplt.legend()\nplt.show()","2014c425":"**Import required libraries**","555b1e5e":"Lets see the dataset","16b4e952":"As the difference between High and Low price increases suddenly in mid 2021, it clearly show its volatile nature.","a92ef955":"**Very Volatile!!**","0e139afa":"Quick insights","cd76f24b":"# Fill Missing Values","d4b11a3f":"**variance score: 1 means perfect prediction*","72871db3":"*All null values filled*","b2566a4c":"only one row is missing!","6d58cb8a":"# Missing Values","69029897":"graph is somewhat quadratic"}}