{"cell_type":{"e85411fd":"code","1a57dc73":"code","4ab374b8":"code","fd0eb5ae":"code","4b62386e":"code","8405c192":"code","dbc51feb":"code","5bd9be35":"code","2c16f4e0":"code","cedcafe5":"code","0cc376cc":"code","74ff9eb1":"code","7b60001c":"code","eddc457d":"code","4bd517a8":"code","30e514bc":"code","be39f647":"code","c8f84f2d":"code","d5692f6e":"code","acc4790d":"code","7de49e83":"code","2b76ee6f":"code","1d96675e":"code","a03dfc92":"code","fbeae9cb":"code","00ed05db":"code","9e96ae7f":"code","32ede4ce":"code","24ff83f6":"code","a3419601":"code","d6d06687":"code","65059924":"markdown","c4c56857":"markdown","f86387b4":"markdown"},"source":{"e85411fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a57dc73":"from tensorflow.keras.layers import Dense, Flatten, Input, Lambda\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport numpy as np","4ab374b8":"#Declaring the image size and the train, test path of the dataset\n# Resizinig all the images to (224,224)\nIMAGE_SIZE = [224,224]\n\ntrain_path = '\/kaggle\/input\/covid19-chest-xray-detection\/covid_update\/Train'\ntest_path = '\/kaggle\/input\/covid19-chest-xray-detection\/covid_update\/Test'","fd0eb5ae":"resnet = ResNet50(input_shape = IMAGE_SIZE + [3], weights='imagenet', include_top=False)","4b62386e":"#Now we dont have to train the existing weights we just have to train our last layer.\nfor layer in resnet.layers:\n  layer.trainable = False","8405c192":"#By using the Glob function we will be able to know our output classes.\nfolder = glob('\/kaggle\/input\/covid19-chest-xray-detection\/covid_update\/*')\nfolder","dbc51feb":"len(folder)","5bd9be35":"#Now the next we need to Flatten our ResNet model.\n#What is Flattening of layer, why is it required?\n###We need to convert our 2D features to 1D features. Flatting is required when we have to convert our layer to a fully connected layer.\n\nx = Flatten()(resnet.output)","2c16f4e0":"#Adding our last laye\nprediction = Dense(2, activation='softmax')(x)","cedcafe5":"model = Model(inputs = resnet.inputs, outputs = prediction)","0cc376cc":"model.summary()","74ff9eb1":"#Compiling our model\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","7b60001c":"# Scaling all the images between 0 to 1\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255, shear_range=0.2, zoom_range=0.2, horizontal_flip=False)\n\n# Performing only scaling on the test dataset\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","eddc457d":"# flow_from_directory means i am applying all the train_datagen techniques to all the images\n# We need to provide the same traget_size as initialized in the IMAGE_SIZE\n# If you have more than two classes we should use class_mode = categorical\n# But if we have just two classses we can use class_mode = binary\n\ntrain_set = train_datagen.flow_from_directory(train_path,\n                                              target_size=(224,224),\n                                              batch_size=32,\n                                              class_mode = 'categorical')","4bd517a8":"# Applying the same techniques on the test dataset\n\ntest_set = test_datagen.flow_from_directory(test_path,\n                                            target_size=(224,224),\n                                            batch_size=32,\n                                            class_mode='categorical')","30e514bc":"EarlyStopping = EarlyStopping(monitor='val_loss', patience=5 , mode='min', verbose=1)","be39f647":"history = model.fit(train_set, validation_data=test_set, epochs=50, steps_per_epoch=len(train_set), validation_steps=len(test_set), callbacks=EarlyStopping)","c8f84f2d":"#Plotting the losses and Accuracy on the dataset\n\nplt.figure(figsize=(10,7))\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title(\"Training Loss on COVID-19 Dataset\")\nplt.legend()\nplt.show()","d5692f6e":"plt.plot(history.history['accuracy'], label='train_acc')\nplt.plot(history.history['val_accuracy'], label='val_acc')\nplt.title(\"Training Accuracy on COVID-19 Dataset\")\nplt.legend()\nplt.show()\nplt.savefig('lossval_loss')","acc4790d":"#Saving the h5 file\nfrom tensorflow.keras.models import load_model\n\nmodel.save('covid_chest_xray_model.h5')","7de49e83":"pred = model.predict(test_set)\npred\n","2b76ee6f":"import numpy as np\n\npred = np.argmax(pred, axis=0)\npred","1d96675e":"\n#Loading our model\u00b6\n\nmodel = load_model('covid_chest_xray_model.h5')","a03dfc92":"from tensorflow.keras.preprocessing import image\n\nimg = image.load_img('\/kaggle\/input\/covid19-chest-xray-detection\/covid_update\/Test\/covid\/covid-19-pneumonia-bilateral.jpg', target_size=(224,224))","fbeae9cb":"x = image.img_to_array(img)\nx","00ed05db":"x.shape","9e96ae7f":"x = x\/255","32ede4ce":"from tensorflow.keras.applications.resnet50 import preprocess_input\n\nx=np.expand_dims(x,axis=0)\nimg_data=preprocess_input(x)\nimg_data.shape","24ff83f6":"model.predict(img_data)","a3419601":"a=np.argmax(model.predict(img_data), axis=1)","d6d06687":"if(a==1):\n    print(\"The person does not have COVID-19\")\nelse:\n    print(\"The person has COVID-19\")","65059924":"\nPredicting our model","c4c56857":"\nIn this we will be using ResNet-50 Pretrained Moldel","f86387b4":"The Data Augmentation"}}