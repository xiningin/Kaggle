{"cell_type":{"4b7d7eec":"code","3323132d":"code","41ba9464":"code","b72cf92e":"code","a29bc14c":"code","e8f65303":"code","9d84f50b":"code","b5d5870d":"code","a3e7daef":"code","fdc28ab3":"code","6cdb04e0":"code","61660114":"code","10a8e820":"code","46b54669":"code","56661a79":"code","70eef063":"code","fd5152b1":"code","b4b9e9e6":"code","7c620e84":"code","2b9ae0ba":"code","ddb9dfae":"code","50c6e843":"code","53d25006":"code","a292de07":"code","b1de8916":"markdown","427423eb":"markdown","ecb3b043":"markdown","67bfed0d":"markdown","cf741e5b":"markdown","5d5ddb30":"markdown","786cbae6":"markdown","7c41e7e9":"markdown","02604e3c":"markdown","ca597ccf":"markdown","c6482101":"markdown","a2590050":"markdown","aca44548":"markdown","68b92ae0":"markdown"},"source":{"4b7d7eec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot\nimport plotly.io as pio\n\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import Scatter, Layout, Figure, Data, Stream, YAxis, Marker, Bar, Line\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)\n\n!pip install klib\nimport sys\n\nsys.path.append('..\/input\/klib-library-python')\nimport klib\n!pip install pdpipe\nimport pdpipe as pdp\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3323132d":"#Reading files\nfile_path_product = '\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv'\nfile_path_district = '\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv'\ndf_product = pd.read_csv(file_path_product, encoding='utf8')\ndf_district = pd.read_csv(file_path_district, encoding='utf8')","41ba9464":"#Creting a list of all filenames\ndef append_filename():\n    filename_list = []\n    for filenames in os.walk('..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/'):\n        for filename in filenames:\n            for csv in filename:\n                if csv.find('.csv') >0:\n                    filename_list.append(csv)\n    return filename_list\n","b72cf92e":"#Creating a function to join all files together\ndef append_engagement_data():\n    columns = ['time', 'lp_id', 'pct_access', 'engagement_index','district_id']\n    df_master = pd.DataFrame(columns=columns)\n    filename_list = append_filename()\n    for filename in filename_list:\n        file_path = f'..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/{filename}'\n        df_to_append = pd.read_csv(file_path, encoding='utf8')\n        df_to_append[\"district_id\"] = filename.split(\".\")[0]\n        df_master = df_master.append(df_to_append)\n    return df_master","a29bc14c":"#Calling the function to create a master dataframe\ndf_master = append_engagement_data()\n","e8f65303":"#Removing all NaN values\ndf_master.dropna(inplace = True)","9d84f50b":"klib.dist_plot(df_master['engagement_index']);","b5d5870d":"df_dist = df_district.copy()\ndf_dist.isnull().sum()\n","a3e7daef":"#removing NaN state rows\ndf_dist = df_dist.dropna(subset=['state'])\n\n#replacing with the most frequent values\ndf_dist['pct_free\/reduced'] = df_dist['pct_free\/reduced'].fillna(df_dist['pct_free\/reduced'].value_counts().idxmax())\ndf_dist['county_connections_ratio'] = df_dist['county_connections_ratio'].fillna(df_dist['county_connections_ratio'].value_counts().idxmax())\ndf_dist['pp_total_raw'] = df_dist['pp_total_raw'].fillna(df_dist['pp_total_raw'].value_counts().idxmax())\ndf_dist.isnull().sum()","fdc28ab3":"def average_columns_val(df, col_name):\n    df[col_name] = df[col_name].apply(lambda x: str(x)[1:-1])\n    df[[\"min\",\"max\" ]]= df[col_name].str.split(\",\", n = 1, expand = True)\n    df = df.astype({'min': 'float', 'max':'float'})\n    df[col_name] = (df['min']+df['max'])\/2\n    df = df.drop(columns = ['min','max'])\n    return df","6cdb04e0":"#Modifying columns for the analysis\ndf_dist_avg = average_columns_val(df_dist, \"pct_black\/hispanic\")\ndf_dist_avg = average_columns_val(df_dist_avg, \"pct_free\/reduced\")\ndf_dist_avg = average_columns_val(df_dist_avg, \"county_connections_ratio\")\ndf_dist_avg = average_columns_val(df_dist_avg, \"pp_total_raw\")","61660114":"#Plotting states where the minority group has highest population\ndf_dist_avg = df_dist_avg.astype({'pct_black\/hispanic':'float'})\ndf_dist_avg = df_dist_avg[df_dist_avg['pct_black\/hispanic']>0.5]\ndf_state = df_dist_avg['state'].value_counts()\n\ntitle_string = \"No. of district ids where the black or hispanic pop is more than 50%\"\nfig = px.bar(x = df_state.index, y =df_state.values ,title=\"State Distribution\",\n              color_continuous_scale ='RdBu',color=df_state.values,height=500)\n\nfig.update_layout(title_text=title_string)\nfig.update_xaxes(title_text=\"<b> State <\/b>\")\nfig.update_yaxes(title_text=\"<b> Count of rows <\/b>\")\n\nfig.show()","10a8e820":"#Number of products by company\ndf_pr_count = df_product['Provider\/Company Name'].value_counts()\ndf_pr_count = df_pr_count[df_pr_count>3]\ntitle_string = \"Popular poducts\"\nfig = px.bar(x = df_pr_count.index, y =df_pr_count.values ,title=\"State Distribution\",\n              color_continuous_scale ='RdBu',color=df_pr_count.values,height=500)\n\nfig.update_layout(title_text=title_string)\nfig.update_xaxes(title_text=\"<b> Product Company <\/b>\")\nfig.update_yaxes(title_text=\"<b> Count of rows <\/b>\")\n\nfig.show()","46b54669":"#Couting products at various sectors\nsector_dict = {'PreK-12':0,'Higher Ed':0, 'Corporate':0}\nfor sector in sector_dict.keys():\n    val = df_product['Sector(s)'].str.contains(sector).sum()\n    sector_dict.update({sector:val})\nfig = px.pie(values= sector_dict.values(), names= sector_dict.keys(), title='Sector distribution')\nfig.show()","56661a79":"#Couting primary essential services\nprimary_essential_dict = {'LC':0,'CM':0, 'SDO':0}\nfor essential in primary_essential_dict.keys():\n    val = df_product['Primary Essential Function'].str.contains(essential).sum()\n    primary_essential_dict.update({essential:val})\n\nfig = px.pie(values= primary_essential_dict.values(), names= primary_essential_dict.keys(), title='Primary essential distribution')\nfig.show()","70eef063":"df_product = df_product.rename(columns = {'LP ID':'lp_id'})\ndf_product.columns","fd5152b1":"#Time and count of data\ntitle_string = \"Count of data for a day\"\ndft = df_master['time'].value_counts()\ndft = dft.sort_index()\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Line(x = dft.index, y = dft.values, name = 'count of data for a day'))\n\nfig.update_layout(title_text=title_string)\nfig.update_xaxes(title_text=\"<b> Date <\/b>\")\nfig.update_yaxes(title_text=\"<b> Count of rows <\/b>\", secondary_y=False)\n\nfig.show()","b4b9e9e6":"#transforming dataframe to take rolling 7 days mean\ndf_master = df_master.astype({'district_id':'int32'})\ndf_merged_1 = pd.merge(df_master, df_dist_avg, on = \"district_id\")\ndf_merged=pd.merge(df_merged_1, df_product, on= \"lp_id\")\n\ndfp =df_merged.groupby([\"time\"]).agg({'pct_access':['mean'], 'engagement_index':['mean']})\ndfp.columns = dfp.columns.get_level_values(0)\n\ndfp = dfp.reset_index()\ndfc = dfp.rolling(window=7).mean()\ndfc","7c620e84":"title_string = \"Pct_access and engagment_index 7-day mean over the days\"\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n    \n#Adding graph elements\nfig.add_trace(go.Line(x = dfc.index.get_level_values(0), y = dfc['pct_access'], name = 'pct_access'))\nfig.add_trace(go.Line(x = dfc.index.get_level_values(0), y = dfc['engagement_index'], name = 'engagement_index'), secondary_y=True)\n\n#Updating graph axes and title\nfig.update_layout(title_text=title_string)\nfig.update_xaxes(title_text=\"<b> Date <\/b>\")\nfig.update_yaxes(title_text=\"<b> pct_access <\/b>\", secondary_y=False)\nfig.update_yaxes(title_text=\"<b> engagement_index <\/b>\", secondary_y=True)\n        \nfig.show()","2b9ae0ba":"#Finding correlation between \ndf_hypo1 = dfp.merge(dft, how = 'left', left_index=True, right_index=True)\ncorr = df_hypo1.corr()\ncorr","ddb9dfae":"df_master.columns\n\ndfk = df_merged.groupby([\"time\", \"state\"]).agg({'pct_access':['mean'], 'engagement_index':['mean']}).reset_index()\ndfk.columns = dfk.columns.get_level_values(0)\ndfk","50c6e843":"def set_size(value):\n    result = np.log(1+value\/100)\n    if result < 0:\n        result = 0.001\n    return result","53d25006":"#thanks to \"https:\/\/www.kaggle.com\/gvyshnya\/covid19-impact-on-digital-learning-platforms-usage\"\n\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\npipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('engagement_index', set_size, 'size', drop=False),\n    pdp.MapColVals('state', us_state_abbrev)\n])\ndfk = pipeline.apply(dfk)\ndfk.fillna(0, inplace=True)","a292de07":"fig = px.scatter_geo(\n    dfk, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color=\"engagement_index\", \n    size='size', hover_name=\"state\", \n    range_color= [0, 500], \n    projection=\"albers usa\", animation_frame=\"time\", \n    title='Average engagement index by province and date', \n    color_continuous_scale=\"portland\")\n\nfig.show()","b1de8916":"The below function takes the engagement index data and assign a sign to it. ","427423eb":"It is better to take rolling average over the single-day average as the count of data for each days is not uniform. \n\nSome observations on the engagement index:\n\n1. The engagement index has been more in the later month of the year compare to earlier month. It shows the students have adopted digital learning over the period. \n2. The summer month has least engagment index as the students were enjoying their summer vacation. ","ecb3b043":"Below function creates a combined files fo all the engagement data. ","67bfed0d":"### average_columns_val \n\nCreated to remove unncessary brackets and then, took avearage values of the resultant list. ['pct_black\/hispanic','pct_free\/reduced', 'county_connections_ratio', 'pp_total_raw'] ","cf741e5b":"The above plot shows that:\n\n- The data is missing for many provinces. \n- The engagement index is bit higher in state of New York and Arizona.\n- Even though California is world technical capital, the engagement index is comparatively less here. ","5d5ddb30":"Hypothesis 1: The cyclic behaviour of mean of pct_access depends on the count of data for days. ","786cbae6":"### Reading Files","7c41e7e9":"Understanding distribution of pct_acces and engagement data over the time period. \nIt can be observed that the mean values are in fluctuating significanlty between the days. \n\nIt is interesting to understand the behaviour. ","02604e3c":"The challenge is focussed on answering questions whether the digial learning engaged the students? Alos, does digital learning is beneficial to all group of communites? The notebook explore answering those questions?","ca597ccf":"### Creating function to append files\nA helper fuction that pulls out all the engagement data related files by iterating through the engagement data folder. ","c6482101":"Q1. What is the picture of digital connectivity and engagement in 2020?","a2590050":"The correaltion shows that the mean of pct_access depend on the count of data for days. Hence, taking mean of pct_access gives a false represenation of data. Hence, it is better to remove products whose data are not available for each day. ","aca44548":"### Code Cleanup","68b92ae0":"Q.2 - What is the effect of the COVID-19 pandemic on online and distance learning, and how might this also evolve in the future?\n\nIdeas for analysis:\n\n1. Shift in population learning online vs offline before and after March 2020. \n2. Does the trend continue? Need the data after covid effects were reduced in USA. \n\nQ.3. - How does student engagement with different types of education technology change over the course of the pandemic?"}}