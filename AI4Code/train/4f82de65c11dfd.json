{"cell_type":{"d5d1ed70":"code","bd013160":"code","1ba8054c":"code","dbd1afce":"code","398d442e":"code","7567ebaf":"code","e2fec58e":"code","0f5ac694":"code","563b6317":"code","58d71b65":"code","e8413906":"code","1b896841":"code","1b9aeb74":"code","c619600e":"code","b5ad730f":"code","4156c6dd":"code","f4cb55d7":"code","c83a8f28":"code","a77dd449":"code","b0a362c6":"code","be7cae88":"code","473c65f2":"code","16434ce3":"code","51b1dce5":"code","079e8204":"code","88b5fd32":"code","df643cde":"code","d8357156":"code","31eed8f5":"code","a266d71c":"code","7ff8f8c8":"code","ea22d1fc":"code","b7946d19":"code","f2b1f5af":"code","b8be5bc5":"code","22ad2180":"code","03825db1":"markdown","d93b6f51":"markdown","b1cb0921":"markdown","6924cedb":"markdown","bd68ff4e":"markdown","edd2a1e5":"markdown","cbe7cdde":"markdown","be2207b0":"markdown","b49dcb9f":"markdown","29f5cf31":"markdown","f801aa99":"markdown","c92aeed3":"markdown","44dd7d8b":"markdown","26355228":"markdown","3b0243df":"markdown","fb57e113":"markdown","6a483b10":"markdown","fcc6f601":"markdown","0b618140":"markdown","3296928b":"markdown","a187c2f3":"markdown","4be586e9":"markdown","b3b72dff":"markdown","04f87d6b":"markdown","eb6eca2d":"markdown"},"source":{"d5d1ed70":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom scipy import stats ","bd013160":"tabela = pd.read_csv(\"\/kaggle\/input\/transistor-bc-bd\/tabela-de-transistores-bc-e-bd.csv\", delimiter=\";\")\ntabela.head()","1ba8054c":"tabela.shape","dbd1afce":"tabela.info()","398d442e":"tabela.isnull().sum()","7567ebaf":"\ndivisao = tabela[\"hfe\"].str.split(\"-\") \ntabela[\"hfe_min\"] = divisao.str.get(0) \ntabela[\"hfe_max\"] = divisao.str.get(1) \n\ntabela[\"hfe_max\"] = tabela[\"hfe_max\"].str.replace(\">\",\"\") \n\ntabela = tabela.drop([\"hfe\"], axis=1) ","e2fec58e":"colunas = [\"Ic(A)\",\"Potencia(W)\"]\nfor coluna in colunas:\n    tabela[coluna] = tabela[coluna].str.replace(\",\",\".\")","0f5ac694":"floats = [\"Ic(A)\",\"Potencia(W)\"]\nfor f in floats:\n    tabela[f] = tabela[f].astype(np.float64)\n\nints = [\"hfe_min\", \"hfe_max\"]\nfor i in ints:\n    tabela[i] = tabela[i].astype(np.int64)\n\ntabela.info()","563b6317":"tabela.describe()","58d71b65":"npn_vce = tabela[tabela['Polaridade'] == 'NPN']['VCE(V)'] #subconjunto com a tens\u00e3o do npn\npnp_vce = tabela[tabela['Polaridade'] == 'PNP']['VCE(V)'] #subconjunto com a tens\u00e3o do pnp\n\nvce_bins = range(20,350,10)\n\n# histograma NPN\nfig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,5), sharey=True)\nsns.distplot(npn_vce, bins=vce_bins, kde=False, \n            color=\"green\", ax=ax1, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax1.set_title(\"NPN\")\nax1.set_ylabel(\"Count\")\nax1.set_xlabel(\"VCE(V)\")\nax1.text(150,9,\"Count: {}\".format(npn_vce.count()))\nax1.text(150,8,\"Average Voltage: {:.1f}\".format(npn_vce.mean()))\n\n#histograma PNP\nsns.distplot(pnp_vce, bins=vce_bins, kde=False, \n            color=\"red\", ax=ax2, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax2.set_title(\"PNP\")\nax2.set_ylabel(\"Count\")\nax2.set_xlabel(\"VCE(V)\")\nax2.text(150,9,\"Count: {}\".format(npn_vce.count()))\nax2.text(150,8,\"Average voltage : {:.1f}\".format(pnp_vce.mean()))\n\nplt.tight_layout()\nplt.show()","e8413906":"def rotulacao(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n\nsizes = [npn_vce.count(),pnp_vce.count()] # tamanho dos pesos\n\nfig0, ax1 = plt.subplots(figsize=(6,6))\nwedges, texts, autotexts = ax1.pie(sizes,\n                                   autopct=lambda pct: rotulacao(pct, sizes),\n                                   radius=1,\n                                   colors=['green','red'],\n                                   startangle=90,\n                                   textprops=dict(color=\"w\"),\n                                   wedgeprops=dict(width=0.7, edgecolor='w'))\n\nax1.legend(wedges, ['NPN','PNP'],\n           loc='center right',\n           bbox_to_anchor=(0.7, 0, 0.5, 1))\n\nplt.text(0,0, 'TOTAL\\n{}'.format(tabela['VCE(V)'].count()),\n         weight='bold', size=12, color='#52527a',\n         ha='center', va='center')\n\nplt.setp(autotexts, size=12, weight='bold')\nax1.axis('equal')  \nplt.show()","1b896841":"npn_ic = tabela[tabela['Polaridade'] == 'NPN']['Ic(A)'] #subconjunto com a tens\u00e3o do npn\npnp_ic = tabela[tabela['Polaridade'] == 'PNP']['Ic(A)'] #subconjunto com a tens\u00e3o do pnp\n\nic_bins = range(0,15,1)\n\n# histograma NPN\nfig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,5), sharey=True)\nsns.distplot(npn_ic, bins=ic_bins, kde=False, \n            color=\"green\", ax=ax1, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax1.set_title(\"NPN\")\n#ax1.set_xticks(vce_bins)\nax1.set_ylabel(\"Count\")\nax1.set_xlabel(\"Ic(A)\")\nax1.text(7,12,\"Count: {}\".format(npn_ic.count()))\nax1.text(7,11,\"Average current: {:.1f}\".format(npn_ic.mean()))\n\n#histograma PNP\nsns.distplot(pnp_ic, bins=ic_bins, kde=False, \n            color=\"red\", ax=ax2, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax2.set_title(\"PNP\")\nax2.set_ylabel(\"Count\")\nax2.set_xlabel(\"Ic(A)\")\nax2.text(7,12,\"Count: {}\".format(npn_ic.count()))\nax2.text(7,11,\"Average current: {:.1f}\".format(pnp_ic.mean()))\n\nplt.tight_layout()\nplt.show()","1b9aeb74":"npn_w = tabela[tabela['Polaridade'] == 'NPN']['Potencia(W)'] #subconjunto com a tens\u00e3o do npn\npnp_w = tabela[tabela['Polaridade'] == 'PNP']['Potencia(W)'] #subconjunto com a tens\u00e3o do pnp\n\nw_bins = range(0,115,5)\n\n# histograma NPN\nfig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,5), sharey=True)\nsns.distplot(npn_w, bins=w_bins, kde=False, \n            color=\"green\", ax=ax1, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax1.set_title(\"NPN\")\nax1.set_yticks(range(0,20,1))\nax1.set_ylim(0,20)\nax1.set_ylabel(\"Count\")\nax1.set_xlabel(\"Pot\u00eancia(W)\")\nax1.text(50,12,\"Count: {}\".format(npn_w.count()))\nax1.text(50,11,\"Average power: {:.1f}\".format(npn_w.mean()))\n\n#histograma PNP\nsns.distplot(pnp_w, bins=w_bins, kde=False, \n            color=\"red\", ax=ax2, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax2.set_title(\"PNP\")\nax2.set_yticks(range(0,20,2))\nax2.set_ylim(0,20)\nax2.set_ylabel(\"Count\")\nax2.set_xlabel(\"Pot\u00eancia(W)\")\nax2.text(50,12,\"Count: {}\".format(npn_w.count()))\nax2.text(50,11,\"Average power: {:.1f}\".format(pnp_w.mean()))\n\nplt.tight_layout()\nplt.show()","c619600e":"npn_hfe_max = tabela[tabela['Polaridade'] == 'NPN']['hfe_max'] #subconjunto com a tens\u00e3o do npn\npnp_hfe_max = tabela[tabela['Polaridade'] == 'PNP']['hfe_max'] #subconjunto com a tens\u00e3o do pnp\n\nhfe_bins = range(20,800,20)\n\n# histograma NPN\nfig, (ax1,ax2) = plt.subplots(1,2, figsize=(12,5), sharey=True)\nsns.distplot(npn_hfe_max, bins=hfe_bins, kde=False, \n            color=\"green\", ax=ax1, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax1.set_title(\"NPN\")\nax1.set_yticks(range(0,12,1))\nax1.set_ylim(0,12)\nax1.set_ylabel(\"Count\")\nax1.set_xlabel(\"Ganho hfe_m\u00e1ximo\")\nax1.text(500,9,\"Count: {}\".format(npn_hfe_max.count()))\nax1.text(500,8,\"Average hfe_max: {:.1f}\".format(pnp_hfe_max.mean()))\n\n#histograma PNP\nsns.distplot(pnp_hfe_max, bins=hfe_bins, kde=False, \n            color=\"red\", ax=ax2, hist_kws=dict(edgecolor=\"k\", linewidth=2))\nax2.set_title(\"PNP\")\nax2.set_yticks(range(0,12,1))\nax2.set_ylim(0,12)\nax2.set_ylabel(\"Count\")\nax2.set_xlabel(\"Ganho hfe_m\u00e1ximo\")\nax2.text(500,9,\"Contagem total: {}\".format(npn_hfe_max.count()))\nax2.text(500,8,\"Average hfe_max: {:.1f}\".format(pnp_hfe_max.mean()))\n\nplt.tight_layout()\nplt.show()","b5ad730f":"corr, _ = stats.pearsonr(tabela[\"hfe_max\"], tabela[\"Ic(A)\"])\n\njp = (sns.jointplot(\"hfe_max\", \"Ic(A)\", data=tabela, kind='reg')).plot_joint(sns.kdeplot)\nplt.text(500,15, \"Persoon: {:.2f}\".format(corr))","4156c6dd":"corr1, _ = stats.pearsonr(npn_vce.values, npn_ic.values)\ncorr2, _ = stats.pearsonr(pnp_vce.values, pnp_ic.values)\n\nsns.lmplot('VCE(V)', 'Ic(A)', data=tabela, hue='Polaridade')\nplt.text(200,4,'Pearson:{:.2f}'.format(corr1), color='blue')\nplt.text(10,7.5,'Pearson:{:.2f}'.format(corr2), color='orange')\nplt.show()","f4cb55d7":"corr3, _ = stats.pearsonr(npn_w.values, npn_ic.values)\ncorr2, _ = stats.pearsonr(pnp_w.values, pnp_ic.values)\n\nsns.lmplot('Potencia(W)', 'Ic(A)', data=tabela, hue='Polaridade')\nplt.text(20,8,'Pearson:{:.2f}'.format(corr1), color='blue')\nplt.text(40,2,'Pearson:{:.2f}'.format(corr2), color='orange')\nplt.show()","c83a8f28":"corr1, _ = stats.pearsonr(npn_hfe_max.values, npn_w.values)\ncorr2, _ = stats.pearsonr(pnp_hfe_max.values, pnp_w.values)\n\nsns.lmplot('hfe_max', 'Potencia(W)', data=tabela, hue='Polaridade')\nplt.text(150,50,'Pearson:{:.2f}'.format(corr1), color='blue')\nplt.text(550,30,'Pearson:{:.2f}'.format(corr2), color='orange')\nplt.show()","a77dd449":"from sklearn.cluster import KMeans","b0a362c6":"X_ = tabela[['VCE(V)', 'Ic(A)', 'Potencia(W)', 'hfe_min', 'hfe_max']] \n\n\n# Standard features\nfrom sklearn.preprocessing import StandardScaler\nX_numeric = pd.DataFrame(StandardScaler().fit_transform(X_), \n                        columns=['VCE(V)', 'Ic(A)', 'Potencia(W)', 'hfe_min', 'hfe_max'])","be7cae88":"from sklearn.metrics import silhouette_score\nn_clusters = [2,3,4,5,6,7,8,9,10] # n\u00famero e clusters\nclusters_inertia = [] \ns_scores = [] \n\nfor n in n_clusters:\n    KM_est = KMeans(n_clusters=n, init='k-means++').fit(X_numeric)\n    clusters_inertia.append(KM_est.inertia_)    # dados para o m\u00e9todo do cotovelo\n    silhouette_avg = silhouette_score(X_numeric, KM_est.labels_)\n    s_scores.append(silhouette_avg)","473c65f2":"fig, (axx1,axx2) = plt.subplots(1,2,figsize=(12,5))\nsns.lineplot(n_clusters, clusters_inertia, marker='o', ax=axx1)\naxx1.set_title(\"Elbow Method\")\naxx1.set_xlabel(\"number of clusters\")\naxx1.set_ylabel(\"clusters inertia \")\naxx1.axvline(4, ls=\"--\", c=\"red\")\naxx1.axvline(8, ls=\"--\", c=\"red\")\naxx1.grid()\n\nsns.lineplot(n_clusters, s_scores, marker='o', ax=axx2)\naxx2.set_title(\"Silhouette score method\")\naxx2.set_xlabel(\"number of clusters\")\naxx2.set_ylabel(\"Silhouette score\")\naxx2.axvline(4, ls=\"--\", c=\"red\")\naxx2.axvline(8, ls=\"--\", c=\"red\")\n\nplt.grid()\nplt.show()","16434ce3":"KM_4_clusters = KMeans(n_clusters=4, init='k-means++').fit(X_numeric) \n\nKM4_clustered = X_numeric.copy()\nKM4_clustered.loc[:,'Cluster'] = KM_4_clusters.labels_\n\nfig1, (axes) = plt.subplots(1,2,figsize=(12,5))\n\n\nscat_1 = sns.scatterplot('VCE(V)', 'hfe_max', data=KM4_clustered,\n                hue='Cluster', ax=axes[0], palette='Set1', legend='full')\n\nsns.scatterplot('Ic(A)', 'hfe_max', data=KM4_clustered,\n                hue='Cluster', palette='Set1', ax=axes[1], legend='full')\n\nplt.show()","51b1dce5":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(7, 7))\nax = Axes3D(fig, rect=[0, 0, .99, 1], elev=20, azim=210)\nax.scatter(KM4_clustered['VCE(V)'],\n           KM4_clustered['Ic(A)'],\n           KM4_clustered['hfe_max'],\n           c=KM4_clustered['Cluster'],\n           s=35, edgecolor='k', cmap=plt.cm.Set1)\n\nax.w_xaxis.set_ticklabels([])\nax.w_yaxis.set_ticklabels([])\nax.w_zaxis.set_ticklabels([])\nax.set_xlabel(\"VCE(V)\")\nax.set_ylabel(\"Ic(A)\")\nax.set_zlabel('hfe_max')\nax.set_title('K-Means for 4 clusters')\nax.dist = 12\n\nplt.show()","079e8204":"KM4_clust_sizes = KM4_clustered.groupby('Cluster').size().to_frame()\nKM4_clust_sizes.columns = [\"KM4_size\"]\nKM4_clust_sizes","88b5fd32":"KM8_clusters = KMeans(n_clusters=8, init='k-means++').fit(X_numeric) \n\nKM8_clustered = X_numeric.copy()\nKM8_clustered.loc[:,'Cluster'] = KM8_clusters.labels_\n\nfig1, (axes) = plt.subplots(1,2,figsize=(12,5))\n\nscat_2 = sns.scatterplot('VCE(V)', 'hfe_max', data = KM8_clustered,\n                hue='Cluster', ax=axes[0], palette='Set1', legend='full')\n\nsns.scatterplot('Ic(A)', 'hfe_max', data=KM8_clustered,\n                hue='Cluster', palette='Set1', ax=axes[1], legend='full')","df643cde":"fig = plt.figure(figsize=(7, 7))\nax = Axes3D(fig, rect=[0, 0, .99, 1], elev=20, azim=210)\nax.scatter(KM8_clustered['VCE(V)'],\n           KM8_clustered['Ic(A)'],\n            KM8_clustered['hfe_max'],\n           c=KM8_clustered['Cluster'],\n           s=35, edgecolor='k', cmap=plt.cm.Set1)\n\nax.w_xaxis.set_ticklabels([])\nax.w_yaxis.set_ticklabels([])\nax.w_zaxis.set_ticklabels([])\nax.set_xlabel(\"VCE(V)\")\nax.set_ylabel(\"Ic(A)\")\nax.set_zlabel('hfe_max')\nax.set_title('K-Means 8 clusters')\nax.dist = 12\n\nplt.show()","d8357156":"KM8_clust_sizes = KM8_clustered.groupby('Cluster').size().to_frame()\nKM8_clust_sizes.columns = [\"KM8_size\"]\nKM8_clust_sizes","31eed8f5":"from sklearn.cluster import DBSCAN","a266d71c":"from itertools import product\n\neps_values = np.arange(0.6,1.2,0.1) \nmin_samples = np.arange(3,10) \nDBSCAN_params = list(product(eps_values, min_samples))\n\nno_of_clusters = []\nsil_score = []\n\nfor p in DBSCAN_params:\n    DBS_clustering = DBSCAN(eps=p[0], min_samples=p[1]).fit(X_numeric)\n    no_of_clusters.append(len(np.unique(DBS_clustering.labels_)))\n    sil_score.append(silhouette_score(X_numeric, DBS_clustering.labels_))","7ff8f8c8":"tmp = pd.DataFrame.from_records(DBSCAN_params, columns =['Eps', 'Min_samples'])   \ntmp['No_of_clusters'] = no_of_clusters\n\npivot_1 = pd.pivot_table(tmp, values='No_of_clusters', index='Min_samples', columns='Eps')\n\nfig, ax = plt.subplots(figsize=(18,6))\nsns.heatmap(pivot_1, annot=True,annot_kws={\"size\": 16}, cmap=\"YlGnBu\", ax=ax)\nax.set_title('Number clusters')\nplt.show()","ea22d1fc":"# heat map for silhouette score\ntmp = pd.DataFrame.from_records(DBSCAN_params, columns =['Eps', 'Min_samples'])   \ntmp['Sil_score'] = sil_score\n\npivot_1 = pd.pivot_table(tmp, values='Sil_score', index='Min_samples', columns='Eps')\n\nfig, ax = plt.subplots(figsize=(18,6))\nsns.heatmap(pivot_1, annot=True, annot_kws={\"size\": 10}, cmap=\"YlGnBu\", ax=ax)\nplt.show()","b7946d19":"DBS_clustering = DBSCAN(eps=0.7, min_samples=3).fit(X_numeric)\n\nDBSCAN_clustered = X_numeric.copy()\nDBSCAN_clustered.loc[:,'Cluster'] = DBS_clustering.labels_","f2b1f5af":"DBSCAN_clust_sizes = DBSCAN_clustered.groupby('Cluster').size().to_frame()\nDBSCAN_clust_sizes.columns = [\"DBSCAN_size\"]\nDBSCAN_clust_sizes","b8be5bc5":"outliers = DBSCAN_clustered[DBSCAN_clustered['Cluster']==-1]\n\nfig2, (axes) = plt.subplots(1,2,figsize=(12,5))\n\n\nsns.scatterplot('VCE(V)', 'hfe_max',\n                data=DBSCAN_clustered[DBSCAN_clustered['Cluster']!=-1],\n                hue='Cluster', ax=axes[0], palette='Set1', legend='full', s=45)\n\nsns.scatterplot('Ic(A)', 'hfe_max',\n                data=DBSCAN_clustered[DBSCAN_clustered['Cluster']!=-1],\n                hue='Cluster', palette='Set1', ax=axes[1], legend='full', s=45)\n\naxes[0].scatter(outliers['VCE(V)'], outliers['hfe_max'], s=5, label='outliers', c=\"k\")\naxes[1].scatter(outliers['Ic(A)'], outliers['hfe_max'], s=5, label='outliers', c=\"k\")\naxes[0].legend()\naxes[1].legend()\n\nplt.setp(axes[0].get_legend().get_texts(), fontsize='10')\nplt.setp(axes[1].get_legend().get_texts(), fontsize='10')\n\nplt.show()","22ad2180":"clusters = pd.concat([KM4_clust_sizes,KM8_clust_sizes, DBSCAN_clust_sizes],axis=1, sort=False)\nclusters","03825db1":"## 2. Clearing data","d93b6f51":"Let's plot the heat map to show how many clusters were generated by the parameters","b1cb0921":"To choose the best combination of parameters for the algorithms, we created a matrix of combinations ","6924cedb":"d)Maximun gain","bd68ff4e":"To find an appropriate number of clusters, the elbow method will be used. In this method, for this case, we stipulate a number of clusters between 2 and 10. The rule is to choose the number of clusters where you see a twist or \"an elbow\" on the graph. ","edd2a1e5":"### ***4 clusters***","cbe7cdde":"a) Voltage","be2207b0":"The main objective of this project is to try to discover groups of equivalent transistors using clustering methods ","b49dcb9f":"The global maximum silhouette score was 0.51 for eps between 0.6 and 0.7 and min_samples between 3 and 4.\nWe will use these values in the DBSCAN model ","29f5cf31":"## 1. Reading data","f801aa99":"## 5. Comparison and conclusion \n","c92aeed3":"### ***8 clusters***","44dd7d8b":"e) Corelation","26355228":"# Transistors BC_BD","3b0243df":"The number of clusters varies from 9 to 2 \n","fb57e113":"b) Current","6a483b10":"## 4. Clustering","fcc6f601":"### 4.1 K-Means","0b618140":"## 3. EDA","3296928b":"Let's compare our results. The table below shows the sizes of the clusters found. ","a187c2f3":"Note that we have different numbers of clusters found for the models studied.\nDBSCAN classified 5 data as outliners, while K-Means created two different clusters using all the data.\n\nAs we obtain in the two models a response of 8 clusters with similar amounts of elements in each of the clusters, we can assume that there are eight groups of transistors with equivalent characteristics between each cluster. ","4be586e9":"c) Power","b3b72dff":"The DBSCAN model created eight clusters plus an outline (cluster -1).\nClusters (0-7) range in size from 4 to 20 elements.\nThere are 5 outilines. ","04f87d6b":"The elbow method points to a choice of 4 or 8.\nAs for the silhouette method, it indicates that the best option can be 5 or 4 respectively.\nLet's compare both. ","eb6eca2d":"### 4.2 DBSCAN"}}