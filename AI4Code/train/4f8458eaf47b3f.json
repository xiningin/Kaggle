{"cell_type":{"95890f17":"code","791a7a05":"markdown"},"source":{"95890f17":"# Importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Increment in online engagement per locality over time\ndef engagementAnalysis(districts, startMonth, stopMonth) :\n    # Start the data processing with district data\n    [rrDisctrict, ccDisctrict] = np.shape(districts)\n    count = 0\n    sumEngagementJan = 0\n    sumEngagementDec = 0\n    for i in range(rrDisctrict) : # rrDisctrict       \n        # Extract data\n        tempVar = districts.loc[i, 'district_id'] # Scanning through all the districts for a given locale\n        engagementFile = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/'+ str(tempVar) +'.csv'\n        # Read the specific Engagement data file\n        engagement = pd.read_csv(engagementFile)\n    \n        # Pre-process the engagement file\n        engagement['year'] = pd.DatetimeIndex(engagement['time']).year\n        engagement['month'] = pd.DatetimeIndex(engagement['time']).month\n    \n        # Get data from Jan, 2020 to Dec 2020 for a given district\n        engagementJan = engagement.loc[engagement['month'] == int(startMonth)]\n        engagementDec = engagement.loc[engagement['month'] == int(stopMonth)]\n        engagementJan = engagementJan.dropna()\n        engagementDec = engagementDec.dropna()\n        engagementJan = engagementJan.drop(['time'], axis = 1)\n        engagementDec = engagementDec.drop(['time'], axis = 1)\n        \n        # Group by engagement index\n        engJan = engagementJan['engagement_index'].mean()\n        engDec = engagementDec['engagement_index'].mean()\n        if np.isnan(engJan) == False and np.isnan(engDec) == False :\n            #print(engJan, engDec)\n            count = count + 1\n            sumEngagementJan = sumEngagementJan + engJan\n            sumEngagementDec = sumEngagementDec + engDec\n    \n    # Calculating the average\n    sumEngagementJan = sumEngagementJan \/ float(count)\n    sumEngagementDec = sumEngagementDec \/ float(count)\n    \n    return(((sumEngagementDec - sumEngagementJan) \/ float(sumEngagementJan))*100) # Increment per locality\n    \n# Reading data and pre-process them\ndistricts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')\nuniqueLocale = districts['locale'].unique()\n\n# Divide data as per locale\nsuburbArea = districts.loc[districts['locale'] == 'Suburb'].reset_index(drop=True)\nruralArea = districts.loc[districts['locale'] == 'Rural'].reset_index(drop=True)\ncityArea = districts.loc[districts['locale'] == 'City'].reset_index(drop=True)\ntownArea = districts.loc[districts['locale'] == 'Town'].reset_index(drop=True)\n\nmonthRange = [3, 6, 8, 12] # March, June, August, December\nsChangeOverMonth = []\nrChangeOverMonth = []\ncChangeOverMonth = []\ntChangeOverMonth = []\n\n# Computing\nfor i in range(len(monthRange)) :\n    sChange = engagementAnalysis(suburbArea, 1, monthRange[i])\n    sChangeOverMonth.append(sChange)\n    rChange = engagementAnalysis(ruralArea, 1, monthRange[i])\n    rChangeOverMonth.append(rChange)\n    cChange = engagementAnalysis(cityArea, 1, monthRange[i])\n    cChangeOverMonth.append(cChange)\n    tChange = engagementAnalysis(townArea, 1, monthRange[i])\n    tChangeOverMonth.append(tChange)\n\n# PLotting\nimport seaborn as sns\ndata = {'Suburb' : sChangeOverMonth,\n       'Rural' : rChangeOverMonth,\n       'City' : cChangeOverMonth,\n       'Town' : tChangeOverMonth,\n       'Time' : ['March', 'June', 'August', 'December']}\ndf = pd.DataFrame(data)\ntitleSNS = \"[%] change in engagement over time with respect to Jan, 2020\"\nsns.set_style(\"darkgrid\")\nsns.lineplot(x=\"Time\", y=\"value\", hue='variable', data = pd.melt(df, ['Time'])).set_title(titleSNS)","791a7a05":"# **Question 1: What is the overall trend of digital learning across different locales during January to December, 2020?**"}}